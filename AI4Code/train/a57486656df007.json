{"cell_type":{"331c0a7b":"code","2f2ba2f6":"code","fbd7dd80":"code","5ffef305":"code","ea56a79a":"code","1b13e68e":"code","236af61e":"code","4df9fac9":"code","cd35e0a7":"code","5c053f0a":"code","a6f8c045":"code","f53ea238":"code","5a602fb1":"code","697367a1":"code","524f33f9":"code","abca4061":"code","67f53c7a":"code","8349c76f":"code","edca98d8":"code","9391820a":"code","93e164d3":"code","60952d63":"code","45a5fe0f":"code","5bcd67b3":"code","5d1f9d74":"code","cb40fd79":"code","44906824":"code","e841a1f8":"code","96edff57":"code","3551ad94":"code","b324ad7f":"code","97a8cdc1":"code","18229a05":"markdown","5fe182aa":"markdown","f4d85ffd":"markdown","4cc1e3cb":"markdown","18c74a7c":"markdown","c87722e7":"markdown","a34264a5":"markdown","9de5b6fb":"markdown","7af9c477":"markdown"},"source":{"331c0a7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f2ba2f6":"df = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv')","fbd7dd80":"df.head()","5ffef305":"df.shape","ea56a79a":"df.isnull().sum()","1b13e68e":"df.dtypes","236af61e":"df['transmission'].value_counts()","4df9fac9":"df['fuelType'].value_counts()","cd35e0a7":"df['model'].value_counts()","5c053f0a":"import seaborn as sns \nimport matplotlib.pyplot as plt \nplt.figure(figsize=(12,10))\nax = sns.heatmap(df.corr())","a6f8c045":"fig = plt.figure(figsize = (20,15))\nax = fig.gca()\ndf.hist(ax=ax)\nplt.show()","f53ea238":"df = pd.get_dummies(data=df, columns=['model','transmission','fuelType'])","5a602fb1":"df.shape","697367a1":"X = df.drop('price',axis=1)\ny = df['price']","524f33f9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=0.33)","abca4061":"from sklearn.metrics import mean_squared_error as MSE \nfrom sklearn.linear_model import Ridge","67f53c7a":"model_1 = Ridge(alpha=1.0)\nmodel_1.fit(X_train, y_train)","8349c76f":"model_1.score(X_test,y_test)","edca98d8":"y_pred = model_1.predict(X_test) \nnp.sqrt(MSE(y_test, y_pred)) ","9391820a":"import xgboost as xg ","93e164d3":"model_2 = xg.XGBRegressor(objective ='reg:linear', \n                  n_estimators = 10, seed = 123) \n  \nmodel_2.fit(X_train, y_train) \n","60952d63":"model_2.score(X_test,y_test)","45a5fe0f":"y_pred = model_2.predict(X_test) \n  \nnp.sqrt(MSE(y_test, y_pred)) ","5bcd67b3":"from sklearn.linear_model import ElasticNet\nmodel_3 = ElasticNet(random_state=0)\nmodel_3.fit(X_train, y_train)","5d1f9d74":"y_pred = model_3.predict(X_test)   \nnp.sqrt(MSE(y_test, y_pred)) ","cb40fd79":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping","44906824":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=25)","e841a1f8":"model = Sequential()\n\nmodel.add(Dense(38,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam',loss='mse')","96edff57":"model.fit(x=X_train, \n          y=y_train, \n          epochs=600,\n          validation_data=(X_test, y_test),\n          callbacks=[early_stop]\n          )","3551ad94":"losses = pd.DataFrame(model.history.history)\nlosses.plot()","b324ad7f":"y_pred = model.predict(X_test)","97a8cdc1":"np.sqrt(MSE(y_test,y_pred))","18229a05":"# Model One-> Ridge","5fe182aa":"## Loading Data ","f4d85ffd":"#  Model Four -> NN","4cc1e3cb":"# Exploring Data","18c74a7c":"# Model Two -> Xgboost","c87722e7":"# Visualizing Data","a34264a5":"# Split Data ","9de5b6fb":"## One Hot Encoding ","7af9c477":"# Model Three -> ElasticNet"}}