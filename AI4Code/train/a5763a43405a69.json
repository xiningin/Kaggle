{"cell_type":{"674db5de":"code","b605e39a":"code","efaaae9b":"code","f1a31cb5":"code","9908cd93":"code","53307d8d":"code","ed197e4a":"code","406d3f4a":"code","30b3667f":"code","e70f0d50":"code","6b0423eb":"code","b9493186":"code","ea68d261":"code","f6c74df6":"code","98831fdd":"code","805641bb":"code","490d1878":"code","083138f1":"code","55ca731f":"code","9b0adbaa":"code","c0ac7e4a":"code","7206fb36":"code","7baeb27b":"code","0a266600":"code","c0bfa9e7":"code","91fa0806":"code","b84325cd":"code","ee456602":"code","92ed6f2c":"code","2ec14a21":"code","e6be7432":"code","6fc65123":"code","d9c5c997":"code","704f2956":"code","9684303f":"code","b11d9895":"code","197ccc2a":"code","97425a6e":"code","6657ce20":"code","d8d75510":"markdown","8ae34327":"markdown","bb42821c":"markdown","79d5fada":"markdown","b8938d3d":"markdown","7ee58621":"markdown","170f5d0b":"markdown","8dbba0d5":"markdown","e039a83c":"markdown","ace5190f":"markdown"},"source":{"674db5de":"from bs4 import BeautifulSoup as bs\nimport requests","b605e39a":"r = requests.get('https:\/\/en.wikipedia.org\/wiki\/Tenet_(film)')\nsoup = bs(r.content)\ncontents = soup.prettify()   #print(contents)  - nice print","efaaae9b":"infobox = soup.find(class_='infobox vevent')   #locating the table under the movie's poster\ninfo_rows = infobox.find_all('tr')","f1a31cb5":"def get_content_value(row_data):\n    \"\"\"\n    Adding movie creators to the list.\n    \"\"\"\n    if row_data.find('li'):\n        return [li.get_text(' ',strip=True).replace('\\xa0',' ') \\\n                for li in row_data.find_all('li')]\n    elif row_data.find('br'):   #In case actors are separated by <br> tag\n        return [text for text in row_data.stripped_strings] \n    \n    else:\n        return row_data.get_text(' ',strip=True).replace('\\xa0','')","9908cd93":"#Example of saving movie's data\nmovie_info = {}\nfor index, row in enumerate(info_rows):\n    if index == 0:\n        movie_info['title'] = row.find('th').get_text(' ',strip=True)\n    elif index == 1:\n        continue\n    else:\n        content_key = row.find('th').get_text(' ',strip=True)\n        content_value = get_content_value(row.find('td'))\n        movie_info[content_key] = content_value\nmovie_info","53307d8d":"def clean_tags(soup):\n    \"\"\"\n    Cleans from references.\n    \"\"\"\n    for tag in soup.find_all(['sup','span']):\n        tag.decompose()\n\ndef get_info_box(url):\n    \"\"\"\n    Takes the table from url.\n    \"\"\"\n    \n    r = requests.get(url)\n    soup = bs(r.content)\n    \n    infobox = soup.find(class_='infobox vevent')\n    info_rows = infobox.find_all('tr')\n    clean_tags(soup)\n    movie_info = {}\n    for index, row in enumerate(info_rows):\n        if index == 0:\n            movie_info['title'] = row.find('th').get_text(' ',strip=True)\n        \n        else:\n            header = row.find('th')\n            if header:\n                content_key = row.find('th').get_text(' ',strip=True)\n                content_value = get_content_value(row.find('td'))\n                movie_info[content_key] = content_value\n    return movie_info\n","ed197e4a":"get_info_box('https:\/\/en.wikipedia.org\/wiki\/Hair_Love')","406d3f4a":"a = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_Academy_Award-winning_films')\nsoup1 = bs(a.content)\ninfobox1 = soup1.select('.wikitable.sortable i a') #taking all the movies from the table\n\nbase_path = 'https:\/\/en.wikipedia.org\/'\nmovie_info_list = []\n\nfor index,movie in enumerate(infobox1):\n    if index == 50:\n        print(index)\n    try:\n        relative_path = movie['href']\n        full_path = base_path+relative_path\n        title = movie['title']\n        movie_info_list.append(get_info_box(full_path))\n    except Exception as e:  #Checking errors\n        print(movie.get_text())\n        print(e)","30b3667f":"len(movie_info_list)","e70f0d50":"import json\n\ndef save_data(title,data):\n    with open(title,'w',encoding='utf-8') as f:\n        json.dump(data,f,ensure_ascii=False,indent=2)\n        \ndef load_data(title):\n    with open(title,encoding='utf-8') as f:\n        return json.load(f)","6b0423eb":"save_data('oscar_data_cleaned.json',movie_info_list)","b9493186":"movie_info_list = load_data('..\/input\/oscar-data-clean-json\/oscar_data_cleaned.json')","ea68d261":"movie_info_list[-10]['Running time']\n","f6c74df6":"#Convert running time into integers\ndef minutes_to_integer(running_time):\n    \"\"\"\n    Transforms the running time to integer.\n    \"\"\"\n    if running_time == 'N\/A':\n        return None  \n    elif isinstance(running_time,list):\n        entry = running_time[0]\n        value = int(entry.split(' ')[0])\n        return value\n    else:\n        value = running_time.split(' ')[0]\n        value = value.split(':')[0]\n        return value\ndeleted_titles = ['Funny Girl','Fanny and Alexander','War and Peace','Mister Roberts',\\\n                  'The Walls of Malapaga','Wings']  #Movies with non-ordinary time length\n    \nfor movie in movie_info_list:\n    \n    if movie['title'] in deleted_titles:\n        movie_info_list.remove(movie)\n        continue\n        #print(movie)\n        #print(movie['Running time'])\n    movie['Running time (int)'] = minutes_to_integer(movie.get('Running time','N\/A'))","98831fdd":"\n#[movie.get('Budget','N\/A') for movie in movie_info_list]","805641bb":"import re\n#Converts budgets and box offices into integers\namounts = r\"thousand|million|billion\"\nnumber = r\"\\d+(,\\d{3})*\\.*\\d*\"\n\nword_re = fr\"\\${number}(-|\\sto\\s|\u2014)?({number})?\\s({amounts})\"\nvalue_re = fr\"\\${number}\"\n\ndef word_to_value(word):\n    \"\"\"\n    Transforms word to numerical representation.\n    \"\"\"\n    value_dict = {\"thousand\":1000,'million':1000000,'billion':1000000000}\n    return value_dict[word]\n\ndef parse_word_syntax(string):\n    \"\"\"\n    Transforms budget, which contains words.\n    \"\"\"\n    value_string = re.search(number,string).group()\n    value = float(value_string.replace(',',''))\n    word = re.search(amounts,string,flags = re.I).group()\\\n                                            .lower()#flags for the case with upper case\n                                                        #('Million')\n    word_value = word_to_value(word)\n    return value*word_value\n\ndef parse_value_syntax(string):\n    \"\"\"\n    Transforms budget, which doesn't contain any words.\n    \"\"\"\n    value_string = re.search(number,string).group()\n    value = float(value_string.replace(',',''))\n    return value\n\ndef money_conversion(money):\n    \"\"\"\n    Transforms string containing budget to numerical representation.\n    \"\"\"\n    if money == 'N\/A':\n        return None\n    \n    if isinstance(money,list):  #If there are several values in a list\n        money = money[0]\n    \n    word_syntax = re.search(word_re,money,flags=re.I)   #If money has words\n    value_syntax = re.search(value_re,money) #If it doesn't have words\n    \n    if word_syntax:\n        return parse_word_syntax(word_syntax.group())\n    elif value_syntax:\n        return parse_value_syntax(value_syntax.group())\n    else:\n        return None\nprint(money_conversion('$790 Million'))","490d1878":"for movie in movie_info_list:\n    movie['Budget (float)'] = money_conversion(movie.get('Budget','N\/A'))\n    movie['Box office (float)'] = money_conversion(movie.get('Box office','N\/A'))","083138f1":"movie_info_list[300]","55ca731f":"print([movie.get('Release date','N\/A') for movie in movie_info_list])","9b0adbaa":"#Converts dates into datetimes\nfrom datetime import datetime\ndates = [movie.get('Release date','N\/A') for movie in movie_info_list]\n\ndef clean_date(date):\n    \"\"\"\n    Cleans the date from info in brackets.\n    \"\"\"\n    date = date.split('(')[0].strip()\n    return date\n    \ndef date_conversion(date):\n    \"\"\"\n    Transforms release date into datetime format.\n    \"\"\"\n    if isinstance(date,list):\n        date = date[0]\n    if date == 'N\/A':\n        return None\n        \n    date_str = clean_date(date)    \n    \n    fmts =['%B %d, %Y','%d %B %Y']\n    for fmt in fmts:\n        try:\n            return datetime.strptime(date_str,fmt)\n        except:\n            pass\n    return None  ","c0ac7e4a":"for movie in movie_info_list:\n    movie['Release date (datetime)'] = date_conversion(movie.get('Release date','N\/A'))","7206fb36":"movie_info_list[0]","7baeb27b":"import pickle\n\ndef save_pickle(name,data):\n    with open(name, 'wb') as a:\n        pickle.dump(data, a, protocol=pickle.HIGHEST_PROTOCOL)\n\ndef load_pickle(name):\n    with open(name, 'rb') as a:\n        b = pickle.load(a)\n        return b","0a266600":"save_pickle('oscar_data_cleaned_more.pickle',movie_info_list)","c0bfa9e7":"movie_info_list = \\\nload_pickle('..\/input\/oscar-data-cleaned-more-pickle\/oscar_data_cleaned_more.pickle')","91fa0806":"#http:\/\/www.omdbapi.com\/?apikey=[yourkey]&","b84325cd":"import os\nimport urllib\n\nbase_link = 'http:\/\/www.omdbapi.com\/?'\n\ndef omdb_info(title):\n    \"\"\"\n    Gets info from the omdb web-site(special api for movie scores) for a specific movie.\n    You need to download your own apikey from base_link for this function.\n    \"\"\"\n    \n    parameters = {'apikey':os.environ['OMDB_API_KEY'],'t':title}\n    params_encoded = urllib.parse.urlencode(parameters)\n    full_link = base_link + params_encoded\n    return requests.get(full_link).json()\n\ndef get_rotten_tomatoes_score(omdb_info):\n    \"\"\"\n    As Rotten Tomatoes score is contained in a specific dictionary,\n    we will return it if we find it.\n    \"\"\"\n    ratings = omdb_info.get('Ratings',[])\n    for rating in ratings:\n        if rating['Source'] == 'Rotten Tomatoes':\n            return rating['Value']\n    return None\n            \n\ninfo = omdb_info('A Beautiful Mind')\ninfo\nprint(get_rotten_tomatoes_score(info))","ee456602":"for index,movie in enumerate(movie_info_list):\n    if index % 50 == 0:\n        print(index)\n    title = movie['title']\n    omdb = omdb_info(title)\n    movie['IMDB'] = omdb.get('imdbRating',None)\n    movie['Metascore'] = omdb.get('Metascore',None)\n    movie['Rotten Tomatoes'] = get_rotten_tomatoes_score(omdb)","92ed6f2c":"#As I'm not a subscriber of the Patreon, I don't get ratings after making 1000 requests a day\nmovie_info_list[-100]","2ec14a21":"save_pickle('oscar_data_final.pickle',movie_info_list)","e6be7432":"movie_info_list = load_pickle('..\/input\/oscar-data-final\/oscar_data_final.pickle')","6fc65123":"movie_info_copy = [movie.copy() for movie in movie_info_list]","d9c5c997":"movie_info_copy[20]","704f2956":"for movie in movie_info_copy:\n    date = movie['Release date (datetime)']\n    if date:\n        movie['Release date (datetime)'] = date.strftime('%B %d, %Y') \n        #Change it to save to json\n    else:\n        movie['Release date (datetime)'] = None","9684303f":"save_data('oscar_data_final.json',movie_info_copy)","b11d9895":"import pandas as pd\n\ndf = pd.DataFrame(movie_info_list)","197ccc2a":"df.head()","97425a6e":"df.to_csv('oscar_data_final.csv')","6657ce20":"df.info()","d8d75510":"# Saving data into pickle format","8ae34327":"### Subtasks\n- ~~Clean up refs~~\n- ~~Convert running time into integers~~\n- ~~Convert dates into datetime object~~\n- ~~Split up the long strings~~\n- ~~Convert Budget & Box offices to numbers~~","bb42821c":"Datetime object can't be saved in **json** format. That's why **pickle** is used.","79d5fada":"# Clean data","b8938d3d":"# Web-scraping with Python","7ee58621":"# Solving the task for every Oscar movie","170f5d0b":"The idea is to take each movie from Wikipedia page https:\/\/en.wikipedia.org\/wiki\/List_of_Academy_Award-winning_films and to store each movie's table(which is under its poster). The table contains each movie's actors, directors, running time, budget, etc. <br>\nNext work includes reformatting some data and getting IMDB score for each movie.<br>\nCredits to https:\/\/www.youtube.com\/watch?v=Ewgy-G9cmbg, where I found this task for the Disney movie dataset.","8dbba0d5":"# Save\/reload Movie data","e039a83c":"# Save data as json and csv","ace5190f":"# Attach IMDB\/Rotten Tomatoes\/Metascore scores"}}