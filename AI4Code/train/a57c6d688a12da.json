{"cell_type":{"ca041503":"code","377221a2":"code","3bd6a0ec":"code","910867c2":"code","2f91c879":"code","e838c8c5":"code","a3098b66":"code","3c3475ad":"code","f44f84c4":"markdown","edf7ee6d":"markdown","dfb59b63":"markdown","f94afb8b":"markdown","b1021030":"markdown","987b1990":"markdown","5a88d472":"markdown","60c5b5ac":"markdown","a379b213":"markdown"},"source":{"ca041503":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.backend as K","377221a2":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv', nrows=100_000)\ntrain['R'] = train['R'].astype(str)\ntrain['C'] = train['C'].astype(str)\ntrain = pd.get_dummies(train)\n\ny = train['pressure']\ny = y.to_numpy().reshape(-1, 80)\n\nfeatures = [col for col in train.columns if col not in ['id', 'breath_id', 'pressure']]\nX = train[features]","3bd6a0ec":"X.head(10)","910867c2":"RS = RobustScaler()\nfe2 = [col for col in X.columns if col not in ['u_out']] # no need to scale u_out\nX[fe2] = RS.fit_transform(X[fe2])","2f91c879":"X = X.reshape(-1, 80, X.shape[-1])\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=42)","e838c8c5":"# u_out_index must be set to a correct value!\ndef ventilation_mae_loss(y_true, y_pred, input_tensor, u_out_index=2):\n    w = 1 - tf.expand_dims(input_tensor[:, :, u_out_index], axis=2)\n    mae = w * K.abs(y_true - y_pred)\n    # Don't calculate MAE for w = 0 (u_out = 1) - avoids division by zero\n    bool_mask = tf.cast(w, dtype=tf.bool)\n    w = tf.boolean_mask(w, bool_mask)\n    mae = tf.boolean_mask(mae, bool_mask)\n    return K.mean(K.sum(mae, axis=-1) \/ K.sum(w, axis=-1))","a3098b66":"def get_model(input_shape):\n    inputs = tf.keras.Input(input_shape)\n    x = L.Bidirectional(L.LSTM(128, return_sequences=True))(inputs)\n    x = L.Bidirectional(L.LSTM(64, return_sequences=True))(x)\n    x = L.Dense(64, activation='selu')(x)\n    outs = L.Dense(1)(x)\n    targets = tf.keras.Input((80, 1))\n    \n    model = tf.keras.Model([inputs, targets], outs)\n    model.add_loss(ventilation_mae_loss(targets, outs, inputs))\n    model.compile(optimizer=\"adam\", loss=None)\n    return model","3c3475ad":"model = get_model(X_train.shape[-2:])\nhistory = model.fit(x=[X_train, y_train], y=None, \n                  validation_data=([X_valid, y_valid], None), \n                  epochs=3, \n                  batch_size=32)","f44f84c4":"Let's test it!","edf7ee6d":"## Read data","dfb59b63":"Since this notebook is just a demonstration of a custom loss, a simple `train_test_split` is sufficient here. We will use only first 100,000 rows from train data file.","f94afb8b":"We define custom loss with usage of `tf.keras.backend` as function of three arguments - `y_true`, `y_pred` and `input_tensor`.","b1021030":"The loss given NaNs without scaling, so let's do it.","987b1990":"A simple model based on one LSTM block is defined below, which is sufficient for our purposes. ","5a88d472":"This notebook shows how to implement custom loss used in Google Brain - Ventilator Pressure Prediction competition in TensorFlow. This solution is inspired by https:\/\/stackoverflow.com\/a\/66966915.\n\nHave any questions or suggestions? Please comment below.\n\n**<font color='red'>And if you liked this notebook, please upvote it!<\/font>**","60c5b5ac":"## Import packages","a379b213":"## Model definition"}}