{"cell_type":{"e917b695":"code","f9c32114":"code","2f056398":"code","73794ae9":"code","1288897a":"code","aad5fff1":"code","a3679273":"code","f868a839":"code","7fb56c81":"code","5181aff3":"code","97dd2c40":"code","da5630f8":"code","a4e9ce7e":"code","47d87d1c":"code","36608b8d":"code","b2c056a6":"code","080b9f83":"code","583a4f2e":"code","4d394a77":"code","c36db4a3":"code","09023832":"code","9e1a4670":"code","fa46d9cd":"code","19441514":"code","3e2e76d1":"code","0b8fb980":"code","ea35f68b":"code","31ab1c9f":"code","2d4c0289":"code","fb523e47":"code","90c436c6":"code","d7463971":"code","b858f413":"code","6e5dc776":"code","5d515d6b":"code","6041b0af":"code","3708238e":"code","1cddd8ff":"code","b8bde1ee":"code","2b8ca99e":"code","7d55da37":"code","7a365d22":"code","2e9b1b7d":"code","2698e18e":"code","ecd77dc0":"code","c9783d42":"code","8d521dc2":"code","7f5ed91a":"code","6c9542f6":"code","95c78479":"code","929231cd":"code","53deb71a":"code","b339734e":"code","2104bb4b":"code","7e9a6aa8":"code","f3fab902":"code","19da3dd2":"code","6f97b1bb":"code","37fb9f16":"code","0a1abe1a":"code","34a13e68":"code","32f6e1e9":"code","d9bf4bb0":"code","4c47b2a2":"code","b6fd7c23":"code","268acdad":"code","90030d24":"code","9df1c6c8":"code","4c4b707a":"code","73d08acd":"code","b0e53214":"code","e2f2b955":"code","5edf67b1":"code","893aa20f":"code","e13c2bff":"code","99733599":"code","247493e1":"code","0d5c9c3d":"code","c7c2149d":"code","18bc80c0":"code","ed4e3577":"code","d52debba":"code","f05c5b01":"code","9690d493":"code","ae82a2ff":"code","c2bf73fa":"code","004ba45f":"code","e45d90af":"code","90505eff":"code","e7a7e88e":"code","7948912a":"code","49d36b3a":"code","8bc9486d":"code","5c37ed53":"code","c3e70631":"code","d3e8748e":"code","258c93c8":"code","f7b9561c":"code","05f81029":"markdown","437329f0":"markdown","3b21d2c9":"markdown","7e10419f":"markdown","0d351ea1":"markdown","0bd68ca6":"markdown","c4ae69fe":"markdown","15fe58c1":"markdown","dc35d277":"markdown","a82992f2":"markdown","c78dcc9e":"markdown","0d1cc976":"markdown","7fb51990":"markdown","ca9163e9":"markdown","6f6bf076":"markdown","563de457":"markdown","40cad662":"markdown","67a60da8":"markdown","71a694f1":"markdown","c8321c64":"markdown","354f903f":"markdown","86e4ca39":"markdown","1d6a0000":"markdown","f8d9f7da":"markdown","463fc120":"markdown","8e9ac81a":"markdown","673b8c4f":"markdown","a8852c10":"markdown","a4ba6676":"markdown","8df5ec7a":"markdown","8fedc14c":"markdown","3364525f":"markdown"},"source":{"e917b695":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9c32114":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom scipy.stats import norm\nfrom scipy import stats\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nimport warnings\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","2f056398":"df=pd.read_csv(\"..\/input\/melbourne-housing-market\/Melbourne_housing_FULL.csv\")\ndf.head(10)","73794ae9":"df.shape #check the number of observations and variables","1288897a":"df.info()","aad5fff1":"df['Price'].isna().sum() #total number of missins values in 'Price'","a3679273":"df['Price'].isna().sum()\/df['Price'].count() #missing values from column 'Price' takes up 27% of the total observations\n# it is difficult to get the real selling price of those properties, I decided to remove those rows for further analysis","f868a839":"df.dropna(how='any', subset=['Price'],inplace = True) #after dropping rows without price info, 27247 observations are kept.","7fb56c81":"sns.distplot(df['Price'])\nplt.show()","5181aff3":"# Identify object columns\nprint(df.select_dtypes(['object']).columns)","97dd2c40":"# Convert objects to categorical variables\nobj_cats = ['Suburb', 'Address', 'Type', 'Method', 'SellerG', 'CouncilArea','Regionname']\n\nfor colname in obj_cats:\n    df[colname] = df[colname].astype('category') ","da5630f8":"df.groupby('Suburb')['Suburb'].count().nlargest(20)","a4e9ce7e":"P_Suburb_top10=df.groupby('Suburb')['Price'].median().nlargest(10).apply(lambda x: '%.5f' % x).reset_index()\nP_Suburb_top10","47d87d1c":"P_Suburb_top10['Price'] = P_Suburb_top10['Price'].astype(str).astype(float).round(0)","36608b8d":"import seaborn as sns\nplt.figure(figsize=(10,5))\nsns.set(style=\"whitegrid\")\nax = sns.scatterplot(x=\"Suburb\", y=\"Price\", data=P_Suburb_top10, s=100)\nplt.xticks(rotation=70)\nplt.tight_layout()","b2c056a6":"P_Suburb = df[df['Suburb'].isin(P_Suburb_top10['Suburb'].to_list())]\nP_Suburb ","080b9f83":"\nsns.scatterplot(data =P_Suburb, x='Suburb', y='Price')\nplt.xticks(rotation=90)\nplt.show()","583a4f2e":"#plt.figure(figsize=(20,5))\n#sns.catplot(x=\"Suburb\", y=\"Price\", hue=\"Type\",\n#            kind=\"violin\", data=P_Suburb)\n#plt.xticks(rotation=90)\n#plt.show()","4d394a77":"#address","c36db4a3":"df['Address']","09023832":"# new data frame with split value columns \nnew = df[\"Address\"].str.split(\" \", n = 1, expand = True) \nnew","9e1a4670":"# making separate first name column from new data frame \ndf[\"HouseNum\"]= new[0] \n  \n# making separate last name column from new data frame \ndf[\"StreetName\"]= new[1] ","fa46d9cd":"# Dropping old Name columns \ndf.drop(columns =[\"Address\",'HouseNum'], inplace = True) \n  \n# df display \ndf ","19441514":"df.groupby('Type')['Price'].mean().apply(lambda x: '%.5f' % x)","3e2e76d1":"plt.figure(figsize=(20,5))\nsns.boxplot(data=df, x='Type', y='Price')\nplt.show()","0b8fb980":"#remove outliner by IQR","ea35f68b":"df.groupby('SellerG')['Price'].median().nlargest(10).apply(lambda x: '%.5f' % x).reset_index()\n","31ab1c9f":"# Convert to date object\ndf['Date'] = pd.to_datetime(df['Date'])","2d4c0289":"df.info()","fb523e47":"df.groupby('Suburb')['Propertycount'].value_counts().head(20)","90c436c6":"df.groupby('Suburb')['Postcode'].count()","d7463971":"plt.figure(figsize=(20,5))\nsns.boxplot(data=df, x='Regionname', y='Price')\nplt.show()","b858f413":"df[(df['Regionname'] == 'South-Eastern Metropolitan') & (df['StreetName'] == 'Bevis St')].sort_values(by=['Price'],ascending=False)","6e5dc776":"df.drop([19583], inplace = True)","5d515d6b":"df[(df['Regionname'] == 'Southern Metropolitan') & (df['StreetName'] == 'Cole St')].sort_values(by=['Price'],ascending=False)","6041b0af":"df.drop([25635], inplace = True)","3708238e":"df[(df['Regionname'] == 'Northern Metropolitan') & (df['StreetName'] == 'St Kilda Rd')].sort_values(by=['Price','Date'],ascending=False)","1cddd8ff":"df.drop([25204], inplace = True)","b8bde1ee":"plt.figure(figsize=(20,5))\nsns.boxplot(data=df, x='Regionname', y='Price')\nplt.show()","2b8ca99e":"plt.figure(figsize=(20,5))\nsns.boxplot(data=df, x='Type', y='Price')\nplt.show()","7d55da37":"# Convert numeric variables to categorical\nnum_cats = ['Postcode']  \n\nfor colname in num_cats:\n    df[colname] = df[colname].astype('category')   \n\n# Confirm changes\ndf.info()","7a365d22":"df[['Rooms','Bedroom2','Bathroom']]","2e9b1b7d":"# Drop columns\ndf = df.drop(['Bedroom2'],1)","2698e18e":"df.Date.sort_values(ascending=False) #The last transaction happened on Oct.03rd, 2018. I assume the dataset is collected in end of 2018.19","ecd77dc0":"# Add age variable\ndf['Age'] = 2019 - df['YearBuilt']\n\n# Identify historic homes\ndf['Historic'] = np.where(df['Age']>=50,'Historic','Contemporary')\n\n# Convert to Category\ndf['Historic'] = df['Historic'].astype('category')","c9783d42":"df.info()","8d521dc2":"df['Location']= df[\"Suburb\"].astype(str) +\", \"+ df[\"StreetName\"] ","7f5ed91a":"df['Location'] = df['Location'].astype('category')","6c9542f6":"df.isnull().sum() #missing data","95c78479":"# Percentage of missing values\ndf.isnull().sum()\/len(df)*100","929231cd":"df[df['Distance'].isna() == True]","53deb71a":"#To remove rows missing data in a specific column \n# dataset =dataset[pd.notnull(dataset['Price'])]\ndf = df.dropna()","b339734e":"df.describe().transpose()","2104bb4b":"df[df['BuildingArea']==0]","7e9a6aa8":"df[df['Landsize']==0]","f3fab902":"# Remove outlier\ndf = df[df['BuildingArea']!=0]","19da3dd2":"# Confirm removal\ndf.describe().transpose()","6f97b1bb":"plt.figure(figsize=(13, 5))\nsns.distplot(df['Price'],bins=30,\n            hist_kws = {'color':'steelblue', 'edgecolor':'lightgrey',\n                       'linewidth':2, 'linestyle':'-', 'alpha':0.7},\n            kde_kws = {'color':'darkblue', \n                       'linewidth':2, 'linestyle':'--', 'alpha':0.9})\n#plt.title(\"House Price\", fontsize = 15)\nplt.xlabel(\"House Price\", fontsize = 15)\nplt.legend()\nplt.show()\nplt.show()","37fb9f16":"df['Price'].skew()","0a1abe1a":"# Identify categorical features\ndf.select_dtypes(['category']).columns","34a13e68":"# Abbreviate Regionname categories\ndf['Regionname'] = df['Regionname'].map({'Northern Metropolitan':'N Metro',\n                                            'Western Metropolitan':'W Metro', \n                                            'Southern Metropolitan':'S Metro', \n                                            'Eastern Metropolitan':'E Metro', \n                                            'South-Eastern Metropolitan':'SE Metro', \n                                            'Northern Victoria':'N Vic',\n                                            'Eastern Victoria':'E Vic',\n                                            'Western Victoria':'W Vic'})","32f6e1e9":"# Suplots of categorical features v price\nsns.set_style('darkgrid')\nf, axes = plt.subplots(2,2, figsize = (15,15))\n\n# Plot [0,0]\nsns.boxplot(data = df, x = 'Type', y = 'Price', ax = axes[0,0])\naxes[0,0].set_xlabel('Type')\naxes[0,0].set_ylabel('Price')\naxes[0,0].set_title('Type v Price')\n\n# Plot [0,1]\nsns.boxplot(x = 'Method', y = 'Price', data = df, ax = axes[0,1])\naxes[0,1].set_xlabel('Method')\n#axes[0,1].set_ylabel('Price')\naxes[0,1].set_title('Method v Price')\n\n# Plot [1,0]\nsns.boxplot(x = 'Regionname', y = 'Price', data = df, ax = axes[1,0])\naxes[1,0].set_xlabel('Regionname')\n#axes[1,0].set_ylabel('Price')\naxes[1,0].set_title('Regionname v  Price')\n\n# Plot [1,1]\nsns.boxplot(x = 'Historic', y = 'Price', data = df, ax = axes[1,1])\naxes[1,1].set_xlabel('Historic')\n#axes[1,1].set_ylabel('Price')\naxes[1,1].set_title('Historic v Price')\n\n# Plot [2,0]\n#sns.boxplot(x = 'SellerG', y = 'Price', data = df, ax = axes[1,0])\n#axes[1,0].set_xlabel('SellerG')\n#axes[1,0].set_ylabel('Price')\n#axes[1,0].set_title('SellerG v Price')\n#axes[1,0].set_xticklabels(axes[1,0].get_xticklabels(),rotation=50)\n\n# Plot [2,1]\n#sns.boxplot(x = 'CouncilArea', y = 'Price', data = df, ax = axes[1,1])\n#axes[1,1].set_xlabel('CouncilArea')\n#axes[1,1].set_ylabel('Price')\n#axes[1,1].set_title('CouncilArea v Price')\n#axes[1,1].set_xticklabels(axes[1,1].get_xticklabels(),rotation=50)\n\nplt.show()","d9bf4bb0":"# CouncilArea vs Price\nplt.figure(figsize=(25,20))\nsns.boxplot(x = 'CouncilArea', y = 'Price', data = df)\nplt.xlabel('CouncilArea')\nplt.ylabel('Price')\nplt.title('CouncilArea v Price')\nplt.xticks(rotation=90)\nplt.show()","4c47b2a2":"# CouncilArea vs Price\nplt.figure(figsize=(25,20))\nsns.boxplot(x = 'SellerG', y = 'Price', data = df)\nplt.xlabel('SellerG')\nplt.ylabel('Price')\nplt.title('SellerG v Price')\nplt.xticks(rotation=90)\nplt.show()","b6fd7c23":"# Identify numeric features\ndf.select_dtypes(['float64','int64']).columns","268acdad":"# Suplots of numeric features v price\nsns.set_style('darkgrid')\nf, axes = plt.subplots(4,2, figsize = (20,30))\n\n# Plot [0,0]\naxes[0,0].scatter(x = 'Rooms', y = 'Price', data = df, edgecolor = 'b')\naxes[0,0].set_xlabel('Rooms')\naxes[0,0].set_ylabel('Price')\naxes[0,0].set_title('Rooms v Price')\n\n# Plot [0,1]\naxes[0,1].scatter(x = 'Distance', y = 'Price', data = df, edgecolor = 'b')\naxes[0,1].set_xlabel('Distance')\n# axes[0,1].set_ylabel('Price')\naxes[0,1].set_title('Distance v Price')\n\n# Plot [1,0]\naxes[1,0].scatter(x = 'Bathroom', y = 'Price', data = df, edgecolor = 'b')\naxes[1,0].set_xlabel('Bathroom')\naxes[1,0].set_ylabel('Price')\naxes[1,0].set_title('Bathroom v Price')\n# Plot [1,1]\naxes[1,1].scatter(x = 'Car', y = 'Price', data = df, edgecolor = 'b')\naxes[1,0].set_xlabel('Car')\naxes[1,1].set_ylabel('Price')\naxes[1,1].set_title('Car v Price')\n\n# Plot [2,0]\naxes[2,0].scatter(x = 'Landsize', y = 'Price', data = df, edgecolor = 'b')\naxes[2,0].set_xlabel('Landsize')\naxes[2,0].set_ylabel('Price')\naxes[2,0].set_title('Landsize v  Price')\n\n# Plot [2,1]\naxes[2,1].scatter(x = 'BuildingArea', y = 'Price', data = df, edgecolor = 'b')\naxes[2,1].set_xlabel('BuildingArea')\naxes[2,1].set_ylabel('BuildingArea')\naxes[2,1].set_title('BuildingArea v Price')\n\n# Plot [3,0]\naxes[3,0].scatter(x = 'Age', y = 'Price', data = df, edgecolor = 'b')\naxes[3,0].set_xlabel('Age')\naxes[3,0].set_ylabel('Price')\naxes[3,0].set_ylabel('Age v Price')\n# Plot [3,1]\naxes[3,1].scatter(x = 'Propertycount', y = 'Price', data = df, edgecolor = 'b')\naxes[3,1].set_xlabel('Propertycount')\n#axes[3,1].set_ylabel('Price')\naxes[3,1].set_title('Property Count v Price')\n\nplt.show()","90030d24":"df['AreaPerRoom'] = df['BuildingArea']\/df['Rooms']","9df1c6c8":"df.sort_values(by = 'AreaPerRoom').head(50)","4c4b707a":"df = df[df['AreaPerRoom'] >1]","73d08acd":"df.sort_values(by = 'AreaPerRoom').head(50)","b0e53214":"sns.scatterplot(x = 'Rooms', y = 'Price', data = df, edgecolor = 'b')","e2f2b955":"# Pairplot\nsns.pairplot(df,vars= ['Rooms', 'Price', 'Distance', 'Bathroom', 'Car', 'Landsize','BuildingArea',  'Propertycount','Age'], palette = 'viridis')\nplt.show()","5edf67b1":"plt.figure(figsize=(10,6))\nsns.heatmap(df.corr(),cmap = 'coolwarm',linewidth = 1,annot= True, annot_kws={\"size\": 9})\nplt.title('Variable Correlation')\nplt.show()","893aa20f":"sns.regplot(x='Rooms',y='Price',data=df)\nplt.title(\"Number of Rooms vs Price\") #Add plot title\nplt.ylabel(\"Price\") #Adjust the label of the y-axis\nplt.xlabel(\"Number of Rooms\") \nplt.show()","e13c2bff":"#change categorical variables into dummy variables\n#Use Type, CouncilArea, Regionname, Historic\n","99733599":"df.drop(columns=['Suburb','Method', 'Postcode', \n       'YearBuilt', 'CouncilArea', 'Lattitude', 'Longtitude', \n       'Propertycount','AreaPerRoom','StreetName'], inplace = True)","247493e1":"df.info()","0d5c9c3d":"df['Type'] = df['Type'].map({'u':0,'t':1,'h':2}).astype('int')","c7c2149d":"df = pd.get_dummies(df, columns=['Regionname','Historic'])","18bc80c0":"# Dataset splitting\n\n#feature scaling\n#from sklearn.preprocessing import MinMaxScaler\n#scaler = MinMaxScaler() \n\nX1 = df.drop(['Price','SellerG', 'Date','Location'], axis=1)\n\n# Create target variable\ny1 = df['Price']\n\n# Train, test, split\n\nX1_train, X1_test, y1_train, y1_test = train_test_split(X1,y1, test_size = .20, random_state= 0)","ed4e3577":"# Fit model to training data\nlm_regressor = LinearRegression().fit(X1_train,y1_train)\n","d52debba":"# Predict\n# Predicting test set results\ny_pred = lm_regressor.predict(X1_test)","f05c5b01":"# Score It\nprint('MAE:',metrics.mean_absolute_error(y1_test,y_pred))\nprint('MSE:',metrics.mean_squared_error(y1_test,y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y1_test,y_pred)))","9690d493":"# Calculated R Squared\nprint('R^2 =',metrics.explained_variance_score(y1_test,y_pred))","ae82a2ff":"lm_regressor.score(X1_test, y1_test)","c2bf73fa":"df.info()","004ba45f":"from sklearn import preprocessing \n# label_encoder object knows how to understand word labels. \nlabel_encoder = preprocessing.LabelEncoder()\n# Encode labels in column 'species'. \ndf['SellerG']= label_encoder.fit_transform(df['SellerG']) \ndf['Location']= label_encoder.fit_transform(df['Location']) ","e45d90af":"X2 = df.drop(['Price','Date'], axis=1)\n\n\n# Create target variable\ny2 = df['Price']\n\n# Train, test, split\n\nX2_train, X2_test, y2_train, y2_test = train_test_split(X2,y2, test_size = .20, random_state= 0)\n\n#turn the dates into categorical variables using sklearn's OneHotEncoder. What it does is create a new variable for each distinct date.","90505eff":"# create regressor object \nrf_regressor = RandomForestRegressor(bootstrap=True, random_state=0, n_jobs=2) ","e7a7e88e":"# fit the regressor with x and y data \nrf_regressor.fit(X2_train,y2_train)","7948912a":"#feature importance\nplt.figure(figsize=(25,20))\nimportance = pd.DataFrame({'feature':X2_train.columns, 'importance': np.round(rf_regressor.feature_importances_,3)})\nimportance = importance.sort_values('importance', ascending=False).set_index('feature')\nimportance.plot(kind='bar', rot=90)\nplt.show()","49d36b3a":"final = ['BuildingArea','Regionname_S Metro','Age','Distance',\n         'Landsize','Location','Regionname_E Metro','Rooms', \n         'SellerG', 'Bathroom','Type','Car']\n","8bc9486d":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\n\nparam_grid = dict(n_estimators=[10, 25, 50, 100],\n                  max_depth=[5, 10, 20, 30],\n                  min_samples_leaf=[1,2,4])\n\ngrid = GridSearchCV(rf_regressor, param_grid, cv=10,\n                    scoring='neg_mean_squared_error')\ngrid.fit(X2_train,y2_train)","5c37ed53":"#Set the model paramters after tunning.\nrf_regressor = RandomForestRegressor(bootstrap=True, ccp_alpha=0.0,\n                                             criterion='mse', max_depth=None,\n                                             max_features='auto',\n                                             max_leaf_nodes=None,\n                                             max_samples=None,\n                                             min_impurity_decrease=0.0,\n                                             min_impurity_split=None,\n                                             min_samples_leaf=1,\n                                             min_samples_split=2,\n                                             min_weight_fraction_leaf=0.0,\n                                             n_estimators=100, n_jobs=2,\n                                             oob_score=False, random_state=0,\n                                             verbose=0, warm_start=False) ","c3e70631":"# fit the regressor with x and y data \nrf_regressor.fit(X2_train,y2_train)","d3e8748e":"y2_pred = rf_regressor.predict(X2_test)  # test the output by changing values ","258c93c8":"from sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y2_test, y2_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y2_test, y2_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y2_test, y2_pred)))","f7b9561c":"# Calculated R Squared\nprint('R^2 =',metrics.explained_variance_score(y2_test,y2_pred))","05f81029":"Weak Positive Correlation <br>\nAge and Price<br>\n\nModerate Positive Correlation<br>\nRooms and Price<br>\nBathrooms and Price<br>\nBuilding Area and Price<br>\n\nThe Rooms, Bathroom, and BuildingArea features are also moderately correlated with one another as they are all measures of home size.<br>","437329f0":"# Duplicate Variables\nAccording to dataset documentation, 'Rooms' and 'Bedroom2' both contain information on the number of rooms of a home has, but reported from different sources. I will investigate these columns further to determine if one should be removed from the dataset.","3b21d2c9":"# CORRELATION\nNext, I explore how all the variables are correlated with one another.","7e10419f":"Insights <br>\nMedian prices for houses are over $1M, townhomes are $800k - $900k and units are approx $500k. <br>\nHome prices with different selling methods are relatively the same across the board.<br>\nMedian prices in the Metropolitan Region are higher than than that of Victoria Region - with Southern Metro being the area with the highest median home price (~$1.3M).<br>\nWith an average price of $1M, historic homes (older than 50 years old) are valued much higher than newer homes in the area, but have more variation in price.<br>","0d351ea1":"The differences between these variables are minimal so keeping both would only be duplicating information. Thus, the Bedroom2 feature will be removed from the data set altogether to allow for better analysis downstream.","0bd68ca6":"Above two properties are quite similar however the price of one property is ten times of the other one. There is high possibility that the price for 19583 was an spelling error - an exta 0 was put. I will remove this entry","c4ae69fe":"# EXPLORATORY ANALYSIS\nUNIVARIATE <br>\nThe dependent (or target) variable we are trying to predict in this analysis is Price. This variable appears to be normally distributed and skewed to the right. That is, the majority of homes around $900k with some outliers around $8M.","15fe58c1":"Regression Evaluation Metrics\nThree common evaluation metrics for regresson problems:\n\nMean Absolute Error (MAE)\nMean Squared Error (MSE)\nRoot Mean Squared Error (RMSE)\nAll basic variations on the difference between what you predicted and the true values.\nComparing these metrics:\n\nMAE is the easiest to understand, because it's the average error.\nMSE more popular than MAE, because MSE \"punishes\" larger errors, tends to be useful in the real world.\nRMSE is even more popular than MSE, because RMSE is interpretable in the \"y\" units (target units) .\n\nAll of these are loss functions, because we want to minimize them.","dc35d277":"After additional research, I determined that a zero land size could be indicative of 'zero-lot-line' homes - residential real estate in which the structure comes up to or very near the edge of the property line. Therefore, these observations are valid and will remain the data set.\n\nHowever, the observation with a 'zero' BuildingArea will be removed because it is not possible for a home to have a size of zero unless it is a piece of land. But then the dataset shows number of rooms. So the BuildingArea cannot be zero if the property has rooms. So it is an error in the data point, those observation will be removed.","a82992f2":"It is easy to impute the distance info for above entry, the distance is the same to other properties in the same street.But this entry misses too much info. I will not impute info for this entry","c78dcc9e":"BIVARIATE <br>\nCategorical Features <br>\nNext, I'll take a look at the relationships between the target variable and the categorical features. Suburb, Address, and Postcode are measures based on location. Rather than using all of these features in the analysis, Regionname would be the best proxy of home location to use for analysis that gets to the heart of this information in a more condensed way.\n\nBased on domain knowledge, a home's real estate agent or council member has a minimal effect on a price relative to other features and will be excluded from further analysis. <br>","0d1cc976":"The price of house 25635 looks like an outliner. Though its landsize is the largest but the price is more than doubled of the second largerst house. So I will remove it.","7fb51990":"# Model 1 LINEAR REGRESSION","ca9163e9":"# Categorical Variables","6f6bf076":"Create a new feature called location by combining Suburb and StreetName. The house in the same street and same suburb should have some similarities in prices.","563de457":"South Metropolitaan has the highest price.","40cad662":"# Numeric Variables\nA statistical summary of the numeric variables above indicates that Postcode is being treated as numeric when it should be identified as categorical. This feature will need to be converted to the correct data type.","67a60da8":"# Model 2 Random Forest","71a694f1":"# **First glace at the price - dependent variable**","c8321c64":"# Missing Values of Dependent Variable","354f903f":"# Feature Engineering\nThe dataset contains the year the home was built. Although this is being measured by the specific year, what this variable is really probing is the age of the home. As such, home age can be expressed in terms of historic (greater than 50 years old) vs non-historic (less than 50 years old) to get the heart of this information in a more condensed way, allowing for better analysis and visualization.","86e4ca39":"Suburb Canterbury has the highest price","1d6a0000":"VARIABLE TYPES <br>\nCategorical Variables\nBased on the information below, the following variables: 'Suburb', 'Address', 'Type', 'Method', 'SellerG', 'CouncilArea', 'Regionname' will need to be specified as categories rather than general objects.<br>\n\nIn addition, the Date variable will need to be converted to a date object.<br>","f8d9f7da":"Insights <br>\n\nThe majority of homes in the dataset have 4 or 5 rooms.\nThe most prominent trend is that there is a negative correlation between Distance from Melbourne's Central Business District (CBD) and Price. The most expensive homes ($2M or more) tend to be within 20km of the CBD.","463fc120":"# MISSING DATA\nBased on a quick look at the number of entries for each variable, there appears to be missing information in the dataset. I will explore which features are missing the most information.","8e9ac81a":"Above first two properties are quite similar however the price of one property is theree times of the second one. I will remove this entry","673b8c4f":"Dataset included 34857 observations and 21 variables. <br>\nTarget Feature - the response feature is square_price <br>\nDescriptive Features - <br>\nSuburb: Suburb <br>\nAddress: Address <br>\nRooms: Number of rooms <br>\nType: br - bedroom(s); h - house,cottage,villa, semi,terrace; u - unit, duplex; t - townhouse; dev site - development site; o res - other residential. <br>\nPrice: Price in dollars <br>\nMethod: S - property sold; SP - property sold prior; PI - property passed in; PN - sold prior not disclosed; SN - sold not disclosed; NB - no bid; VB - vendor bid; W - withdrawn prior to auction; SA - sold after auction; SS - sold after auction price not disclosed. N\/A - price or highest bid not available. <br>\nSellerG: Real Estate Agent <br>\nDate: Date sold <br>\nDistance: Distance from CBD <br>\nPostCode: Postal Code<br>\nRegionname: General Region (West, North West, North, North east \u2026etc) <br>\nPropertycount: Number of properties that exist in the suburb. <br>\nBedroom2 : Scraped # of Bedrooms (from different source) <br>\nBathroom: Number of Bathrooms <br>\nCar: Number of carspots <br>\nLandsize: Land Size <br>\nBuildingArea: Building Size <br>\nYearBuilt: Year the house was built <br>\nCouncilArea: Governing council for the area <br>\nLattitude: Self explanitory <br>\nLongtitude: Self explanitory <br>","a8852c10":"The average price of house is around 1.2 Million, townhouse is around 931 thousand, unit is around 627 thousand. ","a4ba6676":"# Numeric Features\nNext, I visualize the relationships between numeric features in the dataset and price.","8df5ec7a":"Remove outliers\nMany houses' Area Per Room is less than or equivalent to 1. Which is almost impossible. I will remove those entries.","8fedc14c":"# Remove outliners","3364525f":"There are a significant amount of missing values in Price, Bathroom, Car, Landsize, Building Area, YearBuilt, Council Area, Lattitude, and Longitude. To allow for a more complete analysis, observations missing any data will be removed from the dataset."}}