{"cell_type":{"11f3630d":"code","e770999e":"code","bd1a1107":"code","7ece5284":"code","f28baa2e":"code","be9709c1":"code","2552c1b1":"code","3bd22ddd":"code","24ac65e9":"code","6275fd5d":"code","3262f897":"code","96dcd356":"code","a9270463":"code","4383b508":"code","897042dc":"code","31c74f42":"code","31a7b4dd":"code","6c9ab8ac":"code","7709d698":"markdown","b0562203":"markdown","1bc2bc39":"markdown","5fefad4d":"markdown","d2d26502":"markdown","76d64d68":"markdown","e397e5d3":"markdown","3ad7ef99":"markdown","57cc1146":"markdown"},"source":{"11f3630d":"from IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n@import url('https:\/\/fonts.googleapis.com\/css2?family=Source+Code+Pro&display=swap');\n<\/style>\n\"\"\")","e770999e":"import collections\nimport json\nimport os\nimport uuid\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image, ImageDraw\nimport tifffile as tiff \nimport seaborn as sns\n\nfrom skimage.measure import label, regionprops\nimport cv2","bd1a1107":"! cd ..\/input\/hubmap-kidney-segmentation\/train && ls","7ece5284":"TRAIN_PATH = \"..\/input\/hubmap-kidney-segmentation\/train\/\"\nTEST_PATH = \"..\/input\/hubmap-kidney-segmentation\/test\/\"\n## Extra dataset information about all the training images\ndataset_info = pd.read_csv(\"..\/input\/hubmap-kidney-segmentation\/HuBMAP-20-dataset_information.csv\")\nprint(dataset_info.shape)\ndataset_info.head(13).T","f28baa2e":"## Training dataset information\ntrain_df = pd.read_csv(\"..\/input\/hubmap-kidney-segmentation\/train.csv\")\ntrain_df.head().T # Contains the training image id and the RLE","be9709c1":"# Looking into the anatomical_structure json files\nwith open(TRAIN_PATH + train_df.iloc[4, 0] + \"-anatomical-structure.json\") as f:\n    data = json.load(f)\n# print(json.dumps(data[0], indent=4, sort_keys=True))\nprint(data[0]) # Looking into the first Glomerulus coordinates","2552c1b1":"## Looking into a single training image\nimage1 = tiff.imread(TRAIN_PATH + train_df.iloc[4, 0] + \".tiff\")\nprint(train_df.iloc[1, 0], \" training image with a shape of -->\", image1.shape)","3bd22ddd":"## The kidney tissue image\nimage1 = image1[0][0].transpose(1, 2, 0)\nplt.figure(figsize=(10, 10))\nplt.imshow(image1)\nplt.show()","24ac65e9":"## We need to decode the mask from encoding column of train.csv\n## https:\/\/www.kaggle.com\/paulorzp\/rle-functions-run-lenght-encode-decode\ndef mask2rle(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels= img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n \ndef rle2mask(mask_rle, shape):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    print(starts, ends)\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T","6275fd5d":"## Plot all the Glomeruli in this particular kidney\nmask1 = rle2mask(train_df.iloc[4, 1], (image1.shape[1], image1.shape[0])) # Call the RLE2Mask function","3262f897":"## The same kidney image with all the masks\nplt.figure(figsize=(10, 10))\nplt.imshow(image1)\nplt.imshow(mask1, alpha=0.5, cmap='plasma')\nplt.show()","96dcd356":"## Identify all the coordinates of the glomeruli in this image\nlbl_0 = label(mask1) \nprops = regionprops(lbl_0)\nlen(props) ## There are 198 glomeruli's identified\nbboxes = [] ## Convert all the 198 items into bounding boxes so we can save these images for training\nfor prop in props:\n    bboxes.append([prop.bbox[0] - 30, prop.bbox[1] - 30, \n                   prop.bbox[2] + 30, prop.bbox[3] + 30]) ## Adding a little bit of extra image run","a9270463":"## From the above algorithm we identify and plot a single glomeruli from the kidney\nplt.figure(figsize=(10, 10))\nplt.imshow(image1[bboxes[0][0]:bboxes[0][2], bboxes[0][1]:bboxes[0][3], :])\nplt.imshow(mask1[bboxes[0][0]:bboxes[0][2], bboxes[0][1]:bboxes[0][3]], alpha=0.5, cmap='plasma')\nplt.show()","4383b508":"## Let's look into some more of these glomeruli\nfig, axes = plt.subplots(2, 5, figsize=(20, 8))\nval = 10\nfor i in range(2):\n    for j in range(5):\n        axes[i, j].imshow(image1[bboxes[val][0]:bboxes[val][2], bboxes[val][1]:bboxes[val][3], :]); val += 1\n        axes[i, j].axis('off')\nplt.show()","897042dc":"## Glomeruli with masks\nfig, axes = plt.subplots(2, 5, figsize=(20, 8))\nval = 10\nfor i in range(2):\n    for j in range(5):\n        axes[i, j].imshow(image1[bboxes[val][0]:bboxes[val][2], bboxes[val][1]:bboxes[val][3], :])\n        axes[i, j].imshow(mask1[bboxes[val][0]:bboxes[val][2], bboxes[val][1]:bboxes[val][3]], alpha=0.5, cmap='plasma')\n        axes[i, j].axis('off'); val += 1\nplt.show()","31c74f42":"## Only masks\nfig, axes = plt.subplots(2, 5, figsize=(20, 8))\nval = 10\nfor i in range(2):\n    for j in range(5): \n        axes[i, j].imshow(mask1[bboxes[val][0]:bboxes[val][2], bboxes[val][1]:bboxes[val][3]], cmap='gray')\n        axes[i, j].axis('off'); val += 1\nplt.show()","31a7b4dd":"## I will be only creating dataset for this one image, but you will have to create the data using all the 8 images\n## I will also be using the Albumentation package for generating image augmented data\nimport albumentations as A\n\naugment = A.Compose([\n    A.ShiftScaleRotate(),\n    A.HorizontalFlip(p=1),\n    A.CLAHE(p=1),\n    A.RandomRotate90(),\n    A.ElasticTransform(),\n], p=1)\n\naugmented = augment(image=image1[bboxes[3][0]:bboxes[3][2], bboxes[3][1]:bboxes[3][3], :], \\\n                    mask=mask1[bboxes[3][0]:bboxes[3][2], bboxes[3][1]:bboxes[3][3]]) ## Apply first transformation\naugmented2 = augment(image=image1[bboxes[3][0]:bboxes[3][2], bboxes[3][1]:bboxes[3][3], :], \\\n                    mask=mask1[bboxes[3][0]:bboxes[3][2], bboxes[3][1]:bboxes[3][3]]) ## Apply second transformation","6c9ab8ac":"## From the above algorithm we identify and plot a single glomeruli from the kidney\nfig, axes = plt.subplots(2, 3, figsize=(15, 8))\n\naxes[0, 0].imshow(image1[bboxes[3][0]:bboxes[3][2], bboxes[3][1]:bboxes[3][3], :]); axes[0, 0].axis('off')\naxes[1, 0].imshow(mask1[bboxes[3][0]:bboxes[3][2], bboxes[3][1]:bboxes[3][3]], cmap='gray'); axes[1, 0].axis('off')\n\naxes[0, 1].imshow(augmented['image']); axes[0, 1].axis('off')\naxes[1, 1].imshow(augmented['mask']); axes[1, 1].axis('off')\n\naxes[0, 2].imshow(augmented2['image']); axes[0, 2].axis('off')\naxes[1, 2].imshow(augmented2['mask']); axes[1, 2].axis('off')\n\nplt.show()","7709d698":"# Dataset and Goal\nThe dataset contains images of kidneys 11 fresh frozen and 9 Formalin Fixed Paraffin Embedded (FFPE) PAS kidney images. <br>\nThere can be over 600,000 glomeruli in each human kidney, each with a range from 100-350\u03bcm. <br>\n**Goal:** Develop segmentation algorithms that identify glomeruli in the PAS stained microscopy data.\n\n## Map of the training and testing images\n*8 train .tiff images* <br>\n*5 test .tiff images*","b0562203":"# Reference \ud83c\udfdb\n\n[1] [Nayu.T.S's Visualization NB](https:\/\/www.kaggle.com\/nayuts\/hubmap-let-s-visualize-and-understand-dataset)","1bc2bc39":"## There we go, we have identified a Glomeruli, it's mask and it's corresponding BBOX","5fefad4d":"# Decoding and adding the mask","d2d26502":"# Looking into one random image from the train dataset","76d64d68":"# Generating the dataset","e397e5d3":"<h1 style=\"font-family: 'Source Code Pro', monospace\">Why Glomelular Identification ?<\/h1>\n\n<span style=\"font-family: 'Source Code Pro', monospace\">Unless things go wrong, most of us don\u2019t spend much time thinking about what it takes to urinate, but in fact, your kidneys and urinary system are quite amazing. Together they receive over a liter of blood each minute, and eliminate around 1.5 litres of urine per day, efficiently getting rid of excess water and waste products that would otherwise cause you some serious problems.<\/span>\n    \n<h3 style=\"font-family: 'Source Code Pro', monospace\">What is Glomelular filtration ?<\/h3>\n<span style=\"font-family: 'Source Code Pro', monospace\">Glomerular filtration is the first step in making urine. It is the process that your kidneys use to filter excess fluid and waste products out of the blood into the urine collecting tubules of the kidney, so they may be eliminated from your body.<\/span>\n\n![image.png](attachment:image.png)\nhttps:\/\/www.khanacademy.org\/test-prep\/mcat\/organ-systems\/the-renal-system\/a\/renal-physiology-glomerular-filtration","3ad7ef99":"# Get bounding boxes for all the Glomeruli","57cc1146":"# HuBMAP - Simple getting started with Image, Mask and Bounding Box\n<h4 style=\"font-family: 'Source Code Pro', monospace\">Version 9: Also contains how to generate the dataset on your own<\/h4>\n<a href=\"https:\/\/www.kaggle.com\/ckanth090\/hubmap-5185x256x256-image-and-masks\">Link to my dataset - contains 5185x256x256 images<\/a><br><br>\n\n\n### Contents\n1. [Glomerular Identification meaning](#Why-Glomelular-Identification-?)\n2. [Dataset and Goal](#Dataset-and-Goal)\n3. [Looking into one image](#Looking-into-one-random-image-from-the-train-dataset)\n4. [Decoding and adding the mask](#Decoding-and-adding-the-mask)\n5. [Get bounding boxes for all the glomeruli](#Get-bounding-boxes-for-all-the-glomeruli)\n6. [Vizualization](#There-we-go,-we-have-identified-a-Glomeruli,-it's-mask-and-it's-corresponding-BBOX)"}}