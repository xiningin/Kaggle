{"cell_type":{"7e8880c1":"code","77635533":"code","fd79c3f7":"code","225bdd1b":"code","8e5e208b":"code","3767778f":"code","cfab1fc6":"code","f6f36093":"code","8e88ea82":"code","95b79f81":"code","e0527d77":"markdown"},"source":{"7e8880c1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\nimport re\nimport operator\nimport math\nimport random\nrandom.seed(42)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom deap import gp\nfrom deap import algorithms\nfrom deap import base\nfrom deap import creator\nfrom deap import tools","77635533":"def Pset(names):\n    # Define new functions\n    def ifelse(input, output1, output2):\n        return output1 if input else output2\n \n    def or_(left, right):\n        return int(left) | int(right)\n        \n    def and_(left, right):\n        return int(left) & int(right)\n    \n    def xor_(left, right):\n        return int(left) ^ int(right)\n\n    def abs_(inp):\n        return abs(inp)\n    \n    def pDiv(left, right):\n        try:\n            return left \/ right\n        except ZeroDivisionError:\n            return 1\n\n    def pPow(left, right):\n        try:\n            return abs(left) ** min(float(right),8)\n        except ZeroDivisionError:\n            return 1\n        except OverflowError:\n            return 1\n    \n    def pSqrt(inp):\n        return math.sqrt(abs(inp))\n    \n    pset = gp.PrimitiveSet(\"MAIN\", len(names))\n    pset.addPrimitive(pDiv, 2)\n    #pset.addPrimitive(pPow, 2)\n    pset.addPrimitive(pSqrt, 1)\n    pset.addPrimitive(abs_, 1)\n    pset.addPrimitive(operator.add, 2)\n    pset.addPrimitive(operator.sub, 2)\n    pset.addPrimitive(operator.mul, 2)\n    pset.addPrimitive(operator.neg, 1)\n    #pset.addPrimitive(ifelse, 3)\n    #pset.addPrimitive(operator.lt, 2)\n    #pset.addPrimitive(operator.le, 2)\n    #pset.addPrimitive(operator.eq, 2)\n    #pset.addPrimitive(operator.ne, 2)\n    #pset.addPrimitive(operator.gt, 2)\n    #pset.addPrimitive(operator.ge, 2)\n    #pset.addPrimitive(operator.not_, 1) \n    #pset.addPrimitive(and_, 2)\n    #pset.addPrimitive(or_, 2)\n    #pset.addPrimitive(xor_, 2)\n    pset.addPrimitive(math.floor, 1)\n    pset.addPrimitive(math.tanh, 1)\n    pset.addPrimitive(math.sin, 1)\n    pset.addPrimitive(math.cos, 1)\n    pset.addPrimitive(max, 2)\n    pset.addPrimitive(min, 2)\n\n    #for i in range(25):\n    #    pset.addEphemeralConstant(f\"c{i}\", lambda: round(random.random()+0.001,2))\n        \n    #pset.addTerminal(False)\n    #pset.addTerminal(True)\n    pset.addTerminal(50.0)    \n    pset.addTerminal(10.0)        \n    pset.addTerminal(5.0)    \n    pset.addTerminal(2.0)\n    pset.addTerminal(1.0)\n    pset.addTerminal(0.5)\n    pset.addTerminal(0.4)\n    pset.addTerminal(0.3)\n    pset.addTerminal(0.2)\n    pset.addTerminal(0.1)\n    pset.addTerminal(0.05)\n    pset.addTerminal(0.02)\n    pset.addTerminal(0.01)    \n\n    # Rename arguments with columns names\n    for i, a in enumerate(pset.arguments):\n        new_name = names[i]\n        pset.arguments[i] = new_name\n        pset.mapping[new_name] = pset.mapping[a]\n        pset.mapping[new_name].value = new_name\n        del pset.mapping[a]\n\n    return pset\n\ndef mydeap(mungedtrain, target, seed=42, mxvl=37, ngen=125, pop=200):\n\n    inputs = mungedtrain.values.tolist()\n    outputs = target.values.tolist()\n\n    pset = Pset(list(mungedtrain.columns))\n    \n    creator.create(\"FitnessMin\", base.Fitness, weights=(1.0,))\n    creator.create(\"Individual\", gp.PrimitiveTree, fitness=creator.FitnessMin)\n    \n    toolbox = base.Toolbox()\n    toolbox.register(\"expr\", gp.genHalfAndHalf, pset=pset, min_=1, max_=3)\n    toolbox.register(\"individual\", tools.initIterate, creator.Individual, toolbox.expr)\n    toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n    toolbox.register(\"compile\", gp.compile, pset=pset)\n    \n    def evalSymbReg(individual):\n        # Transform the tree expression in a callable function\n        func = toolbox.compile(expr=individual)\n        # Evaluate the accuracy\n        return sum(round(1.-(1.\/(1.+np.exp(-func(*in_))))) == out for in_,\n                   out in zip(inputs, outputs))\/len(mungedtrain),\n    \n    toolbox.register(\"evaluate\", evalSymbReg)\n    toolbox.register(\"select\", tools.selTournament, tournsize=5)\n    toolbox.register(\"mate\", gp.cxOnePoint)\n    toolbox.register(\"expr_mut\", gp.genFull, min_=0, max_=3)\n    toolbox.register(\"mutate\", gp.mutUniform, expr=toolbox. expr_mut, pset=pset)\n    #toolbox.register(\"map\", dtm.map)\n    \n    toolbox.decorate(\"mate\", gp.staticLimit(key=operator.attrgetter(\"height\"), max_value=mxvl))\n    toolbox.decorate(\"mutate\", gp.staticLimit(key=operator.attrgetter(\"height\"), max_value=mxvl))\n   \n    random.seed(seed)\n\n    pop = toolbox.population(n=pop)\n    hof = tools.HallOfFame(1)\n    \n    stats_fit = tools.Statistics(lambda ind: ind.fitness.values)\n    stats_size = tools.Statistics(len)\n    mstats = tools.MultiStatistics(fitness=stats_fit, size=stats_size)\n    mstats.register(\"avg\", np.mean)\n    #mstats.register(\"std\", np.std)\n    #mstats.register(\"min\", np.min)\n    mstats.register(\"max\", np.max)\n    \n    pop, log = algorithms.eaSimple(pop, toolbox, cxpb=0.65, mutpb=0.35, ngen=ngen,\n                                   stats=mstats, halloffame=hof, verbose=True)\n\n    print(hof[0])\n    print(hof[0].fitness.values)\n    return hof[0], toolbox","fd79c3f7":"def Outputs(data):\n    return np.round(1.-(1.\/(1.+np.exp(-data))))\n\n# Define function to extract titles from passenger names\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n            return title_search.group(1)\n    return \"\"\n\ndef PrepData(data):\n    data['IsNull'] = data.isnull().sum(axis=1)\n    data['Ticket'] = data['Ticket'].str.lower().replace('\\W', '')\n    # Sex\n    data.Sex.fillna(0, inplace=True)\n    data.loc[data.Sex != 'male', 'Sex'] = 1\n    data.loc[data.Sex == 'male', 'Sex'] = 0\n    data['NameLen'] = data['Name'].apply(len)\n    bin_num = 4\n    data['NameLen'] = pd.qcut(data['NameLen'], bin_num,labels=list(range(bin_num))).astype(float)   \n    # Feature that tells whether a passenger had a cabin on the Titanic\n    data['Has_Cabin'] = data[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n    # Create new feature FamilySize as a combination of SibSp and Parch\n    data['FamilySize'] = data['SibSp'] + data['Parch'] + 1\n    # Create new feature IsAlone from FamilySize\n    data['isFamily'] = 1\n    data.loc[data['isFamily'] == 1, 'notAlone'] = 0\n    # Create a new feature Title, containing the titles of passenger names\n    data['Title'] = data['Name'].apply(get_title)\n    # Group all non-common titles into one single grouping \"Rare\"\n    mapping = {'Mlle': 'Rare', 'Major': 'Mr', 'Col': 'Mr', 'Sir': 'Rare', 'Rev': 'Mr',\n               'Don': 'Mr', 'Mme': 'Rare', 'Jonkheer': 'Mr', 'Lady': 'Mrs',\n               'Capt': 'Mr', 'Countess': 'Rare', 'Ms': 'Miss', 'Dona': 'Rare'}\n    data.replace({'Title': mapping}, inplace=True)\n    # Mapping titles\n    title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \"Master\": 3, \"Rare\": 4}\n    data['Title'] = data['Title'].map(title_mapping)\n    data['Title'] = data['Title'].fillna(0)\n    # Remove all NULLS in the Embarked column\n    data['Embarked'].fillna(method='backfill', inplace=True)\n    # Mapping Embarked\n    data['Embarked'] = data['Embarked'].map( {'C': 1, 'Q': 2, 'S': 0} ).astype(int)\n    # Remove all NULLS in the Fare column and create a new feature\n    data['Fare'] = data['Fare'].fillna(train['Fare'].median())\n    # Mapping Fare\n    data.loc[ data['Fare'] <= 7.91, 'Fare'] = 0\n    data.loc[(data['Fare'] > 7.91) & (data['Fare'] <= 14.454), 'Fare'] = 1\n    data.loc[(data['Fare'] > 14.454) & (data['Fare'] <= 31), 'Fare'] = 2\n    data.loc[ data['Fare'] > 31, 'Fare'] = 3\n    data['Fare'] = data['Fare'].astype(int)\n    # Cabin\n    data.Cabin.fillna('0', inplace=True)\n    data.loc[data.Cabin.str[0] == 'A', 'Cabin'] = 1\n    data.loc[data.Cabin.str[0] == 'B', 'Cabin'] = 2\n    data.loc[data.Cabin.str[0] == 'C', 'Cabin'] = 3\n    data.loc[data.Cabin.str[0] == 'D', 'Cabin'] = 4\n    data.loc[data.Cabin.str[0] == 'E', 'Cabin'] = 5\n    data.loc[data.Cabin.str[0] == 'F', 'Cabin'] = 6\n    data.loc[data.Cabin.str[0] == 'G', 'Cabin'] = 7\n    data.loc[data.Cabin.str[0] == 'T', 'Cabin'] = 8\n    data['Cabin'] = data['Cabin'].astype(int)\n    # Fillna Age\n    grouped = data.groupby(['Sex','Pclass', 'Title'])\n    data['Age'] = grouped['Age'].apply(lambda x: x.fillna(x.median()))\n    data['Age'] = data['Age'].astype(int)\n    # select females and masters (boys)\n    boy = (data['Name'].str.contains('Master')) | ((data['Sex']==0) & (data['Age']<13))\n    female = data['Sex']==1\n    boy_or_female = boy | female   \n    # no. females + boys on ticket\n    n_ticket = data[boy_or_female].groupby('Ticket').Survived.count()\n    # survival rate amongst females + boys on ticket\n    tick_surv = data[boy_or_female].groupby('Ticket').Survived.mean()\n    data['Boy'] = (data['Name'].str.contains('Master')) | ((data['Sex']==0) & (data['Age']<13))   \n    # if ticket exists in training data, fill NTicket with no. women+boys\n    # on that ticket in the training data.\n    data['NTicket'] = data['Ticket'].replace(n_ticket)\n    # otherwise NTicket=0\n    data.loc[~data.Ticket.isin(n_ticket.index),'NTicket']=0\n    # if ticket exists in training data, fill TicketSurv with\n    # women+boys survival rate in training data  \n    data['TicketSurv'] = data['Ticket'].replace(tick_surv)\n    # otherwise TicketSurv=0\n    data.loc[~data.Ticket.isin(tick_surv.index),'TicketSurv']=0\n    data['TicketSurv'].fillna(0, inplace=True)\n    # Mapping Age\n    data.loc[ data['Age'] <= 16, 'Age'] = 5\n    data.loc[(data['Age'] > 16) & (data['Age'] <= 32), 'Age'] = 1\n    data.loc[(data['Age'] > 32) & (data['Age'] <= 48), 'Age'] = 2\n    data.loc[(data['Age'] > 48) & (data['Age'] <= 64), 'Age'] = 3\n    data.loc[ data['Age'] > 64, 'Age'] = 4\n    data['manual_tree'] = 0\n    data.loc[boy_or_female, 'manual_tree'] = 1\n    data.loc[(data['Sex'] == 1) & \n             (data['Pclass'] == 3) & \n             (data['Embarked'] == 0)  &\n             (data['Fare'] > 0), 'manual_tree'] = 0\n    data.loc[(data['Sex'] == 0) &\n             (data['Title'] == 3), 'manual_tree'] = 1\n    tfidf_vec = TfidfVectorizer(max_features=15, token_pattern=\"\\w+\")\n    svd = TruncatedSVD(n_components=10)\n    tfidf_array = svd.fit_transform(tfidf_vec.fit_transform(data[\"Name\"]))\n    for i in range(tfidf_array.shape[1]):\n        data.insert(len(data.columns), column = 'Name_' + str(i), value = tfidf_array [:,i])\n    tfidf_vec = TfidfVectorizer(max_features=5, analyzer=\"char\")\n    svd = TruncatedSVD(n_components=3)\n    tfidf_array = svd.fit_transform(tfidf_vec.fit_transform(data[\"Ticket\"]))\n    for i in range(tfidf_array.shape[1]):\n        data.insert(len(data.columns), column = 'Ticket_' + str(i), value = tfidf_array [:,i])\n    data['Ticket'] = data['Ticket'].str.extract('(\\d+)', expand=False).fillna(0).astype(float)\n    data['Ticket'] = np.round(np.log1p(data['Ticket'])*10)\n    data['Alone'] = data['FamilySize']==1\n    data.drop(['Name'],1,inplace=True)\n    return data.astype(float)","225bdd1b":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\", dtype={\"Age\": np.float64}, index_col='PassengerId' )\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\", dtype={\"Age\": np.float64}, index_col='PassengerId')","8e5e208b":"sbase = '0123456789A'\n\ndef idx_decode(code, i0):\n    idx_diff = [sbase.index(c) for c in code]\n    return list(np.hstack((i0, idx_diff)).cumsum())\n\nsog = \"3121421421112622211422131424141143A2123143121463221247395113113316111132253213322137221111581111521711224434443123441222373243822221422312412121A631232213333\"\nidx = idx_decode(sog,1)\nsol = np.zeros(418)\nsol[idx] = 1\ntest['Survived'] = sol","3767778f":"df = pd.concat((train,test),0)\ntarget = train['Survived'].astype(float)\ndf = PrepData(df)\n\ndf['Ticket'] = df['Ticket'].astype(int).astype('category')\n\ncol_to_use = ['Embarked', 'Fare', 'Parch', 'Pclass', 'Sex', 'Age', \n              'NameLen', 'Has_Cabin', 'Cabin', 'FamilySize', 'isFamily', \n              'Title', 'TicketSurv', 'NTicket', 'Boy', 'manual_tree',\n              'Ticket_0', 'Ticket_1', 'Ticket_2',\n              'Name_0', 'Name_1', 'Name_2', 'Name_3', 'Name_4',\n              'Name_5', 'Name_6', 'Name_7', 'Name_8', 'Name_9']\n\ndf = pd.get_dummies(df[col_to_use])\ndf[col_to_use] += 0.0\n\nmungedtrain = df[:train.shape[0]].copy()\nmungedtest = df[train.shape[0]:].copy()\nmytrain = mungedtrain.values.tolist()\nmytest = mungedtest.values.tolist()","cfab1fc6":"#GP Train\nGPhof = []\ng = 51\nfor n in [5,7,14,21,28]:\n    hof, Tbox = mydeap(mungedtrain, target, seed=n, mxvl=n, ngen=g)\n    GPhof.append(hof)\n    g += 70","f6f36093":"test = test.reset_index()","8e88ea82":"testPredictions = np.zeros((len(GPhof),test.shape[0]))\nfor n in range(len(GPhof)):\n    GPfunc = Tbox.compile(expr=GPhof[n])\n    testPredictions[n] += Outputs(np.array([GPfunc(*x) for x in mytest]))\n    print(\"Score {}:\".format(n),accuracy_score(sol,testPredictions[n]))\n    print(GPhof[n])","95b79f81":"testPrediction = np.round(np.mean(testPredictions,axis=0)).astype(int)\nprint(\"Score :\",accuracy_score(sol,testPrediction))\ntest['Survived'] = testPrediction\ntest[['PassengerId','Survived']].to_csv('gp_submit.csv', index=False)","e0527d77":"## This kernel based on the kernel https:\/\/www.kaggle.com\/fdq09eca\/kaggle-titanic-prediction"}}