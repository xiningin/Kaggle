{"cell_type":{"eddec4a9":"code","3b608c29":"code","d76168c8":"code","758e494c":"code","82a72ac9":"code","a39bd56f":"code","68688c95":"code","6ac0d4ad":"code","347a105f":"code","3176b91a":"code","4f3ad4a5":"code","6c01ef6f":"code","d9ab27af":"code","65a500ed":"code","f232838d":"code","dfce1fa2":"code","77111014":"code","dbdc034d":"code","6f851e88":"code","3a390c89":"code","92e8c7c1":"code","fea3f9fc":"code","84095e95":"code","6d9cfeb9":"code","cab61e09":"code","4bd07964":"code","5946966a":"code","887632fc":"code","cecae16a":"code","8e2f6038":"code","dfd4ef35":"code","b1143c42":"code","3aaee73c":"code","050ea803":"code","2c5ff638":"code","234caa6c":"code","daf9edcd":"code","682b5971":"code","ecdd430a":"code","720fc75b":"code","a24af2ee":"code","e9bbf4b9":"code","446881a4":"code","73de2084":"code","c7f99687":"code","02b39cc5":"code","dc2eddf5":"code","4f4e36d1":"code","6575e1d5":"code","2e17e6fa":"code","2317a02f":"code","f958214d":"code","1faab1d1":"code","f4bc4006":"markdown","950bd3d1":"markdown","8410ce93":"markdown","3ff8b532":"markdown","84ab8e1e":"markdown","62898ada":"markdown","10c4a7da":"markdown","bb75371c":"markdown","b54f39c6":"markdown","fa5c0fed":"markdown","d1f70ac8":"markdown","37c3cbc2":"markdown","0cf00d19":"markdown","c71e3a39":"markdown","a5c4a40b":"markdown","d56d8675":"markdown","6e60ef71":"markdown","7d49d7ce":"markdown","f6d39c0e":"markdown","7f5ce69b":"markdown","e7032014":"markdown","aecf56bd":"markdown","e185b1fe":"markdown","422a53b2":"markdown","15e64e29":"markdown","94f21cb1":"markdown","b6203cbc":"markdown","1f6c40a2":"markdown","feaa23ee":"markdown"},"source":{"eddec4a9":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom pandas import plotting\n%matplotlib inline\nfrom time import time\nfrom IPython.display import display # Allows the use of display() for DataFrames\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import cross_val_score\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3b608c29":"df = pd.read_csv('..\/input\/bank.csv')","d76168c8":"# Now lest see the first 5 samples to get the overview of the dataset \ndf.head()","758e494c":"# Now lets see the structure of the data\ndf.info()","82a72ac9":"# Lets see the overview of the dataset means average, std, min , max of the data\ndf.describe(include='all')","a39bd56f":"# Lets see only categorical variables\ndf.describe(include='object')","68688c95":"# Checking Missing values or null entries in the dataset\ndf.isna().sum()","6ac0d4ad":"print(df.dtypes)","347a105f":"df.shape","3176b91a":"sns.countplot(x='deposit',data=df)","4f3ad4a5":"sns.countplot(x='deposit',hue='housing',data=df)","6c01ef6f":"sns.countplot(x='deposit',hue='loan',data=df)","d9ab27af":"# making boolean series for term deposit subscribed customers of bank\nfilter1 = df[\"deposit\"]==\"yes\"\n    \n# filtering data on basis of both filters \ndf_subscribed = df.where(filter1).dropna()\n\ndf_subscribed.head()","65a500ed":"sns.countplot(x='deposit', hue='education',data=df_subscribed)","f232838d":"sns.countplot(x='deposit',hue='marital',data=df_subscribed)","dfce1fa2":"dataset2=df[['age','balance','duration','campaign','pdays']]\n\nsns.pairplot(dataset2)\nplt.show()","77111014":"plt.rcParams['figure.figsize'] = (20, 8)\nsns.countplot(df['age'], palette = 'hsv')\nplt.title('Distribution of Age', fontsize = 20)\nplt.show()","dbdc034d":"plt.rcParams['figure.figsize'] = (25, 8)\nsns.countplot(df_subscribed['age'], palette = 'rainbow')\nplt.title('Distribution of Age of Subscribed Customers', fontsize = 25)\nplt.show()","6f851e88":"\nsns.distplot(df['balance'], hist=True,kde_kws={\"color\": \"k\", \"lw\": 3, \"label\": \"KDE\"}, kde=True,bins=50,hist_kws={\"histtype\": \"step\", \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"})\nplt.title('Distribution of Balance in Account', fontsize = 20)\nplt.show()","3a390c89":"sns.distplot(df_subscribed['balance'], hist=True,kde_kws={\"color\": \"k\", \"lw\": 3, \"label\": \"KDE\"}, kde=True,bins=50,hist_kws={\"histtype\": \"step\", \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"})\nplt.title('Distribution of Balance of already subscribed account', fontsize = 20)\nplt.show()","92e8c7c1":"\nsns.distplot(df['duration'], hist=True,kde_kws={\"color\": \"k\", \"lw\": 3, \"label\": \"KDE\"}, kde=True,bins=50,hist_kws={\"histtype\": \"step\", \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"})\nplt.title('Distribution of Duration', fontsize = 20)\nplt.show()","fea3f9fc":"sns.distplot(df_subscribed['duration'], hist=True,kde_kws={\"color\": \"k\", \"lw\": 3, \"label\": \"KDE\"}, kde=True,bins=50,hist_kws={\"histtype\": \"step\", \"linewidth\": 3,\"alpha\": 1, \"color\": \"g\"})\nplt.title('Distribution of Duration of already subscribed account', fontsize = 20)\nplt.show()","84095e95":"labels = ['Normal', 'Default']\nsize = df['default'].value_counts()\ncolors = ['lightgreen', 'orange']\nexplode = [0, 0.1]\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Default Loans Status', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","6d9cfeb9":"labels = ['No Housing Loan','Housing loan taken' ]\nsize = df['housing'].value_counts()\ncolors = ['blue', 'yellow']\nexplode = [0, 0.1]\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Status of Housing Loan', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","cab61e09":"labels = ['No Loan Taken','Has Taken Loan']\nsize = df['loan'].value_counts()\ncolors = ['green', 'blue']\nexplode = [0, 0.1]\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Status of Loan customer', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","4bd07964":"labels = ['No deposit','Deposit in Bank']\nsize = df['deposit'].value_counts()\ncolors = ['blue', 'orange']\nexplode = [0, 0.1]\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Status of Deposit customer', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","5946966a":"plt.rcParams['figure.figsize'] = (18, 7)\nsns.boxenplot(df['housing'], df['balance'],hue=df['deposit'], palette = 'Blues')\nplt.title('Hosuing vs Balance vs Deposit', fontsize = 20)\nplt.show()","887632fc":"plt.rcParams['figure.figsize'] = (18, 7)\nsns.boxenplot(df['loan'], df['balance'],hue=df['deposit'], palette = 'rainbow')\nplt.title('loan vs Balance vs Deposit', fontsize = 20)\nplt.show()\n","cecae16a":"plt.rcParams['figure.figsize'] = (18, 7)\nsns.boxenplot(df['housing'], df['balance'],hue=df['default'])\nplt.title('Hosuing vs Balance vs Default', fontsize = 20)\nplt.show()","8e2f6038":"plt.rcParams['figure.figsize'] = (18, 7)\nsns.boxenplot(df['loan'], df['balance'],hue=df['default'],palette=\"Set1\")\nplt.title('Personal Loan vs Balance vs Default', fontsize = 20)\nplt.show()","dfd4ef35":"# Sort the dataframe by target\ndeposit_yes = df.loc[df['deposit'] == 'yes']\ndeposit_no = df.loc[df['deposit'] == 'no']\nfig = plt.figure(figsize=(20,8))\nsns.distplot(deposit_yes[['duration']], hist=False, rug=True)\nsns.distplot(deposit_no[['duration']], hist=False, rug=True)\nplt.title('Duration of Deposit vs Non deposit', fontsize = 20)\nfig.legend(labels=['Deposit','Non deposit'])\nplt.show()\n","b1143c42":"sns.countplot(df['poutcome'])","3aaee73c":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (18, 8)\n\nplt.subplot(1, 2, 1)\nsns.set(style = 'whitegrid')\nsns.distplot(df['previous'])\nplt.title('Distribution of Previous', fontsize = 20)\nplt.xlabel('Range of Previous')\nplt.ylabel('Count')\n\n\nplt.subplot(1, 2, 2)\nsns.set(style = 'whitegrid')\nsns.distplot(df['campaign'], color = 'red')\nplt.title('Distribution of Campaign', fontsize = 20)\nplt.xlabel('Range of Campaign')\nplt.ylabel('Count')\nplt.show()","050ea803":"df[\"deposit\"] = df.deposit.apply(lambda  x:1 if x==\"yes\" else 0)\ndf[\"loan\"] = df.loan.apply(lambda  x:1 if x==\"yes\" else 0)\ndf[\"housing\"] = df.housing.apply(lambda  x:1 if x==\"yes\" else 0)\ndf[\"default\"] = df.default.apply(lambda  x:1 if x==\"yes\" else 0)","2c5ff638":"df1=df.drop(['deposit'],axis=1)\n\nplt.figure(figsize=(20,10)) \nsns.heatmap(df1.corr(), annot=True) ","234caa6c":"df1.corrwith(df.deposit).plot.bar(\n        figsize = (20, 10), title = \"Correlation with Deposit\", fontsize = 20,\n        rot = 45, grid = True)","daf9edcd":"X = df.drop(['deposit'],axis=1) # Feature \n\ny=df['deposit'] # Target variable","682b5971":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,test_size = 0.20, random_state=0)","ecdd430a":"# convert categorical columns to integers\ncategory_cols = ['job','marital','education','contact','month','poutcome']\nfor header in category_cols:\n    X_train[header] = X_train[header].astype('category').cat.codes\n    X_test[header] = X_test[header].astype('category').cat.codes","720fc75b":"print(X_train.dtypes)","a24af2ee":"categorical_features_indices = np.where(X.dtypes != np.int64)[0]","e9bbf4b9":"model = CatBoostClassifier(eval_metric='Accuracy',use_best_model=True,random_seed=42)","446881a4":"model.fit(X_train,y_train,cat_features=categorical_features_indices,eval_set=(X_test,y_test))","73de2084":"y_predict = model.predict(X_test)\nfrom sklearn.metrics import  accuracy_score, f1_score, precision_score, recall_score, roc_auc_score\nroc=roc_auc_score(y_test, y_predict)\nacc = accuracy_score(y_test, y_predict)\nprec = precision_score(y_test, y_predict)\nrec = recall_score(y_test, y_predict)\nf1 = f1_score(y_test, y_predict)\n\nresults = pd.DataFrame([['CatBoost', acc,prec,rec, f1,roc]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\nresults","c7f99687":"from catboost import cv,Pool\ncv_data = cv(Pool(X,y,cat_features=categorical_features_indices),model.get_params(),fold_count=10)\n","02b39cc5":"print('Best validation accuracy score: {:.2f}\u00b1{:.2f} on step {}'.format(\n    np.max(cv_data['test-Accuracy-mean']), \n    cv_data['test-Accuracy-std'][cv_data['test-Accuracy-mean'].idxmax(axis=0)],\n    cv_data['test-Accuracy-mean'].idxmax(axis=0)\n))","dc2eddf5":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_predict)\nsns.heatmap(cm, annot=True)","4f4e36d1":"from sklearn import metrics\nplt.figure()\n\n# Add the models to the list that you want to view on the ROC plot\nmodels = [\n    {\n    'label': 'CATBOOST',\n    'model': CatBoostClassifier(eval_metric='Accuracy',use_best_model=True,random_seed=42),        \n    }\n]\n\n# Below for loop iterates through your models list\nfor m in models:\n    model = m['model'] # select the model\n    model.fit(X_train,y_train,cat_features=categorical_features_indices,eval_set=(X_test,y_test)) # train the model\n    y_pred=model.predict(X_test) # predict the test data\n# Compute False postive rate, and True positive rate\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, model.predict_proba(X_test)[:,1])\n# Calculate Area under the curve to display on the plot\n    auc = metrics.roc_auc_score(y_test,model.predict(X_test))\n# Now, plot the computed values\n    plt.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % (m['label'], auc))\n# Custom settings for the plot \nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('1-Specificity(False Positive Rate)')\nplt.ylabel('Sensitivity(True Positive Rate)')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","6575e1d5":"features ='duration'\nres =model.get_feature_statistics(X_train, y_train,features, plot=True)","2e17e6fa":"features ='balance'\nres =model.get_feature_statistics(X_train, y_train,features, plot=True)","2317a02f":"import shap\nshap_values = model.get_feature_importance(Pool(X_test, label=y_test,cat_features=categorical_features_indices), \n                                                                     type=\"ShapValues\")\nexpected_value = shap_values[0,-1]\nshap_values = shap_values[:,:-1]\n\nshap.initjs()\nshap.force_plot(expected_value, shap_values[3,:], X_test.iloc[3,:])","f958214d":"feature_score = pd.DataFrame(list(zip(X.dtypes.index, model.get_feature_importance(Pool(X, label=y, cat_features=categorical_features_indices)))),\n                columns=['Feature','Score'])\n\nfeature_score = feature_score.sort_values(by='Score', ascending=False, inplace=False, kind='quicksort', na_position='last')","1faab1d1":"plt.rcParams[\"figure.figsize\"] = (12,7)\nax = feature_score.plot('Feature', 'Score', kind='bar', color='b')\nax.set_title(\"Catboost Feature Importance Ranking\", fontsize = 14)\nax.set_xlabel('')\n\nrects = ax.patches\n\nlabels = feature_score['Score'].round(2)\n\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, height + 0.35, label, ha='center', va='bottom')\n\nplt.show()","f4bc4006":"# Feature Importance","950bd3d1":"so it has 17 features including target variable and around 11162 records.","8410ce93":"So, it seems like every feature has relevant datatype.","3ff8b532":"**Looks like there are many categorical attributes are there**","84ab8e1e":"## Correlation with target Variable","62898ada":"# Distribution of Balance","10c4a7da":"From the above plot it is evident that people who have already subscribed to term deposit scheme of bank are mostly in the range of 25 to 40","bb75371c":"# Step 4 : Segregation of features & target variable ","b54f39c6":"Prediction of Bank marketing campaign with the use of Machine Learning will really revolutionarize this segment because it will help in saving resources to attain maximum results in the form of profits.\n\nIn this kernel I will use **Catboost Algorithm** to predict client subscription to term deposit as this dataset contains lots of categorical variables and by using catboost we dont have to convert all categorical variables into dummy variables which is the usp pf this algo.\n\n## Catboost Algorithm\nCatBoost has the flexibility of giving indices of categorical columns so that it can be encoded as one-hot encoding using one_hot_max_size (Use one-hot encoding for all features with number of different values less than or equal to the given parameter value).\n\nIf you don\u2019t pass any anything in cat_features argument, CatBoost will treat all the columns as numerical variables.\n\nthe generalized chart of comparison among XGBoost, Light GBM and Catboost is as follows :\n![](https:\/\/i.ibb.co\/q9wdt6M\/chart.png)\n\nAs we can see from above chart Catboost is fastest and having higher accuracy among its peers.\n\n# About Dataset\n\nThe dataset is related with direct marketing campaigns (phone calls) of a Portuguese banking institution.The classification goal of this dataset is to predict if the client or the customer of polish banking institution will subscribe a **term deposit** product of the bank or not. Now the question comes **what is term deposit ?**\n\n## Term deposit \nA term deposit is a cash investment held at a financial institution. Your money is invested for an agreed rate of interest over a fixed amount of time, or term. Term deposits can be invested into a bank, building society or credit union.\n\nWhen the money is deposited, the customer understands that the money is there for the pre-determined period which usually ranges from 1 month to 5 years and the interest rate is guaranteed not to change for that nominated period of time.  Typically, the money can only be withdrawn at the end of the period \u2013 or earlier with a penalty attached.\n\nTerm deposits are popular with investors who prefer capital security and a set return as opposed to the fluctuations of, say, the share market. Many investors also use term deposits as a part of their investment mix.\n\n## Dataset Attributes\n\n### Input variables:\n#### bank client data:\n* **age** (numeric)\n* **job :** type of job \n* (categorical: 'admin.','bluecollar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')\n* **marital :** marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)\n* **education** (categorical:'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')\n* **default:** has credit in default? (categorical: 'no','yes','unknown')\n* **balance:** it is a numerical column which indicate the client has how much outstanding balance in his account with the bank.\n* **housing:** has housing loan? (categorical: 'no','yes','unknown')\n* **loan:** has personal loan? (categorical: 'no','yes','unknown')\n\n#### related with the last contact of the current campaign:\n\n* **contact:** contact communication type (categorical: 'cellular','telephone')\n* **month:** last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')\n* **day:** last contact day of the week (categorical: 'mon','tue','wed','thu','fri')\n* **duration:** last contact duration, in seconds (numeric). Important note: this attribute highly affects the output \n\n#### other attributes:\n\n* **campaign:** number of contacts performed during this campaign and for this client (numeric, includes last contact)\n* **pdays:** number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)\n* **previous:** number of contacts performed before this campaign and for this client (numeric)\n* **poutcome:** outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success')\n\n### Output variable (desired target):\n\n* **deposit:** has the client subscribed a term deposit? (binary: 'yes','no')\n\n![](http:\/\/i.ibb.co\/jyyVFdR\/970x404-Friendship-between-artificial-and-real-man.jpg)","fa5c0fed":"# Distribution of Age","d1f70ac8":"The people who have not taken deposit in bank have lower duration whereas those who have deposit in bank have higher duration","37c3cbc2":"# Model explainability","0cf00d19":"# Step 2 : Data Cleaning\n\nIt is very crucial step to clean the data most of the times what happens we have missing values in the data or some inappropiate values in the data that we have to find out or handle that.","c71e3a39":"# Step 1: Data Reading","a5c4a40b":"It seems interesting pattern as there are more customers who have already subscribed term deposit of the bank but not taken housing loan, so bank can target these customers by offering housing loan to them.\n\nWhereas in case of those customers who have already taken housing loan from the bank but not subscribed to term deposit scheme of the bank. In this case bank can offer term deposit scheme to those customers who have taken housing loan from bank.","d56d8675":"# Step 7 : Model Building\n\nThis is the most fun part in which we build model using catboost algorithm","6e60ef71":"# Step 5 : Splitting of training & testing split","7d49d7ce":"It is somewhat quite obvious from the above plot that people after marriage try to save more in comparison to single so bank can also design deposit products which suits the need of young generation or single marital status customers.","f6d39c0e":"**Now, we have to check the datatype of each of the feature whether it has relevant datatype corresponding to its value for e.g., sometimes what happens in a age column which have numerical entries but it may errorneously have datatype object. So such type of instances we have to remove or replace.**","7f5ce69b":"# Step 3: Exploratory data analysis","e7032014":"It seems from the above plot that the age group  25 - 60 have most of the data.\n\nNow, lets see what about age distribution of customers who have already subscribed to term deposit scheme of the bank","aecf56bd":"# Step 4: Correlation Analysis","e185b1fe":"# step8: Cross Validation\nIn this step we will perform cross validation with 10 folds.","422a53b2":"It seems that people who have secondary education have mostly subscribed to term deposit scheme where as unknown and primary education holder have comparatively very low in subscribing term deposit scheme.\n\nSo bank can design other products which are aligned towrads the need of highly educated individuals.","15e64e29":"**From the above plot it is evident that those who have defaulted have very less balance in account with the bank. This is quite useful pattern in keeping tap on such type of defaulters.** ","94f21cb1":"So, dataset has almost equal distribution of target variable deposit yes or no","b6203cbc":"## Pairplot of Numerical features","1f6c40a2":"# Step 6: convert categorical columns to integers","feaa23ee":"# Distribution of duration"}}