{"cell_type":{"839ecb19":"code","76d539e0":"code","2137fe02":"code","8f3c1646":"code","c83b2763":"code","1fc70df4":"code","ec4cae39":"code","5083693f":"code","742c2c3d":"code","45637b67":"code","ea124c15":"code","70dd7767":"code","63b28b04":"code","cc9d629e":"markdown","41869e20":"markdown","7004c6be":"markdown","6fbfe19a":"markdown","c3e9cfcf":"markdown"},"source":{"839ecb19":"import numpy as np\nimport pandas as pd","76d539e0":"df = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')\ndf.head(5)","2137fe02":"df1 = pd.get_dummies(df, columns=['ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope', 'Sex'])\ndf1.head(5)","8f3c1646":"df1.drop(columns=['ChestPainType_TA', 'RestingECG_ST', 'ExerciseAngina_N', 'ST_Slope_Down', 'Sex_M'], inplace=True)\ndf1.head(5)","c83b2763":"features = df1.drop(columns=['HeartDisease']).iloc[:,0:-1].to_numpy()\npred = df1.HeartDisease.to_numpy()\npred.shape","1fc70df4":"import sklearn\nfrom sklearn.linear_model import LogisticRegression\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt","ec4cae39":"xtrain, xtest, ytrain, ytest= sklearn.model_selection.train_test_split(features, pred, test_size=.33, random_state=42)","5083693f":"base_model = LogisticRegression(solver='lbfgs', max_iter=1000)\nbase_model.fit(xtrain, ytrain)\nprint(sklearn.metrics.classification_report(ytest, base_model.predict(xtest).round()))","742c2c3d":"ypred = base_model.predict(xtest)\nconf = sklearn.metrics.confusion_matrix(ytest, ypred)\nconf = conf\/ypred.shape[0]*100\nsns.heatmap(conf, annot=True, vmin=0, vmax=100)","45637b67":"fpr, tpr, thresholds = sklearn.metrics.roc_curve(ytest, base_model.predict_proba(xtest)[:,1])\nplt.plot([0,1], [0,1], linestyle='--')\nplt.plot(fpr, tpr, marker='.')","ea124c15":"new_thresh = thresholds[tpr >=0.96][0]","70dd7767":"ypred = (base_model.predict_proba(xtest)[:,1] >= new_thresh).astype(bool)\nconf = sklearn.metrics.confusion_matrix(ytest, ypred)\nconf = conf\/ypred.shape[0]*100\nsns.heatmap(conf, annot=True, vmin=0,vmax=100)","63b28b04":"patient = xtest[5].reshape(1,-1)\nprint(\"The patient is at a risk of having a heart disease with a chance of\", base_model.predict_proba(patient)[:,1].round(4)*100, '%')\nif(base_model.predict_proba(patient)[:,1] >=new_thresh):\n    print(\"The patient needs treatment.\")\nelse:\n    print(\"The patient does not need treatment.\")","cc9d629e":"### The new threshold is giving a much better as it only gives around 2.3% false positives. ","41869e20":"## Given below is a sample case of how the model could be used :","7004c6be":"### We can see that the false negatives in our model is 9.6%. This is rather high and we should try to reduce the false positives as much as possible.","6fbfe19a":"# Modeling","c3e9cfcf":"# Importing and cleaning"}}