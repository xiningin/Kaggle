{"cell_type":{"128284b6":"code","83621c0d":"code","07e01c25":"code","967d9440":"code","b16b3fee":"code","fa5f8a1f":"code","78d7e01c":"code","a99d10c2":"code","1e8ad834":"code","7c0f26fe":"code","eac0a502":"code","47362633":"code","1171fcf4":"code","1841ad1a":"code","4b4c7c22":"code","556eff64":"code","98d6dc93":"code","7b484856":"code","5629be94":"code","6a8ccf7e":"code","a2662f04":"code","e94ad460":"code","1750d516":"code","70dde48f":"code","1c383527":"code","d5e08a41":"code","7a97125f":"code","404f9eb2":"code","3c41196b":"code","326bd97d":"code","e7dcdb26":"code","7152f2b0":"code","3ac5d3fc":"code","a9ace244":"code","2e7af1fd":"code","9382cf42":"code","667aad4b":"markdown","f09f5f13":"markdown","329880a2":"markdown","5b0265e0":"markdown","4d205ffa":"markdown","334e6287":"markdown","2273b2b0":"markdown","b2bbc914":"markdown","a5b812c3":"markdown","1775a876":"markdown","99e86e9f":"markdown","d6bf3996":"markdown","936bbfc4":"markdown","eee67104":"markdown","e798722c":"markdown","04e5bf1e":"markdown","364144d2":"markdown","b20ee7b6":"markdown","0faab06e":"markdown","eee070c6":"markdown","c5466e80":"markdown"},"source":{"128284b6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.mode.chained_assignment = None  # default='warn'\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LogisticRegression","83621c0d":"train1 = pd.read_csv('..\/input\/dota2game\/train\/train1.csv')\ntrain9 = pd.read_csv('..\/input\/dota2game\/train\/train9.csv')\nhero_data = pd.read_csv('..\/input\/dota2game\/train\/hero_data.csv')","07e01c25":"test1 = pd.read_csv('..\/input\/dota2game\/test\/test1.csv')\ntest9 = pd.read_csv('..\/input\/dota2game\/test\/test9.csv')","967d9440":"hero_data = pd.get_dummies(hero_data, columns=['primary_attr', 'attack_type'])\nhero_data.drop(['primary_attr_agi', 'attack_type_Melee'], axis = 1, inplace = True)\n\nhero_data.head()","b16b3fee":"check = hero_data.describe()\ncheck.loc[['min','mean', 'max'],:]","fa5f8a1f":"hero_data.drop(['base_health','base_mana','base_mana_regen'], axis='columns', inplace=True)\ncheck = hero_data.describe()\ncheck.columns","78d7e01c":"hero_data[['hero_id', 'roles']]","a99d10c2":"roles  = hero_data.roles.str.split(\":\",expand=True)\ndatafull = pd.DataFrame()\n\nfor index in range(roles.shape[1]):\n    tempdata = pd.DataFrame(roles[index].unique().tolist())\n    datafull = pd.concat([tempdata, datafull], axis=0)\n    \narray_list = datafull[0].unique()\ndatafull = pd.DataFrame()\n\nfor index in range(len(array_list)):\n    datafull[array_list[index]] = np.zeros(roles.shape[0])\n\n    \nfor index in range(roles.shape[0]):\n    for index1 in range(roles.shape[1]):\n        datafull[roles.loc[index,index1]][index] = 1\n        \ndatafull.drop(datafull.columns[[0]], axis = 1, inplace = True)","1e8ad834":"hero_data.drop('roles', axis = 1, inplace = True)\n\nhero_data = pd.concat([hero_data, datafull], axis=1)","7c0f26fe":"train1","eac0a502":"array_list = hero_data.columns\nfor index in range(len(array_list)):\n    if array_list[index] != 'hero_id':\n        train1[array_list[index]] = np.zeros(train1.shape[0])\n    ","47362633":"for index in range(train1.shape[0]):\n    data2 = hero_data[hero_data['hero_id'] == train1['hero_id'][index]]\n    data2.drop('hero_id', axis = 1, inplace = True)\n    \n    for index1 in range(data2.shape[1]):\n        dat3 = data2.iloc[0,index1]\n        col_num=train1.columns.get_loc(data2.columns[index1])\n        train1.iat[index,col_num] = dat3","1171fcf4":"train1.head()","1841ad1a":"train1.drop('id', axis = 1, inplace = True)","4b4c7c22":"train1.columns","556eff64":"plt.figure(figsize=(20,10))\nsns.heatmap(train1.corr(), cmap=\"viridis\",annot=True,linewidths=0.1)","98d6dc93":"X=train1[['user_id', 'hero_id', 'num_games', 'base_health_regen', 'base_armor', 'base_magic_resistance',\n       'base_attack_min', 'base_attack_max', 'base_strength', 'base_agility',\n       'base_intelligence', 'strength_gain', 'agility_gain',\n       'intelligence_gain', 'attack_range', 'projectile_speed', 'attack_rate',\n       'move_speed', 'turn_rate', 'primary_attr_int', 'primary_attr_str', 'attack_type_Ranged',\n       'Disabler', 'Nuker', 'Pusher', 'Escape', 'Initiator', 'Jungler', 'Durable', 'Support', 'Carry']]\nY=train1[['num_wins']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=0)","7b484856":"model = XGBRegressor()\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_test)\n\nActVPred = pd.DataFrame({'Actual': Y_test['num_wins'], 'Predicted': Y_pred})\nprint(ActVPred)\n\n#Checking the accuracy of Linear Regression\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test['num_wins'], Y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test['num_wins'], Y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test['num_wins'], Y_pred)))","5629be94":"X=train1[['user_id', 'hero_id', 'num_games', 'base_health_regen', 'base_armor', 'base_magic_resistance',\n       'base_attack_min', 'base_attack_max', 'base_strength', 'base_agility',\n       'base_intelligence', 'strength_gain', 'agility_gain',\n       'intelligence_gain', 'attack_range', 'projectile_speed', 'attack_rate',\n       'move_speed', 'turn_rate', 'primary_attr_int', 'primary_attr_str', 'attack_type_Ranged',\n       'Disabler', 'Nuker', 'Pusher', 'Escape', 'Initiator', 'Jungler', 'Durable', 'Support', 'Carry']]\nY=train1[['kda_ratio']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=0)","6a8ccf7e":"model1 = XGBRegressor()\nmodel1.fit(X_train, Y_train)\nY_pred = model1.predict(X_test)\n\nActVPred = pd.DataFrame({'Actual': Y_test['kda_ratio'], 'Predicted': Y_pred})\nprint(ActVPred)\n\n#Checking the accuracy of Linear Regression\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test['kda_ratio'], Y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test['kda_ratio'], Y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test['kda_ratio'], Y_pred)))","a2662f04":"test1.drop('id', axis = 1, inplace = True)","e94ad460":"array_list = hero_data.columns\nfor index in range(len(array_list)):\n    if array_list[index] != 'hero_id':\n        test1[array_list[index]] = np.zeros(test1.shape[0])\n\nfor index in range(test1.shape[0]):\n    data2 = hero_data[hero_data['hero_id'] == test1['hero_id'][index]]\n    data2.drop('hero_id', axis = 1, inplace = True)\n    \n    for index1 in range(data2.shape[1]):\n        dat3 = data2.iloc[0,index1]\n        col_num=test1.columns.get_loc(data2.columns[index1])\n        test1.iat[index,col_num] = dat3","1750d516":"test1.head().T","70dde48f":"Y_num_wins = model.predict(test1).astype('int32')\n\nY_kda_ratio = model1.predict(test1).astype('int32')","1c383527":"train9.head()","d5e08a41":"array_list = hero_data.columns\nfor index in range(len(array_list)):\n    if array_list[index] != 'hero_id':\n        train9[array_list[index]] = np.zeros(train9.shape[0])\n        \n        \nfor index in range(train9.shape[0]):\n    data2 = hero_data[hero_data['hero_id'] == train9['hero_id'][index]]\n    data2.drop('hero_id', axis = 1, inplace = True)\n    \n    for index1 in range(data2.shape[1]):\n        dat3 = data2.iloc[0,index1]\n        col_num=train9.columns.get_loc(data2.columns[index1])\n        train9.iat[index,col_num] = dat3","7a97125f":"train9.drop('id', axis = 1, inplace = True)","404f9eb2":"train9.columns","3c41196b":"plt.figure(figsize=(20,10))\nsns.heatmap(train9.corr(), cmap=\"viridis\",annot=True,linewidths=0.1)","326bd97d":"X=train9[['user_id', 'hero_id', 'num_games', 'base_health_regen', 'base_armor', 'base_magic_resistance',\n       'base_attack_min', 'base_attack_max', 'base_strength', 'base_agility',\n       'base_intelligence', 'strength_gain', 'agility_gain',\n       'intelligence_gain', 'attack_range', 'projectile_speed', 'attack_rate',\n       'move_speed', 'turn_rate', 'primary_attr_int', 'primary_attr_str', 'attack_type_Ranged',\n       'Disabler', 'Nuker', 'Pusher', 'Escape', 'Initiator', 'Jungler', 'Durable', 'Support', 'Carry']]\nY=train9[['num_wins']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=0)","e7dcdb26":"model = XGBRegressor()\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_test)\n\nActVPred = pd.DataFrame({'Actual': Y_test['num_wins'], 'Predicted': Y_pred})\nprint(ActVPred)\n\n#Checking the accuracy of Linear Regression\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test['num_wins'], Y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test['num_wins'], Y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test['num_wins'], Y_pred)))","7152f2b0":"X=train9[['user_id', 'hero_id', 'num_games', 'base_health_regen', 'base_armor', 'base_magic_resistance',\n       'base_attack_min', 'base_attack_max', 'base_strength', 'base_agility',\n       'base_intelligence', 'strength_gain', 'agility_gain',\n       'intelligence_gain', 'attack_range', 'projectile_speed', 'attack_rate',\n       'move_speed', 'turn_rate', 'primary_attr_int', 'primary_attr_str', 'attack_type_Ranged',\n       'Disabler', 'Nuker', 'Pusher', 'Escape', 'Initiator', 'Jungler', 'Durable', 'Support', 'Carry']]\nY=train9[['kda_ratio']]\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=0)","3ac5d3fc":"model1 = XGBRegressor()\nmodel1.fit(X_train, Y_train)\nY_pred = model1.predict(X_test)\n\nActVPred = pd.DataFrame({'Actual': Y_test['kda_ratio'], 'Predicted': Y_pred})\nprint(ActVPred)\n\n#Checking the accuracy of Linear Regression\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test['kda_ratio'], Y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test['kda_ratio'], Y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test['kda_ratio'], Y_pred)))","a9ace244":"Y_actual_wins = test9[['num_wins']]\nY_actual_kdaratio = test9[['kda_ratio']]\ntest9.drop(['num_wins','kda_ratio'], axis = 1, inplace = True)\ntest9.drop('id', axis = 1, inplace = True)\n\narray_list = hero_data.columns\nfor index in range(len(array_list)):\n    if array_list[index] != 'hero_id':\n        test9[array_list[index]] = np.zeros(test9.shape[0])\n\nfor index in range(test9.shape[0]):\n    data2 = hero_data[hero_data['hero_id'] == test9['hero_id'][index]]\n    data2.drop('hero_id', axis = 1, inplace = True)\n    \n    for index1 in range(data2.shape[1]):\n        dat3 = data2.iloc[0,index1]\n        col_num=test9.columns.get_loc(data2.columns[index1])\n        test9.iat[index,col_num] = dat3\n","2e7af1fd":"Y_num_wins = model.predict(test9)\n\nY_kda_ratio = model1.predict(test9)","9382cf42":"print(\"------------------------------Predicting number of Wins------------------------------\")\nActVPred = pd.DataFrame({'Actual': Y_actual_wins['num_wins'], 'Predicted': Y_num_wins})\nprint(ActVPred)\n\n#Checking the accuracy of Linear Regression\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_actual_wins['num_wins'], Y_num_wins))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_actual_wins['num_wins'], Y_num_wins))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_actual_wins['num_wins'], Y_num_wins)))\n\nprint(\"------------------------------Predicting KDA Ratios------------------------------\")\nActVPred = pd.DataFrame({'Actual': Y_actual_kdaratio['kda_ratio'], 'Predicted': Y_kda_ratio})\nprint(ActVPred)\n\n#Checking the accuracy of Linear Regression\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_actual_kdaratio['kda_ratio'], Y_kda_ratio))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_actual_kdaratio['kda_ratio'], Y_kda_ratio))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_actual_kdaratio['kda_ratio'], Y_kda_ratio)))\n\n","667aad4b":"# Train 9 and Test 9 analysis","f09f5f13":"# Removing columns that have constant values","329880a2":"# Predicting Test 9","5b0265e0":"# Training to predict KDA ratios","4d205ffa":"# Removing unnecessary columns","334e6287":"# Train 1 and Test 1 analysis","2273b2b0":"![](http:\/\/www.pcgamesn.com\/wp-content\/uploads\/2019\/10\/best-dota-2-heroes-group1-900x506.jpg)","b2bbc914":"![](http:\/\/estnn.com\/wp-content\/uploads\/2019\/04\/Dota2-Heroes-1-1024x576.jpg)","a5b812c3":"# Spliting roles so that details can be made into individual columns","1775a876":"# Training model to predict kda_ratio","99e86e9f":"# Updating heros table with details on each role","d6bf3996":"# Removing unnecessary columns","936bbfc4":"# Importing Libraries","eee67104":"# Predicting test1","e798722c":"# Training model to predict wins","04e5bf1e":"# Test1 predictions on number of wins and KDA ratios","364144d2":"# Loading training data","b20ee7b6":"# Update Train1 with details on the hero","0faab06e":"![](http:\/\/yarnph.files.wordpress.com\/2016\/01\/f88adce4-846c-4a90-a724-08306c9b692b-jpg.png?w=1920&h=768&crop=1)","eee070c6":"# Test9 predictions on number of wins and KDA ratios","c5466e80":"# Training model to predict wins"}}