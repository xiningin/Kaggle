{"cell_type":{"91f82eef":"code","00f38e4b":"code","1f81e383":"code","79ec4391":"code","d0dcc931":"code","bd1cae98":"code","86bebdbf":"code","b62b571f":"code","50bd5a3a":"code","abb9ff8a":"code","6ea067a6":"code","8abb5d1d":"code","f161c4dc":"code","c8fd20dd":"code","bddc610d":"code","52823745":"code","6b42e4eb":"code","03978827":"code","fad413e7":"code","d7224199":"code","1b61c762":"code","ad4388b9":"code","08a6fd08":"code","ee48ce28":"code","39b64fe4":"code","fb6409fa":"code","293fcdb2":"code","5dcdec4e":"code","5b3014bf":"code","04658d2a":"code","348dc0a4":"code","487ade3c":"code","28b558c4":"code","2c1cd472":"code","c4924bdc":"markdown","79b570fc":"markdown","b3094ab2":"markdown","a81672a0":"markdown","e455770b":"markdown","e727aec2":"markdown","2c560d93":"markdown","630382fd":"markdown","29faff3e":"markdown"},"source":{"91f82eef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00f38e4b":"# import library\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nfrom scipy.stats import norm\nfrom scipy import stats\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score\nfrom warnings import simplefilter\nimport sklearn\nprint('sklearn: %s' % sklearn.__version__)","1f81e383":"# import data\ndf = pd.read_csv(\"\/kaggle\/input\/polynomialregressioncsv\/polynomial-regression.csv\")\ndf.head()","79ec4391":"# statistical description\ndf.describe()","d0dcc931":"# variable correlation in percent\ndf.corr()['araba_max_hiz'].sort_values()","bd1cae98":"#correlation matrix\ndf_kor = df.corr()\nplt.figure(figsize=(5,5))\nsns.heatmap(df_kor, vmin=-1, vmax=1, cmap=\"viridis\", annot=True, linewidth=0.1)","86bebdbf":"# scatterplot\nsns.set()\ncols = ['araba_max_hiz', 'araba_fiyat']\nsns.pairplot(df[cols], height = 2.5)\nplt.show();","b62b571f":"#missing data\ntotal = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","50bd5a3a":"#visualize \n\nx=df.araba_fiyat.values.reshape(-1,1)\ny=df.araba_max_hiz.values.reshape(-1,1)\nplt.scatter(x,y,color=\"purple\")\nplt.xlabel(\"araba_fiyat\")\nplt.ylabel(\"araba_max_hiz\")\nplt.title('scatter plot')\nplt.show()","abb9ff8a":"#machine learning modelling \npolynomial_features= PolynomialFeatures(degree=2)\nx_polynomial=polynomial_features.fit_transform(x)\nlr=LinearRegression() \nlr.fit(x_polynomial,y)\ny_head2=lr.predict(x_polynomial)\nplt.scatter(x,y,color=\"purple\")\nplt.plot(x,y_head2,color='red')\nplt.xlabel(\"araba_fiyat\")\nplt.ylabel(\"araba_max_hiz\")\nplt.title('Polynomial Reggresion')\nplt.legend()\nplt.show()\n","6ea067a6":"polynomial_features= PolynomialFeatures(degree=4)\nx_polynomial=polynomial_features.fit_transform(x)\nlr=LinearRegression() \nlr.fit(x_polynomial,y)\ny_head2=lr.predict(x_polynomial)\nplt.plot(x,y_head2,color=\"red\")\nplt.scatter(x,y,color=\"purple\")\nplt.xlabel(\"araba_fiyat\")\nplt.ylabel(\"araba_max_hiz\")\nplt.title('Polynomial Reggresion')\nplt.legend()\nplt.show()","8abb5d1d":"#R square score of polynomial prediction model\nprint(\"R_square_score:\",r2_score(y,y_head2))","f161c4dc":"#machine learning modelling\n#make  x and y variable.\nx = df['araba_fiyat'].values.reshape(-1,1)\ny = df['araba_max_hiz'].values.reshape(-1,1)","c8fd20dd":"# Split the data into training and testing sets\n#split data into training and testing with a portion of 80%:20%\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state = 42)","bddc610d":"#create linear regression object\nlin_reg = LinearRegression()","52823745":"#training the model using training data\nlin_reg.fit(x_train, y_train)","6b42e4eb":"#looking for slope\/coefficient (m) and intercept (b) values\nprint(lin_reg.coef_)\nprint(lin_reg.intercept_)","03978827":"#Regression Line visualization using data testing\ny_prediksi = lin_reg.predict(x_test)\nplt.scatter(x_test, y_test)\nplt.plot(x_test, y_prediksi, c='r')\nplt.xlabel('araba_fiyat')\nplt.ylabel('araba_max_hiz')\nplt.title('Linear Reggresion')","fad413e7":"#find the accuracy score from the model\nlin_reg.score(x_test, y_test)","d7224199":"#check outliers\n\n#standardizing data\nfiyat_scaled = StandardScaler().fit_transform(df['araba_fiyat'][:,np.newaxis]);\nlow_range = fiyat_scaled[fiyat_scaled[:,0].argsort()][:10]\nhigh_range= fiyat_scaled[fiyat_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)\nsimplefilter(action='ignore', category=FutureWarning)","1b61c762":"#check outliers\n\n#standardizing data\nhiz_scaled = StandardScaler().fit_transform(df['araba_max_hiz'][:,np.newaxis]);\nlow_range = hiz_scaled[hiz_scaled[:,0].argsort()][:10]\nhigh_range= hiz_scaled[hiz_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","ad4388b9":"#histogram and normal probability plot\nsns.distplot(df['araba_max_hiz'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df['araba_max_hiz'], plot=plt)","08a6fd08":"#applying log transformation\ndf['araba_max_hiz'] = np.log(df['araba_max_hiz'])","ee48ce28":"#transformed histogram and normal probability plot\nsns.distplot(df['araba_max_hiz'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df['araba_max_hiz'], plot=plt)","39b64fe4":"#histogram and normal probability plot\nsns.distplot(df['araba_fiyat'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df['araba_fiyat'], plot=plt)","fb6409fa":"#applying log transformation\ndf['araba_fiyat'] = np.log(df['araba_fiyat'])","293fcdb2":"#transformed histogram and normal probability plot\nsns.distplot(df['araba_fiyat'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df['araba_fiyat'], plot=plt)","5dcdec4e":"#machine learning modelling\n#make  x and y variable.\nx = df['araba_fiyat'].values.reshape(-1,1)\ny = df['araba_max_hiz'].values.reshape(-1,1)","5b3014bf":"# Split the data into training and testing sets\n#split data into training and testing with a portion of 75% : 25%\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state = 42)","04658d2a":"#create linear regression object\nlin_reg = LinearRegression()","348dc0a4":"#training the model using training data\nlin_reg.fit(x_train, y_train)","487ade3c":"#looking for slope\/coefficient (m) and intercept (b) values\nprint(lin_reg.coef_)\nprint(lin_reg.intercept_)","28b558c4":"#Regression Line visualization using data testing\ny_prediksi = lin_reg.predict(x_test)\nplt.scatter(x_test, y_test)\nplt.plot(x_test, y_prediksi, c='r')\nplt.xlabel('araba_fiyat')\nplt.ylabel('araba_max_hiz')\nplt.title('Linear Reggresion')","2c1cd472":"#find the accuracy score from the model\nlin_reg.score(x_test, y_test)","c4924bdc":"# modification to linear regression","79b570fc":"quite accurate results 96,95%","b3094ab2":"# let's give a touch of engineering","a81672a0":"independent variables have correlation 69%","e455770b":"there is not missing data","e727aec2":"From the scatter it is very clear, pattern of the polynomial regression","2c560d93":"if forced the accuracy is still very low16,05%","630382fd":"standard deviation is very large, indeed data has been designed as a polynomial regression dataset","29faff3e":"better 79,43%"}}