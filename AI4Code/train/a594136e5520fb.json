{"cell_type":{"00a9226b":"code","326bb8b3":"code","c2154814":"code","0bdcb400":"code","258bdfd3":"code","28268d63":"code","73d8056c":"code","f176ea0b":"code","8bfa4444":"code","6039af7f":"code","a325805e":"code","1ba873b2":"code","83dafc12":"code","c9e14a5d":"code","d18435fe":"code","501dc29a":"code","f338d8fb":"code","21f9fda5":"code","5a978632":"code","24e935af":"code","84524b2f":"code","7845c90b":"code","568099bf":"code","f3bfaaec":"markdown","8fab4779":"markdown","4cbced31":"markdown","663f29f2":"markdown","99dd4331":"markdown","f939bf6f":"markdown","f15ee3a3":"markdown","a66f70d6":"markdown","be1ebead":"markdown","d7a1d597":"markdown","72053ff9":"markdown","9f828ea1":"markdown","33f20a2c":"markdown","60720248":"markdown","7661c149":"markdown"},"source":{"00a9226b":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns\nimport math\n","326bb8b3":"os.listdir(\"..\/input\/house-prices-advanced-regression-techniques\")","c2154814":"train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain","0bdcb400":"plt.figure(figsize=(8,8))\ntrain.isnull().sum().sort_values(ascending=False)[:19].sort_values().plot.barh(color='plum')\nplt.title('counts of missing value in the train data',size=20)\nplt.xlabel('counts')","258bdfd3":"plt.figure(figsize=(15,15))\ncorr = train.corr()\nsns.heatmap(corr, xticklabels=corr.columns,yticklabels=corr.columns)\nplt.title(\"correlation plot\",size=28)","28268d63":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ntrain.MSSubClass.value_counts().sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\nax[0].set_title(\"Top 10 MSSubClass by counts\",size=20)\nax[0].set_xlabel('counts',size=18)\n\n\ncount=train.MSSubClass.value_counts()\ngroups=list(train.MSSubClass.value_counts().index)[:10]\ncounts=list(count[:10])\ncounts.append(count.agg(sum)-count[:10].agg('sum'))\ngroups.append('Other')\ntype_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\nclr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','blue','plum')\nqx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.9, radius=1.2,ax=ax[1])\nplt.legend(loc=0, bbox_to_anchor=(1.15,0.8)) \nplt.subplots_adjust(wspace =0.5, hspace =0)\nplt.ylabel('')","73d8056c":"fig,ax=plt.subplots(2,1,figsize=(15,15))\nsns.boxplot(x=\"MSSubClass\", y=\"SalePrice\", data=train,ax=ax[0])\nax[0].set_title(\"Boxplot of Price for MSSubClass\",size=20)\n\ntrain=train[train.SalePrice<=400000]\nsns.boxplot(x=\"MSSubClass\", y=\"SalePrice\", data=train,ax=ax[1])\nax[1].set_title(\"Boxplot of Price for MSSubClass(price<=400000)\",size=20)","f176ea0b":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ntrain.MSZoning.value_counts().sort_values(ascending=False).plot(kind='bar',color=clr,ax=ax[0])\nax[0].set_title(\"bar chart for MSZoning\",size=20)\nax[0].set_xlabel('counts',size=18)\nax[0].tick_params(axis='x',rotation=360)\n\nsns.boxplot(x=\"MSZoning\", y=\"SalePrice\", data=train,ax=ax[1])\nax[1].set_title(\"Boxplot of Price for MSZoning\",size=20)","8bfa4444":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ntrain.Neighborhood.value_counts().sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\nax[0].set_title(\"Top 10 Neighborhood by counts\",size=20)\nax[0].set_xlabel('counts',size=18)\n\n\ncount=train.Neighborhood.value_counts()\ngroups=list(train.Neighborhood.value_counts().index)[:10]\ncounts=list(count[:10])\ncounts.append(count.agg(sum)-count[:10].agg('sum'))\ngroups.append('Other')\ntype_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\nclr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','blue','plum')\nqx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.9, radius=1.2,ax=ax[1])\nplt.legend(loc=0, bbox_to_anchor=(1.15,0.8)) \nplt.subplots_adjust(wspace =0.5, hspace =0)\nplt.ylabel('')","6039af7f":"fig,ax=plt.subplots(figsize=(25,15))\nsns.boxplot(x=\"Neighborhood\", y=\"SalePrice\", data=train,ax=ax)\nax.set_title(\"Boxplot of Price for Neighborhood\",size=20)","a325805e":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ntrain.groupby(['OverallQual'])['Id'].agg('count').plot(kind='bar',color=clr,ax=ax[0])\nax[0].set_title(\"Top 10 OverallQual by counts\",size=20)\nax[0].set_xlabel('counts',size=18)\n\n\ncount=train.groupby(['OverallQual'])['Id'].agg('count')\ngroups=list(train.groupby(['OverallQual'])['Id'].agg('count').index)\ncounts=list(count)\ntype_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\nclr1=(\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\nqx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.9, radius=1.2,ax=ax[1])\nplt.legend(loc=0, bbox_to_anchor=(1.20,0.8)) \nplt.subplots_adjust(wspace =0.5, hspace =0)\nplt.ylabel('')","1ba873b2":"fig,ax=plt.subplots(figsize=(25,15))\nsns.boxplot(x=\"OverallQual\", y=\"SalePrice\", data=train,ax=ax)\nax.set_title(\"Boxplot of Price for OverallQual\",size=20)","83dafc12":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ntrain.groupby(['OverallCond'])['Id'].agg('count').plot(kind='bar',color=clr,ax=ax[0])\nax[0].set_title(\"Top 10 OverallCond by counts\",size=20)\nax[0].set_xlabel('counts',size=18)\n\n\ncount=train.groupby(['OverallCond'])['Id'].agg('count')\ngroups=list(train.groupby(['OverallCond'])['Id'].agg('count').index)\ncounts=list(count)\ntype_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\nclr1=(\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\nqx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.9, radius=1.2,ax=ax[1])\nplt.legend(loc=0, bbox_to_anchor=(1.20,0.8)) \nplt.subplots_adjust(wspace =0.5, hspace =0)\nplt.ylabel('')","c9e14a5d":"fig,ax=plt.subplots(figsize=(25,15))\nsns.boxplot(x=\"OverallCond\", y=\"SalePrice\", data=train,ax=ax)\nax.set_title(\"Boxplot of Price for OverallCond\",size=20)","d18435fe":"data_tree=train[['MSSubClass','MSZoning','Neighborhood','OverallQual','OverallCond','SalePrice']]\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndata_tree['MSZoning_new'] = labelencoder.fit_transform(data_tree['MSZoning'])\ndata_tree['Neighborhood_new'] = labelencoder.fit_transform(data_tree['Neighborhood'])\ndata_tree.head()","501dc29a":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nx_train,x_test,y_train,y_test=train_test_split(data_tree[['MSSubClass','MSZoning_new','Neighborhood_new','OverallQual','OverallCond']],data_tree[['SalePrice']],test_size=0.1,random_state=300)\ntree=DecisionTreeRegressor(criterion='mse',max_depth=4,random_state=0)\ntree=tree.fit(x_train,y_train)\ny=y_test['SalePrice']\npredict=tree.predict(x_test)\nprint(np.mean(abs(np.multiply(np.array(y_test.T-predict),np.array(1\/y_test)))))","f338d8fb":"data_tree_for_test=test[['Id','MSSubClass','MSZoning','Neighborhood','OverallQual','OverallCond']]\ndata_tree_for_test.isnull().sum()","21f9fda5":"data_tree_for_test[data_tree_for_test.MSZoning.isnull()==True]","5a978632":"data_tree_for_test.MSZoning.value_counts()","24e935af":"data_tree_for_test.MSZoning[[455,756,790,1444]]='RL'","84524b2f":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndata_tree_for_test['MSZoning_new'] = labelencoder.fit_transform(data_tree_for_test['MSZoning'])\ndata_tree_for_test['Neighborhood_new'] = labelencoder.fit_transform(data_tree_for_test['Neighborhood'])\ndata_tree_for_test.head()","7845c90b":"predict_test=tree.predict(data_tree_for_test[['MSSubClass','MSZoning_new','Neighborhood_new','OverallQual','OverallCond']])\nsubmit=pd.DataFrame({'Id':data_tree_for_test.Id,'SalePrice':predict_test})\nsubmit.head()","568099bf":"submit.to_csv('submission.csv',index=False)","f3bfaaec":"<h3 id=\"23\">2.3 Visualization for MSZoning<\/h3>","8fab4779":"We replace the NaN in MSZoning with 'RL' because 'RL' is the most count in MSZoning.","4cbced31":"# 3.Regression_tree","663f29f2":"This data size is 1460,and the variable have 81 types,including ID,MSSubClass,and so on.\n\nIn this kernel,I focus on the MSSubClass,MSZonong,Neighborhood,OverallQual,and OverallCond.\n    ","99dd4331":"<h3 id=\"25\">2.5 Visualization for OverallQual<\/h3>","f939bf6f":"I remove the data which saleprice is greater than 400000 to balance the distribution of price for MSSubClass.","f15ee3a3":"The mean absolute error (MAE) is 0.1447 for the regression tree.which is not bad.","a66f70d6":"* [1.DataOverview](#1.DataOverview)\n* [2.Visualization](#2.Visualization)\n    * [2.1 Visualization for correlation](#21)\n    * [2.2 Visualization for MSSubClass](#22)\n    * [2.3 Visualization for MSZoning](#23)\n    * [2.4 Visualization for Neighborhood](#24)\n    * [2.5 Visualization for OverallQual](#25)\n    * [2.6 Visualization for OverallCond](#26)\n* [3.Regression_tree](#3.Regression_tree)\n    ","be1ebead":"From the bar chart,we can know taht the number of missing value in each variable.If you wanna use \n\nthese variables to create Regression Model,you have to watch out them.","d7a1d597":"# 2.Visualization","72053ff9":"<h3 id=\"26\">2.6 Visualization for OverallCond<\/h3>","9f828ea1":"# 1.DataOverview","33f20a2c":"<h3 id=\"21\">2.1 Visualization for correlation<\/h3>","60720248":"<h3 id=\"22\">2.2 Visualization for MSSubClass<\/h3>","7661c149":"<h3 id=\"24\">2.4 Visualization for Neighborhood<\/h3>"}}