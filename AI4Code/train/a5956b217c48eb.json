{"cell_type":{"02a37d02":"code","07d29e74":"code","90244138":"code","f1b05c44":"code","4ce03ff5":"code","5c98143a":"code","7bc6acb5":"code","2e395281":"code","5e85331b":"code","5c5f9768":"code","efc67030":"code","4654e0f5":"code","221a4547":"code","7572af09":"code","f09e7d9f":"code","b293c493":"code","db951348":"code","45176094":"code","8c1bd210":"code","5ebeab93":"code","58c1c10b":"code","5b7396e3":"code","54a0268b":"code","b8dd9280":"code","d1b2713c":"code","9ec831ce":"code","e7876437":"code","d744e68d":"code","6cccb0c0":"code","1144479c":"code","f861e53b":"code","c2f315e7":"code","76f0b6f0":"code","4361dbe4":"code","5080d3c4":"code","b8ab9c06":"code","af4a80c7":"code","6c73a889":"code","6fbecfd6":"code","b1ec3f33":"code","a96b0a95":"code","529ac3da":"code","54696f12":"code","2184dfb7":"code","adf070d9":"code","223fed5b":"code","1f7a3a8e":"code","10ae21fa":"code","6e42aabf":"code","f641a622":"code","b54e6efe":"code","9a901e70":"code","5f3d1384":"code","42c2c81d":"code","4fb8c090":"code","a559d909":"code","fd5ef722":"code","cd3f5182":"code","3e278e1b":"code","728eb4e9":"code","c7596cd9":"markdown","b98545c1":"markdown","cc941be4":"markdown","c36142bd":"markdown","1ae94bbd":"markdown","8719847c":"markdown","15b737bd":"markdown","61dd5ea9":"markdown","97c7ea8a":"markdown","5f53e0db":"markdown","2204f543":"markdown","ba7731cb":"markdown","8e6cb689":"markdown","4ed043dc":"markdown","8635d9c8":"markdown","03f1d558":"markdown","4beb1683":"markdown","705bfb63":"markdown","30f6898f":"markdown","9248e185":"markdown","6a5f18dd":"markdown","97293bb9":"markdown","d732bdbc":"markdown","0faf4f44":"markdown","33576c43":"markdown","d3dcdbfc":"markdown","a1ccc247":"markdown","d5b00b4c":"markdown","c941875b":"markdown"},"source":{"02a37d02":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport datetime\nfrom kaggle.competitions import nflrush\nimport tqdm\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nimport keras\n\nsns.set_style('darkgrid')\nmpl.rcParams['figure.figsize'] = [15,10]","07d29e74":"train = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', dtype={'WindSpeed': 'object'})","90244138":"train.head()","f1b05c44":"train['PlayId'].value_counts()","4ce03ff5":"train['Yards'].describe()","5c98143a":"ax = sns.distplot(train['Yards'])\nplt.vlines(train['Yards'].mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(train['Yards'].mean()-8, plt.ylim()[1]-0.005, \"Mean yards travaled\", size=15, color='r')\nplt.xlabel(\"\")\nplt.title(\"Yards travaled distribution\", size=20);","7bc6acb5":"cat_features = []\nfor col in train.columns:\n    if train[col].dtype =='object':\n        cat_features.append((col, len(train[col].unique())))","2e395281":"off_form = train['OffenseFormation'].unique()\ntrain['OffenseFormation'].value_counts()","5e85331b":"train = pd.concat([train.drop(['OffenseFormation'], axis=1), pd.get_dummies(train['OffenseFormation'], prefix='Formation')], axis=1)\ndummy_col = train.columns","5c5f9768":"train['GameClock'].value_counts()","efc67030":"def strtoseconds(txt):\n    txt = txt.split(':')\n    ans = int(txt[0])*60 + int(txt[1]) + int(txt[2])\/60\n    return ans","4654e0f5":"train['GameClock'] = train['GameClock'].apply(strtoseconds)","221a4547":"sns.distplot(train['GameClock'])","7572af09":"train['PlayerHeight']","f09e7d9f":"train['PlayerHeight'] = train['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))","b293c493":"train['TimeHandoff']","db951348":"train['TimeHandoff'] = train['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\ntrain['TimeSnap'] = train['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))","45176094":"train['TimeDelta'] = train.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)","8c1bd210":"train['PlayerBirthDate'] = train['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))","5ebeab93":"seconds_in_year = 60*60*24*365.25\ntrain['PlayerAge'] = train.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)","58c1c10b":"train = train.drop(['TimeHandoff', 'TimeSnap', 'PlayerBirthDate'], axis=1)","5b7396e3":"train['WindSpeed'].value_counts()","54a0268b":"train['WindSpeed'] = train['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)","b8dd9280":"train['WindSpeed'].value_counts()","d1b2713c":"#let's replace the ones that has x-y by (x+y)\/2\n# and also the ones with x gusts up to y\ntrain['WindSpeed'] = train['WindSpeed'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\ntrain['WindSpeed'] = train['WindSpeed'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)","9ec831ce":"def str_to_float(txt):\n    try:\n        return float(txt)\n    except:\n        return -1","e7876437":"train['WindSpeed'] = train['WindSpeed'].apply(str_to_float)","d744e68d":"train['WindDirection'].value_counts()","6cccb0c0":"train.drop('WindDirection', axis=1, inplace=True)","1144479c":"train['PlayDirection'].value_counts()","f861e53b":"train['PlayDirection'] = train['PlayDirection'].apply(lambda x: x is 'right')","c2f315e7":"train['Team'] = train['Team'].apply(lambda x: x.strip()=='home')","76f0b6f0":"train['GameWeather'].unique()","4361dbe4":"train['GameWeather'] = train['GameWeather'].str.lower()\nindoor = \"indoor\"\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: indoor if not pd.isna(x) and indoor in x else x)\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: x.replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)","5080d3c4":"train['GameWeather'].unique()","b8ab9c06":"from collections import Counter\nweather_count = Counter()\nfor weather in train['GameWeather']:\n    if pd.isna(weather):\n        continue\n    for word in weather.split():\n        weather_count[word]+=1\n        \nweather_count.most_common()[:15]","af4a80c7":"def map_weather(txt):\n    ans = 1\n    if pd.isna(txt):\n        return 0\n    if 'partly' in txt:\n        ans*=0.5\n    if 'climate controlled' in txt or 'indoor' in txt:\n        return ans*3\n    if 'sunny' in txt or 'sun' in txt:\n        return ans*2\n    if 'clear' in txt:\n        return ans\n    if 'cloudy' in txt:\n        return -ans\n    if 'rain' in txt or 'rainy' in txt:\n        return -2*ans\n    if 'snow' in txt:\n        return -3*ans\n    return 0","6c73a889":"train['GameWeather'] = train['GameWeather'].apply(map_weather)","6fbecfd6":"train['IsRusher'] = train['NflId'] == train['NflIdRusher']","b1ec3f33":"train.drop(['NflId', 'NflIdRusher'], axis=1, inplace=True)","a96b0a95":"def fe(train):\n#     train['X1'] = 120 - train['X']\n#     train['Y1'] = 53.3 - train['Y']\n    train['DefendersInTheBox_vs_Distance'] = train['DefendersInTheBox'] \/ train['Distance']\n    \n    def strtoseconds(txt):\n        txt = txt.split(':')\n        return int(txt[0])*60 + int(txt[1]) + int(txt[2])\/60\n    \n    # from https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/discussion\/112173#latest-647309\n    train['JerseyNumber_grouped'] = train['JerseyNumber'] \/\/ 10\n#     train['Height_cm'] = train['PlayerHeight'].apply(lambda x: int(x.split('-')[1]))\n    train['BMI'] = (train['PlayerWeight'] * 703) \/ (train['PlayerHeight'] ** 2)","529ac3da":"train = train.sort_values(by=['PlayId', 'Team', 'IsRusher']).reset_index()","54696f12":"train.drop(['GameId', 'PlayId', 'index', 'IsRusher', 'Team'], axis=1, inplace=True)","2184dfb7":"cat_features = []\nfor col in train.columns:\n    if train[col].dtype =='object':\n        cat_features.append(col)\n        \ntrain = train.drop(cat_features, axis=1)","adf070d9":"train.fillna(-999, inplace=True)","223fed5b":"players_col = []\nfor col in train.columns:\n    if train[col][:22].std()!=0:\n        players_col.append(col)","1f7a3a8e":"X_train = np.array(train[players_col]).reshape(-1, 11*22)","10ae21fa":"play_col = train.drop(players_col+['Yards'], axis=1).columns\nX_play_col = np.zeros(shape=(X_train.shape[0], len(play_col)))\nfor i, col in enumerate(play_col):\n    X_play_col[:, i] = train[col][::22]","6e42aabf":"X_train = np.concatenate([X_train, X_play_col], axis=1)\ny_train = np.zeros(shape=(X_train.shape[0], 199))\nfor i,yard in enumerate(train['Yards'][::22]):\n    y_train[i, yard+99:] = np.ones(shape=(1, 100-yard))","f641a622":"def crps(y_true, y_pred):\n    ans = 0\n    ground_t = y_true.argmax(1)\n    for i, t in enumerate(ground_t):\n        for n in range(-99, 100):\n            h = n>=(t-99)\n            \n            ans+=(y_pred[i][n+99]-h)**2\n            \n    return ans\/(199*len(y_true))","b54e6efe":"from keras.callbacks import EarlyStopping","9a901e70":"from keras import backend as K\n\n\n__all__ = ['RAdam']\n\n\nclass RAdam(keras.optimizers.Optimizer):\n    \"\"\"RAdam optimizer.\n    # Arguments\n        learning_rate: float >= 0. Learning rate.\n        beta_1: float, 0 < beta < 1. Generally close to 1.\n        beta_2: float, 0 < beta < 1. Generally close to 1.\n        epsilon: float >= 0. Fuzz factor. If `None`, defaults to `K.epsilon()`.\n        decay: float >= 0. Learning rate decay over each update.\n        weight_decay: float >= 0. Weight decay for each param.\n        amsgrad: boolean. Whether to apply the AMSGrad variant of this\n            algorithm from the paper \"On the Convergence of Adam and\n            Beyond\".\n        total_steps: int >= 0. Total number of training steps. Enable warmup by setting a positive value.\n        warmup_proportion: 0 < warmup_proportion < 1. The proportion of increasing steps.\n        min_lr: float >= 0. Minimum learning rate after warmup.\n    # References\n        - [Adam - A Method for Stochastic Optimization](https:\/\/arxiv.org\/abs\/1412.6980v8)\n        - [On the Convergence of Adam and Beyond](https:\/\/openreview.net\/forum?id=ryQu7f-RZ)\n        - [On The Variance Of The Adaptive Learning Rate And Beyond](https:\/\/arxiv.org\/pdf\/1908.03265v1.pdf)\n    \"\"\"\n\n    def __init__(self, learning_rate=0.001, beta_1=0.9, beta_2=0.999,\n                 epsilon=None, decay=0., weight_decay=0., amsgrad=False,\n                 total_steps=0, warmup_proportion=0.1, min_lr=0., **kwargs):\n        learning_rate = kwargs.pop('lr', learning_rate)\n        super(RAdam, self).__init__(**kwargs)\n        with K.name_scope(self.__class__.__name__):\n            self.iterations = K.variable(0, dtype='int64', name='iterations')\n            self.learning_rate = K.variable(learning_rate, name='learning_rate')\n            self.beta_1 = K.variable(beta_1, name='beta_1')\n            self.beta_2 = K.variable(beta_2, name='beta_2')\n            self.decay = K.variable(decay, name='decay')\n            self.weight_decay = K.variable(weight_decay, name='weight_decay')\n            self.total_steps = K.variable(total_steps, name='total_steps')\n            self.warmup_proportion = K.variable(warmup_proportion, name='warmup_proportion')\n            self.min_lr = K.variable(min_lr, name='min_lr')\n        if epsilon is None:\n            epsilon = K.epsilon()\n        self.epsilon = epsilon\n        self.initial_decay = decay\n        self.initial_weight_decay = weight_decay\n        self.initial_total_steps = total_steps\n        self.amsgrad = amsgrad\n\n    def get_updates(self, loss, params):\n        grads = self.get_gradients(loss, params)\n        self.updates = [K.update_add(self.iterations, 1)]\n\n        lr = self.lr\n\n        if self.initial_decay > 0:\n            lr = lr * (1. \/ (1. + self.decay * K.cast(self.iterations, K.dtype(self.decay))))\n\n        t = K.cast(self.iterations, K.floatx()) + 1\n\n        if self.initial_total_steps > 0:\n            warmup_steps = self.total_steps * self.warmup_proportion\n            decay_steps = K.maximum(self.total_steps - warmup_steps, 1)\n            decay_rate = (self.min_lr - lr) \/ decay_steps\n            lr = K.switch(\n                t <= warmup_steps,\n                lr * (t \/ warmup_steps),\n                lr + decay_rate * K.minimum(t - warmup_steps, decay_steps),\n            )\n\n        ms = [K.zeros(K.int_shape(p), dtype=K.dtype(p), name='m_' + str(i)) for (i, p) in enumerate(params)]\n        vs = [K.zeros(K.int_shape(p), dtype=K.dtype(p), name='v_' + str(i)) for (i, p) in enumerate(params)]\n\n        if self.amsgrad:\n            vhats = [K.zeros(K.int_shape(p), dtype=K.dtype(p), name='vhat_' + str(i)) for (i, p) in enumerate(params)]\n        else:\n            vhats = [K.zeros(1, name='vhat_' + str(i)) for i in range(len(params))]\n\n        self.weights = [self.iterations] + ms + vs + vhats\n\n        beta_1_t = K.pow(self.beta_1, t)\n        beta_2_t = K.pow(self.beta_2, t)\n\n        sma_inf = 2.0 \/ (1.0 - self.beta_2) - 1.0\n        sma_t = sma_inf - 2.0 * t * beta_2_t \/ (1.0 - beta_2_t)\n\n        for p, g, m, v, vhat in zip(params, grads, ms, vs, vhats):\n            m_t = (self.beta_1 * m) + (1. - self.beta_1) * g\n            v_t = (self.beta_2 * v) + (1. - self.beta_2) * K.square(g)\n\n            m_corr_t = m_t \/ (1.0 - beta_1_t)\n            if self.amsgrad:\n                vhat_t = K.maximum(vhat, v_t)\n                v_corr_t = K.sqrt(vhat_t \/ (1.0 - beta_2_t))\n                self.updates.append(K.update(vhat, vhat_t))\n            else:\n                v_corr_t = K.sqrt(v_t \/ (1.0 - beta_2_t))\n\n            r_t = K.sqrt((sma_t - 4.0) \/ (sma_inf - 4.0) *\n                         (sma_t - 2.0) \/ (sma_inf - 2.0) *\n                         sma_inf \/ sma_t)\n\n            p_t = K.switch(sma_t >= 5, r_t * m_corr_t \/ (v_corr_t + self.epsilon), m_corr_t)\n\n            if self.initial_weight_decay > 0:\n                p_t += self.weight_decay * p\n\n            p_t = p - lr * p_t\n\n            self.updates.append(K.update(m, m_t))\n            self.updates.append(K.update(v, v_t))\n            new_p = p_t\n\n            # Apply constraints.\n            if getattr(p, 'constraint', None) is not None:\n                new_p = p.constraint(new_p)\n\n            self.updates.append(K.update(p, new_p))\n        return self.updates\n\n    @property\n    def lr(self):\n        return self.learning_rate\n\n    @lr.setter\n    def lr(self, learning_rate):\n        self.learning_rate = learning_rate\n\n    def get_config(self):\n        config = {\n            'learning_rate': float(K.get_value(self.learning_rate)),\n            'beta_1': float(K.get_value(self.beta_1)),\n            'beta_2': float(K.get_value(self.beta_2)),\n            'decay': float(K.get_value(self.decay)),\n            'weight_decay': float(K.get_value(self.weight_decay)),\n            'epsilon': self.epsilon,\n            'amsgrad': self.amsgrad,\n            'total_steps': float(K.get_value(self.total_steps)),\n            'warmup_proportion': float(K.get_value(self.warmup_proportion)),\n            'min_lr': float(K.get_value(self.min_lr)),\n        }\n        base_config = super(RAdam, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))","5f3d1384":"def train_model(x_tr, y_tr, x_vl, y_vl):\n    model = keras.models.Sequential([\n        keras.layers.Dense(units=256, input_shape=[X_train.shape[1]]),\n        keras.layers.BatchNormalization(),\n        keras.layers.LeakyReLU(0.25),\n        keras.layers.Dropout(0.2),\n    \n        keras.layers.Dense(units=512),\n        keras.layers.BatchNormalization(),\n        keras.layers.LeakyReLU(0.25),\n    \n        keras.layers.Dropout(0.2),\n    \n        keras.layers.Dense(units=199, activation='sigmoid')\n    ])\n    \n    er = EarlyStopping(patience=5, min_delta=1e-4, restore_best_weights=True, monitor='val_loss')\n    \n    model.compile(optimizer=RAdam(warmup_proportion=0.1, min_lr=1e-5), loss='binary_crossentropy')\n    model.fit(x_tr, y_tr, epochs=500, callbacks=[er], validation_data=[x_vl, y_vl])\n    return model","42c2c81d":"def make_pred(df, sample, env, models):\n    df['OffenseFormation'] = df['OffenseFormation'].apply(lambda x: x if x in off_form else np.nan)\n    df = pd.concat([df.drop(['OffenseFormation'], axis=1), pd.get_dummies(df['OffenseFormation'], prefix='Formation')], axis=1)\n    missing_cols = set( dummy_col ) - set( test.columns )-set('Yards')\n    for c in missing_cols:\n        df[c] = 0\n    df = df[dummy_col]\n    df.drop(['Yards'], axis=1, inplace=True)\n    df['GameClock'] = df['GameClock'].apply(strtoseconds)\n    df['PlayerHeight'] = df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n    df['TimeHandoff'] = df['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    df['TimeSnap'] = df['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    df['TimeDelta'] = df.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)\n    df['PlayerBirthDate'] = df['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))\n    seconds_in_year = 60*60*24*365.25\n    df['PlayerAge'] = df.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)\n    df['WindSpeed'] = df['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)\n    df['WindSpeed'] = df['WindSpeed'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\n    df['WindSpeed'] = df['WindSpeed'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)\n    df['WindSpeed'] = df['WindSpeed'].apply(str_to_float)\n    df['PlayDirection'] = train['PlayDirection'].apply(lambda x: x is 'right')\n    df['Team'] = df['Team'].apply(lambda x: x.strip()=='home')\n    indoor = \"indoor\"\n    df['GameWeather'] = df['GameWeather'].apply(lambda x: indoor if not pd.isna(x) and indoor in x else x)\n    df['GameWeather'] = df['GameWeather'].apply(lambda x: x.lower().replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly').replace('clear and sunny', 'sunny and clear').replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)\n    df['GameWeather'] = df['GameWeather'].apply(map_weather)\n    df['IsRusher'] = df['NflId'] == df['NflIdRusher']\n    \n    df = df.sort_values(by=['PlayId', 'Team', 'IsRusher']).reset_index()\n    df = df.drop(['TimeHandoff', 'TimeSnap', 'PlayerBirthDate', 'WindDirection', 'NflId', 'NflIdRusher', 'GameId', 'PlayId', 'index', 'IsRusher', 'Team'], axis=1)\n    cat_features = []\n    for col in df.columns:\n        if df[col].dtype =='object':\n            cat_features.append(col)\n\n    df = df.drop(cat_features, axis=1)\n    df.fillna(-999, inplace=True)\n    X = np.array(df[players_col]).reshape(-1, 11*22)\n    play_col = df.drop(players_col, axis=1).columns\n    X_play_col = np.zeros(shape=(X.shape[0], len(play_col)))\n    for i, col in enumerate(play_col):\n        X_play_col[:, i] = df[col][::22]\n    X = np.concatenate([X, X_play_col], axis=1)\n    y_pred = np.mean([model.predict(X) for model in models], axis=0)\n    for pred in y_pred:\n        prev = 0\n        for i in range(len(pred)):\n            if pred[i]<prev:\n                pred[i]=prev\n            prev=pred[i]\n    env.predict(pd.DataFrame(data=y_pred,columns=sample.columns))\n    return y_pred","4fb8c090":"from sklearn.model_selection import RepeatedKFold\n\nrkf = RepeatedKFold(n_splits=5, n_repeats=5)","a559d909":"from keras import backend as K","fd5ef722":"models = []\n\nfor tr_idx, vl_idx in rkf.split(X_train, y_train):\n    \n    x_tr, y_tr = X_train[tr_idx], y_train[tr_idx]\n    x_vl, y_vl = X_train[vl_idx], y_train[vl_idx]\n    \n    model = train_model(x_tr, y_tr, x_vl, y_vl)\n    models.append(model)","cd3f5182":"env = nflrush.make_env()","3e278e1b":"for test, sample in tqdm.tqdm(env.iter_test()):\n    make_pred(test, sample, env, models)","728eb4e9":"env.write_submission_file()","c7596cd9":"We know that 1ft=12in, thus:","b98545c1":"Let's now look at the most common words we have in the weather description","cc941be4":"## Game Weather","c36142bd":"## PlayDirection","1ae94bbd":"We are going to apply the following preprocessing:\n \n- Lower case\n- N\/A Indoor, N\/A (Indoors) and Indoor => indoor Let's try to cluster those together.\n- coudy and clouidy => cloudy\n- party => partly\n- sunny and clear => clear and sunny\n- skies and mostly => \"\"","8719847c":"## Offense formation","15b737bd":"- Let's see how PlayId is distribuited","61dd5ea9":"## Team","97c7ea8a":"## NflId NflIdRusher","5f53e0db":"# Baseline model","2204f543":"Since we already have the quarter feature, we can just divide the Game Clock by 15 minutes so we can get the normalized time left in the quarter.","ba7731cb":"Game clock is supposed to be a numerical feature.","8e6cb689":"Let's use the time handoff to calculate the players age","4ed043dc":"We are now going to make one big row for each play where the rusher is the last one","8635d9c8":"Since I don't have any knowledge about formations, I am just goig to one-hot encode this feature","03f1d558":"Let's drop the categorical features and run a simple random forest in our model","4beb1683":"## Player height","705bfb63":"## Game Clock","30f6898f":"We can see there are some values that are not standardized(e.g. 12mph), we are going to remove mph from all our values.","9248e185":"# Overall analysis","6a5f18dd":"# Categorical features","97293bb9":"Let's preprocess some of those features.","d732bdbc":"The wind direction won't affect our model much because we are analyzing running plays so we are just going to drop it.","0faf4f44":"## Wind Speed and Direction","33576c43":"To encode our weather we are going to do the following map:\n \n- climate controlled or indoor => 3, sunny or sun => 2, clear => 1, cloudy => -1, rain => -2, snow => -3, others => 0\n- partly => multiply by 0.5\n\nI don't have any expercience with american football so I don't know if playing in a climate controlled or indoor stadium is good or not, if someone has a good idea on how to encode this it would be nice to leave it in the comments :)","d3dcdbfc":"# Extra Features","a1ccc247":"## Time handoff and snap and Player BirthDate","d5b00b4c":"# End\n\nIf you reached this far please comment and upvote this kernel, feel free to make improvements on the kernel and please share if you found anything useful!","c941875b":"As expected, we have 22 of each playid since we have 22 players.\n\nLet's look at our target variable(Yards)."}}