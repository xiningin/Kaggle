{"cell_type":{"ba2683db":"code","686ce369":"code","178d9495":"code","20de88ff":"code","6f923201":"code","70f4ddfa":"code","ec9438ec":"code","83d17458":"code","804b9bae":"code","4fb8a901":"code","1eb7520f":"markdown"},"source":{"ba2683db":"import torch\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport torch.nn as nn\nimport numpy as np\nimport sys\nimport pandas as pd\nimport random\nfrom sklearn.preprocessing import StandardScaler\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(484)\ntorch.manual_seed(484)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(484)","686ce369":"data = pd.read_csv('..\/input\/city-commercialchange-analysis\/train.csv')\ndata","178d9495":"scaler = StandardScaler()\n#test = pd.read_csv('test_data.csv')\n\nx_train_data = data.loc[:,'year':'Closing months_Average']\ny_train_data = data.loc[:,'Commercial change']\n\nxs_data = scaler.fit_transform(x_train_data)\n\nx_train = torch.FloatTensor(xs_data[:551])\ny_train = torch.LongTensor(y_train_data.values)\n","20de88ff":"xs_data.shape","6f923201":"epochs = 10001\n\nW = torch.zeros((7, 4), requires_grad=True)\nb = torch.zeros(4, requires_grad=True)\n\noptimizer = optim.SGD([W, b], lr=0.01)\n\nfor ep in range(epochs):\n    hypothesis = x_train.matmul(W) + b\n    cost = F.cross_entropy(hypothesis, y_train)\n\n    optimizer.zero_grad()\n    cost.backward()\n    optimizer.step()\n\n    if ep%1000 == 0:\n        print('{:4}: loss: {:2.8f}'.format(ep, cost.item()))","70f4ddfa":"test = pd.read_csv('..\/input\/city-commercialchange-analysis\/test.csv')\nx_data = test.loc[:,'year':'Closing months_Average']\nxs_data = scaler.fit_transform(x_data)","ec9438ec":"x_test = torch.FloatTensor(xs_data[:62])","83d17458":"x_test","804b9bae":"with torch.no_grad():\n    \n    hypothesis = x_test.matmul(W) + b\n    \n    real_test_df = pd.DataFrame([[i, r] for i, r in enumerate(torch.argmax(hypothesis, dim=1).numpy())], columns=['ID','Label'])\n    real_test_df.to_csv('result.csv', mode='w', index=False)","4fb8a901":"real_test_df","1eb7520f":"## \ucc28\ubcc4\uc810 : \ub370\uc774\ud130 \uc804\ucc98\ub9ac TrainSet Scale , \ubc29\ubc95\ub860"}}