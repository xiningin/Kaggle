{"cell_type":{"31694b2f":"code","023b4d60":"code","1059f3d8":"code","b20942e4":"code","d15ec592":"code","71ad7564":"code","15af4442":"code","ea89b235":"code","7b60c721":"code","7952a331":"code","57a239f6":"code","8f026edd":"code","9ede5d93":"code","ee060403":"code","ea30a0d2":"code","79b25ca1":"code","e379c322":"code","4154138b":"code","c56efacf":"code","aae97c41":"code","15e858a3":"code","df2f2d69":"code","e97431ef":"code","9824d8c1":"code","49064f99":"code","151815eb":"code","980d9b35":"code","9b69b2c3":"code","4e461b5b":"code","abae0792":"code","7c119f30":"code","22b72557":"code","b497955a":"code","2fadd57b":"code","b7b108ce":"code","68ef2158":"code","b69d672f":"code","89a3896b":"code","13c27e77":"code","b9d02ed6":"code","1d9feadc":"code","55a085e1":"code","9c43169f":"code","a73543b7":"code","2b6bf91b":"code","6be97217":"code","df2bba4d":"code","fa097b01":"code","1a83716b":"code","3fda7afe":"code","76bc5e0e":"code","cf7d7d2a":"code","6e0adb57":"code","c33ee4c2":"code","02537a89":"code","839b78fc":"code","2ac5c8b9":"code","59ad7a70":"code","b4f2e028":"code","fe49708e":"code","352bd2b8":"code","5e14a8e3":"code","2774ad18":"markdown","168d01f4":"markdown","37670376":"markdown","f4b73983":"markdown","0a5be1b7":"markdown","9f993dfd":"markdown","55170ab8":"markdown","02f61c58":"markdown","ab3f9e92":"markdown","debfcc1b":"markdown","496eaa65":"markdown","4891f209":"markdown","9aafc7f2":"markdown","54dac202":"markdown","33e23123":"markdown","e9a775bf":"markdown","d2d7d1f0":"markdown","e7dd2c60":"markdown","ac3d9504":"markdown","68fa73df":"markdown","224428cc":"markdown","e5542f61":"markdown","c5f9ab95":"markdown","3ca11712":"markdown","7fd1e204":"markdown","a2aa5b46":"markdown","160d281b":"markdown","6ee50287":"markdown","d40f7d31":"markdown","f857ae94":"markdown","0f4fb5f2":"markdown","e240d319":"markdown","4cd7be1c":"markdown","7775d619":"markdown","b6807099":"markdown","e13ea94b":"markdown","eaad53af":"markdown","c42c7c19":"markdown","6fb6e30d":"markdown","3c7e2fd4":"markdown","23b6e4e2":"markdown","662f90bf":"markdown","88d7e25e":"markdown","5055bf5d":"markdown","d8a58672":"markdown","c3cc4a5c":"markdown","8ae1b292":"markdown"},"source":{"31694b2f":"# Configure matplotlib.\n%matplotlib inline\n\n# Unclutter the display.\nimport pandas as pd; \npd.set_option('max_columns', 6)","023b4d60":"import geopandas as gpd\n","1059f3d8":"import geoplot as gplt\nusa_cities = gpd.read_file(gplt.datasets.get_path('usa_cities'))\nusa_cities.head()","b20942e4":"continental_usa_cities = usa_cities.query('STATE not in [\"HI\", \"AK\", \"PR\"]')\ngplt.pointplot(continental_usa_cities)","d15ec592":"usa_cities['STATE'].unique()","71ad7564":"contiguous_usa = gpd.read_file(gplt.datasets.get_path('contiguous_usa'))\ngplt.polyplot(contiguous_usa)","15af4442":"ax = gplt.polyplot(contiguous_usa)\ngplt.pointplot(continental_usa_cities, ax=ax)","ea89b235":"import geoplot.crs as gcrs\n\nax = gplt.polyplot(contiguous_usa, projection=gcrs.AlbersEqualArea())\ngplt.pointplot(continental_usa_cities, ax=ax)","7b60c721":"ax = gplt.webmap(contiguous_usa, projection=gcrs.WebMercator())\ngplt.pointplot(continental_usa_cities, ax=ax)","7952a331":"ax = gplt.webmap(contiguous_usa, projection=gcrs.WebMercator())\ngplt.pointplot(continental_usa_cities, ax=ax, hue='ELEV_IN_FT', legend=True)","57a239f6":"continental_usa_cities","8f026edd":"ax = gplt.webmap(contiguous_usa, projection=gcrs.WebMercator())\ngplt.pointplot(continental_usa_cities, ax=ax, hue='ELEV_IN_FT', cmap='nipy_spectral', legend=True)","9ede5d93":"ax = gplt.webmap(contiguous_usa, projection=gcrs.WebMercator())\ngplt.pointplot(continental_usa_cities, ax=ax, hue='ELEV_IN_FT', cmap='cool', legend=True)","ee060403":"ax = gplt.polyplot(\n    contiguous_usa, projection=gcrs.AlbersEqualArea(),\n    edgecolor='white', facecolor='lightgray',\n    figsize=(12, 8)\n)\ngplt.pointplot(\n    continental_usa_cities, ax=ax, hue='ELEV_IN_FT', cmap='Blues',\n    scheme='quantiles',\n    scale='ELEV_IN_FT', limits=(1, 10),\n    legend=True, legend_var='scale',\n    legend_kwargs={'frameon': False},\n    legend_values=[-110, 1750, 3600, 5500, 7400],\n    legend_labels=['-110 feet', '1750 feet', '3600 feet', '5500 feet', '7400 feet']\n)\nax.set_title('Cities in the Continental United States by Elevation', fontsize=16)","ea30a0d2":"gplt.choropleth(\n    contiguous_usa, hue='population', projection=gcrs.AlbersEqualArea(),\n    edgecolor='white', linewidth=2,\n    cmap='cool', legend=True,\n    scheme='FisherJenks',\n    legend_labels=[\n        '<3 million', '3-6.7 million', '6.7-12.8 million',\n        '12.8-25 million', '25-37 million'\n    ]\n)","79b25ca1":"contiguous_usa","e379c322":"boroughs = gpd.read_file(gplt.datasets.get_path('nyc_boroughs'))\ncollisions = gpd.read_file(gplt.datasets.get_path('nyc_collision_factors'))\n\nax = gplt.kdeplot(collisions, cmap='Reds', shade=True, clip=boroughs, projection=gcrs.AlbersEqualArea())\ngplt.polyplot(boroughs, zorder=1, ax=ax)","4154138b":"import pandas as pd;\npd.set_option('max_columns', 6) \n# Unclutter display.\nimport geopandas as gpd\nimport geoplot as gplt\n\n# load the example data\nnyc_boroughs = gpd.read_file(gplt.datasets.get_path('nyc_boroughs'))\nnyc_boroughs","c56efacf":"nyc_boroughs.geometry","aae97c41":"nyc_boroughs.crs\n","15e858a3":"nyc_map_pluto_sample = gpd.read_file(gplt.datasets.get_path('nyc_map_pluto_sample'))\nnyc_map_pluto_sample","df2f2d69":"nyc_map_pluto_sample.crs = {'init': 'epsg:2263'}\nnyc_map_pluto_sample.crs","e97431ef":"nyc_map_pluto_sample","9824d8c1":"nyc_map_pluto_sample = nyc_map_pluto_sample.to_crs(epsg=4326)\nnyc_map_pluto_sample","49064f99":"nyc_map_pluto_sample","151815eb":"type(nyc_boroughs.geometry.iloc[0])","980d9b35":"type(nyc_map_pluto_sample.geometry.iloc[0])","9b69b2c3":"%time gplt.polyplot(nyc_boroughs.geometry.map(lambda shp: shp.convex_hull))","4e461b5b":"nyc_boroughs","abae0792":"type(nyc_map_pluto_sample.geometry)","7c119f30":"(nyc_map_pluto_sample.geometry).is_valid","22b72557":"(nyc_map_pluto_sample.geometry).geom_type","b497955a":"(nyc_map_pluto_sample.geometry).total_bounds","2fadd57b":"(nyc_map_pluto_sample.geometry).bounds","b7b108ce":"(nyc_map_pluto_sample.geometry).area","68ef2158":"gpd.options","b69d672f":"import fiona; help(fiona.open)","89a3896b":"nyc_map_pluto_sample.info()","13c27e77":"nyc_map_pluto_sample.isna().any() # Which column contains missing data","b9d02ed6":"nyc_map_pluto_sample.isna().sum() # how many missing values in any column","1d9feadc":"nyc_map_pluto_sample.notna().any() # Which column contains missing data","55a085e1":"nyc_map_pluto_sample.notna().any().sum() # Which column contains missing data","9c43169f":"nyc_collisions_sample = pd.read_csv(gplt.datasets.get_path('nyc_collisions_sample'))\nnyc_collisions_sample","a73543b7":"from shapely.geometry import Point\ncollisions_points = nyc_collisions_sample.apply( \n    lambda srs: Point(float(srs['LONGITUDE']),float(srs['LATITUDE'])), \n    axis='columns')","2b6bf91b":"collisions_points","6be97217":"import geopandas as gpd\nnyc_collisions_sample_geocoded = gpd.GeoDataFrame(nyc_collisions_sample,geometry=collisions_points)","df2bba4d":"nyc_collisions_sample_geocoded","fa097b01":"obesity = pd.read_csv(gplt.datasets.get_path('obesity_by_state'), sep='\\t')\nobesity.head()","1a83716b":"contiguous_usa = gpd.read_file(gplt.datasets.get_path('contiguous_usa'))\ncontiguous_usa.head()","3fda7afe":"result = contiguous_usa.set_index('state').join(obesity.set_index('State'))\nresult.head()","76bc5e0e":"import geoplot.crs as gcrs\ngplt.cartogram(result, scale='Percent',projection= gcrs.AlbersEqualArea())","cf7d7d2a":"nyc_boroughs.to_file('boroughs.geojson', driver='GeoJSON')","6e0adb57":"{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [125.6, 10.1]\n  },\n  \"properties\": {\n    \"name\": \"Dinagat Islands\"\n  }\n}","c33ee4c2":"%matplotlib inline\nimport geopandas as gpd\nimport geoplot as gplt\n\nusa_cities= gpd.read_file(gplt.datasets.get_path('usa_cities'))\ncontiguous_usa=gpd.read_file(gplt.datasets.get_path('contiguous_usa'))","02537a89":"usa_cities","839b78fc":"usa_cities=usa_cities.query('STATE not in [\"AK\",\"HI\",\"PR\"]')","2ac5c8b9":"import geoplot.crs as gcrs\nax=gplt.webmap(contiguous_usa,projection=gcrs.WebMercator())\ngplt.pointplot(usa_cities,ax=ax\n              )","59ad7a70":"import geoplot.crs as gcrs\nax=gplt.webmap(contiguous_usa,projection=gcrs.WebMercator())\ngplt.pointplot(usa_cities,ax=ax,hue='ELEV_IN_FT'\n              )","b4f2e028":"import mapclassify as mc\nscheme = mc.Quantiles(usa_cities['ELEV_IN_FT'],k=5)\nax=gplt.webmap(contiguous_usa,projection=gcrs.WebMercator())\ngplt.pointplot(usa_cities,ax=ax,hue='ELEV_IN_FT',scheme=scheme)","fe49708e":"ax=gplt.webmap(contiguous_usa,projection=gcrs.WebMercator())\ngplt.pointplot(usa_cities,ax=ax,hue='ELEV_IN_FT',cmap='terrain')","352bd2b8":"ax=gplt.webmap(contiguous_usa,projection=gcrs.WebMercator())\ngplt.pointplot(usa_cities,ax=ax,hue='ELEV_IN_FT',cmap='cool')","5e14a8e3":"large_continental_usa_cities = usa_cities.query('POP_2010 > 100000')\n\nax = gplt.webmap(contiguous_usa, projection=gcrs.WebMercator())\ngplt.pointplot(\n    large_continental_usa_cities, projection=gcrs.AlbersEqualArea(),\n    scale='POP_2010', limits=(4, 50),\n    ax=ax\n)","2774ad18":"In this case epsg:4326 is the official identifier for what the rest of us more commonly refer to as \u201clongitude and latitude\u201d.","168d01f4":"# Coordinate Reference System","37670376":"You might notice that this map of the United States looks very strange. The Earth, being a sphere, is impossible to potray in two dimensionals. Hence, whenever we take data off the sphere and place it onto a map, we are using some kind of projection, or method of flattening the sphere. Plotting data without a projection, or \u201ccarte blanche\u201d, creates distortion in your map. We can \u201cfix\u201d the distortion by picking a better projection.","f4b73983":"We\u2019d like to put this information on a map. But we don\u2019t have any geometry!\n\nWe will once again have to define a geometry. Except that this time, instead of writing our own, we will need to find data with state shapes, and join that data against this data. In other cases there may be other shapes: police precincts, survey zones, and so on. Here is just such a dataset:\n","0a5be1b7":"In most cases, data with geospatial information provided in a CSV will be point data corresponding with individual coordinates. Sometimes, however, one may wish to define more complex geometry: square areas, for example, and maybe even complex polygons. While we won\u2019t cover these cases, they\u2019re quite similar to the extremely simple point case we\u2019ve shown here. For further reference on such a task, refer to the shapely documentation.","9f993dfd":"There are over fifty named colormaps in matplotlib\u2014the reference page has the full list. It is also possible to create your own colormap. Refer to the Napoleon\u2019s march on Moscow example in the Gallery for an example.\n\nPower User Feature: Colormap Normalization\n\nColormap normalization is supported in geoplot via the norm parameter.\n# Scale\n\nAnother visual variable present in some plots in geoplot is scale.","55170ab8":"# Choropleth Projection","02f61c58":"geopandas represents data using a GeoDataFrame, which is just a pandas DataFrame with a special geometry column containing a geometric object describing the physical nature of the record in question: a POINT in space, a POLYGON in the shape of New York, and so on.","ab3f9e92":"# Save formats\n\nYou can read data out of a geospatial file format using GeoDataFrame.from_file. You can write data to a geospatial file format using GeoDataFrame.to_file. By default, these methods will infer the file format and save to a Shapefile, respectively. To specify an explicit file format, pass the name of that format to the driver argument. For example:","debfcc1b":"The GeoDataFrame is an augmented version of a pandas DataFrame with an attached geometry:","496eaa65":"# Position\nA Visual Variable is an attribute of a plot that is used to convey information. One such variable that every maps has in common.","4891f209":"# Hue\n\nThe \u201chue\u201d parameter in geoplot adds color as a visual variable in your plot.\n\n    This parameter is called \u201chue\u201d, not \u201ccolor\u201d, because color is a reserved keyword in the matplotlib API.\n","9aafc7f2":"It is beyond the scope of this short guide to dive too deeply into geospatial data transformations. Suffice to say that there are many of them, and that you can learn some more about them by consulting the geopandas and shapely documentation.\nDefining your own geometries\n\nIn this section of the tutorial, we will focus on one particular aspect of shapely which is likely to come up: defining your own geometries.\n\nIn the cases above we read a GeoDataFrame straight out of geospatial files: our borough information was stored in the GeoJSON format, while our building footprints were a Shapefile. What if we have geospatial data embedded in an ordinary CSV or JSON file, which read into an ordinary pandas DataFrame?","54dac202":"The mapclassify library has a rich list of categorical colormaps to choose from. it is also possible to specify your own custom classification scheme. Refer to the California districts demo in the Gallery for more information.\n\ngeoplot uses the viridis colormap by default. To specify an alternative colormap, use the cmap parameter:","33e23123":"Whenever you work with novel geospatial data in a GeoDataFrame, the first thing you should do is check its coordinate reference system.\nA coordinate reference system, or CRS, is a system for defining where points in space are. You can extract what CRS your polygons are stored in using the crs attribute:","e9a775bf":"It is extremely common for datasets containing light geospatial data (e.g. points, maybe line segments, but usually not whole polygons) to be saved in a non-geospatial formats.\n\nIn this case can import shapely directly, use it to define our own geometries, then initialize a GeoDataFrame. The pandas apply function is the best to do this:\n","d2d7d1f0":"This map tells a clear story: that cities in the central United States have a higher ELEV_IN_FT then most other cities in the United States, especially those on the coast. Toggling the legend on helps make this result more interpretable.\n\nTo use a different colormap, use the cmap parameter:","e7dd2c60":"![](http:\/\/)geoplot comes equipped with a broad variety of visual options which can be tuned to your liking.","ac3d9504":"The simplest and increasingly most common save format for geospatial data is GeoJSON. A geojson file may have a .geojson or .json extension, and stores data in a human-readable format:","68fa73df":"What if you want to create a webmap instead? This is also easy to do.","224428cc":"A simple join solves the problem:","e5542f61":"# geoplot \nis a geospatial data visualization library designed for data scientists and geospatial analysts that just want to get things done.\nHere, we will learn the basics of geoplot and see how it is used.","c5f9ab95":"# Working with the Geospatial Data\n\n how to use geopandas and shapely to manipulate geospatial data in Python. ","3ca11712":"Why do coordinate reference systems besides latitude-longitude even exist? As an example, the United States Geolocial Service, which maintains extremely high-accuracy maps of the United States, maintains 110 coordinate reference systems, refered to as \u201cstate plane coordinate systems\u201d, for various portions of the United States. Latitude-longitude uses spherical coordinates; state plane coordinate systems use \u201cflat-Earth\u201d Cartesian coordinate. State plane coordinates are therefore much simpler to work with computationally, while remaining accurate enough (within their \u201czone\u201d) for most applications.","7fd1e204":"# Types of geometries\n\nEvery element of the geometry column in a GeoDataFrame is a shapely object. Shapely is a geometric operations library which is used for manipulating geometries in space, and it\u2019s the Python API of choice for working with shape data.\n\nshapely defines just a handful of types of geometries:\n\n    Point\u2014a point.\n\n    MultiPoint\u2014a set of points.\n\n    LineString\u2014a line segment.\n\n    MultiLineString\u2014a collection of lines (e.g. a sequence of connected line segments).\n\n    LinearRing\u2014a closed collection of lines. Basically a polygon with zero-area.\n\n    Polygon\u2014an closed shape along a sequence of points.\n\n    MultiPolygon\u2014a collection of polygons.\n\nYou can check the type of a geometry using the type operator:","a2aa5b46":"For this reason, state plane coordinate systems remain in use throughout government. For example, here\u2019s a sample of data taken from the MapPLUTO dataset released by the City of New York:","160d281b":"This is a static webmap. Interactive (scrolly-panny) webmaps are also possible.\n\nThis map tells us that there are more cities on either coast than there are in and around the Rocky Mountains, but it doesn\u2019t tell us anything about the cities themselves. We can make an informative plot by adding hue to the plot:","6ee50287":"A kdeplot smoothes point data out into a heatmap. This makes it easy to spot regional trends in your input data. The clip parameter can be used to clip the resulting plot to the surrounding geometry\u2014in this case, the outline of New York City.\n\nYou should now know enough geoplot to try it out in your own projects!\n\nTo install geoplot, run conda install geoplot. To see more examples using geoplot, check out the Gallery.","d40f7d31":"In this case we set hue='ELEV_IN_FT', telling geoplot to color the points based on mean elevation.\n\nThere are two ways of assigning colors to geometries: a continuous colormap, which just applies colors on a spectrum of data; or a categorical colormap, which buckets data and applies colors not to those buckets.\n\ngeoplot uses a continuous colormap by default. To switch to a categorical colormap, use the scheme parameter:\n","f857ae94":"# Performing geometric operations\n\nThe shapely user manual provides an extensive list of geometric operations that you can perform using the library: from simple things like translations and transformations to more complex operations like polygon buffering.\n\nYou can apply transformations to your geometries in an object-by-object way by using the native pandas map function on the geometry column. For example, here is one way of deconstructing a set of Polygon or MultiPolygon objects into simplified convex hulls:","0f4fb5f2":"The Albers equal area projection is one most common in the United States. Here\u2019s how you use it with geoplot:","e240d319":"\n# Coordinate order\n\nshapely, the library geopandas uses to store its geometries, uses \u201cmodern\u201d longitude-latitude (x, y) coordinate order. This differs from the \u201chistorical\u201d latitude-longitude (y, x) coordinate order. Datasets \u201cin the wild\u201d may be in either format.\n\nThere is no way for geopandas to know whether a dataset is in one format or the other at load time. Once you have converted your dataset to the right coordinate system, always always always make sure to next check that the geometries are also in the right coordinate order.\n\nThis is an easy mistake to make and people are making it constantly!\n\nThe fastest way to ensure that coordinates are in the right order is to know what the right x coordinates and y coordinates for your data should be and eyeball it.\n","4cd7be1c":"Historically speaking, the most common geospatial data format is the Shapefile. Shapefiles are not actually really files, but instead groups of files in a folder or zip archive that together can encode very complex information about your data. Shapefiles are a binary file format, so they are not human-readable like GeoJSON files are, but can efficiently encode data too complex for easy storage in a GeoJSON.\n\nThese are the two best-known file formats, but there are many many others. For a list of geospatial file formats supported by geopandas refer to the fiona user manual.","7775d619":"All functions in geoplot take a GeoDataFrame as input. \nIf your data consists of a bunch of points, you can display those points using pointplot.","b6807099":"# GeoSeries Practice","e13ea94b":"# Joining on existing geometries\n\nSometimes the necessary geospatial data is elsewhere entirely.\n\nSuppose now that we have information on obesity by state.","eaad53af":"# KDEPlot","c42c7c19":"Depending on the dataset, crs may be set to either epsg:<INT> or to a raw proj4 projection dictionary. The bottom line is, after reading in a dataset, always verify that the dataset coordinate reference system is set to what its documentation it should be set to.\n\nIf you determine that your coordinates are not latitude-longitude, usually the first thing you want to do is covert to it. to_crs does this:","6fb6e30d":"This plot shows cities in the continental United States with greater than 10,000 population. It has only one visual variable, position. By examining the distribution of the points, we see that the part of the United States around the Rocky Mountains is more sparely populated than the coasts.\n","3c7e2fd4":"You can perform arbitrarily complex geometric transformations on your shape. However, most common operations are provided in optimized form as part of the geopandas API. Here\u2019s a faster way to create convex hulls, for example:","23b6e4e2":"From there we pass this iterable of geometries to the geometry property of GeoDataFrame initializer","662f90bf":"Most operations that will work on a pandas DataFrame will work on a GeoDataFrame, but the latter adds a few additional methods and features for dealing with geometry not present in the former. The most obvious of these is the addition of a column for storing geometries, accessible using the geometry attribute:","88d7e25e":"Text(0.5, 1.0, 'Cities in the Continental United States by Elevation')","5055bf5d":"# Customizing the Plot\n\nGeoplot have a large number of styling parameter, both cosmetic(for example, the color of map borders) and informative (for example, th echoice of color map) ","d8a58672":"If you have polygonal data instead, you can plot that using a geoplot polyplot.","c3cc4a5c":"This data is stored in the Long Island State Plane coordinate reference system (EPSG 2263). Unfortunately the CRS on read is set incorrectly to epsg:4326 and we have to set it to the correct coordinate reference system ourselves.","8ae1b292":"The starting point for geospatial analysis is geospatial data. The standard way of dealing with such data in Python using \n# geopandas\n\u2014a geospatial data parsing library over the well-known pandas library.\n"}}