{"cell_type":{"7955c33e":"code","6f79523e":"code","a5ef783b":"code","4b9028d4":"code","98a93073":"code","68e27955":"code","61547ca6":"code","215c1ba6":"code","f94d4320":"code","0f260d9c":"code","353cf6b3":"code","7e4c0d4f":"markdown","8ec2d83d":"markdown"},"source":{"7955c33e":"!wget https:\/\/raw.githubusercontent.com\/IRS-MR\/S-MR-Workshop\/master\/S-MR-Workshop3\/knowledge-discovery-identify-aliens\/alien_train.csv","6f79523e":"!wget https:\/\/raw.githubusercontent.com\/IRS-MR\/S-MR-Workshop\/master\/S-MR-Workshop3\/knowledge-discovery-identify-aliens\/alien_test.csv","a5ef783b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/working'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b9028d4":"df1 = pd.read_csv('\/kaggle\/working\/alien_train.csv')\ndf2 = pd.read_csv('\/kaggle\/working\/alien_test.csv')","98a93073":"df = df1.append(df2, ignore_index=True)","68e27955":"df","61547ca6":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\ndf['Alien'] = lb_make.fit_transform(df['Alien'])\n\ndf.head()","215c1ba6":"for column in df.columns:\n    df[column] = df[column].astype('int64')","f94d4320":"df.to_csv('balanced_data.csv', index=False)","0f260d9c":"df.info()","353cf6b3":"import numpy as np \nimport pandas as pd \nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report \n  \ndef importdata(): \n    balance_data = pd.read_csv( \n'\/kaggle\/working\/balanced_data.csv', \n    sep= ',', header = None) \n      \n    print (\"Dataset Length: \", len(balance_data)) \n    print (\"Dataset Shape: \", balance_data.shape) \n      \n    print (\"Dataset: \",balance_data) \n    return balance_data \n   \ndef splitdataset(balance_data): \n  \n    X = balance_data.values[1:, 1:5] \n    Y = balance_data.values[1:, 5] \n  \n    X_train, X_test, y_train, y_test = train_test_split(  \n    X, Y, test_size = 0.2, random_state = 100) \n      \n    return X, Y, X_train, X_test, y_train, y_test \n      \ndef train_using_gini(X_train, X_test, y_train): \n  \n    clf_gini = DecisionTreeClassifier(criterion = \"gini\", \n            random_state = 100,max_depth=3, min_samples_leaf=5) \n  \n    clf_gini.fit(X_train, y_train) \n    return clf_gini \n      \ndef tarin_using_entropy(X_train, X_test, y_train): \n  \n    clf_entropy = DecisionTreeClassifier( \n            criterion = \"entropy\", random_state = 100, \n            max_depth = 3, min_samples_leaf = 5) \n  \n    clf_entropy.fit(X_train, y_train) \n    return clf_entropy \n  \ndef prediction(X_test, clf_object): \n  \n    y_pred = clf_object.predict(X_test) \n    print(\"Predicted values:\") \n    print(y_pred) \n    return y_pred \n      \ndef cal_accuracy(y_test, y_pred): \n      \n    print(\"Confusion Matrix: \", \n        confusion_matrix(y_test, y_pred)) \n      \n    print (\"Accuracy : \", \n    accuracy_score(y_test,y_pred)*100) \n      \n    print(\"Report : \", \n    classification_report(y_test, y_pred)) \n    \ndef main(): \n      \n    data = importdata() \n    X, Y, X_train, X_test, y_train, y_test = splitdataset(data) \n    clf_gini = train_using_gini(X_train, X_test, y_train) \n    clf_entropy = tarin_using_entropy(X_train, X_test, y_train) \n      \n    print(\"Results Using Gini Index:\") \n      \n    y_pred_gini = prediction(X_test, clf_gini) \n    cal_accuracy(y_test, y_pred_gini) \n      \n    print(\"Results Using Entropy:\") \n    y_pred_entropy = prediction(X_test, clf_entropy) \n    cal_accuracy(y_test, y_pred_entropy) \n      \nif __name__==\"__main__\": \n    main() ","7e4c0d4f":"# Simple Alien Detection with Decision Tree\nA session workshop with National University Singapore","8ec2d83d":"# Conclusion \n\nover time would try to improve it\n\nplease upvote if you think this was useful. Thank you."}}