{"cell_type":{"43bde81f":"code","3460542f":"code","9a28ffee":"code","79e1c073":"code","280c0f1d":"code","188af64b":"code","f4aba884":"code","90272857":"code","36e32836":"code","8a0d4f8e":"code","15a3da3d":"code","8973f20d":"code","feb12ab7":"code","8e6c6cbf":"code","c214c320":"code","c36ab6c1":"code","a1eab515":"code","72c2392d":"code","f7262199":"code","94d940b0":"code","b0be7424":"code","d032026a":"code","71d3eb73":"code","4351b012":"code","9a36251a":"code","5286fb4b":"code","1e5cfeef":"code","3daf4dc8":"code","67ccefa2":"code","d94cd6b4":"code","ea72d34b":"code","c224b053":"code","1cc5c2bc":"code","064e8335":"code","49431a2c":"code","f7a51862":"code","8897f320":"code","1cee656f":"code","d108e4ce":"code","83009d8f":"code","0fb9d0b3":"code","cd1898f0":"code","2e621c91":"code","792b2544":"code","0a9164e0":"code","799c383e":"code","5d9496d1":"code","ae4cb3d3":"code","f3b4cc24":"code","749c1f8d":"code","79b26176":"code","e6b1613c":"code","14bf87a3":"code","4fad51cf":"code","63dcb0c1":"code","a03a2581":"code","7c5bdfa4":"code","56433382":"code","757ac230":"code","5f49c88c":"code","49df1338":"code","ba597b70":"code","ed1854a4":"code","af1de9a8":"code","bcb42911":"code","6a8b8e18":"code","ddd0713f":"code","8b7d91cb":"code","dd8fc8b7":"code","eae26bbf":"markdown","d5575688":"markdown","3b410ff7":"markdown","6d72a224":"markdown","191e0ed5":"markdown","918178b7":"markdown","84055c1f":"markdown","dad8c345":"markdown","999bbad2":"markdown","1bcf2fef":"markdown","5662efa0":"markdown","bda321c5":"markdown","4fd3f93d":"markdown","b14536b1":"markdown","3a391012":"markdown","5ee54c00":"markdown","68e7546d":"markdown"},"source":{"43bde81f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3460542f":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport scipy\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import RidgeCV, Ridge\nfrom sklearn.linear_model import LassoCV\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import VotingRegressor\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder\n\n\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV","9a28ffee":"train_df = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\ncombine = [train_df, test_df]","79e1c073":"train_df.shape, test_df.shape","280c0f1d":"train_df.describe()","188af64b":"#features that in most samples  have only one value\n\nfeatures_one_value_cat = ['Street', 'LandContour', 'Utilities', 'LandSlope', 'Condition2', 'RoofMatl', \n                      'BsmtCond', 'BsmtFinType2', 'Heating', 'Functional', 'GarageQual', 'GarageCond',\n                     'PavedDrive', 'MiscFeature']\n\n#ordinal features\n\nord_features = ['ExterQual', 'HeatingQC', 'ExterCond', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1', 'KitchenQual', 'FireplaceQu', 'PoolQC']","f4aba884":"#features that in most samples  have only one value\n\nfeatures_one_value_num = ['BsmtFinSF2', 'LowQualFinSF', 'KitchenAbvGr',  'PoolArea', 'MiscVal']\n","90272857":"highly_corr_features = ['1stFlrSF', 'GarageYrBlt', 'TotRmsAbvGrd', 'GarageCars']","36e32836":"missed_val_features = ['Alley', 'FireplaceQu', 'PoolQC', 'Fence']\nuseless_features = ['MoSold', 'YrSold']","8a0d4f8e":"features_for_removing = highly_corr_features + missed_val_features + useless_features + features_one_value_cat + features_one_value_num\n","15a3da3d":"for dataset in combine:\n    dataset.drop(columns=features_for_removing, inplace=True)","8973f20d":"train_df.head()","feb12ab7":"outliars_features = ['BsmtFinSF1', 'LotArea', 'LotFrontage', 'TotalBsmtSF', 'GrLivArea', 'EnclosedPorch']","8e6c6cbf":"train_df = train_df.drop(train_df[train_df['BsmtFinSF1'] > 4000].index)\ntrain_df = train_df.drop(train_df[train_df['LotArea'] > 100000].index)\ntrain_df = train_df.drop(train_df[train_df['LotFrontage'] > 200].index)\ntrain_df = train_df.drop(train_df[train_df['TotalBsmtSF'] > 5000].index)\ntrain_df = train_df.drop(train_df[train_df['GrLivArea'] > 4000].index)\ntrain_df = train_df.drop(train_df[train_df['EnclosedPorch'] > 400].index)\n","c214c320":"train_df.isnull().sum().sort_values(ascending=False).head(10)","c36ab6c1":"test_df.isnull().sum().sort_values(ascending=False).head(20)","a1eab515":"filling_NA = ['BsmtExposure', 'BsmtQual', 'BsmtFinType1', 'GarageFinish', 'GarageType', 'KitchenQual']\ntrain_df.loc[:, filling_NA] = train_df[filling_NA].fillna('NA')     \ntest_df.loc[:, filling_NA] = test_df[filling_NA].fillna('NA')   \n","72c2392d":"train_df['MasVnrType'].fillna('None', inplace=True)\ntest_df['MasVnrType'].fillna('None', inplace=True)","f7262199":"train_df['Electrical'] = train_df['Electrical'].fillna(train_df['Electrical'].mode()[0])\n\nfilling_mode = ['MSZoning', 'Exterior1st', 'Exterior2nd']\ntest_df.loc[:, filling_mode] = test_df[filling_mode].apply(lambda x: x.fillna(x.mode()[0]))","94d940b0":"filling_zero = ['BsmtFullBath', 'GarageArea', 'BsmtFinSF1', 'BsmtUnfSF', 'TotalBsmtSF']\ntest_df.loc[:, filling_zero] = test_df[filling_zero].apply(lambda x: x.fillna(x.mode()[0]))","b0be7424":"test_df['SaleType'] = test_df['SaleType'].fillna('Oth')","d032026a":"train_df['MasVnrArea'] = train_df.groupby('MasVnrType')['MasVnrArea'].transform(lambda x: x.fillna(x.mean()))\ntest_df['MasVnrArea'] = test_df.groupby('MasVnrType')['MasVnrArea'].transform(lambda x: x.fillna(x.mean()))\n\ntrain_df['LotFrontage'] = train_df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.mean()))\ntest_df['LotFrontage'] = test_df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.mean()))","71d3eb73":"dict_1 = {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0}\ndict_2 = {'Gd': 3, 'Av': 2, 'Mn': 1, 'No': 0, 'NA': 0}\ndict_3 = {'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf': 1, 'NA': 0}\ndict_4 = {'Reg': 3, 'IR1': 2, 'IR2': 1, 'IR3': 0}\ndict_5 = {'Fin': 3, 'RFn': 2, 'Unf': 1, 'NA': 0}\ndict_6 = {'Y': 1, 'N': 0}","4351b012":"train_df['ExterQual'] = train_df['ExterQual'].map(dict_1)\ntrain_df['HeatingQC'] = train_df['HeatingQC'].map(dict_1)\ntrain_df['ExterCond'] = train_df['ExterCond'].map(dict_1)\ntrain_df['BsmtQual'] = train_df['BsmtQual'].map(dict_1)\ntrain_df['KitchenQual'] = train_df['KitchenQual'].map(dict_1)\ntrain_df['BsmtExposure'] = train_df['BsmtExposure'].map(dict_2)\ntrain_df['BsmtFinType1'] = train_df['BsmtFinType1'].map(dict_3)\ntrain_df['LotShape'] = train_df['LotShape'].map(dict_4)\ntrain_df['GarageFinish'] = train_df['GarageFinish'].map(dict_5)\ntrain_df['CentralAir'] = train_df['CentralAir'].map(dict_6)\n    ","9a36251a":"test_df['ExterQual'] = test_df['ExterQual'].map(dict_1)\ntest_df['HeatingQC'] = test_df['HeatingQC'].map(dict_1)\ntest_df['ExterCond'] = test_df['ExterCond'].map(dict_1)\ntest_df['BsmtQual'] = test_df['BsmtQual'].map(dict_1)\ntest_df['KitchenQual'] = test_df['KitchenQual'].map(dict_1)\ntest_df['BsmtExposure'] = test_df['BsmtExposure'].map(dict_2)\ntest_df['BsmtFinType1'] = test_df['BsmtFinType1'].map(dict_3)\ntest_df['LotShape'] = test_df['LotShape'].map(dict_4)\ntest_df['GarageFinish'] = test_df['GarageFinish'].map(dict_5)\ntest_df['CentralAir'] = test_df['CentralAir'].map(dict_6)","5286fb4b":"categorical_train = train_df.select_dtypes(include='object').columns\ncategorical_test = test_df.select_dtypes(include='object').columns","1e5cfeef":"def code_mean(dataset, cat_feature):\n    return (dataset[cat_feature].map(train_df.groupby(cat_feature)['SalePrice'].mean()))","3daf4dc8":"for col in  categorical_test:\n    test_df[col] = code_mean(test_df, col)\n","67ccefa2":"for col in  categorical_train:\n    train_df[col] = code_mean(train_df, col)","d94cd6b4":"print(train_df.columns)","ea72d34b":"train_df['PorchArea'] = train_df['OpenPorchSF'] + train_df['EnclosedPorch'] + train_df['3SsnPorch'] + train_df['ScreenPorch'] + train_df['WoodDeckSF']","c224b053":"test_df['PorchArea'] = test_df['OpenPorchSF'] + test_df['EnclosedPorch'] + test_df['3SsnPorch'] + test_df['ScreenPorch'] + train_df['WoodDeckSF']","1cc5c2bc":"train_df.drop(columns=['OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'WoodDeckSF'], inplace=True)\ntest_df.drop(columns=['OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'WoodDeckSF'], inplace=True)","064e8335":"train_df['NumBath'] = train_df['BsmtFullBath'] + 0.5*train_df['BsmtHalfBath'] + train_df['FullBath'] + 0.5*train_df['HalfBath']\ntest_df['NumBath'] = test_df['BsmtFullBath'] + 0.5*test_df['BsmtHalfBath'] + test_df['FullBath'] + 0.5*test_df['HalfBath']","49431a2c":"train_df.drop(columns=['BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath'], inplace=True)\ntest_df.drop(columns=['BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath'], inplace=True)","f7a51862":"train_df['YearRemodAdd'].loc[train_df[train_df['YearRemodAdd'] != train_df['YearBuilt']]['YearRemodAdd'].index.values.tolist()] = 1\ntrain_df['YearRemodAdd'].loc[train_df[train_df['YearRemodAdd'] == train_df['YearBuilt']]['YearRemodAdd'].index.values.tolist()] = 0","8897f320":"test_df['YearRemodAdd'].loc[test_df[test_df['YearRemodAdd'] != test_df['YearBuilt']]['YearRemodAdd'].index.values.tolist()] = 1\ntest_df['YearRemodAdd'].loc[test_df[test_df['YearRemodAdd'] == test_df['YearBuilt']]['YearRemodAdd'].index.values.tolist()] = 0","1cee656f":"train_df['2ndFlrSF'].loc[train_df[train_df['2ndFlrSF'] != 0]['2ndFlrSF'].index.values.tolist()] = 1\n","d108e4ce":"train_df.rename(columns={'2ndFlrSF': 'Is2ndFlr'}, inplace=True)","83009d8f":"test_df['2ndFlrSF'].loc[test_df[test_df['2ndFlrSF'] != 0]['2ndFlrSF'].index.values.tolist()] = 1\ntest_df.rename(columns={'2ndFlrSF': 'Is2ndFlr'}, inplace=True)\n","0fb9d0b3":"train_df.columns","cd1898f0":"sns.scatterplot(data=train_df, x='Fireplaces', y=\"SalePrice\");","2e621c91":"train_df['Fireplaces'].loc[train_df[train_df['Fireplaces'] != 0]['Fireplaces'].index.values.tolist()] = 1\ntest_df['Fireplaces'].loc[test_df[test_df['Fireplaces'] != 0]['Fireplaces'].index.values.tolist()] = 1","792b2544":"test_df['NumBath'] = test_df['NumBath'].fillna(0)","0a9164e0":"plt.figure(figsize=(10, 10))\nsns.heatmap(train_df.corr());","799c383e":"train_df.columns","5d9496d1":"train_df[['Exterior1st', 'Exterior2nd']].corr() ","ae4cb3d3":"train_df[['SaleCondition', 'SaleType']].corr() ","f3b4cc24":"train_df.drop(columns=['SaleType', 'Exterior2nd', 'SaleCondition', 'Exterior1st'], inplace=True)\ntest_df.drop(columns=['SaleType', 'Exterior2nd', 'SaleCondition', 'Exterior1st'], inplace=True)","749c1f8d":"train_df[['BsmtQual', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'TotalBsmtSF']].head()","79b26176":"train_df['BsmtQualandExposure'] = train_df['BsmtQual'] + train_df['BsmtExposure']\ntest_df['BsmtQualandExposure'] = test_df['BsmtQual'] + test_df['BsmtExposure']\n\ntrain_df.drop(columns=['BsmtQual', 'BsmtExposure'], inplace=True)\ntest_df.drop(columns=['BsmtQual', 'BsmtExposure'], inplace=True)","e6b1613c":"train_df[['GarageType', 'GarageFinish', 'GarageArea']].head()","14bf87a3":"train_df['Garage'] = train_df['GarageType'] \/ train_df['GarageArea'] * train_df['GarageFinish']\ntest_df['Garage'] = test_df['GarageType'] \/ test_df['GarageArea'] * test_df['GarageFinish']\n\ntrain_df.drop(columns=['GarageType', 'GarageArea', 'GarageFinish'], inplace=True)\ntest_df.drop(columns=['GarageType', 'GarageArea', 'GarageFinish'], inplace=True)","4fad51cf":"train_df[['LotFrontage', 'LotArea', 'LotShape', 'LotConfig']].head()","63dcb0c1":"train_df.drop(columns=['LotShape', 'LotConfig'], inplace=True)\ntest_df.drop(columns=['LotShape', 'LotConfig'], inplace=True)","a03a2581":"sns.scatterplot(x=np.log(train_df['HouseStyle'] + train_df['BldgType'] + train_df['RoofStyle'] + train_df['Foundation'] + train_df['Electrical'] + train_df['Condition1']) , y=train_df['SalePrice']);","7c5bdfa4":"train_df['BldChar'] = np.log(train_df['HouseStyle'] + train_df['BldgType'] + train_df['RoofStyle'] + train_df['Foundation'] + train_df['Electrical'] + train_df['Condition1'])\ntest_df['BldChar'] = np.log(test_df['HouseStyle'] + test_df['BldgType'] + test_df['RoofStyle'] + test_df['Foundation'] + test_df['Electrical'] + test_df['Condition1'])\n\ntrain_df.drop(columns=['HouseStyle', 'BldgType', 'RoofStyle', 'Foundation', 'Electrical'], inplace=True)\ntest_df.drop(columns=['HouseStyle', 'BldgType', 'RoofStyle', 'Foundation', 'Electrical'], inplace=True)","56433382":"train_df.columns\n","757ac230":"test_df[['BldChar', 'BsmtQualandExposure', 'Garage']]","5f49c88c":"train_df['Garage'] = train_df['Garage'].fillna(0)\ntest_df['Garage'] = test_df['Garage'].fillna(0)","49df1338":"test_df[:] = np.nan_to_num(test_df)","ba597b70":"test_df.info()","ed1854a4":"X = train_df.drop(columns=['Id', 'SalePrice'])\ny = train_df['SalePrice']\nX_test = test_df.drop(columns=['Id'])\n","af1de9a8":"X.shape, y.shape","bcb42911":"X_train, X_val, y_train, y_val = train_test_split(X, y, random_state=42)","6a8b8e18":"rf = RandomForestRegressor(max_depth=20, max_features=12, min_samples_leaf=2,\n                      n_estimators=644, n_jobs=-1, random_state=1)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_val)\n\nmean_squared_error(y_val, y_pred, squared=False)","ddd0713f":"model = RandomForestRegressor(max_depth=20, max_features=12, min_samples_leaf=2,\n                      n_estimators=644, n_jobs=-1, random_state=1)\nmodel.fit(X, y)\npredict = model.predict(X_test)","8b7d91cb":"test_df.Id = test_df.Id.astype(int)","dd8fc8b7":"output = pd.DataFrame({'Id': test_df.Id, 'SalePrice': predict})\noutput.to_csv('house_price_random_forest.csv', index=False)","eae26bbf":"Other categorical variables are replaced by the mean value of the SalePrice for a separate category.","d5575688":"# **Removing of redundant features**","3b410ff7":"Linear regression","6d72a224":"I create new feature '**NumBath**' (number of bathrooms) based on all features describe bathrooms( '**BsmtFullBath**', '**BsmtHalfBath**', '**FullBath**', '**HalfBath**').\n\nAlso I multiply '**BsmtHalfBath**' and '**HalfBath**' on 0.5 because they are not full bathrooms.","191e0ed5":"I try to group features and in each group reduce the number of features by creating a new one based on them(if possible).","918178b7":"# **Feature engineering**","84055c1f":"# **Model**","dad8c345":"If **'YearRemodAdd'** equal **'YearBuilt'** remodeling or additions was not performed,in this case we assign **0** this column. \n\nIf If **'YearRemodAdd'** not equal **'YearBuilt'**, we asign **1** for  **'YearRemodAdd'**(emodeling or additions was performed)","999bbad2":" Also we change all values of **'Fireplaces'** that are more than 0 on 1","1bcf2fef":"Highly correlated features after feature engineering:\n\n* 'SaleCondition', 'SaleType'\n* 'Exterior1st', 'Exterior2nd'","5662efa0":"# **Dealing with outliars**","bda321c5":"# **Categorical Features Encoding**","4fd3f93d":"In case with basement we can combine **'BsmtQual'** and **'BsmtExposure'**","b14536b1":"Let combine all features with porch and creat new one '**PorchArea**'. ","3a391012":"Since most values of **'2ndFlrSF'** are 0,  then we create new feature **'Is2ndFlr'**(it shows whether 2nd floor exists).","5ee54c00":"# **Filling missing values**","68e7546d":"Ordinal variables are replaced by numbers."}}