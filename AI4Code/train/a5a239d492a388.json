{"cell_type":{"95808fc3":"code","061053b5":"code","9aee42d6":"code","f0930f75":"code","7e7d1197":"code","0febc6c1":"code","7b787b0e":"code","7f3602f5":"code","61d1c4ba":"code","dbdd1f31":"code","d46842a8":"code","eb2dc3f5":"code","adb3fb7c":"code","d40e235d":"code","86f0628d":"code","6daea4d6":"code","92f4666c":"code","488b9168":"code","a866beb8":"code","5e365953":"code","ac1f50fb":"code","cd915469":"code","950b034c":"code","4571e71c":"code","36000a1e":"code","625cd465":"code","32a60935":"markdown","5edf5358":"markdown","7b0259c8":"markdown","efac6c55":"markdown","c84d87c4":"markdown","0f23796d":"markdown","211983a3":"markdown","75b06063":"markdown","57c7b0d3":"markdown","5ce687a0":"markdown","a94ea908":"markdown","17b282be":"markdown","d8799855":"markdown","4146e6c3":"markdown","c661dfb9":"markdown","2e7263c0":"markdown","73a29287":"markdown","6d8f9af2":"markdown","b6cbefa8":"markdown","e5fc48ff":"markdown","39188f99":"markdown","772d032d":"markdown"},"source":{"95808fc3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nplt.rcParams['figure.figsize'] = 8, 5\nplt.style.use(\"fivethirtyeight\")\npd.options.plotting.backend = \"plotly\"\n\ndata = pd.read_csv('..\/input\/kepler-labelled-time-series-data\/exoTrain.csv')\ntrain_data = pd.read_csv('..\/input\/kepler-labelled-time-series-data\/exoTrain.csv')\ntest_data = pd.read_csv('..\/input\/kepler-labelled-time-series-data\/exoTest.csv')","061053b5":"data.describe()","9aee42d6":"# sns.heatmap(data.corr())\n# plt.title('Correlation in the data')\n# plt.show()","f0930f75":"fig = data.isnull().sum().reset_index().plot(kind='bar', x='index', y=0)\nfig.update_layout(title=\"Checking for Missing Values\", xaxis_title=\"Variable\", yaxis_title=\"Missing Value Count\")\nfig.show()","7e7d1197":"# checking for duplicate values\n\ndata = data.drop_duplicates()","0febc6c1":"sns.boxplot(data=data, x='LABEL', y='FLUX.1')\nplt.title('Distribution of FLUX.1')\nplt.show()","7b787b0e":"print('Dropping Outliers')\ndata.drop(data[data['FLUX.1']>250000].index, axis=0, inplace=True)","7f3602f5":"sns.FacetGrid(data, hue=\"LABEL\", height=6,).map(sns.kdeplot, \"FLUX.1\",shade=True).add_legend()\nplt.title('KDE Plot for FLUX.1')\nplt.show()","61d1c4ba":"data['LABEL'].value_counts().reset_index().plot(kind='bar', x='index', y='LABEL', color='LABEL')","dbdd1f31":"sns.scatterplot(data=data, x='FLUX.1', y='FLUX.4', hue='LABEL', palette=['g','r'])\nplt.title('Relation of FLUX1 and FLUX4')\nplt.show()","d46842a8":"fig = px.scatter_matrix(data[['FLUX.1','FLUX.2','FLUX.3','FLUX.4','FLUX.5']])\nfig.update_layout(title=\"Scatter Matrix for first 5 light intensities\")\nfig.show()","eb2dc3f5":"print('Pairplot for first 5 intensities')\nsns.pairplot(data=data[['LABEL','FLUX.1','FLUX.2','FLUX.3','FLUX.4','FLUX.5']], hue='LABEL')\nplt.show()","adb3fb7c":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(data, test_size = 0.3)\n\ntrain_X = train.drop('LABEL', axis=1)\ntrain_y = train['LABEL']\ntest_X = test.drop('LABEL', axis=1)\ntest_y = test['LABEL']","d40e235d":"from sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import roc_curve,accuracy_score,plot_confusion_matrix","86f0628d":"model = LogisticRegression(class_weight={1:100, 2:1})\nmodel.fit(train_X,train_y)\nprediction=model.predict(test_X)\nprint('The accuracy of the Logistic Regression is', accuracy_score(prediction,test_y))","6daea4d6":"plot_confusion_matrix(model, test_X, test_y)\nplt.title('LR Confusion Matrix')\nplt.show()","92f4666c":"model = SVC(C=0.1, kernel='poly')\nmodel.fit(train_X,train_y)\nprediction = model.predict(test_X)\nprint('The accuracy of the SVC is', accuracy_score(prediction,test_y))","488b9168":"plot_confusion_matrix(model, test_X, test_y)\nplt.title('SVC Confusion Matrix')\nplt.show()","a866beb8":"model = DecisionTreeClassifier(max_depth=5, random_state=13)\nmodel.fit(train_X,train_y)\nprediction = model.predict(test_X)\nprint('The accuracy of the Decision Tree is', accuracy_score(prediction,test_y))","5e365953":"plot_confusion_matrix(model, test_X, test_y)\nplt.title('Decision Tree Confusion Matrix')\nplt.show()","ac1f50fb":"model = DecisionTreeClassifier(max_depth=5, random_state=13)\nmodel.fit(train_X, train_y)\ny_pred_prob = model.predict_proba(test_X)[:,1]\nfpr, tpr, thresholds = roc_curve(test_y, y_pred_prob, pos_label=2)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='DT')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Decision Tree ROC Curve')\nplt.show()","cd915469":"from imblearn.over_sampling import SMOTE\nmodel = SMOTE()\nov_train_x,ov_train_y = model.fit_sample(data.drop('LABEL',axis=1), data['LABEL'])\nov_train_y = ov_train_y.astype('int')","950b034c":"ov_train_y.value_counts().reset_index().plot(kind='bar', x='index', y='LABEL')","4571e71c":"train_X, test_X, train_y, test_y = train_test_split(ov_train_x, ov_train_y, test_size=0.33, random_state=42)\n\nmodel = DecisionTreeClassifier(max_depth=5, random_state=13)\nmodel.fit(train_X,train_y)\nprediction = model.predict(test_X)\nprint('The accuracy of the Decision Tree is', accuracy_score(prediction,test_y))","36000a1e":"plot_confusion_matrix(model, test_X, test_y)\nplt.title('Decision Tree Confusion Matrix')\nplt.show()","625cd465":"model = DecisionTreeClassifier(max_depth=5, random_state=13)\nmodel.fit(train_X, train_y)\ny_pred_prob = model.predict_proba(test_X)[:,1]\nfpr, tpr, thresholds = roc_curve(test_y, y_pred_prob, pos_label=2)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='DT')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Decision Tree ROC Curve')\nplt.show()","32a60935":"# Description of data","5edf5358":"I tried adding a NN but it wasn't giving satisfactory result whatsoever. So I am not adding them in the kernel.\n\nI will end the classification with DT then.","7b0259c8":"# Visualizing new target variable","efac6c55":"# Logistic Regression","c84d87c4":"There is no missing or duplicate data present within the data. This is a plus point in forming a prediction model.","0f23796d":"Decision trees seems to be providing a better result compare to logistic Regression or SVC.\n\nNow let's check the ROC curve to see if it really worked","211983a3":"# Applying Synthetic Minority Oversampling Technique","75b06063":"# Treating outliers","57c7b0d3":"# Treating missing and duplicate values","5ce687a0":"The ROC curve and the roc_auc score also confirms that the model is perform much better than before.","a94ea908":"# Relation between variables","17b282be":"<img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBwgHBgkIBwgKCgkLDRYPDQwMDRsUFRAWIB0iIiAdHx8kKDQsJCYxJx8fLT0tMTU3Ojo6Iys\/RD84QzQ5OjcBCgoKDQwNGg8PGjclHyU3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3N\/\/AABEIAIIAyQMBIgACEQEDEQH\/xAAcAAACAwEBAQEAAAAAAAAAAAACAwABBAUGBwj\/xAA4EAACAQMCBAQEBAYABwAAAAABAhEAAyESMQRBUWEFEyJxBjKBkQdSofAUI0Kx0eEVU2NyksHx\/8QAGAEBAQEBAQAAAAAAAAAAAAAAAAECAwT\/xAAhEQEBAAIDAAEFAQAAAAAAAAAAAQIRAxIhMQQiMkFhFP\/aAAwDAQACEQMRAD8A+LIASsxTSCQQF1GeVJUnHboK1NcCWtOsTEADBz1rLTNpWQXJAP6YpREwK0XgNaszK+fVBwaUy6SpJGRODt796qBTSMMN+fSrYqzYUEZ2xTGt+W7pdVg0RExpPegtIhI1tp23EiqgbaliYGwM7Uat5RJAJOVYFdqtLTmCNQjbH9jR3mVWKwC3Nhz96oS6QQsFSBmTRJsLhBa2uAe\/SrLFkZSno1Az0NApXS20xu3vyqCl1BhGDVoFJOqQInHWjVhrkqSpkATFUDKwNp6bUARJzTSgAlGmc7bVaW9oz3rQYeWIhmOABWLW5GF5JJPOrE6PTEDBPPNPe1p9R5biKQ59Z6bVqes0BOAOlWpBGkwATvG1W4BbSJ+tDpjPKiCtj1YAbBwRVOIMBgYO\/Wr0EAmDimXkaw5tvk7zpIkciJopLZNEF5GjDagq4IA596aAWaFXH9qWgUsSgbBE7Vd1lYaUwJJA6fvvT2tEWdxA5CsoQnJwKztrSwgJcsPbMZofNH\/Ktf8AjV3R\/XuTz5UGf2K0zYNGnKwpAo+I1gAa5VYmD2pYZCTpWAaskgQpwdx1qKAuWxgwANuVTPPMCBTBagBiQSeVNNst5axpnA1Y59abNB0rDsVBM7asAnnHMVYUxrDCe\/KOQ+\/60FxQGAn7Vel1UyYXkD0ps0YdVyyRaQt5Y1MVBOkdfagaVSLjqVUFkAacmP1OKJ0KKrnWFJgqwKz\/AJ\/yazXY1kqCqk4zWksMCuLb6YIQ5g7946Y3pQImSPoaOfNEMyqFXnipxRm4JtlGC+uTueZ7e1EOtIHuXHso7W0ONQyATAJj3FAXdwoaCEEAgdsAn6UtCNEHImSOlPk5ZpJ5z7VmtQ20r6CdJIjIjPWftRFwlsgCNUbmSKoXvQOW8lTvIpYcFoAInlM1hunrctNw4tsIadwOXSsL6JJVSBuO1NbSCdTGetACrvpZ1UTGqCT74rUjFpSt653H96hMqQY3qatO4kUVq35hhRkmAK0yGSyjsI\/f3ovnIN0sdhkyYr7B8FfhXZ4rg043xst\/MytoYxyJr0Pin4U+C37J\/gg1m8PlJaRNdOn99Z7fx8EtWo8xmW4lrTKkpM9ATy96YlyyLK\/MXmGkQO31r3\/xbwfhXhfgx4J7HlcehhhtP+q+aEjVgR3rhjbluWaenk45hrV3t0CdaHSAANs86y3l0XAFOqNjQecwgA7UOo7\/AHqyOe1s2Oc86DXRtbm3rBHtzpMGqjQjKogrNQiCKWtPtCWAqVYJELCdWkR0ma0WLSLbuNxBa2Y1Ww6mHgxANZjcAUINhvncz\/8AKhv3GW3b1E6Z0gtMZ5UD9KMr+W6qFEsGYCc\/08z9Kz3GB9IYac7naqZ2GCVyAeRoxxJUMCFYMoGQDpWZiroVdvXLmhL1wtbtzoWTAncjpO5oOIKtcYqumTOmIj6URVQGKkBeWrcilkFs70ZoS3pg5gYqXLcM3qDwcFTvV6DvU8snaa1ETVjRy9omm3VKNpzI3n9Kq2g9OsHSvKiVVLaSHAAls8t8VKoCwCyQT0ilajyNN8o6wHcKsA6onMA475oX0ayLYgbjUZNTRaEF5JBOcTUbQIZCcjIOYq7jMQuWwMTQiNMQdZI9orSKjnXY+FUtP47wQvx5ZuCQfeuNzMg4p3Du1u8ty2GlPV6dx\/imPl2X4fruwQLKBflgUwNXy74K\/Ezgb\/A2+G8VfReQRrJwa9B4t+IfgfAcM9y3xK3Wj0qDXa421jtqPA\/jsLK+JcKyEeaUhq+UrGdU+45V3fiz4hvfEPir8XdJ0nCjpXBY+9Yzst8ax+F8yN6PSTlQdMwJpaiTuB3NHaOlpMZxWFQvClQd9xUx+yapzmOX96qV\/L+tBdsg4Jimq8CF3pAq2JgGRnpFSxdjYNLTy3qNcDSQAu2KEEqykidjB2NE8XHdoVcyqgY9hTQjrpUPqXJjTOR9KtrupVQIihSTKiCZ6nnQhXM+kmRvG1WqGRQNsgkglQwG4NOt2p5VdiwS+mc11eC4M3bqpbUsScVdIwDhvSOp3EbUS8NG8iMyBX0\/wT8M\/EvELIv8RFhWEjVv9q0+KfhZ4hw1gtwzpejJUbmtdKz3j5TdQ+UVVRBzO5FZdJLkKNJIAALV6Lj\/AA+7wl65a4m2VdcEEc65XFhSxUfL151zvjc9c2+lpNHl3jdDIpaU06W5rvmOtLQWszlp9PSiuDS8n9aXLLbaJCt2qhwtyieYxAneZge1LdFk6m75EEjtTrNxjZuBlLCV9X5Z61nuRLGBk47VUA9zWR6FGThRFEqFgx1BSBMExP7im8ObZVrV1AdZB8wAlrfWKHio1krb0I2UxGOv1igSQyxO8TUVmLSCSRneiVMEmIFWtvdoJTrnJoFx6Z1CZ2qpxBFX\/VMYnblV+W3lhyvpJgHuKAhqKD8oMDPM1QWTpC+rPOhAMY50YRokLIUSStADCDGaqDUcyaGgYw2gGDtTuH4K7fYBUOa3eG+Gm767mF71124vhuCTTYUFuprpx8VzreOFrNwfw8xE3oHODXQt+FcBa+dxPTauTxHil26csR7VlPGN1r24fTcc\/KuuscY9OnB+GQRq371f\/CvD7uEeOxANeV\/jLhwCfpTrN+6SP5rAe9dP8\/BU3K9Ifh4AarBB\/wC2vb\/hh4Bw58Ta\/wAYFby8qrDnXhPDOM0RLu\/1r2fgHjv8K0lX09a4Z\/SzG7wrOWO4+329IX07UTQRBFeU8C+ILd9F9YYHryr09txcGpSIrx2WX1i4afM\/xc8Csjhl8RsoqvIW5A3718av2dU5Ga+8\/itxtq14KbGpdTtgE9BXwLjbpUmMTU5J8MYftzLoXX6m0DnGYpAUMpbUAB1UmPrTb1wOzF\/ywO+MUi6dIgghjyPMVmNUTK9p9BkGZBBieYNCE1XYbCnOB\/btURWdGbSSFyT+Wits2AssSQI69qUkVp0gicnaNj+8U4Wxde2qxbhdiSxJ6D\/FLvpp0+oNIyI+XJwaF7zsxfVDEzKjTn6U2UYPlErcUCFjGCcUsyqaGZigIOkPiqN07HY796hukoEgjec4zVQJJuEAs0AR6jMUUS0OxiIBOY6CrUBSNz1pugSGjShgSMkVNrpZslmCEGcaWC4z1pa6mMaW1M0EDA9q0qym0CFAZcTMhhHP7fpWduI1Ya2k49WeU\/3n9KSlhF7USJbVA+3alwelaEC5LEgdh1oZb8x+1VHZ4rjfLt+XbgCuVculjJobtwscml17e\/WajpcrfBlyagE0Iogax3qGrimK8VnmiU1ey702pxLiM7d63cN4jftxpusK5AJMRTrdsk863jnWbnXtPBPiHi+HvKdcicg86+lcH8c2eF4IO4JJGB3r414Zb9azNesThlv8EUE7U5OuU3+2ZlZ8ud8XfEt\/xvi2e4x0D5VryfFXG9F1SXgwJgxG0jpWjxYPaukNgzBrnKjOyqklicAda8Ny38r114UVuKGuAlGRxEYM9Qe3+KWFQW3N7WJX+XogiRjPatb3xcaLdm2qhQjAgk75Mnn+nQVkcojgrqBGRBz2zUQTFnj5AEXnj6UNqFBYFgwHoIMEGd5\/e9M8y2LYK20Y5A1TInn3Iq7F0qt0WyoDiCSufvy3qbakLAgHGedQW00kuWmCRpGx5T+v6UaXRMMCJwSMHamOo4vjGThLKIH+W3rwIGcn2NSLWArOo0VsR8ytmIxVSY9801WBKi4TA35x9K0yM3EFu36BnLZmc9OVG3EG8zFsSBgbVn0q+UxJ2Y7UO39QmYipfV2PUFMDPsYpYHM47USkDkTnke1UaqbWSCDI+1SbP\/V\/SgqqAzVUemqiu9qqioBV1AJqbS1Yo1UmolutNpAN6bTYrFgk10bPDqsFqz27kCmeaas9TboW762SNOCK6\/h\/i5+TcV5aZMmtvAMfNUDrXXDFzyyM+KE1MbgEBq83acB5JII5ivX\/ABDZJ8PFwnnXinGWIMAV5+WTv464X7fTTbY3ymE9UfzDp075M7Vp8oKpCKCCoYEjbHOsKMYWfUFOFnrTddwAPq08mLHeuYZctpKH0qGAwGmlaXCgAeljjG8UVtQwDXCVRp+v7xUKBNJt3JYchy6\/vvSxdlydUjpAoXgBTOZ2P0\/3V3HnIGlZJjpQnWoV9g6mPbINTRapSNwRNWZ7daG2pdtMxg9f\/VOAdYZlAMf1riqKWCJJhvzdD\/ilEmZcMedOC\/ywwJEGM0F8mCsAw5JbTn99qCi5iIU40gigXJqtqvVEAHFERjQ1bGaqitBFVFO0VAvautrJYSmKooqompsXMUQNKLVFJNJEaFempLbUm0knNbrFsDlXSMitWdW9dPgUVLgMVmSAKalyGxV9o1\/EXE2z4YUHzV4V51GNudei8duD+HyfWTXmmOTmscsm\/G8b4MGBIBnkatLrIwYHOqc0JL6FBnQJjGO9DXJTrl9rju2NTOWMCB9qmtSumCDPXlUNwFGHlop1SCMUJYMoDM0rhRGAKC3C+kI0kDI5ChAGAcA5J3qgRp2Mz1xV3Fa2xVlKnmCMigtExqOQDkTkd6dacAAKram2M86UjKcOMDM08aFwrrOmJIwOcc\/vTRsRB1m4SMiIYTSuIjIKtIAB1YO3Sqe4WksPYDrVNcNwaXJJGJ7T\/s0EQEqwUBwMSd\/t9KW5WAByHSqMDKnHKqb2oICAZ3qpFUcb1VB0+dDUqVuoo0DVKlANMSpUqstlqtlmpUrUDqK3UqV2xZcrxsn0551xjVVK8\/L+TePwNTAxQjapUrm0s0R+RPY1KlBSfMKJiRABgQKupQLX5h70c+k\/WpUoH3ANN3AwiR+lZh8xqVKChvV1KlBTZOaGpUoP\/9k=\" height=\"400px\" width=\"400px\">","d8799855":"# Decision Trees","4146e6c3":"The above code cell shows a very high outlier. \n\nSince the number of outlier observed here is only 1 it will be safe to drop that data point itself.\n\nThis will result in no data loss.","c661dfb9":"Now the class imbalance problems is solved. Let's check the modelon the new dataset now.","2e7263c0":"SVC on the other hand is highly overfitting on the data.\n\nSince the dataset is highly imbalanced even if the model predicts the same class for all data points the accuracy is reaching 99%.","73a29287":"Now the model is performing much better and provides a much higher accuracy of 91.5%\n\nLet's check the roc curve","6d8f9af2":"# Checking the target variable","b6cbefa8":"# SVC","e5fc48ff":"<p style='font-size: 16px'>Exoplanets are planets that orbit a star other than our sun. The prefix exo comes from the Greek and means outside; these worlds are far, far outside our own solar system. Astronomers have confirmed more than 4,000 exoplanets orbiting distant stars, with at least 1,000 more more awaiting confirmation. They found the first two exoplanets orbiting a pulsar in 1992. They confirmed the first exoplanet orbiting a sunlike star in 1995. Prior to those discoveries, the existence of planetary systems other than our own had been surmised for centuries and in the early 20th century a planet was heralded for Barnard\u2019s Star (it later turned out to be spurious). The true discoveries came with advancing technology, a relatively recent development. <a href=\"https:\/\/earthsky.org\/astronomy-essentials\/what-are-exoplanets\">Source<\/a><\/p>","39188f99":"The above ROC curve is proving that the roc_auc score is 50% and hence the model is totally overfiting to provide high accuracy.","772d032d":"Logistic Regression is underfitting the data"}}