{"cell_type":{"d76abd0e":"code","61de0507":"code","a74ee9ad":"code","96ef6103":"code","df64e58f":"code","80d8ea04":"code","732e53f5":"code","a86d7441":"code","64d34549":"code","8ed72c41":"code","2d954037":"code","465c7403":"code","b9687d53":"code","2256f2d3":"code","d04434f4":"code","3543856d":"code","2393435d":"markdown","d11aaa86":"markdown","f15fae85":"markdown","4ac527a2":"markdown","f5467eaa":"markdown","5ef270f5":"markdown","177cdf3d":"markdown","59297694":"markdown","5d4a9ecc":"markdown"},"source":{"d76abd0e":"!pip install ipython-autotime\n%matplotlib inline\n%load_ext autotime","61de0507":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as pty\nimport plotly.express as px\nimport plotly.graph_objects as go","a74ee9ad":"data_path = '..\/input\/cc-live-proj\/'\ntrain = pd.read_csv(data_path + 'AI-DataTrain.csv')\ntrain = train.drop(columns=['Unnamed: 0'])\ntest = pd.read_csv(data_path + 'AI-DataTest.csv')","96ef6103":"train.head()","df64e58f":"test.head()","80d8ea04":"train.describe()","732e53f5":"test.describe()","a86d7441":"print('Shape of train data:',train.shape)\nprint('Shape of test data:',test.shape)","64d34549":"counts_train = train.apply(pd.Series.value_counts)\ncounts_train","8ed72c41":"questions_train = counts_train.columns.values\n\nfig = go.Figure(data=[\n    go.Bar(name='Incorrect', x=questions_train, y=counts_train.loc[0].values),\n    go.Bar(name='Correct', x=questions_train, y=counts_train.loc[1].values)\n])\n# Change the bar mode\nfig.update_layout(\n    autosize=True,\n    barmode='stack',\n    title_text='Correct and incorrect attempts of Questions in train data',\n    xaxis_tickangle=-45,\n    xaxis_title=\"Question Number\",\n    yaxis_title=\"Number of times attempted correct and incorrect\",\n    title=dict(\n        y=0.9,\n        x=0.5,\n        xanchor='center',\n        yanchor='top',\n        font=dict(\n            size=24,\n        )\n    )\n)\nfig.show()","2d954037":"counts_test = test.apply(pd.Series.value_counts)\ncounts_test","465c7403":"questions_test = counts_test.columns.values\n\nfig = go.Figure(data=[\n    go.Bar(name='Incorrect', x=questions_test, y=counts_test.loc[0].values),\n    go.Bar(name='Correct', x=questions_test, y=counts_test.loc[1].values)\n])\n# Change the bar mode\nfig.update_layout(\n    barmode='stack',\n    title_text='Correct and incorrect attempts of Questions in Test data',\n    xaxis_tickangle=-45,\n    xaxis_title=\"Question Number\",\n    yaxis_title=\"No. of times attempted correct and incorrect\",\n    title=dict(\n        y=0.9,\n        x=0.5,\n        xanchor='center',\n        yanchor='top',\n        font=dict(\n            size=24,\n        )\n    )\n)\nfig.show()","b9687d53":"train_copy = train.copy(deep=True)\ntrain_copy.loc[:,'Score']=train_copy.sum(axis=1)\ntrain_copy.head()","2256f2d3":"fig = px.histogram(train_copy,\n                   x='Score',\n                   histnorm='probability density',\n                   opacity=0.6,\n                   color_discrete_sequence=['green','blue']\n                  )\n\nfig.update_layout(\n    title=dict(\n        text='Scores Histigram (Train set)',\n        y=0.95,\n        x=0.5,\n        xanchor='center',\n        yanchor='top',\n        font=dict(\n            size=24,\n        )\n    )\n)\nfig.show()","d04434f4":"test_copy = test.copy(deep=True)\ntest_copy.loc[:,'Score']=test_copy.sum(axis=1)\ntest_copy.head()","3543856d":"fig = px.histogram(test_copy,\n                   x='Score',\n                   histnorm='probability density',\n                   opacity=0.6,\n                   color_discrete_sequence=['green','blue']\n                  )\n\nfig.update_layout(\n    title=dict(\n        text='Scores Histigram (Test set)',\n        y=0.95,\n        x=0.5,\n        xanchor='center',\n        yanchor='top',\n        font=dict(\n            size=24,\n        )\n    )\n)\nfig.show()","2393435d":"# Importing Dependencies","d11aaa86":"# Highest Score ","f15fae85":"# Questions attempted correct or incorrect","4ac527a2":"# Reading the data","f5467eaa":"# Exploratory Data Analysis","5ef270f5":"## Looking at the data","177cdf3d":"# THE END","59297694":"### Train data ","5d4a9ecc":"### Test Data"}}