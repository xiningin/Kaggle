{"cell_type":{"aa8757fd":"code","9887f316":"code","9fd00ecd":"code","8392e7b5":"code","d2164c8b":"code","f6d4fba8":"code","61279f7c":"code","ed6b64b4":"code","0f2b9275":"code","014ebd1a":"code","f18f3932":"code","6c5e22d6":"code","17021512":"code","6c5dd8ef":"code","733fa673":"code","206ab38d":"code","4e20dd4b":"code","536e4c9c":"code","267f5d33":"code","ccd16f79":"code","db38cbfb":"code","d507282d":"code","a450a653":"code","24dfec9d":"code","1eacddd9":"markdown","f92346d5":"markdown","561355ae":"markdown","5efccb0d":"markdown","a883dffc":"markdown","ae652f4d":"markdown","eb143dee":"markdown","3ef7d095":"markdown","03c00078":"markdown"},"source":{"aa8757fd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport tensorflow as tf\nimport warnings\nfrom tensorflow.keras.optimizers import RMSprop\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nwarnings.filterwarnings('ignore')\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9887f316":"train_dir = \"\/kaggle\/input\/digit-recognizer\/train.csv\"\ntest_dir = \"\/kaggle\/input\/digit-recognizer\/test.csv\"","9fd00ecd":"data_train = pd.read_csv(train_dir)\ndata_test = pd.read_csv(test_dir)","8392e7b5":"data_train.head()","d2164c8b":"data_test.head()","f6d4fba8":"Y_train = data_train[\"label\"]\nX_train = data_train.drop('label', axis=1)","61279f7c":"print(Y_train.shape, X_train.shape, data_test.shape)","ed6b64b4":"plt.figure(figsize = (12,5))\nsns.countplot(Y_train)\nplt.xlabel('Label')\nplt.ylabel('Count')\nplt.show()","0f2b9275":"X_train, X_test, Y_train, Y_test = train_test_split(X_train, Y_train, test_size=0.2, shuffle=False)","014ebd1a":"print(X_train.shape, X_test.shape)","f18f3932":"X_train =X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)","6c5e22d6":"# Normalisation\nX_train, X_test = X_train\/255.0, X_test\/255.0","17021512":"Y_train  = pd.get_dummies(Y_train).values\nY_test  = pd.get_dummies(Y_test).values","6c5dd8ef":"print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)","733fa673":"class Stop_Entrainment(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy')>=0.99):\n            print(\"\\n Atteint une pr\u00e9cision de 99%, donc annulation de l'entra\u00eenement!\")\n            self.model.stop_training = True","206ab38d":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n          featurewise_center=False,            \n          samplewise_center=False,             \n          featurewise_std_normalization=False, \n          samplewise_std_normalization=False,  \n          zca_whitening=False,                 \n          rotation_range=20,                   \n          zoom_range = 0.1,                   \n          width_shift_range=0.1,               \n          height_shift_range=0.1,              \n          horizontal_flip=False,               \n          vertical_flip=False)                 ","4e20dd4b":"Stop_Entrainment = Stop_Entrainment()\n\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)),\n  tf.keras.layers.MaxPooling2D(2, 2),\n  \n  tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n  tf.keras.layers.MaxPooling2D(2,2),\n    \n    \n  tf.keras.layers.Flatten(),\n  tf.keras.layers.Dense(1024, activation='relu'),\n  tf.keras.layers.Dropout(0.25),\n  tf.keras.layers.Dense(10, activation='softmax')\n])","536e4c9c":"# R\u00e9capitulatif de l'architecture mod\u00e8le\nmodel.summary()","267f5d33":"model.compile(optimizer=Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])","ccd16f79":"hist = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=32),\n                           steps_per_epoch=1000,             \n                           epochs=50,                        \n                           verbose=1,                        \n                           validation_data=(X_test, Y_test),\n                           callbacks=[Stop_Entrainment])  ","db38cbfb":"#-----------------------------------------------------------\n# Retrieve a list of list results on training and test data\n# sets for each training epoch\n#-----------------------------------------------------------\nacc      = hist.history[     'accuracy' ]\nval_acc  = hist.history[ 'val_accuracy' ]\nloss     = hist.history[    'loss' ]\nval_loss = hist.history['val_loss' ]\n\nepochs   = range(len(acc)) # Get number of epochs\n\n#------------------------------------------------\n# Plot training and validation accuracy per epoch\n#------------------------------------------------\nplt.plot  ( epochs,     acc, color='b' )\nplt.plot  ( epochs, val_acc, color='r' )\nplt.title ('Training and validation accuracy')\nplt.figure()\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot  ( epochs,     loss, color='b' )\nplt.plot  ( epochs, val_loss, color='r' )\nplt.title ('Training and validation loss'   )","d507282d":"X_test = pd.read_csv(test_dir)\nX_test = X_test.values.reshape(-1, 28,28,1)\nX_test = X_test \/ 255.0","a450a653":"Y_hat = model.predict(X_test, verbose=1)\nY_pred = np.argmax(Y_hat, axis=1)","24dfec9d":"results = pd.Series(Y_pred, name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"sample_submission.csv\",index=False)","1eacddd9":"On lance l'entra\u00eenement du mod\u00e9le et on l'annulle une fois qu'on a une pr\u00e9cision de 99%.","f92346d5":"## D\u00e9finition d'une classe pour eviter l'overfitting","561355ae":"## Importation des donn\u00e9es","5efccb0d":"# Projet de Machine learning\n\n\n## D\u00e9marche :\n* Chargement de l'ensemble de donn\u00e9es \n* Pr\u00e9paration de l'ensemble de donn\u00e9es \n* D\u00e9finition du mod\u00e8le\n* L\u2019\u00e9valuation du mod\u00e8le \n* Pr\u00e9sentation des r\u00e9sultats","a883dffc":"Pour compile le mod\u00e8le, on utilise l'agorithme de gradient stochastique pour minimiser l'erreur","ae652f4d":"## Pretraitement des donn\u00e9es","eb143dee":"## Evaluation du mod\u00e8le","3ef7d095":"## Cr\u00e9ation de model et l'entra\u00eenement","03c00078":"## Importation des librairies "}}