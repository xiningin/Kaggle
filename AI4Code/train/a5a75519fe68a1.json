{"cell_type":{"f035ae2e":"code","5ee33a6d":"code","dc35d233":"code","b4f29da8":"code","856b2a0a":"code","7ecd8a3e":"code","a956dfdb":"code","19131b47":"code","f1a8d2de":"code","91d3f5f9":"markdown","ceb15340":"markdown","6af9eb8a":"markdown","3c11f99c":"markdown","ab2c1486":"markdown","e15d2581":"markdown","c0b35d9f":"markdown","a2241b6f":"markdown","43146715":"markdown","13ba5936":"markdown","e4382aa0":"markdown","a32a6374":"markdown"},"source":{"f035ae2e":"from  matplotlib import pyplot\nfrom keras.preprocessing.image import load_img\nimg = load_img('..\/input\/bird22\/bird.jpg')\npyplot.imshow(img)","5ee33a6d":"from numpy import expand_dims\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom matplotlib import pyplot\n# load the image\nimg = load_img('..\/input\/bird22\/bird.jpg')\n# convert to numpy array\ndata = img_to_array(img)\n\nsamples = expand_dims(data, 0)\n# create image data augmentation generator\ndatagen = ImageDataGenerator(zoom_range=0.2,fill_mode=\"wrap\")\n# prepare iterator\nit = datagen.flow(samples, batch_size=1)\n# generate samples and plot\nfor i in range(9):\n\t# define subplot\n\tpyplot.subplot(330 + 1 + i)\n\t# generate batch of images\n\tbatch = it.next()\n\t# convert to unsigned integers for viewing\n\timage = batch[0].astype('uint8')\n\t# plot raw pixel data\n\tpyplot.imshow(image)\n# show the figure\npyplot.show()","dc35d233":"datagen = ImageDataGenerator(height_shift_range=[-200,200])\nit = datagen.flow(samples, batch_size=1)\n# generate samples and plot\nfor i in range(9):\n\t# define subplot\n\tpyplot.subplot(330 + 1 + i)\n\t# generate batch of images\n\tbatch = it.next()\n\t# convert to unsigned integers for viewing\n\timage = batch[0].astype('uint8')\n\t# plot raw pixel data\n\tpyplot.imshow(image)\n# show the figure\npyplot.show()","b4f29da8":"datagen = ImageDataGenerator(rotation_range= 80)\nit = datagen.flow(samples, batch_size=1)\n# generate samples and plot\nfor i in range(9):\n\t# define subplot\n\tpyplot.subplot(330 + 1 + i)\n\t# generate batch of images\n\tbatch = it.next()\n\t# convert to unsigned integers for viewing\n\timage = batch[0].astype('uint8')\n\t# plot raw pixel data\n\tpyplot.imshow(image)\n# show the figure\npyplot.show()","856b2a0a":"datagen = ImageDataGenerator(height_shift_range=[-200,200])\nit = datagen.flow(samples, batch_size=1)\n# generate samples and plot\nfor i in range(9):\n\t# define subplot\n\tpyplot.subplot(330 + 1 + i)\n\t# generate batch of images\n\tbatch = it.next()\n\t# convert to unsigned integers for viewing\n\timage = batch[0].astype('uint8')\n\t# plot raw pixel data\n\tpyplot.imshow(image)\n# show the figure\npyplot.show()","7ecd8a3e":"datagen = ImageDataGenerator(horizontal_flip=True)\nit = datagen.flow(samples, batch_size=1)\n# generate samples and plot\nfor i in range(9):\n\t# define subplot\n\tpyplot.subplot(330 + 1 + i)\n\t# generate batch of images\n\tbatch = it.next()\n\t# convert to unsigned integers for viewing\n\timage = batch[0].astype('uint8')\n\t# plot raw pixel data\n\tpyplot.imshow(image)\n# show the figure\npyplot.show()","a956dfdb":"\ndatagen = ImageDataGenerator(brightness_range=[0.2,1.0])\nit = datagen.flow(samples, batch_size=1)\n# generate samples and plot\nfor i in range(9):\n\t# define subplot\n\tpyplot.subplot(330 + 1 + i)\n\t# generate batch of images\n\tbatch = it.next()\n\t# convert to unsigned integers for viewing\n\timage = batch[0].astype('uint8')\n\t# plot raw pixel data\n\tpyplot.imshow(image)\n# show the figure\npyplot.show()","19131b47":"\ndatagen = ImageDataGenerator(vertical_flip=True)\nit = datagen.flow(samples, batch_size=1)\n# generate samples and plot\nfor i in range(9):\n\t# define subplot\n\tpyplot.subplot(330 + 1 + i)\n\t# generate batch of images\n\tbatch = it.next()\n\t# convert to unsigned integers for viewing\n\timage = batch[0].astype('uint8')\n\t# plot raw pixel data\n\tpyplot.imshow(image)\n# show the figure\npyplot.show()","f1a8d2de":"\ndatagen = ImageDataGenerator(shear_range=0.6)\nit = datagen.flow(samples, batch_size=1)\n# generate samples and plot\nfor i in range(9):\n\t# define subplot\n\tpyplot.subplot(330 + 1 + i)\n\t# generate batch of images\n\tbatch = it.next()\n\t# convert to unsigned integers for viewing\n\timage = batch[0].astype('uint8')\n\t# plot raw pixel data\n\tpyplot.imshow(image)\n# show the figure\npyplot.show()","91d3f5f9":"# shear_range","ceb15340":"> tf.keras.preprocessing.image.ImageDataGenerator(\n    rotation_range=0, width_shift_range=0.0,\n    height_shift_range=0.0, brightness_range=None, shear_range=0.0, zoom_range=0.0,\nfill_mode='nearest', cval=0.0, horizontal_flip=False,\n    vertical_flip=False, rescale=None, validation_split=0.0\n)","6af9eb8a":"# horizontal_flip","3c11f99c":"# vertical_flip","ab2c1486":"#  If you like this Notebook  \n#  please Vote and comment ,thanks \n","e15d2581":"# height_shift_range","c0b35d9f":"# **Data Augmentation**\n# \nHaving more data (dataset \/ samples) is a best way to get better consistent estimators (ML model)\n\nData Augmentation is one of the interesting regularization technique to resolve Overfitting. The concept is very simple, this technique generates new training data from given original dataset. Dataset Augmentation provides a cheap and easy way to increase the amount of your training data.\n\nThis technique can be used for both NLP and CV.\n\n","a2241b6f":"# rotation_range","43146715":"It is worth knowing that Keras\u2019 provided ImageDataGenerator for generating Data Augmentation.\n\n> tf.keras.preprocessing.image_dataset_from_directory","13ba5936":"# brightness_range","e4382aa0":"1) **rotation_range** : Int. Degree range for random rotations.\n\n(2) **width_shift_range** : Float, 1-D array-like or int\n\n(3) **height_shift_range** : Float, 1-D array-like or int\n\nshift to an image means moving all pixels of the image in one direction, such as horizontally or vertically, while keeping the image dimensions the same\n\n(4) **brightness_range** : Tuple or list of two floats. Range for picking a brightness shift value from\n\n(5) **shear_range** : Float. Shear Intensity\n\n(6) **zoom_range** : Float or [lower, upper]. Range for random zoom\n\n(7) **fill_mode** :One of {\"constant\", \"nearest\", \"reflect\" or \"wrap\"}. Default is 'nearest'. Points outside the boundaries of the input are filled according to the given mode:.\n\n(8) **horizontal_flip** :Boolean. Randomly flip inputs horizontally.\n\n**(9) vertical_flip** : Boolean. Randomly flip inputs vertically.\n\n(10) **cval Float or Int**. Value used for points outside the boundaries when fill_mode = \"constant\".\n\n(11) **validation_split** Float. Fraction of images reserved for validation (strictly between 0 and 1).\n\n(12) **rescale rescaling factor**. Defaults to None. If None or 0, no rescaling is applied, otherwise we multiply the data by the value provided rescale parameter multiplies the data with a scalar, usually we use 1\/255. This makes the mean of the data at 0.5 with range 0. to 1","a32a6374":"# zoom_range"}}