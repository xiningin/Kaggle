{"cell_type":{"c2eefc1d":"code","ccc17397":"code","f956a83a":"code","629305b3":"code","3b259768":"code","e5f4b6bc":"code","30f31018":"code","7ba9182c":"code","dff6b9e5":"code","e2bc3d69":"code","9020c59c":"code","a562f613":"code","b5a7afdb":"code","d5eadc12":"code","7f874841":"code","51473392":"code","07d7e520":"code","078da6ea":"code","2d011e3d":"code","ee4d8e00":"code","0e025e88":"code","40064678":"code","6da1a7a3":"code","1010640b":"code","aba1f5ce":"code","5e82a2e2":"code","3fe617f3":"code","a8ce701f":"code","789430c7":"code","f18b14da":"code","9dd7fab9":"code","036fe2ff":"code","667cf329":"code","58fc7347":"code","59881758":"code","ed2231a4":"code","55dbdb7e":"markdown","ef094954":"markdown","0c107f6d":"markdown","c84f499b":"markdown","3fd56c6e":"markdown","3df601fa":"markdown","1f7e10e1":"markdown","d74952f1":"markdown","e8a1137d":"markdown","cda343d0":"markdown","fd02d8fa":"markdown","8a644b6d":"markdown","14404907":"markdown","f390b6a1":"markdown","316ffafd":"markdown","dd5051d1":"markdown","ea0bc645":"markdown","dadf49dd":"markdown","1ee30688":"markdown","3d916cc2":"markdown","1e597ec0":"markdown","ecd13385":"markdown","b187dba1":"markdown","d608c7b7":"markdown","409b0256":"markdown","ccfd4316":"markdown","3be1afb3":"markdown","70d8d82f":"markdown","69ebaadf":"markdown","f2642e55":"markdown","6c02294a":"markdown","9f49c149":"markdown","961abf83":"markdown"},"source":{"c2eefc1d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport warnings\n\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet,BayesianRidge\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom matplotlib import rcParams\n\nwarnings.filterwarnings('ignore')","ccc17397":"# Create function\ndef chooseOnlineOrder(rnd=True):\n    if rnd:\n        return 'Yes' if np.random.randint(1, 3) == 1 else 'No'  \n    online_order_opt = 0\n    while True:\n        try:\n            online_order_opt = int(input('Online Order? \\n(1) Yes\\n(2) No\\n'))\n            if online_order_opt in (1, 2):\n                online_order = 'Yes' if online_order_opt == 1 else 'No'\n                break\n            else:\n                print('Please, input a number between 1 and 2')\n        except ValueError:\n            print('Please, input a number between 1 and 2.')\n    return online_order\n\ndef chooseBookTable(rnd=True):\n    if rnd:\n        return 'Yes' if np.random.randint(1, 3) == 1 else 'No'  \n    book_table_opt = 0\n    while True:\n        try:\n            book_table_opt = int(input('Book Table? \\n(1) Yes\\n(2) No\\n'))\n            if book_table_opt in (1, 2):\n                book_table = 'Yes' if book_table_opt == 1 else 'No'\n                break\n            else:\n                print('Please, input a number between 1 and 2')\n        except ValueError:\n            print('Please, input a number between 1 and 2.')\n    return book_table\n\ndef chooseVotes(rnd=True):\n    if rnd:\n        return int(np.random.randint(1, 1001))\n    while True:\n        try:\n            votes = int(input('Votes: '))\n            if votes < 0:\n                print('Please, insert a positive number')\n            else:\n                break\n        except ValueError:\n            print('Please, insert number.')\n    return votes\n\ndef chooseApproxCost(rnd=True):\n    if rnd:\n        return float(np.random.randint(1, 1001))\n    while True:\n        try:\n            approx_cost = int(input('Approx cost (for two people: '))\n            if approx_cost < 0:\n                print('Please, insert a positive number')\n            else:\n                break\n        except ValueError:\n            print('Please, insert a number.')\n    return approx_cost\n\ndef chooseRestType(rnd=True):\n    listed_in_select = list(X_train['listed_in(type)'].value_counts().index)\n    idx_list = np.arange(len(list(X_train['listed_in(type)'].value_counts().index)))\n    if rnd:\n        return list(zip(idx_list, listed_in_select))[np.random.randint(1, 8)-1][1]\n    print('\\nChoose one option for Listed in (type): ')\n    for idx, tipo in zip(idx_list, listed_in_select):\n        print(f'({idx+1}) {tipo}')\n    listed_in_opt = 0\n    while True:\n        try:\n            listed_in_opt = int(input())\n            if listed_in_opt in range(1, 8):\n                listed_in_type = list(zip(idx_list, listed_in_select))[listed_in_opt-1][1]\n                break\n            else:\n                print('Please, input a number between 1 and 7.')\n        except ValueError:\n            print('Please, input a number between 1 and 7.')\n    return listed_in_type\n\ndef chooseRestCity(rnd=True):\n    listed_in_select = list(X_train['listed_in(city)'].value_counts().index)\n    idx_list = np.arange(len(list(X_train['listed_in(city)'].value_counts().index)))\n    if rnd:\n        return list(zip(idx_list, listed_in_select))[np.random.randint(1, 30)-1][1]\n    print('\\nChoose one option for Listed in (city): ')\n    for idx, city in zip(idx_list, listed_in_select):\n        print(f'({idx+1}) {city}')\n    listed_in_opt = 0\n    while True:\n        try:\n            listed_in_opt = int(input())\n            if listed_in_opt in range(1, 31):\n                listed_in_city = list(zip(idx_list, listed_in_select))[listed_in_opt-1][1]\n                break\n            else:\n                print('Please, input a number between 1 and 30.')\n        except ValueError:\n            print('Please, input a number between 1 and 30.')\n    return listed_in_city\n\ndef format_spines(ax, right_border=True):\n    \"\"\"\n    this function sets up borders from an axis and personalize colors\n    \"\"\"    \n    # Setting up colors\n    ax.spines['bottom'].set_color('#CCCCCC')\n    ax.spines['left'].set_color('#CCCCCC')\n    ax.spines['top'].set_visible(False)\n    if right_border:\n        ax.spines['right'].set_color('#CCCCCC')\n    else:\n        ax.spines['right'].set_color('#FFFFFF')\n    ax.patch.set_facecolor('#FFFFFF')\n    \n    \n# Class for log transformation\nclass logTransformation(BaseEstimator, TransformerMixin):\n    \n    def fit(self, X, y=None):        \n        return self\n    \n    def transform(self, X, y=None):        \n        return np.log1p(X)\n    \n# Functions for report\ndef create_dataset():\n    \"\"\"\n    This functions creates a dataframe to keep performance analysis\n    \"\"\"\n    attributes = ['model', 'rmse_train', 'rmse_cv', 'rmse_test', 'total_time']\n    model_performance = pd.DataFrame({})\n    for col in attributes:\n        model_performance[col] = []\n    return model_performance\n\ndef model_results(models, X_train, y_train, X_test, y_test, df_performance, cv=5, \n                  scoring='neg_mean_squared_error'):\n    for name, model in models.items():\n        t0 = time.time()\n        model.fit(X_train, y_train)\n        train_pred = model.predict(X_train)\n        train_rmse = mean_squared_error(y_train, train_pred)\n\n        train_cv_scores = cross_val_score(model, X_train, y_train, cv=cv, scoring=scoring)\n        train_cv_rmse = np.sqrt(-train_cv_scores).mean()\n\n        test_pred = model.predict(X_test)\n        test_rmse = mean_squared_error(y_test, test_pred)\n        t1 = time.time()\n        delta_time = t1-t0\n        model_name = model.__class__.__name__\n\n        performances = {}\n        performances['model'] = model_name\n        performances['rmse_train'] = round(train_rmse, 4)\n        performances['rmse_cv'] = round(train_cv_rmse, 4)\n        performances['rmse_test'] = round(test_rmse, 4)\n        performances['total_time'] = round(delta_time, 3)\n        df_performance = df_performance.append(performances, ignore_index=True)\n    plotting_values(\"Root Mean Square Train Set\",df_performance.model.values,df_performance.rmse_train.values)\n    plt.show();\n    plotting_values(\"Root Mean Square Cross Validation Set\",df_performance.model.values,df_performance.rmse_cv.values)\n    plt.show();\n    plotting_values(\"Root Mean Square Test Set\",df_performance.model.values,df_performance.rmse_test.values)\n    plt.show();\n    plotting_values(\"Total Time\",df_performance.model.values,df_performance.total_time.values)\n    plt.show();\n        \n    return df_performance\n\ndef plotting_values(title,x,values):\n    \n    plt.title(title)\n    plt.bar(x,values)\n    \ndef calc_rmse(model, X, y, cv=5, scoring='neg_mean_squared_error'):\n    scores = cross_val_score(\n        model, X, y, cv=cv, scoring=scoring)\n    return np.sqrt(-scores).mean()\n","f956a83a":"data = pd.read_csv(\"..\/input\/zomato.csv\")","629305b3":"del data['url']\ndel data['address']\ndel data['phone']\ndel data['location']","3b259768":"data.rename(columns={'approx_cost(for two people)': 'average_cost', 'listed_in(city)': 'locality','listed_in(type)': 'restaurant_type'}, inplace=True)\ndata.head()","e5f4b6bc":"print(\"Percentage null or na values in df\")\n((data.isnull() | data.isna()).sum() * 100 \/ data.index.size).round(2)","30f31018":"len(data)","7ba9182c":"# values_to_drop = data.columns.values\n# values_to_drop = values_to_drop[values_to_drop != 'dish_liked']","dff6b9e5":"data.rate = data.rate.replace(\"NEW\", np.nan)\ndata.dropna(how ='any', inplace = True)","e2bc3d69":"print(\"Percentage null or na values in df\")\n((data.isnull() | data.isna()).sum() * 100 \/ data.index.size).round(2)","9020c59c":"data.rate = data.rate.astype(str)\ndata.rate = data.rate.apply(lambda x: x.replace('\/5',''))\ndata.rate = data.rate.apply(lambda x: float(x))\ndata.head()","a562f613":"data.average_cost = data.average_cost.str.replace(',','').astype('float')","b5a7afdb":"data = data.drop_duplicates(subset='name',keep='last') ","d5eadc12":"fig = plt.figure(figsize=(16,12))\ng = sns.countplot(x=\"locality\",data=data, palette = \"Set1\" ,order = data['locality'].value_counts().index)\ng.set_xticklabels(g.get_xticklabels(), rotation=90, ha=\"right\")\ng \nplt.title('locality',size = 20);","7f874841":"dummy = data.cuisines.str.get_dummies(sep=', ')","51473392":"dummy.columns","07d7e520":"dummy[\"Tea\"] = dummy[\"Tea\"] + dummy[\"Bubble Tea\"]\ndel dummy['Bubble Tea']","078da6ea":"cuisine_of_res = {}\n\nfor typ in dummy.columns.values[13:]:\n    cuisine_of_res[typ] = dummy[typ].value_counts()[1]\n\nfig = plt.figure(figsize=(16,12))\nplt.xticks(rotation='vertical')\nplt.bar(cuisine_of_res.keys(), cuisine_of_res.values(), color='g');","2d011e3d":"data  = pd.concat([data,dummy],axis=1)","ee4d8e00":"dummy2 = data.dish_liked.str.get_dummies(sep=', ')","0e025e88":"type_of_dish = {}\n\nfor typ in dummy2.columns.values[13:]:\n    type_of_dish[typ] = dummy2[typ].value_counts()[1]\n\n\nimport operator\nsorted_x = sorted(type_of_dish.items(), key=operator.itemgetter(1),reverse=True)\n\nprint(sorted_x[:20])","40064678":"dummy3 = data.restaurant_type.str.get_dummies(sep=', ')","6da1a7a3":"type_of_res = {}\n\nfor typ in dummy3.columns.values:\n    type_of_res[typ] = dummy3[typ].value_counts()[1]\nfig = plt.figure(figsize=(16,12))\nplt.xticks(rotation='vertical')\nplt.bar(type_of_res.keys(), type_of_res.values(), color='rgb');","1010640b":"df  = pd.concat([data,dummy3],axis=1)","aba1f5ce":"del df['name']\ndel df['dish_liked']\ndel df['cuisines']\ndel df['reviews_list']\ndel df['menu_item']\ndel df['restaurant_type']\ndel df['rest_type']","5e82a2e2":"dummy4 = pd.get_dummies(df['locality'])\ndel df['locality']\ndummy5 = pd.get_dummies(df['online_order'],prefix='online_order')\ndummy6 = pd.get_dummies(df['book_table'],prefix='book_table')\ndel df['online_order']\ndel df['book_table']\ndf  = pd.concat([df,dummy5,dummy6],axis=1)","3fe617f3":"df.head()","a8ce701f":"df.columns.values ","789430c7":"y = df.loc[:,'rate'].values\nX = df.drop('rate', axis=1).values","f18b14da":"sns.kdeplot(y);","9dd7fab9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.20, random_state=42)","036fe2ff":"df_performance = create_dataset()\nregressors = {\n    'lin': LinearRegression(),\n    'forest': RandomForestRegressor(),\n    'SVR':SVR(),\n}\ndf_performance = model_results(regressors, X_train, y_train, X_test, y_test, df_performance)\ndf_performance.set_index('model', inplace=True)\ncm = sns.light_palette(\"cornflowerblue\", as_cmap=True)\ndf_performance.style.background_gradient(cmap=cm)","667cf329":"rf  = RandomForestRegressor()\npred = rf.fit(X_train, y_train)\n\ny_pred = pred.predict(X_test)\n\ndf_pred = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\ndf_pred.head()","58fc7347":"from sklearn import metrics\n\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","59881758":"sns.kdeplot(y_pred);","ed2231a4":"fig = plt.figure(figsize=(16,12))\nsns.kdeplot(y_test,label='y_test')\nsns.kdeplot(y_pred,label='y_pred')\nplt.show()","55dbdb7e":"#### All the Unique Cuisines Which are Present ","ef094954":"### Plotting Distribution of y","0c107f6d":"### Combining Main Data and Dummy of Cuisine","c84f499b":"### Plotting Presence of Restaurants On Different Localities ","3fd56c6e":"### Creating Test And Train Split","3df601fa":"### Combining Main Data and Type of Restaurants ","1f7e10e1":"### Here We Can See Random Forest Regressor Is Outperforming the Other Models","d74952f1":"# Predicting Zomato Rating of Restaurants at Bangalore \n\n\n![](https:\/\/www.wheelstreet.com\/blog\/wp-content\/uploads\/2016\/01\/VV-Puram-Food-Street-smithakalluraya.jpg)\n\n","e8a1137d":"## Final DataFrame ","cda343d0":"### Dummy Variables for Cuisines","fd02d8fa":"### Finding Performance of Random Forest Reressor on Different Metrics","8a644b6d":"### Dummy Variables for Restaurant Types","14404907":"#### Combining Similiar Types of Cuisines","f390b6a1":"## Documentation In Progress. Comments are Welcome. ","316ffafd":"### Extracting X and y from DataFrames ","dd5051d1":"### Checking For Null Values","ea0bc645":"### Plotting Type of Restaurants ","dadf49dd":"### Dropping Null Values","1ee30688":"### Converting 1,100 Cost Format to Numbers ie 1100","3d916cc2":"### Deleting all the Irrelevant Columns","1e597ec0":"### Dummy Variables for Locality, online_order and Book Table","ecd13385":"### Necessary Imports","b187dba1":"## Generating Dummy Variables ","d608c7b7":"### Dummy Variables for Common Dishes in a Restaurant","409b0256":"### Converting Rating Column from Object to Float","ccfd4316":"## Cleaning Data\n\n### Deleting Unnecessary Columns","3be1afb3":"### Renaming Columns","70d8d82f":"### Taking Data Input","69ebaadf":"### Plotting Cuisine of Restaurants ","f2642e55":"### Dropping all the Duplicates","6c02294a":"### Final Columns","9f49c149":"### Creating Different Type of Regressors","961abf83":"### Common Dishes in Bangalore"}}