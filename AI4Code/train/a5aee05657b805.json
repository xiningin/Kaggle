{"cell_type":{"becc4872":"code","b6545d5b":"code","a1493468":"code","60c1db42":"code","6dbe1515":"code","3a6bd1e0":"code","e0700536":"code","25cbe2c9":"code","29355c59":"code","f5616a48":"code","4581460f":"code","1eabb697":"code","d103a5d9":"markdown","e1a7f8bd":"markdown","1da27fdc":"markdown","1506e0c5":"markdown","0c75a91b":"markdown","4baeb400":"markdown","578a410a":"markdown","a0c0bc66":"markdown","133ac6fd":"markdown","ffa008d5":"markdown","b6eede20":"markdown","1d79d933":"markdown"},"source":{"becc4872":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nwine_df = pd.read_csv(\"\/kaggle\/input\/wine-tasting\/winemag-data-130k-v2.csv\")","b6545d5b":"wine_df.description.head(20)","a1493468":"from nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport re\nstop_words = stopwords.words(\"english\")\nstop_words.extend([\"wine\", \"least\", \"best\", \"good\", \"yes\", \"however\"])\nstop_words = set(stop_words)\n\n# Remove stop words and split by comma\nwine_df.insert(\n    0,\n    \"modified_description\",\n    wine_df.description.apply(\n        lambda x: \" \".join(\n            [w.lower() for w in x.split() if not re.sub('[.\\-,]', \"\", w.lower()) in stop_words]\n        ).split(\",\")\n    )\n)\n# Remove multiple whitespace and non alpha characters\nwine_df[\"modified_description\"] = wine_df[\"modified_description\"].apply(lambda x: [\" \".join(re.sub('[^a-zA-Z ]+', ' ', i).split()) for i in x])","60c1db42":"from collections import Counter\nlist_of_taste = [taste for row in wine_df[\"modified_description\"] for taste in row if taste != \"\"]\ntaste_list = [i[0] for i in Counter(list_of_taste).most_common(300)]\ntaste_list","6dbe1515":"# Let's find out if some taste are actually the same\nfor idx, taste in enumerate(taste_list):\n    new_list = taste_list[:idx] + [\"0\"] +  taste_list[idx+1:]\n    for idx2, taste_bis in enumerate(new_list):\n        if taste in taste_bis:\n            print(taste, idx, \"-\",  taste_bis, idx2)","3a6bd1e0":"remove_list = [174, 195, 199, 247, 267, 241, 15, 273, 279, 138, 224, 234, 230, 239, 276, 237, 247, 287, 113, 207, 296, 143, 290, 99, 293, 227, 239, 241, 178, 38, 44, 290,\n              55, 147, 160, 225, 213, 181, 66, 84, 297, 120, 49, 292, 164, 223, 135, 39, 116, 160, 31, 206, 147, 118, 155, 166, 252, 198, 189, 174, 177, 255]\ntaste_list = [j for i, j in enumerate(taste_list) if i not in set(remove_list)]\n","e0700536":"from tqdm import tqdm\n\ntaste_dict = {\n    taste:\n    [row.points\n     for _, row in  wine_df[[\"modified_description\", \"points\"]].iterrows()\n     if taste in \" \".join(row.modified_description)\n    ]\n    for taste in tqdm(taste_list)\n}","25cbe2c9":"taste_dict_mean = {k: np.mean(v) for k, v in taste_dict.items()}\ntaste_dict_median = {k: np.median(v) for k, v in taste_dict.items()}","29355c59":"a = pd.DataFrame.from_dict(taste_dict_mean, orient=\"index\").rename(columns={0:\"mean\"}).sort_values(\"mean\", ascending=False).head(30)\nb = pd.DataFrame.from_dict(taste_dict_median, orient=\"index\").rename(columns={0:\"median\"}).sort_values(\"median\", ascending=False)\npd.concat([a, b], axis=1).head(30)","f5616a48":"a = pd.DataFrame.from_dict(taste_dict_mean, orient=\"index\").rename(columns={0:\"mean\"}).sort_values(\"mean\", ascending=True).head(30)\nb = pd.DataFrame.from_dict(taste_dict_median, orient=\"index\").rename(columns={0:\"median\"}).sort_values(\"median\", ascending=True)\npd.concat([a, b], axis=1).head(30)","4581460f":"import plotly.express as px\npx.box(wine_df.points, orientation=\"h\", title=\"Points distribution\")","1eabb697":"threshold = wine_df.points.quantile(0.75)\ndf_bis = wine_df[wine_df.points > threshold]\ntaste_frequency_dict = {\n    taste:\n    sum([1 \n        for row in df_bis.modified_description\n        if taste in row])\n    for taste in taste_dict\n}\npx.scatter(pd.DataFrame.from_dict(taste_frequency_dict, orient=\"index\").sort_values(0, ascending=True), title=\"Taste occurence for top wines (above third quantile)\")","d103a5d9":"## 2. Analyse the link between tastes and points\nWe can extract the points from the dataset according to tastes.\n\nLet's store all the points values to a dict with taste as key, but it's 250 * 130k so it's going to take a while","e1a7f8bd":"## 1. Extract tastes from descriptions\n","1da27fdc":"Some taste are quite the same, for example \"ripe\" & \"ripe fruity\", \"ripe berry\" etc. \nWe should remove them","1506e0c5":"# What makes a great wine ?\nI'm french and it's funny to see how wine is important in our culture. But unfortunately, I'm not very good at telling the difference between a good or a bad wine. And while looking at the bottle tag in the supermarket, i'm a bit confused : which wine should I buy between the balckberry or the raspberry one ? A complex or a simple one ? \n\nTo answer, we will only use wine description and points. \n## 1. Extract tastes from descriptions\n## 2. Analyse the link between tastes and points ","0c75a91b":"### Good taste (by mean a median)","4baeb400":"85 points (out of 100) still looks good, let's see points distribution:","578a410a":"## What if we consider the top wines ? (above the third quartile)\nIf we consider the taste frequency used to describe top tier wines ?\n\nHave fun playing with plotly","a0c0bc66":"## Next steps: \n1. Consider tastes combination and not taste alone\n2. Differentiate the tastes between white and red wines\n3. Check if some tastes are more expensive than others ","133ac6fd":"### Bad taste (by mean and median)","ffa008d5":"A first step is to identify important words in these texts, problem is that tastes are not always represented by a single word, it can be two or three e.g. \"black fruit\" and \"red fruit\" are different, it's important to keep this as a single taste. \n\nFirst, we remove the stop words to clean the text (some frequent words have been removed too)\nThen we split the description by comma (we considere these new texts as tastes) ","b6eede20":"Now, we use the frequency to identify what describes a taste and what does not. \n\nThere's a lot of taste but for the sake of visibility, we'll keep only the first 300. (It is not perfect, words such as \"good\", \"best\" have been removed but other still remains, but i'm lazy and it is already late)\n\n>Bonus: people find that some wines taste tar ?","1d79d933":"We now have a complete taste list !"}}