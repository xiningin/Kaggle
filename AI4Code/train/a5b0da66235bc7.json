{"cell_type":{"8ed631ca":"code","93c42e30":"code","50541311":"code","741e3ed6":"code","cce759ae":"code","3691ad64":"code","9a8d347d":"code","aa6056ed":"code","1ebd5c6f":"code","c75d840e":"code","1343eed2":"code","8c7af2bf":"code","cee94041":"code","25a23b35":"code","0a21202a":"code","3c81770c":"code","8162405a":"code","87e4071e":"code","81746b99":"code","b166cac4":"code","5ac36f8e":"code","0a3212a4":"code","86e5497d":"markdown","fcdd6bc2":"markdown","e2c0d160":"markdown","ce79fe68":"markdown","f6664681":"markdown"},"source":{"8ed631ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud,STOPWORDS\n%matplotlib inline\nimport json\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense,Bidirectional,LSTM,Embedding\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras import Model,Input\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93c42e30":"dir1 = \"..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset.json\"\ndir2 = \"..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset_v2.json\"","50541311":"sens = []\nlabels = []\nfor line in open(dir1, 'r'):\n    temp = []\n    temp.append(json.loads(line))\n    sens.append(temp[0][\"headline\"])\n    labels.append(temp[0][\"is_sarcastic\"])\nfor line in open(dir2, 'r'):\n    temp = []\n    temp.append(json.loads(line))\n    sens.append(temp[0][\"headline\"])\n    labels.append(temp[0][\"is_sarcastic\"])\nprint(\"sens Length:\",len(sens),\"\\nlabels Length:\",len(labels))","741e3ed6":"df = pd.DataFrame(columns = [\"sens\",\"labels\"])\ndf[\"sens\"] = np.array(sens)\ndf[\"labels\"] = np.array(labels)","cce759ae":"df.head()","3691ad64":"df.isnull().sum()","9a8d347d":"df.shape","aa6056ed":"sns.countplot(x = \"labels\",data = df)","1ebd5c6f":"ones = df.where(df[\"labels\"] == 1).dropna().reset_index().drop([\"index\"],axis = 1)\nzeros = df.where(df[\"labels\"] == 0).dropna().reset_index().drop([\"index\"],axis = 1)","c75d840e":"def plot_wordcloud(df):\n    words = '' \n    stopwords = set(STOPWORDS) \n\n    # iterate through the csv file \n    for val in df.values: \n\n        # typecaste each val to string \n        val = str(val) \n\n        # split the value \n        tokens = val.split() \n\n        # Converts each token into lowercase \n        for i in range(len(tokens)): \n            tokens[i] = tokens[i].lower() \n\n        words += \" \".join(tokens)+\" \"\n\n    wordcloud = WordCloud(width = 800, height = 800, \n                    background_color ='white', \n                    stopwords = stopwords, \n                    min_font_size = 10).generate(words) \n\n    # plot the WordCloud image                        \n    plt.figure(figsize = (20,16), facecolor = None) \n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n\n    plt.show()","1343eed2":"plot_wordcloud(ones[\"sens\"])","8c7af2bf":"plot_wordcloud(zeros[\"sens\"])","cee94041":"X = df.iloc[:,0].values\ny = df.iloc[:,1].values","25a23b35":"# Creating Tokeniser\ntkn = tf.keras.preprocessing.text.Tokenizer(\n    num_words=None,\n    filters='!\"#$%&()*+,-.\/:;<=>?@[\\\\]^_`{|}~\\t\\n',\n    lower=True,\n    split=' ',\n    oov_token=\"{OOV}\"\n)\n# Tokenising Train Data\ntkn.fit_on_texts(X)\nX = tkn.texts_to_sequences(X)\nX = pad_sequences(X,maxlen=100)","0a21202a":"# Length Of Word Index\nlen(tkn.word_index)","3c81770c":"x_train = X[:40000]\ny_train = y[:40000]\nx_val = X[40000:]\ny_val = y[40000:]\n\nx_test = x_val[:5000]\ny_test = y_val[:5000]\n\nx_val = x_val[5000:]\ny_val = y_val[5000:]","8162405a":"print([i.shape for i in [x_train,y_train,x_val,y_val,x_test,y_test]])","87e4071e":"# Input for variable-length sequences of integers\ninputs = Input(shape=(None,), dtype=\"int32\")\n\n# Embed each integer in a 100-dimensional vector\nx = Embedding(30886,100)(inputs)\n\n# Add bidirectional LSTMs\nx = Bidirectional(LSTM(30,return_sequences=True))(x)\nx = Bidirectional(LSTM(30,return_sequences=True))(x)\nx = Bidirectional(LSTM(20,return_sequences=True))(x)\nx = Bidirectional(LSTM(20,return_sequences=True))(x)\nx = Bidirectional(LSTM(10,return_sequences=True))(x)\nx = Bidirectional(LSTM(10))(x)\n\n# Add a classifier\noutputs = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs, outputs)\nmodel.summary()","81746b99":"model.compile(\"adam\", \"binary_crossentropy\", metrics=[\"accuracy\"])\nhistory = model.fit(x_train, y_train, batch_size=32, epochs=2, validation_data=(x_val, y_val))","b166cac4":"# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","5ac36f8e":"model.evaluate(x_test,y_test)","0a3212a4":"def get_results(phrase):\n    phrase = tkn.texts_to_sequences(phrase)\n    phrase = pad_sequences(phrase,maxlen=100)\n    res = model.predict([phrase])\n    if res[0] < 0.7:\n        print(\"It is not sarcastic \" + str(100 - res[0]*100) + \"%\")\n    else:\n        print(\"It is sarcastic \" + str(res[0]*100) + \"%\")","86e5497d":"# Prediction Function","fcdd6bc2":"### Word clouds are an easy to use and inexpensive option for visualizing text data. One of the challenges of interpreting word clouds is that the display emphasizes frequency of words, not necessarily their importance.","e2c0d160":"# Evaluation","ce79fe68":"# Model","f6664681":"# EDA"}}