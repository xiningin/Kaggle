{"cell_type":{"46abc142":"code","5ad26aa2":"code","5bf4e5bd":"code","84ca2589":"code","a4bf08fd":"code","77370d5d":"code","e49195a4":"code","95fa95be":"code","d08d4bfa":"code","e539c4c2":"code","374a0797":"code","1e700ee0":"code","2bb296eb":"code","e7e53309":"code","95a06d8b":"code","b6c366c2":"code","f3814c42":"code","165e7912":"code","72800241":"code","726e82b3":"code","7f4d0bdd":"code","b974a957":"code","1b43ddde":"code","d5a01dee":"code","1c857408":"code","e821de96":"code","9a1321e0":"code","684caa46":"code","05229402":"code","52c0f503":"code","512587c5":"code","711b2fcb":"code","d9e2066a":"code","0dea6152":"code","474701c4":"code","731213d7":"code","6b769498":"code","f5807705":"code","77dfb04b":"code","43da69fe":"code","4302b170":"code","adead3ff":"code","e54537e5":"code","b7c99f90":"code","16c2432b":"code","749323b8":"code","b29e7bb7":"code","83a4a3df":"code","fb21eaa6":"code","e76b9124":"code","f98da5fb":"code","67e0adb5":"code","a5b34ad3":"code","ed4f4976":"code","8f9506ed":"code","6ae6e87f":"code","05b844eb":"code","fdee0c0f":"code","f899f361":"code","f903bebd":"code","13a92958":"code","2ed8c701":"code","bfc107f9":"code","c43a690d":"code","5d8b2729":"code","6610aa66":"code","d4ee49d4":"markdown","104fb7bd":"markdown","3ac64a3c":"markdown","3c5d2c54":"markdown","49732aaa":"markdown","9d31428c":"markdown","8f1accb2":"markdown","9ed0226b":"markdown"},"source":{"46abc142":"# import\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')","5ad26aa2":"# \u30ab\u30ec\u30f3\u30c0\u30fc\u30c7\u30fc\u30bf\ndf_cal = pd.read_csv('..\/input\/m5-forecasting-accuracy\/calendar.csv')\n# \u88fd\u54c1\u304a\u3088\u3073\u5e97\u8217\u3054\u3068\u306e\u904e\u53bb\u306e\u6bce\u65e5\u306e\u8ca9\u58f2\u53f0\u6570\u30c7\u30fc\u30bf[d_1 - d_1941]\uff08\u30d1\u30d6\u30ea\u30c3\u30af\u30ea\u30fc\u30c0\u30fc\u30dc\u30fc\u30c9\u306b\u4f7f\u7528\u3055\u308c\u308b\u30e9\u30d9\u30eb\uff09\ndf_eval = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv')\n# \u88fd\u54c1\u304a\u3088\u3073\u5e97\u8217\u3054\u3068\u306e\u904e\u53bb\u306e\u6bce\u65e5\u306e\u8ca9\u58f2\u53f0\u6570\u30c7\u30fc\u30bf[d_1 - d_1913]\n# df_val = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\n# \u5e97\u8217\u304a\u3088\u3073\u65e5\u4ed8\u3054\u3068\u306b\u8ca9\u58f2\u3055\u308c\u305f\u88fd\u54c1\u306e\u4fa1\u683c\u306b\u95a2\u3059\u308b\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\ndf_price = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sell_prices.csv')\n# \u30b5\u30f3\u30d7\u30eb\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\ndf_sample_output = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sample_submission.csv')","5bf4e5bd":"df_sample_output.head()","84ca2589":"df_sample_output.describe().T","a4bf08fd":"df_cal.head()","77370d5d":"# \u5b97\u6559\u5225\u3067\u795d\u65e5\u306a\u3069\u304c\u7570\u306a\u308b\u305f\u3081\u3001\u304d\u308c\u3044\u306a\u7279\u5fb4\u91cf\u306b\u306f\u306a\u3089\u306a\u305d\u3046\u2192\u5f8c\u307b\u3069\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0?\nholiday = ['NewYear', 'OrthodoxChristmas', 'MartinLutherKingDay', 'SuperBowl', 'PresidentsDay', 'StPatricksDay', 'Easter', 'Cinco De Mayo', 'IndependenceDay', 'EidAlAdha', 'Thanksgiving', 'Christmas']\nweekend = ['Saturday', 'Sunday']\n\ndef is_holiday(x):\n    if x in holiday:\n        return 1\n    else:\n        return 0\n\ndef is_weekend(x):\n    if x in weekend:\n        return 1\n    else:\n        return 0","e49195a4":"df_cal['is_holiday_1'] = df_cal['event_name_1'].apply(is_holiday)\ndf_cal['is_holiday_2'] = df_cal['event_name_2'].apply(is_holiday)\ndf_cal['is_holiday'] = df_cal[['is_holiday_1','is_holiday_2']].max(axis=1)\ndf_cal['is_weekend'] = df_cal['weekday'].apply(is_weekend)","95fa95be":"df_cal.head()","d08d4bfa":"df_cal = df_cal.drop(['weekday', 'wday', 'month', 'year', 'event_name_1', 'event_type_1', 'event_name_2', 'event_type_2'], axis='columns')","e539c4c2":"df_price.head()","374a0797":"df_price.describe()","1e700ee0":"df_eval.head()","2bb296eb":"del_col = []\nfor x in range(1851):\n    del_col.append('d_' + str(x+1))","e7e53309":"df_eval = df_eval.drop(del_col, axis='columns')","95a06d8b":"df_eval = df_eval.melt(['id','item_id','dept_id','cat_id','store_id','state_id'], var_name='d', value_name='qty')\nprint(df_eval.shape)\ndf_eval.head()","b6c366c2":"df_eval = pd.merge(df_eval, df_cal, how='left', on='d')\ndf_eval.head()","f3814c42":"df_eval = pd.merge(df_eval, df_price, how='left', on=['item_id', 'wm_yr_wk', 'store_id'])\ndf_eval.head()","165e7912":"df_eval.shape","72800241":"df_eval.tail()","726e82b3":"df_eval.head()","7f4d0bdd":"df_eval.tail()","b974a957":"df_eval_test = df_eval.query('d == \"d_1852\"')","1b43ddde":"df_eval_test.head()","d5a01dee":"df_eval_test = df_eval_test[['id', 'store_id', 'item_id', 'dept_id', 'cat_id', 'state_id', 'd', 'qty', 'sell_price']]","1c857408":"df_eval_test.head()","e821de96":"df_eval_test.shape","9a1321e0":"df_eval_test['qty'] = df_eval_test['d'].apply(lambda x: int(x.replace(x, '0')))","684caa46":"tmp_df = df_eval_test","05229402":"for x in range(28):\n    df_eval_test = df_eval_test.append(tmp_df)","52c0f503":"df_eval_test = df_eval_test.reset_index(drop=True)","512587c5":"df_eval_test.head()","711b2fcb":"df_eval_test.tail()","d9e2066a":"# \u203b\u3053\u3053\u306b\u65e5\u4ed8\u3092\u76f4\u3059\u51e6\u7406\u3092\u5165\u308c\u308b\u3001\u4eca\u306f\u3059\u3079\u3066\u540c\u3058\u203b\nlst_d = []\ni = 0\nlst_index = df_eval_test.index\nfor x in lst_index:\n    lst_d.append('d_' + str(((lst_index[i]) \/\/ 30490) + 1942))\n    i = i + 1\n\nlst_d","0dea6152":"df_eval_test['d'] = lst_d","474701c4":"df_eval_test.head()","731213d7":"df_eval_test.tail()","6b769498":"df_eval_test.shape","f5807705":"df_eval_test = pd.merge(df_eval_test, df_cal, how='left', on='d')","77dfb04b":"df_eval_test = pd.merge(df_eval_test, df_price, how='left', on=['item_id', 'wm_yr_wk', 'store_id'])","43da69fe":"df_eval_test.head()","4302b170":"import gc\ndel tmp_df\ngc.collect()","adead3ff":"df_eval = pd.get_dummies(data=df_eval, columns=['dept_id', 'cat_id', 'store_id', 'state_id'])\ndf_eval_test = pd.get_dummies(data=df_eval_test, columns=['dept_id', 'cat_id', 'store_id', 'state_id'])","e54537e5":"df_eval.info()","b7c99f90":"df_eval_test.info()","16c2432b":"df_eval_test.head(10).T","749323b8":"df_eval_test = df_eval_test.drop(['sell_price_x', 'snap_CA', 'snap_TX', 'snap_WI'], axis='columns')\ndf_eval_test = df_eval_test.rename(columns={'sell_price_y': 'sell_price'})\ndf_eval = df_eval.drop(['snap_CA', 'snap_TX', 'snap_WI'], axis='columns')                                   ","b29e7bb7":"df_eval.info()","83a4a3df":"df_eval_test.info()","fb21eaa6":"from sklearn.model_selection import train_test_split\n\n# \u76ee\u7684\u5909\u6570\ntarget_col = 'qty'\n\n# \u9664\u5916\u3059\u308b\u8aac\u660e\u5909\u6570\nexclude_cols = ['id', 'item_id', 'd', 'date', 'wm_yr_wk']\n\n# \u8aac\u660e\u5909\u6570\nfeature_cols = [col for col in df_eval.columns if col not in exclude_cols]\n\n# ndarray\u306b\u5909\u63db\ny = np.array(df_eval[target_col])\nX = np.array(df_eval[feature_cols])\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\n# ramdom_state \u56fa\u5b9a\u3067\u518d\u73fe\u6027\u306e\u9ad8\u3044\u7d50\u679c\u306b\u3059\u308b\nX_train, X_test, y_train, y_test = \\\n train_test_split(X, y, test_size=0.3, random_state=1234)\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u66f4\u306b\u5206\u5272\n# X_train1, X_train2, y_train1, y_train2 = \\\n#  train_test_split(X_train, y_train, test_size=0.3, random_state=1234)\n\n","e76b9124":"import lightgbm as lgb\n\n#LGB\u7528\u306e\u30c7\u30fc\u30bf\u306b\u5909\u5f62\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_eval = lgb.Dataset(X_test, y_test)\n\nparams = {\n    'boosting_type': 'gbdt',\n    'metric': 'rmse',\n    'objective': 'regression',\n    'n_jobs': -1,\n    'seed': 236,\n    'learning_rate': 0.01,\n    'bagging_fraction': 0.75,\n    'bagging_freq': 10, \n    'colsample_bytree': 0.75}\n\nmodel = lgb.train(params, lgb_train, num_boost_round=2500, early_stopping_rounds=50, valid_sets = [lgb_train, lgb_eval], verbose_eval=100)","f98da5fb":"pred = model.predict(df_eval_test[feature_cols])","67e0adb5":"pred","a5b34ad3":"len(pred)","ed4f4976":"df_eval_test['pred_qty'] = pred","8f9506ed":"df_eval_test","6ae6e87f":"predictions = df_eval_test[['id', 'date', 'pred_qty']]\npredictions = pd.pivot(predictions, index = 'id', columns = 'date', values = 'pred_qty').reset_index()\npredictions","05b844eb":"predictions.describe()","fdee0c0f":"predictions = predictions.drop(predictions.columns[1], axis=1)\npredictions","f899f361":"predictions.columns = ['id'] + ['F' + str(i + 1) for i in range(28)]\npredictions","f903bebd":"x = 2744099 + 1 - 853720\ndf_val = df_eval[x:]","13a92958":"predictions_v = df_val[['id', 'date', 'qty']]\npredictions_v = pd.pivot(predictions_v, index = 'id', columns = 'date', values = 'qty').reset_index()\npredictions_v","2ed8c701":"predictions_v['id'] = predictions['id'].apply(lambda x: x.replace('evaluation', 'validation'))\npredictions_v.head()","bfc107f9":"predictions_v.columns = ['id'] + ['F' + str(i + 1) for i in range(28)]\npredictions_v.head()","c43a690d":"predictions_concat = pd.concat([predictions, predictions_v], axis=0)","5d8b2729":"predictions_concat","6610aa66":"predictions_concat.to_csv('submission.csv', index=False)","d4ee49d4":"## df_cal","104fb7bd":"## df_price","3ac64a3c":"## df_eval","3c5d2c54":"## join eval and cal and price","49732aaa":"## file_import","9d31428c":"## sample_output","8f1accb2":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4f5c\u6210","9ed0226b":"## library import"}}