{"cell_type":{"424f5aeb":"code","c8db1b28":"code","d2df47d1":"code","6c170e6b":"code","184c233b":"code","dbc60e83":"code","64a250c4":"code","21b0049a":"code","299f1083":"markdown","03e7c4b5":"markdown","3d340bf8":"markdown","016deeb3":"markdown","3556e883":"markdown","02568afd":"markdown","666c0970":"markdown","08e5ed9b":"markdown","ab0d6163":"markdown","22aaa887":"markdown","47d5c54b":"markdown","6a3672e5":"markdown"},"source":{"424f5aeb":"import time","c8db1b28":"def non_invasive_decorator(func): #this function simply wraps our function in the wrapper function. the wrapper function itself only contains print statements\n    def wrapper(*args, **kwargs):\n        print('\\npositional args are defined as: ', args)\n        print('the keywords args are defined as: ', kwargs, '\\n')\n        \n        #decorator utility\n        func(*args, **kwargs)\n        #decorator utility \n        \n        print('end of decorator')\n    return wrapper\n\n@non_invasive_decorator\ndef add(n, m):\n    print(n + m)","d2df47d1":"add(2,4)","6c170e6b":"def time_elapsed(func): #this function simply wraps our function in the wrapper function. the wrapper function itself only contains print statements\n    def wrapper(*args, **kwargs):\n        \n        start = time.time()\n        func(*args, **kwargs)\n        end = time.time()\n        \n        print('end of function\\ntime elapsed: ', end-start)\n        \n        \n    return wrapper\n\n@time_elapsed\ndef subtract(n, m):\n    print(n - m)","184c233b":"subtract(6,4)","dbc60e83":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn import datasets, linear_model\n\n# Load the diabetes dataset\ndiabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)\n\n# Use only one feature\ndiabetes_X = diabetes_X[:, np.newaxis, 2]\n\n# Split the data into training\/testing sets\ndiabetes_X_train = diabetes_X[:-20]\ndiabetes_X_test = diabetes_X[-20:]\n\n# Split the targets into training\/testing sets\ndiabetes_y_train = diabetes_y[:-20]\ndiabetes_y_test = diabetes_y[-20:]\n\n# Create linear regression object\nregr = linear_model.LinearRegression()\n\nX = diabetes_X_train\ny = diabetes_y_train","64a250c4":"# Train the model using the training sets\n@time_elapsed\ndef fit(X, y):\n    print(\"training model....\\n\")\n    return regr.fit(X, y)\n\nfit(X, y)","21b0049a":"# Make predictions using the testing set\ndiabetes_y_pred = regr.predict(diabetes_X_test)","299f1083":"> creating a decorator that can be added to any function without throwing an error by using args and kwargs","03e7c4b5":"> grab relevant model building components(basic linear reg example)","3d340bf8":"> here comes the magic","016deeb3":"## A Decorator for finding how long a given function takes\n### can be applied to anything, from a basic add\/subtract function to a 20 layer conv net and produce the time passed ","3556e883":"> we demonstrate the result of the decorator with a basic add function that has been wrapped with our decorator","02568afd":"# this marks the end of this brief foray into decorators. Thanks for reading, feel free to comment your previous uses of decorators so that I can read up and build my own knowledge base more=> Thanks!!","666c0970":"## time elapsed in a simple calculation ","08e5ed9b":"> import time library","ab0d6163":"## time elapsed in a training process\n\n#### to highlight how modular this is, here is literally a model training and prediction straight from the [sklearn docs](https:\/\/scikit-learn.org\/stable\/auto_examples\/linear_model\/plot_ols.html) that has been wrapped with our function","22aaa887":"## A decorator for any function","47d5c54b":"> time elapsed would increase as you increase the complexity of your training and data on which you train on","6a3672e5":"# Brief Introduction to Decorators in python\n## Some easy utility to glean from decorators demonstrated in this Notebook\n\n### source of my learning: [DigitalSreeni](https:\/\/www.youtube.com\/watch?v=ZSMRgFQRSoU&ab_channel=DigitalSreeni)"}}