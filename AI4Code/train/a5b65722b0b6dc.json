{"cell_type":{"46da481e":"code","48b7c9f3":"code","936903cb":"code","db300b6a":"markdown","32b404ae":"markdown"},"source":{"46da481e":"import numpy as np\nimport pandas as pd\nimport os\nimport json\nfrom pathlib import Path\nimport pprint\npp = pprint.PrettyPrinter(indent=4)\nfrom os.path import join as path_join\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")  #suppress all warnings\n\n#######THIS CODE IS FOR USE WITH ANOCONDA PYTHON EDITOR IN MY DIRECTORY###########\n#training_path = 'kaggle\/input\/abstraction-and-reasoning-challenge\/training\/'\n#training_tasks = os.listdir(training_path)\n#Trains = []\n#for i in range(400):\n#    task_file = str(training_path + training_tasks[i])\n#    task = json.load(open(task_file, 'r'))\n#    Trains.append(task)\n#train_tasks = Trains\n##############################################################################\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\ntraining_tasks = os.listdir(training_path)\neval_tasks = os.listdir(evaluation_path)\nT = training_tasks\nTrains = []\nfor i in range(400):\n    task_file = str(training_path \/ T[i])\n    task = json.load(open(task_file, 'r'))\n    Trains.append(task)\ndef load_data(path):\n    tasks = pd.Series()\n    for file_path in os.listdir(path):\n        task_file = path_join(path, file_path)\n        with open(task_file, 'r') as f:\n            task = json.load(f)\n        tasks[file_path[:-5]] = task\n    return tasks\ntrain_tasks = load_data('..\/input\/abstraction-and-reasoning-challenge\/training\/')\n","48b7c9f3":"\ndef get_matrix_dims(task_num):\n    amatrix_dims={'in_matrix_height': [], \n                  'in_matrix_width': [], \n                  'out_matrix_height': [], \n                  'out_matrix_width': [],\n                  'test_in_height': [], \n                  'test_in_width': [],\n                  'test_out_height': [], \n                  'test_out_width': []}\n    # iterate through training examples \n    num_examples = len(train_tasks[task_num]['train'])\n    ain_height = []\n    ain_width = []\n    aout_height = []\n    aout_width = []\n    for i in range(num_examples):\n        input_image = np.array(train_tasks[task_num]['train'][i]['input'])\n        output_image = np.array(train_tasks[task_num]['train'][i]['output'])\n        in_matrix_height = input_image.shape[0]\n        in_matrix_width = input_image.shape[1]\n        out_matrix_height = output_image.shape[0]\n        out_matrix_width = output_image.shape[1] \n        ain_height.append(in_matrix_height)\n        ain_width.append(in_matrix_width)\n        aout_height.append(out_matrix_height)\n        aout_width.append(out_matrix_width)\n    amatrix_dims['in_matrix_height'].append(ain_height)\n    amatrix_dims['in_matrix_width'].append(ain_width)\n    amatrix_dims['out_matrix_height'].append(aout_height)\n    amatrix_dims['out_matrix_width'].append(aout_width)\n    num_examples = len(train_tasks[task_num]['test'])\n    ain_height = []\n    ain_width = []\n    aout_height = []\n    aout_width = []\n    for i in range(num_examples):\n        input_image = np.array(train_tasks[task_num]['test'][i]['input'])\n        output_image = np.array(train_tasks[task_num]['test'][i]['output'])\n        in_matrix_height = input_image.shape[0]\n        in_matrix_width = input_image.shape[1]\n        out_matrix_height = output_image.shape[0]\n        out_matrix_width = output_image.shape[1] \n        ain_height.append(in_matrix_height)\n        ain_width.append(in_matrix_width)\n        aout_height.append(out_matrix_height)\n        aout_width.append(out_matrix_width)\n    amatrix_dims['test_in_height'].append(ain_height)\n    amatrix_dims['test_in_width'].append(ain_width)\n    amatrix_dims['test_out_height'].append(aout_height)\n    amatrix_dims['test_out_width'].append(aout_width)\n    return amatrix_dims\n\ndef get_matrix_rule(amatrix_dims):\n    funcs_match_not_unknown = False\n    multiplier_height = []\n    multiplier_width = []\n    addition_height = []\n    addition_width = []\n    answer_height = 'unknown' # if no rule found then uses size of 30\n    height_param = 30\n    answer_width = 'unknown'\n    width_param = 30\n    num_examples = len(amatrix_dims['in_matrix_width'][0])\n    for i in range(num_examples):\n        in_height = amatrix_dims['in_matrix_height'][0][i]\n        out_height = amatrix_dims['out_matrix_height'][0][i]\n        in_width = amatrix_dims['in_matrix_width'][0][i]\n        out_width = amatrix_dims['out_matrix_width'][0][i]\n        mult_height = out_height \/ in_height\n        mult_width = out_width \/ in_width\n        multiplier_height.append(mult_height)\n        multiplier_width.append(mult_width)\n        add_height = out_height - in_height\n        addition_height.append(add_height)\n        add_width = out_width - in_width\n        addition_width.append(add_width)\n    mult_height_unique = np.unique(multiplier_height)\n    mult_width_unique = np.unique(multiplier_width)\n    if len(mult_height_unique) == 1:\n        answer_height = 'multiply by'\n        height_param = mult_height_unique[0]\n    if len(mult_width_unique) == 1:\n        answer_width = 'multiply by'\n        width_param = mult_width_unique[0]\n    height_unique = np.unique(amatrix_dims['out_matrix_height'][0])\n    width_unique = np.unique(amatrix_dims['out_matrix_width'][0])\n    if answer_height != 'unknown' and answer_width == answer_height:\n        funcs_match_not_unknown = True\n    if len(height_unique) == 1 and funcs_match_not_unknown == False:\n        answer_height = 'static'\n        height_param = int(height_unique[0])\n    if len(width_unique) == 1 and funcs_match_not_unknown == False:\n        answer_width = 'static'\n        width_param = int(width_unique[0])\n    add_height_unique = np.unique(addition_height)\n    add_width_unique = np.unique(addition_width)\n    if answer_height != 'unknown' and answer_width == answer_height:\n        funcs_match_not_unknown = True\n    if len(add_height_unique) == 1 and funcs_match_not_unknown == False:\n        answer_height = 'add this much'\n        height_param = add_height_unique[0]\n    if len(add_width_unique) == 1 and funcs_match_not_unknown == False:\n        answer_width = 'add this much'\n        width_param = add_width_unique[0]\n    return answer_height, height_param, answer_width, width_param\n\ndef get_test_matrix_dims(amatrix_dims, matrix_rule):\n    test_in_height = amatrix_dims['test_in_height'][0][0]\n    test_in_width = amatrix_dims['test_in_width'][0][0]\n    if matrix_rule[0] == 'static':\n        test_out_height = matrix_rule[1]\n    elif matrix_rule[0] == 'multiply by':\n        test_out_height = test_in_height*matrix_rule[1]\n    elif matrix_rule[0] == 'add this much':\n        test_out_height = test_in_height + matrix_rule[1]\n    else:\n        test_out_height = 30\n    if matrix_rule[2] == 'static':\n        test_out_width = matrix_rule[3]\n    elif matrix_rule[2] == 'multiply by':\n        test_out_width = test_in_width*matrix_rule[3]\n    elif matrix_rule[2] == 'add this much':\n        test_out_width = test_in_width + matrix_rule[3]\n    else:\n        test_out_width = 30\n    test_out_height = int(test_out_height)\n    test_out_width = int(test_out_width)\n    return test_out_height, test_out_width\n\n#%% [to test multiple tasks]\n\n","936903cb":"amatrix_successfully_predicted =[]\namatrix_unsuccessfully_predicted = []\n##uncomment the two lines below and comment the third line to test for only certain tasks\n#task_num = [0, 1, 7, 263]\n#for i in task_num:     \nfor i in range(400):\n    try:\n        height_success = False\n        width_success = False\n        task_num=i\n        task = train_tasks[task_num] \n        amatrix_dims = get_matrix_dims(task_num)\n        matrix_rule = get_matrix_rule(amatrix_dims)\n        test_matrix_dims = get_test_matrix_dims(amatrix_dims, matrix_rule)\n        if test_matrix_dims[0] == amatrix_dims['test_out_height'][0][0]:\n            height_success = True\n        if test_matrix_dims[1] == amatrix_dims['test_out_width'][0][0]:\n            width_success = True\n        a=[i,'guess', test_matrix_dims, 'actual', amatrix_dims['test_out_height'][0][0], amatrix_dims['test_out_width'][0][0]]\n        if height_success == True and width_success == True:\n            amatrix_successfully_predicted.append(i)\n        else:\n            amatrix_unsuccessfully_predicted.append(a)\n    except KeyboardInterrupt:\n        print('matrix dims failed for task:', task_num)\nprint('predicted:', len(amatrix_successfully_predicted),'\/ 400 matrix sizes.')\nprint('failed:   ', len(amatrix_unsuccessfully_predicted),'\/ 400  matrix sizes.')\nprint('')\npp.pprint('failed matrixes are:')\npp.pprint(amatrix_unsuccessfully_predicted)","db300b6a":"\n## Below is how to run the program in a for loop and estimate the test pair's output matrix dimensions for all 400 tasks without looking at the answer, then checking the answer against the predicted dimensions and making a list of successful and failed predictions. The accuracy is 346 out of 400.","32b404ae":"* # The following functions retrieve the matrix dimensions, infer how to calculate the output dimensions, then applies that rule to the test input matrix dimensions.\n* # The accuracy is 346 \/ 400 (86%) 'test' matrix output dimensions successfully predicted based on training pairs.\n* # The types of inferences it makes are:\n    * ###     'multiply or divide by' (such as multiply the height of input matrix by 2), \n    * ###     'add or subtract', \n    * ###     and 'static' (such as make height equal to 9 regardless of input matrix size).\n* ## Stay tuned for the release of more functions I have made for object similarity estimation, transformations, attribute comparisons, etc. in the coming days."}}