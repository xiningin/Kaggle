{"cell_type":{"071f9e88":"code","d31385e4":"code","bf45b598":"code","a956efdc":"code","86644e9e":"code","04433d94":"code","177ba758":"code","ea38823e":"code","8c452743":"code","08516019":"code","343a3dc6":"code","b9f29704":"code","86a86167":"code","4c40da6b":"code","0896ab01":"code","88ccbc32":"code","be090456":"code","4c1a2cb8":"code","d2bfd661":"code","bc396289":"code","527142e2":"code","1fe85266":"code","8517306c":"code","340f6200":"code","989f37ed":"code","561327d8":"code","a34e3962":"code","9b54ca2d":"code","a290df20":"code","4e3613e8":"code","de166f11":"code","95ebfe4c":"code","7d875da8":"code","a1fe0845":"code","b1510ae5":"code","ce20ad4b":"code","ace7c38c":"code","cabfff81":"code","0781758b":"code","a04d8e3e":"code","c0b38446":"code","da1dbcad":"code","863fe78d":"code","2180594c":"code","07cd331b":"code","f45897e5":"code","016a1e57":"code","8315b5ea":"code","26502b6c":"code","7b824869":"code","753f8f6f":"code","ed8ffa92":"code","ab59b37b":"code","de3c519d":"code","55deba38":"code","61113a68":"code","8650b9a5":"code","b93921a7":"code","41048ef5":"markdown","77daa404":"markdown","9d6dec47":"markdown","cbda58d3":"markdown","3a9d81ea":"markdown","9884e5ad":"markdown","098f9ac7":"markdown","88e0089f":"markdown","301d30ae":"markdown","a6d2a5b4":"markdown","9457b0ef":"markdown","10de6736":"markdown","4203e23f":"markdown","b9ba1dd8":"markdown","3cba07be":"markdown","c9186d9e":"markdown","e645838c":"markdown","90077243":"markdown","63e500ba":"markdown","58884dcd":"markdown","8f4615c9":"markdown","299f4526":"markdown","599f266c":"markdown","8444a1c2":"markdown","0482eb68":"markdown","9152da3d":"markdown","2ac1c007":"markdown","c93abe22":"markdown","de5d5f0a":"markdown","2a401b62":"markdown","5ef580f5":"markdown","afb3dabd":"markdown"},"source":{"071f9e88":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d31385e4":"#importing libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\n\n#loading the data\ndf = pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\n\n#view the first five rows of the dataset\ndf.head()","bf45b598":"#number of rows and columns - (rows, columns)\ndf.shape","a956efdc":"#visualizing the columns\ndf.columns","86644e9e":"#informations about the dataset (type of each column, if there're null values)\ndf.info()","04433d94":"#basic description about the dataset (only for numeric columns)\ndf.describe()","177ba758":"#check median of math, reading and writing score\ndf.median()","ea38823e":"#checking if there're NaN values\ndf.isnull().sum()","8c452743":"#view the first five rows of the dataset\ndf.head()","08516019":"#creating a new column: mean of the three tests\ndf[\"mean score\"] = ((df[\"math score\"] + df[\"reading score\"] + df[\"writing score\"]) \/ 3).round()","343a3dc6":"#checking the new columns\ndf.head()","b9f29704":"#categorical columns\ncategorical_columns = [\"gender\",\"race\/ethnicity\",\"parental level of education\",\"lunch\",\"test preparation course\"]","86a86167":"#count how many values there're for each category \nfor i in categorical_columns:\n    plt.figure(figsize=(10,6))\n    sns.countplot(x=i, palette=\"rocket\", data=df)","4c40da6b":"#numerical columns\nnumerical_columns = [\"math score\", \"reading score\", \"writing score\", \"mean score\"]","0896ab01":"#viewing the distribution for each numerical column\nfor i in numerical_columns:\n    plt.figure(figsize=(12,10));\n    sns.distplot(df[i])","88ccbc32":"#group by gender and get the mean of each test for male and female\ndf1 = df.groupby([\"gender\"])[[\"math score\", \"reading score\", \"writing score\", \"mean score\"]].mean()\ndf1","be090456":"#reseting the index of df1, now \"gender\" is a column\ndf1 = df1.reset_index()\ndf1","4c1a2cb8":"#ploting the mean for each test\nplt.figure(figsize=(14,8))\nplt.subplot(1, 3, 1)\nsns.barplot(x=df1[\"gender\"], y=df1[\"math score\"], palette=\"rocket\")\nplt.subplot(1, 3, 2)\nsns.barplot(x=df1[\"gender\"], y=df1[\"reading score\"], palette=\"rocket\")\nplt.subplot(1, 3, 3)\nsns.barplot(x=df1[\"gender\"], y=df1[\"writing score\"], palette=\"rocket\");","d2bfd661":"#in general\nplt.figure(figsize=(12,8))\nsns.barplot(x=df1[\"gender\"], y=df1[\"mean score\"], palette=\"rocket\");","bc396289":"#create a scatter plot to compare math score and reading score, for male and female\nplt.figure(figsize=(12,6))\nplt.title(\"Reading score x Math score\")\nsns.scatterplot(x=df[\"math score\"], y=df[\"reading score\"], hue=df[\"gender\"], palette=\"rocket\");","527142e2":"df.head()","1fe85266":"#group by parental level of education and see the mean for each test\ndf2 = df.groupby([\"parental level of education\"])[[\"math score\", \"reading score\", \"writing score\", \"mean score\"]].mean()\ndf2","8517306c":"#reseting the index of df2, now \"parental level of education\" is a column\ndf2 = df2.reset_index()\ndf2","340f6200":"#plotting the scores by parental level of education\nfor i in [\"math score\", \"reading score\", \"writing score\"]:\n    plt.figure(figsize=(12,8))\n    sns.barplot(x=df2[\"parental level of education\"], y=df2[i], palette=\"rocket\", ci=False)","989f37ed":"#in general\nplt.figure(figsize=(12,8))\nplt.title(\"Parental level education x Mean score of students\")\nsns.barplot(x=df2[\"parental level of education\"], y=df2[\"mean score\"], palette=\"rocket\", ci=False);","561327d8":"df.head()","a34e3962":"#seeing unique values in that column\ndf[\"test preparation course\"].unique()","9b54ca2d":"#group by test preparation course and see the mean score for each category\ndf3 = df.groupby([\"test preparation course\"])[[\"math score\", \"reading score\", \"writing score\", \"mean score\"]].mean()\ndf3","a290df20":"#reseting the index, now let's see\ndf3 = df3.reset_index()","4e3613e8":"#visualizing this dataframe\nplt.figure(figsize=(14,8))\nplt.subplot(1, 3, 1)\nsns.barplot(x=df3[\"test preparation course\"], y=df3[\"math score\"], palette=\"mako\")\nplt.subplot(1, 3, 2)\nsns.barplot(x=df3[\"test preparation course\"], y=df3[\"reading score\"], palette=\"mako\")\nplt.subplot(1, 3, 3)\nsns.barplot(x=df3[\"test preparation course\"], y=df3[\"writing score\"], palette=\"mako\");","de166f11":"#in general\nplt.figure(figsize=(12,8))\nsns.barplot(x=df3[\"test preparation course\"], y=df3[\"mean score\"], palette=\"mako\");","95ebfe4c":"df.head()","7d875da8":"#group by lunch and see the mean for each test\ndf4 = df.groupby([\"lunch\"])[[\"math score\", \"reading score\", \"writing score\", \"mean score\"]].mean()\ndf4","a1fe0845":"#reseting index, now \"lunch\" is a column\ndf4 = df4.reset_index()","b1510ae5":"#visualizing this dataframe\nplt.figure(figsize=(14,8))\nplt.subplot(1, 3, 1)\nsns.barplot(x=df4[\"lunch\"], y=df4[\"math score\"], palette=\"mako\")\nplt.subplot(1, 3, 2)\nsns.barplot(x=df4[\"lunch\"], y=df4[\"reading score\"], palette=\"mako\")\nplt.subplot(1, 3, 3)\nsns.barplot(x=df4[\"lunch\"], y=df4[\"writing score\"], palette=\"mako\");","ce20ad4b":"#in general\nplt.figure(figsize=(12,8))\nsns.barplot(x=df4[\"lunch\"], y=df4[\"mean score\"], palette=\"mako\");","ace7c38c":"plt.figure(figsize=(12,6))\nplt.title(\"Reading score x Writing score\")\nsns.scatterplot(x=df[\"reading score\"], y=df[\"writing score\"], hue=df[\"gender\"], palette=\"rocket\");","cabfff81":"df.head()","0781758b":"df5 = df.groupby([\"race\/ethnicity\"])[[\"math score\", \"reading score\", \"writing score\", \"mean score\"]].mean()\ndf5","a04d8e3e":"#reseting the index, now \"race\/ethnicity\" is a column\ndf5 = df5.reset_index()","c0b38446":"#visualizing this dataframe\nfor i in [\"math score\", \"reading score\", \"writing score\"]:\n    plt.figure(figsize=(12,8))\n    sns.barplot(x=df5[\"race\/ethnicity\"], y=df5[i], palette=\"viridis\", ci=False)","da1dbcad":"#in general\nplt.figure(figsize=(12,8))\nsns.barplot(x=df5[\"race\/ethnicity\"], y=df5[\"mean score\"], palette=\"viridis\", ci=False);","863fe78d":"#correlation between the scores\ncorr_matrix = df.corr()\ncorr_matrix","2180594c":"#visualizing corr_matrix\nplt.figure(figsize=(12,8))\nsns.heatmap(corr_matrix, annot=True);","07cd331b":"#seeing the columns, we want the categorical ones\ndf.columns","f45897e5":"X = df.drop(\"mean score\", axis=1)\ny = df[\"mean score\"]","016a1e57":"# categorical boolean mask\ncategorical_feature_mask = X.dtypes==object\n\n# filter categorical columns using mask and turn it into a list\ncategorical_cols = X.columns[categorical_feature_mask].tolist()\n\ncategorical_cols","8315b5ea":"#import labelencoder\nfrom sklearn.preprocessing import LabelEncoder\n\n#instantiate labelencoder object\nle = LabelEncoder()\n\n# apply le on categorical feature columns\nX[categorical_cols] = X[categorical_cols].apply(lambda col: le.fit_transform(col))\nX[categorical_cols].head(10)","26502b6c":"le.classes_","7b824869":"#checking X\nX.head()","753f8f6f":"#checking y\ny.head()","ed8ffa92":"#importing train_test_split\nfrom sklearn.model_selection import train_test_split\n\n#creating X_train and y_test\nX_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                   test_size=0.20)\n\n#seeing shape of X_train, X_test, y_train, y_test\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","ab59b37b":"#importing the RandomForestRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\n#instantiating the model\nmodel = RandomForestRegressor()\n\n#fitting the model\nmodel.fit(X_train, y_train)","de3c519d":"#making predictions\ny_preds = model.predict(X_test)","55deba38":"#seeing the predictions\ny_preds[:50]","61113a68":"#evaluating a model using score()\nmodel.score(X_test, y_test)","8650b9a5":"#evaluting a model using cross-validation \nfrom sklearn.model_selection import cross_val_score\n\n#cross val score\nscores = cross_val_score(estimator=model, \n                      X=X, \n                      y=y, \n                      cv=5, # use 5-fold cross-validation\n                      scoring=None)\n\n#printing the mean of all scores\nprint(scores.mean())","b93921a7":"#r^2 (pronounced r-squared) or coefficient of determination\nfrom sklearn.metrics import r2_score\nprint(r2_score(y_test, y_preds))\n\n#mean absolute error (MAE)\nfrom sklearn.metrics import mean_absolute_error\nprint(mean_absolute_error(y_test, y_preds))\n\n#mean square error (MSE)\nfrom sklearn.metrics import mean_squared_error\nprint(mean_squared_error(y_test, y_preds))","41048ef5":"True. ","77daa404":"True. For male and female.","9d6dec47":"### RandomForestRegressor","cbda58d3":"# 00. Data","3a9d81ea":"### H1. Women get higher grades than men.","9884e5ad":"### H4. Students who have completed the preparation course do better.","098f9ac7":"# 08. Making Prediction","88e0089f":"# 09. Evaluating the model","301d30ae":"# 07. Fitting the model","a6d2a5b4":"# 02. Basic informations about the dataset","9457b0ef":"### H6. The higher the grade in the reading test the higher the grade in the writing test.","10de6736":"### H2. The higher the grade on the math test, the higher the grade on the reading test.","4203e23f":"# 03. Feature engineering","b9ba1dd8":"### H3. The higher the parents' level of education, the higher the student's grade.","3cba07be":"## Visualizing the correlation between the variables","c9186d9e":"# 06. Preparing the data","e645838c":"### RandomForestRegressor","90077243":"### RandomForestRegressor","63e500ba":"True.","58884dcd":"True. It's possible to see that students with a higher parental level of education (bachelor's and master's) have higher scores.","8f4615c9":"True.\n* Math score: male > female\n* Reading score: female > male\n* Writing score: female > male\n\n- In general: female > male","299f4526":"# 04. Exploratory Data Analysis (EDA)","599f266c":"### H5. Students who eat \"Standard Lunch\" get better grades.","8444a1c2":"Data collected from: https:\/\/www.kaggle.com\/spscientist\/students-performance-in-exams","0482eb68":"True. For male and female.","9152da3d":"### H7. Race \/ ethnicity does not influence students' grades.","2ac1c007":"# 01. Importing libraries and loading the data","c93abe22":"False. <br>\nGroup E > Group D > Group C > Group B > Group A","de5d5f0a":"## Getting more information about the data","2a401b62":"## Hypothesis test","5ef580f5":"# 05. Feature encoding","afb3dabd":"Can I create new columns? Can I change something on the columns that already exists?"}}