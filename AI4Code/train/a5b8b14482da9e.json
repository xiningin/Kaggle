{"cell_type":{"5aa780e1":"code","7515a116":"code","4ca9525d":"code","18bda83d":"code","abe6656b":"code","3f973fb1":"code","8ba99341":"code","03a19411":"code","c2726500":"code","5c25b70b":"code","2ffdbdec":"code","5ff538d9":"code","87546d5d":"code","ac910112":"code","76687d1e":"code","c30fc523":"code","05802ace":"markdown","1dfd5f1b":"markdown","16af2814":"markdown","e45cfd76":"markdown","dbb3289e":"markdown"},"source":{"5aa780e1":"import numpy as np \nimport pandas as pd\nimport random\nimport time\nimport datatable as dt\nimport datatable as dt\nimport distutils\n\nfrom sklearn.model_selection import *\nfrom sklearn.metrics import *\n\nfrom lightgbm import *\nfrom catboost import *\nfrom xgboost import *\n\npd.set_option('float_format', '{:,}'.format)","7515a116":"DATA_PATH = \"\/kaggle\/input\/all-booster-parameters-for-tps-oct-2021\/\"\nn_splits = 5\nearly_stopping=600\n\ncompetition='tps1021'\n\nconfig =[\n    {'csv_name': competition+'-xgboost_parameters.csv', 'model': 'XGBClassifier'},\n    {'csv_name': competition+'-lgbm_parameters.csv', 'model': 'LGBMClassifier'},\n    {'csv_name': competition+'-catboost_parameters.csv', 'model': 'CatBoostClassifier'}\n]","4ca9525d":"def convert_it(var):\n    try:\n        return int(var)\n    except ValueError:\n        try:\n            return float(var)\n        except ValueError:\n            try:\n                return bool(distutils.util.strtobool(var))\n            except ValueError:\n                if '[' in var[0] and ']' in var[-1]:\n                    lst = var[1:-1].split(',')\n                    return [convert_it(a) for a in lst]\n                \n                return var","18bda83d":"%%time\n\n# DEMO from 5000 random rows\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-oct-2021\/train.csv',dtype='float32',skiprows=random.sample(range(1,1000000), 980000), nrows=5000)\n\n# TO RUN \n# train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-oct-2021\/train.csv',dtype='float32').drop(columns=['id'])\n# test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-oct-2021\/test.csv',dtype='float32').drop(columns=['id'])\n# submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\n\n","abe6656b":"train.tail()","3f973fb1":"# Convert Boolean columns\nbool_row=['f22','f43','f242','f243','f244','f245','f246','f247','f248','f249','f250','f251','f252','f253','f254','f255','f256','f257','f258','f259','f260','f261','f262','f263','f264','f265','f266','f267','f268','f269','f270','f271','f272','f273','f274','f275','f276','f277','f278','f279','f280','f281','f282','f283','f284']\nfor col in bool_row:\n    train[col] = train[col].astype(np.int8)\n#     test[col] = test[col].astype(np.int8)\n    \ntrain['target'] = train['target'].astype(np.int8)","8ba99341":"train.tail()","03a19411":"train.info(verbose=True, memory_usage=\"deep\")","c2726500":"y = train['target']\nX = train.drop(columns=['target', 'id'])\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=(1 \/ n_splits), random_state=59)","5c25b70b":"xgb_parameters_csv = pd.read_csv('\/kaggle\/input\/all-booster-parameters-for-tps-oct-2021\/tps1021-xgboost_parameters.csv')\nlgbm_parameters_csv = pd.read_csv('\/kaggle\/input\/all-booster-parameters-for-tps-oct-2021\/tps1021-lgbm_parameters.csv')\ncat_parameters_csv = pd.read_csv('\/kaggle\/input\/all-booster-parameters-for-tps-oct-2021\/tps1021-catboost_parameters.csv')","2ffdbdec":"xgb_parameters_csv.shape","5ff538d9":"xgb_parameters_csv.head()","87546d5d":"xgb_parameters_csv.sort_values(by=['score'], ascending=False).head(7)","ac910112":"xgb_parameters_csv.sort_values(by=['score'], ascending=False).head(1).iloc[0,:].dropna().drop(['date', 'thanks', 'model', 'score']).T.to_dict()","76687d1e":"lgbm_parameters_csv.sort_values(by=['score'], ascending=False).head(1).iloc[0,:].dropna().drop(['date', 'thanks', 'model', 'score']).T.to_dict()","c30fc523":"for k in range(len(config)): \n    # We use dtype='str' to prevent FLOAT to INT \n    parameters_csv = pd.read_csv(DATA_PATH + config[k]['csv_name'], dtype='str')\n\n# TO RUN\n#   for i in range(parameters_csv.shape[0]): \n\n# DEMO of 3 parameters in each framework\n    for i in range(3): \n        # convert str to int, float or boolean \n        params = {a:convert_it(b) for a, b in parameters_csv.iloc[i,:].dropna().drop(['date', 'thanks', 'model', 'score']).to_dict().items()} \n\n        conf_model = config[k]['model']\n        csv_model = parameters_csv.iloc[i,:]['model']\n        \n#         If you want to run without a GPU:\n#               if 'devices' in params: del params['devices']\n#               if 'tree_method' in params: del params['tree_method']\n#               if 'predictor' in params: del params['predictor']\n#               if 'gpu_id' in params: del params['gpu_id']\n#         \n        model = eval(csv_model)(**params)\n        model.fit(\n            X_train, y_train,\n            eval_set=[(X_test, y_test)],\n            early_stopping_rounds = early_stopping,\n            verbose=0\n            )\n\n        if csv_model == conf_model: # Classifier\n            y_predicted = model.predict_proba(X_test)\n            accuracy = roc_auc_score(y_test, y_predicted[:, 1])\n        else: # Regressor\n            y_predicted = model.predict(X_test)\n            accuracy = roc_auc_score(y_test, y_predicted)\n            \n        print('='*40)\n        print(f'Model: {csv_model}\\t Accuracy: {accuracy}')\n        print(f\"{i+1}_ {parameters_csv.iloc[i,:]['thanks']}\")","05802ace":"<div class=\"alert alert-info\">\n  <svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" class=\"bi bi-info-circle-fill\" viewBox=\"0 0 16 16\">\n  <path d=\"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z\"\/>\n<\/svg>\n<\/svg>\n<b style=\"font-size: x-large;\">MORE INFO<\/b><br>\nI collected all the parameters of <b>LightGBM<\/b> , <b>CatBoost<\/b> and <b>XGBoost<\/b>  introduced in the TPS Oct 2021 in <a href=\"https:\/\/www.kaggle.com\/akmeghdad\/all-booster-parameters-for-tps-oct-2021\" target=\"_blank\"><b>all-boosters-parameters-for-tps-oct-2021<\/b><\/a> dataset.<br>\nIn the following, I will show how to use this database \n<\/div>","1dfd5f1b":"## Parameters of the best accuracy in XGBClassifier","16af2814":"## Parameters of the best accuracy in LGBMClassifier","e45cfd76":"## Reduce memory with Pandas \n\n<div class=\"alert alert-info\">\n  <svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" class=\"bi bi-info-circle-fill\" viewBox=\"0 0 16 16\">\n  <path d=\"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z\"\/>\n<\/svg>\n<\/svg>\n<b style=\"font-size: x-large;\">MORE INFO<\/b><br>\n<a href=\"https:\/\/www.kaggle.com\/c\/tabular-playground-series-oct-2021\/discussion\/278237\" target=\"_blank\">I explain why I use <b><code>dtype='float32'<\/code><\/b> <b>here<\/b><\/a><br>\n<\/div>","dbb3289e":"## Top 7 accuracy in the XGBClassifier "}}