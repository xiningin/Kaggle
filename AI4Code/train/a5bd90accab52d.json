{"cell_type":{"32efc286":"code","238983cd":"code","23ab0046":"code","06faa7a2":"code","246c333f":"code","cf3612d6":"code","6d638df8":"code","6a3459c9":"code","27512221":"code","8850498e":"code","05495454":"markdown"},"source":{"32efc286":"# Import libraries\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nimport itertools\n\n","238983cd":"#Import dataset\n\ndataset = pd.read_csv(\"\/kaggle\/input\/churn\/churn.csv\")\ndataset.head()","23ab0046":"# Check null values\ndataset.isnull().sum()","06faa7a2":"# Look at the descriptions\n\ndataset.describe()\n","246c333f":"\nk = dataset[[\"international_plan\", \"voice_mail_plan\", \"churn\"]]\n\nfor i in k:\n    le = LabelEncoder()\n    n = str(i)+'_n'\n    dataset[n] = le.fit_transform(dataset[i])\ndel dataset[\"international_plan\"], dataset[\"voice_mail_plan\"], dataset[\"churn\"]\n\ndataset.head()\n","cf3612d6":"dataset.drop(\"state\", axis=1, inplace=True)\ndataset.drop(\"area_code\", axis=1, inplace=True)\ndataset.drop(\"account_length\", axis=1, inplace=True)\n","6d638df8":"# Define input and targets\n\nX = (dataset.iloc[:,:-1]).values\ny = (dataset.iloc[:,-1]).values","6a3459c9":"# Define Confusion Matrix\n\ndef plot_confusion_matrix(cm, X, y,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n\n    classes = []\n    for i in range(len(np.unique(y))):\n        classes.append(str(i))\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    pd.DataFrame(cm)\n    \n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","27512221":"#Train the model through the cross-validation\n\nK = 50\npred = np.zeros_like(y)\nacc = []\n\n\nkfold = StratifiedKFold(n_splits=K, shuffle=True)\n\n\nfor k, (train_index, test_index) in enumerate(kfold.split(X, y)):\n    x_train, x_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    model = GradientBoostingClassifier(n_estimators=100,\n                                   learning_rate=0.25,\n                                   subsample=0.75)\n\n    model.fit(x_train, y_train)\n    pred[test_index] = model.predict(x_test)\n    acc.append(accuracy_score(y_test, model.predict(x_test)))\n\nmean_acc = np.mean(acc)\nprint(\"Accuracy:\", mean_acc)","8850498e":"\nplot_confusion_matrix(confusion_matrix(y, pred), X, y, normalize=False)\n","05495454":"**There is no null value.**"}}