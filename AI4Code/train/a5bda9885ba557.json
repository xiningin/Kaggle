{"cell_type":{"d0ef7217":"code","52eb6a73":"code","5fd33dbe":"code","3707626a":"markdown","7e4aee50":"markdown","d9429459":"markdown","d5823810":"markdown"},"source":{"d0ef7217":"import torch\n\nDEVICE = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')","52eb6a73":"class TReNDSLoss(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.weights = torch.tensor([.3, .175, .175, .175, .175], dtype=torch.float32, device=DEVICE)\n\n    def __loss(self, output, target):\n        nom = torch.sum(torch.abs(output-target), dim=0)\n        denom = torch.sum(target, dim=0)\n        return torch.sum(self.weights * nom \/ denom)\n\n    def forward(self, output: torch.Tensor, target: torch.Tensor):\n        return self.__loss(output, target)\n","5fd33dbe":"output = torch.rand(64, 5)  # 64 is the batch dimension\ntarget = torch.rand(64, 5)\nloss_fn = TReNDSLoss()\nloss_fn(output, target).item()","3707626a":"## Loss description","7e4aee50":"## Loss instantiation and use","d9429459":"## Imports\nDefine imports and device in which the operations will be done","d5823810":"# Implementation of the TReNDS metric as loss PyTorch module\nI decided to use the metric as my loss function in the PyTorch project I made. Here there is the code I used."}}