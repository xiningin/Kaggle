{"cell_type":{"c2a4610e":"code","a45192dd":"code","3e68efe5":"code","2e4df386":"code","7c6fadb0":"code","68443fbb":"code","1fad43b2":"code","ab29c079":"code","9e4a5baf":"code","c2a480df":"code","6bbb9706":"code","43a19653":"code","a52644d4":"code","ea2bfffd":"code","aad64800":"code","79bedcbc":"code","2cb388d6":"code","c2d320ce":"code","d361ad19":"code","3c67a891":"code","7c9d22fa":"code","4de5b877":"code","94a26add":"code","2f59bfa0":"code","65b54a08":"markdown","c3ecebda":"markdown","1e560467":"markdown","583dc356":"markdown","b0d507d0":"markdown","48a346c6":"markdown","a2a6205b":"markdown","3fe68d63":"markdown","8c57d332":"markdown","09d6f4e8":"markdown","7529237b":"markdown","5c565c1d":"markdown","6c570f19":"markdown","e0877067":"markdown","8b7fb476":"markdown","4a05f9a4":"markdown","94c6f462":"markdown","8090fa1e":"markdown","02b2a3a6":"markdown","cbed4241":"markdown","bbd01e47":"markdown","e0262d10":"markdown","c2b5f69f":"markdown"},"source":{"c2a4610e":"# importing required libraries\nimport seaborn as sns\nsns.set()\nsns.set(style=\"darkgrid\")\n\n\nimport numpy as np\nimport pandas as pd\n\n# importing matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nplt.rcParams['figure.figsize']=(10,10)","a45192dd":"# read the dataset\ndata_BM = pd.read_csv('..\/input\/big-mart-sales\/train_v9rqX0R.csv')\n# drop the null values\ndata_BM = data_BM.dropna(how=\"any\")\n# multiply Item_Visibility by 100 to increase size\ndata_BM[\"Visibility_Scaled\"] = data_BM[\"Item_Visibility\"] * 100\n# view the top results\ndata_BM.head()","3e68efe5":"# line plot using relplot\nsns.lineplot(x=\"Item_Weight\", y=\"Item_MRP\",data=data_BM[:50]);","2e4df386":"sns.barplot(x=\"Item_Type\", y=\"Item_MRP\", data=data_BM[:5])","7c6fadb0":"sns.distplot(data_BM['Item_MRP'])","68443fbb":"sns.boxplot(data_BM['Item_Outlet_Sales'], orient='vertical')","1fad43b2":"sns.violinplot(data_BM['Item_Outlet_Sales'], orient='vertical', color='magenta')","ab29c079":"# scatter plot\nsns.relplot(x=\"Item_MRP\", y=\"Item_Outlet_Sales\", data=data_BM[:200], kind=\"scatter\");","9e4a5baf":"sns.relplot(x=\"Item_MRP\", y=\"Item_Outlet_Sales\", hue=\"Item_Type\",data=data_BM[:200]);","c2a480df":"# different line plots for different categories of the Outlet_Size\nsns.lineplot(x=\"Item_Weight\", y=\"Item_MRP\",hue='Outlet_Size',data=data_BM[:150]);","6bbb9706":"# bubble plot\nsns.relplot(x=\"Item_MRP\", y=\"Item_Outlet_Sales\", data=data_BM[:200], kind=\"scatter\", size=\"Visibility_Scaled\", hue=\"Visibility_Scaled\");","43a19653":"# subplots for each of the category of Outlet_Size\nsns.relplot(x=\"Item_Weight\", y=\"Item_Visibility\",hue='Outlet_Size',style='Outlet_Size',col='Outlet_Size',data=data_BM[:100]);","a52644d4":"sns.catplot(x=\"Outlet_Size\", y=\"Item_Outlet_Sales\", kind='strip',data=data_BM[:250]);","ea2bfffd":"sns.catplot(x=\"Outlet_Size\", y=\"Item_Outlet_Sales\", kind='swarm',data=data_BM[:250]);","aad64800":"sns.catplot(x=\"Outlet_Size\", y=\"Item_Outlet_Sales\",kind=\"box\",data=data_BM);","79bedcbc":"sns.catplot(x=\"Outlet_Size\", y=\"Item_Outlet_Sales\",kind=\"violin\",data=data_BM);","2cb388d6":"sns.catplot(x=\"Outlet_Size\", y=\"Item_Outlet_Sales\",kind=\"boxen\",data=data_BM);","c2d320ce":"sns.catplot(x=\"Outlet_Size\", y=\"Item_Outlet_Sales\",kind=\"point\",data=data_BM);","d361ad19":"sns.catplot(x=\"Outlet_Size\", y=\"Item_Outlet_Sales\",kind=\"bar\",data=data_BM);","3c67a891":"# distribution of Item Visibility\nplt.figure(figsize=(10,10))\nsns.kdeplot(data_BM['Item_Visibility'], shade=True);","7c9d22fa":"# distribution of Item MRP\nplt.figure(figsize=(10,10))\nsns.kdeplot(data_BM['Item_MRP'], shade=True);","4de5b877":"plt.figure(figsize=(10,10))\nsns.distplot(data_BM['Item_Outlet_Sales']);","94a26add":"iris = sns.load_dataset(\"iris\")\niris.head()","2f59bfa0":"sns.pairplot(iris, hue='species', height=2.5);","65b54a08":"## 4. Pair plots\n\n* When you generalize joint plots to datasets of larger dimensions, you end up with pair plots. This is very useful for exploring correlations between multidimensional data, when you'd like to plot all pairs of values against each other.\n\n* We'll demo this with the well-known Iris dataset, which lists measurements of petals and sepals of three iris species:","c3ecebda":"#### Bubble plot\n\n- We utilize the **hue** semantic to color bubbles by their Item_Visibility and at the same time use it as size of individual bubbles.","1e560467":"### b. Categorical distribution plots\n\n#### Box Plots\n\n * Box plot shows the three quartile values of the distribution along with extreme values. \n * The \u201cwhiskers\u201d extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed independently. \n * This means that each value in the boxplot corresponds to an actual observation in the data.","583dc356":"- Remember the **line chart** that we created earlier? When we use **hue** semantic, we can create more complex line plots in seaborn. \n- In the following example, **different line plots for different categories of the Outlet_Size** are made.","b0d507d0":"#### Point plot","48a346c6":"#### Scatter plot\n\n* It depicts the distribution of two variables using a cloud of points, where each point represents an observation in the dataset. \n* This depiction allows the eye to infer a substantial amount of information about whether there is any meaningful relationship between them.\n- You can use **relplot()** with the option of `kind=scatter` to plot a scatter plot in seaborn.\n\n***NOTE : Here, we are going to use only a subset of the data for the plots.***","a2a6205b":"## 2. Advance categorical plots in seaborn\n\nFor categorical variables we have three different families in seaborn.\n\n* **Categorical scatterplots:**\n\n * stripplot() (with kind=\"strip\"; the default)\n * swarmplot() (with kind=\"swarm\")\n\n* **Categorical distribution plots:**\n\n * boxplot() (with kind=\"box\")\n * violinplot() (with kind=\"violin\")\n * boxenplot() (with kind=\"boxen\")\n\n* **Categorical estimate plots:**\n\n * pointplot() (with kind=\"point\")\n * barplot() (with kind=\"bar\")","3fe68d63":"#### Bar Chart\n\n- In seaborn, you can create a barchart by simply using the **barplot** function.\n- Notice that to achieve the same thing in matplotlib, we had to write extra code just to group the data category wise.\n- And then we had to write much more code to make sure that the plot comes out correct.","8c57d332":"#### Box plots\n\n- You can use the **boxplot()** for creating boxplots in seaborn.\n- Let's try to visualize the distribution of Item_Outlet_Sales of items.","09d6f4e8":"#### Boxen plots\n\n- This style of plot was originally named a \u201cletter value\u201d plot because it shows a large number of quantiles that are defined as \u201cletter values\u201d.\n- It is similar to a box plot in plotting a nonparametric representation of a distribution in which all features correspond to actual observations. \n- By plotting more quantiles, it provides more information about the shape of the distribution, particularly in the tails. ","7529237b":"#### Violin Plots","5c565c1d":"\n#### Bar plots","6c570f19":"**The default representation of the data in catplot() uses a scatterplot.**\n\n### a. Categorical scatterplots\n\n#### Strip plot\n- Draws a scatterplot where one variable is categorical.\n- You can create this by passing **kind=strip** in the `catplot()`.","e0877067":"## 3. Density Plots\n\n***Rather than a histogram, we can get a smooth estimate of the distribution using a kernel density estimation, which Seaborn does with sns.kdeplot:***","8b7fb476":"### Histogram and Density Plot\n\n***Histograms and KDE can be combined using distplot:***","4a05f9a4":"#### Histogram\n\n- You can create a histogram in seaborn by simply using the **distplot()**. There are multiple options that we can use which we will see further in the notebook.","94c6f462":"## 1. Creating basic plots\n\nLet's have a look on how can you create some basic plots in seaborn in a single line for which multiple lines were required in matplotlib.\n\n#### Line Chart\n\n * With some datasets, you may want to understand changes in one variable as a function of time, or a similarly continuous variable.\n * In seaborn, this can be accomplished by the **lineplot()** function, either directly or with **relplot()** by setting **kind=\"line\":**","8090fa1e":"#### Hue semantic\n\n*We can also add another dimension to the plot by coloring the points according to a third variable. In seaborn, this is referred to as using a \u201chue semantic\u201d.*","02b2a3a6":"#### Swarm plot\n- This function is similar to `stripplot()`, but the points are adjusted (only along the categorical axis) so that they don\u2019t overlap. \n- This gives a better representation of the distribution of values, but it does not scale well to large numbers of observations. This style of plot is sometimes called a \u201cbeeswarm\u201d.\n- You can create this by passing **kind=swarm** in the `catplot()`.","cbed4241":"***Visualizing the multidimensional relationships among the samples is as easy as calling sns.pairplot:***","bbd01e47":"#### Category wise sub plot\n\n- You can also create **plots based on category** in seaborn.\n- We have created scatter plots for each Outlet_Size","e0262d10":"#### Violin plot\n\n- A violin plot plays a similar role as a box and whisker plot. \n- It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. \n- Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.\n- You can create a violinplot using the **violinplot()** in seaborn.","c2b5f69f":"## Visualization With Seaborn\n\n- Seaborn is a Python data visualization library based on matplotlib.\n- It provides a high-level interface for drawing attractive and informative statistical graphics. It provide choices for plot style and color defaults, defines simple high-level functions for common statistical plot types, and integrates with the functionality provided by Pandas DataFrames.\n- The main idea of Seaborn is that it provides high-level commands to create a variety of plot types useful for statistical data exploration, and even some statistical model fitting.\n\n### Table of Contents\n\n1. Creating basic plots\n    - Line Chart\n    - Bar Chart\n    - Histogram\n    - Box plot\n    - Violin plot\n    - Scatter plot\n    - Hue semantic\n    - Bubble plot\n    - Pie Chart\n2. Advance Categorical plots in Seaborn\n3. Density plots\n4. Pair plots"}}