{"cell_type":{"202133b9":"code","fec05675":"code","fb25d3d6":"code","53caddb8":"code","7f3f5c58":"code","a98e20d8":"code","c2096c5c":"code","9de781b5":"code","1107f152":"code","a071b2bb":"code","8c135699":"code","3a265270":"code","d38c0c40":"code","ac9279f5":"code","23bd8174":"code","400a3832":"code","08c2ffa2":"code","4507aad8":"code","220ab476":"code","3c1ef332":"code","702ca7f9":"code","81cda2c6":"code","1b89dd02":"code","a6915a1e":"code","ec5acda2":"code","cecadd2a":"code","324fc586":"code","8b35c085":"code","37d33b73":"code","d34a3066":"code","6205f8aa":"code","b7bb46a2":"code","0258a124":"code","ea65a8b3":"code","fccaec2b":"code","c9ecbcd7":"code","c39d62db":"code","d54f00d2":"code","68fc5d36":"code","c6f74941":"code","f0ead895":"code","0dd6ab43":"code","8d5d583e":"code","5248124f":"code","f90c0891":"code","45fb0b25":"code","2f88105b":"code","52f8a735":"code","dfa48b95":"code","55636677":"code","6feba2a0":"code","de5659d9":"code","f6f8bbf9":"code","d3850903":"code","4edba999":"code","cc75d94d":"code","dfabe480":"code","2d41994d":"code","f0347392":"code","a6ddea77":"code","620d1719":"code","18e9e54d":"code","35d8e7bb":"code","3ac8c361":"code","0edbd909":"code","0be3930d":"code","cdbbfb19":"code","248db118":"code","781c6363":"code","7c32cb50":"code","43367e52":"code","741ba882":"code","d8c8c605":"code","cb8a71a3":"code","2e07b207":"code","c506ebc4":"code","ea011d3a":"code","9afae3ab":"code","6508169b":"code","2677ed08":"code","9f5304d7":"code","9cd7adb0":"code","7bf37189":"code","2fa7e10a":"code","8014f109":"code","e08884f5":"code","9aec111d":"code","9ac4cd55":"code","e16e8e3f":"code","0a2b5baf":"code","0632e599":"code","81a95cd6":"code","d03b337a":"code","3a2e4add":"code","be2aa08e":"markdown","b595eb87":"markdown","c562cb25":"markdown","e10eb351":"markdown","a392b762":"markdown","763f0016":"markdown","1bbecee9":"markdown","3adc80f1":"markdown","f4307df4":"markdown","06d1d3a4":"markdown","4913bc08":"markdown","82a61860":"markdown","f0c2d3e4":"markdown","2dbbb056":"markdown","90b4522a":"markdown","d792120a":"markdown","da1a6f9b":"markdown","e0228f83":"markdown","838da064":"markdown","4c1aa574":"markdown","828102c1":"markdown","feeb25bf":"markdown","09abfe3f":"markdown","54c423a0":"markdown","02184b43":"markdown","3e2ff183":"markdown","33819ceb":"markdown","b90c24c5":"markdown","1d2c2207":"markdown","47e6ff91":"markdown","5a47f1a5":"markdown","1e7de80d":"markdown","185a7fde":"markdown","2245691c":"markdown","dccf370c":"markdown","5096be31":"markdown","3499d3b2":"markdown","73f589c6":"markdown","775875b5":"markdown","39d85e8f":"markdown","2f11855c":"markdown","1e539fcf":"markdown","853d405b":"markdown","d0db02aa":"markdown","b7d916ee":"markdown","f81970e0":"markdown","95a08992":"markdown","0de2a86d":"markdown","1e1b57a2":"markdown"},"source":{"202133b9":"# Data Analysis: 'Titanic Data' (Python)","fec05675":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nimport matplotlib.pyplot as plt\n#plt.style.use('ggplot')\nfrom matplotlib.pyplot import figure\nfrom scipy import stats\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb25d3d6":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","53caddb8":"train_data.tail()","7f3f5c58":"#Show all column names\ntrain_data.columns.tolist()","a98e20d8":"#Overview about Columns, Range, Non-Null Value Counts, Memory Usage and Data Types (#df.dtpyes)\ntrain_data.info()","c2096c5c":"# Counting rows and coulums\ncol_row = train_data.shape\nprint('Columns in dataset:', col_row[1],'\\nRows in dataset:', col_row[0])","9de781b5":"# Total cells in the dataset\ntotal_cells=np.product(train_data.shape)\nprint('Total cells in this dataset:',total_cells)","1107f152":"train_data.describe()","a071b2bb":"import scipy.stats as stats\nrvs = stats.norm(scale=1, loc=0).rvs(10000)\nsns.displot(rvs)","8c135699":"def plot_normal_distribution(loc, scale):\n    rvs = stats.norm(loc=loc, scale=scale).rvs(1000000)\n    sns.distplot(rvs, hist=False, label=\"stddev=\" + str(scale) + \", mean=\" + str(loc))\n    \nplt.figure(figsize=(16, 6))    \nplt.subplots\nplot_normal_distribution(loc=0, scale=1)\nplot_normal_distribution(loc=0, scale=3)\nplot_normal_distribution(loc=0, scale=5)\nplt.legend()\nplt.show()","3a265270":"from scipy.stats import skew, norm, kurtosis, skewtest, kurtosistest","d38c0c40":"print(\"Skew of Age: \", skew(train_data['Age'], nan_policy='omit'), \"\\n\")\n\n#The skewtest function tests the null hypothesis that the skew of the population \n#from which the sample was drawn is that of the normal distribution.\nprint(\"Skewtest: \", skewtest(train_data['Age'], nan_policy='omit'), \"\\n\")","ac9279f5":"print(\"Kurtosis of Age: \", kurtosis(train_data['Age'], nan_policy='omit'), \"\\n\")\n\n#The kurtosistest function tests the null hypothesis that the kurtosis of the \n#population from which the sample was drawn is that of the normal distribution.\nprint(\"Kurtosistest: \", kurtosistest(train_data['Age'], nan_policy='omit'), \"\\n\")","23bd8174":"sns.set_style(\"white\")\ng = sns.FacetGrid(data = train_data[train_data['Age'].notna()])\ng.map(plt.hist, \"Age\");\n\ng = sns.FacetGrid(data = train_data[train_data['Age'].notna()], col = 'Survived')\ng.map(plt.hist, \"Age\");","400a3832":"train_data.duplicated().sum()","08c2ffa2":"train_data.loc[train_data.duplicated(keep=False)]","4507aad8":"# Finding the amount of missing values in each column\nmissing_values = train_data.isnull().sum().sort_values(ascending = False)\nmissing_values","220ab476":"# Calculating the percentage of missing values:\n\n# 1. Set variables for total amount of cells and total amount of missing data\ntotal_missing = missing_values.sum()\n\n# 2. Calculating percent of data that is missing\npercent_missing = (total_missing\/total_cells) * 100\n\nprint(\"Total missing values: {}  =  {:.2f} %\".format(total_missing, percent_missing))","3c1ef332":"# Calculating the percentage of missing values in each column is often more meaningful to me\n\nprint('PERCENTAGE OF MISSING VALUES IN EACH COLUMN:\\n')\nfor col in train_data.columns:\n    missing = np.mean(train_data[col].isnull())\n    print('{}:  {:.2f}%'.format(col, missing*100))","702ca7f9":"plt.figure(figsize=(16,8))\nsns.heatmap(train_data.isnull(),yticklabels=False, cbar=False, cmap=None)","81cda2c6":"# Only two values are missing in the 'Embarked' column. Let's check the corresponding rows.\ntrain_data[pd.isnull(train_data.Embarked)]","1b89dd02":"# Checking and counting the values in the 'Embarked' column.\ntrain_data['Embarked'].value_counts()","a6915a1e":"# As only two values are missing (0.22%), I decided to replace them by the most listed value.\ntrain_data[\"Embarked\"] = train_data[\"Embarked\"].fillna(\"S\")","ec5acda2":"# Checking if the missing values have been removed ...\ntrain_data[pd.isnull(train_data.Embarked)]","cecadd2a":"# ... and if the values have benn replaced by 'S'\ntrain_data['Embarked'].value_counts()","324fc586":"# Deleting the column\ntrain_data.drop(\"Cabin\", axis=1, inplace=True)","8b35c085":"# Checking if the columns \"Embarked\" and \"Cabin\" are deleted\ntrain_data.head()","37d33b73":"train_data.Age.describe().to_frame()","d34a3066":"# The histogramm shows the age distribution of all passengers\ntrain_data['Age'].hist(bins=16, color='purple' ,figsize=(16,7))\nplt.title('Age Distribution of all passengers')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.grid(True)","6205f8aa":"plt.figure(figsize=(10,6))\nsns.boxplot(x=\"Age\", data=train_data, color='purple')","b7bb46a2":"# Mean age vs. median\ndisplay(train_data.Age.mean())\ndisplay(train_data.Age.median())","0258a124":"# Grouping Column 'Sex' to see the average age or women and men\ngrouped_sex_age = train_data.groupby(['Sex']).Age.agg([len, min, max, 'mean'])\ngrouped_sex_age","ea65a8b3":"# Grouping the 'Pclass' to see if the average age changes from class to class\ngrouped_class_age = train_data.groupby(['Pclass']).Age.agg([len, min, max, 'mean'])\ngrouped_class_age","fccaec2b":"# Checking the age and amount of people for each class and sex\ngrouped_sex_pclass_age = train_data.groupby(['Sex', 'Pclass']).Age.agg([len, min, max, 'mean', 'median'])\ngrouped_sex_pclass_age","c9ecbcd7":"# Checking the age and amount of people for each class and sex and SibSp\ngrouped_sex_pclass_age = train_data.groupby(['Pclass', 'SibSp']).Age.agg([len, min, max, 'mean', 'median'])\ngrouped_sex_pclass_age","c39d62db":"fem_p1 =train_data.loc[(train_data.Sex == 'female') & (train_data.Pclass == 1)].Age.median()\nfem_p2 =train_data.loc[(train_data.Sex == 'female') & (train_data.Pclass == 2)].Age.median()\nfem_p3 =train_data.loc[(train_data.Sex == 'female') & (train_data.Pclass == 3)].Age.median()\nmale_p1 =train_data.loc[(train_data.Sex == 'male') & (train_data.Pclass == 1)].Age.median()\nmale_p2 =train_data.loc[(train_data.Sex == 'male') & (train_data.Pclass == 2)].Age.median()\nmale_p3 =train_data.loc[(train_data.Sex == 'male') & (train_data.Pclass == 3)].Age.median()","d54f00d2":"# Filling missing values with average age of women and men in each class\ndef myfunc(age, pclass, sex):\n    if pd.isnull(age) and pclass==1 and sex == 'female':\n        age=fem_p1\n    elif pd.isnull(age) and pclass==2 and sex == 'female':\n        age=fem_p2\n    elif pd.isnull(age) and pclass==3 and sex == 'female':\n        age=fem_p3\n    elif pd.isnull(age) and pclass==1 and sex == 'male':\n        age=male_p1\n    elif pd.isnull(age) and pclass==2 and sex == 'male':\n        age=male_p2\n    elif pd.isnull(age) and pclass==3 and sex == 'male':\n        age=male_p3\n    else:\n        age=age\n    return age","68fc5d36":"# Creating a new columns 'Age_Filled_Na' with the new average age values \ntrain_data['Age_Filled_Na'] = train_data.apply(lambda x: myfunc(x['Age'], x['Pclass'], x['Sex']), axis=1)","c6f74941":"# Checking the new column and values\ntrain_data.head()","f0ead895":"train_data.tail()","0dd6ab43":"# Finally checking if there is any missing data in the new column 'Age_Filled_Na'\ntrain_data.Age_Filled_Na.isnull().sum()","8d5d583e":"# The histogramm shows the age distribution of all passengers after replacing the missing values\ntrain_data['Age_Filled_Na'].hist(bins=16, color='purple' ,figsize=(16,8))\nplt.title('Age Distribution of all passengers')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.grid(True)","5248124f":"train_data.describe(include='all')","f90c0891":"# Checking data types\ntrain_data.dtypes","45fb0b25":"# Creating a new column 'SexNo' with the values '1' for 'female' and '0' for 'male'\ntrain_data['SexNo'] = np.where((train_data['Sex'] == \"female\"), 1, 0)\n# Checking if the column 'SexNo' has been added\ntrain_data.head()","2f88105b":"# Correlation table including the new column 'SexNo'\ntrain_data.corr()","52f8a735":"# Visualisation of the corralation table\ncorrelation = train_data.corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(correlation, linecolor='white',linewidths=0.1, annot=True)\nplt.title('Correlation Matric')\nplt.xlabel('Titanic Data')\nplt.ylabel('Titanic Data')\nplt.show()","dfa48b95":"# Correlation and P-value of 'Survived' and 'Sex'\npearson_coef, p_value = stats.pearsonr(train_data['Survived'], train_data['SexNo'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","55636677":"# Correlation and P-value of 'Survived' and 'Fare'\npearson_coef, p_value = stats.pearsonr(train_data['Survived'], train_data['Fare'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","6feba2a0":"# Correlation and P-value of 'Survived' and 'Pclass'\npearson_coef, p_value = stats.pearsonr(train_data['Survived'], train_data['Pclass'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","de5659d9":"train_data[[\"Age_Filled_Na\",\"Fare\"]].corr()","f6f8bbf9":"# Calculating the P-vau\npearson_coef, p_value = stats.pearsonr(train_data['Age_Filled_Na'], train_data['Fare'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","d3850903":"plt.figure(figsize=(16,8))\nsns.regplot(x=\"Fare\", y=\"Age_Filled_Na\",data=train_data, scatter_kws={'color':'blue'}, line_kws={'color':'orange'}, marker='*')\nplt.title('Relationship between Fare and Age')\nplt.ylabel('Age')\nplt.ylim(0.1,)","4edba999":"plt.figure(figsize=(20,8))\nsns.scatterplot(x='Age', y='Fare', hue='Sex', data = train_data)\nplt.title('Relationship between Fare, Age and Sex')","cc75d94d":"male = (train_data['Sex'] == 'male').sum()\nfemale = (train_data['Sex']== 'female').sum()\nproportions = [male,female]\n\nplt.figure(figsize=(12,8))\nplt.pie(proportions, data=train_data, labels= ['Males', 'Females'], explode = (0.05,0), startangle=90, autopct='%1.1f%%', shadow=False)\nplt.axis('equal')\nplt.title(\"Sex Proportion\")","dfabe480":"# How many people survived ('Survived' == 0)\nsurvived_data=train_data.Survived.value_counts().to_frame()\nsurvived_data","2d41994d":"pd.pivot_table(train_data, index=\"Survived\", values=['Pclass','Age_Filled_Na','SibSp', 'Parch', 'Fare'])\n","f0347392":"# Amount and average age of people who survived compared to those who died.\ntrain_data.groupby(['Survived']).Age.agg([len,min, max,'mean', 'median'])","a6ddea77":"pearson_coef, p_value = stats.pearsonr(train_data['Survived'], train_data['Age_Filled_Na'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","620d1719":"# Age comparision of the people who survived and those who died using a boxplot. \nplt.figure(figsize=(10,8))\nsns.boxplot(x=\"Survived\", y=\"Age_Filled_Na\", data=train_data)\nplt.title(\"Comparison: Age of People who died \/ survived\")\nplt.ylabel('Age')","18e9e54d":"train_data['Age'].value_counts().sort_values(ascending=False)","35d8e7bb":"# The barplot compares the survival of men to women\nplt.figure(figsize=(10,8))\nsns.barplot(x=\"Sex\", y=\"Survived\", data=train_data)\nplt.title(\"Survivors - Male & Female\")\nplt.show()","3ac8c361":"# Sex and Age compared with Survived and Not Survived\ng = sns.FacetGrid(train_data, col='Survived', sharey=False, ylim=(0,80), hue='Sex', height=7, aspect=1.1)\ng.map_dataframe(sns.histplot, x='Age')\ng.set_axis_labels('Age', 'Count')\ng.add_legend()","0edbd909":"plt.figure(figsize=(10,8))\nsns.countplot(x=train_data['Sex'],hue=train_data['Survived'])\nplt.title(\"Comparison: Survivors - Male & Female\")\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 12})\nplt.show()","0be3930d":"# Amount and average age of women and man who survived compared to those who died.\ntrain_data.groupby(['Sex','Survived']).Age.agg([len,'mean', 'median'])","cdbbfb19":"# Percentage of women who survived\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)*100\n\nprint(\"% of women who survived: {:.2f}\".format(rate_women))","248db118":"# Percentage of men who survived\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)*100\n\nprint(\"% of men who survived: {:.2f}\".format(rate_men))","781c6363":"train_data['Pclass'].value_counts()","7c32cb50":"train_data.groupby(['Pclass', 'Survived']).Age.agg([len])","43367e52":"# Compares the chance of survival for each ticket class\nplt.figure(figsize=(10,8))\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train_data)\nplt.title(\"Chance of Survival for each Ticket Class\")\nplt.show()","741ba882":"# Survived and not survived compared for each ticket class\nplt.figure(figsize=(10,8))\nsns.countplot(x=train_data['Pclass'],hue=train_data['Survived'])\nplt.title(\"Comparison: Survivors - Ticket Class\")\nplt.legend(['Not Survived', 'Survived'], loc='upper left', prop={'size': 12})\nplt.show()","d8c8c605":"# Amount and average age of women and man of each class who survived compared to those who died.\ntrain_data.groupby(['Sex','Survived', 'Pclass']).Age.agg([len,min, max,'mean'])","cb8a71a3":"train_data['Parch'].value_counts()","2e07b207":"plt.figure(figsize=(12,6))\nsns.barplot(x=\"Parch\", y=\"Survived\", data=train_data)\nplt.title(\"Chance of Survival for Passengers with Parents or Children\")\nplt.xlabel('Number of Parents \/ Children')\nplt.show()","c506ebc4":"plt.figure(figsize=(12,8))\nsns.countplot(x=train_data['Parch'],hue=train_data['Survived'])\nplt.title(\"Survived - Parents or Children\")\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 12})\nplt.xlabel('Parents \/ Children')\nplt.show()","ea011d3a":"# Age of people with parents or children\ntrain_data.groupby(['Parch','Survived']).Age.agg([len, min, max, 'mean', 'median'])","9afae3ab":"train_data.SibSp.value_counts()\n","6508169b":"train_data.groupby(['SibSp','Survived']).Age.agg([len, 'mean'])","2677ed08":"# This barplot compares the chance of survival within a category\nplt.figure(figsize=(12,6))\nsns.barplot(x=\"SibSp\", y=\"Survived\", data=train_data)\nplt.title(\"Chance of Survival for Passengers with Siblings or Spouses\")\nplt.xlabel('Number of Siblings \/ Spouses')\nplt.show()","9f5304d7":"plt.figure(figsize=(10,8))\nsns.countplot(x=train_data['SibSp'],hue=train_data['Survived'])\nplt.title(\"Survived - Siblings or Spouses\")\nplt.xlabel('Siblings \/ Spouses')\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 12})\nplt.show","9cd7adb0":"train_data.groupby(['SibSp','Survived']).Age.agg([len, min, max, 'mean'])","7bf37189":"plt.figure(figsize=(10,8))\nsns.barplot(x=\"Embarked\", y=\"Survived\", data=train_data)\nplt.title('Chance of Survival by Port of Embarkation')\nplt.xlabel('Port of Embarkation')\nplt.show()","2fa7e10a":"plt.figure(figsize=(10,8))\nsns.countplot(x=train_data['Embarked'],hue=train_data['Survived'])\nplt.title(\"Comparison: Survivors by Port of Embarkation\")\nplt.xlabel('Port of Embarkation')\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 12})\nplt.show()","8014f109":"pd.pivot_table(train_data, index= \"Survived\", values=['Age', 'SibSp', 'Parch', 'Fare'])\n","e08884f5":"plt.figure(figsize=(12,6))\nsns.barplot(x=\"SibSp\", y=\"Age\", data=train_data)\nplt.title('Average Age of Passengers with Siblings')\nplt.xlabel('Siblings')\nplt.show()","9aec111d":"plt.figure(figsize=(12,6))\nsns.boxplot(x=\"Parch\", y=\"Age\", data=train_data)\nplt.title('Age of Passengers with Parents or Children')\nplt.xlabel('Parents \/ Children')\nplt.show()","9ac4cd55":"plt.figure(figsize=(12,6))\nsns.barplot(x=\"Parch\", y=\"Age\", data=train_data)\nplt.title('Average Age of Passengers with Parents or Children')\nplt.xlabel('Parents \/ Children')\nplt.show()","e16e8e3f":"plt.figure(figsize=(12,6))\nsns.boxplot(x=\"Pclass\", y=\"Age\", data=train_data)\nplt.title('Age of Passengers for each Ticket Class')\nplt.xlabel('Ticket Class')\nplt.show()","0a2b5baf":"# Comparison of Pclass, Age, Sex and Survivors\ng = sns.FacetGrid(train_data, col='Survived', row='Pclass', sharey=False, ylim=(0,300), hue='Sex', height=7)\ng.map_dataframe(sns.scatterplot, x='Age', y='Fare')\ng.set_axis_labels('Age', 'Fare')\ng.add_legend()\n# g.set_titles(col_template='', row_template='')","0632e599":"# Comparison of Parch, Age, Sex and Survivors\ng = sns.FacetGrid(train_data, col='Parch', row='Survived', sharey=False, ylim=(0,300), hue='Sex', height=7)\ng.map_dataframe(sns.scatterplot, x='Age', y='Fare')\ng.set_axis_labels('Age', 'Fare')\ng.add_legend()\n# g.set_titles(col_template='', row_template='')","81a95cd6":"plt.figure(figsize=(20,10))\nsns.histplot(train_data.Fare)\nplt.title('Fares Paid')\nplt.show()","d03b337a":"train_data['Fare'] = pd.qcut(train_data['Fare'], 10)","3a2e4add":"fig, axs = plt.subplots(figsize=(22, 9))\nsns.countplot(x='Fare', hue='Survived', data=train_data)\nplt.xlabel('Fare', size=16, labelpad=10)\nplt.ylabel('Count', size=15, labelpad=10)\nplt.tick_params(axis='x', labelsize=13)\nplt.tick_params(axis='y', labelsize=15)\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\nplt.title('Survial compared to Fare', size=20, y=1)\nplt.show()\n","be2aa08e":"**The average age for each class and sex is very different. In my opinion this needs to be considered when replacing the missing values**.","b595eb87":"# Introduction","c562cb25":"`Age` and `SibSp`","e10eb351":"# Let's have a look at the shape of some of our data","a392b762":"### Dealing with missing values","763f0016":"**This matrix shows that there is a correlation between sex and the chance to survive.** There is also a correlation between fare and the chance to survive, as well as a **negative correlation between the class and the chance to survive**.","1bbecee9":"The data type of 'Sex' is an object, which will not be visible in a correlation. I would like to include the values of the column 'Sex' into the correlation matrix by creating a new column 'SexNo' and set the value 'female' to '1' and 'male' to '0'","3adc80f1":"# Importing Libraries","f4307df4":"### Identifying duplicate values","06d1d3a4":"**Correlation**","4913bc08":"**P-values**","82a61860":"`Survived` and `Parch`","f0c2d3e4":"`Age`","2dbbb056":"`Survived` and `Sex`","90b4522a":"**'Survived'**","d792120a":"# Data Wrangling","da1a6f9b":"`Survived` and `Embarked`","e0228f83":"`Cabin`","838da064":"**Drop data**\n*     Drop the whole row\n*     Drop the whole column\n\n*or*\n\n**Replace data**\n*     Replace it by mean \/ median\n*     Replace it by frequency\n*     Replace it based on other functions\n\nChoosing a method based on the composition and correlation of the data and the task or goal settings.","4c1aa574":"#### Looking at the columns with missing data","828102c1":"**Visualisation of missing data**","feeb25bf":"**Comparing multiple columns**","09abfe3f":"# Loading and Viewing Data","54c423a0":"`Embarked`","02184b43":"The **average age** of all people on board is **29.7**. \nReplacing the missing values with the average age would be inacurate. I would like to find out the average age of men and women in each class and check if there is a big difference and if ther are further correlations.","3e2ff183":"## Analysing Patterns using Visualisation","33819ceb":"**Data Dictionary**\n\n* **'Survival':** \t 0 = No, 1 = Yes\n* **'Pclass':** \t Ticket class \t 1 = 1st, 2 = 2nd, 3 = 3rd\n* **'Sex':** \t Sex\n* **'Age':**\t Age in years\n* **'SibSp':** \t # of siblings \/ spouses aboard the Titanic\n* **'Parch':** \t # of parents \/ children aboard the Titanic\n* **'Ticket':** \t Ticket number\n* **'Fare':** \t Passenger fare\n* **'Cabin':** \t Cabin number\n* **'Embarked':** \t Port of Embarkation \t C = Cherbourg, Q = Queenstown, S = Southampton","b90c24c5":"**As the average age seem to depend on both, sex and class.**","1d2c2207":"`Survived` and `SibSp`","47e6ff91":"**'Age'**","5a47f1a5":"**Survived Pivot**","1e7de80d":"# Categorical Variables","185a7fde":"# Continuous Numerical Variables","2245691c":"## Linear Relationship","dccf370c":"**Looking for the best option to fill the missing data**","5096be31":"`Age` and `Fare`","3499d3b2":"`Age` and `Pclass`","73f589c6":"### Identifying missing values","775875b5":"`Survived` and `Age`","39d85e8f":"`Age` and `Parch`","2f11855c":"## Cleaning Data","1e539fcf":"**Sex**","853d405b":"`Fare`","d0db02aa":"`Survived` and `Pclass`","b7d916ee":"As **most of the data in the column \"Cabin\" is missing** (687 out of 891 values --> **77%**), and I do not need the column for my analysis I deciced to **delete the column** - deleting the rows would remove 687 useful rows.","f81970e0":"* Women on board: 314 --> Average Age: 27.9\n* Men on board: 577 ---> Average Age: 30.7","95a08992":"# Exploratory Data Analysis","0de2a86d":"`Survived`, `Pclass`, `Sex` and `Age`","1e1b57a2":"* 216 Passengers in Class 1 ---> Average Age: 38.2\n* 184 Passengers in Class 2 ---> Average Age: 29.9\n* 491 Passengers in Class 2 ---> Average Age: 25.1"}}