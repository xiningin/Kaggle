{"cell_type":{"b0f74ce4":"code","6f8cdebd":"code","6719b740":"code","5c8f39c3":"code","999ef483":"code","a683c291":"code","1eda7719":"code","4b3836d2":"code","3728cb7e":"code","4c80d7a4":"code","d4d52367":"code","2835d016":"code","2c51d7f4":"markdown","f6a2c4de":"markdown","bb5d2178":"markdown","72824b6f":"markdown","13d16888":"markdown","d815ab4e":"markdown","46162975":"markdown","f16e6910":"markdown","f35d777d":"markdown","a78ae9f3":"markdown","144eedd1":"markdown","8362b693":"markdown","44f9ad20":"markdown","2e5af447":"markdown","01cbc195":"markdown","1d9a4742":"markdown","8e5b42e8":"markdown"},"source":{"b0f74ce4":"import plotly.express as px\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#plotly\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\n#datetime\nfrom datetime import datetime\nimport os\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6f8cdebd":"episodes = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Episodes.csv', parse_dates=['recording_date', 'release_date'], \n                    infer_datetime_format=True)\nyt_thmb = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/YouTube Thumbnail Types.csv')","6719b740":"episodes.head()","5c8f39c3":"data = episodes.groupby('youtube_thumbnail_type')['youtube_ctr'].mean().sort_values(ascending = False)\ndata.rename({0: 'Type 1', 1: 'Type 2', 2: 'Type 3', 3: 'Type 4' }, inplace = True)\nfig = go.Figure(go.Bar(\n            x = data.index,\n            y=data,       \n            width = .7,\n           # marker_color = colors,\n))\n\nannotations = []\nfor i in range(len(data)):\n\n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] +.2, x=i,\n                                text=data.index[i],\n                                font=dict(family='Arial', size=15,\n                                          color='rgb(0, 0, 0)'),\n                                showarrow=False))\n    \n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] - .2, x=i,\n                                text=str(round(data[i],1)) + '%',\n                                font=dict(family='Arial', size=13,\n                                          color='white'),\n                                showarrow=False))\n    \n\nlegends = ['Type 1: YouTube default image', 'Type 2: YouTube default image with custom annotation',\n               'Type 3 : Mini Series: Custom Image with annotations', 'Type 4 : Custom image with CTDS branding, Title and Tags']\n\n\nfor i in range(len(legends)):\n    \n    annotations.append(dict(xref='x', yref='y',\n                                    y=5 - i*.3, x=2.8,\n                                xanchor = 'left',yanchor = 'middle',\n                                    text= legends[i],\n                                    font=dict(family='Arial', size=13,\n                                              color='black'),\n                                    showarrow=False))\n\n#0: YouTube default image\n#1: YouTube default image with custom annotation\n#2 : Mini Series: Custom Image with annotations\n#3 : Custom image with CTDS branding, Title and Tags\n\n\n\nfig.update_layout(\n    title = dict(text = '<b>Average YouTube CTR per Thumbnail', font = dict(family = 'Droid Sans', size = 26)),\n   yaxis=dict(\n    zeroline=True,\n    showticklabels=False,\n    zerolinecolor = 'gray',\n    #domain=[0.01, 0.7],\n    ),\n   xaxis=dict(\n        showticklabels=False,        \n    ),\n   \n    plot_bgcolor= 'white',\n    annotations = annotations,\n    \n)\n\n\n\n\n\nfig.show()","999ef483":"data = episodes.groupby('category')['youtube_ctr'].mean().sort_values(ascending = False)\n#data.rename({0: 'Type 1', 1: 'Type 2', 2: 'Type 3', 3: 'Type 4' }, inplace = True)\nfig = go.Figure(go.Bar(\n            x = data.index,\n            y=data,       \n            width = .7,\n           # marker_color = colors,\n))\n\nannotations = []\nfor i in range(len(data)):\n\n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] +.1, x=i,\n                                text=data.index[i],\n                                font=dict(family='Arial', size=15,\n                                          color='rgb(0, 0, 0)'),\n                                showarrow=False))\n    \n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] - .2, x=i,\n                                text=str(round(data[i],2)) + '%',\n                                font=dict(family='Arial', size=13,\n                                          color='white'),\n                                showarrow=False))\n    \n\n\n#0: YouTube default image\n#1: YouTube default image with custom annotation\n#2 : Mini Series: Custom Image with annotations\n#3 : Custom image with CTDS branding, Title and Tags\n\n\n\nfig.update_layout(\n    title = dict(text = '<b>Average YouTube CTR per Category', font = dict(family = 'Droid Sans', size = 26)),\n   yaxis=dict(\n    zeroline=True,\n    showticklabels=False,\n    zerolinecolor = 'gray',\n    #domain=[0.01, 0.7],\n    ),\n   xaxis=dict(\n        showticklabels=False,        \n    ),\n   \n    plot_bgcolor= 'white',\n    annotations = annotations,\n    \n)\n\n\n\n\n\nfig.show()","a683c291":"\ndata = episodes.groupby('category')[['youtube_nonimpression_views', 'youtube_impression_views']].sum()\n\ntop_labels = ['Nonimpression', 'Impression']\n\ngray = 'rgb(211, 211, 211)'\nblue = 'rgb(25, 140, 229)'\n\ndata = data.loc[['Industry', 'Kaggle', 'Research', 'Other']]\n\nx_data = []\n\nfor i in data.index:\n    x_data.append(round(((data.loc[i] \/ data.loc[i].sum())*100),0).astype(int).values)\n\ny_data = list(data.index)\n\ncolors = [blue,gray, ]\nnames = ['Nonimpression', 'Impression']\n\nfig = go.Figure()\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        fig.add_trace(go.Bar(\n            x=[xd[i]], y=[yd],\n            orientation='h',\n            name = names[i],\n            marker=dict(\n                color=colors[i],\n                line=dict(color='rgb(248, 248, 249)', width=0)\n            ),\n            width = .7\n        ))\n\nfig.update_layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        autorange = 'reversed',\n    ),\n    barmode='stack',\n    #paper_bgcolor='rgb(248, 248, 255)',\n    plot_bgcolor='white',\n    #margin=dict(l=120, r=10, t=140, b=80),\n    showlegend=False,\n    autosize=False,\n    width=750,\n    height=400,\n    margin=dict(\n        l=100,\n        r=0,\n        b=50,\n        t=140,\n        pad=0\n    ),\n)\n\n\n\nannotations = []\n\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            font=dict(family='Arial', size=15,\n                                      color='rgb(67, 67, 67)'),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    if(xd[0]!=0):\n        annotations.append(dict(xref='x', yref='y',\n                                x=xd[0] \/ 2, y=yd,\n                                text=str(xd[0]) + '%',\n                                font=dict(family='Arial', size=14,\n                                          color='rgb(248, 248, 255)'),\n                                showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0]\/2+10, y=1.09,\n                                text=top_labels[0],\n                                font=dict(family='Arial', size=15,\n                                          color='rgb(67, 67, 67)'),\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd,\n                                    text=str(xd[i]) + '%',\n                                    font=dict(family='Arial', size=14,\n                                              color='black'),\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=(xd[i]+30), y=1.09,\n                                        text=top_labels[i],\n                                        font=dict(family='Arial', size=15,\n                                                  color='rgb(67, 67, 67)'),\n                                        showarrow=False))\n            space += xd[i]\n\n            \nfig.update_layout(annotations=annotations, title = dict(text = '<b>YouTube View distribution', font = dict(family = 'Droid Sans', size = 26)))\n\nfig.show()\n","1eda7719":"data = episodes.groupby('category')['youtube_views'].mean().sort_values(ascending = False)\nfig = go.Figure(go.Bar(\n            x = data.index,\n            y=data,       \n            width = .7,\n           # marker_color = colors,\n))\n\n\n\n\nannotations = []\nfor i in range(len(data)):\n\n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] +20, x=i,\n                                text=data.index[i],\n                                font=dict(family='Arial', size=18,\n                                          color='rgb(0, 0, 0)'),\n                                showarrow=False))\n    \n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] - 30, x=i,\n                                text=str(int(round(data[i],0))),\n                                font=dict(family='Arial', size=13,\n                                          color='white'),\n                                showarrow=False))\n    \n\n\nfig.update_layout(\n    title = dict(text = '<b>Average YouTube views per Category', font = dict(family = 'Droid Sans', size = 26)),\n   yaxis=dict(\n    zeroline=True,\n    showticklabels=False,\n    zerolinecolor = 'black',\n    #domain=[0.01, 0.7],\n    ),\n   xaxis=dict(\n        showticklabels=False,        \n    ),\n    \n    \n   \n    plot_bgcolor= 'white',\n    annotations = annotations,\n    \n)\n\nfig.show()","4b3836d2":"data = episodes.groupby('category')['youtube_likes'].mean().sort_values(ascending = False)\nfig = go.Figure(go.Bar(\n            x = data.index,\n            y=data,       \n            width = .7,\n           # marker_color = colors,\n))\n\n\n\n\nannotations = []\nfor i in range(len(data)):\n\n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] +.8, x=i,\n                                text=data.index[i],\n                                font=dict(family='Arial', size=18,\n                                          color='rgb(0, 0, 0)'),\n                                showarrow=False))\n    \n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] - 1, x=i,\n                                text=str(int(round(data[i],0))),\n                                font=dict(family='Arial', size=13,\n                                          color='white'),\n                                showarrow=False))\n    \n\n\nfig.update_layout(\n    title = dict(text = '<b>Average YouTube likes per category', font = dict(family = 'Droid Sans', size = 26)),\n   yaxis=dict(\n    zeroline=True,\n    showticklabels=False,\n    zerolinecolor = 'black',\n    #domain=[0.01, 0.7],\n    ),\n   xaxis=dict(\n        showticklabels=False,        \n    ),\n    \n    \n   \n    plot_bgcolor= 'white',\n    annotations = annotations,\n    \n)\n\nfig.show()","3728cb7e":"data = episodes.groupby('category')['youtube_avg_watch_duration'].mean().sort_values(ascending = False)\nepisodes['retention'] = (episodes['youtube_avg_watch_duration']) \/ episodes['episode_duration']\ndata2 = episodes.groupby('category')['retention'].mean().sort_values() * 100\n#data3 = (data \/ data2 * 100)\n\n\nfig = go.Figure(go.Bar(\n            x = data2.index,\n            y=data2,       \n            width = .7,\n           # marker_color = colors,\n))\n\n\n\n\nannotations = []\nfor i in range(len(data)):\n\n    annotations.append(dict(xref='x', yref='y',\n                                y=data2[i] +1.3, x=i,\n                                text=data2.index[i],\n                                font=dict(family='Arial', size=17,\n                                          color='rgb(0, 0, 0)'),\n                                showarrow=False))\n    \n    annotations.append(dict(xref='x', yref='y',\n                                y=data2[i] - 1.5, x=i,\n                                text = str(round(data2[i],1)) + \"%\",\n                                #text=str(secondsToText(int(round(data[i],0)))),\n                                font=dict(family='Arial', size=13,\n                                          color='white'),\n                                showarrow=False))\n    \n\n\nfig.update_layout(\n    title = dict(text = '<b>YouTube Retention Rate per Category', font = dict(family = 'Droid Sans', size = 26)),\n   yaxis=dict(\n    zeroline=True,\n    showticklabels=False,\n    zerolinecolor = 'black',\n    #domain=[0.01, 0.7],\n    ),\n   xaxis=dict(\n        showticklabels=False,        \n    ),\n    \n    \n    margin=dict(\n    l=150,\n    r=20,\n    b=100,\n    t=150,\n    pad=0\n    ),\n    \n    \n   \n    plot_bgcolor= 'white',\n    annotations = annotations,\n    \n)\n\nfig.show()","4c80d7a4":"data = episodes.groupby('anchor_thumbnail_type')['anchor_plays'].mean().sort_values(ascending = False)\ndata.rename({0: 'Type 1', 1: 'Type 2', 2: 'Type 3', 3: 'Type 4' }, inplace = True)\nfig = go.Figure(go.Bar(\n            x = data.index,\n            y=data,       \n            width = .7,\n           # marker_color = colors,\n))\n\nannotations = []\nfor i in range(len(data)):\n\n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] +30, x=i,\n                                text=data.index[i],\n                                font=dict(family='Arial', size=15,\n                                          color='rgb(0, 0, 0)'),\n                                showarrow=False))\n    \n    annotations.append(dict(xref='x', yref='y',\n                                y=data[i] - 50, x=i,\n                                text=str(int(round(data[i],0))),\n                                font=dict(family='Arial', size=13,\n                                          color='white'),\n                                showarrow=False))\n    \n\nlegends = ['Type 1: YouTube default playlist image', 'Type 2: CTDS Branding',\n               'Type 3 : Mini Series: Custom Image with annotations', 'Type 4 : Custom image with CTDS branding, Title and Tags']\n\n\nfor i in range(len(legends)):\n    \n    annotations.append(dict(xref='x', yref='y',\n                                    y=1000 - i*70, x=2.8,\n                                xanchor = 'left',yanchor = 'middle',\n                                    text= legends[i],\n                                    font=dict(family='Arial', size=13,\n                                              color='black'),\n                                    showarrow=False))\n\n#0: YouTube default image\n#1: YouTube default image with custom annotation\n#2 : Mini Series: Custom Image with annotations\n#3 : Custom image with CTDS branding, Title and Tags\n\n\n\nfig.update_layout(\n    title = dict(text = '<b>Average Anchor Plays per Thumbnail', font = dict(family = 'Droid Sans', size = 26)),\n   yaxis=dict(\n    zeroline=True,\n    showticklabels=False,\n    zerolinecolor = 'gray',\n    #domain=[0.01, 0.7],\n    ),\n   xaxis=dict(\n        showticklabels=False,        \n    ),\n   \n    plot_bgcolor= 'white',\n    annotations = annotations,\n    \n)\n\n\n\n\n\nfig.show()","d4d52367":"episodes['spotify_only_start'] = episodes['spotify_starts'] - episodes['spotify_streams']\ndata = episodes['spotify_only_start'].copy()\ndata.index = episodes['release_date'].copy()\ndata.dropna(inplace = True)\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n                    x = data.index,\n                    y = data,\n                    mode = \"lines\",\n                    name = \"Confirmed Cases\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= '',\n                    showlegend= True,\n                    line = dict(color = 'rgba(25, 140, 229, 0.8)', width = 3)\n                    ))\nfig.add_trace(go.Scatter(\n        x= [data.index[-1]],\n        y= [data[-1]],\n        mode='markers',\n        name = \"Confirmed Cases\",\n        text = '',\n        marker=dict(color='rgba(25, 140, 229, 0.8)', size= 8),\n        showlegend= False,\n        \n    ))\n\nfig.add_trace(go.Scatter(\n        x= [data.index[0]],\n        y= [data[0]],\n        mode='markers',\n        name = \"Confirmed Cases\",\n        text = '',\n        marker=dict(color='rgba(25, 140, 229, 0.8)', size= 8),\n        showlegend= False,\n        \n    ))\n\nfig.update_layout(\n    title = dict(text = '<b>Spotify only start', font = dict(family = 'Droid Sans', size = 26)),\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    \n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    plot_bgcolor='white'\n)\n\n\nannotations = []\n\nannotations.append(dict(xref='x', yref = 'y', x= data.index[0], y=data[0],\n                                  xanchor='left', yanchor='bottom',\n                                  text= str(int(data[0])),\n                                  font=dict(family='Arial',\n                                            size=20),\n                                  showarrow=True))\n\nannotations.append(dict(xref='x', yref = 'y', x= data.index[-1], y=data[-1],\n                                  xanchor='left', yanchor='bottom',\n                                  text= str(int(data[-1])),\n                                  font=dict(family='Arial',\n                                            size=20),\n                                  showarrow=True))\n\nfig.update_layout(annotations=annotations)\n\n\n\n\n\nfig.show()","2835d016":"\ndata = episodes['spotify_listeners'].copy()\ndata.index = episodes['release_date'].copy()\ndata.dropna(inplace = True)\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n                    x = data.index,\n                    y = data,\n                    mode = \"lines\",\n                    name = \"Confirmed Cases\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= '',\n                    showlegend= True,\n                    line = dict(color = 'rgba(25, 140, 229, 0.8)', width = 3)\n                    ))\nfig.add_trace(go.Scatter(\n        x= [data.index[-1]],\n        y= [data[-1]],\n        mode='markers',\n        name = \"Confirmed Cases\",\n        text = '',\n        marker=dict(color='rgba(25, 140, 229, 0.8)', size= 8),\n        showlegend= False,\n        \n    ))\n\nfig.add_trace(go.Scatter(\n        x= [data.index[0]],\n        y= [data[0]],\n        mode='markers',\n        name = \"Confirmed Cases\",\n        text = '',\n        marker=dict(color='rgba(25, 140, 229, 0.8)', size= 8),\n        showlegend= False,\n        \n    ))\n\nfig.update_layout(\n    title = dict(text = '<b>Spotify listeners', font = dict(family = 'Droid Sans', size = 26)),\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    \n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    plot_bgcolor='white'\n)\n\n\nannotations = []\n\nannotations.append(dict(xref='x', yref = 'y', x= data.index[0], y=data[0],\n                                  xanchor='right', yanchor='bottom',\n                                  text= str(int(data[0])),\n                                  font=dict(family='Arial',\n                                            size=20),\n                                  showarrow=True))\n\nannotations.append(dict(xref='x', yref = 'y', x= data.index[-1], y=data[-1],\n                                  xanchor='left', yanchor='bottom',\n                                  text= str(int(data[-1])),\n                                  font=dict(family='Arial',\n                                            size=20),\n                                  showarrow=True))\n\nfig.update_layout(annotations=annotations)\n\n\n\n\n\nfig.show()","2c51d7f4":"We have the above data. Don't you feel it looks incomprehensive? That's why I am here to help you to get interesting insights.\n\n**Let's start.**","f6a2c4de":"# **Audio**","bb5d2178":"### **Insights:**\n\n- My videos were getting **more Nonimpression views** than impression views.\n- That means videos were not getting more views from YouTube recommendations or search.\n- Maximum views were from external advertisements.\n\n### **Action:**\n\n- I kept publishing advertisements and after sometime percentage of impression views increased.","72824b6f":"\n\n### **Insights:**\n- Thumbnail **Type 4** have got the **highest** CTR. Type 4 thumbnail was 'Custom image with CTDS branding, Title and Tags'.\n- Thumbnail **Type 3** have got the **lowest** CTR. Type 3 thumbnail was 'Mini Series: Custom Image with annotation'. It looks like people are **not interested on the Mini Series**.\n- I had uploaded the Mini Series because of COVID-19. The result is low CTR.\n\n\n### **Action:**\n- Next upcoming videos thumnails were changed to Type 4. \n- Those type of Mini Series were avoided.","13d16888":"### **Insights:**\n\n- Well, retention rates of my videos were quite low. I think this happens because of my video duration.\n- My Mini Series had got more than others, because its watch duration is very less.\n\n### **Action:**\n\n- I started thinking how episode duration effect my videos.","d815ab4e":"# **YouTube**","46162975":"This analysis has divided into 2 parts. The parts are basically the analysis in 2 plaforms Audio (i.e. Anchor, Spotify, Apple podcasts) and Video (YouTube). We will analysis how some attribute \/ characteristics \/ variable affect these platforms.\n\nEvery diagram \/ graph is consist of 2 subsections \n- **Insight** : Includes findings from the diagram.\n- **Action** : The actions I had taken.\n\n","f16e6910":"### **Insights:**\n\n- Spotify listeners had **decreased**.\n- They might **started to watch my YouTube videos**.\n\n### **Action:**\n\n- Tried to make the episodes more interesting for listeners also.","f35d777d":"### **Insights:**\n\n- I was happy to see the downward trend. From 229 to 7 it's a huge change.\n- It looks like listeners are really my episodes.\n\n### **Action:**\n\n- I wanted to verify my thoughts.","a78ae9f3":"### **Insights:**\n- Videos with **Kagglers** and **Researchers** have got almost **same** CTR.\n- Videos with **Industry** people have got the **highest** CTR but not much higher than Kagglers and Researchers.\n- Other categories are the **Mini Series**, those got **low** CTR.\n- Except \"Other\", categories don't affect CTR much.\n\n### **Action:**\n- Continue with the same but **avoid the \"Other\" category**.","144eedd1":"## Anchor","8362b693":"**Chai Time Data Science Show**, is a podcast series by me. I am **Sanyam Bhutani**, the founder and the host (all in one) of this show. I had started on 21 July 2019. The first episode was released on 22 July 2019 with Kaggle 4X GM **Abhishek Thakur**.\n\nThe show consists of interviews with ML Heroes: Kagglers, Practitioners and Researchers. If you haven't yet watched an episode, you can find all of them via the links [here](https:\/\/www.youtube.com\/channel\/UCRjtBP-o5FbgRzX2BHQEFtQ). The podcast is a service to the community and contains no ads with a bi-weekly release schedule.\n\nFew days back I have released 100th episode of my show. When I noticed the subscribers count I remembered a forecasting. I have seen that is close to my subscribers count. I recieved the forcasting few months ago when I put my channel's dataset to Kaggle for getting insights. \n\n**Let me tell you the whole story.**\n\nI had recieved that forcasting and other insights from a Kaggler and I had taken some actions. For those insights are the main reason why I am here. I am mentioning those anlysis below.\n","44f9ad20":"## **Spotify**","2e5af447":"# **Conclusion:**\n\nThere were several mistake that I had made before tht competition. The competion worked as a eye opener for me.\n\n\nThis notebook contains only those visuals from that Kaggler which had helped me to reach this position. I do not saying this is the only Kaggler whose visuals helped me. There are other amazing kernels also.","01cbc195":"NOTE: The story is written by Marshal Baskey. Sorry Mr. Bhutani I have just wanted to create a story.","1d9a4742":"![CTDS2.png](attachment:CTDS2.png)","8e5b42e8":"### **Insights:**\n\n-  Type 1 and Type 2 thumbnails had got more plays.\n\n### **Action:**\n\n- I had removed Type 3 and Type 4 thumbnails."}}