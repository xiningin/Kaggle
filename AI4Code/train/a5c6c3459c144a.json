{"cell_type":{"a73df694":"code","ca41ca30":"code","14aea155":"code","4f9295d7":"code","a0ded3d4":"code","99aa3f9a":"code","e6a88824":"code","f45096ce":"code","5c721f2a":"code","a8121870":"code","990f5e60":"code","046311ed":"markdown","59efee42":"markdown","40571b4e":"markdown","a82fb799":"markdown","df8c7c7c":"markdown","0760876f":"markdown","79c40e44":"markdown","ced4ca60":"markdown"},"source":{"a73df694":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport keras\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.datasets import mnist\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n%matplotlib inline\n# Any results you write to the current directory are saved as output.","ca41ca30":"# Load Train and test dataset and normalize them\ndf_train = pd.read_csv(\"..\/input\/train.csv\")\nx_train = np.array(df_train.iloc[:,1:])\nx_train = np.array([np.reshape(i, (28, 28, 1)) for i in x_train])\ny_train = np.array(df_train.iloc[:,0])\n\nx_train = x_train\/255.0\ny_train = keras.utils.to_categorical(y_train)\n\ndf_test = pd.read_csv(\"..\/input\/test.csv\")\nx_test = np.array(df_test)\nx_test = np.array([np.reshape(i, (28, 28, 1)) for i in x_test])\nx_test = x_test\/255.0\n\nprint(x_train.shape, y_train.shape)","14aea155":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train, test_size=0.2, stratify=y_train)\nprint(X_train.shape, Y_train.shape, X_test.shape, Y_test.shape)","4f9295d7":"# Plot a sample image with label\nimg_num = 8008\nplt.imshow(x_train[img_num][:,:,0], cmap='gray')\nplt.title(np.argmax(y_train[img_num]), fontsize=25)\nplt.show()","a0ded3d4":"model = keras.models.Sequential()\n\nmodel.add(keras.layers.Conv2D(filters=32, kernel_size=(3,3), kernel_initializer='random_uniform', padding='same', activation='relu', input_shape=(X_train.shape[1:])))\nmodel.add(keras.layers.Conv2D(filters=32, kernel_size=(3,3), kernel_initializer='random_uniform', padding='same', activation='relu'))\nmodel.add(keras.layers.MaxPool2D(pool_size=(2,2)))\n\nmodel.add(keras.layers.Conv2D(filters=64, kernel_size=(5,5), kernel_initializer='random_uniform', padding='same', activation='relu'))\nmodel.add(keras.layers.Conv2D(filters=64, kernel_size=(5,5), kernel_initializer='random_uniform', padding='same', activation='relu'))\nmodel.add(keras.layers.MaxPool2D(pool_size=(2,2)))\n\nmodel.add(keras.layers.Conv2D(filters=128, kernel_size=(7,7), kernel_initializer='random_uniform', padding='same', activation='relu'))\nmodel.add(keras.layers.Conv2D(filters=128, kernel_size=(7,7), kernel_initializer='random_uniform', padding='same', activation='relu'))\nmodel.add(keras.layers.MaxPool2D(pool_size=(3,3)))\n\nmodel.add(keras.layers.Conv2D(filters=256, kernel_size=(7,7), padding='same'))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.Activation('relu'))\n\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(units=256, activation='relu'))\nmodel.add(keras.layers.Dropout(0.5))\nmodel.add(keras.layers.Dense(units=100, activation='relu'))\nmodel.add(keras.layers.Dropout(0.5))\nmodel.add(keras.layers.Dense(units=y_train.shape[1], activation='softmax'))\n\nmodel.summary()","99aa3f9a":"# Configure and train the model\nmodel.compile(loss='categorical_crossentropy',optimizer='Adam', metrics=['accuracy'])\nhistory = model.fit(X_train, Y_train,  batch_size=500, epochs=50, validation_data=(X_test,Y_test))","e6a88824":"# Plot the model Accuracy graph\nplt.figure(figsize=[8,6])\nplt.plot(history.history['acc'],'r',linewidth=3.0)\nplt.plot(history.history['val_acc'],'b',linewidth=3.0)\nplt.legend(['Training  Accuracy', 'Test Accuracy'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Accuracy',fontsize=16)\nplt.title('Accuracy Curves',fontsize=16)","f45096ce":"# img_num = 1\n# plt.imshow(X_test[img_num][:,:,0], cmap='gray')\n# plt.title(np.argmax(model.predict(X_test[img_num:img_num+1])), fontsize=25)\n# plt.show()","5c721f2a":"# for i in range(200):\n#     plt.imshow(X_test[i][:,:,0], cmap='gray')\n#     plt.title(\"{}. Predicted = {} | Actual = {}\".format(i, np.argmax(model.predict(X_test[i:i+1])), np.argmax(Y_test[i])), fontsize=15)\n#     plt.show()","a8121870":"# Predictions for the given test case\nimg_id = []\nlabel = []\nfor i in range(len(x_test)):\n    img_id.append(i+1)\n    label.append(np.argmax(model.predict(x_test[i:i+1])))\n    \nimg_id = np.array(img_id)\nlabel = np.array(label)","990f5e60":"# Convert to pandas dataframe and convert to submission file\nop_df = pd.DataFrame()\nop_df['ImageId'] = img_id\nop_df['Label'] = label\nop_df.to_csv(\"submission.csv\", index=False)","046311ed":"# Sample Plot","59efee42":"# Imports","40571b4e":"# Submission","a82fb799":"# Train the Model","df8c7c7c":"# Split the dataset into training and testing set","0760876f":"# Plot Accuracy Graph","79c40e44":"# Load the Dataset and Normalize it","ced4ca60":"# Model Architecture"}}