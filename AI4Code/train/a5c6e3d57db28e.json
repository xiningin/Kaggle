{"cell_type":{"f4542577":"code","6d9fe33a":"code","b33aea8f":"code","700dcd9a":"code","3b62496a":"code","c60c4384":"code","a4b2b73d":"code","142f349d":"code","2a4fe474":"code","3c952ff4":"code","125c7522":"code","59688625":"code","9fbcf386":"code","a83e4e76":"code","c1e9079e":"code","cd5aa91a":"code","7427a74a":"markdown","8e23efdc":"markdown","2643a37c":"markdown"},"source":{"f4542577":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport dask.dataframe as dd\nimport dask.array as da\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d9fe33a":"data= dd.read_csv('..\/input\/jane-street-market-prediction\/train.csv', blocksize=64e6)\ncol = data.columns","b33aea8f":"data = data[col[7:-1].values]","700dcd9a":"from dask_ml.impute import SimpleImputer as si\nfrom dask_ml.preprocessing import StandardScaler as ss\nfrom dask_ml.decomposition import PCA\n","3b62496a":"imputer = si()\ndata = imputer.fit_transform(data)","c60c4384":"scaler = ss()\ndata= scaler.fit_transform(data)","a4b2b73d":"data = data.to_dask_array(lengths=True)","142f349d":"import gc\ngc.collect()","2a4fe474":"data.compute_chunk_sizes()","3c952ff4":"#     * pass X.to_dask_array(lengths=True)  # for Dask DataFrame (dask >= 0.19)\n#     * pass X.compute_chunk_sizes()  # for Dask Array X (dask >= 2.4)\n#     * Use a specific SVD solver (e.g., ensure `svd_solver in ['randomized', 'tsqr', 'full']`)\npca = PCA()","125c7522":"pca.fit(data)","59688625":"d = np.argmax(np.cumsum(pca.explained_variance_ratio_)>=0.95) + 1\nprint(d)","9fbcf386":"del(pca)\npca = PCA(n_components = d)\ndata = pca.fit_transform(data)","a83e4e76":"# columns=['Date', 'Weight']\ncolumns=[]\nfor i in range(1,data.shape[1]+1):\n    columns.append('PC_'+str(i))\n# columns.append('resp')","c1e9079e":"data = data.to_dask_dataframe(columns=columns)","cd5aa91a":"data.to_csv('.\/principal_components\/pca.csv', single_file=True)","7427a74a":"# Final Notes\n\nAfter saving it, I realized that I have not include the ***weight*** or the ***resp*** in this csv file.\nBut that's no biggie, I am going to handle it in the next note book which is going to be a deep neural network implemented with with TF2 and keras! \n\ncheers!","8e23efdc":"In next few cells, I am going to first fit a PCA, see what number of top principle components can explain atleast 95% of the variance (named it ***d***).\nThen again use a new pca to fit_trarnsform the data, with specific number of components (d).\nThe reason behinde this syntax is that Dask, unlike Scikit-learn does not accept n_components=0.95 as the input argument. atleast not yet! So I guess it's the way we have to do it right now.","2643a37c":"# What's the plan?\n\nWell, this is a large data set we have here. So I am going to try a suitable tool called Dask.\nEven reading the data will be faster using dask, in comparison to Pandas.\nBut you probably knew that already. So, I am going one step further, and do some preprocessing using Dask as well!\nAnd by some preprocessing I mean, imputation, scaling and dimension reduction using PCA.\n"}}