{"cell_type":{"4d709e4a":"code","11872eb9":"code","d87844a0":"code","e38ecad3":"code","280960fe":"code","08dfc845":"code","d71a238d":"code","c0cee53a":"code","3322bbd3":"code","612ac997":"code","f9a1de4f":"code","da5f82df":"code","00c67838":"code","54f142d0":"code","faf714ea":"code","352960b3":"code","08d0f37d":"code","08c3d65a":"code","8ecc876a":"code","9c79705d":"code","b0542f01":"code","aa23c84b":"code","47adaa95":"code","b2db11dc":"code","915c4f1a":"markdown","5a7f7407":"markdown","db2bd58e":"markdown","5f6356a0":"markdown","34c9c3d8":"markdown","79ce225d":"markdown","c2aa1b72":"markdown"},"source":{"4d709e4a":"import os\nprint(os.listdir('..\/input\/coronavirus-genome-data\/data'))","11872eb9":"kfoldIndex =0 # 0 ~ 9\nnum_classes=2 \nnum_vectors=31029 # fixed size of the data","d87844a0":"import numpy as np\ndata = []\ndata = np.genfromtxt('..\/input\/coronavirus-genome-data\/data\/data.csv',delimiter=',')\ndata = np.array(data)\nprint('Dataset:', data.shape)","e38ecad3":"from sklearn import preprocessing\nstandardScaler = preprocessing.StandardScaler()\ndata = standardScaler.fit_transform(data)","280960fe":"def openVector(filepath):\n    dat = []\n    dat = np.genfromtxt(filepath,delimiter=' ')\n    print(dat.shape)\n    return dat","08dfc845":"labels = openVector('..\/input\/coronavirus-genome-data\/data\/labels.csv')\ntrainIndex= openVector('..\/input\/coronavirus-genome-data\/data\/index\/'+str(kfoldIndex)+'train_index.txt')\nvalIndex  = openVector('..\/input\/coronavirus-genome-data\/data\/index\/'+str(kfoldIndex)+'val_index.txt')\ntestIndex = openVector('..\/input\/coronavirus-genome-data\/data\/index\/'+str(kfoldIndex)+'test_index.txt')","d71a238d":"trainIndex=trainIndex.astype(int)\nvalIndex=valIndex.astype(int)\ntestIndex=testIndex.astype(int)","c0cee53a":"import tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.utils import to_categorical","3322bbd3":"trainX=[]\ntrainY=[]\nfor i in range (0,len(trainIndex)):\n    trainY.append(labels[trainIndex[i]])\n    temp=[]\n    for j in range (0,len(data[0])):\n        if(data[trainIndex[i]][j]==-1):\n            temp.append(0)\n        else:\n            temp.append(data[trainIndex[i]][j])\n    trainX.append(temp)\n\ntrainX=np.array(trainX)\ntrainY=np.array(trainY) \nprint(trainX.shape)\nprint(trainY.shape)\n\n\n# one-hot encoding\ntrainY=to_categorical(trainY)","612ac997":"print(trainX[0])","f9a1de4f":"print(trainY[0])","da5f82df":"validX=[]\nvalidY=[]\nfor i in range (0,len(valIndex)):\n    validY.append(labels[valIndex[i]])\n    temp=[]\n    for j in range (0,len(data[0])):\n        if(data[valIndex[i]][j]==-1):\n            temp.append(0)\n        else:\n            temp.append(data[valIndex[i]][j])\n    validX.append(temp)\n\nvalidX=np.array(validX)\nvalidY=np.array(validY) \nprint(validX.shape)\nprint(validY.shape)\n\n# one-hot encoding\nvalidY=to_categorical(validY)","00c67838":"testX=[]\ntestY=[]\nfor i in range (0,len(testIndex)):\n    testY.append(labels[testIndex[i]])\n    temp=[]\n    for j in range (0,len(data[0])):\n        if(data[testIndex[i]][j]==-1):\n            temp.append(0)\n        else:\n            temp.append(data[testIndex[i]][j])\n    testX.append(temp)\n\ntestX=np.array(testX)\ntestY=np.array(testY) \nprint(testX.shape)\nprint(testY.shape)\n\n# one-hot encoding\ntestY=to_categorical(testY)","54f142d0":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv1D, MaxPool1D","faf714ea":"trainX = trainX.reshape(-1,num_vectors,1)\nvalidX = validX.reshape(-1,num_vectors,1)\ninput_shape = (num_vectors,1)\nprint(trainX.shape)\nprint(validX.shape)\nprint(input_shape)","352960b3":"model = Sequential()\n\n# 1st Conv layer\nmodel.add(Conv1D(32, 3, padding='same', activation='relu', input_shape = input_shape))\nmodel.add(MaxPool1D(2, padding='same'))\n# 2nd Conv layer        \nmodel.add(Conv1D(64, 3, activation='relu', padding='same'))\nmodel.add(MaxPool1D(2, padding='same'))\n# 3rd Conv layer        \nmodel.add(Conv1D(128, 3, activation='relu', padding='same'))\nmodel.add(MaxPool1D(2, padding='same'))\n# Fully Connected layer        \nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(num_classes, activation = 'softmax'))\n\nmodel.summary()","08d0f37d":"# Compile Model\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam' , metrics = ['accuracy'])","08c3d65a":"# Train Model\nnum_epochs = 10\nmodel.fit(trainX, trainY, batch_size = 50, epochs = num_epochs, validation_data=(validX, validY));","8ecc876a":"# Evaluate Model\ntestX = testX.reshape(-1,num_vectors,1)\nscore = model.evaluate(testX, testY, verbose = 0)\nprint('Test loss: ', score[0])\nprint('Test accuracy: ', score[1])","9c79705d":"from sklearn.metrics import classification_report, confusion_matrix","b0542f01":"predY = model.predict(testX)\ny_pred = np.argmax(predY,axis=1)\ny_actual = np.argmax(testY,axis=1)\ncm = confusion_matrix(y_actual, y_pred)\nprint(cm)","aa23c84b":"print(classification_report(y_actual, y_pred, target_names=['SARS-CoV-2', 'others']))","47adaa95":"import itertools\nimport matplotlib.pyplot as plt\ndef plot_confusion_matrix(cm,\n                          target_names,\n                          title='Confusion matrix',\n                          cmap=None,\n                          normalize=True):\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n        \n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()","b2db11dc":"plot_confusion_matrix(cm, \n                      normalize=False,\n                      target_names = ['SARS-CoV-2', 'others'],\n                      title=\"Confusion Matrix, not Normalized\")","915c4f1a":"## Build Model","5a7f7407":"### PCR Amplicons sequencing procedure\n![Gene%20Sequencing.JPG](attachment:Gene%20Sequencing.JPG)","db2bd58e":"## Confusion Matrix report","5f6356a0":"### coding of the input sequences\n![image.png](attachment:image.png)","34c9c3d8":"## Dataset: Corona v5.2 data \nfrom https:\/\/github.com\/albertotonda\/deep-learning-coronavirus-genome ","79ce225d":"# Coronavirus Genome Identification","c2aa1b72":"## Confusion Matrix plot"}}