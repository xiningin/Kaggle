{"cell_type":{"4bbeb643":"code","ccb78b9b":"code","b762ffac":"code","932e00ab":"code","5b28f77e":"code","dbb1517a":"code","8850a884":"markdown","7a98df47":"markdown","60067bc5":"markdown","32e2781d":"markdown","31098960":"markdown"},"source":{"4bbeb643":"import numpy as np\nimport pandas as pd \nimport os\nimport math\n\nimport matplotlib.pyplot as plt\nimport tqdm\n\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions\n\nfrom nltk.corpus import wordnet as wn\nimport nltk\nnltk.download(\"wordnet\")","ccb78b9b":"TRAIN_PATH = \"..\/input\/petfinder-pawpularity-score\/train.csv\"\nTRAIN_IMAGE_FOLDER = \"..\/input\/petfinder-pawpularity-score\/train\"\nRESULT_PATH = \"result.csv\"\n\nFILE_EXTENSION = \"jpg\"\nBATCH_SIZE = 500\nTARGET_SIZE = (224, 224)\n\nDOG_TYPE = \"dog\"\nCAT_TYPE = \"cat\"\nOTHER_TYPE = \"other\"\nRESULT = \"result\"\n\nMODEL = ResNet50(weights='imagenet')\n\ndef get_all_hyponyms(label):\n    syn = wn.synset(label)\n    return set([w.lower() for s in syn.closure(lambda s:s.hyponyms()) for w in s.lemma_names()])\n\nDOG_HYPONYMS = get_all_hyponyms(\"dog.n.01\")\nCAT_HYPONYMS = get_all_hyponyms(\"cat.n.01\")","b762ffac":"def image2vector(imagePath):\n    img = image.load_img(imagePath, target_size=TARGET_SIZE)\n    img = image.img_to_array(img)\n    img = image.smart_resize(img, TARGET_SIZE)\n    img = np.expand_dims(img, axis=0)\n    img = preprocess_input(img)\n    \n    return img\n\ndef predictImageType(predictions):\n    probs = np.array([e[2] for e in predictions])\n\n    dog_arr = np.array([e[1].lower() in DOG_HYPONYMS for e in predictions])\n    dog = np.sum(dog_arr * probs)\n\n    cat_arr = np.array([e[1].lower() in CAT_HYPONYMS for e in predictions])\n    cat = np.sum(cat_arr * probs)\n\n    neither_arr = np.logical_and(np.logical_not(dog_arr), np.logical_not(cat_arr))\n    neither = np.sum(neither_arr * probs)\n\n    res = OTHER_TYPE\n    if dog > cat:res = DOG_TYPE;\n    elif dog < cat:res = CAT_TYPE;\n\n    return {RESULT:res, DOG_TYPE:dog, CAT_TYPE:cat, OTHER_TYPE:neither}","932e00ab":"train = pd.read_csv(TRAIN_PATH)","5b28f77e":"IDS = list(train.Id)\nNUM_BATCHES = math.ceil(len(IDS) \/ BATCH_SIZE)\n\nLABELS = []\n\nfor batch in tqdm.tqdm(range(NUM_BATCHES)):\n    images_batch = []\n\n    for filename in IDS[(BATCH_SIZE*batch):(BATCH_SIZE*batch+BATCH_SIZE+1)]:\n        img_path = f'{TRAIN_IMAGE_FOLDER}\/{filename}.{FILE_EXTENSION}'\n        img = image2vector(img_path)\n        images_batch.append(img)\n\n    # predict animal type \n    preds = MODEL.predict_on_batch(np.array(images_batch).squeeze())\n    # decode\n    decoded = decode_predictions(preds)\n    # predict label\n    batch_labels = [predictImageType(dec)[RESULT] for dec in decoded]\n    # add label list \n    LABELS += batch_labels","dbb1517a":"with open(RESULT_PATH, \"w\") as fo:\n    for img_id, label in zip(IDS, LABELS):\n        fo.write(f\"{img_id},{label}\\n\")\n        \n        \nlabels = pd.read_csv(RESULT_PATH)\nlabels.head()","8850a884":"# load data","7a98df47":"# predict image label","60067bc5":"# common functions","32e2781d":"# global variabels","31098960":"# make image label dataframe file "}}