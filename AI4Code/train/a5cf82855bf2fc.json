{"cell_type":{"0517775c":"code","dbceb259":"code","bb8f342a":"code","f8265838":"code","7850b776":"code","0a75c62b":"code","b0ce0d94":"code","0114224a":"code","bef6f53d":"markdown","9a0cb8bc":"markdown","92f6a4c9":"markdown","53b1df8d":"markdown","60f4b450":"markdown"},"source":{"0517775c":"# Import numpy, pandas, and matplotlib using the standard aliases. \n# Import the following tools from sklearn: \n#     Pipeline, SimpleImputer, ColumnTransformer, OneHotEncoder, StandardScaler\n#     LogisticRegression, DecisionTreeClassifier, RandomForestClassifier, GridSearchCV\n# Import joblib\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport joblib\nimport gc\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","dbceb259":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.drop('PassengerId', axis=1, inplace=True)\n\n# Add a new column named 'FamSize' to the DataFrame. \n# This should be the sum of the 'SibSp' and 'Parch' columns. \ntest['FamSize'] = test['SibSp'] + test['Parch']\n\n# We will use the function below to determine the deck letter for each passenger:\ndef set_deck(cabin):\n    if str(cabin) == 'nan':\n        return 'Missing'\n    return cabin[0]\n\n# Use the map() method of the train DataFrame to apply the function above \n# to the 'Cabin' column. Store the results in a new column named 'Deck'. \ntest['Deck'] = test['Cabin'].map(set_deck)\ntest.head()","bb8f342a":"preprocessor = joblib.load('..\/input\/titanic-oct21-models\/titanic_preprocessor_01.joblib')\nmodel = joblib.load('..\/input\/titanic-oct21-models\/titanic_model_01.joblib')\nprint(type(model))","f8265838":"X_test = preprocessor.transform(test)\nprint(X_test.shape)","7850b776":"# use predict instead of predict_proba\ntest_pred = model.predict(X_test)\nprint(test_pred.shape)","0a75c62b":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission.head()","b0ce0d94":"submission.Survived = test_pred[:]\nsubmission.head()","0114224a":"submission.to_csv('submission.csv', index=False, header=True)","bef6f53d":"# Load Data","9a0cb8bc":"# Titanic Oct 2021","92f6a4c9":"# Load Model","53b1df8d":"# Test Predictions","60f4b450":"# Preprocessing"}}