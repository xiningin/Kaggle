{"cell_type":{"8d674e15":"code","983549dc":"code","9a55af2c":"code","9b245930":"code","374c8caf":"code","6c0e2434":"code","07a017b0":"code","70332b6c":"code","5be16e90":"code","13e06fdd":"code","4e8c5dd1":"code","1a0fc856":"code","7a35c827":"code","4acabfb3":"code","b9485309":"code","03a5c882":"code","f24342e6":"code","df612cea":"markdown","94a172f4":"markdown","87b34496":"markdown","16d6b754":"markdown","7ad50340":"markdown","0bbad5c3":"markdown","72483fe3":"markdown","85cc852c":"markdown"},"source":{"8d674e15":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","983549dc":"df = pd.read_csv('..\/input\/test-file\/tested.csv')\ndf.head()","9a55af2c":"# Size of dataset\nprint('There are {} examples with {} features'.format(df.shape[0], df.shape[1]-1))","9b245930":"plt.figure(figsize=(15,5));\nplt.bar(df.columns, df.isna().sum());\nplt.title('Count of Missing Values in DataFrame columns');","374c8caf":"df.info()","6c0e2434":"np.random.seed(42)\n\nages = np.array((df['Age'].value_counts() \/ df.shape[0]).index.tolist())\nage_weights = (df['Age'].value_counts() \/ df['Age'].notna().sum()).values\n\nfill_vals = np.random.choice(ages, df['Age'].isna().sum(), p=age_weights)\nfill_df = pd.DataFrame(index =df.index[df.Age.isna()], data= fill_vals,columns=['Val'])\nser = pd.Series(fill_df['Val'].values, index=fill_df.index)\n\ndf['Age'] = df['Age'].fillna(ser)","07a017b0":"plt.bar(['Not Survived', 'Survived'], df['Survived'].value_counts());\nplt.title('Survived vs Not Survived');","70332b6c":"plt.hist(df['Age'], bins=15);\nplt.title('Distribution of passengers ages');","5be16e90":"fig, (ax1,ax2) = plt.subplots(1, 2)\nfig.set_size_inches(15, 8)\nax1.hist(df[df['Survived'] == 1]['Age']);\nax1.set_title('Age Distribution for survived');\n\nax2.hist(df[df['Survived'] == 0]['Age']);\nax2.set_title('Age Distribution for not survived');","13e06fdd":"# Drop Insignificant Features\nFeatures_to_drop = ['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin']\ndf.drop(Features_to_drop, inplace=True, axis=1)\ndf = df.dropna()","4e8c5dd1":"# Transform Sex and Embarked columns by label Encoding\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\ndf['Embarked'] = le.fit_transform(df['Embarked'])","1a0fc856":"# Features\ninputs = df.drop('Survived', axis=1)\ninputs.info()","7a35c827":"# Target label\ntarget = df['Survived']","4acabfb3":"# Splitting to train and test set\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(inputs, target, test_size=0.3, random_state=42)","b9485309":"# Decision tree classifier\nfrom sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier()\n\ndt.fit(x_train, y_train)","03a5c882":"from sklearn.tree import plot_tree\n\n#Create the figure\nplt.figure(figsize=(20,10))\n\n#Create the tree plot\nplot_tree(dt,\n           feature_names = inputs.columns, #Feature names\n           class_names = [\"0\",\"1\"], #Class names\n           rounded = True,\n           filled = True)\n\nplt.show()","f24342e6":"# Score on Test data\ndt.score(x_test, y_test)","df612cea":"# Data Quality","94a172f4":"# Data Cleaning","87b34496":"## Missing Values","16d6b754":"WOW!\n\nAs we can see! \n\n\nData is splitted based on the Sex only!","7ad50340":"# Feature Engineering","0bbad5c3":"## Removing Missing Values\n\nFill Age missing Values with the same age distribution","72483fe3":"# Model","85cc852c":"# Exploration"}}