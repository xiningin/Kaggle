{"cell_type":{"a91be579":"code","c658afba":"code","75d2255e":"code","389add6c":"code","d11dcb90":"code","3ef8dc0e":"code","26fe1092":"code","a6936f11":"code","5b2e1edd":"code","498e1bd8":"code","8307c347":"code","ae86be35":"code","21dda3c0":"code","1197d248":"code","f1b7d938":"code","5ee392f3":"code","7243e7bf":"code","94c822ee":"code","69872926":"code","38068fc3":"code","448f4275":"code","9807db54":"code","1b5dda0f":"code","b776bbf4":"code","4d705afa":"code","faf45199":"code","216ac228":"code","42245c88":"code","3fffb3a4":"code","5afc09b2":"code","029ae6a9":"code","4a33bbaa":"code","9a8e6af6":"code","ea8787db":"code","8c2c2e19":"code","428d6252":"markdown","2d002ba3":"markdown","52f51cc1":"markdown","6ea7dbb9":"markdown","0b7340ed":"markdown","f1f07d4c":"markdown"},"source":{"a91be579":"\n# Import library\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","c658afba":"# load the dataset\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","75d2255e":"# info\ntrain.info()","389add6c":"# describe \ntrain.describe()","d11dcb90":"# \nplt.figure(figsize=(10,5))\nsns.distplot(train['Age'])","3ef8dc0e":"# How many people survived?\nwith plt.xkcd():\n    fig = plt.figure(figsize=(20,1))\n    sns.countplot(y='Survived', data=train);\n    print(train.Survived.value_counts())\n    \n    y = train.Survived.value_counts()\n\n    for index, count in enumerate(y):\n        plt.text(count, index,\n                 str(count))\n    plt.title(\"Survived Count\")","26fe1092":"# Let's view the distribution of Sex\nwith plt.xkcd():\n    plt.figure(figsize=(20, 5))\n    sns.countplot(y=\"Sex\", data=train)\n    \n     \n    y = train.Sex.value_counts()\n\n    for index, count in enumerate(y):\n        plt.text(count, index,\n                 str(count))\n    \n    plt.title(\"Sex\")","a6936f11":"sns.kdeplot(data=train['Age'], shade=True)","5b2e1edd":"sns.displot(x='Age', hue='Survived', data=train, alpha=0.6)\nplt.show()","498e1bd8":"null_values = train.isna().sum()\nnull_values[null_values>0]\n","8307c347":"train.drop(\"PassengerId\", axis=1, inplace=True)","ae86be35":"train.select_dtypes('object')","21dda3c0":"def preprocessing_data(df):\n    \n    for label, content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isnull(content).sum():\n                df[label] = content.fillna(content.mean())\n                \n        if not pd.api.types.is_numeric_dtype(content):\n            df[label] = pd.Categorical(content).codes+1\n            \n    return df","1197d248":"train = preprocessing_data(df=train)\ntrain","f1b7d938":"train.drop(['Name','Ticket'], axis=1, inplace=True)","5ee392f3":"train","7243e7bf":"sns.boxplot(train['Age'])","94c822ee":"# Import required libraries\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom imblearn.over_sampling import SMOTE\n\n# Import metrics\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n\n","69872926":"X = train.drop('Survived', axis=1)\ny = train['Survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\n\nprint(\"----Imabalanced Classification-----\")\ncounter = Counter(y)\nprint(counter)\n\n# transform\noversample = SMOTE()\nX, y = oversample.fit_resample(X, y)\n# summarize the new class distribution\nprint(\"----Balanced Classification----\")\ncounter = Counter(y)\nprint(counter)\n\n","38068fc3":"# RandomForest\nfrom sklearn.ensemble import RandomForestClassifier\nmodel1 = RandomForestClassifier(n_jobs=-1)\nmodel1.fit(X_train, y_train)\n\ny_preds = model1.predict(X_test)\ny_preds\n\nmodel1.score(X_test, y_test)\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nscores = cross_val_score(model1, X, y, scoring='roc_auc', cv=cv, n_jobs=-1)\nscore = np.mean(scores)\n\nprint(\"------Cross_validation_scores-----\")\nprint(f\"Accuracy Score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision Score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1 Score : {f1_score(y_test, y_preds)}\")\nprint()\nprint(f\"Classification Report : {classification_report(y_test, y_preds)}\")\nprint()\nprint()\nplt.figure(figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")","448f4275":"#Decision tree\nfrom sklearn.tree import DecisionTreeClassifier\nnp.random.seed(42)\nmodel2 = DecisionTreeClassifier()\nmodel2.fit(X_train, y_train)\n\ny_preds = model2.predict(X_test)\ny_preds\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nscores = cross_val_score(model2, X, y, scoring='roc_auc', cv=cv, n_jobs=-1)\nscore = np.mean(scores)\n\nprint(\"------Cross_validation_scores-----\")\nprint(f\"Accuracy Score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision Score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1 Score : {f1_score(y_test, y_preds)}\")\nprint()\nprint(f\"Classification Report : {classification_report(y_test, y_preds)}\")\nprint()\nprint()\nplt.figure(figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")","9807db54":"## Gradient Boost\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nnp.random.seed(42)\nmodel3 = GradientBoostingClassifier()\nmodel3.fit(X_train, y_train)\n\ny_preds = model3.predict(X_test)\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nscores = cross_val_score(model3, X, y, scoring='roc_auc', cv=cv, n_jobs=-1)\nscore = np.mean(scores)\n\nprint(\"------Cross_validation_scores-----\")\nprint(f\"Accuracy Score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision Score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1 Score : {f1_score(y_test, y_preds)}\")\nprint()\nprint(f\"Classification Report : {classification_report(y_test, y_preds)}\")\nprint()\nprint()\nplt.figure(figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")","1b5dda0f":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\n\nnp.random.seed(42)\n\nmodel4 = KNeighborsClassifier()\nmodel4.fit(X_train, y_train)\n\ny_preds = model4.predict(X_test)\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nscores = cross_val_score(model4, X, y, scoring='roc_auc', cv=cv, n_jobs=-1)\nscore = np.mean(scores)\n\nprint(\"------Cross_validation_scores-----\")\nprint(f\"Accuracy Score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision Score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1 Score : {f1_score(y_test, y_preds)}\")\nprint()\nprint(f\"Classification Report : {classification_report(y_test, y_preds)}\")\nprint()\nprint()\nplt.figure(figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")","b776bbf4":"# LogisticRegression \nfrom sklearn.linear_model import LogisticRegression\n\nnp.random.seed(42)\nmodel5 = LogisticRegression()\nmodel5.fit(X_train, y_train)\n\ny_preds = model5.predict(X_test)\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nscores = cross_val_score(model5, X, y, scoring='roc_auc', cv=cv, n_jobs=-1)\nscore = np.mean(scores)\n\nprint(\"------Cross_validation_scores-----\")\nprint(f\"Accuracy Score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision Score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1 Score : {f1_score(y_test, y_preds)}\")\nprint()\nprint(f\"Classification Report : {classification_report(y_test, y_preds)}\")\nprint()\nprint()\nplt.figure(figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")","4d705afa":"## XGB\nfrom xgboost import XGBClassifier\n\nnp.random.seed(42)\nmodel6 = XGBClassifier()\nmodel6.fit(X_train, y_train)\n\ny_preds = model6.predict(X_test)\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nscores = cross_val_score(model6, X, y, scoring='roc_auc', cv=cv, n_jobs=-1)\nscore = np.mean(scores)\n\nprint(\"------Cross_validation_scores-----\")\nprint(f\"Accuracy Score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision Score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1 Score : {f1_score(y_test, y_preds)}\")\nprint()\nprint(f\"Classification Report : {classification_report(y_test, y_preds)}\")\nprint()\nprint()\nplt.figure(figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")","faf45199":"#Catboost\nfrom catboost import CatBoostClassifier\n\nnp.random.seed(42)\nmodel7 = CatBoostClassifier(verbose=0)\nmodel7.fit(X_train, y_train)\n\ny_preds = model7.predict(X_test)\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nscores = cross_val_score(model1, X, y, scoring='roc_auc', cv=cv, n_jobs=-1)\nscore = np.mean(scores)\n\nprint(\"------Cross_validation_scores-----\")\nprint(f\"Accuracy Score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision Score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1 Score : {f1_score(y_test, y_preds)}\")\nprint()\nprint(f\"Classification Report : {classification_report(y_test, y_preds)}\")\nprint()\nprint()\nplt.figure(figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")","216ac228":"y_preds = model7.predict(X_test)\ny_preds\n","42245c88":"y_pred_proba = model7.predict_proba(X_test)\ny_pred_proba = y_pred_proba[:,1]\ny_pred_proba","3fffb3a4":"#ROC Curve\n# Calculate the roc curve\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thresholds  = roc_curve(y_test, y_pred_proba)\nplt.plot(fpr, tpr, marker='*', label='roc_curve')\nplt.legend()\nplt.show()","5afc09b2":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()\n","029ae6a9":"test = test.drop(['Name', 'Ticket'], axis=1)","4a33bbaa":"test = preprocessing_data(df=test)\ntest.head()","9a8e6af6":"# MOdelling\nnp.random.seed(42)\nmodel = CatBoostClassifier(verbose=0)\nmodel.fit(X_train, y_train)\n\ny_preds = model.predict(test)\ny_preds","ea8787db":"data = pd.DataFrame()\ndata['PassengerId'] = test['PassengerId']\ndata['Survived'] = y_preds\ndata.head()","8c2c2e19":"data.to_csv('submission', index=False)","428d6252":"## Checking the Outliers","2d002ba3":"**Only 342 people has survived**","52f51cc1":"## Import Test Set","6ea7dbb9":"## Preprocessing Data","0b7340ed":"**Most of people who are on the ship are between 20-40 years of age**","f1f07d4c":"## Modelling"}}