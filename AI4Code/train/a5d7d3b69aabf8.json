{"cell_type":{"21525ac3":"code","0f285375":"code","3f9adc64":"code","bb092fe0":"code","7599b512":"code","5d1d52b2":"code","cc904f26":"code","5f69041e":"code","1b080adf":"code","60266a58":"code","78541e5f":"code","a0fb6d19":"code","0ce01269":"code","17cb597c":"code","adb4932b":"code","04fbfd7d":"code","46eec1e1":"code","85ef26cd":"code","07a89691":"code","958bf9f0":"code","53af4920":"code","d19235e9":"code","e2d4e361":"code","9fe365c9":"code","1824efb5":"code","42a33bc3":"code","7fee11c4":"code","8b091e29":"code","06a8f07d":"code","a4147c64":"code","9f784e0b":"code","53a68ad4":"code","7ef9ec5d":"code","ac8d0136":"code","84941b5b":"code","e302de75":"code","b06b9ed7":"code","b8eea382":"code","e1270544":"code","4db4c84a":"code","6fb74d45":"code","395e34fd":"code","923304c0":"code","67b5bc5b":"code","c0e8d013":"code","c41537c0":"code","e2f21a0a":"code","cc25f782":"markdown","9e5db213":"markdown","4aa3110c":"markdown","a8ffe5a2":"markdown","c0daabb3":"markdown","f1a1e75a":"markdown","ba247326":"markdown"},"source":{"21525ac3":"pip install xlrd","0f285375":"pip install openpyxl","3f9adc64":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nraw_train_data =pd.read_excel('..\/input\/predict-a-doctors-consultation-fee\/train.xlsx')","bb092fe0":"pd.set_option('display.max_rows', 10)","7599b512":"raw_train_data.head()","5d1d52b2":"raw_train_data.info()","cc904f26":"print('Total Necessary Data = ',len(raw_train_data))\nprint('Available Data = ', raw_train_data['Rating'].isna().sum())\nprint('Ratio = ', raw_train_data['Rating'].isna().sum()\/len(raw_train_data))","5f69041e":"print('Total Necessary Data = ',len(raw_train_data))\nprint('Available Data = ', raw_train_data['Miscellaneous_Info'].isna().sum())\nprint('Ratio = ', raw_train_data['Miscellaneous_Info'].isna().sum()\/len(raw_train_data))","1b080adf":"train_data1=raw_train_data.drop(['Miscellaneous_Info'], axis=1)\ntrain_data1.head()","60266a58":"train_data1['Experience']=train_data1['Experience'].str.rstrip(' years experience')\ntrain_data1['Rating']=train_data1['Rating'].str.rstrip('%')\ntrain_data1['Experience']=pd.to_numeric(train_data1['Experience'])\ntrain_data1['Rating']=pd.to_numeric(train_data1['Rating'])\ntrain_data2=train_data1\ntrain_data2.describe()","78541e5f":"train_data2['Rating'] = train_data2['Rating'].fillna(0)","a0fb6d19":"train1=train_data2[['Qualification', 'Experience', 'Place', 'Profile','Fees']]","0ce01269":"train1['Qualification'].head()","17cb597c":"qual=train1['Qualification'].str.split(',', expand=True)\nqual.head()","adb4932b":"for i in range(qual.shape[0]):\n    if len(qual[0][i])>4:\n        qual[0][i]=qual[1][i]\n    else:\n        qual[0][i]=qual[0][i]","04fbfd7d":"qual","46eec1e1":"qual3=qual[0].str.split('-', expand=True)","85ef26cd":"train1['qual']=qual3[0]","07a89691":"place=train1['Place'].str.split(',', expand=True)","958bf9f0":"train1['Place1']=place[1]","53af4920":"train1['Place1'].value_counts().plot(kind='bar')","d19235e9":"train1['Place1'].unique()","e2d4e361":"train1 = train1[train1.Place1 != ' Sector 5']","9fe365c9":"train1","1824efb5":"dummies=pd.get_dummies(train1[['Place1', 'Profile']], drop_first=True)","42a33bc3":"train2=train1.drop(['qual','Qualification','Place', 'Profile', 'Place1'], axis=1)\ntrain3=pd.concat([train2, dummies], axis=1, join='inner')\ntrain3.describe()","7fee11c4":"sns.displot(train3, x=\"Experience\", bins=200)","8b091e29":"sns.displot(train3, x=\"Fees\", bins=200)","06a8f07d":"log_exp=np.log(train3['Experience'])\ntrain3['log_exp']=log_exp\ntrain_log=train3.drop(['Experience'], axis=1)\ntrain_log.describe()","a4147c64":"train_log = train_log[train_log.log_exp != -np.inf]\ntrain_log.describe()","9f784e0b":"x_tr=train_log.drop(['Fees'], axis=1)\ny_tr=train_log['Fees']","53a68ad4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_tr, y_tr, test_size=0.2, random_state=42)","7ef9ec5d":"X_train.shape","ac8d0136":"y_train.shape","84941b5b":"y_train= y_train.values.reshape(-1, 1)\ny_test = y_test.values.reshape(-1, 1)","e302de75":"from sklearn.preprocessing import StandardScaler\nscalerX = StandardScaler().fit(X_train)\nscalery = StandardScaler().fit(y_train)\nX_train = scalerX.transform(X_train)\ny_train = scalery.transform(y_train)\nX_test = scalerX.transform(X_test)\ny_test = scalery.transform(y_test)","b06b9ed7":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)","b8eea382":"y_pred1 = model.predict(X_train)","e1270544":"mean_squared_error(y_train, y_pred1)","4db4c84a":"y_pred2 = model.predict(X_test)","6fb74d45":"mean_squared_error(y_test, y_pred2)","395e34fd":"raw_test_data =pd.read_excel('..\/input\/predict-a-doctors-consultation-fee\/test.xlsx')","923304c0":"test_data1=raw_test_data.drop(['Miscellaneous_Info'], axis=1)\n\ntest_data1['Experience']=test_data1['Experience'].str.rstrip(' years experience')\ntest_data1['Rating']=test_data1['Rating'].str.rstrip('%')\ntest_data1['Experience']=pd.to_numeric(test_data1['Experience'])\ntest_data1['Rating']=pd.to_numeric(test_data1['Rating'])\n\ntest_data2=test_data1\n\ntest_data2['Rating'] = test_data2['Rating'].fillna(0)\n\ntest1=test_data2[['Qualification', 'Experience', 'Place', 'Profile']]\n\nplace1=test1['Place'].str.split(',', expand=True)\ntest1['Place1']=place1[1]\n\ndummies1=pd.get_dummies(test1[['Place1', 'Profile']], drop_first=True)\ntest2=test1.drop(['Qualification','Place', 'Profile', 'Place1'], axis=1)\ntest3=pd.concat([test2, dummies1], axis=1, join='inner')\n\nlog_exp1=np.log(test3['Experience'])\ntest3['log_exp']=log_exp1\ntest_log=test3.drop(['Experience'], axis=1)\ntest_log = test_log[test_log.log_exp != -np.inf]\n\ntest_log = scalerX.transform(test_log)","67b5bc5b":"y_pred3 = model.predict(test_log)","c0e8d013":"y_new_inverse = scalery.inverse_transform(y_pred3)","c41537c0":"Predicted_Fees=pd.DataFrame(y_new_inverse, columns=['Fees'])","e2f21a0a":"Predicted_Fees.to_excel(r'.\/Predicted_Fees.xlsx', index = False)","cc25f782":"Mean Squared Error Check","9e5db213":"Predicting Fees for test data","4aa3110c":"Export the output","a8ffe5a2":"Input of Data","c0daabb3":"Train & Test Split","f1a1e75a":"DATA CLEANING","ba247326":"Normalization of the Clean data"}}