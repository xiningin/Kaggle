{"cell_type":{"ce2741a1":"code","5e114bf3":"code","4484c2a3":"code","567e5459":"code","bbcc17a2":"code","d8b8baa3":"code","e090460a":"code","33d5f265":"code","ccd9808c":"code","a79e9bb4":"code","c8f49854":"code","d7c36ff4":"markdown","c0f37ce0":"markdown","e70456a3":"markdown","5a227395":"markdown"},"source":{"ce2741a1":"!pip install pyspark","5e114bf3":"import pyspark\nfrom pyspark.sql import SparkSession\nspark = SparkSession.builder.getOrCreate()","4484c2a3":"import numpy as np\nimport scipy.sparse as sps\nfrom pyspark.ml.linalg import Vectors","567e5459":"from pyspark.ml import Pipeline\nfrom pyspark.ml.feature import StringIndexer, VectorIndexer, VectorAssembler, IndexToString\nfrom pyspark.ml.classification import DecisionTreeClassifier, RandomForestClassifier\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator","bbcc17a2":"path = '..\/input\/car-acceptability-prediction\/train.csv'\n\ntrain = spark.read.csv(path, header=True).drop('acceptability')\n\npath = '..\/input\/car-acceptability-prediction\/test.csv'\n\ntest = spark.read.csv(path, header=True)\n\ndf = train.union(test)","d8b8baa3":"path = '..\/input\/car-acceptability-prediction\/train.csv'\n\ntrain = spark.read.csv(path, header=True)\n\ndf_train = StringIndexer(inputCol='buying_price', outputCol = 'buying_price_index').fit(train).transform(train)\ndf_train = StringIndexer(inputCol='maintenance_price', outputCol = 'maintenance_price_index').fit(train).transform(df_train)\ndf_train = StringIndexer(inputCol='trunk_size', outputCol = 'trunk_size_index').fit(train).transform(df_train)\ndf_train = StringIndexer(inputCol='safety', outputCol = 'safety_index').fit(train).transform(df_train)\ndf_train = StringIndexer(inputCol='carry_capacity', outputCol = 'carry_capacity_index').fit(train).transform(df_train)\ndf_train = StringIndexer(inputCol='number_of_doors', outputCol = 'number_of_doors_index').fit(train).transform(df_train)\n\ndf_train = VectorAssembler(inputCols = ['maintenance_price_index', 'number_of_doors_index', \\\n                                    'carry_capacity_index', 'trunk_size_index', 'safety_index',\n                                    'buying_price_index'], outputCol=\"features\").transform(df_train)\n\ndf_train = df_train.select('car_id', 'maintenance_price_index', 'number_of_doors_index', 'carry_capacity_index', \n                           'trunk_size_index', 'buying_price_index', 'safety_index', 'features', 'acceptability')\n\nlabelIndexer = StringIndexer(inputCol=\"acceptability\", outputCol=\"indexedLabel\").fit(df_train)\nfeatureIndexer = VectorIndexer(inputCol=\"features\", outputCol=\"indexedFeatures\", maxCategories=4).fit(df_train)","e090460a":"dt = RandomForestClassifier(labelCol=\"indexedLabel\", featuresCol=\"indexedFeatures\", \\\n                            numTrees = 35, maxDepth=10,seed=5)\npipeline = Pipeline(stages=[labelIndexer, featureIndexer, dt])\nmodel = pipeline.fit(df_train)","33d5f265":"predictions = model.transform(df_train)\n\n# Select example rows to display.\npredictions.select(\"prediction\", \"indexedLabel\", \"features\").show(5)\n\n# Select (prediction, true label) and compute test error\nevaluator = MulticlassClassificationEvaluator(\n    labelCol=\"indexedLabel\", predictionCol=\"prediction\", metricName=\"accuracy\")\naccuracy = evaluator.evaluate(predictions)\nprint(\"Test Error = %g \" % (1.0 - accuracy))\nprint(\"Accuracy = %g \" % (accuracy))\n\ntreeModel = model.stages[2]\n# summary only\nprint(treeModel)","ccd9808c":"path = '..\/input\/car-acceptability-prediction\/test.csv'\n\ntest = spark.read.csv(path, header=True)\n\ndf_test = StringIndexer(inputCol='buying_price', outputCol = 'buying_price_index').fit(train).transform(test)\ndf_test = StringIndexer(inputCol='maintenance_price', outputCol = 'maintenance_price_index').fit(train).transform(df_test)\ndf_test = StringIndexer(inputCol='trunk_size', outputCol = 'trunk_size_index').fit(train).transform(df_test)\ndf_test = StringIndexer(inputCol='safety', outputCol = 'safety_index').fit(train).transform(df_test)\ndf_test = StringIndexer(inputCol='carry_capacity', outputCol = 'carry_capacity_index').fit(train).transform(df_test)\ndf_test = StringIndexer(inputCol='number_of_doors', outputCol = 'number_of_doors_index').fit(train).transform(df_test)\n\ndf_test = VectorAssembler(inputCols = ['maintenance_price_index', 'number_of_doors_index', \\\n                                    'carry_capacity_index', 'trunk_size_index', 'safety_index',\n                                    'buying_price_index'], outputCol=\"features\").transform(df_test)\n\nfeatureIndexer = VectorIndexer(inputCol=\"features\", outputCol=\"indexedFeatures\", maxCategories=4).fit(df_test)","a79e9bb4":"predictions = model.transform(df_test).select('car_id', 'prediction')","c8f49854":"converter = IndexToString(inputCol=\"prediction\", outputCol=\"acceptability\", \\\n                          labels = ['unacc', 'acc', 'good', 'vgood'] )\\\n                        .transform(predictions).select('car_id', 'acceptability')\n\nconverter.toPandas().to_csv('result.csv', index = False)","d7c36ff4":"Random Forest","c0f37ce0":"1. Q.Thu\u1eadn 18521470\n2. T.Hi\u1ebfu 18520758\n3. T.Thi\u00ean 18521431","e70456a3":"Train","5a227395":"Test"}}