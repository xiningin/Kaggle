{"cell_type":{"d66c2169":"code","b0717dd8":"code","8997d80f":"code","b57ae621":"code","8ea159fd":"code","1a15a4a4":"code","63900174":"code","69aaf865":"code","d918ecdb":"code","a9e2f5fb":"code","0c0378c8":"code","d238a100":"code","42bcd9a9":"code","388ca760":"code","8c1f15a3":"code","73737b16":"code","7f2ec037":"code","f8b7801e":"code","c9c033d8":"code","7b230fd1":"code","e2750643":"code","55eeb0ef":"code","3a6ee59d":"code","7218772b":"code","da406e26":"code","f4920d59":"code","7780949a":"code","119a1f85":"code","3ee5112f":"code","21f83396":"code","f04530ff":"code","f2e56313":"code","4bd348a7":"code","402751f3":"code","0794db9a":"code","ac5591f1":"code","f858d1d2":"code","4b320af4":"code","95dfd44a":"code","4437c6f6":"code","7d52e046":"code","43515a82":"code","f44b698c":"code","7fd2d7c0":"code","0e867135":"code","f4bd0881":"code","e26b4e11":"code","64c4dfe8":"code","d06764fc":"code","0bc7d29e":"code","da75e70a":"code","0136d753":"code","64754efa":"code","63bcf0d9":"code","5e968acd":"code","33a00b59":"code","02858e5f":"code","2b509547":"code","0500f168":"code","99d63b14":"code","d3ac1805":"code","746a7a1b":"code","ed60b1e5":"code","da8c5d02":"code","def76dce":"code","5a096e5a":"code","24ce74b4":"markdown","6089633d":"markdown","acac27f0":"markdown","59f92fa1":"markdown","4571ac09":"markdown","ded17a3d":"markdown","938a5360":"markdown","c15d7549":"markdown","32907192":"markdown","60228e5f":"markdown","6d1831ab":"markdown","1dd1933f":"markdown","78cd768f":"markdown","2160044c":"markdown","43cf757a":"markdown","2b891b62":"markdown","ff8caa3b":"markdown","1f68ef6b":"markdown","adc6051d":"markdown","c03a3eda":"markdown","905e317b":"markdown","a5436e77":"markdown","a0b86114":"markdown","32bcc5e9":"markdown","71a7a16d":"markdown","a70d47d2":"markdown","caddb55a":"markdown","dfa61cd1":"markdown","7af3808d":"markdown","350a67af":"markdown","e3e970a2":"markdown","3c1ea316":"markdown","cd4eb892":"markdown"},"source":{"d66c2169":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b0717dd8":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","8997d80f":"test_data=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","b57ae621":"women=train_data.loc[train_data.Sex=='female']['Survived']\nrate_women=sum(women)\/len(women)\nprint('{} proportion of women Survived on titanic. '.format(rate_women))","8ea159fd":"men=train_data.loc[train_data.Sex=='male']['Survived']\nrate_men=sum(men)\/len(women)\nprint('{} proportion of men Survived on titanic. '.format(rate_men))","1a15a4a4":"plt.subplots(figsize=(5,5))\na=train_data.groupby([\"Survived\"])['Sex'].count()\ncolors = ['pink', 'yellow']\n\na.plot.pie(colors=colors,autopct='%1.1f%%',shadow=True, startangle=175)","63900174":"plt.subplots(figsize=(5,5))\na=train_data.groupby([\"Sex\"]).Sex.count()\ncolors = ['red', 'blue']\n\na.plot.pie(colors=colors,autopct='%1.1f%%',shadow=True, startangle=175)","69aaf865":"pd.crosstab(train_data.Sex,train_data.Survived,margins=True).style.background_gradient(cmap='summer_r')\n","d918ecdb":"train_data.shape","a9e2f5fb":"columns=train_data.columns\nfor i in columns:\n    print(i,'has :',train_data[i].nunique(),'Unique Values')","0c0378c8":"train_data.isnull().sum()","d238a100":"train_data.info()","42bcd9a9":"plt.figure(figsize=(8,5))\nsns.countplot('Survived',data=train_data,palette=\"rainbow\")\nplt.title('Survived')\nplt.show()\nprint(train_data[['Survived']].count())\ntrain_data['Survived'].value_counts()","388ca760":"print('The % of people reported dead  on the Titanic:',(train_data['Survived'].value_counts()[0]\/np.sum(train_data['Survived'].value_counts()))*100)\nprint('The % of people who survived on the Titanic:',(train_data['Survived'].value_counts()[1]\/np.sum(train_data['Survived'].value_counts()))*100)","8c1f15a3":"sns.set(style='darkgrid')\nfig,axes=plt.subplots(1,2,figsize=(18,8))\ntrain_data['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'],ax=axes[0])\naxes[0].set_title('Number Of Passengers By Pclass')\naxes[0].set_ylabel('Count')\nsns.countplot('Pclass',hue='Survived',data=train_data,ax=axes[1])\naxes[1].set_title('Pclass:Survived vs Dead')\nplt.show()\nprint(train_data[['Pclass']].count())\nprint(train_data['Pclass'].value_counts())\n","73737b16":"plt.figure(figsize=(10,7))\nsns.countplot(train_data.Pclass,hue=train_data.Sex,palette=\"plasma_r\")\npd.crosstab([train_data.Sex,train_data.Survived],train_data.Pclass,margins=True).style.background_gradient(cmap='summer_r')","7f2ec037":"sns.set(style='whitegrid')\nf,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=train_data,palette=\"OrRd_r\",ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train_data,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()\n","f8b7801e":"train_data['Age'].mean()","c9c033d8":"train_data['Prefix']=0\nfor i in train_data:\n    train_data['Prefix']=train_data.Name.str.extract('([A-Za-z]+)\\.')","7b230fd1":"train_data['Prefix'].unique()","e2750643":"train_data['Prefix'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)","55eeb0ef":"train_data.groupby(['Prefix'])['Age'].mean()","3a6ee59d":"train_data.loc[(train_data.Age.isnull())&(train_data.Prefix=='Mr'),'Age']=33\ntrain_data.loc[(train_data.Age.isnull())&(train_data.Prefix=='Mrs'),'Age']=36\ntrain_data.loc[(train_data.Age.isnull())&(train_data.Prefix=='Master'),'Age']=5\ntrain_data.loc[(train_data.Age.isnull())&(train_data.Prefix=='Miss'),'Age']=22\ntrain_data.loc[(train_data.Age.isnull())&(train_data.Prefix=='Other'),'Age']=46","7218772b":"train_data['Age'].isnull().any()","da406e26":"sns.set(style=\"darkgrid\")\nfig,ax=plt.subplots(1,2,figsize=(15,8))\ntrain_data[train_data['Survived']==0].Age.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='red')\nax[0].set_title('DEATHS')\ntrain_data[train_data['Survived']==1].Age.plot.hist(ax=ax[1],bins=20,edgecolor='black',color='green')\nax[1].set_title('SURVIVALS')\nplt.show()","f4920d59":"plt.figure(figsize=(12,5))\nsns.set(style=\"darkgrid\")\nsns.countplot(train_data.Embarked,hue=train_data.Survived,palette='gist_heat_r')\n","7780949a":"plt.figure(figsize=(10,7))\nsns.countplot(y=\"Pclass\", hue=\"Sex\", data=train_data,palette=\"cool_r\")","119a1f85":"fig,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked',data=train_data,ax=ax[0,0],palette=\"CMRmap\")\nax[0,0].set_title('Port Of Embarkment')\nsns.countplot('Embarked',hue='Pclass',data=train_data,ax=ax[0,1],palette=\"autumn_r\")\nax[0,1].set_title('Embarked port V\/S Pclass')\nsns.countplot('Embarked',hue='Survived',data=train_data,ax=ax[1,0],palette=\"CMRmap_r\")\nax[1,0].set_title('Embarked port V\/S Survived')\nsns.countplot('Embarked',hue='Sex',data=train_data,ax=ax[1,1],palette=\"icefire_r\")\nax[1,1].set_title('Embarked port V\/S Sex')\nplt.show()\n","3ee5112f":"train_data['Embarked'].fillna('S',inplace=True)","21f83396":"train_data.Embarked.isnull().any()","f04530ff":"fig,ax=plt.subplots(1,2,figsize=(15,8))\nsns.barplot('SibSp','Survived',data=train_data,ax=ax[0])\nax[0].set_title('Sibsp V\/S Survived')\nsns.barplot('SibSp','Pclass',hue='Survived',data=train_data,ax=ax[1])\nax[1].set_title('Sibsp in Different Pclass V\/S Survived')\nplt.show()","f2e56313":"pd.crosstab([train_data.Pclass,train_data.Survived],train_data.SibSp).style.background_gradient(cmap='summer_r')","4bd348a7":"train_data.isnull().sum()","402751f3":"train_data['Cabin'].values","0794db9a":"drop_column = ['PassengerId','Cabin', 'Ticket']\ntrain_data.drop(drop_column, axis=1, inplace = True)","ac5591f1":"train_data.head()","f858d1d2":"pd.crosstab(train_data.Parch,train_data.Survived).style.background_gradient(cmap='summer_r')","4b320af4":"train_data['Parch'].value_counts()","95dfd44a":"train_data.Parch.count()","4437c6f6":"train_data['Parch'].unique()","7d52e046":"plt.figure(figsize=(12,10))\ncorr_back = train_data.corr()\n\n\nmask = np.zeros_like(corr_back, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nsns.heatmap(corr_back, mask=mask, center=0, square=True, linewidths=.5)\n\nplt.show()","43515a82":"train_data.info()","f44b698c":"train_data['Sex'] = pd.get_dummies(data=train_data['Sex'],drop_first=True)","7fd2d7c0":"train_data['Embarked'] = pd.get_dummies(data=train_data['Embarked'],drop_first=True)","0e867135":"train_data['Name'] = pd.get_dummies(data=train_data['Name'],drop_first=True)","f4bd0881":"train_data['Prefix'] = pd.get_dummies(data=train_data['Prefix'],drop_first=True)","e26b4e11":"X = train_data[['Pclass', 'Fare', 'Parch','Sex', 'Embarked']]\ny = train_data['Survived']","64c4dfe8":"from sklearn.model_selection import train_test_split\nX_train,X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, stratify = y)","d06764fc":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nlr=LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)\nprint(accuracy_score(y_test,y_pred))","0bc7d29e":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV","da75e70a":"dt=DecisionTreeClassifier(max_depth=4)\ndt.fit(X_train,y_train)\nd_pred=lr.predict(X_test)\nprint(accuracy_score(y_test,d_pred))","0136d753":"# Create the parameter grid \nparam_grid = {\n    'max_depth': range(5, 15, 5),\n    'min_samples_leaf': range(50, 150, 50),\n    'min_samples_split': range(50, 150, 50),\n    'criterion': [\"entropy\", \"gini\"]\n}\n\nn_folds = 5\n\n# Instantiate the grid search model\ndtree = DecisionTreeClassifier()\ngrid_search = GridSearchCV(estimator = dtree, param_grid = param_grid, \n                          cv = n_folds, verbose = 1)\n\n# Fit the grid search to the data\ngrid_search.fit(X_train,y_train)","64754efa":"grid_search.best_params_","63bcf0d9":"grid_search.best_score_","5e968acd":"dt_default1 = DecisionTreeClassifier(max_depth=5,min_samples_leaf=100,min_samples_split=50,criterion='entropy')\ndt_default1.fit(X_train, y_train)\ndt_pred=dt_default1.predict(X_test)\nprint(accuracy_score(y_test,dt_pred))","33a00b59":"import xgboost as XG","02858e5f":"xg = XG.XGBClassifier(objective='binary:logistic',\nn_estimators=10, seed=101)\nxg.fit(X_train, y_train)\npreds = xg.predict(X_test)\naccuracy = float(np.sum(preds==y_test))\/y_test.shape[0]\nprint(\"accuracy: %f\" % (accuracy))\n","2b509547":"test_data['Sex'] = pd.get_dummies(data=test_data['Sex'],drop_first=True)","0500f168":"test_data['Embarked']=pd.get_dummies(data=test_data['Embarked'],drop_first=True)","99d63b14":"test_data.drop(['Name','Ticket','Cabin','Age'],axis=1,inplace=True)\n","d3ac1805":"test_data.drop(['SibSp'],axis=1,inplace=True)","746a7a1b":"test_data['Fare'] = test_data['Fare'].fillna(0)","ed60b1e5":"test_data['Fare'] = test_data['Fare'].astype('int')","da8c5d02":"X_test_set = test_data[['Pclass', 'Fare','Parch','Sex', 'Embarked']]","def76dce":"predictions = xg.predict(X_test_set)","5a096e5a":"submission = pd.DataFrame({'PassengerId':test_data.PassengerId,'Survived':predictions})\nsubmission.Survived = submission.Survived.astype(int)\nprint(submission.shape)\nfilename = 'Titanic Predictions.csv'\nsubmission.to_csv(filename,index=False)\nprint('Saved file: ' + filename)\nprint(\"Your submission was successfully saved!\")","24ce74b4":"# How many Survived?","6089633d":"Now that we know the mean values of each prefix,lets impute now.","acac27f0":"* Here,the PClass is divided into 3:\n1.First Class\n2.Second Class\n3.Third Class\n\nFrom above visualization,we can say that,most passengers opted for Pclass 3 or the lower passenger class.(491)\nAfter the Lower class,most people opted for the 1st Class.(216)\nThe least number of people opted for the middle class .(184)\n\n* Now about the survival:\n1. Most people from the First class or PClass 1 survived.Of 216,136 survived and 80 were reported dead.\n2. In the Middle class or PClass 2 the number of people who were reported dead surpassed those who survived.out of 184 people, around 87 survived but 97 were reported Dead.\n3. The 3rd or the lower class  has the most number of people's deaths reported, out of 491 who boarded the ship as lower class passengers, only 119 survived and a whopping 372 people were reported dead.\n\n\n\n\nWe can clearly say that the Lower Class people are most affected.","59f92fa1":"From the above visualization,it can easily be said that not a lot of people survived the disaster.\n\n\nApproximately 38.4% people survived in the training set of the data.\n\n\n\nWhich is 342 of the total 891 passengers have survived .","4571ac09":"Continuous Features:Sibsp,Parch,Fare,Survived,Age.\n\n\n\nCategorical Features:Sex,Embarked,Cabin,Ticket,Name.\n\n\n\nOrdinal:Pclass.\n\n\nAccording to my Knowledge the Target variable:Survived should be a categorical variable too,but since it is already encoded,they have assumed it to be as a continuous and have given it an int datatype.This makes no effect on our analysis and hence we leave it untouched.\n\n","ded17a3d":"Since these features dont seem to have any direct relationship with the target and dont add much value to our data we will drop the below features.","938a5360":"# Important information of the Data:\npclass: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\n\n\nage: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n\n\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n\n\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.","c15d7549":"    Let us see the number of unique values in Each column and the nature of the columns(categorical or continuous).","32907192":"From the above countplot we can say that the maximum number of people embarked at port 'S'\n\n1.Number of Deaths is least for the embark port Q.\n\n\n2.Number of Deaths is most for embark port 'S'\n\n\n3.Embark port 'C' has the most number of survivers.","60228e5f":"# Logistic Regeression:","6d1831ab":"# Sibsp feature:","1dd1933f":"The number of Males on the ship overall was more compared to the number of women on the ship.The bifurcation is as follows:\n\nPClass1:94 females,122 males.\n\n\nPclass2:76 females,108 males.\n\n\nPClass3:144 females,347 males.\n\n\nThe passenger class 3 had the most number of men and women on the Titanic train data.\n\n\n\nFrom the Survival perspective in terms of Gender:\n* Mortality of women in the first class was extremely low.\n* Mortality rate of women in the Third class was the highest amongst the Passenger classes,Survived number of females was equal to the number of women who were reported dead in third class.\n\n* Mortality rate of men was much more than that of women overall.\n* As  above we can see that the Third Passenger Class had the highest number of male deaths.\n* The relative number of male survival was more in Passenger Class 1 and least in Passenger Class 3.\n\n\n\nIt is evident that money can take you places. Sad but true.\n\n\n","78cd768f":"# Let us analyse age now:","2160044c":"## From the above Barplots and Crosstabulation we can come to the following conclusion:\n* The Pclass 3 had most number of Casualities.\n* The people who travelled with more family memebers were worstly affected by the disaster,mostly because the people with more family members travelled in the 3rd Class.\n* People with more than 4 family members barely survived.\n\n\n\n","43cf757a":"our age data has 177 null values, we could replace them with mean but if we do so,we will encounted a problem of insignificant predictions as mean age of the data is 30 years but the ship comprises of people of all age groups.\n\n\nWe cannot just assign them with 30 years.Hence we shall see different prefixes in name and decide which age group person is having what as prefix and when we decide that we can easily impute the null values.\n\nFirst we will take all the prefixes and get the mean ages of each prefixes,based on the mean ages of all the prefixes, we impute corresponding null values.","2b891b62":"# Cabin:","ff8caa3b":"# Test data:","1f68ef6b":"# Going by the order, let us now evaluate the relationship of the target with the Passenger Class:","adc6051d":"Kids and Elder people and women were saved and Survived more compared to other sexes and age groups.\n","c03a3eda":"From the above data we can tell that women were Prioritised in terms of rescue,We also know that **Sex** and **Pclass** are two important features for analysis.","905e317b":"We will impute null values of Embarked with 'S' as we saw that the majority boarded at port 'S'","a5436e77":"# XGboost:","a0b86114":"More children who boarded with the nanny survived.","32bcc5e9":"# Model Building:","71a7a16d":"sibsp: The dataset defines family relations in this way... Sibling = brother, sister, stepbrother, stepsister Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)","a70d47d2":"Age has 177 null values,Cabin-687 and Embarked-2.","caddb55a":"Port 'S' had most number of people on board, also most Rich folks boarded here, Pclass-1.It also had most number of people from PClass 3 onboard and majority in them were men and hence we have the most number of deaths from Port 'S' and PClass 3.In Port 'S' survival rate of both. men and women seems quiet low.\n\n\nPort 'C' embarkers had the most survival rate and most of the survivers were from PClass1.\n\n\n\nPort 'Q' had majority od Pclass 3 passengers,Males being more than females,Survivalas were less that the ones reported dead.\n\n\n\n","dfa61cd1":"# Embarked Feature:","7af3808d":"there are some prefixes that are misplaced: like Mlle or Mme that stand for Miss. I will replace them with Miss and the relevant for other values","350a67af":"Turns out that the first letter in Cabiun values first letter signifies the deck in which they are located.","e3e970a2":"# Decision Tree","3c1ea316":"# As we can see from above the Survival rate of Women on the Titanic was higher than that of men.\n\n# The below Cross Tablulation Quantifies my observation pertaining to the Gender bias in the Survival on the train_data .","cd4eb892":"* Children less than 10 years of age were saved despite the Passenger Class they belonged to.\n* As the age of men increases the Survival Rate decreased.\n* More passengers Survived in the Age range 20-50"}}