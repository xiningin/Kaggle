{"cell_type":{"ecb9b591":"code","84ee0a95":"code","9fd9c7f2":"code","5c94d916":"code","1159251e":"code","e8d8dbcb":"code","e0e8c9fa":"code","d066339f":"code","168432a6":"code","9b3b9fdc":"code","04c327c5":"code","06015fae":"code","80ffb7bb":"code","3b18b008":"code","2bec7c9f":"code","8eb45d22":"code","370171ea":"markdown","abbbfdbc":"markdown","feb6525e":"markdown","83d7ea02":"markdown","7f05b774":"markdown","588af2ad":"markdown","465b47b1":"markdown","528fce4c":"markdown","e83db6eb":"markdown","be88734d":"markdown","7bb1d17c":"markdown","0e833a4b":"markdown","6db4fac2":"markdown","f9e8f9c2":"markdown","264934f5":"markdown","dba8e3cd":"markdown","235d0d2a":"markdown","5237d2b7":"markdown","da685758":"markdown","678be6c7":"markdown","96abf8df":"markdown","dda33a87":"markdown","7ad3c05e":"markdown","441db65c":"markdown","bc186d0e":"markdown","f35fe217":"markdown"},"source":{"ecb9b591":"import tensorflow as tf\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nprint(tf.__version__)","84ee0a95":"mnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()","9fd9c7f2":"sns.countplot(y_train)","5c94d916":"np.isnan(x_train).any()","1159251e":"np.isnan(x_test).any()","e8d8dbcb":"input_shape = (28, 28, 1)\n\nx_train=x_train.reshape(x_train.shape[0], x_train.shape[1], x_train.shape[2], 1)\nx_train=x_train \/ 255.0\nx_test = x_test.reshape(x_test.shape[0], x_test.shape[1], x_test.shape[2], 1)\nx_test=x_test\/255.0","e0e8c9fa":"y_train = tf.one_hot(y_train.astype(np.int32), depth=10)\ny_test = tf.one_hot(y_test.astype(np.int32), depth=10)","d066339f":"plt.imshow(x_train[100][:,:,0])\nprint(y_train[100])","168432a6":"batch_size = 64\nnum_classes = 10\nepochs = 5","9b3b9fdc":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (5,5), padding='same', activation='relu', input_shape=input_shape),\n    tf.keras.layers.Conv2D(32, (5,5), padding='same', activation='relu'),\n    tf.keras.layers.MaxPool2D(),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(64, (3,3), padding='same', activation='relu'),\n    tf.keras.layers.Conv2D(64, (3,3), padding='same', activation='relu'),\n    tf.keras.layers.MaxPool2D(strides=(2,2)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])\n\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(epsilon=1e-08), loss='categorical_crossentropy', metrics=['acc'])\n","04c327c5":"class myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('acc')>0.995):\n      print(\"\\nReached 99.5% accuracy so cancelling training!\")\n      self.model.stop_training = True\n\ncallbacks = myCallback()","06015fae":"history = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    validation_split=0.1,\n                    callbacks=[callbacks])","80ffb7bb":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training Loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"Validation Loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training Accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation Accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","3b18b008":"test_loss, test_acc = model.evaluate(x_test, y_test)","2bec7c9f":"# Predict the values from the testing dataset\nY_pred = model.predict(x_test)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert testing observations to one hot vectors\nY_true = np.argmax(y_test,axis = 1)\n# compute the confusion matrix\nconfusion_mtx = tf.math.confusion_matrix(Y_true, Y_pred_classes) ","8eb45d22":"plt.figure(figsize=(10, 8))\nsns.heatmap(confusion_mtx, annot=True, fmt='g')","370171ea":"# 2. Data Preprocessing\n\nBefore building any ML model, it is important to preprocess the data. In fact, data preprocessing will generally take up the most time in any ML pipeline. The following module goes over the steps to preprocess the MNIST dataset for our purposes.","abbbfdbc":"This tutorial is an introduction to Convolutional Neural Networks using TensorFlow 2.x Keras API. The dataset that we will work it is the MNIST dataset, a dataset of handwritten digits 0-9, and we will use a Sequential CNN to predict which digit was drawn.\n\nThis model reaches 99.3% accuracy.\n\nTo prepare our notebook, run the next cell to import the necessary packages and change the accelerator from ```None``` to ```GPU```.","feb6525e":"There seems to be a slightly higher confusion between (0,6) and (4,9). This is reasonable as 0's and 6's look similar with their loops and 4's and 9's can be mistaken when the 4's are more rounded and 9's are more angular.","83d7ea02":"## 2.3 Normalization and Reshaping\n\nSince the values in our ```x_train``` dataset are 28x28 images, our input shape must be specified so that our model will know what is being inputed.\n\nThe first convolution layer expects a single 60000x28x28x1 tensor instead of 60000 28x28x1 tensors.\n\nModels generally run better on normalized values. The best way to normalize the data depends on each individual dataset. For the MNIST dataset, we want each value to be between 0.0 and 1.0. As all values originally fall under the 0.0-255.0 range, divide by 255.0.\n\nRun the following cell to define the ```input_shape``` and to normalize and reshape the data.","7f05b774":"## 2.1 Load Data\n\nOur first step is to load the data and divide it into a training and testing dataset. The MNIST dataset can be downloaded directly from TensorFlow and has already been divided. Run the next cell to import the data.\n\n``` x_train ``` is the dataset of 28x28 images of handwritten digits that the model will be trained on.\n\n```y_train``` is the dataset of labels that correspond to ```x_train```. \n\n``` x_test ``` is the dataset of 28x28 images of handwritten digits that the model will be tested on.\n\n```y_test``` is the dataset of labels that correspond to ```x_test```. ","588af2ad":"Adapted from [Keras GitHub Example](http:\/\/github.com\/keras-team\/keras\/blob\/master\/examples\/mnist_cnn.py) and [Yassine Ghouzam's NB](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6)\n\nTensorFlow 1.x --> TensorFlow 2.x\n\nSciKit Learn --> TensorFlow","465b47b1":"# 1. Introduction","528fce4c":"The image is an image of a handwritten ```5```. The one-hot encoding holds the value of ```5```.","e83db6eb":"# 3. CNN\n\nIn this module, we will build our CNN model.","be88734d":"## 2.5 Visualize Data\n\nRun the following cell to visualize an image in our dataset.","7bb1d17c":"Testing the model on a validation dataset prevents overfitting of the data. We specified a 10% validation and 90% training split.","0e833a4b":"## 4.3 Confusion Matrix\n\nRun the following cell to compute our confusion matrix using TensorFlow.","6db4fac2":"Run the following cell to build the model. The model contains various layers stacked on top of each other. The output of one layer feeds into the input of the next layer.\n\nConv2D layers are convolutions. Each filter (32 in the first two convolution layers and 64 in the next two convolution layers) transforms a part of the image (5x5 for the first two Conv2D layers and 3x3 for the next two Conv2D layers). The transformation is applied on the whole image.\n\nMaxPool2D is a downsampling filter. It reduces a 2x2 matrix of the image to a single pixel with the maximum value of the 2x2 matrix. The filter aims to conserve the main features of the image while reducing the size.\n\nDropout is a regularization layer. In our model, 25% of the nodes in the layer are randomly ignores, allowing the network to learn different features. This prevents overfitting.\n\n```relu``` is the rectifier, and it is used to find nonlinearity in the data. It works by returning the input value if the input value >= 0. If the input is negative, it returns 0.\n\nFlatten converts the tensors into a 1D vector.\n\nThe Dense layers are an artificial neural network (ANN). The last layer returns the probability that an image is in each class (one for each digit).\n\nAs this model aims to categorize the images, we will use a ```categorical_crossentropy``` loss function. ","f9e8f9c2":"## 3.2 Fit the Training Data\n\nThe next step is to fit our training data. If we achieve a certain level of accuracy, it may not be necessary to continue training the model, especially if time and resources are limited.\n\nThe following cell defines a CallBack so that if 99.5% accuracy is achieved, the model stops training. The model is not likely to stop prematurely if only 5 epochs are specified. Try it out with more epochs.","264934f5":"## 2.2 Check for NaN Values","dba8e3cd":"Run the following code to see the counts of each digit present in our training dataset.","235d0d2a":"## 2.4 Label Encoding\n\nThe labels for the training and the testing dataset are currently categorical and is not continuous. To include categorical dataset in our model, our labels should be converted to one-hot encodings.\n\nFor example, ```2``` becomes ```[0,0,1,0,0,0,0,0,0,0]``` and ```7``` becomes ```[0,0,0,0,0,0,0,1,0,0]```.\n\nRun the following cell to transform the labels into one-hot encodings","5237d2b7":"## 4.2 Predict Results","da685758":"## 3.1 Define the Model\n\nRun the following cell to define ```batch_size```, ```num_classes```, and ```epochs```. Try changing the values and test how different values affect the accuracy of the CNN model.","678be6c7":"Our model runs pretty well, with an accuracy of 99.3% on our testing data.","96abf8df":"There are no NaN values in our dataset. There is no need to preprocess the data to deal with Nan's.","dda33a87":"# 4. Evaluate the Model","7ad3c05e":"Run the following cell to plot the confusion matrix.","441db65c":"There are similar counts for each digit. This is good as the model will have enough images for each class to train the features for each class. There is no need to downsample or upweigh.","bc186d0e":"## 4.1 Loss and Accuracy Curves\n\nRun the following cell to evaluate the loss and accuracy of our model.","f35fe217":"The accuracy increases over time and the loss decreases over time. However, the accuracy of our validation set seems to slightly decrease towards the end even thought our training accuracy increased. Running the model for more epochs might cause our model to be susceptible to overfitting."}}