{"cell_type":{"f872d421":"code","565ca9d0":"code","170bb02d":"code","0bf22706":"code","09b3ead0":"code","9b393425":"code","db54f708":"code","fb566fdf":"code","743f1760":"code","f869c72a":"code","cce64673":"code","7d5a0385":"code","1f01f723":"code","ae5e861a":"code","8847b958":"code","a0e8ce5c":"code","737ff021":"code","549181b8":"code","19e73738":"markdown","8484ea3d":"markdown","267c3aff":"markdown","3ba73569":"markdown","72b74f8a":"markdown","39feac88":"markdown","c0a338ab":"markdown","9f6a78e8":"markdown"},"source":{"f872d421":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas import Series, DataFrame\nfrom termcolor import colored as cl# text customization\n# Input data files are available in the read-only \"..\/input\/\" \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","565ca9d0":"plt.rc(\"font\",size=14)\nplt.rcParams['axes.grid']=True\nplt.figure(figsize=(6,3))\nplt.gray","170bb02d":"from matplotlib.backends.backend_pdf import PdfPages\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn import metrics\n#from sklearn.impute import SimpleImputer, MissingIndicator\nfrom sklearn.preprocessing import PolynomialFeatures, KBinsDiscretizer,FunctionTransformer\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\n#from sklearn.preprocessing  import LabelEncoder, OneHotEncoder,LabelBinarizer, OrdinalEncoder\n\nimport statsmodels.formula.api as smf \nimport statsmodels.tsa as tsa\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz, export\n\nfrom sklearn.ensemble import BaggingClassifier, BaggingRegressor, RandomForestClassifier, RandomForestRegressor, GradientBoostingClassifier, GradientBoostingRegressor, AdaBoostClassifier, AdaBoostRegressor\nfrom sklearn.svm import LinearSVC, LinearSVR, SVC, SVR\n\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import f1_score, accuracy_score, confusion_matrix\n","0bf22706":"#import data set\ndata=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')\ndata.head()","09b3ead0":"total_transactions=len(data)\nnormal=len(data[data.Class==0])\nfraud=len(data[data.Class==1])\nfraud_percent=round(fraud\/normal*100,2)\nprint('total=', total_transactions, 'normal=',normal, 'fraud=', fraud,'fraud_percentage =', fraud_percent)","9b393425":"data.info()","db54f708":"min(data.Amount), max(data.Amount)","fb566fdf":"sc=StandardScaler()\namount=data['Amount'].values\ndata['Amount']=sc.fit_transform(amount.reshape(-1,1))","743f1760":"data.drop(['Time'],axis=1, inplace=True)","f869c72a":"data.drop_duplicates(inplace=True)","cce64673":"X=data.drop('Class', axis=1).values\ny=data['Class'].values","7d5a0385":"X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.25,random_state=1)","1f01f723":"dt=DecisionTreeClassifier(max_depth=4,criterion='entropy')\ndt.fit(X_train, y_train)\ndt_pred=dt.predict(X_test)\ndt_accuracy=accuracy_score(y_test,dt_pred)\nprint('decision tree accuracy', dt_accuracy)\n\ndt_f1score=f1_score(y_test,dt_pred)\nprint('decision tree f1score', dt_f1score)\nprint('dt confusion matrix',confusion_matrix(y_test, dt_pred, labels = [0, 1]))","ae5e861a":"n=8\nknn=KNeighborsClassifier(n_neighbors=n)\nknn.fit(X_train, y_train)\nknn_pred=knn.predict(X_test)\n\nknn_accuracy=accuracy_score(y_test,knn_pred)\nprint('knn accuracy', knn_accuracy)\n\nknn_f1score=f1_score(y_test,knn_pred)\nprint('knn accuracy', knn_f1score)\nprint(' knn confusion matrix',confusion_matrix(y_test, knn_pred, labels = [0, 1]))","8847b958":"lr=LogisticRegression()\nlr.fit(X_train, y_train)\nlr_pred=lr.predict(X_test)\n\nlr_accuracy=accuracy_score(y_test,lr_pred)\nprint('lr accuracy', lr_accuracy)\n\nlr_f1score=f1_score(y_test,lr_pred)\nprint('lr accuracy', lr_f1score)\nprint(' lr confusion matrix',confusion_matrix(y_test, lr_pred, labels = [0, 1]))","a0e8ce5c":"svm=SVC()\nsvm.fit(X_train, y_train)\nsvm_pred=svm.predict(X_test)\n\nsvm_accuracy=accuracy_score(y_test,svm_pred)\nprint('svm accuracy', svm_accuracy)\n\nsvm_f1score=f1_score(y_test,svm_pred)\nprint('svm accuracy', svm_f1score)\nprint(' svm confusion matrix',confusion_matrix(y_test, svm_pred, labels = [0, 1]))","737ff021":"rf=RandomForestClassifier(max_depth=5)\nrf.fit(X_train, y_train)\nrf_pred=rf.predict(X_test)\n\nrf_accuracy=accuracy_score(y_test,rf_pred)\nprint('rf accuracy', rf_accuracy)\n\nrf_f1score=f1_score(y_test,rf_pred)\nprint('rf accuracy', rf_f1score)\nprint(' rf confusion matrix',confusion_matrix(y_test, rf_pred, labels = [0, 1]))","549181b8":"xgb = XGBClassifier(max_depth = 4)\nxgb.fit(X_train, y_train)\nxgb_pred=xgb.predict(X_test)\n\nxgb_accuracy=accuracy_score(y_test,xgb_pred)\nprint('xgb accuracy', xgb_accuracy)\n\nxgb_f1score=f1_score(y_test,xgb_pred)\nprint('xgb accuracy', xgb_f1score)\nprint(' xgb confusion matrix',confusion_matrix(y_test, xgb_pred, labels = [0, 1]))","19e73738":"k means","8484ea3d":"We got 95% accuracy and good f1 score in xgboost","267c3aff":"svm","3ba73569":"# models","72b74f8a":"xgboost","39feac88":"Random forest","c0a338ab":"logistic regression","9f6a78e8":"# Data processing and understanding"}}