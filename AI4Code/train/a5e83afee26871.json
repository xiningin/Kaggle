{"cell_type":{"d9e41e6f":"code","194f9b64":"code","95f32617":"code","4f7cb7b3":"code","2e964288":"code","49ee1610":"code","88848679":"code","6c7d544a":"code","b3b504a0":"code","5244962c":"code","0b4c1e38":"code","ee23e1ad":"code","793aaa65":"code","39e65944":"code","df8d1fe6":"code","a06b5f7c":"code","da9cc18c":"code","fc567c13":"code","33d17edf":"code","34416bc8":"code","2a602a8c":"code","c6bd6b66":"code","a10c57ce":"code","4dd8d374":"code","21e82805":"code","41ee1bbc":"code","4511b425":"code","90ca95e3":"code","4596ebda":"code","bac8c6d4":"code","62987625":"code","b0719ef5":"code","3eda289b":"code","c03bb4c4":"code","07fb0a2e":"code","367e6eb3":"code","451a2d9e":"code","97330a23":"code","ba596004":"code","1b81fe27":"code","c00fd574":"code","c79ffdc2":"code","9e51cb2d":"code","a806f045":"code","23552445":"code","aa9ed125":"code","692e6420":"code","cb8e96a6":"code","5225fb1b":"code","1ed79edb":"code","3bcc2e70":"code","69b71d56":"markdown","8ee9b229":"markdown","2378eca4":"markdown","b39147c4":"markdown","05863a4d":"markdown","a5fd9608":"markdown","18ffd11a":"markdown","758caa2e":"markdown","0e720634":"markdown","99e1bb8d":"markdown","e8a6319d":"markdown","4c51768c":"markdown","79370bd4":"markdown","eb2da283":"markdown","4607a65c":"markdown","54b83b95":"markdown","3bee68a9":"markdown"},"source":{"d9e41e6f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport numpy\nimport seaborn as sns\nimport random\n%matplotlib inline\nimport plotly.express as px\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","194f9b64":" df=pd.read_csv(\"\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv\") ","95f32617":"df.head()  #shows the mathes dataset\n","4f7cb7b3":"df['date']= pd.to_datetime(df['date'])\ndf['season'] = pd.DatetimeIndex(df['date']).year  #extract season (year) from the date and add another colmn in dataframe\ndf.head()","2e964288":"df.isnull().sum() # find total  number of nulls in each column\n","49ee1610":"df.info() ","88848679":"df.city.unique()  #get the unique values to remove the descripencies","6c7d544a":"df.city.replace({\"Bangalore\":\"Bengaluru\"}, inplace = True)","b3b504a0":"df.city.unique()","5244962c":"df.city.replace({'Bengaluru':1,\n                 'Chandigarh':2,\n                  'Delhi':3,\n                 'Mumbai':4,\n                 'Kolkata':5,\n                 'Jaipur':6,\n                 'Hyderabad':7,\n                 'Chennai':8,\n                 'Cape Town':9,\n                 'Port Elizabeth':10,\n                 'Durban':11,\n                 'Centurion':12,\n                 'East London':13,\n                 'Johannesburg':14, \n                 'Kimberley':15,\n                'Bloemfontein':16,\n                 'Ahmedabad':17, \n                 'Cuttack':18,\n                 'Nagpur':19,\n                 'Dharamsala':20,\n                 'Kochi':21,\n                 'Indore':22,\n                 'Visakhapatnam':23,\n                 'Pune':24,\n                 'Raipur':25,\n                 'Ranchi':26,\n                 'Abu Dhabi':27,\n                 'Rajkot':28, 'Kanpur':29, 'Dubai':30, 'Sharjah':31},inplace=True)","0b4c1e38":"df.head()","ee23e1ad":"df.venue.unique()","793aaa65":"df.venue.replace({'Feroz Shah Kotla Ground':'Feroz Shah Kotla',\n                    'M Chinnaswamy Stadium':'M. Chinnaswamy Stadium',\n                    'MA Chidambaram Stadium, Chepauk':'M.A. Chidambaram Stadium',\n                     'M. A. Chidambaram Stadium':'M.A. Chidambaram Stadium',\n                     'Punjab Cricket Association IS Bindra Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'Punjab Cricket Association Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'IS Bindra Stadium':'Punjab Cricket Association Stadium',\n                    'Rajiv Gandhi International Stadium, Uppal':'Rajiv Gandhi International Stadium',\n                    'Rajiv Gandhi Intl. Cricket Stadium':'Rajiv Gandhi International Stadium'},inplace=True)","39e65944":"df.venue.unique()","df8d1fe6":"df.isnull()","a06b5f7c":"null1=sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')#heatmap to show the missing values\nnull1.set_title(\"all null values\")  ","da9cc18c":"sns.set_style('whitegrid')\nax=sns.countplot(x='winner',data=df)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")","fc567c13":"sns.set_style('whitegrid')\nax=sns.countplot(x='winner',hue='toss_decision',data=df,palette='rainbow')\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")","33d17edf":"def winner_on_toss(name_of_the_team):\n    match_winner = df[(df['toss_winner']==name_of_the_team) & (df['winner']==name_of_the_team)]\n    winner_counts = match_winner['toss_decision'].value_counts()\n    total_count=winner_counts['field']+winner_counts['bat']\n    winner_when_bat = winner_counts['bat']\/total_count*100\n    winner_when_feild = winner_counts['field']\/total_count*100\n    print(\"Total fielding count = \"+ str(winner_counts['field']))\n    print(\"total batting count = \" + str(winner_counts['bat']))\n    print(\"percentage win when batting was choosen = \" + str(winner_when_bat))\n    print(\"percentage win when fielding was choosen = \" + str(winner_when_feild))\n\n    data = [['Fielding',  winner_when_feild], ['Batting', winner_when_bat]]\n    data = pd.DataFrame (data,columns=['Decision','Win_%age'])\n    return(px.pie( data , values= 'Win_%age' , names='Decision', title='percentage win of '+ name_of_the_team  + ' on basis of  toss decision',color_discrete_sequence=px.colors.sequential.Rainbow))\n\n            \nname_of_the_team=\"Mumbai Indians\"  #can use \"iput\" for user input\nplot =  winner_on_toss(name_of_the_team)\nplot","34416bc8":"def find_city(cols):\n    city=cols[0]\n    venue=cols[1]\n    \n    if pd.isnull(city):\n        if venue==\"M. Chinnaswamy Stadium\" or venue==\"M.Chinnaswamy Stadium\":\n           return 1\n        elif venue==\"Punjab Cricket Association Stadium\":\n           return 2\n        elif venue==\"Feroz Shah Kotla\":\n           return 3\n        elif venue=='Wankhede Stadium':\n           return 4\n        elif venue==\"Eden Gardens\":\n           return 5\n        elif venue==\"Sawai Mansingh Stadium\":\n           return 6\n        elif venue==\"Rajiv Gandhi International Stadium\":\n           return 7\n        elif venue==\"M.A. Chidambaram Stadium\":\n           return 8\n        elif venue==\"Dr DY Patil Sports Academy\":\n           return 4\n        elif venue==\"Newlands\":\n           return 9\n        elif venue==\"St George's Park\":\n           return 10\n        elif venue==\"Kingsmead\":\n           return 11\n        elif venue==\"SuperSport Park\":\n           return 12\n        elif venue==\"Buffalo Park\":\n           return 13\n        elif venue==\"New Wanderers Stadium\":\n           return 14\n        elif venue==\"De Beers Diamond Oval\":\n           return 15\n        elif venue==\"OUTsurance Oval\":\n           return 16\n        elif venue==\"Brabourne Stadium\":\n           return 4\n        elif venue==\"Sardar Patel Stadium, Motera\":\n           return 17\n        elif venue==\"Barabati Stadium\":\n           return 18\n        elif venue==\"Vidarbha Cricket Association Stadium, Jamtha\":\n           return 19\n        elif venue==\"Himachal Pradesh Cricket Association Stadium\":\n           return 20\n        elif venue==\"Nehru Stadium\":\n          return 21\n        elif venue==\"Holkar Cricket Stadium\":\n          return 22\n        elif venue==\"Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium\":\n          return 23\n        elif venue==\"Subrata Roy Sahara Stadium\":\n          return 24\n        elif venue==\"Shaheed Veer Narayan Singh International Stadium\":\n          return 25\n        elif venue==\"JSCA International Stadium Complex\":\n          return 26\n        elif venue==\"Sheikh Zayed Stadium\":\n          return 27\n        elif venue==\"Sharjah Cricket Stadium\":\n          return 31\n        elif venue==\"Dubai International Cricket Stadium\":\n          return 30\n        elif venue==\"Maharashtra Cricket Association Stadium\":\n          return 24\n        elif venue==\"Saurashtra Cricket Association Stadium\":\n          return 28\n        elif venue==\"Green Park\":\n          return 29\n        \n    else :\n            return city\n        \n       \n        \n        \n        ","2a602a8c":"df['city'] = df[['city','venue']].apply(find_city,axis=1)","c6bd6b66":"null1=sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nnull1.set_title(\"all null values\")","a10c57ce":"df.isnull().sum() #total null values in particular column","4dd8d374":"df.drop('method',axis=1,inplace=True)","21e82805":"null1=sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nnull1.set_title(\"all null values\")","41ee1bbc":"df = df[df['result_margin'].notna()]","4511b425":"null1=sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nnull1.set_title(\"all null values\")","90ca95e3":"def player_MOM_for_teams(player_name):\n    for value in df.groupby('player_of_match'):\n        if value[0] == player_name:\n            return value[1]['winner'].value_counts()\n\n\nplayer_name = \"MEK Hussey\" #can use \"iput\" for user input\ndf1 = player_MOM_for_teams(  player_name  ).to_frame().reset_index().rename(columns = {'index' : 'Team' , 'winner' : 'Count'})\ndf1","4596ebda":"df.head()","bac8c6d4":"df.team1.unique()","62987625":"df.team1.replace({'Royal Challengers Bangalore':1,\n                 'Kings XI Punjab':2,\n                 'Delhi Daredevils':3,\n                 'Mumbai Indians':4,\n                 'Kolkata Knight Riders':5,\n                 'Rajasthan Royals':6,\n                 'Deccan Chargers':7,\n                 'Chennai Super Kings':8,\n                 'Kochi Tuskers Kerala':9,\n                 'Pune Warriors':10,\n                 'Sunrisers Hyderabad':11,\n                 'Gujarat Lions':12,\n                 'Rising Pune Supergiants':13,\n                 'Rising Pune Supergiant':13,\n                 'Delhi Capitals':14},inplace=True)","b0719ef5":"df.team2.replace({'Royal Challengers Bangalore':1,\n                 'Kings XI Punjab':2,\n                 'Delhi Daredevils':3,\n                 'Mumbai Indians':4,\n                 'Kolkata Knight Riders':5,\n                 'Rajasthan Royals':6,\n                 'Deccan Chargers':7,\n                 'Chennai Super Kings':8,\n                 'Kochi Tuskers Kerala':9,\n                 'Pune Warriors':10,\n                 'Sunrisers Hyderabad':11,\n                 'Gujarat Lions':12,\n                 'Rising Pune Supergiants':13,\n                 'Rising Pune Supergiant':13,\n                 'Delhi Capitals':14},inplace=True)","3eda289b":"df.winner.replace({'Royal Challengers Bangalore':1,\n                 'Kings XI Punjab':2,\n                 'Delhi Daredevils':3,\n                 'Mumbai Indians':4,\n                 'Kolkata Knight Riders':5,\n                 'Rajasthan Royals':6,\n                 'Deccan Chargers':7,\n                 'Chennai Super Kings':8,\n                 'Kochi Tuskers Kerala':9,\n                 'Pune Warriors':10,\n                 'Sunrisers Hyderabad':11,\n                 'Gujarat Lions':12,\n                 'Rising Pune Supergiants':13,\n                 'Rising Pune Supergiant':13,\n                 'Delhi Capitals':14},inplace=True)","c03bb4c4":"df.toss_winner.replace({'Royal Challengers Bangalore':1,\n                 'Kings XI Punjab':2,\n                 'Delhi Daredevils':3,\n                 'Mumbai Indians':4,\n                 'Kolkata Knight Riders':5,\n                 'Rajasthan Royals':6,\n                 'Deccan Chargers':7,\n                 'Chennai Super Kings':8,\n                 'Kochi Tuskers Kerala':9,\n                 'Pune Warriors':10,\n                 'Sunrisers Hyderabad':11,\n                 'Gujarat Lions':12,\n                 'Rising Pune Supergiants':13,\n                 'Rising Pune Supergiant':13,\n                 'Delhi Capitals':14},inplace=True)","07fb0a2e":"df['date'] = pd.to_datetime(df['date'])\nlis = []\nfor value in df.groupby('season'):\n    lis.append( [value[0] , str(value[1].head(1).reset_index().date.dt.date[0]) , str(value[1].tail(1).reset_index().date.dt.date[0]) ] ) #gives start and end date of the season\n\ndate_info = pd.DataFrame( lis , columns = ['Season' , 'Start Date' , 'End Date'])\ndate_info","367e6eb3":"df.drop(['id','date','player_of_match','result','eliminator','umpire1','umpire2','venue','toss_decision'],axis=1,inplace=True)","451a2d9e":"train=df\ntrain","97330a23":"from sklearn.model_selection import train_test_split   #traing  and testing ","ba596004":"X_train, X_test, y_train, y_test = train_test_split(train.drop('winner',axis=1), \n                                                    train['winner'], test_size=0.30, \n                                                    random_state=101)","1b81fe27":"from sklearn.linear_model import LogisticRegression\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","c00fd574":"logmodel = LogisticRegression(max_iter=10000)\nlogmodel.fit(X_train,y_train)","c79ffdc2":"logmodel.score(X_train,y_train)","9e51cb2d":"predictions = logmodel.predict(X_test)","a806f045":"from sklearn.metrics import confusion_matrix","23552445":"accuracy=confusion_matrix(y_test,predictions)","aa9ed125":"accuracy","692e6420":"\nfrom sklearn.metrics import accuracy_score","cb8e96a6":"\naccuracy=accuracy_score(y_test,predictions)\naccuracy","5225fb1b":"\npredictions","1ed79edb":"from sklearn.metrics import classification_report\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3bcc2e70":"print(classification_report(y_test,predictions))","69b71d56":"#   **Exploratory Data Analysis**\n\nwe can do some exploratory data analysis.\n\n*We can use seaborn to create a simple heatmap to see where we are missing data!*","8ee9b229":"considering only values which are not null from result_margin","2378eca4":"Data cleaning \n\nBelow function will fill the city in the database based on the venue and no null values will be here in city","b39147c4":"The below countplot shows  wins based on the toss_decision","05863a4d":"All yellow colored lines represent missing values and the columns are shown in x axis \nmissing values are present in column city,result_margin and menthod","a5fd9608":"Removing the descripencies and properly structuring the datavalues","18ffd11a":"Dropping unwanted columns","758caa2e":"Reading the data from csv to the dataframe using pandas","0e720634":"1. here we can understand that mumbai indians have highest number of wins","99e1bb8d":"the below heatmap shows that the null values in city are filled now ","e8a6319d":"Let us do some analysis\n\nthe below countplot shows the number of wins of each team \nand based on the graph we can undertand which team has highest number of wins","4c51768c":"Building a Logistic Regression model","79370bd4":"Manually encoding the columns","eb2da283":"Importing required libraries","4607a65c":"Dropping the unwanted column","54b83b95":"Show all the coulmns present in the dataset","3bee68a9":"Data analysis and prediction using logistic Regression on IPL  dataset  (matches) "}}