{"cell_type":{"e4ae57f4":"code","51f5abd1":"code","68659c9b":"code","41d714db":"code","0e03041b":"code","21e589c7":"code","9974e9f7":"code","e94aa7d5":"code","2c974a87":"code","2303acb2":"code","5dc5b94a":"code","54a8e666":"code","eb7d232a":"code","a60689ee":"code","4de0091c":"code","d8c9564d":"code","29737706":"code","afdfb25d":"code","f93a9f8d":"code","8b9eb8f9":"code","e777e186":"code","aa0953fb":"code","78ead4c2":"markdown","5444be61":"markdown","ffd20d45":"markdown","5d43a02d":"markdown","3728d1ac":"markdown","ccb0fd6a":"markdown","c0aed67b":"markdown"},"source":{"e4ae57f4":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom sklearn.preprocessing import RobustScaler, MinMaxScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split","51f5abd1":"TRAIN_TEST_SPLIT = 0.7\nVALIDATION_SPLIT = 0.2\nEPOCHS = 128\nBATCH_SIZE = 64\nDENSE1=64\n\noptimizer = tf.keras.optimizers.Adam()\nloss = tf.keras.losses.SparseCategoricalCrossentropy()\n#scaler = RobustScaler()\nscaler = MinMaxScaler()","68659c9b":"data = pd.read_csv('..\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')\ndata.head()","41d714db":"data.shape","0e03041b":"data.drop(['gameId','redKills','redDeaths',\n           'blueGoldDiff','redGoldDiff','blueExperienceDiff','redExperienceDiff',\n           'blueCSPerMin','redCSPerMin','blueAssists','redAssists',\n           'blueWardsPlaced','redWardsPlaced','blueWardsDestroyed','redWardsDestroyed',\n           'redFirstBlood','blueAvgLevel','redAvgLevel','blueHeralds','redHeralds','blueTotalJungleMinionsKilled',\n          'redTotalJungleMinionsKilled','blueTowersDestroyed','redTowersDestroyed'], \n          axis=1, inplace=True)","21e589c7":"# Shuffle\ndata= data.sample(frac=1).reset_index(drop=True)","9974e9f7":"# Extract label\ny = data['blueWins']","e94aa7d5":"X = data.drop('blueWins', axis=1, inplace=False)\n#scaler = RobustScaler()\n#X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","2c974a87":"X.head()","2303acb2":"y.head()","5dc5b94a":"sns.heatmap(X.corr())","54a8e666":"pca = PCA(n_components=3)\npca.fit(X)\n\nplt.figure(figsize=(10,10))\nplt.hist(pca.explained_variance_ratio_)\nplt.show()\n\nX_PCA = pd.DataFrame(pca.transform(X), columns=['PC1', 'PC2', 'PC3'])","eb7d232a":"X=pd.DataFrame(scaler.fit_transform(X_PCA), columns=X_PCA.columns)\n\nplt.figure(figsize=(14,10))\nplt.scatter(X['PC1'], X['PC2'])\nplt.show()\nplt.figure(figsize=(14,10))\nplt.scatter(X['PC1'], X['PC3'])\nplt.show()","a60689ee":"num_examples = X.shape[0]\nnum_train_examples = int(np.floor(num_examples*TRAIN_TEST_SPLIT))\nnum_test_examples = int(np.ceil(num_examples-num_train_examples))\n\nprint(f\"samples: {num_examples}  train: {num_train_examples} test: {num_test_examples}\")","4de0091c":"inputs = tf.keras.Input(shape=[X.shape[1],])\nx = tf.keras.layers.Dense(DENSE1, activation=tf.nn.sigmoid)(inputs)\n# x = tf.keras.layers.Dense(8, activation=tf.nn.relu)(x)\n\noutputs = tf.keras.layers.Dense(2, activation=tf.nn.softmax)(x)\n\nmodel = tf.keras.Model(\n    inputs = inputs,\n    outputs = outputs\n)\nmodel.summary()","d8c9564d":"result=model.compile(\n    optimizer = optimizer, \n    loss = loss,\n    metrics = ['accuracy']\n)","29737706":"# This validates our choice of 'accuracy' metric if close to 0.5\ny.sum()\/y.shape[0]","afdfb25d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1-TRAIN_TEST_SPLIT)","f93a9f8d":"X_train.head()","8b9eb8f9":"result = model.fit(x=X_train, \n          y=y_train, \n          batch_size=BATCH_SIZE,\n          epochs=EPOCHS,\n          verbose=1,\n          validation_split=VALIDATION_SPLIT,\n          shuffle=True)","e777e186":"plt.figure(figsize=(10,10))\nplt.plot(range(EPOCHS), result.history['loss'], color='b')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.show()\n\nplt.figure(figsize=(10,10))\nplt.plot(range(EPOCHS), result.history['val_accuracy'], color='r')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.show()\nnp.argmax(result.history['val_accuracy'])","aa0953fb":"loss, accuracy = model.evaluate(x=X_test, y=y_test)","78ead4c2":"# Model","5444be61":"# END placeholder","ffd20d45":"# Training","5d43a02d":"# Parameters","3728d1ac":"# Dimensionality Reduction","ccb0fd6a":"# Results","c0aed67b":"# Data"}}