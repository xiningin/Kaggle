{"cell_type":{"0845c4b6":"code","b05bb508":"code","181058e4":"code","8a03859e":"code","11dfc407":"code","e6754c2e":"code","6604a34e":"code","e996e037":"code","e1d4f5ec":"code","b3418cae":"code","e8124d20":"code","3168edc2":"code","071b7828":"code","0091f182":"code","cfdc16e7":"code","984fe817":"code","8b2bced9":"code","8e15312c":"code","de7bd10e":"code","45d09837":"markdown","23e4eb14":"markdown","bfbce884":"markdown","4d180eba":"markdown","0c9a5dcf":"markdown","32091aa9":"markdown","c326e8d5":"markdown","fd9ed7d8":"markdown"},"source":{"0845c4b6":"# we use this data for python data science toolbox\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n\nimport os\nprint(os.listdir(\"..\/input\")) # we can import data from this directory","b05bb508":"# first we need to import data which we use\nmydata = pd.read_csv('..\/input\/column_2C_weka.csv')","181058e4":"# data info (name of columns, data type, memory usage)\nmydata.info()","8a03859e":"#first seven datas\nmydata.head(7)","11dfc407":"def tuble(): #  define function\n    t = (1,5,7)\n    return t\na,b,c = tuble()\nprint(a,b,c)","e6754c2e":"#SCOPE\n#global: defined at main body in script\n#local: defined in a function\n\nx = 2 # global\ndef f():\n    x = 3 # local\n    return x\nprint(x)      # x = 2\nprint(f())    # x = 3","6604a34e":"# if there is not a local scope in our functions\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # first this function try to find Local Scope(LS)\n#it can not find LS and it uses global scope x","e996e037":"#How can we know what is built inside of the scope\nimport builtins\ndir(builtins)","e1d4f5ec":"def square():\n   #return values of the square\n    def add():\n        x = 2\n        y = 3\n        z = x + y\n        return z # return for add function\n    return add()**2 # return for square function\nprint(square()) \n","b3418cae":"\ndef f(a, b = 1, c = 2): # if we dont change values of b and c,\n    #b and c will be default arguments\n    y = a + b + c\n    return y\nprint(f(5)) # a=5 and b,c is defined in f() function as a default values\n\nprint(f(5,4,3)) # we can change default arguments","e8124d20":"# if we want to use flexible arguments, we need to define in our\n#function \"*args\"\ndef f(*args): # flexible defining\n    for i in args:\n        print(i)\nf(1) # with this we can chose any number to use def f()\nprint(\"\")\nf(1,4,3,7)\n# flexible arguments **kwargs (key and value argument)that is dictionary\ndef f(**kwargs):\n    for key, value in kwargs.items():  # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = \"poland\", capital = \"warsaw\", population = 1745000)","3168edc2":"# where x is name of argument, lambda variables:function\nsquare = lambda x: x**2     \nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of variables\nprint(tot(1,2,3))","071b7828":"#Like lambda function but it can take more than one arguments.\n#map(func,seq) : applies a function to all the items in a list\n\nnumber_list = [1,4,7]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","0091f182":"soccer = \"Nakata\"\niteration = iter(soccer) # iteration command\nprint(next(iteration))    # print next iteration\nprint(next(iteration)) # print next iteration\nprint(*iteration)         # print remaining iteration","cfdc16e7":"#ZIP\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)\n","984fe817":"# we can make unzip our zip datas\nun_zip = zip(*z_list) \nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1) # type of this will be tuple\nprint(type(un_list1))\n\nun_list2 = list(un_list2) # we can change type of unzip data \nprint(un_list2)\nprint(type(un_list2))","8b2bced9":"\nnum1 = [1,4,7,9]\nfor i in num1: # we can look(see,find) inside of the num1\n    print(i)\n    \nnum2 = [i + 1 for i in num1 ]\nprint(num2)","8e15312c":"# Conditional iteration\nnum1 = [5,10,15,4,20]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","de7bd10e":"#lets return our csv and make a list comprehension example\n# lets classify datas whether they have high or low speed\n#Our threshold is average pelvic_incidence\nthreshold = sum(mydata.pelvic_incidence)\/len(mydata.pelvic_incidence)\nmydata[\"High\/Low\"] = [\"high\" if i > threshold else \"low\" for i in mydata.pelvic_incidence]\nmydata.loc[:10,[\"High\/Low\",\"pelvic_incidence\"]] \n","45d09837":"NESTED FUNCT\u0130ON\nif we want to use function inside function, wan can we do?","23e4eb14":"ANONYMOUS FUNCT\u0130ON","bfbce884":"DEFAULT and FLEXIBLE ARGUMENTS","4d180eba":"Thank you for reading my kernel","0c9a5dcf":"LAMBDA FUNCTION","32091aa9":"ITERATORS","c326e8d5":"**LIST COMPREHENS\u0130ON**\n\nist comprehension: collapse for loops for building lists into a single line ","fd9ed7d8":"**User defined functions**"}}