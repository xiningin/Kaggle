{"cell_type":{"eeb85493":"code","89c89a57":"code","11d363f0":"code","f7a39034":"code","25ba6871":"code","ddd30ed2":"code","41b0fd95":"code","4b03c1e1":"code","051fff96":"code","6b3fcf80":"code","c358ba4c":"code","8d82985b":"code","7e33481b":"code","26565bc7":"code","b93e32ed":"code","8e8e69a2":"code","3bc17b5f":"code","f86463df":"code","6ec8ea00":"code","b27e4be3":"code","e7658a98":"code","f20c4257":"code","3e9c1dd8":"code","cbd3704e":"code","5f649eb9":"code","a083713a":"code","0f1662f3":"code","4633ef36":"code","4c7f6b14":"code","57eb6e8d":"code","46602042":"code","fbcf9f32":"code","bb55e9bd":"code","f431b5c9":"code","18ca4dd8":"code","7ccf51da":"code","ea4a6f2d":"code","f9c77dc3":"code","7639a3d3":"code","cdd0ba25":"code","13db32f8":"code","0b9fd99c":"code","5645b5d5":"code","35eb82e9":"code","dc013c55":"code","aa11dbb2":"code","63ea7690":"code","aa1b0db7":"code","0702c8b9":"code","78e69267":"code","ba157fc2":"code","b0548952":"code","6173b2c2":"code","b8b09683":"code","93347798":"code","40d71a3c":"code","02379d25":"code","2cc4eb1e":"code","f435d398":"code","29466f56":"code","a771b432":"code","a1071709":"code","62edafb7":"code","372e797d":"code","b42c33ff":"code","d08035f8":"code","4ee30c84":"code","22159de5":"code","8305daf4":"code","f7242328":"code","dd813cdd":"code","166d4dd1":"code","7941e645":"code","216fdfff":"markdown","9a41baba":"markdown","c4f6d5b8":"markdown","52f27768":"markdown","ea33cc86":"markdown","cb8e9a75":"markdown","96732142":"markdown","69d58b99":"markdown","9282b290":"markdown","1257911e":"markdown","ca30b101":"markdown","fe8be37b":"markdown","fb595317":"markdown","f4c26774":"markdown","2db75404":"markdown","60ea2466":"markdown","1cee549e":"markdown","046130f3":"markdown","d9e76deb":"markdown","a1dd1321":"markdown","ab55861e":"markdown","fb847431":"markdown","217ea7cc":"markdown","45104c60":"markdown","681f7e82":"markdown","bee7c7a1":"markdown","2b0a045b":"markdown","c5ff9e4a":"markdown","aeedccbf":"markdown","3137099a":"markdown","f1c4f444":"markdown"},"source":{"eeb85493":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89c89a57":"file = open('\/kaggle\/input\/ict2020\/files\/adult.data', 'r')","11d363f0":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","f7a39034":"print (data[1:2])","25ba6871":"df = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","ddd30ed2":"df.tail()","41b0fd95":"df.shape","4b03c1e1":"counts = df.groupby('country').size()\n\nprint (counts) ","051fff96":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","6b3fcf80":"print(counts.max())","c358ba4c":"counts.sort_values( ascending = False,inplace = True)\nprint(counts)","8d82985b":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\nml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","7e33481b":"fm =df[(df.sex == 'Female')]\nfm.shape","26565bc7":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","b93e32ed":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","8e8e69a2":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","3bc17b5f":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","f86463df":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","6ec8ea00":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","b27e4be3":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","e7658a98":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","f20c4257":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","3e9c1dd8":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(density=True, histtype='stepfilled', bins=20)","cbd3704e":"fm_age=fm['age']\nfm_age.hist(density=True, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","5f649eb9":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","a083713a":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","0f1662f3":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","4633ef36":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","4c7f6b14":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","57eb6e8d":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","46602042":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","fbcf9f32":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","bb55e9bd":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","f431b5c9":"df['age'].median()","18ca4dd8":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","7ccf51da":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","ea4a6f2d":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","f9c77dc3":"ml1_age=ml1['age']\nfm1_age=fm1['age']","7639a3d3":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","cdd0ba25":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","13db32f8":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","0b9fd99c":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","5645b5d5":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","35eb82e9":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","dc013c55":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","aa11dbb2":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","63ea7690":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","aa1b0db7":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","0702c8b9":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","78e69267":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","ba157fc2":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","b0548952":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","6173b2c2":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","b8b09683":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","93347798":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","40d71a3c":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","02379d25":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","2cc4eb1e":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","f435d398":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","29466f56":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","a771b432":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","a1071709":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","62edafb7":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","372e797d":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","b42c33ff":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')","d08035f8":"print ('The empirical mean of the sample is ', x.mean())","4ee30c84":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","22159de5":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","8305daf4":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","f7242328":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","dd813cdd":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","166d4dd1":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","7941e645":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","216fdfff":"- Describe an explain the result.\nWe have here the median age of the men, women, high-income men and high-income women. We have too the median hours per week per men and women. The median is more robust in the face of outliers than the mean. \n\nFor the data on ages, the mean and the median are quite close, so we can conclude that there are no outliers. However, the median and the average are different for the number of weekly hours of women:  36 for the mean against 40 for the median. There are maybe outliers.","9a41baba":"- What is the age of the most represented people?\nThe age of the most represented people is 36 (with 898).","c4f6d5b8":"- First, there are almost as many men as women in the 'on time' category. The big difference between women and men is in the other two categories. 50% of women are in the category 'young' against 38% for men (minus 10 points) but it is the opposite in the category 'elder'.","52f27768":"- Show the graphics and an explain the result.\nWe have here the Probability Mass Function for women. This function is not the same as the function of the men.","ea33cc86":"- Describe an explain the result.\nWe obtain the percentages of people with high income (ie >50k), of men with high income and of women with high income. There are almost a quarter of people with high income. There are three times more men with high income than women. ","cb8e9a75":"- We removed the values that do not meet our criteria: those who are under 22 and those who are over 72. We therefore no longer have the same number of lines: we have 69 fewer.\nWhy not 74? 69 because over 72 years and 5 because under 22?","96732142":"- Show the graphics and explain the result. \nWe can see the probabilty of being a certain age depending on our gender. \nFor example, the probability for a woman to be around 20 years old is bigger than for men in this data sample: more than 0,3 for a women and only less than 0,2 for a men.\nUp to 30 years old, the probabilities are higher for women than men and after 30 years old, the probabilities are higher for the men. ","69d58b99":"- Describe an explain the result.\nAfter importing the data in the DataFrame df, we define the title of the columns. Then we show the 5 first rows. ","9282b290":"We see that when n gets bigger the distribution of the sample mean will converge to a Gaussian (normal) distribution.","1257911e":"- Describe an explain the result.\nThere are 32 561 rows and 15 columns.","ca30b101":"- Show the graphics and an explain the result.\nWe have here the Cumulative Distribution Function for men and women on the same graph.","fe8be37b":"- Describe an explain the result.\nWe calculate other characteristics of the population distribution: the mean value, the variance and the standard deviation for the age of men, the age of women, the number of hours per week of men and women.  \n\nThe mean age of men is higher than that of women: almost three years. The data for women are more diffuse (the variance is high): there are more women whose age is far from the average than men. \n\nOn average, men work 6 hours more than women per week. Men's data are more spread out. ","fb595317":"- How many items are there for USA? and for Mexico?\nThere are 29 170 items for the USA and 643 for Mexico.","f4c26774":"- Explain the result.\nWe have the difference between the mean age of men and women. The mean age of men is higher than the mean age of women. We might expect it. Indeed, until now, we have seen that in our sample, women are often younger than men.","2db75404":"- What is the obtained result? What did you ask for in the previous command? Explain.\nWe obtain a line of the file. We have just informations, there is no title of columns. ","60ea2466":"- Show the graphics and an explain the result.\nWe have the Cumulative Distribution Function for men. There is a 50% chance of being under 40 years old. ","1cee549e":"- Show the graphics and an explain the result.\nWe have the Cumulative Distribution Function for women. There is a 50% chance of being under 35 years old. In our study, there is more chance of being young when you are a women.","046130f3":"- We have 69 people with high income who are more than 72 years old (ie the median age plus 35 years old).","d9e76deb":"- Show the graphics and an explain the result.\nOn the graph, we can see the distribution of people per age for women in the data sample. We can see that the distribution is not the same as before (when whe have men and women). Indeed, the most represented age is around 20 years old. ","a1dd1321":"- Show the graphics and an explain the result.\nWe have the Probability Mass Function. ","ab55861e":"- Explain the result\nThe values are positive, so the distribution \"skews right\". The skewness of the female population is a little bit taller thant the skewness of the male population.","fb847431":"- Here, we know that there are 5 people with hign income who are younger than 22 years (ie the median age minus 15).","217ea7cc":"- We can see that the Pearson's coefficient of the female is taller than those of the male (like the skewness) and the difference between them is taller too than the difference between the two Pearson's coefficients. ","45104c60":"- What does the figure show ?\nHere we want to estimate the distribution non-parametrically using kernel density estimation. The red curve shows the cumulative sum of all the different densities of probabilty (dotted).\n","681f7e82":"- Show the graphics and an explain the result.\nWe have the cumulative Distribution Function. The function is not the same for the men and the women. ","bee7c7a1":"We obtain the mean square error, which measures the average of the squares of the errors, it shows the precision of the estimator.","2b0a045b":"- Show the graphics and an explain the result.\nOn the graph, we can see the distribution of people per age. We have age between 17 and 90 years old. The most represented age is around 32 years old. ","c5ff9e4a":"- Describe and explain the result. Compare with the previous one.\nHere, we ask to show the 5 last rows. But we did not need to give the column names again, the columns are the same than before.","aeedccbf":"- Show the graphics and explein the result.\nWe have here the Probability Mass Function for men.","3137099a":"- Describe an explain the result.\nWe obtain the average age of men and women samples in our dataset. We have too the average age of high-income men and high income women samples. We can study the population distribution of the variable. In the both cases (men and women), the average age of the high-income people is higher than the average age of people. ","f1c4f444":"There are 6 times more lines for men."}}