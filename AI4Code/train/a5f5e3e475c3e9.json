{"cell_type":{"ba4f1384":"code","7b3e8cdf":"code","b4bedead":"code","4d1b888a":"code","d819120e":"code","e61a35f3":"code","a30b1ae4":"code","a44853f2":"code","c86fd919":"code","ba45a3c1":"code","52b81e62":"code","0a7b87f4":"code","10b7a89f":"code","4af17b5a":"code","2d891ec8":"code","39598fcd":"code","5f889d66":"code","3b5d5613":"code","49f941dc":"code","0cdfec6e":"code","67f6f97f":"code","31e681b9":"code","1da95797":"code","ae3ef63a":"code","aad89594":"code","796c1348":"code","2df7d430":"code","97ff897a":"code","dbb43cfc":"code","7d0ff0bb":"code","52c64b3f":"code","4c32b96f":"code","534a928a":"code","f201c2ef":"code","3937d2d1":"code","605aa4e5":"code","1e2fce4c":"code","2f990c7f":"code","cb12e55d":"code","b3c5973a":"code","79c20cc4":"code","788c5215":"code","0db93358":"code","a9149ade":"code","4741b8b6":"code","19dcf566":"code","0d11db81":"code","73a17e33":"markdown","bb000070":"markdown","6676f6ee":"markdown","6757222c":"markdown","d9b5f188":"markdown","0a0b2fcd":"markdown","fa5dc12a":"markdown","17e28d5c":"markdown","e47dbdf5":"markdown","fa5cf3f9":"markdown","f231f9d0":"markdown","96ed49ff":"markdown","759adbe0":"markdown","98750c0a":"markdown"},"source":{"ba4f1384":"import pandas as pd\nimport numpy as np\nfrom numpy import nan","7b3e8cdf":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","b4bedead":"submission.head(3)","4d1b888a":"train.shape, test.shape","d819120e":"train.info()","e61a35f3":"train.head()","a30b1ae4":"test.head()","a44853f2":"train.isnull().sum()\/len(train)","c86fd919":"test.isnull().sum()\/len(test)","ba45a3c1":"[train[i].unique() for i in train.iloc[:,[1,2,4,6,7,11]].columns]","52b81e62":"train.drop(['PassengerId'], axis=1, inplace=True)\ntest.drop(['PassengerId'], axis=1, inplace=True)","0a7b87f4":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","10b7a89f":"train['Sex'] = le.fit_transform(train['Sex'])\ntest['Sex'] = le.fit_transform(test['Sex'])","4af17b5a":"train['Embarked'].value_counts()","2d891ec8":"train['Embarked'].fillna(train['Embarked'].mode()[0], inplace=True)","39598fcd":"train['Deck'] = train['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'M')\ntest['Deck'] = test['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'M')","5f889d66":"train['FSize'] = train['Parch'] + train['SibSp'] + 1\ntest['FSize'] = test['Parch'] + test['SibSp'] + 1","3b5d5613":"train['IsAlone'] = 1\ntrain['IsAlone'].loc[train['FSize'] > 1] = 0\n\ntest['IsAlone'] = 1\ntest['IsAlone'].loc[test['FSize'] > 1] = 0","49f941dc":"train.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\ntest.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)","0cdfec6e":"train.head()","67f6f97f":"test.head()","31e681b9":"train['Deck'] = le.fit_transform(train['Deck'])\ntrain['Embarked'] = le.fit_transform(train['Embarked'])\n\ntest['Deck'] = le.fit_transform(test['Deck'])\ntest['Embarked'] = le.fit_transform(test['Embarked'])","1da95797":"train.isnull().sum()","ae3ef63a":"test.isnull().sum()","aad89594":"train_col = train.columns\ntest_col = test.columns","796c1348":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nimp_mean = IterativeImputer(random_state=0)","2df7d430":"train = imp_mean.fit_transform(train)\ntest = imp_mean.fit_transform(test)","97ff897a":"train = pd.DataFrame(train, columns=train_col)\ntest = pd.DataFrame(test, columns=test_col)","dbb43cfc":"pclass_ohe_tr = pd.get_dummies(train['Pclass'], prefix='class', prefix_sep='_')\ntrain.drop(['Pclass'], axis=1, inplace=True)\ntrain = train.join(pclass_ohe_tr)\n\npclass_ohe_te = pd.get_dummies(test['Pclass'], prefix='class', prefix_sep='_')\ntest.drop(['Pclass'], axis=1, inplace=True)\ntest = test.join(pclass_ohe_te)","7d0ff0bb":"X = train.drop(['Survived'], axis=1)\nY = train['Survived']","52c64b3f":"X_col = X.columns\ntest_col = test.columns","4c32b96f":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","534a928a":"scaler.fit(X.loc[:,['Age','Fare']] + test.loc[:,['Age','Fare']])\nX.loc[:,['Age','Fare']] = scaler.transform(X.loc[:,['Age','Fare']])\ntest.loc[:,['Age','Fare']] = scaler.transform(test.loc[:,['Age','Fare']])","f201c2ef":"X = pd.DataFrame(X, columns=X_col)\ntest = pd.DataFrame(test, columns=test_col)","3937d2d1":"import seaborn as sns\nsns.heatmap(train.corr())","605aa4e5":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV","1e2fce4c":"xgb = XGBClassifier(n_estimators=600, objective='binary:logistic',silent=True, nthread=1, colsample_bytree= 0.6,\n gamma= 2,\n max_depth= 4,\n min_child_weight= 1,\n subsample= 1.0)","2f990c7f":"xgb = XGBClassifier(\n    objective= 'binary:logistic',\n    nthread=4,\n    seed=123\n)","cb12e55d":"parameters = {\n    'max_depth': range(2, 10, 1),\n    'n_estimators': range(60, 220, 40),\n    'learning_rate': [0.1, 0.01, 0.05, 0.5]\n}","b3c5973a":"grid_search = GridSearchCV(\n    estimator=xgb,\n    param_grid=parameters,\n    scoring = 'roc_auc',\n    n_jobs = 10,\n    cv = 10,\n    verbose=True\n)","79c20cc4":"grid_search.fit(X, Y)","788c5215":"grid_search.best_estimator_","0db93358":"xgb = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.05, max_delta_step=0, max_depth=6,\n              min_child_weight=1, missing=nan, monotone_constraints='()',\n              n_estimators=60, n_jobs=4, nthread=4, num_parallel_tree=1,\n              random_state=123, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n              seed=123, subsample=1, tree_method='exact', validate_parameters=1,\n              verbosity=None)","a9149ade":"xgb.fit(X, Y)","4741b8b6":"pred = xgb.predict(test)","19dcf566":"submission['Survived'] = pred","0d11db81":"submission.to_csv('submission.csv')","73a17e33":"We will fill the 2 missing values in 'Embarked' with its mode","bb000070":"# Cleaning and EDA","6676f6ee":"## Correlation Matrix Heatmap","6757222c":"References:\n\n[Titanic - Advanced Feature Engineering Tutorial](https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial)\n\n[A Data Science Framework: To Achieve 99% Accuracy](https:\/\/www.kaggle.com\/ldfreeman3\/a-data-science-framework-to-achieve-99-accuracy)","d9b5f188":"<a href=\"https:\/\/kritikseth.github.io\/ipynbtagredirect\" target=\"_parent\"><img src=\"https:\/\/raw.githack.com\/kritikseth\/kritikseth\/master\/assets\/icons\/kritik_ipynbtagredirect.svg\" alt=\"Kritik Seth\"\/><\/a>","0a0b2fcd":"Scaling the data","fa5dc12a":"Create a column 'IsAlone' which indicated if the passenger was travelling alone or not","17e28d5c":"We will Label Encode 'Deck' and 'Embarked''\n","e47dbdf5":"## Grid Search CV","fa5cf3f9":"Imputing missing values using Simple Imputer","f231f9d0":"First we will drop PassengerId as it consists only of unique values","96ed49ff":"Create a column 'FSize' = 'SibSp' + 'Parch' + 1","759adbe0":"We can notice that the first letter in Cabin stands for Deck so we will create a new column 'Deck'.\nHere we'll put 'M'wherever Cabin is not given indicating 'Missing''\n","98750c0a":"One Hot Encoding 'PClass'"}}