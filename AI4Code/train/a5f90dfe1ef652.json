{"cell_type":{"d11fadc0":"code","45fe7b4c":"code","f89ac77f":"code","35f4474d":"code","ce20ed1e":"code","d56f6483":"code","23f0cef9":"code","dd6c2a92":"code","b016fc6a":"code","928289f5":"code","8c6c55fa":"code","feec8d65":"code","447dc501":"code","f73cbbbd":"code","447029eb":"code","0f4f9341":"code","4ca95443":"code","1dfd2464":"code","d1de27a1":"code","d88f99c2":"code","f7773a50":"code","aa20f08a":"code","79ebe5aa":"code","e7a6172f":"code","10393adb":"code","919614f1":"code","e591ba5e":"code","a15fc48f":"code","6db6e0c9":"code","e6696b82":"code","de2ab995":"code","65b9a618":"code","2b93cf10":"code","a58cfc6a":"code","7ce587a8":"code","c9b77241":"code","2407a61a":"code","e2601c9a":"code","5de3d4fb":"code","8660f529":"code","4a6f7c6c":"code","b44ff492":"code","f43f0be6":"code","e9ceb217":"code","cae48bac":"code","b014d509":"code","59403786":"code","575592b8":"code","e024b9b9":"code","9097e8d0":"code","711ec9bf":"code","5934c82f":"code","dc48b539":"code","aa34b6e2":"code","d6728ea2":"code","37b95933":"code","670f0106":"code","dbc729e4":"code","d69b7049":"code","aaabd4ef":"code","a30c40a9":"code","bb432d9f":"code","fc551169":"code","1746fed4":"code","9489ba3b":"code","f4bbb1ce":"code","d240240b":"code","6f4f43ff":"code","994975fa":"code","ad96cc89":"code","1f9b879b":"code","05774f0b":"code","c1c83aef":"code","3d15aeeb":"code","f4a98f99":"code","385f23c3":"code","cfcb1269":"code","56c9a9e4":"code","2d0bf20f":"code","acac0aac":"code","891e938d":"code","00355d52":"code","3d2c15dd":"code","4bca8c41":"code","cc6de5bf":"code","f0407b06":"code","47b3099e":"code","6c13f2b1":"code","d4df0ad8":"code","abf7facf":"code","8420138c":"code","45f3306f":"code","b596d6f2":"code","d1fa18d8":"code","e0f682e0":"code","724ff74b":"code","10500529":"code","b785dfb7":"code","09a8fb45":"code","9e2090c8":"code","e0bfbd66":"code","f94911e9":"code","80432265":"code","07eabca9":"code","bbf056e5":"code","b067bd16":"code","0d50ad3a":"code","e74830f1":"code","dd9f5e99":"code","a56e1c28":"code","390ccb15":"code","1dd1cd39":"code","bdd82db7":"code","e0ca4007":"code","808d5270":"code","3078fd8b":"code","a721ec49":"code","b4288838":"code","a80954ce":"code","78f48d55":"code","6b3fdef0":"code","7d888e89":"code","6f8190cc":"code","fd2ae728":"markdown","ce9e4aae":"markdown","4473789d":"markdown"},"source":{"d11fadc0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score","45fe7b4c":"df = pd.read_csv('\/kaggle\/input\/mental-health-in-tech-survey\/survey.csv')","f89ac77f":"df","35f4474d":"df.columns","ce20ed1e":"df.info()","d56f6483":"df.Age.value_counts()","23f0cef9":"df = df[(df['Age'] < 100) & (df['Age'] > 17)]\nthe_occupier = \"Israel\"\ndf = df[df['Country'] != the_occupier]","dd6c2a92":"(df.isnull().sum()\/df.shape[0])*100","b016fc6a":"df.dropna(subset=['self_employed'], inplace=True)\ndf = df.reset_index()","928289f5":"(df.isnull().sum()\/df.shape[0])*100","8c6c55fa":"df.drop(['index', 'Timestamp'], axis = 1, inplace = True)\ndf","feec8d65":"df.Gender.unique()","447dc501":"male = ['male', 'Male', 'M', 'm', 'Male-ish', 'maile', 'Cis Male', 'Mal', 'Male (CIS)', 'Make','Male ', 'Man', 'msle', 'Mail', 'cis male', 'Malr', 'Cis Man']\nfemale = ['Female', 'female', 'Cis Female', 'F', 'Woman', 'f', 'Femake', 'woman', 'Female ', 'cis-female\/femme', 'Female (cis)', 'femail']\nother = ['Trans-female', 'something kinda male?', 'queer\/she\/they', 'non-binary', 'Nah', 'All', 'Enby', 'fluid', 'Genderqueer', 'Androgyne', 'Agender', 'Guy (-ish) ^_^', 'male leaning androgynous', 'Trans woman', 'Neuter', 'Female (trans)', 'queer', 'ostensibly male, unsure what that really means']\ndropped = ['A little about you', 'p']","f73cbbbd":"df = df[(df['Gender'] != 'A little about you') & (df['Gender'] != 'p')]","447029eb":"df.replace(to_replace = male, value = 'male', inplace = True)\ndf.replace(to_replace = female, value = 'female', inplace = True)\ndf.replace(to_replace = other, value = 'other', inplace = True)","0f4f9341":"df.drop(['Age','Gender','Country','state','self_employed','family_history','treatment','work_interfere','no_employees','remote_work'], axis = 1)","4ca95443":"def bar_plot(categ_var):\n    \"\"\"\n        input: variable ex: \"anonymity\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = df[categ_var]\n    # count number of categorical variable\n    var_value = var.value_counts()\n    \n    plt.figure(figsize = (9,3))\n    plt.bar(var_value.index, var_value)\n    plt.xticks(var_value.index, var_value.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(categ_var)\n    plt.show()\n    print(f\"{categ_var}:\\n{var_value}\")","1dfd2464":"categorical_vars = [\"self_employed\",\"family_history\",\"tech_company\",\"phys_health_consequence\",\"supervisor\"]\nfor c in categorical_vars:\n    bar_plot(c)","d1de27a1":"plt.subplots(figsize=(20, 10))\nsns.countplot(x = df['state'])","d88f99c2":"plt.figure(figsize=(12,7))\nsns.histplot(data=df ,x='work_interfere');\nplt.title('work_interfere',fontweight='bold')\nplt.xlabel('work_interfere',fontweight='bold')\nplt.ylabel('count',fontweight='bold')","f7773a50":"plt.figure(figsize=(9,9))\nsns.countplot(x = df['no_employees'])","aa20f08a":"plt.figure(figsize=(9,9))\nsns.countplot(data=df, x='seek_help')","79ebe5aa":"plt.figure(figsize=(10,10))\nsns.countplot(data=df, x='care_options')","e7a6172f":"plt.figure(figsize=(9,9))\nsns.countplot(x = df['leave'])","10393adb":"k=['mental_health_interview','phys_health_interview','mental_vs_physical']\nfor i in k:\n    sns.countplot(x = df[i])\n    plt.show()","919614f1":"plt.figure(figsize=(9,9))\nsns.countplot(x = df['Gender'])","e591ba5e":"plt.figure(figsize=(9,9))\nsns.countplot(x = df['remote_work'])","a15fc48f":"plt.figure(figsize=(9,9))\nsns.countplot(x = df['benefits'])","6db6e0c9":"plt.figure(figsize=(9,9))\nsns.countplot(x = df['wellness_program'])","e6696b82":"s=['mental_health_consequence','phys_health_consequence','obs_consequence','coworkers','supervisor']\nfor i in s:\n    sns.countplot(x = df[i])\n    plt.show()","de2ab995":"c = [\"Gender\",\"self_employed\",\"family_history\",\"treatment\",\"work_interfere\",\"no_employees\",\"remote_work\",\"tech_company\",\"benefits\",\"care_options\",\"wellness_program\",\"seek_help\",\"anonymity\",\"leave\",\"mental_health_consequence\",\"phys_health_consequence\",\"coworkers\",\"supervisor\",\"mental_health_interview\",\"phys_health_interview\",\"mental_vs_physical\",\"obs_consequence\"]\nfor col in c:\n    round(df[col].value_counts()\/df.shape[0]*100,2).plot.pie(autopct= '%1.1f%%')\n    plt.show()","65b9a618":"sns.displot(df[\"Age\"])","2b93cf10":"g = sns.FacetGrid(df, col='treatment')\ng.map(sns.histplot, \"Age\")","a58cfc6a":"sns.catplot(data=df, kind=\"count\", x=\"Gender\", hue=\"treatment\")","7ce587a8":"sns.catplot(data=df, kind=\"count\", x=\"work_interfere\", hue=\"treatment\")","c9b77241":"sns.catplot(data=df, kind=\"count\", x=\"anonymity\", hue=\"treatment\")","2407a61a":"sns.catplot(data=df, kind=\"count\", x=\"tech_company\", hue=\"wellness_program\")","e2601c9a":"fig, ax = plt.subplots(figsize=(15,15))\nsns.countplot(data=df, x=\"no_employees\", hue=\"treatment\", ax = ax)","5de3d4fb":"ax = sns.kdeplot(df.Age[(df[\"treatment\"] == 'No') ])\nax = sns.kdeplot(df.Age[(df[\"treatment\"] == 'Yes') ])\nax.legend([\"No treatment\",\"treatment\"],loc='upper right')","8660f529":"g = sns.FacetGrid(df, col = \"phys_health_consequence\")\ng.map(sns.histplot, \"Age\", bins = 50)","4a6f7c6c":"g = sns.FacetGrid(df, col = \"mental_health_consequence\")\ng.map(sns.histplot, \"Age\", bins = 50)","b44ff492":"le = LabelEncoder()","f43f0be6":"df['Gender'] = le.fit_transform(df.Gender.values)","e9ceb217":"le = LabelEncoder()\ndf['self_employed'] = le.fit_transform(df.self_employed.values)\nle = LabelEncoder()\ndf['family_history'] = le.fit_transform(df.family_history.values)\nle = LabelEncoder()\ndf['treatment'] = le.fit_transform(df.treatment.values)\nle = LabelEncoder()\ndf['remote_work'] = le.fit_transform(df.remote_work.values)\nle = LabelEncoder()\ndf['tech_company'] = le.fit_transform(df.tech_company.values)\nle = LabelEncoder()\ndf['obs_consequence'] = le.fit_transform(df.obs_consequence.values)","cae48bac":"df.info()","b014d509":"columns = ['Country', 'state', 'work_interfere', 'no_employees', 'benefits', 'care_options', 'wellness_program', 'seek_help', 'anonymity', 'leave', 'mental_health_consequence', 'phys_health_consequence', 'coworkers', 'supervisor', 'mental_health_interview', 'phys_health_interview', 'mental_vs_physical']\nfor col in columns:\n    le = LabelEncoder()\n    df[col] = df[col].astype('str')\n    df[col] = le.fit_transform(df[col].values)","59403786":"plt.subplots(figsize=(20, 10))\nsns.heatmap(df.corr(), cbar = True, annot=True)","575592b8":"f = df.drop(['Age', 'Gender', 'self_employed',\n       'work_interfere', 'no_employees', 'remote_work', 'tech_company',\n        'wellness_program', 'seek_help', 'leave', 'mental_health_consequence',\n       'phys_health_consequence', 'coworkers', 'supervisor',\n       'mental_health_interview', 'phys_health_interview',\n       'mental_vs_physical','Country', 'state', 'comments'], axis = 1)\nf","e024b9b9":"plt.subplots(figsize=(20, 10))\nsns.heatmap(f.corr(), cbar = True, annot=True)","9097e8d0":"sns.catplot(x = \"phys_health_interview\", y = \"mental_health_interview\", hue = \"tech_company\", data = df, kind=\"box\")","711ec9bf":"sns.catplot(x = \"wellness_program\", y = \"remote_work\", hue = \"tech_company\", data = df, kind=\"box\")","5934c82f":"sns.catplot(x = \"seek_help\", y = \"care_options\", hue = \"tech_company\", data = df, kind=\"box\")","dc48b539":"sns.catplot(x = \"wellness_program\", y = \"benefits\", hue = \"tech_company\", data = df, kind=\"violin\")","aa34b6e2":"g = sns.catplot(x = \"wellness_program\", y = \"tech_company\", data = df, kind = \"bar\", height = 6)\n# How easy is it for you to take medical leave for a mental health condition?\ng.set_ylabels(\"Probability of tech company status\")\ng.set_xlabels(\"Having welness program to mental health\")\nplt.show()","d6728ea2":"df.hist(bins=10 , figsize=(20,15), color = 'blue')","37b95933":"plt.figure(figsize=(5,5));\n\nsns.barplot(data=df, x='tech_company', y='benefits')","670f0106":"plt.figure(figsize=(5,5));\nsns.barplot(data=df, x='tech_company', y='wellness_program')","dbc729e4":"plt.figure(figsize=(5,5));\n\nsns.barplot(data=df, x='tech_company', y='remote_work')","d69b7049":"plt.figure(figsize=(5,5));\n\nsns.barplot(data=df, x='tech_company', y='leave')","aaabd4ef":"plt.figure(figsize=(5,5));\n\nsns.barplot(data=df, x='work_interfere', y='treatment')","a30c40a9":"plt.figure(figsize=(5,5));\n\nsns.barplot(data=df, x='anonymity', y='treatment')","bb432d9f":"scaler = MinMaxScaler()\ndf['Age'] = scaler.fit_transform(df[['Age']])","fc551169":"df.drop(['Country', 'state', 'comments'], axis = 1, inplace = True)\ndf","1746fed4":"x = df.drop(['treatment'], axis = 1)\ny = df['treatment']\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=1\/3,random_state=42)","9489ba3b":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(x_train, y_train)","f4bbb1ce":"from sklearn.metrics import accuracy_score\nsvc_pred = svc.predict(x_test)\nsvc_train = svc.predict(x_train)\naccuracy_score(y_train, svc_train)","d240240b":"accuracy_score(y_test, svc_pred)","6f4f43ff":"from sklearn.linear_model import LogisticRegression\nLL = LogisticRegression()\nLL.fit(x_train, y_train)","994975fa":"LL_pred = LL.predict(x_test)\nLL_train = LL.predict(x_train)\naccuracy_score(y_train, LL_train)","ad96cc89":"accuracy_score(y_test, LL_pred)","1f9b879b":"from sklearn import metrics\nmetrics.confusion_matrix(y_test, LL_pred)","05774f0b":"metrics.confusion_matrix(y_train, LL_train)","c1c83aef":"metrics.recall_score(y_test, LL_pred)","3d15aeeb":"metrics.recall_score(y_train, LL_train)","f4a98f99":"metrics.precision_score(y_test, LL_pred)","385f23c3":"metrics.precision_score(y_train, LL_train)","cfcb1269":"metrics.mean_squared_error(y_train, LL_train)","56c9a9e4":"metrics.mean_squared_error(y_test, LL_pred)","2d0bf20f":"print('f1_score_test = ', f1_score(y_test, LL_pred))\nprint('f1_score_train = ', f1_score(y_train, LL_train))","acac0aac":"LL_lib = LogisticRegression(solver = 'liblinear')\nLL_lib.fit(x_train, y_train)\nLL_pred_lib = LL_lib.predict(x_test)\nLL_train_lib = LL_lib.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, LL_train_lib))\nprint('accuracy_test = ', accuracy_score(y_test, LL_pred_lib))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, LL_train_lib))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, LL_pred_lib))\nprint('recall_train = ', metrics.recall_score(y_train, LL_train_lib))\nprint('recall_test = ', metrics.recall_score(y_test, LL_pred_lib))\nprint('precision_train = ', metrics.precision_score(y_train, LL_train_lib))\nprint('precision_test = ', metrics.precision_score(y_test, LL_pred_lib))\nprint('mse_train = ', metrics.mean_squared_error(y_train, LL_train_lib))\nprint('mse_test = ', metrics.mean_squared_error(y_test, LL_pred_lib))\nprint('f1_score_test = ', f1_score(y_test, LL_pred_lib))\nprint('f1_score_train = ', f1_score(y_train, LL_train_lib))","891e938d":"from mlxtend.plotting import plot_confusion_matrix\nplot_confusion_matrix(metrics.confusion_matrix(y_test, LL_pred_lib))","00355d52":"from sklearn.metrics import plot_roc_curve\nplot_roc_curve(LL_lib, x_test, y_test)","3d2c15dd":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, LL_pred_lib))","4bca8c41":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 27)\nknn.fit(x_train, y_train)\nknn_pred = knn.predict(x_test)\nknn_train = knn.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, knn_train))\nprint('accuracy_test = ', accuracy_score(y_test, knn_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, knn_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, knn_pred))\nprint('recall_train = ', metrics.recall_score(y_train, knn_train))\nprint('recall_test = ', metrics.recall_score(y_test, knn_pred))\nprint('precision_train = ', metrics.precision_score(y_train, knn_train))\nprint('precision_test = ', metrics.precision_score(y_test, knn_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, knn_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, knn_pred))\nprint('score_test = ', knn.score(x_test, y_test))\nprint('score_test = ', knn.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, knn_pred))\nprint('f1_score_train = ', f1_score(y_train, knn_train))","cc6de5bf":"knn5 = KNeighborsClassifier(n_neighbors = 5)\nknn5.fit(x_train, y_train)\nknn5_pred = knn5.predict(x_test)\nknn5_train = knn5.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, knn5_train))\nprint('accuracy_test = ', accuracy_score(y_test, knn5_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, knn5_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, knn5_pred))\nprint('recall_train = ', metrics.recall_score(y_train, knn5_train))\nprint('recall_test = ', metrics.recall_score(y_test, knn5_pred))\nprint('precision_train = ', metrics.precision_score(y_train, knn5_train))\nprint('precision_test = ', metrics.precision_score(y_test, knn5_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, knn5_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, knn5_pred))\nprint('score_test = ', knn5.score(x_test, y_test))\nprint('score_test = ', knn5.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, knn5_pred))\nprint('f1_score_train = ', f1_score(y_train, knn5_train))","f0407b06":"svm = SVC(kernel = 'linear')\nsvm.fit(x_train, y_train)\nsvm_pred = svm.predict(x_test)\nsvm_train = svm.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, svm_train))\nprint('accuracy_test = ', accuracy_score(y_test, svm_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, svm_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, svm_pred))\nprint('recall_train = ', metrics.recall_score(y_train, svm_train))\nprint('recall_test = ', metrics.recall_score(y_test, svm_pred))\nprint('precision_train = ', metrics.precision_score(y_train, svm_train))\nprint('precision_test = ', metrics.precision_score(y_test, svm_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, svm_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, svm_pred))\nprint('f1_score_test = ', f1_score(y_test, svm_pred))\nprint('f1_score_train = ', f1_score(y_train, svm_train))","47b3099e":"plot_confusion_matrix(metrics.confusion_matrix(y_test, svm_pred))","6c13f2b1":"plot_roc_curve(svm, x_test, y_test)","d4df0ad8":"print(classification_report(y_test, svm_pred))","abf7facf":"svm_poly = SVC(kernel = 'poly')\nsvm_poly.fit(x_train, y_train)\nsvm_pred_poly = svm_poly.predict(x_test)\nsvm_train_poly = svm_poly.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, svm_train_poly))\nprint('accuracy_test = ', accuracy_score(y_test, svm_pred_poly))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, svm_train_poly))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, svm_pred_poly))\nprint('recall_train = ', metrics.recall_score(y_train, svm_train_poly))\nprint('recall_test = ', metrics.recall_score(y_test, svm_pred_poly))\nprint('precision_train = ', metrics.precision_score(y_train, svm_train_poly))\nprint('precision_test = ', metrics.precision_score(y_test, svm_pred_poly))\nprint('mse_train = ', metrics.mean_squared_error(y_train, svm_train_poly))\nprint('mse_test = ', metrics.mean_squared_error(y_test, svm_pred_poly))\nprint('f1_score_test = ', f1_score(y_test, svm_pred_poly))\nprint('f1_score_train = ', f1_score(y_train, svm_train_poly))","8420138c":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(x_train,y_train)\ngnb.predict(x_test)\nprint('gnb_train = ', gnb.score(x_train,y_train))\nprint('gnb_test =', gnb.score(x_test,y_test))","45f3306f":"from sklearn.tree import DecisionTreeClassifier\ndtc=DecisionTreeClassifier ()\ndtc.fit(x_train,y_train)\ndtc_pred = dtc.predict(x_test)\ndtc_train = dtc.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, dtc_train))\nprint('accuracy_test = ', accuracy_score(y_test, dtc_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, dtc_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, dtc_pred))\nprint('recall_train = ', metrics.recall_score(y_train, dtc_train))\nprint('recall_test = ', metrics.recall_score(y_test, dtc_pred))\nprint('precision_train = ', metrics.precision_score(y_train, dtc_train))\nprint('precision_test = ', metrics.precision_score(y_test, dtc_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, dtc_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, dtc_pred))\nprint('score_test = ', dtc.score(x_test, y_test))\nprint('score_test = ', dtc.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, dtc_pred))\nprint('f1_score_train = ', f1_score(y_train, dtc_train))","b596d6f2":"dtc1=DecisionTreeClassifier (max_depth=7, max_features=6)\ndtc1.fit(x_train,y_train)\ndtc1_pred = dtc1.predict(x_test)\ndtc1_train = dtc1.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, dtc1_train))\nprint('accuracy_test = ', accuracy_score(y_test, dtc1_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, dtc1_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, dtc1_pred))\nprint('recall_train = ', metrics.recall_score(y_train, dtc1_train))\nprint('recall_test = ', metrics.recall_score(y_test, dtc1_pred))\nprint('precision_train = ', metrics.precision_score(y_train, dtc1_train))\nprint('precision_test = ', metrics.precision_score(y_test, dtc1_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, dtc1_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, dtc1_pred))\nprint('score_test = ', dtc1.score(x_test, y_test))\nprint('score_test = ', dtc1.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, dtc1_pred))\nprint('f1_score_train = ', f1_score(y_train, dtc1_train))","d1fa18d8":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(x_train,y_train)\nrf_pred = rf.predict(x_test)\nrf_train = rf.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, rf_train))\nprint('accuracy_test = ', accuracy_score(y_test, rf_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, rf_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, rf_pred))\nprint('recall_train = ', metrics.recall_score(y_train, rf_train))\nprint('recall_test = ', metrics.recall_score(y_test, rf_pred))\nprint('precision_train = ', metrics.precision_score(y_train, rf_train))\nprint('precision_test = ', metrics.precision_score(y_test, rf_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, rf_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, rf_pred))\nprint('score_test = ', rf.score(x_test, y_test))\nprint('score_test = ', rf.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, rf_pred))\nprint('f1_score_train = ', f1_score(y_train, rf_train))","e0f682e0":"rf.feature_importances_","724ff74b":"rf1 = RandomForestClassifier(max_depth=7, max_features=6)\nrf1.fit(x_train,y_train)\nrf1_pred = rf1.predict(x_test)\nrf1_train = rf1.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, rf1_train))\nprint('accuracy_test = ', accuracy_score(y_test, rf1_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, rf1_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, rf1_pred))\nprint('recall_train = ', metrics.recall_score(y_train, rf1_train))\nprint('recall_test = ', metrics.recall_score(y_test, rf1_pred))\nprint('precision_train = ', metrics.precision_score(y_train, rf1_train))\nprint('precision_test = ', metrics.precision_score(y_test, rf1_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, rf1_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, rf1_pred))\nprint('score_test = ', rf1.score(x_test, y_test))\nprint('score_test = ', rf1.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, rf1_pred))\nprint('f1_score_train = ', f1_score(y_train, rf1_train))","10500529":"rf1.feature_importances_","b785dfb7":"x_train","09a8fb45":"plot_confusion_matrix(metrics.confusion_matrix(y_test, rf1_pred))","9e2090c8":"plot_roc_curve(rf1, x_test, y_test)","e0bfbd66":"print(classification_report(y_test, rf1_pred))","f94911e9":"from xgboost import XGBClassifier","80432265":"xgb= XGBClassifier(objective=\"binary:logistic\", n_estimators=20, random_state=42,max_depth=6, learning_rate=0.3, use_label_encoder=False)\nxgb.fit(x_train,y_train)\nxgb_pred = xgb.predict(x_test)\nxgb_train = xgb.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, xgb_train))\nprint('accuracy_test = ', accuracy_score(y_test, xgb_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, xgb_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, xgb_pred))\nprint('recall_train = ', metrics.recall_score(y_train, xgb_train))\nprint('recall_test = ', metrics.recall_score(y_test, xgb_pred))\nprint('precision_train = ', metrics.precision_score(y_train, xgb_train))\nprint('precision_test = ', metrics.precision_score(y_test, xgb_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, xgb_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, xgb_pred))\nprint('score_test = ', xgb.score(x_test, y_test))\nprint('score_test = ', xgb.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, xgb_pred))\nprint('f1_score_train = ', f1_score(y_train, xgb_train))","07eabca9":"from sklearn.ensemble import AdaBoostClassifier","bbf056e5":"abc = AdaBoostClassifier(n_estimators=7, learning_rate=0.6)\nabc.fit(x_train,y_train)\nabc_pred = abc.predict(x_test)\nabc_train = abc.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, abc_train))\nprint('accuracy_test = ', accuracy_score(y_test, abc_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, abc_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, abc_pred))\nprint('recall_train = ', metrics.recall_score(y_train, abc_train))\nprint('recall_test = ', metrics.recall_score(y_test, abc_pred))\nprint('precision_train = ', metrics.precision_score(y_train, abc_train))\nprint('precision_test = ', metrics.precision_score(y_test, abc_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, abc_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, abc_pred))\nprint('score_test = ', abc.score(x_test, y_test))\nprint('score_test = ', abc.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, abc_pred))\nprint('f1_score_train = ', f1_score(y_train, abc_train))","b067bd16":"plot_confusion_matrix(metrics.confusion_matrix(y_test, abc_pred))","0d50ad3a":"plot_roc_curve(abc, x_test, y_test)","e74830f1":"print(classification_report(y_test, abc_pred))","dd9f5e99":"from sklearn.ensemble import VotingClassifier","a56e1c28":"VC = VotingClassifier(estimators=[('rf',rf),('dtc',dtc)])\nVC.fit(x_train,y_train)\nVC_pred = VC.predict(x_test)\nVC_train = VC.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, VC_train))\nprint('accuracy_test = ', accuracy_score(y_test, VC_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, VC_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, VC_pred))\nprint('recall_train = ', metrics.recall_score(y_train, VC_train))\nprint('recall_test = ', metrics.recall_score(y_test, VC_pred))\nprint('precision_train = ', metrics.precision_score(y_train, VC_train))\nprint('precision_test = ', metrics.precision_score(y_test, VC_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, VC_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, VC_pred))\nprint('score_test = ', VC.score(x_test, y_test))\nprint('score_test = ', VC.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, VC_pred))\nprint('f1_score_train = ', f1_score(y_train, VC_train))","390ccb15":"VC1 = VotingClassifier(estimators=[('rf1',rf1),('dtc1',dtc1)])\nVC1.fit(x_train,y_train)\nVC1_pred = VC1.predict(x_test)\nVC1_train = VC1.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, VC1_train))\nprint('accuracy_test = ', accuracy_score(y_test, VC1_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, VC1_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, VC1_pred))\nprint('recall_train = ', metrics.recall_score(y_train, VC1_train))\nprint('recall_test = ', metrics.recall_score(y_test, VC1_pred))\nprint('precision_train = ', metrics.precision_score(y_train, VC1_train))\nprint('precision_test = ', metrics.precision_score(y_test, VC1_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, VC1_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, VC1_pred))\nprint('score_test = ', VC1.score(x_test, y_test))\nprint('score_test = ', VC1.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, VC1_pred))\nprint('f1_score_train = ', f1_score(y_train, VC1_train))","1dd1cd39":"VC2 = VotingClassifier(estimators=[('rf1',rf1),('dtc',dtc)])\nVC2.fit(x_train,y_train)\nVC2_pred = VC2.predict(x_test)\nVC2_train = VC2.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, VC2_train))\nprint('accuracy_test = ', accuracy_score(y_test, VC2_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, VC2_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, VC2_pred))\nprint('recall_train = ', metrics.recall_score(y_train, VC2_train))\nprint('recall_test = ', metrics.recall_score(y_test, VC2_pred))\nprint('precision_train = ', metrics.precision_score(y_train, VC2_train))\nprint('precision_test = ', metrics.precision_score(y_test, VC2_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, VC2_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, VC2_pred))\nprint('score_test = ', VC2.score(x_test, y_test))\nprint('score_test = ', VC2.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, VC2_pred))\nprint('f1_score_train = ', f1_score(y_train, VC2_train))","bdd82db7":"VC3 = VotingClassifier(estimators=[('rf',rf),('dtc1',dtc1)])\nVC3.fit(x_train,y_train)\nVC3_pred = VC3.predict(x_test)\nVC3_train = VC3.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, VC3_train))\nprint('accuracy_test = ', accuracy_score(y_test, VC3_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, VC3_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, VC3_pred))\nprint('recall_train = ', metrics.recall_score(y_train, VC3_train))\nprint('recall_test = ', metrics.recall_score(y_test, VC3_pred))\nprint('precision_train = ', metrics.precision_score(y_train, VC3_train))\nprint('precision_test = ', metrics.precision_score(y_test, VC3_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, VC3_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, VC3_pred))\nprint('score_test = ', VC3.score(x_test, y_test))\nprint('score_test = ', VC3.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, VC3_pred))\nprint('f1_score_train = ', f1_score(y_train, VC3_train))","e0ca4007":"VC4 = VotingClassifier(estimators=[('rf',rf),('dtc',dtc),('rf1',rf1),('dtc1',dtc1),('svc',svc),('LL',LL),('LL_lib',LL_lib),('knn',knn),('knn5',knn5),('svm',svm),('svm_poly',svm_poly),('gnb',gnb),('xgb',xgb),('abc',abc)])\nVC4.fit(x_train,y_train)\nVC4_pred = VC4.predict(x_test)\nVC4_train = VC4.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, VC4_train))\nprint('accuracy_test = ', accuracy_score(y_test, VC4_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, VC4_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, VC4_pred))\nprint('recall_train = ', metrics.recall_score(y_train, VC4_train))\nprint('recall_test = ', metrics.recall_score(y_test, VC4_pred))\nprint('precision_train = ', metrics.precision_score(y_train, VC4_train))\nprint('precision_test = ', metrics.precision_score(y_test, VC4_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, VC4_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, VC4_pred))\nprint('score_test = ', VC4.score(x_test, y_test))\nprint('score_test = ', VC4.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, VC4_pred))\nprint('f1_score_train = ', f1_score(y_train, VC4_train))","808d5270":"from sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\npipe = Pipeline([('reducer', PCA(n_components = 3)), ('classifier', RandomForestClassifier())])\npipe.fit(x_train, y_train)\npipe.steps","3078fd8b":"pipe.score(x_test, y_test)","a721ec49":"from sklearn.model_selection import GridSearchCV\nparam_grid={\n 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n 'max_features': ['auto', 'sqrt'],\n 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}\ngrid = GridSearchCV(estimator=rf, param_grid=param_grid, cv = 3, n_jobs=-1,verbose=1)\ngrid_result = grid.fit(x_train, y_train)\ngrid_result.best_score_","b4288838":"grid_result.best_params_","a80954ce":"rf2 = RandomForestClassifier(max_depth =  10, max_features =  'auto', n_estimators =  400)\nrf2.fit(x_train,y_train)\nrf2_pred = rf2.predict(x_test)\nrf2_train = rf2.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, rf2_train))\nprint('accuracy_test = ', accuracy_score(y_test, rf2_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, rf2_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, rf2_pred))\nprint('recall_train = ', metrics.recall_score(y_train, rf2_train))\nprint('recall_test = ', metrics.recall_score(y_test, rf2_pred))\nprint('precision_train = ', metrics.precision_score(y_train, rf2_train))\nprint('precision_test = ', metrics.precision_score(y_test, rf2_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, rf2_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, rf2_pred))\nprint('score_test = ', rf2.score(x_test, y_test))\nprint('score_test = ', rf2.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, rf2_pred))\nprint('f1_score_train = ', f1_score(y_train, rf2_train))","78f48d55":"pipe1 = Pipeline([('reducer', PCA(n_components = 3)), ('classifier', RandomForestClassifier(max_depth =  10, max_features =  'auto', n_estimators =  400))])\npipe1.fit(x_train, y_train)\nprint(pipe1.steps)\npipe1.score(x_test, y_test)","6b3fdef0":"rf3 = RandomForestClassifier(max_depth =  7, max_features =  6, n_estimators =  400)\nrf3.fit(x_train,y_train)\nrf3_pred = rf3.predict(x_test)\nrf3_train = rf3.predict(x_train)\nprint('accuracy_train = ', accuracy_score(y_train, rf3_train))\nprint('accuracy_test = ', accuracy_score(y_test, rf3_pred))\nprint('confusion_matrix_train = ', metrics.confusion_matrix(y_train, rf3_train))\nprint('confusion_matrix_test = ', metrics.confusion_matrix(y_test, rf3_pred))\nprint('recall_train = ', metrics.recall_score(y_train, rf3_train))\nprint('recall_test = ', metrics.recall_score(y_test, rf3_pred))\nprint('precision_train = ', metrics.precision_score(y_train, rf3_train))\nprint('precision_test = ', metrics.precision_score(y_test, rf3_pred))\nprint('mse_train = ', metrics.mean_squared_error(y_train, rf3_train))\nprint('mse_test = ', metrics.mean_squared_error(y_test, rf3_pred))\nprint('score_test = ', rf3.score(x_test, y_test))\nprint('score_test = ', rf3.score(x_train, y_train))\nprint('f1_score_test = ', f1_score(y_test, rf3_pred))\nprint('f1_score_train = ', f1_score(y_train, rf3_train))","7d888e89":"pipe2 = Pipeline([('reducer', PCA(n_components = 3)), ('classifier', RandomForestClassifier(max_depth =  7, max_features =  3, n_estimators =  400))])\npipe2.fit(x_train, y_train)\nprint(pipe2.steps)\npipe2.score(x_test, y_test)","6f8190cc":"pipe3 = Pipeline([('reducer', PCA(n_components = 3)), ('classifier', AdaBoostClassifier(n_estimators=7, learning_rate=0.3))])\npipe3.fit(x_train, y_train)\nprint(pipe3.steps)\npipe3.score(x_test, y_test)","fd2ae728":"# Univariate for categorical data ","ce9e4aae":"# Univariate Charts","4473789d":"# Bivariate"}}