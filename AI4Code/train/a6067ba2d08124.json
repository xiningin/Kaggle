{"cell_type":{"e77913c0":"code","f293f20e":"code","0bef85bf":"code","169aa683":"code","a85439b9":"code","cf71daf9":"code","c68bc7fb":"code","0ca612c1":"code","8ab848f2":"code","99c35f69":"code","b1013310":"code","8c88e534":"code","0bd4b093":"code","e66228a9":"markdown","618833ea":"markdown","3d6b853a":"markdown","7edcc303":"markdown","d1ff4f3d":"markdown","ade2b952":"markdown","80bb3ed2":"markdown","f2ad6be0":"markdown","4eb2d695":"markdown","bd706636":"markdown","ada0272c":"markdown","ef2bce50":"markdown","237b04e1":"markdown","100f7985":"markdown","7359d318":"markdown","f8de08a0":"markdown","8e36bdba":"markdown"},"source":{"e77913c0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","f293f20e":"data=pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")","0bef85bf":"data.drop([\"Unnamed: 32\",\"id\"],axis=1,inplace=True)\ndata.diagnosis=[1 if each== \"M\" else 0 for each in data.diagnosis]\nprint(data.info())","169aa683":"y=data.diagnosis.values\nx_data=data.drop([\"diagnosis\"],axis=1)","a85439b9":"x= (x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","cf71daf9":"print(x)","c68bc7fb":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test =train_test_split(x,y,test_size=0.2,random_state=42)\nx_train= x_train.T\nx_test= x_test.T\ny_train= y_train.T\ny_test= y_test.T\n\nprint(\"x_traing:\",x_train.shape)\nprint(\"x_test\",x_test.shape)\nprint(\"y_train\",y_train.shape)\nprint(\"y_test\",y_test.shape)","0ca612c1":"#dimension=30\ndef initialize_weights_and_bias(dimension):\n    w= np.full((dimension,1),0.01)\n    b= 0.0\n    return w,b\ndef sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head\n","8ab848f2":"def forward_backward_propagation(w,b,x_train,y_train):\n    \n    #forward\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    \n    #backward\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 \n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients","99c35f69":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n     # number_of_iterarion kere parametrelerin g\u00fcncellenmesi(\u00f6\u011frenmesi)\n    for i in range(number_of_iterarion):\n        # forward ve backward prop yapar ve cost ,gradients'i bulur.\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # g\u00fcncelle\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    #  weights ve bias'\u0131 parametrelerini g\u00fcncelliyoruz.\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","b1013310":"def predict(w,b,x_test):\n    # x_test bir forward propagation girdisidir.\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # e\u011fer z 0.5'ten b\u00fcy\u00fckse tahminimiz 1 olur (y_head=1),\n    # e\u011fer 0.5'ten k\u00fc\u00e7\u00fckse 0 olur (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n","8c88e534":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # parametrelere ilk katsay\u0131lar\u0131n atanmas\u0131\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # learning rate'i de\u011fi\u015ftirmeyin.\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # test hatalar\u0131 y\u00fczdesi\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 300)  ","0bd4b093":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))","e66228a9":"### w ve b parametrelerine ilk de\u011ferlerin verilmesi ve sigmoid fonksiyonu","618833ea":"## Normalizasyon i\u015flemi","3d6b853a":"#### y       de\u011fi\u015fkenimize binary de\u011ferleri,x_data  de\u011fi\u015fkenimize featurelar\u0131 at\u0131yoruz\n","7edcc303":"#### bu \u015fekilde hesapland\u0131\u011f\u0131nda daha y\u00fcksek sonu\u00e7lar verebiliyor bkz:%97","d1ff4f3d":"## Veri \u00d6n i\u015fleme","ade2b952":"### veriyi train ve test olarak b\u00f6lme i\u015flemi","80bb3ed2":"### Ekstra:","f2ad6be0":"### Kanser h\u00fccreleri verilerimize kurdu\u011fumuz model i\u00e7in do\u011fru tahmin etme y\u00fczdemiz % 96 olarak hesapland\u0131\n### Lojistik regresyon ile en temel binary s\u0131n\u0131fland\u0131rma modelimizi ayr\u0131nt\u0131l\u0131 olarak kodlad\u0131k.","4eb2d695":"### w ve b g\u00fcncelleme fonksiyonu","bd706636":"#### Sci-kit-learn k\u00fct\u00fcphanesi ile k\u0131sa yoldan bulunmas\u0131 i\u00e7in kod sat\u0131r\u0131","ada0272c":"## K\u00fct\u00fcphaneler","ef2bce50":"## Tahmin","237b04e1":"### forward ve backward propagation i\u015flemini yapan fonksiyon","100f7985":"## SONU\u00c7:\n","7359d318":"### normalizasyon formul\u00fc: (x-min(x))\/(max(x)-min(x))","f8de08a0":"## .CSV Dosyas\u0131n\u0131 Okuma","8e36bdba":"## Lojistik Regresyon"}}