{"cell_type":{"9926ca2c":"code","3fb34780":"code","2b14e27c":"code","d15d5dba":"code","3bfb8e2c":"code","b4c2ddad":"code","08b650f1":"code","ceb6ec21":"code","2950aca2":"code","5e7bc7e5":"code","2aa5a9df":"code","b01b6f06":"code","96f78674":"code","3520c56b":"code","58ff6970":"code","ae601065":"code","855721b4":"code","6a4cf7f6":"code","b5dd985c":"code","50234c83":"code","bc761c01":"code","764312ec":"code","38f28d07":"code","876833ae":"code","9e5e1177":"code","0ddf707f":"code","299d2893":"code","91efa7ae":"code","479e1168":"code","05aaca2c":"code","7fbdf5ec":"code","402dd8eb":"code","233035ba":"code","9ff4c03d":"code","0372983c":"code","8b601f90":"code","37463838":"code","52974e4a":"code","7dedc2b5":"code","5bda1a70":"code","029f80a2":"code","e9e2e010":"code","a11c9e85":"code","dc302ac0":"code","ab9fad45":"code","280d4d5b":"code","e8bca1e3":"code","9276eedd":"code","70952969":"code","f7ebf358":"code","dc41a5fe":"code","ca2e71be":"code","330dcf65":"code","b99ca110":"code","68d13870":"code","f6279219":"code","e8de4fb0":"code","84219293":"markdown","06663009":"markdown","293ffe1e":"markdown","98e784c5":"markdown","833b702c":"markdown","7ba9b7b3":"markdown","34104681":"markdown","07ab8563":"markdown","137b7cda":"markdown","d93c894b":"markdown","dbbb88a7":"markdown","d46f81a0":"markdown","15362e6b":"markdown","4a0d8a15":"markdown","2dc41f43":"markdown","61474660":"markdown","00e757f7":"markdown","bb767bdd":"markdown","a4ff32ef":"markdown","3185d7ce":"markdown","ebb400aa":"markdown","fcd7a068":"markdown","5911e7cb":"markdown","e4907861":"markdown","1d6461bc":"markdown","ccd8ee37":"markdown","de228493":"markdown","fc930887":"markdown","776d1f76":"markdown"},"source":{"9926ca2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle\nimport xgboost as xgb\nimport catboost as catb\nimport lightgbm as lgbm\nimport scipy.stats as stats\n\n\nfrom sklearn.model_selection import train_test_split, ShuffleSplit, cross_val_score, learning_curve\nfrom sklearn.metrics import classification_report, f1_score, precision_score, recall_score\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV, RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.svm import SVC\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, ShuffleSplit, cross_val_score, learning_curve\nfrom sklearn.model_selection import KFold, GridSearchCV, RandomizedSearchCV\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier, CatBoostRegressor, Pool\n\nfrom pathlib import Path\n\nfrom scipy.stats import shapiro\nfrom scipy.stats import probplot\nfrom scipy.stats import mannwhitneyu\nfrom scipy.stats import chi2_contingency\n\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\n\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","3fb34780":"TRAIN_DATASET_PATH = '\/kaggle\/input\/654pds2courseproject\/course_project_train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/654pds2courseproject\/course_project_test.csv'\n\ndf_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_test = pd.read_csv(TEST_DATASET_PATH)","2b14e27c":"TARGET_NAME = 'Credit Default'\nBASE_FEATURE_NAMES = df_train.columns.drop(TARGET_NAME).tolist()\n#NEW_FEATURE_NAMES = ['']\nNUMB_FEATURE_NAMES = ['Annual Income','Tax Liens','Number of Open Accounts','Years of Credit History',\n                     'Maximum Open Credit','Number of Credit Problems','Months since last delinquent',\n                     'Bankruptcies','Current Loan Amount','Current Credit Balance','Monthly Debt','Credit Score']\nCAT_FEATURE_NAMES = ['Years in current job','Home Ownership','Purpose','Term']","d15d5dba":"y = df_train[[TARGET_NAME]]\ny.info()","3bfb8e2c":"plt.figure(figsize=(8, 5))\n\nsns.countplot(x=TARGET_NAME, data=df_train)\n\nplt.title('Target variable distribution')\nplt.show()","b4c2ddad":"df_train.head(10)","08b650f1":"corr_with_target = df_train.corr().iloc[:-1, -1].sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\n\nplt.title('Correlation with target variable')\nplt.show()","ceb6ec21":"plt.figure(figsize=(10, 8))\n\nsns.countplot(x=\"Years in current job\", hue=TARGET_NAME, data=df_train)\nplt.title('\\\"Years in current job\\\" grouped by target variable')\nplt.legend(title='Target', loc='upper right')\n\nplt.show()","2950aca2":"# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ndf_train.isna().sum()","5e7bc7e5":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - 1\/0 (\u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043e\u0441\u0442\u044c\/\u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438)\ndf_train['has_delay'] = 1\ndf_train.loc[(df_train['Months since last delinquent'] == 0), 'has_delay'] = 0\n\n# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a NaN \u043d\u0430 0 \u0432 'Months since last delinquent'\ndf_train['Months since last delinquent'].fillna(0, inplace=True)","2aa5a9df":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c \u0434\u043e\u0445\u043e\u0434\u0435 1\/0 (\u0434\u043e\u0445\u043e\u0434 \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d\/\u0434\u043e\u0445\u043e\u0434 \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d)\ndf_train['unknown_income'] = 0\ndf_train.loc[(df_train['Annual Income'].isnull()), 'unknown_income'] = 1\n\n# \u0412 \u043d\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e annual_income_median \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u0445\u043e\u0434\u0430\nannual_income_median = df_train['Annual Income'].median()\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0434\u043e\u0445\u043e\u0434\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndf_train['Annual Income'].fillna(annual_income_median, inplace=True)","b01b6f06":"df_train.isnull().sum()\ndf_train.head(10)","96f78674":"NEW_FEATURE_NAMES = ['has_delay','unknown_income']","3520c56b":"corr_with_target = df_train[BASE_FEATURE_NAMES + \n                            NEW_FEATURE_NAMES + \n                            [TARGET_NAME]].corr().iloc[:-1, -1].sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\n\nplt.title('Correlation with target variable')\nplt.show()","58ff6970":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043b\u044e\u0434\u0435\u0439, \u0432 \u0433\u0440\u0443\u043f\u043f\u0430\u0445 \u043f\u043e \u0441\u0442\u0430\u0436\u0443 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0445 \u043a\u0440\u0435\u0434\u0438\u0442\n\ng = sns.catplot(\"Credit Default\", col=\"Years in current job\", col_wrap=5,\n                data=df_train,\n                kind=\"count\", height=3.5, aspect=.8, \n                palette='tab20')\n\n#fig.suptitle('sf')\nplt.show()","ae601065":"plt.figure(figsize = (10, 3))\n\ndf_train['Credit Score'].hist(bins=30, )\nplt.ylabel('Count')\nplt.xlabel('Credit Score')\n\nplt.title('bla bla')\nplt.show()","855721b4":"df_train.isnull().sum()","6a4cf7f6":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f unknown_credit_score \u043f\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c\u0443 Credit Score \u0441 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0435\u043c 0 \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c \ndf_train['unknown_credit_score'] = 0\n\nNEW_FEATURE_NAMES = ['has_delay','unknown_income','unknown_credit_score']\n\n# \u0412 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e credit_score_median \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\ncredit_score_median = df_train['Credit Score'].median()\n\n# \u041f\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c\u0443 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f 1 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 unknown_credit_score\ndf_train.loc[(df_train['Credit Score'].isnull()), 'unknown_credit_score'] = 1\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndf_train['Credit Score'].fillna(credit_score_median, inplace=True)","b5dd985c":"import random\n\n# \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Years in current job\nunique_years_in_current_job = df_train['Years in current job'].unique()\n\nvar_experiance = unique_years_in_current_job[1:]\n\n# NaN \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0439 \u043e\u043f\u044b\u0442\ndf_train['Years in current job'].fillna(random.choice(var_experiance), inplace=True)","50234c83":"df_train.isnull().sum()","bc761c01":"df_train.head(10)","764312ec":"# 99999999.0 \u0432 Current Loan Amount \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435\nmedian_current_loan_amount = df_train['Current Loan Amount'].median()\ndf_train.loc[(df_train['Current Loan Amount'] == 99999999.0), 'Current Loan Amount'] = median_current_loan_amount","38f28d07":"df_train.Bankruptcies.value_counts()","876833ae":"df_train['Bankruptcies'].fillna(0 , inplace=True)","9e5e1177":"df_train.Bankruptcies.value_counts()","0ddf707f":"df_train.isnull().sum()","299d2893":"for cat_colname in df_train.select_dtypes(include='object').columns:\n    print(str(cat_colname) + '\\n\\n' + str(df_train[cat_colname].value_counts()) + '\\n' + '*' * 100 + '\\n')","91efa7ae":"df_train['term_binary'] = df_train['Term'].map({'Short Term':'1', 'Long Term':'0'}).astype(int)\nNEW_FEATURE_NAMES = ['has_delay','unknown_income','unknown_credit_score','term_binary']","479e1168":"df_train.select_dtypes(include='object').columns[1:]","05aaca2c":"corr_with_target = df_train[BASE_FEATURE_NAMES + \n                            NEW_FEATURE_NAMES + \n                            [TARGET_NAME]].corr().iloc[:-1, -1].sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\n\nplt.title('Correlation with target variable')\nplt.show()","7fbdf5ec":"def get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred):\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('TEST\\n\\n' + classification_report(y_test_true, y_test_pred))\n    print('CONFUSION MATRIX\\n')\n    print(pd.crosstab(y_test_true, y_test_pred))","402dd8eb":"def balance_df_by_target(df, target_name):\n\n    target_counts = df[target_name].value_counts()\n\n    major_class_name = target_counts.argmax()\n    minor_class_name = target_counts.argmin()\n\n    disbalance_coeff = int(target_counts[major_class_name] \/ target_counts[minor_class_name]) - 1\n\n    for i in range(disbalance_coeff):\n        sample = df[df[target_name] == minor_class_name].sample(target_counts[minor_class_name])\n        df = df.append(sample, ignore_index=True)\n\n    return df.sample(frac=1) ","233035ba":"df_train.head(10)","9ff4c03d":"NEW_FEATURE_NAMES","0372983c":"SELECTED_FEATURE_NAMES = NUMB_FEATURE_NAMES + NEW_FEATURE_NAMES\n\n\nX = df_train[SELECTED_FEATURE_NAMES]\ny = df_train[TARGET_NAME]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.30, random_state=11)","8b601f90":"scaler = StandardScaler()\n\ndf_norm = df_train.copy()\ndf_norm[NUMB_FEATURE_NAMES] = scaler.fit_transform(df_norm[NUMB_FEATURE_NAMES])\n\ndf_train = df_norm.copy()","37463838":"df_for_balancing = pd.concat([X_train, y_train], axis=1)\ndf_balanced = balance_df_by_target(df_for_balancing, TARGET_NAME)\n    \ndf_balanced[TARGET_NAME].value_counts()","52974e4a":"X_train = df_balanced.drop(columns=TARGET_NAME)\ny_train = df_balanced[TARGET_NAME]","7dedc2b5":"model_lr = LogisticRegression()\nmodel_lr.fit(X_train, y_train)\n\ny_train_pred = model_lr.predict(X_train)\ny_test_pred = model_lr.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","5bda1a70":"model_knn = KNeighborsClassifier()\nmodel_knn.fit(X_train, y_train)\n\ny_train_pred = model_knn.predict(X_train)\ny_test_pred = model_knn.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","029f80a2":"model_xgb = xgb.XGBClassifier(random_state=11)\nmodel_xgb.fit(X_train, y_train)\n\ny_train_pred = model_xgb.predict(X_train)\ny_test_pred = model_xgb.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","e9e2e010":"model_lgbm = lgbm.LGBMClassifier(random_state=11)\nmodel_lgbm.fit(X_train, y_train)\n\ny_train_pred = model_lgbm.predict(X_train)\ny_test_pred = model_lgbm.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","a11c9e85":"model_catb = catb.CatBoostClassifier(silent=True, random_state=11)\nmodel_catb.fit(X_train, y_train)\n\ny_train_pred = model_catb.predict(X_train)\ny_test_pred = model_catb.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","dc302ac0":"model_catb = catb.CatBoostClassifier(class_weights=[1, 3.5], silent=True, random_state=11)","ab9fad45":"params = {'n_estimators':[50, 100, 200, 500, 700, 1000, 1200, 1500],\n          'max_depth':[3, 5, 7]}","280d4d5b":"cv=KFold(n_splits=3, random_state=11, shuffle=True)","e8bca1e3":"%%time\n\nrs = RandomizedSearchCV(model_catb, params, scoring='f1', cv=cv, n_jobs=-1)\nrs.fit(X, y)","9276eedd":"rs.best_params_","70952969":"rs.best_score_","f7ebf358":"%%time\n\nfinal_model = catb.CatBoostClassifier(n_estimators=1500, max_depth=3,\n                                      silent=True, random_state=11)\nfinal_model.fit(X_train, y_train)\n\ny_train_pred = final_model.predict(X_train)\ny_test_pred = final_model.predict(X_test)\n\nget_classification_report(y_train, y_train_pred, y_test, y_test_pred)","dc41a5fe":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a has_delay, \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f 1\ndf_test['has_delay'] = 1\n\n# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f NaN \u043d\u0430 0 \u0432 'Months since last delinquent'\ndf_test['Months since last delinquent'].fillna(0, inplace=True)\n\n# \u041f\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f 0 \u0432 has_delay\ndf_test.loc[(df_test['Months since last delinquent'] == 0), 'has_delay'] = 0\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a unknown_income, \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f 0\ndf_test['unknown_income'] = 0\n\n# \u0412 annual_income_median \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u0445\u043e\u0434\u0430\nannual_income_median = df_test['Annual Income'].median()\n\n# \u0412 unknown_income \u043f\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c\u0443 \u0434\u043e\u0445\u043e\u0434\u0443 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f 1 \ndf_test.loc[(df_test['Annual Income'].isnull()), 'unknown_income'] = 1\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0434\u043e\u0445\u043e\u0434\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ndf_test['Annual Income'].fillna(annual_income_median, inplace=True)\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a unknown_credit_score, \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f 0\ndf_test['unknown_credit_score'] = 0\nNEW_FEATURE_NAMES = ['has_delay','unknown_income','unknown_credit_score']\n\n# \u0412 credit_score_median \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\ncredit_score_median = df_test['Credit Score'].median()\n\n# \u0412 unknown_credit_score \u043f\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f 1 \ndf_test.loc[(df_test['Credit Score'].isnull()), 'unknown_credit_score'] = 1\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ndf_test['Credit Score'].fillna(credit_score_median, inplace=True)\n\n# \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f Years in current job\nunique_years_in_current_job = df_test['Years in current job'].unique()\n\nvar_experiance = unique_years_in_current_job[1:]\n\n# NaN \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u0433\u043e \u0441\u0442\u0430\u0436\u0430\ndf_test['Years in current job'].fillna(random.choice(var_experiance), inplace=True)\n\n# 99999999.0 \u0432 Current Loan Amount \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435\nmedian_current_loan_amount = df_test['Current Loan Amount'].median()\ndf_test.loc[(df_test['Current Loan Amount'] == 99999999.0), 'Current Loan Amount'] = median_current_loan_amount\n\ndf_test['term_binary'] = df_test['Term'].map({'Short Term':'1', 'Long Term':'0'}).astype(int)","ca2e71be":"df_for_model = df_test[SELECTED_FEATURE_NAMES]\ndf_for_model.head(10)","330dcf65":"y_pred_output = final_model.predict(df_for_model)","b99ca110":"y_pred_output.shape","68d13870":"result=pd.DataFrame({'Id':np.arange(2500), 'Credit Default': y_pred_output})","f6279219":"RESULT_PATH='.\/KukhtaAV_predictions.csv'\nresult.to_csv(RESULT_PATH, index=False)","e8de4fb0":"SAMPLE = '.\/KukhtaAV_predictions.csv'\ndf_sample = pd.read_csv(SAMPLE)\n\npredictions = pd.DataFrame(index = df_sample['Id'])\n\npredictions[TARGET_NAME] = y_pred_output\npredictions","84219293":"**LightGBM**","06663009":"### \u0417\u0430\u0434\u0430\u0447\u0430\n\n\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0431\u0430\u043d\u043a\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0433\u043e\u0432\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043a\u0440\u0435\u0434\u0438\u0442\u0443. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.\n\n### \u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n\ncourse_project_train.csv - \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n\ncourse_project_test.csv - \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n\n### \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\n\nCredit Default - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\n\n### \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\n\nF1-score (sklearn.metrics.f1_score)\n\n### \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e\n\n*\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430*\n\n- F1 > 0.5\n- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 (1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443)\n\n*\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442*\n\n1) \u0422\u0435\u0442\u0440\u0430\u0434\u043a\u0443 Jupyter Notebook KukhtaAV_solution.ipynb\n\n2) \u0424\u0430\u0439\u043b CSV \u0441 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430\u043c\u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 KukhtaAV_predictions.csv\n\n3) \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0432 kaggle - https:\/\/www.kaggle.com\/alena77\/python-ds\n\n4) \u041d\u0438\u043a \u043d\u0430 kaggle - https:\/\/www.kaggle.com\/alena77\n\n*\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 \u0441 \u043a\u043e\u0434\u043e\u043c (ipynb)*\n\n1) \u0424\u0430\u0439\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 (markdown)\n\n2) \u041f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043b\u0443\u0447\u0448\u0435 \u043e\u0444\u043e\u0440\u043c\u043b\u044f\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439\n\n3) \u041d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u043e\u043a \u0442\u0430\u0431\u043b\u0438\u0446 (5-10 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e)\n\n4) \u041f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a\u0438, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u043e\u043a\u043e\u043b\u043e 3-5)\n\n5) \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u043a\u043e\u0434 \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\n6) \u0421\u043a\u0440\u0438\u043f\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 (\u043e\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439)\n\n7) \u0412\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435 (\u0444\u0430\u0439\u043b ipynb).\n\n8) \u0414\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a Python \u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043a\u0443\u0440\u0441\u0435.\n\n**\u0421\u0440\u043e\u043a\u0438 \u0441\u0434\u0430\u0447\u0438**\n\nC\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0443\u0436\u043d\u043e \u0434\u043e 04.03.2021, 20:00. \n\n\u041e\u0446\u0435\u043d\u043a\u0438 \u0440\u0430\u0431\u043e\u0442, \u0441\u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430, \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430, \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430. \n\n\u041f\u0440\u043e\u0435\u043a\u0442\u044b, \u0441\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430 \u0438\u043b\u0438 \u0441\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e, \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u0437\u043d\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","293ffe1e":"*\u0412\u044b\u0432\u043e\u0434\u044b \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:*\n\n- \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \"Months since last delinquent\" \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u0447\u0442\u043e \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442. NaN \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f 0. \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - 1\/0 (\u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043e\u0441\u0442\u044c\/\u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u0430\u0434\u043e\u043b\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438).\n\n- \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \"Annual Income\" \u043c\u043e\u0433\u0443\u0442 \u0441\u0432\u0438\u0434\u0435\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u043c \u0434\u043e\u0445\u043e\u0434\u0435. \u0414\u0430\u043d\u043d\u044b\u0439 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439 \u0432\u0430\u0436\u0435\u043d \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0 (\u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434).\n\n- \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 99999999 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \"Current Loan Amount\" \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043c\u043d\u0435\u043d\u0438\u0435 \u0432 \u0435\u0433\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043e\u0441\u0442\u0438. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441.","98e784c5":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Current Loan Amount","833b702c":"### \u0412\u044b\u0431\u043e\u0440 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","7ba9b7b3":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","34104681":"**LogisticRegression**","07ab8563":"**\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","137b7cda":"**XGBoost**","d93c894b":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Bankruptcies","dbbb88a7":"### \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445<a class=\"anchor\" id=\"course_project_review\"><\/a>\n\n**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n* **Home Ownership** - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n* **Annual Income** - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n* **Years in current job** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n* **Tax Liens** - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n* **Number of Open Accounts** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n* **Years of Credit History** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n* **Maximum Open Credit** - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\n* **Number of Credit Problems** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n* **Months since last delinquent** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n* **Bankruptcies** - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n* **Purpose** - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Term** - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Current Loan Amount** - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Current Credit Balance** - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\n* **Monthly Debt** - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n* **Credit Default** - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)","d46f81a0":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0431\u043e\u0440\u044c\u0431\u0430 \u0441 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c","15362e6b":"## \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\n**\u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a**","4a0d8a15":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 'Credit Score'","2dc41f43":"**CatBoost**","61474660":"# \u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u043a\u0443\u0440\u0441\u0443 \"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python \u0434\u043b\u044f Data Science: \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435\"","00e757f7":"### \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u0442\u0430\u043f\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430<a class=\"anchor\" id=\"course_project_steps\"><\/a>\n\n**\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438**\n1. \u041e\u0431\u0437\u043e\u0440 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 +\n2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 +\n3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 +\n4. \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n5. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n6. \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n7. \u041f\u043e\u0434\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0439\u0437\u043b\u0430\u043d\u0430\n8. \u0412\u044b\u0431\u043e\u0440 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n9. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0431\u043e\u0440\u044c\u0431\u0430 \u0441 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c\n10. \u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\n\n**\u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435**\n1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u043d\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n2. \u0421\u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n3. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a)\n4. \u0421\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","bb767bdd":"\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","a4ff32ef":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","3185d7ce":"**k \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439**","ebb400aa":"**\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432**","fcd7a068":"**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f**","5911e7cb":"\u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","e4907861":"**\u041e\u0431\u0437\u043e\u0440 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n*\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430*\n\n* **Home Ownership** - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n* **Annual Income** - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n* **Years in current job** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n* **Tax Liens** - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n* **Number of Open Accounts** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n* **Years of Credit History** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n* **Maximum Open Credit** - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\n* **Number of Credit Problems** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n* **Months since last delinquent** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n* **Bankruptcies** - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n* **Purpose** - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Term** - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Current Loan Amount** - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Current Credit Balance** - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\n* **Monthly Debt** - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n* **Credit Default** - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)","1d6461bc":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Term","ccd8ee37":"### \u041f\u043e\u0434\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0439\u0437\u043b\u0430\u043d\u0430","de228493":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Years in current job","fc930887":"\u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430","776d1f76":"**\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**"}}