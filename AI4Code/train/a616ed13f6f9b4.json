{"cell_type":{"c58b8113":"code","f615373e":"code","63b4bda6":"code","f16a457f":"code","b617ae57":"code","5b0ee17f":"code","f2549c1b":"code","a380e3b3":"code","84bb9dec":"code","17b1f1ac":"code","22218300":"code","a9a66445":"code","fb4ea95d":"code","84baa135":"code","e879d3df":"code","37e2fcec":"code","d6989930":"code","d950a900":"code","a74c68aa":"code","536b409f":"code","eb411b8c":"code","aed51888":"code","2f947f10":"markdown"},"source":{"c58b8113":"# loading the required libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn ","f615373e":"# install keras neural-network library\n!pip install keras","63b4bda6":"# loading the dataset \nfrom keras.datasets import cifar10\n(X_train, y_train) , (X_test, y_test) = cifar10.load_data()","f16a457f":"# checking the shape\nprint('X_train shape - ',X_train.shape)\nprint('X_test shape - ',X_test.shape)\nprint('y_train shape - ',y_train.shape)\nprint('y_test shape - ',y_test.shape)\n","b617ae57":"# visualizing few samples\n\nlabels = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']\n\nW_grid = 10\nL_grid = 10\n\nfig, axes = plt.subplots(L_grid, W_grid, figsize = (25, 25))\naxes = axes.ravel()\n\nn_training = len(X_train)\n\nfor i in range(0,L_grid*W_grid):\n    index = np.random.randint(0,n_training) # pick a random number\n    axes[i].imshow(X_train[index])\n    index = y_train[index]\n    axes[i].set_title(labels[int(index)])\n    axes[i].axis('off')\n    \nplt.subplots_adjust(hspace = 0.4)","5b0ee17f":"# converting the values into float and normalizing\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_train = X_train\/255\nX_test = X_test\/255\n","f2549c1b":"# encoding the Predictor variable\nimport keras\ny_train = keras.utils.to_categorical(y_train, 10)\ny_test = keras.utils.to_categorical(y_test, 10)","a380e3b3":"# Storing the input shape\nInput_shape = X_train.shape[1:]\nInput_shape","84bb9dec":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,Dense,AveragePooling2D,MaxPooling2D, Flatten, Dropout\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard","17b1f1ac":"cnn_model = Sequential()\ncnn_model.add(Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu', input_shape = Input_shape))\ncnn_model.add(Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'))\ncnn_model.add(MaxPooling2D(2,2))\ncnn_model.add(Dropout(0.4))\n\n\ncnn_model.add(Conv2D(filters = 128, kernel_size = (3,3), activation = 'relu'))\ncnn_model.add(Conv2D(filters = 128, kernel_size = (3,3), activation = 'relu'))\ncnn_model.add(AveragePooling2D(2,2))\ncnn_model.add(Dropout(0.4))\n\ncnn_model.add(Flatten())\n\ncnn_model.add(Dense(units = 1024, activation = 'relu'))\n\ncnn_model.add(Dense(units = 1024, activation = 'relu'))\n\ncnn_model.add(Dense(units = 10, activation = 'softmax'))","22218300":"cnn_model.compile(loss = 'categorical_crossentropy', optimizer = keras.optimizers.Adam(lr = 0.001), metrics = ['accuracy'])","a9a66445":"cnn_model.summary()","fb4ea95d":"# fitting the train data into the model\nhistory = cnn_model.fit(X_train, y_train, batch_size = 32, epochs = 10, shuffle = True,validation_data=(X_test,y_test))","84baa135":"# Evaluating the model performance\nevaluation = cnn_model.evaluate(X_test, y_test)\nprint('Test Accuracy: {}'.format(evaluation[1]))","e879d3df":"predicted_classes = cnn_model.predict_classes(X_test) \npredicted_classes","37e2fcec":"y_test = y_test.argmax(1)\ny_test","d6989930":"y_test ","d950a900":"# plotting Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncm = confusion_matrix(y_test, predicted_classes)\ncm\nplt.figure(figsize = (10, 10))\nsns.heatmap(cm, annot = True)","a74c68aa":"# generating more data using the existing data\nfrom keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n                            #width_shift_range = 0.1,\n                            horizontal_flip = True,\n                             )\ndatagen.fit(X_train)","536b409f":"# retraining the model\n\ncnn_model.fit_generator(datagen.flow(X_train, y_train, batch_size = 32), epochs = 5)","eb411b8c":"# encoding the Predictor variable\ny_test = keras.utils.to_categorical(y_test, 10)","aed51888":"# printing the accuracy\nscore = cnn_model.evaluate(X_test, y_test)\nprint('Test accuracy', score[1])","2f947f10":"MODEL TRAINING USING AUGEMENTED DATASET"}}