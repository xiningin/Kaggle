{"cell_type":{"f002d78f":"code","26dd41e6":"code","e19958a9":"code","c92186a6":"code","4d0c4480":"code","0acf5114":"code","f2e219d3":"code","59ab5f0b":"code","aea46175":"code","bef49c6d":"code","37b0b015":"code","2d2fc2c6":"code","e948864d":"code","7ad93d22":"code","653c9a14":"code","9557b66a":"code","db614d2c":"code","2341c74c":"code","4ff170c3":"code","b3d83ef2":"code","c9c6c4f7":"code","1f13ef7b":"code","e978b9f2":"code","96301f1b":"code","1b743053":"code","2c7b4f01":"code","b39e41e3":"code","0958403c":"code","856bcc10":"code","7c732aec":"code","b6cf886e":"code","6e6e6be6":"code","076e9a18":"code","cc9af0b3":"code","b39da0f1":"code","0003ab38":"code","2a9bf176":"code","58729a55":"code","e041b544":"code","df8a93e6":"code","771843b1":"code","0e573282":"markdown","884d323b":"markdown","c1f00306":"markdown"},"source":{"f002d78f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26dd41e6":"data = pd.read_csv(\"\/kaggle\/input\/water-potability\/water_potability.csv\")","e19958a9":"data.head","c92186a6":"data.head()","4d0c4480":"data.shape","0acf5114":"data[data.columns].isnull().sum()","f2e219d3":"n = data.nunique(axis=0) ","59ab5f0b":"n","aea46175":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","bef49c6d":"dataplot = sns.heatmap(data.corr(), cmap=\"YlGnBu\", annot=True)\nplt.show()","37b0b015":"print(data.corr())","2d2fc2c6":"data.dtypes","e948864d":"data.columns","7ad93d22":"data['Potability'] = data['Potability'].astype(float)","653c9a14":"data.dtypes","9557b66a":"data = data.ffill(axis=0)","db614d2c":"data = data.bfill(axis=0)","2341c74c":"data.shape","4ff170c3":"data","b3d83ef2":"data.head()","c9c6c4f7":"data[data.columns].isnull().sum()","1f13ef7b":"dataplot = sns.heatmap(data.corr(), cmap=\"YlGnBu\", annot=True)\nplt.show()","e978b9f2":"X = data.drop(['Potability','Organic_carbon', 'Trihalomethanes', 'Turbidity'],axis=1)\nY = data['Potability']","96301f1b":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.4,random_state=42)","1b743053":"from xgboost import XGBClassifier","2c7b4f01":"xgb_model = XGBClassifier(random_state = 0 ,use_label_encoder=False)\nxgb_model.fit(X_train, Y_train)\n\nprint(\"Feature Importances : \", xgb_model.feature_importances_) ","b39e41e3":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","0958403c":"from sklearn.linear_model import LogisticRegression\nlm = LogisticRegression()","856bcc10":"lm.fit(X_train,Y_train)","7c732aec":"predictions = lm.predict(X_test)\nfrom sklearn import metrics\ny_pred = lm.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, y_pred)))","b6cf886e":"print(y_pred)","6e6e6be6":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_pred,Y_test))","076e9a18":"print(confusion_matrix(y_pred,Y_test))","cc9af0b3":"from sklearn.ensemble import RandomForestClassifier \nclf = RandomForestClassifier(n_estimators = 100)   \n\nclf.fit(X_train, Y_train) \n \ny_pred = clf.predict(X_test) \n\nfrom sklearn import metrics \naccuracy_s =  metrics.accuracy_score(Y_test, y_pred)\nprint(accuracy_s)","b39da0f1":"print(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, y_pred)))","0003ab38":"print(classification_report(y_pred,Y_test))\nprint(confusion_matrix(y_pred,Y_test))","2a9bf176":"from sklearn.svm import SVC\nmodel = SVC(kernel='linear',random_state=42)\nmodel.fit(X_train,Y_train)","58729a55":"confirm = model.predict(X_test)\nmodel.score(X_test,Y_test)","e041b544":"\nfrom sklearn.model_selection import GridSearchCV\n  \n# defining parameter range\nparam_grid = {'C': [0.1, 1, 10, 100, 1000], \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n              'kernel': ['rbf']} \n  \ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)\n  \n# fitting the model for grid search\ngrid.fit(X_train, Y_train)","df8a93e6":"print(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, y_pred)))","771843b1":"MAX ACCURACY:USING FORWARD FILL FOLLOWED BY BACKWORD FILL,USING XGBOOST REMOVING UNECESSARY FEATURES.","0e573282":"Only Organic carbon has a negative effect on potability through this data","884d323b":"ACCURACY OF 70%(GOOD CONCERNING ONLY 3276 EXAMPLES) USING RANDOM FORESTS CLASSIFIER AFTER TRYING MANY POSSIBILITIES, CHECKING CREDIBILITY OF FEATURES,MANY FILLING WAYS OF NAN VALUES AND ALGORITHMS.\nHOPEFULLY THIS NOTEBOOK HELPS YOU. IF YOU FOUND THIS USEFUL, GIVE AN UPVOTE.\n","c1f00306":"Approach 1:Filling NaN values by mean of the column:"}}