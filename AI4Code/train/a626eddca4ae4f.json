{"cell_type":{"d4f54435":"code","f1140a7a":"code","191dc0fc":"code","c424c31e":"code","f5dc62fe":"code","d46039df":"code","dcc01265":"code","83845176":"code","5d9ab71a":"code","3735738d":"code","575aacfd":"code","84eb7c46":"code","3ad2fd0c":"code","1f18141d":"markdown","025ba116":"markdown"},"source":{"d4f54435":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n'''\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n'''\n# Any results you write to the current directory are saved as output.\nfrom torch.utils.data import Dataset,DataLoader\nimport cv2\nimport torch\nimport torch.nn as nn\nfrom tqdm import tqdm_notebook as tqdm","f1140a7a":"class Resize(object):\n    def __init__(self,resize=64):\n        self.resize = resize\n    def __call__(self):\n        \n        !rm -r train_resized\/dogs\n        !rm -r train_resized\/cats\n        !rm -r test_resized\/dogs\n        !rm -r test_resized\/cats\n        !mkdir -p train_resized\/dogs\n        !mkdir -p train_resized\/cats\n        !mkdir -p test_resized\/dogs\n        !mkdir -p test_resized\/cats\n        \n        for _class in ['cats','dogs']:\n            \n            for _type in ['training_set','test_set']:\n                \n                if 'train' in _type:\n                    _type2 = 'train'\n                else:\n                    _type2 = 'test'\n                \n                path = os.path.join('\/kaggle\/input\/cat-and-dog',_type,_type)\n            \n                _dir = os.path.join(path,_class)\n                for root,_,fnames in sorted(os.walk(_dir,followlinks=True)):\n                    for fname in fnames:\n                        if '.jpg' in fname:\n                            image = cv2.imread(os.path.join(_dir,fname))\n                            image = cv2.resize(image,(self.resize,self.resize),interpolation=cv2.INTER_CUBIC)\n                            result = cv2.imwrite(os.path.join(f'{_type2}_resized\/{_class}',fname),image)\n                            print('{} {} saved {}'.format(_type,_class,result))\n            \n                \n                ","191dc0fc":"resize = Resize()\nresize()","c424c31e":"class CatDogDataset(Dataset):\n    def __init__(self,_type='train_resized'):\n        self.path = _type\n        self.classes = {'cats':0,'dogs':1}\n        self.samples = self.get_samples(self.classes)\n        \n    def __len__(self):\n        return len(self.samples)\n    \n    def __getitem__(self,idx):\n        image = self.samples[idx][0]\n        image = cv2.imread(image)\n\n        label = self.samples[idx][1]\n        return image, label\n        \n        \n    def get_samples(self,classes):\n        images = []\n        for i in sorted(classes.keys()):\n            root = os.path.join(self.path,i)\n            for root,_,fnames in sorted(os.walk(root,followlinks=True)):\n                for fname in fnames:\n                    if 'jpg' in fname:\n                        item = (os.path.join(root,fname),classes[i])\n                        images.append(item)\n\n        return images","f5dc62fe":"catdog = CatDogDataset()\ncatdog_images = DataLoader(catdog,batch_size=25,shuffle=True)","d46039df":"import matplotlib.pyplot as plt\nb = next(iter(catdog_images))\nfigs, ax = plt.subplots(5,5,figsize=(25,25))\nfor i in range(25):\n    j = i\/\/5\n    k = i%5\n    ax[j,k].imshow(b[0][i])\n    ax[j,k].set_title(f'{b[1][i]}',fontsize=20)","dcc01265":" class ResidualBlock(nn.Module):\n        \n        def __init__(self,in_channels,out_channels,stride=1,kernel_size=3,padding=1,bias=False):\n            super().__init__()\n            self.conv1 = nn.Sequential(\n                nn.Conv2d(in_channels,out_channels,kernel_size,stride,padding,bias=False),\n                nn.BatchNorm2d(out_channels),\n                nn.ReLU(inplace=True),\n            )\n            self.conv2 = nn.Sequential(\n                nn.Conv2d(out_channels,out_channels,kernel_size,1,padding,bias=False),\n                nn.BatchNorm2d(out_channels),\n            )\n            \n            if stride!=1 or in_channels != out_channels:\n                self.shortcut = nn.Sequential(\n                    nn.Conv2d(in_channels,out_channels,kernel_size=1,stride = stride,bias=False),\n                    nn.BatchNorm2d(out_channels))\n            else:\n                self.shortcut = nn.Sequential()\n            \n        def forward(self,x):\n            residual = x\n            x = self.conv1(x)\n            x = self.conv2(x)\n            x += self.shortcut(residual)\n            x = nn.ReLU(inplace=True)(x)\n            return x\n            ","83845176":"class ResNet34(nn.Module):\n    def __init__(self,n_classes):\n        super().__init__()\n        \n        self.block1 = nn.Sequential(\n            nn.Conv2d(3,64,7,2,3,bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True)\n        )\n        self.block2 = nn.Sequential(\n            nn.MaxPool2d(3,2),\n            ResidualBlock(64,64,1),\n            ResidualBlock(64,64,1),\n            ResidualBlock(64,64,1)\n        )\n        self.block3 = nn.Sequential(\n            ResidualBlock(64,128,1),\n            ResidualBlock(128,128,1),\n            ResidualBlock(128,128,1),\n            ResidualBlock(128,128,2)\n        )\n        self.block4 = nn.Sequential(\n            ResidualBlock(128,256,1),\n            ResidualBlock(256,256,1),\n            ResidualBlock(256,256,1),\n            ResidualBlock(256,256,1),\n            ResidualBlock(256,256,1),\n            ResidualBlock(256,256,2)\n        )\n        self.block5 = nn.Sequential(\n            ResidualBlock(256,512,1),\n            ResidualBlock(512,512,1),\n            ResidualBlock(512,512,2)\n        )\n        self.avgpool = nn.AvgPool2d(2)\n        self.fc = nn.Linear(512,n_classes)\n        \n    def forward(self,x):\n        x = self.block1(x)\n        x = self.block2(x)\n        x = self.block3(x)\n        x = self.block4(x)\n        x = self.block5(x)\n        x = self.avgpool(x)\n        x = x.view(x.size(0),-1)\n        x = self.fc(x)\n        \n        return x","5d9ab71a":"!pip install torchsummary\nfrom torchsummary import summary\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel = ResNet34(2).to(device)\nsummary(model, (3, 64, 64))","3735738d":"catdog = CatDogDataset()\ntrain_loader = DataLoader(catdog,batch_size=25,shuffle=True)","575aacfd":"model = ResNet34(2).to(device)\noptimizer = torch.optim.Adam(model.parameters(),lr = 1e-4)\ncriterion = nn.CrossEntropyLoss(reduce='mean')\nepochs = 20\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel.train()\nlosses = []\naccs = []\nfor epoch in range(epochs):\n    \n    print('epochs {}\/{} '.format(epoch+1,epochs))\n    running_loss = 0.0\n    running_acc = 0.0\n    for idx, (inputs,labels) in tqdm(enumerate(train_loader),total=len(train_loader)):\n        inputs = inputs.to(device)\n        labels = labels.to(device)\n        \n        optimizer.zero_grad()\n        \n        outputs = model(inputs.permute(0,3,2,1).float())\n        loss = criterion(outputs,labels)\n        running_loss += loss\n        running_acc += (outputs.argmax(1)==labels).float().mean()\n        loss.backward()\n        optimizer.step()\n        \n    losses.append(running_loss\/len(train_loader))\n    accs.append(running_acc\/len(train_loader))\n    print('acc : {:.2f}%'.format(running_acc\/len(train_loader)))\n    print('loss : {:.4f}'.format(running_loss\/len(train_loader)))","84eb7c46":"import matplotlib.pyplot as plt\nfigs , ax = plt.subplots(1,2,figsize=(20,5))\nax[0].plot(losses)\nax[0].set_title('train_loss')\nax[1].plot(accs)\nax[1].set_title('train_acc')","3ad2fd0c":"!rm -r train_resized\n!rm -r test_resized","1f18141d":"### Resize Images to train faster (save the time ;)","025ba116":"### Model ResNet34 slightly modified."}}