{"cell_type":{"8fc2fe6d":"code","6f56bcd9":"code","129614cd":"code","4219d78d":"code","ac393741":"code","d67ecf27":"code","fbe1b693":"code","831c3572":"code","7724ee82":"code","00dff0fb":"code","bb887f4c":"code","c0d76d26":"code","3e76ad81":"code","ba50ae40":"code","6506212a":"code","20d16fef":"code","459a8062":"code","bd3a3344":"code","f810a8d6":"code","c83aa78b":"code","730f8e09":"code","90f809dc":"code","3d5a9a4e":"code","31bdf4ff":"code","64aa2df8":"code","e60a5262":"markdown","a987f67e":"markdown","a6e92d57":"markdown","b1b82df3":"markdown","917b4673":"markdown","0eb228be":"markdown","ddd9dd06":"markdown","7b966604":"markdown","b0eefa7a":"markdown","974b7f58":"markdown","2a32ec5d":"markdown","521252db":"markdown","875c53e9":"markdown","8878f4ec":"markdown","93048c74":"markdown","32a6bbb8":"markdown","bbcb7928":"markdown","bb1710c4":"markdown","ec6f60c5":"markdown","834ca005":"markdown","fddb2fe2":"markdown","c8a23184":"markdown","bb7cd948":"markdown","44049528":"markdown","959d5858":"markdown","ab5bdfc2":"markdown","55e8deba":"markdown"},"source":{"8fc2fe6d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6f56bcd9":"# librerias para datos y numeros\nimport numpy as np\nimport pandas as pd\n# librerias para graficar\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# el modelo\nfrom sklearn.linear_model import LogisticRegression\n# metricas para evaluar al modelo\nfrom sklearn import metrics\n# importamos el modulo para cross validation\nfrom sklearn.model_selection import cross_val_score\n# el separador de datos en entrenamiento y testeo\nfrom sklearn.model_selection import train_test_split\n\npath = '\/kaggle\/input\/cov19-open-data-mexico\/data.csv'","129614cd":"# primero traemos el dataset\ndataset = pd.read_csv(path, encoding='unicode_escape')\nprint('Shape:', dataset.shape)\ndataset.head()","4219d78d":"# vemos los datos que existen en la columna de CLASIFICACION_FINAL\ndataset.CLASIFICACION_FINAL.value_counts().plot(kind='bar')","ac393741":"dataset.isnull().any()","d67ecf27":"# definimos los valores que sean referentes a casos negativos\nnegative_values = (4,5,6,7,97)\n\n# eliminar las filas de casos negativos\nfor val in negative_values:\n  dataset = dataset.drop(dataset[dataset['CLASIFICACION_FINAL'] == val].index, axis=0)\n\n# vemos cuanto queda del dataset\ndataset.shape","fbe1b693":"dataset.head()","831c3572":"# definimos las columnas que nos interesan para el cuestionamiento de las enfermedades cronicas\nenfermedades = ['DIABETES','EPOC','ASMA','INMUSUPR','HIPERTENSION','CARDIOVASCULAR','OBESIDAD',\n                'RENAL_CRONICA','TABAQUISMO','INTUBADO','NEUMONIA','EDAD','FECHA_DEF']\n\n# seleccionamos las columnas de enfermedades\ndf = dataset[enfermedades]\ndf.head()","7724ee82":"# Graficamos cuantos valores diferentes hay en la columna de diabetes y cuantos hay de cada uno\ndf.DIABETES.value_counts().plot(kind='bar')","00dff0fb":"# ahora debemos retirar los valores de 98 o desconocido de todas nuestras columnas\n# para esto iteramos las columnas, ya que este valor se da en todas\nfor column in df.columns:\n    # eliminamos las filas que tengan un valor igual a 98\n    df = df.drop(df[df[column]==98].index, axis=0)\n    df = df.drop(df[df[column]==99].index, axis=0) ","bb887f4c":"# Ya retiardos esos valores comprobamos y vemos que ya no esta ese 98\ndf.DIABETES.value_counts().plot(kind='bar')","c0d76d26":"# ya que tenemos los datos sin 98, vamos a cambiar los 2,1 a 1,0 segun las deducciones de datos\n\n# antes limpiare las de INTUBADO ya que estas vienen algo diferentes\ndf['INTUBADO'] = df['INTUBADO'].replace({2: 1})\ndf['INTUBADO'] = df['INTUBADO'].replace({97: 0})\n\n# arreglamos las columnas de las enfermedades cronicas\n# iteramos las columnas\nfor column in df.columns:\n    # remplazamos los valores que queremos por los que queremos, de 2 a 0\n    df[column] = df[column].replace({2: 0})\n\ndf.head()","3e76ad81":"# ahora el target, que seria si hubo defuncion, es en esta parte, ya que eliminamos los datos 98\ntarget = []\n# iteramos la columna de fecha de defuncion\nfor value in df.FECHA_DEF.values:\n    if value == '9999-99-99': # no hubo defuncion\n        target.append(0)\n    else: # hubo defuncion\n        target.append(1)\n        \n# por ultimo los dejamos en un array de numpy\ntarget = np.array(target)\n# tal que tendremos un 1 si murio o un 0 si no\nprint(target[:30], target.shape)\n\n# Como previamente a df le agregamos 'FECHA_DEF' ahora se lo debemos de quitar        \ndf = df.drop(['FECHA_DEF'], axis=1)","ba50ae40":"# esta es la cantidad de muertos, puede que sea algo diferente a la oficial, esto se debe a que\n# previamente se eliminaron algunas columnas con datos inexactos.\nprint('Muertos:', list(target).count(1))","6506212a":"print('Muertos: ', list(target).count(1))\nprint('Casos target: ', list(target.shape)[0])\nprint('Casos Dataset: ', list(df.shape)[0])","20d16fef":"# Ya tenemos todo, ahora una visualizacion de esto\n# definimos las cuantas columnas y filas\nrows = 4\ncols = 3\n# creamos el plot\nfig, axs = plt.subplots(rows, cols)\n# definimos los tiulos de los plots, que seran las columnas, pero sin la edad\ntitles = list(df.columns[:-1])\n# y le agregamos a las columnas las defunciones\ntitles.append('DEFUNCIONES')\n# contador auxiliar para indice de titulos\ncount = 0\n\n# ietramos las filas\nfor i in np.arange(rows):\n    # iteramos las columnas\n    for j in np.arange(cols):\n        #\u00a0este if es por si los datos estan contenidos en df\n        if count < 8:\n            # definimos los valores para la grafica\n            vals = [df[titles[count]].value_counts()[0], df[titles[count]].value_counts()[1]]\n            axs[i, j].pie(vals, labels=['No','Si'])\n        # en este pasa que los datos estan en target\n        else:\n            vals = [list(target).count(0), list(target).count(1)]\n            axs[i, j].pie(vals, labels=['No','Si'])\n        # seteamos el titulo con count y lo aumentamos\n        axs[i, j].set_title(titles[count])\n        count +=1","459a8062":"# Separamos los datos en entrenamiento y testeo\nX_train, X_test, Y_train, Y_test = train_test_split(df, target, test_size=0.3, random_state=0)\n\n# para convencion definimos X, Y\nX = df\nY = target","bd3a3344":"# creamos el modelo\nmodel = LogisticRegression(max_iter=len(X_train))\n# entrenamos al modelo\nmodel.fit(X_train, Y_train)\n# y hacemos la prediccion con datos de testeo\nY_pred = model.predict(X_test)","f810a8d6":"# sacamos la matriz de confusion\ncnf_matrix = metrics.confusion_matrix(Y_test, Y_pred)","c83aa78b":"# creamos varios plots\nfig, ax = plt.subplots()\n# creamos etiquetas para las metricas de la grafica\nclass_names = [0,1]\ntick_marks = np.arange(len(class_names))\n# y se las ponemos\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# creamos los colores con ayuda de seaborn\nsns.heatmap(pd.DataFrame(cnf_matrix), annot = True, cmap=\"Reds_r\", fmt=\"g\")\n\n# poner la etiqueta para las x arriba\nax.xaxis.set_label_position(\"top\")\n# \nplt.tight_layout()\n# definimos el titulo de la grafica\nplt.title(\"Matriz de confusion\", y=1.1)\n# pnemos las etiquetas para x,y\nplt.ylabel(\"Etiqueta Actual\")\nplt.xlabel(\"Etiqueta de prediccion\")\n# y mostramos\nplt.show()","730f8e09":"print('Exactitud de', round(metrics.accuracy_score(Y_test, Y_pred)*100, 2),'%')","90f809dc":"# calculamos los scores dichos previamente\nscores = cross_val_score(LogisticRegression(max_iter=len(Y)), X, Y, cv=5)\n#\u00a0y vemos los resultados\nprint(scores)","3d5a9a4e":"print(f'Cross Validation score: {scores.mean()}')","31bdf4ff":"# ajuste de datos del paciente para predecir\npaciente = pd.DataFrame({\n    'DIABETES': [0],\n    'EPOC': [0],\n    'ASMA': [0],\n    'INMUSUPR': [0],\n    'HIPERTENSION': [0],\n    'CARDIOVASCULAR': [0],\n    'OBESIDAD': [0],\n    'RENAL_CRONICA': [0],\n    'TABAQUISMO': [0],\n    'INTUBADO': [1],\n    'NEUMONIA': [1],\n    'EDAD': [80]\n})\n# predicciones del modelo\nprint(f'Probabilidad de defunsion = {round(model.predict_proba(paciente)[0,1]*100, 2)}%')\nprint(f'Probabilidad de salvarse = {round(model.predict_proba(paciente)[0,0]*100, 2)}%')","64aa2df8":"# vamos a ver como es que progresa la probabilidad de deceso segun la edad y otros factores\n# listas para las predicciones de cada paciente\npreds_1 = []\npreds_2 = []\npreds_3 = []\npreds_4 = []\npreds_5 = []\n# iteramos los a\u00f1os de edad\nfor edad in np.linspace(1,100,100):\n    # Aqui podr\u00e1s ajustar los rasgos o factores de cada paciente como el ejemplo anterior\n    paciente_1 = pd.DataFrame({\n        'DIABETES': [0],\n        'EPOC': [0],\n        'ASMA': [0],\n        'INMUSUPR': [0],\n        'HIPERTENSION': [0],\n        'CARDIOVASCULAR': [0],\n        'OBESIDAD': [0],\n        'RENAL_CRONICA': [0],\n        'TABAQUISMO': [0],\n        'INTUBADO': [1],\n        'NEUMONIA': [1],\n        'EDAD': [edad]\n    })\n    paciente_2 = pd.DataFrame({\n        'DIABETES': [1],\n        'EPOC': [0],\n        'ASMA': [0],\n        'INMUSUPR': [0],\n        'HIPERTENSION': [0],\n        'CARDIOVASCULAR': [0],\n        'OBESIDAD': [0],\n        'RENAL_CRONICA': [0],\n        'TABAQUISMO': [0],\n        'INTUBADO': [1],\n        'NEUMONIA': [1],\n        'EDAD': [edad]\n    })\n    paciente_3 = pd.DataFrame({\n        'DIABETES': [0],\n        'EPOC': [1],\n        'ASMA': [0],\n        'INMUSUPR': [0],\n        'HIPERTENSION': [0],\n        'CARDIOVASCULAR': [0],\n        'OBESIDAD': [0],\n        'RENAL_CRONICA': [0],\n        'TABAQUISMO': [0],\n        'INTUBADO': [1],\n        'NEUMONIA': [1],\n        'EDAD': [edad]\n    })\n    paciente_4 = pd.DataFrame({\n        'DIABETES': [0],\n        'EPOC': [0],\n        'ASMA': [0],\n        'INMUSUPR': [0],\n        'HIPERTENSION': [0],\n        'CARDIOVASCULAR': [0],\n        'OBESIDAD': [1],\n        'RENAL_CRONICA': [0],\n        'TABAQUISMO': [0],\n        'INTUBADO': [1],\n        'NEUMONIA': [1],\n        'EDAD': [edad]\n    })\n    paciente_5 = pd.DataFrame({\n        'DIABETES': [0],\n        'EPOC': [0],\n        'ASMA': [0],\n        'INMUSUPR': [0],\n        'HIPERTENSION': [0],\n        'CARDIOVASCULAR': [0],\n        'OBESIDAD': [0],\n        'RENAL_CRONICA': [1],\n        'TABAQUISMO': [0],\n        'INTUBADO': [1],\n        'NEUMONIA': [1],\n        'EDAD': [edad]\n    })\n    # agregamos las predicciones de cada paciente\n    preds_1.append(model.predict_proba(paciente_1)[0,1])\n    preds_2.append(model.predict_proba(paciente_2)[0,1])\n    preds_3.append(model.predict_proba(paciente_3)[0,1])\n    preds_4.append(model.predict_proba(paciente_4)[0,1])\n    preds_5.append(model.predict_proba(paciente_5)[0,1])\n    \n# ploteamos las predicciones de distintos colores y les agregamos etiquetas\nplt.plot(np.linspace(1,100,100), preds_1, ls='-' , color='red', label='Healhy')\nplt.plot(np.linspace(1,100,100), preds_2, ls='dashed' , color='blue', label='Diabetes')\nplt.plot(np.linspace(1,100,100), preds_3, ls='dashed' , color='green', label='EPOC')\nplt.plot(np.linspace(1,100,100), preds_4, ls='dashdot', color='black', label='Obesity')\nplt.plot(np.linspace(1,100,100), preds_5, color='orange', label='Chronic Renal')\n# agregamos titulos y etiquetas al plot\nplt.title('The patient has been intubated and has Neumony', )\nplt.xlabel('Age', )\nplt.ylabel('Probability', )\nplt.xticks()\nplt.yticks()\nplt.legend()\nplt.show()","e60a5262":"## Convertir a valores booleanos\nLos datos previamente vienen en un formato algo extra\u00f1o, este es el caso de las enfermedades y el tabaquismo ya que `vienen entre 2 y 1, pero preferentemente se desean en 1-0 (1-si, 0-no)`. As\u00ed que habra que convertir solo los 2 a 0 en esos casos. `El caso que da m\u00e1s problemas es el de Intubado ya que el formato es diferente a los dem\u00e1s`. As\u00ed como los dem\u00e1s ese se arragla tambi\u00e9n en la celda siguiente.","a987f67e":"## El target\nEl target es el resultado. Lo que el modelo tratar\u00e1 de `aprender ser\u00e1 la relaci\u00f3n num\u00e9rica entre los fetures y el target`, es decir, la relaci\u00f3n num\u00e9rica entre las enfermedades, edad y otros datos del paciente y si este mur\u00edo o no.\nAs\u00ed que el target ser\u00e1 un array de 1 y 0 basado en si hubo fecha de defunci\u00f3n del paciente, `tal que sea un 1 si mur\u00edo y 0 si no`.\nEn la \u00falitma linea de la celda siguiente se elimina la FECHA_DEF del dataframe que ser\u00e1 usado para el modelo.","a6e92d57":"# Preparaci\u00f3n de datos\nEl dataset incluye muchas cosas, pero pasa que para este estudio solo se requieren unos cuantos de estos. `Este proceso lo que har\u00e1 es extraer esos datos relevantes` para entrenar al modelo. El dataset se encuentra en `.\/..\/datasets\/Mexico\/datos_abiertos.csv`, junto a este hay varios xlsx con una descripci\u00f3n del contenido del dataset y marcadas las columnas que contienen informacion relevante, asi como el target.","b1b82df3":"### \u00bfQu\u00e9 tanto influye el tabaquismo y la edad en una posible defunci\u00f3n?\nLa mortalidad de las personas que fuman deber\u00eda ser relativamente alta por sentido com\u00fan, m\u00e1s sin embargo parace que esto no es as\u00ed. Al parecer la gente que tiene el h\u00e1bito de fumar no se encuentra entre los rangos m\u00e1s altos de mortalidad.\n\nUn detalle a recalcar es que la gente con `asma y que fuma presenta una menor mortalidad a la que solo fuma`, esto se puede deber a que no hay tantos casos de gente con asma y que fume en el dataset, cosa por la que el modelo asume que tienen menos mortalidad, `en otras palabras, los detecta con menos mortalidad por ser sumamente raros esos casos`.","917b4673":"## Eliminaci\u00f3n de valores no especificados\nComo vemos en la grafica anterior la mayor\u00eda son 2 (que no tienen diabetes), hay pocos 1 (que si tienen diabets) y por \u00faltimo un 98 (no espec\u00edfifcado). Esa \u00faltima columna es la que hay que eliminar ya que genera problemas para el eprendizaje del modelo y se encuentra en todas las columnas de enfermedades. As\u00ed que `hay que eliminar las columnas con valores de 98`.","0eb228be":"### \u00bfQu\u00e9 enfermedades cr\u00f3nicas contribuyen m\u00e1s a la probabilidad de defunci\u00f3n?\nCon las predicciones del modelo de la amplia variedad de enfermedades y padecimientos que nos ofrece el dataset podemos graficar y ver m\u00faltuples curvas de mortalidad. En las siguientes gr\u00e1ficas vemos como en las enfermedades var\u00eda la mortalidad y tambi\u00e9n como esta crece bastante cuando el paciente fu\u00e9 intubado y diagnosticado con neumon\u00eda.\n\nEn respuesta al an\u00e1lisis y vista de las gr\u00e1ficas vemos en estas que las `mortalidades mas \u00e1ltas son: Enfermedad Renal Cr\u00f3nica, Diabetes, Inmunosupresi\u00f3n, Hipertenci\u00f3n, Obesidad y Enfermedades Cardiovasculares`. A\u00fan as\u00ed siendo un paciente sin alguna de estas enfermedades la probabilidad al ser intubado sigue siendo una considerablemente elavada. \n\nPor \u00faltimo podemos ver las probabilidades de `mortalidad del Asma y la EPOC no son tan elevadas como las dem\u00e1s`, cosa que parece algo raro, debido a que el COVID-19 ataca a los pulmones principalmente. Estos resultados se `pueden deber a que el dataset con el que el modelo fue entrenado no hab\u00edan tantos pacientes con estos padecimientos respiratorios` por lo que el modelo no pudo aprender del todo bien esos features o datos.\n","ddd9dd06":"## Etiquetas\n\nEh aqu\u00ed las etiquetas:\n- Sexo: 1-Mujer, 2-Hombre\n- Enfermedades: 1-Si se padece, 2-No se padece, 99-desconocido. `Al parecer en todas`.\n- Fecha de defuncion: 9999-99-99 - no ha muerto, `una fecha diferente` - si muri\u00f3.\n\nEn el caso de los resultados cambi\u00f3 el formato, el caso es que solo nos importan los resultados de 1,2,3. Y no los 4,5,6,7. Dichos datos vienen en la carpeta de *datos_abiertos_info*.\n\nLa celda de pruebas ser\u00e1 la de abajo. PD: Los valores de 98, indican un 'No Especificado' as\u00ed como los 99.","7b966604":"# Regresion Log\u00edstica a dataset pacientes de Covid-19 M\u00e9xico(Spanish)","b0eefa7a":"## Selecci\u00f3n de features\nLos `features son como las columnas o informacion relevante contenida en el dataset`. En este caso ser\u00edan las enfermedades cr\u00f3nicas de los pacientes, si fuman, y su edad. as\u00ed que en esta parte seleccionamos las partes o columnas que nos importan del dataset, como los son las enfermedades, si fue intubado, si present\u00f3 neumon\u00eda, etc.\nNota: tambi\u00e9n seleccionaremos el target ('FECHA_DEF') para que ","974b7f58":"## Matriz de confusi\u00f3n\nUna manera de graficar las predicciones y ver en cierto modo la asertividad de el modelo. Se lee de la siguiente manera: `Lo mas importante es la diagonal` ya que los numeros de esta representan los datos predichos correctamente, los que estan fuera de esta seran falsos negativos o falsos positivos, es decir, casos predichos erroneamente.","2a32ec5d":"## Presici\u00f3n del modelo\nImprimimos la precision del modelo, esta se calcula comparando las predicciones del modelo hechas a partir de las X de testeo (Y_pred) con las Y de testeo (Y_test), Siendo esta como una especie de examen al aprendizaje del modelo.","521252db":"## Detalles y algunas limitaciones.\nEs posible que con `algunas combinaciones de problemas de salud o factores la curva de probabilidades no sea la esperada`, esto se puede deber a que hay pocos pacientes que cumplan con esa combinacion de problemas de salud o enfermedades, ocasionando que la predicci\u00f3n del modelo sea algo dudosa. Este problema parece presentarse en aquellos features o indicadores en los cuales los valores positivos son escasos. Esto \u00faltimo podemos `consultarlo en la secci\u00f3n de 'Visualizaci\u00f3n final de datos'`. Cabe recalcar que esta afirmaci\u00f3n es `solo v\u00e1lida en algunos casos muy marcados` como por ejemplo el feature de Asma.","875c53e9":"## Cross Validation\nVamos a usar la Cross validation para `obtener un score mas robusto para el modelo`, es decir, evaluar la precision del modelo mediante un testeo mas riguroso.\n\nLo que hace la cross validation es `separar el set de datos en n partes, una de ellas ser\u00e1 usada para test y las demas para train`. Este proceso se realizar\u00e1 n veces. El score se calcular\u00e1 con el promedio de los scores de casa iteraci\u00f3n. Es computacionalmente costoso. Se dice que cuando n (n partes) es mayor a 5, los scores de los testeos no tendran variaciones significativas, asi que `por convenci\u00f3n usamos 5`.","8878f4ec":"Entonces ya nos quedamos unicamente con los registros de todos los casos positivos acumulados. El primer valor del shape indica la cantidad de registros que tenemos.","93048c74":"## Vemos que no tenemos valores nulos","32a6bbb8":"# Evaluaciones del modelo","bbcb7928":"## Conclusi\u00f3n\nActualmente el COVID-19 est\u00e1 azotando agresivamente a nuestro pa\u00eds ya que `en base a las cifras registradas a nivel nacional la tasa de contagios sigue aumentando y la de mortalidad est\u00e1 en aproximadamente 10%, en otras palabras, muere 1 de cada 10 pacientes` aproximadamente. De aqu\u00ed surge el quiestionamiento de que pacientes son los m\u00e1s propensos a fallecer.\n\nEn base a las respuestas a los cuestionamientos anteriores y a las diversas proyecciones hechas por el modelo podemos ver como es que las `personas con enfermedades cardiovasculares, obesidad, diabetes, renal cr\u00f3nica, e inmunosupresi\u00f3n son las que presentan mayores probabilidades de fallecer`. Por otro lado cuando el paciente ya ha sido `diagnosticado con neumon\u00eda y posteriormente intubado a un respirador artificial las probabilidades de defuncion crecen br\u00fascamente`. Esto se puede apreciar en las proyecciones mostradas en el primer y tercer cuestionamiento.\n\nEn conclusi\u00f3n son aquellas personas las que padecen de `enfermedades cardiovasculares, diabetes, y enfermedades renales` aquellas que son las que presentan una mayor probabilidad de deceso por COVID-19 y por ende `aquellas que deben y debemos de tratar de cuidar m\u00e1s` para tratar de disminuir el crecimiento de la curva de mortalidad por COVID-19 en M\u00e9xico.","bb1710c4":"# El modelo\nYa que tenemos los datos preparados, Procedemos a crear el modelo.\nPara este punto los datos son:\n- X: dataframe con columnas de enfermedades y edad -> `df`\n- Y: array de numpy con 1 o 0 indicando defunciones -> `target`","ec6f60c5":"### \u00bfQu\u00e9 tan probable es la defunci\u00f3n seg\u00fan la edad, enfermedades cardiovasculares y diabetes?\nEn base a las graficas creadas a partir de predicciones del modelo vemos que `la enfermedad con mayor riesgo de deceso es la diabetes seguda por la obesidad`. Sin embargo vemos que estas curvas crecen cuando el paciente presenta neumon\u00eda, pero esta curvatura crece agres\u00edvamente cuando los pacientes han sido intubados y diagnosticados con neumon\u00eda.\n\n\nEn conclusi\u00f3n a esta pregunta, las respuestas vienen gr\u00e1ficamente en los plots de arriba. `En conclusi\u00f3n vemos que las enfermedades que m\u00e1s influyen son la diabetes y la obesidad`. Estas de entre las seleccionadas por el cuestionamiento (Obesidad, diabetes y cardiovasculares).","834ca005":"# Cuestionamientos:","fddb2fe2":"## Proyecciones con el modelo\nEn la celda de abajo se podr\u00e1 modificar las facciones de los pacientes, y posteriormente graficarlas conforme el paso de la edad de el paciente, generando as\u00ed una `curva de probabilidades de mortalidad` elaborada mediante las predicciones del modelo a los diferentes pacientes definidos.","c8a23184":"## Visualizaci\u00f3n final de los datos\nEn esta celda veremos graficas de pastel que muestran que fraccion de los pacientes cuentan con alg\u00fan factor. Por ejemplo: la gr\u00e1fica de tabaquismo, muestra en azul la gente que no fuma y en naranja la gente que si fuma.","bb7cd948":"## Predicci\u00f3n individual\nAqu\u00ed veras una lista de todos los rubros tomados en cuenta por el modelo de ML, todos ellos tienen unos dos puntos y un valor entre corchetes, este indica con `un 1 si se tiene el problema y un 0 si no`, todos excepto la edad, esa es numerica. En la siguiente celda podr\u00e1s `variar estos valores y ver cual es la probabilidad de defunci\u00f3n`.","44049528":"Corroboramos que coincidan los tama\u00f1os del dataset (X) que se usar\u00e1 pera entrenar al modelo y el tama\u00f1o del target(Y) que tambien ser\u00e1 usado para eso.\n\nEn caso de no cincidir estos tama\u00f1os pasar\u00e1 que el programa dar\u00e1 error desde la parte de separaci\u00f3n de datos.","959d5858":"## Selecci\u00f3n de pacientes positivos\nDebemos de seleccionar los pacientes que dieron positivo en covid para a ellos aplicarles el estudio, as\u00ed que eliminar\u00e9 los registros cuyo resulatdo fue negativo o pendiente, es decir, `que en la variable \"CLASIFICACION_FINAL\" tengan un 1 y de no ser as\u00ed el registro ser\u00e1 eliminado`. Se seleccion\u00f3 esa variable puesto que en el PDF de la informaci\u00f3n del dataset aclara que esa ser\u00e1 la variable en la cual se basar\u00e1 el conteo de casos COVID-19, pero `unicamente las que tienen un valor 1`.","ab5bdfc2":"#\u00a0Predicciones\nEsta es la parte que se usa para jugar con los valores y obtener respuestas a preguntas mediante predicciones hechas con estos valores.","55e8deba":"# Separacion de datos en Train y Test\nYa que tenemos el df que vendr\u00eda siendo X y el target que ser\u00eda Y, Vamos a separarlos en datos de entrenamiento para el modelo y en datos de testeo, los de testeo se encontraran en menor cantidad."}}