{"cell_type":{"1ba4c635":"code","43d9b857":"code","23c70bdb":"code","1c8c4781":"code","39893439":"code","188fa9fa":"code","5c571ad7":"code","7ee1c981":"code","637491bf":"code","08631d9b":"code","df755c3a":"code","779fae9c":"code","402d6697":"code","beeb28c7":"code","af8d861f":"code","33f15bbc":"code","f34c8059":"code","6d52d8ba":"code","2c914ccb":"code","d33c3aa1":"code","90daea39":"code","df13b4b2":"code","b0e4ff82":"code","96bac641":"code","c5e05cb5":"code","29a46abe":"code","172fdf0b":"code","0e8ec188":"code","64cab1e2":"code","26916ce1":"code","d7644ba3":"code","3210e473":"code","f7556ce0":"code","bcbea4eb":"code","d48d7254":"code","43460795":"code","09b52d06":"code","1cdc3679":"code","ab0019a3":"code","e96561ca":"code","12e7ccf6":"code","bd3000e1":"code","0e699fca":"code","0294a014":"code","f8811960":"code","10312817":"code","ec38eff3":"code","bbf8aca4":"code","0926156b":"code","3272c353":"code","82dc3fce":"code","f96cc79b":"code","15b59f86":"code","35d678d5":"code","6027eb65":"code","4d1fb12e":"code","12727467":"code","2b2b5556":"code","adc76bf5":"code","f29facf1":"code","ed876ae6":"code","5bd24967":"code","ce1ee6b9":"code","507024e9":"code","edcf8bdd":"code","601e7ea5":"code","9d842a0e":"code","a7b69baf":"code","815a8f98":"code","d7bc54b8":"code","6c212cf4":"code","a0c53a6a":"code","3c10e3b8":"code","b3d2bac7":"code","4d779a55":"code","277f5763":"code","78dd5a76":"code","427e7f2c":"code","4a06a078":"code","50bf60ad":"code","2aecdcef":"code","b6a1dbad":"markdown","dd073a07":"markdown","24c0748d":"markdown","69ac5997":"markdown","5d8b4d4b":"markdown","4e93eaae":"markdown","d112cf07":"markdown","ae7b23f6":"markdown","a03dd16f":"markdown","3ed6eec1":"markdown"},"source":{"1ba4c635":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfiles = []\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        files.append(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","43d9b857":"data_file = files[1]\n","23c70bdb":"hpd = pd.read_csv(data_file)","1c8c4781":"hpd.head()","39893439":"print(len(hpd[hpd['output'] == 1]),len(hpd[hpd['output'] == 0]))","188fa9fa":"# chances of children\nchildergroup = hpd[(hpd['age'] > 0) & (hpd['age'] < 18)]","5c571ad7":"childergroup.head()","7ee1c981":"#chances of teen\nteengroup = hpd[(hpd['age'] > 17) & (hpd['age'] < 25)]","637491bf":"teengroup.head()","08631d9b":"#chances of adults\nadultroup = hpd[(hpd['age'] > 24) & (hpd['age'] < 46)]","df755c3a":"adultroup.head()","779fae9c":"# record percentage\nprint(format(adultroup.size\/hpd.size,'.2%'))","402d6697":"# 0 - female 1 - male\nmaleadults = adultroup[adultroup['sex'] == 1]\nfemaleadults = adultroup[adultroup['sex'] == 0]\n\nprint('Adult Male %: ',format(len(maleadults)\/len(hpd),'.2%'))\nprint('Adult Female %: ',format(len(femaleadults)\/len(hpd),'.2%'))\n\nhattkmaleadult = maleadults[maleadults['output'] == 1]\nhattkfemaleadult = femaleadults[femaleadults['output'] == 1]\n\nprint('Adult Heart Attack Male %: ',format(len(hattkmaleadult)\/len(hpd),'.2%'))\nprint('Adult Heart Attack Female %: ',format(len(hattkfemaleadult)\/len(hpd),'.2%'))","beeb28c7":"maleadults.head()","af8d861f":"femaleadults.head()","33f15bbc":"#chances of aged\nagedgroup = hpd[(hpd['age'] > 45)]","f34c8059":"agedgroup.head()","6d52d8ba":"# record percentage\nprint(format(agedgroup.size\/hpd.size,'.2%'))\n\nmaleaged  = agedgroup[agedgroup['sex'] == 1]\nfemaleaged = agedgroup[agedgroup['sex'] == 0]\nprint('Adult Male %: ',format(maleaged.size\/hpd.size,'.2%'))\nprint('Adult Female %: ',format(femaleaged.size\/hpd.size,'.2%'))\n\nhattkmaleaged = maleaged[maleaged['output'] == 1]\nhattkfemaleaged = femaleaged[femaleaged['output'] == 1]\n\nprint('Aged Heart Attack Male %: ',format(hattkmaleaged.size\/hpd.size,'.2%'))\nprint('Aged Heart Attack Female %: ',format(hattkfemaleaged.size\/hpd.size,'.2%'))","2c914ccb":"# Age Max - Max\n\nprint('Max Age : ', hpd['age'].max(), '\\nMin Age', hpd['age'].min())","d33c3aa1":"hpd.info()","90daea39":"cpta = hpd[hpd['cp'] == 0]\ncpata = hpd[hpd['cp'] == 1]\ncpnap = hpd[hpd['cp'] == 2]\ncpasy = hpd[hpd['cp'] == 3]\n\nprint(len(cpta),len(cpata),len(cpnap),len(cpasy) )","df13b4b2":"cpta.head()","b0e4ff82":"cpata.head()","96bac641":"cpnap.head()","c5e05cb5":"cpasy.head()","29a46abe":"hatkcpta = cpta[cpta['output']==1]","172fdf0b":"len(hatkcpta)","0e8ec188":"malecpta = hatkcpta[hatkcpta['sex'] == 1]\nfemalecpta = hatkcpta[hatkcpta['sex'] == 0]\n\nprint(hatkcpta)","64cab1e2":"print(len(malecpta),len(femalecpta))","26916ce1":"countNoDisease = len(hpd[hpd.output == 0])\ncountHaveDisease = len(hpd[hpd.output == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(hpd.output))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(hpd.output))*100)))","d7644ba3":"print(hpd['trtbps'].max(), hpd['trtbps'].min())","3210e473":"print(hpd[hpd['sex'] == 1]['trtbps'].max(), hpd[hpd['sex'] == 0]['trtbps'].max())\nprint(hpd[hpd['sex'] == 1]['trtbps'].min(), hpd[hpd['sex'] == 0]['trtbps'].min())","f7556ce0":"t90120 = hpd[(hpd['trtbps'] >= 90) & (hpd['trtbps'] <= 120)]\nt120150 = hpd[(hpd['trtbps'] > 120) & (hpd['trtbps'] <= 150)]\nt150175 = hpd[(hpd['trtbps'] > 150) & (hpd['trtbps'] <= 175)]\nt175200 = hpd[(hpd['trtbps'] > 175) & (hpd['trtbps'] <= 200)]","bcbea4eb":"t90120[(t90120['sex'] == 1) & (t90120['output'] == 1)].info()","d48d7254":"t90120[(t90120['sex'] == 0) & (t90120['output'] == 1)].info()","43460795":"t90120[(t90120['sex'] == 1) & (t90120['cp'] == 0) & (t90120['output'] == 1)].info()","09b52d06":"t90120[(t90120['sex'] == 0) & (t90120['cp'] == 0) & (t90120['output'] == 1)].info()","1cdc3679":"print(hpd['chol'].max(),hpd['chol'].min())","ab0019a3":"chol56 = hpd[(hpd['chol'] >= 500) & (hpd['chol'] <= 600)]\nchol45 = hpd[(hpd['chol'] >= 400) & (hpd['chol'] < 500)]\nchol34 = hpd[(hpd['chol'] >= 300) & (hpd['chol'] < 400)]\nchol23 = hpd[(hpd['chol'] >= 200) & (hpd['chol'] < 300)]\nchol12 = hpd[(hpd['chol'] >= 100) & (hpd['chol'] < 200)]\n\nprint(len(chol56), len(chol45), len(chol34), len(chol23), len(chol12))","e96561ca":"print(len(chol56[chol56['output'] == 1]), len(chol45[chol45['output'] == 1]), len(chol34[chol34['output'] == 1]), len(chol23[chol23['output'] == 1]), len(chol12[chol12['output'] == 1]))","12e7ccf6":"chol23m = len(chol23[(chol23['sex'] == 1) & (chol23['output'] == 1)])\nchol23f = len(chol23[(chol23['sex'] == 0) & (chol23['output'] == 1)])\n\nprint(chol23m,chol23f)","bd3000e1":"#chol2367=len(chol23[(chol23['age'] >= 60) & (chol23['age'] <= 70)])","0e699fca":"chol2367=(chol23[(chol23['age'] > 50) & (chol23['age'] <= 70)])\nprint(len(chol2367))\nprint(chol2367.head())\n","0294a014":"print(hpd['trtbps'].min(),hpd['trtbps'].max(),hpd['trtbps'].std(),hpd['trtbps'].mean())","f8811960":"minv = hpd['trtbps'].min()\nmaxv = hpd['trtbps'].max()\nstd = hpd['trtbps'].std()\navg = hpd['trtbps'].mean()\nprint(minv,maxv,std,avg)\noldpeak = []\n\nwhile True:\n    if(minv <= maxv):\n        range1 = minv\n        minv += std\n        range2 = minv\n        oldpeak.append(tuple((range1,range2)))\n    else:\n        break\n\nfor range1,range2 in oldpeak:\n    print(\"trtbps range : \", range1, \"-\",range2)\n    print(len(hpd[(hpd['trtbps'] >= range1) & (hpd['trtbps'] < range2)]),len(hpd[(hpd['trtbps'] >= range1) & (hpd['trtbps'] < range2) &(hpd['output'] == 1)]))","10312817":"hpd.drop(hpd[(hpd['trtbps'] >= 181.69071406758553 ) & (hpd['trtbps'] <= 216.76699969461976)].index,inplace = True)","ec38eff3":"len(hpd)","bbf8aca4":"import matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n%matplotlib inline","0926156b":"age = hpd['age']\noutput = hpd['output']\n\n# age = hpd[(65 >= hpd['age']) & (hpd['age']>= 40)]['age']\n\nage = ['30-40','40-50','50-60','60-70','70-100']\n\n\n\noutput = []\n\nfor item in age:\n    ranges = list(map(int,item.split('-')))\n    output.append( len(hpd[(ranges[1] >= hpd['age']) & (hpd['age']>= ranges[0]) & (hpd['output'] == 1)]) )\n\nplt.figure(figsize= (10, 10))\nplt.bar(age,output,0.35)\nplt.show()","3272c353":"fig, axs = plt.subplots(1, 1, figsize=(10, 10), sharey=True)\nplt.style.use('classic')\nplt.xlabel(\"Age Group\")\nplt.ylabel(\"Heart Attacks\")\nplt.title(\"Age Group Vs Heart Attacks\")\naxs.pie(output, labels = age,autopct='%1.2f%%')\nplt.show()","82dc3fce":"sexg = ['male','female']\noutput= [len(hpd[(1 == hpd['sex']) & (hpd['output'] == 1)]), len(hpd[(0 == hpd['sex']) & (hpd['output'] == 1)])]\n\nfig, axs = plt.subplots(1, 1, figsize=(10, 10), sharey=True)\nplt.style.use('default')\nplt.xlabel(\"Age Group\")\nplt.ylabel(\"Heart Attacks\")\nplt.title(\"Age Group Vs Heart Attacks\")\naxs.pie(output, labels = sexg,autopct='%1.2f%%')\nplt.show()","f96cc79b":"age = ['30-40','40-50','50-60','60-70','70-100']\n\n\nwidth = 0.35\noutputm = []\noutputf = []\n\nfor item in age:\n    ranges = list(map(int,item.split('-')))\n    outputm.append( len(hpd[(ranges[1] >= hpd['age']) & (hpd['age']>= ranges[0]) & (hpd['output'] == 1) & (hpd['sex'] == 1)]) )\n    outputf.append( len(hpd[(ranges[1] >= hpd['age']) & (hpd['age']>= ranges[0]) & (hpd['output'] == 1) & (hpd['sex'] == 0)]) )\n\n\nx = np.arange(len(age))\nfig, ax = plt.subplots(figsize= (10, 10))\nrects1 = ax.bar(x - width\/2, outputm, width, label='Men')\nrects2 = ax.bar(x + width\/2, outputf, width, label='Women')\n\nprint(type(rects1))\nax.set_xticks(x)\nax.set_xticklabels(age)\n\noutputm = np.array(outputm)\noutputf = np.array(outputf)\n\noutputm = (outputm \/ len(hpd[hpd['output'] == 1])) * 100\noutputf = (outputf \/ len(hpd[hpd['output'] == 1])) * 100\n\n\nax.bar_label(rects1,outputm, padding=3)\nax.bar_label(rects2,outputf,padding=3)\nax.legend()\nplt.show()","15b59f86":"fig, ax = plt.subplots(figsize= (16, 16))\n\nsize = 0.27\n\nvals = []\n\nfor item in age:\n    ranges = list(map(int,item.split('-')))\n    vals.append( [len(hpd[(ranges[1] >= hpd['age']) & (hpd['age']>= ranges[0]) & (hpd['output'] == 1) & (hpd['sex'] == 1)]), len(hpd[(ranges[1] >= hpd['age']) & (hpd['age']>= ranges[0]) & (hpd['output'] == 1) & (hpd['sex'] == 0)])])\n\nvals = np.array(vals)\n\n\n\n\ncmap = plt.get_cmap(\"tab20c\")\nouter_colors = cmap(np.arange(10)*4)\ninner_colors = cmap([1, 2, 5, 7, 9, 10,13, 14,17, 19])\n\nax.pie(vals.sum(axis=1), radius=1, colors=outer_colors,labels=age,\n       wedgeprops=dict(width=size, edgecolor='black'))\n\nax.pie(vals.flatten(), radius=1-size*1.9, colors=inner_colors,labels=['male','female']*5,autopct='%1.2f%%',\n       wedgeprops=dict(width=size*1.3, edgecolor='black'))\n\nax.set(aspect=\"equal\", title='Pie plot with `ax.pie`')\nax.legend()\nplt.show()","35d678d5":"age = ['30-40','40-50','50-60','60-70','70-100']\n\n\nwidth = 0.35\noutputm = []\noutputf = []\n\nfor item in age:\n    ranges = list(map(int,item.split('-')))\n    outputm.append( len(hpd[(ranges[1] >= hpd['age']) & (hpd['age']>= ranges[0]) & (hpd['output'] == 1) & (hpd['cp'] == 0 )& (hpd['sex'] == 1)]) )\n    outputf.append( len(hpd[(ranges[1] >= hpd['age']) & (hpd['age']>= ranges[0]) & (hpd['output'] == 1) & (hpd['cp'] == 0 ) & (hpd['sex'] == 0)]) )\n\n","6027eb65":"print(outputf, outputm)","4d1fb12e":"fig, axs = plt.subplots(1, 1, figsize=(10, 10), sharey=True)\nplt.xlabel(\"Age Group\")\nplt.ylabel(\"Heart Attacks\")\nplt.title(\"Age,Sex,CP Vs Heart Attacks\")\naxs.pie(outputm, labels = age,autopct='%1.2f%%')\naxs.legend()\nplt.show()","12727467":"fig, axs = plt.subplots(1, 1, figsize=(10, 10), sharey=True)\nplt.xlabel(\"Age Group\")\nplt.ylabel(\"Heart Attacks\")\nplt.title(\"Age,Sex,CP Vs Heart Attacks\")\naxs.pie(outputf, labels = age,autopct='%1.2f%%')\naxs.legend()\nplt.show()","2b2b5556":"x = hpd[(hpd['trtbps']>=120) & (hpd['trtbps']<=150)].groupby('trtbps').agg(np.size)\nx.drop(x.columns[1:],axis =1,inplace = True)\n\n\ny = []\n\nfor item in x.index:\n    y.append(len(hpd[(hpd['trtbps'] == item) & (hpd['output'] == 1)]))\n\n\nfig, axs = plt.subplots(1, 1, figsize=(10, 10), sharey=True)\nplt.xlabel(\"bps\")\nplt.ylabel(\"Heart Attacks\")\nplt.title(\"bps Vs Heart Attacks\")\naxs.pie(y, labels = x.index,autopct='%1.2f%%')\naxs.legend()\nplt.show()","adc76bf5":"x = np.array(hpd['chol'].unique())\n\n\nx = x[(x >= 150) & (x<=300)]\nx.sort()\n\ny = []\n\nfor item in x:\n#     print(item)\n#     break\n    y.append(len(hpd[(hpd['chol'] == item) & (hpd['output'] == 1)]))\nprint(y)\n\nfig, axs = plt.subplots(1, 1, figsize=(10, 10), sharey=True)\nplt.xlabel(\"bps\")\nplt.ylabel(\"Heart Attacks\")\nplt.title(\"bps Vs Heart Attacks\")\naxs.pie(y, labels = x,autopct='%1.2f%%')\naxs.legend()\nplt.show()","f29facf1":"malep = chol2367 [ (chol2367['output'] == 1) & (chol2367['sex'] == 1) ] \nfemalep = chol2367 [ (chol2367['output'] == 1) & (chol2367['sex'] == 0) ] \n\nmalen = chol2367 [ (chol2367['output'] == 0) & (chol2367['sex'] == 1) ] \nfemalen = chol2367 [ (chol2367['output'] == 0) & (chol2367['sex'] == 0) ] \n\nxl = ['male','female']\n\nx = np.arange(len(xl))\nfig, ax = plt.subplots(figsize= (10, 10))\nrects1 = ax.bar(x - width\/2, [len(malep),len(malen)], width, label='Positive')\nrects2 = ax.bar(x + width\/2, [len(femalep),len(femalen)], width, label='Negative')\n\nprint(type(rects1))\nax.set_xticks(x)\nax.set_xticklabels(xl)\n\noutputm = np.array([len(malep),len(malen)])\noutputf = np.array([len(femalep),len(femalen)])\n\noutputm = (outputm \/ len(hpd[hpd['output'] == 1])) * 100\noutputf = (outputf \/ len(hpd[hpd['output'] == 1])) * 100\n\n\nax.bar_label(rects1,outputm, padding=3)\nax.bar_label(rects2,outputf,padding=3)\nax.legend()\nplt.show()","ed876ae6":"# oldpeak slp\tcaa\tthall\n\nhpd['oldpeak'].hist()","5bd24967":"hpd['slp'].hist()","ce1ee6b9":"hpd['caa'].hist()","507024e9":"hpd['thall'].hist()","edcf8bdd":"oldpeakyes = len(hpd[hpd['output'] == 1]['oldpeak'])\noldpeakno = len(hpd[hpd['output'] == 0]['oldpeak'])\n\nlable = ['HT Yes', 'HT No']\n\ny = [oldpeakyes,oldpeakno]\n\nplt.bar(lable, y, 0.35, label='oldpeak HT vs Counts')\nplt.legend()\nplt.show()","601e7ea5":"lable = ['HT Yes[M\/F]', 'HT No[M\/F]']\ny = [oldpeakyes,oldpeakno]\nmalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 1) & (hpd['oldpeak'] < 3) ]\nmalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 1) & (hpd['oldpeak'] < 3)] \n\nfemalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 1) & (hpd['oldpeak'] < 3)]\nfemalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 0) & (hpd['oldpeak'] < 3)] \n\nxl = ['male','female']\n\nx = np.arange(len(xl))\nfig, ax = plt.subplots(figsize= (10, 10))\nrects1 = ax.bar(x - width\/2, [len(malep),len(malen)], width, label='Positive')\nrects2 = ax.bar(x + width\/2, [len(femalep),len(femalen)], width, label='Negative')\n\nprint(type(rects1))\nax.set_xticks(x)\nax.set_xticklabels(xl)\n\noutputm = np.array([len(malep),len(malen)])\noutputf = np.array([len(femalep),len(femalen)])\n\noutputm = (outputm \/ len(hpd[hpd['output'] == 1])) * 100\noutputf = (outputf \/ len(hpd[hpd['output'] == 1])) * 100\n\n\nax.bar_label(rects1,outputm, padding=3)\nax.bar_label(rects2,outputf,padding=3)\nax.legend()\nplt.show()","9d842a0e":"lable = ['HT Yes[M\/F]', 'HT No[M\/F]']\ny = [oldpeakyes,oldpeakno]\nmalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 1) & (hpd['oldpeak'] >= 0) & (hpd['oldpeak'] <= 1) ]\nmalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 1) & (hpd['oldpeak'] >= 0) & (hpd['oldpeak'] <= 1) ] \n\nfemalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 0) & (hpd['oldpeak'] >= 0) & (hpd['oldpeak'] <= 1)]\nfemalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 0) & (hpd['oldpeak'] >= 0) & (hpd['oldpeak'] <= 1)] \n\nxl = ['male','female']\n\nx = np.arange(len(xl))\nfig, ax = plt.subplots(figsize= (10, 10))\nrects1 = ax.bar(x - width\/2, [len(malep),len(malen)], width, label='Positive')\nrects2 = ax.bar(x + width\/2, [len(femalep),len(femalen)], width, label='Negative')\n\nprint(type(rects1))\nax.set_xticks(x)\nax.set_xticklabels(xl)\n\noutputm = np.array([len(malep),len(malen)])\noutputf = np.array([len(femalep),len(femalen)])\n\noutputm = (outputm \/ len(hpd[hpd['output'] == 1])) * 100\noutputf = (outputf \/ len(hpd[hpd['output'] == 1])) * 100\n\n\nax.bar_label(rects1,outputm, padding=3)\nax.bar_label(rects2,outputf,padding=3)\nax.legend()\nplt.show()","a7b69baf":"lable = ['HT Yes[M\/F]', 'HT No[M\/F]']\nmalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 1) & (hpd['slp'] > 0)]\nmalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 1)& (hpd['slp'] > 0) ] \n\nfemalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 0) & (hpd['slp'] > 0)]\nfemalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 0) & (hpd['slp'] > 0)] \n\nxl = ['male','female']\n\nx = np.arange(len(xl))\nfig, ax = plt.subplots(figsize= (10, 10))\nrects1 = ax.bar(x - width\/2, [len(malep),len(malen)], width, label='Positive')\nrects2 = ax.bar(x + width\/2, [len(femalep),len(femalen)], width, label='Negative')\n\nprint(type(rects1))\nax.set_xticks(x)\nax.set_xticklabels(xl)\n\noutputm = np.array([len(malep),len(malen)])\noutputf = np.array([len(femalep),len(femalen)])\n\noutputm = (outputm \/ len(hpd[hpd['output'] == 1])) * 100\noutputf = (outputf \/ len(hpd[hpd['output'] == 1])) * 100\n\n\nax.bar_label(rects1,outputm, padding=3)\nax.bar_label(rects2,outputf,padding=3)\nax.legend()\nplt.show()","815a8f98":"lable = ['HT Yes[M\/F]', 'HT No[M\/F]']\nmalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 1) & (hpd['caa'] < 3)]\nmalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 1)& (hpd['caa'] < 3) ] \n\nfemalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 0) & (hpd['caa'] < 3)]\nfemalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 0) & (hpd['caa'] < 3)] \n\nxl = ['male','female']\n\nx = np.arange(len(xl))\nfig, ax = plt.subplots(figsize= (10, 10))\nrects1 = ax.bar(x - width\/2, [len(malep),len(malen)], width, label='Positive')\nrects2 = ax.bar(x + width\/2, [len(femalep),len(femalen)], width, label='Negative')\n\nprint(type(rects1))\nax.set_xticks(x)\nax.set_xticklabels(xl)\n\noutputm = np.array([len(malep),len(malen)])\noutputf = np.array([len(femalep),len(femalen)])\n\noutputm = (outputm \/ len(hpd[hpd['output'] == 1])) * 100\noutputf = (outputf \/ len(hpd[hpd['output'] == 1])) * 100\n\n\nax.bar_label(rects1,outputm, padding=3)\nax.bar_label(rects2,outputf,padding=3)\nax.legend()\nplt.show()","d7bc54b8":"lable = ['HT Yes[M\/F]', 'HT No[M\/F]']\nmalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 1) & (hpd['thall'] > 0)]\nmalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 1)& (hpd['thall'] > 0) ] \n\nfemalep = hpd [ (hpd['output'] == 1) & (hpd['sex'] == 0) & (hpd['thall'] > 0)]\nfemalen = hpd [ (hpd['output'] == 0) & (hpd['sex'] == 0) & (hpd['thall'] > 0)] \n\nxl = ['male','female']\n\nx = np.arange(len(xl))\nfig, ax = plt.subplots(figsize= (10, 10))\nrects1 = ax.bar(x - width\/2, [len(malep),len(malen)], width, label='Positive')\nrects2 = ax.bar(x + width\/2, [len(femalep),len(femalen)], width, label='Negative')\n\nprint(type(rects1))\nax.set_xticks(x)\nax.set_xticklabels(xl)\n\noutputm = np.array([len(malep),len(malen)])\noutputf = np.array([len(femalep),len(femalen)])\n\noutputm = (outputm \/ len(hpd[hpd['output'] == 1])) * 100\noutputf = (outputf \/ len(hpd[hpd['output'] == 1])) * 100\n\n\nax.bar_label(rects1,outputm, padding=3)\nax.bar_label(rects2,outputf,padding=3)\nax.legend()\nplt.show()","6c212cf4":"# len(hpd)\n\n# ml -> dataset -> split [TrainData, TestData]\n\n# Train -> It contains the output col -> labled dataset -> for learning\n# Test -> It does not contain output col -> for finding the lables by ML\n\"\"\"\n\n100\n\n-> iteration => 1000\n-> randomise order\n-> epochs -> machine\n\n\"\"\"\n# model -> ML Model\n# Train -> 70-80% Test -> 20-30%\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nX, y = hpd[['age','sex','cp','chol','thalachh','exng','oldpeak','slp','caa','thall']], hpd['output']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","a0c53a6a":"print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","3c10e3b8":"gnb = GaussianNB()\ny_pred = gnb.fit(X_train, y_train).predict(X_test)","b3d2bac7":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","4d779a55":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","277f5763":"# saving the model\nimport pickle\ns = pickle.dumps(gnb)\nclf2 = pickle.loads(s)\n\n\ndata = hpd.iloc[0]\nprint(data)\ndata.drop('output',inplace=True)\ndata.drop('fbs',inplace=True)\ndata.drop('restecg',inplace=True)\ndata.drop('trtbps',inplace=True)\n# data['age'] = 56\n# data['sex'] = 0\n# 'age','sex','cp','chol','thalachh','exng','oldpeak','slp','caa','thall'\n\nd = pd.DataFrame(data)\nd= d.transpose()\nd\n# d.shape\ny = gnb.predict(d)\nprint(y)","78dd5a76":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom collections import Counter\n\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split,GridSearchCV, cross_val_score, StratifiedKFold,learning_curve\n\n# df.drop(columns=['fbs','chol','cp','slp','thall','caa'], inplace= True)\n\nX = hpd.drop(columns = ['output'])\ny = hpd['output']","427e7f2c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","4a06a078":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","50bf60ad":"kfold = StratifiedKFold(n_splits=10)\n\nrandom_state = 2\nclassifiers = []\n\nclassifiers.append(SVC(random_state=random_state))\n\nclassifiers.append(DecisionTreeClassifier(random_state=random_state))\n\nclassifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state=random_state),\n                                      random_state=random_state,learning_rate=0.1))\n\nclassifiers.append(RandomForestClassifier(random_state=random_state))\n\nclassifiers.append(ExtraTreesClassifier(random_state=random_state))\n\nclassifiers.append(GradientBoostingClassifier(random_state=random_state))\n\nclassifiers.append(MLPClassifier(random_state=random_state))\n\nclassifiers.append(KNeighborsClassifier())\n\nclassifiers.append(LogisticRegression(random_state=random_state))\n\nclassifiers.append(LinearDiscriminantAnalysis())","2aecdcef":"cv_results = []\n\nfor classifier in classifiers:\n    cv_results.append(cross_val_score(classifier,X_train,y=y_train,scoring='accuracy',cv=kfold,n_jobs=4))\n    \ncv_means = []\ncv_std = []\n\n\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n\ncv_results = pd.DataFrame({'CrossValMeans':cv_means,'CrossValErrors':cv_std,\n                           'Algorithms':['SVC','DecisionTree','AdaBoost','RandomForest','ExtraTrees',\n                                         'GradientBoosting','MLP','KNN','Logistic','LDA']})\n\ng = sns.barplot('CrossValMeans','Algorithms',data=cv_results)","b6a1dbad":"# age cp sex","dd073a07":"# trtbps : resting blood pressure (in mm Hg)\n","24c0748d":"# chol : cholestoral in mg\/dl fetched via BMI sensor\n\n","69ac5997":"* 600 - 500\n* 500 - 400\n* 400 - 300\n* 300 - 200\n* 200 - 100","5d8b4d4b":"# Chest Pain\n\n* Value 1: typical angina\n* Value 2: atypical angina\n* Value 3: non-anginal pain\n* Value 4: asymptomatic","4e93eaae":"# Applying Model","d112cf07":"# Feature Engineering","ae7b23f6":"# Age Filtering\n\n* 0-17 Children\n* 18-24 Teen\n* 24-45 Adult\n* 45+ Aged","a03dd16f":"* 90 - 120\n* 120 - 150\n* 150 - 175\n* 175 - 200","3ed6eec1":"# Choles"}}