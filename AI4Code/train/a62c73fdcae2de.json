{"cell_type":{"336232d9":"code","a1348ad1":"code","6fa48ff0":"code","2dabbfa4":"code","7b99cc75":"code","21658d52":"code","cfa2e565":"code","f723d9e9":"code","a5ff6bc9":"code","349bffa0":"code","c0d897ee":"code","df3e92ac":"code","1e495723":"code","272d10e4":"code","1cbb5b25":"code","6a5d48ef":"code","db27bfe9":"code","85cc4e74":"code","b818e55f":"code","6ce3240b":"code","0406298e":"code","449649ee":"code","b6780574":"code","43a67c3c":"code","f939732d":"code","687baf3c":"code","aac577e4":"code","ac77176d":"code","02ba058d":"code","60c3f674":"code","4bf567e5":"code","9973360b":"code","9566c92a":"code","070c24c5":"code","13c11d68":"code","47ca3c2e":"code","3f0044ae":"code","b66766e1":"code","e7c99127":"code","dd2e3d08":"code","23edd61d":"code","6001d4af":"code","31dbf590":"code","ccec24fb":"code","4e90a7c1":"code","6f8266ce":"code","98d3183a":"code","f95d1a54":"code","a4bfc5ee":"code","cb8ee11f":"code","ea650f4a":"code","11e0b773":"code","b743a3d5":"code","f70f00bd":"code","93c9c5c5":"code","34ef7f0c":"code","26e779a9":"code","9540bc1f":"code","ac9f9731":"code","be313ad5":"code","73868aa7":"code","839ff419":"code","df121491":"code","ab9e963b":"code","9ba19c92":"code","04b0f16a":"code","5ba89c54":"code","c122d076":"code","49ce0c6a":"code","c8404de5":"code","9d6f4419":"code","b07e19b0":"code","8b7fe2ec":"code","6de4ee42":"code","8e664c63":"code","391b233a":"code","804533a9":"code","47e2844a":"code","8174054b":"code","4c06d3ee":"markdown","cc164ebe":"markdown","a86c16c0":"markdown","95334bab":"markdown","43b48bdb":"markdown","064c2624":"markdown","462be7dd":"markdown","e8309e54":"markdown","fa57085e":"markdown","8265395c":"markdown","8338647f":"markdown","b4258bff":"markdown","964deea5":"markdown","f00a21d0":"markdown","d281214c":"markdown","75844399":"markdown","c9518084":"markdown","2cd6667a":"markdown","a2a8163a":"markdown"},"source":{"336232d9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import normaltest,f_oneway\nfrom scipy.stats import ttest_ind\nfrom sklearn.metrics import mean_squared_error\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a1348ad1":"data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndata.head(2)","6fa48ff0":"data.describe()","2dabbfa4":"data.info()","7b99cc75":"data = data.dropna(subset=['name'])\ndata = data.drop(columns=['host_name'])","21658d52":"data.isnull().sum()","cfa2e565":"null_data = data[data['reviews_per_month'].isnull()]\nnull_data.head(2)","f723d9e9":"null_data['number_of_reviews'].value_counts()","a5ff6bc9":"data.duplicated().sum()","349bffa0":"data = data.drop(columns=['id','last_review'])","c0d897ee":"data['reviews_per_month'] = data['reviews_per_month'].fillna(value=0)","df3e92ac":"hosts = data['host_id'].value_counts().reset_index()[:10]","1e495723":"plt.rcParams['figure.figsize'] = (10,8)","272d10e4":"ax = sns.barplot(x='index',y='host_id',data=hosts)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nplt.show()","1cbb5b25":"print(f'Number of instances greater than 2000 - ',len(data[data['price']>2000]))\nsns.violinplot(data[data['price']<2000]['price'])\nplt.show()","6a5d48ef":"sample_data = data[data['price']<1000]\nsns.violinplot(x='neighbourhood_group', y='price', data=sample_data)\nplt.show()","db27bfe9":"neighbour = data.groupby('neighbourhood_group')['price']\nbrooklyn = neighbour.get_group('Brooklyn')\nmanhattan = neighbour.get_group('Manhattan')\nqueens = neighbour.get_group('Queens')\nstaten = neighbour.get_group('Staten Island')\nbronx = neighbour.get_group('Bronx')","85cc4e74":"for i in [brooklyn,manhattan,queens,staten,bronx]:\n    print(normaltest(i))","b818e55f":"f_oneway(brooklyn,manhattan,queens,staten,bronx)","6ce3240b":"samp1 = data['neighbourhood'].value_counts().reset_index()\nlen(samp1[samp1['neighbourhood']>100])","0406298e":"data['room_type'].value_counts()","449649ee":"sns.violinplot(x='room_type', y='price', data=sample_data)\nplt.show()","b6780574":"room = data.groupby('room_type')['price']\nprivate = room.get_group('Private room')\nentire = room.get_group('Entire home\/apt')\nshared = room.get_group('Shared room')","43a67c3c":"for i in [private,entire,shared]:\n    print(normaltest(i))","f939732d":"f_oneway(private,entire,shared)","687baf3c":"print(f'Number of instances greater than 50 - ',len(data[data['minimum_nights']>50]))\nsns.distplot(data[data['minimum_nights']<50]['minimum_nights'], bins=100)\nplt.show()","aac577e4":"print(f'Number of instances greater than 10 - ',len(data[data['reviews_per_month']>10]))\nsns.distplot(data[data['reviews_per_month']<10]['reviews_per_month'], bins=100)\nplt.show()","ac77176d":"(len(data[data['calculated_host_listings_count']==1])\/len(data))*100","02ba058d":"print(f'Number of instances greater than 1 - ',len(data[data['calculated_host_listings_count']>1]))\nsns.distplot(data[data['calculated_host_listings_count']!=1]['calculated_host_listings_count'])\nplt.show()","60c3f674":"one_review = data[data['calculated_host_listings_count'] == 1]['price']\nmore_than_one = data[data['calculated_host_listings_count'] > 1]['price']","4bf567e5":"sns.distplot(more_than_one, label='More than 1')\nsns.distplot(one_review,label='Equal to 1')\nplt.legend()\nplt.show()","9973360b":"for i in [one_review, more_than_one]:\n    print(normaltest(i))","9566c92a":"f_oneway(one_review, more_than_one)","070c24c5":"print(f'Number of instances greater than 100 - ',len(data[data['number_of_reviews']>100]))\nsns.distplot(data['number_of_reviews'], bins=50)\nplt.show()","13c11d68":"log_reviews = np.log((1+ data['number_of_reviews']))\nsns.distplot(log_reviews, bins=100)","47ca3c2e":"log_reviews = np.power(data['number_of_reviews'], (1\/3))\nsns.distplot(log_reviews, bins=100)","3f0044ae":"from scipy.stats import boxcox\nl, opt_lambda = boxcox(1+data['number_of_reviews'])\nreviews_boxcox = boxcox(1+data['number_of_reviews'], lmbda=opt_lambda)\n\nsns.distplot(reviews_boxcox)","b66766e1":"print(f'Number of instances greater than 365 - ',len(data[data['availability_365']>365]))\nprint(f'Number of instances equal to 0 - ',len(data[data['availability_365']==0]))\nsns.distplot(data['availability_365'], bins=50)\nplt.show()","e7c99127":"data[data['availability_365']==0]['room_type'].value_counts()","dd2e3d08":"sns.heatmap(data[['price','minimum_nights','number_of_reviews','reviews_per_month','calculated_host_listings_count'\\\n                 ,'availability_365']].corr(), annot=True)\nplt.show()","23edd61d":"sns.pairplot(y_vars=['price'], x_vars=['minimum_nights','number_of_reviews','reviews_per_month','calculated_host_listings_count'\\\n                 ,'availability_365'], data=data)\nplt.show()","6001d4af":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nsample_data = data[['minimum_nights','number_of_reviews','reviews_per_month','calculated_host_listings_count','availability_365']]\nvif = pd.DataFrame()\nvif['feature'] = sample_data.columns\n\nvif[\"VIF\"] = [variance_inflation_factor(sample_data.values, i) for i in range(len(sample_data.columns))] \nvif","31dbf590":"sample_data = data[data['price']<500]\nsns.scatterplot(x='number_of_reviews',y='price', data=sample_data, hue='room_type')","ccec24fb":"sns.violinplot(x='room_type',y='availability_365', data=data)","4e90a7c1":"sns.violinplot(x='neighbourhood_group',y='availability_365', data=data)","6f8266ce":"sample_data = data[data['price']<500]\nsns.catplot(x='neighbourhood_group', y='price',col='room_type', kind='violin', data=sample_data);\nplt.show()","98d3183a":"data.drop(['host_id','neighbourhood','latitude','longitude','reviews_per_month'], axis=1, inplace = True)","f95d1a54":"data['calculated_host_listings_count'] = np.where((data['calculated_host_listings_count']==1), 0, 1)","a4bfc5ee":"quantiles_data = [0,0.25,0.5,0.75,1]\ndata['number_of_reviews'].quantile(quantiles_data)","cb8ee11f":"labels = [1,2,3,4]\ndata['number_of_reviews_range'] = pd.qcut(data['number_of_reviews'], q=quantiles_data, labels=labels)\ndata.drop(['number_of_reviews'], axis=1, inplace=True)","ea650f4a":"data = pd.get_dummies(data, columns=['neighbourhood_group','room_type','number_of_reviews_range'], drop_first=True)","11e0b773":"data.head(2)","b743a3d5":"from sklearn.model_selection import train_test_split\nX = data.drop(['price'], axis=1)\ny = data[['price']]\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","f70f00bd":"print(x_train.shape, '----', x_test.shape)\nprint(y_train.shape, '----', y_test.shape)","93c9c5c5":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom scipy.sparse import hstack","34ef7f0c":"model_vectorizer = TfidfVectorizer(min_df=10, ngram_range=(1,2), max_features=500)\nmodel_vectorizer.fit(x_train['name'].values)\n\nX_train_name = model_vectorizer.transform(x_train['name'].values)\nX_test_name = model_vectorizer.transform(x_test['name'].values)","26e779a9":"x_train['availability_365'].values.reshape(1,-1)[0]","9540bc1f":"from sklearn.preprocessing import Normalizer\n\nmodel_normalizer = Normalizer()\nmodel_normalizer.fit(x_train['availability_365'].values.reshape(-1,1))\n\nx_train_availability = model_normalizer.transform(x_train['availability_365'].values.reshape(-1,1)).reshape(-1,1)\nx_test_availability  = model_normalizer.transform(x_test['availability_365'].values.reshape(-1,1)).reshape(-1,1)","ac9f9731":"model_normalizer = Normalizer()\nmodel_normalizer.fit(x_train['minimum_nights'].values.reshape(-1,1))\n\nx_train_min_nights = model_normalizer.transform(x_train['minimum_nights'].values.reshape(-1,1)).reshape(-1,1)\nx_test_min_nights  = model_normalizer.transform(x_test['minimum_nights'].values.reshape(-1,1)).reshape(-1,1)","be313ad5":"x_train = x_train.drop(['name','minimum_nights','availability_365'], axis=1)\nx_test = x_test.drop(['name','minimum_nights','availability_365'], axis=1)","73868aa7":"x_tr = hstack((x_train, X_train_name, x_train_availability,x_train_min_nights)).tocsr()\nx_te = hstack((x_test, X_test_name, x_test_availability, x_test_min_nights)).tocsr()","839ff419":"print(x_tr.shape,'---',x_te.shape)","df121491":"from sklearn.linear_model import LinearRegression\n\nmodel_lr = LinearRegression()\nmodel_lr.fit(x_tr, y_train)\n\ny_train_pred = model_lr.predict(x_tr)\nrmse_lr = np.sqrt(mean_squared_error(y_train, y_train_pred))\nprint(rmse_lr)","ab9e963b":"from sklearn.linear_model import Lasso\nmodel_lasso = Lasso(alpha=0.01)\nmodel_lasso.fit(x_tr, y_train) ","9ba19c92":"model_lasso.score(x_tr, y_train)","04b0f16a":"y_test_pred = model_lasso.predict(x_te)\nnp.sqrt(mean_squared_error(y_test,y_test_pred))","5ba89c54":"from sklearn.svm import SVR\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\nmodel_svr = SVR()\nparam = {'kernel':['linear', 'rbf'], 'C':[0.0001,0.001,0.01,0.1,1,5,10], 'epsilon':[0.001,0.01,0.1,0,1,2,5]}\nmodel_search_svr = RandomizedSearchCV(model_svr, param, scoring='neg_root_mean_squared_error', cv=5, n_jobs=-1, return_train_score=True)\n\nmodel_search_svr.fit(x_tr, y_train)\nresults = pd.DataFrame.from_dict(model_search_svr.cv_results_)\n#results = results.sort_values(by=['param_min_samples_split','param_max_depth'])","c122d076":"model_search_svr.best_estimator_","49ce0c6a":"best_svr = SVR(C=10, epsilon=0)\nbest_svr.fit(x_tr, y_train)\n\ny_train_pred = best_svr.predict(x_tr)\nrmse_lr = np.sqrt(mean_squared_error(y_train, y_train_pred))\nprint(rmse_lr)","c8404de5":"from sklearn.tree import DecisionTreeRegressor\n\nmodel_dt = DecisionTreeRegressor()\nparam = {'max_depth':[1,2,5,10,50], 'min_samples_split':[5,10,50,100,200]}\nmodel_search_dt = GridSearchCV(model_dt, param, scoring='neg_root_mean_squared_error', cv=5, n_jobs=-1, return_train_score=True)\n\nmodel_search_dt.fit(x_tr, y_train)\nresults_dt = pd.DataFrame.from_dict(model_search_dt.cv_results_)","9d6f4419":"model_search_dt.best_estimator_","b07e19b0":"best_dt = DecisionTreeRegressor(max_depth=1, min_samples_split=5)\nbest_dt.fit(x_tr, y_train)\n\ny_train_pred = best_dt.predict(x_tr)\nrmse_dt = np.sqrt(mean_squared_error(y_train, y_train_pred))\nprint(rmse_dt)","8b7fe2ec":"y_test_pred = best_dt.predict(x_te)\nnp.sqrt(mean_squared_error(y_test,y_test_pred))","6de4ee42":"from sklearn.ensemble import ExtraTreesRegressor\n\nmodel_extraTrees = ExtraTreesRegressor()\nparams = {'n_estimators':[5,10,20,40,60], 'max_depth':[1,2,5,10,50], 'min_samples_split':[5,10,50,100,200]}\nmodel_search_extraTrees = RandomizedSearchCV(model_extraTrees, params, scoring='neg_root_mean_squared_error', cv=5, n_jobs=-1, return_train_score=True)\n\nmodel_search_extraTrees.fit(x_tr, y_train)\n\nprint(model_search_extraTrees.best_estimator_)","8e664c63":"best_model_extraTrees = ExtraTreesRegressor(n_estimators=60, max_depth=50, min_samples_split=100)\nbest_model_extraTrees.fit(x_tr, y_train)\n\ny_train_pred = best_model_extraTrees.predict(x_tr)\nrmse_extras = np.sqrt(mean_squared_error(y_train, y_train_pred))\nprint(rmse_extras)","391b233a":"y_test_pred = best_model_extraTrees.predict(x_te)\nprint(np.sqrt(mean_squared_error(y_test,y_test_pred)))","804533a9":"import xgboost as xgb\nxgb_model = xgb.XGBRegressor()\nparams = {'n_estimators':[20,50,100,150,200],'learning_rate ':[0.00001, 0.0001,0.001,0.01,0.1,1,5,10], 'max_depth':[1,5,10,40,60]}\nmodel_xgbReg = RandomizedSearchCV(xgb_model,param_distributions=params,scoring='neg_root_mean_squared_error',n_jobs=-1,cv=5, random_state=45, return_train_score=True)\n\nmodel_xgbReg.fit(x_tr, y_train)\nprint(model_xgbReg.best_estimator_)","47e2844a":"xgb_model = xgb.XGBRegressor(n_estimators=20, learning_rate=0.01, max_depth=5)\nxgb_model.fit(x_tr, y_train)","8174054b":"y_test_pred = xgb_model.predict(x_te)\nprint(np.sqrt(mean_squared_error(y_test,y_test_pred)))","4c06d3ee":"There are two peaks: 0-properties are probably popular and are not available that easily, 365- they are available throughout the year. ","cc164ebe":"There are no duplicate instances in the data.","a86c16c0":"Majority of hosts are listed only once 1. So, we either take feature as two labels- 1 and greater than 1 or drop the feature based on importance later.","95334bab":"Manhattan has highest prices in all room types followed by Brooklyn","43b48bdb":"reviews_per_month and number_of_reviews has high correlation, which is kind of expected. So, it is beeter to keep only one of them. 'reviews_per_month' feature has more than half of its values less than 1, and its difficult to interpret that way. So, we drop this feature.","064c2624":"Prices of Entire home\/apt is more and shared rooms have less cost, which is expected.","462be7dd":"Staten island has more availability followed by Bronx in a year. This is expected as manhattan and brooklyn has more population and has tourist spots.","e8309e54":"Dropping 'host_name' column, since it is not useful for data analysis ","fa57085e":"Log transform and boxcox did not help in making the distribution normal. So, we use the feature as is.","8265395c":"Most instances have minimum_nights less than 5, and there is another peak at 30 nights. So, few properties require you to stay atleast for a month. ","8338647f":"p_value < 0.05, So we reject null hypothesis.\nSince, each group is statistically different, this feature is useful ","b4258bff":"p_value < 0.05, So we reject null hypothesis.\nSince, each group is statistically different, this feature is useful ","964deea5":"Most properties have prices below 500. <br>\nSince we are unable to see the most concentrated regions, taper off instances with price > 1000 for visualization purpose","f00a21d0":"p_value < 0.05, So we reject null hypothesis.\nSince, each group is statistically different, this feature is useful. <br> So, we can make this numerc data to categorical by taking bins: equal to 1 and greater than 1","d281214c":"Most room_type's are available for less than 30 days and there is another spike around 365 days. <br>\nShared rooms has more availability for around 365 days than other room types.","75844399":"Out of all above models, extraTrees model has the least rmse score.","c9518084":"There is not much correlation between price and other numeric features. And VIF did not show any feature that is collinear. ","2cd6667a":"Clearly manhattan has higher prices followed by Brooklyn.","a2a8163a":"'last_review' and 'reviews_per_month' columns have common rows of null values. And their correspnding 'number_of_reviews' is also zero. So, that means there are no reviews for that instance at all, hence can be filled with zero."}}