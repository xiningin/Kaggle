{"cell_type":{"e4a2e8f9":"code","de8a65f4":"code","eeef0baa":"code","de085445":"code","ed96c775":"code","bdd559ec":"code","9e582b9c":"code","7d3fe267":"code","d52e57c8":"code","36cdd056":"code","92e4d4c3":"code","a751b380":"code","4b0048b7":"code","69e60f8f":"code","30fdadf2":"code","7b66b55c":"code","d56aeea1":"code","7ea3072e":"markdown","2941cafa":"markdown","c44d8830":"markdown","4f67b800":"markdown","7853f77b":"markdown","e3ba85e4":"markdown","7d56e97b":"markdown","3e0ee319":"markdown","ba0b612d":"markdown","daab9ccb":"markdown","5038bea7":"markdown"},"source":{"e4a2e8f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de8a65f4":"import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nimport cv2\n\nfrom colorama import Fore, Back, Style\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\n\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n    \nprint(tf.__version__)","eeef0baa":"monet_jpg_directory = '..\/input\/gan-getting-started\/monet_jpg\/'\nphoto_jpg_directory = '..\/input\/gan-getting-started\/photo_jpg\/'","de085445":"def getImagePaths(path):\n    image_names = []\n    for dirname, _, filenames in os.walk(path):\n        for filename in filenames:\n            fullpath = os.path.join(dirname, filename)\n            image_names.append(fullpath)\n    return image_names","ed96c775":"monet_images_path = getImagePaths(monet_jpg_directory)\nphoto_images_path = getImagePaths(photo_jpg_directory)","bdd559ec":"print(f\"{y_}Number of Monet images: {g_} {len(monet_images_path)}\\n\")\nprint(f\"{y_}Number of Photo images: {g_} {len(photo_images_path)}\\n\")","9e582b9c":"def getShape(images_paths):\n    shape = cv2.imread(images_paths[0]).shape\n    for image_path in images_paths:\n        image_shape=cv2.imread(image_path).shape\n        if (image_shape!=shape):\n            return \"Different image shape\"\n        else:\n            return \"Same image shape \" + str(shape)","7d3fe267":"getShape(monet_images_path)","d52e57c8":"getShape(photo_images_path)","36cdd056":"def display_multiple_img(images_paths, rows, cols):\n    figure, ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,8) )\n    for ind,image_path in enumerate(images_paths):\n        image=cv2.imread(image_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) \n        try:\n            ax.ravel()[ind].imshow(image)\n            ax.ravel()[ind].set_axis_off()\n        except:\n            continue;\n    plt.tight_layout()\n    plt.show()","92e4d4c3":"display_multiple_img(monet_images_path, 4, 4)","a751b380":"display_multiple_img(photo_images_path, 4, 4)","4b0048b7":"def styling():\n    for spine in plt.gca().spines.values():\n        spine.set_visible(False)\n        plt.xticks([])\n        plt.yticks([])","69e60f8f":"def hist(image_path):\n    plt.figure(figsize=(16, 3))\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    \n    plt.subplot(1, 5, 1)\n    plt.imshow(img)\n    styling()\n    \n    custom_colors = [\"#ef233c\", \"#76da71\", \"#2667ff\",\"#aea3b0\"]\n    labels = ['Red Channel', 'Green Channel', 'Blue Channel','Total']\n    \n    for i in range(1,4):\n        plt.subplot(1, 5, i+1)\n        plt.hist(img[:, :, i-1].reshape(-1),bins=64,color=custom_colors[i-1],alpha = 0.6)\n        plt.xlabel(labels[i-1],fontsize=10)\n        styling()\n        \n    plt.subplot(1, 5, 5)\n    plt.hist(img.reshape(-1),bins=128,color=custom_colors[3],alpha = 0.6)\n    plt.xlabel(labels[3],fontsize=10)\n    styling()\n    plt.show()","30fdadf2":"def display_hist(images_paths):\n        for ind,image_path in enumerate(images_paths):\n            if (ind<6):\n                hist(image_path)","7b66b55c":"display_hist(monet_images_path)","d56aeea1":"display_hist(photo_images_path)","7ea3072e":"<h3> For Monet images <\/h3>","2941cafa":"<h3> For Photo images <\/h3>","c44d8830":"<h3> Getting image paths from the directory <\/h3>","4f67b800":"<div class=\"alert alert-block alert-info\">  \n<h3>Colour Histograms<\/h3>\n<\/div>","7853f77b":"<h3> Work in progress \ud83d\udea7 <\/h3>","e3ba85e4":"<div class=\"alert alert-block alert-info\">  \n<h3>Monet images<\/h3>\n<\/div>","7d56e97b":"<h3> Imports <h3>","3e0ee319":"<h3>\nA sneak peak into the data we're working with\n<\/h3>","ba0b612d":"<h3> Number of images in each directory <\/h3>","daab9ccb":"<h3> Checking if images in each directory have the same shape <\/h3>","5038bea7":"<div class=\"alert alert-block alert-info\">  \n<h3>Photo images<\/h3>\n<\/div>"}}