{"cell_type":{"48a334fc":"code","c7a609d0":"code","c8e596db":"code","2fef92f0":"code","053aa967":"code","5d051f8b":"code","f47c8c9d":"code","7704a8cb":"code","5b81feb7":"code","c42a0372":"code","1ae4b9d7":"code","1e651d02":"code","8a2343c8":"markdown","778c11bb":"markdown","44ea133a":"markdown","d14dbf4e":"markdown","98467323":"markdown","24fb358b":"markdown","57cc315d":"markdown","5d489618":"markdown","22cf5878":"markdown","5a92a585":"markdown","88bc5946":"markdown","2b73f550":"markdown"},"source":{"48a334fc":"import numpy as np\nimport pandas as pd\n\nimport plotly\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nimport cufflinks as cf\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ncf.go_offline()\nplotly.offline.init_notebook_mode()\ncf.set_config_file(world_readable=True, theme='space', offline=True)","c7a609d0":"file_names = [\n    'audi.csv', 'bmw.csv', 'ford.csv',\n    'hyundi.csv', 'merc.csv', 'skoda.csv',\n    'toyota.csv', 'vauxhall.csv', 'vw.csv'\n]\n\nbrands = [\n    'Audi', 'BMW', 'Ford',\n    'Hyundi', 'Mercedes-Benz', 'Skoda',\n    'Toyota', 'Vauxhall', 'Volkswagen'\n]\n\nbrands_data = {\n    brand: pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/' + fn)\n    for brand, fn in zip(brands, file_names)\n}\n\nfor bname, bdata in brands_data.items():\n    print(f\"{bname:<15}{bdata.columns.tolist()}\")","c8e596db":"brands_data[\"Hyundi\"].rename(columns={'tax(\u00a3)': 'tax'}, inplace=True)","2fef92f0":"mean_taxes = pd.DataFrame({'AvgTax': [0]*len(brands)}, index=brands)\nfor bname, bdata in brands_data.items():\n    mean_taxes.loc[bname, 'AvgTax'] = round(bdata.tax.mean(), 1)\nmean_taxes.iplot(kind='bar', title='Average taxes', orientation='h')","053aa967":"for bname, bdata in brands_data.items():\n    iplot(px.scatter(data_frame=bdata, color='model', x='mileage',\n                     y='price', template='plotly_dark', title=bname))","5d051f8b":"for bname, bdata in brands_data.items():\n    iplot(px.scatter(data_frame=bdata, color='fuelType', x='mileage', size='mpg',\n                     y='price', template='plotly_dark', title=bname))","f47c8c9d":"feats = brands_data['Audi'].columns.tolist()\nfeats.remove('model')\nfeats.remove('transmission')\nfeats.remove('fuelType')\nn_feats = len(feats)\n\navg_corr = pd.DataFrame({feat: [0] * n_feats for feat in feats}, index=feats)\nfor bname, bdata in brands_data.items():\n    brand_corr = bdata.corr()\n    for f in feats:\n        avg_corr[f] += brand_corr[f] \/ len(brands)\npx.imshow(avg_corr, template='plotly_dark', zmin=-1, color_continuous_scale='inferno')","7704a8cb":"def remove_outliers(b: str, feat: str, lim: int) -> None:\n    brands_data[b] = brands_data[b][brands_data[b][feat] <= lim]\n    \nremove_outliers('BMW',      'price', 80000)\nremove_outliers('Hyundi',   'price', 80000)\nremove_outliers('Skoda',    'price', 40000)\nremove_outliers('Vauxhall', 'price', 30000)\n\nfor bname in brands:\n    remove_outliers(bname, 'mileage', 200000)","5b81feb7":"from sklearn.preprocessing import OrdinalEncoder\nfrom typing import List\n\nfull_data = {bname: bdata.copy() for bname, bdata in brands_data.items()}\n\ndef encode_features(data_frame: pd.DataFrame, encoder, feats: List[str]) -> None:\n    data_frame[feats] = encoder.fit_transform(data_frame[feats])\n\nenc = OrdinalEncoder()    \nfor b in brands:\n    encode_features(full_data[b], enc, ['model', 'fuelType', 'transmission'])","c42a0372":"from sklearn.metrics import r2_score, mean_absolute_error as mae\nfrom sklearn.linear_model import ElasticNet, LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import scale\nfrom xgboost import XGBRegressor\nfrom sklearn.svm import SVR\n\nmodels = {\n    'Linear SVR':        SVR(kernel='linear'),\n    'ElasticNet':        ElasticNet(),\n    'Linear Regression': LinearRegression(),\n    'XGBoost Regressor': XGBRegressor()\n}\n\n# Scaling and splitting into (X, y) pairs\nfull_data = {\n    bname: (scale(bdata.drop(columns=['price'])), bdata.price)\n    for bname, bdata in full_data.items()\n}\n\nscores = pd.DataFrame({'r2': [0] * len(models), 'MAE': [0] * len(models)}, index=models.keys())\n\nfor model_name, model in models.items():\n    mr2, mmae = 0., 0.\n    for b in brands:\n        X, y = full_data[b]\n        train_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.2, random_state=0)\n        model.fit(train_X, train_y)\n        pred_y = model.predict(val_X)\n        mr2  += r2_score(val_y, pred_y) \/ len(brands)\n        mmae = max(mae(val_y, pred_y), mmae)\n    scores.loc[model_name, 'r2'], scores.loc[model_name, 'MAE'] = round(mr2, 2), round(mmae, 0)\n    \nscores.r2.iplot(kind='bar', title='Mean Determination Coefficient')\nscores.MAE.iplot(kind='bar', title='Max MAE')","1ae4b9d7":"for bname, bdata in brands_data.items():\n    bdata.model = bname + str(' ') + bdata.model.astype(str)\n\nudata = pd.concat([bdata for bdata in brands_data.values()])\nencode_features(udata, enc, ['model', 'fuelType', 'transmission'])\nfull_X, full_y = scale(udata.drop(columns=['price'])), udata.price\nfull_train_X, full_test_X, full_train_y, full_test_y = train_test_split(full_X, full_y, random_state=0)\n\nregressor = XGBRegressor()\nregressor.fit(full_train_X, full_train_y)\nfull_pred_y = regressor.predict(full_test_X)\nfinal_r2_score = r2_score(full_test_y, full_pred_y)\n\nprint(round(final_r2_score, 2))","1e651d02":"regressor.fit(full_X, full_y)\ndef predict_car_prices(X: pd.DataFrame) -> np.ndarray:\n    return regressor.predict(X)","8a2343c8":"## Data Loading","778c11bb":"# Final Model","44ea133a":"## Features Encoding","d14dbf4e":"MPG and price both depend on fuel type.","98467323":"# EDA & Data Cleaning","24fb358b":"# Data Preparation","57cc315d":"There is strong correlation between year and mileage, mileage correlates with the price more strongly.","5d489618":"## Cleaning","22cf5878":"**As you can see, XGBoost showed the best results.**","5a92a585":"# Model Selection","88bc5946":"## EDA","2b73f550":"The anticorrelation between price and mileage is clearly visible. You can also see that the points marked with color (it denotes the model) form clusters. There are outliers in each dataset."}}