{"cell_type":{"1d503d92":"code","6c552f57":"code","7421e658":"code","23125417":"code","a15a4239":"code","2b069b27":"code","666abd57":"code","5d3b9a76":"code","6595dab8":"code","fec3eaf5":"code","ff63a516":"code","990e17d4":"markdown","f41d2a6c":"markdown","470d6ab7":"markdown","3e3c7574":"markdown","3f858f81":"markdown","4d2c2d70":"markdown","75c25416":"markdown","f1aa3afa":"markdown","f4ab374d":"markdown"},"source":{"1d503d92":"# We will only need OS and Pandas for this one\nimport os\nimport pandas as pd\n\n# Path names\nBASE_PATH = \"..\/input\/rsna-intracranial-hemorrhage-detection\/rsna-intracranial-hemorrhage-detection\/\"\nTRAIN_PATH = BASE_PATH + 'stage_2_train.csv'\nTEST_PATH = BASE_PATH + 'stage_2_sample_submission.csv'\n\n# All labels that we have to predict in this competition\ntargets = ['epidural', 'intraparenchymal', \n           'intraventricular', 'subarachnoid', \n           'subdural', 'any']","6c552f57":"# File sizes and specifications\nprint('\\n# Files and file sizes')\nfor file in os.listdir(BASE_PATH)[2:]:\n    print('{}| {} MB'.format(file.ljust(30), \n                             str(round(os.path.getsize(BASE_PATH + file) \/ 1000000, 2))))","7421e658":"train_df = pd.read_csv(TRAIN_PATH)\ntrain_df['ImageID'] = train_df['ID'].str.rsplit('_', 1).map(lambda x: x[0]) + '.png'\nlabel_lists = train_df.groupby('ImageID')['Label'].apply(list)","23125417":"train_df[train_df['ImageID'] == 'ID_0002081b6.png']","a15a4239":"def prepare_df(path, train=False, nrows=None):\n    \"\"\"\n    Prepare Pandas DataFrame for fitting neural network models\n    Returns a Dataframe with two columns\n    ImageID and Labels (list of all labels for an image)\n    \"\"\" \n    df = pd.read_csv(path, nrows=nrows)\n    \n    # Get ImageID and type for pivoting\n    df['ImageID'] = df['ID'].str.rsplit('_', 1).map(lambda x: x[0]) + '.png'\n    df['type'] = df['ID'].str.split(\"_\", n = 3, expand = True)[2]\n    # Create new DataFrame by pivoting\n    new_df = df[['Label', 'ImageID', 'type']].drop_duplicates().pivot(index='ImageID', \n                                                                      columns='type', \n                                                                      values='Label').reset_index()\n    return new_df","2b069b27":"# Convert dataframes to preprocessed format\ntrain_df = prepare_df(TRAIN_PATH, train=True)\ntest_df = prepare_df(TEST_PATH)","666abd57":"print('Training data: ')\ndisplay(train_df.head())\n\nprint('Test data: ')\ntest_df.head()","5d3b9a76":"# Save to CSV\ntrain_df.to_csv('clean_train_df.csv', index=False)\ntest_df.to_csv('clean_test_df.csv', index=False)","6595dab8":"def create_submission_file(IDs, preds):\n    \"\"\"\n    Creates a submission file for Kaggle when given image ID's and predictions\n    \n    IDs: A list of all image IDs (Extensions will be cut off)\n    preds: A list of lists containing all predictions for each image\n    \n    Returns a DataFrame that has the correct format for this competition\n    \"\"\"\n    sub_dict = {'ID': [], 'Label': []}\n    # Create a row for each ID \/ Label combination\n    for i, ID in enumerate(IDs):\n        ID = ID.split('.')[0] # Remove extension such as .png\n        sub_dict['ID'].extend([f\"{ID}_{target}\" for target in targets])\n        sub_dict['Label'].extend(preds[i])\n    return pd.DataFrame(sub_dict)","fec3eaf5":"# Finalize submission files\ntrain_sub_df = create_submission_file(train_df['ImageID'], train_df[targets].values)\ntest_sub_df = create_submission_file(test_df['ImageID'], test_df[targets].values)","ff63a516":"print('Back to the original submission format:')\ntrain_sub_df.head(6)","990e17d4":"![](https:\/\/www.rsna.org\/-\/media\/Images\/RSNA\/Menu\/logo_sml.ashx?w=100&la=en&hash=9619A8238B66C7BA9692C1FC3A5C9E97C24A06E1)","f41d2a6c":"That's all! You can find the clean CSV's in the \"output files\" of this kernel.\n\nIf you like this Kaggle kernel, feel free to give an upvote and leave a comment! I will do my best to implement your suggestions!","470d6ab7":"## Preprocessing CSV's","3e3c7574":"Are you working a lot with Data Generators (for example Keras' \".flow_from_dataframe\") and competing in the [RSNA Intercranial Hemorrhage 2019 competition](https:\/\/www.kaggle.com\/c\/rsna-intracranial-hemorrhage-detection)? \n\nI've created a function that creates a simple preprocessed DataFrame with a column for ImageID and a column for each label in the competition. ('epidural', 'intraparenchymal', 'intraventricular', 'subarachnoid', 'subdural', 'any') \n\nI also made a function which translates your predictions into the correct submission format.\n\nIf you are interested in getting the metadata as CSV files also you can check out [this Kaggle kernel](https:\/\/www.kaggle.com\/carlolepelaars\/converting-dicom-metadata-to-csv-rsna-ihd-2019). \n\nI hope this can be of help to you in the competition!","3f858f81":"We read in the CSV's remove duplicates and create a column for every label we have to predict. We therefore get one row for each image and this works nicely with datagenerator of popular frameworks like Keras and PyTorch.","4d2c2d70":"To convert the DataFrame back to the original submission format you can use this function.","75c25416":"## Creating submission file","f1aa3afa":"## Preparation","f4ab374d":"## Preprocessing CSV's for training"}}