{"cell_type":{"807702dd":"code","439f1d13":"code","dc28dc74":"code","2c39b2d7":"code","c5632155":"code","86b39507":"code","877420d9":"code","5f8d8086":"code","e55b9ae2":"code","79d5eec7":"code","e82d0174":"code","da77dde6":"code","9a5aaeaa":"code","af0247a5":"code","83221542":"code","3ca35d9b":"code","d05b0a98":"code","580b1f43":"code","a8c47b96":"code","759a9d5d":"code","5d7f029d":"code","5130f93e":"code","28d4e0df":"markdown","2e20e4a3":"markdown","0f7a12e2":"markdown","7eb0ceb9":"markdown"},"source":{"807702dd":"import pandas as pd\nimport numpy as np\nimport pandas_profiling as pp\nfrom colorama import Fore, Back, Style\n\n\nimport seaborn as sb\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport matplotlib.pyplot as plt\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import *","439f1d13":"df = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndata = df.copy(deep=True)\ninit_notebook_mode (connected = True)","dc28dc74":"df.head().style.set_properties(**{'background-color':'black','color':'white'})","2c39b2d7":"df.info()","c5632155":"pp.ProfileReport(df)","86b39507":"df['score'] = ((df['math score']+ df['reading score'] + df['writing score'])\/ 3).round(2)","877420d9":"fig = px.scatter(df, x=\"reading score\", y=\"writing score\", color=\"parental level of education\",color_discrete_sequence=px.colors.qualitative.Plotly,\n                 size='math score', hover_data=['gender'])\nfig.update_layout(title='readign score vs writing score')\niplot(fig)","5f8d8086":"fig = px.density_heatmap(df, x=\"writing score\", y=\"reading score\", marginal_x=\"box\", marginal_y=\"violin\")\nfig.update_layout(title='Density HeatMap between Writing Score and Reading Score of the students')\niplot(fig)","e55b9ae2":"df['race\/ethnicity'].value_counts()","79d5eec7":"x_data = np.unique(df['race\/ethnicity'])\n\nya,yb,yc,yd,ye=[],[],[],[],[]\n\nfor i in range(len(df)):\n    if df['race\/ethnicity'][i] =='group C':\n        yc.append(df['math score'][i])\n    elif df['race\/ethnicity'][i] == 'group D':\n        yd.append(df['math score'][i])\n    elif df['race\/ethnicity'][i] == 'group B':\n        yb.append(df['math score'][i])\n    elif df['race\/ethnicity'][i] == 'group E':\n        ye.append(df['math score'][i])\n    else:\n        ya.append(df['math score'][i])\n\n\ny_data = [ya,yb,yc,yd,ye]\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)',\n          'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)']\n\nfig = go.Figure()\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        fig.add_trace(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints='all',\n            jitter=0.5,\n            notched=True,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker_size=2,\n            line_width=1)\n        )\n\nfig.update_layout(\n    title='math Score of the students based on race\/ethnicity ',\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=5,\n        gridcolor='rgb(255, 255, 255)',\n        gridwidth=1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)',\n    showlegend=False\n)\n\niplot(fig)","e82d0174":"print(Fore.BLACK+Back.RED+'pairwise scatter plot for continuous features')\nsb.pairplot(df,hue='gender',kind='scatter')\nplt.show()","da77dde6":"for i in df.columns:\n    if df[i].dtype == 'object':\n        print(np.unique(df[i]))","9a5aaeaa":"for i in list(df.columns):\n    if df[i].dtype == 'object':\n        df[i]=pd.factorize(df[i])[0]","af0247a5":"df.describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='viridis')\\\n                             .background_gradient(subset=['50%'], cmap='mako')","83221542":"plt.figure(dpi=150)\nplt.title('correlation between attributes')\nsb.heatmap(df.corr(),annot=True,lw=1,linecolor='white',cmap='viridis_r')\nplt.xticks(rotation=90)\nplt.yticks(rotation = 0)\nplt.show()","3ca35d9b":"pd.options.mode.chained_assignment = None\nfor i in range(len(df.score)):\n    if df.score[i] >= 80:\n        df.score[i] = 'excellent'\n    elif df.score[i] >= 70:\n        df.score[i] = 'good'\n    elif df.score[i] >= 60:\n        df.score[i] = 'satisfactory'\n    elif df.score[i] < 60:\n        df.score[i] = 'need support'\n        \ndata['grade'] = df['score']","d05b0a98":"fig = px.histogram(data, x=\"grade\", y=\"math score\", color=\"gender\", facet_col=\"race\/ethnicity\",marginal=\"box\")\niplot(fig)","580b1f43":"cL = list(df.columns)\nfeatures = list(set(cL)-set(['score']))\nx = df[features]\ny = df.loc[:,['score']]","a8c47b96":"train_x,test_x,train_y,test_y = train_test_split(x,y,random_state = 3,test_size = 0.25)","759a9d5d":"ran = RandomForestClassifier()\nran.fit(train_x,np.ravel(train_y,order='C'))\npredictions = ran.predict(test_x)","5d7f029d":"print('Accuracy of the model is : ',Back.YELLOW+str(accuracy_score(test_y,predictions)))","5130f93e":"print(Fore.BLACK+Back.RED+classification_report(test_y,predictions))","28d4e0df":"## If you like, an upvote would be deeply appreciated. Thanks! :)","2e20e4a3":"# <font color='blue'>Conclusion<\/font>\n* ##  Boys are good at math and Girls are good at reading and writing.\n* ## Group A students have least scores compared to other race.\n* ## Reading ,Writing and Math scores have high positive correlation.\n","0f7a12e2":"# <font color='red'>The Random forest classifier will classify the students based on the given attributes with more than 90% accuracy.<\/font>\n","7eb0ceb9":"# STUDENTS PERFORMANCE ANALYSIS\n\n### Context\nMarks secured by the students\n### Content\nThis data set consists of the marks secured by the students in various subjects.\n### Acknowledgements\nhttp:\/\/roycekimmons.com\/tools\/generated_data\/exams\n### Inspiration\nTo understand the influence of the parents background, test preparation etc on students performance\n\n![](https:\/\/blog.amerlux.com\/wp-content\/uploads\/2020\/11\/amlx-tw-education-blog-1024x683.jpg)"}}