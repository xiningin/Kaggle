{"cell_type":{"73821d01":"code","bc8b917a":"code","3f3f4543":"code","10a5010d":"code","175e73c7":"code","c6436832":"code","1255accd":"code","9a43a03a":"code","32543fd8":"code","e27ce332":"code","cd244432":"code","4353fa8c":"code","d11d396f":"code","e0f2e421":"code","b5a150ab":"code","d889a013":"code","8e6f69dd":"code","a2af7d6e":"code","c56be7df":"code","d598efbe":"code","49974d2b":"code","56209d1d":"code","17ac43f1":"code","5f1d5ee4":"code","45057145":"code","4a5d80ba":"markdown","795c7a6e":"markdown","07e37547":"markdown","5181b9ef":"markdown","d0e6a72e":"markdown","e32a3539":"markdown","aa67428e":"markdown","5b85ac53":"markdown","b7f9babf":"markdown","017ef5aa":"markdown","1d3242f0":"markdown","48ccf2e4":"markdown","fdef1544":"markdown","66e0afa4":"markdown","219cf28c":"markdown","0d673238":"markdown","62d76c8e":"markdown","90349093":"markdown","0fa80d39":"markdown","e3b7dfb2":"markdown","d5aa0b3d":"markdown","a9dda39a":"markdown","a1b6a571":"markdown","ff9cb655":"markdown","ee4812e3":"markdown","96d23013":"markdown","46382494":"markdown","98e08bf6":"markdown","27cb4f5f":"markdown","0bfa8ee9":"markdown","039fa24a":"markdown","f81b10e1":"markdown","88f15337":"markdown","f7fec30f":"markdown","5cd9f22b":"markdown","99246cc6":"markdown"},"source":{"73821d01":"!pip install pycaret -q ","bc8b917a":"# Libraries\nimport pandas as pd\nimport pycaret as pc\nfrom pycaret.classification import *\nimport numpy as np\n\n# Dataset\ndf = pd.read_csv('..\/input\/iris-flower-dataset\/IRIS.csv')\n\n# Shape\nprint ('Iris Dataset Shape: ', df.shape)","3f3f4543":"# Dataset Display\ndf.head()","10a5010d":"data = df.sample(frac=0.8, random_state=0)\ndata_unseen = df.drop(data.index)\n\ndata.reset_index(drop=True, inplace=True)\ndata_unseen.reset_index(drop=True, inplace=True)\n\nprint('Data for Modeling: ' + str(data.shape))\nprint('Unseen Data For Predictions: ' + str(data_unseen.shape))","175e73c7":"pc_setup = setup(data = data, target = 'species', session_id=123) ","c6436832":"comparison = compare_models()","1255accd":"knn = create_model('knn')\n\n#trained model object is stored in the variable 'knn'. \nprint(knn)","9a43a03a":"rf = create_model('rf')","32543fd8":"rdg = create_model('ridge')","e27ce332":"tuned_knn = tune_model(knn, custom_grid = {'n_neighbors' : np.arange(0,50,1)})\n\n#tuned model object is stored in the variable 'tuned_dt'. \nprint(tuned_knn)","cd244432":"tuned_rf = tune_model(rf)\n\nprint(tuned_rf)","4353fa8c":"tuned_rdg = tune_model(rdg)\n\nprint(tuned_rdg)","d11d396f":"plot_model(tuned_knn, plot = 'confusion_matrix')","e0f2e421":"plot_model(tuned_knn, plot = 'class_report')","b5a150ab":"plot_model(tuned_knn, plot='boundary')","d889a013":"plot_model(tuned_knn, plot = 'error')","8e6f69dd":"evaluate_model(tuned_knn)","a2af7d6e":"predict_model(tuned_knn);","c56be7df":"final_knn = finalize_model(tuned_knn)","d598efbe":"#Final K Nearest Neighbour parameters for deployment\nprint(final_knn)","49974d2b":"unseen_predictions = predict_model(final_knn, data=data_unseen)\nunseen_predictions.head()","56209d1d":"save_model(final_knn,'Final_KNN_29Sep2021')","17ac43f1":"saved_final_knn = load_model('Final_KNN_29Sep2021')","5f1d5ee4":"new_prediction = predict_model(saved_final_knn, data=data_unseen)","45057145":"new_prediction.head()","4a5d80ba":"`create_model` is the most granular function in PyCaret and is often the foundation behind most of the PyCaret functionalities. As the name suggests this function trains and evaluates a model using cross validation that can be set with `fold` parameter. The output prints a score grid that shows Accuracy, Recall, Precision, F1, Kappa and MCC by fold. \n\nFor the remaining part of this tutorial, we will work with the below models as our candidate models. The selections are for illustration purposes only and do not necessarily mean they are the top performing or ideal for this type of data.\n\n- K Neighbors Classifier ('knn')   -- top accuracy\n- Random Forest Classifier ('rf')   -- mid accuracy\n- Ridge Classifier ('ridge') -- low accuracy\n\nThere are 18 classifiers available in the model library of PyCaret. Please view the `create_model()` docstring for the list of all available models.","795c7a6e":"## Predict on unseen data","07e37547":"### Confusion Matrix","5181b9ef":"## Model Comparison\n\nComparing all models to evaluate performance is the recommended starting point for modeling once the setup is completed (unless you exactly know what kind of model you need, which is often not the case). This function trains all models in the model library and scores them using stratified cross validation for metric evaluation. The output prints a score grid that shows average Accuracy, Recall, Precision, F1, Kappa, and MCC accross the folds (10 by default) along with training times.","d0e6a72e":"The `tune_model()` function is a random grid search of hyperparameters over a pre-defined search space. By default, it is set to optimize `Accuracy` but this can be changed using the `optimize` parameter. For example: `tune_model(dt, optimize = 'Recall')` will search for the hyperparameters of a Decision Tree Classifier that result in the highest `Recall`. For the purposes of this example, we have used the default metric `Accuracy` for the sake of simplicity only. The methodology behind selecting the right metric to evaluate a classifier is beyond the scope of this tutorial but if you would like to learn more about it, you can __[click here](https:\/\/medium.com\/@MohammedS\/performance-metrics-for-classification-problems-in-machine-learning-part-i-b085d432082b)__ to read an article on how to choose the right evaluation metric.\n\nMetrics alone are not the only criteria you should consider when finalizing the best model for production. Other factors to consider include training time, standard deviation of kfolds etc. As you progress through the tutorial series we will discuss those factors in detail at the intermediate and expert levels. For now, let's move forward considering the Tuned K Neighbors Classifier as our best model for the remainder of this tutorial.","e32a3539":"### Prediction Error Plot","aa67428e":"Two simple words of code ***(not even a line)*** have trained and evaluated over 15 models using cross validation. The score grid printed above highlights the highest performing metric for comparison purposes only. The grid by default is sorted using 'Accuracy' (highest to lowest) which can be changed by passing the `sort` parameter. For example `compare_models(sort = 'Recall')` will sort the grid by Recall instead of `Accuracy`. If you want to change the fold parameter from the default value of `10` to a different value then you can use the `fold` parameter. For example `compare_models(fold = 5)` will compare all models on 5 fold cross validation. Reducing the number of folds will improve the training time. By default, `compare_models` return the best performing model based on default sort order but can be used to return a list of top N models by using `n_select` parameter.","5b85ac53":"The accuracy on the test\/hold-out set is **`0.9189`** compared to **`0.9653`** achieved on the `tuned_knn` CV results. This is not a significant difference (and slightly lower than tuned_knn above) and probably because of the fraction (0.8) value chosen in the steps above. As an update, you can change this value to 0.9 and re-run the notebook again to check the change in accuracy.\n\nIf there is a large variation between the test\/hold-out and CV results, then this would normally indicate over-fitting but could also be due to several other factors and would require further investigation. In this case, we will move forward with finalizing the model and predicting on unseen data (the 20% that we had separated in the beginning and never exposed to PyCaret).\n\n(TIP : It's always good to look at the standard deviation of CV results when using `create_model()`.)","b7f9babf":"Once the setup has been succesfully executed it prints the information grid which contains several important pieces of information. Most of the information is related to the pre-processing pipeline which is constructed when `setup()` is executed. The majority of these features are out of scope for the purposes of this tutorial however a few important things to note at this stage include:\n\n- **session_id :**  A pseduo-random number distributed as a seed in all functions for later reproducibility. If no `session_id` is passed, a random number is automatically generated that is distributed to all functions. In this experiment, the `session_id` is set as `123` for later reproducibility.<br\/>\n<br\/>\n- **Target Type :**  Binary or Multiclass. The Target type is automatically detected and shown. There is no difference in how the experiment is performed for Binary or Multiclass problems. All functionalities are identical.<br\/>\n<br\/>\n- **Label Encoded :**  When the Target variable is of type string (i.e. 'Yes' or 'No') instead of 1 or 0, it automatically encodes the label into 1 and 0 and displays the mapping (0 : No, 1 : Yes) for reference. In this experiment label encoding is applied as follows: Iris-setosa: 0, Iris-versicolor: 1, Iris-virginica: 2. <br\/>\n<br\/>\n- **Original Data :**  Displays the original shape of the dataset. In this experiment (135, 5) means 135 samples and 5 features including the target column. <br\/>\n<br\/>\n- **Missing Values :**  When there are missing values in the original data this will show as True. For this experiment there are no missing values in the dataset.<br\/>\n<br\/>\n- **Numeric Features :**  The number of features inferred as numeric. In this dataset, 4 out of 5 features are inferred as numeric. <br\/>\n<br\/>\n- **Categorical Features :**  The number of features inferred as categorical. In this dataset, there are no categorical features. <br\/>\n<br\/>\n- **Transformed Train Set :**  Displays the shape of the transformed training set. Notice that the original shape of (135, 5) is transformed into (94, 4) for the transformed train set. <br\/>\n<br\/>\n- **Transformed Test Set :**  Displays the shape of the transformed test\/hold-out set. There are 41 samples in test\/hold-out set. This split is based on the default value of 70\/30 that can be changed using the `train_size` parameter in setup. <br\/>\n\nNotice how a few tasks that are imperative to perform modeling are automatically handled such as missing value imputation, categorical encoding etc. Most of the parameters in `setup()` are optional and used for customizing the pre-processing pipeline. These parameters are out of scope for this tutorial but as you progress to the intermediate and expert levels, we will cover them in much greater detail.","017ef5aa":"###  Random Forest Classifier","1d3242f0":"## Model Creation","48ccf2e4":"## Predict on test \/ hold-out Sample\n\nBefore finalizing the model, it is advisable to perform one final check by predicting the test\/hold-out set and reviewing the evaluation metrics. If you look at the information grid in Section 6 above, you will see that 30% (41 samples) of the data has been separated out as a test\/hold-out sample. All of the evaluation metrics we have seen above are cross validated results based on the training set (70%) only. Now, using our final trained model stored in the `tuned_knn` variable we will predict against the hold-out sample and evaluate the metrics to see if they are materially different than the CV results.","fdef1544":"### Fine Tuned K Neighbors Classifier","66e0afa4":"## Finalize Model for Deployment\n\nModel finalization is the last step in the experiment. A normal machine learning workflow in PyCaret starts with `setup()`, followed by comparing all models using `compare_models()` and shortlisting a few candidate models (based on the metric of interest) to perform several modeling techniques such as hyperparameter tuning, ensembling, stacking etc. This workflow will eventually lead you to the best model for use in making predictions on new and unseen data. The `finalize_model()` function fits the model onto the complete dataset including the test\/hold-out sample (20% in this case). The purpose of this function is to train the model on the complete dataset before it is deployed in production.","219cf28c":"## Saving the model\n\nWe have now finished the experiment by finalizing the `tuned_knn` model which is now stored in the `final_knn` variable. We have also used the model stored in `final_knn` to predict `data_unseen`. This brings us to the end of our experiment, but one question is still to be asked: What happens when you have more new data to predict? Do you have to go through the entire experiment again? The answer is no, PyCaret's inbuilt function `save_model()` allows you to save the model along with entire transformation pipeline for later use.","0d673238":"Notice that the results of `unseen_predictions` and `new_prediction` are identical.","62d76c8e":"### Classification Report","90349093":"### Ridge Classifier","0fa80d39":"## Recollect ...\n\nThis tutorial has covered the entire machine learning pipeline from data ingestion, pre-processing, training the model, hyperparameter tuning, prediction and saving the model for later use. We have completed all of these steps in less than 10 commands which are naturally constructed and very intuitive to remember such as `create_model()`, `tune_model()`, `compare_models()`. Re-creating the entire experiment without PyCaret would have taken well over 100 lines of code in most libraries.","e3b7dfb2":"## Loading the saved model\n\nTo load a saved model at a future date in the same or an alternative environment, we would use PyCaret's `load_model()` function and then easily apply the saved model on new unseen data for prediction.","d5aa0b3d":"## Installing PyCaret","a9dda39a":"### Decision Boundary Plot","a1b6a571":"## Environment Setup in PyCaret\n\nThe `setup()` function initializes the environment in pycaret and creates the transformation pipeline to prepare the data for modeling and deployment. `setup()` must be called before executing any other function in pycaret. It takes two mandatory parameters: a pandas dataframe and the name of the target column. All other parameters are optional and are used to customize the pre-processing pipeline (we will see them in later tutorials).\n\nWhen `setup()` is executed, PyCaret's inference algorithm will automatically infer the data types for all features based on certain properties. The data type should be inferred correctly but this is not always the case. To account for this, PyCaret displays a table containing the features and their inferred data types after `setup()` is executed. If all of the data types are correctly identified `enter` can be pressed to continue or `quit` can be typed to end the expriment. Ensuring that the data types are correct is of fundamental importance in PyCaret as it automatically performs a few pre-processing tasks which are imperative to any machine learning experiment. These tasks are performed differently for each data type which means it is very important for them to be correctly configured.\n\n**Note**: If for some reason the setup get stuck on user-input, simply enter the session id in the text box","ff9cb655":"### Fine Tuned Random Forest Classifier","ee4812e3":"### K Neighbors Classifier","96d23013":"#  <span style=\"color:orange\">Introduction to PyCaret<\/span>\n\nPyCaret is an **open source low-code machine learning library** in Python that aims to reduce the hypothesis to insights cycle time in a ML experiment. It enables data scientists to perform end-to-end experiments quickly and efficiently. In comparison with the other open source machine learning libraries, PyCaret is an alternate low-code library that can be used to perform complex machine learning tasks with only few lines of code. PyCaret is simple and easy to use. All the operations performed in PyCaret are automatically stored in a custom Pipeline that is fully orchestrated for deployment. PyCaret is essentially a Python wrapper around several machine learning libraries and frameworks such as scikit-learn, XGBoost, Microsoft LightGBM, spaCy and many more.\n\nPyCaret is a deployment ready library in Python which means all the steps performed in a ML experiment can be reproduced using a pipeline that is automatically developed and orchestrated in PyCaret as you progress through the experiment. A pipeline can be saved in a binary file format that is transferable across environments.\n\nPyCaret and its Machine Learning capabilities are seamlessly integrated with environments supporting Python such as Microsoft Power BI, Tableau, Alteryx and KNIME to name a few. This gives immense power to users of these BI platforms who can now integrate PyCaret into their existing workflows and add a layer of Machine Learning with ease.\n\nPyCaret is ideal for:\n* Experienced Data Scientists who want to increase productivity.\n* Citizen Data Scientists who prefer a low code machine learning solution.\n* Students of Data Science.\n* Data Scientists and Consultants involved in building Proof of Concept projects\n\n\nIn this tutorial, we will perform a Multiclass Classification on Iris dataset. The objectives of this tutorials are:\n\n* **Setting up Environment:**  How to setup an experiment in PyCaret and get started with building multiclass models\n* **Create Model:**  How to create a model, perform stratified cross validation and evaluate classification metrics\n* **Tune Model:**  How to automatically tune the hyper-parameters of a multiclass model\n* **Plot Model:**  How to analyze model performance using various plots\n* **Finalize Model:** How to finalize the best model at the end of the experiment\n* **Predict Model:**  How to make predictions on new \/ unseen data\n* **Save \/ Load Model:**  How to save \/ load a model for future use\n\n\n\n### Please consider to upvote this tutorial if you find it useful ...","46382494":"## Fine Tune a Model\n\nWhen a model is created using the `create_model()` function it uses the default hyperparameters to train the model. In order to tune hyperparameters, the `tune_model()` function is used. This function automatically tunes the hyperparameters of a model using `Random Grid Search` on a pre-defined search space. The output prints a score grid that shows Accuracy, AUC, Recall, Precision, F1, Kappa, and MCC by fold for the best model. To use the custom search grid, you can pass `custom_grid` parameter in the `tune_model` function (see 9.2 KNN tuning below). <br\/>\n<br\/>","98e08bf6":"# Plot a Model\n\nBefore model finalization, the `plot_model()` function can be used to analyze the performance across different aspects such as AUC, confusion_matrix, decision boundary etc. This function takes a trained model object and returns a plot based on the test \/ hold-out set. \n\nThere are 15 different plots available, please see the `plot_model()` docstring for the list of available plots.\n\n\n**Note** = Here we will only plot for KNN Classifier (specifically tuned version)","27cb4f5f":"The `predict_model()` function is also used to predict on the unseen dataset. The only difference from section 11 above is that this time we will pass the `data_unseen` parameter. `data_unseen` is the variable created at the beginning of the tutorial and contains 20% (30 samples) of the original dataset which was never exposed to PyCaret. (see section 5 for explanation)","0bfa8ee9":"Once the model is loaded in the environment, you can simply use it to predict on any new data using the same `predict_model()` function. Below we have applied the loaded model to predict the same `data_unseen` that we used in section 13 above.","039fa24a":"## Libraries & Datasets\n\nPyCaret has some built-in datasets as well, you can use PyCaret's data respository to load the data using the `get_data()` function\n\n* `from pycaret.datasets import get_data`\n* `dataset = get_data('iris')`","f81b10e1":"### Fine Tuned Ridge Classifier","88f15337":"*Another* way to analyze the performance of models is to use the `evaluate_model()` function which displays a user interface for all of the available plots for a given model. It internally uses the `plot_model()` function. ","f7fec30f":"## Classification Module in PyCaret - Overview\nPyCaret's classification module (`pycaret.classification`) is a supervised machine learning module which is used for classifying the elements into binary or multinomial groups based on various techniques and algorithms. \n\nThe PyCaret classification module can be used for Binary or Multi-class classification problems. It has over **18 algorithms and 14 plots** to analyze the performance of models. Be it hyper-parameter tuning, ensembling or advanced techniques like stacking, PyCaret's classification module has it all.\n\nIn order to demonstrate the `predict_model()` function on unseen data, a sample of 30 records has been withheld from the original dataset to be used for predictions. **This should not be confused with a train\/test split as this particular split is performed to simulate a real life scenario**. Another way to think about this is that these 30 records were not available at the time when the machine learning experiment was performed.","5cd9f22b":"Notice that the Mean score of all models matches with the score printed in `compare_models()`. This is because the metrics printed in the `compare_models()` score grid are the average scores across all CV folds. Similar to `compare_models()`, if you want to change the fold parameter from the default value of 10 to a different value then you can use the `fold` parameter. For Example: `create_model('dt', fold = 5)` will create a Decision Tree Classifier using 5 fold stratified CV.","99246cc6":"The `Label` and `Score` columns are added onto the `data_unseen` set. Label is the prediction and score is the probability of the prediction. Notice that predicted results are concatenated to the original dataset while all the transformations are automatically performed in the background."}}