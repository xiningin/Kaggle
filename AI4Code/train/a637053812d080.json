{"cell_type":{"5b0fa33b":"code","dbbcf8a3":"code","a841b589":"code","d88f28c1":"code","f13f14c8":"code","bc119afb":"code","7319dd63":"code","a59cd49c":"code","06a14fd8":"code","0386835a":"code","bb492a66":"code","4889ca38":"code","14678ffb":"code","c0d18a75":"code","1acc02d6":"code","e3451061":"code","30d6b3a0":"code","78c0c80e":"code","4e61e66b":"code","c746daee":"code","dd683383":"markdown","79013cb7":"markdown","c53d4bef":"markdown","6b4de8be":"markdown","a5af8402":"markdown","c3d17e59":"markdown","52031520":"markdown","43b2a0ca":"markdown","5d671f46":"markdown","394dd57a":"markdown","a8fdf18a":"markdown","11e0bbd5":"markdown","e7a0e0e5":"markdown","507b3458":"markdown","bb8a6da1":"markdown"},"source":{"5b0fa33b":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# _______________________________\n\nsub845 = pd.read_csv(\"..\/input\/resnet34-more-augmentations-mixup-tta-inference\/submission.csv\")\n\nsub861 = pd.read_csv(\"..\/input\/inference-tpu-rfcx-audio-detection-fast\/submission.csv\")\n\nsub877 = pd.read_csv(\"..\/input\/resnet-wavenet-my-best-single-model-ensemble\/submission.csv\")\n  ","dbbcf8a3":"def generate(main, support, coeff):\n    g1 = main.copy()\n    g2 = main.copy()\n    g3 = main.copy()\n    g4 = main.copy()\n    \n    for i in main.columns[1:]:\n        lm, Is = [], []                \n        lm = main[i].tolist()\n        ls = support[i].tolist() \n        \n        res1, res2, res3, res4 = [], [], [], []          \n        for j in range(len(main)):\n            res1.append(max(lm[j] , ls[j]))\n            res2.append(min(lm[j] , ls[j]))\n            res3.append((lm[j] + ls[j]) \/ 2)\n            res4.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))\n            \n        g1[i] = res1\n        g2[i] = res2\n        g3[i] = res3\n        g4[i] = res4\n        \n    return g1,g2,g3,g4","a841b589":"def generate1(main, support, coeff):\n    \n    g = main.copy()    \n    for i in main.columns[1:]:\n        \n        res = []\n        lm, Is = [], []        \n        lm = main[i].tolist()\n        ls = support[i].tolist()  \n        \n        for j in range(len(main)):\n            res.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))            \n        g[i] = res\n        \n    return g","d88f28c1":"def drawing(main, support, generated, column_number):\n    \n    X  = main.iloc[:, column_number]\n    Y1 = support.iloc[:, column_number]\n    Y2 = generated.iloc[:, column_number]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\n\\nOn the Y axis >>> support\\n')           \n    plt.scatter(X, Y1, s=3)\n    plt.show() \n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\n\\nOn the Y axis >>> generated\\n')           \n    plt.scatter(X, Y2, s=3)\n    plt.show()     ","f13f14c8":"def drawing1(main, support, generated, column_number):\n    \n    X  = main.iloc[:, column_number]\n    Y1 = support.iloc[:, column_number]\n    Y2 = generated.iloc[:, column_number]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nBlue | X axis >> main | Y axis >> support\\n\\nOrange | X axis >> main | Y axis >> generated\\n') \n    \n    plt.scatter(X, Y1, s=3)    \n    plt.scatter(X, Y2, s=3)\n    \n    plt.show()     ","bc119afb":"a1,a2,a3,a4 = generate(sub861, sub845, 0.80)","7319dd63":"sub861.describe()","a59cd49c":"sub845.describe()","06a14fd8":"# drawing(sub861, sub845, a1, 17)\n\n# a1.describe()","0386835a":"drawing(sub861, sub845, a2, 17)\n\na2.describe()","bb492a66":"# drawing(sub861, sub845, a3, 17)\n\n# a3.describe()","4889ca38":"# drawing(sub861, sub845, a4, 17)\n\n# a4.describe()","14678ffb":"b1,b2,b3,b4 = generate(sub877, a2, 0.85)","c0d18a75":"sub877.describe()","1acc02d6":"a2.describe()","e3451061":"# drawing(sub877, a2, b1, 22)\n\n# b1.describe()","30d6b3a0":"# drawing(sub877, a2, b2, 22)\n\n# b2.describe()","78c0c80e":"# drawing(sub877, a2, b3, 22)\n\n# b3.describe()","4e61e66b":"drawing(sub877, a2, b4, 22)\n\nb4.describe()","c746daee":"sub = b4\nsub.to_csv(\"submission.csv\", index=False)\n\nb1.to_csv(\"submission1.csv\", index=False)\nb2.to_csv(\"submission2.csv\", index=False)\nb3.to_csv(\"submission3.csv\", index=False)\nb4.to_csv(\"submission4.csv\", index=False)\n\n!ls","dd683383":"## Result - [(Score: 0.877) , (Score: 0.866) >>> b4: (Score: 0.880)]\n\n## Drawing - [For example >> column:22]\n","79013cb7":"<div class=\"alert alert-success\">  \n<\/div>","c53d4bef":"# Ensembling\n","6b4de8be":"<div>\n    <h2 align=\"center\">If you find this work useful, please don't forget upvoting :)<\/h2>\n<\/div>","a5af8402":"<div>\n    <h1 align=\"center\"> < Optimizing results > <\/h1><\/h1>\n    <h2 align=\"center\">Rainforest Connection Species Audio Detection<\/h2>\n    <h3 align=\"center\">By: Somayyeh Gholami & Mehran Kazeminia<\/h3>\n<\/div>","c3d17e59":"# Submission\n","52031520":"<div class=\"alert alert-success\">  \n<\/div>","43b2a0ca":"<div class=\"alert alert-success\">  \n<\/div>","5d671f46":"## Result - [(Score: 0.861) , (Score: 0.845) >>> a2: (Score: 0.866)]\n\n## Drawing - [For example >> column:17]","394dd57a":"<div class=\"alert alert-success\">  \n<\/div>","a8fdf18a":"<div class=\"alert alert-success\">  \n<\/div>","11e0bbd5":"# Import & Data Set","e7a0e0e5":"<div class=\"alert alert-success\">  \n<\/div>","507b3458":"<div class=\"alert alert-success\">  \n<\/div>","bb8a6da1":"# Functions"}}