{"cell_type":{"53b6c124":"code","b6d7df7e":"code","d036762b":"code","3f61f244":"code","0aa3df1a":"code","ab228f8d":"code","056b14bb":"markdown","227dce4e":"markdown","5271e0a9":"markdown","dd6616de":"markdown","7c2f28de":"markdown","618b2555":"markdown"},"source":{"53b6c124":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6d7df7e":"from sklearn.preprocessing import power_transform\n\nimport seaborn as sns\n\nseed = 0\n\n# Read the data\nX = pd.read_csv('..\/input\/house-prices-data\/train.csv', index_col='Id')\n\n# Remove rows with missing target, separate target from predictors\nX.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X.SalePrice\nX.drop(['SalePrice'], axis=1, inplace=True)","d036762b":"sns.distplot(a=y, kde=True)","3f61f244":"y_box_cox = power_transform(np.expand_dims(y, axis=1), method='box-cox').flatten()\nsns.distplot(a=y_box_cox, kde=True)","0aa3df1a":"bins = np.linspace(start=-3, stop=3, num=7)\nbins","ab228f8d":"from sklearn.model_selection import train_test_split\n\ny_binned = np.digitize(y_box_cox, bins)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, stratify=y_binned, random_state=seed)","056b14bb":"Let's import our packages and dataset first. The dataset comes from a [house price prediction competition](https:\/\/www.kaggle.com\/c\/home-data-for-ml-course), in which the goal of the task is to predict the selling price for new house as accurately as possible.","227dce4e":"Lastly, we apply a technique called **stratified train-test-split** to our data, by first assigning them into their corresponding bins and then split them within each bin independently. As a result, both training and validation set will contain points with all ranges of prices.","5271e0a9":"Before we partition our data into training set and validation set, let's first take a look at the distribution of the target attribute `SalePrice`.\n\nAs you can see, the prices of houses are highly skewed to the right. We'd better not to randomly split the data, otherwise there exists a potential risk that all the extreme data points lying on the right tail might be allocated **solely** to the validation set, which will deteriorate our training process.","dd6616de":"Now the `SalePrice` looks pretty much like a normal distribution. Then we can make some bins for this normal distribution and partition our data according to those bins. For simplicity, I only create 8 bins, each of which corresponds to data points less than $-3\\sigma$, between $-3\\sigma$ and $-2\\sigma$, between $-2\\sigma$ and $-1\\sigma$, ..., between $2\\sigma$ and $3\\sigma$, and finally beyond $3\\sigma$. Of course, you see the patterns.","7c2f28de":"Instead, we can apply [Box-Cox Transformation](https:\/\/en.wikipedia.org\/wiki\/Power_transform) to the `SalePrice` first. For those of you who are not familiar with this transformation, Box-Cox is simply a family of functions that try to transform the distribution of input data points to normal-like shape by fitting the best $\\lambda$ via maximum likelihood estimation. In fact, the $\\log$ transformation is simply a special case of Box-Cox when $\\lambda = 0$.","618b2555":"This notebook ends here and please kindly give a vote if you find it helpful. You are also welcome to check my other notebooks."}}