{"cell_type":{"9815107f":"code","a01e2b3e":"code","9baec498":"code","7b6700ec":"code","af797095":"code","2a29e9f6":"code","ba8b8b39":"code","aa8c303a":"code","4f059da3":"code","c3e4b101":"code","ad112eb1":"code","9686436d":"code","8225e008":"code","18815d3b":"code","532ad679":"code","cfb98231":"code","283d8757":"code","2bfb6088":"code","26c201d3":"code","4c9be743":"markdown","7674b47e":"markdown"},"source":{"9815107f":"import shutil\nimport matplotlib.pyplot as plt\nimport random\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport os\nimport zipfile\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.image import ImageDataGenerator","a01e2b3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# import cv2\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9baec498":"import zipfile\nfrom os import getcwd\ntrain = f\"{getcwd()}\/..\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip\"\n","7b6700ec":"# os.mkdir('\/kaggle\/working\/train')\nlocal_train = train\nz = zipfile.ZipFile(\"\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip\", 'r')\nz.extractall('\/kaggle\/working')\nz.close()","af797095":"local_train = train\nz = zipfile.ZipFile(\"\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/test.zip\", 'r')\nz.extractall('\/kaggle\/working')\nz.close()","2a29e9f6":"#v 3.0 r1.0\nsource = \"\/kaggle\/working\/train\/\"\nos.mkdir(\"\/kaggle\/working\/training\")\nos.mkdir(\"\/kaggle\/working\/training\/cats\")\nos.mkdir(\"\/kaggle\/working\/training\/dogs\")\nos.mkdir(\"\/kaggle\/working\/dev\")\nos.mkdir(\"\/kaggle\/working\/dev\/cats\")\nos.mkdir(\"\/kaggle\/working\/dev\/dogs\")\n\ndataset=[]\nfor i in os.listdir(source):\n    dataset.append(i)\n\nshuffled_set = random.sample(dataset, len(dataset))\n\ndev_length = int(len(dataset)*0.1)\ntrain_length = int(len(dataset) - dev_length) \ntraining_dirs = shuffled_set[:train_length]\ndev_dirs = shuffled_set[-dev_length:]\n\nfor i in training_dirs:\n    if 'cat' in i:\n        shutil.copyfile(source + i, \"\/kaggle\/working\/training\/cats\/\" + i)\n    else:\n        shutil.copyfile(source + i, \"\/kaggle\/working\/training\/dogs\/\" + i)\nfor i in dev_dirs:\n    if 'cat' in i:\n        shutil.copyfile(source + i, \"\/kaggle\/working\/dev\/cats\/\" + i)\n    else:\n        shutil.copyfile(source + i, \"\/kaggle\/working\/dev\/dogs\/\" + i)","ba8b8b39":"#V 3.0 r1.0\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3,3), input_shape = (224,224,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(32, (3,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation = 'relu'),\n    tf.keras.layers.Dense(1, activation = 'sigmoid')\n])\nmodel.summary()\nmodel.compile(loss = 'binary_crossentropy', optimizer='adam', metrics=['acc'])","aa8c303a":"print(train_length, dev_length)","4f059da3":"# V 3.0 r1.0\ntrain_datagen = ImageDataGenerator(rescale = 1.0\/ 255.0)\ntrain_generator = train_datagen.flow_from_directory(\n    \"\/kaggle\/working\/training\",\n    batch_size = 10,\n    class_mode = 'binary',\n    target_size = (224,224)\n)\ndev_datagen = ImageDataGenerator(rescale = 1.0\/ 255.0)\ndev_generator = dev_datagen.flow_from_directory(\n    \"\/kaggle\/working\/dev\",\n    batch_size = 10,\n    class_mode = 'binary',\n    target_size = (224,224)\n)\nhistory = model.fit_generator(train_generator, epochs = 10, verbose =1, validation_data = dev_generator)","c3e4b101":"%matplotlib inline\nimport matplotlib.image  as mpimg\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(acc))\n\n#______________________\n#Accuracy comparision\n#______________________\n\nplt.plot(epochs, acc, 'r', \"Training Accuracy\")\nplt.plot(epochs, val_acc,'b', \"dev Accuracy\")\nplt.title(\"Training and dev Accuracy\")\nplt.legend(loc=0)\nplt.figure()\n\n#_____________________________\n#Loss comparision\n#_____________________________\n\nplt.plot(epochs, loss, 'r', \"Training loss\")\nplt.plot(epochs, val_loss, 'b', \"Dev loss\")\nplt.title(\"Training and dev loss\")\nplt.legend(loc=0)\n# plt.figure()","ad112eb1":"model.save('fmodel.h5')","9686436d":"os.mkdir(\"\/kaggle\/working\/testing\")\nos.mkdir(\"\/kaggle\/working\/testing\/test\")\nfor i in os.listdir(\"\/kaggle\/working\/test\"):\n    shutil.copyfile(\"\/kaggle\/working\/test\/\" + i, \"\/kaggle\/working\/testing\/test\/\" + i)","8225e008":"test_datagen = ImageDataGenerator(rescale = 1.0\/ 255.0)\ntest_generator = test_datagen.flow_from_directory(\n    \"\/kaggle\/working\/testing\",\n    target_size = (224,224),\n    batch_size = 10,\n    class_mode = 'binary'\n)\npreds = model.predict(test_generator)","18815d3b":"preds[0]","532ad679":"# load_m = tf.keras.models.load_model('\/kaggle\/input\/my-model\/fmodel.h5')","cfb98231":"# load_m.summary()","283d8757":"# pred = load_m.predict_generator(test_generator, max_queue_size = 10)","2bfb6088":"# model.save_weights('smodel_weights.h5')\n# model.save('smodel.h5')","26c201d3":"counter = range(1, 12500 + 1)\nsolution = pd.DataFrame({\"id\": counter, \"label\":list(preds)})\ncols = ['label']\n\nfor col in cols:\n    solution[col] = solution[col].map(lambda x: str(x).lstrip('[').rstrip(']')).astype(float)\n\nsolution.to_csv(\"dogsVScats.csv\", index = False)","4c9be743":"**For extracting train images**","7674b47e":"**For extracting test images**"}}