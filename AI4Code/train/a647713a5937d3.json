{"cell_type":{"c4e194cc":"code","af190a1a":"code","c97aec20":"code","171254f3":"code","34349f3c":"code","8fada1b9":"code","55c014ab":"code","182c1dd6":"code","de65ad08":"code","9b7902a3":"code","8f685810":"code","66063b9a":"code","b2270afe":"code","359be068":"code","d8ff10dc":"code","efbc6905":"markdown","3a243b05":"markdown","d405adbf":"markdown","f2e35908":"markdown","9b933066":"markdown","5f740b61":"markdown","ce928dea":"markdown","0a074c7f":"markdown","ca97bb10":"markdown","0ee50e5c":"markdown","7433f430":"markdown","df94f009":"markdown"},"source":{"c4e194cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","af190a1a":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import StandardScaler","c97aec20":"train_path = '..\/input\/home-data-for-ml-course\/train.csv'\ntest_path = '..\/input\/home-data-for-ml-course\/test.csv'\n\nraw_data = pd.read_csv(train_path)\ntest_data = pd.read_csv(test_path)\n\nraw_data.head()\n","171254f3":"X1 = raw_data.iloc[:,:-1]\nY = raw_data.iloc[:,-1]\n\nX2 = test_data.iloc[:,:]\n\nX_full = pd.concat(objs=[X1, X2], axis=0)\nX_full.describe(include = 'all')\n\nprint(X_full.shape)\n","34349f3c":"null_columns=X_full.columns[X_full.isnull().any()]\n\nX_full[null_columns].isnull().sum()","8fada1b9":"X_full[null_columns].dtypes","55c014ab":"Object_type = [\n'MSZoning','Alley','Utilities','Exterior1st','Exterior2nd','MasVnrType','BsmtQual',\n'BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Electrical'\n,'KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish',\n'GarageQual','GarageCond','PoolQC','Fence','MiscFeature','SaleType']\n\nX_full.fillna( {x: 'NA' for x in Object_type}, inplace = True) \n\nint_type = ['LotFrontage','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF',\n            'TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageYrBlt','GarageCars','GarageArea']\n\nX_full.fillna( {x: 0 for x in int_type}, inplace = True) \n\n\nX_full[null_columns].isnull().sum()\n","182c1dd6":"numeric_list = list(X_full.select_dtypes(include = [np.number]).columns.values)\n\nscaler = StandardScaler()\nX_full[numeric_list] = scaler.fit_transform(X_full[numeric_list])","de65ad08":"X_full.head()","9b7902a3":"X_full_dummies = pd.get_dummies(X_full , drop_first=True)\nX_full_dummies.head()","8f685810":"X_train_full = X_full_dummies.iloc[:1460, 1:]\nX_test_full = X_full_dummies.iloc[1460:, 1:]\n\nprint(X_train_full.shape)\nprint(X_test_full.shape)","66063b9a":"from sklearn.linear_model import Lasso\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV\n\nlasso = Lasso()\n\nparameters_val = {'alpha': [145, 150,155,157,250] }\n\nlasso_regresor = GridSearchCV(lasso , parameters_val , scoring = 'neg_mean_absolute_error' , cv = 10)\n\nlasso_regresor.fit(X_train_full,Y)\n\nprint(lasso_regresor.best_params_)\nprint(lasso_regresor.best_score_)","b2270afe":"lassofit = Lasso(alpha = 155)\nlassofit.fit(X_train_full,Y)\n\ntest_preds = lassofit.predict(X_test_full)","359be068":"output = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\noutput.head()","d8ff10dc":"output.to_csv('submission.csv', index=False)","efbc6905":"### Fill the missing values with default for categorical variables and 0 for numerical variables","3a243b05":"## Encode the Categorical variable using get_dummies","d405adbf":"# Concatenate the test and train dataframe for preprocessing","f2e35908":"# Fit the Lasso","9b933066":"## Checking for best parameter value using GridSearchCV","5f740b61":"# Import the Train and Test data","ce928dea":"# Submit the results to csv","0a074c7f":"# Scale the Numerical Data","ca97bb10":"# Separate the Train and Test Data","0ee50e5c":"# Import the relevant Libraries","7433f430":"## Finding out the null columns","df94f009":"### Describe the column"}}