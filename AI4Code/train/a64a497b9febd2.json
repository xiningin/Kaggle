{"cell_type":{"14ec6580":"code","0240ceef":"code","b45d1ed4":"code","e9c1ebe8":"code","1434a630":"code","c44adc16":"code","7058c994":"code","ea910f02":"code","aea366ec":"code","af6f5234":"code","c9aa3d0c":"code","f40e1363":"code","ceea2ac5":"code","b886426a":"code","7ceb1274":"code","6e9eb5c1":"code","f06dec44":"code","f3f7e22c":"code","c2138a81":"code","bc147bdf":"code","48d5f754":"code","772eece3":"code","b4f299d0":"code","972ba0f0":"code","bca8991d":"code","a93a1d08":"code","d2bf7b71":"code","a0826ef6":"code","4c41b4f4":"code","79e10aac":"code","9816d1da":"code","25318458":"code","e7c0f96e":"code","1e662e6f":"code","e32a3685":"code","35b7de6d":"code","ffe0f8f5":"code","9adb674b":"code","cb7d971f":"code","84833bae":"code","41b83f24":"code","c8d2117a":"code","6c98df4d":"code","bf07626f":"code","88833926":"code","902a6884":"code","843122c7":"code","5c1a1810":"code","1097a80b":"code","cd700acc":"code","a8ad3bda":"code","8479e8fe":"code","95b45dc6":"code","e515e1a2":"code","4dd3219e":"code","dad875ca":"code","816bb481":"code","dc59ee3b":"code","279a4fb0":"code","a3b5410f":"code","fd837d3e":"code","b7c39835":"code","b37608be":"code","afb0eeca":"code","79d9c80f":"code","a9209882":"code","76b617fb":"code","fc520cba":"code","2146f7b4":"code","7b1bd1a0":"code","6d27e8be":"code","4fba54fa":"code","9ad9fec5":"code","f085601a":"code","06bf7089":"code","3dcd969b":"code","2a39f7b7":"code","36d28b87":"code","7758485c":"code","67f0a7bf":"code","6296676d":"code","99c00867":"code","dbdb3144":"code","2f6fbbc1":"code","9b1fc5f9":"code","b46e76c2":"code","b8ce9cb6":"code","21bfa921":"code","f5ac9d38":"code","13c33e58":"code","687c5056":"code","495e209a":"code","ac91726f":"code","016deba3":"code","f2a377b6":"code","4982d867":"code","952f79d3":"code","7781fe0d":"code","dc63edf5":"code","d6f3c888":"code","e6945ddc":"code","d4eedcd8":"code","aea6a744":"code","9c1edee8":"code","d9a96b06":"code","c0b98886":"code","d527d70d":"code","64b698d0":"code","fbfd9edd":"code","34d2149d":"code","ddafbc51":"code","74e9d244":"code","9f97845e":"code","90c5e61d":"code","abeee66d":"code","7de65001":"code","3e2bfb7f":"code","b08b49dd":"code","a64dd180":"code","4d2274ce":"code","76acb41d":"code","6040c72a":"code","79d190a7":"code","b7526ea2":"code","79c46674":"code","d63950bf":"code","85ceb7cb":"code","5abdaa27":"code","91c54f67":"code","7de044fd":"code","70ac2e4d":"code","6610526d":"markdown","d63207b4":"markdown","ddc7085e":"markdown","b5ae64fd":"markdown","3805991f":"markdown","ad0caeb1":"markdown","52816b9a":"markdown","de2a5ebc":"markdown","fa0ca1be":"markdown","110883be":"markdown","dfef2b07":"markdown","4b92b6a0":"markdown","581e890f":"markdown","8b7a3287":"markdown","64da0de2":"markdown","96fb34bc":"markdown","a13a2e07":"markdown","3ae6415c":"markdown","183fb401":"markdown","4a3c7a45":"markdown","952ba548":"markdown","d5a8439e":"markdown","5f7c8ccd":"markdown","ea7b6809":"markdown","bcb97176":"markdown","eef1c2da":"markdown","b9f08f99":"markdown","c00f70c6":"markdown","4ea5bfde":"markdown","693bc119":"markdown","192b0b6a":"markdown","0f5e25c5":"markdown","7c2f8d10":"markdown","719ae0ae":"markdown"},"source":{"14ec6580":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0240ceef":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import RFE\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\nimport warnings","b45d1ed4":"warnings.filterwarnings('ignore')\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)","e9c1ebe8":"housing = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nhousing_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(housing.info())\nprint(housing.shape)","1434a630":"housing_test.shape","c44adc16":"testId = housing_test['Id']","7058c994":"housing.head(10)","ea910f02":"housing.describe().T","aea366ec":"housing.columns","af6f5234":"missing_info = pd.DataFrame(round(100*(housing.isnull().sum()\/len(housing.index)),2))\nmissing_info = missing_info.loc[missing_info[0]!=0]\nmissing_info","c9aa3d0c":"missing_info_test = pd.DataFrame(round(100*(housing_test.isnull().sum()\/len(housing_test.index)),2))\nmissing_info_test = missing_info_test.loc[missing_info_test[0]!=0]\nmissing_info_test","f40e1363":"all_data = pd.concat([housing.drop(['SalePrice'],axis=1),housing_test])\nall_data.info()","ceea2ac5":"#dropping cols with large missing values\nmissing_val_cols = ['MiscFeature','Fence','PoolQC','Alley','FireplaceQu']\nhousing.drop(missing_val_cols,inplace=True,axis=1)\nhousing_test.drop(missing_val_cols,inplace=True,axis=1)\nprint(housing.shape)\nprint(housing_test.shape)\n\nmissing_info = pd.DataFrame(round(100*(housing.isnull().sum()\/len(housing.index)),2))\nmissing_info = missing_info.loc[missing_info[0]!=0]\nmissing_info","b886426a":"garageCols = housing.columns[housing.columns.str.startswith('Gar')]\nfor col in garageCols:\n    if (col != \"GarageYrBlt\") & (col != \"GarageArea\"):\n        print(\"===={}====\".format(col))\n        print(housing[col].value_counts(dropna=False))\n        print(\"\\n\")","7ceb1274":"garageCols = housing_test.columns[housing_test.columns.str.startswith('Gar')]\nfor col in garageCols:\n    if (col != \"GarageYrBlt\") & (col != \"GarageArea\"):\n        print(\"===={}====\".format(col))\n        print(housing_test[col].value_counts(dropna=False))\n        print(\"\\n\")","6e9eb5c1":"#checking null values\n\nhousing.loc[housing['GarageType'].isnull(),housing.columns.str.startswith('Gar')]","f06dec44":"housing_test.loc[housing_test['GarageType'].isnull(),housing_test.columns.str.startswith('Gar')]","f3f7e22c":"housing.loc[housing['GarageType'].isnull(),['GarageType','GarageFinish','GarageQual','GarageCond']] = 'NA'\nhousing_test.loc[housing_test['GarageType'].isnull(),['GarageType','GarageFinish','GarageQual','GarageCond']] = 'NA'","c2138a81":"housing_test.loc[housing_test.GarageFinish.isnull()]","bc147bdf":"housing_test.loc[housing_test.GarageFinish.isnull(),'GarageFinish'] = 'Unf'\nhousing_test.loc[housing_test.GarageCond.isnull(),'GarageCond'] = 'TA'\nhousing_test.loc[housing_test.GarageQual.isnull(),'GarageQual'] = 'TA'","48d5f754":"housing_test.groupby(by = 'GarageType')['GarageArea'].mean()","772eece3":"housing_test.loc[housing_test.GarageArea.isnull(),'GarageArea'] = 412.2","b4f299d0":"housing_test.loc[housing_test.GarageType == 'Detchd','GarageCars'].mode()","972ba0f0":"housing_test.loc[housing_test.GarageCars.isnull(),'GarageCars'] = 1","bca8991d":"all_data.GarageFinish.value_counts(dropna=False)","a93a1d08":"housing['GarageYrBlt'] = housing[['GarageYrBlt','YearBuilt']].apply(lambda x: x['YearBuilt'] if np.isnan(x['GarageYrBlt']) else x['GarageYrBlt'],axis=1)\nhousing_test['GarageYrBlt'] = housing_test[['GarageYrBlt','YearBuilt']].apply(lambda x: x['YearBuilt'] if np.isnan(x['GarageYrBlt']) else x['GarageYrBlt'],axis=1)\n","d2bf7b71":"bsmtCols = housing.columns[housing.columns.str.startswith('Bsmt')]\nfor col in bsmtCols:\n    if (col != \"BsmtFinSF1\") & (col != \"BsmtFinSF2\") & (col != \"BsmtUnfSF\"):\n        print(\"===={}====\".format(col))     \n        print(housing[col].value_counts(dropna=False))\n        print(\"\\n\")","a0826ef6":"bsmtCols = housing_test.columns[housing_test.columns.str.startswith('Bsmt')]\nfor col in bsmtCols:\n    if (col != \"BsmtFinSF1\") & (col != \"BsmtFinSF2\") & (col != \"BsmtUnfSF\"):\n        print(\"===={}====\".format(col))     \n        print(housing_test[col].value_counts(dropna=False))\n        print(\"\\n\")","4c41b4f4":"housing.loc[housing['BsmtQual'].isnull(),housing.columns.str.startswith('Bsmt')]","79e10aac":"housing_test.loc[housing_test['BsmtQual'].isnull(),housing_test.columns.str.contains('Bsmt')]","9816d1da":"housing.loc[housing['BsmtQual'].isnull(),['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2']] = 'NA'","25318458":"housing_test.loc[((housing_test['BsmtQual'].isnull()) & (housing_test['BsmtCond'].isnull())) ,['BsmtQual']] = 'NA'\n","e7c0f96e":"housing_test.loc[((housing_test['BsmtExposure'].isnull()) & (housing_test['BsmtCond'].isnull())),['BsmtExposure']] = 'NA'","1e662e6f":"housing_test.loc[housing_test['BsmtCond'].isnull(),['BsmtCond']] = 'NA'\nhousing_test.loc[housing_test['BsmtFinType1'].isnull(),['BsmtFinType1']] = 'NA'\nhousing_test.loc[housing_test['BsmtFinType2'].isnull(),['BsmtFinType2']] = 'NA'\nhousing_test.loc[housing_test['BsmtFinSF2'].isnull(),['BsmtFinSF2']] = 0.0\nhousing_test.loc[housing_test['BsmtFinSF1'].isnull(),['BsmtFinSF1']] = 0.0\nhousing_test.loc[housing_test['BsmtUnfSF'].isnull(),['BsmtUnfSF']] = 0.0\nhousing_test.loc[housing_test['TotalBsmtSF'].isnull(),['TotalBsmtSF']] = 0.0\nhousing_test.loc[housing_test['BsmtFullBath'].isnull(),['BsmtFullBath']] = 0.0\nhousing_test.loc[housing_test['BsmtHalfBath'].isnull(),['BsmtHalfBath']] = 0.0","e32a3685":"all_data['BsmtQual'].value_counts()","35b7de6d":"housing_test[housing_test['BsmtQual'].isnull()]","ffe0f8f5":"housing_test.loc[(housing_test['Neighborhood']=='IDOTRR') &(housing_test.LotConfig=='Corner') & (housing_test.MSZoning=='C (all)')]","9adb674b":"housing_test.loc[housing_test['BsmtQual'].isnull(),['BsmtQual']] = 'TA'","cb7d971f":"housing.loc[housing['BsmtExposure'].isnull(),housing.columns.str.startswith('Bsmt')]","84833bae":"housing_test.loc[housing_test['BsmtExposure'].isnull(),housing_test.columns.str.startswith('Bsmt')]","41b83f24":"print(housing_test['BsmtExposure'].value_counts())","c8d2117a":"housing_test.loc[housing_test['BsmtExposure'].isnull(),['BsmtExposure']] = 'No'\nhousing.loc[housing['BsmtExposure'].isnull(),['BsmtExposure']] = 'No'","6c98df4d":"housing.loc[housing['BsmtFinType2'].isnull(),housing.columns.str.startswith('Bsmt')]","bf07626f":"housing_test.loc[housing_test['BsmtFinType2'].isnull(),housing_test.columns.str.startswith('Bsmt')]","88833926":"all_data['BsmtFinType2'].value_counts()","902a6884":"pd.DataFrame(housing.loc[housing['BsmtFinType1']=='GLQ'].groupby(by=['BsmtFinType1','BsmtFinType2'])['BsmtFinSF2'].describe())","843122c7":"sns.boxplot(y=\"BsmtFinSF2\",x=\"BsmtFinType2\",data=housing)","5c1a1810":"housing.BsmtFinType2 = housing.BsmtFinType2.fillna('BLQ')","1097a80b":"sns.boxplot(y = housing['LotFrontage'])","cd700acc":"housing['LotFrontage'].describe(percentiles = (0.25,0.4,0.5,0.75,0.8,0.9))","a8ad3bda":"plt.hist(housing['LotFrontage'],bins=50)","8479e8fe":"print(all_data['LotFrontage'].mean())\nprint(all_data['LotFrontage'].median())","95b45dc6":"housing.loc[pd.isnull(housing['LotFrontage']),'LotFrontage'] = 68.0\nhousing_test.loc[pd.isnull(housing_test['LotFrontage']),'LotFrontage'] = 68.0","e515e1a2":"all_data['Electrical'].value_counts(dropna=False)","4dd3219e":"housing.loc[housing['Electrical'].isnull(),'Electrical'] = 'SBrKr'","dad875ca":"housing.loc[housing['MasVnrType'].isnull()]","816bb481":"housing_test['MasVnrType'].value_counts(dropna=False)","dc59ee3b":"housing.loc[housing['MasVnrType']=='None',['MasVnrType','MasVnrArea']].head()","279a4fb0":"#replacing missing MasVnrType with None and MasVnrArea with 0.0\nhousing.loc[housing['MasVnrArea'].isnull(),['MasVnrArea']] = 0.0\nhousing.loc[housing['MasVnrType'].isnull(),['MasVnrType']] = 'None'\n\nhousing_test.loc[housing_test['MasVnrArea'].isnull(),['MasVnrArea']] = 0.0\nhousing_test.loc[housing_test['MasVnrType'].isnull(),['MasVnrType']] = 'None'\n","a3b5410f":"missing_info = pd.DataFrame(housing.isnull().sum())\nmissing_info = missing_info.loc[missing_info[0]!=0]\nmissing_info","fd837d3e":"missing_info = pd.DataFrame(housing_test.isnull().sum())\nmissing_info = missing_info.loc[missing_info[0]!=0]\nmissing_info","b7c39835":"housing_test['MSZoning'].value_counts(dropna=False)","b37608be":"housing_test.loc[housing_test['MSZoning'].isnull(),'MSZoning'] = 'RL'","afb0eeca":"housing_test[housing_test['Utilities'].isnull()]","79d9c80f":"all_data['Utilities'].value_counts()","a9209882":"housing_test.loc[housing_test['Utilities'].isnull(),'Utilities'] = 'AllPub'","76b617fb":"all_data['Exterior2nd'].value_counts(dropna=False)\n","fc520cba":"housing_test['Exterior1st'].value_counts(dropna=False)\nhousing_test[housing_test['Exterior1st'].isnull()]","2146f7b4":"all_data.loc[((all_data.Neighborhood == 'Edwards') & (all_data.RoofStyle == 'Flat'))]","7b1bd1a0":"housing_test.loc[housing_test['Exterior1st'].isnull(),'Exterior1st'] = 'BrkComm'\nhousing_test.loc[housing_test['Exterior2nd'].isnull(),'Exterior2nd'] = 'Brk Cmn'","6d27e8be":"all_data['KitchenQual'].value_counts()","4fba54fa":"housing_test.loc[housing_test['KitchenQual'].isnull(),'KitchenQual'] = 'TA'","9ad9fec5":"all_data['Functional'].value_counts()","f085601a":"housing_test.loc[housing_test['Functional'].isnull(),'Functional'] = 'Typ'","06bf7089":"all_data['SaleType'].value_counts()","3dcd969b":"housing_test.loc[housing_test['SaleType'].isnull(),'SaleType'] = 'WD'","2a39f7b7":"missing_info = pd.DataFrame(housing_test.isnull().sum())\nmissing_info = missing_info.loc[missing_info[0]!=0]\nmissing_info","36d28b87":"for i in ['MSSubClass','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','GarageCars']:\n  housing[i] = housing[i].astype(str)\n  housing_test[i] = housing_test[i].astype(str)\n\nhousing['GarageYrBlt'] = housing['GarageYrBlt'].astype(int)\nhousing_test['GarageYrBlt'] = housing_test['GarageYrBlt'].astype(int)\n#housing['OverallQual'] = housing['OverallQual'].astype(str)\n#housing['OverallCond'] = housing['OverallCond'].astype(str)","7758485c":"yearCols = ['YearBuilt','YearRemodAdd','GarageYrBlt','YrSold']\n#Coverting year cols \nhousing['AgeBuilt'] = max(all_data['YearBuilt']) - housing['YearBuilt']\nhousing['AgeRemodAdd'] = max(all_data['YearRemodAdd']) - housing['YearRemodAdd']\nhousing['AgeGarageBlt'] = max(all_data['GarageYrBlt']) - housing['GarageYrBlt']\nhousing['AgeSold'] = max(all_data['YrSold']) - housing['YrSold']\nhousing[['AgeBuilt','AgeRemodAdd','AgeGarageBlt','AgeSold']].describe()\nhousing.drop(['YearBuilt','YearRemodAdd','GarageYrBlt','YrSold'],axis=1,inplace=True)\n\nhousing_test['AgeBuilt'] = max(all_data['YearBuilt']) - housing_test['YearBuilt']\nhousing_test['AgeRemodAdd'] = max(all_data['YearRemodAdd']) - housing_test['YearRemodAdd']\nhousing_test['AgeGarageBlt'] = max(all_data['GarageYrBlt']) - housing_test['GarageYrBlt']\nhousing_test['AgeSold'] = max(all_data['YrSold']) - housing_test['YrSold']\nhousing_test[['AgeBuilt','AgeRemodAdd','AgeGarageBlt','AgeSold']].describe()\nhousing_test.drop(['YearBuilt','YearRemodAdd','GarageYrBlt','YrSold'],axis=1,inplace=True)","67f0a7bf":"housing.drop(['Id'],axis=1,inplace=True)\nhousing_test.drop(['Id'],axis=1,inplace=True)\ncatColsData = housing.select_dtypes(include=['object'])\ncatCols = catColsData.columns\nnumCols = list(set(housing.columns) - set(catCols))\nlen(catCols)","6296676d":"# checking target variable\nhousing['SalePrice'].describe(percentiles = (0.25,0.4,0.5,0.75,0.8,0.9,0.95))\nplt.hist(housing['SalePrice'],bins=50)","99c00867":"housing['SalePrice'] = housing['SalePrice'].astype(float)\nhousing['SalePrice'] = np.log(housing['SalePrice'])\nhousing['SalePrice'].describe()","dbdb3144":"sns.distplot(housing['SalePrice'],bins=50)","2f6fbbc1":"housing['SalePrice'].head()","9b1fc5f9":"len(catCols)","b46e76c2":"def boxplot_catVariables(cols):\n    plt.figure(figsize=(20, 40))\n    for i in range(0,len(cols)):\n        plt.subplot(15,5,i+1)\n        sns.boxplot(x = cols[i], y = 'SalePrice', data = housing)\n    plt.tight_layout()\n    plt.show()\n    \nboxplot_catVariables(catCols[:-1])","b8ce9cb6":"def countplot_catVariables(cols):\n    plt.figure(figsize=(20, 40))\n    for i in range(0,len(cols)):\n        plt.subplot(14,3,i+1)\n        sns.countplot(x = cols[i], data = housing)\n    plt.show()\n    \n#countplot_catVariables(catCols[:-1])","21bfa921":"#housing[numCols].corr()","f5ac9d38":"plt.figure(figsize=(20, 20))\nsns.heatmap(housing[numCols].corr())","13c33e58":"# Dropping highly corelated variables\n#housing.drop(['BsmtUnfSF','TotRmsAbvGrd','GarageCars','AgeGarageBlt'],axis=1,inplace=True)\n#housing_test.drop(['BsmtUnfSF','TotRmsAbvGrd','GarageCars','AgeGarageBlt'],axis=1,inplace=True)\n","687c5056":"print(housing.shape)\nprint(housing_test.shape)\n","495e209a":"catCols","ac91726f":"all_data_dummies = pd.concat([housing[catCols],housing_test[catCols]])","016deba3":"all_data_dummies.shape","f2a377b6":"all_data_dummies = pd.get_dummies(all_data_dummies[catCols],drop_first=True)\nall_data_dummies.head()","4982d867":"housing_test_dummies = all_data_dummies[1460:]\nhousing_dummies = all_data_dummies[0:1460]","952f79d3":"housing_dummies.info()","7781fe0d":"print(housing_test_dummies.info())\nprint(housing_dummies.info())\n","dc63edf5":"housing = housing.drop(catCols,inplace=False,axis=1)\nhousing_test = housing_test.drop(catCols,inplace=False,axis=1)\n\nhousing.head()\n","d6f3c888":"housing = pd.concat([housing,housing_dummies],axis=1)\nhousing_test = pd.concat([housing_test,housing_test_dummies],axis=1)","e6945ddc":"housing.shape","d4eedcd8":"X = housing.drop(['SalePrice'],axis=1,inplace=False)\ny = housing['SalePrice']\nX.head()","aea6a744":"y.head()","9c1edee8":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=100)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\nhousing_test_scaled = scaler.transform(housing_test)","d9a96b06":"X_train.shape","c0b98886":"housing_test.shape","d527d70d":"X_train.shape","64b698d0":"X_train[:10]","fbfd9edd":"#lm = LinearRegression(alpha=500)\n#ridge.fit(X_train,y_train)\n#rfe = RFE(ridge,37)\n#rfe.fit(X_train,y_train)","34d2149d":"#rfeCols = list(X.columns[rfe.support_])\n#rfeCols","ddafbc51":"#X_rfe = X[rfeCols]\n#X_train,X_test,y_train,y_test = train_test_split(X[rfeCols],y,test_size=0.3,random_state=100)\n\n\n#scaler = StandardScaler()\n#X_train = scaler.fit_transform(X_train)\n#X_test = scaler.transform(X_test)","74e9d244":"params = {'alpha':[0.1,\n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,20,50,100, 200, 500,600,700,800,1000]}\n\nridge = Ridge()\nfolds = KFold(n_splits=5,shuffle=True,random_state=101)\n\nmodel_cv = GridSearchCV(estimator = ridge,\n                       param_grid = params,\n                       scoring = 'neg_mean_squared_error',\n                       cv = folds,\n                       return_train_score = True,\n                       verbose =1)\n\nmodel_cv.fit(X_train,y_train)","9f97845e":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results.head()","90c5e61d":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('int32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], np.sqrt(-cv_results['mean_train_score']))\nplt.plot(cv_results['param_alpha'], np.sqrt(-cv_results['mean_test_score']))\nplt.xlabel('alpha')\nplt.ylabel('RMSE')\nplt.title(\"RMSE and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\nplt.show()","abeee66d":"print(model_cv.best_params_['alpha'])\nprint(np.sqrt(-model_cv.best_score_))","7de65001":"alpha = model_cv.best_params_['alpha']\nridge = Ridge(alpha = alpha)\nridge.fit(X_train,y_train)\n#ridge.coef_\ny_train_pred = ridge.predict(X_train) \ny_test_pred = ridge.predict(X_test)\nprint(\"Training r2: {}\".format(round(r2_score(y_train,y_train_pred),3)))\nprint(\"Training RMSE: {}\".format(round(np.sqrt(mean_squared_error(y_train,y_train_pred)),3)))\nprint(\"Testing r2: {}\".format(round(r2_score(y_test,y_test_pred),3)))\nprint(\"Testing RMSE: {}\".format(round(np.sqrt(mean_squared_error(y_test,y_test_pred)),3)))","3e2bfb7f":"coefs = pd.Series(ridge.coef_, index = X.columns)\ncoefs.sort_values(ascending = False).head()","b08b49dd":"plt.figure(figsize=(10,10))\nimp_coefs = pd.concat([coefs.sort_values().head(10),\n                     coefs.sort_values().tail(10)])\nimp_coefs.plot(kind = \"barh\", color='yellowgreen')\n\nplt.xlabel(\"ridge coefficient\", weight='bold')\nplt.title(\"Feature importance in the ridge Model\", weight='bold')\nplt.show()","a64dd180":"final_ridge_pred = np.exp(ridge.predict(housing_test_scaled))\nridge_submission = pd.DataFrame({\n        \"Id\": testId,\n        \"SalePrice\": final_ridge_pred\n    })\nridge_submission.to_csv(\"ridge_submission.csv\", index=False)\nridge_submission.head()","4d2274ce":"lasso = Lasso()\n\nparams = {'alpha':[0.0001,0.0005,0.0011, 0.001, 0.01,0.02,0.03, 0.05, 0.1, \n 0.2]}\n\n# cross validation\nmodel_cv = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'neg_mean_squared_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \n\nmodel_cv.fit(X_train, y_train) ","76acb41d":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results.head()","6040c72a":"# plotting mean test and train scoes with alpha \ncv_results['param_alpha'] = cv_results['param_alpha'].astype('float32')\n\n# plotting\nplt.plot(cv_results['param_alpha'], np.sqrt(-cv_results['mean_train_score']))\nplt.plot(cv_results['param_alpha'], np.sqrt(-cv_results['mean_test_score']))\nplt.xlabel('alpha')\nplt.ylabel('RMSE')\nplt.title(\"RMSE and alpha\")\nplt.legend(['train score', 'test score'], loc='upper left')\nplt.show()","79d190a7":"print(model_cv.best_params_)\nprint(np.sqrt(-model_cv.best_score_))","b7526ea2":"alpha =model_cv.best_params_['alpha']\nlasso = Lasso(alpha = alpha)\nlasso.fit(X_train,y_train)\ny_train_pred = lasso.predict(X_train)\ny_test_pred = lasso.predict(X_test)\nprint(\"Training r2: {}\".format(round(r2_score(y_train,y_train_pred),3)))\nprint(\"Training RMSE: {}\".format(round(np.sqrt(mean_squared_error(y_train,y_train_pred)),3)))\nprint(\"Testing r2: {}\".format(round(r2_score(y_test,y_test_pred),3)))\nprint(\"Testing RMSE: {}\".format(round(np.sqrt(mean_squared_error(y_test,y_test_pred)),3)))","79c46674":"sum(lasso.coef_!=0)","d63950bf":"coefs = pd.Series(lasso.coef_, index = X.columns)\ncoefs.sort_values(ascending = False).head()","85ceb7cb":"plt.figure(figsize=(15,15))\n\nimp_coefs = pd.concat([coefs.sort_values().head(20),\n                     coefs.sort_values().tail(16)])\nimp_coefs.plot(kind = \"barh\", color='yellowgreen')\n\nplt.xlabel(\"Lasso coefficient\", weight='bold')\nplt.title(\"Feature importance in the Lasso Model\", weight='bold')\nplt.show()","5abdaa27":"final_lasso_pred = np.exp(lasso.predict(housing_test_scaled))\nlasso_submission = pd.DataFrame({\n        \"Id\": testId,\n        \"SalePrice\": final_lasso_pred\n    })\nlasso_submission.to_csv(\"lasso_submission.csv\", index=False)\nlasso_submission.head()","91c54f67":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\n\nparam_grid = {\n    'max_depth': [20,30,40],\n    'min_samples_leaf': [4,5,6],\n    'min_samples_split': [4,5,6],\n    'n_estimators': [100,200],\n    'max_features': [100,150,200]\n}\n\nrf_reg = GridSearchCV(rf,\n                      param_grid, \n                      cv = 5, \n                      n_jobs =10,\n                     verbose=1,\n                     scoring = 'neg_mean_squared_error')\n#rf_reg.fit(X_train, y_train)\n\n#print(rf_reg.best_estimator_)\n#best_estimator=rf_reg.best_estimator_\n","7de044fd":"rf_model = RandomForestRegressor(\n                                  min_samples_leaf =4,\n                                  min_samples_split= 4,\n                                  n_estimators=200,\n                                  max_features=150,\n                                  max_depth=20)\nrf_model.fit(X_train,y_train)\ny_pred_train = rf_model.predict(X_train)\ny_pred_test = rf_model.predict(X_test)\n\nprint('Root Mean Square Error train = ' + str(np.sqrt(mean_squared_error(y_train, y_pred_train))))\nprint('Root Mean Square Error test = ' + str(np.sqrt(mean_squared_error(y_test, y_pred_test)))) ","70ac2e4d":"final_rf_pred = np.exp(rf_model.predict(housing_test_scaled))\nrf_submission = pd.DataFrame({\n        \"Id\": testId,\n        \"SalePrice\": final_rf_pred\n    })\nrf_submission.to_csv(\"rf_submission.csv\", index=False)\nrf_submission.head()","6610526d":"#### Treating BsmtExposure","d63207b4":"### Treating *Functional*","ddc7085e":"It does have other values of basement. Replacing the missing value with No - No Exposure instead of NA as per the data dictionary","b5ae64fd":"We noticed that all the values that were missing for `LotFrontage` - (Linear feet of street connected to property) have `Paved` Street (Type of road access to property).\nTherefore, replacing the missing values with the median value of Paved Streets.","3805991f":"#### Treating garage related missing values","ad0caeb1":"## Ridge Regression","52816b9a":"#### Treating MasVnrType","de2a5ebc":"## Lasso Regression","fa0ca1be":"#### Treating Electrical","110883be":"#### Treating missing values for `LotFrontage`","dfef2b07":"## Reading and Understanding Data","4b92b6a0":"There is one row where BsmtCond and BsmtExposure is not available but other basement details are available. Lets keep this row for now and replacing other missing values for basement with NA as No Basement as mentioned in Data Dictionary\n","581e890f":"Replacing GarageYrBlt with YearBuilt values and putting it 0 might skew the age of Garage","8b7a3287":"## Data cleaning and EDA\n\n- Missing Value Treatment","64da0de2":"#### Inference: \nWe notice that the data is skewed. Skewness in the data is because of the presence of outliers.\nTo handle these outlier we choose not to delete as the houses with higher sales price are indispensable.\nTranforming the Values in SalePrice between 0 to 1  will help in normalizing the data without losing any information.\nLets use sigmoid function to transform our target variable","96fb34bc":"- Best value of alpha for ridge regression model is 500","a13a2e07":"#### Visualizing Categortical Variables","3ae6415c":"#### Treating BsmtFinType2","183fb401":"## Exploratory Data Analysis","4a3c7a45":"#### Inferences:\n- For the properties where garageType is NaN,the value for GarageCars and GarageCars is 0.\n- From this we can infer that these properties do not have a garage of its own. \n- Therefore, instead of deleting these rows, replacing the NaN values with 'NA' for No Garage as described in the data dictionary\n- For continuous variable 'GarageYrBlt' missing value will be replaced with 0. (Year column will be used to calculate age of the garage if we replace with max date, it will be considered as newly constructed depending on age. Therefore using 0.)","952ba548":"Based on the value of BsmtFinType1 (GLQ), and BsmtFinSF2(479) replacing missing value for BsmtFinType2 with 'BLQ'.","d5a8439e":"Inferences: Some of the highly correlated variables are '\n- BsmtFinSF1 and BsmtUnfSF\n- TotalRoomsAbvGround and GrLivArea\n- Garage Area and Garage Cars\n- Sale Price is highly corelated\n    - Total rooms Above Ground\n    - Overall Quality\n    - Ground Living Area\n    - Total Bsmnt Surface Area","5f7c8ccd":"- Data type check","ea7b6809":"#### Checking the skewness","bcb97176":"It cant be replaced with 'Unf' as we see that it has BsmtFinSF2 (type 2 finished square feet) value associated.","eef1c2da":"- Looking at the above data for neighbourhood 'Edwards' and exterior quality, the missing Exterior value will be replaced by 'BrkComm'","b9f08f99":"### Treating *KitchenQual*","c00f70c6":"#### Treating BsmtQual","4ea5bfde":"## RandomForestRegressor","693bc119":"#### Treating basement related missing values","192b0b6a":"## Data Preparation","0f5e25c5":"- Create dummy variables for categorical data","7c2f8d10":"- Replacing with mean Garage Area of Garage Type 'Detached'","719ae0ae":"- Derived Variables"}}