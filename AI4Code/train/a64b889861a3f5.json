{"cell_type":{"7d780f89":"code","55af10dc":"code","8f4c9948":"code","36073225":"code","41ab83e6":"code","cbfbe68e":"code","83363373":"code","ae4ed393":"code","5fd8d559":"code","493a6632":"code","eba97c65":"code","19d8b77b":"code","c3ded694":"code","db11aa48":"code","25de4998":"code","39ac8e42":"code","74fc3073":"markdown","351061f1":"markdown","7765c59f":"markdown","8c132585":"markdown","8520d0a3":"markdown","1070e021":"markdown","00b1134f":"markdown","12039dc5":"markdown","15c757a9":"markdown","4d2b2eb1":"markdown","11fe4b69":"markdown","c9fd07c0":"markdown","f1be0531":"markdown","4ca234a8":"markdown","df997e57":"markdown","5e5f8d0a":"markdown","10b54e64":"markdown","b2ca9850":"markdown","e4911194":"markdown","104dddf2":"markdown","bc567b8d":"markdown","72fa6465":"markdown"},"source":{"7d780f89":"from IPython.display import YouTubeVideo\nYouTubeVideo('6vYJyOGKCHE', width=800, height=450)","55af10dc":"!pip install kaggle-environments --upgrade --quiet","8f4c9948":"from kaggle_environments import make, evaluate\nenv = make(\"halite\", debug=True)\nenv.run([\"random\", \"random\", \"random\", \"random\"])\nenv.render(mode=\"ipython\", width=800, height=600)","36073225":"from kaggle_environments import make\nfrom kaggle_environments.envs.halite.helpers import *\n\nboard_size = 5\nenvironment = make(\"halite\", \n                   configuration={\n                       \"size\": board_size, \n                       \"startingHalite\": 1000})\nagent_count = 2\nenvironment.reset(agent_count)\nstate = environment.state[0]\n\nboard = Board(state.observation, \n              environment.configuration)\n\ndef move_ships_north_agent(\n    observation, configuration):\n    board = Board(\n        observation, configuration)\n    current_player = board.current_player\n    for ship in current_player.ships:\n        ship.next_action = ShipAction.NORTH\n    return current_player.next_actions\n\nenvironment.reset(agent_count)\nenvironment.run([move_ships_north_agent, \"random\"])\nenvironment.render(mode=\"ipython\", width=500, height=450)","41ab83e6":"%%writefile submission.py\nimport time\nimport copy\nimport sys\nimport math\nimport collections\nimport pprint\nimport numpy as np\nimport scipy.optimize\nimport scipy.ndimage\nfrom kaggle_environments.envs.halite.helpers import *\nimport kaggle_environments\nimport random\n\nCONFIG_MAX_SHIPS=20\nall_actions=[ShipAction.NORTH, ShipAction.EAST,ShipAction.SOUTH,ShipAction.WEST]\nall_dirs=[Point(0,1), Point(1,0), Point(0,-1), Point(-1,0)]\nstart=None\nnum_shipyard_targets=4\nsize=None\nship_target={}\nme=None\ndid_init=False\nquiet=False\nC=None\nclass Obj:\n  pass\nturn=Obj()\nturns_optimal=np.array(\n  [[0, 2, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8],\n   [0, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7],\n   [0, 0, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7],\n   [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6],\n   [0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6],\n   [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5],\n   [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4],\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3],\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2],\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n\n#### Functions\ndef print_enemy_ships(board):\n  print('\\nEnemy Ships')\n  for ship in board.ships.values():\n    if ship.player_id != me.id:\n      print('{:6}  {} halite {}'.format(ship.id,ship.position,ship.halite))\n      \ndef print_actions(board):\n  print('\\nShip Actions')\n  for ship in me.ships:\n    print('{:6}  {}  {} halite {}'.format(ship.id,ship.position,ship.next_action,ship.halite))\n  print('Shipyard Actions')\n  for sy in me.shipyards:\n    print('{:6}  {}  {}'.format(sy.id,sy.position,sy.next_action))\n\ndef print_none(*args):\n  pass\n\ndef compute_max_ships(step):\n  if step < 200:\n    return CONFIG_MAX_SHIPS\n  elif step < 300:\n    return CONFIG_MAX_SHIPS-2\n  elif step < 350:\n    return CONFIG_MAX_SHIPS-4\n  else:\n    return CONFIG_MAX_SHIPS-5\n\ndef set_turn_data(board):\n  turn.num_ships=len(me.ships)\n  turn.max_ships=compute_max_ships(board.step)\n  turn.total_halite=me.halite\n  turn.halite_matrix=np.reshape(board.observation['halite'], (board.configuration.size,board.configuration.size))\n  turn.num_shipyards=len(me.shipyards)\n  turn.EP,turn.EH,turn.ES=gen_enemy_halite_matrix(board)\n  turn.taken={}\n  turn.last_episode = (board.step == (board.configuration.episode_steps-2))\n  \ndef init(obs,config):\n  global size\n  global print\n  if hasattr(config,'myval') and config.myval==9 and not quiet:\n    pass\n  else:\n    print=print_none\n    pprint.pprint=print_none\n  size = config.size\n\ndef limit(x,a,b):\n  if x<a:\n    return a\n  if x>b:\n    return b\n  return x\n  \ndef num_turns_to_mine(C,H,rt_travel):\n  if C==0:\n    ch=0\n  elif H==0:\n    ch=turns_optimal.shape[0]\n  else:\n    ch=int(math.log(C\/H)*2.5+5.5)\n    ch=limit(ch,0,turns_optimal.shape[0]-1)\n  rt_travel=int(limit(rt_travel,0,turns_optimal.shape[1]-1))\n  return turns_optimal[ch,rt_travel]\n\ndef halite_per_turn(carrying, halite,travel,min_mine=1):\n  turns=num_turns_to_mine(carrying,halite,travel)\n  if turns<min_mine:\n    turns=min_mine\n  mined=carrying+(1-.75**turns)*halite\n  return mined\/(travel+turns), turns\n  \ndef move(pos, action):\n  ret=None\n  if action==ShipAction.NORTH:\n    ret=pos+Point(0,1)\n  if action==ShipAction.SOUTH:\n    ret=pos+Point(0,-1)\n  if action==ShipAction.EAST:\n    ret=pos+Point(1,0)\n  if action==ShipAction.WEST:\n    ret=pos+Point(-1,0)\n  if ret is None:\n    ret=pos\n  return ret % size\n\ndef dirs_to(p1, p2, size=21):\n  deltaX, deltaY=p2 - p1\n  if abs(deltaX)>size\/2:\n    #we wrap around\n    if deltaX<0:\n      deltaX+=size\n    elif deltaX>0:\n      deltaX-=size\n  if abs(deltaY)>size\/2:\n    #we wrap around\n    if deltaY<0:\n      deltaY+=size\n    elif deltaY>0:\n      deltaY-=size\n  ret=[]\n  if deltaX>0:\n    ret.append(ShipAction.EAST)\n  if deltaX<0:\n    ret.append(ShipAction.WEST)\n  if deltaY>0:\n    ret.append(ShipAction.NORTH)\n  if deltaY<0:\n    ret.append(ShipAction.SOUTH)\n  if len(ret)==0:\n    ret=[None]\n  return ret, (deltaX,deltaY)\n\ndef shipyard_actions():\n  for sy in me.shipyards:\n    if turn.num_ships < turn.max_ships:\n      if turn.total_halite >= 500 and sy.position not in turn.taken:\n        sy.next_action = ShipyardAction.SPAWN\n        turn.taken[sy.position]=1\n        turn.num_ships+=1\n        turn.total_halite-=500\n\ndef gen_enemy_halite_matrix(board):\n  EP=np.zeros((size,size))\n  EH=np.zeros((size,size))\n  ES=np.zeros((size,size))\n  for id,ship in board.ships.items():\n    if ship.player_id != me.id:\n      EH[ship.position.y,ship.position.x]=ship.halite\n      EP[ship.position.y,ship.position.x]=1\n  for id, sy in board.shipyards.items():\n    if sy.player_id != me.id:\n      ES[sy.position.y,sy.position.x]=1\n  return EP,EH,ES\n\ndef dist(a,b):\n  action,step=dirs_to(a, b, size=21) \n  return abs(step[0]) + abs(step[1])\n\ndef nearest_shipyard(pos):\n  mn=100\n  best_pos=None\n  for sy in me.shipyards:\n    d=dist(pos, sy.position)\n    if d<mn:\n      mn=d\n      best_pos=sy.position\n  return mn,best_pos\n  \ndef assign_targets(board,ships):\n  old_target=copy.copy(ship_target)\n  ship_target.clear()\n  if len(ships)==0:\n    return\n  halite_min=50\n  pts1=[]\n  pts2=[]\n  for pt,c in board.cells.items():\n    assert isinstance(pt,Point)\n    if c.halite > halite_min:\n      pts1.append(pt)\n  for sy in me.shipyards:\n    for i in range(num_shipyard_targets):\n      pts2.append(sy.position)\n  C=np.zeros((len(ships),len(pts1)+len(pts2)))\n  for i,ship in enumerate(ships):\n    for j,pt in enumerate(pts1+pts2):\n      d1=dist(ship.position,pt)\n      d2,shipyard_position=nearest_shipyard(pt)\n      if shipyard_position is None:\n        d2=1\n      my_halite=ship.halite\n      if j < len(pts1):\n        v, mining=halite_per_turn(my_halite,board.cells[pt].halite, d1+d2)\n      else:\n        if d1>0:\n          v=my_halite\/d1\n        else:\n          v=0\n      if board.cells[pt].ship and board.cells[pt].ship.player_id != me.id:\n        enemy_halite=board.cells[pt].ship.halite\n        if enemy_halite <= my_halite:\n          v = -1000\n        else:\n          if d1<5:\n            v+= enemy_halite\/(d1+1)\n      C[i,j]=v\n  print('C is {}'.format(C.shape))\n  row,col=scipy.optimize.linear_sum_assignment(C, maximize=True)\n  pts=pts1+pts2\n  for r,c in zip(row,col):\n    ship_target[ships[r].id]=pts[c]\n  print('\\nShip Targets')\n  print('Ship      position          target')\n  for id,t in ship_target.items():\n    st=''\n    ta=''\n    if board.ships[id].position==t:\n      st='MINE'\n    elif len(me.shipyards)>0 and t==me.shipyards[0].position:\n      st='SHIPYARD'\n    if id not in old_target or old_target[id] != ship_target[id]:\n      ta=' NEWTARGET'\n    print('{0:6}  at ({1[0]:2},{1[1]:2})  assigned ({2[0]:2},{2[1]:2}) h {3:3} {4:10} {5:10}'.format(\n      id, board.ships[id].position, t, board.cells[t].halite,st, ta))\n\n  return\n\ndef make_avoidance_matrix(myship_halite):\n  filter=np.array([[0,1,0],[1,1,1],[0,1,0]])\n  bad_ship=np.logical_and(turn.EH <= myship_halite,turn.EP)\n  avoid=scipy.ndimage.convolve(bad_ship, filter, mode='wrap',cval=0.0)\n  avoid=np.logical_or(avoid,turn.ES)\n  return avoid\n\ndef make_attack_matrix(myship_halite):\n  attack=np.logical_and(turn.EH > myship_halite,turn.EP)\n  return attack\n\ndef get_max_halite_ship(board, avoid_danger=True):\n  mx=-1\n  the_ship=None\n  for ship in me.ships:\n    x=ship.position.x\n    y=ship.position.y\n    avoid=make_avoidance_matrix(ship.halite)\n    if ship.halite>mx and (not avoid_danger or not avoid[y,x]):\n      mx=ship.halite\n      the_ship=ship\n  return the_ship\n\ndef remove_dups(p):\n  ret=[]\n  for x in p:\n    if x not in ret:\n      ret.append(x)\n  return ret\n\ndef matrix_lookup(matrix,pos):\n  return matrix[pos.y,pos.x]\n\ndef ship_converts(board):\n  if turn.num_shipyards==0 and not turn.last_episode:\n    mx=get_max_halite_ship(board)\n    if mx is not None:\n      if mx.halite + turn.total_halite > 500:\n        mx.next_action=ShipAction.CONVERT\n        turn.taken[mx.position]=1\n        turn.num_shipyards+=1\n        turn.total_halite-=500\n  for ship in me.ships:\n    if ship.next_action:\n      continue\n    avoid=make_avoidance_matrix(ship.halite)\n    z=[matrix_lookup(avoid,move(ship.position,a)) for a in all_actions]\n    if np.all(z) and ship.halite > 500:\n      ship.next_action=ShipAction.CONVERT\n      turn.taken[ship.position]=1\n      turn.num_shipyards+=1\n      turn.total_halite-=500\n      print('ship id {} no escape converting'.format(ship.id))\n    if turn.last_episode and ship.halite > 500:\n      ship.next_action=ShipAction.CONVERT\n      turn.taken[ship.position]=1\n      turn.num_shipyards+=1\n      turn.total_halite-=500\n      \ndef ship_moves(board):\n  ships=[ship for ship in me.ships if ship.next_action is None]\n  assign_targets(board,ships)\n  actions={}\n  for ship in ships:\n    if ship.id in ship_target:\n      a,delta = dirs_to(ship.position, ship_target[ship.id],size=size)\n      actions[ship.id]=a\n    else:\n      actions[ship.id]=[random.choice(all_actions)]\n      \n  for ship in ships:\n    action=None\n    x=ship.position\n    avoid=make_avoidance_matrix(ship.halite)\n    attack=make_attack_matrix(ship.halite)\n    action_list=actions[ship.id]+[None]+all_actions\n    for a in all_actions:\n      m=move(x,a)\n      if attack[m.y,m.x]:\n        print('ship id {} attacking {}'.format(ship.id,a))\n        action_list.insert(0,a)\n        break\n    action_list=remove_dups(action_list)\n    for a in action_list:\n      m=move(x,a)\n      if avoid[m.y,m.x]:\n        print('ship id {} avoiding {}'.format(ship.id,a))\n      if m not in turn.taken and not avoid[m.y,m.x]:\n        action=a\n        break\n    ship.next_action=action\n    turn.taken[m]=1\n    \ndef agent(obs, config):\n  global size\n  global start\n  global prev_board\n  global me\n  global did_init\n  #Do initialization 1 time\n  start_step=time.time()\n  if start is None:\n    start=time.time()\n  if not did_init:\n    init(obs,config)\n    did_init=True\n  board = Board(obs, config)\n  me=board.current_player\n  set_turn_data(board)\n  print('==== step {} sim {}'.format(board.step,board.step+1))\n  print('ships {} shipyards {}'.format(turn.num_ships,turn.num_shipyards))\n  print_enemy_ships(board)\n  ship_converts(board)\n  ship_moves(board)\n  shipyard_actions()\n  print_actions(board)\n  print('time this turn: {:8.3f} total elapsed {:8.3f}'.format(time.time()-start_step,time.time()-start))\n  return me.next_actions\n","cbfbe68e":"env.run([\"\/kaggle\/working\/submission.py\", \"\/kaggle\/working\/submission.py\"])\n\nenv.run([\"\/kaggle\/working\/submission.py\", \"random\"])\nenv.render(mode=\"ipython\", width=800, height=600)","83363373":"import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, roc_curve\nimport matplotlib.pyplot as plt","ae4ed393":"# assuming we have times damaged, time alive and speed of clicking as Nx3 matrix\n# and we are given some simple feedback 0 to degrade difficulty, 1 to upgrade\n# we will skip scaling step for now\nseed = 13\nN = 1000\ngame_stats = np.random.randint(0, 10, N*3).reshape(N, 3)\ntarget = np.random.choice([0, 1], size=N).reshape(N, 1)\nplt.hist(target);","5fd8d559":"X_train, X_test, y_train, y_test = train_test_split(\n    game_stats, target, test_size=0.25, random_state=seed)\n\nmodel = LogisticRegression()\nmodel = model.fit(X_train, y_train)\npreds = model.predict(X_test)\naccuracy_score(y_test, preds)","493a6632":"plt.plot(roc_curve(y_test, preds)[0], label='false positive',);\nplt.plot(roc_curve(y_test, preds)[1], label='false negative');\nplt.legend();","eba97c65":"import tensorflow as tf\nimport tensorflow.keras as K","19d8b77b":"inputs = K.Input(shape=(3,))\nx = K.layers.Dense(32, activation=tf.nn.relu)(inputs)\nx = K.layers.Dense(64, activation=tf.nn.relu)(x)\noutputs = K.layers.Dense(1, activation=tf.nn.softmax)(x)\nmodel = K.Model(inputs=inputs, outputs=outputs)","c3ded694":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nepochs = 5\nhistory = model.fit(X_train, y_train, epochs=epochs)","db11aa48":"preds = model.predict(X_test)\naccuracy_score(y_test, preds)","25de4998":"import pandas as pd\nfrom surprise import SVD, accuracy, Reader, dataset\nfrom surprise.model_selection import cross_validate\n\nratings_dict = {'userID': np.random.randint(0, 1000, 100),\n                'itemID': np.random.randint(0, 100, 100), # say it is going to be some metric, hp, time_alive etc\n                'rating': np.random.randint(0, 5, 100)}\ndf = pd.DataFrame.from_dict(ratings_dict)\n\nreader = Reader(line_format='user item rating', rating_scale=(1, 5))","39ac8e42":"class UserSet(dataset.DatasetAutoFolds):\n    def __init__(self, df, reader):\n        self.raw_ratings = [(uid, iid, r, None) for (uid, iid, r) in\n                            zip(df['userID'], df['itemID'], df['rating'])]\n        self.reader=reader\n\ndata = UserSet(df, reader)\nalgo = SVD()\nperf = cross_validate(algo, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)\nprint(perf)","74fc3073":"#### \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 (\u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u0438\u043b\u0438 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435) \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 CUDA \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f Tensorflow <a href='https:\/\/developer.nvidia.com\/cuda-toolkit-archive'> \u0437\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 CUDA toolkit<\/a>","351061f1":"### \u0418\u0418 \u043d\u0435 \u0438\u0434\u0435\u0430\u043b\u0435\u043d, \u043d\u043e \u043e\u043d \u0443\u0447\u0438\u0442\u044c\u0441\u044f\n\n\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 kaggle \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043b\u0435\u0433\u043a\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0430\u0440\u043e\u0439 \u0438\u0434\u0435\u0439 \u043a\u0430\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0430\u0433\u0435\u043d\u0442\u043e\u0432. \u042f \u043d\u0435 \u0431\u0443\u0434\u0443 \u043d\u0443\u0434\u0438\u0442\u044c, \u043d\u043e \u043f\u0430\u0440\u0443 \u0441\u043b\u043e\u0432 \u043e\u0431 \u0438\u0433\u0440\u0435 Halite:\n> Halite by Two Sigma (\"Halite\") is a resource management game where you build and control a small armada of ships. Your algorithms determine their movements to collect halite, a luminous energy source. The most halite at the end of the match wins, but it's up to you to figure out how to make effective and efficient moves. You control your fleet, build new ships, create shipyards, and mine the regenerating halite on the game board.\n\n(\u041c\u043e\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434)\n> Halite \u043e\u0442 Two Sigma (\"Halite\") \u0438\u0433\u0440\u0430 \u0441 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0442\u044b \u0441\u0442\u0440\u043e\u0438\u0448\u044c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0430\u0440\u043c\u0430\u0434\u0443 \u043a\u043e\u0440\u0430\u0431\u043b\u0435\u0439. \u0422\u0432\u043e\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0438\u0445 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u0430 \u0445\u0430\u043b\u0438\u0442\u043e\u0432, \u0431\u043b\u0435\u0441\u0442\u044f\u0449\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u044d\u043d\u0435\u0440\u0433\u0438\u0438. \u041f\u043e\u0431\u0435\u0436\u0434\u0430\u0435\u0442 \u043c\u0430\u0442\u0447 \u0442\u043e\u0442, \u043a\u0442\u043e \u0441\u043e\u0431\u0440\u0430\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0445\u0430\u043b\u0438\u0442\u043e\u0432, \u043d\u043e \u0442\u044b \u0440\u0435\u0448\u0430\u0435\u0448\u044c \u043a\u0430\u043a\u0438\u0435 \u0445\u043e\u0434\u044b \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435. \u0422\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0448\u044c \u043a\u043e\u0440\u0430\u0431\u043b\u0451\u043c, \u0441\u0442\u0440\u043e\u0438\u0448\u044c \u043d\u043e\u0432\u044b\u0435, \u0441\u043e\u0437\u0434\u0430\u0451\u0448\u044c \u0441\u0442\u0430\u043d\u0446\u0438\u0438 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0448\u044c \u0432\u043e\u0437\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0445\u0430\u043b\u0438\u0442\u044b \u043d\u0430 \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u0434\u043e\u0441\u043a\u0435.","7765c59f":"## \u041a\u0443\u0434\u0430 \u0434\u0430\u043b\u044c\u0448\u0435?\n\u0410 \u0434\u0430\u043b\u044c\u0448\u0435 \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0434\u0435\u043f\u043b\u043e\u0439\u043c\u0435\u043d\u0442\u0443: \u0443\u0437\u043d\u0430\u0442\u044c \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u041c\u041e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0430 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 (\u043d\u0435 \u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u043c\u043e\u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u0443\u0442\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u0441\u043b\u043e\u0436\u043d\u0435\u0435, \u0447\u0435\u043c \u044f \u043e\u0436\u0438\u0434\u0430\u043b\u0430) \u0438 \u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0441\u0430\u043c\u0438\u043c \u043a\u0430\u043a \u043d\u0430\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u0430\u0433\u0435\u043d\u0442\u043e\u0432 \u0438 \u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c \u0441\u0435\u0431\u044f \u0438 \u0441\u0432\u043e\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u044b.\n\n\u041d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043c\u043e\u0433\u0443 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u0432\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u044b\u0445 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0430 \u0434\u043b\u044f \u0434\u0435\u043f\u043b\u043e\u0439\u043c\u0435\u043d\u0442\u0430: \n* <a href='https:\/\/ironpython.net\/'>IronPython<\/a> (\u041f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e Python 2.7)\n* \u0421\u0432\u044f\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <a href='https:\/\/github.com\/Unity-Technologies\/ml-agents'>ml-agents<\/a> \u0434\u043b\u044f Unity \u0438 tensorflow","8c132585":"### \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 3. \u041a\u043e\u043b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f\n\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u043a\u0430\u043a \u043d\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u043f\u043e \u043c\u043d\u0435\u043d\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u0430, \u044d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0438\u0437 \u0432\u0441\u0435\u0445). \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0433\u0440 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0435\u0439 (\u0432 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0435 \u044e\u0437\u0435\u0440-\u044e\u0437\u0435\u0440), \u0430 \u0432\u043e\u0442 \u043e\u0442\u0441\u0442\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442. \u0414\u0432\u0430 \u0441\u043b\u043e\u0432\u0430 \u043e \u0441\u0430\u043c\u043e\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0435: \u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446.\n<a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/i.ibb.co\/4M6prjD\/latentfactor.png\" alt=\"latentfactor\" border=\"0\"><\/a>","8520d0a3":"**\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:** \u041f\u0440\u043e\u0441\u0442\u043e\u0439 API, \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0430\u0436\u0435 \u0441 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043c\u0430\u0442\u0440\u0438\u0446<br>\n**\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:** \u041c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0443\u0436\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0438 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u0430\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043c\u044b \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c)","1070e021":"### \u0416\u0435\u0441\u0442\u043e\u043a\u0430\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441 \u041c\u0430\u0440\u0441\u0430, \u0414\u0430\u0442\u0430 \u0421\u0430\u0438\u043d\u0442\u0438\u0441\u0442\u044b \u0441 \u0412\u0435\u043d\u0435\u0440\u044b\n\n\u0422\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u043d\u0430 \u0441\u0442\u044b\u043a\u0435 \u0434\u0432\u0443\u0445 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0444\u0435\u0440 \u0441 \u0431\u0430\u0433\u0430\u0436\u0435\u043c \u043b\u044e\u0431\u0438\u043c\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432: \u0434\u0430\u0442\u0430 \u0441\u0430\u0438\u043d\u0442\u0438\u0441\u0442\u044b \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u044f\u0437\u044b\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Python, R \u0438\u043b\u0438 Scala. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0438\u0433\u0440 \u0447\u0430\u0441\u0442\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u044e\u0442 Unity.\n\n\u041d\u0443 \u0447\u0442\u043e \u0436, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u0430\u0437\u0438\u0441\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u043e \u0437\u0430\u043c\u0435\u0447\u0430\u044e: <br>1) \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043d\u0438\u043a\u0443\u0434\u0430 \u043d\u0435 \u0443\u0445\u043e\u0434\u044f\u0442 <br>2) \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u044b \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e, \u043f\u043e\u0442\u043e\u043c\u0443 \u0432 \u043d\u0438\u0445 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043f\u0440\u043e\u0447\u044c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u043b\u0438\u0431\u043e \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438.","00b1134f":"\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0438\u0441\u043a\u0443\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u043b\u0435\u043a\u0442 \u0432\u0441\u0451 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043d\u0430\u0448\u0443 \u0436\u0438\u0437\u043d\u044c. \u0420\u0435\u043a\u043b\u0430\u043c\u0430 \u0432 Google? \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 Amazon \u0438\u043b\u0438 Netflix? \u0412 \u043a\u043e\u043d\u0446\u0435 \u043a\u043e\u043d\u0446\u043e\u0432, \u0443\u043b\u0443\u0447\u0449\u0435\u043d\u043d\u044b\u0435 \u043e\u043f\u044b\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u0430\u0439\u0442\u043e\u0432 \u0438 \u0438\u0433\u0440? \u0414\u0443\u043c\u0430\u044e, \u043e\u0442\u0432\u0435\u0442 \u0443\u0436\u0435 \u043f\u043e\u043d\u044f\u0442\u0435\u043d. \u041a\u0441\u0442\u0430\u0442\u0438, \u043c\u044b \u0443\u0436\u0435 \u0432\u0438\u0434\u0435\u043b\u0438, \u043a\u0430\u043a \u0418\u0418 \u043f\u043e\u0431\u0435\u0434\u0438\u043b \u0433\u0440\u0430\u043d\u0434\u043c\u0430\u0441\u0442\u0435\u0440\u0430 \u0448\u0430\u0445\u043c\u0430\u0442 \u0413\u0430\u0440\u0440\u0438 \u041a\u0430\u0441\u043f\u0430\u0440\u043e\u0432\u0430. \u0421\u043b\u0435\u0434\u0443\u044e\u044e\u0449\u0435\u0435 \u0432\u0438\u0434\u0435\u043e \u0434\u0430\u0441\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0439.","12039dc5":"### \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 2. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c tensorflow \u043c\u043d\u043e\u0433\u043e\u0441\u043b\u043e\u0439\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e) mlagents \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c","15c757a9":"### \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 4. \u041a\u043e\u043f\u0430\u0435\u043c \u0433\u043b\u0443\u0431\u0436\u0435 \u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u0434\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435\u043c\n\u041b\u0443\u0447\u0449\u0438\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 pytorch. \u0412 \u043a\u0440\u0430\u0442\u0446\u0435, \u0430\u0433\u0435\u043d\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u044c\u0441\u044f \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\n<a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/i.ibb.co\/M1myPzd\/agent-diagram.png\" alt=\"agent-diagram\" border=\"0\"><\/a>","4d2b2eb1":"<a href=\"https:\/\/ibb.co\/sRC0PBY\"><img src=\"https:\/\/i.ibb.co\/dMtdchY\/imgonline-com-ua-twotoone-2-UPOwp-B0-K2v.png\" alt=\"imgonline-com-ua-twotoone-2-UPOwp-B0-K2v\" border=\"0\"><\/a>","11fe4b69":"*\u041e\u0442 \u0430\u0432\u0442\u043e\u0440\u0430: \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u0432 \u0432\u0438\u0434\u0443 \u0441\u0432\u043e\u0435\u0433\u043e \u043a\u043e\u043c\u0444\u043e\u0440\u0442\u0430 \u0438 \u0442\u0435\u0440\u043c\u0438\u043d\u043e\u043b\u043e\u0433\u0438\u0438, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 <a href='https:\/\/www.kaggle.com\/erelin6613\/ai-in-game-industry'>\u0437\u0434\u0435\u0441\u044c<\/a>*","c9fd07c0":"**\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:** \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 GPU<br>\n**\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:** \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f (\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438\/\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0433\u043e \u0432\u044b\u0445\u043e\u0434\u0430), \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0443\u0447\u0438\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.\n","f1be0531":"\u041d\u0430\u0448\u0430 \u0438\u0433\u0440\u0430 \u0440\u0430\u0437\u0432\u0438\u043b\u0430\u0441\u044c \u0431\u044b\u0441\u0442\u0440\u043e \u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0435\u0451 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0440\u043e\u0441\u043b\u0430. \u041f\u043e \u043c\u0435\u0440\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043c\u0435\u0442\u0440\u0438\u043a \u0438 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u0431\u0443\u0434\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0441\u0442\u0438. \u041f\u043e\u0442\u043e\u043c\u0443 \u0443\u0436\u0435 \u0441\u0435\u0439\u0447\u0430\u0441 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u0434\u0443\u043c\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0445 \u0430\u0433\u0435\u043d\u0442\u043e\u0432.\n\n\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0438\u0434\u0435\u044f \u0438\u0433\u0440\u044b \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0438 \u0441 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u043c\u0438 \u0430\u0433\u0435\u043d\u0442\u0430\u043c\u0438 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u043c\u0438: \u0438\u0433\u0440\u043e\u043a \u0438\u043c\u0435\u0435\u0442 \u0448\u0430\u043d\u0441 \u0432\u043e\u0441\u043a\u0440\u0435\u0441\u043d\u0443\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0437 \u0437\u0430 5 \u0441\u0435\u043a\u0443\u043d\u0434 \u0434\u043e \u0435\u0433\u043e \u0441\u043c\u0435\u0440\u0442\u0438 \u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0445\u043e\u0434 \u0441\u043e\u0431\u044b\u0442\u0438\u0439. \u042d\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u043e\u0434\u043d\u0430\u043a\u043e.","4ca234a8":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u043e\u0438\u0442 \u0432\u0437\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u043d\u0430 \u043e\u0431\u044b\u0447\u043d\u0443\u044e \u0438\u0433\u0440\u0443, \u0441\u044b\u0433\u0440\u0430\u043d\u043d\u0443\u044e \u0441\u043b\u0443\u0447\u0430\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f.","df997e57":"**\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430:** \u041f\u0440\u043e\u0441\u0442\u043e\u0439 API, \u043e\u0431\u044b\u0447\u043d\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b \"\u0441\u043b\u043e\u0432\u0438\u0442\u044c\" \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u0441\u0432\u044f\u0437\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445<br>\n**\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438:** \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f (\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438), \u0434\u043e\u043b\u044c\u0448\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430, \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430 \u0441\u0430\u0438\u043d\u0442\u0438\u0441\u0442\u043e\u0432 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 (\u0438\u043b\u0438 \u0436\u0435 \u0434\u0435\u043b\u0430\u0435\u0442 \u0438\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043b\u043e\u0436\u043d\u0435\u0435)","5e5f8d0a":"### \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c anaconda \u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","10b54e64":"### \u041d\u0430\u0448 \u043b\u044e\u0431\u0438\u043c\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442: TimeHack","b2ca9850":"\u041d\u0430 \u0437\u0430\u043c\u0435\u0442\u043a\u0443: \"\u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\" \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 scikit-surprise \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u043a\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0441 \u043d\u0443\u043b\u044f (\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0432 \u0442\u043e\u043c \u0436\u0435 \u0441\u0430\u043c\u043e\u043c tensorflow, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043a\u0430 \u0447\u0442\u043e \u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043f\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0435 \u0434\u0435\u043f\u043b\u043e\u0439\u043c\u0435\u043d\u0442\u0430). \u0412 \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u0445 Spark \u0444\u0440\u0435\u0439\u043c\u0444\u043e\u0440\u043a \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441, \u043e\u0434\u043d\u0430\u043a\u043e \u043f\u0443\u0442\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043a\u0430 \u0435\u0449\u0451 \u043d\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u044b.","e4911194":"\u0422\u0430\u043a \u043c\u044b \u0441\u043e\u0431\u0438\u0440\u0451\u043c \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432... \u041d\u043e \u043d\u0430\u043c \u0438 \u043f\u0440\u0430\u0432\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u0434\u0430? \u0410 \u0435\u0441\u043b\u0438 \u0438\u0433\u0440\u0430 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u0435\u0435?\n\n\u0414\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u043f\u044b\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0411\u0430\u0437\u0438\u0441\u043d\u0430\u044f \u0438\u0434\u0435\u044f (\u0445\u043e\u0442\u044f \u0431\u044b \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430) - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0433\u0438\u0431\u043a\u0438\u0445 \u0430\u0433\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0438\u0433\u0440\u0443 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0438 \u0432 \u0442\u043e \u0436\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0435 \u043d\u0430 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0442\u0430\u043b\u043a\u043d\u0443\u0442\u044c \u044d\u0442\u043e\u0439 \u0436\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e.\n\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0443\u0440\u043e\u043d \u043e\u0447\u0435\u043d\u044c \u0447\u0430\u0441\u0442\u043e, \u043c\u044b \u043e\u0441\u043b\u0430\u0431\u043b\u044f\u0435\u043c \u0430\u0433\u0435\u043d\u0442\u043e\u0432. \u041e\u0434\u043d\u0430\u043a\u043e, \u0441 \u0440\u043e\u0441\u0442\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u0432 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u0445, \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0438\u0433\u0440\u0443, \u0441\u043b\u0435\u0434\u0438\u0442\u044c \u0437\u0430 \u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u043e\u043c. \u042d\u0442\u043e \u0443\u0436\u0435 \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0438 \u043d\u0430\u0448\u0438 \u0430\u0433\u0435\u043d\u0442\u044b \u0442\u043e\u0436\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u0442\u0438 \u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u043e\u0436\u043d\u0435\u0435.","104dddf2":"## \u0418\u0418 \u0432 \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438: \u043a\u0430\u043a\u043e\u0432\u043e \u0431\u0443\u0434\u0443\u0449\u0435\u0435 ... \u0438 \u043f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u0435\u0435 \u0434\u043b\u044f \u0434\u0435\u043f\u043b\u043e\u0439\u043c\u0435\u043d\u0442\u0430, \u0447\u0435\u043c \u043a\u0430\u0436\u0435\u0442\u0441\u044f","bc567b8d":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0437\u043d\u0430\u0442\u044c \u043a\u0430\u043a \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0433\u0435\u043d\u0442\u0430.","72fa6465":"\u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0435 \u0442\u0430\u043a \u0443\u0436 \u0438 \u043c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0442\u044c \u0435\u0449\u0451 \u043e\u0434\u043d\u0443 \u0438\u0434\u0435\u044e, \u0430 \u0443\u0436 \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0438\u0441\u043f\u043b\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0451. \u041f\u043e\u0442\u043e\u043c\u0443 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0443\u0441\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438."}}