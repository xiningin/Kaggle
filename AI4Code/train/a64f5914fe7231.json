{"cell_type":{"58961e3c":"code","48ecc24b":"code","7f1f10aa":"code","790d4764":"code","8de2d2e1":"code","de2cc917":"code","4b23cf1a":"code","20eea150":"code","db96a3cb":"code","9c130992":"code","a64418fb":"code","6dbbbc2f":"code","716bca01":"code","512355e0":"code","bdb3f5f5":"code","b3f01510":"markdown"},"source":{"58961e3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48ecc24b":"import pandas as pd\nimport numpy as np\nimport re","7f1f10aa":"train_data = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest_data  =pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\ntrain_data.head(10)\ntrain_data.dtypes","790d4764":"train_data['text'][11]","8de2d2e1":"import re\ndef  clean_text(df, text_field, new_text_field_name):\n    df[new_text_field_name] = df[text_field].str.lower()\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda elem: re.sub(r\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)|^rt|http.+?\", \"\", elem))  \n    # remove numbers\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda elem: re.sub(r\"\\d+\", \"\", elem))\n    \n    return df\ndata_clean = clean_text(train_data, 'text', 'text_clean')\ndata_clean.head()","de2cc917":"import nltk.corpus\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\ndata_clean['text_clean'] = data_clean['text_clean'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\ndata_clean.head()","4b23cf1a":"import nltk \nnltk.download('punkt')\nfrom nltk.tokenize import sent_tokenize, word_tokenize\ndata_clean['text_tokens'] = data_clean['text_clean'].apply(lambda x: word_tokenize(x))\ndata_clean.head()","20eea150":"from nltk.stem import PorterStemmer \nfrom nltk.tokenize import word_tokenize\ndef word_stemmer(text):\n    stem_text = [PorterStemmer().stem(i) for i in text]\n    return stem_text\ndata_clean['text_clean_tokens'] = data_clean['text_tokens'].apply(lambda x: word_stemmer(x))\ndata_clean.head()","db96a3cb":"nltk.download('wordnet')\nfrom nltk.stem import WordNetLemmatizer\ndef word_lemmatizer(text):\n    lem_text = [WordNetLemmatizer().lemmatize(i) for i in text]\n    return lem_text\ndata_clean['text_clean_tokens'] = data_clean['text_tokens'].apply(lambda x: word_lemmatizer(x))\ndata_clean.head()","9c130992":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(data_clean['text_clean'],data_clean['target'],random_state = 0)\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.linear_model import SGDClassifier\npipeline_sgd = Pipeline([\n    ('vect', CountVectorizer()),\n    ('tfidf',  TfidfTransformer()),\n    ('nb', SGDClassifier()),\n])\nmodel = pipeline_sgd.fit(X_train, y_train)","a64418fb":"from sklearn.metrics import classification_report\ny_predict = model.predict(X_test)\nprint(classification_report(y_test, y_predict))","6dbbbc2f":"submission_test_clean = test_data.copy()\nsubmission_test_clean = clean_text(submission_test_clean, \"text\",\"text_clean\")\nsubmission_test_clean['text_clean'] = submission_test_clean['text_clean'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\nsubmission_test_clean = submission_test_clean['text_clean']\nsubmission_test_clean.head()","716bca01":"submission_test_pred = model.predict(submission_test_clean)","512355e0":"id_col = test_data['id']\nsubmission_df_1 = pd.DataFrame({\n                  \"id\": id_col, \n                  \"target\": submission_test_pred})\nsubmission_df_1.head()","bdb3f5f5":"submission_df_1.to_csv('submission_1.csv', index=False)","b3f01510":"The regular expression above is meant to find any four digits at the beginning of a string, which suffices for our case. The above is a raw string (meaning that a backslash is no longer an escape character), which is standard practice with regular expressions.\nregex = r'^(\\d{4})'\n"}}