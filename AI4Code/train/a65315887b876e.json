{"cell_type":{"0e58c01c":"code","1db0e549":"code","fb3d1832":"code","d194ca11":"code","cab65ad8":"code","b630788e":"code","e1807935":"code","8fdea325":"code","f0f656a0":"code","deced31b":"code","de9ec6d6":"code","a2ef1fa4":"code","93acdb77":"code","db70ec33":"code","e5fc186b":"code","452f557b":"code","afac0ba9":"code","c474f378":"code","6d9c2538":"code","e4de9905":"code","0fdf6692":"code","6129927c":"code","4b71df55":"code","7e982ef9":"code","eb3d86ba":"code","11423ec5":"code","a049ef44":"code","00beaf14":"markdown","779f6272":"markdown","ed5d1019":"markdown","6e8b3559":"markdown","03933e33":"markdown","2d2f5e98":"markdown","20ecde97":"markdown","38507be0":"markdown"},"source":{"0e58c01c":"#Wranlging\nimport pandas as pd\nimport numpy as np\n\n#Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Classification\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score","1db0e549":"rank = pd.read_csv('..\/input\/cwurData.csv')","fb3d1832":"rank.info()","d194ca11":"rank.describe()","cab65ad8":"list(rank.columns.values)","b630788e":"#Distinct Years\nrank.year.unique()","e1807935":"#Count of Institution by country in 2015\nins_count = rank[rank['year'] == 2015].groupby('country').size().sort_values(ascending = False)\nplt.figure(figsize = (15,15))\nax = sns.barplot(x = ins_count.values, y = ins_count.index)\nax.set(xlabel = 'Country', ylabel = 'Number of Institution')\nfor i in ax.patches:\n    ax.text(i.get_width()+3.0, i.get_y()+0.6,i.get_width().astype(int), color='black', ha=\"center\")\nplt.xticks(rotation = 70)\nplt.show()","8fdea325":"#Number of top 100 institution by country in 2015\ntop_count = rank[rank['year'] == 2015].head(100).groupby('country').size().sort_values(ascending = False)\nplt.figure(figsize = (15,10))\nax = sns.barplot(x = top_count.values, y = top_count.index)\nax.set(xlabel = 'Country', ylabel = 'Number of top 100 Institution')\nfor i in ax.patches:\n    ax.text(i.get_width()+0.5, i.get_y()+0.6,i.get_width().astype(int))\nplt.xticks(rotation = 70)\nplt.show()","f0f656a0":"#Percentage of top 100 institution by country in 2015\nper_count = top_count\/ins_count\nper_count.dropna(inplace = True)\nper_count.sort_values(ascending = False, inplace = True)\nplt.figure(figsize = (15,10))\nax = sns.barplot(x = per_count.values, y = per_count.index)\nax.set(xlabel = 'Country', ylabel = 'Percentage of top 100 Institution')\nfor i in ax.patches:\n    ax.text(i.get_width(), i.get_y()+0.6,str(round(i.get_width()*100,1))+'%')\nplt.xticks(rotation = 70)\nplt.show()","deced31b":"#Define a new dataframe\ninstitution = list(rank.institution.unique())\nnon_decreasing = pd.DataFrame(data=institution,columns=['institution'])\nnon_decreasing.head()","de9ec6d6":"#filtering \ndef non_decreasing_rank(institution):\n    world_rank = list(rank[rank.institution == institution]['world_rank'])\n    count = rank.groupby('institution').size()[institution]\n    for i in range(1,count): #1,2,3\n        if world_rank[i-1] < world_rank[i]:\n            return False\n    return True\n\n#Moment of truth\nnon_decreasing[non_decreasing['institution'].apply(non_decreasing_rank) == True]","a2ef1fa4":"#We are using 2015 figures\nrank2015 = rank[rank.year == 2015]\nrank2015.drop(['country','national_rank','year','broad_impact'],axis = 1, inplace = True)\nrank2015.head()","93acdb77":"y = rank2015.quality_of_education.max() + 1","db70ec33":"factor = list(rank2015.columns.values)[2:9]\nfactor","e5fc186b":"for i in range(len(factor)):\n    z = rank2015[factor[i]].apply(lambda x:y-x)\n    plt.figure(i)\n    sns.regplot(x=z, y='score', data = rank2015)","452f557b":"cor = pd.DataFrame()\nfor i in range(len(factor)):\n    cor[factor[i]] = rank2015[factor[i]].apply(lambda x:y-x)\ncor['score'] = rank2015.score\ncor.corr() ","afac0ba9":"score = rank.score\ntrain = rank[factor] \nlab_enc = preprocessing.LabelEncoder()\nscore_encoded = lab_enc.fit_transform(score)","c474f378":"x_train, y_train, x_test, y_test = train_test_split(train,score_encoded,train_size = 0.9, random_state = 0)","6d9c2538":"#Decision Tree\ntree = DecisionTreeClassifier()\ntree.fit(x_train,x_test)\ny_pred = tree.predict(y_train)\ny1 = lab_enc.inverse_transform(y_test)\ny2 = lab_enc.inverse_transform(y_pred)","e4de9905":"np.corrcoef(y1,y2)\nsns.regplot(y1,y2)","0fdf6692":"#Percentage of predicted score lies in between \u00b10.5 of the true score. \nfit = 0\nfor i in range(len(y1)):\n    if (y1[i] - 0.5) <= y2[i] <= (y1[i] + 0.5):\n        fit = fit + 1\n        \nprint(fit\/len(y1))","6129927c":"#K-Nearest Neighbors\nneigh = KNeighborsClassifier()\nneigh.fit(x_train, x_test)\ny_pred = neigh.predict(y_train)\ny1 = lab_enc.inverse_transform(y_test)\ny2 = lab_enc.inverse_transform(y_pred)","4b71df55":"sns.regplot(y1,y2)\nnp.corrcoef(y1,y2)","7e982ef9":"#Percentage of predicted score lies in between \u00b10.5 of the true score. \nfit = 0\nfor i in range(len(y1)):\n    if (y1[i] - 0.5) <= y2[i] <= (y1[i] + 0.5):\n        fit = fit + 1\n        \nprint(fit\/len(y1))","eb3d86ba":"#Random Forest\nforest = RandomForestClassifier()\nforest.fit(x_train,x_test)\ny_pred = forest.predict(y_train)\ny1 = lab_enc.inverse_transform(y_test)\ny2 = lab_enc.inverse_transform(y_pred)","11423ec5":"sns.regplot(y1,y2)\nnp.corrcoef(y1,y2)","a049ef44":"#Percentage of predicted score lies in between \u00b10.5 of the true score. \nfit = 0\nfor i in range(len(y1)):\n    if (y1[i] - 0.5) <= y2[i] <= (y1[i] + 0.5):\n        fit = fit + 1\n        \nprint(fit\/len(y1))","00beaf14":"It looks like the predicted values are very similar to true values. ","779f6272":"### But first, let's see some basic stats. ","ed5d1019":"## Question 1: Identify Universities whose rank has been non-decreasing.","6e8b3559":"DecisionTree is useful for classifying discrete random variables or binned continous random variables. In the case of dealing with unbinned continous variables, it is actually not too bad. But, there must be better models.","03933e33":"# List of Questions we would like to answer\nQuestion 1: Identify Universities whose rank has been non-decreasing. <br>\nQuestion 2: Which factors are more determining at rankings <br>\nQuestion 3: Predict University Rankings based on different factors <br>","2d2f5e98":"## Question 2 : Which factors are more determining at rankings","20ecde97":"## Question 3: Predict University Rankings based on different factors","38507be0":"Random Forest is the strongest classifier here"}}