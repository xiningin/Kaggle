{"cell_type":{"1adb4fca":"code","e7466e8f":"code","8e2e7175":"code","47577e65":"code","e7f2dbc6":"code","180a5012":"code","2884b630":"code","54afdb0f":"code","50342326":"code","4406d8f4":"code","6fa57867":"code","a65b6473":"code","022e49de":"code","e5eee349":"code","0ce7a614":"code","7a74ed4d":"code","30012937":"code","4cbffdbd":"code","fc450a36":"code","24ff56e3":"code","96af60c5":"code","4d0676ad":"code","c17e36df":"code","090ae357":"code","b3fa6989":"markdown","9d45846a":"markdown","7ded9606":"markdown","d176dffd":"markdown","a883b5db":"markdown","3e2d8eb3":"markdown","b1e66070":"markdown","ae1c2fce":"markdown","b746ea45":"markdown","85216529":"markdown","c6c69f7c":"markdown","5c8a6033":"markdown","ac00bb7f":"markdown","8bb6044a":"markdown","7deac556":"markdown","89f89a4d":"markdown","a9c0e1e2":"markdown","57b7fc27":"markdown","b6db1b5f":"markdown"},"source":{"1adb4fca":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport lightgbm as lgb","e7466e8f":"# \u8a13\u7df4\u30c7\u30fc\u30bf,\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n# train\u306b\u3082test\u306b\u3082\u540c\u69d8\u306e\u64cd\u4f5c\u3092\u884c\u3044\u305f\u3044\u305f\u6642\u306b\u307e\u3068\u3081\u3066\u884c\u3048\u308b\u3088\u3046\u306bcombine\u3068\u3044\u3046\u914d\u5217\u306b\u5165\u308c\u3066\u304a\u304f\ncombine = [train, test]\n\n# \u30c7\u30fc\u30bf\u306e\u5148\u982d5\u3064\u3092\u78ba\u8a8d\ndisplay(train.head())\ndisplay(train.shape)\ndisplay(test.head())\ndisplay(test.shape)","8e2e7175":"# \u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u91cf\u3068\u305d\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\n# drop\u306a\u3069train,test\u3092\u66f8\u304d\u63db\u3048\u305f\u5f8c\u3082\u5fd8\u308c\u305a\u306bcombine\u3092\u5b9a\u7fa9\u3057\u76f4\u3059\ntrain = train.drop(['PassengerId'], axis=1)\ncombine = [train, test]\n\ntrain.info()\nprint('='*50)\ntest.info()","47577e65":"# \u6b20\u640d\u5024\u304c\u5404\u7279\u5fb4\u91cf\u3054\u3068\u306b\u3044\u304f\u3064\u3042\u308b\u304b\ntrain.isnull().sum()","e7f2dbc6":"test.isnull().sum()","180a5012":"# \u6b20\u640d\u5024\u304c\u591a\u3044age\u30ab\u30e9\u30e0\u306e\u6027\u8cea\u3092\u898b\u3066\u3044\u304f\n# survived\u3067\u5206\u5e03\u304c\u5909\u5316\u3059\u308b\u304b\u3069\u3046\u304b\ng = sns.FacetGrid(train, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","2884b630":"# pclass\u3092row\u3068\u3057\u3066\u8ffd\u52a0\ngrid = sns.FacetGrid(train, col='Survived', row='Pclass')\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","54afdb0f":"# sex\u3092row\u3068\u3057\u3066\u8ffd\u52a0\ngrid = sns.FacetGrid(train, col='Survived', row='Sex')\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","50342326":"# pclass\u3068sex\u304b\u3089age\u306e\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3067\u304d\u306a\u3044\u304b\u78ba\u8a8d\ngrid = sns.FacetGrid(train, row='Pclass', col='Sex')\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","4406d8f4":"# sex\u3092object\u304b\u3089int\u306b\u5909\u63db\nfor dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map({'female':1, 'male':0}).astype(int)\n\ntrain.head()","6fa57867":"# age\u306e\u6b20\u640d\u5024\u3092\u63a8\u6e2c\nguess_ages = np.zeros((2,3))\n\nfor dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & (dataset['Pclass'] == j+1)]['Age'].dropna()\n            \n            age_guess = guess_df.median()\n\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        \n        for j in range(0, 3):\n            \n            dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),'Age'] = guess_ages[i,j]\n            \n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain.info()\nprint('='*50)\ntest.info()","a65b6473":"# \u6b20\u640d\u88dc\u5b8c\u5f8c\u306b\u5206\u5e03\u304c\u5927\u304d\u304f\u5d29\u308c\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\ngrid = sns.FacetGrid(train, row='Pclass', col='Sex')\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend()","022e49de":"# \u5ba2\u5ba4Cabin\u3092\u7279\u5fb4\u91cf\u304b\u3089\u524a\u9664\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)\ncombine = [train, test]","e5eee349":"# 1\u3064\u3060\u3051\u304b\u3051\u305ftest\u30c7\u30fc\u30bf\u306efare\u3092\u30c1\u30a7\u30c3\u30af\ntest['Fare'].describe()","0ce7a614":"# \u4e00\u90e8\u306e\u4eba\u304c512\u3068\u660e\u3089\u304b\u306b\u5927\u304d\u3044\u984d\u3092\u6255\u3063\u3066\u3044\u308b\u305f\u3081\u5e73\u5747\u5024\u3067\u306f\u306a\u304f\u4e2d\u592e\u5024\u3067\u88dc\u3046\ntest['Fare'].replace(np.nan, 14, inplace=True)","7a74ed4d":"# \u3069\u3053\u304b\u3089\u4e57\u8239\u3057\u305f\u304b\uff08embarked\uff09\u306f\u6b20\u640d\u5024\u304c2\u3064\u3060\u3051\u306e\u305f\u3081\u6700\u983b\u5024\u3067\u88dc\u3046\ntrain[['Embarked','Survived']].groupby('Embarked').count()","30012937":"train['Embarked'].replace(np.nan, 'S', inplace=True)","4cbffdbd":"train.info()\nprint('='*50)\ntest.info()","fc450a36":"# sex\u3092object\u304b\u3089int\u306b\u5909\u63db\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map({'C':0, 'Q':1, 'S':2}).astype(int)\n\ntrain.head()","24ff56e3":"train = train.drop(['Name', 'Ticket'], axis=1)\ntest = test.drop(['Name', 'Ticket'], axis=1)\ntrain.head()","96af60c5":"# train\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u3068\u691c\u8a3c\u7528\u306b\u5206\u3051\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn.model_selection import train_test_split\n# \u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u3068\u5b9f\u969b\u306e\u5024\u3092\u6bd4\u8f03\u3057\u3066\u8a55\u4fa1\u3057\u3066\u304f\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix, precision_score, recall_score\n\nX = train.drop(['Survived'], axis=1)\ny = train['Survived']\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","4d0676ad":"# lgbm\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30a7\u30c3\u30af\uff08\u9069\u5f53\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\uff09\nlgb_clf = lgb.LGBMClassifier(\n    # \u5178\u578b\u7684\u306a\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\n    boosting_type='gbdt', \n    class_weight=None,\n    # \u3082\u3057feature_fraction\u304c1.0\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070\u3001LightGBM\u306f\u6bce\u56de\u30e9\u30f3\u30c0\u30e0\u306b\u7279\u5fb4\u91cf\u3092\u90e8\u5206\u7684\u306b\u62bd\u51fa\n    # 0.8\u306e\u5834\u5408LightGBM\u306f\u8a13\u7df4\u524d\u306b\u7279\u5fb4\u91cf\u306e80%\u3092\u9078\u629e\u3059\n    colsample_bytree=1.0,\n    importance_type='split', \n    # \u53ce\u7e2e\u6e2c\u5ea6\n    learning_rate=0.1, \n    # \u6c7a\u5b9a\u6728\u306e\u6df1\u3055\n    max_depth=5,\n    # 1\u3064\u306e\u8449\u306e\u30c7\u30fc\u30bf\u306e\u6700\u5c0f\u500b\u6570\u3002\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3078\u306e\u5bfe\u51e6\u306b\u7528\u3044\u308b\u3002\n    min_child_samples=20,\n    min_child_weight=0.001,\n    min_split_gain=0.0,\n    # \u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u306e\u56de\u6570\n    n_estimators=100,\n    # LightGBM\u306b\u7528\u3044\u308b\u30b9\u30ec\u30c3\u30c9\u6570\n    n_jobs=-1,\n    # 1\u3064\u306e\u6728\u306e\u6700\u5927\u8449\u6570\n    num_leaves=31,\n    objective=None,\n    random_state=42,\n    reg_alpha=0.0,\n    reg_lambda=0.0,\n    silent=True,\n    subsample=1.0,\n    subsample_for_bin=200000,\n    subsample_freq=0)\nlgb_clf.fit(X_train, y_train)","c17e36df":"# \u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u7387\u3092\u8a08\u7b97\ny_pred = lgb_clf.predict(X_val)\naccuracy_score(y_val, y_pred)","090ae357":"# \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u306e\u53ef\u8996\u5316\nlgb.plot_importance(lgb_clf)","b3fa6989":"- 10\u6b73\u4ee5\u4e0b\u306e\u5b50\u4f9b\u306e\u751f\u5b58\u7387\u306f\u9ad8\u3044\n- \u6700\u9ad8\u9f62\u306e80\u6b73\u524d\u5f8c\u306e\u65b9\u306f\u751f\u304d\u6b8b\u3063\u305f\n- 20~40\u6b73\u306e\u9593\u304c\u6bd4\u8f03\u7684\u751f\u5b58\u7387\u304c\u4f4e\u3044\u3088\u3046\u306b\u898b\u3048\u308b","9d45846a":"train\u306ePassengerId\u306f\u5206\u6790\u306b\u306f\u7528\u3044\u3089\u306a\u3044\u306e\u3067\u524a\u9664","7ded9606":"pandas, numpy\u306f\u5fc5\u9808\u3002matplotlib\u3068seaborn\u306f\u3068\u308a\u3042\u3048\u305a\u53ef\u8996\u5316\u7528\u306b\u5165\u308c\u3066\u304a\u304f\u3002\n\n\u4eca\u56de\u306fLightGBM\u3092\u4f7f\u3046\u306e\u3067\u3053\u308c\u3092import","d176dffd":"## \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306e\u5206\u5272","a883b5db":"### to do \u30ea\u30b9\u30c8\n- age\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u304b\u3089\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u88dc\u5b8c\n- cabin\u304c\u5927\u304d\u304f\u6b20\u640d\u3057\u3066\u3044\u308b\u305f\u3081\u6b8b\u3059\u304b\u524a\u9664\u304b\u6c7a\u3081\u308b\u3002\u6b8b\u3059\u306a\u3089\u6b20\u640d\u5024\u88dc\u5b8c\n- train\u306eembarked\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u304c2\u3064\u306a\u306e\u3067\u6700\u983b\u5024\u3067\u88dc\u5b8c\u3059\u308b\n- test\u306efare\u304c1\u3064\u3060\u3051\u6b20\u640d\u3057\u3066\u3044\u308b\u306e\u3067\u4e2d\u592e\u5024\u7b49\u3067\u88dc\u5b8c\u3059\u308b\n- \u30e2\u30c7\u30eb\u306b\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306bobject\u578b\u306e\u3082\u306e\u3092\u6570\u5024\u306b\u76f4\u3059","3e2d8eb3":"## \u8003\u5bdf\n- fare\u3068age\u306e\u5f71\u97ff\u304c\u5927\u304d\u3044\u305f\u3081\u3001\u4f55\u6b73\u304b\u3089\u4f55\u6b73\u307e\u3067\u306a\u3069\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u306a\u3069\u6df1\u307c\u3063\u3066\u3082\u826f\u3055\u305d\u3046\n- age\u306e\u6b20\u640d\u5024\u88dc\u5b8c\u304c\u5272\u3068\u96d1\u306a\u305f\u3081\u3001\u3053\u3053\u3092\u3084\u308a\u76f4\u3057\u3066\u3082\u826f\u3044\u304b\u3082\n- pclass\u3068age\u306fsurvived\u3068\u76f8\u95a2\u304c\u3042\u308a\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u7d44\u307f\u5408\u308f\u305b\u3066\u307f\u3066\u3082\u826f\u3055\u305d\u3046\n- sibsp\u3068parch\u306f\u30ce\u30fc\u30bf\u30c3\u30c1\u306a\u306e\u3067\u3053\u3053\u3092\u3082\u3046\u3061\u3087\u3063\u3068\u89e6\u3063\u3066\u307f\u3088\u3046\n","b1e66070":"- Pclass1\u306e\u751f\u5b58\u7387\u304c\u9ad8\u304fPclass3\u306e\u6b7b\u4ea1\u7387\u304c\u9ad8\u3044\n- Pclass3\u306e10\u4ee3\u5f8c\u534a\u304b\u308940\u6b73\u306b\u304b\u3051\u3066\u3082\u3063\u3068\u3082\u6b7b\u4ea1\u7387\u304c\u9ad8\u3044","ae1c2fce":"## \u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9","b746ea45":"## \u6b20\u640d\u5024\u306e\u78ba\u8a8d","85216529":"cabin\u306f\u6b20\u640d\u5024\u304c\u591a\u304f\u3001\u5ba2\u5ba4\u756a\u53f7\u306ffare\u3084pclass\u306a\u3069\u3067\u4ee3\u7528\u304c\u51fa\u6765\u305d\u3046\u306a\u305f\u3081\u4eca\u56de\u306f\u524a\u9664","c6c69f7c":"pclass3\u304c\u82e5\u5e72\u5909\u308f\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304c\u8a31\u5bb9\u7bc4\u56f2\u3068\u3057\u3066\u4eca\u56de\u306f\u9032\u3081\u308b","5c8a6033":"age, cabin\u306ftrain\u30c7\u30fc\u30bf\u3068\u4e00\u7dd2\u306b\u6b20\u640d\u3092\u88dc\u5b8c\u3002\nfare\u304c1\u7b87\u6240\u6b20\u640d\u3057\u3066\u3044\u308b\u306e\u5225\u9014\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","ac00bb7f":"\u3056\u3063\u304f\u308a\u898b\u305f\u611f\u3058pclass\u3068sex\u304c\u3069\u3046\u3044\u3046\u7d44\u307f\u5408\u308f\u305b\u304b\u3067age\u306e\u5024\u304c\u5909\u308f\u3063\u3066\u304d\u305d\u3046","8bb6044a":"train\u3068\u547d\u540d\u3057\u305f\u8a13\u7df4\u30c7\u30fc\u30bf\u306f891\u884c12\u5217\u306e\u30c7\u30fc\u30bf\n\ntest\u3068\u547d\u540d\u3057\u305f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f418\u884c11\u5217\u306e\u30c7\u30fc\u30bf\n\ntest\u30c7\u30fc\u30bf\u306ftrain\u30c7\u30fc\u30bf\u306b\u3042\u308bSurvived\u304c\u7121\u3044\u30d0\u30fc\u30b8\u30e7\u30f3","7deac556":"age\u306e\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3059\u308b\u305f\u3081\u306b\n- 2\u884c3\u5217\u306e0\u304c\u5165\u3063\u305f\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\n- \u4f5c\u6210\u3057\u305f\u884c\u5217\u3000\u3092\u305d\u308c\u305e\u308csex\u3068pclass\u3068\u307f\u3066\u3001\u7279\u5b9a\u306esex\u3068pclass\u306e\u6642\u306eage\u306e\u5206\u5e03\u30922*3\u306e6\u30b1\u30fc\u30b9\u3067\u4f5c\u6210\u3059\u308b\uff08\u6b20\u640d\u3057\u3066\u3044\u308b\u5206\u306f\u9664\u5916\uff09\n- \u4f5c\u6210\u3057\u305f6\u30b1\u30fc\u30b9\u306e\u5206\u5e03\u3067\u4e2d\u592e\u5024\u3092\u53d6\u308b\n- age\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u3046\u3061\u3001sex\u3068pclass\u3054\u3068\u306b\u53d6\u5f97\u3057\u305f\u4e2d\u592e\u5024\u3092\u305d\u308c\u305e\u308c\u3069\u3053\u306e\u30b1\u30fc\u30b9\u306b\u5165\u308b\u304b\u306b\u3088\u3063\u3066\u88dc\u5b8c\u3059\u308b","89f89a4d":"\u6b20\u640d\u5024\u304c\u7121\u304f\u306a\u3063\u305f\u306e\u3092\u78ba\u8a8d\u3057\u3001object\u578b\u3092int\u578b\u306b\u4fee\u6b63\u3059\u308b","a9c0e1e2":"\u4eca\u56de\u306f\u540d\u524d\u3068\u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u306f\u524a\u9664","57b7fc27":"age\u304c177\u7b87\u6240\u6b20\u640d & cabin\u304c687\u7b87\u6240\u6b20\u640d & embarked\u304c2\u7b87\u6240\u6b20\u640d","b6db1b5f":"## \u6b20\u640d\u5024\u306e\u6574\u7406"}}