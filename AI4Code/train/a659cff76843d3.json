{"cell_type":{"9da0f5a1":"code","fb364923":"code","20523105":"code","3c6bb7b7":"code","56efced0":"code","6351e65b":"code","2f19e43c":"code","6d068527":"code","20bcecb3":"code","a9a463f9":"code","63728641":"code","a6bca477":"code","18d035d8":"code","5ce1b745":"code","c6a41407":"code","1fcf2c8a":"markdown","4b0f256c":"markdown","22d19903":"markdown","30656f4b":"markdown","e5ed2c99":"markdown","c0341e77":"markdown","e1cb0246":"markdown","35f0a83e":"markdown","1845d9ff":"markdown","0302cabb":"markdown","d8e8de59":"markdown","07b53070":"markdown","a817049b":"markdown","82e24dbd":"markdown","bc3fb3d8":"markdown","c952e3f7":"markdown","7232f9b6":"markdown","71d410ef":"markdown"},"source":{"9da0f5a1":"!pip install scrapy #installing scrapy","fb364923":"import numpy as np\nimport pandas as pd\nimport re # for cleaning data\nimport scrapy \nfrom scrapy.crawler import CrawlerProcess\nfrom scrapy import Selector\nimport requests","20523105":"#This is a normal scraping method without building a crawler class \n'''url=\"https:\/\/pitchfork.com\/artists\/1339-eminem\"\nhtml=requests.get(url).content\nsel=Selector(text=html)\nalbum_reviews={}\nlinks_to_the_reviews=sel.xpath('\/\/div[@class=\"review\"]\/a\/@href').extract()\nfor link in links_to_the_reviews:\n  album_page=requests.get(\"https:\/\/pitchfork.com\/\"+link).content\n  sel_album=Selector(text=album_page)\n  review=sel_album.xpath(\"\/\/div[@class='contents dropcap']\/\/text()\").extract()\n  name=sel_album.xpath('\/\/h1[@class=\"single-album-tombstone__review-title\"]\/text()').extract()[0]\n  #print(name)\n  for i in range(review.count('\\n')):\n    review.remove('\\n')\n  review=\"\".join(review)\n\n  album_reviews[name]=review'''  ","3c6bb7b7":"class scraper(scrapy.Spider):\n  name=\"scraper\"\n  def start_requests(self):\n    url=\"https:\/\/pitchfork.com\/artists\/1339-eminem\"\n    yield scrapy.Request(url=url,callback=self.parse)\n  def parse(self,response):\n    links=response.css('div.review>a::attr(href)').extract()\n    for link in links:\n      yield response.follow(url=link,callback=self.parse2)\n  def parse2(self,response):\n    name=response.css('h1.single-album-tombstone__review-title::text').extract()[0]\n    names.append(name)\n    review=response.css('div.contents.dropcap ::text').extract()\n    reviews.append(review)     ","56efced0":"#Starting the crawler to crawl through web pages and extract the data of our need.\nreviews=[]\nnames=[]\nprocess = CrawlerProcess()\nprocess.crawl(scraper)\nprocess.start()","6351e65b":"#let us check how our review looks like\nreviews[0]","2f19e43c":"#Joining the data\nfor i in range(len(reviews)):\n  reviews[i]=\"\".join(reviews[i])\n  reviews[i]=re.sub(\"\\n\",\" \",reviews[i])","6d068527":"data=pd.DataFrame(list(zip(names,reviews)),columns=[\"Album_name\",\"Review\"])\ndata.head()","20bcecb3":"data[\"Album_name\"] #Albums ","a9a463f9":"#Importing required libraries\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud,STOPWORDS \nimport spacy\nimport seaborn as sns\nfrom PIL import Image\nnlp=spacy.load('en_core_web_sm')\nimport logging","63728641":"Album_name=data.iloc[0,0] #Music to be murdered by\nAlbum_review=data.iloc[0,1] #review of the album","a6bca477":"Common_words=[] #This will contain the most frequent words used by reviewers\ndoc=nlp(Album_review) #Tokenizing the review\ntokens=[token.lower_ for token in doc if not token.is_punct and not token.is_stop and token.lower_  not in \"eminem\"] #Removing stop words \n#and punctuations\ncount=Counter(tokens) \ncount=count.most_common(40)","18d035d8":"logging.getLogger(\"matplotlib.font_manager\").setLevel(logging.ERROR)\nlabels=[tup[0] for tup in count]\nvalue=[tup[1] for tup in count]\nplt.figure(figsize=(10,5))\nplot=sns.barplot(x=labels,y=value)\nplot.set_xticklabels(labels=labels,rotation=90)\nplot.set_title(\"Review:Music To Be Murdered By(most frequent words)\")\n","5ce1b745":"#from PIL import Image\n#from google.colab import files\n#image=files.upload() # I made this notebook on colab , you might be on a different platform so look out when doing this cell.","c6a41407":"my_mask=np.array(Image.open(\"..\/input\/6930355.png\"))\ncloud=WordCloud(background_color=\"white\",mask=my_mask,stopwords=STOPWORDS)\ncloud.generate(data.iloc[0,-1])\n#cloud.to_file(\"Eminem.png\")\nplt.figure(figsize=(10,10))\nplt.imshow(cloud,interpolation='bilinear')\nplt.tight_layout()\nplt.axis(\"off\")","1fcf2c8a":"![EMINEM](https:\/\/static.independent.co.uk\/s3fs-public\/thumbnails\/image\/2020\/05\/21\/12\/3318f3cf181ad2673fab74719f3eed40.1000x1000x1-2.png?w968h681)","4b0f256c":"# Part 3 : So we are done with the cleaning part. Let's get into the analyzing part\n<img src=\"https:\/\/media.giphy.com\/media\/NS7gPxeumewkWDOIxi\/giphy.gif\">","22d19903":"# **THE END**\n##        I hope you enjoyed the notebook and got some new things to learn.\n###       Upvotes are always appreciated\n![alt text](https:\/\/1zl13gzmcsu3l9yq032yyf51-wpengine.netdna-ssl.com\/wp-content\/uploads\/2017\/12\/eminem-lyrics-to-motivate-you-1068x561.jpg)","30656f4b":"### We can now look upto the keywords we are interested in and it looks beautiful isn't it?","e5ed2c99":"## Building the crawler(**A cute one tho**)\n![alt text](https:\/\/images.news18.com\/ibnlive\/uploads\/2017\/11\/lucas.jpg?impolicy=website&width=536&height=356)","c0341e77":"# Part 1 : Scraping Data\nWe will be scraping Pitchfork's Eminem's artist page.\\\nWill be using Scrapy for creating a crawler.\\\nCrawler(in case you don't know about it):A program that systematically browses the World Wide Web in order to create an index of data.\n","e1cb0246":"## Let us see what the pitchfork's critics have to say about Eminem's Music to be murdered by ","35f0a83e":"### Importing required libraries","1845d9ff":"### If you have any problem in understanding how the spider works , I highly recommend you to go through DataCamp's [Web scraping with python](https:\/\/learn.datacamp.com\/courses\/web-scraping-with-python). ","0302cabb":"## We will create a graph of the most frequent words the critics used in the review to get a quick look over the review and will build a WordCloud to dig a bit deeper ","d8e8de59":"**HUFFF RELIEF.......**","07b53070":"***Confused Eminem noise***\n\n<img src=\"https:\/\/i.gifer.com\/PmtJ.gif\"> ","a817049b":"## Naive Method\nI will suggest you to build crawlers rather than this method as crawlers are more automated and easier to modify.\nLook for the crawler I created below this naive method.","82e24dbd":"# **Will the real SLIM SHADY please stand up?**\nIn this notebook we will be scraping , cleaning and visualizing pitchfork's review on Eminem's albums.","bc3fb3d8":"## The art of war\n1. The crawler will firstly load up the links to the reviews from the Pitchfork's page of Eminem.  \n2. The next step is to retrieve the reviews from the extracted links of the albums.\n3. On the review page the name of the album and the review will be stored in different lists.\\\n[Eminem's Pitchfork artist page](https:\/\/pitchfork.com\/artists\/1339-eminem)","c952e3f7":"## We can get more information by making a wordcloud.\n\n\n---\nBut a normal wordcloud is basic and we don't do basics, Right?\nLet's make it a bit unique so that it resembles to Eminem.\n\n\n","7232f9b6":"# Part 2 : Data Munging and Cleaning \nSo we have the name of the albums in **names** and the review of the respective album in **reviews**. \n\n*   names\n*   reviews\n\n","71d410ef":"# **Scraping Pitchfork's review on Eminem's albums**"}}