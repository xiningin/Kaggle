{"cell_type":{"3abc0861":"code","5728a44a":"code","a03567ad":"code","ddc7f172":"code","5cc1e74f":"code","37ba8c84":"code","d299511f":"code","86f69f0c":"code","2326b82e":"code","350e6095":"code","22ba0fc2":"code","0ab7a2da":"code","d52036fe":"code","96a70d44":"code","a8f383d9":"code","945e47eb":"code","4455298a":"code","08446871":"code","e12a46da":"code","14caa875":"code","79ead0d8":"code","7301365e":"code","8687b2f5":"code","a490fc25":"code","8589f986":"code","ff3a8f67":"code","14796c6c":"code","fae4c122":"code","d3196a2e":"code","ce48c5b5":"code","ee414c20":"code","e481a26c":"code","00334c64":"code","57343032":"code","842f97c7":"code","32a176c4":"code","c8d10a99":"code","688bfb13":"code","25548f32":"code","1dd533c6":"code","486c203a":"code","abd967e5":"code","ae88270a":"code","950df47b":"code","9c68e3ca":"code","a376b93c":"code","f8c660ea":"code","412157f9":"code","0906c1ed":"code","b54d8156":"code","22eeaa8a":"code","a16534bb":"code","98166f58":"code","b99a1bd8":"code","3669662a":"code","e45d88b9":"code","74fb12ca":"code","8566d3b3":"code","530c2568":"code","ea4e6c2f":"code","e0a3897e":"code","f6c701b0":"code","e32ff1bb":"code","956baab0":"code","203a82da":"code","bd482b41":"code","c0373301":"code","940d7619":"code","15102fcf":"code","85cce57c":"code","ba61a6d1":"code","db613417":"code","8af8e640":"code","6dc2d7a7":"code","256accf6":"code","e624d2ff":"code","9c7b841d":"code","78ad5cb3":"code","51900508":"code","d83cf95c":"markdown","ee16a0ed":"markdown","d9f5c202":"markdown","91774ef3":"markdown","7165c4fc":"markdown","07e52996":"markdown","178f661d":"markdown","14acaeac":"markdown","e3b9d15a":"markdown","e65fbe97":"markdown","d6007fc1":"markdown","3c3866e4":"markdown","6f8370fc":"markdown","703da74f":"markdown","11a5f10a":"markdown","9ce9224e":"markdown","98d5b03b":"markdown","d2d09e9b":"markdown","7674cccd":"markdown","c02d07a5":"markdown","971410d5":"markdown","be4117ca":"markdown","f0019376":"markdown","2b5fe711":"markdown","8e4e9b68":"markdown","25dd1f61":"markdown","372e6afd":"markdown","5f55fff7":"markdown","eacbe3ec":"markdown","bbfa46cf":"markdown","32cfbd36":"markdown","0f658d40":"markdown","95e7fdee":"markdown","0496eb93":"markdown","dfb7e5ee":"markdown","8dc426ea":"markdown","390b9f5b":"markdown","b57af970":"markdown","b26b8d6b":"markdown","0fbdef43":"markdown","d387ddd8":"markdown","6938d682":"markdown","b4caa4e7":"markdown","acf037c8":"markdown","77ba04ef":"markdown","c6d83106":"markdown","e4283905":"markdown","31979669":"markdown","db065a21":"markdown","ffee43d4":"markdown","2f9d8194":"markdown"},"source":{"3abc0861":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5728a44a":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","a03567ad":"train_df.columns","ddc7f172":"train_df.head(10)","5cc1e74f":"train_df.describe()","37ba8c84":"train_df.info()","d299511f":"a = train_df[\"Survived\"].value_counts()\nb = train_df[\"Sex\"].value_counts()\nc = train_df[\"Pclass\"].value_counts()\nd = train_df[\"Embarked\"].value_counts()\ne = train_df[\"SibSp\"].value_counts()\nf = train_df[\"Parch\"].value_counts()\nfig, axs = plt.subplots(2,3,figsize=(12,6))\n#fig.suptitle('Basic Data Analysis')\n\naxs[0, 0].bar(a.index, a, color = \"royalblue\")\naxs[0, 0].set_title('Survived')\naxs[0, 0].set(ylabel='Frequency')\naxs[0, 0].set_xticks(a.index)\n\naxs[0, 1].bar(b.index, b, color = \"royalblue\")\naxs[0, 1].set_title('Sex')\naxs[0, 1].set(ylabel='Frequency')\naxs[0, 1].set_xticks(b.index)\n\naxs[0, 2].bar(c.index, c, color = \"royalblue\")\naxs[0, 2].set_title('Pclass')\naxs[0, 2].set(ylabel='Frequency')\naxs[0, 2].set_xticks(c.index)\n\naxs[1, 0].bar(d.index, d, color = \"royalblue\")\naxs[1, 0].set_title('Embarked')\naxs[1, 0].set(ylabel='Frequency')\naxs[1, 0].set_xticks(d.index)\n\naxs[1, 1].bar(e.index, e, color = \"royalblue\")\naxs[1, 1].set_title('SibSp')\naxs[1, 1].set(ylabel='Frequency')\naxs[1, 1].set_xticks(e.index)\n\naxs[1, 2].bar(f.index, f, color = \"royalblue\")\naxs[1, 2].set_title('Parch')\naxs[1, 2].set(ylabel='Frequency')\naxs[1, 2].set_xticks(f.index)\nfig.tight_layout()","86f69f0c":"def plot_hist(variable):\n    plt.figure(figsize = (6,4))\n    plt.hist(train_df[variable], bins = 50, color = \"firebrick\")\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distribution with Histogram\".format(variable))\n    plt.show()","2326b82e":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","350e6095":"a = train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\nb = train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\nc = train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\nd = train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)\nfig, axs = plt.subplots(2,2,figsize=(10,8))\nfig.suptitle('Basic Data Analysis')\n\naxs[0, 0].bar(a[\"Pclass\"], a[\"Survived\"], color = \"orange\")\naxs[0, 0].set_title('Pclass - Survived')\naxs[0, 0].set(xlabel='Pclass', ylabel='Survived')\n\naxs[0, 1].bar(b[\"Sex\"], b[\"Survived\"], color = \"orange\")\naxs[0, 1].set_title('Sex - Survived')\naxs[0, 1].set(xlabel='Sex', ylabel='Survived')\n\naxs[1, 0].bar(c[\"SibSp\"], c[\"Survived\"], color = \"orange\")\naxs[1, 0].set_title('SibSp - Survived')\naxs[1, 0].set(xlabel='SibSp', ylabel='Survived')\n\naxs[1, 1].bar(d[\"Parch\"], d[\"Survived\"], color = \"orange\")\naxs[1, 1].set_title('Parch - Survived')\naxs[1, 1].set(xlabel='Parch', ylabel='Survived')\nfig.tight_layout()","22ba0fc2":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","0ab7a2da":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","d52036fe":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","96a70d44":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","a8f383d9":"train_df.head()","945e47eb":"train_df.columns[train_df.isnull().any()]","4455298a":"train_df.isnull().sum()","08446871":"train_df[train_df[\"Embarked\"].isnull()]","e12a46da":"ax = sns.boxplot(x=\"Embarked\", y=\"Fare\", data = train_df)","14caa875":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","79ead0d8":"train_df[train_df[\"Fare\"].isnull()]","7301365e":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","8687b2f5":"train_df[train_df[\"Fare\"].isnull()]","a490fc25":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nf,ax=plt.subplots(figsize = (6,6))\nsns.heatmap(train_df[list1].corr(),annot= True,fmt = \".2f\")\nplt.xticks(rotation=0)\nplt.yticks(rotation=0)\nplt.title('Correlation Map')\nplt.show()","8589f986":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","ff3a8f67":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","14796c6c":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","fae4c122":"g = sns.FacetGrid(train_df, col = \"Survived\", size  = 4)\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","d3196a2e":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","ce48c5b5":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","ee414c20":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","e481a26c":"train_df[train_df[\"Age\"].isnull()]","00334c64":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","57343032":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","842f97c7":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","32a176c4":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","c8d10a99":"train_df[train_df[\"Age\"].isnull()]","688bfb13":"train_df[\"Name\"].head(10)","25548f32":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\ntrain_df[\"Title\"].head(10)","1dd533c6":"plt.figure(figsize = (8,4))\nsns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","486c203a":"train_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","abd967e5":"plt.figure(figsize = (6,4))\nsns.countplot(x=\"Title\", data = train_df)\nplt.show()","ae88270a":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","950df47b":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","9c68e3ca":"train_df.head()","a376b93c":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","f8c660ea":"train_df.head()","412157f9":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","0906c1ed":"train_df.head()","b54d8156":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","22eeaa8a":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","a16534bb":"train_df.head(10)","98166f58":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","b99a1bd8":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","3669662a":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","e45d88b9":"train_df[\"Embarked\"].head()","74fb12ca":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","8566d3b3":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","530c2568":"train_df[\"Ticket\"].head(10)","ea4e6c2f":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","e0a3897e":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","f6c701b0":"train_df[\"Ticket\"].head(20)","e32ff1bb":"train_df.head()","956baab0":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","203a82da":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","bd482b41":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","c0373301":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","940d7619":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","15102fcf":"train_df.columns","85cce57c":"train_df_len","ba61a6d1":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","db613417":"test.head()","8af8e640":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train:\",len(X_train))\nprint(\"X_test:\",len(X_test))\nprint(\"y_train:\",len(y_train))\nprint(\"y_test:\",len(y_test))\nprint(\"test:\",len(test))","6dc2d7a7":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","256accf6":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","e624d2ff":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","9c7b841d":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\");","78ad5cb3":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","51900508":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)","d83cf95c":"1st class passengers are older than 2nd, and 2nd is older than 3rd class.","ee16a0ed":"## Ensemble Modeling","d9f5c202":"## Feature Engineering","91774ef3":"## Fill Missing: Age Feature","7165c4fc":"## Parch - Survived","07e52996":"Small familes have more chance to survive than large families.","178f661d":"## Variable Description","14acaeac":"### Find Missing Value","e3b9d15a":"1. PassengerId: Unique id number to each passenger\n1. Survived: Passenger survived(1) or died(0)\n1. Pclass: Passenger class\n1. Name: Name\n1. Sex: Gender of passenger\n1. Age: Age of passenger\n1. SibSp: Number of siblings\/spouses\n1. Parch: Number of parents\/children\n1. Ticket: Ticket number\n1. Fare: Amount of money spent on ticket\n1. Cabin: Cabin category\n1. Embarked: Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","e65fbe97":"## SibSp - Survived","d6007fc1":"## Hyperparameter Tuning - Grid Search - Cross Validation\nWe will compare 5 machine learning classifiers and evaluate mean accuracy of each of them by stratified cross validation.\n\n- Decision Tree\n- SVM\n- Random Forest\n- KNN\n- Logistic Regression","3c3866e4":"## Prediction and Submission","6f8370fc":"## Libraries and Utilities","703da74f":"## Univariate Variable Analysis","11a5f10a":"- Age <= 10 has a high survival rate,\n- Oldest passengers (80) survived,\n- Large number of 20 years old did not survive,\n- Most passengers are in 15-35 age range,\n- Use age feature in training\n- Use age distribution for missing value of age","9ce9224e":"RMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean on 15 April 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking at the time the deadliest of a single ship in the West and the deadliest peacetime sinking of a superliner or cruise ship to date.With much public attention in the aftermath the disaster has since been the material of many artistic works and a founding material of the disaster film genre.","98d5b03b":"- float64(2): Fare and Age\n- int64(5): Pclass, SibSp, Parch, PassengerId and Survived\n- object(5): Cabin, Embarked, Ticket, Name and Sex","d2d09e9b":"## Drop Passenger ID and Cabin","7674cccd":"## Embarked - Sex - Fare - Survived","c02d07a5":"- Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp and Parch\n- Numerical Variable: Fare, Age and PassengerId","971410d5":"- Female passengers have much better survival rate than males.\n- Males have better survival rate in pclass 3 in C.\n- Embarked and sex will be used in training.","be4117ca":"Sex is not informative for age prediction, age distribution seems to be same.","f0019376":"### Fill Missing Value","2b5fe711":"## Family Size","8e4e9b68":"# Titanic Exploratory Data Analysis","25dd1f61":"## Basic Data Analysis","372e6afd":"## Ticket","5f55fff7":"## Modeling\n### Train Test Split","eacbe3ec":"## Visualization","bbfa46cf":"### Name - Title","32cfbd36":"![image.png](attachment:image.png)","0f658d40":"## Embarked","95e7fdee":"## Pclass - Survived","0496eb93":"## Outlier Detection","dfb7e5ee":"## Load and Check Data","8dc426ea":"- Sibsp and parch can be used for new feature extraction with th = 3\n- Small familes have more chance to survive.\n- There is a std in survival of passenger with parch = 3","390b9f5b":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","b57af970":"## Missing Value","b26b8d6b":"### Correlation Between SibSp - Parch - Age - Fare - Survived","0fbdef43":"## Sex","d387ddd8":"### Categorical Variable","6938d682":"### Convert to Categorical","b4caa4e7":"## Embarked - Sex - Pclass - Survived","acf037c8":"## Age - Survived","77ba04ef":"## Pclass - Survived - Age","c6d83106":"- Pclass - Survived\n- Sex - Survived\n- SibSp - Survived\n- Parch - Survived","e4283905":"## Simple Logistic Regression","31979669":"- Having a lot of SibSp have less chance to survive.\n- If sibsp == 0 or 1 or 2, passenger has more chance to survive\n- We can consider a new feature describing these categories.","db065a21":"### Numerical Variable","ffee43d4":"Fare feature seems to have correlation with survived feature (0.26).","2f9d8194":"## Pclass"}}