{"cell_type":{"4bb73d26":"code","0812cdb2":"code","04f77e12":"code","9c837b6d":"code","aab8efef":"code","a490593f":"code","2a11cc62":"code","2e56031e":"code","280f8e69":"code","d9e67c62":"code","e2957383":"code","5fd9d5a6":"code","6c68ad0e":"code","f077c710":"code","2525434c":"code","db1ea769":"code","a38a226a":"code","c7bd1f44":"code","21f476a7":"code","9ba37792":"code","b8ebf059":"code","0ebcde03":"code","556876f9":"code","ec0f118b":"code","31e878d6":"code","fa4335f5":"code","5b09eadc":"code","f0da7916":"code","7aadede3":"code","cdd56e74":"code","44548e77":"code","b7433e44":"code","43197076":"code","be009552":"code","dc86f2a0":"code","28232831":"code","693803d8":"code","ea763fd0":"code","5686aa5b":"code","0b17a7c7":"code","9b3d68d3":"code","34da8b4b":"code","5dd1eeed":"code","c98a1199":"code","0e0b3ca2":"code","670318f9":"code","2867aa37":"code","54386f73":"code","7fd4119d":"code","d8b7953e":"code","a088449f":"code","64fad7e2":"code","2c6c2949":"markdown","f0967446":"markdown","3454d4c6":"markdown","645b1fb4":"markdown","bcae7ef9":"markdown","10b4b0c5":"markdown","4dbb16e7":"markdown","0b4feb96":"markdown","3f27d291":"markdown","bd4912ed":"markdown","2f030c17":"markdown","093695d0":"markdown","d340ecb7":"markdown","5c0ae19a":"markdown"},"source":{"4bb73d26":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sqlalchemy import create_engine, text\nfrom geopy.distance import distance\nimport math\nimport time\nfrom plotly.offline import init_notebook_mode, iplot\n\ninit_notebook_mode(connected=True) ","0812cdb2":"route = '1012-10'","04f77e12":"bus_stops = pd.read_csv('..\/input\/so-paulo-bus-system\/stops.csv')\nstop_times = pd.read_csv('..\/input\/so-paulo-bus-system\/stop_times.csv')\ntrips_id = pd.read_csv('..\/input\/so-paulo-bus-system\/trips.csv')\n\nstops = pd.merge(stop_times, bus_stops, on='stop_id')\nstops = pd.merge(stops, trips_id, on='trip_id')\n\nstops = stops[stops['route_id'].str.contains(route)]\n\nstop_names = stops.drop_duplicates(['stop_id', 'stop_name'])[['stop_id', 'stop_sequence', 'stop_name']]\nstop_names.head()","9c837b6d":"stops_chosen = (301729, 301764)","aab8efef":"stops = stops[(stops['stop_id'] == stops_chosen[0]) | (stops['stop_id'] == stops_chosen[1])] \nstops.drop_duplicates('stop_id', inplace=True)","a490593f":"reader = pd.read_csv('..\/input\/so-paulo-bus-system\/bus_position.csv', chunksize=10 ** 6)\nbus_position = pd.DataFrame()\nfor i, chunk in enumerate(reader):\n    print(i)\n    chunk = chunk[chunk['c'].str.contains(route)]\n    bus_position = pd.concat([bus_position, chunk])","2a11cc62":"bus_position.shape","2e56031e":"bus_position.info()","280f8e69":"bus_position.head()","d9e67c62":"bus_position['hr'] = pd.to_datetime(bus_position['hr']).dt.time","e2957383":"bus_position['ta'] = pd.to_datetime(bus_position['ta']).dt.tz_convert('America\/Sao_Paulo')","5fd9d5a6":"print(f'First observation was on {bus_position[\"ta\"].min()}')\nprint(f'Last observation was on {bus_position[\"ta\"].max()}')","6c68ad0e":"bus_position.sort_values(['p', 'ta'], ignore_index=True, inplace=True)","f077c710":"bp_copy = bus_position.copy()","2525434c":"bp_copy.head()","db1ea769":"grouped_cl = bp_copy.groupby('p')","a38a226a":"shifted_values = grouped_cl.shift(1)[['ta', 'py','px']]","c7bd1f44":"shifted_values.columns = ['previous_ta', 'previous_py', 'previous_px']","21f476a7":"bp_copy = pd.concat([bp_copy, shifted_values], axis=1)","9ba37792":"bp_copy['latlon'] = pd.Series(list(bp_copy[['py', 'px']].itertuples(index=False, name=None)))","b8ebf059":"bp_copy['previous_latlon'] = pd.Series(list(bp_copy[['previous_py', 'previous_px']].itertuples(index=False, name=None)))","0ebcde03":"def calc_distance(coord1, coord2):\n  if type(coord1) is tuple and type(coord2) is tuple: \n    if np.isnan(coord1[0]) or np.isnan(coord1[1]):\n      return np.nan\n\n    elif np.isnan(coord2[0]) or np.isnan(coord2[1]):\n      return np.nan\n\n    else:\n      return distance(coord1, coord2).km\n    \n  else:\n\n    return np.nan","556876f9":"bp_copy['distance'] = bp_copy.apply(lambda x: calc_distance(x['latlon'], x['previous_latlon']),axis=1)","ec0f118b":"bp_copy.head()","31e878d6":"plt.figure(figsize=[12,6])\nsns.distplot(bp_copy['distance'])","fa4335f5":"plt.figure(figsize=[12,6])\nsns.distplot(bp_copy[bp_copy['distance'] != 0]['distance'])","5b09eadc":"bp_copy[bp_copy['distance'] != 0]['distance'].describe()","f0da7916":"plt.figure(figsize=[12,6])\nsns.distplot(np.log(bp_copy[bp_copy['distance'] != 0]['distance'] + 1))","7aadede3":"bp_copy['timedelta'] = bp_copy.apply(\n            lambda x: (x['ta'] - x['previous_ta']) if x['previous_ta'] else None, axis=1)","cdd56e74":"def deltatime_to_float(delta):\n    if type(delta) is pd._libs.tslibs.timedeltas.Timedelta:\n        return delta.to_timedelta64().astype('timedelta64[s]').item().total_seconds() \/ 3600\n\n    else:\n        return None","44548e77":"bp_copy['timedelta'] = bp_copy['timedelta'].apply(deltatime_to_float)","b7433e44":"bp_copy.head()","43197076":"i_list = []\nindex_list = []\nid_list = []\nfor index, row in stops[stops['route_id'].str.contains('1012-10')].iterrows():\n  i_list = []\n  i_list.append(bp_copy[(bp_copy['c'].str.contains('1012-10')) & \n                    (((bp_copy['previous_py'] <= row['stop_lat']) & (row['stop_lat'] <= bp_copy['py']) & (bp_copy['previous_px'] <= row['stop_lon']) & (row['stop_lon'] <= bp_copy['px'])) | \n                    ((bp_copy['py'] <= row['stop_lat']) & (row['stop_lat'] <= bp_copy['previous_py']) & (bp_copy['px'] <= row['stop_lon']) & (row['stop_lon'] <= bp_copy['previous_px'])) | \n                    ((bp_copy['py'] <= row['stop_lat']) & (row['stop_lat'] <= bp_copy['previous_py']) & (bp_copy['previous_px'] <= row['stop_lon']) & (row['stop_lon'] <= bp_copy['px'])) | \n                    ((bp_copy['previous_py'] <= row['stop_lat']) & (row['stop_lat'] <= bp_copy['py']) & (bp_copy['px'] <= row['stop_lon']) & (row['stop_lon'] <= bp_copy['previous_px'])))]['id'].values)\n  for i_value in i_list:\n    for value in i_value:\n      index_list.append(index)\n      id_list.append(value)\nassociation_df = pd.DataFrame({'index': index_list, 'id': id_list})\nassociation_df","be009552":"association_df['ta'] = association_df.apply(lambda x: bp_copy[bp_copy['id'] == x['id']]['ta'].values[0], axis = 1)\nassociation_df['previous_ta'] = association_df.apply(lambda x: bp_copy[bp_copy['id'] == x['id']]['previous_ta'].values[0], axis = 1)\nassociation_df['stop_sequence'] = association_df.apply(lambda x: stops[stops.index == x['index']]['stop_sequence'].values[0], axis=1)\nassociation_df ","dc86f2a0":"def calculate_real_time(stop_lat, previous_py, stop_lon, previous_px, py, px, time):\n  value = math.sqrt((stop_lat - previous_py)**2 + (stop_lon - previous_px)**2)\n  value = value\/math.sqrt((py - previous_py)**2 + (px - previous_px)**2)\n  return time*value","28232831":"association_df['time'] = association_df.apply(lambda x: calculate_real_time(stops.iloc[x['index']]['stop_lat'], bp_copy[bp_copy['id'] == x['id']]['previous_py'], stops.iloc[x['index']]['stop_lon'],\n                                                                            bp_copy[bp_copy['id'] == x['id']]['previous_px'], bp_copy[bp_copy['id'] == x['id']]['py'], bp_copy[bp_copy['id'] == x['id']]['px'],\n                                                                            ((time.mktime(x['ta'].timetuple())\/60) - (time.mktime(x['previous_ta'].timetuple())\/60))), axis = 1)\nassociation_df","693803d8":"def validate_time(df, stop_time, ta, index):\n    return df[(df['ta'] == ta) & (df['stop_sequence'] == index - 1)]['time'].size != 0 and stop_time - df[(df['ta'] == ta) &\n           (df['stop_sequence'] == index - 1)]['time'].values[0] > 0\n\n\ndef get_time_between_stops(index, ta, previous_ta, bus_stop_time, association_df):\n    if index > 1:\n        if validate_time(association_df, bus_stop_time, ta, index):\n            return bus_stop_time - association_df[(association_df['ta'] == ta) & (association_df['stop_sequence'] == index - 1)\n                                                  ]['time'].values[0]\n\n        if association_df[(association_df['ta'] == previous_ta) & (association_df['stop_sequence'] == index - 1)]['time'].size != 0:\n\n            time_between_stops = bus_stop_time - association_df[(association_df['ta'] == previous_ta) &\n                                                                (association_df['stop_sequence'] == index - 1)]['time'].values[0]\n\n            time_between_stops = time_between_stops + (association_df[(association_df['ta'] == previous_ta) &\n                                                       (association_df['stop_sequence'] == index - 1)]['ta'].values[0] -\n                                                       np.datetime64('1970-01-01T00:00:00Z'))\/np.timedelta64(1, 's')\/60\n\n            return time_between_stops - (association_df[(association_df['ta'] == previous_ta) &\n                                         (association_df['stop_sequence'] == index - 1)]['previous_ta'].values[0] -\n                                         np.datetime64('1970-01-01T00:00:00Z'))\/np.timedelta64(1, 's')\/60\n    return np.nan","ea763fd0":"association_df.head()","5686aa5b":" association_df['time_between_stops'] = association_df.apply(\n        lambda x: get_time_between_stops(x['stop_sequence'], x['ta'], x['previous_ta'], x['time'], association_df),\n                                                                                                                 axis=1)","0b17a7c7":"association_df[association_df['time_between_stops'].notna()]","9b3d68d3":"association_df.groupby(['index'])['time_between_stops'].mean()","34da8b4b":"# association_df[association_df['time_between_stops'].notna()]['time_between_stops'].mean()","5dd1eeed":"# association_df[association_df['time_between_stops'].notna()].groupby(['index', 'weekday'])['time_between_stops'].mean()","c98a1199":"# association_df['weekday'] = association_df['previous_ta'].dt.weekday\n# association_df['hour'] = association_df['previous_ta'].dt.","0e0b3ca2":"association_df['ta'].dt.day.unique()","670318f9":"association_df.set_index(['ta'], inplace=True)\nassociation_df = association_df[association_df['time_between_stops'] < 10]\n\nagg = association_df.groupby([association_df.index.hour, association_df.index.day_name()]).mean()\n\ndays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\nagg = agg.reindex(days, level=1)","2867aa37":"association_df.sort_index()","54386f73":"agg[agg['weekday'] == 'Friday']","7fd4119d":"agg.index.names = ['hour', 'weekday']\nagg = agg.reset_index()\n\nagg['hour'] = agg['hour'].apply(lambda x: str(x).zfill(2) + ':' + '00')","d8b7953e":"filtered = agg[agg['hour'] == '18:00']","a088449f":"fig = px.bar(filtered, x='weekday', y='time_between_stops', title=f'Time it takes between stops')","64fad7e2":"fig.show()","2c6c2949":"**Showing all the stop IDs for this route.**","f0967446":"## Distance analysis","3454d4c6":"# Calculating Historical Average Time Between Stops","645b1fb4":"### Chose the stop IDs. They must be sequential.","bcae7ef9":"## From now on we are going to work with just one bus route for efficiecy purposes","10b4b0c5":"### Chose a route","4dbb16e7":"## Reading bus positions csv.\n\n**We are reading chunks of the dataset because of its size (3 GB). The chunks are going to be filtered by the chosen route and stored in a data frame.**\n","0b4feb96":"**All the stops data frame merges and filters have been applied in the first cells**","3f27d291":"**A little bit more of information of the moving buses.**","bd4912ed":"## Converting strings to time","2f030c17":"## Shifting Data Frame\n**If we want to calculate time intervals, distances, and speeds, we must shift the data and concatenate it to the original data frame.**","093695d0":"## Calculating distance in KM\n**We were not sure how we were going to use this data. Therefore, we calculated the distance in order to try to find some insights**","d340ecb7":"## Calculating timedelta","5c0ae19a":"**There is a lot of zeroes in the distance. Let's analyse only buses in movement.**"}}