{"cell_type":{"ded07556":"code","2881dfba":"code","faee55da":"code","11c6d651":"code","76e0935c":"code","e406b91f":"code","1df03cfa":"code","d87ce914":"code","e1c2b98a":"code","f911a838":"code","8274a41e":"code","4aa15d6b":"code","f87042f4":"markdown","817dc18c":"markdown","0e5efa38":"markdown","8cbd46a6":"markdown","608c2efd":"markdown","009a618f":"markdown","7e8dfa17":"markdown","41b8f956":"markdown","4d319bcb":"markdown","ff072109":"markdown","425a7960":"markdown"},"source":{"ded07556":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfrom wordcloud import WordCloud\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\n\nimport warnings\nwarnings.filterwarnings('ignore')","2881dfba":"train = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")","faee55da":"# Print few rows of train data\n\ntrain.head()","11c6d651":"# Basic information\n\ntrain.info()","76e0935c":"# Describing data\n\ntrain.describe() ","e406b91f":"# Data types of columns\n\ntrain.dtypes","1df03cfa":"train.isnull().sum()","d87ce914":"import missingno as msno\nmsno.matrix(train)","e1c2b98a":"Loc = train['location'].value_counts()\nfig = px.choropleth(Loc.values, locations=Loc.index,\n                    locationmode='country names',\n                    color=Loc.values,\n                    color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title=\"Countrywise Distribution\")\npy.iplot(fig, filename='test')","f911a838":"Tar = train['target'].value_counts()\n\nfig = go.Figure([go.Bar(x=Tar.index, y=Tar)])\nfig.update_layout(title = \"Target Category\")\npy.iplot(fig, filename='test')","8274a41e":"wordcloud = WordCloud(width = 1000, height = 600, max_font_size = 200, max_words = 150,\n                      background_color='white').generate(\" \".join(train.text))\n\nplt.figure(figsize=[10,10])\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","4aa15d6b":"plt.figure(figsize=(16,8))\nplt.title('Most frequent keywords',fontsize=16)\nplt.xlabel('keywords')\n\nsns.countplot(train.keyword,order=pd.value_counts(train.keyword).iloc[:15].index,palette=sns.color_palette(\"PuRd\", 15))\n\nplt.xticks(size=16,rotation=60)\nplt.yticks(size=16)\nsns.despine(bottom=True, left=True)\nplt.show()","f87042f4":"**Check missing\/null values**","817dc18c":"## Visualization","0e5efa38":"**Let's see the columns of data:**\n\n* **id** - a unique identifier for each tweet\n* **text** - the text of the tweet\n* **location** - the location the tweet was sent from (may be blank)\n* **keyword** - a particular keyword from the tweet (may be blank)\n* **target** - in train.csv only, this denotes whether a tweet is about a real disaster (1) or not (0)","8cbd46a6":"## Introduction\n\nTwitter has become an important communication channel in times of emergency.\nThe ubiquitousness of smartphones enables people to announce an emergency they\u2019re observing in real-time. Because of this, more agencies are interested in programatically monitoring Twitter (i.e. disaster relief organizations and news agencies).\n\nBut, it\u2019s not always clear whether a person\u2019s words are actually announcing a disaster.","608c2efd":"**Most used words in text column**","009a618f":"## Statistical Analysis","7e8dfa17":"**If you like this kernel please upvote it or if you have any queries or suggestions then leave a comment.**\n\n**I'll be adding more plots. Stay tuned!!**","41b8f956":"**Most frequent keywords**","4d319bcb":"**Categories of target column**","ff072109":"Seems like we have more number of tweets which are not disaster. Quite positive right!! ","425a7960":"**Countrywise Distribution**"}}