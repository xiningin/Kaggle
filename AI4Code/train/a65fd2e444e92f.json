{"cell_type":{"1a5f5746":"code","9175bb3b":"code","858b8179":"code","d1992c1d":"code","e40dad36":"code","b30d03c5":"code","4713c625":"code","cce6f9a7":"code","ea5182bf":"code","64c4d840":"code","82b4b4fe":"code","7af69f12":"code","686d8a26":"code","6a82f8c8":"code","e3d94858":"code","5266f905":"code","a4b12dfe":"code","a6ccdf2d":"code","a394e639":"markdown"},"source":{"1a5f5746":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9175bb3b":"## SkLearn# Collection of string documents\n\ncorpus = [\n     'this is the first document',\n     'this document is the second document',\n     'and this is the third one',\n     'is this the first document',\n]","858b8179":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\nvectorizer.fit(corpus)\nskl_output = vectorizer.transform(corpus)","d1992c1d":"# sklearn feature names, they are sorted in alphabetic order by default.\n\nprint(vectorizer.get_feature_names())","e40dad36":"# Here we will print the sklearn tfidf vectorizer idf values after applying the fit method\n# After using the fit function on the corpus the vocab has 9 words in it, and each has its idf value.\n\nprint(vectorizer.idf_)","b30d03c5":"# shape of sklearn tfidf vectorizer output after applying transform method.\n\nskl_output.shape","4713c625":"# sklearn tfidf values for first line of the above corpus.\n# Here the output is a sparse matrix\n\nprint(skl_output[0])","cce6f9a7":"# sklearn tfidf values for first line of the above corpus.\n# To understand the output better, here we are converting the sparse output matrix to dense matrix and printing it.\n# Notice that this output is normalized using L2 normalization. sklearn does this by default.\n\nprint(skl_output[0].toarray())","ea5182bf":"# Write your code here.\n# Make sure its well documented and readble with appropriate comments.\n# Compare your results with the above sklearn tfidf vectorizer\n# You are not supposed to use any other library apart from the ones given below\n\nfrom collections import Counter\nfrom tqdm import tqdm\nfrom scipy.sparse import csr_matrix\nimport math\nimport operator\nfrom sklearn.preprocessing import normalize\nimport numpy","64c4d840":"\n#We will start by breaking our corpus into individual words\ndef split_list(sentence):\n        result = []\n    #Split each sentence in the list, and append to result list\n        for s in sentence:\n            result.append(s.split())\n        return result\n            \nresult = split_list(corpus)\nprint(result)","82b4b4fe":"#we will add this obtained list of words to a set so that we have only unique words\n#reference: https:\/\/stackoverflow.com\/questions\/30083947\/how-to-convert-list-of-lists-to-a-set-in-python-so-i-can-compare-to-other-sets\nouter_list = [] \ndef lists_to_list(nested_lists): \n    for el in nested_lists: \n        if type(el) == list: \n            lists_to_list(el) \n        else: \n            outer_list.append(el)\n    return outer_list\nouter_all_list = lists_to_list(result)\nprint(outer_all_list)\nouter_list = set(outer_all_list)\nprint(\"=\"*50)\nprint(outer_list)","7af69f12":"#sort the list alphabetically\nprint(outer_list)\nsorted_list = sorted(outer_list)\nprint(sorted_list)","686d8a26":"#a dicttionary for storing all words and their occurences in the corpus\nnumofwords = dict.fromkeys(sorted_list, 0)\n\nfor word in outer_all_list:\n    numofwords[word] += 1 \n    \nprint(numofwords)","6a82f8c8":"#computing the term frequency of words\ndef compute_tf(numofwords,outer_all_list):\n    term_freq = {}\n    len_of_list = len(outer_all_list)\n    for word,count in numofwords.items():\n        term_freq[word] = count\/len_of_list\n    return term_freq\nterm_freq = compute_tf(numofwords,outer_all_list)\nprint(term_freq)","e3d94858":"#computing count of words in each document\nN = len(corpus)\nidf_dict = dict.fromkeys(sorted_list,0)\nfor word,count in numofwords.items():\n    for i in range(len(corpus)):\n        for x in result[i]:\n               # print (x)\n                if x == word:\n                    idf_dict[word] += 1\n                    break\nprint(idf_dict)","5266f905":"#computing IDF\nidf_final = dict.fromkeys(sorted_list,0)\nfor word,val in idf_dict.items():\n    idf_final[word] = 1 + (math.log((N+1)\/(val+1))) \nprint(idf_final)","a4b12dfe":"#compute TF-IDF\ntfidf = dict.fromkeys(sorted_list,0)\nfor word,val in idf_final.items():\n    tfidf[word] = val * term_freq[word]\nprint(tfidf)","a6ccdf2d":"type(tfidf)","a394e639":"You should compare the results of your own implementation of TFIDF vectorizer with that of sklearns implemenation TFIDF vectorizer.\n\nSklearn does few more tweaks in the implementation of its version of TFIDF vectorizer, so to replicate the exact results you would need to add following things to your custom implementation of tfidf vectorizer:\nSklearn has its vocabulary generated from idf sroted in alphabetical order\nSklearn formula of idf is different from the standard textbook formula. Here the constant \"1\" is added to the numerator and denominator of the idf as if an extra document was seen containing every term in the collection exactly once, which prevents zero divisions.  IDF(t)=1+loge1 + Total number of documents in collection1+Number of documents with term t in it. \nSklearn applies L2-normalization on its output matrix.\nThe final output of sklearn tfidf vectorizer is a sparse matrix.\n\nSteps to approach this task:\nYou would have to write both fit and transform methods for your custom implementation of tfidf vectorizer.\nPrint out the alphabetically sorted voacb after you fit your data and check if its the same as that of the feature names from sklearn tfidf vectorizer.\nPrint out the idf values from your implementation and check if its the same as that of sklearns tfidf vectorizer idf values.\nOnce you get your voacb and idf values to be same as that of sklearns implementation of tfidf vectorizer, proceed to the below steps.\nMake sure the output of your implementation is a sparse matrix. Before generating the final output, you need to normalize your sparse matrix using L2 normalization. You can refer to this link https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.normalize.html\nAfter completing the above steps, print the output of your custom implementation and compare it with sklearns implementation of tfidf vectorizer.\nTo check the output of a single document in your collection of documents, you can convert the sparse matrix related only to that document into dense matrix and print it.\n\nNote-1: All the necessary outputs of sklearns tfidf vectorizer have been provided as reference in this notebook, you can compare your outputs as mentioned in the above steps, with these outputs.\nNote-2: The output of your custom implementation and that of sklearns implementation would match only with the collection of document strings provided to you as reference in this notebook. It would not match for strings that contain capital letters or punctuations, etc, because sklearn version of tfidf vectorizer deals with such strings in a different way. To know further details about how sklearn tfidf vectorizer works with such string, you can always refer to its official documentation.\nNote-3: During this task, it would be helpful for you to debug the code you write with print statements wherever necessary. But when you are finally submitting the assignment, make sure your code is readable and try not to print things which are not part of this task."}}