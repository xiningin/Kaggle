{"cell_type":{"be207b61":"code","b9bba966":"code","1ac889e9":"code","3a62ba7b":"code","b0d31ef9":"code","8cf35577":"code","02a5abeb":"code","5fa6d278":"code","6e2622f3":"code","4b6359ef":"code","b9f786d4":"code","46f2d649":"code","7e303de3":"code","bc618203":"code","8bc58836":"code","e533aef7":"code","cbedbba8":"code","5f134acc":"code","96ee197a":"markdown","72ec5b64":"markdown"},"source":{"be207b61":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nfrom sklearn.model_selection import train_test_split\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nplt.rcParams[\"figure.figsize\"] = (5,10)\n\nimport os\nimport copy\nimport gc\nimport pickle","b9bba966":"df_train = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/tabular-playground-series-nov-2021\/test.csv\")","1ac889e9":"df_train.head()","3a62ba7b":"df_test.head()","b0d31ef9":"y = df_train.pop(\"target\")","8cf35577":"FEATURES = df_train.columns[1:]\nFEATURES","02a5abeb":"for f in FEATURES:\n  df_train[f] = (df_train[f] - df_train[f].min())\n  df_train[f] = df_train[f] \/ df_train[f].max()\n  df_test[f] = (df_test[f] - df_test[f].min())\n  df_test[f] = df_test[f] \/ df_test[f].max()","5fa6d278":"df_train.head()","6e2622f3":"df_test.head()","4b6359ef":"X_train, X_test, y_train, y_test = train_test_split(df_train[FEATURES].to_numpy(), y.to_numpy(), test_size=0.2, shuffle=True)","b9f786d4":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","46f2d649":"model = keras.models.Sequential()\nmodel.add(layers.Dense(128, input_shape=(100, ), activation=\"relu\"))\nmodel.add(layers.Dense(128, activation=\"relu\"))\nmodel.add(layers.Dense(128, activation=\"relu\"))\nmodel.add(layers.Dense(128, activation=\"relu\"))\nmodel.add(layers.Dense(128, activation=\"relu\"))\nmodel.add(layers.Dense(1, activation=\"sigmoid\"))\n\nmodel.compile(loss=keras.losses.MeanSquaredError(), optimizer=\"adam\", metrics=[\"AUC\"])\nmodel.summary()","7e303de3":"model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=64, epochs=10)","bc618203":"pred = model.predict(df_test[FEATURES].to_numpy())","8bc58836":"pred","e533aef7":"df_pred = pd.DataFrame(pred, index=df_test[\"id\"], columns=[\"target\"])","cbedbba8":"df_pred.to_csv(os.path.join(\"sub.csv\"), index=True)","5f134acc":"# public score 0.74222","96ee197a":"Read dataset.","72ec5b64":"No feature has nan values. So we normalize."}}