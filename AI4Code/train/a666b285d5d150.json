{"cell_type":{"de9ccdb3":"code","f3577f5d":"code","0d04da1e":"code","ab5c14e6":"code","2a34cc70":"code","724cc562":"code","f05cbc2a":"code","25e84b77":"code","47ced04a":"code","8a504b50":"code","79a57d92":"code","639cafab":"code","aecfacbe":"code","e882aa1f":"code","17b98655":"code","5bb87b2a":"code","e05135f4":"markdown","9c146add":"markdown","96bbc182":"markdown","5561e1b7":"markdown","b4bfae0e":"markdown","2ff9ef81":"markdown","bd8b98a1":"markdown","3062aa9d":"markdown","fceac884":"markdown","4ecb9e08":"markdown","ab16bed2":"markdown","e56d2fc2":"markdown","e1cf1fc6":"markdown","174ea5dc":"markdown","8bbb8a88":"markdown","b1ce5bad":"markdown","25ba10e4":"markdown","bb220f02":"markdown","c61b422d":"markdown"},"source":{"de9ccdb3":"import numpy as np\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport itertools\nfrom PIL import Image\nfrom IPython.core import display as ICD\n%matplotlib inline\ndef convert_to_df(csv): # needs to be repaired\n    df = pd.DataFrame(data=csv)[0].str.split(',',expand=True)  \n    header = df.iloc[0]\n    df = df[1:]\n    df.columns = header\n    return df","f3577f5d":"# If you are using a local machine you will need to create a JSON metadata file containing your USER_ID and USER_SECRET (  ~\/.kaggle\/kaggle.json) \n# and likewise if you are creating a dataset or a kernel each dataset or kernel will need to be paired with a custom JSON metadata file.  \n# More information on creating JSON metadata files can be found in the official documentation ([Link #1](https:\/\/github.com\/Kaggle\/kaggle-api#api-credentials), [Link #2](https:\/\/github.com\/Kaggle\/kaggle-api\/wiki\/Dataset-Metadata), [Link #3](https:\/\/github.com\/Kaggle\/kaggle-api\/wiki\/Kernel-Metadata)) \n# but for the sake of portability we will create these JSON metadata files and we will perform all other computations within the Kaggle Kernel itself.  \n# Note that the user_secret is tied to a specific user_id and can be accessed from within the \"Account\" tab on your Kaggle profile by clicking on the \"Create New API Key\" button. \n\n# begin secret_api_token code so that nobody steals my API token.  Remove this section after forking this kernel.\nfrom shutil import copyfile\ncopyfile(src = \"..\/input\/private_kaggle_api_token.py\", dst = \"..\/working\/private_kaggle_api_token.py\")\nfrom private_kaggle_api_token import *\nprivate_kaggle_api_token = private_kaggle_api_token()\n# end secret_api_token code that hopefully prevents people from stealing my API token.  Remove this section after forking this kernel.\n\n# Create a JSON file containing user-specific metadata. \n# This step is required if you want to access the Kaggle API.  \n# For more info see: https:\/\/github.com\/Kaggle\/kaggle-api#api-credentials\nUSER_ID = 'paultimothymooney' # REPLACE WITH YOUR OWN USER NAME\nUSER_SECRET = private_kaggle_api_token # REPLACE WITH YOUR OWN PRIVATE API TOKEN\nimport os, json, nbformat, pandas as pd\nKAGGLE_CONFIG_DIR = os.path.join(os.path.expandvars('$HOME'), '.kaggle')\nos.makedirs(KAGGLE_CONFIG_DIR, exist_ok = True)\nwith open(os.path.join(KAGGLE_CONFIG_DIR, 'kaggle.json'), 'w') as f:\n    json.dump({'username': USER_ID, 'key': USER_SECRET}, f)\n!chmod 600 {KAGGLE_CONFIG_DIR}\/kaggle.json","0d04da1e":"competitions_list_csv = !kaggle competitions list --csv\ncompetitions_list_df = convert_to_df(competitions_list_csv)\nprint('20 Competitions from Kaggle.com\/competitions:')\nICD.display(competitions_list_df.head(10))","ab5c14e6":"digit_recognizer_search_in_competitions_csv = !kaggle competitions list -s digit-recognizer --csv\ndigit_recognizer_search_in_competitions_df = convert_to_df(digit_recognizer_search_in_competitions_csv)\nprint('Search Results for Digit-Recognizer Competition:')\nICD.display(digit_recognizer_search_in_competitions_df.head(10))","2a34cc70":"leaderboard_list_csv = !kaggle competitions leaderboard digit-recognizer -s --csv\nleaderboard_list_df = convert_to_df(leaderboard_list_csv)\nprint('Leaderboard for MNIST Competition:')\nICD.display(leaderboard_list_df.head(10))","724cc562":"# Create a dummy submission file for the digit-recognizer competition\nlist_1=[]\nfor i in range(28000):\n    i=i+1\n    list_1.append(i)\nlist_2 = [7]*28000\nkerasmnist = os.path.join('.', 'working\/kerasmnist')\nos.makedirs(kerasmnist, exist_ok = True)\ndf = pd.DataFrame(data={\"ImageId\": list_1, \"Label\": list_2})\ndf = df.to_csv(\".\/working\/kerasmnist\/mnist_dummy_submission.csv\", sep=',',index=False)\n!kaggle competitions submit digit-recognizer -f \".\/working\/kerasmnist\/mnist_dummy_submission.csv\" -m \"MNIST Submission from API\"","f05cbc2a":"datasets_list_csv = !kaggle datasets list --csv\ndatasets_list_df = convert_to_df(datasets_list_csv)\nprint('20 Datasets from Kaggle.com\/datasets:')\ndatasets_list_df_sorted = datasets_list_df.sort_values(by='lastUpdated', ascending=0)\nICD.display(datasets_list_df_sorted.head(10))","25e84b77":"fashion_minst_search_in_datasets_csv = !kaggle datasets list -s fashion-mnist --csv\nfashion_minst_search_in_datasets_df = convert_to_df(fashion_minst_search_in_datasets_csv)\nprint('Search Results for Fashion-MNIST Dataset:')\nICD.display(fashion_minst_search_in_datasets_df.head(10))","47ced04a":"# download fashion mnist dataset from Kaggle datasets platform\nfashionmnist = os.path.join('.', 'working\/fashionmnist')\nos.makedirs(fashionmnist, exist_ok = True)\n!kaggle datasets download -d zalando-research\/fashionmnist -p working\/fashionmnist\n\n# download digit recognizer dataset from Kaggle competitions platform\ndigitrecognizer = os.path.join('.', 'working\/digitrecognizer')\nos.makedirs(digitrecognizer, exist_ok = True)\n!kaggle competitions download digit-recognizer -p working\/digitrecognizer","8a504b50":"data = pd.read_csv('working\/digitrecognizer\/train.csv')\ntestingData = pd.read_csv('working\/digitrecognizer\/test.csv')\nX = data.drop(\"label\",axis=1).values\ny = data.label.values\n\ndef describeDataset(features,labels):\n    print(\"\\n'X' shape: %s.\"%(features.shape,))\n    print(\"\\n'y' shape: %s.\"%(labels.shape,))\n    print(\"\\nUnique elements in y: %s\"%(np.unique(y)))\ndescribeDataset(X,y)\n\ndef displayMNIST(flatData,labels):\n    \"\"\" Displays 10 handwritten digis and 10 classification labels \"\"\"\n    figure,image = plt.subplots(1,10, figsize=(10,10))\n    for i in range(10):\n        image[i].imshow(flatData[i].reshape((28,28)))\n        image[i].axis('off')\n        image[i].set_title(labels[i])\ndisplayMNIST(X,y)\n\ndef displayMNIST2(flatData,labels):\n    \"\"\"Display MNIST data\"\"\"\n    flatData2 = data.drop(\"label\",axis=1).values\n    X2 = np.insert(flatData2,0,1,axis=1)\n    figure,image = plt.subplots(1,10, figsize=(10,10))\n    for i in range(10):\n        tenImages = np.random.choice(X2.shape[0], 10)\n        image[i].imshow(X2[tenImages,1:].reshape(-1,28))\n        image[i].axis('off')\ndisplayMNIST2(X,y)","79a57d92":"# Tidy up the data before uploading it\n!zip -r fashionmnist.zip working\/fashionmnist\/\n!zip -r digitrecognizer.zip working\/digitrecognizer\/\n\n# Create dataset-specific JSON metadata file\n# https:\/\/github.com\/Kaggle\/kaggle-api\/wiki\/Dataset-Metadata\ndataset_meta_template = lambda user_id, title, file_id, nb_path: {\"title\": f\"{title}\", \n  \"subtitle\": \"My awesomer subtitle\",\n  \"description\": \"My awesomest description\",\n  \"id\": f\"{user_id}\/{file_id}\",\n  \"licenses\": [{\"name\": \"CC0-1.0\"}],\n  \"resources\": \n    [{\"path\": \"digitrecognizer.zip\",\n      \"description\": \"kaggle.com\/c\/digit-recognizer\",},\n    {\"path\": \"fashionmnist.zip\",\n      \"description\": \"kaggle.com\/zalando-research\/fashionmnist\"}],}\n\nname_of_new_dataset='Kaggle-Dataset-Demo-From-API'\npath_of_current_data = 'working'\nwith open('dataset-metadata.json', 'w') as f:\n    meta_dict = dataset_meta_template(USER_ID,name_of_new_dataset,name_of_new_dataset,path_of_current_data)\n    json.dump(meta_dict, f)\n!kaggle datasets create -p .","639cafab":"from keras.datasets import mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nkerasmnist = os.path.join('.', 'working\/kerasmnist')\nos.makedirs(kerasmnist, exist_ok = True)\nnp.savez(\"working\/kerasmnist\/MNIST_X_train\", x_train)\nnp.savez(\"working\/kerasmnist\/MNIST_Y_train\", y_train)\nnp.savez(\"working\/kerasmnist\/MNIST_X_test\", x_test)\nnp.savez(\"working\/kerasmnist\/MNIST_Y_test\", y_test)\n!kaggle datasets version -p . -m \"Added more MNIST data\"","aecfacbe":"kernel_listings_csv = !kaggle kernels list -s kaggle-kernel-demo --csv\nkernel_listings_df = convert_to_df(kernel_listings_csv)\nprint('Listing of Kernels on Kaggle for Search Term \"Demo\":')\nICD.display(kernel_listings_df.head(10))","e882aa1f":"# Create a JSON file containing kernel-specific metadata\n# https:\/\/github.com\/Kaggle\/kaggle-api\/wiki\/Kernel-Metadata\nnotebook_meta_template = lambda user_id, title, file_id, nb_path: {'id': f'{user_id}\/{file_id}',\n 'title': f'{title}',\n 'code_file': nb_path,\n 'language': 'python',\n 'kernel_type': 'notebook',\n 'is_private': True,\n 'enable_gpu': True,\n 'enable_internet': False,\n 'keywords': [],\n 'dataset_sources': ['keras\/resnet50', 'paultimothymooney\/sample-images-for-kaggle-demos'],\n 'kernel_sources': [],\n 'competition_sources': []}\n\nname_of_new_kernel='Kaggle-Kernel-Demo-From-API'\npath_of_current_kernel = 'working\/demokernel\/kaggle-kernel-demo-pre-trained-image-classifier.ipynb'\nwith open('kernel-metadata.json', 'w') as f:\n    meta_dict = notebook_meta_template(USER_ID,name_of_new_kernel,name_of_new_kernel,path_of_current_kernel)\n    json.dump(meta_dict, f)\n    \n# download kaggle kernel demo\ndemokernel = os.path.join('.', 'working\/demokernel')\nos.makedirs(demokernel, exist_ok = True)\n!kaggle kernels pull paultimothymooney\/kaggle-kernel-demo-pre-trained-image-classifier -p working\/demokernel","17b98655":"# publish a new version of the kaggle kernel demo\n!kaggle kernels push -p .","5bb87b2a":"!zip -r kerasmnist.zip working\/kerasmnist\/\n!zip -r demokernel.zip working\/demokernel\/\n!rm -rf working\/*\n!rm -r working\n!rm -r kernel-metadata.json\n!rm -r dataset-metadata.json\n!rm -r private_kaggle_api_token.py\n!rm -r __pycache__\/private_kaggle_api_token.cpython-36.pyc # Please dont steal my token","e05135f4":"View and search for kernels on Kaggle","9c146add":"<a id='section1'><\/a>\n**Explore Kaggle Competitions: View Listings and Make Submissions**","96bbc182":"Tidy up the notebook output","5561e1b7":"Create a new dataset using the data you just downloaded","b4bfae0e":"Download a kernel using the Kaggle API","2ff9ef81":"View datasets listings on Kaggle","bd8b98a1":"Publish a kernel using the Kaggle API","3062aa9d":"<a id='section3'><\/a>\n**Explore Kaggle Kernels: View, Download, and Publish Kernels**","fceac884":"Search for a specific competition on Kaggle","4ecb9e08":"Display leaderboard results for a specific competition on Kaggle","ab16bed2":"Download datasets from Kaggle","e56d2fc2":"Submit to a competition on Kaggle","e1cf1fc6":"View listing of competitions on Kaggle","174ea5dc":"Before you begin you will need to:\n* Expand the right-side menu within the kernel editor\n* Enable Internet\n* Install the custom package \"kaggle\"\n* Replace the USER_ID and USER_SECRET with your own username and API token \n* * Your API token can be found in the \"Account\" tab on your Kaggle profile.\n","8bbb8a88":"Add a new file to the dataset and create a new dataset version","b1ce5bad":"Search for a specific dataset on Kaggle","25ba10e4":"<a id='section2'><\/a>\n**Explore Kaggle Datasets: View, Download, and Create Datasets **","bb220f02":" Access and visualize the data you just downloaded","c61b422d":"**Exploring the Kaggle API**\n* [Submit to Competitions](#section1)\n* [Create Datasets](#section2)\n* [Publish Kernels](#section3)\n\n\n\nThis notebook is meant to supplement the official documentation for the Kaggle API ([Link #1,](https:\/\/github.com\/Kaggle\/kaggle-api) [Link #2](https:\/\/www.kaggle.com\/docs\/api))."}}