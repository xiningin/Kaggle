{"cell_type":{"61d793cb":"code","3835561a":"code","585c7fd3":"code","13ad598a":"code","e05f6c19":"code","552d69dd":"code","2e150152":"code","f66b9de2":"code","bed6bc60":"code","c177294e":"code","4c29d765":"code","9b671c02":"code","54eb4298":"code","f9575895":"code","d03c2225":"code","ffa483b0":"code","f009f5d7":"code","674ee8e1":"code","8eecb076":"code","392a370e":"code","5c2311a6":"code","07a99edb":"code","aa3a0dd0":"code","c5570260":"code","e1d6a361":"code","cba1f1a4":"code","532ef2ce":"code","f687d0cf":"code","bfbff859":"code","9f64ce38":"code","cc205d70":"code","fce2ce7c":"code","e9515e8a":"code","41a75ffb":"code","6deb14f7":"code","83c251f7":"code","42c0c3e2":"code","aa796ec0":"code","0cb11147":"code","aa821390":"code","3d4108b3":"code","239f6979":"code","6544634b":"code","d8b55506":"code","8c4401f0":"code","ffbe0b7d":"code","ec90b5bd":"code","f7ae4f2e":"code","2749b507":"code","b1664125":"code","ab35d449":"code","f6cf4827":"code","b4608506":"code","f647b9c6":"code","a346d6bb":"code","688932c3":"code","cdbcf8de":"code","8f3b8d98":"code","c2e8761a":"code","72acc9c8":"code","c2a1477f":"code","495ba118":"code","d95aa372":"code","b6625747":"code","2276ee22":"code","1b27972c":"code","ddddb168":"code","eafb69eb":"code","07d7d0bb":"code","eb2733af":"code","36854f3d":"markdown","03aa281e":"markdown","38dcb275":"markdown","dc03fb12":"markdown","3d1947e4":"markdown","664730f6":"markdown","abc73dcd":"markdown","a01403c9":"markdown","a80cf68e":"markdown","8a81e036":"markdown","2e0b1463":"markdown"},"source":{"61d793cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option(\"display.max_columns\", 100)\nimport cufflinks as cf\ncf.set_config_file(offline=True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        pass\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3835561a":"state = 'NC'\ncandidate1 = 'tillis, thom'\ncandidate2 = 'cunningham, cal'","585c7fd3":"import bs4\nimport urllib.request\ndef read_table(page_url):\n    page=urllib.request.urlopen(page_url)\n    soup = bs4.BeautifulSoup(page, 'lxml')\n    table = soup.find(name='table')\n    result = dict()\n    for tr in table.findAll('tr'):\n        tds = tr.findAll('td')\n        if len(tds) >=2:\n            result[tds[0].text] = tds[1].text\n    return result","13ad598a":"def human_format(num):\n    magnitude = 0\n    while abs(num) >= 1000:\n        magnitude += 1\n        num \/= 1000.0\n    # add more suffixes if you need them\n    return '%.2f%s' % (num, ['', 'K', 'M', 'G', 'T', 'P'][magnitude])","e05f6c19":"all_candidates = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/All candidates.csv\")\nall_candidates.head()","552d69dd":"def correct_receipts_disbursements(df):\n    cond = (df['TRANS_FROM_AUTH'] != 0.0) & (df['TRANS_TO_AUTH'] != 0.0)\n    df.loc[cond, 'TTL_RECEIPTS_CORRECTED'] = df['TTL_RECEIPTS'] - df['TRANS_FROM_AUTH']\n    df['TTL_RECEIPTS_CORRECTED'] = df['TTL_RECEIPTS_CORRECTED'].fillna(df['TTL_RECEIPTS'])\n    df.loc[cond, 'TTL_DISB_CORRECTED'] = df['TTL_DISB'] - df['TRANS_TO_AUTH']\n    df['TTL_DISB_CORRECTED'] = df['TTL_DISB_CORRECTED'].fillna(df['TTL_DISB'])\n    return df\nall_candidates = correct_receipts_disbursements(all_candidates)\nall_candidates.head()","2e150152":"def map_cand_ici(df):\n    ici_map = {'C': 'Challenger', 'I': 'Incumbent', 'O': 'Open Seat'}\n    df['CAND_ICI_FULL'] = df['CAND_ICI'].map(ici_map)\n    return df\nall_candidates = map_cand_ici(all_candidates)\nall_candidates.head()","f66b9de2":"party_codes = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/party-code-descriptions\/\")\ndef map_cand_party(df):\n    df['CAND_PTY_AFFILIATION_FULL'] = df['CAND_PTY_AFFILIATION'].map(party_codes)\n    return df\nall_candidates = map_cand_party(all_candidates)\nall_candidates.head()","bed6bc60":"def fix_cand_office_district(df):\n    if df['CAND_OFFICE_DISTRICT'].dtype == 'int64':\n        df['CAND_OFFICE_DISTRICT'] = df['CAND_OFFICE_DISTRICT'].map(lambda x: str(x).zfill(2) if not pd.isna(x) else np.nan)\n    elif df['CAND_OFFICE_DISTRICT'].dtype == 'float':\n        df['CAND_OFFICE_DISTRICT'] = df['CAND_OFFICE_DISTRICT'].map(lambda x: str(int(x)).zfill(2) if not pd.isna(x) else np.nan)\n    return df\nall_candidates = fix_cand_office_district(all_candidates)\nall_candidates.head()","c177294e":"candidates = all_candidates[(all_candidates['CAND_NAME'].str.contains(f\"{candidate1}\", case=False)) | \n               (all_candidates['CAND_NAME'].str.contains(f\"{candidate2}\", case=False))]\ncandidates","4c29d765":"from IPython.display import HTML\ncandidates_summary = candidates.groupby('CAND_NAME').agg({'TTL_RECEIPTS_CORRECTED': 'sum',\n                                                         'TTL_DISB_CORRECTED': 'sum', 'COH_COP': 'sum',\n                                                         'CVG_END_DT': 'max'}).reset_index()\ncandidates_summary['Raised'] = '$' + candidates_summary['TTL_RECEIPTS_CORRECTED'].map(human_format).astype('str')\ncandidates_summary['Spent'] = '$' + candidates_summary['TTL_DISB_CORRECTED'].map(human_format).astype('str')\ncandidates_summary['Cash on Hand'] = '$' + candidates_summary['COH_COP'].map(human_format).astype('str')\ncandidates_summary['Last Report date'] = pd.to_datetime(candidates_summary['CVG_END_DT']).dt.strftime('%b %d %Y')\nHTML(candidates_summary.rename(columns={'CAND_NAME': 'Candidate'})[['Candidate', 'Raised', 'Spent', 'Cash on Hand', 'Last Report date']].to_html(index=False))","9b671c02":"republican = candidates[candidates['CAND_PTY_AFFILIATION'] == 'REP']['CAND_NAME'].values[0]\ndemocrat = candidates[candidates['CAND_PTY_AFFILIATION'] == 'DEM']['CAND_NAME'].values[0]\nprint(republican)\ndemocrat","54eb4298":"candidates['color'] = candidates['CAND_PTY_AFFILIATION'].map({'DEM': 'blue', 'REP': 'red'})\ncandidates['second_color'] = candidates['CAND_PTY_AFFILIATION'].map({'DEM': 'lightblue', 'REP': 'pink'})\ncolor_map = dict()\nsecondary_color_map = dict()\nfor row in candidates[['CAND_NAME', 'color', 'second_color']].values:\n    color_map[row[0]] = row[1]\n    secondary_color_map[f\"For {row[0]}\"] = row[1]\n    secondary_color_map[f\"Against {row[0]}\"] = row[2]\nprint(color_map)\n#candidates.head()\nsecondary_color_map","f9575895":"candidates_desc = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/all-candidates-file-description\/\")\ncandidates_desc = {key.strip():val.strip() for key, val in candidates_desc.items()}\ncandidates_desc","d03c2225":"candidates_desc.update({'TTL_RECEIPTS_CORRECTED': 'Total Receipts', 'TTL_DISB_CORRECTED': 'Total Disbursements'})\ncamp_finance_summary_cols = ['TTL_RECEIPTS_CORRECTED', 'TTL_DISB_CORRECTED', 'TRANS_FROM_AUTH', 'COH_BOP', 'COH_COP', 'CAND_CONTRIB', 'CAND_LOANS', 'OTHER_LOANS', 'DEBTS_OWED_BY', 'TTL_INDIV_CONTRIB', 'POL_PTY_CONTRIB', 'OTHER_POL_CMTE_CONTRIB']\nmy_candidates = candidates.groupby('CAND_NAME').agg({x: 'sum' for x in camp_finance_summary_cols}).reset_index()\ntotal_finance = my_candidates.set_index('CAND_NAME')[camp_finance_summary_cols].transpose()\ntotal_finance = total_finance.rename(candidates_desc)\ntotal_finance.iplot(kind='bar', title='Campaign finance summary', colors=color_map)","ffa483b0":"contributions_from_committees = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Contributions from committees to candidates  independent expenditures.csv\")\ncontributions_from_committees.head()","f009f5d7":"def fix_zip_codes(col, df):\n    if df[col].dtype == 'float':\n        df[col] = df[col].map(lambda x: str(int(x)).zfill(5) if not pd.isna(x) else np.nan)\n    elif df[col].dtype == 'int64':\n        df[col] = df[col].map(lambda x: str(x).zfill(5) if not pd.isna(x) else np.nan)\n    return df\ncontributions_from_committees = fix_zip_codes('ZIP_CODE', contributions_from_committees)\ncontributions_from_committees.head()","674ee8e1":"def map_amndt_ind(df):\n    df['AMNDT_IND_FULL'] = df['AMNDT_IND'].map({'N': 'New', 'A': 'Amendment', 'T': 'Termination'})\n    return df\ncontributions_from_committees = map_amndt_ind(contributions_from_committees)\ncontributions_from_committees.head()","8eecb076":"report_type_map = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/report-type-code-descriptions\/\")\ndef map_report_type(df):\n    df['RPT_TP_FULL'] = df['RPT_TP'].map(report_type_map)\n    return df\ncontributions_from_committees = map_report_type(contributions_from_committees)\ncontributions_from_committees.head()","392a370e":"election_type_map = {\n    'P': 'Primary',\n    'G': 'General',\n    'O': 'Other',\n    'C': 'Convention',\n    'R': 'Runoff',\n    'S': 'Special',\n    'E': 'Recount'\n}\ndef parse_transaction_pgi(df):\n    df['ELECTION_TYPE'] = df['TRANSACTION_PGI'].astype('object').str[0].map(election_type_map)\n    df['ELECTION_YEAR'] = df['TRANSACTION_PGI'].astype('object').str[1:].map(\n        lambda x: int(x) if x and not pd.isnull(x) else np.nan).fillna(0).astype('int')\n    return df\ncontributions_from_committees = parse_transaction_pgi(contributions_from_committees)\ncontributions_from_committees.head()","5c2311a6":"def parse_image_num(df):\n    df['IMAGE_DATE'] = pd.to_datetime(df['IMAGE_NUM'].astype('str').str[:8])\n    df['IMAGE_SOURCE'] = df['IMAGE_NUM'].astype('str').str[8:10].map(\n        lambda x: 'Senate' if x == '02' else 'FEC Paper' if x == '03' else 'FEC Electronic')\n    return df\ncontributions_from_committees = parse_image_num(contributions_from_committees)\ncontributions_from_committees.head()","07a99edb":"transaction_type_map = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/transaction-type-code-descriptions\/\")\ndef map_transaction_type(df):\n    df['TRANSACTION_TP_FULL'] = df['TRANSACTION_TP'].map(transaction_type_map)\n    return df\ncontributions_from_committees = map_transaction_type(contributions_from_committees)\ncontributions_from_committees.head()","aa3a0dd0":"entity_type_map = {\n    'CAN': 'Candidate',\n    'CCM': 'Candidate Committee',\n    'COM': 'Committee',\n    'IND': 'Individual (a person)',\n    'ORG': 'Organization (not a committee and not a person)',\n    'PAC': 'Political Action Committee',\n    'PTY': 'Party Organization'\n}\ndef map_entity_type(df):\n    df['ENTITY_TP_FULL'] = df['ENTITY_TP'].map(entity_type_map)\n    return df\ncontributions_from_committees = map_entity_type(contributions_from_committees)\ncontributions_from_committees.head()","c5570260":"# We remove the original rows that have been amended later on\ncontributions_from_committees[['TRAN_ID_parent', 'TRAN_ID_child']] = contributions_from_committees['TRAN_ID'].str.split('.', n=1, expand=True)\nmerged = contributions_from_committees.merge(contributions_from_committees, on=['CMTE_ID', 'CAND_ID', 'TRAN_ID_parent'])\namended_contribs = merged[(merged['AMNDT_IND_x'] == 'N') & (merged['AMNDT_IND_y'] == 'A') & (merged['TRANSACTION_DT_y'] > merged['TRANSACTION_DT_x'])]['SUB_ID_x']\ncontributions_from_committees = contributions_from_committees[~contributions_from_committees['SUB_ID'].isin(amended_contribs)]\ncontributions_from_committees.head()","e1d6a361":"contributions_from_committees['TRANSACTION_DT'] = pd.to_datetime(\n    contributions_from_committees['TRANSACTION_DT'].fillna(0).astype('int').astype('str')\n    .replace('0', np.NaN).str.zfill(8), format='%m%d%Y')\ncontributions_from_committees.head()","cba1f1a4":"committee_contribs = contributions_from_committees.merge(candidates, on='CAND_ID')\ncommittee_contribs.head()","532ef2ce":"by_entity = committee_contribs.groupby(['CAND_NAME', 'ENTITY_TP_FULL']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_entity_pivot = by_entity.pivot_table(values='TRANSACTION_AMT', index='ENTITY_TP_FULL', columns='CAND_NAME')\nby_entity_pivot.iplot(kind='bar', colors=color_map, title='Total Committee contributions & expenditures by entities')","f687d0cf":"by_transaction = committee_contribs.groupby(['CAND_NAME', 'TRANSACTION_TP_FULL']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_transaction_pivot = by_transaction.pivot_table(values='TRANSACTION_AMT', index='TRANSACTION_TP_FULL', columns='CAND_NAME')\nby_transaction_pivot.iplot(kind='bar', colors=color_map, title='Total committee contributions & expenditures by transaction type')","bfbff859":"committee_master = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Committee master.csv\")\ncommittee_master.head()","9f64ce38":"committee_contribs = committee_contribs.merge(committee_master, on='CMTE_ID', how='left', suffixes=('', '_y'))\ncommittee_contribs.head()","cc205d70":"contribs = committee_contribs[committee_contribs['TRANSACTION_TP'].isin(['24K', '24Z'])]\ncontribs.head()","fce2ce7c":"largest_contribs = contribs.groupby('CMTE_NM').agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10).reset_index()\nlargest_contribs['TRANSACTION_AMT'] = largest_contribs['TRANSACTION_AMT'].map(lambda x: human_format(x))\nlargest_contribs.rename({'CMTE_NM': 'COMMITTEE_NAME'}, axis=1)","e9515e8a":"from IPython.display import display\nfor cand_name in candidates['CAND_NAME'].unique():\n    print(\"-\"*60)\n    print(f\"Committees with most contributions for {cand_name}\")\n    print(\"-\"*60)\n    df = contribs[(contribs['CAND_NAME'] == cand_name)]\n    result = pd.DataFrame(df[['CMTE_NM', 'TRANSACTION_AMT']].groupby(['CMTE_NM']).agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10)).reset_index().rename({'CMTE_NM': 'COMMITTEE_NAME'}, axis=1)\n    result['TRANSACTION_AMT'] = result['TRANSACTION_AMT'].map(lambda x: human_format(x))\n    display(result)","41a75ffb":"ctrbs_by_dt = contribs.groupby(['TRANSACTION_DT', 'CAND_NAME']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nctrbs_by_dt = ctrbs_by_dt.pivot_table(index='TRANSACTION_DT', columns=['CAND_NAME'], fill_value=0.0).droplevel(level=0, axis=1)\nctrbs_by_dt.cumsum().iplot(title='Total cumulative Committee Contributions for candidates over time', colors=color_map)","6deb14f7":"committee_contribs['for_against'] = committee_contribs['TRANSACTION_TP'].map({'24A': 'Against', '24E': 'For'})\nexpenditures = committee_contribs[~committee_contribs['for_against'].isnull()]\nexpenditures.head()","83c251f7":"largest_expenditures = expenditures.groupby('CMTE_NM').agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10).reset_index()\nlargest_expenditures['TRANSACTION_AMT'] = largest_expenditures['TRANSACTION_AMT'].map(lambda x: human_format(x))\nlargest_expenditures.rename({'CMTE_NM': 'COMMITTEE_NAME'}, axis=1)","42c0c3e2":"from IPython.display import display\nfor cand_name in candidates['CAND_NAME'].unique():\n    for for_against in ['For', 'Against']:\n        print(\"-\"*60)\n        print(f\"Committees with most expenditures {for_against} {cand_name}\")\n        print(\"-\"*60)\n        df = expenditures[(expenditures['for_against'] == for_against) & (expenditures['CAND_NAME'] == cand_name)]\n        result = pd.DataFrame(df[['CMTE_NM', 'TRANSACTION_AMT']].groupby(['CMTE_NM']).agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10)).reset_index().rename({'CMTE_NM': 'COMMITTEE_NAME'}, axis=1)\n        result['TRANSACTION_AMT'] = result['TRANSACTION_AMT'].map(lambda x: human_format(x))\n        display(result)","aa796ec0":"exp_by_dt = expenditures.groupby(['TRANSACTION_DT', 'CAND_NAME', 'for_against']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nexp_by_dt = exp_by_dt.pivot_table(index='TRANSACTION_DT', columns=['CAND_NAME', 'for_against'], fill_value=0.0).droplevel(level=0, axis=1)\nexp_by_dt.columns = exp_by_dt.columns.map(lambda x: x[1] + \" \" + x[0])\nexp_by_dt.cumsum().iplot(title='Total cumulative Expenditures for or against candidates over time', colors=secondary_color_map)","0cb11147":"# First, we determine which committees are for or against a candidate so that we can bucket the contribution appropriately\ncommittee_contribs['for_against'] = committee_contribs['for_against'].fillna('For')\ncommittee_contribs['CAND_NAME'] = np.where(((committee_contribs['for_against'] == 'Against') & \n                                            (committee_contribs['CAND_NAME'] == democrat)) |\n                                            ((committee_contribs['for_against'] == 'For') & \n                                            (committee_contribs['CAND_NAME'] == republican)),\n                                           republican, democrat)\ncommittee_contribs.head()","aa821390":"cmte_cand_mapping = committee_contribs.groupby(['CMTE_ID', 'CAND_NAME']).agg({'TRANSACTION_AMT': 'sum'})\ncmte_cand_mapping = cmte_cand_mapping.pivot_table(index='CMTE_ID', columns='CAND_NAME').fillna(0.0).droplevel(0, axis=1).reset_index()\ncmte_cand_mapping = cmte_cand_mapping.loc[~(cmte_cand_mapping[democrat] == cmte_cand_mapping[republican])]\ncmte_cand_mapping['CAND_NAME'] = np.where(cmte_cand_mapping[democrat] > cmte_cand_mapping[republican], democrat, republican)\ncmte_cand_mapping.head()","3d4108b3":"# cmte_cand_mapping = committee_contribs[['CMTE_ID', 'CAND_NAME']].drop_duplicates(ignore_index=True)\n# cmte_cand_counts = cmte_cand_mapping.groupby('CMTE_ID').agg({'CAND_NAME': 'count'})\n# single_cmte = cmte_cand_counts[cmte_cand_counts['CAND_NAME'] == 1].reset_index()['CMTE_ID']\n# single_cmte","239f6979":"s = f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Contributions by individuals.csv\"\ncmd_result = ! wc -l \"{s}\"\ncontribs_cnt = int(cmd_result[0].split()[0])\ncontribs_cnt","6544634b":"# Iteration 42 has some bad data that needs to be fixed manually as below\ndef handle_iteration_42(df):\n    bad_row = df[df['TRANSACTION_DT'] == 'SAN DIEGO']\n    bad_rows = bad_row['OCCUPATION'].str.split('\\n').values[0]\n    other_rows = []\n    for i, row in enumerate(bad_rows):\n        if i==0:\n            first_row_last_part = row.split('|')\n        elif i == len(bad_rows)-1:\n            last_row_first_part = row.split('|')\n        else:\n            other_rows.append(row.split('|'))\n    all_dfs = [df]\n    first_row = list(df.loc[bad_row.index].iloc[:, 0:12].copy().values[0]) + first_row_last_part\n    all_dfs.append(pd.DataFrame([first_row], columns=df.columns))\n    all_dfs.append(pd.DataFrame(other_rows, columns=df.columns))\n    all_dfs.append(pd.DataFrame([last_row_first_part + list(df.loc[bad_row.index].iloc[:, 13:].copy().values[0])\n                                   + [np.NaN, np.NaN, np.NaN, np.NaN, np.NaN]], columns=df.columns))\n    df = pd.concat(all_dfs, axis=0)\n    df = df.drop(index=bad_row.index).reset_index()\n    return df","d8b55506":"import gc\nchunksize = 100000\ncontribs_by_indivs = []\ncols = None\nfor i in range(contribs_cnt\/\/chunksize):\n    print(f\"Processing chunk {i}\")\n    df = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Contributions by individuals.csv\", skiprows=i*chunksize, nrows=chunksize)\n    if i == 0:\n        cols = df.columns\n    else:\n        df.columns = cols\n    if i == 42:\n        df = handle_iteration_42(df)\n    interesting_ones = df[df['CMTE_ID'].isin(cmte_cand_mapping['CMTE_ID'])]\n    if len(interesting_ones) > 0:\n        contribs_by_indivs.append(interesting_ones)\n#len(contribs_by_indivs)","8c4401f0":"contribs_by_indivs = pd.concat(contribs_by_indivs)\ncontribs_by_indivs.head()","ffbe0b7d":"contribs_by_indivs = contribs_by_indivs[(~contribs_by_indivs['TRANSACTION_DT'].isnull())]\ncontribs_by_indivs['TRANSACTION_DT'] = pd.to_datetime(\n    contribs_by_indivs['TRANSACTION_DT'].fillna(0).astype('int').astype('str')\n    .replace('0', np.NaN).str.zfill(8), format='%m%d%Y')\ncontribs_by_indivs.head()","ec90b5bd":"contribs_by_indivs = contribs_by_indivs[(contribs_by_indivs['TRANSACTION_DT'] >= '2018-01-01') & (contribs_by_indivs['TRANSACTION_DT'] < '2021-01-01')]\ncontribs_by_indivs.head()","f7ae4f2e":"contribs_by_indivs = contribs_by_indivs.merge(cmte_cand_mapping[['CMTE_ID', 'CAND_NAME']], on='CMTE_ID')\n#contribs_by_indivs = contribs_by_indivs.merge(candidates[['CAND_ID', 'CAND_NAME']], on='CAND_ID')\ncontribs_by_indivs.head()","2749b507":"from IPython.display import display\nfor cand_name in candidates['CAND_NAME'].unique():\n    print(\"-\"*60)\n    print(f\"Most individual contributions for {cand_name}\")\n    print(\"-\"*60)\n    df = contribs_by_indivs[(contribs_by_indivs['CAND_NAME'] == cand_name)]\n    result = pd.DataFrame(df[['NAME', 'TRANSACTION_AMT']].groupby(['NAME']).agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(20)).reset_index()\n    result['TRANSACTION_AMT'] = result['TRANSACTION_AMT'].map(lambda x: human_format(x))\n    display(result)","b1664125":"from IPython.display import display\nindiv_contribs_cmte = contribs_by_indivs.merge(committee_master[['CMTE_ID', 'CMTE_NM']], on='CMTE_ID')\nfor cand_name in candidates['CAND_NAME'].unique():\n    print(\"-\"*80)\n    print(f\"Committees that received the most individual contributions for {cand_name}\")\n    print(\"-\"*80)\n    df = indiv_contribs_cmte[(indiv_contribs_cmte['CAND_NAME'] == cand_name)]\n    result = pd.DataFrame(df[['CMTE_NM', 'TRANSACTION_AMT']].groupby(['CMTE_NM']).agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10)).reset_index()\n    result['TRANSACTION_AMT'] = result['TRANSACTION_AMT'].map(lambda x: human_format(x))\n    display(result)","ab35d449":"contribs_by_indivs.loc[contribs_by_indivs['EMPLOYER'] == 'SELF', 'EMPLOYER'] = 'SELF-EMPLOYED'\ncontribs_by_indivs.loc[contribs_by_indivs['EMPLOYER'] == 'SELF EMPLOYED', 'EMPLOYER'] = 'SELF-EMPLOYED'\ncontribs_by_indivs.loc[contribs_by_indivs['EMPLOYER'] == 'NOT EMPLOYED', 'EMPLOYER'] = 'UNEMPLOYED'\ncontribs_by_indivs","f6cf4827":"top_employers = contribs_by_indivs['EMPLOYER'].value_counts()[:10].index\nby_employer = contribs_by_indivs[contribs_by_indivs['EMPLOYER'].isin(top_employers)].groupby(['CAND_NAME', 'EMPLOYER']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_employer_pivot = by_employer.pivot_table(values='TRANSACTION_AMT', index='EMPLOYER', columns='CAND_NAME')\nby_employer_pivot.iplot(kind='bar', colors=color_map, title='Total Individual contributions by Employer')","b4608506":"top_occupations = set(contribs_by_indivs['OCCUPATION'].value_counts()[:13].index) - set(['RETIRED', 'SELF-EMPLOYED', 'NOT EMPLOYED'])\nby_occupation = contribs_by_indivs[contribs_by_indivs['OCCUPATION'].isin(top_occupations)].groupby(['CAND_NAME', 'OCCUPATION']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_occupation_pivot = by_occupation.pivot_table(values='TRANSACTION_AMT', index='OCCUPATION', columns='CAND_NAME')\nby_occupation_pivot.iplot(kind='bar', colors=color_map, title='Total Individual contributions by Occupation')","f647b9c6":"by_date = contribs_by_indivs.groupby(['CAND_NAME', 'TRANSACTION_DT']).agg({'TRANSACTION_AMT': 'sum'})\nby_date_cumsum = by_date.groupby(level=0).cumsum().reset_index().pivot_table(values='TRANSACTION_AMT', index='TRANSACTION_DT', columns='CAND_NAME')\nby_date_cumsum.iplot(kind='line', colors=color_map, title='Total individual contributions over time')","a346d6bb":"contribs_by_indivs['in_state'] = np.where(contribs_by_indivs['STATE'] == state, 'in-state', 'out-of-state')\nby_in_state = contribs_by_indivs.groupby(['CAND_NAME', 'in_state']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_in_state.pivot_table(values='TRANSACTION_AMT', index='in_state', columns='CAND_NAME').iplot(kind='bar', colors=color_map, title='In-state vs Out-of-state total individual contributions')","688932c3":"by_state_and_cand = contribs_by_indivs.groupby(['STATE', 'CAND_NAME']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_state_and_cand.head()","cdbcf8de":"by_state = by_state_and_cand.pivot_table(values='TRANSACTION_AMT', index='STATE', columns='CAND_NAME').reset_index()    \ncand_cols = set(by_state.columns) - {'STATE'}\nby_state.loc[:, cand_cols] = by_state[cand_cols].fillna(0.0)\nby_state.head()","8f3b8d98":"if democrat not in by_state.columns:\n    by_state[democrat] = 0.0\nif republican not in by_state.columns:\n    by_state[republican] = 0.0","c2e8761a":"by_state['Total'] = by_state[democrat] + by_state[republican]\nby_state['RepublicanVsTotalRatio'] = by_state[republican]\/by_state['Total']\nby_state.head()","72acc9c8":"import plotly.express as px\nfig = px.choropleth(by_state, locations=\"STATE\", color=\"RepublicanVsTotalRatio\", hover_name=\"STATE\", \n                    hover_data=[democrat, republican], color_continuous_scale='bluered',\n                    locationmode='USA-states', scope='usa', \n                    title='Total individual contributions for Republican vs Democrat by state',\n                    range_color=[0, 1])\nfig.show()","c2a1477f":"contribs_by_indivs['YEAR_MONTH'] = contribs_by_indivs['TRANSACTION_DT'].dt.to_period('M')\ncontribs_by_indivs.head()","495ba118":"by_date_state_and_cand = contribs_by_indivs.groupby(['YEAR_MONTH', 'STATE', 'CAND_NAME']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_date_state_and_cand.head()","d95aa372":"dates = by_date_state_and_cand['YEAR_MONTH'].unique()\nstates = by_date_state_and_cand['STATE'].unique()\ncands = by_date_state_and_cand['CAND_NAME'].unique()\ncands","b6625747":"by_date_state_and_cand_skel = pd.DataFrame([{'YEAR_MONTH': date, 'STATE': state, 'CAND_NAME': cand} for date in dates for state in states for cand in cands])\nby_date_state_and_cand_skel['TRANSACTION_AMT'] = 0.0\nby_date_state_and_cand_skel.head()","2276ee22":"by_date_state_and_cand = by_date_state_and_cand_skel.merge(by_date_state_and_cand, how='left', on=['YEAR_MONTH', 'STATE', 'CAND_NAME'])\nby_date_state_and_cand['TRANSACTION_AMT'] = np.where(by_date_state_and_cand['TRANSACTION_AMT_y'].isnull(), by_date_state_and_cand['TRANSACTION_AMT_x'], by_date_state_and_cand['TRANSACTION_AMT_y'])\nby_date_state_and_cand = by_date_state_and_cand.drop('TRANSACTION_AMT_x', axis=1).drop('TRANSACTION_AMT_y', axis=1)\nby_date_state_and_cand.head()","1b27972c":"by_date_state_and_cand = by_date_state_and_cand.sort_values('YEAR_MONTH').set_index(['YEAR_MONTH', 'STATE', 'CAND_NAME']).groupby(level=[1,2]).cumsum().reset_index()\nby_date_state_and_cand.head()","ddddb168":"by_date_state = by_date_state_and_cand.pivot_table(values='TRANSACTION_AMT', index=['YEAR_MONTH', 'STATE'], columns='CAND_NAME').reset_index()    \ncand_cols = set(by_date_state.columns) - {'YEAR_MONTH', 'STATE'}\nby_date_state.loc[:, cand_cols] = by_date_state[cand_cols].fillna(0.0)\nby_date_state.head()","eafb69eb":"if democrat not in by_date_state.columns:\n    by_date_state[democrat] = 0.0\nif republican not in by_date_state.columns:\n    by_date_state[republican] = 0.0","07d7d0bb":"by_date_state['Total'] = by_date_state[democrat] + by_date_state[republican]\nby_date_state['RepublicanVsTotalRatio'] = by_date_state[republican]\/by_date_state['Total']\nby_date_state = by_date_state.sort_values('YEAR_MONTH')\nby_date_state['YEAR_MONTH'] = by_date_state['YEAR_MONTH'].astype('str')\nby_date_state.head()","eb2733af":"import plotly.express as px\nfig = px.choropleth(by_date_state, locations=\"STATE\", color=\"RepublicanVsTotalRatio\", hover_name=\"STATE\", \n                    hover_data=[democrat, republican], color_continuous_scale='bluered',\n                    locationmode='USA-states', scope='usa', animation_frame='YEAR_MONTH',\n                    title='Total individual contributions for Republican vs Democrat by state over time',\n                    range_color=[0, 1])\nfig.show()","36854f3d":"## Contributions & expenditures from committees","03aa281e":"Tillis has better ending cash but Cunningham has more individual contributions & total receipts & disbursements","38dcb275":"# North Carolina Senate race 2020 between Thom Tillis & Cal Cunningham in terms of Campaign Finance","dc03fb12":"Cunningham has much more expenditures for him than Tillis","3d1947e4":"### Contributions from committees","664730f6":"## Candidate Campaign Finance summaries","abc73dcd":"**Here are the committees with the largest expenditures**","a01403c9":"#### Here are the committees with the largest contributions","a80cf68e":"## Contributions from individuals","8a81e036":"Tillis received a lot more contributions from committees than Cunningham","2e0b1463":"### Committee expenditures for candidates"}}