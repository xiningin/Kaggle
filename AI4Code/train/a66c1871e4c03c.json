{"cell_type":{"16be38cc":"code","4c91f5e6":"code","b7f58225":"code","98871916":"code","eee27cdf":"code","4fa1828d":"code","26474af6":"code","dacd50db":"code","6c3908ec":"code","0a17c5a7":"code","a668f6e7":"code","2716ecda":"code","26c46a21":"code","4dc04502":"code","fe290343":"code","beaa18d6":"code","1077b453":"code","1d4644dd":"code","52121293":"code","04f80a1d":"code","aac67d2a":"code","a76fb7c1":"code","15abbd0e":"code","a748ab8a":"code","5aee0116":"code","be126d0a":"code","63622d25":"code","902e9038":"code","7b95b647":"code","fb24fa12":"code","65663507":"markdown","1a53e79d":"markdown","f3c9e09d":"markdown","600d209c":"markdown","01ab05f9":"markdown","d6da7dec":"markdown","77fdeaaa":"markdown","53fb9d23":"markdown"},"source":{"16be38cc":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')","4c91f5e6":"df = pd.read_csv('..\/input\/imdb-data\/title_basics.csv',low_memory=False)","b7f58225":"df.head()","98871916":"df.shape","eee27cdf":"df.drop('tconst',axis = 1, inplace=True)","4fa1828d":"df = df[~df.duplicated()]","26474af6":"df.isna().sum()","dacd50db":"df.dropna(inplace=True)","6c3908ec":"df.head()","0a17c5a7":"titletype = [i for i in Counter(df.titleType).items()]","a668f6e7":"x = 'titletype'\ny = 'count'\nfig = px.bar(x = [i[0] for i in sorted(titletype,key=lambda x: x[1])[::-1][:11]],y = [i[1] for i in sorted(titletype,key=lambda x: x[1])[::-1][:11]],color = [i[0] for i in sorted(titletype,key=lambda x: x[1])[::-1][:11]],template='plotly_dark')\nfig.update_layout(xaxis_title = f'{str(x).title()}',yaxis_title = f'{str(y).title()}',title = f'Distribution Based On {str(x).title()} & {str(y).title()}')\nfig.show()","2716ecda":"df['genres'] = np.where(df['genres']=='\\\\N','Unknown',df['genres'])","26c46a21":"genrez = [i for i in Counter(df.genres).items()]","4dc04502":"x = 'top 10 genres'\ny = 'count'\nfig = px.bar(x = [i[0] for i in sorted(genrez,key=lambda x: x[1])[::-1][:10]],y = [i[1] for i in sorted(genrez,key=lambda x: x[1])[::-1][:10]],color = [i[0] for i in sorted(genrez,key=lambda x: x[1])[::-1][:10]],template='plotly_dark')\nfig.update_layout(xaxis_title = f'{str(x).title()}',yaxis_title = f'{str(y).title()}',title = f'Distribution Based On {str(x).title()} & {str(y).title()}')\nfig.show()","fe290343":"df['runtimeMinutes'] = np.where(df['runtimeMinutes']=='\\\\N',0,df['runtimeMinutes'])","beaa18d6":"df['runtimeMinutes'] = df['runtimeMinutes'].apply(pd.to_numeric,errors = 'ignore')","1077b453":"longmins = df.nlargest(10,'runtimeMinutes')['primaryTitle']","1d4644dd":"x = 'count'\ny = 'top 10 Longest Watchables'\nfig = px.bar(x = [i for i in sorted(longmins.index)],y = [i for i in sorted(longmins)],color = [i for i in sorted(longmins)],template='plotly_dark')\nfig.update_layout(xaxis_title = f'{str(x).title()}',yaxis_title = f'{str(y).title()}',title = f'Distribution Based On {str(x).title()} & {str(y).title()}')\nfig.show()","52121293":"shorttimes = df[~(df['runtimeMinutes'] == 0)]","04f80a1d":"shortmins = shorttimes.nsmallest(20,'runtimeMinutes')[['primaryTitle','runtimeMinutes']]","aac67d2a":"x = 'count'\ny = 'top 10 Smallest Watchables'\nfig = px.bar(x = [i for i in shortmins['primaryTitle']],y = [i for i in shortmins['runtimeMinutes']],color = [i[0] for i in shortmins['primaryTitle']],template='plotly_dark')\nfig.update_layout(xaxis_title = f'{str(x).title()}',yaxis_title = f'{str(y).title()}',title = f'Distribution Based On {str(x).title()} & {str(y).title()}')\nfig.show()","a76fb7c1":"isadult = Counter(df.isAdult)","15abbd0e":"x = 'Adult v\/s Family Friendly'\ny = 'Count'\nfig = px.bar(x = [i[0] for i in isadult.items()],y = [i[1] for i in isadult.items()],color = [i[1] for i in isadult.items()],template='plotly_dark')\nfig.update_layout(xaxis_title = f'{str(x).title()}',yaxis_title = f'{str(y).title()}',title = f'Distribution Based On {str(x).title()} & {str(y).title()}',height = 500,width = 700)\nfig.show()","a748ab8a":"df['endYear'] = np.where(df['endYear']=='\\\\N',0,df['endYear'])","5aee0116":"df['startYear'] = np.where(df['startYear']=='\\\\N',0,df['startYear'])","be126d0a":"df['endYear'] = df['endYear'].apply(pd.to_numeric,errors = 'ignore')","63622d25":"df['startYear'] = df['startYear'].apply(pd.to_numeric,errors = 'ignore')","902e9038":"df['yearDiff'] = df['endYear'] - df['startYear']","7b95b647":"longestyearmovies = df.nlargest(11,'yearDiff')[['primaryTitle','yearDiff']][1:11]","fb24fa12":"x = 'Longest span tv series'\ny = 'years'\nfig = px.bar(x = [i for i in longestyearmovies['primaryTitle']],y = [i for i in longestyearmovies['yearDiff']],color = [i for i in longestyearmovies['primaryTitle']],template='plotly_dark')\nfig.update_layout(xaxis_title = f'{str(x).title()}',yaxis_title = f'{str(y).title()}',title = f'Distribution Based On {str(x).title()} & {str(y).title()}')\nfig.show()","65663507":"## Title Types Distribution","1a53e79d":"## Watchables with Shortest Runtime (Minutes)","f3c9e09d":"## Watchables with longest Runtime (Minutes)","600d209c":"## EDA","01ab05f9":"## Distribution b\/w Longest Span TV Series & Years","d6da7dec":"## Adult v\/s Family Friendly","77fdeaaa":"## Genres Distribution","53fb9d23":"## If this notebook helped you in getting meaningful insights, Support by upvoting"}}