{"cell_type":{"a20ba3ef":"code","567ece54":"code","88255299":"code","47fb6ca2":"code","10413c50":"code","d13e2422":"code","7519f357":"code","55111067":"code","307c4c04":"code","d4ffc066":"code","68862458":"code","c5a9c28d":"code","0e4b0b76":"code","ad253733":"code","485628cd":"code","206802e8":"code","f222bed4":"code","612faaed":"code","8df17357":"code","358c55dd":"code","895bdb9d":"code","2ac33f34":"code","be115717":"code","1b69bea8":"code","8e0c3eab":"code","95109121":"code","416224e7":"code","efe64cb7":"code","892280e1":"code","da674738":"code","7ad16aa8":"code","77b78d12":"code","4209e242":"code","77d212f2":"code","87e018f3":"code","76b5e823":"code","2bc7a895":"code","55818ceb":"code","ca93bf9c":"code","0e0b0b1c":"code","d5a6c52c":"code","5f4377ba":"code","a7b9c266":"code","5542f340":"code","bb301edf":"code","ae83fc1a":"code","efc7595f":"code","4204bede":"code","8b6ef767":"code","3ea3db32":"code","4465635d":"code","9bb0e752":"code","ed4637a6":"code","06ff77d6":"code","4d782483":"code","da51aaf1":"code","2eef4823":"code","7c25060d":"code","9b4e7016":"code","dd82a0df":"code","62a16056":"code","2d33f8d5":"code","c36d53bf":"code","276011da":"code","be0122da":"code","e09e2168":"code","29a94e9a":"code","e109dd62":"code","a4c962cf":"code","b35395dc":"code","76e7554d":"code","56de53a8":"code","5fb1fd9f":"code","5635680a":"code","9f704b54":"code","1bad3368":"code","11788385":"code","eb748d40":"code","c39e4e89":"code","cf4a42df":"code","042a571c":"code","f5e7f304":"code","4178f67f":"code","22c33742":"code","b8fa5119":"code","00d9f5a3":"markdown","171656d3":"markdown","db20f91f":"markdown","8c9cd94e":"markdown","57bf4b3d":"markdown","14d47411":"markdown","92ccf6fd":"markdown","307de75d":"markdown","edb7db29":"markdown","a0a6ed74":"markdown","514015cb":"markdown","686666dd":"markdown","cc58e812":"markdown","7acbdbaf":"markdown"},"source":{"a20ba3ef":"import pandas as pd","567ece54":"train_df = pd.read_csv('C:\/Users\/HP\/Foml-2021\/train.csv')","88255299":"test_df = pd.read_csv('C:\/Users\/HP\/Foml-2021\/test.csv')","47fb6ca2":"train_df = train_df.drop(['Report Number', 'Local Case Number', 'Agency Name', 'Off-Road Description', 'Municipality', 'Person ID', 'Vehicle ID', 'Vehicle Year', 'Vehicle Make', 'Vehicle Model', 'Equipment Problems'], axis = 1)","10413c50":"missing = round((train_df.isnull().sum()\/51490)*100, 2)\nmissing.loc[missing > 0]","d13e2422":"train_df.columns","7519f357":"train_df['Parked Vehicle'].value_counts()","55111067":"train_df['Driverless Vehicle'].value_counts()","307c4c04":"import matplotlib.pylab as plt\nimport seaborn as sns\n%matplotlib inline","d4ffc066":"df_select = train_df[['ACRS Report Type', 'Route Type','Road Name', 'Cross-Street Type',\n       'Cross-Street Name', 'Collision Type', 'Weather', 'Surface Condition', 'Injury Severity', 'Circumstance',\n       'Drivers License State', 'Vehicle Damage Extent',\n       'Vehicle First Impact Location', 'Vehicle Second Impact Location',\n       'Vehicle Body Type', 'Vehicle Movement', 'Vehicle Continuing Dir',\n       'Vehicle Going Dir', 'Driverless Vehicle',\n       'Parked Vehicle']]","68862458":"for i in df_select.columns:\n    df_select[i]=df_select[i].astype('category').cat.codes\n    ","c5a9c28d":"plt.figure(figsize=(13,13))\ncor = df_select.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.CMRmap_r)\nplt.show()","0e4b0b76":"train_df = train_df.drop(['Circumstance','Vehicle Body Type','Latitude', 'Longitude', 'Location'], axis=1)","ad253733":"train_df.columns","485628cd":"train_df = train_df.drop(['Non-Motorist Substance Abuse', 'Route Type','Drivers License State','Crash Date\/Time', 'Road Name', 'Cross-Street Type', 'Cross-Street Name', 'Weather', 'Injury Severity', 'Driverless Vehicle','Parked Vehicle'], axis=1)","206802e8":"len(train_df.columns)","f222bed4":"train_df.columns","612faaed":"test_df= test_df[['ACRS Report Type', 'Related Non-Motorist', 'Collision Type',\n       'Surface Condition', 'Light', 'Traffic Control',\n       'Driver Substance Abuse',\n       'Vehicle Damage Extent','Vehicle First Impact Location', 'Vehicle Second Impact Location',\n       'Vehicle Movement', 'Vehicle Going Dir', 'Vehicle Continuing Dir', 'Speed Limit']]","8df17357":"missing = round((train_df.isnull().sum()\/51490)*100, 2)\nmissing.loc[missing > 0]","358c55dd":"missing = round((test_df.isnull().sum()\/77234)*100, 2)\nmissing.loc[missing > 0]","895bdb9d":"train_df['Related Non-Motorist'].value_counts()","2ac33f34":"train_df['Related Non-Motorist'].fillna(value=0,inplace=True)\n\ntarget_list = [0 if i==0 else 1 for i in train_df['Related Non-Motorist']]\ntrain_df['Related Non-Motorist'] = target_list\ntrain_df['Related Non-Motorist'].value_counts()","be115717":"test_df['Related Non-Motorist'].fillna(value=0,inplace=True)\n\ntarget_list = [0 if i==0 else 1 for i in test_df['Related Non-Motorist']]\ntest_df['Related Non-Motorist'] = target_list\ntest_df['Related Non-Motorist'].value_counts()","1b69bea8":"train_df['Surface Condition'].fillna(value='DRY',inplace=True)","8e0c3eab":"test_df['Surface Condition'].fillna(value='DRY',inplace=True)","95109121":"train_df['Light'].fillna(value='DAYLIGHT',inplace=True)","416224e7":"test_df['Light'].fillna(value='DAYLIGHT',inplace=True)","efe64cb7":"#train_df['Non-Motorist Substance Abuse'].fillna(value=0,inplace=True)\n\n#target_list = [0 if i==0 else 1 for i in train_df['Non-Motorist Substance Abuse']]\n#train_df['Non-Motorist Substance Abuse'] = target_list\n#train_df['Non-Motorist Substance Abuse'].value_counts()","892280e1":"#test_df['Non-Motorist Substance Abuse'].fillna(value=0,inplace=True)\n\n#target_list = [0 if i==0 else 1 for i in test_df['Non-Motorist Substance Abuse']]\n#test_df['Non-Motorist Substance Abuse'] = target_list\n#test_df['Non-Motorist Substance Abuse'].value_counts()","da674738":"train_df['Collision Type'].fillna(value='SAME DIR REAR END',inplace=True)","7ad16aa8":"test_df['Collision Type'].fillna(value='SAME DIR REAR END',inplace=True)","77b78d12":"train_df['Vehicle Damage Extent'].fillna(value='UNKNOWN',inplace=True)","4209e242":"test_df['Vehicle Damage Extent'].fillna(value='UNKNOWN',inplace=True)","77d212f2":"train_df['Vehicle Second Impact Location'].fillna(value='UNKNOWN',inplace=True)","87e018f3":"test_df['Vehicle Second Impact Location'].fillna(value='UNKNOWN',inplace=True)","76b5e823":"train_df['Vehicle First Impact Location'].fillna(value='UNKNOWN',inplace=True)","2bc7a895":"test_df['Vehicle First Impact Location'].fillna(value='UNKNOWN',inplace=True)","55818ceb":"train_df['Vehicle Movement'].fillna(value='UNKNOWN',inplace=True)","ca93bf9c":"test_df['Vehicle Movement'].fillna(value='UNKNOWN',inplace=True)","0e0b0b1c":"train_df['Vehicle Continuing Dir'].fillna(value='Unknown',inplace=True)","d5a6c52c":"test_df['Vehicle Continuing Dir'].fillna(value='Unknown',inplace=True)","5f4377ba":"train_df['Vehicle Going Dir'].fillna(value='Unknown',inplace=True)","a7b9c266":"test_df['Vehicle Going Dir'].fillna(value='Unknown',inplace=True)","5542f340":"train_df['Traffic Control'].fillna(value='UNKNOWN',inplace=True)","bb301edf":"test_df['Traffic Control'].fillna(value='UNKNOWN',inplace=True)","ae83fc1a":"train_df['Driver Substance Abuse'].fillna(value='UNKNOWN',inplace=True)","efc7595f":"test_df['Driver Substance Abuse'].fillna(value='UNKNOWN',inplace=True)","4204bede":"sns.catplot(y='ACRS Report Type', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","8b6ef767":"sns.catplot(y='Collision Type', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","3ea3db32":"sns.catplot(y='Surface Condition', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","4465635d":"sns.catplot(y='Light', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","9bb0e752":"sns.catplot(y='Traffic Control', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","ed4637a6":"sns.catplot(y='Driver Substance Abuse', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","06ff77d6":"sns.catplot(y='Vehicle Damage Extent', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","4d782483":"sns.catplot(y='Vehicle Second Impact Location', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","da51aaf1":"sns.catplot(y='Vehicle Movement', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","2eef4823":"sns.catplot(y='Vehicle Continuing Dir', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","7c25060d":"sns.catplot(y='Speed Limit', hue='Fault', kind='count', data= train_df, height= 5, aspect=20\/6)","9b4e7016":"X = train_df[['ACRS Report Type', 'Related Non-Motorist', 'Collision Type',\n       'Surface Condition', 'Light', 'Traffic Control',\n       'Driver Substance Abuse',\n       'Vehicle Damage Extent', 'Vehicle First Impact Location', 'Vehicle Second Impact Location',\n       'Vehicle Movement', 'Vehicle Going Dir', 'Vehicle Continuing Dir', 'Speed Limit']]\ny = train_df[['Fault']]","dd82a0df":"for i in X.columns:\n    X[i] = X[i].astype('category').cat.codes\n","62a16056":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score","2d33f8d5":"model = XGBClassifier(booster='gbtree', objective='binary:logistic', random_state=2)","c36d53bf":"# Import cross_val_score\nfrom sklearn.model_selection import cross_val_score\n\n# Import numpy\nimport numpy as np\n\n# Obtain scores of cross-validation\nscores = cross_val_score(model, X, y, cv=5)\n\n# Display accuracy\nprint('Accuracy:', np.round(scores, 2))\n\n# Display mean accuracy\nprint('Accuracy mean: %0.2f' % (scores.mean()))","276011da":"# Import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n\nkfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)","be0122da":"# Obtain scores of cross-validation\nscores = cross_val_score(model, X, y, cv=kfold)\n\n# Display accuracy\nprint('Accuracy:', np.round(scores, 2))\n\n# Display mean accuracy\nprint('Accuracy mean: %0.2f' % (scores.mean()))","e09e2168":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, StratifiedKFold\n\nkfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)","29a94e9a":"def grid_search(params, random=False): \n    \n    xgb = XGBClassifier(booster='gbtree', objective='binary:logistic', random_state=2)\n    \n    kfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)\n    \n    if random:\n        grid = RandomizedSearchCV(xgb, params, cv=kfold, n_iter=20, n_jobs=-1, random_state=2)\n    else:\n        # Instantiate GridSearchCV as grid_reg\n        grid = GridSearchCV(xgb, params, cv=kfold, n_jobs=-1)\n    \n    # Fit grid_reg on X_train and y_train\n    grid.fit(X, y)\n\n    # Extract best params\n    best_params = grid.best_params_\n\n    # Print best params\n    print(\"Best params:\", best_params)\n    \n    # Compute best score\n    best_score = grid.best_score_\n\n    # Print best score\n    print(\"Best score: {:.5f}\".format(best_score))","e109dd62":"grid_search(params={'n_estimators':[100, 200, 400, 800]})","a4c962cf":"grid_search(params={'learning_rate':[0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5]})","b35395dc":"grid_search(params={'max_depth':[2, 3, 5, 6, 8]})","76e7554d":"grid_search(params={'gamma':[0, 0.01, 0.1, 0.5, 1, 2]})","56de53a8":"grid_search(params={'min_child_weight':[1, 2, 3, 4, 5]})","5fb1fd9f":"grid_search(params={'subsample':[0.5, 0.7, 0.8, 0.9, 1]})","5635680a":"grid_search(params={'colsample_bytree':[0.5, 0.7, 0.8, 0.9, 1]})","9f704b54":"# Import train_test_split\nfrom sklearn.model_selection import train_test_split\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=2)","1bad3368":"model = XGBClassifier(booster='gbtree', objective='binary:logistic', random_state=2)\neval_set = [(X_test, y_test)]\neval_metric='error'\nmodel.fit(X_train, y_train, eval_metric=eval_metric, eval_set=eval_set)\n# make predictions for test data\ny_pred = model.predict(X_test)\n# evaluate predictions\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","11788385":"model = XGBClassifier(booster='gbtree', objective='binary:logistic', random_state=2)\neval_set = [(X_test, y_test)]\neval_metric=\"error\"\nmodel.fit(X_train, y_train, eval_metric=eval_metric, eval_set=eval_set, early_stopping_rounds=10, verbose=True)\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","eb748d40":"model = XGBClassifier(random_state=2, n_estimators=5000)\neval_set = [(X_test, y_test)]\neval_metric=\"error\"\nmodel.fit(X_train, y_train, eval_metric=eval_metric, eval_set=eval_set, early_stopping_rounds=100)\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","c39e4e89":"for i in test_df.columns:\n    test_df[i] = test_df[i].astype('category').cat.codes","cf4a42df":"y_pred = model.predict(test_df)","042a571c":"type(y_pred)","f5e7f304":"Id = np.array(list(range(77235)))","4178f67f":"output = pd.DataFrame({\n\"Id\": Id,\n\"Fault\": y_pred\n})","22c33742":"output.head()","b8fa5119":"output.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","00d9f5a3":"There is no issue of constant features, with low variance. ","171656d3":"3. Feature selection using variance threshold, We are not using sklearn, variance thershold for this since, because that needs data to be integers.","db20f91f":"LABEL ENCODING","8c9cd94e":"4. Now checking the correlation matrix","57bf4b3d":"CATPLOT ANALYSIS GIVES US INSIGHT TO CATEGORIZE THE DATA","14d47411":"Convert the dtype into category to use categorical function ","92ccf6fd":"HANDLING CATEGORIES","307de75d":"2. Checking the missing values","edb7db29":"1. First removing those features which non important and doesnt make sense for driver to be at fault","a0a6ed74":"testing","514015cb":"# Feature selection","686666dd":"XG BOOST","cc58e812":"Features like Related Non-Motorist, Non-Motorist Substance Abuse, Circumstance have lot of null values, but could be very important for the model to know the situation, so we can check for other feature selection prospective then, in the end we can reach to sensible decision.","7acbdbaf":"HANDLING MISSING VALUES"}}