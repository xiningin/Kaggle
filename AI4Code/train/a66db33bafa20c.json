{"cell_type":{"3ee88eb7":"code","8f5feb8f":"code","4bd00877":"code","fbbc5a7b":"code","0506c0e6":"code","07fbfc8c":"code","2ebf2a5b":"code","009405ef":"code","a6c7869d":"code","2143aa4b":"code","8469ea26":"code","98b02ae7":"code","c7576228":"code","f3470197":"code","fb9c3954":"code","7102a708":"code","32136d4d":"code","f5d5fc24":"code","2386352c":"code","c27f1cb8":"code","7e113ce1":"code","14df025b":"code","7fcdf6d2":"code","1782b33e":"markdown","e34f329d":"markdown","9b7ddc55":"markdown","36f9b4d8":"markdown","1bac9e58":"markdown","991599f1":"markdown","4fe3532e":"markdown","c749e603":"markdown","52f42eb5":"markdown","5e188778":"markdown","403af1a4":"markdown","0c286d86":"markdown","06935f86":"markdown"},"source":{"3ee88eb7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nplt.style.use('classic')\nsns.set()\n\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier","8f5feb8f":"df = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')","4bd00877":"print(df.shape)\npd.set_option('display.max_columns', 23)\ndf.head(5)","fbbc5a7b":"df.isnull().sum().sum()","0506c0e6":"\nfig = plt.figure(constrained_layout=False, figsize=(17, 20))\nspec = gridspec.GridSpec(ncols=2, nrows=3, figure=fig)\nax1 = fig.add_subplot(spec[0, 0])\nax2 = fig.add_subplot(spec[0, 1])\nax3 = fig.add_subplot(spec[1, 0])\nax4 = fig.add_subplot(spec[1, 1])\nax5 = fig.add_subplot(spec[2, 0])\nax6 = fig.add_subplot(spec[2, 1])\n\nlabels = ['Female', 'Male']\nax1.pie(df['Gender'].value_counts(),labels = labels,  autopct='%.1f%%',\n        shadow=True, wedgeprops={'edgecolor': 'black'})\nax1.set_title('Proportion of Gender')\n\nlabels = df.Education_Level.value_counts().keys().tolist()\nax2.pie(df['Education_Level'].value_counts(), autopct='%.1f%%', labels=labels, \n       shadow=True, wedgeprops={'edgecolor':'black'})\nax2.set_title('Proportion of Education Level')\n\n\nsns.countplot(ax=ax3, x=df['Marital_Status'])\nax3.set_title('Marital Status of Customers')\n\nsns.countplot(ax=ax4, x=df['Income_Category'])\nax4.set_title('Income Category of Customers')\n\n\nsns.countplot(y='Card_Category', data=df, hue='Income_Category', ax=ax5).set_title('Card Category based on Income Status')\n\nsns.countplot(x='Attrition_Flag', data=df, ax=ax6).set_title('type of customers')\n\nplt.tight_layout()\nplt.show()","07fbfc8c":"fig = plt.figure(figsize=(8, 5), constrained_layout=True)\nspec = gridspec.GridSpec(nrows=2, ncols=1, figure=fig)\nax1 = fig.add_subplot(spec[0, 0])\nax2 = fig.add_subplot(spec[1, 0])\n\nsns.boxplot(x='Customer_Age', data=df, color='red',notch=True, linewidth=1, ax=ax1).set(title='Distribustion of Customer Age', \n                                                               xticks=[], xlabel='')\n\nax2.hist(df['Customer_Age'], color='red', alpha=0.4, edgecolor='black')\nax2.set_xlabel('Customer Age')\n","2ebf2a5b":"fig = plt.figure(figsize=(8, 5), constrained_layout=True)\nspec = gridspec.GridSpec(ncols=1, nrows=2, figure=fig)\nax1 = fig.add_subplot(spec[0, 0])\nax2 = fig.add_subplot(spec[1, 0])\n\nsns.boxplot(x='Credit_Limit', data=df, color='blue',notch=True, linewidth=1, ax=ax1).set(title='Distribution of Credit Limit', \n                                                           xlabel='', xticks=[])\nbins=[2500, 5000, 8000, 10000, 12000, 15000, 18000, 20000, 22000, 25000, 28000, 30000,33000,  35000 ]\nax2.hist(df['Credit_Limit'], bins=bins, color='blue', alpha=0.6, edgecolor='black')\nax2.set_xlabel('Credit Limit')","009405ef":"fig = plt.figure(figsize=(15, 5), constrained_layout=True)\nspec = gridspec.GridSpec(nrows=2, ncols=2, figure=fig)\n\nax1 = fig.add_subplot(spec[0, 0])\nax2 = fig.add_subplot(spec[0, 1])\nax3 = fig.add_subplot(spec[1, 0])\nax4 = fig.add_subplot(spec[1, 1])\n\nsns.boxplot(x='Months_Inactive_12_mon', data=df, color='orange',notch=True,linewidth=0.7, ax=ax1).set(title='Distribution of number of inactive months in the last 12 months', \n                                                                            xlabel='', xticks=[])\nbins=[1, 2, 3, 4, 5, 6]\nax3.hist(df['Months_Inactive_12_mon'],bins=bins, color='orange', alpha=0.5, edgecolor='black')\n\nsns.boxplot(x='Months_on_book', data=df, color='yellow',notch=True,linewidth=0.8, ax=ax2).set(title='Distribution of months the customer is part of the bank', \n                                                                   xlabel='', xticks=[])\nax4.hist(df['Months_on_book'], color='yellow', alpha=0.6, edgecolor='black')\nplt.show()\n\nfig2 = plt.figure(figsize=(15,5), constrained_layout=True)\nspec2 = gridspec.GridSpec(nrows=2, ncols=1, figure=fig2)\n\nax5 = fig2.add_subplot(spec2[0, 0])\nax6 = fig2.add_subplot(spec2[1, 0])\n\nsns.boxplot(x='Total_Trans_Amt', data=df, color='green', notch=True, linewidth=1, ax=ax5).set(title='Distribution of Total Transaction Amount', \n                                                                                             xlabel='', xticks=[])\nbins=[3000,4000, 5000,6000, 7000, 8000,9000, 10000,11000, 12000,13000,14000, 15000, 18000, 20000 ]\nax6.hist(df['Total_Trans_Amt'],bins=bins, color='green', alpha=0.6, edgecolor='black')\nplt.show()","a6c7869d":"df['Attrition_Flag'].replace({'Existing Customer': 0, \n                            'Attrited Customer': 1}, inplace=True)\n\ndf['Gender'].replace({'M': 0, 'F':1}, inplace=True)\n\ndf.replace({'Unknown': np.nan}, inplace=True)\ndf['Card_Category'].replace({'Platinum': np.nan})\n\ndf.dropna(inplace=True)\ndf = df.iloc[:, :-2]","2143aa4b":"\ndf2 = pd.concat([df.drop(['CLIENTNUM','Education_Level', \n                          'Marital_Status', 'Income_Category', 'Card_Category', \n                         'Total_Amt_Chng_Q4_Q1', 'Total_Ct_Chng_Q4_Q1'], axis=1), \n                pd.get_dummies(df['Education_Level']), \n                pd.get_dummies(df['Marital_Status']), \n                pd.get_dummies(df['Income_Category']), \n                pd.get_dummies(df['Card_Category'])], axis=1)\ndf2.reset_index(drop=True, inplace=True)","8469ea26":"df2.sample(5)","98b02ae7":"df2.columns","c7576228":"plt.figure(figsize=(40, 20))\nsns.heatmap(df2.corr('pearson'), annot=True)","f3470197":"x = df2.drop(['Attrition_Flag'], axis=1)\ny = df2['Attrition_Flag']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)","fb9c3954":"log = LogisticRegression(C=500, max_iter=50000)\nlog.fit(x_train, y_train)\nyhat1 = log.predict(x_test)\nprint('Logistic Regression :\\n\\n\\t', f'The Training model accuracy :{log.score(x_train, y_train)}\\n\\t',\n     f'The Test model accuracy: {log.score(x_test, y_test)}')\nprint(classification_report(y_test, yhat1))","7102a708":"s = []\nfor i in range(1, 10):\n    churn_tree = DecisionTreeClassifier(criterion='entropy', max_depth=i)\n    churn_tree.fit(x_train, y_train)\n    s.append(churn_tree.score(x_test, y_test))\n    \nx = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nfig = plt.figure(figsize=(8, 4))\nplt.plot(x, s, '--o', markersize=22, color='#e74c3c')\nplt.xlabel('max depth of tree')\nplt.ylabel('Accuracy')\nplt.xticks(x)\nplt.title('Churn Tree Accuracy')\nplt.show()","32136d4d":"churn_tree = DecisionTreeClassifier(criterion='entropy', max_depth=7)\nchurn_tree.fit(x_train, y_train)\nyhat2 = churn_tree.predict(x_test)\ncf_mat = confusion_matrix(y_test, yhat2)\nplt.figure(figsize=(5, 4))\nsns.heatmap(cf_mat, annot=True, fmt='g')\nplt.show()\n\n\nprint('Decision Tree Classifier :\\n\\n\\t', f'The Training model accuracy :{churn_tree.score(x_train, y_train)}\\n\\t',\n     f'The Test model accuracy: {churn_tree.score(x_test, y_test)}')\nprint(classification_report(y_test, yhat2))","f5d5fc24":"s = []\nfor i in range(4, 25):\n    churn_forest = RandomForestClassifier(criterion='gini', n_estimators=700, max_depth=i, random_state=42)\n    churn_forest.fit(x_train, y_train)\n    s.append(churn_forest.score(x_test, y_test))\n\nx = np.arange(4, 25)\nplt.figure(figsize=(13, 7))\nplt.plot(x, s, '--o', markersize=15, color='blue')\nplt.xlabel('max depth of forest')\nplt.ylabel('Accuracy')\nplt.xticks(x)\nplt.title('Churn forest Accuracy')\nplt.show()","2386352c":"churn_forest = RandomForestClassifier(criterion='gini', n_estimators=700, max_depth=20, random_state=42)\nchurn_forest.fit(x_train, y_train)\nyhat3 = churn_forest.predict(x_test)\nplt.figure(figsize=(5, 4))\ncf_mat = confusion_matrix(y_test, yhat3)\nsns.heatmap(cf_mat, annot=True, fmt='g')\nplt.show()\n\n\nprint('Random Forest Classifier :\\n\\n\\t', f'The Training model accuracy :{churn_forest.score(x_train, y_train)}\\n\\t',\n     f'The Test model accuracy: {churn_forest.score(x_test, y_test)}')\nprint(classification_report(y_test, yhat3))","c27f1cb8":"xgb = XGBClassifier(learning_rate=0.1, n_estimators=700, max_depth=13,\n                        min_child_weight=3, gamma=0.3, subsample=0.6, colsample_bytree=1.0,\n                        objective='binary:logistic', nthread=4, scale_pos_weight=1, random_state=42)\nxgb.fit(x_train, y_train, eval_metric='auc')\nyhat4 = xgb.predict(x_test)\n\nplt.figure(figsize=(5, 4))\ncf_mat = confusion_matrix(y_test, yhat4)\nsns.heatmap(cf_mat, annot=True, fmt='g')\nplt.show()\n\n\nprint('XGBoost Classifier :\\n\\n\\t', f'The Training model accuracy :{xgb.score(x_train, y_train)}\\n\\t',\n     f'The Test model accuracy: {xgb.score(x_test, y_test)}\\n')\nprint(classification_report(y_test, yhat4))","7e113ce1":"abc = AdaBoostClassifier(n_estimators=500, random_state=42)\nabc.fit(x_train, y_train)\nyhat5 = abc.predict(x_test)\n\nplt.figure(figsize=(5, 4))\ncf_mat = confusion_matrix(y_test, yhat5)\nsns.heatmap(cf_mat, annot=True, fmt='g')\nplt.show()\n\n\nprint('AdaBoost Classifier :\\n\\n\\t', f'The Training model accuracy :{abc.score(x_train, y_train)}\\n\\t',\n     f'The Test model accuracy: {abc.score(x_test, y_test)}\\n')\nprint(classification_report(y_test, yhat5))","14df025b":"knn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(x_train, y_train)\nyhat6 = knn.predict(x_test)\n\nplt.figure(figsize=(5, 4))\ncf_mat = confusion_matrix(y_test, yhat6)\nsns.heatmap(cf_mat, annot=True, fmt='g')\nplt.show()\n\n\nprint('KNeighbors Classifier :\\n\\n\\t', f'The Training model accuracy :{knn.score(x_train, y_train)}\\n\\t',\n     f'The Test model accuracy: {knn.score(x_test, y_test)}\\n')\nprint(classification_report(y_test, yhat6))","7fcdf6d2":"gbc = GradientBoostingClassifier()\ngbc.fit(x_train, y_train)\nyhat7 = gbc.predict(x_test)\n\nplt.figure(figsize=(5, 4))\ncf_mat = confusion_matrix(y_test, yhat7)\nsns.heatmap(cf_mat, annot=True, fmt='g')\nplt.show()\n\n\nprint('Gradient Boosting Classifier :\\n\\n\\t', f'The Training model accuracy :{gbc.score(x_train, y_train)}\\n\\t',\n     f'The Test model accuracy: {gbc.score(x_test, y_test)}\\n')\nprint(classification_report(y_test, yhat7))","1782b33e":"### Decision Tree Classifier","e34f329d":"## Modeling","9b7ddc55":"### KNeighbors Classifier","36f9b4d8":"# Credit Card Churn Prediction","1bac9e58":"## AdaBoostClassifier","991599f1":"### XGBoost Classifier","4fe3532e":"## Exploratory Data Analysis","c749e603":"## Data Preprocessing","52f42eb5":"### Random Forest Classifier","5e188778":"### Logistic Regression","403af1a4":"### Loading Libraries","0c286d86":"### Gradient Boosting Classifier","06935f86":"## Loading The Data"}}