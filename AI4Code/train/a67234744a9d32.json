{"cell_type":{"1bc638e8":"code","4b5b3e6f":"code","5fe72bc2":"code","c4b3977e":"code","df625058":"code","55c8b1b0":"code","d5cff3d9":"code","cc45db72":"code","e1d48678":"code","9351802c":"code","c81ba53d":"code","1d8fda11":"code","a95cf6b4":"code","7b0e6e54":"code","2daf012f":"code","4b28cff4":"code","31ae4632":"code","96f0d669":"code","f14c0327":"code","1ea07bb2":"code","98312933":"code","01bf6c8e":"code","b90f91b0":"code","a1848084":"code","8481b938":"code","e4f7706e":"code","0bf41238":"code","121a6cf4":"code","1d3b2569":"code","32575f81":"code","98de0656":"code","a95c815a":"code","e99f434d":"code","9be1b7a1":"code","7286875b":"code","c8c708ad":"code","ae885190":"code","f0835c75":"code","ea5c4932":"code","7002e9bb":"code","6c106643":"code","8f27f670":"code","af2ad109":"code","a260f094":"code","03237ee0":"code","392bfc2c":"code","5b259199":"code","42950731":"code","3a5471fd":"code","85315d6f":"code","4c8f83ab":"code","87846f2c":"code","1a5925c0":"code","521fc5c1":"code","088a4bb4":"code","f7386af5":"code","09f7a8bd":"code","a315040c":"code","3b0e6b8d":"code","faabb97a":"code","d89f3995":"code","75de11ab":"code","c337f762":"code","4de55d6d":"markdown","d6eed542":"markdown","51b01f48":"markdown","ca459358":"markdown","dae0db67":"markdown","a1d5aaa3":"markdown","b0e7978e":"markdown","2a5a83e2":"markdown"},"source":{"1bc638e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom mlxtend.frequent_patterns import apriori, association_rules\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b5b3e6f":"data = pd.read_excel(\"..\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\", sheet_name = \"Year 2010-2011\")","5fe72bc2":"data.head()","c4b3977e":"# iadeleri sildik\n\"\"\"\niadeler = []\nfor i,j in enumerate(df[\"Invoice\"].values):\n    if str(j).startswith(\"C\"):\n        iadeler.append(i)\n    \n\ndf.drop(iadeler, inplace=True) \n\"\"\"\ndata=data[~data[\"Invoice\"].astype(str).str.startswith(\"C\")]","df625058":"data.isna().sum()","55c8b1b0":"ba = data.copy()","d5cff3d9":"ba.dropna(subset = ['Description'], inplace=True) # nanlar\u0131 att\u0131k.","cc45db72":"ba.isna().sum()","e1d48678":"ba.head()","9351802c":"ba.shape","c81ba53d":"ba[\"Description\"] = ba[\"Description\"].astype(str).apply(lambda x: x.strip())","1d8fda11":"ba=ba[~ba[\"Description\"].astype(str).str.startswith(\"wrong\")]","a95cf6b4":"ba.shape","7b0e6e54":"# i\u015fimize yaramayan column'lar\u0131 att\u0131k.\nba.drop(columns=['StockCode', \"InvoiceDate\", \"Price\", \"Country\", \"Customer ID\"], inplace=True)","2daf012f":"ba['Description'].tail()","4b28cff4":"ba.head()","31ae4632":"ba.groupby(['Invoice','Description'])['Description'].count()","96f0d669":"# Invoice ve Description'a g\u00f6re gruplay\u0131p Quantityye g\u00f6re toplay\u0131p unstack yap\u0131yor\nbranch_order = (ba\n          .groupby(['Invoice', 'Description'])['Quantity'] \n          .sum().unstack().reset_index().fillna(0) \n          .set_index('Invoice'))","f14c0327":"branch_order.head()","1ea07bb2":"encoded = branch_order.applymap(lambda x: 1 if x != 0 else 0) # ","98312933":"encoded.head()","01bf6c8e":"freq_items = apriori(encoded, min_support=0.04, use_colnames=True, verbose=True)","b90f91b0":"freq_items","a1848084":"freq_items.sort_values('support', ascending=False)","8481b938":"association_rules(freq_items, metric = 'confidence', min_threshold=0.4).sort_values(['support','confidence'], ascending=[False,False])\n","e4f7706e":"rfm = data.copy()","0bf41238":"rfm.head()","121a6cf4":"rfm.dropna(inplace=True)","1d3b2569":"rfm.drop(columns=['StockCode', 'Country'], inplace=True) # i\u015fimize yaramayan columnlar\u0131 att\u0131k.","32575f81":"rfm[\"Customer ID\"] = rfm[\"Customer ID\"].astype(int) # CustomerID'yi integer'a \u00e7evirdik. \u00c7\u00fcnk\u00fc \u00e7irkin duruyordu.","98de0656":"rfm.head()","a95c815a":"# Fatura ba\u015f\u0131na ortalama ne kadar kazan\u0131lm\u0131\u015ft\u0131r? \nrfm['Total'] = rfm[\"Quantity\"] * rfm['Price']","e99f434d":"rfm.head()","9be1b7a1":"# Fatura ba\u015f\u0131 toplam kazan\u00e7\nrfm.groupby('Invoice').agg({'Total':'sum'}) ","7286875b":"# Ayk\u0131r\u0131 de\u011ferler var m\u0131? Varsa ka\u00e7 tane\nfor feature in [\"Quantity\",\"Price\",\"Total\"]:\n\n    Q1 = rfm[feature].quantile(0.01)\n    Q3 = rfm[feature].quantile(0.99)\n    IQR = Q3-Q1\n    upper = Q3 + 1.5*IQR\n    lower = Q1 - 1.5*IQR\n\n    if rfm[(rfm[feature] > upper) | (rfm[feature] < lower)].any(axis=None):\n        print(feature,\"yes\")\n        print(rfm[(rfm[feature] > upper) | (rfm[feature] < lower)].shape[0])\n    else:\n        print(feature, \"no\")","c8c708ad":"rfm['InvoiceDate'].min() # ilk tarih","ae885190":"rfm['InvoiceDate'].max() # son tarih","f0835c75":"today_date = dt.datetime(2011, 12 ,9) #bug\u00fcn\u00fcn tarihi","ea5c4932":"# M\u00fc\u015fteriler en son ne zaman al\u0131\u015fveri\u015f yapt\u0131?\nrfm.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}).head()","7002e9bb":"# Bug\u00fcnden itibaren ka\u00e7 g\u00fcn \u00f6nce al\u0131\u015fveri\u015f yap\u0131ld\u0131?\n(today_date - rfm.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"})).head() ","6c106643":"temp_df = (today_date - rfm.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"max\"}))\ntemp_df.rename(columns={\"InvoiceDate\": \"Recency\"}, inplace = True)","8f27f670":"temp_df.head()","af2ad109":"recency_df = temp_df[\"Recency\"].apply(lambda x: x.days) # G\u00fcnleri ald\u0131k.","a260f094":"recency_df.head()","03237ee0":"temp_df = rfm.groupby([\"Customer ID\",\"Invoice\"]).agg({\"Invoice\":\"count\"})","392bfc2c":"temp_df.head()","5b259199":"# Her m\u00fc\u015fterinin ka\u00e7 faturas\u0131 var?\ntemp_df.groupby(\"Customer ID\").agg({\"Invoice\":\"count\"}).head()","42950731":"freq_df = temp_df.groupby(\"Customer ID\").agg({\"Invoice\":\"sum\"})\nfreq_df.rename(columns={\"Invoice\": \"Frequency\"}, inplace = True)\nfreq_df.head()","3a5471fd":"monetary_df = rfm.groupby(\"Customer ID\").agg({\"Total\":\"sum\"})","85315d6f":"monetary_df.head()","4c8f83ab":"monetary_df.rename(columns={\"Total\": \"Monetary\"}, inplace = True)","87846f2c":"print(recency_df.shape,freq_df.shape,monetary_df.shape)","1a5925c0":"# rfm ad\u0131nda yeni bir DataFrame olu\u015fturup recency, frequency ve monetary'yi birle\u015ftirdik.\nrfm = pd.concat([recency_df, freq_df, monetary_df],  axis=1) ","521fc5c1":"rfm.head()","088a4bb4":"# Recency : En yak\u0131n tarihten en uzak tarihe g\u00f6re 5'ten 1'e skorlad\u0131k.\n# Frequency : S\u0131kl\u0131\u011fa g\u00f6re 1'den 5'e g\u00f6re skorlad\u0131k\n# Monetary : M\u00fc\u015fteriden kazan\u0131lan toplam paraya g\u00f6re skorlad\u0131k.\nrfm[\"RecencyScore\"] = pd.qcut(rfm['Recency'], 5, labels = [5, 4, 3, 2, 1])\nrfm[\"FrequencyScore\"] = pd.qcut(rfm['Frequency'], 5, labels = [1, 2, 3, 4, 5])\nrfm[\"MonetaryScore\"] = pd.qcut(rfm['Monetary'], 5, labels = [1, 2, 3, 4, 5])","f7386af5":"rfm.head()","09f7a8bd":"(rfm['RecencyScore'].astype(str) + \n rfm['FrequencyScore'].astype(str) + \n rfm['MonetaryScore'].astype(str)).head()","a315040c":"# M\u00fc\u015fteri segmentlerini belirledik\/tan\u0131mlad\u0131k. \nseg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At Risk',\n    r'[1-2]5': 'Can\\'t Loose',\n    r'3[1-2]': 'About to Sleep',\n    r'33': 'Need Attention',\n    r'[3-4][4-5]': 'Loyal Customers',\n    r'41': 'Promising',\n    r'51': 'New Customers',\n    r'[4-5][2-3]': 'Potential Loyalists',\n    r'5[4-5]': 'Champions'\n}","3b0e6b8d":"# Regex'e g\u00f6re Her m\u00fc\u015fteriyi segmentlere ay\u0131rd\u0131k.\nrfm['Segment'] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str)\nrfm['Segment'] = rfm['Segment'].replace(seg_map, regex=True)\nrfm.head()","faabb97a":"rfm[[\"Segment\", \"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"Segment\").agg([\"mean\",\"count\"])","d89f3995":"rfm[rfm[\"Segment\"] == \"Need Attention\"].head()\n","75de11ab":"need_att = pd.DataFrame()\nneed_att['Need Attention Customer ID'] = rfm[rfm['Segment'] == 'Need Attention'].index","c337f762":"need_att.to_csv('need_att.csv') # csv'ye \u00e7evirme","4de55d6d":"Recency (yenilik): M\u00fc\u015fterinin son sat\u0131n almas\u0131ndan bug\u00fcne kadar ge\u00e7en s\u00fcre\n\n-- Bug\u00fcn\u00fcn tarihi - Son sat\u0131n alma\n","d6eed542":"# RFM","51b01f48":"* JUMBO BAG PINK POLKADOT ve JUMBO BAG RED RETROSPOT t\u00fcm al\u0131\u015fveri\u015flerin %4'\u00fcnde birlikte bulunuyor. (support)\n* JUMBO BAG PINK POLKADOT alanlar\u0131n %67'si JUMBO BAG RED RETROSPOT de al\u0131yor. (confidence)\n* JUMBO BAG PINK POLKADOT al\u0131m\u0131 JUMBO BAG RED RETROSPOT al\u0131m\u0131n\u0131 6.6 kat art\u0131r\u0131yor. (lift)","ca459358":"Frequency (S\u0131kl\u0131k): Toplam sat\u0131n alma say\u0131s\u0131.","dae0db67":"### Frequency","a1d5aaa3":"### Monetary","b0e7978e":"Monetary (Parasal De\u011fer): M\u00fc\u015fterinin yapt\u0131\u011f\u0131 toplam harcama.","2a5a83e2":"### Recency"}}