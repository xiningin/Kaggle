{"cell_type":{"f89376fe":"code","5dbbd952":"code","6f8e4a57":"code","d6575457":"code","84fc9485":"code","7a395142":"code","7ca75d12":"code","50514f7b":"code","084a169c":"code","33f07e49":"code","a65e6f2f":"code","6ffa8bc5":"code","0dea484a":"code","7e8d9c22":"code","5cdfc216":"code","f6174a04":"code","d5276526":"code","a23b5498":"code","1f9b39a6":"code","75313f54":"markdown"},"source":{"f89376fe":"import pandas as pd\nimport numpy as np\nimport multiprocessing\nimport warnings\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nimport gc\nfrom time import time\nimport datetime\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, TimeSeriesSplit\nfrom sklearn.metrics import roc_auc_score\nwarnings.simplefilter('ignore')\nsns.set()\n%matplotlib inline","5dbbd952":"files = ['..\/input\/test_identity.csv', \n         '..\/input\/test_transaction.csv',\n         '..\/input\/train_identity.csv',\n         '..\/input\/train_transaction.csv',\n         '..\/input\/sample_submission.csv']","6f8e4a57":"\ndef load_data(file):\n    return pd.read_csv(file)\n\nwith multiprocessing.Pool() as pool:\n    test_id, test_tr, train_id, train_tr, sub = pool.map(load_data, files)","d6575457":"train = pd.merge(train_tr, train_id, on='TransactionID', how='left')\ntest = pd.merge(test_tr, test_id, on='TransactionID', how='left')\ndel test_id, test_tr, train_id, train_tr\ngc.collect()","84fc9485":"for col in tqdm_notebook(train.columns):\n    if train[col].dtype == 'object':\n        le = LabelEncoder()\n        le.fit(list(train[col].astype(str).values) + list(test[col].astype(str).values))\n        train[col] = le.transform(list(train[col].astype(str).values))\n        test[col] = le.transform(list(test[col].astype(str).values))   ","7a395142":"X = train.sort_values('TransactionDT').drop(['isFraud', 'TransactionDT', 'TransactionID'], axis=1)\ny = train.sort_values('TransactionDT')['isFraud']\ntest = test.sort_values('TransactionDT').drop(['TransactionDT', 'TransactionID'], axis=1)","7ca75d12":"del train\ngc.collect()","50514f7b":"featues_to_drop=list(X.columns)","084a169c":"for col in X.columns:\n\n        new_col_name = col+'_nan_indicator'\n        \n        X[new_col_name] = np.where(X[col].isna(),0,1)\n        test[new_col_name] = np.where(test[col].isna(),0,1)\n        ","33f07e49":"X.drop(columns=featues_to_drop,inplace=True,axis=1)","a65e6f2f":"test.drop(columns=featues_to_drop,inplace=True,axis=1)","6ffa8bc5":"params = {'num_leaves': 491,\n          'min_child_weight': 0.03454472573214212,\n          'feature_fraction': 0.3797454081646243,\n          'bagging_fraction': 0.4181193142567742,\n          'min_data_in_leaf': 106,\n          'objective': 'binary',\n          'max_depth': -1,\n          'learning_rate': 0.006883242363721497,\n          \"boosting_type\": \"gbdt\",\n          \"bagging_seed\": 11,\n          \"metric\": 'auc',\n          \"verbosity\": -1,\n          'reg_alpha': 0.3899927210061127,\n          'reg_lambda': 0.6485237330340494,\n          'random_state': 47\n         }","0dea484a":"folds = TimeSeriesSplit(n_splits=5)\n\naucs = list()\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = X.columns\n\ntraining_start_time = time()\nfor fold, (trn_idx, test_idx) in enumerate(folds.split(X, y)):\n    start_time = time()\n    print('Training on fold {}'.format(fold + 1))\n    \n    trn_data = lgb.Dataset(X.iloc[trn_idx], label=y.iloc[trn_idx])\n    val_data = lgb.Dataset(X.iloc[test_idx], label=y.iloc[test_idx])\n    clf = lgb.train(params, trn_data, 10000, valid_sets = [trn_data, val_data], verbose_eval=1000, early_stopping_rounds=500)\n    \n    feature_importances['fold_{}'.format(fold + 1)] = clf.feature_importance()\n    aucs.append(clf.best_score['valid_1']['auc'])\n    \n    print('Fold {} finished in {}'.format(fold + 1, str(datetime.timedelta(seconds=time() - start_time))))\nprint('-' * 30)\nprint('Training has finished.')\nprint('Total training time is {}'.format(str(datetime.timedelta(seconds=time() - training_start_time))))\nprint('Mean AUC:', np.mean(aucs))\nprint('-' * 30)","7e8d9c22":"feature_importances['average'] = feature_importances[['fold_{}'.format(fold + 1) for fold in range(folds.n_splits)]].mean(axis=1)\nfeature_importances.to_csv('feature_importances.csv')\n\nplt.figure(figsize=(16, 16))\nsns.barplot(data=feature_importances.sort_values(by='average', ascending=False).head(50), x='average', y='feature');\nplt.title('50 TOP feature importance over {} folds average'.format(folds.n_splits));","5cdfc216":"list(feature_importances.sort_values(by=['average'],ascending=False).feature[:30])","f6174a04":"# clf right now is the last model, trained with 80% of data and validated with 20%\nbest_iter = clf.best_iteration","d5276526":"clf = lgb.LGBMClassifier(**params, num_boost_round=best_iter)\nclf.fit(X, y)","a23b5498":"sub['isFraud'] = clf.predict_proba(test)[:, 1]","1f9b39a6":"sub.to_csv('ieee_cis_fraud_detection_v2.csv', index=False)","75313f54":"Interesting new features, at very least :)"}}