{"cell_type":{"e7fc2818":"code","96eefec6":"code","e2f914d8":"code","7ea6ce94":"code","f9839cd5":"code","789a2e2f":"code","b295d554":"code","da643995":"code","42c464ce":"code","51708029":"code","bd869306":"code","c05760a8":"code","35304c24":"code","10f940df":"code","31535ba9":"code","d0296820":"code","0c7a0334":"code","f44d99a6":"code","77e30f39":"code","7696c4b2":"code","7cd56357":"code","1554d077":"markdown","39eca1ab":"markdown","687c6f13":"markdown","38b7e22d":"markdown","ec841e61":"markdown","9a5ea293":"markdown","42579c1b":"markdown","cefbd143":"markdown","79150124":"markdown","182a3b0f":"markdown","3b9fe6ad":"markdown","8cba0e5d":"markdown","b1cb148e":"markdown","1598cea3":"markdown","e4fc9040":"markdown","34cc2542":"markdown","c0bc54df":"markdown","a3e39715":"markdown"},"source":{"e7fc2818":"import numpy as np\nimport pandas as pd\nimport sklearn\n\ndocs = pd.read_csv('..\/input\/basicnaivedata\/example_train1.csv') \n#text in column 1, classifier in column 2.\ndocs","96eefec6":"# convert label to a numerical variable\ndocs['Class'] = docs.Class.map({'cinema':0, 'education':1})\ndocs","e2f914d8":"numpy_array = docs.as_matrix()\nX = numpy_array[:,0]\nY = numpy_array[:,1]\nY = Y.astype('int')\nprint(\"X\")\nprint(X)\nprint(\"Y\")\nprint(Y)","7ea6ce94":"# create an object of CountVectorizer() class \nfrom sklearn.feature_extraction.text import CountVectorizer \nvec = CountVectorizer( )","f9839cd5":"vec.fit(X)\nvec.vocabulary_","789a2e2f":"# removing the stop words\nvec = CountVectorizer(stop_words='english' )\nvec.fit(X)\nvec.vocabulary_","b295d554":"# printing feature names\nprint(vec.get_feature_names())\nprint(len(vec.get_feature_names()))","da643995":"# another way of representing the features\nX_transformed=vec.transform(X)\nX_transformed","42c464ce":"print(X_transformed)","51708029":"# converting transformed matrix back to an array\n# note the high number of zeros\nX=X_transformed.toarray()\nX","bd869306":"# converting matrix to dataframe\npd.DataFrame(X, columns=vec.get_feature_names())","c05760a8":"test_docs = pd.read_csv('..\/input\/basicnaivedata\/example_train1.csv') \n#text in column 1, classifier in column 2.\ntest_docs","35304c24":"# convert label to a numerical variable\ntest_docs['Class'] = test_docs.Class.map({'cinema':0, 'education':1})\ntest_docs","10f940df":"test_numpy_array = test_docs.as_matrix()\nX_test = test_numpy_array[:,0]\nY_test = test_numpy_array[:,1]\nY_test = Y_test.astype('int')\nprint(\"X_test\")\nprint(X_test)\nprint(\"Y_test\")\nprint(Y_test)","31535ba9":"X_test_transformed=vec.transform(X_test)\nX_test_transformed","d0296820":"X_test=X_test_transformed.toarray()\nX_test","0c7a0334":"# building a multinomial NB model\nfrom sklearn.naive_bayes import MultinomialNB\n\n# instantiate NB class\nmnb=MultinomialNB()\n\n# fitting the model on training data\nmnb.fit(X,Y)\n\n# predicting probabilities of test data\nmnb.predict_proba(X_test)\n","f44d99a6":"proba=mnb.predict_proba(X_test)\nprint(\"probability of test document belonging to class CINEMA\" , proba[:,0])\nprint(\"probability of test document belonging to class EDUCATION\" , proba[:,1])","77e30f39":"pd.DataFrame(proba, columns=['Cinema','Education'])","7696c4b2":"from sklearn.naive_bayes import BernoulliNB\n\n# instantiating bernoulli NB class\nbnb=BernoulliNB()\n\n# fitting the model\nbnb.fit(X,Y)\n\n# predicting probability of test data\nbnb.predict_proba(X_test)\nproba_bnb=bnb.predict_proba(X_test)","7cd56357":"pd.DataFrame(proba_bnb, columns=['Cinema','Education'])","1554d077":"## Multinomial and Bernoulli Naive Bayes","39eca1ab":"This table shows how many times a particular word occurs in document. In other words, this is a frequency table of the words.","687c6f13":"This representation can be understood as follows:\n\nConsider first 4 rows of the output: (0,2), (0,5), (0,7) and (0,11). It says that the first document (index 0) has \n7th , 2nd , 5th and 11th 'word' present in the document, and that they appear only\nonce in the document- indicated by the right hand column entry. \n\nSimilarly, consider the entry (4,4) (third from bottom). It says that the fifth document has the fifth word present twice. Indeed, the 5th word('good') appears twice in the 5th document. \n\nIn real problems, you often work with large documents and vocabularies, and each document contains only a few words in the vocabulary. So it would be a waste of space to store the vocabulary in a typical dataframe, since most entries would be zero. Also, matrix products, additions etc. are much faster with sparse matrices. That's why we use sparse matrices to store the data.\n\n\nLet us convert this sparse matrix into a more easily interpretable array:","38b7e22d":"A corpus of documents can thus be represented by a matrix with one row per document and one column per\ntoken (e.g. word) occurring in the corpus.","ec841e61":"## Multinomial Naive Bayes","9a5ea293":"So as you can see there are 5 documents (sentences) , 3 are of \"education\" class and 2 are of \"cinema\" class.","42579c1b":" To make better sense of the dataset, let us examine the vocabulary and document-term matrix together in a pandas dataframe. The way to convert a matrix into a dataframe is ```pd.DataFrame(matrix, columns=columns)```.\n","cefbd143":"```Countvectorizer()``` has converted the documents into a set of unique words alphabetically sorted and indexed.\n\n\n**Stop Words**\n\nWe can see a few trivial words such as  'and','is','of', etc. These words don't really make any difference in classyfying a document. These are called 'stop words'. So we would like to get rid of them. \n\nWe can remove them by passing a parameter stop_words='english' while instantiating ```Countvectorizer()``` as follows: ","79150124":"Imagine breaking X in individual words and putting them all in a bag. Then we pick all the unique words from the bag one by one and make a dictionary of unique words. \n\nThis is called **vectorization of words**. We have the class ```CountVectorizer()``` in scikit learn to vectorize the words. Let us first see it in action before explaining it further.\n","182a3b0f":"Here ```vec``` is an object of class ```CountVectorizer()```. This has a method called  ```fit()``` which converts a corpus of documents into a vector of unique words as shown below.","3b9fe6ad":"We call vectorization the general process of turning a collection of text documents into numerical feature vectors. This specific strategy (tokenization, counting and normalization) is called the \"Bag of Words\" representation. Documents are described by word occurrences while completely ignoring the relative position information of the words in the document.","8cba0e5d":"For understanding Multinomial and Bernoulli Naive Bayes, we will take a few sentences and classify them in two different classes. Each sentence will represent one document. In real world examples, every sentence could be a document, such as a mail, or a news article, a book review, a tweet etc. \n\nThe analysis and mathematics involved doesn\u2019t depend on the type of document we use. Therefore we have chosen a set of small sentences to demonstrate the calculation involved and to drive in the concept.","b1cb148e":"#### So, the 4 steps for vectorization are as follows\n\n- Import\n- Instantiate\n- Fit \n- Transform","1598cea3":"Let us summarise all we have done till now:\n\n- ```vect.fit(train)``` learns the vocabulary of the training data\n- ```vect.transform(train)``` uses the fitted vocabulary to build a document-term matrix from the training data\n- ```vect.transform(test)``` uses the fitted vocabulary to build a document-term matrix from the testing data (and ignores tokens it hasn't seen before)","e4fc9040":"Another way of printing the 'vocabulary':","34cc2542":"## Bernoulli Naive Bayes","c0bc54df":"You can see X_tranformed is a 5 x 12 sparse matrix. It has 5 rows for each of our 5 documents and 12 columns each \nfor one word of the dictionary which we just created. Let us print X_transformed.","a3e39715":"So our final dictionary is made of 12 words (after discarding the stop words). Now, to do classification, we need to represent all the documents with respect to these words in the form of features. \n\nEvery document will be converted into a *feature vector* representing presence of these words in that document. Let's convert each of our training documents in to a feature vector."}}