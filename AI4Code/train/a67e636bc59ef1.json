{"cell_type":{"a022e275":"code","4836b0c0":"code","056da668":"code","1448d945":"code","336f8dae":"code","b34db0bf":"code","af56f06c":"code","92f8b51c":"code","ddcbc625":"code","84496c66":"code","0bc5c586":"code","369a44b0":"code","2df7a941":"code","575bb116":"code","477f1a84":"code","eb7e52c7":"code","0701c5fd":"code","eee94c65":"code","7fc2b54b":"code","e8b32a48":"code","f1b59dec":"code","d62ffe6e":"code","25217ad8":"code","eb8ae025":"code","b11e8c9c":"code","915bb808":"code","b16436a5":"code","321a14d7":"code","b3c19618":"code","06d2713b":"code","aca7298f":"code","51de896b":"code","31fd059f":"code","0e433ab9":"code","004c1d70":"code","00f5c8b0":"code","21bc9930":"markdown","11c732b3":"markdown","ba7596cf":"markdown","43abaaed":"markdown","3dcb05c7":"markdown","831547a6":"markdown","95d28247":"markdown","61f19805":"markdown","49ccfe3b":"markdown","c2513456":"markdown","81f511c3":"markdown","867868ed":"markdown","1bc8e052":"markdown","28563728":"markdown","ff392075":"markdown","24007bed":"markdown","5e1f9d7e":"markdown","fdfb3c24":"markdown","05d23c17":"markdown","aefe07b3":"markdown","a76be9d9":"markdown","61fe9b81":"markdown","6e80ecea":"markdown","58b7d6a9":"markdown"},"source":{"a022e275":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4836b0c0":"import numpy as np\nimport pandas as pd \nimport plotly.express as px\nimport warnings\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport plotly.io as pio\n%matplotlib inline\npio.templates.default = \"plotly_dark\"\nwarnings.filterwarnings('ignore')","056da668":"df = pd.read_csv('..\/input\/anz-synthesised-transaction-dataset\/anz.csv')\ndf.head()","1448d945":"df.shape","336f8dae":"df.info()","b34db0bf":"df.isnull().sum() #'bpay_biller_code' & 'merchant_code' have majority of the values as NULLS so can be easily dropped","af56f06c":"df.country.value_counts() # This can be dropped as we are only dealing with one country","92f8b51c":"df.currency.value_counts() # This can be also dropped as we are only dealing with just one currency","ddcbc625":"# Drop 'bpay_biller_code' ,Currency , country and 'merchant_code' columns.\ndf.drop(['bpay_biller_code','merchant_code', 'currency','country'],axis=1,inplace=True)","84496c66":"# Lets check if we have any duplicates records in the dataset\ndf.duplicated().sum() # NO Duplicates","0bc5c586":"# Create Age buckets to analyse data as per age group\ndf['age_group']=pd.cut(df.age,[0,20,30,40,50,60,99999],labels=['<20','20-30','30-40','40-50','50-60','>60'])","369a44b0":"# Change datatype of extraction to datetime\ndf.loc[:,['extraction','date']] = df.loc[:,['extraction','date']].apply(pd.to_datetime, errors='coerce')","2df7a941":"df.info() # Datatype of extraction & date has been updated","575bb116":"# Create date helper columns\ndf['month'] =df['date'].dt.month_name()\ndf['day'] = df['date'].dt.day_name()\ndf['hour']= df.extraction.dt.hour\ndf.head()","477f1a84":"# Change datatype of card_present_flag to INT\ndf.card_present_flag = df.card_present_flag.astype('Int64')\ndf.head()","eb7e52c7":"cols = ['card_present_flag', 'status', 'txn_description' , 'movement' , 'gender', 'merchant_state']\n\n#Subplot initialization\nfig = make_subplots(\n                     rows=3, \n                     cols=2,\n                     subplot_titles=('card_present_flag', 'status', 'txn_description' , 'movement','gender', 'merchant_state'),\n                     horizontal_spacing=0.2,\n                     vertical_spacing=0.2 \n                   )\n# Adding subplots\ncount=0\nfor i in range(1,4):\n    for j in range(1,3):\n        fig.add_trace(go.Bar(x=df[cols[count]].value_counts().index, \n                             y=df[cols[count]].value_counts(),\n                             name=cols[count],\n                             textposition='auto',\n                             text= [str(i) + '%' for i in (df[cols[count]].value_counts(normalize=True)*100).apply(lambda x : round(x)).tolist()],\n                            ),\n                      row=i,col=j)\n        count+=1\nfig.update_layout(\n                    title=dict(text = \"Analyze Categorical variables (Frequency \/ Percentage)\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                    height = 920,\n                    margin=dict(l=80, r=80, t=150, b=80)\n                  )\nfig.show()","0701c5fd":"df0_grp=df.groupby(by='txn_description').sum()[['amount']].reset_index()\ndf0_grp.amount=df0_grp.amount.apply(lambda x : round(x))\nfig=px.treemap(df0_grp,\n           path=['txn_description'],\n           values='amount',\n           color = 'amount',\n          )\n\nfig.update_layout(\n                    title=dict(text = \"Total Amount  by Transaction Desciption\",x=0.5,y=0.95),\n                    margin=dict(l=10, r=10, t=70, b=10),\n                  )\nfig.data[0].textinfo = 'label+value'\nfig.update_traces(marker_coloraxis=None)\nfig.show()","eee94c65":"df_grp0=df.groupby(by='merchant_suburb').sum()[['amount']].reset_index()\nfig=px.treemap(df_grp0,\n           path=['merchant_suburb'],\n           values='amount',\n           color = 'amount',\n          )\nfig.update_layout(\n                    title=dict(text = \"Total Txn Amount by Suburb\",x=0.5,y=0.95),\n                    margin=dict(l=10, r=10, t=50, b=10),\n                    showlegend=False,\n                  )\nfig.data[0].textinfo = 'label+value'\nfig.update_traces(marker_coloraxis=None)\nfig.show()","7fc2b54b":"df1 = df[df.movement=='debit'] # Debit Transactions\ndf1.shape # 11160 debit transactions","e8b32a48":"cols = ['card_present_flag', 'status', 'txn_description' , 'movement' , 'gender', 'merchant_state']\n#Subplot initialization\nfig = make_subplots(\n                     rows=3, \n                     cols=2,\n                     subplot_titles=('card_present_flag', 'status', 'txn_description' , 'movement','gender', 'merchant_state'),\n                     horizontal_spacing=0.2,\n                     vertical_spacing=0.2 \n                   )\n# Adding subplots\ncount=0\nfor i in range(1,4): \n    for j in range(1,3): \n        fig.add_trace(go.Bar(x=df1.groupby(by=cols[count]).sum()['amount'].index,\n                             y=df1.groupby(by=cols[count]).sum()['amount'].values.round(2),\n                             name=cols[count],\n                             textposition='auto',\n                             text=[str(round((i\/sum(df1.groupby(by=cols[count]).sum()['amount'].values))*100))+'%' \n                                   for i in df1.groupby(by=cols[count]).sum()['amount'].values]\n                            ),\n                      row=i,col=j)\n        count+=1\nfig.update_layout(\n                    title=dict(text = \"Analyze Categorical variables (Total Txn Amount\/Percentage)\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                    height = 920,\n                    margin=dict(l=80, r=80, t=150, b=80)\n                  )\nfig.show()","f1b59dec":"df_grp=df1.groupby(by=['merchant_state','gender']).sum()[['amount']].reset_index()\norder = df1.groupby(by=['merchant_state']).sum()[['amount']].sort_values(by='amount',ascending=False).index\ndf_grp['merchant_state']=pd.Categorical(df_grp['merchant_state'],order)\ndf_grp= df_grp.groupby(by=['merchant_state','gender']).sum().reset_index()\nfig=px.bar(data_frame=df_grp,\n       x='merchant_state',\n       y='amount',color='gender',\n       barmode='group',\n       text=df_grp.amount.apply(lambda x : str(round(x\/1000,2))+'k')\n      )\nfig.update_traces(textposition='outside')\nfig.update_xaxes(title='Merchant State') \nfig.update_yaxes(title='Transaction Amount')\nfig.update_layout(\n                    title=dict(text = \"Transaction Amount in Merchant State by Gender\",x=0.5,y=0.95),\n                    title_font_size=20,\n                  )\nfig.show()","d62ffe6e":"fig= px.bar(data_frame=df,\n       x=df1['day'].value_counts().index.tolist(), \n       y=df1['day'].value_counts().tolist(),\n       color=df1['day'].value_counts().tolist(), \n       text=df1['day'].value_counts().tolist() \n      )\nfig.update_traces(textposition='outside',marker_coloraxis=None)\nfig.update_xaxes(title='Day') \nfig.update_yaxes(title='Transaction count')\nfig.update_layout(\n                    title=dict(text = \"Transaction flow by each day\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                    height = 450,\n                  )\nfig.show()\n\n\nfig1= px.bar(data_frame=df1.groupby(by='day').sum()[['amount']].sort_values('amount',ascending=False),\n            text=df1.groupby(by='day').sum()[['amount']].sort_values('amount',ascending=False)['amount'].apply(lambda x : str(round(x\/1000,2))+'k')\n      )\nfig1.update_traces(textposition='outside')\nfig1.update_xaxes(title='Day') \nfig1.update_yaxes(title='Transaction Amount')\nfig1.update_layout(\n                    title=dict(text = \"Transaction amount by each day\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                    height = 450,\n                  )\nfig1.show()","25217ad8":"df1_grp=df1.groupby(by=['day','gender']).sum()[['amount']].reset_index()\norder = ['Monday','Tuesday', 'Wednesday','Thursday','Friday','Saturday','Sunday']\ndf1_grp['day']=pd.Categorical(df1_grp['day'],order) \ndf1_grp= df1_grp.groupby(by=['day','gender']).sum().reset_index()\nfig=px.bar(data_frame=df1_grp,\n       x='day',\n       y='amount',color='gender',\n       barmode='group',\n       text=df1_grp.amount.apply(lambda x : str(round(x\/1000,2))+'k')\n      )\nfig.update_traces(textposition='outside')\nfig.update_xaxes(title='Day') \nfig.update_yaxes(title='Transaction Amount')\nfig.update_layout(\n                    title=dict(text = \"Transaction Amount per day by Gender\",x=0.5,y=0.95),\n                    title_font_size=20,\n                  )\nfig.show()","eb8ae025":"fig= px.bar(data_frame=df,\n       x=df['month'].value_counts().index.tolist(),\n       y=df['month'].value_counts().tolist(),\n       color=df['month'].value_counts().tolist(),\n       text=df['month'].value_counts().tolist()\n      )\nfig.update_traces(textposition='outside')\nfig.update_xaxes(title='Month') \nfig.update_yaxes(title='Transaction Count')\nfig.update_layout(\n                    title=dict(text = \"Transaction flow by each month\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    width = 700,\n                    height = 450,\n                  )\nfig.show()","b11e8c9c":"fig=px.bar(df.groupby(by='customer_id').sum()['amount'].sort_values(ascending=False).head(10),\n       color=df.groupby(by='customer_id').sum()['amount'].sort_values(ascending=False).head(10),\n       text=df.groupby(by='customer_id').sum()['amount'].sort_values(ascending=False).head(10).round(),\n      )\nfig.update_traces(textposition='outside',marker_coloraxis=None)\nfig.update_xaxes(title='Customer ID') \nfig.update_yaxes(title='Transaction Amount')\nfig.update_layout(\n                    title=dict(text = \"Top 10 customers by Transaction Amount\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                    height = 500,\n                  )\nfig.show()","915bb808":"fig=px.bar(df1.age_group.value_counts(),\n       color=df1.age_group.value_counts(),\n       text=df1.age_group.value_counts().tolist(),\n      )\nfig.update_traces(textposition='outside',marker_coloraxis=None)\nfig.update_xaxes(title='Age Group') \nfig.update_yaxes(title='Transaction Count')\nfig.update_layout(\n                    title=dict(text = \"Transactions by Age Group\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                    height = 450,\n                  )\nfig.show()","b16436a5":"df2_grp=df1.groupby(by=['age_group','gender']).sum()['amount'].reset_index()\nfig=px.bar(data_frame=df2_grp,\n       x = 'age_group',\n       y = 'amount',\n       color='gender',\n       barmode='group',\n       text=df2_grp.amount.apply(lambda x : str(round(x\/1000,2))+'k')\n      )\nfig.update_traces(textposition='outside')\nfig.update_layout(\n                    title=dict(text = \"Transaction Amount by Age Group & Gender\",x=0.5,y=0.95),\n                    title_font_size=20,\n                  )\nfig.show()","321a14d7":"df3_grp=df1.groupby(by='date').mean()[['amount']].merge(df1.groupby(by='date').count()[['transaction_id']],on='date')\ndf3_grp.columns= ['Amount','Transaction Count']\nfig=px.line(df3_grp)\nfig.update_xaxes(title='Date') \nfig.update_layout(\n                    title=dict(text = \"Average Amount VS Txn Count over time\",x=0.5,y=0.95),\n                    title_font_size=20\n                  )\nfig.show()","b3c19618":"fig=px.line(df1.groupby(by='date').sum()[['amount']])\nfig.update_traces(line=dict(color=\"#8cba51\", width=3.5))\nfig.update_xaxes(title='Date') \nfig.update_yaxes(title='Transaction Amount')\nfig.update_layout(\n                    title=dict(text = \"Total Txn Amount over time\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                  )\nfig.show()","06d2713b":"fig=px.line(df1.groupby(by='hour').sum()[['amount']],\n            text=df1.groupby(by='hour').sum()['amount'].apply(lambda x : str(round(x\/1000))+'k').values\n            )\nfig.update_traces(line=dict(color=\"#f58634\", width=5))\nfig.update_xaxes(title='Hour') \nfig.update_yaxes(title='Transaction Amount')\nfig.update_layout(\n                    title=dict(text = \"Total Txn Amount hourly\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                  )\nfig.update_traces(textposition='middle right',fillcolor='red')\nfig.show()","aca7298f":"df4_grp= df1.groupby(by=['hour','month','gender']).agg(['count','sum'])[['amount']].reset_index()\ndf4_grp.columns = ['hour', 'month' ,'gender','Transaction Count', 'Total Txn Amount']\nfig1=px.line(data_frame=df4_grp,\n            x=df4_grp.hour,\n            y=df4_grp['Transaction Count'],\n            color=df4_grp.gender,\n            facet_col= df4_grp.month\n           )\nfig1.update_xaxes(title='Hour') \nfig1.update_layout(\n                    title=dict(text = \"Hourly Transaction count by Month \",x=0.5,y=0.95),\n                    title_font_size=20,\n                    margin=dict(l=80, r=80, t=100, b=80)\n                  )\nfig1.show()\n\n\nfig2=px.line(data_frame=df4_grp,\n            x=df4_grp.hour,\n            y=df4_grp['Total Txn Amount'],\n            color=df4_grp.gender,\n            facet_col= df4_grp.month\n           )\nfig2.update_xaxes(title='Hour') \nfig2.update_layout(\n                    title=dict(text = \"Hourly Transaction Amount by Month \",x=0.5,y=0.95),\n                    title_font_size=20,\n                    margin=dict(l=80, r=80, t=100, b=80)\n                  )\nfig2.show()","51de896b":"df4_grp= df1.groupby(by=['hour','day','gender']).agg(['count','sum'])[['amount']].reset_index()\ndf4_grp.columns = ['hour', 'day' ,'gender','Transaction Count', 'Total Txn Amount']\nfig1=px.line(data_frame=df4_grp,\n            x=df4_grp.hour,\n            y=df4_grp['Transaction Count'],\n            color=df4_grp.gender,\n            facet_col= df4_grp.day\n           )\nfig1.update_xaxes(title='Hour') \nfig1.update_layout(\n                    title=dict(text = \"Hourly Transaction count by Day \",x=0.5,y=0.95),\n                    title_font_size=20,\n                    margin=dict(l=80, r=80, t=100, b=80)\n                  )\nfig1.show()\n\n\nfig2=px.line(data_frame=df4_grp,\n            x=df4_grp.hour,\n            y=df4_grp['Total Txn Amount'],\n            color=df4_grp.gender,\n            facet_col= df4_grp.day\n           )\nfig2.update_xaxes(title='Hour') \nfig2.update_layout(\n                    title=dict(text = \"Hourly Transaction Amount by Day \",x=0.5,y=0.95),\n                    title_font_size=20,\n                    margin=dict(l=80, r=80, t=100, b=80)\n                  )\nfig2.show()","31fd059f":"df2 = df[df.movement=='credit']\ndf2.shape # 883 Credit transactions","0e433ab9":"fig=px.bar(\n            df2.groupby(by='customer_id').mean()['balance'].sort_values(ascending=False).head(10),\n            text = df2.groupby(by='customer_id').mean()['balance'].sort_values(ascending=False).head(10).apply(\n                lambda x : str(round(x\/1000,2))+'k' ),\n            color = df2.groupby(by='customer_id').mean()['balance'].sort_values(ascending=False).head(10)\n          )\nfig.update_traces(textposition='outside')\nfig.update_layout(\n                    title=dict(text = \"Top Valuable Customers by AVG Balance\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                    height = 500\n                    \n                  )\nfig.update_traces(marker_coloraxis=None)\nfig.show()","004c1d70":"order = ['August','September','October']\ndf['month']=pd.Categorical(df['month'],order)\ng1 = df.groupby(by='month').agg(['mean','sum'])['amount']\ng1.columns=['Avg Amount', 'Total Amount']\ng1[['Avg Amount','Total Amount']]=g1[['Avg Amount','Total Amount']].round().astype(int)\ng1.reset_index(inplace=True)\n\ng2=df.groupby(by='month').agg(['mean','sum'])['balance']\ng2.columns=['Avg Balance', 'Total Balance']\ng2[['Avg Balance','Total Balance']]=g2[['Avg Balance','Total Balance']].round().astype(int)\ng2.reset_index(inplace=True)\n\nmonth = g1.merge(g2,on='month')\nmonth","00f5c8b0":"pio.templates.default = \"plotly_white\"\nfig = ff.create_table(month) \nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 13\nfig.show()","21bc9930":"__Insights__: Total Transaction amount almost touched __14k AUD__ on __21st Oct__. Looks like some big transaction were done on that day as the transaction count is not that high on 21st Oct.","11c732b3":"__Insights__ : Overall males carry out more transactions as compared to females but in three states __(QLD,WA,SA)__ females are leading. ","ba7596cf":"### Analyze Categorical variables","43abaaed":"### Analysing Credit Transactions","3dcb05c7":"__Insights:__\n\n- In the month of __September & October__ even though transaction count by females are more at __9:00 AM__ but __TXN amount__ is still less. Seems like comparatively small transactions done by females during the start of the day.\n\n- In __October__ at __2:00 PM__ transaction amount by __females__ is almost double as compared to males.","831547a6":"__Insights:__\n\n- There is a 7% increase in Avg transaction amount from August to October.\n- 71% increase in AVG balance maintained by the customers.\n- 77% increase in total balance over these 3 months.","95d28247":"__Obervation:__   \n- Around __80%__ amount transacted via cards.\n-   __Payment__ mode of transaction contributes most to the __txn amount__.\n-   __NSW & VIC__ merchant states contributed more than half to overall transaction amount","61f19805":"__Observation:__\n- The average transaction amount on __7th August & Oct 21st__  was very high approx __100 AUD__.\n\n- Large number of transactions took place on __17th August & 28th September.__","49ccfe3b":"__Insights :__\n\n- __Pay\/Salary__ is the major contributor of __bank txn amount__ which is expected as salary transaction amount is usually very high as compared to normal __debit__ transactions.","c2513456":"### Lets check the Data","81f511c3":"<!DOCTYPE html>\n<html>\n<body>\n<div align=\"center\">\n<h3>Prepared by Asif Bhat<\/h3>\n\n<h3>Follow Me on - <a href=\"https:\/\/www.linkedin.com\/in\/asif-bhat\/\">LinkedIn<\/a>&nbsp; <a href=\"https:\/\/mobile.twitter.com\/_asifbhat_\">Twitter<\/a>&nbsp; <a href=\"https:\/\/www.instagram.com\/datasciencescoop\/?hl=en\">Instagram<\/a>&nbsp; <a href=\"https:\/\/www.facebook.com\/datasciencescoop\/\">Facebook<\/a><\/h3>\n<\/div>\n\n<\/div>\n<\/body>\n<\/html>","867868ed":"- __Insights__ : As per the above bar graph there is a steady increase in the number of transaction by each passing Month which is a good sign","1bc8e052":"# ANZ Synthesised Transaction Dataset\u00b6","28563728":"__Observation:__\n\n- Males in the age group of __20-30__ are contributing most to the Total Txn amount.\n- In Age group __'<20'__, Females are ahead of males in terms of Total txn amount","ff392075":"__Observations__\n\n- Most of the transactions (__80.26%__) have been done via cards (credit \/ Debit Card).\n- Almost __64.08%__ transactions were authorized and rest were posted.\n- __92.67%__ transactions are of type debit. Rest transactions are credit. \n- Looks like majority of the transactions use \"SALES-POS\" & \"POS' transaction mode.\n- __Males__ tend to do more transactions as compared to __females__.\n- __NSW , VIC , QLD__ are most busy merchant states.\n- __ACT & TAS__ are least busy.","24007bed":"__Observation:__\n- The transaction count is lower during the start of the week but start to pick up on wednesday through saturday.\n- Even though transaction count is comparatively less on __satuday__ but it is still at __place 2__ in terms of transaction amount which signifies bigger transactions on __Saturday__.","5e1f9d7e":"## ANZ Synthesised Transaction Dataset","fdfb3c24":"__Observation:__\n\n- __Sydney , Melbourne, South Brisbane , Mascot and Mount Gambier__ are leading contributers of transaction amount.","05d23c17":"### Importing libraries","aefe07b3":"__Insights:__\n\n- On __Saturday__ between __2:00 PM - 3:00 PM__ transaction amount by __males__ is almost __6 times__ higher than __females__. However on __Sunday__ at the same time the trend is completely in the opposite direction. ","a76be9d9":"__Observation__\n- Most transactions have been been carried out by Age Groups - __\"20-30\" & \"30-40\".__\n- Company should think of providing some attractive offers for __\"50-60\" & \">60\"__ age groups considering the transaction volume of these groups.","61fe9b81":"__Insights__\n\n- Males spent most on __Saturday__ which may be due to dinner date,family dinner or some other weekend plans.\n- Females are spending most on __Wednesday & Friday__.","6e80ecea":"### Analyzing Debit Transactions","58b7d6a9":"__Insights__: \n\n- Total transaction amount generated at __9:00 AM - 9:59 AM__ is approx __47k__ which is highest throughout the day.\n- Between __12:00 AM - 7:00 AM__ we have least transaction amount because of off hours."}}