{"cell_type":{"cedcca90":"code","6929737f":"code","efea92f6":"code","f4999174":"code","e3be740b":"code","c9538028":"code","255b42f8":"code","965cc17e":"code","aca6cd45":"code","8e71ad1e":"code","5686178a":"code","6fc7f6c5":"code","e6b26b45":"code","f06f8b7b":"code","a362a698":"code","8929597e":"code","c7373d4c":"code","24bf0590":"code","0c67c88b":"code","dab457c1":"code","67195cc1":"code","aaaa552d":"code","c81b1ed4":"code","be542604":"code","2aad3aaa":"code","2baad3d5":"code","09d82faa":"code","0e39eceb":"code","8813054a":"code","1c169c81":"code","592c8e3a":"code","5b7de002":"code","aa53f9d0":"code","08add480":"code","c4b42fea":"code","7b0973dd":"code","1504095f":"code","340bb2b3":"code","340e36cb":"code","84899754":"markdown","a246817e":"markdown","aef6a00c":"markdown"},"source":{"cedcca90":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy as sp\nfrom sklearn.cluster import KMeans","6929737f":"from warnings import filterwarnings\nfilterwarnings('ignore')","efea92f6":"df = pd.read_csv(\"..\/input\/usarrest\/kmeans_usarrests\/USArrests.csv\")\ndf.index = df['Unnamed: 0']\ndf.head()","f4999174":"df = df.iloc[:, 1:5]\ndf.head()","e3be740b":"df.index.name = None\ndf.head()","c9538028":"# No dublicated values\ndf.duplicated().sum()","255b42f8":"# No missing values\ndf.isnull().sum()","965cc17e":"df.info()","aca6cd45":"df.describe().T","8e71ad1e":"df.index.value_counts()","5686178a":"# Murders for each States\nplt.figure(figsize = (15,3))\ng = sns.barplot(x = df.index, y = df['Murder'], data = df)\ng.set_xticklabels(g.get_xticklabels(), rotation=90);","6fc7f6c5":"# Assaults for each States\nplt.figure(figsize = (15,3))\ng = sns.barplot(x = df.index, y = df['Assault'], data = df)\ng.set_xticklabels(g.get_xticklabels(), rotation=90);","e6b26b45":"# Urban Populantions for each States\nplt.figure(figsize = (15,3))\ng = sns.barplot(x = df.index, y = df['UrbanPop'], data = df)\ng.set_xticklabels(g.get_xticklabels(), rotation=90);","f06f8b7b":"# Rapes for each States\nplt.figure(figsize = (15,3))\ng = sns.barplot(x = df.index, y = df['Rape'], data = df)\ng.set_xticklabels(g.get_xticklabels(), rotation=90);","a362a698":"# Analyze distributions\nfig, axs = plt.subplots(2,2, figsize = (10,10))\nsns.distplot(df['Murder'], ax=axs[0,0])\nsns.distplot(df['Assault'], color = 'r', ax=axs[0,1])\nsns.distplot(df['UrbanPop'], color = 'g', ax=axs[1,0])\nsns.distplot(df['Rape'], color = 'y', ax=axs[1,1])","8929597e":"# It seems that \"Assault\" and \"Rape\" dont distribut normally\n# Lets apply Shapiro-Wilk test to confirm that ","c7373d4c":"# Shapiro Test\nfrom scipy.stats import shapiro","24bf0590":"# H0: Distribution is Normal\n# H1: Distribution is not Normal\n\ntest_statistics, p_value = shapiro(df['Murder'])\nprint(\"Test Statistics: \", test_statistics)\nprint(\"P-value: \", p_value)","0c67c88b":"# p_value is not less than 0.05. So, we can say that distribution of \"Murder\" is normal  ","dab457c1":"# H0: Distribution is Normal\n# H1: Distribution is not Normal\n\ntest_statistics, p_value = shapiro(df['Assault'])\nprint(\"Test Statistics: \", test_statistics)\nprint(\"P-value: \", p_value)","67195cc1":"# p_value is less than 0.05. So, we can say that distribution of \"Assault\" is not normal  ","aaaa552d":"# H0: Distribution is Normal\n# H1: Distribution is not Normal\n\ntest_statistics, p_value = shapiro(df['UrbanPop'])\nprint(\"Test Statistics: \", test_statistics)\nprint(\"P-value: \", p_value)","c81b1ed4":"# p_value is not less than 0.05. So, we can say that distribution of \"UrbanPop\" is normal  ","be542604":"# H0: Distribution is Normal\n# H1: Distribution is not Normal\n\ntest_statistics, p_value = shapiro(df['Rape'])\nprint(\"Test Statistics: \", test_statistics)\nprint(\"P-value: \", p_value)","2aad3aaa":"# p_value is less than 0.05. So, we can say that distribution of \"Rape\" is not normal  ","2baad3d5":"# Boxplot\nfig, axs = plt.subplots(2,2, figsize = (10,10))\nsns.boxplot(df['Murder'], ax=axs[0,0])\nsns.boxplot(df['Assault'], color = 'r', ax=axs[0,1])\nsns.boxplot(df['UrbanPop'], color = 'g', ax=axs[1,0])\nsns.boxplot(df['Rape'], color = 'y', ax=axs[1,1])","09d82faa":"# Correlations between features\nplt.figure(figsize = (10,7))\nsns.heatmap(df.corr(), annot = True, vmin = -1, vmax = 1);","0e39eceb":"# Generally, we expect the correlations between the features to be high since the subject is crimes.\n# In addition, we can see from this table that there is a strong positive correlation between \"Assault\" and \"Murder\"","8813054a":"# We need to find optimum number of clusters (minimum similarities between several clusters and maximum similarities interclusters)","1c169c81":"#!pip install yellowbrick","592c8e3a":"from yellowbrick.cluster import KElbowVisualizer","5b7de002":"kmeans = KMeans()\nvisualizer = KElbowVisualizer(kmeans, k = (2,15))\nvisualizer.fit(df)\nvisualizer.poof()","aa53f9d0":"kmeans = KMeans(n_clusters = 5).fit(df)\nprint(\"Number of clusters: \", kmeans.n_clusters)\nprint(\"-\"*70)\nprint(\"Cluster Centers: \", '\\n', kmeans.cluster_centers_)","08add480":"labels = kmeans.labels_\nlabels","c4b42fea":"# Visualization\nplt.scatter(df.iloc[:,0], df.iloc[:,1], c = labels, s = 50, cmap = 'viridis')\n\ncenters = kmeans.cluster_centers_\n\nplt.scatter(centers[:,0], centers[:,1], c = 'Blue', s = 200, marker = 'p')","7b0973dd":"# !pip install --upgrade matplotlib\n# import mpl_toolkits\nfrom mpl_toolkits.mplot3d import Axes3D","1504095f":"# 3D visualization\nfig = plt.figure()\nax = Axes3D(fig)\nx = df.iloc[:,0]\ny = df.iloc[:,1]\nz = df.iloc[:,2]\nax.scatter(x, y, z, c = labels,  cmap = 'RdBu')\nax.scatter(centers[:,0], centers[:,1], centers[:,2], c =\"#050505\", marker=\"o\", s = 500);","340bb2b3":"# Showing States and Clusters that States belong to, together \nclustered_df = pd.DataFrame({'States': df.index,\n                             'Clusters': labels})\nclustered_df.head()","340e36cb":"# Showing Clusters respectively\nclustered_df.sort_values(by = 'Clusters')","84899754":"### KMeans","a246817e":"### Find Optimum number of Clusters (Elbow) ","aef6a00c":"### Final Model"}}