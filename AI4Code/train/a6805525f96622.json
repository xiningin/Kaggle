{"cell_type":{"5a63028a":"code","5c0eef93":"code","628f1e28":"code","7d05dfcb":"code","a9a148ab":"code","b9e52a5f":"code","3096b23a":"code","005db94c":"code","1f389c5a":"code","fd7c6ad2":"code","47eda815":"code","ec11f0f2":"code","a4c58352":"code","65b6038b":"code","59dd7bf6":"code","e09b21b0":"code","32687fd0":"code","227257ff":"code","4b790545":"code","2c08be6b":"code","4cbe56d5":"code","8a593084":"code","222a60af":"code","24ab8095":"code","93fb4bd4":"code","1c9f9399":"code","a62424b9":"code","2e85fa5c":"code","95d48534":"markdown","8446715c":"markdown","b9c891b8":"markdown","a2458e65":"markdown","62503137":"markdown","5779abea":"markdown","29f0a91a":"markdown","9bc96fc6":"markdown","aa933315":"markdown"},"source":{"5a63028a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfolders=['\/kaggle\/working\/img','\/kaggle\/working\/img\/turkish','\/kaggle\/working\/img\/arabic' ]\nfor folder in folders:\n    if not os.path.exists(folder):\n        os.mkdir(folder)","5c0eef93":"df=pd.read_excel(\"\/kaggle\/input\/quran-words-with-meaning-wikipedia-info\/QURAN.xlsx\",index_col=0)\ndf.head()\ndf.info()","628f1e28":"revelation=[96,68,73,74,1,111,81,87,92,89,93,94,103,100,108,102,107,109,105,113,114,112,53,80,97,91,85,95,106,101,75,104,77,50,90,86,54,38,7,72,36,52,35,19,20,56,26,27,28,17,10,11,12,15,6,37,31,34,39,40,41,42,43,44,45,46,51,88,18,16,71,14,21,23,32,52,67,69,70,78,79,82,84,30,29,83,2,8,3,33,60,4,99,57,47,13,55,76,65,98,59,24,22,63,58,49,66,64,61,62,48,5,9,110]\n#set n\u00fczul order\ndf['Revelation'] = df['SURAH'].apply(lambda x: revelation[x-1])\ndf.head()","7d05dfcb":"import matplotlib.pyplot as plt\nimport seaborn as sns","a9a148ab":"plt.rcParams.update({'font.size': 25})\nsns.set_context(\"paper\")\n\nplt.scatter(df.SURAH, df.Revelation, s=50,\n            alpha=0.2, cmap=\"viridis\") \nplt.colorbar(); \nplt.xlabel(\"SURAH\") \nplt.ylabel(\"Revelation\") \nplt.title(\"Relationship between SURAH and Revelation\") \nplt.show()","b9e52a5f":"revs=df.Revelation.unique()\nplt.hist([df.loc[df.Revelation == x, 'VERSE'] for x in revs], label=revs)\nplt.show()","3096b23a":"fig, ax = plt.subplots()\nax.hist(df.Revelation, label=\"Revelation\", bins=20)\nax.set_xlabel(\"Revelation\")\nax.set_ylabel(\"Number of SURAH\")\nplt.show()","005db94c":"dfChapter=pd.read_excel(\"\/kaggle\/input\/quran-words-with-meaning-wikipedia-info\/WikiChapters.xlsx\", index_col=None)\ndfChapter.head()","1f389c5a":"import re\ndfChapter['Revelation'] = pd.to_numeric(dfChapter['ROW_NUM'].apply(lambda x: revelation[x-1]))\ndfChapter['VERSE_COUNT'] = pd.to_numeric(dfChapter['VERSES_DESC'].apply(lambda x: re.search(r'\\d*\\a*\\d*', x)[0]))\ndfChapter.head()","fd7c6ad2":"sns.relplot(x=\"ROW_NUM\", y=\"VERSE_COUNT\",data=dfChapter, hue=\"PLACE_OF_REV\", kind=\"scatter\")\nplt.show()","47eda815":"g=sns.relplot(x=\"ROW_NUM\", y=\"VERSE_COUNT\", hue=\"PLACE_OF_REV\",aspect=4, palette=[\"b\",\"r\"],data=dfChapter, kind=\"line\",  ci=\"sd\",row=\"PLACE_OF_REV\")\nplt.xlabel=\"SURAH_NO\"\nplt.xticks(rotation=90)\nplt.show()","ec11f0f2":"dfMerge=df.merge(dfChapter,left_on=['Revelation','SURAH'],right_on=['Revelation','ROW_NUM'])","a4c58352":"dfMerge['Counts'] = np.zeros(len(df))\ndfMeaning= dfMerge.groupby(['Revelation','TITLE','MEANING_GROUP','ROW_NUM','BRX_ROOT','PLACE_OF_REV'], as_index=False)['Counts'].count()\ndfMeaning.head()","65b6038b":"import matplotlib.pyplot as plt\nplaces=[\"Makkah\",\"Madinah\"]\ncriterias=[\"Kad\u0131n\",\"Erkek\"]\ncolors=[\"#648FFF\",\"#DC267F\",\"#FFB000\",\"#00B000\"]\nfig, axs = plt.subplots(nrows=2, ncols=2, constrained_layout=True)\nplt.xticks(rotation=60)\ni=0\nfor row in axs:\n    j=0\n    for ax in row:    \n        dfSub=dfMeaning[(dfMeaning['MEANING_GROUP']==criterias[i] )& (dfMeaning.PLACE_OF_REV==places[j])]\n        ax.plot(dfSub.TITLE,dfSub.Counts, colors[i*2+j])\n        ax.set_xlabel(criterias[i]+\"\/\"+places[j])\n        for tick in ax.get_xticklabels():\n            tick.set_rotation(45)\n        j+=1\n    i+=1\nplt.show()","59dd7bf6":"from PIL import Image\nfrom wordcloud import WordCloud","e09b21b0":"exclude_words = ['\u015eimdi','gelmek','demek','\u0625\u0650\u0646\u0652','\u0625\u0650\u0646\u0651\u064e','\u0644\u064e\u0640\u0645\u0652','\u0644\u064e\u0640\u0640\u0645\u0651\u064e\u0627','\u0625\u0650\u0646\u0651\u064e','\u0644\u0650\u0645\u0627\u064e','Bu','etmek','Etmek','Kim',                      \n'Gelmek','demek','bilmek','Bilmek','dilemek','Dilemek','\u015eu','Bunlar','\u015eunlar','Gibi','\u00d6yle ki','i\u00e7inde',\n'\u00d6nce','Onlar','-e, -a','dan','-dan',\"-den\",'den','-den -dan','Baz\u0131','Ya da','de\u011fil',\"De\u011fil\",'S\u00f6ylemek',\n'\u00d6yle ki','Dek','Veya','ve','Ya','Ya Da',\"olmak\", \"etmek\",'veya','\u0130\u00e7in','E\u011fer','\u00f6nce','Ey','Sen','Ben','Biz','siz',\n'biz','ben','O','i\u00e7in','\u00f6yle','gel','-de','sen','ey','bu','\u015fu','o','bunlar','\u015funlar','onlar','Hani','\u0130\u00e7inde','kez',\n'az','Az','\u00e7ok','\u00c7ok','en','ki','i\u00e7inde','E\u011fer','\u00fczerine','\u00d6yle','yapmak','Fakat','Ama','Lakin','ancak','Ancak',\n'ile','\u0130le','-ki','bir','Ba\u015fka','\u00f6nce','sonra','aras\u0131nda','\u00c7ok','Az','Sonra','s\u00f6ylemek','g\u00f6rmek','belki']\nexclude_words_arabic=[]\nfor word in exclude_words:\n    arabic_words=str(dfMerge.loc[dfMerge['MEANING_GROUP']==word]['BRX_ROOT'].unique()).replace('[','').replace(']','')\n    #print(f'{word} T:{type(arabic_words)} arabic: {arabic_words} l:{len(arabic_words)} ls: {len(arabic_words.split())}')\n    if(arabic_words!='[]'):\n        for arabic_word in arabic_words.split():\n            exclude_words_arabic.append(arabic_word.strip(\"'\"))\n            \nexclude_words_arabic=np.unique(exclude_words_arabic)            \n  \n","32687fd0":"verses = {}\nfor i in range(1,115):\n    verses[str(i)] = \" \".join('' if mean in (exclude_words) else mean for mean in dfMerge[dfMerge['SURAH']==i]['MEANING_GROUP'])\n\nfor key in verses.keys():\n    print(dfChapter.loc[int(key)-1]['TITLE'])\n    wordcloud = WordCloud(background_color='black', width=800, height=800).generate(verses[key])\n    plt.figure( figsize=(20,10) )\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n    \n    \"\"\"filename=\"\/kaggle\/working\/img\/turkish\/\"+key+'-'+dfChapter.loc[int(key)-1]['TITLE']+'.png'\n    wordcloud.to_file(filename)\"\"\"\n   ","227257ff":"!pip install arabic_reshaper\nimport arabic_reshaper\n!pip install python-bidi\nfrom bidi.algorithm import get_display\nverses_arabic = {}\nfrom wordcloud import WordCloud\nfont_file='\/kaggle\/input\/arabic-character-format\/NotoNaskhArabic-Regular.ttf'\n\n","4b790545":"for i in range(1,115):\n    verses_arabic[str(i)] = \" \".join('' if root in (exclude_words_arabic) else root for root in dfMerge[dfMerge['SURAH']==i]['BRX_ROOT'])\n    verses_arabic[str(i)]= arabic_reshaper.reshape(verses_arabic[str(i)] )\n    verses_arabic[str(i)]= get_display(verses_arabic[str(i)])\n\nfor key in verses_arabic.keys():\n    print(dfChapter.loc[int(key)-1]['TITLE'])\n    wordcloud = WordCloud(font_path=font_file, background_color='black', width=800, height=800).generate(verses_arabic[key])\n    plt.figure( figsize=(20,10) )\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n    filename=\"img\/arabic\/\"+key+'-'+dfChapter.loc[int(key)-1]['TITLE']+'.png'\n    wordcloud.to_file(filename)","2c08be6b":"dfThemes=pd.read_excel(\"\/kaggle\/input\/themes\/Themes.xlsx\", index_col=[3,5]) #SURAH ndx and VERSES info index..\ndfThemes.head()\n","4cbe56d5":"dfSurahVerses  ={}\nexcludedlist=[]\ndef parse_str_interval(str) :\n    parse_list=[]\n    for part in str.split(','):\n        if(part.find('-')>=0) :\n            start,finish=part.split('-')\n            for i in range(int(start),int(finish)+1) :\n                parse_list.append(i)\n        else:\n            parse_list.append(int(part))\n    return parse_list\n                    \nfor index, row in dfThemes.iterrows():\n    verses=index[1].replace(' ','').replace(')','')\n    if(verses=='Tamam\u0131') :\n        verses_count=(dfChapter.loc[index[0]-1]['VERSE_COUNT'])\n        for i in range(1,verses_count+1) :\n            dfSurahVerses[index[0],i]=row\n    else:\n        verse_list=parse_str_interval(verses)\n        excluded_list=parse_str_interval(row['EXCLUDES'])        \n        for verse_part in verse_list:\n            if(verse_part not in excludedlist) :\n                dfSurahVerses[index[0],verse_part]=row\n","8a593084":"dfSurahVerses=pd.DataFrame.from_dict(dfSurahVerses, orient='index')\nprint(dfSurahVerses.info())","222a60af":"import seaborn as sns\nsns.catplot(data=dfSurahVerses, x='YEAR', y='GRUP', hue='PLACE')","24ab8095":"sns.set_context(\"paper\")\nplt.scatter(dfSurahVerses['YEAR'], dfSurahVerses['GRUP'], c= [1 if x =='Medine' else 0 for x in dfSurahVerses['PLACE']] , alpha=0.2, cmap=\"viridis\")\nplt.colorbar(); \nax.set_xlabel(\"YEAR\")\nax.set_ylabel(\"Theme\")\nax.set_title(\"Acc. Year Themes\")\nplt.show()","93fb4bd4":"!pip install pandas plotnine\n","1c9f9399":"from plotnine import *\n\"\"\"facet_grid('PLACE',scales='free_x')+ \\ \"\"\"\nggplot(dfSurahVerses, aes(x='YEAR', color='GRUP')) + \\\n    geom_line(stat = 'count') + \\\n    facet_wrap(['PLACE'],scales='free_y') \n#    flip_xlabels + \\\n\n","a62424b9":"import seaborn as sns\ng = sns.FacetGrid(dfSurahVerses, col=\"PLACE\", col_wrap=2, height=8, \n                  hue_order=[\"Mekke\", \"Medine\"],\n                  hue_kws=dict(marker=[\"^\", \"v\"]) )\ng = g.map(plt.plot, \"YEAR\",\"GRUP\")\n","2e85fa5c":"ax = sns.swarmplot(y=\"GRUP\", x=\"YEAR\", hue=\"PLACE\", data=dfSurahVerses, palette=\"Set2\", dodge=True)","95d48534":"Let's start for wordcloud, Firstlyy Turkish WordCloud","8446715c":"**Study for theme**\nThe book: **Mehdi Bezirgan:** *Kur'an'\u0131n N\u00fczul S\u00fcreci*","b9c891b8":"**For arabic character, use font file**","a2458e65":"**HOLLY QURAN ANALYSIS, WITH TURKISH AND ARABIC WORDS**","62503137":"**Let's start Turkish wordcloud**\n* one image for every chapter, get all images from output path.\n* plt code blok ","5779abea":"exclude some words conjunction, pronoun, auxiliary verbs, preposition etc.","29f0a91a":"Comparation between Woman, Man (In Turkish Kad\u0131n, Erkek) according to revelotion place Makkah or Madinah?","9bc96fc6":"Join chapter with meaning groups","aa933315":"QURAN Revolution order and suhaf order are different."}}