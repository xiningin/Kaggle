{"cell_type":{"c10b2089":"code","0657f411":"code","b9ea3dad":"code","5374648e":"code","fee48bc8":"code","0986ddb0":"code","45aa7178":"code","01635043":"code","c06dca79":"code","6d315758":"code","7190dbd2":"code","9ef55265":"code","4840a682":"code","fdba0f74":"code","00b5f49b":"code","892994b6":"code","9c11bed0":"code","3a83e0d9":"code","072efdcd":"code","eb45ab44":"code","82c13371":"code","3becfe38":"code","8b9e0f3d":"code","41f5a716":"code","b1cb8fbf":"code","f7c7d71c":"code","0e2741ef":"code","33fa35b5":"code","a39af41e":"code","bf38a6f1":"markdown","6780670a":"markdown","454da7b5":"markdown"},"source":{"c10b2089":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","0657f411":"df_train = pd.read_csv(\"..\/input\/train.csv\", index_col='Id')","b9ea3dad":"df_train.head()","5374648e":"df_train.dtypes","fee48bc8":"df_train.describe()","0986ddb0":"df_train.columns","45aa7178":"sns.distplot(df_train.SalePrice)","01635043":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n\ndf_train.select_dtypes(include=numerics).head()","c06dca79":"f, ax = plt.subplots(figsize=(16, 8))\ndf_train.YearBuilt.value_counts().sort_index().plot.bar()","6d315758":"f, ax = plt.subplots(figsize=(16, 8))\n\nfig = sns.boxenplot(x='YearBuilt', y='SalePrice', data=df_train)\nfig.axis(ymin=0, ymax=800000)\nplt.xticks(rotation=90)","7190dbd2":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","9ef55265":"feature_cols = ['OverallQual', 'YearBuilt', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'FullBath', 'GarageCars', 'GarageArea']\nsns.pairplot(df_train[feature_cols])","4840a682":"total_missing = df_train.isna().sum().sort_values(ascending=False)\npercent_missing = total_missing * 100.0 \/ len(df_train) \nmissing = pd.concat([total_missing, percent_missing], axis=1, keys=['Number', 'Percent'])\nmissing[missing.Number > 0]","fdba0f74":"feature_name = \"GrLivArea\"\nplt.scatter(np.log(df_train[\"SalePrice\"]), df_train[feature_name])","00b5f49b":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.base import TransformerMixin","892994b6":"class TypeSelector(TransformerMixin):\n    def __init__(self, dtype):\n        self.dtype = dtype\n    def fit(self,X):\n        return self\n    def transform(self, X, Y=None):\n        return X.select_dtypes(include=[self.dtype])\nclass MyEncoder(TransformerMixin):\n    def __init__(self):\n        self.encoder = LabelEncoder()\n    def fit(self, X):\n        return self\n    def transform(self, X, Y=None):\n        assert isinstance(X, pd.DataFrame)\n        X_t = X.fillna(\"Other\")\n        for x in X_t:\n            X_t[x] = X_t[x].astype(\"category\")\n        X_t = X_t.apply(lambda x : x.cat.codes.replace({-1: len(x.cat.categories)}))\n        return X_t","9c11bed0":"X_train = df_train.drop(columns='SalePrice')\nY_train = df_train['SalePrice']\n\npipeline = FeatureUnion(transformer_list=[\n    (\"numbericals\", Pipeline([\n        (\"selector\", TypeSelector(np.number)),\n        (\"imputer\", SimpleImputer()),\n        (\"scaler\", StandardScaler())\n    ])),\n    (\"categories\", Pipeline([\n        (\"selector\", TypeSelector(\"object\")),\n        (\"encoder\", MyEncoder())\n    ]))\n])\n\nX_train = pipeline.fit_transform(X_train)\nX_train.shape","3a83e0d9":"X_train","072efdcd":"Y_train = np.log(Y_train)\nX, X_test, Y, Y_test = train_test_split(X_train, Y_train, test_size=0.2, shuffle=True, random_state=42)","eb45ab44":"lin_reg = LinearRegression()\nlin_reg.fit(X, Y)\n\npreds = lin_reg.predict(X_test)\nprint(\"Root mean squared error: %0.3f\" % (np.sqrt(mean_squared_error(Y_test, preds))))","82c13371":"from xgboost.sklearn import XGBRegressor","3becfe38":"params = {\n    'eta': 0.01,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'seed': 2018,\n    'silent': True,\n    'colsample_bylevel': 0.6,\n    'n_estimators': 1000,\n    'reg_alpha': 0, 'reg_lambda': 1,\n    'nthread' : 4,\n}\n\nmodel = XGBRegressor(**params)\nmodel.fit(X, Y)\npreds = model.predict(X_test)\nprint(\"Root mean squared error : %0.6f\" % (mean_squared_error(Y_test, preds)))","8b9e0f3d":"df_test = pd.read_csv(\"..\/input\/test.csv\", index_col='Id')","41f5a716":"df_test.head()","b1cb8fbf":"X_submit = pipeline.fit_transform(df_test)","f7c7d71c":"preds_submit = model.predict(X_submit)\npreds_submit = np.exp(preds_submit)","0e2741ef":"df_result = pd.DataFrame(np.c_[df_test.reset_index().iloc[:, 0].values, preds_submit], columns=['Id', 'SalePrice'])\ndf_result['Id'] = df_result['Id'].astype(int)","33fa35b5":"df_result.to_csv(\"submission.csv\", index=False)","a39af41e":"preds_submit","bf38a6f1":"# Submit result","6780670a":"# Train model","454da7b5":"# Housing price prediction"}}