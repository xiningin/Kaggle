{"cell_type":{"af5d86c2":"code","9e9b60a8":"code","f5927b71":"code","8c1e8cea":"code","84e09c0e":"code","3fd19f9a":"code","d5ca4aa7":"code","5e06a221":"code","20fea025":"code","aba37be9":"code","243e4785":"code","c15b8d64":"code","5bd94cd0":"code","de5e934e":"code","81680beb":"code","3fe2e9af":"code","c120d561":"code","2c46d552":"code","58277c47":"code","bfb28b88":"code","d576a03c":"code","650c8402":"code","1220f277":"code","8c590f1b":"code","59e0dd22":"code","cfada8e6":"code","c493779b":"code","ea327c07":"code","5da5ec0c":"code","7e9f6681":"code","14626deb":"code","20823656":"code","a3a04f5c":"code","9612edd2":"code","3c8ec605":"code","439b7ef0":"code","e3be500d":"code","61578dfa":"code","5cc756db":"code","28607f39":"code","dd910741":"code","6370757b":"code","eef10731":"code","2ce6c719":"code","80663715":"code","6bf1b89e":"code","5a723d5e":"markdown","de8d0b50":"markdown","29008416":"markdown","ae51d7db":"markdown","c7e26d10":"markdown","1a17f1e5":"markdown","b0d986a2":"markdown","49cc5c36":"markdown","92a9cae2":"markdown","1857c47d":"markdown","27d2646e":"markdown","8f384578":"markdown","c018b380":"markdown","69659fc2":"markdown","6544f6aa":"markdown","5b9183c3":"markdown","196bad4a":"markdown","55b000ff":"markdown","4fefc21a":"markdown","de22170e":"markdown","4ccd74a1":"markdown","d2467014":"markdown","b3deb185":"markdown","a99ceac1":"markdown","98fe0a89":"markdown","f6332ac7":"markdown","9c55ec67":"markdown","27d41237":"markdown","32b6b957":"markdown","9066f396":"markdown","1d2c1255":"markdown","3c06cd33":"markdown","884f5c92":"markdown","3ebd92e7":"markdown","3e0ee883":"markdown","59017727":"markdown","ef8f70aa":"markdown","64ad9fbc":"markdown","a8d16212":"markdown","38249333":"markdown"},"source":{"af5d86c2":"# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify # pip install squarify (algorithm for treemap)\nimport os\nimport math \n\n%matplotlib inline","9e9b60a8":"# Load app store file\napps = pd.read_csv(\"..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv\", index_col=[0])\napps.head()","f5927b71":"#Overview of dataset\napps.info()","8c1e8cea":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n\nmissing_data(apps)","84e09c0e":"apps['size_bytes'] = apps['size_bytes'] \/ 1000000\napps.rename(columns={'size_bytes':'size_mb'}, inplace=True)\napps.head(5)","3fd19f9a":"apps.duplicated(subset=None, keep=False)\napps.head(5)","d5ca4aa7":"genres = apps['prime_genre'].unique()\nprint(\"Total genres : {}\".format(len(genres)))\nprint(genres)","5e06a221":"freeapps = apps[apps.price == 0.0]\npaidapps = apps[apps.price != 0.0]\n\nprint(\"Free apps : \",len(freeapps))\nprint(\"Paid apps : \",len(paidapps))","20fea025":"app_pricedf= pd.DataFrame( [len(freeapps),len(paidapps)] , index=['free','paid'])\napp_pricedf.plot(kind='pie', subplots=True, figsize=(16,8), autopct='%1.1f%%')","aba37be9":"# Return the numbers of free app in each genres\ndef genreFree(gen):\n    return len(apps[(apps['price'] == 0.0) & (apps['prime_genre']== gen)])","243e4785":"# Return the numbers of paid app in each genres\ndef genrePaid(gen):\n    return len(apps[(apps['price'] != 0.0) & (apps['prime_genre']== gen)])","c15b8d64":"# Make list of each genre , its free app, paid app and total app . then merge it into one dataframe\ngenre_list = list()\ngenreFree_list = list()\ngenrePaid_list = list()\ngenreTotal_list = list()","5bd94cd0":"# append all details in respective list\nfor gen in genres:  \n    free_gen = genreFree(gen)\n    paid_gen = genrePaid(gen)\n    totalapp_gen = free_gen + paid_gen\n    genre_list.append(gen)\n    genreFree_list.append(free_gen)\n    genrePaid_list.append(paid_gen)\n    genreTotal_list.append(totalapp_gen)","de5e934e":"# Let's make a dataframe of it\ngenre_df = pd.DataFrame({\n    \"genre_name\" : genre_list,\n    \"genre_freeApp\" : genreFree_list,\n    \"genre_paidApp\" : genrePaid_list,\n    \"genre_totalApp\" : genreTotal_list\n},columns=['genre_name','genre_freeApp','genre_paidApp','genre_totalApp'])\n\n#sorting into descending order\ngenre_df.sort_values('genre_totalApp', ascending=False, inplace=True)\n\ngenre_df.head(10)","81680beb":"# remove duplicate genre \ngenre_df.drop_duplicates('genre_name',keep= False,inplace=True)\ngenre_df.head()","3fe2e9af":"def groupedGraph(start,end):\n    # set width of bar\n    barWidth = 0.20\n\n    # set height of bar\n    bars1 = genre_df['genre_freeApp'][start:end]\n    bars2 = genre_df['genre_paidApp'][start:end]\n    bars3 = genre_df['genre_totalApp'][start:end]\n\n    # Set position of bar on X axis\n    r1 = np.arange(bars1.size)\n    r2 = [x + barWidth for x in r1]\n    r3 = [x + barWidth for x in r2]\n\n    # Make the plot\n    plt.bar(r1, bars1, color='#36688D', width=barWidth, edgecolor='white', label='Free apps')\n    plt.bar(r2, bars2, color='#F3CD05', width=barWidth, edgecolor='white', label='Paid apps')\n    plt.bar(r3, bars3, color='#F49F05', width=barWidth, edgecolor='white', label='Total apps')\n\n    # Add xticks on the middle of the group bars\n    plt.xticks([r + barWidth for r in range(len(bars1))], genre_df['genre_name'][start:end])\n\n    # Create legend & Show graphic\n    plt.legend()\n","c120d561":"#Let's visualize this dataframe into the Grouped barplot\n\nfig = plt.figure(figsize=(25,15))\n\nplt.subplot(311)\ngroupedGraph(0,1)\n\nplt.subplot(312)\ngroupedGraph(1,12)\n\nplt.subplot(313)\ngroupedGraph(12,23)\n\n","2c46d552":"popular_apps = apps.sort_values(['user_rating','rating_count_tot'], ascending=False)\npopular_apps.head()","58277c47":"#Let's visualize top 10 higher rating applications in bar plot\n\nfig = plt.figure(figsize=(20,8))\n\nax = sns.barplot(popular_apps['track_name'][0:20], (popular_apps['rating_count_tot']\/popular_apps['user_rating'])[0:20])\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\")","bfb28b88":"# All higher rating applications \nratingapp = popular_apps[(popular_apps['user_rating'] == 4.0) | (popular_apps['user_rating'] == 5.0) | (popular_apps['user_rating']==4.5)]\nratingapp.head(5)","d576a03c":"#Only free higher rating applications\nfree_ratingapp = ratingapp[ratingapp['price'] == 0.0]\n\n#Only paid higher rating applications\npaid_ratingapp = ratingapp[ratingapp['price'] != 0.0]\n\nprint(\"All higher rating applications :\", len(ratingapp))\nprint(\"Free higher rating applications : \",len(free_ratingapp))\nprint(\"Paid higher rating applications : \",len(paid_ratingapp))","650c8402":"#let's visualize popular free and paid rating apps (4 to 5 rating)\nfig = plt.figure(figsize=(20,8))\n\nplt.subplot(411)\nplt.title(\"Top 10 highest free rating apps (4 to 5 rating)\")\nax = sns.barplot(free_ratingapp['track_name'][0:9] + '---' + free_ratingapp['prime_genre'][0:9],(free_ratingapp['rating_count_tot']\/free_ratingapp['user_rating'])[0:9], color=\"red\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\")\n\nplt.subplot(414)\nplt.title(\"Top 10 highest paid rating apps (4 to 5 rating)\")\nax = sns.barplot(paid_ratingapp['track_name'][0:9] + '---' + paid_ratingapp['prime_genre'][0:9],(paid_ratingapp['rating_count_tot']\/paid_ratingapp['user_rating'])[0:9], color=\"blue\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\")","1220f277":"# create the empty lists for storing total highratingapps in their respective genres\nfree_highratingapp = list()\npaid_highratingapp = list()\ntotal_highratingapp = list()","8c590f1b":"# appending free and paid popular apps for each genres\nfor g in ratingapp['prime_genre'].unique():\n    free_highratingapp.append(len(free_ratingapp[free_ratingapp['prime_genre']== g]))\n    paid_highratingapp.append(len(paid_ratingapp[paid_ratingapp['prime_genre']== g]))\n    total_highratingapp.append(len(free_ratingapp[free_ratingapp['prime_genre']== g]) + len(paid_ratingapp[paid_ratingapp['prime_genre']== g]))\n    ","59e0dd22":"# Make dataframe of total free and paid apps genreswise\nrating_df = pd.DataFrame({\n    'genre' : genre_list,\n    'free_higherRating' : free_highratingapp,\n    'paid_higherRating' : paid_highratingapp,\n    'total_higherRating' : total_highratingapp\n},columns=['genre','free_higherRating','paid_higherRating','total_higherRating'])\n\nrating_df.sort_values('total_higherRating',ascending =False, inplace=True)\nrating_df.head()","cfada8e6":"#remove duplicates if any\nrating_df.drop_duplicates('genre',keep=False,inplace=True)\nrating_df.head()","c493779b":"fig = plt.figure(figsize=(15,20))\n\nplt.subplot(321)\n# Create a circle for the center of the plot\ncircle=plt.Circle( (0,0), 0.7, color='white')\n\nplt.pie(rating_df['free_higherRating'][0:10], labels= rating_df['genre'][0:10])\np=plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Top 10 Free popular applications genres\")\n\nplt.subplot(322)\n# Create a circle for the center of the plot\ncircle=plt.Circle( (0,0), 0.7, color='white')\n\nplt.pie(rating_df['paid_higherRating'][0:10], labels= rating_df['genre'][0:10])\np=plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Top 10 Paid popular applications genres\")\n\n","ea327c07":"def dountChart(gen,title):  \n    # Create a circle for the center of the plot\n    circle=plt.Circle( (0,0), 0.7, color='white')\n    \n    # just keep on user rating as name not overlapping while pie chart plotting\n    plt.pie(ratingapp['user_rating'][ratingapp['prime_genre']==gen][0:10], labels= ratingapp['track_name'][ratingapp['prime_genre']==gen][0:10])\n    p=plt.gcf() #gcf = get current figure\n    p.gca().add_artist(circle)\n    plt.title(title , fontname=\"arial black\")","5da5ec0c":"gens = ['Games','Shopping','Social Networking','Music','Food & Drink', 'Photo & Video','Sports','Finance']\n\nfig = plt.figure(figsize=(25,30))\n\nplt.subplot(421)\ndountChart(gens[0],'Top Higher rating '+gens[0]+' apps')  \n\nplt.subplot(422)\ndountChart(gens[1],'Top Higher rating '+gens[1]+' apps')\n\nplt.subplot(423)\ndountChart(gens[2],'Top Higher rating '+gens[2]+' apps')\n\nplt.subplot(424)\ndountChart(gens[3],'Top Higher rating '+gens[3]+' apps')\n\nplt.subplot(425)\ndountChart(gens[4],'Top Higher rating '+gens[4]+' apps')\n\nplt.subplot(426)\ndountChart(gens[5],'Top Higher rating '+gens[5]+' apps')\n\nplt.subplot(427)\ndountChart(gens[6],'Top Higher rating '+gens[6]+' apps')\n\nplt.subplot(428)\ndountChart(gens[7],'Top Higher rating '+gens[7]+' apps')","7e9f6681":"def squatifyChart(gen,title):\n    squarify.plot(free_ratingapp['user_rating'][free_ratingapp['prime_genre']==gen][0:5], \n              label=free_ratingapp['track_name'][free_ratingapp['prime_genre']==gen][0:5],\n              alpha=.5,\n             norm_x=50)\n    plt.title(title)\n    plt.axis('off')","14626deb":"gens = ['Games','Shopping','Social Networking','Music','Food & Drink', 'Photo & Video','Sports','Finance']\n\nfig = plt.figure(figsize=(25,30))\n\nplt.subplot(421)\nsquatifyChart(gens[0],'Top Free Higher rating '+gens[0]+' apps')  \n\nplt.subplot(422)\nsquatifyChart(gens[1],'Top Free Higher rating '+gens[1]+' apps')\n\nplt.subplot(423)\nsquatifyChart(gens[2],'Top Free Higher rating '+gens[2]+' apps')\n\nplt.subplot(424)\nsquatifyChart(gens[3],'Top Free Higher rating '+gens[3]+' apps')\n\nplt.subplot(425)\nsquatifyChart(gens[4],'Top Free Higher rating '+gens[4]+' apps')\n\nplt.subplot(426)\nsquatifyChart(gens[5],'Top Free Higher rating '+gens[5]+' apps')\n\nplt.subplot(427)\nsquatifyChart(gens[6],'Top Free Higher rating '+gens[6]+' apps')\n\nplt.subplot(428)\nsquatifyChart(gens[7],'Top Free Higher rating '+gens[7]+' apps')","20823656":"def squatifyChart_paid(gen,title):\n    squarify.plot(paid_ratingapp['user_rating'][paid_ratingapp['prime_genre']==gen][0:5], \n              label=paid_ratingapp['track_name'][paid_ratingapp['prime_genre']==gen][0:5],\n              alpha=.5,\n              color=[\"pink\",\"green\",\"blue\", \"grey\"],\n             norm_x=50)\n    plt.title(title)\n    plt.axis('off')","a3a04f5c":"gens = ['Games','Shopping','Social Networking','Music','Food & Drink', 'Photo & Video','Sports','Finance']\n\nfig = plt.figure(figsize=(25,30))\n\nplt.subplot(421)\nsquatifyChart_paid(gens[0],'Top Paid Higher rating '+gens[0]+' apps')  \n\nplt.subplot(422)\nsquatifyChart_paid(gens[1],'Top Paid Higher rating '+gens[1]+' apps')\n\nplt.subplot(423)\nsquatifyChart_paid(gens[2],'Top Paid Higher rating '+gens[2]+' apps')\n\nplt.subplot(424)\nsquatifyChart_paid(gens[3],'Top Paid Higher rating '+gens[3]+' apps')\n\nplt.subplot(425)\nsquatifyChart_paid(gens[4],'Top Paid Higher rating '+gens[4]+' apps')\n\nplt.subplot(426)\nsquatifyChart_paid(gens[5],'Top Paid Higher rating '+gens[5]+' apps')\n\nplt.subplot(427)\nsquatifyChart_paid(gens[6],'Top Paid Higher rating '+gens[6]+' apps')\n\nplt.subplot(428)\nsquatifyChart_paid(gens[7],'Top Paid Higher rating '+gens[7]+' apps')","9612edd2":"apps.sort_values([\"sup_devices.num\",\"user_rating\"],ascending=False).head()","3c8ec605":"sup_devices_apps = pd.DataFrame({\n    'number_of_devices' :apps[\"sup_devices.num\"].value_counts().index,\n    'total_number_of_apps' : apps[\"sup_devices.num\"].value_counts()\n},columns=['number_of_devices','total_number_of_apps'])\n\nsup_devices_apps.head()","439b7ef0":"def sup_device_genre(genre):\n    genre_apps = apps.groupby(\"prime_genre\").get_group(genre)\n    return pd.DataFrame({\n              genre : genre_apps[\"sup_devices.num\"].value_counts(),\n                },columns=[genre])","e3be500d":"for g in genres:\n    sup_devices_apps[g] = sup_device_genre(g)\n  \n    \nsup_devices_apps.fillna(0, inplace=True)\nsup_devices_apps.sort_values('number_of_devices', ascending= False, inplace=True)\nsup_devices_apps.head()","61578dfa":"sup_devices_free_apps = pd.DataFrame({\n    'number_of_devices' :freeapps[\"sup_devices.num\"].value_counts().index,\n    'total_number_of_free_apps' : freeapps[\"sup_devices.num\"].value_counts()\n},columns=['number_of_devices','total_number_of_free_apps'])\n\nsup_devices_free_apps.head()","5cc756db":"sup_devices_paid_apps = pd.DataFrame({\n    'number_of_devices' : paidapps[\"sup_devices.num\"].value_counts().index,\n    'total_number_of_paid_apps' : paidapps[\"sup_devices.num\"].value_counts()\n},columns=['number_of_devices','total_number_of_paid_apps'])\n\nsup_devices_paid_apps.head()","28607f39":"plt.figure(figsize=(12,10))\ncor = apps.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","dd910741":"new_apps = apps\n\ndel new_apps['currency']\ndel new_apps['ver']\n\nnew_apps.head()","6370757b":"new_apps['total_users_rating'] = new_apps['rating_count_tot'] \/ new_apps['user_rating']\nnew_apps['total_users_rating_cur'] = new_apps['rating_count_ver'] \/ new_apps['user_rating_ver']\n\ndel new_apps['rating_count_tot']\ndel new_apps['user_rating']\ndel new_apps['rating_count_ver']\ndel new_apps['user_rating_ver']\n\nnew_apps['total_users_rating'].fillna(0, inplace=True)\nnew_apps['total_users_rating_cur'].fillna(0, inplace=True)\n\nnew_apps['total_users_rating'] = new_apps['total_users_rating'].apply(lambda x : math.ceil(x))\nnew_apps['total_users_rating_cur'] = new_apps['total_users_rating_cur'].apply(lambda x : math.ceil(x))\nnew_apps.head()","eef10731":"len(new_apps[new_apps['lang.num'] == 0])","2ce6c719":"new_apps['lang.num'].replace(0,1, inplace= True)\nlen(new_apps[new_apps['lang.num'] == 0])","80663715":"print(\"Total number of apps that are available in a multiple languages : {} \".format(len(new_apps[new_apps['lang.num'] > 1])))\nprint(\"Number of apps that are available in only one language languages : {} \".format(len(new_apps[new_apps['lang.num'] == 1])))\nprint(\"Number of apps that are available in the range of 5 to 20 languages : {} \".format(len(new_apps[(new_apps['lang.num'] >= 5) & (new_apps['lang.num'] <= 20)])))\nprint(\"Number of apps that are available in the range of 20 to 50 languages : {} \".format(len(new_apps[(new_apps['lang.num'] >= 20) & (new_apps['lang.num'] <= 50)])))\nprint(\"Number of apps that are available in more than 50 languages : {} \".format(len(new_apps[new_apps['lang.num'] >= 50])))\n","6bf1b89e":"print(\"Maximum languges support application : \")\nnew_apps[['track_name','lang.num','prime_genre']][new_apps['lang.num'] == max(new_apps['lang.num'])]","5a723d5e":"1. #### <div id=\"bytes\"> --- Convert app size from Bytes to MB --- <\/div>\n\nThis step is  necessary as it become easy for further analysis","de8d0b50":"#### <div id=\"total_sup_device_free\"> --- Find Total Free apps in Most Supported devices ---<\/div>\n","29008416":"Let's count total free apps and total paid apps in this dataset","ae51d7db":"- A value closer to 0 implies a weaker correlation (exact 0 implying no correlation)\n- A value closer to 1 implies a stronger positive correlation\n- A value closer to -1 implies a stronger negative correlation","c7e26d10":"#### <div id=\"total_sup_device\"> --- Find Total apps in Most Supported devices ---<\/div>\n","1a17f1e5":"### <div id=\"dataprep\">Data Pre-Processing Steps<\/div>","b0d986a2":"#### <div id=\"popular_free_app_rating\"> --- Find Most High rating Free apps in all Genres --- <\/div>\n","49cc5c36":"As we can see that there is no missing values in entire dataset","92a9cae2":" #### <div id=\"total_free_paid_genres\"> --- Find Free and paid apps in all genres --- <\/div>\n","1857c47d":"### <div id=\"intro\">Introduction <\/div>","27d2646e":"Here, I have sorted user_rating and rating_count_tot fields in a descending order to get highest rating apps for all versions in order to find most popular apps","8f384578":"Divide ratingapp dataframe into free_ratingapp and paid_ratingapp","c018b380":"Check whether any error in support language field...","69659fc2":"####  <div id=\"missing\"> --- Check Missing values --- <\/div>\n\nThis is almost the first step to check whether dataset has any null or empty value or not.","6544f6aa":"### <div id=\"libs\">Import all libraries <\/div>","5b9183c3":" #### Dataset Name : Mobile App Statistics (Apple iOS app store)\n#### Contents :\n\n \"id\" : App ID <br>\n \n \"track_name\": App Name <br>\n \n \"size_bytes\": Size (in Bytes) <br>\n \n \"currency\": Currency Type <br>\n \n \"price\": Price amount <br>\n \n \"rating_count_tot\": User Rating counts (for all version) <br>\n \n \"rating_count_ver\": User Rating counts (for current version) <br>\n \n \"user_rating\" : Average User Rating value (for all version) <br>\n \n \"user_rating_ver\": Average User Rating value (for current version) <br>\n \n \"ver\" : Latest version code <br>\n \n \"cont_rating\": Content Rating <br>\n \n \"prime_genre\": Primary Genre <br>\n \n \"sup_devices.num\": Number of supporting devices <br>\n \n \"ipadSc_urls.num\": Number of screenshots showed for display <br>\n \n \"lang.num\": Number of supported languages <br>\n \n \"vpp_lic\": Vpp Device Based Licensing Enabled <br>\n","196bad4a":"#### <div id=\"total_free_paid\"> --- Find Total free and paid apps --- <\/div>\n","55b000ff":"### <div id=\"pearson\"> Pearson Correlation  <\/div>","4fefc21a":"#### <div id=\"popular_genres_both\"> --- Find Most Popluar Genres in Free apps and Paid apps --- <\/div>\n","de22170e":"#### <div id=\"popular_app_genres\"> --- Find Most Popluar apps in all Genres --- <\/div>\n","4ccd74a1":"#### <div id=\"total_free_paid_popularapp\"> --- Find Total Free and Paid apps in the list of popular apps (rating 4 to 5) --- <\/div>","d2467014":"#### <div id=\"popular_app_rating\"> --- Find Most High rating apps in all Genres --- <\/div>\n","b3deb185":"#### <div id=\"dup\">--- Remove Duplicates rows --- <\/div>","a99ceac1":"Let's segregate apps from rating 4 to 5 only","98fe0a89":"#### <div id=\"total_sup_device_genres\"> --- Find Total apps in Most Supported devices genrewise ---<\/div>\n","f6332ac7":"#### <div id=\"un_genres\"> --- Find different kind of genres --- <\/div>\n","9c55ec67":" <div id=\"maxlangapp\">Maximum languges support application<\/div>","27d41237":"#### <div id=\"total_sup_device_paid\"> --- Find Total Paid apps in Most Supported devices ---<\/div>\n","32b6b957":" ### <div id=\"feature_engineer\"> Feature engineering <\/div>","9066f396":"### <div id=\"dataset\">Load Dataset<\/div>","1d2c1255":"#### <div id=\"sup_device\"> --- Find Most Supported devices apps --- <\/div>","3c06cd33":" <div id=\"games\">Total number of Games that are available in a multiple languages<\/div>","884f5c92":"Here, visualize it in circle graph","3ebd92e7":"Let's Create a new features ","3e0ee883":"Remove columns that are not much useful but how will you decide whether it is important for you or not.<br>\nwell, there are many ways : <br>\n1. It depends on what is your purpose for making model.\n2. various correlation techniques such a pearson correction.\n\nHere, the link : https:\/\/www.yashpatel.tech\/online-tutorials\/pearson-correlation-for-feature-selection-in-ml\/\n\nFor now I am deleting currency and version fields as I feel that it is not much useful","59017727":"## <div id=\"insight\"> Find Different Insights <\/div>\n","ef8f70aa":"### Table of Contents\n\n<ul>\n    <li> Introduction <\/li>\n    <li> Import all libraries <\/li>\n    <li> Load Dataset <\/li>\n    <li> Data Pre-Processing Steps <\/li>\n         <ul>\n             <li>Check Missing values<\/li>\n             <li>Remove Duplicates rows<\/li>\n             <li>Convert app size from Bytes to MB<\/li>\n        <\/ul>\n    <li>Find Different Insights <\/li>\n        <ul>\n            <li> Find different kind of Genres <\/li>\n            <li> Find Total Free and Paid apps <\/li>\n            <li> Find Free and Paid apps in all Genres <\/li>\n            <li> Find Most Popluar apps in all Genres ratingwise <\/li>\n            <li> Find Total Free and Paid apps in the list of popular apps (rating 4 to 5) <\/li>\n            <li> Find Most Popluar Genres in Free apps and Paid apps <\/li>\n            <li> Find Most High rating apps in all Genres<\/li>\n            <li> Find Most High rating Free apps in all Genres<\/li>\n            <li> Find Most High rating Paid apps in all Genres<\/li>\n            <li> Find Most Supported devices apps <\/li>\n            <li> Find Total apps in Most Supported devices <\/li>\n            <li> Find Total apps in Most Supported devices genrewise <\/li>\n            <li> Find Total Free apps in Most Supported devices <\/li>\n            <li> Find Total Paid apps in Most Supported devices <\/li>\n            <li> Total number of Games that are available in a multiple languages<\/li>\n            <li> Maximum languges support application<\/li>\n        <\/ul>\n    <li>Pearson Correlation <\/li>\n    <li> Feature engineering <\/li>\n<\/ul>\n","64ad9fbc":"Here, this is an error as it is not possible that game has 0 language <br>\nSo, Let's replace 0 to 1 ","a8d16212":"Now, visualize on pie chart ","38249333":"#### <div id=\"popular_paid_app_rating\"> --- Find Most High rating Paid apps in all Genres --- <\/div>\n\n"}}