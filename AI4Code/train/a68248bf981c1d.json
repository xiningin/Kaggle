{"cell_type":{"88b87d02":"code","977c1119":"code","e18676eb":"code","388e8a8c":"code","92868f56":"code","7e7b50e3":"code","95afeca8":"code","fdb58915":"code","8228a3a4":"code","a8e3c3b0":"code","56f6c416":"code","13582dd8":"code","1e1d4a07":"code","6d5d6d8f":"code","5323c2bb":"code","d7a38f0f":"code","52c16c74":"code","9f7354cd":"code","0d7141d1":"code","049cc622":"code","9b3b9af4":"code","1832c1f9":"code","42001c69":"code","8fef07c1":"code","6fa3dc07":"code","f71a99c7":"code","9889fa73":"code","53c8ac72":"code","a51e02da":"code","f27f9f82":"code","efc4f39e":"code","0f83fff5":"code","3e2996f9":"code","56c976f1":"code","565dc9e4":"code","93a40921":"code","917fe4b3":"code","f73865be":"code","7041a8cb":"code","713b3094":"markdown","a196a574":"markdown","826d1b8a":"markdown","efd74a65":"markdown","7a10569a":"markdown","fff3d512":"markdown","ded36379":"markdown","d0b5de6b":"markdown","a9516a6e":"markdown","90c54ab2":"markdown","b6562a0f":"markdown","c279fe3e":"markdown","4d27dfca":"markdown","5ec533d3":"markdown","1c43f35b":"markdown","a9ae61bc":"markdown","db0ff276":"markdown","35ebdd3b":"markdown","091c11cc":"markdown","cf6f4dfc":"markdown","3c645b29":"markdown","0bd1bf01":"markdown","2f676c16":"markdown","9437310a":"markdown","23b80758":"markdown","e9f5feb8":"markdown","ae532f89":"markdown"},"source":{"88b87d02":"import pandas as pd \nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt \n%matplotlib inline","977c1119":"rides = pd.read_csv(\"..\/input\/divvy-bikeshare-data-preprocessed\/202005-divvy-tripdata.csv\")","e18676eb":"# Update member_casual column name to 'is_member' and replace with binary 0 or 1\nrides.loc[(rides.member_casual == 'member'), 'member_casual'] = 1\nrides.loc[(rides.member_casual == 'casual'), 'member_casual'] = 0\nrides.rename(columns = {'member_casual' : 'is_member', 'rideable_type' : 'bike_type'}, inplace = True)\n","388e8a8c":"rides.info()","92868f56":"sns.histplot(data = rides, x = 'ride_length_minutes', bins = 10)","7e7b50e3":"# Keep a copy of the original dataframe before removing observations to fall back on\nrides_orig = rides.copy()","95afeca8":"# Drop rides longer than 4 hours\nrides.drop(rides[rides['ride_length_minutes'] > 240].index, inplace = True)\nrides.info()","fdb58915":"members = rides[rides['is_member'] == 1]\nmembers.count()","8228a3a4":"casuals = rides[rides['is_member'] == 0]\ncasuals.count()","a8e3c3b0":"customer_counts = rides.groupby('is_member')['ride_id'].count()\ncustomer_counts","56f6c416":"sns.countplot(data = rides, x = 'is_member', palette = 'viridis')","13582dd8":"rides['ride_length_minutes'].mean()","1e1d4a07":"ride_length_means = rides.groupby('is_member')['ride_length_minutes'].mean()\nride_length_means","6d5d6d8f":"ride_length_medians = rides.groupby('is_member')['ride_length_minutes'].median()\nride_length_medians","5323c2bb":"ride_length_maxes = rides.groupby('is_member')['ride_length_minutes'].max()\nride_length_maxes","d7a38f0f":"# Calculate total count of circular rides\ncircular_rides = rides[rides['start_station_id'] == rides['end_station_id']]\ncircular_rides.count()","52c16c74":"# Calculate total count of linear rides\nlinear_rides = rides[rides['start_station_id'] != rides['end_station_id']]\nlinear_rides.count()","9f7354cd":"ax1 = sns.countplot(data = rides, x = 'day_of_week', color = 'purple')\nax1.set(title = 'Rides by Day of Week: All Riders', xlabel = 'Day of Week (1 = Sunday, 2 = Monday, ...)', ylabel = 'Number of Rides')","0d7141d1":"ax2 = sns.countplot(data = rides, x = 'day_of_week', hue = 'is_member', palette = 'GnBu_r')\nax2.set(title = 'Rides by Day of Week: Members vs. Casual Riders May 2020', xlabel = 'Day of Week (1 = Sunday, 2 = Monday, ...)', ylabel = 'Number of Rides')\nax2.legend(labels = ['Casual', 'Member'])","049cc622":"sns.countplot(data = rides, x = 'trip_start_hour', color = 'purple')","9b3b9af4":"ax_hour = sns.countplot(data = rides, x = 'trip_start_hour', hue = 'is_member', palette = 'GnBu_r')\nax_hour.set(title = 'Rides by Hour of Day: Members vs. Casual Riders', xlabel = 'Hour of Trip Start', ylabel = 'Number of Rides')\nax_hour.legend(labels = ['Casual', 'Member'])","1832c1f9":"ax_duration = sns.lineplot(data = rides, x = 'day_of_week', y = 'ride_length_minutes', hue = 'is_member', palette = 'viridis')\nax_duration.set(title = 'Ride Duration by Day of Week: Members vs. Casual Riders', xlabel = 'Day of Week (1 = Sunday, 2 = Monday, ...)', ylabel = 'Ride Duration (Minutes)')\nax_duration.legend(loc = 'upper right')\nax_duration.legend(labels = ['Casual', 'Member'])","42001c69":"# Calculate count of circular rides taken by members\nmembers[members['start_station_id'] == members['end_station_id']].count()","8fef07c1":"# Calculate count of linear rides taken by members\nmembers[members['start_station_id'] != members['end_station_id']].count()","6fa3dc07":"# Calculate percentage of members' rides that were linear\npercent_linear_members = members[members['start_station_id'] != members['end_station_id']].count() \/ (members[members['start_station_id'] != members['end_station_id']].count() + members[members['start_station_id'] == members['end_station_id']].count())\npercent_linear_members","f71a99c7":"# Calculate percentage of members' rides that were circular\npercent_circular_members = members[members['start_station_id'] == members['end_station_id']].count() \/ (members[members['start_station_id'] != members['end_station_id']].count() + members[members['start_station_id'] == members['end_station_id']].count())\npercent_circular_members","9889fa73":"# Calculate percentage of casual riders' rides that were linear\npercent_linear_casuals = casuals[casuals['start_station_id'] != casuals['end_station_id']].count() \/ (casuals[casuals['start_station_id'] != casuals['end_station_id']].count() + casuals[casuals['start_station_id'] == casuals['end_station_id']].count())\npercent_linear_casuals","53c8ac72":"# Calculate percentage of casual riders' rides that were circular\npercent_circular_casuals = casuals[casuals['start_station_id'] == casuals['end_station_id']].count() \/ (casuals[casuals['start_station_id'] != casuals['end_station_id']].count() + casuals[casuals['start_station_id'] == casuals['end_station_id']].count())\npercent_circular_casuals","a51e02da":"# Create new dataframe for the percentages of rides by member status and circular\/linear ride\ncirc_linear_df = pd.DataFrame(data = {'Casual: Circular Ride': percent_circular_casuals['ride_id'], 'Casual: Linear Ride': percent_linear_casuals['ride_id'], 'Member: Circular Ride': percent_circular_members['ride_id'], 'Member: Linear Ride': percent_linear_members['ride_id']}, index = [0])\ncirc_linear_df.head()","f27f9f82":"ax_circ_lin = sns.barplot(data = circ_linear_df, palette = 'GnBu_r')\nax_circ_lin.set_xticklabels(ax_circ_lin.get_xticklabels(), rotation = 40)\nax_circ_lin.set(title = 'Circular vs. Linear Rides', xlabel = 'Member and Ride Type', ylabel = 'Percentage of Rides')","efc4f39e":"feb_rides = pd.read_csv('..\/input\/divvy-bikeshare-data-preprocessed\/202102-divvy-tripdata.csv')\nfeb_rides.info()","0f83fff5":"feb_rides.loc[(feb_rides.member_casual == 'member'), 'member_casual'] = 1\nfeb_rides.loc[(feb_rides.member_casual == 'casual'), 'member_casual'] = 0\nfeb_rides.rename(columns = {'member_casual' : 'is_member', 'rideable_type' : 'bike_type'}, inplace = True)\n","3e2996f9":"feb_rides_orig = feb_rides.copy()\nfeb_rides.drop(feb_rides[feb_rides['ride_length_minutes'] > 240].index, inplace = True)\nfeb_rides.info()","56c976f1":"feb_rides['ride_length_minutes'].mean()","565dc9e4":"feb_counts = feb_rides.groupby('is_member')['ride_id'].count()\nfeb_counts","93a40921":"feb_means = feb_rides.groupby('is_member')['ride_length_minutes'].mean()\nfeb_means","917fe4b3":"feb_medians = feb_rides.groupby('is_member')['ride_length_minutes'].median()\nfeb_medians","f73865be":"ax_feb_dow = sns.countplot(data = feb_rides, x = 'day_of_week', hue = 'is_member', palette = 'GnBu_r')\nax_feb_dow.set(title = 'Rides by Day of Week: Members vs. Casual Riders February 2021', xlabel = 'Day of Week (1 = Sunday, 2 = Monday, ...)', ylabel = 'Number of Rides')\nax_feb_dow.legend(labels = ['Casual', 'Member'])","7041a8cb":"ax_feb_hour = sns.countplot(data = feb_rides, x = 'trip_start_hour', hue = 'is_member', palette = 'GnBu_r')\nax_feb_hour.set(title = 'Rides by Hour of Day: Members vs. Casual Riders February 2021', xlabel = 'Hour of Trip Start', ylabel = 'Number of Rides')\nax_feb_hour.legend(labels = ['Casual', 'Member'])","713b3094":"### Analysis of circular vs. linear rides made by members vs. casual riders","a196a574":"### Analysis of rides by ride duration \n\nCasual riders tend to take rides between 30 and 45 minutes, while members rides tend to be under 25 minutes in length.\n\nWeekday rides for both casual riders and members trend shorter in length than each group's weekend rides.","826d1b8a":"*Note that rides under 1 minute in length and rides with end date\/time listed as before the start date\/time were removed prior to .csv upload.  Additional data cleaning reported below.*","efd74a65":"### Define two new dataframes: 'members' and 'casuals' to separate annual members' rides from casual riders' rides","7a10569a":"## How can Divvy convert casual riders to members?\n\nMarketing initiatives focused on:\n\n* Getting around vehicle traffic and decreasing commute times to appeal to casual riders who do not yet use Divvy for commuting\n* The benefits of biking as a means of regular exercise to appeal to casual exercise riders\n\nPlan a marketing push during early-mid Spring to align with the optimal riding weather and increase in demand for outdoor activities\n\nEstablish a student membership and partner with city schools on promotion to attract students who may become long-term customers\n\nEstablish a weekends-only membership for casual riders who simply aren\u2019t able to ride during the week due to other commitments\n","fff3d512":"Members' rides continued to spike during commuting hours, even in the cold weather.\n\nLate night rides were lower volume than in May, but were no longer skewed towards casual riders.","ded36379":"## Conclusions","d0b5de6b":"### Analysis of rides by Day of Week\n\nOverall Friday-Sunday were the most popular days for rides.","a9516a6e":"The vast majority of rides are under 200 minutes in length, however there are some extreme outliers over 600 minutes (10 hours) in length.  \n\nLet's remove rides over 4 hours for our analysis, assuming rides longer than 4 hours are likely lost\/stolen\/non-returned bikes.","90c54ab2":"Annual members consistently took at least 2x the amount of rides as casual riders each day of the week.\n\nWeekends remained most popular for casual riders, but at much lower volumes than in May 2020.\n\nAnnual members' rides were pretty consistent each day of the week.","b6562a0f":"### Divvy\u2019s annual members are more likely to:\n    \n* Take short, \u2018point A to point B\u2019 trips (less than 20 minutes long)\n* Ride Monday through Friday\n* Continue to ride during colder months\n\n\nAnnual members are likely commuters to\/from work or school, or use Divvy to travel short distances for appointments, gatherings, etc.\n","c279fe3e":"### Import data analysis libraries, and load dataset","4d27dfca":"### Perform same data cleaning and filtering as above for May 2020 data","5ec533d3":"## Analysis using Python","1c43f35b":"Conclusions:\n\nRide volume drastically decreased for all riders, however members were less deterred by cold weather as their ridership decreased by 65% relative to May 2020 compared to a decrease of 88% for casual rides.\n\nDecreases in ride length were pretty consistent across all riders.","a9ae61bc":"# Divvy Bikeshare Case Study\n**Dataset Source:** https:\/\/divvy-tripdata.s3.amazonaws.com\/index.html (May 2020 and February 2021 files)\n\n**Data License:** https:\/\/www.divvybikes.com\/data-license-agreement\n\n**About Divvy:** from divvybikes.com\n\n* Divvy is Chicagoland\u2019s bike share system across Chicago and Evanston. \n* Consists of a fleet of bikes that are locked into a network of docking stations throughout the region. \n* Bikes can be unlocked from one station and returned to any other station in the system. \n* Used by riders to explore Chicago, commute to work or school, run errands, get to appointments or social engagements, and more.\n* Available for use 24 hours\/day, 7 days\/week, 365 days\/year, and riders have access to all bikes and stations across the system.\n\n**Data Format:** Data for each trip is anonymized and includes:\n* Trip start day and time\n* Trip end day and time\n* Trip start station\n* Trip end station\n* Rider type - annual member or 'casual rider' (purchased single-ride or all day pass)\n\n**Goals:** \n* Understand the usage differences and trends between Divvy\u2019s casual riders (single-ride pass purchasers) and annual members to inform marketing strategies to convert casual riders into annual members, increasing company profits.\n\n**Questions:**\n* How are casual riders using Divvy?\n* How are annual members using Divvy?\n* How does weather\/seasonality impact ridership for both casual and member riders?\n* How can Divvy market to casual riders to convert them to become annual members and increase company profits?\n\n\n","db0ff276":"### Additional data cleaning:\nRename columns, update datatypes, determine outlier threshold and remove extreme outliers","35ebdd3b":"On the weekends (Saturday and Sunday), ride volume was similar between members and casual riders, however during the week, members took more rides than casual riders.\n\nThis could indicate that members are more likely to be commuters to\/from work or school.","091c11cc":"### Divvy\u2019s casual riders are more likely to:\n\n* Take long rides (35+ minutes) that may start\/end at the same station\n* Ride mostly, or only, on the weekends\n* Not take rides during colder months\n\nCasual riders are likely using Divvy for leisure rides, tourism, or exercise, and not as a primary form of transportation within the city.\n","cf6f4dfc":"### Rides by day of week - February","3c645b29":"## Exploring Seasonality","0bd1bf01":"### February exploratory calculations","2f676c16":"### Exploratory summary metrics and calculations","9437310a":"### Load February 2021 Data","23b80758":"#### Check the distribution of ride_length_minutes values to determine outliers.","e9f5feb8":"### Analysis of rides by trip start hour","ae532f89":"# This case study is part of the conclusion of the Google Data Analytics Certification course on coursera.com.\n\n### Inspriation credit for the project goes to the courses creators!\n\n### I would greatly appreciate any and all feedback from those in the data analytics field, and my fellow students\/aspiring data analysts :)\n\n#### Please see notebook comments for the accompanying slide deck I created."}}