{"cell_type":{"ee7401fa":"code","f0ac1cca":"code","f577216a":"code","dcab3fa5":"code","6899ade3":"code","3d6b0e7d":"code","e7b52f11":"code","e902d7a4":"code","240c3abc":"code","f57a0f18":"code","bd262cc4":"code","814fd340":"code","993bea18":"code","98dc0c53":"code","bc5ca00e":"code","c4c927a9":"code","edf966e4":"code","b472bd6a":"code","d2b2fca0":"code","1f5df89b":"code","2ae17896":"code","78b72bcb":"code","8912c209":"code","831ba8b6":"code","00d074c0":"code","b2c20ed4":"code","8072e499":"code","7fd3fb06":"code","8c0bfe83":"code","e28a0f11":"code","43c92f21":"code","1ce69986":"code","b831b7dd":"code","6abafe35":"code","59196504":"code","b8787950":"code","9d9506e8":"code","53dd6492":"code","5e4f22f3":"code","543abed3":"code","97e014c9":"code","968ee2e7":"code","e5a7c736":"code","e168b350":"code","d349cad9":"code","e0af5bd0":"code","75ce8be4":"code","70dbc174":"code","8be15a3d":"code","c37a0617":"code","54b1f452":"code","4d82ef84":"code","ded5c4b1":"code","7b223eff":"code","cdf7ffcf":"code","95d12075":"code","75b2ed63":"code","a1c55e33":"code","7354d956":"code","af55b102":"code","3e2746fa":"code","6c744200":"code","9b0f7700":"code","675aee0f":"code","23449c42":"code","b761404b":"code","9d347cab":"code","3f8ffb14":"code","c013d941":"code","ef516683":"code","a05e72b4":"code","f9c83299":"code","c50999d4":"code","80d40217":"code","f2034fd5":"code","2802e72c":"code","b4333484":"code","f15a1c13":"code","1ae84629":"code","d5dc8a88":"code","9d850404":"code","8df0724d":"code","fa3a0490":"code","1c4c1600":"code","1522162b":"code","60e4ed6f":"code","c1069ab8":"code","4ebe1f8f":"code","f0c97489":"code","d30092ae":"code","b6dce4f8":"code","e2ffffef":"code","323bc282":"code","8bd097ad":"code","2a2c7583":"code","932830df":"code","b923dced":"code","636a8584":"code","08e5c850":"code","9c355818":"code","f7c90b45":"markdown","ab851b4a":"markdown","74b86721":"markdown","fe44c4d0":"markdown","0edb5bb7":"markdown","4c0c8769":"markdown","785f9f62":"markdown","ffabfcc9":"markdown","0d684cfa":"markdown","e9a0be8c":"markdown","9f0ca566":"markdown","a121785f":"markdown","2f9bc76e":"markdown","0d605faa":"markdown","09b6b9ec":"markdown","5a097c71":"markdown","63363905":"markdown","552f6126":"markdown","5714e35e":"markdown","087e4da8":"markdown","190eeade":"markdown","146ac7cd":"markdown","bd5dd3a3":"markdown","b7f10fc1":"markdown","51a6f538":"markdown","c0dbf4d4":"markdown","2048c6eb":"markdown","78ccf635":"markdown","93e3f0c3":"markdown","3bd07a02":"markdown","2fe4ca85":"markdown","8f76cffe":"markdown","5036d143":"markdown","8a949ada":"markdown","d3945bcc":"markdown","c75569ed":"markdown","1f355982":"markdown","326534e6":"markdown"},"source":{"ee7401fa":"# import package\nimport os\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nimport os\n# Package for visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix","f0ac1cca":"# Load data\ndf = pd.read_csv(\"..\/input\/credit-dataset\/credit_train.csv\")\ndf.head()","f577216a":"df.shape","dcab3fa5":"df.info()","6899ade3":"df.describe()","3d6b0e7d":"# Mencari perbandingan label\/class\ndf['Is_Lead'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)\nplt.show()","e7b52f11":"df_numeric = df[['Age','Vintage','Avg_Account_Balance','Is_Lead']]","e902d7a4":"import matplotlib.pyplot as plt\n \nsns.FacetGrid(df,hue=\"Is_Lead\",height=5).map(sns.distplot,\"Age\").add_legend()\nsns.FacetGrid(df,hue=\"Is_Lead\",height=5).map(sns.distplot,\"Vintage\").add_legend()\nsns.FacetGrid(df,hue=\"Is_Lead\",height=5).map(sns.distplot,\"Avg_Account_Balance\").add_legend()","240c3abc":"#pembuatan Scatter plot\nsns.set_style(\"whitegrid\")\nsns.pairplot(df_numeric,hue='Is_Lead',height=3);\nplt.show()","f57a0f18":"df['Is_Lead'] = df['Is_Lead'].astype(str)","bd262cc4":"sns.catplot(y=\"Is_Lead\", hue=\"Gender\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=df)","814fd340":"sns.catplot(y=\"Is_Lead\", hue=\"Region_Code\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=df)","993bea18":"sns.catplot(y=\"Is_Lead\", hue=\"Occupation\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=df)","98dc0c53":"jumlah_missing = pd.isnull(df).sum()\njumlah_missing","bc5ca00e":"rasio = jumlah_missing.div(len(df))\nrasio","c4c927a9":"df['Credit_Product'].fillna(df['Credit_Product'].mode()[0], inplace=True)","edf966e4":"df.head()","b472bd6a":"pd.isnull(df).sum()","d2b2fca0":"df[df[\"ID\"].duplicated(keep=False)].sort_values(\"ID\")","1f5df89b":"#Gender\ndf.loc[df['Gender'] == 'Male', 'Gender'] = 1\ndf.loc[df['Gender'] == 'Female', 'Gender'] = 0","2ae17896":"#Region Code\ndf_region = df.sort_values(by=['Region_Code'])","78b72bcb":"df_region['Region_Code'].unique()","8912c209":"conditions = [\n              (df['Region_Code'] == 'RG250'),\n              (df['Region_Code'] == 'RG251'),\n              (df['Region_Code'] == 'RG252'),\n              (df['Region_Code'] == 'RG253'),\n              (df['Region_Code'] == 'RG254'),\n              (df['Region_Code'] == 'RG255'),\n              (df['Region_Code'] == 'RG256'),\n              (df['Region_Code'] == 'RG257'),\n              (df['Region_Code'] == 'RG258'),\n              (df['Region_Code'] == 'RG259'),\n              (df['Region_Code'] == 'RG260'),\n              (df['Region_Code'] == 'RG261'),\n              (df['Region_Code'] == 'RG262'),\n              (df['Region_Code'] == 'RG263'),\n              (df['Region_Code'] == 'RG264'),\n              (df['Region_Code'] == 'RG265'),\n              (df['Region_Code'] == 'RG266'),\n              (df['Region_Code'] == 'RG267'),\n              (df['Region_Code'] == 'RG268'),\n              (df['Region_Code'] == 'RG269'),\n              (df['Region_Code'] == 'RG270'),\n              (df['Region_Code'] == 'RG271'),\n              (df['Region_Code'] == 'RG272'),\n              (df['Region_Code'] == 'RG273'),\n              (df['Region_Code'] == 'RG274'),\n              (df['Region_Code'] == 'RG275'),\n              (df['Region_Code'] == 'RG276'),\n              (df['Region_Code'] == 'RG277'),\n              (df['Region_Code'] == 'RG278'),\n              (df['Region_Code'] == 'RG279'),\n              (df['Region_Code'] == 'RG280'),\n              (df['Region_Code'] == 'RG281'),\n              (df['Region_Code'] == 'RG282'),\n              (df['Region_Code'] == 'RG283'),\n              (df['Region_Code'] == 'RG284')\n\n]\nchoises = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21'\n            ,'22','23','24','25','26','27','28','29','30','31','32','33','34','35']\ndf['Region_Code'] = np.select(conditions,choises, default='0')","831ba8b6":"#Occupation\ndf['Occupation'].unique()","00d074c0":"conditions = [\n              (df['Occupation'] == 'Other'),\n              (df['Occupation'] == 'Self_employed'),\n              (df['Occupation'] == 'Salaried'),\n              (df['Occupation'] == 'Entrepreneur')\n\n]\nchoises = ['1','2','3','4']\ndf['Occupation'] = np.select(conditions,choises, default='0')","b2c20ed4":"#Channel Code\ndf['Channel_Code'].unique()","8072e499":"conditions = [\n              (df['Channel_Code'] == 'X1'),\n              (df['Channel_Code'] == 'X2'),\n              (df['Channel_Code'] == 'X3'),\n              (df['Channel_Code'] == 'X4')\n\n]\nchoises = ['1','2','3','4']\ndf['Channel_Code'] = np.select(conditions,choises, default='0')","7fd3fb06":"df.head()","8c0bfe83":"#Credit_Product\nconditions = [\n              (df['Credit_Product'] == 'Yes'),\n              (df['Credit_Product'] == 'No'),\n             ]\nchoises = ['1','0']\ndf['Credit_Product'] = np.select(conditions,choises, default='0')","e28a0f11":"#Is_Active\nconditions = [\n              (df['Is_Active'] == 'Yes'),\n              (df['Is_Active'] == 'No'),\n             ]\nchoises = ['1','0']\ndf['Is_Active'] = np.select(conditions,choises, default='0')","43c92f21":"df.head()","1ce69986":"df.info()","b831b7dd":"df = df.drop(['ID'], axis=1)","6abafe35":"df","59196504":"# import necessary libraries \nimport numpy as np\nfrom sklearn.svm import SVC\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_auc_score\nfrom numpy import mean","b8787950":"from collections import Counter\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nimport numpy as np","9d9506e8":"#separating data\nx = df.iloc[:,:-1]\ny = df.iloc[:,-1]","53dd6492":"#define undersampling\nundersample = RandomUnderSampler(sampling_strategy='majority')","5e4f22f3":"#fit and apply the transform\nx_under, y_under = undersample.fit_resample(x, y)","543abed3":"#summarize class distribution\nprint(\"After Undersampling: \", Counter(y_under))","97e014c9":"x_under.shape","968ee2e7":"df_under = np.column_stack((x_under, y_under))","e5a7c736":"df_under","e168b350":"df_under = pd.DataFrame(df_under, columns=['Gender','Age', 'Region_Code',\n                                                'Occupation', 'Channel_Code', 'Vintage', 'Credit_Product',\n                                                'Avg_Account_Balance', 'Is_Active','Is_Lead'])","d349cad9":"df_under","e0af5bd0":"df_under['Gender'] = df_under['Gender'].astype(float)\ndf_under['Age'] = df_under['Age'].astype(float)\ndf_under['Region_Code'] = df_under['Region_Code'].astype(float)\ndf_under['Occupation'] = df_under['Occupation'].astype(float)\ndf_under['Channel_Code'] = df_under['Channel_Code'].astype(float)\ndf_under['Vintage'] = df_under['Vintage'].astype(float)\ndf_under['Credit_Product'] = df_under['Credit_Product'].astype(float)\ndf_under['Avg_Account_Balance'] = df_under['Avg_Account_Balance'].astype(float)\ndf_under['Is_Active'] = df_under['Is_Active'].astype(float)\ndf_under['Is_Lead'] = df_under['Is_Lead'].astype(float)","75ce8be4":"#separating data\nx = df.iloc[:,:-1]\ny = df.iloc[:,-1]","70dbc174":"# define oversampling strategy\nSMOTE = SMOTE()","8be15a3d":"#fit and apply the transform\nx_SMOTE, y_SMOTE = SMOTE.fit_resample(x,y)","c37a0617":"#summarize class distribution\nprint(\"After oversampling \",Counter(y_SMOTE))","54b1f452":"df_SMOTE = np.column_stack((x_SMOTE, y_SMOTE))","4d82ef84":"df_SMOTE = pd.DataFrame(df_SMOTE, columns=['Gender','Age', 'Region_Code',\n                                                'Occupation', 'Channel_Code', 'Vintage', 'Credit_Product',\n                                                'Avg_Account_Balance', 'Is_Active', 'Is_Lead'])","ded5c4b1":"df_SMOTE","7b223eff":"df_SMOTE['Gender'] = df_SMOTE['Gender'].astype(float)\ndf_SMOTE['Age'] = df_SMOTE['Age'].astype(float)\ndf_SMOTE['Region_Code'] = df_SMOTE['Region_Code'].astype(float)\ndf_SMOTE['Occupation'] = df_SMOTE['Occupation'].astype(float)\ndf_SMOTE['Channel_Code'] = df_SMOTE['Channel_Code'].astype(float)\ndf_SMOTE['Vintage'] = df_SMOTE['Vintage'].astype(float)\ndf_SMOTE['Credit_Product'] = df_SMOTE['Credit_Product'].astype(float)\ndf_SMOTE['Avg_Account_Balance'] = df_SMOTE['Avg_Account_Balance'].astype(float)\ndf_SMOTE['Is_Active'] = df_SMOTE['Is_Active'].astype(float)\ndf_SMOTE['Is_Lead'] = df_SMOTE['Is_Lead'].astype(float)","cdf7ffcf":"from scipy.stats import spearmanr","95d12075":"#Atribute Selection\n# calculate spearman's correlation\ncoef, p = spearmanr(df_under['Gender'], df_under['Is_Lead'])\nprint('Spearmans correlation coefficient Gender: %.3f' % coef)\n\ncoef, p = spearmanr(df_under['Age'], df_under['Is_Lead'])\nprint('Spearmans correlation coefficient Age: %.3f' % coef)\n\ncoef, p = spearmanr(df_under['Region_Code'], df_under['Is_Lead'])\nprint('Spearmans correlation coefficient Region_Code: %.3f' % coef)\n\ncoef, p = spearmanr(df_under['Occupation'], df_under['Is_Lead'])\nprint('Spearmans correlation coefficient Occupation: %.3f' % coef)\n\ncoef, p = spearmanr(df_under['Channel_Code'], df_under['Is_Lead'])\nprint('Spearmans correlation coefficient Channel_Code: %.3f' % coef)\n\ncoef, p = spearmanr(df_under['Vintage'], df_under['Is_Lead'])\nprint('Spearmans correlation coefficient Vintage: %.3f' % coef)\n\ncoef, p = spearmanr(df_under['Credit_Product'], df_under['Is_Lead'])\nprint('Spearmans correlation coefficient Credit_Product: %.3f' % coef)\n\ncoef, p = spearmanr(df_under['Avg_Account_Balance'], df_under['Is_Lead'])\nprint('Spearmans correlation coefficient Avg_Account_Balance: %.3f' % coef)\n\ncoef, p = spearmanr(df_under['Is_Active'], df_under['Is_Lead'])\nprint('Spearmans correlation coefficient Is_Active: %.3f' % coef)","75b2ed63":"#Atribute Selection\n# calculate spearman's correlation\ncoef, p = spearmanr(df_SMOTE['Gender'], df_SMOTE['Is_Lead'])\nprint('Spearmans correlation coefficient Gender: %.3f' % coef)\n\ncoef, p = spearmanr(df_SMOTE['Age'], df_SMOTE['Is_Lead'])\nprint('Spearmans correlation coefficient Age: %.3f' % coef)\n\ncoef, p = spearmanr(df_SMOTE['Region_Code'], df_SMOTE['Is_Lead'])\nprint('Spearmans correlation coefficient Region_Code: %.3f' % coef)\n\ncoef, p = spearmanr(df_SMOTE['Occupation'], df_SMOTE['Is_Lead'])\nprint('Spearmans correlation coefficient Occupation: %.3f' % coef)\n\ncoef, p = spearmanr(df_SMOTE['Channel_Code'], df_SMOTE['Is_Lead'])\nprint('Spearmans correlation coefficient Channel_Code: %.3f' % coef)\n\ncoef, p = spearmanr(df_SMOTE['Vintage'], df_SMOTE['Is_Lead'])\nprint('Spearmans correlation coefficient Vintage: %.3f' % coef)\n\ncoef, p = spearmanr(df_SMOTE['Credit_Product'], df_SMOTE['Is_Lead'])\nprint('Spearmans correlation coefficient Credit_Product: %.3f' % coef)\n\ncoef, p = spearmanr(df_SMOTE['Avg_Account_Balance'], df_SMOTE['Is_Lead'])\nprint('Spearmans correlation coefficient Avg_Account_Balance: %.3f' % coef)\n\ncoef, p = spearmanr(df_SMOTE['Is_Active'], df_SMOTE['Is_Lead'])\nprint('Spearmans correlation coefficient Is_Active: %.3f' % coef)","a1c55e33":"import statsmodels.api as sm\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, cross_validate, cross_val_score, KFold, GridSearchCV\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC","7354d956":"df_under_scaled = df_under[['Age','Channel_Code','Vintage','Credit_Product']]","af55b102":"#Scaling data\nfrom sklearn.preprocessing import StandardScaler\n# define standard scaler\nscaler = StandardScaler()\n# transform data\ndf_under_scaled = scaler.fit_transform(df_under_scaled)","3e2746fa":"df_under_scaled = pd.DataFrame(df_under_scaled, columns=['Age','Channel_Code','Vintage','Credit_Product'])","6c744200":"df_under_scaled = pd.concat([df_under_scaled, df_under[['Is_Lead']]], axis=1)","9b0f7700":"df_under_scaled","675aee0f":"x = df_under_scaled.drop('Is_Lead', axis=1)\ny = df_under_scaled['Is_Lead']\n\nx_train_under, x_test_under, y_train_under, y_test_under = train_test_split(x, y, test_size=0.2, random_state=42)","23449c42":"print(\"X Train : \", len(x_train_under))\nprint(\"y Train : \", len(y_train_under))\nprint(\"X Test : \", len(x_test_under))\nprint(\"t Test : \", len(y_test_under))","b761404b":"Input = sm.add_constant(x_train_under)\nmodel_under = sm.Logit(y_train_under, x_train_under, missing='drop')\nresult_under = model_under.fit()\nprint(result_under.summary2())","9d347cab":"df_SMOTE_scaled = df_SMOTE[['Age','Channel_Code','Vintage','Credit_Product']]","3f8ffb14":"#Scaling\n# define standard scaler\nscaler = StandardScaler()\n# transform data\ndf_SMOTE_scaled = scaler.fit_transform(df_SMOTE_scaled)","c013d941":"df_SMOTE_scaled = pd.DataFrame(df_SMOTE_scaled, columns=['Age','Channel_Code','Vintage','Credit_Product'])","ef516683":"df_SMOTE_scaled = pd.concat([df_SMOTE_scaled, df_SMOTE[['Is_Lead']]], axis=1)","a05e72b4":"df_SMOTE_scaled","f9c83299":"x = df_SMOTE_scaled.drop('Is_Lead', axis=1)\ny = df_SMOTE_scaled['Is_Lead']\n\nx_train_SMOTE, x_test_SMOTE, y_train_SMOTE, y_test_SMOTE = train_test_split(x, y, test_size=0.2, random_state=42)","c50999d4":"Input = sm.add_constant(x_train_SMOTE)\nmodel_SMOTE = sm.Logit(y_train_SMOTE, x_train_SMOTE, missing='drop')\nresult_SMOTE = model_SMOTE.fit()\nprint(result_SMOTE.summary2())","80d40217":"prediction_under = result_under.predict(x_test_under)","f2034fd5":"pred_results_under = pd.DataFrame(prediction_under, columns = [\"logreg_pred\"])\npred_results_under[\"prediksi\"] = pred_results_under['logreg_pred'].apply(lambda x: 1 if x > 0.5 else 0)\npred_results_under['actual'] = y_test_under\npred_results_under.head()","2802e72c":"print('Test accuracy =  {:.3f}'.format(accuracy_score(pred_results_under['actual'], pred_results_under[\"prediksi\"])))\nprint('Test precision =  {:.3f}'.format(precision_score(pred_results_under['actual'], pred_results_under[\"prediksi\"], average='binary')))\nprint('Test recall =  {:.3f}'.format(recall_score(pred_results_under['actual'], pred_results_under[\"prediksi\"], average='binary')))\nprint('Test f-score =  {:.3f}'.format(f1_score(pred_results_under['actual'], pred_results_under[\"prediksi\"], average='binary')))","b4333484":"Accuracy1 = (accuracy_score(pred_results_under['actual'], pred_results_under[\"prediksi\"]))\nPrecision1 = (precision_score(pred_results_under['actual'], pred_results_under[\"prediksi\"], average='binary'))\nRecall1 = (recall_score(pred_results_under['actual'], pred_results_under[\"prediksi\"], average='binary'))\nF_score1 =(f1_score(pred_results_under['actual'], pred_results_under[\"prediksi\"], average='binary'))","f15a1c13":"Accuracy_table = pd.DataFrame(columns=['Name','Accuracy','Precision','Recall','F_score'])","1ae84629":"Accuracy_table = Accuracy_table.append({'Name': 'Scaled_Undersampling', 'Accuracy':Accuracy1, 'Precision':Precision1,'Recall':Recall1,'F_score':F_score1}, ignore_index=True)","d5dc8a88":"Accuracy_table","9d850404":"#Confusion Matrix\nMatrix = pd.DataFrame(pred_results_under, columns=['prediksi','actual'])\nconfusion_matrix = pd.crosstab(Matrix['prediksi'], Matrix['actual'], rownames=['Actual'], colnames=['Predicted'])\nconfusion_matrix","8df0724d":"prediction_SMOTE = result_SMOTE.predict(x_test_SMOTE)","fa3a0490":"pred_results_SMOTE = pd.DataFrame(prediction_SMOTE, columns = [\"logreg_pred\"])\npred_results_SMOTE[\"prediksi\"] = pred_results_SMOTE['logreg_pred'].apply(lambda x: 1 if x > 0.5 else 0)\npred_results_SMOTE['actual'] = y_test_SMOTE\npred_results_SMOTE.head()","1c4c1600":"print('Test accuracy =  {:.3f}'.format(accuracy_score(pred_results_SMOTE['actual'], pred_results_SMOTE[\"prediksi\"])))\nprint('Test precision =  {:.3f}'.format(precision_score(pred_results_SMOTE['actual'], pred_results_SMOTE[\"prediksi\"], average='binary')))\nprint('Test recall =  {:.3f}'.format(recall_score(pred_results_SMOTE['actual'], pred_results_SMOTE[\"prediksi\"], average='binary')))\nprint('Test f-score =  {:.3f}'.format(f1_score(pred_results_SMOTE['actual'], pred_results_SMOTE[\"prediksi\"], average='binary')))","1522162b":"Accuracy2 = (accuracy_score(pred_results_SMOTE['actual'], pred_results_SMOTE[\"prediksi\"]))\nPrecision2 = (precision_score(pred_results_SMOTE['actual'], pred_results_SMOTE[\"prediksi\"], average='binary'))\nRecall2 = (recall_score(pred_results_SMOTE['actual'], pred_results_SMOTE[\"prediksi\"], average='binary'))\nF_score2 = (f1_score(pred_results_SMOTE['actual'], pred_results_SMOTE[\"prediksi\"], average='binary'))","60e4ed6f":"Accuracy_table = Accuracy_table.append({'Name': 'Scaled_Oversampling', 'Accuracy':Accuracy2, 'Precision':Precision2,'Recall':Recall2,'F_score':F_score2}, ignore_index=True)","c1069ab8":"Accuracy_table","4ebe1f8f":"#Confusion Matrix\nMatrix = pd.DataFrame(pred_results_SMOTE, columns=['prediksi','actual'])\nconfusion_matrix = pd.crosstab(Matrix['prediksi'], Matrix['actual'], rownames=['Actual'], colnames=['Predicted'])\nconfusion_matrix","f0c97489":"x = df_under_scaled.iloc[:,:-1]\ny = df_under_scaled.iloc[:,-1]","d30092ae":"# sensitivity analysis of k in k-fold cross-validation\nfrom numpy import mean\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import LeaveOneOut\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom matplotlib import pyplot\n \n# retrieve the model to be evaluate\ndef get_model():\n\tmodel = LogisticRegression()\n\treturn model\n \n# evaluate the model using a given test condition\ndef evaluate_model(cv):\n\t# get the dataset\n\t# get the model\n\tmodel = get_model()\n\t# evaluate the model\n\tscores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\n\t# return scores\n\treturn mean(scores), scores.min(), scores.max()\n \n# calculate the ideal test condition\nideal, _, _ = evaluate_model(LeaveOneOut())\nprint('Ideal: %.3f' % ideal)\n# define folds to test\nfolds = range(2,10)\n# record mean and min\/max of each set of results\nmeans, mins, maxs = list(),list(),list()\n# evaluate each k value\nfor k in folds:\n\t# define the test condition\n\tcv = KFold(n_splits=k, shuffle=True, random_state=1)\n\t# evaluate k value\n\tk_mean, k_min, k_max = evaluate_model(cv)\n\t# report performance\n\tprint('> folds=%d, accuracy=%.3f (%.3f,%.3f)' % (k, k_mean, k_min, k_max))\n\t# store mean accuracy\n\tmeans.append(k_mean)\n\t# store min and max relative to the mean\n\tmins.append(k_mean - k_min)\n\tmaxs.append(k_max - k_mean)\n# line plot of k mean values with min\/max error bars\npyplot.errorbar(folds, means, yerr=[mins, maxs], fmt='o')\n# plot the ideal case in a separate color\npyplot.plot(folds, [ideal for _ in range(len(folds))], color='r')\n# show the plot\npyplot.show()","b6dce4f8":"# Load data\ndf_test = pd.read_csv(\"..\/input\/credit-dataset\/credit_test.csv\")\ndf_test.head()","e2ffffef":"#Encoded\ndf_test = df_test.drop(['ID'], axis=1)\n#Gender\ndf_test.loc[df_test['Gender'] == 'Male', 'Gender'] = 1\ndf_test.loc[df_test['Gender'] == 'Female', 'Gender'] = 0\n#Region_Code\nconditions = [\n              (df_test['Region_Code'] == 'RG250'),\n              (df_test['Region_Code'] == 'RG251'),\n              (df_test['Region_Code'] == 'RG252'),\n              (df_test['Region_Code'] == 'RG253'),\n              (df_test['Region_Code'] == 'RG254'),\n              (df_test['Region_Code'] == 'RG255'),\n              (df_test['Region_Code'] == 'RG256'),\n              (df_test['Region_Code'] == 'RG257'),\n              (df_test['Region_Code'] == 'RG258'),\n              (df_test['Region_Code'] == 'RG259'),\n              (df_test['Region_Code'] == 'RG260'),\n              (df_test['Region_Code'] == 'RG261'),\n              (df_test['Region_Code'] == 'RG262'),\n              (df_test['Region_Code'] == 'RG263'),\n              (df_test['Region_Code'] == 'RG264'),\n              (df_test['Region_Code'] == 'RG265'),\n              (df_test['Region_Code'] == 'RG266'),\n              (df_test['Region_Code'] == 'RG267'),\n              (df_test['Region_Code'] == 'RG268'),\n              (df_test['Region_Code'] == 'RG269'),\n              (df_test['Region_Code'] == 'RG270'),\n              (df_test['Region_Code'] == 'RG271'),\n              (df_test['Region_Code'] == 'RG272'),\n              (df_test['Region_Code'] == 'RG273'),\n              (df_test['Region_Code'] == 'RG274'),\n              (df_test['Region_Code'] == 'RG275'),\n              (df_test['Region_Code'] == 'RG276'),\n              (df_test['Region_Code'] == 'RG277'),\n              (df_test['Region_Code'] == 'RG278'),\n              (df_test['Region_Code'] == 'RG279'),\n              (df_test['Region_Code'] == 'RG280'),\n              (df_test['Region_Code'] == 'RG281'),\n              (df_test['Region_Code'] == 'RG282'),\n              (df_test['Region_Code'] == 'RG283'),\n              (df_test['Region_Code'] == 'RG284')\n\n]\nchoises = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21'\n            ,'22','23','24','25','26','27','28','29','30','31','32','33','34','35']\n#Region_Code\ndf_test['Region_Code'] = np.select(conditions,choises, default='0')\nconditions = [\n              (df_test['Occupation'] == 'Other'),\n              (df_test['Occupation'] == 'Self_employed'),\n              (df_test['Occupation'] == 'Salaried'),\n              (df_test['Occupation'] == 'Entrepreneur')\n\n]\nchoises = ['1','2','3','4']\ndf_test['Occupation'] = np.select(conditions,choises, default='0')\n#Occupation\nconditions = [\n              (df_test['Channel_Code'] == 'X1'),\n              (df_test['Channel_Code'] == 'X2'),\n              (df_test['Channel_Code'] == 'X3'),\n              (df_test['Channel_Code'] == 'X4')\n\n]\nchoises = ['1','2','3','4']\ndf_test['Channel_Code'] = np.select(conditions,choises, default='0')\n#Credit_Product\nconditions = [\n              (df_test['Credit_Product'] == 'Yes'),\n              (df_test['Credit_Product'] == 'No'),\n             ]\nchoises = ['1','0']\ndf_test['Credit_Product'] = np.select(conditions,choises, default='0')\n#Is_Active\nconditions = [\n              (df_test['Is_Active'] == 'Yes'),\n              (df_test['Is_Active'] == 'No'),\n             ]\nchoises = ['1','0']\ndf_test['Is_Active'] = np.select(conditions,choises, default='0')","323bc282":"df_test.head()","8bd097ad":"#mengubah jenis kolom\nchange_columns = ['Gender','Age','Region_Code','Occupation','Channel_Code','Vintage','Credit_Product','Avg_Account_Balance','Is_Active']\nfor cc in change_columns:\n  df_test[cc] = df_test[cc].astype(float)","2a2c7583":"df_test = df_test[['Age','Channel_Code','Vintage','Credit_Product']]","932830df":"# transform data\ndf_test = scaler.fit_transform(df_test)","b923dced":"df_test = pd.DataFrame(df_test, columns=['Age','Channel_Code','Vintage','Credit_Product'])","636a8584":"prediction_test = result_under.predict(df_test)","08e5c850":"df_test['logreg_pred'] = pd.DataFrame(prediction_test, columns = [\"logreg_pred\"])\ndf_test[\"prediksi\"] = df_test['logreg_pred'].apply(lambda x: 1 if x > 0.5 else 0)\ndf_test","9c355818":"# Mencari perbandingan label\/class\ndf_test['prediksi'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)\nplt.show()","f7c90b45":"## DATA PRE-PROCESSING","ab851b4a":"###Model Scaled Oversampling","74b86721":"###Duplicate","fe44c4d0":"## EVALUATION","0edb5bb7":"Atribut yang diperhatikan apakah pelanggan akan tertarik dengan rekomendasi atau tidak dapat dilihat pada atribut Age, Channel_Code, Vintage dan Credit_Product.","4c0c8769":"####Attribute Selection Under Sampling","785f9f62":"## EDA","ffabfcc9":"###Missing value Processing","0d684cfa":"####Oversampling with SMOTE","e9a0be8c":"## READ DATASET","9f0ca566":"Dari hasil prediksi pada data pelanggan baru dengan jumlah 85 orang, bahwa terdapat 49,4% yang diprediksi akan tertarik dengan rekomendasi pengkreditan dan terdapat 50.6% yang diprediksi tidak tertarik dengan rekomendasi pengkreditan.","a121785f":"Dikarenakan perbandingan label pada data Is_Lead memiliki perbandingan 9:1 maka hal ini terjadi inbalance data maka harus di lakukan penyesuaian antara 2 label tersebut dengan undersampling\/oversampling","2f9bc76e":"###Model K-fold Oversampling","0d605faa":"## IMPORT PACKAGES","09b6b9ec":"####Attribute Selection Over Sampling","5a097c71":"# CAPSTONE PROJECT - CLASSIFICATION","63363905":"Yang digunakan 4 atribut yang memiliki korelasi paling tinggi terhadap variabel target, atribut yang digunakan adalah Age, Channel_Code, Vintage dan Credit_Product","552f6126":"###Encode Label","5714e35e":"Berdasarkan grafik diatas dapat ditarik kesimpulan bahwa gender tidak dapat menggambarkan bahwa orang tersebut tertarik untuk melakukan kredit.","087e4da8":"Prediksi","190eeade":"###Scaled UnderSampling","146ac7cd":"###Model Scaled Undersampling","bd5dd3a3":"Pada grafik pertama dapat dilihat pada grafik pertama bahwa pada umur dapat menggambarkan kecenderungan apakah orang tersebut tertarik untuk melakukan pengkreditan atau tidak. Begitu juga pada grafik kedua yang menggambarkan bahwa vintage dapat menggambarkan ketertarikan orang dalam melakukan pengkreditan","b7f10fc1":"###Correlation Analyst","51a6f538":"k-fold yang ideal adalah 0.663 dengan folds sebesar 2,7,8,9. tetapi metode ini tidak akan digunakan dikarenakan akurasinya tidak lebih tinggi dari model regresi logisik undersampling yang memiliki akurasi sebesar 70%","c0dbf4d4":"###Scaled Oversampling","2048c6eb":"Pada grafik diatas untuk menampilkan apakah pada atribute Age,Vintage dan Avg_Account_Balance memiliki ketertarikan satu sama lainnnya. dikarenakan pada grafik tersebut tidak menggambarkan pola sama sekali dapat ditarik kesimpulan bahwa antara atribut tersebut tidak memiliki keterkaitan satu dengan yang lainnya.","78ccf635":"## LOAD AND PREDICT NEW DATA","93e3f0c3":"## KESIMPULAN\/SARAN","3bd07a02":"Berdasarkan grafik diatas dapat ditarik kesimpulan bahwa Occupation\/Pekerjaan tidak dapat menggambarkan bahwa orang tersebut tertarik untuk melakukan kredit.","2fe4ca85":"## FEATURE ENGINEERING","8f76cffe":"\nIdentifikasi atribut apa saja yang dapat menggambarkan ketertarikan pelanggan terhadap rekomendasi pengkreditan dan buatkan model klasifikasi yang memiliki akurasi yang tinggi sehingga perusahaan tidak akan mengalami kerugian yang besar. \n","5036d143":"Berdasarkan grafik diatas dapat ditarik kesimpulan bahwa Region_Code tidak dapat menggambarkan bahwa orang tersebut tertarik untuk melakukan kredit.","8a949ada":"Yang digunakan 4 atribut yang memiliki korelasi paling tinggi terhadap variabel target, atribut yang digunakan adalah Age, Channel_Code, Vintage dan Credit_Product","d3945bcc":"###Imbalance Processing","c75569ed":"##Modeling","1f355982":"####Under Sampling","326534e6":"## PROBLEM STATEMENT"}}