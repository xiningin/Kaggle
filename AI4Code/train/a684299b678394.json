{"cell_type":{"3a6a6e36":"code","cf790b17":"code","138b0caa":"code","c9a20328":"code","3ab1a12f":"code","526cca7d":"code","faa301a1":"code","9d77d30b":"code","b49d71e8":"code","9c993017":"code","e2953102":"code","c946292e":"code","6d0b4012":"code","38afcd87":"code","5c547dc5":"code","3cab6c00":"code","77f1efa9":"code","68e1b5a7":"code","4353b6ff":"code","8a95b9cd":"code","933d6873":"code","c9e470d3":"code","19fedb5f":"code","f74c5d91":"code","ba42f2f5":"code","bb353f28":"code","79f2f250":"code","d98df87d":"code","f7c066dc":"code","750ba6ca":"code","0ba8fabf":"code","f93ecacc":"code","10092f65":"code","f92e2206":"code","075d790a":"code","0b4026f7":"code","1f48d8db":"code","d1c33b85":"code","d6e6f098":"code","eb622b15":"code","f61441bf":"code","6ad7bc91":"code","31baa47f":"code","a7cb2c5a":"code","aa0eba3e":"code","f83d2e52":"code","9beb1db0":"code","71969b09":"code","b2ce4381":"code","363c1aa9":"code","ac20cd15":"code","8d56b624":"code","08f16737":"code","d715f792":"code","8a5a8af1":"code","422b436a":"code","cad47cc8":"code","64474885":"code","3ec7f7d9":"markdown","c4cf3fe5":"markdown","9793e92a":"markdown","983639bd":"markdown","b33f21b2":"markdown","518f3d49":"markdown","8f4a647a":"markdown","ea44ba4e":"markdown","e76e7211":"markdown","e6e1d7ea":"markdown","a6cdd720":"markdown","4fe955aa":"markdown","f8adb92b":"markdown","b642c38e":"markdown","2432f4e8":"markdown","f79e5803":"markdown","69ff183b":"markdown","8302cb6b":"markdown","01928e01":"markdown","d19db3e1":"markdown","eb2dd17a":"markdown","b52aa62c":"markdown","1ddd860a":"markdown","5f450f6b":"markdown","ebbd1545":"markdown","426b6e88":"markdown","4fb61499":"markdown"},"source":{"3a6a6e36":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.utils import resample,shuffle\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn import mixture","cf790b17":"data = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ndata.head()","138b0caa":"data.shape","c9a20328":"data.info()","3ab1a12f":"data.drop('id', axis=1, inplace=True)\n\ngender = pd.get_dummies(data['Gender'], drop_first=True)\ndata = pd.concat([data, gender], axis=1)\ndata.drop('Gender', axis=1, inplace=True)\n\ndamage = pd.get_dummies(data['Vehicle_Damage'], drop_first=True)\ndata = pd.concat([data, damage], axis=1)\ndata.drop('Vehicle_Damage', axis=1, inplace=True)","526cca7d":"data.rename(columns={'Yes': 'Vehicle_Damage', 'Male': 'Gender'}, inplace=True)","faa301a1":"data['Vehicle_Age'].value_counts()","9d77d30b":"age_dict = {'< 1 Year': 0, '1-2 Year': 1, '> 2 Years': 2}\ndata['Vehicle_Age'] = data['Vehicle_Age'].map(age_dict)","b49d71e8":"corr = data.corr()\nplot = sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns)","9c993017":"corr.style.apply(lambda x: [\"background:yellow\" if abs(v) > 0.2 and abs(v) < 0.5 and v!=1 else \"background:red\" if abs(v) > 0.5 and v!=1 else \"\" for v in x], axis = 1)","e2953102":"corr['Response'].sort_values(ascending=False).drop('Response')","c946292e":"plot = sns.countplot(x='Response', data=data, palette='rocket')","6d0b4012":"data['Response'].value_counts()","38afcd87":"46710\/(334399+46710)","5c547dc5":"figs, axes = plt.subplots(figsize=(18,5))\nplot = sns.histplot(x='Age', data=data, hue='Response', palette='rocket')","3cab6c00":"plot = sns.countplot(x='Vehicle_Age', hue='Response', data=data, palette='rocket')","77f1efa9":"plot = sns.countplot(x='Previously_Insured', hue='Response', data=data, palette='rocket')","68e1b5a7":"figs, axes = plt.subplots(figsize=(18,6))\nplot = sns.countplot(x=data['Policy_Sales_Channel'], hue='Response', data=data, palette='rocket', order=data['Policy_Sales_Channel'].value_counts().iloc[:10].index)","4353b6ff":"y = data['Response']\nX = data.drop(['Response'], axis=1)","8a95b9cd":"rf = RandomForestClassifier()\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=22)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\naccuracy_score(y_test,y_pred)","933d6873":"Conf_Mat = confusion_matrix(y_test, y_pred)\nConf_Mat","c9e470d3":"Class_rep = classification_report(y_test, y_pred)\nprint(Class_rep)","19fedb5f":"FPR, TPR, Threshold = roc_curve(y_test, y_pred)\nplt.plot(FPR, TPR)\nplt.xlabel('FPR')\nplt.ylabel('TPR')","f74c5d91":"roc_auc_score(y_test, y_pred)","ba42f2f5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=22)\ntrain_data = pd.concat([X_train, y_train], axis=1)\nscore_list = []","bb353f28":"train_data_0 = train_data[train_data['Response']==0]\ntrain_data_1 = train_data[train_data['Response']==1]\ntrain_data_0_downsampled = resample(train_data_0, replace=True, n_samples=46710, random_state=22)\ntrain_data_balanced = pd.concat([train_data_0_downsampled, train_data_1])\ntrain_data_balanced = shuffle(train_data_balanced)\ntrain_data_balanced.Response.value_counts()\nX_train = train_data_balanced.drop(['Response'], axis=1)\ny_train = train_data_balanced['Response']","79f2f250":"rf = RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)","d98df87d":"Conf_Mat = confusion_matrix(y_test, y_pred)\nConf_Mat","f7c066dc":"Class_rep = classification_report(y_test, y_pred)\nprint(Class_rep)","750ba6ca":"FPR, TPR, Threshold = roc_curve(y_test, y_pred)\nplt.plot(FPR, TPR)\nplt.xlabel('FPR')\nplt.ylabel('TPR')","0ba8fabf":"score_list.append(roc_auc_score(y_test, y_pred))","f93ecacc":"xgb = XGBClassifier()","10092f65":"xgb.fit(X_train, y_train)\ny_pred = xgb.predict(X_test)","f92e2206":"Conf_Mat = confusion_matrix(y_test, y_pred)\nConf_Mat","075d790a":"Class_rep = classification_report(y_test, y_pred)\nprint(Class_rep)","0b4026f7":"FPR, TPR, Threshold = roc_curve(y_test, y_pred)\nplt.plot(FPR, TPR)\nplt.xlabel('FPR')\nplt.ylabel('TPR')","1f48d8db":"score_list.append(roc_auc_score(y_test, y_pred))","d1c33b85":"train_data_0 = train_data[train_data['Response']==0]\ntrain_data_1 = train_data[train_data['Response']==1]\ntrain_data_1_upsampled = resample(train_data_1, replace=True, n_samples=334399, random_state=22)\ntrain_data_balanced = pd.concat([train_data_1_upsampled, train_data_0])\ntrain_data_balanced = shuffle(train_data_balanced)\ntrain_data_balanced.Response.value_counts()\nX_train = train_data_balanced.drop(['Response'], axis=1)\ny_train = train_data_balanced['Response']","d6e6f098":"rf = RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)","eb622b15":"Conf_Mat = confusion_matrix(y_test, y_pred)\nConf_Mat","f61441bf":"Class_rep = classification_report(y_test, y_pred)\nprint(Class_rep)","6ad7bc91":"FPR, TPR, Threshold = roc_curve(y_test, y_pred)\nplt.plot(FPR, TPR)\nplt.xlabel('FPR')\nplt.ylabel('TPR')","31baa47f":"score_list.append(roc_auc_score(y_test, y_pred))","a7cb2c5a":"xgb.fit(X_train, y_train)\ny_pred = xgb.predict(X_test)","aa0eba3e":"Conf_Mat = confusion_matrix(y_test, y_pred)\nConf_Mat","f83d2e52":"Class_rep = classification_report(y_test, y_pred)\nprint(Class_rep)","9beb1db0":"FPR, TPR, Threshold = roc_curve(y_test, y_pred)\nplt.plot(FPR, TPR)\nplt.xlabel('FPR')\nplt.ylabel('TPR')","71969b09":"score_list.append(roc_auc_score(y_test, y_pred))","b2ce4381":"(pd.DataFrame(score_list).T).rename(columns={0:'RFC downsampled', 1:'XGB downsampled', 2:'RFC upsampled', 3:'XGB upsampled'}).style.hide_index()","363c1aa9":"data_cluster = data[['Age', 'Region_Code', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage']]","ac20cd15":"GM_components = np.arange(1,8)\nGM_models = [mixture.GaussianMixture(n, covariance_type='full', random_state=22).fit(data_cluster.values) for n in GM_components]","8d56b624":"plt.figure(num=None, figsize=(15, 5))\nplt.plot(GM_components, [m.aic(data_cluster) for m in GM_models])\nplt.xlabel('n components');","08f16737":"GM = GaussianMixture(n_components=5)\nGM.fit(data_cluster)\nlabels = GM.predict(data_cluster)","d715f792":"frame = pd.DataFrame()\nframe['cluster'] = labels","8a5a8af1":"train_data = pd.concat([data, frame], axis=1)\ny = train_data['Response']\nX = train_data.drop(['Response'], axis=1)","422b436a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=22)\n\ntrain_data_0 = train_data[train_data['Response']==0]\ntrain_data_1 = train_data[train_data['Response']==1]\ntrain_data_1_upsampled = resample(train_data_1, replace=True, n_samples=334399, random_state=22)\ntrain_data_balanced = pd.concat([train_data_1_upsampled, train_data_0])\ntrain_data_balanced = shuffle(train_data_balanced)\ntrain_data_balanced.Response.value_counts()\nX_train = train_data_balanced.drop(['Response'], axis=1)\ny_train = train_data_balanced['Response']","cad47cc8":"xgb.fit(X_train, y_train)\ny_pred = xgb.predict(X_test)\naccuracy_score(y_test,y_pred)\n\nConf_Mat = confusion_matrix(y_test, y_pred)\nprint(Conf_Mat)\n\nClass_rep = classification_report(y_test, y_pred)\nprint(Class_rep)\n\nFPR, TPR, Threshold = roc_curve(y_test, y_pred)\nplt.plot(FPR, TPR)\nplt.xlabel('FPR')\nplt.ylabel('TPR')","64474885":"print(roc_auc_score(y_test, y_pred))","3ec7f7d9":"### Balancing Data - Upsampling","c4cf3fe5":"### Vehicle Age","9793e92a":"### Policy Sales Channel","983639bd":"### Random Forest without balancing the data","b33f21b2":"No missing values. Gender, Vehicle_Age and Vehicle_Damage need to be converted to numerical data. Id colomn is not usefull in EDA nor in prediction, thus we will drop that column.","518f3d49":"## Exploratory Data Analysis","8f4a647a":"We have very inbalanced data","ea44ba4e":"### Age","e76e7211":"## RoC scores","e6e1d7ea":"### Response","a6cdd720":"### XGBoost","4fe955aa":"### Importing Libraries","f8adb92b":"### Randnom Forest","b642c38e":"We will use Gaussian Mixture Model to cluster data. The model the upsampled data with XGBoost and hopefully get a higher ROC score.","2432f4e8":"Even though the model has pretty high accuracy of 0.87, it does not have a satisfying ROC score. The data has to be balanced. We will try both downsampling and upsampling. ","f79e5803":"Gaussian Mixture Model improved the ROC score from 0.7965 to 0.8138. As said before this can be futher improved with hyperparameter tuning.","69ff183b":"### Random Forest ","8302cb6b":"### Data Correlation","01928e01":"### XGBoost","d19db3e1":"### Previously Insured","eb2dd17a":"## Gaussian Mixture clusters","b52aa62c":"## Visual Data Analysis","1ddd860a":"## Modeling","5f450f6b":"XGBoost outperfomed RandomForestClassifier in both cases. Hyperparameter tuning should be done to imporve RoC score. I will not do that in this notebook as it requires a lot of time and comuting power.","ebbd1545":"### Importing Data","426b6e88":"### Balancing Data - Downsampling","4fb61499":"# Health Insurance EDA and prediction"}}