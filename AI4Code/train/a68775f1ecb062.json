{"cell_type":{"344fc0b1":"code","c1207fa0":"code","08605a00":"code","6e61d420":"code","6fe8e438":"code","1104a821":"code","020ced14":"code","69f4b8d5":"code","1a225e8b":"code","d431d176":"code","64c0b55c":"code","467753b3":"code","21e31e16":"code","ff94052e":"markdown","68a0da27":"markdown","52cc7961":"markdown","48d632b1":"markdown","550e512e":"markdown","2deed8f8":"markdown"},"source":{"344fc0b1":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn import preprocessing\nfrom sklearn import tree\nfrom sklearn import metrics\nimport graphviz","c1207fa0":"df=pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","08605a00":"df.T","6e61d420":"columns=df.columns\ncolumns_new=[]\nfor i in columns:\n    columns_new.append(any(df[i].isnull()|df[i].isnull()))\ndf=df.drop(columns[columns_new],axis=1)","6fe8e438":"df.shape","1104a821":"ax = sns.countplot(df.DEATH_EVENT,label=\"Count\")       # M = 212, B = 357\ndf.DEATH_EVENT.value_counts()","020ced14":"plt.hist(df.age[df.DEATH_EVENT==1],label='muere',bins=20,density = True,  \n                            color ='green', \n                            alpha = 0.7)\nplt.hist(df.age[df.DEATH_EVENT==0],label='vive',bins=20,density = True,  \n                            color ='blue', \n                            alpha = 0.7)\nplt.legend()\nplt.show()","69f4b8d5":"x = df.drop(['DEATH_EVENT','time'], axis=1)\nX = x.values\ny = df['DEATH_EVENT'].values\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","1a225e8b":"from sklearn.tree import DecisionTreeClassifier\n\nfor i in range(4, 6):\n    death_tree = DecisionTreeClassifier(criterion='entropy', max_depth=i)\n    death_tree.fit(x_train, y_train)\n    pred_death = death_tree.predict(x_test)\n    print('with max_depth of {} , death_tree accuracy is {}'.format (i, metrics.accuracy_score(y_test, pred_death)))","d431d176":"def conf_matrix(matrix,pred):\n    class_names= [0,1]# name  of classes\n    fig, ax = plt.subplots()\n    tick_marks = np.arange(len(class_names))\n    plt.xticks(tick_marks, class_names)\n    plt.yticks(tick_marks, class_names)\n    # create heatmap\n    sns.heatmap(pd.DataFrame(matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\n    ax.xaxis.set_label_position(\"top\")\n    plt.tight_layout()\n    plt.title('Confusion matrix', y=1.1)\n    plt.ylabel('Actual label')\n    plt.xlabel('Predicted label')\n    plt.show()","64c0b55c":"cnf_matrix = metrics.confusion_matrix(y_test, pred_death,normalize='true')\nconf_matrix(cnf_matrix,y_test)","467753b3":"print(classification_report(y_test, pred_death))","21e31e16":"plt.figure(figsize=(20, 20))\nfilename ='death_tree.png'\n\nfeatureNames = df.columns[:-2]\ntargetNames = ['death', 'alive']\n\ndot_data = tree.export_graphviz(death_tree, feature_names=featureNames, class_names=targetNames,filled=True)\n\n# Draw graph\ngraph = graphviz.Source(dot_data, format=\"png\") \ngraph","ff94052e":"# Model Evaluation","68a0da27":"# Exploring Data","52cc7961":"# Model training","48d632b1":"# Reading Data","550e512e":"# Libraries","2deed8f8":"# Data spliting"}}