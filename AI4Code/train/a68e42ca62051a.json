{"cell_type":{"f1433cfe":"code","16f7d723":"code","d00bbc8f":"code","14133893":"code","9fe0cf92":"code","fffc754d":"code","e63a66f7":"code","b17edc76":"code","54dd6527":"code","f717be67":"code","e4b4fdd5":"code","b065cf45":"code","c360bfda":"markdown","3fa76279":"markdown","47be07c0":"markdown","7d60d929":"markdown","ef55f493":"markdown","9007aae7":"markdown","6c60e350":"markdown","4889effd":"markdown","3465018f":"markdown","b3531898":"markdown","d039a827":"markdown","af57707e":"markdown","3f848524":"markdown"},"source":{"f1433cfe":"import math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport random\nimport seaborn as sns; sns.set()\nfrom sklearn import svm","16f7d723":"file_name = '..\/input\/SAheart.data'\ndata = pd.read_csv(file_name, sep=',', index_col=0)\nprint(len(data))\ndata.head()","d00bbc8f":"data['famhist'] = data.famhist.apply(lambda x: x == 'Present')","14133893":"data.chd.value_counts()","9fe0cf92":"for feature in data.columns:\n    if feature == 'chd':\n        continue\n    sns.jointplot(x=feature, y='chd', data=data, kind='kde')\n    plt.title('Correlation between %s and Heart Disease' % feature)\n    plt.show()","fffc754d":"chd = data[data.chd == True]\nnchd = data[data.chd == False]\ny = plt.scatter(chd.age.values, chd.adiposity.values, c='r')\nn = plt.scatter(nchd.age.values, nchd.adiposity.values, c='b')\nplt.xlabel('age')\nplt.ylabel('adiposity')\nplt.legend((y, n), ['chd', 'healthy'])\nplt.show()","e63a66f7":"n_test = int(math.ceil(len(data) * 0.3))\nrandom.seed(42)\ntest_ixs = random.sample(list(range(len(data))), n_test)\ntrain_ixs = [ix for ix in range(len(data)) if ix not in test_ixs]\ntrain = data.iloc[train_ixs, :]\ntest = data.iloc[test_ixs, :]\nprint(len(train))\nprint(len(test))","b17edc76":"#features = ['sbp', 'tobacco', 'ldl', 'adiposity', 'famhist', 'typea', 'obesity', 'alcohol', 'age']\nfeatures = ['adiposity', 'age']\nresponse = 'chd'\nx_train = train[features]\ny_train = train[response]\nx_test = test[features]\ny_test = test[response]","54dd6527":"1. - y_test.mean()","f717be67":"model = svm.SVC(gamma='scale')\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\nnp.mean(y_pred == y_test)","e4b4fdd5":"best_acc = 0.\nbest_c = None\nfor c in np.linspace(0.1, 1.0):\n    model = svm.SVC(C=c, gamma='scale')\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    acc = np.mean(y_pred == y_test)\n    if acc > best_acc:\n        best_acc = acc\n        best_c = c\nprint(best_acc)\nprint(best_c)","b065cf45":"# practice here, using the code above as a template","c360bfda":"Need to convert that categorical variable into binary indicators.","3fa76279":"That's OK. But, the default hyperparameter settings are almost never the best. The main hyperparameter we use to control bias-variance is `C`, so let's just manually play with some values to get a feel.","47be07c0":"Train a model using default hyperparameters. Refer to [the documentation for the SVM classifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.SVC.html) for details.","7d60d929":"Looks like age should be a nice predictor. Using all these features is probably going to be a bit messy. Let's try and simplify the problem and just pick two for now.","ef55f493":"After the test split, recalculate the random baseline.","9007aae7":"So it's an uneven dataset. On this basis we define our random baseline accuracy as majority class, and is therefore $302\/462 = 0.6536$.","6c60e350":"Create a train-test split.","4889effd":"First separate the features from the response.","3465018f":"I like a [joint plot](https:\/\/seaborn.pydata.org\/generated\/seaborn.jointplot.html) for comparing the distributions of features with a binary response.[](http:\/\/)","b3531898":"Load the data","d039a827":"First thing to do with a machine learning problem is visualize the data and get a feel for the distributions. Start from the preponderance of coronary heart disease (the response) in the data.","af57707e":"Now we can try and fit our model.","3f848524":"## Beat My Baseline\n\nConsider:\n- more hyperparameters (listed [here](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.SVC.html))\n- more features, different combinations thereof"}}