{"cell_type":{"4972fdaa":"code","5bffb23d":"code","7674e4ab":"code","9ac6dacf":"code","e1cd3b05":"code","88f6af79":"code","bc3b7358":"code","856c5f66":"code","dac389d9":"code","f5571d00":"code","8d46ef72":"code","aab7ea55":"code","80fbd7ec":"code","0b0dc386":"code","c1956b21":"code","b62899f1":"code","63cd19f6":"code","343b5e0c":"code","598db189":"code","dd609d56":"code","d5a37c14":"code","8e17ef39":"code","b746f1f0":"code","ea3b3fd9":"code","967888a6":"code","cdf0244b":"code","a0f81028":"code","e6474b67":"code","60f46300":"code","710067aa":"code","16a72fc1":"code","4ef169a7":"code","2b3897b1":"code","fffe5c20":"code","45885894":"code","a222028c":"code","02385697":"code","7c7ee0a5":"code","626dc34e":"code","d386346b":"code","1cf9fa99":"code","2b6011e2":"code","6a915518":"code","077490d2":"markdown","48323e2e":"markdown","827d33c2":"markdown"},"source":{"4972fdaa":"import pandas as pd\ndf = pd.read_csv('..\/input\/us-consumer-finance-complaints\/consumer_complaints.csv')","5bffb23d":"df.head()","7674e4ab":"df['consumer_complaint_narrative']","9ac6dacf":"df.shape","e1cd3b05":"df_new = df.dropna(subset=['consumer_complaint_narrative'])","88f6af79":"df_new['consumer_complaint_narrative'].isnull().sum()","bc3b7358":"df_new.shape","856c5f66":"df_new.head()","dac389d9":"df_new.info()","f5571d00":"df_new['product'].unique()","8d46ef72":"df_new = df_new[['product', 'consumer_complaint_narrative']]\ndf_new.isnull().sum()","aab7ea55":"df_new.shape","80fbd7ec":"df_new = df_new.dropna()\ndf_new.head()","0b0dc386":"df_new.shape","c1956b21":"df_new['product'].value_counts()","b62899f1":"df_new = df_new[df_new['product'] != 'Consumer Loan']\ndf_new = df_new[df_new['product'] != 'Student loan']\ndf_new = df_new[df_new['product'] != 'Other financial service']\ndf_new = df_new[df_new['product'] != 'Money transfer, virtual currency, or money service']\ndf_new = df_new[df_new['product'] != 'Payday loan, title loan, or personal loan']\ndf_new = df_new[df_new['product'] != 'Vehicle loan or lease']\ndf_new = df_new[df_new['product'] != 'Prepaid card']\ndf_new = df_new[df_new['product'] != 'Payday loan']\ndf_new = df_new[df_new['product'] != 'Checking or savings account']\ndf_new = df_new[df_new['product'] != 'Credit card or prepaid card']\ndf_new = df_new[df_new['product'] != 'Credit reporting, credit repair services, or other personal consumer reports']\ndf_new = df_new[df_new['product'] != 'Money transfers']\ndf_new = df_new[df_new['product'] != 'Virtual currency']","63cd19f6":"df_new['product'].value_counts()","343b5e0c":"prod_categ = list(df_new['product'].unique())\nprint(len(prod_categ))\nprod_category = []\nfor prod in df_new['product']:\n    prod_category.append(prod_categ.index(prod))","598db189":"df_new['prod_category'] = prod_category\ndf_new.head()","dd609d56":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf = TfidfVectorizer(sublinear_tf=True, norm='l2', stop_words='english', ngram_range=(1,2))","d5a37c14":"from sklearn.model_selection import train_test_split\nX = tfidf.fit_transform(df_new['consumer_complaint_narrative'])\ny = df_new.prod_category\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","8e17ef39":"from sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\nmodel = LinearSVC()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint('Accuracy: ', accuracy_score(y_test, y_pred)*100)","b746f1f0":"from sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nX_train, X_test, y_train, y_test = train_test_split(df_new['consumer_complaint_narrative'], df_new['product'], random_state = 0)\ncount_vect = CountVectorizer(stop_words='english', ngram_range=(1,2))\nX_train_counts = count_vect.fit_transform(X_train)\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)","ea3b3fd9":"clf = MultinomialNB().fit(X_train_tfidf, y_train)","967888a6":"print(clf.predict(count_vect.transform([\"This company refuses to provide me verification and validation of debt per my right under the FDCPA. I do not believe this debt is mine.\"])))","cdf0244b":"print(clf.predict(count_vect.transform([\"credited wrong money in my saving account\"])))","a0f81028":"y_pred = clf.predict(count_vect.transform(X_test))","e6474b67":"accuracy_score(y_test,y_pred)","60f46300":"model = LinearSVC()\nmodel.fit(X_train_tfidf, y_train)\ny_pred = model.predict(count_vect.transform(X_test))\nprint('Accuracy: ', accuracy_score(y_test, y_pred)*100)","710067aa":"print(model.predict(count_vect.transform([\"credited wrong money in my saving account\"])))","16a72fc1":"print(model.predict(count_vect.transform([\"I have problem with my loan\"])))","4ef169a7":"print(model.predict(count_vect.transform(['I\u2019m facing an issue in my savings account as I\u2019m unable to look at my last transaction in dashboard, I\u2019ve tried to download the statement as well but still facing the same issue.'])))","2b3897b1":"print(model.predict(count_vect.transform(['Credit card upgradation request For privilege banking users under Independence day offer.'])))","fffe5c20":"import pickle\nfilename = 'finalized_model.sav'\npickle.dump(model, open(filename, 'wb'))","45885894":"from IPython.display import FileLink\nFileLink(r'.\/finalized_model.sav')","a222028c":"loaded_model = pickle.load(open('.\/finalized_model.sav', 'rb'))","02385697":"print(loaded_model.predict(count_vec.transform(['Credit card upgradation request For privilege banking users under Independence day offer.'])))","7c7ee0a5":"count_vec = CountVectorizer(stop_words='english', ngram_range=(1,2))","626dc34e":"pickle.dump(count_vect,open('count_vect.sv','wb'))","d386346b":"count_vc = pickle.load(open('.\/count_vect.sv', 'rb'))","1cf9fa99":"print(loaded_model.predict(count_vc.transform(['Credit card upgradation request For privilege banking users under Independence day offer.'])))","2b6011e2":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train_tfidf, y_train)\ny_pred = clf.predict(count_vect.transform(X_test))\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))","6a915518":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train_tfidf, y_train)\ny_pred = clf.predict(count_vect.transform(X_test))\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))","077490d2":"## NAIVE BAYES","48323e2e":"## DECISION TREE","827d33c2":"## RANDOM FOREST"}}