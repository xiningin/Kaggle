{"cell_type":{"71b48475":"code","1ce7bef3":"code","c28b1b6e":"code","6ed4add2":"code","3e7d85d4":"code","14a90024":"code","9ecdab9b":"code","8d748ee5":"code","fda2c2c6":"code","7b8f0d0d":"code","a499dd33":"code","35798241":"code","f0aa2342":"code","5a7153d6":"code","50a6a91f":"markdown","9ef11911":"markdown","40d25fad":"markdown","b199e899":"markdown","4fbd3986":"markdown","e4d01f4c":"markdown","4792b28a":"markdown","5b058903":"markdown","2a3983a0":"markdown"},"source":{"71b48475":"#Library imports\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly import tools\ninit_notebook_mode(connected=True)\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport json  ,IPython                        \nfrom IPython.core.display import display, HTML, Javascript\n#print(os.listdir(\"..\/input\"))\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","1ce7bef3":"#Read data\nrestaurants = pd.read_csv('..\/input\/zomato.csv')\n\nrestaurants.transpose()","c28b1b6e":"print('There are '+ str(len(restaurants['name'].unique()))+ ' restaurants, listed in ' +str(len(restaurants['location'].unique())) + ' different locations.')","6ed4add2":"#Add ratings column\nrestaurants['rate'].fillna('-1\/5', inplace= True)\nrestaurants['ratings'] = restaurants['rate'].apply(lambda x : -2 if (x=='NEW' or x=='-') else float(x.split('\/')[0]))\n#restaurants['ratings'].unique()\n\ntemp = restaurants.fillna('Missing')\ntemp = temp.applymap(lambda x: x if x == 'Missing' else 'Available')\nfigsize_width = 12\nfigsize_height = len(temp.columns)*0.5\nplt_data = pd.DataFrame()\nfor col in temp.columns:\n    temp_col = temp.groupby(col).size()\/len(temp.index)\n    temp_col = pd.DataFrame({col:temp_col})\n    plt_data = pd.concat([plt_data, temp_col], axis=1)\n    \nax = plt_data.T.plot(kind='barh', stacked=True, figsize=(figsize_width, figsize_height))\n\n# Annotations\nlabels = []\nfor i in plt_data.index:\n    for j in plt_data.columns:\n        label = '{:.2%}'.format(plt_data.loc[i][j])\n        labels.append(label)\npatches = ax.patches\nfor label, rect in zip(labels, patches):\n    width = rect.get_width()\n    if width > 0:\n        x = rect.get_x()\n        y = rect.get_y()\n        height = rect.get_height()\n        ax.text(x + width\/2., y + height\/2., label, ha='center', va='center')\n\nplt.xlabel('Frequency')\nplt.title('Missing values')\nplt.xticks(np.arange(0, 1.05, 0.1))\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()","3e7d85d4":"def getTopNRestsWithVotesCount(restaurants, location, n=10):\n    temp_rest = restaurants[restaurants['location']==location][['name','votes','ratings',\n                                                                'approx_cost(for two people)']].groupby(['name',\n                                                                                                         'approx_cost(for two people)']).agg({'votes': np.sum,'ratings': np.mean}).reset_index()\n    #temp_rest = temp_rest.groupby(['name','votes']).size().reset_index(name='Freq').sort_values('votes',ascending = False)\n    temp_rest = temp_rest.sort_values('ratings',ascending = False).head(n)\n    return temp_rest.round({'ratings': 2})\n\ndef getLocationWiseActiveRestaurants(restaurants, locationCount=10, restaurantsCount=10):\n    temp_votes = restaurants.groupby(['location'])['votes'].sum().reset_index().sort_values('votes', ascending=False).head(locationCount)\n    result = pd.DataFrame()\n    for index,row in temp_votes.iterrows():\n        df = getTopNRestsWithVotesCount(restaurants, row['location'], restaurantsCount)\n        df['location'] = row['location']\n        df['location_votes'] = row['votes']\n        result = result.append(df)\n    return result\n\ndef getChildrenNodes(df, size='', title='1', level=0):\n    resultList = []\n    result = {}\n    result['name'] = str(title)\n    result['size'] = size\n    result['level'] = level\n    children = df[df['name']==title][['children','size']].values\n    if len(children)>0:\n        for child,sz in children:\n            resultList.append(getChildrenNodes(df, sz, child,level+1))\n        result['children'] = resultList\n    else:\n        return result\n    return result\n\ndef createDataForBubblePlot(df):\n    temp_rests = df.groupby(['location','location_votes']).size().reset_index(name='Freq')\n    result = df\n    temp_df = pd.DataFrame(columns = ['name','votes','ratings','location','location_votes'])\n    for index,row in temp_rests.iterrows():\n        temp_df.loc[0]=[row['location'],row['location_votes'],'0','1','0']\n        result = result.append(temp_df)\n    result['children'],result['name'],result['size'] = result['name'],result['location'],result['votes']\n    #getChildrenNodes(result)\n    with open('output.json', 'w') as outfile:  \n        json.dump(getChildrenNodes(result), outfile)\n    #return result","14a90024":"htmllocationbubble = \"\"\"<!DOCTYPE html><meta charset=\"utf-8\"><style>.node {cursor: pointer;}.node:hover {stroke: #000;stroke-width: 1.5px;}.node--leaf {fill: white;}\n.label {font: 11px \"Helvetica Neue\", Helvetica, Arial, sans-serif;text-anchor: middle;text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff;}\n.label,.node--root,.node--leaf {pointer-events: none;}<\/style><svg id=\"two\" width=\"760\" height=\"760\"><\/svg>\n\"\"\"\njs_locationbubble=\"\"\"\nrequire.config({\n        paths: {\n            d3: \"https:\/\/d3js.org\/d3.v4.min\"\n         }\n     });\nrequire([\"d3\"], function(d3) {\nvar svg = d3.select(\"#two\"),\n    margin = 20,\n    diameter = +svg.attr(\"width\"),\n    g = svg.append(\"g\").attr(\"transform\", \"translate(\" + diameter \/ 2 + \",\" + diameter \/ 2 + \")\"),\n    color = d3.scaleSequential(d3.interpolateViridis).domain([-2, 2]),\n    pack = d3.pack().size([diameter - margin, diameter - margin]).padding(2);\nd3.json(\"output.json\", function(t, n) {\nif (t) throw t;\nvar r, e = n = d3.hierarchy(n).sum(function(t) {\n        return t.size\n    }).sort(function(t, n) {\n        return n.value - t.value\n    }),\n    a = pack(n).descendants(),\n    i = g.selectAll(\"circle\").data(a).enter().append(\"circle\").attr(\"class\", function(t) {\n        return t.parent ? t.children ? \"node\" : \"node node--leaf\" : \"node node--root\"\n    }).style(\"fill\", function(t) {\n        return t.children ? color(t.depth) : null\n    }).on(\"click\", function(t) {\n        e !== t && (l(t), d3.event.stopPropagation())\n    }),\n    o = (g.selectAll(\"text\").data(a).enter().append(\"text\").attr(\"class\", \"label\").style(\"fill-opacity\", function(t) {\n        return t.parent === n ? 1 : 0\n    }).style(\"display\", function(t) {\n        return t.parent === n ? \"inline\" : \"none\"\n    }).text(function(t) {\n        return t.data.name + \": \" + t.data.size\n    }), g.selectAll(\"circle,text\"));\n\nfunction l(t) {\n    e = t, d3.transition().duration(d3.event.altKey ? 7500 : 750).tween(\"zoom\", function(t) {\n        var n = d3.interpolateZoom(r, [e.x, e.y, 2 * e.r + margin]);\n        return function(t) {\n            c(n(t))\n        }\n    }).selectAll(\"text\").filter(function(t) {\n        return t.parent === e || \"inline\" === this.style.display\n    }).style(\"fill-opacity\", function(t) {\n        return t.parent === e ? 1 : 0\n    }).on(\"start\", function(t) {\n        t.parent === e && (this.style.display = \"inline\")\n    }).on(\"end\", function(t) {\n        t.parent !== e && (this.style.display = \"none\")\n    })\n}\n\nfunction c(n) {\n    var e = diameter \/ n[2];\n    r = n, o.attr(\"transform\", function(t) {\n        return \"translate(\" + (t.x - n[0]) * e + \",\" + (t.y - n[1]) * e + \")\"\n    }), i.attr(\"r\", function(t) {\n        return t.r * e\n    })\n}\nsvg.style(\"background\", color(-1)).on(\"click\", function() {\n    l(n)\n}), c([n.x, n.y, 2 * n.r + margin])\n});\n});\"\"\"","9ecdab9b":"locationWiseActiveRestaurants = getLocationWiseActiveRestaurants(restaurants)\ncreateDataForBubblePlot(locationWiseActiveRestaurants)\n\nh = display(HTML(htmllocationbubble))\ndisplay(HTML('''<h3>Graph is interactive. Click on the circles for more info.<\/h3>'''))\nj = IPython.display.Javascript(js_locationbubble)\nIPython.display.display_javascript(j)","8d748ee5":"def getTopRestaurantsForDish(data, dishname='Pasta', n=10):\n    dishData = data[data['dish_liked']==dishname]\n    dishData = dishData.groupby(['name','location','dish_liked','ratings']).agg({'votes': np.mean})\n    dishData = dishData.sort_values(['votes'], ascending=False).sort_values(['ratings'], ascending=False).reset_index()\n    dishData['index'] = dishData.index\n    dishData['Rank'] = dishData.groupby('location')['index'].rank(ascending=True)\n    return dishData.loc[dishData['Rank']<=n]\n\ndef getTopRestaurantsFromTopLocations(data, n=10):\n    restData = data.groupby(['location'])['votes'].sum().reset_index()\n    restData = restData.sort_values('votes', ascending=False)\n    restData = restData.head(n)\n    return data[data['location'].isin(restData['location'].values)]\n\ndef createDishGraph(dishName, data):\n    nodes = []\n    links = []\n    nodes.append({\"id\": 'Dish: '+dishName, \"group\": 0, \"size\": 15})\n    tempLocations = data.groupby('location')['votes'].sum().reset_index()\n    tempLocations['perc'] = tempLocations['votes']*100\/tempLocations['votes'].sum()\n    for index,row in tempLocations.iterrows():\n        nodes.append({\"id\": 'Location: '+row['location'], \"group\": index+1, \"size\": int(round(row['perc'],0))})\n        links.append({\"source\": 'Dish: '+dishName, \"target\": 'Location: '+row['location'], \"value\": 1})\n        tempRests = data[data['location']==row['location']]\n        tempRests['perc'] = tempRests['votes']*100\/tempRests['votes'].sum()\n        for ind,rr in tempRests.iterrows():\n            nodes.append({\"id\": row['location']+'- Restaurant: '+rr['name']+'. Rated: '+str(rr['ratings']), \"group\": index+1, \"size\": int(round(rr['perc'],0))})\n            links.append({\"source\": 'Location: '+row['location'], \"target\": row['location']+'- Restaurant: '+rr['name']+'. Rated: '+str(rr['ratings']), \"value\": 1})\n    doc = {'nodes' : nodes, 'links' : links}\n    with open('dishGraph.json', 'w') as outfile:  \n        json.dump(doc, outfile)","fda2c2c6":"htmlDishGraph = \"\"\"<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\n.links line {\n  stroke: #999;\n  stroke-opacity: 0.8;\n}\n.node text {\n  pointer-events: none;\n  font: 10px sans-serif;\n}\n\n.tooldiv {\n    display: inline-block;\n    width: 120px;\n    background-color: white;\n    color: #000;\n    text-align: center;\n    padding: 5px 0;\n    border-radius: 6px;\n    z-index: 1;\n}\n.nodes circle {\n  stroke: #fff;\n  stroke-width: 1.5px;\n}\n\ndiv.tooltip {\n    position: absolute;\n    text-align: center;\n    width: 100px;\n    height: 65px;\n    padding: 2px;\n    font: 12px sans-serif;\n    background: lightsteelblue;\n    border: 0px;\n    border-radius: 8px;\n    pointer-events: none;\n}\n\n<\/style>\n<svg id=\"dg\" width=\"760\" height=\"760\"><\/svg>\"\"\"\n\njsDishGraph = \"\"\"require.config({\n    paths: {\n        d3: \"https:\/\/d3js.org\/d3.v4.min\"\n     }\n });\n \n require([\"d3\"], function(d3) {\nvar svg = d3.select(\"#dg\"),\n    width = +svg.attr(\"width\"),\n    height = +svg.attr(\"height\");\n\nvar color = d3.scaleOrdinal(d3.schemeCategory20);\n\nvar simulation = d3.forceSimulation()\n    \/\/ fix the link distance, charge and the center layout  \n    .force(\"link\", d3.forceLink().id(function(d) { return d.id; }).distance(120).strength(1))\n    .force(\"charge\", d3.forceManyBody().strength(-155))\n    .force(\"center\", d3.forceCenter(width \/ 2, height \/ 2));\n\nd3.json(\"dishGraph.json\", function(error, graph) {\n  if (error) throw error;\n\n  var link = svg.append(\"g\")\n      .attr(\"class\", \"links\")\n    .selectAll(\"line\")\n    .data(graph.links)\n    .enter().append(\"line\")\n      .attr(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n\/\/ Define the div for the tooltip\nvar div = d3.select(\"body\").append(\"div\")\n    .attr(\"class\", \"tooltip\")\n    .style(\"opacity\", 0);\n\n  var node = svg.append(\"g\")\n      .attr(\"class\", \"nodes\")\n    .selectAll(\"circle\")\n    .data(graph.nodes)\n    .enter().append(\"circle\")\n      .attr(\"r\", function(d) {return d.size})\n      .attr(\"fill\", function(d) { return color(d.group); })\n      .call(d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended)).on(\"mouseover\", function(d) {\n            div.transition()\n                .duration(200)\n                .style(\"opacity\", .9);\n            div.html(d.id )\n                .style(\"left\", (d3.event.pageX) + \"px\")\n                .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            })\n        .on(\"mouseout\", function(d) {\n            div.transition()\n                .duration(500)\n                .style(\"opacity\", 0);\n        });\n          \n    \n  \/\/node.append(\"title\")\n   \/\/ .text(function(d) { return d.id; });\n\n  simulation\n      .nodes(graph.nodes)\n      .on(\"tick\", ticked);\n      \n\n  simulation.force(\"link\")\n      .links(graph.links);\n\n  function ticked() {\n    link\n        .attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n\n    node\n        .attr(\"cx\", function(d) { return d.x; })\n        .attr(\"cy\", function(d) { return d.y; });\n  }\n});\n\nfunction dragstarted(d) {\n  if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n  d.fx = d.x;\n  d.fy = d.y;\n}\n\nfunction dragged(d) {\n  d.fx = d3.event.x;\n  d.fy = d3.event.y;\n}\n\nfunction dragended(d) {\n  if (!d3.event.active) simulation.alphaTarget(0);\n  d.fx = null;\n  d.fy = null;\n}\n });\n\"\"\"\n\ntemp = restaurants.groupby(['name','location','dish_liked','ratings']).agg({'votes': np.mean}).reset_index()\ns = temp[\"dish_liked\"].str.split(',', expand=True).stack()\ni = s.index.get_level_values(0)\ntemp = temp.loc[i].copy()\ntemp[\"dish_liked\"] = s.values\ntemp['dish_liked'] = temp['dish_liked'].apply(lambda x: x.strip())\n\ndfTemp = getTopRestaurantsForDish(temp)\ndfTemp = getTopRestaurantsFromTopLocations(dfTemp,5)","7b8f0d0d":"createDishGraph('Pasta', dfTemp)\nh = display(HTML(htmlDishGraph))\nj = IPython.display.Javascript(jsDishGraph)\nIPython.display.display_javascript(j)","a499dd33":"temp = getLocationWiseActiveRestaurants(restaurants, 5, 20).reset_index()\n#temp.head()\n\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\n\nopt = []\nopts = []\nfor i in range(0, len(colors)):\n    opt = dict(\n        target = temp['location'][[i]].unique(), value = dict(marker = dict(color = colors[i]))\n    )\n    opts.append(opt)\n\ndata = [dict(\n  type = 'scatter',\n  mode = 'markers',\n  x = temp['approx_cost(for two people)'],\n  y = temp['ratings'],\n  text = temp['name'],\n  hoverinfo = 'text',\n  opacity = 0.8,\n  marker = dict(\n      size = temp['votes'],\n      sizemode = 'area',\n      sizeref = 100\n  ),\n  transforms = [\n      dict(\n        type = 'groupby',\n        groups = temp['location'],\n        styles = opts\n    )]\n)]\n\nlayout = dict(\n    title = '<b>Location wise top rated restaurants<\/b>',\n    yaxis = dict(\n        title='Ratings'\n        #type = 'log'\n    ),\n    xaxis = dict(\n        title='Approx cost for two people'\n    )\n)\n\n\niplot({'data': data, 'layout': layout}, validate=False)","35798241":"def group_lower_ranking_values(pie_raw, column):\n    \"\"\"Converts pie_raw dataframe with multiple categories to a dataframe with fewer categories\n    \n    Calculate the 85th quantile and group the lesser values together.\n    Lesser values will be labelled as 'Other'\n    \n    Parameters\n    ----------\n    pie_raw : DataFrame\n        dataframe with the data to be aggregated\n    column : str\n        name of the column based on which dataframe values will be aggregated\n    \"\"\"\n    pie_counts = pie_raw.groupby(column).agg('count')\n    pct_value = pie_counts[lambda df: df.columns[0]].quantile(.85)\n    values_below_pct_value = pie_counts[lambda df: df.columns[0]].loc[lambda s: s < pct_value].index.values\n    def fix_values(row):\n        if row[column] in values_below_pct_value:\n            row[column] = 'Other'\n        return row \n    pie_grouped = pie_raw.apply(fix_values, axis=1).groupby(column).agg('count')\n    return pie_grouped\n\ntemp = restaurants.groupby(['name','cuisines']).size().reset_index(name='Freq')\ns = temp[\"cuisines\"].str.split(',', expand=True).stack()\ni = s.index.get_level_values(0)\ntemp = temp.loc[i].copy()\ntemp[\"cuisines\"] = s.values\ntemp['cuisines'] = temp['cuisines'].apply(lambda x: x.strip())\ntemp = group_lower_ranking_values(temp, 'cuisines').sort_values('name', ascending=False)\ntemp.drop('Other', inplace=True)\n\ntrace = go.Bar(\n            y=temp['name'],\n            x=temp.index\n    )\ndata = [trace]\nlayout = go.Layout(xaxis=dict(tickangle=-45),\n                   yaxis = dict(title='Number of restaurants'),\n    title='Most popular cuisines in Bangalore',\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='cuisine-bangalore')","f0aa2342":"def getCuisineTopRestaurants(data, cuisine, n=10):\n    temp = data[data['cuisines']==cuisine]\n    temp = temp.groupby(['name','cuisines']).agg({'ratings': np.mean, 'votes': np.mean}).reset_index()\n    temp = temp.sort_values('ratings', ascending=False)\n    temp = temp.sort_values('votes', ascending=False)\n    return temp.round({'votes':0}).head(n)\n\ntemp = restaurants.groupby(['name','cuisines','ratings']).agg({'votes': np.mean}).reset_index()\ns = temp[\"cuisines\"].str.split(',', expand=True).stack()\ni = s.index.get_level_values(0)\ntemp = temp.loc[i].copy()\ntemp[\"cuisines\"] = s.values\ntemp['cuisines'] = temp['cuisines'].apply(lambda x: x.strip())\n\ninterestCuisines = ['North Indian', 'Chinese', 'South Indian', 'Fast Food']\nnorth_df = getCuisineTopRestaurants(temp, 'North Indian')\nchinese_df = getCuisineTopRestaurants(temp, 'Chinese')\nsouth_df = getCuisineTopRestaurants(temp, 'South Indian')\nfast_df = getCuisineTopRestaurants(temp, 'Fast Food')","5a7153d6":"trace_north = go.Scatter(x=list(north_df['name']),\n                        y=list(north_df['votes']),\n                         name='votes',\n                        line=dict(color='#33CFA5'))\n\ntrace_north_rate = go.Scatter(x=list(north_df['name']),\n                        y=list(north_df['ratings']),\n                        yaxis='y2',\n                        name='rated',\n                        line=dict(color='#ff7f0e'))\n\ntrace_chinese = go.Scatter(x=list(chinese_df['name']),\n                            y=list(chinese_df['votes']),\n                           visible=False,\n                            name='votes',\n                            line=dict(color='#33CFA5'))\n\ntrace_chinese_rate = go.Scatter(x=list(chinese_df['name']),\n                            y=list(chinese_df['ratings']),\n                            yaxis='y2',\n                           visible=False,\n                            name='rated',\n                            line=dict(color='#ff7f0e'))\n\ntrace_south = go.Scatter(x=list(south_df['name']),\n                       y=list(south_df['votes']),\n                       name='votes',\n                         visible=False,\n                       line=dict(color='#33CFA5'))\n\ntrace_south_rate = go.Scatter(x=list(south_df['name']),\n                       y=list(south_df['ratings']),\n                        yaxis='y2',\n                       name='rated',\n                         visible=False,\n                       line=dict(color='#ff7f0e'))\n\ntrace_fast = go.Scatter(x=list(fast_df['name']),\n                           y=list(fast_df['votes']),\n                           name='votes',\n                        visible=False,\n                           line=dict(color='#33CFA5'))\n\ntrace_fast_rate = go.Scatter(x=list(fast_df['name']),\n                           y=list(fast_df['ratings']),\n                            yaxis='y2',\n                           name='rated',\n                        visible=False,\n                           line=dict(color='#ff7f0e'))\n\ndata = [trace_north, trace_chinese, trace_south, trace_fast, \n        trace_north_rate, trace_chinese_rate, trace_south_rate, trace_fast_rate]\n\nupdatemenus = list([\n    dict(active=0,\n         buttons=list([   \n            dict(label = 'North Indian',\n                 method = 'update',\n                 args = [{'visible': [True, False, False, False, True, False, False, False]},\n                         {'title': 'North Indian'}]),\n            dict(label = 'Chinese',\n                 method = 'update',\n                 args = [{'visible': [False, True, False, False, False, True, False, False]},\n                         {'title': 'Chinese'}]),\n            dict(label = 'South Indian',\n                 method = 'update',\n                 args = [{'visible': [False, False, True, False, False, False, True, False]},\n                         {'title': 'South Indian'}]),\n            dict(label = 'Fast Food',\n                 method = 'update',\n                 args = [{'visible': [False, False, False, True, False, False, False, True]},\n                         {'title': 'Fast Food'}])\n        ]),\n    )\n])\n\nlayout = dict(title='<b>Top cuisine serving restaurants.<\/b>', showlegend=False,\n              yaxis=dict(title='Votes'),\n              xaxis=dict(title='Restaurants'),\n              yaxis2=dict(title='Ratings',             \n                overlaying='y',\n                side='right'),\n              updatemenus=updatemenus)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='update_dropdown')","50a6a91f":"### Missing values","9ef11911":"### Preview Data","40d25fad":"# 1. Bubble Plot(Circle Packing)\nLet's visualize the locations with most active number of zomato users and the respective top 10 serving restaurants. Size of the bubble represents the vote count the restaurant has on zomato. Clicking on the bubble will show the top restaurants based on the ratings.","b199e899":"Thanks for visiting the kernel.<br>Hope you found something useful. Please upvote if you like it!!!!!","4fbd3986":"# 2. Forced Directed Network\n\n### Find your dish\nPass your favorite dish name in following function\n<pre>\ncreateDishGraph('Pasta', dfTemp)\n<\/pre>\nAnd the graph will give you the top restaurants serving that dish in top 5 most voted locations.\nSize of the node(circle) represents the vote count for the restaurant.","e4d01f4c":"### Top served cuisines in Bangalore","4792b28a":"# 4. Multi-axis scatter with dropdown control\n\nLet's visualise top served cuisines of Bangalore. Using the above graph, it can be concluded that North India, Chinese, South Indian and Fast Food are top four cuisines that are served in Bangalore.\n<br>Dropdown will give the ability to select the cuisine according to which the data in the graph will be displayed.","5b058903":"# Interactive visualizations of Bangalore restaurants - D3.js & plotly\n\nD3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG, and CSS. D3\u2019s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation. [Reference](https:\/\/d3js.org\/)\n\n**This kernel is an attempt to create interactive visualisations using D3.js and plotly.**\n\nSome plots used here are inspired by [this kernel](https:\/\/www.kaggle.com\/shivamb\/interactive-d3-js-visualisations-in-kaggle-kernels)","2a3983a0":"### Above graph is interactive, hover on nodes to view more information.\n\n\n# 3. Scatter Plot\n\nLet's visualise location wise top rated restaurants. Graph is interactive, hovering on nodes will show more details. Clicking on legend will filter the data in the graph. Size of the bubble represents the vote count for the restaurant."}}