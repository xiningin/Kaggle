{"cell_type":{"984661bf":"code","8f43d2dd":"code","c1e717cd":"code","ee78eca3":"code","c709f96d":"code","45e4670f":"code","6076d6b9":"code","cf25e8f9":"code","95fedcad":"code","980f5511":"code","01d681ae":"code","3e6b30ee":"code","d6111bc6":"code","05ee4c9c":"code","c8245fbe":"code","8bbbd23e":"code","7bd03dd0":"code","23ce9a41":"code","c6695ba1":"code","07795bd9":"code","f47d6135":"code","8168ef4c":"code","8c688b0a":"code","c2b7c022":"code","fdbe119a":"code","6a2e0a38":"code","dd743128":"code","2c3f622f":"code","6755b673":"code","530d411f":"code","2c3fb692":"code","deb8e4d5":"code","1a24522d":"code","eabb2d68":"code","bbd1a4e9":"code","ebfbd728":"code","b761c0ea":"markdown","7d019094":"markdown","b0b2617d":"markdown","d7ac023c":"markdown","f2f44274":"markdown","9c0ea1af":"markdown","1489d4dc":"markdown","1db27a8d":"markdown","53676e13":"markdown","7038c476":"markdown","5169c5d3":"markdown","745e3422":"markdown","1413f07b":"markdown","10db95c2":"markdown","50ecbe29":"markdown","231afcbd":"markdown","64bea1db":"markdown","2c22e328":"markdown","6efe46f9":"markdown","a6eb2934":"markdown","790a36cd":"markdown","6f76db54":"markdown","983f008e":"markdown","a6c0715f":"markdown","28baa7a1":"markdown","267b6855":"markdown","663656fb":"markdown","e07e3b95":"markdown","af2d9cf4":"markdown","e7f88f27":"markdown"},"source":{"984661bf":"# import libraries \nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport numpy as np\nimport re\nfrom datetime import datetime\nfrom fbprophet import Prophet","8f43d2dd":"# import cleaned summary data - found clean data set that updates 24 h \nsummary = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\", parse_dates = ['Date']).fillna(0)","c1e717cd":"# get recent stats\nrecent_stats = summary.groupby('Date', as_index = False)['Confirmed', 'Deaths', 'Recovered'].sum()\nsorted_stats = recent_stats.sort_values(by = 'Date', ascending = False)\n\n# our latest data \nsorted_stats.head(5)","ee78eca3":"def calculate_percentage_increase(original_number, new_number):\n    ''' Calculates the percentage increase given two positive numbers\n    '''\n    increase = new_number - original_number \n    return \"{0:.0f}%\".format((increase \/ original_number) * 100) ","c709f96d":"# total confirmed, deaths, and recovered so far \nfirst_date = sorted_stats.iloc[-1]\nmost_recent_date = sorted_stats.iloc[0]\n\nconfirmed_increase = calculate_percentage_increase(first_date['Confirmed'], most_recent_date['Confirmed'])\ndeaths_increase = calculate_percentage_increase(first_date['Deaths'], most_recent_date['Deaths'])\nrecovered_increase = calculate_percentage_increase(first_date['Recovered'], most_recent_date['Recovered'])\n\nincrease_summary = pd.DataFrame([[confirmed_increase,deaths_increase,recovered_increase]],columns=['Confirmed','Deaths','Recovered'], index = ['% Increase'])\nincrease_summary","45e4670f":"def calculate_case_fatality(confirmed, death):\n    ''' Calculates the case fatality rates given the total number of confirmed and death cases\n    '''\n    return \"{0:.2f}%\".format((death \/ confirmed) * 100)","6076d6b9":"print(\"The death-to-case ratio is {}\".format(calculate_case_fatality(most_recent_date['Confirmed'], most_recent_date['Deaths'])))","cf25e8f9":"fig = go.Figure() \nfig.add_trace(go.Scatter(\n                x= recent_stats['Date'],\n                y= recent_stats['Confirmed'],\n                name = \"Confirmed\",\n                line_color= \"deepskyblue\",\n                opacity= 0.8))\nfig.add_trace(go.Scatter(\n                x= recent_stats['Date'],\n                y= recent_stats['Deaths'],\n                name= \"Deaths\",\n                line_color= \"gray\",\n                opacity= 0.8))\nfig.add_trace(go.Scatter(\n                x= recent_stats['Date'],\n                y= recent_stats['Recovered'],\n                name= \"Recovered\",\n                line_color= \"deeppink\",\n                opacity= 0.8))\n\nfig.update_layout(title_text= \"Overview of reported confirmed, dead, and recovered cases across countries\")\n\nfig.show()","95fedcad":"# see most recent totals in terms of country & province\nsummary['Country\/Region'].replace({\"Mainland China\":\"China\", \"US\":\"United States\"}, inplace = True)\nsummary_by_country = summary.groupby([\"Country\/Region\", \"Province\/State\"], as_index = False)['Confirmed', 'Deaths', 'Recovered', 'Lat', 'Long']\nrecent_geo_summary = summary_by_country.last().groupby(['Country\/Region']).sum()","980f5511":"# create iso mapping for easy use with plotly\ncountry_codes = pd.read_csv(\"..\/input\/iso-country-codes-global\/wikipedia-iso-country-codes.csv\", usecols = [\"English short name lower case\", \"Alpha-3 code\"])\ncountry_codes.columns = ['Name', 'Code']","01d681ae":"recent_geo_summary = recent_geo_summary.merge(country_codes, left_on = \"Country\/Region\", right_on = \"Name\")\nrecent_geo_summary.sort_values(\"Confirmed\", ascending = False).head(10)","3e6b30ee":"map_fig = px.choropleth(recent_geo_summary, locations=\"Code\",\n                    color=\"Confirmed\", \n                    hover_name=\"Name\", \n                    color_continuous_scale=px.colors.sequential.Plasma)\nmap_fig.update_layout(\n        title = 'Most affected areas by Geography')\nmap_fig.show()","d6111bc6":"china_summary = summary[summary['Country\/Region'] == 'China']\nchina_prov_summary = china_summary.groupby('Province\/State', as_index = False).last()","05ee4c9c":"china_fig = go.Figure(data=go.Scattergeo(\n        lon = china_prov_summary['Long'],\n        lat = china_prov_summary['Lat'],\n        text = china_prov_summary['Province\/State'],\n        mode = 'markers',\n        marker_color = china_prov_summary['Confirmed'],\n        marker = dict(\n            size = 6,\n            reversescale = True,\n            autocolorscale = False,\n            colorscale = 'Bluered_r',\n            cmin = 0,\n            color = china_prov_summary['Confirmed'],\n            cmax = china_prov_summary['Confirmed'].max(),\n            colorbar_title=\"Confirmed cases\"\n        )))\n\nchina_fig.update_layout(\n        title = 'Most affected Chinese provinces',\n        geo_scope='asia',\n    )\nchina_fig.show()","c8245fbe":"china = recent_geo_summary[\"Name\"] == 'China'\nchina_cases = recent_geo_summary[china]['Confirmed'].iloc[0]\nworld_cases = recent_geo_summary[-china]['Confirmed'].sum()\nbar_fig = go.Figure([go.Bar(x=['China', 'Other'], y=[china_cases, world_cases])])\nbar_fig.update_traces(marker_color='rgb(255,69,0)', marker_line_color='rgb(255,0,0)',\n                  marker_line_width=1.5, opacity=0.6)\nbar_fig.update_layout(title_text='China vs. World Confirmed Cases')\nbar_fig.show()","8bbbd23e":"iran = summary['Country\/Region'] == 'Iran'\nitaly = summary['Country\/Region'] == 'Italy'\nunited_states = summary['Country\/Region'] == 'United States'\niran_summary = summary[iran]\nitaly_summary = summary[italy]\nus_summary = summary[united_states]\ni_fig = go.Figure() \ni_fig.add_trace(go.Scatter(\n                x= iran_summary['Date'],\n                y= iran_summary['Confirmed'],\n                name = \"Iran\",\n                line_color= \"deepskyblue\",\n                opacity= 0.8))\ni_fig.add_trace(go.Scatter(\n                x= italy_summary['Date'],\n                y= italy_summary['Confirmed'],\n                name= \"Italy\",\n                line_color= \"deeppink\",\n                opacity= 0.8))\ni_fig.add_trace(go.Scatter(\n                x= us_summary['Date'],\n                y= us_summary['Confirmed'],\n                name= \"United States\",\n                line_color= \"green\",\n                opacity= 0.8))\ni_fig.update_layout(title_text= \"Overview of the case growth in Italy, Iran, and United States\")\n\ni_fig.show()","7bd03dd0":"patient_info = pd.read_csv(\"..\/input\/covid19-patientlevel-data\/DXY.cn patient level data - Line-list.csv\").fillna(\"NA\")\npatient_info.columns","23ce9a41":"gender_fig = px.histogram(patient_info, x=\"gender\")\ngender_fig.show()","c6695ba1":"symptoms = pd.DataFrame(data = patient_info['symptom'].value_counts().head(17)[1:])","07795bd9":"words = symptoms.index\nweights = symptoms.symptom\nword_cloud_data = go.Scatter(x=[4,2,2,3, 1.5, 5, 4, 4,0],\n                 y=[2,2,3,3,1, 5,1,3,0],\n                 mode='text',\n                 text=words,\n                 marker={'opacity': 0.5},\n                 textfont={'size': weights, 'color':[\"red\", \"green\", \"blue\", \"purple\", \"black\", \"orange\", \"blue\", \"black\"]})\nlayout = go.Layout({'xaxis': {'showgrid': False, 'showticklabels': False, 'zeroline': False},\n                    'yaxis': {'showgrid': False, 'showticklabels': False, 'zeroline': False}})\nword_cloud = go.Figure(data=[word_cloud_data], layout=layout)\nword_cloud.update_layout(title_text='Word cloud of most common symptoms by frequency')\nword_cloud.show()","f47d6135":"# it seems that some recovered and death entries are written as the date of recovery\/death instead of 1 indicating 'true'\n\n# create a new cleaned feature for recovered\/death data in order to plot\ndef is_date(value):\n    '''\n    Returns a boolean indicating whether a given value is a date.\n    '''\n    regex = re.compile(r'\\d{1,2}\/\\d{1,2}\/\\d{4}')\n    return bool(regex.match(value))","8168ef4c":"patient_info['clean_recovered'] = patient_info['recovered'].apply(lambda x: '1' if is_date(x) else x)\npatient_info['clean_recovered'] = patient_info['clean_recovered'].astype('category')","8c688b0a":"patient_info['clean_death'] = patient_info['death'].apply(lambda x: '1' if is_date(x) else x)\npatient_info['clean_death'] = patient_info['clean_death'].astype('category')","c2b7c022":"rec_age_fig = make_subplots(rows=1, cols=2, subplot_titles=(\"Age vs. Recovered\", \"Age vs. Death\"))\n\nrec_age_fig.add_trace(go.Box(x=patient_info['clean_recovered'], y=patient_info['age'], name=\"Recovered\"),\n              row=1, col=1)\nrec_age_fig.add_trace(go.Box(x=patient_info['clean_death'], y=patient_info['age'], name = \"Death\"), \n              row=1, col=2)\nrec_age_fig.update_traces(boxpoints='all')\nrec_age_fig.update_layout(title_text=\"Subplots of age in relation to recovery and death\")\nrec_age_fig.show()","fdbe119a":"total_instances = len(patient_info)\nvisiting_or_from_wuhan = patient_info['visiting Wuhan'].value_counts()[1] + patient_info['from Wuhan'].value_counts()[1]\nnot_visiting_or_from_wuhan = total_instances - visiting_or_from_wuhan \nwuhan_summary = pd.DataFrame([visiting_or_from_wuhan, not_visiting_or_from_wuhan],columns = ['Total'], index=['Visiting\/From Wuhan', 'Not Visiting\/From Wuhan'])","6a2e0a38":"pie_fig = go.Figure(data=[go.Pie(labels=wuhan_summary.index, values=wuhan_summary['Total'], opacity = 0.8)])\npie_fig.show()","dd743128":"# prep data \ntime_series_data = summary[['Date', 'Confirmed']].groupby('Date', as_index = False).sum()\ntime_series_data.columns = ['ds', 'y']\ntime_series_data.ds = pd.to_datetime(time_series_data.ds)","2c3f622f":"train_range = np.random.rand(len(time_series_data)) < 0.8\ntrain_ts = time_series_data[train_range]\ntest_ts = time_series_data[~train_range]\ntest_ts = test_ts.set_index('ds')","6755b673":"prophet_model = Prophet()\nprophet_model.fit(train_ts)","530d411f":"future = pd.DataFrame(test_ts.index)\npredict = prophet_model.predict(future)\nforecast = predict[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]\nforecast = forecast.set_index('ds')","2c3fb692":"test_fig = go.Figure() \ntest_fig.add_trace(go.Scatter(\n                x= test_ts.index,\n                y= test_ts.y,\n                name = \"Actual Cases\",\n                line_color= \"deepskyblue\",\n                mode = 'lines',\n                opacity= 0.8))\ntest_fig.add_trace(go.Scatter(\n                x= forecast.index,\n                y= forecast.yhat,\n                name= \"Prediction\",\n                mode = 'lines',\n                line_color = 'red',\n                opacity= 0.8))\ntest_fig.add_trace(go.Scatter(\n                x= forecast.index,\n                y= forecast.yhat_lower,\n                name= \"Prediction Lower Bound\",\n                mode = 'lines',\n                line = dict(color='gray', width=2, dash='dash'),\n                opacity= 0.8))\ntest_fig.add_trace(go.Scatter(\n                x= forecast.index,\n                y= forecast.yhat_upper,\n                name= \"Prediction Upper Bound\",\n                mode = 'lines',\n                line = dict(color='royalblue', width=2, dash='dash'),\n                opacity = 0.8\n                ))\n\ntest_fig.update_layout(title_text= \"Prophet Model's Test Prediction\",\n                       xaxis_title=\"Date\", yaxis_title=\"Cases\",)\n\ntest_fig.show()","deb8e4d5":"def calculate_mse(actual, predicted):\n    '''Calculates the Mean Squared Error given estimated and actual values.\n    '''\n    errors = 0\n    n = len(actual)\n    for i in range(n):\n        errors += (actual[i] - predicted[i]) **2\n    return errors \/ n","1a24522d":"print(\"The MSE for the Prophet time series model is {}\".format(calculate_mse(test_ts.y, forecast.yhat)))","eabb2d68":"prophet_model_full = Prophet()\nprophet_model_full.fit(time_series_data)","bbd1a4e9":"future_full = prophet_model_full.make_future_dataframe(periods=150)\nforecast_full = prophet_model_full.predict(future_full)\nforecast_full = forecast_full.set_index('ds')","ebfbd728":"prediction_fig = go.Figure() \nprediction_fig.add_trace(go.Scatter(\n                x= time_series_data.ds,\n                y= time_series_data.y,\n                name = \"Actual\",\n                line_color= \"red\",\n                opacity= 0.8))\nprediction_fig.add_trace(go.Scatter(\n                x= forecast_full.index,\n                y= forecast_full.yhat,\n                name = \"Prediction\",\n                line_color= \"deepskyblue\",\n                opacity= 0.8))\nprediction_fig.update_layout(title_text= \"Prophet Model Forecasting\", \n                             xaxis_title=\"Date\", yaxis_title=\"Cases\",)\n\nprediction_fig.show()","b761c0ea":"Train Model","7d019094":"What's the **simplest update** on what has been going on recently?","b0b2617d":"**Import dataset #3 - Analyzing patient-level data **","d7ac023c":"**Import libraries**","f2f44274":"**China vs. Rest of the Affected Areas**","9c0ea1af":"What is the **gender composition** in the data set?","1489d4dc":"**Train\/Test split**","1db27a8d":"Is there any **relation** between age, recovery and death?","53676e13":"Taking a more detailed look at the **rapid growth** in Iran, Italy, and the United States:","7038c476":"What are some of the **common symptoms** people seem to be experiencing?","5169c5d3":"**Import dataset #2 - ISO Country Codes **\n\nI will be creating a ISO mapping in order to make it work easily with the plot.ly library","745e3422":"**Visualizing recent COVID-19 outbreak on a more personal level\n**\n\nThese are my efforts, as a beginner to Kaggle, to visualize, dissect, and understand recent COVID-19 data. Two datasets will be visualized: one that provides a high-level overview of the disease and another that looks more into the patient-level information. Finally, a model will be implemented to forecast the growth of COVID-19 cases. \n","1413f07b":"We should keep in mind that most of the symptoms are unidentified in this dataset. However, among the ones that are there, we can see that fever and cough have been identified as the most common symptoms. ","10db95c2":"Let's explore the data more and see what's happening **geographically**. What are the most affected areas?","50ecbe29":"**Import dataset #1 - Cumulative summary of confirmed, death, and recovered cases**","231afcbd":"Test Model ","64bea1db":"There is not enough data to draw accurate predictions or inferences from but you can see that, according to this dataset, among the people that have died, it seems to be mainly older people, above the age 35.","2c22e328":"Now, let's actually start visualizing this. ","6efe46f9":"What's the **percentage increase** of confirmed, deaths, and recovered cases since January, 2020?","a6eb2934":"What are some **additional features **that this dataset keeps track of?","790a36cd":"**Prediction**","6f76db54":"**Prophet Model**","983f008e":"**Forecasting the future**","a6c0715f":"What is the current **death-to-case** ratio (i.e, what is the severity of the illness)? ","28baa7a1":"Keeping this metric in mind, let's fit our full data set and see what the model is forecasting. ","267b6855":"A closer look at the most affected area: **China**","663656fb":"Forecasting the number of cases  \n","e07e3b95":"Evaluate Model ","af2d9cf4":"How many of the affected patients have **traveled to or are** from Wuhan?","e7f88f27":"There have been many notebooks that do a thorough analysis on everything mentioned above (e.g, [this great one](https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-viz-prediction-comparisons)). Personally, I want to get to know more about **the people** that are affected. "}}