{"cell_type":{"399fcbe7":"code","6649e939":"code","d27ab73a":"code","bf686908":"code","7c3f8897":"code","c3765219":"code","888bba82":"code","ebe2dc80":"code","790dd94e":"code","8c744691":"code","0932e4e6":"code","c6e9a5bd":"code","6756d7d4":"code","b2b3bc2f":"code","16b9c751":"code","85d71e82":"code","8ae0c998":"code","7c827e2c":"code","da78e60d":"code","c26a86fb":"code","40bbbd7d":"code","57531722":"code","e1872fb5":"code","ee9aabfa":"code","be3afadb":"code","83ca892c":"code","d046757e":"code","b1ac3592":"code","0a516aab":"code","3e7039cf":"markdown","1ae42b22":"markdown","85c1c6cb":"markdown","7f8445a0":"markdown","67f610dc":"markdown","81bc638e":"markdown","605d306b":"markdown","8902a26f":"markdown","012a1352":"markdown","7f3dbcd3":"markdown","e47a8df2":"markdown","20ee4d9f":"markdown"},"source":{"399fcbe7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6649e939":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d27ab73a":"data = pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')","bf686908":"data.head()","7c3f8897":"data.info()","c3765219":"data.isnull().sum() #Checking for null values","888bba82":"data.nunique()  #We get total unique values in each column","ebe2dc80":"numeric_features = [i for i in data.columns if data[i].nunique() > 10]\ncategorical_features = [i for i in data.columns if data[i].nunique() < 10]","790dd94e":"print(\"Numeric features:{}\".format(numeric_features))\nprint(\"Categorical features:{}\".format(categorical_features))","8c744691":"i = 1\nplt.figure(figsize=(18,20))  #Setting the plot size\nfor features in categorical_features[:-1]:  #for each feature in categorical_features -1 (HeartDisease is excluded)\n    plt.subplot(3,2,i)  #Creating a subplot\n    sns.countplot(x=data[features], hue=data.HeartDisease).set_title(features)  #x is feature of countplot \n    i=i+1\nplt.show()","0932e4e6":"plt.figure(figsize=(18,20))\ni=1\nfor features in numeric_features:\n    plt.subplot(3,2,i)\n    sns.histplot(x=data[features],hue=data.HeartDisease,bins=40)\n    i = i+1\nplt.show()\n    ","c6e9a5bd":"plt.figure(figsize=(18,20))\ni = 1\nfor features in numeric_features:\n    plt.subplot(3,2,i)\n    sns.boxplot(x=data[features]).set_title(features)\n    i=i+1\nplt.show()","6756d7d4":"plt.figure(figsize=(14,8))\nsns.heatmap(data.corr())\nplt.show()","b2b3bc2f":"data.head()","16b9c751":"categorical_features","85d71e82":"from sklearn.preprocessing import LabelEncoder\ndf = data.copy()\nlabel = ['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope']  #Identify all values that need processing\nfor i in label:\n    le = LabelEncoder()\n    df[i]=le.fit_transform(df[i])   #Replace existing rows with Label encoded rows","8ae0c998":"df.head()","7c827e2c":"X = df.drop(\"HeartDisease\",axis=1)\ny = df[\"HeartDisease\"]","da78e60d":"X.head()","c26a86fb":"from sklearn.preprocessing import StandardScaler","40bbbd7d":"sc = StandardScaler()\nX_ = X.copy()\nX_.loc[:,numeric_features] = sc.fit_transform(X_.loc[:,numeric_features])\n","57531722":"X_.head()","e1872fb5":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X_,y,test_size = 0.2, random_state=42)","ee9aabfa":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score, confusion_matrix, recall_score","be3afadb":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\n\nlr = LogisticRegression()\nclassifier = lr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)\nacc = accuracy_score(y_test,y_pred)*100\nrec = recall_score(y_test,y_pred)*100\n#cv_acc = cross_val_score(estimator=lr,X=X_,y=y,scoring=\"neg_mean_squared_error\",cv=10)\n#cv_mean = cv_acc.mean()\n\n#print('Cross Val Score is:{}'.format(round((cv_mean),2)))\nprint('Model Accuracy is:{}'.format(round((acc),2)))\nprint('Recall Score is:{}'.format(round((rec),2)))\nprint(classification_report(y_test,y_pred))\n\n","83ca892c":"cm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True)","d046757e":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=1000,random_state=0)\nrfc.fit(X_train,y_train)\ny_pred=rfc.predict(X_test)","b1ac3592":"cm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True)","0a516aab":"#cv_acc = cross_val_score(estimator=rfc,X=X_,y=y,scoring=\"neg_mean_squared_error\",cv=10)\n#cv_mean = cv_acc.mean()\n\n#print('Cross Val Score is:{}'.format(round((cv_mean),2)))\nacc = accuracy_score(y_test,y_pred)*100\nrec = recall_score(y_test,y_pred)*100\nprint('Model Accuracy is:{}'.format(round((acc),2)))\nprint('Recall Score is:{}'.format(round((rec),2)))\nprint(classification_report(y_test,y_pred))","3e7039cf":"### DATA USED:\nThis dataset was created by combining different datasets already available independently but not combined before. In this dataset, 5 heart datasets with a total of 918 observations are combined over 11 common features which makes it the largest heart disease dataset available so far for research purposes. The features are as the following:\n\nAge: age of the patient [years]\n\nSex: sex of the patient [M: Male, F: Female]\n\nChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n\nRestingBP: resting blood pressure [mm Hg]\n\nCholesterol: serum cholesterol [mm\/dl]\n\nFastingBS: fasting blood sugar [1: if FastingBS > 120 mg\/dl, 0: otherwise]\n\nRestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n\nMaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n\nExerciseAngina: exercise-induced angina [Y: Yes, N: No]\n\nOldpeak: oldpeak = ST [Numeric value measured in depression]\n\nST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]\n\nHeartDisease: output class [1: heart disease, 0: Normal]\n","1ae42b22":"## Visualizing all numeric values with output variable","85c1c6cb":"### We can observe negative correlation between 'Age' and 'MaxHR' i.e younger people have higher heart rate compared to old people\n### 'HeartDisease' and 'Oldpeak' have a positive correlation\n","7f8445a0":"### CODE:","67f610dc":"## Seperating the numerical and categorical features:","81bc638e":"## Visualizing a count plot for each categorical feature with a hue of output variable","605d306b":"There are no null values in the data.","8902a26f":"## PREDICTIVE MODELS","012a1352":"### OBJECTIVE\nThe main objective of this work is to predict if a patient is at risk of having heart disease or not, based on the common features of patients with heart disease.","7f3dbcd3":"### We need to LabelConvert categorical variables","e47a8df2":"### Now we split data into dependent and independent variables","20ee4d9f":"### Feature Scaling:"}}