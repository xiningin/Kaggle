{"cell_type":{"b05db0c2":"code","c0b633e4":"code","970095a6":"code","b3de1506":"code","ad744d18":"code","e77e9c60":"code","5d732320":"code","f0b4ca14":"code","65414696":"code","33b6ce40":"code","52a1cb65":"code","308d1447":"code","9a4e269d":"code","0fdc729b":"code","550c3e5d":"code","1c048de6":"code","e889e076":"code","85040631":"code","c3dd0f70":"code","e7f1dae7":"code","8956da65":"code","00c18ee9":"code","2e4ffcb5":"code","b91d1ae1":"code","cd3090a9":"markdown","74fde533":"markdown","34831972":"markdown","93022726":"markdown","365c9be6":"markdown","044cafdb":"markdown","bacd67c3":"markdown","0db640f6":"markdown","3acaba7e":"markdown","50295ab4":"markdown","c3876298":"markdown","d3b139fb":"markdown","9a6d4fa2":"markdown","0efdfda8":"markdown"},"source":{"b05db0c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0b633e4":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nimport pandas as pd\nimport numpy as np\nfrom itertools import cycle, islice\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import parallel_coordinates\n\n%matplotlib inline","970095a6":"data = pd.read_csv('..\/input\/minute-weather-dataset-from-weather-station\/minute_weather.csv')","b3de1506":"# Checking the shape.\n\ndata.shape","ad744d18":"data.head()","e77e9c60":"sampled_df = data[(data['rowID'] % 10) == 0]\nsampled_df.shape","5d732320":"sampled_df.describe().transpose()","f0b4ca14":"sampled_df[sampled_df['rain_accumulation'] == 0].shape","65414696":"sampled_df[sampled_df['rain_duration'] == 0].shape","33b6ce40":"del sampled_df['rain_accumulation']\ndel sampled_df['rain_duration']","52a1cb65":"rows_before = sampled_df.shape[0]\nsampled_df = sampled_df.dropna()\nrows_after = sampled_df.shape[0]","308d1447":"rows_before - rows_after","9a4e269d":"sampled_df.columns","0fdc729b":"features = ['air_pressure', 'air_temp', 'avg_wind_direction', 'avg_wind_speed', 'max_wind_direction', \n        'max_wind_speed','relative_humidity']\n\nselect_df = sampled_df[features]\n\nselect_df.columns","550c3e5d":"select_df","1c048de6":"X = StandardScaler().fit_transform(select_df)\nX","e889e076":"kmeans = KMeans(n_clusters=12)\nmodel = kmeans.fit(X)\nprint(\"model\\n\", model)","85040631":"centers = model.cluster_centers_\ncenters","c3dd0f70":"# Function that creates a DataFrame with a column for Cluster Number\n\ndef pd_centers(featuresUsed, centers):\n\tcolNames = list(featuresUsed)\n\tcolNames.append('prediction')\n\n\t# Zip with a column called 'prediction' (index)\n\tZ = [np.append(A, index) for index, A in enumerate(centers)]\n\n\t# Convert to pandas data frame for plotting\n\tP = pd.DataFrame(Z, columns=colNames)\n\tP['prediction'] = P['prediction'].astype(int)\n\treturn P","e7f1dae7":"# Function that creates Parallel Plots\n\ndef parallel_plot(data):\n\tmy_colors = list(islice(cycle(['b', 'r', 'g', 'y', 'k']), None, len(data)))\n\tplt.figure(figsize=(15,8)).gca().axes.set_ylim([-3,+3])\n\tparallel_coordinates(data, 'prediction', color = my_colors, marker='o')","8956da65":"P = pd_centers(features, centers)\nP","00c18ee9":"parallel_plot(P[P['relative_humidity'] < -0.5])","2e4ffcb5":"parallel_plot(P[P['air_temp'] > 0.5])","b91d1ae1":"parallel_plot(P[(P['relative_humidity'] > 0.5) & (P['air_temp'] < 0.5)])","cd3090a9":"**Drop all the Rows with Empty rain_duration and rain_accumulation**","74fde533":"**Creating some utility functions which will help us in plotting graphs:**","34831972":"# **Statistics**","93022726":"**What are the centers of 12 clusters we formed ?**","365c9be6":"# Select Features of Interest for Clustering","044cafdb":"# Warm Days","bacd67c3":"# Use k-Means Clustering","0db640f6":"# Plots","3acaba7e":"# Importing the Necessary Libraries","50295ab4":"# Cool Days","c3876298":"**How many rows did we drop ?**","d3b139fb":"# Scaling the Features using StandardScaler","9a6d4fa2":"# Dry Days","0efdfda8":"# **Data Sampling**\n\nThere are lots of rows, so let us sample down by taking every 10th row (for analysis purpose)."}}