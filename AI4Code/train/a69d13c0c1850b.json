{"cell_type":{"2cbaa2d1":"code","58598742":"code","8627b3d2":"code","b0cb6673":"code","5c242a24":"code","d91e9e9e":"code","a169a61d":"code","632c3d68":"code","adcc1614":"code","b05f7ea6":"code","25dd8858":"code","28d666e4":"code","dff99cc9":"code","ebe68ba3":"code","a8add23b":"code","1f32c1c3":"code","e0fc355c":"code","dcf59f75":"code","c4d03949":"code","7296e8b4":"code","3d1b6d7c":"code","a873ae99":"code","56a5fd82":"code","6ed26418":"code","9861bd14":"code","12c3fe28":"code","924a0e49":"code","14ce0273":"code","15479a14":"code","e273deb4":"code","80bce809":"code","3a3498de":"code","9df08688":"code","814a919c":"code","82d3f216":"code","25262b3e":"code","e6390793":"code","73f80984":"code","8e0a9cd0":"code","4b4aa5cd":"code","33a11121":"code","ded2e30f":"code","af44bb63":"code","49565ff9":"code","b5060f98":"code","3ae5ea22":"code","5498fe32":"code","d5c81554":"code","ec6c98d6":"markdown","cb29e4b2":"markdown","58311daa":"markdown","b912d91f":"markdown","c3eaa717":"markdown","3687f3bd":"markdown","5af15315":"markdown","7637cae4":"markdown","1e8970af":"markdown","825391c3":"markdown","3dcd281b":"markdown","be364a68":"markdown","86ec4ba6":"markdown","86d5a3a6":"markdown","c89b7d1b":"markdown","a935db67":"markdown","71741520":"markdown","1f2cbf7c":"markdown"},"source":{"2cbaa2d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport warnings\nwarnings.filterwarnings('ignore')","58598742":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_submission=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')     ","8627b3d2":"train.head()","b0cb6673":"test.head()","5c242a24":"print(train.shape, test.shape)","d91e9e9e":"train.info()","a169a61d":"test.info()","632c3d68":"train.isnull().sum()","adcc1614":"test.isnull().sum()","b05f7ea6":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","25dd8858":"def bar_chart(feature):\n    survived=train[train['Survived']==1][feature].value_counts()\n    dead=train[train['Survived']==0][feature].value_counts()\n    df=pd.DataFrame([survived,dead])\n    df.index=['survived','dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","28d666e4":"bar_chart('Sex')","dff99cc9":"bar_chart('Pclass')","ebe68ba3":"bar_chart('Embarked')","a8add23b":"bar_chart('SibSp')","1f32c1c3":"bar_chart('Parch')","e0fc355c":"train['Age'].fillna(train['Age'].mean(),inplace=True)\ntest['Age'].fillna(test['Age'].mean(),inplace=True)\ntest['Fare'].fillna(test['Fare'].mean(),inplace=True)\ntrain['Embarked'].fillna(value='S',inplace=True)","dcf59f75":"train['family']=train['SibSp']+train['Parch']+1\ntest['family']=test['SibSp']+train['Parch']+1","c4d03949":"train['Sex'] = train['Sex'].replace(['female','male'],[0,1])\ntrain['Embarked'] = train['Embarked'].replace(['S','Q','C'],[1,2,3])","7296e8b4":"test['Sex'] = test['Sex'].replace(['female','male'],[0,1])\ntest['Embarked'] = test['Embarked'].replace(['S','Q','C'],[1,2,3])","3d1b6d7c":"train_clean=train.drop(columns=['PassengerId','Name','SibSp','Parch','Ticket','Cabin'])\ntest_clean=test.drop(columns=['PassengerId','Name','SibSp','Parch','Ticket','Cabin'])","a873ae99":"X_train=train_clean.drop(columns=['Survived'])\ny_train=train_clean[['Survived']]","56a5fd82":"from sklearn.preprocessing import StandardScaler\nX_train_scale=StandardScaler().fit_transform(X_train)\npd.DataFrame(X_train_scale).head()","6ed26418":"\nfrom sklearn.linear_model import LogisticRegression\nLR=LogisticRegression().fit(X_train_scale, y_train)\ny_pred=LR.predict(test_clean)\nfrom sklearn.metrics import classification_report\n#print(classification_report(y_pred, gender_submission['Survived']))\nfrom sklearn.model_selection import cross_val_score\nscores=cross_val_score(LogisticRegression(),X_train_scale,y_train,cv=5)\nprint(scores)\nprint(scores.mean())","9861bd14":"from sklearn.model_selection import GridSearchCV\ngrid={\"C\":np.logspace(-3,3,7), \"penalty\":[\"l1\",\"l2\"]}\nscore=GridSearchCV(LogisticRegression(),grid).fit(X_train_scale, y_train)\nprint(score.best_params_)\nprint(score.best_score_)","12c3fe28":"data = {'PassengerId':gender_submission['PassengerId'],\n        'Survived':y_pred}\nresult=pd.DataFrame(data)\nresult.to_csv('\/kaggle\/working\/result_lr.csv', index=False)\noutput=pd.read_csv('\/kaggle\/working\/result_lr.csv')","924a0e49":"from sklearn.ensemble import RandomForestClassifier\nRF=RandomForestClassifier().fit(X_train_scale, y_train)\ny_pred_rf=RF.predict(test_clean)\nfrom sklearn.metrics import classification_report\n#print(classification_report(y_pred_rf, gender_submission['Survived']))\n#print(y_pred_rf)\nscores=cross_val_score(RandomForestClassifier(), X_train_scale, y_train, cv=5)\nprint(scores)\nprint(scores.mean())","14ce0273":"data={'PassengerId': gender_submission['PassengerId'],'Survived':y_pred_rf}\nresult_rf=pd.DataFrame(data)\nresult_rf.to_csv('\/kaggle\/working\/result_rf.csv', index=False)\nresult_rf1=pd.read_csv('\/kaggle\/working\/result_rf.csv')","15479a14":"from sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\nsvc=SVC(kernel='linear', C=1)\nscores=cross_val_score(svc, X_train_scale, y_train, cv=5)\nprint(scores)\nprint(scores.mean())","e273deb4":"y_pred_svc=SVC(kernel='linear', C=1).fit(X_train_scale, y_train).predict(test_clean)\ndata={'PassengerId': gender_submission['PassengerId'],'Survived':y_pred_svc}\nresult_svc=pd.DataFrame(data)\nresult_svc.to_csv('\/kaggle\/working\/result_svc.csv', index=False)\nresult_svc=pd.read_csv('\/kaggle\/working\/result_svc.csv')","80bce809":"from sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import cross_val_score\nsgd=SGDClassifier()\nscores=cross_val_score(sgd, X_train, y_train, cv=5)\nprint(scores)\nprint(scores.mean())\n\ny_pred_sgd=SGDClassifier().fit(X_train, y_train).predict(test_clean)\ndata={'PassengerId': gender_submission['PassengerId'],'Survived':y_pred_sgd}\nresult_sgd=pd.DataFrame(data)\nresult_sgd.head()\n\nresult_sgd.to_csv('\/kaggle\/working\/result_sgd.csv', index=False)\nresult_sgd=pd.read_csv('\/kaggle\/working\/result_sgd.csv')\nresult_sgd.head()","3a3498de":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\ndtc=DecisionTreeClassifier()\nscores=cross_val_score(dtc, X_train, y_train, cv=5)\nprint(scores)\nprint(scores.mean())\n\ny_pred_dtc=DecisionTreeClassifier().fit(X_train, y_train).predict(test_clean)\ndata={'PassengerId': gender_submission['PassengerId'],'Survived':y_pred_dtc}\nresult_dtc=pd.DataFrame(data)\nresult_dtc.to_csv('\/kaggle\/working\/result_dtc.csv', index=False)\nresult_dtc=pd.read_csv('\/kaggle\/working\/result_dtc.csv')","9df08688":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import cross_val_score\nnb=GaussianNB()\nscores=cross_val_score(nb, X_train, y_train, cv=5)\nprint(scores)\nprint(scores.mean())\n\ny_pred_nb=GaussianNB().fit(X_train, y_train).predict(test_clean)\ndata={'PassengerId': gender_submission['PassengerId'],'Survived':y_pred_nb}\nresult_nb=pd.DataFrame(data)\nresult_nb.to_csv('\/kaggle\/working\/result_nb.csv', index=False)\nresult_nb=pd.read_csv('\/kaggle\/working\/result_nb.csv')","814a919c":"import keras\nimport tensorflow as tf","82d3f216":"model_nn=keras.Sequential([\n    keras.layers.Dense(6,activation=tf.nn.relu, input_shape=[6]),\n    keras.layers.Dense(8,activation=tf.nn.relu),\n    keras.layers.Dense(1,activation='softmax')\n    ])","25262b3e":"#optimizer=tf.keras.optimizers.RMSprop(0.001)\nmodel_nn.compile(loss='binary_crossentropy', optimizer='Adam',metrics=['accuracy'])\nmodel_nn.fit(X_train,y_train, epochs=5)","e6390793":"y_pred_nn=model_nn.predict(test_clean).astype(int)","73f80984":"gender_submission['Survived']= y_pred_nn\ngender_submission.to_csv('\/kaggle\/working\/result_neural.csv', index=False)\nresult_nn=pd.read_csv('\/kaggle\/working\/result_neural.csv')","8e0a9cd0":"import time\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.metrics import classification_report\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.metrics import accuracy_score","4b4aa5cd":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_submission=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')    ","33a11121":"train['Title'] = train['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\ntrain['FamilySize'] = train['SibSp'] + train['Parch'] + 1\ntrain['FareBin'] = pd.qcut(train['Fare'], 4)\ntrain['AgeBin'] = pd.qcut(train['Age'], 5)\n\ntest['Title'] = test['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\ntest['FamilySize'] = test['SibSp'] + test['Parch'] + 1\ntest['FareBin'] = pd.qcut(test['Fare'], 4)\ntest['AgeBin'] = pd.qcut(test['Age'], 5)","ded2e30f":"X_train=train.drop(columns=['Survived','Cabin','Fare','Age','PassengerId','Ticket','SibSp','Parch','Name'])\nY_train=train.Survived\nX_test=test.drop(columns=['Cabin','Fare','Age','PassengerId','Ticket','SibSp','Parch','Name'])","af44bb63":"num_feat=X_train.select_dtypes(include='number').columns.to_list()\ncat_feat=X_train.select_dtypes(include='object').columns.to_list()","49565ff9":"num_pipe=Pipeline([\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scale', StandardScaler())\n])\n\ncat_pipe=Pipeline([\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('coder', OneHotEncoder(handle_unknown='ignore'))\n])\n\nct=ColumnTransformer(remainder='drop',\n    transformers=[\n    ('numerical',num_pipe, num_feat),\n    ('categorical',cat_pipe, cat_feat)\n])\n\nmodel_new=Pipeline([\n    ('transformer', ct),\n    ('predictor', RandomForestClassifier(n_jobs=1,random_state=0))\n])\n\nmodel_new.fit(X_train, Y_train);","b5060f98":"print('Default model score: ', model_new.score(X_train, Y_train))","3ae5ea22":"y_pred_train=model_new.predict(X_train)\nprint('In sample Score: ', accuracy_score(y_pred_train, Y_train))","5498fe32":"def submission(test, model):\n    y_pred=model.predict(test)\n    data={'PassengerId': gender_submission['PassengerId'],'Survived':y_pred}\n    result=pd.DataFrame(data)\n    #date=pd.Timestamp.now().strftime(format='%d_%m_%Y_%H-%M_')\n    result.to_csv(f'\/kaggle\/working\/pipeline_result.csv', index=False)","d5c81554":"submission(X_test,model_new)","ec6c98d6":"# Survival Prediction for Titanic Dataset","cb29e4b2":"# **Exploratory Data Analysis and Visualization**","58311daa":"**Naive Bayes Classifier**","b912d91f":"**Stochastic Gradient Descent**","c3eaa717":"**Neural Network**","3687f3bd":"**Submission File Preparation**","5af15315":"**Support Vector Classifier**","7637cae4":"**Please upvote if you find this notebook useful, thank you.**","1e8970af":"# Predictive Modeling","825391c3":"**This notebook is to predict survival classes from the famous titanic dataset. It presents exploratory data analysis and visualization as well as predictive modeling with different classification algorithms including neural network. Finally, it also shows how to build a simple yet powerful pipeline.**","3dcd281b":"**Loading the dataset**","be364a68":"**Logistic Regression**","86ec4ba6":"**Feature Engineering**","86d5a3a6":"**Feature Engineering**","c89b7d1b":"**Decision Tree Classifier**","a935db67":"**Random Forest Classifier**","71741520":"**Grid Search CV**","1f2cbf7c":"**Simple Pipeline--Let's do it in a different way**"}}