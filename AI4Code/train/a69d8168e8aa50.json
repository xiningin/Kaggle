{"cell_type":{"78a840b9":"code","f577b995":"code","c5d214de":"code","28d0dc64":"code","14399e68":"code","87f844c5":"code","cbf01152":"code","803c9bea":"code","f38e279d":"code","118928d9":"code","3933a057":"code","b2017eb5":"code","6b16ec74":"code","c5d981c7":"code","9cddc809":"code","4a267321":"code","37987ded":"code","790eb013":"code","d5335229":"code","910f65da":"code","e72f8812":"code","965a75dd":"code","029048e3":"code","95a70071":"code","34f3182d":"code","04921782":"code","a75117a6":"code","1ff28588":"code","44314c28":"code","b07ada7a":"code","72c161e7":"code","c88e79bb":"code","ba6a7954":"code","aa42c719":"code","ff985047":"code","4cd82f59":"code","aa836a64":"code","f64fc1e2":"code","63c22bc8":"code","14e749c1":"code","2f91b22b":"code","14ca2cad":"code","da8df03e":"code","1ec10f45":"code","28884a52":"code","c2ec352d":"code","058cb24d":"code","32516d31":"code","96f94759":"code","38ba0b5e":"code","7ee812d6":"code","6c95ef9c":"code","2a3d7146":"code","025b32ea":"code","521d5282":"code","9540b31e":"code","d656d225":"code","462f8fb0":"code","37c4d12b":"code","c1cb6702":"code","89570b69":"code","ec5ad2ee":"code","be45cf2d":"code","f9e5b824":"code","0ca6da8a":"code","49fee22e":"code","c9c808bf":"code","9659ad82":"code","b368848a":"code","d1f4f8c1":"code","cbf9e921":"code","b6a7c2a1":"code","10a4e874":"code","e2b7fccc":"code","2d2162b8":"code","6b28dd91":"code","68944c7d":"code","68e6b585":"code","b4a6f85c":"code","d5f37074":"code","9f2da116":"code","8fe7785a":"code","231e7069":"code","de05e71f":"code","5ce608bb":"code","0f76178a":"code","56c6606e":"code","6a53c68f":"code","40e5f0d1":"code","8544d4cb":"code","06563236":"code","e9ccf4f6":"code","b638b3ce":"code","751a09a1":"code","986b58dc":"code","51cfa638":"code","a0aae231":"code","4792b561":"markdown","6f0a6f8b":"markdown","89af5b70":"markdown","2a40e060":"markdown","6cc33698":"markdown","6b072e53":"markdown","ed52229f":"markdown","49e31741":"markdown","d0d762b7":"markdown","f9136a4d":"markdown","38c20c70":"markdown","b965526b":"markdown","dff7a72a":"markdown","fac17735":"markdown","02651693":"markdown","d45e11d6":"markdown","4791e639":"markdown","e7f7ec18":"markdown","ee2294ad":"markdown","c1f16d73":"markdown","757040f9":"markdown","595b296a":"markdown","0eeddd03":"markdown","c7370121":"markdown","29836169":"markdown","e2c08a46":"markdown","429602cc":"markdown","64db15f2":"markdown","3077dcdb":"markdown","da28bd66":"markdown","b55b265d":"markdown","5fd30ddf":"markdown","59f2d11c":"markdown","db6ba351":"markdown","2e8b446a":"markdown","87b3151f":"markdown","fc5db800":"markdown","b16b7d7c":"markdown","9b962db6":"markdown","b8a6a936":"markdown","3195be51":"markdown","d553e0f7":"markdown","45808295":"markdown","e8b78ce2":"markdown","be5b8803":"markdown","a9323e85":"markdown","089e0e3d":"markdown"},"source":{"78a840b9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nimport os\n\nDATA_DIR='..\/input'\nprint(os.listdir(DATA_DIR))","f577b995":"# Dummy variables to hold dataset file names on my local machine\nTRAIN_CSV_FILE = \"..\/input\/train.csv\"\nTEST_CSV_FILE = \"..\/input\/test.csv\"\ndf_train = pd.read_csv(TRAIN_CSV_FILE)\ndf_test = pd.read_csv(TEST_CSV_FILE)","c5d214de":"df_train.head()","28d0dc64":"df_train.info()","14399e68":"df_test.head()","87f844c5":"df_test.info()","cbf01152":"df_train.isna().sum()","803c9bea":"df_test.isna().sum()","f38e279d":"df_train.describe()","118928d9":"df_test.describe()","3933a057":"sns.countplot(data=df_train, x='Survived')","b2017eb5":"df_train.groupby(['Survived', 'Sex'])['Survived'].count()","6b16ec74":"sns.catplot(x='Sex', col='Survived', kind='count', data=df_train)","c5d981c7":"women_survived = df_train[df_train.Sex == 'female'].Survived.sum()\nmen_survived = df_train[df_train.Sex == 'male'].Survived.sum()\ntotal_female_survived = df_train[df_train.Sex == 'female'].Survived.count()\ntotal_male_survived = df_train[df_train.Sex == 'male'].Survived.count()\nprint(women_survived,men_survived,total_female_survived, total_male_survived, sep=' ')\nprint('Women Survived --> {:<7.3f}%'.format(women_survived\/total_female_survived * 100))\nprint('Men Survived --> {:<7.3f}%'.format(men_survived\/total_male_survived * 100))","9cddc809":"f,ax=plt.subplots(1,2,figsize=(16,7))\ndf_train['Survived'][df_train['Sex']=='male'].value_counts().plot.pie(explode=[0,0.2],autopct='%1.1f%%',ax=ax[0],shadow=True)\ndf_train['Survived'][df_train['Sex']=='female'].value_counts().plot.pie(explode=[0,0.2],autopct='%1.1f%%',ax=ax[1],shadow=True)\nax[0].set_title('Survived (male)')\nax[1].set_title('Survived (female)')\n\nplt.show()","4a267321":"df_train.groupby(['Survived', 'Pclass'])['Survived'].count()","37987ded":"sns.catplot(x='Pclass', col='Survived', kind='count', data=df_train)","790eb013":"pd.crosstab(df_train.Pclass, df_train.Survived, margins=True).style.background_gradient(cmap='autumn_r')","d5335229":"pd_class_p = pd.crosstab(df_train.Pclass, df_train.Survived, margins=True,normalize='index')\npd_class_p","910f65da":"pd_class_p[1][3]","e72f8812":"print('Survivals per class percentages :')\nfor i in range(3):\n    print('Class {} --> {:<7.3f}%'.format(i+1,pd_class_p[1][i+1]*100))","965a75dd":"sns.catplot('Pclass','Survived', kind='point', data=df_train)","029048e3":"pd.crosstab([df_train.Sex, df_train.Survived], df_train.Pclass, margins=True).style.background_gradient(cmap='autumn_r')","95a70071":"cl_sex_sur_per = pd.crosstab([df_train.Sex, df_train.Survived], df_train.Pclass, margins=True)\ncl_sex_sur_per","34f3182d":"sns.catplot('Pclass','Survived',hue='Sex', kind='point', data=df_train);","04921782":"sns.catplot(x='Survived', col='Embarked', kind='count', data=df_train);","a75117a6":"sns.catplot('Embarked','Survived', kind='point', data=df_train);","1ff28588":"sns.catplot(x='Sex',y='Survived', col='Embarked', kind='bar', data=df_train)","44314c28":"sns.catplot('Embarked','Survived', hue= 'Sex', kind='point', data=df_train);","b07ada7a":"sns.catplot('Embarked','Survived', col='Pclass', hue= 'Sex', kind='point', data=df_train)","72c161e7":"pd.crosstab([df_train.Survived], [df_train.Sex, df_train.Pclass, df_train.Embarked], margins=True)","c88e79bb":"for df in [df_train, df_test]:\n    df['Age_bin']=np.nan\n    for i in range(8,0,-1):\n        df.loc[ df['Age'] <= i*10, 'Age_bin'] = i","ba6a7954":"df_train[['Age', 'Age_bin']].head(20)","aa42c719":"sns.catplot(x='Age_bin',y='Survived',  kind='bar', data=df_train)","ff985047":"sns.catplot(x='Age_bin',y='Survived',col='Sex',  kind='bar', data=df_train)","4cd82f59":"sns.catplot('Age_bin','Survived',hue='Sex',kind='point',data=df_train)","aa836a64":"sns.catplot('Age_bin','Survived', col='Pclass', row = 'Sex', kind='point', data=df_train);","f64fc1e2":"pd.crosstab([df_train.Sex, df_train.Survived], [df_train.Age_bin, df_train.Pclass], margins=True).style.background_gradient(cmap='autumn_r')","63c22bc8":"sns.catplot('SibSp','Survived', col='Pclass' , row = 'Sex', kind='point', data=df_train)","14e749c1":"pd.crosstab([df_train.Sex, df_train.Survived], [df_train.SibSp, df_train.Pclass], margins=True).style.background_gradient(cmap='autumn_r')","2f91b22b":"sns.catplot('Parch','Survived', col='Pclass' , row = 'Sex', kind='point', data=df_train)","14ca2cad":"pd.crosstab([df_train.Sex, df_train.Survived], [df_train.Parch, df_train.Pclass], margins=True).style.background_gradient(cmap='autumn_r')","da8df03e":"sns.distplot(df_train['Fare'])","1ec10f45":"for df in [df_train, df_test]:\n    df['Fare_bin']=np.nan\n    for i in range(12,0,-1):\n        df.loc[ df['Fare'] <= i*50, 'Fare_bin'] = i","28884a52":"df_train['Fare_bin'].head(10)","c2ec352d":"sns.catplot(x='Fare_bin',y='Survived',col='Sex',  kind='bar', data=df_train)","058cb24d":"sns.catplot('Fare_bin','Survived', col='Pclass' , row = 'Sex', kind='point', data=df_train)","32516d31":"pd.crosstab([df_train.Sex, df_train.Survived], [df_train.Fare_bin, df_train.Pclass], margins=True).style.background_gradient(cmap='autumn_r')","96f94759":"df_train_ml = pd.read_csv(TRAIN_CSV_FILE)\ndf_test_ml = pd.read_csv(TEST_CSV_FILE)","38ba0b5e":"df_train_ml.head()","7ee812d6":"df_test_ml.head()","6c95ef9c":"# Encoding categorical data\ndf_train_ml = pd.get_dummies(data=df_train_ml, columns=['Sex', 'Embarked'], drop_first=True)\ndf_train_ml.drop(['Name','Ticket', 'Cabin'],axis=1, inplace=True) \n\npassenger_id = df_test_ml['PassengerId']\ndf_test_ml = pd.get_dummies(data=df_test_ml, columns=['Sex', 'Embarked'], drop_first=True)\ndf_test_ml.drop(['Name','Ticket', 'Cabin'],axis=1, inplace=True) ","2a3d7146":"df_train_ml.head()","025b32ea":"df_test_ml.head()","521d5282":"X = df_train_ml.iloc[:, 2:].values\ny = df_train_ml.iloc[:, 1].values","9540b31e":"# Taking care of missing data\nfrom sklearn.preprocessing import Imputer\nimputer = Imputer(missing_values = 'NaN', strategy = 'mean', axis = 0)\nimputer = imputer.fit(X[:, 1:2])\nX[:, 1:2] = imputer.transform(X[:, 1:2])","d656d225":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 101)","462f8fb0":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","37c4d12b":"X_train_all = X\ny_train_all = y\nX_test_all = df_test_ml.iloc[:,1:].values","c1cb6702":"# Take care of NaNs in all data\nimputer = imputer.fit(X_test_all[:, [1,4]])\nX_test_all[:, [1,4]] = imputer.transform(X_test_all[:, [1,4]])","89570b69":"sc_all = StandardScaler()\nX_train_all = sc_all.fit_transform(X_train_all)\nX_test_all = sc_all.transform(X_test_all)","ec5ad2ee":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report, accuracy_score\n\ndef show_metrics(y_test, y_pred,msg='Summary'):\n    cm = confusion_matrix(y_test,y_pred)\n    cm = sns.heatmap(cm, annot=True, fmt='d')\n    print(msg)\n    print(classification_report(y_test, y_pred))\n    print('Accuracy : {}'.format(accuracy_score(y_test, y_pred)))","be45cf2d":"from sklearn.linear_model import LogisticRegression\nlg_classifier = LogisticRegression(random_state = 101)\nlg_classifier.fit(X_train, y_train)","f9e5b824":"# Predicting the Test set results\nlg_y_pred = lg_classifier.predict(X_test)","0ca6da8a":"# Making the Confusion Matrix\ncm = confusion_matrix(y_test, lg_y_pred)\nsns.heatmap(cm, annot=True, fmt='d')","49fee22e":"# Print some metrics\nprint(classification_report(y_test, lg_y_pred))\nprint(accuracy_score(y_test, lg_y_pred))","c9c808bf":"lg_classifier.fit(X_train_all, y_train_all)\nlg_y_pred_all = lg_classifier.predict(X_test_all)","9659ad82":"sub_logreg = pd.DataFrame()\nsub_logreg['PassengerId'] = df_test['PassengerId']\nsub_logreg['Survived'] = lg_y_pred_all\n#sub_logmodel.to_csv('logmodel.csv',index=False)","b368848a":"# Fitting K-NN to the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nknn_classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nknn_classifier.fit(X_train, y_train)","d1f4f8c1":"# Predicting the Test set results\nknn_y_pred = knn_classifier.predict(X_test)","cbf9e921":"#confusion matrix\nknn_cm = confusion_matrix(y_test, knn_y_pred)\nsns.heatmap(knn_cm, annot=True, fmt='d')","b6a7c2a1":"print('K-NN Summary')\nprint(classification_report(y_test, knn_y_pred))\nprint(accuracy_score(y_test, knn_y_pred))","10a4e874":"knn_classifier.fit(X_train_all, y_train_all)\nknn_y_pred_all= knn_classifier.predict(X_test_all)","e2b7fccc":"sub_knn = pd.DataFrame()\nsub_knn['PassengerId'] = df_test['PassengerId']\nsub_knn['Survived'] = knn_y_pred_all\n#sub_knn.to_csv('knn.csv',index=False)","2d2162b8":"# Fitting SVM to the Training set\nfrom sklearn.svm import SVC\nsvm_classifier = SVC(kernel = 'linear', random_state = 101)\nsvm_classifier.fit(X_train, y_train)","6b28dd91":"# Predicting the Test set results\nsvm_y_pred = svm_classifier.predict(X_test)","68944c7d":"#confusion matrix\nsvm_cm = confusion_matrix(y_test, svm_y_pred)\nsns.heatmap(svm_cm, annot=True, fmt='d')\nprint('SVM Summary')\nprint(classification_report(y_test, svm_y_pred))\nprint(accuracy_score(y_test, svm_y_pred))","68e6b585":"svm_classifier.fit(X_train_all, y_train_all)\nsvm_y_pred_all= svm_classifier.predict(X_test_all)","b4a6f85c":"sub_svm = pd.DataFrame()\nsub_svm['PassengerId'] = df_test['PassengerId']\nsub_svm['Survived'] = svm_y_pred_all\n#sub_svm.to_csv('svm.csv',index=False)","d5f37074":"# Fitting Kernel SVM to the Training set\nksvm_classifier = SVC(kernel = 'rbf', random_state = 101)\nksvm_classifier.fit(X_train, y_train)","9f2da116":"# Predicting the Test set results\nksvm_y_pred = ksvm_classifier.predict(X_test)","8fe7785a":"#confusion matrix and metrics for kernel SVM\nksvm_cm = confusion_matrix(y_test, ksvm_y_pred)\nsns.heatmap(ksvm_cm, annot=True, fmt='d')\nprint('Kernel SVM Summary')\nprint(classification_report(y_test, ksvm_y_pred))\nprint(accuracy_score(y_test, ksvm_y_pred))","231e7069":"ksvm_classifier.fit(X_train_all, y_train_all)\nksvm_y_pred_all= ksvm_classifier.predict(X_test_all)","de05e71f":"sub_ksvm = pd.DataFrame()\nsub_ksvm['PassengerId'] = df_test['PassengerId']\nsub_ksvm['Survived'] = ksvm_y_pred_all\n#sub_svm.to_csv('svm.csv',index=False)","5ce608bb":"# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import GaussianNB\nnb_classifier = GaussianNB()\nnb_classifier.fit(X_train, y_train)","0f76178a":"# Predicting the Test set results\nnb_y_pred = nb_classifier.predict(X_test)","56c6606e":"show_metrics(y_test, nb_y_pred, msg='Naives Bayes Summary')","6a53c68f":"# Fitting Random Forest Classification to the Training set\nfrom sklearn.ensemble import RandomForestClassifier\nrf_classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nrf_classifier.fit(X_train, y_train)","40e5f0d1":"# Predicting the Test set results\nrf_y_pred = rf_classifier.predict(X_test)","8544d4cb":"show_metrics(y_test, rf_y_pred, msg='Random Forest Summary')","06563236":"# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = ksvm_classifier, X = X_train, y = y_train, cv = 10)\nprint(accuracies.mean())\nprint(accuracies.std())","e9ccf4f6":"# Applying Grid Search to find the best model and the best parameters\nfrom sklearn.model_selection import GridSearchCV\nparameters = [{'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n              {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\ngrid_search = GridSearchCV(estimator = ksvm_classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           n_jobs = -1)","b638b3ce":"grid_search = grid_search.fit(X_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint('Best Accuracy : {}\\n'.format(best_accuracy))\nprint('Best Parameters : {}\\n'.format(best_parameters))","751a09a1":"# Fitting Kernel SVM to the Training set\nksvm_classifier = SVC(kernel = 'rbf', C=1, gamma=0.6,random_state = 101)\nksvm_classifier.fit(X_train, y_train)","986b58dc":"# Predicting the Test set results\nksvm_y_pred = ksvm_classifier.predict(X_test)","51cfa638":"ksvm_classifier.fit(X_train_all, y_train_all)\nksvm_y_pred_all= ksvm_classifier.predict(X_test_all)","a0aae231":"sub_ksvm = pd.DataFrame()\nsub_ksvm['PassengerId'] = df_test['PassengerId']\nsub_ksvm['Survived'] = ksvm_y_pred_all\nsub_svm.to_csv('svm.csv',index=False)","4792b561":"**All data for transmision**","6f0a6f8b":"**SibSp and Parch**","89af5b70":"* **[Part 1: Exploratory Data Analysis](#Part-1:-Exploratory-Data-Analysis)**  \n* **[Part 2: Machine Learning](#Part-2:-Machine-Learning)**\n* **[Part 3: Model Selection And Boosting](#Part-3:-Model-Selection-And-Boosting)**","2a40e060":"* All males in Pclass 1 and Fare_bin = 11 survived.\n* For males in Pclass 2 survival rates < 20%\n* For males in Pclass 3 survival rates < 50%\n* Females in Pclass 1 and Fare_bin = 2.0, 3.0, 5.0, 6.0, 11.0 survived\n* Females in Pclass 2 and Fare_bin = 2.0 survived.\n* Females in Pclass 2 and 3 regardless of fares survival rates <= 0.5","6cc33698":"**Kernel SVM**","6b072e53":"**Let's see if survivors depends of passenger class**","ed52229f":"Fitting again to all data and submit","49e31741":"**Lets examine the relationship between Survived and Embarked**","d0d762b7":"**Naive Bayes**","f9136a4d":"**Embarked and Sex**","38c20c70":"Do some basic statistics","b965526b":"It seems like almost women in Pclass 1 and Pclass 2 survived \nand almost men in Pclass 2 and Pclass 3 not survived.","dff7a72a":"**Random Forest Classification**","fac17735":"## Part 1: Exploratory Data Analysis","02651693":"Both datasets have missing values for Age and Cabin","d45e11d6":"## Part 3: Model Selection And Boosting","4791e639":"**K-Nearest Neighbors (K-NN)**","e7f7ec18":"Confusion matrix and metrics","ee2294ad":"**Conclusions**\n\n* All males in Age_bin 1 (age <= 10 ) in Pclass 1 and Pclass 2 survived.\n* All females in Pclass 3 with 50 <= age < 60 died.","c1f16d73":"For males, no survival, rate above 0.5 for any values of SibSp. For females, passengers with SibSp = 3 and Pclass = 3 died, also all females with SibSp > 4 died. For females with SibSp = 1 and Pclass = 3 survival rate is below 0.5","757040f9":"Fit again for all data","595b296a":"**Feature scaling for all data**","0eeddd03":"Very similar to SibSp, but different values.\n* For females with Parch = 2 and Pclass = 3 survival rate is below 0.5  \n* All females with Parch = 4 and Pclass = 3 died.\n* All females with Parch > 4 died.\n* For females with Parch = 1 and Pclass = 3 survival rate is below 0.5\n* For males,all survival rates below 0.5 for any values of Parch, except for Parch = 2 and Pclass = 1.","c7370121":"Use this utility function to show metrics","29836169":"Let's look at the survivors based on their age and we will slowly \nadd the other factors we have studied so far.\n\nFirst we 'll create 8 bins with age.","e2c08a46":"1. <p>Lets fit it again using the best parameters<\/p>","429602cc":"**Logistic Regression**","64db15f2":"Confusion matrix and metrics","3077dcdb":"# The goals of this notebook :","da28bd66":"Show Gender survival percentages","b55b265d":"**Who has more survivors? Males or females?**","5fd30ddf":"**Train again for all data and submit**","59f2d11c":"**Display some percentages again**","db6ba351":"**Data Preparation**\n\n1. Load the original data from csv\n2. Encode categorical data\n3. Drop columns that we don't need\n4. Get the independent and dependent variable\n5. Take care of missing data\n6. Split the dataset into the trainning and test set","2e8b446a":"**Continue with Fare**\n\nLet see it's distribution","87b3151f":"Start by importing the necerrary libraries","fc5db800":"How many survived?","b16b7d7c":"Fit again for all data","9b962db6":"## Part 2: Machine Learning","b8a6a936":"**Support Vector Machine (SVM)**","3195be51":"The majority of those who did not survive were from the 3rd class, while the survivors are almost the same for all classes.","d553e0f7":"* All women of Pclass 2 that embarked in C and Q survived, also nearly all women of Pclass 1 survived.\n\n* All men of Pclass 1 and 2 embarked in Q have not survived, survival rate for men in Pclass 2 and 3 is always below 0.2\n* For the remaining men in Pclass 1 that embarked in S and Q, survival rate is approx. 0.4","45808295":"**Passenger Class and Sex :**","e8b78ce2":"Fit again for all data","be5b8803":"**Embarked, Pclass and Sex :**","a9323e85":"Create 12 bin of Fares","089e0e3d":"Do some pie charts for gender survival"}}