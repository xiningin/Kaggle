{"cell_type":{"520a2cfa":"code","aebc1733":"code","07367f81":"code","6d22de6f":"code","506b34c9":"code","a9c8cbeb":"code","35c68a01":"code","c3e838ce":"code","274021ec":"code","2e9d30a9":"code","3bd30cea":"code","bc131bfa":"markdown","e88f8729":"markdown","eab6fda5":"markdown","6f18f6f5":"markdown","8f625b13":"markdown","0c451370":"markdown","7ed849c1":"markdown","ae1d67cc":"markdown","2eded420":"markdown","a9bd6be4":"markdown"},"source":{"520a2cfa":"from sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import LinearSVC\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.datasets import fetch_20newsgroups","aebc1733":"cats = ['alt.atheism', 'sci.space']\nnewsgroups_train = fetch_20newsgroups(subset='train', categories=cats)\nnewsgroups_test = fetch_20newsgroups(subset='test', categories=cats)","07367f81":"X_train = newsgroups_train.data\nX_test = newsgroups_test.data\ny_train = newsgroups_train.target\ny_test = newsgroups_test.target\n","6d22de6f":"#transformet 1\ncountVectorizer = CountVectorizer()\n\n#transfomer 2\ntfidfTransformer = TfidfTransformer()\n\n#esimator\nlinearSVC = LinearSVC()\n\npipeline = Pipeline([\n    ('countVectorizer',countVectorizer),\n    ('tfidfTransformer',tfidfTransformer),\n    ('linearSVC',linearSVC)\n])","506b34c9":"param_grid = [\n    {\n        'countVectorizer__max_df':[0.8,0.9,1.0],\n        'linearSVC__penalty':['l2'],\n        'linearSVC__dual':[True,False]\n    },\n    {\n        'countVectorizer__max_df':[0.8,0.9,1.0],\n        'linearSVC__penalty':['l1'],\n        'linearSVC__dual': [False]\n    }\n]\n\ngrid = GridSearchCV(pipeline, cv=5, param_grid=param_grid,scoring='f1_micro')\ngrid.fit(X_train,y_train)","a9c8cbeb":"print(\"Best: %f using %s\" % (grid.best_score_, grid.best_params_))","35c68a01":"means = grid.cv_results_['mean_test_score']\nstds = grid.cv_results_['std_test_score']\nparams = grid.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","c3e838ce":"pipeline.set_params(linearSVC__penalty='l2',countVectorizer__max_df=0.8,linearSVC__dual=True)\npipeline.fit(X_train,y_train)","274021ec":"y_preds = pipeline.predict(X_test)","2e9d30a9":"y_preds[:5]","3bd30cea":"f1_score(y_test, y_preds, average='micro')","bc131bfa":"# tune pipeline as best param","e88f8729":"# show best score and best parameter ","eab6fda5":"# load data","6f18f6f5":"# make pipeline","8f625b13":"# load library","0c451370":"# get f1 score","7ed849c1":"# try to get best parameter using GridSearchCV","ae1d67cc":"# get grid mean , stds, params","2eded420":"# split train and test data","a9bd6be4":"# predict test data"}}