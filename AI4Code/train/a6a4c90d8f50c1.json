{"cell_type":{"4e2027e3":"code","2aa82b42":"code","1f084143":"code","dd9054ed":"code","6efee199":"code","530cfc7c":"code","e504b4c1":"code","2a9bcb45":"code","05c504b0":"code","0a93fe3d":"code","bba96a68":"code","609d1472":"code","467dfc1e":"code","711baa90":"code","4e7ec823":"code","4a2cb83c":"code","fc0a5a0a":"code","742dccc4":"code","503ebce7":"code","94009ceb":"code","940cbfc9":"code","dcee18bf":"code","a4185a88":"code","290d5c9f":"code","e720b9f1":"code","c7007d30":"code","73649555":"code","9794e9c6":"code","70c4fed8":"code","8a18838e":"code","a7b3d330":"markdown","1a6834ac":"markdown","a84f6a81":"markdown","6a2abddc":"markdown","fe3e65f4":"markdown","8eacc698":"markdown"},"source":{"4e2027e3":"import PIL","2aa82b42":"import pickle\nimport numpy as np\nimport torch\nfrom skimage import io\n\nfrom tqdm import tqdm, tqdm_notebook\nfrom PIL import Image\nfrom pathlib import Path\n\nfrom torchvision import transforms\nfrom multiprocessing.pool import ThreadPool\nfrom sklearn.preprocessing import LabelEncoder\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn as nn\n\nfrom matplotlib import colors, pyplot as plt\n%matplotlib inline\n\n# \u0432 sklearn \u043d\u0435 \u0432\u0441\u0435 \u0433\u043b\u0430\u0434\u043a\u043e, \u0447\u0442\u043e\u0431\u044b \u0432 colab \u0443\u0434\u043e\u0431\u043d\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \n# \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c warnings\nimport warnings\nwarnings.filterwarnings(action='ignore', category=DeprecationWarning)\n","1f084143":"# \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0435\u0436\u0438\u043c\u044b \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \nDATA_MODES = ['train', 'val', 'test']\n# \u0432\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043a \u0440\u0430\u0437\u043c\u0435\u0440\u0443 224x224 px\nRESCALE_SIZE = 224\n# \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0430 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0435\nDEVICE = torch.device(\"cuda\")","dd9054ed":"class SimpsonsDataset(Dataset):\n    \"\"\"\n    \u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0430\u0440\u0430\u043b\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0445 \u0438\u0437 \u043f\u0430\u043f\u043e\u043a\n    \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u0441\u043a\u0430\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0432 \u0442\u043e\u0440\u0447\u0435\u0432\u044b\u0435 \u0442\u0435\u043d\u0437\u043e\u0440\u044b\n    \"\"\"\n    def __init__(self, files, mode):\n        super().__init__()\n        # \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438\n        self.files = sorted(files)\n        # \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b\n        self.mode = mode\n\n        if self.mode not in DATA_MODES:\n            print(f\"{self.mode} is not correct; correct modes: {DATA_MODES}\")\n            raise NameError\n\n        self.len_ = len(self.files)\n     \n        self.label_encoder = LabelEncoder()\n\n        if self.mode != 'test':\n            self.labels = [path.parent.name for path in self.files]\n            self.label_encoder.fit(self.labels)\n\n            with open('label_encoder.pkl', 'wb') as le_dump_file:\n                  pickle.dump(self.label_encoder, le_dump_file)\n                      \n    def __len__(self):\n        return self.len_\n      \n    def load_sample(self, file):\n        image = Image.open(file)\n        image.load()\n        return image\n  \n    def __getitem__(self, index):\n        # \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 \u0442\u0435\u043d\u0437\u043e\u0440\u044b PyTorch \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0445\u043e\u0434\u0430\n        transform = transforms.Compose([\n            transforms.ToTensor(),\n            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) \n        ])\n        x = self.load_sample(self.files[index])\n        x = self._prepare_sample(x)\n        x = np.array(x \/ 255, dtype='float32')\n        x = transform(x)\n        if self.mode == 'test':\n            return x\n        else:\n            label = self.labels[index]\n            label_id = self.label_encoder.transform([label])\n            y = label_id.item()\n            return x, y\n        \n    def _prepare_sample(self, image):\n        image = image.resize((RESCALE_SIZE, RESCALE_SIZE))\n        return np.array(image)","6efee199":"def imshow(inp, title=None, plt_ax=plt, default=False):\n    \"\"\"Imshow \u0434\u043b\u044f \u0442\u0435\u043d\u0437\u043e\u0440\u043e\u0432\"\"\"\n    inp = inp.numpy().transpose((1, 2, 0))\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    inp = std * inp + mean\n    inp = np.clip(inp, 0, 1)\n    plt_ax.imshow(inp)\n    if title is not None:\n        plt_ax.set_title(title)\n    plt_ax.grid(False)","530cfc7c":"TRAIN_DIR = Path('..\/input\/journey-springfield\/train')\nTEST_DIR = Path('..\/input\/journey-springfield\/testset')\ntrain_val_files = sorted(list(TRAIN_DIR.rglob('*.jpg')))\ntest_files = sorted(list(TEST_DIR.rglob('*.jpg')))","e504b4c1":"from sklearn.model_selection import train_test_split\n\ntrain_val_labels = [path.parent.name for path in train_val_files]\ntrain_files, val_files = train_test_split(train_val_files, test_size=0.25, \\\n                                          stratify=train_val_labels)","2a9bcb45":"val_dataset = SimpsonsDataset(val_files, mode='val')","05c504b0":"fig, ax = plt.subplots(nrows=3, ncols=3,figsize=(8, 8), \\\n                        sharey=True, sharex=True)\nfor fig_x in ax.flatten():\n    random_characters = int(np.random.uniform(0,1000))\n    im_val, label = val_dataset[random_characters]\n    img_label = \" \".join(map(lambda x: x.capitalize(),\\\n                val_dataset.label_encoder.inverse_transform([label])[0].split('_')))\n    imshow(im_val.data.cpu(), \\\n          title=img_label,plt_ax=fig_x)","0a93fe3d":"from torchvision import models\nmy_model = models.vgg16_bn(pretrained=True).to(DEVICE)","bba96a68":"def fit_epoch(model, train_loader, criterion, optimizer):\n    running_loss = 0.0\n    running_corrects = 0\n    processed_data = 0\n  \n    for inputs, labels in train_loader:\n        inputs = inputs.to(DEVICE)\n        labels = labels.to(DEVICE)\n        optimizer.zero_grad()\n\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        preds = torch.argmax(outputs, 1)\n        running_loss += loss.item() * inputs.size(0)\n        running_corrects += torch.sum(preds == labels.data)\n        processed_data += inputs.size(0)\n              \n    train_loss = running_loss \/ processed_data\n    train_acc = running_corrects.cpu().numpy() \/ processed_data\n    return train_loss, train_acc","609d1472":"def eval_epoch(model, val_loader, criterion):\n    model.eval()\n    running_loss = 0.0\n    running_corrects = 0\n    processed_size = 0\n\n    for inputs, labels in val_loader:\n        inputs = inputs.to(DEVICE)\n        labels = labels.to(DEVICE)\n\n        with torch.set_grad_enabled(False):\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            preds = torch.argmax(outputs, 1)\n\n        running_loss += loss.item() * inputs.size(0)\n        running_corrects += torch.sum(preds == labels.data)\n        processed_size += inputs.size(0)\n    val_loss = running_loss \/ processed_size\n    val_acc = running_corrects.double() \/ processed_size\n    return val_loss, val_acc","467dfc1e":"def train(train_files, val_files, model, epochs, batch_size):\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n\n    history = []\n    log_template = \"\\nEpoch {ep:03d} train_loss: {t_loss:0.4f} \\\n    val_loss {v_loss:0.4f} train_acc {t_acc:0.4f} val_acc {v_acc:0.4f}\"\n\n    with tqdm(desc=\"epoch\", total=epochs) as pbar_outer:\n        opt = torch.optim.Adam(model.parameters())\n        criterion = nn.CrossEntropyLoss()\n\n        for epoch in range(epochs):\n            train_loss, train_acc = fit_epoch(model, train_loader, criterion, opt)\n            print(\"loss\", train_loss)\n            \n            val_loss, val_acc = eval_epoch(model, val_loader, criterion)\n            history.append((train_loss, train_acc, val_loss, val_acc))\n            \n            pbar_outer.update(1)\n            tqdm.write(log_template.format(ep=epoch+1, t_loss=train_loss,\\\n                                           v_loss=val_loss, t_acc=train_acc, v_acc=val_acc))\n            \n    return history","711baa90":"def predict(model, test_loader):\n    with torch.no_grad():\n        logits = []\n    \n        for inputs in test_loader:\n            inputs = inputs.to(DEVICE)\n            model.eval()\n            outputs = model(inputs).cpu()\n            logits.append(outputs)\n            \n    probs = nn.functional.softmax(torch.cat(logits), dim=-1).numpy()\n    return probs","4e7ec823":"if val_dataset is None:\n    val_dataset = SimpsonsDataset(val_files, mode='val')\n    \ntrain_dataset = SimpsonsDataset(train_files, mode='train')","4a2cb83c":"#\u0417\u0430\u043c\u043e\u0440\u0430\u0436\u0438\u0432\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nfor param in my_model.parameters():\n    param.requires_grad = False\nn_classes = len(np.unique(train_val_labels))\nmy_model.classifier = nn.Linear(25088, n_classes)","fc0a5a0a":"my_model = my_model.cuda()","742dccc4":"history = train(train_dataset, val_dataset, model=my_model, epochs=5, batch_size=64)","503ebce7":"loss, acc, val_loss, val_acc = zip(*history)","94009ceb":"plt.figure(figsize=(15, 9))\nplt.plot(loss, label=\"train_loss\")\nplt.plot(val_loss, label=\"val_loss\")\nplt.legend(loc='best')\nplt.xlabel(\"epochs\")\nplt.ylabel(\"loss\")\nplt.show()","940cbfc9":"plt.figure(figsize=(15, 9))\nplt.plot(acc, label=\"train_acc\")\nplt.plot(val_acc, label=\"val_acc\")\nplt.legend(loc='best')\nplt.xlabel(\"epochs\")\nplt.ylabel(\"acc\")\nplt.show()","dcee18bf":"def predict_one_sample(model, inputs, device=DEVICE):\n    \"\"\"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435, \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438\"\"\"\n    with torch.no_grad():\n        inputs = inputs.to(device)\n        model.eval()\n        logit = model(inputs).cpu()\n        probs = torch.nn.functional.softmax(logit, dim=-1).numpy()\n    return probs","a4185a88":"random_characters = int(np.random.uniform(0,1000))\nex_img, true_label = val_dataset[random_characters]\nprobs_im = predict_one_sample(my_model, ex_img.unsqueeze(0))","290d5c9f":"idxs = list(map(int, np.random.uniform(0,1000, 20)))\nimgs = [val_dataset[id][0].unsqueeze(0) for id in idxs]\n\nprobs_ims = predict(my_model, imgs)","e720b9f1":"label_encoder = pickle.load(open(\"label_encoder.pkl\", 'rb'))","c7007d30":"y_pred = np.argmax(probs_ims,-1)\n\nactual_labels = [val_dataset[id][1] for id in idxs]\n\npreds_class = [label_encoder.classes_[i] for i in y_pred]","73649555":"from sklearn.metrics import f1_score\n\nf1_score(actual_labels, y_pred, average = 'micro')\n","9794e9c6":"import matplotlib.patches as patches\nfrom matplotlib.font_manager import FontProperties\n\nfig, ax = plt.subplots(nrows=3, ncols=3,figsize=(12, 12), \\\n                        sharey=True, sharex=True)\nfor fig_x in ax.flatten():\n    random_characters = int(np.random.uniform(0,1000))\n    im_val, label = val_dataset[random_characters]\n    img_label = \" \".join(map(lambda x: x.capitalize(),\\\n                val_dataset.label_encoder.inverse_transform([label])[0].split('_')))\n    \n    \n\n    imshow(im_val.data.cpu(), \\\n          title=img_label,plt_ax=fig_x)\n    \n    actual_text = \"Actual : {}\".format(img_label)\n            \n    fig_x.add_patch(patches.Rectangle((0, 53),86,35,color='white'))\n    font0 = FontProperties()\n    font = font0.copy()\n    font.set_family(\"fantasy\")\n    prob_pred = predict_one_sample(my_model, im_val.unsqueeze(0))\n    predicted_proba = np.max(prob_pred)*100\n    y_pred = np.argmax(prob_pred)\n    \n    predicted_label = label_encoder.classes_[y_pred]\n    predicted_label = predicted_label[:len(predicted_label)\/\/2] + '\\n' + predicted_label[len(predicted_label)\/\/2:]\n    predicted_text = \"{} : {:.0f}%\".format(predicted_label,predicted_proba)\n            \n    fig_x.text(1, 59, predicted_text , horizontalalignment='left', fontproperties=font,\n                    verticalalignment='top',fontsize=8, color='black',fontweight='bold')","70c4fed8":"test_dataset = SimpsonsDataset(test_files, mode=\"test\")\ntest_loader = DataLoader(test_dataset, shuffle=False, batch_size=64)\nprobs = predict(my_model, test_loader)\n\npreds = label_encoder.inverse_transform(np.argmax(probs, axis=1))\ntest_filenames = [path.name for path in test_dataset.files]","8a18838e":"import pandas as pd\nsubmission = pd.read_csv('\/kaggle\/input\/journey-springfield\/sample_submission.csv')\nsubmission = pd.DataFrame({'Id': test_filenames, 'Expected': preds}).sort_values('Id')\nsubmission.to_csv('.\/submission.csv', index=False)","a7b3d330":"### Submit \u043d\u0430 Kaggle","1a6834ac":"# \u041f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435 \u043f\u043e \u0421\u043f\u0440\u0438\u043d\u0433\u0444\u0438\u043b\u0434\u0443.\n\n\n\u0421\u0435\u0433\u043e\u0434\u043d\u044f \u0432\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442\u044c \u043f\u043e\u043c\u043e\u0447\u044c \u0442\u0435\u043b\u0435\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 FOX  \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0438\u0445 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430. \u041a\u0430\u043a \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0441\u0435\u0440\u0438\u0430\u043b \u0421\u0438\u043c\u0441\u043e\u043d\u044b \u0438\u0434\u0435\u0442 \u043d\u0430 \u0442\u0435\u043b\u0435\u044d\u043a\u0440\u0430\u043d\u0430\u0445 \u0431\u043e\u043b\u0435\u0435 25 \u043b\u0435\u0442 \u0438 \u0437\u0430 \u044d\u0442\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043a\u043e\u043f\u0438\u043b\u043e\u0441\u044c \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0435\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430. \u041f\u0435\u0440\u0441\u043e\u043e\u043d\u0430\u0436\u0438 \u043c\u0435\u043d\u044f\u043b\u0438\u0441\u044c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c\u0438   \u0438 \u0413\u043e\u043c\u0435\u0440 2018 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 \u0413\u043e\u043c\u0435\u0440\u0430 1989. \u041d\u0430\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0421\u043f\u0440\u0438\u043d\u0433\u0444\u0438\u043b\u0434\u0435. \u0414\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\n\n ![alt text](https:\/\/vignette.wikia.nocookie.net\/simpsons\/images\/5\/5a\/Spider_fat_piglet.png\/revision\/latest\/scale-to-width-down\/640?cb=20111118140828)\n\n","a84f6a81":"**\u041c\u043e\u044f \u043c\u043e\u0434\u0435\u043b\u044c**","6a2abddc":"![alt text](https:\/\/www.indiewire.com\/wp-content\/uploads\/2014\/08\/the-simpsons.jpg)","fe3e65f4":"### \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","8eacc698":"**\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435**"}}