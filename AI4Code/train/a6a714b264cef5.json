{"cell_type":{"01bfbf60":"code","f6687f7b":"code","40fb67d6":"code","08a81eea":"code","66659230":"code","2562dc2a":"code","a5c49de9":"code","6d2b0a73":"code","6374314f":"code","0e313232":"code","d0f8f990":"code","2decc8c1":"code","18d18b7d":"code","dd3f14e6":"code","29021c00":"code","58794793":"code","cfa232d4":"code","d037f2f0":"code","1b86fe1d":"code","0a157bc4":"code","b387b2c8":"code","bb5e5c99":"code","ec94476a":"code","ba50fe0c":"code","ee477dc9":"markdown","18ee893f":"markdown","334c85fd":"markdown","cd24d8db":"markdown","597538f9":"markdown","63d503c4":"markdown","918959e3":"markdown","c570ba06":"markdown","26273d41":"markdown","a625aca9":"markdown","91b8a1f9":"markdown","521c7bbe":"markdown","59cb4436":"markdown","a42dca4e":"markdown","7d2395e0":"markdown","ad85f5fd":"markdown","424de274":"markdown","5c7a467f":"markdown","c69e4497":"markdown","a20d4c05":"markdown","2798cb2d":"markdown","5be7156b":"markdown"},"source":{"01bfbf60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6687f7b":"# For Kaggle: Do not forget to TURN ON INTERNET in kaggle SETITTINGs (right panel)\n!python -m pip install snap-stanford","40fb67d6":"import snap","08a81eea":"# Based on: https:\/\/snap.stanford.edu\/snappy\/doc\/tutorial\/tutorial.html\nGsmall = snap.TNGraph.New() # Create Empty ORIENTED graph\nGsmall.AddNode(1) # Add nodes \nGsmall.AddNode(2)\nGsmall.AddNode(3)\n# (1, 2), (2, 1), (1, 3), (1, 1)}.\nGsmall.AddEdge(1,2)\nGsmall.AddEdge(2,1)\nGsmall.AddEdge(1,3)\nGsmall.AddEdge(1,1)\n\nfor NI in Gsmall.Nodes():\n  print(\"node: %d, out-degree %d, in-degree %d\" % ( NI.GetId(), NI.GetOutDeg(), NI.GetInDeg()))\n\nG = Gsmall\nprint('Nodes count', G.GetNodes())\nprint('Edges count', G.GetEdges() )\nCount = snap.CntSelfEdges(G)\nprint(\"Directed Graph: Count of self edges is %d\" % Count) # https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/CntSelfEdges.html\nCount = snap.CntUniqDirEdges(G)\nprint(\"Directed Graph: Count of unique directed edges is %d\" % Count) # https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/CntUniqDirEdges.html\nCount = snap.CntUniqUndirEdges(G)\nprint(\"Directed Graph: Count of unique undirected edges is %d\" % Count) # https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/CntUniqUndirEdges.html\n\nsnap.DrawGViz(Gsmall, snap.gvlDot, \"Gsmall_grid5x3.png\", \"Grid 5x3\") # Save image to png\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimg = mpimg.imread('Gsmall_grid5x3.png')\nplt.imshow(img)\nplt.show()\n","66659230":"\nfilepath = \"\/kaggle\/input\/ml-in-graphs-hw0\/wiki-Vote.txt\"\nimport os\nprint('File exists: ',  os.path.isfile(filepath  )  )\n\nG1 = snap.LoadEdgeList(snap.PNGraph,filepath,0,1)\n    # Load graph presented by edge list, i.e. pairs of number edge-source\/edge-destination\n    # Help: https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/LoadEdgeList.html\n    # snap.PNGraph - means ORIENTED graph, other options: #PUNGraph, an undirected graph;   #PNEANet, a directed network;\n    # 0,1, - means taking data from the columns 0 and 1","2562dc2a":"G1.GetNodes()","a5c49de9":"# Implementation 1:\nresult = 0\nfor EI in G1.Edges():\n    if EI.GetSrcNId()==EI.GetDstNId():\n        print (\"(%d, %d)\" % (EI.GetSrcNId(), EI.GetDstNId()))\n        result+=1\nprint(result)\n\n# Implementation 2:\nCount = snap.CntSelfEdges(G1)\nprint(\"Directed Graph: Count of self edges is %d\" % Count) # https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/CntSelfEdges.html\n\n\n","6d2b0a73":"# Implementation 1\nresult = 0\nfor EI in G1.Edges():\n    if EI.GetSrcNId()!=EI.GetDstNId():\n        result+=1\nprint(result)\n\n# Implementation 2\nCount = snap.CntUniqDirEdges(G1)\nprint(\"Directed Graph: Count of unique directed edges is %d\" % Count) # https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/CntUniqDirEdges.html\n\n","6374314f":"# Implementation \nCount = snap.CntUniqUndirEdges(G1)\nprint(\"Directed Graph: Count of unique undirected edges is %d\" % Count) # https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/CntUniqUndirEdges.html\n","0e313232":"# Implementation 1\n\nprint(snap.CntUniqDirEdges(G1) - snap.CntUniqUndirEdges(G1))\n\n\n# Implementation 2 - INCORRECT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1\n\n# Beware that function GetEdgesInOut which is described as giving \"Returns the number of reciprocal edges\"\n# cannot be used here\n\n# Create vector of nodes IDs - should be more simple way ( !? )\nNodes = snap.TIntV()\nfor NI in G1.Nodes():\n  Nodes.Add(NI.GetId() )\nresults = snap.GetEdgesInOut(G1, Nodes) # https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/GetEdgesInOut.html\nprint(\"Incorrect : %s\" % (results[0]))  \n","d0f8f990":"# Implementation 1\nresult = 0\nfor node in G1.Nodes():\n    out_set = set()\n    for edge in node.GetOutEdges():\n        out_set.add(edge)\n    if len(out_set)==0:\n        result+=1\nprint(result)\n\n# Implementation 2\nCount = snap.CntOutDegNodes(G1, 0)\nprint(\"Directed Graph: Count of nodes with out-degree 0 is %d\" % Count)","2decc8c1":"# Implementation 1\nresult = 0\nfor node in G1.Nodes():\n    in_set = set()\n    for edge in node.GetInEdges():\n        in_set.add(edge)\n    if len(in_set)==0:\n        result+=1\nprint(result)\n\n# Implementation 2\nCount = snap.CntInDegNodes(G1, 0)\nprint(\"Directed Graph: Count of nodes with in-degree 0 is %d\" % Count)\n\n","18d18b7d":"# Implementation 1\nresult = 0\nfor node in G1.Nodes():\n    out_set = set()\n    for edge in node.GetOutEdges():\n        out_set.add(edge)\n    if len(out_set)>10:\n        result+=1\nprint(result)\n\n# Implementation 2\nresult_in_degree = snap.TIntV() # Prepare vector where IN-degrees will be stored\nresult_out_degree = snap.TIntV() # Prepare vector where OUT-degrees will be stored\n\nsnap.GetDegSeqV(G1, result_in_degree, result_out_degree) # Get vectors with all degrees (for ALL nodes at once)\n# https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/GetDegSeqV.html\n\nprint('Number of nodes with OUT-degree greater 10:',  (np.array(result_out_degree) > 10).sum()  )\n\n\n","dd3f14e6":"# Implementation 1\n\nresult = 0\nfor node in G1.Nodes():\n    in_set = set()\n    for edge in node.GetInEdges():\n        in_set.add(edge)\n    if len(in_set)<10:\n        result+=1\nprint(result)\n\n# Implementation 2\nresult_in_degree = snap.TIntV() # Prepare vector where IN-degrees will be stored\nresult_out_degree = snap.TIntV() # Prepare vector where OUT-degrees will be stored\n\nsnap.GetDegSeqV(G1, result_in_degree, result_out_degree) # Get vectors with all degrees (for ALL nodes at once)\n# https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/GetDegSeqV.html\n\nprint('Number of nodes with IN-degree greater 10:', (np.array(result_in_degree) < 10).sum()  )\n","29021c00":"# Implementation 1\n\nresult = []\nfor node in G1.Nodes():\n    out_set = set()\n    for edge in node.GetOutEdges():\n        out_set.add(edge)\n    result.append(len(out_set))\ndf = pd.DataFrame(result).groupby(0).size()\ndf = df[1:]\nx = np.log(df.index)\ny = np.log(df.values)\nimport matplotlib.pyplot as plt\nplt.bar(x, y)\nplt.show()\nfrom scipy.stats import linregress\nlinregress(x, y)\n\n","58794793":"# Implementation 2 \nlabel = 'OUT degrees'\nvec_degrees = result_out_degree\nmx = np.max( vec_degrees )\nbins = np.arange(1,mx) # Avoid zero - since it is outlier\nh = np.histogram( vec_degrees , bins = bins)# [1,2,3,4,5,6,7,9,10,11,12,13,14,15] )\n#plt.loglog(h[1][:-1], h[0],'*-', label = label, linewidth=4)\n#plt.legend()\n#plt.show()\nvec_degrees = result_out_degree\nmx = np.max( vec_degrees )\nbins = np.arange(1,mx) # Avoid zero - since it is outlier\nh = np.histogram( vec_degrees , bins = bins)# [1,2,3,4,5,6,7,9,10,11,12,13,14,15] )\nm = h[0] > 0   # Need to avoid zeros, before taking LOG\nx = np.log10( h[1][:-1][m] ) # Bins\ny = np.log10( h[0][m] ) # Counts \n\ncoefs_polyfit = np.polyfit(x, y, 1)\nvec_line_intepolation_result = np.poly1d(coefs_polyfit)(x)\nprint( 'coefficients of line interpolation: ', coefs_polyfit )\nplt.style.use('ggplot') # will create nicer plots automatically - grid, etc...\nfig = plt.figure(figsize= (10,4) )\nplt.loglog(h[1][:-1], h[0],'*-', label = label, linewidth=4)\nplt.loglog(np.power(10,x), np.power(10, vec_line_intepolation_result ) ,  label = label+' Approx', linewidth=4)\nplt.title('LogLog plot')\nplt.xlabel('degree')\nplt.ylabel('Node count')\nplt.legend()\nplt.show()\n","cfa232d4":"G2 = snap.LoadEdgeList(snap.PNGraph,\"\/kaggle\/input\/ml-in-graphs-hw0\/stackoverflow-Java.txt\",0,1)\nprint('Nodes count', G2.GetNodes())\nprint('Edges count', G2.GetEdges() )","d037f2f0":"# Weakly connected component for DIRECTED graph - connected component made which is connected by edges ignoring their direction \n# https:\/\/mathworld.wolfram.com\/WeaklyConnectedComponent.html\n\n# Strongly connected component - any two nodes can be connected by path RESPECTING direction\n#https:\/\/en.wikipedia.org\/wiki\/Strongly_connected_component\n\nComponents = snap.TCnComV()\nsnap.GetWccs(G2, Components)\nprint( len(Components) )\n","1b86fe1d":"MxWcc = snap.GetMxWcc(G2)\nMxWcc.GetEdges(),MxWcc.GetNodes()","0a157bc4":"result = []\nPRankH = snap.TIntFltH()\nsnap.GetPageRank(G2, PRankH) # https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/GetPageRank.html\nfor item in PRankH: # Is there a way without loop ? \n    result.append([item, PRankH[item]])\nresult.sort(key= lambda x: x[1],reverse=True)\nprint('Top 3 nodes: ', [x[0] for x in result[:3]] )\nprint('Their Page ranks: ', [x[1] for x in result[:3]] )\n","b387b2c8":"NIdHubH = snap.TIntFltH()\nNIdAuthH = snap.TIntFltH()\nsnap.GetHits(G2, NIdHubH, NIdAuthH) # https:\/\/snap.stanford.edu\/snappy\/doc\/reference\/GetHits.html\nresult = []\nfor item in NIdHubH:\n    result.append([item, NIdHubH[item]])\n    \nresult.sort(key= lambda x: x[1],reverse=True)\nprint('Top 3 HUB nodes: ', [x[0] for x in result[:3]] )\nprint('Their HITS ranks: ', [x[1] for x in result[:3]] )\n","bb5e5c99":"result = []\nfor item in NIdAuthH:\n    result.append([item, NIdAuthH[item]])\n    \nresult.sort(key= lambda x: x[1],reverse=True)\nprint('Top 3 AUTHORITY nodes: ', [x[0] for x in result[:3]] )\nprint('Their HITS ranks: ', [x[1] for x in result[:3]] )\n","ec94476a":"G = snap.GenGrid(snap.PUNGraph, 5, 3) # Create Test Graph \nsnap.DrawGViz(G, snap.gvlDot, \"grid5x3.png\", \"Grid 5x3\") # Save image to png\nimport os\nos.listdir() # Check file was saved ","ba50fe0c":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimg = mpimg.imread('grid5x3.png')\nplt.imshow(img)\nplt.show()","ee477dc9":"# Example: create toy graph ","18ee893f":"## (18 points) Plot the distribution of out-degrees of nodes in the network on a log-log scale. Each data point is a pair (x, y) where x is a positive integer and y is the number of nodes in the network with out-degree equal to x. Restrict the range of x between the minimum and maximum out-degrees. You may filter out data points with a 0 entry. For the log-log scale, use base 10 for both x and y axes.\n\n## (15 points) Compute and plot the least-square regression line for the out-degree distribution in the log-log scale plot. Note we want to find coefficients a and b such that the function log 10 y = a \u00b7 log 10 x + b, equivalently, y = 10 b \u00b7 x a , best fits the out-degree distribution. What are the coefficients a and b? For this part, you might want to use the method called polyfit in NumPy with deg parameter equal to 1.\n","334c85fd":"## The number of weakly connected components in the network. This value can be calculated in Snap.py via function GetWccs.","cd24d8db":"## The number of reciprocated edges in the network, i.e., the number of unique unordered pairs of nodes (a, b), a 6 = b, for which (a, b) \u2208 E and (b, a) \u2208 E. (G small has 1 reciprocated edge.)","597538f9":"# Load wiki-Vote data","63d503c4":"## The number of directed edges in the network, i.e., the number of ordered pairs (a, b) \u2208 E for which a 6 = b. (G small has 3 directed edges.)","918959e3":"# PLOT graph exampe ","c570ba06":"## The number of undirected edges in the network, i.e., the number of unique unordered pairs (a, b), a 6 = b, for which (a, b) \u2208 E or (b, a) \u2208 E (or both). If both (a, b) and (b, a) are edges, this counts a single undirected edge. (G small has 2 undirected edges.)\n","26273d41":"## The number of nodes in the network. (G small has 3 nodes.)","a625aca9":"## The number of nodes with fewer than 10 incoming edges (in-degree < 10).","91b8a1f9":"# Analyzing the Wikipedia voters network [27 points]\nDownload the Wikipedia voting network wiki-Vote.txt.gz: http:\/\/snap.stanford.edu\/data\/wiki-Vote.html.\nUsing one of the network analysis tools above, load the Wikipedia voting network. Note that\nWikipedia is a directed network. Formally, we consider the Wikipedia network as a directed\ngraph G = (V, E), with node set V and edge set E \u2282 V \u00d7 V where (edges are ordered pairs\nof nodes). An edge (a, b) \u2208 E means that user a voted on user b.  \nTo make our questions clearer, we will use the following small graph as a running example:  \nG small = (V small , E small ), where V small = {1, 2, 3} and  \nE small = {(1, 2), (2, 1), (1, 3), (1, 1)}.  \nCompute and print out the following statistics for the wiki-Vote network:\n","521c7bbe":"# 3 Finding Experts on the Java Programming Language on StackOverflow [40 points]\nDownload the StackOverflow network stackoverflow-Java.txt.gz: http:\/\/snap.stanford.edu\/class\/cs224w-data\/hw0\/stackoverflow-Java.txt.gz. An edge (a, b) in the network means that person a endorsed an answer from person b on a Java-related question. Using one of the network analysis tools above, load the StackOverflow network. Note that StackOverflow is a directed network. Compute and print out the following statistics for the stackoverflow-Java network:\n\n","59cb4436":"## The number of edges and the number of nodes in the largest weakly connected component. The largest weakly connected component is calculated in Snap.py with function GetMxWcc.","a42dca4e":"You can find more details about this exercise on the Snap.py tutorial page: http:\/\/snap.stanford.edu\/proj\/snap-icwsm\/. As an extra exercise, extend the tutorial to find experts in other programming languages or topics.","7d2395e0":"We will see almost a line - which shows that count of nodes of degree \"d\" behaves like c = a* (degree) ^(some power) . The so-called \"free-scale\" network https:\/\/en.wikipedia.org\/wiki\/Scale-free_network Many natural networks behave like that. It was certain surpise at late 90-ies, since it is different \nfrom the most standard random graph model - Erdos-Renyi model appeared in 60-ies https:\/\/en.wikipedia.org\/wiki\/Erd%C5%91s%E2%80%93R%C3%A9nyi_model","ad85f5fd":"## The number of nodes with more than 10 outgoing edges (out-degree > 10).","424de274":"\n# 2 Further Analyzing the Wikipedia voters network [33 points]\nFor this problem, we use the Wikipedia voters network. If you are using Python, you might\nwant to use NumPy, SciPy, and\/or Matplotlib libraries.\n\n","5c7a467f":"## IDs of the top 3 hubs and top 3 authorities in the network by HITS scores. HITS scores are calculated in Snap.py with function GetHits.","c69e4497":"## IDs of the top 3 most central nodes in the network by PagePank scores. PageRank scores are calculated in Snap.py with function GetPageRank.","a20d4c05":"## The number of nodes of zero in-degree. (G small has 0 nodes with zero in-degree.)","2798cb2d":"## The number of nodes of zero out-degree. (G small has 1 node with zero out-degree.)","5be7156b":"## The number of nodes with a self-edge (self-loop), i.e., the number of nodes a \u2208 V where (a, a) \u2208 E. (G small has 1 self-edge.)"}}