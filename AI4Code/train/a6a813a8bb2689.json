{"cell_type":{"ac82f7f1":"code","b2423c17":"code","63e8dece":"code","2e87641f":"code","fd700ffe":"code","ee88c9a4":"code","bb923f6f":"code","bafe8962":"code","55b41cc7":"code","75b7245f":"code","522e9d1b":"code","42391ecd":"code","961ce78a":"code","b058213b":"code","fa8bc5b5":"code","03173b0b":"code","f7ccddb8":"code","7e91ef30":"code","c42cb4fd":"code","63f8df69":"code","acab924a":"code","321555a3":"code","3db13b1e":"code","9c24dbca":"code","d8c22c9e":"code","03f4589b":"code","a3d4dc29":"code","a955ae4d":"code","bff66796":"code","f231b3e1":"code","6b746f89":"code","47c162cf":"code","263351ad":"code","de3a5fab":"code","73c72993":"code","7ada397b":"code","5ab6ef5b":"code","8d75a8fb":"code","fbbe4c67":"code","463115dd":"code","ec84962f":"code","ad70e1b2":"code","d5478d0a":"code","a3ae3a87":"code","008e97ff":"code","ae8775a1":"code","1843cac0":"code","6425b088":"code","73dff561":"code","8c0b6470":"code","139c3118":"code","5eb9c7a4":"code","9cbdd54e":"code","85e04fa1":"code","3284cdda":"code","fc9a04e5":"code","541a1a79":"code","ab741494":"markdown","967f7302":"markdown","6fe396a4":"markdown","b7f4f9eb":"markdown","dad48d13":"markdown","33f4d2ca":"markdown","c9215aa1":"markdown","5029567c":"markdown","1d918794":"markdown","1436aa87":"markdown","694f528b":"markdown","ee0aa112":"markdown","754d2359":"markdown","6455f8a9":"markdown","97616adf":"markdown","d93f8b4a":"markdown","155e6706":"markdown","cc393aa1":"markdown","f39d5bc2":"markdown","483e094e":"markdown","37d2998e":"markdown","d0c4ee3e":"markdown","0f2553da":"markdown","93715012":"markdown","250e9f5b":"markdown","aac71be7":"markdown","9624f26f":"markdown","c17a55ec":"markdown","42ad83e8":"markdown"},"source":{"ac82f7f1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","b2423c17":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","63e8dece":"df.info()","2e87641f":"df","fd700ffe":"test.info()","ee88c9a4":"test","bb923f6f":"gender","bafe8962":"msno.bar(df, figsize=(12,4));","55b41cc7":"def value_counts(column, plot):\n    \n    print(f\"\\nValue Counts:\\n{df[column].value_counts()}\")\n    print(f\"\\nPercentage:\\n{df[column].value_counts()\/df[column].count()*100}\")    \n    \n    if plot == \"pie\":\n        print(f\"\\nPie Plot:\\n{df[column].value_counts().plot.pie()}\")\n    elif plot == \"bar\":\n        print(f\"\\nBar Plot:\\n{df[column].value_counts().plot.bar()}\")\n    elif plot == \"barh\":\n        print(f\"\\nBarh Plot:\\n{df[column].value_counts().plot.barh()}\")","75b7245f":"# Value counts\ndf.Survived.value_counts()","522e9d1b":"# Percentage\ndf.Survived.value_counts()\/df.Survived.count()*100","42391ecd":"# Barh plot\ndf.Survived.value_counts().plot.barh();","961ce78a":"value_counts(\"Pclass\", \"bar\")","b058213b":"value_counts(\"Sex\", \"pie\")","fa8bc5b5":"df[[\"Age\"]].describe()","03173b0b":"plt.figure(figsize=(10,6))\nsns.histplot(df.Age);","f7ccddb8":"age = pd.cut(df.Age, [0,18,25,35,45,80])","7e91ef30":"age.value_counts()","c42cb4fd":"age.value_counts().plot.barh();","63f8df69":"value_counts(\"SibSp\", \"bar\")","acab924a":"value_counts(\"Parch\", \"bar\")","321555a3":"df[[\"Fare\"]].describe()","3db13b1e":"plt.figure(figsize=(8,4))\nsns.histplot(df.Fare);","9c24dbca":"fare = pd.cut(df.Fare, [0,8,15,31,513])","d8c22c9e":"fare.value_counts()","03f4589b":"fare.value_counts().plot.barh();","a3d4dc29":"value_counts(\"Embarked\", \"pie\")","a955ae4d":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr(), annot=True);","bff66796":"sns.catplot(x=\"Pclass\", y=\"Sex\", kind=\"violin\", col=\"Survived\", data=df);","f231b3e1":"sns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"point\", col=\"Survived\", data=df);","6b746f89":"sns.catplot(x=\"Pclass\", y=\"Age\", kind=\"boxen\", col=\"Survived\", data=df);","47c162cf":"sns.catplot(x=\"Pclass\", y=\"Fare\", kind=\"bar\", col=\"Survived\", data=df);","263351ad":"sns.catplot(x=\"SibSp\", y=\"Age\", kind=\"strip\", col=\"Survived\", data=df);","de3a5fab":"sns.catplot(x=\"Parch\", y=\"Fare\", kind=\"bar\", col=\"Survived\", data=df);","73c72993":"df.head()","7ada397b":"df.drop([\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"], axis=1, inplace=True)","5ab6ef5b":"df.info()","8d75a8fb":"df.Age.fillna(df.Age.mean(), inplace=True)","fbbe4c67":"c = 0\nfor i in df.Embarked:\n    if pd.isna(i):\n        print(c)\n    c+=1","463115dd":"df.at[61, \"Embarked\"] = df.Embarked.mode().values[0]\ndf.at[829, \"Embarked\"] = df.Embarked.mode().values[0]","ec84962f":"df.info()","ad70e1b2":"df = pd.get_dummies(df)\ndf.head()","d5478d0a":"df.drop([\"Sex_male\", \"Embarked_C\"], axis=1, inplace=True)\ndf.head()","a3ae3a87":"X_train = df.drop(\"Survived\", axis=1)\ny_train = df[[\"Survived\"]]","008e97ff":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_train","ae8775a1":"y_train = np.ravel(y_train)","1843cac0":"def preprocess(data):\n    \n    print(data.head())\n    print(\"\\n\\n\")\n    \n    data.drop([\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"], axis=1, inplace=True)\n    data.Age.fillna(df.Age.mean(), inplace=True)\n    data.Fare.fillna(df.Fare.mean(), inplace=True)\n    data = pd.get_dummies(data)\n    data.drop([\"Sex_male\", \"Embarked_C\"], axis=1, inplace=True)\n    scaler = StandardScaler()\n    data = scaler.fit_transform(data)\n    \n    print(data)\n    return data","6425b088":"X_test = preprocess(test)","73dff561":"algorithms = [LogisticRegression, RidgeClassifier, SVC, LinearSVC, RandomForestClassifier, KNeighborsClassifier,\n              GaussianNB, Perceptron, SGDClassifier, DecisionTreeClassifier]","8c0b6470":"def autoML(algorithm): \n\n    model = algorithm().fit(X_train, y_train)\n    acc = model.score(X_train, y_train)\n    model_name = algorithm.__name__\n    \n    print(f\"Model Name: {model_name}\\nTrain Accuracy: {acc}\\n\\n\")","139c3118":"for alg in algorithms:\n    \n    autoML(alg)","5eb9c7a4":"model = RandomForestClassifier()","9cbdd54e":"parameters = {'max_depth': [None, 10, 20, 50],\n             'max_features': ['auto', 'sqrt', 'log2'],\n             'min_samples_leaf': [1, 2, 5],\n             'min_samples_split': [1, 2, 5],\n             'n_estimators': [50, 100, 200, 400]}","85e04fa1":"# cv_model = GridSearchCV(model, parameters, cv=5, verbose=2, n_jobs=-1).fit(X_train, y_train)","3284cdda":"# cv_model.best_params_","fc9a04e5":"tuned_model = RandomForestClassifier(max_depth=50, \n                                     max_features=\"log2\",\n                                     min_samples_leaf=1,\n                                     min_samples_split=5,\n                                     n_estimators=100).fit(X_train, y_train)","541a1a79":"predictions = tuned_model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': gender.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)","ab741494":"### Filling The Missing Data","967f7302":"### Data Visualization","6fe396a4":"### Fare","b7f4f9eb":"### Helper Notebooks\n* [Notebook 1](https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)\n* [Notebook 2](https:\/\/www.kaggle.com\/meisamraz\/titanic-classification-top-5#Titanic-Project-Classification)\n","dad48d13":"### Age:\n*Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5*","33f4d2ca":"### Import Libraries","c9215aa1":"*We can group the fare like age*","5029567c":"### Scaling","1d918794":"## 4.Modeling<a id=\"model\"><\/a>","1436aa87":"### Sex:\n* Male\n* Female","694f528b":"### Tuning","ee0aa112":"### Embarked:\n*Port of Embarkation*\n* C = Cherbourg\n* Q = Queenstown\n* S = Southampton","754d2359":"### Sources\n* [Scikit-learn](https:\/\/scikit-learn.org\/stable\/index.html)\n* [Pandas](https:\/\/pandas.pydata.org\/)\n* [Seaborn](https:\/\/seaborn.pydata.org\/)","6455f8a9":"*After heatmap, we should look:*\n* Pclass - Survived\n* Fare - Survived\n* Age - Pclass\n* Fare - Pclass\n* SibSp - Age\n* Parch - SibSp\n* Fare - Parch","97616adf":"### Survived\n* 0: Dead\n* 1: Survived","d93f8b4a":"### SibSp: \n*The dataset defines family relations in this way...*\n* Sibling = brother, sister, stepbrother, stepsister\n* Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)","155e6706":"### Train Data","cc393aa1":"### Dropping Some Features","f39d5bc2":"*We can group the age for better understanding*","483e094e":"### Categorical Variables To Dummy Variables","37d2998e":"### Reading Data","d0c4ee3e":"### Test Data","0f2553da":"# Titanic - Machine Learning from Disaster","93715012":"*In dummy variables, we can drop a column for every features*","250e9f5b":"## 1.First Look<a id=\"first\"><\/a>","aac71be7":"### Pclass: A proxy for socio-economic status (SES)\n* 1st = Upper\n* 2nd = Middle\n* 3rd = Lower","9624f26f":"### Parch: \n*The dataset defines family relations in this way...*\n* Parent = mother, father\n* Child = daughter, son, stepdaughter, stepson (Some children travelled only with a nanny, therefore parch=0 for them)","c17a55ec":"## 2.Understanding The Data<a id=\"understand\"><\/a>","42ad83e8":"## 3.Preprocessing<a id=\"preprocess\"><\/a>"}}