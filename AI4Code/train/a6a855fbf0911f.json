{"cell_type":{"45ecbe5b":"code","01e9706b":"code","b41560d6":"code","56e57be8":"code","7daa0c60":"code","6f3bb187":"code","0bd16dd0":"code","c459d5be":"code","c6f6e1ef":"code","44b051ac":"code","aeb530ca":"code","c0c334a1":"code","cbc655e8":"code","262d3ab1":"code","26efad06":"code","e44a2dbd":"code","e6e5b7c4":"code","be46dac3":"code","05f34817":"code","0f668fa8":"code","857ed78d":"code","989ba67c":"code","914708f8":"code","2717adaf":"code","e5324ec8":"code","1886b1f6":"code","662cb55e":"code","27d55399":"code","5f1f5b6a":"code","81b259ff":"code","c3558e2e":"code","96c5d399":"code","96733f2e":"code","b5099f7f":"code","2f08324c":"code","1d4a3483":"code","cb2ff6d7":"code","e12569c5":"code","b2679b3b":"code","7bd3bb26":"code","03604c72":"code","7c0f7fb1":"code","75076679":"code","e42df2c4":"code","2532e120":"code","8b04bf4b":"code","97d0c107":"code","d9d5ab37":"code","6efbee9c":"code","4f30f7e9":"code","02b973ff":"code","37feeb53":"code","ae17dbfe":"code","9474e5c9":"code","ddd566ec":"code","a2b74a19":"code","76881d39":"code","3cfff7a0":"code","e4dad00b":"code","3a980cc1":"code","ed22cc96":"code","5c63c415":"code","70d0cba1":"code","124e9a94":"code","ee9c3183":"code","a0c92022":"markdown","0c8a5947":"markdown","dd36ede3":"markdown","1c4423b4":"markdown","3eb2b102":"markdown","f42165e7":"markdown","4a70955e":"markdown","7a9c1493":"markdown","c316faaa":"markdown","2ce4d964":"markdown","dac9f94a":"markdown","27084477":"markdown","42d04c43":"markdown","cb42cc65":"markdown"},"source":{"45ecbe5b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01e9706b":"### importing necessary lib. \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_validate,cross_val_predict\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\nfrom sklearn.metrics import accuracy_score\n\n\nnp.set_printoptions(precision = 2, suppress = True)","b41560d6":"### load datasets \ntrain_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\", index_col='PassengerId')\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\", index_col='PassengerId')","56e57be8":"train_df.head()","7daa0c60":"test_df.head()","6f3bb187":"train_df.shape, test_df.shape","0bd16dd0":"## find missing columns from \ntrain_df.columns[~train_df.columns.isin(test_df.columns)].to_list()","c459d5be":"### Created Dummy column for data preprocessing\ntest_df[\"Survived\"]=-999\ndf=train_df.append(test_df)","c6f6e1ef":"#df.reset_index(inplace=True)","44b051ac":"### Checking the null value count\ndf.isnull().sum()","aeb530ca":"### Embarked is categorical column and filling with Mode value. \ndf.Embarked.value_counts()","c0c334a1":"df.loc[df.Embarked.isnull()]","cbc655e8":"## filled with mode value\ndf.Embarked.fillna(df.Embarked.mode()[0], inplace=True)","262d3ab1":"## filled Age column null with median \ndf.loc[df.Age.isnull()]","26efad06":"#filling Null values to Age column\ndf.Age.fillna(df.Age.median(), inplace=True)","e44a2dbd":"df[df.Fare.isnull()]","e6e5b7c4":"df.Fare.mean()","be46dac3":"df.groupby(\"Sex\").mean()[\"Fare\"]","05f34817":"df.groupby(\"Sex\").mean()[\"Fare\"].plot(kind = \"bar\")","0f668fa8":"df.groupby([\"Sex\", \"Pclass\"]).mean()[\"Fare\"].unstack()","857ed78d":"ser = df.groupby([\"Sex\", \"Pclass\"])[\"Fare\"].transform('mean')\nser[:3]","989ba67c":"df.Fare=np.where(df.Fare.isnull(), ser, df.Fare)","914708f8":"### Cabin have more null values, column will not help for prediction. \n#removed  columns which is not useful for prediction. \ncolumns=[ \"Name\",\"Ticket\", \"Cabin\", 'Parch','SibSp']\ndf.drop(columns, axis=1, inplace=True)","2717adaf":"df.describe()","e5324ec8":"plt.figure(figsize=(5,5))\nsns.histplot(x=\"Age\", data=df, kde=True)\nplt.show()","1886b1f6":"plt.figure(figsize=(5,5))\nsns.boxplot(y=\"Age\", data=df)\nplt.show()","662cb55e":"q25, q75 = np.percentile(df.Age, 25), np.percentile(df.Age, 75)\niqr = q75-q25\niqr","27d55399":"bottom_threshold = q25 - 1.5*iqr\ntop_threshold = q75 + 1.5*iqr\ntop_threshold","5f1f5b6a":"df.loc[df.Age>top_threshold, \"Age\"]=top_threshold\ndf.loc[df.Age < bottom_threshold, \"Age\"] =bottom_threshold\n\n","81b259ff":"plt.figure(figsize=(5,5))\nsns.boxplot(y=\"Age\", data=df)\nplt.show()","c3558e2e":"plt.figure(figsize=(5,5))\nsns.histplot(x=\"Fare\", data=df, kde=True)\nplt.show()","96c5d399":"plt.figure(figsize=(5,5))\nsns.boxplot(y=\"Fare\", data=df)\nplt.show()","96733f2e":"q25, q75 = np.percentile(df.Fare, 25), np.percentile(df.Fare, 75)\niqr = q75-q25\niqr","b5099f7f":"top_threshold = q75 + 1.5*iqr\ntop_threshold","2f08324c":"df.loc[df.Fare>top_threshold, \"Fare\"]=top_threshold","1d4a3483":"# visualize counts\ndf.Pclass.value_counts().plot(kind='bar')","cb2ff6d7":"# use hist to create histogram\ndf.Age.plot(kind='hist', title='histogram for Age', color='c');\nplt.show()","e12569c5":"# use hist to create histogram\ndf.Fare.plot(kind='hist', title='histogram for Age', color='c');\nplt.show()","b2679b3b":"print('skewness for age : {0:.2f}'.format(df.Age.skew()))\nprint('skewness for fare : {0:.2f}'.format(df.Fare.skew()))","7bd3bb26":"# use scatter plot for bi-variate distribution\ndf.plot.scatter(x='Age', y='Fare', color='c', title='scatter plot : Age vs Fare', alpha=0.1);","03604c72":"# high variance in the prob of survival according to Sex\ndf[df.Survived.isin([0,1])].groupby(\"Sex\").Survived.mean().plot(kind = \"bar\")","7c0f7fb1":"#Not a great variance in prob of survival\ndf[df.Survived.isin([0,1])].groupby(\"Embarked\").Survived.mean().plot(kind = \"bar\")\n","75076679":"\ndf[df.Survived.isin([0,1])].groupby(\"Pclass\").Survived.mean().plot(kind = \"bar\")\n","e42df2c4":"pd.crosstab(df.Sex, df.Pclass).plot(kind='bar');","2532e120":"df=pd.get_dummies(df, drop_first=True)","8b04bf4b":"df.tail()","97d0c107":"df.loc[df.Survived != -999].to_csv(\"titanic_clean_train.csv\")\n\n#for test dataset\ncolumns = [column for column in df.columns if column != 'Survived']\ndf.loc[df.Survived == -999, columns].to_csv(\"titanic_clean_test.csv\")","d9d5ab37":"#load clean datasets. \ntitanic_clean_train=pd.read_csv(\"titanic_clean_train.csv\", index_col='PassengerId')\ntitanic_clean_test=pd.read_csv(\"titanic_clean_test.csv\", index_col='PassengerId')","6efbee9c":"X=titanic_clean_train.drop(\"Survived\", axis=1)\ny=titanic_clean_train[\"Survived\"]","4f30f7e9":"#splitting train  and test dateset\nx_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=42)","02b973ff":"x_train.shape,x_test.shape,y_train.shape,y_test.shape ","37feeb53":"### creating model \n\nmodel_params  = {\n    \"svm\" : {\n        \"model\":SVC(gamma=\"auto\"),\n        \"params\":{\n            'C' : [1,10,20],\n            'kernel':[\"rbf\"]\n        }\n    },\n    \n    \"decision_tree\":{\n        \"model\": DecisionTreeClassifier(),\n        \"params\":{\n            'criterion':[\"entropy\",\"gini\"],\n            \"max_depth\":[5,8,9]\n        }\n    },\n    \n    \"random_forest\":{\n        \"model\": RandomForestClassifier(),\n        \"params\":{\n            \"n_estimators\":[1,5,10,20],\n            \"max_depth\":[5,8,9]\n        }\n    },\n    \"naive_bayes\":{\n        \"model\": GaussianNB(),\n        \"params\":{}\n    },\n    \n    'logistic_regression' : {\n        'model' : LogisticRegression(solver='liblinear',multi_class = 'auto'),\n        'params': {\n            \"C\" : [1,5,10]\n        }\n    }\n    \n}","ae17dbfe":"score=[]\nfor model_name,mp in model_params.items():\n    clf = GridSearchCV(mp[\"model\"],mp[\"params\"],cv=8,return_train_score=False)\n    clf.fit(X,y)\n    score.append({\n        \"Model\" : model_name,\n        \"Best_Score\": clf.best_score_,\n        \"Best_Params\": clf.best_params_\n    })","9474e5c9":"pd.DataFrame(score)","ddd566ec":"model_RF=RandomForestClassifier(max_depth= 8,n_estimators= 10)\nmodel_RF.fit(x_train,y_train)","a2b74a19":"y_pred=model_RF.predict(x_test)","76881d39":"accuracy = accuracy_score(y_test,y_pred) *100\naccuracy ","3cfff7a0":"np.random.seed(42)\nscores=cross_validate(model_RF, X, y, cv=5, return_train_score=True)\nscores","e4dad00b":"scores[\"test_score\"].mean()","3a980cc1":"scores[\"test_score\"].std()","ed22cc96":"scores = cross_val_score(model_RF, titanic_clean_test, y, cv=6)","5c63c415":"y_pred=model_RF.predict(titanic_clean_test)","70d0cba1":"output = pd.DataFrame({'PassengerId': titanic_clean_test.index, 'Survived': y_pred})","124e9a94":"output.head()","ee9c3183":"output.to_csv('submission.csv', index=False)","a0c92022":"#### 1.Age Column","0c8a5947":"### 2. Fare column","dd36ede3":"## Modeling","1c4423b4":"## Removing  columns from Dataset","3eb2b102":"### Data Visualization and Handling outliers","f42165e7":"## Handling Null values","4a70955e":"### Final Submisssion on Clean Test Dataset","7a9c1493":"## Summary Statistics","c316faaa":"## Once Preprocessing is complete after that separating  train dataset and test dataset.","2ce4d964":"## Data Preprocessing ","dac9f94a":"----","27084477":"---","42d04c43":"## Visualization","cb42cc65":"#### Fare has missing values"}}