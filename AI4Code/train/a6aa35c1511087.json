{"cell_type":{"dc11e41f":"code","e2c34f89":"code","32893331":"code","b669d5be":"code","bb3763ef":"code","e22f4c18":"code","85670d3e":"code","465f4eea":"code","5f2e9d39":"code","b86139cf":"code","bb6c2607":"code","f564a872":"code","652114c6":"code","4993b641":"code","0b9b98f0":"code","13659def":"code","e4aff099":"code","c37fa4cb":"code","b2eeea6c":"code","8ad95c6f":"code","71f66847":"code","ae848384":"code","bb103f0d":"code","a92f22b8":"code","a10481b0":"code","b086bd5d":"code","6ae77f58":"code","68971949":"code","6cf8e57c":"code","7b201a80":"code","f1696cc6":"markdown","bce1e47a":"markdown","e8385467":"markdown","c8343bbf":"markdown","dd34ee90":"markdown","85d312b8":"markdown","bd0b100b":"markdown","71e469dd":"markdown","e6e717cc":"markdown","56ce82de":"markdown","9d151789":"markdown"},"source":{"dc11e41f":"import pandas as pd\nimport numpy as np\n#from catboost import CatBoostClassifier\n#from sklearn.model_selection import StratifiedKFold,KFold,GroupKFold\n#from sklearn.metrics import accuracy_score\n\n#Pipeline\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\n\n#For Missing Value and Feature Engineering\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import KBinsDiscretizer, OneHotEncoder, MinMaxScaler\n\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n\nimport time\n","e2c34f89":"train = pd.read_csv(\"..\/input\/DontGetKicked\/training.csv\")\ntest = pd.read_csv(\"..\/input\/DontGetKicked\/test.csv\")","32893331":"train.head()","b669d5be":"#insert code","bb3763ef":"# Date\n#PurchDate","e22f4c18":"train['mean_MMRAcquisitionAuctionAveragePrice_Make']=train.groupby(['Make'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntrain['mean_MMRAcquisitionAuctionAveragePrice_Model']=train.groupby(['Model'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntrain['mean_MMRAcquisitionAuctionAveragePrice_Trim']=train.groupby(['Trim'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntrain['mean_MMRAcquisitionAuctionAveragePrice_SubModel']=train.groupby(['SubModel'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntrain['mean_MMRAcquisitionAuctionAveragePrice_Color']=train.groupby(['Color'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntrain['mean_MMRAcquisitionAuctionAveragePrice_Transmission']=train.groupby(['Transmission'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')","85670d3e":"test['mean_MMRAcquisitionAuctionAveragePrice_Make']=test.groupby(['Make'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntest['mean_MMRAcquisitionAuctionAveragePrice_Model']=test.groupby(['Model'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntest['mean_MMRAcquisitionAuctionAveragePrice_Trim']=test.groupby(['Trim'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntest['mean_MMRAcquisitionAuctionAveragePrice_SubModel']=test.groupby(['SubModel'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntest['mean_MMRAcquisitionAuctionAveragePrice_Color']=test.groupby(['Color'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')\ntest['mean_MMRAcquisitionAuctionAveragePrice_Transmission']=test.groupby(['Transmission'])['MMRAcquisitionAuctionAveragePrice'].transform('mean')","465f4eea":"#create X and y datasets for splitting \nX = train.drop(['RefId', 'IsBadBuy'], axis=1)\ny = train['IsBadBuy']","5f2e9d39":"all_features = X.columns","b86139cf":"all_features = all_features.tolist()","bb6c2607":"numerical_features = [c for c, dtype in zip(X.columns, X.dtypes)\n                     if dtype.kind in ['i','f'] and c !='PassengerId']\ncategorical_features = [c for c, dtype in zip(X.columns, X.dtypes)\n                     if dtype.kind not in ['i','f']]","f564a872":"numerical_features","652114c6":"categorical_features","4993b641":"#import train_test_split library\nfrom sklearn.model_selection import train_test_split\n\n# create train test split\nX_train, X_test, y_train, y_test = train_test_split( X,  y, test_size=0.3, random_state=0)  ","0b9b98f0":"preprocessor = make_column_transformer(\n    \n    (make_pipeline(\n    SimpleImputer(strategy = 'median'),\n    MinMaxScaler()), numerical_features),\n    \n    (make_pipeline(\n    SimpleImputer(strategy = 'constant', fill_value = 'missing'),\n    OneHotEncoder(categories = 'auto', handle_unknown = 'ignore')), categorical_features),\n    \n)","13659def":"preprocessor_best = make_pipeline(preprocessor, SelectKBest(chi2, k = 50))","e4aff099":"RF_Model = make_pipeline(preprocessor_best, RandomForestClassifier(n_estimators = 100))","c37fa4cb":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1000, num = 50)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n#Maximum number of levels in tree\nmax_depth = [2,4,6,8]\n# Minimum number of samples required to split a node\n#min_samples_split = [2, 5]\n# Minimum number of samples required at each leaf node\n#min_samples_leaf = [1, 2]\n# Method of selecting samples for training each tree\n#bootstrap = [True, False]","b2eeea6c":"# Create the param grid\nparam_grid = {'randomforestclassifier__n_estimators': n_estimators,\n               'randomforestclassifier__max_features': max_features,\n               'randomforestclassifier__max_depth': max_depth\n               #'randomforestclassifier__min_samples_split': min_samples_split,\n               #'randomforestclassifier__min_samples_leaf': min_samples_leaf,\n               #'randomforestclassifier__bootstrap': bootstrap\n             }\nprint(param_grid)","8ad95c6f":"from sklearn.model_selection import RandomizedSearchCV\nrf_RandomGrid = RandomizedSearchCV(estimator = RF_Model, param_distributions = param_grid, cv = 3, verbose=1, n_jobs = -1)","71f66847":"rf_RandomGrid.fit(X_train, y_train)","ae848384":"rf_RandomGrid.best_estimator_","bb103f0d":"print(f'Train : {rf_RandomGrid.score(X_train, y_train):.3f}')\nprint(f'Test : {rf_RandomGrid.score(X_test, y_test):.3f}')","a92f22b8":"def gini(actual, pred):\n    assert (len(actual) == len(pred))\n    all = np.asarray(np.c_[actual, pred, np.arange(len(actual))], dtype=np.float)\n    all = all[np.lexsort((all[:, 2], -1 * all[:, 1]))]\n    totalLosses = all[:, 0].sum()\n    giniSum = all[:, 0].cumsum().sum() \/ totalLosses\n\n    giniSum -= (len(actual) + 1) \/ 2.\n    return giniSum \/ len(actual)\n\n\ndef gini_normalized(actual, pred):\n    return gini(actual, pred) \/ gini(actual, actual)","a10481b0":"actual_train = y_train\npred_train = rf_RandomGrid.predict(X_train)\nactual_test = y_test\npred_test = rf_RandomGrid.predict(X_test)","b086bd5d":"print(f'Gini Train : {gini(actual_train,pred_train):.3f}')\nprint(f'Gini Test : {gini(actual_test,pred_test):.3f}')","6ae77f58":"test_pred = rf_RandomGrid.predict_proba(test[X.columns])[:,1]","68971949":"AllSub = pd.DataFrame({ 'RefId': test['RefId'],\n                       'IsBadBuy' : test_pred\n    \n})","6cf8e57c":"AllSub['IsBadBuy'] = AllSub['IsBadBuy'].apply(lambda x: 1 if x > 0.09 else 0)","7b201a80":"AllSub.to_csv('PyCaret_RF_Pipe_Feat_2.csv', index = False)","f1696cc6":"## Submission ","bce1e47a":"## Import Data","e8385467":"## SMOTE","c8343bbf":"## Grid Search","dd34ee90":"## Import Libraries","85d312b8":"## Feat Engineering","bd0b100b":"## Gini Index","71e469dd":"## Accuracy","e6e717cc":"Ref Articles \n- https:\/\/towardsdatascience.com\/custom-transformers-and-ml-data-pipelines-with-python-20ea2a7adb65\n- https:\/\/machinelearningmastery.com\/smote-oversampling-for-imbalanced-classification\/\n- https:\/\/discuss.analyticsvidhya.com\/t\/what-is-the-difference-between-predict-and-predict-proba\/67376\n- https:\/\/github.com\/AnilBetta\/AV-Janata-Hack-healh-Care-2\/blob\/master\/av-jh-hca2-cat.ipynb\n- https:\/\/github.com\/gcspkmdr\/HA-Hackathon","56ce82de":"## Setup Pipeline ","9d151789":"## Divide Dataset into X and Y"}}