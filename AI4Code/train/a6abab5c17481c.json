{"cell_type":{"de0689e1":"code","145450b8":"code","dca906b1":"code","c685f29f":"code","6374536b":"code","92c2f883":"code","d24ce67b":"code","8e94740e":"code","359dfcca":"code","e90103a2":"code","6e7c0d19":"code","230f3e22":"code","21cfe8a4":"code","066460f2":"code","5a7dbca8":"code","0050cd4e":"code","09747401":"code","5130d6ac":"code","77390586":"code","1ec8bf55":"code","71e6ff8e":"code","6cbc7e37":"code","e542c3c0":"code","7060babf":"code","caa4d4b2":"code","6980ef3a":"code","20a0eaf2":"code","83301df7":"code","19f87002":"markdown","e8d85d90":"markdown","ee77f65c":"markdown","0333df2f":"markdown","910d2119":"markdown","03d8f6db":"markdown","0452577b":"markdown","49ad7ac3":"markdown","fc42ea83":"markdown","cddec967":"markdown","e1269f26":"markdown","db4b3513":"markdown","44d1f583":"markdown","62a0a213":"markdown","08d94997":"markdown"},"source":{"de0689e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","145450b8":"plays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')\ngames = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv')","dca906b1":"weeks = []\nfor i in tqdm(range(17)):\n    z = i+1\n    weeks.append(pd.read_csv(f'\/kaggle\/input\/nfl-big-data-bowl-2021\/week{z}.csv'))\ntracking = pd.concat(weeks)","c685f29f":"a = []\npg_id = plays['gameId']\nfor index, value in pg_id.iteritems():\n    x = str.split(str(games['homeTeamAbbr'][games['gameId'] == value]), ' ')[4][:3]\n    a.append(x)","6374536b":"plays['homeTeam'] = pd.Series(a)","92c2f883":"x = []\np_yd = plays['yardlineNumber']\np_sd = plays['yardlineSide']\n\nfor index, value in p_yd.iteritems():\n    if plays['yardlineSide'][index] == plays['homeTeam'][index]:\n        x.append(value+10)\n    else:\n        x.append(110-value)","d24ce67b":"plays['standardYardLine'] = pd.Series(x)","8e94740e":"plays[['yardlineNumber', 'yardlineSide', 'homeTeam', 'standardYardLine']]","359dfcca":"nDB = []\nnLB = []\nnDL = []\nfor idx,val in plays['personnelD'].items():\n    if not pd.isnull(plays['personnelD'][idx]):\n        nLB.append(plays['personnelD'][idx][plays['personnelD'][idx].find(' LB')-1])\n        nDL.append(plays['personnelD'][idx][plays['personnelD'][idx].find(' DL')-1])\n        nDB.append(plays['personnelD'][idx][plays['personnelD'][idx].find(' DB')-1])\n    else:\n        nLB.append(None)\n        nDB.append(None)\n        nDL.append(None)\nplays['nLB'] = nLB\nplays['nDB'] = nDB\nplays['nDL'] = nDL\nplays.head()","e90103a2":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nplays['yardsToGo2'] = np.array(plays['yardsToGo'])**2\nplays = plays.dropna()\ninputs = plays.loc[:,['nLB','nDB','nDL','yardsToGo','yardsToGo2','down','yardlineNumber']]\ninputs = pd.get_dummies(data=inputs, drop_first=True)\n\nregmod = LinearRegression()\nlm = regmod.fit(inputs, plays['epa'])\n\n#m1,m2,m3\nprint(\"Coefficents: \", lm.coef_)\nprint()\n#b-intercept\nprint(\"b-intercept: \", lm.intercept_)\nprint()\n\nplays['epa_pred'] = lm.predict(inputs)\nprint('R^2 for the linear regression', r2_score(plays['epa'], plays['epa_pred']))\nprint()\n\ninputs.head()","6e7c0d19":"tracking['position'].unique()","230f3e22":"offense_p = ['QB', 'WR', 'RB', 'TE', 'FB', 'HB']\ndefense_p = ['SS', 'FS', 'MLB', 'CB', 'LB', 'OLB', 'ILB', 'DL', 'DB', 'NT', 'S', 'DE', 'DT']\nspecial_p = ['P', 'LS', 'K']","21cfe8a4":"t_p = tracking['position']\nside = []\nfor idx, val in t_p.iteritems():\n    if val in offense_p:\n        side.append('O')\n    elif val in defense_p:\n        side.append('D')\n    elif val in special_p:\n        side.append('S')\n    else:\n        side.append('F')\n        \ntracking['O\/D\/S\/F'] = pd.Series(side)","066460f2":"tracking.head()","5a7dbca8":"import seaborn as sns\nimport matplotlib.pyplot as plt\nyardline_play_result = plays[['standardYardLine','playType','isDefensivePI']]\nplayTypes = np.zeros([99,4])\nyardLineList = []\nfor idx, val in yardline_play_result['standardYardLine'].iteritems():\n    yardLineList.append(val)\n    if yardline_play_result['playType'][idx] == 'play_type_pass':\n        playTypes[val-11, 0] += 1\n    elif yardline_play_result['playType'][idx] == 'play_type_sack':\n        playTypes[val-11,1] += 1\n    if yardline_play_result['isDefensivePI'][idx] == True:\n        playTypes[val -11, 2] += 1\n    playTypes[val-11,3] += 1\n    \nplay_frequencies = pd.DataFrame(data = {'passFreq': playTypes[:,0]\/playTypes[:,3],\n                                   'sackFreq': playTypes[:,1]\/playTypes[:,3],\n                                   'passInterference': playTypes[:,2]\/playTypes[:,3],\n                                   'yardLineNumber': np.arange(99)+1})\nplay_frequencies.head()","0050cd4e":"def plotPlayFreq(frequencies, start_yardline = 0, end_yardline = 100, play_type = 'all'):\n    fig = plt.figure()\n    plt.style.use('fivethirtyeight')\n    ax = fig.add_axes([0,0,1,1])\n    if play_type == 'all':\n        ax.bar(frequencies['yardLineNumber'][start_yardline:end_yardline], frequencies['sackFreq'][start_yardline:end_yardline]+frequencies['passFreq'][start_yardline:end_yardline]+frequencies['passInterference'][start_yardline:end_yardline], color = 'r', width = 0.25)\n        ax.bar(frequencies['yardLineNumber'][start_yardline:end_yardline], frequencies['sackFreq'][start_yardline:end_yardline]+frequencies['passFreq'][start_yardline:end_yardline], color = 'g', width = 0.25)\n        ax.bar(frequencies['yardLineNumber'][start_yardline:end_yardline], frequencies['passFreq'][start_yardline:end_yardline], color = 'b', width = 0.25)\n        ax.legend(labels=['DPI', 'Sack', 'Pass'], loc = 4)\n    elif play_type == 'pass':\n        ax.bar(frequencies['yardLineNumber'][start_yardline:end_yardline] + 0.00, frequencies['passFreq'][start_yardline:end_yardline], color = 'b', width = 0.25)\n        ax.legend(labels=['Pass'])\n    elif play_type == 'sack':\n        ax.bar(frequencies['yardLineNumber'][start_yardline:end_yardline] + 0.25, frequencies['sackFreq'][start_yardline:end_yardline], color = 'g', width = 0.25)\n        ax.legend(labels=['Sack'])\n    elif play_type == 'PI':\n        ax.bar(frequencies['yardLineNumber'][start_yardline:end_yardline] + 0.50, frequencies['passInterference'][start_yardline:end_yardline], color = 'r', width = 0.25)\n        ax.legend(labels=['Defensive Pass Interference'])\n    ax.set_xlabel('Yardline')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Yardline vs Play Frequency')\n    plt.show()","09747401":"plotPlayFreq(play_frequencies, 0,100, 'PI')","5130d6ac":"import seaborn as sns\nimport matplotlib.pyplot as plt\nyardline_play_result = plays[['standardYardLine','passResult', 'personnelD', 'isDefensivePI', 'epa']]\nschemes = yardline_play_result['personnelD'].unique()\nschemes = schemes[:len(schemes)-1]\nplayRes = np.zeros([len(schemes),5])\nfor idx, val in yardline_play_result['standardYardLine'].iteritems():\n    if yardline_play_result['passResult'][idx] == 'C':\n        if len(np.where(schemes == yardline_play_result['personnelD'][idx])[0]) > 0:\n            i = np.where(schemes == yardline_play_result['personnelD'][idx])[0][0]\n            playRes[i,0] += 1\n            playRes[i,2] += 1\n    elif yardline_play_result['passResult'][idx] == 'I':\n        if len(np.where(schemes == yardline_play_result['personnelD'][idx])[0]) > 0:\n            i = np.where(schemes == yardline_play_result['personnelD'][idx])[0][0]\n            playRes[i, 1] += 1\n            playRes[i,2] += 1\n            if yardline_play_result['isDefensivePI'][idx] == True:\n                playRes[i,3] += 1\n    if len(np.where(schemes == yardline_play_result['personnelD'][idx])[0]) > 0:\n            i = np.where(schemes == yardline_play_result['personnelD'][idx])[0][0]\n            playRes[i,4] += yardline_play_result['epa'][idx]\n    \n    \n    \nresult_frequencies = pd.DataFrame(data = {'compFreq': playRes[:,0]\/playRes[:,2],\n                                   'icompFreq': playRes[:,1]\/playRes[:,2],\n                                    'PIFreq': playRes[:,3]\/playRes[:,2],\n                                          'Total Plays': playRes[:,2],\n                                          'Defense': schemes,\n                                         'AvgEPA': playRes[:,4]\/playRes[:,2]})\nresult_frequencies = result_frequencies.sort_values(by=['AvgEPA'], ascending = False)\nresult_frequencies","77390586":"def plotDFreq(frequencies, min_plays = 250):\n    frequencies = frequencies[frequencies['Total Plays'] >= min_plays]\n    fig = plt.figure(figsize = (15,10))\n    plt.style.use('fivethirtyeight')\n    ax = fig.add_axes([0,0,1,1])\n    X = np.arange(len(frequencies))\n    ax.bar(X, frequencies['AvgEPA'], color = 'b', width = 0.25)\n    ax.legend(labels=['DPI', 'Completion', 'Incompletion'])\n    plt.xticks(X, frequencies['Defense'], rotation = 'vertical')\n    ax.set_xlabel('Defense Personnel')\n    ax.set_ylabel('EPA')\n    ax.set_title(f'EPA vs Defense Personel (Min {min_plays} Plays)')\n    ax.axhline(y = 0, color = 'r')\n    plt.show()","1ec8bf55":"plotDFreq(result_frequencies, 20)","71e6ff8e":"tracking.head(23)","6cbc7e37":"temp = tracking[tracking['gameId']==2018090600]\ntemp = temp[temp['playId'] == 75]\ntemp = temp[temp['frameId'] == 1]","e542c3c0":"colordict = dict({'home': 'green',\n              'away': 'red',\n             'football': 'brown'})\ncolor = temp['team'].apply(lambda x: colordict[x])\nplt.scatter(temp['x'], temp['y'], c = color)\nplt.title('Player Locations (Home = Green, Away = Red, Football = Brown)')","7060babf":"epa_result = plays[['standardYardLine', 'epa']]\nepa = np.zeros([99,2])\nfor idx, val in epa_result['standardYardLine'].iteritems():\n    epa[val-11, 0] += epa_result['epa'][idx]\n    epa[val-11, 1] += 1\nrel_epa = epa[:,0]\/epa[:,1]","caa4d4b2":"plt.bar(np.arange(99), rel_epa)\nplt.xlabel('Yardline')\nplt.ylabel('Expected Pointed Added (EPA)')\nplt.title('Expected Points Added vs Yardline')","6980ef3a":"nDB = []\nnLB = []\nnDL = []\nfor idx,val in result_frequencies['Defense'].items():\n    nLB.append(result_frequencies['Defense'][idx][result_frequencies['Defense'][idx].find(' LB')-1])\n    nDL.append(result_frequencies['Defense'][idx][result_frequencies['Defense'][idx].find(' DL')-1])\n    nDB.append(result_frequencies['Defense'][idx][result_frequencies['Defense'][idx].find(' DB')-1])","20a0eaf2":"result_frequencies['nLB'] = nLB\nresult_frequencies['nDB'] = nDB\nresult_frequencies['nDL'] = nDL","83301df7":"result_frequencies.head()","19f87002":"## For this analysis, we combined some of the first two graphs to investigate the EPA per each yardline","e8d85d90":"## For our first analysis, we looked into the frequency of defensive pass interference based on the yardline","ee77f65c":"Based off the graph above, it\u2019s clear there is no uniform distribution. However, we can see that around the 50-yard line we have the lowest EPA, while around the 10 we have the two highest EPA\u2019s. The 50-yard line could be a result of it being a \u201cshot play\u201d as teams will often go for high risk plays around that point on the field, these plays could often result in no gain, or even worse, a turnover. The ten-yard line\u2019s high EPA could be caused by the offense\u2019s high choice of plays which leads to a defense\u2019s inability to defend properly.\n","0333df2f":"# Task 3: Data Visualization","910d2119":"## Our next analysis looks at all of the different possible defensive schemes and shows the expected points metric values","03d8f6db":"Tracking graph comments For the graph above, we can see the defensive personnel lined up in green and the offensive personnel are in red. This graph allows us to see where all the players are located physically on the field. Using this it can be adapted to show where they are at any given point in time, not just the start of the play like it is shown here.\n","0452577b":"The graph shows a large amount of DPI at primarily the first and last 25 yardlines with a level amount in between those areas. Nearly 50% of plays ran on the first and last five yards resulted in a DPI, which is a significant finding. We believe one of the reasons for this might be the cost of allowing a touchdown if the defensive player is beaten by the reciever. It would better serve the defense to sacrifice the yards rather than give up a touchdown down the stretch.\n","49ad7ac3":"The EPA decreases when defensive coverages include more defensive backs and less linebackers and defensive lineman. This trend holds as every defensive personel increases in DBs.","fc42ea83":"# Task 2: Data Modeling","cddec967":"### This list shows the final standardized field positions","e1269f26":"# SDAC VT Big Data Bowl Challenge\n[Link to NFL Big Data Bowl 2021 Challenge](https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2021\/overview)\n* Brock Morgan\n* Jacob Parker\n* Nick Grifasi\n* Cullen Wallace","db4b3513":"For the second portion of the challenge we are going to be analyzing some of the data used previously for the first task. We want to look at how defensive schemes, yardline number, and tracking data affect the epa.\n","44d1f583":"## This next chart was our way of visualizing players on the field in a 2D space","62a0a213":"Based on our model, all of the terms within it are significant. The number of linebackers, defensive backs, and defensive lineman all have an effect on the epa of a play. Other terms we found to be significant were the yards to go and yards to go squared as well as the yardline number and what down they were on. All of these significant terms together however only had an R-squared value of about 2.6% of it could only explain that much of the variance in the data. This unfortunately means this model cannot be widely applied but does suggest that each of the terms in this model can play a part in a model that can accurately predict the success of a play.","08d94997":"# Task 1: Data Cleaning\n## For our first task, we thought it to be critical that the field positioning should be standardized so that it would be understandable for future modelling and functions "}}