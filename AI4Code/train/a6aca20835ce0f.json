{"cell_type":{"1c7f06be":"code","6ecdd6fb":"code","6fe36ad9":"code","0908bf70":"code","71fa3a6f":"code","f713c0e4":"code","2cd13d1e":"code","450c12fe":"code","9397b646":"code","5db6c3d1":"code","5e0b4664":"code","fc0475e5":"code","9ea4c209":"code","57589fe3":"code","97f45b67":"code","928f910a":"code","b5ba122e":"code","cb685799":"code","341bfffc":"code","450f2f88":"code","566d609d":"code","0286f0b9":"code","d84ed0a2":"code","1df6bca2":"code","f0a7e730":"code","05bc99a8":"code","a71b4af7":"code","4168ddbf":"code","6eaca9e8":"markdown","26252d07":"markdown","656875a8":"markdown","506a962c":"markdown","a3349530":"markdown","ec6b806f":"markdown","939181a5":"markdown","abfd42d9":"markdown","a5fe7ff8":"markdown","35750188":"markdown","ac96b90c":"markdown","198bf0eb":"markdown","429d2db9":"markdown","237517d1":"markdown","d39e43e4":"markdown","0edd0db4":"markdown","5a5ad282":"markdown","ae32cd7d":"markdown","a71a556e":"markdown","e3211533":"markdown"},"source":{"1c7f06be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6ecdd6fb":"data = pd.read_csv('..\/input\/weather_madrid_LEMD_1997_2015.csv')","6fe36ad9":"data.info()","0908bf70":"data.columns = [each.split()[0]+\"_\"+each.split()[1] if (len(each.split()) > 1) else each for each in data.columns]\ndata.rename(columns = {\" CloudCover\":\"CloudCover\",\" Events\":\"Events\"}, inplace = True)","71fa3a6f":"data.corr()","f713c0e4":"f,ax = plt.subplots(figsize = (20,20))\nsns.heatmap(data.corr(),annot = True, linewidths = 0.5, fmt = \".1f\", ax = ax, cmap = \"Blues\")\nplt.show()","2cd13d1e":"data.head(10)","450c12fe":"data.columns","9397b646":"data.CloudCover.plot(kind = 'line', color = \"green\", label = \"Cloud Cover\", figsize = (15,8),\n                        linewidth = 1, alpha = 0.5, grid = True, linestyle = \"-\")\n\ndata.Precipitationmm.plot(kind = 'line', color = \"green\", label = \"Precipitation (mm)\", figsize = (15,8),\n                            linewidth = 1, alpha = 1, grid = True, linestyle = \"-\")\nplt.legend()\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\nplt.title(\"Line Plot\")\nplt.show()","5db6c3d1":"data.plot(kind = \"scatter\", x = \"Mean_TemperatureC\", y = \"Mean_Humidity\", color = \"red\", \n          alpha = .8, figsize = (15,8))\nplt.xlabel(\"Mean Temperature\")\nplt.ylabel(\"Mean Humidity\")\nplt.title(\"Mean Temperature - Mean Humidity Scatter Plot\")\nplt.show()","5e0b4664":"data.Dew_PointC.plot(kind = \"hist\", bins = 10, figsize = (8,8), color = \"r\", alpha = 0.7)\nplt.title(\"Dew Point\")\nplt.show()\n","fc0475e5":"data.CloudCover.plot(kind = \"hist\", bins = 50)\nplt.clf()","9ea4c209":"dictionary = {\"Feynman\" : \"Istatistik\", \"Akkaya\" : \"RadarTemelleri\"}\nprint(dictionary.keys())\nprint(dictionary.values())","57589fe3":"dictionary['Feynman'] = \"FizikDersleri\"\nprint(dictionary)\ndictionary['Nisanyan'] = \"EasternTurkey\"\nprint(dictionary)\ndel dictionary['Akkaya']\nprint(dictionary)\nprint('Feynman' in dictionary)\ndictionary.clear()\nprint(dictionary)","97f45b67":"series = data[\"Min_TemperatureC\"]\nprint(type(series))\nframe = data[[\"Min_TemperatureC\"]]\nprint(type(frame))","928f910a":"x = data[\"Max_TemperatureC\"] > 30\ndata[x]","b5ba122e":"data[np.logical_and(data['Max_TemperatureC'] > 30, data['Min_TemperatureC'] > 25)]","cb685799":"data[(data[\"Max_TemperatureC\"] > 30) & (data[\"Min_TemperatureC\"] > 25)]","341bfffc":"for index,value in data[['Dew_PointC']][0:5].iterrows():\n    print(index,\" : \",value)","450f2f88":"n = int(input(\"Enter the number:\"))\n\ndef cube():\n    \"\"\"this function calculates the cube of numbers\"\"\"    \n    s = n**3\n    return s\nprint(\"Square of number: \" , cube())","566d609d":"x = 5 \ndef s():\n    x = 25 \n    return x\nprint(\"The global x: \" , x)\nprint(\"The local x: \" , s())","0286f0b9":"x = 5\ndef g():\n    y = x**2 # there is no local scope so it will use the global one.\n    return y\nprint(g())","d84ed0a2":"import builtins\ndir(builtins)","1df6bca2":"from math import sqrt\nx = 9 # global scope\ndef f1():\n    x = 4 # enclosed scope\n    z = sqrt(x) # enclosed scope\n    def f2():\n        y = z * x # local scope\n        return y\n    return x + f2() + z\nprint(f1())","f0a7e730":"def g(a,b,c = 4): \n    y = a + b + c\n    return y\nprint(g(9,13)) # it uses c variable's default value\n#change default argument\nprint(g(9,13,6))","05bc99a8":"def h(*args):\n    for i in args:\n        print(i)\nh(5)\n\nprint(\" \")\n\nh(5,0,5,0)\n\nprint(\"\")\n\ndef f(**kwargs):\n    for key, value in kwargs.items():\n        print(key, \":\", value)\n        \nf(harper_lee = \"to kill a mockingbird\", lutgens_et_al= \"essentials of geology\")","a71b4af7":"cube = lambda x:x**3\nprint(cube(4))","4168ddbf":"list1 = [4,5,7,10]\nsquare = map(lambda x:x**2,list1)\nprint(list(square))","6eaca9e8":"**I'm sorry about error. Please try code yourself for see the result. However, I uploaded some images here so you can review the result.**\n\n[![image](https:\/\/i.hizliresim.com\/bVkrYb.png)](https:\/\/hizliresim.com\/bVkrYb)\n\n[![image](https:\/\/i.hizliresim.com\/QLvaWZ.png)](https:\/\/hizliresim.com\/QLvaWZ)","26252d07":"To become familiar with data, you can get basic informations from data.","656875a8":"There is any rule about that but it is not recommended to use pre-defined names. If you want to learn them, first import **builtins** module then with **dir** examine the built-in scopes.","506a962c":"In addition, there is **enclosed** variables. Enclosed variables are used in the upper function in structures with **nested functions**.\n\nIf we add the enclosed variables to our imaginary hierarchy, it would be like that: first the local scope, then the enclosed scope, and then the global scope, and finally the built-in scope.","a3349530":"If you want to create a function with flexible arguments, you can use ***args**  and ****kwargs** method. Here, args can be one or more and kwargs is a dictionary.\n\nActually args and kwargs are traditional parameters. What is important here is the number of asterisks. When you use the parameter with one asterisk the result would be a tuple. But when you use the parameter with double asterisks, the result would be a dictionary.","ec6b806f":"**SCOPE**\n\nAll variables which you defined in your code have a scope.\n\nThe **local** scope is the variable which you defined in a method or a function.\n\nThe **global** scope is the variable which you defined in main body.\n\nThe **built-in** scope is pre-defined names. Like *print, len, int* etc.\n","939181a5":"At this step, i changed and organized the column names.","abfd42d9":"There is some examples about how to use dictionaries:","a5fe7ff8":"If you want some visual results, you can use line plot, scatter plot or histogram etc.","35750188":"**LAMBDA( ) FUNCTION**  \n\nUsage of lambda function:\n\noutput = **lambda** input:expression\n\n* The short way of function defining.\n* You can use the lambda function with just one expression.","ac96b90c":"**MAP( ) FUNCTION**  \n\nUsage of map function:\n\noutput = **map**(function, input)\n\n* It takes lists and numbers as arguments.\n* It applies the function to all elements of list.","198bf0eb":"**DEFAULT AND FLEXIBLE ARGUMENTS**\n\nWhen defining a function, you can assign a default value to a variable. Let's examine that:","429d2db9":"You can examine the correlation between attributes in visual or else.","237517d1":"**USER DEFINED FUNCTIONS**\n\nWhen you define your own function, you should use **def()** keyword.\nAnd also if you want to create more understandable function you can use *docstrings*. Let's see:","d39e43e4":"**P.S. IN PREPARING THIS DOCUMENT, I MOSTLY USED THE KERNEL CALLED \"Data ScienceTutorial for Beginners\". https:\/\/www.kaggle.com\/kanncaa1\/data-sciencetutorial-for-beginners**\n\n**I AM PREPARING THIS KERNEL TO LEARN, NOT TO TEACH. BUT HOPEFULLY, IT IS ALSO HELPFUL FOR YOU.**\n","0edd0db4":"Again, you can get basic information about data with head( ) function.  This function shows all columns and five rows, as default. You can change the rows number according to your needs. At this example, i choose ten rows.","5a5ad282":"**GETTING STARTED WITH DATA ANALYSIS**\n\nFirst of all, we should introduce the csv folder.","ae32cd7d":"There is some logical comparison and filtering for get more information about data:","a71a556e":"When you used an unqualified name, Python searches that name in the local scope, then the global scope and then the built-in scope. This can be compared to kind of hierarchy for easier understanding. Let's examine that:","e3211533":"With Seaborn library, for example you can visualized your data as color-encoded matrix. At this example, i used heatmap to make more understandable the correlations between attributes.\n\nThe means of parameters which i used:\n\n* annot :  It is provide, write the data value in each cell when it is True.\n* linewidths  : The line width between cells.\n* fmt : String formatting code to use annottations. Of course, when annot is True.\n* ax : Axes in which to draw the plot.\n* cmap : The mapping from data values to color space.\n"}}