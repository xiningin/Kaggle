{"cell_type":{"960653bc":"code","473dbe0c":"code","b8630c26":"code","ea83a0a9":"code","4e9bb65a":"code","6d869f3c":"code","4240a698":"code","92028396":"code","c1b2c206":"code","9aabbf7f":"code","105979f1":"code","8c04cba5":"code","efe14d94":"code","04508fd3":"code","a05756cd":"code","36ad1345":"code","77e4982e":"code","a55fc3bc":"markdown"},"source":{"960653bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","473dbe0c":"import matplotlib.pyplot as plt\nimport seaborn as sns","b8630c26":"train = pd.read_csv(\"\/kaggle\/input\/ammonium-prediction-in-river-water\/train.csv\")","ea83a0a9":"test = pd.read_csv(\"\/kaggle\/input\/ammonium-prediction-in-river-water\/test.csv\")","4e9bb65a":"def explore(df):\n    print(\"Head of the dataset: \",df.head())\n    print(\"Shape of the dataset: \",df.shape)\n    print(\"# Null values columnwise \",df.isna().sum())\n    for i in list(df.columns):\n        print(\"Range of Column values: \", min(df[i]),\"-\",max(df[i]))\n        j = ((df[i].isna().sum())\/147)*100\n        print(\"Station \",i,\" has \",round(j,2),'% of null values')\n        print(\"Mean of Station\",i,\":\",df[i].mean())\n        df[i]=df[i].fillna(df[i].mean())\n        if(j > 10):\n            print(\"The Station \",i,\"has too many null values, needs imputation or delete the column\")\n            ## Imputing NULL values with mean for plotting purpose\n            df[i].fillna(df[i].mean(),inplace=True)\n        plt.subplots(1, 1, sharex='col')\n        sns.distplot(df[i])\n    corr = df.corr()\n    sns.heatmap(corr)\n    \n        \n    ","6d869f3c":"explore(train)","4240a698":"explore(test)","92028396":"## Seperating Target from train set\ny = train['target']\ntrain = train.drop('target',axis=1)\n","c1b2c206":"train = train.drop('Id',axis=1)\ntest = test.drop('Id',axis=1)","9aabbf7f":"# splitting X and y into training and testing sets \nfrom sklearn.model_selection import train_test_split \nX_train, X_val, y_train, y_val = train_test_split(train, y, test_size=0.3, \n                                                    random_state=1) ","105979f1":"print(\"X_train shape: \", X_train.shape)\nprint(\"y_train shape: \", y_train.shape)\nprint(\"X_val shape: \", X_val.shape)\nprint(\"y_val shape: \", y_val.shape)\n","8c04cba5":"from sklearn import datasets, linear_model, metrics\n\nmodel1 = linear_model.LinearRegression() \nmodel1.fit(X_train,y_train)","efe14d94":"# regression coefficients \nprint('Coefficients: \\n', model1.coef_) \n  \n","04508fd3":"pred_train = model1.predict(X_train)\npred_val = model1.predict(X_val)","a05756cd":"## Accuracy\nprint('Train Accuracy: ', model1.score(X_train,y_train))\nprint('Test Accuracy: ', model1.score(X_val,y_val))","36ad1345":"## setting plot style \nplt.style.use('fivethirtyeight') \n  \n## plotting residual errors in training data \nplt.scatter(model1.predict(X_train), model1.predict(X_train) - y_train, \n            color = \"green\", s = 10, label = 'Train data') \n  \n## plotting residual errors in test data \nplt.scatter(model1.predict(X_val), model1.predict(X_val) - y_val, \n            color = \"blue\", s = 10, label = 'Validation data') \n  \n## plotting line for zero residual error \nplt.hlines(y = 0, xmin = 0, xmax = 5, linewidth = 2) \n  \n## plotting legend \nplt.legend(loc = 'upper right') \n  \n## plot title \nplt.title(\"Residual errors\") \n  \n## function to show plot \nplt.show() ","77e4982e":"predictions = model1.predict(test)\nplt.subplots(1,1)\nsns.distplot(y_train,label='train')\nsns.distplot(y_val,label='validation')\nsns.distplot(predictions,label='predicted')\nplt.legend()","a55fc3bc":"Lets look at the train set in detail"}}