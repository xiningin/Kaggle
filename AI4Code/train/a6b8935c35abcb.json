{"cell_type":{"ee68bb08":"code","fe73b80d":"code","670a0218":"code","0e84215e":"code","3bb27cf2":"code","7b2a8c59":"code","2d46f806":"code","16c4f08c":"code","63d23111":"code","3fdc3675":"code","f97f4e24":"code","b0e64698":"code","78778153":"code","a4087c15":"code","e813650c":"code","786361fe":"code","8355c4cb":"code","23469d9a":"code","fc00b6ef":"code","1be6ab73":"code","fb42de51":"code","8cd1df6e":"code","081dd211":"code","0c4892ec":"code","1af3c5e2":"code","44d3a070":"code","bf463f69":"code","13bc6674":"code","eea851cc":"code","4c4ec918":"code","15f0d689":"code","d4adc8ce":"code","bbdbbe67":"code","8dfbb227":"code","f5ea462b":"code","4977a5b6":"code","79898a5b":"code","5aaf8d99":"code","a86e4b4e":"code","242ff25f":"code","56583de6":"code","6accdbd4":"code","5d218a3d":"code","7c367de5":"code","d5c6371c":"code","e0128323":"code","98de81d3":"code","f22301b2":"code","bef7945d":"code","aaaac22d":"code","e869be8f":"code","43369bcf":"code","44f8bae4":"code","077520d0":"code","8b59f343":"code","24943e07":"code","e4a02715":"code","fea009d9":"code","bef2eb88":"code","bef6fd81":"code","f3d887d3":"code","9821cea6":"code","551fbc1a":"code","74f4ccbc":"code","18de2e65":"code","ff63020d":"code","fb8cb763":"code","aa6cd21e":"code","3b4ee738":"code","b49575d7":"code","7d5c6ebc":"code","21eabdec":"code","ab31619c":"code","7d4bc26b":"code","78fe3ced":"markdown","b19b7ca3":"markdown","b1ec33b6":"markdown","e88998be":"markdown","5100fabc":"markdown","12a58ec1":"markdown","4b48d973":"markdown","a31c8b3f":"markdown","e9bd609a":"markdown","53989ef9":"markdown","ab9c694a":"markdown","243e1415":"markdown"},"source":{"ee68bb08":"import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split as split\nimport warnings\nfrom sys import modules\nimport seaborn as sns\nfrom datetime import datetime as dt\nfrom datetime import timedelta\nimport math\nimport random\nimport time\n\n# For transformations and predictions\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.linear_model import LinearRegression\nfrom scipy.optimize import curve_fit\nfrom sklearn.tree import DecisionTreeRegressor, export_graphviz\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import pairwise_distances\n\n# For the tree visualization\nimport pydot\nfrom IPython.display import Image\nfrom sklearn.externals.six import StringIO\n\n# For scoring\nfrom sklearn.metrics import mean_squared_log_error as msle\nfrom sklearn.metrics import mean_squared_error as mse\n\n\n# For validation\nfrom sklearn.model_selection import train_test_split as split\n\nimport re\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline","fe73b80d":"n = 5819079 #number of records in file\ns = 2000000 #desired sample size\nrowsToSkip = sorted(random.sample(range(1,n),n-s))\n\nflights_df = pd.read_csv('..\/input\/flight-delays\/flights.csv', \\\n                         parse_dates=['SCHEDULED_DEPARTURE'], \\\n                         skiprows=rowsToSkip)\n\ndelayed_only = flights_df[(flights_df['CANCELLED']==0) & (flights_df['DIVERTED']==0)]\n\ndelayed_only.drop(['DIVERTED','CANCELLED','CANCELLATION_REASON', \\\n                   'AIR_SYSTEM_DELAY','SECURITY_DELAY','AIRLINE_DELAY', \\\n                   'LATE_AIRCRAFT_DELAY','WEATHER_DELAY','DEPARTURE_TIME','TAXI_OUT', \\\n                   'WHEELS_OFF', 'SCHEDULED_TIME','ELAPSED_TIME', \\\n                   'AIR_TIME','DISTANCE','WHEELS_ON','TAXI_IN', \\\n                   'SCHEDULED_ARRIVAL','ARRIVAL_TIME','ARRIVAL_DELAY'], axis=1, inplace=True)\n\ndelayed_only.columns = delayed_only.columns.str.lower()\n\nprint(delayed_only.shape)\ndelayed_only.head()","670a0218":"# Making the 'Scheduled_departure column to be a datetime type so we can use it in a real time variable\n\ndelayed_only['scheduled_departure_time'] = pd.to_datetime(delayed_only['scheduled_departure'],format=\"%H%M\")\n#delayed_only['scheduled_departure'] = delayed_only['scheduled_departure'].apply(lambda x: x.time())\ndelayed_only.head(10)","0e84215e":"# Deciding on a level (=5 minutes) for a flight to be considered \"delayed flight\"\n\ndelayed_part = delayed_only[delayed_only['departure_delay']>0].shape[0]\/delayed_only.shape[0]\nprint(f'The late departure part of all departures is: {delayed_part*100:.2f}%')\n\n#delayed_only = delayed_only[delayed_only['departure_delay']>0]","3bb27cf2":"delayed_only.shape","7b2a8c59":"# delays < 5 = 0\n#delayed_only['departure_delay'] = delayed_only['departure_delay'].where(delayed_only['departure_delay']>5.0, 0)\n# with 0-5\ndelayed_only['departure_delay'] = delayed_only['departure_delay'].where(delayed_only['departure_delay']>0, 0)","2d46f806":"# Combining 3 columns of day, month & year to a single date column\ndelayed_only['date']= delayed_only.apply(lambda x:dt.strptime(\"{0} {1} {2}\".format(x['year'],x['month'], x['day']), \"%Y %m %d\"),axis=1)","16c4f08c":"# Adding a boolean column: late = True, on time\/early = False\ndelayed_only['late_or_not'] = delayed_only['departure_delay'] > 0","63d23111":"lairport_df = pd.read_csv('..\/input\/airports-codes\/L_AIRPORT.csv')\nlairport_df.rename(columns = {\"Code\":\"iata_code\"},inplace=True)\nlairportid_df = pd.read_csv('..\/input\/airports-codes\/L_AIRPORT_ID.csv')\nmerged_airports_df = pd.merge(lairport_df,lairportid_df,on='Description')\nmerged_airports_df.set_index('Code',inplace=True)\nmerged_airports_df.sample(10)","3fdc3675":"airports_df = pd.read_csv('..\/input\/flight-delays\/airports.csv')\ndelayed_only['origin_airport'] = delayed_only['origin_airport'].astype(str)\nairports_df.columns = airports_df.columns.str.lower()\nprint(airports_df.shape)\nairports_df.head()","f97f4e24":"october = delayed_only[delayed_only['month']==10]\n#october['origin_airport'] = delayed_only['origin_airport'].astype(str)\noctober['origin_airport'].replace({\"11066\":\"CMH\", \"15016\":\"STL\", \"14730\":\"SDF\", \"12173\":\"HNL\", \"10157\":\"ACV\", \"15323\":\"TRI\", \"12758\":\"KOA\", \"15048\":\"SUX\", \"13158\":\"MAF\", \"10685\":\"BMI\", \"14543\":\"RKS\", \"15070\":\"SWF\"},inplace=True) \noctober['origin_airport'] = october.apply(lambda row: merged_airports_df.loc[int(row['origin_airport']),'iata_code'] if bool(re.match('[A-Z]+',row['origin_airport']))==False else row['origin_airport'], axis=1)","b0e64698":"delayed_only = pd.concat([delayed_only[delayed_only['month']!=10],october])","78778153":"delayed_only['origin_airport'] = delayed_only['origin_airport'].astype(str)","a4087c15":"delayed_only = delayed_only[~delayed_only['origin_airport'].str.contains(\" \")]","e813650c":"fig = plt.figure(figsize=(200,10))\nax = fig.gca()\ndelayed_only.groupby('origin_airport')['departure_delay'].mean().sort_values(ascending=False).plot.bar()\nplt.show()","786361fe":"fig = plt.figure(figsize=(200,10))\nax = fig.gca()\ndelayed_only.groupby('origin_airport')['late_or_not'].mean().sort_values(ascending=False).plot.bar()\nplt.show()","8355c4cb":"\ndelayed_only['mean_airport_delay'] = delayed_only.groupby('origin_airport')['departure_delay'].transform('mean')\ndelayed_only['airport_delay_prcnt'] = delayed_only.groupby('origin_airport')['late_or_not'].transform('mean')\ndelayed_only['airport_delay_combined'] = delayed_only['mean_airport_delay'] * delayed_only['airport_delay_prcnt']","23469d9a":"delayed_only.head()","fc00b6ef":"fig = plt.figure(figsize=(23,23))\nax = airports_df.plot.scatter(x='longitude',y='latitude')","1be6ab73":"delayed_only.info()","fb42de51":"# How many are late in general overview\n\nplt.figure(figsize=(15,5))\nax = delayed_only['departure_delay'].plot.hist(bins=500)\nax.set_xlim(0,300)\nplt.show()","8cd1df6e":"log_delay = np.log1p(delayed_only.departure_delay)\n#log_delay.hist(bins=1000)","081dd211":"delayed_only['log_delay'] = log_delay\ndelayed_only.head(20)","0c4892ec":"delayed_only['departure_delay'].describe(percentiles=[0.75,0.9,0.95,0.98,0.99])","1af3c5e2":"#Checking the delays on each date.\n\n# fig = plt.figure(figsize=(30,10))\n# ax = fig.gca()\n# delayed_only.plot.scatter(x='date', y='departure_delay',ax=ax)\n\n# plt.show()","44d3a070":"# check the size of the outliers we decide to drop.\nmax_delay=delayed_only['departure_delay'].quantile(0.98)\nprint(len(delayed_only[delayed_only['departure_delay']>max_delay])\/(len(delayed_only))*100, max_delay)","bf463f69":"#dropping outliers which are too unpredicted for our model\nmask = (delayed_only['departure_delay'] > max_delay)\nprint(delayed_only.shape)\ndelayed_only = delayed_only.loc[~mask,:]\nprint(delayed_only.shape)","13bc6674":"# dropping very low traffic airports as their score is not reliable\n\ndelayed_only['airport_flights'] = delayed_only.groupby('origin_airport')['origin_airport'].transform('count')\n#my_scaler(delayed_only,'flights_number','scaled_flights')\nmin_airport=delayed_only.groupby('origin_airport').size().quantile(0.1)\nprint(delayed_only.shape)\ndelayed_only = delayed_only[delayed_only['airport_flights']>min_airport]\nprint(delayed_only.shape)","eea851cc":"# filght dealys %    VS.   mean time of the delays\n\nfig, ax1 = plt.subplots(figsize=(30,5))\n\nax1.plot(delayed_only.groupby('date')['late_or_not'].mean(),data=delayed_only, color='g')\nax1.set_xlabel('Days of the year')\nax1.set_ylabel('late %', color='g')\nax1.set_xlim(min(delayed_only['date']), max(delayed_only['date']))\n\nax2 = ax1.twinx()\nax2.plot(delayed_only.groupby('date')['departure_delay'].mean(),data=delayed_only, color = \"r\")\n#ax2.plot(delayed_only.groupby('date')['log_delay'].mean(),data=delayed_only, color = \"r\")\nax2.set_ylabel('Time of delay', color = \"r\")\n\nplt.show()","4c4ec918":"#delayed_only.groupby('date')['log_delay'].transform('mean')\ndelayed_only.groupby('date')['departure_delay'].transform('mean')","15f0d689":"#delayed_only['mean_date_delay'] = delayed_only.groupby('date')['log_delay'].transform('mean')\ndelayed_only['mean_date_delay'] = delayed_only.groupby('date')['departure_delay'].transform('mean')\ndelayed_only['mean_date_delay'].hist(bins=50)\n","d4adc8ce":"delayed_only['mean_date_delay'].describe(percentiles=[0.75,0.9,0.95,0.98,0.99])","bbdbbe67":"sns.lineplot(data=delayed_only, x='date', y='mean_date_delay')","8dfbb227":"plt.figure(figsize=(40,15))\ndelayed_only.groupby('date')['departure_delay'].mean().plot()","f5ea462b":"#chosing the mean date delay limit to be considered as busy day \ndelayed_only['busy_day']=delayed_only['mean_date_delay']>13","4977a5b6":"# Late rate and mean delay by Airline\n\nfig = plt.figure(figsize=(20,6))\nax1 = fig.gca()\n\n#delayed_only.groupby('airline')['log_delay','late_or_not'].mean().sort_values(by='log_delay', ascending=False).plot(kind='bar', secondary_y='late_or_not', ax=ax1)\ndelayed_only.groupby('airline')['departure_delay','late_or_not'].mean().sort_values(by='departure_delay', ascending=False).plot(kind='bar', secondary_y='late_or_not', ax=ax1)\nplt.show()","79898a5b":"delayed_only.groupby('airline')['late_or_not'].mean().sort_values()","5aaf8d99":"# Boolean or dummies ?\n#delayed_only.groupby('airline')['log_delay'].mean().sort_values()\ndelayed_only.groupby('airline')['departure_delay'].mean().sort_values()","a86e4b4e":"#delayed_only['good_airline']=delayed_only[delayed_only['departure_delay'].mean()<13]\n#delayed_only['mean_airline_log_delay'] = delayed_only.groupby('airline')['log_delay'].transform('mean')\ndelayed_only['mean_airline_delay'] = delayed_only.groupby('airline')['departure_delay'].transform('mean')\ndelayed_only['airline_delay_prcnt'] = delayed_only.groupby('airline')['late_or_not'].transform('mean')\ndelayed_only['airline_delay_combined'] = delayed_only['mean_airline_delay'] * delayed_only['airline_delay_prcnt']","242ff25f":"#delayed_only['good_airline']=delayed_only['mean_airline_delay']<0.85\ndelayed_only['good_airline']=delayed_only['mean_airline_delay']<10\n","56583de6":"delayed_only.head()","6accdbd4":"# Late rate and mean late by day of week\n\nfig = plt.figure(figsize=(10,6))\nax1 = fig.gca()\n\n#delayed_only.groupby('day_of_week')['log_delay','late_or_not'].mean().plot(kind='bar', secondary_y='late_or_not', ax=ax1)\ndelayed_only.groupby('day_of_week')['departure_delay','late_or_not'].mean().plot(kind='bar', secondary_y='late_or_not', ax=ax1)\nplt.show()","5d218a3d":"# airline with day of the week check. in most of the airlines we can see a rise on weekends.\nfig, axes = plt.subplots(2, tight_layout=True, figsize=(20,10))\n\ndelayed_only.groupby(['airline','day_of_week'])['late_or_not'].mean().unstack().plot.bar(ax=axes[0], title='Late % across airlines')\n#delayed_only.groupby(['airline','day_of_week'])['log_delay'].mean().unstack().plot.bar(ax=axes[1], title='Late in time across airlines')\ndelayed_only.groupby(['airline','day_of_week'])['departure_delay'].mean().unstack().plot.bar(ax=axes[1], title='Late in time across airlines')\nplt.show()","7c367de5":"#delayed_only.groupby(pd.Grouper(key='scheduled_departure',freq='H'))['log_delay'].mean().sort_values()\ndelayed_only.groupby(pd.Grouper(key='scheduled_departure_time',freq='H'))['departure_delay'].mean().sort_values()","d5c6371c":"#delayed_only.groupby(pd.Grouper(key='scheduled_departure_time',freq='H'))['log_delay'].mean().plot.bar()\ndelayed_only.groupby(pd.Grouper(key='scheduled_departure_time',freq='H'))['departure_delay'].mean().plot.bar()","e0128323":"#delayed_only['hour_avg_delay'] = delayed_only.groupby(pd.Grouper(key='scheduled_departure',freq='H'))['log_delay'].transform('mean')\ndelayed_only['hour_avg_delay'] = delayed_only.groupby(pd.Grouper(key='scheduled_departure_time',freq='H'))['departure_delay'].transform('mean')","98de81d3":"#delayed_only['rush_hours']=delayed_only.hour_avg_delay>10","f22301b2":"delayed_only.head(10)","bef7945d":"delayed = delayed_only[delayed_only['departure_delay']!=0]\ndelayed.shape","aaaac22d":"fig = plt.figure(figsize=(30,5))\nax = fig.gca()\ndelayed.groupby('scheduled_departure')['departure_delay'].median().plot(title='Delays length  across hours of the day', ax=ax)\nax.set_ylim(0,120)\nplt.show()","e869be8f":"# taking only the hour int of the scheduled_departure for the model\ndelayed_only['scheduled_hour_int']=delayed_only['scheduled_departure'].apply(lambda x: int(x[0:2]))","43369bcf":"delayed_only.head()","44f8bae4":"def my_scaler(df, from_col_name, to_col_name):\n    scaler = MinMaxScaler()\n    scaled = scaler.fit_transform(pd.DataFrame(df[from_col_name],index=df.index))\n    scaled_df = pd.DataFrame(scaled, columns=['scale_temp'], index=df.index)\n    df[to_col_name] = scaled_df['scale_temp']\n    \n    \n# scaler = MinMaxScaler()\n# scaled_delay = scaler.fit_transform(pd.DataFrame(delayed_only['mean_airline_delay'],index=delayed_only.index))\n# scaled_df = pd.DataFrame(scaled_delay, columns=['mean_airline'], index=delayed_only.index)\n# delayed_only['scaled_airline'] = scaled_df['mean_airline']","077520d0":"# Scaling 'airline_delay_combined' & 'airport_delay_combined'\nmy_scaler(delayed_only,'airline_delay_combined','scaled_airline_score')\nmy_scaler(delayed_only,'airport_delay_combined','scaled_airport_score')","8b59f343":"holidays_df = pd.read_csv('..\/input\/us-holidays\/usholidays.csv', parse_dates=['Date'])\nprint(holidays_df.shape)\nholidays_df.info()","24943e07":"holidays_df = holidays_df[holidays_df['Date'].dt.year==2015]\nholidays_list = holidays_df['Date'].dt.date.tolist()\nholidays = []\nfor holiday in holidays_list:\n    holidays.append(holiday)\n    for i in range(1,4):\n        holidays.append(holiday+timedelta(days=i))\n        holidays.append(holiday-timedelta(days=i))\n\nlen(holidays)","e4a02715":"delayed_only['is_holiday'] = delayed_only['date'].isin(holidays)\ndelayed_only.head()","fea009d9":"len(delayed_only[delayed_only['is_holiday']==True])","bef2eb88":"delayed_only.groupby('is_holiday')['departure_delay'].mean().plot.bar()","bef6fd81":"relevant_cols = ['mean_date_delay','scaled_airline_score', 'scheduled_hour_int','airport_flights', 'scaled_airport_score', 'is_holiday']\nX = delayed_only.loc[:,relevant_cols]\n#y = delayed_only['log_delay']\ny = delayed_only['departure_delay']","f3d887d3":"X.head()\nprint(X.shape)","9821cea6":"y.head()","551fbc1a":"X_train, X_test, y_train, y_test = split(X, y, random_state=314159)","74f4ccbc":"fd_model = DecisionTreeRegressor(max_leaf_nodes=120, min_samples_leaf=1000).fit(X_train, y_train)","18de2e65":"def visualize_tree(model, md=5):\n    dot_data = StringIO()  \n    export_graphviz(model, out_file=dot_data, feature_names=X_train.columns, max_depth=md)\n    graph = pydot.graph_from_dot_data(dot_data.getvalue())[0]  \n    return Image(graph.create_png(), width=800) ","ff63020d":"visualize_tree(fd_model)","fb8cb763":"y_train_pred = fd_model.predict(X_train)","aa6cd21e":"\nax = sns.scatterplot(x=y_train, y=y_train_pred)\nax.set_ylim(0,max_delay)\nax.set_xlim(0,max_delay)\nax.set_ylabel('prediction')\nax.plot(y_train, y_train, 'r')","3b4ee738":"for feature, importance in zip(X.columns, fd_model.feature_importances_):\n    print(f'{feature:14}: {importance:.2f}')","b49575d7":"RMSLE = msle(y_train, y_train_pred)**0.5\nRMSLE","7d5c6ebc":"prediction = pd.DataFrame({'y': y_train, 'y_pred': y_train_pred})\nprediction.sample(10)","21eabdec":"y_test_pred = fd_model.predict(X_test)","ab31619c":"ax = sns.scatterplot(x=y_test, y=y_test_pred)\nax.set_ylim(0,max_delay)\nax.set_xlim(0,max_delay)\nax.plot(y_test, y_test, 'r')","7d4bc26b":"RMSLE = msle(y_test, y_test_pred)**0.5\nRMSLE","78fe3ced":"### Predicting the delay","b19b7ca3":"#### Fixing October invalid airports codes","b1ec33b6":"### Validating the model","e88998be":"#### exploring time of the day effect on delays","5100fabc":"### The Model","12a58ec1":"### As we plan to use a regression model, it's almost impossible to predict long delays with zeros inflated data","4b48d973":"#### Removing all the non-delayed flights, investigating only the time of the delay","a31c8b3f":"#### Airline score is built the same as airport score","e9bd609a":"#### Adding is_holiday feature for +- 3 days from holiday's date","53989ef9":"### Creating a score for airport using their mean delay time and the rate of delayed flights out of total flights","ab9c694a":"### Loading Flights.CSV","243e1415":"### Visualizing the tree"}}