{"cell_type":{"a6ad964a":"code","66a1e8a4":"code","315d1361":"code","c29731f7":"code","7a2c061c":"code","8592a02e":"code","6927ca2d":"code","eea215cf":"code","8299a49a":"code","830aab25":"code","4d3ef4bd":"code","25e74e0f":"code","8d7ebdc8":"code","d95d0be3":"code","204eab9b":"code","b98be9dd":"code","fde5870e":"code","8f5043ba":"code","2db19bc6":"code","ea72254b":"code","5daa8e19":"code","052554e5":"code","23c0e1df":"code","ab7b7e3d":"code","f2c2ded1":"code","62564eaf":"code","6498df55":"code","f52622e4":"code","91b29cc7":"code","6548789f":"code","f7ef6daf":"code","d4ef1dd4":"code","b379cb60":"code","f7df9ec8":"code","05008931":"code","f45eb488":"markdown","6ce6d1f1":"markdown","f3e04a7e":"markdown","3eda295e":"markdown","5547e48e":"markdown","a643ac35":"markdown","803c2c5b":"markdown","d9115077":"markdown","1594c351":"markdown","476e8b50":"markdown","e5a6b9a3":"markdown"},"source":{"a6ad964a":"# import libraries\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","66a1e8a4":"# Load data using pandas.read_csv()\n\ndata = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","315d1361":"# View partial data\n\ndata.head()","c29731f7":"# View data dimensions\n\ndata.shape","7a2c061c":"# Extract the label column and convert it to numpy array\n\nlabels = data.pop('label').to_numpy()","8592a02e":"labels","6927ca2d":"# Looking at the data dimensions again, the label column has been extracted\n\ndata.shape","eea215cf":"data = data.to_numpy().reshape(-1,28,28)","8299a49a":"plt.figure(figsize=(10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(data[i])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(labels[i])","830aab25":"# Add dimension\n\ndata = np.expand_dims(data,axis=-1)\nlabels = np.expand_dims(labels,axis=-1)","4d3ef4bd":"# You can see that there's one more dimension at the end\n\ndata.shape","25e74e0f":"labels.shape","8d7ebdc8":"# Fill the image with zeros around it\n\ndata = tf.pad(data,[[0,0],[2,2],[2,2],[0,0]])","d95d0be3":"# You can see the shape change\n\ndata.shape","204eab9b":"num = data.shape[0] \/\/ 10\ntrain_data, val_data, test_data = tf.split(data,[num*8, num, num])\ntrain_label, val_label, test_label = tf.split(labels,[num*8, num, num])","b98be9dd":"print('train:',train_data.shape,'-- label:',train_label.shape)\nprint('validition:',val_data.shape,'-- label:',val_label.shape)\nprint('test:',test_data.shape,'-- label:',test_label.shape)","fde5870e":"# Show some pictures. Everything is all right\n\nplt.figure(figsize=(10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(train_data[i])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(train_label[i][0].numpy())","8f5043ba":"train_ds = tf.data.Dataset.from_tensor_slices((train_data,train_label)).shuffle(33600,seed=42).batch(128)\nval_ds = tf.data.Dataset.from_tensor_slices((val_data,val_label)).shuffle(33600,seed=42).batch(128)\ntest_ds = tf.data.Dataset.from_tensor_slices((test_data,test_label)).shuffle(33600,seed=42).batch(128)","2db19bc6":"# Use 'take' to view a batch of data\n\nplt.figure(figsize=(10,10))\n\nfor image,label in train_ds.take(1):\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.imshow(image[i])\n        plt.xticks([])\n        plt.yticks([])\n        plt.xlabel(label[i][0].numpy())","ea72254b":"# The shape of the picture\n\nimage_shape = (32,32,1)","5daa8e19":"# Use Monte-Carlo Dropout to reduce overfitting\n\nclass MCDropout(layers.Dropout):\n    def call(self,inputs):\n        return super().call(inputs,training=True)\n\n\n# Use a LeNet-style neural network. Some parameters are adjusted\n\ninputs = layers.Input(shape=image_shape)\nx = layers.experimental.preprocessing.Rescaling(1.\/255)(inputs) # normalized\nx = layers.Conv2D(128,5,strides=1,activation='relu')(x)\nx = layers.MaxPooling2D(2,strides=2)(x)\nx = layers.Conv2D(128,5,strides=1,activation='relu')(x)\nx = layers.MaxPooling2D(2,strides=2)(x)\nx = layers.Conv2D(128,5,strides=1,activation='relu')(x)\nx = layers.Flatten()(x)\nx = layers.Dense(84,activation='relu')(x)\nx = MCDropout(0.1)(x)\noutputs = layers.Dense(10)(x)\n\nmodel = keras.Model(inputs,outputs)\n\nmodel.compile(\n    optimizer=keras.optimizers.Adam(lr=0.001),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    metrics=['accuracy']\n)","052554e5":"# View network architecture\nmodel.summary()","23c0e1df":"# Using EarlyStopping, end training when val_accuracy is not improved for 10 consecutive times\nearly_stopping = keras.callbacks.EarlyStopping(monitor='val_accuracy',mode='max',\n                                    patience=10,restore_best_weights=True)\n\n# Using ReduceLROnPlateau, the learning rate is reduced by half when val_accuracy is not improved for 5 consecutive times\nlr_scheduler = keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy',mode='max',factor=0.5,patience=5)\n\n# training\nhistory = model.fit(train_ds,batch_size=128,epochs=100,validation_data=val_ds,\n                    callbacks=[early_stopping,lr_scheduler])","ab7b7e3d":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\nplt.ylim([min(plt.ylim()),1])\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\nplt.ylim([0,1.0])\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()","f2c2ded1":"# test model\nmodel.evaluate(test_ds,verbose=2)","62564eaf":"# load data\n\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nsample_submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","6498df55":"test.head()","f52622e4":"sample_submission.head()","91b29cc7":"# process data\n\ntest = test.to_numpy().reshape(-1,28,28)\ntest = np.expand_dims(test,axis=-1)\ntest = tf.pad(test,[[0,0],[2,2],[2,2],[0,0]])\n\ntest.shape","6548789f":"sample_submission.shape","f7ef6daf":"# predict\nresult =  model.predict(test)\n\nresult.shape","d4ef1dd4":"# get predict label\npredict_label = np.argmax(result,axis=-1)\n\npredict_label.shape","b379cb60":"# Show some prediction results\n\nplt.figure(figsize=(10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(test[i,...,0])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(predict_label[i])","f7df9ec8":"sample_submission['Label'] = predict_label","05008931":"sample_submission.to_csv('submission.csv', index=False)","f45eb488":"* Next, we split the training dataset, validition dataset and test dataset with the ratio of 8:1:1 using tf.split.","6ce6d1f1":"# Submit","f3e04a7e":"* Draw the learning curve","3eda295e":"# Build model","5547e48e":" * We will use a LeNet-style neural network for training, which requires input dimensions (None,32,32,1). So we need to add a dimension at the end of the array. But the image is 28*28, and to convert it to 32*32, we just need to fill in two rows or two columns with zeros around the image.","a643ac35":"* We first convert the data to a numpy array and then convert the flattened image to a two-dimensional image. Its shape is (28,28).","803c2c5b":"# Load and process data","d9115077":"* Convert training dataset,validition dataset and test dataset to tf.data.Dataset. Then change the order of data, set batch_size to 128 ","1594c351":"* Let's show some pictures","476e8b50":"* In fact, the image pixels we are training should be scaled to 0-1, which is just divided by 255, but I'm not going to do this in data processing. Simply add a Rescaling layer at the bottom of the model, and you don't have to manually scale the data when making predictions.","e5a6b9a3":"* The first column is the label, and we need to extract it."}}