{"cell_type":{"c1c647a2":"code","ddd44946":"code","80143eca":"code","9fe661d9":"code","15602680":"code","b33bbbf4":"code","55fc9a4d":"code","0c6e0c1e":"code","c42770f2":"code","3b1202a3":"code","822eab7c":"code","1139dfba":"code","5ce4ad4c":"code","c4be25f7":"code","3ce2cb27":"markdown","56f094f4":"markdown"},"source":{"c1c647a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddd44946":"df = pd.read_csv('\/kaggle\/input\/bosch-production-line-performance\/train_numeric.csv.zip',nrows=100)\ndf","80143eca":"pd.options.display.max_rows = 999\ndf.head()\nfrom sklearn import linear_model\n\n","9fe661d9":"size = 100000\nflag = 0\nstations=[]\nstation_name='S0'\nfor i in pd.read_csv('\/kaggle\/input\/bosch-production-line-performance\/train_numeric.csv.zip',iterator=True, chunksize=size,compression='zip'):\n    #reset all the values for next iteration\n    print('new iteration')\n    if (station_name == 'S52' ):\n        #print('fun with flags')\n        flag = 1\n    a=i.columns\n    station_counter = 0\n    feature_counter = 0\n    cumulative_feature = 0\n    index=0\n    station_name = 'S{}'.format(station_counter)\n    while flag == 0 :\n        feature_counter = 0\n        while station_name in a[index+1]:\n            index+=1\n            feature_counter+=1\n        print(feature_counter)\n        cumulative_feature += feature_counter\n        newframe = i.iloc[:,cumulative_feature-feature_counter+1:cumulative_feature+1]\n        newframe.insert(0,\"Id\",i.iloc[ :,0],True)\n        newframe = newframe.dropna( thresh = 2)\n        newframe.to_csv(station_name+'_numeric.csv',index = False)\n        station_counter+=1\n        print(station_name)\n        stations.append(station_name)\n        station_name = 'S{}'.format(station_counter)\n        if(station_name == 'S52'):\n            print('passing to second is now')\n            station_counter = 0\n            feature_counter = 0\n            cumulative_feature = 0\n            break\n        while station_name not in a[index+1]:\n            print('wel wel wel')\n            station_counter+=1\n            station_name = 'S{}'.format(station_counter)\n    while(flag == 1) and (len(i) != 0):\n        feature_counter = 0\n        while station_name in a[index+1]:\n            index+=1\n            feature_counter+=1\n        cumulative_feature+=feature_counter\n        newframe = i.iloc[:,cumulative_feature-feature_counter+1:cumulative_feature+1] \n        newframe.insert(0,\"Id\",i.iloc[ :,0],True)\n        newframe = newframe.dropna(  thresh = 2)\n        newframe.to_csv(station_name+'_numeric.csv',header = False,index = False,mode = 'a')\n        station_counter+=1\n        #print(station_name)\n        station_name = 'S{}'.format(station_counter)\n        if station_name =='S52':\n            break\n        while station_name not in a[index+1]:\n            #print('wo')\n            station_counter+=1\n            station_name = 'S{}'.format(station_counter)\n              \nprint('done done done')    ","15602680":"#empty consist of all the stations as keys and total number of missing data per station as values\nempty = {}\nfor i in stations:\n    df = pd.read_csv( i+'_numeric.csv')\n    empty[i] = df.isna().sum().sum()\n","b33bbbf4":"empty","55fc9a4d":"terminal = stations[len(stations)-1]\n# Feature Dictionnary 'FeatureName' : '# of Nan ' \nFeatures = {}\nfor i in stations:\n    df = pd.read_csv( i+'_numeric.csv')\n    counter = 1\n    while(True):\n        SerieOfFeature= df.iloc[:,counter]\n        Null_per_Feature = SerieOfFeature.isnull().sum()\n        Features[df.columns[counter]] = Null_per_Feature\n        counter+=1\n        if counter > len(df.columns)-1:\n            break","0c6e0c1e":"Features","c42770f2":"pd.read_csv('S1_numeric.csv').isna().sum().sum()","3b1202a3":"pd.read_csv('S5_numeric.csv')","822eab7c":"df.isna().sum().sum()","1139dfba":"df2=df.interpolate(method ='linear', limit_direction ='forward') \n","5ce4ad4c":"df2.isna().sum().sum()","c4be25f7":"pd.read_csv('S1_numeric.csv')","3ce2cb27":"size = 100000\nflag = 0\nstations=[]\nstation_name='S0'\nfor i in pd.read_csv('\/kaggle\/input\/bosch-production-line-performance\/train_numeric.csv.zip',iterator=True, chunksize=size,compression='zip'):\n    #reset all the values for next iteration\n    print('new iteration')\n    if (station_name == 'S52' ):\n        #print('fun with flags')\n        flag = 1\n    a=i.columns\n    station_counter = 0\n    feature_counter = 0\n    cumulative_feature = 0\n    index=0\n    station_name = 'S{}'.format(station_counter)\n    while flag == 0 :\n        feature_counter = 0\n        while station_name in a[index+1]:\n            index+=1\n            feature_counter+=1\n        print(feature_counter)\n        cumulative_feature += feature_counter\n        newframe = i.iloc[:,cumulative_feature-feature_counter+1:cumulative_feature+1]\n        newframe.insert(0,\"Id\",i.iloc[ :,0],True)\n        newframe.insert(feature_counter+1,'Response',i.loc[:,'Response'],True)\n        newframe = newframe.dropna( thresh = 3)\n        newframe.to_csv(station_name+'_numeric.csv',index = False)\n        station_counter+=1\n        print(station_name)\n        stations.append(station_name)\n        station_name = 'S{}'.format(station_counter)\n        if(station_name == 'S52'):\n            print('passing to second is now')\n            station_counter = 0\n            feature_counter = 0\n            cumulative_feature = 0\n            break\n        while station_name not in a[index+1]:\n            print('wel wel wel')\n            station_counter+=1\n            station_name = 'S{}'.format(station_counter)\n    while(flag == 1) and (len(i) != 0):\n        feature_counter = 0\n        while station_name in a[index+1]:\n            index+=1\n            feature_counter+=1\n        cumulative_feature+=feature_counter\n        newframe = i.iloc[:,cumulative_feature-feature_counter+1:cumulative_feature+1] \n        newframe.insert(0,\"Id\",i.iloc[ :,0],True)\n        newframe.insert(feature_counter+1,'Response',i.loc[:,'Response'],True)\n        newframe = newframe.dropna(  thresh = 3)\n        newframe.to_csv(station_name+'_numeric.csv',header = False,index = False,mode = 'a')\n        station_counter+=1\n        #print(station_name)\n        station_name = 'S{}'.format(station_counter)\n        if station_name =='S52':\n            break\n        while station_name not in a[index+1]:\n            #print('wo')\n            station_counter+=1\n            station_name = 'S{}'.format(station_counter)\n              \nprint('done done done')","56f094f4":"# NUMERIC FILES"}}