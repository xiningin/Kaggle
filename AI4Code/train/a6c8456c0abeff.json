{"cell_type":{"becd8eb8":"code","44acc8f7":"code","edc0167b":"code","88702dd0":"code","a07932f5":"code","67bc30a8":"code","6f6873e4":"code","20072cec":"code","1e11d6ab":"code","c3344199":"code","b1aa59aa":"code","ece0f37a":"code","9c738513":"code","1a235e0d":"code","4fdf9748":"code","e603e6b9":"markdown","928bd5c5":"markdown","391fbc6f":"markdown","441478ad":"markdown","42564075":"markdown","7e80b13f":"markdown","9713ecd2":"markdown","91e42007":"markdown","9f865a61":"markdown","9793e7db":"markdown","7aad1170":"markdown"},"source":{"becd8eb8":"# Import the necessary packages and modules\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Prepare the data\nx = [1,2,3,4]\ny= [1,4,9,10]\n\n# Plot the data\nplt.plot(x, y, label='legend')\n\n#Add Title\nplt.title(\"First Graph\")\nplt.ylabel(\"Y Label\")\nplt.xlabel(\"X Label\")\n\n# Add a legend\nplt.legend(loc=\"upper left\")\n\n# Show the plot\nplt.show()\n\n","44acc8f7":"\n# Prepare the data\nx = [1,2,3,4]\ny= [1,4,9,10]\n\n#FigureSize\nplt.figure(figsize=(15,6))\n\n# Plot the data\nplt.plot(x, y, label='legend')\n\n#Add Title\nplt.title(\"Title\")\nplt.ylabel(\"Y Label\")\nplt.xlabel(\"X Label\")\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n","edc0167b":"#FigureSize\nplt.figure(figsize=(15,6))\n\n# Plot the data\nplt.plot(x, x, \"go\") #Go is the additional arugument , it will print graph using the dots or circle.\n\n#Add Title\nplt.title(\"Title\")\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()","88702dd0":"#FigureSize\nplt.figure(figsize=(15,6))\n\n# Plot the data\nplt.plot([3,6,9,13],[2,5,9,16], \"go\", [4,5,8,12],[1,4,8,15],'r^') #Go is the additional arugument , it will print graph using the dots or circle.\n\n#Add Title\nplt.title(\"Title\")\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()","a07932f5":"#FigureSize\nplt.figure(figsize=(15,6))\n\n# Plot the data\nplt.subplot(1,2,1)\nplt.plot([3,6,9,13],[2,5,9,16], \"go\")\nplt.title(\"Subplot-1\")\n\nplt.subplot(1,2,2)\nplt.plot([4,5,8,12],[1,4,8,15],'r^')\nplt.title(\"Subplot-2\")\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()","67bc30a8":"#FigureSize\nplt.figure(figsize=(15,6))\n\n# Plot the data\nplt.subplot(2,2,1)\nplt.plot([3,6,9,13],[2,5,9,16], \"go\")\nplt.title(\"Subplot-1\")\n\nplt.subplot(2,2,2)\nplt.plot([4,5,8,12],[1,4,8,15],'r^')\nplt.title(\"Subplot-2\")\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()","6f6873e4":"fig, (ax1, ax2) = plt.subplots(1, 2)\nfig.suptitle('Subplots')\nax1.plot([3,6,9,13],[2,5,9,16], \"go\")\nax2.plot([4,5,8,12],[1,4,8,15],'r^')","20072cec":"cls_name = ['A','B','C','D','E']\ntotal_std = [20,30,40,50,60]\nplt.bar(cls_name,total_std,color=\"Blue\")\nplt.title(\"Bar Graph\")\nplt.ylabel(total_std)\nplt.xlabel(cls_name)\nplt.show()","1e11d6ab":"cls_name = ['A','B','C','D','E']\ntotal_std = [20,30,40,50,60] \nvariance = [7,8,9,10,11]\nplt.barh(cls_name,total_std, xerr=variance,color=\"Blue\")\nplt.title(\"Bar Graph\")\nplt.ylabel(total_std)\nplt.xlabel(cls_name)\nplt.show()","c3344199":"cls_name = ['A','B','C','D','E']\ntotal_std = [20,30,40,50,60] \ntotal_boys = [7,8,9,10,11]\n\nindex = np.arange(5)\nwidth=0.30\n\nplt.bar(index,total_std, width,color=\"Green\", label = \"Total Students\")\nplt.bar(index+width,total_boys, width,color=\"Yellow\", label = \"Total Boys\")\n\nplt.title(\"Horizontally Stacked Bar Graph\")\nplt.ylabel(\"Total Students\")\nplt.xlabel(\"Total Boys\")\nplt.xticks(index+width\/2,cls_name)\nplt.legend(loc=\"best\")\nplt.show()","b1aa59aa":"cls_name = ['A','B','C','D','E']\ntotal_std = [20,30,40,50,60] \ntotal_boys = [7,8,9,10,11]\n\nindex = np.arange(5)\nwidth=0.30\n\nplt.bar(index,total_std, width,color=\"Green\", label = \"Total Students\")\nplt.bar(index,total_boys, width,color=\"Yellow\", label = \"Total Boys\", bottom =total_std)\n\nplt.title(\"Horizontally Stacked Bar Graph\")\nplt.ylabel(\"Total Students\")\nplt.xlabel(\"Total Boys\")\nplt.xticks(index,cls_name)\nplt.legend(loc=\"best\")\nplt.show()","ece0f37a":"x = np.random.randn(1000)\nplt.title(\"Histogram\")\n\nplt.ylabel(\"Frequency\")\nplt.xlabel(\"Random Data\")\n\nplt.hist(x,bins=30)\nplt.show()","9c738513":"Technologies = [\"Tech-1\",\"Tech-2\",\"Tech-3\",\"Tech-4\",\"Tech-5\"]\ntech_pop = [30,25,40,60,80]\nExplode = [0,0.1,0,0,0.2]\nplt.pie(tech_pop,explode=Explode,labels=Technologies,shadow=True,startangle=45)\nplt.axis('equal')\nplt.legend(loc=\"best\")\nplt.show()\n","1a235e0d":"Height = np.array([110,120,130,160,180,190])\nWeight = np.array([50,60,70,85,95,100])\n# Plot\nplt.scatter(Height,Weight)\nplt.title('Scatter plot')\nplt.xlabel('Height')\nplt.ylabel('Weight')\nplt.show()","4fdf9748":"from mpl_toolkits import mplot3d\nax = plt.axes(projection='3d')\nax.scatter3D(Height,Weight,color=\"green\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")","e603e6b9":"# Histogram","928bd5c5":"# **Stacked Bar**","391fbc6f":"We can also plot multiple sets of data by passing in multiple sets of arguments of X and Y axis in the plot() method as shown.","441478ad":"# **Pie-Chart**","42564075":"# **Bar Graphs**","7e80b13f":"# **3-D Plot**","9713ecd2":"**What is Seaborn and MatplotLib Liberary**\n**IPython **is an interactive command-line terminal for Python. ... In other words, IPython is a powerful interface to the Python language. But it is certainly not the only one. Besides IPython, the most common way to use Python is to write scripts, files with the .py extension.\n\n**Matplotlib.pyplot** is a collection of command style functions that make matplotlib work like MATLAB. Each pyplot function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc.\n\n**%matplotlib** is a magic function in IPython.**%matplotlib inline** sets the backend of matplotlib to the 'inline' backend: With this backend, the output of plotting commands is displayed inline within frontends like the Jupyter notebook, directly below the code cell that produced it\n\n**Use of MatplotLib**\nThis is a plotting library used for 2D graphics in python programming language. It can be used in python scripts, shell, web application servers and other graphical user interface toolkits.\n\n**Seaborn** is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics. It is a library for making statistical graphics in Python. It is built on top of matplotlib and closely integrated with pandas data structures. Seaborn offers Specialized support for using categorical variables to show observations or aggregate statistics.\n\n**Seaborn.lmplot.** Seaborn's lmplot is a 2D scatterplot with an optional overlaid regression line. This is useful for comparing numeric variables.If there are multiple instances of each variable along x, you can provide a reduction function to x_estimator to visualize a summary statistic such as the mean.\n\n**Seaborn:** statistical data visualization. Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n\n**Difference between MatplotLib and Seaborn**\n\n\n* **Matplotlib** is mainly deployed for basic plotting. Visualization using Matplotlib generally consists of bars, pies, lines, scatter plots and so on. On the other hand **Seaborn** specializes in statistics visualization and is used if one has to summarize data in visualizations and also show the distribution in the data. \n*  **Matplotlib** works with data frames and arrays. It has different stateful APIs for plotting. The figures and aces are represented by the object and therefore plot() like calls without parameters suffices, without having to manage parameters. **Seaborn** works with the dataset as a whole and is much more intuitive than Matplotlib. For Seaborn, replot() is the entry API with \u2018kind\u2019 parameter to specify the type of plot which could be line, bar, or many of the other types. Seaborn is not stateful. Hence, plot() would require passing the object.\n\n\n*   **Matplotlib** is highly customizable and powerful. Whereas **Seaborn** avoids a ton of boilerplate by providing default themes which are commonly used.\n\n**Which one should use:**\n\n\u201cIf Matplotlib \u201ctries to make easy things easy and hard things possible\u201d, seaborn tries to make a well-defined set of hard things easy too.\u201d \u2013 Michael Waskom (Creator of Seaborn)\n\n1.Seaborn comes with a large number of high-level interfaces and customized themes that matplotlib lacks as it\u2019s not easy to figure out the settings that make plots attractive.\n\n2.Matplotlib functions don\u2019t work well with dataframes, whereas seaborn does","91e42007":"# **Multiple plots in one figure:**","9f865a61":"# **Scatter Plots**","9793e7db":"# **MatplotLib**\n","7aad1170":"Happy Data Science...\n\n"}}