{"cell_type":{"330f5422":"code","e89d252c":"code","e299b4a7":"code","3d7e2005":"code","fa3c5c67":"code","ee713689":"code","ecfafcda":"code","768e3bf1":"code","0e7d1384":"code","88679922":"code","a570aafa":"code","93cbf9fc":"code","6057f733":"markdown","28ef0001":"markdown","5bd56703":"markdown","825fdc52":"markdown","5af2e0a7":"markdown","6e8a8874":"markdown","5af9bec3":"markdown","10575354":"markdown"},"source":{"330f5422":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary fileAge,Sex,BP,Cholesterol,Na_to_K,Drug\n","e89d252c":"import numpy as np \nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics#check the accuracy of our model.\nimport matplotlib.pyplot as plt\n#for visualisation\nfrom six import StringIO\n#!pip install pydotplus\nimport pydotplus\nimport matplotlib.image as mpimg\nfrom sklearn import tree\n","e299b4a7":"my_data = pd.read_csv(\"..\/input\/drugdataset\/drug200.csv\", delimiter=\",\")\nmy_data[0:5]","3d7e2005":"X = my_data[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values\nX[0:5]","fa3c5c67":"from sklearn import preprocessing\nle_sex = preprocessing.LabelEncoder()\nle_sex.fit(['F','M'])\nX[:,1] = le_sex.transform(X[:,1]) \n\n\nle_BP = preprocessing.LabelEncoder()\nle_BP.fit([ 'LOW', 'NORMAL', 'HIGH'])\nX[:,2] = le_BP.transform(X[:,2])\n\n\nle_Chol = preprocessing.LabelEncoder()\nle_Chol.fit([ 'NORMAL', 'HIGH'])\nX[:,3] = le_Chol.transform(X[:,3]) \n\nX[0:5]","ee713689":"y = my_data[\"Drug\"]\nX_trainset, X_testset, y_trainset, y_testset = train_test_split(X, y, test_size=0.3, random_state=3)","ecfafcda":"drugTree = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4)","768e3bf1":"drugTree.fit(X_trainset,y_trainset)","0e7d1384":"predTree = drugTree.predict(X_testset)\nprint (predTree [0:5])\nprint (y_testset [0:5])","88679922":"print(\"DecisionTrees's Accuracy: \", metrics.accuracy_score(y_testset, predTree))","a570aafa":"%matplotlib inline ","93cbf9fc":"from sklearn import tree\nfrom pydotplus import graph_from_dot_datadot_data \n\nfilename = \"drugtree.png\"\nfeatureNames = my_data.columns[0:5]\ntargetNames = my_data[\"Drug\"].unique().tolist()\nout=tree.export_graphviz(drugTree,feature_names=featureNames, out_file=dot_data, class_names= np.unique(y_trainset), filled=True,  special_characters=True,rotate=False)  \ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png(filename)\nimg = mpimg.imread(filename)\nplt.figure(figsize=(100, 200))\nplt.imshow(img,interpolation='nearest')","6057f733":"## visualisation","28ef0001":"## will use (Decision Tree) algorithm to build a model from historical data of patients, and their respond to different medications. Then you use the trained decision tree to predict the class of a unknown patient, or to find a proper drug for a new patient.","5bd56703":"## prediction","825fdc52":"Convert categorical variable into dummy\/indicator variables.","5af2e0a7":"fill the target variable. and split the data","6e8a8874":"Remove the column containing the target name since it doesn't contain numeric values.","5af9bec3":"check the accuracy of the model","10575354":"creating the instance of the classifier"}}