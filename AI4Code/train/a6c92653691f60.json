{"cell_type":{"8df7690e":"code","c0a2fa73":"code","4b2032ca":"code","34dabfcd":"code","c00bcfe0":"code","3329e1af":"code","100e30d3":"code","808dd2fe":"code","bf57d8ca":"code","6fa9beda":"code","002c2593":"code","f58ffe33":"code","81a63c6d":"code","64a3721a":"code","9fa38ac0":"code","cc26f52f":"code","2d31dc25":"code","bb729dff":"code","41020526":"code","fd117cc5":"code","8730d9ce":"code","dda26803":"code","302d6a2f":"code","a4a7636c":"code","e8f29677":"code","673020fa":"code","5cb4d51c":"code","baa66d03":"code","edccf5fa":"code","cd9b571c":"code","e4f32782":"code","c0825b8a":"code","5098419d":"code","19329e53":"code","273eb619":"code","95f3dbe3":"code","78132920":"code","0af60255":"code","dd52b8de":"code","59d08eb7":"code","7166b16b":"code","3df6edd3":"code","925d3d6b":"markdown","fc3f165b":"markdown","8780a52c":"markdown","82b92e5d":"markdown","0faff3b4":"markdown","0045e67d":"markdown","cd6d50cf":"markdown","1999aec3":"markdown","1bc64f3a":"markdown","17f59ab4":"markdown","1415585f":"markdown","a9b86de4":"markdown"},"source":{"8df7690e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom scipy.stats import pearsonr\nimport statsmodels.api as sm\nfrom statsmodels.sandbox.regression.predstd import wls_prediction_std\nfrom sklearn.preprocessing import scale\nfrom scipy import stats\nsns.set_style(\"darkgrid\")\nplt.style.use(\"fivethirtyeight\")\nimport warnings\nwarnings.filterwarnings('ignore')","c0a2fa73":"bdf=pd.read_csv('..\/input\/game-of-thrones\/battles.csv')\ncddf=pd.read_csv('..\/input\/game-of-thrones\/character-deaths.csv')","4b2032ca":"print('The no of columns and rows in battle csv :',bdf.shape)\nprint('The no of columns and rows in character csv :',cddf.shape)","34dabfcd":"print('Name of the columns in battle dataset: ', bdf.columns)\nprint('Name of the columns in charecter data set :', cddf.columns)","c00bcfe0":"print('sneeking the 1st five rows of battels data :')\nbdf.head()","3329e1af":"print('sneeking the last five rows of battels data :')\nbdf.tail()","100e30d3":"print('finding the datatype and non- null count of each row: ')\nbdf.info()","808dd2fe":"#here we can see that total no of numerical columns are 9 and object columns 16","bf57d8ca":"print('lets observed the no of battels along with name :')\npd.melt(frame=bdf, id_vars=\"year\",value_vars=\"name\")","6fa9beda":"bdf.corr().style.background_gradient(cmap='Reds')","002c2593":"fig,ax=plt.subplots(figsize=(20,8))\nsns.heatmap(bdf.corr(),annot=True);","f58ffe33":"bpy=bdf.groupby('year',as_index=False).sum()\nplt.barh(bpy['year'],bpy['battle_number'])\nplt.xticks(rotation=90);","81a63c6d":"#attacker size count..\nplt.figure(figsize=(20,8))\nsns.countplot(bdf['attacker_size']);","64a3721a":"plt.figure(figsize=(20,8))\nsns.countplot(bdf['defender_size']);","9fa38ac0":"bdf['battle_type'].value_counts().plot(kind = 'barh');","cc26f52f":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.countplot(bdf['attacker_king'])\nplt.xticks(rotation=70)\nplt.subplot(1,2,2)\nsns.countplot(bdf['battle_type']);\nplt.xticks(rotation=70);","2d31dc25":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.countplot(bdf['defender_king'])\nplt.xticks(rotation=70)\nplt.subplot(1,2,2)\nsns.countplot(bdf['battle_type']);\nplt.xticks(rotation=70);","bb729dff":"pd.crosstab(bdf['attacker_king'],bdf['attacker_outcome']).plot(kind='bar',figsize=(15,5));\nplt.xticks(rotation='horizontal');","41020526":"#find attacjer king and battles type\nplt.figure(figsize=(20,8))\nsns.countplot(bdf['attacker_king'],hue=bdf['battle_type']);","fd117cc5":"plt.figure(figsize=(20,8))\nsns.countplot(bdf['attacker_king'],hue=bdf['attacker_outcome']);","8730d9ce":"plt.figure(figsize=(20,8))\nsns.countplot(bdf['attacker_commander'],hue=bdf['attacker_outcome']);\nplt.xticks(rotation=90);","dda26803":"plt.figure(figsize=(20,8))\nsns.countplot(bdf['attacker_king'],hue=bdf['defender_king']);\nplt.xticks(rotation=90);","302d6a2f":"bdf.loc[:, \"totaldefender\"] = (4 - bdf[[\"defender_1\", \"defender_2\", \"defender_3\", \"defender_4\"]].isnull().sum(axis = 1))\nbdf.loc[:, \"totalattacker\"] = (4 - bdf[[\"attacker_1\", \"attacker_2\", \"attacker_3\", \"attacker_4\"]].isnull().sum(axis = 1))\nbdf.loc[:, \"totalcommon\"] = [len(x) if type(x) == list else np.nan for x in bdf.attacker_commander.str.split(\",\")]","a4a7636c":"p = sns.boxenplot(\"totalcommon\", \"attacker_king\", data = bdf, saturation = .6,palette = [\"lightgray\", sns.color_palette()[1], \"grey\", \"darkblue\"])\n_ = p.set(xlabel = \"No. of Attacker Commanders\", ylabel = \"Attacker King\", xticks = range(8))","e8f29677":"p = sns.boxenplot(\"totaldefender\", \"defender_king\", data = bdf, saturation = .6,palette = [\"lightgray\", sns.color_palette()[1], \"grey\", \"darkblue\"])\n_ = p.set(xlabel = \"No. of defender commander\", ylabel = \"defender king\", xticks = range(8))","673020fa":"bdf['attacker_size'].mean()","5cb4d51c":"bdf['defender_size'].mean()","baa66d03":"nbdf = bdf[['defender_size','attacker_size','attacker_outcome']].dropna()","edccf5fa":"nbdf.reset_index(inplace=True)","cd9b571c":"nbdf = nbdf.iloc[:,1:]","e4f32782":"sns.pairplot(nbdf, hue='attacker_outcome');","c0825b8a":"bdf.groupby('battle_type')['attacker_outcome'].value_counts().plot(kind = 'bar');","5098419d":"bdf['region'].value_counts().plot(kind = 'pie');","19329e53":"sns.countplot(x=bdf['location'])\nplt.xticks(rotation=90);","273eb619":"plt.figure(figsize=(20,8))\nsns.countplot(bdf['attacker_king'],hue=bdf['region']);","95f3dbe3":"plt.figure(figsize=(20,8))\nsns.countplot(bdf['defender_king'],hue=bdf['region']);","78132920":"data = bdf.groupby(\"region\").sum()[[\"major_death\", \"major_capture\"]]\np = pd.concat([data, bdf.region.value_counts().to_frame()], axis = 1).sort_values(\"major_death\", ascending = False).copy(deep = True).plot.bar(color = [sns.color_palette()[1], \n\"grey\", \"darkblue\"], rot = 0)\n_ = p.set(xlabel = \"Region\", ylabel = \"No. of Events\"), p.legend([\"No. of Battles\", \"Major Deaths\", \"Major Captures\"], fontsize = 12.)\nplt.xticks(rotation=90);","0af60255":"cddf['Allegiances'] = cddf['Allegiances'].apply(lambda x : 'House Martell' if(x == 'Martell') else 'House Stark' if(x=='Stark') else 'House Targaryen' if(x=='Targaryen') else 'House Tully' if(x=='Tully') else 'House Tyrell' if(x=='Tyrell') else x)","dd52b8de":"cddf['Gender'].value_counts().plot(kind = 'pie');","59d08eb7":"cddf['Allegiances'].value_counts().plot(kind = 'bar', stacked='True');","7166b16b":"cddf[cddf['Death Year'].notnull()]['Allegiances'].value_counts().plot(kind = 'barh',color='y');","3df6edd3":"fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(18, 12))\nsns.violinplot(x=\"year\", y=\"battle_number\", data=bdf,color = 'pink',ax=axes[0][0]).set_title('battle number')\nsns.swarmplot(x=\"year\", y=\"battle_number\", data=bdf,ax = axes[0][0])\n\nsns.violinplot(x=\"year\", y=\"major_death\", data=bdf,color = 'pink',ax=axes[0][1]).set_title('major_death')\nsns.swarmplot(x=\"year\", y=\"major_death\", data=bdf,ax = axes[0][1])\n\nsns.violinplot(x=\"year\", y=\"major_capture\", data=bdf,color = 'pink',ax=axes[1][0]).set_title('major_capture')\nsns.swarmplot(x=\"year\", y=\"major_capture\", data=bdf,ax = axes[1][0])\n\nsns.violinplot(x=\"year\", y=\"attacker_size\", data=bdf,color = 'pink',ax=axes[1][1]).set_title('attacker_size')\nsns.swarmplot(x=\"year\", y=\"attacker_size\", data=bdf,ax = axes[1][1])\n\nsns.violinplot(x=\"year\", y=\"defender_size\", data=bdf,color = 'pink',ax=axes[2][0]).set_title('defender_size')\nsns.swarmplot(x=\"year\", y=\"defender_size\", data=bdf,ax = axes[2][0])\n\nsns.violinplot(x=\"totaldefender\", y=\"totalattacker\", data=bdf,color = 'gray',ax=axes[2][1]).set_title('totalattacker vs totaldefender')\nsns.swarmplot(x=\"totaldefender\", y=\"totalattacker\", data=bdf,ax = axes[2][1])\n\nplt.grid()\nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=1)\nfig.tight_layout()\nfig.subplots_adjust(top=0.95)\nplt.show()\n","925d3d6b":"# Content\nThis dataset combines three sources of data, all of which are based on information from the book series.\n\nFirstly, there is battles.csv which contains Chris Albon's \"The\nWar of the Five Kings\" Dataset. Its a\ngreat collection of all of the battles in the series.\n\nSecondly we have character-deaths.csv from Erin Pierce and Ben\nKahle. This dataset was created as a part of their Bayesian Survival\nAnalysis.\n\nFinally we have a more comprehensive character dataset with\ncharacter-predictions.csv. It\nincludes their predictions on which character will die","fc3f165b":"# now doing EDA on Battels","8780a52c":"# Load Data","82b92e5d":"# visualion with step by step analysis","0faff3b4":"count of battels per year","0045e67d":"# Read the Data And Sneeking Variables","cd6d50cf":"Correlations\nLet's take a look at how everything is correlated within their datasets, and how they are correlated to each other. A positive number indicates that as x increases, so does y. A negative number indicates that as x increases, y decreases.","1999aec3":"charecter deth analysis.","1bc64f3a":"# Context\nGame of Thrones is a hit fantasy tv show based on the equally famous book series \"A Song of Fire and Ice\" by George RR Martin. The show is well known for its vastly complicated political landscape, large number of characters, and its frequent character deaths.","17f59ab4":"# Load Libraries","1415585f":"#Here we can observed that there are around 38 battels fought and time line is varied from 298 to 300.","a9b86de4":"# conclusion\nif this visualization is helpfull kindly upvote!!! :) "}}