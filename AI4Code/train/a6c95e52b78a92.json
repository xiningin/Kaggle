{"cell_type":{"6bc25647":"code","21187e09":"code","65317c6b":"code","67d3d900":"code","308ecce3":"code","c794cc51":"code","804efd55":"code","314dfddd":"code","d121591e":"code","0659ec37":"code","7c4ff3cc":"code","d782d847":"code","bd8e1f7a":"code","ef73638b":"code","3733d79e":"code","893331d0":"code","3860752d":"code","fe57e59a":"code","64cf83df":"code","5afa2afb":"code","4d1fa375":"code","7a531f73":"code","2481360b":"code","2111a8da":"code","14572f3c":"code","f0f00401":"code","f95a21cc":"code","9571d85d":"code","339d84a7":"code","5b926e0e":"code","3a9120bc":"code","11adb98e":"code","0ff952e0":"code","dc4f387f":"code","97dbbe6c":"code","fb867936":"code","38994b3c":"code","fd704664":"code","cd188c3f":"code","faf87fa1":"code","087f64d6":"code","141542f1":"code","5977ca57":"code","46203b64":"code","ee224555":"code","f79fa40e":"code","bb3ee956":"code","174905a3":"code","948af735":"code","c4a438f3":"code","8ece4568":"code","b9b3c7eb":"code","7fa04f0f":"markdown","89f13ae7":"markdown","64d90ca0":"markdown","e01fd324":"markdown","42ef728f":"markdown","edb361da":"markdown","00faed78":"markdown","724e9472":"markdown","e151e2c9":"markdown","0292ff42":"markdown","38b1c1da":"markdown","bb0fdbcc":"markdown","a2ef085c":"markdown","93697005":"markdown","c83df280":"markdown","df01f3b1":"markdown","e6b54b96":"markdown","8c21372d":"markdown","d840f750":"markdown","4779e8b0":"markdown","4fcc0236":"markdown","2469c7c0":"markdown","e9921088":"markdown","7eb1d52e":"markdown","d6858838":"markdown","d66aaca3":"markdown","9df5006e":"markdown","3430e964":"markdown","0f06fb95":"markdown","30009a2c":"markdown","9338c313":"markdown"},"source":{"6bc25647":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport re\nimport numpy as np\nimport time\nfrom bs4 import BeautifulSoup\nimport requests\nfrom wordcloud import WordCloud, STOPWORDS\n%matplotlib inline","21187e09":"import warnings\n\nwarnings.filterwarnings('ignore')","65317c6b":"nf = pd.read_csv('..\/input\/netflix-shows\/Netflix Shows.csv', encoding='latin-1')\nnf.head(10)","67d3d900":"df = nf.drop_duplicates() \ndf","308ecce3":"df.rename(columns = {'ratingLevel':'ratingDescription','ratingDescription':'ratingLevel' }, inplace = True)  ","c794cc51":"df = df.set_index(np.arange(0,500))","804efd55":"df.describe()","314dfddd":"df['ratingDescription'].fillna(\"Not_Filled\", inplace=True) ","d121591e":"Rating_Count = (df[\"rating\"].value_counts()).sort_index()\nRating_Count","0659ec37":"Ser = []\n\nfor i in Rating_Count.index:   #iterate through Rating_Count\n    df_i = df.where(df['rating'] == i) #new dataframe is created where rating value is same as i. Example : new dataframe where rating == 'G'\n    max_val = (df_i[\"ratingDescription\"].value_counts()).sort_index() #list of rating description values along with their counts\n    Ser.append(max_val.index[max_val.values == max_val.max()][0]) # get max occuring description and append to a list\n    \nSer","7c4ff3cc":"new_df = pd.DataFrame({'rating': Rating_Count.index, 'Max_found_description': Ser}) #created new dataframe for maximun description occurence\nnew_df","d782d847":"for i in range(len(df.index)):\n    if 'Not_Filled' in df['ratingDescription'][i]:\n        rating = df['rating'][i]\n        description = new_df.loc[new_df['rating'] == rating, 'Max_found_description'].values[0]\n        df['ratingDescription'][i] = description\n        ","bd8e1f7a":"df[:10]","ef73638b":"def get_genre(lst_val): #gets genre from wikipedia : returns a List\n    url = \"https:\/\/en.wikipedia.org\/wiki\/\" + lst_val #last_val is the title of show\/movie\n    page = requests.get(url) \n    soup = BeautifulSoup(page.content, 'html.parser')\n    capi = soup.find_all(\"td\",class_=\"category\")\n    fill_val = [re.sub(r\"\\[\\d+\\]\", \"\", i.get_text().strip().replace(\"\\n\",\", \")) for i in capi]\n    return fill_val","3733d79e":"def get_info_rt(url_val): #gets details from rotten tomatoes : returns a Series\n    url_mov =\"m\/\"\n    url_tv = \"tv\/\"\n    url = \"https:\/\/www.rottentomatoes.com\/\"\n\n    page = requests.get(url + url_mov + url_val)\n    soup = BeautifulSoup(page.content, 'html.parser')\n\n    capi = soup.select(\"ul.content-meta.info li\")\n    fill_val = [i.find(class_=\"meta-value\").get_text().replace(\"\\n\",\"\").strip().replace(\"and\",\",\").replace(\" \",\"\") for i in capi] \n    fill_lbl = [i.find(class_=\"meta-label\").get_text().replace(\"\\n\",\"\").strip(\":\").replace(\"and\",\",\").replace(\" \",\"\") for i in capi] \n    final_ser = pd.Series(fill_val,index=fill_lbl)\n    \n    if(len(final_ser) <= 1):\n        page = requests.get(url + url_tv + url_val)\n        soup = BeautifulSoup(page.content, 'html.parser')\n\n        cont = soup.select(\"div.panel-body.content_body td\")\n        fill_lbl = [i.get_text().replace(\" \\n\",\"\").strip(\": \\n\").replace(\" \",\"\") for i in cont][::2]\n        fill_val = [i.get_text().replace(\" \\n\",\"\").strip(\": \\n\").replace(\" \",\"\") for i in cont][1::2]\n        final_ser = pd.Series(fill_val,index=fill_lbl)\n        return final_ser\n\n    return final_ser","893331d0":"#Script to pull Genre from wikipedia and rotten tomatoes\nt1 = time.time()\n\ndf['Genre'] = \"not found\"\nlist_titles =  [i.strip().replace(\" \",\"_\") for i in df['title']]\n\n#If a particular title doesnt work, try appending the values below to the title \nchange_titles = ['_(TV_series)','_(American_TV_series)','_(franchise)']\n\n#since many shows had title tracks with the same name, results were of the song instead of the tv show\/movie. \n# Hence to avoid them.\nsongs_to_avoid = \"alternative rock ska pop funk hip hop electronic film score jazz classical orchestra country feature film soundtrack hindi\"\n\n\nfor i in range(len(df.index[:])):\n        wiki_status = 0\n        #print(i)\n        fill_val = get_genre(list_titles[i])\n        \n\n        if len(fill_val) > 0: \n            test_val = fill_val[0].lower().split(\",\",1)[0]\n\n            x = test_val.strip() not in songs_to_avoid\n\n            if x:\n                wiki_status = 1\n                df['Genre'][i] = \" \".join(fill_val)\n                continue\n            \n        for j in change_titles:\n            changed_title = list_titles[i] + j\n            fill_val2 = get_genre(changed_title)\n            \n\n            if len(fill_val2) > 0:\n                wiki_status = 1\n                df['Genre'][i] = \" \".join(fill_val2) \n                break\n\n        if wiki_status == 0 :\n            value_change = list_titles[i].lower()\n            from_rt = get_info_rt(value_change)\n            if len(from_rt)>0:\n                df['Genre'][i] = from_rt.get(key = 'Genre')\n                \n            else:\n                year = str(df['release year'][i])\n                value_change2 = value_change + \"_\" + year\n                from_rt2 = get_info_rt(value_change2)\n                df['Genre'][i] = from_rt2.get(key = 'Genre')\n                \n            \nt2= time.time()\ntime_ = t2-t1\nprint(\"Done in seconds : \",time_)","3860752d":"#Create additionl column for age restricted details\n\ndf['Age Restriction'] = \"None\"\nfor i in range(len(df['ratingDescription'])):\n    num = \" \".join(re.findall(r'[0-9]+', df['ratingDescription'][i]))\n    if num:\n        df['Age Restriction'][i] =num + \"+\" \n    else:\n        df['Age Restriction'][i] = \"\" ","fe57e59a":"df[:10]","64cf83df":"df.to_csv('netflix_shows_with_genre.csv', index=True) ","5afa2afb":"df2 = pd.read_csv('.\/netflix_shows_with_genre.csv', encoding='UTF-8')\ndf2.head(10)","4d1fa375":"#Script to obtain trending Genre and rating in each decade\n\nfrom collections import OrderedDict \nstart = df2['release year'].min()\n\nlabels = []\nvalues = [] \ngenre = [] \nvalues_acc_score =[]\ngenre_acc_score = []\n\nfor i in range(len(df2)):\n    \n    end = start + 10\n    span = str(start) + \"-\" + str(end)\n    new_df = df2[(df2['release year'] >=start) & (df2['release year'] < end)]\n    new_df = new_df[new_df['Genre'].notna()]\n    new_df = new_df.set_index(np.arange(0,len(new_df)))\n\n    if len(new_df) > 0:\n        labels.append(span)\n\n        #find trending rating and genre according to rating level\n        max_user_rating = [new_df['rating'][i] for i in range(len(new_df)) if new_df['ratingLevel'][i] == new_df['ratingLevel'].max()]\n        max_genre = [str(new_df['Genre'][i]).lower() for i in range(len(new_df)) if new_df['ratingLevel'][i] == new_df['ratingLevel'].max()]\n        values.append(list(OrderedDict.fromkeys(max_user_rating)))\n        genre.append(list(OrderedDict.fromkeys(max_genre)))\n\n        #find trending rating and genre according to user rating score\n        max_rating_score =[new_df['rating'][i] for i in range(len(new_df)) if new_df['user rating score'][i] == new_df['user rating score'].max()]\n        max_genre_score = [new_df['Genre'][i].lower() for i in range(len(new_df)) if new_df['user rating score'][i] == new_df['user rating score'].max()]\n        values_acc_score.append(list(OrderedDict.fromkeys(max_rating_score)))\n        genre_acc_score.append(list(OrderedDict.fromkeys(max_genre_score)))\n\n    start = start+ 10\n    if start > 2017 :\n        break\n\nTrends = pd.DataFrame( columns=['Trending rating based on ratingLevel','Trending genre based on ratingLevel',\n        'Trending rating based on user rating score','Trending genre based on user rating score'], index=labels)\nTrends['Trending rating based on ratingLevel'] =[\",\".join(set(i)) for i in values]\nTrends['Trending genre based on ratingLevel'] = [\",\".join(set(i)) for i in genre]\nTrends['Trending rating based on user rating score'] = [\",\".join(i) for i in values_acc_score]\nTrends['Trending genre based on user rating score'] = [\",\".join(i) for i in genre_acc_score]\nTrends['Trending genre based on ratingLevel'][5] = \",\".join(list(OrderedDict.fromkeys(Trends['Trending genre based on ratingLevel'][5].split(\",\"))))\nTrends['Trending genre based on ratingLevel'][4] = \",\".join(list(OrderedDict.fromkeys(Trends['Trending genre based on ratingLevel'][4].split(\",\"))))\n\n        \nTrends","7a531f73":"#Trending Genre in 20th century\n\ncomment_words = '' \nstopwords = set(STOPWORDS) \n\nlst = Trends['Trending genre based on ratingLevel'][:4].values.tolist() + Trends['Trending genre based on user rating score'][:4].values.tolist()\n\nfor val in lst: \n    val = str(val) \n    tokens = val.split() \n\n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    comment_words += \" \".join(tokens)+\" \"\n  \nwordcloud = WordCloud(width = 600, height = 400, background_color ='black', stopwords = stopwords, min_font_size = 10).generate(comment_words) \n                       \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","2481360b":"#Trending Genre for shows in 21st century\n\ncomment_words = '' \nstopwords = set(STOPWORDS) \nlst = Trends['Trending genre based on ratingLevel'][4:].values.tolist() + Trends['Trending genre based on user rating score'][4:].values.tolist()\n\nfor val in lst: \n    val = str(val) \n    tokens = val.split() \n\n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    comment_words += \" \".join(tokens)+\" \"\n  \nwordcloud = WordCloud(width = 600, height = 400, background_color ='black', stopwords = stopwords, min_font_size = 10).generate(comment_words) \n                       \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","2111a8da":"rating_freq = df2['rating'].value_counts()\n\nplt.figure(figsize=(15,10))\nrating_freq.plot.bar(color='teal',alpha=0.5)\nplt.xticks(rotation=50)\nplt.xlabel(\"Ratings\")\nplt.ylabel(\"Frequency of ratings\")\nplt.title(\"Rating Frequency Overall\")\nplt.show()\nplt.close()","14572f3c":"age_freq = df2['Age Restriction'].value_counts().sort_values(ascending= True)\n\nfig = plt.figure(figsize = (8, 6))\nax = fig.add_subplot()\nexplode = (0, 0, 0, 0.1)\ncolors = np.arange(4)\nax.pie(age_freq.values, explode=explode,labels = age_freq.index,shadow=True,\nautopct = '%1.1f%%',textprops = {'fontsize': 15, 'color' : \"black\"})\nax.set_title(\"Agre restriction frequency on Shows\/Movies\")\nax.axis('equal')\nplt.show()","f0f00401":"df_top = df2[df2['user rating score']>0].dropna()\ndf_top = df_top.set_index(np.arange(0,121))\ndf_top","f95a21cc":"score_freq = df_top['user rating score'].value_counts()\n\nplt.figure(figsize=(15,10))\nscore_freq.plot.bar(color='red', alpha=0.5)\nplt.xticks(rotation=50)\nplt.xlabel(\"User Rating scores\")\nplt.ylabel(\"Frequency of user rating score\")\nplt.title(\"User Rating Score Frequency\")\nplt.show()","9571d85d":"df_top.sort_values(\"user rating score\", axis = 0, ascending = False, inplace = True, na_position ='last')","339d84a7":"uniq = df_top['user rating score'].unique()","5b926e0e":"year_freq = df2['release year'].value_counts().sort_values(ascending= True)\nyear_freq","3a9120bc":"plt.figure(figsize=(15,10))\nyear_freq.plot.bar(color='blue', alpha=0.5)\nplt.xticks(rotation=50)\nplt.xlabel(\"Release Years\")\nplt.ylabel(\"Shows\/Movies Released\")\nplt.title(\"Shows\/Movies Released In Each Year\")\n\nplt.show()","11adb98e":"year_freq2 = df2['release year'].value_counts().sort_index(ascending= True)\nfig = plt.figure(figsize = (20, 10))\n\nax2 = fig.add_subplot()\nx = year_freq2.index\ny = year_freq2.values\nax2.plot(x,y, marker='o', linestyle='-', color='b', \nlabel='Shows\/Movies',alpha=0.5) \nax2.set_xlabel('Release Years')\nax2.set_ylabel('Shows\/Movies Released') \nax2.set_title('Shows\/Movies Released In Each Year')\nax2.legend(loc = \"upper left\") \n\nfor a,b in zip(x, y): \n    plt.text(a, b, str(b))\n\nplt.show()","0ff952e0":"rl_freq = df2['ratingLevel'].value_counts().sort_values(ascending= True)\n\nplt.figure(figsize=(13,8))\nrl_freq.plot.bar(color='blue', alpha=0.5)\nplt.xticks(rotation=50)\nplt.xlabel(\"Rating Levels\")\nplt.ylabel(\"Shows\/Movies\")\nplt.title(\"Shows\/Movies having rating Level\")\n\nplt.show()","dc4f387f":"rating_ = df2['rating'].unique()\nyear_ = df2['release year'].unique()\nyear_.sort()\nprint(\"Rating unique : \", rating_)\nprint(\"year unique : \", year_)","97dbbe6c":"c_list = []\nrating_count_lst = []\nfinal_c = 0\n\nfor i in range(len(year_)):\n    for j in range(len(rating_)):\n        count = 0\n        for k in range(len(df['rating'])):\n            if df2['rating'][k] == rating_[j] and df2['release year'][k] == year_[i]:\n                count += 1\n                final_c +=1\n        c_list.append(count)\n    rating_count_lst.append(c_list)\n    c_list =[]   \n\nprint(\"rating freq in yeach year\",rating_count_lst)\n#print(series_rating)\nprint(len(rating_count_lst))\nprint(final_c)\n","fb867936":"each_year = pd.DataFrame(rating_count_lst,columns=rating_, index= year_) #Create a dataframe for the result obtained above\neach_year","38994b3c":"maxValues = each_year.idxmax(axis = 1) #Highest movie ratings each year \nprint(maxValues) ","fd704664":"rating_overall = maxValues.value_counts()\nrating_overall","cd188c3f":"fig = plt.figure(figsize = (8, 6))\nax = fig.add_subplot()\nexplode = (0.1, 0, 0, 0,0,0,0,0)\ncolors = np.arange(4)\nax.pie(rating_overall.values, explode=explode,labels = rating_overall.index,shadow=True,\nautopct = '%1.1f%%',textprops = {'fontsize': 14, 'color' : \"black\"})\nax.set_title(\" Yearly Dominating Rating Frequency\")\nax.axis('equal')\nplt.show()","faf87fa1":"import seaborn as sns\n\nplt.figure(figsize=(15,15))\nsns.heatmap(each_year,linewidths=1,annot=True,fmt='2.0f',cmap=\"viridis\")\nplt.title('Rating Frequency from 1940 To 2017')","087f64d6":"year_df = each_year.drop(axis=0,index=[1940,1976,1978,1982,1987,1986,1989,1990]) \nyear_df","141542f1":"fig = plt.figure(figsize = (20, 10))\nax2 = fig.add_subplot()\nx= year_df.index\nc=['blue','slateblue','darkslateblue','indigo','orangered','olive','cadetblue','purple','darkred','peru','darkgreen','fuchsia','teal']\n\nfor i in range(len(rating_)):\n    ax2.plot(x,year_df[rating_[i]], marker='o', linestyle='-', color=c[i], label=rating_[i],alpha =0.5) \n\nax2.set_xlabel('Release Years')\nax2.set_ylabel('Movie Ratings Frequency') \nax2.set_title('Frequency of ratings of Shows\/Movies In Each Year')\nax2.legend(loc = \"upper left\") \n\n\nplt.show()","5977ca57":"for i in range(len(df2['rating'])):\n    if 'Suitable for all ages.' in df2['ratingDescription'][i]:\n        df2['Age Restriction'][i] = 'No Restriction'","46203b64":"age_freq = df2['Age Restriction'].value_counts().sort_values(ascending= True)\n\nfig = plt.figure(figsize = (8, 9))\nax = fig.add_subplot()\n#explode = (0, 0, 0, 0.1)\ncolors = np.arange(4)\nax.pie(age_freq.values,labels = age_freq.index,shadow=True,\nautopct = '%1.1f%%',textprops = {'fontsize': 15, 'color' : \"black\"})\nax.set_title(\"Agre restriction frequency on Shows\/Movies\")\nax.axis('equal')\nplt.show()","ee224555":"df2[10:20]","f79fa40e":"df_general_shows = df2[(df2['Age Restriction'] == 'No Restriction') & (df2['user rating score'] > 75)]\nx = df_general_shows.shape[0] #rows\nx","bb3ee956":"df_Mature_shows = df[(df['Age Restriction'] != 'no restriction') & (df['user rating score'] > 75)]\ny = df_Mature_shows.shape[0] #rows\ny","174905a3":"print(\"Ratio of popular general : mature movies\/shows in netflix --> \",int(x\/10), \":\", int(y\/10))","948af735":"df_top = df2[df2['user rating score']>0].dropna()\ndf_top = df_top.set_index(np.arange(0,145))\ndf_top","c4a438f3":"comment_words = '' \nstopwords = set(STOPWORDS) \n   \nfor val in df_top.title[:]: \n    val = str(val) \n    tokens = val.split() \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    comment_words += \" \".join(tokens)+\" \"\n  \nwordcloud = WordCloud(width = 700, height = 500, background_color ='black', stopwords = stopwords, min_font_size = 10).generate(comment_words) \n                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","8ece4568":"comment_words = '' \nstopwords = set(STOPWORDS) \n\nfor val in df_top.Genre: \n    val = str(val) \n    tokens = val.split() \n\n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    comment_words += \" \".join(tokens)+\" \"\n  \nwordcloud = WordCloud(width = 600, height = 400, background_color ='black', stopwords = stopwords, min_font_size = 10).generate(comment_words) \n                       \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","b9b3c7eb":"df2.to_csv('500_Netflix_Shows.csv', index=False) ","7fa04f0f":"The missing values in 'ratingDescription' are now filled.","89f13ae7":"## Describing the DataFrame","64d90ca0":"## Top shows\/movies","e01fd324":"## Get frequency of each ratings every year ","42ef728f":"## Trending Genre overall","edb361da":"## Frequency of each rating from the column 'rating'","00faed78":"## Final dataset to CSV file\n\nFinal dataset with two additional columns, 'Genre' and 'Age Restriction'. ","724e9472":"## Heat Map for the DataFrame created above","e151e2c9":"## Essential Libraries","0292ff42":"The function below pulls genre from wikipedia and returns a list of genres available for the corresponding shows\/movies in the Data Frame.","38b1c1da":"## Frequency for rating level","bb0fdbcc":"Rating description mentions the minimum agefor a viewer for each show\/movie which can be denotedin a seperate column ","a2ef085c":"## Rating frequency overall","93697005":"## Total Shows\/Movies released in each year","c83df280":"## Words commonly used in Titles among popular Movies","df01f3b1":"## Rename columns\n\nThe original dataset seems to have misplaced a couple of column names. Since there isn't much information available about it, I thought of renaming these columns for better understanding.","e6b54b96":"## Ratio of popularity for general vs Age restricted movies all together.","8c21372d":"## Count of ratings every year -- Create a DataFrame","d840f750":"## Create a Data Frame out of the resultant values.","4779e8b0":"## Drop duplicate rows","4fcc0236":"## Fill in the missing values in 'ratingDescription' with corresponding values in 'Max_found_description' column for each rating","2469c7c0":"## Adding new information regarding genre of each show\/movie through web scraping\n\nSince there was no genre related information in the dataset, I've come up with a script that pulls data from [wikipedia](https:\/\/www.wikipedia.org\/) and [rotten-tomatoes](https:\/\/www.rottentomatoes.com\/) websites, which then I'm using it to find out trends. I have used 'BeautifulSoup',a library used for web scraping.\n\n","e9921088":"## Drop rows with neglegible values","7eb1d52e":"The function below pulls genre from 'rotten-tomatoes' and returns a Series of information available for the corresponding shows\/movies in the Data Frame.","d6858838":"## Read the file","d66aaca3":"## Fill in missing data\n\nThere were several missing rows in 'ratingDescription' column. So I decided to fill in the missing description values with the most generic description present in the column.","9df5006e":"The script below gets genre of each show\/movie if available in the websites. the values are stored in a new column 'Genre' ","3430e964":"## Visualization of Frequency of each ratings from 1990-2017","0f06fb95":"# Netflix shows analysis\n--- \n\nThe given dataset consists of Shows and Movies from the year 1940 to 2017, available on\nNetflix, a worldwide popular video-streaming application. Shows rated from \u201c_G_\u201d(General\nAudiences) to \u201c_R_\u201d(strong violence, sexual content and adult language) are all included, attracting\na wide-range of audience. Details included about each show are rating, rating description, rating\nlevel, release year, user rating score, user rating score, user rating size.\n\nAverage user rating score(out of 100) is 84 where \u2018**13 reasons why**\u2019 scores the highest rating of\n99 and \u2018**Life Unexpected**\u2019 and \u2018**Curious George**\u2019 equally scoring 55, the lowest rated shows by\nusers in the list.\n\n### Problems found in the dataset\nThere are several missing values in some of the rows. Few rows are repeated. Details regarding Genre are not\nprovided making it difficult to categorize the shows according to these values. A couple of\ncolumn names are misplaced.\n\n### Solutions implemented\n* Basic data cleaning(remove repeating rows).\n* Add additional columns(Age restriction, genre)\n* Fill in missing values in rows based on most generic values given(missing rating\n  description based on most used description for each rating).\n\n### Things to Analyse\n* Trending genre for movies each decade based on show genre.\n* Trending rating for shows and movies in each decade.\n* What is common among high rated shows\/movies?\n* Do popular shows or movies have mature content?\n* Ratio of popularity for general vs Age restricted movies all together. ","30009a2c":"## Find out trending rating and genre for shows\/movies in each decade","9338c313":"## Wordcloud for trending Genre for shows in 20th and 21st Century"}}