{"cell_type":{"fa9e2532":"code","24a1fd1b":"code","256297ed":"code","01e545a3":"code","89b75341":"code","e1326536":"markdown","a69fe4e7":"markdown"},"source":{"fa9e2532":"from kaggle_environments import make\n\nenv = make(\"rps\")","24a1fd1b":"%%writefile submission.py\n\nimport numpy as np\nimport collections\n\ndef markov_agent(observation, configuration):\n    k = 2\n    global table, action_seq\n    if observation.step % 250 == 0: # refresh table every 250 steps\n        action_seq, table = [], collections.defaultdict(lambda: [1, 1, 1])    \n    if len(action_seq) <= 2 * k + 1:\n        action = int(np.random.randint(3))\n        if observation.step > 0:\n            action_seq.extend([observation.lastOpponentAction, action])\n        else:\n            action_seq.append(action)\n        return action\n    # update table\n    key = ''.join([str(a) for a in action_seq[:-1]])\n    table[key][observation.lastOpponentAction] += 1\n    # update action seq\n    action_seq[:-2] = action_seq[2:]\n    action_seq[-2] = observation.lastOpponentAction\n    # predict opponent next move\n    key = ''.join([str(a) for a in action_seq[:-1]])\n    if observation.step < 500:\n        next_opponent_action_pred = np.argmax(table[key])\n    else:\n        scores = np.array(table[key])\n        next_opponent_action_pred = np.random.choice(3, p=scores\/scores.sum()) # add stochasticity for second part of the game\n    # make an action\n    action = (next_opponent_action_pred + 1) % 3\n    # if high probability to lose -> let's surprise our opponent with sudden change of our strategy\n    if observation.step > 900:\n        action = next_opponent_action_pred\n    action_seq[-1] = action\n    return int(action)","256297ed":"import numpy as np\n\ndef copy_opponent_agent(observation, configuration):\n    if observation.step > 0:\n        return observation.lastOpponentAction\n    else:\n        return 0\n\ndef random_agent(observation, configuration):\n    return int(np.random.randint(3))","01e545a3":"env.reset()\nenv.run(['submission.py', copy_opponent_agent])\nenv.render(mode=\"ipython\", width=500, height=450)","89b75341":"env.reset()\nenv.run(['submission.py', random_agent])\nenv.render(mode=\"ipython\", width=500, height=450)","e1326536":"# Define Markov agent","a69fe4e7":"# Compare to simple agents"}}