{"cell_type":{"3263f372":"code","5d8ab80f":"code","e199420e":"code","a0fb4b41":"code","31c71a1d":"code","11eb8f0b":"code","37f6aa95":"code","9a6d1acf":"code","4c032786":"code","d93c405c":"code","1a36de7d":"code","6a52133a":"code","f120533e":"code","278dd10f":"code","7f5a012b":"code","2b5f1b22":"code","46fa6f47":"code","59a8f660":"code","a95d89c7":"code","7621bd26":"markdown","7470c079":"markdown","cb064ead":"markdown"},"source":{"3263f372":"import torch\nimport torchvision\nfrom torchvision import transforms\nimport torch.nn as nn\nimport matplotlib.pyplot as plt\nimport numpy as np","5d8ab80f":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\ndevice","e199420e":"print(torch.__version__)\nprint(torch.cuda.get_device_name())\nprint(torch.cuda.get_device_properties('cuda'))","a0fb4b41":"\ntrain_dataset = torchvision.datasets.MNIST('.MNIST', train = True, transform = transforms.ToTensor(), target_transform = None, download = True)\ntest_dataset = torchvision.datasets.MNIST('.MNIST', train = False, transform = transforms.ToTensor(), target_transform = None, download = True)\n","31c71a1d":"train_dataset","11eb8f0b":"test_dataset","37f6aa95":"train_dataset.data.shape","9a6d1acf":"train_dataset.classes","4c032786":"images = train_dataset.data.numpy()\nimages","d93c405c":"images.shape","1a36de7d":"plt.imshow(images[0], cmap = 'gray')","6a52133a":"batch_size = 64\ntrain_loader = torch.utils.data.DataLoader(dataset = train_dataset, batch_size = batch_size, shuffle = True, drop_last = False)\ntest_loader = torch.utils.data.DataLoader(dataset = test_dataset, batch_size = batch_size, shuffle = True, drop_last = False)","f120533e":"train_loader","278dd10f":"next(iter(train_loader))","7f5a012b":"one_train_batch_imgs, one_train_batch_lbls = next(iter(train_loader))\nprint(one_train_batch_imgs.shape)\nprint(one_train_batch_lbls)","2b5f1b22":"plt.imshow(one_train_batch_imgs[0][0], cmap = 'gray')","46fa6f47":"# Custom Model\nclass convnet(nn.Module):\n    def __init__(self, num_class):\n        super(convnet, self).__init__()\n        \n        \n\n    \n        \n    def forward(self, x):\n        \n        \n        return(y)","59a8f660":"model = convnet(10).to(device)","a95d89c7":"loss = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters())\n\n","7621bd26":"# dataloader","7470c079":"# dataset","cb064ead":"# Model"}}