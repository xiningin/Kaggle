{"cell_type":{"efc6b5f0":"code","483db657":"code","df5bc3ed":"code","d4c7c136":"code","2fa10a34":"code","e9290da7":"code","8505d6e7":"code","c30af3ea":"code","d1b686b1":"code","c0ccfcfc":"code","dd473867":"code","dd1d98bf":"code","4881eaed":"code","f35f64eb":"code","3c498b7f":"code","0f191293":"code","2118cda2":"code","d286322f":"code","66b9ce11":"code","36256c4d":"code","0ac4fdca":"code","d4058ed8":"code","baded7b7":"code","e60023bc":"code","31544487":"code","9eea2829":"markdown"},"source":{"efc6b5f0":"import numpy as np # for numerical operations\nimport pandas as pd # for handling input data\nimport matplotlib.pyplot as plt # for data visualization \nimport seaborn as sns # for data visualization\ndata = pd.read_csv('..\/input\/news-popularity-logistic-regression\/train.csv') # uses pandas library to open a .csv file\ntest_data = pd.read_csv('..\/input\/news-popularity-logistic-regression\/sample_submission.csv')\nsample = pd.read_csv('..\/input\/news-popularity-logistic-regression\/sample_submission.csv')","483db657":"data","df5bc3ed":"#1-shuffle\n#2-split train into test and train\n#3-drop label\n#4-scale normalization\n# try scaling before splitting","d4c7c136":"#data=data.sample(frac=1)\nsize=int(0.7*len(data))\ntrain=data[:size]\ntest=data[size:]","2fa10a34":"xtrain=train.drop('genre_label',axis=1)\nytrain=train['genre_label']","e9290da7":"xtrain","8505d6e7":"def scale(x):\n    return ((x-np.mean(x))\/np.std(x))","c30af3ea":"x=scale(xtrain)\nx=np.array(x)\ny=np.array(ytrain)\nw=np.ones((1,xtrain.shape[1]))\nprint(\"x shape\",x.shape,\"y shape\",y.shape,\"w shape\",w.shape)","d1b686b1":"def hypo(w,x,b):#prediction\n    z=np.dot(w,x.T)+b#\n    p_hat=1\/(1+np.exp(-z))#g(z)    \n    return p_hat","c0ccfcfc":"def predict(p_hat,m):\n    y_pred=np.zeros((1,m))\n    for i in range(m):\n        if p_hat[0][i]>=0.5:\n            y_pred[0][i]=1\n    return y_pred # represents h(x)","dd473867":"def error(pred,y,m):#cost\n    #costs= -np.sum(y * np.log(pred ) + (1 - y) * np.log(1 - pred )) \/ m\n    epsilon = 1e-5 # error happend cause log doesnt accept 0 so i add 1e-5 to 0\n    cost = -np.sum(y * np.log(pred + epsilon) + (1 - y) * np.log(1 - pred + epsilon)) \/ m \n    return cost","dd1d98bf":"def gradient(pred,y,x,m,alpha,w,b):#gradient decent\n    dw=(1\/m)*np.dot((pred-y.T),x)\n    db=(1\/m)*np.sum(pred-y.T)\n    w=w-alpha*(dw)\n    b=b-alpha*db\n    return b,w","4881eaed":"#main\nm=len(y)\nb=1\nalpha=0.0005 #larning rate between 0 and 1 \ncost=[]\nfor i in range(100000):\n    p_hat= hypo(w,x,b)\n    pred=predict(p_hat,m)\n    er=error(pred,y,m)\n    b,w=gradient(pred,y,x,m,alpha,w,b)\n    if i%10000==0:\n        print(er)\n        cost.append(er)","f35f64eb":"plt.plot(cost)\nplt.ylabel('cost')\nplt.xlabel('iterations')\nplt.title('Cost reduction over time')\nplt.show()","3c498b7f":"print(w)\nprint(b)","0f191293":"p_hat= hypo(w,x,b)\npred=predict(p_hat,m)","2118cda2":"pred","d286322f":"y","66b9ce11":"#validation\nxt=test.drop('genre_label',axis=1)\nyt=test['genre_label']\nxt=scale(xt)\nxt=np.array(xt)\nyt=np.array(yt)\nprint(\"xt\",xt.shape)\nprint(\"yt\",yt.shape)\nn=len(xt)\np_hat= hypo(w,xt,b)\npred=predict(p_hat,n)\nprint(\"pred_t\",pred.shape)\ner=error(pred,yt,n)\nprint(er)","36256c4d":"#compute accuracy\nn=len(xt)\np_hat= hypo(w,xt,b)\ntestpred=predict(p_hat,n)\n# *****\nm=len(x)\np_hat= hypo(w,x,b)\ntrainpred=predict(p_hat,m)\nprint('trainpred',trainpred.shape,'y',y.shape)\nprint('testpred',testpred.shape,'yt',yt.shape)","0ac4fdca":"from sklearn.metrics import accuracy_score\nprint('Training Accuracy',accuracy_score(trainpred.T, y))\npredxt = predict(testpred,len(xt))\nprint('Test Accuracy',accuracy_score(testpred.T, yt))","d4058ed8":"#final prediction #target\ntest_data=scale(test_data)\nt=np.array(test_data)\nk=len(t)\np_hat= hypo(w,t,b)\nprediction=predict(p_hat,k)\nprint(prediction.shape)\nprint(prediction)\n","baded7b7":"ids=np.array(sample['Id']) #prepre to submission\nprint(ids)\nprint(ids.shape)","e60023bc":"prediction=prediction.reshape(prediction.shape[1],)\nprint(prediction.shape)","31544487":"e=pd.DataFrame({'Id':ids,'genre_label':prediction})\ne.to_csv('genre_class.CSV',encoding='utf-8',index=False)","9eea2829":"***"}}