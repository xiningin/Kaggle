{"cell_type":{"175ed38d":"code","a63b943a":"code","3aa607cb":"code","834409a0":"code","72b7ef14":"code","f22b7444":"code","88534ece":"code","9df6c4fe":"code","c4684e4c":"code","99158cc4":"code","60373320":"code","8de7f5ec":"code","d46d610b":"code","0931a862":"code","767bd295":"code","7b2b7f2b":"code","ef4b2b5f":"code","2f1aae9d":"code","7da423a8":"code","3b0b5c17":"code","e591f696":"code","7d41ffd2":"code","3e0b7d49":"code","55ac24f3":"code","a6d65a98":"code","2ddbb32f":"code","ccbd40d7":"code","318a02bd":"code","19216439":"code","b4bd462e":"code","c3e569d0":"code","b013c130":"code","b3ebf4e5":"code","6656405c":"code","82bd115b":"code","7b6361d9":"code","fc3d5089":"code","02561020":"code","0400c07e":"code","d9f0ca39":"code","361d83bd":"code","397391b9":"code","1c0cdde2":"code","89b8a20b":"code","609fe859":"code","60c642b8":"code","89a0fc7a":"code","73603491":"code","5a35a0c6":"code","0af0d2bb":"code","3a1b4500":"code","08b95d8e":"code","8a7e7a25":"code","86ea75c8":"code","49d7d3a1":"code","9de0a1d2":"code","6fc527e5":"code","260c92b3":"code","e1b0d942":"code","a478215a":"code","8e87c527":"code","af5c3614":"code","0c2d33b4":"code","d911b943":"markdown","022863a4":"markdown","d2b85dda":"markdown","b4971051":"markdown","136d9d20":"markdown","2c262ce8":"markdown","573f9b67":"markdown","39061643":"markdown","a31aff1d":"markdown","34664cc5":"markdown","89c10c3d":"markdown","9804c298":"markdown","6e720fa5":"markdown","1f62f088":"markdown","b100de28":"markdown","00cb9ce8":"markdown","7bcd7285":"markdown","798e8a4c":"markdown","976ca40b":"markdown","ae5b3a62":"markdown","4cead134":"markdown","18cd02af":"markdown","82af3377":"markdown","23318f29":"markdown","830e3d5f":"markdown","82b3fc16":"markdown","3ba741a6":"markdown","adcc98b0":"markdown","3ef7bd4d":"markdown","98279a5a":"markdown","6bcbe05e":"markdown","0b3f3b07":"markdown","ce1600aa":"markdown","151b5dcf":"markdown","88179f82":"markdown","53c63493":"markdown","c34cf0f0":"markdown"},"source":{"175ed38d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plotting\nimport seaborn as sns","a63b943a":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# 2019_opens_scores.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1_g_athletes = pd.read_csv('..\/input\/crossfit-games\/2019_games_athletes.csv', delimiter=',', nrows = nRowsRead)\ndf2_g_scores = pd.read_csv('..\/input\/crossfit-games\/2019_games_scores.csv', delimiter=',', nrows = nRowsRead)\ndf3_o_athletes = pd.read_csv('..\/input\/crossfit-games\/2019_opens_athletes.csv', delimiter=',', nrows = nRowsRead)\ndf4_o_scores = pd.read_csv('..\/input\/crossfit-games\/2019_opens_scores.csv', delimiter=',', nrows = nRowsRead)\ndf1_g_athletes.dataframeName = '2019_games_athletes.csv'\ndf3_o_athletes.dataframeName = '2019_opens_athletes.csv'\ndf2_g_scores.dataframeName = '2019_games_scores.csv'\ndf4_o_scores.dataframeName = '2019_opens_scores.csv'\nnRow, nCol = df1_g_athletes.shape\nnRow2, nCol2 = df3_o_athletes.shape\nnRow3, nCol3 = df2_g_scores.shape\nnRow4, nCol4 = df4_o_scores.shape\nprint(f'2019_games_athletes.csv have {nRow} rows and {nCol} columns')\nprint(f'2019_opens_athletes.csv have {nRow2} rows and {nCol2} columns')\nprint(f'2019_games_scores.csv have {nRow3} rows and {nCol3} columns')\nprint(f'2019_opens_scores.csv have {nRow4} rows and {nCol4} columns')\ndf1_g_athletes.dtypes\n#df1_g_athletes.describe()\n","3aa607cb":"fig, ax = plt.subplots(figsize=(9,5))\nsns.heatmap(df1_g_athletes.isnull(), cbar=False, cmap=\"YlGnBu_r\")\nplt.show()","834409a0":"# \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0438 df1_g_athletes\n\n# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 overallrank \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 int64.\ndf1_g_athletes['overallrank'] = df1_g_athletes['overallrank'].replace(['134T', '138T', '143T','92T','102T','117T' ], [134, 138, 143, 92, 102, 117])\ndf1_g_athletes.overallrank = df1_g_athletes.overallrank.astype(np.int64)\n# \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u0432\u0435\u0441 \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d\u043e\u0432 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 int64.\n#df1_g_athletes['weight'] = df1_g_athletes['weight'].round()\n#df1_g_athletes.weight = df1_g_athletes.weight.astype(np.int64)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 affiliateid \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 int64, Nan \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 0.\ndf1_g_athletes['affiliateid'] = df1_g_athletes['affiliateid'].fillna(0).astype(np.int64)\ndf1_g_athletes['affiliateid'] = df1_g_athletes['affiliateid'].astype(np.int64)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 overallscore \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 int64.Nan \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 0.\ndf1_g_athletes['overallscore'] = df1_g_athletes['overallscore'].fillna(0).astype(np.int64)\ndf1_g_athletes['overallscore'] = df1_g_athletes['overallscore'].astype(np.int64)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 height \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 int64, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0435\u0440\u0435\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043d\u0430 0.\n#df1_g_athletes['height'] = df1_g_athletes['height'] * 100\n#df1_g_athletes['height'] = df1_g_athletes['height'].astype(np.int64)\ndf1_g_athletes['height'] = df1_g_athletes['height'].replace([0.15, 0.03, 0.18], [0, 0, 0])\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN \u0441\u0442\u043e\u043b\u0431\u0446\u0430 affiliatename \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 NoInfo\ndf1_g_athletes['affiliatename'] = df1_g_athletes['affiliatename'].fillna('NoInfo').astype(np.object)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN \u0441\u0442\u043e\u043b\u0431\u0446\u0430 competitorname \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 NoInfoCName\ndf1_g_athletes['competitorname'] = df1_g_athletes['competitorname'].fillna('NoInfoCName').astype(np.object)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN \u0441\u0442\u043e\u043b\u0431\u0446\u0430 overallscore \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 NoInfoOScore\n#df1_g_athletes['overallscore'] = df1_g_athletes['overallscore'].fillna(0).astype(np.int64)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f alt \u0441\u0442\u043e\u043b\u0431\u0446\u0430 bibid \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0\ndf1_g_athletes['bibid'] = df1_g_athletes['bibid'].replace(['alt'], [0])\ndf1_g_athletes.bibid = df1_g_athletes.bibid.astype(np.int64)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN \u0441\u0442\u043e\u043b\u0431\u0446\u0430 countryoforigincode \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 NoInfoCCode\ndf1_g_athletes['countryoforigincode'] = df1_g_athletes['countryoforigincode'].fillna('NoInfoCCode').astype(np.object)\ndf1_g_athletes_MWDivision = df1_g_athletes","72b7ef14":"df1_g_athletes.head()","f22b7444":"#df=df1_g_athletes.groupby('division').overallscore.agg(['mean', 'median'])\n#df=df1_g_athletes.groupby('division').TopTenDivision.value_counts(['Scale', 'Not scale'])\ndf=df1_g_athletes.groupby('division').competitorid.count()\ndf.plot(kind='bar',stacked = True, figsize=(15, 6), fontsize=20)\nplt.xlabel(\"\u0414\u0438\u0432\u0438\u0437\u0438\u043e\u043d\", fontsize=20)\nplt.ylabel(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0442\u043b\u0435\u0442\u043e\u0432\", fontsize=20)\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0442\u043b\u0435\u0442\u043e\u0432 \u0432 \u0434\u0438\u0432\u0438\u0437\u0438\u043e\u043d\u0435\", fontsize=20)\n","88534ece":"#df=df1_g_athletes.groupby('division').overallscore.agg(['mean', 'median'])\ndf01 = (df1_g_athletes.division == 'Men') | (df1_g_athletes.division == 'Women')\ndf1=df1_g_athletes[df01].groupby('countryoforiginname').division.value_counts()\ndf1.nlargest(10).plot(kind='bar',stacked = True, figsize=(15, 6), fontsize=25)\nplt.xlabel(\"\u0421\u0442\u0440\u0430\u043d\u0430\", fontsize=20)\nplt.ylabel(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0442\u043b\u0435\u0442\u043e\u0432\", fontsize=20)\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c (\u0422\u043e\u043f 10 \u0441\u0442\u0440\u0430\u043d)\", fontsize=20)","9df6c4fe":"df02 = ((df1_g_athletes.division == 'Men') | (df1_g_athletes.division == 'Women')) & (df1_g_athletes.overallrank < 4)\ndf2=df1_g_athletes[df02].groupby('countryoforiginname').division.count()\ndf2.nlargest(5).plot(kind='bar',stacked = True, figsize=(15, 6), fontsize=25)\nplt.xlabel(\"\u0421\u0442\u0440\u0430\u043d\u0430\", fontsize=20)\nplt.ylabel(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0442\u043b\u0435\u0442\u043e\u0432 \u0441 \u0440\u0430\u043d\u0433\u043e\u043c 3 \u0438 \u0432\u044b\u0448\u0435\", fontsize=20)\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0442\u043b\u0435\u0442\u043e\u0432 \u0437\u0430\u043d\u044f\u0432\u0448\u0438\u0445 \u043f\u0440\u0438\u0437\u043e\u0432\u044b\u0435 \u043c\u0435\u0441\u0442\u0430 (\u0422\u043e\u043f 5 \u0441\u0442\u0440\u0430\u043d)\", fontsize=20)","c4684e4c":"df1_g_athletes[df02]","99158cc4":"for df in [df1_g_athletes] :\n\n    df['competitorname_Size'] = df.competitorname.apply(lambda x : len(x)) \n    df['NameLen']=np.nan\n    for i in range(20,0,-1):\n        df.loc[ df['competitorname_Size'] <= i*5, 'NameLen'] = i","60373320":"# overallrank - \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u043e\u043f 10 \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d\u043e\u0432 \u0432 \u0440\u0430\u043d\u0433\u0435 \u043f\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0435 (\u0412 \u0442\u043e\u043f 10 - 1, \u043d\u0435 \u0432 \u0442\u043e\u043f 10 - 0)\ndf1_g_athletes_MWDivision['overallrank'] = df1_g_athletes_MWDivision['overallrank'].apply((lambda x: x<11))","8de7f5ec":"groupby_NameLen_overallrank = df1_g_athletes.groupby(['NameLen'])['overallrank'].count().to_frame()\ngroupby_NameLen_overallrank","d46d610b":"plt.subplots(figsize=(10,6))\nsns.barplot(x='NameLen' , y='overallrank' , data = df1_g_athletes)\nplt.ylabel(\"overallrank Rate\")\nplt.title(\"overallrank as function of NameLen\")\nplt.show()","0931a862":"cm_surv = [\"darkgrey\" , \"lightgreen\"]","767bd295":"fig, ax = plt.subplots(figsize=(9,7))\nsns.violinplot(x=\"NameLen\", y=\"division\", data=df1_g_athletes, hue='overallrank', split=True, \n               orient=\"h\", bw=0.2 , palette=cm_surv, ax=ax)\nplt.show()","7b2b7f2b":"g = sns.factorplot(x=\"NameLen\", y=\"overallrank\", col=\"gender\", data=df1_g_athletes, kind=\"bar\", size=5, aspect=1.2)","ef4b2b5f":"df1_g_athletes_MWDivision['overallrank'] = df1_g_athletes_MWDivision['overallrank'].replace([1, 0], ['\u0422\u043e\u043f 10', '\u041d\u0435 \u0442\u043e\u043f 10'])\ndf1_g_athletes_MWDivision","2f1aae9d":"# \u041d\u0430\u0439\u0434\u0451\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nCategorical_cols = list(set(df1_g_athletes_MWDivision.columns) - set(df1_g_athletes_MWDivision._get_numeric_data().columns))\nCategorical_cols","7da423a8":"df1_g_athletes_MWDivision[Categorical_cols]","3b0b5c17":"from sklearn.preprocessing import OneHotEncoder\nonehot_encoder = OneHotEncoder(sparse=False)\n\npd.options.display.max_rows = 1000\npd.options.display.max_columns = 1000\nencoded_categorical_columns = pd.DataFrame(onehot_encoder.fit_transform(df1_g_athletes_MWDivision[Categorical_cols]))\nencoded_categorical_columns.head()","e591f696":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nfrom sklearn import preprocessing\n\n# \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 DataFrame, \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n# \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 DataFrame \u0438 \u0441\u0430\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0438.\ndef number_encode_features(init_df):\n    result = init_df.copy() # \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0443 \u0438\u0441\u0445\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443\n    encoders = {}\n    for column in result.columns:\n        if result.dtypes[column] == np.object: # np.object -- \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \/ \u0435\u0441\u043b\u0438 \u0442\u0438\u043f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 - \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0435\u0433\u043e \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n            encoders[column] = preprocessing.LabelEncoder() # \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 column \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\n            result[column] = encoders[column].fit_transform(result[column]) # \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u043a \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n    return result, encoders\n\nencoded_data, encoders = number_encode_features(df1_g_athletes_MWDivision) # \u0422\u0435\u043f\u0435\u0440\u044c encoded data \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0442. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \nencoded_data.head() ","7d41ffd2":"\nfig = plt.figure(figsize=(19,8))\ncols = 6\nrows = np.ceil(float(encoded_data.shape[1]) \/ cols)\nfor i, column in enumerate(encoded_data.columns):\n    ax = fig.add_subplot(rows, cols, i + 1)\n    ax.set_title(column)\n    encoded_data[column].hist(axes=ax)\n    plt.xticks(rotation=\"vertical\")\nplt.subplots_adjust(hspace=0.7, wspace=0.2)\n\n","3e0b7d49":"df1_g_athletes_MWDivision","55ac24f3":"df2_g_scores","a6d65a98":"pd.merge(df1_g_athletes_MWDivision, df2_g_scores, on='competitorid', how='right')\n   #      left_on=['competitorname', 'competitorid'],\n   #      right_on=['scoredisplay', 'competitorid'])","2ddbb32f":"plt.subplots(figsize=(15,15))\nencoded_data, encoders = number_encode_features(df1_g_athletes_MWDivision)\nsns.heatmap(encoded_data.corr(), square=True)\nplt.show()","ccbd40d7":"df_prc = df1_g_athletes_MWDivision.copy()\ndf_prc['overallrank'] = df1_g_athletes_MWDivision['overallrank'].apply((lambda x: x=='\u0422\u043e\u043f 3')) # \u0411\u0443\u0434\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c 1(True), \u0435\u0441\u043b\u0438 \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d \u043f\u043e\u043f\u0430\u043b \u0432 \u0442\u043e\u043f 3 \u043f\u0440\u0438\u0437\u0435\u0440\u043e\u0432, 0(False) \u0438\u043d\u0430\u0447\u0435\ndf_prc.head()\n","318a02bd":"# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndf1_g_athletes_MWDivision._get_numeric_data().columns","19216439":"X = np.array(df_prc[df1_g_athletes_MWDivision._get_numeric_data().columns])\n# y = np.array(df_prc['salary'], dtype='int')\ny = encoders['overallrank'].transform(df1_g_athletes_MWDivision['overallrank']) # \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430\u0448\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0438 \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0444\u0438\u0447\u0430\u043c\n","b4bd462e":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\n\ndef grid_plot(x, y, x_label, title, y_label='roc_auc'):\n    plt.figure(figsize=(12, 6))\n    plt.grid(True)\n    plt.plot(x, y, 'go-')\n    plt.xlabel(x_label)\n    plt.ylabel(y_label)\n    plt.title(title)","c3e569d0":"# \u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c k \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()","b013c130":"# \u0412 sklearn \u0435\u0441\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439\nfrom sklearn.model_selection import GridSearchCV\n\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u0441\u0435\u0442\u043a\u0443 - \u0441\u0440\u0435\u0434\u0438 \u043a\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440.\nknn_grid = {'n_neighbors': np.array(np.linspace(2, 50, 4), dtype='int')} # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 <<n_neighbors>>, \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 np.linspace(2, 50, 4)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\ngs = GridSearchCV(knn, knn_grid, cv=5)\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0435\u0433\u043e\ngs.fit(X, y)","b3ebf4e5":"# \u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n# \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0435 cv_results_ \u043e\u0431\u044a\u0435\u043a\u0442\u0430 gs\n\ngrid_plot(knn_grid['n_neighbors'], gs.cv_results_['mean_test_score'], 'n_neighbors', 'KNeighborsClassifier')","6656405c":"knn_grid = {'n_neighbors': np.array(np.linspace(32, 38, 11), dtype='int')}\ngs = GridSearchCV(knn, knn_grid, cv=10)\ngs.fit(X, y)\n\n# best_params_ \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, best_score_ \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e\ngs.best_params_, gs.best_score_","82bd115b":"grid_plot(knn_grid['n_neighbors'], gs.cv_results_['mean_test_score'], 'n_neighbors', 'KNeighborsClassifier')","7b6361d9":"from sklearn.preprocessing import scale\nX_scaled = scale(np.array(X, dtype='float'), with_std=True, with_mean=False)","fc3d5089":"X_scaled","02561020":"grid = {'n_neighbors': np.array(np.linspace(1, 50, 10), dtype='int')}\ngs = GridSearchCV(knn, grid, cv=5, n_jobs=5)\ngs.fit(X_scaled, y)\nprint(gs.best_params_, gs.best_score_)\ngrid_plot(grid['n_neighbors'], gs.cv_results_['mean_test_score'], 'n_neighbors', 'KNeighborsClassifier')","0400c07e":"grid = {'n_neighbors': np.array(np.linspace(35, 40, 34), dtype='int')}\ngs = GridSearchCV(knn, grid, cv=10, n_jobs=5)\ngs.fit(X_scaled, y)\nprint(gs.best_params_, gs.best_score_)\ngrid_plot(grid['n_neighbors'], gs.cv_results_['mean_test_score'], 'n_neighbors', 'KNeighborsClassifier')","d9f0ca39":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_tain, y_test = train_test_split(X,y, test_size=0.33, random_state=42)","361d83bd":"from sklearn import dummy\n\nknn = KNeighborsClassifier(n_neighbors=32) \nclf_knn = knn.fit(X_train, y_tain)\nclf_mp = dummy.DummyClassifier(\"most_frequent\").fit(X_train, y_tain)","397391b9":"y_knn = clf_knn.predict(X_test)\ny_mp = clf_mp.predict(X_test)","1c0cdde2":"y_knn","89b8a20b":"y_mp","609fe859":"y_test","60c642b8":"from sklearn import metrics\n\nprint ('knn =', metrics.accuracy_score(y_test, y_knn), 'mp =', metrics.accuracy_score(y_test, y_mp))","89a0fc7a":"import matplotlib\n\nfig = plt.figure(figsize=(10,8))\nnn_mtx = metrics.confusion_matrix(y_test, y_knn)\n\nfont = {'family' : 'Calibri', 'weight' : 'bold', 'size'   :22}\nmatplotlib.rc('font', **font)\nmatplotlib.rc('xtick', labelsize=20) \nmatplotlib.rc('ytick', labelsize=20) \nsns.heatmap(nn_mtx, annot=True, fmt=\"d\", \n            xticklabels=encoders[\"overallrank\"].classes_, \n            yticklabels=encoders[\"overallrank\"].classes_)\nplt.ylabel(\"Real value\")\nplt.xlabel(\"Predicted value\")","73603491":"mp_mtx = metrics.confusion_matrix(y_test, y_mp)\n\nfont = {'family' : 'Calibri', 'weight' : 'bold', 'size'   :22}\nmatplotlib.rc('font', **font)\nfig = plt.figure(figsize=(10,8))\nsns.heatmap(mp_mtx, annot=True, fmt=\"d\", \n            xticklabels=encoders[\"overallrank\"].classes_, \n            yticklabels=encoders[\"overallrank\"].classes_)\nplt.ylabel(\"Real value\")\nplt.xlabel(\"Predicted value\")","5a35a0c6":"print ('knn =', metrics.precision_score(y_test, y_knn), 'mp =', metrics.precision_score(y_test, y_mp))","0af0d2bb":"print ('knn =', metrics.recall_score(y_test, y_knn), 'mp =', metrics.recall_score(y_test, y_mp))","3a1b4500":"df_Regression_g_athletes = pd.read_csv('..\/input\/crossfit-games\/2019_games_athletes.csv', delimiter=',', nrows = nRowsRead)\ndf_Regression_g_athletes.dataframeName = '2019_games_athletes.csv'\nnRow, nCol = df_Regression_g_athletes.shape\nprint(f'2019_games_athletes.csv have {nRow} rows and {nCol} columns')","08b95d8e":"# \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0438 df1_g_athletes\n\n# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 overallrank \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 int64.\ndf_Regression_g_athletes['overallrank'] = df_Regression_g_athletes['overallrank'].replace(['134T', '138T', '143T','92T','102T','117T' ], [134, 138, 143, 92, 102, 117])\ndf_Regression_g_athletes.overallrank = df_Regression_g_athletes.overallrank.astype(np.int64)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 affiliateid \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 int64, Nan \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 0.\ndf_Regression_g_athletes['affiliateid'] = df_Regression_g_athletes['affiliateid'].fillna(0).astype(np.int64)\ndf_Regression_g_athletes['affiliateid'] = df_Regression_g_athletes['affiliateid'].astype(np.int64)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 overallscore \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 int64.Nan \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 0.\ndf_Regression_g_athletes['overallscore'] = df_Regression_g_athletes['overallscore'].fillna(0).astype(np.int64)\ndf_Regression_g_athletes['overallscore'] = df_Regression_g_athletes['overallscore'].astype(np.int64)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 height \u0432 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 int64, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0435\u0440\u0435\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043d\u0430 0.\ndf_Regression_g_athletes['height'] = df_Regression_g_athletes['height'].replace([0.15, 0.03, 0.18], [0, 0, 0])\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN \u0441\u0442\u043e\u043b\u0431\u0446\u0430 affiliatename \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 NoInfo\ndf_Regression_g_athletes['affiliatename'] = df_Regression_g_athletes['affiliatename'].fillna('NoInfo').astype(np.object)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN \u0441\u0442\u043e\u043b\u0431\u0446\u0430 competitorname \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 NoInfoCName\ndf_Regression_g_athletes['competitorname'] = df_Regression_g_athletes['competitorname'].fillna('NoInfoCName').astype(np.object)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f alt \u0441\u0442\u043e\u043b\u0431\u0446\u0430 bibid \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0\ndf_Regression_g_athletes['bibid'] = df_Regression_g_athletes['bibid'].replace(['alt'], [0])\ndf_Regression_g_athletes.bibid = df_Regression_g_athletes.bibid.astype(np.int64)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN \u0441\u0442\u043e\u043b\u0431\u0446\u0430 countryoforigincode \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 NoInfoCCode\ndf_Regression_g_athletes['countryoforigincode'] = df_Regression_g_athletes['countryoforigincode'].fillna('NoInfoCCode').astype(np.object)","8a7e7a25":"df_Regression_g_athletes_train_ml = encoded_data.copy()\ndf_Regression_g_athletes_test_ml = encoded_data.copy()\ndel df_Regression_g_athletes_test_ml['overallrank']\ncompetitor_id = df_Regression_g_athletes['competitorid']","86ea75c8":"df_Regression_g_athletes_train_ml.info()","49d7d3a1":"df_Regression_g_athletes_test_ml.info()","9de0a1d2":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\n# for df_train_ml\nscaler.fit(df_Regression_g_athletes_train_ml.drop(['overallrank'],axis=1))\nscaled_features = scaler.transform(df_Regression_g_athletes_train_ml.drop(['overallrank'],axis=1))\ndf_train_ml_sc = pd.DataFrame(scaled_features) # columns=df_train_ml.columns[1::])\n\n# for df_test_ml\ndf_Regression_g_athletes_test_ml.fillna(df_Regression_g_athletes_test_ml.mean(), inplace=True)\n#scaler.fit(df_test_ml)\nscaled_features = scaler.transform(df_Regression_g_athletes_test_ml)\ndf_test_ml_sc = pd.DataFrame(scaled_features) # , columns=df_test_ml.columns)","6fc527e5":"df_train_ml_sc.head()","260c92b3":"df_test_ml_sc.head()","e1b0d942":"X = df_Regression_g_athletes_train_ml.drop('overallrank', axis=1)\ny = df_Regression_g_athletes_train_ml['overallrank']\nX_test = df_Regression_g_athletes_test_ml\n\nX_sc = df_train_ml_sc\ny_sc = df_Regression_g_athletes_train_ml['overallrank']\nX_test_sc = df_test_ml_sc","a478215a":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\n\nparam_grid = {'min_samples_split': [4,7,10,12]}\ndtree_grid = GridSearchCV(dtree, param_grid, cv=10, refit=True, verbose=1)\ndtree_grid.fit(X_sc,y_sc)\n\nprint(dtree_grid.best_score_)\nprint(dtree_grid.best_params_)\nprint(dtree_grid.best_estimator_)","8e87c527":"def get_best_score(model):\n    \n    print(model.best_score_)    \n    print(model.best_params_)\n    print(model.best_estimator_)\n    \n    return model.best_score_\n\n\ndef plot_feature_importances(model, columns):\n    nr_f = 10\n    imp = pd.Series(data = model.best_estimator_.feature_importances_, \n                    index=columns).sort_values(ascending=False)\n    plt.figure(figsize=(7,5))\n    plt.title(\"Feature importance\")\n    ax = sns.barplot(y=imp.index[:nr_f], x=imp.values[:nr_f], orient='h')","af5c3614":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\n\nparam_grid = {'max_depth': [3, 5, 6, 7, 8], 'max_features': [6,7,8,9,10],  \n              'min_samples_split': [5, 6, 7, 8]}\n\nrf_grid = GridSearchCV(rfc, param_grid, cv=10, refit=True, verbose=1)\nrf_grid.fit(X_sc,y_sc)\nsc_rf = get_best_score(rf_grid)","0c2d33b4":"plot_feature_importances(rf_grid, X.columns)","d911b943":"**double-check for missing values**","022863a4":"\u041a\u043b\u0430\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043e\u0432\u044b\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u043c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0442\u043e\u043f 10 \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d\u043e\u0432 - \u0422\u043e\u043f 10 \u0438\u043b\u0438 \u041d\u0435 \u0442\u043e\u043f 10","d2b85dda":"**the chance to get into the top 10 increases with the length of the name for all divisions**","b4971051":"\u0418\u0437 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0434\u0438\u0432\u0438\u0437\u0438\u043e\u043d\u0430\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f - Men \u0438 Woman. \u0414\u0430\u043b\u0435\u0435 \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0430\u0442\u043b\u0435\u0442\u043e\u0432 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0434\u0438\u0432\u0438\u0437\u0438\u043e\u043d\u043e\u0432","136d9d20":"\u041f\u043e\u0434\u0431\u043e\u0440\u043a\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 n_neighbors \u0434\u043b\u044f KNeighborsClassifier \u043f\u0440\u0438 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445","2c262ce8":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c kNN, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 (n_neighbors) \u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 (metrics).\n\n\u041f\u043e\u0434\u0431\u0435\u0440\u0451\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","573f9b67":"### Precision","39061643":"### Random Forest","a31aff1d":"\u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0441\u0435\u0442","34664cc5":"\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\n\u041f\u043e \u0442\u0435\u043f\u043b\u043e\u0432\u043e\u0439 \u043a\u0430\u0440\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438.\n\n\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0440\u044f\u043c\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c (\u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0434\u0440\u0443\u0433\u043e\u0435), \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435.\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u043b\u0438\u0437\u043a\u043e\u0435 \u043a \u043d\u0443\u043b\u044e \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438! \u042d\u0442\u043e \u043b\u0438\u0448\u044c \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043d\u0435\u0442 \u043f\u0440\u044f\u043c\u043e\u0439 (\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439) \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438","89c10c3d":"\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u0445 \u0438\u043c\u0435\u044e\u0442 \u0421\u0428\u0410 \u0432 \u043e\u0431\u043e\u0438\u0445 \u0434\u0438\u0432\u0438\u0437\u0438\u043e\u043d\u0430\u0445","9804c298":"### Missing value map \nmissing data in df1_g_athletes","6e720fa5":"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\nAccuracy","1f62f088":"**Increase of overallrank rate with length of name most important for M and F**","b100de28":"Conf-matrix","00cb9ce8":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","7bcd7285":"<img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTxSOXNRl25BTP-D8XeufSidu7mmK2-xZ7E8nT-DXhoUbs4toK7&s\" width=\"420\">","798e8a4c":"# Part 2: Data Wrangling and Feature Engineering","976ca40b":"\u0412 \u0441\u0432\u043e\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u044f \u0445\u043e\u0442\u0435\u043b \u0441\u043e\u0441\u0440\u0435\u0433\u0430\u0442\u043e\u0447\u0438\u0442\u0441\u044f \u043d\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0434\u0438\u0432\u0438\u0437\u0438\u043e\u043d\u0430\u0445 Men \u0438 Woman \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043c\u043d\u043e\u0433\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b \u0438 \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439. \u041d\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e \u0447\u0442\u043e \u043b\u0443\u0447\u0448\u0435 \u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0432\u0438\u0437\u0438\u043e\u043d\u0430\u043c","ae5b3a62":"** \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: ** - \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 - \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","4cead134":"> Model Decision Tree","18cd02af":"    \u041f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \n \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.","82af3377":"### Standard Scaler","23318f29":"Recall","830e3d5f":"Knn 0.67 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0430\u043c\u043e\u0433\u043e \u0445\u0443\u0434\u0448\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f mp 0.63, \u043d\u043e \u043d\u0435 \u043d\u0430\u043c\u043d\u043e\u0433\u043e. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u0438\u0447\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 - one hot encoding, \u0442\u0430\u043a \u0436\u0435 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438 - competitorname, lastname, profilepics3key. \u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0443\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a status \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043e\u043d \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043a \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u0438 df2_g_scores. \u0432 \u043d\u0435\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b WOD \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u0442\u043b\u0435\u0442\u0430. \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0438.","82b3fc16":"   # Crossfit Games 2019","3ba741a6":"Decision Tree","adcc98b0":"\u0414\u0430\u043d\u043d\u044b\u0439 \u0433\u0440\u0430\u0444\u0438\u043a \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0442\u0440\u0435\u0442\u044c \u043f\u0440\u0438\u0437\u0435\u0440\u043e\u0432 \u0434\u0438\u0432\u0438\u0437\u0438\u043e\u043d\u0430 Men \u0438 Women \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0421\u0428\u0410 (\u043e\u043a\u043e\u043b\u043e 33%). \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 2\/3 \u0434\u0435\u043b\u044f\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0410\u0432\u0441\u0442\u0440\u0430\u043b\u0438\u044f, \u0418\u0441\u043b\u0430\u043d\u0434\u0438\u044f, \u041d\u043e\u0432\u0430\u044f \u0417\u0435\u043b\u0430\u043d\u0434\u0438\u044f \u0438 \u041d\u043e\u0440\u0432\u0435\u0433\u0438\u044f.\n\n\u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043f\u0440\u0438\u0437\u0435\u0440\u043e\u0432","3ef7bd4d":"## Feature Engineering\n**New Features: 'competitorname_Size', 'NameLen'**","98279a5a":"\u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u0441\u0435 \u0434\u0438\u0432\u0438\u0437\u0438\u043e\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u0430\u0442\u043b\u0435\u0442\u044b","6bcbe05e":"\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0440e\u0433\u0440\u0435\u0441\u0441\u0438\u0438","0b3f3b07":"# Part 1: Analyzing data","ce1600aa":"**convert categorical to numerical : get_dummies**","151b5dcf":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c 2 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0432\u0430\n* \u0443\u043c\u043d\u044b\u0439 kNN\n* \u0433\u043b\u0443\u043f\u044b\u0439 -- DummyClassifier (\u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441)","88179f82":"\u0414\u0430\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0430\u0442\u043b\u0435\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438 \u0432 \u0438\u0433\u0440\u0430\u0445 Crossfit 2019. \u0418\u0445 \u0440\u0430\u043d\u0433 \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. \u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u0442\u043e\u043f 10 \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d\u043e\u0432 (\u041f\u043e\u043f\u0430\u043b \u0432 \u0442\u043e\u043f 10 \u0438\u043b\u0438 \u043d\u0435 \u043f\u043e\u043f\u0430\u043b \u0432 \u0442\u043e\u043f 10). \u0417\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.\n\n\u041f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438\n\u041e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b (\u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u043d\u043e):\n* \u041a\u0430\u043a\u0430\u044f \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f (\u0447\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c)\n* \u0417\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 (\u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0430\u044f)?\n* \u041a\u0430\u043a\u0443\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 (\u043d\u0430 kaggle \u044d\u0442\u043e \u0435\u0441\u0442\u044c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435->overview->evaluation)\n\n\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n* \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e: \u043a\u0430\u043a \u043e\u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430, \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u044b (\u0435\u0441\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f)\n* \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \u0430 \u043a\u0430\u043a\u0438\u0435 - \u043d\u0435\u0442 (\u044d\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0438\u0445 \u0441\u0440\u0430\u0437\u0443 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c)\n\n\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u0418\u0437\u0431\u0430\u0432\u043b\u044f\u0435\u043c\u0441\u044f \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c\n* \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e (feature engineering)\n* \u041f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430 (\u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0431\u0443\u0434\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c one-hot encoding)\n* \u041b\u044e\u0431\u044b\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u043c\u0438 (scaling, \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438)\n\n\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\n* \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \u041e\u0431\u044b\u0447\u043d\u043e, \u0438\u043b\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435, \u0438\u043b\u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c.\n* \u0418\u0437\u043c\u0435\u0440\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u044b\n* \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 (\u043d\u0435\u0441\u043c\u0435\u0449\u0435\u043d\u043d\u0443\u044e). \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n* \u041b\u044e\u0431\u044b\u0435 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u043d\u0430 \u0412\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435\n","53c63493":"\u041f\u043e\u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 train\/test","c34cf0f0":"\u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 n_neighbors \u0434\u043b\u044f KNeighborsClassifier\n\u0423 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 knn \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 (\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0443\u043a\u0430\u043c\u0438) -- \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0435.\n\n\u041a\u0430\u043a \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430 \u043b\u0435\u043a\u0446\u0438\u0438, \u043f\u043e\u0434\u0431\u043e\u0440 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 (\u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439) \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0430 \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043d\u0430 5 \u0444\u043e\u043b\u0434\u0430\u0445"}}