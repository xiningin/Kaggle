{"cell_type":{"9e14c7fd":"code","6089539f":"code","da233adb":"code","856253d8":"code","27bb6477":"code","af7d1742":"code","4984650d":"code","36335004":"code","89e0ffbc":"code","1847ed23":"code","f536857f":"code","a4b7958d":"code","44b7336e":"code","a3489517":"code","88d967b7":"code","e45ae8dc":"code","12545c29":"code","9bd122fe":"code","b0caf7a9":"code","b841487d":"code","e3e9487f":"code","ff86e8fe":"code","3c153391":"code","952b91cf":"code","e106d325":"code","a26feb22":"code","8e4d46b6":"code","edf0297b":"code","5ff46400":"code","5ca23015":"code","00f025d8":"code","c20160a6":"code","4c7b8778":"code","f92b1b2e":"markdown"},"source":{"9e14c7fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6089539f":"#import our data\ndf = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")","da233adb":"#enuring that we have brough in our dataset\ndf.head()","856253d8":"df.columns","27bb6477":"#drop the id column\n\ndf = df.drop('Id', axis=1)","af7d1742":"df.head()","4984650d":"# the number of rows and columns \ndf.shape","36335004":"#summary statistics of the target variable- predict house prices \ndf['SalePrice'].describe()","89e0ffbc":"# We want to satisy the assumptions of linear regression\n# normallly distributed \n# hoskedasticity \n# not auto correlations \n# multicolineality","1847ed23":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import skew,norm\n","f536857f":"sns.distplot(df.SalePrice,fit=norm)","a4b7958d":"df['SalePrice']","44b7336e":"df.SalePrice.skew()","a3489517":"df.SalePrice.kurt()","88d967b7":"# log transform \n# Arcsine transformation \n\ndf['SalePrice'] = np.log1p(df[\"SalePrice\"])\n\n","e45ae8dc":"df.SalePrice","12545c29":"sns.distplot(df.SalePrice, fit=norm)","9bd122fe":"df.SalePrice.skew()\n","b0caf7a9":"df.SalePrice.kurt()","b841487d":"# Data exploration \n# we will check out x's aganist our y - correration - contious \n# Categorical variables - identify, describe, transfrom - onehotencoding, ","e3e9487f":"[1,2,3, na,4,5,Na]   = 2\/7 * 100","ff86e8fe":"df.shape","3c153391":"len(df)","952b91cf":"df_na = (df.isna().sum()\/len(df))*100","e106d325":"df_na_sort =df_na.sort_values(ascending =False)","a26feb22":"df_na_sort.head(20)","8e4d46b6":"# Dropping missing values \ndf2 = df.drop(['PoolQC',\n                'MiscFeature',   \n                'Alley',         \n                'Fence',\n                'FireplaceQu'], axis=1)","edf0297b":"#missing values in continous variables \n# ways we can fill out missing values: mean, mode, median \n\ndf2['LotFrontage'] = df2[\"LotFrontage\"].fillna(df2[\"LotFrontage\"].median())\n","5ff46400":"df2[\"LotFrontage\"].isna().sum()","5ca23015":"GarageType       5.547945\nGarageCond       5.547945\nGarageFinish     5.547945\nGarageQual       5.547945\nGarageYrBlt      5.547945","00f025d8":"col = [\"GarageType\",\"GarageCond\",\"GarageFinish\",\"GarageQual\",\"GarageYrBlt\"]","c20160a6":"for col in col:\n    df2[col] = df2[col].fillna(0)\n    ","4c7b8778":"df2[\"GarageYrBlt\"].isna().sum()","f92b1b2e":"## Filling in missing values "}}