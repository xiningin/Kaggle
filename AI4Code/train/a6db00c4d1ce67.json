{"cell_type":{"ce64bdee":"code","e955adf2":"code","206f1cda":"code","98787a2b":"code","c1c541f2":"code","b5bd2698":"code","6881d93c":"code","ee4cf623":"code","bf8f2b88":"code","6db85805":"code","033d8a45":"code","df4781c1":"code","5836204e":"markdown","cd8ae479":"markdown","cf6ccadd":"markdown","1a3b23dc":"markdown","d3bf770f":"markdown","8b1473ec":"markdown"},"source":{"ce64bdee":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression","e955adf2":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","206f1cda":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)","98787a2b":"train.head()","c1c541f2":"train.columns","b5bd2698":"def getColumnsExceptOneColumn(df,col):\n    return train.loc[:, train.columns != col].columns.tolist()","6881d93c":"target_col = \"Survived\"\ny = train[target_col]\n\nfeatures = getColumnsExceptOneColumn(train,target_col)\n\n\nX = train[features]\nX_test = test[features]","ee4cf623":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","bf8f2b88":"str_list","6db85805":"num_list","033d8a45":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"logistic\", LogisticRegression())])\nclf.fit(X, y)","df4781c1":"predictions = clf.predict(X_test)\n\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predictions\nsubmission.to_csv('submission_titanic.csv', index=False)","5836204e":"# Delete Columns","cd8ae479":"# Prediction and Submission","cf6ccadd":"# Devide Column ","1a3b23dc":"# Pipeline Modeling","d3bf770f":"# Set Train data and target \/ Set Test data","8b1473ec":"# Load Data"}}