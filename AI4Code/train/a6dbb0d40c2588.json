{"cell_type":{"7f551483":"code","741c5e00":"code","49ba3ec0":"code","896193f1":"code","d97284cc":"code","2de6f115":"code","6a63d4e7":"code","fed94507":"code","198534e5":"code","84ad804e":"code","016c708f":"code","e2fced41":"code","02fc651e":"code","2db7c1fd":"code","79054b90":"code","85272266":"code","43dbd608":"code","ba8f859f":"code","8e180e68":"code","6d707977":"code","a065b2b9":"code","79b3352b":"code","c766647d":"code","1b272bfd":"code","dc4ffb4f":"code","fe15f4b3":"code","8bcd059f":"code","90d3c38a":"code","7f61a96b":"code","03b934ee":"code","cd02c25e":"code","51ed4fe7":"code","72736c43":"code","35f4c61c":"markdown","26d58949":"markdown","19951854":"markdown"},"source":{"7f551483":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","741c5e00":"# We will call the dataframe using the variable name (df)\n\ndf = pd.read_csv('\/kaggle\/input\/dummy-advertising-and-sales-data\/Dummy Data HSS.csv')","49ba3ec0":"# We now have defined (df) as a DataFrame. Now, we want to see how the DF looks like\n\ndf","896193f1":"# We want to see the data types in our example, we can use df.info()\n\ndf.info()","d97284cc":"df","2de6f115":"# Which one do you think is the dependent variable? Sales.\n# The others are predictors (independent variable)\n\n# We can define X and Y as independent and dependent variables\n\nx = df.iloc[:,0:3].values # I'm reading dataframe in all rows, but only columns index 0 to 3 (but note that Python only include the first one and not the last one)\ny = df.iloc[:,-1:].values # Similar with the above point","6a63d4e7":"# as for NaN (Not a Number) and Null data, we again can use df.info()\n\ndf.info()","fed94507":"df.head(50)","198534e5":"df.isnull().sum()","84ad804e":"df.info()","016c708f":"# Function","e2fced41":"def my_function():\n    print('This is my function')","02fc651e":"my_function()","2db7c1fd":"def Shoot_him():\n    print(\"he is dead now\")","79054b90":"Shoot_him()","85272266":"def turn_on_light():\n    print('the light is on now')","43dbd608":"turn_on_light()","ba8f859f":"def multiply5(x):\n    return x*5","8e180e68":"multiply5(90)","6d707977":"a = 200\nb = 33\n\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\nelse:\n  print(\"a is greater than b\")","a065b2b9":"# Why are these important? Conditional, function, data types, etc.\n\n# Because, in handling our dataframe (rows\/columns) we might need to feature engineer some of them using conditional, function, or change the data types\n\n# 80% in data analysis, focuses largely on data cleaning\/data preprocessing","79b3352b":"# Boolean\n\nprint(10 > 9)","c766647d":"print(9 > 1000)","1b272bfd":"print(1000 == 1000)","dc4ffb4f":"a = list(range(100))","fe15f4b3":"# for loop, is just trying to literally loop from the first to the end of the list\n\nfor i in a:\n    print(i)","8bcd059f":"df","90d3c38a":"df.loc[df['TV'] < 40] ","7f61a96b":"df","03b934ee":"type(df.iloc[:,0:1]) # DataFrame","cd02c25e":"type(df.iloc[:,0:1].values) # Array","51ed4fe7":"type(df['TV']) # Series","72736c43":"type(list(df['TV']))","35f4c61c":"# Session 1\n\n1. Data Types (Int, Float, Object, etc.)\n2. Variables (Independent and Dependent Variables)\n3. Null data \/ NaN data (Not a Number)\n4. Dataframe\n5. Function\n6. Conditional\n7. Boolean\n8. For loop\n9. Series\n10. List and Array","26d58949":"## Dataframe and Data Types\n\nIn the codes below, we will read the dataframe, and we will se the data types.","19951854":"So, in terms of **Data Types**, our Dataframe contains four numerical data, and one non-numeric data.\n\nNumerical data --> Float and Integer\n* Float (decimal points)\n* Integer (non-decimal points)"}}