{"cell_type":{"6ce7ede5":"code","1b0bf1d7":"code","653b42b3":"code","caa029f3":"code","82dd285d":"code","314ba647":"code","8a48e229":"code","094ee63e":"code","95c7266d":"code","878d1c52":"code","1d6d7d0d":"code","07220308":"code","f91a5173":"code","a0bc3060":"code","eedbf0d1":"code","f9166e2f":"code","04e41942":"code","7ddbbea3":"code","7cbefba7":"code","2b62abb0":"code","37cded64":"code","c59cf6de":"code","7577e0f7":"markdown","29a9ea7f":"markdown","463cabc5":"markdown","8e94fcf7":"markdown","dabf6ea0":"markdown","14350802":"markdown","8cb82d29":"markdown","59daf530":"markdown","1e2b14f4":"markdown","e97fabb8":"markdown","9443351e":"markdown","0be51ef6":"markdown","316d9bb3":"markdown","29a7e588":"markdown","00aa86dc":"markdown","b2fa4f7b":"markdown"},"source":{"6ce7ede5":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom datetime import date,datetime\nfrom collections import Counter\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set_style(\"darkgrid\")","1b0bf1d7":"def auto(axis):\n    for i in axis.patches:\n           axis.text(i.get_x() + i.get_width() \/ 2, i.get_height() + 5, i.get_height(),ha='center', va='bottom')","653b42b3":"bank = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv') \nbank = bank.drop(bank.columns[21:23],axis=1)\nbank = bank.drop(bank.columns[0],axis=1)\nbank.head()\n","caa029f3":"bank.info()","82dd285d":"fig , a = plt.subplots(1,2,figsize=(10,5))\nsns.countplot(x='Gender',data=bank,ax=a[0])\nauto(a[0])\na[1].pie(bank.Gender.value_counts().sort_values(),labels=bank.Gender.value_counts().sort_values().index,autopct='%1.1f%%')\na[1].legend()","314ba647":"fig1 , a1 = plt.subplots(1,3,figsize=(20,5))\nsns.countplot(x='Attrition_Flag',data=bank,ax=a1[0],palette=['lightblue','lightgreen'])\nauto(a1[0])\na1[1].pie(bank.Attrition_Flag.value_counts(),labels=bank.Attrition_Flag.value_counts().index,autopct='%1.1f%%',colors=['lightblue','lightgreen'])\nsns.countplot(x='Attrition_Flag',hue='Gender',data=bank,ax=a1[2])\nauto(a1[2])","8a48e229":"fig2 , a2 = plt.subplots(1,2,figsize=(15,5))\nsns.distplot(bank['Customer_Age'] ,ax=a2[0] ,kde=True)\nsns.boxplot(y='Customer_Age',x='Gender',data=bank,ax=a2[1])","094ee63e":"a3=sns.countplot(x='Dependent_count',data=bank)\nauto(a3)","95c7266d":"fig4 , a4 = plt.subplots(1,2,figsize=(15,5))\nsns.countplot(x='Education_Level',data=bank,ax=a4[0])\nauto(a4[0])\nsns.countplot(x='Education_Level',hue='Gender',data=bank,ax=a4[1])","878d1c52":"fig5 , a5 = plt.subplots(1,2,figsize=(15,5))\nsns.countplot(x='Marital_Status',data=bank,ax=a5[0])\nauto(a5[0])\nsns.countplot(x='Marital_Status',hue='Gender',data=bank,ax=a5[1])","1d6d7d0d":"income_order=['Less than $40K','$40K - $60K','$60K - $80K','$80K - $120K','$120K +','Unknown']\nfig6 , a6 = plt.subplots(1,2,figsize=(15,5))\nsns.countplot(x='Income_Category',data=bank,ax=a6[0],order=income_order)\nauto(a6[0])\nsns.countplot(x='Income_Category',hue='Gender',data=bank,ax=a6[1],order=income_order)","07220308":"fig7 , a7 = plt.subplots(1,2,figsize=(15,5))\nsns.countplot(x='Card_Category',data=bank,ax=a7[0])\nauto(a7[0])\nsns.countplot(x='Card_Category',hue='Gender',data=bank,ax=a7[1])","f91a5173":"col= ['Gender','Education_Level','Marital_Status','Income_Category','Card_Category']\ndata1=pd.DataFrame(pd.get_dummies(bank.Attrition_Flag)['Attrited Customer'])\ndata2=pd.get_dummies(bank,columns=col,drop_first=True).drop('Attrition_Flag',axis=1)\ndata=pd.concat([data1,data2],axis=1)\ndata.head()","a0bc3060":"corr=data.corr()\na8 = plt.figure(figsize = (15,10))\nsns.heatmap(corr,annot=True)","eedbf0d1":"col_use=corr.iloc[:,0][abs(corr.iloc[:,0]) > 0.1].index\nUse=data[col_use]\nUse.head(3)","f9166e2f":"sns.heatmap(Use.corr(),annot=True)","04e41942":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n# Set seed for reproducibility\nSEED = 1","7ddbbea3":"# Split data into 70% train and 30% test\nX_train, X_test, y_train, y_test = train_test_split(Use.iloc[:,1:10], Use.iloc[:,0],test_size= 0.3,random_state= SEED)\n# Instantiate individual classifiers\nlr = LogisticRegression(random_state=SEED)\nknn = KNeighborsClassifier()\ndt = DecisionTreeClassifier(random_state=SEED)\n# Define a list called classifier that contains the tuples (classifier_name, classifier)\nclassifiers = [('Logistic Regression', lr),('K Nearest Neighbours', knn),('Classification Tree', dt)]","7cbefba7":"# Iterate over the defined list of tuples containing the classifiers\nfor name, clf in classifiers:\n    #fit clf to the training set\n    clf.fit(X_train, y_train)\n    # Predict the labels of the test set\n    y_pred = clf.predict(X_test)\n    # Evaluate the accuracy of clf on the test set\n    print('{:s} : {:.3f}'.format(name, accuracy_score(y_test, y_pred)))","2b62abb0":"# Instantiate a VotingClassifier 'vc'\nvc = VotingClassifier(estimators=classifiers)\n# Fit 'vc' to the traing set and predict test set labels\nvc.fit(X_train, y_train)\ny_pred = vc.predict(X_test)\n# Evaluate the test-set accuracy of 'vc'\nprint('Voting Classifier: {:.3f}'.format(accuracy_score(y_test, y_pred)))","37cded64":"classifiers2=[('K Nearest Neighbours', knn)]\n# Iterate over the defined list of tuples containing the classifiers\nfor name, clf in [('Logistic Regression', lr),('Classification Tree', dt)]:\n    # Instantiate an AdaBoost classifier 'adab_clf'\n    adb_clf = AdaBoostClassifier(base_estimator=clf, n_estimators=100)\n    classifiers2.append((name,adb_clf))\n    #fit clf to the training set\n    adb_clf.fit(X_train, y_train)\n    # Predict the labels of the test set\n    y_pred = adb_clf.predict(X_test)\n    # Evaluate the accuracy of clf on the test set\n    print('{:s} : {:.3f}'.format(name, accuracy_score(y_test, y_pred)))","c59cf6de":"# Instantiate a VotingClassifier 'vc'\nvc = VotingClassifier(estimators=classifiers2)\n# Fit 'vc' to the traing set and predict test set labels\nvc.fit(X_train, y_train)\ny_pred = vc.predict(X_test)\n# Evaluate the test-set accuracy of 'vc'\nprint('Voting Classifier: {:.3f}'.format(accuracy_score(y_test, y_pred)))","7577e0f7":"# **Number Male and Female**","29a9ea7f":"# **Take Numerical data**","463cabc5":"# **Using Adapt Boosting for Logistic and Decision Tree model **","8e94fcf7":"# **Explorating data**","dabf6ea0":"# **Statistics Churned Customers**","14350802":"# **Built the predict models**","8cb82d29":"# **Marital Status**","59daf530":"# **Check correlation to find the feature for prediction models**","1e2b14f4":"# **Check N\/a data**","e97fabb8":"# **Study's level of customers**","9443351e":"# **Update results with the Voting Classifier**","0be51ef6":"# **Dependent count data**","316d9bb3":"# **Income for customers**","29a7e588":"# **Age of customers**","00aa86dc":"# **Combine Adapt Boosting with Voting Classifier**","b2fa4f7b":"# **Accuracy for Logistic , KNN and Decision Tree model**"}}