{"cell_type":{"a15e6d05":"code","112cbe3f":"code","c65b0356":"code","430f376a":"code","420ab347":"code","df9fd89b":"code","04739580":"code","31d87c16":"code","405204aa":"code","f89e156a":"code","73874ddf":"code","be5f11de":"code","1476f4ca":"code","e1881ea1":"code","fb8d69b5":"code","20646b3b":"code","119d6aa6":"code","8650eda5":"code","d1bbd2cb":"code","40f20e8e":"code","c3c1198b":"code","70945504":"code","05ac1132":"code","75141a22":"code","b3986e5e":"code","091d1c19":"code","800617da":"code","790ebe47":"code","a9cf2f54":"code","8561bd09":"code","5f107943":"code","73fb6dcf":"code","9e0c9601":"code","7f221a67":"code","65b1de7e":"code","c29199b3":"code","33ac380d":"code","614cef41":"code","6a33b517":"code","1193dc25":"code","fee0654a":"code","fb9e49ba":"code","162aee09":"code","3067f7e2":"code","ee6294c3":"code","385ca646":"code","b96e1f3c":"code","7bcdfa9a":"code","9a44aea5":"code","054a6314":"code","286a7708":"code","6c62a893":"code","334d9057":"code","5bac3544":"code","3f03550c":"code","7e44c356":"code","843c53d7":"code","f1b38fe1":"code","69416927":"code","5e05d3e4":"code","3700456e":"code","85a954f1":"code","fb31e5df":"code","b3588504":"code","16af2010":"code","35171203":"code","37da3cbe":"code","e6c6dc2e":"code","191a2b05":"code","084ed10c":"code","0ed11340":"code","60ec4d02":"code","55162949":"code","ea20731b":"code","3edb6ec1":"code","a4a51e04":"code","3425fb39":"markdown","3c9155c6":"markdown","36506b87":"markdown","54a811d2":"markdown","1d825496":"markdown","475ff9c1":"markdown","7a489e76":"markdown","f7de8a47":"markdown","3144dbdd":"markdown","b61c0464":"markdown","df493eb8":"markdown","02aedb73":"markdown","4388f5f2":"markdown","6d36b36d":"markdown","87ec053e":"markdown","eb25cb44":"markdown","7f83e6a0":"markdown","f3e3d43b":"markdown","1d5b984f":"markdown","8d3c0a5c":"markdown","bb1d793e":"markdown","52ae9df3":"markdown","30a50367":"markdown","2c6ec4ab":"markdown","709f5cce":"markdown","7d4e2190":"markdown","80f5787b":"markdown","d8047467":"markdown","df72301c":"markdown","f5d9c8b0":"markdown","c51c53b8":"markdown","c88b41cc":"markdown","99e0ca85":"markdown","5f831cc5":"markdown","4d06ed92":"markdown","f7df112e":"markdown","c19803ae":"markdown","582d7d71":"markdown","1c788723":"markdown","34998ef5":"markdown","1b00b9a8":"markdown","5ac1ad7e":"markdown","454a0bbc":"markdown"},"source":{"a15e6d05":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","112cbe3f":"!pip install geotext","c65b0356":"c_df = pd.read_csv('..\/input\/covid19-tweets\/covid19_tweets.csv')\nc_df.head(10)","430f376a":"c_df.shape","420ab347":"c_df.info()","df9fd89b":"c_df.describe()","04739580":"100*c_df.isnull().sum()\/len(c_df)","31d87c16":"## Dropping the NA values, as imputing values would not be right for this dataset.\nc_df.dropna(inplace = True)","405204aa":"## Na Check\n100*c_df.isnull().sum()\/len(c_df)","f89e156a":"## Top 10 user_location or places of tweets.\n\ntweet_location = c_df['user_location'].value_counts()\ntweet_loc = tweet_location[:10]\ntweet_loc","73874ddf":"tw_loc = pd.DataFrame(tweet_loc)\ntw_loc = tw_loc.reset_index()\ntw_loc.columns = ['Location', 'counts']\ntw_loc","be5f11de":"plt.figure(figsize = (15,10))\nsns.barplot(x = tw_loc.Location,y = tw_loc.counts, data = tw_loc)","1476f4ca":"tweet_location","e1881ea1":"Loc_count=pd.DataFrame(c_df['user_location'].value_counts())\nLoc_count.reset_index(inplace = True)\nLoc_count.rename(columns={'index':'Location','user_location':'count'},inplace=True)\nLoc_count.sort_values(by='count',inplace=True,ascending=False)\nLoc_count","fb8d69b5":"from geotext import GeoText\nlocation=Loc_count.loc[2]['Location']\nprint(GeoText(location).countries)","20646b3b":"#!pip install geotext","119d6aa6":"loc_country=Loc_count.copy()","8650eda5":"loc_country['Location']=loc_country['Location'].apply(lambda x:x.replace(',',' '))\nloc_country['Location']=loc_country['Location'].apply(lambda x:(GeoText(x).country_mentions))\nloc_country","d1bbd2cb":"loc_country.drop(loc_country[loc_country['Location']=='[]'].index,inplace=True)\nloc_country['Location']=loc_country['Location'].apply(lambda x:(x.keys()))\nloc_country['Location']=loc_country['Location'].apply(lambda x:list(x))\nloc_country","40f20e8e":"loc_country.drop(loc_country.index[loc_country.Location.map(len)==0],inplace=True)\nloc_country","c3c1198b":"loc_country['Location']=loc_country['Location'].apply(lambda x:str(x[0]))\nloc_country","70945504":"agg_func={'count':'sum'}\nloc_country=loc_country.groupby(['Location']).aggregate(agg_func)\nloc_country","05ac1132":"loc_country.sort_values(by=['count'],ascending=False,inplace=True)\nloc_country.reset_index(inplace=True)\nloc_country","75141a22":"loc_country20 = loc_country.head(20)\nloc_country20\nplt.figure(figsize = (15,10))\nsns.barplot(x = 'Location', y = 'count' ,data = loc_country20)\nplt.title('Top 20 countries with highest count of tweets', fontweight = 'bold')","b3986e5e":"## Data Analysis of the Date Column\n\ndate_df = c_df.copy()\ndate_df['date'].value_counts()","091d1c19":"date_df['Dates'] = pd.to_datetime(date_df['date']).dt.date\ndate_df['Time'] = pd.to_datetime(date_df['date']).dt.time","800617da":"date_count = date_df['Dates'].value_counts()\ndate_count = date_df['Dates'].value_counts().reset_index()\ndate_count = pd.DataFrame(date_count)\ndate_count.columns = ['Date', 'counts']\n\ndate_count","790ebe47":"plt.figure(figsize = (20,10))\nsns.lineplot(x =date_count.Date, y = date_count.counts, color = 'red', marker = 'o')\nplt.title('Number of Tweet per day')","a9cf2f54":"c_df.head()","8561bd09":"ht_count = c_df['hashtags'].value_counts()\nht_count","5f107943":"def htg(x):\n    x = str(x)\n    x = x.replace('[', '')\n    x = x.replace(']', '')\n    x = x.split(',')\n    return x\n\n## The hashtags are not clear and also not unique words, so the code below transformed it into unique words.\n\nht_count = c_df['hashtags'].value_counts().reset_index()\nht_count = pd.DataFrame(ht_count)\nht_count.columns = ['Hashtags', 'counts']\nht_count['Hashtags'] = ht_count['Hashtags'].apply(lambda x:htg(x))\nht_count = ht_count.explode('Hashtags')\nht_count['Hashtags'] = ht_count['Hashtags'].str.lower()\nht_count['Hashtags'] = ht_count['Hashtags'].str.replace(\" \",\"\")\nht_count['Hashtags'] = ht_count['Hashtags'].str.replace(\"'\",\"\")\nht_count10 = ht_count['Hashtags'].value_counts().reset_index()\nht_count10 = ht_count10[0:10]\nht_count10.rename(columns = {'index':'HashTag', 'Hashtags':'Count'}, inplace = True)\nht_count10","73fb6dcf":"plt.figure(figsize = (20,10))\nsns.barplot(x = ht_count10.HashTag, y = ht_count10.Count, data = ht_count10)\nplt.title('Top 10 Hashtags on Twitter', fontweight = 'bold', fontsize='15')","9e0c9601":"c_df.head()","7f221a67":"c_df['source'].value_counts()","65b1de7e":"t_source = c_df['source'].value_counts().reset_index()\nt_source = pd.DataFrame(t_source)\nt_source.columns = ['Source of Tweet', 'counts']\nt_source = t_source[t_source['counts']>=300]\nt_source","c29199b3":"plt.figure(figsize = (30,15))\nsns.barplot(x = 'Source of Tweet', y = 'counts', data = t_source)\nplt.title('Sources of Tweets with count more than 300', fontweight = 'bold')","33ac380d":"rts = c_df['is_retweet'].value_counts().reset_index()\n\nrts = pd.DataFrame(rts)\nrts.columns = ['RT: True or False', 'counts']\nrts","614cef41":"##finding out the date of the first tweet in dataset\ndate_col = date_df['Dates']\ndate_col.reset_index()\ndate_col = pd.DataFrame(date_col)\ndate_col.sort_values(by='Dates',inplace=True)\ndate_col['Dates'].iloc[0:1]","6a33b517":"\nbef_date = date_df[date_df['user_created'] < '2020-07-24']\naft_date = date_df[date_df['user_created'] >= '2020-07-24']\nlen1 = bef_date.shape[0]\nlen2 = aft_date.shape[0]\nbef_perc = len1\/(len1+len2)\naft_perc = len2\/(len1+len2)\ndata = [['Before 1st Tweet',bef_perc],['After 1st Tweet',aft_perc]]\nacc_creation = pd.DataFrame(data, columns = ['Category', 'Percent'])\nacc_creation\n","1193dc25":"c_df.head()","fee0654a":"username = c_df['user_name'].value_counts().reset_index()\nusername = pd.DataFrame(username)\nusername.columns = ['Twitter UserName', 'Number of Tweets']\nusername = username.head(15)\nusername","fb9e49ba":"plt.figure(figsize = (30,10))\nsns.barplot(x = 'Twitter UserName', y = 'Number of Tweets', data = username)","162aee09":"c_df['user_verified'].value_counts()","3067f7e2":"plt.figure(figsize = (10,10))\nsns.countplot('user_verified', data = c_df)","ee6294c3":"new = c_df[['user_name', 'user_followers']].copy()\nnew = new.drop_duplicates(subset = ['user_name'])\n\nnew = new.sort_values(by = ['user_followers'], ascending = False)\nnew15 = new.head(15)\nnew15","385ca646":"plt.figure(figsize = (30,15))\nsns.barplot(x = 'user_name', y = 'user_followers', data = new15)\nplt.xlabel('User Name', fontweight = 'bold')\nplt.ylabel('No of Follower', fontweight = 'bold')\nplt.title('Top 15 Twitter usernames by follower count')","b96e1f3c":"year_df = c_df.copy()\nyear_df['Year'] = pd.to_datetime(year_df['user_created']).dt.year\nyear_df['Year'].value_counts()","7bcdfa9a":"plt.figure(figsize = (20,10))\nsns.countplot(year_df['Year'], data = year_df)","9a44aea5":"hour1 = c_df.copy()\nhour1['hour_of_day'] = pd.to_datetime(hour1['date']).dt.hour\nhour1.head()","054a6314":"hour2 = hour1['hour_of_day'].value_counts().reset_index()\nhour2 = pd.DataFrame(hour2)\nhour2.columns = ['Hour of Day', 'count of tweets per hour']\nhour2 = hour2.sort_values(by = ['count of tweets per hour'], ascending = False)\nhour2\n","286a7708":"plt.figure(figsize = (15,8))\nsns.barplot(x = 'Hour of Day',y = 'count of tweets per hour', data = hour2)\nplt.title('Tweet count by Hour of the Day', fontweight = 'bold')","6c62a893":"from wordcloud import WordCloud, STOPWORDS\ndef word_cloud_func(c_df):\n    word_cloud = WordCloud(\n    background_color = 'black',\n    stopwords = set(STOPWORDS),\n    max_words = 50,\n    max_font_size = 40,\n    \n    ).generate(str(c_df))\n    fig = plt.figure(\n    figsize = (20, 20),\n    facecolor = 'k',\n    edgecolor = 'k')\n    plt.axis('off')\n    \n    fig.subplots_adjust(top=2.3)\n    plt.imshow(word_cloud)\n    plt.show()","334d9057":"word_cloud_func(c_df['text'])","5bac3544":"temp_df = c_df[c_df['user_name']=='covidnews.ch']\nword_cloud_func(temp_df['text'])","3f03550c":"temp_df = c_df[c_df['user_name']=='GlobalPandemic.NET']\nword_cloud_func(temp_df['text'])","7e44c356":"temp_df = c_df[c_df['user_name']=='Blood Donors India']\nword_cloud_func(temp_df['text'])","843c53d7":"temp_df = c_df[c_df['user_name']=='Hindustan Times']\nword_cloud_func(temp_df['text'])","f1b38fe1":"temp_df = c_df[c_df['user_name']=='IANS Tweets']\nword_cloud_func(temp_df['text'])","69416927":"temp_df = c_df[c_df['user_name']=='Shashi Tharoor']\nword_cloud_func(temp_df['text'])","5e05d3e4":"temp_df = c_df[c_df['user_name']=='NDTV']\nword_cloud_func(temp_df['text'])","3700456e":"temp_df = c_df[c_df['user_name']=='World Health Organization (WHO)']\nword_cloud_func(temp_df['text'])","85a954f1":"temp_df = c_df[c_df['user_name']=='OTV']\nword_cloud_func(temp_df['text'])","fb31e5df":"word_cloud_func(c_df['user_description'])","b3588504":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\nkc_df = c_df.copy()\nvec = TfidfVectorizer(stop_words=\"english\")\nvec.fit(kc_df['text'].values)\nfeatures = vec.transform(kc_df['text'].values)","16af2010":"kmeans = KMeans(n_clusters=2, random_state=0)\nkmeans.fit(features)","35171203":"temp = kmeans.predict(features)\nkc_df['Cluster'] = temp\nkc_df","37da3cbe":"len(kc_df[kc_df['Cluster'] == 0])","e6c6dc2e":"len(kc_df[kc_df['Cluster'] == 1])","191a2b05":"word_cloud_func(kc_df[kc_df['Cluster'] == 0]['text'])","084ed10c":"word_cloud_func(kc_df[kc_df['Cluster'] == 1]['text'])","0ed11340":"kmeans1 = KMeans(n_clusters=4, random_state=0)\nkmeans1.fit(features)","60ec4d02":"temp1 = kmeans1.predict(features)\nkc_df['Cluster4'] = temp1\nkc_df","55162949":"word_cloud_func(kc_df[kc_df['Cluster4'] == 0]['text'])","ea20731b":"word_cloud_func(kc_df[kc_df['Cluster4'] == 1]['text'])","3edb6ec1":"word_cloud_func(kc_df[kc_df['Cluster4'] == 2]['text'])","a4a51e04":"word_cloud_func(kc_df[kc_df['Cluster4'] == 3]['text'])","3425fb39":"### Twitter Account creation Year Analysis","3c9155c6":"###  For GlobalPandemic.NET","36506b87":"**Top 10 username with maximum number of tweets:**\n0.\tcovidnews.ch\t\n1.\tGlobalPandemic.NET\t\n2.\tBlood Donors India\t\n3.\tHindustan Times\t\n4.\tIANS Tweets\t\n5.\tOTV\t\n6.\tCOVID Scale\t\n7.\tSambad English\n8.\tANI\t\n9.\tABS-CBN News.","54a811d2":"### Extracting Hour from time of Tweet and Analysis","1d825496":"- **Number of Samples for Cluster 0: 89503**\n- **Number of Samples for Cluster 1: 9635**","475ff9c1":"### Word Cloud for Cluster 0","7a489e76":"### Source Analysis","f7de8a47":"**Top 5 Twitter pages in terms of twitter followers:**\n1. National Geographic\n2. CGTN\n3. NDTV\n4. The Times of India\n5. United Nations","3144dbdd":"## For OTV","b61c0464":"### For Hindustan Times","df493eb8":"### For Shashi Tharoor","02aedb73":"**The years 2009, 2010, 2011, 2012 and 2020 are the top 5 years in terms of account created counts on Twitter**","4388f5f2":"**Top 5 sources of Tweets:**\n0.\tTwitter Web App\t\n1.\tTwitter for Android\t\n2.\tTwitter for iPhone\t\n3.\tTweetDeck\t\n4.\tHootsuite Inc.\t","6d36b36d":"### Word Cloud for Cluster 3 (4 Clusters)","87ec053e":"### Word Cloud for Cluster 2 (4 Clusters)","eb25cb44":"## Wordcloud Analysis","7f83e6a0":"### For Blood Donors India","f3e3d43b":"### Let's try for no of Clusters = 4","1d5b984f":"## Exploratory Data Analysis and Data Visualization","8d3c0a5c":"### Number of Followers Analysis","bb1d793e":"## K-Means Clustering","52ae9df3":"### Account Creation Analysis","30a50367":"### Hashtags Analysis","2c6ec4ab":"### WordCloud for top 5 users","709f5cce":"### For covidnews.ch","7d4e2190":"## Word Cloud Analysis for User description","80f5787b":"### Word Cloud for Cluster 1","d8047467":"### For NDTV","df72301c":"**Top 5 Countries with highest count of tweets:  US - USA, IN- India, GB- Great Britain, CA- Canada, AU- Australia**","f5d9c8b0":"### Word Cloud for Cluster 0 (4 Clusters)","c51c53b8":"### Some extra Analysis","c88b41cc":"### User verified Analysis","99e0ca85":"**Top 10 hours of day which observe high number of tweet counts:**\n0.\t7 : 7AM\t\n1.\t6 : 6AM\t\n2.\t8 : 8AM\n3.\t5 : 5AM\t\n4.\t4 : 4AM\n5.\t16 :4PM\t\n6.\t3 :3AM\t\n7.\t9 :9AM\t\n8.\t17 : 5PM\t\n9.\t18 : 6PM\t","5f831cc5":"### For WHO","4d06ed92":"**Top 5 Hashtags**\n1. covid19\n2. coronavirus\n3. pandemic\n4. covid\n5. India","f7df112e":"### For IANS Tweets","c19803ae":"### Retweet Analysis","582d7d71":"### Word Cloud for all tweets in the dataset","1c788723":"- covidnews.ch\n- GlobalPandemic.NET\n- Blood Donors India\n- Hindustan Times\n- IANS Tweets","34998ef5":"### Location vs Tweet counts","1b00b9a8":"### Username vs Count Analysis(Tweet Count)","5ac1ad7e":"### Date vs Tweet Counts","454a0bbc":"### Word Cloud for Cluster 1 (4 Clusters)"}}