{"cell_type":{"c222155a":"code","e13cb078":"code","39dca754":"code","572ede22":"code","0bded2fc":"code","d2c055ad":"code","39e0c312":"code","7ae3d961":"code","11da81f4":"code","56e32aac":"code","a6e31c37":"code","972d3750":"code","6a2c07aa":"code","00c1bb12":"code","42b9afdc":"code","8fb1c426":"code","32986437":"code","932886df":"code","cc9f718a":"code","70f2fcd7":"code","5cdb5984":"code","66aaa9d9":"code","a2f14f4c":"code","73d32e6e":"code","7e5688ab":"code","7008cd14":"code","d2189933":"code","5e0ee4cd":"code","d183b12d":"code","38132aa7":"code","c4138417":"code","369ea76a":"code","55e15e2f":"code","63417312":"code","c0e6043f":"code","e06d11e6":"markdown"},"source":{"c222155a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n\n#Installing tensorflow 2.0\n#!pip install -q tensorflow==2.0.0-alpha0\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e13cb078":"titanic_train = pd.read_csv('\/kaggle\/input\/train.csv')\ntitanic_test = pd.read_csv('\/kaggle\/input\/test.csv')\n\ntitanic_train.head()","39dca754":"titanic_test.head()","572ede22":"titanic_train.info()","0bded2fc":"titanic_train.describe()","d2c055ad":"from sklearn.model_selection import train_test_split\n\nX_train, X_val = train_test_split(titanic_train, test_size=0.2, random_state=42)","39e0c312":"X_train.head()","7ae3d961":"X_train['Embarked'].value_counts()","11da81f4":"embarked_replace = 'S'\nY_train = X_train['Survived']\nY_val = X_val['Survived']\n\ndropping_columns = ['Survived', 'Name', 'Ticket', 'Cabin']\nX_train = X_train.drop(dropping_columns, axis=1)\nX_val = X_val.drop(dropping_columns, axis=1)","56e32aac":"X_train['Embarked'] = X_train['Embarked'].fillna(embarked_replace)\nX_val['Embarked'] = X_val['Embarked'].fillna(embarked_replace)","a6e31c37":"X_train.head()","972d3750":"X_val.head()","6a2c07aa":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder, MinMaxScaler, RobustScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n","00c1bb12":"num_pipeline = Pipeline([        \n                          ('imputer', SimpleImputer(strategy=\"mean\")),        \n                          ('std_scaler', StandardScaler()),\n                          \n                        ])\n\nfare_pipeline = Pipeline([        \n                          ('rb_scaler', RobustScaler()),    \n                        ])","42b9afdc":"num_attribs = ['Pclass','Age','SibSp','Parch']\nfare_attrib = ['Fare']\ncat_attribs = ['Sex','Embarked']","8fb1c426":"full_pipeline = ColumnTransformer([        \n    (\"num\", num_pipeline, num_attribs),        \n    (\"f_num\", fare_pipeline, fare_attrib),   \n    (\"cat\", OneHotEncoder(), cat_attribs)   \n])","32986437":"X_train_prepared = full_pipeline.fit_transform(X_train)","932886df":"X_val_prepared = full_pipeline.transform(X_val)","cc9f718a":"X_train_prepared.shape","70f2fcd7":"X_train_prepared","5cdb5984":"Y_val.head()","66aaa9d9":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau , ModelCheckpoint\n#from keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.callbacks import EarlyStopping","a2f14f4c":"tf.__version__","73d32e6e":"keras.backend.clear_session()\nnp.random.seed(42)\n#tf.random.set_seed(42)\n\nmodel = keras.models.Sequential([       \n                                    keras.layers.Dense(90, activation=\"relu\", input_dim=10),    \n                                    keras.layers.Dropout(0.2),                                     \n                                    keras.layers.Dense(45, activation=\"relu\"),    \n                                    keras.layers.Dropout(0.2),                                     \n                                    keras.layers.Dense(15, activation=\"relu\"),    \n                                    keras.layers.Dense(1, activation=\"sigmoid\"),\n                                ])\n\nmodel.compile(loss=\"binary_crossentropy\",              \n              optimizer=\"sgd\",\n              #optimizer=\"RMSprop\",\n              metrics=[\"accuracy\"])\n","7e5688ab":"model.summary()","7008cd14":"filepath = \"titanic_model.h5\"\n\n#lr_reduce = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=1, verbose=1)\ncheckpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n\neraly_stop = EarlyStopping(monitor='val_loss', min_delta=0.0001, patience=10, verbose=1, mode='auto')\n# Reducing the Learning Rate if result is not improving. \nreduce_lr = ReduceLROnPlateau(monitor='val_loss', min_delta=0.0004, patience=2, factor=0.1, min_lr=1e-6, mode='auto',\n                              verbose=1)","d2189933":"history = model.fit(X_train_prepared, Y_train, epochs=500,callbacks = [eraly_stop, reduce_lr, checkpoint],\n                    validation_data=(X_val_prepared, Y_val))","5e0ee4cd":"history.params","d183b12d":"history.history.keys()","38132aa7":"pd.DataFrame(history.history).plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0, 1)\n#save_fig(\"keras_learning_curves_plot\")\nplt.show()","c4138417":"test_dropping_columns = ['Name', 'Ticket', 'Cabin']\n\nX_test =  titanic_test.drop(test_dropping_columns, axis=1)\nX_test['Embarked'] = X_test['Embarked'].fillna(embarked_replace)","369ea76a":"X_test_prepared = full_pipeline.transform(X_test)","55e15e2f":"titanic_model = keras.models.load_model(\"titanic_model.h5\")\nY_test_predict_DL = titanic_model.predict_classes(X_test_prepared)","63417312":"Y_test_predict_DL","c0e6043f":"#Writing to File\nsubmission=pd.DataFrame(titanic_test.loc[:,['PassengerId']])\nsubmission['Survived']=Y_test_predict_DL\n#Any files you save will be available in the output tab below\n\nsubmission.to_csv('submission.csv', index=False)","e06d11e6":"**Preparing TEST data**"}}