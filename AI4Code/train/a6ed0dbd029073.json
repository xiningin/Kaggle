{"cell_type":{"5cb1b54d":"code","12fc0295":"code","7be7a2c2":"code","28204648":"code","ec2be902":"code","dd2280ec":"code","662fe182":"code","6eb3ae46":"code","286f3319":"code","8d3da788":"markdown"},"source":{"5cb1b54d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\n\nfrom scipy.spatial import Voronoi, voronoi_plot_2d","12fc0295":"#from https:\/\/www.kaggle.com\/cpmpml\/initial-wrangling-voronoi-areas-in-python\ndef get_dx_dy(radian_angle, dist):\n    dx = dist * math.cos(radian_angle)\n    dy = dist * math.sin(radian_angle)\n    return dx, dy","7be7a2c2":"#from https:\/\/stackoverflow.com\/questions\/20515554\/colorize-voronoi-diagram\ndef voronoi_finite_polygons_2d(vor, radius=None):\n    \"\"\"\n    Reconstruct infinite voronoi regions in a 2D diagram to finite\n    regions.\n\n    Parameters\n    ----------\n    vor : Voronoi\n        Input diagram\n    radius : float, optional\n        Distance to 'points at infinity'.\n\n    Returns\n    -------\n    regions : list of tuples\n        Indices of vertices in each revised Voronoi regions.\n    vertices : list of tuples\n        Coordinates for revised Voronoi vertices. Same as coordinates\n        of input vertices, with 'points at infinity' appended to the\n        end.\n\n    \"\"\"\n\n    if vor.points.shape[1] != 2:\n        raise ValueError(\"Requires 2D input\")\n\n    new_regions = []\n    new_vertices = vor.vertices.tolist()\n\n    center = vor.points.mean(axis=0)\n    if radius is None:\n        radius = vor.points.ptp().max()\n\n    # Construct a map containing all ridges for a given point\n    all_ridges = {}\n    for (p1, p2), (v1, v2) in zip(vor.ridge_points, vor.ridge_vertices):\n        all_ridges.setdefault(p1, []).append((p2, v1, v2))\n        all_ridges.setdefault(p2, []).append((p1, v1, v2))\n\n    # Reconstruct infinite regions\n    for p1, region in enumerate(vor.point_region):\n        vertices = vor.regions[region]\n\n        if all(v >= 0 for v in vertices):\n            # finite region\n            new_regions.append(vertices)\n            continue\n\n        # reconstruct a non-finite region\n        ridges = all_ridges[p1]\n        new_region = [v for v in vertices if v >= 0]\n\n        for p2, v1, v2 in ridges:\n            if v2 < 0:\n                v1, v2 = v2, v1\n            if v1 >= 0:\n                # finite ridge: already in the region\n                continue\n\n            # Compute the missing endpoint of an infinite ridge\n\n            t = vor.points[p2] - vor.points[p1] # tangent\n            t \/= np.linalg.norm(t)\n            n = np.array([-t[1], t[0]])  # normal\n\n            midpoint = vor.points[[p1, p2]].mean(axis=0)\n            direction = np.sign(np.dot(midpoint - center, n)) * n\n            far_point = vor.vertices[v2] + direction * radius\n\n            new_region.append(len(new_vertices))\n            new_vertices.append(far_point.tolist())\n\n        # sort region counterclockwise\n        vs = np.asarray([new_vertices[v] for v in new_region])\n        c = vs.mean(axis=0)\n        angles = np.arctan2(vs[:,1] - c[1], vs[:,0] - c[0])\n        new_region = np.array(new_region)[np.argsort(angles)]\n\n        # finish\n        new_regions.append(new_region.tolist())\n\n    return new_regions, np.asarray(new_vertices)","28204648":"def visualize_play(rusher, ptype, vor):\n        x = rusher.X_std.values[0]\n        y = rusher.Y_std.values[0]\n        dx, dy = get_dx_dy(rusher.Dir_rad.values[0], rusher.S.values[0])\n        #fig = voronoi_plot_2d(vor)\n        regions, vertices = voronoi_finite_polygons_2d(vor)\n        # colorize\n        for i, region in enumerate(regions):\n            if ptype[i]:\n                color = \"g\"\n            else:\n                color = \"y\"\n            if i == 0:\n                color = \"r\"\n            polygon = vertices[region]\n            plt.fill(*zip(*polygon), color= color, alpha=0.4)\n        for i, point in enumerate(vor.points):\n            if ptype[i]:\n                plt.plot(point[0], point[1], \"ko\")\n            else:\n                plt.plot(point[0], point[1], \"ro\")\n        plt.xlim(vor.min_bound[0] - 0.1, vor.max_bound[0] + 0.1)\n        plt.ylim(vor.min_bound[1] - 0.1, vor.max_bound[1] + 0.1)\n        ax = plt.gca()\n        ax.arrow(x, y, dx, dy, length_includes_head=True, width=0.1, color='black')\n        scrimage_line = rusher.loc[:,[\"YardLine_std\"]].values\n        down_line = scrimage_line + rusher.loc[:,[\"Yards\"]].values\n        plt.axvline(x=scrimage_line, linewidth=1, color='r')\n        plt.axvline(x=down_line, linewidth=1, color='r')\n        plt.show()    ","ec2be902":"def voronoi_display(df, yards_filter=2, count_limit=10):\n    count = 0\n    for name, play in df[df.Yards == yards_filter].groupby(\"PlayId\"):\n        rusher = play[play.IsBallCarrier]\n        #print(play[play.IsBallCarrier].Dir_std)\n        carrier_loc = play[play.IsBallCarrier].loc[:,[\"X_std\",\"Y_std\"]].values\n        ctype = play[play.IsBallCarrier].loc[:,[\"IsOnOffense\"]].values\n        #defense_loc = play[~play.IsOnOffense].loc[:,[\"X_std\",\"Y_std\"]].values\n        notcarrier_loc = play[~play.IsBallCarrier].loc[:,[\"X_std\",\"Y_std\"]].values\n        nctype = play[~play.IsBallCarrier].loc[:,[\"IsOnOffense\"]].values\n        ptype = np.append(ctype, nctype, axis=0)\n        points = np.append(carrier_loc, notcarrier_loc, axis=0)\n        vor = Voronoi(points)\n        visualize_play(rusher, ptype, vor)\n        count += 1\n        if count == count_limit:\n            break","dd2280ec":"def data_prep(df):\n    # from https:\/\/www.kaggle.com\/cpmpml\/initial-wrangling-voronoi-areas-in-python\n    df['ToLeft'] = df.PlayDirection == \"left\"\n    df['IsBallCarrier'] = df.NflId == df.NflIdRusher\n    \n    df.loc[df.VisitorTeamAbbr == \"ARI\", 'VisitorTeamAbbr'] = \"ARZ\"\n    df.loc[df.HomeTeamAbbr == \"ARI\", 'HomeTeamAbbr'] = \"ARZ\"\n\n    df.loc[df.VisitorTeamAbbr == \"BAL\", 'VisitorTeamAbbr'] = \"BLT\"\n    df.loc[df.HomeTeamAbbr == \"BAL\", 'HomeTeamAbbr'] = \"BLT\"\n\n    df.loc[df.VisitorTeamAbbr == \"CLE\", 'VisitorTeamAbbr'] = \"CLV\"\n    df.loc[df.HomeTeamAbbr == \"CLE\", 'HomeTeamAbbr'] = \"CLV\"\n\n    df.loc[df.VisitorTeamAbbr == \"HOU\", 'VisitorTeamAbbr'] = \"HST\"\n    df.loc[df.HomeTeamAbbr == \"HOU\", 'HomeTeamAbbr'] = \"HST\"\n\n    \n    # from https:\/\/www.kaggle.com\/cpmpml\/initial-wrangling-voronoi-areas-in-python\n    df['TeamOnOffense'] = \"home\"\n    df.loc[df.PossessionTeam != df.HomeTeamAbbr, 'TeamOnOffense'] = \"away\"\n    df['IsOnOffense'] = df.Team == df.TeamOnOffense  # Is player on offense?\n    df['YardLine_std'] = 100 - df.YardLine\n    df.loc[df.FieldPosition.fillna('') == df.PossessionTeam,\n                 'YardLine_std'\n    ] = df.loc[df.FieldPosition.fillna('') == df.PossessionTeam,\n                     'YardLine']\n    df['X_std'] = df.X - 10\n    df.loc[df.ToLeft, 'X_std'] = 120 - df.loc[df.ToLeft, 'X'] - 10\n    df['Y_std'] = df.Y\n    df.loc[df.ToLeft, 'Y_std'] = 160 \/ 3 - df.loc[df.ToLeft, 'Y']\n    df['Orientation_std'] = df.Orientation\n    df.loc[df.ToLeft, 'Orientation_std'] = np.mod(180 + df.loc[df.ToLeft, 'Orientation_std'],\n                                                              360)\n    df['Dir_std'] = df.Dir\n    df.loc[df.ToLeft, 'Dir_std'] = np.mod(180 + df.loc[df.ToLeft, 'Dir_std'], 360)\n\n    df['Dir_rad'] = np.mod(90 - df.Dir_std, 360) * math.pi\/180.0\n\n    df.DefendersInTheBox.fillna(7.0, inplace=True)\n    df.Dir.fillna(0.0, inplace=True)\n    df.FieldPosition.fillna(df.PossessionTeam, inplace=True)\n    df.GameWeather.fillna(\"Sunny\", inplace=True)\n    df.Humidity.fillna(0, inplace=True)\n    df.OffenseFormation.fillna(\"SINGLEBACK\", inplace=True)\n    df.StadiumType.fillna(\"Outdoor\", inplace=True)\n    df.StadiumType.replace(\"Outdoors\", \"Outdoor\", inplace=True)\n    df.Temperature.fillna(62, inplace=True)\n    df.WindDirection.fillna(\"NE\", inplace=True)\n    df.WindSpeed.fillna(5, inplace=True)\n    \n    return df","662fe182":"dcols = {'GameId':np.int64, 'PlayId':np.int64, 'Team':str, 'X':np.float64, 'Y':np.float64, \n         'S':np.float64, 'A':np.float64, 'Dis':np.float64, 'Orientation':np.float64, 'Dir':np.float64, \n         'NflId':np.int64, 'DisplayName':str, 'JerseyNumber':np.int32, 'Season':np.int32, 'YardLine':np.int32, \n         'Quarter':np.int32, 'PossessionTeam':str, 'Down':np.int32, 'Distance':np.int32, 'FieldPosition':str,\n         'HomeScoreBeforePlay':np.int32, 'VisitorScoreBeforePlay':np.int32, 'NflIdRusher':np.int64, \n         'OffenseFormation':str, 'OffensePersonnel':str, 'DefendersInTheBox':np.float32, \n         'DefensePersonnel':str, 'PlayDirection':str, 'Yards':np.int32, 'PlayerHeight':str, \n         'PlayerWeight':np.int32, 'PlayerCollegeName':str, 'Position':str, 'HomeTeamAbbr':str, \n         'VisitorTeamAbbr':str, 'Week':np.int32, 'Stadium':str, 'Location':str, 'StadiumType':str, \n         'Turf':str, 'GameWeather':str, 'Temperature':np.float32, 'Humidity':np.float32, 'WindSpeed':str, \n         'WindDirection':str}","6eb3ae46":"seed = 42\nnp.random.seed(seed)\nNFL_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', dtype=dcols,\n                       #parse_dates=date_spec,\n                       low_memory=False)\nNFL_df = data_prep(NFL_df)","286f3319":"voronoi_display(NFL_df, yards_filter=3, count_limit=5)","8d3da788":"# NFL Big Data Bowl \n# Plays as colorized Voronoi Diagrams\n### Hopefully will help to understand the relationship between the controlled areas by the teams and the yards gained\n\n#### (All X and Y values and directions are standardized...)\n\nDiagrams shows voronoi region for each player colored as:\n* red    : rusher\n* green  : offense players (with black dots)\n* yellow : defense players (with red dots)\n    \nRusher direction and speed shown as black arrow.\n\nLeft red line is the scrimmage line. (Yards lost if Yards is negatif)\n\nRight red line shows yards gained at the end of play.(scrimmage line if Yards is negatif)\n\nUsage : voronoi_display(df, yards_filter=2, count_limit=10):\n* df : standardized dataframe\n* yards_filter : filter to select plays according to yards gained\n* count_limit : number of plays to draw"}}