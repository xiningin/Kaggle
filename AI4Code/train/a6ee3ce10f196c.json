{"cell_type":{"53360562":"code","86232310":"code","432acad9":"code","ec3a08be":"code","19ea38a5":"code","cdd3a2ca":"code","61bea991":"code","0255aa3b":"code","eb0d64fc":"code","5b299d1c":"code","92f72539":"code","83724cda":"code","bc5af8ab":"code","1bbcb876":"code","6a217bc6":"code","be2e7cc0":"code","9e66d05b":"code","a0e65ce7":"code","31556ddf":"code","e6933ac1":"code","9a625f29":"code","f34b8ae0":"code","78f427cf":"code","5da7119f":"code","49cfcb8d":"code","708eb754":"code","2dcdd653":"code","1aaee826":"code","52b15b1c":"code","76ffb981":"code","179ba73f":"code","30f1020b":"code","b3988eda":"code","b4bfd67f":"code","b69b9167":"code","15a1824d":"code","70a457af":"code","fcc13af9":"code","48952c8f":"code","ba129365":"code","df5d5038":"markdown","1267c452":"markdown","59918de6":"markdown","54f02b46":"markdown","d9c55a38":"markdown","0bbe0392":"markdown","9f56eea5":"markdown","b787774b":"markdown","9738b7ee":"markdown","06648130":"markdown","380b79a9":"markdown","b3ca65e0":"markdown","29a8c899":"markdown","bb9202d5":"markdown","2c63c267":"markdown"},"source":{"53360562":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\n\nfrom time import time\n\nimport warnings","86232310":"%matplotlib inline\nsns.set_style('darkgrid')\nwarnings.filterwarnings('ignore')","432acad9":"iris_df = pd.read_csv('..\/input\/iris\/Iris.csv')","ec3a08be":"# check the first five rows\niris_df.head()","19ea38a5":"columns = ['id','sepal_length', 'sepal_width','petal_length', 'petal_width', 'species']\niris_df.columns = columns","cdd3a2ca":"# frequency table for species\niris_df['species'].value_counts()","61bea991":"# replace label with numeric \nnew_lab = {'Iris-setosa':1, 'Iris-versicolor':2, 'Iris-virginica':3}\niris_df['species'] = iris_df['species'].map(new_lab)\niris_df['species'].value_counts()","0255aa3b":"iris_df.info()","eb0d64fc":"# Check missing values of features\nprint(len(iris_df[iris_df['sepal_length'].isna()]))\nprint(len(iris_df[iris_df['sepal_width'].isna()]))\nprint(len(iris_df[iris_df['petal_length'].isna()]))\nprint(len(iris_df[iris_df['petal_width'].isna()]))","5b299d1c":"iris_df.describe().T","92f72539":"# Calculate 1st, 2nd, 3rd quartiles, IQR, lower and upper bounds\n\n# Sepal Length\nsepal_length_q = pd.DataFrame(iris_df['sepal_length'].quantile([0.25, 0.50, 0.75]))\niqr_sl = sepal_length_q.iloc[2:3,:].values[0][0] - sepal_length_q.iloc[0:1,:].values[0][0]\nlower_bound_sl = sepal_length_q.iloc[0:1,:].values[0][0] - (iqr_sl*1.5)\nupper_bound_sl = sepal_length_q.iloc[2:3,:].values[0][0] + (iqr_sl*1.5)\nprint(sepal_length_q)\n\nprint('\\nIQR:', str(iqr_sl))\nprint('Lower Bound:', str(lower_bound_sl))\nprint('Upper Bound:', str(upper_bound_sl),'\\n')\n\n# Sepal Width\nsepal_width_q = pd.DataFrame(iris_df['sepal_width'].quantile([0.25, 0.50, 0.75]))\niqr_sw = sepal_width_q.iloc[2:3,:].values[0][0] - sepal_width_q.iloc[0:1,:].values[0][0]\nlower_bound_sw = sepal_width_q.iloc[0:1,:].values[0][0] - (iqr_sw*1.5)\nupper_bound_sw = sepal_width_q.iloc[2:3,:].values[0][0] + (iqr_sw*1.5)\nprint(sepal_width_q)\n\nprint('\\nIQR:', str(iqr_sw))\nprint('Lower Bound:', str(lower_bound_sw))\nprint('Upper Bound:', str(upper_bound_sw),'\\n')\n\n# Petal Length\npetal_length_q = pd.DataFrame(iris_df['petal_length'].quantile([0.25, 0.50, 0.75]))\niqr_pl = petal_length_q.iloc[2:3,:].values[0][0] - petal_length_q.iloc[0:1,:].values[0][0]\nlower_bound_pl = petal_length_q.iloc[0:1,:].values[0][0] - (iqr_pl*1.5)\nupper_bound_pl = petal_length_q.iloc[2:3,:].values[0][0] + (iqr_pl*1.5)\nprint(petal_length_q)\n\nprint('\\nIQR:', str(iqr_pl))\nprint('Lower Bound:', str(lower_bound_pl))\nprint('Upper Bound:', str(upper_bound_pl),'\\n')\n\n# Petal Width\npetal_width_q = pd.DataFrame(iris_df['petal_width'].quantile([0.25, 0.50, 0.75]))\niqr_pw = petal_width_q.iloc[2:3,:].values[0][0] - petal_width_q.iloc[0:1,:].values[0][0]\nlower_bound_pw = petal_width_q.iloc[0:1,:].values[0][0] - (iqr_pw*1.5)\nupper_bound_pw = petal_width_q.iloc[2:3,:].values[0][0] + (iqr_pw*1.5)\nprint(petal_width_q)\n\nprint('\\nIQR:', str(iqr_pw))\nprint('Lower Bound:', str(lower_bound_pw))\nprint('Upper Bound:', str(upper_bound_pw))","83724cda":"# check distribution of sepal length, sepal width, petal length, petal width\nfig_dims = (15, 12)\nfig, ax = plt.subplots(2,2,figsize=fig_dims, sharex=True)\n\nfeat = ['sepal_length','sepal_width','petal_length','petal_width']\nlow_up_bounds = {lower_bound_sl: upper_bound_sl ,lower_bound_sw: upper_bound_sw,lower_bound_pl: upper_bound_pl,lower_bound_pw: upper_bound_pw}\n\nfor i in range(4):\n    plt.subplot(221+i)\n    plt.title(feat[i]+\" distribution\", fontsize=12)\n    plt.axvline(x=np.mean(iris_df[feat[i]]), color='orange', linewidth=2)\n    plt.axvline(x=np.median(iris_df[feat[i]]), color='red', linewidth=2)\n    plt.axvline(x=list(low_up_bounds.keys())[i], color='grey', linestyle='--')\n    plt.axvline(x=list(low_up_bounds.values())[i], color='grey', linestyle='--')\n    sns.distplot(iris_df[feat[i]], kde=False, color='mediumseagreen')\n    plt.ylabel('Frequency', fontsize=11)\n    plt.xlabel(feat[i], fontsize=11)\n\nplt.show()","bc5af8ab":"sns.boxplot(iris_df['sepal_width'])\nplt.show()","1bbcb876":"# Correlation check\niris_df.corr('pearson')","6a217bc6":"iris_df['sl_sw'] = iris_df['sepal_length']*iris_df['sepal_width']\niris_df['sl_pl'] = iris_df['sepal_length']*iris_df['petal_length']\niris_df['sl_pw'] = iris_df['sepal_length']*iris_df['petal_width']\n\niris_df['sw_pl'] = iris_df['sepal_width']*iris_df['petal_length']\niris_df['sw_pw'] = iris_df['sepal_width']*iris_df['petal_width']\n\niris_df['pl_pw'] = iris_df['petal_length']*iris_df['petal_width']","be2e7cc0":"iris_df['species'].value_counts()","9e66d05b":"sns.relplot(x=\"petal_width\", y=\"pl_pw\",hue=\"species\", data=iris_df)\nax1 = plt.gca()\nax1.set_title('Petal Width vs PL_PW')\nax1.set(xlabel='Petal Width')\n\nsns.relplot(x=\"petal_length\", y=\"pl_pw\",hue=\"species\", data=iris_df)\nax = plt.gca()\nax.set_title('Petal Length vs PL_PW')\n\nsns.relplot(x=\"sepal_length\", y=\"pl_pw\",hue=\"species\", data=iris_df)\nax = plt.gca()\nax.set_title('Sepal Length vs PL_PW')\n\nplt.show()","a0e65ce7":"iris_df.corr('pearson')","31556ddf":"# take the features which have strong correlation (treshold 0.9)\niris_df_v2 = iris_df[['sl_pw','sw_pw','sw_pl','pl_pw','sl_pl','petal_length','petal_width','species']]","e6933ac1":"iris_df_v2.corr()","9a625f29":"iris_df_v2.head()","f34b8ae0":"features = iris_df_v2.drop('species', axis=1)\nlabels = iris_df_v2['species']","78f427cf":"# Check the first five rows of our features\nfeatures.head()","5da7119f":"# Check the first five rows of our labels\nlabels[:5]","49cfcb8d":"x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42) #70% train set 30% test set","708eb754":"# Check\nprint(len(labels))\nfor dataset in [y_train, y_test]:\n    print(round(len(dataset)\/len(labels),2))","2dcdd653":"def printResult(results):\n    print('Best Params: {}\\n'.format(results.best_params_))\n\n    means = results.cv_results_['mean_test_score']\n    stds = results.cv_results_['std_test_score']\n    for mean, std, params in zip(means, stds, results.cv_results_['params']):\n        print('{} (+\/-{}) for {}'.format(round(mean,3), round(std *2,3), params))","1aaee826":"lr = LogisticRegression()\nparameters = {\n    'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] # The C hyperparameter is a regularization parameter in logistic regression that controls how closly the model fits to the training data\n}","52b15b1c":"cv = GridSearchCV(lr, parameters, cv=5)\ncv.fit(x_train, y_train.values.ravel())","76ffb981":"printResult(cv)","179ba73f":"lr_model = cv.best_estimator_","30f1020b":"# Clean up\ndel cv, parameters","b3988eda":"rf = RandomForestClassifier()\n\nparameters = {\n    'n_estimators': [5, 50, 250],\n    'max_depth': [2, 4, 8, 16, 32, None]\n}","b4bfd67f":"cv = GridSearchCV(rf, parameters, cv= 5)\ncv.fit(x_train, y_train.values.ravel())","b69b9167":"printResult(cv)","15a1824d":"rf_model = cv.best_estimator_","70a457af":"# Clean up\ndel cv, parameters","fcc13af9":"models = {'LR': lr_model, 'RF': rf_model}","48952c8f":"def evaluateModel(name, model, features, labels):\n    start = time()\n    pred = model.predict(features)\n    end = time()\n    accuracy = round(accuracy_score(labels, pred), 3)\n    precision = round(precision_score(labels, pred, average='micro'), 3)\n    recall = round(recall_score(labels, pred, average='micro'), 3)\n    print('{} -- Accuracy: {} \/ Precision: {} \/ Recall: {} \/ Latency: {}ms'.format(name,\n                                                                                  accuracy,\n                                                                                  precision,\n                                                                                  recall,\n                                                                                  round(end - start)))\n    ","ba129365":"for name, model in models.items():\n    evaluateModel(name, model, x_test, y_test)","df5d5038":"### **Model Evaluation** ","1267c452":"### Data Cleaning","59918de6":"### **Splitting Dataset into 70% Train and 30% Test Sets**","54f02b46":"### **Creating Model with Logistic Regression** ","d9c55a38":"As we can see in the correlation above, features that have very strong correlation (treshold 0.9) with species are **Petal Length** and **Petal Width**.\n\nNext step is we are going to check the **interaction effect**.\n<br\/>In this step we just simply multiply one independent variable by another independent variable to create interaction term and see how its relationship with the target variable\/label (species) change.","0bbe0392":"### Exploratory Data Analysis and Feature Engineering","9f56eea5":"### Read Data","b787774b":"Just confirming the above histogram, we see that there are outliers in sepal width distribution (data point that exceed lower and upper bounds), now we are going to use boxplot to check the outliers in the sepal width.","9738b7ee":"#### **Interaction Effect** ","06648130":"#### Evaluate Model on Test Set","380b79a9":"### **Creating Model with Random Forest** ","b3ca65e0":"### Importing Libraries Needed","29a8c899":"**Since we got clean data (no missing values), we will jump into next step i.e. Exploratory Data Analysis.**","bb9202d5":"- The Sepal Length distribution of Iris dataset is a bit **right-skewed** (this condition could also be indicated by the mean value which is greater than the median), centered at about 5.8, range of roughly 3.5, with most of data between 5 and 6.5. Since there is no distributed data outside the lower and upper bounds (the vertical line in dark grey), it means no apparent outliers.\n- The Sepal Width distribution of Iris dataset is a bit **right-skewed** (this condition could also be indicated by the mean value which is greater than the median), centered at about 3, range of roughly 2.4, with most of data between 2.7 and 3. **Outliers present on the lower and higher ends**.\n- The Petal Length distribution of Iris dataset is **left-skewed** (this condition could also be indicated by the mean value which is less than the median), centered at about 4.2, range of roughly 6, with most of data between 4 and 5. Since there is no distributed data outside the lower and upper bounds (the vertical line in dark grey), it means no apparent outliers.\n- The Petal Width distribution of Iris dataset is a bit **left-skewed** (this condition could also be indicated by the mean value which is less than the median), centered at about 1.5, range of roughly 2.3, with most of data between 1.5 and 2. Since there is no distributed data outside the lower and upper bounds (the vertical line in dark grey), it means no apparent outliers.","2c63c267":"### **Modelling**"}}