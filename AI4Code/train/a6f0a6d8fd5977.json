{"cell_type":{"1f816294":"code","ed9d04da":"code","500c3088":"code","6bbdfaa4":"code","53d76cb7":"code","5d9c8da3":"code","d810f24c":"code","040e8754":"code","1e13b45c":"code","5e30552b":"code","ee773b77":"code","30cfe122":"code","4f846125":"code","6e90b7e8":"code","412b51fe":"code","1bb61b25":"code","b446bb35":"code","316ec4a0":"code","c9cc6d44":"code","bcfece51":"code","b3b44873":"code","6fed4b12":"code","7893accb":"markdown"},"source":{"1f816294":"import tensorflow as tf\nfrom tensorflow.keras.layers import Flatten,Activation,Dense,Conv2D,MaxPooling2D,Dropout\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras import regularizers\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Model\nimport cv2                 # working with, mainly resizing, images\nimport numpy as np         # dealing with arrays\nimport os                  # dealing with directories\nfrom random import shuffle # mixing up or currently ordered data that might lead our network astray in training.\nfrom tqdm import tqdm      # a nice pretty percentage bar for tasks. \\\nimport matplotlib.pyplot as plt\nimport time \n\nTRAIN_DIR ='\/kaggle\/input\/plantdisease\/PlantVillage'#path of dataset\nIMG_SIZE =128\ninput_shape=(IMG_SIZE,IMG_SIZE,3)","ed9d04da":"def label_imgv2(word_label):\n    if word_label == 'Pepper__bell___Bacterial_spot': return 0\n    elif word_label == 'Pepper__bell___healthy': return 1\n    elif word_label == 'Potato___Early_blight': return 2\n    elif word_label == 'Potato___healthy': return 3\n    elif word_label == 'Potato___Late_blight': return 4\n    elif word_label == 'Tomato__Target_Spot': return 5\n    elif word_label == 'Tomato__Tomato_mosaic_virus': return 6\n    elif word_label == 'Tomato__Tomato_YellowLeaf__Curl_Virus': return 7\n    elif word_label == 'Tomato_Bacterial_spot': return 8\n    elif word_label == 'Tomato_Early_blight': return 9\n    elif word_label == 'Tomato_healthy': return 10\n    elif word_label == 'Tomato_Late_blight': return 11\n    elif word_label == 'Tomato_Leaf_Mold': return 12\n    elif word_label == 'Tomato_Septoria_leaf_spot': return 13\n    elif word_label == 'Tomato_Spider_mites_Two_spotted_spider_mite': return 14\n\ndef create_train_data():\n    training_data = []\n    \n    for folder in os.listdir(TRAIN_DIR):\n        i=0\n        for img in os.listdir(TRAIN_DIR+\"\/\"+folder):\n            i+=1\n            path = os.path.join(TRAIN_DIR+\"\/\"+folder,img)\n            \n            try:\n                label = label_imgv2(folder)\n                img = cv2.imread(path,cv2.IMREAD_COLOR)\n                img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n                training_data.append([np.array(img),np.array(label)])\n            \n            except:\n                print(path)\n            if i==500:\n                break\n\n    shuffle(training_data)\n    return training_data\n\ntrain_data = create_train_data()","500c3088":"os.listdir('\/kaggle\/input\/plantdisease\/PlantVillage\/')","6bbdfaa4":"train_y=np.array([i[1] for i in train_data])\ntrain_x=np.array([i[0] for i in train_data]).reshape(-1,IMG_SIZE,IMG_SIZE,3)\n\ntrain_x.shape","53d76cb7":"train_x=train_x\/255\nx_train,x_test,y_train,y_test=train_test_split(train_x,train_y,test_size=0.2)","5d9c8da3":"train_datagen = ImageDataGenerator(zoom_range=0.1, rotation_range=50,\n                                   width_shift_range=0.1, height_shift_range=0.1, shear_range=0.2, \n                                   horizontal_flip=True, fill_mode='nearest')\n\nval_datagen = ImageDataGenerator()\ntrain_generator = train_datagen.flow(x_train, y_train, batch_size=32)\nval_generator = val_datagen.flow(x_test, y_test, batch_size=20)","d810f24c":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', \n                 input_shape=(IMG_SIZE,IMG_SIZE,3)))\nmodel.add(BatchNormalization(axis=1))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization(axis=1))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n#model.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization(axis=1))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization(axis=1))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(15, activation='softmax'))\n\nopt = tf.keras.optimizers.Adam(learning_rate=0.0001)\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer=opt,metrics=['accuracy'])\nmodel.summary()\n\n","040e8754":"custom=model.fit(x_train,y_train,epochs=20,batch_size=64,validation_data=(x_test,y_test))","1e13b45c":"plt.plot(custom.history['loss'])\nplt.plot(custom.history['val_loss'])\nplt.title(\"Model Loss\")\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['Train', 'Test'])\nplt.show()","5e30552b":"plt.plot(custom.history['accuracy'])\nplt.plot(custom.history['val_accuracy'])\nplt.title(\"Model Accuracy\")\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Train', 'Test'])\nplt.show()","ee773b77":"predictions = model.predict(x_test)\npredictions","30cfe122":"y_preds = [np.argmax(i) for i in predictions]","4f846125":"from sklearn import metrics\nprint(metrics.confusion_matrix(y_test,y_preds))\nprint(metrics.classification_report(y_test,y_preds))","6e90b7e8":"custom = model.fit_generator(train_generator, epochs=50, validation_data=val_generator, verbose=1)","412b51fe":"plt.plot(custom.history['loss'])\nplt.plot(custom.history['val_loss'])\nplt.title(\"Model Loss\")\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['Train', 'Test'])\nplt.show()","1bb61b25":"plt.plot(custom.history['accuracy'])\nplt.plot(custom.history['val_accuracy'])\nplt.title(\"Model Accuracy\")\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Train', 'Test'])\nplt.show()","b446bb35":"predictions = model.predict(x_test)\ny_preds = [np.argmax(i) for i in predictions]","316ec4a0":"print(metrics.confusion_matrix(y_test,y_preds))\nprint(metrics.classification_report(y_test,y_preds))","c9cc6d44":"classes = ['Pepper__bell___Bacterial_spot','Pepper__bell___healthy','Potato___Early_blight','Potato___healthy',\n           'Potato___Late_blight','Tomato__Target_Spot','Tomato__Tomato_mosaic_virus','Tomato__Tomato_YellowLeaf__Curl_Virus',\n           'Tomato_Bacterial_spot','Tomato_Early_blight','Tomato_healthy','Tomato_Late_blight','Tomato_Leaf_Mold',\n           'Tomato_Septoria_leaf_spot','Tomato_Spider_mites_Two_spotted_spider_mite']","bcfece51":"plt.imshow(train_x[100])\nplt.show\nprint(classes[train_y[100]])","b3b44873":"from tensorflow.keras.preprocessing import image\ntest=train_x[100]\ntest=image.img_to_array(test)\ntest=test.reshape((-1,IMG_SIZE,IMG_SIZE,3))\npredictions = model.predict(test)\npredictions","6fed4b12":"classes[np.argmax(predictions)]","7893accb":"Let us test any random image from the dataset"}}