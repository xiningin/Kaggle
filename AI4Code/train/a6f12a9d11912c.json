{"cell_type":{"1d4b2570":"code","1d9202a0":"code","2daf22b6":"code","7a100c06":"code","4ef12007":"code","2a34f23b":"code","bf964ccb":"code","35de05f0":"code","5eea4cbd":"code","b72fb928":"code","b0d64e58":"code","14e0abbd":"code","a072430b":"code","59ee070e":"code","188de3cd":"code","eaf49f1e":"code","5a8a3891":"code","7e42c382":"code","83ca812b":"code","84666b64":"code","5c81d8e1":"code","d387bfd4":"code","2a340ed1":"code","f333856a":"code","f98f8446":"code","e7e0fb36":"code","1036c970":"code","b919b5d2":"code","feefdd03":"code","6f455584":"code","6566cf64":"code","6af13e06":"code","a3a3e5f9":"code","67753563":"code","d456f396":"code","12e42d61":"code","a27acfb7":"code","ed8e6179":"code","4a408c73":"code","2a0a4dd0":"code","8fc08ae9":"code","d4edd042":"code","a7c41576":"code","aaa9b080":"code","f95c43fb":"code","4743b339":"code","2cedbb31":"code","60231385":"code","2dcddd1d":"code","a1587c61":"code","359f8bb4":"code","cca01e76":"code","f454c17e":"code","d8cbff8e":"code","538a60d6":"code","a28f0555":"code","3ad5ac38":"code","d537ff03":"code","6e346cb8":"code","320afb5f":"code","c991a7a6":"code","5edfc001":"code","3dd54ee0":"code","00102e4a":"code","7d18f593":"code","a69a90ca":"code","9a9c56a4":"code","9a004cfd":"code","a006557e":"code","f5eb76e1":"code","ff58eaa5":"code","564daaad":"code","c65461be":"code","ffea254f":"code","53f70f64":"code","64ba1887":"code","3768b3b1":"code","3d99f39f":"code","6a807f10":"code","f36840cd":"code","3daf8a50":"code","7ca22c17":"code","dde126ea":"code","6fc8f28c":"code","bf70654c":"code","29d83ecb":"code","67c27a6a":"code","3f5fc06a":"code","eae1e426":"code","529e2d55":"code","bdd6ae58":"code","8a62c562":"code","d9e196b3":"code","8def323f":"code","29d8a813":"code","cd25add4":"code","b37869a5":"code","43698b76":"code","d69ab21f":"code","afe0f551":"code","931aab1b":"code","343b85f0":"code","40c16087":"code","4859922e":"code","a5ed46bf":"code","b72b8b7f":"code","2ce26792":"code","73ba8b22":"code","7c56cb66":"code","765ca3a2":"code","32d5e6b5":"code","0b2cbae9":"code","bb8f8f5f":"code","40702940":"code","a6a170ff":"code","f854e9fb":"code","49be43e6":"code","6f87cb85":"code","1817fcbe":"code","feb81690":"code","3053475f":"code","e5d34516":"code","87f1ffdd":"code","856d50b3":"code","b4bc3536":"code","a6097e49":"code","28716387":"code","f80c364e":"code","de1c05b1":"code","dd587a0c":"code","557b6291":"code","4efde663":"code","f24a70a4":"code","01312554":"code","e54c5aaf":"code","23ceac0a":"code","041ffb64":"code","301d63c2":"code","bc1d6a6f":"code","f54747ed":"code","f3ab46bf":"code","3fa1b5ab":"code","3b3a99c8":"code","94e13c8d":"code","9b6f5c64":"code","6f287cd0":"code","a710442e":"code","5fb1d977":"code","9c6a6b16":"code","a9ed1c2d":"code","c88af596":"code","13590825":"code","41064b16":"code","9b691e50":"code","8abc5951":"code","d213e39e":"code","d108c6dd":"code","3dd9dcfa":"code","1078216f":"code","50403e32":"code","6d452dd9":"code","948504c4":"code","e03bcb2f":"code","bec5fd66":"code","a5b4c07f":"code","0b857dd0":"code","02963e8b":"code","67831f7a":"code","3c557c19":"code","3544b3f9":"code","f635467e":"code","5c24d898":"code","c6560303":"code","74ebfaf3":"code","01b5e57f":"code","ebdb696e":"code","b1be4c56":"code","6acbc03b":"code","f7fd023a":"code","98d66a54":"code","01ac49f4":"code","97af1f2e":"code","849fd146":"code","1f3ff0b4":"code","2e31c37e":"code","79cdd61d":"code","6098a0bb":"code","988926e7":"code","cea64db1":"code","74d19bf9":"code","41124b07":"code","a6f20f39":"code","dbcbd77a":"code","b7339789":"code","f406e383":"code","9ae4ff6a":"code","d6a5ac63":"code","d40e353a":"code","c347ecb7":"code","9df69bed":"code","dfbd196d":"code","d443695e":"code","0f29f937":"code","b2a8608a":"code","efd0764f":"code","e912ade7":"code","e019120a":"code","2dbf030a":"code","5b3160ec":"code","c224a150":"code","fc5fcb93":"code","0efb8ab0":"code","e20820a7":"code","9067ff29":"code","4ee75d55":"code","9fe13716":"code","965dd4e8":"code","2efa7efa":"code","1cc757b1":"code","5e9922fa":"code","1890b3f6":"code","0f68d853":"code","8b646627":"code","20eb93ce":"code","292b34ba":"code","7f1dfd79":"code","07b5ca0c":"code","9eca15cd":"markdown","e4e1734b":"markdown","f743971a":"markdown","62765872":"markdown","a40dc7fd":"markdown","e9b2131f":"markdown","9d304067":"markdown","ce126ba2":"markdown","f7e2c9e0":"markdown","e17523df":"markdown","71db4212":"markdown","27895711":"markdown","8ead1928":"markdown","359e263e":"markdown","fb38d36f":"markdown","325a306d":"markdown","df93f6da":"markdown","cefccb44":"markdown","ed603bc3":"markdown","5dc4bcce":"markdown","83bf22f7":"markdown","1c2539f4":"markdown","8ea50a5a":"markdown","faf2211f":"markdown","74c4de9e":"markdown","6670fd8f":"markdown","d99e9e00":"markdown","02d0687a":"markdown","b8ad5c05":"markdown","959941cc":"markdown","3e86c3f2":"markdown","5e14ec26":"markdown","aff47cef":"markdown","f1374682":"markdown","4c68d67e":"markdown","7c727a10":"markdown","55659715":"markdown","518b82a4":"markdown","31cdd500":"markdown","6df97f51":"markdown","3c12af51":"markdown","db7c7aea":"markdown","b50ca677":"markdown","a1781d4a":"markdown","8529241a":"markdown","0e67bdae":"markdown","8a83ad20":"markdown","7d538164":"markdown","507ebe2a":"markdown","4b9b0175":"markdown","db3d0439":"markdown","48524183":"markdown","eab850f5":"markdown","9a0150a7":"markdown","37bc7f15":"markdown","aba77018":"markdown","0a195d4d":"markdown","51b516be":"markdown","2d3deded":"markdown","3d2d042a":"markdown","8f94cdd4":"markdown","df7524b5":"markdown","0aeac6b3":"markdown","28ce701a":"markdown","d49b001f":"markdown","9d3c9301":"markdown","11c932e7":"markdown","3a5376d9":"markdown","85352df9":"markdown","81751089":"markdown","3ee9e224":"markdown","f9d441ff":"markdown","d391def2":"markdown","d5c47b37":"markdown","e67ff672":"markdown","aa917bec":"markdown","6e698125":"markdown","488a278e":"markdown","b2d13849":"markdown","07fa159a":"markdown","d71ab29a":"markdown","257d9e2f":"markdown","8b9fdb20":"markdown","cea15803":"markdown","f27b0256":"markdown"},"source":{"1d4b2570":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nimport missingno as msno\n\n\n#Preproc\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import cross_val_score, train_test_split, GridSearchCV, cross_val_predict\n\n#Scorer\nfrom sklearn.metrics import mean_squared_error\n\n#Models\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import RidgeCV,LassoCV, ElasticNetCV, LinearRegression, LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, GradientBoostingRegressor\nfrom sklearn import metrics\n\n#Displaying options\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\n\n#To ignore unwanted warnings\nimport warnings\nwarnings.filterwarnings('ignore')","1d9202a0":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest  = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","2daf22b6":"train.head()","7a100c06":"test.head()","4ef12007":"train.shape","2a34f23b":"test.shape","bf964ccb":"train.info()","35de05f0":"test.info()","5eea4cbd":"train.describe()","b72fb928":"test.describe()","b0d64e58":"# Train data\nfor i in train:\n    if train[i].isna().sum() > 0:\n        print(i,'\\t',train[i].isna().sum())","14e0abbd":"# Test data\nfor i in test:\n    if test[i].isna().sum() > 0:\n        print(i,'\\t',test[i].isna().sum())","a072430b":"# CODE HERE PLEASE\nfig, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (18, 6))\n\n# train data \nsns.heatmap(train.isnull(), yticklabels=False, ax = ax[0], cbar=False, cmap='viridis')\nax[0].set_title('Train data')\n\n# test data\nsns.heatmap(test.isnull(), yticklabels=False, ax = ax[1], cbar=False, cmap='viridis')\nax[1].set_title('Test data');\n","59ee070e":"# combined the both dataset to do  more EDA and cleaning to both of them at the same time\ncombind_data = pd.concat([train, test]).reset_index(drop=True)\ny=train.SalePrice\ncombind_data.head()","188de3cd":"numerical = pd.DataFrame(combind_data.select_dtypes(exclude=['object']))\ncategorical = pd.DataFrame(combind_data.select_dtypes(include=['object']))","eaf49f1e":"cmap = sns.cubehelix_palette(light = 0.95, as_cmap = True)\nsns.set(font_scale=1.2)\nplt.figure(figsize = (60,30))\nmask = np.zeros_like(numerical.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(numerical.corr(), vmin = 0, vmax = 1, square = True, cmap = cmap,mask=mask ,annot=True)\nplt.show();","5a8a3891":"#function for create a bubble plot \ndef  bubble_plt(x ,y,title ): \n    #create a Bubble Plot \n    np.random.seed(42)\n    N = 2920\n    colors = np.random.rand(N)\n    area = (25 * np.random.rand(N))**2\n\n    # scatter plot with scatter() function\n    # transparency with \"alpha\"\n    # bubble size with \"s\"\n    # color the bubbles with \"c\" , \"cmap\"\n    fig = plt.figure(figsize=(16,8))\n\n    plt.scatter(x, y,\n                   s=area,\n                  edgecolors=\"grey\",\n                  cmap=\"GnBu\",\n                  c=colors,\n                 alpha=0.5,\n                data=numerical);\n\n    plt.title(title , size=18);\n    plt.xlabel(x, size=16);\n    plt.ylabel(y, size=16);","7e42c382":"#create a Bubble Plot of GrLivArea & SalePrice\nbubble_plt(\"GrLivArea\" , \"SalePrice\" , \"Bubble Plot For GrLivArea vs  SalePrice \")","83ca812b":"fig, ax = plt.subplots(figsize=(16,8))\nax= sns.barplot(x=\"OverallQual\", y=\"SalePrice\", data=numerical , ax=ax, palette='Set3');\nax.set_title('The relation between SalePrice & OverallQual' , fontsize =20);\nplt.show();\n\n","84666b64":"#create a Bubble Plot of TotalBsmtSF & SalePrice\nbubble_plt(\"TotalBsmtSF\" , \"SalePrice\" , \"Bubble Plot For GrLivArea vs  SalePrice \")\n","5c81d8e1":"#create a Bubble Plot of 1stFlrSF & SalePrice\nbubble_plt(\"1stFlrSF\" , \"SalePrice\" , \"Bubble Plot For GrLivArea vs  SalePrice \")\n","d387bfd4":"fig, ax = plt.subplots(figsize=(16,8))\nax= sns.barplot(x=\"GarageCars\", y=\"SalePrice\", data=numerical , ax=ax, palette='Set3');\nax.set_title('The relation between SalePrice & OverallQual' , fontsize =20)\nplt.show();","2a340ed1":"def check_distribution(df,col):\n    \n    ##### get the descriptive Statistics (median, mean, mode) #####\n    skwe_ = df[col].skew()\n    median=df[col].median()\n    mean=df[col].mean()\n    mode=df[col].mode()[0]\n\n    ##### Check the disrubtion #####\n    if median < mean :\n         print (\"It Has a positive skew and it's distribution is not normal based on the skewness which is = \" , skwe_ ,\"\\n\"  )\n    elif  median> mean:\n          print (\"It has a negative skew and it's distribution is normal based on the skewness which is = \" , skwe_  ,\"\\n\" )\n    else : \n          print (\"It has a normal disribution \\n\")\n","f333856a":"def outlier(df,col): \n ##### Check the outliers  #####\n        #get the value of Q1 using describe()\n        q1 = df.describe()[col]['25%']\n        #get the value of Q2 using describe()\n        q3 = df.describe()[col]['75%']\n        #calculate the IQR\n        iqr = q3-q1 \n        #calculate the distance \n        distance = 1.5*iqr\n        #caluclate the lower limit \n        lower_limit = q1-distance \n        #caluclate the upper limit \n        higher_limit = q3+ distance \n\n        outlier_num=0\n        #itrate through list of total \n        for t in df[col] : \n            #check if the total < lower limit or t>higher limit \n            if t < lower_limit or t > higher_limit  :\n                #increase the counter \n                outlier_num +=1 \n        #print the number of outlires \n        print ( f\"There are :\" , outlier_num , \" outliers data \")","f98f8446":"ss = StandardScaler()\n# scale all numeric features\nnumeric_col=ss.fit_transform(numerical)","e7e0fb36":"scaled_df1=pd.DataFrame(numeric_col[:,1:10])\nscaled_df1.columns=numerical.columns[1:10]\nfig, ax6 = plt.subplots(figsize=(16,8))\nsns.boxplot(data=scaled_df1,ax=ax6)\nplt.title('Boxplots of numerical features');\n","1036c970":"for i in scaled_df1:\n    print(i,'feature:')\n    outlier(numerical,i)\n    check_distribution(numerical,i)","b919b5d2":"scaled_df2=pd.DataFrame(numeric_col[:,10:20])\nscaled_df2.columns=numerical.columns[10:20]\nfig, ax6 = plt.subplots(figsize=(16,8))\nsns.boxplot(data=scaled_df2,ax=ax6)\nplt.title('Boxplots of numerical features');","feefdd03":"for i in scaled_df2:\n    print(i,'feature:')\n    outlier(numerical,i)\n    check_distribution(numerical,i)","6f455584":"scaled_df3=pd.DataFrame(numeric_col[:,20:30])\nscaled_df3.columns=numerical.columns[20:30]\nfig, ax6 = plt.subplots(figsize=(16,8))\nsns.boxplot(data=scaled_df3,ax=ax6)\nplt.title('Boxplots of numerical features');","6566cf64":"for i in scaled_df3:\n    print(i,'feature:')\n    outlier(numerical,i)\n    check_distribution(numerical,i)","6af13e06":"scaled_df4=pd.DataFrame(numeric_col[:,30:38])\nscaled_df4.columns=numerical.columns[30:38]\nfig, ax6 = plt.subplots(figsize=(16,8))\nsns.boxplot(data=scaled_df4,ax=ax6)\nplt.title('Boxplots of numerical features');","a3a3e5f9":"for i in scaled_df4:\n    print(i,'feature:')\n    outlier(numerical,i)\n    check_distribution(numerical,i)","67753563":"msno.matrix(numerical,labels=True);","d456f396":"def bar_plt(df,col):\n    #### creat a countplot of the columns ####\n    fig = plt.figure(figsize=(10,5))\n    sns.countplot(x=col, data=df)\n    plt.xticks(rotation=70)\n    plt.title(col);\n    plt.xlabel(col);\n    plt.ylabel('Frequency');","12e42d61":"def check_distribution(df,col):\n    ##### get the descriptive Statistics (median, mean, mode) #####\n    skwe_ = df[col].skew()\n    median=df[col].median()\n    mean=df[col].mean()\n    mode=df[col].mode()[0]\n\n    ##### Check the disrubtion #####\n    if median < mean :\n         print (col, \"has a positive skew and it's distribution is not normal based on the skewness which is = \" , skwe_   )\n    elif  median> mean:\n          print (col, \"has a negative skew and it's distribution is normal based on the skewness which is = \" , skwe_   )\n    else : \n          print (col,\"has a normal disribution \")","a27acfb7":"#create a countplot for each categorical features \nfor i in categorical: \n    bar_plt(categorical,i)\n","ed8e6179":"def box_plt(df,col):\n    #### creat a box plot with swarm plot of the columns ####\n    fig = plt.figure(figsize=(10,5))\n    sns.boxplot(x=col, y=numerical.SalePrice, data=df, whis=np.inf);\n    sns.swarmplot(x=col, y=numerical.SalePrice, data=df, color=\".2\");\n    plt.xticks(rotation=70);\n    plt.title(col);","4a408c73":"# #create a box plot with swarm plot for each categorical features \nfor i in categorical: \n    box_plt(categorical,i)","2a0a4dd0":"msno.matrix(categorical,labels=True);","8fc08ae9":"# Check the number of missing values in each column\n\nnull_df=pd.DataFrame(columns=['Features_name' , 'Null_num'])\n\nj=0\nfor col in combind_data.columns:\n    if combind_data[col].isna().sum() > 0:\n        null_df.loc[j]= [col , combind_data[col].isna().sum()] \n        j=j+1\n\nnull_df.sort_values(by=['Null_num'], inplace=True ,  ascending=False)\nnull_df","d4edd042":"combind_data['PoolQC'].fillna('NA',inplace=True)","a7c41576":"combind_data['PoolQC'].isna().sum()","aaa9b080":"combind_data['MiscFeature'].fillna('NA',inplace=True)","f95c43fb":"combind_data['MiscFeature'].isna().sum()","4743b339":"combind_data['Alley'].fillna('NA',inplace=True)","2cedbb31":"combind_data['Alley'].isna().sum()","60231385":"combind_data['Fence'].fillna('NA',inplace=True)","2dcddd1d":"combind_data['Fence'].isna().sum()","a1587c61":"combind_data[(combind_data['FireplaceQu'].isnull())&(combind_data['Fireplaces']!=0)][['Fireplaces','FireplaceQu']]","359f8bb4":"combind_data['FireplaceQu'].fillna('NA',inplace=True)","cca01e76":"combind_data['FireplaceQu'].isna().sum()","f454c17e":"# Groupby the neighborhood to calculate the mean of LotFrontage.\nLotFrontage=pd.DataFrame(combind_data.groupby('Neighborhood')['LotFrontage'].mean().reset_index())\nLotFrontage","d8cbff8e":"#defining a function 'impute_lotFrontage'\ndef impute_lotFrontage(lotFrontage_neighborhood): # passing lotFrontage_neighborhood as ['lotFrontage','neighborhood']\n    \n    # Passing lotFrontage_neighborhood[0] which is 'LotFrontage' to variable 'LotFrontage'\n    neighborhood = lotFrontage_neighborhood[0]\n    \n    # Passing lotFrontage_neighborhood[1] which is 'neighborhood' to variable 'neighborhood'\n    lotFrontage = lotFrontage_neighborhood[1]\n    \n    #applying condition based on the lotFrontage and filling the missing data respectively \n    if pd.isnull(lotFrontage):\n        if neighborhood == 'Blmngtn':\n            return 46.900000\n        elif  neighborhood == 'Blueste':\n            return 27.300000\n        elif  neighborhood == 'BrDale':\n            return 21.500000\n        elif  neighborhood == 'BrkSide':\n            return 55.789474\n        elif  neighborhood == 'ClearCr':\n            return 88.150000\n        elif  neighborhood == 'CollgCr' :\n            return 71.336364\n        elif  neighborhood == 'Crawfor': \n            return 69.951807\n        elif  neighborhood == 'Edwards':\n            return 66.910112\n        elif  neighborhood == 'Gilbert':\n            return 74.207207\n        elif  neighborhood =='DOTRR' :\n            return 62.241379\n        elif  neighborhood =='MeadowV':\n            return 25.606061\n        elif  neighborhood =='Mitchel':\n            return 75.144444\n        elif  neighborhood =='NAmes':\n            return 75.210667\n        elif  neighborhood =='NPkVill':\n            return 28.142857\n        elif  neighborhood =='NWAmes':\n            return 81.517647\n        elif  neighborhood =='NoRidge':\n            return 91.629630\n        elif  neighborhood =='NridgHt':\n            return 84.184049\n        elif  neighborhood =='OldTown':\n            return 61.777293\n        elif  neighborhood =='SWISU':\n            return 59.068182\n        elif  neighborhood =='Sawyer':\n            return 74.551020\n        elif  neighborhood == 'SawyerW':\n            return 70.669811\n        elif  neighborhood =='Somerst':\n            return 64.549383\n        elif  neighborhood =='StoneBr':\n            return 62.173913\n        elif  neighborhood =='Timber':\n            return 81.157895\n        else:\n            return 72.000000\n    else:\n        return lotFrontage","538a60d6":"# (for combind_data) grab LotFrontage and apply the impute_LotFrontage, our custom function \ncombind_data['LotFrontage'] = combind_data[['Neighborhood','LotFrontage']].apply(impute_lotFrontage,axis=1)","a28f0555":"combind_data.LotFrontage.isna().sum()","3ad5ac38":"combind_data['GarageCond'].fillna('NA',inplace=True)","d537ff03":"combind_data.GarageCond.isna().sum()","6e346cb8":"combind_data['GarageFinish'].fillna('NA',inplace=True)","320afb5f":"combind_data.GarageFinish.isna().sum()","c991a7a6":"combind_data['GarageQual'].fillna('NA',inplace=True)","5edfc001":"combind_data.GarageQual.isna().sum()","3dd54ee0":"combind_data['GarageType'].fillna('NA',inplace=True)","00102e4a":"combind_data.GarageType.isna().sum()","7d18f593":"# We use GarageType to check if the dwelling has a garage or not then impute it by the YearBuilt.\n\ncombind_data[(combind_data['GarageYrBlt'].isnull())&(combind_data['GarageType']!='NA')][['GarageYrBlt','GarageType',\n                                                                                         'YearBuilt','GarageCond',\n                                                                                         'GarageFinish','GarageQual']]","a69a90ca":"combind_data['GarageType'].value_counts()","9a9c56a4":"combind_data[combind_data['GarageType']=='Detchd']['GarageQual'].value_counts()","9a004cfd":"combind_data[combind_data['GarageType']=='Detchd']['GarageCond'].value_counts()","a006557e":"combind_data[combind_data['GarageType']=='Detchd']['GarageFinish'].value_counts()","f5eb76e1":"combind_data.loc[2126, 'GarageCond'] = 'TA'\ncombind_data.loc[2576, 'GarageCond'] = 'TA'","ff58eaa5":"combind_data.loc[2126,'GarageQual'] = 'TA'\ncombind_data.loc[2576, 'GarageQual'] = 'TA'","564daaad":"combind_data.loc[2126, 'GarageFinish'] = 'Unf'\ncombind_data.loc[2576, 'GarageFinish'] = 'Unf'","c65461be":"combind_data.GarageYrBlt.isna().sum()","ffea254f":"combind_data.GarageCond.isna().sum()","53f70f64":"combind_data.GarageQual.isna().sum()","64ba1887":"combind_data.GarageFinish.isna().sum()","3768b3b1":"combind_data.loc[2126, 'GarageYrBlt'] = 1910\ncombind_data.loc[2576, 'GarageYrBlt'] = 1923","3d99f39f":"df=combind_data[(combind_data['GarageYrBlt'].isnull())&(combind_data['GarageType']=='NA')][['GarageYrBlt','GarageType',\n                                                                                         'YearBuilt','GarageCond',\n                                                                                         'GarageFinish','GarageQual']]","6a807f10":"df.shape","f36840cd":"combind_data['GarageYrBlt'].fillna(0,inplace=True)","3daf8a50":"combind_data.GarageYrBlt.isna().sum()","7ca22c17":"combind_data[(combind_data['GarageCars'].isnull())][['GarageCars','GarageArea','OverallQual','GarageYrBlt']]","dde126ea":"combind_data[combind_data['GarageYrBlt']==1923.0]['GarageCars'].value_counts()","6fc8f28c":"combind_data[combind_data['OverallQual']==5]['GarageCars'].value_counts()","bf70654c":"combind_data.loc[2576,'GarageCars']=1.0","29d83ecb":"combind_data.GarageCars.isna().sum()","67c27a6a":"combind_data.loc[2576,'GarageArea'] = combind_data[combind_data['GarageCars']==1.0]['GarageArea'].mean()","3f5fc06a":"combind_data.GarageArea.isna().sum()","eae1e426":"combind_data[(combind_data['BsmtExposure'].isnull())&(combind_data['BsmtQual'].notnull())][['BsmtExposure','BsmtCond',\n                                                                                         'BsmtQual','BsmtFinType2',\n                                                                                         'BsmtFinType1']]","529e2d55":"combind_data[(combind_data['BsmtQual']=='Gd')&(combind_data['BsmtCond']=='TA')&\n             (combind_data['BsmtFinType2']=='Unf')&(combind_data['BsmtFinType1']=='Unf')]['BsmtExposure'].value_counts()","bdd6ae58":"combind_data.loc[948,'BsmtExposure']='No'\ncombind_data.loc[1487,'BsmtExposure']='No'\ncombind_data.loc[2348,'BsmtExposure']='No'","8a62c562":"combind_data.BsmtExposure.isna().sum()","d9e196b3":"combind_data['BsmtExposure'].fillna('NA',inplace=True)","8def323f":"combind_data.BsmtExposure.isna().sum()","29d8a813":"combind_data[(combind_data['BsmtCond'].isnull())&(combind_data['BsmtQual'].notnull())][['BsmtCond','BsmtQual']]","cd25add4":"combind_data[combind_data['BsmtQual']=='Gd']['BsmtCond'].value_counts()","b37869a5":"combind_data[combind_data['BsmtQual']=='TA']['BsmtCond'].value_counts()","43698b76":"combind_data.loc[2040,'BsmtCond']='TA'\ncombind_data.loc[2185,'BsmtCond']='TA'\ncombind_data.loc[2524,'BsmtCond']='TA'","d69ab21f":"combind_data['BsmtCond'].fillna('NA',inplace=True)","afe0f551":"combind_data.BsmtCond.isna().sum()","931aab1b":"combind_data['BsmtQual'].fillna('NA',inplace=True)","343b85f0":"combind_data.BsmtQual.isna().sum()","40c16087":"combind_data[(combind_data['BsmtFinType2'].isnull())&(combind_data['BsmtCond']!='NA')][['BsmtFinType2',\n                                                                                         'BsmtFinType1',\n                                                                                         'BsmtCond']]","4859922e":"combind_data.loc[332,'BsmtFinType2']='GLQ'\n# combind_data.loc[660,'BsmtFinType2']='NA'","a5ed46bf":"combind_data.BsmtFinType2.isna().sum()","b72b8b7f":"combind_data['BsmtFinType2'].fillna('NA',inplace=True)","2ce26792":"combind_data.BsmtFinType2.isna().sum()","73ba8b22":"combind_data['BsmtFinType1'].fillna('NA',inplace=True)","7c56cb66":"combind_data.BsmtFinType1.isna().sum()","765ca3a2":"combind_data[(combind_data['BsmtHalfBath'].isnull())][['BsmtHalfBath','BsmtFullBath']]","32d5e6b5":"combind_data['BsmtHalfBath'].value_counts()","0b2cbae9":"combind_data['BsmtFullBath'].value_counts()","bb8f8f5f":"combind_data['BsmtHalfBath'].fillna(0,inplace=True)","40702940":"combind_data.BsmtHalfBath.isna().sum()","a6a170ff":"combind_data['BsmtFullBath'].fillna(0,inplace=True)","f854e9fb":"combind_data.BsmtFullBath.isna().sum()","49be43e6":"combind_data[(combind_data['TotalBsmtSF'].isnull())][['BsmtCond','TotalBsmtSF','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF']]","6f87cb85":"combind_data['TotalBsmtSF'].fillna(0,inplace=True)\ncombind_data['BsmtFinSF2'].fillna(0,inplace=True)\ncombind_data['BsmtFinSF1'].fillna(0,inplace=True)\ncombind_data['BsmtUnfSF'].fillna(0,inplace=True)","1817fcbe":"combind_data.TotalBsmtSF.isna().sum()","feb81690":"combind_data.BsmtFinSF2.isna().sum()","3053475f":"combind_data.BsmtFinSF1.isna().sum()","e5d34516":"combind_data.BsmtUnfSF.isna().sum()","87f1ffdd":"combind_data[(combind_data['MasVnrType'].isnull())&(combind_data['MasVnrArea']>0)][['MasVnrType','MasVnrArea']]","856d50b3":"combind_data[(combind_data['MasVnrArea']==198.0)]['MasVnrType'].value_counts()","b4bc3536":"combind_data.loc[2610,'MasVnrType']='Stone'","a6097e49":"combind_data['MasVnrType'].fillna('None',inplace=True)\ncombind_data['MasVnrArea'].fillna(0,inplace=True)","28716387":"combind_data.MasVnrType.isna().sum()","f80c364e":"combind_data.MasVnrArea.isna().sum()","de1c05b1":"combind_data[(combind_data['MSZoning'].isnull())&(combind_data['Neighborhood'].notnull())][['MSZoning','Neighborhood']]","dd587a0c":"combind_data[(combind_data['Neighborhood']=='IDOTRR')]['MSZoning'].value_counts()","557b6291":"combind_data[(combind_data['Neighborhood']=='Mitchel')]['MSZoning'].value_counts()","4efde663":"combind_data.loc[1915,'MSZoning']='RM'\ncombind_data.loc[2216,'MSZoning']='RM'\ncombind_data.loc[2250,'MSZoning']='RM'\ncombind_data.loc[2904,'MSZoning']='RL'","f24a70a4":"combind_data.MSZoning.isna().sum()","01312554":"combind_data[(combind_data['Functional'].isnull())&(combind_data['OverallQual'].notnull())][['Functional', 'OverallQual',\n                                                                                             'OverallCond', 'KitchenQual',\n                                                                                             'BsmtQual', 'BsmtCond',\n                                                                                             'HeatingQC', 'GarageQual', \n                                                                                             'GarageCond', 'ExterQual',\n                                                                                             'ExterCond']]","e54c5aaf":"combind_data.loc[2216,'Functional']='Maj1'","23ceac0a":"combind_data.loc[2473,'Functional']='Mod'","041ffb64":"combind_data.Functional.isna().sum()","301d63c2":"combind_data[(combind_data['Utilities'].isnull())&(combind_data['Neighborhood'].notnull())][['Utilities','Neighborhood']]","bc1d6a6f":"combind_data[(combind_data['Neighborhood']=='IDOTRR')]['Utilities'].value_counts()","f54747ed":"combind_data[(combind_data['Neighborhood']=='Gilbert')]['Utilities'].value_counts()","f3ab46bf":"combind_data.loc[1915,'Utilities']='AllPub'\ncombind_data.loc[1945,'Utilities']='AllPub'","3fa1b5ab":"combind_data.Utilities.isna().sum()","3b3a99c8":"combind_data[(combind_data['KitchenQual'].isnull())&(combind_data['KitchenAbvGr']!=0.0)][['KitchenQual','KitchenAbvGr']]","94e13c8d":"combind_data[(combind_data['KitchenAbvGr']==1)]['KitchenQual'].value_counts()","9b6f5c64":"combind_data.loc[1555,'KitchenQual']='TA'","6f287cd0":"combind_data.KitchenQual.isna().sum()","a710442e":"combind_data[(combind_data['Exterior1st'].isnull())&(combind_data['ExterQual'].notnull())][['Exterior1st','ExterQual']]","5fb1d977":"combind_data[(combind_data['ExterQual']=='TA')]['Exterior1st'].value_counts()","9c6a6b16":"combind_data.loc[2151,'Exterior1st']='HdBoard'","a9ed1c2d":"combind_data.Exterior1st.isna().sum()","c88af596":"combind_data[(combind_data['Exterior2nd'].isnull())&(combind_data['ExterQual'].notnull())][['Exterior2nd','ExterQual']]","13590825":"combind_data[(combind_data['ExterQual']=='TA')]['Exterior2nd'].value_counts()","41064b16":"combind_data.loc[2151,'Exterior2nd']='MetalSd'","9b691e50":"combind_data.Exterior2nd.isna().sum()","8abc5951":"combind_data[(combind_data['SaleType'].isnull())&(combind_data['SaleCondition'].notnull())][['SaleType','SaleCondition']]","d213e39e":"combind_data[(combind_data['SaleCondition']=='Normal')]['SaleType'].value_counts()","d108c6dd":"combind_data.loc[2489,'SaleType']='WD'","3dd9dcfa":"combind_data.SaleType.isna().sum()","1078216f":"combind_data[(combind_data['Electrical'].isnull())][['Electrical','Neighborhood', 'MSSubClass']]","50403e32":"combind_data[(combind_data['Neighborhood']=='Timber')&(combind_data['MSSubClass']==80)]['Electrical'].value_counts()","6d452dd9":"combind_data.loc[1379,'Electrical']='SBrkr'","948504c4":"combind_data.Electrical.isna().sum()","e03bcb2f":"categorical.head()","bec5fd66":"for i in categorical: \n    #Change the type to category\n    combind_data[i]= combind_data[i].astype('category')\n    #Dummy the columns\n    combind_data = pd.get_dummies(combind_data, columns=[i],drop_first=True)","a5b4c07f":"combind_data.head()","0b857dd0":"# convert type of GarageYrBlt\ncombind_data.GarageYrBlt.astype(int)","02963e8b":"#Change the type to category\ncombind_data[['OverallQual','OverallCond']]= combind_data[['OverallQual','OverallCond']].astype('category')\n#Dummy the OverallQual and OverallCond columns\ncombind_data = pd.get_dummies(combind_data, columns=['OverallQual','OverallCond'],drop_first=True)","67831f7a":"train = combind_data[:train.shape[0]]\ntest = combind_data[train.shape[0]:]","3c557c19":"train['SalePrice'] = y","3544b3f9":"train.head()","f635467e":"test.head()","5c24d898":"train.to_csv('train_clean.csv', index=False)\ntest.to_csv('test_clean.csv', index=False)","c6560303":"train = pd.read_csv('.\/train_clean.csv')\ntest = pd.read_csv('.\/test_clean.csv')","74ebfaf3":"train.head()","01b5e57f":"test.head()","ebdb696e":"def rmse_score(y_true, y_pred):\n    return np.sqrt(mean_squared_error(y_true, y_pred))","b1be4c56":"#Target and X\ny = train.pop('SalePrice')\nX = train.copy(deep=True)","6acbc03b":"#Return numeric columns\nnumeric_columns = [each for each in X.columns if X[each].dtype != 'O' and X[each].dtype != 'uint8']","f7fd023a":"#Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, shuffle=True, random_state=42)","98d66a54":"#Scaller\nss = StandardScaler()\nXs_train = ss.fit_transform(X_train[numeric_columns])\nXs_test = ss.transform(X_test[numeric_columns])","01ac49f4":"#Scalling test data \nSS = StandardScaler()\nX_test = SS.fit_transform(test[numeric_columns])","97af1f2e":"#Lin\nlr = LinearRegression()\nlr.fit(Xs_train, y_train)","849fd146":"lr_prediction = lr.predict(Xs_test)","1f3ff0b4":"rmse_score(y_test, lr_prediction)","2e31c37e":"lr.score(Xs_train, y_train)","79cdd61d":"# Perform 5-fold cross validation\nscores = cross_val_score(lr,Xs_train, y_train, cv=5).mean()\nprint(\"Mean of Cross-validated scores:\", scores)","6098a0bb":"lassoCV = LassoCV(alphas=np.logspace(.1, 10, 30), verbose=1)\nlassoCV.fit(Xs_train, y_train)\n#print best alpha \nprint(\"best alpah is : \" , lassoCV.alpha_)","988926e7":"pred_lassoCV=lassoCV.predict(Xs_test)","cea64db1":"rmse_score(y_test, pred_lassoCV)","74d19bf9":"print('Lasso train score :',lassoCV.score(Xs_train, y_train))\nprint('Lasso test score :',lassoCV.score(Xs_test, y_test))","41124b07":"cross_val_score(lassoCV,Xs_train, y_train, cv=5).mean()","a6f20f39":"ridgecv = RidgeCV(alphas=np.logspace(.1, 10, 30))\nridgecv.fit(Xs_train, y_train)\nprint(\"best alpah is : \" , ridgecv.alpha_)","dbcbd77a":"ridgecv_pred = ridgecv.predict(Xs_test)\nrmse_score(y_test, ridgecv_pred)","b7339789":"print('Ridge train score :',ridgecv.score(Xs_train, y_train))\nprint('Ridge test score :',ridgecv.score(Xs_test, y_test))","f406e383":"cross_val_score(ridgecv,Xs_train, y_train, cv=5).mean()","9ae4ff6a":"#ElasticNetCV to get the best l1_ratio & alpha \nl1_ratios=np.linspace(0.1, .99, 10)\nelasticNet_cv = ElasticNetCV(l1_ratio=l1_ratios, n_alphas=100, verbose=1)\nelasticNet_cv.fit(Xs_train, y_train)\n#print l1_ratio_&  best alpha \nprint(\"Best alpha is : \", elasticNet_cv .alpha_)\nprint(\"Best l1_ratio is : \" , elasticNet_cv .l1_ratio_)","d6a5ac63":"elasticNet_cv_pred = elasticNet_cv.predict(Xs_test)\nrmse_score(y_test, elasticNet_cv_pred)","d40e353a":"print('ElasticNet train score :',elasticNet_cv.score(Xs_train, y_train))\nprint('ElasticNet test score :',elasticNet_cv.score(Xs_test, y_test))","c347ecb7":"cross_val_score(elasticNet_cv,Xs_train, y_train, cv=5).mean()","9df69bed":"logreg_params = {'C': [0.1, 0.2,0.3], \n                 'fit_intercept': [True, False],\n                 'penalty': ['l1', 'l2']}","dfbd196d":"logreg=LogisticRegression()\n\nlogreg_gs = GridSearchCV(logreg, logreg_params,cv=5, verbose=1)\n\nlogreg_gs.fit(Xs_train, y_train)","d443695e":"logreg_prediction=logreg_gs.predict(X_test)","0f29f937":"rmse_score(y_test, logreg_prediction)\n","b2a8608a":"print('Logestic regression train score :',logreg_gs.score(Xs_train, y_train))\nprint('Logestic regression test score :',logreg_gs.score(Xs_test, y_test))","efd0764f":"cross_val_score(logreg_gs,Xs_train, y_train, cv=5).mean()","e912ade7":"rf_params = {\n    'n_estimators': [10, 50, 100],\n    'max_features':[2, 3, 5, 7, 8,None],\n    'max_depth': [1, 2, 3, 4, 5, 8,None],\n    'bootstrap': [True,False]\n}","e019120a":"rf = RandomForestRegressor() ","2dbf030a":"rf_gs = GridSearchCV(rf, param_grid=rf_params, cv=5, verbose = 1)\nrf_gs.fit(Xs_train, y_train)","5b3160ec":"pred_rf_gs = rf_gs.predict(Xs_test)","c224a150":"rmse_score(y_test, pred_rf_gs)","fc5fcb93":"print('Random Forest Regressor train score :',rf_gs.score(Xs_train, y_train))\nprint('Random Forest Regressor test score :',rf_gs.score(Xs_test, y_test))","0efb8ab0":"cross_val_score(rf_gs,Xs_train, y_train, cv=5).mean()","e20820a7":"et_params = {\n    'n_estimators': [10, 50, 100],\n    'max_features':[2, 3, 5, 7, 8,None],\n    'max_depth': [1, 2, 3, 4, 5, 8,None],\n    'bootstrap': [True,False]\n}","9067ff29":"et = ExtraTreesRegressor()\net_gs = GridSearchCV(et, param_grid=et_params, cv=5, verbose = 1)\net_gs.fit(Xs_train, y_train)","4ee75d55":"pred_et_gs = et_gs.predict(Xs_test)","9fe13716":"rmse_score(y_test, pred_et_gs)","965dd4e8":"print('Extra Trees Regressor train score :',et_gs.score(Xs_train, y_train))\nprint('Extra Trees Regressor test score :',et_gs.score(Xs_test, y_test))","2efa7efa":"cross_val_score(et_gs,Xs_train, y_train, cv=5).mean()","1cc757b1":"dt_params = {\n    'criterion':['mse', 'mae'],\n    'splitter':['best', 'random'],\n    'max_features':[2, 3, 5, 7, 8,None],\n    'max_depth': [1, 2, 3, 4, 5, 8,None]\n}","5e9922fa":"dt = DecisionTreeRegressor()\ndt_gs = GridSearchCV(dt, param_grid=dt_params, cv=5, verbose = 1)\ndt_gs.fit(Xs_train, y_train)","1890b3f6":"pred_dt = dt_gs.predict(Xs_test)\nrmse_score(y_test, pred_dt)","0f68d853":"print('Decision Trees Regressor train score :',dt_gs.score(Xs_train, y_train))\nprint('Decision Trees Regressor test score :',dt_gs.score(Xs_test, y_test))","8b646627":"cross_val_score(dt_gs,Xs_train, y_train, cv=5).mean()","20eb93ce":"#RidgeCv \npred = ridgecv.predict(X_test)  # instead of gs, write your best performed model instead\n#ElasticNetCV \npred2 = elasticNet_cv.predict(X_test)\n#ExtraTree \npred3 = et_gs.predict(X_test)","292b34ba":"#RidgeCv\n#test['SalePrice'] = pred\n#ElasticNetCV \n# test['SalePrice'] = pred2\n# test['SalePrice'] = pred3","7f1dfd79":"# Save the prediction into a file that matches the Kaggle submission requirements\n\n#RidgeCv\n# test[['Id', 'SalePrice']].to_csv('submission_EN.csv',index=False)\n\n#ElasticNetCV \n# test[['Id', 'SalePrice']].to_csv('submission_ENCV.csv',index=False)\n\n#ExtraTree\n# test[['Id', 'SalePrice']].to_csv('submissionET.csv',index=False)","07b5ca0c":"elasticNet_cv.fit(Xs_train, y_train)\nelasticNet_cv_coef ={'variables':X.columns,'coefficients':elasticNet_cv.coef_,'absolute_coefficients':np.abs(elasticNet_cv.coef_)}\nelasticNet_cv_coef_df = pd.DataFrame(elasticNet_cv_coef)\nelasticNet_cv_coef_df.sort_values('absolute_coefficients', inplace=True, ascending=False)\n\nelasticNet_cv_coef_df.head(10)","9eca15cd":"We assume that we can use BsmtQual to impute BsmtCond by get the most frequent value of BsmtCond.","e4e1734b":"For the other missing values they mean no Basement Exposure, So we will impute BsmtExposure with 'NA'.","f743971a":"We assume that we can use Neighborhood and MSSubClass to impute Electrical by get the most frequent value of Electrical.","62765872":"We assume that we can use OverallQual, OverallCond, KitchenQual, BsmtQual, BsmtCond, HeatingQC, GarageQual, GarageCond, ExterQual, ExterCond in computation to get the over all Functionality in the dewlling.\n<br>We give range of rating to each qualification:\n- OverallQual & OverallCond (1-10)\n- KitchenQual, BsmtQual, BsmtCond, HeatingQC, GarageQual, GarageCond, ExterQual, ExterCond (1-5)\n<br>Then calculate the rate based on the above ranges then divide it by the summation of the range (60),\nAnd the last step divide the result by 8 which is the number of functional features.","a40dc7fd":"For the other missing values they mean no garage, So we will impute GarageYrBlt with 0.","e9b2131f":"We assume that we can use ExterQual to impute both of Exterior1st and Exterior2nd by their most frequent value.","9d304067":"House price forecasting is an important topic of real estate, so the range of house price is important.<br> \nThis project aims to help us  to make investigations and understand the relationship between house features and different variables to predict the house price of **`Ames city`** using regression models .<br>\nThese models are able to accurately estimate the price of the house by given features , we will evaluate our models using RMSE , Cross validation Score and R^2 Score .","ce126ba2":"We assume that we can use BsmtFinType1 to impute BsmtFinType2 by using BsmtFinType2, because both are rating for the same basement. ","f7e2c9e0":"\n<img src=\"https:\/\/image.freepik.com\/free-vector\/happy-woman-standing-near-house-sale-flat-vector-illustration-cartoon-real-estate-agent-home-seller-presenting-cottage-mortgage-building-concept_74855-13131.jpg\" style=\" height: 8px , width:80px\">","e17523df":"Most of the missing values = Na , and depend on the data describtion it's not mean null, it's mean no pool, So we will impute PoolQC with 'NA'.","71db4212":"### One Hot Encoding","27895711":"### Electrical feature","8ead1928":"### Modeling","359e263e":"### LotFrontage  Feature","fb38d36f":"- There are alot of features affect on the SalePrice  , the top 5 are  Above grade (ground) living area , Over All quality , Pool quality ,  Total rooms above grade (does not include bathrooms) and  First Floor area . \n- Using regression models to predit the SalePrice . \n- The best model for predict the SalePrice was ElasticNetCV .\n- The ElasitcNetCV model has 33136.9449887549$ . \n- The model can be used to help the buyers and dweiling seller in predict the SalePrice , so they can get diffrent features from these information .\n- Based on our investagition we recommend to the buyers to choose a house with excellent Heating System beacuse this city it's very cold in winter . ( we depend on the wither site [https:\/\/www.accuweather.com\/en\/us\/ames\/50010\/weather-forecast\/333081]) \n- Based on our investagition we recommend to the sellers to upgrade Heating System beacuse the buyers will take the Heating system in thier consideration . ( we depend on the wither site [https:\/\/www.accuweather.com\/en\/us\/ames\/50010\/weather-forecast\/333081] ) \n- We recommend to do more future resaerch to use advanced models for regression predictions .\n\n\n","325a306d":"## Split combind dataset","df93f6da":"For the other missing values they mean no Basement, So we will impute BsmtCond with 'NA'.","cefccb44":"### Fireplace  Features","ed603bc3":"Based on our investigation the BsmtExposure and BsmtCond have 82 'NA',BsmtQual has 81 'NA', BsmtFinType2 has 80 'NA', and BsmtFinType1 has only 79 'NA'.\n<br>So we found there are three rows that have 'NA' (no basement) in BsmtExposure, While they have BsmtCond, BsmtQual, BsmtFinType2\tBsmtFinType1 features.\n<br>We assume that we can use BsmtCond, BsmtQual, BsmtFinType2\tBsmtFinType1 to impute these three rows using the most frequent value of BsmtExposure.","5dc4bcce":"### Basement  Features","83bf22f7":"# Now we will handle the numerical features","1c2539f4":"# ExtraTreesRegressor","8ea50a5a":"# LinearRegression","faf2211f":"# Bi-variate analysis","74c4de9e":"## Impute the missing values ","6670fd8f":"# ridgeCV","d99e9e00":"# ElasticNetCV","02d0687a":"# Detecting missing values","b8ad5c05":"Based on the scatter plot above we found : \n\n- The data show an uphill pattern as it's move from left to right, this indicates a positive relationship between **GrLivArea** and **SalePrice** . As the **GrLivArea** increase (move right), the **SalePrice**  tend to increase (move up). which mean they have a strong positive linear relationship .  \n- It's seems that there are  outliers .","959941cc":"#  EDA phase","3e86c3f2":"### Fence  Feature","5e14ec26":"# LassoCV","aff47cef":"# Univariate analysis & detecting outliers  ","f1374682":"We assume that we can use BsmtHalfBath & BsmtFullBath to impute them by their own most frequent value.","4c68d67e":"### Functional feature","7c727a10":"We assume that we can use SaleCondition to impute SaleType by get the most frequent value of SaleType.","55659715":"Based on the heatmap above, we found, The Sale Price has a high correlation with the followig features:\n\n- OverallQual\n- GrLivArea\n\nAnd also there is multicolleranity between many features, which is:\n\n- GarageYrBlt  &  YearBuilt \n- TotRmsAbvGrd &  GrLivArea\n- GarageCars   &  GarageArea \n- 1stFlrSF     &  TotalBsmtSF\n","518b82a4":"Most of the missing values = Na , and depend on the data describtion it's not mean null, it's mean no fence of the house, So we will impute Fence with 'NA'.","31cdd500":"----","6df97f51":"Most of the missing values = Na , and depend on the data describtion it's not mean null, it's mean no garage, So first we will impute the GarageCond, GarageFinish, GarageQual,GarageType with 'NA'.","3c12af51":"<h1 style ='text-align: center;' > Project 2 - House prices ","db7c7aea":"We assume that we can use KitchenAbvGr to impute KitchenQual by get the most frequent value of KitchenQual.","b50ca677":"For the GarageYrBlt feature, it has 159 missing values, we used GarageType to know the rows that have a garage.\n<br> So if it has a garage it should has GarageYrBlt, we assume that the GarageYrBlt will be the same as YearBuilt.","a1781d4a":"Based on the above investigation we found there is no basement in `2120` row, So we'll fill it by 0s.","8529241a":"Based on the scatter plot above we found : \n\n- The data show an uphill pattern as it's move from left to right, this indicates a positive relationship between **1stFlrSF** and **SalePrice** . As the **1stFlrSF** increase (move right), the **SalePrice**  tend to increase (move up).which mean they have a moderate positive linear relationship .  \n- It's seems that there are outliers .","0e67bdae":"### Kitchen features","8a83ad20":"### Garage  Features","7d538164":"### Utilities feature","507ebe2a":"# LogesticRegression","4b9b0175":"Most of the missing values = Na in BsmtQual, and depend on the data describtion it's not mean null, it's mean no basement, So we will impute BsmtQual with 'NA'.","db3d0439":"### MSZoning feature","48524183":"We choose the only the features that have a high correlation with the target feature (**SalePrice**)","eab850f5":"We assume that we can use MasVnrType to impute it by its own most frequent value because it has an area.","9a0150a7":"# Univariate analysis & detecting outliers  ","37bc7f15":"We assume that we can use MasVnrArea to check if there is a MasVnrType, then also based on MasVnrArea to impute it by its own most frequent value.","aba77018":" Based on the Bar plot above that shows how much the **SalePrice** increase of the dwelling accroding to **OverallQual**  .<br> This makes sense, because the more better quality led to more Sale price . ","0a195d4d":"Based on our investigation the GarageCond, GarageFinish, GarageQual, features have 159 'NA' and GarageType has only 157 'NA'.\n<br>So we found there are two rows that have 'NA' (no garage) in GarageCond, GarageFinish,GarageQual features, While they have GarageType.\n<br>We assume that we can use GarageType to impute these two rows using the most frequent value of GarageCond, GarageFinish, GarageQual.","51b516be":"# Conclusion and Recommendations","2d3deded":"###  Pool Features","3d2d042a":"Based on the scatter plot above we found : \n\n- The data show an uphill pattern as it's move from left to right, this indicates a positive relationship between **TotalBsmtSF** and **SalePrice** . As the **TotalBsmtSF** increase (move right), the **SalePrice**  tend to increase (move up).which mean they have a moderate positive linear relationship .  \n- It's seems that there are outliers .","8f94cdd4":"For the other missing values they mean no Basement, So we will impute BsmtFinType2 with 'NA'.","df7524b5":"# Data Preprocessing And Feature Engineering ","0aeac6b3":"For the other missing values in MasVnrType & MasVnrArea they mean no Masonry veneer, So we will impute MasVnrType with 'None' and MasVnrArea with 0.","28ce701a":"Most of the missing values = Na , and depend on the data describtion it's not mean null, it's mean no fireplace, So we will impute FireplaceQu with 'NA'.","d49b001f":"# Bi-variate analysis","9d3c9301":"# Save submission File","11c932e7":"Most of the missing values = Na in BsmtFinType1, and depend on the data describtion it's not mean null, it's mean no basement, So we will impute BsmtFinType1 with 'NA'.","3a5376d9":"# Problem Statement","85352df9":"Most of the missing values = Na , and depend on the data describtion it's not mean null, it's mean no other feature, So we will impute MiscFeature with 'NA'.","81751089":"We assume that we can use Neighborhood to impute Utilities by get the most frequent value of Utilities.","3ee9e224":"We assume that we can use Neighborhood to impute MSZoning by get the most frequent value of MSZoning.","f9d441ff":"# DecisionTreeRegressor","d391def2":"We use the OverallQual and GarageYrBlt to impute the GarageCars & GarageArea, because we found a correlation between the OverallQual & GarageYrBlt with GarageCars & GarageArea.","d5c47b37":"### Exterior features","e67ff672":"Most of the missing values = Na , and depend on the data describtion it's not mean null, it's mean no alley access to property, So we will impute Alley with 'NA'.","aa917bec":"### SaleType feature","6e698125":"As we see in msno chart there are less numerical features that have high missing values which is: \n\n- LotFrontage\n- MasVnrArea\n- GarageYrBlt","488a278e":"### Miscellaneous  Features","b2d13849":"# Now we will handle the categorical features","07fa159a":"As we see in msno chart more than the quarter of categorical features that have high missing values which is: \n\n- Alley \n- MasVnrType \n- BsmtQual \n- BsmtCond \n- BsmtExposure \n- BsmtFinType1\n- BsmtFinType2\n- FireplaceQu \n- GarageType \n- GarageFinish \n- GarageCars \n- GarageCond \n- PoolQC \n- Fence ","d71ab29a":"### Alley  Feature","257d9e2f":"# RandomForestRegressor","8b9fdb20":"We'll use Neighborhood feature to impute the LotFrontage missing values, by get the mean of LotFrontage of its Neighborhood. ","cea15803":"# Team members : \n**Reem Alruqi - kholoud Alowis - Waad Alotaibi** ","f27b0256":"### Masonry veneer features"}}