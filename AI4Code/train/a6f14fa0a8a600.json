{"cell_type":{"72621d59":"code","d4c21639":"code","350c7021":"code","80a825cd":"code","a79c87d0":"code","cd9f2a97":"code","f93384eb":"code","2d340f3c":"code","04ee8082":"code","66bb77c4":"code","f627f753":"code","92175d64":"code","262c0dda":"code","2cad3745":"code","0e9927f0":"code","45f53f00":"code","61afc889":"code","96e23a52":"code","c6ccf90e":"code","5f393dd1":"code","e8f6dc30":"code","aaed3ef3":"code","f12830a0":"code","2d9fa117":"code","f8d89255":"code","a158edde":"code","84e733c9":"code","65c8d667":"code","5e68cb8a":"code","75d606c1":"code","44b93e07":"code","a8a161c3":"code","1c2c1fca":"code","cf95e844":"code","61f7f0a3":"code","fa238fce":"code","0b2e953d":"code","5012f7f3":"code","ed08433e":"code","42073648":"code","a3ef30d6":"code","43894ab0":"code","448eacf9":"code","ce8f88bb":"code","9ab9da8a":"code","25fdb095":"code","01ba9215":"code","126c9eeb":"code","6d9f75c4":"code","4c425b54":"code","0194329c":"code","6a540afa":"code","200c2639":"code","9744a66a":"code","923d4e95":"code","b8cd7194":"code","70ca540c":"code","96937be3":"code","b1aa80ce":"code","d8a99fed":"code","0e689b72":"code","8514a264":"code","d5227005":"code","f2c38e5e":"code","423454ff":"code","3563a09c":"code","ad19358f":"code","793a267c":"code","c8359ccc":"code","a82d8eb7":"code","e344fc64":"code","629f5bb2":"code","9c54f0ff":"code","a8618a9c":"code","5927a792":"code","cd6e880d":"code","b74c7d1b":"code","a541b7d9":"code","a67d0aab":"code","c31fd722":"code","40197f91":"code","8b036121":"code","06ea4294":"code","f4b42cc8":"code","c09564ba":"code","a09ce6b2":"code","e0b7e556":"code","38876e43":"code","63e9cc81":"code","36ebac7f":"code","72eb91c7":"code","7e9cebfd":"code","d4aedfbc":"code","b5471506":"code","b4f04cf8":"code","da7729cd":"code","8f9dada2":"code","6cc8d4e9":"code","d167e913":"code","3a9f10b4":"code","8a97f6b9":"code","555a7944":"code","0184e716":"code","b011310d":"code","448ad67e":"code","8bc4d7d8":"code","b2e47608":"code","95c73686":"code","fd969575":"code","041c54c6":"code","f6276e4c":"code","5c16c0f8":"code","459483e7":"code","39491264":"code","4a655086":"code","b7301dcb":"code","6ccb6632":"code","62d41766":"code","5e8095e0":"code","733913a9":"code","81f3ba8a":"markdown","63312cf9":"markdown","f63ff349":"markdown","cf9ec4df":"markdown","8bce851a":"markdown","42b9ab25":"markdown","61f4c760":"markdown","87519753":"markdown","e9c8d674":"markdown","df037fd2":"markdown","3cd902e6":"markdown","3bcd208d":"markdown","75c2d1d4":"markdown","64557243":"markdown","132b7b0a":"markdown","b4b422f2":"markdown","e4b8c4cb":"markdown","33d7b354":"markdown","8d6f82d3":"markdown"},"source":{"72621d59":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nfrom pathlib import Path as path\n%matplotlib inline","d4c21639":"covid_path = path(r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/COVID19\")","350c7021":"covid_images = os.listdir(r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/COVID19\")","80a825cd":"len(covid_images)","a79c87d0":"covid_filepaths = [str(covid_path) + '\/' + img_path for img_path in covid_images]","cd9f2a97":"# all images file paths\nimg = plt.imread(covid_filepaths[2])\nplt.imshow(img)\nplt.show()","f93384eb":"normal_path = path(r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/NORMAL\")","2d340f3c":"normal_images = os.listdir(r\"..\/input\/chest-xray-pneumoniacovid19tuberculosis\/train\/NORMAL\")","04ee8082":"len(normal_images)","66bb77c4":"img = plt.imread(str(normal_path)+'\/'+normal_images[2])\nplt.imshow(img)\nplt.show()","f627f753":"normal_filespaths = [str(normal_path) + '\/' + img_path for img_path in normal_images]","92175d64":"img = plt.imread(normal_filespaths[2])\nplt.imshow(img)\nplt.show()","262c0dda":"def proc_img(filepath):\n    \"\"\" Create a DataFrame with the filepath and the labels of the pictures\n    \"\"\"\n    labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepath))\n\n    filepath = pd.Series(filepath, name='Filepath').astype(str)\n    labels = pd.Series(labels, name='Label')\n\n    # Concatenate filepaths and labels\n    df = pd.concat([filepath, labels], axis=1)\n\n    # Shuffle the DataFrame and reset index\n    df = df.sample(frac=1).reset_index(drop = True)\n    \n    return df","2cad3745":"covid_df = proc_img(covid_filepaths)","0e9927f0":"covid_df.head(1)","45f53f00":"normal_df = proc_img(normal_filespaths)","61afc889":"normal_df.head(1)","96e23a52":"# Display 2 picture of the Normal dataset\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(normal_df.Filepath[i]))\n    ax.set_title(normal_df.Label[i])\nplt.tight_layout(pad=0.5)\nplt.show()","c6ccf90e":"# Display 2 picture of the Covid dataset\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(covid_df.Filepath[i]))\n    ax.set_title(covid_df.Label[i])\nplt.tight_layout(pad=0.5)\nplt.show()","5f393dd1":"# Concat the two data frame(covid and normal)","e8f6dc30":"df = pd.concat([covid_df, normal_df], axis=0)","aaed3ef3":"df.head(2)","f12830a0":"df.tail(2)","2d9fa117":"df.Label.value_counts()","f8d89255":"len(df.Label)","a158edde":"# Take a .2 sample from the data frame\nint(len(df) * 0.25)    #  >> num of test images","84e733c9":"# Test_df\ntest_df = df.sample(n=450,random_state=42)\ntest_df.Label.value_counts()","65c8d667":"# Find Rows in df Which Are Not Available in test_df\ntrain_df = df.merge(test_df, how = 'outer' ,indicator=True).loc[lambda x : x['_merge']=='left_only']","5e68cb8a":"train_df.Label.value_counts()","75d606c1":"len(train_df.Label)","44b93e07":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input","a8a161c3":"# Train generator\ntrain_generator = ImageDataGenerator(\n    preprocessing_function= preprocess_input,\n    rescale=1.\/255\n)\n\n\ntrain_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(120, 120),\n    color_mode='grayscale',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='training',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)","1c2c1fca":"# Test generator\ntest_generator = ImageDataGenerator(\n    preprocessing_function= preprocess_input,\n    rescale=1.\/255\n)\n\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(120, 120),\n    color_mode='grayscale',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='training',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)","cf95e844":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout, BatchNormalization","61f7f0a3":"model= Sequential()\n\nmodel.add(Conv2D(kernel_size=(3,3), filters=32, activation='relu', input_shape=(120,120,1,)))\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(2,activation = 'softmax'))  # the output layer","fa238fce":"model.compile(loss = 'categorical_crossentropy', optimizer ='adam', metrics= ['accuracy'])","0b2e953d":"model.summary()","5012f7f3":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)","ed08433e":"model.fit(train_images, epochs = 12 , validation_data = test_images, verbose=1, callbacks=early_stop)","42073648":"pd.DataFrame(model.history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\") \nplt.show()                  ","a3ef30d6":"pd.DataFrame(model.history.history)[['loss','val_loss']].plot()\nplt.title(\"Accuracy\") \nplt.show()  ","43894ab0":"test_df.head()","448eacf9":"# Predict the label of the test_images\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_images.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]\n\n# Display the result\nprint(f'The first 5 predictions: {pred[:5]}')","ce8f88bb":"# Display 10 picture of the dataset with their labels\nfig, axes = plt.subplots(nrows=2, ncols=5, figsize=(15, 12),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(test_df.Filepath.iloc[i]))\n    ax.set_title(f\"True: {test_df.Label.iloc[i].split('_')[0]} \\nPredicted: {pred[i].split('_')[0]}\")\nplt.tight_layout()\nplt.show()","9ab9da8a":"from sklearn.metrics import precision_score, recall_score, accuracy_score, confusion_matrix, f1_score,classification_report","25fdb095":"from sklearn.preprocessing import LabelEncoder","01ba9215":"\nle = LabelEncoder()\n# le.fit_transform(df[column])\n\ntest_labels = le.fit_transform(test_df.Label)\npred = le.fit_transform(pred)","126c9eeb":"confusion_matrix = pd.crosstab(test_labels, pred, rownames=['Actual'], colnames=['Predicted'], margins = True)\nconfusion_matrix","6d9f75c4":"import imblearn\nfrom imblearn.under_sampling import RandomUnderSampler","4c425b54":"# reduce the majority rows to be equals the miniority one\nundersample = RandomUnderSampler(sampling_strategy='majority')","0194329c":"df.head()","6a540afa":"X = df.iloc[:, :1].values","200c2639":"X.shape","9744a66a":"y = df.iloc[:, 1]","923d4e95":"X, y = undersample.fit_resample(X, y)","b8cd7194":"X[1]","70ca540c":"X.shape","96937be3":"y[1]","b1aa80ce":"y.shape","d8a99fed":"# Data Frame must be 1-D\nX = X.reshape((920, ))","0e689b72":"# to check\nfrom collections import Counter","8514a264":"print(Counter(y))","d5227005":"balanced_df = pd.DataFrame({'Filepath': X, 'Label': y})","f2c38e5e":"balanced_df.head()","423454ff":"balanced_df.Label.value_counts()","3563a09c":"balanced_df.duplicated().sum()","ad19358f":"# Take a .2 sample from the data frame\nint(len(balanced_df) * 0.2)    #  >> num of test images","793a267c":"# Test_df\ntest_df = balanced_df.sample(n=184,random_state=42)\ntest_df.Label.value_counts()","c8359ccc":"# Find Rows in balanced_df Which Are Not Available in test_df\ntrain_df = balanced_df.merge(test_df, how = 'outer' ,indicator=True).loc[lambda x : x['_merge']=='left_only']","a82d8eb7":"train_df.Label.value_counts()","e344fc64":"# Image Generator","629f5bb2":"# Train generator\ntrain_generator = ImageDataGenerator(\n    preprocessing_function= preprocess_input,\n    rescale=1.\/255\n)\n\n\ntrain_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(120, 120),\n    color_mode='grayscale',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='training',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)","9c54f0ff":"# Test generator\ntest_generator = ImageDataGenerator(\n    preprocessing_function= preprocess_input,\n    rescale=1.\/255\n)\n\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(120, 120),\n    color_mode='grayscale',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='training',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)","a8618a9c":"model= Sequential()\n\nmodel.add(Conv2D(kernel_size=(3,3), filters=32, activation='relu', input_shape=(120,120,1,)))\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(filters=32,kernel_size = (3,3),activation='relu'))\n\nmodel.add(MaxPool2D(2,2))\nmodel.add(Conv2D(filters=32,kernel_size = (3,3),activation='relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dense(2,activation = 'softmax'))  # the output layer","5927a792":"model.compile(loss = 'categorical_crossentropy', optimizer ='adam', metrics= ['accuracy'])","cd6e880d":"model.summary()","b74c7d1b":"early_stop = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)","a541b7d9":"model.fit(train_images, epochs = 20 , validation_data = test_images, verbose=1, callbacks=early_stop)","a67d0aab":"pd.DataFrame(model.history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\") \nplt.show()                  ","c31fd722":"pd.DataFrame(model.history.history)[['loss','val_loss']].plot()\nplt.title(\"Accuracy\") \nplt.show()      ","40197f91":"# Predict the label of the test_images\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_images.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]\n\n# Display the result\nprint(f'The first 5 predictions: {pred[:5]}')","8b036121":"# Display 5 picture of the dataset with their labels\nfig, axes = plt.subplots(nrows=2, ncols=5, figsize=(15, 12),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow( plt.imread(test_df.Filepath.iloc[i]))\n    ax.set_title(f\"True: {test_df.Label.iloc[i].split('_')[0]} \\nPredicted: {pred[i].split('_')[0]}\")\nplt.tight_layout()\nplt.show()","06ea4294":"from sklearn.metrics import accuracy_score\ny_test = list(test_df.Label)\nacc = accuracy_score(y_test,pred)\nprint(f'Accuracy on the test set: {acc * 100:.2f}%')","f4b42cc8":"import cv2 as cv","c09564ba":"def LoadImages(column):\n    path_list = []\n    for i in range(len(column)):\n        try:\n            path_list.append(cv.resize(cv.imread(column.loc[i], 0), (150, 150)))\n        except:\n            continue\n\n    return np.array(path_list)","a09ce6b2":"test_images = []\ntest_images = LoadImages(test_df.Filepath)","e0b7e556":"train_images = []\ntrain_images = LoadImages(train_df.Filepath)","38876e43":"train_images.shape","63e9cc81":"test_images.shape","36ebac7f":"from skimage.exposure import equalize_hist\nfrom skimage import color\nfrom tensorflow.keras.utils import to_categorical","72eb91c7":"for i in range(train_images.shape[0]):\n    train_images[i] = equalize_hist(train_images[i])","7e9cebfd":"for i in range(test_images.shape[0]):\n    test_images[i] = equalize_hist(test_images[i])","d4aedfbc":"from sklearn.preprocessing import LabelEncoder ","b5471506":"def label_encoding(column,df):\n    le = LabelEncoder()\n    df[column] = le.fit_transform(df[column])","b4f04cf8":"label_encoding('Label', train_df)\nlabel_encoding('Label', test_df)","da7729cd":"y_train = []\nfor i in range(len(train_df)):\n    try:\n        y_train.append(train_df.Label.loc[i])    \n    except:\n        continue","8f9dada2":"y_train = np.array(y_train)\ny_train.shape","6cc8d4e9":"y_train = to_categorical(y_train, 2)","d167e913":"y_test = []\nfor i in range(len(test_df)):\n    try:\n        y_test.append(test_df.Label.loc[i])    \n    except:\n        continue","3a9f10b4":"y_test = np.array(y_test)\ny_test.shape","8a97f6b9":"y_test = to_categorical(y_test, 2)","555a7944":"X_train = train_images.reshape(train_images.shape[0], 150, 150, 1)\nX_test = test_images.reshape(test_images.shape[0], 150, 150, 1)","0184e716":"# X_train = X_train \/ 255.0\n# X_test = X_test \/ 255.0","b011310d":"X_train.shape","448ad67e":"X_test.shape","8bc4d7d8":"y_train.shape","b2e47608":"y_test.shape","95c73686":"from tensorflow.keras.layers import AveragePooling2D","fd969575":"model= Sequential()\n\nmodel.add(Conv2D(kernel_size=(3,3), filters=32, activation='relu', input_shape=(150,150,1)))\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(AveragePooling2D(4,4))\nmodel.add(Conv2D(filters=30,kernel_size = (3,3),activation='relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dense(128,activation='relu'))\n\nmodel.add(Dense(2,activation = 'softmax'))  # the output layer","041c54c6":"model.compile(loss = 'categorical_crossentropy', optimizer ='adam', metrics= ['accuracy'])","f6276e4c":"model.summary()","5c16c0f8":"early_stop = EarlyStopping(monitor='val_loss', patience=1, restore_best_weights=True)","459483e7":"model.fit(x = X_train, y = y_train, epochs = 15, verbose=1)","39491264":"# Predict the label of the test_images\npred = model.predict(X_test)\npred = np.argmax(pred,axis=1)","4a655086":"plt.imshow(plt.imread(test_df.Filepath.iloc[1]))\nplt.title(f\"True: {test_df.Label.iloc[1]} \\nPredicted: {pred[1]}\")\nplt.show()","b7301dcb":"plt.imshow(plt.imread(test_df.Filepath.iloc[7]))\nplt.title(f\"True: {test_df.Label.iloc[7]} \\nPredicted: {pred[7]}\")\nplt.show()","6ccb6632":"plt.imshow(plt.imread(test_df.Filepath.iloc[8]))\nplt.title(f\"True: {test_df.Label.iloc[8]} \\nPredicted: {pred[8]}\")\nplt.show()","62d41766":"plt.imshow(plt.imread(test_df.Filepath.iloc[15]))\nplt.title(f\"True: {test_df.Label.iloc[15]} \\nPredicted: {pred[15]}\")\nplt.show()","5e8095e0":"plt.imshow(plt.imread(test_df.Filepath.iloc[3]))\nplt.title(f\"True: {test_df.Label.iloc[3]} \\nPredicted: {pred[3]}\")\nplt.show()","733913a9":"plt.imshow(plt.imread(test_df.Filepath.iloc[23]))\nplt.title(f\"True: {test_df.Label.iloc[23]} \\nPredicted: {pred[23]}\")\nplt.show()","81f3ba8a":"__under-sample model__","63312cf9":"# Model ","f63ff349":"__Apply Equalize_Histogram__","cf9ec4df":"__Visualize the output__","8bce851a":"__Early Stop__","42b9ab25":"# Read The Data ","61f4c760":"__Model__","87519753":"# Model","e9c8d674":"__Model Summary__","df037fd2":"__Predict__","3cd902e6":"# Im_Balanced Data","3bcd208d":"__Model Summary__","75c2d1d4":"__Early Stop__","64557243":"__Train Test Split__","132b7b0a":"__Train Test Split__","b4b422f2":"# Prediction","e4b8c4cb":"# Image Generator","33d7b354":"# Pre_Processing","8d6f82d3":"__Prediction__"}}