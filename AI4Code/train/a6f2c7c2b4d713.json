{"cell_type":{"1473984a":"code","a868c660":"code","9b44b86c":"code","3555fde2":"code","ce3ddd7d":"code","81a87e93":"code","5901e886":"code","ae8efb49":"code","3f54d8c5":"code","6ba65ac0":"code","c50d71bf":"code","ead806f2":"code","fba9cacc":"code","d2cb024e":"code","dfbf4122":"code","f15ac69d":"code","1a7d01e8":"code","7301ce2a":"code","be60579f":"code","0514d975":"code","804ca1b7":"code","d5ac6f88":"markdown","66ff93e2":"markdown","35345e94":"markdown"},"source":{"1473984a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a868c660":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntrain.shape\n#train.shape[1] = 28x28 = 784,+1 label,total 785","9b44b86c":"train.head()","3555fde2":"test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ntest.shape\n# train.shape[1] label i\u00e7ermiyor bu y\u00fczden 784","ce3ddd7d":"Y_train = train[\"label\"]\nX_train = train.drop(labels = \"label\",axis=1)","81a87e93":"# visualize number of digits classes\nplt.figure(figsize=(15,7)) # \u015eeklin boyutlar\u0131yla alakal\u0131\ng = sns.countplot(Y_train, palette=\"icefire\") # Labellerdeki 0,1,2... gibi elemanlar\u0131n ge\u00e7me say\u0131s\u0131\nplt.title(\"Number of digit classes\")\nY_train.value_counts()","5901e886":"# plot some samples\nimg = X_train.iloc[0].to_numpy()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[0,0])\nplt.axis(\"off\")\nplt.show()","ae8efb49":"# plot some samples\nimg = X_train.iloc[3].to_numpy()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[3,0])\nplt.axis(\"off\")\nplt.show()","3f54d8c5":"# Normalize etmek, renkleriyle alakal\u0131 bir i\u015ftir ve bunu yaparsak algoritma \u00e7ok daha h\u0131zl\u0131 \u00e7al\u0131\u015facakt\u0131t\u0131r.\n# normalde reshape i\u00e7in (28,28)  deriz ama keras 3l\u00fc bir eleman da ister bu renkle lakal\u0131d\u0131r. E\u011fer grayscale kullanmak istersek 28,28,1\n# e\u011fer rgb yani renkli kullan\u0131rsak 28,28,3 kullan\u0131r\u0131z.","6ba65ac0":" X_train = X_train\/255.0\ntest = test\/255.0\nprint(\"x_train.shape = \",X_train.shape)\nprint(\"test.shape\",test.shape)","c50d71bf":"#reshape\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train.shape = \",X_train.shape)\nprint(\"test.shape\",test.shape)","ead806f2":"# Label Encoding.\n# 2 --> [0,0,1,0,0,0,0,0,0,0]\n# 4 --->[0,0,0,1,0,0,0,0,0,0]\n# Bu formatta bir encoding yapaca\u011f\u0131z bunun ad\u0131 one-hot-encoding i\u015flemi\n\nfrom keras.utils.np_utils import to_categorical\nY_train = to_categorical(Y_train, num_classes = 10)","fba9cacc":"# train setimin ne oldu\u011funu biliyoruz. ancak test setim modeli test etmek i\u00e7in kullan\u0131lacak bu y\u00fczden kabellerini bilmiyorum.\n# amac\u0131m train seti \u00fczerinden bir daha test-train ayr\u0131m\u0131 yap\u0131 modeli kurmak. modeli kurunca een son as\u0131l test seti \u00fczerinden i\u015f yapaca\u011f\u0131m\n# \u00f6z\u00fcnde bildiklerimiz(train) var,bilmediklerimiz(test) var. bildiklerimiz(train) \u00fczerinden test-train model kurup \u00f6\u011frenece\u011fiz.\n# bilmediklerimizi(test) en son kullanaca\u011f\u0131z.\nfrom sklearn.model_selection import train_test_split\nX_train,X_val,Y_train,Y_val = train_test_split(X_train,Y_train,test_size=0.1,random_state=2)\nprint(\"X_train.shape\",X_train.shape)\nprint(\"X_val\",X_val.shape)\nprint(\"Y_train.shape\",X_train.shape)\nprint(\"Y_val.shape\",Y_val.shape)","d2cb024e":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","dfbf4122":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","f15ac69d":"model.compile(optimizer = optimizer,loss =\"categorical_crossentropy\",metrics=[\"accuracy\"])\n# loss fonksiyonunu categirical yapt\u0131k \u00e7\u00fcnk\u00fc binary de\u011fil, \u00e7ok kategori var.","1a7d01e8":"epochs = 10\nbatch_size = 250\n# burda yap\u0131lan \u015fey her seferinde 250 tane resim al buna forward,bacward propogation yap, \n# t\u00fcm resimleri kullan\u0131nca bu 1 epochs olur. B\u00f6yle b\u00f6yle tekrar ederek modeli e\u011fitiriz.","7301ce2a":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5, # Randomly zoom image 5%\n        width_shift_range=0.5,  # randomly shift images horizontally 5%\n        height_shift_range=0.5,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","be60579f":"history = model.fit(datagen.flow(X_train,Y_train,batch_size =batch_size), \n                    epochs = epochs, validation_data =(X_val, Y_val),\n                    steps_per_epoch = X_train.shape[0] \/\/batch_size)","0514d975":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","804ca1b7":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","d5ac6f88":"\u00d6zet:\n\nResimler 28x28px'den olu\u015fuyor.\n\ntrain: 42 000 resim\n\ntest: 28 000 resim\n\ntoplam: 70 000 resimlik bir veri\n\n1 resimdeki toplam px say\u0131s\u0131 28x28=784","66ff93e2":"# Preparing Data","35345e94":"## Model\n"}}