{"cell_type":{"32d4af78":"code","dc14d1ea":"code","75ec4de3":"code","8b7c9295":"code","6229c9b6":"code","11fc0620":"code","776feeaf":"code","ff039f00":"code","7d0eaa0a":"code","08761af7":"code","68dba247":"code","8778fbf5":"code","bb6cc7fd":"code","3ba7ad1f":"code","a8625038":"code","98be6a93":"code","76b70e68":"code","7a94c193":"code","1983f8a1":"code","b7774cb7":"code","908c61c2":"code","c3d9c3c3":"code","43817188":"code","4f504995":"code","7978853c":"code","00ccdba0":"markdown","bb59f50c":"markdown","7a3081c3":"markdown","28cfdb98":"markdown","dc368be0":"markdown"},"source":{"32d4af78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('..\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dc14d1ea":"#the imports\nimport random\nimport matplotlib.pyplot as plt\nimport keras.backend as K\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers import Dense, Flatten, Convolution2D, MaxPooling2D, Dropout, Activation, AveragePooling2D\nfrom keras.preprocessing import image\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","75ec4de3":"men = []\nwomen = []\nimg_size = 300\nMEN_IMGS_PATH = '..\/input\/men-women-classification\/men'\nWOMEN_IMGS_PATH = '..\/input\/men-women-classification\/women'\nDIRS = [(0, MEN_IMGS_PATH), (1, WOMEN_IMGS_PATH)]","8b7c9295":"train_images = []\nlabels = []\nfor num, _dir in DIRS:\n    _dir = _dir + '\/'\n    count = 0\n    for file in os.listdir(_dir):\n        if count >= 1400:\n            break\n        img = image.load_img(_dir + str(file), target_size=(img_size, img_size))\n        img = image.img_to_array(img)\n        img = img\/255\n        train_images.append(img)\n        labels.append(num)\n        count += 1","6229c9b6":"train_images[1].shape","11fc0620":"plt.imshow(train_images[1])","776feeaf":"plt.imshow(train_images[1501])","ff039f00":"len(train_images)","7d0eaa0a":"X = np.array(train_images)","08761af7":"X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.1, random_state=101)","68dba247":"len(X_train)","8778fbf5":"len(X_test)","bb6cc7fd":"y_train_labels = to_categorical(y_train)","3ba7ad1f":"def build(width, height, depth, classes):\n    #initialize the model along with the input shape\n    model = Sequential()\n    inputShape = (height, width, depth)\n    chanDim = -1\n    \n    if K.image_data_format() == 'channels_first':\n        inputShape = (depth, height, width)\n        chanDim = 1\n        \n    # CONV -> RELU -> MAXPOOL\n    model.add(Convolution2D(64, (3,3), padding='same', input_shape=inputShape))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(MaxPooling2D(pool_size=(3,3)))\n    model.add(Dropout(0.25))\n    \n    # (CONV -> RELU)*2 -> AVGPOOL\n    model.add(Convolution2D(128, (3,3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(Convolution2D(128, (3,3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(AveragePooling2D(pool_size=(3,3)))\n    model.add(Dropout(0.25))\n    \n    # CONV -> RELU -> MAXPOOL\n    model.add(Convolution2D(256, (3,3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(MaxPooling2D(pool_size=(3,3)))\n    model.add(Dropout(0.25))\n    \n    # CONV -> RELU -> AVGPOOL\n    model.add(Convolution2D(512, (3,3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization(axis=chanDim))\n    model.add(AveragePooling2D(pool_size=(3,3)))\n    model.add(Dropout(0.25))\n    \n    # DENSE -> RELU\n    model.add(Flatten())\n    model.add(Dense(1024))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.25))\n    \n    # DENSE -> RELU\n    model.add(Dense(512))\n    model.add(Activation('relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.25))\n    \n    # sigmoid -> just to check the accuracy with this (softmax would work too)\n    model.add(Dense(classes))\n    model.add(Activation('sigmoid'))\n    \n    return model","a8625038":"model = build(img_size, img_size, 3, 2)","98be6a93":"model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])","76b70e68":"model.summary()","7a94c193":"history = model.fit(X_train, y_train_labels, batch_size=32, epochs=100, validation_split=0.2)","1983f8a1":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","b7774cb7":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","908c61c2":"predictions = model.predict_classes(X_test)","c3d9c3c3":"print(confusion_matrix(predictions, y_test))","43817188":"print(classification_report(predictions, y_test))","4f504995":"random_indices = [random.randint(0, 280) for i in range(9)]","7978853c":"plt.figure(figsize=(10,10))\nfor i, index in enumerate(random_indices):\n    pred = predictions[index]\n    pred = 'man' if pred==0 else 'woman'\n    actual = 'man' if y_test[index]==0 else 'woman'\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_test[index], cmap='gray', interpolation='none')\n    plt.title(f\"Predicted: {pred}, \\n Class: {actual}\")\n    plt.tight_layout()","00ccdba0":"The results seems quite good.\nThere can be improvement w.r.t model and image processing part (p.s: haven't focused much on the later).\n\n\n\nPlease feel free to provide constructive criticism\/comments in case you didn't like any part or want me to improve things on some areas.\n\nAlso, upvote if you like the kernel.\n\n\n\n","bb59f50c":"The classification report look good, 76% is kind of good in accuracy, but there are scopes for improvement.","7a3081c3":"Let's try to see some predictions on random images from the testing set.","28cfdb98":"Accuracy in training is quite good, but the accuracy on the validation set is not good.\n\nLet's see the loss in here.","dc368be0":"Clearly the validation loss doesn't looks good. We need to do some tweaking in the model.\n\nLet's compare the predictions now."}}