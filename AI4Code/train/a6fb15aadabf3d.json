{"cell_type":{"e2ac8687":"code","eabbb1a7":"code","0e0d982b":"code","d59154f6":"code","50228e59":"code","753726fd":"code","e385464d":"code","ac2ba99a":"code","f8550b60":"code","84b81020":"code","471a61f6":"code","30135e84":"code","5a7d1ec8":"code","13821798":"code","c7c880ec":"code","c54b4763":"code","46c5f7c6":"code","775357dc":"code","43b1d214":"code","8bcd4b75":"code","c89f3ae9":"code","b88ba70d":"code","f6e4222a":"code","161e4dde":"code","cd0540e8":"code","bbd5a1d4":"markdown","a533cd3f":"markdown","c6b82e56":"markdown","fec66ea5":"markdown","8fc9d0b1":"markdown","fd8eb084":"markdown","163e97db":"markdown","c8cfb645":"markdown","a1cdca89":"markdown","3ccb2810":"markdown","fc7ac1cc":"markdown","207f4834":"markdown","83a2f5e8":"markdown","c1a084cf":"markdown","a0c3e858":"markdown","0bf37ee1":"markdown","f07cc87e":"markdown","5f6af3ec":"markdown","36162493":"markdown"},"source":{"e2ac8687":"#Make sure to install aiofiles\n!pip install aiofiles","eabbb1a7":"!pip install word2number","0e0d982b":"#Dependencies \nimport os\nimport pandas as pd,numpy as np\nimport matplotlib.pyplot as plt\nimport re\nimport asyncio\nimport time\nimport aiofiles\nfrom tqdm import tqdm\nfrom word2number import w2n","d59154f6":"columns=['FILE_NAME','JOB_CLASS_TITLE','JOB_CLASS_NO','EXPERIENCE_LENGTH','FULL_TIME_PART_TIME',\n        'JOB_DUTIES','EDUCATION_YEARS','SCHOOL_TYPE','REQUIREMENT','WHERE TO APPLY','DRIVERS_LICENSE_REQ',\n         'DRIV_LIC_TYPE','EXAM_TYPE','APPLICATION DEADLINE','SELECTION PROCESS','ENTRY_SALARY_GEN','ENTRY_SALARY_DWP','OPEN_DATE','REVISED_DATE']\n\nbulletin_dir = '..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\/'","50228e59":"#''''''''''''''''''''''''''''''\n#EXAM_TYPE\n#''''''''''''''''''''''''''''''\ndef examType(content):\n    '''Code explanation:\n    OPEN: Exam open to anyone (pending other requirements)\n    INT_DEPT_PROM: Interdepartmental Promotional\n    DEPT_PROM: Departmental Promotional\n    OPEN_INT_PROM: Open or Competitive Interdepartmental Promotional\n    '''\n    exam_type=''\n    if 'INTERDEPARTMENTAL PROMOTIONAL AND AN OPEN COMPETITIVE BASIS' in content:\n        exam_type='OPEN_INT_PROM' \n    elif 'OPEN COMPETITIVE BASIS' in content:\n         exam_type='OPEN'\n    elif 'INTERDEPARTMENTAL PROMOTIONAL' or 'INTERDEPARMENTAL PROMOTIONAL' in content:\n        exam_type='INT_DEPT_PROM'\n    elif 'DEPARTMENTAL PROMOTIONAL' in content:\n        exam_type='DEPT_PROM' \n    return exam_type","753726fd":"#''''''''''''''''''''''''''''''\n#DRIVERS_LICENSE_REQ\n#Whether a driver's license is required, \n#possibly required, or not required (note: the job class will most likely not explicitly say if a license is not required)\n#P,R\n#''''''''''''''''''''''''''''''\ndef drivingLicenseReq(content):\n    try:\n        result= re.search(\"(.*?)(California driver\\'s license|driver\\'s license)\", content)\n        if result:\n            exp=result.group(1).strip()\n            exp=' '.join(exp.split()[-10:]).lower()\n            if 'may require' in exp:\n                return 'P'\n            else:\n                return 'R'\n        else:\n            return ''\n    except Exception as e:\n        return '' ","e385464d":"#''''''''''''''''''''''''''''''\n#DRIV_LIC_TYPE\n#''''''''''''''''''''''''''''''\ndef drivingLicense(content):\n    driving_License=[]\n    result= re.search(\"(valid California Class|valid Class|valid California Commercial Class)(.*?)(California driver\\'s license|driver\\'s license)\", content)\n    if result:\n        dl=result.group(2).strip()\n        dl=dl.replace(\"Class\",\"\").replace(\"commercial\",\"\").replace(\"or\",\"\").replace(\"and\",\"\")\n        if 'A' in dl:\n            driving_License.append('A')\n        if 'B' in dl:\n            driving_License.append('B') \n        if 'C' in dl:\n            driving_License.append('C')  \n        if 'I' in dl:\n            driving_License.append('I')   \n        return ','.join(driving_License)\n    else:\n        return ''","ac2ba99a":"\n#''''''''''''''''''''''''''''''\n#FULL_TIME_PART_TIME\n#''''''''''''''''''''''''''''''\ndef fulltime_parttime(content):\n    worktype=''\n    content=content.lower()\n    if 'full-time' in content:\n        worktype='FULL-TIME' \n    elif 'part-time' in content:\n        worktype='PART-TIME'\n    return worktype","f8550b60":"def experienceLength(content):\n    try:\n        result= re.search(\"(.*?)(of full-time)\", content)\n        if result:\n            exp=result.group(1).strip()\n            exp= exp.replace('.',' ')\n            exp=' '.join(exp.split()[-2:])\n            if 'month' in exp:\n                result=re.findall(r'\\d+', exp)\n                if result:\n                    year=float(result[0])\/12\n                else:\n                    year=float(w2n.word_to_num(exp))\/12\n            else:\n                result=re.findall(r'\\d+', exp)\n                if result:\n                    year=float(result[0])\n                else:\n                    year=float(w2n.word_to_num(exp))\n            year=round(year,1)\n            return year\n    except Exception as e:\n        return np.nan    ","84b81020":"#''''''''''''''''''''''''''''''\n#ENTRY_SALARY_GEN\n#''''''''''''''''''''''''''''''\ndef salary(content):\n    try:\n        salary=re.compile(r'\\$(\\d+,\\d+)((\\s(to|and)\\s)(\\$\\d+,\\d+))?') #match salary\n        sal=re.search(salary,content)\n        if sal:\n            range1=sal.group(1)\n            if range1 and '$' not in range1:\n                range1='$'+range1\n            range2=sal.group(2)\n            if range2:\n                range2=sal.group(2).replace('to','')\n                range2=range2.replace('and','')\n            if range1 and range2:\n                return f\"{range1}-{range2.strip()}\"\n            elif range1:\n                return f\"{range1} (flat-rated)\"\n        else:\n            return ''\n    except Exception as e:\n        return ''  ","471a61f6":"#''''''''''''''''''''''''''''''\n#ENTRY_SALARY_DWP\n#''''''''''''''''''''''''''''''\ndef salaryDWP(content,filename):\n    try:\n        result= re.search(\"(Department of Water and Power is)(.*)\", content)\n        if result:\n            salary=re.compile(r'\\$(\\d+,\\d+)((\\s(to|and)\\s)(\\$\\d+,\\d+))?') #match salary\n            sal=re.search(salary,result.group(2))\n            if sal:\n                range1=sal.group(1)\n                if range1 and '$' not in range1:\n                    range1='$'+range1\n                range2=sal.group(2)\n                if range2:\n                    range2=sal.group(2).replace('to','')\n                    range2=range2.replace('and','')\n                if range1 and range2:\n                    return f\"{range1}-{range2.strip()}\"\n                elif range1:\n                    return f\"{range1} (flat-rated)\"\n            else:\n                return ''\n    except Exception as e:\n        return ''  ","30135e84":"#''''''''''''''''''''''''''''''\n#EDUCATION_YEARS\n#''''''''''''''''''''''''''''''\ndef educationYears(content):\n    try:\n        result= re.search(\"(.*?)(college)\", content)\n        if result:\n            exp=result.group(1).strip()\n            exp= exp.replace('.',' ')\n            exp=' '.join(exp.split()[-2:])\n            if 'month' in exp:\n                result=re.findall(r'\\d+', exp)\n                if result:\n                    year=float(result[0])\/12\n                else:\n                    year=float(w2n.word_to_num(exp))\/12\n            else:\n                result=re.findall(r'\\d+', exp)\n                if result:\n                    year=float(result[0])\n                else:\n                    year=float(w2n.word_to_num(exp))\n            year=round(year,1)\n            return year\n    except Exception as e:\n        return np.nan","5a7d1ec8":"#''''''''''''''''''''''''''''''\n#SCHOOL_TYPE\n#''''''''''''''''''''''''''''''\ndef schoolType(content):\n    school_Type=''\n    content=content.lower()\n    #COLLEGE OR UNIVERSITY, HIGH SCHOOL, APPRENTICESHIP\n    if 'college' in content or 'university' in content:\n        school_Type='COLLEGE OR UNIVERSITY' \n    elif 'high school' in content:\n        school_Type='HIGH SCHOOL'\n    elif 'apprenticeship' in content:\n        school_Type='APPRENTICESHIP'  \n    elif 'certificate' in content:\n        school_Type='CERTIFICATE'\n    return school_Type","13821798":"listdic=[]\ndef processContent(filename,content):\n    dicJobs={}\n    content=content.replace(\"\\n\",\"\").replace(\"\\t\",\"\").strip()\n    #print(filename)\n    #FILE_NAME           \n    dicJobs['FILE_NAME']=filename.split(\"\/\")[-1]\n\n    #JOB_CLASS_TITLE\n    dicJobs['JOB_CLASS_TITLE']=''\n    result= re.search(\"(.*?)(Class Code:|Class  Code:)\", content,flags=re.IGNORECASE)\n    if result:\n        dicJobs['JOB_CLASS_TITLE']=result.group(1).strip()\n    \n    #JOB_CLASS_NO\n    dicJobs['JOB_CLASS_NO']=''\n    result=re.search(\"(Class Code:|Class  Code:)(.*)Open Date:\", content,flags=re.IGNORECASE)\n    if result:\n        dicJobs['JOB_CLASS_NO']=result.group(2).strip()\n\n    #DRIV_LIC_TYPE\n    dicJobs['DRIV_LIC_TYPE']=drivingLicense(content) \n    \n    \n    #FULL_TIME_PART_TIME\n    dicJobs['FULL_TIME_PART_TIME']=fulltime_parttime(content)\n    \n    #EXAM_TYPE\n    dicJobs['EXAM_TYPE']=examType(content)\n    \n    #OPEN_DATE\n    dicJobs['OPEN_DATE']=''\n    result= re.search(\"(Class Code:|Class  Code:)(.*)(ANNUAL SALARY|ANNUALSALARY)\", content)\n    shortContent=''\n    if result:\n        shortContent=result.group(2).strip()\n        result= re.search(\"Open Date:(.*)REVISED\", shortContent,flags=re.IGNORECASE)\n        if result:\n            dicJobs['OPEN_DATE']=result.group(1).strip()\n        if dicJobs['OPEN_DATE']=='':\n            result= re.search(\"Open Date:(.*)\\(Exam\", shortContent,flags=re.IGNORECASE)\n            if result:\n                dicJobs['OPEN_DATE']=result.group(1).strip()\n        if dicJobs['OPEN_DATE']=='':\n            result= re.search(\"Open Date:(.*)\", shortContent,flags=re.IGNORECASE)\n            if result:\n                dicJobs['OPEN_DATE']=result.group(1).strip()\n                \n    #REVISED:\n    dicJobs['REVISED_DATE']=''\n    result= re.search(\"(REVISED:|revised)(.*?)\\(Exam\", shortContent,flags=re.IGNORECASE)\n    if result:\n        dicJobs['REVISED_DATE']=result.group(2).strip()\n    else:\n        result= re.search(\"(REVISED:|revised)(.*)\", shortContent,\n                          flags=re.IGNORECASE)\n        if result:\n            dicJobs['REVISED_DATE']=result.group(2).strip() \n    \n    #ENTRY_SALARY_GEN\n    #ENTRY_SALARY_DWP\n    dicJobs['ENTRY_SALARY_GEN']=''\n    result=re.search(\"(ANNUAL SALARY|ANNUALSALARY)(.*?)DUTIES\", content)\n    if result:\n        salContent= result.group(2).strip()\n        dicJobs['ENTRY_SALARY_GEN']=salary(salContent)   \n        dicJobs['ENTRY_SALARY_DWP']=salaryDWP(salContent,filename) \n    else:\n        result=re.search(\"(ANNUAL SALARY|ANNUALSALARY)(.*?)REQUIREMENT\", content,flags=re.IGNORECASE)\n        if result:\n            salContent= result.group(2).strip()\n            dicJobs['ENTRY_SALARY_GEN']=salary(salContent)\n            dicJobs['ENTRY_SALARY_DWP']=salaryDWP(salContent,filename) \n            \n\n    #JOB_DUTIES\n    dicJobs['JOB_DUTIES']=''\n    result=dicJobs['JOB_DUTIES']= re.search(\"DUTIES(.*?)REQUIREMENT\", content)\n    if result:\n        dicJobs['JOB_DUTIES']= result.group(1).strip()\n  \n    #REQUIREMENT\n    req='|'.join([\"REQUIREMENT\/MIMINUMUM QUALIFICATION\",\n                  \"REQUIREMENT\/MINUMUM QUALIFICATION\",\n                  \"REQUIREMENT\/MINIMUM QUALIFICATION\",\n                  \"REQUIREMENT\/MINIMUM QUALIFICATIONS\",\n                  \"REQUIREMENT\/ MINIMUM QUALIFICATION\",\n                  \"REQUIREMENTS\/MINUMUM QUALIFICATIONS\",\n                  \"REQUIREMENTS\/ MINIMUM QUALIFICATIONS\",\n                  \"REQUIREMENTS\/MINIMUM QUALIFICATIONS\",\n                  \"REQUIREMENTS\/MINIMUM REQUIREMENTS\",\n                  \"REQUIREMENTS\/MINIMUM QUALIFCATIONS\",\n                  \"REQUIREMENT\/MINIMUM QUALIFICAITON\",\n                  \"MINIMUM REQUIREMENTS:\",\n                  \"REQUIREMENTS\",\n                  \"REQUIREMENT\"])\n    \n    result= re.search(f\"({req})(.*)(WHERE TO APPLY|HOW TO APPLY)\", content)\n    dicJobs['REQUIREMENT']=''\n    if result:\n        dicJobs['REQUIREMENT']= result.group(2).strip()\n        \n    \n    #EXPERIENCE_LENGTH\n    dicJobs['EXPERIENCE_LENGTH']=experienceLength(dicJobs['REQUIREMENT'])\n    \n    #EDUCATION_YEARS\n    dicJobs['EDUCATION_YEARS']=educationYears(dicJobs['REQUIREMENT'])\n    \n    #SCHOOL_TYPE\n    dicJobs['SCHOOL_TYPE']=schoolType(dicJobs['REQUIREMENT'])\n    \n    #DRIVERS_LICENSE_REQ\n    dicJobs['DRIVERS_LICENSE_REQ']=drivingLicenseReq(dicJobs['REQUIREMENT']) \n    \n    #WHERE TO APPLY\n    dicJobs['WHERE TO APPLY']= ''\n    result= re.search(\"(HOW TO APPLY|WHERE TO APPLY)(.*)(APPLICATION DEADLINE|APPLICATION PROCESS)\", content)\n    if result:\n        dicJobs['WHERE TO APPLY']= result.group(2).strip()\n    else:\n        result= re.search(\"(HOW TO APPLY|WHERE TO APPLY)(.*)(SELECTION PROCESS|SELELCTION PROCESS)\", content)\n        if result:\n            dicJobs['WHERE TO APPLY']= result.group(2).strip()\n        \n\n    #APPLICATION DEADLINE\n    dicJobs['APPLICATION DEADLINE']=''\n    result= re.search(\"(APPLICATION DEADLINE|APPLICATION PROCESS)(.*?)(SELECTION PROCESS|SELELCTION PROCESS)\", content)\n    if result:\n        dicJobs['APPLICATION DEADLINE']= result.group(2).strip()\n    else:\n        result= re.search(\"(APPLICATION DEADLINE|APPLICATION PROCESS)(.*?)(Examination Weight:)\", content)\n        if result:\n            dicJobs['APPLICATION DEADLINE']= result.group(2).strip() \n    \n    \n    #SELECTION PROCESS or Examination Weight: \n    dicJobs['SELECTION PROCESS']=''\n    result=dicJobs['SELECTION PROCESS']= re.search(\"(SELECTION PROCESS|Examination Weight:)(.*)(APPOINTMENT|APPOINTMENT IS SUBJECT TO:)\", content)\n    if result:\n        dicJobs['SELECTION PROCESS']= result.group(2).strip()\n    else:\n        result=dicJobs['SELECTION PROCESS']= re.search(\"(SELECTION PROCESS|Examination Weight:)(.*)\", content)\n        if result:\n            dicJobs['SELECTION PROCESS']= result.group(2).strip()\n    \n    listdic.append(dicJobs)\n","c7c880ec":"async def processFile(filename):\n    async with aiofiles.open(filename, mode='r',encoding=\"ISO-8859-1\") as f:\n        try:            \n            content = await f.read()\n            processContent(filename,content)\n        except Exception as exp:\n            print(f\"Error file {filename} {exp}\")\n            pass\nasync def process_all():\n    for filename in tqdm(os.listdir(bulletin_dir)):\n        await processFile(f\"{bulletin_dir}{filename}\")\n    df=pd.DataFrame(listdic,columns=columns)\n    df['JOB_CLASS_NO'] = df['JOB_CLASS_NO'].apply('=\"{}\"'.format)\n    df['OPEN_DATE'] = pd.to_datetime(df['OPEN_DATE'])\n    df['REVISED_DATE'] = pd.to_datetime(df['REVISED_DATE'])\n    df.to_csv(\"JobBulletins.csv\",index=False)   \n    print('Process complete.')\n\n    \nif __name__ == \"__main__\":\n    asyncio.ensure_future(process_all())","c54b4763":"df_JobBulletins= pd.read_csv('..\/input\/jobbulletinsla\/JobBulletins.csv')\ndf_JobBulletins.head()","46c5f7c6":"# Number of missing values in each column of training data\nmissing_val_count_by_column = (df_JobBulletins.isnull().sum())\nmissing_val_count_by_column","775357dc":"#FULL_TIME vs PART_TIME\ndf_JobBulletins['FULL_TIME_PART_TIME'].value_counts().plot(kind=\"pie\", y='FULL_TIME_PART_TIME',autopct='%1.1f%%',legend=False)\nplt.axis(\"equal\")\nplt.tight_layout()","43b1d214":"#SCHOOL_TYPE\ndf_JobBulletins['SCHOOL_TYPE'].value_counts().plot(kind=\"pie\", y='SCHOOL_TYPE',autopct='%1.1f%%',legend=False)\nplt.axis(\"equal\")\nplt.tight_layout()","8bcd4b75":"#DRIVERS_LICENSE_REQ\ndf_JobBulletins['DRIVERS_LICENSE_REQ'].value_counts().plot(kind=\"pie\", y='DRIVERS_LICENSE_REQ',autopct='%1.1f%%',legend=False)\nplt.axis(\"equal\")\nplt.tight_layout()","c89f3ae9":"#DRIV_LIC_TYPE\ndf_JobBulletins['DRIV_LIC_TYPE'].value_counts().plot(kind=\"pie\", y='DRIV_LIC_TYPE',autopct='%1.1f%%',legend=False)\nplt.axis(\"equal\")\nplt.tight_layout()","b88ba70d":"#EXAM_TYPE\ndf_JobBulletins['EXAM_TYPE'].value_counts().plot(kind=\"pie\", y='EXAM_TYPE',autopct='%1.1f%%',legend=False)\nplt.axis(\"equal\")\nplt.tight_layout()","f6e4222a":"#EXPERIENCE_LENGTH\n\ndf=pd.DataFrame(df_JobBulletins['EXPERIENCE_LENGTH'].value_counts()).reset_index(). \\\nrename(columns={'index': 'experiense (year)', 'EXPERIENCE_LENGTH': 'Number of Jobs'}).sort_values('experiense (year)').reset_index(drop=True)\n\nax = df.plot(kind='bar',x='experiense (year)',y='Number of Jobs', title ='Experiense (year) vs Number of Jobs', figsize=(15, 10), legend=True, fontsize=12)\nax.set_xlabel(\"experiense (year)\", fontsize=12)\nax.set_ylabel(\"Number of Jobs\", fontsize=12)\nplt.show()\n\ndf","161e4dde":"# new data frame with split value columns \ndf_JobBulletins[\"ENTRY_SALARY_GEN_NEW_FORMAT\"] = df_JobBulletins[\"ENTRY_SALARY_GEN\"].str.replace('$','').str.replace('\\(flat-rated\\)','').str.replace(',','')\n\nnew_salary=df_JobBulletins[\"ENTRY_SALARY_GEN_NEW_FORMAT\"].str.split(\"-\", n = 1, expand = True) \n\n# making separate Starting Salary column from new data frame \ndf_JobBulletins[\"Starting Salary\"]= new_salary[0]\n# making separate Ending Salary column from new data frame \ndf_JobBulletins[\"Ending Salary\"]= new_salary[1]\n\ndf_JobBulletins[\"Starting Salary\"] = pd.to_numeric(df_JobBulletins[\"Starting Salary\"], errors='coerce')\ndf_JobBulletins[\"Ending Salary\"] = pd.to_numeric(df_JobBulletins[\"Ending Salary\"], errors='coerce')","cd0540e8":"df_JobBulletins_sorted=df_JobBulletins.sort_values('Starting Salary',ascending=False).head(10)\n\nax=df_JobBulletins_sorted[['JOB_CLASS_TITLE','Starting Salary','Ending Salary']].plot(kind='bar',\n                                                            title ='', label='JOB_CLASS_TITLE',                                                             \n                                                            figsize=(15, 10), legend=True, fontsize=12)\nax.set_xlabel(\"Title\", fontsize=12)\nax.set_ylabel(\"Salary\", fontsize=12)\nax.set_xticklabels(df_JobBulletins_sorted['JOB_CLASS_TITLE'])\nplt.show()","bbd5a1d4":"**''''''''''''''''''''''''''''''\nFULL_TIME_PART_TIME\n''''''''''''''''''''''''''''''**","a533cd3f":"**''''''''''''''''''''''''''''''\nEDUCATION_YEARS\n''''''''''''''''''''''''''''''**","c6b82e56":"![image.png](https:\/\/arlennav.github.io\/Asyncio\/job.PNG)","fec66ea5":"More Fields\n******\n*  FILE_NAME\n\n* JOB_CLASS_TITLE\n\n* JOB_CLASS_NO\n\n* OPEN_DATE\n\n* REVISED\n\n* JOB_DUTIES\n\n* REQUIREMENT\n \n* WHERE TO APPLY\n \n* APPLICATION DEADLINE\n\n* SELECTION PROCESS or Examination Weight\n****\n\nBasically processContent function generates a list of dictionary of all the required features.\n","8fc9d0b1":"**''''''''''''''''''''''''''''''\nDRIVERS_LICENSE_REQ\n''''''''''''''''''''''''''''''**","fd8eb084":"**Quick note about aiofiles**\n\nOrdinary local file IO is blocking, and cannot easily and portably made asynchronous. This means doing file IO may interfere with asyncio applications, which shouldn't block the executing thread. aiofiles helps with this by introducing asynchronous versions of files that support delegating operations to a separate thread pool.","163e97db":"**''''''''''''''''''''''''''''''\nENTRY_SALARY_DWP\n''''''''''''''''''''''''''''''**","c8cfb645":"**''''''''''''''''''''''''''''''\nSCHOOL_TYPE\n''''''''''''''''''''''''''''''**","a1cdca89":"Separate **ENTRY_SALARY_GEN** column into **Starting Salary** and **Ending Salary** columns**","3ccb2810":"**''''''''''''''''''''''''''''''\nEXPERIENCE_LENGTH\n''''''''''''''''''''''''''''''**","fc7ac1cc":"**''''''''''''''''''''''''''''''\nENTRY_SALARY_GEN\n''''''''''''''''''''''''''''''**","207f4834":"**Extracting content of each key element of text files:**\n\n    FILE_NAME\n    JOB_CLASS_TITLE\n    JOB_CLASS_NO\n    REQUIREMENT_SET_ID\n    REQUIREMENT_SUBSET_ID\n    JOB_DUTIES\n    EDUCATION_YEARS\n    SCHOOL_TYPE\n    EDUCATION_MAJOR\n    EXPERIENCE_LENGTH\n    FULL_TIME_PART_TIME\n    EXP_JOB_CLASS_TITLE\n    EXP_JOB_CLASS_ALT_RESP\n    EXP_JOB_CLASS_FUNCTION\n    COURSE_COUNT\n    COURSE_LENGTH\n    COURSE_SUBJECT\n    MISC_COURSE_DETAILS\n    DRIVERS_LICENSE_REQ\n    DRIV_LIC_TYPE\n    ADDTL_LIC\n    EXAM_TYPE\n    ENTRY_SALARY_GEN\n    ENTRY_SALARY_DWP\n    OPEN_DATE","83a2f5e8":"![image.png](https:\/\/arlennav.github.io\/Asyncio\/Asyncio.PNG)","c1a084cf":"**''''''''''''''''''''''''''''''\nDRIV_LIC_TYPE\n''''''''''''''''''''''''''''''**","a0c3e858":"**The Asynchronous I\/O feature enhances performance by allowing applications to overlap processing with I\/O operations.**","0bf37ee1":"**''''''''''''''''''''''''''''''\nEXAM_TYPE\n''''''''''''''''''''''''''''''**","f07cc87e":"**Lets do some visualization**","5f6af3ec":"**Top 10 Jobs With Highest Salaries**","36162493":"**Experiense (year) vs Number of Jobs**"}}