{"cell_type":{"3a5e3252":"code","f1c3dfb5":"code","0f4a707d":"code","a2c9a9af":"code","adfc9ca0":"code","20047735":"code","fa3c7c91":"code","6e8f4e5f":"code","867c2096":"code","f71e25b2":"code","483fe74f":"code","eba020ef":"code","db11d8f7":"code","5e442900":"code","b17dca91":"code","a3d9129f":"code","bede14d1":"code","926c16e3":"code","2b50428d":"code","172583c8":"code","a900c626":"code","835fc7e1":"code","746a5147":"code","eac68620":"code","aaddf20a":"code","0eb29041":"code","0addbbb0":"code","251ee89b":"code","f4c67f4e":"code","3f40364a":"code","b97f9962":"code","1b2ed403":"code","9130c4bc":"code","f3b76889":"code","8496bceb":"code","457d770b":"code","b7b486b6":"code","f3617eee":"code","b89369e3":"code","063aad34":"code","da24dc9b":"code","5fc2100e":"code","6f23edfb":"code","2b87b55b":"code","7931edb5":"code","dddce671":"code","91580dc2":"code","38ad1026":"code","97c351cf":"code","097f1465":"code","865bb9a1":"code","795733d4":"code","ec0e44ef":"code","19691291":"markdown","f9692f0b":"markdown","7bbb6b66":"markdown","67205e82":"markdown","634f53e8":"markdown","4628d115":"markdown","7dfc2414":"markdown","adbb9b8d":"markdown","9e0d79e8":"markdown","0ae6606a":"markdown","630c0b2e":"markdown","265da8b6":"markdown","2739e599":"markdown","69afe4d4":"markdown","580f6dd6":"markdown","d787ce6a":"markdown","a99c1730":"markdown","abc499f4":"markdown","10740bce":"markdown","295c50e3":"markdown","978c0b02":"markdown","dcbe3428":"markdown","2df9d5d6":"markdown","93b4c7bf":"markdown","ecfcd3f8":"markdown"},"source":{"3a5e3252":"import warnings\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\nwarnings.filterwarnings('ignore', category=FutureWarning)\n\nimport os\nimport re\nimport json\nimport glob\nfrom collections import defaultdict\nfrom textblob import TextBlob\nfrom functools import partial\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns\n\nimport nltk\nimport spacy\nnlp = spacy.load('en_core_web_lg', disable=['parser', 'ner'])\nnlp.max_length = 4000000\nfrom nltk.probability import FreqDist\nfrom wordcloud import WordCloud, STOPWORDS\n\nfrom tqdm.autonotebook import tqdm\nimport string\n\n%matplotlib inline\n\nos.listdir('..\/input\/coleridgeinitiative-show-us-the-data')","f1c3dfb5":"import random\nrandom_seed = 42\ndef seed_all(seed=random_seed):\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    random.seed(seed)\nseed_all()","0f4a707d":"train = pd.read_csv(\"..\/input\/coleridgeinitiative-show-us-the-data\/train.csv\")\nsample = pd.read_csv(\"..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv\")\ntrain.head()","a2c9a9af":"train.nunique()","adfc9ca0":"train.shape","20047735":"train.describe().T","fa3c7c91":"sample","6e8f4e5f":"sample.describe().T","867c2096":"train.head()","f71e25b2":"train_path = \"..\/input\/coleridgeinitiative-show-us-the-data\/train\"\ntest_path = \"..\/input\/coleridgeinitiative-show-us-the-data\/test\"\n","483fe74f":"all_train_path = [os.path.join(train_path,s) + \".json\" for s in train[\"Id\"]]\nall_test_path = [os.path.join(test_path,s) + \".json\" for s in sample[\"Id\"]]","eba020ef":"json_path = all_train_path[0]\njson_path","db11d8f7":"with open(json_path, 'r') as f:\n        json_decode = json.load(f)","5e442900":"json_decode[:1]","b17dca91":"jsontest = pd.DataFrame(json_decode)\njsontest","a3d9129f":"texts = \"\"\n\nfor a in jsontest.values:\n    texts += a[0] +\" \"+ a[1] + \" \"","bede14d1":"texts[:300]","926c16e3":"json_path = all_train_path[0]\nwith open(json_path, 'r') as f:\n        json_decode = json.load(f)\n\njsontest = pd.DataFrame(json_decode)\n\ntexts = \"\"\n\nfor a in jsontest.values:\n    texts += a[0] +\" \"+ a[1] +\" \"","2b50428d":"%%time\n\nalltexts = []\n\nfor json_path in tqdm(all_train_path):\n\n    with open(json_path, 'r') as f:\n            json_decode = json.load(f)\n    jsontest = pd.DataFrame(json_decode)\n\n    texts = \"\"\n\n    for a in jsontest.values:\n        texts += a[0] +\" \"+ a[1] + \" \"\n        \n    alltexts.append(texts)","172583c8":"train[\"text\"] = alltexts\ntrain","a900c626":"Idgroup = train.groupby(\"Id\")[\"dataset_label\"].count().reset_index()\nIdgroup.columns = [\"Id\",\"count\"]\nIdgroup = Idgroup.sort_values(\"count\").reset_index(drop=True)\nIdgroup","835fc7e1":"mostId = train[train[\"Id\"] == Idgroup[\"Id\"].iloc[-1]]\nmostId.head()","746a5147":"mostIdlist = mostId[\"cleaned_label\"].to_list()\nmostIdlist\n","eac68620":"mostIdlist = (\"|\").join(mostIdlist)\nmostIdlist","aaddf20a":"sample","0eb29041":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()","0addbbb0":"check = []\nfor a in range(len(train)):\n    \n    if clean_text(train[\"dataset_label\"].iloc[a]) == train[\"cleaned_label\"].iloc[a]:\n        check.append(1)\n    else:\n        check.append(0)","251ee89b":"np.sum(check)\/len(train)","f4c67f4e":"train[\"check\"] = check\ncheckdf = train[train[\"check\"]==0]\ncheckdf.head(3)","3f40364a":"checkdf[\"dataset_label\"].unique()","b97f9962":"checkdf[\"cleaned_label\"].unique()","1b2ed403":"clean_text(checkdf[\"dataset_label\"].iloc[2])","9130c4bc":"cleanlabel = []\nfor a in tqdm(train[\"cleaned_label\"]):\n    if a[-1] == \" \":\n        cleanlabel.append(a[:-1])\n    else:\n        cleanlabel.append(a)","f3b76889":"check = []\nfor a in range(len(train)):\n    \n    if clean_text(train[\"dataset_label\"].iloc[a]) == cleanlabel[a]:\n        check.append(1)\n    else:\n        check.append(0)","8496bceb":"np.sum(check)\/len(train)","457d770b":"train[\"cleaned_label\"]=cleanlabel","b7b486b6":"train[\"text\"] = [clean_text(s) for s in tqdm(train[\"text\"])]","f3617eee":"dslabel = [clean_text(s) for s in train[\"dataset_label\"].unique()]","b89369e3":"len(dslabel)","063aad34":"labeljudge = []\nall_labels = []\nlabel_len = []\n\nfor a in tqdm(train[\"text\"]):\n    labels = []\n    for b in dslabel:\n        if b in a:\n            labels.append(clean_text(b))\n            break\n    if len(labels)==0:\n        labeljudge.append(0)\n    else:\n        labeljudge.append(1)\n    \n    #all_labels.append(\"|\".join(labels))\n    #label_len.append(len(labels))","da24dc9b":"np.sum(labeljudge)\/len(train)","5fc2100e":"sample","6f23edfb":"alltexts = []\n\nfor json_path in (all_test_path):\n\n    with open(json_path, 'r') as f:\n            json_decode = json.load(f)\n    jsontest = pd.DataFrame(json_decode)\n\n    texts = \"\"\n\n    for a in jsontest.values:\n        texts += a[0] + \" \" + a[1] + \" \"\n        \n    alltexts.append(texts)","2b87b55b":"sample[\"text\"] = alltexts","7931edb5":"sample","dddce671":"sample[\"text\"] = [clean_text(s) for s in tqdm(sample[\"text\"])]","91580dc2":"print(len(dslabel))\ndstitle = [clean_text(s) for s in train[\"dataset_title\"].unique()]\ndslabel = set(dslabel + dstitle) \nlen(dslabel)","38ad1026":"labeljudge = []\nall_labels = []\nlabel_len = []\n\nfor a in tqdm(sample[\"text\"]):\n    labels = []\n    for b in dslabel:\n        if b in a:\n            labels.append(clean_text(b))\n            \n    if len(labels)==0:\n        labeljudge.append(0)\n    else:\n        labeljudge.append(1)\n    \n    all_labels.append(\"|\".join(labels))\n    label_len.append(len(labels))","97c351cf":"sample[\"PredictionString\"] = all_labels\nsample","097f1465":"sample[\"PredictionString\"].iloc[3]","865bb9a1":"sample = sample[[\"Id\",\"PredictionString\"]]","795733d4":"sample.to_csv(\"submission.csv\",index=False)","ec0e44ef":"sample","19691291":"## Data\n\n#### Files\n1. train - the full text of the training set's publications in JSON format, broken into sections with section titles\n2. test - the full text of the test set's publications in JSON format, broken into sections with section titles\n3. train.csv - labels and metadata for the training set\n4. sample_submission.csv - a sample submission file in the correct format\n\n#### Columns\n1. id - publication id - note that there are multiple rows for some training documents, indicating multiple mentioned datasets\n2. pub_title - title of the publication (a small number of publications have the same title)\n3. dataset_title - the title of the dataset that is mentioned within the publication\n4. dataset_label - a portion of the text that indicates the dataset\n5. cleaned_label - the dataset_label, as passed through the clean_text function from the Evaluation page","f9692f0b":"### Most IDs ","7bbb6b66":"#### Look at the above, very long, but it is described in PredictionString like this and submitted. Let us see how to handle this","67205e82":"#### dataset_label is defined in evaluation. It becomes cleaned_label when it passes through the following function ...","634f53e8":"## 1. Import Required Libraries","4628d115":"### View the train Data ","7dfc2414":"# Credits to lot of Kagglers who have spent time in understanding the problem and solivng this\n\n# I am absolute beginner and learning from great stuff people have done, please comment and if you like upvote and share it further. I will definetely try to improve this further. \n\n","adbb9b8d":"## Coleridge Initiative - Show US the Data\n### Discover how data is used for the public good\n\nThis competition challenges data scientists to show how publicly funded data are used to serve science and society. Evidence through data is critical if government is to address the many threats facing society, including; pandemics, climate change, Alzheimer\u2019s disease, child hunger, increasing food production, maintaining biodiversity, and addressing many other challenges. Yet much of the information about data necessary to inform evidence and science is locked inside publications.\n\n","9e0d79e8":"### After review of the above data closely, it looks like that section title and text are alternately dictionary type. we can create a dataframe","0ae6606a":"## 2. Explore the data ","630c0b2e":"## Test Data and Submission","265da8b6":"### Let us execute this for all of train dataset with a for statement) ","2739e599":"### There may be multiple papers in the same publication, or there may be several lines in the same paper. \u00b6","69afe4d4":"The objective of the competition is to identify the mention of datasets within scientific publications. Your predictions will be short excerpts from the publications that appear to note a dataset. Predictions that more accurately match the precise words used to identify the dataset within the publication will score higher. Predictions should be cleaned using the clean_text function from the Evaluation page to ensure proper matching.\n\nPublications are provided in JSON format, broken up into sections with section titles.\n\nThe goal in this competition is not just to match known dataset strings but to generalize to datasets that have never been seen before using NLP and statistical techniques. A percentage of the public test set publications are drawn from the training set - not all datasets have been identified in train, so these unidentified datasets have been used as a portion of the public test labels. These should serve as guides for the difficult task of labeling the private test set.\n\nNote that the hidden test set has roughly ~8000 publications, many times the size of the public test set. Plan \nyour compute time accordingly.\n\n\n#### This competition to classify the written about dataset_label in whole of text content of an academic paper. \u00b6","580f6dd6":"1. **Id 14316**: The id of an academic paper. The train folder contains this id + \".json\" file. This json file will be the full text of the treatise.\n\n2. **pub_title 14271**: The title of the publication of the academic paper.\n\n3. **dataset_title 45**: The title of the dataset mentioned in the publication. \n\n4. **dataset_label 130**: Predict this. Part of the text that indicates the dataset. (The name used by the author of the treatise. It seems that there are more number of dataset_title because there are missing items)\n    \n5. **cleaned_label 130 pieces**: As shown in the evaluation item, dataset_label is nicely formatted with lowercase letters. The submission should be in this form \n\n#### There are 19661 lines in all, but there are many duplicates. (we will explore further in following section)","d787ce6a":"Let me check it should ideally be 1","a99c1730":"List of unique dataset_label","abc499f4":"### Clean the treatise","10740bce":"Now its correct and we will replace this ","295c50e3":"### From the above results, if the test data includes exist_label, clean it as dataset_label and submit it. * A rule that connects multiple items with \"|\". ","978c0b02":"### If there is a word in dslabel, remove the word and merge it, add dataset_title to dslabel as it will increase the score. \u00b6","dcbe3428":"#### Look at the above data same ID has different dataset_title and dataset_label.\n### There are multiple dataset_labels in the PredictionString of submission, they are connected by \"|\", so in this case, let us try creating them","2df9d5d6":"#### 1 Hypothesis: If the whole sentence contains words that appear in the dataset label and cleaned dataset label, check that these are part of train data are included in the full text.\n#### Looks like  some test data is not included in this. ","93b4c7bf":"id + \".json\" file in the Id: test folder. This json file will be the full text of the treatise. \n\n**PreditionString**: As we will see later, we will list the dataset_label here. If you think there are more than one, connect them with \"|\".","ecfcd3f8":"### Look at the above file it contains section_title and its contents written in text. It's easy to get an image if you imagine an academic paper. \n\n### Let us attach the full text of the title and text as follows "}}