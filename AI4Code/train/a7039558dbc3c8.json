{"cell_type":{"30464f52":"code","7d5597de":"code","3cb45f76":"code","80fc19e4":"code","d2b0826a":"code","4a7224a3":"code","cacd869d":"code","80487c2f":"code","70e4bd1a":"code","1d33bad5":"code","3d380556":"code","dcdda295":"code","4252af42":"code","4f357c43":"code","5cd629eb":"code","8538246c":"code","c4e73e10":"code","ae06bb0c":"code","32707280":"code","f7581c45":"code","1f06679d":"code","c662522b":"code","832e7608":"code","443fe375":"code","5782d851":"code","94810f13":"markdown","1f3c65e1":"markdown","8aa95177":"markdown","120447b2":"markdown","e1eb4143":"markdown","489a555b":"markdown","4abde51c":"markdown","4c6f23ff":"markdown","6e82dd13":"markdown","3d42ef7f":"markdown","34f70d60":"markdown"},"source":{"30464f52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d5597de":"df_sd=pd.read_csv(r'\/kaggle\/input\/hacker-earth-love-in-the-screens\/sample dataset.csv')\ndf_sd","3cb45f76":"df_sub=pd.read_csv(r'\/kaggle\/input\/hacker-earth-love-in-the-screens\/sample submission.csv')\ndf_sub","80fc19e4":"df_data=pd.read_csv(r'\/kaggle\/input\/hacker-earth-love-in-the-screens\/data.csv')\ndf_data","d2b0826a":"df_data.corr()","4a7224a3":"df_data.columns","cacd869d":"df_data.other_interests.unique()","80487c2f":"df=df_data\ndf_uid=df[['user_id']]\n# df=df.drop(columns=['user_id'])\ndf.head(2)","70e4bd1a":"df['user_id']=df['user_id'].apply(lambda x: x.split('fffe')[1])\ndf","1d33bad5":"df.columns","3d380556":"from sklearn.preprocessing import LabelEncoder \n\n# label encoding the data \n\nle = LabelEncoder() \n\ndf['username']=df['username'].astype(str)\ndf['username']= le.fit_transform(df['username']) \ndf['status']=df['status'].astype(str)\ndf['status']= le.fit_transform(df['status']) \ndf['sex']=df['sex'].astype(str)\ndf['sex']= le.fit_transform(df['sex']) \ndf['orientation']=df['orientation'].astype(str)\ndf['orientation']= le.fit_transform(df['orientation']) \ndf['drinks']=df['drinks'].astype(str)\ndf['drinks']= le.fit_transform(df['drinks'])\ndf['drugs']=df['drugs'].astype(str)\ndf['drugs']= le.fit_transform(df['drugs'])\ndf['location']=df['location'].astype(str)\ndf['location']= le.fit_transform(df['location'])\ndf['pets']=df['pets'].astype(str)\ndf['pets']= le.fit_transform(df['pets'])\ndf['smokes']=df['smokes'].astype(str)\ndf['smokes']= le.fit_transform(df['smokes'])\ndf['language']=df['language'].astype(str)\ndf['language']= le.fit_transform(df['language'])\ndf['new_languages']=df['new_languages'].astype(str)\ndf['new_languages']= le.fit_transform(df['new_languages'])\ndf['body_profile']=df['body_profile'].astype(str)\ndf['body_profile']= le.fit_transform(df['body_profile'])\ndf['bio']=df['bio'].astype(str)\ndf['bio']= le.fit_transform(df['bio'])\ndf['interests']=df['interests'].astype(str)\ndf['interests']= le.fit_transform(df['interests'])\ndf['other_interests']=df['other_interests'].astype(str)\ndf['other_interests']= le.fit_transform(df['other_interests'])\ndf['location_preference']=df['location_preference'].astype(str)\ndf['location_preference']= le.fit_transform(df['location_preference'])\ndf['job']=df['job'].astype(str)\ndf['job']= le.fit_transform(df['job'])\ndf['dropped_out']=df['dropped_out'].astype(str)\ndf['dropped_out']= le.fit_transform(df['dropped_out'])\ndf","dcdda295":"df.T.corr()\n","4252af42":"df1=df.T\ndf1","4f357c43":"from sklearn.metrics.pairwise import pairwise_distances\njac_sim = 1 - pairwise_distances(df1.T, metric = \"hamming\")\n# optionally convert it to a DataFrame\njac_sim = pd.DataFrame(jac_sim, index=df1.columns, columns=df1.columns)\njac_sim","5cd629eb":"from sklearn.metrics.pairwise import pairwise_distances\njac_sim = 1 - pairwise_distances(df1.T, metric = \"euclidean\")\n# optionally convert it to a DataFrame\njac_sim = pd.DataFrame(jac_sim, index=df1.columns, columns=df1.columns)\njac_sim","8538246c":"from sklearn.metrics.pairwise import pairwise_distances\njac_sim = 1 - pairwise_distances(df1.T, metric = \"manhattan\")\n# optionally convert it to a DataFrame\njac_sim = pd.DataFrame(jac_sim, index=df1.columns, columns=df1.columns)\njac_sim","c4e73e10":"from sklearn.metrics.pairwise import pairwise_distances\njac_sim = 1 - pairwise_distances(df1.T, metric = \"minkowski\")\n# optionally convert it to a DataFrame\njac_sim = pd.DataFrame(jac_sim, index=df1.columns, columns=df1.columns)\njac_sim","ae06bb0c":"from sklearn.metrics.pairwise import pairwise_distances\njac_sim = 1 - pairwise_distances(df1.T, metric = \"cosine\")\n# optionally convert it to a DataFrame\njac_sim = pd.DataFrame(jac_sim, index=df1.columns, columns=df1.columns)\njac_sim","32707280":"from sklearn.metrics.pairwise import pairwise_distances\njac_sim = 1 - pairwise_distances(df1.T, metric = \"mahalanobis\")\n# optionally convert it to a DataFrame\njac_sim = pd.DataFrame(jac_sim, index=df1.columns, columns=df1.columns)\njac_sim","f7581c45":"from sklearn.metrics.pairwise import pairwise_distances\njac_sim = 1 - pairwise_distances(df1.T, metric = \"braycurtis\")\n# optionally convert it to a DataFrame\njac_sim = pd.DataFrame(jac_sim, index=df1.columns, columns=df1.columns)\njac_sim","1f06679d":"from sklearn.metrics.pairwise import pairwise_distances\njac_sim = 1 - pairwise_distances(df1.T, metric = \"correlation\")\n# optionally convert it to a DataFrame\njac_sim = pd.DataFrame(jac_sim, index=df1.columns, columns=df1.columns)\njac_sim","c662522b":"df2=jac_sim\ndf2","832e7608":"df2=pd.concat([df_uid,df2],axis=1)\n# df2=df2.drop(columns=[0])\ndf2","443fe375":"df2=df2.round(3)\ndf2","5782d851":"# df2.to_csv('.csv',index=False)","94810f13":"# jaccard similarity with hamming","1f3c65e1":"# jaccard similarity with minkowski","8aa95177":"https:\/\/stackoverflow.com\/questions\/37003272\/how-to-compute-jaccard-similarity-from-a-pandas-dataframe\nhttps:\/\/machinelearningmastery.com\/distance-measures-for-machine-learning\/","120447b2":"# jaccard similarity with correlation","e1eb4143":"# jaccard similarity with braycurtis","489a555b":"# jaccard similarity with mahalanobis","4abde51c":"# jaccard similarity with euclidean","4c6f23ff":"## distance fn","6e82dd13":"# jaccard similarity with manhattan","3d42ef7f":"### transformation","34f70d60":"# jaccard similarity with cosine"}}