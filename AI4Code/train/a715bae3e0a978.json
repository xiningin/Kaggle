{"cell_type":{"307fcaa7":"code","c23bb2c4":"code","d8d220d7":"code","6569cd89":"code","02c4f91a":"code","b9a88090":"code","a17b8979":"code","d0f96219":"code","8ee5afaf":"code","b5c68e55":"code","201a97fd":"code","c4bb4340":"code","00dcddee":"code","4b882581":"code","6e67a327":"code","fd64830f":"code","3a584ab9":"code","40589882":"code","90d4a625":"code","efb193fe":"code","49d76c93":"code","68f71ead":"code","65acb3f1":"code","2e61777c":"code","955de6ed":"code","3b4a6cd6":"code","c4ec1b66":"code","fd8a44e5":"markdown","a7d5cad8":"markdown","0c3c8a5e":"markdown","e95916f4":"markdown","a8d4d476":"markdown","c148bd04":"markdown","b0765d7f":"markdown","508385f6":"markdown","26f15979":"markdown"},"source":{"307fcaa7":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\nimport sklearn\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nimport scikitplot as skplt\nfrom sklearn.metrics import f1_score, roc_auc_score, confusion_matrix, precision_recall_curve, auc, roc_curve, recall_score, classification_report ","c23bb2c4":"data = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/test.csv\")","d8d220d7":"print(test.isnull().sum())","6569cd89":"print(data.isnull().sum())","02c4f91a":"print(data['Driving_License'].value_counts())","b9a88090":"data = data.drop(columns = ['Driving_License'], axis = 1)\ntest = test.drop(columns = ['Driving_License'], axis = 1)","a17b8979":"data['Previously_Insured'].value_counts()","d0f96219":"pd.crosstab(data['Response'], data['Previously_Insured'])","8ee5afaf":"le = LabelEncoder()\ndata['Gender'] = le.fit_transform(data[\"Gender\"])\ndata['Vehicle_Damage'] = le.fit_transform(data[\"Vehicle_Damage\"])\ndata.head()","b5c68e55":"num = ['Age', 'Vintage']\nss = StandardScaler()\ndata[num] = ss.fit_transform(data[num])\nmm = MinMaxScaler()\ndata[['Annual_Premium']] = mm.fit_transform(data[['Annual_Premium']])\ntest[num] = ss.fit_transform(test[num])\ntest[['Annual_Premium']] = mm.fit_transform(test[['Annual_Premium']])","201a97fd":"data.head()","c4bb4340":"ohe = pd.get_dummies(data['Vehicle_Age'], prefix='Vehicle_Age')\ndata = pd.concat([data, ohe], axis=1)","00dcddee":"data = data.drop(columns = ['id', 'Vehicle_Age'], axis = 1)\ndata.head()","4b882581":"y = data['Response']\ndata = data.drop(columns = ['Response'], axis= 1)","6e67a327":"ohe1 = pd.get_dummies(test['Vehicle_Age'], prefix='Vehicle_Age')\ntest = pd.concat([test, ohe1], axis=1)\nid = test['id']\ntest = test.drop(columns = ['id', 'Vehicle_Age'], axis = 1)\ntest['Gender'] = le.fit_transform(test[\"Gender\"])\ntest['Vehicle_Damage'] = le.fit_transform(test[\"Vehicle_Damage\"])\ntest.head()","fd64830f":"data.head()","3a584ab9":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(data, y, train_size=0.8, random_state = 5)","40589882":"def plot_ROC(fpr, tpr, m_name):\n    roc_auc = sklearn.metrics.auc(fpr, tpr)\n    plt.figure(figsize=(6, 6))\n    lw = 2\n    plt.plot(fpr, tpr, color='darkorange',\n             lw=lw, label='ROC curve (area = %0.2f)' % roc_auc, alpha=0.5)\n    \n    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--', alpha=0.5)\n    \n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xticks(fontsize=16)\n    plt.yticks(fontsize=16)\n    plt.grid(True)\n    plt.xlabel('False Positive Rate', fontsize=16)\n    plt.ylabel('True Positive Rate', fontsize=16)\n    plt.title('Receiver operating characteristic for %s'%m_name, fontsize=20)\n    plt.legend(loc=\"lower right\", fontsize=16)\n    plt.show()","90d4a625":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(X = X_train, y = y_train)\nacc = rf.score(X_valid, y_valid)\nprint(\"Accuracy of Random_Forest: \",acc)","efb193fe":"rf_preds = rf.predict_proba(X_valid)\nrf_score = roc_auc_score(y_valid, rf_preds[:,1], average = 'weighted')\n(fpr, tpr, thresholds) = roc_curve(y_valid, rf_preds[:,1])\nplot_ROC(fpr, tpr, 'rf')\nrf_class = rf.predict(X_valid)\nprint('ROC AUC score for rf model: %.4f'%rf_score)\nprint('F1 score: %0.4f'%f1_score(y_valid, rf_class))\nskplt.metrics.plot_confusion_matrix(y_valid, rf_class,\n        figsize=(8,8))","49d76c93":"from sklearn.ensemble import GradientBoostingClassifier\ngb=GradientBoostingClassifier(n_estimators=134,learning_rate=0.2)\ngb.fit(X_train, y_train)\naccuracy2 = gb.score(X_valid, y_valid)\nprint(\"Accuracy of Gradient Boost\", accuracy2)","68f71ead":"gb_preds = gb.predict_proba(X_valid)\ngb_score = roc_auc_score(y_valid, gb_preds[:,1], average = 'weighted')\nprint(gb_score)\n(fpr, tpr, thresholds) = roc_curve(y_valid, gb_preds[:,1])\nplot_ROC(fpr, tpr, 'gb')","65acb3f1":"gb_class = gb.predict(X_valid)\nprint('ROC AUC score for gb model: %.4f'%gb_score)\nprint('F1 score: %0.4f'%f1_score(y_valid, gb_class))\nskplt.metrics.plot_confusion_matrix(y_valid, gb_class,\n        figsize=(8,8))","2e61777c":"from lightgbm import LGBMClassifier\nLGB_model = LGBMClassifier(random_state = 5, max_depth = 8, n_estimators = 300, reg_lambda = 1.2, reg_alpha = 1.2, min_child_weight = 1, verbose  = 1,\n                       learning_rate = 0.15, gamma = 0.3, colsample_bytree = 0.5, eval_metric = 'auc', is_higher_better = 1, plot = True)\nLGB_model.fit(X_train, y_train)\naccuracy3 = LGB_model.score(X_valid, y_valid)\nprint(\"Accuracy of lgb: \", accuracy3)","955de6ed":"LGB_preds = LGB_model.predict_proba(X_valid)\nLGB_class = LGB_model.predict(X_valid)\nLGB_score = roc_auc_score(y_valid, LGB_preds[:,1], average = 'weighted')\n(fpr, tpr, thresholds) = roc_curve(y_valid, LGB_preds[:,1])\nplot_ROC(fpr, tpr, 'LGBM')","3b4a6cd6":"print('ROC AUC score for LGBM model: %.4f'%LGB_score)\nprint('F1 score: %0.4f'%f1_score(y_valid, LGB_class))\nskplt.metrics.plot_confusion_matrix(y_valid, LGB_class,\n        figsize=(8,8))","c4ec1b66":"predictions = [pred[1] for pred in LGB_model.predict_proba(test)]\nsubmission = pd.DataFrame(data = {'id': id, 'Response': predictions})\nsubmission.to_csv('vehicle_insurance_lgb.csv', index = False)\nsubmission.head()","fd8a44e5":"There are a very small number of people who don't have driving Licence. So we should drop this feature.","a7d5cad8":"**GRADIENT BOOST CLASSIFIER**","0c3c8a5e":"Converted Vehicle_age to categorical features.","e95916f4":"ROC_AUC score of LGBClassifier is 0.8569 which is the best among the three. So we will take the predictions from LGBClassifier.","a8d4d476":"**LGBM CLASSIFIER**","c148bd04":"Splitting of data into train and valid","b0765d7f":"We will scale the columns Age, Annual_Premium and Vinatge as they have vary much.","508385f6":"**RANDOM FOREST CLASSIFIER**","26f15979":"Checked for missing values"}}