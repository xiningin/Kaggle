{"cell_type":{"660fa54c":"code","b5f66ede":"code","f09b5bbf":"code","d1411a59":"code","7d4da3d0":"code","9fe7e1c0":"code","277983e2":"code","7871e426":"code","61332603":"code","3d2c0be2":"code","feb6b9cd":"code","8c882e64":"code","dc2c1ce9":"code","75162b9d":"code","92405300":"code","498f6c88":"code","1a0900c7":"code","a92c94b5":"code","1068da3f":"code","28f98f2b":"code","c8028fe6":"code","4a6a9107":"code","e07ae175":"code","bbbcafb4":"code","97960492":"code","2b124329":"code","246d5fa4":"code","8921373a":"code","7b1671a2":"code","7f286106":"code","26657c56":"code","01c740c3":"code","b9dd8609":"code","b2023f25":"code","833da5a4":"code","33e44300":"code","64f20250":"code","9beb3fec":"code","6bb696d7":"code","27e37b23":"code","3d6ceb7a":"code","5a2ca953":"code","5375838e":"code","58d54b8f":"code","4c13af2b":"code","93782c10":"code","2228817d":"code","249cfa31":"code","a8a72485":"code","74a48eec":"code","3d8cbaef":"code","d9abedc6":"markdown","3f53c859":"markdown","89eaf8db":"markdown"},"source":{"660fa54c":"\nimport numpy as np \nimport pandas as pd \nimport math\nimport cv2\nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns\nimport umap\nfrom PIL import Image\nfrom scipy import misc\nfrom os import listdir\nfrom os.path import isfile, join\nimport numpy as np\nfrom scipy import misc\nfrom random import shuffle\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.utils.np_utils import to_categorical\n","b5f66ede":"os.listdir()","f09b5bbf":"os.chdir('\/kaggle\/input\/utkface\/crop_part1')\nos.listdir()[:5]","d1411a59":"im =Image.open('1_0_0_20161219140623097.jpg.chip.jpg').resize((128,128))\nim","7d4da3d0":"onlyfiles = os.listdir()","9fe7e1c0":"len(onlyfiles)\n\n\nasian = []\nfor name in onlyfiles:\n    race = name.split('_')[2]\n    if race == '2':\n        asian.append(name)\nonlyfiles = asian","277983e2":"shuffle(onlyfiles)\nage = [i.split('_')[0] for i in onlyfiles]","7871e426":"class_label = ['16-','17-24','25-34','35-44','45-60','60+']\n\n\n\n\nclasses = []\nY_age = []\nfor i in age:\n    i = int(i)\n    if i <= 17:\n        classes.append(0)\n    elif (i>17) and (i<=24):\n        classes.append(1)\n    elif (i>24) and (i<=34):\n        classes.append(2)\n    elif (i>34) and (i<=44):\n        classes.append(3)\n    elif (i>44) and (i<=60):\n        classes.append(4)\n    elif i>60:\n        classes.append(5)\n    Y_age.append(i)","61332603":"import imageio","3d2c0be2":"\ndef convertImage(filename):\n    face = imageio.imread(filename)\n    face = cv2.resize(face, (32, 32))\n    return face \nX_data = list(map(convertImage, onlyfiles))\n","feb6b9cd":"X = np.squeeze(X_data)\n","8c882e64":"X.shape","dc2c1ce9":"# normalize data\nX = X.astype('float32')\nX \/= 255\n","75162b9d":"classes[:10]\n","92405300":"categorical_labels = to_categorical(classes, num_classes=6)\n","498f6c88":"categorical_labels","1a0900c7":"categorical_labels[:10]\n","a92c94b5":"len(X)","1068da3f":"(x_train, y_train, y_train_age), (x_test, y_test, y_test_age) = (X[:1100],categorical_labels[:1100], Y_age[:1100]) , (X[1100:] , categorical_labels[1100:], Y_age[1100:])\n","28f98f2b":"len(x_train)+len(x_test)  == len(X)\n","c8028fe6":"from sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import confusion_matrix, classification_report","4a6a9107":"\ncv2.cvtColor(x_train[0], cv2.COLOR_BGR2GRAY).shape","e07ae175":"x_train_temp = np.array([cv2.cvtColor(x_t, cv2.COLOR_BGR2GRAY).flatten() for x_t in x_train]) \nx_train_temp.shape","bbbcafb4":"x_train_df = pd.DataFrame(x_train_temp)\nx_train_df","97960492":"def plot_faces(pixels):\n    fig, axes = plt.subplots(5, 5, figsize=(6, 6))\n    for i, ax in enumerate(axes.flat):\n        ax.imshow(np.array(pixels)[i].reshape(32, 32), cmap='gray')\n    plt.show()\n\n    \nplot_faces(x_train_df)","2b124329":"pca = PCA().fit(x_train_df)\nplt.figure(figsize=(18, 7))\nplt.plot(pca.explained_variance_ratio_.cumsum(), lw=3)","246d5fa4":"representPercesntage = 0.999 # This significantly affects accuracy\n#representPercesntage = 0.8\nnp.where(pca.explained_variance_ratio_.cumsum() > representPercesntage)[0][0:10]","8921373a":"n_com = np.where(pca.explained_variance_ratio_.cumsum() > representPercesntage)[0][0]","7b1671a2":"pca = PCA(n_components=n_com).fit(x_train_df)","7f286106":"x_train_pca = pca.transform(x_train_df)","26657c56":"x_train_pca.shape","01c740c3":"y_train_sklearn = np.array([np.where(yt == 1)[0][0] for yt in y_train])","b9dd8609":"y_train_sklearn","b2023f25":"classifier = SVC().fit(x_train_pca,y_train_sklearn)","833da5a4":"predictions = classifier.predict(x_train_pca)\ntarget_names = [str(l) for l in range(6)]\nprint(classification_report(y_train_sklearn, predictions, target_names=target_names))","33e44300":"TruePrediction = 0\nfor i in range(len(predictions)):\n    if predictions[i] == y_train_sklearn[i]:\n        TruePrediction += 1\nprint(f\"Accuracy: {TruePrediction\/len(predictions)}\")","64f20250":"\nx_test_temp = np.array([cv2.cvtColor(x_t, cv2.COLOR_BGR2GRAY).flatten() for x_t in x_test]) \nx_test_df = pd.DataFrame(x_test_temp)\nx_test_pca = pca.transform(x_test_df)\n\npredictions = classifier.predict(x_test_pca)\n\ny_test_sklearn = np.array([np.where(yt == 1)[0][0] for yt in y_test])\n\nprint(classification_report(y_test_sklearn, predictions))","9beb3fec":"TruePrediction = 0\nloss = 0\nN = len(predictions)\nfor i in range(len(predictions)):\n    if predictions[i] == y_test_sklearn[i]:\n        TruePrediction += 1\n    else:\n        loss += (y_test_sklearn[i] - predictions[i])**2\nprint(f\"Accuracy: {TruePrediction\/len(predictions)}\")\nprint(f\"Loss: {(loss\/N)**0.5}\")","6bb696d7":"labels = class_label\n\n\nfigure = plt.figure(figsize=(20, 8))\nfor i, index in enumerate(np.random.choice(x_test.shape[0], size=15, replace=False)):\n    ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])\n    # Display each image\n    ax.imshow(np.squeeze(x_test[index]))\n    predict_index = predictions[index]\n    true_index = np.argmax(y_test[index])\n    # Set the title for each image\n    ax.set_title(\"{} ({})\".format(labels[predict_index], \n                                  labels[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))\nplt.show()","27e37b23":"#SVC RBF\n\nclassifier = SVC(kernel = 'rbf',  gamma=0.008, C=0.8).fit(x_train_pca,y_train_sklearn)\n# Preprocessing pipeline\nx_test_temp = np.array([cv2.cvtColor(x_t, cv2.COLOR_BGR2GRAY).flatten() for x_t in x_test]) \nx_test_df = pd.DataFrame(x_test_temp)\nx_test_pca = pca.transform(x_test_df)\n\npredictions = classifier.predict(x_test_pca)\n\ny_test_sklearn = np.array([np.where(yt == 1)[0][0] for yt in y_test])\n\nprint(classification_report(y_test_sklearn, predictions))\n\nTruePrediction = 0\nloss = 0\nN = len(predictions)\nfor i in range(N):\n    if predictions[i] == y_test_sklearn[i]:\n        TruePrediction += 1\n    else:\n        loss += (y_test_sklearn[i] - predictions[i])**2\nprint(f\"Accuracy: {TruePrediction\/len(predictions)}\")\nprint(f\"Loss: {(loss\/N)**0.5}\")\n\n# Plot a random sample of 10 test images, their predicted labels and ground truth\nfigure = plt.figure(figsize=(20, 8))\nfor i, index in enumerate(np.random.choice(x_test.shape[0], size=15, replace=False)):\n    ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])\n    # Display each image\n    ax.imshow(np.squeeze(x_test[index]))\n    predict_index = predictions[index]\n    true_index = np.argmax(y_test[index])\n    # Set the title for each image\n    ax.set_title(\"{} ({})\".format(labels[predict_index], \n                                  labels[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))\nplt.show()","3d6ceb7a":"#SVC poly\n\nclassifier = SVC(kernel = 'poly', gamma=0.08, class_weight='balanced').fit(x_train_pca,y_train_sklearn)\n# Preprocessing pipeline\nx_test_temp = np.array([cv2.cvtColor(x_t, cv2.COLOR_BGR2GRAY).flatten() for x_t in x_test]) \nx_test_df = pd.DataFrame(x_test_temp)\nx_test_pca = pca.transform(x_test_df)\n\npredictions = classifier.predict(x_test_pca)\n\ny_test_sklearn = np.array([np.where(yt == 1)[0][0] for yt in y_test])\n\nprint(classification_report(y_test_sklearn, predictions))\n\nTruePrediction = 0\nloss = 0\nN = len(predictions)\nfor i in range(N):\n    if predictions[i] == y_test_sklearn[i]:\n        TruePrediction += 1\n    else:\n        loss += (y_test_sklearn[i] - predictions[i])**2\nprint(f\"Accuracy: {TruePrediction\/len(predictions)}\")\nprint(f\"Loss: {(loss\/N)**0.5}\")\n\n\nfigure = plt.figure(figsize=(20, 8))\nfor i, index in enumerate(np.random.choice(x_test.shape[0], size=15, replace=False)):\n    ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])\n\n    ax.imshow(np.squeeze(x_test[index]))\n    predict_index = predictions[index]\n    true_index = np.argmax(y_test[index])\n   \n    ax.set_title(\"{} ({})\".format(labels[predict_index], \n                                  labels[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))\nplt.show()","5a2ca953":"from sklearn.cluster import KMeans\nimport numpy as np\n\nkmeans = KMeans(n_clusters=6, random_state=2).fit(x_train_pca)\nkmeans.labels_\n","5375838e":"results = {\n    i:[] for i in range(6)\n}\n\ncolors = ['r','g','b','y','m','c']\nfor i in range(len(x_train_pca)):\n    pc1, pc2 = x_train_pca[i][0:2]\n    label = kmeans.labels_[i]\n    results[label].append(y_train_sklearn[i])\n    plt.scatter(pc1, pc2, c= colors[label],\n            s=50, cmap='viridis');\n    ","58d54b8f":"from collections import Counter\nsumCounter = Counter()\nfor k,v in results.items():\n    print(f\"Label {k}\")\n    print(Counter(v))\n    sumCounter += Counter(v)","4c13af2b":"sumCounter","93782c10":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression().fit(x_train_pca, y_train_age)\nreg.score(x_train_pca, y_train_age)\n\npredictions = reg.predict(x_train_pca)\n\naccuracy = 0\nfor i in range(len(predictions)):\n    print(f\"Prediction: {predictions[i]}\")\n    print(f\"Real: {y_train_age[i]}\")\n    \n    if predictions[i] <= 17:\n        Class = 0\n    elif (predictions[i]>17) and (predictions[i]<=24):\n        Class = 1\n    elif (predictions[i]>24) and (predictions[i]<=34):\n        Class = 2\n    elif (predictions[i]>34) and (predictions[i]<=44):\n        Class = 3\n    elif (predictions[i]>44) and (predictions[i]<=60):\n        Class = 4\n    elif predictions[i]>60:\n        Class = 5\n    if Class == y_train_sklearn[i]:\n        accuracy += 1\naccuracy \/= len(predictions)\nprint(f\"Train accuracy {accuracy}\")\n\npredictions = reg.predict(x_test_pca)\npredictions_class = []\naccuracy = 0\nfor i in range(len(predictions)):\n    print(f\"Prediction: {predictions[i]}\")\n    print(f\"Real: {y_test_age[i]}\")\n    \n    if predictions[i] <= 17:\n        Class = 0\n    elif (predictions[i]>17) and (predictions[i]<=24):\n        Class = 1\n    elif (predictions[i]>24) and (predictions[i]<=34):\n        Class = 2\n    elif (predictions[i]>34) and (predictions[i]<=44):\n        Class = 3\n    elif (predictions[i]>44) and (predictions[i]<=60):\n        Class = 4\n    elif predictions[i]>60:\n        Class = 5\n    if Class == y_test_sklearn[i]:\n        accuracy += 1\n    predictions_class.append(Class)\naccuracy \/= len(predictions)\nprint(f\"Test accuracy {accuracy}\")","2228817d":"\nfigure = plt.figure(figsize=(20, 8))\nfor i, index in enumerate(np.random.choice(x_test.shape[0], size=15, replace=False)):\n    ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])\n    \n    ax.imshow(np.squeeze(x_test[index]))\n    predict_index = predictions_class[index]\n    true_index = np.argmax(y_test[index])\n    \n    ax.set_title(\"{} ({})\".format(labels[predict_index], \n                                  labels[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))\nplt.show()","249cfa31":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification","a8a72485":"clf = RandomForestClassifier(max_depth=120, random_state=42)\nclf.fit(x_train_pca, y_train_sklearn)","74a48eec":"predictions = clf.predict(x_train_pca)\nprint(classification_report(y_train_sklearn, predictions))\n\nTruePrediction = 0\nloss = 0\nN = len(predictions)\nfor i in range(N):\n    if predictions[i] == y_train_sklearn[i]:\n        TruePrediction += 1\n    else:\n        loss += (y_train_sklearn[i] - predictions[i])**2\nprint(f\"Accuracy: {TruePrediction\/len(predictions)}\")\nprint(f\"Loss: {(loss\/N)**0.5}\")\n\npredictions = clf.predict(x_test_pca)\nprint(classification_report(y_test_sklearn, predictions))\n\n\nTruePrediction = 0\nloss = 0\nN = len(predictions)\nfor i in range(N):\n    if predictions[i] == y_test_sklearn[i]:\n        TruePrediction += 1\n    else:\n        loss += (y_test_sklearn[i] - predictions[i])**2\nprint(f\"Accuracy: {TruePrediction\/len(predictions)}\")\nprint(f\"Loss: {(loss\/N)**0.5}\")\n\n\nfigure = plt.figure(figsize=(20, 8))\nfor i, index in enumerate(np.random.choice(x_test.shape[0], size=15, replace=False)):\n    ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])\n  \n    ax.imshow(np.squeeze(x_test[index]))\n    predict_index = predictions[index]\n    true_index = np.argmax(y_test[index])\n    \n    ax.set_title(\"{} ({})\".format(labels[predict_index], \n                                  labels[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))\nplt.show()","3d8cbaef":"\nfigure = plt.figure(figsize=(20, 8))\nfor i, index in enumerate(np.random.choice(x_test.shape[0], size=15, replace=False)):\n    ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])\n    \n    ax.imshow(np.squeeze(x_test[index]))\n    predict_index = predictions[index]\n    true_index = np.argmax(y_test[index])\n   \n    ax.set_title(\"{} ({})\".format(labels[predict_index], \n                                  labels[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))\nplt.show()","d9abedc6":"**CONVERT IMAGES TO VECTORS**","3f53c859":"## Linear Regression","89eaf8db":"# Test Data"}}