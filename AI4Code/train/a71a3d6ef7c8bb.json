{"cell_type":{"7543cfa2":"code","ca97b54f":"code","9eb2d846":"code","288030b2":"code","011b5146":"code","1a2a03f0":"code","d57cc689":"code","bf4744c7":"code","01dbc7df":"code","40630af2":"code","92f5e05e":"code","9f85b9a2":"code","e413ce4b":"code","a82234dc":"code","f4859d69":"markdown","42a963e8":"markdown","2676f0e7":"markdown","1ba5c480":"markdown"},"source":{"7543cfa2":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import StandardScaler\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","ca97b54f":"df = pd.read_csv('\/kaggle\/input\/predict-test-scores-of-students\/test_scores.csv')\ndf","9eb2d846":"# Concise summary of a DataFrame\ndf.info()","288030b2":"# Detect missing values for an array-like object\npd.isnull(df).any()","011b5146":"# Convert categorical features \ndf['school_type'] = df['school_type'].map({'Public': 1, 'Non-public': 0})\ndf['teaching_method'] = df['teaching_method'].map({'Standard': 1, 'Experimental': 0})\ndf['gender'] = df['gender'].map({'Male': 1, 'Female': 0})\ndf['lunch'] = df['lunch'].map({'Does not qualify': 1, 'Qualifies for reduced\/free lunch': 0})\n\nschool = pd.get_dummies(df['school'], prefix='school')\nschool_setting = pd.get_dummies(df['school_setting'], prefix='school_setting')\nclassroom = pd.get_dummies(df['classroom'], prefix='classroom')","1a2a03f0":"# Creation of a new DataFrame\ndf = pd.concat([df, school, school_setting, classroom], axis=1)\ndrop = ['school', 'school_setting', 'classroom', 'student_id']\ndf.drop(drop, axis=1, inplace=True)\ndf","d57cc689":"# Adding histograms of features\ndf['posttest'].hist();\nplt.title('posttest')","bf4744c7":"# Let's see emissions\nf, axes = plt.subplots(1, 3,figsize=(10,4))\nsns.boxplot(data=df, x='posttest', ax=axes[0])\nsns.boxplot(data=df, x='pretest', ax=axes[1])\nsns.boxplot(data=df, x='n_student', ax=axes[2]);","01dbc7df":"# Split arrays or matrices into random train and test subsets\nX=df.drop('posttest', axis=1)\ny=df['posttest']\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, random_state=17)","40630af2":"# Feature scaling\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_valid_scaled = scaler.transform(X_valid)","92f5e05e":"# Building and training the model\nridge_cv = RidgeCV()\nridge_cv.fit(X_train_scaled, y_train)","9f85b9a2":"# Evaluating the model on a test dataset\nridge_cv_predict = ridge_cv.predict(X_valid_scaled)\n","e413ce4b":"# Learning Assessment\nprint('Test data score:', ridge_cv.score(X_valid_scaled, y_valid))\nprint('MAE:', mean_absolute_error(y_valid, ridge_cv_predict))","a82234dc":"# Linear Regression Coefficients\npd.DataFrame(data=ridge_cv.coef_, index=X_train.columns, columns=['coef']).sort_values(by='coef', ascending=False)","f4859d69":"## Visualization","42a963e8":"## Train and evaluate a linear regression model with regularization","2676f0e7":"## Read Datase","1ba5c480":"## Cleaning and formatting data"}}