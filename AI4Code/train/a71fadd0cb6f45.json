{"cell_type":{"b906c422":"code","d5041358":"code","636084e5":"code","07786a23":"code","cd24b7a4":"code","9ad12de2":"code","f3fe93b8":"code","d42e1739":"code","d09ee7ac":"code","07279f33":"code","197b894b":"code","62f06941":"code","5faff437":"code","4c54991d":"code","ce3aef29":"code","7e775ecb":"code","6cf147b0":"code","86fbb241":"code","2be5d851":"code","afa94645":"code","b672df31":"markdown","32951cc7":"markdown","88c317cf":"markdown","bb425e54":"markdown","27b93b92":"markdown","84ea8de8":"markdown","d34ee0ae":"markdown","7d8aaa42":"markdown","c6532dd1":"markdown","6e2e8e95":"markdown","45022f84":"markdown","bf9f82d0":"markdown"},"source":{"b906c422":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5041358":"import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\nimport seaborn as sns","636084e5":"fooddata=pd.read_csv('\/kaggle\/input\/indian-food-101\/indian_food.csv')\nfooddata","07786a23":"fooddata.info()","cd24b7a4":"\nfooddata.replace(\"-1\", np.NaN, inplace = True)\nfooddata.nunique()","9ad12de2":"fooddata.region.value_counts()\n","f3fe93b8":"fooddata.state.value_counts()","d42e1739":"diettype = fooddata.diet.value_counts().reset_index()\nplt.figure(figsize=(7,7))\nplt.pie(diettype.diet, labels = diettype['index'],autopct='%0.2f%%',shadow=True)\nplt.title(\"Vegetarian vs Non-Vegetarian\")\nplt.show()","d09ee7ac":"courseregion=fooddata.pivot_table(values='name',index=['region'],columns='course', aggfunc = 'count')\ncourseregion.plot(kind='bar')\nplt.title(\"Course vs Region\")","07279f33":"words = '' \nstopwords = set(STOPWORDS) \n  \nfor val in fooddata.state:       \n    val = str(val)   \n    tokens = val.split()      \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    words += \" \".join(tokens)+\" \"\n  \nwordcloud = WordCloud(width = 600, height = 600, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 8).generate(words)                        \nplt.figure(figsize = (5,5), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","197b894b":"flavorregion=fooddata.pivot_table(values='name',index=['region'],columns='flavor_profile', aggfunc = 'count')\nflavorregion.plot(kind='bar')\nplt.title(\"flavor vs region\")","62f06941":"sns.countplot(x=fooddata['course'])\nplt.title(\"Number of courses count\")","5faff437":"sns.countplot(x=fooddata['flavor_profile'])\nplt.title(\"Flavor profile count\")","4c54991d":"Time=fooddata.pivot_table(values=['prep_time','cook_time'],index='course',aggfunc=np.mean)\nTime.plot(kind='bar',stacked=True,color=['black','purple'])\nplt.title(\"Prep_time and cook_time\")","ce3aef29":"\nfooddata['total_time'] = fooddata.prep_time + fooddata.cook_time\nfooddata.sort_values('total_time',ascending = True).tail()[['name','course','total_time']]","7e775ecb":"word_list = ''\nfor word in fooddata.ingredients:\n    splited = word.lower()\n    word_list +=splited\n    \nwordcloud = WordCloud(width=800,height=800,background_color='white',min_font_size=4).generate(word_list)\nplt.figure(figsize = (10, 5), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = -1) \n  \nplt.show()","6cf147b0":"course_ing_count = (fooddata[fooddata['course'] == \"dessert\"][['name','ingredients']])\ndef ingredient_count(column):\n    return len(column.split(\",\"))\ncourse_ing_count['ingredient_count'] = course_ing_count['ingredients'].apply(ingredient_count)\ncourse_ing_count.sort_values('ingredient_count', ascending = True).tail()","86fbb241":"statelist = fooddata[fooddata['state']=='Kerala'].reset_index(drop=True)\nstatelist","2be5d851":"fooddata[(fooddata['diet'] == 'vegetarian') & (fooddata['course'] == 'dessert')].sort_values(\"total_time\", ascending= False).head()","afa94645":"fooddata[(fooddata['diet'] == 'non vegetarian') & (fooddata['course'] == 'main course')].sort_values(\"total_time\", ascending= True).tail()","b672df31":"Total info ","32951cc7":"Total time taken for making each reciepe","88c317cf":"flavor vs region","bb425e54":"Reading the csv file\n","27b93b92":"Diet and its course","84ea8de8":"Vegetarian vs Non-Vegetarian","d34ee0ae":"State count","7d8aaa42":"Courses count","c6532dd1":"Ingredients count","6e2e8e95":"Each state reciepes","45022f84":"![](http:\/\/)Courses in different regions.","bf9f82d0":"Region count"}}