{"cell_type":{"cdc77f01":"code","ba5c2847":"code","b898778c":"code","bb11f491":"code","8eb8da32":"code","a03cdccb":"code","100ae33f":"code","4f64adb4":"code","c23c1c93":"code","b3a8a888":"code","258f228e":"code","4c2a6d00":"code","4040c79f":"code","ff97c793":"code","32db5aa3":"code","81747663":"code","530feb4f":"code","a078e611":"code","1ad00210":"code","fccf2d30":"code","b4d66a03":"code","5717c481":"code","dfe8b507":"code","0bd7414b":"code","7574a2b6":"code","b8b5e263":"code","de47b551":"code","fa1a94ab":"code","34b538eb":"code","6533546f":"code","d8e78df9":"code","801247b0":"code","c9c8495a":"code","331fb9be":"code","67605fbd":"code","fec345d4":"code","14ce9e7d":"code","38541476":"code","7d5c6062":"code","f99e1bea":"code","acf31748":"code","803dd5de":"code","c5b17002":"code","c8e5eeb9":"code","075d0c09":"code","80f3bd5e":"code","8221b4aa":"code","49962d00":"code","a66970e4":"code","a66c6118":"code","819f3999":"code","83f2ae8d":"code","d1065c07":"markdown","49ccd805":"markdown","18b3cb3b":"markdown","e5c77bcd":"markdown","930c2c9d":"markdown","3c4b7839":"markdown","64a43532":"markdown","6011077e":"markdown","e8571e5b":"markdown","a325e95a":"markdown","e9b6c761":"markdown","5d47d0a4":"markdown","ce70329d":"markdown","ab97cb73":"markdown","86094d43":"markdown","08758939":"markdown","684251fe":"markdown","ea189ad9":"markdown","f74fd40c":"markdown"},"source":{"cdc77f01":"import gensim\nfrom gensim.utils import simple_preprocess\nfrom gensim.models.fasttext import FastText\nfrom smart_open import open, os\nimport logging\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom IPython.display import Image\n\nfrom scipy import spatial\nimport spacy\nfrom spacy import displacy\nnlp = spacy.load('en')","ba5c2847":"# Word2Vec Window\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/w2v_window.png\", width=600)","b898778c":"# Document and Word Vectors\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/word2vec_approaches.png\", width=600)","bb11f491":"# CBOW Models\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/shallow_net.png\", width=600)","8eb8da32":"Image('https:\/\/towardsml.files.wordpress.com\/2018\/06\/capture11.png')","a03cdccb":"# Word2Vec Hidden Layer\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/word2vec_hidden_layer.png\", width=400)","100ae33f":"# Document and Word Vectors\n# Image(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/word_vector.png\", width=400)\nImage('https:\/\/i.imgur.com\/R8VLFs2.png', width= 500)","4f64adb4":"# Word2Vec Architecture\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/w2v_architecture.png\", width=600)","c23c1c93":"# Multinomial Logistic Regression\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/multinomial_logistic_regression.png\", width=600)","b3a8a888":"Image('http:\/\/mccormickml.com\/assets\/word2vec\/matrix_mult_w_one_hot.png',width=400)","258f228e":"# Softmax\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/softmax.png\", width=600)","4c2a6d00":"a= np.array([2.0,1.0,0.1])\nnp.exp(a)","4040c79f":"np.exp(a)\/ sum(np.exp(a))","ff97c793":"# Word2Vec Architecture\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/cross_entropy.png\", width=600)","32db5aa3":"# Cross Entropy Example\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/cross_entropy_example.png\", width=600)","81747663":"0 * ln(0.1)+ 1* ln(0.5)+0*ln(0.4)","530feb4f":"# Log Loss (i.e. binary cross entropy)\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/log_loss.png\", width=600)","a078e611":"Image('https:\/\/jalammar.github.io\/images\/word2vec\/queen-woman-girl-embeddings.png',width= 800)","1ad00210":"corpus = [\n  'Text of the first document.',\n  'Text of the second document made longer.',\n  'Number three.',\n  'This is number four.',\n]\n\n# we need to pass splitted sentences to the model\ntokenized_sentences = [simple_preprocess(sentence) for sentence in corpus]\ntokenized_sentences","fccf2d30":"# build a word2vec model\nmodel = gensim.models.Word2Vec(tokenized_sentences, min_count=1)\nprint(model)","b4d66a03":"import logging\n\n# add logging to view training info from gensim\nlogging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)","5717c481":"# build a word2vec model with logging turned on\nmodel = gensim.models.Word2Vec(tokenized_sentences, min_count=1)\nprint(model)","dfe8b507":"import os\nos.listdir('..\/input\/usinlppracticum')","0bd7414b":"df = pd.read_csv('..\/input\/usinlppracticum\/imdb_train.csv').sample(1000).reset_index(drop=True)\ndf.head()","7574a2b6":"nlp = spacy.load('en', disable=['ner', 'parser']) # disabling Named Entity Recognition for speed\nimport re\ndef cleaning(doc):\n    doc=nlp(doc)\n    txt = [token.lemma_ for token in doc if not token.is_stop]\n    txt=' '.join(txt)\n    txt=re.sub(\"[^A-Za-z']+\", ' ', str(txt)).lower()\n    # Word2Vec uses context words to learn the vector representation of a target word,\n    # if a sentence is only one or two words long,\n    # the benefit for the training is very small\n    return txt.split()","b8b5e263":"from tqdm import tqdm\ntqdm.pandas()","de47b551":"df['clean_review']=df['review'].progress_apply(lambda x:cleaning(x))\ndf['clean_review'].head()","fa1a94ab":"from gensim.models import Word2Vec","34b538eb":"# build the same model, making the 2 steps explicit\n# start with an empty model, no training occurs yet\n\nnew_model = Word2Vec(\n      size=300\n    , window=5\n    , min_count=5\n    , sg=1\n)","6533546f":"%%time\n\n# learn the vocabulary\nnew_model.build_vocab(df['clean_review'])","d8e78df9":"print('epochs: {}'.format(new_model.epochs))\nprint('corpus count: {}'.format(new_model.corpus_count))","801247b0":"%%time\n\n# train the model\nnew_model.train(\n      df['clean_review']\n    , total_examples=new_model.corpus_count\n    , epochs=5 #new_model.epochs\n)","c9c8495a":"# save the model\nSAVED_EMBEDDINGS_PATH=\"w2v.model\"\nnew_model.save(SAVED_EMBEDDINGS_PATH)\n# open the model\nnew_model = gensim.models.Word2Vec.load(SAVED_EMBEDDINGS_PATH)","331fb9be":"print(list(new_model.wv.vocab)[0:100])","67605fbd":"# create a word vector from a trained work\nprint(new_model.wv['comedy'])","fec345d4":"new_model.most_similar(positive=['movie'], topn=10)","14ce9e7d":"from itertools import combinations\ncompare_words = ['movie', 'film', 'good', 'awesome']\n\nfor t1, t2 in combinations(compare_words, 2):\n    print('t1: {} | t2: {} | simiarity_score: {}'.format(t1, t2, new_model.wv.similarity(t1,t2)))","38541476":"# Document and Word Vectors\nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/man_to_king_w2v.png\", width=800)","7d5c6062":"# Paragraph Vector - Distributed Memory (PV_DM) Model \nImage(\"https:\/\/s3.amazonaws.com\/nlp.practicum\/pv_dm.png\", width=600)","f99e1bea":"#Import all the dependencies\nfrom gensim.models.doc2vec import Doc2Vec, TaggedDocument","acf31748":"train_corpus= [TaggedDocument(words=_d, tags=[str(i)]) for i, _d in enumerate(df['clean_review'][:1000])]","803dd5de":"from gensim.models import doc2vec\n\nd2v = doc2vec.Doc2Vec(\n      vector_size=300\n    , epochs=20\n    , dm=0\n)\n\nprint(d2v)","c5b17002":"d2v.build_vocab(train_corpus)","c8e5eeb9":"%%time\n\nd2v.train(\n    train_corpus,\n    total_examples=d2v.corpus_count,\n    epochs=d2v.epochs\n)","075d0c09":"# view a document vector\nd2v.infer_vector('This was one of the most beautiful movies I have ever seen'.split()).shape","80f3bd5e":"similar_doc = d2v.docvecs.most_similar('2')\nsimilar_doc","8221b4aa":"embedding_file='..\/input\/glove6b50dtxt\/glove.6B.50d.txt'","49962d00":"embeddings_dict = {}\nwith open(embedding_file, 'r') as f:\n    for line in f:\n        values = line.split()\n        word = values[0]\n        vector = np.asarray(values[1:], \"float32\")\n        embeddings_dict[word] = vector","a66970e4":"len(embeddings_dict)","a66c6118":"embeddings_dict[\"king\"].shape","819f3999":"def find_closest_embeddings(embedding):\n    return sorted(embeddings_dict.keys(), key=lambda word: spatial.distance.euclidean(embeddings_dict[word], embedding))","83f2ae8d":"print(find_closest_embeddings(embeddings_dict[\"king\"])[1:3])","d1065c07":"##### Input\nWhen training this network on word pairs, the input is a one-hot vector representing the input word and the training output is also a one-hot vector representing the output word. But when you evaluate the trained network on an input word, the output vector will actually be a probability distribution (i.e., a bunch of floating point values, not a one-hot vector).\n\n##### The Hidden Layer\nFor our example, we\u2019re going to say that we\u2019re learning word vectors with 300 features. So the hidden layer is going to be represented by a weight matrix with 10,000 rows (one for every word in our vocabulary) and 300 columns (one for every hidden neuron).","49ccd805":"### Word embedding\n\"Word embedding is the collective name for a set of language modeling and feature learning techniques in natural language processing (NLP) where words or phrases from the vocabulary are mapped to vectors of real numbers. Conceptually it involves a mathematical embedding from a space with one dimension per word to a continuous vector space with much higher dimension.\n\nMethods to generate this mapping include neural networks, dimensionality reduction on the word co-occurrence matrix, probabilistic models, and explicit representation in terms of the context in which words appear.\n\nWord and phrase embeddings, when used as the underlying input representation, have been shown to boost the performance in NLP tasks such as syntactic parsing and sentiment analysis.\"\n\n##### There are many techniques to create Word Embeddings. Some of the popular ones are:\n\n- Binary Encoding\n- TF Encoding\n- TF-IDF Encoding\n- Latent Semantic Analysis Encoding\n- Topic Modeling\n- Word2Vec Encoding\n\n##### Why do we need Word Embeddings?\n\"Many machine learning algorithms and almost all Deep Learning Architectures are incapable of processing strings or plain text in their raw form. They require numbers as inputs to perform any sort of job, be it classification, regression etc. in broad terms. And with the huge amount of data that is present in the text format, it is imperative to extract knowledge out of it and build applications.\"\n\n\"So a natural language modelling technique like Word Embedding is used to map words or phrases from a vocabulary to a corresponding vector of real numbers. As well as being amenable to processing by ML algorithms, this vector representation has two important and advantageous properties:\n\n- **Dimensionality Reduction** - it is a more efficient representation\n- **Contextual Similarity** - it is a more expressive representation\"\n\n### Techniques (Count versus Predictive)\nCount-based methods compute the statistics of how often some word co-occurs with its neighbor words in a large text corpus, and then map these count-statistics down to a small, dense vector for each word. Predictive models directly try to predict a word from its neighbors in terms of learned small, dense embedding vectors (considered parameters of the model).\"\n\n##### Word2Vec\nWord2Vec is a more recent model that embeds words in a lower-dimensional vector space using a shallow neural network. The result is a set of word-vectors where vectors close together in vector space have similar meanings based on context, and word-vectors distant to each other have differing meanings. For example, strong and powerful would be close together and strong and Paris would be relatively far. There are two versions of this model based on skip-grams (SG) and continuous-bag-of-words (CBOW), both implemented by the gensim Word2Vec class.\n\nWord2Vec uses a trick you may have seen elsewhere in machine learning. We\u2019re going to train a simple neural network with a single hidden layer to perform a certain task, but then we\u2019re not actually going to use that neural network for the task we trained it on! Instead, the goal is actually just to learn the weights of the hidden layer\u2013we\u2019ll see that these weights are actually the \u201cword vectors\u201d that we\u2019re trying to learn.\n\nThe network is going to learn the statistics from the number of times each pairing shows up. So, for example, the network is probably going to get many more training samples of (\u201cSoviet\u201d, \u201cUnion\u201d) than it is of (\u201cSoviet\u201d, \u201cSasquatch\u201d). When the training is finished, if you give it the word \u201cSoviet\u201d as input, then it will output a much higher probability for \u201cUnion\u201d or \u201cRussia\u201d than it will for \u201cSasquatch\u201d.\n\n##### Word2Vec - Skip-gram Model\nThe skip-gram word2vec model, for example, takes in pairs (word1, word2) generated by moving a window across text data, and trains a 1-hidden-layer neural network based on the synthetic task of given an input word, giving us a predicted probability distribution of nearby words to the input. A virtual one-hot encoding of words goes through a 'projection layer' to the hidden layer; these projection weights are later interpreted as the word embeddings. So if the hidden layer has 300 neurons, this network will give us 300-dimensional word embeddings.\n\n##### Word2Vec - Continuous-bag-of-words Model\nContinuous-bag-of-words Word2vec is very similar to the skip-gram model. It is also a 1-hidden-layer neural network. The synthetic training task now uses the average of multiple input context words, rather than a single word as in skip-gram, to predict the center word. Again, the projection weights that turn one-hot words into averageable vectors, of the same width as the hidden layer, are interpreted as the word embeddings.\n\nSOURCE: \n- https:\/\/en.wikipedia.org\/wiki\/Word_embedding\n- [An Intuitive Understanding of Word Embeddings: From Count Vectors to Word2Vec](https:\/\/www.analyticsvidhya.com\/blog\/2017\/06\/word-embeddings-count-word2veec\/)\n- [What is word embedding in deep learning?](https:\/\/www.quora.com\/What-is-word-embedding-in-deep-learning)\n- [How to Develop Word Embeddings in Python with Gensim](https:\/\/machinelearningmastery.com\/develop-word-embeddings-python-gensim\/)\n- [Advances in Pre-Training Distributed Word Representations](https:\/\/arxiv.org\/pdf\/1712.09405.pdf)\n- [Vector Representations of Words](https:\/\/www.tensorflow.org\/tutorials\/word2vec)\n- [Word2Vec Tutorial - The Skip-Gram Model](http:\/\/mccormickml.com\/2016\/04\/19\/word2vec-tutorial-the-skip-gram-model\/)","18b3cb3b":"Inferring a Vector\nOne important thing to note is that you can now infer a vector for any piece of text without having to re-train the model by passing a list of words to the model.infer_vector function. This vector can then be compared with other vectors via cosine similarity.","e5c77bcd":"### Explore Embeddings","930c2c9d":"### Save Embeddings","3c4b7839":"**Pretrained Embeddings (GLove)**","64a43532":"Resources to create content:\n- [Word embeddings: exploration, explanation, and exploitation (with code in\u00a0Python)](https:\/\/towardsdatascience.com\/word-embeddings-exploration-explanation-and-exploitation-with-code-in-python-5dac99d5d795)\n- [The amazing power of word\u00a0vectors](https:\/\/blog.acolyer.org\/2016\/04\/21\/the-amazing-power-of-word-vectors\/)\n- [Don\u2019tcount,predict! Asystematiccomparisonof context-countingvs.context-predictingsemanticvectors\n](http:\/\/clic.cimec.unitn.it\/marco\/publications\/acl2014\/baroni-etal-countpredict-acl2014.pdf)\n- [An Intuitive Understanding of Word Embeddings: From Count Vectors to Word2Vec](https:\/\/www.analyticsvidhya.com\/blog\/2017\/06\/word-embeddings-count-word2veec\/)\n- [Taming Text with the SVD](ftp:\/\/ftp.sas.com\/techsup\/download\/EMiner\/TamingTextwiththeSVD.pdf)","6011077e":"### Word Embeddings \n\n###### Author: Alex Sherman (alsherman@deloitte.com) | Vikas Kumar (vikkumar@deloitte.com)\n\n\n##### Agenda\n- Word2Vec\n- cbow\n- skig-gram\n- doc2vec","e8571e5b":"**Cleaning:**\nWe are lemmatizing and removing the stopwords and non-alphabetic characters for each line of dialogue.**","a325e95a":"### `Doc2Vec`\n\nDoc2vec (aka paragraph2vec, aka sentence embeddings) modifies the word2vec algorithm to unsupervised learning of continuous representations for larger blocks of text, such as sentences, paragraphs or entire documents.\n\n##### `Paragraph Vector - Distributed Memory (PV-DM)`\nThis is the Paragraph Vector model analogous to Continuous-bag-of-words Word2vec. The paragraph vectors are obtained by training a neural network on the fake task of inferring a center word based on context words and a context paragraph. A paragraph is a context for all words in the paragraph, and a word in a paragraph can have that paragraph as a context.\n\n##### `Paragraph Vector - Distributed Bag of Words (PV-DBOW)`\nThis is the Paragraph Vector model analogous to Skip-gram Word2vec. The paragraph vectors are obtained by training a neural network on the fake task of predicting a probability distribution of words in a paragraph given a randomly-sampled word from the paragraph.\n\nParagraph Vector, aka gensim Doc2Vec\nThe straightforward approach of averaging each of a text's words' word-vectors creates a quick and crude document-vector that can often be useful. However, Le and Mikolov in 2014 introduced the Paragraph Vector, which usually outperforms such simple-averaging.\n\nSOURCE: \n- [Doc2vec tutorial](https:\/\/rare-technologies.com\/doc2vec-tutorial\/)\n- [Distributed Representations of Sentences and Documents:](https:\/\/cs.stanford.edu\/~quocle\/paragraph_vector.pdf)\n- [Representations for Language: From Word Embeddings to Sentence Meanings\n](https:\/\/nlp.stanford.edu\/manning\/talks\/Simons-Institute-Manning-2017.pdf)\n- [A gentle introduction to\u00a0Doc2Vec](https:\/\/medium.com\/scaleabout\/a-gentle-introduction-to-doc2vec-db3e8c0cce5e)\n- [Gensim Doc2vec Tutorial on the IMDB Sentiment Dataset](https:\/\/github.com\/RaRe-Technologies\/gensim\/blob\/develop\/docs\/notebooks\/doc2vec-IMDB.ipynb)","e9b6c761":"**The parameters:**\n* `min_count` = int - Ignores all words with total absolute frequency lower than this - (2, 100)\n* `window` = int - The maximum distance between the current and predicted word within a sentence. E.g. window words on the left and window words on the left of our target - (2, 10)\n* `size` = int - Dimensionality of the feature vectors. - (50, 300)\n* `sample` = float - The threshold for configuring which higher-frequency words are randomly downsampled. Highly influencial. - (0, 1e-5)\n* `alpha` = float - The initial learning rate - (0.01, 0.05)\n* `min_alpha` = float - Learning rate will linearly drop to min_alpha as training progresses. To set it: alpha - (min_alpha * epochs) ~ 0.00\n* `negative` = int - If > 0, negative sampling will be used, the int for negative specifies how many \"noise words\" should be drown. If set to 0, no negative sampling is used. - (5, 20)\n* `workers` = int - Use these many worker threads to train the model (=faster training with multicore machines)","5d47d0a4":"##### Distributed Representations of Words and Phrases and their Compositionality\n\nThere are three innovations in this second paper:\n\n- Treating common word pairs or phrases as single \u201cwords\u201d in their model.\n- Subsampling frequent words to decrease the number of training examples.\n- Modifying the optimization objective with a technique they called \u201cNegative Sampling\u201d, which causes each training sample to update only a small percentage of the model\u2019s weights.\n\n##### Phrases\nEach pass only looks at combinations of 2 words, but you can run it multiple times to get longer phrases. So, the first pass will pick up the phrase \u201cNew_York\u201d, and then running it again will pick up \u201cNew_York_City\u201d as a combination of \u201cNew_York\u201d and \u201cCity\u201d.\n\n##### Subsampling\nWord2Vec implements a \u201csubsampling\u201d scheme to address this. For each word we encounter in our training text, there is a chance that we will effectively delete it from the text. The probability that we cut the word is related to the word\u2019s frequency.\n\nIf we have a window size of 10, and we remove a specific instance of \u201cthe\u201d from our text:\n\nAs we train on the remaining words, \u201cthe\u201d will not appear in any of their context windows.\nWe\u2019ll have 10 fewer training samples where \u201cthe\u201d is the input word.\n\n##### Negative Sampling \nTraining a neural network means taking a training example and adjusting all of the neuron weights slightly so that it predicts that training sample more accurately. In other words, each training sample will tweak all of the weights in the neural network.\n\nAs we discussed above, the size of our word vocabulary means that our skip-gram neural network has a tremendous number of weights, all of which would be updated slightly by every one of our billions of training samples!\n\nNegative sampling addresses this by having each training sample only modify a small percentage of the weights, rather than all of them. Here\u2019s how it works.\n\nWhen training the network on the word pair (\u201cfox\u201d, \u201cquick\u201d), recall that the \u201clabel\u201d or \u201ccorrect output\u201d of the network is a one-hot vector. That is, for the output neuron corresponding to \u201cquick\u201d to output a 1, and for all of the other thousands of output neurons to output a 0.\n\nWith negative sampling, we are instead going to randomly select just a small number of \u201cnegative\u201d words (let\u2019s say 5) to update the weights for. (In this context, a \u201cnegative\u201d word is one for which we want the network to output a 0 for). We will also still update the weights for our \u201cpositive\u201d word (which is the word \u201cquick\u201d in our current example).\n\n\nSOURCE:\n- [Distributed Representations of Words and Phrases and their Compositionality:](https:\/\/arxiv.org\/pdf\/1310.4546.pdf)","ce70329d":"### word2Vec Hyperparameters\n\n- **size:** (default 100) The number of dimensions of the embedding, e.g. the length of the dense vector to represent each token (word).\n- **window:** (default 5) The maximum distance between a target word and words around the target word.\n- **min_count:** (default 5) The minimum count of words to consider when training the model; words with an occurrence less than this count will be ignored.\n- **sg:** (default 0) The training algorithm, either CBOW (0) or skip gram (1).","ab97cb73":"[YouTube Video- what is a Neural Network?](https:\/\/youtu.be\/aircAruvnKk?t=228)","86094d43":"**Training the model**\nGensim Word2Vec Implementation:\nWe use Gensim implementation of word2vec: https:\/\/radimrehurek.com\/gensim\/models\/word2vec.html","08758939":"### Train Embeddings","684251fe":"##  Doc2Vec","ea189ad9":"##### Cross Entropy\n\nIn a linear model, we have a scalar prediction, thus we can use an evaluation metric like MSE to evaluate the model.\n\nWhen you\u2019re using softmax, however, your output is a vector. One vector is the probability values from the output units. You can also express your data labels as a vector using what\u2019s called one-hot encoding.\n\nThis just means that you have a vector the length of the number of classes, and the label element is marked with a 1 while the other labels are set to 0.\n\n`y=[0,0,0,0,1,0,0,0,0,0]`\n\nAnd our output prediction vector could be something like\n\n`y=[0.047,0.048,0.061,0.07,0.330,0.062,0.001,0.213,0.013,0.150]`\n\nWe want our error to be proportional to how far apart these vectors are. To calculate this distance, we\u2019ll use the cross entropy. Then, our goal when training the network is to make our prediction vectors as close as possible to the label vectors by minimizing the cross entropy.\n\nSOURCE: https:\/\/towardsdatascience.com\/deep-learning-concepts-part-1-ea0b14b234c8","f74fd40c":"Seperate the training of the model in 3 steps:\n\n`Word2Vec()`:\n\nIn this first step, I set up the parameters of the model one-by-one.\nI do not supply the parameter sentences, and therefore leave the model uninitialized, purposefully.\n\n`.build_vocab()`:\n\nHere it builds the vocabulary from a sequence of sentences and thus initialized the model.\nWith the loggings, I can follow the progress and even more important, the effect of min_count and sample on the word corpus. I noticed that these two parameters, and in particular sample, have a great influence over the performance of a model. Displaying both allows for a more accurate and an easier management of their influence.\n\n`.train()`:\nFinally, trains the model.\nThe loggings here are mainly useful for monitoring, making sure that no threads are executed instantaneously."}}