{"cell_type":{"41bfa784":"code","0b36196f":"code","9968888b":"code","c5d1d185":"code","3a22d2b7":"code","df3c8efd":"code","22f0de05":"code","fa7e323c":"code","46d0a744":"code","b71dd8a9":"code","d0f5a57b":"code","a9cc5e38":"code","0a90b427":"code","7f25a265":"code","6c2c5899":"code","b192eb0b":"code","57a7d12c":"code","01d98ce9":"code","df4a9fbc":"code","90c30b0a":"code","08f11846":"code","032bdffd":"code","1c9510e0":"code","8940ac1b":"code","e08ead95":"code","b194c4ad":"code","22289bd9":"code","5ce01c3f":"code","292274c3":"code","dba6049d":"code","34899e86":"code","4ba03822":"code","f680d7a5":"code","f02c3b83":"code","d7ec1e5e":"code","7d7ba289":"code","7070c08c":"code","280a1b27":"markdown","9b1bbdc0":"markdown","99ca55fd":"markdown","18990638":"markdown","f9d9c7ce":"markdown","1fcad208":"markdown","2c1321b0":"markdown"},"source":{"41bfa784":"!pip install lifelines\n!pip install torchtuples\n!pip install pycox","0b36196f":"import numpy as np\nimport pandas as pd\nfrom copy import deepcopy as dc\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nimport lifelines.datasets\nimport torch\nimport torchtuples as tt\nfrom pycox.models import CoxPH, CoxTime\nfrom pycox.models.cox_time import MLPVanillaCoxTime\nfrom pycox.evaluation import EvalSurv\nnp.random.seed(1998)\n_ = torch.manual_seed(1998)","9968888b":"df = lifelines.datasets.load_dd().drop(columns=['politycode', 'cowcode2', 'leaderspellreg'])\ndf.sample(10)","c5d1d185":"df.shape","3a22d2b7":"fig, ax = plt.subplots(1, 1, figsize=(20, 10))\ndf.groupby('un_region_name').boxplot(subplots=False, column='duration', ax=ax, rot=45, whis=(5, 95))\nplt.draw()\nlabels = [l.get_text().split(',')[0][1:] for l in ax.get_xticklabels()]\nax.set_xticklabels(labels, ha='right')\nplt.show()","df3c8efd":"fig, ax = plt.subplots(1, 1, figsize=(20, 10))\nax.set_yscale('log')\ndf.groupby('un_region_name').boxplot(subplots=False, column='duration', ax=ax, rot=45, whis=(5, 95))\nplt.draw()\nlabels = [l.get_text().split(',')[0][1:] for l in ax.get_xticklabels()]\nax.set_xticklabels(labels, ha='right')\nplt.show()","22f0de05":"fig, ax = plt.subplots(1, 1, figsize=(20, 10))\ndf.groupby('regime').boxplot(subplots=False, column='duration', ax=ax, rot=45, whis=(5, 95))\nplt.draw()\nlabels = [l.get_text().split(',')[0][1:] for l in ax.get_xticklabels()]\nax.set_xticklabels(labels, ha='right')\nplt.show()","fa7e323c":"fig, ax = plt.subplots(1, 1, figsize=(20, 10))\nax.set_yscale('log')\ndf.groupby('regime').boxplot(subplots=False, column='duration', ax=ax, rot=45, whis=(5, 95))\nplt.draw()\nlabels = [l.get_text().split(',')[0][1:] for l in ax.get_xticklabels()]\nax.set_xticklabels(labels, ha='right')\nplt.show()","46d0a744":"df.loc[1443]","b71dd8a9":"df.loc[df.duration == df.duration.max()]","d0f5a57b":"df.loc[df.ehead.str.contains('Merkel')]","a9cc5e38":"df2 = pd.get_dummies(df.drop(columns=['ehead']))\ndf2.head()","0a90b427":"fig, ax = plt.subplots(figsize=(20, 10))\nax.scatter(df.start_year, df.duration)\nax.set_xlabel('Start Year')\nax.set_ylabel('Duration')\nplt.show()","7f25a265":"df_train = dc(df2)\ndf_test = df_train.sample(frac=0.2)\ndf_train = df_train.drop(df_test.index)\ndf_val = df_train.sample(frac=0.2)\ndf_train = df_train.drop(df_val.index)","6c2c5899":"df_train.head()","b192eb0b":"df_train.shape","57a7d12c":"ssc = StandardScaler()\nx_train = ssc.fit_transform(df_train.drop(columns=['duration', 'observed'])).astype('float32')\nx_val = ssc.transform(df_val.drop(columns=['duration', 'observed'])).astype('float32')\nx_test = ssc.transform(df_test.drop(columns=['duration', 'observed'])).astype('float32')","01d98ce9":"get_target = lambda df: (df['duration'].values, df['observed'].values)\ny_train = get_target(df_train)\ny_val = get_target(df_val)\ndurations_test, events_test = get_target(df_test)\nval = x_val, y_val","df4a9fbc":"in_features = x_train.shape[1]\nnum_nodes = [32, 32]\nout_features = 1\nbatch_norm = True\ndropout = 0.1\noutput_bias = False\nnet = tt.practical.MLPVanilla(in_features, num_nodes, out_features, batch_norm,\n                              dropout, output_bias=output_bias)","90c30b0a":"model = CoxPH(net, tt.optim.Adam)\nbatch_size = 256\nlrfinder = model.lr_finder(x_train, y_train, batch_size, tolerance=10)\n_ = lrfinder.plot()","08f11846":"lrfinder.get_best_lr()","032bdffd":"model.optimizer.set_lr(0.1)","1c9510e0":"epochs = 512\ncallbacks = [tt.callbacks.EarlyStopping()]\nverbose = True\nlog = model.fit(x_train, y_train, batch_size, epochs, callbacks, verbose,\n                val_data=val, val_batch_size=batch_size)","8940ac1b":"_ = log.plot()","e08ead95":"model.partial_log_likelihood(*val).mean()","b194c4ad":"_ = model.compute_baseline_hazards()\nsurv = model.predict_surv_df(x_test)\nsurv.iloc[:, :5].plot()\nplt.ylabel('S(t | x)')\n_ = plt.xlabel('Time')","22289bd9":"df.loc[df_test.index[:5]]","5ce01c3f":"labtrans = CoxTime.label_transform()\nget_target = lambda df: (df['duration'].values, df['observed'].values)\ny_train = labtrans.fit_transform(*get_target(df_train))\ny_val = labtrans.transform(*get_target(df_val))\ndurations_test, events_test = get_target(df_test)\nval = tt.tuplefy(x_val, y_val)","292274c3":"in_features = x_train.shape[1]\nnum_nodes = [32, 32]\nbatch_norm = True\ndropout = 0.1\nnet = MLPVanillaCoxTime(in_features, num_nodes, batch_norm, dropout)","dba6049d":"model = CoxTime(net, tt.optim.Adam, labtrans=labtrans)\nbatch_size = 256\nlrfinder = model.lr_finder(x_train, y_train, batch_size, tolerance=2)\n_ = lrfinder.plot()","34899e86":"lrfinder.get_best_lr()","4ba03822":"model.optimizer.set_lr(0.1)","f680d7a5":"epochs = 512\ncallbacks = [tt.callbacks.EarlyStopping()]\nverbose = True\nlog = model.fit(x_train, y_train, batch_size, epochs, callbacks, verbose,\n                val_data=val.repeat(10).cat())","f02c3b83":"_ = log.plot()","d7ec1e5e":"model.partial_log_likelihood(*val).mean()","7d7ba289":"_ = model.compute_baseline_hazards()\nsurv = model.predict_surv_df(x_test)\nsurv.iloc[:, :5].plot()\nplt.ylabel('S(t | x)')\n_ = plt.xlabel('Time')","7070c08c":"df.loc[df_test.index[:5]]","280a1b27":"# Non-Proportional Hazards : CoxTime","9b1bbdc0":"# Proportional Hazards : DeepSurv","99ca55fd":"Presentation for Abhishek Thakur Talks on September 17th, 2021.\n\nSee video : https:\/\/www.youtube.com\/watch?v=-vmV4qA0ztQ","18990638":"## Prerequisites","f9d9c7ce":"A first bias in this dataset is that it doesn't feature left-truncation : for example, Franco actually came to power in Spain in January 1938 and thus ruled for 37 years instead of 29 as indicated in the database, due to the left-truncation in 1946.","1fcad208":"# Deep Learning For Survival Analysis","2c1321b0":"## Data Exploration"}}