{"cell_type":{"b821f2c7":"code","15128870":"code","b06bbcfb":"code","60de00b2":"code","4a9efc1d":"code","aca4325e":"code","9f84a205":"code","c8d73bde":"code","98f0994a":"code","7c331452":"code","920f01fd":"code","394bcb11":"code","a11c7fb3":"code","0b01db7c":"code","d8e9867c":"code","23d65683":"code","285459f5":"code","c6d2134e":"code","cfcfdb3a":"code","27e68213":"code","753b4383":"code","da145862":"code","c3c03ae0":"code","7b98ccb5":"code","dd1e2403":"code","f904bc09":"code","03c1d162":"code","268f2cc4":"code","37f69f34":"code","c27ab72d":"code","52618112":"code","d78f1683":"code","3c21a150":"code","b1e2769b":"code","af01d1d7":"code","7fffc1ed":"code","58a9c02b":"markdown","afca54e7":"markdown","abad86a1":"markdown","5cc9e506":"markdown","d730c2c4":"markdown","8143be48":"markdown","87c2c7eb":"markdown"},"source":{"b821f2c7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","15128870":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain.head()","b06bbcfb":"train.dtypes","60de00b2":"train.describe()","4a9efc1d":"train.shape","aca4325e":"sns.barplot(x='Pclass', y='Survived', data=train)\nplt.xlabel('Ticket Class')\nplt.ylabel('Survived')\nplt.show()","9f84a205":"sns.barplot(x='Sex', y='Survived', data=train)\nplt.xlabel('Sex')\nplt.ylabel('Survived')\nplt.show()","c8d73bde":"sns.barplot(x='SibSp', y='Survived', data=train)\nplt.xlabel('Siblings or Spouses')\nplt.ylabel('Survived')\nplt.show()","98f0994a":"sns.barplot(x='Parch', y='Survived', data=train)\nplt.xlabel('Parent or Childerns')\nplt.ylabel('Survived')\nplt.show()","7c331452":"corr = train.corr()\n\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)","920f01fd":"def checkNull(df):\n    total = df.isnull().sum()\n    percent = (total \/ df.isnull().count()) * 100\n    null_df = pd.concat([total, percent], keys=['Sum', 'Percent'], axis=1)\n    return null_df","394bcb11":"checkNull(train)","a11c7fb3":"checkNull(test)","0b01db7c":"train['Embarked'].fillna(train['Embarked'].mode()[0], inplace=True)\ntrain['Cabin'].fillna(train['Cabin'].mode()[0], inplace=True)\ntrain['Age'].fillna(0, inplace=True)\ntrain['Title'] = train['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\ntrain['Title'].unique()","d8e9867c":"test['Age'].fillna(0, inplace=True)\ntest['Cabin'].fillna(test['Cabin'].mode()[0], inplace=True)\ntest.dropna(inplace=True)\ntest['Title'] = train['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\ntest['Title'].unique()","23d65683":"checkNull(train)","285459f5":"checkNull(test)","c6d2134e":"def changeTitle(df):\n    df['Title'] = df['Title'].replace(['Lady', 'Capt', 'Col',\n    'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\n    df['Title'] = df['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\n    df['Title'] = df['Title'].replace('Mlle', 'Miss')\n    df['Title'] = df['Title'].replace('Ms', 'Miss')\n    df['Title'] = df['Title'].replace('Mme', 'Mrs')\n    \n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Royal\": 5, \"Rare\": 6}\n    df['Title'] = df['Title'].map(title_mapping)\n    df['Title'] = df['Title'].fillna(0)\n    df['Title'] = df['Title'].astype('int64')","cfcfdb3a":"changeTitle(train)\nchangeTitle(test)","27e68213":"sex_mapping = {'male':1, 'female':2}\ntrain['Sex'] = train['Sex'].map(sex_mapping)\ntest['Sex'] = test['Sex'].map(sex_mapping)","753b4383":"age_bins = [-1, 0, 3, 14, 18, 30, 80]\nage_labels = ['Unknown', 'Infant', 'Childern', 'Teenagers', 'Adult', 'Old']\ntrain['AgeGroup'] = pd.cut(train['Age'], age_bins, labels=age_labels)\ntest['AgeGroup'] = pd.cut(test['Age'], age_bins, labels=age_labels)","da145862":"age_mapping = {'Unknown': 0, 'Infant': 1, 'Childern': 2, 'Teenagers': 3, 'Adult': 4, 'Old': 5}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)","c3c03ae0":"emb_mapping = {'S': 0, 'C': 1, 'Q': 2}\ntrain['Embarked'] = train['Embarked'].map(emb_mapping)\ntest['Embarked'] = test['Embarked'].map(emb_mapping)","7b98ccb5":"train['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])","dd1e2403":"train.drop(['Name', 'Age', 'Ticket', 'Fare', 'Cabin'], axis=1, inplace=True)\ntest.drop(['Name', 'Age', 'Ticket', 'Fare', 'Cabin'], axis=1, inplace=True)","f904bc09":"train.head()","03c1d162":"test.head()","268f2cc4":"x = train.drop('Survived', axis=1)\ny = train['Survived']","37f69f34":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1, stratify=y)\n\nks = list(range(1,51))\nk = 0\nweight_options = [\"uniform\", \"distance\"]\nparam_grid = dict(n_neighbors = ks, weights = weight_options)\n\nknn = KNeighborsClassifier()\ngrid = GridSearchCV(knn, param_grid, cv = 10, scoring = 'accuracy')\ngrid.fit(x_train,y_train)\n\nknn = KNeighborsClassifier(grid.best_params_['n_neighbors'])","c27ab72d":"knn.fit(x_train,y_train)\nyhat = knn.predict(x_test)\nkscore = knn.score(x_test, y_test)\nkscore","52618112":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n\ngaussian = GaussianNB()\ngaussian.fit(x_train,y_train)\nyhat = gaussian.predict(x_test)\ngscore = gaussian.score(x_test,y_test)\ngscore","d78f1683":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\nyhat = lr.predict(x_test)\nlscore = lr.score(x_test, y_test)\nlscore","3c21a150":"from sklearn.ensemble import RandomForestClassifier\n\nforest = RandomForestClassifier()\nforest.fit(x_train,y_train)\nyhat = forest.predict(x_test)\nfscore = forest.score(x_test, y_test)\nfscore","b1e2769b":"models = pd.DataFrame({\n    'Model': ['KNN', 'Gaussian Distribution', 'Logistic Regression', 'Random Forest'],\n    'Score': [kscore, gscore, lscore, fscore]})\nmodels.sort_values(by='Score', ascending=False)","af01d1d7":"yhat = forest.predict(test)\n","7fffc1ed":"submission = pd.DataFrame({ 'PassengerId' : test['PassengerId'], 'Survived': yhat })\nsubmission.to_csv('submission.csv', index=False)","58a9c02b":"# Data Visualization","afca54e7":"**3. Logistic Regression**","abad86a1":"# Prediction & Evaluation","5cc9e506":"# Data Cleaning","d730c2c4":"**1. KNN**","8143be48":"**2. Gaussian Distribution**","87c2c7eb":"**4. Random Forest Classifier**"}}