{"cell_type":{"fac6fed6":"code","66f50a35":"code","838d1dab":"code","906b7430":"code","f31c0077":"code","6a6513c6":"code","f9fa425b":"code","e504756a":"code","8b76ece7":"code","ad4a187b":"code","ea6f0861":"code","ef7f2804":"code","cde69a24":"code","623104a9":"code","91c61ac6":"code","74b19ed3":"code","3324433f":"code","570b6ee3":"code","e3ac8370":"code","56b097d4":"code","19a930a0":"code","4da0b6af":"code","8513b4e4":"code","5f60e994":"markdown"},"source":{"fac6fed6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66f50a35":"import cv2\nimport os \nfrom PIL import Image\nimages = []       \nlabels = [] \ntrain_path = '..\/input\/fruit-images-for-object-detection\/train_zip\/train'\nfor filename in os.listdir('..\/input\/fruit-images-for-object-detection\/train_zip\/train'):\n    if filename.split('.')[1] == 'jpg':\n        img = cv2.imread(os.path.join(train_path,filename))\n        ary=Image.fromarray(img,'RGB')\n        r=ary.resize((50,50))\n        labels.append(filename.split('_')[0])\n        images.append(np.array(r))","838d1dab":"np.unique(labels)","906b7430":"from sklearn.preprocessing import LabelEncoder\nla=LabelEncoder()\nlabels=pd.DataFrame(labels)\nlabels=la.fit_transform(labels[0])\nlabels","f31c0077":"import matplotlib.pyplot as plt\nfigure=plt.figure(figsize=(15,10))\nax=figure.add_subplot(121)\nax.imshow(images[0])\nbx=figure.add_subplot(122)\nbx.imshow(images[60])\nplt.show()","6a6513c6":"images=np.array(images)\nnp.save(\"image\",images)\nnp.save(\"labels\",labels)","f9fa425b":"image=np.load(\"image.npy\",allow_pickle=True)\nlabels=np.load(\"labels.npy\",allow_pickle=True)","e504756a":"s=np.arange(image.shape[0])\nnp.random.shuffle(s)\nimage=image[s]\nlabels=labels[s]","8b76ece7":"num_classes=len(np.unique(labels))\nlen_data=len(image)","ad4a187b":"x_train,x_test=image[(int)(0.1*len_data):],image[:(int)(0.1*len_data)]","ea6f0861":"y_train,y_test=labels[(int)(0.1*len_data):],labels[:(int)(0.1*len_data)]","ef7f2804":"import keras\ny_train=keras.utils.to_categorical(y_train,num_classes)\ny_test=keras.utils.to_categorical(y_test,num_classes)","cde69a24":"from keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,MaxPooling2D,Dropout,Flatten,MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.layers import Activation, Convolution2D, Dropout, Conv2D,AveragePooling2D, BatchNormalization,Flatten,GlobalAveragePooling2D\nfrom keras import layers\nfrom keras.regularizers import l2\nfrom keras.callbacks import ModelCheckpoint,ReduceLROnPlateau","623104a9":"l2_reg=0.001\nopt=Adam(lr=0.001)","91c61ac6":"model = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(2,2), input_shape=(50,50, 3), activation='relu',kernel_regularizer=l2(l2_reg)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters=64, kernel_size=(2,2), activation='relu',kernel_regularizer=l2(l2_reg)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters=128, kernel_size=(2,2), activation='relu',kernel_regularizer=l2(l2_reg)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.1))\n\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(4, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n\nmodel.summary()","74b19ed3":"filepath=\"weights.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\nhistory=model.fit(x_train,y_train,batch_size=128,epochs=110,verbose=1,validation_split=0.33,callbacks=[checkpoint])","3324433f":"scores = model.evaluate(x_test, y_test, verbose=1)\nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])","570b6ee3":"figure=plt.figure(figsize=(15,15))\nax=figure.add_subplot(121)\nax.plot(history.history['accuracy'])\nax.plot(history.history['val_accuracy'])\nax.legend(['Training Accuracy','Val Accuracy'])\nbx=figure.add_subplot(122)\nbx.plot(history.history['loss'])\nbx.plot(history.history['val_loss'])\nbx.legend(['Training Loss','Val Loss'])","e3ac8370":"test_path = '..\/input\/fruit-images-for-object-detection\/test_zip\/test'\nt_labels=[]\nt_images=[]\nfor filename in os.listdir('..\/input\/fruit-images-for-object-detection\/test_zip\/test'):\n    if filename.split('.')[1] == 'jpg':\n        img = cv2.imread(os.path.join(test_path,filename))\n        ary=Image.fromarray(img,'RGB')\n        r=ary.resize((50,50))\n        t_labels.append(filename.split('_')[0])\n        t_images.append(np.array(r))","56b097d4":"t_images=np.array(t_images)\nnp.save(\"t_image\",t_images)\nt_image=np.load(\"image.npy\",allow_pickle=True)","19a930a0":"pred=np.argmax(model.predict(t_image),axis=1)\nprediction = la.inverse_transform(pred)","4da0b6af":"t_image=np.expand_dims(t_images[10],axis=0)\npred_t=np.argmax(model.predict(t_image),axis=1)\nprediction_t = la.inverse_transform(pred_t)","8513b4e4":"print(prediction_t[0])\nplt.imshow(t_images[10])","5f60e994":"# TEST"}}