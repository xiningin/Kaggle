{"cell_type":{"a0d910d0":"code","bae269e1":"code","3464595b":"code","633255d9":"code","b01b1a92":"code","82357c06":"code","6060d66d":"code","0d13f9c8":"code","483d5627":"code","2299283f":"code","47d1dc20":"code","8356f14b":"code","f11bb004":"code","f09d68ce":"code","911c257b":"code","7183b2c4":"code","9a771522":"code","ded24b68":"code","a2e7e249":"code","0f9bc0c2":"code","38b159ad":"code","bda3a9b2":"code","5bae5eec":"code","3e332956":"code","463c8207":"code","6bcd7185":"code","16389b13":"code","17913855":"code","3d54a143":"code","c1be74c7":"code","ecd87deb":"code","a491bb93":"code","86d316c2":"code","d3de471d":"code","802805b1":"code","63a42e0b":"code","600970de":"code","91d2913f":"code","e07a1797":"markdown"},"source":{"a0d910d0":"# import modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport operator\n\n%matplotlib inline\n\n# load data\nfrom subprocess import check_output\ndata = pd.read_csv('..\/input\/un-general-debates.csv')","bae269e1":"print('data shape:', data.shape)\ndata.head()","3464595b":"# convert text data to lower case (for easier analysis)\ndata['text'] = data['text'].str.lower()\n\n# remove all data before 1971 -- looks like it might be incomplete\ndata = data[data['year'] > 1970]","633255d9":"# create features from meta text data\ndata['char_count'] = data['text'].str.len()\ndata['words'] = data['text'].str.split(' ')\ndata['sentences'] = data['text'].str.split('.')\ndata['word_count'] = data['words'].str.len()\ndata['sentence_count'] = data['sentences'].str.len()\ndata['word_length'] = data['char_count'] \/ data['word_count']\ndata['sentence_length'] = data['word_count'] \/ data['sentence_count']","b01b1a92":"# create list of topics that UN member nations might discuss\ntopics = [' amnesty', ' universal jurisdiction', ' transitional justice', ' civil war', ' truth commission', 'intervention', ' communism', 'communist', ' evil', ' unjust',\n          ' peacekeeping', ' trial', 'justice cascade', ' truth seeking',' invasion', ' reparations', ' extradition', ' memorial',' dictatorship', ' fascist', ' fascism', ' injustice',\n          ' prosecution', ' rule of law',' vetting', ' lustration', ' disarmament', ' demobilization', ' reintegration', ' strength', ' weakness', ' strongman', ' dictator',\n          ' forgiveness', ' institutional reform',' reconciliation', ' genocide', ' hague', ' war crime', ' war crimes',' human rights', 'TRC', ' amnesties', ' democracy', ' democratic',\n          ' crime against humanity', ' immunity', ' sovereign immunity',' sovereign', ' exile', ' restorative', ' tribunal', 'Rome Statute', ' illegal', ' international law',\n          ' justice', ' victims', ' perpetrators', ' resistance', ' military intervention',' non-intervention', ' isolationist', 'due process', ' sovereignty', ' democratization',\n          ' isolationism', ' internationalist', ' tolerance', ' nuremburg',' sanctions',' crimes against humanity',' sanction', ' backslide', ' backsliding']\n\ndictionary = {}\n\nfor i in topics:    \n    dictionary[i] = data['year'][data['text'].str.contains(i)].count() \/ len(data) * 100\n\nsorted_dictionary = sorted(dictionary.items(), key=operator.itemgetter(1), reverse=True)\n\nlabels = [i[0] for i in sorted_dictionary]\nvalues = [i[1] for i in sorted_dictionary]\nxs = np.arange(len(labels))\n\nwidth = .85\nplt.figure(figsize=(18, 9))\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.tick_params(axis='both', which='minor', labelsize=12)\nplt.xticks(rotation=80)\nplt.xlabel('Topics')\nplt.ylabel('% of Debates Mentioned')\nplt.title('Bar Plot of Topics Mentioned')\n\nplt.bar(xs, values, width, align='center')\nplt.xticks(xs, labels)\nplt.show()","82357c06":"# # Percentage of time mentioned in a debate\nsorted_dictionary","6060d66d":"# # UN Members\n#data['country'].unique()","0d13f9c8":"# count number of debates in which a nation participates\ncountries = data['year'].groupby(data['country']).count()\ncountries = pd.DataFrame(countries.reset_index(drop=False))\ncountries.columns = ['country', 'num speeches']\n\nprint('Most Vocal Member Nations')\nprint('max number of speeches given:', countries['num speeches'].max())\nprint(countries[countries['num speeches'] == countries['num speeches'].max()].country.unique())\nprint()\n\ncountries = countries.sort_values(by='num speeches')\nprint('Least Vocal Member Nations')\nprint('min number of speeches given:', countries['num speeches'].min())\nprint(countries.country[:10].unique().tolist())","483d5627":"# Plot a horizontal bar graph displaying the frequency of a given topic by country\ndef freqMentioned (df, country_list, topic_list, colors):\n    data = df.loc[df['country'].isin(country_list)]\n\n    for i in topic_list:\n        data[i] = data['text'].str.contains(i)\n        data[i].loc[data[i] == False] = np.nan\n\n    country = country_list[0]\n    data_out = pd.DataFrame(data.loc[data['country'] == country].count())\n    data_out = (data_out.T)[topic_list]\n    \n    # sort the columns by summed occurence in countries specified\n    countries = country_list.copy()\n    countries.remove(country)\n\n    for i in countries:\n        a = pd.DataFrame(data.loc[data['country'] == i].count())\n        a = (a.T)[topic_list].copy()\n        data_out = pd.concat([data_out, a], axis=0)\n\n    dictionary = {}\n    \n    for i in topic_list:\n        dictionary[i] = data_out[i].sum()\n        \n    sorted_dictionary = sorted(dictionary.items(), key=operator.itemgetter(1), reverse=True)\n    data_out = data_out[[i[0] for i in sorted_dictionary]]\n    data_out.index = country_list\n    data_out.T.plot(kind=\"barh\", width=.6, stacked=True, figsize = (10, len(topic_list)\/3), color=colors).legend(bbox_to_anchor=(1, 1))\n    \n    return data_out","2299283f":"# Oceania + Asia\noceania = ['AUS', 'NZL', 'CHN','JPN','VNM','KOR','PRK', 'IDN', 'SGP','MAL','TMP','THA']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet', 'tomato', 'skyblue']\nfreqMentioned(data, oceania, topics, colors)","47d1dc20":"# BRICS + Regional Powers\nbrics = ['BRA','IND','RUS','CHN']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet', 'tomato', 'olive', 'crimson']\nfreqMentioned(data, brics, topics, colors)","8356f14b":"# Permanent Members of the UN Security Council\nsec_council = ['USA', 'RUS', 'GBR', 'FRA', 'CHN']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'r']\nfreqMentioned(data, sec_council, topics, colors)","f11bb004":"# Eastern Bloc\neastern_bloc = ['POL', 'RUS', 'HUN', 'EST', 'LVA', 'ALB', 'YUG', 'ROU', 'CSK', 'DDR']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet']\nfreqMentioned(data, eastern_bloc, topics, colors)","f09d68ce":"# South Korea v. North Korea\ngermanys = ['KOR','PRK']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet', 'tomato', 'skyblue']\nfreqMentioned(data, germanys, topics, colors)","911c257b":"# West and East Germany\ngermanys = ['DEU','DDR']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet', 'tomato', 'skyblue']\nfreqMentioned(data, germanys, topics, colors)","7183b2c4":"# NATO Countries\nnato = ['CAN', 'GBR', 'FRA', 'DNK', 'BEL', 'ISL', 'ITA', 'LUX', 'NLD', 'PRT', 'TUR', 'GRC', 'USA', 'DEU']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet', 'tomato', 'skyblue']\nfreqMentioned(data, nato, topics, colors)","9a771522":"# Permanent Members of the UN Security Council... and the Netherlands\n# clearly the Netherlands likes to talk about things they host\nsec_council = ['USA', 'RUS', 'GBR', 'FRA', 'CHN', 'NLD']\n\ntopics = [' international criminal court', ' international court of justice', ' hague']\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet', 'tomato', 'skyblue']\nfreqMentioned(data, sec_council, topics, colors)","ded24b68":"# NATO  v. Eastern Bloc Countries on TJ\nnato_eastern= ['CAN', 'GBR', 'FRA', 'DNK', 'BEL', 'ISL', 'ITA', 'LUX', 'NLD', 'PRT', 'TUR', 'GRC', 'USA', 'DEU', 'POL', 'RUS', 'HUN', 'EST', 'LVA', 'ALB', 'YUG', 'ROU', 'DDR', 'CSK']\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b','b', 'b', 'b', 'b', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r']\nfreqMentioned(data, nato_eastern, topics, colors)","a2e7e249":"# Latin America\nlatin_america = ['COL', 'ECU', 'ARG', 'CHL', 'VEN', 'BOL', 'BRA', 'MEX', 'PAN', 'URY', 'SLV', 'HND', 'PER', 'NIC',]\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet', 'tomato', 'olive', 'crimson']\nfreqMentioned(data, latin_america, topics, colors)","0f9bc0c2":"# Middle East + USA on TJ\ncountries = ['USA', 'ISR', 'IRQ', 'EGY', 'PSE', 'JOR', 'LBN', 'SYR']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'navy', 'r', 'green', 'black', 'orange', 'purple', 'grey']\nfreqMentioned(data, countries, topics, colors)","38b159ad":"# States With Open ICC Investigations\/Other TJ Mechanisms\noutliers = ['COD','UGA','SDN','KEN','LBY','CIV','MLI','CAF','BDI','GEO', 'SLE', 'RWA']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet', 'tomato', 'olive', 'crimson']\nfreqMentioned(data, outliers, topics, colors)","bda3a9b2":"# Historic Outliers\noutliers = ['PRK','CUB','IRN','IRQ','VEN','SOM','COD','ZAF','ZWE']\n\ntopics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ncolors = ['dodgerblue', 'orange', 'navy', 'lightseagreen', 'yellow', 'green', 'blue', 'maroon', 'purple', 'peru','violet', 'tomato', 'olive', 'crimson']\nfreqMentioned(data, outliers, topics, colors)","5bae5eec":"topics = []\nfor i in sorted_dictionary:\n    if i[1] > 1:\n        topics.append(i[0])\n\ndef textFreq(df, topic_list):\n    data = df.copy()\n    for i in topic_list:\n        data[i] = data['text'].apply(lambda x: x.count(i))\n    return data\n\ndef GroupFreq(df, topic_list, grouping_column):\n    topic_freq = textFreq(df, topic_list)\n    topic_list.append(grouping_column)\n    topic_freq = topic_freq[topic_list]\n    topic_freq_col = topic_freq.groupby(topic_freq[grouping_column]).sum()\n    return topic_freq_col\n\ntopic_freq_county = GroupFreq(data, topics, 'country')\nplt.matshow(topic_freq_county.corr())\ntopic_freq_year = GroupFreq(data, topics, 'year')","3e332956":"topics_keep = []\nfor i in topic_freq_year.columns:\n    if topic_freq_year[i].sum() > 500:\n        topics_keep.append(i)\n\ntopic_freq_year[topics_keep].plot()","463c8207":"topic_freq_year[[ ' war crime', ' reconciliation', ' invasion', ' tolerance']].plot()","6bcd7185":"topic_freq_year[[ ' amnesty',' trial',' rule of law' ]].plot()","16389b13":"topic_freq_year[[ ' victims', ' perpetrators', ]].plot()","17913855":"topic_freq_year[[ ' genocide', ' war crime',' crimes against humanity', ' military intervention']].plot()","3d54a143":"topic_freq_year[[ ' amnesty', ' civil war', ' trial']].plot()","c1be74c7":"topic_freq_year[[ ' justice', ' sovereign', ' rule of law', ' human rights']].plot()","ecd87deb":"topic_freq_year[[ ' evil', ' unjust', ' injustice']].plot()","a491bb93":"topic_freq_year[[ ' crime against humanity', ' crimes against humanity']].plot()","86d316c2":"topic_freq_year[[ ' strength', ' weakness']].plot()","d3de471d":"topic_freq_year[[ ' communism', 'communist']].plot()","802805b1":"topic_freq_year[[ ' fascism', ' fascist', ' dictator']].plot()","63a42e0b":"topic_freq_year[[ ' democracy', ' democratization', ' democratic']].plot()","600970de":"# # Top five advocate countries per cause\nfor i in topic_freq_county.columns:\n    topic_freq_county = topic_freq_county.sort_values(by=i, ascending=False)\n    print(i)\n    print(topic_freq_county.index.tolist()[:5])\n    print()","91d2913f":"# # Top seven priorities for each member country\ntopic_freq_county = topic_freq_county.sort_index()\ntopic_freq_county = topic_freq_county.T\n\nfor i in topic_freq_county.columns:\n    topic_freq_county = topic_freq_county.sort_values(by=i, ascending=False)\n    print(i)\n    print(topic_freq_county.index.tolist()[:7])\n    print()","e07a1797":"Drawing generously from the notebook from which this one is forked, I used this as my primary visualization and research tool for a machine learning class. I integrated human rights\/transitional justice vocabulary into the searchable terms of this dataset, and went from there! It was really interesting to play around with country combos and see the specific clustering of countries for different terms, which tended to line up rather nicely with their own sociopolitical histories. Further work that could be done with this: usage of specific terms over time for individual countries\/blocs -- I didn't have time to get to that!\n\n**Update** I've added a few additional ideological\/fun words to see what pops up. "}}