{"cell_type":{"81b0c3ed":"code","f63d8ad8":"code","2f434e69":"code","b8d6cdfa":"code","cca991a7":"code","c8327a2e":"code","8fb27abe":"code","7c110272":"code","e58f140d":"code","961a8e6d":"code","68dc174b":"code","c2e782c8":"code","c644a24d":"code","d2b1836b":"code","921100e8":"code","60b052fe":"code","09140274":"code","f57da8f9":"code","5da4b4d1":"code","7a225a06":"code","4aac39b5":"code","0d0ad2b6":"code","21e6b4c4":"code","759ff947":"code","7749fa40":"code","2112237a":"code","35cf1ca4":"code","9d850ded":"code","e9f34714":"code","0d32b8c8":"code","847ff7b7":"code","57663bcb":"code","d4358ffe":"code","d9080fcf":"code","50976406":"code","bc3dfe91":"code","57a6ae32":"code","8e6d6ec6":"markdown","5eeebca3":"markdown","4709bd01":"markdown","0151eb3d":"markdown","d89b5810":"markdown","ec35c8e6":"markdown","8a1982cd":"markdown","c30409c2":"markdown","7b215e76":"markdown","15289df0":"markdown","5a2bd6c4":"markdown","dd26ae57":"markdown","8ff66a0c":"markdown","a1d0752c":"markdown","ce6051ee":"markdown","76ff15dd":"markdown","936e9ef6":"markdown","b4c4a8e2":"markdown","b64ccfc4":"markdown","f654751c":"markdown","05b86943":"markdown","5a2b9f7b":"markdown","49894d9a":"markdown"},"source":{"81b0c3ed":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport cufflinks as cf\ncf.go_offline()\n\n%matplotlib inline","f63d8ad8":"dataset = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndataset.head()","2f434e69":"dataset.info()","b8d6cdfa":"dataset.describe()","cca991a7":"display(dataset['target'].value_counts())\nprint(\"\\n\")\nsns.countplot(dataset['target'])","c8327a2e":"from sklearn.manifold import TSNE\n\ntsne = TSNE(learning_rate=100)\n\ntsne_features = tsne.fit_transform(dataset)\n\ndataset['X'] = tsne_features[:,0]\ndataset['Y'] = tsne_features[:,1]","8fb27abe":"#f, axes = plt.subplots(2, 2, figsize=(25, 20), sharex=True)\n#sns.despine(left=True)\nfig = plt.figure(figsize=(25,30))\n\nax1 = fig.add_subplot(421)\nsns.scatterplot(data=dataset, x='X', y='Y', hue='target',ax=ax1, s=120)\nax1.set_title('Target', fontsize=30)\nax1.set_xticks([])\nax1.set_yticks([])\n\nax2 = fig.add_subplot(422)\nsns.scatterplot(data=dataset, x='X', y='Y', hue='cp', palette=\"viridis\", ax=ax2, s=120)\nax2.set_title('Chest Pain', fontsize=30)\nax2.set_xticks([])\nax2.set_yticks([])\n\nax3 = fig.add_subplot(423)\nsns.scatterplot(data=dataset, x='X', y='Y', hue='restecg', palette=\"viridis\", ax=ax3, s=120)\nax3.set_title('Rest ECG', fontsize=30)\nax3.set_xticks([])\nax3.set_yticks([])\n\nax4 = fig.add_subplot(424)\nsns.scatterplot(data=dataset, x='X', y='Y', hue='thalach', palette=\"hsv\", ax=ax4, s=120)\nax4.set_title('Max Heart Rate', fontsize=30)\nax4.set_xticks([])\nax4.set_yticks([])\n\nax5 = fig.add_subplot(425)\nsns.scatterplot(data=dataset, x='X', y='Y', hue='chol', palette=\"hsv\", ax=ax5, s=120)\nax5.set_title('Cholestrol', fontsize=30)\nax5.set_xticks([])\nax5.set_yticks([])\nplt.rc('figure', titlesize=40)\nplt.rc('legend', fontsize=20)\n\nax5 = fig.add_subplot(426)\nsns.scatterplot(data=dataset, x='X', y='Y', hue='oldpeak', palette=\"twilight\", ax=ax5, s=120)\nax5.set_title('Oldpeak', fontsize=30)\nax5.set_xticks([])\nax5.set_yticks([])\nplt.rc('figure', titlesize=40)\nplt.rc('legend', fontsize=20) \n\nax6 = fig.add_subplot(427)\nsns.scatterplot(data=dataset, x='X', y='Y', hue='fbs', ax=ax6, s=120)\nax6.set_title('Fasting Blood Sugar', fontsize=30)\nax6.set_xticks([])\nax6.set_yticks([])\nplt.rc('figure', titlesize=40)\nplt.rc('legend', fontsize=20) \n\nax7 = fig.add_subplot(428)\nsns.scatterplot(data=dataset, x='X', y='Y', hue='trestbps', palette=\"hsv\",ax=ax7, s=120)\nax7.set_title('Resting Blood Pressure', fontsize=30)\nax7.set_xticks([])\nax7.set_yticks([])\n#plt.tight_layout(h_pad=25)","7c110272":"dataset.columns = ['age', 'sex', 'chest_pain', 'rest_blood_pressure', 'cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate',\n       'exercise_induced_angina', 'st_depression', 'st_slope', 'num_major_vessels', 'thalassemia', 'target','X','Y']","e58f140d":"dataset['sex'][dataset['sex'] == 0] = 'female'\ndataset['sex'][dataset['sex'] == 1] = 'male'\n\ndataset['chest_pain'][dataset['chest_pain'] == 1] = 'typical angina'\ndataset['chest_pain'][dataset['chest_pain'] == 2] = 'atypical angina'\ndataset['chest_pain'][dataset['chest_pain'] == 3] = 'non-anginal pain'\n\ndataset['fasting_blood_sugar'][dataset['fasting_blood_sugar'] == 0] = 'low'\ndataset['fasting_blood_sugar'][dataset['fasting_blood_sugar'] == 1] = 'high'\n\ndataset['rest_ecg'][dataset['rest_ecg'] == 0] = 'normal'\ndataset['rest_ecg'][dataset['rest_ecg'] == 1] = 'ST-T wave abnormality'\ndataset['rest_ecg'][dataset['rest_ecg'] == 2] = 'left ventricular hypertrophy'\n\ndataset['st_slope'][dataset['st_slope'] == 1] = 'upsloping'\ndataset['st_slope'][dataset['st_slope'] == 2] = 'flat'\ndataset['st_slope'][dataset['st_slope'] == 3] = 'downsloping'\n\ndataset['thalassemia'][dataset['thalassemia'] == 1] = 'normal'\ndataset['thalassemia'][dataset['thalassemia'] == 2] = 'fixed defect'\ndataset['thalassemia'][dataset['thalassemia'] == 3] = 'reversable defect'","961a8e6d":"dataset.head()","68dc174b":"fig = plt.figure(figsize=(25,15))\n\nax1 = fig.add_subplot(221)\nsns.swarmplot(data=dataset, x='rest_ecg', y='age', hue='target',ax=ax1, s=10)\nax1.set_title('Rest ECG', fontsize=30)\n\nax2 = fig.add_subplot(222)\nsns.swarmplot(data=dataset, x='chest_pain', y='age', hue='target',ax=ax2, s=10)\nax2.set_title('Chest Pain', fontsize=30)\n\nax3 = fig.add_subplot(223)\nsns.swarmplot(data=dataset, x='thalassemia', y='age', hue='target',ax=ax3, s=10)\nax3.set_title('Thal', fontsize=30)\n\nax4 = fig.add_subplot(224)\nsns.swarmplot(data=dataset, x='num_major_vessels', y='age', hue='target',ax=ax4, s=10)\nax4.set_title('No.of major Vessels', fontsize=30)","c2e782c8":"dataset = pd.get_dummies(dataset, drop_first=True)\n\ndataset.head()","c644a24d":"from sklearn.model_selection import train_test_split\n\nX = dataset.drop(['target','X','Y'], axis=1)\ny = dataset['target']\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=10, stratify=y)","d2b1836b":"import itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","921100e8":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n\nrf = RandomForestClassifier()\n\nparams = {\n                'max_depth' : [1,2,3,4,5,6],\n               'min_samples_leaf' : [0.01,0.02,0.04,0.06],\n                'max_features' : [0.1,0.2,0.4,0.8],\n                'n_estimators' : [100,150,200,250,300]\n                \n        }\n\nrf_cv = GridSearchCV(estimator=rf,\n                          param_grid=params,\n                       ##    n_iter=100,\n                          cv=10,\n                          scoring='accuracy',\n                          n_jobs=-1,\n                           verbose=3\n                          )","60b052fe":"rf_cv.fit(X_train, y_train)\n\ny_pred = rf_cv.predict(X_test)\ny_pred_proba = rf_cv.predict_proba(X_test)[:,1]","09140274":"rf_best_est = rf_cv.best_estimator_\n\nrf_cv.best_params_","f57da8f9":"from sklearn.metrics import roc_curve, auc\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\n\nfig, ax = plt.subplots()\nax.plot(fpr, tpr)\nax.plot([0, 1], [0, 1], transform=ax.transAxes, ls=\"--\", c=\".3\")\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.rcParams['font.size'] = 12\nplt.title('ROC curve for diabetes classifier')\nplt.xlabel('False Positive Rate (1 - Specificity)')\nplt.ylabel('True Positive Rate (Sensitivity)')\nplt.grid(True)","5da4b4d1":"auc(fpr, tpr)","7a225a06":"from sklearn.metrics import roc_auc_score, classification_report, confusion_matrix\nprint(\"ROC_AUC score\")\nprint(roc_auc_score(y_test, y_pred))\n\nprint(\"\\nTraining Score\")\nprint(rf_best_est.score(X_train, y_train))\n\nprint(\"\\nTesting Score\")\nprint(rf_best_est.score(X_test, y_test))\n\nprint(\"\\n\")\nprint(confusion_matrix(y_test, y_pred))\nprint(\"\\n\")\nprint(classification_report(y_test, y_pred))\n\n","4aac39b5":"cnf_matrix = confusion_matrix(y_test, y_pred)\nclass_names = ['-VE','+VE']\nnp.set_printoptions(precision=2)\n\n\nplt.figure(figsize=(8,6))\nplot_confusion_matrix(cnf_matrix, classes=class_names, normalize=True, \n                      title='Normalized confusion matrix')","0d0ad2b6":"# Get feature importance\nselected_features = X.columns.to_list()\nfeature_importance = pd.DataFrame(selected_features, columns = [\"Feature Label\"])\nfeature_importance[\"Feature Importance\"] = rf_best_est.feature_importances_\n\n# Sort by feature importance\nfeature_importance = feature_importance.sort_values(by=\"Feature Importance\", ascending=False)\n\n# Set graph style\nsns.set(font_scale = 1.75)\nsns.set_style({\"axes.facecolor\": \"1.0\", \"axes.edgecolor\": \"0.85\", \"grid.color\": \"0.85\",\n               \"grid.linestyle\": \"-\", 'axes.labelcolor': '0.4', \"xtick.color\": \"0.4\",\n               'ytick.color': '0.4'})\n\n# Set figure size and create barplot\nf, ax = plt.subplots(figsize=(12, 9))\nsns.barplot(x = \"Feature Importance\", y = \"Feature Label\",\n            palette = reversed(sns.color_palette('YlOrRd', 15)),  data = feature_importance)\n\n# Generate a bolded horizontal line at y = 0\nax.axvline(x = 0, color = 'black', linewidth = 4, alpha = .7)\n\n# Turn frame off\nax.set_frame_on(False)\n\n# Tight layout\nplt.tight_layout()\n\n# Save Figure\nplt.savefig(\"feature_importance.png\", dpi = 1080)","21e6b4c4":"import eli5 \nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(rf_best_est, random_state=105).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X.columns.to_list())","759ff947":"from sklearn.tree import export_graphviz\n\nestimator = rf_best_est.estimators_[18]\nexport_graphviz(estimator, out_file='tree.dot', \n                feature_names = selected_features,\n                class_names = ['no disease','disease'],\n                rounded = True, proportion = False, \n                precision = 2, filled = True)\n\n# Convert to png using system command (requires Graphviz)\nfrom subprocess import call\ncall(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])\n\n# Display in jupyter notebook\nfrom IPython.display import Image\nImage(filename = 'tree.png')","7749fa40":"from pdpbox import pdp, get_dataset, info_plots\n\nfeature_names = X.columns.values.tolist()\nX_test_df = pd.DataFrame(data=X_test, columns=feature_names)\n\nfeat_name = 'num_major_vessels'\npdp_dist = pdp.pdp_isolate(model=rf_best_est, dataset=X_test_df, model_features=feature_names, feature=feat_name)\n\npdp.pdp_plot(pdp_dist, feat_name)\nplt.show()","2112237a":"feat_name = 'age'\npdp_dist = pdp.pdp_isolate(model=rf_best_est, dataset=X_test_df, model_features=feature_names, feature=feat_name)\n\npdp.pdp_plot(pdp_dist, feat_name)\nplt.show()","35cf1ca4":"feat_name = 'cholesterol'\npdp_dist = pdp.pdp_isolate(model=rf_best_est, dataset=X_test_df, model_features=feature_names, feature=feat_name)\n\npdp.pdp_plot(pdp_dist, feat_name)\nplt.show()","9d850ded":"feat_name = 'max_heart_rate'\npdp_dist = pdp.pdp_isolate(model=rf_best_est, dataset=X_test_df, model_features=feature_names, feature=feat_name)\n\npdp.pdp_plot(pdp_dist, feat_name)\nplt.show()","e9f34714":"feat_name = 'st_depression'\npdp_dist = pdp.pdp_isolate(model=rf_best_est, dataset=X_test_df, model_features=feature_names, feature=feat_name)\n\npdp.pdp_plot(pdp_dist, feat_name)\nplt.show()","0d32b8c8":"import shap \n\nexplainer = shap.TreeExplainer(rf_best_est)\nshap_values = explainer.shap_values(X_test_df)\n\nshap.summary_plot(shap_values[1], X_test_df, plot_type=\"bar\")","847ff7b7":"shap.summary_plot(shap_values[1], X_test_df)","57663bcb":"def plot_shap(model, patient):\n\n    explainer = shap.TreeExplainer(model)\n    shap_values = explainer.shap_values(patient)\n    shap.initjs()\n    return shap.force_plot(explainer.expected_value[1], shap_values[1], patient)","d4358ffe":"patient = X_test_df.iloc[1,:].astype(float)\nplot_shap(rf_best_est, patient)","d9080fcf":"patient = X_test_df.iloc[2,:].astype(float)\nplot_shap(rf_best_est, patient)","50976406":"patient = X_test_df.iloc[5,:].astype(float)\nplot_shap(rf_best_est, patient)","bc3dfe91":"shap.dependence_plot('num_major_vessels', shap_values[1], X_test_df, interaction_index=\"st_depression\")","57a6ae32":"shap_values = explainer.shap_values(X_train.iloc[:50])\nshap.force_plot(explainer.expected_value[1], shap_values[1], X_test_df.iloc[:50])","8e6d6ec6":"-----------------------------------------------------------------\n\n\n#### Import features ","5eeebca3":"##### Patient's Medical Report vs Age (Categorized by Target variable)","4709bd01":"--------------------\n\n\n\n\n\n\n#### Random Forrest Classifier","0151eb3d":"1. Using Random forrest Feature importance","d89b5810":"#### Description of various column fields in the data set\n\n* age: The person's age in years\n* sex: The person's sex (1 = male, 0 = female)\n* cp: The chest pain experienced (Value 0: Absent Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain)\n* trestbps: The person's resting blood pressure (mm Hg on admission to the hospital)\n* chol: The person's cholesterol measurement in mg\/dl\n* fbs: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)\n* restecg: Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or definite left ventricular hypertrophy by Estes' criteria)\n* thalach: The person's maximum heart rate achieved\n* exang: Exercise induced angina (1 = yes; 0 = no)\n* oldpeak: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot.)\n* slope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\n* ca: The number of major vessels (0-3)\n* thal: A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)\\n\n* target: Heart disease (0 = no, 1 = yes)","ec35c8e6":"#### Observations from Tsne- plot\n\n* Chest pain and ECG reports are the key factors in identifying whether a person is suffering from a heart disease or not.\n\n* Patients with heart rate around 100 seem to be healthy \n* Patients with high blood sugar are at risk","8a1982cd":"Changing column names to improve understanding","c30409c2":"### Dataset information","7b215e76":"### Imports","15289df0":"For above patient, predicted score is 0.73 as compared to the base line value 0.5484.\n\nAs we can see the values in red have caused the prediction to go high, we can compare the same from the shap summary plot above","5a2bd6c4":"As clearly seen in the above shap summary,\n* Low value(blue on right) of thalassemia_refersilble defect leads to higher probability of heart disease\n* Same is for number of blood vessels, exercise and others.\n* The opposite is for exercise induced angina","dd26ae57":"##### Target ","8ff66a0c":"Higher the number of blood vessels lower is the probability of heart attack","a1d0752c":"It is now clear that low value of number of vessels causes high risk. There is small impact of st_depression as seen from the colors","ce6051ee":"2. Using Permutation importance","76ff15dd":"with increase in age it seems that the risk is less which is quite not true.","936e9ef6":"Let's see how different variables affect prediction for individual patients ","b4c4a8e2":"### Exploring Target and Features","b64ccfc4":"Disease(Red) vs No disease(Blue) for 50 patients\n\nWe can hover on below data to get information for each patient","f654751c":"##### Visualing data using T-SNE","05b86943":"Decrease in value of cholesterol decreases the risk of heart disease","5a2b9f7b":"Assigning categorical variables by actual description inorder to improve readablility for visualization","49894d9a":"##### Splitting the data"}}