{"cell_type":{"d1002a9b":"code","e2bbafe5":"code","7cf48f40":"code","70e58424":"code","099b7ebc":"code","03f3eb3b":"code","89fc62b8":"code","f9d6143f":"code","18555554":"code","465936d5":"code","6ea17e0d":"code","ee6354ee":"code","1bb34726":"code","b0d86855":"code","09fedaa5":"code","0e6f627e":"code","ba58ee29":"code","156157d4":"code","249ce074":"code","79f47cfb":"code","cc68b7b7":"code","5b24ce01":"code","b4136035":"markdown","c876f252":"markdown","6e8b09dd":"markdown","e5710e78":"markdown","73a64b26":"markdown","bbbcaa6b":"markdown","7b5cea8d":"markdown","74d95ce9":"markdown","f4871f00":"markdown","989f4834":"markdown","0d7f5700":"markdown","e73173cb":"markdown","e1d0119a":"markdown","980d3852":"markdown"},"source":{"d1002a9b":"pip install censusdata","e2bbafe5":"import numpy as np\nimport re\nimport censusdata\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7cf48f40":"def _get_housing_results():\n    return censusdata.search('acs5', 2018, 'concept', 'housing')\n\n# Just grab the first 3\n_get_housing_results()[:3]","70e58424":"censusdata.printtable(censusdata.censustable('acs5', 2019, 'B25001'))","099b7ebc":"# B25003 contains information about housing by the tenure of the tenant (owner occupied vs renter occupied)\ncensusdata.printtable(censusdata.censustable('acs5', 2019, 'B25003'))","03f3eb3b":"def _tot_housing_df():\n    src = 'acs5'\n    year = 2015\n    sj_geo = censusdata.censusgeo([('state', '06'), ('county', '085'), ('block group', '*')])\n    var_lst = ['B25001_001E']\n    return censusdata.download(src, year, sj_geo, var_lst)\n\n# Take a look at the first three rows of the returned dataframe\ntot_housing_df = _tot_housing_df()\ntot_housing_df.head(n=3)","89fc62b8":"print('Type of index:', type(tot_housing_df.index[0]))","f9d6143f":"def _tot_tenure_df():\n    src = 'acs5'\n    year = 2019\n    sj_geo = censusdata.censusgeo([('state', '06'), ('county', '085'), ('block group', '*')])\n    var_lst = ['B25003_001E', 'B25003_002E', 'B25003_003E']\n    return censusdata.download(src, year, sj_geo, var_lst)\n\ntenure_df = _tot_tenure_df()\ntenure_df.head(n=3)","18555554":"def _check_tenure(tenure_df):\n    tot_col, owner_col, renter_col = tenure_df.columns\n    return np.allclose(tenure_df[[owner_col, renter_col]].sum(axis=1), tenure_df[tot_col])\n\n_check_tenure(tenure_df)","465936d5":"def plot_block_housing(df):\n    tot_col = df.columns[0]\n    plt.hist(df[tot_col], bins=20)\n    plt.xlabel('Housing Units')\n    plt.ylabel('Number of Block Groups')\n    plt.title('Block groups with this much housing units')\n    plt.show()\n    \nplot_block_housing(tenure_df)","6ea17e0d":"361105\/ tenure_df.sum()","ee6354ee":"def _print_housing_stats(df):\n    tot_col = df.columns[0]\n    cnts = [0, 100, 200, 400, 800, 1000, 2000, 4000]\n    \n    for i in range(1, len(cnts)):\n        lower = cnts[i-1]\n        upper = cnts[i]\n        _sub_df = df[(df[tot_col] >= lower) & (df[tot_col] <= upper)]\n        print(f'Number of block groups with more than {lower:4d}, less than {upper:4d} housing units: {len(_sub_df)}')\n\n_print_housing_stats(tenure_df)","1bb34726":"def _get_owner_ratio(df):\n    tot_col, owner_col, renter_col = df.columns\n    ratio = df[owner_col] \/ (df[tot_col] + 1) # avoid dividing by 0\n    return ratio\nowner_ratio_df = _get_owner_ratio(tenure_df)","b0d86855":"def _print_owner_ratio(df):\n    ratios = [0., 0.2, 0.4, 0.6, 0.8, 1.0]\n    for i in range(1, len(ratios)):\n        lower = ratios[i-1]\n        upper = ratios[i]\n        _sub_df = df[(df >= lower) & (df <= upper)]\n        print(f'Number of block groups owner occupied ratio more than {lower:.2f}, less than {upper:.2f} housing units: {len(_sub_df)}')\n    print()\n    \ndef _plot_owner_ratio(df):\n    plt.hist(df, bins=30)\n    plt.title('Frequency of Block Groups by Owner Occupancy Ratio')\n    plt.xlabel('Ratio of total owner occ units to total units')\n    plt.ylabel('Number of Block Groups')\n    plt.show()\n    \n_print_owner_ratio(owner_ratio_df)\n_plot_owner_ratio(owner_ratio_df)","09fedaa5":"censusdata.printtable(censusdata.censustable('acs5', 2015, 'B25032C'))","0e6f627e":"censusdata.printtable(censusdata.censustable('acs5', 2015, 'B25024'))","ba58ee29":"def _get_single_fam_df(src='acs5', year=2019):\n    sj_geo = censusdata.censusgeo([('state', '06'), ('county', '085'), ('block group', '*')])\n    var_lst = ['B25024_001E', 'B25024_002E', 'B25024_003E']\n    return censusdata.download(src, year, sj_geo, var_lst)\n\nsingle_fam_df = _get_single_fam_df(year=2019)\nsingle_fam_df.head(n=3)","156157d4":"def _get_single_fam_ratio(df):\n    total, single_detached, single_attached = df.columns\n    single = df[single_detached] + df[single_attached]\n    ratio = single \/ (df[total] + 1)\n    return ratio\n\nsingle_fam_ratio_df = _get_single_fam_ratio(single_fam_df)","249ce074":"def _print_single_fam_cnts(df):\n    ratios = [0., 0.2, 0.4, 0.6, 0.8, 1.0]\n    for i in range(1, len(ratios)):\n        lower = ratios[i-1]\n        upper = ratios[i]\n        _sub_df = df[(df >= lower) & (df <= upper)]\n        print(f'Num block groups with single family ratio more than {lower:.2f}, less than {upper:.2f}: {len(_sub_df)}')\n    print()\n    \ndef _plot_single_fam_ratio(ratio_df):\n    plt.hist(ratio_df, bins=30)\n    plt.title('Frequency of Block Groups by Single Family Unit Ratio')\n    plt.ylabel('Number of block groups')\n    plt.xlabel('Ratio of single family units to total units')\n    plt.show()\n\n_print_single_fam_cnts(single_fam_ratio_df)\n_plot_single_fam_ratio(single_fam_ratio_df)","79f47cfb":"def _print_single_fam_stats(df):\n    df['single_family_total'] = df['B25024_002E'] + df['B25024_003E']\n    df['ratio'] = df['single_family_total'] \/ (df['B25024_001E'] + 1)\n    total = df.sum()['B25024_001E']\n    single_fam_total = df.sum()['single_family_total']\n    # Cumulative housing units of the block groups that have between 80-100% single family ratio\n    sub_df = df[(df['ratio'] >= 0.80) & (df['ratio'] < 1)]\n    sub_sum = sub_df.sum()\n    sub_total = sub_sum['B25024_001E']\n    sub_single_fam = sub_sum['single_family_total']\n    \n    print('Overall single family housing proportion: {:.3f}'.format(single_fam_total \/ total))\n    print('Total single family housing             :', single_fam_total)\n    print('Total housing units                     :', total)\n    print('Total units in high single fam blocks   :', sub_total)\n    print('Sing fam units in high single fam blocks:', sub_single_fam)\n    print('Hi single fam ratio median housing units:', sub_df['B25024_001E'].median())\n    print('Median housing units overall            :', df['B25024_001E'].median())\n\n_print_single_fam_stats(single_fam_df)","cc68b7b7":"def _get_housing_total_yearly():\n    years = range(2010, 2021)\n    tot_housing = {}\n    single_housing = {}\n    for y in years:\n        try:\n            df = _get_single_fam_df(year=y)\n            df['single_tot'] = df['B25024_002E'] + df['B25024_003E']\n            df_sum = df.sum()\n\n            tot_housing[y] = df_sum['B25024_001E']\n            single_housing[y] = df_sum['single_tot']\n            print(f'Year {y:4d} | Total units: {tot_housing[y]} | Single units: {single_housing[y]}')\n        except:\n            print(f'Year {y:4d} | Cant download')\n    return tot_housing, single_housing\n\nnhouses, nsingle_houses = _get_housing_total_yearly()","5b24ce01":"def _plot_nhouses_change(nhouses, nsingle_houses):\n    units_built = [nhouses[i] - nhouses[i-1] for i in range(2014, 2020)]\n    single_units_built = [nsingle_houses[i] - nsingle_houses[i-1] for i in range(2014, 2020)]\n    ratio = [z\/u for u, z in zip(units_built, single_units_built)]\n    print(ratio)\n    plt.plot(range(2014, 2020), units_built, label='Units built')\n    plt.plot(range(2014, 2020), single_units_built, label='Single units built')\n\n    plt.title('Net Change in Housing Units from Previous Year')\n    plt.ylabel('Housing Units')\n    plt.xlabel('Year')\n    plt.legend()\n    plt.show()\n    \ndef _plot_housing_total(nhouses, nsingle_houses):\n    yrs = range(2014, 2020)\n    tot_units = [nhouses[y] for y in yrs]\n    single_units = [nsingle_houses[y] for y in yrs]\n    plt.plot(yrs, tot_units, label='Units')\n    plt.plot(yrs, single_units, label='Single units')\n    plt.title('Total Housing Units')\n    plt.ylabel('Housing Units')\n    plt.xlabel('Year')\n    plt.legend()\n    plt.show()\n    \n_plot_nhouses_change(nhouses, nsingle_houses)\n_plot_housing_total(nhouses, nsingle_houses)","b4136035":"Takeaways:\n- 62.6% of all housing units in Santa Clara Country are single family units\n- 672k total housing units (as of 2019), 421k of these units are single family units\n- 545 of the 1075 block groups in Santa Clara County have between 80-100% of their housing units as single family housing units\n    - These 545 block groups have 40.5% (272k out of 672k) of the total housing units\n    - median housing units in these groups is 460 vs 538 for all of Santa Clara County","c876f252":"### Quick Takeaways\n- Average number of housing units per block group in Santa Clara County is: 595, median is 512\n- 56% of housing units are owner occupied\n- 329 of the 1075 Santa Clara County block groups have an owner occupancy ratio (number of owner occupied units: total housing units in that block group)","6e8b09dd":"Lets first check if there's any missing data. The sum of the owner occupied and renter occupied units should be the same as the total units.","e5710e78":"The `censusdata` [package](https:\/\/jtleider.github.io\/censusdata\/intro.html) provides easy access to US Census Bureau's API in Python. We will be able to grab data from ACS 5 year estimates, ACS 1 year estimates, Census 2010.","73a64b26":"The main methods we will actually be using are:\n- `censusdata.search`: search for tables with the relevant keywords\n- `censusdata.censustable`: gets relevant information about tables\n- `censusdata.download`: downloads the desired table","bbbcaa6b":"Notice the way this dataframe is structured. The dataframe is indexed on these `censusgeo` objects which essentially encapsulate the block group, census tract, county information. The column of the dataframe is precisely the single variable ('B25001_001E') we requested.\n\nNow suppose we're interested in answer the question: what proportion of Santa Clary county houses are owner occupied vs renter occupied. We can do this by grabbing the total housing units and owner occupied units.\n- `B25003_001E`: total\n- `B25003_002E`: owner occupied\n- `B25003_003E`: renter occupied","7b5cea8d":"## Downloading Data\nAfter we've found the tables\/variables relevant to the data we're interested it, we can go ahead and download it.\n\nThe `censusdata.download` function takes the following arguments:\n- src: string. Ex: 'acs1', 'acs5', etc\n- year: year of data\n- geo: censusgeo object. This allows you to specify which geographies to download data for (we only want data relevant to San Jose\/Santa Clara county)\n- var: list of strings. This is where we specify the variables to download.","74d95ce9":"## Searching for variables\ncensusdata.search takes in 4 arguments:\n- `src`: string of the census data source. Ex: 'acs1', 'acs5', etc\n- `year`: int of the year\n- `field`: string of the field to search in. Usually you'll either want to set this to 'label' or 'concept'\n- `criterion`: string or function (that returns a boolean). The string to search for. Or function to filter results.\n\nIt returns a list of 3-tuple, where each 3-tuple contains the variable name (aka the table name), concepts, and labels matching the search criterion.\n\nSo if we want to find the variables relevant to housing, we might do it like so:","f4871f00":"### Takeaways\n- Adding about 4-7k housing units per year. Usually about 40% of these added units are single family units\n- Rate of housing increase is increasing","989f4834":"The variables we are interested in are: `B25032C_001E`, `B25032C_001E`, and `B25032C_001E`.","0d7f5700":"Now that we have some idea of how to use the `censusdata` package, we can start to answer other questions about housing in Santa Clara County\n- what proportion of housing units are single family units?\n- how has housing units changed over the past 10 years?\n\nLet's first take a look at the data on single family houses. Querying table number `B25024` (from ACS documentation), we see the following relevant variables:","e73173cb":"# Using the censusdata package\n\nIn this notebook, we will use the `censusdata` package to try to answer a few questions about\nhousing in Santa Clara County.","e1d0119a":"Let's take a closer look at some of these tables. To do that, we use `censusdata.censustable` to get relevant information about a table and `censusdata.printtable` to pretty print it.","980d3852":"## Total number of Housing Units in Santa Clara County by Year"}}