{"cell_type":{"18c89243":"code","2f1dc119":"code","bae147fc":"code","60e09a4e":"code","fc9b9146":"code","966eaefb":"code","e67f0260":"code","f72be4d7":"code","57b9e4d9":"code","872b8569":"code","ab134213":"code","4a6e5cf0":"code","e7cab8ca":"code","b4737098":"code","71226047":"code","eee018e4":"code","5f7d043e":"code","42cc88cd":"code","e82017cd":"code","de83950e":"code","bfe6973b":"code","e84431b4":"code","fd3c09e4":"code","c7cde0d1":"markdown","7e91f42c":"markdown","770b27f1":"markdown","5dcd79cc":"markdown","ffbb5c9d":"markdown","99085a54":"markdown","5a47e904":"markdown","c0ef50b2":"markdown","bd8f6e1b":"markdown","eeb70732":"markdown"},"source":{"18c89243":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f1dc119":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","bae147fc":"df=pd.read_csv(\"\/kaggle\/input\/social-network-ads1\/Social_Network_Ads.csv\")\ndf.head()","60e09a4e":"df.info()","fc9b9146":"df.describe()","966eaefb":"df.isnull().sum()","e67f0260":"X=df.iloc[:,:-1].values\ny=df.iloc[:,-1].values","f72be4d7":"print(X)","57b9e4d9":"print(y)","872b8569":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","ab134213":"print(X_train)","4a6e5cf0":"print(y_train)","e7cab8ca":"print(X_test)","b4737098":"print(y_test)","71226047":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","eee018e4":"print(X_train)","5f7d043e":"print(X_test)","42cc88cd":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","e82017cd":"print(classifier.predict(sc.transform([[30,87000]])))","de83950e":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","bfe6973b":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","e84431b4":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Random Forest Classification (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","fd3c09e4":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Random Forest Classification (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","c7cde0d1":"**IMPORTING DATASETS**","7e91f42c":"**PREDICTING TEST SET RESULT**","770b27f1":"**VISUALISING THE TRAINING SET RESULTS**","5dcd79cc":"**APPLYING FEATURE SCALING**","ffbb5c9d":"**VISUALISING TEST SET RESULT**","99085a54":"**IMPORTING LIBRARIES**","5a47e904":"**PREDICTING A NEW RESULT**","c0ef50b2":"**SPLITTING THE DATASET INTO TEST AND TRAINING SET**","bd8f6e1b":"**TRAINING THE RANDOM FOREST CLASSIFIER MODEL ON THE DATASET**","eeb70732":"**MAKING CONFUSION MATRIX**"}}