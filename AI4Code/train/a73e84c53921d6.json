{"cell_type":{"4a77e265":"code","281bbf82":"code","6652f855":"code","b43d0702":"code","fd065b86":"code","57250a69":"code","f484baa6":"code","0e1c8e69":"code","28bcace6":"code","f622584e":"code","39dfc033":"code","8a098ada":"code","8ff06539":"code","4c8cb4e4":"code","241dfe2b":"code","df0f926c":"code","e30a5ecf":"code","b1441398":"code","976e18a0":"code","91be9391":"code","9a7b9db5":"code","157aef78":"code","18326ac8":"code","44bf1a66":"code","1c0bce41":"code","fa242447":"code","49a41ea5":"code","2d1bb76d":"code","7298c1b7":"code","717dae7a":"code","7b0e0f2b":"code","ee27e806":"code","3f87d8f6":"code","709738ce":"code","26a4ace5":"code","dc03250d":"code","fdf67986":"code","f4cdcf45":"code","def5fa80":"code","2b3247ad":"code","a4151a83":"code","51fd4693":"code","48cc32ba":"code","23f16067":"code","959bd593":"code","ced89c49":"markdown","91ab5a63":"markdown","1ab6ab77":"markdown","83cc2760":"markdown","c26ef1dd":"markdown","51e83564":"markdown","20677465":"markdown","fd77657d":"markdown","a57f66a3":"markdown","ee59717a":"markdown","098d7ede":"markdown","fad33594":"markdown","e7f756e6":"markdown","a7953b25":"markdown","0af89596":"markdown","2b47bb6a":"markdown","e471bbe6":"markdown","0d2ff8b2":"markdown","20fb0b83":"markdown","1bbccbab":"markdown","515cf7e0":"markdown","cd59f3f0":"markdown","01503f8b":"markdown","2e64d4c8":"markdown","2f067080":"markdown","8be30c3a":"markdown","0e385efe":"markdown","cfb659b9":"markdown","1a0e6ba5":"markdown","a9febd26":"markdown","f928ed50":"markdown","f058fb5e":"markdown","22b2d064":"markdown","65ca2500":"markdown","507abc64":"markdown","9addb86c":"markdown","8f40188d":"markdown","fa2dff43":"markdown","78c83fca":"markdown","c68b3254":"markdown","2894ab22":"markdown","ff5f8dae":"markdown","df49b87f":"markdown","8144ac01":"markdown","ebbe3f82":"markdown","ac91ccfa":"markdown","3c925603":"markdown","9e4c19c1":"markdown","bb4992b4":"markdown","452c9708":"markdown","37c70b1f":"markdown","8de130e8":"markdown","23fea6dd":"markdown","600146d6":"markdown","3b64ad3d":"markdown","f74d373a":"markdown","1ab40a4b":"markdown","2f5b3004":"markdown","550723d0":"markdown","943d1e29":"markdown","6b920296":"markdown","35dbf587":"markdown","2a6d3f8a":"markdown","6e33229e":"markdown","52f4482e":"markdown","897d4061":"markdown"},"source":{"4a77e265":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')\n\nimport sklearn\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import resample\nimport string\n\n\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nimport xgboost as xgb\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn import metrics \nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\n\nimport nltk\nfrom nltk import TreebankWordTokenizer\nfrom nltk.tokenize.treebank import TreebankWordDetokenizer\nfrom nltk import SnowballStemmer\n\n\nfrom nltk.stem import WordNetLemmatizer\nfrom wordcloud import WordCloud\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk import SnowballStemmer\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import log_loss\n\n\nimport pandas as pd\nimport numpy as np","281bbf82":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n","6652f855":"# saves the index of the train and test data set to be able to seperate them accordingly after cleaning\nntrain = train.shape[0]\nntest = test.shape[0]\n\n# merges the two dataframes to create one for data cleaning\nall_data = pd.concat((train, test), sort=False).reset_index(drop=True)\n\n\n# drops the id column as it is not necessary for our predictions\nall_data.drop(\"id\", axis=1, inplace=True)\n","b43d0702":"all_data.head()","fd065b86":"grouped_wordclouds = all_data.groupby('type').sum()\n\ngrouped_wordclouds\n","57250a69":"wordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"white\").generate(grouped_wordclouds['posts'][11])\nplt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","f484baa6":"wordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"white\").generate(grouped_wordclouds['posts'][8])\nplt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","0e1c8e69":"plt.figure(figsize=(10,4))\nfig = all_data.type.value_counts().plot(kind='bar')\nfig.set_title('Personality Type Frequency')\nfig.set_xlabel('Type')\nfig.set_ylabel('Total Posts')","28bcace6":"#all_data = []\n#for i, row in all_mbti.iterrows():\n#    for post in row['posts'].split('|||'):\n#        all_data.append([row['type'], post])\n#all_data = pd.DataFrame(all_data, columns=['type', 'posts'])","f622584e":"print (\"There are {} words in the combination of all posts.\".format(len(grouped_wordclouds['posts'].sum())))","39dfc033":"# remove url's\npattern_url = r'http[s]?:\/\/(?:[A-Za-z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9A-Fa-f][0-9A-Fa-f]))+'\nsubs_url = r'url-web'\nall_data['posts'] = all_data['posts'].replace(to_replace=pattern_url, value=subs_url, regex=True)\n\n# make lower case\nall_data['posts'] = all_data['posts'].str.lower()\n","8a098ada":"# remove punctuation and numbers\ndef remove_punctuation_numbers(post):\n    \"\"\"Removes punctuation and numbers from the list\n\n    Parameters:\n    post(object): The string who's punctuation and numbers will be removed\n\n    Returns:\n    post(post): returns the post without the punctuation and numbers\n    \"\"\"\n    punc_numbers = string.punctuation + '0123456789'\n    return ''.join([l for l in post if l not in punc_numbers])\n\n\nall_data['posts'] = all_data['posts'].apply(remove_punctuation_numbers)\n","8ff06539":"tokeniser = TreebankWordTokenizer()\nall_data['tokens'] = all_data['posts'].apply(tokeniser.tokenize)\n","4c8cb4e4":"stemmer = SnowballStemmer('english')\n\n\ndef train_stemmer(words, stemmer):\n    \"\"\"Transforms to the root word in the list, that is, and\n    removes common word endings from English words\n\n    Parameters:\n    words(array): The list which is to be stemmed\n    stemmer(object): converts the words to stems\n\n    Returns:\n    words(words, stemmer): returns a list of stemmed words\n    \"\"\"\n    return [stemmer.stem(word) for word in words]\n\n\nall_data['stem'] = all_data['tokens'].apply(train_stemmer, args=(stemmer, ))\n","241dfe2b":"lemmatizer = WordNetLemmatizer()\n\n\ndef train_lemma(words, lemmatizer):\n    \"\"\"Returns the given forms of word as identified by the word's dictionary form\n\n    Parameters:\n    words(array): The list which is to be stemmed\n    lemmatizer(object): converts the words to lemmas\n\n    Returns:\n    words(words, lemmatizer): returns a list of lemmatized words\n\n    \"\"\"\n    return [lemmatizer.lemmatize(word) for word in words]\nall_data['lemma'] = all_data['tokens'].apply(train_lemma, args=(lemmatizer, ))\n","df0f926c":"# Instantiate the detokenizer\ndetokenizer = TreebankWordDetokenizer()\n\n# detokenize the lemmatized column\nall_data['detoken'] = all_data['lemma'].apply(lambda x: detokenizer.detokenize(x))\n","e30a5ecf":"all_data.head()","b1441398":"# Undo the concatenation we did earlier\ntrain = all_data[:ntrain]\ntest = all_data[ntrain:]\n","976e18a0":"# Separate input features and target\nX = train.detoken\ny = train.type\n\n# setting up testing and training sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# concatenate our training data back together\nX = pd.concat([X_train, y_train], axis=1)\n\n# separate minority and majority classes\nESTP = X[X.type == 'ESTP']\nESTJ = X[X.type == 'ESTJ']\nESFP = X[X.type == 'ESFP']\nESFJ = X[X.type == 'ESFJ']\nENTP = X[X.type == 'ENTP']\nENTJ = X[X.type == 'ENTJ']\nENFP = X[X.type == 'ENFP']\nENFJ = X[X.type == 'ENFJ']\nINFP = X[X.type == 'INFP']  # majority class\n\n# upsample minority\nmbti_upsampledESTP = resample(ESTP,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\n\nmbti_upsampledESFP = resample(ESFP,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\nmbti_upsampledESFJ = resample(ESFJ,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\nmbti_upsampledESTJ = resample(ESTJ,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\nmbti_upsampledENFJ = resample(ENFJ,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\nmbti_upsampledENTJ = resample(ENTJ,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\nmbti_upsampledENTP = resample(ENTP,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\nmbti_upsampledENFP = resample(ENFP,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\n# combine majority and upsampled minority\nupsampled_E = pd.concat([INFP, mbti_upsampledESTP,mbti_upsampledESTJ,mbti_upsampledESFP,mbti_upsampledESFJ,mbti_upsampledENFJ,mbti_upsampledENTJ,mbti_upsampledENTP,mbti_upsampledENFP])\n\n\n# check new class counts\nupsampled_E.type.value_counts()\n","91be9391":"upsampled_E.head()","9a7b9db5":"# separate minority and majority classes\nISTP = X[X.type == 'ISTP']\nISTJ = X[X.type == 'ISTJ']\nISFP = X[X.type == 'ISFP']\nISFJ = X[X.type == 'ISFJ']\nINTP = X[X.type == 'INTP']\nINTJ = X[X.type == 'INTJ']\nINFJ = X[X.type == 'INFJ']\nINFP = X[X.type == 'INFP']\n\n# upsample minority\nmbti_upsampledISTP = resample(ISTP,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\n\nmbti_upsampledISFP = resample(ISFP,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\nmbti_upsampledISFJ = resample(ISFJ,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\nmbti_upsampledISTJ = resample(ISTJ,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\nmbti_upsampledINFJ = resample(INFJ,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\nmbti_upsampledINTJ = resample(INTJ,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\nmbti_upsampledINTP = resample(INTP,\n                              replace=True,  # sample with replacement\n                              n_samples=len(INFP),  # match number in majority class\n                              random_state=27)  # reproducible results\n\n\n# upsampled minority\nupsampled_I = pd.concat([mbti_upsampledISTP, mbti_upsampledISTJ, mbti_upsampledISFP, mbti_upsampledISFJ, mbti_upsampledINFJ, mbti_upsampledINTJ, mbti_upsampledINTP])\n\n# check new class counts\nupsampled_I.type.value_counts()\n","157aef78":"# concatenate the upsampled data\nupsampled_data = pd.concat([upsampled_E,upsampled_I])\n\nupsampled_data.head()","18326ac8":"fig3 = upsampled_data['type'].value_counts().plot(kind = 'bar')\nfig3.set_title('Personality Type Frequency')\nfig3.set_xlabel('Type')\nfig3.set_ylabel('Total Posts')\nplt.show()","44bf1a66":"X_train = upsampled_data.detoken\ny_train = upsampled_data.type\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","1c0bce41":"clf = DummyClassifier(strategy='most_frequent').fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(' Our baseline accuracy is %s' % accuracy_score(y_pred, y_test))\n","fa242447":"nb = Pipeline([('vect', CountVectorizer(stop_words='english', ngram_range=(1, 2))),\n               ('tfidf', TfidfTransformer(sublinear_tf=True, norm='l2')),\n               ('clf', MultinomialNB())])\n\nnb.fit(X_train, y_train)\n","49a41ea5":"y_predNB = nb.predict(X_test)\nprint('accuracy %s' % accuracy_score(y_predNB, y_test))\n","2d1bb76d":"# calculate the loss\ny_probsNB = nb.predict_proba(X_test)\nprint(\"The log loss error for our model is: \", log_loss(y_test, y_probsNB))","7298c1b7":"logreg = Pipeline([('vect', CountVectorizer(stop_words='english', ngram_range=(1, 2))),\n                   ('tfidf', TfidfTransformer(norm='l2')),\n                   ('clf', LogisticRegression(n_jobs=1, C=1e5))])\n\nlogreg.fit(X_train, y_train)\n","717dae7a":"y_predLogRegTrain = logreg.predict(X_test)\n","7b0e0f2b":"y_predLogReg = logreg.predict(test.posts)\n","ee27e806":"print('accuracy %s' % accuracy_score(y_predLogRegTrain, y_test))\n","3f87d8f6":"# calculate the loss \ny_probslogreg = logreg.predict_proba(X_test)\nprint(\"The log loss error for our model is: \", log_loss(y_test, y_probslogreg))","709738ce":"print(classification_report(y_test, y_predLogRegTrain))","26a4ace5":"DecisionTree = Pipeline([('vect', CountVectorizer(stop_words='english', ngram_range=(1, 2))),\n                         ('tfidf', TfidfTransformer()),\n                         ('clf', DecisionTreeClassifier())])\n\nclf = DecisionTree.fit(X_train, y_train)\n","dc03250d":"y_predTree = clf.predict(X_test)\nprint('accuracy %s' % accuracy_score(y_predTree, y_test))\n","fdf67986":"# calculate the loss\ny_probsTree = clf.predict_proba(X_test)\nprint(\"The log loss error for our model is: \", log_loss(y_test, y_probsTree))","f4cdcf45":"print(classification_report(y_test, y_predTree))\n\n","def5fa80":"\nclf = Pipeline([('vect', CountVectorizer(stop_words='english')),\n                         ('tfidf', TfidfTransformer()),\n                         ('clf', SVC(kernel='polynomial'))])\n# polynomial Kernel\n\n#Train the model using the training sets\nclf.fit(X_train, y_train)\n\ny_predSVC = clf.predict(X_test)\n\nprint('accuracy %s' % accuracy_score(y_predSVC, y_test))\n","2b3247ad":"sample = pd.read_csv('..\/input\/random_example.csv')","a4151a83":"sample.head()","51fd4693":"\nsubmission = pd.DataFrame(data = sample['id'], columns= ['id'])\nsubmission['Type'] = y_predLogReg","48cc32ba":"submission['mind'] = submission['Type'].apply(lambda x: x[0] == 'E').astype('int')\nsubmission['energy'] = submission['Type'].apply(lambda x: x[1] == 'N').astype('int')\nsubmission['nature'] = submission['Type'].apply(lambda x: x[2] == 'T').astype('int')\nsubmission['tactics'] = submission['Type'].apply(lambda x: x[3] == 'J').astype('int')\nsubmission = submission.drop(['Type'],axis=1)","23f16067":"submission.head()","959bd593":"submission.to_csv('submit_2.csv', index=False)","ced89c49":"$$\nP(X \\cap Y) = P(X)P(Y)\n$$","91ab5a63":"### Context\n\nThe Myers\u2013Briggs Type Indicator (MBTI) is a kind of psychological classification about humans experience using four principal psychological functions constructed by Katharine Cook Briggs and her daughter Isabel Briggs Myers.\n\nEach MBTI personality type consists of four binary variables, they are: \n- Mind: Introverted (I) or Extraverted (E) \n- Energy: Sensing (S) or Intuitive (N) \n- Nature: Feeling (F) or Thinking (T) \n- Tactics: Perceiving (P) or Judging (J)\n\nThis notebook explores text classification that requires the use of Natural Language Processing to convert data into machine learning format for predictive purposes. The converted data is used to train a classifier capable of assigning MBTI labels based on a person's online forum posts.\n\n\n### Content\nThe dataset contains over 8600 rows of data when combined,whereby on each row is a person\u2019s:\n\n* Type (This persons 4 letter MBTI code\/type)\n* A section of each of the last 50 things they have posted (Each entry separated by \"|||\" (3 pipe characters))\n\nEach post in our data will have only one of the two categories for each variable above. Combining the four variables gives the final personality type. For example, a person who is Extraverted, Intuitive, Thinking and Judging will get the ENTJ personality type based on what they post.\n\nWe have built and trained a model that is capable of predicting labels for each of the four MBTI variables - i.e. predict four separate labels for each person which, when combined, results in that person's personality type.","1ab6ab77":"So we've investigated what our data is like and we've  cleaned it. The text feature extraction we just performed is the process of transforming what is essentially a list of words into a feature set that is usable by a classifier. We also balanced our data in a significant way. \nThere are various models that can be used for classification and the ones we chose to use here, we specifically chose because of how bad and how good they are with the kind of data we have. We chose the bad to illustrate how its functionality doesn't aid in the predictive processes. The others we chose, were to not only show their functionality with the data, but to also help us better understand the data set we are dealing with and how it relates to each classification model\n\nBut first we start with a baseline model: ","83cc2760":"![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAmQAAAF3CAYAAAALu1cUAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz%0AAAALEgAACxIB0t1+\/AAAIABJREFUeJzs3XlcVOXiBvDnnWHHHdxlUSCX3FJcUChccq1rpq1YWZYJ%0ALmi2mFnaZrbcutjizes1b8EvzRUXLCs1UUtDRcUFRcUd9x2RYeb9\/THssgwwwzvL8\/185tOZmTPn%0APGcG7OE9Z84RUkoQERERkToa1QGIiIiIHB0LGREREZFiLGREREREirGQERERESnGQkZERESkGAsZ%0AERERkWIsZERERESKsZARERERKcZCRkRERKQYCxkRERGRYk6qA1SUt7e39Pf3Vx2DiIioTNk5Bpy4%0AnAmtRsCnrgectEJ1JFJgx44dF6WU9cubz+YKmb+\/P5KSklTHICIiKpGUEov+PolPfknFv3oH4rke%0A\/hCCZcxRCSGOmzKfzRUyIiIia3X5VjamLN2Dk1duY+Ho7rinYU3VkchG8BgyIiIiM9iYeh4DYzah%0AeX1PrBjbg2WMKoQjZERERFWQpdPjo4QD+O3AefzrifsQEuClOhLZIBYyIiKiSko5fQ0TFyWjdeNa%0ASJgQhtoezqojkY1iISMiIqogvUHiP4lH8Z9NR\/HOw20wpGNT1ZHIxrGQERERVcDpq7fxyqJkSADx%0A43qiWV0P1ZHIDrCQERERmSg++TTeW7UfL4a1wOj7W0Cr4eksyDxYyIiIiMpx7bYO78SnIOX0Nfzv%0Aha5o27S26khkZ3jaCyIiojL8dfQSBsUkora7M1aPD2MZI4vgCBkREVEJsnMM+PzXQ1i28xQ+HtYe%0AvVo1UB2J7BgLGRERUTGHz91A9MJkNK3rjrXRYfCq4ao6Etk5FjIiIqJcUkp8\/+dxxPx+GK\/1b4kn%0Au\/jwOpRULVjIiIiIAJy\/kYXXFu\/B1ds6LI3sgebenqojkQNhISMiIoe3bl8Gpi5PwdNdfTC+TxCc%0AtfzOG1UvFjIiInJYt+7k4P3V+7H1yCV8+0wndParpzoSOSj+CUBERA5p14krGDw7EXqDREJ0GMsY%0AKcURMiIicig5egO+3nAEP\/yVjveHtMXAdo1VRyJiISMiIsdx\/NItTFyUjBquTlg9PgyNarupjkQE%0AgIWMiIgcgJQSi5NOYdbPBzGuVyBG9vCHhtehJCvCQkZERHbtyq1svLlsL9Iv3cKPL3VHy0Y1VUci%0AugsP6iciIru16dAFDIxJhK+XB+LH9WQZI6vFETIiIrI7WTo9Zq09iF\/2ZeDzxzugR6C36khEZWIh%0AIyIiu7L\/zHVMXLQLQQ1rYm10GOp4uKiORFQuFjIiIrILBoPEvM1H8e0fRzHtodZ4pGNTXoeSbAYL%0AGRER2bwzV29j8k+7kWMwYMXYnvCp56E6ElGFsJAREZFNW7X7DGas3IcXQptjzAMB0PJ0FmSDWMiI%0AiMgmXc\/SYXr8Puw+eRXfPd8F7ZvVUR2JqNJ42gsiIrI5245ewsB\/JcLTVYvVE0JZxsjmcYSMiIhs%0ARnaOAf\/67RCW7DiFWcPaoXerhqojEZkFCxkREdmEtPM3MXHRLjSs6YaE6DB413BVHYnIbFjIiIjI%0AqkkpEbvtBL749RAm97sHT3f15eksyO6wkBERkdW6cOMOXl+yG5duZWPxmBAE1K+hOhKRRbCQERGR%0AVfpt\/zm8uXwvngj2QXTfIDhr+T00sl8sZEREZFUys3PwwZoDSDx8Ad9EdEIX\/3qqIxFZHP\/cICIi%0Aq7H75FUMnr0ZWTo9EiaEsYyRw+AIGRERKZejN2DOxiP435\/pmPGPe\/FQ+yaqIxFVKxYyIiJS6sSl%0ATEz6KRluzhqsGh+KxrXdVUciqnYsZEREpISUEkt3nsbMhAOICg\/ACz2bQ8PrUJKDYiEjIqJqd+VW%0ANt5asRdHzt9C3Ivd0LpxLdWRiJTiQf1ERFStEg9fwKDZiWhc2x3x43qyjBGBI2RERFRNsnR6fPJz%0AKtamnMWnwzsgNMhbdSQiq8FCRkREFnfg7HVMXJiMgAaeWBsdhjoeLqojEVkVFjIiIrIYg0Fi\/pZj%0A+GbjEUwd1BrDOjXldSiJSsBCRkREFnH22m28ung3snQGrIjqCV8vD9WRiKwWCxkREZndmj1nMX1l%0ACp4L8UdkeACceB1KojKxkBERkdncyNJh+sp92HXiKuY91wUdfeqojkRkE\/gnCxERmcXf6ZcxaHYi%0A3Jy1WDMhlGWMqAI4QkZERFWi0xsQ89thLEo6iZlD2+HBNg1VRyKyORYbIRNCzBdCnBdCpJTyvBBC%0AzBZCpAkh9gghOlkqCxERWcaRCzcxbM5W7DtzDWsmhLKMEVWSJXdZLgAwoIznBwIIyr2NBjDHglmI%0AzCIuLg7+\/v7QaDTw9\/dHXFzcXc8JIaDVaiGEyL9pNBoIIe56TZ6oqCg4OTlBCAEnJydERUXdtV5v%0Ab+9yl1c4n7e3N2rUqFEkh7e3N6KioopsQ979vHXnzZe3vrx1CSHg7u5eZHk1atQocXtKe9+Kvzfe%0A3t53vb6s97iiir9vJa2vPOV9NiXl9vb2hqura\/56tVotoqKizLptpqjo+opvg7e3913TecuRUiLq%0A3Ri0DgrAqgn3Y\/2Mx\/DryqXVvo3lKWmbCv+s52UsbdurextM\/Xkrvm2l5azK52FNn6W9bEdZhJTS%0AcgsXwh\/Aaill2xKe+xbARinlj7n3UwGESynPlrXM4OBgmZSUZIG0RGWLi4vD6NGjkZmZmf+Yh4cH%0A5s6dCwB3PVeavNdEREQAMP4DPGfO3X+PREZG4ptvvkFcXBxeeOEFZGdnl7m8imQwJw2A74cNQ0T7%0A9sYHpDTecsXt3YvRq1YhU6cr8fXOGg2+e+QRRLRrV+K8Hs7OmPvww4ho165CueL27sUL8fHI1utL%0AXV95otaswZwS\/r2JDA7GN4MHF1lXWduYRwPAUOh+ZbfNFBV9L03dBgBwd3aGX7v7cXhPIvQ5BT+X%0ALlotpJTQGQq20pLbWB5Tt6mk3IVV1zaY+vMGmPb5VuX3yZy\/i1Vl69sh3n13h5QyuNwZpZQWuwHw%0AB5BSynOrAYQWuv87gODyltm5c2dJpIKfn58EcNfNz8+v1OdKu\/n5+eUvV6vVljiPVqstc71Flte4%0AsfSrV69CGcx58yuoYXfd\/Crw+tLmLWv5lVmvqcvTlvJ6bSW2sapZzLX9pa2votsgIJRvY1V+Bqzl%0Acyp8M\/XnzdTPt6I\/AxVdvurP0Va2A0CSlOV3JpUjZKsBzJJSbs69\/zuAN6SUd\/15IIQYDeNuTfj6%0A+nY+fvy4xTITlUaj0aCk35e8s45X5HdJCAFD7l\/jZZ21XEpZ6nqLLC9vfpMTmJdA0ZGfwjQoP1fe%0A60ubt6zll6as9Zq6vLLOJ1942aZsY1nrqOi2maKi72VVtqE8ltrG8phzm6pjG0z9eQNM+3yr8vtk%0Azt\/FqrL17RCASSNkKr9leRqAT6H7zXIfu4uUci6AuYBxl6XloxHdzdfXFyX9MeDr6wsAJT5X1rLy%0AaLVa6IvtVst7vKz1Flle7n9V\/aniW6sWMGECkFcuhcif9v3Xv3D82rWyX1+7NjBxYqnz5j1foUxl%0ArNfU5Wnfew\/6EsqwVgjgnXdMWle5OSuxbSYtt4LvZUW3QStEie9NiVkstI3lrrcKn8tdy6qGbTD1%0A5w0w7fOtyu+TOX8Xq8rmt+Pdd02bz5RhtMreUPYuy8EA1sJYVLsD2G7KMrnLklSJjY2VHh4eRYa9%0APTw8ZGxsbInPlXbLe02eyMjIEueLjIzMX6+Li0vpywNkbJ06MrZrV+nh7GxSBnPeNBpNke0x5X0r%0AfHN2ds5\/fVnvcWU+r5Let8LrK095n42p21j4vTLHtpmiou9lRX+GIyMj75rfxcVFOhf7GbTkNpbH%0A1G0qKbeKbTD15620bSuesyq\/T+b8XawqW98OmLjL0pJl7EcAZwHoAJwCMArAGABjcp8XAL4GcATA%0AXphw\/JhkISPFYmNjpZ+fnxRCSD8\/v7v+8cs73qv4\/3iFMB5vU\/w1eSIjI\/OPJdNqtUX\/Ab55U8aG%0AhEivwsvL\/a9f7doydtYsKQ2Gu\/J5eXlJT0\/PIjm8vLxkZGRkkW3Iu5+37rz5vLy8imQHIN3c3Ios%0Az9PT0+R\/FEt6b7y8vO56fVnvcUXFxsbmb0dp6ytPmZ9NKbm9vLyKlEGNRiMjIyPNum2mqOj6Cs9f%0At56XdPasJQEh69StJ728vO5aTknLr+5tLE\/xzyXv5yHvMy0pd958KrbB1J+34ttWWs6qfB7W9Fna%0A8naYWsgsegyZJfBbluRQLl8G+vQBkpMLHvP1BWbNAp54AtDwYhtkXlJKLN91Gh+sOYAxD7TAi6Et%0AoNGUdXQTEZVFCGH1x5ARUVlu3gQGDSpaxl58EZg9G3B3V5eL7NbVzGy8tSIFhzJuIHZUN7RpUkt1%0AJCKHwT+viayRXg8MHw5s22a8LwTw738D\/\/kPyxhZxNa0ixgUk4gGNV2xanwoyxhRNeMIGZE1+uIL%0A4JdfCu7Png28\/LK6PGS37uTo8dkvqVi1+yw+Gd4e999TX3UkIofEQkZkbQ4eBKZNK7j\/xhvAuHHq%0A8pDdSs24geiFu+Dn5YGE6DDU83RRHYnIYbGQEVkTvR54\/nngzh3j\/fvuA95\/X20msjsGg8SCren4%0AakMapgxshcc6NyvzBMVEZHksZETWZMkS4K+\/jNPOzsCCBcb\/EpnJuetZeHXxbty6k4PlUT3g5+Wp%0AOhIRgYWMyHoYDMAHHxTcnzwZyLtgN5EZrN17Fm\/Hp+CZ7v4Y2ysATlp+r4vIWrCQEVmL+HggJcU4%0A7elpLGREZnDzTg5mrNyHpPTL+M+zwbjPt67qSERUDP88IrIGUhY9ViwqCvD2VpeH7MaO45cxKCYR%0AThqBNRPCWMaIrBRHyIisQWIisGuXcdrdnaNjVGU6vQFf\/n4Y\/7f9JD4c2hb9722kOhIRlYGFjMga%0A\/PBDwfSzzwING6rLQjbv2MVbmLgoGXXcnZEwIRQNarmpjkRE5WAhI1ItKwtYvLjg\/rPPqstCNk1K%0AiYV\/n8Snv6Qiuk8Qng3x4+ksiGwECxmRaqtWAdeuGacDAoCQELV5yCZdunkHbyzdizNXb2PR6O4I%0AalhTdSQiqgAe1E+kWmxswfSIEcbrVhJVwIbU8xgYk4iABp5YMbYnyxiRDeIIGZFKly4BCQkF90eM%0AUJeFbM7tbD0+WnsAvx84j5gn70NIgJfqSERUSSxkRCqtWwfk5Binu3UDAgPV5iGbkXL6GqIX7kLb%0AprWREB2G2u68ogORLWMhI1Jp3bqC6cGD1eUgm6E3SMzddBTzEo\/inYfbYEjHpqojEZEZsJARqSJl%0A0ULWr5+6LGQTTl3JxCs\/7YYAED+uJ5rV9VAdiYjMhIWMSJX9+4EzZ4zTdeoAwcFq85BVW7HrNN5f%0AvR8v3d8CL4W1gFbDL38Q2RMWMiJVCo+O9e0LaLXqspDVupapw9vxKdh\/9jr+90JXtG1aW3UkIrIA%0AnvaCSJVffimY5u5KKsGfRy5h0OxE1PVwxurxoSxjRHaMI2REKmRlAX\/8UXD\/wQfVZSGrcydHj8\/X%0AHcKK5NOYNaw9erVsoDoSEVkYCxmRCtu3G0sZAAQFAf7+SuOQ9Th07gaiFyajWV13JEwIg1cNV9WR%0AiKgasJARqbB9e8F0WJi6HGQ1pJT439Z0zF6fhjcGtMTjwT68DiWRA2EhI1KhcCHr2lVdDrIK569n%0A4dUle3Dttg5LI3uguben6khEVM1YyIhU2LatYJqFzKH9nJKBaStSENHNF+N6B8JZy+9aETkiFjKi%0A6paRAZw4YZx2cwPatlWbh5S4dScH763ajz+PXsK3z3RGZ7+6qiMRkUL8U4youv39d8F0p06AM69B%0A6Gh2nriCQbMTISGREB3GMkZEHCEjqnaFjx\/r1k1dDqp2OXoDvlyfhrhtJ\/DBI\/diQNvGqiMRkZVg%0AISOqbjyg3yGlX7yFiYuSUdPNCWsmhKJhLTfVkYjIirCQEVUnKVnIHIyUEj8lncTHP6difO9APBfi%0ADw2vQ0lExbCQEVWntDTg6lXjtJcX0Ly52jxkUZdvZWPK0j04eeU2Fo7ujnsa1lQdiYisFA\/qJ6pO%0Ae\/YUTHfqBPDEn3brj0MXMDBmE\/y9PbFibA+WMSIqE0fIiKrTvn0F0zzdhV3K0ukxa+1BrNuXgS8e%0A74gegd6qIxGRDWAhI6pOhQvZvfeqy0EWse\/MNUxcmIyWjWpibfT9qO3BU5oQkWlYyIiqEwuZXdIb%0AJOYlHsW3m47i7Yda45GOTXkdSiKqEBYyouqSnQ2kphbcb9NGXRYym9NXb2PyT8kwGID4sT3hU89D%0AdSQiskEsZETV5fBhICfHOO3rC9SqpTYPVdnK3Wfw7sp9GBXWHC\/fHwAtT2dBRJXEQkZUXbi70m5c%0Au63D9PgU7Dl9DQue74p2zWqrjkRENo6nvSCqLixkduGvo5cwKCYRNd2csWZ8GMsYEZkFR8iIqgsL%0AmU3LzjHg818PYdnOU5g1rB16t2qoOhIR2REWMqLqwkJms9LO30D0wmQ0ru2GhOgweNdwVR2JiOwM%0ACxlRdbhzx3hQf57WrdVlIZNJKfHDX8fxr98O49V+LfFUVx+ezoKILIKFjKg6HD4M6PXG6ebNgRo1%0A1Oahcp2\/kYXXl+zBlVvZWDImBC3q8zMjIsthISOqDoVHx1q2VJeDTLJuXwbeWpGCp7r4YHyfIDhr%0A+f0nIrIsFjKi6pCWVjAdFKQuB5Xp1p0cfLBmPzanXcSciE4I9q+nOhIROQj+2UdUHQoXsoAAdTmo%0AVMknr+KhLzdDp5dImBDGMkZE1YojZETV4ciRgunAQHU56C45egO+2XgE3\/+ZjveGtMWgdo1VRyIi%0AB8RCRlQdCo+QsZBZjeOXbmHSomR4uDhh9fgwNKrtpjoSETkoFjIiS7tzBzhxwjgtBODvrzQOGU9n%0AsXjHKcxaexBjewXi+R7+0PA6lESkEAsZkaWlpwNSGqd9fQFXnlRUpSu3sjF1+V4cu3gL\/\/dSN7Rq%0AxIu8E5F6PKifyNK4u9JqbDp0AQNjEtG0jjtWjO3JMkZEVoMjZESWxm9YKpel0+Pjnw\/i55QM\/PPx%0ADugZ6K06EhFRESxkRJbGb1gqtf\/MdUxctAuBDWpgbXQY6ni4qI5ERHQXFjIiS+MuSyUMBon\/bj6G%0AOX8cwVuDWuPRTk15HUoislosZESWxl2W1e7stduY\/NNuZOcYED+2J3zqeaiORERUJhYyIkvKyTF+%0AyzIPC5nFrd5zBtPj9+H5nv4Y80AAnHgdSiKyASxkRJZ08iSg0xmnGzcGPD3V5rFj17N0mBG\/D8kn%0Ar2L+yC7o4FNHdSQiIpPxT0ciSzp6tGC6RQt1Oezc9mOXMSgmEe4uWqyeEMoyRkQ2hyNkRJaUd4Z+%0AgGfot4DsHANifj+En5JO4aOh7dC3TUPVkYiIKoWFjMiSjh8vmPb1VZfDDqWdv4lJi5JRv6YrEiaE%0AoX5NXgGBiGwXCxmRJRUuZH5+6nLYESklYredwBe\/HsIrD96DiG6+PJ0FEdk8FjIiS2IhM6sLN+7g%0AjaV7cOHGHSweE4KA+jVURyIiMgse1E9kSSxkZvPb\/nMYNDsRrRvXxNLIHixjRGRXOEJGZCkGg\/G0%0AF3l4DFmlZGbn4IM1B7Dp0AV8\/XQndG1eT3UkIiKz4wgZkaWcPVtwDjJvb56DrBL2nLqKh2ZvRla2%0AHgnRYSxjRGS3OEJGZCncXVlpeoPEnI1p+G5LOmb841483KGJ6khERBbFQkZkKSxklXLyciYmLUqG%0Ai5MGqyeEonFtd9WRiIgsjoWMyFJ4DrIKkVJi6c7TmJlwAJEPBGBUaHNoNDydBRE5BhYyIkvhCJnJ%0ArmZm463lKTh8\/gZiR3VDmya1VEciIqpWPKifyFJYyEyy+fBFDIxJRMNablg5LpRljIgcEkfIiCyl%0A8HUsWcjukqXT47NfUrF6z1l8+lh7hAXVVx2JiEgZFjIiS5CSI2RlOJhxHRMXJsPfyxNro8NQ19NF%0AdSQiIqVYyIgs4coV4OZN47SnJ1CP588CAINBYv6WY\/hm4xG8ObAVhnduxutQEhGBhYzIMoqPjrF0%0AIONaFl5dvBuZ2TlYHtUDfl48US4RUR4WMiJLOHWqYNrHR10OK5Gw9yzeiU\/BsyH+iAoPgJOW3yci%0AIiqMhYzIEgoXsmbN1OVQ7EaWDjNW7seO45cx77ku6OhTR3UkIiKrxD9TiSzh9OmCaQctZEnplzFo%0AdiJcnATWTAhjGSMiKgNHyIgswYFHyHR6A2b\/fhg\/bj+JmUPbot+9jVRHIiKyeixkRJZQuJA1baou%0ARzU7euEmJi1KRl1PFyREh6JBTTfVkYiIbAILGZElONgImZQSP24\/ic\/WpWJS3yCM6O7H01kQEVUA%0ACxmRuUnpUIXs4s07mLJ0D85ey8JPL3dHYIOaqiMREdkcHtRPZG7XrwO3bhmnPTyAOvZ7MPv6g+cw%0AKCYRQQ1rYnlUT5YxIqJK4ggZkbkVP37MDnfd3c7W48OE\/dhw8AK+fOo+dGvhpToSEZFNYyEjMjc7%0A312599Q1RC\/ahfZNayMhOgy13Z1VRyIisnksZETmZqeFTG+Q+PcfRzB\/8zG883AbDOnoON8eJSKy%0ANBYyInOzw5PCnrycick\/7YZGA6wcH4qmddxVRyIisissZETmZkcjZFJKrEg+jfdXH8DL97fAi2Et%0AoNXY3zFxRESqsZARmZudnBT2WqYOb63Yi9SMG\/hhVFfc26S26khERHaLp70gMjc7GCHbmnYRA2M2%0AwbuGK1aND2UZIyKyMI6QEZmbDReyOzl6\/HPdIcQnn8bHw9ojvGUD1ZGIiBwCCxmROWVmAleuGKed%0AnYH69dXmqYBD525gwo+74FvPA2uj70c9TxfVkYiIHAYLGZE5Ff6GZZMmgMb6jwowGCT+92c6vlyf%0AhjcGtMTjwT68DiURUTVjISMyJxvbXXnuehZeXbwbN7JysCyyB\/y9PVVHIiJySCxkROZkQ4Xs55Sz%0AmLYiBSO6+2Fcr0A4aa1\/NI+IyF6xkBGZkw2cFPbmnRy8t2ofth27jG+fCUZnv7qqIxEROTz+SUxk%0ATlY+Qrbj+BUMikmEgMCaCWEsY0REVoIjZETmZKUnhdXpDfhyfRr+b9sJfPBIWwxo20h1JCIiKoSF%0AjMicrHCE7NjFW5i0KBm13J2RMCEUDWq5qY5ERETFsJARmZMVHUMmpcSiv0\/ik19SMaF3IJ4N8YeG%0A16EkIrJKFi1kQogBAGIAaAHMk1LOKvZ8OIB4AMdyH1ompXzPkpmILCY7Gzh3zjit0QCN1O0WvHTz%0ADqYs24tTV25j4ejuuKdhTWVZiIiofBYrZEIILYCvATwI4BSAv4UQK6WU+4vNmiilfMhSOYiqzdmz%0AgJTG6YYNjWfqV2BD6nlMWboHj9zXFF89fR9cnbRKchARkenKLWRCiPEAYqWUVyq47K4A0qSUR3OX%0AsxDAEADFCxmRfVB8\/FiWTo+PEg7g1\/3n8MUTHdEjwLvaMxARUeWYMkLWEMbRrZ0A5gP4Rcq8YYAy%0ANQVwstD9UwC6lTBfDyHEHgCnAbwqpdxX1kIvXbqEBQsWmLB6omp2\/jwwcqRx2tsbqMaf01t3cpB2%0A4SY8XZzwQkNPHEo8iUOJ1bZ6IiKqonLPQyalnAYgCMB\/AYwEcFgIMVMIEWCG9e8E4CulbA\/gSwAr%0ASppJCDFaCJEkhEjS6XRmWC2RBWRnF0y7ulbLKiWAM1dv42DGDTSt447ABjXgxAP3iYhsjjBtsAsQ%0AQnQA8DyAAQA2AOgO4Fcp5eulzB8CYIaUsn\/u\/TcBQEr5URnrSAcQLKW8WNo8wcHBMikpyaTMRNXq%0AlVeAL74wTs+aBbzxhkVXd\/rqbbyyKBkSwOePd0Czuh4WXR8REVWcEGKHlDK4vPnKHSETQkQLIXYA%0A+ATAFgDtpJSRADoDGFbGS\/8GECSEaC6EcAHwJICVxZbdSAghcqe75ua5VF4mIqtUjceQxSefxj++%0A3Izwlg3w40vdWcaIiGycKceQ1QPwqJTyeOEHpZQGIUSp346UUuYIIcYB+AXG017Ml1LuE0KMyX3+%0A3wCGA4gUQuQAuA3gSROPTyOyPtVQyK7d1uHtFSnYd+Ya\/vdCV7RtWtsi6yEioupl8i5La8FdlmS1%0A\/PyAEyeM02lpQIA5DrMs8OeRS3h18W70ad0Abw5sDXcXns6CiMjambrLkmfqJzIHvR44c6bgvhmv%0AY3knR4\/Pfz2E5TtP4+Nh7dGrVQOzLZuIiKwDCxmROZw\/D+TkGKe9vAA381wv8vC5G4hemIwmddyx%0ANjoMXjWq59ubRERUvVjIiMzBzMePSSnx\/Z\/HEfP7YbzWvyWe7OKD3O+\/EBGRHWIhIzIHMxay89ez%0A8NqSPbiamY2lkT3Q3NuziuGIiMjasZARmcPp0wXTVShkv+zLwFvLU\/B0Vx+M7xMEZ225Z6YhIiI7%0AwEJGZA6FR8gqcUD\/rTs5eH\/1fmw9cgnfPtMJnf3qmTEcERFZO\/75TWQOVdhluevEFQyanQi9QSIh%0AOoxljIjIAXGEjMgcKlHIcvQGfL3hCH74Kx3vDWmLQe0aWygcERFZOxYyInOo4DFkxy\/dwsRFyfB0%0AccLq8WFoVNs8p8kgIiLbxEJGVFVSmjxCJqXE4qRTmPXzQYzrFYiRPfyh0fB0FkREjo6FjKiqLl8G%0AsrKM0zVrGm8lzXYrG1OX7UX6pVv48aXuaNmo5PmIiMjx8KB+oqoyYXTsj0MXMDBmE3zquSN+XE+W%0AMSIiKoIjZERVVUYhy9LpMWvtQfyyLwOfP94RPQO9qzkcERHZAhYyoqoq5YD+fWeuYeLCZNzTqCbW%0ARoehjoeLgnBERGQLWMiIqqrYSWENBol5m4\/i338cxbTBrTH0vqa8DiUREZWJhYyoqgoVsjON\/DB5%0A3jbkGAyIH9sTPvU8FAYjIiJbwYP6iaoqt5CtbH0\/Hs5ojNAgbywcHcIyRkREJuMIGVEVXT93Ce88%0ANBl7GgXhu14N0L5XoOpIRERkYzhCRlQF245ewsCe41HjTiZW\/y8a7Tu0UB2JiIhsEEfIiCohO8eA%0AL347hCW1cgivAAAgAElEQVR\/n8Csdd+gz5G\/AVdXoB4vDE5ERBXHETKiCko7fxOPztmCQxk3kDC4%0AsbGMAcZTXvDblEREVAksZEQmklLihz\/T8di\/t+Kprr6Y91ww6l88WzCDCRcVJyIiKgl3WRKZ4MKN%0AO3h9yW5cvJmNJZE9EFC\/hvGJ48cLZvLzUxOOiIhsHgsZUTl+3X8OU5fvxRPBPojuGwRnbaGB5RMn%0ACqZ9fas\/HBER2QUWMqJSZGbn4P3VB5B4+AK+ieiELv4lHLDPETIiIjIDHkNGVILkk1cxePZm3MnR%0AIyE6rOQyBnCEjIiIzIIjZESF5OgNmLPxCP73Zzpm\/ONePNS+SdkvKFzIOEJGRESVxEJGlOvEpUxM%0A+ikZbs4arBofisa13ct+gV4PnDxZcN\/Hx7IBiYjIbrGQkcOTUmLpztOYmXAAUeEBeKFnc2g0JpxP%0ALCMDyMkxTnt7Ax68diUREVUOCxk5tCu3svHWir04cv4W4l7shtaNa5n+Yh7QT0REZsKD+slhJR6+%0AgIExiWhc2x3x43pWrIwBPKCfiIjMhiNk5HCydHp88nMq1qacxWePdUBokHflFsRCRkREZsJCRg7l%0AwNnrmLgwGS3qeyJhQhjqerpUfmHcZUlERGbCQkYOwWCQmL\/lGL7ZeARTB7XGsE5NIap6IXCOkBER%0AkZmwkJHdO3vtNib\/tBt3cgxYEdUTvl5m+jYkR8iIiMhMWMjIrq3ZcxbTV6bguRB\/RIYHwElrxu+x%0AcISMiIjMhIWM7NKNLB2mr9yHXSeuYt5zXdDRp455V3DtmvEGAG5uQP365l0+ERE5FJ72guzO3+mX%0AMTAmEa5OWqyZEGr+MgbcPTpW1ePRiIjIoXGEjOyGTm\/Av347hEV\/n8JHj7bDg20aWm5lR48WTPv7%0AW249RETkEFjIyC4cuXATkxYlw8vTBQnRoWhQ083CKzxSMB0QYNl1ERGR3WMhI5smpUTcthP457pU%0AvPLgPRjR3a\/qp7MwReERMhYyIiKqIhYyslkXb97BG0v24NyNLCweE4LABjWrb+WFR8hatKi+9RIR%0AkV3iQf1kk34\/cA4DYxLRslFNLIvsWb1lDOAuSyIiMiuOkJFNuZ2txwdr9mNj6gV89dR96NbCq\/pD%0A6PVAenrBfY6QERFRFbGQkc3Yc+oqJi5KRodmdbB2YhhquTmrCXLqFKDTGacbNgRq1FCTg4iI7AYL%0AGVk9vUHi338cwfzNxzD9H\/fiHx2aqA3E3ZVERGRmLGRk1U5ezsSkRclw1mqwanwomtRxVx2JB\/QT%0AEZHZsZCRVZJSYvmu0\/hgzQGMeaAFXgxtAY3GSs6GzxEyIiIyMxYysjpXM7Px1ooUHMq4gR9GdcW9%0ATWqrjlQUz0FGRERmxtNekFXZknYRA2MS0aCmK1aND7W+MgZwhIyIiMyOI2RkFe7k6PHZL6lYufsM%0APhneAQ\/cU191pJJJyWPIiIjI7FjISLnUjBuIXrgLfl4eWBt9P+p5uqiOVLorV4Br14zTnp7G014Q%0AERFVEQsZKWMwSHy3NR1fb0jDlIGt8FjnZtVzHcqqSEsrmG7RArD2vEREZBNYyEiJjGtZeHXxbtzK%0AzsHyqB7w8\/JUHck0+\/cXTLdqpS4HERHZFRYyqnZr957F2\/EpeKa7P8b2CoCT1oa+W3LgQMF0mzbq%0AchARkV1hIaNqcyNLh3dX7cff6Zcx99lgdPKtqzpSxRUeIWMhIyIiM7GhoQmyZUnplzFodiKcNAIJ%0AE8Jss4wBRQtZ69bqchARkV3hCBlZlE5vwOzfD+PH7Sfx4dC26H9vI9WRKi8zEzh2zDit0QD33KM2%0ADxER2Q0WMrKYoxduYtKiZNTxcEHChFA0qOWmOlLVpKYaz0MGAIGBgKur2jxERGQ3WMjI7KSU+HH7%0ASXz6y0FM7HsPng3xs\/7TWZiCB\/QTEZGFsJCRWV26eQdvLN2LM1dv46eXQxDUsKbqSObDA\/qJiMhC%0AeFA\/mc2Gg+cxMCYRAQ08sXxsD\/sqYwAP6CciIovhCBlV2e1sPWYmHMD6g+cR8+R9CAnwUh3JMjhC%0ARkREFsJCRlWScvoaohfuwr1NaiMhOgy13Z1VR7KM7OyCyyYJwbP0ExGRWbGQUaXoDRLfbjqCeYnH%0AMP3hNhjSsanqSJaVmgro9cZpf3\/Aw0NpHCIisi8sZFRhp65k4pVFuyEEsHJcTzSr6wDlZOfOgul2%0A7dTlICIiu8RCRiaTUiI++QzeW70fo+9vgZfCWkCrsYPTWZgiKalguksXdTmIiMgusZCRSa5l6jAt%0APgUHzl7H9y90RdumtVVHql6FC1lwsLocRERkl3jaCyrX1iMXMWh2Iup5OGPVuFDHK2M6HZCcXHC\/%0Ac2d1WYiIyC5xhIxKdSdHj8\/XHcKK5NOYNaw9erVsoDqSGvv2AVlZxmk\/P6B+fbV5iIjI7rCQUYkO%0AnbuB6IXJaFbXHQkTwuBVw4Gv28jdlUREZGEsZFSEwSDxvz\/TMfv3w3hjQCs80cXHPq5DWRUsZERE%0AZGEsZJTv\/PUsvLpkD67d1mFZVE809\/ZUHck68BuWRERkYSxkBAD4OSUD01akIKKbL8b1DoSzlt\/3%0AAADcuQPs2VNwv1MndVmIiMhusZA5uJt3cvDeqn346+hlfPtMZ3T2q6s6knXZtcv4LUsACAgA6vL9%0AISIi8+MwiAPbeeIKBs9OBAAkRIexjJXk998LpkND1eUgIiK7xhEyB5SjN+DL9WmI23YcHzzSFgPa%0ANlYdyXoVLmR9+6rLQUREdo2FzMGkX7yFiYuSUdPNCWsmhKFhLTfVkaxXZiawZUvB\/d691WUhIiK7%0AxkLmIKSUWPT3SXz880FM6BOE50L8oXGU61BW1pYtQHa2cbp1a6BJE7V5iIjIbrGQOYDLt7IxZeke%0AnLiciUUvh+CehjVVR7IN3F1JRETVhAf127mNqecxMGYT\/L09ET+uJ8tYRfz2W8F0nz7qchARkd3j%0ACJmdytLpMWvtQazbl4EvHu+IHoHeqiPZlsuXgZ07jdMaDfDAA2rzEBGRXWMhs0Mpp69h4qJktGxU%0AE2uj70dtD2fVkWxPfDwgpXG6SxegTh21eYiIyK6xkNkRvUHiP4lHMXfTUbz9UGs80rEpr0NZWT\/+%0AWDA9fLi6HERE5BBYyOzE6au3MfmnZBgMQPzYnvCp56E6ku06f77oAf1PPKEuCxEROQQWMjsQn3wa%0A763aj1FhzfHy\/QHQ8nQWVbN4MWAwGKfDwgAfH7V5iIjI7rGQ2bBrt3V4Jz4Fe09fw4Lnu6Jds9qq%0AI9mHwrsrn3xSXQ4iInIYPO2Fjfrr6CUMiklELTdnrBkfxjJmLkePFpydX6sFHntMbR4iInIIHCGz%0AMdk5Bnz+6yEs23kKs4a1Q+9WDVVHsi\/\/\/GfBdL9+QP366rIQEZHDYCGzIWnnbyB6YTIa13ZDQnQY%0AvGu4qo5kX86fB+bPL7g\/ebK6LERE5FBYyGyAlBI\/\/HUcX\/x6CK\/1b4WnuvrwdBaWMHs2kJVlnO7c%0AmRcTJyKiasNCZuXO38jCa4v34GpmNpZG9kCL+jVUR7JPV64AX39dcH\/KFICll4iIqgkLmRVbty8D%0AU5en4KmuPpjQJwjOWn4Hw2Jefx24etU4HRQEDB2qNg8RETkUFjIrdOtODt5fvR9bjlzEv0d0QrB\/%0APdWR7NsffwDz5hXc\/\/hj4zcsiYiIqgmHXKzMrhNXMHh2InR6iYQJYSxjlnb9OvDSSwX3hw7l6BgR%0AEVU7jpBZiRy9AV9vOIIf\/krHu\/9oi8HtG6uOZP90OuN1Kg8fNt6vVQv46iu1mYiIyCGxkFmB45du%0AYdKiZHi4OGH1+DA0qu2mOpL9y8kBRo0Cfv214LGvvwaaNFGXiYiIHBYLmUJSSizecQqz1h5EVHgA%0AXujZHBpeh9LyrlwxXjC8cBl7911gxAh1mYiIyKGxkCly5VY23ly2F+mXbuH\/XuqGVo1qqY5k\/6QE%0AVqwAJk0Cjh8vePzFF4G331aXi4iIHJ5FD+oXQgwQQqQKIdKEEFNKeF4IIWbnPr9HCNHJknmsxaZD%0AFzAwJhHN6rpjxdieLGOWptMBS5YADzwAPPpo0TI2fTrw7bc85xgRESllsUImhNAC+BrAQABtADwl%0AhGhTbLaBAIJyb6MBzLFUHmuQpdPj3VX78MbSPfjn4x0w7aE2cHMu+\/QKcXFx8Pf3h0ajgb+\/P+Li%0A4io1X1xcHLy9vSGEgBACWq0WQohSl5m3PCEEnJyciswbFxeHmjVr5i9LCAGNRpM\/b1RUFKKiovLX%0AIYRAjRo18tdTPIu3t3f+cktaZ1RUFGrUqFFkfcXz5L2uxJuLC8Rjj0GbmAgB5N80ANxmzYLIzenq%0A6pq\/HUIIuLm5wdvbu9z3HgCioqLyM+e9B6V9LqZ+pkRE5DiElNIyCxYiBMAMKWX\/3PtvAoCU8qNC%0A83wLYKOU8sfc+6kAwqWUZ0tbbnDHjjJp3bq7nyhrO6zguf0Xb2PiuhMIrOuKmeFNUcethL3FxV4X%0At2IFRk+Zgszbt\/Mf83B3x9yPPkLEI48UzLd8OUZPnXr3fDNnImLIEMTFx+OF119Htk5XYlwPd3fM%0A\/fBDRAwZYlxefLxxeXmXESrE2ckJeoMBBoOh9O0vhVajwegnnsB\/lyy5K4smt8iUlrE0LlotpMEA%0AnYV+jgvz8PDA3LlzERERUeTxqKgozJlz998Sffr0wZ9\/\/onMzMyCvC4ukFJCV2g7S1suERHZPiHE%0ADillcLnzWbCQDQcwQEr5Yu79ZwB0k1KOKzTPagCzpJSbc+\/\/DuANKWVSacsNFqL0J62QAQLzuj6C%0Af3cbjrfW\/xeP7lsPU3eO+QM4XsLjfgDSKzBfac+XtkxT5q8sLQC9hZZdHfz8\/JCenl7kMScnJ+j1%0AVduqkpZLRES2z9RCZhMH9QshRsO4SxOdFWepiDM1vTF58CTotE6I\/\/4V+Fw7V6HXnzDx8fLmK+35%0A0pZhyvyVZctlDABOnLj73alqGSttuURE5DgsWchOA\/ApdL9Z7mMVnQdSyrkA5gJAsLOzRN26Ja+x%0ArAOzq\/m5Vf5dMKPLE3j+4HqM2fcLnGo4ATWaVmiZvmfO4HgJ\/7P31WqBpk0L7p8+Xfp8Pj7wPXmy%0AxOfvmtfX1zh94kS581eWrY+Q+ea+R4Vptdoql7KSlktERA5ESmmRG4xl7yiA5gBcAOwGcG+xeQYD%0AWAvjMdbdAWwvb7mdO3eW1uza7Ww5aeEu2evTDTL5xJUqLSs2NlZ6eHhIAPk3Dw8PGRsbW6H5YmNj%0ApYuLS5Hny1pmScvLuzk7O0uNRlPqssq6abVaGRkZWWIWjUZTZsbSbi4uLtLZ2blSeSp6K+m9l1LK%0AyMjIEufv06fPXe9jSXlLWy4REdk+AEnSlN5kykyVvQEYBOAQgCMA3sp9bAyAMbnTAsZvYh4BsBdA%0AcHnLtOZCtu3oJdlz1u9y6rI98tYdnVmWGRsbK\/38\/KQQQvr5+ZX6P+7y5ouNjZVeXl5FChCAUpeZ%0At7y8IlV43tjYWFmjRo0ipUIIUaR0RUZGFilunp6eRQpi4SxeXl75yy1pnZGRkdLT0\/OuwlM4T97r%0AyroVL5JCCOnq6lqkLOVtBwDp6uoqvby8yn3vpTSWsrzMee9BaZ+LqZ8pERHZPlMLmcUO6reU4OBg%0AmZRkXYf1Z+cY8K\/fDmHxjlP4aGg79G3TUHUkIiIisgJ2dVC\/NUs7fxOTFiWjfk1XJEwIQ\/2arqoj%0AERERkY1hIaskKSVit53A5+tSMblfS0R084Xg2d6JiIioEljIKuHCjTt4fcluXLh5B4vH9EBggxqq%0AIxEREZENYyGroN\/2n8Oby\/fi8eBmiO5zD1ycLHo5UCIiInIALGQmyszOwQdrDmDToQv4+ulO6Nq8%0AnupIREREZCc4vGOC3SevYvDszcjK1iMhOoxljIiIiMyKI2RlyNEbMGfjESzYmo4Z\/7gXD3doojoS%0AERER2SEWslKcvJyJSYuS4eKkweoJoWhc2111JCIiIrJTLGTFSCmxdOdpzEw4gMgHAjAqtDk0Gp7O%0AgoiIiCyHhayQq5nZmLp8L9LO30TsqG5o06SW6khERETkAHhQf67Nhy9iYEwiGtZyw8pxoSxjRERE%0AVG0cfoQsS6fHp7+kYs2es\/hkeHvcf0991ZGIiIjIwTh0ITuYcR0TFybD38sTa6PDUNfTRXUkIiIi%0AckAOWcgMBon5W47hm41HMGVgKzzWuRmvQ0lERETKOFwhO3vtNl5dvBu3s\/VYHtUDfl6eqiMRERGR%0Ag3OoQrZmz1m8E5+C53r4Iyo8AE5afqeBiIiI1HOIQnYjS4cZK\/djx\/HLmPdcMO7zras6EhEREVE+%0Auy9kSemXMemnZIQGemPNhDB4utr9JhMRkRldvXoVFy9ehE6nUx2FrJyzszO8vb1Rp06dCr\/WbtuJ%0ATm\/A7N8P48ftJzFzaFv0u7eR6khERGSDzp49C39\/f7i5ufELYFQqKSWysrKQnp7OQpbn6IWbmLgo%0AGfU8XZAQHYoGNd1URyIiIhvm7s7rGVPZhBBV+jmxq6PapZSI23Ycw+ZsxfDOzfDdyC4sY0REZDPS%0A09MxfPjwSr02IyMD06dPL\/G55ORkbN++vdz5CluwYAGCgoIQHh6OsLAwpKenVypXVS1YsAB\/\/vln%0ApV\/fvHnzIts7ePBgk9\/jV199FRs3biz1+eDg4ErnKs5uCtnFm3fw0vdJ+L9tJ7B4TAieDfHn0DIR%0AETmMRo0a4d133y3xucKFrKz5iouOjsbGjRvx8ssv4+uvv650NoPBUOnXjhw5EiEhIZV+vZeXF3bu%0A3AnAeDzg9evXK70sS7KLQrb+4DkMiklEUMOaWB7VE4ENaqqOREREZBZ79+5FaGgoevbsiY8++ggA%0AcOLECfTs2RODBg3Ck08+iQULFhQZXXv++ecRFhaG8PBwpKenY86cOYiJiUG\/fv2KzLd9+3aEhoYi%0APDwcn376aakZrl69CiklAODo0aPo378\/wsPDMWnSpPzn+\/XrhwEDBmDkyJGYMWMGAKBNmzZ4\/vnn%0A8corr+DixYt45JFH0Lt3b0RERECv1+Ovv\/5Ct27d0KtXL8yYMQM6nQ4PP\/wwwsPDER4ejqysLMyY%0AMQOrV68GAEyePBmhoaHo3bt3\/ohd69at8dxzz6Fjx46Ii4srMX+rVq2QmpqKlStX4uGHH85\/fMOG%0ADejevTu6d++O77\/\/HgCwe\/dudOnSBQ899BD27NkDwLgHbvz48ejVqxf69u2LU6dOVfhzLI9NH0N2%0AO1uPDxP2Y8PBC5j91H3o3sJLdSQiIrJn5tzzkltwyjN16lT85z\/\/QatWrdC\/f3889dRT+OyzzzB9%0A+nT069cPTz\/9dJH5dTodUlNTsWXLFgghYDAYEBkZiZs3b2LcuHFFdj1OmjQJCxcuhI+PT4mjWDEx%0AMfjuu+9w\/vx5bN26FQAwZcoUfPPNNwgICEBkZCSSkpKwceNGDB8+HKNHj8bUqVPzX3\/q1Cls2bIF%0AdevWxauvvooJEyagd+\/e+Pjjj7F8+XLs3r0b06dPx6BBg2AwGHDs2DF4eHhg1apVkFIW2dOVlJSE%0A06dPY\/PmzUhMTMR7772H+fPnIyMjA19++SUA4MEHH0RERMRd2zFs2DAsXboUu3fvxttvv50\/Wvjm%0Am29i9erVqF27NkJCQvDYY49h2rRpiI2NRVBQEEJDQwEAa9asQd26dbFhwwZs27YNs2bNwldffWXS%0A52cqmx0h23vqGgZ\/mYibWTlIiA5jGSMiIruUkZGB1q1bQwiBTp064ciRI0hLS0Pnzp0BIP+\/eZyd%0AnTF27Fg888wziI6ORmZmZqnLzs7Oho+PDwBAo7m7EkRHR2PHjh0YPHgw9u3bBwA4ePAgRo0ahfDw%0AcGzfvh2nTp0qNU9gYCDq1jWe+3P\/\/v2YPn06wsPDsWzZMmRkZGDs2LFISEhAREQEfv75ZwQEBKBH%0Ajx4YMWIEpk2bBr1en7+stLQ0dOnSBQDQpUsXHD58GADQokUL1KpVC7Vq1Soyf2HdunXDxo0bIYRA%0AjRo18h\/X6\/Xw9vaGs7MzAgMDcebMGWRkZKBly5bQaDT527J\/\/34sX74c4eHheP3113H16tVS39PK%0AsskRsq83pGH+5mN45+E2GNKxqeo4REREFtOwYUMcOHAArVq1ws6dOzFmzBgEBgZi165d6Nu3b\/5\/%0A8+j1ejz++OOIiIjAzJkzsWzZMjg7O5dYVlxdXXH69Gk0bdoUBoOhxFIGANOnT8fw4cMxYMAAtGzZ%0AEp999hn8\/PwgpYRer0daWhp27dqFzp07Y9euXXByMtaLwstr1aoVhg4dirCwMADGkbycnBx89dVX%0AyM7ORufOndGnTx+MHz8eGo0Go0ePxpYtW\/JfHxgYiBUrVgAA\/v77bwQFBQGASceLCyHw6KOPokWL%0AFkUe12g0uHjxImrXro3Dhw+jSZMmaNiwIQ4fPozAwEDs3LkTw4YNQ6tWrfD444\/j7bffzs9ubjZX%0AyI5euIVNhy5g5fhQNK3DryETEVE1MnE3Y1UkJibmF6y+ffviww8\/xIsvvggpJQYPHgx\/f3+8\/vrr%0AeOqpp\/DPf\/4T7u7ucHZ2zn\/9jRs3MGTIEAghIIRAXFwcsrKy8Oyzz2Lbtm2YOXNm\/ryff\/45Hn\/8%0AcTg7O2Pw4MF47bXXSszUuHFjNG3aFH\/99Rc+\/vhjjBkzBllZWdBqtZg\/fz5efPFFPPbYY1i8eDG8%0Avb3Rpk2bu5bx1ltv4aWXXsr\/xuMnn3yCzZs3Y9myZcjJycHIkSNx\/PhxjBo1ClqtFp6enujUqRPW%0Ar18PwPiNxsaNGyM0NBROTk747rvvKvS+jhkzBgCK7LKdOXMmBg8eDCEExo0bB3d3d7z\/\/vt4+umn%0A0aBBg\/zRvYcffhjr169Hr169IIRAREQERo0aVaH1l0fIavjhMie\/lu3k0QN7oNXwG5RERGR5Bw4c%0AQOvWrVXHKCInJyd\/FOrpp59GdHQ0unXrpiyPwWCAlBJarRZTp05Fhw4d8MQTTyjLo1LxnxchxA4p%0AZbnnx7C5EbL6NV1ZxoiIyKEdP34cI0eORE5ODjp06KC0jAHA7du3MWDAAEgp0aBBg\/xvWZLpbK6Q%0AERERObqAgAAkJiaqjpHP09PTqvLYIpv9liURERGRvWAhIyIiIlKMhYyIiIhIMRYyIiIiK1HSxcVn%0AzZqFY8eOWWydGzduhI+PD8LDw9G9e3fs2LHDYusqy88\/\/4zly5dX+vXh4eEYOXJk\/v2xY8eafPHv%0Ar776CgsWLCj1eXNeRLw0PKifiIjIik2ZMsXsyyx+EtgnnngCn332GTZv3oxZs2Zh8eLFZlluRQwY%0AMKBSryvszJkz0Ol00Gq1FrnepCVxhIyIiMiKjRw5EikpKdi4cSMGDBiAoUOHokOHDkhJSQFgHFkK%0ACwtDjx498OOPPwIAfvjhB4SHh6NTp0744YcfAAAzZszAyJEjMWjQoPyLZhdX+CLiJV0MPCcnB8OH%0AD0ffvn0xduzY\/BGpTp06ITo6Gs888wyysrIwYsQI9O7dG\/\/4xz9w\/fp1HDlyBD169ECvXr3w8ssv%0AA7j7AugLFizIvz7k559\/jpCQEISGhmLnzp356xg3bhy6deuGjz\/+uMT8ffr0wfr167F582b07Nkz%0A\/\/GSLtB+8uRJhIWFYeDAgfjtt9\/y5505cyYeeOAB3H\/\/\/di7d2\/FP7BKYiEjIiKyETqdDsuXL8es%0AWbMwf\/58SCnx\/vvv4\/fff0diYiK++uor6PV6DBs2DBs3bsSWLVvwxRdf5L\/ex8cHCQkJ6NixY5Hl%0ALlq0CCEhIRgxYkT+5YFmzZqFCRMmYP369Wjfvj2WL1+OFStW4J577sFvv\/2GDh065L\/+ypUrGD9+%0APOLi4jBv3jz07t0b69evR0REBObOnYuNGzdixIgR2LBhA+bMmZN\/AfRNmzZh48aN8PX1zV9WRkYG%0AVqxYgS1btiA2NhZvvPEGAGNZfO2117B169b8klnc0KFDsXz5cixduhTDhg3LfzzvAu2bN2\/Ghg0b%0AkJ6ejo8\/\/hhvv\/021q5dCzc3NwBASkoKUlNT8ccff2DhwoWYNm1aFT8x03GXJRERUQX4T1lT5WWk%0AzxpcqdflFSkfHx9cuXIFFy5cwKFDh9CvXz8AxtJy4cIF\/Pnnn4iJiYGUEmlpafmvz7s4d3F5uyw\/%0A+ugj\/PXXX+jQoQP279+Pbdu24b333sPt27fxzDPP4ObNm0UuIr5161YAQN26dREYGAjAeCHuv\/\/+%0AG99\/\/z10Oh3CwsLw8ssv47333kNERAT69++PZ599Nv8C6F5eXvjwww8L3pv0dHTo0AEajQb+\/v75%0AF\/KuW7cu\/Pz8ACC\/QBXXpEkTnDt3DjqdDgEBAfmP512gHUCJF2jPe1\/279+PrVu3Ijw8HACg1WpN%0A+lzMgYWMiIioAipbpsyh8IW0pZTw9vZGq1atsG7dOri4uECn08HZ2RkffPABNm3aBCFEkQtql3d8%0A16RJk9CtWzeMGjWqxIuBx8fHY9euXRg2bBh27dpV4nJbtWqFkJAQPPPMM\/mvy8nJwaeffgoAuPfe%0AexEREXHXBdDz+Pv7Izk5GQaDASdOnECdOnXu2vayjBgxAllZWUUeK+8C7UlJSejfvz9atWqFBx54%0AAPPmzcvPXl1YyIiIiKxI8YuLl0Wj0WDatGl48MEHodFoUL9+ffz000949NFHERYWhk6dOuVfINsU%0Abm5u6N+\/P5YsWVLixcAfeeQRLFy4EH369EGLFi2KXNQ8z+jRozF69Oj8i39PnjwZN2\/ezD8+rH\/\/%0A\/iVeAH3dunUAgEaNGmHIkCHo0aMHNBoNvvzyS5PzAyiyqzJPaRdof\/rpp\/HZZ5+hVq1aAID27dsj%0AKCgIDzzwADQaDR588EFMnTq1QuuvLJu7uHhwcLBMSkpSHYOIiByENV5cXKW8Ubi5c+fiypUr+cd4%0AkZHDXFyciIiI1BkyZAhu3rwJV1dXLFq0SHUcu8FCRkRERCZLSEhQHcEu8bQXRERERIqxkBEREZXD%0A1uvK6HMAAAfHSURBVI63JjWq8nPCQkZERFQGNzc3XLp0iaWMyiSlxKVLl0o9R1p5eAwZERFRGZo1%0Aa4ZTp07hwoULqqOQlXNzc0OzZs0q9VoWMiIiojI4OzujefPmqmOQneMuSyIiIiLFWMiIiIiIFLO5%0AM\/ULIW4ASFWdowzeAC6qDlEG5qsaa85nzdkA5qsq5qsa5qs8a84GWH8+Pyll\/fJmssVjyFJNuQSB%0AKkKIJOarPOarPGvOBjBfVTFf1TBf5VlzNsD685mKuyyJiIiIFGMhIyIiIlLMFgvZXNUBysF8VcN8%0AlWfN2QDmqyrmqxrmqzxrzgZYfz6T2NxB\/URERET2xhZHyIiIiIjsik0XMiHEZCGEFEJ4q85SmBDi%0AfSHEHiFEshBinRCiiepMhQkhPhVCHMzNuFwIUUd1psKEEI8JIfYJIQxCCKv45owQYoAQIlUIkSaE%0AmKI6T2FCiPlCiPNCiBTVWUoihPARQmwQQuzP\/VyjVWcqTAjhJoTYLoTYnZvvXdWZihNCaIUQu4QQ%0Aq1VnKYkQIl0IsTf337wk1XkKE0LUEUIsyf0374AQIkR1pjxCiJa571ne7boQYqLqXIUJISbl\/l6k%0ACCF+FEJU7kKNFiKEiM7Nts\/a3ruKstlCJoTwAdAPwAnVWUrwqZSyvZSyI4DVAN5RHaiYXwG0lVK2%0AB3AIwJuK8xSXAuBRAJtUBwGM\/zME8DWAgQDaAHhKCNFGbaoiFgAYoDpEGXIATJZStgHQHcBYK3v\/%0A7gDoLaXsAKAjgAFCiO6KMxUXDeCA6hDl6CWl7GiFpx+IAfCzlLIVgA6wovdRSpma+551BNAZQCaA%0A5Ypj5RNCNAUwAUCwlLItAC2AJ9WmKiCEaAvgJQBdYfxsHxJCBKpNVXk2W8gAfAHgdQBWdxCclPJ6%0AobuesLKMUsp1Usqc3Lt\/AajclVAtREp5QEppTSf\/7QogTUp5VEqZDWAhgCGKM+WTUm4CcFl1jtJI%0AKc9KKXfmTt+A8X+ITdWmKiCNbubedc69Wc3vrBCiGYDBAOapzmJrhBC1AdwP4L8AIKXMllJeVZuq%0AVH3+v727CfGqisM4\/n3CXtQKzDQsjXEhIRSoC5HsDdReRJR2RgUVWEEGtmiRLlwVRhJBkRBpBI5C%0A+QJBZipFuyQ0xco2ZeqYpZta5Mb0aXGP9Z\/Jacqoc8f\/84Fh5l5m8XBn\/vf+zvndcy\/wje3DtYMM%0AMAIYKWkEMAr4vnKeTlOB3bZPlWvaJzSD+WFpWBZkkhYBx2zvr51lMJKel3QUeJD2zZB1egz4oHaI%0AlrsBONqx3UeLCorhRFIPMB3YXTdJf6UluA84Aey03aZ8r9AMPs\/WDvIXDOyStEfS47XDdJgMnATe%0AKi3fNyWNrh1qEIuBjbVDdLJ9DFhN04k6Dvxse0fdVP18AdwuaaykUcB8YFLlTBestQWZpF2lLzzw%0AaxGwnMpFzhD5sL3C9iSgF1jatnzld1bQtJN625gvLi6SrgQ2A8sGzCJXZ\/tMaRtNBGaWVkh1khYA%0AJ2zvqZ1lCLeV43cfTUv6jtqBihHADGCN7enAL0Cr7gEFkHQZsBB4t3aWTpLG0HQDJgPXA6MlPVQ3%0A1R9sHwReBHYA24F9wJmqof6F1r46yfbc8+2XdAvNP8d+SdCcQPdKmmn7h9r5zqMX2Aas\/A\/j\/MlQ%0A+SQ9AiwA5rjCs0\/+wfFrg2P0H3VNLPvib5J0KU0x1mt7S+08g7H9k6SPae7Ja8MiidnAQknzgSuA%0AqyWtt92aiyL8PpOC7ROSttK0+dtwD2gf0Ncx47mJFhZkNIXsXts\/1g4ywFzgkO2TAJK2ALcC66um%0A6mB7LaUlLekFmr\/5sNTaGbLB2D5ge7ztHts9NAd\/xv9ZjA1F0pSOzUXA17WynI+ke2laIAttn6qd%0AZxj4DJgiaXIZyS4G3qucadhQM3JaCxy0\/XLtPANJGndupbGkkcA8WvKZtf2c7YnlXLcY+KhtxZik%0A0ZKuOvczzWKrNhSzlOvCUUk3lV1zgK8qRhrMA7SsXVkcAWZJGlU+x3No0aIIAEnjy\/cbae4f21A3%0A0YVr7QzZMLeqnADOAoeBJyvnGeg14HJgZ5ll\/NR2azJKuh94FRgHvC9pn+17auWx\/aukpcCHNKuM%0A1tn+slaegSRtBO4CrpXUB6wso8a2mA08DBwo92kBLLe9rWKmThOAt8tq2kuAd2y38vESLXUdsLWc%0AS0YAG2xvrxupn6eB3jKY+hZ4tHKefkoROw94onaWgWzvlrQJ2Etze8vntO+p+JsljQVOA0+1eNHG%0AkPKk\/oiIiIjKhl3LMiIiIuJik4IsIiIiorIUZBERERGVpSCLiIiIqCwFWURERERlKcgiomtJmiTp%0AkKRryvaYst1TN1lEdJsUZBHRtWwfBdYAq8quVcAbtr+rFioiulKeQxYRXa281mkPsA5YAkyzfbpu%0AqojoNnlSf0R0NdunJT1L83Liu1OMRUQNaVlGRDQvdz4O3Fw7SER0pxRkEdHVJE2jeZfgLOAZSRMq%0AR4qILpSCLCK6lpo3Yq8Bltk+ArwErK6bKiK6UQqyiOhmS4AjtneW7deBqZLurJgpIrpQVllGRERE%0AVJYZsoiIiIjKUpBFREREVJaCLCIiIqKyFGQRERERlaUgi4iIiKgsBVlEREREZSnIIiIiIipLQRYR%0AERFR2W93VrYevW1b3AAAAABJRU5ErkJggg==)","c26ef1dd":"But for now, lets see how many words we have in total:","51e83564":"We selected the logistic regression model as it had a good accuracy score and the recall and precsion was quite good. Although it tended to overfit the train data set, it gave the best score on Kaggle than the others and the least loss function value. ","20677465":"We'd recommend that more time be focussed on exploring the data than the modelling, otherwise, it was a fun project!","fd77657d":"### Lemmatization","a57f66a3":"In text analytics, removing unneccesary information is a key part of getting the data into a usable format. Some techniques are standard, while your own data will require some creative thinking on your part.\n\nFor the MBTI data set we will be doing the following steps:\n\n* removing the web-urls\n* making everything lower case\n* removing punctuation","ee59717a":"## What are the words that are most prominent in the posts for extroverted personalities ?","098d7ede":"### And now we resample the rest of the I's accordingly with the majority class","fad33594":"### It looks like we have very few samples for the 'ES' types and our data is completely imbalanced. This kind of distribution may affect our accuracy during the predictive processes.\n\n### To try to combat this, we increased the size of the dataset by converting each of the 50 posts into the posts column into its own row.\n\n\n","e7f756e6":"In oroder to be able to pass our lemmatized tokens into our pipeline for modelling, they need to be converted to objects and the following method does so by detokenizing the lemmatized list of words","a7953b25":"## Load the Dataset","0af89596":"* Removing Noise\n* Tokenising\n* Stemming\n* Lemmatisation","2b47bb6a":"# Class Imbalance","e471bbe6":"#### NLTK","0d2ff8b2":"Our data, although it has an internal structure, it is considered \"unstructured\" because the data it contains doesn't fit neatly in a database. On top of that, some words are really not significant for modelling. We will fix this by using a library dedicated just to process language as naturally as humans would, the NLTK.","20fb0b83":"A tokenizer divides text into a sequence of tokens, which roughly correspond to \"words\". We will use tokenisers to clean up the data, making it ready for analysis.","1bbccbab":"## Removing Noise","515cf7e0":"# Recommendations","cd59f3f0":"# Introduction","01503f8b":"NLTK - natural language toolkit - is a leading library for building Python programs to work with human language data. It provides easy-to-use interfaces to over 50 corpora and lexical resources such as WordNet, along with a suite of text processing libraries for classification, tokenization, stemming, tagging, parsing, and semantic reasoning (more on this stuff below), wrappers for industrial-strength NLP libraries, and an active discussion forum.","2e64d4c8":"## Loading the required modules","2f067080":"![Tree1](https:\/\/res.cloudinary.com\/dyd911kmh\/image\/upload\/f_auto,q_auto:best\/v1545934190\/1_r5ikdb.png)","8be30c3a":"# Table of content","0e385efe":"1. Loading the required modules\n\n\n2. Loading the dataset\n\n\n3. Exploratory Data Analysis(EDA)\n\n\n4. Data Cleaning using NLTK\n\n    4.1. Removing Noise\n    \n    4.2. Tokenizing\n    \n    4.3. Stemming\n    \n    4.4. Lemmatizing\n    \n5. Splitting the data\n\n\n6. Modelling\n\n     6.1.1. Baseline Model\n     \n     6.1.2. Naive Bayes\n     \n     6.1.3. Logistic Regression\n     \n     6.1.4. Decision Trees\n     \n     6.1.5. XGBoost\n     \n     6.1.6. GridSearchCV\n     \n7. Discussion of the results\n\n8. Conclusion\n\n8. Recommendations","cfb659b9":"A very similar operation to stemming is called lemmatizing. Lemmatizing is the process of grouping words of similar meaning together. So, your root stem, meaning the word you end up with, is not something you can just look up in a dictionary, but you can look up a lemma.\nFor example: cacti becomes cactus","1a0e6ba5":"### However, this method didn't work quite well as it only increased the frequency of the minority classes by a small percentage, and didnt really deal with the class imbalance. Later in our code, after cleaning the data we will deal with the datas' class imbalance","a9febd26":"### Creating the dataset for the ML Algorithms","f928ed50":"# Exploratory Data Analysis","f058fb5e":"## Make Pipeline","22b2d064":"### Tokenization","65ca2500":"## Baseline Model","507abc64":"## Sample Submission","9addb86c":"Stemming is the process of transforming to the root word, that is, it uses an algorithm that removes common word endings from English words, such as \u201cly,\u201d \u201ces,\u201d \u201ced,\u201d and \u201cs.\u201d\n\nFor example, assuming for an analysis you may want to consider \u201ccarefully,\u201d \u201ccared,\u201d \u201ccares,\u201d \u201ccaringly\u201d as \u201ccare\u201d instead of separate words. There are three widely used stemming algorithms, of which we will be using the SnowballStemmer:\n","8f40188d":"# Naive Bayes","fa2dff43":"# Data Cleaning using NLTK","78c83fca":"Logistic regression is a statistical model that in its basic form uses a logistic function to model a binary dependent variable. In our case, we have a multiclassed target variable.\nMultinomial logistic regression is the generalization of logistic regression algorithm. If the logistic regression algorithm used for the multi-classification task, then the same logistic regression algorithm called as the multinomial logistic regression.\n\nThe difference is that they use the different functions.\n\nIn the logistic regression, the black function which takes the input features and calculates the probabilities of the possible two outcomes is the Sigmoid Function. When it comes to the multinomial logistic regression the function is the Softmax Function.","c68b3254":"### Next, lets actually see how many posts each personality type has in total","2894ab22":"Naive Bayes is a classification algorithm that uses the principle of Bayes theorem to make classifications. The benefits of Naive Bayes are that the model is simple to build and useful on large data sets. Further, the model makes an explicit assumption that the features are independent given the class label","ff5f8dae":"What follows after this is an exploration of the data, a peak at what we are dealing with. This EDA will help us determine how to preprocess our data for modelling later on, to get good accuracies on our predictions","df49b87f":"# Decision Trees","8144ac01":"We are going to use DummyClassifier to make predictions using simple rules. This classifier is useful as a simple baseline to compare with other (real) classifiers as a performance measure to compare to see which performs better than this model. The dummy classifier gives you a measure of \"baseline\" performance--i.e. the success rate one should expect to achieve even if simply guessing.","ebbe3f82":"A decision tree is a flowchart-like tree structure where an internal node represents feature(or attribute), the branch represents a decision rule, and each leaf node represents the outcome. The topmost node in a decision tree is known as the root node. It learns to partition on the basis of the attribute value. It partitions the tree in recursively manner call recursive partitioning. This flowchart-like structure helps you in decision making. It's visualization like a flowchart diagram which easily mimics the human level thinking. We used it as one of our models as it is known to work better on imbalanced data.","ac91ccfa":"Eureka! Now it is totally balanced. We can officially split the data for modelling.","3c925603":"As discussed earlier in the notebook, our data is completely imbalanced and for better predictive processes, you'd rather use a balanced dataset, than not. \nWe used a resample function from sklearn that resample the data in a consistent way.The default strategy implements one step of the bootstrapping procedure.The bootstrap method involves iteratively resampling a dataset with replacing the data by repeating some posts","9e4c19c1":"Haing explored the data set, there were so many things we overlooked in the beginning that we thought wouldn't influence the model so much. During our research about what kind of models would work the best with our type of data, we assumed that using that model and tuning the parameters would be enough but it only got us so far.\nAfter testing the data, we only checked the accuracy score which was one one way to see its predictive powers. Once we used the classification report as well, we were then better able to decide not only which model gave the best accuracy but which one did the best in recall and precision as well. Having a good accuracy score is good but not if isn't as precise on predicting correct on most iterations\nWe explored the Decision tree as it is better at modelling imbalanced data but once we modelled the upsampled data, it still had a lower accuracy score than the Logistic regression.\nThe other models were good but performed almost the same as the logistic regression, so because of the time it took to process, we used the model that was the quickest.\nOur naive bayes performed the worst amongst our data because of its functionlity with text data. It usually performs better with numerical data so we aren't surprised at the outcome\n\n\n","bb4992b4":"# Modelling","452c9708":"# Conclusion","37c70b1f":"After a bit of manipulation we arrive at:","8de130e8":"### Shuuuu! So many words, but are they all necassary? some maybe not. So now we'll clean the data, removing all the unnecessary words and punctuation to make it polished enough for modelling. ","23fea6dd":"# Final Submission","600146d6":"### Stemming","3b64ad3d":"To make our modelling easier, we will use a pipeline to include our CountVectorizer() and TfidfTransformer() that'll be used by our models. A machine learning pipeline is used to help automate machine learning workflows. They operate by enabling a sequence of data to be transformed and correlated together in a model that can be tested and evaluated to achieve an outcome, whether positive or negative","f74d373a":"### We will begin by resampling the E's accordingly with the majority class","1ab40a4b":"# train_test_split","2f5b3004":"Defined by the function:","550723d0":"$$\\begin{align}\n1 - P(X) &= \\displaystyle \\frac{1}{1+e^{\\beta_0 + \\beta_1 X}} \\\\\n\\therefore \\log \\left( \\frac{P(X)}{1-P(X)} \\right) &= {\\beta_0 + \\beta_1 X}\n\\end{align}$$","943d1e29":"## What are the words that are most prominent in the posts for introverted personalities ?","6b920296":"# Discussion of the Results","35dbf587":"We get started by loading all the required modules and defining all the constants that we will be needing all throughout the notebook","2a6d3f8a":"# Logistic Regression","6e33229e":"These words seem common between the two seemingly different personalities, but as we look deeper we see the difference so maybe the line between the two personalities is thin","52f4482e":"$$P(X) = \\displaystyle \\frac{e^{\\beta_0 + \\beta_1 X}}{1+e^{\\beta_0 + \\beta_1 X}}$$","897d4061":"How does our data look like now?"}}