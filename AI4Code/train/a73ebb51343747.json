{"cell_type":{"f4b23998":"code","b22dd796":"code","6a6179ff":"code","88c7f53c":"code","21ae1719":"code","d868a74b":"code","22508956":"code","a222ae5f":"code","883ae411":"code","7ab5cd66":"code","380547ed":"code","9705ac05":"code","6ca56734":"code","39f238b3":"code","82143e34":"code","8fae440c":"markdown","b7be73bc":"markdown","674eef56":"markdown","be62f5f8":"markdown","2781fea7":"markdown","7141f241":"markdown","351b01c1":"markdown"},"source":{"f4b23998":"import tensorflow.keras as keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import History\nimport matplotlib.pyplot as plt\nimport numpy as np","b22dd796":"datagen = ImageDataGenerator(\n    rescale = 1.0\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip = True,\n    validation_split=0.1\n)\n\nbatch_size = 16\nnum_classes = 2\nimage_size = 100","6a6179ff":"train_generator = datagen.flow_from_directory(\n    '..\/input\/colorectal-cancer\/data',\n    target_size = (image_size, image_size),\n    batch_size = batch_size,\n    class_mode = 'binary',\n    subset='training'\n)\n\ndev_generator = datagen.flow_from_directory(\n    '..\/input\/colorectal-cancer\/data',\n    target_size = (image_size, image_size),\n    batch_size = batch_size,\n    class_mode = 'binary',\n    subset='validation'\n)","88c7f53c":"sample = train_generator.next();\nplt.imshow(sample[0][0])\ntrain_generator.reset()","21ae1719":"INIT_LR = 0.001","d868a74b":"model = Sequential()\nmodel.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel.add(Conv2D(64,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(128,(3,3)\n        ,input_shape=(image_size,image_size,3)\n        ,activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.1))\nmodel.add(Dense(1,activation='sigmoid'))\n\n\nmodel.summary()","22508956":"#import tensorflow as tf\nmodel.compile(loss='binary_crossentropy',\n              optimizer='Adam',\n              metrics=['accuracy'])\n","a222ae5f":"history=model.fit_generator(\n    train_generator,\n    steps_per_epoch=2000 \/\/ batch_size,\n    epochs=50,\n    validation_data=dev_generator,\n    validation_steps=800 \/\/ batch_size)","883ae411":"metrics = history.history\n\nplt.subplot(211)\n\nplt.plot(metrics['acc'],color='blue')\nplt.plot(metrics['val_acc'],color='green')\n\nplt.subplot(212)\n\nplt.plot(metrics['loss'],color='yellow')\nplt.plot(metrics['val_loss'],color='red')","7ab5cd66":"import pandas as pd\n\ndata = {'y_Actual':    [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\n        'y_Predicted': [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0]\n        }\n\ndf = pd.DataFrame(data, columns=['y_Actual','y_Predicted'])\nprint (df)","380547ed":"confusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])\nprint (confusion_matrix)","9705ac05":"import pandas as pd\n\ndata = {'y_Actual':    [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\n        'y_Predicted': [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0]\n        }\n\ndf = pd.DataFrame(data, columns=['y_Actual','y_Predicted'])\n\nconfusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])\nprint (confusion_matrix)","6ca56734":"import pandas as pd\nimport seaborn as sn\nimport matplotlib.pyplot as plt\n\ndata = {'y_Actual':    [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\n        'y_Predicted': [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0]\n        }\n\ndf = pd.DataFrame(data, columns=['y_Actual','y_Predicted'])\nconfusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])\n\nsn.heatmap(confusion_matrix, annot=True)\nplt.show()","39f238b3":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","82143e34":"# roc curve and auc\nfrom sklearn.datasets import make_classification\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom matplotlib import pyplot\n# generate 2 class dataset\nX, y = make_classification(n_samples=1000, n_classes=2, random_state=1)\n# split into train\/test sets\ntrainX, testX, trainy, testy = train_test_split(X, y, test_size=0.5, random_state=2)\n# generate a no skill prediction (majority class)\nns_probs = [0 for _ in range(len(testy))]\n# fit a model\nmodel = LogisticRegression(solver='lbfgs')\nmodel.fit(trainX, trainy)\n# predict probabilities\nlr_probs = model.predict_proba(testX)\n# keep probabilities for the positive outcome only\nlr_probs = lr_probs[:, 1]\n# calculate scores\nns_auc = roc_auc_score(testy, ns_probs)\nlr_auc = roc_auc_score(testy, lr_probs)\n# summarize scores\nprint('No Skill: ROC AUC=%.3f' % (ns_auc))\nprint('Logistic: ROC AUC=%.3f' % (lr_auc))\n# calculate roc curves\nns_fpr, ns_tpr, _ = roc_curve(testy, ns_probs)\nlr_fpr, lr_tpr, _ = roc_curve(testy, lr_probs)\n# plot the roc curve for the model\npyplot.plot(ns_fpr, ns_tpr, linestyle='--', label='Predicted')\npyplot.plot(lr_fpr, lr_tpr, marker='.', label='True')\n# axis labels\npyplot.xlabel('False Positive Rate')\npyplot.ylabel('True Positive Rate')\n# show the legend\npyplot.legend()\n# show the plot\npyplot.show()","8fae440c":"# Colorectal Cancer Classification using CNN\n\nThis kernel is a demonstration of using CNN with keras on tensorflow to classify if an image of a cell has Malaria or not.","b7be73bc":"### Define the Model\nThe model is as follows.","674eef56":"### Input Data\nUsing `flow_from_directory` from keras lets us easily import the images into our script. It automatically lables the images according to the folder names.","be62f5f8":"### Visualize the results","2781fea7":"### Data Augmentation\nHere, I use `ImageDataGenerator` from keras.","7141f241":"### Visualize\nLet us inspect an image from the dataset.","351b01c1":"### Time to Train!"}}