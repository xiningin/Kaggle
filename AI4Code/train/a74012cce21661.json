{"cell_type":{"a8e6505c":"code","7a558a96":"code","d04c19a7":"code","3c62f6b4":"code","0851a240":"code","87cc17af":"code","58b387b9":"code","d900ca40":"code","3aedd225":"code","c1fbda7f":"code","5317a055":"code","fb1b19c9":"code","3f83263d":"code","e9b233a2":"markdown","ea9ade8c":"markdown","36110f7b":"markdown","13c66e47":"markdown","f643d69d":"markdown","a9582be6":"markdown"},"source":{"a8e6505c":"\"In the name of Allah, The Most Gracious and The Most Merciful\"","7a558a96":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'): # new way of reading comppetition input  \n     for filename in filenames:\n        name = os.path.join(dirname, filename)\n        print(name)\n        if \"train.csv\" in name:                   \n            df = pd.read_csv(name, index_col=\"id\")                \n        elif \"test.csv\" in name:\n            test = pd.read_csv(name, index_col=\"id\")              \n        elif \"submission.csv\" in name:\n            sample = pd.read_csv(name) ","d04c19a7":"df.info(), test.info()","3c62f6b4":"df.describe().T  ","0851a240":"test.shape, df.shape","87cc17af":"def add_standard_time(df): \n    ms = df['song_duration_ms']\n    millis = ms\n    seconds=(millis\/1000)%60\n    minutes=(millis\/(1000*60))%60\n    hours=(millis\/(1000*60*60))%24\n    df['song_duration_s'] = seconds\n    df['song_duration_m'] = minutes\n    df['song_duration_h'] = hours\n    return df\n\ndf = add_standard_time(df)\ntest = add_standard_time(test)\n","58b387b9":"plt.figure(figsize=(12,8))\nsns.heatmap(df.corr(), annot=True)\nplt.title(\"Correlation rates\")\nplt.show()","d900ca40":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\nFEATURES = [name for name in df.drop('song_popularity', axis=1).columns]\nimp_mean = IterativeImputer(random_state=17)\ntrain = imp_mean.fit_transform(df[FEATURES])\ntest_new = imp_mean.fit_transform(test[FEATURES])\nX_train = pd.DataFrame(train, columns=FEATURES)\nX_test = pd.DataFrame(test_new, columns=FEATURES)\ny_train = df['song_popularity']","3aedd225":"def to_log10(df): #based on my previous notebooks, I have decided to change following features \n    for num,i in enumerate(df.columns):\n        if num in [1,6,9,10,12]:\n            df[i] = np.log10(df[i] + 1)\n    return df\n\nX_train = to_log10(X_train)\nX_test = to_log10(X_test)","c1fbda7f":"from catboost import CatBoostRegressor\n\nrandom_booster = CatBoostRegressor()\n\nrandom_params = {'iterations':[5,50,],\n                 'learning_rate':[0.01, 0.1],\n                 'bootstrap_type':['Bayesian', 'Bernoulli', 'MVS']}\n\n\nrandomized_search_results = random_booster.randomized_search(random_params, X_train, y_train, cv=5, n_iter=8)\n\nprint(\"\\nBest Params : \", randomized_search_results['params'])","5317a055":"from sklearn.model_selection import cross_val_score\ncross_val_score(random_booster, X_train, y_train, cv=5, scoring='roc_auc')","fb1b19c9":"ypred = random_booster.predict(X_test)\nsample['song_popularity'] = ypred\nsample.to_csv('submission_with_catboost.csv', index=False)","3f83263d":"sample","e9b233a2":"# Transferring several features","ea9ade8c":"# Quick overview ","36110f7b":"# Submission","13c66e47":"# Understanding music concepts\n\n![Music](https:\/\/i.postimg.cc\/tgwxZb8K\/image.png)","f643d69d":"# CatBoost Regression\n >randomized seach helps to avoid overfitting ","a9582be6":"# Cross Validation"}}