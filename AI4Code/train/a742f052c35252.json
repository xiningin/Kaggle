{"cell_type":{"6a2aef3c":"code","27751748":"code","cbd0b098":"code","5c0a6824":"code","68086da9":"code","96c08d94":"code","16cfe757":"code","8ffeb7aa":"code","d28235b7":"code","d49bfc41":"code","bfe7ef74":"code","fd97e2c7":"code","6dab7f05":"code","6ec45daf":"code","6f5daa02":"markdown","9bd2771c":"markdown","43e67976":"markdown","e3498014":"markdown","2093f0f5":"markdown","f46a6fbc":"markdown","cedf0f50":"markdown","bb543844":"markdown","ee658c6f":"markdown"},"source":{"6a2aef3c":"#Importing necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n%matplotlib inline \nimport seaborn as sns\nmpl.style.use('ggplot')\n\n","27751748":"#Reading the file. I checked the file beforehand and saw that data is read with \",\" as decimal separator rather than default \".\". So, I made sure that decimals are read as \",\".\ndf = pd.read_csv('..\/input\/countries of the world.csv', decimal=',')","cbd0b098":"#Checking the overall structure\ndf.head()","5c0a6824":"#Checking data field types\ndf.dtypes\n","68086da9":"#Checking if there are missing values\ndf.isnull().sum()","96c08d94":"#As there are some missing values and there is already low number of data, instead of dropping them, I replaced missing values for each row, with mean of the region that specific country belongs to.\ndf['Service'] = df.groupby(['Region'])['Service'].transform(lambda x: x.fillna(x.mean()))\ndf['Industry'] = df.groupby(['Region'])['Industry'].transform(lambda x: x.fillna(x.mean()))\ndf['Agriculture'] = df.groupby(['Region'])['Agriculture'].transform(lambda x: x.fillna(x.mean()))\ndf['Deathrate'] = df.groupby(['Region'])['Deathrate'].transform(lambda x: x.fillna(x.mean()))\ndf['Birthrate'] = df.groupby(['Region'])['Birthrate'].transform(lambda x: x.fillna(x.mean()))\ndf['Climate'] = df.groupby(['Region'])['Climate'].transform(lambda x: x.fillna(x.mean()))\ndf['Other (%)'] = df.groupby(['Region'])['Other (%)'].transform(lambda x: x.fillna(x.mean()))\ndf['Crops (%)'] = df.groupby(['Region'])['Crops (%)'].transform(lambda x: x.fillna(x.mean()))\ndf['Arable (%)'] = df.groupby(['Region'])['Arable (%)'].transform(lambda x: x.fillna(x.mean()))\ndf['Literacy (%)'] = df.groupby(['Region'])['Literacy (%)'].transform(lambda x: x.fillna(x.mean()))\ndf['Phones (per 1000)'] = df.groupby(['Region'])['Phones (per 1000)'].transform(lambda x: x.fillna(x.mean()))\ndf['GDP ($ per capita)'] = df.groupby(['Region'])['GDP ($ per capita)'].transform(lambda x: x.fillna(x.mean()))\ndf['Infant mortality (per 1000 births)'] = df.groupby(['Region'])['Infant mortality (per 1000 births)'].transform(lambda x: x.fillna(x.mean()))\ndf['Net migration'] = df.groupby(['Region'])['Net migration'].transform(lambda x: x.fillna(x.mean()))\n","16cfe757":"#Re-checking the missing values, if we actually filled the missing ones.\ndf.isnull().sum()","8ffeb7aa":"df.hist(bins=100, figsize=(20,20) , color = 'b')","d28235b7":"x = df.groupby(\"Region\", as_index=False)[\"Literacy (%)\"].mean()\nx.set_index(\"Region\",drop=True,inplace=True)\nax = x.plot(kind=\"bar\", title =\"Literacy Rate by Region\", figsize=(10, 8), legend=True, fontsize=10)\nax.set_xlabel(\"Region\", fontsize=12)\nax.set_ylabel(\"Literacy (%)\", fontsize=12)\nplt.show()","d49bfc41":"x = df.groupby(\"Region\", as_index=False)[\"GDP ($ per capita)\"].mean()\nx.set_index(\"Region\",drop=True,inplace=True)\nplt.figure(figsize=(50,50))\nx.plot(kind = \"pie\",colormap = \"jet\", subplots = True, autopct='%1.1f%%', legend=False)\nplt.title(\"% of Total GDP per Capita by Regions\")","bfe7ef74":"plt.figure(figsize=(10,6))\nsns.distplot(df['Infant mortality (per 1000 births)'],color='red')\nplt.title(\"Distribution of Infant Mortality Rate\")\nplt.show()","fd97e2c7":"plt.figure(figsize=(12,7))\nsns.heatmap(cbar=True,annot=True,data=df.corr()*100,cmap='Greens')\nplt.title('% Correlation Matrix')\nplt.show()","6dab7f05":"plt.figure(figsize=(20,6))\nplt.subplots_adjust(hspace = .25)\nplt.subplot(1,2,1)\nplt.xlabel('GDP ($ per capita)',fontsize=12)\nplt.ylabel('Phones (per 1000)',fontsize=12)\nsns.stripplot(data=df,x='GDP ($ per capita)',y='Phones (per 1000)')\n","6ec45daf":"ax = sns.regplot(x='GDP ($ per capita)', y='Phones (per 1000)', data=df)\nax = sns.regplot(x='GDP ($ per capita)', y='Phones (per 1000)', data=df, color='green')\nax = sns.regplot(x='GDP ($ per capita)', y='Phones (per 1000)', data=df, color='green', marker='+')\nplt.figure(figsize=(15, 10))\nsns.set(font_scale=1.5)\nsns.set_style('whitegrid')\nax = sns.regplot(x='GDP ($ per capita)', y='Phones (per 1000)', data=df, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='GDP ($ per capita)', ylabel='Phones (per 1000)')\nax.set_title('Regression Between Income per Capita & Number of Phones Purchased')\n","6f5daa02":"*Strip plot example between two highly correlated variable (to observe the correlation)*","9bd2771c":"**2. Data Visualization**","43e67976":"*Bar chart example*","e3498014":"**1. Reading & preprocessing the data**","2093f0f5":"*Histogram plots of all data*","f46a6fbc":"*Distribution plot example*","cedf0f50":"*Heat map to see correlation as a whole*","bb543844":"*Two different regression plots with same data*","ee658c6f":"*Pie chart example*"}}