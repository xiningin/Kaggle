{"cell_type":{"f20b8adf":"code","d327c4f8":"code","5fad00ac":"code","1cff0926":"code","854d80ff":"code","4fd2f297":"code","99060f64":"code","d3139e61":"code","10afc74b":"code","c5f082ee":"code","75561752":"code","598355b7":"code","bba93354":"code","a3d5d3ce":"code","72ae896b":"code","76d44b2a":"code","2380f9a2":"code","34be5de8":"code","8846ada3":"code","c336c18e":"code","88bdc607":"code","fb819df3":"code","44c3a1ff":"code","5edc0cce":"code","ce05aaaa":"code","7e22a4d6":"code","1fca9aa4":"code","a6813f38":"code","9316b1c5":"code","34d71d71":"code","c04b8238":"code","8e6652d0":"code","0e0092c1":"code","81b2667d":"code","46f85766":"markdown","332b7018":"markdown","78af3eac":"markdown","0656e952":"markdown","33c1b10a":"markdown","7c5345fa":"markdown","7d2abdc6":"markdown","ee125732":"markdown","42864166":"markdown","15b1b933":"markdown","49bbb57d":"markdown","9273568f":"markdown","1f22e058":"markdown","b666242a":"markdown","8e7a1ab1":"markdown","50ff8828":"markdown","2763bdcb":"markdown","755151ed":"markdown","4a9132a2":"markdown","a0d78972":"markdown","90aac066":"markdown","ffaff585":"markdown","70bf8e84":"markdown","b20f79c3":"markdown","6ac4dacf":"markdown","b85cd429":"markdown","ebbd9e2a":"markdown","1dd96ad0":"markdown","0abc29bb":"markdown","034d1027":"markdown","4af67753":"markdown","097ee674":"markdown"},"source":{"f20b8adf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport datetime as dt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nsns.set()","d327c4f8":"# load data from csv files\ntrain = pd.read_csv('..\/input\/ashrae-energy-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ashrae-energy-prediction\/test.csv')\nbuilding = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv')\nweather_train = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv')\nweather_test = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_test.csv')\nsubmission = pd.read_csv('..\/input\/ashrae-energy-prediction\/sample_submission.csv')","5fad00ac":"print('Shape of the data:','\\n','  train_csv: ',train.shape,'\\n','  test_csv: ',test.shape,'\\n',\n      '  building_metadata.csv: ',building.shape,'\\n','  weather_train.csv: ',weather_train.shape,'\\n',\n      '  weather_test.csv: ',weather_test.shape)","1cff0926":"# look at the train_data\ntrain.head()","854d80ff":"# convert 'timestamp' which is a string into datetime object\ntrain['timestamp'] = pd.to_datetime(train['timestamp'])\n\n# let's also extract the pertinent date features like 'hour', 'day', 'day of week' and 'month'\ntrain[\"hour\"] = train[\"timestamp\"].dt.hour.astype(np.int8)\ntrain['day'] = train['timestamp'].dt.day.astype(np.int8)\ntrain[\"weekday\"] = train[\"timestamp\"].dt.weekday.astype(np.int8)\ntrain[\"month\"] = train[\"timestamp\"].dt.month.astype(np.int8)","4fd2f297":"print('Total rows in train: ', len(train))\nprint('Total buildings: ', train['building_id'].nunique(), '\\t', np.sort(train['building_id'].unique()))\nprint('Number of meter types: ', train['meter'].nunique(), '\\t', np.sort(train['meter'].unique()))\nprint('Total hourly intervals: ', train['timestamp'].nunique(), '\\t', np.sort(train['timestamp'].unique()))","99060f64":"print('Count of ', train.groupby('meter')['building_id'].nunique())\nprint('\\n', 'Total meters: ', train.groupby('meter')['building_id'].nunique().sum())","d3139e61":"train['target'] = np.log1p(train['meter_reading'])","10afc74b":"meter_timestamp = {'h':[], 'd':[], 'w':[], 'm':[]}\n\nfor i in range(4):\n    x = train.query('meter == @i')\n    meter_timestamp['h'].append(x.groupby('hour')['target'].mean())\n    meter_timestamp['d'].append(x.groupby('day')['target'].mean())\n    meter_timestamp['w'].append(x.groupby('weekday')['target'].mean())\n    meter_timestamp['m'].append(x.groupby('month')['target'].mean())","c5f082ee":"plt.figure(figsize=(12,12))\nplt.suptitle('Variation of readings for meter types with various time intervals', fontsize=16)\npos = 0\nfor key,value in meter_timestamp.items():\n    plt.subplot(2, 2, pos+1)\n    for meter,readings in enumerate(value):\n        readings.plot(label=meter)\n    pos += 1\n    plt.legend()\nplt.show()","75561752":"plt.figure(figsize=(12, 12))\nplt.suptitle('Distribution of meter readings by meter type', fontsize=16)\nlabels = {0:'Electricity', 1:'Chilled Water', 2:'Steam', 3:'Hot Water'}\ncolors = {0:'navy', 1:'darkorange', 2:'green', 3:'maroon'}\nfor i in range(4):\n    plt.subplot(2,2,i+1)\n    meter = train[train['meter']==i]['target']\n    g = sns.distplot(meter, color=colors[i])\n    plt.xlabel(labels[i])\nplt.show()","598355b7":"from pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\nelectricity = train[train['meter']==0]\nplt.figure(figsize=(20, 40))\nfor i in range(200):\n    plt.subplot(20, 10, i+1)\n    bldg = electricity[electricity['building_id']==i]\n    g = sns.lineplot(y='meter_reading', x='timestamp', data=bldg, color=colors[0])\n    plt.title(\"building %d\" %i,fontsize=10)\n    plt.axis('off')\n    plt.ylim(0,2000)\nplt.show()","bba93354":"chilledwater = train[train['meter']==1]\nbldg_cw = chilledwater['building_id'].unique()\n\nplt.figure(figsize=(20, 20))\nfor i in range(100):\n    index = bldg_cw[i]\n    bldg = chilledwater[chilledwater['building_id']==index]\n    plt.subplot(10, 10, i+1)\n    g = sns.lineplot(y='meter_reading', x='timestamp', data=bldg, color=colors[1])\n    plt.title(\"building %d\" %index,fontsize=10)\n    plt.axis('off')\n    plt.ylim(0, 6000)\nplt.show()","a3d5d3ce":"steam = train[train['meter']==2]\nbldg_st = steam['building_id'].unique()\n\nplt.figure(figsize=(20, 20))\nfor i in range(100):\n    index = bldg_st[i]\n    bldg = steam[steam['building_id']==index]\n    plt.subplot(10, 10, i+1)\n    g = sns.lineplot(y='meter_reading', x='timestamp', data=bldg, color=colors[2])\n    plt.title(\"building %d\" %index,fontsize=10)\n    plt.axis('off')\n    plt.ylim(0, 10000)\nplt.show()","72ae896b":"hotwater = train[train['meter']==3]\nbldg_hw = hotwater['building_id'].unique()\n\nplt.figure(figsize=(20, 20))\nfor i in range(100):\n    index = bldg_hw[i]\n    bldg = hotwater[hotwater['building_id']==index]\n    plt.subplot(10, 10, i+1)\n    g = sns.lineplot(y='meter_reading', x='timestamp', data=bldg, color=colors[3])\n    plt.title(\"building %d\" %index,fontsize=10)\n    plt.axis('off')\n    plt.ylim(0, 4000)\nplt.show()","76d44b2a":"building.head()","2380f9a2":"building.describe()","34be5de8":"print('Total rows in building metadata: ', len(building))\nprint('Total sites: ', building['site_id'].nunique(), '\\t', np.sort(building['site_id'].unique()))\nprint('Total buildings: ', building['building_id'].nunique(), '\\t', np.sort(building['building_id'].unique()))","8846ada3":"building_site = building.groupby('site_id')['building_id'].count()\nplt.figure(figsize=(8,6))\nplt.bar(np.arange(16), building_site)\nplt.title('Number of buildings by Site', fontsize=16)\nplt.xlabel('site_id')\nplt.ylabel('Number')\nplt.show()","c336c18e":"plt.figure(figsize=(12,6))\ng = sns.countplot(y='primary_use',data=building)\nplt.title('Count of primary uses of the buildings', fontsize=16)\nplt.yticks(fontsize=10)\nplt.show()","88bdc607":"plt.figure(figsize=(12, 6))\ng = sns.distplot(building['year_built'].dropna(),bins=24,kde=False)\nplt.title('Distribution of buildings by the year they are built', fontsize=16)\nplt.yticks(fontsize=10)\nplt.show()","fb819df3":"plt.figure(figsize=(12, 7))\ng = sns.scatterplot(y='square_feet',x='floor_count',hue='primary_use',size='square_feet',data=building)\nplt.title('XY plot of square feet vs floor count', fontsize=16)\nplt.yticks(fontsize=10)\nplt.show()","44c3a1ff":"weather_train.head()","5edc0cce":"# convert 'timestamp' which is a string into datetime object\nweather_train['timestamp'] = pd.to_datetime(weather_train['timestamp'])","ce05aaaa":"weather_train.describe()","7e22a4d6":"print('Total rows in weather_train: ', len(weather_train))\nprint('Total sites: ', weather_train['site_id'].nunique(), '\\t', np.sort(weather_train['site_id'].unique()))\nprint('Total hourly intervals: ', weather_train['timestamp'].nunique(), np.sort(weather_train['timestamp'].unique()))","1fca9aa4":"weather_test.head()","a6813f38":"# convert 'timestamp' which is a string into datetime object\nweather_test['timestamp'] = pd.to_datetime(weather_test['timestamp'])","9316b1c5":"weather_test.describe()","34d71d71":"print('Total rows in weather_test: ', len(weather_test))\nprint('Total sites: ', weather_test['site_id'].nunique(), np.sort(weather_test['site_id'].unique()))\nprint('Total hourly intervals: ', weather_test['timestamp'].nunique(), np.sort(weather_test['timestamp'].unique()))","c04b8238":"# let's see if the test data correspond to the train data since this is a time series prediction challenge\ntest.head()","8e6652d0":"# convert 'timestamp' which is a string into datetime object\ntest['timestamp'] = pd.to_datetime(test['timestamp'])\n\n# let's also extract the pertinent date features like 'hour', 'day', 'day of week' and 'month'\ntest[\"hour\"] = test[\"timestamp\"].dt.hour.astype(np.int8)\ntest['day'] = test['timestamp'].dt.day.astype(np.int8)\ntest[\"weekday\"] = test[\"timestamp\"].dt.weekday.astype(np.int8)\ntest[\"month\"] = test[\"timestamp\"].dt.month.astype(np.int8)","0e0092c1":"print('Total rows in test: ', len(test))\nprint('Total buildings: ', test['building_id'].nunique(), '\\t', np.sort(test['building_id'].unique()))\nprint('Number of meter types: ', test['meter'].nunique(), '\\t', np.sort(test['meter'].unique()))\nprint('Total hourly intervals: ', test['timestamp'].nunique(), '\\t', np.sort(test['timestamp'].unique()))","81b2667d":"print('Count of ', test.groupby('meter')['building_id'].nunique())\nprint('\\n', 'Total meters: ', test.groupby('meter')['building_id'].nunique().sum())","46f85766":"### Electricity meter readings","332b7018":"### Visualize how the meter readings varies with timestamp\n* Meter readings were converted to log values for better visualization","78af3eac":"#### Observation:\n* As stated, 'building_id' is the foreign key to the train and test data. Number of unique IDs matches.\n* Total of **16** site IDs, which is the foreign key to the weather data.","0656e952":"#### Observation:\n* No discernable pattern here. Furthermore, we do not know the location of the sites.","33c1b10a":"# Examine the train data","7c5345fa":"#### This notebook explores the data in the ASHRAE Great Energy Predictor III competition, and make some observations along the way","7d2abdc6":"### Hot Water","ee125732":"# Introduction","42864166":"#### Observation:\n* Over 2016 and over the 16 sites, there should register a total of 140,544 hourly readings _(8784*16)_. The weather_train data set has **139,773** rows. This indicates that there are some missed weather observation readings at some sites in the weather_train data.","15b1b933":"### Chilled water meter readings","49bbb57d":"### Meter Reading (Target) Distribution\n* Let's look at the distribution of the meter readings for each type of the meters. Since the metric is RMSLE, we should plot the log of the meter readings.","9273568f":"#### Observation:\n* Over 2017 to 2018, and over the 16 sites, there should register a total of 280,320 hourly readings.\n* But the weather_test data set has less rows, i.e. **277,243** rows.","1f22e058":"#### Observation:\n* The majority of the buildings are from education, offices, entertainment\/public assembly, and public service and residential.","b666242a":"# Finally, let's look at the test data","8e7a1ab1":"### Examine weather_test","50ff8828":"#### Observation:\n* There are some significant variations in readings for different meter types with respect to hours, days, days of week and months, in particular months and days of week.\n* Electricity readings are higher in the day and from April to October generally, and lower towards the weekend.\n* Chilled water readings, which is air-conditioning, are also higher in the day, and significantly higher from April to October. The location and sites should be in the northern hemisphere. \n* Steam and hotwater readings are significant lower in the summer months.\n* We can conclude that the features 'hour', 'day', 'weekday' and 'month' would be very useful for the energy predictions.","2763bdcb":"#### Observation:\n* For building_id up to 110+, it looks like there aren't any electricity readings for the first three to four months. These buildings weren't commissioned or occupied during that time period, perhaps. This could be something to think about when data cleansing or when creating ML models.","755151ed":"#### Observation:\n* Chilled water readings look ok for the buildings shown. Generally, there is a trend of higher readings in the summer months.","4a9132a2":"#### Observation:\n* There are 1449 unique building IDs from 0 to 1448.\n* There are 4 types of meters, i.e 0:electricity; 1:chilledwater; 2:steam; 3:hotwater.\n* Timestamp looks to be from 2016-01-01 to 2016-12-31 at hourly intervals, and there is a total of **8784** _(366*24)_ hourly intervals.","a0d78972":"### Examine weather_train","90aac066":"### Steam","ffaff585":"* Let's also look at some samples of meter readings for individual buildings.","70bf8e84":"# Examine the weather data","b20f79c3":"#### Observation:\n* Steam and hot water generally has a trough in the summer months.","6ac4dacf":"#### Observation:\n* It is stated that not every buildings have all meter types.\n* While the majority of meters are of type '0:electricity', it looks like some buildings don't have electricity meters.\n* There are a total of **2380** meters.\n* Consider over 2016, all these 2380 meters should register a total of 20,905,920 hourly readings _(2380*8784)_. \n* However, the train data set has **20,216,100** rows. This indicates that there are some missed meter readings, probably.","b85cd429":"# Examine the building meta data","ebbd9e2a":"#### That's all for now.....","1dd96ad0":"#### Observation:\n* Looking at the plot, 'square_feet' correspond well with 'floor_count' generally.\n* It is noted that there are many missing values in 'floor_count' (75% missing) and 'year_built' (53% missing). It might not worthwhile to try and impute these missing values.","0abc29bb":"There are two main files - `train.csv` and `test.csv`.  In addition to these files, there are also other files, namely:\n* Meta data on the buildings - `building_metadata.csv`\n* Weather information - `weather_train.csv` and `weather_test.csv`","034d1027":"#### Observation:\n* Similarly, there is a total of **2380** meters.\n* Over the two years from 2017 and 2018, all these 2380 meters should register a total of 41,697,600 hourly readings. The test data set has the same number of **41,697,600** rows. The test data are in order.","4af67753":"Started on `16 October 2019`","097ee674":"#### Observation:\n* Timestamp looks to be over a two-year period from 2017-01-01 to 2018-12-31 at hourly intervals, a total of **17,500** hourly intervals."}}