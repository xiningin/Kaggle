{"cell_type":{"7ee34439":"code","cb0226a9":"code","f6ff9bf8":"code","c5f69a7d":"code","636ee767":"code","2a622ebb":"code","5c7275e8":"code","1c7bfa9a":"code","413061dc":"code","25079287":"code","14be0398":"code","f94c7271":"code","dd57b7fe":"code","d270f1fd":"code","efeb7267":"markdown","4ccc6b8f":"markdown","7d5839b1":"markdown","2f0253ed":"markdown","3411320d":"markdown","86436a4e":"markdown"},"source":{"7ee34439":"# packages\nimport pandas as pd\nimport numpy as np\nimport random\nimport datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cb0226a9":"# load CSV file from Kaggle\npath = \"..\/input\/\"\nspread_scores = pd.read_csv(path + \"nfl-scores-and-betting-data\/spreadspoke_scores.csv\")","f6ff9bf8":"# look at the 2018 season to get a sense of the data\nspread_scores[spread_scores.schedule_season == 2018]","c5f69a7d":"# look at the teams df\nteams = pd.read_csv(path + \"nfl-scores-and-betting-data\/nfl_teams.csv\")\nteams.head()","636ee767":"# select 1979 through 2018\nspread_scores = spread_scores[(spread_scores.schedule_season >= 1979) & (spread_scores.schedule_season <= 2018)]\nspread_scores","2a622ebb":"# add id fields for home and away teams\nspread_scores = spread_scores.merge(teams[['team_name', 'team_id']], left_on = 'team_home', right_on = 'team_name').rename(columns = {'team_id': 'team_home_id'})\nspread_scores = spread_scores.merge(teams[['team_name', 'team_id']], left_on = 'team_away', right_on = 'team_name').rename(columns = {'team_id': 'team_away_id'})\nspread_scores.drop(columns = ['team_name_x', 'team_name_y'], inplace = True)\nspread_scores","5c7275e8":"# the bettor class represents a bettor with a strategy\nclass bettor():\n    def __init__(self, **kwargs):\n        self.alive = True\n        self.picked = []\n        self.life_span = 0\n        self.strategy = kwargs['strategy']  ## do I need to unpack this from **kwargs, or does this work?\n        self.strategy0_top_n = kwargs['strategy0_top_n']\n        self.strategy1_n = kwargs['strategy1_n']\n        #  self.team = kwargs['team_list']  ##list of agents on your team - reserve - need to code\n        \n    def make_pick(self, season, week): # make a pick based on your strategy\n        if self.strategy == 0: # code the strategy of choosing the randomly amoung the n best remaining odds \n            try: # work around becuase it returns an error on short seasons - need to qc more\n                idx = random.choice(\n                    spread_scores[\n                        (spread_scores.schedule_season == season) & \n                        (spread_scores.schedule_week == week) & \n                        (~spread_scores.team_favorite_id.isin(self.picked))\n                    ].nsmallest(\n                        self.strategy0_top_n, columns = 'spread_favorite', keep = 'all'\n                    ).index\n                )\n                pick = spread_scores.loc[idx,'team_favorite_id']\n                \n            except: #  end the betting if no dataframe is returned\n                idx = 'none'\n                pick = 'none'      \n    \n        if self.strategy == 1: # code the strategy of choosing the nth best remaining odds \n\n            try: # returns an error on short seasons - need to check if there have been missing weeks\n                idx = random.choice(self.select_n(season, week, self.strategy1_n))\n                pick = spread_scores.loc[idx,'team_favorite_id']\n                \n            except: #  end the betting if no dataframe is returned\n                idx = 'none'\n                pick = 'none' \n            \n        self.picked.append(pick)    \n        return pick, idx\n   \n    def select_n(self, season, week, n):  \n        #helper function for strategy #1 since it is tricky to find the nth best with all the duplicated spreads \n        if n == 1:\n            idx_list = spread_scores[\n                (spread_scores.schedule_season == season) & \n                (spread_scores.schedule_week == week) & \n                (~spread_scores.team_favorite_id.isin(self.picked))\n                ].nsmallest(\n                    n, columns = 'spread_favorite', keep = 'all'\n                ).index.tolist()\n            return idx_list\n        else:\n            idx_n_list = spread_scores[\n                (spread_scores.schedule_season == season) & \n                (spread_scores.schedule_week == week) & \n                (~spread_scores.team_favorite_id.isin(self.picked))\n                ].nsmallest(\n                    n, columns = 'spread_favorite', keep = 'all'\n                ).index.tolist()\n\n            idx_n_1_list = spread_scores[\n                (spread_scores.schedule_season == season) & \n                (spread_scores.schedule_week == week) & \n                (~spread_scores.team_favorite_id.isin(self.picked))\n                ].nsmallest(\n                    n-1, columns = 'spread_favorite', keep = 'all'\n                ).index.tolist()\n\n            idx_list = [i for i in idx_n_list if i not in idx_n_1_list]\n\n            if idx_list ==  []:\n                return self.select_n(season, week, n-1)  #recursion is fun\n            else:\n                return idx_list\n\n        \n    def survive(self, pick, idx, season, week): #check to see if the bettor survived the week\n        if pick == 'none':  # if no pick, then toggle to dead and update life_span\n            self.life_span = int(week)-1\n            self.alive = False\n        else:\n            # ID the winner\n            if spread_scores.loc[idx,'score_home'] > spread_scores.loc[idx,'score_away']:\n                winner = spread_scores.loc[idx,'team_home_id']\n            elif spread_scores.loc[idx,'score_home'] < spread_scores.loc[idx,'score_away']:\n                winner = spread_scores.loc[idx,'team_away_id']  \n            else:\n                winner = 'tie'\n            \n            \n            # if the winner was picked, then pass and keep going, if the winner was not picked, then toggle to dead and update life_span.   \n            # print('season',season,'week',week,'pick',pick,'winner',winner)\n            if pick == winner:\n                pass\n            else:\n                self.life_span = int(week)-1\n                self.alive = False\n            \n    def run_season(self, season): \n        # runs a season for a bettor, but I want to move this outside of the bettor class to allow more flexibility \n        # (e.g., bettors acting as a team)\n        self.alive = True\n        self.picked = []\n        self.life_span = 0\n    \n        for week in range(1,18):\n            p, pi = self.make_pick(season, str(week))\n            self.survive(p, pi, season, str(week))\n            if self.alive == False:\n                break\n                \n        return self.life_span\n","1c7bfa9a":"swill = bettor(strategy = 0, strategy0_top_n = 3, strategy1_n = 1)\nswill.run_season(2016)","413061dc":"swill = bettor(strategy = 1, strategy0_top_n = 1, strategy1_n = 3)\nswill.run_season(2016)","25079287":"# a function to run 40 years of simulations\ndef tournaments(bettors, strategies):\n    \n    results = pd.DataFrame()\n    results['strategy'] = strategies\n    \n    for season in range (1979, 2019):\n        life_spans = []\n        for bettor_obj in bettors:\n            life_spans.append(bettor_obj.run_season(season))\n        results[season] = life_spans    \n        maximum = max(life_spans)\n        results[str(season)+'_take'] = results[season]==maximum\n        results[str(season)+'_take'] = results[str(season)+'_take']\/sum(results[str(season)+'_take'])        \n        print('completed',season,'season')\n    return results","14be0398":"# make a list of bettors and strategies for the tournament\nbettor_list = []\nstrategy_list = []\nbettors = 4\nfor n in range(1,10):\n    for s in range(2):\n        for b in range(bettors):\n            swill = bettor(strategy = s, strategy0_top_n = n, strategy1_n = n)\n            bettor_list.append(swill)\n            strategy_list.append('s'+str(s)+'_'+'n'+str(n))\n\n# print(bettor_list,strategy_list)","f94c7271":"results = tournaments(bettor_list, strategy_list)","dd57b7fe":"# crunch the results of the simulation\ncols = results.columns.tolist()\ntake_cols = list(c for c in cols if 'take' in str(c))\nresults.groupby(by = 'strategy').sum()[take_cols]","d270f1fd":"pd.DataFrame(results.groupby(by = 'strategy').sum()[take_cols].sum(axis=1))","efeb7267":"## Data Wrangling","4ccc6b8f":"Run some tournaments","7d5839b1":"## Betting simulation framework","2f0253ed":"Run some checks to see if the bettor class is working as intended","3411320d":"## Purpose\n\nThe last man standing is betting game that last the duration of the NFL season.  \n* Each bettor chooses one team to win each week.  \n* If the team looses, then bettor is knocked out.  \n* The bettor cannot choose the same team twice.  \n* The last bettor alive wins the pot.  \n\nThe purpose of this analysis is to compare betting strategies within a pool of contestants.  In particular, selecting a favorite may increase the chance for survival to the next week, but not maximize that chance of winning the pool that year (since many other contestants will do the same thing).  Is there another betting strategy that is more likely to optimize the change of winning the pool?  ","86436a4e":"# NFL Last Man Standing Betting Strategy"}}