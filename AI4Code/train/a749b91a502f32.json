{"cell_type":{"53761e56":"code","98bd3bb3":"code","117cfd10":"code","34c74cc3":"code","ef78ce2c":"code","8456a8fa":"code","91f999c3":"code","6148abd6":"code","2afbad54":"code","6706e4dc":"markdown","19f3e7af":"markdown","e0605baa":"markdown","eae4057e":"markdown","a15b6327":"markdown"},"source":{"53761e56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","98bd3bb3":"from sklearn.datasets import load_iris","117cfd10":"iris = load_iris()\ndata = iris.data\nfeature_names = iris.feature_names\ny = iris.target","34c74cc3":"df = pd.DataFrame(data, columns=feature_names)\ndf[\"sinif\"] = y\nx = data","ef78ce2c":"from sklearn.decomposition import PCA\n\n#We reduce the number of feature from 4 to 2 with 3% data loss.\npca = PCA(n_components = 2,whiten = True)#whiten =>to normalize feature\npca.fit(x)#fit the model\nx_pca = pca.transform(x)#and apply the model","8456a8fa":"print(\"variance ratio: \",pca.explained_variance_ratio_)","91f999c3":"print(\"sum: \",sum(pca.explained_variance_ratio_))","6148abd6":"df[\"p1\"] = x_pca[:,0] #principle component(P1)\ndf[\"p2\"] = x_pca[:,1] #second component(P2)","2afbad54":"color = [\"red\",\"green\",\"blue\"]\n\nimport matplotlib.pyplot as plt\nfor each in range(3):\n    plt.scatter(df.p1[df.sinif == each],df.p2[df.sinif == each],color = color[each],label = iris.target_names[each])\nplt.legend()\nplt.xlabel(\"p1\")\nplt.ylabel(\"p2\")\nplt.show()","6706e4dc":"* **Now, we can visualize our data easily.**","19f3e7af":"# Applying PCA","e0605baa":"* **As you can see, I have 97 percent of my data.**","eae4057e":"# Conclusion\n* **If you like it, Please upvote my kernel.**\n* **If you have any question, I will happy to hear it.**","a15b6327":"# INTRODUCTION\n* **In this kernel,we will see Principal Component Analysis (PCA).**"}}