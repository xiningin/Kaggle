{"cell_type":{"55a3d979":"code","dfc34a84":"code","be388883":"code","d70e6197":"code","4fb9c4b9":"code","3b95630e":"code","71bc3ab7":"code","bfba994c":"code","727b9096":"markdown","6bda7c76":"markdown","b52f1ad4":"markdown","d03705f7":"markdown","d6f2b29c":"markdown","72ee8cc2":"markdown","28bac100":"markdown","57f4ca4e":"markdown","1afceb9a":"markdown"},"source":{"55a3d979":"import numpy as np\nimport pandas as pd\nimport numba\nfrom sympy import isprime, primerange\nfrom math import sqrt\nfrom sklearn.neighbors import KDTree\nfrom tqdm import tqdm_notebook as tqdm\nfrom itertools import combinations, permutations\nfrom functools import lru_cache","dfc34a84":"cities = pd.read_csv('..\/input\/traveling-santa-2018-prime-paths\/cities.csv', index_col=['CityId'])\nXY = np.stack((cities.X.astype(np.float32), cities.Y.astype(np.float32)), axis=1)\nis_not_prime = np.array([0 if isprime(i) else 1 for i in cities.index], dtype=np.int32)","be388883":"@numba.jit('f8(i8, i8, i8)', nopython=True, parallel=False)\ndef cities_distance(offset, id_from, id_to):\n    xy_from, xy_to = XY[id_from], XY[id_to]\n    dx, dy = xy_from[0] - xy_to[0], xy_from[1] - xy_to[1]\n    distance = sqrt(dx * dx + dy * dy)\n    if offset % 10 == 9 and is_not_prime[id_from]:\n        return 1.1 * distance\n    return distance\n\n\n@numba.jit('f8(i4, i8[:])', nopython=True, parallel=False)\ndef score_chunk(offset, chunk):\n    pure_distance, penalty = 0.0, 0.0\n    penalty_modulo = 9 - offset % 10\n    for path_index in numba.prange(chunk.shape[0] - 1):\n        id_from, id_to = chunk[path_index], chunk[path_index+1]\n        xy_from, xy_to = XY[id_from], XY[id_to]\n        dx, dy = xy_from[0] - xy_to[0], xy_from[1] - xy_to[1]\n        distance = sqrt(dx * dx + dy * dy)\n        pure_distance += distance\n        if path_index % 10 == penalty_modulo and is_not_prime[id_from]:\n            penalty += distance\n    return pure_distance + 0.1 * penalty\n\n\n@numba.jit('f8(i8[:])', nopython=True, parallel=False)\ndef score_path(path):\n    return score_chunk(0, path)\n\n\n@numba.jit\ndef chunk_scores(chunk):\n    scores = np.zeros(10)\n    pure_distance = 0\n    for i in numba.prange(chunk.shape[0] - 1):\n        id_from, id_to = chunk[i], chunk[i+1]\n        xy_from, xy_to = XY[id_from], XY[id_to]\n        dx, dy = xy_from[0] - xy_to[0], xy_from[1] - xy_to[1]\n        distance = sqrt(dx * dx + dy * dy)\n        pure_distance += distance\n        if is_not_prime[id_from]:\n            scores[9-i%10] += distance\n    scores *= 0.1\n    scores += pure_distance\n    return scores","d70e6197":"@numba.jit('f8(i8, i8, i8[:], i8[:], i8[:], i8, f8[:,:], i8[:])', nopython=True, parallel=False)\ndef score_compound_chunk(offset, head, firsts, lasts, lens, tail, scores, indexes):\n    score = 0.0\n    last_city_id = head\n    for i in numba.prange(len(indexes)):\n        index = indexes[i]\n        first, last, chunk_len = firsts[index], lasts[index], lens[index]\n        score += cities_distance(offset, last_city_id, first)\n        score += scores[index, (offset + 1) % 10]\n        last_city_id = last\n        offset += chunk_len\n    return score + cities_distance(offset, last_city_id, tail)\n\n\n@numba.jit('i8(i8, i8, i8[:], i8[:], i8[:], i8, f8[:,:], i8[:,:], f8)', nopython=True, parallel=False)\ndef best_score_permutation_index(offset, head, firsts, lasts, lens, tail, scores, indexes, best_score):\n    best_index = -1\n    for i in numba.prange(len(indexes)):\n        score = score_compound_chunk(offset, head, firsts, lasts, lens, tail, scores, indexes[i])\n        if score < best_score:\n            best_index, best_score = i, score\n    return best_index","4fb9c4b9":"kdt = KDTree(XY)\n\nfives = set()\nfor i in tqdm(cities.index):\n    dists, neibs = kdt.query([XY[i]], 9)\n    for comb in combinations(neibs[0], 5):\n        if all(comb):\n            fives.add(tuple(sorted(comb)))\n    neibs = kdt.query_radius([XY[i]], 10, count_only=False, return_distance=False)\n    for comb in combinations(neibs[0], 5):\n        if all(comb):\n            fives.add(tuple(sorted(comb)))\n            \nprint(f'{len(fives)} cities fives are selected.')\n\n# sort fives by distance\n@numba.jit('f8(i8[:])', nopython=True, parallel=False)\ndef sum_distance(ids):\n    res = 0\n    for i in numba.prange(len(ids)):\n        for j in numba.prange(i + 1, len(ids)):\n            res += cities_distance(0, ids[i], ids[j])\n    return res\n\nfives = np.array(list(fives))\ndistances = np.array(list(map(sum_distance, tqdm(fives))))\norder = distances.argsort()\nfives = fives[order]","3b95630e":"path = np.array(pd.read_csv('..\/input\/dp-shuffle\/submission.csv').Path)","71bc3ab7":"@lru_cache(maxsize=None)\ndef indexes_permutations(n):\n    return np.array(list(map(list, permutations(range(n)))))\n\n\npath_index = np.argsort(path[:-1])\nprint(f'Total score is {score_path(path):.2f}.')\nfor _ in range(2):\n    for ids in tqdm(fives[:2 * 10**6]):\n        i1, i2, i3, i4, i5 = np.sort(path_index[ids])\n        head, tail = path[i1-1], path[i5+1]\n        chunks = [path[i1:i1+1], path[i1+1:i2], path[i2:i2+1], path[i2+1:i3],\n                  path[i3:i3+1], path[i3+1:i4], path[i4:i4+1], path[i4+1:i5], path[i5:i5+1]]\n        chunks = [chunk for chunk in chunks if len(chunk)]\n        scores = np.array([chunk_scores(chunk) for chunk in chunks])\n        lens = np.array([len(chunk) for chunk in chunks])\n        firsts = np.array([chunk[0] for chunk in chunks])\n        lasts = np.array([chunk[-1] for chunk in chunks])\n        best_score = score_compound_chunk(i1-1, head, firsts, lasts, lens, tail, scores, indexes_permutations(len(chunks))[0])\n        index = best_score_permutation_index(i1-1, head, firsts, lasts, lens, tail, scores, indexes_permutations(len(chunks)), best_score)\n        if index > 0:\n            perm = [chunks[i] for i in indexes_permutations(len(chunks))[index]]\n            path[i1-1:i5+2] = np.concatenate([[head], np.concatenate(perm), [tail]])\n            path_index = np.argsort(path[:-1])\n            print(f'New total score is {score_path(path):.3f}. Permutating path at indexes {i1}, {i2}, {i3}, {i4}, {i5}.')","bfba994c":"def make_submission(name, path):\n    pd.DataFrame({'Path': path}).to_csv(f'{name}.csv', index=False)\n\n\nmake_submission(score_path(path), path)","727b9096":"Precompute close cities fives using KDTree.","6bda7c76":"Define fast scoring functions using numba.","b52f1ad4":"Read input data and define some arrays that we'll need later.","d03705f7":"The part below is different from my previous kernel. This is how we'll handle permutations in numba.\n\nInstead of passing list of chunks of different sizes to the function 'score_compound_chunk' we'll pass just the lists of their first and last elements and their lenghts. By calling this function from the function 'best_score_permutation_index' the index of the best permutation will be found in numba.","d6f2b29c":"Save the result path.","72ee8cc2":"Load the initial path to start optimization from.","28bac100":"Use the optimization.","57f4ca4e":"This kernel is based on [my previous kernel](https:\/\/www.kaggle.com\/kostyaatarik\/not-a-3-and-3-halves-opt) and while it shares the same idea of permutating the chunks of the path it expands it to fives of points and handles permutations much faster by moving the code that finds the best permutation of chunks to numba which is a great tool to squeeze everything you can from python.\n\nAs an initial path to start optimization from I'll use the output from [my another kernel](https:\/\/www.kaggle.com\/kostyaatarik\/shame-on-me).","1afceb9a":"Import all that we need."}}