{"cell_type":{"cb727235":"code","a9c1146e":"code","540182d9":"code","9a4eed26":"code","e87db7f0":"code","eb746cd4":"code","b84160e3":"code","4da80036":"code","dcdb5562":"code","bc4e62cf":"code","d3fd4d0c":"code","1ea98103":"code","31da934f":"code","2675c846":"markdown","9e5440e8":"markdown","fe5fb344":"markdown","36201250":"markdown","397b7f6a":"markdown","bbd8c134":"markdown","88009c9b":"markdown","cfdee014":"markdown","8913bbed":"markdown","56d473e0":"markdown","05f18d8e":"markdown","947a3d7e":"markdown","38f535ec":"markdown","1a8825de":"markdown"},"source":{"cb727235":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split # function for splitting data to train and test sets\n\n# Load NLTK\nimport nltk\nfrom nltk.classify import NaiveBayesClassifier\nfrom nltk.corpus import subjectivity\nfrom nltk.sentiment import SentimentAnalyzer\nfrom nltk.sentiment.util import *\nfrom nltk.corpus import stopwords\nfrom nltk.classify import SklearnClassifier\n\n# Load wordcloud visualisations\nfrom wordcloud import WordCloud,STOPWORDS\n\n# Load matplot\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\nfrom subprocess import check_output","a9c1146e":"n_instances = 100\nsubj_docs = [(sent, 'subj') for sent in subjectivity.sents(categories='subj')[:n_instances]]\nobj_docs = [(sent, 'obj') for sent in subjectivity.sents(categories='obj')[:n_instances]]\nlen(subj_docs), len(obj_docs)\n#output should be (100, 100)","540182d9":"subj_docs[0]\n# Output should be: (['smart', 'and', 'alert', ',', 'thirteen', 'conversations', 'about', 'one',\n# 'thing', 'is', 'a', 'small', 'gem', '.'], 'subj')","9a4eed26":"train_subj_docs = subj_docs[:80]\ntest_subj_docs = subj_docs[80:100]\ntrain_obj_docs = obj_docs[:80]\ntest_obj_docs = obj_docs[80:100]\ntraining_docs = train_subj_docs+train_obj_docs\ntesting_docs = test_subj_docs+test_obj_docs\n\nsentim_analyzer = SentimentAnalyzer()\nall_words_neg = sentim_analyzer.all_words([mark_negation(doc) for doc in training_docs])\n","e87db7f0":"unigram_feats = sentim_analyzer.unigram_word_feats(all_words_neg, min_freq=4)\nlen(unigram_feats)\n# output: 83\nsentim_analyzer.add_feat_extractor(extract_unigram_feats, unigrams=unigram_feats)","eb746cd4":"training_set = sentim_analyzer.apply_features(training_docs)\ntest_set = sentim_analyzer.apply_features(testing_docs)","b84160e3":"trainer = NaiveBayesClassifier.train\nclassifier = sentim_analyzer.train(trainer, training_set)\n# output: Training classifier\nfor key,value in sorted(sentim_analyzer.evaluate(test_set).items()):\n    print('{0}: {1}'.format(key, value))\n#Outputs:\n#Evaluating NaiveBayesClassifier results...\n#Accuracy: 0.8\n#F-measure [obj]: 0.8\n#F-measure [subj]: 0.8\n#Precision [obj]: 0.8\n#Precision [subj]: 0.8\n#Recall [obj]: 0.8\n#Recall [subj]: 0.8","4da80036":"from nltk.sentiment.vader import SentimentIntensityAnalyzer","dcdb5562":"sentences = [\"VADER is smart, handsome, and funny.\", # positive sentence example\n   \"VADER is smart, handsome, and funny!\", # punctuation emphasis handled correctly (sentiment intensity adjusted)\n   \"VADER is very smart, handsome, and funny.\",  # booster words handled correctly (sentiment intensity adjusted)\n   \"VADER is VERY SMART, handsome, and FUNNY.\",  # emphasis for ALLCAPS handled\n   \"VADER is VERY SMART, handsome, and FUNNY!!!\",# combination of signals - VADER appropriately adjusts intensity\n   \"VADER is VERY SMART, really handsome, and INCREDIBLY FUNNY!!!\",# booster words & punctuation make this close to ceiling for score\n   \"The book was good.\",         # positive sentence\n   \"The book was kind of good.\", # qualified positive sentence is handled correctly (intensity adjusted)\n   \"The plot was good, but the characters are uncompelling and the dialog is not great.\", # mixed negation sentence\n   \"A really bad, horrible book.\",       # negative sentence with booster words\n   \"At least it isn't a horrible book.\", # negated negative sentence with contraction\n   \":) and :D\",     # emoticons handled\n   \"\",              # an empty string is correctly handled\n   \"Today sux\",     #  negative slang handled\n   \"Today sux!\",    #  negative slang with punctuation emphasis handled\n   \"Today SUX!\",    #  negative slang with capitalization emphasis\n   \"Today kinda sux! But I'll get by, lol\" # mixed sentiment example with slang and constrastive conjunction \"but\"\n]","bc4e62cf":"tricky_sentences = [\n    \"Most automated sentiment analysis tools are shit.\",\n    \"VADER sentiment analysis is the shit.\",\n    \"Sentiment analysis has never been good.\",\n    \"Sentiment analysis with VADER has never been this good.\",\n    \"Warren Beatty has never been so entertaining.\",\n    \"I won't say that the movie is astounding and I wouldn't claim that \\\n    the movie is too banal either.\",\n    \"I like to hate Michael Bay films, but I couldn't fault this one\",\n    \"It's one thing to watch an Uwe Boll film, but another thing entirely \\\n    to pay for it\",\n    \"The movie was too good\",\n    \"This movie was actually neither that funny, nor super witty.\",\n    \"This movie doesn't care about cleverness, wit or any other kind of \\\n    intelligent humor.\",\n    \"Those who find ugly meanings in beautiful things are corrupt without \\\n    being charming.\",\n    \"There are slow and repetitive parts, BUT it has just enough spice to \\\n    keep it interesting.\",\n    \"The script is not fantastic, but the acting is decent and the cinematography \\\n    is EXCELLENT!\",\n    \"Roger Dodger is one of the most compelling variations on this theme.\",\n    \"Roger Dodger is one of the least compelling variations on this theme.\",\n    \"Roger Dodger is at least compelling as a variation on the theme.\",\n    \"they fall in love with the product\",\n    \"but then it breaks\",\n    \"usually around the time the 90 day warranty expires\",\n    \"the twin towers collapsed today\",\n    \"However, Mr. Carter solemnly argues, his client carried out the kidnapping \\\n    under orders and in the ''least offensive way possible.''\"\n ]\n\nsentences.extend(tricky_sentences)","d3fd4d0c":"paragraph = \"It was one of the worst movies I've seen, despite good reviews. \\\n Unbelievably bad acting!! Poor direction. VERY poor production. \\\n The movie was bad. Very bad movie. VERY bad movie. VERY BAD movie. VERY BAD movie!\"","1ea98103":"from nltk import tokenize\nlines_list = tokenize.sent_tokenize(paragraph)\nsentences.extend(lines_list)","31da934f":"sid = SentimentIntensityAnalyzer()\nfor sentence in sentences:\n     print(sentence)\n     ss = sid.polarity_scores(sentence)\n     for k in sorted(ss):\n         print('{0}: {1}, '.format(k, ss[k]), end='')\n     print()","2675c846":"Handling paragraphs:","9e5440e8":"*3. Loading the Vader statements from the NLTK sentiment library*\n\nImporting the NLTK package:","fe5fb344":"# Sentiment Analysis of Evaluation Statements (aka User Reviews)\nKakia Chatsiou, January 2018\n\nThis notebook presents a very simple way to conduct sentiment analysis using the *Natural Language Toolkit* for Python. Code is taken from the [NLTK Sentiment Analysis](http:\/\/www.nltk.org\/howto\/sentiment.html) page, Peter Nagy's [Python NLTK sentiment analysis](https:\/\/www.kaggle.com\/ngyptr\/python-nltk-sentiment-analysis) Kaggle Kernel and Jagan's [What's in a review? - Yelp ratings EDA](https:\/\/www.kaggle.com\/jagangupta\/what-s-in-a-review-yelp-ratings-eda) notebook.\n\n*Sentiment Analysis* is\n*Evaluation Review statements* are\n\nThis notebook, describes the implementation of sentiment analysis to an imaginary test set of evaluation statements, using Python, via NLTK (the Natural Language Toolkit). I try to explain the steps followed in as much detail as possible - comments are welcome at the end of this notebook.\n\n## Loading the necessary packages","36201250":"At this stage, we are ready to train our classifier on the training set, and output the evaluation results:","397b7f6a":"Each Document is represented by a tuple (ie. in the form <sentence, label>. The sentence is tokenised, so it is represented by a _list of strings_.","bbd8c134":"Subjective and objective instances were split separately, to keep a balanced uniform class distribution in both train and test sets.","88009c9b":"Defining 'tricky' sentences dataset:","cfdee014":"Defining list of test sentences:","8913bbed":"Simple unigram word features are then used, handling negation:","56d473e0":"*2. Creating the datasets (subjective and objective sentences)*","05f18d8e":"*4. Loading the Sentiment Intensity Analyser*. ","947a3d7e":"*1. Setting up the necessary packages*\n\nThe first step is to  import all the related packages from nltk that relate to sentiment analysis:\n","38f535ec":"Then, features are applied to obtain a feature-value representation of the datasets:","1a8825de":"Tokenising sentences:"}}