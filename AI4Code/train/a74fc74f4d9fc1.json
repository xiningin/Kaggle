{"cell_type":{"856dfb9a":"code","4e11ed05":"code","43f40281":"code","75564227":"code","a9113653":"code","625747c7":"code","33fc2563":"code","58e6a37b":"code","d678d531":"code","d51212e2":"markdown","dbef9896":"markdown","f5168086":"markdown"},"source":{"856dfb9a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","4e11ed05":"papers = []\nfor year in [2016, 2017, 2018]:\n    df = pd.read_csv(\"..\/input\/emnlp-{}.csv\".format(year))\n    papers.append(df)\n\npaper_df = pd.concat(papers).reset_index()\npaper_df = paper_df.assign(title=paper_df[\"title\"].apply(str.strip))\npaper_df.head(5)","43f40281":"from sklearn.feature_extraction.text import CountVectorizer\n\n\nvectorizer = CountVectorizer(stop_words=\"english\", max_df=0.8, min_df=7, ngram_range=(1, 2))\nvectorizer.fit(paper_df[\"title\"])\n\nyear_counts = {}\nwords = vectorizer.get_feature_names()\nfor y in [2016, 2017, 2018]:\n    vectors = vectorizer.transform(paper_df[\"title\"][paper_df[\"year\"] == y])\n    counts = vectors.toarray().sum(axis=0)\n    word_counts = {}\n    for i in range(len(words)):\n        word_counts[words[i]] = counts[i]\n    year_counts[y] = word_counts\n\nyear_count_df = pd.DataFrame(year_counts)\nyear_count_df.head(5)","75564227":"def show_rate(year_freq_df, rate_bound=0.003, max_lower_limit=0.5, min_lower_limit=0, figsize=(8, 12)):\n    num_columns = year_freq_df.shape[1]\n    year_total = year_freq_df.sum(axis=0)\n    normalized_count = year_freq_df \/ year_total\n    normalized_count = normalized_count[normalized_count.max(axis=1) > rate_bound]\n    word_total = normalized_count.sum(axis=1)\n    word_rates = (normalized_count.T \/ word_total).T\n    word_rates = word_rates[word_rates.max(axis=1) > rate_bound]\n\n    first_index = year_freq_df.columns[0]\n    word_rates.sort_values(by=first_index, inplace=True)\n\n    limited = word_rates[(word_rates.max(axis=1) > max_lower_limit) & \\\n                         (word_rates.min(axis=1) > min_lower_limit)]    \n    limited.plot.barh(stacked=True, figsize=figsize)\n    plt.legend(bbox_to_anchor=(1, 1), loc=\"upper right\", borderaxespad=1, fontsize=12)\n    plt.tight_layout()\n    return limited","a9113653":"# Show New\/Lost Topics\nyear_count_rate_df = show_rate(year_count_df)","625747c7":"# Show Continuing Topics\nyear_count_rate_df = show_rate(year_count_df, max_lower_limit=0.0, min_lower_limit=0.25)","33fc2563":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n\nvectorizer_tf = TfidfVectorizer(stop_words=\"english\", max_df=0.8, min_df=7, ngram_range=(1, 2))\nvectorizer_tf.fit(paper_df[\"title\"])\n\nwords = vectorizer_tf.get_feature_names()\nyear_tf = {}\nfor y in [2016, 2017, 2018]:\n    vectors = vectorizer_tf.transform(paper_df[\"title\"][paper_df[\"year\"] == y])\n    idfs = vectors.toarray().mean(axis=0)\n    word_idfs = {}\n    for i in range(len(words)):\n        word_idfs[words[i]] = idfs[i]\n    year_tf[y] = word_idfs\n\nyear_tf_df = pd.DataFrame(year_tf)\nyear_tf_df.head(5)","58e6a37b":"# Show New\/Lost Topics\nyear_tf_rate_df = show_rate(year_tf_df)","d678d531":"# Show Continuing Topics\nyear_tf_rate_df = show_rate(year_tf_df, max_lower_limit=0.0, min_lower_limit=0.25)","d51212e2":"## EMNLP Accepted Papers Analysis (2016-2018)\n\nLet's analyze the tendency of the research theme from the title of paper.\n\n1. Read papers dataset\n2. Calculate frequent words\n3. Analyze EMNLP 2018 abstracts\n\n### Read papers dataset","dbef9896":"Evaluate by TF-IDF","f5168086":"### Calculate frequent words\n\nCount the frequent word by [CountVectorizer](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.CountVectorizer.html) and [TfidfVectorizer](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.TfidfVectorizer.html#sklearn.feature_extraction.text.TfidfVectorizer)\n"}}