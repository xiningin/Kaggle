{"cell_type":{"c671e040":"code","52f669fe":"code","5b63acf6":"code","15549009":"code","98be8ac8":"code","9ffeaff1":"code","c5f90038":"code","19070079":"code","a7908faf":"code","4cd071c1":"code","ea97e203":"code","2e64b9be":"code","dc4e003f":"code","8b9e3696":"code","4e8318e2":"code","51747026":"code","7727e4e0":"code","9fe94190":"code","3d64fd71":"code","e8d82d2f":"markdown","dab8cc8b":"markdown","f9337ced":"markdown","7e955f23":"markdown","e8503633":"markdown","376abb43":"markdown","add1926c":"markdown","90b59665":"markdown","9556fed4":"markdown","48fd7d6f":"markdown","82fd2dd7":"markdown","00dff20a":"markdown","413abdf4":"markdown","1632252f":"markdown"},"source":{"c671e040":"#Importing Necessary Libraries.\nfrom PIL import Image\n\nimport numpy as np\nimport os\nimport cv2\nimport keras\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout","52f669fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5b63acf6":"!ls","15549009":"data=[]\nlabels=[]\nParasitized=os.listdir(\"..\/input\/cell_images\/cell_images\/Parasitized\/\")\nfor a in Parasitized:\n    try:\n        image=cv2.imread(\"..\/input\/cell_images\/cell_images\/Parasitized\/\"+a)\n        image_from_array = Image.fromarray(image, 'RGB')\n        size_image = image_from_array.resize((50, 50))\n        data.append(np.array(size_image))\n        labels.append(0)\n    except AttributeError:\n        print(\"\")\n\nUninfected=os.listdir(\"..\/input\/cell_images\/cell_images\/Uninfected\/\")\nfor b in Uninfected:\n    try:\n        image=cv2.imread(\"..\/input\/cell_images\/cell_images\/Uninfected\/\"+b)\n        image_from_array = Image.fromarray(image, 'RGB')\n        size_image = image_from_array.resize((50, 50))\n        data.append(np.array(size_image))\n        labels.append(1)\n    except AttributeError:\n        print(\"\")\n    ","98be8ac8":"Cells=np.array(data)\nlabels=np.array(labels)","9ffeaff1":"np.save(\"Cells\",Cells)\nnp.save(\"labels\",labels)","c5f90038":"Cells=np.load(\"Cells.npy\")\nlabels=np.load(\"labels.npy\")","19070079":"s=np.arange(Cells.shape[0])\nnp.random.shuffle(s)\nCells=Cells[s]\nlabels=labels[s]","a7908faf":"num_classes=len(np.unique(labels))\nlen_data=len(Cells)","4cd071c1":"(x_train,x_test)=Cells[(int)(0.1*len_data):],Cells[:(int)(0.1*len_data)]\nx_train = x_train.astype('float32')\/255 # As we are working on image data we are normalizing data by divinding 255.\nx_test = x_test.astype('float32')\/255\ntrain_len=len(x_train)\ntest_len=len(x_test)","ea97e203":"(y_train,y_test)=labels[(int)(0.1*len_data):],labels[:(int)(0.1*len_data)]","2e64b9be":"#Doing One hot encoding as classifier has multiple classes\ny_train=keras.utils.to_categorical(y_train,num_classes)\ny_test=keras.utils.to_categorical(y_test,num_classes)","dc4e003f":"#creating sequential model\nmodel=Sequential()\nmodel.add(Conv2D(filters=16,kernel_size=2,padding=\"same\",activation=\"relu\",input_shape=(50,50,3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(500,activation=\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(2,activation=\"softmax\"))#2 represent output layer neurons \nmodel.summary()","8b9e3696":"# compile the model with loss as categorical_crossentropy and using adam optimizer you can test result by trying RMSProp as well as Momentum\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","4e8318e2":"#Fit the model with min batch size as 50[can tune batch size to some factor of 2^power ] \nmodel.fit(x_train,y_train,batch_size=50,epochs=20,verbose=1)","51747026":"accuracy = model.evaluate(x_test, y_test, verbose=1)\nprint('\\n', 'Test_Accuracy:-', accuracy[1])","7727e4e0":"from keras.models import load_model\nmodel.save('cells.h5')","9fe94190":"from keras.models import load_model\nfrom PIL import Image\nfrom PIL import Image\nimport numpy as np\nimport os\nimport cv2\ndef convert_to_array(img):\n    im = cv2.imread(img)\n    img_ = Image.fromarray(im, 'RGB')\n    image = img_.resize((50, 50))\n    return np.array(image)\ndef get_cell_name(label):\n    if label==0:\n        return \"Paracitized\"\n    if label==1:\n        return \"Uninfected\"\ndef predict_cell(file):\n    model = load_model('cells.h5')\n    print(\"Predicting Type of Cell Image.................................\")\n    ar=convert_to_array(file)\n    ar=ar\/255\n    label=1\n    a=[]\n    a.append(ar)\n    a=np.array(a)\n    score=model.predict(a,verbose=1)\n    print(score)\n    label_index=np.argmax(score)\n    print(label_index)\n    acc=np.max(score)\n    Cell=get_cell_name(label_index)\n    return Cell,\"The predicted Cell is a \"+Cell+\" with accuracy =    \"+str(acc)\n\n","3d64fd71":"\"\"\"from tkinter import Frame, Tk, BOTH, Text, Menu, END\nfrom tkinter import filedialog \nfrom tkinter import messagebox as mbox\n\nclass Example(Frame):\n\n    def __init__(self):\n        super().__init__()   \n\n        self.initUI()\n\n\n    def initUI(self):\n\n        self.master.title(\"File dialog\")\n        self.pack(fill=BOTH, expand=1)\n\n        menubar = Menu(self.master)\n        self.master.config(menu=menubar)\n\n        fileMenu = Menu(menubar)\n        fileMenu.add_command(label=\"Open\", command=self.onOpen)\n        menubar.add_cascade(label=\"File\", menu=fileMenu)        \n\n        \n\n    def onOpen(self):\n\n        ftypes = [('Image', '*.png'), ('All files', '*')]\n        dlg = filedialog.Open(self, filetypes = ftypes)\n        fl = dlg.show()\n        c,s=predict_cell(fl)\n        root = Tk()\n        T = Text(root, height=4, width=70)\n        T.pack()\n        T.insert(END, s)\n        \n\ndef main():\n\n    root = Tk()\n    ex = Example()\n    root.geometry(\"100x50+100+100\")\n    root.mainloop()  \n\n\nif __name__ == '__main__':\n    main()\"\"\"","e8d82d2f":"# Import Libraries","dab8cc8b":"Here the problem has two classes so last output layer of neural network will have 2 neurons one for each class, One hot encoding will help us to change labels in binary format.\nexample:\n    2 can be represented as [1 0] if output layer has 2 neurons and [0 0 1 0] if output has 4 neurons\/classes","f9337ced":"# Save the model weights:","7e955f23":"Here I will be using Relu{max(0,z)}, You can try tanh\/sigmoid\/Leaky Relu for finding performance on various activation functions.Our output layer will be softmax activation rather than sigmoid as we have more than one class to classify. softmax activation calculates e^value\/sum(all_values_in_axis[0 or 1])","e8503633":"# Data Prepearaion","376abb43":"# One hot encoding:","add1926c":"# Create Sequential Model:","90b59665":"Do Train\/Test Split of data and labels that prepared in early section. Classes are defined as the unique labels in the data. Here it will be 2 as Parasitized:0 and Uninfected:1, here 0 and 1 are the mapping in labels for these two classes","9556fed4":"# Check the accuracy on Test data:","48fd7d6f":"compile the model with loss as categorical_crossentropy and using adam optimizer you can test result by trying RMSProp as well as Momentum","82fd2dd7":"Data Preperation: We will make data and labels list where data will be image to array implementatation which contains RGB values of each image. and label will be class of cells here I will be taking 0 and 1 for two classes","00dff20a":"Saving and Loading the data we prepared so next time we can load it from saved .npy file.","413abdf4":"# Use of Model in simple application using tkinter.","1632252f":"Import Necessary Libraries. Here I will be using Keras library for making classifier. We will also requires numpy and Image for making image to array implementation. We will be using sequential model here in the notebook. "}}