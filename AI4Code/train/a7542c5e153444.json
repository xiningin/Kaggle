{"cell_type":{"4d6ea9bd":"code","3b261533":"code","8ec00322":"code","c67a9f30":"code","88af11ff":"code","71014deb":"code","925453ee":"code","3a211c3f":"code","5ad8bd3a":"code","3647b1ee":"code","56cdb3f8":"code","2e0394b5":"code","c2666f6c":"code","eaf46429":"code","dc45d46e":"code","18d2b9d4":"code","7be527da":"code","9eb6c7f9":"code","5f1ed01e":"code","baefce87":"code","7fe6af17":"code","ac6f5aee":"code","00b9f915":"code","bef912ad":"code","bd432560":"code","8cd40e44":"code","2b6f5fee":"code","10e86f36":"code","d17c58db":"code","2b0dec5b":"code","b0e2b4cd":"code","01edd341":"code","87bc19a5":"code","a56e7368":"code","8efab1b1":"code","020fdead":"code","7fda3432":"code","33ac3a00":"code","41cecfc3":"code","8492bea8":"code","cd4eb671":"markdown","be1f9e9a":"markdown","afd81d19":"markdown","89e9312b":"markdown","f477fb46":"markdown","0248beda":"markdown","a4002302":"markdown","0e9647aa":"markdown","d7dbc1f1":"markdown","afc8aa3a":"markdown","7521e81f":"markdown","9c96f294":"markdown"},"source":{"4d6ea9bd":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","3b261533":"df = pd.read_csv(\"..\/input\/vehicle-dataset-from-cardekho\/car data.csv\")","8ec00322":"df.head()","c67a9f30":"df.shape","88af11ff":"print(df['Seller_Type'].unique())\nprint(df['Transmission'].unique())\nprint(df['Owner'].unique())","71014deb":"df.isnull().sum()","925453ee":"df.describe()","3a211c3f":"df.columns","5ad8bd3a":"final = df[['Year', 'Selling_Price', 'Present_Price', 'Kms_Driven','Fuel_Type', 'Seller_Type', 'Transmission', 'Owner']]","3647b1ee":"final.head()","56cdb3f8":"final['Current_Year'] = 2021\nfinal.head()","2e0394b5":"final['Years_old'] = final['Current_Year']-final['Year']\nfinal.head()","c2666f6c":"final.drop(['Year'],axis=1,inplace=True)","eaf46429":"final.drop(['Current_Year'],axis=1,inplace=True)","dc45d46e":"final.head()","18d2b9d4":"final = pd.get_dummies(final,drop_first=True)","7be527da":"final.head()","9eb6c7f9":"final.shape","5f1ed01e":"final.corr()","baefce87":"sns.pairplot(final)","7fe6af17":"corr = final.corr()\ncorr_features = corr.index\nplt.figure(figsize=(10,10))\ng = sns.heatmap(final[corr_features].corr(), annot=True)","ac6f5aee":"x = final.corr().sort_values(by=\"Selling_Price\", ascending=False)\nprint(x['Selling_Price'])","00b9f915":"final.head()","bef912ad":"X = final.iloc[:,1:]\ny = final.iloc[:,0]","bd432560":"from sklearn.ensemble import ExtraTreesRegressor\nmodel = ExtraTreesRegressor()\nmodel.fit(X,y)","8cd40e44":"print(model.feature_importances_)","2b6f5fee":"#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns) \nfeat_importances.nlargest(5).plot(kind='barh')\nplt.show()","10e86f36":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)","d17c58db":"X_train.shape","2b0dec5b":"from sklearn.ensemble import RandomForestRegressor\nreg = RandomForestRegressor()","b0e2b4cd":"## Hyperparameters\nimport numpy as np\nn_estimators = [int(x) for x in np.linspace(100,1200,12)]\nprint(n_estimators)","01edd341":"from sklearn.model_selection import RandomizedSearchCV\n\nn_estimators = [int(x) for x in np.linspace(100,1200,12)]\nmax_features = ['auto','sqrt']\nmax_depth =  [int(x) for x in np.linspace(5,30,6)]\nmin_samples_split = [2,5,10,15,100]\nmin_samples_leaf = [1,2,5,10]","87bc19a5":"random_grid = {\n    'n_estimators': n_estimators,\n    'max_features': max_features,\n    'max_depth': max_depth,\n    'min_samples_split': min_samples_split,\n    'min_samples_leaf': min_samples_leaf\n}","a56e7368":"# First create the base model to tune\nrf = RandomForestRegressor()","8efab1b1":"rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error', \n                               n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","020fdead":"rf_random.fit(X_train,y_train)","7fda3432":"predictions = rf_random.predict(X_test)\npredictions","33ac3a00":"sns.distplot(y_test-predictions)","41cecfc3":"plt.scatter(y_test,predictions)","8492bea8":"import pickle\nfile = open('random_forest_regression_model.pkl', 'wb')\npickle.dump(rf_random, file)","cd4eb671":"# Relationship among features","be1f9e9a":"#### We got the plot as a normalized data so our prediction is good!","afd81d19":"# Creating new feature","89e9312b":"# Importing the libraries","f477fb46":"# Using Random Forest Regressor","0248beda":"# Importing the dataset and analyzing","a4002302":"#### Saved this model in a pickle file for future use","0e9647aa":"### Thank You!\n### Do **upvote** if you find this useful","d7dbc1f1":"# Important features","afc8aa3a":"# Making predictions","7521e81f":"# One Hot encoding","9c96f294":"# For hyperparameter tuning"}}