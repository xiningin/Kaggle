{"cell_type":{"94759f62":"code","faaa517f":"code","7fa0fbad":"code","517abd72":"code","60822823":"code","1da1547f":"code","ae315aef":"code","2b215eed":"code","9a7aa1df":"code","b1df67ac":"code","a076158e":"code","47b3f2ff":"code","22d681d8":"code","dcc0d72f":"code","dd7abfe2":"code","4319b916":"code","440b7713":"code","d9018efa":"code","ae1eb90d":"code","06a6d34d":"code","da3a26d7":"markdown","977af721":"markdown","ceaca726":"markdown"},"source":{"94759f62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","faaa517f":"from fastai.vision import *","7fa0fbad":"tfms = get_transforms(max_rotate=25)","517abd72":"len(tfms)","60822823":"def get_ex(): return open_image('..\/input\/hard-hat-detection\/images\/hard_hat_workers100.png')","1da1547f":"def plots_f(rows, cols, width, height, **kwargs):\n    [get_ex().apply_tfms(tfms[0], **kwargs).show(ax=ax) for i,ax in enumerate(plt.subplots(\n        rows,cols,figsize=(width,height))[1].flatten())]","ae315aef":"plots_f(2, 4, 12, 6, size=224)","2b215eed":"tfms = zoom_crop(scale=(0.75,2), do_rand=True)","9a7aa1df":"# random zoom and crop\nplots_f(2, 4, 12, 6, size=224)","b1df67ac":"# random resize and crop\ntfms = [rand_resize_crop(224)]\nplots_f(2, 4, 12, 6, size=224)","a076158e":"# passing a probability to a function\ntfm = [rotate(degrees=30, p=0.5)]\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor ax in axs:\n    img = get_ex().apply_tfms(tfm)\n    title = 'Done' if tfm[0].do_run else 'Not done'\n    img.show(ax=ax, title=title)","47b3f2ff":"tfm = [rotate(degrees=(-30,30))]\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor ax in axs:\n    img = get_ex().apply_tfms(tfm)\n    title = f\"deg={tfm[0].resolved['degrees']:.1f}\"\n    img.show(ax=ax, title=title)","22d681d8":"# brightness\nfig, axs = plt.subplots(1,5,figsize=(14,8))\nfor change, ax in zip(np.linspace(0.1,0.9,5), axs):\n    brightness(get_ex(), change).show(ax=ax, title=f'change={change:.1f}')","dcc0d72f":"# contrast\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor scale, ax in zip(np.exp(np.linspace(log(0.5),log(2),5)), axs):\n    contrast(get_ex(), scale).show(ax=ax, title=f'scale={scale:.2f}')","dd7abfe2":"# dihedral\nfig, axs = plt.subplots(2,2,figsize=(12,8))\nfor k, ax in enumerate(axs.flatten()):\n    dihedral(get_ex(), k).show(ax=ax, title=f'k={k}')\nplt.tight_layout()","4319b916":"fig, axs = plt.subplots(1,2,figsize=(10,8))\nget_ex().show(ax=axs[0], title=f'no flip')\nflip_lr(get_ex()).show(ax=axs[1], title=f'flip')","440b7713":"# jitter\nfig, axs = plt.subplots(1,5,figsize=(20,8))\nfor magnitude, ax in zip(np.linspace(-0.05,0.05,5), axs):\n    tfm = jitter(magnitude=magnitude)\n    get_ex().jitter(magnitude).show(ax=ax, title=f'magnitude={magnitude:.2f}')","d9018efa":"# squish\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor scale, ax in zip(np.linspace(0.66,1.33,5), axs):\n    get_ex().squish(scale=scale).show(ax=ax, title=f'scale={scale:.2f}')","ae1eb90d":"# tilt\nfig, axs = plt.subplots(2,4,figsize=(12,8))\nfor i in range(4):\n    get_ex().tilt(i, 0.4).show(ax=axs[0,i], title=f'direction={i}, fwd')\n    get_ex().tilt(i, -0.4).show(ax=axs[1,i], title=f'direction={i}, bwd')","06a6d34d":"# symm warp\ntfm = symmetric_warp(magnitude=(-0.2,0.2))\n_, axs = plt.subplots(2,4,figsize=(12,6))\nfor ax in axs.flatten():\n    img = get_ex().apply_tfms(tfm, padding_mode='zeros')\n    img.show(ax=ax)","da3a26d7":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke. ","977af721":"#Thanks to DipamVasani https:\/\/www.kaggle.com\/dipam7\/data-augmentation-in-fastai","ceaca726":"#Codes from DipamVasani https:\/\/www.kaggle.com\/dipam7\/data-augmentation-in-fastai"}}