{"cell_type":{"0f597141":"code","91a37bb2":"code","f122da01":"code","142377e4":"code","add2aa5c":"code","559805e9":"code","2426d5b7":"code","2919be07":"code","1225d5f3":"code","7e83d4f2":"code","bf7c8832":"code","660fbfd4":"code","9032f9c3":"code","643b5517":"code","0f5cd019":"code","3333c5ea":"code","fed80473":"code","6fd8f6b9":"markdown","3545ba01":"markdown","11046d1f":"markdown","9c94e1e5":"markdown","00fcf68a":"markdown","e72d9111":"markdown","ce984a36":"markdown","06b61929":"markdown","2e1b5925":"markdown"},"source":{"0f597141":"!pip install itkwidgets","91a37bb2":"import nibabel as nib\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.ndimage\nfrom sklearn.cluster import KMeans\nfrom itkwidgets import view\nimport itkwidgets\nfrom ipywidgets import interact,fixed","f122da01":"inputVolume = nib.load(\"..\/input\/brain-tumor\/Brain_Tumor\/BRATS_001.nii\")\ndata = inputVolume.get_fdata()\n\ninputMask = nib.load(\"..\/input\/brain-tumor\/Brain_Tumor\/BRATS_001_tumor_mask.nii\")\nmask_data =  inputMask.get_fdata()","142377e4":"def explore_3dimage_axial(layer, contrast, input_data):\n    plt.figure(figsize=(10, 5))\n    plt.imshow(input_data[:, :, layer, contrast], cmap='gray');\n    plt.title('Data', fontsize=20)\n    plt.axis('off')\n\ninteract(explore_3dimage_axial, layer=(0, data.shape[2] - 1),\n         contrast=(0, data.shape[3] - 1),input_data=fixed(data));","add2aa5c":"def explore_3dimage_axial(layer, input_data):\n    plt.figure(figsize=(10, 5))\n    plt.imshow(input_data[:, :, layer], cmap='gray');\n    plt.title('Mask', fontsize=20)\n    plt.axis('off')\n\ninteract(explore_3dimage_axial, layer=(0, mask_data.shape[2] - 1), input_data=fixed(mask_data));","559805e9":"inputSizeX = data.shape[0]\ninputSizeY = data.shape[1]\ninputSizeZ = data.shape[2]\ninputSizeC = data.shape[3]\n\nfor c in range(inputSizeC):\n    for z in range( inputSizeZ ):\n        for y in range( inputSizeY ):\n            for x in range( inputSizeX ):\n                if(mask_data[x, y, z]>0):\n                    data[ x, y, z, c ] = data[ x, y, z, c ]\n                else:\n                    data[x,y,z, c]=1\n                ","2426d5b7":"def explore_3dimage_axial(layer, contrast, input_data):\n    plt.figure(figsize=(10, 5))\n    plt.imshow(input_data[:, :, layer, contrast], cmap='viridis');\n    plt.title('Applying the mask', fontsize=20)\n    plt.axis('off')\n\ninteract(explore_3dimage_axial, layer=(0, data.shape[2] - 1),\n         contrast=(0, data.shape[3] - 1),input_data=fixed(data));","2919be07":"all_img=[]\n\ninputSizeX = data.shape[0]\ninputSizeY = data.shape[1]\nfor C in range(data.shape[3]):\n    img=[]\n    for Z in range(data.shape[2]):\n        data2 = data[:,:,Z,C].reshape(-1, 1)\n        kmeans = KMeans(n_clusters=3, random_state=0)\n        kmeans.fit(data2)\n        centers = kmeans.cluster_centers_\n        labels = kmeans.labels_\n        img.append(centers[labels].reshape(inputSizeX, inputSizeY))\n\n    all_img.append(img)\n    \nall_img=np.array(all_img)","1225d5f3":"def explore_3dimage_axial(layer, contrast, input_data):\n    plt.figure(figsize=(10, 5))\n    plt.imshow(input_data[contrast, layer, :, :], cmap='viridis');\n    plt.title('Segmented', fontsize=20)\n    plt.axis('off')\n\ninteract(explore_3dimage_axial, layer=(0, all_img.shape[1] - 1), \n         contrast=(0, all_img.shape[0] - 1), input_data=fixed(all_img));","7e83d4f2":"img = nib.Nifti1Image(all_img, np.eye(4))  \n\nimg.header.get_xyzt_units()\nimg.to_filename(\".\/BRATS_001_tumor_kmeans_segmentation.nii\")  ","bf7c8832":"# Here I will do the 3D representation of the third contrast\nthird_contrast_volume = all_img[2]","660fbfd4":"pixel_spacing = [inputVolume.header.get_zooms()[0], inputVolume.header.get_zooms()[1]]\nslice_thickness = inputVolume.header.get_zooms()[2]","9032f9c3":"# In our case we didn't need to modify the data as both the spacing and the thickness = 1\n\ndef resample(third_contrast_volume, pixel_spacing, slice_thickness, new_spacing=[1,1,1]):\n    \n    spacing = [float(slice_thickness), float(pixel_spacing[0]), \n               float(pixel_spacing[1])]\n    \n    spacing = np.array(list(spacing))\n\n    resize_factor = spacing \/ new_spacing\n    new_real_shape = third_contrast_volume.shape * resize_factor\n    new_shape = np.round(new_real_shape)\n    real_resize_factor = new_shape \/ third_contrast_volume.shape\n    new_spacing = spacing \/ real_resize_factor\n    \n    third_contrast_volume = scipy.ndimage.interpolation.zoom(third_contrast_volume, real_resize_factor)\n    \n    return third_contrast_volume, new_spacing\n\nprint (\"Shape before resampling\\t\", data[:,:,:,2].shape)\ndata_after_resamp, spacing = resample(data[:,:,:,2], pixel_spacing, slice_thickness, [1,1,1])\nprint (\"Shape after resampling\\t\", data_after_resamp.shape)\n\nprint (\"Shape before resampling\\t\", third_contrast_volume.shape)\nthird_contrast_volume_after_resamp, spacing = resample(third_contrast_volume, pixel_spacing, slice_thickness, [1,1,1])\nprint (\"Shape after resampling\\t\", third_contrast_volume_after_resamp.shape)","643b5517":"third_contrast_volume_after_resamp = third_contrast_volume_after_resamp.transpose(2,1,0)","0f5cd019":"# 3D representation of the tumor\nview(data_after_resamp, cmap=itkwidgets.cm.viridis, annotations=False, vmax=800)","3333c5ea":"# 3D representation of the segmented tumor\nview(third_contrast_volume_after_resamp, cmap=itkwidgets.cm.viridis, annotations=False, vmax=800)","fed80473":"import json\n\nfrom ipywidgets.embed import embed_data\n\ndata = embed_data(views=[view(data_after_resamp, cmap=itkwidgets.cm.viridis, annotations=False, vmax=800), view(third_contrast_volume_after_resamp, cmap=itkwidgets.cm.viridis, annotations=False, vmax=800)])\n\nhtml_template = \"\"\"\n<html>\n  <head>\n\n    <title>Widget export<\/title>\n\n    <!-- Load RequireJS, used by the IPywidgets for dependency management -->\n    <script \n      src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/require.js\/2.3.4\/require.min.js\" \n      integrity=\"sha256-Ae2Vz\/4ePdIu6ZyI\/5ZGsYnb+m0JlOmKPjt6XZ9JJkA=\" \n      crossorigin=\"anonymous\">\n    <\/script>\n\n    <!-- Load IPywidgets bundle for embedding. -->\n    <script\n      data-jupyter-widgets-cdn=\"https:\/\/cdn.jsdelivr.net\/npm\/\"\n      src=\"https:\/\/unpkg.com\/@jupyter-widgets\/html-manager@*\/dist\/embed-amd.js\" \n      crossorigin=\"anonymous\">\n    <\/script>\n\n    <!-- The state of all the widget models on the page -->\n    <script type=\"application\/vnd.jupyter.widget-state+json\">\n      {manager_state}\n    <\/script>\n  <\/head>\n\n  <body>\n\n    <h1>Widget export<\/h1>\n\n    <div id=\"first-slider-widget\">\n      <!-- This script tag will be replaced by the view's DOM tree -->\n      <script type=\"application\/vnd.jupyter.widget-view+json\">\n        {widget_views[0]}\n      <\/script>\n    <\/div>\n\n    <hrule \/>\n\n    <div id=\"second-slider-widget\">\n      <!-- This script tag will be replaced by the view's DOM tree -->\n      <script type=\"application\/vnd.jupyter.widget-view+json\">\n        {widget_views[1]}\n      <\/script>\n    <\/div>\n\n  <\/body>\n<\/html>\n\"\"\"\n\nmanager_state = json.dumps(data['manager_state'])\nwidget_views = [json.dumps(view) for view in data['view_specs']]\nrendered_template = html_template.format(manager_state=manager_state, widget_views=widget_views)\nwith open('export.html', 'w') as fp:\n    fp.write(rendered_template)","6fd8f6b9":"![tumor.PNG](attachment:tumor.PNG)","3545ba01":"![tumor_segmented.PNG](attachment:tumor_segmented.PNG)","11046d1f":"# Apply the mask","9c94e1e5":"# Segmentation","00fcf68a":"-------------------------------------------------------------------------------------------------------------------------------\nCopyright:\n \nThe data was provided by Ms.Linda Marrakchi-Kacem\n\n-------------------------------------------------------------------------------------------------------------------------------","e72d9111":"# 3D representation","ce984a36":"![image.png](attachment:image.png)","06b61929":"# Sample dashboard","2e1b5925":"The 3D visualisation doesn't work on kaggle. To see it, download the notebook and test it locally."}}