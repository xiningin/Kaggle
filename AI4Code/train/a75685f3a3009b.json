{"cell_type":{"17313933":"code","de562e3c":"code","86bcf1ff":"code","790d6a58":"code","0ffa0443":"code","1c7caf31":"code","0fe7e540":"code","53b28fd8":"code","577b2cdf":"code","9aedabb6":"code","667ba0dd":"code","42e0afdd":"code","d618267a":"code","a9a3dbf1":"code","eb836661":"code","6f9dea44":"code","0d5b04f8":"code","438f8548":"code","4515f41d":"code","daf97906":"code","8fa2e3f5":"code","2a5c7252":"code","72df3d4c":"code","1cac05c8":"code","0729f3e5":"code","f258ec43":"code","25eb5d3a":"code","5f057abe":"code","6adfa90a":"code","3a59077c":"code","398be1bb":"code","10be7e11":"code","a9c44715":"code","41f83dbf":"code","b5e11efa":"code","a9b3798b":"code","0a4cdebd":"code","bcd69fd2":"code","58acc0d4":"code","408f7b89":"code","53780783":"code","81e56a5a":"code","cbb883d7":"code","b277eff3":"code","f66c655c":"code","89fd5038":"code","e2d59c8e":"code","dc275781":"code","41b6989b":"code","c58b2bfc":"code","9902e5a3":"code","bf1a59b7":"code","a6787458":"code","c1e0b334":"code","dcf613dd":"code","2d91f23a":"code","56f4f30f":"code","7f436272":"code","54b6a1ea":"code","aeef0557":"code","b8cc4118":"code","289e3f0f":"code","e69394e6":"code","68512f36":"code","d12a775a":"code","0cb298f2":"code","3e25cda1":"code","dae9440a":"code","d2d60dba":"code","2577dce3":"code","914d1cc3":"code","b558c85a":"code","d1452ef6":"code","6234f59a":"code","68712faa":"code","2d60edaf":"code","887daaaf":"code","aec4eb38":"code","488f3bae":"code","76a85192":"code","54156f93":"markdown","00cd0128":"markdown","22a1e527":"markdown","8c696027":"markdown","fef77634":"markdown","7c6e0e63":"markdown","0defcc8b":"markdown","70689f36":"markdown","615558d9":"markdown","03e9ce0e":"markdown","43b4500d":"markdown","a874c1b5":"markdown","be28280e":"markdown","18d96786":"markdown","8ad5ca50":"markdown","a3f7bdc8":"markdown","466432af":"markdown"},"source":{"17313933":"## upgrade packages\n!python3 -m pip install -q datatable --upgrade","de562e3c":"## define configuration\nPATH_TRAIN = '..\/input\/tabular-playground-series-jul-2021\/train.csv'\nPATH_TEST = '..\/input\/tabular-playground-series-jul-2021\/test.csv'\n\nPATH_AUTOGLUON_SUBMISSION = 'submission_autogluon.csv'\nPATH_AUTOSKLEARN_SUBMISSION = 'submission_autosklearn.csv'\nPATH_FLAML_SUBMISSION = 'submission_flaml.csv'\nPATH_H2OAML_SUBMISSION = 'submission_h2oaml.csv'\nPATH_LAML_SUBMISSION = 'submission_laml.csv'\nPATH_MLJAR_SUBMISSION = 'submission_mljar.csv'\nPATH_TPOT_SUBMISSION = 'submission_tpot.csv'","86bcf1ff":"## prepare data\nimport gc\nimport os\nimport shutil\nimport datatable as dt\nfrom pathlib import Path\n\ntrain = dt.fread(PATH_TRAIN)\ntest = dt.fread(PATH_TEST)\n\ntarget_carbon_monoxide = train['target_carbon_monoxide'].to_numpy().ravel()\ntarget_benzene = train[:, 'target_benzene'].to_numpy().ravel()\ntarget_nitrogen_oxides = train[:, 'target_nitrogen_oxides'].to_numpy().ravel()\n\ndel train[:, ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\ntest_date_time = test[:, 'date_time']\ntest = test[:, train.names]","790d6a58":"## install packages\n!python3 -m pip install -q \"mxnet<2.0.0\"\n!python3 -m pip install -q autogluon\n!python3 -m pip install -q graphviz --upgrade","0ffa0443":"## import packages\nfrom autogluon.tabular import TabularPredictor","1c7caf31":"## run model for carbon monoxide\ntrain['target'] = dt.Frame(target_carbon_monoxide)\n\nautogluon_carbon_monoxide = TabularPredictor(\n    label='target'\n)\n\nautogluon_carbon_monoxide.fit(train_data=train.to_pandas(), time_limit=180)\n\ndel train['target']","0fe7e540":"## check leaderboard for carbon monoxide\nautogluon_carbon_monoxide.leaderboard()","53b28fd8":"## run model for benzene\ntrain['target'] = dt.Frame(target_benzene)\n\nautogluon_benzene = TabularPredictor(\n    label='target'\n)\n\nautogluon_benzene.fit(train_data=train.to_pandas(), time_limit=180)\n\ndel train['target']","577b2cdf":"## check leaderboard for benzene\nautogluon_benzene.leaderboard()","9aedabb6":"## run model for nitrogen oxides\ntrain['target'] = dt.Frame(target_nitrogen_oxides)\n\nautogluon_nitrogen_oxides = TabularPredictor(\n    label='target'\n)\n\nautogluon_nitrogen_oxides.fit(train_data=train.to_pandas(), time_limit=180)\n\ndel train['target']","667ba0dd":"## check leaderboard for nitrogen oxides\nautogluon_nitrogen_oxides.leaderboard()","42e0afdd":"## generate predictions\npreds_autogluon_carbon_monoxide = dt.Frame(autogluon_carbon_monoxide.predict(test.to_pandas()))\npreds_autogluon_benzene = dt.Frame(autogluon_benzene.predict(test.to_pandas()))\npreds_autogluon_nitrogen_oxides = dt.Frame(autogluon_nitrogen_oxides.predict(test.to_pandas()))","d618267a":"## create submission\nsubmission = dt.Frame(\n    date_time=test_date_time,\n    target_carbon_monoxide=preds_autogluon_carbon_monoxide,\n    target_benzene=preds_autogluon_benzene,\n    target_nitrogen_oxides=preds_autogluon_nitrogen_oxides\n)\n\nsubmission.head()","a9a3dbf1":"## save submission\nsubmission.to_csv(PATH_AUTOGLUON_SUBMISSION)","eb836661":"## clear memory\nshutil.rmtree('AutogluonModels')\n\ndel autogluon_carbon_monoxide\ndel autogluon_benzene\ndel autogluon_nitrogen_oxides\n\ngc.collect()","6f9dea44":"## install packages\n!curl https:\/\/raw.githubusercontent.com\/automl\/auto-sklearn\/master\/requirements.txt | xargs -n 1 -L 1 python3 -m pip install -q\n!python3 -m pip install -q auto-sklearn","0d5b04f8":"## import packages\nfrom autosklearn.regression import AutoSklearnRegressor\nfrom autosklearn.metrics import mean_squared_log_error","438f8548":"## run model for carbon monoxide\nautosklearn_carbon_monoxide = AutoSklearnRegressor(\n    time_left_for_this_task=180,\n    metric=mean_squared_log_error,\n    scoring_functions=[mean_squared_log_error]\n)\n\nautosklearn_carbon_monoxide.fit(X=train.to_pandas(), y=target_carbon_monoxide, dataset_name='tps_jul_2021_carbon_monoxide')","4515f41d":"## check statistics for carbon monoxide\nprint(autosklearn_carbon_monoxide.sprint_statistics())","daf97906":"## run model for benzene\nautosklearn_benzene = AutoSklearnRegressor(\n    time_left_for_this_task=180,\n    metric=mean_squared_log_error,\n    scoring_functions=[mean_squared_log_error]\n)\n\nautosklearn_benzene.fit(X=train.to_pandas(), y=target_benzene, dataset_name='tps_jul_2021_benzene')","8fa2e3f5":"## check statistics for benzene\nprint(autosklearn_benzene.sprint_statistics())","2a5c7252":"## run model for nitrogen oxides\nautosklearn_nitrogen_oxides = AutoSklearnRegressor(\n    time_left_for_this_task=180,\n    metric=mean_squared_log_error,\n    scoring_functions=[mean_squared_log_error]\n)\n\nautosklearn_nitrogen_oxides.fit(X=train.to_pandas(), y=target_nitrogen_oxides, dataset_name='tps_jul_2021_nitrogen_oxides')","72df3d4c":"## check statistics for nitrogen oxides\nprint(autosklearn_nitrogen_oxides.sprint_statistics())","1cac05c8":"## generate predictions\npreds_autosklearn_carbon_monoxide = dt.Frame(autosklearn_carbon_monoxide.predict(test.to_pandas()))\npreds_autosklearn_benzene = dt.Frame(autosklearn_benzene.predict(test.to_pandas()))\npreds_autosklearn_nitrogen_oxides = dt.Frame(autosklearn_nitrogen_oxides.predict(test.to_pandas()))","0729f3e5":"## create submission\nsubmission = dt.Frame(\n    date_time=test_date_time,\n    target_carbon_monoxide=preds_autosklearn_carbon_monoxide,\n    target_benzene=preds_autosklearn_benzene,\n    target_nitrogen_oxides=preds_autosklearn_nitrogen_oxides\n)\n\nsubmission.head()","f258ec43":"## save submission\nsubmission.to_csv(PATH_AUTOSKLEARN_SUBMISSION)","25eb5d3a":"## clear memory\ndel autosklearn_carbon_monoxide\ndel autosklearn_benzene\ndel autosklearn_nitrogen_oxides\n\ngc.collect()","5f057abe":"## install packages\n!python3 -m pip install -q flaml\n!python3 -m pip install -q graphviz --upgrade","6adfa90a":"## import packages\nfrom flaml import AutoML","3a59077c":"## run model for carbon monoxide\nflaml_carbon_monoxide = AutoML()\n\nflaml_carbon_monoxide.fit(X_train=train.to_pandas(), y_train=target_carbon_monoxide, time_budget=180, metric='mse')","398be1bb":"## run model for benzene\nflaml_benzene = AutoML()\n\nflaml_benzene.fit(X_train=train.to_pandas(), y_train=target_benzene, time_budget=180, metric='mse')","10be7e11":"## run model for nitrogen oxides\nflaml_nitrogen_oxides = AutoML()\n\nflaml_nitrogen_oxides.fit(X_train=train.to_pandas(), y_train=target_nitrogen_oxides, time_budget=180, metric='mse')","a9c44715":"## generate predictions\npreds_flaml_carbon_monoxide = dt.Frame(flaml_carbon_monoxide.predict(test.to_pandas()))\npreds_flaml_benzene = dt.Frame(flaml_benzene.predict(test.to_pandas()))\npreds_flaml_nitrogen_oxides = dt.Frame(flaml_nitrogen_oxides.predict(test.to_pandas()))","41f83dbf":"## create submission\nsubmission = dt.Frame(\n    date_time=test_date_time,\n    target_carbon_monoxide=preds_flaml_carbon_monoxide,\n    target_benzene=preds_flaml_benzene,\n    target_nitrogen_oxides=preds_flaml_nitrogen_oxides\n)\n\nsubmission.head()","b5e11efa":"## save submission\nsubmission.to_csv(PATH_FLAML_SUBMISSION)","a9b3798b":"## clear memory\nif Path('catboost_info').exists():\n    shutil.rmtree('catboost_info')\n\nos.remove('default.log')\n\ndel flaml_carbon_monoxide\ndel flaml_benzene\ndel flaml_nitrogen_oxides\n\ngc.collect()","0a4cdebd":"## import packages\nimport h2o\nfrom h2o.automl import H2OAutoML","bcd69fd2":"## prepare data\nh2o.init()\n\nh2o_train = h2o.import_file(PATH_TRAIN)\nh2o_test = h2o.import_file(PATH_TEST)","58acc0d4":"## run model for carbon monoxide\nfeatures = [x for x in h2o_train.columns if x not in ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\nh2oaml_carbon_monoxide = H2OAutoML(\n    max_runtime_secs=180,\n    stopping_metric='RMSLE',\n    sort_metric='RMSLE'\n)\n\nh2oaml_carbon_monoxide.train(x=features, y='target_carbon_monoxide', training_frame=h2o_train)","408f7b89":"## check leaderboard for carbon monoxide\nh2oaml_carbon_monoxide.leaderboard","53780783":"## run model for carbon benzene\nfeatures = [x for x in h2o_train.columns if x not in ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\nh2oaml_benzene = H2OAutoML(\n    max_runtime_secs=180,\n    stopping_metric='RMSLE',\n    sort_metric='RMSLE'\n)\n\nh2oaml_benzene.train(x=features, y='target_benzene', training_frame=h2o_train)","81e56a5a":"## check leaderboard for benzene\nh2oaml_benzene.leaderboard","cbb883d7":"## run model for nitrogen oxides\nfeatures = [x for x in h2o_train.columns if x not in ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\n\nh2oaml_nitrogen_oxides = H2OAutoML(\n    max_runtime_secs=180,\n    stopping_metric='RMSLE',\n    sort_metric='RMSLE'\n)\n\nh2oaml_nitrogen_oxides.train(x=features, y='target_nitrogen_oxides', training_frame=h2o_train)","b277eff3":"## check leaderboard for nitrogen oxides\nh2oaml_nitrogen_oxides.leaderboard","f66c655c":"## generate predictions\npreds_h2oaml_carbon_monoxide = dt.Frame(h2oaml_carbon_monoxide.leader.predict(h2o_test).as_data_frame().predict)\npreds_h2oaml_benzene = dt.Frame(h2oaml_benzene.leader.predict(h2o_test).as_data_frame().predict)\npreds_h2oaml_nitrogen_oxides = dt.Frame(h2oaml_nitrogen_oxides.leader.predict(h2o_test).as_data_frame().predict)","89fd5038":"## create submission\nsubmission = dt.Frame(\n    date_time=test_date_time,\n    target_carbon_monoxide=preds_h2oaml_carbon_monoxide,\n    target_benzene=preds_h2oaml_benzene,\n    target_nitrogen_oxides=preds_h2oaml_nitrogen_oxides\n)\n\nsubmission.head()","e2d59c8e":"## save submission\nsubmission.to_csv(PATH_H2OAML_SUBMISSION)","dc275781":"## clear memory\nh2o.cluster().shutdown()\n\ndel h2oaml_carbon_monoxide\ndel h2oaml_benzene\ndel h2oaml_nitrogen_oxides\n\ngc.collect()","41b6989b":"## install packages\n!python3 -m pip install -q lightautoml","c58b2bfc":"## import packages\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML\nfrom lightautoml.tasks import Task","9902e5a3":"## run model for carbon monoxide\ntrain['target'] = dt.Frame(target_carbon_monoxide)\n\nlaml_carbon_monoxide = TabularAutoML(\n    task = Task('reg'),\n    timeout = 180\n)\n\nlaml_carbon_monoxide.fit_predict(train_data=train.to_pandas(), roles={'target': 'target'})\n\ndel train['target']","bf1a59b7":"## run model for benzene\ntrain['target'] = dt.Frame(target_benzene)\n\nlaml_benzene = TabularAutoML(\n    task = Task('reg'),\n    timeout = 180\n)\n\nlaml_benzene.fit_predict(train_data=train.to_pandas(), roles={'target': 'target'})\n\ndel train['target']","a6787458":"## run model for nitrogen oxides\ntrain['target'] = dt.Frame(target_nitrogen_oxides)\n\nlaml_nitrogen_oxides = TabularAutoML(\n    task = Task('reg'),\n    timeout = 180\n)\n\nlaml_nitrogen_oxides.fit_predict(train_data=train.to_pandas(), roles={'target': 'target'})\n\ndel train['target']","c1e0b334":"## generate predictions\npreds_laml_carbon_monoxide = laml_carbon_monoxide.predict(test.to_pandas()).data.ravel()\npreds_laml_benzene = laml_benzene.predict(test.to_pandas()).data.ravel()\npreds_laml_nitrogen_oxides = laml_nitrogen_oxides.predict(test.to_pandas()).data.ravel()","dcf613dd":"## create submission\nsubmission = dt.Frame(\n    date_time=test_date_time,\n    target_carbon_monoxide=preds_laml_carbon_monoxide,\n    target_benzene=preds_laml_benzene,\n    target_nitrogen_oxides=preds_laml_nitrogen_oxides\n)\n\nsubmission.head()","2d91f23a":"## save submission\nsubmission.to_csv(PATH_LAML_SUBMISSION)","56f4f30f":"## clear memory\nif Path('catboost_info').exists():\n    shutil.rmtree('catboost_info')\n\ndel laml_carbon_monoxide\ndel laml_benzene\ndel laml_nitrogen_oxides\n\ngc.collect()","7f436272":"!python3 -m pip install -q mljar-supervised\n!python3 -m pip install -q graphviz --upgrade","54b6a1ea":"## import packages\nfrom supervised import AutoML","aeef0557":"## run model for carbon monoxide\nmljar_carbon_monoxide = AutoML(\n    total_time_limit=180,\n    eval_metric='rmse',\n    results_path='.\/mljar_carbon_monoxide'\n)\n\nmljar_carbon_monoxide.fit(X=train.to_pandas(), y=target_carbon_monoxide)","b8cc4118":"## check leaderboard for carbon monoxide\nmljar_carbon_monoxide.get_leaderboard()","289e3f0f":"## run model for benzene\nmljar_benzene = AutoML(\n    total_time_limit=180,\n    eval_metric='rmse',\n    results_path='.\/mljar_benzene'\n)\n\nmljar_benzene.fit(X=train.to_pandas(), y=target_benzene)","e69394e6":"## check leaderboard for benzene\nmljar_benzene.get_leaderboard()","68512f36":"## run model for nitrogen oxides\nmljar_nitrogen_oxides = AutoML(\n    total_time_limit=180,\n    eval_metric='rmse',\n    results_path='.\/mljar_nitrogen_oxides'\n)\n\nmljar_nitrogen_oxides.fit(X=train.to_pandas(), y=target_nitrogen_oxides)","d12a775a":"## check leaderboard for nitrogen oxides\nmljar_nitrogen_oxides.get_leaderboard()","0cb298f2":"## generate predictions\npreds_mljar_carbon_monoxide = dt.Frame(mljar_carbon_monoxide.predict(test.to_pandas()))\npreds_mljar_benzene = dt.Frame(mljar_benzene.predict(test.to_pandas()))\npreds_mljar_nitrogen_oxides = dt.Frame(mljar_nitrogen_oxides.predict(test.to_pandas()))","3e25cda1":"## create submission\nsubmission = dt.Frame(\n    date_time=test_date_time,\n    target_carbon_monoxide=preds_mljar_carbon_monoxide,\n    target_benzene=preds_mljar_benzene,\n    target_nitrogen_oxides=preds_mljar_nitrogen_oxides\n)\n\nsubmission.head()","dae9440a":"## save submission\nsubmission.to_csv(PATH_MLJAR_SUBMISSION)","d2d60dba":"## clear memory\nshutil.rmtree('mljar_carbon_monoxide')\nshutil.rmtree('mljar_benzene')\nshutil.rmtree('mljar_nitrogen_oxides')\n\ndel mljar_carbon_monoxide\ndel mljar_benzene\ndel mljar_nitrogen_oxides\n\ngc.collect()","2577dce3":"## import packages\nfrom tpot import TPOTRegressor\nfrom sklearn.metrics import make_scorer, mean_squared_log_error","914d1cc3":"## run model for carbon monoxide\nmsle = make_scorer(mean_squared_log_error, greater_is_better=False)\n\ntpot_carbon_monoxide = TPOTRegressor(\n    max_time_mins=3,\n    scoring=msle\n)\n\ntpot_carbon_monoxide.fit(features=train.to_pandas(), target=target_carbon_monoxide)","b558c85a":"## check pipeline for carbon monoxide\nprint(tpot_carbon_monoxide.fitted_pipeline_)","d1452ef6":"## run model for benzene\nmsle = make_scorer(mean_squared_log_error, greater_is_better=False)\n\ntpot_benzene = TPOTRegressor(\n    max_time_mins=3,\n    scoring=msle\n)\n\ntpot_benzene.fit(features=train.to_pandas(), target=target_benzene)","6234f59a":"## check pipeline for benzene\nprint(tpot_benzene.fitted_pipeline_)","68712faa":"## run model for nitrogen oxides\nmsle = make_scorer(mean_squared_log_error, greater_is_better=False)\n\ntpot_nitrogen_oxides = TPOTRegressor(\n    max_time_mins=3,\n    scoring=msle\n)\n\ntpot_nitrogen_oxides.fit(features=train.to_pandas(), target=target_nitrogen_oxides)","2d60edaf":"## check pipeline for benzene\nprint(tpot_nitrogen_oxides.fitted_pipeline_)","887daaaf":"## generate predictions\npreds_tpot_carbon_monoxide = dt.Frame(tpot_carbon_monoxide.predict(test.to_pandas()))\npreds_tpot_benzene = dt.Frame(tpot_benzene.predict(test.to_pandas()))\npreds_tpot_nitrogen_oxides = dt.Frame(tpot_nitrogen_oxides.predict(test.to_pandas()))","aec4eb38":"## create submission\nsubmission = dt.Frame(\n    date_time=test_date_time,\n    target_carbon_monoxide=preds_tpot_carbon_monoxide,\n    target_benzene=preds_tpot_benzene,\n    target_nitrogen_oxides=preds_tpot_nitrogen_oxides\n)\n\nsubmission.head()","488f3bae":"## save submission\nsubmission.to_csv(PATH_TPOT_SUBMISSION)","76a85192":"## clear memory\ndel tpot_carbon_monoxide\ndel tpot_benzene\ndel tpot_nitrogen_oxides\n\ngc.collect()","54156f93":"## Auto-Sklearn\n[auto-sklearn](https:\/\/automl.github.io\/auto-sklearn) is an automated machine learning toolkit and a drop-in replacement for a scikit-learn estimator","00cd0128":"This is just a baseline submission over which a lot of improvements can be made. You can read more about TPOT's workflow, settings, hyperparameters, optimizations and more here:\n\n* [Documentation of TPOT](http:\/\/epistasislab.github.io\/tpot)","22a1e527":"This is just a baseline submission over which a lot of improvements can be made. You can read more about LightAutoML's workflow, settings, hyperparameters, optimizations and more here:\n\n* [Documentation of LightAutoML](https:\/\/lightautoml.readthedocs.io\/en\/latest\/index.html)","8c696027":"## AutoGluon\n<img src='https:\/\/user-images.githubusercontent.com\/16392542\/77208906-224aa500-6aba-11ea-96bd-e81806074030.png' width='250px'>\n\n[AutoGluon](https:\/\/auto.gluon.ai\/stable\/index.html) is an automl library open sourced by [Amazon](http:\/\/amazon.com\/aws)","fef77634":"## MLJAR\n<img src='attachment:d0486310-5fea-49fd-b080-e8959658eb99.png' width='150px'>\n\n[MLJAR](https:\/\/mljar.com) is an automated machine learning tool for tabular data","7c6e0e63":"## LightAutoML\n[LightAutoML](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML) is a framework for automatic classification and regression model creation open sourced by [Sberbank](https:\/\/www.sberbank.com) AI Lab.","0defcc8b":"## FLAML\n<img src='https:\/\/github.com\/microsoft\/FLAML\/raw\/main\/docs\/images\/FLAML.png' width='150px'>\n\n[FLAML](https:\/\/microsoft.github.io\/FLAML) is a fast and light automl library open sourced by [Microsoft](https:\/\/opensource.microsoft.com)","70689f36":"## H2O AutoML\n<img src='https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/_images\/h2o-automl-logo.jpg' width='150px'>\n\n[H2O AutoML](https:\/\/www.h2o.ai\/products\/h2o-automl) is an automated machine learning library open sourced by [H2O.ai](https:\/\/h2o.ai)","615558d9":"**Auto**mated **M**achine **L**earning (**AutoML**) has become widely adopted for building, experimenting and productionizing various types of machine learning models across business use-cases.\n\nThere are different open source solutions available and this notebook explores a simple baseline solution for some of them on the [Kaggle TPS (July 2021) competition](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jul-2021).\n\n* [AutoGluon](#AutoGluon)\n* [Auto-Sklearn](#Auto-Sklearn)\n* [FLAML](#FLAML)\n* [H2O AutoML](#H2O-AutoML)\n* [LightAutoML](#LightAutoML)\n* [MLJAR](#MLJAR)\n* [TPOT](#TPOT)","03e9ce0e":"## Similar Tutorials\nSimilar tutorials on other Kaggle TPS competitions are published here:\n\n* [AutoML Tutorial: TPS (January 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-january-2021)\n* [AutoML Tutorial: TPS (February 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-february-2021)\n* [AutoML Tutorial: TPS (March 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-march-2021)\n* [AutoML Tutorial: TPS (April 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-april-2021)\n* [AutoML Tutorial: TPS (May 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-may-2021)\n* [AutoML Tutorial: TPS (June 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-june-2021)","43b4500d":"This is just a baseline submission over which a lot of improvement can be made. You can read more about MLJAR's workflow, settings, hyperparameters, interpretability and more here:\n\n* [Documentation of MLJAR](https:\/\/supervised.mljar.com)","a874c1b5":"This is just a baseline submission over which a lot of improvements can be made. You can read more about AutoGluon's workflow, settings, hyperparameters, optimizations and more here:\n\n* [Documentation of AutoGluon](https:\/\/auto.gluon.ai\/stable\/index.html)","be28280e":"This is just a baseline submission over which a lot of improvement can be made. You can read more about H2O AutoML's workflow, settings, hyperparameters, interpretability and more here:\n\n* [Documentation of H2O AutoML](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/automl.html)\n* [Deep dive of H2O AutoML](https:\/\/github.com\/vopani\/fortyone#automl-series-)","18d96786":"This is just a baseline submission over which a lot of improvements can be made. You can read more about FLAML's workflow, settings, hyperparameters, optimizations and more here:\n\n* [Documentation of FLAML](https:\/\/microsoft.github.io\/FLAML)","8ad5ca50":"This is just a baseline submission over which a lot of improvements can be made. You can read more about Auto-Sklearn's workflow, settings, hyperparameters, optimizations and more here:\n\n* [Documentation of auto-sklearn](https:\/\/automl.github.io\/auto-sklearn)\n* [Deep dive of auto-sklearn](https:\/\/github.com\/vopani\/fortyone#automl-series-)","a3f7bdc8":"<div align='center'>\n    <h1>AutoML Tutorial<\/h1>\n    <img src='https:\/\/github.com\/vopani\/fortyone\/blob\/main\/images\/automl_banner_530_x_455.png?raw=true'>\n<\/div>","466432af":"## TPOT\n<img src='https:\/\/raw.githubusercontent.com\/EpistasisLab\/tpot\/master\/images\/tpot-logo.jpg' width='150px'>\n\n[TPOT](http:\/\/epistasislab.github.io\/tpot) is a Python Automated Machine Learning tool that optimizes machine learning pipelines using genetic programming"}}