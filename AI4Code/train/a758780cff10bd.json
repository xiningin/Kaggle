{"cell_type":{"d64748b3":"code","70c36fd2":"code","482dcc2a":"code","a7ea58e5":"code","4d8fe374":"code","b1a2e8b3":"code","023f1f4b":"code","0ca73746":"code","0c470730":"code","687eed09":"code","ca105cff":"code","2520ac1c":"markdown"},"source":{"d64748b3":"import numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport pandas as pd\nimport scipy.stats as stat\nfrom scipy.stats import norm\n\nimport os","70c36fd2":"from scipy.stats import t\n\n\ndef calcula_numero_desvios_tstudent_para_confianca(confianca, tamanho_amostra):\n    mean = 0\n    std = 1\n    rv = t(df=(tamanho_amostra-1))\n    return rv.interval(confianca)[1]","482dcc2a":"from scipy.stats import norm\n\n\ndef calcula_numero_desvios_normal_para_confianca(confianca):\n    mean = 0\n    std = 1\n    rv = norm(loc=mean, scale=std)\n    return rv.interval(confianca)[1]","a7ea58e5":"def recupera_amostra(populacao, tamanho_amostra):\n    return populacao[np.random.randint(0, len(populacao), tamanho_amostra)]","4d8fe374":"# Define popula\u00e7\u00e3o\n\nmean = 160\nstd = 20\ndistribuicao_probabilidades = norm(loc=mean, scale=std)\n\ntamanho_populacao = 100000\n\npopulacao = distribuicao_probabilidades.rvs(size=tamanho_populacao, random_state=1)\n\nprint('Tamanho popula\u00e7\u00e3o {}, m\u00e9dia {}, desvio {}'.format(len(populacao), np.mean(populacao), np.std(populacao)))\n\n","b1a2e8b3":"fig, axs = plt.subplots(1, 1, figsize=(14,6))\n\naxs.hist(populacao, density=True, facecolor='g', alpha=0.75, bins=50)\naxs.grid(True)\naxs.set_title('Histograma de alturas da Popula\u00e7\u00e3o')\n\nplt.show()","023f1f4b":"tamanho_amostra = 100\namostra = recupera_amostra(populacao, tamanho_amostra)\nprint(amostra)","0ca73746":"fig, axs = plt.subplots(1, 1, figsize=(14,6))\n\naxs.hist(amostra, density=True, facecolor='g', alpha=0.75, bins=50)\naxs.grid(True)\naxs.set_title('Histograma de alturas da amostra')\n\nplt.show()","0c470730":"\n\n#Dada uma amostra de 100 elementos, calcule a m\u00e9dia da altura da populacao considerando confian\u00e7a de 93%\n\ntamanho_amostra = 100\nconfianca = 0.93\n\n#1-Calcule a m\u00e9dia da amostra ex. media_amostra = np.mean(amostra)\nmedia_amostra = np.mean(amostra)\nprint (\"M\u00e9dia da amostra {}:\". format (media_amostra))\n\n#2-Calcule o desvio da amostra ex. desvio_amostra = np.std(amostra)\ndesvio_amostra = np.std(amostra)\nprint (\"Desvio da amostra {}:\". format (desvio_amostra))\n\n#3-Calcule quantos desvios precisar\u00e1 para seu grau de confi\u00e2n\u00e7a ex. numero_desvios = calcula_numero_desvios_tstudent_para_confianca(confian\u00e7a, tamanho_amostra)\nnumero_desvios = calcula_numero_desvios_tstudent_para_confianca(0.93, tamanho_amostra)\nprint (\"Numero de desvios {}:\". format (numero_desvios))\n\n#4-Calcule o desvio das amostras ex. desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\ndesvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\nprint (\"Desvio das amostras {}:\". format (desvio_amostras))\n\n#5-Calcule a margem de erro ex. margem_erro = numero_desvios*desvio_amostras\nmargem_erro = numero_desvios*desvio_amostras\nprint (\"Margem de erro {}:\". format (margem_erro))\n\n#6-Calcule o intervalo ex. inferior = media_amostra-margem_erro, superior = media_amostra+margem_erro\ninferior = media_amostra-margem_erro\nprint (\"Limite inferior {}:\". format (inferior))\nsuperior = media_amostra+margem_erro\nprint (\"Limite superior {}:\". format (superior))\n\nprint('A m\u00e9dia da popula\u00e7\u00e3o estar\u00e1 entre {} e {} com confian\u00e7a {}'.format(inferior,superior,93))","687eed09":"# Obtenha uma amostra de 1000 elementos e calcule a m\u00e9dia da altura da populacao considerando confian\u00e7a de 80%\n\ntamanho_amostra = 1000\namostra = recupera_amostra(populacao, tamanho_amostra)\nprint(amostra)\nconfianca = 0.80\n\nmedia_amostra = np.mean(amostra)\nprint (\"M\u00e9dia da amostra {}:\". format (media_amostra))\n\ndesvio_amostra = np.std(amostra)\nprint (\"Desvio da amostra {}:\". format (desvio_amostra))\n\nnumero_desvios = calcula_numero_desvios_tstudent_para_confianca(0.80, tamanho_amostra)\nprint (\"Numero de desvios {}:\". format (numero_desvios))\n\ndesvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\nprint (\"Desvio das amostras {}:\". format (desvio_amostras))\n\nmargem_erro = numero_desvios*desvio_amostras\nprint (\"Margem de erro {}:\". format (margem_erro))\n\ninferior = media_amostra-margem_erro\nprint (\"Limite inferior {}:\". format (inferior))\nsuperior = media_amostra+margem_erro\nprint (\"Limite superior {}:\". format (superior))\n\nprint('A m\u00e9dia da popula\u00e7\u00e3o estar\u00e1 entre {} e {} com confian\u00e7a {}'.format(inferior,superior,80))","ca105cff":"# Obtenha uma amostra de 100 elementos e calcule a m\u00e9dia da altura da populacao considerando confian\u00e7a de 99%\n\ntamanho_amostra = 100\namostra = recupera_amostra(populacao, tamanho_amostra)\nprint(amostra)\nconfianca = 0.99\n\nmedia_amostra = np.mean(amostra)\nprint (\"M\u00e9dia da amostra {}:\". format (media_amostra))\n\ndesvio_amostra = np.std(amostra)\nprint (\"Desvio da amostra {}:\". format (desvio_amostra))\n\nnumero_desvios = calcula_numero_desvios_tstudent_para_confianca(0.99, tamanho_amostra)\nprint (\"Numero de desvios {}:\". format (numero_desvios))\n\ndesvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\nprint (\"Desvio das amostras {}:\". format (desvio_amostras))\n\nmargem_erro = numero_desvios*desvio_amostras\nprint (\"Margem de erro {}:\". format (margem_erro))\n\ninferior = media_amostra-margem_erro\nprint (\"Limite inferior {}:\". format (inferior))\nsuperior = media_amostra+margem_erro\nprint (\"Limite superior {}:\". format (superior))\n\nprint('A m\u00e9dia da popula\u00e7\u00e3o estar\u00e1 entre {} e {} com confian\u00e7a {}'.format(inferior,superior,99))","2520ac1c":"# Exerc\u00edcio para o curso de avalia\u00e7\u00e3o de pol\u00edticas p\u00fablicas"}}