{"cell_type":{"567d9a68":"code","51b0ddbb":"code","dc291400":"code","830d0ba3":"code","76ec0642":"code","f53bcc3e":"code","7905d6d7":"code","b5572cd6":"code","c002e121":"code","1f1335fd":"code","3de5e6ad":"code","28091967":"code","5a33fb89":"code","b6f516f3":"code","19ffd60d":"code","84c1c735":"code","b049f564":"code","20d1db27":"code","c989d2a6":"code","c07efbac":"code","5e88226e":"code","ac0ee106":"code","e6f34799":"code","cecd64b9":"code","fb850ffd":"code","cee3c974":"code","f488d4d4":"code","6a7cfffc":"code","6a3e5964":"code","6de976c6":"code","2a961506":"code","59c15118":"code","7c346d7e":"code","bb3beb3b":"code","ca3ba38e":"code","3c6ae145":"code","65e49b1f":"code","38d4264c":"code","41c12984":"code","1a3ffee4":"code","d80a4276":"code","498e70a2":"code","5cea6e4e":"code","7905ac57":"code","b2946d48":"code","a1506ea7":"code","7f0b7e6f":"code","0e9ade36":"code","3189091d":"code","9bc708a4":"markdown","db9b2fb4":"markdown","c01b0181":"markdown","1aeab5ed":"markdown","4c2a41a5":"markdown","2075bd10":"markdown","f64bcebd":"markdown","5af78117":"markdown","f169e8f8":"markdown","a13a2a7e":"markdown","fd3965f9":"markdown","0ef9d10f":"markdown","61d43542":"markdown","8b280138":"markdown","7362aa00":"markdown","444f2b67":"markdown","21c9eeec":"markdown","c6e73b8a":"markdown","a9f331bc":"markdown","47920252":"markdown","206a3ae1":"markdown","fdb3ba5d":"markdown","47b845a4":"markdown","005df1b7":"markdown","e870c241":"markdown","f5954017":"markdown","0ce36bf5":"markdown","519bd6fd":"markdown","351323a8":"markdown","7764fbf4":"markdown","e7e7eab5":"markdown"},"source":{"567d9a68":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","51b0ddbb":"def top10_barplot(x, y, xlabel, ylabel, title, figsize=(12, 5)):\n    fig, ax = plt.subplots(figsize=figsize)\n    ax = sns.barplot(x=x, y=y, ax=ax)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.set_title(title)\n    plt.show()","dc291400":"def load_data(main_fp, extra_fp, nrows=None):\n    main_data = pd.read_csv(main_fp, nrows=nrows, index_col=\"show_id\")\n    extra_data = pd.read_csv(extra_fp, nrows=nrows, index_col=\"show_id\")\n    imdb_rating = extra_data.imdb_rating\n    data = pd.concat([main_data, imdb_rating], axis=1)\n    data = data.rename({\"imdb_rating\":\"imdb_score\"}, axis=1)\n    # to category\n    data[\"type\"] = data.type.astype('category')\n    data[\"rating\"] = data.rating.astype('category')\n    # to datetime\n    data[\"date_added\"] = pd.to_datetime(data[\"date_added\"])\n    # to List[str]\n    data.loc[:, \"director\"] = data.director.str.split(\", \")\n    data.loc[:, \"cast\"] = data.cast.str.split(\", \")\n    data.loc[:, \"country\"] = data.country.str.split(\", \")\n    data.loc[:, \"listed_in\"] = data.listed_in.str.split(\", \")\n    return data\n\ndata = load_data(\n    main_fp=\"..\/input\/netflix-shows\/netflix_titles.csv\",\n    extra_fp=\"..\/input\/netflix-films-tv-shows-imdb-scores\/imdb_rating_for_netflix_titles.csv\"\n)\ndata.info()","830d0ba3":"print(f\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439: {len(data.title.unique())}\")","76ec0642":"data_reindex = data.set_index(\"title\", drop=True)\ndata_reindex.index[:10]","f53bcc3e":"directors = {}\ndef counter_maker(_dict):\n    _dict[\"Unknown\"] = 0\n    def counter(x):\n        if not isinstance(x, list):\n            _dict[\"Unknown\"] += 1\n        else:\n            for elm in x:\n                if _dict.get(elm) is not None:\n                    _dict[elm] += 1\n                else:\n                    _dict[elm] = 1\n    return counter\n\ndata_reindex.director.apply(counter_maker(directors))\ndirectors_series = pd.Series(directors).sort_values(ascending=False)","7905d6d7":"top10_directors_by_count = directors_series.iloc[1:11]\ntop10_barplot(\n    x=top10_directors_by_count.index, \n    y=top10_directors_by_count, \n    xlabel=\"Director Name\", \n    ylabel=\"Count\", \n    title=\"Top 10 \u0440\u0435\u0436\u0438\u0441\u0451\u0440\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0448\u043e\u0443 \u043d\u0430 Netflix.\",\n    figsize=(18, 5)\n)","b5572cd6":"rajiv = data_reindex[data_reindex.director.dropna().apply(lambda x: \"Rajiv Chilaka\" in x) & ~data_reindex.director.isna()]\nrajiv","c002e121":"print(f\"Rajiv Chilaka \u043f\u0440\u043e\u0438\u0437\u0432\u0451\u043b {rajiv.index.str.contains('Chhota').sum()} \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u043f\u0440\u043e \u043a\u043e\u0433\u043e-\u0442\u043e \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Chhota.\")","1f1335fd":"print(f\"\u0420\u0435\u0436\u0438\u0441\u0451\u0440 \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u0434\u043b\u044f {directors_series.iloc[0]} \u0448\u043e\u0443.\")","3de5e6ad":"n_direcotors = data_reindex.director.dropna().apply(len).value_counts()\nn_direcotors = n_direcotors.sort_index()\nax = n_direcotors.plot.bar()\nax.set_title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0436\u0438\u0441\u0451\u0440\u043e\u0432 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0448\u043e\u0443.\")\nax.set_xlabel(\"\u041a\u043e\u043b-\u0432\u043e \u0440\u0435\u0436\u0438\u0441\u0451\u0440\u043e\u0432\")\nax.set_ylabel(\"\u041a\u043e\u043b-\u0432\u043e \u0448\u043e\u0443\")\nplt.show()","28091967":"data_reindex[~data_reindex.director.isna()].iloc[data_reindex.director.dropna().apply(len).argmax()]","5a33fb89":"cast = {}\ndata_reindex.cast.apply(counter_maker(cast))\nn_actor = pd.Series(cast).sort_values(ascending=False)\ntop10_actors_by_count = n_actor.iloc[1:11]\ntop10_barplot(\n    x=top10_actors_by_count.index, \n    y=top10_actors_by_count, \n    xlabel=\"Actor Name\", \n    ylabel=\"Count\", \n    title=\"Top 10 \u0430\u043a\u0442\u0451\u0440\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0448\u043e\u0443 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0438 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438.\",\n    figsize=(18, 5)\n)","b6f516f3":"data_reindex[data_reindex.cast.dropna().apply(lambda x: \"Anupam Kher\" in x) & ~data_reindex.director.isna()]","19ffd60d":"lists_tv_shows = {}\nlists_movies = {}\ndata_reindex[data_reindex.type == \"Movie\"].listed_in.apply(counter_maker(lists_movies))\ndata_reindex[data_reindex.type == \"TV Show\"].listed_in.apply(counter_maker(lists_tv_shows))\n\nlists_tvshows_series = pd.Series(lists_tv_shows).sort_values(ascending=False)\nlists_movies_series = pd.Series(lists_movies).sort_values(ascending=False)","84c1c735":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))\nlists_movies_series.iloc[:-1].plot.bar(color=\"blue\", ax=ax1)\nax1.set_title(\"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0438 \u043a\u043e\u043b-\u0432\u043e \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0441 \u043d\u0438\u043c\u0438.\")\nax1.set_ylim([0, 3000])\nlists_tvshows_series.iloc[:-1].plot.bar(color=\"red\", ax=ax2)\nax2.set_title(\"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u043a\u043e\u043b-\u0432\u043e \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0441 \u043d\u0438\u043c\u0438.\")\nax2.set_ylim([0, 3000])\nplt.show()","b049f564":"# Parse score\nlists_scores = {\"Movie\":{}, 'TV Show':{}}\nfor i in range(len(data_reindex)):\n    show_type, lists, score = data_reindex.iloc[i][[\"type\", \"listed_in\", \"imdb_score\"]]\n    if not pd.notna(score):\n        continue\n    for g in lists:\n        if lists_scores[show_type].get(g) is not None:\n            lists_scores[show_type][g].append(score)\n        else:\n            lists_scores[show_type][g] = [score]","20d1db27":"mean_lists_scores_movie = pd.Series({k:np.mean(v) for k, v in lists_scores[\"Movie\"].items()}).sort_values(ascending=False)\nmean_lists_scores_tvshow = pd.Series({k:np.mean(v) for k, v in lists_scores[\"TV Show\"].items()}).sort_values(ascending=False)","c989d2a6":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 5))\nmean_lists_scores_movie.plot.bar(color=\"blue\", ax=ax1)\nax1.set_title(\"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0438 \u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438.\")\nax1.set_ylim([3, 10])\nmean_lists_scores_tvshow.plot.bar(color=\"red\", ax=ax2)\nax2.set_title(\"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438.\")\nax2.set_ylim([3, 10])\nplt.show()","c07efbac":"type_score = data_reindex[[\"type\", \"imdb_score\"]].copy()\ntype_score[\"type\"] = type_score[\"type\"].cat.codes\nprint(\n    \"\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0434\u043b\u044f \u0421\u0435\u0440\u0438\u0430\u043b\u043e\u0432:\",\n    type_score.corr().loc[\"imdb_score\", \"type\"]\n)","5e88226e":"tv_shows = data_reindex[data_reindex.type == \"TV Show\"].copy()\nmovies = data_reindex[data_reindex.type == \"Movie\"].copy()","ac0ee106":"tv_shows.duration = tv_shows.duration.str.replace(\"Season[s]*\", \"\").astype(int)","e6f34799":"ax = tv_shows.duration.value_counts().plot.bar()\nax.set_title(\"\u041a\u043e\u043b-\u0432\u043e \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0441 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c duration.\")\nax.set_xlabel(\"duration\")\nax.set_ylabel(\"count\")\nplt.show()","cecd64b9":"print(\n    \"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 IMDb:\",\n    tv_shows.corr().loc[\"duration\", \"imdb_score\"]\n     )","fb850ffd":"ax = tv_shows.plot.scatter(\"duration\", \"imdb_score\")\nax.set_title(\"Scatter plot\")\nplt.show()","cee3c974":"movies.duration = movies.duration.str.replace(\" min\", \"\").dropna().astype(int)","f488d4d4":"ax = movies.duration.value_counts().plot.hist(bins=50)\nax.set_xlabel(\"duration(min)\")\nax.set_title(\"\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0444\u0438\u043b\u044c\u043c\u0430.\")","6a7cfffc":"print(\n    \"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 IMDb:\",\n    movies.corr().loc[\"duration\", \"imdb_score\"]\n     )","6a3e5964":"movies.plot.scatter(\"duration\", \"imdb_score\")\nplt.show()","6de976c6":"dur_in_rat = data_reindex[data_reindex.rating.str.contains(\"min\").dropna() & ~data_reindex.rating.isna()].copy()\ndur_in_rat","2a961506":"data_reindex.loc[dur_in_rat.index, \"duration\"] = data_reindex.loc[dur_in_rat.index, \"rating\"]\ndata_reindex.loc[dur_in_rat.index, \"rating\"] = np.nan\ndata_reindex.rating = data_reindex.rating.astype(\"object\").astype(\"category\")\ndata_reindex.loc[dur_in_rat.index]","59c15118":"data_reindex.rating.value_counts()","7c346d7e":"fig, ax = plt.subplots(figsize=(10, 5))\ndata_reindex[~data_reindex.rating.isna()].plot.scatter(x=\"rating\", y=\"imdb_score\", ax=ax)\nplt.show()","bb3beb3b":"neflix_year_added_count = data_reindex.date_added.dropna().dt.year.value_counts()\nneflix_year_added_count_sorted = neflix_year_added_count.sort_index(ascending=False)\n\nfig, ax = plt.subplots(figsize=(10, 5))\nax = sns.barplot(x=neflix_year_added_count_sorted.index, y=neflix_year_added_count_sorted, ax=ax)\nax.set_title(\"Netflix Count added per year\")\nax.set_xlabel(\"year\")\nax.set_ylabel(\"count added\")\nplt.show()","ca3ba38e":"content = data_reindex.loc[data_reindex[\"date_added\"].notna(), [\"date_added\", \"imdb_score\"]].copy()\ncontent[\"date_added\"] = content[\"date_added\"].dt.year\ncontent","3c6ae145":"year_score = content.pivot_table(index=\"date_added\", values=\"imdb_score\", aggfunc=\"mean\")\n\nax = sns.barplot(x=year_score.index[-3:], y=year_score.imdb_score.iloc[-3:], color=\"blue\")\nax.set_title(\"Netflix Score per Year\")\nax.set_xlabel(\"year\")\nax.set_ylabel(\"score\")\nplt.show()","65e49b1f":"content = data_reindex.loc[data_reindex[\"date_added\"].notna(), [\"date_added\", \"type\"]].copy()\ncontent[\"date_added\"] = content[\"date_added\"].dt.year","38d4264c":"count_movies = content[content.type == \"Movie\"].date_added.value_counts()\ncount_tvshows = content[content.type == \"TV Show\"].date_added.value_counts()\ncount_movies.name = \"Movie\"\ncount_tvshows.name = \"TV Show\"\ncount_types = pd.concat([count_movies, count_tvshows], axis=1).fillna(0)\ncount_types[\"TV Show\"] = count_types[\"TV Show\"].astype(int)","41c12984":"ax = count_types.iloc[-3:].plot(kind='bar', stacked=True, color=['steelblue', 'red'])\nax.set_title(\"\u0421\u0442\u043e\u043b\u0431\u0447\u0430\u0442\u0430\u044f \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u0441 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0435\u0439 \u0424\u0438\u043b\u044c\u043c\u043e\u0432\/\u0421\u0435\u0440\u0438\u0430\u043b\u043e\u0432.\")\nplt.show()","1a3ffee4":"fig, axes = plt.subplots(ncols=3, figsize=(10, 5))\nfor i, ax in enumerate(axes):\n    ax.pie(count_types.iloc[-3+i], labels=[\"Movie\", \"TV Show\"], autopct='%1.f%%')\n    ax.set_title(count_types.index[-3+i])\nplt.show()","d80a4276":"countries = {}\ndef get_top10_contentmaker_country():\n    top10_contentmaker_country = pd.Series(countries).sort_values(ascending=False).iloc[:10]\n    top10_contentmaker_country.index = top10_contentmaker_country.index.fillna(\"Unknown\")\n    return top10_contentmaker_country\n    \n\ndata_reindex[\"country\"].apply(counter_maker(countries))\ntop10_contentmaker_country = get_top10_contentmaker_country()","498e70a2":"top10_barplot(\n    x=top10_contentmaker_country.index,\n    y=top10_contentmaker_country,\n    xlabel=\"Country\",\n    ylabel=\"Shows\",\n    title=\"Shows made in country\"\n)","5cea6e4e":"usa_coop = 0\ndef get_coop_usa(x):\n    global usa_coop\n    if np.any(pd.notna(x)) and len(x) > 1:\n        usa_coop += 1 if \"United States\" in x else 0\n\ndata_reindex[\"country\"].apply(get_coop_usa)\ncountries[\"US+Other\"] = usa_coop\ncountries[\"United States\"] -= usa_coop","7905ac57":"top10_contentmaker_country = get_top10_contentmaker_country()\ntop10_barplot(\n    x=top10_contentmaker_country.index,\n    y=top10_contentmaker_country,\n    xlabel=\"Country\",\n    ylabel=\"Shows\",\n    title=\"Shows made in country\"\n)","b2946d48":"countries_imdb = {k:[] for k in countries.keys()}\ncountries_imdb.update({np.nan:[]})\nfor i in range(len(data_reindex)):\n    country, score = data_reindex.iloc[i, :][[\"country\", \"imdb_score\"]]\n    if not pd.notna(score):\n        continue\n    if not isinstance(country, list):\n        countries_imdb[country].append(score)\n        continue\n    for c in country:\n        if (len(country) > 1) and (c == \"United States\"):\n            countries_imdb[\"US+Other\"].append(score)\n        else:\n            countries_imdb[c].append(score)","a1506ea7":"def get_imdb_scores_for_country(dictionary, f):   \n    data = pd.Series({k:f(v) for k, v in dictionary.items()}).sort_values(ascending=False)\n    data.index = data.index.fillna(\"Unknown\")\n    return data\n\ncountry_scores_mean = get_imdb_scores_for_country(countries_imdb, np.mean).dropna()\ncountry_scores_median = get_imdb_scores_for_country(countries_imdb, np.median).dropna()","7f0b7e6f":"# \u0418\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u0441\u0442\u0440\u0430\u043d \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0449\u0438\u0445 \u043c\u0430\u043b\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u043d\u0435 \u043c\u0435\u0448\u0430\u043b\u0438.\nthreshold = 100\nbig_cond = [k for k, v in countries.items() if v >= threshold]\ncountry_scores_mean = country_scores_mean.loc[big_cond]\ncountry_scores_median = country_scores_median.loc[big_cond]","0e9ade36":"country_scores_mean = country_scores_mean.sort_values(ascending=False)\ncountry_scores_median = country_scores_median.sort_values(ascending=False)","3189091d":"top10_barplot(\n    x=country_scores_mean.index[:10],\n    y=country_scores_mean.iloc[:10],\n    xlabel=\"Country\",\n    ylabel=\"Score\",\n    title=\"Mean score in country\"\n)\ntop10_barplot(\n    x=country_scores_median.index[:10],\n    y=country_scores_median.iloc[:10],\n    xlabel=\"Country\",\n    ylabel=\"Score\",\n    title=\"Median score in country\"\n)","9bc708a4":"# Netflix EDA with IMDb scores\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 [Netflix Movies and TV Shows](https:\/\/www.kaggle.com\/shivamb\/netflix-shows) \u0432\u043c\u0435\u0441\u0435\u0442\u0435 \u0441\u043e \u0441\u043f\u0430\u0440\u0448\u0435\u043d\u043d\u044b\u043c IMDb \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c(\u043e\u0446\u0435\u043d\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 IMDb). \u0414\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u043c\u043e\u0439 [notebook](https:\/\/www.kaggle.com\/sergeyzelenovskiy\/parsingimdbrating\/notebook).","db9b2fb4":"\u0413\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043d\u0435 \u043f\u043e\u0442\u0432\u0435\u0440\u0434\u0438\u043b\u0430\u0441\u044c. \u0421\u0428\u0410 \u043d\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0434\u0430\u0436\u0435 \u0432 \u0442\u043e\u043f 5 \u043f\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430.","c01b0181":"\u0421\u043d\u0430\u0447\u0430\u043b\u043e \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443. \u0412 `rating` \u043f\u043e\u043f\u0430\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f `duration`. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u044d\u0442\u043e.","1aeab5ed":"\u0412\u044b\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043c \u0438\u0445 \u043a \u0443\u0434\u043e\u0431\u043d\u0443 \u0432\u0438\u0434\u0443.","4c2a41a5":"## \u0412\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433","2075bd10":"\u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u044b \u0438 \u0444\u0438\u043b\u044c\u043c\u044b \u043d\u0430 \u043d\u0435\u0442\u0444\u043b\u0438\u043a\u0441\u0435 \u044d\u0442\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435. \u0410 \u0445\u0443\u0434\u0448\u0438\u0435 \u044d\u0442\u043e \u0420\u0435\u0430\u043b\u0438\u0442\u0438 \u0448\u043e\u0443 \u0438 \u0425\u043e\u0440\u043e\u0440\u044b. \u0415\u0449\u0451 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c ,\u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0442\u0438\u043f\u043e\u043c(\u0421\u0435\u0440\u0438\u0430\u043b\u043e\u043c \u0438\u043b\u0438 \u0424\u0438\u043b\u044c\u043c\u043e\u043c) \u0438 \u043e\u0446\u0435\u043d\u043a\u043e\u0439.","f64bcebd":"## \u0416\u0430\u043d\u0440\u044b","5af78117":"\u0410\u043c\u0435\u0440\u0438\u043a\u0430\u043d\u0441\u043a\u0438\u0435 \u0448\u043e\u0443 \u0434\u043e\u043c\u0438\u043d\u0438\u0440\u0443\u044e\u0442 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043d\u0435\u0442\u0444\u043b\u0438\u043a\u0441\u0430 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043e\u0442\u0440\u044b\u0432\u043e\u043c. \u041d\u043e US \u0447\u0430\u0441\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u0442\u0440\u0430\u043d\u0430\u043c\u0438, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u044d\u0442\u0438 \u043a\u043e\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0431\u043b\u043e\u043a.","f169e8f8":"\u0418\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043d\u0435\u0443\u0434\u043e\u0431\u043d\u0430\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0430 \u043d\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u0430 \u0442\u0430\u043a \u0435\u0449\u0451 \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f \u0441\u0442\u0440\u043e\u043a\u0443. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u0435\u0439 \u0437\u0430\u043c\u0435\u043d\u0443","a13a2a7e":"## \u0414\u0430\u0442\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f\nNetflix \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0433\u043e\u0434\u044b \u043d\u0430\u0447\u0430\u043b \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0440\u0430\u0449\u0438\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432.","fd3965f9":"## \u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","0ef9d10f":"### \u0421\u0435\u0440\u0438\u0430\u043b\u044b\n\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0432 \u0441\u0435\u0437\u043e\u043d\u0430\u0445.","61d43542":"\u041a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u043a\u043e\u043b-\u0432\u043e \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0441\u043d\u0438\u0436\u0430\u043b\u043e\u0441\u044c, \u043d\u043e \u043d\u0435 \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0442\u0430\u043a\u043e\u0435 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0432\u044b\u043f\u0443\u0441\u043a\u0430.","8b280138":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0436\u0438\u0441\u0451\u0440\u043e\u0432 \u043e\u0431\u0443\u0441\u043b\u043e\u0432\u043b\u0435\u043d\u043d\u043e \u0442\u0435\u043c \u0447\u0442\u043e \u044d\u0442\u043e \u0441\u0431\u043e\u0440\u043d\u0438\u043a \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u043c\u0435\u0442\u0440\u0430\u0436\u043e\u043a.","7362aa00":" \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:\n - type : category - Movie \/ TV Show(\u0424\u0438\u043b\u044c\u043c \/ \u0421\u0435\u0440\u0438\u0430\u043b);\n - title : string - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435;\n - director : list or NaN - \u0440\u0435\u0436\u0438\u0441\u0451\u0440\u044b;\n - cast : list or NaN - \u0430\u043a\u0442\u0451\u0440\u044b;\n - country : list or NaN - \u0441\u0442\u0440\u0430\u043d\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f;\n - date_added : datetime - \u0434\u0430\u0442\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 Netflix;\n - release_yaer : int - \u0433\u043e\u0434 \u0440\u0435\u043b\u0438\u0437\u0430;\n - rating : category - \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433;\n - duration : string - \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432 \u0441\u0435\u0437\u043e\u043d\u0430\u0445(\u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432) \u0438\u043b\u0438 \u043c\u0438\u043d\u0443\u0442\u0430\u0445(\u0434\u043b\u044f \u0444\u0438\u043b\u044c\u043c\u043e\u0432);\n - listed_in : list or NaN - \u0436\u0430\u043d\u0440\u044b;\n - description : string - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435;\n - imdb_score : float - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 imdb.","444f2b67":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0448\u043e\u0443 \u0441\u043d\u044f\u0442\u044b 1-2 \u0440\u0435\u0436\u0438\u0441\u0451\u0440\u0430\u043c\u0438, \u043d\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0448\u043e\u0443 \u0430\u0436 \u0441 13-\u044c\u044e \u0440\u0435\u0436\u0438\u0441\u0451\u0440\u0430\u043c\u0438!","21c9eeec":"\u0422\u0435\u043f\u0435\u0440\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0439 \u0431\u0430\u043b\u043b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u043d.","c6e73b8a":"### 1-\u0430\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430 : \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0432\u044b\u0448\u0435 \u0432\u0441\u0435\u0433\u043e\n\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u044d\u0442\u0443 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 imdb \u043a\u0430\u043a \u043e\u0446\u0435\u043d\u043a\u0443 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f.","a9f331bc":"### 2-\u0430\u044f \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430 : \u0421\u0435\u0440\u0438\u0430\u043b\u044b \u043b\u0443\u0447\u0448\u0435\n\u0421\u0440\u0430\u0432\u043d\u0438\u043c \u043a\u043e\u043b-\u0432\u043e \u0421\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0424\u0438\u043b\u044c\u043c\u043e\u0432 \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0435\u0436\u0435\u0433\u043e\u0434\u043d\u043e.","47920252":"### \u041c\u0435\u0442\u043e\u0434\u043e\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\n\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u0434\u0432\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u0440\u0437\u044b \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u044d\u0442\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u043e \u044f \u0438\u0445 \u0432\u044b\u0441\u043a\u0430\u0436\u0443.\n1. \u041f\u0430\u043d\u0434\u0435\u043c\u0438\u044f \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u043e \u043d\u0430 \u043a\u0438\u043d\u043e\u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u044e. \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0444\u0438\u043b\u044c\u043c\u043e\u0432\/\u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0441\u043e\u043f\u0440\u0435\u0436\u0435\u043d\u043d\u043e \u0441 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043b\u0438\u0446 \u043d\u0430 \u0441\u044a\u0451\u043c\u043e\u0447\u043d\u044b\u0445 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0430\u0445, \u0447\u0442\u043e \u0437\u0430\u0442\u0440\u0443\u0434\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043b\u043e\u043a\u0434\u0430\u0443\u043d\u0430. \u042d\u0442\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u043f\u0430\u0434\u0435\u043d\u0438\u0435.\n2. \u041f\u043b\u0430\u043d\u043e\u0432\u043e\u0435 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0443\u043f\u043e\u043a \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430. \u042d\u0442\u043e \u043c\u0435\u043d\u0435\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0430\u044f \u0442\u0435\u043e\u0440\u0438\u044f ,\u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043b\u043e\u043a\u0434\u0430\u0443\u043d\u0430 \u0434\u043e\u0445\u043e\u0434\u044b \u0441\u0442\u0440\u0438\u043c\u0438\u043d\u0433\u043e\u0432\u044b\u0445 \u0441\u0435\u0440\u0438\u0432\u0438\u0441\u043e\u0432 \u0432\u0437\u043b\u0435\u0442\u0435\u043b\u0438. ","206a3ae1":"\u0412\u0438\u0434\u043d\u043e \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u0438\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u0430\u043a\u0442\u0451\u0440. \u0423 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u043a\u0430\u043a \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u044b (3.6 score) \u0442\u0430\u043a \u0438 \u0432\u044b\u0441\u043e\u043a\u043e\u043e\u0446\u0435\u043d\u0451\u043d\u043d\u044b\u0435 (8.9 score).","fdb3ba5d":"\u0414\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u0442\u0440\u0430\u043d\u0430\u043c\u0438 \u0434\u043b\u044f \u0421\u0428\u0410 \u043d\u0435 \u0440\u0435\u0434\u043a\u043e\u0441\u0442\u044c. \u041e\u043d\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0447\u0435\u043c UK \u0432\u0441\u0435\u0433\u043e.","47b845a4":"### \u0424\u0438\u043b\u044c\u043c\u044b","005df1b7":"[Anupam Kher](https:\/\/ru.wikipedia.org\/wiki\/\u041a\u0445\u0435\u0440,_\u0410\u043d\u0443\u043f\u0430\u043c) \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u0432 40 \u0448\u043e\u0443 \u043d\u0430 \u043d\u0435\u0442\u0444\u043b\u0438\u043a\u0441. \u0412\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u043d\u0438\u0445 \u043d\u0438\u0445.","e870c241":"\u041f\u043e\u0445\u043e\u0436\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430 \u043d\u0435 \u0432\u0435\u0440\u043d\u0430, \u0432 \u044d\u0442\u0438 \u0433\u043e\u0434\u0430 \u0443 \u043d\u043e\u0432\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433.","f5954017":"\u0412\u0441\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b! \u0412\u043e\u0437\u044c\u043c\u0451\u043c \u0438\u0445 \u043a\u0430\u043a \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043d\u0430\u0448\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b.","0ce36bf5":"\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u043d\u0435\u0435 80 \u043c\u0438\u043d\u0443\u0442.","519bd6fd":"## \u0421\u043e\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u0428\u0442\u0430\u0442\u044b \u0410\u043c\u0435\u0440\u0438\u043a\u0438 \u0438 \u0438\u0445 \u043b\u0438\u0434\u0435\u0440\u0441\u0442\u0432\u043e \u043d\u0430 \u0440\u044b\u043d\u043a\u0435 \u043c\u0435\u0434\u0438\u0430-\u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\n\u0421\u0428\u0410 \u044d\u0442\u043e \u0431\u0435\u0441\u043f\u043e\u0440\u043d\u043e \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u043c\u0435\u0434\u0438\u0430-\u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0432 \u043c\u0438\u0440\u0435. \u0423 \u0410\u043c\u0435\u0440\u0438\u043a\u0430\u043d\u0446\u0435\u0432 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u043f\u044b\u0442\u0430, \u043d\u0430\u043b\u0430\u0436\u0435\u043d\u043d\u044b\u0435 \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u0424\u0438\u043b\u044c\u043c\u043e\u0432 \u0438 \u0421\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0431\u043e\u0433\u0430\u0442\u044b\u0439 \u0440\u043e\u0434\u043d\u043e\u0439 \u0440\u044b\u043d\u043e\u043a. \u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0410\u043c\u0435\u0440\u0438\u043a\u0430\u043d\u0441\u043a\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0431\u043e\u043b\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439, \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435 \u043c\u0435\u0440\u0435 \u043d\u0430 Netflix? \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 IMDb. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u0432\u0435\u0434\u044c IMDb \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0430\u043d\u0433\u043b\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0435 \u0436\u0438\u0442\u0435\u043b\u0438 \u043f\u043b\u0430\u043d\u0435\u0442\u044b, \u043d\u043e \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435.","351323a8":"\u041a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u043d\u0430\u0447\u0430\u043b \u0440\u0430\u0441\u0442\u0438 \u0441 2015-\u0433\u043e, \u0430 \u043f\u043e\u0441\u043b\u0435 2019 \u0441\u0442\u0430\u043b \u0437\u0430\u043c\u0435\u0434\u043b\u044f\u0442\u0441\u044f. \n\n\u0421 \u0447\u0435\u043c \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e? \u0412\u043e\u0442 \u043f\u0430\u0440\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u0437:\n1. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u0435\u043b\u0430\u0435\u0442 \u0443\u043f\u043e\u0440 \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e;\n2. \u0421\u0435\u0440\u0432\u0438\u0441 \u0441\u0442\u0430\u043b \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u0444\u0438\u043b\u044c\u043c\u043e\u0432, \u0432\u0435\u0434\u044c \u0441\u0435\u0440\u0438\u0430\u043b\u044b \u043d\u0435\u0442\u0444\u043b\u0438\u043a\u0441\u0430 \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f \u0437\u0440\u0438\u0442\u0435\u043b\u0435\u043c.","7764fbf4":"## \u0421\u0430\u043c\u044b\u0435 \u0432\u043e\u0441\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u0436\u0438\u0441\u0441\u0451\u0440\u044b","e7e7eab5":"## \u0421\u0430\u043c\u044b\u0435 \u0432\u043e\u0441\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0430\u043a\u0442\u0451\u0440\u044b"}}