{"cell_type":{"cbc50e0a":"code","106eb4dd":"code","04b2d2a4":"code","9d3461fd":"code","7b627324":"code","09e32fdd":"code","7c65b286":"code","2d3477d3":"code","04a371e5":"code","66d0fefa":"code","0a9fe33e":"code","ac3913a7":"code","f0974c8a":"code","d17ba18a":"markdown","9a1e2074":"markdown","4b2eccde":"markdown","83457a01":"markdown","2cb7d6c8":"markdown","966935e0":"markdown","ef163cfd":"markdown","28df5cd6":"markdown","d4e7e0ac":"markdown","93dcd08c":"markdown","7223b0b4":"markdown","86a05f21":"markdown","6636017a":"markdown"},"source":{"cbc50e0a":"%%writefile safe_random.py\n\n# Importing the secrets module\nimport secrets\n\n# Initializing the random lib\n# Will have the same functions as normal random\nrandom = secrets.SystemRandom()\n\n# Defining Kaggle format agent\ndef safe_random_agent(obs, config):\n    \n    # Returning secure random action in the environment range\n    return random.randrange(config.signs)","106eb4dd":"class RandomCracker:\n\n\tdef __init__(self):\n\t\tself.counter = 0\n\t\tself.mt = []\n\t\tself.state = False\n\n\tdef submit(self, num):\n\t\tif self.state:\n\t\t\traise ValueError(\"Already got enough bits\")\n\n\t\tbits = self._to_bitarray(num)\n\n\t\tassert (all([x == 0 or x == 1 for x in bits]))\n\t\tself.counter += 1\n\t\tself.mt.append(self._harden_inverse(bits))\n\t\tif self.counter == 624:\n\t\t\tself._regen()\n\t\t\tself.state = True\n\n\tdef _predict_32(self):\n\t\tif not self.state:\n\t\t\traise ValueError(\"Didn't recieve enough bits to predict\")\n\n\t\tif self.counter >= 624:\n\t\t\tself._regen()\n\t\tself.counter += 1\n\n\t\treturn self._harden(self.mt[self.counter - 1])\n\n\tdef predict_getrandbits(self, k):\n\t\tif not self.state:\n\t\t\traise ValueError(\"Didn't recieve enough bits to predict\")\n\n\t\tif k == 0:\n\t\t\treturn 0\n\t\twords = (k - 1) \/\/ 32 + 1\n\t\tres = []\n\t\tfor i in range(words):\n\t\t\tr = self._predict_32()\n\t\t\tif k < 32:\n\t\t\t\tr = [0] * (32 - k) + r[:k]\n\t\t\tres = r + res\n\t\t\tk -= 32\n\t\treturn self._to_int(res)\n\n\tdef predict_randbelow(self, n):\n\t\tk = n.bit_length()\n\t\tr = self.predict_getrandbits(k)\n\t\twhile r >= n:\n\t\t\tr = self.predict_getrandbits(k)\n\t\treturn r\n\n\tdef predict_randrange(self, start, stop=None, step=1, _int=int):\n\t\t# Adopted messy code from random.py module\n\t\t# In fact only changed _randbelow() method calls to predict_randbelow()\n\t\tistart = _int(start)\n\t\tif istart != start:\n\t\t\traise ValueError(\"non-integer arg 1 for randrange()\")\n\t\tif stop is None:\n\t\t\tif istart > 0:\n\t\t\t\treturn self.predict_randbelow(istart)\n\t\t\traise ValueError(\"empty range for randrange()\")\n\n\t\t# stop argument supplied.\n\t\tistop = _int(stop)\n\t\tif istop != stop:\n\t\t\traise ValueError(\"non-integer stop for randrange()\")\n\t\twidth = istop - istart\n\t\tif step == 1 and width > 0:\n\t\t\treturn istart + self.predict_randbelow(width)\n\t\tif step == 1:\n\t\t\traise ValueError(\"empty range for randrange() (%d,%d, %d)\" % (istart, istop, width))\n\n\t\t# Non-unit step argument supplied.\n\t\tistep = _int(step)\n\t\tif istep != step:\n\t\t\traise ValueError(\"non-integer step for randrange()\")\n\t\tif istep > 0:\n\t\t\tn = (width + istep - 1) \/\/ istep\n\t\telif istep < 0:\n\t\t\tn = (width + istep + 1) \/\/ istep\n\t\telse:\n\t\t\traise ValueError(\"zero step for randrange()\")\n\n\t\tif n <= 0:\n\t\t\traise ValueError(\"empty range for randrange()\")\n\n\t\treturn istart + istep * self.predict_randbelow(n)\n\n\tdef predict_randint(self, a, b):\n\t\treturn self.predict_randrange(a, b + 1)\n\n\tdef predict_choice(self, seq):\n\t\ttry:\n\t\t\ti = self.predict_randbelow(len(seq))\n\t\texcept ValueError:\n\t\t\traise IndexError('Cannot choose from an empty sequence')\n\t\treturn seq[i]\n\n\tdef _to_bitarray(self, num):\n\t\tk = [int(x) for x in bin(num)[2:]]\n\t\treturn [0] * (32 - len(k)) + k\n\n\tdef _to_int(self, bits):\n\t\treturn int(\"\".join(str(i) for i in bits), 2)\n\n\tdef _or_nums(self, a, b):\n\t\tif len(a) < 32:\n\t\t\ta = [0] * (32 - len(a)) + a\n\t\tif len(b) < 32:\n\t\t\tb = [0] * (32 - len(b)) + b\n\n\t\treturn [x[0] | x[1] for x in zip(a, b)]\n\n\tdef _xor_nums(self, a, b):\n\t\tif len(a) < 32:\n\t\t\ta = [0] * (32 - len(a)) + a\n\t\tif len(b) < 32:\n\t\t\tb = [0] * (32 - len(b)) + b\n\n\t\treturn [x[0] ^ x[1] for x in zip(a, b)]\n\n\tdef _and_nums(self, a, b):\n\t\tif len(a) < 32:\n\t\t\ta = [0] * (32 - len(a)) + a\n\t\tif len(b) < 32:\n\t\t\tb = [0] * (32 - len(b)) + b\n\n\t\treturn [x[0] & x[1] for x in zip(a, b)]\n\n\tdef _decode_harden_midop(self, enc, and_arr, shift):\n\n\t\tNEW = 0\n\t\tXOR = 1\n\t\tOK = 2\n\t\twork = []\n\t\tfor i in range(32):\n\t\t\twork.append((NEW, enc[i]))\n\t\tchanged = True\n\t\twhile changed:\n\t\t\tchanged = False\n\t\t\tfor i in range(32):\n\t\t\t\tstatus = work[i][0]\n\t\t\t\tdata = work[i][1]\n\t\t\t\tif i >= 32 - shift and status == NEW:\n\t\t\t\t\twork[i] = (OK, data)\n\t\t\t\t\tchanged = True\n\t\t\t\telif i < 32 - shift and status == NEW:\n\t\t\t\t\tif and_arr[i] == 0:\n\t\t\t\t\t\twork[i] = (OK, data)\n\t\t\t\t\t\tchanged = True\n\t\t\t\t\telse:\n\t\t\t\t\t\twork[i] = (XOR, data)\n\t\t\t\t\t\tchanged = True\n\t\t\t\telif status == XOR:\n\t\t\t\t\ti_other = i + shift\n\t\t\t\t\tif work[i_other][0] == OK:\n\t\t\t\t\t\twork[i] = (OK, data ^ work[i_other][1])\n\t\t\t\t\t\tchanged = True\n\n\t\treturn [x[1] for x in work]\n\n\tdef _harden(self, bits):\n\t\tbits = self._xor_nums(bits, bits[:-11])\n\t\tbits = self._xor_nums(bits, self._and_nums(bits[7:] + [0] * 7, self._to_bitarray(0x9d2c5680)))\n\t\tbits = self._xor_nums(bits, self._and_nums(bits[15:] + [0] * 15, self._to_bitarray(0xefc60000)))\n\t\tbits = self._xor_nums(bits, bits[:-18])\n\t\treturn bits\n\n\tdef _harden_inverse(self, bits):\n\t\t# inverse for: bits = _xor_nums(bits, bits[:-11])\n\t\tbits = self._xor_nums(bits, bits[:-18])\n\t\t# inverse for: bits = _xor_nums(bits, _and_nums(bits[15:] + [0] * 15 , _to_bitarray(0xefc60000)))\n\t\tbits = self._decode_harden_midop(bits, self._to_bitarray(0xefc60000), 15)\n\t\t# inverse for: bits = _xor_nums(bits, _and_nums(bits[7:] + [0] * 7 , _to_bitarray(0x9d2c5680)))\n\t\tbits = self._decode_harden_midop(bits, self._to_bitarray(0x9d2c5680), 7)\n\t\t# inverse for: bits = _xor_nums(bits, bits[:-11])\n\t\tbits = self._xor_nums(bits, [0] * 11 + bits[:11] + [0] * 10)\n\t\tbits = self._xor_nums(bits, bits[11:21])\n\n\t\treturn bits\n\n\tdef _regen(self):\n\t\t# C code translated from python sources\n\t\tN = 624\n\t\tM = 397\n\t\tMATRIX_A = 0x9908b0df\n\t\tLOWER_MASK = 0x7fffffff\n\t\tUPPER_MASK = 0x80000000\n\t\tmag01 = [self._to_bitarray(0), self._to_bitarray(MATRIX_A)]\n\n\t\tl_bits = self._to_bitarray(LOWER_MASK)\n\t\tu_bits = self._to_bitarray(UPPER_MASK)\n\n\t\tfor kk in range(0, N - M):\n\t\t\ty = self._or_nums(self._and_nums(self.mt[kk], u_bits), self._and_nums(self.mt[kk + 1], l_bits))\n\t\t\tself.mt[kk] = self._xor_nums(self._xor_nums(self.mt[kk + M], y[:-1]), mag01[y[-1] & 1])\n\n\t\tfor kk in range(N - M - 1, N - 1):\n\t\t\ty = self._or_nums(self._and_nums(self.mt[kk], u_bits), self._and_nums(self.mt[kk + 1], l_bits))\n\t\t\tself.mt[kk] = self._xor_nums(self._xor_nums(self.mt[kk + (M - N)], y[:-1]), mag01[y[-1] & 1])\n\n\t\ty = self._or_nums(self._and_nums(self.mt[N - 1], u_bits), self._and_nums(self.mt[0], l_bits))\n\t\tself.mt[N - 1] = self._xor_nums(self._xor_nums(self.mt[M - 1], y[:-1]), mag01[y[-1] & 1])\n\n\t\tself.counter = 0\n\nprint('Random Cracker Library Loaded')\n\ndef play(agent1, agent2, render = True):\n    \n\tfrom kaggle_environments import make\n\n\tenv = make('rps', debug = True)\n\tenv.reset()\n\n\tenv.run([agent1, agent2])\n\tif render: env.render(mode = 'ipython', width = 500, height = 400)\n\n\trewards = env.toJSON()['rewards']\n\tprint(f'Rewards {rewards}')","04b2d2a4":"import random\n\ndef random_agent(obs, config):\n    ''' Pure random agent '''\n    return random.randint(0, 2)","9d3461fd":"\ncracker = RandomCracker()\n\ndef beat_random_agent(obs, config):\n    \n    ''' Predicting a random opponent move '''\n    \n    global cracker\n    \n    if obs.step < 625:\n        if obs.step: cracker.submit(obs.lastOpponentAction)\n        return 0\n    \n    predicted_move = cracker.predict_choice([0, 1, 2])\n    return (predicted_move + 1) % 3","7b627324":"play(beat_random_agent, random_agent, render = False)","09e32fdd":"\nimport random\n\n# Initializing the random cracker\ncracker = RandomCracker()\n\ndef beat_random_agent(obs, config):\n    \n    ''' \n    Getting the state of the opponent and predicting their\n    moves from this (this won't work in-game because the code is isolated)\n    '''\n    \n    global cracker\n    \n    # Loading the cracker on the first move\n    if obs.step == 0:\n        for i in range(624):\n            cracker.submit(random.randint(0, 4294967294))\n            \n    predicted_move = cracker.predict_randint(0, 2)\n    return (predicted_move + 1) % 3","7c65b286":"play(beat_random_agent, random_agent)","2d3477d3":"%%writefile random_agent.py\n\n'''\nWriting this agent to an isolated file\nto see if the global seed overwrite can\naffect it in this environment\n'''\n\nimport random\n\ndef agent(obs, config):\n    ''' Redefining a random bot just in case you forgot :) '''\n    return random.randint(0, 2)","04a371e5":"%%writefile seed_overwriter.py\n\n''' Also isolating this to a file '''\n\n# Imports\nimport numpy as np\nimport random\n\n# Global Variables\nmatrix = np.zeros((3, 3), dtype = int)\nlast_action = None\n\ndef agent(obs, config):\n    \n    ''' Checking if the opponent is random, then overwriting their seed '''\n    \n    # Global Variables\n    global last_action\n    global matrix\n    \n    # Playing Uniform randomness at the start\n    random.seed(np.random.random())\n    last_action = random.randint(0, 2)\n    \n    # Setting a universal seed\n    random.seed(1337)\n\n    # Filling up the table based on moves\n    if obs.step and last_action != None:\n        matrix[last_action][obs.lastOpponentAction] += 1\n        \n        # After adequate data has been gathered\n        if obs.step > 200:\n            \n            # Percentage data (if there is an outlier, then we know the seed worked)\n            percentages = np.zeros((3, 3), dtype = float)\n            for row in range(3):\n                for col in range(3):\n                    percentages[row][col] = matrix[row][col] \/ sum(matrix[row])\n            \n            # Loop through responses\n            for row in range(3):\n                \n                # Higher distribution of this value\n                if max(percentages[row]) > 0.7:\n                    \n                    # Simulating their next move based on this\n                    next_move = random.randint(0, 2)\n                    last_action = (next_move + 1) % 3\n                    break\n                    \n    # Returning a move    \n    return last_action","66d0fefa":"play('\/kaggle\/working\/seed_overwriter.py', '\/kaggle\/working\/random_agent.py')","0a9fe33e":"%%writefile random_agent.py\n\nimport random\n\n# Arbitrary value\nrandom.seed(1337)\n\ndef random_agent(obs, config):\n    ''' A random bot '''\n    return random.randint(0, 2)","ac3913a7":"%%writefile seed_searcher.py\n\n# Importing important imports\nimport numpy as np\nimport random\n\n# Global Variables\nseeds = list(range(2000))\nprevious_moves = []\n\ndef seed_searcher(obs, config):\n    \n    ''' An agent that searches for the seed of the opponent '''\n    \n    # Global Variables\n    global previous_moves\n    global seeds\n    \n    # Saving the current state\n    init_state = random.getstate()\n    \n    # Initializing a backup move\n    next_move = int(np.random.randint(3))\n    \n    # If there still are multiple canditates\n    if obs.step and len(seeds) > 1:\n        \n        # Saving previous moves\n        previous_moves.append(obs.lastOpponentAction)\n        \n        # Checking each possible seed\n        for i in range(len(seeds) - 1, -1, -1):\n            \n            # Running for previous moves\n            random.seed(seeds[i])\n            for _ in range(obs.step):\n                move = random.randint(0, 2)\n           \n            # Testing their move order\n            if move != previous_moves[-1]:\n                seeds.pop(i)\n                \n    # Seed found: Get the next move\n    elif len(seeds) == 1:\n        random.seed(seeds[0])\n        for _ in range(obs.step):\n            move = random.randint(0, 2)\n        next_move = random.randint(0, 2)\n            \n    # Reseting the state to not interfer with the opponent\n    random.setstate(init_state)\n    \n    # Returning an action\n    return (next_move + 1) % 3","f0974c8a":"play('\/kaggle\/working\/seed_searcher.py', '\/kaggle\/working\/random_agent.py')","d17ba18a":"# Method I: Random Number Cracker\n\nUsing a random number cracker to try and predict the next opponent move and exploit it.","9a1e2074":"# Method II Conclusion\n\nWait, that actually worked? I'm surprised that we can actually overwrite the seed for random bots and then exploit them based on the fact that we can control their moves. In the submission environment, our code will be sandboxed in individual GVisor containers, so I doubt that the overwriting will work. \n\nI personally, will not be submitting this bot as I don't think that it is in the spirit of the game, and because it might be breaking some rules about interferring in the opponent's environment. I just thought that sharing this might be interesting to see the limits of how we can exploit pseudo-random number generators.","4b2eccde":"# Final Conclusion\n\nI made this notebook to see if we can exploit random number generators and try and get an edge over them in this game. So far, none of these ideas have proved consistanly successful and\/or legal, but I'll keep searching. I just hope that this opens up new ways to try and exploit random number generators and take back the leaderboard!\n\n\nSome things to think about:\n* By default, the seed for the random library if not specified uses the current system time (`time.time()`). If you can estimate when the opponent sent their move, you can try and guess their seed.\n* Some other algorithms have been made to try and solve the Mersenne Twister, and a resource can be found [here](https:\/\/jazzy.id.au\/2010\/09\/22\/cracking_random_number_generators_part_3.html).\n* Random bots can easily bypass all this by resetting their seed to a different value each time, so most of this is probably overkill for something that is easily avoidable\n\nSuggestions and feedback is welcome! Good Luck!","83457a01":"# Method II: Seed Overwriter\n\nOverwriting the seed of the opponent and exploiting the fact that you can control their moves","2cb7d6c8":"# Method III Conclusion\n\nAs you can see, this method also can consistantly work in beating the random number generator by narrowing down a list of canditates that could possibly be the seed. This will only work with a random number generator that has a seed of integer 0 to N. This can be adapted to include all floats between 0 and 1, but that would be computationally infeasable at the moment with the current algorithm. Major optimizations would be needed to get that seed, but this seems good enough for right now. I'll probably expand on this later on as this method seems to be the most promising method of beating random number generators.","966935e0":"# Method III: Seed Searcher\n\nBased on [this notebook](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-random-seed-search\/) we can try and guess the opponent seed and use that. Here we need to collect some data on their moves, and using that we can find a seed that matches. This requires knowing the range of the seed, as well as the datatype (int or float). It is infeasable to look through every single floating point number at 20 decimal places for this small experiment, so for this we can just stick to an integer between 0 and 2000.","ef163cfd":"# Solver Agent\n\nThis agent plays randomly for the first 625 moves as the cracker gathers data based on the assumed random opponent. It then predicts the seed of the next move for the opponent and beats that move.","28df5cd6":"# Securing Your Randomness\n\nIf you don't want your agent to be attacked with any RNG search method, you can add some simple code that is cryptographically secure and won't be able to be cracked. This can be done using the `secrets` module and the `SystemRandom()` class. `SystemRandom` uses the same interface as the normal `random` library, so the functions will work the same (e.g. `randint`, `choice`, etc.)","d4e7e0ac":"# Why Did it Fail?\n\nYou can see that the results of the test aren't good. One would assume that the `beat_random_agent` would completely demolish the pure random bot by 400+ points. This is not the case, and you can see that the game is very close to just a random bot playing another random bot. This is because the cracker only works well if it gets a broad range of data. With the relatively small range of 0 to 2 integer values, the cracker can't accuratly predict the next opponent move because there isn't enough data.\n\nAs outlined in [this comment](https:\/\/www.kaggle.com\/c\/rock-paper-scissors\/discussion\/195923#1072874), the cracker isn't as accurate when simply playing the game, but it can become super accurate if you load the training data in before the game actually starts.","93dcd08c":"# Random Agent Solver\n\nThis notebook attempts a standard method for solving pseudo-random number generators. Since all computer random number generators are not completely random, they can be predicted. This notebook goes over some ways to try and predict random agent's moves based by cracking the Mersenne Twister algorithm.\n\nInspired by: https:\/\/www.kaggle.com\/c\/rock-paper-scissors\/discussion\/195923","7223b0b4":"# Method I Conclusion\n\nAs you can see, that test went a lot better, beating the random bot. This shows how it is possible to beat the random bot, but only with pre-training the cracker on a larger dataset. This is kind of cheating, as this method won't be available in the game, but this opens a discussion to try and find other ways of trying to beat the avalanche of unbeatable random bots in this competition.\n","86a05f21":"# Cracker Library\n\nThe random number cracker is a copy of [this GitHub repo](https:\/\/github.com\/tna0y\/Python-random-module-cracker) which can be used to solve for the Mersenne Twister random number generator algorithm which is used in `random.randint`, `random.choice`, `np.random.randint`, `np.random.choice`, etc.","6636017a":"# Pre-Training\n\nIn this runthrough, the agent will be given the random data in advance, and then will play the game. This should drastically increase it's accuracy because it is given a little headstart in the opponents mind."}}