{"cell_type":{"af67c1e3":"code","c78dc8c1":"code","128aa653":"code","6e5b4ebf":"code","01342d18":"code","efa49eb6":"code","bd96d40e":"code","4cbb6877":"code","aee956a6":"code","66083322":"code","734d27d9":"code","a0eb8ec2":"code","c72d6dfe":"code","bfb57d8b":"code","8ab1dfe8":"markdown","59b4050b":"markdown","3f345fb0":"markdown","74264240":"markdown","ccf2639d":"markdown","4b39bcd4":"markdown","b00175ba":"markdown","d6858706":"markdown","949ed238":"markdown"},"source":{"af67c1e3":"import numpy as np \nimport pandas as pd \nimport json","c78dc8c1":"pd_train = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\npd_test = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')","128aa653":"train = np.array(pd_train)\ntest = np.array(pd_test)","6e5b4ebf":"def find_all(input_str, search_str):\n    l1 = []\n    length = len(input_str)\n    index = 0\n    while index < length:\n        i = input_str.find(search_str, index)\n        if i == -1:\n            return l1\n        l1.append(i)\n        index = i + 1\n    return l1","01342d18":"!mkdir data","efa49eb6":"# Convert training data\n\noutput = {}\noutput['version'] = 'v1.0'\noutput['data'] = []\n\nfor line in train:\n    paragraphs = []\n    \n    context = line[1]\n    \n    qas = []\n    question = line[-1]\n    qid = line[0]\n    answers = []\n    answer = line[2]\n    if type(answer) != str or type(context) != str or type(question) != str:\n        print(context, type(context))\n        print(answer, type(answer))\n        print(question, type(question))\n        continue\n    answer_starts = find_all(context, answer)\n    for answer_start in answer_starts:\n        answers.append({'answer_start': answer_start, 'text': answer})\n    qas.append({'question': question, 'id': qid, 'is_impossible': False, 'answers': answers})\n    \n    paragraphs.append({'context': context, 'qas': qas})\n    output['data'].append({'title': 'None', 'paragraphs': paragraphs})\n\nwith open('data\/train.json', 'w') as outfile:\n    json.dump(output, outfile)","bd96d40e":"# Convert test data\n\noutput = {}\noutput['version'] = 'v1.0'\noutput['data'] = []\n\nfor line in test:\n    paragraphs = []\n    \n    context = line[1]\n    \n    qas = []\n    question = line[-1]\n    qid = line[0]\n    if type(context) != str or type(question) != str:\n        print(context, type(context))\n        print(answer, type(answer))\n        print(question, type(question))\n        continue\n    answers = []\n    answers.append({'answer_start': 1000000, 'text': '__None__'})\n    qas.append({'question': question, 'id': qid, 'is_impossible': False, 'answers': answers})\n    \n    paragraphs.append({'context': context, 'qas': qas})\n    output['data'].append({'title': 'None', 'paragraphs': paragraphs})\n\nwith open('data\/test.json', 'w') as outfile:\n    json.dump(output, outfile)","4cbb6877":"!cd \/kaggle\/input\/pytorchtransformers\/transformers-2.5.1; pip install .","aee956a6":"!mkdir results_roberta_large","66083322":"!python \/kaggle\/input\/pytorchtransformers\/transformers-2.5.1\/examples\/run_squad.py \\\n--model_type roberta \\\n--model_name_or_path roberta-large \\\n--do_lower_case \\\n--do_train \\\n--do_eval \\\n--data_dir .\/data \\\n--cache_dir \/kaggle\/input\/cached-roberta-large-pretrained\/cache \\\n--train_file train.json \\\n--predict_file test.json \\\n--learning_rate 3e-5 \\\n--num_train_epochs 3 \\\n--max_seq_length 192 \\\n--doc_stride 64 \\\n--output_dir results_roberta_large \\\n--per_gpu_eval_batch_size=16 \\\n--per_gpu_train_batch_size=16 \\\n--save_steps=100000","734d27d9":"def f(selected):\n    return \" \".join(set(selected.lower().split()))","a0eb8ec2":"# Copy predictions to submission file.\npredictions = json.load(open('results_roberta_large\/predictions_.json', 'r'))\nsubmission = pd.read_csv(open('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv', 'r'))\nfor i in range(len(submission)):\n    id_ = submission['textID'][i]\n    if pd_test['sentiment'][i] == 'neutral': # neutral postprocessing\n        submission.loc[i, 'selected_text'] = f(pd_test['text'][i])\n    else:\n        submission.loc[i, 'selected_text'] = f(predictions[id_])","c72d6dfe":"submission.head()","bfb57d8b":"# Save the submission file.\nsubmission.to_csv('submission.csv', index=False)","8ab1dfe8":"### Preprocessing\nI formulate this task as an extractive question answering problem, such as SQuAD.  \nGiven a question and context, the model is trained to find the answer spans in the context.\n\nTherefore, I use sentiment as question, text as context, selected_text as answer.\n- Question: sentiment\n- Context: text\n- Answer: selected_text\n","59b4050b":"Install the pytorch-transformers package (v2.5.1) of [huggingface](https:\/\/github.com\/huggingface\/transformers\/tree\/v2.5.1).","3f345fb0":"## Finetuning RoBERTa","74264240":"If you find this kernel helpful, Please check and upvote the original notebook by @cheongwoongkang from which I forked. I just fine tuned it little bit.\nhttps:\/\/www.kaggle.com\/cheongwoongkang\/roberta-baseline-starter-simple-postprocessing","ccf2639d":"Finetune a RoBERTa-QA model.","4b39bcd4":"### Load Data","b00175ba":"## Import Packages","d6858706":"## Data Preprocessing","949ed238":"## Submission"}}