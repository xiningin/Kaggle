{"cell_type":{"b837ffb4":"code","79523c14":"code","47457c20":"code","9f756315":"code","d3e8ae6c":"code","57984820":"code","0d51a863":"code","6b132fed":"code","1d4c7871":"code","8b4367e2":"code","514b31b1":"code","a349fe32":"code","81286bd8":"code","6b36f979":"code","f9b16271":"code","9ad0de3f":"code","e7b448c5":"code","385983fc":"code","69f8829b":"code","1e81ecb8":"code","4c74d2a5":"code","85ba52b4":"code","b06671f4":"code","017599da":"code","868929de":"code","3d5a99fa":"code","b9e40f3c":"markdown","3179b308":"markdown","a9eff16d":"markdown","7b3026c5":"markdown","5c2d90e8":"markdown","5c85e48b":"markdown","729f55b3":"markdown","db67e8bc":"markdown","1ddaf371":"markdown","31547858":"markdown"},"source":{"b837ffb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\nprint(os.listdir(\"..\/input\"))","79523c14":"data=pd.read_csv('..\/input\/complete_dataset.csv')\ndata.head()\nprint(data.shape)\nprint(data.columns)\ndata.info()","47457c20":"print(data[\"testResultMetricValue\"].isnull().values.any())\n#print(data[\"testResultMetricValue\"].value_counts().sort_values( ascending=False))\n#data.isnull().sum()","9f756315":"data['participantCreatedOn'] = pd.to_datetime(data['participantCreatedOn'], errors='coerce')\ndata['testResultMetricCreatedOn'] = pd.to_datetime(data['testResultMetricCreatedOn'], errors='coerce')\ndata['measurementDate'] = data['testResultMetricCreatedOn'].dt.strftime('%B %d, %Y')\ndata['full_test_name'] = data[['testName', 'testMetricName']].apply(lambda x: '-'.join(x), axis=1)\ndata.drop([\"Unnamed: 19\",'testResultMetricCreatedOn'],axis=1,inplace=True)\nprint(data.shape, data.columns)\ndisplay(data.head(3))","d3e8ae6c":"for col in [ 'participantWeightLbs', 'participantHeightCms',\n               'participantBirthYear','testResultMetricValue']:\n    data[col] = pd.to_numeric(data[col],errors='coerce')\n","57984820":"data['participantIsControl'].value_counts().plot(kind='bar')\nplt.legend( ( 'MS','Healty'))\n#data['participantIsControl'] = data['participantIsControl'].astype(int)","0d51a863":"data.describe().T","6b132fed":"ds_overview_df2 = data.groupby('floodlightOpenId').\\\n  size().reset_index(name='count').sort_values('count', ascending=False)\nprint(ds_overview_df2.shape)\nds_overview_df2.head(5)","1d4c7871":"data.groupby(\"participantSex\").size().plot(kind='bar')#data.groupby(\"participantSex\")['participantIsControl'].size() filter ile dene\nplt.legend( ( 'Female','Male'))","8b4367e2":"\npart_cols=['floodlightOpenId', 'measurementDate',*list(data)[1:8]]\nraw_measurement_df=data.pivot_table(index=part_cols,columns=['full_test_name'],values=['testResultMetricValue'])\nraw_measurement_df.head()","514b31b1":"print(raw_measurement_df.shape)\nraw_measurement_df.info()\nmeasurement_df = raw_measurement_df.reset_index()\nmeasurement_df.to_csv('clean_measure_table.csv', index=False)","a349fe32":"#d=measurement_df.groupby('participantCountryOfResidence')['participantIsControl'].value_counts().to_frame()\n#d.head(5)\nmeasurement_df.groupby(\"participantSex\")[\"participantIsControl\"].value_counts().unstack().plot(kind='bar')\nplt.legend( ( 'MS','Healty'))#1:healty 0:MS\nplt.xticks(rotation= 45)","81286bd8":"#list(measurement_df[\"participantCountryOfResidence\"].unique())\nplt.figure(figsize=(100,100))\nmeasurement_df.groupby(['participantCountryOfResidence','participantIsControl']).size().unstack().plot(kind='bar')\nplt.legend( ( 'MS','Healty'))#1:healty 0:MS\nplt.xticks(rotation= 45)\nplt.show()","6b36f979":"plt.figure(figsize=(10,10))\nmeasurement_df.groupby(['participantBirthYear','participantIsControl']).size().unstack().plot(kind='bar',stacked=True)\nplt.show()","f9b16271":"measurement_df.isnull().sum()#NaN values count","9ad0de3f":"#measurement_df.apply(lambda x: x.fillna(x.mean(),axis=0))","e7b448c5":"measurement_df[measurement_df.notnull().all(axis=1)].count()#hi\u00e7bir nan de\u011fer olmayan sat\u0131r say\u0131s\u0131","385983fc":"import missingno as msno\nmsno.bar(measurement_df)","69f8829b":"import seaborn as sns\nsns.heatmap(measurement_df.isnull(),cbar=False)","1e81ecb8":"msno.heatmap(measurement_df)#nullity korelasyon heatmapi\n#1 y\u00fcksek korelasyon eksikliklerin biribiri ile ili\u015fkisi var","4c74d2a5":"from sklearn.impute import SimpleImputer\ndf=measurement_df.copy()\nvar_name=list(df)\nimp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp_mean=imp_mean.fit(df[var_name[9:]])\ndf[var_name[9:]]=imp_mean.transform(df[var_name[9:]])\ndf.head(5)","85ba52b4":"from sklearn.preprocessing import StandardScaler\ncol=list(df.select_dtypes(include=[np.number]).columns.values)\ntransformer = StandardScaler(with_mean=False).fit(df[col])\ndf[col]=transformer.transform(df[col])\ndf.head()\n","b06671f4":"from sklearn import preprocessing\nlenc = preprocessing.LabelEncoder()\npart_cols = [ \"participantBirthYear\", \"participantWeightLbs\", \"participantHeightCms\"]\ndf[part_cols] = df[part_cols].apply(lenc.fit_transform)\ndf.head()","017599da":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nx_vars = raw_measurement_df.columns\nx=df[col]\ny=df['participantIsControl'].astype(int)\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\nlogreg = LogisticRegression(solver=\"newton-cg\")\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","868929de":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test,y_pred)\nprint(confusion_matrix)","3d5a99fa":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_train, logreg.predict(X_train))\nfpr, tpr, thresholds = roc_curve(y_train, logreg.predict_proba(X_train)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","b9e40f3c":"from sklearn.preprocessing import RobustScaler\ncol=list(df.select_dtypes(include=[np.number]).columns.values)\ntransformer = RobustScaler().fit(df[col])\ndf[col]=transformer.transform(df[col])\ndf.head()","3179b308":"### Normalizasyon","a9eff16d":"data.groupby('participantIsControl') ['participantBirthYear'].value_counts()\ndata['floodlightOpenId'].value_counts().sort_values(ascending=False)\ndata[\"testResultMetricValue\"].describe()\n","7b3026c5":"### Missing Value","5c2d90e8":"print(measurement_df.floodlightOpenId.value_counts())\nraw_measurement_df.index.names\nmeasurement_df.info()","5c85e48b":"# Data Manipulate ","729f55b3":"### Missing value graph","db67e8bc":"# Logistic Regression ","1ddaf371":"df['participantIsControl']=df['participantIsControl'].astype(int)\ny=df['participantIsControl']\ncol=list(df.select_dtypes(include=[np.number]).columns.values)\ndel col[0:2] \nx=df[col]\nloj=LogisticRegression(solver=\"newton-cg\")\nloj_model=loj.fit(x,y)\ny_pred=loj_model.predict(x)\naccuracy_score(y,y_pred)","31547858":"c=list(measurement_df.columns[9:].values)\nmeasurement_df[c[1]].fillna(measurement_df.groupby(\"participantSex\")[c[1]].transform(\"mean\"))\nmeasurement_df.groupby(\"participantSex\")['testResultMetricValue', 'Five UTurn Test-Turn Speed Average'].count()\n   \n    \n"}}