{"cell_type":{"3b063dd7":"code","b6deb41f":"markdown"},"source":{"3b063dd7":"def transform_image(X, shift):\n    '''\n    Return a shifted image with mirrored padding\n    '''\n    return np.concatenate([X, X[:, np.arange(X.shape[1]-2, 0, -1), :], X], axis=1)[:, shift:shift+X.shape[1], :]\n\ndef batch_augmentation(X, y, shift_ratio=0.3, mirror_ratio=0.35):\n    '''\n    Return a batch with randomized augmentation\n    '''\n    for i in range(X.shape[0]):\n        r = np.random.random()\n        if r < shift_ratio:\n            shift = np.random.randint(2*X.shape[2]-1)\n            X[i] = transform_image(X[i], shift)\n            y[i] = transform_image(y[i], shift)\n        elif r < shift_ratio+mirror_ratio:\n            reversed = np.arange(X.shape[2]-1, -1, -1)\n            X[i] = X[i, :, reversed, :]\n            y[i] = y[i, :, reversed, :]\n    return X, y\n\ndef batch_generator(X, y, batch_size=32, shift_ratio=0.3, mirror_ratio=0.35):\n    '''\n    Return a random batch from X, y\n    '''\n    left = 0\n    while True:\n        perm = np.random.permutation(X.shape[0])\n        left = 0\n        while left < perm.shape[0]:\n            right = min(perm.shape[0], left+batch_size)\n            idx = perm[left:right]\n            yield batch_augmentation(X[idx], y[idx], shift_ratio, mirror_ratio)\n            left = right","b6deb41f":"This is a simple Data Generator with randomized batches."}}