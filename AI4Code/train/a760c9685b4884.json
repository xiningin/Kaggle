{"cell_type":{"7f8c82d4":"code","2f3377a1":"code","03f8dd90":"code","888495a3":"code","49d435ba":"code","ec0eb419":"code","50fcacb8":"code","5edb3456":"code","8f3ba9ac":"code","bea35092":"code","83fc44a9":"code","d88ceaa8":"code","ad4c972d":"code","7fa0f8db":"code","981ed66f":"code","e25aa029":"code","642df405":"code","ea608035":"markdown","86e17f24":"markdown","e20def82":"markdown","fb17e5e0":"markdown","2e1a8409":"markdown","80ae8c0e":"markdown","0bcbfa2a":"markdown"},"source":{"7f8c82d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n","2f3377a1":"train_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\ntrain_df['diagnosis'] = train_df['diagnosis'].astype('str')\ntrain_df['id_code'] = train_df['id_code'].astype(str)+'.png'","03f8dd90":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen=ImageDataGenerator(\n    rescale=1.\/255, \n    validation_split=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    zca_whitening = True)\n\nbatch_size = 16\nimage_size = 224\n\n\n\ntrain_gen=datagen.flow_from_dataframe(\n    dataframe=train_df,\n    directory=\"..\/input\/aptos2019-blindness-detection\/train_images\",\n    x_col=\"id_code\",\n    y_col=\"diagnosis\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\",\n    target_size=(image_size,image_size),\n    subset='training')\n\ntest_gen=datagen.flow_from_dataframe(\n    dataframe=train_df,\n    directory=\"..\/input\/aptos2019-blindness-detection\/train_images\",\n    x_col=\"id_code\",\n    y_col=\"diagnosis\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\", \n    target_size=(image_size,image_size),\n    subset='validation')","888495a3":"y_train = train_df['diagnosis']\nfrom keras.utils import np_utils\ny_train = np_utils.to_categorical(y_train)\nnum_classes = y_train.shape[1]","49d435ba":"from keras.applications.densenet import DenseNet121\ndense_121 = DenseNet121(weights='..\/input\/densenet121\/densenet121_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False)\n","ec0eb419":"model.summary()","50fcacb8":"from keras.layers import GlobalAveragePooling2D, Flatten, Dense, GaussianDropout, BatchNormalization, Dropout, Conv2D, MaxPooling2D\nfrom keras.models import Model\nfrom keras import regularizers, optimizers\n\nx = dense_121.get_layer('conv5_block16_2_conv').output\nx = Conv2D(32, (3, 3), input_shape=[96,96,3], activation='relu')(x)\nx = GlobalAveragePooling2D()(x)\n#x = BatchNormalization()(x)\n#x = GaussianDropout(0.3)(x)\n#x = Conv2D(30, (5, 5), activation='relu', kernel_constraint=maxnorm(3))(x)\n#x = MaxPooling2D(pool_size=(2, 2))(x)\n#x = Dropout(0.2)(x)\n#x = Flatten()(x)\nx = Dense(32, activation='relu')(x)\n# and a logistic layer -- let's say we have 5 classes\npredictions = Dense(5, activation='softmax')(x)\n\n# this is the model we will train\nmodel = Model(inputs=dense_121.input, outputs=predictions)\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizers.adam(lr=0.0001, amsgrad=True), metrics=['accuracy'])","5edb3456":"for layer in model.layers:\n    layer.trainable = True","8f3ba9ac":"from keras.callbacks import EarlyStopping, ModelCheckpoint\nes= EarlyStopping(monitor='val_loss', mode ='min', verbose = 1, patience = 20)\nmc = ModelCheckpoint('model.h5', monitor='val_loss', save_best_only = True, mode ='min', verbose = 1)","bea35092":"\n# train the model on the new data for a few epochs\nmodel.fit_generator(generator=train_gen,              \n                                    steps_per_epoch=len(train_gen),\n                                    validation_data=test_gen,                    \n                                    validation_steps=len(test_gen),\n                                    epochs=50,\n                                    callbacks = [es, mc], \n                                    use_multiprocessing = True,\n                                    verbose=1)","83fc44a9":"from keras.models import load_model\nmodel = load_model('model.h5')","d88ceaa8":"submission_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/sample_submission.csv')\n#submission_df['diagnosis'] = submission_df['diagnosis'].astype('str')\nsubmission_df['filename'] = submission_df['id_code'].astype(str)+'.png'","ad4c972d":"submission_df.head(3)","7fa0f8db":"submission_datagen=ImageDataGenerator(rescale=1.\/255)\nsubmission_gen=submission_datagen.flow_from_dataframe(\n    dataframe=submission_df,\n    directory=\"..\/input\/aptos2019-blindness-detection\/test_images\",\n    x_col=\"filename\",    \n    batch_size=1,\n    shuffle=False,\n    class_mode=None, \n    target_size=(image_size,image_size)\n)","981ed66f":"predictions=model.predict_generator(submission_gen, steps = len(submission_gen))","e25aa029":"max_probability = np.argmax(predictions,axis=1) ","642df405":"submission_df.drop(columns=['filename'], inplace= True)\nsubmission_df['diagnosis'] = max_probability\nsubmission_df.to_csv('submission.csv', index=False)","ea608035":"Load train data:","86e17f24":"To prevent overfitting,\n* monitoring the loss on validation\/test set for minimum value\n* run epochs for 20 times when there is no decrease in val_loss\n* save the best model that has low validation loss","e20def82":"Transfer Learning from DenseNet121:","fb17e5e0":"Run predictions for given test data and submit the output file in required format (submission.csv)","2e1a8409":"Preprocessing test images:","80ae8c0e":"Function \n* to get image from respective directory(train_images, test_images)\n* to resize the large image\n","0bcbfa2a":"* Extract target column from training data\n* Convert target column to categorical"}}