{"cell_type":{"7ccba2f9":"code","4184a37c":"code","e8390260":"code","7a55557a":"code","11715881":"code","74e675f6":"code","070ec020":"code","62639309":"code","330acc77":"code","069afa7f":"code","64181fc9":"code","c6cb3072":"code","1360fb76":"code","39b120c1":"code","a0043a58":"code","edbed678":"code","1bf344ce":"code","c7082c86":"code","b00b12fb":"code","490e54bd":"code","7a35e9ec":"code","062d3c00":"code","2f53f937":"code","51fe2800":"code","f3b23c70":"code","a7b7f929":"markdown","3449c69f":"markdown","f98a904b":"markdown","723ff8e6":"markdown","2f82f497":"markdown","0a87e20b":"markdown","e7a599dd":"markdown","950cf533":"markdown","f8b43b6f":"markdown","2c8901fc":"markdown","c1fffa60":"markdown","c4032565":"markdown","e64ae11d":"markdown","490e13bc":"markdown","c91afa3d":"markdown","a3af1584":"markdown","7f1ed4cd":"markdown","f5ae9ba4":"markdown","c78943bb":"markdown","be4dd0e7":"markdown","378dd2e3":"markdown","f3ab5ff4":"markdown","4d4f6edf":"markdown","be0c305f":"markdown","552bd19e":"markdown","29f8f932":"markdown","b2832ea2":"markdown","dc4c35f0":"markdown","b7bf0476":"markdown","8f2c80b8":"markdown","4fd30a4d":"markdown","69683bf6":"markdown","7f88846f":"markdown","7ceb66c5":"markdown","13e245a4":"markdown"},"source":{"7ccba2f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4184a37c":"raw = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')\n\nraw = raw.dropna()\n\nraw.head()","e8390260":"raw.shape","7a55557a":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(raw, test_size=0.05)","11715881":"train.shape","74e675f6":"test.shape","070ec020":"!pip install pycaret","62639309":"from pycaret.classification import *\n\nclf1 = setup(\n    train, \n    target = 'Stay',\n    ignore_features = ['case_id', 'patientid', 'Visitors with Patient'],\n    session_id=1945,\n    # normalize = True, \n    # transform_target = True, \n    # polynomial_features = True, \n    # feature_selection = True, \n    # train_size=0.7,\n    categorical_features=['City_Code_Patient', 'Hospital_code', 'Bed Grade'], \n    # log_experiment=True,\n    # log_plots=True,\n    use_gpu=True,\n    # experiment_name='av-healthcare-analytics-ii-ex-v1'\n    silent = True\n)","330acc77":"# best = compare_models(fold = 5)\n\nbest = create_model('lightgbm')","069afa7f":"plot_model(best)","64181fc9":"plot_model(best, plot='confusion_matrix')","c6cb3072":"evaluate_model(best)","1360fb76":"tunned = tune_model(best)","39b120c1":"ensembled = ensemble_model(tunned)","a0043a58":"plot_model(ensembled)","edbed678":"plot_model(ensembled, plot='confusion_matrix')","1bf344ce":"evaluate_model(ensembled)","c7082c86":"predict_test = predict_model(ensembled, test)\npredict_test = predict_test.dropna()\npredict_test.to_csv('predict_test.csv', index=False)\npredict_test.head()","b00b12fb":"predict_test['comp'] = np.where(predict_test['Stay'] == predict_test['Label'], 'Correct', 'Incorrect')\npredict_test.groupby('comp').count()['Label']","490e54bd":"print(predict_test.groupby('comp').count()['Label'][0] \/ predict_test.groupby('comp').count()['Label'][1])","7a35e9ec":"submit = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv')\npredict_submit = predict_model(ensembled, submit)","062d3c00":"predict_submit","2f53f937":"predict_submit_format = pd.DataFrame({ 'case_id': predict_submit['case_id'], 'Stay': predict_submit['Label']})\npredict_submit_format.to_csv('Submission.csv', index=False)\npredict_submit_format","51fe2800":"finalize_model(ensembled)","f3b23c70":"save_model(ensembled, 'model')","a7b7f929":"## Analyse final model","3449c69f":"Evaluate model","f98a904b":"## Analyse best model","723ff8e6":"Check confusion matrix","2f82f497":"The test accuracy is almost the same as for training, which is good and indicates that the model have the ability to generalize and there is no overfit","0a87e20b":"### Fisrt install pycaret","e7a599dd":"Take a look into results","950cf533":"### Get test data shape","f8b43b6f":"## Get data","2c8901fc":"## Tune best model","c1fffa60":"Check ROC cuarves","c4032565":"Check confusion matrix","e64ae11d":"## Run several models over training set and compare","490e13bc":"## Analyse results","c91afa3d":"## Setup an experiment","a3af1584":"### Get raw data shape","7f1ed4cd":"## Predict over submit data","f5ae9ba4":"### Setup","c78943bb":"### Get some data for tests","be4dd0e7":"Test accuracy","378dd2e3":"## Finalize and save model","f3ab5ff4":"## Submit","4d4f6edf":"## Predict over test data","be0c305f":"## Ensemble tunned model","552bd19e":"Ignore the features that don't have any correlation with the number of days of each pacient will stay in the hospital.\n\nThe choice of the features to ignore was did using empirical strategy. It was based on my personal opinion.\n\n* case_id\n* patientid\n* Visitors with Patient","29f8f932":"## Identify files (default in kaggle)","b2832ea2":"Tune model searching for the best hyperparameters setup","dc4c35f0":"Finalize model","b7bf0476":"# Classification using pycaret\n\nhttps:\/\/pycaret.org\/\n\nThis is the default and basic strategy to develop a machine learning model in pycaret.\n\nThe strategy have the following steps:\n\n* Identify files (default in kaggle)\n* Get data\n* Setup an experiment\n* Run several models over training set and compare\n* Analyse best model\n* Tune the best model\n* Ensemble tunned model\n* Analyse final model\n* Predict over test data\n* Analyse results\n* Predict over submit data\n* Submit\n* Finalize and save model","8f2c80b8":"### Get train data shape","4fd30a4d":"Get data and predict with model","69683bf6":"Compare models - This process is a high time consumption and won't be execute in kaggle\n\nBy running command compare_models, the result for the best model is \u2019lightgbm\u2019 - Light Gradient Boosting\n\nSo I will just create this model","7f88846f":"Save model","7ceb66c5":"Check ROC curves","13e245a4":"Evaluate model"}}