{"cell_type":{"f7769299":"code","4ae40ad7":"code","36d25f43":"code","9d0e7ed9":"code","b89bdffa":"code","9bc54ab7":"code","3df4ee07":"code","3ed9292b":"code","d091382b":"code","583e5a7d":"code","36f0be94":"code","409bd492":"code","e89e52d1":"code","76c65173":"code","71c99bd3":"code","5bae442c":"code","16dd2184":"code","5d8fe525":"code","f31629e0":"code","e518b5aa":"code","c2329cd6":"code","07696f0e":"code","9e675d43":"code","8f7dd5bf":"code","6543b698":"code","e6c657f2":"code","8a5d10d7":"code","f479126c":"code","7ca041e2":"code","78aa71e2":"code","8e107423":"code","6ea24403":"code","d37feabf":"code","36f71dfd":"code","ff251c18":"code","5b130e9f":"code","2e8ff0e7":"code","5acc4ff8":"code","fc601f3e":"code","acfd0c28":"code","c6a179f6":"code","91c0339b":"code","c57e035a":"markdown","1d60f93f":"markdown","3a62f136":"markdown","5ac86379":"markdown","03ba1766":"markdown","3884975d":"markdown","69fcb205":"markdown","4e773afe":"markdown","ee63a579":"markdown"},"source":{"f7769299":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ae40ad7":"import pandas as pd\nimport numpy as np \n\ndf = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf.head(10)","36d25f43":"df.isnull().sum()","9d0e7ed9":"df.shape","b89bdffa":"df.describe()","9bc54ab7":"print(\"perccentage of null value \",round((df['bmi'].isnull().sum()\/df.shape[0])*100,2),\"%\")","3df4ee07":"df= df.dropna()\n\ndf.isnull().sum()","3ed9292b":"df.info()","d091382b":"df_valid = df.copy() # saved a copy of the dataset","583e5a7d":"from sklearn.preprocessing import LabelEncoder\n\ndef categorical_transform(list_colm):\n    le = LabelEncoder()\n    for colm in list_colm:\n        df[colm] = le.fit_transform(df[colm])\n    \n    return df.head(10)\n\nlist_colm = ['gender','ever_married','work_type','Residence_type','smoking_status']\n\ncategorical_transform(list_colm)","36f0be94":"df_valid_num = df.copy() #transformed all categorical colm","409bd492":"df = df.drop(columns=['id'])","e89e52d1":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","76c65173":"plt.figure(figsize=(20,25),facecolor='white')\nplotnumber=1\n\n\nfor column in df:\n    if plotnumber<11:\n        ax = plt.subplot(5,5,plotnumber)\n        sns.distplot(df[column])\n        plt.xlabel(column,fontsize=20)\n    plotnumber += 1\nplt.show()","71c99bd3":"fig,ax = plt.subplots(figsize=(20,10))\n\nsns.boxplot(data = df[['work_type','avg_glucose_level','bmi']], width = 0.5, ax = ax, fliersize = 3)","5bae442c":"def remove_outlier(list_col):\n    for col in list_col:\n        q1 = df[col].quantile(.25)\n        q3 = df[col].quantile(.75)\n        iqr = q3-q1\n        col_threshold=q3+(iqr*1.5) #45,160\n        df[col].values[df[col].values > col_threshold] = col_threshold\n    return df\n\nlist_col = ['bmi','avg_glucose_level']\nremove_outlier(list_col)","16dd2184":"plt.figure(figsize=(20,25),facecolor='white')\nplotnumber=1\n\n\nfor column in df:\n    if plotnumber<11:\n        ax = plt.subplot(5,5,plotnumber)\n        sns.distplot(df[column])\n        plt.xlabel(column,fontsize=20)\n    plotnumber += 1\nplt.show()","5d8fe525":"fig,ax = plt.subplots(figsize=(20,10))\n\nsns.boxplot(data = df[['work_type','avg_glucose_level','bmi']], width = 0.5, ax = ax, fliersize = 3)","f31629e0":"df.shape","e518b5aa":"data_no_outlier = df.copy()","c2329cd6":"X = data_no_outlier.drop(columns = ['stroke'])\ny = data_no_outlier['stroke']","07696f0e":"plt.figure(figsize=(20,25), facecolor='white')\nplotnumber = 1\nfor column in X:\n    if plotnumber<=9 :\n        ax = plt.subplot(3,3,plotnumber)\n        sns.stripplot(y,X[column])\n    plotnumber+=1\nplt.tight_layout()","9e675d43":"from sklearn.preprocessing import StandardScaler\n\nscalar = StandardScaler()\nX_scaled = scalar.fit_transform(X)\n","8f7dd5bf":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvif = pd.DataFrame()\nvif[\"vif\"] = [variance_inflation_factor(X_scaled,i) for i in range(X_scaled.shape[1])]\nvif[\"Features\"] = X.columns","6543b698":"vif","e6c657f2":"corr = df.corr()\n\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","8a5d10d7":"from sklearn.decomposition import PCA\n\npca = PCA()\n\nprincipalComponents = pca.fit_transform(X)\nexplainedVarianceRatio = np.cumsum(pca.explained_variance_ratio_)","f479126c":"plt.figure(figsize=(10,8),facecolor='grey')\nplt.plot(explainedVarianceRatio)\nplt.xlabel('no of pca componenents')\nplt.ylabel('Explained Variance Ratio')","7ca041e2":"\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, roc_auc_score\n\n#logistic regression as bench mark\n\nfrom sklearn.linear_model import LogisticRegression\n","78aa71e2":"x_train,x_test,y_train,y_test = train_test_split(X_scaled,y, test_size= 0.25, random_state=35)","8e107423":"logistic_reg = LogisticRegression()","6ea24403":"logistic_reg.fit(x_train,y_train)","d37feabf":"y_pred = logistic_reg.predict(x_test)","36f71dfd":"accuracy = accuracy_score(y_test,y_pred)\naccuracy","ff251c18":"conf_mat = confusion_matrix(y_test,y_pred)\nconf_mat","5b130e9f":"true_positive = conf_mat[0][0]\nfalse_positive = conf_mat[0][1]\nfalse_negative = conf_mat[1][0]\ntrue_negative = conf_mat[1][1]\n# Breaking down the formula for Accuracy\nAccuracy = (true_positive + true_negative) \/ (true_positive +false_positive + false_negative)\nAccuracy\n","2e8ff0e7":"Precision = true_positive\/(true_positive+false_positive)\nPrecision","5acc4ff8":"Recall = true_positive\/(true_positive+false_negative)\nRecall","fc601f3e":"F1_Score = 2*(Recall * Precision) \/ (Recall + Precision)\nF1_Score","acfd0c28":"auc = roc_auc_score(y_test, y_pred)\nauc","c6a179f6":"fpr, tpr, thresholds = roc_curve(y_test, y_pred)","91c0339b":"plt.plot(fpr, tpr, color='orange', label='ROC')\nplt.plot([0, 1], [0, 1], color='darkblue', linestyle='--',label='ROC curve (area = %0.2f)' % auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend()\nplt.show()","c57e035a":"Check your Data is uniform ?\n\nVizualization plot : dist plot","1d60f93f":"Primary processing: check for null values","3a62f136":"Check how many columns are participating in label prediction.\n\n    Corr Matrix\n    VIF\n    PCA","5ac86379":"Check for the outliers:\n\nvizualization: box plot","03ba1766":"Now the data seems to be distributed. See the outlieres!","3884975d":"Well we have saved the data points  by the outliers values with a threshold !","69fcb205":"We are good to go!","4e773afe":"We can consider all of those columns.","ee63a579":"As it is about 4 percent.We can drop it."}}