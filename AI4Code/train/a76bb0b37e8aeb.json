{"cell_type":{"d9557815":"code","b1455bcf":"code","44802e6e":"code","8a9b84ca":"code","43604301":"code","7ef237f9":"code","c78397bb":"code","0c555b3b":"code","dbb36d2e":"code","cb261400":"code","7c499086":"code","6c069c65":"code","e9b0ef53":"code","416129fa":"code","a333b194":"code","3beec0af":"code","ee27c7c5":"code","e86add61":"code","8e5c2278":"code","22c4eb40":"code","7d4d29b3":"code","a236b9b2":"code","622d360e":"code","cfd2afe9":"code","947f7594":"code","cbc928c6":"code","8e20a611":"code","cd2a6294":"code","82c73844":"code","e16e09f0":"code","deb585e2":"code","ee78dbbd":"code","366b9f97":"code","7c605dbc":"code","9a9926a9":"code","d01c652b":"code","d55197a5":"code","b3729b1d":"code","8370bbbb":"code","e151615a":"code","4a2ddc4f":"code","53ab9215":"code","6d524b7d":"code","cacb9747":"code","c64a9fc8":"code","b136a7aa":"code","f5d73e72":"code","5e81d76f":"code","e8785511":"code","cd8d7e98":"code","50efe2ef":"code","bc024700":"code","efb4d054":"code","3de247c8":"code","bbdf3d6a":"code","bb870b5b":"code","4255ffd5":"code","8d1811ef":"code","9a864fd0":"markdown","9a2e108c":"markdown","de56f6bd":"markdown","d04b20d8":"markdown","bb83c404":"markdown","799d41c2":"markdown","437bd117":"markdown","f2d55619":"markdown","187749aa":"markdown","d3661b0f":"markdown","24a840d4":"markdown","dbc49c3c":"markdown","ed0824e8":"markdown","711516f2":"markdown","18706183":"markdown","990a2414":"markdown","8953db74":"markdown","38d3f5eb":"markdown","09ff057d":"markdown","cf980015":"markdown","46661f8a":"markdown","5a460903":"markdown","35c24163":"markdown","58641658":"markdown","96eb7d77":"markdown","1844b6a3":"markdown","c5e6ee12":"markdown","df1dbada":"markdown","e9a4c7d5":"markdown","102ba578":"markdown","c1146e9f":"markdown","1fb0d45b":"markdown","98e17918":"markdown","9bec44d6":"markdown","088bb303":"markdown"},"source":{"d9557815":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nsns.set(style=\"whitegrid\")\nimport warnings\nwarnings.filterwarnings('ignore')","b1455bcf":"# ML Libraries: \nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import preprocessing","44802e6e":"import plotly.figure_factory as ff\nimport plotly.offline as py \nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\nfrom plotly import tools \npy.init_notebook_mode (connected = True)\n\nimport cufflinks as cf\ncf.go_offline()\n","8a9b84ca":"dftrain = pd.read_csv(\"..\/input\/train.csv\")\ndftest = pd.read_csv(\"..\/input\/test.csv\")","43604301":"df = pd.concat([dftrain, dftest], axis = 0 )","7ef237f9":"# Head of Training set:\ndftrain.head(5)","c78397bb":"# Breif information about the Data Sets\ndftrain.info()\nprint(\"________________________________\")\ndftest.info()","0c555b3b":"# General Description about the Training Data set:\ndftrain.drop([\"PassengerId\"], axis =1).describe()","dbb36d2e":"classd= {1:\"First Class\", 2: \"Second Class\", 3: \"Third Class\"}\ndf[\"Class\"] = df[\"Pclass\"].map(classd)\n\nfirst = df[df[\"Class\"]==\"First Class\"]\nsec = df[df[\"Class\"]==\"Second Class\"]\nthrd= df[df[\"Class\"]==\"Third Class\"]\n\nmale= df[df[\"Sex\"]==\"male\"]\nfemale= df[df[\"Sex\"]==\"female\"]","cb261400":"#1. Pie Chart for Sex count\nsex_count = df[\"Sex\"].value_counts()\nprint(sex_count)\n\ncolors = ['aqua', 'pink']\n\ntrace= go.Pie(labels = sex_count.index,\n              values = sex_count.values, marker=dict(colors=colors))\n\nlayout = go.Layout(title = \"Sex Distribution\")\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","7c499086":"# 1 Boxplot \ntrace = go.Box(y = male[\"Fare\"],fillcolor=\"aqua\", name= \"male\" )\ntrace1 = go.Box(y = female[\"Fare\"], fillcolor=\"pink\", name= \"female\" )\n\nlayout = go.Layout(title=\"Fare distribution w.r.t Sex\", yaxis=dict(title=\"Sex\"), xaxis= dict(title=\"Fare\"))\n\ndata=[trace, trace1]\nfig = go.Figure(data = data, layout=layout)\npy.iplot(fig)\n\n# 2 Violin Plot \ntrace1 = go.Violin( y = male[\"Fare\"], fillcolor=\"aqua\", name=\"Male\")\ntrace2 = go.Violin( y = female[\"Fare\"],fillcolor=\"pink\", name=\"Female\")\n\nlayout = go.Layout(title=\"Fare distribution w.r.t Sex\", yaxis=dict(title=\"Fare\"), xaxis= dict(title=\"Sex\"))\n\ndata=[trace1, trace2]\nfig = go.Figure(data = data, layout=layout)\npy.iplot(fig)\n","6c069c65":"#male= df[df[\"Sex\"]==\"male\"]\n#female= df[df[\"Sex\"]==\"female\"]\n\n# Box\ntrace = go.Box(y = male[\"Age\"],fillcolor=\"aqua\", name= \"male\" )\ntrace1 = go.Box(y = female[\"Age\"], fillcolor=\"pink\", name= \"female\" )\nlayout = go.Layout(title=\"Age w.r.t Sex\", yaxis=dict(title=\"Age\"), xaxis= dict(title=\"Sex\"))\n\ndata=[trace, trace1]\nfig = go.Figure(data = data, layout=layout)\npy.iplot(fig)","e9b0ef53":"# Pie Chart\nclass_count = df[\"Class\"].value_counts()\nprint(class_count)\n\ncolors = [\"lightorange\", \"lightpurple\", \"lightgreen\"]\ntrace = go.Pie( labels= class_count.index,values = class_count.values, marker = dict(colors = colors))\n\nlayout = go.Layout( title = \"Total Class Distribution\")\n\ndata= [trace]\nfig = go.Figure(data= data, layout= layout)\npy.iplot(fig)","416129fa":"# classd= {1:\"First Class\", 2: \"Second Class\", 3: \"Third Class\"}\n#df[\"Class\"] = df[\"Pclass\"].map(classd)\n\n# Bar Plot\ntrace1 = go.Bar(x=class_count.index, y= class_count.values, \n                marker=dict(\n                color=dftrain[\"Age\"],\n                colorscale = 'Jet'))\n\nlayout1 = go.Layout(title = \"Class Count\" )\n\ndata= [trace1]\nfig = go.Figure(data= data, layout= layout1)\npy.iplot(fig)\n\n\n#plt plot\nplt.figure(figsize=(15,8))\nsns.countplot(x= df[\"Class\"], hue= df[\"Sex\"], palette=\"seismic\")\nplt.title(\"Male\/Sex per Class\", fontsize = 18)\nplt.xlabel(\"Class\", fontsize = 18)\nplt.ylabel(\"Count\", fontsize = 18)\nplt.show()\n\n\n","a333b194":"#first = dftrain[dftrain[\"Class\"]==\"First Class\"]\n#sec = dftrain[dftrain[\"Class\"]==\"Second Class\"]\n#thrd= dftrain[dftrain[\"Class\"]==\"Third Class\"]\n\n# Box plot\ntrace1 = go.Box( x = first[\"Fare\"], fillcolor=\"yellow\", name=\"First Class\")\ntrace2 = go.Box( x = sec[\"Fare\"],fillcolor=\"mediumpurple\", name=\"Second Class\")\ntrace3 = go.Box( x = thrd[\"Fare\"], fillcolor=\"mistyrose\", name=\"Third Class\")\n\nlayout = go.Layout(title=\"Fare distribution w.r.t Class\", yaxis=dict(title=\"Class\"), xaxis= dict(title=\"Fare\"))\n\ndata=[trace1, trace2, trace3]\nfig = go.Figure(data = data, layout=layout)\npy.iplot(fig)\n\n# Violin Plot\ntrace1 = go.Violin( y = first[\"Fare\"], fillcolor=\"yellow\", name=\"First Class\")\ntrace2 = go.Violin( y = sec[\"Fare\"],fillcolor=\"mediumpurple\", name=\"Second Class\")\ntrace3 = go.Violin( y = thrd[\"Fare\"], fillcolor=\"mistyrose\", name=\"Third Class\")\n\nlayout = go.Layout(title=\"Age distribution w.r.t Class\", yaxis=dict(title=\"Fare\"), xaxis= dict(title=\"Class\"))\n\ndata=[trace1, trace2, trace3]\nfig = go.Figure(data = data, layout=layout)\npy.iplot(fig)\n\n# violinplot\n#plt.figure(figsize=(14,5))\n#sns.violinplot(x = df[\"Class\"], y=df[\"Age\"], palette=\"magma\")\n#plt.xlabel(\"Class\", fontsize =20)\n#plt.ylabel(\"Age\", fontsize =20)\n#plt.title(\"Violin plot of Class w.r.t Age\",fontsize =20)\n#plt.show()","3beec0af":"# Box Plot Age Vs Class\n# Box plot\ntrace1 = go.Box( y = first[\"Age\"], fillcolor=\"yellow\", name=\"First Class\")\ntrace2 = go.Box( y = sec[\"Age\"],fillcolor=\"mediumpurple\", name=\"Second Class\")\ntrace3 = go.Box( y = thrd[\"Age\"], fillcolor=\"lavender\", name=\"Third Class\")\n\nlayout = go.Layout(title=\"Age distribution w.r.t Class\", yaxis=dict(title=\"Age\"), xaxis= dict(title=\"Class\"))\n\ndata=[trace1, trace2, trace3]\nfig = go.Figure(data = data, layout=layout)\npy.iplot(fig)\n","ee27c7c5":"# Age Bar plot \nage_count = df[\"Age\"].dropna().value_counts()\n\ntrace = go.Bar(x = age_count.index,\n              y = age_count.values, \n              marker = dict(color = df[\"Age\"],\n                           colorscale = \"Jet\", \n                           showscale = True))\nlayout = go.Layout(title = \"Age Distribution\", \n                  yaxis = dict(title = \"Number of People\"))\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)\n\n\n# Age Vs Fare\n'''trace=go.Scatter(x = df[\"Age\"].dropna(), y=df[\"Fare\"], mode = \"markers\", \n                marker = dict(size = 6, color = \"lightgreen\"))\n\nlayout = go.Layout(title =\"Age to Fare Plot\", xaxis= dict(title = \"Age\"), \n                   yaxis= dict(title = \"Fare\"))\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)'''\n\ndata = []\nfor i, j in zip(df['Class'].unique(), ['aqua', 'lime', 'tomato']):\n    tempdf = df[df['Class'] == i]\n    data.append(go.Scatter(x = tempdf['Age'].dropna(), y = tempdf['Fare'], mode = 'markers', \n                marker = dict(size = 6, color = j), name = i))\n\nlayout = go.Layout(title = 'Age to Fare Plot', xaxis = dict(title = 'Age'), \n                   yaxis = dict(title = 'Fare'))\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)\n","e86add61":"\nplt.figure(figsize=(14,5))\nsns.jointplot(x=df[\"Age\"], y=df[\"Fare\"], kind=\"reg\",\n              color=\"purple\", ratio=3, height=7,dropna= True)\nplt.xlabel(\"Age\", fontsize =16)\nplt.ylabel(\"Fare\", fontsize =16)\nplt.title(\"Fare vs Age\",fontsize =16)\nplt.show()\n","8e5c2278":"df[\"Survived\"].value_counts()","22c4eb40":"# Survival count\nsur_count = df[\"Survived\"].value_counts()\ntrace1 = go.Bar(x=sur_count.index, y= sur_count.values, \n                marker=dict(\n                color=df[\"Age\"],\n                colorscale = 'Portland'))\n\nlayout1 = go.Layout(title = \"Class Count\" )\n\ndata= [trace1]\nfig = go.Figure(data= data, layout= layout1)\npy.iplot(fig)","7d4d29b3":"# Survival with hue of Sex\n\nfig, (ax1, ax2) = plt.subplots(2, figsize= (16,7))\nsns.countplot(x=\"Survived\", hue=\"Sex\",  data=df, palette=\"magma\", ax=ax1)\nsns.countplot(x=\"Survived\", hue=\"Class\",  data=df, palette=\"magma\", ax=ax2)\n\nplt.show()\nplt.tight_layout()","a236b9b2":"plt.figure(figsize= (16,7))\nsns.scatterplot(data=df, x=\"Age\", y=\"Fare\", hue=\"Sex\")\nplt.show()\nplt.figure(figsize= (16,7))\nsns.scatterplot(data=df, x=\"Age\", y=\"Fare\", hue=\"Survived\")\nplt.show()","622d360e":"sib_count = df[\"SibSp\"].value_counts()\ntrace1 = go.Bar(x=sib_count.index, y= sib_count.values, \n                marker=dict(\n                color=df[\"Age\"],\n                colorscale = 'Electric'))\n\nlayout1 = go.Layout(title = \"Sibling and Spouse  Count\" )\n\ndata= [trace1]\nfig = go.Figure(data= data, layout= layout1)\npy.iplot(fig)","cfd2afe9":"# Count plot for number of sibling or Spouse aboard\npar_count = df[\"SibSp\"].value_counts()\ntrace1 = go.Bar(x=par_count.index, y= par_count.values, \n                marker=dict(\n                color=df[\"Age\"],\n                colorscale = 'Cividis'))\n\nlayout1 = go.Layout(title = \"Sibling and Spouse  Count\" )\n\ndata= [trace1]\nfig = go.Figure(data= data, layout= layout1)\npy.iplot(fig)","947f7594":"data = [dftrain,dftest]\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'not_alone'] = 0\n    dataset.loc[dataset['relatives'] == 0, 'not_alone'] = 1\n    dataset['not_alone'] = dataset['not_alone'].astype(int)\ndftrain['not_alone'].value_counts()","cbc928c6":"axes = sns.factorplot('relatives','Survived', \n                      data=dftrain, aspect = 2.5, )","8e20a611":"em_count = df[\"Embarked\"].value_counts()\ntrace1 = go.Bar(x=em_count.index, y= em_count.values, \n                marker=dict(\n                color=df[\"Age\"],\n                colorscale = 'Viridis'))\n\nlayout1 = go.Layout(title = \"Sibling and Spouse  Count\" )\n\ndata= [trace1]\nfig = go.Figure(data= data, layout= layout1)\npy.iplot(fig)","cd2a6294":"FacetGrid = sns.FacetGrid(df, row='Embarked', size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None,  order=None, hue_order=None )\nFacetGrid.add_legend()","82c73844":"fig, (ax1,ax2) = plt.subplots (2, figsize = (15,10))\nsns.heatmap(dftest.isnull(), cmap=\"viridis\", yticklabels=False\n           ,cbar = False, ax= ax1) \nsns.heatmap(dftrain.isnull(), cmap=\"viridis\", yticklabels=False\n           ,cbar = False, ax= ax2)\nplt.tight_layout()","e16e09f0":"total = df.isnull().sum().sort_values(ascending =False)\ntotal.head(6)","deb585e2":"# Creating a table of missing of values in the entire data frame: \npercentage = df.isnull().sum()\/df.isnull().count()*100 \nperc = (round(percentage,2)).sort_values(ascending = False)\n\nmissing = pd.concat([total, perc], axis = 1, keys=[\"Values\", \"Percentage %\"])\n\nmissing.head()","ee78dbbd":"# on the basis of the box plot of age vs class. \n# We can impute the average age on the basis of that plot\ndef imput_age(col):\n    Age = col[0]\n    Pclass = col[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29 \n        else:\n            return 24\n    else:\n        return Age\n\ndftrain[\"Age\"] = dftrain[[\"Age\", \"Pclass\"]].apply (imput_age, axis=1)\ndftest[\"Age\"] = dftest[[\"Age\", \"Pclass\"]].apply (imput_age, axis=1)","366b9f97":"fig, (ax1,ax2) = plt.subplots (2, figsize = (15,10))\nsns.heatmap(dftest.isnull(), cmap=\"viridis\", yticklabels=False\n           ,cbar = False, ax= ax1) \nsns.heatmap(dftrain.isnull(), cmap=\"viridis\", yticklabels=False\n           ,cbar = False, ax= ax2)\nplt.tight_layout()","7c605dbc":"dftest.head(5)\n","9a9926a9":"import re\ndeck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\ndata = [dftrain, dftest]\n\nfor dataset in data:\n    dataset['Cabin'] = dataset['Cabin'].fillna(\"U0\")\n    dataset['Deck'] = dataset['Cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n    dataset['Deck'] = dataset['Deck'].map(deck)\n    dataset['Deck'] = dataset['Deck'].fillna(0)\n    dataset['Deck'] = dataset['Deck'].astype(int)","d01c652b":"sex = pd.get_dummies(dftrain[\"Sex\"], drop_first=True)\nembark = pd.get_dummies(dftrain[\"Embarked\"], drop_first=True)\nclss = pd.get_dummies(dftrain[\"Pclass\"], drop_first=True)\n\n\nsext = pd.get_dummies(dftest[\"Sex\"], drop_first=True)\nembarkt = pd.get_dummies(dftest[\"Embarked\"], drop_first=True)\nclsst = pd.get_dummies(dftest[\"Pclass\"], drop_first= True)","d55197a5":"# Concatinating the new features to the Clear Trainig set:\ntrain = pd.concat([dftrain, sex, embark, clss], axis =1)\ntrain.head(1)","b3729b1d":"# Concatinating the new features to the Test set:\ntest = pd.concat([dftest, sext, embarkt, clsst], axis =1)\ntest.head(1)","8370bbbb":"data = [dftrain, dftest]\nfor dataset in data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)","e151615a":"# Dropping columns which are not required from training set\ntrain.drop([\"PassengerId\", \"Pclass\",\"Name\", \"Sex\",\"Ticket\", \"Cabin\", \"Embarked\"], axis = 1,inplace = True)\ntrain.head(1)","4a2ddc4f":"# Dropping columns which are not required from training set\ntest.drop([\"PassengerId\", \"Pclass\",\"Name\" ,\"Ticket\",\"Sex\", \"Cabin\", \"Embarked\"], axis = 1,inplace = True)\ntest.head(1)","53ab9215":"fig, (ax1, ax2) = plt.subplots(2, figsize = (15,10))\nsns.heatmap(train.corr(), annot= True, cmap= \"magma\", ax=ax1)\nsns.heatmap(test.corr(), annot= True, cmap= \"magma\", ax=ax2)\n\nplt.show()\nplt.tight_layout()","6d524b7d":"fig, (ax1, ax2) = plt.subplots(2, figsize = (15,10))\nsns.heatmap(train.isnull(), ax=ax1, yticklabels=False)\nsns.heatmap(test.isnull(), yticklabels=False)\nplt.show()","cacb9747":"X_train = train.drop(\"Survived\", axis=1)\ny_train = train[\"Survived\"]\nX_test = test.fillna(value = 7 )\n","c64a9fc8":"columns = X_train.columns\ncolumn_test = X_test.columns","b136a7aa":"\nscaler = preprocessing.Normalizer()\nX_train = scaler.fit_transform(X_train)\nX_train = pd.DataFrame(X_train, columns=columns)\n\nX_test = scaler.transform(X_test)\nX_test = pd.DataFrame(X_test, columns=column_test)\n","f5d73e72":"log = LogisticRegression()\nlog.fit(X_train, y_train)\n\npred_log = log.predict(X_test)\n\nlog.score(X_train, y_train)\nlogistic_score = round(log.score(X_train, y_train)*100,2)\nlogistic_score","5e81d76f":"#from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train)\npred_random = rf.predict(X_test)\n\nrf.score(X_train, y_train)\n\nrandom_score = round(rf.score(X_train, y_train)*100,2)\nrandom_score","e8785511":"tree = DecisionTreeClassifier()\ntree.fit(X_train, y_train)\n\npred_tree = tree.predict(X_test)\n\ntree.score(X_train, y_train)\ntree_score = round(tree.score(X_train, y_train)*100,2)\ntree_score","cd8d7e98":"knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train, y_train)\npred_knn = knn.predict(X_test)\n\nknn.score(X_train, y_train)\nknn_score = round(knn.score(X_train, y_train)*100,2)\nknn_score","50efe2ef":"gaus = GaussianNB()\ngaus.fit(X_train, y_train)\npred_gaus = gaus.predict(X_test)\n\ngaus.score(X_train, y_train)\ngaus_score = round(gaus.score(X_train, y_train)*100,2)\ngaus_score","bc024700":"per = Perceptron(max_iter=5)\nper.fit(X_train, y_train)\n\nperd_per = per.predict(X_test)\n\nper.score(X_train, y_train)\nperceptron_score = round(per.score(X_train, y_train) * 100, 2)\nperceptron_score","efb4d054":"svc = LinearSVC()\nsvc.fit(X_train, y_train)\n\npred_svc = svc.predict(X_test)\n\nsvc.score(X_train, y_train)\nsvc_score = round(svc.score(X_train, y_train) * 100, 2)\nsvc_score","3de247c8":"df_score = pd.DataFrame({\"Models\": ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron',\n              'Decision Tree'], \n                       \"Score\": [svc_score, knn_score, logistic_score, random_score, gaus_score, \n                                 perceptron_score, tree_score]})","bbdf3d6a":"df_score.sort_values(by= \"Score\", ascending=False)","bb870b5b":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","4255ffd5":"rf = RandomForestClassifier()\nrf.fit(X_train, y_train)\nsubm = rf.predict(X_test)\n\n\nfor_score = round(rf.score(X_train,y_train)*100,2)\nfor_score","8d1811ef":"'''sub_rep = pd.DataFrame({\"PassengerId\": dftest[\"PassengerId\"], \n                       \"Survived\" : subm})\nsub_rep.to_csv(\"TitSub.csv\", index = False)'''","9a864fd0":"###  2. g. Parent and child on board","9a2e108c":"### 2.c. Age Distribution","de56f6bd":"### 2.f. Sibling and Spouse on board","d04b20d8":"###### 2.d. Joint plot: Distribution w.r.t to AGE & FARE","bb83c404":"### 3. a.  SEX ","799d41c2":"## 1 Importing the Libraries","437bd117":"# 5 Data Preprocessing","f2d55619":"### 5.a.  Dealing with MISSING VALUES:","187749aa":"### 6.d  Gaussian Naive Bayes","d3661b0f":" ### 6.f Linear Support Vector Machine:","24a840d4":"#### We can see from the above table the maximum missing values are in Cabin column followed by Age column. ","dbc49c3c":"### 2.e. Survived Plots","ed0824e8":"## 6. Modeling ","711516f2":"### 6. a. Logistic Regression","18706183":"### 6.b. Random Forest","990a2414":"###### 5.B. ENCODING: Categorical Data","8953db74":"I tried to fill the missing values based of my age columns for both the data set ( Trainind & Test Set) ","38d3f5eb":"### 6.c KNN ","09ff057d":"### 2.b.  Class ","cf980015":"## 7. Model Evaluation","46661f8a":"### Features Scaling","5a460903":" Looks like 1098 people did not survive, while around 684 people in both the dataset survived","35c24163":"## 2 Importing the Dataset and General View","58641658":"###### Lets Concatenate both the data frames for Exploratory Data Analysis :","96eb7d77":"### 6.e. Perceptron:","1844b6a3":"So we can check out that we're missing some age information and we are missing a lot of Cabin information. Roughly about 20 percent of that age data is missing and the proportion of age missing is likely small enough for a reasonable replacement of some form of imputation meaning I can actually use the knowledge of the other columns to fill in reasonable values for that age column. \nLooking at the cabin column however it looks like we're just missing too much of that data to do something useful with it at a basic level. We're going to go ahead and probably drop this later or change it to send up some other feature like","c5e6ee12":"We can see a trend here. It looks like people who couldn't survived were much more like to be male. While on the other hand people who survived are more likely to be female. ","df1dbada":"## Creating Data Frame of models scores:\n","e9a4c7d5":"### Decision Tree","102ba578":"##  3. Data Visualisation of Entire Data Frame (Training and Test Set)","c1146e9f":"###  3. g. Embarked Ship ","1fb0d45b":"##### Next step in order to increase the precision and get more accuracy. I will be doing more feature engineering such as trying to grab the title of the names, cabin letter and ticket information. ","98e17918":"### Use Elbow Method to find the best value of k to get maximum accuracy:","9bec44d6":"## 4 Data Visualisation for Data Preprocessing","088bb303":"### 5.C. Creating Train & Test Split"}}