{"cell_type":{"b9afc12e":"code","67231681":"code","66f52695":"code","5bd16a02":"code","59b16c27":"code","365e1858":"code","c7ec2d38":"code","8b4c3e7a":"code","82a8a79a":"code","0a529525":"code","a3dcc66a":"code","c04f148f":"code","661c2185":"code","e2fee6b5":"code","e2b82c44":"code","19f54a01":"code","90b88c29":"code","45d10ef3":"code","345ccad3":"code","1157edfc":"code","81a4e384":"code","b5c4864e":"code","ae52f1a8":"code","30905d25":"code","bea71524":"code","8599d649":"code","8268e719":"code","6233ff13":"code","65365213":"code","8b499ff8":"code","50ae25a0":"code","7c40f156":"code","26b4f865":"markdown","b168dd47":"markdown","54a4c965":"markdown","89376c46":"markdown"},"source":{"b9afc12e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","67231681":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score","66f52695":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","5bd16a02":"train.drop(['Ticket', 'Cabin'], axis=1, inplace=True)","59b16c27":"train.head().T","365e1858":"test.drop(['Ticket', 'Cabin'], axis=1, inplace=True)","c7ec2d38":"test.head().T","8b4c3e7a":"train.isnull().sum()","82a8a79a":"test.isnull().sum()","0a529525":"train['Age'].fillna(train['Age'].median(), inplace=True)\ntest['Age'].fillna(test['Age'].median(), inplace=True)\ntrain['Embarked'].fillna('S', inplace=True)\ntest['Fare'].fillna(test['Fare'].median(), inplace=True)","a3dcc66a":"train.loc[ train['Fare'] <= 7.91, 'Fare']                             = 0\ntrain.loc[(train['Fare'] > 7.91) & (train['Fare'] <= 14.454), 'Fare'] = 1\ntrain.loc[(train['Fare'] > 14.454) & (train['Fare'] <= 31), 'Fare']   = 2\ntrain.loc[ train['Fare'] > 31, 'Fare']                                = 3\ntrain['Fare'] = train['Fare'].astype(int)\n\ntest.loc[ test['Fare'] <= 7.91, 'Fare']                            = 0\ntest.loc[(test['Fare'] > 7.91) & (test['Fare'] <= 14.454), 'Fare'] = 1\ntest.loc[(test['Fare'] > 14.454) & (test['Fare'] <= 31), 'Fare']   = 2\ntest.loc[ test['Fare'] > 31, 'Fare']                               = 3\ntest['Fare'] = test['Fare'].astype(int)","c04f148f":"train['Title'] = train['Name'].str.split(\", \", expand=True)[1].\\\n                str.split(\".\", expand=True)[0]\ntest['Title'] = test['Name'].str.split(\", \", expand=True)[1].\\\n                str.split(\".\", expand=True)[0]","661c2185":"train['Title'].unique()","e2fee6b5":"train['Title'] = train['Title'].replace(['Don', 'Major', 'Sir', 'Col', 'Capt',\\\n                                        'Major', 'Jonkheer'], 'Mr')\ntrain['Title'] = train['Title'].replace(['Mlle', 'Mme', 'Ms'], 'Miss')\ntrain['Title'] = train['Title'].replace(['Mme', 'Dona', 'Lady', 'Countess',\\\n                                         'the Countess'], 'Mrs')\n\ntest['Title'] = test['Title'].replace(['Don', 'Major', 'Sir', 'Col', 'Capt',\\\n                                        'Major', 'Jonkheer'], 'Mr')\ntest['Title'] = test['Title'].replace(['Mlle', 'Mme', 'Ms'], 'Miss')\ntest['Title'] = test['Title'].replace(['Mme', 'Dona', 'Lady', 'Countess',\\\n                                       'the Countess'], 'Mrs')","e2b82c44":"train.loc[ train['Age'] <= 16, 'Age']                        = 0\ntrain.loc[(train['Age'] > 16) & (train['Age'] <= 32), 'Age'] = 1\ntrain.loc[(train['Age'] > 32) & (train['Age'] <= 48), 'Age'] = 2\ntrain.loc[(train['Age'] > 48) & (train['Age'] <= 64), 'Age'] = 3\ntrain.loc[ train['Age'] > 64, 'Age']                         = 4\n\ntest.loc[ test['Age'] <= 16, 'Age']                       = 0\ntest.loc[(test['Age'] > 16) & (test['Age'] <= 32), 'Age'] = 1\ntest.loc[(test['Age'] > 32) & (test['Age'] <= 48), 'Age'] = 2\ntest.loc[(test['Age'] > 48) & (test['Age'] <= 64), 'Age'] = 3\ntest.loc[ test['Age'] > 64, 'Age']                        = 4","19f54a01":"train['Title'].unique(), test['Title'].unique()","90b88c29":"train['Family'] = train['Parch'] + train['SibSp']\n\ntest['Family'] = test['Parch'] + test['SibSp']","45d10ef3":"train = pd.concat([train, pd.get_dummies(train['Pclass'], prefix='Pclass'),\n                     pd.get_dummies(train['Sex'], prefix='Sex'),\n                     pd.get_dummies(train['Family'], prefix='Family'),\n                     pd.get_dummies(train['Embarked'], prefix='Embarked'),\n                     pd.get_dummies(train['Age'], prefix='Age'),\n                     pd.get_dummies(train['Fare'], prefix='Fare'),\n                     pd.get_dummies(train['Title'], prefix='Title')],\n                    axis=1)\ntest = pd.concat([test, pd.get_dummies(test['Pclass'], prefix='Pclass'),\n                     pd.get_dummies(test['Sex'], prefix='Sex'),\n                     pd.get_dummies(test['Family'], prefix='Family'),\n                     pd.get_dummies(test['Embarked'], prefix='Embarked'),\n                     pd.get_dummies(test['Age'], prefix='Age'),\n                     pd.get_dummies(test['Fare'], prefix='Fare'),\n                     pd.get_dummies(test['Title'], prefix='Title')],\n                    axis=1)","345ccad3":"train.drop(['Pclass', 'Name', 'Sex', 'Age', 'Fare', 'SibSp',\\\n            'Parch', 'Embarked', 'PassengerId', 'Title', 'Family'], axis=1, inplace=True)\ntest.drop(['Pclass', 'Name', 'Sex', 'Age', 'Fare', 'SibSp',\\\n           'Parch', 'Embarked', 'PassengerId', 'Title', 'Family'], axis=1, inplace=True)","1157edfc":"train.shape, test.shape","81a4e384":"train.head(25)","b5c4864e":"train.columns, test.columns","ae52f1a8":"y = train['Survived']\ntrain.drop('Survived', axis=1, inplace=True);","30905d25":"print(set(test.columns) - set(train.columns))","bea71524":"train.shape, test.shape","8599d649":"train.head().T","8268e719":"test.head().T","6233ff13":"rf = RandomForestClassifier(random_state=42, n_estimators=50,\\\n                           criterion='gini', max_depth=15)\nrf.fit(train, y)\ny_rf = rf.predict(test)\nbest_rf = round(rf.score(train, y) * 100, 2)\nbest_rf","65365213":"rf_params = {'max_depth': list(range(4,10)),\n               'n_estimators': list(range(100, 1100, 100))}\n\nrf_grid = GridSearchCV(rf, rf_params,\n                         cv=10, n_jobs=-1,\n                        verbose=True)\nrf_grid.fit(train, y)","8b499ff8":"rf_grid.best_params_, rf_grid.best_score_","50ae25a0":"rf_new = RandomForestClassifier(random_state=42, max_depth=5, n_estimators=250,\\\n                               criterion='gini')\nrf_new.fit(train, y)\ny_rf = rf_new.predict(test)\nbest_rf = round(rf_new.score(train, y) * 100, 2)\nbest_rf","7c40f156":"final_rf = pd.DataFrame()\ntit_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nfinal_rf['PassengerId'] = tit_test['PassengerId']\nfinal_rf['Survived'] = y_rf\nfinal_rf.to_csv('submission_rf.csv',index=False)","26b4f865":"## Intro","b168dd47":"\n### The notebook is combine simple methods for feature engineering.\n### Random Forest","54a4c965":"## Training machine learning model","89376c46":"## Feature engineering"}}