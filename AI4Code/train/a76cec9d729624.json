{"cell_type":{"a9613ea6":"code","38203844":"code","bcc54cf2":"code","87994ee6":"code","824c4442":"code","e6071360":"code","34a02ce8":"code","fa05e077":"code","d6de7a12":"code","2d4d2a2b":"code","7dfe5bf2":"code","7e133f3a":"code","9eaec201":"markdown","3a81ebcc":"markdown","cba61008":"markdown","c00471a3":"markdown","436125e3":"markdown","f75f9e28":"markdown","4274cf10":"markdown","8698c7f2":"markdown","08459842":"markdown","6716f07e":"markdown"},"source":{"a9613ea6":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\n\nimport tensorflow.keras as tk\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.layers import GlobalMaxPooling2D, Dense, Flatten,MaxPooling2D, GlobalAveragePooling2D, Dropout, Input, Concatenate, BatchNormalization, Conv2D\nfrom tensorflow.keras import Model\nimport matplotlib.pyplot as plt","38203844":"train_dir = '..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/'    \ntest_dir = '..\/input\/siim-isic-melanoma-classification\/jpeg\/test\/'\n\ntrain_csv_dir = '..\/input\/siim-isic-melanoma-classification\/train.csv'\ntest_csv_dir = '..\/input\/siim-isic-melanoma-classification\/test.csv'\n\ntrain_csv = pd.read_csv(train_csv_dir)\ntest_csv = pd.read_csv(test_csv_dir)","bcc54cf2":"train_df = []\ntrain_list = os.listdir(train_dir)\n\nfor i in train_list:\n    train_df.append(train_dir + i)\n\ntrain_df = pd.DataFrame(train_df)    \ntrain_df.columns = ['images']\ntrain_df['y'] = train_csv['target']","87994ee6":"def hair_remove(image):\n    \n    # convert image to grayScale\n    grayScale = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n    \n    # kernel for morphologyEx\n    kernel = cv2.getStructuringElement(1,(224,224))\n    \n    # apply MORPH_BLACKHAT to grayScale image\n    blackhat = cv2.morphologyEx(grayScale, cv2.MORPH_BLACKHAT, kernel)\n    \n    # apply thresholding to blackhat\n    _,threshold = cv2.threshold(blackhat,10,255,cv2.THRESH_BINARY)\n    \n    # inpaint with original image and threshold image\n    final_image = cv2.inpaint(image,threshold,3,cv2.INPAINT_TELEA)\n    \n    return final_image","824c4442":"train_datagen = ImageDataGenerator(rescale = 1.\/255, \n                                   horizontal_flip = True, \n                                   vertical_flip = True, \n                                   rotation_range = 45, \n                                   shear_range = 19,\n                                   validation_split = 0.15)\n\ntrain_generator = train_datagen.flow_from_dataframe(train_df,\n                                                    x_col='images',\n                                                    y_col='y',\n                                                    target_size = (224, 224), \n                                                    class_mode = 'raw',\n                                                    batch_size = 8,\n                                                    shuffle = True,\n                                                    subset = 'training')\n\nval_generator = train_datagen.flow_from_dataframe(train_df,\n                                                  x_col='images',\n                                                  y_col='y',\n                                                  target_size = (224, 224),\n                                                  class_mode = 'raw',\n                                                  batch_size = 8,\n                                                  shuffle = True,\n                                                  subset = 'validation')","e6071360":"\ninputs = Input((224, 224, 3))\npretrained_model= VGG16(include_top= False)\nx = pretrained_model(inputs)\noutput1 = GlobalMaxPooling2D()(x)\noutput2 = GlobalAveragePooling2D()(x)\noutput3 = Flatten()(x)\n\noutputs = Concatenate(axis=-1)([output1, output2, output3])\noutputs = Dropout(0.5)(outputs)\noutputs = BatchNormalization()(outputs)\noutput = Dense(1, activation= 'sigmoid')(outputs)\n\nmodel = Model(inputs, output)","34a02ce8":"from keras.callbacks import ModelCheckpoint, EarlyStopping, Callback\n\n\n# autosave best Model\nbest_model = ModelCheckpoint(\"model\", monitor='val_accuracy', mode='max',verbose=1, save_best_only=True)\n\nearlystop = EarlyStopping(monitor = 'val_accuracy',\n                          patience = 3,\n                          mode = 'auto',\n                          verbose = 1,\n                          restore_best_weights = True)\n\nacc_thresh = 0.998\n\nclass myCallback(Callback): \n    def on_epoch_end(self, epoch, logs={}): \n        if(logs.get('accuracy') > acc_thresh):   \n          print(\"\\nWe have reached %2.2f%% accuracy, so we will stopping training.\" %(acc_thresh*100))   \n          self.model.stop_training = True\n\ncallbacks = [myCallback(), best_model, earlystop]","fa05e077":"model.compile(optimizer='RMSProp', loss= 'binary_crossentropy', metrics= ['accuracy'])\nhistory = model.fit_generator(train_generator,\n                              epochs = 20,\n                              steps_per_epoch = len(train_generator),\n                              validation_data = val_generator,\n                              validation_steps = len(val_generator),\n                              callbacks = [callbacks, best_model],\n                              verbose= 1)","d6de7a12":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='best')\nplt.show()","2d4d2a2b":"test_df = []\ntest_list = os.listdir(test_dir)\n\nfor i in test_list:\n    test_df.append(test_dir + i)\n\n\ntest_df = pd.DataFrame(test_df)    \ntest_df.columns = ['images']","7dfe5bf2":"target=[]\nfor path in test_df['images']:\n    img=cv2.imread(str(path))\n    img = cv2.resize(img, (224,224))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    img = np.reshape(img,(1,224,224,3))\n    prediction = model.predict(img)\n    target.append(prediction[0][0])","7e133f3a":"submission=pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\n\nsubmission['target']=target\n\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","9eaec201":"# Function - Digital Hair Remove (not used)","3a81ebcc":"# Prediction","cba61008":"# Reference Directory","c00471a3":"# Compiling and Training...","436125e3":"# Callback Functions","f75f9e28":"# Plotting Accuracy","4274cf10":"# Data Generators","8698c7f2":"# Submission","08459842":"# Importing Library","6716f07e":"# Model"}}