{"cell_type":{"b06ef37a":"code","e1795ee9":"code","4f9addc2":"code","aaba5966":"code","46d5bcb0":"code","53e99f50":"code","d6d25e48":"code","1664963d":"code","f9f577eb":"code","8ab32bbe":"code","fee08487":"code","2b9449e1":"code","81ab5bdb":"code","1e7d45fc":"markdown","d0d41ff0":"markdown","b526bfc8":"markdown","da1fa918":"markdown","c5a051a3":"markdown","ce1cd3eb":"markdown","15e8f9b4":"markdown"},"source":{"b06ef37a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","e1795ee9":"path = \"..\/input\/johns-hopkins-csse-covid19-time-series-data\/\"\n\n### CONSTRUCT TIME SERIES DATE FOR CONFIRMED CASES BY COUNTRY ###\n\ntimeseries_confirmed_df = pd.read_csv(path+\"time_series_covid19_confirmed_global.csv\")\n#timeseries_confirmed_df.head(10)\n\n# WRITE NEW FILE AGGREGATING CONFIRMED CASE COUNT BY COUNTRY INSTEAD OF 'COUNTRY\/REGION'\"\nfout = open(\"time_series_covid19_confirmed_COUNTRY_ONLY.csv\",'w')\nfout.write(\"Country\")\ndates = timeseries_confirmed_df.columns[4:]\n\nfor date in dates:\n    fout.write(\",\"+date)\nfout.write(\"\\n\")\n\ncountries = list(timeseries_confirmed_df[\"Country\/Region\"].value_counts().index)\n#print(countries)\n\nfor country in countries:\n    fout.write(country)\n    for date in dates:\n        count = np.sum(np.array(timeseries_confirmed_df.set_index(\"Country\/Region\").loc[country, date]))\n        fout.write(\",\"+str(count))\n    fout.write(\"\\n\")\nfout.close()\n\n\n","4f9addc2":"### CONSTRUCT TIME SERIES DATEFRAME FOR DEATHS BY COUNTRY ###\n\ntimeseries_deaths_df = pd.read_csv(path+\"time_series_covid19_deaths_global.csv\")\n#timeseries_deaths_df.head()\n\n# WRITE NEW FILE AGGREGATING DEATH TOLL BY COUNTRY INSTEAD OF COUNTRY\/REGION\"\nfout = open(\"time_series_covid19_deaths_COUNTRY_ONLY.csv\",'w')\nfout.write(\"Country\")\ndates = timeseries_deaths_df.columns[4:]\nfor date in dates:\n    fout.write(\",\"+date)\nfout.write(\"\\n\")\n\ncountries = list(timeseries_deaths_df[\"Country\/Region\"].value_counts().index)\n#print(countries)\n\nfor country in countries:\n    fout.write(country)\n    for date in dates:\n        count = np.sum(np.array(timeseries_deaths_df.set_index(\"Country\/Region\").loc[country, date]))\n        fout.write(\",\"+str(count))\n    fout.write(\"\\n\")\nfout.close()\n","aaba5966":"### CONSTRUCT TIME SERIES DATA FOR CONFIRMED CASES BY US STATE ###\n\ntimeseries_confirmed_df = pd.read_csv(path+\"time_series_covid19_confirmed_US.csv\")\n\nfout = open(\"time_series_covid19_confirmed_US_STATE.csv\",'w')\nfout.write(\"Province_State\")\ndates = timeseries_confirmed_df.columns[11:]\n#print(dates)\nfor date in dates:\n    fout.write(\",\"+date)\nfout.write(\"\\n\")\n\nstates = list(timeseries_confirmed_df[\"Province_State\"].value_counts().index)\n#print(\"states \", states)\n#print(\"len(states) \", len(states))\n\nfor state in states:\n    fout.write(state)\n    for date in dates:\n        count = np.sum(np.array(timeseries_confirmed_df.set_index(\"Province_State\").loc[state, date]))\n        fout.write(\",\"+str(count))\n    fout.write(\"\\n\")\nfout.close()\n","46d5bcb0":"### CONSTRUCT TIME SERIES DATA FOR DEATHS BY US STATE ###\n\ntimeseries_deaths_df = pd.read_csv(path+\"time_series_covid19_deaths_US.csv\")\n\nfout = open(\"time_series_covid19_deaths_US_STATE.csv\",'w')\nfout.write(\"Province_State\")\ndates = timeseries_deaths_df.columns[12:]\n\nfor date in dates:\n    fout.write(\",\"+date)\nfout.write(\"\\n\")\n\nstates = list(timeseries_deaths_df[\"Province_State\"].value_counts().index)\n\nfor state in states:\n    fout.write(state)\n    for date in dates:\n        count = np.sum(np.array(timeseries_deaths_df.set_index(\"Province_State\").loc[state, date]))\n        fout.write(\",\"+str(count))\n    fout.write(\"\\n\")\nfout.close()","53e99f50":"timeseries_country_cases_df = pd.read_csv(\"time_series_covid19_confirmed_COUNTRY_ONLY.csv\")\ntimeseries_country_cases_df.head()","d6d25e48":"timeseries_state_cases_df = pd.read_csv(\"time_series_covid19_confirmed_US_STATE.csv\")\ntimeseries_state_cases_df.head()","1664963d":"timeseries_country_deaths_df = pd.read_csv(\"time_series_covid19_deaths_COUNTRY_ONLY.csv\")\ntimeseries_country_deaths_df.tail()","f9f577eb":"timeseries_state_deaths_df = pd.read_csv(\"time_series_covid19_deaths_US_STATE.csv\")\ntimeseries_state_deaths_df.head()","8ab32bbe":"sum = 0\ndef display_val(val):\n    return int(np.round(val*sum\/100,0))\n\n#timeseries_confirmed_df.head()\n#print(len(timeseries_confirmed_df))\n#print(np.sum(np.array(timeseries_confirmed_df.loc[\"Canada\", \"3\/31\/20\"])))\ncount = 0\n\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\ndays_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nlimit = [500, 15000, 50000, 100000, 200000, 350000]\n\nfig, ax = plt.subplots(2, 3, figsize=(50, 50))\nfig.tight_layout(pad=30)\nfig.suptitle(\"Number of COVID-19 Cases by Country Over Time\", size=50)\n\nfor i in range(2):\n    for j in range(3):\n        sum = 0\n    \n        labels = []\n        values = []\n        month_index = i*3 + j\n\n        for k in range(len(timeseries_country_cases_df)):\n            date = str(month_index+2)+\"\/\"+ str(days_per_month[month_index+1]) + \"\/2020\"\n            if timeseries_country_cases_df.loc[k,date] > limit[month_index]:\n                labels.append(timeseries_country_cases_df.loc[k, \"Country\"])\n                values.append(timeseries_country_cases_df.loc[k, date])\n            count+=1\n    \n        sum = np.sum(np.array(values))\n        #print(\"labels \", labels)\n        #print(\"values \", values)\n        ax[i][j].set_title(str(date), size=60)\n        ax[i][j].pie(values, labels=labels, autopct=display_val, textprops= {'fontsize': 40})\n        ax[i][j].axis('equal')\n\nplt.show()","fee08487":"months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\ndays_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nlimit = [0, 4000, 20000, 40000, 80000, 120000]\n\nfig, ax = plt.subplots(2, 3, figsize=(50, 50))\nfig.tight_layout(pad=30)\nfig.suptitle(\"Number of COVID-19 Cases per US state Over Time\", size=50)\n\nfor i in range(2):\n    for j in range(3):\n        global sum\n        sum = 0\n    \n        labels = []\n        values = []\n        month_index = i*3 + j\n\n        for k in range(len(timeseries_state_cases_df)):\n            date = str(month_index+2)+\"\/\"+ str(days_per_month[month_index+1]) + \"\/2020\"\n            if timeseries_state_cases_df.loc[k,date] > limit[month_index]:\n                labels.append(timeseries_state_cases_df.loc[k, \"Province_State\"])\n                values.append(timeseries_state_cases_df.loc[k, date])\n            count+=1\n    \n        sum = np.sum(np.array(values))\n        #print(\"labels \", labels)\n        #print(\"values \", values)\n        ax[i][j].set_title(str(date), size=50)\n        ax[i][j].pie(values, labels=labels, autopct=display_val, textprops = {'fontsize': 40})\n        ax[i][j].axis('equal')\n\nplt.show()\n","2b9449e1":"dates =  np.array(timeseries_state_cases_df.columns)[1:]\ndates_abbrev = []\nfor date in dates:\n    dates_abbrev.append(date[:-5])\n#print(\"len(dates) \", len(dates))\nmindate = 0\nmaxdate = 213\n\nfig, ax = plt.subplots(2, figsize=(30, 20))\nfig.tight_layout(pad=10)\n\nstates = [\"Florida\", \"New York\", \"California\", \"Washington\", \"Illinois\", \"New Jersey\", \"Texas\", \"Georgia\"]\n\nfor state in states:\n    cases = np.array(timeseries_state_cases_df.set_index('Province_State').loc[state])\n    deaths = np.array(timeseries_state_deaths_df.set_index('Province_State').loc[state])\n    \n    #print('texas_cases ', texas_cases)\n    ax[0].plot(dates_abbrev[mindate:maxdate], cases[mindate:maxdate])\n    ax[0].set_xlabel(\"Date (month\/day)\", size=30)\n    ax[0].set_ylabel(\"Confirmed Cases\", size=30)\n    ax[0].set_xticks(range(0, len(dates), 6))\n    ax[0].tick_params(labelsize=20)\n    ax[0].set_title(\"COVID-19 Confirmed Cases in U.S. States From January to August 2020\", size=40)\n    ax[0].annotate(state, (dates_abbrev[-1], cases[-1]), size=20)\n    \n    ax[1].plot(dates_abbrev[mindate:maxdate], deaths[mindate:maxdate])\n    ax[1].set_xlabel(\"Date (month\/day)\", size=30)\n    ax[1].set_ylabel(\"Deaths\", size=30)\n    ax[1].set_xticks(range(0, len(dates), 6))\n    ax[1].tick_params(labelsize=20)\n    ax[1].set_title(\"COVID-19 Deaths in the U.S. States From January to August 2020\", size=40)\n    ax[1].annotate(state, (dates_abbrev[-1], deaths[-1]), size=20)\n\n\n#plt.xticks(range(0, len(dates), 6), rotation=60)\n\n#plt.rc('font', size=25)\n#plt.rc('figure', titlesize=50)\n#plt.rc('axes', labelsize=30)\n#plt.rc('xtick', labelsize=20)\n#plt.rc('ytick', labelsize=20)\n\nplt.show()","81ab5bdb":"dates =  np.array(timeseries_country_cases_df.columns)[1:]\ndates_abbrev = []\nfor date in dates:\n    dates_abbrev.append(date[:-5])\n#print(\"len(dates) \", len(dates))\nmindate = 0\nmaxdate = 213\n\nfig, ax = plt.subplots(2, figsize=(30, 20))\nfig.tight_layout(pad=10)\n\ncountries = [\"China\", \"US\", \"Italy\", \"Brazil\", \"India\", \"France\", \"United Kingdom\"]\n\nfor country in countries:\n    \n    cases = np.array(timeseries_country_cases_df.set_index('Country').loc[country])\n    ax[0].plot(dates_abbrev[mindate:maxdate], cases[mindate:maxdate])\n    ax[0].annotate(country, (dates_abbrev[-1], cases[-1]), size=20)\n    ax[0].set_xticks(range(0, len(dates), 6))\n    ax[0].tick_params(labelsize=20)\n    ax[0].set_title(\"COVID-19 Cases By Country From January to August 2020\", size=40)\n    \n    deaths = np.array(timeseries_country_deaths_df.set_index('Country').loc[country])\n    ax[1].plot(dates_abbrev[mindate:maxdate], deaths[mindate:maxdate])\n    ax[1].annotate(country, (dates_abbrev[-1], deaths[-1]), size=20) \n    ax[1].set_xticks(range(0, len(dates), 6))\n    ax[1].tick_params(labelsize=20)\n    ax[1].set_title(\"COVID-19 Deaths By Country From January to August 2020\", size=40)\n    \n\nplt.show()","1e7d45fc":"Pie charts obviously are only useful in showing relative amounts-- in this case, the cases in each state\/territory relative to the total number of US cases at a given point in time. Of course, we must also examine the time series of the absolute number of cases in each US state\/territory.","d0d41ff0":"Johns Hopkins CSSE's global confirmed cases data is organized by Country\/Region. In particular, the data for Australia, Canada, and China is reported at the province level. Let's aggregate all global confirmed cases and deaths data by country only. ","b526bfc8":"Let's create some pie charts to portray confirmed COVID-19 cases by country, month by month. The rationale for pie charts is to show the change in a given country's fraction of the world's total confirmed COVID-19 cases.","da1fa918":"Let's create the similar line plots tracking the absolute number of several major countries' total confirmed cases and deaths. ","c5a051a3":"Let's take a look at country-by-country and US state-by-state confirmed cases and deaths DateFrames.","ce1cd3eb":"Next, let's create a similar sequence of pie charts for US cases, separated by state\/territory.","15e8f9b4":"Likewise, let's aggregate U.S. confirmed cases and deaths data by states and territories."}}