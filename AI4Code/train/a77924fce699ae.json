{"cell_type":{"2c337c17":"code","455ec8d6":"code","92d52096":"code","ddbfcc67":"code","1546015b":"code","4d956bf9":"code","b24f26e4":"code","36e89f49":"code","206a8815":"code","5eb078d3":"code","a6c4976e":"code","a84ad9dc":"code","f058b778":"code","ed41e701":"code","651c3f7f":"code","6ed4938c":"code","802bb806":"markdown","11f9147d":"markdown","a98c2004":"markdown","51fe3159":"markdown","275d5a3c":"markdown","f1d51e4e":"markdown","01799901":"markdown","be940ab3":"markdown","9127b1e3":"markdown","6ce44390":"markdown","05f3da89":"markdown","1ad38d92":"markdown","8cd19e26":"markdown","7b38f59d":"markdown","9b985192":"markdown","79a493f4":"markdown","d3329b50":"markdown","80e8e3fe":"markdown","c321908e":"markdown"},"source":{"2c337c17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","455ec8d6":"%%time\n\npd.pandas.set_option('display.max_columns',None)\npd.pandas.set_option('display.max_rows',None)\n\n# Train Data\ndata = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\nprint(\"Train Shape:\", data.shape)\n\ndata.head(10)","92d52096":"print(\"Checking data Types:\")\nprint(data.dtypes)","ddbfcc67":"# For Checking memory taken of the dataset \n\ndef memory_check(df):\n    if isinstance(df,pd.DataFrame):\n        usage_b = df.memory_usage(deep=True).sum()\n    else: \n        usage_b = df.memory_usage(deep=True)\n    usage_mb = usage_b \/ 1024 ** 2 # convert bytes to megabytes\n    return \"{:03.2f} MB\".format(usage_mb)","1546015b":"# Lets convert the columns with float64 dtype to float; so that we save some memory\n\nget_float = data.select_dtypes(include=['float'])\nconverted_float = get_float.apply(pd.to_numeric,downcast='float')","4d956bf9":"new_data = data.copy()\nnew_data[converted_float.columns] = converted_float\nprint(\"Memory Allocation Comparison:\")\nprint(\"Original data:\", memory_check(data))\nprint(\"Updated data:\", memory_check(new_data))","b24f26e4":"# Lets clear the original data\n\nimport gc\ndel data\ngc.collect()","36e89f49":"new_data.describe()","206a8815":"# Features having missing values with their missing percent\n\nmissing_features = [cols for cols in new_data.columns if new_data[cols].isnull().sum()>1]\n\nfor feature in missing_features:\n    print(feature, np.round(new_data[feature].isnull().mean(), 4),  ' % missing values')","5eb078d3":"for feature in missing_features:\n    data = new_data.copy()\n    \n    # Let's make a variable that indicates 1 if the observation was missing or zero otherwise\n    data[feature] = np.where(data[feature].isnull(), 1, 0)\n    \n    # Grouping by value count of claim and that feature\n    data.groupby(feature)['claim'].value_counts().unstack().plot.bar()\n    plt.title(feature)\n    plt.show()","a6c4976e":"# Get all numerical Features\n\nnumerical_features = [feature for feature in new_data.columns if new_data[feature].dtypes != 'O' and feature not in ['claim']]\nprint('Number of numerical variables: ', len(numerical_features))","a84ad9dc":"# Discrete features: Numerical features with their unique values less than 30\n\ndiscrete_features = [feature for feature in numerical_features if len(new_data[feature].unique())<30 and feature not in ['Id']]\nprint(\"Discrete Variables Count: {}\".format(len(discrete_features)))","f058b778":"# Get all continuous features\n\ncontinuous_features = [feature for feature in numerical_features if feature not in discrete_features and feature not in ['id']]\nprint(\"Continuous feature Count {}\".format(len(continuous_features)))","ed41e701":"# Lets check the distribution of each continuous variables\n\nfor feature in continuous_features:\n    data = new_data.copy()\n    data[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel(\"Count\")\n    plt.title(feature)\n    plt.show()","651c3f7f":"for feature in continuous_features:\n    data = new_data.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","6ed4938c":"#Correlation check\nimport seaborn as sns\n\ncorr = new_data.iloc[:,1:].corr()\nplt.subplots(figsize=(22,20))\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns)\nplt.show()","802bb806":"### Discrete Features","11f9147d":"## Data Description","a98c2004":"### Continuous Features","51fe3159":"**So, all out independent features are Continuous**","275d5a3c":"# Libraries and Data","f1d51e4e":"**Most of the features are skewly distributed; we can apply log transformation or Box-Cox transformation for handling it, keeping in mind the range of its values**","01799901":"**Features have a lot of outliers to handle**","be940ab3":"## Missing Data","9127b1e3":"**So it tells that almost all features with no NA rows have almost equal claim values(0 in feature) and for NA rows it has some what claim=1 values more**","6ce44390":"**All the above analysis are done only on training dataset; same shall be done in testing to understand the features. The features have to be clean before starting. Also there are so many features, so we can apply PCA transformation to reduce some of these features before modelling.**","05f3da89":"**No correlation can be seen among features**","1ad38d92":"# Reducing some memory","8cd19e26":"## Correlation Plot","7b38f59d":"## Outliers","9b985192":"**The updated data has much less memory than original data**","79a493f4":"# EDA","d3329b50":"## Lets check if missing values has any impact with the Target feature","80e8e3fe":"## Lets check Discrete and Continuous numerical variables","c321908e":"**Almost every feature has some missing values**"}}