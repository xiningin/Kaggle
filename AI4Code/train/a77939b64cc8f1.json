{"cell_type":{"badb3f4b":"code","0deda563":"code","12d1ddd1":"code","bb57427b":"code","8737c98b":"code","447d96d6":"code","e0f942c4":"code","db5ce03d":"code","a26cc939":"code","c68a6421":"code","17a21245":"code","42a2f396":"code","3aa07736":"code","06ea268a":"code","63af6a84":"markdown","da3c7e09":"markdown","95da0c1d":"markdown","5c22ea60":"markdown","da3fc7dd":"markdown","d5c7f38f":"markdown","41b15826":"markdown","6cb43c7a":"markdown","286fd30c":"markdown","cc044a60":"markdown"},"source":{"badb3f4b":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport seaborn as sns # statistical visualization\nimport matplotlib.pyplot as plt # graph plotting","0deda563":"df = pd.read_csv(\"..\/input\/aula-2-ia-dataset\/CasasParaAlugar.csv\", index_col=0)\ndf","12d1ddd1":"features = list(df.head(0))\nsorted({feat:df[feat].nunique() for feat in features}.items(),key=lambda item: item[1])","bb57427b":"nominal_categorical_features = ['city','animal','furniture']\nordinal_categorical_features = ['bathroom','rooms','parking', 'floor']\ncategorical_features = nominal_categorical_features+ordinal_categorical_features\nnumeric_features = list(filter(lambda feat: feat not in categorical_features, features))\ndf = pd.read_csv(\"..\/input\/aula-2-ia-dataset\/CasasParaAlugar.csv\", dtype={feat:'category' for feat in categorical_features}, index_col=0)\ndf.info()","8737c98b":"# Funcao para exibir gr\u00e1fico de valores ausentes\ndef graph_missing():\n    # Funcao do Pandas usada para contar o numero de valores vazios de cada coluna\n    data = df.isna().sum(axis=0)\n    y = features\n    x = data.values\n\n    # Criamos uma figura\n    fig, ax = plt.subplots(figsize=(8, 10))\n\n    # Plota as barras\n    ax.barh(y=y, width=x)\n\n    # Adiciona informa\u00e7\u00f5es no gr\u00e1fico\n    ax.set_yticks(y)\n    ax.set_yticklabels(features)\n    ax.set_title(\"Quantidade de vari\u00e1veis ausentes por coluna\")\n    plt.show()\n    \ngraph_missing()","447d96d6":"features.remove('furniture')\ndf = df.loc[:, features]\ndf","e0f942c4":"# Criamos um dataframe com os dados de rent amount (R$), area, property tax (R$) e total (R$)\ndf_regress = pd.concat([df['rent amount (R$)'], df['area'], df['property tax (R$)'], df['total (R$)']], axis=1)\ndf_regress.head()","db5ce03d":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\n# Criamos um objeto que far\u00e1 a Imputa\u00e7\u00e3o por Regress\u00e3o\nimp_mean = IterativeImputer(random_state=0)\n# Treinamos a regress\u00e3o com os dados disponiveis\nimp_mean.fit(df_regress.values)\n\n# Agora, faremos uma regress\u00e3o nos mesmos dados usados no treinamento, para\n# gerar valores num\u00e9ricos para substituir os valores ausentes de LotFrontage\nX = df_regress.values\nregr_output = imp_mean.transform(X)\nregr_output","a26cc939":"df['rent amount (R$)'] = regr_output[:, 0]\ngraph_missing()","c68a6421":"df.dropna(inplace=True)\ndf.isna().sum()","17a21245":"selected_features = numeric_features\n\nfig, axes = plt.subplots(ncols=7, figsize=(15, 5))\n\nfor i,col in enumerate(selected_features):\n    axes[i].boxplot(df[col])\n    axes[i].set_title(col)\n\nplt.tight_layout()","42a2f396":"def graph_scatter():\n    fig, ax = plt.subplots()\n\n    ax.scatter(x=df['total (R$)'], y=df['area'])\n    ax.set_ylabel(\"area\")\n    ax.set_xlabel(\"total (R$)\")\n    plt.show()\ngraph_scatter()","3aa07736":"print(\"Tamanho do dataset antes dos filtros: {}\".format(df.shape))\n\nmask = df['area'] < 3000\ndf = df[mask]\nmask = df['total (R$)'] < 300000\ndf = df[mask]\n\nprint(\"Tamanho do dataset depois dos filtros: {}\".format(df.shape))\n\ngraph_scatter()","06ea268a":"print(\"Tamanho do dataset antes dos filtros: {}\".format(df.shape))\n\nmask = df['area'] < 1250\ndf = df[mask]\nmask = df['total (R$)'] < 30000\ndf = df[mask]\n\nprint(\"Tamanho do dataset depois dos filtros: {}\".format(df.shape))\n\ngraph_scatter()","63af6a84":"Com os dados importados e classificados, vamos medir a quantidade de dados ausentes\n\n# Medi\u00e7\u00e3o","da3c7e09":"### Analisando este gr\u00e1fico, iremos filtrar:\n- `area` <= 3000\n- `total (R$)` <= 300000","95da0c1d":"# Imputa\u00e7\u00e3o de dados ausentes\n\nIremos utilizar uma modelagem de regrass\u00e3o para predizer dados de `rent amount` baseando-se em `area`, `property tax` e `total`","5c22ea60":"# Outliers\n\n## Detec\u00e7\u00e3o visual de outliers","da3fc7dd":"Vemos que possuimos dois boxplot muito semelhantes, o de `total (R$)` e o de `area`\n\nVamos ent\u00e3o plotar um gr\u00e1fico de dispers\u00e3o para tentar analisar a rela\u00e7\u00e3o entre essas duas features","d5c7f38f":"Vemos portanto que os dados `animal`, `furniture` e `city` poder\u00e3o ser considerados como **categ\u00f3ricos** enquanto os demais colunas ser\u00e3o consideradas como **num\u00e9ricas**\n\nPara facilitar futuras an\u00e1lises, informamos esse conjunto no momento da importa\u00e7\u00e3o por meio do argumento `dtype`","41b15826":"# Caracteriza\u00e7\u00e3o das vari\u00e1veis\n\nDados categ\u00f3ricos s\u00e3o aqueles delimitados por um conjunto conhecido de op\u00e7\u00f5es\n\nPara indentificar no nosso dataset essa caracter\u00edstica podemos executar o seguinte script","6cb43c7a":"Podemos refinar ainda mais diminuindo nosso filtro de `area` para 1250 e `total (R$)` para 30000","286fd30c":"# Dele\u00e7\u00e3o \n\nPor meio deste gr\u00e1fico podemos obversar que em m\u00e9dia temos cerca de 1000 registros vazios permeando todas as features\n\nPara nossa an\u00e1lise optou-se que n\u00e3o ser\u00e1 necess\u00e1rio a informa\u00e7\u00e3o de **furniture** (mob\u00edlia) do nosso dataset, essa escolha foi feita levando em considera\u00e7\u00e3o que dados do tipo categ\u00f3rico n\u00e3o podem ser imputados.","cc044a60":"Por fim, iremos excluir todos os registros com dados ausentes"}}