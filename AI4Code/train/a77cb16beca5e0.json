{"cell_type":{"bdee28c6":"code","c2bd1cc4":"code","655b0bf4":"code","233f5b82":"code","f33f4c1d":"code","efe43094":"code","39fc51a8":"code","5581c785":"code","638f9214":"code","bda10ef8":"code","709e9166":"code","58bca5de":"code","732ab10d":"code","425c1d49":"code","c7662f76":"code","44bab3d6":"code","d1ce734a":"code","e04054d6":"code","f3404dcc":"code","cad7be30":"code","eefd7cfe":"code","bed07202":"code","0aa6e6f3":"code","77510d8a":"markdown","7e05c163":"markdown","43742fe5":"markdown","9ad32cd2":"markdown","b335b766":"markdown","6fb5696f":"markdown","1bb9d127":"markdown","c05bfc71":"markdown","9067d827":"markdown","8c9d507a":"markdown","26b11377":"markdown","0dcbd865":"markdown","6503b0eb":"markdown","71c04b96":"markdown","ffbecec8":"markdown","f9d57a6f":"markdown","905191fa":"markdown","74c956f9":"markdown","9d8e3d4d":"markdown"},"source":{"bdee28c6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.preprocessing import RobustScaler, QuantileTransformer\nfrom sklearn.metrics import mean_absolute_error\n\nfrom catboost import CatBoostRegressor\nfrom sklearn.linear_model import Ridge\n\npd.options.display.max_columns = 999","c2bd1cc4":"train = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\ndisplay(train, test)","655b0bf4":"train.corr()['SalePrice'].sort_values(ascending=False)","233f5b82":"sns.scatterplot(train['GrLivArea'], train['SalePrice']);","f33f4c1d":"train.drop(index = train[(train['GrLivArea'] > 4000) & (train['SalePrice']<300000)].index, inplace= True)","efe43094":"sns.scatterplot(train['GrLivArea'], train['SalePrice']);","39fc51a8":"all_data = pd.concat([train , test])\nall_data","5581c785":"all_data['MSSubClass'] = all_data['MSSubClass'].astype(str)","638f9214":"all_data['time'] = all_data['YrSold'] - all_data['YearBuilt']\nall_data['Total_Area'] = all_data['GrLivArea'] + all_data['TotalBsmtSF']\nall_data['Final_Area'] = all_data['Total_Area'] + all_data['GarageArea']\nall_data['Overall_Plus'] = all_data['OverallQual'] + all_data['OverallCond']\nall_data['Overall_Mi'] = all_data['OverallQual'] - all_data['OverallCond']\nall_data['area'] = all_data['Final_Area'] + all_data['LotArea'] * 0.1\nall_data","bda10ef8":"all_data.corr()['SalePrice'].sort_values(ascending = False)","709e9166":"all_data2 = all_data.drop(columns = ['Id', 'SalePrice'])\nall_data2","58bca5de":"all_data3 = pd.get_dummies(all_data2)\nall_data3 = all_data3.fillna(-1)\nall_data3","732ab10d":"rs = RobustScaler()\nall_data4 = rs.fit_transform(all_data3)\nall_data4","425c1d49":"all_data4 = pd.DataFrame(all_data4, columns=all_data3.columns)\nall_data4","c7662f76":"train2 = all_data4[:len(train)]\ntest2 = all_data4[len(train):]","44bab3d6":"x_train, x_valid, y_train, y_valid = train_test_split(train2, np.log(train['SalePrice']), test_size = 0.2, random_state = 42, shuffle = True)","d1ce734a":"cat = CatBoostRegressor(iterations=4000,\n                        verbose = 500,\n                        eval_metric='MAE',\n                        max_depth = 6,\n                        subsample=0.7,\n                        learning_rate = 0.04)\ncat.fit(x_train, y_train, eval_set=[(x_valid, y_valid)], early_stopping_rounds=1000)\n\nprint('MAE : ', mean_absolute_error(np.exp(y_valid), np.exp(cat.predict(x_valid))))\n\nresult_cat = cat.predict(test2)","e04054d6":"rg = Ridge(alpha=20, random_state = 42)\n\nrg.fit(x_train, y_train)\n\npred = rg.predict(x_valid)\n\nprint('MAE : ', mean_absolute_error(np.exp(y_valid), np.exp(pred)))\n\nresult_ridge = rg.predict(test2)","f3404dcc":"sub = pd.read_csv('..\/input\/home-data-for-ml-course\/sample_submission.csv')\nsub['SalePrice'] = np.exp(result_cat) * 0.5 + np.exp(result_ridge) * 0.5\nsub.to_csv('sub_cat.csv', index = False)","cad7be30":"y = np.log(train['SalePrice'])","eefd7cfe":"kfold = KFold(n_splits=5, random_state = 42, shuffle = True)\n\nresult_cat = 0\n\nfor fold, (train_index, valid_index) in enumerate(kfold.split(train2)):\n    x_train, y_train = train2.iloc[train_index], y.iloc[train_index]\n    x_valid, y_valid = train2.iloc[valid_index], y.iloc[valid_index]\n    \n    cat = CatBoostRegressor(iterations=4000,\n                        verbose = 500,\n                        eval_metric='MAE',\n                        max_depth = 6,\n                        subsample=0.7,\n                        learning_rate = 0.04)\n    print('----------Fold', fold+1, 'Start!--------')\n    \n    cat.fit(x_train, y_train, eval_set=[(x_valid, y_valid)], early_stopping_rounds=1000)\n    \n    print('Fold', fold+1, 'MAE :', mean_absolute_error(np.exp(y_valid), np.exp(cat.predict(x_valid))))\n    print('----------Fold', fold+1, 'Done!--------')\n    \n    result_cat += np.exp(cat.predict(test2)) \/ 5\n\nprint('All Done!')","bed07202":"kfold = KFold(n_splits=5, random_state = 42, shuffle = True)\n\nresult_ridge = 0\n\nfor fold, (train_index, valid_index) in enumerate(kfold.split(train2)):\n    x_train, y_train = train2.iloc[train_index], y.iloc[train_index]\n    x_valid, y_valid = train2.iloc[valid_index], y.iloc[valid_index]\n    \n    ridge = Ridge(alpha = 10)\n    print('----------Fold', fold+1, 'Start!--------')\n    \n    ridge.fit(x_train, y_train)\n    \n    print('Fold', fold+1, 'MAE :', mean_absolute_error(np.exp(y_valid), np.exp(ridge.predict(x_valid))))\n    print('----------Fold', fold+1, 'Done!--------')\n    \n    result_ridge += np.exp(ridge.predict(test2)) \/ 5\n\nprint('All Done!')","0aa6e6f3":"sub = pd.read_csv('..\/input\/home-data-for-ml-course\/sample_submission.csv')\nsub['SalePrice'] = result_cat * 0.5 + result_ridge * 0.5\nsub.to_csv('sub_en.csv', index = False)\nsub","77510d8a":"![](https:\/\/hgtvhome.sndimg.com\/content\/dam\/images\/hgtv\/fullset\/2006\/4\/7\/2\/RE_Dos_Realtor_hor.jpg.rend.hgtvcom.1280.960.suffix\/1400935880311.jpeg)","7e05c163":"### **Train_Test_Split**\n\n#### **Using validation data for evaluation**\n\n#### **In case of classification competition, you can use option 'stratify' for seperation balance**","43742fe5":"## Kfold\n\n### You can use the code below for your Kfold Baseline","9ad32cd2":"# **Import Library**\n\n\n<h4>In the kaggle notebook environment, you can import most of the libraries you want to use<\/h4>\n\n* pandas \u2192 Python Data Analysis Library\n\n* numpy \u2192 Linear algebra library that performs numerical operations such as vectors and matrices in Python\n\n* matplotlib & seaborn \u2192 Visualization Library\n\n* train_test_split & StratifiedKFold \u2192 Split you dataset for making validation data\n\n* RobustScaler \u2192 Scaling the data\n\n* mean_absolute_error \u2192 For model evaluation\n\n* pd.options.display.max_columns \u2192 If your data has many columns, you can use this option for visualizing all of the columns","b335b766":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h2 style='color:white; background:#707C4F; border:0' role=\"tab\" aria-controls=\"home\"><center>Contents<\/center><\/h2>\n    \n* **Import Library**\n    \n* **Load Data**\n    \n* **EDA & Preprocessing**\n    \n* **Modeling**\n    \n* **Evaluation**\n    \n* **Submission**","6fb5696f":"### One-Hot-Encoding & Filling Missing values","1bb9d127":"# **EDA & Preprocessing**\n\n<h4>EDA is an abbreviation of Exploratory Data Analysis !<\/h4>\n\n<h4>You can use 'Matplotlib & Seaborn' for Basic EDA :)<\/h4>\n\n<h4>With visualization, we can see the distribution of train, test data's features<\/h4>\n\n#### **Based on the information obtained through the above work, we can preprocess the data**","c05bfc71":"# **Load Data**\n\n<h4>Using 'read_csv()' function in Pandas, you can read .csv file easily<\/h4>","9067d827":"# **House Price predict for Beginner**","8c9d507a":"### It is our common sense that the larger the area of the house, the more expensive the house is","26b11377":"# **Modeling**\n\n## There are many **categorical columns!**\n\n### How about using **CatBoost**?","0dcbd865":"### Scaling\n\n* RobustScaling","6503b0eb":"### Since MSSubClass is categorical data, it should be changed to a character column","71c04b96":"## If this notebook is helpful for you, please do not forget the upvote!","ffbecec8":"### Feature Generation\n\n#### You can create your own feature using the existing feature\n\n* time : Year of the house\n* Total_Area : The combined area of the ground and the basement\n* Final_Area : The combined area of the Total_Area and the garage\n* Overall_Plus & Mi : Interaction feature of Overall","f9d57a6f":"### Correlation\n\n#### By using the corr function, you can easily check the correlation between target features and other features","905191fa":"<h4>Thank you for visiting my notebook :)<\/h4>\n<h4>This notebook explains easily how to start a competition for beginner!!<\/h4>","74c956f9":"## Since the two data in the lower right are outside of common sense, they should be considered outliers and removed","9d8e3d4d":"### Concat the data for preprocessing"}}