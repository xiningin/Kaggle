{"cell_type":{"f5fdd51f":"code","57d2c7c9":"code","ed9cb6c8":"code","bd791682":"code","56b46620":"code","38362458":"code","76291aa4":"code","24b74802":"code","495015a6":"code","937d095f":"code","8523a83f":"code","a5e57abe":"code","0f6a35b1":"code","ad852e14":"code","00c21a77":"code","4a5f6442":"code","cf50ed48":"code","0dd5ec58":"code","053ad61b":"code","841f8b76":"code","3b4970a8":"code","794816d3":"code","1c67bce1":"code","334c158a":"code","d31537d9":"code","b30befd4":"code","3bdcdee8":"code","c64d6697":"code","2849a4fa":"code","0e513d1f":"code","17c86302":"code","8b6628a8":"code","e8f9e6ab":"code","6069838d":"code","8c550859":"code","7d5b6a31":"code","cb6e2259":"code","a92e81f5":"code","f250bd02":"code","2716f22f":"code","13b61ad2":"code","f3096228":"code","3d8fb29c":"code","cb3c434b":"code","ab84837e":"code","2a278c18":"code","5f5642ad":"code","c8ae4b34":"code","5912d676":"code","22948a7d":"code","123323f0":"code","f9b3a25e":"code","3641076a":"code","27739360":"code","9b2e49e7":"code","d65bfc7e":"code","b28ecc07":"code","436a590a":"code","5fa6c763":"code","e5aaa627":"code","67172dc8":"code","e764135d":"code","369ac52d":"code","2791e52a":"code","d7cbcbdf":"code","917ecb5e":"code","38dd8dd2":"code","8ace9fec":"code","dd647749":"code","404c70d5":"code","9642db50":"code","d8132367":"code","cc45f082":"code","b9caa972":"code","be3e7125":"code","f2ec1840":"code","546b1c27":"code","c8a68bf4":"code","d65fd7ef":"code","aa020f1a":"code","90f84025":"code","74747630":"code","e58a0140":"code","6b38b94e":"code","5665e547":"code","e990b7bc":"code","25cc9605":"code","a9e8154d":"code","b530ae8b":"code","e4cd8887":"code","a88bb74f":"code","0742cc43":"code","aca2c71b":"code","b59e8d67":"code","34e92184":"code","ed7c11f4":"markdown"},"source":{"f5fdd51f":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nimport sklearn\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5) # \uc774 \ub450\uc904\uc740 \ubcf8 \ud544\uc790\uac00 \ud56d\uc0c1 \uc4f0\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. matplotlib \uc758 \uae30\ubcf8 scheme \ub9d0\uace0 seaborn scheme \uc744 \uc138\ud305\ud558\uace0, \uc77c\uc77c\uc774 graph \uc758 font size \ub97c \uc9c0\uc815\ud560 \ud544\uc694 \uc5c6\uc774 seaborn \uc758 font_scale \uc744 \uc0ac\uc6a9\ud558\uba74 \ud3b8\ud569\ub2c8\ub2e4.\nimport missingno as msno\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore') # \uc6cc\ub2dd \uba54\uc138\uc9c0\ub97c \uc0dd\ub7b5\ud574 \uc90d\ub2c8\ub2e4. \ucc28\ud6c4 \ubc84\uc804\uad00\ub9ac\ub97c \uc704\ud574 \ud544\uc694\ud55c \uc815\ubcf4\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \uc8fc\uc11d\ucc98\ub9ac \ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n\n%matplotlib inline","57d2c7c9":"os.listdir(\"..\/input\")","ed9cb6c8":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf_submit = pd.read_csv('..\/input\/sample_submission.csv')","bd791682":"df_train.shape, df_test.shape, df_submit.shape","56b46620":"df_train.columns #train \uceec\ub7fc \ud56d\ubaa9","38362458":"df_submit.columns","76291aa4":"df_train.head()","24b74802":"df_test.head()","495015a6":"df_submit.head()","937d095f":"df_train.describe()","8523a83f":"df_test.describe()\n","a5e57abe":"#\uacb0\uce21\uce58 \ud655\uc778\ndf_train.isnull().sum() \/ df_train.shape[0]","0f6a35b1":"df_test.isnull().sum() \/ df_test.shape[0]","ad852e14":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\n\nplt.show()\n","00c21a77":" # \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d (EDA, Exploratory Data Analysis)","4a5f6442":"# 1. pclass","cf50ed48":"# pclass \uadf8\ub8f9 \ubcc4 \ub370\uc774\ud130 \uce74\uc6b4\ud2b8\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","0dd5ec58":"# pclass \uadf8\ub8f9 \ubcc4 \uc0dd\uc874\uc790 \uc218 \ud569\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum()","053ad61b":"# \uc704\uc640 \uac19\uc740 \uc791\uc5c5\uc744 crosstab\uc73c\ub85c \ud3b8\ud558\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\npd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True)","841f8b76":"# mean\uc740 \uc0dd\uc874\ub960\uc744 \uad6c\ud558\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean()","3b4970a8":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().plot.bar()","794816d3":"# 2. sex","1c67bce1":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","334c158a":"#3 Both Sex and Pclass","d31537d9":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, \n               size=6, aspect=1.5)","b30befd4":"#4 Age","3bdcdee8":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","c64d6697":"\nfig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","2849a4fa":"# Age distribution withing classes\nplt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","0e513d1f":"cummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7, 7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","17c86302":"#5 Embarked","8b6628a8":"df_train['Embarked'].unique()","e8f9e6ab":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","6069838d":"f,ax=plt.subplots(2, 2, figsize=(20,15))\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()\n","8c550859":"#6 Family - SibSp(\ud615\uc81c \uc790\ub9e4) + Parch(\ubd80\ubaa8, \uc790\ub140)","7d5b6a31":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4","cb6e2259":"print(\"Maximum size of Family: \", df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","a92e81f5":"f,ax=plt.subplots(1, 3, figsize=(40,10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","f250bd02":"#7 Fare","2716f22f":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","13b61ad2":"# \ud2b9\uc774\ud558\uae30\ub3c4 train set \ub9d0\uace0 test set\uc5d0 Fare \ud53c\uccd0\uc5d0 \ub110 \uac12\uc774 \ud558\ub098 \uc874\uc7ac\ud558\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.\n# \uadf8\ub798\uc11c \ud3c9\uade0 \uac12\uc73c\ub85c \ud574\ub2f9 \ub110\uac12\uc744 \ub123\uc5b4\uc90d\ub2c8\ub2e4.\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean() # testset \uc5d0 \uc788\ub294 nan value \ub97c \ud3c9\uade0\uac12\uc73c\ub85c \uce58\ud658\ud569\ub2c8\ub2e4.\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","f3096228":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","3d8fb29c":"#8 Cabin","cb3c434b":"### Cabin \ud53c\uccd0\uc758 Null \ube44\uc728 \uacc4\uc0b0\ndf_train[\"Cabin\"].isnull().sum() \/ df_train.shape[0]","ab84837e":"df_train.head()[[\"PassengerId\", \"Cabin\"]]","2a278c18":"df_test[\"Cabin\"].isnull().sum() \/ df_test.shape[0]","5f5642ad":"df_test.head()[[\"PassengerId\", \"Cabin\"]]","c8ae4b34":"#9 Ticket","5912d676":"\ndf_train['Ticket'].value_counts()","22948a7d":"###3.1 Fill Null","123323f0":"df_train[\"Age\"].isnull().sum()","f9b3a25e":"#Miss, Mrr, Mrs \uac19\uc740 title\uc744 \uc774\uc6a9\ud558\uc5ec \uad6c\ubd84\ud558\ub294 \uacfc\uc815\n\ndf_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations\ndf_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations\n\npd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r') #Checking the Initials with the Sex\n\n\n","3641076a":"df_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","27739360":"df_train.groupby('Initial').mean()","9b2e49e7":"\ndf_train.groupby('Initial')['Survived'].mean().plot.bar()","d65bfc7e":"df_train.groupby('Initial').mean()","b28ecc07":"#\uc800\ud76c\ub294 \uac01 initial \uadf8\ub8f9\ubcc4 Age \ud3c9\uade0 \uac12\uc744 \uc0ac\uc6a9\ud574\uc11c \ucc44\uc6cc \ub123\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","436a590a":"df_train.isnull().sum()[df_train.isnull().sum() > 0]","5fa6c763":"df_test.isnull().sum()[df_test.isnull().sum() > 0]\n","e5aaa627":"# Fill Null in Embarked","67172dc8":"print('Embarked has ', sum(df_train['Embarked'].isnull()), ' Null values')\ndf_train['Embarked'].fillna('S', inplace=True)","e764135d":"df_train.isnull().sum()[df_train.isnull().sum() > 0]","369ac52d":"##  Change Age(continuous to categorical)","2791e52a":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat'] = df_train['Age'].apply(category_age)\ndf_test['Age_cat'] = df_test['Age'].apply(category_age)","d7cbcbdf":"df_train.groupby(['Age_cat'])['PassengerId'].count()\n","917ecb5e":"## Change Initial, Embarked and Sex (string to numerical)","38dd8dd2":"df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","8ace9fec":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","dd647749":"df_train['Embarked'].isnull().any() , df_train['Embarked'].dtypes\n","404c70d5":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","9642db50":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat', 'Age']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data","d8132367":"### One-hot encoding on Initial and Embarked","cc45f082":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')","b9caa972":"df_train.head()\n","be3e7125":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","f2ec1840":"###Drop columns","546b1c27":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","c8a68bf4":"df_train.head()","d65fd7ef":"df_train.dtypes","aa020f1a":"df_test.head()","90f84025":"df_test.dtypes","74747630":"###\ubaa8\ub378 \uac1c\ubc1c \ubc0f \ud559\uc2b5","e58a0140":"#importing all the required ML packages\nfrom sklearn.ensemble import RandomForestClassifier # \uc720\uba85\ud55c randomforestclassfier \uc785\ub2c8\ub2e4. \nfrom sklearn import metrics # \ubaa8\ub378\uc758 \ud3c9\uac00\ub97c \uc704\ud574\uc11c \uc501\ub2c8\ub2e4\nfrom sklearn.model_selection import train_test_split # traning set\uc744 \uc27d\uac8c \ub098\ub220\uc8fc\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.","6b38b94e":"#Preparation - Split dataset into train, valid(dev), test set","5665e547":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","e990b7bc":"X_train.shape, X_test.shape","25cc9605":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.2, random_state=2018)","a9e8154d":"y_tr.shape, y_vld.shape","b530ae8b":"#Model generation and prediction","e4cd8887":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)","a88bb74f":"print('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","0742cc43":"from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","aca2c71b":"plt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","b59e8d67":"# keras\ub97c \uc0ac\uc6a9\ud55c NN \ubaa8\ub378 \uac1c\ubc1c","34e92184":"from keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout\nfrom keras.optimizers import Adam, SGD","ed7c11f4":"**\ud0c0\uc774\ud0c0\ub2c9 \ub370\uc774\ud130 Feature \uc124\uba85\u00b6\n\nsurvival - \uc0dd\uc874\uc720\ubb34, target \uac12. (0 = \uc0ac\ub9dd, 1 = \uc0dd\uc874)\n\npclass - \ud2f0\ucf13 \ud074\ub798\uc2a4. (1 = 1st, 2 = 2nd, 3 = 3rd)\n\nsex - \uc131\ubcc4\n\nAge - \ub098\uc774(\uc138)\n\nsibsp - \ud568\uaed8 \ud0d1\uc2b9\ud55c \ud615\uc81c\uc790\ub9e4, \ubc30\uc6b0\uc790 \uc218 \ucd1d\ud569\n\nparch - \ud568\uaed8 \ud0d1\uc2b9\ud55c \ubd80\ubaa8, \uc790\ub140 \uc218 \ucd1d\ud569\n\nticket - \ud2f0\ucf13 \ub118\ubc84\n\nfare - \ud0d1\uc2b9 \uc694\uae08\n\ncabin - \uac1d\uc2e4 \ub118\ubc84\n\n\nembarked - \ud0d1\uc2b9 \ud56d\uad6c"}}