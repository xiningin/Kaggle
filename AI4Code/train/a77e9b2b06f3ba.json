{"cell_type":{"79f485a2":"code","d654e2c2":"code","af22eb97":"code","205e9245":"code","a05815a3":"code","97521499":"code","621c5949":"code","44ad9cf2":"code","4ae2d860":"code","6ad77e87":"code","2db9193c":"code","0b97f303":"code","abac8cf1":"code","9fc71e22":"code","c5886337":"code","eeaed1ab":"code","b47b3acf":"code","1dfc9ad8":"code","9fa5d67d":"code","6a1a770d":"code","e528b4af":"code","65f45640":"code","78a7fda7":"code","78331e44":"code","3547d22d":"code","a8be8aa1":"code","d86f7a3d":"code","ab72f5ed":"code","07e3236d":"code","12363f25":"code","6562c0ce":"code","c2167bfc":"markdown","65e0910b":"markdown","081c78b5":"markdown","aa7dc5e8":"markdown","7c027e21":"markdown","efdf308e":"markdown","5261e891":"markdown","f6b6b298":"markdown","1f94886d":"markdown","82a6a77e":"markdown","f4fc4cba":"markdown","5a2c0136":"markdown","b7cb35b8":"markdown","aa152c17":"markdown","f56a8b87":"markdown","81a3d8a1":"markdown","0c9a16ee":"markdown","43710b63":"markdown","21c61982":"markdown","6f5d12a9":"markdown","95a22c05":"markdown"},"source":{"79f485a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d654e2c2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom keras import models\nfrom keras import layers\nfrom keras import optimizers\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau, TensorBoard\nfrom keras import backend as K","af22eb97":"#%%\ndebug = False\neda_view = True\n\nnum_rows = 2000 if debug else None\ntrain = pd.read_csv('..\/input\/train.csv', nrows = num_rows)\ntest = pd.read_csv('..\/input\/test.csv', nrows = num_rows)\n","205e9245":"train.info()","a05815a3":"test.info()","97521499":"if eda_view == True:\n    sns.distplot(train['price'])\n    plt.show()\n    print(train['price'].skew())\n    print(train['price'].kurt())","621c5949":"#%%\nfor df in [train, test]:\n\tdf['sale_yr'] = pd.to_numeric(df.date.str.slice(0, 4))\n\tdf['sale_month'] = pd.to_numeric(df.date.str.slice(4, 6))\n\tdf['sale_day'] = pd.to_numeric(df.date.str.slice(6, 8))\n\tdf.drop(['date'], axis=1, inplace=True)","44ad9cf2":"if eda_view == True:\n    for c in train:\n        sns.kdeplot(train[c])\n        plt.show()","4ae2d860":"features = ['sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement', 'sqft_living15', 'sqft_lot15']","6ad77e87":"for df in [train, test]:\n    for c in features:\n        df[c] = np.log1p(df[c])\n\ntrain['price'] = np.log1p(train['price'])","2db9193c":"if eda_view == True:\n    sns.kdeplot(train['price'])\n    plt.show()\n    for c in features:\n        sns.kdeplot(train[c])\n        plt.show()","0b97f303":"for df in [train, test]:\n\tdf['total_rooms'] = df['bathrooms'] + df['bedrooms']\n\tdf['total_sqft'] = df['sqft_living'] + df['sqft_lot']\n\tdf['total_sqft15'] = df['sqft_living15'] + df['sqft_lot15']\n\tdf['grade_multi_cond'] = df['grade'] * df['condition']\n\t# \uc6a9\uc801\ub960 \uc8fc\uac70 \uacf5\uac04 \/ \ub300\uc9c0 \uba74\uc801\n\tdf['far1'] = df['sqft_living'] \/ df['sqft_lot']\n\tdf['far2'] = df['sqft_living15'] \/ df['sqft_lot15']\n    # \uc6a9\uc801\ub960\uc774 \ub298\uc5b4 \ub0ac\ub294\uac00?\n\tdf['is_far_incre'] = df['far2'] - df['far1']\n\tdf['is_far_incre'] = df['is_far_incre'].apply(lambda x : 0 if x < 0 else 1)\n\t\n    #\uac74\ud3d0\ub960 (\ud1a0\uc9c0 \uba74\uc801 \ub300\ube44 1\uce35\uc774 \ucc28\uc9c0\ud558\ub294 \ube44)\n\tdf['far3'] = (df['sqft_above'] \/ df['floors']) \/ df['sqft_lot']\n\t\n    # \uce35\ub2f9 \ud654\uc7a5\uc2e4 \uac1c\uc218\n\tdf['bath_per_floors'] = df['bathrooms'] \/ df['floors']\n    \n    # \uce35\ub2f9 \ubc29 \uc218\n\tdf['bed_per_floors'] = df['bedrooms'] \/ df['floors']\n    \n    # \uc9c0\uc0c1 \uac70\uc8fc \uacf5\uac04 \uc911 1\uce35\uc774 \ucc28\uc9c0\ud558\ub294 \ube44\n\tdf['1st_living'] = df['sqft_above'] \/ df['floors']\n\tdf['is_renovated'] = df['yr_renovated'] - df['yr_built']\n\tdf['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x < 0 else 1)\n\tdf['age_built'] = df['yr_built'] \/ 2015\n\tdf['age_reno'] = df['yr_renovated'] \/ 2015\n\t# \uc9c0\ud558\uac00 \uc788\ub0d0 \uc5c6\ub0d0?\n\tdf['is_basement'] = df['sqft_basement'].apply(lambda x: 0 if x == 0 else 1)\n    #\uc804\uccb4 \ubc29\uc218 + \uc9c0\ud558\uc2e4\n\tdf['total_rooms'] = df['total_rooms'] + df['is_basement']\n    # \ub2e4\ub77d\uc774 \uc788\ub0d0 \uc5c6\ub0d0?\n\tdf['is_top'] = df['floors'].apply(lambda x: 0 if int(x) == x else 1)\n    # 2015\ub144\uc5d0 \uc8fc\uac70 \uacf5\uac04\uc774 \ucee4\uc84c\ub294\uac00?\n\tdf['is_living_wider'] =  df['sqft_living15'] \/ df['sqft_living']\n\tdf['is_living_wider'] = df['is_living_wider'].apply(lambda x:0 if x < 1 else 1)\n    # 2015\ub144 \ud1a0\uc9c0 \uba74\uc801\uc774 \ucee4\ub154\ub294\uac00?\n\tdf['is_lot_wider'] =  df['sqft_lot15'] \/ df['sqft_lot']\n\tdf['is_lot_wider'] = df['is_lot_wider'].apply(lambda x: 0 if x < 1 else 1)\n\tdf['total_grade'] = df['waterfront'] + df['view'] + df['condition'] + df['grade']","abac8cf1":"train['per_price_living'] = train['price']\/train['sqft_living']\ntrain['per_price_above'] = train['price']\/train['sqft_above']\ntrain['per_price_lot'] = train['price']\/train['sqft_lot']\n\ntrain['per_price_living_grade'] = train['per_price_living'] * train['grade']\ntrain['per_price_above_grade'] = train['per_price_above'] * train['grade']\ntrain['per_price_lot_grade'] = train['per_price_lot'] \/ train['grade']\n\nzipcode_price_living = train.groupby(['zipcode'])['per_price_living'].agg({'mean','var'}).reset_index()\ntrain = pd.merge(train,zipcode_price_living, how='left',on='zipcode')\ntest = pd.merge(test,zipcode_price_living, how='left',on='zipcode')\n\nzipcode_price_above = train.groupby(['zipcode'])['per_price_above'].agg({'mean','var'}).reset_index()\ntrain = pd.merge(train,zipcode_price_above,how='left',on='zipcode')\ntest = pd.merge(test,zipcode_price_above,how='left',on='zipcode')\n\nzipcode_price_lot = train.groupby(['zipcode'])['per_price_lot_grade'].agg({'mean','var'}).reset_index()\ntrain = pd.merge(train,zipcode_price_lot,how='left',on='zipcode')\ntest = pd.merge(test,zipcode_price_lot,how='left',on='zipcode')\n\nzipcode_price_living_grade = train.groupby(['zipcode'])['per_price_living_grade'].agg({'mean','var'}).reset_index()\ntrain = pd.merge(train,zipcode_price_living_grade, how='left',on='zipcode')\ntest = pd.merge(test,zipcode_price_living_grade, how='left',on='zipcode')\n\nzipcode_price_above_grade = train.groupby(['zipcode'])['per_price_above_grade'].agg({'mean','var'}).reset_index()\ntrain = pd.merge(train,zipcode_price_above_grade,how='left',on='zipcode')\ntest = pd.merge(test,zipcode_price_above_grade,how='left',on='zipcode')\n\nzipcode_price_lot_grade = train.groupby(['zipcode'])['per_price_lot_grade'].agg({'mean','var'}).reset_index()\ntrain = pd.merge(train,zipcode_price_lot_grade,how='left',on='zipcode')\ntest = pd.merge(test,zipcode_price_lot_grade,how='left',on='zipcode')\n\ntrain.drop(['per_price_living', 'per_price_above', 'per_price_lot', 'per_price_living_grade', 'per_price_above_grade', 'per_price_lot_grade'], axis=1, inplace=True)","9fc71e22":"train.head(10)","c5886337":"train.info()","eeaed1ab":"corrmat = train.corr()\ntop_corr_features = corrmat.index[abs(corrmat['price']) >= 0.45]\nplt.figure(figsize=(12, 12))\nhm = sns.heatmap(train[top_corr_features].corr(), annot=True)\nplt.show()","b47b3acf":"x_train = train.drop(['price', 'id'], axis=1)\nx_test = test.drop(['id'], axis=1)\ny_train = train['price']\ny_train = y_train.values.reshape(-1,1)","1dfc9ad8":"x_scaler = StandardScaler().fit(x_train)\ny_scaler = StandardScaler().fit(y_train)\n\nx_train = x_scaler.transform(x_train)\nx_test = x_scaler.transform(x_test)\ny_train = y_scaler.transform(y_train)","9fa5d67d":"def coeff_determination(y_true, y_pred):\n    SS_res =  K.sum(K.square( y_true-y_pred ))\n    SS_tot = K.sum(K.square( y_true - K.mean(y_true) ) )\n    return ( 1 - SS_res\/(SS_tot + K.epsilon()) )","6a1a770d":"np.random.seed(2019)","e528b4af":"def make_model1():\n    model = models.Sequential()\n    model.add(layers.Dense(8, activation='elu',\tinput_dim=x_train.shape[1]))\n    model.add(layers.Dense(8, activation='elu'))\n    model.add(layers.Dense(1))\n\n    optimizer = optimizers.Adam(lr=0.001)\n    model.compile(optimizer= optimizer, loss = 'mse', metrics=['mae', coeff_determination])\n    return model","65f45640":"def make_model2():\n    model = models.Sequential()\n    model.add(layers.Dense(8, activation='elu',\tinput_dim=x_train.shape[1]))\n    model.add(layers.Dense(8, activation='elu'))\n    model.add(layers.Dense(1))\n\n    optimizer = optimizers.RMSprop(lr=0.001)\n    model.compile(optimizer= optimizer, loss = 'mse', metrics=['mae', coeff_determination])\n    return model","78a7fda7":"epoch = 200\npatient = 20\nk = 4\nnum_val_samples = len(x_train) \/\/ k","78331e44":"model_path = '..\/model\/'\nif not os.path.exists(model_path):\n    os.mkdir(model_path)\n\nmodel_path1 = model_path + 'best_model1.hdf5'\nmodel_path2 = model_path + 'best_model2.hdf5'","3547d22d":"callbacks1 = [\n    EarlyStopping(monitor='mse', patience=patient, mode='min', verbose=1),\n    ModelCheckpoint(filepath=model_path1, monitor='mse', verbose=1, save_best_only=True, mode='min'),\n    ReduceLROnPlateau(monitor = 'val_loss', factor = 0.5, patience = patient \/ 3, min_lr=0.000001, verbose=1, mode='min')\n    ]","a8be8aa1":"callbacks2 = [\n    EarlyStopping(monitor='mse', patience=patient, mode='min', verbose=1),\n    ModelCheckpoint(filepath=model_path2, monitor='min', verbose=1, save_best_only=True, mode='max'),\n    ReduceLROnPlateau(monitor = 'val_loss', factor = 0.5, patience = patient \/ 3, min_lr=0.000001, verbose=1, mode='min')\n    ]","d86f7a3d":"for i in range(k):\n    print('Fold num #', i+1)\n    val_data = x_train[i * num_val_samples : (i+1) * num_val_samples]\n    val_targets = y_train[i * num_val_samples : (i+1) * num_val_samples]\n\n    partial_train_data = np.concatenate(\n        [x_train[:i*num_val_samples],\n        x_train[(i+1) * num_val_samples:]],\n        axis=0\n    )\n    partial_train_targets = np.concatenate(\n        [y_train[:i*num_val_samples],\n        y_train[(i+1) * num_val_samples:]],\n        axis=0\n    )\n    \n    model1 = make_model1()\n    model2 = make_model2()\n    \n    history1 = model1.fit(\n        partial_train_data, \n\t    partial_train_targets,\n        validation_data=(val_data, val_targets), \n\t    epochs=epoch, \n\t    batch_size=16, \n\t    callbacks=callbacks1)\n\n    history2 = model2.fit(\n        partial_train_data, \n\t    partial_train_targets,\n        validation_data=(val_data, val_targets), \n\t    epochs=epoch, \n\t    batch_size=16, \n\t    callbacks=callbacks2)","ab72f5ed":"#%%\nplt.plot(history1.history['coeff_determination'])\nplt.title('1-coeff_determination')\nplt.ylabel('coeff_determination')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history1.history['val_coeff_determination'])\nplt.title('1-val_coeff_determination')\nplt.ylabel('val_coeff_determination')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n#%%\nplt.plot(history2.history['coeff_determination'])\nplt.title('2-coeff_determination')\nplt.ylabel('coeff_determination')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history2.history['val_coeff_determination'])\nplt.title('2-val_coeff_determination')\nplt.ylabel('val_coeff_determination')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","07e3236d":"best_model1 = make_model1()\nbest_model1.load_weights('..\/model\/best_model1.hdf5')\nbest_model1.fit(\n   \tx_train, \n\ty_train, \n\tepochs=epoch, \n\tbatch_size=16, \n\tshuffle=True, \n\tvalidation_split=0.2,\n    callbacks=callbacks1\n    )\n\nbest_model2 = make_model2()\nbest_model2.load_weights('..\/model\/best_model2.hdf5')\nbest_model2.fit(\n   \tx_train, \n\ty_train, \n\tepochs=epoch, \n\tbatch_size=16, \n\tshuffle=True, \n\tvalidation_split=0.2,\n    callbacks=callbacks2\n    )","12363f25":"y_preds_best1 = best_model1.predict(x_test)\ninv_y_preds_best1 =  np.expm1(y_scaler.inverse_transform(y_preds_best1))\n\ny_preds_best2 = best_model2.predict(x_test)\ninv_y_preds_best2 =  np.expm1(y_scaler.inverse_transform(y_preds_best2))\n\navg_pred = ( inv_y_preds_best1 + inv_y_preds_best2) \/ 2\navg_pred = avg_pred.astype(int)","6562c0ce":"if debug == False:\n    sub = pd.read_csv('..\/input\/sample_submission.csv')\n    sub['price'] = avg_pred\n    sub.to_csv('.\/neural_avg.csv', index=False)","c2167bfc":"feature\ub4e4\uc744 \ucd94\uac00\ud558\uace0 price\uc640 \uc0c1\uad00\uad00\uacc4 0.45 \uc774\uc0c1\uc778 feature\ub4e4\uc744 \ucd9c\ub825\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.","65e0910b":"\ud6c8\ub828\uc5d0\uc11c \uc0ac\uc6a9\ud560 callback \ud568\uc218\ub4e4\nEarlyStopping\uc740 \uacf5\ubd84\uc0c1\uc774 20\ubc88 \ub3d9\uc548 \ucee4\uc9c0\uc9c0 \uc54a\uc73c\uba74 \ud559\uc2b5 \uc885\ub8cc\uc758 \uc758\ubbf8.\nModelCheckpoint\ub294 \ud6c8\ub828 \uc911 \uac00\uc7a5 \ub192\uc740 \uacf5\ubd84\uc0b0 \uac12\uc774 \ub098\uc628 \ubaa8\ub378\uc744 \ub530\ub85c \uc800\uc7a5.\nReduceLROnPlateau\ub294 \ud6c8\ub828\uc911 loss\uac00 \uc904\uc9c0 \uc54a\uc73c\uba74(\uc5ec\uae30\uc11c loss\ub294 mse\uc784) learning rate\ub97c \uc904\uc5ec\uac00\uba74\uc11c \ud559\uc2b5 \ud558\ub3c4\ub85d \uc124\uc815. \uc774\ub294 loss\uac12 \ub110\ub6f0\uae30\ub97c \ub9c9\uc544\uc90d\ub2c8\ub2e4.","081c78b5":"\uc5f0\uc18d\ud615 \ubcc0\uc218 \uc911 \uc65c\ub3c4\uac00 0\uc5d0\uc11c \ub9ce\uc774 \ubc97\uc5b4\ub098 \ubcf4\uc774\ub294 feature\ub4e4\uc740","aa7dc5e8":"feature\ub4e4\uc744 \ucd94\uac00 \ud569\ub2c8\ub2e4. \uba87\uac00\uc9c0 \ub2e4\ub978 \ucee4\ub110\uc5d0\uc11c \ubcf4\uc9c0 \ubabb\ud55c \uac83\ub4e4\ub9cc \uc124\uba85\ub4dc\ub9ac\uba74\n1. \uc6a9\uc801\ub960, \uac74\ud3d0\ub960 \ucd94\uac00 \ud558\uc600\uace0\uc694.\n2. \uc6a9\uc801\ub960\uc774 2015\ub144 \uce21\uc815\ud6c4\uc5d0 \ub298\uc5c8\ub0ac\ub294\uc9c0 \uc5ec\ubd80\ub97c 0, 1\ub85c \ucd94\uac00\n3. \uce35\ub2f9 \ud654\uc7a5\uc2e4 \uc218 \uac1c\ub150\uc744 \ucd94\uac00 \ud588\uc2b5\ub2c8\ub2e4. (\uc774\uac74 \uac1c\uc778\uc801\uc778 \uc0dd\uac01\uc784 1\uce35\uc5d0 \ucd5c\uc18c 1\uac1c\uc758 \ud654\uc7a5\uc2e4\uc740 \uc788\uc5b4\uc57c.....\uae09\ub625\uc744 \ud53c\ud558\ub294...)\n4. \uce35\ub2f9 \ubc29\uc218\n5. \uc9c0\uc0c1 \uac70\uc8fc \uacf5\uac04 \uc911 1\uce35\uc774 \ucc28\uc9c0\ud558\ub294 \ube44\n6. 2015\ub144 \uae30\uc900 \uc9c0\uc5b4\uc9c4\uc9c0 \uc5bc\ub9c8\ub098 \uc624\ub798 \uc9c0\ub0ac\ub098\ub97c \ub098\ud0c0\ub0b4\ub824\uace0 yr_built \/ 2015 \ucd94\uac00\ud568.\n7. \ub9ac\ubaa8\ub378\ub9c1 \ud55c \uae30\uac04 \uc5bc\ub9c8\ub098 \ub418\uc5c8\ub294\uc9c0 \ucd94\uac00.\n8. \uc9c0\ud558\uc2e4\uc774 \uc788\ub0d0 \uc5c6\ub0d0\ub97c 0, 1\ub85c \ucd94\uac00\n9. \ub2e4\ub77d\uc774 \uc788\ub0d0 \uc5c6\ub0d0\ub97c 0, 1\ub85c \ucd94\uac00\n10. \uac70\uc8fc \uacf5\uac04\uacfc \ubd80\uc9c0\uba74\uc801\uc774 2015\ub144 \uc7ac \uce21\uc815\ud6c4\uc5d0 \ucee4\uc84c\ub294\uc9c0 \uc791\uc544\uc84c\ub294\uc9c0 \ucd94\uac00.\n","7c027e21":"# \ubcc0\uc218 \uc124\uba85\n1. ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n2. date : \uc9d1\uc744 \uad6c\ub9e4\ud55c(\uac70\ub798\ud55c) \ub0a0\uc9dc\n3. price : \uc9d1\uc758 \uac00\uaca9(Target variable)\n4. bedrooms : \uce68\uc2e4\uc758 \uc218\n5. bathrooms : \uce68\uc2e4 \uac1c\uc218 \ub2f9 \ud654\uc7a5\uc2e4\uc758 \uc218(\ud654\uc7a5\uc2e4\uc758 \uc218 \/ \uce68\uc2e4\uc758 \uc218 )\n    \ud654\uc7a5\uc2e4, \uc138\uba74\ub300, \uc0e4\uc6cc\uc2e4, \uc695\uc870 : 1\n    \ud654\uc7a5\uc2e4, \uc138\uba74\ub300, \uc0e4\uc6cc\uc2e4, : 0.75\n    \ud654\uc7a5\uc2e4, \uc138\uba74\ub300, : 0.5\n6. sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801) \n    sqft_living = sqft_above + sqftbasement \uc784.\n7. sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n8. floors : \uc9d1\uc758 \uce35 \uc218\n    \uce35\uc218\uc5d0 0.5\ub294 \ub2e4\ub77d\ubc29\uc758 \uc758\ubbf8. \n9. waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n10. view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4 (0~4)\n11. condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc (1~5)\n12. grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09 (1~13)\n13. sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n14. sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n15. yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4\n16. yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n17. zipcode : \uc6b0\ud3b8\ubc88\ud638\n18. lat : \uc704\ub3c4\n19. long : \uacbd\ub3c4\n20. sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n    \ub610\ub294 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc8fc\ubcc0 15\uac1c\uc758 \ud3c9\uade0 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8\n21. sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n    \ub610\ub294 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc8fc\ubcc0 15\uac1c\uc758 \ubd80\uc9c0\uc758 \ud3c9\uade0 \ud3c9\ubc29 \ud53c\ud2b8","efdf308e":"\ud6c8\ub828\uc5d0 \uc0ac\uc6a9\ud560 x_train, y_train. \uc608\uce21\uc5d0 \uc0ac\uc6a9\ud560 x_test \ub370\uc774\ud130 \ubd84\ub958\ud569\ub2c8\ub2e4.\n\n\uc9c0\uae08\uc740 id\ub97c \uc81c\uc678\ud55c \ubaa8\ub4e0 feature\ub4e4\uc740 \ubaa8\ub378 \ud6c8\ub828\uc2dc \uc0ac\uc6a9\ud560 \uacc4\ud68d\uc774\uace0, \ud5a5\ud6c4 \uad00\ub828\ub3c4 \uc801\uc740 feature\ub4e4\uc740 \uc81c\uc678\ud558\uc5ec \ubcf4\uba74\uc11c \ud14c\uc2a4\ud2b8 \uc608\uc815\uc784.","5261e891":"\ud6c8\ub828\uc2dc \uc0ac\uc6a9\ud560 epochs \uc218\uc640 \ud6c8\ub828 \uc911 \uc885\ub8cc\uc870\uac74 \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uae30\uc900 \uc218\ub97c \uc815\ud569\ub2c8\ub2e4.\n4\ud3f4\ub4dc \uac80\uc815\uc5d0 2\uac1c \ubaa8\ub378, \uac01 \ud6c8\ub828 \ubcc4 patient\ub294 20\n\uc2e4\uc81c \ub3cc\ub824 \ubcf4\uba74 \ub300\ub7b5 \uac01 \ud3f4\ub4dc \ub9c8\ub2e4 100 epoch \uc815\ub3c4\uc5d0\uc11c \ud559\uc2b5\uc774 \uc885\ub8cc \ub429\ub2c8\ub2e4.","f6b6b298":"\uc774\uc81c boxplot\uacfc pairplot\uc740 \ub2e4\ub978 \ubd84\ub4e4\uc758 \ucee4\ub110\uc744 \ucc38\uace0\ud558\uc5ec \ud655\uc778\ub9cc \ud558\uc600\uace0\n\uc774\uc0c1\uce58\ub4e4\uc740 \uc81c\uac70 \ud558\uc9c0 \uc54a\uc744 \uc608\uc815\uc785\ub2c8\ub2e4.","1f94886d":"\ud6c8\ub828\uc911 \ubaa8\ub378 \uacb0\uacfc\ub97c \uc800\uc7a5\ud560 \ub514\ub809\ud130\ub9ac, \ud30c\uc77c\uba85 ","82a6a77e":"price\ub97c \ud3ec\ud568\ud558\uc5ec \uc65c\ub3c4 feature\ub4e4\uc744 \uc65c\ub3c4\uac00 0\uc5d0 \uac00\uae4c\uc6cc \uc9c0\ub3c4\ub85d \ubcc0\ud658\ud558\uc5ec \uc90d\ub2c8\ub2e4.","f4fc4cba":"\ud6c8\ub828 \ubaa8\ub378\uc744 2\uac1c \ub9cc\ub4e4\uc5c8\uace0 optimizer\ub97c \ud558\ub098\ub294 Adam, \ub2e4\ub978 \ud558\ub098\ub294 RMSprop\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","5a2c0136":"\ud55c\uad6d\uc758 \ud3c9\ub2f9 \ub2e8\uac00\uc758 \uac1c\ub150\uc744 \ucd94\uac00.\n\uc815\ud655\ud55c \ud3c9\ub2f9 \ub2e8\uac00\ub97c \uad6c\ud558\ub824\uba74 \n\n\uc8fc\ud0dd \uac00\uaca9 = \ud1a0\uc9c0\uac00\uaca9 + \uac74\ubb3c \uac00\uaca9\n\ud1a0\uc9c0 \uac00\uaca9 = \ud1a0\uc9c0\uc2dc\uc138 * \ud1a0\uc9c0\uba74\uc801\n\uac74\ubb3c \uac00\uaca9 = \ud45c\uc900\uac74\ucd95\ube44 * \uac74\ubb3c \uc5f0\uba74\uc801 * \uac10\uac00\uc0c1\uac01\ub960\n\n\uc774\ub7f0 \uac83\ub4e4\uc744 \uacc4\uc0b0 \ud558\uc5ec\uc57c \ud558\ub294\ub370 \uc8fc\uc5b4\uc9c4 feature\ub4e4\ub9cc \uac00\uc9c0\uace0\ub294 \uc815\ud655\ud558\uac8c \uc0b0\ucd9c\uc774 \uc5b4\ub824\uc6c0.\n\ud574\uc11c \ub300\ub7b5\uc801\uc778 \uacc4\uc0b0\uc744 \ud558\uace0, \uc774\ub807\uac8c \ucd94\uac00\ub41c feature\ub4e4\uc744 zipcoe feature\uc640 \ubb36\uc5b4\uc11c \ucd94\uac00\ud568.\n\n\uc704, \uacbd\ub3c4\uc5d0 \ub530\ub978 \ud2b9\uc815 \uc9c0\uc5ed\uc758 \uc9d1\uac12\uc774 \ub192\ub2e4\ub294 \uac74 \uacb0\uad6d zipcode\uc911 \ud2b9\uc815 \uc9c0\uc5ed\uc758 \uc9d1\uac12\uc774 \ub192\ub2e4\ub85c \ubd10\ub3c4 \ub420 \ub4ef \ud568.","b7cb35b8":"# skew(\uc65c\ub3c4) \n![skew](https:\/\/drive.google.com\/file\/d\/1I-m_9d2TaN-qRZb9NQS7OnEsuEIOH6YH\/view?usp=sharing)\n\uc65c\ub3c4\ub294 \ub370\uc774\ud130\uc758 \uc88c\uc6b0 \ub300\uce6d \uc815\ub3c4\ub97c \ub098\ud0c0\ub0b4\ub294 \uc218\uce58\ub85c 0\uc774\uba74 \uc88c\uc6b0 \ub300\uce6d\uc784.\n\uc65c\ub3c4 \uac12\uc774 0\ubcf4\ub2e4 \ud06c\uba74 \uc624\ub978\ucabd \uaf2c\ub9ac \uc989 price feature\ucc98\ub7fc \uc0dd\uae40.\n\uc65c\ub3c4 \uac12\uc774 0\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc67c\ucabd \uaf2c\ub9ac \ud615\ud0dc\uc784\n\n\ubaa8\ub378\uc744 \ud6c8\ub828\uc2dc\ud0ac\ub54c \uc65c\ub3c4\uac00 0\uc5d0 \uac00\uae4c\uc6b8 \uc218\ub85d \uc88b\uc740 \uacb0\uacfc\ub97c \uac00\uc838 \uc624\uae30\ub3c4 \ud569\ub2c8\ub2e4.\n\ud574\uc11c \ucd5c\ub300\ud55c \uc815\uaddc \ubd84\ud3ec \ud615\ud0dc\uac00 \ub418\ub3c4\ub85d \uc774\ub807\uac8c \ud55c\ucabd\uc73c\ub85c \uce58\uc6b0\uc9c4 feature\ub4e4\uc740 \uc791\uc5c5\uc744 \ud558\uc5ec \uc90d\ub2c8\ub2e4.\n\n# kurt(\ucca8\ub3c4)\n\ucca8\ub3c4\ub294 \ubd84\ud3ec\uc758 \uaf2c\ub9ac(\uc591\ucabd \ub05d)\uc774 \uc815\uaddc \ubd84\ud3ec\ub300\ube44 \uc5b4\ub5bb\uac8c \ub2e4\ub978\uac00\ub97c \ub098\ud0c0\ub0c4.\n\ucca8\ub3c4\uac00 \uc591\uc218\uc774\uba74 \uc815\uaddc\ubd84\ud3ec\ubcf4\ub2e4 \uaf2c\ub9ac\uac00 \ub450\uaecd\ub2e4.\n\ucca8\ub3c4\uac00 \uc74c\uc218\uc774\uba74 \uc815\uaddc\ubd84\ud3ec\ubcf4\ub2e4 \uaf2c\ub9ac\uac00 \uc587\ub2e4.","aa152c17":"\ud6c8\ub828 \uacb0\uacfc\ub97c \uadf8\ub798\ud504\ub85c \uc694\uc57d\ud558\uc5ec \ubd05\ub2c8\ub2e4.\n\ud6c8\ub828 \ub370\uc774\ud130\uc640 \uac80\uc99d \ub370\uc774\ud130 \ubaa8\ub450\uc5d0\uc11c \uc548\uc815\uc801\uc778 \uacb0\uacfc\uce58\ub97c \ubcf4\uc5ec \uc8fc\ub294 \uac83\uc73c\ub85c \ud310\ub2e8\ud588\uc2b5\ub2c8\ub2e4.","f56a8b87":"\ud6c8\ub828\ud558\uae30\uc804 feature\ub4e4\uc744 \uc815\uaddc\ud654 \ud558\uc5ec \uc90d\ub2c8\ub2e4.","81a3d8a1":"\uc774\uc81c test \ub370\uc774\ud130\ub85c \uc9d1\uac12\uc744 \uc608\uce21\ud558\uc5ec \ubd05\ub2c8\ub2e4.\n\uc5ec\uae30\uc11c \uc8fc\uc758 \ud558\uc2e4 \uac74\n\uc55e\uc5d0\uc11c log1p, standscale \ud558\uc600\uc73c\ub2c8 \uc5ed\uc73c\ub85c \ub2e4\uc2dc \ud658\uc6d0\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4.\nnp.expm1\uacfc inverse_transform \uc774 \uadf8\uc5d0 \ud574\ub2f9 \ud569\ub2c8\ub2e4.\n\n\ub450 \ubaa8\ub378\uc758 \ud3c9\uade0\uc774\ub2c8 \uc559\uc0c1\ube14\uc785\ub2c8\ub2e4.\n\n\uc81c\uac00 \uc548\ud574 \ubd24\uc9c0\ub9cc \uc5ec\uae30\ub2e4\uac00 xgb\ub4f1\uc744 \uc0ac\uc6a9\ud558\uba74 \uc810\uc218\uac00 \ub9ce\uc774 \uc62c\ub77c \uac08 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.","0c9a16ee":"\ub2e4\ub978 \ubd84\ub4e4\uc758 EDA\ub97c \ub9ce\uc774 \ucc38\uace0 \ud588\uc2b5\ub2c8\ub2e4. null\uac12\uc740 \uc5c6\ub294 \uac78\ub85c \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\uc81c\uc77c \uba3c\uc800 target feature\uc778 \"price\"\ub97c \uc0b4\ud3b4\ubcf4\uba74","43710b63":"r2 \uacf5\ubd84\uc0b0 \ud568\uc218\ub97c \ucd94\uac00 \ud569\ub2c8\ub2e4. keras\uc5d0\uc11c\ub294 \uc5c6\uc5b4\uc11c.... \ud558\uc9c0\ub9cc \ud655\uc778\ud558\uc5ec \ubcf4\ub2c8 \uaf2d \uc774 \ud568\uc218\ub97c \ucd94\uac00\ud574\uc11c \ubcfc \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.\nmse\uc640 \ube44\ub840\ud558\uae30 \ub54c\ubb38\uc5d0 r2\uc758 \uc218\uce58\ub97c \ud655\uc778\ud558\uae30 \uc704\ud55c \uc6a9\ub3c4 \uc785\ub2c8\ub2e4.","21c61982":"\ub2e4\uc2dc kdeplot\uc73c\ub85c \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\uba74 \ubcc0\ud654\ub41c \ud615\ud0dc\ub97c \ud655\uc778 \ud588\uc2b5\ub2c8\ub2e4.","6f5d12a9":"\uc774\uc81c \uc804\uccb4 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \ud6c8\ub828 \uc2dc\ucf1c\ubd05\ub2c8\ub2e4.\n\ud6c8\ub828\uc2dc 4 fold\ub85c \uac80\uc99d\ud558\uc600\ub358 \uacb0\uacfc\ub97c \ubd88\ub7ec\ub4e4\uc5ec \uc801\uc6a9\ud569\ub2c8\ub2e4.\n\n\uc804\uccb4 \ub370\uc774\ud130\ub85c \ud6c8\ub828\uc2dc \uc790\ub3d9\uc73c\ub85c 0.2 \ub294 \ub2e4\uc2dc \uac80\uc99d\uc6a9\uc73c\ub85c \ud558\uace0, \ud6c8\ub828\ub54c\ub9c8\ub2e4 \uc790\ub3d9 shuffle\uc744 \uc801\uc6a9\ud569\ub2c8\ub2e4.\n(\uc774\ub7f0\uac74 keras\uac00 \ucc38 \ud3b8\ud569\ub2c8\ub2e4.)","95a22c05":"train.info\uc5d0\uc11c \ud655\uc778\ud55c date feature\uac00 object \ud615\ud0dc\uc784\uc744 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4.\nkdeplot\uc744 \uadf8\ub824\ubcf4\uae30 \uc704\ud574\uc11c object \ud0c0\uc785\uc744 \uac00\uacf5\ud569\ub2c8\ub2e4."}}