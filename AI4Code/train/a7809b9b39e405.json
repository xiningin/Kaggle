{"cell_type":{"8b1be3d3":"code","aa1cfcfb":"code","c52a3ed7":"code","957182b2":"code","5dbac188":"code","c71e90dc":"code","6762cbe5":"code","bbc1d95b":"code","eea4f1d4":"code","9d6325bf":"code","030da79b":"code","89dfd259":"code","739447da":"code","99a9b9a3":"code","8f757528":"code","e3e20aaa":"code","acc5adbd":"code","3582c850":"code","c894b38c":"code","f68fc52a":"code","b9364cd9":"code","471ad162":"code","7a122014":"code","3a58c9da":"code","889f84c6":"code","e2cb0d5d":"code","901fd41f":"code","5c477e65":"code","a1bdd36a":"code","fd2c350f":"code","dc8332c7":"code","38664206":"code","a15e4dbb":"code","1df0930a":"code","262f7772":"code","9f6add3e":"code","a3ff84e6":"code","db4a61f5":"code","8e503b46":"code","64882d41":"code","78a34570":"code","85e22ae4":"code","276fcda9":"code","69477094":"code","b37659fc":"code","949d0122":"code","8a6d3bdd":"code","f6945920":"code","12fd8fe6":"code","24e128b2":"code","63f5f220":"code","10ed4409":"code","40311f72":"code","1b16847a":"code","a9684c92":"code","0e453a11":"code","5882b008":"code","7ba43885":"code","5cd9f5f4":"code","2a965aec":"code","0146f8f4":"code","44f13410":"code","f2c9d9dc":"code","c4d4997b":"code","90e96a71":"code","6d9e9005":"code","adf309c3":"code","4f9785d8":"code","8ff4c967":"code","b3314c74":"code","2a506917":"code","0bf29a52":"code","a2fb8538":"code","ed3ede3b":"code","4e1ce871":"code","2d78c68e":"code","ac8f9d5a":"code","ed119590":"code","6787d4a9":"markdown","5ae6dca5":"markdown","1e65c7ac":"markdown","e40d41b1":"markdown","1a141557":"markdown","43e183a5":"markdown","b8a805c4":"markdown","33af7d0f":"markdown","cbdd0c67":"markdown","42918f44":"markdown","4ebc42ca":"markdown","ecd4b4b4":"markdown","a823285b":"markdown","b5e38cc6":"markdown","6ff0f185":"markdown","a1a8b18e":"markdown","e33b9d7c":"markdown","f1b032cd":"markdown","03fc0000":"markdown","81de0742":"markdown","c7ba8f3f":"markdown","6cf8cbc9":"markdown","cb5b4f12":"markdown","b53c5b30":"markdown","5fd9cf3f":"markdown","179b4b23":"markdown","63c5b1d8":"markdown","bd9e119c":"markdown","a7989d94":"markdown","5b47e01f":"markdown","847648e7":"markdown","e2070bcf":"markdown","198ce9c8":"markdown","e65c9955":"markdown","3b13e769":"markdown","4fd69fe7":"markdown","05669118":"markdown","78740c42":"markdown","27a3cbb9":"markdown","02805553":"markdown","c0ec6fa1":"markdown","424180dd":"markdown","c2f9fa52":"markdown","e585c7ad":"markdown","ae79881c":"markdown","8f205d44":"markdown","d95eb1f1":"markdown","1d7b9697":"markdown","f896c577":"markdown","b163d3e6":"markdown","20040e2c":"markdown","f8efc5c8":"markdown","c165c263":"markdown","2bf6c46c":"markdown","4faf4b13":"markdown","c467fdd0":"markdown","1d73c5e9":"markdown","7da640c1":"markdown"},"source":{"8b1be3d3":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","aa1cfcfb":"pathtr = '\/kaggle\/input\/titanic\/train.csv' # path to train.csv\npathte = '\/kaggle\/input\/titanic\/test.csv' # path to test.csv\npathsm = '\/kaggle\/input\/titanic\/gender_submission.csv' # path to submission sample file\n\ndf = pd.read_csv(pathtr) # train dataframe\ndff = pd.read_csv(pathte) # test dataframe\nsubmission = pd.read_csv(pathsm) # submission sample","c52a3ed7":"df.shape, dff.shape #check shapes of our train and test tables","957182b2":"df.columns #get column names","5dbac188":"df.head() #get a first look at a data by loading head 5 rows of the train DataFrame","c71e90dc":"df.describe() #describe the dataset to get information about missing values, mean, etc.","6762cbe5":"df.shape, df.dropna().shape #Let's try to use dropna() and see how much will be lost","bbc1d95b":"df['Pclass'].head() # show first 5 elements","eea4f1d4":"df['Pclass'].isnull().sum() # check if it has missing values","9d6325bf":"df['Pclass'].value_counts() # get counts of each unique element","030da79b":"df.groupby('Pclass')['Survived'].mean() # get survival rate for each unique element in a feature","89dfd259":"df['Name']","739447da":"df['Name'].head(15)","99a9b9a3":"df['Name'].apply(                             \n    lambda x: x.split(', ')[1].split()[0]     \n).value_counts()                              ","8f757528":"df[df['Name'].apply(lambda x: x.split(', ')[1].split()[0])=='the']","e3e20aaa":"dff['Name'].apply(lambda x: x.split(', ')[1].split()[0]).value_counts() #check if it works on test data","acc5adbd":"title= {\n        'Mr.':'Mr.', 'Sir.':'Mr.', 'Jonkheer.':'Mr.', 'Don.':'Mr.',\n        'Mrs.':'Mrs.', 'Mme.':'Mrs.', 'Dona.':'Mrs.', 'the':'Mrs.',\n        'Master.':'Master.',\n        'Miss.':'Miss.','Ms.':'Miss.', 'Mlle.':'Miss.', 'Lady.':'Miss.',\n        'Rev.':'Rev.',\n        'Dr.':'Dr.',\n        'Col.':'military', 'Major.':'military', 'Capt.':'military'\n        }","3582c850":"df['Sex'].head()","c894b38c":"df['Sex'].isnull().sum()","f68fc52a":"df.groupby('Sex')['Survived'].mean()","b9364cd9":"df['Age'].dropna().hist(bins=20) # show histogram to get a better understanding","471ad162":"df['Age'].isnull().sum()","7a122014":"survival_rate_nan = df[df['Age'].isnull()==True]['Survived'].mean()\nsurvival_rate = df['Survived'].mean()\nprint(f'Survival rate of NaN-aged is {survival_rate_nan:.3f} and overall is {survival_rate:.3f}')","3a58c9da":"# let's define mapping function\ndef new_age(age):\n    \"\"\"\n    This function makes categorical feature out of Age. \n    Categories are -> no age, 0-10, 10-20, 20-30, 30-40, 40-50, 50+\n    \"\"\"\n    if np.isnan(age)== True:\n        return 'no age'\n    if age >= 0 and age < 10:\n        return '0-10'\n    if age >= 10 and age < 20:\n        return '10-20'\n    if age >= 20 and age < 30:\n        return '20-30'\n    if age >= 30 and age < 40:\n        return '30-40'\n    if age >= 40 and age < 50:\n        return '40-50'\n    return '50+'","889f84c6":"for cat in df['Age'].apply(new_age).unique():\n    temp_survival = df[df['Age'].apply(new_age)==cat]['Survived'].mean()\n    print(f'Age group of |{cat:6}| has {temp_survival:.3f} survival rate')","e2cb0d5d":"df['SibSp'].head()","901fd41f":"df['SibSp'].isnull().sum()","5c477e65":"df['SibSp'].value_counts()","a1bdd36a":"df.groupby('SibSp')['Survived'].mean()","fd2c350f":"df['SibSp2'] = df['SibSp'].apply(lambda x: x if x<=3 else '3+')","dc8332c7":"df.groupby('SibSp2')['Survived'].mean()","38664206":"df['Parch'].head()","a15e4dbb":"df['Parch'].isnull().sum()","1df0930a":"df['Parch'].value_counts()","262f7772":"df.groupby('Parch')['Survived'].mean()","9f6add3e":"df['Parch2'] = df['Parch'].apply(lambda x: x if x<=2 else '2+')","a3ff84e6":"df.groupby('Parch2')['Survived'].mean()","db4a61f5":"df['isAlone'] = (df['Parch'] + df['SibSp']).apply(lambda x: 1 if x==0 else 0) # SibSp + Parch -> if value is 0, then alone","8e503b46":"df.groupby('isAlone')['Survived'].mean() # let's check if it's helpful","64882d41":"df['FamilySize'] = df['SibSp'] + df['Parch'] + 1","78a34570":"df['FamilySize'].hist()","85e22ae4":"df['FamilySize'].value_counts()","276fcda9":"df.groupby('FamilySize')['Survived'].mean()","69477094":"df['Ticket'].head()","b37659fc":"df['Ticket'].isnull().sum()","949d0122":"fun = df['Ticket'].apply(lambda x: len(x.split()))\nfor i in fun.unique():\n    print(i,df[fun==i]['Survived'].mean(), df['Survived'].mean())","8a6d3bdd":"df['Fare'].head()","f6945920":"df['Fare'].isnull().sum()","12fd8fe6":"df['Fare'].hist(bins=100)","24e128b2":"df['Fare'].describe()","63f5f220":"def new_fare(fare):\n    \"\"\"\n    This function maps Fare.\n    Categories are -> 0-8, 8-15, 15-31, 31+\n    \"\"\"\n    if fare <= 8:\n        return '0-8'\n    if fare > 8 and fare <= 15:\n        return '8-15'\n    if fare > 15 and fare <=31:\n        return '15-31'\n    return '31+'","10ed4409":"fare_cat = df['Fare'].apply(new_fare)\nprint(fare_cat.value_counts(), '\\n')\nfor cat in fare_cat.unique():\n    cat_survival = df[fare_cat==cat]['Survived'].mean()\n    print(f'Fare group |{cat:5}| had {cat_survival:.3f} survival rate')","40311f72":"df['Cabin'].head()","1b16847a":"df['Cabin'].isnull().sum()","a9684c92":"df[df['Cabin'].isnull()]['Survived'].mean()","0e453a11":"df[~df['Cabin'].isnull()]['Survived'].mean()","5882b008":"def new_cabin(cabin):\n    \"\"\"\n    This function will map cabin to -> nan and not nan\n    \"\"\"\n    if str(cabin)=='nan':\n        return 'nan'\n    return 'not nan'","7ba43885":"df['Cabin'].apply(new_cabin).value_counts()","5cd9f5f4":"df['Embarked'].head()","2a965aec":"df['Embarked'].isnull().sum()","0146f8f4":"df.groupby('Embarked')['Survived'].mean()","44f13410":"train_df = pd.read_csv(pathtr) # train dataframe\ntest_df = pd.read_csv(pathte) # test dataframe","f2c9d9dc":"print('TRAIN')\nfor col in train_df.columns:\n    print(f'{col:11} has {train_df[col].isnull().sum():3} missing values')\nprint('\\nTEST')\nfor col in test_df.columns:\n    print(f'{col:11} has {test_df[col].isnull().sum():3} missing values')","c4d4997b":"test_df[test_df['Fare'].isnull()]","90e96a71":"test_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())","6d9e9005":"def preprocess(train,test):\n    result = []\n    for df in [train,test]:\n        df = df.loc[df['Embarked'].dropna().index]\n        df['Title'] = df['Name'].apply(lambda x: x.split(', ')[1].split()[0]).map(title)\n        df['AgeGr'] = df['Age'].apply(new_age)\n        df['SibSp2'] = df['SibSp'].apply(lambda x: x if x<=3 else '3+')\n        df['Parch2'] = df['Parch'].apply(lambda x: x if x<=2 else '2+')\n        df['isAlone'] = (df['Parch'] + df['SibSp']).apply(lambda x: 1 if x==0 else 0)\n        df['FareGr'] = df['Fare'].apply(new_fare)\n        df['Cabin2'] = df['Cabin'].apply(new_cabin)\n        df.drop(['PassengerId', 'Ticket', 'Cabin', 'Name', 'Age'], axis=1, inplace=True)\n        result.append(df)\n    return result","adf309c3":"train2_df, test2_df = preprocess(train_df, test_df)","4f9785d8":"train2_df","8ff4c967":"test2_df","b3314c74":"train2_df.shape, train2_df.dropna().shape","2a506917":"train_X = train2_df.drop('Survived', axis=1)\ntrain_y = train2_df['Survived']","0bf29a52":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\ndef get_cv(X, y, model):\n    X1 = pd.get_dummies(X)\n    scores = cross_val_score(model, X1, y, cv=5)\n    return scores","a2fb8538":"model_rf = RandomForestClassifier(n_estimators=141, random_state=999)\nget_cv(train_X, train_y, model_rf).mean()","ed3ede3b":"model_rf.fit(pd.get_dummies(train_X), train_y)","4e1ce871":"y_pred = model_rf.predict(pd.get_dummies(test2_df))","2d78c68e":"submission.head()","ac8f9d5a":"submission['Survived'] = y_pred","ed119590":"submission.to_csv('first_try.csv', index=False)","6787d4a9":"By this small EDA we were able to extract some new features. Namely, isAlone = SibSp + Parch; Title from Name; Age groups; Fare groups. I could not find out a way to use Ticket, thus it will be dropped. Also, 2 rows of DataFrame will be dropped since there are 2 missing values in Embarked","5ae6dca5":"### Pclass","1e65c7ac":"## Loading file","e40d41b1":"Hmm. We can see that passenger class affected survival rate. Only 25% of 3rd class survived, whereas almost 63% of 1st class stayed alive. This column doesn't need any kind of preprocessing, since it's clean and there are no missing values.","1a141557":"### Cabin","43e183a5":"Let's renew train and test files","b8a805c4":"I could not think of possible ways of using this feature. If you have an idea\/hypothesis, please leave a comment","33af7d0f":"Let's load our dataframes.","cbdd0c67":"### New feature -> isAlone","42918f44":"### Sex","4ebc42ca":"### Embarked","ecd4b4b4":"Everything is obvious I think. Survival rates of female and male are 74% and 19%, respectively. It will be a strong predictor\\\nI could not think of possible new features based on gender. No preprocessing is needed since, no missing values and data is clean","a823285b":"## EDA - no plots, simplified","b5e38cc6":"Basic modules needed for loading and EDA","6ff0f185":"So, here *Capt.* is a militarian title, since captain of Titanic was Edward Smith. Now, let's check what we have in the Test dataset","a1a8b18e":"I'm a beginner. That's my first public notebook. Now, I'm not that good at plots, thus decided to do EDA almost with no plots.\nPlease leave comments if you have better ideas","e33b9d7c":"Okay. now it seems better","f1b032cd":"### Fare","03fc0000":"I'm pretty sure that the extraction of titles can be easily done by using RegEx or some other stuff. If you have a better code, please share in comments section","81de0742":"### SibSp","c7ba8f3f":"We can drop those 2 missing values and that's all","6cf8cbc9":"Now let's check survival rates.","cb5b4f12":"As Ronald Coase said:\n\n>***If you torture the data long enough, it will confess to anything***\n\nEDA is really important. Good EDA will give a better understanding of data and provide you an advantage","b53c5b30":"It is almost perfect normal distribution. But, we can see that there were a lot of really young passengers. It seems most of the adults were travelling with their children","5fd9cf3f":"## Modeling","179b4b23":"* Mr. - we all know\n* Mrs. - we all know\n* Miss. - we all know\n* Master. - underaged male, (0-18 y.o.)\n* Rev - an honorific style most often placed before the names of Christian clergy and ministers\n* Dr. - doctor\n* Col. - some militarian title\n* Major. - some militarian title\n* Ms. - used to a woman regardless of marital status\n* Sir. - we all know\n* Mlle. - mademoiselle, french analogue of Miss., thus should be mapped to Miss.\n* Mme. - madame, french analogue of Mrs., thus should be mapped to Mrs.\n* Jonkheer. - is an honorific in the Low Countries denoting the lowest rank within the nobility\n* Capt. - captain, idk if it's a militarian captian, or captain of a Titanic\n* Don.\/Dona. - honorific, equivalent to Mr.\/Mrs.\n* Lady. - equivalent to Miss.","63c5b1d8":"### Parch","bd9e119c":"### Conclusion","a7989d94":"the Countess. - a historical title of nobility in certain European countries, equivalent to Mrs.","5b47e01f":"We can generate new features based on age. Most obvious is to group them and create some new feature (e.g. 0-10, 10-20, etc.)","847648e7":"So, there are huge number of missing values.","e2070bcf":"It seems reasonable to use this new feature. It might be helpful","198ce9c8":"> df['Name'].apply(some iterative function)\n\nwe use apply function to iterate through elements of the Series\n> df['Name'].apply(lambda x)\n\nnow we use lambda as a function that does required job. Here, $x$ gets values of elements of Name\n> df['Name'].apply(lambda x: x.split(', '))\n\nfirst we split by ', ', then we get list (e.g. A, Mr. B -> [A, Mr. B])\n> df['Name'].apply(lambda x: x.split(', ')[1])\n\nthen we take 2nd element of list (in our case, 'Mr. B')\n> df['Name'].apply(lambda x: x.split(', ')[1].split())\n\nhere we split again by space (' '), to get ['Mr.', 'B']\n> df['Name'].apply(lambda x: x.split(', ')[1].split()[0])\n\nfinally we take 1st element to get the title 'Mr.'","e65c9955":"### Name","3b13e769":"It might be helpful to group together those that have more than 3, for better generaliztion. Let's test","4fd69fe7":"Okay, we can see 5 and 8 have 0 survival rate, but there are only few records. So, let's try to group 3+","05669118":"Okay, it works just fine. Now we should decide how to use it. In my opinion, it would be more descriptive if we use only most common 5-6 titles.","78740c42":"### New feature -> FamilySize","27a3cbb9":"That's unacceptable, since by dropping all missing values we will lose almost 80% of information.","02805553":"From table above, we can see that column Age has a lot missing values. Also, not all of the columns are described, since describe() function works only with digital data (float, int, etc.). \\\nNow, we will be exploring each column","c0ec6fa1":"It will help","424180dd":"We know how many siblings\/spouses had a particular passenger. Also, we know how many parents\/childs she had. So, we can combine those to get if a passenger was travelling alone or not. It might be helpful","c2f9fa52":"Hmm. Interesting. It seems that those who had no Cabin had less survival rate.","e585c7ad":"The same situation as with SibSp. Might be useful to group 2+","ae79881c":"Test dataset has 1 missing value at Fare","8f205d44":"Let's just fill this value by a median.","d95eb1f1":"It seems there is nonsignificant difference between survival rates of passengers with missing age. but we'll try to include nans as another category","1d7b9697":"As it was mentioned before, it might seem that names are not usefull for predicting whether passenger will survive or not. However, one may point out that names contain titles as Mr. and Miss. So, we can use this fact to do some feature extraction. Moreover, since we have target variables, we will be able to test our hypothesis","f896c577":"# Titanic - Basic EDA and modeling","b163d3e6":"We should define a function that will do all those stuff, then we'll use it to both train and test datasets. Functions defined earlier will be very helpful","20040e2c":"### Ticket","f8efc5c8":"Now, it's time to explore our train and test dataframes","c165c263":"## Preprocessing","2bf6c46c":"### Age","4faf4b13":"Yeap. It definetely might help. We can see that passengers that were travelling alone had less survival rates. The reason might be that siblings\/spouses\/parents of a passenger were looking for them, thus those passengers had more chances to survive.","c467fdd0":"Let's see if there is some difference between survival rates of NaN-aged passengers, and overrall one.","1d73c5e9":"Columns (feature) exploration with pre-analysis\n* ***PassengerId*** - id of a passenger. In most of the cases, id is absolutely useless, since it is simply enumeration of our\n* ***Survived*** - our target variable. 1 - survived, 0 - not. In this competition we are trying to predict whether a passenger survived or not\n* ***Pclass*** - a proxy for socio-economic status (SES). 1 - 1st class (Upper), 2 - 2nd class (Middle), 3 - 3rd class (Lower).\n* ***Age*** - simply age of a passenger. It is fractional if it is a newborn child younger than 1, and if the age estimated, then it is in form of xx.5\n* ***Name*** = name of a passenger. It may seem that this column is totally useless. However, one might say that we can extract titles, since every name contains it (e.g. Mr., Mrs., etc.). It's just an hypothesis, that should be tested.\n* ***Sex*** - simply gender of a passenger\n* ***SibSp*** - siblings + spouse. Siblings - brother, sister, stepbrother, stepsister, etc. Spouce - husband, wife (mistresses and fiances were ignored)\n* ***Parch*** - parent + child\/ren. Parent - mother, father. Child - daughter, son, stepdaughter, stepson. Some children travelled only with a nanny, so Parch=0 for them. It can be an useful information. If there are a lot of children with parch=0, then it could been a new feature. It's just an hypothesis, that should be tested.\n* ***Ticket*** - ticket code\n* ***Fare*** - cost of a ticket\n* ***Embarked*** - town from which passenger embarked.\n","7da640c1":"It might be helpful to make a categorical feature out of Fare. For that we'll use quartiles"}}