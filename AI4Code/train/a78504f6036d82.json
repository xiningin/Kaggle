{"cell_type":{"2c268a74":"code","a31a0600":"code","03085809":"code","27765bbe":"code","03837060":"code","44d644fa":"code","22c4e9ee":"code","b5782153":"code","dbba96ba":"markdown","ca54373f":"markdown","e5e9a2d0":"markdown","9a64d774":"markdown","a88529a7":"markdown"},"source":{"2c268a74":"import numpy as np\nfrom keras.utils import np_utils\nfrom keras.datasets import fashion_mnist\n\n(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 10))\nfor i in range(5):\n    plt.subplot(1, 5, i+1)\n    plt.imshow(X_test[i]) \n    plt.axis('off')\nplt.show()\nprint('Labels: %s' % (y_test[0:5]))","a31a0600":"X_train=X_train.astype('float32')\nX_test=X_test.astype('float32')\nX_train\/=255\nX_test\/=255\n\nX_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32')\n\ny_train = np_utils.to_categorical(y_train, 10)\ny_test = np_utils.to_categorical(y_test, 10)","03085809":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Flatten, Reshape\nfrom keras.layers import Convolution2D, MaxPooling2D","27765bbe":"model = Sequential()\nmodel.add(Convolution2D(32, 3, 3, input_shape=(28, 28, 1)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Convolution2D(32, 3, 3))\nmodel.add(Activation('relu'))\n\nmodel.add(Convolution2D(32, 3, 3))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128))\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\n\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X_train, y_train, batch_size=32,epochs=10,validation_data=(X_test, y_test))","03837060":"print('Test accuracy without = ', model.evaluate(X_test, y_test))","44d644fa":"from keras.preprocessing.image import ImageDataGenerator\n\n#Data Augmentation\ndatagen = ImageDataGenerator(\n    featurewise_center=False,  \n    samplewise_center=False, \n    featurewise_std_normalization=False,\n    samplewise_std_normalization=False,  \n    zca_whitening=False,\n    rotation_range=50,\n    width_shift_range=0.01, \n    height_shift_range=0.01, \n    horizontal_flip=False, \n    vertical_flip=False)\n\ndatagen.fit(X_train)\n\nfrom matplotlib import pyplot as plt\n\ngen = datagen.flow(X_train[1:2], batch_size=1)\nfor i in range(1, 6):\n    plt.subplot(1,5,i)\n    plt.axis(\"off\")\n    plt.imshow(gen.next().squeeze())\n    plt.plot()\nplt.show()","22c4e9ee":"model.fit(X_train, y_train, batch_size=32,epochs=10, validation_data=(X_test, y_test))","b5782153":"print('Test accuracy with = ', model.evaluate(X_test, y_test))","dbba96ba":"# With Data Augmentation","ca54373f":"First, we will load the libraries and the dataset that is already divided into training and testing sets. Then we visualize the first 5 images in the training data set with their labels. Use the below code to the same.","e5e9a2d0":"## Model","9a64d774":"# Without Data Augmentation ","a88529a7":"We then normalize both pieces of training as well as testing data images and convert them into dimensions that are accepted by Keras. After that, we then convert labels to categorical values. Check the below code to do the same."}}