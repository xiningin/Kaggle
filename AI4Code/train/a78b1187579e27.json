{"cell_type":{"f8977073":"code","4751854e":"code","3788adac":"code","7a3fe5e2":"code","549186b6":"code","f7bdcb6d":"code","b2298bb2":"code","210372f9":"code","d8bba75b":"code","ccf9bb57":"code","1af4077e":"code","fee5efc3":"code","4c064109":"code","05ff39d0":"code","96848a08":"code","1c8e051a":"code","004f748c":"code","f28d8c1e":"code","ff55b0c1":"markdown","6a38bf8a":"markdown","1d75046e":"markdown","6f5c50b0":"markdown","3ce85d7d":"markdown","01167809":"markdown","d04223bb":"markdown","d7858038":"markdown"},"source":{"f8977073":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler","4751854e":"df= pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv\")\ndf.head()","3788adac":"df.describe()","7a3fe5e2":"#encoding categorical variable\ndf = pd.get_dummies(data = df, columns = ['model','transmission','fuelType'])\ndf.head()","549186b6":"X = df.drop(['price'], axis =1)\ny = df['price']","f7bdcb6d":"df.isnull().sum()","b2298bb2":"stats.shapiro(X)","210372f9":"stats.normaltest(X)","d8bba75b":"# Import library for VIF\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\ndef get_vif(X):\n\n    # Calculating VIF\n    vif = pd.DataFrame()\n    vif[\"variables\"] = X.columns\n    vif[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n\n    return(vif)","ccf9bb57":"get_vif(X)","1af4077e":"X_new= X.drop(['transmission_Semi-Auto','model_ X1','fuelType_Petrol','year'],axis = 1)","fee5efc3":"get_vif(X_new)","4c064109":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_new)\ny = (y -y.mean())\/y.std()","05ff39d0":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.25,\n                                                    random_state =42)","96848a08":"from sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nmodel_1 = LinearRegression()\nmodel_1.fit(X_train, y_train)\n\nmodel_2 = KNeighborsRegressor()\nmodel_2.fit(X_train, y_train)\n\nmodel_3 = RandomForestRegressor(n_estimators=50)\nmodel_3.fit(X_train, y_train)\n\nmodel_4 = XGBRegressor(objective='reg:linear')\nmodel_4.fit(X_train, y_train)","1c8e051a":"#calculating RMSE\ndef rmse(model):\n    y_train_pred = model.predict(X_train)\n    rmse_train = round(np.sqrt(mean_squared_error(y_train,y_train_pred)),3)\n    \n    y_test_pred = model.predict(X_test)\n    rmse_test = round(np.sqrt(mean_squared_error(y_test, y_test_pred)),3)\n    \n    print(\"train: \", rmse_train, \"test: \", rmse_test)    ","004f748c":"print(\"Accuracy on training set using Linear Regression: {:.2f}\".format(model_1.score(X_train,y_train)))\nprint(\"Accuracy on testing set using Linear Regression: {:.2f}\".format(model_1.score(X_test,y_test)))\n\n\nprint(\"Accuracy on training set using Random Forest Regression: {:.2f}\".format(model_3.score(X_train,y_train)))\nprint(\"Accuracy on testing set using Random Forest Regression: {:.2f}\".format(model_3.score(X_test,y_test)))\n\nprint(\"Accuracy on training set using KNeighborsRegression: {:.2f}\".format(model_2.score(X_train,y_train)))\nprint(\"Accuracy on testing set using KNeighborsRegression: {:.2f}\".format(model_2.score(X_test,y_test)))\n\n\nprint(\"Accuracy on training set using XGBoostRegression: {:.2f}\".format(model_4.score(X_train,y_train)))\nprint(\"Accuracy on testing set using XGBoostRegression: {:.2f}\".format(model_4.score(X_test,y_test)))\n","f28d8c1e":"rmse(model_4)","ff55b0c1":"No missing values","6a38bf8a":"## Checking VIF for multi collinearity","1d75046e":"data is not normally distributed since p value is less than alpha so null hypothesis that data is normally distributed is rejected.","6f5c50b0":"## Build the model","3ce85d7d":"## Understanding dataset","01167809":"## Check for missing values","d04223bb":"## Standardization of X and y","d7858038":"## Checking Normality assumption"}}