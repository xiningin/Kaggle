{"cell_type":{"0aa874b7":"code","64812a11":"code","ea766e27":"code","766ff305":"code","ea4ab715":"code","a3987711":"code","639b30a4":"code","abd3b8c5":"code","b9ab4237":"code","85a36aa5":"code","ff7f807b":"code","f98b6e2b":"code","fe80e2e6":"code","784b92e8":"code","53110861":"code","d7520618":"code","434299a9":"code","f85c5251":"code","81ed1e76":"markdown","3364ba7d":"markdown","0a99829d":"markdown","a4396bb7":"markdown","4983fb2d":"markdown","88e0120b":"markdown","c6221255":"markdown","fdf9c35b":"markdown","048d577e":"markdown","f6e3a7c2":"markdown","0af1b20b":"markdown","bd69d016":"markdown","07e3aeba":"markdown","69feca2b":"markdown"},"source":{"0aa874b7":"# This is first notebook of the journey to the world of opencv, I will post the link for the consecutive \n# notebooks in comment section","64812a11":"import cv2\nimport numpy as np\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport datetime","ea766e27":"\n# Read Image with Cv2, You can give path of image here\nimg = cv2.imread('logo.png')\n\n# Get shape of image\ndimention = img.shape\nprint(f'Dimention of image are (h, w,channels) = {dimention}' )\n\n# Total Number of elements\nsize = img.size\nprint(f'Total Number of elements = {size}')\n\n# Let's show the image\ncv2.imshow('Original Image', img)\n\n# Pop up will appear, now we need to see that popup so , Add waitkey\n# As we know imag is read as BGR, To access any pixel, let's say x = 10, y = 20\n\n(b,g,r) = img[20, 10]\nprint(f'value of B G R are {b} {g} {r}')\n\n# Let's get top left corner of image\nimg_top_left = img[:50, :50]\n\ncv2.imshow('Top_left', img_top_left)\ncv2.waitKey(0)","766ff305":"# Initiating connection with webcam \ncapture = cv2.VideoCapture(0)","ea4ab715":"# Need to check is connection established or not, Perfect we are connected to webcam\nwhile capture.isOpened():\n    # Capture frame by frame and then we will show.\n    ret, frame = capture.read()\n    if ret:\n        cv2.imshow('Image from webcam', frame)\n        \n        grey_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n        \n        cv2.imshow('Grey Image', grey_frame)\n        \n        if cv2.waitKey(20) & 0xFF == ord('q'):\n            break\n    else:\n        break\ncapture.release()\ncv2.destroyAllWindows()","a3987711":"# We predifined the colors here\ncolors = {'blue': (255, 0, 0), 'green': (0, 255, 0), 'red': (0, 0, 255), 'yellow':\n(0, 255, 255), 'magenta': (255, 0, 255), 'cyan': (255, 255, 0), 'white': (255, 255,\n255), 'black': (0, 0, 0), 'gray': (125, 125, 125), 'rand': np.random.randint(0,\nhigh=256, size=(3,)).tolist(), 'dark_gray': (50, 50, 50), 'light_gray': (220, 220,220)}","639b30a4":"# Function will take array and convert it into the RGB, and display it using matplotlib \ndef show_with_matplotlib(img, image_name):\n    plt.figure(figsize = (6,12),)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.title(image_name)\n    plt.imshow(img)","abd3b8c5":"# This will create black background for us\nimage  = np.zeros((400,400, 3), dtype = 'uint8')\n\n# Let's fill with gray color\nimage[:] = colors['gray']\ncv2.line(image, (0,0), (400,400), color =colors['green'], thickness=5,lineType = 8)\ncv2.line(image, (350,0), (400,400), color =colors['green'], thickness=5,lineType = 8)\n\nshow_with_matplotlib(image, 'cv2_Line')","b9ab4237":"img = np.zeros((500,500,3), dtype = 'uint8')\nimg[:] = colors['gray']","85a36aa5":"cv2.rectangle(img, (10,10), (30,400), color = colors['blue'], thickness=-1) #  put thickness -1 to fill the shape with color\n\ncv2.rectangle(img, (100,10), (300,400), color = colors['red'], thickness=10)\n\nshow_with_matplotlib(img, 'Recttangle')","ff7f807b":"img = np.zeros((500,500,3), dtype = 'uint8')\nimg[:] = colors['gray']","f98b6e2b":"cv2.circle(img, (250,250),250, color = colors['blue'])\n\nshow_with_matplotlib(img, 'Circle')","fe80e2e6":"img = np.zeros((500,500,3), dtype = 'uint8')\nimg[:] = colors['gray']","784b92e8":"cv2.arrowedLine(img, (10,10), (100,400),color = colors['red'], thickness = 5, line_type = 8)\nshow_with_matplotlib(img, 'Arrow')","53110861":"img = np.zeros((500,500,3), dtype = 'uint8')\nimg[:] = colors['gray']","d7520618":"img.fill(255)\ncv2.putText(img, 'Basics of OpenCv', (10,30), cv2.FONT_HERSHEY_COMPLEX, 0.9, colors['red'],2, 4)\n\nshow_with_matplotlib(img, 'Put Text')","434299a9":"img = np.zeros((500,500,3), dtype = 'uint8')\n# img[:] = colors['gray']\n# img.fill(255)\n# cv2.imshow('Image mouse', img)\ncv2.namedWindow('Image mouse')\ndef draw_circle(event, x,y,flags, param):\n    if event == cv2.EVENT_LBUTTONDBLCLK:\n        cv2.circle(img, (x, y), 10, colors['red'], -1)\n        \n    if event == cv2.EVENT_MOUSEMOVE:\n        cv2.circle(img, (x, y), 1, colors['red'], -1)\n        print(\"event: EVENT_MOUSEMOVE\")\n    if event == cv2.EVENT_LBUTTONUP:\n        print(\"event: EVENT_LBUTTONUP\")\n    if event == cv2.EVENT_LBUTTONDOWN:\n        print(\"event: EVENT_LBUTTONDOWN\")\n\ncv2.setMouseCallback('Image mouse', draw_circle)\n\nwhile True:\n    cv2.imshow('Image mouse', img)\n    \n    if cv2.waitKey(20) & 0xFF== ord('q'):\n        break\ncv2.destroyAllWindows()","f85c5251":"img = np.zeros((700,700,3), dtype = 'uint8')\nimg[:] = colors['gray']\ncv2.circle(img, (350,350), 5, color = colors['black'], thickness = -1)\ncv2.circle(img, (350,350), 330, color = colors['black'], thickness = 2)\n\ncv2.putText(img, 'Welcome To CV', \n            (200,100), cv2.FONT_HERSHEY_COMPLEX, 0.9, colors['black'],2, 4)\nconstant = 350\nr = 330\nfor i in range(12):\n    x = constant + r* math.cos((-270-(30*i))*(np.pi\/180))\n    y = constant + r* math.sin((-270-(30*i))*(np.pi\/180))\n    cv2.circle(img, (int(x),int(y)), 4, color = colors['black'], thickness = -1)\n\nimage = img.copy()\nwhile True:\n    sec = datetime.datetime.now().second\n    mini = datetime.datetime.now().minute\n    hour = datetime.datetime.now().hour\n    if hour >12:\n        hour = hour-12\n        \n    # Below line will give us x and y co-ordinate on the outer circle\n    x_sec = round(constant + (r-40)* math.cos((-90+(6*sec))*(np.pi\/180)))\n    y_sec = round(constant + (r-40)* math.sin((-90+(6*sec))*(np.pi\/180)))\n    \n    x_min = round(constant + (r-60)* math.cos((-90+(6*mini))*(np.pi\/180)))\n    y_min = round(constant + (r-60)* math.sin((-90+(6*mini))*(np.pi\/180)))\n  \n    x_hour = round(constant + (r-100)* math.cos((-90+(30*hour))*(np.pi\/180)))\n    y_hour = round(constant + (r-100)* math.sin((-90+(30*hour))*(np.pi\/180)))\n    \n    # These line will create hour, minute, second on the gray image \n    cv2.line(img, (350,350),(x_sec, y_sec), color = colors['red'],thickness = 2)\n    cv2.line(img, (350,350),(x_min, y_min), color = colors['red'],thickness = 4)\n\n    cv2.line(img, (350,350),(x_hour, y_hour), color = colors['red'],thickness = 8)\n\n    cv2.imshow('Image', img)\n    img = image.copy()\n    if cv2.waitKey(500) & 0xFF == ord('q'):\n        break\ncv2.destroyAllWindows() ","81ed1e76":"![image.png](attachment:0d1c2675-6724-438f-a46d-045689a828fe.png)","3364ba7d":"### Draw rectangle  \n<a id='rectangle'><\/a>","0a99829d":"## Read Image  \n<a id='readimage'><\/a>","a4396bb7":"## Construction Basic Shapes  \n<a id='basicshape'><\/a>","4983fb2d":"![logo.png](attachment:683fe1c5-fd39-4057-80f7-c91b0897513e.png)","88e0120b":"# Table Of content  \n* [Reading Image](#readimage)\n* [Reading From Webcam](#readwebcam)  \n* [Creating Basic Shapes](#basicshape)  \n  * [Draw Line](#line)  \n  * [Draw Rectangle](#rectangle)  \n  * [Draw Circle](#circle)  \n  * [Draw Arrowline](#arrowline)  \n  * [Write Textbox](#text)  \n  * [Dynamic shape with mouse](#mouse)  \n* [Application of what we learn so far Analog Watch](#analogwatch)","c6221255":"## Application of what we learn so far - Analog Watch  \n<a id='analogwatch'><\/a>","fdf9c35b":"### Draw Circle  \n<a id='circle'><\/a>","048d577e":"### Draw Arrowline  \n<a id='arrowline'><\/a>","f6e3a7c2":"![image.png](attachment:dc22daea-a74b-472e-9153-7e0554501bbd.png)","0af1b20b":"## Reading webcamera  \n<a id='readwebcam'><\/a>","bd69d016":"### Writing Text  \n<a id='text'><\/a>","07e3aeba":"### Dynamic Drawing Using Mouse  \n<a id='mouse'><\/a>","69feca2b":"### Draw line  \n<a id='line'><\/a>"}}