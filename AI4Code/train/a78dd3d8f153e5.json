{"cell_type":{"cab47143":"code","52456624":"code","16bcbf9a":"code","30ef8e3d":"code","c429623f":"code","9b2a9ce2":"code","0e46b1fb":"code","6fff8aab":"code","b6737669":"code","52af7314":"code","86d87be9":"code","260fa7e0":"code","7869523f":"code","8a359337":"code","1e634f23":"code","fdad1a77":"code","a4af157f":"code","1da7528d":"code","e86f2a13":"code","e946d120":"code","280ed621":"code","3a8a3e29":"code","bba41f30":"code","097fdb5a":"code","839c2da2":"code","e604b54f":"code","3ede0421":"code","65a75475":"code","6579423d":"code","327dce66":"code","ec79c049":"code","e148f902":"code","19d589e6":"code","600dcd4e":"code","f90862d4":"code","a8a0ed4c":"code","ab30c972":"code","cb3abdbd":"code","9d32854d":"code","d2272d32":"code","c1de9b9a":"code","de35e3e7":"code","d021ca86":"code","87d1265b":"code","c21eb355":"code","4f9412de":"code","138bb50b":"code","3aefb8e0":"code","4073f0dc":"code","1b845a8f":"code","874d220b":"code","a7744ea5":"code","cb2056ef":"code","6cb996f9":"code","fbb56406":"code","f5482c20":"code","b19e1bf6":"markdown","f5cad85f":"markdown","e8e1c4d8":"markdown","3a4a524e":"markdown","d9233602":"markdown","18cf2be6":"markdown","8afb2c96":"markdown"},"source":{"cab47143":"import pandas as pd\nimport sklearn\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport copy as cp\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom statistics import mode","52456624":"trainData = pd.read_csv(\"..\/input\/train.csv\", header=0, index_col=0, na_values=\"?\")\ntestData = pd.read_csv(\"..\/input\/test.csv\", header=0, index_col=0, na_values=\"?\")","16bcbf9a":"trainData.shape","30ef8e3d":"trainData[\"lugar\"] = 0\nlugares = {\"lugar1\":1,\"lugar2\":2,\"lugar3\":3,\"lugar4\":4,\"lugar5\":5,\"lugar6\":6}\n\nfor key,value in lugares.items():\n    trainData.loc[trainData[key]==1,\"lugar\"] = value\n    testData.loc[testData[key]==1,\"lugar\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","c429623f":"trainData[\"lugar\"].value_counts().plot(kind=\"pie\")","9b2a9ce2":"trainData[\"tipovivi\"] = 0\ntipovivi = {\"tipovivi1\":1,\"tipovivi2\":2,\"tipovivi3\":3,\"tipovivi4\":4,\"tipovivi5\":5}\n\nfor key,value in tipovivi.items():\n    trainData.loc[trainData[key]==1,\"tipovivi\"] = value\n    testData.loc[testData[key]==1,\"tipovivi\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","0e46b1fb":"trainData[\"tipovivi\"].value_counts().plot(kind=\"pie\")","6fff8aab":"trainData[\"instlevel\"] = 0\ninstlevel = {\"instlevel1\":1,\"instlevel2\":2,\"instlevel3\":3,\"instlevel4\":4,\"instlevel5\":5,\"instlevel6\":6,\"instlevel7\":7,\"instlevel8\":8,\"instlevel9\":9}\n\nfor key,value in instlevel.items():\n    trainData.loc[trainData[key]==1,\"instlevel\"] = value\n    testData.loc[testData[key]==1,\"instlevel\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","b6737669":"trainData[\"instlevel\"].value_counts().plot(kind=\"bar\")","52af7314":"trainData[\"parede\"] = 0\nparede = {\"paredblolad\":1,\"paredzocalo\":2,\"paredpreb\":3,\"pareddes\":4,\"paredmad\":5,\"paredzinc\":6,\"paredfibras\":7,\"paredother\":8}\n\nfor key,value in parede.items():\n    trainData.loc[trainData[key]==1,\"parede\"] = value\n    testData.loc[testData[key]==1,\"parede\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","86d87be9":"trainData[\"parede\"].value_counts().plot(kind=\"bar\")","260fa7e0":"trainData[\"piso\"] = 0\npiso = {\"pisomoscer\":1,\"pisocemento\":2,\"pisoother\":3,\"pisonatur\":4,\"pisonotiene\":5,\"pisomadera\":6}\n\nfor key,value in piso.items():\n    trainData.loc[trainData[key]==1,\"piso\"] = value\n    testData.loc[testData[key]==1,\"piso\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","7869523f":"trainData[\"piso\"].value_counts().plot(kind=\"bar\")","8a359337":"trainData[\"techo\"] = 0\ntecho = {\"techozinc\":1,\"techoentrepiso\":2,\"techocane\":3,\"techootro\":4}\n\nfor key,value in techo.items():\n    trainData.loc[trainData[key]==1,\"techo\"] = value\n    testData.loc[testData[key]==1,\"techo\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","1e634f23":"trainData[\"techo\"].value_counts().plot(kind=\"bar\")","fdad1a77":"trainData[\"abastagua\"] = 0\nabastagua = {\"abastaguadentro\":1,\"abastaguafuera\":2,\"abastaguano\":3}\n\nfor key,value in abastagua.items():\n    trainData.loc[trainData[key]==1,\"abastagua\"] = value\n    testData.loc[testData[key]==1,\"abastagua\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","a4af157f":"trainData[\"abastagua\"].value_counts().plot(kind=\"bar\")","1da7528d":"trainData[\"elec\"] = 0\nelec = {\"public\":1,\"planpri\":2,\"noelec\":3, \"coopele\":4}\n\nfor key,value in elec.items():\n    trainData.loc[trainData[key]==1,\"elec\"] = value\n    testData.loc[testData[key]==1,\"elec\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","e86f2a13":"trainData[\"elec\"].value_counts().plot(kind=\"bar\")","e946d120":"trainData[\"sanitario\"] = 0\nsanitario = {\"sanitario1\":1,\"sanitario2\":2,\"sanitario3\":3,\"sanitario5\":5,\"sanitario6\":6}\n\nfor key,value in sanitario.items():\n    trainData.loc[trainData[key]==1,\"sanitario\"] = value\n    testData.loc[testData[key]==1,\"sanitario\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","280ed621":"trainData[\"sanitario\"].value_counts().plot(kind=\"bar\")","3a8a3e29":"trainData[\"energcocinar\"] = 0\nenergcocinar = {\"energcocinar1\":1,\"energcocinar2\":2,\"energcocinar3\":3,\"energcocinar4\":4}\n\nfor key,value in energcocinar.items():\n    trainData.loc[trainData[key]==1,\"energcocinar\"] = value\n    testData.loc[testData[key]==1,\"energcocinar\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","bba41f30":"trainData[\"energcocinar\"].value_counts().plot(kind=\"bar\")","097fdb5a":"trainData[\"elimbasu\"] = 0\nelimbasu = {\"elimbasu1\":1,\"elimbasu2\":2,\"elimbasu3\":3,\"elimbasu4\":4,\"elimbasu5\":5,\"elimbasu6\":6}\n\nfor key,value in elimbasu.items():\n    trainData.loc[trainData[key]==1,\"elimbasu\"] = value\n    testData.loc[testData[key]==1,\"elimbasu\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","839c2da2":"trainData[\"elimbasu\"].value_counts().plot(kind=\"bar\")","e604b54f":"trainData[\"epared\"] = 0\nepared = {\"epared1\":1,\"epared2\":2,\"epared3\":3}\n\nfor key,value in epared.items():\n    trainData.loc[trainData[key]==1,\"epared\"] = value\n    testData.loc[testData[key]==1,\"epared\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","3ede0421":"trainData[\"epared\"].value_counts().plot(kind=\"pie\")","65a75475":"trainData[\"etecho\"] = 0\netecho = {\"etecho1\":1,\"etecho2\":2,\"etecho3\":3}\n\nfor key,value in etecho.items():\n    trainData.loc[trainData[key]==1,\"etecho\"] = value\n    testData.loc[testData[key]==1,\"etecho\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","6579423d":"trainData[\"etecho\"].value_counts().plot(kind=\"pie\")","327dce66":"trainData[\"eviv\"] = 0\neviv = {\"eviv1\":1,\"eviv2\":2,\"eviv3\":3}\n\nfor key,value in eviv.items():\n    trainData.loc[trainData[key]==1,\"eviv\"] = value\n    testData.loc[testData[key]==1,\"eviv\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","ec79c049":"trainData[\"eviv\"].value_counts().plot(kind=\"pie\")","e148f902":"trainData[\"sex\"] = 0\nsex = {\"male\":1,\"female\":2}\n\nfor key,value in sex.items():\n    trainData.loc[trainData[key]==1,\"sex\"] = value\n    testData.loc[testData[key]==1,\"sex\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","19d589e6":"trainData[\"sex\"].value_counts().plot(kind=\"bar\")","600dcd4e":"trainData[\"estadocivil\"] = 0\nestadocivil = {\"estadocivil1\":1,\"estadocivil2\":2,\"estadocivil3\":3,\"estadocivil4\":4,\"estadocivil5\":5,\"estadocivil6\":6,\"estadocivil7\":7}\n\nfor key,value in estadocivil.items():\n    trainData.loc[trainData[key]==1,\"estadocivil\"] = value\n    testData.loc[testData[key]==1,\"estadocivil\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","f90862d4":"trainData[\"estadocivil\"].value_counts().plot(kind=\"pie\")","a8a0ed4c":"trainData[\"parentesco\"] = 0\nparentesco = {\"parentesco1\":1,\"parentesco2\":2,\"parentesco3\":3,\"parentesco4\":4,\"parentesco5\":5,\"parentesco6\":6,\"parentesco7\":7,\"parentesco8\":8,\"parentesco9\":9,\"parentesco10\":10,\"parentesco11\":11,\"parentesco12\":12}\n\nfor key,value in parentesco.items():\n    trainData.loc[trainData[key]==1,\"parentesco\"] = value\n    testData.loc[testData[key]==1,\"parentesco\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","ab30c972":"trainData[\"parentesco\"].value_counts().plot(kind=\"bar\")","cb3abdbd":"trainData[\"area\"] = 0\narea = {\"area1\":1,\"area2\":2}\n\nfor key,value in area.items():\n    trainData.loc[trainData[key]==1,\"area\"] = value\n    testData.loc[testData[key]==1,\"area\"] = value\n    trainData.drop(columns=key, inplace=True)\n    testData.drop(columns=key, inplace=True)","9d32854d":"trainData[\"area\"].value_counts().plot(kind=\"pie\")","d2272d32":"trainData.head()","c1de9b9a":"columnsToDrop = ['idhogar']\n\nfor i in range(len(trainData.columns)):\n    if trainData.iloc[:,i].isnull().sum() > 1000:\n        columnsToDrop.append(trainData.columns[i])\n        \ncolumnsToDrop","de35e3e7":"for i in range(len(columnsToDrop)):\n    trainData.drop(columnsToDrop[i], axis=1, inplace=True)\n    testData.drop(columnsToDrop[i], axis=1, inplace=True)","d021ca86":"trainData.dropna(inplace=True)\ntestData.dropna(inplace=True)","87d1265b":"trainData.loc[trainData[\"edjefe\"]=='no' ,\"edjefe\"] = '0'\ntrainData.loc[trainData[\"edjefe\"]=='yes',\"edjefe\"] = '1'\ntrainData.loc[trainData[\"edjefa\"]=='no' ,\"edjefa\"] = '0'\ntrainData.loc[trainData[\"edjefa\"]=='yes',\"edjefa\"] = '1'\ntrainData.loc[trainData[\"dependency\"]=='no' ,\"dependency\"] = '0'\ntrainData.loc[trainData[\"dependency\"]=='yes',\"dependency\"] = '1'\n\ntestData.loc[testData[\"edjefe\"]=='no' ,\"edjefe\"] = '0'\ntestData.loc[testData[\"edjefe\"]=='yes',\"edjefe\"] = '1'\ntestData.loc[testData[\"edjefa\"]=='no' ,\"edjefa\"] = '0'\ntestData.loc[testData[\"edjefa\"]=='yes',\"edjefa\"] = '1'\ntestData.loc[testData[\"dependency\"]=='no' ,\"dependency\"] = '0'\ntestData.loc[testData[\"dependency\"]=='yes',\"dependency\"] = '1'","c21eb355":"trainData.head()","4f9412de":"minmaxscaler = MinMaxScaler()\n\ntrainDataX = trainData.drop(columns=\"Target\", inplace=False)\ntrainDataX = minmaxscaler.fit_transform(trainDataX)\n\ntestDataX  = testData\ntestDataX  = minmaxscaler.transform(testDataX)\n\ntrainDataY = trainData[\"Target\"]","138bb50b":"meanScoreManhattan = np.zeros(50)\nstdScoreManhattan  = np.zeros(50)\nfor k in range(1,51):\n    classifier = KNeighborsClassifier(n_neighbors=k, p=1)\n    score = cross_val_score(classifier, trainDataX, trainDataY, cv=10)\n    meanScoreManhattan[k-1] = np.mean(score)\n    stdScoreManhattan[k-1]  = np.std(score)\n    \nnp.amax(meanScoreManhattan)","3aefb8e0":"meanScoreEuclidean = np.zeros(50)\nstdScoreEuclidean  = np.zeros(50)\nfor k in range(1,51):\n    classifier = KNeighborsClassifier(n_neighbors=k, p=2)\n    score = cross_val_score(classifier, trainDataX, trainDataY, cv=10)\n    meanScoreEuclidean[k-1] = np.mean(score)\n    stdScoreEuclidean[k-1]  = np.std(score)\n    \nnp.amax(meanScoreEuclidean)","4073f0dc":"if np.amax(meanScoreManhattan) > np.amax(meanScoreEuclidean):\n    chosenK = np.argmax(meanScoreManhattan)+1\n    chosenP = 1\nelse:\n    chosenK = np.argmax(meanScoreEuclidean)+1\n    chosenP = 2\n    \nchosenK","1b845a8f":"chosenP","874d220b":"plt.errorbar(range(1,51), meanScoreManhattan, yerr=1.96*np.array(stdScoreManhattan), fmt='-o')","a7744ea5":"plt.errorbar(range(1,51), meanScoreEuclidean, yerr=1.96*np.array(stdScoreEuclidean), fmt='-o')","cb2056ef":"classifier = KNeighborsClassifier(n_neighbors=chosenK,p=chosenP)\nclassifier.fit(trainDataX,trainDataY)","6cb996f9":"predictedData = classifier.predict(testDataX)\npredictedData","fbb56406":"output = pd.DataFrame(testData.index)\noutput[\"Target\"] = predictedData\noutput","f5482c20":"output.to_csv(\"PMR3508_MarcusPavani_HouseholdIncome.csv\", index=False)","b19e1bf6":"## Visualize the Training data","f5cad85f":"## Cross validation of k","e8e1c4d8":"PMR3508 - Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es\n\nTestando kNN com a base HouseholdIncome.\n\nAutor: Marcus Pavani\n\nData: 30\/08\/2018","3a4a524e":"## Load data","d9233602":"# Definition of the classifier","18cf2be6":"## Adjust scale","8afb2c96":"# Imports"}}