{"cell_type":{"aa9d5343":"code","c1478aaa":"code","dc68aea1":"code","6830be54":"code","41a9367d":"code","8a1c0614":"code","7d425612":"code","803d8d09":"code","eedbd27c":"code","ebc46d36":"code","6f6644da":"code","cbf27fc3":"code","6ba203ce":"code","c86fc053":"code","8d42976f":"code","a9da6941":"code","61a74697":"code","dc442f2c":"code","308e824f":"code","947e27ed":"code","60b87c62":"code","89abd53a":"markdown","41ad537b":"markdown","a69594b5":"markdown","4930f305":"markdown","28c4dd0a":"markdown"},"source":{"aa9d5343":"import seaborn as sns\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","c1478aaa":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dc68aea1":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","6830be54":"usecols = ['dt_iso', 'temp', 'temp_min', 'temp_max', 'pressure', 'humidity', 'wind_speed', 'wind_deg', \n           'clouds_all', 'weather_main', 'weather_description']\ndf = pd.read_csv('..\/input\/openweatherdata-denpasar-1990-2020v0.1.csv', parse_dates=True, index_col='dt_iso', usecols=usecols)\ndf['date'] = df.index\ndf = df[['date', 'temp', 'temp_min', 'temp_max', 'pressure', 'humidity', 'wind_speed', 'wind_deg', \n           'clouds_all', 'weather_main', 'weather_description']]\ndf.info()","41a9367d":"df.head(5)","8a1c0614":"print(df['weather_main'].value_counts())\nplt.figure(1, figsize=(8, 6))\nsns.countplot(y='weather_main', data=df)\nplt.show()","7d425612":"print(df['weather_description'].value_counts())\nplt.figure(1, figsize=(7,15))\nsns.countplot(y='weather_description', data=df)\nplt.show()","803d8d09":"# Function to resampling time series data\ndef data_resample(data, time):\n    \"\"\"\n    data: Dataframe\n    time: Resampling frequencies\n    \"\"\"\n    if time == 'hourly':\n        data = data.resample('H').mean() # hour\n    elif time == 'daily':\n        data = data.resample('D').mean() # day\n    elif time == 'weekly':\n        data = data.resample('W').mean() # week\n    elif time == 'monthly':\n        data = data.resample('M').mean() # month\n    elif time == 'quarterly':\n        data = data.resample('Q').mean() # quarter\n    elif time == 'yearly':\n        data = data.resample('A').mean() # year\n    \n    return data","eedbd27c":"def line_plot(data, plot_kind, xlabel, title):\n    plt.figure(1, figsize=(12, 5))\n    data.plot(kind=plot_kind)\n    plt.xlabel(xlabel)\n    plt.title(title)\n    plt.show()","ebc46d36":"line_plot(data_resample(df.loc['1990':'2019']['temp'], 'yearly'), 'line', 'year', 'Yearly Temperature Data')\nline_plot(data_resample(df.loc['1990':'2019']['temp'], 'monthly'), 'line', 'year', 'Montly Temperature Data')\nline_plot(data_resample(df.loc['1990':'2019']['temp'], 'weekly'), 'line', 'year', 'Weekly Temperature Data')","6f6644da":"from scipy import stats\n\nindex = 0\ndt_col = ['temp', 'pressure', 'humidity', 'wind_speed']\nlabel = ['Temperature', 'Pressure', 'Humidity', 'Wind Speed']\nplt.figure(1, figsize=(15,9))\nfor subplot in range(221, 225):\n    plt.subplot(subplot)\n    sns.distplot(df[dt_col[index]], kde=False, fit=stats.gamma)\n    plt.xlabel(label[index], fontweight='bold')\n    index += 1\nplt.tight_layout()    \nplt.show()","cbf27fc3":"index = 0\nweather_col = ['wind_deg', 'clouds_all']\nplt.figure(1, figsize=(15,9))\nfor subplot in range(221, 223):\n    plt.subplot(subplot)\n    sns.distplot(df[weather_col[index]], kde=False, fit=stats.gamma)\n    plt.title(weather_col[index], fontweight='bold')\n    index += 1\n    \nplt.show()","6ba203ce":"# Check for stationarity\nplt.figure(1, figsize=(15,6))\ndf['temp'].plot() # plot hourly data for 20 years","c86fc053":"index = 0\nresample_time = ['yearly', 'monthly', 'weekly', 'daily']\nplt.figure(1, figsize=(15,9))\nfor subplot in range(221, 225):\n    plt.subplot(subplot)\n    dt = data_resample(df['temp'], resample_time[index])\n    plt.plot(dt)\n    plt.title(resample_time[index], fontweight='bold')\n    index = index + 1\n    \nplt.show()","8d42976f":"df_temp = data_resample(df['temp'].loc['1990':'2019'], 'daily')\ndf_temp.head()","a9da6941":"from statsmodels.tsa.stattools import adfuller\n\ndef adf_test(timeseries):\n    print('Results of Dickey-Fuller Test:')\n    df_test = adfuller(timeseries, autolag='AIC')\n    df_output = pd.Series(df_test[0:4], index=['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])\n    for key, value in df_test[4].items():\n        df_output['Critical Value (%s)' % key] = value\n    print(df_output)\n    \n# Apply ADF Test\nadf_test(df_temp)","61a74697":"from statsmodels.tsa.stattools import kpss\n\ndef kpss_test(timeseries):\n    print('Results of KPSS Test:')\n    kpss_test = kpss(timeseries, regression='c')\n    kpss_output = pd.Series(kpss_test[0:3], index=['Test Statistic', 'p-value', 'Lag Used'])\n    for key, value in kpss_test[3].items():\n        kpss_output['Critical Value (%s)' % key] = value\n        \n    print(kpss_output)\n    \n# Apply KPSS Test\nkpss_test(df_temp)","dc442f2c":"def test_stationarity(timeseries, info):\n    \"\"\"\n    timeseries: pandas time series\n    info: resampling information, (hourly, daily, weekly, monthly, quarterly, yearly)\n    \"\"\"\n    \n    # Determining rolling statistics\n    windowsize = 24\n    rolmean = timeseries.rolling(windowsize).mean()\n    rolstd = timeseries.rolling(windowsize).mean()\n    \n    # Plot rolling statistics:\n    orig = plt.plot(timeseries, color='yellow', label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation ' + info)\n    plt.show(block=False)\n    \n    # Perform Dickey-Fuller Test:\n    adf_test(timeseries)\n    \n    print('\\n')\n    \n    # Perform KPSS Test:\n    kpss_test(timeseries)","308e824f":"df_temp = data_resample(df.loc['1990':'2019']['temp'], 'hourly')\ntest_stationarity(df_temp, 'Monthly')","947e27ed":"df_diff = df_temp - df_temp.shift(1)\ndf_temp['diff'] = df_diff\ndf_temp['diff'].dropna().plot()","60b87c62":"df_temp = data_resample(df['temp'].loc['1990':'2019'], 'daily')\ndf_temp.head()","89abd53a":"### 1.2 Number of Weather Description","41ad537b":"### 1.3 Line Plot","a69594b5":"## 1. Data Visualization","4930f305":"### 2.1 Check the data stationarity visualy","28c4dd0a":"### 1.4 Histogram"}}