{"cell_type":{"a7e0e871":"code","90fc5457":"code","bc160fea":"code","49d4fea3":"code","f2e1504d":"code","69a67a59":"code","f7085a12":"code","a37b0308":"code","2581103b":"code","2dd525c0":"code","01adda30":"code","ba8c268b":"code","3a892587":"code","5a1430f8":"code","ba9ad912":"markdown","041cdc6f":"markdown","faed1478":"markdown","1e809e76":"markdown","e2895728":"markdown"},"source":{"a7e0e871":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics","90fc5457":"df_train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ndf_test = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\nprint(df_test)\ndf_train.head()\ndf_test.head()","bc160fea":"df_train.drop(['date_block_num','item_price'], axis=1, inplace=True)\ndf_train.info()\nprint(df_train['shop_id'])\ndf_train['date'] = pd.to_datetime(df_train['date'], dayfirst=True)\ndf_train['date'] = df_train['date'].apply(lambda x: x.strftime('%Y-%m'))\ndf_train.head()\n","49d4fea3":"X = df_train.groupby(['date','shop_id','item_id']).sum()\nX = X.pivot_table(index=['shop_id','item_id'], columns='date', values='item_cnt_day', fill_value=0)\nX.reset_index(inplace=True)\nX.head()","f2e1504d":"X_t = pd.merge(df_test, X, on=['shop_id','item_id'], how='left')\nX_t.drop(['ID'], axis=1, inplace=True)\nu = X_t.select_dtypes(exclude=['datetime'])\nX_t[u.columns] = u.fillna(0)\nX_t.head()","69a67a59":"Y = X['2015-10'].values\nX_T = X.drop(['2015-10'], axis = 1)\nX_t = X_t.drop(['2015-10'], axis = 1)\nprint(X_T.shape, Y.shape)\nprint(X_t.shape)","f7085a12":"corrmat = X_t.corr()\nsns.heatmap(corrmat,square= True)\nk = 35\ncols = corrmat.nlargest(k, '2015-09')['2015-09'].index\ncm = np.corrcoef(X_t[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 5},yticklabels=cols.values, xticklabels=cols.values)\nplt.tick_params(labelsize=8)\nplt.show()","a37b0308":"def print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    print('__________________________________')\n    \ndef evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    return mae, mse, rmse, r2_square","2581103b":"x_train, x_val, y_train, y_val = train_test_split(X_T, Y, test_size=0.2, random_state=3)\nprint(x_train.shape,y_train.shape)\nprint(x_val.shape,y_val.shape)","2dd525c0":"RF_reg = RandomForestRegressor(n_estimators = 100)\nRF_reg.fit(x_train, y_train)","01adda30":"val_pred = RF_reg.predict(x_val)\ntrain_pred = RF_reg.predict(x_train)\nprint(val_pred)\nprint(train_pred)\nprint_evaluate(y_val, val_pred)\nprint_evaluate(y_train, train_pred)","ba8c268b":"test_pred = RF_reg.predict(X_t)\nprint('prediction for test data:',test_pred)\nprint(test_pred.shape)","3a892587":"x = np.array(df_test)\nprint(x)\nprint(test_pred)\nplt.plot(x[:,0:1],test_pred)\nplt.show()","5a1430f8":"submission = pd.DataFrame({\n    'ID':df_test['ID'],\n    'item_cnt_month':test_pred\n})\nsubmission.to_csv('submission.csv', index=False)\nprint(submission)\nsubmission.head()","ba9ad912":"#  Data Pre-Processing ","041cdc6f":"#  Import the Packages","faed1478":"#  Submission","1e809e76":"#  Modeling for Prediction","e2895728":"#  Correlation Analysis"}}