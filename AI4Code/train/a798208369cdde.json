{"cell_type":{"df9b6f56":"code","83e73c5f":"code","6ac220b9":"code","32580065":"code","6d7e7fcd":"code","67afe633":"code","6b1f5cda":"code","6bb3dff3":"code","d0b8d478":"code","7e749c8a":"code","5e12159d":"code","d0cad2f3":"code","d5f24d32":"code","c9a80422":"code","2f1e472c":"code","ab1692d0":"code","82e9df27":"code","1a002445":"code","1af2e7a2":"code","55b23e5b":"code","6ae03e7c":"code","91a54b30":"code","6ef28d09":"markdown","09f1f2a6":"markdown","96773d75":"markdown","8ecdaf7d":"markdown","848c5eb9":"markdown","48a4a049":"markdown","145e3692":"markdown"},"source":{"df9b6f56":"!pip install dataprep","83e73c5f":"import pandas as pd\nimport numpy as np\n\nfrom sklearn import svm\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\n\nfrom dataprep.eda import create_report\nimport matplotlib.pyplot as plt","6ac220b9":"heart = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\nprint(heart.head(), '\\n')\nprint(heart.isnull().any(), '\\n')\nprint(heart.info(), '\\n')\nprint(heart.describe().T)","32580065":"create_report(heart)","6d7e7fcd":"sc_col = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']\nsc = StandardScaler()\nheart.loc[:, sc_col] = sc.fit_transform(heart.loc[:, sc_col])","67afe633":"X = heart.iloc[:, :-1]\ny = heart.iloc[:, -1]","6b1f5cda":"svm_clf = svm.SVC()\nparam = {'C' : [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9],\n         'kernel' : ['linear', 'poly', 'rbf'],\n         'gamma' : ['scale', 'auto']\n        }\n\nclf = GridSearchCV(svm_clf, param, cv=5, verbose=5, n_jobs=3)\nclf.fit(X,y)","6bb3dff3":"clf.best_params_","d0b8d478":"cv_result = pd.DataFrame(clf.cv_results_)\ncv_result","7e749c8a":"cv_result[cv_result['rank_test_score'] == 1]","5e12159d":"train_X,test_X,train_y,test_y = train_test_split(X, y, test_size=0.3, random_state=123, stratify=y)","d0cad2f3":"svm_clf = svm.SVC(C=0.6, gamma='auto', kernel='rbf')\nsvm_clf.fit(train_X, train_y)\npred = svm_clf.predict(test_X)\nprint(accuracy_score(test_y, pred))","d5f24d32":"svm_clf.support_vectors_","c9a80422":"plt.scatter(train_X.iloc[:, 0],train_X.iloc[:, 7], c=train_y, s=10, cmap='autumn')\nplt.scatter(svm_clf.support_vectors_[:,0],svm_clf.support_vectors_[:,7], color='blue')","2f1e472c":"from sklearn.decomposition import PCA","ab1692d0":"pca = PCA(n_components=2)\nX = pca.fit_transform(X)","82e9df27":"train_X,test_X,train_y,test_y = train_test_split(X, y, test_size=0.3, random_state=123, stratify=y)\n\nsvm_clf = svm.SVC(C=0.6, gamma='auto', kernel='rbf')\nsvm_clf.fit(train_X, train_y)\npred = svm_clf.predict(test_X)\nprint(accuracy_score(test_y, pred))","1a002445":"plt.scatter(train_X[:, 0],train_X[:, 1], c=train_y, s=10, cmap='autumn')\nplt.scatter(svm_clf.support_vectors_[:,0],svm_clf.support_vectors_[:,1], color='blue')","1af2e7a2":"X = heart.iloc[:, :-1]\ny = heart.iloc[:, -1]","55b23e5b":"pca = PCA(n_components=3)\nX = pca.fit_transform(X)","6ae03e7c":"train_X,test_X,train_y,test_y = train_test_split(X, y, test_size=0.3, random_state=123, stratify=y)\n\nsvm_clf = svm.SVC(C=0.6, gamma='auto', kernel='rbf')\nsvm_clf.fit(train_X, train_y)\npred = svm_clf.predict(test_X)\nprint(accuracy_score(test_y, pred))","91a54b30":"fig = plt.figure(figsize=(12, 12))\nax = fig.add_subplot(projection='3d')\nax.scatter(train_X[:, 0],train_X[:, 1], train_X[:, 2],c=train_y, s=10, cmap='autumn')\nax.scatter(svm_clf.support_vectors_[:,0],svm_clf.support_vectors_[:,1], svm_clf.support_vectors_[:,2], color='blue')\nplt.show()","6ef28d09":"> n_component = 2","09f1f2a6":"# 4. Visualization","96773d75":"> n-component = 3","8ecdaf7d":"# 1. load package and install package for EDA (dataprep)","848c5eb9":"# 3. Support Vector Machine parameter setting\n> Using 'GridSearchCV' function for parameter grid search\n\n> You can check which parameters are best using 'clf.best_params_'\n\n> In this case, {'C': 0.6, 'gamma': 'auto', 'kernel': 'rbf'}","48a4a049":"> Train \/ test data split (7:3)\n\n> Train and check accuracy : 84%","145e3692":"# 2. Read data & EDA"}}