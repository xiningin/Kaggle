{"cell_type":{"617ddc7b":"code","944c971a":"code","4a31ee72":"code","342497a9":"code","6ee5fdff":"code","88efe0d4":"code","0f38dc44":"code","695d598b":"code","f522b525":"code","3600075a":"code","d40782f9":"code","36bcf714":"code","fdd8fe89":"code","6167e5c6":"code","a11535f9":"code","3fd49366":"code","cdf1d7ab":"markdown","f409cb53":"markdown","8f44814e":"markdown","b6f55cba":"markdown","18b4e8e5":"markdown","89e3300e":"markdown","ee6206c9":"markdown","307a017f":"markdown"},"source":{"617ddc7b":"list_words=['viruz','Microsoft','handuclean','feeeevvvveerrrr','facemaskk','sanitized\/dry','First']\ncorrected=[]","944c971a":"#Libraries which we will be using for our task\nimport spacy\nimport nltk\n#!pip3 install wordninja\nimport wordninja\n#!pip3 install pyspellchecker\nfrom spellchecker import SpellChecker\nspell = SpellChecker()\nimport spacy \n#python3 -m spacy download en_core_web_sm\nnlp = spacy.load(\"en_core_web_sm\")\nfrom collections import Counter\nimport re","4a31ee72":"print('List of remaining words \\n',*list_words)\nprint('List of correct words \\n',*corrected)","342497a9":"def NER(list_words,corrected):\n    for i in (list_words):\n\n        doc = nlp(i) \n        \n        for ent in doc.ents: \n            print(ent.text, ent.label_) \n            corrected.append(ent.text)\n            list_words.remove(ent.text)\n            \n    return [list_words,corrected]","6ee5fdff":"list_words,corrected=NER(list_words,corrected)","88efe0d4":"print('List of remaining words \\n',*list_words)\nprint('List of correct words \\n',*corrected)","0f38dc44":"def preprocess_text(list_words,corrected):\n  index_array=[]\n\n  for i in ((list_words)):\n    if(len(list(spell.unknown([i])))!=0):   \n      index_array.append([i,spell.correction(i)])\n    else:\n        corrected.append(i)\n        list_words.remove(i)\n  \n  for i in ((index_array)):\n    if(len(list(spell.unknown([i[1]])))==0):\n      corrected.append(i[1])\n      list_words.remove(i[0])\n        \n  print(*corrected)\n  return [list_words,corrected]","695d598b":"list_words,corrected=preprocess_text(list_words,corrected)","f522b525":"print('List of remaining words \\n',*list_words)\nprint('List of correct words \\n',*corrected)","3600075a":"def recurring(list_words):\n  for q in range(len(list_words)):\n      chars=list(list_words[q])\n      col_count = Counter(chars)\n      pairs=list(col_count.items())\n        \n      for i in range(0,len(pairs)):\n        if(pairs[i][1]>2):\n          pattern=pairs[i][0]+\"+\"\n          text_input=re.sub(pattern,pairs[i][0],text_input)\n        else:\n            text_input=list_words[q]\n    \n      list_words[q]=text_input\n    \n  return list_words","d40782f9":"list_words=recurring(list_words)\nlist_words,corrected=preprocess_text(list_words,corrected)","36bcf714":"print('List of remaining words \\n',*list_words)\nprint('List of correct words \\n',*corrected)","fdd8fe89":"def ninja(list_words):\n  array1=[]\n\n  for q in range(len(list_words)):\n      splits=wordninja.split(list_words[q])\n    \n      for i in range(len(splits)):\n        if(len(splits[i])>2):\n          array1.append(splits[i])\n        \n  print(\"Tokens after splitting strings:\",*array1)\n        \n  return array1","6167e5c6":"list_words=ninja(list_words)","a11535f9":"final_check=list(spell.unknown(list_words))\nfor i in list_words:\n    if(i not in final_check):\n        list_words.remove(i)\n        \ncorrected.extend(list_words)\nlist_words=final_check\n","3fd49366":"print('List of remaining words \\n',*final_check)\nprint('List of correct words \\n',*corrected)","cdf1d7ab":"Once the strings are split using Wordninja, we can input these to the previous Pyspellchecker function for final spell-check in case there are any mistakes.","f409cb53":"# 1.3 Recurring - Regular Expressions  \n\nFunction to get rid of recurring characters in a word, usually used when trying to imply a *sentiment*.","8f44814e":"#  1.2 Pyspellchecker\n\n Second function is to simply use the library *Pyspellchecker*.  \n It has 2 built in functions of its own:\n 1. **spell.unknown** : returns a set of all words which have a spelling mistake.\n 2. **spell.correction** :  returns corrected word based on the words present in the libraries vocabulary.","b6f55cba":"# There are many types of spelling mistakes.  \nI will try to walk you through all of the ones I have come across.\n\n 1. **Common spelling errors** - These are the ones which have an error in the spelling by 1-2 characters and which occur commonly.  \nExample - viruz ( virus ) , treatmeit ( treatment )\n\n 2. **Words with a character in between them** - These are the ones with a character exists between two tokens\/strings.  \n Example - sanitized\/dry ( sanitized dry ) , handuclean ( hand clean )\n\n 3. **Words with recurring characters** - Words with characters that occur repeatedlly. Usually used when trying to   express some sort of emotion in text.  \n Example - feeeevvvveeerrrrr ( fever ) , facemaskk ( facemask )","18b4e8e5":"# Python Spell-Checker\n**In this notebook I will be walking you through the different types of spelling mistakes that occur in a document.**  \nSpelling mistakes are quite common.   \nIt would be useful to correct them, if you want to do some sort of analysis on them, you'd get better meaning and results.","89e3300e":"# 1.1 Named entity recognition(NER)\n\n *NER* is an important step that needs to be done before correcting a spelling.  \n**Organisations, cardinal, people, places** shouldn't be corrected.","ee6206c9":"Sometimes strings are beyond correctable.  \n> There is no correct order in which you can use the above functions.  \n> Try what is best for your dataset and use them wisely.\n\n **I hope you could take away some useful information and tips from my notebook. Feedback is appeciated, this is one my first notebook on Kaggle. Thanks for your time :)**","307a017f":"# 1.4 WordNinja\n\nThe name is super ****cool****. Function used to split words which are seperated by a single character\/token."}}