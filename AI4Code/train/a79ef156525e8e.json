{"cell_type":{"e152c178":"code","6862e1f9":"code","5c42f535":"code","0694732f":"code","7d9e8ee0":"code","bb3130b8":"code","be9e7abf":"code","f3406b12":"code","f65276ed":"code","f29c9e8b":"code","96333afa":"code","0b9d89c2":"code","177b0c65":"code","a1aa9339":"code","a769a9bc":"code","380bfe5c":"code","f055d4fb":"code","7607742f":"code","55ad7ef9":"code","8f31f7eb":"code","7f67d6b7":"code","5054e832":"code","46cc8a70":"code","b0c188f3":"code","1cec5816":"code","71d0ec45":"code","23d65b31":"code","5068a021":"code","970bb64b":"code","e6fb58e8":"code","797451c0":"code","26f2c1ed":"code","983c123a":"code","5e132287":"code","cf35fe7d":"code","0126091e":"code","62df9a6f":"code","f1423a3b":"code","0948687e":"code","0c022d59":"code","d243d74d":"code","c3773f79":"code","7d43451c":"code","af9acb4c":"code","7cc592f1":"code","c2af95e8":"code","a6656bb7":"code","3a9f39d9":"code","26e2bcf5":"code","83f9ba92":"code","653f7f30":"code","f9d3f658":"code","10ad2b3c":"code","402097bd":"code","b806611a":"code","ab8f1c95":"code","1b1823d0":"code","69400251":"code","6acf417b":"code","8ddc71f9":"code","cd0ac7b0":"code","b905e827":"code","7f6c663a":"code","ccbebab4":"code","d07fc8bb":"code","74115ab6":"code","8230ed91":"code","91eaf5bf":"code","f2a1dce0":"code","d1dbceb5":"markdown","cc023f76":"markdown","3b44a749":"markdown","a6196a78":"markdown","bb16d11e":"markdown","fa1848b4":"markdown","16caacd2":"markdown","2a154175":"markdown","b8e0d59a":"markdown","44cc5d3b":"markdown","975b7a77":"markdown","47db7751":"markdown","8285c198":"markdown","69b71587":"markdown","39728087":"markdown","963d5370":"markdown","4e00ec0f":"markdown","daac4060":"markdown","e91e5595":"markdown","3ddf2b83":"markdown","86aa0fb7":"markdown","88d66d9e":"markdown","42de2193":"markdown","c9e03c9e":"markdown","954b691d":"markdown","68c2fa1a":"markdown","daa20655":"markdown","e5088727":"markdown","02ca36e6":"markdown","9384939b":"markdown","cdb3681d":"markdown","898cef40":"markdown","016ecc1f":"markdown","3b6d55d0":"markdown","1a397856":"markdown","7754187f":"markdown","1f8e810b":"markdown","1519ca83":"markdown","26de8049":"markdown","e308e946":"markdown","9c2afaa4":"markdown","817e6061":"markdown","bcb8de71":"markdown","9a440f07":"markdown","ef1e181c":"markdown","b97b4953":"markdown","b004fb14":"markdown","9e105103":"markdown","d454c8eb":"markdown","4ca85484":"markdown","d1107f90":"markdown","1524530e":"markdown","bcbcee6d":"markdown","65bb9de4":"markdown","fcb153dc":"markdown","d862c464":"markdown","d91b0250":"markdown","f1ff1714":"markdown","6e6ba270":"markdown","d2807620":"markdown","60cb75df":"markdown","dbdd5820":"markdown","1628f61b":"markdown","cf7f754a":"markdown","0541926f":"markdown","6817147d":"markdown","bddceb14":"markdown","89afbac3":"markdown","59ed882e":"markdown","abb91ace":"markdown","d428cc1f":"markdown","105a6079":"markdown","d0f52fcb":"markdown"},"source":{"e152c178":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6862e1f9":"%matplotlib inline    \n# To make data visualisations display in Jupyter Notebooks \n\nimport numpy as np    # linear algebra \nimport pandas as pd    # Data processing, Input & Output load    \nimport matplotlib.pyplot as plt    # Visualization & plotting\nimport datetime\n\nimport xgboost as xgb\nfrom sklearn.ensemble import GradientBoostingClassifier    # GBM algorithm\nfrom sklearn.ensemble import RandomForestClassifier    # Random Forest Algorithm\nfrom sklearn.linear_model import LogisticRegression    # Logistic Regression Algorithm\n\nfrom xgboost.sklearn import XGBClassifier    # Extreme Gradient Boosting\nfrom xgboost import plot_importance    # Plotting Important Variables\n\nimport joblib  #Joblib is a set of tools to provide lightweight pipelining in Python (Avoid computing twice the same thing)\nfrom sklearn.model_selection import train_test_split as tts\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n                                    # GridSearchCV - Implements a \u201cfit\u201d and a \u201cscore\u201d method\n                                    # train_test_split - Split arrays or matrices into random train and test subsets\n                                    # cross_val_score - Evaluate a score by cross-validation     \n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import f1_score, precision_score, accuracy_score, roc_auc_score, recall_score, roc_curve\nfrom sklearn.metrics import make_scorer, confusion_matrix, classification_report   # Differnt metrics to evaluate the model\nimport pandas_profiling as pp    # simple and fast exploratory data analysis of a Pandas Dataframe\n\nimport warnings    # To avoid warning messages in the code run\nwarnings.filterwarnings('ignore')","5c42f535":"def plot_roc_auc_curve(y_train_actual, train_pred_prob, y_test_actual, test_pred_prob, *args):\n    '''\n    Generate train and test roc curve\n    '''\n      \n    AUC_Train = roc_auc_score(y_train_actual, train_pred_prob)\n    AUC_Test = roc_auc_score(y_test_actual, test_pred_prob)\n    \n    if len(args) == 0:\n        print(\"Train AUC = \", AUC_Train)\n        print(\"Test AUC = \", AUC_Test)\n        fpr_train, tpr_train, thresholds = roc_curve(y_train_actual, train_pred_prob)\n        fpr_test, tpr_test, thresholds = roc_curve(y_test_actual, test_pred_prob)\n        roc_plot(fpr_train, tpr_train, fpr_test, tpr_test)\n        \n    else:\n        AUC_Valid = roc_auc_score(args[0], args[1])\n        print(\"Train AUC = \", AUC_Train)\n        print(\"Test AUC = \", AUC_Test)\n        print(\"Validation AUC = \", AUC_Valid)\n        fpr_train, tpr_train, thresholds = roc_curve(y_train_actual, train_pred_prob)\n        fpr_test, tpr_test, thresholds = roc_curve(y_test_actual, test_pred_prob)\n        fpr_val, tpr_val, thresholds = roc_curve(args[0], args[1])\n        roc_plot(fpr_train, tpr_train, fpr_test, tpr_test, fpr_val, tpr_val)        ","0694732f":"def roc_plot(fpr_train, tpr_train, fpr_test, tpr_test, *args):\n    '''\n    Generate roc plot\n    '''\n    \n    fig = plt.plot(fpr_train, tpr_train, label = 'Train')\n    fig = plt.plot(fpr_test, tpr_test, label = 'Test')\n    \n    if len(args) == 0:\n        plt.xlim([0.0, 1.0])\n        plt.ylim([0.0, 1.0])\n        plt.title(\"ROC curve using \")\n        plt.xlabel(\"False Positive Rate (1 - Specificity)\")\n        plt.ylabel(\"True Positive Rate (Sensitivity)\")\n        plt.legend(loc = 'lower right')\n        plt.grid(True)\n        plt.show()\n    \n    else:\n        fig = plt.plot(args[0], args[1], label = 'Validation')\n        plt.xlim([0.0, 1.0])\n        plt.ylim([0.0, 1.0])\n        plt.title(\"ROC curve using \")\n        plt.xlabel(\"False Positive Rate (1 - Specificity)\")\n        plt.ylabel(\"True Positive Rate (Sensitivity)\")\n        plt.legend(loc = 'lower right')\n        plt.grid(True)\n        plt.show()","7d9e8ee0":"data = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\n\n# Copying the original data into a new python variable object data_new\ndata_new = data.copy()\n\nprint(\"Data Shape - \", data_new.shape)\n\ndata_new.head()","bb3130b8":"data_new.describe().transpose()","be9e7abf":"data_new.info()","f3406b12":"pp.ProfileReport(data_new)","f65276ed":"Target = 'output'\npd.crosstab(data_new[Target], columns = 'Normalized', normalize = True)","f29c9e8b":"data_new.isnull().sum()","96333afa":"print(\"Unique values sex count: \", data_new['sex'].nunique())\nprint(\"sex values: \", data_new['sex'].unique())\npd.value_counts(data_new['sex'])","0b9d89c2":"print(\"Unique values cp count: \", data_new['cp'].nunique())\nprint(\"cp values: \", data_new['cp'].unique())\npd.value_counts(data_new['cp'])","177b0c65":"print(\"Unique values fbs count: \", data_new['fbs'].nunique())\nprint(\"fbs values: \", data_new['fbs'].unique())\npd.value_counts(data_new['fbs'])","a1aa9339":"print(\"Unique values restecg count: \", data_new['restecg'].nunique())\nprint(\"restecg values: \", data_new['restecg'].unique())\npd.value_counts(data_new['restecg'])","a769a9bc":"print(\"Unique values exng count: \", data_new['exng'].nunique())\nprint(\"exng values: \", data_new['exng'].unique())\npd.value_counts(data_new['exng'])","380bfe5c":"print(\"Unique values slp count: \", data_new['slp'].nunique())\nprint(\"slp values: \", data_new['slp'].unique())\npd.value_counts(data_new['slp'])","f055d4fb":"print(\"Unique values caa count: \", data_new['caa'].nunique())\nprint(\"caa values: \", data_new['caa'].unique())\npd.value_counts(data_new['caa'])","7607742f":"print(\"Unique values thall count: \", data_new['thall'].nunique())\nprint(\"thall values: \", data_new['thall'].unique())\npd.value_counts(data_new['thall'])","55ad7ef9":"print(\"Unique values output count: \", data_new['output'].nunique())\nprint(\"output values: \", data_new['output'].unique())\npd.value_counts(data_new['output'])","8f31f7eb":"plt.figure(figsize = (10, 8))\nplt.pie(pd.value_counts(data_new['sex']), \n        labels = [1,0],\n        autopct = '%.2f%%',\n        textprops = {'size' : 'x-large',\n                     'fontweight' : 'bold', \n                     'rotation' : '30',\n                     'color' : 'w'})\n\nplt.legend()\nplt.title('Percentage Of Sex Types', fontsize = 18, fontweight = 'bold')\nplt.show()","7f67d6b7":"plt.figure(figsize = (10, 8))\nplt.pie(pd.value_counts(data_new['cp']),\n       labels = [0,2,1,3],\n       autopct = '%.2f%%',\n       textprops = {'size' : 'x-large',\n                   'fontweight' : 'bold',\n                   'rotation' : '30',\n                   'color' : 'w'})\n\nplt.legend()\nplt.title('Percentage Of Chestpain Types', fontsize = 18, fontweight = 'bold')\nplt.show()","5054e832":"plt.figure(figsize = (10, 8))\nplt.pie(pd.value_counts(data_new['fbs']),\n       labels = [0,1],\n       autopct = '%.2f%%',\n       textprops = {'size' : 'x-large',\n                   'fontweight' : 'bold',\n                   'rotation' : '30',\n                   'color' : 'w'})\n\nplt.legend()\nplt.title('Percentage Of Fasting Blood Sugar Types', fontsize = 18, fontweight = 'bold')\nplt.show()","46cc8a70":"plt.figure(figsize = (10, 8))\nplt.pie(pd.value_counts(data_new['restecg']),\n       labels = [1,0,2],\n       autopct = '%.2f%%',\n       textprops = {'size' : 'x-large',\n                    'fontweight' : 'bold',\n                    'rotation' : '30',\n                    'color' : 'w'})\n\nplt.legend()\nplt.title('Percentage Of Rest ECG Types', fontsize = 18, fontweight = 'bold')\nplt.show()","b0c188f3":"plt.figure(figsize = (10, 8))\nplt.pie(pd.value_counts(data_new['exng']),\n       labels = [0,1],\n       autopct = '%.2f%%',\n       textprops = {'size' : 'x-large',\n                   'fontweight' : 'bold',\n                   'rotation' : '30',\n                   'color' : 'w'})\n\nplt.legend()\nplt.title('Percentage Of Exercise Induced Angina Types', fontsize = 18, fontweight = 'bold')\nplt.show()","1cec5816":"plt.figure(figsize = (10, 8))\nplt.pie(pd.value_counts(data_new['slp']),\n       labels = [2,1,0],\n       autopct = '%.2f%%',\n       textprops = {'size' : 'x-large',\n                   'fontweight' : 'bold',\n                   'rotation' : '30',\n                   'color' : 'w'})\n\nplt.legend()\nplt.title('Percentage Of SLP Types', fontsize = 18, fontweight = 'bold')\nplt.show()","71d0ec45":"plt.figure(figsize = (10, 8))\nplt.pie(pd.value_counts(data_new['caa']),\n       labels = [0,1,2,3,4],\n       autopct = '%.2f%%',\n       textprops = {'size' : 'x-large',\n                   'fontweight' : 'bold',\n                   'rotation' : '30',\n                   'color' : 'w'})\n\nplt.legend()\nplt.title('Percentage Of CAA Types', fontsize = 18, fontweight = 'bold')\nplt.show()","23d65b31":"plt.figure(figsize = (10, 8))\nplt.pie(pd.value_counts(data_new['thall']),\n       labels = [2,3,1,0],\n       autopct = '%.2f%%',\n       textprops = {'size' : 'x-large',\n                   'fontweight' : 'bold',\n                   'rotation' : '30',\n                   'color' : 'w'})\n\nplt.legend()\nplt.title('Percentage Of Heart Rate Types', fontsize = 18, fontweight = 'bold')\nplt.show()","5068a021":"plt.figure(figsize = (10, 8))\nplt.pie(pd.value_counts(data_new['output']),\n       labels = [1,0],\n       autopct = '%.2f%%',\n       textprops = {'size' : 'x-large',\n                   'fontweight' : 'bold',\n                   'rotation' : '30',\n                   'color' : 'w'})\n\nplt.legend()\nplt.title('Percentage Of Output', fontsize = 18, fontweight = 'bold')\nplt.show()","970bb64b":"num_cols = data_new[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']]\nobj_cols = data_new[['sex', 'cp', 'fbs', 'restecg', 'exng', 'slp', 'caa', 'thall', 'output']]","e6fb58e8":"obj_cols = obj_cols.drop(['output'], axis = 1)","797451c0":"print('Numeric Columns \\n', num_cols)\nprint('Non-Numeric Columns \\n', obj_cols)","26f2c1ed":"num_cols_viz = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']\n\nfig, axes = plt.subplots(1, 1, sharex = False, sharey = False, figsize = (15, 15))\ndata_new.loc[:, [Target]+num_cols_viz].boxplot(by = Target, ax = axes, return_type = 'axes');","983c123a":"obj_cols_viz = ['sex', 'cp', 'fbs', 'restecg', 'exng', 'slp', 'caa', 'thall', 'output']\nfig, axes = plt.subplots(len(obj_cols_viz), sharex = False, sharey = False, figsize = (15, 50))\n\nfor i in range(0, len(obj_cols_viz)):\n    pd.crosstab(data_new[obj_cols_viz[i]], data_new[Target]).plot(kind = 'bar', stacked = True, grid = False, ax = axes[i])","5e132287":"# Numerical columns data\ndata_new_num = data_new[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'output']]\n\n# Categorical columns data\ndata_new_cat = data_new[['sex', 'cp', 'fbs', 'restecg', 'exng', 'slp', 'caa', 'thall']]\n\n# Creating dummies\ndata_new_cat_dummies = pd.get_dummies(data_new_cat)\nprint(data_new_cat_dummies.shape)\ndata_new_cat_dummies.head()","cf35fe7d":"data_new_final = pd.concat([data_new_num, data_new_cat_dummies], axis = 1)\nprint(data_new_final.shape)\ndata_new_final.head()","0126091e":"data_new_final.isnull().sum(axis = 0)","62df9a6f":"X = data_new_final.drop(['output'], axis = 1)\ny = data_new_final['output']","f1423a3b":"X_train, X_test, y_train, y_test = tts(X, y, test_size = 0.3, random_state = 100) \n\nprint('Train Shape: ', X_train.shape)\nprint('Test Shape: ', X_test.shape)","0948687e":"model_parameters = {'n_estimators': [10, 50, 100, 200, 500, 750, 1000], 'max_depth': [3, 5, 10],\n                    'min_samples_leaf': [np.random.randint(1,10)], 'max_features': [None, 'sqrt', 'log2']}","0c022d59":"model = GradientBoostingClassifier(random_state = 10)\ngscv_GBM = GridSearchCV(estimator = model, \n                        param_grid = model_parameters, \n                        cv = 5, \n                        verbose = 1, \n                        n_jobs = -1,\n                        scoring = 'roc_auc')\n\ngscv_GBM.fit(X_train, y_train)","d243d74d":"print('The best parameters are -', gscv_GBM.best_params_)","c3773f79":"final_mod_GBM = GradientBoostingClassifier(**gscv_GBM.best_params_)\nfinal_mod_GBM.fit(X_train, y_train)","7d43451c":"train_pred = final_mod_GBM.predict(X_train)\ntest_pred = final_mod_GBM.predict(X_test)","af9acb4c":"print('Classification report for train data is : \\n',\n      classification_report(y_train, train_pred))\nprint('Classification report for test data is : \\n',\n      classification_report(y_test, test_pred))","7cc592f1":"final_mod_GBM.variables = X_train.columns","c2af95e8":"joblib.dump(final_mod_GBM, 'best_model_GBM.joblib')","a6656bb7":"plt.subplots(figsize = (10, 5))\ntrain_prob = final_mod_GBM.predict_proba(X_train)[:, 1]\ntest_prob = final_mod_GBM.predict_proba(X_test)[:, 1]\n\nplot_roc_auc_curve(y_train, train_prob, y_test, test_prob)","3a9f39d9":"y_pred = final_mod_GBM.predict(X_test)\npredictions = [round(value) for value in y_pred]","26e2bcf5":"accuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","83f9ba92":"log_reg = LogisticRegression(solver = 'liblinear')\nlog_reg.fit(X_train, y_train)","653f7f30":"train_pred = log_reg.predict(X_train)\ntest_pred = log_reg.predict(X_test)","f9d3f658":"print('Classification report for train data is : \\n',\n      classification_report(y_train, train_pred))\nprint('Classification report for test data is : \\n',\n      classification_report(y_test, test_pred))","10ad2b3c":"log_reg.variables = X_train.columns","402097bd":"joblib.dump(log_reg, 'best_model_log_reg.joblib')","b806611a":"plt.subplots(figsize = (10, 5))\ntrain_prob = log_reg.predict_proba(X_train)[:, 1]\ntest_prob = log_reg.predict_proba(X_test)[:, 1]\n\nplot_roc_auc_curve(y_train, train_prob, y_test, test_prob)","ab8f1c95":"y_pred = log_reg.predict(X_test)\npredictions = [round(value) for value in y_pred]","1b1823d0":"accuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","69400251":"model_parameters = {'n_estimators': [10, 50, 100, 200, 500, 750, 1000], 'max_depth': [3, 5, 10],\n                    'min_samples_leaf': [np.random.randint(1,10)], 'max_features': [None, 'sqrt', 'log2']}","6acf417b":"model = RandomForestClassifier(random_state = 10)\ngscv_randfor = GridSearchCV(estimator = model, \n                        param_grid = model_parameters, \n                        cv = 5, \n                        verbose = 1, \n                        n_jobs = -1,\n                        scoring = 'roc_auc')\n\ngscv_randfor.fit(X_train, y_train)","8ddc71f9":"print('The best parameters are -', gscv_randfor.best_params_)","cd0ac7b0":"final_mod_randfor = GradientBoostingClassifier(**gscv_randfor.best_params_)\nfinal_mod_randfor.fit(X_train, y_train)","b905e827":"train_pred = final_mod_randfor.predict(X_train)\ntest_pred = final_mod_randfor.predict(X_test)","7f6c663a":"print('Classification report for train data is : \\n',\n      classification_report(y_train, train_pred))\nprint('Classification report for test data is : \\n',\n      classification_report(y_test, test_pred))","ccbebab4":"final_mod_randfor.variables = X_train.columns","d07fc8bb":"joblib.dump(final_mod_randfor, 'best_model_randfor.joblib')","74115ab6":"plt.subplots(figsize = (10, 5))\ntrain_prob = log_reg.predict_proba(X_train)[:, 1]\ntest_prob = log_reg.predict_proba(X_test)[:, 1]\n\nplot_roc_auc_curve(y_train, train_prob, y_test, test_prob)","8230ed91":"y_pred = log_reg.predict(X_test)\npredictions = [round(value) for value in y_pred]","91eaf5bf":"accuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","f2a1dce0":"print('The best model is Logistic Regression model')","d1dbceb5":"### a) sex","cc023f76":"### c) Displaying the best parameters","3b44a749":"* Let's check if there are any null variables in the <b>data_new<\/b> dataset.","a6196a78":"## 3. Importing Dataset","bb16d11e":"### a) Applying logistic regression","fa1848b4":"### b) Using GridSearch Cross Validation to find out the best parameters using L2 penalty","16caacd2":"### b) Performing Train, Test & Split","2a154175":"### f) Saving the variables used in the model","b8e0d59a":"### h) Model Evaluation","44cc5d3b":"### f) Saving the variables used in the model","975b7a77":"### g) Saving the best model","47db7751":"* Let's first plot the boxplot of each numerical variable w.r.t our target variable.","8285c198":"### h) Model Evaluation","69b71587":"## 8.1 Model 1 - GBM (Gradient Boosting)","39728087":"### a) Separating the target variable - output from the data_new_final dataframe","963d5370":"### i) Making predictions for test data","4e00ec0f":"### g) Evaluating prediction accuracy for test data","daac4060":"## 9) Displaying Best Model","e91e5595":"### j) Evaluating prediction accuracy for test data","3ddf2b83":"### b) cp(chestpain)","86aa0fb7":"### b) Using GridSearch Cross Validation to find out the best parameters using L2 penalty","88d66d9e":"## 2. Analysis of each category of the numerical variables of num_cols dataframe w.r.t Target variable - output.","42de2193":"### Following are the insights gathered from the stacked bar charts\n\n* <b>Sex 0 is more prone to a heart attack as compared to Sex 1<\/b>.\n* <b>Persons having cp(chestpain) of type 1, type 2 & type 3 are more prone to a heart attack <\/b>.\n* <b>Persons having restecg of type 1 are more prone to a heart attack<\/b>.\n* <b>Persons not having exng(exercise indused angina) are more prone to a heart attack<\/b>.\n* <b>Persons having slp of type 2 are more prone to a heart attack<\/b>.\n* <b>Persons having 0 major vessels are more prone to a heart attack<\/b>.\n* <b>Persons having thall(thal rate) of type 2 are more prone to a heart attack<\/b>.\n* <b>So, overall we can say that a person who is of Sex 0 and has a cp of type 1, 2 or 3 and has a restecg of type 1 and doesn't have exng and has an slp of type 2 and has 0 major vessels and has a thall of type 2 is more prone to a heart attack<\/b>.","c9e03c9e":"### f) slp","954b691d":"* We would categorize the existing variables of our existing dataframe into <b>numerical<\/b> and <b>categorical<\/b> variables.","68c2fa1a":"### f) Making predictions for test data","daa20655":"## 8) Applying Different Models On Train & Test Data","e5088727":"### c) fbs(fasting blood sugar)","02ca36e6":"## 2. Defining Functions For Plotting ROC_AUC Curve & ROC_Plot","9384939b":"## b) Analysis of percentage unique values for categorical variables of the data_new dataset.","cdb3681d":"### d) Refitting the model with best parameters","898cef40":"### c) Displaying the best parameters","016ecc1f":"### g) Saving the best model","3b6d55d0":"## 8.2) Model 2 - Logistic Regression","1a397856":"* We shall first do the <b>Univariate Analysis<\/b> by analysing the data w.r.t our <b>Target Variable - output<\/b>.","7754187f":"### c) Null value check in the final dataset before model run","1f8e810b":"### Following are the insights gathered from the data_new dataframe\n\n1. <b>Maximum entries<\/b> are of <b>Sex 1<\/b> as compared to <b>Sex 0<\/b>.\n2. <b>47.19%<\/b> of the total population is suffering from <b>Type 0<\/b> chestpain(cp).\n3. <b>28.71%<\/b> of the total population is suffering from <b>Type 2<\/b> chestpain(cp).\n4. <b>16.5%<\/b> of the total population is suffering from <b>Type 1<\/b> chestpain(cp).\n5. <b>7.59%<\/b> of the total population is suffering from <b>Type 3<\/b> chestpain(cp).\n6. <b>85.15%<\/b> of the total population has <b>Type 0<\/b> Fasting Blood Sugar(fbs).\n7. <b>14.85%<\/b> of the total population has <b>Type 1<\/b> Fasting Blood Sugar(fbs).\n8. <b>50.17%<\/b> of the total population has Restecg of <b>Type 1<\/b> which has having ST-T wave abnormality.\n9. <b>48.51%<\/b> of the total population has Restecg of <b>Type 0<\/b> which is normal ecg.\n10. <b>1.32%<\/b> of the total population has Restecg of <b>Type 2<\/b> which shows probable or definite left ventricular hypertrophy by Estes' criteria.\n11. <b>67.33%<\/b> of the total population doesn't suffer from Exercise Induced Angina(exng). \n12. <b>32.67%<\/b> of the total population suffers from Exercise Induced Angina(exng).\n13. <b>46.86%<\/b> of the total population suffers from <b>Type 2<\/b> SLP.\n14. <b>46.20%<\/b> of the total population suffers from <b>Type 1<\/b> SLP.\n15. <b>6.93%<\/b> of the total population suffers from <b>Type 0<\/b> SLP.\n16. <b>57.76%<\/b> of the total population doesn't have any major vessel affected in their heart.\n17. <b>21.45%<\/b> of the total population has <b>1<\/b> major vessel affected in their heart.\n18. <b>12.54%<\/b> of the total population has <b>2<\/b> major vessels affected in their heart.\n19. <b>6.60%<\/b> of the total population have <b>3<\/b> major vessels affected in their heart.\n20. <b>1.65%<\/b> of the total population have <b>4<\/b> major vessels affected in their heart.\n21. <b>54.46%<\/b> of the total population has experienced a heart attack.\n22. <b>45.54%<\/b> of the total population has never experienced a heart attack.","1519ca83":"### b) Displaying model prediction and classification report","26de8049":"## a) Analysis of unique values & their counts for categorical variables of the data_new dataset.","e308e946":"### j) Evaluating prediction accuracy for test data","9c2afaa4":"## 6.1) Univariate Analysis","817e6061":"### e) Displaying model prediction and classification report","bcb8de71":"## 8.3) Model 3 - Random Forest Classifier","9a440f07":"### a) Define model parameters to be tuned","ef1e181c":"## 6.2) Bivariate Analysis","b97b4953":"### i) output","b004fb14":"* The entire dataset contains <b>303<\/b> rows and <b>14<\/b> columns.","9e105103":"### c) Saving the variables used in the model","d454c8eb":"## 7. Feature Engineering","4ca85484":"## 3. Analysis of each category of the categorical variables of obj_cols dataframe w.r.t Target variable - output.","d1107f90":"* Let's drop the columns which we won't be using.","1524530e":"### d) Saving the best model","bcbcee6d":"### e) exng(exercise induced angina)","65bb9de4":"### e) Model Evaluation","fcb153dc":"### b) Concatenating columns - numeric and dummies","d862c464":"1. First, let's get the summary of the numerical data","d91b0250":"### d) restecg(resting ecg)","f1ff1714":"### e) Displaying model prediction and classification report","6e6ba270":"## 4. Let's Understand Our Data","d2807620":"## 1. Importing Necessary Libraries","60cb75df":"## 6. EDA(Exploratory Data Analysis)","dbdd5820":"### d) Refitting the model with best parameters","1628f61b":"### i) Making predictions for test data","cf7f754a":"### a) Creating Dummy Variables","0541926f":"## 7.1) Creating Model Dataset","6817147d":"### g) caa(number of major vessels)","bddceb14":"### Following are the insights gathered from the boxplots\n\n* <b>The \"thalachh\" boxplot shows that greater the heart beat rate, higher the chance of a person experiencing a heart attack<\/b>.\n* <b>The \"trtbps\" shows that lower the resting blood pressure, higher the chance of a person experiencing a heart attack<\/b>.","89afbac3":"### a) Define model parameters to be tuned","59ed882e":"* We have approximately <b>46%<\/b> of 0's and <b>54%<\/b> of 1's in our data.","abb91ace":"## 1. Data Categorization","d428cc1f":"### h) thall(heart rate)","105a6079":"## 5. Data Profiling Report","d0f52fcb":"## 7.2) Splitting the newly created model data into train and test data"}}