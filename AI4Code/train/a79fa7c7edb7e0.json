{"cell_type":{"76f1392a":"code","0982c359":"code","b08f0c87":"code","e2713a0c":"code","e8637948":"code","75b06247":"code","40e5bcb9":"code","f8f541af":"code","a8e91144":"code","84e664d5":"code","6083cdd3":"code","a7e12f7c":"code","73ebfdf1":"code","a17a36d4":"code","93acda47":"code","c0a9dd5e":"code","12fe6d2e":"code","49f6e1dc":"code","889707b4":"code","f3649175":"code","3244f396":"code","a0e5dacc":"code","16e0f293":"code","d6a69058":"code","3112ae3c":"code","f07c43d4":"code","8016ea3c":"code","14c96200":"markdown","90d9951a":"markdown","6930972c":"markdown","256cdcce":"markdown"},"source":{"76f1392a":"#import library\nimport warnings\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib\nfrom pylab import rcParams\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.tsa.stattools import adfuller, kpss\nmatplotlib.rcParams['axes.labelsize'] = 14\nmatplotlib.rcParams['xtick.labelsize'] = 12\nmatplotlib.rcParams['ytick.labelsize'] = 12\nmatplotlib.rcParams['text.color'] = 'k'","0982c359":"df = pd.read_csv('..\/input\/google-stock-data\/GOOG.csv')","b08f0c87":"df.shape","e2713a0c":"df.head()","e8637948":"#transform datetime\ndf['Date'] =  pd.to_datetime(df['Date'], format = '%Y-%m-%d')","75b06247":"#indexing date\ndf = df.set_index('Date')\ndf.index","40e5bcb9":"df.describe()","f8f541af":"df.info()","a8e91144":"#visualize of each atrribute\ndf.plot(subplots = True, figsize = (10,12))\nplt.title('Google Stock Attributes')\nplt.show()","84e664d5":"#check stock from 2015 - 2021\ndf['2015':'2021'].plot(subplots = True, figsize = (10,12))\nplt.title('Google Stock Attributes')\nplt.show()","6083cdd3":"#check moving average\ndf['MA for 20 days'] = df['Open'].rolling(20).mean()\ndf['MA for 50 days'] = df['Open'].rolling(50).mean()\n\n#visualize moving average\ndf.truncate(before = '2019-01-01', after = '2021-01-01')[['Adj Close','MA for 20 days','MA for 50 days']].plot(subplots = False, figsize = (12,5))","a7e12f7c":"#check daily return\ndf['Daily Return'] = df['Adj Close'].pct_change()\nresult = df.sort_values(by = ['Daily Return'], ascending = False)\nresult.head()","73ebfdf1":"#cleaning data\nresult.dropna(inplace = True)\nresult.head()","a17a36d4":"x = df['Open'].resample('MS').mean()\nx.head()","93acda47":"#check open price on 2019\nx['2019':]","c0a9dd5e":"#visualize time series of open price\nx.plot(figsize = (10,6))\nplt.title(\"Open Price\")\nplt.show()","12fe6d2e":"#build model\nrcParams['figure.figsize'] = 10,6\ndecomposition = sm.tsa.seasonal_decompose(x, model = 'additive')\nfig = decomposition.plot()\nplt.show()","49f6e1dc":"#visualize autocorrelation\nplt.rcParams.update({'figure.figsize':(10,6), 'figure.dpi':120})\nautocorrelation_plot(x.tolist())","889707b4":"#check parameter in model\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","f3649175":"#selection of parameter\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            model = sm.tsa.statespace.SARIMAX(x, order = param, seasonal_order = param_seasonal, enforce_stationarity = False,\n                                            enforce_invertibility = False)\n            results = model.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n                continue","3244f396":"#fitting model\nmodel = sm.tsa.statespace.SARIMAX(x, order = (1, 1, 1), seasonal_order = (1, 1, 0, 12), enforce_stationarity = False,\n                                enforce_invertibility = False)\nresult = model.fit()\nprint(results.summary().tables[1])","a0e5dacc":"#visualize of fitting model\nresult.plot_diagnostics(figsize = (15, 11))\nplt.show()","16e0f293":"#prediction of open price\ny_pred = result.get_prediction(start = pd.to_datetime('2019-01-01'), dynamic = False)\npred_ci = y_pred.conf_int()\nprint(pred_ci)","d6a69058":"#visualize prediction of open price\nax = x['2019':].plot(label = 'Observed')\ny_pred.predicted_mean.plot(ax = ax, label = 'One-Step Ahead Forecast', alpha = .7, figsize = (10, 6))\nax.fill_between(pred_ci.index, pred_ci.iloc[:, 0], pred_ci.iloc[:, 1], color = 'k', alpha = .2)\nplt.title(\"Prediction of Open Price\")\nax.set_xlabel('Date')\nax.set_ylabel('Open Price')\nplt.legend()\nplt.show()","3112ae3c":"#prediction of forecast\ny_forecasted = y_pred.predicted_mean\ny_truth = x['2019-01-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))\nprint('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))","f07c43d4":"#visualize prediction of forecast\npred_uc = results.get_forecast(steps = 100)\npred_ci = pred_uc.conf_int()\nax = x.plot(label = 'Observed', figsize = (10,6))\npred_uc.predicted_mean.plot(ax = ax, label = 'Forecast')\nax.fill_between(pred_ci.index, pred_ci.iloc[:, 0], pred_ci.iloc[:, 1], color = 'k', alpha = .25)\nplt.title(\"Forecast of Open Price\")\nax.set_xlabel('Date')\nax.set_ylabel('Open Price')\nplt.legend()\nplt.show()","8016ea3c":"# ADF Test\nresult = adfuller(x, autolag = 'AIC')\nprint(f'ADF Statistic: {result[0]}')\nprint(f'p-value: {result[1]}')\nfor key, value in result[4].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')\n\n# KPSS Test\nresult = kpss(x, regression = 'c')\nprint('\\nKPSS Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nfor key, value in result[3].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')","14c96200":"## ARIMA Model","90d9951a":"## Time Series Analysis","6930972c":"# Forecast Analysis of Google Stock","256cdcce":"## Data Extraction"}}