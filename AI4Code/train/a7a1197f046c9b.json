{"cell_type":{"b09d5a23":"code","765ecb23":"code","39a9ba38":"code","e5ca328f":"code","d67687e4":"code","edb42b83":"code","d78e7b50":"code","37193dfc":"markdown","707e9259":"markdown","cae9d5a6":"markdown","6b681ba5":"markdown","5bdc14f6":"markdown"},"source":{"b09d5a23":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objects as go\nfrom ipywidgets import widgets, Layout, interact, fixed\nfrom datetime import date\nimport pickle\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","765ecb23":"print(\"UPDATED: {}\".format(date.today()))","39a9ba38":"# read in the data\ndata = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\", parse_dates=['ObservationDate'])\nmax_date = data['ObservationDate'].max()\n\n\n# pull out countries and states\ncountries = sorted(data['Country\/Region'].unique())\nstates = sorted([s for s in data['Province\/State'].unique() if isinstance(s, str)])","e5ca328f":"# create graph dropdowns for geography\n\ncountry_dropdown = widgets.Dropdown(\n    options=countries,\n    value='US',\n    description='Country\/Region',\n    style={'description_width': 'initial'}\n)\n\nstate_dropdown = widgets.Dropdown(\n    options=sorted(\n        [s for s in data[data['Country\/Region']=='US']['Province\/State'].unique() if isinstance(s,str)]\n    ),\n    value='Georgia',\n    description='Province\/State',\n    style={'description_width': 'initial'}\n)\n\ncum_dropdown = widgets.Dropdown(\n    options=['Cumulative', 'New'],\n    value='New',\n    description='Cumulative or New',\n    style={'description_width': 'initial'}\n)\n\ntype_dropdown = widgets.Dropdown(\n    options=['Confirmed', 'Deaths', 'Recovered'],\n    value='Confirmed',\n    description='Series Type',\n    style={'description_width': 'initial'}\n)\n\nrolling_avg_window = widgets.IntSlider(\n    value=7,\n    min=1,\n    max=14,\n    step=1,\n    description='Rolling Avg # Days):',\n    style={'description_width': 'initial'}\n)\n\n\n# update the local dropdown based regional selection\ndef update_state_dropdown(*args):\n    country = country_dropdown.value\n    state_dropdown.options = sorted(\n        [s for s in data[data['Country\/Region']==country]['Province\/State'].unique() if isinstance(s,str)]\n    )\n    \ncountry_dropdown.observe(update_state_dropdown, 'value')\n\n# plot the results\n@interact\ndef create_geo_timeseries(country=country_dropdown, state=state_dropdown, data=fixed(data), cum=cum_dropdown, t=type_dropdown,\n                         r=rolling_avg_window):\n    \"\"\" Creates a timeseries plot of COVID cases for a specific geography\n    \n    :param country: country for the time series\n    :param state: state for the time series\n    :return: plotly figure\n    \"\"\"\n    \n    data = data.groupby(['Country\/Region', 'Province\/State', 'ObservationDate']).sum().reset_index()\n    \n    # these are the three traces we will plot for each geography\n    types=['Confirmed', 'Deaths', 'Recovered']\n    colors={\n        'Confirmed': 'orange',\n        'Deaths': 'red',\n        'Recovered': 'green'\n    }\n    \n    return go.FigureWidget(\n        data=[\n            go.Scatter(\n            #go.Bar(\n                name=t,\n                x=data[data['Province\/State'] == state]['ObservationDate'],\n                y=data[data['Province\/State'] == state][t].diff().rolling(r).mean() \\\n                    if cum == 'New' else data[data['Province\/State'] == state][t],\n                marker_color=colors[t]\n            )\n            #for t in types\n        ],\n        layout=go.Layout(\n            title='{}, {} - {} COVID-19 {} {}'.format(\n                state, \n                country, \n                cum if cum == 'Cumulative' else 'Daily', \n                'Confirmed Cases' if t == 'Confirmed' else t, \n                '' if cum == 'Cumulative' else '<br> (Rolling {} Day Average)'.format(r)\n            ),\n            template='presentation',\n            #yaxis_type='log'\n        )\n    )\n","d67687e4":"us_states=[\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\n  \"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\n  \"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\n  \"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\n  \"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\n  \"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\n  \"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\n  \"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"]\n\n# select only the US states (so we don't double count by including the cities and counties)\nstate_data = data[data['Province\/State'].isin(us_states)].groupby(['Province\/State', 'ObservationDate']).sum().reset_index()\n\n# look at the data only after cases started picking up in the US\nstate_data = state_data[state_data['ObservationDate'] >= pd.to_datetime('03\/10\/2020')]\n\n# rank the states by number of confirmed cases\nstates_ranked = state_data[state_data['ObservationDate']==max_date].groupby(['Province\/State']).sum().reset_index().sort_values(\n    by='Confirmed', ascending=False)['Province\/State'].to_list()\n\n\ny_axis_scale = widgets.ToggleButtons(\n    options=[('Linear','-'), ('Logarithmic','log')],\n    description='Y-Axis Scale:',\n    \n    #button_style='info', # 'success', 'info', 'warning', 'danger' or ''\n)\n\ndata_category = widgets.ToggleButtons(\n    options=['Confirmed','Deaths'],\n    description='Select Data:',\n)\n\n\n@interact \ndef all_states(y_axis_scale=y_axis_scale, data_category=data_category):\n        \n    return go.FigureWidget(\n            data=[\n                # stacked bars for the states\n                go.Bar(\n                    name=state,\n                    x=state_data[state_data['Province\/State'] == state]['ObservationDate'],\n                    y=state_data[state_data['Province\/State'] == state][data_category]\n                )\n                for state in reversed(states_ranked)\n            ] + [\n\n                # line with sum\n                go.Scatter(\n                    name='US Total',\n                    x=state_data.groupby('ObservationDate').sum().index,\n                    y=state_data.groupby('ObservationDate').sum()[data_category],\n                    #text=state_data.groupby('ObservationDate').sum()[data_category],\n                    #textposition='top center',\n                    mode='lines+markers'#+text'\n                )\n            ],\n            layout=go.Layout(\n                title='US {} COVID-19 Cases - Ranked by State'.format(data_category),\n                yaxis_title='{} Cases'.format(data_category),\n                yaxis_type=y_axis_scale,\n                template='presentation',\n                barmode='stack'\n            )\n        )","edb42b83":"us_states=[\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\n  \"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\n  \"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\n  \"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\n  \"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\n  \"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\n  \"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\n  \"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"]\n\n\ny_axis_scale3 = widgets.ToggleButtons(\n    options=[('Linear','-'), ('Logarithmic','log')],\n    description='Y-Axis Scale:',\n)\n\ndata_category3 = widgets.ToggleButtons(\n    options=['Confirmed','Deaths'],\n    description='Select Data:',\n)\n\n\n@interact \ndef us_new_cases(y_axis_scale=y_axis_scale3, data_category=data_category3):\n        \n    return go.FigureWidget(\n            data=[\n                # line with sum\n                go.Scatter(\n                    name='US Total',\n                    x=state_data.groupby('ObservationDate').sum().index,\n                    y=state_data.groupby('ObservationDate').sum()[data_category] \\\n                        .diff() \\\n                        .rolling(7) \\\n                        .mean()#,\n#                     mode='lines+markers'#+text'\n                )\n            ],\n            layout=go.Layout(\n                title='US Daily Daily COVID {}'.format(\n                    'Confirmed Cases' if data_category == 'Confirmed' else data_category),\n                yaxis_title='{} Cases'.format(data_category),\n                yaxis_type=y_axis_scale,\n                template='presentation',\n                barmode='stack'\n            )\n        )","d78e7b50":"# first rank countries by cases \ntop_countries = data[data['ObservationDate']==max_date].groupby(['Country\/Region']).sum().reset_index().sort_values(\n    by='Confirmed', ascending=False)['Country\/Region'].to_list()\n\nby_country = data.groupby(['Country\/Region', 'ObservationDate']).sum().reset_index()\n\n\ny_axis_scale2 = widgets.ToggleButtons(\n    options=[('Linear','-'), ('Logarithmic','log')],\n    description='Y-Axis Scale:',\n)\n\ndata_category2 = widgets.ToggleButtons(\n    options=['Confirmed','Deaths'],\n    description='Select Data:',\n)\n\ncum_dropdown2 = widgets.Dropdown(\n    options=['Cumulative', 'New'],\n    value='New',\n    description='Cumulative or New',\n    style={'description_width': 'initial'}\n)\n\nrolling_avg_window2 = widgets.IntSlider(\n    value=7,\n    min=1,\n    max=14,\n    step=1,\n    description='Rolling Avg # Days):',\n    style={'description_width': 'initial'}\n)\n\n\n@interact\ndef all_countries(\n    y_axis_scale=y_axis_scale2, \n    data_category=data_category2): #, \n#     cum=cum_dropdown2, \n#     r=rolling_avg_window2):\n    \n    return go.FigureWidget(\n            data=[\n                go.Bar(\n                    name=c,\n                    x=by_country[by_country['Country\/Region'] == c]['ObservationDate'],\n                    y=by_country[by_country['Country\/Region'] == c][data_category]\n                )\n                for (i,c) in enumerate(reversed(top_countries)) if i >= (len(top_countries) - 50)\n                #for c in reversed(top_countries)\n            ] + [\n                go.Scatter(\n                    name='Global Total',\n                    x=by_country.groupby('ObservationDate').sum().index,\n                    y=by_country.groupby('ObservationDate').sum()[data_category],\n\n                    #text=by_country.groupby('ObservationDate').sum()[data_category],\n                    #textposition='top center',\n                    mode='lines+markers'#+text'\n                )\n            ],\n            layout=go.Layout(\n                title='Global COVID-19 {} Cases - Ranked by Country'.format(data_category),\n                template='presentation',\n                barmode='stack',\n                yaxis_type=y_axis_scale\n            )\n        )","37193dfc":"## Interactive Timeseries (with Dropdown for country and state)\n**NOTE: The workbook must be open for editing to use the dropdown functionality in the graph below**","707e9259":"## Total Worldwide Confirmed Cases - Ranked by Country","cae9d5a6":"## Show new cases per day for the US","6b681ba5":"# COVID-19 Time Series by Geography\n\nThis dashboard allows users to view a time series of COVID-19 cases for particular geographic regions.\n\n**In order to use the dropdown functionality, the notebook needs to be opened for editing. The dropddowns (i.e. `ipywidgets`) won't show up while the notebook is in static presentation mode.\n**\n\nNote: The data for the individual states is pretty consistent, but when you look at county or city data (specifically for the United States), the entries are inconsistent.\n\nData source: [Kaggle - Novel Corona Virus 2019 Dataset](https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset)","5bdc14f6":"## Total US Confirmed Cases - Ranked by State"}}