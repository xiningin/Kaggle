{"cell_type":{"9a291342":"code","53d525d9":"code","c2677633":"code","9610e216":"code","43a1fe92":"code","511e38ce":"code","b6ad1a69":"code","4bc11934":"markdown"},"source":{"9a291342":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","53d525d9":"#Web Access and parsing\nimport urllib.request, urllib.parse\nfrom bs4 import BeautifulSoup\n\n# Importing Data\nnetflix_data = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\nnetflix_data.head() #Displaying first few entries\n#np.where(pd.isnull(netflix_data.release_year)) #checking for empty values for release years, None found, **might implement later just in case**","c2677633":"#IMDB Access\/Search and Parse HTML to grab title_ID\ndef grab_ID(title,year,media_type):\n    encoding = 'utf-8' #standard internet encoding\n    find_url = 'https:\/\/www.imdb.com\/find' #base search URL for IMDB\n    values = {'q':title} # What we are searching for\n    query = urllib.parse.urlencode(values).encode(encoding) #parsing the query and encoding correctly for web to understand it\n    req = urllib.request.Request(find_url,query) #request: the \"link\" you can paste in the search bar\n    resp = urllib.request.urlopen(req) #sending the request and recording the response\n    html = BeautifulSoup(resp,\"html\") #using Beautiful Soup 4 to process the HTML response\n    #Finding top 3 results through <td> tags with result text class in the HTML response. <td> is a table cell in HTML\n    search = html.findAll(\"td\", {\"class\": \"result_text\"})[:3]\n    if len(search) > 0:\n        for item in search: \n            if  str(item.text).find(str(year)) > 0:\n                if str(media_type) == \"TV Show\":\n                    if str(item.text).find(\"Series\") > 0:\n                        title_names = str(item.text)\n                        title_IDs = str(item.a[\"href\"])\n                        #confidence = \n                        break\n                    else:\n                        #confidence = \n                        title_names = str(item.text)\n                        title_IDs = str(item.a[\"href\"])\n                        break\n                else:\n                    title_names = str(item.text)\n                    title_IDs = str(item.a[\"href\"])\n                    #confidence =\n                    break\n\n            else:\n                if str(media_type) == \"TV Show\":\n                    if str(item.text).find(\"Series\") > 0:\n                        title_names = str(item.text)\n                        title_IDs = str(item.a[\"href\"])\n                        #confidence =\n                        break\n                    else:\n                        title_names = str(item.text)\n                        title_IDs = str(item.a[\"href\"])\n                        #confidence =\n                        break\n                else:\n                    title_names = \"Not Found\"\n                    title_IDs = \"Not Found\"\n                    #confidence =\n                    break\n    else:\n        title_names = \"Not Found\"\n        title_IDs = \"Not Found\"\n        #confidence =\n\n    return title_names, title_IDs","9610e216":"#Acessing IMDB and parse HTML to grab Ratings\ndef grab_Rating(title_ID):\n    imdb_url = \"https:\/\/www.imdb.com\" #base imdb website\n    if title_ID == \"Not Found\":\n        rating = \"Not Found\"\n    else:\n        target_url = imdb_url + title_ID #url for title\n        target_url = target_url\n        resp = urllib.request.urlopen(target_url)\n        html = BeautifulSoup(resp,\"html\") #using Beautiful Soup 4 to process the HTML responce\n        search = html.findAll(\"div\", {\"class\": \"ratingValue\"})\n        if len(search) > 0:\n            for item in search: #Grabing rating text\n                rating = str(item.strong['title'])\n        else:\n            rating = \"Not Found\"\n\n    return rating\n","43a1fe92":"IMDB_rating = []\nIMDB_titleID = []\nIMDB_title_name = []\nNumShows = len(netflix_data.index)\nfor i in range(NumShows):\n    title_name, title_ID = grab_ID(netflix_data.title[i],netflix_data.release_year[i],netflix_data.type[i])\n    IMDB_titleID.append(title_ID)\n    IMDB_title_name.append(title_name)\n    rating = grab_Rating(title_ID)\n    IMDB_rating.append(rating)\n    if i%100 == 0:\n        print(\"Progress is: \", i)\n    #print(netflix_data.title[i], \"\\t\\t\" title_name,\"\\t\\t\" , i)","511e38ce":"#Writing outputs\noutput = pd.DataFrame({'IMDB_titleID': IMDB_titleID, 'IMDB_rating': IMDB_rating, 'IMDB_title_name': IMDB_title_name})\noutput_name = 'IMDB_results_' + 'jan-28-2020' + '.csv'\noutput.head()\noutput.to_csv(output_name, index=False)\nprint(\"Complete!\")","b6ad1a69":"\n#Testing Cell\n#loco = 290\n#x = netflix_data.title[loco]\n#y = netflix_data.type[loco]\n#z = netflix_data.release_year[loco]\n#netflix_data.loc[loco]\n\n#print(x, z, y)\n#title_name, title_ID = grab_ID(x,z, y)\n#print(title_name)\n#print(title_ID)\n#rating = grab_Rating(title_ID)\n#print(rating)\n#print(len(netflix_data.index))","4bc11934":"This script imports the \"Netflix Movies and TV Shows\" dataset from https:\/\/www.kaggle.com\/shivamb\/netflix-shows\/tasks uploaded by Shivam Bansal. It then queries IMDB to fetch ratings.\n\nScript uses NumPy, Pandas, URLlib and BeautifulSoup4. This script uses the Internet and is **SLOW**. While there is an option of downloading a dataset directly from IMDB (https:\/\/www.imdb.com\/interfaces\/) or use of a json API\/ Third-Party API, direct search and fetch was chosen to keep the ratings easily updatable as more people review given shows. \n\nThe script is **not perfect** (Known issues): \n    1. Some shows do not exist on IMDB\n    2. Some shows do not exist on IMDB but the function grabs the top hit, grabbing the wrong rating\n    3. Some shows have wrong release years, Netflix uses last season's release year while IMDB uses initial release \n    4. Some shows have matching names\n\nFuture Work:\n    1. The grab_ID function seems redundant and can be optimized greatly\n    *NOTE: Some of the redundancy is deliberate to allow room for a 'confidence' score. This can be an indicator of how sure the function was about the title_ID it grabbed.*\n    2. Addition of the confidence score.\n    3. Addition of a check_accuracy function which compares grabbed (IMDB) title names with the netflix_data title names and removes bad entries.\n    4. Addition of a check_ID_present function which reads the output of a previous run and uses that data for title_ID's instead of performing a full run. \n    5. Addition of an update function. The function will only go through using the previous title_ID's by calling check_ID_present and just update the ratings as they change on IMDB frequently.\n    6. Addition of a fill_missing function. This will go through a previous run output by calling check_ID_present and only attempt to search for missing entries' title_ID's on IMDB.\n    \n"}}