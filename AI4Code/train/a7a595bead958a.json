{"cell_type":{"23ad6083":"code","d3261828":"code","223c7125":"code","c6371ac9":"code","cdc2ccd6":"code","0f4635e3":"code","70111a48":"code","1582d823":"code","d8d3797e":"code","662216e3":"code","754bf77d":"code","eb92b1f0":"code","df957f5e":"code","477563fd":"code","d17338e6":"code","9b4f0007":"code","38bd3dfb":"code","6fde3737":"code","44b3ea76":"code","619ad1ac":"code","7443ea6f":"code","7605a72a":"markdown"},"source":{"23ad6083":"import sys\nsys.path.insert(0, '..\/input\/siim-acr-pneumothorax-segmentation')\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pathlib import Path","d3261828":"DATA_PATH = Path(\"..\/input\/siim-acr-pneumothorax-segmentation-data\/pneumothorax\")\nprint(DATA_PATH)","223c7125":"TRAIN = DATA_PATH \/ \"dicom-images-train\"\nTEST = DATA_PATH \/ \"dicom-images-test\"","c6371ac9":"import glob2","cdc2ccd6":"print(TRAIN)","0f4635e3":"train = glob2.glob(os.path.join(TRAIN, '**\/*.dcm'))","70111a48":"count= 0\nfor f in train:\n    #print(f.split('\/')[7:])\n    count = count + 1\nprint('Total training file: ', count)","1582d823":"test = glob2.glob(os.path.join(TEST, '**\/*.dcm'))","d8d3797e":"count = 0\nfor f in test:\n    #print(f.split('\/')[7:])\n    count = count + 1\nprint('Total test file: ', count)","662216e3":"import pydicom","754bf77d":"images_dict = {}\ncount = 0\nfor f in train:\n    #print(f.split('\/')[7:])\n    imageid = f.split('\/')[7:][0]\n    imageid = imageid.strip('.dcm')\n    #print(imageid)\n    images_dict[imageid] = f \n    count = count+1\nprint('Training images: ', count)","eb92b1f0":"print(images_dict['1.2.276.0.7230010.3.1.4.8323329.10026.1517875221.22915'])","df957f5e":"import matplotlib.pyplot as plt","477563fd":"fig, ax = plt.subplots(nrows=1, ncols=4, figsize=(30,30))\ni = 0\nfor key, val in images_dict.items():\n    img = pydicom.dcmread(images_dict[key])\n    ax[i].imshow(img.pixel_array, cmap=plt.cm.bone)\n    i = i + 1\n    if i == 4: break","d17338e6":"import random\nfig, ax = plt.subplots(nrows=1, ncols=4, figsize=(30,30))\ni = 0\nfor key in random.sample(list(images_dict.keys()),4):\n    img = pydicom.dcmread(images_dict[key])\n    ax[i].imshow(img.pixel_array, cmap=plt.cm.bone)\n    i = i + 1","9b4f0007":"no_mask_images=['1.2.276.0.7230010.3.1.4.8323329.11566.1517875233.640521',\n'1.2.276.0.7230010.3.1.4.8323329.11104.1517875231.169401',\n'1.2.276.0.7230010.3.1.4.8323329.31801.1517875156.929061',\n'1.2.276.0.7230010.3.1.4.8323329.11584.1517875233.731531',\n'1.2.276.0.7230010.3.1.4.8323329.11557.1517875233.601090',\n'1.2.276.0.7230010.3.1.4.8323329.3352.1517875177.433385',\n'1.2.276.0.7230010.3.1.4.8323329.14557.1517875252.690062',\n'1.2.276.0.7230010.3.1.4.8323329.4373.1517875182.554858',\n'1.2.276.0.7230010.3.1.4.8323329.2563.1517875173.431928',\n'1.2.276.0.7230010.3.1.4.8323329.12062.1517875237.179186',\n'1.2.276.0.7230010.3.1.4.8323329.4468.1517875183.20323',\n'1.2.276.0.7230010.3.1.4.8323329.4843.1517875185.73985',\n'1.2.276.0.7230010.3.1.4.8323329.10231.1517875222.737143',\n'1.2.276.0.7230010.3.1.4.8323329.10407.1517875223.567351',\n'1.2.276.0.7230010.3.1.4.8323329.3089.1517875176.36192',\n'1.2.276.0.7230010.3.1.4.8323329.11577.1517875233.694347',\n'1.2.276.0.7230010.3.1.4.8323329.2309.1517875172.75133',\n'1.2.276.0.7230010.3.1.4.8323329.4134.1517875181.277174',\n'1.2.276.0.7230010.3.1.4.8323329.13415.1517875245.218707',\n'1.2.276.0.7230010.3.1.4.8323329.10599.1517875224.488727',\n'1.2.276.0.7230010.3.1.4.8323329.1068.1517875166.144255',\n'1.2.276.0.7230010.3.1.4.8323329.13620.1517875246.884737',\n'1.2.276.0.7230010.3.1.4.8323329.4996.1517875185.888529',\n'1.2.276.0.7230010.3.1.4.8323329.5278.1517875187.330082',\n'1.2.276.0.7230010.3.1.4.8323329.2630.1517875173.773726',\n'1.2.276.0.7230010.3.1.4.8323329.3714.1517875179.128897',\n'1.2.276.0.7230010.3.1.4.8323329.5543.1517875188.726955',\n'1.2.276.0.7230010.3.1.4.8323329.3321.1517875177.247887',\n'1.2.276.0.7230010.3.1.4.8323329.10362.1517875223.377845',\n'1.2.276.0.7230010.3.1.4.8323329.2187.1517875171.557615',\n'1.2.276.0.7230010.3.1.4.8323329.3791.1517875179.436805',\n'1.2.276.0.7230010.3.1.4.8323329.5087.1517875186.354925',\n'1.2.276.0.7230010.3.1.4.8323329.32688.1517875161.809571',\n'1.2.276.0.7230010.3.1.4.8323329.11215.1517875231.757436',\n'1.2.276.0.7230010.3.1.4.8323329.32302.1517875159.778024',\n'1.2.276.0.7230010.3.1.4.8323329.2083.1517875171.71387',\n'1.2.276.0.7230010.3.1.4.8323329.13378.1517875244.961609']","38bd3dfb":"for id in no_mask_images:\n    del images_dict[id]","6fde3737":"import cv2\nimport zipfile\nprint(cv2.__version__)","44b3ea76":"out_sz = (256,256)","619ad1ac":"OUTPUT = '..\/working\/train-images\/'\nif not os.path.exists(OUTPUT):\n    os.mkdir(OUTPUT)","7443ea6f":"i = 0\nwith zipfile.ZipFile(os.path.join(OUTPUT, 'train-images-256.zip'), 'w') as zip:\n    for key in images_dict.keys():\n        img = pydicom.dcmread(images_dict[key])\n        file = key+'.png'\n        #print(file)\n        _, png = cv2.imencode('.png', cv2.resize(img.pixel_array, out_sz))\n        #print(png)\n        zip.writestr(file, png)\n        i = i + 1\nprint('Total images written: ', i)   ","7605a72a":"There are actually only 10675 image masks, 37 images are without annotation. These to be removed manually"}}