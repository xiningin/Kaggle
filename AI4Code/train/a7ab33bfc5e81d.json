{"cell_type":{"9f500f98":"code","f010dcb1":"code","453e6295":"code","2e4e1b1d":"code","a3d2efa7":"code","3c1bb9db":"code","628bb969":"code","99a8f47f":"code","8bfa4f48":"code","56e1f2ed":"code","7d9a130b":"code","12f0b9f6":"code","fe0b28f0":"code","66661ddd":"code","9b337851":"code","502c6bc3":"code","8c0d8573":"code","f5287096":"code","83802c67":"code","d798c63f":"code","3dce0abb":"code","80d99a5a":"code","7b002f0e":"code","71bd1283":"code","d8ca1459":"code","e83c0ceb":"code","6cdffdc0":"markdown","cdc3cc5f":"markdown","787cf5d5":"markdown","58d2b8c9":"markdown","d017ddc3":"markdown","8cea0164":"markdown","0dd976a3":"markdown","eca2c7a5":"markdown","e37cb045":"markdown","82e0e3ba":"markdown","3f85c70f":"markdown"},"source":{"9f500f98":"import numpy as np \nimport pandas as pd \n\n\nimport os\n#\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306e\u8868\u793a\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","f010dcb1":"#\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n#\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n#\u30b5\u30f3\u30d7\u30eb\u63d0\u51fa\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\nsample_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","453e6295":"#(\u884c\u6570,\u5217\u6570)\u3092\u8868\u793a\ntrain.shape","2e4e1b1d":"#\u4e0a\u304b\u30895\u884c\u3092\u8868\u793a\ntrain.head()","a3d2efa7":"import math\n#\u53ef\u8996\u5316\u7528\u30e2\u30b8\u30e5\u30fc\u30eb\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# \u76f8\u95a2\u4fc2\u6570\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u8868\u793a\nsns.heatmap(train.corr(),annot=True,fmt='.2f')","3c1bb9db":"#\u5e74\u9f62\u6607\u9806\ntrain[\"Age\"].value_counts().sort_index()","628bb969":"#\u5e74\u9f62\u6607\u9806\ntest[\"Age\"].value_counts().sort_index()","99a8f47f":"# \u5e74\u9f62\u309210\u6b73\u533a\u5207\u308a\u3067\u30d3\u30cb\u30f3\u30b0\nage_list = [0, 10, 20, 30, 40, 50, 100]\nage_span_name_list = ['0-10', '10-20', '20-30', '30-40', '40-50','50-']\ntrain[\"Age_span\"] = pd.cut(train[\"Age\"], bins=age_list, labels=age_span_name_list)\ntest[\"Age_span\"] = pd.cut(test[\"Age\"], bins=age_list, labels=age_span_name_list)","8bfa4f48":"fig=[]\n#\u5927\u67a0\u8a2d\u5b9a\nfigure,ax = plt.subplots(4,2,figsize=(15,15),sharey=True)\n#\u5404\u9805\u76ee\u4e00\u89a7\nfig.append(sns.countplot(x=\"Survived\",data=train,ax=ax[0,0]))\nfig.append(sns.countplot(x=\"Sex\",data=train,ax=ax[0,1]))\nfig.append(sns.countplot(x=\"Pclass\",data=train,ax=ax[1,0]))\nfig.append(sns.countplot(x=\"SibSp\",data=train,ax=ax[1,1]))\nfig.append(sns.countplot(x=\"Parch\",data=train,ax=ax[2,0]))\nfig.append(sns.countplot(x=\"Embarked\",data=train,ax=ax[2,1]))\nfig.append(sns.countplot(x=\"Age_span\",data=train,ax=ax[3,0]))\n#\u67a0\u524a\u9664\nfigure.delaxes(ax[3, 1])\n\n#\u30c7\u30fc\u30bf\u6570\u8868\u793a\u7528\u95a2\u6570\ndef output_count_to_graph(fig):\n    for i, bar in enumerate(fig.patches):\n        #\u30b5\u30f3\u30d7\u30eb\u6570\n        height = bar.get_height()\n        if math.isnan(height):\n            continue\n        #\u30c6\u30ad\u30b9\u30c8\u6a2a\u8ef8\u4f4d\u7f6e\n        x_position = bar.get_width()\/2+bar.get_x()\n        #\u30c6\u30ad\u30b9\u30c8\u7e26\u8ef8\u4f4d\u7f6e\n        y_position = height\/2\n        #\u30c6\u30ad\u30b9\u30c8\u51fa\u529b\n        fig.text(\n            x_position,\n            y_position,\n            '{}'.format(int(height)),\n            ha='center',\n            va='bottom', \n            fontweight='bold', \n            fontsize=15)\n        \nfor i in range(7):\n    output_count_to_graph(fig[i])","56e1f2ed":"#\u5404\u30ab\u30e9\u30e0\u5225\u306b\u751f\u6b7b\u3092\u53ef\u8996\u5316\nfig=[]\n#\u5927\u67a0\u8a2d\u5b9a\nfigure,ax = plt.subplots(3,2,figsize=(15,15),sharey=True)\n# \u4f59\u767d\u8a2d\u5b9a\nplt.subplots_adjust(wspace=0.2, hspace=0.4)\n\n#\u30b0\u30e9\u30d5\u4f5c\u6210\nfig.append(sns.countplot(x=\"Sex\",hue=\"Survived\",data=train,ax=ax[0,0]))\nfig.append(sns.countplot(x=\"Pclass\",hue=\"Survived\",data=train,ax=ax[0,1]))\nfig.append(sns.countplot(x=\"SibSp\",hue=\"Survived\",data=train,ax=ax[1,0]))\nfig.append(sns.countplot(x=\"Parch\",hue=\"Survived\",data=train,ax=ax[1,1]))\nfig.append(sns.countplot(x=\"Embarked\",hue=\"Survived\",data=train,ax=ax[2,0]))\nfig.append(sns.countplot(x=\"Age_span\",hue=\"Survived\",data=train,ax=ax[2,1]))\n\nfor i in range(6):\n    output_count_to_graph(fig[i])\n\n# \u51e1\u4f8b(anchor)\u3092\u53f3\u4e0a\u306b\u7f6e\u304f\u51e6\u7406\nfig[2].legend_._loc=1\nfig[3].legend_._loc=1","7d9a130b":"#\u30e6\u30cb\u30fc\u30af\u6570\u3092\u8868\u793a\ntrain.nunique()","12f0b9f6":"test.nunique()","fe0b28f0":"#\u6b20\u640d\u5024\u306e\u78ba\u8a8d\ntrain.isnull().sum()","66661ddd":"#\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3082\u78ba\u8a8d\ntest.isnull().sum()","9b337851":"Fare_mean = test[\"Fare\"].mean()\nCabin_mode = train[\"Cabin\"].mode()\nEmbarked_mode = train[\"Embarked\"].mode()[0]\nAge_median = train[\"Age\"].median()\n\nprint(f\"Fare\u5e73\u5747\u5024\uff1a{Fare_mean}\")\nprint(f\"Embarked\u6700\u983b\u5024\uff1a{Embarked_mode}\")\nprint(f\"Age\u4e2d\u592e\u5024\uff1a{Age_median}\")\n\ntrain[\"Embarked\"].fillna(Embarked_mode,inplace=True)\ntrain[\"Age\"].fillna(Age_median,inplace=True)\n\ntest[\"Fare\"].fillna(Fare_mean,inplace=True)\ntest[\"Embarked\"].fillna(Embarked_mode,inplace=True)\ntest[\"Age\"].fillna(Age_median,inplace=True)\n\ntrain[\"Age_span\"] = pd.cut(train[\"Age\"], bins=age_list, labels=age_span_name_list)\ntest[\"Age_span\"] = pd.cut(test[\"Age\"], bins=age_list, labels=age_span_name_list)","502c6bc3":"#\u8aac\u660e\u5909\u6570\nX_column = [\"Pclass\",\"Sex\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\",\"Age_span\"]\n#\u76ee\u7684\u5909\u6570\ny_column = [\"Survived\"]\n\n#\u8a13\u7df4\u30c7\u30fc\u30bf\nX = train.loc[:,X_column]\ny = train.loc[:,y_column]\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ntest_X = test.loc[:,X_column]","8c0d8573":"#\u30c0\u30df\u30fc\u30b3\u30fc\u30c9\u5316(\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0)\nX = pd.get_dummies(X)\ntest_X = pd.get_dummies(test_X)","f5287096":"X.head()","83802c67":"#\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u7528\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn.model_selection import train_test_split\n#\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\n# 7:3\u306b\u5206\u3051\u3066\u9032\u3081\u308b\ntrain_X, val_X, train_y, val_y = train_test_split(X,\n                                                  y, \n                                                  test_size=0.3, \n                                                  random_state=1)","d798c63f":"#\u6c7a\u5b9a\u6728\u3092\u4f7f\u3046\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(min_samples_leaf = 0.01,\n                               max_depth = 5,\n                               random_state=1)\nmodel = model.fit(train_X,train_y)\npredict = model.predict(val_X)\n\n#\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u7387\u306e\u8868\u793a\naccuracy_score(val_y, predict)","3dce0abb":"import graphviz\nfrom sklearn.tree import export_graphviz\ndot_data = export_graphviz(\n                        model,\n                        feature_names = X.columns,\n                        filled = True,\n                        rounded = True,\n                        out_file=None\n                    )\ngraphviz.Source(dot_data)","80d99a5a":"#\u6df7\u540c\u884c\u5217\u306e\u8868\u793a(\u6ce8\u610f)\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(val_y, predict,labels=[1,0])\ncm_labeled = pd.DataFrame(cm, columns=[\"\u751f\u5b58\u3068\u4e88\u6e2c\",\"\u6b7b\u4ea1\u3068\u4e88\u6e2c\"], index=[\"\u751f\u5b58\",\"\u6b7b\u4ea1\"])\ncm_labeled","7b002f0e":"#\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\ntest_y = model.predict(test_X)","71bd1283":"#\u30b5\u30f3\u30d7\u30eb\u63d0\u51fa\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nsample_submission.head()","d8ca1459":"submission = pd.DataFrame(\n    {\"PassengerId\": test[\"PassengerId\"], \"Survived\": test_y}\n)","e83c0ceb":"#\u63d0\u51fa\nsubmission.to_csv(\"submission.csv\",index=False)","6cdffdc0":"# \u6c7a\u5b9a\u6728\u3068\u306f\n\u76ee\u7684\u5909\u6570(\u5f93\u5c5e\u5909\u6570)\u3092\u8aac\u660e\u5909\u6570\u3067\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u624b\u6cd5\u306e1\u3064\u3002 <br>\n\u8aac\u660e\u5909\u6570\u304c\u96e2\u6563\u5024\u306e\u5834\u5408\u306f\u30ab\u30c6\u30b4\u30ea\u6bce\u306b,\u9023\u7d9a\u5024\u306e\u5834\u5408\u306f\u95be\u5024\u3092\u8a2d\u3051\u308b\u3053\u3068\u3067\u5206\u985e\u3092\u884c\u3046\u3002 <br>\n\u4e0b\u8a18\u306f\u8aac\u660e\u5909\u6570\u304c\u5168\u3066\u96e2\u6563\u5024\u306e\u5834\u5408\u3002\n![](https:\/\/upload.wikimedia.org\/wikipedia\/ja\/5\/5d\/Decision_tree_model_ja.png)\n\u203b[Wikipedia](https:\/\/ja.wikipedia.org\/wiki\/%E6%B1%BA%E5%AE%9A%E6%9C%A8)\u3088\u308a\u629c\u7c8b","cdc3cc5f":"# 4.\u30c7\u30fc\u30bf\u53ef\u8996\u5316","787cf5d5":"# \u8ab2\u984c2\ntrain,test\u7528\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u57cb\u3081\u3092\u4e0b\u8a18\u3067\u884c\u3046\u3053\u3068\u3002<bt>\n1. Fare\u3092(test\u30c7\u30fc\u30bf\u5185\u306e)\u5e73\u5747\u5024\u3067\n2. Embarked\u3092(train\u30c7\u30fc\u30bf\u5185\u306e)\u6700\u983b\u5024\u3067\n3. Age\u3092(train\u30c7\u30fc\u30bf\u5185\u306e)\u4e2d\u592e\u5024\u3067\n4. Age_span\u3092Age\u306b\u5fdc\u3058\u3066\n","58d2b8c9":"# 3.\u30c7\u30fc\u30bf\u6982\u8981\n\u53c2\u8003<br>\nhttps:\/\/www.kaggle.com\/c\/titanic\/data <br>\n","d017ddc3":"# 2.\u30d5\u30a1\u30a4\u30eb\u6982\u8981\n&emsp; train.csv &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;\uff1a\u8a13\u7df4\u30c7\u30fc\u30bf <br>\n&emsp; gender_submission.csv\uff1a\u30b5\u30f3\u30d7\u30eb\u63d0\u51fa\u30c7\u30fc\u30bf(\u7537:0 \u5973:1) <br>\n&emsp; test.csv &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;\uff1a\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf","8cea0164":"|  \u30ab\u30e9\u30e0\u540d  |  \u5185\u5bb9  |\u3000\u578b\u3000|\n| ---- | ---- | ---- |\n|  PassengerId  |  \u4e57\u8239\u5ba2ID(\u30e6\u30cb\u30fc\u30af)  | int |\n|  Survived  |  \u751f\u6b7b(0:\u6b7b\u4ea1 1:\u751f\u5b58)  | int |\u3000\u2190\u76ee\u7684\u5909\u6570\n|  Pclass  |  \u7b49\u7d1a(1\u7d1a,2\u7d1a,3\u7d1a)  | int |\n|  Name  |  \u4e57\u8239\u5ba2\u306e\u540d\u524d  | object |\u3000\u2190\u52a0\u5de5\u5fc5\u9808\n|  Sex  |  \u6027\u5225(\u7537\u6027,\u5973\u6027)  | object |\n|  Age  |  \u5e74\u9f62\u203b1   | float |\n|  SibSp  |  \u540c\u8239\u3057\u305f\u5144\u5f1f\u59c9\u59b9(Siblings)\u3068<br>\u914d\u5076\u8005(Spouses)\u306e\u4eba\u6570\u203b2  | int |\n|  Parch  |  \u540c\u8239\u3057\u305f\u89aa(Parents)\u3068<br>\u5b50(Children)\u306e\u4eba\u6570\u203b3  | int |\n|  Ticket  |  \u30c1\u30b1\u30c3\u30c8\u756a\u53f7 |object  |\n|  Fare  |  \u8239\u8cc3 | float  |\n|  Cabin  |  \u5ba2\u5ba4\u756a\u53f7 | object  | \n|  Embarked  |  \u4e57\u8239\u6e2f | object  |\n<br>\n\u203b1\uff1a1\u6b73\u672a\u6e80\u306e\u5834\u5408\u306f\u5c0f\u6570,\u63a8\u5b9a\u5e74\u9f62\u306e\u5834\u5408\u306fxx.5<br>\n\u203b2\uff1a\u5144\u5f1f,\u59c9\u59b9(\u7fa9\u7406\u3082\u542b\u3080)<br>\n\u203b3\uff1a\u7236\u89aa,\u6bcd\u89aa(\u7fa9\u7406\u306f\u542b\u307e\u306a\u3044),\u606f\u5b50,\u5a18(\u7fa9\u7406\u542b\u3080)<br>\n&emsp;&emsp; \u5b50\u4f9b\u306b\u3082\u95a2\u308f\u3089\u305aParch\u304c0\u306e\u4eba\u9593\u304c\u3044\u308b\u304c,\u4e73\u6bcd\u3068\u4e57\u8239\u3057\u3066\u3044\u308b\u70ba","0dd976a3":"# \u8ab2\u984c1\u30002min\n1. \u30b0\u30e9\u30d5\u304b\u3089\u8aad\u307f\u53d6\u308c\u308b\u3053\u3068\u306f\uff1f <br><br>\n ex.\u5973\u6027\u306e\u65b9\u304c\u751f\u5b58\u78ba\u7387\u304c\u9ad8\u3044 <br><br>\n2. \u8ffd\u52a0\u3057\u3066\u8abf\u67fb\u3057\u305f\u3044\u4e8b\u306f\uff1f<br>\n ex.\u6027\u5225+\u5e74\u4ee3\u3067\u306e\u751f\u5b58\u78ba\u7387\u3092\u898b\u305f\u3044","eca2c7a5":"|    |  \u751f\u5b58\u3068\u4e88\u6e2c  |\u3000\u6b7b\u4ea1\u3068\u4e88\u6e2c\u3000|\n| ---- | ---- | ---- |\n|  \u7b54\u3048\uff1a\u751f\u5b58  |  \u771f\u967d\u6027  | \u507d\u9670\u6027 |\n|  \u7b54\u3048\uff1a\u6b7b\u4ea1  |  \u507d\u967d\u6027  | \u771f\u9670\u6027 |\n","e37cb045":"# \u793e\u5185kaggle\u30cf\u30f3\u30ba\u30aa\u30f3\u8b1b\u5ea7~\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u7de8~\n\n<h1>1. \u57fa\u672c\u64cd\u4f5c<\/h1>\n  &emsp;Ctrl+Shift+P \uff1a\u30ad\u30fc\u30dc\u30fc\u30c9\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u306e\u8868\u793a\u3000<br>\n  &emsp;Escape &emsp;&emsp;       \uff1a\u30b3\u30de\u30f3\u30c9\u30e2\u30fc\u30c9\u3078\u306e\u79fb\u884c <br>\n  &emsp;Enter &emsp;&emsp;&emsp;        \uff1a\u7de8\u96c6\u30e2\u30fc\u30c9\u3078\u306e\u79fb\u884c <br>\n  &emsp;Shift+Enter &ensp;\uff1a\u5b9f\u884c(\u6b21\u306e\u30bb\u30eb\u3078\u79fb\u308b) <br>\n\n\u203b\u5b9f\u884c\u306f\u4e0a\u306e\u518d\u751f\u30dc\u30bf\u30f3\u25b6\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3082\u53ef\u80fd <br>\n\u305d\u306e\u4ed6\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8 <br>\nhttps:\/\/qiita.com\/forusufia\/items\/bea3f6fd6160cd2f5843","82e0e3ba":"# \u7279\u5fb4\u91cf\u9078\u629e\n\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u4e0b\u8a18\u3092\u9078\u629e\n-Pclass<br>\n-Sex<br>\n-SibSp<br>\n-Parch<br>\n-Fare<br>\n-Embarked<br>\n-Age_span","3f85c70f":"# 5.\u3068\u308a\u3042\u3048\u305a\u30e2\u30c7\u30eb\u4f5c\u6210"}}