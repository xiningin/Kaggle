{"cell_type":{"9be8ede1":"code","3da06739":"code","11fd3e1f":"code","a3c5b454":"code","592ad6a4":"code","cc3a94ae":"code","5c6c9f69":"markdown","79166eb4":"markdown"},"source":{"9be8ede1":"!pip install kaggle-environments -U","3da06739":"# run this if using kaggle notebooks\n!cp -r ..\/input\/lux-ai-2021\/* .","11fd3e1f":"%%writefile agent.py\nfrom lux.game import Game\nfrom lux.game_map import Cell, RESOURCE_TYPES, Position\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom lux import annotate\nimport math\nimport numpy as np\n\n### Define helper functions\n\n# this snippet finds all resources stored on the map and puts them into a list so we can search over them\ndef find_resources(game_state):\n    resource_tiles: list[Cell] = []\n    width, height = game_state.map_width, game_state.map_height\n    for y in range(height):\n        for x in range(width):\n            cell = game_state.map.get_cell(x, y)\n            if cell.has_resource():\n                resource_tiles.append(cell)\n    return resource_tiles\n\n# the next snippet finds the closest resources that we can mine given position on a map\ndef find_closest_resources(pos, player, resource_tiles):\n    closest_dist = math.inf\n    closest_resource_tile = None\n    for resource_tile in resource_tiles:\n        # we skip over resources that we can't mine due to not having researched them\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.COAL and not player.researched_coal(): continue\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.URANIUM and not player.researched_uranium(): continue\n        dist = resource_tile.pos.distance_to(pos)\n        if dist < closest_dist:\n            closest_dist = dist\n            closest_resource_tile = resource_tile\n    return closest_resource_tile, closest_dist\n\ndef find_closest_city_tile(pos, player):\n    closest_city_tile = None\n    closest_dist = math.inf\n    if len(player.cities) > 0:\n        # the cities are stored as a dictionary mapping city id to the city object, which has a citytiles field that\n        # contains the information of all citytiles in that city\n        for k, city in player.cities.items():\n            for city_tile in city.citytiles:\n                dist = city_tile.pos.distance_to(pos)\n                if dist < closest_dist:\n                    closest_dist = dist\n                    closest_city_tile = city_tile\n    return closest_city_tile, closest_dist\n\ngame_state = None\n\ndef get_random_step():\n    return np.random.choice(['s','n','w','e'])\n\n\ndef agent(observation, configuration):\n    global game_state\n\n    ### Do not edit ###\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n    else:\n        game_state._update(observation[\"updates\"])\n    \n    actions = []\n\n    ### AI Code goes down here! ### \n    player = game_state.players[observation.player]\n    opponent = game_state.players[(observation.player + 1) % 2]\n    width, height = game_state.map.width, game_state.map.height\n\n    resource_tiles = find_resources(game_state)\n        \n    # max number of units available\n    units_cap = sum([len(x.citytiles) for x in player.cities.values()])\n    # current number of units\n    units  = len(player.units)\n    \n    cities = list(player.cities.values())\n    if len(cities) > 0:\n        city = cities[0]\n        created_worker = (units >= units_cap)\n        for city_tile in city.citytiles[::-1]:\n            if city_tile.can_act():\n                if created_worker:\n                    # let's do research\n                    action = city_tile.research()\n                    actions.append(action)\n                else:\n                    # let's create one more unit in the last created city tile if we can\n                    action = city_tile.build_worker()\n                    actions.append(action)\n                    created_worker = True\n    \n    \n    # we want to build new tiless only if we have a lot of fuel in all cities\n    can_build = True\n    night_steps_left = ((359 - observation[\"step\"]) \/\/ 40 + 1) * 10\n    for city in player.cities.values():            \n        if city.fuel \/ (city.get_light_upkeep() + 20) < min(night_steps_left, 30):\n            can_build = False\n       \n    steps_until_night = 30 - observation[\"step\"] % 40\n    \n    \n    # we will keet all tiles where any unit wants to move in this set to avoid collisions\n    taken_tiles = set()\n    for unit in player.units:\n        # it is too strict but we don't allow to go to the the currently occupied tile\n        taken_tiles.add((unit.pos.x, unit.pos.y))\n        \n    for city in opponent.cities.values():\n        for city_tile in city.citytiles:\n            taken_tiles.add((city_tile.pos.x, city_tile.pos.y))\n    \n    # we can collide in cities so we will use this tiles as exceptions\n    city_tiles = {(tile.pos.x, tile.pos.y) for city in player.cities.values() for tile in city.citytiles}\n    \n    \n    for unit in player.units:\n        if unit.can_act():\n            closest_resource_tile, closest_resource_dist = find_closest_resources(unit.pos, player, resource_tiles)\n            closest_city_tile, closest_city_dist = find_closest_city_tile(unit.pos, player)\n            \n            # we will keep possible actions in a priority order here\n            directions = []\n            \n            # if we can build and we are near the city let's do it\n            if unit.is_worker() and unit.can_build(game_state.map) and ((closest_city_dist == 1 and can_build) or (closest_city_dist is None)):\n                # build a new cityTile\n                action = unit.build_city()\n                actions.append(action)  \n                can_build = False\n                continue\n            \n            # base cooldown for different units types\n            base_cd = 2 if unit.is_worker() else 3\n            \n            # how many steps the unit needs to get back to the city before night (without roads)\n            steps_to_city = unit.cooldown + base_cd * closest_city_dist\n            \n            # if we are far from the city in the evening or just full let's go home\n            if (steps_to_city + 3 > steps_until_night or unit.get_cargo_space_left() == 0) and closest_city_tile is not None:\n                actions.append(annotate.line(unit.pos.x, unit.pos.y, closest_city_tile.pos.x, closest_city_tile.pos.y))\n                directions = [unit.pos.direction_to(closest_city_tile.pos)]\n            else:\n                # if there is no risks and we are not mining resources right now let's move toward resources\n                if closest_resource_dist != 0 and closest_resource_tile is not None:\n                    actions.append(annotate.line(unit.pos.x, unit.pos.y, closest_resource_tile.pos.x, closest_resource_tile.pos.y))\n                    directions = [unit.pos.direction_to(closest_resource_tile.pos)]\n                    # optionally we can add random steps\n                    for _ in range(2):\n                        directions.append(get_random_step())\n\n            moved = False\n            for next_step_direction in directions:\n                next_step_position = unit.pos.translate(next_step_direction, 1)\n                next_step_coordinates = (next_step_position.x, next_step_position.y)\n                # make only moves without collision\n                if next_step_coordinates not in taken_tiles or next_step_coordinates in city_tiles:\n                    action = unit.move(next_step_direction)\n                    actions.append(action)\n                    taken_tiles.add(next_step_coordinates)\n                    moved = True\n                    break\n            \n            if not moved:\n                # if we are not moving the tile is occupied\n                taken_tiles.add((unit.pos.x,unit.pos.y))\n    return actions","a3c5b454":"from kaggle_environments import make\nenv = make(\"lux_ai_2021\", debug=True)\nsteps = env.run([\"agent.py\", \"agent.py\"])","592ad6a4":"env.render(mode=\"ipython\", width=900, height=600)","cc3a94ae":"!tar -czf submission.tar.gz *","5c6c9f69":"# Descriptiion\n\nThis notebook is based on the official [baseline](https:\/\/www.kaggle.com\/stonet2000\/lux-ai-season-1-jupyter-notebook-tutorial).\n\nI used it and upgraded the strategy:\n* I build only one city that is constantly growing\n* I build new city tiles only when we have enough fuel for them for at least 2 next night (or until the end)\n* I build no more than 1 city tile per step\n* All units go to city before night\n* Whenever I have a chance, I build a new worker (and never cart)\n* I also have a straightforward collision avoidance approach\n\nIt is a very simple baseline with a very risk-averse strategy that can be further optimized.","79166eb4":"## Create a submission\nNow we need to create a .tar.gz file with main.py (and agent.py) at the top level. We can then upload this!"}}