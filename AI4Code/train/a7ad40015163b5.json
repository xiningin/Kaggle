{"cell_type":{"f386ccb4":"code","afb5356b":"code","1af94e1d":"code","d0ec7adf":"code","b3c9350d":"code","1ed5e953":"code","78027cbf":"code","80cf906c":"code","0851d287":"code","8897e8cb":"code","4a00c9b0":"code","b14a7238":"code","cd65b04c":"markdown","733ba0d2":"markdown","5bab4068":"markdown","81ac8a96":"markdown","78bb1b82":"markdown","bfcafbe8":"markdown"},"source":{"f386ccb4":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression,PassiveAggressiveClassifier,RidgeClassifier,SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier,RadiusNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom sklearn.svm import LinearSVC, SVC,NuSVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\n \nfrom time import perf_counter\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import Markdown, display\n\ndef printmd(string):\n    # Print with Markdowns    \n    display(Markdown(string))\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","afb5356b":"df = pd.read_csv(\"..\/input\/iris\/Iris.csv\", index_col = \"Id\")","1af94e1d":"df.head()","d0ec7adf":"df['Species'].value_counts().plot.bar(color = ['#3274a1','#e1812c','#3a923a'],\n                                               figsize = (10,5))\nplt.xticks(rotation=0)\nplt.title('Quantity of samples of the three iris species', fontsize = 15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","b3c9350d":"fig, axes = plt.subplots(2, 2, figsize=(15, 12))\nfig.suptitle('Iris species features comparison', fontsize = 20)\n\nfeature = [\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]\nfor i, ax in enumerate(axes.flat):\n    sns.violinplot(ax=ax, x = 'Species', y = feature[i], data = df)\n    ax.set_title(feature[i], fontsize = 15)\nplt.show() ","1ed5e953":"# Plot pairwise relationships in the dataset with Seaborn\nsns.pairplot(df, hue='Species')\nplt.show()","78027cbf":"# Split the dataset\nX = df.drop(\"Species\", axis = 1)\ny = df['Species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\n\n# Scale the datasets\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","80cf906c":"# Create a dictionary with the model which will be tested\nmodels = {\n    \"GaussianNB\":{\"model\":GaussianNB()},\n    \"PassiveAggressiveClassifier\":{\"model\":PassiveAggressiveClassifier() },\n    \"RidgeClassifier\":{\"model\":RidgeClassifier() },\n    \"SGDClassifier\":{\"model\":SGDClassifier() },\n    \"KNeighborsClassifier\":{\"model\":KNeighborsClassifier() },\n    \"DecisionTreeClassifier\":{\"model\":DecisionTreeClassifier() },\n    \"ExtraTreeClassifier\":{\"model\":ExtraTreeClassifier() },\n    \"LinearSVC\":{\"model\":LinearSVC() },\n    \"SVC\":{\"model\":SVC() },\n    \"NuSVC\":{\"model\":NuSVC() },\n    \"MLPClassifier\":{\"model\":MLPClassifier() },\n    \"RandomForestClassifier\":{\"model\":RandomForestClassifier() },\n    \"GradientBoostingClassifier\":{\"model\":GradientBoostingClassifier() },\n    \"AdaBoostClassifier\":{\"model\":AdaBoostClassifier() }\n}\n\n# Use the 10-fold cross validation for each model\n# to get the mean validation accuracy and the mean training time\nfor name, m in models.items():\n    # Cross validation of the model\n    model = m['model']\n    result = cross_validate(model, X_train,y_train,cv = 10)\n    \n    # Mean accuracy and mean training time\n    mean_val_accuracy = round( sum(result['test_score']) \/ len(result['test_score']), 4)\n    mean_fit_time = round( sum(result['fit_time']) \/ len(result['fit_time']), 4)\n    \n    # Add the result to the dictionary witht he models\n    m['val_accuracy'] = mean_val_accuracy\n    m['Training time (sec)'] = mean_fit_time\n    \n    # Display the result\n    print(f\"{name:27} mean accuracy using 10-fold cross validation: {mean_val_accuracy*100:.2f}% - mean training time {mean_fit_time} sec\")","0851d287":"# Create a DataFrame with the results\nmodels_result = []\n\nfor name, v in models.items():\n    lst = [name, v['val_accuracy'],v['Training time (sec)']]\n    models_result.append(lst)\n\ndf_results = pd.DataFrame(models_result, \n                          columns = ['model','val_accuracy','Training time (sec)'])\ndf_results.sort_values(by='val_accuracy', ascending=False, inplace=True)\ndf_results.reset_index(inplace=True,drop=True)\ndf_results","8897e8cb":"plt.figure(figsize = (15,5))\nsns.barplot(x = 'model', y = 'val_accuracy', data = df_results)\nplt.title('Mean Validation Accuracy for each Model\\ny-axis between 0.8 and 1.0', fontsize = 15)\nplt.ylim(0.8,1)\nplt.xlabel('Model', fontsize=15)\nplt.ylabel('Accuracy',fontsize=15)\nplt.xticks(rotation=90, fontsize=12)\nplt.show()","4a00c9b0":"plt.figure(figsize = (15,5))\nsns.barplot(x = 'model', y = 'Training time (sec)', data = df_results)\nplt.title('Training time for each Model in sec', fontsize = 15)\nplt.xticks(rotation=90, fontsize=12)\nplt.xlabel('Model', fontsize=15)\nplt.ylabel('Training time (sec)',fontsize=15)\nplt.show()","b14a7238":"# Get the model with the highest mean validation accuracy\nbest_model = df_results.iloc[0]\n\n# Fit the model\nmodel = models[best_model[0]]['model']\nmodel.fit(X_train,y_train)\n\n# Predict the labels with the data set\npred = model.predict(X_test)\n\n# Display the results\nprintmd(f'## Best Model: {best_model[0]} with {best_model[1]*100}% accuracy on the test set')\nprintmd(f'## Trained in: {best_model[2]} sec')\n\n# Display a confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncf_matrix = confusion_matrix(y_test, pred, normalize='true')\nplt.figure(figsize = (10,7))\nsns.heatmap(cf_matrix, annot=True, xticklabels = sorted(set(y_test)), yticklabels = sorted(set(y_test)),cbar=False)\nplt.title('Normalized Confusion Matrix', fontsize = 23)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","cd65b04c":"# 4. Prediction metrics of the best model<a class=\"anchor\" id=\"4\"><\/a><a class=\"anchor\" id=\"1\"><\/a>","733ba0d2":"# 2. Data Preprocessing<a class=\"anchor\" id=\"2\"><\/a><a class=\"anchor\" id=\"1\"><\/a>","5bab4068":"# 3. Model comparison using cross validation<a class=\"anchor\" id=\"3\"><\/a><a class=\"anchor\" id=\"3\"><\/a>","81ac8a96":"# Compare 14 Algorithms to predict Iris Species\n## *Using Cross validation*\n\n![iris](https:\/\/i.imgur.com\/DVtB0yf.png)\n\n# Table of contents\n\n[<h3>1. Data Description & Visualization<\/h3>](#1)\n\n[<h3>2. Data Preprocessing<\/h3>](#2)\n\n[<h3>3. Model comparison using cross validation<\/h3>](#3)\n\n[<h3>4. Prediction metrics of the best model<\/h3>](#4)","78bb1b82":"# 1. Data Description & Visualization<a class=\"anchor\" id=\"1\"><\/a><a class=\"anchor\" id=\"1\"><\/a>","bfcafbe8":"## Load the libraries:"}}