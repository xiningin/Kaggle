{"cell_type":{"42616e69":"code","0b6ff850":"code","c0d51bd6":"code","ed5f03d8":"code","63780bd2":"code","6321f3cb":"code","a378405c":"code","7c80cc4a":"code","ff35e036":"code","cde84cb3":"code","dd401f03":"code","1a57c4d2":"code","6472e705":"code","6e951ad0":"code","34a568b1":"code","547bc8dc":"code","51546385":"code","296567fa":"code","5e259554":"code","8bbd4bf8":"markdown","24bc1809":"markdown","07bca26f":"markdown","47a78bf9":"markdown","c53992f1":"markdown","789dd338":"markdown","eb62d4eb":"markdown","35f7b9b1":"markdown"},"source":{"42616e69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0b6ff850":"data = pd.read_csv('..\/input\/data.csv')","c0d51bd6":"data.info()","ed5f03d8":"data.corr()","63780bd2":"# Correlation Map\nf,ax = plt.subplots(figsize=(30,30))\nsns.heatmap(data.corr(),annot=True , linewidths=.6, fmt = '.1f', ax = ax)\nplt.show()","6321f3cb":"data.head(10)\n","a378405c":"data.columns # It gives us names of columns.","7c80cc4a":"#Line Plot\ndata.Overall.plot(kind = 'line', color = 'r' , label = 'OVERALL' , linewidth = 2 , alpha = .8 , grid = True ,linestyle = ':',figsize=(15,15) )\ndata.Potential.plot(color = 'g' , label = 'POTENTIAL' , linewidth = .8 , alpha = .5 , linestyle = ':' ) \nplt.legend(loc = 'upper right')\nplt.xlabel('Number of Players')\nplt.ylabel('Overall Values')\nplt.title('Line Plot Example')\nplt.show()\n\n","ff35e036":"#Scatter Plot\ndata.plot(kind = 'scatter' , x='Stamina' , y = 'SprintSpeed' , alpha = .5 , color = 'b',figsize=(15,15))\nplt.xlabel('Stamina')\nplt.ylabel('Sprint Speed')\nplt.title('Stamina-Sprint Speed Scatter Plot')\nplt.show()","cde84cb3":"#Histogram\ndata.SprintSpeed.plot(kind = 'hist' , bins = 100 , figsize = (20,20))\nplt.xlabel('Sprint Speed')\nplt.show()","dd401f03":"# clf() = cleans it up again you can start a fresh\ndata.SprintSpeed.plot(kind = 'hist',bins = 50)\nplt.clf()\n","1a57c4d2":"dictionary = {'Spain': 'Madrid' , 'USA' : 'Vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","6472e705":"dictionary['Spain'] = 'Barcelona' # We updated the value of Spain key\nprint(dictionary)\ndictionary['USA'] = 'Washington'# We updated the value of USA key\nprint(dictionary) \ndictionary['France'] = 'Paris' # We added a new key and value in dictionary\nprint(dictionary)\ndel dictionary['France'] # We deleted the key and value from dictionary\nprint(dictionary)\nprint('France' in dictionary) # If dictionary has the key named France, it will make turn True.\nprint('Spain' in dictionary) # This method checks only the keys !!\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)\n\n\n","6e951ad0":"series = data['SprintSpeed'] # it gives us the parameters as vector that we wrote \n#print(series)\ndata_frame = data[['SprintSpeed']] # it gives us the parameters as data frame that we wrote \nprint(data_frame)","34a568b1":"# 1 - Filtering Pandas data frame\nx = data['SprintSpeed']>95 # it gives us the values as True which  bigger than 95  \ndata[x] # It prints the True values as table\n","547bc8dc":"# 2 - Filtering pandas by using logical_and\ndata[np.logical_and(data['SprintSpeed']>95,data['Overall']>80)] # it gives us the values which SprintSpeed bigger than 95 and Overall bigger than 80\n\n","51546385":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['SprintSpeed']>95) & (data['Overall']>80)]","296567fa":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","5e259554":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n #For pandas we can achieve index and value\nfor index,value in data[['SprintSpeed']][0:2].iterrows():\n    print(index,\" : \",value)\n\n\n","8bbd4bf8":"<a id=\"6\"><\/a> <br>\n### WHILE and FOR LOOPS\nWe will learn most basic while and for loops\n","24bc1809":"***MATPLOTLIB***","07bca26f":"Mostly of players' sprint speed values in Fifa 19 between 60 and 80","47a78bf9":"**Logic Control**\n\nI already know the subject so I directly passed","c53992f1":"As we can see Sprint Speed and Stamina values are increasing in direct proportion","789dd338":"DICTIONARY","eb62d4eb":"PANDAS","35f7b9b1":"We understand from the graphic on above , mostly of players' potential better than their overall values. This  makes sense because every player can improve himself.  \u0130f we look at the graphic we can see very few players' overall value be almost the same their potential value. Probably these players older than others."}}