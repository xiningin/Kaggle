{"cell_type":{"409f3263":"code","8f41d237":"code","b9cb4d9d":"code","f782bb5f":"code","77b361cc":"code","4affc7e0":"code","6befd940":"code","00052efd":"code","5a4210d2":"code","9b1ba0f4":"code","07f9b78e":"code","15dfaed6":"code","2340d9ff":"code","7a4b665e":"code","41affab9":"code","7fa05fec":"code","93b345f6":"code","a35c9d6c":"code","ba138bd0":"code","bd2243be":"code","51c8b29d":"code","ab6a5ab3":"code","ec10ec3c":"code","c9cf78d6":"code","ff29be9d":"code","7c12533e":"code","29f4c325":"code","9a2fc757":"code","b6cd319b":"code","85f78c0c":"markdown","fa448515":"markdown","ae475394":"markdown","13d464a8":"markdown","81b74379":"markdown","895fc542":"markdown","d8aa5813":"markdown","4ced6404":"markdown","2593538c":"markdown","8f049a28":"markdown","402c019c":"markdown","2d2f7e56":"markdown","d8df0704":"markdown","3de65a94":"markdown","f5f9bd66":"markdown","586b610e":"markdown","aa2cf733":"markdown","e51e6e4c":"markdown","98e65cc6":"markdown","d6b971e5":"markdown","dfaede92":"markdown","b8bef52c":"markdown"},"source":{"409f3263":"import pandas as pd\nimport numpy as np\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport statsmodels.api as sm\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nprint('Setup complete')\n","8f41d237":"#The next step is to load the data\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv') \ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain.head()","b9cb4d9d":"#Statistic (now, we need to describe the data)\ntrain.describe(include = 'all'). transpose()","f782bb5f":"train.isnull()","77b361cc":"#Now, lets find the percentage of missing data.\ntrain.isna().sum()","4affc7e0":"#now we need to check how many passengers survived \ntrain['Survived'].value_counts(normalize=True)\n","6befd940":"graph = sns.countplot(x=train['Survived']).set_title('Survivors and Non-Survivors')\n\n","00052efd":"\n\nfig, axarr = plt.subplots(1, 2, figsize=(12,8))\na = sns.countplot(train['Sex'], ax=axarr[0]).set_title('Passengers number by sex')\naxarr[1].set_title('Survival rate by sex')\nb = sns.barplot(x='Sex', y='Survived', data=train, ax=axarr[1]).set_ylabel('Survival rate')\n","5a4210d2":"train.groupby('Pclass').mean()['Survived']*100","9b1ba0f4":"fig, axarr = plt.subplots(1,2,figsize=(12,5))\na = sns.countplot(x='Pclass', hue='Survived', data=train, ax=axarr[0]).set_title('Survivors and Non-Survivors count by class')\naxarr[1].set_title('Survival rate by class')\nb = sns.barplot(x='Pclass', y='Survived', data=train, ax=axarr[1]).set_ylabel('Survival rate')","07f9b78e":"train.groupby(['Pclass', 'Sex']).Survived.mean()","15dfaed6":"plt.title('Survival rate by sex and class')\ngraph = sns.barplot(x='Pclass', y='Survived', hue='Sex', data=train).set_ylabel('Survival rate')","2340d9ff":"fig, axarr = plt.subplots(1,2,figsize=(12,5))\naxarr[0].set_title('Age Category')\nf = sns.distplot(train['Age'], color='b', bins=45, ax=axarr[0])\naxarr[1].set_title('Age category of survivors')\ngraph = sns.kdeplot(train['Age'].loc[train['Survived'] == 1], \n                shade= True, ax=axarr[1], label='Survived').set_xlabel('Age')\ngraph = sns.kdeplot(train['Age'].loc[train['Survived'] == 0], \n                shade=True, ax=axarr[1], label='Not Survived')\n","7a4b665e":"plt.figure(figsize=(7,6))\ngraph = sns.swarmplot(y='Age', x='Sex', hue='Survived', data=train).set_title(' Age and Sex Survivel')\n","41affab9":"plt.figure(figsize=(7,6))\nh = sns.swarmplot(x='Pclass', y='Age',hue='Survived', data=train).set_title('Age and Class Survival') \n                                                                            ","7fa05fec":"test['Titles'] = test['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntrain['Titles'] = train['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntest['Titles'].value_counts()","93b345f6":"train['Titles'].value_counts()\n","a35c9d6c":"train['Titles'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\ntest['Titles'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\n\ntrain['Titles'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)\ntest['Titles'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)\n\ntrain.groupby('Titles').Survived.mean()\n","ba138bd0":"plt.title('Survivors by Titles')\ngraph = sns.barplot(y='Titles', x='Survived', data=train).set_ylabel('Titles')","bd2243be":"\ntrain['Ticket_letters'] = train.Ticket.apply(lambda x: x[:2])\ntest['Ticket_letters'] = test.Ticket.apply(lambda x: x[:2])\n\ntrain['Ticket_length'] = train.Ticket.apply(lambda x: len(x))\ntest['Ticket_length'] = test.Ticket.apply(lambda x: len(x))","51c8b29d":"#SibSp\nf, axarr = plt.subplots(1,2,figsize=(11,6))\na = sns.countplot(train['SibSp'], ax=axarr[0]).set_title('Families on board')\naxarr[1].set_title('Survived Families')\nb = sns.barplot(x='SibSp', y='Survived', data=train, ax=axarr[1]).set_ylabel('Survival rate')\n\n#Parch\nf, axarr = plt.subplots(1,2,figsize=(11,6))\na = sns.countplot(train['Parch'], ax=axarr[0]).set_title('Number of parents and children')\naxarr[1].set_title('Parents and childrens who survived')\nb = sns.barplot(x='Parch', y='Survived', data=train, ax=axarr[1]).set_ylabel('Survival rate')","ab6a5ab3":"#now,lets find  the number of families [Sibs and Parch] who survived along with the passenger himself.[+1]\ntrain['Fam_SibSp_Parch'] = train['SibSp'] + train['Parch'] + 1\ntest['Fam_SibSp_Parch'] = test['SibSp'] + test['Parch'] + 1\n\nplt.title('Passengers survived with Family')\ngraph = sns.barplot(x='Fam_SibSp_Parch', y='Survived', data=train).set_ylabel('Survival rate')\n","ec10ec3c":"#Now, let's classify families into groups: Alone(1),Samll Family(1-3),Mid Family(3-5),Big Family(5-8+)\nbins = [-0, 1, 4, 7, 11]\nlabels = ['Alone', 'Small Family', 'Mid Family', 'Big Family']\ntrain['Fam_group'] = pd.cut(train['Fam_SibSp_Parch'], bins=bins, labels=labels)\ntest['Fam_group'] = pd.cut(train['Fam_SibSp_Parch'], bins=bins, labels=labels)","c9cf78d6":"plt.title('Families Survived by Groups')\ngraph = sns.barplot(x=train.Fam_group, y=train.Survived).set_ylabel('Survival rate')","ff29be9d":"y = train['Survived']\nfeatures = ['Pclass', 'Fare', 'Titles', 'Embarked', 'Fam_group', 'Ticket_length', 'Ticket_letters']\nX = train[features]\nX.head()","7c12533e":"numerical_cols = ['Fare']\ncategorical_cols = ['Pclass', 'Titles', 'Embarked', 'Fam_group', 'Ticket_length', 'Ticket_letters']\n\n#numerical data\nnumerical_transformer = SimpleImputer(strategy='median')\n\n#categorical data\ncategorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='most_frequent')),('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\n#  numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[('num', numerical_transformer, numerical_cols), ('cat', categorical_transformer, categorical_cols)])\n\n#modeling code \ntitanic_pipeline = Pipeline(steps=[('preprocessor', preprocessor),('model', RandomForestClassifier(random_state=0, n_estimators=500, max_depth=5))])\n\n# trying the fitting model \ntitanic_pipeline.fit(X,y)\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline, X, y, cv=10).mean()))","29f4c325":"X_test = test[features]\nX_test.head()\n","9a2fc757":"predictions = titanic_pipeline.predict(X_test)","b6cd319b":"o = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\no.to_csv('my_submission.csv', index=False)\nprint('Your submission was successfully saved!')","85f78c0c":"We can see that average survivel age was under 30 years.","fa448515":"**Data Types **\n\n1. Passenger Id\n2. Survived \n3. Pclass - class of service (third- economy, second-business, first-class)\n4. Name\n5. Sex\n6. Age\n7. Sibsp (the number of the passenger's relatives)\n8. Parch (the number of children and parents)\n9. Ticket\n10. Cabin (#)\n11. Embarked (S - Southampton, Q - Queenstown, C - Cherbourg)","ae475394":"# SibSp and Parch","13d464a8":"From the bars above, we can say that about 90% of passengers on the board were either alone or with one or two family members. Also, we can see that the passengers with the big family had less chance of survival. Those who were alone, or with one or two family members (I assume, it was most likely a parent (mom) with children), managed to survive with a much higher chance. Families with 5 or more family members had no chance of survival.","81b74379":"# Pclass\n\nPrediction: Passengers from a higher socioeconomic class are more likely to evacuate in the forefront (which means that most likely the highest number of survivors were from the first class)\n","895fc542":"We can clearly see that the survival rate respectively grows with the higher class of service. The survival rate of the females from first and second class 97% (first class) and 92%(second class) where the third-class is only about 50%. As for males, about 38%(first-class) 17%(second-class) and around 15%(third class).","d8aa5813":"# We are done with features. Now, it's time for Modeling ","4ced6404":"It is now becoming clearer that a significant number of male survivors were less than 12 years old.","2593538c":"# Sex\n\nPrediction: Females are more likely to survive ( because women have a survival advantage over men in maritime disasters.)\n","8f049a28":"# Survived","402c019c":"On graph above, we maintain that the largest number of children are in the third class and, accordingly, the smallest in the first class.The survival rate between classes varies as well.","2d2f7e56":"# Age\n","d8df0704":"# For Cabin and Ticket\n","3de65a94":"# Libraries\nFirs, we need to install necessary tools.\nWe'll start by importing libraries:","f5f9bd66":"According to the orange chart bar, it can be concluded that in \"train\" data only about 38.4% of passengers managed to survive and 61.6% of the passengers perished when the Titanic sank.","586b610e":"****Please consider upvoting if this is useful to you!****","aa2cf733":"#Titanic: Machine Learning from Disaster. (The notebook is written in Python.)\n\nThe tragic disaster of 1912. The TItanic a ship that sank leading to the deaths of more than 1500 passengers and crew. \"Of the 2,240 passengers and crew on board, more than 1,500 lost their lives\"\n\n![titanic-dock.jpg](attachment:titanic-dock.jpg)\n\n\nIn this notebook, based on real data about the disaster, our task is to predict whether a person survived the tragedy or not.","e51e6e4c":"We can see the direct relationship between Class of service and Survival rate. Survival rate grows with the higher class of service.\n","98e65cc6":"Preprocessing","d6b971e5":"The first chart shows that initially there were 65% male and 35% female on board. In the second graph, we can see that in the end, the number of survivors is 0.76555  female and  0.23445  male.\n","dfaede92":"# Name ","b8bef52c":"# \nLoad Data"}}