{"cell_type":{"6e040438":"code","f083eaee":"code","e16356af":"code","a1efe590":"code","915da588":"code","d20e44cc":"code","5a718c2e":"code","73069c9e":"code","483c9f00":"code","fb633c36":"code","17c442fa":"code","d3482719":"code","6b839968":"code","044ec91a":"code","148fe888":"code","1f216f3a":"code","b6169e2e":"code","5508769f":"code","31ffcc23":"code","342fbbfe":"code","d05cab47":"markdown","b44ffded":"markdown","7f8b4d95":"markdown","88c825c4":"markdown","42dfe2d1":"markdown","70e7574c":"markdown","0c545cf0":"markdown","b7ab5877":"markdown","fc787ea8":"markdown","ce0361bd":"markdown","c0b04276":"markdown","b8786a64":"markdown","2ab0c45a":"markdown","2855886a":"markdown","3bbd6323":"markdown","43a4f80c":"markdown","931cce19":"markdown"},"source":{"6e040438":"import torch\nimport numpy as np\nimport pandas as pd\nimport torch.nn.functional as F\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing","f083eaee":"! pip uninstall kaggle\n! pip install --upgrade pip\n! pip install kaggle==1.5.6\n\n! ls -lha kaggle.json\n! mkdir -p ~\/.kaggle\n! cp kaggle.json ~\/.kaggle\/\n! chmod 600 ~\/.kaggle\/kaggle.json ","e16356af":"! kaggle competitions download -c ai-tomato\n! unzip ai-tomato.zip","a1efe590":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(666)\ntorch.manual_seed(666)\nif device =='cuda' :\n    torch.cuda.manual_seed_all(666)\n    ","915da588":"learning_rate = 0.1\ntraining_epochs = 1000\nbatch_size = 10","d20e44cc":"xy_train = pd.read_csv(\"training_set.csv\",header=None, skiprows=1)\nxy_train","5a718c2e":"## data separate (\uc6d4,\uc77c \uc815\ubcf4\ub3c4 \uc0ac\uc6a9)\nxy_train[0] = xy_train[0]%10000\/100\n\nx_train = xy_train.loc[:,[i for i in xy_train.keys()[:-1]]]\ny_train = xy_train[xy_train.keys()[-1]]\n\nx_train\n","73069c9e":"## data frame => numpy\nx_train = np.array(x_train)\ny_train = np.array(y_train)\n\n## numpy => torch tensor\nx_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train)","483c9f00":"data_loader = torch.utils.data.DataLoader(dataset= train_dataset,\n                                          batch_size = batch_size,\n                                          shuffle = True,\n                                          drop_last = True)","fb633c36":"linear1 = torch.nn.Linear(7,7,bias = True)\nlinear2 = torch.nn.Linear(7,1, bias= True)","17c442fa":"torch.nn.init.xavier_normal_(linear1.weight)\ntorch.nn.init.xavier_normal_(linear2.weight)","d3482719":"relu = torch.nn.ReLU()\n\nmodel = torch.nn.Sequential(linear1,relu,\n                            linear2).to(device)","6b839968":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(),lr=learning_rate)","044ec91a":"total_batch = len(data_loader)\n\nfor epoch in range(training_epochs) :\n\n    avg_cost = 0\n\n    for X, Y in data_loader :\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        optimizer.zero_grad()\n\n        h = model(X)\n\n        cost = loss(h, Y)\n\n        cost.backward()\n        optimizer.step()\n\n        avg_cost += cost \/ total_batch\n    if epoch % 100 == 0 :\n        print('Epoch {}, Cost : {}'.format(epoch,avg_cost))\n\nprint('Learning Finished')","148fe888":"test = pd.read_csv(\"test_set.csv\",usecols=range(0,7),header=None, skiprows=1)\n\ntest[0] = test[0]%10000\/ 100\ntest = test.loc[:,[i for i in test.keys()[:]]]\ntest","1f216f3a":"with torch.no_grad() :\n\n    test = np.array(test)\n    test = Scaler.transform(test)\n    test = torch.from_numpy(test).float().to(device)   \n\n    prediction = model(test)","b6169e2e":"## tensor => numpy\ncorrect_prediction = prediction.cpu().numpy().reshape(-1,1)","5508769f":"submit = pd.read_csv('submit_sample.csv')\nsubmit","31ffcc23":"for i in range(len(correct_prediction)) :\n    submit['expected'][i] = correct_prediction[i].item()\n\nsubmit","342fbbfe":"submit.to_csv('defence1.csv',index= False)\n! kaggle competitions submit -c ai-tomato -f defence1.csv -m \"baseline.0617.3\"","d05cab47":"## data \ubd84\ub9ac","b44ffded":"## Parameter","7f8b4d95":"## Tensor \ub85c \ubcc0\ud658","88c825c4":"## Setting","42dfe2d1":"## Loss, Optimizer","70e7574c":"## Submit","0c545cf0":"## Train data set","b7ab5877":"## \ud559\uc2b5","fc787ea8":"## Init","ce0361bd":"## Model","c0b04276":"## Make torch dataset","b8786a64":"## Import","2ab0c45a":"## Layer","2855886a":"## \ub370\uc774\ud130 \ub2e4\uc6b4\ub85c\ub4dc","3bbd6323":"## Kaggle setting","43a4f80c":"## Make submit form","931cce19":"## Test"}}