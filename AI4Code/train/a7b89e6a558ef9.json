{"cell_type":{"75719a61":"code","811ff907":"code","dd1ce2b9":"code","75e8cc02":"code","02d64683":"code","8d073afe":"code","b41543ff":"code","6613d176":"code","69e78a13":"code","4e61c13f":"code","d7c10a76":"code","ff428ef0":"code","79917cf0":"code","6fe56bfa":"code","8e9f0e4b":"code","159d8bfe":"code","1165a3bc":"code","3ed1b189":"code","e72c51d8":"code","4a5e9e61":"code","bbd511a8":"code","12021a38":"code","e2062aa9":"code","c28abb2d":"code","395f7942":"code","e8957425":"code","9b0169d2":"code","fac98361":"code","e72f9801":"code","a2eb3070":"code","61bd47db":"code","ac10e467":"code","3200af3d":"code","3f610636":"code","614bf95e":"code","b1759e13":"code","48db3f41":"code","a3567565":"code","2d19a568":"code","c94377c9":"code","c724cb1b":"code","09077ffc":"code","fea35234":"code","58441d85":"code","b915b08d":"code","f57fbbe6":"code","efce99f1":"code","5ad96dfb":"code","19b4961e":"markdown","f829bb55":"markdown","3c6ca11f":"markdown","ea4b264e":"markdown","1235f408":"markdown","7ade9d4d":"markdown","9df39c48":"markdown","79c54e7e":"markdown","b8baf295":"markdown","ca350f2d":"markdown","c8e8d684":"markdown","5f35e9fa":"markdown","5a04ccce":"markdown","93a50679":"markdown","b665f11b":"markdown"},"source":{"75719a61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","811ff907":"import random \nfrom sklearn.preprocessing import StandardScaler\nfrom IPython.display import display\nfrom sklearn.cluster import KMeans \nfrom sklearn.decomposition import PCA\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns \nimport matplotlib.pyplot as plt  \nimport warnings            \nwarnings.filterwarnings(\"ignore\") \n","dd1ce2b9":"file=open(\"\/kaggle\/input\/simplified-human-activity-recognition-wsmartphone\/features_info.txt\")\nprint(file.read())\nfile.close()","75e8cc02":"file=open(\"\/kaggle\/input\/simplified-human-activity-recognition-wsmartphone\/activity_labels.txt\")\nprint(file.read())\nfile.close()\n","02d64683":"x_train=pd.read_csv(\"\/kaggle\/input\/simplified-human-activity-recognition-wsmartphone\/train_X.csv\")\nx_train=x_train.iloc[:,1:]\ny_train=pd.read_csv(\"\/kaggle\/input\/simplified-human-activity-recognition-wsmartphone\/train_Y.csv\")\ny_train=y_train.iloc[:,1:]\nx_test=pd.read_csv(\"\/kaggle\/input\/simplified-human-activity-recognition-wsmartphone\/test_X.csv\")\nx_test=x_test.iloc[:,1:]\ny_test=pd.read_csv(\"\/kaggle\/input\/simplified-human-activity-recognition-wsmartphone\/test_Y.csv\")\ny_test=y_test.iloc[:,1:]\n\n\ndisplay(x_train.info())\ndisplay(x_train)\n\ndisplay(y_train.info())\ndisplay(y_train)\n\ndisplay(x_test.info())\ndisplay(x_test)\n\ndisplay(y_test.info())\ndisplay(y_test)","8d073afe":"print(x_train.isnull().sum().sum())\nprint(x_test.isnull().sum().sum())\nprint(x_train.isnull().sum().sum())\nprint(y_test.isnull().sum().sum())\n","b41543ff":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\nknn = KNeighborsClassifier()\nknn_model = knn.fit(x_train, y_train)\nknn_model\n","6613d176":"y_pred = knn_model.predict(x_test)\nknn_x_train_score=accuracy_score(y_test, y_pred)\nknn_x_train_score","69e78a13":"print(classification_report(y_test, y_pred))","4e61c13f":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\n#scale etmemiz gerekiyor \ndf = StandardScaler().fit_transform(x_train)\n\npca = PCA()\nX_pca_train = pca.fit_transform(df)\n","d7c10a76":"#bu fonksiyon modelimizdeki degiskenleri temsil etme derecesini veriyor.\npca.explained_variance_ratio_[:10]","ff428ef0":"#daha anlasilir olsun diye bu sekilde yazildi % olarak temsil etme derecesi\n# 64.degisken ve ustu degerler %90 dan fazla temsil etmektedir \n\nrepresent=np.cumsum(np.round(pca.explained_variance_ratio_, decimals = 4)*100)\nprint(represent)\n","79917cf0":"import matplotlib.pyplot as plt\n\nplt.scatter(X_pca_train[:,0],X_pca_train[:,1],color = [\"red\"],s=80)\nplt.scatter(X_pca_train[:,0],X_pca_train[:,3],color = [\"black\"],s=70)\nplt.scatter(X_pca_train[:,0],X_pca_train[:,7],color = [\"orange\"],s=60)\nplt.scatter(X_pca_train[:,0],X_pca_train[:,15],color = [\"purple\"],s=40)\nplt.scatter(X_pca_train[:,0],X_pca_train[:,20],color = [\"green\"],s=20)\nplt.scatter(X_pca_train[:,0],X_pca_train[:,500],color = [\"yellow\"],s=10)\n\nplt.legend()\nplt.xlabel(\"x_train_0\")\nplt.ylabel(\"x_train_(1-8)\")\n\nplt.show()\nX_pca_train","6fe56bfa":"df_test = StandardScaler().fit_transform(x_test)\n\npca_test = PCA()\nX_pca_test = pca_test.fit_transform(df_test)\n","8e9f0e4b":"\nrepresent=np.cumsum(np.round(pca_test.explained_variance_ratio_, decimals = 4)*100)\nprint(represent)\n","159d8bfe":"from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nimport numpy as np\n\n\nknn_pca = KNeighborsClassifier()\nknn_pca.fit(X_pca_train, y_train)\ny_pred = knn_pca.predict(X_pca_test)\nprint(accuracy_score(y_test, y_pred))\nknn_pca_score=cross_val_score(knn_pca, X_pca_test, y_test, cv = 10).mean()\nknn_pca_score","1165a3bc":"knn_pca_rep = KNeighborsClassifier()\n\nfrom sklearn import model_selection\ncv_10 = model_selection.KFold(n_splits = 10,\n                             shuffle = True,\n                             random_state = 1)\n\nfeatures = []\n# %90 ayarlandi\nfor i in np.arange(1, 30):\n   \n    \n    score =model_selection.cross_val_score(knn_pca_rep,\n                                           X_pca_train[:,:i], \n                                           y_train,\n                                           cv=cv_10  )\n    features.append(score)\n     ","3ed1b189":"plt.plot(features,'-v')\nplt.xlabel('Bile\u015fen Say\u0131s\u0131')\nplt.ylabel('% ')\nplt.title(' PCR Model Tuning');","e72c51d8":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = Axes3D(fig)\n\n\nax.scatter(X_pca_train[:,0],X_pca_train[:,1],s=100 )\nax.scatter(X_pca_train[:,0],X_pca_train[:,2],  s=60),\nax.scatter(X_pca_train[:,0],X_pca_train[:,3],  s=30),\nax.scatter(X_pca_train[:,0],X_pca_train[:,4],  s=20),\nax.scatter(X_pca_train[:,0],X_pca_train[:,5],  s=12),\nax.scatter(X_pca_train[:,0],X_pca_train[:,10],  s=8),\nax.scatter(X_pca_train[:,0],X_pca_train[:,15],  s=5),\nax.scatter(X_pca_train[:,0],X_pca_train[:,25],  s=4);","4a5e9e61":"knn_pca_rep.fit(X_pca_train[:,:25], y_train)\n","bbd511a8":"y_pred = knn_pca_rep.predict(X_pca_test[:,:25])\nprint(accuracy_score(y_test, y_pred))\nknn_pca_rep_score=cross_val_score(knn_pca_rep, X_pca_test[:,:25], y_test, cv = 10).mean()\nknn_pca_rep_score","12021a38":"\nfrom sklearn.naive_bayes import GaussianNB\nnb_x_train = GaussianNB()\nnb_model_x_train = nb_x_train.fit(x_train, y_train)\ny_pred=nb_model_x_train.predict(x_test)\nprint(accuracy_score(y_test, y_pred))\nNB_x_train_score=cross_val_score(nb_model_x_train, x_test, y_test, cv = 10).mean()\nNB_x_train_score","e2062aa9":"\nnb_pca = GaussianNB()\nnb_pca_model = nb_pca.fit(X_pca_train, y_train)\nnb_pca_model\n","c28abb2d":"nb_pca_model.predict(X_pca_test)[0:10]","395f7942":"accuracy_score(y_test, y_pred)","e8957425":"nb_pca_score= cross_val_score(nb_pca_model, X_pca_test, y_test, cv = 10).mean()\nnb_pca_score","9b0169d2":"nb = GaussianNB()\nnb_model_2 = nb.fit(X_pca_train[:,:25], y_train)\n\nnb_model_2.predict(X_pca_test[:,:25])\nprint(accuracy_score(y_test, y_pred))\nnb_pca_rep_score=cross_val_score(nb_model_2, X_pca_test[:,:25], y_test, cv = 10).mean()\nnb_pca_rep_score","fac98361":"print(\"KNN X_TRAIN SCORE : \",knn_x_train_score)\nprint()\nprint(\"NAIVE_BAYES X_TRAIN SCORE : \",NB_x_train_score)\nprint()\nprint(\"KNN PCA SCORE : \",knn_pca_score)\nprint()\nprint(\"NAIVE_BAYES PCA SCORE : \",nb_pca_score)\nprint()\nprint(\"KNN PCA REPRESENTATION SCORE : \",knn_pca_rep_score)\nprint()\nprint(\"NAIVE_BAYES PCA REPRESENTATION SCORE : \",nb_pca_rep_score)\n\n","e72f9801":"import matplotlib.pyplot as plt\n \n# Create bars\nbarWidth =0.7\nbars1 = [knn_x_train_score, NB_x_train_score]\nbars2 = [knn_pca_score,nb_pca_score]\nbars3 = [knn_pca_rep_score,nb_pca_rep_score]\n\n \n# The X position of bars\nr1 = [1,2]\nr2 = [3,4]\nr3 = [5,6,]\nr4 = r1 + r2 + r3\n \n# Create barplot\nplt.bar(r1, bars1, width = barWidth, color = (0.3,0.2,0.2,0.6), label='X_train score')\nplt.bar(r2, bars2, width = barWidth, color = (0.3,0.5,0.4,0.6), label='pca-score')\nplt.bar(r3, bars3, width = barWidth, color = (0.3,0.9,0.4,0.6), label='pca_rep')\n# Note: the barplot could be created easily. See the barplot section for other examples.\n \n# Create legend\nplt.legend(borderpad=0.1)\n \n\nplt.xticks([r+1  for r in range(len(r4))],\n           ['KNN', 'NAIVE_BAYES ', '\"KNN PCA', 'NAIVE_BAYES PCA', 'KNN PCA REPRESENTATION', 'NAIVE_BAYES PCA REPRESENTATION'], rotation=90)\n \n\nplt.subplots_adjust(bottom= 0.2, top = 0.98)\n \n# Show graphic\nplt.show()\n","a2eb3070":"df=x_train","61bd47db":"from sklearn.decomposition import PCA\npca = PCA()\nX= pca.fit_transform(df)\n\n\nrepresent=np.cumsum(np.round(pca.explained_variance_ratio_, decimals = 4)*100)\nprint(represent)\ns=0\nfor i in represent:\n    s+=1\n    if i>=92:\n        print(\"% 92 represent count \",i,\"index :\",s)\n        break\n\n\n","ac10e467":"X","3200af3d":"plt.plot(np.cumsum(pca.explained_variance_ratio_[:s]))","3f610636":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters = 4)\nkmeans\nk_fit = kmeans.fit(X)\nk_fit.n_clusters\nk_fit.cluster_centers_\nk_fit.labels_","614bf95e":"kmeans = KMeans(n_clusters = 2)\nk_fit = kmeans.fit(X)\nkumeler = k_fit.labels_","b1759e13":"plt.scatter(X[:,0], X[:,1], c = kumeler, s = 50, cmap = \"viridis\")\n\nmerkezler = k_fit.cluster_centers_\n\nplt.scatter(merkezler[:,0], merkezler[:,1], c = \"black\", s = 200, alpha = 0.5);","48db3f41":"from mpl_toolkits.mplot3d import Axes3D\nkmeans = KMeans(n_clusters = 3)\nk_fit = kmeans.fit(X)\nkumeler = k_fit.labels_\nprint(kumeler)\nmerkezler = kmeans.cluster_centers_\n","a3567565":"plt.rcParams['figure.figsize'] = (16, 9)\nfig = plt.figure()\nax = Axes3D(fig)\n\n\nax.scatter(X[:, 0], X[:, 1],X[:,2],c=[\"green\"]);\n\n","2d19a568":"fig = plt.figure()\nax = Axes3D(fig)\n\nax.scatter(X[:, 0], X[:, 1], X[:, 2],c=\"green\"),\nax.scatter(merkezler[:, 0], merkezler[:, 1], merkezler[:, 2], \n           marker='*', \n           c='red', s=5000);","c94377c9":"# !pip install yellowbrick\nfrom yellowbrick.cluster import KElbowVisualizer\nkmeans = KMeans()\nvisualizer = KElbowVisualizer(kmeans, k=(2,20))\nvisualizer.fit(X) \nvisualizer.poof() ","c724cb1b":"kmeans = KMeans()\nvisualizer = KElbowVisualizer(kmeans, k=(2,20))\nvisualizer.fit(X[:,:s]) \nvisualizer.poof() ","09077ffc":"kmeans = KMeans()\nvisualizer = KElbowVisualizer(kmeans, k=(2,20))\nvisualizer.fit(df) \nvisualizer.poof()","fea35234":"x_train","58441d85":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\n#scale etmemiz gerekiyor \ndf = StandardScaler().fit_transform(x_train)\n\npca_2D = PCA(n_components=2)\nX_pca2D_train = pca_2D.fit_transform(df)\n","b915b08d":"#bu fonksiyon modelimizdeki degiskenleri temsil etme derecesini veriyor.\npca_2D.explained_variance_ratio_","f57fbbe6":"X_pca2D_train[:10]","efce99f1":"\nrepresent=np.cumsum(np.round(pca_2D.explained_variance_ratio_, decimals = 4)*100)\nprint(represent)\n","5ad96dfb":"import matplotlib.pyplot as plt\n\nplt.scatter(X_pca2D_train[:,0],X_pca2D_train[:,1],color = [\"red\"],s=80)\n\n\nplt.legend()\nplt.xlabel(\"x_train_0\")\nplt.ylabel(\"x_train_1\")\n\nplt.show()\n","19b4961e":"X_TRAIN=DATA AS UNSUPERVIZED","f829bb55":"**PCA**","3c6ca11f":"GaussianNB with X_train","ea4b264e":"KNN ","1235f408":"Validation ---->   KMeans() with PCA() kume sayisini bulma ","7ade9d4d":"KNN-PCA","9df39c48":"README.txt\n\n===================================================================================================\nSmartphone-Based Recognition of Human Activities and Postural Transitions Data Set\nVersion 2.1\n===================================================================================================\nJorge L. Reyes-Ortiz(1,2), Davide Anguita(1), Luca Oneto(1) and Xavier Parra(2)\n1 - Smartlab, DIBRIS - Universit\ufffd  degli Studi di Genova, Genoa (16145), Italy. \n2 - CETpD - Universitat Polit\ufffdcnica de Catalunya. Vilanova i la Geltr\ufffd (08800), Spain\nhar '@' smartlab.ws \nwww.smartlab.ws\n===================================================================================================\n\nThe experiments were carried out with a group of 30 volunteers within an age bracket of 19-48 years. They performed a protocol of activities composed of six basic activities: three static postures (standing, sitting, lying) and three dynamic activities (walking, walking downstairs and walking upstairs). The experiment also included postural transitions that occurred between the static postures. These are: stand-to-sit, sit-to-stand, sit-to-lie, lie-to-sit, stand-to-lie, and lie-to-stand. All the participants were wearing a smartphone (Samsung Galaxy S II) on the waist during the experiment execution. We captured 3-axial linear acceleration and 3-axial angular velocity at a constant rate of 50Hz using the embedded accelerometer and gyroscope of the device. The experiments were video-recorded to label the data manually. The obtained dataset was randomly partitioned into two sets, where 70% of the volunteers was selected for generating the training data and 30% the test data. \n\nThe sensor signals (accelerometer and gyroscope) were pre-processed by applying noise filters and then sampled in fixed-width sliding windows of 2.56 sec and 50% overlap (128 readings\/window). The sensor acceleration signal, which has gravitational and body motion components, was separated using a Butterworth low-pass filter into body acceleration and gravity. The gravitational force is assumed to have only low frequency components, therefore a filter with 0.3 Hz cutoff frequency was used. From each window, a vector of 561 features was obtained by calculating variables from the time and frequency domain. See 'features_info.txt' for more details. \n\nThis dataset is an extended version of the UCI Human Activity Recognition Using smartphones Dataset that can be found at: https:\/\/archive.ics.uci.edu\/ml\/datasets\/Human+Activity+Recognition+Using+Smartphones\nThis version provides the original raw inertial signals from the smartphone sensors, instead of the ones pre-processed into windows which were provided in version 1. This change was done in order to be able to make online tests with the data. Moreover, the activity labels were updated in order to include postural transitions that were not part of the previous version of the dataset. \n\nThe dataset is then divided in two parts and they can be used separately.  \n\n1. Inertial sensor data \n- Raw triaxial signals from the accelerometer and gyroscope of all the trials with with participants. \n- The labels of all the performed activities.\n  \n2. Records of activity windows. Each one composed of:\n- A 561-feature vector with time and frequency domain variables. \n- Its associated activity label. \n- An identifier of the subject who carried out the experiment.\n\n\nThe dataset includes the following files:\n=========================================\n\n- 'README.txt'\n\n- 'RawData\/acc_expXX_userYY.txt': The raw triaxial acceleration signal for the experiment number XX and associated to the user number YY. Every row is one acceleration sample (three axis) captured at a frequency of 50Hz. \n\n- 'RawData\/gyro_expXX_userYY.txt': The raw triaxial angular speed signal for the experiment number XX and associated to the user number YY. Every row is one angular velocity sample (three axis) captured at a frequency of 50Hz. \n\n- 'RawData\/labels.txt': include all the activity labels available for the dataset (1 per row). \n   Column 1: experiment number ID, \n   Column 2: user number ID, \n   Column 3: activity number ID \n   Column 4: Label start point (in number of signal log samples (recorded at 50Hz))\n   Column 5: Label end point (in number of signal log samples)\n\n- 'features_info.txt': Shows information about the variables used on the feature vector.\n\n- 'features.txt': List of all features.\n\n- 'activity_labels.txt': Links the activity ID with their activity name.\n\n- 'Train\/X_train.txt': Training set.\n\n- 'Train\/y_train.txt': Training labels.\n\n- 'Test\/X_test.txt': Test set.\n\n- 'Test\/y_test.txt': Test labels.\n\n- 'Train\/subject_id_train.txt': Each row identifies the subject who performed the activity for each window sample. Its range is from 1 to 30. \n\n- 'Test\/subject_id_test.txt': Each row identifies the subject who performed the activity for each window sample. Its range is from 1 to 30. \n\n\nNotes: \n======\n- Features are normalized and bounded within [-1,1].\n- Each feature vector is a row on the 'X' and 'y' files.\n- The units used for the accelerations (total and body) are 'g's (gravity of earth -> 9.80665 m\/seg2).\n- The gyroscope units are rad\/seg.\n- A video of the experiment including an example of the 6 recorded activities with one of the participants can be seen in the following link: http:\/\/www.youtube.com\/watch?v=XOEN9W05_4A\n\nFor more information about this dataset please contact har '@' smartlab.ws or check our website www.smartlab.ws\n\n\nLicense:\n========\nUse of this dataset in publications must be acknowledged by referencing the following publications\n\n- Jorge-L. Reyes-Ortiz, Luca Oneto, Albert Sam\ufffd, Xavier Parra, Davide Anguita. Transition-Aware Human Activity Recognition Using Smartphones. Neurocomputing. Springer 2015.\n\nThis dataset is distributed AS-IS and no responsibility implied or explicit can be addressed to the authors or their institutions for its use or misuse. Any commercial use is prohibited.\n\n\nOther Related Publications:\n===========================\n\n- Davide Anguita, Alessandro Ghio, Luca Oneto, Xavier Parra and Jorge L. Reyes-Ortiz. A Public Domain Dataset for Human Activity Recognition Using Smartphones. 21th European Symposium on Artificial Neural Networks, Computational Intelligence and Machine Learning, ESANN 2013. Bruges, Belgium 24-26 April 2013. \n\n- Jorge-Luis Reyes-Ortiz, Luca Oneto, Alessandro Ghio, Albert Sam\ufffd, Davide Anguita and Xavier Parra. Human Activity Recognition on Smartphones With Awareness of Basic Activities and Postural Transitions. Artificial Neural Networks and Machine Learning \ufffd ICANN 2014. Lecture Notes in Computer Science. Springer. 2014.\n\n- Davide Anguita, Alessandro Ghio, Luca Oneto, Xavier Parra, Jorge L. Reyes-Ortiz. Energy Efficient Smartphone-Based Activity Recognition using Fixed-Point Arithmetic. Journal of Universal Computer Science. Special Issue in Ambient Assisted Living: Home Care.   Volume 19, Issue 9. May 2013\n\n- Davide Anguita, Alessandro Ghio, Luca Oneto, Xavier Parra and Jorge L. Reyes-Ortiz. Human Activity Recognition on Smartphones using a Multiclass Hardware-Friendly Support Vector Machine. 4th International Workshop of Ambient Assited Living, IWAAL 2012, Vitoria-Gasteiz, Spain, December 3-5, 2012. Proceedings. Lecture Notes in Computer Science 2012, pp 216-223. \n\n- Jorge Luis Reyes-Ortiz, Alessandro Ghio, Xavier Parra-Llanas, Davide Anguita, Joan Cabestany, Andreu Catal\ufffd. Human Activity and Motion Disorder Recognition: Towards Smarter Interactive Cognitive Environments. 21th European Symposium on Artificial Neural Networks, Computational Intelligence and Machine Learning, ESANN 2013. Bruges, Belgium 24-26 April 2013.  \n\n==================================================================================================\nJorge L. Reyes-Ortiz, Alessandro Ghio, Luca Oneto, Davide Anguita and Xavier Parra. July 2015.","79c54e7e":"KMeans() Df data ","b8baf295":"KMeans() with PCA()[::s]    s=%90 pca()degeri","ca350f2d":"GaussianNB() wit PCA [::25]","c8e8d684":"Valitdation -->  cross_val_score","5f35e9fa":"PCA 2D","5a04ccce":"> GaussianNB with PCA","93a50679":"***X_train***","b665f11b":"KNN-PCA WITH KFOLD  cross_val_score MINUMUM REPRESENTATION FEATURES"}}