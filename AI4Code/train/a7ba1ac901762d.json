{"cell_type":{"00679d89":"code","477b8e31":"code","fa7ec769":"code","8e05d9e7":"code","f41f3106":"code","118eff96":"code","d5f5f31c":"code","9fa8da3f":"code","c9d4d501":"code","04615717":"code","72b3dd55":"code","893575db":"code","66cd26b6":"code","8e7c15ab":"code","0ade01c7":"code","5b4a7f02":"code","e5a56f4f":"code","4a99d746":"code","839505cc":"code","48fd643e":"code","b364c471":"code","a565be9f":"code","202b4d26":"code","355a1b37":"code","67798bf9":"code","9ef238ee":"code","6a8f3c37":"code","dde94471":"code","06cee4e5":"code","2b94f10a":"code","312d569e":"code","a37ba10d":"code","2e934c3c":"code","49563639":"code","a077c1c7":"code","b5f80570":"code","73f31864":"code","8c07fba9":"code","5bb0d1d8":"markdown","d7ee175d":"markdown","b609db1a":"markdown","1ed10bb3":"markdown","68ff0020":"markdown","3a700e8c":"markdown","bc3feeb7":"markdown","8561db2e":"markdown","50d6b26e":"markdown","17ebaad1":"markdown","c26787c5":"markdown","741d0c91":"markdown","dfdb756a":"markdown","d72267cf":"markdown","685d06b7":"markdown","abb2f1e6":"markdown","b741cbac":"markdown","199deb48":"markdown","6ef5ddb7":"markdown"},"source":{"00679d89":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/agmented-dataset-sking\/Skin cancer dataset\/train'):\n    for filename in filenames:\n        ds=os.path.join(dirname, filename)\n#         print(ds)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","477b8e31":"import sys,os\nimport random\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder,MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom skimage.io import imread_collection , imshow_collection , imread\nimport keras\nfrom keras.preprocessing import image\nfrom keras.applications import MobileNetV2\nfrom keras import Model\nfrom keras import Sequential\nfrom keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D,Conv1D\n","fa7ec769":"\n# print('the size:'+\" \"+str(ds.shape))","8e05d9e7":"path = '..\/input\/agmented-dataset-sking\/Skin cancer dataset\/train'\n\ndef random_img(path):\n    folder = random.choice(os.listdir(path))\n    folder_name=path+'\/{}'.format(folder)\n    file = random.choice(os.listdir(folder_name))\n    img = os.path.join(folder_name, file)\n    return (img , folder)\n\n","f41f3106":"f=plt.figure(figsize=(30,30))\nprint(len(ds))\n\n\nfor i in range(0,40):\n    img = random_img(path)\n    img_to_show = plt.imread(img[0])\n    plt.imshow(img_to_show)\n    ax=plt.subplot(9,9,i+1)\n    ax.title.set_text(str(img[1]))\nf.delaxes(ax)\n    ","118eff96":"import tensorflow as tf\nbegnin_filenames = tf.io.gfile.glob(str('..\/input\/agmented-dataset-sking\/Skin cancer dataset\/train\/benign\/*'))\n# print(filenames)\nbenign_count = len([file_name for file_name in begnin_filenames ])\nprint(\"benign:\"+\" \"+str(benign_count))\nmalignant_filenames = tf.io.gfile.glob(str('..\/input\/agmented-dataset-sking\/Skin cancer dataset\/train\/malignant\/*'))\nmalignant_count = len([file_name for file_name in malignant_filenames ])\nprint(\"malignant:\"+\" \"+ str(malignant_count))\n","d5f5f31c":"# from keras.preprocessing.image import ImageDataGenerator\n# for dirname, _, filenames in os.walk('..\/input\/skin-cancer\/Skin cancer dataset\/train'):\n#     for filename in filenames:\n#         malignant=os.path.join(dirname, filename)\n# x=[]\n\n# x = np.array(malignant)  # this is a Numpy array with shape (3, 150, 150)\n\n# datagen = ImageDataGenerator(horizontal_flip=True \n#                              ,rotation_range=40\n#                              ,shear_range=0.2,\n#                               zoom_range=0.2)\n# generated_img = datagen.flow(x, batch_size=10 ,\n#                              save_to_dir='..\/input\/skin-cancer\/Skin cancer dataset\/train\/malignant'\n#                              , save_format='jpg')\n# len(generated_img)","9fa8da3f":"# f=plt.figure(figsize=(30,30))\n\n# for i in range(0,40):\n#     batch = generated_img.next()\n#     image = batch[0].astype('uint8')\n#     plt.imshow(image)\n#     plt.subplot(9,9,i+1)\n    ","c9d4d501":"benign_count-malignant_count","04615717":"#randomize the pathes of the images \npaths_list= []\nfor i in range(0,2880):\n    ran=random_img(path)\n    paths_list.append(ran)\n    ","72b3dd55":"paths_list[0:10]","893575db":"#using the following path_list to create the csv file\n#get the class label \nclass_label = [paths_list[i][1] for i in range(0,2880)]\nprint(len(class_label))\nprint(class_label[0:10])","66cd26b6":"file_name= [os.path.split(paths_list[i][0])[-1]for i in range(0,2880) ]\nlen(file_name)","8e7c15ab":"skin_df = pd.DataFrame(columns={'label'}, index=file_name)\nskin_df['label']=class_label\nskin_df.head(7)","0ade01c7":"#GET THE IMAGE SHAPE\nskin_img = imread('..\/input\/agmented-dataset-sking\/Skin cancer dataset\/train\/{label}\/{index}'.format(label = skin_df['label'][0] \n                                                                         ,index = skin_df.index[0]))\nskin_img = np.expand_dims(skin_img,axis=0)\n","5b4a7f02":"# ss = MinMaxScaler()\n\n\nimage_list = []\nfor i in range(0,len(skin_df)):\n    # load image\n    skin_img = imread('..\/input\/agmented-dataset-sking\/Skin cancer dataset\/train\/{label}\/{index}'.format(label = skin_df['label'][i] \n                                                                         ,index = skin_df.index[i])).astype(np.float32)\n    img_array = image.img_to_array(skin_img)\n     # append to list of all images\n    image_list.append(keras.applications.mobilenet_v2.preprocess_input(img_array))\n    \n# convert image list to single array\nX = np.array(image_list)\n\n# print shape of X\nprint(X.shape)","e5a56f4f":"encoder = LabelEncoder().fit(skin_df['label'])\nskin_df['label'] = encoder.transform(skin_df['label'])\nskin_df.head()","4a99d746":"y =  np.array(skin_df.label)\n","839505cc":"X_train,X_test,y_train,y_test = train_test_split(X,y\n                                                 ,test_size=0.2\n                                                ,random_state=52)\n\n\nprint('The shape of the X_train :'+' '+str(X_train.shape))\nprint('The size of the X_train :'+' '+str(X_train.shape[0]))\nprint('The shape of the X_test :'+' '+str(X_test.shape))\nprint('The size of the X_test:'+' '+str(X_test.shape[0]))\n","48fd643e":"# import mobileNet layer\n# set model constants\nnum_classes = 1\n\n# # define model as Sequential\nmodel = Sequential()\n","b364c471":"\nmodel.add(MobileNetV2(input_shape=(224,224,3),weights=\"imagenet\"\n                             ,include_top=False))\n\nmodel.add(tf.keras.layers.GlobalAveragePooling2D())\nmodel.add( Dense(num_classes, activation='sigmoid',name='preds'))\nmodel.layers[0].trainable= False\n# show model summary\nmodel.summary()","a565be9f":"model.compile(\n    # set the loss as binary_crossentropy\n    loss=keras.losses.binary_crossentropy,\n    # set the optimizer as stochastic gradient descent\n    optimizer=keras.optimizers.SGD(lr=0.001),\n    # set the metric as accuracy\n    metrics=['accuracy']\n)\n\n\n# mock-train the model \nmodel.fit(\n    X_train[:,:,:,:],\n    y_train[:],\n    epochs=110,\n    verbose=1,\n    validation_data=(X_test[:,:,:,:], y_test[:])\n)\nmodel.save(\"model_hi.h5\")\nprint(\"Saved model to disk\")","202b4d26":"# !ls -la DL_PROJECT\/model.h5","355a1b37":"test_path = '..\/input\/agmented-dataset-sking\/Skin cancer dataset\/test\/*\/*'\ntest_img =imread_collection(test_path)\nprint(len(test_img))\nplt.imshow(test_img[0])","67798bf9":"#using the random fn to get the images in random form\ntest_list =[]\ntest_ran = '..\/input\/agmented-dataset-sking\/Skin cancer dataset\/test'\nfor i in range (0, len(test_img)):\n    ran = random_img(test_ran)\n    test_list.append(ran)\nprint(len(test_list))    \ntest_list[:5]    \n","9ef238ee":"test_label = [ test_list[i][1]for i in range(0 , len(test_img))]\ntest_label[:5]   ","6a8f3c37":"test_index = [os.path.split(test_list[i][0])[-1] for i in range(0 , len(test_img))]\ntest_index[:5]","dde94471":"test_df =pd.DataFrame(columns={'labels'} , index= test_index)\ntest_df['labels'] = test_label\ntest_df.head(7)","06cee4e5":"test_list = []\nfor i in range(0,len(test_df)):\n    test_img = imread('..\/input\/agmented-dataset-sking\/Skin cancer dataset\/test\/{label}\/{index}'.format(label = test_df['labels'][i] \n                                                                         ,index = test_df.index[i])).astype(np.float32)\n   \n    test_array = image.img_to_array(test_img)\n    \n    # append to list of all images\n    test_list.append(keras.applications.mobilenet_v2.preprocess_input(test_array))\n            \n\n    # convert image list to single array\n    x_test = np.array(test_list)\n\n# print shape of X\nprint(x_test.shape)","2b94f10a":"# x_test","312d569e":"test_df['labels'] = encoder.transform(test_df['labels'])\ntest_df.head()","a37ba10d":"ytest=np.array(test_df['labels'])","2e934c3c":"pretrained_cnn = keras.models.load_model('.\/model_hi.h5')\n\n# # evaluate model on test set\nscore = pretrained_cnn.evaluate(x_test, ytest, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n\nprint(\"\")\n\n# evaluate model on holdout set\neval_score = pretrained_cnn.evaluate(X_test,y_test)\n# print loss score\nprint('Eval loss:',eval_score[0])\n# print accuracy score\nprint('Eval accuracy:',eval_score[1] )","49563639":"test_df[20:30]","a077c1c7":"from keras.applications import imagenet_utils\ny_pred= pretrained_cnn.predict_classes(x_test)\ny_pred","b5f80570":"from sklearn.metrics import classification_report  , confusion_matrix\ntarget_classes = ['benign','malignant']\nclassification_report(ytest , y_pred , output_dict = True , target_names=target_classes)","73f31864":"\nconfusion_matrix(ytest , y_pred )  ","8c07fba9":"# get the class probability of the test images\npretrained_cnn.predict_proba(x_test)\n","5bb0d1d8":"## Save the info of the images in DataFrame","d7ee175d":"## Visualizing those images\n","b609db1a":"## Check if balanced or not","1ed10bb3":"## Importing the used python packages","68ff0020":"##  Compile and train model","3a700e8c":"## Building the model ","bc3feeb7":"# Skin Cancer Detection","8561db2e":"## Function to get a random images from the folders\n","50d6b26e":"## Normalizing the pixels","17ebaad1":"## Perform Label Encoding (preprocessing before Training via CNN arch)","c26787c5":"## Loading images from the folders","741d0c91":"## Data augmentation","dfdb756a":"## Upload the test dataset","d72267cf":"## Get the label class (Y)","685d06b7":"##  Splitting the training set (80%) and the testing set (20%)","abb2f1e6":"## Pre_Processing to be in the acceptable form for MobileNet ","b741cbac":"## Explore More Details About The Data","199deb48":"## Encoding the labels of test dataset","6ef5ddb7":"# create the datafram for the test dataset\n## 1.randomize the test dataset"}}