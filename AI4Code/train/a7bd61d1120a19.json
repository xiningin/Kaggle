{"cell_type":{"87151976":"code","3995f7aa":"code","fe29b441":"code","954d8f46":"code","7bcc37aa":"code","e038f0b6":"code","b4789c4f":"code","cc652e70":"code","1e71965f":"code","595f955e":"code","31e20ead":"code","a012d0f7":"code","0a8d334d":"code","52c52944":"code","90e19b65":"code","84abf2a7":"markdown","efbaacd4":"markdown","7a78f07d":"markdown","e9134890":"markdown","93ec6684":"markdown","c5cea048":"markdown","c1ac3b05":"markdown"},"source":{"87151976":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nlistNGS_CSV = glob.glob(\"..\/input\/how-to-import-large-csv-files-and-save-efficiently\/NGS*pkl\")\nimport feather\n# Any results you write to the current directory are saved as output.","3995f7aa":"def calculate_speeds(df, dt=None, SI=False):\n    data_selected = df[['Time', 'x','y']]\n    if SI==True:\n        data_selected.x = data_selected.x \/ 1.0936132983\n        data_selected.y = data_selected.y \/ 1.0936132983\n    # Might have used shift pd function ?\n    data_selected_diff = data_selected.diff()\n    if dt==None:\n        # Time is now a timedelta and need to be converted\n        data_selected_diff.Time = data_selected_diff.Time.apply(lambda x: (x.total_seconds()))\n        data_selected_diff['Speed'] = (data_selected_diff.x **2 + data_selected_diff.y **2).astype(np.float64).apply(np.sqrt) \/ data_selected_diff.Time\n    else:\n        # Need to be sure about the time step...\n        data_selected_diff['Speed'] = (data_selected_diff.x **2 + data_selected_diff.y **2).astype(np.float64).apply(np.sqrt) \/ dt\n    #data_selected_diff.rename(columns={'Time':'TimeDelta'}, inplace=True)\n    #return data_selected_diff\n    df['TimeDelta'] = data_selected_diff.Time\n    df['Speed'] = data_selected_diff.Speed\n    return df[1:]\n\ndef remove_wrong_values(df, tested_columns=['Season_Year', 'GameKey', 'PlayID', 'GSISID', 'TimeDelta'], cutspeed=None):\n    dump = df.copy()\n    colums = dump.columns\n    mask = []\n    for col in tested_columns:\n        dump['shift_'+col] = dump[col].shift(-1)\n        mask.append(\"( dump['shift_\"+col+\"'] == dump['\"+col+\"'])\")\n    mask =eval(\" & \".join(mask))\n    # Keep results where next rows is equally space\n    dump = dump[mask]\n    dump = dump[colums]\n    if cutspeed!=None:\n        dump = dump[dump.Speed < cutspeed]\n    return dump\n\ndef get_speed(df):\n    df_with_speed = df.copy()\n    date_format = '%Y-%m-%d %H:%M:%S.%f'\n    sortBy = ['Season_Year', 'GameKey', 'PlayID', 'GSISID', 'Time']\n    df_with_speed.Time = pd.to_datetime(df_with_speed.Time, format =date_format)\n    df_with_speed.sort_values(sortBy, inplace=True)\n    df_with_speed = calculate_speeds(df_with_speed, SI=True)\n    cut_speed=100 \/ 9.58 # World record 9,857232 m\/s for NFL\n    df_with_speed = remove_wrong_values(df_with_speed, cutspeed=cut_speed)\n    return df_with_speed\n\ndef memory(df):\n    if isinstance(df,pd.DataFrame):\n        value = df.memory_usage(deep=True).sum() \/ 1024 ** 2\n    else: # we assume if not a df it's a series\n        value = df.memory_usage(deep=True) \/ 1024 ** 2\n    return value, \"{:03.2f} MB\".format(value)\n\ndef downCast(df, verbose=True):\n    mem, _ =  memory(df)\n    date_format = '%Y-%m-%d %H:%M:%S.%f'\n    converted_obj = df.select_dtypes(include=['int']).astype('category')\n    df[converted_obj.columns] = converted_obj\n    converted_obj = df.select_dtypes(include=['float']).apply(pd.to_numeric,downcast='float')\n    df[converted_obj.columns] = converted_obj\n    if 'Time' in df: df.Time = pd.to_datetime(df.Time,format=date_format)\n    memDown, _ = memory(df)\n    if verbose: print(\"Gain {:03.2f} %\".format(mem\/memDown*100.0))\n    return df\n\ndef downCastAllCSV(listBigCSV, verbose=True):\n    for csvFile in listBigCSV:\n        dataframe = pd.read_csv(csvFile, engine='c')\n        dataframe = downCast(dataframe)\n        dataframe.to_pickle(os.path.basename(csvFile[:-4]+'.pkl'))\n        del dataframe\n        \nimport inspect\n\ndef retrieve_name(var):\n    callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n    return [var_name for var_name, var_val in callers_local_vars if var_val is var][0]\n\ndef filter_expr(key,filtered):\n    return '(df[\"'+key+'\"] == '+str(filtered)+')'\n\ndef filter_from_dict(df, filters, inplace=False):\n    mask = []\n    maskList=[]\n    for key, filtered in filters.items():\n        if type(filtered) == str:\n            filtered = '\"'+filtered+'\"'\n            mask.append(filter_expr(key,filtered))\n        else:\n            if type(filtered) == list:\n                for fil in filtered:\n                    maskList.append(filter_expr(key,fil))\n                mask.append('('+'|'.join(maskList)+')')\n            else:\n                mask.append(filter_expr(key,filtered))\n    print( 'Mask generated: ',' & '.join(mask))\n    if inplace:\n        df = df[(eval('&'.join(mask)))]\n    else:\n        return df[(eval('&'.join(mask)))]\n","fe29b441":"df = pd.read_csv('..\/input\/NFL-Punt-Analytics-Competition\/NGS-2016-pre.csv')","954d8f46":"date_format = '%Y-%m-%d %H:%M:%S.%f'\nsortBy = ['Season_Year', 'GameKey', 'PlayID', 'GSISID', 'Time']\ndf.Time = pd.to_datetime(df.Time, format =date_format)\ndf.sort_values(sortBy, inplace=True)","7bcc37aa":"%timeit calculate_speeds(df[:10000])","e038f0b6":"df_with_speed = calculate_speeds(df, SI=True)\ndf_with_speed.head()","b4789c4f":"cut_speed=100 \/ 9.58 # World record 9,857232 m\/s for NFL\ndf_remove_bad_values = remove_wrong_values(df, cutspeed=cut_speed)\ndf_remove_bad_values.Speed.hist()","cc652e70":"df_remove_bad_values.describe()\n","1e71965f":"game_play_player = df_remove_bad_values[((df_remove_bad_values.GameKey==5)&(df_remove_bad_values.PlayID==3129)&(df_remove_bad_values.GSISID==31057))]\ngame_play_player.plot(x='Time',y='Speed')","595f955e":"game_play_player.Speed.max() *2.23694","31e20ead":"game_play_player.Speed.mean()*2.23694","a012d0f7":"def calculate_speeds2(df, dt=None, SI=False):\n    data_selected = df[['Time', 'x','y']]\n    if SI==True:\n        data_selected.x = data_selected.x.values \/ 1.0936132983\n        data_selected.y = data_selected.y.values \/ 1.0936132983\n    # Might have used shift pd function ?\n    data_selected_diff = data_selected.diff()\n    if dt==None:\n        # Time is now a timedelta and need to be converted\n        data_selected_diff.Time = data_selected_diff.Time.apply(lambda x: (x.total_seconds()))\n        data_selected_diff['Speed'] = np.sqrt(data_selected_diff.x.values **2 + data_selected_diff.y.values **2) \/ data_selected_diff.Time.values\n    else:\n        # Need to be sure about the time step...\n        data_selected_diff['Speed'] = (data_selected_diff.x.values **2 + data_selected_diff.y.values **2).astype(np.float64).apply(np.sqrt) \/ dt.values\n    #data_selected_diff.rename(columns={'Time':'TimeDelta'}, inplace=True)\n    #return data_selected_diff\n    df['TimeDelta'] = data_selected_diff.Time\n    df['Speed'] = data_selected_diff.Speed\n    return df[1:]\n\ndef get_speed(df):\n    df_with_speed = df.copy()\n    date_format = '%Y-%m-%d %H:%M:%S.%f'\n    sortBy = ['Season_Year', 'GameKey', 'PlayID', 'GSISID', 'Time']\n    df_with_speed.Time = pd.to_datetime(df_with_speed.Time, format =date_format)\n    df_with_speed.sort_values(sortBy, inplace=True)\n    df_with_speed = calculate_speeds2(df_with_speed, SI=True)\n    cut_speed=100 \/ 9.58 # World record 9,857232 m\/s for NFL\n    df_with_speed = remove_wrong_values(df_with_speed, cutspeed=cut_speed)\n    return df_with_speed\n\n","0a8d334d":"df_test = get_speed(df)","52c52944":"df_remove_bad_values == df_test","90e19b65":"df = get_speed(df)","84abf2a7":"# Some formating and sorting is needed\nWe need to calculate the speed of each player. There is a number of rows with the same time. Sorting makes things easier.","efbaacd4":"# What is the speed of a player 19714 during the game 234 ?","7a78f07d":"# Defining functions","e9134890":"# One for all","93ec6684":"To compare with [aggregation method](https:\/\/www.kaggle.com\/mtodisco10\/speedy-speed-mph-functions) we can calculate maximum and mean for this play. ","c5cea048":"This notebook provides an quick solution to calculate speed from data. There is probably better way to do it with other method (some NaN and inifit values are found) but removing this values does not affect the results, e.g. concussion are occuring in the middle of the run.\nHere is a more general approach since time delta can be different. See the other proposal with [aggregation method](https:\/\/www.kaggle.com\/mtodisco10\/speedy-speed-mph-functions)\n\nThe simple way is to calculate this simple formula : \n$$\\|\\vec{V}\\|=\\|\\frac{\\vec{dx}}{dt}\\|=\\frac{\\sqrt{x^2+y^2}}{t_{i+1}-t_{i}}$$ \nwith $t_i$ the time at coodinate $i$","c1ac3b05":"# Clean values and Speed above world record"}}