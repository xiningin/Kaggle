{"cell_type":{"bca06eb9":"code","7998c792":"code","0117c763":"code","a724f30b":"code","24effd4e":"code","7a260f57":"code","6257beb7":"code","f8ac0e29":"code","f4692b84":"code","ca040d2d":"code","61ce4ccb":"code","3165bc5e":"code","47186119":"code","52d4f586":"code","bb8c775b":"code","f0b7e746":"code","ebbf5a76":"code","f0c5319c":"code","4085d4a6":"code","90b816cf":"code","074e14ec":"code","908a0cd7":"code","063a5455":"code","4b9088f6":"code","d25bace8":"code","f52cf26d":"markdown","141ef5aa":"markdown","d6212859":"markdown","1374cfaa":"markdown","743972be":"markdown","55fc5f04":"markdown","5b3d53ee":"markdown","2d37515d":"markdown","ccb9d74c":"markdown","3e34554f":"markdown","b4be24ee":"markdown","1769c106":"markdown","042636ff":"markdown","72aea521":"markdown","abfe1f1d":"markdown","1145def0":"markdown","a069d7d8":"markdown"},"source":{"bca06eb9":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\nfrom sklearn.model_selection import train_test_split\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warnings (as always)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #to know where to apply Box-cox transformation","7998c792":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ndf_train.head()","0117c763":"df_test.head()","a724f30b":"#Save it\ntrain_id = df_train['Id']\ntest_id = df_test['Id']\n\n#drop it\ndf_train.drop(\"Id\", axis = 1, inplace = True)\ndf_test.drop(\"Id\", axis = 1, inplace = True)","24effd4e":"df_train.info()","7a260f57":"df_test.info()","6257beb7":"sns.distplot(df_train['SalePrice']);","f8ac0e29":"corrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(15, 12))\nsns.heatmap(corrmat, square=True);","f4692b84":"corr = df_train.corr().sort_values(by='SalePrice',ascending=False).round(2)\nprint(corr['SalePrice'])","ca040d2d":"fig, ax = plt.subplots()\n\nax.scatter(x = df_train['OverallQual'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('OverallQual', fontsize=13)\nplt.show()","61ce4ccb":"fig, ax = plt.subplots()\nax.scatter(x = df_train['GrLivArea'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","3165bc5e":"# Removing outlier from data\n\ndf_train = df_train.drop(df_train[(df_train['GrLivArea']>4000) & ((df_train['SalePrice']<300000) | (df_train['SalePrice']>700000))].index)\ndf_train.reset_index(drop=True, inplace=True)\n\n# checking the same graph again after removing outlier\n\nfig, ax = plt.subplots()\nax.scatter(x = df_train['GrLivArea'], y = df_train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","47186119":"missing_data_perc = pd.DataFrame({'Missing_Perc' :((df_train.isnull().sum() \/ len(df_train)) * 100).sort_values(ascending=False)})\nmissing_data_perc","52d4f586":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=missing_data_perc.index, y=missing_data_perc['Missing_Perc'])\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","bb8c775b":"all_data = pd.concat((df_train, df_test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True) #data to be predicted\nprint(\"all_data size is : {}\".format(all_data.shape))\ny_train = df_train.SalePrice.values","f0b7e746":"missing_columns_non_value = [\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\n                  \"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"MasVnrType\",\"MSSubClass\"]\nfor i in missing_columns_non_value :\n    all_data[i].fillna(\"None\" , inplace = True)","ebbf5a76":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","f0c5319c":"missing_columns_mode_value = [\"MSZoning\", \"BsmtFullBath\", \"BsmtHalfBath\", \"Utilities\",\"MSZoning\",\"Electrical\", \"KitchenQual\", \"SaleType\",\"Exterior1st\", \"Exterior2nd\",\"MasVnrArea\"]\nfor i in missing_columns_mode_value:\n    all_data[i].fillna(all_data[i].mode()[0], inplace = True)","4085d4a6":"missing_columns_num_value = [\"GarageYrBlt\", \"GarageArea\", \"GarageCars\",\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\"]\nfor i in missing_columns_num_value :\n    all_data[i] = all_data[i].fillna(0)","90b816cf":"all_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","074e14ec":"print(all_data.isna().sum())","908a0cd7":"all_data = pd.get_dummies(all_data)","063a5455":"### split train_test datasets\nntrain = df_train.shape[0]\nntest = df_test.shape[0]\nX_train = all_data[:ntrain]\nX_test = all_data[ntrain:]","4b9088f6":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)","d25bace8":"# predict housing price for test dataset\ny_predicted = model.predict(X_test)\ny_predicted = pd.DataFrame(y_predicted, columns=['SalePrice'])\ny_predicted = pd.concat([test_id, y_predicted], axis=1)\ny_predicted.to_csv('submission.csv', index=False)","f52cf26d":"Let's plot missing data columns in descending order","141ef5aa":"Now all Missing values has been imputed. Let's check that.","d6212859":"#### Fill null values of numerical columns with 0","1374cfaa":"Need to check highly co-related variables with visualisation","743972be":"## Handling and imputing Missing Values","55fc5f04":"## Load Dataset","5b3d53ee":"Checking Missing percetage in columns","2d37515d":"## Regression technique to predict House Sale Price\n\n\n# Import libraries","ccb9d74c":"#### Fill Missing values with mode value","3e34554f":"### Converting Categorical variables for model","b4be24ee":"Checking corelations\n","1769c106":"Let's check the data types of all columns","042636ff":"## Implementation of Linear Regression model","72aea521":"## Data Analysis","abfe1f1d":"**Imputing values with None in following columns**","1145def0":"Removing outlier from the data","a069d7d8":"removing Id column from Train and Test both dataframe"}}