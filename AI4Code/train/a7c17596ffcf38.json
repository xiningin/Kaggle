{"cell_type":{"7f4cb921":"code","e9fa5712":"code","1f0c91b1":"code","a8415fd4":"code","97fe6354":"code","035d32e9":"code","c2f1ea6d":"code","09710652":"code","1e6a84c3":"code","6302fe9b":"code","29844b28":"code","57c426ff":"code","15584c0e":"code","20df4493":"code","9c34ffd8":"code","60133ec6":"code","c42964d8":"markdown","0239fafb":"markdown","5c3e7a5a":"markdown","7a4d2811":"markdown","f0711163":"markdown","c2dd0af9":"markdown","1bba4b16":"markdown","0228ca76":"markdown","ac5f0df9":"markdown","bbfc3da8":"markdown","77f567d6":"markdown","e1b51efc":"markdown"},"source":{"7f4cb921":"import numpy as np \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","e9fa5712":"dataset = pd.read_csv('..\/input\/iris\/Iris.csv')\nX = dataset.iloc[:, :-1].values # Independent variables\ny = dataset.iloc[:, -1].values  # Dependent or Target variable (Iris-Species)","1f0c91b1":"dataset","a8415fd4":"dataset.info()\n# datatypes and null_value count","97fe6354":"dataset.shape\n# Rows & Columns","035d32e9":"plt.title('Species vs SepalLengthCm')\nsns.barplot(data= dataset, x = 'SepalLengthCm', y= 'Species', hue = 'Species')","c2f1ea6d":"plt.title('Species vs SepalWidthCm')\nsns.barplot(data= dataset, x = 'SepalWidthCm', y= 'Species', hue = 'Species')","09710652":"plt.title('Species vs PetalLengthCm')\nsns.barplot(data= dataset, x = 'PetalLengthCm', y= 'Species', hue = 'Species')","1e6a84c3":"plt.title('Species vs PetalWidthCm')\nsns.barplot(data= dataset, x = 'PetalWidthCm', y= 'Species', hue = 'Species')","6302fe9b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","29844b28":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","57c426ff":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","15584c0e":"print(classifier.predict(sc.transform([[1, 5.1, 3.5, 1.4, 0.2]])))","20df4493":"y_pred = classifier.predict(X_test)","9c34ffd8":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(\"Accuracy: {:.2f}%\".format(accuracy_score(y_test, y_pred)*100))","60133ec6":"sns.countplot(y_pred, data=dataset)\nplt.title('Predicted class')\nplt.xlabel('Iris-Species')\nplt.show()\nsns.countplot(y_test,  data=dataset)\nplt.title('Real class')\nplt.xlabel('Iris-Species')\nplt.show()","c42964d8":"## **Feature Scaling**","0239fafb":"## **Predicting result individually**","5c3e7a5a":"## **Importing the libraries**","7a4d2811":"## **Predicting Prediction class**","f0711163":"## **Visualising the Real class and Predicted class**","c2dd0af9":"## **Dataset information**","1bba4b16":"## **Splitting the dataset into the Training set and Test set**","0228ca76":"## **Exploratory Data Analysis (EDA)**","ac5f0df9":"## **Training the Decision Tree Classification model on the Training set**","bbfc3da8":"## **Importing the dataset**","77f567d6":"# **Iris Prediction using Decision Tree Algorithm** *by Akhilesh Thite*","e1b51efc":"## **Making the Confusion Matrix \"Accuracy\"**\n\n"}}