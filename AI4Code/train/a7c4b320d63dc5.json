{"cell_type":{"cf1cb971":"code","461b1b45":"code","51360b4b":"code","24245712":"code","44198c81":"code","916d15ce":"code","7514a7be":"code","cfb22d7d":"markdown","c1c4913f":"markdown"},"source":{"cf1cb971":"import os\n####*IMPORANT*: Have to do this line *before* importing tensorflow\nos.environ['PYTHONHASHSEED']=str(1)\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.layers\nimport random\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","461b1b45":"def reset_random_seeds():\n    os.environ['PYTHONHASHSEED']=str(1)\n    tf.random.set_seed(1)\n    np.random.seed(1)\n    random.seed(1)","51360b4b":"#synthetic data function\nnum_features = 10\nnum_samples = 30000\ndef synth_func(X):\n    X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 = X.transpose()\n\n    f1 = np.exp(np.abs(X1-X2))                        \n    f2 = np.abs(X2*X3)  \n    f3 = -1*(X3**2)**np.abs(X4)\n    f4 = (X1*X4)**2\n    f5 = np.log(X4**2 + X5**2 + X7**2 + X8**2)\n    f6 = X9 + 1\/(1 + X10**2)\n\n    Y =     f1 + f2 + f3 + f4 + f5 + f6    \n    return Y","24245712":"#generate synthetic data\nnp.random.seed(1)\nX = np.random.uniform(low=-1, high=1, size=(num_samples,num_features))\ndata = pd.DataFrame(X)\ndata = data.rename({0:\"x1\",1:\"x2\",2:\"x3\",3:\"x4\",4:\"x5\",5:\"x6\",6:\"x7\",7:\"x8\",8:\"x9\",9:\"x10\"},axis=1)\nY = synth_func(X)\ndata[\"y\"]=Y\ndata.head()","44198c81":"#test_train_split & data Scaling\nX = data.iloc[:,0:10].values\ny = data[\"y\"].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)","916d15ce":"#model building\ndef train_model(X_train, y_train):\n    reset_random_seeds()\n    model = keras.Sequential([\n            keras.layers.Dense(40, input_dim=X_train.shape[1], activation='relu'),\n            keras.layers.Dense(20, activation='relu'),\n            keras.layers.Dense(10, activation='relu'),\n            keras.layers.Dense(1, activation='relu')\n        ])\n\n    model.compile(optimizer='adam', loss='mean_squared_error',metrics=['mean_absolute_error'])\n    #keeping epochs = 1 for the reproducability test\n    \n    \n    model.fit(X_train, y_train, epochs=2,batch_size=100)","7514a7be":"#for each run NN results are reproducable\nprint(\"train_model - Run : 1\")\ntrain_model(X_train, y_train)\nprint(\"\")\nprint(\"\")\nprint(\"train_model - Run : 2\")\ntrain_model(X_train, y_train)","cfb22d7d":"### Build Model","c1c4913f":"### Generate Synthetic Dataset"}}