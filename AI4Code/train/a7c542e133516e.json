{"cell_type":{"7468ba35":"code","85575a7d":"code","8d13ed4f":"code","b9310e08":"code","fb2842ce":"code","87b2eba2":"code","322017ad":"code","fc6c79b5":"code","b666148c":"code","3bec3299":"code","806f6e1d":"code","ba18bcb1":"code","a17b80bc":"markdown","47e3f8ea":"markdown","c17f7db3":"markdown","e8d3245b":"markdown","bd734263":"markdown","85b6a81c":"markdown","2c52a5c4":"markdown","a8f66ffa":"markdown"},"source":{"7468ba35":"import os\nfrom IPython.display import Image\nImage(filename=\"..\/input\/encodings\/encodings.jpg\", width= 1200, height=800)","85575a7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d13ed4f":"data = pd.read_csv('\/kaggle\/input\/analytics-vidhya-job-a-thon-may-2021\/train_s3TEQDk.csv')","b9310e08":"data.columns =  [_c.upper() for _c in data.columns]","fb2842ce":"data.head()","87b2eba2":"cols = ['CHANNEL_CODE', 'OCCUPATION']","322017ad":"label_encode_var =  data[cols]\n\nfrom sklearn.preprocessing import LabelEncoder\nfor col in cols:\n    label_encode_var.loc[:,f'{col}_ENCODED'] = LabelEncoder().fit_transform(label_encode_var[col])\n\nlabel_encode_var.head()","fc6c79b5":"from sklearn.preprocessing import OneHotEncoder\n\none_hot_encode_var =  data[cols]\none_hot = OneHotEncoder()\n\nfor col in cols:\n    enc = one_hot.fit_transform(one_hot_encode_var[col].values.reshape(-1,1)).toarray()\n    df_enc = pd.DataFrame(enc, columns = [col + str('_') + str(one_hot.categories_[0][i]) for i in range(len(one_hot.categories_[0]))])\n    df_enc = df_enc.iloc[:,1:]\n    one_hot_encode_var = pd.concat([one_hot_encode_var, df_enc], axis = 1)\n    \none_hot_encode_var.head()","b666148c":"freq_encode_var =  data[cols]\n\nfor col in cols:\n    freq = freq_encode_var.groupby(col).size() \/ len(freq_encode_var)\n    freq_encode_var.loc[:,f'{col}_ENCODED'] = freq_encode_var[col].map(freq)\n    \nfreq_encode_var.head()","3bec3299":"from category_encoders import *","806f6e1d":"leave_one_out_encode_var = data[['CHANNEL_CODE', 'OCCUPATION', 'IS_LEAD']]\n\ny = leave_one_out_encode_var.IS_LEAD\nX = leave_one_out_encode_var.iloc[:,:-1]\nenc = LeaveOneOutEncoder(cols=cols).fit(X, y)\nenc_dataset = enc.transform(X)\n\n\nenc_dataset.columns = [_c.upper() + '_ENCODED' for _c in enc_dataset.columns]\nleave_one_out_encode_var = pd.concat([leave_one_out_encode_var,enc_dataset], axis = 1)\nleave_one_out_encode_var.head()","ba18bcb1":"helmert_encode_var = data[['CHANNEL_CODE', 'OCCUPATION', 'IS_LEAD']]\n\ny = helmert_encode_var.IS_LEAD\nX = helmert_encode_var.iloc[:,:-1]\nenc = HelmertEncoder(cols=cols,  handle_unknown='value', handle_missing='value').fit(X, y)\nenc_dataset = enc.transform(X)\n\n\nenc_dataset.columns = [_c.upper() + '_ENCODED' for _c in enc_dataset.columns]\nhelmert_encode_var = pd.concat([helmert_encode_var,enc_dataset], axis = 1)\nhelmert_encode_var.head()","a17b80bc":"### 4. Leave One Out Encoding","47e3f8ea":"### This Kernel shows 5 different types of Encodings you could use in your project\n\n1. Label Encoding\n2. One Hot Encoding\n3. Frequency Encoding\n4. Leave One Out Encoding\n5. Helmert Encoding\n\nWe would only use a subset of columns to execute the 5 techniques","c17f7db3":"### 3. Frequency Encoding","e8d3245b":"### 2. One Hot Encoding","bd734263":"#### All encoding has their pros and cons which I will cover in a different Kernel. \n\n### *If found helpful, please leave an UPVOTE \ud83d\udc4d*","85b6a81c":"### 5. Helmert Encoding","2c52a5c4":"#### Read the training data","a8f66ffa":"### 1. Label Encoding"}}