{"cell_type":{"f295c628":"code","28de7d36":"code","45d826bd":"code","743cc46c":"code","bb5c126d":"code","d0f2cead":"code","000d2480":"code","39bcf35a":"code","f7e7159e":"code","62fc0baf":"code","13d899f7":"code","24b04ce5":"code","459edf84":"code","37e4e1d8":"code","f0ead366":"code","b5845e57":"code","cb39f175":"code","ea39d532":"code","b7e6cc84":"code","02f4a0ab":"code","2c62dc48":"code","26d02358":"code","c3a847d9":"code","1abd9a1c":"markdown","a1ac677e":"markdown","8a270414":"markdown","0363b6e6":"markdown"},"source":{"f295c628":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom graphviz import Source\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28de7d36":"df = pd.read_csv('..\/input\/decision-tree-and-random-forest\/decision_tree_test.csv', encoding='utf8')\ndf.head()","45d826bd":"#Code from Gabriel Preda  https:\/\/www.kaggle.com\/gpreda\/public-tenders-2007-2016-romania-eda \n\ndef plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:31], palette='ocean')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 0.2,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","743cc46c":"plot_count(\"age\", \"Age\", df, size=4)","bb5c126d":"plot_count(\"sex\", \"Sex\", df, size=3)","d0f2cead":"plot_count(\"bone\", \"Bone\", df, size=2)","000d2480":"plot_count(\"lung\", \"Lung\", df, size=1)","39bcf35a":"#Code from Salman Faroz https:\/\/www.kaggle.com\/salmanfaroz\/campus-recruitment-academic-and-employability\/data\n\nst=df.groupby(\"age\")\nst.boxplot(column=['bone',\"abdominal\", \"liver\" ])\nprint(\"    0 - True         1 - False \")","f7e7159e":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\n\n\nfrom scipy.stats import skew\nplt.style.use('ggplot')","62fc0baf":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","13d899f7":"df = pd.get_dummies(df)","24b04ce5":"import seaborn as sbn\n\ncorrelation=df.corr()\nplt.figure(figsize=(15,15))\nsbn.heatmap(correlation,annot=True,cmap=plt.cm.Greens)","459edf84":"x = df.drop(['bone', 'age'], axis=1)\nx.fillna(999999, inplace=True)\ny = df['age']","37e4e1d8":"dt = DecisionTreeClassifier(max_depth=3)","f0ead366":"dt.fit(x, y)","b5845e57":"dt_feat = pd.DataFrame(dt.feature_importances_, index=x.columns, columns=['feat_importance'])\ndt_feat.sort_values('feat_importance').tail(8).plot.barh()\nplt.show()","cb39f175":"from IPython.display import SVG\nos.environ[\"PATH\"] += os.pathsep + 'C:\/Program Files (x86)\/Graphviz2.38\/bin\/'\n\ngraph = Source(export_graphviz(dt, out_file=None, feature_names=x.columns, filled = True))\ndisplay(SVG(graph.pipe(format='svg')))","ea39d532":"x = df.drop(['brain', 'sex'], axis=1)\nx.fillna(999999, inplace=True)\ny = df['sex']","b7e6cc84":"dt = DecisionTreeClassifier(max_depth=3)","02f4a0ab":"dt.fit(x, y)","2c62dc48":"dt_feat = pd.DataFrame(dt.feature_importances_, index=x.columns, columns=['feat_importance'])\ndt_feat.sort_values('feat_importance').tail(8).plot.barh(figsize=(14, 6), color='green')\nplt.show()","26d02358":"from IPython.display import SVG\nos.environ[\"PATH\"] += os.pathsep + 'C:\/Program Files (x86)\/Graphviz2.38\/bin\/'\n\ngraph = Source(export_graphviz(dt, out_file=None, feature_names=x.columns, filled = True))\ndisplay(SVG(graph.pipe(format='svg')))","c3a847d9":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here' )","1abd9a1c":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQgrBBdinZxlNOpyCa5CvDFPrdEv8qCJxIn6Q&usqp=CAU)slideshare.net","a1ac677e":"#Statistical test. Code from Salman Faroz https:\/\/www.kaggle.com\/salmanfaroz\/campus-recruitment-academic-and-employability\/data","8a270414":"#Decision Tree\n\nA decision tree is a flowchart-like structure in which each internal node represents a \"test\" on an attribute (e.g. whether a coin flip comes up heads or tails), each branch represents the outcome of the test, and each leaf node represents a class label (decision taken after computing all attributes). The paths from root to leaf represent classification rules.\nhttps:\/\/en.wikipedia.org\/wiki\/Decision_tree#:~:text=A%20decision%20tree%20is%20a%20flowchart%2Dlike%20structure%20in%20which,taken%20after%20computing%20all%20attributes).","0363b6e6":"#Change bar colors and figsize, just write inside the parenthesis of plot.barh() "}}