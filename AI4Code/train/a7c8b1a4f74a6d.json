{"cell_type":{"041b94da":"code","00d4d5c8":"code","a8f038de":"code","61571416":"code","f35076ac":"code","73cc55d3":"code","75c911a3":"code","f2f57e38":"code","b696f8f7":"code","3852f983":"code","236ed671":"code","7af93624":"code","f85c41f1":"markdown","2b1147d4":"markdown"},"source":{"041b94da":"!pip install simpletransformers","00d4d5c8":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nimport re\nfrom simpletransformers.classification import ClassificationModel, ClassificationArgs","a8f038de":"data_train_1 = pd.read_csv('..\/input\/irony\/irony\/train_text.txt', error_bad_lines=False, names=['Text'])\ndata_train_2 = pd.read_csv('..\/input\/irony\/irony\/train_labels.txt', error_bad_lines=False, names=['Label']) \nData_train = data_train_1.copy()\nData_train['Label'] = data_train_2['Label']\n\ndata_train_3 = pd.read_csv('..\/input\/irony\/irony\/val_text.txt', error_bad_lines=False, names=['Text'])\ndata_train_4 = pd.read_csv('..\/input\/irony\/irony\/val_labels.txt', error_bad_lines=False, names=['Label']) \nData_val = data_train_3.copy()\nData_val['Label'] = data_train_4['Label']\n\ndata_train_5 = pd.read_csv('..\/input\/irony\/irony\/test_text.txt', error_bad_lines=False, names=['Text'])\ndata_train_6 = pd.read_csv('..\/input\/irony\/irony\/test_labels.txt', error_bad_lines=False, names=['Label']) \nData_test = data_train_5.copy()\nData_test['Label'] = data_train_6['Label']","61571416":"print(Data_train.info())\nprint(Data_train.head())","f35076ac":"print(Data_val.info())\nprint(Data_val.head())","73cc55d3":"print(Data_test.info())\nprint(Data_test.head())","75c911a3":"# 0 -> non-irony\n# 1 -> irony\n\nplt.figure(figsize=(17,5))\nplt.subplot(1,3,1)\nplt.title('Train Data')\nsns.countplot(Data_train.Label)\nplt.subplot(1,3,2)\nplt.title('Val Data')\nsns.countplot(Data_val.Label)\nplt.subplot(1,3,3)\nplt.title('Test Data')\nsns.countplot(Data_test.Label)","f2f57e38":"\ndef text_preprocessing(text):\n    text = re.sub(r'(@.*?)[\\s]', ' ', str(text))\n    text = re.sub(r'[0-9]+' , '' ,str(text))\n    text = re.sub(r'\\s([@][\\w_-]+)', '', str(text)).strip()\n    text = re.sub(r'&amp;', '&',str(text))\n    text = re.sub(r'\\s+', ' ', str(text)).strip()\n    text = text.replace(\"#\" , \" \")\n    encoded_string = text.encode(\"ascii\", \"ignore\")\n    decode_string = encoded_string.decode()\n    return decode_string\n\nData_train['Text'] = text_preprocessing(Data_train['Text'])\nData_val['Text'] = text_preprocessing(Data_val['Text'])\nData_test['Text'] = text_preprocessing(Data_test['Text'])","b696f8f7":"model_args = ClassificationArgs()\nmodel_args.num_train_epochs = 5\nmodel_args.learning_rate = 1e-4\nmodel_args.evaluate_during_training = True\nmodel_args.reprocess_input_data = True\nmodel_args.overwrite_output_dir = True\nmodel_args.train_batch_size = 64\nmodel_args.eval_batch_size = 64\n\nmodel = ClassificationModel(\"roberta\", \"roberta-base\", num_labels=3, use_cuda=True, args=model_args)","3852f983":"model.train_model(Data_train,output_dir= '.\/model.h5', eval_df = Data_val, acc=sklearn.metrics.accuracy_score)","236ed671":"result, model_outputs, wrong_predictions = model.eval_model(Data_test, acc=sklearn.metrics.accuracy_score)","7af93624":"print('Test Accuracy:',result)","f85c41f1":"# Test Accuracy Achieved: 39.66%","2b1147d4":"# Hate Speech Detection using Bert (RoBERTa-Base)"}}