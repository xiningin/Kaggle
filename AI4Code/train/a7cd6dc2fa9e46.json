{"cell_type":{"a5e7bc8a":"code","c059077a":"code","dcc91b7e":"code","bc40ffc7":"code","ab27cc87":"code","22ca2eb5":"code","c6bc61aa":"code","45f3b893":"code","5ad6c0cc":"code","ae090757":"code","67bc4b9a":"code","8253178b":"code","965c90a9":"code","b840d15d":"code","73dffda0":"code","0fadf78b":"code","f2e738a0":"code","ac9ba7e6":"code","202bc46d":"code","bf538633":"code","c71c89e3":"code","b08c37a2":"code","cb2a004f":"code","928188c5":"code","4f1843e2":"code","b9c2497f":"code","23b97f3e":"code","7cad3778":"code","fdd25805":"code","01092ee6":"code","e6ad47ce":"code","82eb14df":"code","37cb6c60":"code","48aec812":"code","defc6e6e":"code","cc339ccd":"code","568da2cf":"code","bd5c64d1":"code","d5f5d468":"code","263603cc":"code","25f3a2bd":"code","82524808":"code","d3e0431d":"code","662d0a05":"code","ccdfc2b0":"code","1cab3d2b":"code","01256d3f":"code","0e5b02a2":"code","d77255b4":"code","9c78f979":"code","fb52f07a":"code","ef31f307":"code","e30cfcb2":"code","78e4aaea":"code","efee8279":"code","b983bb1f":"code","4f935e82":"code","4b9a3db1":"code","2d2a0177":"code","b668f5e4":"code","c5a63a8a":"code","69867ee3":"code","df1bd59b":"code","7a8e6826":"code","748248b3":"code","433ab1af":"code","f83eaddc":"code","530aefdb":"code","97c643e8":"code","9e52028a":"code","6c2e6f99":"code","7d5a9e07":"code","e6f4a88a":"code","03610565":"markdown","6264d2c7":"markdown","076d8ce8":"markdown","b966f142":"markdown","5202f10d":"markdown","73b4d3d4":"markdown","042610d4":"markdown","d5406a34":"markdown","b007955d":"markdown","2b5d6e82":"markdown","45fdcac9":"markdown","eaf38a31":"markdown","0bf18c92":"markdown","a0cdacc1":"markdown","5e1d89ea":"markdown","615406f8":"markdown","1fadd2dc":"markdown"},"source":{"a5e7bc8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import GridSearchCV\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c059077a":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\ndata=pd.concat([train,test],axis=0)\ndata","dcc91b7e":"data.set_index('PassengerId',inplace=True)","bc40ffc7":"data","ab27cc87":"data.info()","22ca2eb5":"ax=data['Age'].hist(bins=20,density=True,stacked=True,alpha=0.6)\ndata['Age'].plot(kind='density')\nax.set(xlabel='Age')\nplt.show()","c6bc61aa":"train.groupby(pd.isnull(train['Age']))['Survived'].mean()","45f3b893":"data['Age_isnull']=pd.isnull(data['Age']).astype(int)","5ad6c0cc":"data['Age']=new_data.groupby(['Name_title','Pclass'])['Age'].transform(lambda x: x.fillna(x.mean()))","ae090757":"train.groupby(pd.isnull(data['Cabin']))['Survived'].mean()","67bc4b9a":"data.groupby(data['Cabin'].str[0])['Survived'].mean()","8253178b":"data['Cabin'].str[0].value_counts()","965c90a9":"data['Cabin'].str[1:].value_counts()","b840d15d":"data['Cabin_letter']=data['Cabin'].str[0]\ndata['Cabin_number']=data['Cabin'].str[1:]\ndata['Cabin_letter'].fillna(\"U\",inplace=True)","73dffda0":"data.drop(['Cabin','Cabin_number'],axis=1,inplace=True)","0fadf78b":"for i in range(data.shape[0]):\n    if (data.loc[i+1,'Cabin_letter']=='G') |(data.loc[i+1,'Cabin_letter']=='T'):\n        data.loc[i+1,'Cabin_letter']='O'","f2e738a0":"data['Cabin_letter'].value_counts()","ac9ba7e6":"data['Embarked'].value_counts()","202bc46d":"data.groupby(data['Embarked'])['Survived'].mean()","bf538633":"sns.countplot(data['Embarked'],hue=data['Survived'])","c71c89e3":"data['Embarked'].fillna('S',inplace=True)","b08c37a2":"data.isnull().any()","cb2a004f":"data['Fare'].fillna(train['Fare'].median(),inplace=True)","928188c5":"data['Name'].str.split(',').str[1].str.split('.').str[0].value_counts()","4f1843e2":"data['Name_title']=data['Name'].str.split(',').str[1].str.split('.').str[0]","b9c2497f":"for i in range(data.shape[0]):\n    if data.loc[i+1,'Name_title'] not in [' Mr',' Miss',' Mrs',' Master']:\n        data.loc[i+1,'Name_title']='Other'","23b97f3e":"data['Name_title'].value_counts()","7cad3778":"data['Name_length']=data['Name'].str.len()","fdd25805":"data.drop('Name',axis=1,inplace=True)","01092ee6":"data['Ticket_type']=data['Ticket'].str[0]\ndata['Ticket_length']=data['Ticket'].str.len()","e6ad47ce":"data['Ticket_type'].value_counts()","82eb14df":"for i in range(data.shape[0]):\n    if data.loc[i+1,'Ticket_type'] not in ['3','2','1','P','S','C','A']:\n        data.loc[i+1,'Ticket_type']='O'","37cb6c60":"data.drop(['Ticket'],axis=1,inplace=True)","48aec812":"data['Family_size']=data['SibSp']+data['Parch']\ndata.drop(['SibSp','Parch'],axis=1,inplace=True)","defc6e6e":"for i in range(data.shape[0]):\n    if data.loc[i+1,'Family_size']==0:\n        data.loc[i+1,'Family_size']='Single'\n    elif data.loc[i+1,'Family_size']<=3:\n        data.loc[i+1,'Family_size']='Small'\n    else:\n        data.loc[i+1,'Family_size']='Big'\ndata","cc339ccd":"new_data=data.copy()\nnew_data","568da2cf":"data=pd.get_dummies(data,columns=['Pclass','Sex','Embarked','Cabin_letter','Name_title','Ticket_type','Family_size'])","bd5c64d1":"data=new_data","d5f5d468":"data.columns","263603cc":"train=data.loc[1:891]\ntest=data.loc[892:]","25f3a2bd":"train['Sex']=train['Sex'].map({'female': 0, 'male': 1}).astype(int)\ntest['Sex']=test['Sex'].map({'female': 0, 'male': 1}).astype(int)","82524808":"train['Sex']","d3e0431d":"title_mapping = {\" Mr\": 1, \" Miss\": 2, \" Mrs\": 3, \" Master\": 4, \"Other\": 5}\ntrain['Name_title'] = train['Name_title'].map(title_mapping)\ntest['Name_title'] = test['Name_title'].map(title_mapping)","662d0a05":"test['Name_title'].isnull().any()\ntest['Name_title'].value_counts()","ccdfc2b0":"train['Embarked']=train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ntest['Embarked']=test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","1cab3d2b":"train['Embarked']","01256d3f":"test['Embarked'].value_counts()","0e5b02a2":"cabin_mapping = {\"U\": 1, \"C\": 2, \"B\": 3, \"D\": 4, \"E\": 5,\"A\":6,\"F\":7,\"O\":8}\ntrain['Cabin_letter']=train['Cabin_letter'].map( cabin_mapping ).astype(int)\ntest['Cabin_letter']=test['Cabin_letter'].map( cabin_mapping ).astype(int)","d77255b4":"train['Ticket_type'].value_counts()\nticket_mapping={\"3\":1,\"2\":2,\"1\":3,\"P\":4,\"S\":5,\"O\":6,\"C\":7,\"A\":8}\ntrain['Ticket_type']=train['Ticket_type'].map(ticket_mapping).astype(int)\ntest['Ticket_type']=test['Ticket_type'].map(ticket_mapping).astype(int)","9c78f979":"fam_mapping={\"Single\":1,\"Small\":2,\"Big\":3}\ntrain['Family_size']=train['Family_size'].map(fam_mapping).astype(int)\ntest['Family_size']=test['Family_size'].map(fam_mapping).astype(int)","fb52f07a":"train['Survived']=train['Survived'].astype(int)","ef31f307":"colormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(train.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","e30cfcb2":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(criterion='gini', \n                             n_estimators=700,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)","78e4aaea":"rf.fit(train.iloc[:, 1:], train.iloc[:, 0])","efee8279":"print(\"%.4f\" % rf.oob_score_)","b983bb1f":"param_test1={\"n_estimators\":range(500,1100,100)}\ngs1=GridSearchCV(estimator=rf,param_grid=param_test1,scoring='roc_auc',cv=5)","4f935e82":"gs1.fit(train.iloc[:, 1:], train.iloc[:, 0])","4b9a3db1":"print(gs1.best_params_,gs1.best_score_)","2d2a0177":"rf=RandomForestClassifier(criterion='gini', \n                             n_estimators=900,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)","b668f5e4":"param_test2={\"max_features\":range(13,20,2)}\ngs2=GridSearchCV(estimator=rf,param_grid=param_test2,scoring='roc_auc',cv=5)","c5a63a8a":"gs2.fit(train.iloc[:, 1:], train.iloc[:, 0])","69867ee3":"print(gs2.best_params_,gs2.best_score_)","df1bd59b":"rf=RandomForestClassifier(criterion='gini', \n                             n_estimators=900,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features=15,\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)","7a8e6826":"param_test3 = {'max_depth':range(7,10), 'min_samples_split':range(3,7)}\ngs3 = GridSearchCV(estimator = rf, param_grid = param_test3, scoring='roc_auc',cv=10)","748248b3":"gs3.fit(train.iloc[:, 1:], train.iloc[:, 0])","433ab1af":"print(gs3.best_params_,gs3.best_score_)","f83eaddc":"rf=RandomForestClassifier(criterion='gini', \n                             n_estimators=900,\n                             min_samples_split=4,\n                             min_samples_leaf=1,\n                             max_features=15,\n                             max_depth=8,\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)","530aefdb":"rf.fit(train.iloc[:, 1:], train.iloc[:, 0])","97c643e8":"print(rf.oob_score_)","9e52028a":"pd.concat((pd.DataFrame(train.iloc[:, 1:].columns, columns = ['variable']), \n           pd.DataFrame(rf.feature_importances_, columns = ['importance'])), \n          axis = 1).sort_values(by='importance', ascending = False)[:20]","6c2e6f99":"test['Age'].fillna(train['Age'].median(),inplace=True)","7d5a9e07":"prediction=rf.predict(test.iloc[:,1:])\nprediction=prediction.astype(int)\nprediction","e6f4a88a":"submission=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nsubmission['Survived']=prediction\nsubmission.set_index(\"PassengerId\",inplace=True)\nsubmission.to_csv(\".\/submission.csv\")\nsubmission","03610565":"### max_features","6264d2c7":"### Name","076d8ce8":"## Text Processing","b966f142":"## Missing Value Processing","5202f10d":"### Age","73b4d3d4":"tickettype\u4e0d\u80fd\u5168\u9009\n","042610d4":"### Cabin","d5406a34":"## Mapping","b007955d":"### max_depth\u548cmin_sample_split","2b5d6e82":"### n_estimators","45fdcac9":"### Embarked","eaf38a31":"### SibSp & Parch","0bf18c92":"### Overview","a0cdacc1":"# Preprocessing","5e1d89ea":"### Ticket","615406f8":"### Fare","1fadd2dc":"## \u8c03\u53c2"}}