{"cell_type":{"935b9ffa":"code","932ad496":"code","0954f102":"code","072b1fcb":"code","83b06cb7":"code","ada7eea0":"code","9eb086d4":"code","c36cb096":"code","a25ff4c8":"code","194a0f8f":"code","30b5916f":"code","4ac65886":"code","479d0c4a":"code","90712fe6":"code","3b6d8102":"code","26bb6faa":"code","1134e470":"code","166453e5":"code","27f84748":"code","3632b10f":"code","53fdf68c":"code","8d2b647b":"code","217df47e":"code","6c1d0304":"code","0aacf08c":"code","d2f72405":"code","98841c02":"markdown","c3074893":"markdown","f88c3dd5":"markdown","9b04c7a9":"markdown","a7972563":"markdown","cba3df33":"markdown","72b2b8b5":"markdown","deec94f3":"markdown","b1cab3de":"markdown","e4d3266d":"markdown","9ed19fa1":"markdown"},"source":{"935b9ffa":"! pip install -q pycaret shap","932ad496":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pycaret.classification import *","0954f102":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf = pd.concat([df_train, df_test]).reset_index(drop=True)","072b1fcb":"df.head()","83b06cb7":"df.info()","ada7eea0":"df.isnull().sum()","9eb086d4":"sns.heatmap(abs(df.corr()), annot=True)","c36cb096":"# Median Age for each sex in each Pclass\nage_by_pclass_sex = df.groupby(['Sex', 'Pclass']).median()['Age']\nage_by_pclass_sex","a25ff4c8":"# Count for each embarked\ndf['Embarked'].value_counts().plot(kind='bar')","194a0f8f":"cat_features = ['Embarked', 'Parch', 'Pclass', 'Sex', 'SibSp']\n\nfig, axs = plt.subplots(ncols=2, nrows=3, figsize=(20, 20))\nplt.subplots_adjust(right=1.5, top=1.25)\n\nfor i, feature in enumerate(cat_features, 1):    \n    plt.subplot(2, 3, i)\n    sns.countplot(x=feature, hue='Survived', data=df)\n    \n    plt.xlabel('{}'.format(feature), size=20, labelpad=15)\n    plt.ylabel('Passenger Count', size=20, labelpad=15)    \n    plt.tick_params(axis='x', labelsize=20)\n    plt.tick_params(axis='y', labelsize=20)\n    \n    plt.legend(['Not Survived', 'Survived'], loc='upper center', prop={'size': 18})\n    plt.title('Count of Survival in {} Feature'.format(feature), size=20, y=1.05)\n\nplt.show()","30b5916f":"def fillnan(dataset):\n    # Fill NaN Cabin with Z\n    dataset['Cabin'] = dataset['Cabin'].fillna('Z')\n    \n    # Fill NaN Age with Median for each Pclass\n    dataset['Age'] = dataset.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))\n    \n    # Fill NaN Embarked with mode()\n    dataset['Embarked'] = dataset['Embarked'].fillna(dataset['Embarked'].mode()[0])\n    \n    dataset['Fare'] = dataset['Fare'].fillna(dataset['Fare'].mode()[0])\n    \n    return dataset\n\ndf = fillnan(df)\n\ndf.isnull().sum()","4ac65886":"def new_feature(dataset):\n    # Add Family_Size Feature, it will sum parch, sibsp and her\/himself\n    dataset['Family_Size'] = dataset['Parch'] + dataset['SibSp'] + 1\n    \n    # Add Family_Group Feature, if Family_Size == 1 is Alone , >=2 is Small, >=5 is Medium and >=7 is Large\n    family_map = {1: 'Alone', 2: 'Small', 3: 'Small', 4: 'Small', 5: 'Medium', 6: 'Medium', 7: 'Large', 8: 'Large', 11: 'Large'}\n    dataset['Family_Group'] = dataset['Family_Size'].map(family_map)\n    \n    # Add Age_Dist Feature\n    ranges = [0,10,20,30,40,50,60,70,80]\n    categories = ['0-10','10-20','20-30','30-40','40-50','50-60','60-70','80-90']\n    dataset['Age_Dist'] = pd.cut(dataset['Age'], bins=ranges, labels=categories)\n    \n    # Add Cabin_Symbol Feature\n    dataset['Cabin_Symbol'] = dataset['Cabin'].apply(lambda x: str(x)[0])\n    \n    # Add Ticket_Code Feature, it will give code before digit, if the first code is digit so we fill with Z\n    dataset['Ticket_Code'] = dataset['Ticket'].apply(lambda x:  'Z' if x[0].isdigit() else x.split(' ')[0])\n    \n    # Add Title Feature, it will take the title from the person's name\n    # If we look at Name Columm, there is a pattern , [LastName][Title][FirstName]\n    dataset['Title'] = dataset['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\n    \n    # Map Fare to 13 Bin\/Group\n    df['Fare'] = pd.qcut(df['Fare'], 13)\n    \n    return dataset","479d0c4a":"df = new_feature(df)\ndf.head()","90712fe6":"feature = ['Survived','Pclass','Sex','Age','Age_Dist','SibSp','Parch','Family_Size','Family_Group',\n           'Cabin_Symbol','Embarked','Title']\ndf = df[feature]","3b6d8102":"df_train = df.loc[:890]\ndf_test = df.loc[891:]\n# dfs = [df_train, df_test]","26bb6faa":"reg1 = setup(data = df_train, target = 'Survived', train_size = 0.8, data_split_stratify=True)","1134e470":"best_model = compare_models(fold=20, n_select=3)","166453e5":"blender = blend_models(best_model)","27f84748":"stacker = stack_models(best_model)","3632b10f":"predict_model(blender)","53fdf68c":"predict_model(stacker)","8d2b647b":"save_model(stacker, model_name='model_pycaret')","217df47e":"model = load_model('.\/model_pycaret')","6c1d0304":"result = model.predict(df_test)","0aacf08c":"my_submission1 = pd.DataFrame({'PassengerId': [i for i in range(892,1310)], 'Survived': result})\nmy_submission1['Survived'] = my_submission1['Survived'].astype('int')\nmy_submission1.head()","d2f72405":"my_submission1.to_csv('submission.csv', index=False)","98841c02":"<h2 style='background:#CAB4AC; border:0; color:black'><center> Train Using PyCaret <\/center><\/h2> ","c3074893":"<h2 style='background:#CAB4AC; border:0; color:black'><center> Fillna <\/center><\/h2> ","f88c3dd5":"<h1 style='background:#CCE2CB; border:0; color:black'><center> Install & Import Dependencies <\/center><\/h1> ","9b04c7a9":"<h1 style='background:#CCE2CB; border:0; color:black'><center> Processing <\/center><\/h1> ","a7972563":"<h2 style='background:#CAB4AC; border:0; color:black'><center> Split Data <\/center><\/h2> ","cba3df33":"<h2 style='background:#CAB4AC; border:0; color:black'><center> Add New Feature <\/center><\/h2> ","72b2b8b5":"# PyCaret\nPyCaret is an open-source, low-code machine learning library in Python that aims to reduce the cycle time from hypothesis to insights. It is well suited for seasoned data scientists who want to increase the productivity of their ML experiments by using PyCaret in their workflows or for citizen data scientists and those new to data science with little or no background in coding. PyCaret allows you to go from preparing your data to deploying your model within seconds using your choice of notebook environment.\n\nYou can read the documentation [here](https:\/\/pycaret.org)","deec94f3":"<h1 style='background:#CCE2CB; border:0; color:black'><center> Load Data <\/center><\/h1> ","b1cab3de":"Conclusion from the graph\n\n1. Only C has more survivors than those who dont, But Survivor from S more than other, although the dead are also the most\n2. The fewer parch, the higher the chances to survive\n3. the higher the Pclass, affect the number of people who die\n4. More Female are survive\n5. The fewer SibSp, the higher the chances to survive","e4d3266d":"<h2 style='background:#CAB4AC; border:0; color:black'><center> Save Model <\/center><\/h2> ","9ed19fa1":"<h1 style='background:#CCE2CB; border:0; color:black'><center> EDA <\/center><\/h1> "}}