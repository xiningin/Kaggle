{"cell_type":{"ca15ca21":"code","94e3f68e":"code","a59df8da":"code","be18aeb4":"code","9d0eb0f0":"code","f4079e7d":"code","725ee047":"code","3b586558":"code","3d8a0591":"code","2feee3f6":"code","666f05c9":"code","87eef593":"code","e52617c6":"code","21892053":"code","003b8f15":"code","b4b2c01b":"code","11c3b965":"code","e3ebe352":"code","d5398642":"code","e741638f":"code","de458c2a":"code","1d94abfc":"code","d44b113b":"code","f505bebe":"code","5c8e4b88":"code","501ce2d2":"code","35e0884f":"code","50a40ec0":"code","ab8fb0f0":"code","e4b17c0c":"code","4930a312":"code","ffe08929":"code","c0bdfd92":"code","ebfd0432":"code","e25e9f86":"code","266e3f0d":"code","1f12e295":"code","0ce92131":"code","89d626e4":"code","da1b7de9":"code","1e727513":"code","b3da2092":"code","65cf4821":"code","56ef938a":"code","344a8227":"markdown","7bf9f392":"markdown","b54ef944":"markdown","8c7f5171":"markdown","08cbf389":"markdown","c755d033":"markdown","cf355679":"markdown","29319369":"markdown","c84481c5":"markdown","14b689a2":"markdown","fff5d961":"markdown","7c12d86d":"markdown"},"source":{"ca15ca21":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","94e3f68e":"!ls '\/kaggle\/input\/home-data-for-ml-course'","a59df8da":"df = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ndf.head(5)","be18aeb4":"pd.set_option('display.max_columns', None)\ndf = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ndf.head()","9d0eb0f0":"df.info()","f4079e7d":"df.isna().sum()\/len(df)","725ee047":"# number of null in each columns\ndf.columns[((df.isna().sum()\/len(df)) > 0.50)]","3b586558":"df = df.drop(columns=df.columns[((df.isna().sum()\/len(df)) > 0.50)])\ndf.columns","3d8a0591":"df.head(5)","2feee3f6":"df = df.drop(columns=['Id'])\ndf.shape","666f05c9":"df._get_numeric_data().mean()","87eef593":"df.fillna(df._get_numeric_data().mean(),inplace = True)","e52617c6":"df.isna().sum()","21892053":"df.info()","003b8f15":"for cols in df.columns:\n    if df[cols].dtype == 'int64' or df[cols].dtype == 'float64':\n        df[cols] = ((df[cols] - df[cols].mean())\/(df[cols].std()))","b4b2c01b":"df.head()","11c3b965":"df.shape","e3ebe352":"for cols in df.columns:\n    if df[cols].dtype == 'int64' or df[cols].dtype == 'float64':\n        upper_range = df[cols].mean() + 3 * df[cols].std()\n        lower_range = df[cols].mean() - 3 * df[cols].std()\n        \n        indexs = df[(df[cols] > upper_range) | (df[cols] < lower_range)].index\n        df = df.drop(indexs)","d5398642":"df.shape","e741638f":"for cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        print('column : ',cols)\n        print(df[cols].value_counts().head(1))","de458c2a":"for cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        print('column : ',cols)\n        print(df[cols].value_counts().head(1).index[0])","1d94abfc":"for cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        print('cols : {} , value : {}'.format(cols , df[cols].value_counts().head(1).index[0]))\n        df[cols].fillna(df[cols].value_counts().head(1).index[0],inplace = True)","d44b113b":"df.isna().sum()","f505bebe":"df.head()","5c8e4b88":"for cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        print('cols : {} , unique values : {}'.format(cols,df[cols].nunique()))","501ce2d2":"for cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        print('cols : {} ,\\n {}'.format(cols,df[cols].value_counts()))","35e0884f":"df = df.drop(columns=['Street','LandSlope','Neighborhood','Condition2','Utilities'])\ndf.shape","50a40ec0":"others = list(df['MSZoning'].value_counts().tail(3).index)\ndef edit_MSZoning(x):\n    if x in others:\n        return 'other'\n    else:\n        return x\n\ndf['MSZoning_edit'] = df['MSZoning'].apply(edit_MSZoning)\ndf = df.drop(columns = ['MSZoning'])\ndf['MSZoning_edit'].value_counts()*100 \/ len(df)","ab8fb0f0":"others = list(df['LotShape'].value_counts().tail(3).index)\ndef edit_LotShape(x):\n    if x in others:\n        return 'other'\n    else:\n        return x\n\ndf['LotShape_edit'] = df['LotShape'].apply(edit_LotShape)\ndf = df.drop(columns = ['LotShape'])\ndf['LotShape_edit'].value_counts()*100 \/ len(df)","e4b17c0c":"others = list(df['LandContour'].value_counts().tail(3).index)\ndef edit_LandContour(x):\n    if x in others:\n        return 'other'\n    else:\n        return x\n\ndf['LandContour_edit'] = df['LandContour'].apply(edit_LandContour)\ndf = df.drop(columns = ['LandContour'])\ndf['LandContour_edit'].value_counts()*100 \/ len(df)","4930a312":"others = list(df['LotConfig'].value_counts().tail(3).index)\ndef edit_LotConfig(x):\n    if x in others:\n        return 'other'\n    else:\n        return x\n\ndf['LotConfig_edit'] = df['LotConfig'].apply(edit_LotConfig)\ndf = df.drop(columns = ['LotConfig'])\ndf['LotConfig_edit'].value_counts()*100 \/ len(df)","ffe08929":"others = list(df['Condition1'].value_counts().tail(6).index)\ndef edit_Condition1(x):\n    if x in others:\n        return 'other'\n    else:\n        return x\n\ndf['Condition1_edit'] = df['Condition1'].apply(edit_Condition1)\ndf = df.drop(columns = ['Condition1'])\ndf['Condition1_edit'].value_counts()*100 \/ len(df)","c0bdfd92":"others = list(df['BldgType'].value_counts().tail(4).index)\ndef edit_BldgType(x):\n    if x in others:\n        return 'other'\n    else:\n        return x\n\ndf['BldgType_edit'] = df['BldgType'].apply(edit_BldgType)\ndf = df.drop(columns = ['BldgType'])\ndf['BldgType_edit'].value_counts()*100 \/ len(df)","ebfd0432":"others = list(df['HouseStyle'].value_counts().tail(5).index)\ndef edit_HouseStyle(x):\n    if x in others:\n        return 'other'\n    else:\n        return x\n\ndf['HouseStyle_edit'] = df['HouseStyle'].apply(edit_HouseStyle)\ndf = df.drop(columns = ['HouseStyle'])\ndf['HouseStyle_edit'].value_counts()*100 \/ len(df)","e25e9f86":"corr = df.corr()","266e3f0d":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(25, 30))\n\nsns.heatmap(corr, square = True ,annot = True)","1f12e295":"columns = []\nfor cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        columns.append(cols)\n        \ncolumns","0ce92131":"dummies_feature = pd.get_dummies(df[columns])\ndummies_feature.head()","89d626e4":"df = pd.concat([df, dummies_feature], axis=1)\ndf.head()","da1b7de9":"df = df.drop(columns=columns)\ndf.head()","1e727513":"df.shape","b3da2092":"y = df['SalePrice']\nx = df.drop(columns = ['SalePrice'])\n\nprint(x.shape)\nprint(y.shape)","65cf4821":"from sklearn.decomposition import PCA\npca = PCA(0.90)\nx_pca = pca.fit_transform(x)\nx_pca.shape","56ef938a":"x_pca[:1]","344a8227":"## normalizing numeric data","7bf9f392":"## delete columns without useful information","b54ef944":"## convert categorical data to dummies variables","8c7f5171":"## delete columns with more than 50% null data","08cbf389":"## fillna categorical data","c755d033":"## categorical features","cf355679":"## reduce number of categories","29319369":"## split features and target","c84481c5":"## PCA","14b689a2":"## delete outlier","fff5d961":"## correlation Matrix","7c12d86d":"## fillna numeric data by mean"}}