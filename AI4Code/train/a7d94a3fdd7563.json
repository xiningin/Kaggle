{"cell_type":{"4fed91ff":"code","d3672ee7":"code","87ed64d2":"code","817b897f":"code","b83fa86f":"code","b31e2b13":"code","f9675468":"code","53cbedf2":"code","4e61ff0f":"code","c3949759":"code","f7d647c0":"code","acaff258":"code","efffea2b":"code","9298806e":"code","c0ff74cb":"code","a0c9ada3":"code","6ebbd602":"code","75c35169":"code","ec76871a":"code","68767053":"code","8ead8c4e":"code","ca485eee":"code","95072583":"code","3741697d":"code","3742d995":"code","8bb13f32":"code","fa8c409d":"code","e852fa8d":"code","8ef93f5e":"code","c0c8b128":"code","68e2314f":"code","c5e1fa29":"code","0c6c8419":"code","3d73ab69":"code","23d7511d":"code","ad10537f":"code","9200590e":"code","fbd7e7e4":"code","137e68ec":"markdown","8317a3ab":"markdown","4d85c539":"markdown","8b0b6d4c":"markdown","775955d5":"markdown","f43e0b70":"markdown","9c26e52e":"markdown","dc8112df":"markdown"},"source":{"4fed91ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3672ee7":"import matplotlib.pyplot as plt","87ed64d2":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","817b897f":"data","b83fa86f":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","b31e2b13":"football","f9675468":"edu = pd.read_csv('\/kaggle\/input\/ict-designing-experiments-2020\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\n","53cbedf2":"edu","4e61ff0f":"edu.head()","c3949759":"edu.tail(20)","f7d647c0":"edu.describe()","acaff258":"edu['Value']","efffea2b":"edu[10:14]","9298806e":"edu.iloc[90:94][['TIME','GEO']]","c0ff74cb":"edu[edu['Value'] > 6.5].tail()","a0c9ada3":"edu[edu[\"Value\"].isnull()].head()","6ebbd602":"edu.max(axis = 0)","75c35169":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","ec76871a":"s = edu[\"Value\"]\/100\ns.head()","68767053":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","8ead8c4e":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","ca485eee":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","95072583":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","3741697d":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","3742d995":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","8bb13f32":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","fa8c409d":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","e852fa8d":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","8ef93f5e":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu[0:140]","c0c8b128":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","68e2314f":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","c5e1fa29":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","0c6c8419":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","3d73ab69":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","23d7511d":"\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=True, method='first').head()","ad10537f":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","9200590e":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","fbd7e7e4":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","137e68ec":"*6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?*\nIt gives us the list with with rows which have the value more than 6.5. ","8317a3ab":"*5. What does this index return? What does the first index represent? And the second one?\nIt will show us the results using the labels not the position, because of the command .iloc[]","4d85c539":"*What do you observe regarding the parameter ascending=False?*\nThere is a difference between ascending=False and ascending=[False]. Ascending=False gives a boolean value which ranks in decsending order.\nThe sum of each same sell for both comands (ascending=false and ascending=true) is 23.","8b0b6d4c":"*1. Which is the size of the edu DataFrame (rows x columns)?*****\n384 rows \u00d7 3 columns","775955d5":"':' - means that the collection elements are separated with this sign.","f43e0b70":"* 4. Which measures does the result show?* It counts the whole members, the first and last(newest) year, average grade, etc.\nGEO is a string that's why we don't have statistics of that column","9c26e52e":"*What happens if we give a number as argument to the method head()?* It will show us the list with the rows equal to the given number as the argument.","dc8112df":"*3. What happens if we give a number as argument to the method head()?*\nIt will show us the list with the rows equal to the given number as the argument."}}