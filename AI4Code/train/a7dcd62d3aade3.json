{"cell_type":{"af02c609":"code","9ff2d37f":"code","8c62f04e":"code","2786def9":"code","deca0bd5":"code","91cea7e0":"code","249a51ee":"code","09fb702f":"code","33e951ec":"code","ab60fa60":"code","658fa166":"code","9cadf7e5":"code","c64a0df2":"code","c66c10a2":"code","3c58cc83":"code","ebfc73da":"code","95a89101":"code","481af97c":"code","54ac745c":"code","c7bed320":"code","5c315b99":"code","30814ba2":"code","928969a4":"code","adeb4e4f":"code","67d83bfa":"code","95367398":"code","62e84b4c":"code","e972253c":"code","8f5d1a9e":"code","0cf86ca6":"code","42abbbd7":"code","62bcffd9":"code","ba1a1284":"code","54e7ec64":"code","6f8cb5b4":"code","dc2833da":"code","0b970b0c":"code","e78bb737":"code","180f3550":"code","5beb1401":"code","8c80c2a5":"code","9f7e8657":"code","b17a52b4":"code","8c643f7b":"code","eabf9e1d":"code","8af5d57c":"code","44f5898e":"markdown","585c8733":"markdown","bfecf599":"markdown","77371897":"markdown","37e8fd39":"markdown","5774603e":"markdown","68d518d5":"markdown","8ed4f450":"markdown","59a33c1c":"markdown","a0fa7a64":"markdown","77b13e6d":"markdown","1c3533d8":"markdown","97f20b8d":"markdown","97a134d7":"markdown","a1daab46":"markdown","4d416d38":"markdown","2f11993e":"markdown"},"source":{"af02c609":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ff2d37f":"df=pd.read_csv('\/kaggle\/input\/bundesliga-top-7-teams-offensive-stats\/bundesliga_top7_offensive.csv')","8c62f04e":"df.head()","2786def9":"df=df.replace({'CHI':'CHL','CRO':'HRV','DEN':'DNK','ENG':'GBR','GER':'DEU','GUI':'GIN','NED':'NLD','POR':'PRT','SUI':'CHE'})","deca0bd5":"import matplotlib.pyplot as plt\nimport seaborn as sns","91cea7e0":"df1=pd.DataFrame(df.groupby('Nationality')['Name'].count())\ndf1=df1.reset_index()","249a51ee":"import matplotlib.pyplot as plt\nimport plotly_express as px\nfig = px.choropleth(df1,locations='Nationality',color='Name',scope='world')\nfig.show()","09fb702f":"plt.figure(figsize=(8, 5))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df['Nationality'],y=df['Goals'],hue=df['Position'],size=df['Mins'],data=df,sizes=(1,150))\nplt.xticks(rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","33e951ec":"plt.figure(figsize=(8, 5))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df['Age'],y=df['Goals'],hue=df['Position'],size=df['Mins'],data=df,sizes=(1,150))\nplt.xticks(rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","ab60fa60":"plt.figure(figsize=(8, 5))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df['Nationality'],y=df['Assists'],hue=df['Position'],size=df['Mins'],data=df,sizes=(1,150))\nplt.xticks(rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","658fa166":"plt.figure(figsize=(8, 5))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df['Age'],y=df['Assists'],hue=df['Position'],size=df['Mins'],data=df,sizes=(1,150))\nplt.xticks(rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","9cadf7e5":"plt.figure(figsize=(8, 5))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df['Club'],y=df['Goals'],hue=df['Position'],size=df['Goals'],data=df,sizes=(1,150))\nplt.xticks(rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","c64a0df2":"plt.figure(figsize=(8, 5))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df['Club'],y=df['Assists'],hue=df['Position'],size=df['Assists'],data=df,sizes=(1,150))\nplt.xticks(rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","c66c10a2":"df['Mins\/Goals']=df['Mins']\/df['Goals']\ndf['Mins\/Goals']=pd.DataFrame(df['Mins\/Goals'].replace([np.inf, -np.inf], np.nan))\ndf_eff=df.dropna(how='any')\ndf_eff1 = df_eff.sort_values('Goals', ascending=False).head(30)","3c58cc83":"columns=df_eff1['Name']\ny1 = df_eff1['Mins\/Goals']\ny2 = df_eff1['Goals']\n\nplt.rcParams[\"figure.figsize\"] = (20, 8)\n\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\n\nax1.plot(columns, y1, linewidth=2, color=\"red\", linestyle=\"solid\", marker=\"o\", markersize=8, label='Mins\/Goals')\nax2.bar(columns, y2, label='Goals')\n\nax2.set_ylim([0,50])\n\nax1.set_zorder(2)\nax2.set_zorder(1)\n\nax1.patch.set_alpha(0)\nax1.legend(bbox_to_anchor=(0, 1), loc='upper left', borderaxespad=0.5, fontsize=10)\nax2.legend(bbox_to_anchor=(0, 0.9), loc='upper left', borderaxespad=0.5, fontsize=10)\n\nax1.grid(True)\n\nplt.xlabel('Name')\nax1.set_ylabel('Mins\/Goals')\nax2.set_ylabel('Goals')\nax1.set_xticklabels(df_eff1[\"Name\"], rotation=90)\n\nplt.show()","ebfc73da":"df1=df.drop(['Name','xG','xA','Penalty_Goals','Penalty_Attempted'],axis=1)","95a89101":"df2=pd.get_dummies(df1)","481af97c":"pd.set_option('display.max_columns', 100)","54ac745c":"pd.set_option('display.max_rows', 100)","c7bed320":"df2.corr().head()","5c315b99":"df2=df2.rename(columns={'Position_DF,FW': 'Position_DFFW', 'Position_DF,MF': 'Position_DFMF','Position_FW,DF':'Position_FWDF','Position_FW,MF':'Position_FWMF','Position_MF,DF':'Position_MFDF','Position_MF,FW':'Position_MFFW'})","30814ba2":"plt.figure(figsize=(15, 12))\nsns.heatmap(df2.corr())","928969a4":"from sklearn.linear_model import Ridge,Lasso,LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import KFold","adeb4e4f":"x=df2.drop(['Goals','Mins\/Goals'],axis=1)\ny=df2['Goals']","67d83bfa":"x_train,x_test,y_train,y_test=train_test_split(x, y,train_size=0.8,random_state=123)","95367398":"model1=LinearRegression()\nmodel2=Lasso(alpha=1.0)\nmodel3=Ridge(alpha=0.1)","62e84b4c":"scores=[]\nkf=KFold(n_splits=4,shuffle=True,random_state=71)\nfor tr_idx,va_idx in kf.split(x_train):\n    tr_x,va_x=x_train.iloc[tr_idx],x_train.iloc[va_idx]\n    tr_y,va_y=y_train.iloc[tr_idx],y_train.iloc[va_idx]\n    \n    model1.fit(tr_x,tr_y)\n    va_pred1=model1.predict(va_x)\n    score_rmse1=np.sqrt(mean_squared_error(va_y,va_pred1)).mean()\n    score_mae1=mean_absolute_error(va_y,va_pred1).mean()\n    score_r21=r2_score(va_y,va_pred1).mean()","e972253c":"print('rmse1:',score_rmse1)\nprint('mae1:',score_mae1)\nprint('R21:',score_r21)","8f5d1a9e":"scores=[]\nkf=KFold(n_splits=4,shuffle=True,random_state=71)\nfor tr_idx,va_idx in kf.split(x_train):\n    tr_x,va_x=x_train.iloc[tr_idx],x_train.iloc[va_idx]\n    tr_y,va_y=y_train.iloc[tr_idx],y_train.iloc[va_idx]\n    \n    model2.fit(tr_x,tr_y)\n    va_pred2=model2.predict(va_x)\n    score_rmse2=np.sqrt(mean_squared_error(va_y,va_pred2)).mean()\n    score_mae2=mean_absolute_error(va_y,va_pred2).mean()\n    score_r22=r2_score(va_y,va_pred2).mean()","0cf86ca6":"print('rmse2:',score_rmse2)\nprint('mae2:',score_mae2)\nprint('R22:',score_r22)","42abbbd7":"scores=[]\nkf=KFold(n_splits=4,shuffle=True,random_state=71)\nfor tr_idx,va_idx in kf.split(x_train):\n    tr_x,va_x=x_train.iloc[tr_idx],x_train.iloc[va_idx]\n    tr_y,va_y=y_train.iloc[tr_idx],y_train.iloc[va_idx]\n    \n    model3.fit(tr_x,tr_y)\n    va_pred3=model3.predict(va_x)\n    score_rmse3=np.sqrt(mean_squared_error(va_y,va_pred3)).mean()\n    score_mae3=mean_absolute_error(va_y,va_pred3).mean()\n    score_r23=r2_score(va_y,va_pred3).mean()","62bcffd9":"print('rmse3:',score_rmse3)\nprint('mae3:',score_mae3)\nprint('R23:',score_r23)","ba1a1284":"import lightgbm as lgb","54e7ec64":"lgb_train = lgb.Dataset(x_train, y_train)\nlgb_eval = lgb.Dataset(x_test, y_test)","6f8cb5b4":"params={'metric': 'rmse'}","dc2833da":"gbm = lgb.train(params,\n                lgb_train,\n                valid_sets=lgb_eval,\n                num_boost_round=5000,\n                early_stopping_rounds=100,\n                verbose_eval=100)","0b970b0c":"predicted = gbm.predict(x_test)","e78bb737":"def pred_map(pred_df):\n    rmse = np.sqrt(mean_squared_error(pred_df['data'], pred_df['pred']))\n    R2 = r2_score(pred_df['data'], pred_df['pred']) \n    plt.figure(figsize=(5,5))\n    ax = plt.subplot(111)\n    ax.scatter('data', 'pred', data=pred_df)\n    ax.set_xlabel('Data Value', fontsize=15)\n    ax.set_ylabel('Pred Value', fontsize=15)\n    ax.set_xlim(pred_df.min().min()-0.1 , pred_df.max().max()+0.1)\n    ax.set_ylim(pred_df.min().min()-0.1 , pred_df.max().max()+0.1)\n    x = np.linspace(pred_df.min().min()-0.1, pred_df.max().max()+0.1, 2)\n    y = x\n    ax.plot(x,y,'r-')\n    plt.text(0.1, 0.9, 'rmse = {}'.format(str(round(rmse, 5))), transform=ax.transAxes, fontsize=10)\n    plt.text(0.1, 0.8, 'R2 = {}'.format(str(round(R2, 5))), transform=ax.transAxes, fontsize=10)","180f3550":"df_prediction = pd.concat([y_test.reset_index(drop=True), pd.Series(predicted)], axis=1)\ndf_prediction.columns = ['data', 'pred']","5beb1401":"pred_map(df_prediction)","8c80c2a5":"df['goal_per']=df['Goals']\/df['Matches']-df['xG']","9f7e8657":"df.head()","b17a52b4":"df_top = df.sort_values('goal_per', ascending=False)\ndf_top1=df_top.loc[:,['Name','goal_per']]","8c643f7b":"df_top2=df_top1.set_index('Name')\ndf_top2","eabf9e1d":"df_top2.head(30).plot.bar()","8af5d57c":"df_top2.tail(30).plot.bar()","44f5898e":"# 2. Correlation","585c8733":"**5) Assists by Age,Position and Minutes**","bfecf599":"**I got RMSE 1.71 and R2 0.59 by LightGBM**","77371897":"**1)-2 LightGBM**","37e8fd39":"**3) Goals by Age,Position and Minutes**","5774603e":"**2) Goals by Nationality,Position and Minutes**","68d518d5":"**7) Assists by Club and Position**","8ed4f450":"**I got RMSE 5.727 and R2 0.2329 by Ridge**","59a33c1c":"**1)-1 LR, Lasso and Ridge**","a0fa7a64":"**4) Assists by Nationality,Position and Minutes**","77b13e6d":"**1) Multiple regression analysis**","1c3533d8":"# **4. Goals vs xG**","97f20b8d":"# 3.Goals Prediction Model","97a134d7":"**6) Goals by Club and Position**","a1daab46":"# 1. Visualization","4d416d38":"**8)Efficient Goals**","2f11993e":"**1) Nationality**"}}