{"cell_type":{"53907a43":"code","2c9edb0b":"code","bbd948eb":"code","d701899c":"code","f1e187d5":"code","dddcd469":"code","80d13af3":"code","6d187b28":"code","a893eb21":"code","19623bb4":"code","a5556a98":"code","144639a8":"code","1335820a":"code","f4f6faf6":"code","3d2d7ba0":"code","ee2a9416":"code","52ba99f6":"code","6c47ab80":"code","dfcc33a9":"code","5d9fc05d":"code","6badff14":"code","616828a0":"code","fa2ebd49":"code","e8e9d4f0":"code","33751fd4":"code","1aed7aca":"code","ace548c0":"code","05aed958":"code","35750b21":"code","1a8d0d72":"code","f05a56a4":"code","83f5496e":"code","d6763b63":"markdown","285370a0":"markdown","35816c80":"markdown","a40c21df":"markdown","5363e0c1":"markdown","d00cff56":"markdown","e458a306":"markdown","e3c7253a":"markdown","1b389c81":"markdown","aa42438e":"markdown","834a815b":"markdown","038d02f7":"markdown","0ada20df":"markdown","97410d15":"markdown","55fc730f":"markdown","52fbf065":"markdown","1f4cc3e8":"markdown","087faf71":"markdown","d1aac509":"markdown","18da5819":"markdown","2d435cfc":"markdown","5b5360aa":"markdown"},"source":{"53907a43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c9edb0b":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression,SGDRegressor\nsns.set_style(style='darkgrid')\n\n%matplotlib inline","bbd948eb":"from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score\n# from sklearn.metrics import mean_absolute_percentage_error\n\ndef eval1(predic,ytest):\n  print(\"-----------------------------------------------------------------\")\n  print(\"r2_score (r2) =\"+str(r2_score(ytest,predic)))\n  print(\"-----------------------------------------------------------------\")\n  print(\" PE mean absolute error (mae) = \"+ str(mean_absolute_error(ytest,predic)))\n  print(\"-----------------------------------------------------------------\")\n  print(\" PE mean squared error (mse) = \"+ str(mean_squared_error(ytest,predic)))\n  print(\"-----------------------------------------------------------------\")","d701899c":"def sgmod(x_train,y_train,x_test):\n  sg1=SGDRegressor(verbose=5,max_iter=2000)\n  sg1.fit(x_train,y_train)\n  pred=sg1.predict(x_test)\n  return (pred,sg1)","f1e187d5":"def lrmod(x_train,y_train,x_test):\n  lr1=LinearRegression()\n  lr1.fit(x_train,y_train)\n  pred=lr1.predict(x_test)\n  return (pred,lr1)","dddcd469":"def rfmod(x_train,y_train,x_test,p_grid):\n  rf1=GridSearchCV(RandomForestRegressor(),param_grid=p_grid,verbose=5,n_jobs=-1,refit=True)\n  rf1.fit(x_train,y_train)\n  pred=rf1.predict(x_test)\n  return (pred,rf1)","80d13af3":"def svmod(x_train,y_train,x_test,p_grid):\n  svg=GridSearchCV(SVR(),param_grid=p_grid,verbose=5,n_jobs=-1,refit=True)\n  svg.fit(x_train,y_train)\n  pred=svg.predict(x_test)\n  return (pred,svg)","6d187b28":"def transformer1(x_train,x_test):\n  m1=MinMaxScaler()\n  x_train=m1.fit_transform(x_train)\n  x_test=m1.transform(x_test)\n  return x_train,x_test","a893eb21":"def transformer2(x_train,x_test):\n  m1=StandardScaler()\n  x_train=m1.fit_transform(x_train)\n  x_test=m1.transform(x_test)\n  return x_train,x_test","19623bb4":"data=pd.read_csv('..\/input\/airpressure\/Folds5x2_pp.csv')","a5556a98":"data","144639a8":"data.info()","1335820a":"data.describe(include='all')","f4f6faf6":"data.isna().any()","3d2d7ba0":"plt.figure(figsize=(10,10))\nsns.heatmap(data.isna().transpose(),cmap='viridis',xticklabels=False,cbar=False)","ee2a9416":"plt.figure(figsize=(16,6))\nsns.scatterplot(data=data,y='RH',x='AP',palette='rainbow')\nplt.tight_layout()","52ba99f6":"f,axes=plt.subplots(2,2,figsize=(15,7))\n\nsns.scatterplot(y='PE',x='AT',data=data,ax=axes[0,0])\nsns.scatterplot(y='PE',x='AP',data=data,ax=axes[0,1],color='green')\nsns.scatterplot(y='PE',x='V',data=data,ax=axes[1,0],color='red')\nsns.scatterplot(y='PE',x='RH',data=data,ax=axes[1,1])\n\nplt.tight_layout()","6c47ab80":"f,axes2=plt.subplots(1,2,figsize=(15,7))\n\nsns.scatterplot(y='V',x='RH',data=data,ax=axes2[0],color='red')\nsns.scatterplot(y='V',x='AP',data=data,ax=axes2[1])\n\nplt.tight_layout()","dfcc33a9":"f,axes2=plt.subplots(1,3,figsize=(15,7))\n\nsns.scatterplot(y='AT',x='RH',data=data,ax=axes2[0])\nsns.scatterplot(y='AT',x='AP',data=data,ax=axes2[1])\nsns.scatterplot(y='AT',x='V',data=data,ax=axes2[2])\n\nplt.tight_layout()","5d9fc05d":"plt.figure(figsize=(12,8))\n\nsns.pairplot(data=data, diag_kind='kde',palette='rainbow',corner=True)\n\nplt.tight_layout()\n","6badff14":"corr = data.corr()\n\nplt.figure(figsize=(12,8))\nsns.heatmap(corr, annot=True,cmap='coolwarm')\nplt.title(\"DATASET HEATMAP\")\n#plt.show()","616828a0":"y=data['PE'].values\nX=data.drop(['PE'],axis=1).values","fa2ebd49":"x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=42)","e8e9d4f0":"x_train,x_test=transformer1(x_train,x_test) #MINMAX OK   #STD NOK","33751fd4":"pred1,lrob=lrmod(x_train,y_train,x_test)","1aed7aca":"n_est=list(range(100,700,50))\nn_estimators=dict(n_estimators=n_est)\npred2,rfob=rfmod(x_train,y_train,x_test,n_estimators)","ace548c0":"C=[1,10,100,1000];Ga=[1,0.1,0.01,0.001]\np=dict(C=C,gamma=Ga)\npred3,svob=svmod(x_train,y_train,x_test,p)","05aed958":"pred4,sgob=sgmod(x_train,y_train,x_test)","35750b21":"eval1(pred1,y_test)\n\nplt.figure(figsize=(6,6))\nplt.xlabel('Linear Regression predictions')\nplt.ylabel('Actual Values')\nsns.scatterplot(x=pred1,y=y_test)","1a8d0d72":"eval1(pred2,y_test)\n\nplt.figure(figsize=(6,6))\nplt.xlabel('Random Forest Regression Predictions')\nplt.ylabel('Actual Values')\nsns.scatterplot(x=pred2,y=y_test)\n\nprint(\"best params=\");print(rfob.best_params_)","f05a56a4":"eval1(pred3,y_test)\n\nplt.figure(figsize=(6,6))\nplt.xlabel('SVM Predictions')\nplt.ylabel('Actual Values')\nsns.scatterplot(x=pred3,y=y_test)\n\nprint(\"best params=\");print(svob.best_params_)","83f5496e":"eval1(pred4,y_test)\n\nplt.figure(figsize=(6,6))\nplt.xlabel('SGD Regression predictions')\nplt.ylabel('Actual Values')\nsns.scatterplot(x=pred4,y=y_test)","d6763b63":"## LINEAR REGRESSION\n","285370a0":"## RANDOM FOREST REGRESSOR (GRID SEARCH)","35816c80":"## DATA SCALERS","a40c21df":"# X,Y,SPLITTING","5363e0c1":"## SVR ","d00cff56":"## EVALUATORS","e458a306":"# EVALUATIONS","e3c7253a":"# DATA SCALING","1b389c81":"## LINEAR REGRESSION","aa42438e":"# EDA(Exploratory Data Analysis)","834a815b":"## STOCHASTIC GRADIENT REGRESSOR\n","038d02f7":"# GETTING DATA","0ada20df":"## MODEL FUNCTIONS","97410d15":"## STOCHASTIC GRDIENT REGRESSOR","55fc730f":"# NULL CHECK","52fbf065":"# DATA PREPROCESS (NOT NEEDED)","1f4cc3e8":"# DATA DESCRIPTION","087faf71":"# PRE-MADE FUNCTIONS","d1aac509":"# MODEL RUN","18da5819":"# IMPORT LIBRARY","2d435cfc":"## SVR (GRID SEARCH)","5b5360aa":"## RANDOM FOREST"}}