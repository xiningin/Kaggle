{"cell_type":{"50a19637":"code","ef2569c0":"code","64f7cb18":"code","e2b66961":"code","e8bd8f15":"code","4ff23002":"code","ec02903a":"code","cc1da4ed":"code","ac8e5554":"code","e925919b":"code","78d02d53":"code","b04a6396":"code","870f7521":"code","bc8b06c5":"code","064d4d29":"code","920f05c1":"code","36bf39de":"code","c0b871ab":"code","3c7b5dab":"code","40aa935d":"code","be87ec90":"code","70360dcc":"code","c98aded4":"markdown","f937907a":"markdown","0c6cb08a":"markdown","bfcf31b0":"markdown","ef457197":"markdown","686a8dd5":"markdown","2148c3f5":"markdown"},"source":{"50a19637":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom scipy import stats","ef2569c0":"df = pd.read_csv('..\/input\/glass\/glass.csv')","64f7cb18":"df.head()","e2b66961":"df.shape","e8bd8f15":"df.describe()","4ff23002":"df.isnull().sum()","ec02903a":"background_color = '#FFFED7'\ncolor_palette = ['#669900', '#CC99FF', '#00B050', '#00B0F0', '#FFC000', '#00FF00', '#002060', '#FF00FF', '#6600CC']","cc1da4ed":"fig = plt.figure(figsize=(12, 6))\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.3, hspace=0.25)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nfig.patch.set_facecolor(background_color)\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\n\n# Title\nax0.text(0.5, 0.5, 'Countplot of the Type\\n _______________',\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontfamily='serif', fontweight='bold')\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.tick_params(left=False, bottom=False)\nax0.spines['bottom'].set_visible(False)\n\n# Type\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nsns.countplot(x='Type', data=df, palette=color_palette, ax=ax1)\nax1.set_xlabel('')\nax1.set_ylabel('')\n\n\naxes = [ax0, ax1]\nfor s in [\"top\",\"right\",\"left\"]:\n    for ax in axes:\n        ax.spines[s].set_visible(False)","ac8e5554":"fig = plt.figure(figsize=(18, 15))\ngs = fig.add_gridspec(3, 3)\ngs.update(wspace=0.5, hspace=0.25)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\nax6 = fig.add_subplot(gs[2, 0])\nax7 = fig.add_subplot(gs[2, 1])\nax8 = fig.add_subplot(gs[2, 2])\n\naxes = [ax0, ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8]\nfig.patch.set_facecolor(background_color)\n\n\n# Title\nax1.text(0, 19, 'Boxenplot for continuous features',\n        fontsize=18, fontfamily='serif', fontweight='bold',\n        horizontalalignment='center',\n        verticalalignment='center')\n\nfor i, ax in enumerate(axes):\n    ax.set_facecolor(background_color)\n    ax.set_title(df.columns[i], fontsize=14, fontfamily='serif', fontweight='bold')\n    ax.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\n    \n    sns.boxenplot(y=df.columns[i], data=df, ax=ax, palette=[color_palette[i]], width=0.6)\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    \n    for s in [\"top\",\"right\",\"left\"]:\n        ax.spines[s].set_visible(False)\n","e925919b":"fig = plt.figure(figsize=(18, 15))\ngs = fig.add_gridspec(3,3)\ngs.update(wspace=0.3, hspace=0.4)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[0, 2])\nax3 = fig.add_subplot(gs[1, 0])\nax4 = fig.add_subplot(gs[1, 1])\nax5 = fig.add_subplot(gs[1, 2])\nax6 = fig.add_subplot(gs[2, 0])\nax7 = fig.add_subplot(gs[2, 1])\nax8 = fig.add_subplot(gs[2, 2])\n\naxes = [ax0, ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8]\nkde_palette = color_palette[0:6]\nfig.patch.set_facecolor(background_color)\n    \n# Title\nax1.text(14.5, 0.35, 'Distribution for continuous features by Type',\n        fontsize=18, fontfamily='serif', fontweight='bold',\n       horizontalalignment='center',\n        verticalalignment='center')\n\nfor i, ax in enumerate(axes):\n    dp_legend = False\n    if i in [2, 5, 8]:\n        dp_legend = True\n    \n    ax.set_facecolor(background_color)\n    ax.set_title(df.columns[i], fontsize=14, fontfamily='serif', fontweight='bold')\n    ax.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\n    \n    sns.kdeplot(x=df.columns[i], hue='Type', data=df, fill=True, ax=ax, palette=kde_palette, legend=dp_legend)\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    \n    for s in [\"top\",\"right\",\"left\"]:\n        ax.spines[s].set_visible(False)\n","78d02d53":"df_cor = df.drop('Type', axis=1).corr()\ndf_cor","b04a6396":"fig = plt.figure(figsize=(10, 10))\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.3, hspace=0.1)\nax0 = fig.add_subplot(gs[0,0])\n\nmask = np.triu(np.ones_like(df_cor))\nax0.text(2.5, -0.1, 'Correlation Matrix', fontsize=18, fontweight='bold',\n        fontfamily='serif')\nsns.heatmap(df_cor,  annot=True, fmt='.2f', cmap='RdBu', square=True, mask=mask, linewidth=0.7)","870f7521":"fig = plt.figure(figsize=(12, 15))\ngs = fig.add_gridspec(5, 2)\ngs.update(wspace=0.3, hspace=0.3)\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax2 = fig.add_subplot(gs[1, 0])\nax3 = fig.add_subplot(gs[1, 1])\nax4 = fig.add_subplot(gs[2, 0])\nax5 = fig.add_subplot(gs[2, 1])\nax6 = fig.add_subplot(gs[3, 0])\nax7 = fig.add_subplot(gs[3, 1])\nax8 = fig.add_subplot(gs[4, 0])\nax9 = fig.add_subplot(gs[4, 1])\n\naxes = [ax0, ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8, ax9]\nfig.patch.set_facecolor(background_color)\n\n\n# Ca and RI\ncor = round(stats.pearsonr(df['Ca'], df['RI'])[0], 4)\nax0.text(0.5, 0.5,\n        'Scatter plot for\\n Ca and RI\\n _________________',\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontfamily='serif',\n        fontweight='bold')\nax0.text(0.5, 0.15,\n        'cor = ' + str(cor),\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=14, fontfamily='serif',\n        fontweight='bold')\n\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nsns.scatterplot(x='Ca', y='RI', data=df, ax=ax1, color=color_palette[0])\n\n\n# Si and RI\ncor = round(stats.pearsonr(df['Si'], df['RI'])[0], 4)\nax2.text(0.5, 0.5,\n        'Scatter plot for\\n Si and RI\\n _________________',\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontfamily='serif',\n        fontweight='bold')\nax2.text(0.5, 0.15,\n        'cor = ' + str(cor),\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=14, fontfamily='serif',\n        fontweight='bold')\n\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nsns.scatterplot(x='Si', y='RI', data=df, ax=ax3, color=color_palette[1])\n\n\n# Ba and Mg\ncor = round(stats.pearsonr(df['Ba'], df['Mg'])[0], 4)\nax4.text(0.5, 0.5,\n        'Scatter plot for\\n Ba and Mg\\n _________________',\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontfamily='serif',\n        fontweight='bold')\nax4.text(0.5, 0.15,\n        'cor = ' + str(cor),\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=14, fontfamily='serif',\n        fontweight='bold')\n\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nsns.scatterplot(x='Ba', y='Mg', data=df, ax=ax5, color=color_palette[2])\n\n\n# Ba and Al\ncor = round(stats.pearsonr(df['Ba'], df['Al'])[0], 4)\nax6.text(0.5, 0.5,\n        'Scatter plot for\\n Ba and Al\\n _________________',\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontfamily='serif',\n        fontweight='bold')\nax6.text(0.5, 0.15,\n        'cor = ' + str(cor),\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=14, fontfamily='serif',\n        fontweight='bold')\n\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nsns.scatterplot(x='Ba', y='Al', data=df, ax=ax7, color=color_palette[3])\n\n\n# Al and Mg\ncor = round(stats.pearsonr(df['Al'], df['Mg'])[0], 4)\nax8.text(0.5, 0.5,\n        'Scatter plot for\\n Al and Mg\\n _________________',\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=18, fontfamily='serif',\n        fontweight='bold')\nax8.text(0.5, 0.15,\n        'cor = ' + str(cor),\n        horizontalalignment='center',\n        verticalalignment='center',\n        fontsize=14, fontfamily='serif',\n        fontweight='bold')\n\nax9.grid(color='#000000', linestyle=':', axis='y', zorder=0, dashes=(1,5))\nsns.scatterplot(x='Al', y='Mg', data=df, ax=ax9, color=color_palette[4])\n\n\nfor ax in axes:\n    ax.set_facecolor(background_color)\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    for s in ['top', 'right']:\n        ax.spines[s].set_visible(False)\n\nfor ax in [ax0, ax2, ax4, ax6, ax8]:\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.tick_params(left=False, bottom=False)\n    for s in ['left', 'bottom']:\n        ax.spines[s].set_visible(False)","bc8b06c5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import accuracy_score","064d4d29":"X = df.drop('Type', axis=1)\ny = df['Type']\n\nscaler = RobustScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","920f05c1":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nscore_logreg = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Logistic Regression :', score_logreg)","36bf39de":"rf = RandomForestClassifier(n_estimators=1000)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nscore_rf = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Random Forest Classifier :', score_rf)","c0b871ab":"gbc = GradientBoostingClassifier()\ngbc.fit(X_train, y_train)\ny_pred = gbc.predict(X_test)\nscore_gbc = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Gradient Boosting Classifier :', score_gbc)","3c7b5dab":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nscore_dt = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Decision Tree Classifier :', score_dt)","40aa935d":"# Find n_neighbors for best score\naccuracy = []\n\nfor i in range(1, 11):\n    model = KNeighborsClassifier(n_neighbors = i)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    accuracy.append(model.score(X_test, y_test))\n\nscore_knn = max(accuracy)\nprint('Accuracy Score of K-Nearest Neighbors Classifier : ', score_knn)\n\nplt.figure(figsize=(7, 4))\nplt.plot(range(1,11), accuracy, linestyle='dashed', marker='o', color='blue',\n        markersize=7, markerfacecolor='red')\nplt.xlabel('n_neighbors')\nplt.ylabel('Accuracy')\nplt.show()","be87ec90":"svm = SVC()\nsvm.fit(X_train, y_train)\ny_pred = svm.predict(X_test)\nscore_svm = accuracy_score(y_pred, y_test)\n\nprint('Accuracy Score of Support Vector Classifier :', score_svm)","70360dcc":"pd.DataFrame({'Model' : ['Logistic Regression', 'RandomForest', 'Gradient Boosting', \n                         'Decision Tree', 'K-Nearest Neighbors', 'Support Vector Classifier'],\n             'Score' : [score_logreg, score_rf, score_gbc, score_dt, score_knn, score_svm]})","c98aded4":"## Thank you!\n\n## Please Upvote if you like my notebook.\ud83d\udc4d","f937907a":"# Modeling","0c6cb08a":"Every feature except for the target(Type) is continuous.","bfcf31b0":"There are no null values.","ef457197":"This notebook got help from Naman Manchanda's notebook: https:\/\/www.kaggle.com\/namanmanchanda\/heart-attack-eda-prediction-90-accuracy","686a8dd5":"# EDA","2148c3f5":"Scatterplot of some correlated features."}}