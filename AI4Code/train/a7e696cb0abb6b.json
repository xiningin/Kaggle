{"cell_type":{"20308ccd":"code","be1823d2":"code","9057da06":"code","9d73c60f":"code","0dab195d":"code","e3a31673":"code","5f85b6c6":"code","6669c494":"code","0d4c6942":"code","6b9f57b3":"code","49487c43":"code","cbbba78c":"code","5de32917":"code","8e66c4e7":"code","5dac9d3b":"code","710a7a15":"code","c3f60839":"code","9e7c1c47":"code","14e8e5ae":"code","d99836e4":"code","2ef0a6b8":"code","f51f4aee":"code","e062867d":"code","84ba93af":"code","fc2014b2":"code","3b2b4c2c":"code","2bd8f55b":"code","93bac031":"code","ab14fcf4":"code","613c4664":"code","0aea9bcd":"code","5b5edcb9":"code","b6b2b733":"code","221b9e88":"code","7943d2f6":"code","5ccab71c":"code","96d0d1b5":"code","bf6f23da":"code","e99d5b74":"code","9608ecf6":"code","614537ae":"code","47992ee6":"code","c60ad214":"code","dbdd2755":"code","f49f9f5e":"code","3f33f0a8":"code","c6434d67":"code","11fb8041":"code","c0f5ea82":"code","7493c8e1":"code","0e42e994":"code","41a53aef":"code","fd71a7cd":"code","cbb09999":"code","54815db9":"markdown","249266f6":"markdown","8bb42955":"markdown","8cc144ae":"markdown","25451695":"markdown","afae7700":"markdown","ebbef9ce":"markdown","d8541fca":"markdown","bcd8e5e2":"markdown"},"source":{"20308ccd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","be1823d2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb","9057da06":"dataset = pd.read_csv('..\/input\/car-data\/CarPrice_Assignment.csv')\ndataset.head()","9d73c60f":"dataset.shape","0dab195d":"dataset.describe()","e3a31673":"#Splitting company name from CarName column\n\nCompanyName = dataset['CarName'].apply(lambda x : x.split(' ')[0])\ndataset.insert(3,\"CompanyName\",CompanyName)\ndataset.drop(['CarName'],axis=1,inplace=True)\ndataset.head()","5f85b6c6":"#data cleaning and correcting\n\ndef replace_name(a,b):\n    dataset.CompanyName.replace(a,b,inplace=True)\n\nreplace_name('maxda','mazda')\nreplace_name('porcshce','porsche')\nreplace_name('toyouta','toyota')\nreplace_name('vokswagen','volkswagen')\nreplace_name('vw','volkswagen')","6669c494":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Car Price Distribution Plot')\nsb.distplot(dataset.price)\n\nplt.subplot(1,2,2)\nplt.title('Car Price Spread')\nsb.boxplot(y=dataset.price)\n\nplt.show()","0d4c6942":"X = dataset.iloc[: ,:-1].values\n#df = pd.DataFrame(X)\ny = dataset.iloc[:, 25].values\n","6b9f57b3":"\n#visualising categorical data\n\nfig, ax = plt.subplots(figsize = (15,5))\nplt1 = sb.countplot(dataset['CompanyName'], order=pd.value_counts(dataset['CompanyName']).index,)\nplt1.set(xlabel = 'Brand', ylabel= 'Count of Cars')\n#xticks(rotation = 90)\nplt.show()\nplt.tight_layout()","49487c43":"dataset_comp_avg_price = dataset[['CompanyName','price']].groupby(\"CompanyName\", as_index = False).mean()\nplt1 = dataset_comp_avg_price.plot(x = 'CompanyName', kind='bar',legend = False, sort_columns = True, figsize = (15,3))\nplt1.set_xlabel(\"CompanyName\")\nplt1.set_ylabel(\"Avg Price (Dollars)\")\nplt.show()","cbbba78c":"\n\nplt.figure(figsize=(25, 6))\n\n\n\nplt.subplot(1,2,1)\nplt1 = dataset.fueltype.value_counts().plot(kind = 'bar')\nplt.title('Fuel Type Histogram')\nplt1.set(xlabel = 'Fuel Type', ylabel='Frequency of fuel type')\n\nplt.subplot(1,2,2)\nplt1 = dataset.carbody.value_counts().plot(kind = 'bar')\nplt.title('Car Type Histogram')\nplt1.set(xlabel = 'Car Type', ylabel='Frequency of Car type')\n\nplt.show()","5de32917":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Symboling Histogram')\nsb.countplot(dataset.symboling)\n\nplt.subplot(1,2,2)\nplt.title('Symboling vs Price')\nsb.boxplot(x=dataset.symboling, y=dataset.price)\n\nplt.show()","8e66c4e7":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Engine Type Histogram')\nsb.countplot(dataset.enginetype, palette=(\"PuBuGn\"))\n\n\n\n\ndf = pd.DataFrame(dataset.groupby(['enginetype'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(figsize=(8,6))\nplt.title('Engine Type vs Average Price')\nplt.show()","5dac9d3b":"df = pd.DataFrame(dataset.groupby(['fueltype'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Fuel Type vs Average Price')\nplt.show()\n\ndf = pd.DataFrame(dataset.groupby(['carbody'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Car Type vs Average Price')\nplt.show()","710a7a15":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Door Number Histogram')\nsb.countplot(dataset.doornumber, palette=(\"RdBu\"))\n\nplt.subplot(1,2,2)\nplt.title('Door Number vs Price')\nsb.boxplot(x=dataset.doornumber, y=dataset.price, palette=(\"RdBu\"))\n\nplt.show()\n\nplt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Aspiration Histogram')\nsb.countplot(dataset.aspiration, palette=(\"RdBu\"))\n\nplt.subplot(1,2,2)\nplt.title('Aspiration vs Price')\nsb.boxplot(x=dataset.aspiration, y=dataset.price, palette=(\"RdBu\"))\n\nplt.show()","c3f60839":"def plott(x,fig):\n    plt.subplot(4,2,fig)\n    plt.title(x+' Histogram')\n    sb.countplot(dataset[x])\n    plt.subplot(4,2,(fig+1))\n    plt.title(x+' vs Price')\n    sb.boxplot(x=dataset[x], y=dataset.price)\n    \nplt.figure(figsize=(15,20))\n\nplott('enginelocation', 1)\nplott('cylindernumber', 3)\nplott('fuelsystem', 5)\nplott('drivewheel', 7)\n\nplt.tight_layout()","9e7c1c47":"#Visualising numerical data\n\n\ndef scatter(x,fig):\n    plt.subplot(5,2,fig)\n    plt.scatter(dataset[x],dataset['price'])\n    plt.title(x+' vs Price')\n    plt.ylabel('Price')\n    plt.xlabel(x)\n\nplt.figure(figsize=(10,20))\n\nscatter('carlength', 1)\nscatter('carwidth', 2)\nscatter('carheight', 3)\nscatter('curbweight', 4)\n\nplt.tight_layout()","14e8e5ae":"def other_attributes(x,y,z):\n    sb.pairplot(dataset, x_vars=[x,y,z], y_vars='price',height=4, aspect=1, kind='scatter')\n    plt.show()\n    \n    \nother_attributes('enginesize', 'boreratio', 'stroke')\nother_attributes('compressionratio', 'horsepower', 'peakrpm')\nother_attributes('wheelbase', 'citympg', 'highwaympg')\n","d99836e4":"#adding a new feature.\ndataset['mileage'] = dataset['citympg']*0.55 + dataset['highwaympg']*0.45\ndataset.head()","2ef0a6b8":"#setting up levels for price.\ndataset[\"brand_category\"] = dataset['price'].apply(lambda x : \"Budget\" if x < 10000 \n                                                     else (\"Mid_Range\" if 10000 <= x < 20000\n                                                           else (\"Luxury\")))\ndataset.head()\n\n","f51f4aee":"#bivariate analysis of mileage and price with company name\nplt1 = sb.scatterplot(x = 'mileage', y = 'price', hue = 'brand_category', data = dataset)\nplt1.set_xlabel('Mileage')\nplt1.set_ylabel('Price of Car (Dollars)')\nplt.show()","e062867d":"plt1 = sb.scatterplot(x = 'horsepower', y = 'price', hue = 'brand_category', data = dataset)\nplt1.set_xlabel('Horsepower')\nplt1.set_ylabel('Price of Car ($)')\nplt.show()","84ba93af":"plt1 = sb.scatterplot(x = 'mileage', y = 'price', hue = 'fueltype', data = dataset)\nplt1.set_xlabel('Mileage')\nplt1.set_ylabel('Price of Car ($)')\nplt.show()","fc2014b2":"attributes = dataset[['fueltype', 'aspiration', 'carbody', 'drivewheel', 'wheelbase', 'carlength', 'carwidth', 'curbweight', 'enginetype',\n       'cylindernumber', 'enginesize',  'boreratio', 'horsepower', 'price', 'brand_category', 'mileage']]\n\nattributes.head()","3b2b4c2c":"#visualising most of the attributes\nplt.figure(figsize=(15,15))\nsb.pairplot(attributes)\nplt.show()","2bd8f55b":"# Defining the map function\ndef dummies(x,df):\n    temp = pd.get_dummies(df[x], drop_first = True)\n    df = pd.concat([df, temp], axis = 1)\n    df.drop([x], axis = 1, inplace = True)\n    return df\n# Applying the function to the  attributes\n\nattributes = dummies('fueltype',attributes)\nattributes = dummies('aspiration',attributes)\nattributes = dummies('carbody',attributes)\nattributes = dummies('drivewheel',attributes)\nattributes = dummies('enginetype',attributes)\nattributes = dummies('cylindernumber',attributes)\nattributes = dummies('brand_category',attributes)\n","93bac031":"attributes.head()","ab14fcf4":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(attributes, y, test_size = 0.20, random_state = 0)\n\n","613c4664":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nnum_vars = ['wheelbase', 'curbweight', 'enginesize', 'boreratio', 'horsepower','mileage','carlength','carwidth','price']\nX_train[num_vars] = scaler.fit_transform(X_train[num_vars])","0aea9bcd":"X_train.head()","5b5edcb9":"X_train.describe()","b6b2b733":"plt.figure(figsize = (30, 25))\nsb.heatmap(X_train.corr(), annot = True, cmap=\"RdBu\")\nplt.show()","221b9e88":"y_train = X_train.pop('price')\nX_train_new = X_train","7943d2f6":"import statsmodels.api as sm\nmodel = sm.OLS(y_train, X_train_new.astype(float)).fit()\nmodel.summary()\n","5ccab71c":"def build_model(X,y):\n    X = sm.add_constant(X) #Adding the constant\n    lm = sm.OLS(y,X).fit() # fitting the model\n    print(lm.summary()) # model summary\n    return X\n","96d0d1b5":"X_train_new = build_model(X_train.astype(float),y_train)","bf6f23da":"X_train_new = X_train.drop(['rwd'], axis = 1)\nX_train_new = build_model(X_train_new.astype(float),y_train)","e99d5b74":"X_train_new = X_train_new.drop(['two'], axis = 1)\nX_train_new = X_train_new.drop(['rotor'], axis = 1)\nX_train_new = X_train_new.drop(['carlength'], axis = 1)\nX_train_new = X_train_new.drop(['carwidth'], axis = 1)\nX_train_new = build_model(X_train_new.astype(float),y_train)\n","9608ecf6":"X_train_new = X_train_new.drop(['ohcv'], axis = 1)\nX_train_new = X_train_new.drop(['curbweight'], axis = 1)\nX_train_new = X_train_new.drop(['wheelbase'], axis = 1)\nX_train_new = build_model(X_train_new.astype(float),y_train)","614537ae":"X_train_new = X_train_new.drop(['mileage'], axis = 1)\n\nX_train_new = build_model(X_train_new.astype(float),y_train)","47992ee6":"X_train_new = X_train_new.drop(['wagon'], axis = 1)\nX_train_new = X_train_new.drop(['sedan'], axis = 1)\n\nX_train_new = build_model(X_train_new.astype(float),y_train)","c60ad214":"X_train_new = X_train_new.drop(['four'], axis = 1)\n\nX_train_new = build_model(X_train_new.astype(float),y_train)","dbdd2755":"X_train_new = X_train_new.drop(['five'], axis = 1)\nX_train_new = X_train_new.drop(['ohc'], axis = 1)\nX_train_new = X_train_new.drop(['ohcf'], axis = 1)\n\nX_train_new = build_model(X_train_new.astype(float),y_train)","f49f9f5e":"X_train_new = X_train_new.drop(['l'], axis = 1)\nX_train_new = X_train_new.drop(['dohcv'], axis = 1)\nX_train_new = X_train_new.drop(['three'], axis = 1)\n\n\nX_train_new = build_model(X_train_new.astype(float),y_train)","3f33f0a8":"lm = sm.OLS(y_train,X_train_new).fit()\ny_train_price = lm.predict(X_train_new)","c6434d67":"# Plot the histogram of the error terms\nfig = plt.figure()\nsb.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)   ","11fb8041":"num_vars = ['turbo', 'enginesize', 'boreratio','gas','fwd','hardtop', 'horsepower','price']\nX_test[num_vars] = scaler.fit_transform(X_test[num_vars])","c0f5ea82":"#Dividing into X and y\ny_test = X_test.pop('price')\nXX_test = X_test","7493c8e1":"# Now let's use our model to make predictions.\nX_train_new = X_train_new.drop('const',axis=1)\n# Creating X_test_new dataframe by dropping variables from X_test\nX_test_new = XX_test[X_train_new.columns]\n\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)","0e42e994":"y_pred = lm.predict(X_test_new.astype(float))","41a53aef":"from sklearn.metrics import r2_score \nr2_score(y_test, y_pred)","fd71a7cd":"#EVALUATION OF THE MODEL\n# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)  ","cbb09999":"print(lm.summary())","54815db9":"* 4 door car is more on the road than the two door one ,reason may be price or preferencee\n* std is clearly leading in numbers than turbo in aspirations","249266f6":"* jaguar , buick and porsche lie in the top tier of the prices moving to down towards chevrolet and nissan","8bb42955":"* enginesize, boreratio, horsepower, wheelbase - seem to have a significant positive correlation with price.\n* citympg, highwaympg - seem to have a significant negative correlation with price.","8cc144ae":"* ohc is used by most of the cars and dohcv the least\n* ohcv i the most expensive one and ohc being the cheapest of all\n","25451695":"* *gas driven cars are more common in  people*\n \n\n* *sedan has a greater demand compared to any other*","afae7700":"* diesel is a little costly than gas\n* hard and convertible are almost the same and are at the top of the price tier and hatchback being a little economical;)","ebbef9ce":"* carwidth, carlength and curbweight seems to have a poitive correlation with price.\n* carheight doesn't show any significant trend with price.","d8541fca":"* Very few datapoints for enginelocation categories to make an inference.\n* Most common number of cylinders are four, six and five. Though eight cylinders have the highest price range.\n* mpfi and 2bbl are most common type of fuel systems. mpfi and idi having the highest price range. But there are few data for other categories to derive any meaningful inference\n* A very significant difference in drivewheel category. Most high ranged cars seeme to prefer rwd drivewheel.","bcd8e5e2":"* Toyata is the most favoured company and mercury is the least\n"}}