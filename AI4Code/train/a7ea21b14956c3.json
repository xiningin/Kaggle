{"cell_type":{"c1e2215e":"code","b31d7c22":"code","71654027":"code","04294c99":"code","e1bec81c":"code","644975ca":"code","65c71a78":"code","3ed5f531":"code","de51ec8f":"code","921aa2e4":"code","4ef8c72f":"code","6e9197d4":"code","3f2e8861":"code","25df8c3d":"code","94c575dc":"code","13d028f0":"code","7f1c5c75":"code","a2a419de":"code","e3746c8d":"code","c1683ef4":"code","f63b11d8":"code","dab223d0":"code","2942f22a":"code","bf44208d":"code","f87b4397":"code","af8b1d69":"code","019178fb":"code","d8413517":"code","c7df56e3":"code","8c5095eb":"code","a14790db":"code","cc3e001b":"code","19e0388c":"code","4ee1d7ad":"code","73c64b69":"code","0a38105c":"code","c8eb68ca":"code","acba4090":"code","9fe3ff85":"code","8b77de21":"markdown","a08f7f55":"markdown","02ce7dcb":"markdown","14771a9b":"markdown","d7607ec9":"markdown","5905995a":"markdown","f22c82c7":"markdown","0699d492":"markdown","5424d49c":"markdown","c6a441a4":"markdown","fbdba3ff":"markdown","b62cddc4":"markdown","2e7440ae":"markdown","55dfdf7b":"markdown","73620f0c":"markdown","61ed9955":"markdown","7df9703d":"markdown","bfa0e76b":"markdown","ffd57544":"markdown","0b56ca9c":"markdown","3f89a3a1":"markdown"},"source":{"c1e2215e":"%%time\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport warnings\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import r2_score, make_scorer, mean_squared_log_error\nimport lightgbm as lgb\nwarnings.filterwarnings('ignore')\nimport os\nprint(os.listdir(\"..\/input\"))","b31d7c22":"train = pd.read_excel(\"..\/input\/machinehackused-cars-sales-price\/Data_Train.xlsx\")\ntest = pd.read_excel(\"..\/input\/machinehackused-cars-sales-price\/Data_Test.xlsx\")","71654027":"fig, ax= plt.subplots(1,2,figsize=(10,5))\nsns.distplot(train.Price, kde=True, ax=ax[0])\ntrain.Price.skew(), train.Price.kurt()\nax[0].set_title('Skewness is: %s\\n, Kurtosis is: %s'%((train.Price).skew(), (train.Price).kurt()))\nsns.distplot(np.log1p(train.Price), ax=ax[1])\nplt.title('Skewness is: %s\\n, Kurtosis is: %s'%(np.log1p(train.Price).skew(), np.log1p(train.Price).kurt()))","04294c99":"train.Price = np.log1p(train.Price)\nq3 = train.Price.quantile(0.75)\nq1 = train.Price.quantile(0.25)\niqr = q3-q1\nupper = q3 + 2.5 * iqr\nlower = q1 - 2.5 *iqr\n\nd=np.where((train.Price > upper) | (train.Price < lower))\ntrain.drop(index=d[0],inplace=True)\ntrain.reset_index(drop=True, inplace=True)","e1bec81c":"def filler(data,name, engine, power, seat):\n    location = data[data.Name == name].index\n    for i in location:\n        data.ix[location,'Engine'] = engine\n        data.ix[location,'Power'] = power\n        data.ix[location,'Seats'] = seat\n        #print(data.loc[location])\n        return(data)","644975ca":"train = filler(train, 'Maruti Swift 1.3 VXi', '1197cc', '82bhp',5) \ntrain = filler(train, 'Honda City 1.5 GXI' , '1497cc', '117bhp',5)\ntrain = filler(train, 'Maruti Swift 1.3 ZXI', '1248cc', '74bhp',5) \ntrain = filler(train, 'Honda City 1.3 DX', '1497cc', '117bhp',5) \ntrain = filler(train, 'Maruti Swift 1.3 LXI', '1248cc', '74bhp',5) \ntrain = filler(train, 'Maruti Swift 1.3 VXI ABS', '1248cc', '74bhp',5) \ntrain = filler(train, 'Hyundai Santro LP zipPlus', '1086cc', '58bhp',5) \ntrain = filler(train, 'Toyota Etios Liva V', '1197cc', '79bhp',5)\n \ntrain = filler(train, 'Land Rover Range Rover Sport 2005 2012 Sport', '4999cc', '503bhp',5)    \ntrain = filler(train, 'BMW 5 Series 520d Sedan', '2993cc', '265bhp',5)\ntrain = filler(train, 'Hyundai Santro GLS II - Euro II', '814cc', '55bhp',5)\ntrain = filler(train, 'Maruti Wagon R Vx', '1197cc', '81.8bhp',5)\n\ntrain = filler(train, 'Honda CR-V AT With Sun Roof', '1997cc', '154bhp' ,7)\ntrain = filler(train, 'Fiat Punto 1.3 Emotion', '1248cc', '90bhp',5)\ntrain = filler(train, 'Land Rover Range Rover 3.0 D', '2993cc', '255bhp', 7)\n\ntrain = filler(train, 'Hyundai Santro Xing XG', '1086cc', '63bhp',5)\ntrain = filler(train, 'Hyundai Santro GLS II - Euro II', '1997cc', '154bhp',5)\ntrain = filler(train, 'Honda Jazz Select Edition', '1199cc', '88bhp',5)\n\ntrain = filler(train, 'Fiat Punto 1.2 Dynamic', '1172cc', '67bhp',5)\ntrain = filler(train, 'Fiat Punto 1.4 Emotion', '1368cc', '88bhp',5)\n\ntest = filler(test, 'Maruti Swift 1.3 VXi', '1197cc', '82bhp',5) \ntest = filler(test, 'Toyota Etios Liva V', '1197cc', '79bhp',5)\ntest = filler(test, 'BMW 5 Series 520d Sedan', '2993cc', '265bhp',5)\ntest = filler(test, 'Fiat Punto 1.4 Emotion', '1368cc', '88bhp',5)\ntest = filler(test, 'Skoda Laura 1.8 TSI Ambition', '1798cc', '157bhp',5) \ntest = filler(test, 'Toyota Etios Liva Diesel TRD Sportivo', '1364cc', '67bhp',5)\ntest = filler(test, 'Hyundai i20 new Sportz AT 1.4', '1366cc', '89bhp',5)\ntest = filler(test, 'Mahindra TUV 300 P4', '2179cc', '120bhp',10)\n","65c71a78":"import re\ntrain.Name = train.Name.apply(lambda x: x.lower())\ntest.Name = test.Name.apply(lambda x: x.lower())\ntrain.Name = train.Name.apply(lambda x: re.sub('new','',x))\ntest.Name = test.Name.apply(lambda x: re.sub('new','',x))\ntrain.Name = train.Name.apply(lambda x: re.sub('evo','',x))\ntest.Name = test.Name.apply(lambda x: re.sub('evo','',x))\ntrain.Name = train.Name.apply(lambda x: re.sub('amt','',x))\ntest.Name = test.Name.apply(lambda x: re.sub('amt','',x))\ntrain.Name = train.Name.apply(lambda x: re.sub('\\s*grande','',x))\ntrain.Name = train.Name.apply(lambda x: re.sub('\\s*punto','',x))\ntest.Name = test.Name.apply(lambda x: re.sub('\\s*grande','',x))\ntest.Name = test.Name.apply(lambda x: re.sub('\\s*punto','',x))\ntrain.Name = train.Name.apply(lambda x: re.sub('\\s*ikon','',x))\ntest.Name = test.Name.apply(lambda x: re.sub('\\s*ikon','',x))\ntrain.Name = train.Name.apply(lambda x: re.sub('\\s*getz','',x))\ntest.Name = test.Name.apply(lambda x: re.sub('\\s*getz','',x))\ntrain.Name = train.Name.apply(lambda x: re.sub('-benz',' ',x))\ntest.Name = test.Name.apply(lambda x: re.sub('-benz',' ',x))","3ed5f531":"import re\npattern = re.compile(r'(Maruti|volvo|jeep|bentley|Hindustan Motors|OpelCorsa|isuzu|chevrolet|fiat|cooper|Hyundai|BMW|Honda|Toyota|datsun|jaguar|Skoda|Audi|Mercedes|Porsche|Mahindra|Nissan|ford|Volkswagen|Tata|land rover|mitsubishi|renault)', re.IGNORECASE)\ntrain['Name_t'] = train.Name.str.extract(pattern)\n\njunk = train[train.Name_t.isnull()]\njunk.index\ntrain.drop(index= junk.index, inplace=True)\ntrain.reset_index(drop=True, inplace=True)\ntest['Name_t'] = test.Name.str.extract(pattern)","de51ec8f":"pattern = re.compile(r\"^(\\w*[.]*\\w*\\s*-*\\w*[.]*\\w*)\")\ntrain['Model'] = train.Name.str.extract(pattern)\ntest['Model'] = test.Name.str.extract(pattern)","921aa2e4":"test.Model.replace({'bentley flying': 'bentley continental'}, inplace=True)\ntrain.Model.replace({'fiat  1.2': 'fiat 1.2'}, inplace=True)\ntest.Model.replace({'fiat  1.3': 'fiat 1.3'}, inplace=True)\ntrain.Model.replace({'fiat  1.3': 'fiat 1.3'}, inplace=True)\ntest.ix[887,'Power'] = '88bhp'\ntest.Model.replace({'fiat abarth': 'fiat 1.4'}, inplace=True)\n\ntrain.Model.replace({'fiat petra':'fiat 1.2'}, inplace=True)\ntrain.Model.replace({'fiat siena':'fiat 1.2'}, inplace=True)\ntrain.Model.replace({'ford fusion':'ford 1.4'}, inplace=True)\ntrain.Model.replace({'ford classic':'ford 1.4'}, inplace=True)\ntest.Model.replace({'ford classic':'ford 1.4'}, inplace=True)\n\ntest.Model.replace({'hindustan motors': 'nissan x'}, inplace=True)\ntest.Name_t.replace({'hindustan motors': 'nissan'}, inplace=True)\ntrain.Model.replace({'ford classic':'ford 1.4'}, inplace=True)\ntest.Model.replace({'ford classic':'ford 1.4'}, inplace=True)\ntrain.Model.replace({'honda br':'honda brv'}, inplace=True)\ntest.Model.replace({'honda br':'honda brv'}, inplace=True)\n\ntrain.Model.replace({'honda wr':'honda wrv'}, inplace=True)\ntest.Model.replace({'honda wr':'honda wrv'}, inplace=True)\n\ntrain.Model.replace({'hyundai gls':'hyundai gle'}, inplace=True)\ntest.Model.replace({'hyundai gls':'hyundai gle'}, inplace=True)\ntrain.Model.replace({'hyundai gvs':'hyundai gle'}, inplace=True)\ntrain.Model.replace({'hyundai 1.3':'hyundai gle'}, inplace=True)\ntest.Model.replace({'hyundai gvs':'hyundai gle'}, inplace=True)\ntest.Model.replace({'hyundai 1.3':'hyundai gle'}, inplace=True)\ntest.Model.replace({'isuzu mu':'isuzu mux'}, inplace=True)\ntrain.Model.replace({'mahindra e':'mahindra verito'}, inplace=True)\n\ntest.Model.replace({'mercedes  c':'mercedes c'}, inplace=True)\ntrain.Model.replace({'mercedes  c':'mercedes c'}, inplace=True)\n\ntest.Model.replace({'mercedes   c':'mercedes c'}, inplace=True)\ntrain.Model.replace({'mercedes   c':'mercedes c'}, inplace=True)\ntest.Model.replace({'mercedes  cla':'mercedes  gla'}, inplace=True)\ntrain.Model.replace({'mercedes  cla':'mercedes  gla'}, inplace=True)\ntest.Model.replace({'mercedes  gl':'mercedes  gle'}, inplace=True)\ntrain.Model.replace({'mercedes  gl':'mercedes  gle'}, inplace=True)\ntest.Model.replace({'nissan 370z': 'audi q7'}, inplace=True)\ntest.Model.replace({'opelcorsa 1.4gsi': 'skoda fabia'}, inplace=True)\ntest.Name_t.replace({'opelcorsa': 'skoda'}, inplace=True)\n\ntest.Model.replace({'tata  safari':'tata safari'}, inplace=True)\ntrain.Model.replace({'tata  safari':'tata safari'}, inplace=True)\ntest.Model.replace({'toyota land':'toyota fortuner'}, inplace=True)","4ef8c72f":"tr_list = set(list(train.Model.values))\nte_list = set(list(test.Model.values))\nlen(tr_list), len(te_list)\n\ndiff=list(tr_list.difference(te_list))\njunk = train[train.Model.apply(lambda x : x in diff)]\ntrain.drop(index = junk.index, inplace = True)\ntrain.reset_index(drop=True, inplace=True)","6e9197d4":"junk = train[train.Price >5]\ntrain.drop(index = junk.index, inplace = True)\ntrain.reset_index(drop=True, inplace=True)\n\njunk = train[train.Fuel_Type == 'Electric']\ntrain.drop(index= junk.index, inplace=True)\ntrain.reset_index(drop=True, inplace=True)\n\ntrain.Seats.replace({0.0:5.0}, inplace=True)\ntrain.Seats.replace({9:10}, inplace=True)\ntrain[train.Seats.isnull()]","3f2e8861":"train.iloc[224,10] = 5\ntrain.iloc[1875,10] = 5\ntrain.iloc[3712,10] = 7\n\ntest.ix[938,'Seats'] = 5","25df8c3d":"train['Mileage_t'] = train.Mileage.str.extract(r'(\\d*[.]*\\d*)')\ntrain['Engine_t'] = train.Engine.str.extract(r'(^\\d*)')\ntrain['Power_t']=train.Power.str.extract(r'(^\\d*[.]*\\d*)')\ntest['Mileage_t'] = test.Mileage.str.extract(r'(\\d*[.]*\\d*)')\ntest['Engine_t'] = test.Engine.str.extract(r'(^\\d*)')\ntest['Power_t'] = test.Power.str.extract(r'(\\d*[.]*\\d*)')","94c575dc":"train.Power_t.replace('','NaN', inplace=True)\ntrain.Power_t = train.Power_t.astype('float')\ntest.Power_t.replace('','NaN', inplace=True)\ntest.Power_t = test.Power_t.astype('float')\n\ndf = pd.concat([train,test], axis=0)\ndf.Power_t=df.groupby(['Name_t', 'Model','Fuel_Type']).Power_t.transform(lambda x: x.fillna(x.median()))\ndf.reset_index(drop=True , inplace=True)\ndf.shape, train.shape,test.shape","13d028f0":"7112-1234","7f1c5c75":"train['Power_t'] = df.loc[:5878,'Power_t']\nz = df.loc[5878:,'Power_t']\nz.reset_index(drop=True, inplace=True)\ntest['Power_t'] = z","a2a419de":"train.Engine_t = train.Engine_t.astype('float')\ntrain.Mileage_t = train.Mileage_t.astype('float')\ntrain.Power_t = train.Power_t.astype('float')\n\ntest.Engine_t = test.Engine_t.astype('float')\ntest.Mileage_t = test.Mileage_t.astype('float')\ntest.Power_t = test.Power_t.astype('float')","e3746c8d":"df=pd.concat([train,test],axis =0)\ndf.New_Price.fillna(0, inplace=True)\nx=df[df.New_Price.str.contains(r'Cr').fillna(False)].New_Price.str.extract(r'(\\d*[.]*\\d*)')[0]\nx = x.astype('float')*100\nindex = x.index\nx=list(x)\ni = 0\nfor j in list(index):\n    df.loc[j,'New_Price'] = x[i]\n    i = i + 1\n    \ndf['New_Price_t'] = df.New_Price.str.extract(r'(\\d*[.]*\\d*)\\s*[a-zA-Z]*')\ndf.New_Price_t = df.groupby(['Model','Fuel_Type']).New_Price_t.transform(lambda x: x.fillna(x.median()))\ndf.New_Price_t.fillna(df.New_Price_t.median(), inplace=True)\ndf.New_Price_t = df.New_Price_t.astype('float')\ndf.New_Price_t = np.log1p(df.New_Price_t)\nnew=pd.DataFrame(df.groupby(['Name_t'])['New_Price_t'].mean())\ndf.info()","c1683ef4":"7112-1234","f63b11d8":"train = df.iloc[:5878,:]\ntest = df.iloc[5878:,:]\ndel test['Price']","dab223d0":"train['Year_t'] = train.Year.apply(lambda x: 2020 - x )\ntest['Year_t'] = test.Year.apply(lambda x: 2020 - x )","2942f22a":"train.Owner_Type.replace({'First':'1', 'Second':'2', 'Third': '3', 'Fourth & Above': '4'}, inplace=True)\ntest.Owner_Type.replace({'First':'1', 'Second':'2', 'Third': '3', 'Fourth & Above': '4'}, inplace =True)\ntrain.Owner_Type = train.Owner_Type.astype('int')\ntest.Owner_Type = test.Owner_Type.astype('int')\n\ntrain['ow_year'] = np.ceil(train.Owner_Type* train.Year_t\/3)\ntest['ow_year'] = np.ceil(test.Owner_Type* test.Year_t\/3)","bf44208d":"sport = pd.DataFrame(train.groupby('Name_t').Price.median()>2.5)\ny = list(sport[sport.Price==True].index)\n\ntrain['Sport'] = train.Name_t.apply(lambda x: 1 if x in y else 0)\ntest['Sport'] = test.Name_t.apply(lambda x: 1 if x in y else 0)\n\ntrain['Sport_1'] = train.Engine_t.apply(lambda x: 0 if x<2000 else 1)\ntest['Sport_1'] = test.Engine_t.apply(lambda x: 0 if x<2000 else 1)\ntrain['Sport_2'] = train.Power_t.apply(lambda x: 0 if x<140 else 1)\ntest['Sport_2'] = test.Power_t.apply(lambda x: 0 if x<140 else 1)\ntrain['Sport'] = train.Sport+train.Sport_1+train.Sport_2\ntest['Sport'] = test.Sport+test.Sport_1+test.Sport_2\ntrain.Sport = np.where(train.Sport == 3 , 1 , 0)\ntest.Sport = np.where(test.Sport == 3 , 1 , 0)\ntrain.drop(columns=['Sport_1', 'Sport_2'], inplace=True)\ntest.drop(columns=['Sport_1', 'Sport_2'], inplace=True)","f87b4397":"train['Mileage_zero'] = np.where(train.Mileage_t==0,1,0)\ntest['Mileage_zero'] = np.where(test.Mileage_t==0,1,0)","af8b1d69":"train.drop(columns=['Name','Mileage','Year','Engine','Power'], inplace=True)\ntest.drop(columns=['Name','Mileage','Year','Engine','Power'], inplace=True)\n\ndel train['New_Price']\ndel test['New_Price']\nfor i in train.columns:\n    if train[i].dtype == 'O' :\n        train[i] = train[i].astype('category')\n\nfor i in test.columns:\n    if test[i].dtype == 'O' :\n        test[i] = test[i].astype('category')","019178fb":"sns.distplot(np.sqrt(train.Kilometers_Driven))\nnp.sqrt(train.Kilometers_Driven).skew(), np.sqrt(train.Kilometers_Driven).kurt()\ntrain['Kilometers_Driven'] = np.sqrt(train.Kilometers_Driven)\ntest['Kilometers_Driven'] = np.sqrt(test.Kilometers_Driven)","d8413517":"# filling Power value as mean\ntrain.Power_t.fillna(111, inplace=True)\ntest.Power_t.fillna(110.0, inplace=True)","c7df56e3":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf = pd.concat([train, test],axis=0)\ndf.Model = le.fit_transform(df.Model)\ndf.info()","8c5095eb":"7112-1234","a14790db":"train.Model = df.iloc[:5878,6]\ntest.Model = df.iloc[5878:,6]\n\n# Seats into Ordinal variable\ntrain.Seats = train.Seats.astype('int')\ntest.Seats = test.Seats.astype('int')\n\ntrain.Seats.replace({2:1, 4:2, 5:3, 6:4, 7:5 ,8:6, 10:7}, inplace=True)\ntest.Seats.replace({2:1, 4:2, 5:3, 6:4, 7:5 ,8:6, 10:7}, inplace=True)\n\n# Deleting Mileage\ndel train['Mileage_t']\ndel test['Mileage_t']\n\n# Converted into Normal distibution\ntrain.Power_t = np.log1p(train.Power_t)\ntrain.Engine_t = np.log1p(train.Engine_t)\ntest.Power_t = np.log1p(test.Power_t)\ntest.Engine_t = np.log1p(test.Engine_t)\n\n# Scaling down \ntrain.Kilometers_Driven = train.Kilometers_Driven\/1000\ntest.Kilometers_Driven = test.Kilometers_Driven\/1000\n\ntrain = pd.get_dummies(train,drop_first=True)\ntest = pd.get_dummies(test,drop_first=True)","cc3e001b":"train_label = train.Price\ndel train['Price']","19e0388c":"train.shape, test.shape","4ee1d7ad":"from sklearn.metrics import mean_squared_error","73c64b69":"def CrossVal(dataX,dataY,mode,cv=5):\n    score=cross_val_score(mode,dataX , dataY, cv=cv, scoring=metric)\n    print(\"cv score\",np.mean(score))\n    return(np.mean(score))","0a38105c":"def rmsle(y_pred, y_test) : \n    return(1-(np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_test))**2))))\nmetric = make_scorer(rmsle)","c8eb68ca":"CrossVal(train, train_label,lgb.LGBMRegressor())","acba4090":"model = lgb.LGBMRegressor(bagging_fration=0.76999999999999991, boosting_type='gbdt',\n       class_weight=None, colsample_bytree=1.0,\n       feature_fraction=0.28999999999999998, importance_type='split',\n       lambda_l1=0.36999999999999994, lambda_l2=0.050000000000000003,\n       learning_rate=0.03, max_depth=-1, min_child_samples=20,\n       min_child_weight=0.001, min_gain_split=0.001, min_split_gain=0.0,\n       n_estimators=1000, n_jobs=-1, num_leaves=86, objective=None,\n       random_state=975, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n       subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\nmodel.fit(train, train_label)\nanswer = model.predict(test)","9fe3ff85":"ans = pd.DataFrame({'Price':np.exp(answer)-1})\nans.to_excel('answer.xlsx', index = False)\nans.tail()","8b77de21":"### Filling missing data","a08f7f55":"### Filling missing value of Power with respect to Name, Model, Fuel","02ce7dcb":"Driverless cars are getting closer to reality and at a faster pace than ever. But it is still a bit far fetched dream to have one in your garage. For the time being, there are still a lot of combustion and hybrid cars that roar around the road, for some it chills. Though the overall data on sales of automobiles shows a huge drop in sales in the last couple of years, cars are still a big attraction for many. Cars are more than just a utility for many. They are often the pride and status of the family. We all have different tastes when it comes to owning a car or at least when thinking of owning one.\n\nWell here of course as the name suggests we are not concentrating on a new car, rather our interest is in knowing the prices of used cars across the country whether it is a royal l luxury sedan or a cheap budget utility vehicle. In this hackathon, you will be predicting the costs of used cars given the data collected from various sources and distributed across various locations in India.\n\nSize of training set: 6,019 records\n\nSize of test set: 1,234 records\n\nFEATURES:\n\nName: The brand and model of the car.\n\nLocation: The location in which the car is being sold or is available for purchase.\n\nYear: The year or edition of the model.\n\nKilometers_Driven: The total kilometres driven in the car by the previous owner(s) in KM.\n\nFuel_Type: The type of fuel used by the car.\n\nTransmission: The type of transmission used by the car.\n\nOwner_Type: Whether the ownership is Firsthand, Second hand or other.\n\nMileage: The standard mileage offered by the car company in kmpl or km\/kg\n\nEngine: The displacement volume of the engine in cc.\n\nPower: The maximum power of the engine in bhp.\n\nSeats: The number of seats in the car.\n\nNew_Price: The price of a new car of the same model.\n\nPrice: The price of the used car in INR Lakhs","14771a9b":"### 3. Adding one more feature to detemine if its a sports cars","d7607ec9":"## Modeling time","5905995a":"### Dropping Unwanted columns and proper type conversion","f22c82c7":"### 2. Converting owner from categorical to ordinal column + Featuring interaction column ","0699d492":"### 4. Adding one more column if car has mileage 0 means may be car is not working","5424d49c":"## Feature Engineering :\n### 1. Creating New column to check how old is your car in years","c6a441a4":"### Converting into proper type using typecasting","fbdba3ff":"### Removing Outliers and junk values","b62cddc4":"### Determining Target column distribution","2e7440ae":"### Using Regex to get car brand name","55dfdf7b":"## MachineHack Predict Used Car Sales Price\n## Under Top 25 Solution","73620f0c":"### Using Regex to get Brand Model name","61ed9955":"### Minor fixes in Car Names","7df9703d":"### Extracting info from Mileage, Engine, Power","bfa0e76b":"### Converting kilometers into Normal distribution curve","ffd57544":"### Deleting Models which are not present under test files","0b56ca9c":"### Handling New_Price missing values + 'CR' entries ","3f89a3a1":"### Convert Model into Encoding"}}