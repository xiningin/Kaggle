{"cell_type":{"7f980773":"code","489594ec":"code","ce970c5e":"code","276890db":"code","37f163e7":"code","c9cf8239":"code","6677dd40":"markdown","7176ea89":"markdown"},"source":{"7f980773":"import pandas as pd\nimport math\nfrom zipfile import ZipFile\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom sklearn.metrics import mean_squared_error\n# Using Auto-Regression approach\nfrom statsmodels.tsa.ar_model import AutoReg\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pandas.plotting import lag_plot\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.tsa.arima_model import ARMA","489594ec":"#myzip = ZipFile(\"ntt-data-global-ai-challenge-06-2020.zip\")\ndata = pd.read_csv(\"..\/input\/ntt-data-global-ai-challenge-06-2020\/Crude_oil_trend.csv\", parse_dates=[\"Date\"])\ndata.set_index(\"Date\", inplace=True)","ce970c5e":"## data75 = data.rolling(window=75).mean().dropna()\ntrainstart = \"2019-01-01\"\ntrainend = \"2020-04-30\"\nteststart = \"2020-05-01\"\ntrain = data[trainstart:trainend]\ntest = data[teststart:]\nprint(test)","276890db":"## Plotting Train Data\ntrain.plot()\nplt.title(\"Oil Prices in Train Period\")\nplt.show()\ntest.plot()\nplt.title(\"Oil Prices in Test Period\")\nplt.legend()\nplt.show()\nlag_plot(data, lag=7)\nplt.title(\"Lag Series Plot\")\nplt.show()\nautocorrelation_plot(data)\nplt.title(\"Autocorrelation Plot\")\nplt.show()\nplot_acf(data, lags=31)\nplt.title(\"ACF Plot\")\nplt.show()","37f163e7":"decomposition = sm.tsa.seasonal_decompose(train, model='addititve', period=7)\nfig = decomposition.plot()\nplt.show()","c9cf8239":"#Creating Model using ARIMA\nfrom statsmodels.tsa.arima.model import ARIMA\nmodel = ARIMA(train, order=(30, 1,5)).fit()\nyhat = model.predict(train.shape[0], train.shape[0]+test.shape[0]-1  )\n## yhat = model.predict(start=\"2020-04-01\",end=\"2020-04-30\")\nres=pd.DataFrame({\"Date\":test.index,\"Pred\":yhat, \"Act\":test[\"Price\"].values})\nres.set_index(\"Date\", inplace=True)\nres[\"Act\"].plot(label=\"Act\")\nres[\"Pred\"].plot(label=\"Pred\")\nplt.title(\"Actual vs. Predicted\")\nplt.legend()\nplt.show()\nprint(\"RMSE\",math.sqrt(mean_squared_error(res[teststart:][\"Act\"], res[teststart:][\"Pred\"])))\n#res.to_csv(\"\/kaggle\/working\/res.csv\")\nDate1 = pd.date_range('2020-06-23', periods=60, freq='D')\n#Create frame Test2 with future dates.  \ncolumns = ['Date','Price']    \nTest2 = pd.DataFrame(columns=columns)\nTest2['Price'] = pd.to_numeric(Test2['Price'])\nTest2[\"Date\"] = pd.to_datetime(Date1)\nTest2 = Test2.fillna(0)\n#Remove Weekends as in source data and store data frame as Test1 results to be loaded in Test 1\nTest1 = Test2[Test2[\"Date\"].dt.weekday < 5]\nTest1[\"Date\"] = pd.to_datetime(Test1[\"Date\"])\nTest1['Price'] = pd.to_numeric(Test1['Price'])\ndf2 = pd.DataFrame([[\"2020-04-29\",36.14],[\"2020-04-30\",35.62]],columns=['Date','Price'])\ndf2 = df2.append(Test1,ignore_index=True)\ndf2[\"Date\"] = pd.to_datetime(df2[\"Date\"])\n#print(df2)\nres1 = pd.DataFrame({\"Date\":test.index,\"Price\":yhat})\nres1[\"Date\"] = pd.to_datetime(res1[\"Date\"])\nres1 = res1.append(df2,ignore_index=True)\nprint(res1)\nres1.to_csv(\"\/kaggle\/working\/submission_v1.csv\",index=False)","6677dd40":"# **Download results**\nWe are using Time-series modeling to predict the WTI by determing seasonality and flutuation.\n\nInstructions:\n\n \n\nClick on the \"Copy & Edit\" blue button on top\nClick on Run All \nOnce the Code is executed, it will create a file in Output Folder (Under Data - right hand side panel)\nDownload the file \"Submission.csv\"\n\n \nYou can save a copy of the code by clicking \"Save Version\" buttom on top \nSelect \"Save and Run All\"\nYou can share the notebook if you make any changes for the benefit of others\nExit the notebook - Click leave editor\n \n \nNow go back to the competition main page\nhttps:\/\/www.kaggle.com\/c\/ntt-data-global-ai-challenge-06-2020\n \n\nClick - Submit Predictions\nUpload the file \"Submission.csv\"\n \n\nTry out by changing some of the variables in the code and rerun it. If you need help - please post a query in the comments section.\n\nPlease make changes in the date while submitting code currently submissions for prices after 15 june 2020 is not evaluated and considered as 0","7176ea89":"Running model and loading results in Output"}}