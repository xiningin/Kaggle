{"cell_type":{"24c38d93":"code","1bb6f93f":"code","efa81392":"code","e855b5b7":"code","84cd1ea5":"code","b910f829":"code","9d19e7c3":"code","65b15f47":"code","15858514":"code","77c204f8":"code","865754c7":"code","546455d2":"code","4f10089e":"code","75093e99":"code","b8a5b851":"code","07aeec8a":"code","ad1ce1bf":"code","52bdf958":"code","ab9b4231":"code","66ec3bdc":"code","57d5f027":"code","8b90a737":"code","7da0eb15":"code","a2a5791d":"code","0225d8af":"code","8820ef05":"code","651b3497":"code","f7488c1b":"code","4bc435fa":"code","021ee66b":"markdown","aa31662a":"markdown","f2d10388":"markdown","b4e5784f":"markdown","d684a42d":"markdown","15a5fe58":"markdown","3dbd6375":"markdown","634f4421":"markdown","4ae3bef0":"markdown","28ab2bda":"markdown","3be76dd6":"markdown","fb62a80b":"markdown","55eeef08":"markdown","96ea3b29":"markdown","a87c3024":"markdown"},"source":{"24c38d93":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly\nimport plotly.express as ex\nimport plotly.graph_objs as go\nimport ipywidgets \nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import KFold","1bb6f93f":"data=pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","efa81392":"## check the shape\ndata.shape","e855b5b7":"## check the info\ndata.info()","84cd1ea5":"## describe the data\ndata.describe()","b910f829":"## check for nulls\ndata.isna().sum()","9d19e7c3":"data['thal'].value_counts()","65b15f47":"data.head()","15858514":"fig = make_subplots(rows=1, cols=2)\nfig.add_trace(go.Histogram(x=data['oldpeak'],\n                           histnorm='probability',\n                           marker_color='#EB89B5',name=\"oldpeak:probability\"),row=1,col=1) \nfig.add_trace(go.Violin(y=data['oldpeak'],\n                        box_visible=True,\n                        meanline_visible=True,\n                        points='all',\n                        jitter=0.05,\n                        marker_color='white',name=\"oldpeak:violin\"),row=1,col=2)\nfig.update_xaxes(title_text=\"oldpeak : Histogram Distribution\", row=1, col=1)\nfig.update_xaxes(title_text=\"oldpeak : Violin Distribution\", row=1, col=2)\nfig.update_layout(title={'text':\"Histogram and Violin Distribution Plots:'oldpeak'\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                  template='plotly_dark',\n                  height=500,\n                  legend=dict(\n                        orientation='h',\n                        yanchor=\"bottom\",\n                        y=1.01,\n                        xanchor=\"center\",\n                        x=0.5,\n                        bgcolor=\"black\",\n                        bordercolor=\"white\",\n                        borderwidth=2,\n                        font=dict(\n                                family=\"Courier\",\n                                size=10,\n                                color=\"white\"\n                            ))\n                 )\nfig.show()                                  ","77c204f8":"fig = make_subplots(rows=1, cols=2)\nfig.add_trace(go.Histogram(x=data['chol'],\n                           histnorm='probability',\n                           marker_color='#EB89B5',name=\"chol:probability\"),row=1,col=1) \nfig.add_trace(go.Violin(y=data['chol'],\n                        box_visible=True,\n                        meanline_visible=True,\n                        points='all',\n                        jitter=0.05,\n                        marker_color='white',name=\"chol:violin\"),row=1,col=2)   \nfig.update_xaxes(title_text=\"chol : Histogram Distribution\", row=1, col=1)\nfig.update_xaxes(title_text=\"chol : Violin Distribution\", row=1, col=2)\n\nfig.update_layout(title={'text':\"Histogram and Violin Distribution Plots:'chol'\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                  template='plotly_dark',\n                  height=500,\n                  legend=dict(\n                        orientation='h',\n                        yanchor=\"bottom\",\n                        y=1.01,\n                        xanchor=\"center\",\n                        x=0.5,\n                        bgcolor=\"black\",\n                        bordercolor=\"white\",\n                        borderwidth=2,\n                        font=dict(\n                                family=\"Courier\",\n                                size=10,\n                                color=\"white\"\n                            ))\n                 )\nfig.show()                                  ","865754c7":"targets = [data.loc[data['target'] == val] for val in data['target'].unique()]","546455d2":"col_y = 'target'\ntargets = [data.loc[data[col_y] == val] for val in data[col_y].unique()]\nfig=go.Figure()\nfig.add_trace(go.Histogram(x=targets[0]['thalach'],\n                               histnorm='probability',\n                               marker_color='yellow',name=\"target:1\"))\nfig.add_trace(go.Histogram(x=targets[1]['thalach'],\n                               histnorm='probability',\n                               marker_color='white',name=\"target:0\"))\nfig.update_xaxes(title_text=\"thalach : Histogram Distribution\")\nfig.update_layout(title={'text':\"Distribution :thalach Hue on Outcome\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(\n                        orientation='h',\n                        yanchor=\"bottom\",\n                        y=1.01,\n                        xanchor=\"center\",\n                        x=0.5,\n                        bgcolor=\"black\",\n                        bordercolor=\"white\",\n                        borderwidth=2,\n                        font=dict(\n                                family=\"Courier\",\n                                size=10,\n                                color=\"white\"\n                            )),\n                        annotations=[dict(showarrow=True,\n                                x=90,\n                                y=0.06,\n                                text=\" Outcome Distribution <br> for 0\",\n                                xanchor=\"center\",\n                                xshift=10,\n                                opacity=0.9,\n                                font=dict(color=\"lightgoldenrodyellow\",\n                                          size=12),\n                                arrowcolor=\"lightgoldenrodyellow\",\n                                arrowsize=5,\n                                arrowwidth=0.5,\n                                arrowhead=4),\n                                    dict(showarrow=True,\n                                x=190,\n                                y=0.12,\n                                ax=10,\n                                ay=-50,\n                                text=\" Outcome Distribution <br> for 1\",\n                                xanchor=\"center\",\n                                xshift=10,\n                                opacity=0.9,\n                                font=dict(color=\"lightgoldenrodyellow\",\n                                          size=12),\n                                arrowcolor=\"lightgoldenrodyellow\",\n                                arrowsize=5,\n                                arrowwidth=0.5,\n                                arrowside=\"end\",\n                                arrowhead=4)],\n                      barmode='overlay')\nfig.update_traces(opacity=0.5)\n\nfig.show();","4f10089e":"col_y = 'target'\ntargets = [data.loc[data[col_y] == val] for val in data[col_y].unique()]\nfig=go.Figure()\nfig.add_trace(go.Histogram(x=targets[0]['trestbps'],\n                               histnorm='probability',\n                               marker_color='red',name=\"target:1\"))\nfig.add_trace(go.Histogram(x=targets[1]['trestbps'],\n                               histnorm='probability',\n                               marker_color='white',name=\"target:0\"))\nfig.update_xaxes(title_text=\"trestbps : Histogram Distribution\")\nfig.update_layout(title={'text':\"Distribution :trestbps Hue on Outcome\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(\n                        orientation='h',\n                        yanchor=\"bottom\",\n                        y=1.01,\n                        xanchor=\"center\",\n                        x=0.5,\n                        bgcolor=\"black\",\n                        bordercolor=\"white\",\n                        borderwidth=2,\n                        font=dict(\n                                family=\"Courier\",\n                                size=10,\n                                color=\"white\"\n                            )),\n                        annotations=[dict(showarrow=True,\n                                x=90,\n                                y=0.06,\n                                text=\" Outcome Distribution <br> for 1\",\n                                xanchor=\"center\",\n                                xshift=10,\n                                opacity=0.9,\n                                font=dict(color=\"lightgoldenrodyellow\",\n                                          size=12),\n                                arrowcolor=\"lightgoldenrodyellow\",\n                                arrowsize=5,\n                                arrowwidth=0.5,\n                                arrowhead=4),\n                                    dict(showarrow=True,\n                                x=190,\n                                y=0.12,\n                                ax=10,\n                                ay=-50,\n                                text=\" Outcome Distribution <br> for 0\",\n                                xanchor=\"center\",\n                                xshift=10,\n                                opacity=0.9,\n                                font=dict(color=\"lightgoldenrodyellow\",\n                                          size=12),\n                                arrowcolor=\"lightgoldenrodyellow\",\n                                arrowsize=5,\n                                arrowwidth=0.5,\n                                arrowside=\"end\",\n                                arrowhead=4)],\n                      barmode='overlay')\nfig.update_traces(opacity=0.5)\n\nfig.show();","75093e99":"fig=go.Figure()\nfig.add_trace(go.Box(x=data['cp'],y=data['oldpeak'],\n                               marker_color='yellow',name=\"target:1\",boxmean=True,jitter=0.5))\nfig.update_layout(title={'text':\"Boxplot :oldpeak Hue on target\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\nfig.update_traces(opacity=0.5)\nfig.add_shape(type=\"rect\",\n    x0=-0.2, y0=5.5, x1=0.2, y1=6.3,\n    line=dict(\n        color=\"red\",\n        width=2,\n        dash='dash'\n    ),\n    opacity=0.5,\n)\nfig.add_shape(type=\"rect\",\n    x0=2.8, y0=3.7, x1=3.2, y1=4.3,\n    line=dict(\n        color=\"red\",\n        width=2,\n        dash='dash'\n    ),\n    opacity=0.5,\n)\nfig.show();","b8a5b851":"Y = 'oldpeak'\nX = 'thal'\nuniqueX = data[X].unique()\nuniqueX = np.sort(uniqueX)\nuniqueX\n\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfor i in uniqueX:\n    fig.add_trace(go.Violin(x=data[X][data[X] == i],\n                            y=data[Y][data[X] == i],\n                            name=str(i),\n                            box_visible=True,\n                            meanline_visible=True))\n    \nfig.update_layout(title={'text':\"Violin plots for oldpeak hue on thal\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\n\nfig.show()","07aeec8a":"fig=ex.violin(data,y='cp',x='oldpeak', color='target',\n          orientation='h').update_traces(side='positive',width=2)\nfig.update_layout(template=\"plotly_dark\")\nfig.update_xaxes(title_text=\"oldpeak : Violin Side Positive Hue on target \")\nfig.update_layout(template=\"plotly_dark\",\n                  legend=dict(\n                        orientation='h',\n                        yanchor=\"bottom\",\n                        y=1.01,\n                        xanchor=\"center\",\n                        x=0.5,\n                        bgcolor=\"black\",\n                        bordercolor=\"white\",\n                        borderwidth=2,\n                        font=dict(\n                                family=\"Courier\",\n                                size=10,\n                                color=\"white\"\n                            )\n                          ))","ad1ce1bf":"fig = ex.scatter(data, x=\"oldpeak\", y='chol', \n                 color=\"age\",\n                 size='age')\nfig.update_layout(title={'text':\"Scatter plot\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\nfig.update_xaxes(title_text=\"Scatter plot : chol vs oldpeak\")\nfig.show()","52bdf958":"from plotly.graph_objs import *\ntrace1 = {\n  \"type\": \"heatmap\", \n  \"x\": data.corr().columns.tolist(), \n  \"y\": data.corr().columns.tolist(), \n  \"z\": data.corr().values.tolist()\n}\ndf = Data([trace1])\nfig = Figure(data=df)\nfig.update_layout(title={'text':\"Features Correlation Matrix\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\nfig.show()","ab9b4231":"data['age_bucket']=np.where(data['age']<=40,\"0-40\",\n                           np.where((data['age']>40)&(data['age']<=50),\"40-50\",\n                                   np.where((data['age']>50)&(data['age']<=60),\"50-60\",\n                                           np.where((data['age']>60)&(data['age']<=70),\"60-70\",\"70+\"))))","66ec3bdc":"fig = ex.parallel_categories(data, dimensions=['age_bucket', 'thal','target'],\n                labels={'age_bucket':'Age Bucket', 'thal':'Thal','Outcome':'Heart Disease'})\nfig.update_layout(title={'text':\"Parallely Corordinates : Distribution of Age bucket,thal v\u00eds-a-v\u00eda Heart Disease\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\nfig.show()","57d5f027":"# encoding the categorical columns\ncat=['sex','cp','fbs','restecg','exang','slope','ca','thal','age_bucket']\ndata=pd.get_dummies(data, columns = cat, drop_first = True)","8b90a737":"data.drop('age',axis=1,inplace=True)","7da0eb15":"data.columns","a2a5791d":"col=['trestbps', 'chol', 'thalach', 'oldpeak', 'sex_1', 'cp_1',\n       'cp_2', 'cp_3', 'fbs_1', 'restecg_1', 'restecg_2', 'exang_1', 'slope_1',\n       'slope_2', 'ca_1', 'ca_2', 'ca_3', 'ca_4', 'thal_1', 'thal_2', 'thal_3',\n       'age_bucket_40-50', 'age_bucket_50-60', 'age_bucket_60-70',\n       'age_bucket_70+']\nX = data\nY = X['target'].values\nX = X.drop('target', axis = 1)\nX = X[col]","0225d8af":"X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.1)","8820ef05":"import warnings\nwarnings.filterwarnings('ignore')\nall_classifier = []\nall_classifier.append(('LR', Pipeline([('Scaler', StandardScaler()),('LR',LogisticRegression())])))\nall_classifier.append(('KNN', Pipeline([('Scaler', StandardScaler()),('KNN', KNeighborsClassifier(n_neighbors=3))])))\nall_classifier.append(('DT', Pipeline([('Scaler', StandardScaler()),('DT', DecisionTreeClassifier(criterion='gini', max_depth=9, min_samples_leaf=10, random_state=42))])))\nall_classifier.append(('RF', Pipeline([('Scaler', StandardScaler()),('RF', RandomForestClassifier(n_estimators=500, min_samples_leaf=2, random_state=42))])))\nall_classifier.append(('ADB', Pipeline([('Scaler', StandardScaler()),('ADB', AdaBoostClassifier(n_estimators=500))])))\nall_classifier.append(('BC', Pipeline([('Scaler', StandardScaler()),('BC', BaggingClassifier(n_estimators=500))])))","651b3497":"train_acc = []\ntest_acc = []\ntrain_acc2 = []\ntest_acc2 = []\nfor name, model in all_classifier:\n    kfold = KFold(n_splits=5)\n    cv_results_train = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\n    cv_results_test = cross_val_score(model, X_test, y_test, cv=kfold, scoring='accuracy')\n    cv_results_train2 = cross_val_score(model, X_train, y_train, cv=kfold, scoring='f1')\n    cv_results_test2 = cross_val_score(model, X_test, y_test, cv=kfold, scoring='f1')\n    train_acc.append(cv_results_train.mean())\n    test_acc.append(cv_results_test.mean())\n    train_acc2.append(cv_results_train2.mean())\n    test_acc2.append(cv_results_test2.mean())","f7488c1b":"col={'Train Acc':train_acc,'Test Acc':test_acc, 'Train F1':train_acc2,'Test F1':test_acc2}\nmodels=['Logistic Regression', 'KNN', 'Decsion Tree', 'Random Forest','ADA Boost','Bagging']\nrslt=pd.DataFrame(data=col,index=models)\nrslt","4bc435fa":"# rslt.plot(kind='barh',legend=False)\nfig=ex.bar(rslt,barmode=\"group\",\n       template='plotly_dark')\nfig.update_layout(title={'text':\"Results of Baseline Models\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.96},\n                  legend=dict(\n                        orientation='h',\n                        yanchor=\"bottom\",\n                        y=-0.3,\n                        xanchor=\"center\",\n                        x=0.5,\n                        bgcolor=\"black\",\n                        bordercolor=\"white\",\n                        borderwidth=2,\n                        font=dict(\n                                family=\"Courier\",\n                                size=10,\n                                color=\"white\"\n                            )\n                          ),\n                  xaxis_title=\"Models\",yaxis_title=\"Scores\")","021ee66b":"<br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #ff4646 ; color : white; text-align: center; border-radius: 100px 100px;\">\ud83d\udccaEDA and \u2699\ufe0fModeling on Heart Disease <\/h1>\n<br>\n<center><img src=\"https:\/\/d2jx2rerrg6sh3.cloudfront.net\/image-handler\/picture\/2016\/5\/3d_rendered_illustration_-_heart_attack-Sebastian_Kaulitzki_d8743c68eb3c4250817a2a23a847caeb-620x480.jpg\"><\/center>","aa31662a":"* The baseline models above seems to be overfitting a bit. KNN and random forest are less overfitting as compared to others.\n* Further improvements can be done using some fine tuning on the base classifiers with additional classifiers.\n* Giving weights to under represented samples.\n\n\n<h3>PLEASE UPVOTE IF IT IS USEFUL<\/h3>","f2d10388":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Training with CV&nbsp;&nbsp;&nbsp;&nbsp;<\/h1>","b4e5784f":"<a id = \"eda\"><\/a><h1 id=\"Libraries and Utilities\"><span class=\"label label-default\" style=\"background-color:#EEE8AA; border-radius:6px; font-weight: bold; font-family:Garamond; font-size:26px; color:#808080; \">EDA<\/span><\/h1>\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Univariate Analysis&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> \n\n\nWe will use countplot to create the univariate count distribution plot of all categorical variables and numerical variables.","d684a42d":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Read Dataset&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","15a5fe58":"<a id = \"model\"><\/a><h1 id=\"Libraries and Utilities\"><span class=\"label label-default\" style=\"background-color:#EEE8AA; border-radius:6px; font-weight: bold; font-family:Garamond; font-size:26px; color:#808080; \">Model Building<\/span><\/h1>","3dbd6375":"<a id = \"results\"><\/a><h1 id=\"Libraries and Utilities\"><span class=\"label label-default\" style=\"background-color:#EEE8AA; border-radius:6px; font-weight: bold; font-family:Garamond; font-size:26px; color:#808080; \">Conclusion and Further Improvement<\/span><\/h1>","634f4421":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Import Libraires&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","4ae3bef0":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Bivariate Analysis&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> \n\nThe target variable is a categorical variable. We can just add the target variable as the hue layer to show the distribution by each target class. If the variable is predictive, we shall see significant distribution across classes of the target variable","28ab2bda":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Pipelining&nbsp;&nbsp;&nbsp;&nbsp;<\/h1>","3be76dd6":"<a id = \"OV\"><\/a><h1 id=\"Libraries and Utilities\"><span class=\"label label-default\" style=\"background-color:#EEE8AA; border-radius:6px; font-weight: bold; font-family:Garamond; font-size:26px; color:#808080; \">Overview<\/span><\/h1>\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">About Dataset&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> \n\nThis database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. In particular, the Cleveland database is the only one that has been used by ML researchers to\nthis date.\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">List of Attributes&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> \n\n* age\n* sex\n* chest pain type (4 values)\n* resting blood pressure\n* serum cholestoral in mg\/dl\n* fasting blood sugar > 120 mg\/dl\n* resting electrocardiographic results (values 0,1,2)\n* maximum heart rate achieved\n* exercise induced angina\n* oldpeak = ST depression induced by exercise relative to rest\n* the slope of the peak exercise ST segment\n* number of major vessels (0-3) colored by flourosopy\n* thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n* target: 0 or 1\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Goal&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> \n\nThe goal is to predict whether there is a presence of heart disease or not.","fb62a80b":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Bucketing Age : Parallel Categories Plot&nbsp;&nbsp;&nbsp;&nbsp;<\/h1>","55eeef08":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Heat Map&nbsp;&nbsp;&nbsp;&nbsp;<\/h1>","96ea3b29":"<center><br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #EEE8AA ; color : #808000; text-align: center; border-radius: 100px 100px;\">Content <\/h1>\n<br><\/center>\n    \n<p id=\"toc\"><\/p>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#OV\">&nbsp;&nbsp;&nbsp;&nbsp;1.Overview<\/a><\/h3>\n\n---\n    \n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#eda\">&nbsp;&nbsp;&nbsp;&nbsp;2.EDA<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#model\">&nbsp;&nbsp;&nbsp;&nbsp;3.Model Building<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#results\">&nbsp;&nbsp;&nbsp;&nbsp;4.Conclusion and Further improvement<\/a><\/h3>","a87c3024":"<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #EEE8AA ; color : #808000; text-align: center; border-radius: 100px 100px;\">Points covered<\/h1>\n<br><\/center>\n\n* EDA at extensive level to understand the usage of different plots (**`Scatter,Histogram,Violin,Boxplots,Heatmaps,Shankey chart`**) in plotly library.\n* Different classes like **`subplots,annotation, update_layout,update_axes`** etc are covered to give a gist of plotly.\n* Baseline prediction models for classifying the heart disease with **`Pipelining`**"}}