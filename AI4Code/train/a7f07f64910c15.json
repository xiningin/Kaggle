{"cell_type":{"84e52f4f":"code","9f1ef3b3":"code","af067b70":"code","2110f489":"code","ef5cc4a9":"code","22a79195":"code","35295e62":"code","e760f5a5":"code","d62b25b2":"markdown","2f79d618":"markdown","4392d4fc":"markdown"},"source":{"84e52f4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nimport xgboost as xgb\n\nfrom tqdm import tqdm\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nfrom scipy.special import boxcox1p\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingClassifier\nfrom sklearn.model_selection import StratifiedKFold, KFold, cross_val_score, train_test_split\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.metrics import mean_squared_error, roc_auc_score\nfrom keras import optimizers\nfrom keras.models import Sequential\nfrom keras.layers import Dense, BatchNormalization\nfrom keras.wrappers.scikit_learn import KerasRegressor, KerasClassifier\nfrom collections import Counter, defaultdict\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f1ef3b3":"%%time\ntrain_err = pd.read_csv(\"\/kaggle\/input\/dacon-lg\/train_err_data.csv\")\ntrain_qual = pd.read_csv(\"\/kaggle\/input\/dacon-lg\/train_quality_data.csv\")\ntrain_prb = pd.read_csv(\"\/kaggle\/input\/dacon-lg\/train_problem_data.csv\")\n\nis_trainn = False\nif is_trainn:\n    train_err = train_err[:100000]","af067b70":"imp_list = defaultdict(lambda x: 'error')\ndef preprcss(data, data_qual, is_train=True):\n    # NA\n    data['errcode'].fillna(1)\n    \n    # CNT dictionary\n    tmp = data.groupby('user_id')['time'].count()\n    cnt_dic = defaultdict(lambda :99999, zip(tmp.index, tmp))\n    \n    # fwver_changed dictionary\n    tmp = data.groupby('user_id')['fwver'].nunique()\n    tmp2=  tmp.apply(lambda x: 0 if x==1 else 1)\n    fwver_dic = defaultdict(lambda :0, zip(tmp2.index, tmp2))\n    \n    tmp = data_qual.groupby('user_id')['fwver'].nunique()\n    tmp2 = tmp.apply(lambda x: 1 if x>1 else 0)\n    qualfwver_dic = defaultdict(lambda :0, zip(tmp2.index, tmp2))\n    \n    data['fw'] = data['fwver'].apply(lambda x:x[:5])\n    tmp = data.groupby('user_id')['fw'].nunique()\n    tmp2=  tmp.apply(lambda x: 0 if x==1 else 1)\n    fw_dic = defaultdict(lambda :0, zip(tmp2.index, tmp2))  \n    data.drop('fw', axis=1, inplace=True)\n    \n    def upgrade_chk(x):\n        ans=0\n        start=x[0]\n        for value in x[1:]:\n            if start < value:\n                ans += 1\n            start = value\n        return ans\n\n    def downgrade_chk(x):\n        ans=0\n        start=x[0]\n        for value in x[1:]:\n            if start > value:\n                ans += 1\n            start = value\n        return ans\n\n    data['fwver_num'] = data['fwver'].apply(lambda x: int(x.replace(\".\",\"\")))\n    tmp = data.groupby('user_id')['fwver_num'].unique()\n    tmp2 = tmp.apply(upgrade_chk)\n    up_dic = defaultdict(lambda :0, zip(tmp2.index, tmp2))\n    tmp2 = tmp.apply(downgrade_chk)\n    down_dic = defaultdict(lambda :0, zip(tmp2.index, tmp2))\n    \n    # model_changed dictionary\n    tmp = data.groupby('user_id')['model_nm'].nunique()\n    tmp2=  tmp.apply(lambda x: 0 if x==1 else 1)\n    model_dic = defaultdict(lambda :0, zip(tmp2.index, tmp2))\n    \n    # errtype\/errcode nunique dictionary\n    tmp = data.groupby('user_id')['errcode'].nunique()\n    tmp2=  tmp.apply(lambda x: 0 if x==1 else 1)\n    ecode_dic = defaultdict(lambda :0, zip(tmp2.index, tmp2))\n    \n    tmp = data.groupby('user_id')['errtype'].nunique()\n    tmp2=  tmp.apply(lambda x: 0 if x==1 else 1)\n    etype_dic = defaultdict(lambda :0, zip(tmp2.index, tmp2))\n    \n    # qual_change\n    tmp = data_qual.groupby('user_id')[['quality_'+str(i) for i in range(13)]].nunique()-1\n    tmp2 = tmp.sum(axis=1)\n    qual_dic = defaultdict(lambda :0, zip(tmp2.index, tmp2))\n    \n    # qual_absdiff\n    dat = data_qual.copy()\n    dat['time'] = pd.to_datetime(dat['time'], format=\"%Y%m%d%H%M%S\")\n    dat['key'] = dat['time'].astype(str) + dat['user_id'].astype(str) + dat['fwver']\n    seq = []\n    is_first = True\n    for i, key in enumerate(dat['key']):\n        if is_first:\n            start = 0\n            is_first=False\n            seq.append(start)\n        else:\n            if key == prev_key:\n                start += 1\n            else:\n                start = 0\n            seq.append(start)\n        prev_key = key\n    dat['seq'] = seq\n    dat['min'] = dat['seq'].apply(lambda x: pd.Timedelta(minutes=10*x))\n    dat['time2'] = dat['time'] + dat['min']\n\n    for col in ['quality_'+str(i) for i in range(13)]:\n        dat[col+'_lag1'] = dat.groupby(['time', 'user_id', 'fwver'])[col].shift(1)\n\n    for col in ['quality_'+str(i) for i in range(13)]:\n        dat[col+'_absdiff'] = abs(dat[col].apply(lambda x:float(str(x).replace(\",\",\"\"))) - dat[col+'_lag1'].apply(lambda x:float(str(x).replace(\",\",\"\"))))\n\n    qual_absdiff = dat.groupby('user_id',as_index=False)[['quality_'+str(i)+'_absdiff' for i in range(13)]].mean()\n    \n    # qual_nzero_cnt\n    data_qual.fillna(0, inplace=True)\n    dat = data_qual[['user_id']+['quality_'+str(i) for i in range(13)]]\n    dat = pd.concat([dat[['user_id']], (dat[['quality_'+str(i) for i in range(13)]] !=0).astype(int)], axis=1)\n    qual_nzero_cnt = dat.groupby('user_id', as_index=False)[['quality_'+str(i) for i in range(13)]].sum()\n    \n    # qual_0 qual_2 trend\n    t1=data_qual.groupby(['user_id', 'fwver'])[['quality_0', 'quality_2']].nth(7) \n    t1.fillna(0, inplace=True)\n    t2=data_qual.groupby(['user_id', 'fwver'])[['quality_0', 'quality_2']].nth(4) \n    t2.fillna(0, inplace=True)\n    qualdiff_trend = (t1-t2).reset_index().rename(columns={'quality_0':\"qual0_trend\", 'quality_2':\"qual2_trend\"})\n    qualdiff_trend.drop('fwver',axis=1,inplace=True)\n    qualdiff_trend = qualdiff_trend.groupby('user_id')[['qual0_trend', 'qual2_trend']].mean()\n    \n    # n_qual * (mainhour, day)\n    data_qual.fillna(0, inplace=True)\n    data_qual['time'] = pd.to_datetime(data_qual['time'], format=\"%Y%m%d%H%M%S\")\n    data_qual['HH'] = data_qual['time'].dt.hour\n    data_qual['MMDD'] = data_qual['time'].dt.month.astype(str) + data_qual['time'].dt.day.astype(str)\n    data_qual['day'] = data_qual['MMDD'].apply(lambda x: 'Mon'  if x in ['112','119','1116','1123','1130'] else ('Sat' if x in['117','1114','1121','1128'] else ('Sun' if x in ['111','118','1115','1122','1129'] else 'etc')))\n    data_qual['mainhour'] = data_qual['HH'].apply(lambda x: 1 if int(x)>=10 and int(x)<=23 else 0)\n    tmp = (data_qual.groupby(['user_id' ,'day'])[list(map(lambda x: 'quality_'+ x, [str(i) for i in range(13)]))].nunique()-1).sum(axis=1).reset_index().rename(columns={0:'n_qualchange'})\n#     tmp = tmp[tmp['day']!='etc']\n\n    tmp2 = pd.pivot_table(tmp, \n                          values='n_qualchange',\n                         index=['user_id'],\n                         columns='day',\n                         aggfunc=sum)\n    day_nqual = tmp2.fillna(0).reset_index().rename(columns={'Mon':'Mon_nqual',\n                                                               'Sat':'Sat_nqual',\n                                                               'Sun':'Sun_nqual'})\n    \n    tmp = (data_qual.groupby(['user_id' ,'mainhour'])[list(map(lambda x: 'quality_'+ x, [str(i) for i in range(13)]))].nunique()-1).sum(axis=1).reset_index().rename(columns={0:'n_qualchange'})\n#     tmp = tmp[tmp['mainhour']!=0]\n\n    tmp2 = pd.pivot_table(tmp, \n                          values='n_qualchange',\n                         index=['user_id'],\n                         columns='mainhour',\n                         aggfunc=sum)\n    mainhour_nqual = tmp2.fillna(0).reset_index().rename(columns={1:'mainhour_nqual'})\n\n    # time_stat\n    data['time'] = pd.to_datetime(data['time'], format=\"%Y%m%d%H%M%S\")\n    data['time_date'] = pd.to_datetime(data['time'], format=\"%Y%m%d%H%M%S\")\n    data['time_int'] = data['time_date'].values.astype(int)\n    data.groupby('user_id').agg({'time_int': [np.min, np.max, np.mean, np.std]})\n    time_stat = data.groupby('user_id').agg({'time_int': [np.min, np.max, np.mean, np.std, skew]}).reset_index()\n    time_stat.columns = ['user_id', 'time_min', 'time_max', 'time_mean', 'time_std', 'time_skew']\n    data.drop('time_date', axis=1, inplace=True)\n    \n    #### Start!! \n    result =  pd.DataFrame(list(range(data['user_id'].min(), data['user_id'].max()+1)), columns = ['user_id'])\n    \n    # is_fwver_chamged \/ fw_changed\n    result['is_fwver_changed'] = result['user_id'].apply(lambda x: fwver_dic[x])\n#     result['is_fw_changed'] = result['user_id'].apply(lambda x: fw_dic[x])\n    result['n_upgrade'] = result['user_id'].map(up_dic)\n    result['n_downgrade'] = result['user_id'].map(down_dic)\n    result['is_model_chagned'] = result['user_id'].map(model_dic)\n    result['n_errcode'] = result['user_id'].map(ecode_dic)\n    result['n_errtype'] = result['user_id'].map(etype_dic)\n    result['n_qualchange'] = result['user_id'].map(qual_dic)\n    result['is_qualfwver_changed'] = result['user_id'].map(qualfwver_dic)\n    result = result.merge(qual_absdiff, on='user_id', how='left')\n#     result = result.merge(qual_nzero_cnt, on = 'user_id', how='left')\n#     result = result.merge(qualdiff_trend, on='user_id', how='left')\n#     result = result.merge(day_nqual, on='user_id', how='left')\n#     result = result.merge(mainhour_nqual, on='user_id', how='left')\n    result = result.merge(time_stat, on='user_id', how='left')\n    result.fillna(0, inplace=True)\n    \n    \n    # Dummy & sum (part1)\n    data['HH'] = data['time'].dt.hour\n    data['MMDD'] = data['time'].dt.month.astype(str) + data['time'].dt.day.astype(str)\n    data['day'] = data['MMDD'].apply(lambda x: 'Mon'  if x in ['112','119','1116','1123','1130'] else ('Sat' if x in['117','1114','1121','1128'] else ('Sun' if x in ['111','118','1115','1122','1129'] else 'etc')))\n    data['mainhour'] = data['HH'].apply(lambda x: 1 if int(x)>=10 and int(x)<=23 else 0)\n    dic_n={'day':99, 'mainhour':99, 'model_nm':35, 'fwver':10, 'errtype':42, 'errcode':50}\n    for var in ['day','mainhour', 'model_nm', 'fwver', 'errtype', 'errcode']:\n        n = dic_n[var]\n        if is_train:\n            imp_list[var] = data[var].value_counts().index[:n] # train or data\n            data[var] = data[var].apply(lambda x: x if x in imp_list[var] else '{}_etc'.format(var))\n        else:\n            data[var] = data[var].apply(lambda x: x if x in imp_list[var] else '{}_etc'.format(var))\n        id_error = data[['user_id',var]].values\n        value_list = data[var].unique()\n        dic = dict(zip(value_list, range(len(value_list))))\n        id_error[:,1] = list(map(lambda x:dic[x], id_error[:,1]))\n        matrix = np.zeros((data['user_id'].max() - data['user_id'].min() + 1, min(n+1, len(value_list)))) \n        user_id_min = min(id_error[:,0])\n        for person_idx, value in tqdm(id_error):\n            # person_idx - train_user_id_min \uc704\uce58\uc5d0 person_idx, errtype\uc5d0 \ud574\ub2f9\ud558\ub294 error\uac12\uc744 +1\n            matrix[person_idx - user_id_min, value] += 1\n        DT = pd.DataFrame(matrix, columns = list(map(lambda x: var + '_'+ str(x), value_list)))\n        result = pd.concat([result, DT], axis=1)\n        # if is_train==False \uc774\uba74 train_err\uc5d0\uc11c\ub3c4 var\uc9c0\uc6b8\uae4c \n    data.drop(['time', 'HH', 'MMDD'], axis=1, inplace=True)\n    \n    # Dummy & sum (part2)\n    for col1 in ['day', 'mainhour']:\n        for col2 in ['model_nm', 'fwver', 'errtype', 'errcode']: # \n            data[col1+\"_\"+col2] = data[col1].astype(str) + data[col2].astype(str)\n            if col1 == 'mainhour':\n                data.drop(col2, axis=1, inplace=True)\n        data.drop(col1, axis=1, inplace=True)\n    dic_n={'day_model_nm':70, 'day_fwver':70, 'day_errtype':70, 'mainhour_model_nm':70, 'mainhour_fwver':70, 'mainhour_errtype':70, 'day_errcode':70, 'mainhour_errcode':70}\n    for var in ['day_model_nm','day_fwver', 'day_errtype', 'mainhour_model_nm', 'mainhour_fwver', 'mainhour_errtype', 'day_errcode', 'mainhour_errcode']: # \n        n = dic_n[var]\n        if is_train:\n            imp_list[var] = data[var].value_counts().index[:n] # train or data\n            data[var] = data[var].apply(lambda x: x if x in imp_list[var] else '{}_etc'.format(var))\n        else:\n            data[var] = data[var].apply(lambda x: x if x in imp_list[var] else '{}_etc'.format(var))\n        id_error = data[['user_id',var]].values\n        value_list = data[var].unique()\n        dic = dict(zip(value_list, range(len(value_list))))\n        id_error[:,1] = list(map(lambda x:dic[x], id_error[:,1]))\n        matrix = np.zeros((data['user_id'].max() - data['user_id'].min() + 1, min(n+1, len(value_list)))) \n        user_id_min = min(id_error[:,0])\n        for person_idx, value in tqdm(id_error):\n            # person_idx - train_user_id_min \uc704\uce58\uc5d0 person_idx, errtype\uc5d0 \ud574\ub2f9\ud558\ub294 error\uac12\uc744 +1\n            matrix[person_idx - user_id_min, value] += 1\n        DT = pd.DataFrame(matrix, columns = list(map(lambda x: var + '_'+ str(x), value_list)))\n        result = pd.concat([result, DT], axis=1)\n        data.drop(var, axis=1, inplace=True)\n    \n    # pct\n    for var in ['day_Mon', 'day_Sat', 'day_Sun', 'mainhour_1']:\n        result[var +'_pct'] = result[var] \/ result['user_id'].apply(lambda x: cnt_dic[x])\n    \n    # del\n    result.drop(['mainhour_0', 'day_etc'], axis=1)\n    \n    # Making Y\n    data = result.copy()\n#     data.drop(col_del, axis=1, inplace=True)\n    if is_train:\n        data = data.merge(train_prb, on='user_id', how='left')\n        data = data.rename(columns={'time':'is_complain'})\n        data['is_complain'] = (~data['is_complain'].isnull()).astype(int)\n    data = data[~data['user_id'].duplicated()].reset_index(drop=True)\n    return data\n\ntrain = preprcss(train_err, train_qual)","2110f489":"\ntest_err = pd.read_csv(\"\/kaggle\/input\/dacon-lg\/test_err_data.csv\")\ntest_qual = pd.read_csv(\"\/kaggle\/input\/dacon-lg\/test_quality_data.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/dacon-lg\/sample_submission.csv\")\nif is_trainn:\n    test_err = test_err[:10000]","ef5cc4a9":"X = train.columns[(train.columns != 'user_id')&(train.columns != 'is_complain')]\ny = 'is_complain'\nprint(X)","22a79195":"test = preprcss(test_err, test_qual, is_train=False)\nprint(X[~X.isin(test.columns)])\ntest[X[~X.isin(test.columns)]] = 0","35295e62":"%%time\nlgb_model = lgb.LGBMClassifier( n_estimators=100,\n                               bagging_fraction = 0.9,\n                               feature_fraction = 0.2,\n                               num_leaves=16,\n                               n_jobs = -1,\n                               random_state=5)\nxgb_model = xgb.XGBClassifier(colsample_bytree=0.7,\n                          learning_rate=0.05, \n                          max_depth=4, \n                          n_estimators=300,\n                          subsample=0.9,\n                          random_state =7, \n                          nthread = -1)\ngb_model = GradientBoostingClassifier(n_estimators=400, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=30, min_samples_split=10, \n                                   loss='deviance', random_state =5)\n\nn_fold = 10\nval_result = np.zeros((n_fold,3))\nfinal_result = np.zeros((len(test), 3))\nskf = StratifiedKFold(n_splits=n_fold, random_state=42, shuffle=True)\nfor i, (train_index, test_index) in enumerate(skf.split(train[X], train[y])):\n    X_train, X_test = train[X].loc[train_index], train[X].loc[test_index]\n    y_train, y_test = train[y][train_index], train[y][test_index]\n    for j, model in enumerate([lgb_model, xgb_model, gb_model]):\n        model.fit(X_train, y_train)\n        val_pred = model.predict_proba(X_test)[:,1]\n        val_result[i,j] = roc_auc_score(y_test, val_pred)\n        final_pred = model.predict_proba(test[X])[:,1]\n        final_result[:,j] += final_pred\n    print('{}th loop is done'.format(i))\n        \nprint(val_result.mean(axis=0))\nfinal_result \/= n_fold\nfinal_result","e760f5a5":"pred = final_result[:,0]*0.35 + final_result[:,1]*0.25 + final_result[:,2]*0.4\ntest['pred_lgb'] = final_result[:,0]\ntest['pred_xgb'] = final_result[:,1]\ntest['pred_gb'] = final_result[:,2]\ntest['problem'] = pred\nsample_submission = sample_submission[['user_id']].merge(test[['user_id', 'problem', 'pred_lgb', 'pred_xgb', 'pred_gb']], how='left', on='user_id')\nsample_submission.loc[sample_submission['user_id']==43262, 'problem'] = 0.5\nsample_submission.loc[sample_submission['user_id']==43262, 'pred_lgb'] = 0.5\nsample_submission.loc[sample_submission['user_id']==43262, 'pred_xgb'] = 0.5\nsample_submission.loc[sample_submission['user_id']==43262, 'pred_gb'] = 0.5\nsample_submission.to_csv(\"submission.csv\", index=False)\nsample_submission","d62b25b2":"# Modeling","2f79d618":"# Submission","4392d4fc":"# Feature Engineering"}}