{"cell_type":{"01863e64":"code","ca1576ca":"code","eeba41b3":"code","ac03eaf6":"code","ac8bbd20":"code","737c13c4":"code","6d2a018b":"code","892ddcab":"code","73e180ff":"code","64d06504":"code","3b7347eb":"code","fa73641b":"code","50cd1f67":"code","ef6e7bba":"code","e43c13da":"code","17f78df6":"code","052cb701":"code","dddeae21":"code","9fbd3101":"code","ce18b94d":"code","c1999de9":"code","77a8c37f":"code","2e5290a6":"code","64dd234a":"code","d0ee9e6c":"markdown","0cacb168":"markdown","b3aafd81":"markdown","8d550c9f":"markdown","ca9fbc70":"markdown","7bd2b758":"markdown","e3cf88f3":"markdown","1abd8b0b":"markdown","be27254b":"markdown","badf41c7":"markdown","a590ffab":"markdown","a2402c8a":"markdown","594d85b2":"markdown","6d71642f":"markdown","28956645":"markdown"},"source":{"01863e64":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport os\nimport tensorflow as tf\nfrom tensorflow import keras as ks\n\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split","ca1576ca":"df = pd.read_csv('..\/input\/pokemon-images-and-types\/pokemon.csv')\ndf.shape","eeba41b3":"df.head(3)","ac03eaf6":"df2 = df.sort_values(by=['Name'], ascending=True).reset_index(drop=True)","ac8bbd20":"df2.head(5)","737c13c4":"type1 = df['Type1'].tolist()\ntype2 = df['Type2'].tolist()\n\ntypo = type1 + type2\n\nplt.figure(figsize=(14, 6))\n\nsns.countplot(x=typo)\nplt.title('Types of pokemon')\nplt.show()","6d2a018b":"x1 = df.Type1.value_counts().keys()\ny1 = df.Type1.value_counts().values\nx2 = df.Type2.value_counts().keys()\ny2 = df.Type2.value_counts().values","892ddcab":"xy1 = pd.DataFrame({'x1':x1, 'y1':y1})\nxy2 = pd.DataFrame({'x2':x2, 'y2': y2})\nxy1.sort_values(by=['x1'],ascending=True, inplace=True)\nxy2.sort_values(by=['x2'],ascending=True, inplace=True)","73e180ff":"plt.style.use('ggplot')\nplt.figure(figsize=(30, 7))\ngspec = gridspec.GridSpec(2, 2)\ntp = plt.subplot(gspec[0, 1])\nbt = plt.subplot(gspec[1, 1:])\n\ntp.bar(xy1.x1,xy1.y1, color=['blue', 'green', 'red',\n                             'yellow', 'cyan', 'purple',\n                             'pink', '#135688', '#002255',\n                             '#532819', '#381526', '#256789',\n                            '#784512', '#859674'])\nbt.bar(xy2.x2, xy2.y2, color=['blue', 'green', 'red',\n                             'yellow', 'cyan', 'purple',\n                             'pink', '#135688', '#002255',\n                             '#532819', '#381111', '#256789',\n                            '#784512', '#859674'])\nbt.invert_yaxis()\nbt.set_xticks([])\nplt.tight_layout()\ntp.set_title('Pokemon based on Type1 and Type2')\nplt.show()","64d06504":"path = '..\/input\/pokemon-images-and-types\/images\/images\/'\nfig,((ax1, ax2, ax3, ax4),(ax5, ax6, ax7, ax8)) = plt.subplots(2, 4, figsize=(12, 10))\nax = [ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8]\nfor i in range(8):\n    img = mpimg.imread(path+df['Name'][i**3]+'.png')\n    ax[i].imshow(img)\n    ax[i].set_title(df['Name'][i**3])\n    ax[i].axis('off')\nplt.tight_layout()\nplt.show()\n    ","3b7347eb":"path='..\/input\/pokemon-images-and-types\/images\/images\/'\nimg_name = sorted(os.listdir('..\/input\/pokemon-images-and-types\/images\/images\/'))\nimg_paths = []\nfor i in img_name:\n    img_paths.append(path + i)","fa73641b":"df2['filepath'] = img_paths","50cd1f67":"poke_type = []\ncode = []\n\nfor i in range(df2.shape[0]):\n    if (df2.iloc[i]['Type1']=='Grass') or (df2.iloc[i]['Type2']=='Grass'):\n        poke_type.append('Grass')\n        code.append(1)\n    elif (df2.iloc[i]['Type1']=='Water') or (df2.iloc[i]['Type2']=='Water'):\n        poke_type.append('Water')\n        code.append(2)\n    elif (df2.iloc[i]['Type1']=='Fire') or (df2.iloc[i]['Type2']=='Fire'):\n        poke_type.append('Fire')\n        code.append(3)\n    else:\n        poke_type.append('NaN')\n        code.append('NaN')","ef6e7bba":"df2['type'] = poke_type\ndf2['code'] = code\nnew_df = df2.drop(['Type1', 'Type2', 'Name'], axis=1)\nnew_df = new_df[new_df['type']!='NaN']\nnew_df.reset_index(drop=True, inplace=True)\n","e43c13da":"new_df.head(2)","17f78df6":"sns.countplot(x=new_df.type)\nplt.title('Pokemons going for training')\nplt.ylabel('Number of images')","052cb701":"train_datagen = ImageDataGenerator(\n    \n    rescale=1.\/255, \n    rotation_range=40, \n    width_shift_range=0.2, \n    height_shift_range=0.2, \n    shear_range=.2, \n    zoom_range=0.2,\n    horizontal_flip=True, \n    fill_mode='nearest',\n    validation_split=0.1\n)\n\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    new_df, \n    x_col='filepath', y_col='type',\n    target_size=(120, 120), \n    color_mode='rgba', \n    class_mode='categorical', \n    batch_size=32, \n    shuffle=True, \n    seed=1,\n    subset='training'\n)\n\nvalidation_generator = train_datagen.flow_from_dataframe(\n    new_df , x_col='filepath', y_col='type',\n    target_size=(120, 120),\n    color_mode='rgba', \n    class_mode='categorical', \n    batch_size=4, \n    shuffle=True,\n    seed=1, \n    subset='validation'\n)","dddeae21":"image_sample = train_generator.next()[0]\n\nplt.figure(figsize=(10, 10))\n\nfor i in range(9):\n    plt.subplot(3, 3, i+1)\n    plt.imshow(image_sample[i, :, :, :])\n    plt.axis('off')\nplt.show()","9fbd3101":"model = ks.models.Sequential()\n\nmodel.add(ks.layers.Dense(4, input_shape=(120, 120, 4)))\n\nmodel.add(ks.layers.Conv2D(64, (7, 7), activation='relu'))\nmodel.add(ks.layers.MaxPooling2D(2, 2))\n#model.add(ks.layers.Dropout(0.2))\n\nmodel.add(ks.layers.Conv2D(128, (7, 7), activation='relu'))\nmodel.add(ks.layers.MaxPooling2D(2, 2))\n#model.add(ks.layers.Dropout(0.2))\n\n\nmodel.add(ks.layers.Conv2D(256, (7, 7), activation='relu'))\nmodel.add(ks.layers.MaxPooling2D(2, 2))\n#model.add(ks.layers.Dropout(0.2))\n\nmodel.add(ks.layers.Conv2D(512, (7, 7), activation='relu'))\nmodel.add(ks.layers.MaxPooling2D(2, 2))\nmodel.add(ks.layers.Dropout(0.2))\n\n\nmodel.add(ks.layers.Flatten())\n\nmodel.add(ks.layers.Dense(1024, activation='relu'))\n\nmodel.add(ks.layers.Dense(3, activation='softmax'))\n\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['acc'])","ce18b94d":"model.summary()","c1999de9":"model.layers","77a8c37f":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('acc')>0.7) and (logs.get('val_acc')>0.7):\n            print('\\n reached 70% accuarcy so stopping training')\n            self.model.stop_training = True\ncallbacks = myCallback()\n","2e5290a6":"history = model.fit(\n    train_generator, \n    validation_data=validation_generator,\n    batch_size=20, \n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.ReduceLROnPlateau(), \n        callbacks\n    ]\n    \n)\n","64dd234a":"plt.style.use('ggplot')\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, acc, 'r', label='training_accuracy')\nplt.plot(epochs, val_acc, 'b', label='validation_accuracy')\nplt.title('Training and Validation Accuarcy')\nplt.xlabel('-----epochs--->')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, loss, 'r', label='training_loss')\nplt.plot(epochs, val_loss, 'b', label='validation_loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('----epochs--->')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","d0ee9e6c":"### getting all the image path into a dataframe ","0cacb168":"## Image sample for which trainings gonna take place","b3aafd81":"### importing the libraries","8d550c9f":"### Reading the csv file","ca9fbc70":"### Creating a callback to stop the training when a particular accuarcy is reached","7bd2b758":"## Model","e3cf88f3":"![image.png](attachment:image.png)","1abd8b0b":"### there is not much information left in the provided csv as it consist of a long list of pokemons but only a few information about those pokemons","be27254b":"### lets sort the pokemons names in order to keep in match with the available image files","badf41c7":"## Augmentation","a590ffab":"## The above two plots shows the type1 and type2 individually in which we can get some point about the pokemons abilities.\n#### Grass , fire , water, normal and bug are the base type of most of the pokemons and the secondary ability of most of the pokemons are flying where as only few pokemons have the base ability of flying and only few pokemons have other secondary ability","a2402c8a":"### by viewing the above visual we may consider that we have pretty all pokemons types where grass, water, psychic, flying and normal types are appealing.","594d85b2":"### lets view some of the provided pokemon images","6d71642f":"### Lets combine type1 and type2 to visualize what are all the major types of the given pokemons capabilities available","28956645":"# Pokemon Grass vs water vs Fire Classifier"}}