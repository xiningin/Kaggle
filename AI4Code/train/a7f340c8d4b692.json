{"cell_type":{"071f137d":"code","57733a6d":"code","8195d3e8":"code","6866d023":"code","f80e068f":"code","939fc41b":"code","56fc7abc":"code","169643ac":"code","07eaf3cf":"code","989d868b":"code","120d4941":"code","ba3b591a":"code","813f1def":"code","ebb38ac0":"code","6d025eb0":"code","31c275f1":"code","c1c1e5aa":"code","f77895ff":"code","4134d2b8":"code","d18c4957":"code","f48f974b":"code","6718b310":"code","05f69144":"code","7f7ab93c":"code","40de7642":"code","fbb7dc8d":"code","e7ba2ba7":"code","c96f2e40":"code","5d930f49":"code","6e95d556":"code","a1b46fe5":"code","b0493fb9":"code","3dca6ccc":"code","f9730c7b":"code","445037b9":"code","706f8492":"code","ac693455":"markdown","9d7859d3":"markdown","0441df4d":"markdown","0c70da8b":"markdown","828b745e":"markdown","77e8a86b":"markdown","792c8cfb":"markdown","5c2e3c84":"markdown","5cf97507":"markdown","d8b90cb6":"markdown","62b32db0":"markdown","1c68591d":"markdown","05a0a3dc":"markdown","0632b27e":"markdown","01b430ec":"markdown","af063392":"markdown","51222a2e":"markdown","e1e793ce":"markdown","d8c091e3":"markdown","3ff8745c":"markdown","ae2bfbbb":"markdown","96775fcb":"markdown","a409173b":"markdown","e87e9b4e":"markdown","2d9a51c0":"markdown","74dad578":"markdown","651f021b":"markdown","106eef81":"markdown","279581df":"markdown","ae56f6d5":"markdown","842b8390":"markdown","4ca83015":"markdown","54dae30b":"markdown","931a16b4":"markdown","54785840":"markdown","727b2cf1":"markdown","afeedac4":"markdown","f7bc46b0":"markdown","bf34e9fb":"markdown","8dbbe30d":"markdown","f77b53da":"markdown","a111086f":"markdown","05db0ab5":"markdown","b1484c07":"markdown","aa28183b":"markdown","2bbac2fe":"markdown","3100f841":"markdown","1930aeb5":"markdown","a0b05d38":"markdown","211d76c3":"markdown","d12711f1":"markdown","60b8a9d9":"markdown","c0cdb6d3":"markdown","c43dbe4b":"markdown","77daeef5":"markdown","f0826fff":"markdown"},"source":{"071f137d":"import matplotlib.pyplot as plt","57733a6d":"%matplotlib inline","8195d3e8":"import numpy as np\nx = np.linspace(0, 5, 11)\ny = x ** 2","6866d023":"x","f80e068f":"y","939fc41b":"plt.plot(x, y, 'r') # 'r' is the color red\nplt.xlabel('X Axis Title Here')\nplt.ylabel('Y Axis Title Here')\nplt.title('String Title Here')\nplt.show()","56fc7abc":"# plt.subplot(nrows, ncols, plot_number)\nplt.subplot(1,2,1)\nplt.plot(x, y, 'r--') # More on color options later\nplt.subplot(1,2,2)\nplt.plot(y, x, 'g*-');","169643ac":"# Create Figure (empty canvas)\nfig = plt.figure()\n\n# Add set of axes to figure\naxes = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # left, bottom, width, height (range 0 to 1)\n\n# Plot on that set of axes\naxes.plot(x, y, 'b')\naxes.set_xlabel('Set X Label') # Notice the use of set_ to begin methods\naxes.set_ylabel('Set y Label')\naxes.set_title('Set Title')","07eaf3cf":"# Creates blank canvas\nfig = plt.figure()\n\naxes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes\naxes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # inset axes\n\n# Larger Figure Axes 1\naxes1.plot(x, y, 'b')\naxes1.set_xlabel('X_label_axes2')\naxes1.set_ylabel('Y_label_axes2')\naxes1.set_title('Axes 2 Title')\n\n# Insert Figure Axes 2\naxes2.plot(y, x, 'r')\naxes2.set_xlabel('X_label_axes2')\naxes2.set_ylabel('Y_label_axes2')\naxes2.set_title('Axes 2 Title');","989d868b":"# Use similar to plt.figure() except use tuple unpacking to grab fig and axes\nfig, axes = plt.subplots()\n\n# Now use the axes object to add stuff to plot\naxes.plot(x, y, 'r')\naxes.set_xlabel('x')\naxes.set_ylabel('y')\naxes.set_title('title');","120d4941":"# Empty canvas of 1 by 2 subplots\nfig, axes = plt.subplots(nrows=1, ncols=2)","ba3b591a":"# Axes is an array of axes to plot on\naxes","813f1def":"for ax in axes:\n    ax.plot(x, y, 'b')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('title')\n\n# Display the figure object    \nfig","ebb38ac0":"fig, axes = plt.subplots(nrows=1, ncols=2)\n\nfor ax in axes:\n    ax.plot(x, y, 'g')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('title')\n\nfig    \nplt.tight_layout()","6d025eb0":"fig = plt.figure(figsize=(8,4), dpi=100)","31c275f1":"fig, axes = plt.subplots(figsize=(12,3))\n\naxes.plot(x, y, 'r')\naxes.set_xlabel('x')\naxes.set_ylabel('y')\naxes.set_title('title');","c1c1e5aa":"fig.savefig(\"filename.png\")","f77895ff":"fig.savefig(\"filename.png\", dpi=200)","4134d2b8":"ax.set_title(\"title\");","d18c4957":"ax.set_xlabel(\"x\")\nax.set_ylabel(\"y\");","f48f974b":"fig = plt.figure()\n\nax = fig.add_axes([0,0,1,1])\n\nax.plot(x, x**2, label=\"x**2\")\nax.plot(x, x**3, label=\"x**3\")\nax.legend()","6718b310":"# Lots of options....\n\nax.legend(loc=1) # upper right corner\nax.legend(loc=2) # upper left corner\nax.legend(loc=3) # lower left corner\nax.legend(loc=4) # lower right corner\n\n# .. many more options are available\n\n# Most common to choose\nax.legend(loc=0) # let matplotlib decide the optimal location\nfig","05f69144":"# MATLAB style line color and style \nfig, ax = plt.subplots()\nax.plot(x, x**2, 'b.-') # blue line with dots\nax.plot(x, x**3, 'g--') # green dashed line","7f7ab93c":"fig, ax = plt.subplots()\n\nax.plot(x, x+1, color=\"blue\", alpha=0.5) # half-transparant\nax.plot(x, x+2, color=\"#8B008B\")        # RGB hex code\nax.plot(x, x+3, color=\"#FF8C00\")        # RGB hex code ","40de7642":"fig, ax = plt.subplots(figsize=(12,6))\n\nax.plot(x, x+1, color=\"red\", linewidth=0.25)\nax.plot(x, x+2, color=\"red\", linewidth=0.50)\nax.plot(x, x+3, color=\"red\", linewidth=1.00)\nax.plot(x, x+4, color=\"red\", linewidth=2.00)\n\n# possible linestype options \u2018-\u2018, \u2018\u2013\u2019, \u2018-.\u2019, \u2018:\u2019, \u2018steps\u2019\nax.plot(x, x+5, color=\"green\", lw=3, linestyle='-')\nax.plot(x, x+6, color=\"green\", lw=3, ls='-.')\nax.plot(x, x+7, color=\"green\", lw=3, ls=':')\n\n# custom dash\nline, = ax.plot(x, x+8, color=\"black\", lw=1.50)\nline.set_dashes([5, 10, 15, 10]) # format: line length, space length, ...\n\n# possible marker symbols: marker = '+', 'o', '*', 's', ',', '.', '1', '2', '3', '4', ...\nax.plot(x, x+ 9, color=\"blue\", lw=3, ls='-', marker='+')\nax.plot(x, x+10, color=\"blue\", lw=3, ls='--', marker='o')\nax.plot(x, x+11, color=\"blue\", lw=3, ls='-', marker='s')\nax.plot(x, x+12, color=\"blue\", lw=3, ls='--', marker='1')\n\n# marker size and color\nax.plot(x, x+13, color=\"purple\", lw=1, ls='-', marker='o', markersize=2)\nax.plot(x, x+14, color=\"purple\", lw=1, ls='-', marker='o', markersize=4)\nax.plot(x, x+15, color=\"purple\", lw=1, ls='-', marker='o', markersize=8, markerfacecolor=\"red\")\nax.plot(x, x+16, color=\"purple\", lw=1, ls='-', marker='s', markersize=8, \n        markerfacecolor=\"yellow\", markeredgewidth=3, markeredgecolor=\"green\");","fbb7dc8d":"fig, axes = plt.subplots(1, 3, figsize=(12, 4))\n\naxes[0].plot(x, x**2, x, x**3)\naxes[0].set_title(\"default axes ranges\")\n\naxes[1].plot(x, x**2, x, x**3)\naxes[1].axis('tight')\naxes[1].set_title(\"tight axes\")\n\naxes[2].plot(x, x**2, x, x**3)\naxes[2].set_ylim([0, 60])\naxes[2].set_xlim([2, 5])\naxes[2].set_title(\"custom axes range\");","e7ba2ba7":"plt.scatter(x,y)","c96f2e40":"from random import sample\ndata = sample(range(1, 1000), 100)\nplt.hist(data)","5d930f49":"data = [np.random.normal(0, std, 100) for std in range(1, 4)]\n\n# rectangular box plot\nplt.boxplot(data,vert=True,patch_artist=True);   ","6e95d556":"fig, axes = plt.subplots(1, 2, figsize=(10,4))\n      \naxes[0].plot(x, x**2, x, np.exp(x))\naxes[0].set_title(\"Normal scale\")\n\naxes[1].plot(x, x**2, x, np.exp(x))\naxes[1].set_yscale(\"log\")\naxes[1].set_title(\"Logarithmic scale (y)\");","a1b46fe5":"fig, ax = plt.subplots(figsize=(10, 4))\n\nax.plot(x, x**2, x, x**3, lw=2)\n\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels([r'$\\alpha$', r'$\\beta$', r'$\\gamma$', r'$\\delta$', r'$\\epsilon$'], fontsize=18)\n\nyticks = [0, 50, 100, 150]\nax.set_yticks(yticks)\nax.set_yticklabels([\"$%.1f$\" % y for y in yticks], fontsize=18); # use LaTeX formatted labels","b0493fb9":"fig, ax = plt.subplots(1, 1)\n      \nax.plot(x, x**2, x, np.exp(x))\nax.set_title(\"scientific notation\")\n\nax.set_yticks([0, 50, 100, 150])\n\nfrom matplotlib import ticker\nformatter = ticker.ScalarFormatter(useMathText=True)\nformatter.set_scientific(True) \nformatter.set_powerlimits((-1,1)) \nax.yaxis.set_major_formatter(formatter) ","3dca6ccc":"fig, ax = plt.subplots(2, 3)\nfig.tight_layout()","f9730c7b":"fig = plt.figure()\nax1 = plt.subplot2grid((3,3), (0,0), colspan=3)\nax2 = plt.subplot2grid((3,3), (1,0), colspan=2)\nax3 = plt.subplot2grid((3,3), (1,2), rowspan=2)\nax4 = plt.subplot2grid((3,3), (2,0))\nax5 = plt.subplot2grid((3,3), (2,1))\nfig.tight_layout()","445037b9":"import matplotlib.gridspec as gridspec","706f8492":"fig = plt.figure()\n\ngs = gridspec.GridSpec(2, 3, height_ratios=[2,1], width_ratios=[1,2,1])\nfor g in gs:\n    ax = fig.add_subplot(g)\n    \nfig.tight_layout()","ac693455":"____\n## Legends, labels and titles","9d7859d3":"Then you can specify the number of rows and columns when creating the subplots() object:","0441df4d":"### Legends","0c70da8b":"With large numbers on axes, it is often better use scientific notation:","828b745e":"### Line and marker styles","77e8a86b":"### Colors with the color= parameter","792c8cfb":"Code is a little more complicated, but the advantage is that we now have full control of where the plot axes are placed, and we can easily add more than one axis to the figure:","5c2e3c84":"#### Scientific notation","5cf97507":"### Figure size, aspect ratio and DPI","d8b90cb6":"## Setting colors, linewidths, linetypes\n\nMatplotlib gives you *a lot* of options for customizing colors, linewidths, and linetypes. \n\nThere is the basic MATLAB like syntax (which I would suggest you avoid using for more clairty sake:","62b32db0":"Notice how are legend overlaps some of the actual plot!\n\nThe **legend** function takes an optional keyword argument **loc** that can be used to specify where in the figure the legend is to be drawn. The allowed values of **loc** are numerical codes for the various places the legend can be drawn. See the [documentation page](http:\/\/matplotlib.org\/users\/legend_guide.html#legend-location) for details. Some of the most common **loc** values are:","1c68591d":"Here we can also optionally specify the DPI and choose between different output formats:","05a0a3dc":"## Introduction","0632b27e":"# Basic Example\n\nLet's walk through a very simple example using two numpy arrays:","01b430ec":"You can use the **label=\"label text\"** keyword argument when plots or other objects are added to the figure, and then using the **legend** method without arguments to add the legend to the figure: ","af063392":"___\n# Matplotlib Object Oriented Method\nNow that we've seen the basics, let's break it all down with a more formal introduction of Matplotlib's Object Oriented API. This means we will instantiate figure objects and then call methods or attributes from that object.","51222a2e":"## subplots()\n\nThe plt.subplots() object will act as a more automatic axis manager.\n\nBasic use cases:","e1e793ce":"A common issue with matplolib is overlapping subplots or figures. We ca use **fig.tight_layout()** or **plt.tight_layout()** method, which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content:","d8c091e3":"#### Logarithmic scale","3ff8745c":"To change the line width, we can use the `linewidth` or `lw` keyword argument. The line style can be selected using the `linestyle` or `ls` keyword arguments:","ae2bfbbb":"With matplotlib, we can define the colors of lines and other graphical elements in a number of ways. First of all, we can use the MATLAB-like syntax where `'b'` means blue, `'g'` means green, etc. The MATLAB API for selecting line styles are also supported: where, for example, 'b.-' means a blue line with dots:","96775fcb":"It is also possible to set a logarithmic scale for one or both axes. This functionality is in fact only one application of a more general transformation system in Matplotlib. Each of the axes' scales are set seperately using `set_xscale` and `set_yscale` methods which accept one parameter (with the value \"log\" in this case):","a409173b":"The same arguments can also be passed to layout managers, such as the `subplots` function:","e87e9b4e":"## Creating Multiplots on Same Canvas","2d9a51c0":"# Matplotlib Overview ","74dad578":"We can iterate through this array:","651f021b":"We can also define colors by their names or RGB hex codes and optionally provide an alpha value using the `color` and `alpha` keyword arguments. Alpha indicates opacity.","106eef81":"Axes can be added to a matplotlib Figure canvas manually using `fig.add_axes` or using a sub-figure layout manager such as `subplots`, `subplot2grid`, or `gridspec`:","279581df":"### Colors with MatLab like syntax","ae56f6d5":"#### pcolor","842b8390":"#### gridspec","4ca83015":"Matplotlib allows the aspect ratio, DPI and figure size to be specified when the Figure object is created. You can use the `figsize` and `dpi` keyword arguments. \n* `figsize` is a tuple of the width and height of the figure in inches\n* `dpi` is the dots-per-inch (pixel per inch). \n\nFor example:","54dae30b":"### Placement of ticks and custom tick labels","931a16b4":"In this section we will look at controlling axis sizing properties in a matplotlib figure.","54785840":"To save a figure to a file we can use the `savefig` method in the `Figure` class:","727b2cf1":"Matplotlib is the \"grandfather\" library of data visualization with Python. It was created by John Hunter. He created it to try to replicate MatLab's (another programming language) plotting capabilities in Python. So if you happen to be familiar with matlab, matplotlib will feel natural to you.\n\nIt is an excellent 2D and 3D graphics library for generating scientific figures. \n\nSome of the major Pros of Matplotlib are:\n\n* Generally easy to get started for simple plots\n* Support for custom labels and texts\n* Great control of every element in a figure\n* High-quality output in many formats\n* Very customizable in general\n\nMatplotlib allows you to create reproducible figures programmatically. Let's learn how to use it! Before continuing this lecture, I encourage you just to explore the official Matplotlib web page: http:\/\/matplotlib.org\/\n\n## Installation \n\nYou'll need to install matplotlib first with either:\n\n    conda install matplotlib\nor\n    pip install matplotlib\n    \n## Importing","afeedac4":"## Introduction to the Object Oriented Method","f7bc46b0":"## Basic Matplotlib Commands\n\nWe can create a very simple line plot using the following ( I encourage you to pause and use Shift+Tab along the way to check out the document strings for the functions we are using).","bf34e9fb":"The main idea in using the more formal Object Oriented method is to create figure objects and then just call methods or attributes off of that object. This approach is nicer when dealing with a canvas that has multiple plots on it. \n\nTo begin we create a figure instance. Then we can add axes to that figure:","8dbbe30d":"You'll also need to use this line to see plots in the notebook:","f77b53da":"We can explicitly determine where we want the axis ticks with `set_xticks` and `set_yticks`, which both take a list of values for where on the axis the ticks are to be placed. We can also use the `set_xticklabels` and `set_yticklabels` methods to provide a list of custom text labels for each tick location:","a111086f":"### Figures with multiple subplots and insets","05db0ab5":"#### subplot2grid","b1484c07":"That line is only for jupyter notebooks, if you are using another editor, you'll use: **plt.show()** at the end of all your plotting commands to have the figure pop up in another window.","aa28183b":"# Special Plot Types\n\nThere are many specialized plots we can create, such as barplots, histograms, scatter plots, and much more. Most of these type of plots we will actually create using seaborn, a statistical plotting library for Python. But here are a few examples of these type of plots:","2bbac2fe":"# Advanced Matplotlib","3100f841":"### Control over axis appearance","1930aeb5":"## Saving figures\nMatplotlib can generate high-quality output in a number formats, including PNG, JPG, EPS, SVG, PGF and PDF. ","a0b05d38":"Import the `matplotlib.pyplot` module under the name `plt` (the tidy way):","211d76c3":"**Figure titles**\n\nA title can be added to each axis instance in a figure. To set the title, use the `set_title` method in the axes instance:","d12711f1":"We can configure the ranges of the axes using the `set_ylim` and `set_xlim` methods in the axis object, or `axis('tight')` for automatically getting \"tightly fitted\" axes ranges:","60b8a9d9":"### Example\n\nLet's walk through a very simple example using two numpy arrays. You can also use lists, but most likely you'll be passing numpy arrays or pandas columns (which essentially also behave like arrays).\n\n** The data we want to plot:**","c0cdb6d3":"#### subplots","c43dbe4b":"Now that we have covered the basics of how to create a figure canvas and add axes instances to the canvas, let's look at how decorate a figure with titles, axis labels, and legends.","77daeef5":"**Axis labels**\n\nSimilarly, with the methods `set_xlabel` and `set_ylabel`, we can set the labels of the X and Y axes:","f0826fff":"## Plot range"}}