{"cell_type":{"44b2ab29":"code","94adde25":"code","00e2e870":"code","97881266":"code","ee18dbc6":"code","3b967189":"code","33b6eba2":"code","fa846737":"code","0f7dc3de":"code","3dea24e9":"code","0420c0e6":"code","7e57dc84":"code","20b96ca6":"code","214a224c":"code","c569f45d":"code","74b7b0dc":"code","aafcc1e8":"code","7bea98a4":"code","beab7756":"code","07da011c":"code","a4a65d65":"code","1fcc2062":"code","7caca21c":"code","b822f1de":"code","191d3de8":"code","6885e818":"code","371136d3":"code","05feec50":"code","09527ee6":"code","f77dea40":"code","69a51a29":"code","825cf2b8":"code","16dc7c56":"code","8aa9c58f":"code","81a30a70":"code","3c85f8b5":"code","33f68d58":"code","29f3f6d6":"code","33baff83":"code","a210c3bf":"code","76c55fbc":"code","2c0e52a7":"code","0aff9a3e":"code","5223f3f4":"code","ba903cd9":"code","1543ef41":"code","c7d25431":"code","2f44dee6":"markdown","2c581a65":"markdown","7c30d331":"markdown","8f625306":"markdown","6513cd06":"markdown","6f576186":"markdown","b5b188f7":"markdown","a244783d":"markdown","b110b223":"markdown","a0ac786f":"markdown","11d4ca95":"markdown","c8cf1e76":"markdown","1161af22":"markdown","0d7ffd15":"markdown","a8aa0ddc":"markdown","f39259bd":"markdown","8339a795":"markdown","3b97a7e6":"markdown","5ea49684":"markdown","4ae4dbdc":"markdown","bec3d279":"markdown"},"source":{"44b2ab29":"import numpy as np\nimport pandas as pd\ndef warn(*args, **kwargs):\n    pass\nimport warnings\nwarnings.warn = warn","94adde25":"df = pd.read_csv('..\/input\/sms-data-labelled-spam-and-non-spam\/SMSSpamCollection', sep='\\t', names=['label', 'message'])","00e2e870":"df.shape","97881266":"df.columns","ee18dbc6":"df.dtypes","3b967189":"df.head()","33b6eba2":"df.tail()","fa846737":"df.info()","0f7dc3de":"df.describe(include='object')","3dea24e9":"# Mapping values for label\ndf['label'] = df['label'].map({'ham': 0, 'spam': 1})","0420c0e6":"df.head()","7e57dc84":"df.tail()","20b96ca6":"# Importing essential libraries for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","214a224c":"# Countplot for Spam vs. Ham as imbalanced dataset\nplt.figure(figsize=(8,8))\ng = sns.countplot(x='label', data=df)\np = plt.title('Countplot for Spam vs. Ham as imbalanced dataset')\np = plt.xlabel('Is SMS Spam?')\np = plt.ylabel('Count')","c569f45d":"# Handling imbalanced dataset using Oversampling\nonly_spam = df[df['label']==1]\nprint('Number of Spam records: {}'.format(only_spam.shape[0]))\nprint('Number of Ham records: {}'.format(df.shape[0]-only_spam.shape[0]))","74b7b0dc":"count = int((df.shape[0]-only_spam.shape[0])\/only_spam.shape[0])\nfor i in range(0, count-1):\n  df = pd.concat([df, only_spam])\n\ndf.shape","aafcc1e8":"# Countplot for Spam vs. Ham as balanced dataset\nplt.figure(figsize=(8,8))\ng = sns.countplot(x='label', data=df)\np = plt.title('Countplot for Spam vs. Ham as balanced dataset')\np = plt.xlabel('Is SMS Spam?')\np = plt.ylabel('Count')","7bea98a4":"# Creating new feature word_count\ndf['word_count'] = df['message'].apply(lambda x: len(x.split()))","beab7756":"df.head()","07da011c":"plt.figure(figsize=(12, 6))\n\n# 1-row, 2-column, go to the first subplot\nplt.subplot(1, 2, 1)\ng = sns.distplot(a=df[df['label']==0].word_count)\np = plt.title('Distribution of word_count for Ham messages')\n\n# 1-row, 2-column, go to the second subplot\nplt.subplot(1, 2, 2)\ng = sns.distplot(a=df[df['label']==1].word_count, color='red')\np = plt.title('Distribution of word_count for Spam messages')\n\nplt.tight_layout()\nplt.show()","a4a65d65":"# Creating feature contains_currency_symbol\ndef currency(x):\n  currency_symbols = ['\u20ac', '$', '\u00a5', '\u00a3', '\u20b9']\n  for i in currency_symbols:\n    if i in x:\n      return 1\n  return 0\n\ndf['contains_currency_symbol'] = df['message'].apply(currency)","1fcc2062":"df.tail()","7caca21c":"# Countplot for contains_currency_symbol\nplt.figure(figsize=(8,8))\ng = sns.countplot(x='contains_currency_symbol', data=df, hue='label')\np = plt.title('Countplot for contain_currency')\np = plt.xlabel('Does SMS contain currency symbol?')\np = plt.ylabel('Count')\np = plt.legend(labels=['Ham', 'Spam'], loc=9)","b822f1de":"# Creating feature contains_number\ndef numbers(x):\n  for i in x:\n    if ord(i)>=48 and ord(i)<=57:\n      return 1\n  return 0\n\ndf['contains_number'] = df['message'].apply(numbers)","191d3de8":"df.head()","6885e818":"# Countplot for contains_number\nplt.figure(figsize=(8,8))\ng = sns.countplot(x='contains_number', data=df, hue='label')\np = plt.title('Countplot for contain_numbers')\np = plt.xlabel('Does SMS contain number?')\np = plt.ylabel('Count')\np = plt.legend(labels=['Ham', 'Spam'], loc=9)","371136d3":"# Importing essential libraries for performing NLP\nimport nltk\nimport re\nnltk.download('stopwords')\nnltk.download('wordnet')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer","05feec50":"# Cleaning the messages\ncorpus = []\nwnl = WordNetLemmatizer()\n\nfor sms_string in list(df.message):\n\n  # Cleaning special character from the sms\n  message = re.sub(pattern='[^a-zA-Z]', repl=' ', string=sms_string)\n\n  # Converting the entire sms into lower case\n  message = message.lower()\n\n  # Tokenizing the sms by words\n  words = message.split()\n\n  # Removing the stop words\n  filtered_words = [word for word in words if word not in set(stopwords.words('english'))]\n\n  # Lemmatizing the words\n  lemmatized_words = [wnl.lemmatize(word) for word in filtered_words]\n\n  # Joining the lemmatized words\n  message = ' '.join(lemmatized_words)\n\n  # Building a corpus of messages\n  corpus.append(message)","09527ee6":"corpus[0:3]","f77dea40":"# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf = TfidfVectorizer(max_features=500)\nvectors = tfidf.fit_transform(corpus).toarray()\nfeature_names = tfidf.get_feature_names()\n\n# Extracting independent and dependent variables from the dataset\nX = pd.DataFrame(vectors, columns=feature_names)\ny = df['label']","69a51a29":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split","825cf2b8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","16dc7c56":"# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nmnb = MultinomialNB()\ncv = cross_val_score(mnb, X, y, scoring='f1', cv=10)\nprint('--- Average F1-Score for MNB model: {} ---'.format(round(cv.mean(), 3)))\nprint('Standard Deviation: {}'.format(round(cv.std(), 3)))","8aa9c58f":"# Classification report for MNB model\nmnb = MultinomialNB()\nmnb.fit(X_train, y_train)\ny_pred = mnb.predict(X_test)\n\nprint('--- Classification report for MNB model ---')\nprint(classification_report(y_test, y_pred))","81a30a70":"# Confusion matrix of MNB model\ncm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(8,5))\naxis_labels = ['ham', 'spam']\ng = sns.heatmap(data=cm, annot=True, cmap=\"Blues\", xticklabels=axis_labels, yticklabels=axis_labels, fmt='g', cbar_kws={\"shrink\": 0.5})\np = plt.xlabel('Actual values')\np = plt.ylabel('Predicted values')\np = plt.title('--- Confusion Matrix for Multinomial Naive Bayes model ---')","3c85f8b5":"# Fitting Random Forest to the Training set\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ncv = cross_val_score(dt, X, y, scoring='f1', cv=10)\nprint('--- Average F1-Score for Decision Tree model: {} ---'.format(round(cv.mean(), 3)))\nprint('Standard Deviation: {}'.format(round(cv.std(), 3)))","33f68d58":"# Classification report for Decision Tree model\ndt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\n\nprint('--- Classification report for Decision Tree model ---')\nprint(classification_report(y_test, y_pred))","29f3f6d6":"# Confusion matrix of Decision Tree model\ncm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(8,5))\naxis_labels = ['ham', 'spam']\ng = sns.heatmap(data=cm, annot=True, cmap=\"Blues\", xticklabels=axis_labels, yticklabels=axis_labels, fmt='g', cbar_kws={\"shrink\": 0.5})\np = plt.xlabel('Actual values')\np = plt.ylabel('Predicted values')\np = plt.title('--- Confusion Matrix for Decision Tree model ---')","33baff83":"# Fitting Random Forest to the Training set\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=10)\ncv = cross_val_score(rf, X, y, scoring='f1', cv=10)\nprint('--- Average F1-Score for Random Forest model: {} ---'.format(round(cv.mean(), 3)))\nprint('Standard Deviation: {}'.format(round(cv.std(), 3)))","a210c3bf":"# Classification report for Random Forest model\nrf = RandomForestClassifier(n_estimators=20)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\n\nprint('--- Classification report for Random Forest model ---')\nprint(classification_report(y_test, y_pred))","76c55fbc":"# Confusion matrix of Random Forest model\ncm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(8,5))\naxis_labels = ['ham', 'spam']\ng = sns.heatmap(data=cm, annot=True, cmap=\"Blues\", xticklabels=axis_labels, yticklabels=axis_labels, fmt='g', cbar_kws={\"shrink\": 0.5})\np = plt.xlabel('Actual values')\np = plt.ylabel('Predicted values')\np = plt.title('--- Confusion Matrix for Random Forest model ---')","2c0e52a7":"# Fitting Decision Tree and MNB to VotingClassifier\nfrom sklearn.ensemble import VotingClassifier\nvc = VotingClassifier([('decision_tree', dt), ('m_naive_bayes', mnb)], weights=[2,1])\ncv = cross_val_score(vc, X, y, cv=10, scoring='f1')\n\nprint('--- Average F1-Score for VotingClassifier model: {} ---'.format(round(cv.mean(), 3)))\nprint('Standard Deviation: {}'.format(round(cv.std(), 3)))","0aff9a3e":"def predict_spam(sample_message):\n  sample_message = re.sub(pattern='[^a-zA-Z]',repl=' ', string = sample_message)\n  sample_message = sample_message.lower()\n  sample_message_words = sample_message.split()\n  sample_message_words = [word for word in sample_message_words if not word in set(stopwords.words('english'))]\n  final_message = [wnl.lemmatize(word) for word in sample_message_words]\n  final_message = ' '.join(final_message)\n\n  temp = tfidf.transform([final_message]).toarray()\n  return rf.predict(temp)","5223f3f4":"# Prediction 1 - Lottery text message\nsample_message = 'IMPORTANT - You could be entitled up to \u00a33,160 in compensation from mis-sold PPI on a credit card or loan. Please reply PPI for info or STOP to opt out.'\n\nif predict_spam(sample_message):\n  print('Gotcha! This is a SPAM message.')\nelse:\n  print('This is a HAM (normal) message.')","ba903cd9":"# Prediction 2 - Casual text chat\nsample_message = 'Came to think of it. I have never got a spam message before.'\n\nif predict_spam(sample_message):\n  print('Gotcha! This is a SPAM message.')\nelse:\n  print('This is a HAM (normal) message.')","1543ef41":"# Prediction 3 - Transaction confirmation text message\nsample_message = 'Sam, your rent payment for Jan 19 has been received. $1,300 will be drafted from your Wells Fargo Account ******0000 within 24-48 business hours. Thank you!'\n\nif predict_spam(sample_message):\n  print('Gotcha! This is a SPAM message.')\nelse:\n  print('This is a HAM (normal) message.')","c7d25431":"# Predicting values 4 - Feedback message\nsample_message = 'Tammy, thanks for choosing Carl\u2019s Car Wash for your express polish. We would love to hear your thoughts on the service. Feel free to text back with any feedback. Safe driving!'\n\nif predict_spam(sample_message):\n  print('Gotcha! This is a SPAM message.')\nelse:\n  print('This is a HAM (normal) message.')","2f44dee6":"## Insight:\n ### It is evident that **most of the Spam messages contain numbers,** and **majority of the Ham messages donot contain numbers.**","2c581a65":"## Insight: \n### Almost 1\/3 of Spam messages contain currency symbols, and currency symbols are rarely used in Ham messages.","7c30d331":"![spam.jpg?resize=271%2C271&ssl=1](https:\/\/i0.wp.com\/stochasticcoder.com\/wp-content\/uploads\/2020\/03\/spam.jpg?resize=271%2C271&ssl=1)","8f625306":"![images?q=tbn:ANd9GcQLyFK5i_AY-M_bD4IqV-qe97-AbouB3kJA1JQVAo2of87vVjqGHpwzCjpBCG29QGBocGo&usqp=CAU](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQLyFK5i_AY-M_bD4IqV-qe97-AbouB3kJA1JQVAo2of87vVjqGHpwzCjpBCG29QGBocGo&usqp=CAU)","6513cd06":"# Loading the dataset","6f576186":"## Note: \n### No NaN values in the dataset.","b5b188f7":"# Making Predictions","a244783d":"## Note:\n### Voting algorithm did not out-perform Random Forest algorithm, hence **Random Forest algorithm is selected for predicting the results of this problem statement.**\n","b110b223":"# Feature Engineering\n   ## Handling imbalanced dataset using Oversampling\n   ## Creating new features e.g. word_count, contains_currency_symbol, contains_numbers, etc.\n\n","a0ac786f":"## Note: \n### Decision Tree & MNB algorithms are selected and fed to Voting algorithm to increase the F1-Score!","11d4ca95":"![images?q=tbn:ANd9GcQLyFK5i_AY-M_bD4IqV-qe97-AbouB3kJA1JQVAo2of87vVjqGHpwzCjpBCG29QGBocGo&usqp=CAU](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQLyFK5i_AY-M_bD4IqV-qe97-AbouB3kJA1JQVAo2of87vVjqGHpwzCjpBCG29QGBocGo&usqp=CAU)","c8cf1e76":"## Insight:\n### Spam messages word_count fall in the range of **15-30 words**, whereas majority of the **Ham messages** fall in the range of **below 25 words**.","1161af22":"![spam.jpg?resize=271%2C271&ssl=1](https:\/\/i0.wp.com\/stochasticcoder.com\/wp-content\/uploads\/2020\/03\/spam.jpg?resize=271%2C271&ssl=1)","0d7ffd15":"![1*nBgCTU_hAVG00eYkcRf6Mw.png](https:\/\/miro.medium.com\/max\/1105\/1*nBgCTU_hAVG00eYkcRf6Mw.png)","a8aa0ddc":"![1*CbzCcP3XFtYVJmWowZLugQ.png](https:\/\/miro.medium.com\/max\/3148\/1*CbzCcP3XFtYVJmWowZLugQ.png)","f39259bd":"# Model Building & Evaluation\n## **Metric: F1-Score**\n\n ## Multiomail Naive Bayes: 0.943\n ## Decision Tree: 0.98\n ## **Random Forest (Ensemble): 0.994**\n ## Voting (Multinomial Naive Bayes + Decision Tree): 0.98\n","8339a795":"# EDA\n ##  Exploring NaN values in dataset\n ##  Plotting countplots for Spam vs. Ham\n\n","3b97a7e6":"# Data Cleaning\n ## Removing special character and numbers using regular expression\n ## Converting the entire sms into lower case\n ## Tokenizing the sms by words\n ## Removing the stop words\n ## Lemmatizing the words\n ## Joining the lemmatized words\n ## Building a corpus of messages","5ea49684":"# Importing Library","4ae4dbdc":"# \u26a0\ufe0f Spam SMS Classification-NLP\n![spam-sms-banner.png](https:\/\/github.com\/anujvyas\/Natural-Language-Processing-Projects\/raw\/master\/Spam%20SMS%20Classification\/readme-resources\/spam-sms-banner.png)","bec3d279":"## Insight:\n### From the above countplot, it is evident that the dataset is imbalanced."}}