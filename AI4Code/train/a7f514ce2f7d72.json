{"cell_type":{"2701e11f":"code","47d226ae":"code","66310b6b":"code","fb2e5435":"code","5c540ce5":"code","253f1208":"code","fff93e1a":"code","5ad08565":"code","28e4d8b1":"code","32c080af":"code","9e3e0138":"code","c8e68153":"code","57ebb6f7":"code","0e606a53":"code","6312c144":"code","671cc0f4":"code","be7c4895":"code","06206f04":"code","6f0afcee":"code","39c55e29":"code","23f0f059":"code","6d36948c":"code","f5e5811b":"code","ffa0059a":"code","0d41d514":"code","ac49fac0":"code","00955978":"code","8254266f":"code","a2640bce":"markdown","18649de1":"markdown","8edda0a0":"markdown","8d968234":"markdown","b644a72a":"markdown","200c094c":"markdown","d3f66c3f":"markdown","71d0afad":"markdown","a86611b0":"markdown","cc0ebcb1":"markdown","85aeb8ca":"markdown","6ebad77c":"markdown","371a03b1":"markdown","d913e90e":"markdown","1cf44a96":"markdown","5c5d2d9c":"markdown","b0149882":"markdown","b9536d91":"markdown","d820348c":"markdown"},"source":{"2701e11f":"from kaggle.competitions import nflrush\nimport pandas as pd\nimport numpy as np\nimport gc\n\nimport seaborn as sns; sns.set()\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","47d226ae":"train_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","66310b6b":"env = nflrush.make_env()\niter_test = env.iter_test()\n\nfor idx, (test_df_tmp, sample_prediction_df) in enumerate(iter_test):\n    if idx == 0:\n        test_df = test_df_tmp.copy()\n    else:\n        test_df = pd.concat([test_df, test_df_tmp])\n        \n    env.predict(sample_prediction_df)","fb2e5435":"train_df[train_df.PlayId == 20170907000118][['PlayId','TimeHandoff','Team','DisplayName','NflId','NflIdRusher','X','Y','Yards']]","5c540ce5":"def convert_dt(df):\n\n    df[\"TimeHandoff\"] = pd.to_datetime(df.TimeHandoff).dt.tz_localize(None)\n    df[\"TimeSnap\"] = pd.to_datetime(df.TimeSnap).dt.tz_localize(None)\n    \n    return df","253f1208":"train_df = convert_dt(train_df)\ntest_df = convert_dt(test_df)","fff93e1a":"train_df['TimeHandoff'].hist(bins=100, figsize=(13, 4),\\\n                             label='train', xrot=45)\ntest_df['TimeHandoff'].hist(bins=8, figsize=(13, 4),\\\n                            label='test', xrot=45)\nplt.title('Train\/Test Data Period', fontsize=14)\nplt.legend(loc='upper right', prop={'size': 12})","5ad08565":"def std_cols(df):\n    \n    df['X_std'] = df.apply(lambda x: x.X if x.PlayDirection == 'right'\\\n                           else 120-x.X, axis=1) \n    df['Y_std'] = df.apply(lambda x: x.Y if x.PlayDirection == 'right'\\\n                           else 53.3-x.Y, axis=1) \n    df['Orientation_std'] = df.apply(lambda x: x.Orientation \\\n                                     if x.PlayDirection == 'right' \\\n                                     else x.Orientation + 180, axis=1)\n    df['YardLine_std'] = df.apply(lambda x: x.YardLine + 10 \\\n                                  if (x.PlayDirection == 'right') & \\\n                                  (x.FieldPosition == x.PossessionTeam) \\\n                                  | (x.PlayDirection == 'left') & \\\n                                  (x.FieldPosition == x.PossessionTeam) \\\n                                  else 60 + (50-x.YardLine), axis=1)\n    df['FieldPosition_std'] = df.apply(lambda x: 'left' \\\n                                       if x.FieldPosition == \\\n                                       x.PossessionTeam \\\n                                       else 'right', axis=1) \n    \n    df['OffenceDefence'] = \\\n    df.apply(lambda x: \"offence\" if ((x.Team == 'home') \\\n                                     & (x.PossessionTeam == \\\n                                        x.HomeTeamAbbr)) | \\\n                                    ((x.Team == 'away') & \\\n                                     (x.PossessionTeam == \\\n                                      x.VisitorTeamAbbr)) \\\n                                    else \"defence\", axis=1)\n    \n    df.drop(['X', 'Y', 'Orientation', 'YardLine', 'FieldPosition'], \\\n            axis=1, inplace=True)\n    \n    return df","28e4d8b1":"train_df = std_cols(train_df)\ntest_df = std_cols(test_df)","32c080af":"plays = train_df.PlayId.unique()[:8]\n\nfig, axes = plt.subplots(4,2, figsize=(14,18))\n\nfor i, ax in enumerate(axes.flatten()):\n    \n    play = train_df[train_df.PlayId == plays[i]].copy()\n    play['OffenceDefence'][play['NflId'] == \\\n                           play['NflIdRusher'].values[0]] \\\n                            = \"rusher\"\n    play.sort_values(by=['OffenceDefence'], inplace=True)\n    \n    ax.set_xlim(0,120)\n    ax.set_ylim(0,53.3)\n    \n    YardLine = play.YardLine_std.values[10]\n    ax.plot([YardLine, YardLine], [0, 53.3], \\\n            linestyle='--', color=\"gray\")\n    \n    sns.scatterplot(x=\"X_std\", y=\"Y_std\", \\\n                    hue=\"OffenceDefence\", data=play, ax=ax)\n\n    ax.set_title('Yards: %d' % play['Yards'].values[0], fontsize=14)\n    plt.legend(loc='upper right', prop={'size': 12})\n    \n    for player in play.iterrows():\n        deg=player[1].Orientation_std\n        sp=player[1].S\n        # sp =100\n        x_pos = player[1].X_std\n        y_pos = player[1].Y_std\n        x_direct = np.cos(deg\/180*np.pi) * sp\n        y_direct = np.sin(deg\/180*np.pi) * sp\n#         x_direct = np.cos((deg+90)\/180*np.pi) * sp  # does not look correct\n#         y_direct = np.sin((deg+90)\/180*np.pi) * sp\n        col = \"g\" if player[1].OffenceDefence == \"rusher\" \\\n    else \"r\" if player[1].OffenceDefence == \"offence\" else \"b\"\n\n        ax.quiver(x_pos,y_pos,x_direct,y_direct, scale=50, color=col)\n\n    fig.tight_layout()","9e3e0138":"def add_cols(df):\n    \n    df[\"DefenceTeam\"] = \\\n    df.apply(lambda x: x.HomeTeamAbbr \\\n             if x.HomeTeamAbbr != x.PossessionTeam \\\n             else x.VisitorTeamAbbr, axis=1)\n    df[\"OffenceisHome\"] = \\\n    df.apply(lambda x: True if x.HomeTeamAbbr == \\\n             x.PossessionTeam else False, axis=1)\n    df[\"HandoffSnapDiff\"] = \\\n    (df.TimeHandoff - df.TimeSnap).dt.seconds\n    df[\"OffenceScoreBeforePlay\"] = \\\n    df.apply(lambda x: x.HomeScoreBeforePlay \\\n             if x.HomeTeamAbbr == x.PossessionTeam \\\n             else x.VisitorScoreBeforePlay, axis=1)\n    df[\"DefenceScoreBeforePlay\"] = \\\n    df.apply(lambda x: x.HomeScoreBeforePlay \\\n             if x.HomeTeamAbbr != x.PossessionTeam \\\n             else x.VisitorScoreBeforePlay, axis=1)\n    df[\"PlayerHeight\"] = \\\n    df.PlayerHeight.apply(lambda x: int(x.split('-')[0]) \\\n                          + int(x.split('-')[1]) \/12)\n    df[\"PlayerBirthDate\"] = pd.to_datetime(df.PlayerBirthDate)\n    df['age'] = ((df.TimeHandoff.dt.date - \\\n                  df.PlayerBirthDate.dt.date).dt.days \/365.25)\n    \n    return df","c8e68153":"train_df = add_cols(train_df)\ntest_df = add_cols(test_df)","57ebb6f7":"uniq_cnt=[];cols=[]\n\nfor col in train_df.columns:\n    if col != 'PlayId':\n        cols.append(col)\n        uniq_cnt.append(train_df[['PlayId',col]]\\\n                        .drop_duplicates(subset=['PlayId',col])\\\n                        ['PlayId'].value_counts()\\\n                        .value_counts(sort=False).index[-1])\n    \nuniq_cnt_df = pd.DataFrame({'columns':cols, \\\n                            'uniq_cnt_per_play': uniq_cnt})\nplt.figure(figsize=(15,5))\nax = sns.barplot(x='columns', y=\"uniq_cnt_per_play\", \\\n                 data=uniq_cnt_df)\nplt.title('Unique value counts per play by columns', \\\n          fontsize=14)\n\nfor item in ax.get_xticklabels():\n    item.set_rotation(90)","0e606a53":"uniq_cols = ['PossessionTeam', 'OffenseFormation', 'OffensePersonnel',\\\n             'DefensePersonnel', 'Stadium', 'Location', 'StadiumType',\\\n             'Turf', 'GameWeather', 'WindSpeed', 'WindDirection', \\\n             'DefenceTeam', 'OffenceisHome', 'HandoffSnapDiff', \\\n             'OffenceScoreBeforePlay', 'DefenceScoreBeforePlay', \\\n             'Dis', 'Season', 'YardLine_std', 'Quarter', 'Down', \\\n             'Distance', 'DefendersInTheBox', 'Temperature', \\\n             'Humidity', 'FieldPosition_std', 'PlayId']","6312c144":"X_train = train_df[uniq_cols+['Yards']]\\\n.drop_duplicates(subset='PlayId').set_index('PlayId')\nX_test = test_df[uniq_cols]\\\n.drop_duplicates(subset='PlayId').set_index('PlayId')\n\ny_train = X_train['Yards']\nX_train.drop(['Yards'], axis=1, inplace=True)","671cc0f4":"agg_cols = ['X_std', 'Y_std', 'S', 'A', 'age', \\\n            'PlayerWeight', 'PlayerHeight']\nX_train = X_train.join(train_df.groupby('PlayId')[agg_cols].mean())\nX_test = X_test.join(test_df.groupby('PlayId')[agg_cols].mean())","be7c4895":"def create_rusher_cols(df, X):\n    \n    Rusher_df = df[['PlayId', 'Position', 'X_std', 'Y_std', 'S', \\\n                    'A', 'PlayerCollegeName' ,'age', 'PlayerHeight',\\\n                    'Orientation_std', 'Dir']][df['NflId'] == \\\n                                               df['NflIdRusher']]\n\n    for col in Rusher_df.columns:\n        if col != 'PlayId':\n            Rusher_df.rename(columns={col: col + '_rusher'},\\\n                             inplace=True)\n\n    Rusher_df.set_index('PlayId', inplace=True)\n    X = X.join(Rusher_df)\n    \n    return X","06206f04":"X_train = create_rusher_cols(train_df, X_train)\nX_test = create_rusher_cols(test_df, X_test)","6f0afcee":"def create_dist_cols(df, X):\n    \n    dist_df = pd.DataFrame()\n    for play in df.groupby('PlayId'):\n        play_df = play[1]\n        rusher = play_df[play_df.NflId == play_df.NflIdRusher]\n        dist = play_df[play_df['OffenceDefence'] == 'defence']\\\n        .apply(lambda x: np.sqrt((x.X_std - rusher.X_std)**2 \\\n                                 + (x.Y_std - rusher.Y_std)**2), \\\n               axis=1).values\n        dist_df.loc[play[0], \"AveDistToDef\"] = dist.mean()\n        dist_df.loc[play[0], \"MinDistToDef\"] = dist.min()\n        dist.sort()\n        dist_df.loc[play[0], \"AveDistToNearest3Def\"] \\\n        = np.mean(dist[:3])\n\n    X = X.join(dist_df)\n\n    return X","39c55e29":"X_train = create_dist_cols(train_df, X_train)\nX_test = create_dist_cols(test_df, X_test)","23f0f059":"pd.options.display.float_format = '{:.4f}'.format\ncorr = np.abs(X_train.corrwith(y_train)).sort_values(ascending=False)\nplt.figure(figsize=(8,15))\nax = sns.barplot(x=corr[:40], y=corr.index[:40])\nplt.title('Correlation coefficient on Yards and columns', fontsize=14)","6d36948c":"def plot_num_col(var):\n    \n    fig, ax = plt.subplots(1, 2, figsize=(12,5))\n    \n    sns.regplot(x=X_train[var], y=y_train, ax=ax[0], scatter_kws={'s':5})\n    ax[0].set_title(\"%s vs Yards in Train-set\" % var, size=14)\n    \n    sns.distplot(X_train[var].dropna(), label=\"train\", ax=ax[1])\n    sns.distplot(X_test[var].dropna(), label=\"test\", ax=ax[1])\n    if var in ylims:\n        ax[1].set_ylim(0,ylims[var])\n    fig.tight_layout()\n    ax[1].legend(prop={'size': 12})\n    ax[1].set_title(\"Train vs Test by %s Density Plot\" % var, size=14)","f5e5811b":"ylims = {'A_rusher':0.6, 'AveDistToDef': 0.3,'DefendersInTheBox': 1, 'YardLine_std': 0.025,\n       'X_std_rusher': 0.025, 'X_std': 0.025, 'S_rusher': 0.6, 'PlayerWeight':0.1, 'Distance':0.4, 'A':1.5, 'PlayerHeight':16}","ffa0059a":"for col in corr.index[:10]:\n    plot_num_col(col)","0d41d514":"import statsmodels.api as sm\nfrom statsmodels.formula.api import ols\n\nf=[];p=[]\n\ncat_cols = list()\nfor idx, col in enumerate(X_train.dtypes):\n    if col == 'object':\n        cat_cols.append(X_train.dtypes.index[idx])\n\nfor col in cat_cols:\n    \n    indat = pd.DataFrame({'Yards': y_train, 'cat_col': X_train[col]})\n    model = ols('Yards ~ C(cat_col)', data=indat).fit()\n    anova_table = sm.stats.anova_lm(model, typ=2)\n    f.append(anova_table.iloc[0, 2])\n    p.append(anova_table.iloc[0, 3])\n","ac49fac0":"anova = pd.DataFrame({'column': cat_cols, 'F': f, 'p':p})\nanova = anova.sort_values(by=['F'], ascending=False)\\\n.reset_index(drop=True)\n\nplt.figure(figsize=(8,8))\nax = sns.barplot(x=anova.F, y=anova.column)\nplt.title('ANOVA F-values on Yars', fontsize=14)","00955978":"def plot_cat_col(var):\n    \n    fig, ax = plt.subplots(1, 2, figsize=(15,5))\n    \n    indat = pd.DataFrame({'Yards': y_train, '%s' % var: X_train[var]})\n    means = indat.groupby(['%s' % var])['Yards'].mean()\\\n    .sort_values(ascending=False)\n    if len(means) > 20:\n        means = means.iloc[:20]\n    sns.barplot(x=means.index, y=means, ax=ax[0])\n\n    ax[0].set_title(\"Average Yards by %s\" % var, size=14)\n    for item in ax[0].get_xticklabels():\n        item.set_rotation(90)\n    \n    var_dist_trn = X_train[var].value_counts()\n    var_dist_trn = var_dist_trn \/ len(X_train)\n    var_dist_tst = X_test[var].value_counts()\n    var_dist_tst = var_dist_tst \/ len(X_test)\n\n    df_join = var_dist_trn.to_frame().join(var_dist_tst.to_frame(), \\\n                                           lsuffix='_1', rsuffix='_2')\\\n    .reset_index()\n    df_join.columns = [var, 'train', 'test']\n    df_join = df_join[df_join[var].isin(means.index) ]\n    df_join = pd.melt(df_join, id_vars=var, var_name=\"data\", \\\n                      value_name=\"distribution\")\n    df_join.sort_values(by=[\"data\",\"distribution\"], \\\n                        ascending=[True,False], inplace=True)\n\n    sns.barplot(x=var, y=\"distribution\", hue=\"data\", \\\n                data=df_join, order= means.index, ax=ax[1])\n    ax[1].legend(loc='upper right', prop={'size': 12})\n    ax[1].set_title(\"Train vs Test  Distribution by %s\" % var, size=14)\n    for item in ax[1].get_xticklabels():\n        item.set_rotation(90)","8254266f":"for col in anova['column'][:10]:\n    plot_cat_col(col)","a2640bce":"As some columns only have single values in 22 rows and some other columns have different values across those rows, we need different strategies on different columns. The picture below shows unique counts per play across the columns.","18649de1":"We are loading training data and testing data first. We will utilize the API provided by Kaggle to get the test data.","8edda0a0":"We need to summarize 22 rows from a single play into a single row to predict Yards corresponding that play. First I'm adding some additional features.","8d968234":"That's it! Hope this notebook can be helpful for you.","b644a72a":"# One-way ANOVA on Categorical Features against Yards\nTo check the correlation between categorical features and Yards, I'm calculating one-way ANOVA here. ","200c094c":"### Calculating distances between rusher and defences","d3f66c3f":"# Correlation between Yards and numeric features","71d0afad":"In the pictures above, offence directions are always right directions. Arrows are orientation and a length of an arrow means speed of that player.  ","a86611b0":"The training data has 2,3171 plays and each play data has 22 rows corresponding to 22 players in the game from two different teams. Those data have tracking information (X, Y coordinate, etc) at the moment of handoffs being made:","cc0ebcb1":"## Plotting Top 10 Correlated Features\n\nThe left pictures show Yards vs. each feature and the right pictures show train\/test distributions on those features.","85aeb8ca":"# NFL EDA on Train & Test \/ FE, Correlation, ANOVA\nThis notebook explores the training and the testing data on the following contents.\n\n## Content\n* Train\/Test data period\n* Play Visualization\n* Feature Engineering & Data Manipulation\n* Correlation between Yards and numeric features\n    * Plotting Top 10 Correlated Features\n* One-way ANOVA on Categorical Features against Yards\n    * Plotting Most Significant 10 Features","6ebad77c":"# Train\/Test data period","371a03b1":"# Feature Engineering & Data Manipulation","d913e90e":"# Play Visualization\nI'm applying the play data standarization scheme which the host explained here: https:\/\/www.kaggle.com\/statsbymichaellopez\/nfl-tracking-initial-wrangling-voronoi-areas. It makes offence directions to be right direction in every play.","1cf44a96":"### keeping unique per play columns as is","5c5d2d9c":"### Plotting Most Significant 10 Features\nThe left pictures show average Yards on each categories and the right pictures show train\/test distributions on those features.","b0149882":"### Taking average on numeric columns","b9536d91":"We can see the training data is made from the last two seasons (every NFL season starts from September and ends in December or early January). The test-set is the first two months of this season. Keep in mind this test data is just a temporal one and the actual test-set will be December 2019.","d820348c":"### Creating features specific to rusher"}}