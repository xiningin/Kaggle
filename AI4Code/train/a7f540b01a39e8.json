{"cell_type":{"631fc111":"code","f5f81291":"code","e660557f":"code","f1972597":"code","5868bc3d":"code","46354adf":"code","4f05d7d1":"code","aae89d5d":"code","82d04178":"code","1b300ebb":"code","bc320daf":"code","0bf7d08a":"markdown"},"source":{"631fc111":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz","f5f81291":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\nverify_data = pd.read_csv('..\/input\/titanic\/test.csv')","e660557f":"combine = ['train_data','verify_data']\nfor i in combine:\n    for j in eval(i).columns:\n        if eval(i)[j].isna().any():\n            print(f'{i}\u6570\u636e\u7684{j}\u5217\u5b58\u5728\u7f3a\u5931\u503c')\n#\u53ef\u77e5train_data\u7684Age\u3001Cabin\u3001Embarked\u4e09\u5217\u5b58\u5728\u7f3a\u5931\u503c\n#verify_data\u7684Age\u3001Fare\u3001Cabin\u4e09\u5217\u5b58\u5728\u7f3a\u5931\u503c","f1972597":"verify_PassengerId = verify_data['PassengerId']","5868bc3d":"for i in combine:\n    eval(i).drop(columns=['PassengerId','Name','Ticket','Cabin'],inplace=True)\n#\u7528\u4e2d\u4f4d\u6570\u586b\u5145Age\u7684\u7f3a\u5931\u503c\nfor i in combine:\n    eval(i)['Age'].fillna(eval(i)['Age'].dropna().median(),inplace=True)\n#\u7528\u4f17\u6570\u586b\u5145Embarked\u7684\u7f3a\u5931\u503c\nfor i in combine:\n    eval(i)['Embarked'].fillna(eval(i)['Embarked'].dropna().mode()[0],inplace=True)\n#\u7528\u4e2d\u4f4d\u6570\u586b\u5145Fare\u7684\u7f3a\u5931\u503c\nfor i in combine:\n    eval(i)['Fare'].fillna(eval(i)['Fare'].dropna().median(),inplace=True)\n","46354adf":"#\u5c06sex\u6620\u5c04\u4e3a\u6570\u5b57\uff0cmale\u4e3a0\uff0cfemale\u4e3a1\nfor i in combine:\n    sex = []\n    for j in eval(i)['Sex']:\n        sex.append(0 if j == 'male' else 1)\n    eval(i)['Sex'] = sex\n#\u5c06Embarked\u6620\u5c04\u4e3a\u6570\u5b57\uff0cS\u4e3a0\uff0cC\u4e3a1\uff0cQ\u4e3a2\nfor i in combine:\n    eval(i)['Embarked'] = eval(i)['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n","4f05d7d1":"#\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\ntrain,test = train_test_split(train_data,test_size=0.3,random_state=42)\ntrain_y = train['Survived'].values\ntrain_x = train.iloc[:,1:].values  \ntest_x = test.iloc[:,1:].values\ntest_y = test['Survived'].values","aae89d5d":"#\u5229\u7528\u7f51\u683c\u5316\u641c\u7d22\u5408\u9002\u7684\u53c2\u6570\nbest_acc_rate = 0.5 \nfor depth in range(2,30):\n    for msl in range(1,5):\n        for c in ['gini','entropy']:\n            tree = DecisionTreeClassifier(criterion=c,\n                                          max_depth=depth,\n                                          min_samples_leaf=msl)\n            tree.fit(train_x,train_y)\n            pred_y = tree.predict(test_x)\n            result = np.column_stack((test_y,pred_y))\n            count = 0\n            for (i,j) in result:\n                if i == j:\n                    count += 1\n            acc_rate = count\/len(result)\n            if acc_rate>best_acc_rate:\n                print(f'\u6b63\u786e\u7387\u4e3a{acc_rate}')\n                best_tree = tree\n                best_acc_rate=acc_rate\n                best_depth = depth\n                best_samples_leaf = msl\n                best_criterion = c\nprint(f'\u6700\u4f73\u6b63\u786e\u7387\u4e3a{best_acc_rate},\u6b64\u65f6\u7684\u6700\u5927\u6811\u6df1\u5ea6\u4e3a{best_depth},\u6700\u5c0f\u53f6\u8282\u70b9\u6570\u4e3a{best_samples_leaf},\u6700\u4f73\u5224\u522b\u6807\u51c6\u4e3a{best_criterion}')\n","82d04178":"dot_data = export_graphviz(best_tree,\n                out_file='tree.dot',\n                feature_names=train_data.columns[1:],\n                class_names='Survived',\n                rounded=True,\n                filled=True)\n#\u751f\u6210\u51b3\u7b56\u6811\u7684\u53ef\u89c6\u5316\n#\u5728cmd\u547d\u4ee4\u884c\u4e2d\u8f93\u5165dot -Tpng tree.dot -o tree.png \u53ef\u5728\u5f53\u524d\u8def\u5f84\u751f\u6210png\u683c\u5f0f\u56fe\u5f62","1b300ebb":"#\u5e94\u7528\u6a21\u578b\u5bf9\u9a8c\u8bc1\u96c6\u8fdb\u884c\u9a8c\u8bc1\nverify_x = verify_data.values\nYhat = best_tree.predict(verify_x)","bc320daf":"#\u521b\u5efa\u63d0\u4ea4\u6587\u4ef6\nSubmission = pd.DataFrame({'PassengerId':verify_PassengerId,\n                           'Survived':Yhat})\nSubmission.to_csv('submission.csv', index=False)","0bf7d08a":"![tree.png](attachment:tree.png)"}}