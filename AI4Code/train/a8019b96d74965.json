{"cell_type":{"5acedb20":"code","ae1ff9ac":"code","a793a63c":"code","bcfc2cba":"code","ce9d3518":"code","7a2cc088":"code","4461acf6":"code","1a0f520c":"markdown","a320e89e":"markdown","fb45864c":"markdown","4a537067":"markdown","80a32c67":"markdown","6f36561a":"markdown","3ff56e43":"markdown"},"source":{"5acedb20":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split","ae1ff9ac":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf","a793a63c":"# Id is irrelevant to the model, it's just a metadata\ndf = df.drop(['id'], axis=1) \n\n# Removing rows with invalid numerical values\ndf = df.dropna(subset=['bmi', 'avg_glucose_level', 'stroke', 'age'], axis=0) \n\n# Transforming text columns into numerical labels\ndf_text_cleared = df[['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']].apply(LabelEncoder().fit_transform) \ndf = df.drop(['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status'], axis=1)\n\ndf_result = pd.concat([df, df_text_cleared], axis=1)\ndf_result ","bcfc2cba":"X = df_result[df_result.columns].drop(['stroke'], axis=1)\ny = df_result['stroke']","ce9d3518":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, shuffle=True)","7a2cc088":"model = RandomForestClassifier(max_depth=15, criterion='entropy')\nmodel.fit(X_train, y_train)","4461acf6":"result = model.score(X_test, y_test)\nresult","1a0f520c":"# Defining Features and Label","a320e89e":"# Data Cleaning","fb45864c":"# Evaluation","4a537067":"# Loading dataset","80a32c67":"# Splitting dataset for training and evaluation","6f36561a":"# Importing Libraries","3ff56e43":"# Fitting the model"}}