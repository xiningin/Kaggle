{"cell_type":{"82606aba":"code","abdb2069":"code","01ac4477":"code","fed72aad":"code","f5daf1e0":"code","3280ef4d":"code","fb2beee2":"code","480fbfa0":"code","bb96ac07":"code","acc6a2e3":"code","7993d83c":"code","0ec8a63c":"code","9cacb3f2":"code","78acc24c":"code","02edd6d2":"code","9126e8f0":"code","20c709c1":"code","6f5301b2":"code","ec98d9c7":"code","757ac605":"code","f2b48377":"code","24e7c03b":"code","02a69b49":"code","1865f400":"code","8766cca1":"code","e54a5ca6":"code","cc81df3e":"code","7a29af90":"code","06f37ac1":"code","d1e4c344":"code","66f35830":"code","ae2e459f":"code","fac9746d":"code","94f60545":"code","a48a95ec":"code","1853516e":"code","6ca7a2fa":"code","e8a8d24b":"code","37e02192":"code","90ed2ed0":"code","02ec2b29":"code","7826dd85":"code","a2370fca":"code","f0cafabd":"code","44bb361b":"code","1f9a0c7c":"code","b2ac89be":"code","2c48b74c":"code","8121eaf2":"code","c432ddf4":"code","64bb4766":"code","973e15a3":"code","32d4db9e":"code","64c226e0":"code","3e5297ac":"code","25c1f6a8":"code","535a9522":"code","d95162a0":"code","1ebd43e4":"markdown","d61fcd08":"markdown","3c9a7147":"markdown","1a5aaadd":"markdown","d20aa641":"markdown","786cf6df":"markdown","964644c1":"markdown","0c749436":"markdown","17c0d2a2":"markdown","76906cf0":"markdown","a06408e3":"markdown","b6ced7d8":"markdown","255da8ec":"markdown","b52ccda2":"markdown","343bb13c":"markdown","b8db0286":"markdown","285def23":"markdown","0a69d94a":"markdown","b9e72812":"markdown","ac8ec557":"markdown","5505007a":"markdown","b0e77f4b":"markdown","b6936f93":"markdown","0d9223bd":"markdown","5d1c1036":"markdown","3a5d8de8":"markdown","565aaedc":"markdown","9960fbdd":"markdown","5564a381":"markdown","6e19997d":"markdown","1d39d106":"markdown","6467cee6":"markdown","213d72e3":"markdown","c28f2b7f":"markdown","419acccc":"markdown"},"source":{"82606aba":"%matplotlib inline\n\nfrom fastai.imports import *\nfrom fastai.structured import *\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\nfrom sklearn import metrics\nfrom sklearn.tree import _tree\nimport gc\n\nimport warnings\nwarnings.filterwarnings('ignore')","abdb2069":"set_plot_sizes(12, 14, 16)\ngc.collect()","01ac4477":"PATH = \"..\/input\/bluebook-for-bulldozers\/train\/\"\ndf_raw = pd.read_csv(f'{PATH}Train.csv', low_memory=False, parse_dates=[\"saledate\"])\ngc.collect()","fed72aad":"df_raw.head(5)\ngc.collect()","f5daf1e0":"df_raw.SalePrice = np.log(df_raw.SalePrice)\nadd_datepart(df_raw, 'saledate') # Add individual date-associated columns by splitting the date feature\ndf_raw.saleYear.head()\ngc.collect()","3280ef4d":"train_cats(df_raw) # Change the columns containing strings to categorical columns containing codes\ngc.collect()","fb2beee2":"df_raw.UsageBand.cat.categories\ndf_raw.UsageBand.cat.set_categories(['High', 'Medium', 'Low'], ordered=True, inplace=True) # Change the sequence of ordinal category\ndf_raw.UsageBand.cat.codes.value_counts().plot(kind=\"bar\")\ngc.collect()","480fbfa0":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000):\n        with pd.option_context(\"display.max_columns\", 1000):\n            display(df)\n            \ndisplay_all(df_raw.isnull().sum().sort_index()\/len(df_raw))\ngc.collect()","bb96ac07":"os.makedirs('tmp', exist_ok=True)\ndf_raw.to_feather('tmp\/raw')\ngc.collect()","acc6a2e3":"df_raw = pd.read_feather('tmp\/raw')\ngc.collect()","7993d83c":"# Processing Dataframe\ndf, y, nas = proc_df(df_raw, 'SalePrice')\ngc.collect()","0ec8a63c":"df.columns.to_frame().T\ngc.collect()","9cacb3f2":"gc.collect()","78acc24c":"m = RandomForestRegressor(n_jobs=-1)\nm.fit(df, y)\nm.score(df, y)\ngc.collect()","02edd6d2":"def split_vals(a, n): return a[:n].copy(), a[n:].copy()\n\nn_valid = 12000\nn_trn = len(df)-n_valid\nraw_train, raw_valid = split_vals(df_raw, n_trn)\nX_train, X_valid = split_vals(df, n_trn)\ny_train, y_valid = split_vals(y, n_trn)\n\nX_train.shape, y_train.shape, X_valid.shape\n\ngc.collect()","9126e8f0":"def rmse(x, y): return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid), \n           m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'):\n        res.append(m.oob_score_)\n    print(res)\n    \ngc.collect()","20c709c1":"m = RandomForestRegressor(n_jobs=-1)\n%time m.fit(X_train, y_train)\nprint_score(m)\ngc.collect()","6f5301b2":"df_trn, y_trn, nas = proc_df(df_raw, 'SalePrice', subset=30000)\nX_train, _ = split_vals(df_trn, 20000)\ny_train, _ = split_vals(y_trn, 20000)\ngc.collect()","ec98d9c7":"m = RandomForestRegressor(n_jobs=-1)\n%time m.fit(X_train, y_train)\nprint_score(m)\ngc.collect()","757ac605":"m = RandomForestRegressor(n_estimators=1, max_depth=3, bootstrap=False, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)\ngc.collect()","f2b48377":"draw_tree(m.estimators_[0], df_trn, precision=3)\ngc.collect()","24e7c03b":"m = RandomForestRegressor(n_estimators=20, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)\ngc.collect()","02a69b49":"m = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)\ngc.collect()","1865f400":"# https:\/\/www.kaggle.com\/stefanbuenten\/mnist-test-with-fastai\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n\nfrom fastai.imports import *\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *","8766cca1":"# make sure CUDA is available and enabled\nprint(torch.cuda.is_available(), torch.backends.cudnn.enabled)\ngc.collect()","e54a5ca6":"comp_name = \"digit_recognizer\"\ninput_path = \"..\/input\/digit-recognizer\/\"\nwd = \"\/kaggle\/working\/\"\n\ngc.collect()","cc81df3e":"def create_symlnk(src_dir, lnk_name, dst_dir=wd, target_is_dir=False):\n    \"\"\"\n    If symbolic link does not already exist, create it by pointing dst_dir\/lnk_name to src_dir\/lnk_name\n    \"\"\"\n    if not os.path.exists(dst_dir + lnk_name):\n        os.symlink(src=src_dir + lnk_name, dst = dst_dir + lnk_name, target_is_directory=target_is_dir)\n        \ngc.collect()","7a29af90":"create_symlnk(input_path, \"train.csv\")\ncreate_symlnk(input_path, \"test.csv\")\ngc.collect()","06f37ac1":"# load data\ntrain_df = pd.read_csv(f\"{wd}train.csv\")\ntest_df = pd.read_csv(f\"{wd}test.csv\")\ngc.collect()","d1e4c344":"train_df.head()\ngc.collect()","66f35830":"print(train_df.shape, test_df.shape)\ngc.collect()","ae2e459f":"# create validation dataset\nval_df = train_df.sample(frac=0.2, random_state=1337)\nval_df.shape\ngc.collect()","fac9746d":"# remove validation data from train dataset\ntrain_df = train_df.drop(val_df.index)\ntrain_df.shape\ngc.collect()","94f60545":"# separate labels from data\nY_train = train_df[\"label\"]\nY_valid = val_df[\"label\"]\nX_train = train_df.drop(\"label\", axis=1)\nX_valid = val_df.drop(\"label\", axis=1)\ngc.collect()","a48a95ec":"print(X_train.shape, X_valid.shape)\nprint(Y_train.shape, Y_valid.shape)\ngc.collect()","1853516e":"# Creamos un grid de 3x3 imagenes para visualizar el aspecto de los digitos\nfig1, ax1 = plt.subplots(1,15, figsize=(15,10))\nfor i in range(0, 9):\n    plt.subplot(331 + i)\n    plt.imshow(X_train.iloc[i,:].values.reshape(28,28), cmap='Oranges')\n\ngc.collect()","6ca7a2fa":"#Helping Function\ndef reshape_img(matrix):\n    \"\"\"\n    Reshape an existing 2D pandas.dataframe into 3D-numpy.ndarray\n    \"\"\"\n    try:\n        return matrix.values.reshape(-1, 28, 28)\n    except AttributeError as e:\n        print(e)\n        \ndef add_color_channel(matrix):\n    \"\"\"\n    Add missing color channels to previously reshaped image\n    \"\"\"\n    matrix = np.stack((matrix, ) *3, axis = -1)\n    return matrix\n\ndef convert_ndarry(matrix):\n    \"\"\"\n    Convert pandas.series into numpy.ndarray\n    \"\"\"\n    try:\n        return matrix.values.flatten()\n    except AttributeError as e:\n        print(e)\n\ngc.collect()","e8a8d24b":"# reshape data and add color channels\nX_train = reshape_img(X_train)\nX_train = add_color_channel(X_train)\nX_valid = reshape_img(X_valid)\nX_valid = add_color_channel(X_valid)\ntest_df = reshape_img(test_df)\ntest_df = add_color_channel(test_df)\n\n# convert y_train and y_valid into proper numpy.ndarray\nY_train = convert_ndarry(Y_train)\nY_valid = convert_ndarry(Y_valid)\ngc.collect()","37e02192":"# run sanity checks\npreprocessed_data = [X_train, Y_train, X_valid, Y_valid, test_df]\nprint([e.shape for e in preprocessed_data])\ngc.collect()","90ed2ed0":"# define architecture\narch = resnet50\nsz = 28\nclasses = np.unique(Y_train)\ngc.collect()","02ec2b29":"data = ImageClassifierData.from_arrays(path=wd, \n                                       trn=(X_train, Y_train),\n                                       val=(X_valid, Y_valid),\n                                       classes=Y_train,\n                                       test=test_df,\n                                       tfms=tfms_from_model(arch, sz))\ngc.collect()","7826dd85":"# run learner with precompute enabled\nlearn = ConvLearner.pretrained(arch, data, precompute=True)\n\n# find optimal learning rate\nlrf = learn.lr_find()\n\n# plot loss vs. learning rate\nlearn.sched.plot()\ngc.collect()","a2370fca":"# fit learner\n%time learn.fit(1e-2, 2)\ngc.collect()","f0cafabd":"# save model\nlearn.save(\"28_lastlayer\")\n\n# disable precompute and unfreeze layers\nlearn.precompute=False\nlearn.unfreeze()\n\n# define differential learning rates\nlr = np.array([0.001, 0.0075, 0.01])\ngc.collect()","44bb361b":"# retrain full model\n%time learn.fit(lr, 3, cycle_len=1, cycle_mult=2)\ngc.collect()","1f9a0c7c":"%%time\n# get accuracy for validation set\nlog_preds, y = learn.TTA()\nprobs = np.mean(np.exp(log_preds), 0)\nprint(\"Accuracy: \",accuracy_np(probs, y))\ngc.collect()","b2ac89be":"# predict on test set\n%time log_preds_test, y_test = learn.TTA(is_test=True)\nprobs_test = np.mean(np.exp(log_preds_test), 0)\nprobs_test.shape\ngc.collect()","2c48b74c":"# create dataframe from probabilities\ndf = pd.DataFrame(probs_test)\n# increase index by 1 to obtain proper ImageIDs\ndf.index += 1\n# create new colum containing label with highest probability for each digit\ndf = df.assign(Label = df.values.argmax(axis=1))\n# replicate index as dedicated ImageID column necessary for submission\ndf = df.assign(ImageId = df.index.values)\n# drop individual probabilites\ndf = df.drop([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], axis=1)\n# reorder columns for submission\ndf = df[[\"ImageId\", \"Label\"]]\n# run sanity checks\ndisplay(df.head(10))\n# write dataframe to CSV\ndf.to_csv(f\"sub_{comp_name}_{arch.__name__}.csv\", index=False)\ngc.collect()","8121eaf2":"import os\nimport numpy as np\nimport torch\n\nfrom fastai.transforms import tfms_from_model\nfrom fastai.conv_learner import ConvLearner\nfrom fastai.model import resnet34\nfrom fastai.dataset import ImageClassifierData\nfrom fastai.plots import ImageModelResults","c432ddf4":"torch.cuda.is_available()\ngc.collect()","64bb4766":"PATH = \"..\/input\/dogs-vs-cats-redux-kernels-edition\/\"\nTMP_PATH = \"\/tmp\/tmp\"\nMODEL_PATH = \"\/tmp\/model\/\"\ngc.collect()","973e15a3":"fnames = np.array([f'train\/{f}' for f in sorted(os.listdir(f'{PATH}train'))])\nlabels = np.array([(0 if 'cat' in fname else 1) for fname in fnames])\ngc.collect()","32d4db9e":"display(labels)\ndisplay(fnames)\ngc.collect()","64c226e0":"arch=resnet34\nsz=224\nlearning_rate = 0.01\ntraining_length = 2 # epochs\ngc.collect()","3e5297ac":"data = ImageClassifierData.from_names_and_array(\n    path=PATH, \n    fnames=fnames, \n    y=labels, \n    classes=['dogs', 'cats'], \n    test_name='test', \n    tfms=tfms_from_model(arch, sz)\n)\ngc.collect()","25c1f6a8":"learner = ConvLearner.pretrained(arch, data, precompute=True, tmp_name=TMP_PATH, models_name=MODEL_PATH)\nlearner.fit(learning_rate, training_length)\ngc.collect()","535a9522":"# predictions for the validation set\nlog_preds = learner.predict()\n\n# a class that will help us plot our results\nresults = ImageModelResults(data.val_ds, log_preds)\ngc.collect()","d95162a0":"cats = 0\ndogs = 1\n\nresults.plot_most_correct(cats)\nresults.plot_most_correct(dogs)\nresults.plot_most_incorrect(cats)\nresults.plot_most_incorrect(dogs)\nresults.plot_most_uncertain(cats)\nresults.plot_most_uncertain(dogs)\ngc.collect()","1ebd43e4":"## 1.Load Library","d61fcd08":"## 6.Separate labels from data","3c9a7147":"***Very high accuracy often leads to an overfit model and so to ensure that our model is not overfitting we need to have a separate dataset on which we can test our model***\n\n**Splitting data into training and validation datasets**","1a5aaadd":"## 9.Optimizing hyperparameters","d20aa641":"First we introduce some of the necessary packages:","786cf6df":"### Upvote it if you like it","964644c1":"## 1.Load packages ","0c749436":"## 9.Define Architecture and Train Model","17c0d2a2":"## 4.Load Data ","76906cf0":"## 1.Load dependencies","a06408e3":"## 6.Predict Result","b6ced7d8":"## 2.Load data","255da8ec":"## 4.Label Display","b52ccda2":"***Since our evaluation metric is RMSLE (Root Mean Squared Log Error) we should be using the log of the target variable.***\n\n## 3.Treating data","343bb13c":"## 1.1. About Fast AI [References](https:\/\/www.pytorchtutorial.com\/pytorch-tutorials-list\/)\n---\n> * **fast.ai** is dedicated to making the **power of deep learning** accessible to all. \n> * **Deep learning** is dramatically **improving medicine, education, agriculture, transport and many other fields**, with the greatest potential impact in the developing world.\n\n> <p><img src=\"https:\/\/image.slidesharecdn.com\/fastaitalk-170518062514\/95\/fastai-learning-deep-learning-6-638.jpg\" alt=\"Smiley face\" height=\"100\" width=\"800\"><p>\n    \n  ## 1.2. System Requirement\n  ---\n>  * **Python** : Above 3.6 or Above\n>  * **Operating System**:  **fastai 1.0** is based on **PyTorch 1.0**, we must be able to ****install PyTorch 1.0 first.*** Supported installation methods.\n  \n <table style=\"height: 122px;\" width=\"282\"><thead><tr><th><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\"><b>System<\/b><\/font><\/font><\/th><th><b>GPU<\/b><\/th><th><b>CPU<\/b><\/th><\/tr><\/thead><tbody><tr><td>linux<\/td><td>binary<\/td><td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">binary<\/font><\/font><\/td><\/tr><tr><td>mac<\/td><td>source<\/td><td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">binary<\/font><\/font><\/td><\/tr><tr><td>windows<\/td><td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">source<\/font><\/font><\/td><td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">source<\/font><\/font><\/td><\/tr><\/tbody><\/table>\n> Remarks:  **binary** = can be installed directly,  **source** = must be compiled from source\n\n## 1.3. Installation fast.ai\n----\n### Conda Installation\n<hr>\n> It can be installed in the following two steps. Please follow the first step and then the second step.\n* 1. Install **PyTorch** compiled nightly at nightly. Note that the version of **cuda** is the same as your own system, such as installing on **CUDA 9.2**:\n Reference : [Step By Step Installation pytorch](https:\/\/medium.com\/@bryant.kou\/how-to-install-pytorch-on-windows-step-by-step-cc4d004adb2a)\n<pre>conda install -c pytorch pytorch-nightly cuda92\n<\/pre>\n\n> ![](https:\/\/cdn-images-1.medium.com\/max\/800\/1*wNW60f3deppcwmd_HOV-gQ.png)\n\n> If cuda is not installed on your system, you can install the cpu version of PyTorch with the following command:\n* 2. Install **fastai**.\n<pre>conda install -c fastai fastai\n<\/pre>\n\n> If there is something wrong with the installation process, make sure your conda version has been updated to the latest:\n<pre>conda update conda<\/pre>\n\n### Pip Installation\n---\n>  You can install fastai with pip in the following three steps, and you must perform the strict installation sequence.\n*  1. Install **PyTorch** compiled nightly at nightly. Note that the version of **cuda** is the same as your own system, such as installing on **CUDA 9.2**:\n Reference : [Step By Step Installation pytorch](https:\/\/medium.com\/@bryant.kou\/how-to-install-pytorch-on-windows-step-by-step-cc4d004adb2a)  \n `pip install torch_nightly -f https:\/\/download.pytorch.org\/whl\/nightly\/cu92\/torch_nightly.html`\n*  2. Install custom torchvision, this version is compiled on nightly-pytorch:   \n `pip install --index-url https:\/\/test.pypi.org\/simple\/ --extra-index-url https:\/\/pypi.org\/simple\/ torchvision==0.2.1.post2`\n > *  3. Install fastai:  \n `pip install fastai`\n > * 4. In some cases, the above command will attempt to install torch-0.4.1. In this case, you can use the following command:  \n`\npip uninstall torchvision fastai\npip install --no-deps torchvision\npip install fastai\n`\n> * Enjoyable Moment : After the installation is complete, everyone will experience the new features of fastai!\n\n<p><img src=\"https:\/\/media.giphy.com\/media\/BpCY5uqyEJbmJ1ZBIE\/giphy.gif\" alt=\"Smiley face\" height=\"100\" width=\"600\"><p>\n \n ## 1.4. Fast AI Video Link\n \n Here\u2019s the list of the vids for the Practical Machine Learning Course \/ Intro To Machine Learning, just in case the forum post goes away\u2026\n\n* **Lesson 1:      https:\/\/youtu.be\/CzdWqFTmn0Y**\n* **Lesson 2:      https:\/\/youtu.be\/blyXCk4sgEg**\n* **Lesson 3:      https:\/\/youtu.be\/YSFG_W8JxBo**\n* **Lesson 4:      https:\/\/youtu.be\/0v93qHDqq_g**\n* **Lesson 5:      https:\/\/youtu.be\/3jl2h9hSRvc**\n* **Lesson 6:      https:\/\/youtu.be\/BFIYUvBRTpE**\n* **Lesson 7:      https:\/\/youtu.be\/O5F9vR2CNYI**\n* **Lesson 8:      https:\/\/youtu.be\/DzE0eSdy5Hk**\n* **Lesson 9:      https:\/\/youtu.be\/PGC0UxakTvM**\n* **Lesson 10:    https:\/\/youtu.be\/37sFIak42Sc**\n* **Lesson 11:     https:\/\/youtu.be\/XJ_waZlJU8g**\n* **Lesson 12:    https:\/\/youtu.be\/5_xFdhfUnvQ**\n    \n---\n---","b8db0286":"## 5.Define parameter and Training model","285def23":"## 2.Checking CUDA is available and enabled","0a69d94a":"## 7.Single tree","b9e72812":"### Notebook update soon upvote if you like!!!","ac8ec557":"## 8.Out-of-Bag in action","5505007a":"## 10.Final Submission\t","b0e77f4b":"***Let's try our model again, but this time with separate training and validation sets***","b6936f93":"## 5.Check Shape  ","0d9223bd":"## 4.Reading from the feather format","5d1c1036":"## 2.1. Regression Problem Blue Book for Bulldozers\n---\n\n* [**1.Load dependencies**](#1.Load-dependencies)\n* [**2.Load data**](#2.Load-data)\n* [**3.Treating data**](#3.Treating-data)\n* [**4.Reading from the feather format**](#4.Reading-from-the-feather-format)\n* [**5.Base Model**](#5.Base-Model)\n* [**6.Speeding things up**](#6.Speeding-things-up)\n* [**7.Single tree**](#7.Single-tree)\n* [**8.Out-of-Bag in action**](#8.Out-of-Bag-in-action)\n* [**9.Optimizing hyperparameters**](#9.Optimizing-hyperparameters)\n\n---","3a5d8de8":"## 5.Base Model","565aaedc":"---\n---\n## 2.3. Dogs Vs Cat Example Resnet34\n\n---\n\n* [**1.Load Library**](#1.Load-Library)\n* [**2.Checking CUDA**](#2.Checking-CUDA)\n* [**3.Path Setting**](#3.Path-Setting)\n* [**4.Label Display**](#4.Label-Display)\n* [**5.Define parameter and Training model**](#5.Define-parameter-and-Train-model)\n* [**6.Predict Result**](#6.Predict-Result)\n\n---","9960fbdd":"---\n---\n## 2.2. MNIST Example Resnet50\n---\n* [**1.Load packages**](#1.Load-packages)\n* [**2.Checking CUDA is available and enabled**](#2.Checking-CUDA-is-available-and-enabled)\n* [**3.Path Set**](#3.Path-Set)\n* [**4.Load Data**](#4.Load-Data)\n* [**5.Check Shape**](#5.Check-Shape)\n* [**6.Separate labels from data**](#6.Separate-labels-from-data)\n* [**7.Helping Function**](#7.Helping-Function)\n* [**8.Run sanity checks**](#8.Run-sanity-checks)\n* [**9.Define Architecture and Train Model**](#9.Define-Architecture-and-Train-Model)\n* [**10.Final Submission**](#10.Final-Submission)\n\n---","5564a381":"## Zero to Hero Tutorial in Fast AI\n<p><img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*EoktyGnUpOv9Zq-85AIDZw.png\" alt=\"Smiley face\" height=\"200\" width=\"500\"><p>\n    \n\n<hr>\n<h2 style=\"text-align:center;\">Outline of Notebook<h2>\n<hr>\n## Section - 1 Introduction of Fast AI \n* [**1.1. About Fast AI**](#1.1.-About-Fast-AI)\n* [**1.2. System Requirement**](#1.2.-System-Requirement)\n* [**1.3. Installation fast.ai**](#1.3.-Installation-fast.ai)\n* [**1.4. Fast AI Video Link**](#1.4. Fast AI Video Link)\n<hr>\n<hr>\n\n## Section -2 Real life Implementation\n* [**2.1. Regression Problem - Blue Book for Bulldozers**](#2.1.-Regression-Problem-Blue-Book-for-Bulldozers)\n* [**2.2. MNIST Example Resnet50**](#2.1.-MNIST-Example-Resnet50)\n* [**2.3. Dogs Vs Cat Example Resnet34**](#2.2.-Dogs-Vs-Cat Example-Resnet34)\n<hr>\n<hr>\n\n## Section -3 Update Soon\n<hr>","6e19997d":"## 3.Path Set","1d39d106":"## 7.Helping Function   ","6467cee6":"## 8.Run sanity checks\t","213d72e3":"## 6.Speeding things up","c28f2b7f":"## 2.Checking CUDA","419acccc":"## 3.Path Setting"}}