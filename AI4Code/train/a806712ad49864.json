{"cell_type":{"9fd4c736":"code","d7aac943":"code","d1dbc233":"code","511c0849":"code","c5737ecc":"code","47909589":"code","81a1aa41":"code","1417610c":"code","e3611abb":"code","71d006c3":"code","8bb51f44":"code","9a8d43ff":"code","7830592d":"code","8894b64c":"code","71de4eb2":"code","f7d40f07":"code","179b75fd":"code","84053aa2":"code","517c3bcf":"code","8fd2b368":"markdown","8d6ecfe0":"markdown","554ec17d":"markdown","01523db2":"markdown","3a21c60b":"markdown","f759d72d":"markdown","fcb3be7d":"markdown","b33eb7e7":"markdown","51f573f2":"markdown","59553183":"markdown","d7796c34":"markdown","4af272c7":"markdown","2ce527d4":"markdown","992a4ec9":"markdown","a94264f0":"markdown","0b34a990":"markdown","f5a63c1c":"markdown","c06b8c83":"markdown"},"source":{"9fd4c736":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport sklearn as sk\nimport plotly\n%matplotlib inline","d7aac943":"# import data\ndf1 = pd.read_csv('..\/input\/athlete_events.csv')\ndf2 = pd.read_csv('..\/input\/noc_regions.csv')\ndf1.head()","d1dbc233":"df2.head()","511c0849":"df1.info()","c5737ecc":"df2.info()","47909589":"event_weights = pd.DataFrame(df1.groupby('Event', as_index = False)['Weight'].mean())\nevent_weights.head()","81a1aa41":"df1.Weight = df1.Weight.mask(df1.Weight.eq(0)).fillna(\n    df1.Event.map(event_weights.set_index('Event').Weight))\ndf1.info()","1417610c":"event_heights = pd.DataFrame(df1.groupby('Event', as_index = False)['Height'].mean())\ndf1.Height = df1.Height.mask(df1.Height.eq(0)).fillna(\n    df1.Event.map(event_heights.set_index('Event').Height))\nevent_ages = pd.DataFrame(df1.groupby('Event', as_index = False)['Age'].mean())\ndf1.Age = df1.Age.mask(df1.Age.eq(0)).fillna(\n    df1.Event.map(event_ages.set_index('Event').Age))\nmen_weight = df1['Weight'].loc[df1['Sex']=='M'].mean()\nwomen_weight = df1['Weight'].loc[df1['Sex']=='F'].mean()\nmen_height = df1['Height'].loc[df1['Sex']=='M'].mean()\nwomen_height = df1['Height'].loc[df1['Sex']=='F'].mean()\nmen_age = df1['Age'].loc[df1['Sex']=='M'].mean()\nwomen_age = df1['Age'].loc[df1['Sex']=='F'].mean()\ndf1['Weight'].loc[df1['Sex']=='M'] = df1['Weight'].loc[df1['Sex']=='M'].fillna(men_weight)\ndf1['Weight'].loc[df1['Sex']=='F'] = df1['Weight'].loc[df1['Sex']=='F'].fillna(women_weight)\ndf1['Height'].loc[df1['Sex']=='M'] = df1['Height'].loc[df1['Sex']=='M'].fillna(men_height)\ndf1['Height'].loc[df1['Sex']=='F'] = df1['Height'].loc[df1['Sex']=='F'].fillna(women_height)\ndf1['Age'].loc[df1['Sex']=='M'] = df1['Age'].loc[df1['Sex']=='M'].fillna(men_age)\ndf1['Age'].loc[df1['Sex']=='F'] = df1['Age'].loc[df1['Sex']=='F'].fillna(women_age)\ndf1.info()","e3611abb":"df1['Medal'] = df1['Medal'].fillna('None')\ndf1.info()","71d006c3":"data_final = df1.merge(df2, left_on = 'NOC', right_on='NOC', how = 'left')\ndata_final.head()","8bb51f44":"data_final['notes'] = data_final['notes'].fillna('None')\ndata_final['region'] = data_final['region'].fillna(data_final['Team'])\ndata_final.info()","9a8d43ff":"data_final['Medal'] = data_final['Medal'].astype(str)\nwinners = data_final.loc[data_final['Medal'] != 'None']\nwinners.head()","7830592d":"medals = winners.pivot_table('Medal', ['region','Year'],aggfunc='count')\nprint(medals.info())\nmedals = medals.reset_index()\nmedals.head()","8894b64c":"medals['region'] = medals['region'].astype(str)\nmedals['Year'] = pd.to_datetime(medals['Year'], format='%Y')\nreg_medals = medals.groupby('region', as_index=False)['Medal'].sum()\nreg_medals = reg_medals.sort_values(['Medal']).reset_index(drop=True)\nplt.figure(figsize=(20, 10))\nax = sns.barplot(reg_medals['region'],reg_medals['Medal'])\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\")\nplt.title('Frequency of Medalists by Country')\nplt.show()","71de4eb2":"# setting date as index \nmedals.set_index('Year',inplace=True)","f7d40f07":"# bring in plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\n# set up different countries\nuk = medals.loc[medals['region']=='UK']\ngermany = medals.loc[medals['region']=='Germany']\ncanada = medals.loc[medals['region']=='Canada']\nusa = medals.loc[medals['region']=='USA']\nrussia = medals.loc[medals['region']=='Russia']\n\n#select data\ncount_uk = uk['Medal']\nyear_uk = uk.index\n\ncount_germany = germany['Medal']\nyear_germany = germany.index\n\ncount_canada = canada['Medal']\nyear_canada = canada.index\n\ncount_usa = usa['Medal']\nyear_usa = usa.index\n\ncount_russia = russia['Medal']\nyear_russia = russia.index\n\n#create traces\ntrace_uk = go.Scatter(\n    x=year_uk,\n    y=count_uk,\n    name = \"United Kingdom\",\n    line = dict(color = 'rgb(244,66,66)'),\n    opacity = 0.8)\n\ntrace_germany = go.Scatter(\n    x=year_germany,\n    y=count_germany,\n    name = \"Germany\",\n    line = dict(color = 'rgb(244,232,66)'),\n    opacity = 0.8)\n    \ntrace_canada = go.Scatter(\n    x=year_canada,\n    y=count_canada,\n    name = \"Canada\",\n    line = dict(color = 'rgb(89,244,66)'),\n    opacity = 0.8)\n\ntrace_usa = go.Scatter(\n    x=year_usa,\n    y=count_usa,\n    name = \"USA\",\n    line = dict(color = 'rgb(244,173,66)'),\n    opacity = 0.8)\n    \ntrace_russia = go.Scatter(\n    x=year_russia,\n    y=count_russia,\n    name = \"Russia\",\n    line = dict(color = 'rgb(191,66,244)'),\n    opacity = 0.8)\n\ndata = [trace_uk,trace_germany,trace_canada,trace_usa,trace_russia]\n\nlayout = dict(\n    title='Olympic Medalists from around the World over 120 years',\n    xaxis=dict(rangeslider=dict(visible = True),type='date'))\nfig = dict(data=data, layout=layout)\nplotly.offline.iplot(fig)","179b75fd":"total_medals = pd.DataFrame(winners.groupby(['NOC','region'])['Medal'].count())\nprint(total_medals.info())\ntotal_medals = total_medals.reset_index()","84053aa2":"data = [ dict(\n        type = 'choropleth',\n        locations = total_medals['NOC'],\n        z = total_medals['Medal'],\n        text = total_medals['region'],\n        colorscale = [[0,\"rgb(5, 10, 172)\"],[0.35,\"rgb(40, 60, 190)\"],[0.5,\"rgb(70, 100, 245)\"],\\\n            [0.6,\"rgb(90, 120, 245)\"],[0.7,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            title = 'Olympic Medalists'),\n      ) ]\n\nlayout = dict(\n    title = 'Olympic Medalists by Country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\nplotly.offline.iplot( fig, validate=False, filename='d3-world-map' )","517c3bcf":"# group for weights and heights\nheight_weight_avg = data_final.groupby(['region','Sex'], as_index=False)['Height','Weight'].mean()\n# Create men\/women frames\nmen=height_weight_avg.loc[height_weight_avg['Sex']=='M']\nwomen=height_weight_avg.loc[height_weight_avg['Sex']=='F']\n# create traces\ntrace0 = go.Scatter(\n    x = men['Height'],\n    y = men['Weight'],\n    name = 'Male',\n    mode = 'markers',\n    text = men['region'],\n    marker = dict(\n        size = 10,\n        color = 'rgba(255, 0, 0, .8)',\n        line = dict(\n            width = 2,\n            color = 'rgb(0, 0, 0)',\n        )\n    )\n)\n\ntrace1 = go.Scatter(\n    x = women['Height'],\n    y = women['Weight'],\n    name = 'Female',\n    mode = 'markers',\n    text = women['region'],\n    marker = dict(\n        size = 10,\n        color = 'rgba(34, 19, 242, .9)',\n        line = dict(\n            width = 2,\n            color = 'rgb(0, 0, 0)',\n        )\n    )\n)\n\ndata = [trace0, trace1]\n\nlayout = dict(title = 'Who has the biggest Athletes?',\n              hovermode= 'closest',\n              xaxis= dict(\n                title= 'Height',\n                ticklen= 5,\n                zeroline= False,\n                gridwidth= 2,\n              ),\n              yaxis=dict(\n                title= 'Weight',\n                ticklen= 5,\n                gridwidth= 2,\n              ),\n             )\n\nfig = dict(data=data, layout=layout)\nplotly.offline.iplot(fig, filename='styled-scatter')","8fd2b368":"We can see our method worked very well. Let's do the same for Age and Height and fill the remaining NaNs with the resepctive averages for each Gender.","8d6ecfe0":"USA, as we saw earlier has more individual Olympic medalists than any other country.","554ec17d":"Firstly, let's take a peak at some countries and how many medalists come from each over the years.","01523db2":"Let's knock out those NaNs in Notes and fill the empty region columns with the respective observations Team value.","3a21c60b":"Lets take a peak at our new work.","f759d72d":"## Data Cleaning","fcb3be7d":"Woah! Those numbers are alarming out of Nauru and Montenegro. This is my first commit, I will update further with further details and attempting to predict if an athlete will win a medal or not. \n\nCheers!","b33eb7e7":"Today we will clean and explore the Olympic dataset. Lets begin by setting up shop.","51f573f2":"# Exploring the Oympics Dataset","59553183":"We now can look at the countries with biggest athletes.","d7796c34":"Clean as a whistle. We can join the two datasets to have a larger more informative dataset.","4af272c7":"We can filter to only athletes that have won a medal.","2ce527d4":"We now have an average weight for every event in the data set. Let's use these values to fill any missing values in the data frame for each event, reducing the NaN values in our dataset. By using Event for our agg column, it makes our lives slightly easier as we will not have to specify which gender we are aggregating on as the Events include the different genders.","992a4ec9":"Looks like Russia has a history of varying success in the Olympics ... perhaps it has something to do with [this.](http:\/\/2001-2009.state.gov\/r\/pa\/ho\/time\/qfp\/104481.htm)","a94264f0":"We can start by getting creative and filling these NaN values by their respecetive averages in each Event.","0b34a990":"That is one clean dataset. We can now explore!","f5a63c1c":"## Medalists","c06b8c83":"We can quickly take care of the Medals column as well."}}