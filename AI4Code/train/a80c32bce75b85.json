{"cell_type":{"bc6bce7b":"code","19ebf96d":"code","96419a7c":"code","be174493":"code","e925f605":"code","7adc219d":"code","5f83d4f3":"code","87736631":"code","5b1761d1":"code","f192d459":"code","e41e232b":"code","27cb04dc":"markdown","fc043ddf":"markdown","eab70fbb":"markdown","1e06d1e7":"markdown","6f74e7f5":"markdown","26f81d2e":"markdown","a736a5f3":"markdown"},"source":{"bc6bce7b":"import tensorflow as tf\nimport tensorflow.keras as keras\nimport matplotlib.pyplot as plt\nimport cv2","19ebf96d":"# download mnist dataset\n(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()","96419a7c":"# shape of data\nx_train.shape, y_train.shape","be174493":"# image\nx_train = x_train \/ 255\nx_test = x_test \/ 255","e925f605":"# label\ny_train = tf.one_hot(indices=y_train, depth=10)\ny_test = tf.one_hot(indices=y_test, depth=10)","7adc219d":"# this function can show images and its labels predicted by model\ndef show_img_label(images, true_labels, pred_labels):\n    \n    idx = 0\n    \n    fig, axes = plt.subplots(nrows=5, ncols=5, figsize=(20, 20))\n    for i in range(5):\n        for j in range(5):\n            \n            true = int(tf.argmax(true_labels[idx]))\n            pred = int(tf.argmax(pred_labels[idx]))\n            \n            if true == pred:\n                color = \"green\"\n            else:\n                color = \"red\"\n            \n            axes[i, j].set_title(label=\"Label= \"+str(true), fontsize=15, color=color)\n            axes[i, j].set_xticks([])\n            axes[i, j].set_yticks([])\n            axes[i, j].imshow(images[idx])\n            idx += 1\n    \n    ","5f83d4f3":"show_img_label(x_train, y_train, y_train)","87736631":"inputs = keras.layers.Input(shape=(28, 28, 1))\n\nhidden = keras.layers.Conv2D(filters=4, kernel_size=(3, 3), strides=1, padding=\"same\")(inputs)\nhidden = keras.layers.BatchNormalization()(hidden)\nhidden = keras.layers.Activation(\"relu\")(hidden)\nhidden = keras.layers.MaxPooling2D(pool_size=2)(hidden)\n\nhidden = keras.layers.Conv2D(filters=16, kernel_size=(3, 3), strides=1, padding=\"same\")(hidden)\nhidden = keras.layers.BatchNormalization()(hidden)\nhidden = keras.layers.Activation(\"relu\")(hidden)\nhidden = keras.layers.MaxPooling2D(pool_size=2)(hidden)\n\nhidden = keras.layers.Conv2D(filters=32, kernel_size=(3, 3), strides=1, padding=\"same\")(hidden)\nhidden = keras.layers.BatchNormalization()(hidden)\nhidden = keras.layers.Activation(\"relu\")(hidden)\nhidden = keras.layers.MaxPooling2D(pool_size=2)(hidden)\n\nhidden = keras.layers.Conv2D(filters=64, kernel_size=(3, 3), strides=1, padding=\"same\")(hidden)\nhidden = keras.layers.BatchNormalization()(hidden)\nhidden = keras.layers.Activation(\"relu\")(hidden)\nhidden = keras.layers.MaxPooling2D(pool_size=2)(hidden)\n\nhidden = keras.layers.Flatten()(hidden)\n\nhidden = keras.layers.Dropout(rate=0.2)(hidden)\noutputs = keras.layers.Dense(units=10, activation=\"sigmoid\")(hidden)\n\nmodel = keras.models.Model(inputs=inputs, outputs=outputs)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=keras.optimizers.Adam(0.0001), metrics=[\"accuracy\"])\n\nmodel.summary()","5b1761d1":"model.fit(x=x_train, y=y_train, batch_size=32, epochs=10, verbose=1)","f192d459":"show_img_label(x_test[40:65], y_test[40:65], model.predict(x_test[40:65]))","e41e232b":"model.evaluate(x=x_test, y=y_test)","27cb04dc":"## Preporcess Data","fc043ddf":"## Define Model","eab70fbb":"## Train Model","1e06d1e7":"## Load Dataset","6f74e7f5":"## A Function to Show Image & Predicted Lable","26f81d2e":"## Evaluation","a736a5f3":"## Import Package"}}