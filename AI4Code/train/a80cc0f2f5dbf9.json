{"cell_type":{"e6c817fb":"code","38ee748c":"code","57b5af86":"code","706d8bcc":"code","e82f4ec0":"code","ca63e11a":"code","8ad476fa":"code","45f70f9b":"code","dc9eb146":"code","4200aa39":"code","c8e87455":"code","ebc2a5e1":"code","cb98d974":"code","166d2189":"code","b959b3a2":"code","5a73805b":"code","f5c8bc6f":"code","3994b90c":"code","2bac3992":"code","bf84d59e":"code","692422ab":"code","27d0721b":"markdown","70078c04":"markdown","87c67674":"markdown","43f847a5":"markdown","70ee001d":"markdown"},"source":{"e6c817fb":"import numpy as np\nimport pandas as pd\nimport glob\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(16,8)})\nsns.set(font_scale=1.3)\nplt.style.use('fivethirtyeight')\n\nfrom sklearn.metrics import r2_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","38ee748c":"train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain.head()","57b5af86":"book_train = glob.glob('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')","706d8bcc":"book_0 = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\nbook_5 = book_0[book_0['time_id']==5]\nbook_5.head()","e82f4ec0":"plt.figure(figsize=(18,10))\nsns.heatmap(book_5.corr(), annot=True, cmap=plt.cm.Blues);","ca63e11a":"book_5.describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='Reds')\\\n                             .background_gradient(subset=['50%'], cmap='coolwarm')","8ad476fa":"samples = [\"bid_price1\",\"bid_price2\",\"ask_price1\",\"ask_price2\"]\n\nfor num,a in enumerate(samples):\n    plt.figure(figsize=(18,18))\n   \n    plt.subplot(4,1,num+1)\n    plt.plot(book_5[\"seconds_in_bucket\"],book_5[a])\n    plt.title(a)\nplt.show()\nplt.figure(figsize=(18,6));\n\nfor num,a in enumerate(samples):\n    plt.plot(book_5[\"seconds_in_bucket\"],book_5[a],label=a)\nplt.legend(fontsize=12);","45f70f9b":"book_1 = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0')\nbook_1 = book_1[book_1['time_id']==5]\nbook_1.head()","dc9eb146":"plt.figure(figsize=(18,6))\n\nfor num,a in enumerate(samples):\n    plt.plot(book_5[\"seconds_in_bucket\"],book_5[a],label=a)\n    \nplt.plot(book_1[\"seconds_in_bucket\"],book_1[\"price\"],label=\"trade_parquet\",lw=5,color='magenta')\nplt.legend(fontsize=12);","4200aa39":"def calc_volume(df):\n    temp = np.log(df).diff()\n    return np.sqrt(np.sum(temp**2)) \n\ndef calc_wap(path):\n    book = pd.read_parquet(path) \n    # calculating WAP\n    p1 = book['bid_price1']\n    p2 = book['ask_price1']\n    s1 = book['bid_size1']\n    s2 = book['ask_size1']\n    \n    book['wap'] = (p1*s2 + p2*s1) \/ (s1 + s2)\n    transbook = book.groupby('time_id')['wap'].agg(calc_volume)\n    return transbook","c8e87455":"stock_id = []\ntime_id = []\nrelvol = []\nfor i in book_train:\n    temp_stock = int(i.split(\"=\")[1])\n    temp_relvol = calc_wap(i)\n    stock_id += [temp_stock]*temp_relvol.shape[0]\n    time_id += list(temp_relvol.index)\n    relvol += list(temp_relvol)","ebc2a5e1":"past_volatility = pd.DataFrame({'stock_id': stock_id, 'time_id': time_id, 'volatility': relvol})","cb98d974":"joined = train.merge(past_volatility, on = ['stock_id','time_id'], how = 'left')\nR2 = round(r2_score(y_true = joined['target'], y_pred = joined['volatility']),3)\nprint(f'R2: {R2}')","166d2189":"def rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))\n\nrmspe = rmspe(joined['target'], joined['volatility'])\nprint(f'RMSPE: {rmspe}')","b959b3a2":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\ndef training(X,y,degree):\n    polyfeat = PolynomialFeatures(degree = degree)\n    linreg = LinearRegression()\n    x = np.array(X).reshape(-1,1)\n    X_ = polyfeat.fit_transform(x)\n    weights = 1\/np.square(y)\n    return linreg.fit(X_, np.array(y).reshape(-1,1), sample_weight = weights)\n\n\nstock_id_train = train.stock_id.unique()\nmodels = {} \ndegree = 4\nfor i in stock_id_train:\n    temp = joined[joined['stock_id']==i]\n    X = temp['volatility']\n    y = temp['target']\n    models[i] = training(X,y,degree)","5a73805b":"book_test = glob.glob('..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')","f5c8bc6f":"stock_id = []\ntime_id = []\nrelvol = []\nfor i in book_test:\n    temp_stock = int(i.split(\"=\")[1])\n    temp_relvol = calc_wap(i)\n    stock_id += [temp_stock]*temp_relvol.shape[0]\n    time_id += list(temp_relvol.index)\n    relvol += list(temp_relvol)\n    \npast_test_volatility = pd.DataFrame({'stock_id': stock_id, 'time_id': time_id, 'volatility': relvol})","3994b90c":"def linear_inference(models, stock_id, past_volatility, degree):\n    model = models[stock_id]\n    polyfeat = PolynomialFeatures(degree = degree)\n    return model.predict(polyfeat.fit_transform([[past_volatility]]))[0][0]","2bac3992":"submission = pd.DataFrame({'row_id' : [], 'target' : []})  \nsubmission['row_id'] = past_test_volatility.apply(lambda x: str(int(x.stock_id)) + '-' + str(int(x.time_id)), axis=1)\nsubmission['target'] = past_test_volatility.apply(lambda x: linear_inference(models,\\\n                                                                            x.stock_id,\\\n                                                                            x.volatility,\\\n                                                                            degree), axis = 1)","bf84d59e":"submission","692422ab":"submission.to_csv('submission.csv',index = False)","27d0721b":"<a name=\"func\">\n    \n# <p style=\"background-color:#1c56c9; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  25px; color:#ffffff; padding-top:5px; padding-bottom:5px;\">Functions<\/p>","70078c04":"<a name=\"model\">\n    \n# <p style=\"background-color:#1c56c9; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  25px; color:#ffffff; padding-top:5px; padding-bottom:5px;\">Model<\/p>","87c67674":"<a name=\"sub\">\n    \n# <p style=\"background-color:#1c56c9; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  25px; color:#ffffff; padding-top:5px; padding-bottom:5px;\">Submission<\/p>","43f847a5":"* <a href=\"#eda\">EDA<\/a>\n\n* <a href=\"#func\">Functions<\/a>\n\n* <a href=\"#model\">Model<\/a>\n\n* <a href=\"#sub\">Submission<\/a>","70ee001d":"<a name=\"eda\">\n    \n# <p style=\"background-color:#1c56c9; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  25px; color:#ffffff; padding-top:5px; padding-bottom:5px;\">EDA<\/p>"}}