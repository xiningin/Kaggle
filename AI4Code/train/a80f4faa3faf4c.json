{"cell_type":{"36e35bce":"code","a91aa0ab":"code","428927b4":"code","c55da699":"code","57f4e2b2":"code","70f3c8fa":"code","1f951666":"code","02d9c010":"code","7c55e104":"code","d891fd6b":"code","8520b01b":"code","881b9061":"code","ee070478":"code","aa43a3f3":"code","94ce1858":"code","672be526":"code","55af8eed":"code","8f83ffb1":"code","07d72b77":"code","b75c1d04":"code","774a0b85":"code","2291130b":"code","c1258c6a":"code","a6259f3f":"code","1b7a4697":"code","c2439c09":"code","20fd054b":"code","b1996bc4":"code","36fbba64":"code","94a58b9e":"code","7886cec9":"code","b2c8371c":"code","56822cb8":"code","7c8789fc":"markdown","091bdf83":"markdown","82556e4a":"markdown","b50ccef5":"markdown","0559d6f8":"markdown","2429bb03":"markdown","ff6b7f91":"markdown","39230e5f":"markdown"},"source":{"36e35bce":"# Importing libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a91aa0ab":"ds = pd.read_csv('\/kaggle\/input\/forbes-celebrity-100-since-2005\/forbes_celebrity_100.csv')\nds","428927b4":"ds.info()","c55da699":"ds = ds.set_index('Name')\nds_top_20_celeb = ds['Pay (USD millions)'].nlargest(20)\nds_top_20_celeb","57f4e2b2":"# mean salary of top 20 celebrities\nds_top_20_celeb.mean()","70f3c8fa":"ds_top_20_celeb.plot(kind = 'bar')","1f951666":"df_grup_by_Category = ds.groupby([\"Category\",\"Name\"])[\"Pay (USD millions)\"].mean()\ndf_grup_by_Category","02d9c010":"ds['Category'].unique()","7c55e104":"ds_with_dummies = pd.get_dummies(ds.Category)\nds_with_dummies.head()","d891fd6b":"ds = pd.concat([ds, ds_with_dummies], axis=1)\nds","8520b01b":"ds.drop('Category', axis=1, inplace=True)\nds.head()","881b9061":"ds.info()","ee070478":"x = ds.drop(ds_with_dummies.columns, axis=1)\ny = ds['Authors']\nx.head()","aa43a3f3":"y.value_counts()","94ce1858":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.2)","672be526":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier","55af8eed":"dt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\ndt.score(x_test,y_test)","8f83ffb1":"xg = XGBClassifier()\nxg.fit(x_train,y_train)\nxg.score(x_test,y_test)","07d72b77":"rf = RandomForestClassifier(n_estimators=25)\nrf.fit(x_train,y_train)\nrf.score(x_test,y_test)","b75c1d04":"kn = KNeighborsClassifier()\nkn.fit(x_train,y_train)\nkn.score(x_test,y_test)","774a0b85":"svm = SVC()\nsvm.fit(x_train,y_train)\nsvm.score(x_test,y_test)","2291130b":"from sklearn.metrics import accuracy_score, confusion_matrix\n\ny_pred1 = svm.predict(x_test)\ncm = confusion_matrix(y_test,y_pred1)\nprint('Confusion matrix\\n',cm)","c1258c6a":"plt.figure(figsize=(7,5))\nsns.heatmap(cm,annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('truth')","a6259f3f":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","1b7a4697":"y_train = y_train.to_numpy()\ny_test = y_test.to_numpy()","c2439c09":"import keras\nimport tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nmonitor = EarlyStopping(monitor='val_loss', min_delta=0.01, patience=3, restore_best_weights=True)","20fd054b":"x_train_cnn = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)\nx_test_cnn = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)\n\nx_train_cnn.shape","b1996bc4":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv1D(8, kernel_size=2, activation='relu', input_shape = (2,1)))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(16, activation='relu'))\n\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nhistory = model.fit(x_train_cnn,y_train, epochs=10, validation_split=0.2, callbacks=[monitor])","36fbba64":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuacy')\nplt.legend(['Acc','Val'], loc = 'upper left')","94a58b9e":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['loss','Val'], loc = 'upper left')","7886cec9":"y_pred = model.predict_classes(x_test_cnn)\nacc = accuracy_score(y_test,y_pred)\nprint('Accuracy : ',acc)","b2c8371c":"cm = confusion_matrix(y_test,y_pred)\nprint('Confusion matrix\\n',cm)","56822cb8":"plt.figure(figsize=(7,5))\nsns.heatmap(cm,annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('truth')","7c8789fc":"concating the dummies with actual dataset and dropping unnecessary columns","091bdf83":"# Confusion Matrix","82556e4a":"top 20 celebrities","b50ccef5":"splitting dataset into train and test ","0559d6f8":"creating dummies of category","2429bb03":"# **Standardizing data for CNN**","ff6b7f91":"# Learning curves","39230e5f":"# **CNN**"}}