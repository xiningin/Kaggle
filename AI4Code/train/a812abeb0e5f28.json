{"cell_type":{"7e24c9ad":"code","91a88295":"code","4a1eba99":"code","d8ab8c29":"code","85cbf630":"code","b16e2ae5":"code","0bf76320":"code","7f64af8f":"code","706c9000":"code","8a593a2a":"code","20b3964e":"markdown","505d2ec0":"markdown","e6f1a35e":"markdown","6c09201d":"markdown","082ebd8d":"markdown","94bb07be":"markdown"},"source":{"7e24c9ad":"import numpy as np\nimport pandas as pd\n\nfrom IPython.display import display\n\ndata_path = '..\/input'","91a88295":"!ls -lSh $data_path\/*.csv","4a1eba99":"files_names = !ls $data_path\/*.csv","d8ab8c29":"data_dict = {}\n\nfor name in files_names:\n    data_dict[name.split('\/')[-1][:-4]] = pd.read_csv(name)","85cbf630":"for k in data_dict.keys():\n    display(k)\n    display(data_dict[k].head())","b16e2ae5":"%%time\ndf_complete = data_dict['train'].copy()\ndf_complete = df_complete.join(data_dict['potential_energy'].set_index('molecule_name'), on='molecule_name')\ndf_complete = df_complete.join(data_dict['dipole_moments'].set_index('molecule_name'), on='molecule_name', lsuffix='dipole_moments_')\ndf_complete = df_complete.join(data_dict['magnetic_shielding_tensors'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_0'], lsuffix='_atom0')\ndf_complete = df_complete.join(data_dict['magnetic_shielding_tensors'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_1'], lsuffix='_atom1')\ndf_complete = df_complete.join(data_dict['mulliken_charges'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_0'], lsuffix='_atom0')\ndf_complete = df_complete.join(data_dict['mulliken_charges'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_1'], lsuffix='_atom1')\ndf_complete = df_complete.join(data_dict['scalar_coupling_contributions'].set_index(['molecule_name', 'atom_index_0', 'atom_index_1']), on=['molecule_name', 'atom_index_0', 'atom_index_1'], rsuffix='_scc')\ndf_complete = df_complete.join(data_dict['structures'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_0'], lsuffix='_atom0_structure')\ndf_complete = df_complete.join(data_dict['structures'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_1'], lsuffix='_atom1_structure')","0bf76320":"%%time\ndf_train = data_dict['train'].copy()\ndf_train = df_train.join(data_dict['structures'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_0'], lsuffix='_atom0_structure')\ndf_train = df_train.join(data_dict['structures'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_1'], lsuffix='_atom1_structure')","7f64af8f":"%%time\ndf_test = data_dict['test'].copy()\ndf_test = df_test.join(data_dict['structures'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_0'], lsuffix='_atom0_structure')\ndf_test = df_test.join(data_dict['structures'].set_index(['molecule_name', 'atom_index']), on=['molecule_name', 'atom_index_1'], lsuffix='_atom1_structure')","706c9000":"%%time\nfor df in [df_complete, df_train, df_test]:    \n    distance_foo = np.linalg.norm(df[['x_atom1_structure', 'y_atom1_structure', 'z_atom1_structure']].values - df[['x', 'y', 'z']].values, axis=1)\n    df['distance'] = distance_foo","8a593a2a":"df_complete.to_msgpack('.\/complete.msg')\ndf_train.to_msgpack('.\/train.msg')\ndf_test.to_msgpack('.\/test.msg')","20b3964e":"# lets join this data in single dataframe","505d2ec0":"# save the data ","e6f1a35e":"# calculate distance","6c09201d":"# Have a nice EDA ;)","082ebd8d":"# Lets see how the files looks like","94bb07be":"# Introduction\n\nIn this notebook we are going to create 3 different files ready to perform EDA in the **fastest way**:\n\n - **train.msg** : Contains the train.csv data + structures + distance metric\n - **test.msg** : Contains the test.csv data + structures + distance metric\n - **complete.msg** : Contains the train.csv + all the data from the complementary files + distance metric\n \nThe files are saved in [msgpack format](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.to_msgpack.html). This allow us to save\/load the dataframes very fast (and the dtypes are saved too, so no conversion is needed when load).\n\nSome people are afraid to use msgpack, because in the pandas docs it is stated that the function is experimental. After one year using mspack, I can ensure that no problem has arrise to me. Anyway you can use csv if you like it more.\n\n"}}