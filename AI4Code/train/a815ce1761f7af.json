{"cell_type":{"0a888b95":"code","22a3521c":"code","577ef251":"code","9fd06c85":"code","71639a7a":"code","830f9b57":"code","fda30675":"code","0940c935":"code","13f16ca3":"code","0696f3fe":"code","aed48bef":"code","039134e2":"code","e88d63ec":"code","6827365f":"code","c0770d68":"code","12c41b41":"code","a469f5a9":"code","7b3d69cc":"code","e7f22ac0":"code","14a554ca":"code","aabf07b5":"code","277fb1ef":"code","aacff128":"code","00180b91":"code","cb9b41e8":"code","0751efa2":"code","23092cbb":"code","81d712ea":"code","9c7af74c":"code","f0f6aad3":"code","591896ec":"code","e2db0123":"code","9e54e06f":"code","f55b20e0":"code","2aab7b5b":"code","862107b3":"code","25f821d8":"code","f99b3a97":"code","d6768e9a":"code","67156cfb":"code","e4e52fc7":"code","50ef2f0c":"code","fb924869":"code","565851cd":"code","0cc60440":"code","82fbbdab":"code","34f74e62":"code","8c24ce45":"code","8888070c":"code","4f1cb0ec":"code","3b86488d":"code","c5f3e21e":"code","bd5fe385":"markdown","edd3131a":"markdown","c4403915":"markdown","b1f84f30":"markdown","f91efed4":"markdown","d41a726d":"markdown","b4eeccae":"markdown","f13a450f":"markdown","aab9f6d1":"markdown","569bd917":"markdown","608f898e":"markdown","99207fb9":"markdown","4659938a":"markdown","423a1def":"markdown","aad2e881":"markdown","56a84dfa":"markdown","02d86df9":"markdown","658de7f1":"markdown","b9f7a919":"markdown","d06e55d6":"markdown","3cd754f5":"markdown","a69c7d8c":"markdown","c9f26fd2":"markdown"},"source":{"0a888b95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use ('ggplot')\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","22a3521c":"plt.style.available","577ef251":"a = [1,2,3,4]\nplt.plot(a)\nplt.show()","9fd06c85":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","71639a7a":"train_df.columns","830f9b57":"train_df.head()","fda30675":"train_df.describe()","0940c935":"train_df.columns","13f16ca3":"train_df.head()","0696f3fe":"train_df.info()","aed48bef":"def bar_plot(variable):\n    \"\"\"  \n    input: variable ex:\"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","039134e2":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","e88d63ec":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    bar_plot(c) #it will produce so confused results","6827365f":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts())) # A expression can be seen as  following about category2 has so much different values","c0770d68":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","12c41b41":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","a469f5a9":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean()","7b3d69cc":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = 'Survived',ascending = True)","e7f22ac0":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = 'Survived',ascending = False)","14a554ca":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = 'Survived',ascending = False)","aabf07b5":"train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = 'Survived',ascending = False)","277fb1ef":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quatile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75) \n        # IQR\n        IQR = Q3-Q1\n        # Outlier Step\n        outlier_step = IQR*1.5 \n        # detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","aacff128":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","00180b91":"#drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","cb9b41e8":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)\ntrain_df.head()","0751efa2":"train_df.columns[train_df.isnull().any()]","23092cbb":"train_df.isnull().sum()","81d712ea":"train_df[train_df[\"Embarked\"].isnull()]","9c7af74c":" train_df.boxplot(column = \"Fare\", by = \"Embarked\")","f0f6aad3":"train_df[\"Embarked\"]= train_df[\"Embarked\"].fillna(\"C\")","591896ec":"train_df[train_df[\"Embarked\"].isnull()]","e2db0123":"train_df[train_df[\"Fare\"].isnull()]","9e54e06f":"train_df[train_df[\"Pclass\"]==3][\"Fare\"]","f55b20e0":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])","2aab7b5b":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","862107b3":"train_df[train_df[\"Fare\"].isnull()]","25f821d8":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\",\"Pclass\"]\nsns.heatmap(train_df[list1].corr(),annot = True, fmt = \".2f\");","f99b3a97":"g = sns.factorplot(x = \"SibSp\", y=\"Survived\", data = train_df, kind = \"bar\", size = 7 )\ng.set_ylabels(\"Survived Probability\");","d6768e9a":"g = sns.factorplot(x = \"Parch\", y = \"Survived\",data = train_df, kind = \"bar\", size = 7)\ng.set_ylabels(\"Survived Probability\");","67156cfb":"g = sns.factorplot( x = \"Pclass\", y= \"Survived\", kind = \"bar\", data = train_df,size = 7)\ng.set_ylabels(\"Survived Probability\");","e4e52fc7":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 15);","50ef2f0c":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Fare\", bins = 25);","fb924869":"g = sns.FacetGrid(train_df, col = \"Survived\",row = \"Pclass\", size=2.3)\ng.map(sns.distplot, \"Age\", bins = 25);","565851cd":"g = sns.FacetGrid(train_df, col = \"Survived\",row = \"Pclass\", size=10)\ng.map(sns.distplot, \"Fare\", bins = 10);","0cc60440":"g = sns.FacetGrid(train_df, row = \"Embarked\", size =2.3)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend();","82fbbdab":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\",\"Fare\");","34f74e62":"train_df[train_df[\"Age\"].isnull()]","8c24ce45":"sns.factorplot(x = \"Sex\", y= \"Age\", data = train_df,kind = \"box\")","8888070c":"sns.factorplot(x = \"Sex\", y= \"Age\", hue = \"Pclass\", data = train_df,kind = \"box\")","4f1cb0ec":"sns.factorplot(x = \"SibSp\", y= \"Age\", data = train_df,kind = \"box\")","3b86488d":"train_df[\"Sex\"] = [1 if each == \"male\" else 0 for each in train_df[\"Sex\"]]","c5f3e21e":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot = True);","bd5fe385":"<a id = '3'><\/a><br>\n# [Univariate Variable Analysis](#3)\n*  Categorical Variable : Survived,Sex,Pclass,Embarked,Name, Ticket,Sibsp and Parch\n*  Numerical Variable : Age,Fare,PassengerId\n        ","edd3131a":"<a id = '8'><\/a>\n# Missing Value\n    * Find Missing Value\n    * Fill Missing Value","c4403915":" <a id = '12'><\/a>\n ### Correlation Between SibSp -- Parch --Age -- Fare -- Survived","b1f84f30":"<a id = '6'><\/a><br>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","f91efed4":"<a id = '10'><\/a>\n## Fill Missing Value\n* Embark has 2 missing value\n* Fare has only 1","d41a726d":"<a id = '11'><\/a>\n# Visualization","b4eeccae":"<a id = '1' ><\/a><br>\n# Load and Check Data","f13a450f":"<a id = '15'><\/a>\n### Pclass-- Survived","aab9f6d1":"<a id = '7'><\/a>\n# Outlier Detection","569bd917":"<a id = '5'><\/a><br>\n## [Numerical Variable](#5)","608f898e":"<a id = '17'><\/a>\n### Pclass-- Age-- Survived","99207fb9":"* float64(2) : Fare and Age\n* int64(5) : Pclass,Sibsp,parch,passenger\u0131d and survived\n* object(5):cabin,embarked,name,sex,ticket","4659938a":"<a id = '9'><\/a>\n## Find Missing Value","423a1def":"<a id = '13'><\/a>\n### Sibsp--Survived","aad2e881":"<a id = '2'><\/a><br>\n# Variable Description\n\n1. PassengerId: unique id number to each passenger\n1. Survived:passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex : gender of passenger\n1. Age : age of passenger\n1. SibSp : number of siblings \/spouse\n1. Parch : number of parents\/children\n1. Ticket : ticket number\n1. Fare : amount of money spent on ticket\n1. Cabin  : cabin category\n1. Embarked : port where passenger embarked (C : Cherbourg, Q : Queenstown, S:Southampton)","56a84dfa":"<a id = '18'><\/a>\n### Embarked-- Sex-- Pclass-- Survived","02d86df9":"<a id = '16'><\/a>\n### Age-- Survived","658de7f1":"Sex is not informative for age prediction, age distribution seems to be same.","b9f7a919":"# Introduction \nTitanic is one of the most notorious shipwreck in the history. In 1912, over the course of her voyage the titanic sank after colliding with an iceberg.We will investigate and appear underlying truths via that modest work. Lets you look at our work right now!\n\n<font color = 'red'>\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)    \n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch --Age -- Fare -- Survived](#12)\n    * [Sibsp-- Survived](#13)\n    * [Parch-- Survived](#14)\n    * [Pclass-- Survived](#15)\n    * [Age-- Survived](#16)\n    * [Pclass-- Age-- Survived](#17)\n    * [Embarked-- Sex-- Pclass-- Survived](#18)\n    * [Embarked-- Sex-- Fare-- Survived](#19)\n    * [Fill missing age feature](#20)\n","d06e55d6":"<a id = '19'><\/a>\n### Embarked-- Sex-- Fare-- Survived","3cd754f5":"<a id = '20'><\/a>\n### Fill missing age feature","a69c7d8c":"<a id = '14'><\/a>\n### Parch-- Survived","c9f26fd2":"<a id = '4'><\/a><br>\n## [Categorical Variable](#4)\n "}}