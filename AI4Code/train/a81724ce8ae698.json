{"cell_type":{"6a5d8912":"code","63ff9c0a":"code","bc91b0d2":"code","0855e514":"code","548991f0":"code","082734ae":"code","9b8e6a3e":"code","0364d95c":"code","b7c358dd":"code","42d53d55":"code","33069e8c":"code","37076170":"code","a7df52bf":"code","860f3912":"code","565b686c":"code","d85536e0":"code","3b366951":"code","76ba6730":"code","8da47ba1":"code","0695b6ae":"code","786073fc":"code","9e3ac0bb":"markdown"},"source":{"6a5d8912":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63ff9c0a":"#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nitems = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nitem_categories = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nshops = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\nsales_train = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv\")","bc91b0d2":"#sales_train\u306b\u8aac\u660e\u5909\u6570\u3092\u8ffd\u52a0\nsales_train_x = sales_train.copy()\ntest_x = test.copy()\nsales_train_x = pd.merge(sales_train_x, items, on = 'item_id')\nsales_train_x = sales_train_x.drop('item_name', axis = 1)\n# \u58f2\u4e0a\u984d\u306e\u8ffd\u52a0\nsales_train_x['date_sales'] = sales_train_x['item_cnt_day'] * sales_train_x['item_price']\nsales_train_x['mouth'] = pd.to_datetime(sales_train_x['date']).dt.strftime('%m')\nsales_train_x['year'] = pd.to_datetime(sales_train_x['date']).dt.strftime('%y')\nsales_train_x['weekday'] = pd.to_datetime(sales_train_x['date'].astype('str')).dt.dayofweek\nsales_train_x","0855e514":"#\u4e21\u65b9\u3068\u308212\u6708\u306e\u30c7\u30fc\u30bf\u3067\u306f\u306a\u3044\u306e\u3067\u5916\u308c\u5024\u3068\u3057\u3066\u826f\u3055\u305d\u3046\nsales_train_x_no_out = sales_train_x.drop([1181188, 1494614], axis = 0)\nsales_train_x_no_out.shape","548991f0":"#\u6708\u3054\u3068\u306e\u30c7\u30fc\u30bf\u306b\u5909\u63db\nsales_train_by_month = sales_train_x_no_out[\n    ['date_block_num','shop_id','item_id','item_cnt_day']\n].groupby(\n    ['date_block_num','shop_id','item_id'],\n    as_index=False\n).sum().rename(columns={'item_cnt_day':'mon_shop_item_cnt'})\n\n# \u6708\u3054\u3068\u306eshop_id*item_id\u5225\u58f2\u4e0a\u91d1\u984d\nmon_shop_item_sales = sales_train_x_no_out[\n    ['date_block_num','shop_id','item_id','date_sales']\n].groupby(\n    ['date_block_num','shop_id','item_id'],\n    as_index=False\n).sum().rename(columns={'date_sales':'mon_shop_item_sales'})","082734ae":"#test\u306b\u542b\u307e\u308c\u308bID\u306b\u9650\u5b9a\u3057\u305f\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n#ID\u3054\u3068\u306e\u6708\u3054\u3068\u306e\u8ca9\u58f2\u6570\u3092\u8868\u793a\u3059\u308b\u3082\u306e\u306e\u539f\u578b\ntrain_ID_only = pd.DataFrame()\nfor i in range(35):\n    mid = test[['shop_id','item_id']]\n    mid['date_block_num'] = i\n    train_ID_only = pd.concat([train_ID_only,mid],axis=0)\ntrain_ID_only","9b8e6a3e":"#ID\u3054\u3068\u306e\u6708\u5225\u8ca9\u58f2\u6570\ntrain = pd.merge(\n    train_ID_only,\n    sales_train_by_month,\n    on=['date_block_num','shop_id','item_id'],\n    how='left'\n)\n#\u6708\u5225\u58f2\u4e0a\u984d\u306e\u8ffd\u52a0\ntrain = pd.merge(\n    train,\n    mon_shop_item_sales,\n    on=['date_block_num','shop_id','item_id'],\n    how='left'\n)\ntrain","0364d95c":"#item_category_id\u306e\u60c5\u5831\u3082\u8ffd\u52a0\ntrain = pd.merge(\n    train,\n    items[['item_id','item_category_id']],\n    on='item_id',\n    how='left'\n)\ntrain","b7c358dd":"#\u6708\u5225\u306e\u58f2\u4e0a\u6570\u306e\u30b0\u30e9\u30d5\u3092\u8868\u793a\nplt_df_1 = train.groupby(\n    ['date_block_num'],\n    as_index=False\n).sum()\nplt.figure(figsize=(20, 10))\nsns.lineplot(x='date_block_num',y='mon_shop_item_cnt',data=plt_df_1)\nplt.title('Montly item counts')","42d53d55":"#\u6708\u5225\u58f2\u4e0a\u984d\nplt_df_2 = train.groupby(\n    ['date_block_num'],\n    as_index=False\n).sum()\nplt.figure(figsize=(20, 10))\nsns.lineplot(x='date_block_num',y='mon_shop_item_sales',data=plt_df_2)\nplt.title('Montly item counts')","33069e8c":"#\u5236\u9650\u4e8b\u9805\ntrain['mon_shop_item_cnt'] = train['mon_shop_item_cnt'].clip(0,20)","37076170":"# \u30e9\u30b0\u751f\u6210\u5bfe\u8c61\nlag_col_list = ['mon_shop_item_cnt', 'mon_shop_item_sales']\n# \u30e9\u30b0\u30ea\u30b9\u30c8(1\u30f6\u6708\u524d\u30012\u30f6\u6708\u524d\u30013\u30f6\u6708\u524d\u30014\u30f6\u6708\u524d\u30015\u30f6\u6708\u524d\u30016\u30f6\u6708\u524d\u30019\u30f6\u6708\u524d\u300112\u30f6\u6708\u524d)\nlag_num_list = [1,2,3,4,5,6,12]\n\n# shop_id*item_id*date_block_num\u3067\u30bd\u30fc\u30c8\ntrain = train.sort_values(\n    ['shop_id', 'item_id', 'date_block_num'],\n    ascending=[True, True,True]\n).reset_index(drop=True)\n\n# \u30e9\u30b0\u7279\u5fb4\u91cf\u306e\u751f\u6210\nfor lag_col in lag_col_list:\n    for lag in lag_num_list:\n        set_col_name =  lag_col + '_' +  str(lag)\n        df_lag = train[['shop_id', 'item_id','date_block_num',lag_col]].sort_values(\n            ['shop_id', 'item_id','date_block_num'],\n            ascending=[True, True,True]\n        ).reset_index(drop=True).shift(lag).rename(columns={lag_col: set_col_name})\n        train = pd.concat([train, df_lag[set_col_name]], axis=1)\ntrain","a7df52bf":"train = train.fillna(0)","860f3912":"# \u30e9\u30b0\u3067\u6700\u592712\u30f6\u6708\u524d\u306e\u58f2\u4e0a\u6570\u3092\u4f7f\u7528\u3059\u308b\u305f\u30812014\u5e741\u6708\u4ee5\u964d\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\ntrain_ = train[(train['date_block_num']<=32) & (train['date_block_num']>=12)].reset_index(drop=True)\nval_ = train[train['date_block_num']==33].reset_index(drop=True)\ntest_ = train[train['date_block_num']==34].reset_index(drop=True)\n\n# \u30e2\u30c7\u30eb\u306b\u5165\u529b\u3059\u308b\u7279\u5fb4\u91cf\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\ntrain_y = train_['mon_shop_item_cnt']\ntrain_X = train_.drop(columns=['date_block_num','mon_shop_item_cnt','mon_shop_item_sales'])\nval_X = val_.drop(columns=['date_block_num','mon_shop_item_cnt','mon_shop_item_sales'])\nval_y = val_['mon_shop_item_cnt']\ntest_X = test_.drop(columns=['date_block_num', 'mon_shop_item_cnt','mon_shop_item_sales'])","565b686c":"from lightgbm.sklearn import LGBMRegressor\nfrom lightgbm import plot_importance\n\ngbm = LGBMRegressor(n_estimators=10000, early_stopping_rounds=100, n_jobs=-1)\ngbm.fit(train_X, train_y,\n       eval_metric='rmse',\n       eval_set=(val_X, val_y))\n#\u3053\u308c\u30670.85\u3068\u304b\u306a\u3089\u671f\u5f85\u3067\u304d\u308b\u306e\u304b\u3082","d85536e0":"from optuna.integration import lightgbm as lgb\nfrom lightgbm import plot_importance\nimport time","3b366951":"ts = time.time()\n\ndtrain = lgb.Dataset(train_X, label=train_y)\neval_data = lgb.Dataset(val_X, label=val_y)\n\nparam = {\n        'objective': 'regression',\n        'metric': 'rmse',\n        'verbosity': -1,\n        'boosting_type': 'gbdt',\n    }\n\nbest = lgb.train(param, \n                 dtrain,\n                 valid_sets=eval_data,\n                 early_stopping_rounds=50)\n\ntime.time() - ts","76ba6730":"print(best.params)\nprint(best.best_iteration)\nprint(best.best_score)","8da47ba1":"plt.figure(figsize=(20, 10))\nsns.barplot(\n    x=gbm.feature_importances_,\n    y=train_X.columns.values\n)\nplt.title('Importance of features')","0695b6ae":"test_X.head()","786073fc":"test_y = best.predict(test_X)\ntest_X['item_cnt_month'] = test_y\nsubmission = pd.merge(\n    test,\n    test_X[['shop_id','item_id','item_cnt_month']],\n    on=['shop_id','item_id'],\n    how='left'\n)\n# \u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\nsubmission[['ID','item_cnt_month']].to_csv('submission.csv', index = False)","9e3ac0bb":"lightGBM\u5b9f\u88c5"}}