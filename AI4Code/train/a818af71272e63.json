{"cell_type":{"14b6ace7":"code","94b41761":"code","d3a7b42a":"code","7748f9d0":"code","51f47259":"code","5964b11b":"code","f3a1b744":"code","30089041":"code","6e3d4610":"code","c2a43e02":"code","51610cfa":"code","44407646":"code","ee9c6002":"code","61b69c5c":"code","9fe1ad44":"code","83ba2a88":"code","c4b4ceb2":"code","dcd1347c":"code","e9029d1c":"code","cd99a1f9":"markdown","5ade7cc3":"markdown","d9ae8a80":"markdown","0ed14e43":"markdown","e9857ad9":"markdown","808cfb45":"markdown","4a2615b8":"markdown","d1469ad0":"markdown"},"source":{"14b6ace7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom kaggle_datasets import KaggleDatasets\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input,Dropout,GlobalAveragePooling2D,Dense,Conv2D\nfrom tensorflow.keras.models import Model,load_model\nfrom tensorflow.keras.optimizers import Adam,Adamax\nfrom tensorflow.keras.callbacks import ModelCheckpoint,ReduceLROnPlateau\nfrom sklearn.model_selection import train_test_split","94b41761":"main_path='..\/input\/plant-pathology-2020-fgvc7\/'\ntrain_df=pd.read_csv(os.path.join(main_path,'train.csv'))\ntest_df=pd.read_csv(os.path.join(main_path,'test.csv'))","d3a7b42a":"DIMS=(512,512,3)\nEPOCHS=50","7748f9d0":"print('Train Datashape: ',train_df.shape)\ntrain_df.head(10)","51f47259":"sns.distplot(train_df['healthy'])","5964b11b":"sns.distplot(train_df['rust'])","f3a1b744":"sns.distplot(train_df['scab'])","30089041":"#Plotting some images\nfig=plt.figure(figsize=(10,10))\nrows,cols=3,3\nfor i in range(1,rows*cols+1):\n    img=cv2.imread(os.path.join(main_path,'images',train_df.loc[i,'image_id']+'.jpg'))\n    img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    fig.add_subplot(rows,cols,i)\n    plt.imshow(img)\n    plt.title([train_df.loc[i,'healthy'],train_df.loc[i,'multiple_diseases'],\n              train_df.loc[i,'rust'],train_df.loc[i,'scab']])\nplt.show()","6e3d4610":"print(\"Tensorflow version \" + tf.__version__)\nAUTO = tf.data.experimental.AUTOTUNE","c2a43e02":"tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\nprint('Running on TPU ', tpu.master())\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\n\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\ngcs_path = KaggleDatasets().get_gcs_path()","51610cfa":"def format_path(st):\n    return gcs_path + '\/images\/' + st + '.jpg'\n\ntrain_data,val_data=train_test_split(train_df,test_size=0.2)\n\ntrain_paths = train_data.image_id.apply(format_path).values\nval_paths = val_data.image_id.apply(format_path).values\n\ntrain_labels = train_data.loc[:, 'healthy':].values\nval_labels = val_data.loc[:, 'healthy':].values","44407646":"def decode_image(filename,label=None,image_size=(DIMS[0],DIMS[1])):\n    bits=tf.io.read_file(filename)\n    img=tf.image.decode_jpeg(bits,channels=3)\n    img=tf.cast(img,tf.float32)\/255.0\n    img=tf.image.resize(img,image_size)\n    if label is None:\n        return img\n    else:\n        return img, label\n    \ndef data_augment(image, label=None):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    image = tf.image.adjust_brightness(image,0.2)\n    image = tf.image.rot90(image)\n    \n\n    if label is None:\n        return image\n    else:\n        return image, label","ee9c6002":"train_dataset=(tf.data.Dataset.from_tensor_slices((train_paths,train_labels)).map(decode_image,num_parallel_calls=AUTO)\n               .map(data_augment,num_parallel_calls=AUTO).repeat()\n              .shuffle(13)\n              .batch(BATCH_SIZE).prefetch(AUTO))\n\nval_dataset=(tf.data.Dataset.from_tensor_slices((val_paths,val_labels))\n             .map(decode_image,num_parallel_calls=AUTO)\n             .shuffle(13)\n             .batch(BATCH_SIZE)\n             .cache()\n             .prefetch(AUTO))","61b69c5c":"with strategy.scope():\n    inp=Input(shape=DIMS)\n    base_feat=tf.keras.applications.DenseNet121(weights='imagenet',include_top=False)(inp)\n    x=GlobalAveragePooling2D()(base_feat)\n    out=Dense(4,activation='sigmoid')(x)\n    model=Model(inp,out)\n    model.compile(loss='binary_crossentropy',optimizer='Adam',metrics=['acc'])\n","9fe1ad44":"STEPS_PER_EPOCH = train_labels.shape[0] \/\/ BATCH_SIZE\nmc=ModelCheckpoint('classifier.h5',monitor='val_loss',save_best_only=True,verbose=1,period=1)\nrop=ReduceLROnPlateau(monitor='val_loss',min_lr=0.000001,patience=3,mode='min')","83ba2a88":"history=model.fit(train_dataset,epochs=EPOCHS,steps_per_epoch=STEPS_PER_EPOCH,validation_data=val_dataset,\n                 callbacks=[mc,rop])","c4b4ceb2":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'b',color='red', label='Training acc')\nplt.plot(epochs, val_acc, 'b',color='blue', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'b', color='red', label='Training loss')\nplt.plot(epochs, val_loss, 'b',color='blue', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","dcd1347c":"model=load_model('classifier.h5')\ntest_paths = test_df.image_id.apply(format_path).values\ntest_dataset=(tf.data.Dataset.from_tensor_slices(test_paths)\n             .map(decode_image,num_parallel_calls=AUTO)\n             .batch(BATCH_SIZE))\npreds=model.predict(test_dataset,verbose=1)","e9029d1c":"sample_sub=pd.read_csv('..\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv')\nsample_sub.loc[:, 'healthy':] = preds\nsample_sub.to_csv('submission.csv', index=False)\nsample_sub.head()","cd99a1f9":"**Import Libraries**","5ade7cc3":"**Test Predictions**","d9ae8a80":"**Model**\n* Base feature extractor is DenseNet121","0ed14e43":"**TPU configurations**","e9857ad9":"**Define Some hyperparameters**","808cfb45":"**Read DataFrames**","4a2615b8":"**From here,We will take a look at dataset and class distribution**","d1469ad0":"**Transform input data to TF dataset**"}}