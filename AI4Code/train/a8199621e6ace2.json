{"cell_type":{"e6d8bd19":"code","1590962e":"code","86fdcad6":"code","10f7e9ac":"code","96e3e601":"code","1ad82eac":"code","083bf3b5":"code","52e83f41":"code","40637cfd":"code","dc39e35a":"code","2d7112b4":"code","de0a0a79":"code","c852a7bf":"code","5e85a8fe":"code","47e0cd60":"code","9e96aa3a":"code","d03ba3d0":"code","d188bb14":"code","847deecf":"code","2acec937":"code","62ace5e1":"code","94e77958":"code","b9856f48":"code","35dc0986":"code","bc23a30e":"code","22170167":"code","934e842e":"code","ac837952":"code","cf5af3ff":"code","f9304d70":"markdown","dac9bffa":"markdown","aee4ff16":"markdown","a0ec1e52":"markdown","9341d725":"markdown","f19330a8":"markdown","af6ef967":"markdown","74e182ec":"markdown","54ef75c9":"markdown","10d67466":"markdown"},"source":{"e6d8bd19":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import classification_report, confusion_matrix","1590962e":"tf.random.set_seed(100)","86fdcad6":"data = pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')","10f7e9ac":"data","96e3e601":"data.info()","1ad82eac":"data","083bf3b5":"data['Medal'] = data['Medal'].apply(lambda x: 1 if str(x) != 'nan' else 0)","52e83f41":"data = data.drop(['ID', 'Name', 'Games'], axis=1)","40637cfd":"data.isna().mean()","dc39e35a":"data.groupby(['Medal', 'Sex']).mean().astype(np.int)","2d7112b4":"for column in ['Age', 'Height', 'Weight']:\n    data[column] = data.groupby(['Medal', 'Sex'])[column].apply(lambda x: x.fillna(x.mean()).astype(np.int))","de0a0a79":"print(\"Total missing values:\", data.isna().sum().sum())","c852a7bf":"data","5e85a8fe":"{column: len(data[column].unique()) for column in data.select_dtypes('object').columns}","47e0cd60":"def binary_encode(df, columns, positive_values):\n    df = df.copy()\n    for column, positive_value in zip(columns, positive_values):\n        df[column] = df[column].apply(lambda x: 1 if x == positive_value else 0)\n    return df\n\ndef onehot_encode(df, columns, prefixes):\n    df = df.copy()\n    for column, prefix in zip(columns, prefixes):\n        dummies = pd.get_dummies(df[column], prefix=prefix)\n        df = pd.concat([df, dummies], axis=1)\n        df = df.drop(column, axis=1)\n    return df","9e96aa3a":"data = binary_encode(\n    data,\n    columns=['Sex', 'Season'],\n    positive_values=['M', 'Summer']\n)\n\ndata = onehot_encode(\n    data,\n    columns=['Team', 'NOC', 'City', 'Sport', 'Event'],\n    prefixes=['T', 'N', 'C', 'S', 'E']\n)","d03ba3d0":"print(\"Remaining non-numeric columns:\", len(data.select_dtypes('object').columns))","d188bb14":"corr = data.loc[:, :'Medal'].corr()\n\nplt.figure(figsize=(12, 10))\nsns.heatmap(corr, annot=True, vmin=-1.0, cmap='mako')\nplt.show()","847deecf":"data","2acec937":"y = data['Medal'].copy()\nX = data.drop('Medal', axis=1).copy()","62ace5e1":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","94e77958":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=100)","b9856f48":"X.shape","35dc0986":"print(\"Class Distribution (Positive to Negative): {:.1f}% \/ {:.1f}%\".format(y_train.mean() * 100, (1 - y_train.mean()) * 100))","bc23a30e":"inputs = tf.keras.Input(shape=(X.shape[1]))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs, outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\n        'accuracy',\n        tf.keras.metrics.AUC(name='auc')\n    ]\n)\n\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=32,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","22170167":"model.evaluate(X_test, y_test)","934e842e":"y_true = np.array(y_test)\ny_pred = np.squeeze(np.array(model.predict(X_test) >= 0.5, dtype=np.int))","ac837952":"print(\"Classification Report:\\n\\n\", classification_report(y_true, y_pred))","cf5af3ff":"print(\"Confusion Matrix:\\n\", confusion_matrix(y_true, y_pred))","f9304d70":"# Training","dac9bffa":"# Creating Labels","aee4ff16":"# Visualizing Correlations","a0ec1e52":"# Encoding","9341d725":"# Getting Started","f19330a8":"# Cleaning","af6ef967":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/kjdVOeV0Ytw","74e182ec":"# Results","54ef75c9":"# Splitting\/Scaling","10d67466":"# Task for Today  \n\n***\n\n## Olympic Medal Prediction  \n\nGiven *data about Olympic athletes*, let's try to predict whether a given competitor will be a **medal winner** or not.\n\nWe will use a TensorFlow ANN to make our predictions."}}