{"cell_type":{"a0801d18":"code","5b82b53c":"code","6a801e2d":"code","0fd7f63b":"code","0f8101a3":"code","c39bdc19":"code","8f5113e4":"code","08db03ad":"code","3204dff2":"code","74680a44":"code","2f818aa5":"code","8c566dcf":"code","c6a4aa6f":"code","7acf6bf6":"code","9bb49391":"code","adc3fad2":"code","0a6aabd1":"code","b65bc820":"code","ff2f07f7":"code","49eb1ad8":"code","1c4729ee":"code","406d3aae":"code","65ce9b68":"code","f5f7c6fc":"code","043fe81c":"code","2767d1d4":"code","1080f68d":"code","0c970cbd":"code","373b60f5":"code","524fbed6":"code","94ed0ac3":"code","c9a8074d":"code","5e3b6b1c":"code","98dcd37d":"code","f44a5031":"markdown","4217e4ca":"markdown","1647bffa":"markdown","6a168b95":"markdown","0ee2c5af":"markdown","17fb8211":"markdown","e90c7cdc":"markdown","9ef611c3":"markdown","22d3aa18":"markdown","2a66a159":"markdown","c3a6a1ef":"markdown","9fe20a0b":"markdown","7ee78225":"markdown","56f2defa":"markdown","68ccb1f4":"markdown","bfce2f55":"markdown","d68c02f4":"markdown","8ab3d2f4":"markdown","23a7fd14":"markdown","66b3acf7":"markdown","6223f65e":"markdown","74753714":"markdown","5d957ce3":"markdown","7c62cd43":"markdown"},"source":{"a0801d18":"import numpy as np # for math operations\nimport cv2 # for image reading and conversions\nimport matplotlib.pyplot as plt # for image display\nimport os # for file handling\nimport io # for handling Bytes data\nfrom PIL import Image # for image data handling\nfrom urllib.request import urlopen # to read data from a url\n\n# read data files from the Tea-Time dataset\nfiles = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        files.append(str(os.path.join(dirname, filename)))\nfiles.sort()\nprint(files[0])","5b82b53c":"# Read an image from a URL\nURL = 'https:\/\/raw.githubusercontent.com\/RajkumarGalaxy\/dataset\/master\/Images\/mountain.jpg'\nreq = urlopen(URL)\nfile = io.BytesIO(req.read())\n# convert it to grayscale\nim = Image.open(file).convert('L')\n# transform it into an array\nim = np.asarray(im)\n# display the image\nplt.imshow(im, cmap='gray', vmin=0, vmax=255)\nplt.title('Original Image', c='r')\nplt.show()","6a801e2d":"dark = im - 70\nplt.imshow(dark, cmap='gray', vmin=0, vmax=255)\nplt.title('Darkened Image', c='r')\nplt.show()","0fd7f63b":"# Read another image from a URL\nURL = 'https:\/\/raw.githubusercontent.com\/RajkumarGalaxy\/dataset\/master\/Images\/lake.jpg'\nreq = urlopen(URL)\nfile = io.BytesIO(req.read())\n# convert it to grayscale\nim = Image.open(file).convert('L')\n# transform it into an array\nim = np.asarray(im)\n# display the image\nplt.imshow(im, cmap='gray', vmin=0, vmax=255)\nplt.title('Original Image', c='r')\nplt.show()","0f8101a3":"bright = im + 70\nplt.imshow(bright, cmap='gray', vmin=0, vmax=255)\nplt.title('Brightened Image', c='r')\nplt.show()","c39bdc19":"gain = 1.4\nhigh_contrast = im * gain\nplt.imshow(high_contrast, cmap='gray', vmin=0, vmax=255)\nplt.title('Contrast Enhanced Image, Gain = %1.1f'%gain, c='r')\nplt.show()","8f5113e4":"# a different gain\ngain = 2.0\nhigh_contrast = im * gain\nplt.imshow(high_contrast, cmap='gray', vmin=0, vmax=255)\nplt.title('Contrast Enhanced Image, Gain = %1.1f'%gain, c='r')\nplt.show()","08db03ad":"img = Image.open(files[28])\nimg = np.asarray(img)\nplt.imshow(img)\nplt.title('Original Image', c='g')\nplt.show()","3204dff2":"vert = img[::-1, :, :]\nplt.imshow(vert)\nplt.title('Vertically Mirrored Image', c='g')\nplt.show()","74680a44":"hori = img[:, ::-1, :]\nplt.imshow(hori)\nplt.title('Horizontally Mirrored Image', c='g')\nplt.show()","2f818aa5":"flipped = img[::-1, ::-1, :]\nplt.imshow(flipped)\nplt.title('Double Flipped Image', c='g')\nplt.show()","8c566dcf":"bgr = img[:, :, ::-1]\nplt.imshow(bgr)\nplt.title('BGR Image', c='g')\nplt.show()","c6a4aa6f":"img = Image.open(files[42])\nimg = np.asarray(img)\nr, g, b = img[:,:,0],  img[:,:,1],  img[:,:,2]\nplt.imshow(r, cmap='gray', vmin=0, vmax=255)\nplt.title('R-component of Image', c='g')\nplt.show()\n\nplt.imshow(g, cmap='gray', vmin=0, vmax=255)\nplt.title('G-component of Image', c='g')\nplt.show()\n\nplt.imshow(b, cmap='gray', vmin=0, vmax=255)\nplt.title('B-component of Image', c='g')\nplt.show()","7acf6bf6":"r","9bb49391":"b","adc3fad2":"g","0a6aabd1":"# Read an image from a URL\nURL = 'https:\/\/raw.githubusercontent.com\/RajkumarGalaxy\/dataset\/master\/Images\/mountain.jpg'\nreq = urlopen(URL)\nfile = io.BytesIO(req.read())\n# convert it to grayscale\nim = Image.open(file).convert('L')\n# transform it into an array\nim = np.asarray(im)\n# display the image\nplt.imshow(im, cmap='gray', vmin=0, vmax=255)\nplt.title('Original Image', c='r')\nplt.show()","b65bc820":"low = im.min()\nhigh = im.max()\nprint(low, high)","ff2f07f7":"factor = 255 \/ (high-low)\ndarkened = im - low \nstretched = darkened * factor\nplt.imshow(stretched, cmap='gray', vmin=0, vmax=255)\nplt.title('Contrast Stretched Image', c='r')\nplt.show()","49eb1ad8":"stretched.min(), stretched.max()","1c4729ee":"img = Image.open(files[103])\nimg = np.asarray(img)\nplt.imshow(img)\nplt.title('Original Image', c='g')\nplt.show()","406d3aae":"# What is the shape of the image?\nimg.shape","65ce9b68":"# Split R, G and B components to do histogram equalization separately\nr, g, b = img[:,:,0],  img[:,:,1],  img[:,:,2]","f5f7c6fc":"# Histogram of Red component\nr_count = np.unique(r, return_counts = True)\nr_count = dict(np.asarray(r_count).T)\nr_hist = [0]*256\nfor i in r_count.keys():\n    r_hist[i] = r_count[i]\nplt.plot(r_hist, '-r')\nplt.title('Histogram of Red Component')\nplt.xlabel('Intensity Value')\nplt.ylabel('Frequency')\nplt.show()","043fe81c":"# Histogram of Green component\ng_count = np.unique(g, return_counts = True)\ng_count = dict(np.asarray(g_count).T)\ng_hist = [0]*256\nfor i in g_count.keys():\n    g_hist[i] = g_count[i]\nplt.plot(g_hist, '-g')\nplt.title('Histogram of Green Component')\nplt.xlabel('Intensity Value')\nplt.ylabel('Frequency')\nplt.show()","2767d1d4":"# Histogram of Blue component\nb_count = np.unique(b, return_counts = True)\nb_count = dict(np.asarray(b_count).T)\nb_hist = [0]*256\nfor i in b_count.keys():\n    b_hist[i] = b_count[i]\nplt.plot(b_hist, '-b')\nplt.title('Histogram of Blue Component')\nplt.xlabel('Intensity Value')\nplt.ylabel('Frequency')\nplt.show()","1080f68d":"# Histogram of R, G, B components\nplt.plot(r_hist, '--r', label='Red')\nplt.plot(g_hist, '--g', label='Green')\nplt.plot(b_hist, '--b', label='Blue') \nplt.title('Histogram of Intensity Values')\nplt.xlabel('Intensity Value')\nplt.ylabel('Frequency')\nplt.legend()\nplt.show()\n","0c970cbd":"# Cumulative Distribution of Histogram\n# red \nr_cum = np.cumsum(r_hist)\/np.prod(r.shape)*255\nplt.plot(r_cum, '--r', label='red')\n# green\ng_cum = np.cumsum(g_hist)\/np.prod(g.shape)*255\nplt.plot(g_cum, '--g', label='green')\n# blue\nb_cum = np.cumsum(b_hist)\/np.prod(b.shape)*255\nplt.plot(b_cum, '--b', label='blue')\n\nplt.title('Cumulative Distribution of Histogram')\nplt.xlabel('Original Intensity Value')\nplt.ylabel('Histogram Equalized Intensity Value')\nplt.legend()\nplt.show()","373b60f5":"r.shape","524fbed6":"# Histogram Equalized Image\n# create a new red array of size equal to original red array\nr_new = np.zeros_like(r)\n# replace the values with histogram equalized values\nfor i in range(r.shape[0]):\n    for j in range(r.shape[1]):\n        r_new[i][j] = r_cum[r[i][j]]\n\n# create a new green array of size equal to original green array\ng_new = np.zeros_like(g)\n# replace the values with histogram equalized values\nfor i in range(g.shape[0]):\n    for j in range(g.shape[1]):\n        g_new[i][j] = g_cum[g[i][j]]\n\n# create a new blue array of size equal to original blue array\nb_new = np.zeros_like(b)\n# replace the values with histogram equalized values\nfor i in range(b.shape[0]):\n    for j in range(b.shape[1]):\n        b_new[i][j] = b_cum[b[i][j]]\n\nr_hist_new = np.asarray(np.unique(r_new, return_counts=True)[1])\nplt.plot(r_hist_new, '--r', label='red') \n\ng_hist_new = np.asarray(np.unique(g_new, return_counts=True)[1])\nplt.plot(g_hist_new, '--g', label='green') \n\nb_hist_new = np.asarray(np.unique(b_new, return_counts=True)[1])\nplt.plot(b_hist_new, '--b', label='blue')\n\nplt.show()\n\n#equalized = np.asarray(r_cum, g_cum, b_cum)\n#equalized.shape","94ed0ac3":"# merge equalized R, G, B components and reshape \nequalized = np.dstack((r_new, g_new, b_new)) \nequalized.shape","c9a8074d":"f, ax = plt.subplots(1,2, figsize=(12,8))\nax[0].imshow(img)\nax[0].set_title('Original Image')\nax[1].imshow(equalized)\nax[1].set_title('Histogram Equalized Image')\nplt.show() ","5e3b6b1c":"# consider a grayscale image\nimg = cv2.imread(files[109], 0)\nplt.imshow(img, cmap='gray', vmin=0, vmax=255)\nplt.show()","98dcd37d":"# reverse intensity values by subtracting each intensity value from the Max value\nreverse = 255 - img\n# plot images\nf, ax = plt.subplots(1,2, figsize=(12,8))\nax[0].imshow(img, cmap='gray', vmin=0, vmax=255)\nax[0].set_title('Original Image')\nax[1].imshow(reverse, cmap='gray', vmin=0, vmax=255)\nax[1].set_title('Contrast Reversed Image')\nplt.show() ","f44a5031":"What are the minimum and maximum intensity values?","4217e4ca":"Brightness and Contrast can be controlled by scaling\/ increasing\/ decreasing intensity values. It is a point operation.","1647bffa":"### 6. Contrast Reversing\n\nContrast can be reversed to get cool images of reversed intensities","6a168b95":"#### Thank you for your valuable time!","0ee2c5af":"Vertical Mirroring","17fb8211":"## 3. Color Analysis","e90c7cdc":"# Computer Vision For Everyone With Python\n\n### In this Computer Vision series, I publish a set of Python hands-on articles that cover both traditional image processing and deep learning based computer vision!\n\n### I welcome you all!","9ef611c3":"Horizontal mirroring","22d3aa18":"## 2. Image Mirroring\n\nImages can be mirrored horizontally or vertically or even both by flipping the intensity values within the array.","2a66a159":"Let's create a dark image by reducing the intensity values by 70 point-wise!","c3a6a1ef":"#### --------------------------------------------------\n#### *Articles So Far In This Series*\n#### -> [[Computer Vision] Basic Image Processing](https:\/\/www.kaggle.com\/rajkumarl\/computer-vision-basic-image-processing)\n#### -> [[Computer Vision] Linear Filtering](https:\/\/www.kaggle.com\/rajkumarl\/computer-vision-linear-filtering)\n#### --------------------------------------------------","9fe20a0b":"Double Flipping (= horizontal mirroring + vertical mirroring)","7ee78225":"Datasets Used:\n\n1. [Tea Time Dataset - Kaggle](https:\/\/www.kaggle.com\/rajkumarl\/tea-time)\n\n2. [Landscape Images - Github](https:\/\/github.com\/RajkumarGalaxy\/dataset\/tree\/master\/Images)\n\nReferences:\n\n1. [Computer Vision: Algorithms and Applications, 2nd ed.](https:\/\/szeliski.org\/Book\/)\n\n2. [Histogram Equalization - Wiki](https:\/\/en.wikipedia.org\/wiki\/Histogram_equalization)\n\n3. [Color Space - Wiki](https:\/\/en.wikipedia.org\/wiki\/Color_space)","56f2defa":"Great! The intensity values are stretched to 0 and 255 that help human eyes to distinguish objects in an image clearly.","68ccb1f4":"Multiplicative gain enhances the image to attain a cool view to human eyes!","bfce2f55":"R, G, B Components of Image","d68c02f4":"Let's make the above lake image brighter by increasing the intensity values by 70 point-wise!","8ab3d2f4":"Histogram equalized image has an enriched look compared to the original image!","23a7fd14":"RGB to BGR Flipping","66b3acf7":"The original lake image seems to have a low contrast among the objects. We may enrich the contrast by some multiplicative gain!","6223f65e":"The possible range of intensity values is [0, 255] both inclusive. In Contrast stretching, the actual minimum value will be stretched to 0 and the actual maximum value will be stretched to 255.","74753714":"## 4. Contrast Stretching","5d957ce3":"## 5. Histogram Equalization\n\nHistogram is the plot of count of each intensity value ranging from 0 to 255 in an 8-bit image. In general, the count of certain intensity values will be high and of some others will be low, making an non-equalized pattern. Histogram equalization is the process of attaining a flat histogram by stretching the intensity values meaningfully. To do so, cumulative distribution of histogram is calculated and the intensity values are mapped to it to obtain histogram-equalized-image.","7c62cd43":"## 1. Brightness and Contrast Adjustments"}}