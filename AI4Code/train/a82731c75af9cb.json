{"cell_type":{"821b02c0":"code","892289d0":"code","31ce648a":"code","4862969b":"code","6037b602":"code","713a7fe7":"code","b27980c6":"code","cd0018b5":"code","efba46e4":"code","8912c5dd":"code","7e59c3db":"code","3ca7f178":"code","dc3b1680":"code","c556a497":"code","feb48043":"code","02686b59":"code","30fc20d6":"code","afcd8ae1":"markdown","71b79856":"markdown","6fc37a97":"markdown","d7843eb6":"markdown","186ec6c3":"markdown","c6fdeec4":"markdown","a1304286":"markdown","d0e6af30":"markdown","7ede5563":"markdown","2b1c9f5f":"markdown","544992cd":"markdown","b79fe28a":"markdown","a9d3d526":"markdown","d25498fb":"markdown","96d22d8d":"markdown","52e7622c":"markdown","c551a4eb":"markdown","feb96e6b":"markdown","e4529a55":"markdown"},"source":{"821b02c0":"\n# imports\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport pandas as pd \n%matplotlib inline\n\n# fetch datasets\ncompetitions = pd.read_csv('..\/input\/meta-kaggle\/Competitions.csv')\ndatasets = pd.read_csv('..\/input\/meta-kaggle\/Datasets.csv')\ndataset_version = pd.read_csv('..\/input\/meta-kaggle\/DatasetVersions.csv')\nusers = pd.read_csv('..\/input\/meta-kaggle\/Users.csv')\nkernels = pd.read_csv(\"..\/input\/meta-kaggle\/Kernels.csv\")\nkernel_versions = pd.read_csv('..\/input\/meta-kaggle\/KernelVersions.csv')\nforum_topics = pd.read_csv(\"..\/input\/meta-kaggle\/ForumTopics.csv\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# to extact 2019 data\ndef year_extract_2019(df,date_column,format=\"%m\/%d\/%Y %H:%M:%S\", year_start =dt.datetime(2018,12,31,23,59,59),\n                      year_end =dt.datetime(2019,12,31,23,59,59)):\n    df[date_column] = pd.to_datetime(df[date_column], format= format)\n    mask = (df[date_column] > year_start) & (df[date_column] <= year_end)\n    return df.loc[mask]\n\n# for clickable url\ndef make_clickable_both(val): \n    title, competition_url = val.split('#')\n    return f'<a href=\"{competition_url}\">{title}<\/a>'\n","892289d0":"competitions_2019 = year_extract_2019(competitions, 'EnabledDate')\nprint(f'Total Number of Competitions Hosted in Kaggle in 2019 :{competitions_2019.shape[0]}')","31ce648a":"ax = competitions_2019['HostSegmentTitle'].value_counts().plot(kind='barh', figsize=(10,7),\n                                                 color=\"slateblue\", fontsize=13);\nax.set_alpha(0.8)\nax.set_title(\" Competitions in 2019\", fontsize=18)\nax.set_xlabel(\"Number of Competitions\", fontsize=18);\nax.set_xticks([0, 100, 200, 300, 400, 500, 600, 700, 800,900, 1000])\nfor i in ax.patches:\n    ax.text(i.get_width()+.1, i.get_y()+.31, \\\n            str(round((i.get_width()), 2)), fontsize=15, color='dimgrey')\n\n# invert for largest on top \nax.invert_yaxis()","4862969b":"df = competitions_2019.sort_values(by ='TotalSubmissions' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:10]\ndf['competition_url'] ='https:\/\/www.kaggle.com\/c\/'+df['Slug']\ndf['Competition'] = df['Title'] + '#' + df['competition_url']\ndf= df.filter(['Competition','TotalSubmissions', 'HostSegmentTitle'], axis=1)\ndf.rename(columns={'TotalSubmissions':'Total Submissions','HostSegmentTitle':'Competition Type'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Competition': make_clickable_both}).hide_index()","6037b602":"df = competitions_2019.sort_values(by ='TotalTeams' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:10]\ndf['competition_url'] ='https:\/\/www.kaggle.com\/c\/'+df['Slug']\ndf['Competition'] = df['Title'] + '#' + df['competition_url']\ndf= df.filter(['Competition','TotalTeams', 'HostSegmentTitle'], axis=1)\ndf.rename(columns={'TotalTeams':'Total Teams','HostSegmentTitle':'Competition Type'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Competition': make_clickable_both}).hide_index()","713a7fe7":"df = competitions_2019.sort_values(by ='NumPrizes' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:10]\ndf['competition_url'] ='https:\/\/www.kaggle.com\/c\/'+df['Slug']\ndf['Competition'] = df['Title'] + '#' + df['competition_url']\ndf= df.filter(['Competition','NumPrizes', 'HostSegmentTitle'], axis=1)\ndf.rename(columns={'HostSegmentTitle':'CompetitionType'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Competition': make_clickable_both}).hide_index()","b27980c6":"datasets_2019 = year_extract_2019(datasets,'CreationDate')\nprint (f'Total Number of Datasets Uploaded on Kaggle in 2019  :{ datasets_2019.shape[0]}')","cd0018b5":"df = datasets_2019.sort_values(by ='TotalDownloads' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:10]\ndf = df[['Id','CreatorUserId','TotalDownloads']]\ndf2 = dataset_version[['DatasetId','Title','Slug']].drop_duplicates(subset=['Title','Slug'])\ndf = pd.merge(df, df2, how='left', left_on=['Id'], right_on=['DatasetId'])\ndf = pd.merge(df, users, how='left', left_on=['CreatorUserId'], right_on=['Id'])\n# special case\ndf['UserName'].replace(\n    to_replace=['promptcloud'],\n    value='PromptCloudHQ',\n    inplace=True\n)\ndf['dataset_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['Slug']\ndf['Dataset'] = df['Title'] + '#' + df['dataset_url']\ndf= df.filter(['Dataset','TotalDownloads'], axis=1)\ndf.reset_index(drop=True).style.format({'Dataset': make_clickable_both}).hide_index()\n","efba46e4":"df = datasets_2019.sort_values(by ='TotalViews' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:10]\n\ndf = df[['Id','CreatorUserId','TotalViews']]\ndf2 = dataset_version[['DatasetId','Title','Slug']]\ndf = pd.merge(df, df2, how='left', left_on=['Id'], right_on=['DatasetId'])\ndf= df.drop_duplicates(subset=['Title','Slug'])\ndf = pd.merge(df, users, how='left', left_on=['CreatorUserId'], right_on=['Id'])\n\ndf['UserName'].replace(\n    to_replace=['promptcloud'],\n    value='PromptCloudHQ',\n    inplace=True\n)\n\ndf['dataset_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['Slug']\ndf['Dataset'] = df['Title'] + '#' + df['dataset_url']\ndf= df.filter(['Dataset','TotalViews'], axis=1)\ndf.reset_index(drop=True).style.format({'Dataset': make_clickable_both}).hide_index()","8912c5dd":"df = datasets_2019.sort_values(by ='TotalVotes' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:10]\ndf = df[['Id','CreatorUserId','TotalVotes']]\ndf2 = dataset_version[['DatasetId','Title','Slug']]\n\ndf = pd.merge(df, df2, how='left', left_on=['Id'], right_on=['DatasetId'])\ndf= df.drop_duplicates(subset=['Title','Slug'])\ndf = pd.merge(df, users, how='left', left_on=['CreatorUserId'], right_on=['Id'])\ndf= df.drop_duplicates(subset=['CreatorUserId','DatasetId'])\n\n\ndf['UserName'].replace(\n    to_replace=['promptcloud'],\n    value='PromptCloudHQ',\n    inplace=True\n)\n\ndf['dataset_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['Slug']\ndf['Dataset'] = df['Title'] + '#' + df['dataset_url']\ndf= df.filter(['Dataset','TotalVotes'], axis=1)\ndf.reset_index(drop=True).style.format({'Dataset': make_clickable_both}).hide_index()\n","7e59c3db":"users_2019 = year_extract_2019(users, 'RegisterDate',\"%m\/%d\/%Y\")\nperformancetier = {0 : \"Novice\",1: \"Contributor\", 2: \"Expert\", 3: \"Master\", 4: \"Grandmaster\", 5 :\"Kaggle Team Member\" }\nusers_2019['PerformanceTier'] = users_2019['PerformanceTier'].map(performancetier)\n\nprint (f'Total Number of Users Registered in Kaggle in 2019  :{ users_2019.shape[0]}')","3ca7f178":"ax = users_2019['PerformanceTier'].value_counts().plot(kind='barh', figsize=(10,7),\n                                                 color=\"slateblue\", fontsize=13);\nax.set_alpha(0.8)\nax.set_title(\" Status of Users Registered in 2019\", fontsize=18)\nax.set_xlabel(\"Number of Users \", fontsize=18);\nax.set_xticks([0, 200000, 400000, 600000, 800000, 1000000, 1200000, 1400000, 1600000 ])\n\n\n# set individual bar lables using above list\nfor i in ax.patches:\n     \n    ax.text(i.get_width()+.1, i.get_y()+.31, \\\n            str(round((i.get_width()), 2)), fontsize=15, color='dimgrey')","dc3b1680":"df = users_2019.loc[users_2019['PerformanceTier'].isin(['Master','Grandmaster'])].sort_values(by=['PerformanceTier'])\ndf['user_url'] ='https:\/\/www.kaggle.com\/'+df['UserName']\ndf['User'] = df['DisplayName'] + '#' + df['user_url']\ndf= df.filter(['User','PerformanceTier'], axis=1)\ndf.rename(columns={'PerformanceTier':'Status'}, inplace=True)\ndf.reset_index(drop=True).style.format({'User': make_clickable_both}).hide_index()","c556a497":"kernels_2019 = year_extract_2019(kernels, 'CreationDate')\nprint (f'Total Number of Kernels Created in Kaggle in 2019  :{ kernels_2019.shape[0]}')","feb48043":"df = kernels_2019.sort_values(by ='TotalVotes' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:10]\n\ndf = pd.merge(df, kernel_versions, how='left', left_on=['CurrentKernelVersionId'],\n               right_on=['Id'])\n \ndf= df[['AuthorUserId_x','CurrentUrlSlug','Title', 'TotalVotes_x']]\n\ndf = pd.merge(df, users, how='left', left_on=['AuthorUserId_x'], right_on=['Id'])\ndf['keranel_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['CurrentUrlSlug']\ndf['Kernel'] = df['Title'] + '#' + df['keranel_url']\ndf= df.filter(['Kernel','TotalVotes_x'], axis=1)\ndf.rename(columns={'TotalVotes_x':'TotalVotes'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Kernel': make_clickable_both}).hide_index()","02686b59":"df = kernels_2019.sort_values(by ='TotalViews' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:10]\n\ndf = pd.merge(df, kernel_versions, how='left', left_on=['CurrentKernelVersionId'],\n               right_on=['Id'])\n \ndf= df[['AuthorUserId_x','CurrentUrlSlug','Title', 'TotalViews']]\n\ndf = pd.merge(df, users, how='left', left_on=['AuthorUserId_x'], right_on=['Id'])\ndf['keranel_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['CurrentUrlSlug']\ndf['Kernel'] = df['Title'] + '#' + df['keranel_url']\ndf= df.filter(['Kernel','TotalViews'], axis=1)\n#df.rename(columns={'TotalVotes_x':'TotalVotes'}, inplace=True)\ndf.reset_index(drop=True).style.format({'Kernel': make_clickable_both}).hide_index()","30fc20d6":"df = kernels_2019.sort_values(by ='TotalComments' , \n                                     axis=0, ascending=False, inplace=False, \n                                     kind='quicksort', na_position='last')[:10]\n\ndf = pd.merge(df, kernel_versions, how='left', left_on=['CurrentKernelVersionId'],\n               right_on=['Id'])\n \ndf= df[['AuthorUserId_x','CurrentUrlSlug','Title', 'TotalComments']]\n\ndf = pd.merge(df, users, how='left', left_on=['AuthorUserId_x'], right_on=['Id'])\ndf['keranel_url'] ='https:\/\/www.kaggle.com\/'+df['UserName'] +'\/'+df['CurrentUrlSlug']\ndf['Kernel'] = df['Title'] + '#' + df['keranel_url']\ndf= df.filter(['Kernel','TotalComments'], axis=1)\n \ndf.reset_index(drop=True).style.format({'Kernel': make_clickable_both}).hide_index()","afcd8ae1":"####  Acknowledgment : \nI thanks Kaggle team for sharing this [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) dataset and Kaggle stalwarts specially  [shivamb](https:\/\/www.kaggle.com\/shivamb), [srk](https:\/\/www.kaggle.com\/sudalairajkumar), [kabure](https:\/\/www.kaggle.com\/kabure) for writing cool kernels on this dataset and showing how to wonderfully use this metadata. ","71b79856":"### Top 10 Most Commented kernel of the year ","6fc37a97":"<B>This is an EDA on 2019 data extract of [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) dataset. Hopefully you might come across something useful.<B\/>","d7843eb6":"### Top 10 Competitions of 2019 with most number of participated teams","186ec6c3":"### Top 10 Competitions of 2019 with most number of submissions","c6fdeec4":"### Top 10 Most Viewed Datasets of 2019","a1304286":"  Thanks for reading. Found this kernal useful ? Do give your feedback and suggestion. I have written one more similar kernal  [best-of-kaggle-in-one-place](https:\/\/www.kaggle.com\/kksienc\/best-of-kaggle-in-one-place) consolidating best of all time Kaggle data. Do checkout!","d0e6af30":"## Best of 2019 : Competitions","7ede5563":"### Top 10 Most Viewed Kernels of the year ","2b1c9f5f":"### Top 10 Most Downloaded Datasets of 2019 ","544992cd":"### Top 10 Most Voted Kernels of the year ","b79fe28a":"## <font color='brown'>As another year is comming to an end lets look back into some of the best of Kaggle @ 2019 <\/font>","a9d3d526":"### Users of The Year (Users who registered in 2019 and became Grandmaster and Master)","d25498fb":"## Best of 2019 : Kernels","96d22d8d":"## Best of 2019 : DataSets","52e7622c":"![](https:\/\/fbcgriffin.org\/wp-content\/uploads\/2018\/12\/6a00d8341c019953ef01b8d24749a5970c-600wi.jpg)\n<div align=\"center\"><font size=\"1\">Source:fbcgriffin.org<\/font><\/div>  ","c551a4eb":"### Top 10 Most Voted Datasets of 2019","feb96e6b":"### Top 10 competitions of 2019 with most number of prizes","e4529a55":"## Best of 2019 : Users"}}