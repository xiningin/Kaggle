{"cell_type":{"5d5bfa34":"code","6672dc74":"code","f194aabb":"code","337fe7e9":"code","7f416eb9":"code","7f5336b5":"code","9d41ab0d":"code","dd0f294b":"code","e315f452":"code","b3350429":"code","24ab07c3":"code","61dab0fb":"code","73ed1fd3":"code","e07f5378":"code","44c10a77":"code","defd8c06":"code","53aa4271":"code","531dd33a":"code","b6f15ece":"code","ed9276c8":"code","3d5286db":"code","4105d20b":"code","5bfcc3ad":"code","3ce05f86":"code","81763673":"code","7f5eb6b3":"code","b9814474":"markdown","18de31fc":"markdown","a86db54a":"markdown","38c5691c":"markdown","4f2f6cbb":"markdown","7c141a3d":"markdown","c2655435":"markdown","3ee2bbe6":"markdown","1d76c509":"markdown","334742cc":"markdown","21fcfa0a":"markdown","cda66752":"markdown","4176b1f2":"markdown","4bc00112":"markdown","a1e5e73d":"markdown","7088f237":"markdown","1dba53c2":"markdown","f7a7c313":"markdown","1bb7e7dd":"markdown","6c31e4a1":"markdown","057c2b55":"markdown","961fc978":"markdown"},"source":{"5d5bfa34":"import pandas as pd    ## library for playing with dataframe\nimport numpy as np    ## library for dealing with array & numeric value\nimport matplotlib.pyplot as plt   ## Visualize library\nimport seaborn as sns \n\n## make notebook more clean by not show the warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n## make dataframe show only 2 digits float \npd.options.display.float_format = '{:.2f}'.format\n\n\n%matplotlib inline","6672dc74":"data = pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')","f194aabb":"data.head()","337fe7e9":"data.columns","7f416eb9":"plt.rcParams['figure.figsize'] = 10,10\nlabels = data['hotel'].value_counts().index.tolist()\nsizes = data['hotel'].value_counts().tolist()\nexplode = (0, 0.2)\ncolors = ['indianred','khaki']\n\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=False, startangle=30)\nplt.axis('equal')\nplt.tight_layout()\nplt.title(\"How many type of hotel in this dataset\", fontdict=None, position= [0.48,1], size = 'xx-large')\nplt.show()","7f5336b5":"plt.rcParams['figure.figsize'] = 15,6\nplt.hist(data['lead_time'].dropna(), bins=30,color = 'paleturquoise' )\n\nplt.ylabel('Count')\nplt.xlabel('Time (days)')\nplt.title(\"Lead time distribution \", fontdict=None, position= [0.48,1.05], size = 'xx-large')\nplt.show()","9d41ab0d":"plt.rcParams['figure.figsize'] = 15,8\n\nheight = data['is_canceled'].value_counts().tolist()\nbars =  ['Not Cancel','Cancel']\ny_pos = np.arange(len(bars))\ncolor = ['lightgreen','salmon']\nplt.bar(y_pos, height , width=0.7 ,color= color)\nplt.xticks(y_pos, bars)\nplt.xticks(rotation=90)\nplt.title(\"How many booking was cancel\", fontdict=None, position= [0.48,1.05], size = 'xx-large')\nplt.show()\n","dd0f294b":"plt.rcParams['figure.figsize'] = 15,6\n\nplt.hist(data['stays_in_week_nights'][data['stays_in_week_nights'] < 10].dropna(), \n         bins=8,alpha = 1,color = 'lemonchiffon',label='Stays in week night' )\n\nplt.hist(data['stays_in_weekend_nights'][data['stays_in_weekend_nights'] < 10].dropna(),\n         bins=8, alpha = 0.5,color = 'blueviolet',label='Stays in weekend night' )\n\nplt.ylabel('Count')\nplt.xlabel('Time (days)')\nplt.title(\"Stays in Week Night vs Weekend Night \", fontdict=None, position= [0.48,1.05], size = 'xx-large')\nplt.legend(loc='upper right')\nplt.show()","e315f452":"\nplt.rcParams['figure.figsize'] =10,10\nsizes = data['agent'].value_counts()[:8].tolist() + [len(data) - sum(data['agent'].value_counts()[:8].tolist())]\nlabels = [\"Agent \" + str(string) for string in data['agent'].value_counts()[:8].index.tolist()] + [\"Other\"]\n\nexplode = (0.18,0.11,0.12,0,0,0,0,0,0,0,0)\ncolors =  ['royalblue','mediumaquamarine','moccasin'] +['linen']*7 + ['oldlace']\n\nplt.pie(sizes, explode = explode, colors = colors ,labels=labels, autopct='%1.1f%%',\n        shadow=False, startangle=96)\nplt.axis('equal')\nplt.tight_layout()\nplt.title(\"Who is the best agent\", fontdict=None, position= [0.5,1], size = 'xx-large')\n\nplt.show()","b3350429":"print(\"The highest value is : \", data['adr'].max())\nprint(\"The lowest value is : \", data['adr'].min())","24ab07c3":"Q1 = data['adr'].quantile(0.25)\nQ3 = data['adr'].quantile(0.75)\nIQR = Q3 - Q1\n\nlower_bound = (Q1 - 1.5 * IQR)\nupper_bound = (Q3 + 1.5 * IQR)","61dab0fb":"without_outlier = data[(data['adr'] > lower_bound ) & (data['adr'] < upper_bound)]","73ed1fd3":"plt.boxplot(without_outlier['adr'],  notch=True,  # notch shape\n                         patch_artist=True,\n                   boxprops=dict(facecolor=\"sandybrown\", color=\"black\"),)\nplt.ylabel('ADR')\nplt.title(\"Box plot for Average Daily Rate \", fontdict=None, position= [0.48,1.05], size = 'xx-large')\n\nplt.show()","e07f5378":"plt.rcParams['figure.figsize'] = 15,8\n\nheight = data['reserved_room_type'].value_counts().tolist()\nbars =  data['reserved_room_type'].value_counts().index.tolist()\ny_pos = np.arange(len(bars))\ncolor= ['c']+['paleturquoise']*10\nplt.bar(y_pos, height , width=0.7 ,color= color)\nplt.xticks(y_pos, bars)\nplt.ylabel('Count')\nplt.xlabel('Roomtype')\nplt.title(\"How many reserves in each type of room\", fontdict=None, position= [0.48,1.05], size = 'xx-large')\nplt.show()\n","44c10a77":"data.is_canceled.value_counts()","defd8c06":"plt.rcParams['figure.figsize'] = 10,10\nlabels = ['Not','Cancel']\nsizes = data['is_canceled'].value_counts().tolist()\nexplode = (0, 0.2)\ncolors = ['dodgerblue','tomato']\n\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=False, startangle=190)\nplt.axis('equal')\nplt.tight_layout()\nplt.title(\"How many bookings were cancel\", fontdict=None, position= [0.48,1], size = 'xx-large')\nplt.show()","53aa4271":"input_information = data[['hotel','lead_time','stays_in_week_nights','stays_in_weekend_nights','adults','reserved_room_type','adr'\n                          ,'is_canceled']]","531dd33a":"input_information.shape","b6f15ece":"## Binary encoding the categorical data\n\ninput_information = pd.get_dummies(data=input_information)","ed9276c8":"input_information.shape","3d5286db":"Y_train = input_information[\"is_canceled\"]\nX_train = input_information.drop(labels = [\"is_canceled\"],axis = 1)","4105d20b":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import  cross_val_score,GridSearchCV\n\nRfclf = RandomForestClassifier(random_state=15)\nRfclf.fit(X_train, Y_train)","5bfcc3ad":"clf_score = cross_val_score(Rfclf, X_train, Y_train, cv=10)\nprint(clf_score)","3ce05f86":"clf_score.mean()","81763673":"Rfclf_fea = pd.DataFrame(Rfclf.feature_importances_)\nRfclf_fea[\"Feature\"] = list(X_train) \nRfclf_fea.sort_values(by=0, ascending=False).head()","7f5eb6b3":"g = sns.barplot(0,\"Feature\",data = Rfclf_fea.sort_values(by=0, ascending=False)[0:5], palette=\"Pastel1\",orient = \"h\")\ng.set_xlabel(\"Weight\")\ng = g.set_title(\"Random Forest\")","b9814474":"# Visualization","18de31fc":"    Seem like it has large gap between the highest value and the lowest,\n    let ignore outlier first   : )\n    I will use the simple remove outlier technique such as 1.5IQR\n[Dealing with Outlier](https:\/\/towardsdatascience.com\/ways-to-detect-and-remove-the-outliers-404d16608dba)","a86db54a":"## Reserve Room Type","38c5691c":"## Random Forest","4f2f6cbb":"## is_canceled\n\n    Value indicating if the booking was canceled (1) or not (0)","7c141a3d":"## Read the dataset","c2655435":"## Ready ? Let's go !!","3ee2bbe6":"## Agent\n\n    ID of the travel agency that made the booking","1d76c509":"## Hotel","334742cc":"## Stays in Week Night vs Weekend Night\n\n    Number of weekend nights (Saturday or Sunday) the guest stayed or booked to stay at the hotel\n    \n    Number of week nights (Monday to Friday) the guest stayed or booked to stay at the hotel","21fcfa0a":"# Hello : )\n## Welcome to my notebook\n### By Reading my notebook you will get . . .\n\n    - The roughly analysis of this dataset\n    - Simple Data Cleaning technique\n    - Some statistic technique to deal with each datatype\n    - Some colorful visualize \n    - Good start point if you want to play this dataset\n    - My Code (I hope it clean enough to use in other dataset)\n    - My thanks :)\n    ","cda66752":"![imglink](https:\/\/flightitineraryforvisa.com\/wp-content\/uploads\/2018\/12\/Hotel-Booking-1280x720.jpg)\n\n(Image taken from [imglink](https:\/\/flightitineraryforvisa.com\/wp-content\/uploads\/2018\/12\/Hotel-Booking-1280x720.jpg))","4176b1f2":"## Import some useful libraries","4bc00112":"## ADR\n\n    Average Daily Rate as defined by dividing the sum of all lodging transactions by the total number of staying nights","a1e5e73d":"\nFeel free to folk this kernel.\n\nI hope my notebook may help you as start point for this dataset.\n\nYou **upvote** will help me a lot :)\n\nThanks","7088f237":"## lead time\n\n    Number of days that elapsed between the entering date of the booking into the PMS and the arrival date","1dba53c2":"    Code of room type reserved. Code is presented instead of designation for anonymity reasons.","f7a7c313":"## Feel free to <font color=deepskyblue> FORK  <\/font> this notebook, Please  <font color=deepskyblue> UPVOTE !! <\/font> if it's helpful to you  <font color=deepskyblue> : ) <\/font>","1bb7e7dd":"    Here I just applied default Random Forest without any tuning ","6c31e4a1":"## Extract Knowledge from model","057c2b55":"## Select data to feed to the model","961fc978":"## Is Cancel ? "}}