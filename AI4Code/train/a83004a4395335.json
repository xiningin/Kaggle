{"cell_type":{"90c3693a":"code","272aacc8":"code","6d66951f":"code","cd4cb901":"code","022d6fed":"code","1005f46f":"code","ffd14739":"code","664baca1":"code","dbd259ca":"code","62fee597":"code","fbcdd563":"code","2cdcb9d0":"code","c89409d2":"code","0cc7ec68":"code","583ddadd":"code","128c4253":"code","fcb73f07":"code","38a36b2f":"code","30915b7b":"code","9b7601b3":"code","83a546bf":"code","6e317190":"markdown","f7ace9c9":"markdown","a0ca20f4":"markdown","af6feae8":"markdown","798b54b6":"markdown","970eeb43":"markdown","0ed8d5ac":"markdown","a0bbc081":"markdown","52706d57":"markdown","3be2a659":"markdown","d073ce43":"markdown","fd5ff140":"markdown","87817479":"markdown","62b115b2":"markdown","6fe2b32e":"markdown","50be35ef":"markdown","b054304b":"markdown","eeb64250":"markdown","b7659b04":"markdown","11154431":"markdown","dcc038e0":"markdown","5b9a32e3":"markdown","0130f314":"markdown","4eb01b88":"markdown","7fd7a58d":"markdown","b8bec38d":"markdown","68ad7cb4":"markdown"},"source":{"90c3693a":"#Import common modules\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport matplotlib\nimport warnings\nwarnings.filterwarnings(\"ignore\", message=\"numpy.dtype size changed\")\nwarnings.filterwarnings(\"ignore\", message=\"numpy.ufunc size changed\")\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.tools as tls\nimport plotly.graph_objs as go\n# init_notebook_mode(connected=True)\nimport plotly\n# plotly.tools.set_credentials_file(username='YazanSh', api_key='2GxEQaYp9s6UJAc0bpY5')\n# cf.go_offline()\n\n\n%matplotlib inline","272aacc8":"data = pd.read_csv('..\/input\/train.csv')\ndata.head()","6d66951f":"data.columns.to_list()","cd4cb901":"train = data.copy()","022d6fed":"train.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)","1005f46f":"missing = pd.DataFrame(train.count(), columns=['Count'])\nmissing['Missing Values'] = 891 - missing['Count']\nmissing['%Missing Values'] = (missing['Missing Values'] \/ 891) * 100\nmissing.drop('Count', axis=1, inplace=True)\nmissing = missing[missing['Missing Values'] != 0]\nmissing","ffd14739":"sns.set(rc={'figure.figsize':(11.7, 8.27)})\nsns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis')\nplt.show()","664baca1":"train.drop(['Cabin'], axis=1, inplace=True)","dbd259ca":"train.dropna(axis=0, subset=['Embarked'], inplace=True)","62fee597":"# Preparing Data for plots\n#General\ntrain.replace({'S':'Southampton', 'C':'Cherbourg', 'Q':'Queenstown'}, inplace=True)\nembarked_points = ['Cherbourg', 'Queenstown', 'Southampton']\n#Total\nembarked_count_total = train.groupby(['Embarked'], as_index=True, sort=True).count()['Survived'].to_list()\n#Sruvived\nembarked_count_survived = train[train['Survived'] == 1].groupby(['Embarked'], as_index=True, sort=True).count()['Survived']\nembarked_count_died = train[train['Survived'] == 0].groupby(['Embarked'], as_index=True, sort=True).count()['Survived']\n#Sex\nembarked_count_male = train[train['Sex'] == 'male'].groupby(['Embarked'], as_index=True, sort=True).count()['Sex']\nembarked_count_female = train[train['Sex'] == 'female'].groupby(['Embarked'], as_index=True, sort=True).count()['Sex']\n#Passenger Class\nembarked_count_Pclass1 = train[train['Pclass'] == 1].groupby(['Embarked'], as_index=True, sort=True).count()['Pclass']\nembarked_count_Pclass2 = train[train['Pclass'] == 2].groupby(['Embarked'], as_index=True, sort=True).count()['Pclass']\nembarked_count_Pclass3 = train[train['Pclass'] == 3].groupby(['Embarked'], as_index=True, sort=True).count()['Pclass']\n\n\n# Preparing figure objects\n#Total Pie Chart\nembarked_pie = go.Pie(labels=embarked_points, values=embarked_count_total)\nembarked_pie_layout = go.Layout(title='Embarked')\nembarked_pie_fig = go.Figure(data = [embarked_pie], layout=embarked_pie_layout)\n#Survived Stacked Bar Chart\nembarked_bar_died = go.Bar(x=embarked_points, y=embarked_count_died, name=\"Didn't Survive\")\nembarked_bar_survived = go.Bar(x=embarked_points, y=embarked_count_survived, name=\"Survived\")\nembarked_bar_layout = go.Layout(barmode='stack', title='Embark Points and Survival')\nembarked_bar_fig = go.Figure(data=[embarked_bar_died, embarked_bar_survived], layout=embarked_bar_layout)\n#Age Box plots\nQ_age = go.Box(y=train[train['Embarked'] == 'Queenstown']['Age'], name='Queenstown')\nC_age = go.Box(y=train[train['Embarked'] == 'Cherbourg']['Age'], name='Cherbourg')\nS_age = go.Box(y=train[train['Embarked'] == 'Southampton']['Age'], name='Southampton')\nage_box_layout = go.Layout(title='Age amongst Embark Points')\nage_box_fig = go.Figure(data=[C_age, Q_age, S_age ], layout=age_box_layout)\n#Sex Stacked Bar Chart\nembarked_bar_female = go.Bar(x=embarked_points, y=embarked_count_female, name='Female')\nembarked_bar_male = go.Bar(x=embarked_points, y=embarked_count_male, name='Male')\nembarked_sex_layout = go.Layout(title='Embarked and Sex', barmode='stack')\nembarked_sex_fig = go.Figure(data=[embarked_bar_female, embarked_bar_male], layout=embarked_sex_layout)\n#Fare Box Plot\nQ_fare = go.Box(y=train[train['Embarked'] == 'Queenstown']['Fare'], name='Queenstown')\nC_fare = go.Box(y=train[train['Embarked'] == 'Cherbourg']['Fare'], name='Cherbourg')\nS_fare = go.Box(y=train[train['Embarked'] == 'Southampton']['Fare'], name='Southampton')\nfare_box_layout = go.Layout(title='Embarkment and Fares')\nfare_box_fig = go.Figure(data=[C_fare, Q_fare, S_fare ], layout=fare_box_layout)\n\n#PClass Grouped Bar Plot\nembarked_bar_Pclass1 = go.Bar(x=embarked_points, y=embarked_count_Pclass1, name='Upper Class')\nembarked_bar_Pclass2 = go.Bar(x=embarked_points, y=embarked_count_Pclass2, name='Middle Class')\nembarked_bar_Pclass3 = go.Bar(x=embarked_points, y=embarked_count_Pclass3, name='Lower Class')\nembarked_Pclass_layout = go.Layout(title='Embarkment and Passenger Class')\nembarked_Pclass_fig = go.Figure(data = [embarked_bar_Pclass1, embarked_bar_Pclass2, embarked_bar_Pclass3], layout=embarked_Pclass_layout)\n\n\n# Plotting\niplot(embarked_pie_fig, filename='Titanic Embarked', )\niplot(embarked_bar_fig)\niplot(age_box_fig)\niplot(embarked_sex_fig)\niplot(fare_box_fig)\niplot(embarked_Pclass_fig)","fbcdd563":"#Preparing the data\n#General\nall_fares = train['Fare']\n#Survival\nfares_survived = train[train['Survived'] == 1]['Fare']\nfares_died = train[train['Survived'] == 0]['Fare']\n\n\n#Preparing figures\n#General\nall_fares_hist = go.Histogram(x=all_fares, marker={'color':'#35477d'})\nall_fares_hist_layout = go.Layout(title='Fares')\nall_fares_hist_fig = go.Figure(data=[all_fares_hist], layout=all_fares_hist_layout)\n#Survival\nfares_survived_box = go.Box(y=fares_survived, name='Survived', marker={'color':'#0939CF'})\nfares_died_box = go.Box(y=fares_died, name=\"Didn't Survive\", marker={'color':'#CF1E09'})\nfares_survival_layout = go.Layout(title='Fares and Survival')\nfares_survival_fig = go.Figure(data=[fares_died_box, fares_survived_box], layout=fares_survival_layout)\n\n\n#Plotting\niplot(all_fares_hist_fig)\niplot(fares_survival_fig)","2cdcb9d0":"from sklearn.preprocessing import Imputer\nimputer = Imputer()\ntrain['Age'] = imputer.fit_transform(train['Age'].to_numpy().reshape(-1,1))","c89409d2":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ntrain['Fare'] = scaler.fit_transform(train['Fare'].to_numpy().reshape(-1,1))\ntrain['Age'] = scaler.fit_transform(train['Age'].to_numpy().reshape(-1,1))","0cc7ec68":"encoded_sex =  pd.get_dummies(train['Sex'])\nencoded_class = pd.get_dummies(train['Pclass'], prefix='Pclass')\nencoded_embark = pd.get_dummies(train['Embarked'], prefix='embarked_from')\ntrain = pd.concat([train, encoded_sex, encoded_class, encoded_embark], axis=1)\n\ntry:\n    train.drop('Sex', axis=1, inplace=True)\nexcept:\n    pass\ntry:\n    train.drop('Pclass', axis=1, inplace=True)\nexcept:\n    pass\ntry:\n    train.drop('Embarked', axis=1, inplace=True)\nexcept:\n    pass","583ddadd":"y = train['Survived']\nX = train.drop('Survived', axis=1)\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y)","128c4253":"from sklearn.neighbors import KNeighborsClassifier\nKNN = KNeighborsClassifier()\n## Grid search to find optimal number of neighbours\nfrom sklearn.model_selection import GridSearchCV\nsearch = GridSearchCV(estimator=KNN, param_grid={'n_neighbors':range(1,15)}, scoring='precision', n_jobs=-1, cv=10)\nsearch.fit(X_train, y_train)\nKNN_optimum = search.best_estimator_","fcb73f07":"## KNN with grid search result\npredictions = KNN_optimum.predict(X_test)\nfrom sklearn.metrics import classification_report\nKNN_report = classification_report(y_test, predictions)\nprint(KNN_report)","38a36b2f":"from sklearn.svm import SVC\nSVM = SVC()\nSVM.fit(X_train, y_train)\nSVM_predictions = SVM.predict(X_test)\nprint(classification_report(y_test, SVM_predictions))","30915b7b":"from sklearn.ensemble import RandomForestClassifier\nRF = RandomForestClassifier()\nRF.fit(X_train, y_train)\nRF_predictions = RF.predict(X_test)\nprint(classification_report(y_test, RF_predictions))","9b7601b3":"from sklearn.ensemble import VotingClassifier\nVC = VotingClassifier(estimators=[('rf', RF), ('svm', SVM), ('knn', KNN_optimum)])","83a546bf":"VC.fit(X_train, y_train)\nVC_predictions = VC.predict(X_test)\nprint(classification_report(y_test, VC_predictions))","6e317190":"## Drop Unique Columns","f7ace9c9":"### X, y preparation and train-test splitting","a0ca20f4":"### Standardizing numerical values","af6feae8":"## Random Forest Classifier (Ensemble of Decision trees)\n\n\n","798b54b6":"## K Nearest Neighbour","970eeb43":"## Ensemble of previously trained classifiers","0ed8d5ac":"# First Steps","a0bbc081":"    1. The distribution of fares shows that most fares paid were as low as (5-15)$\n    \n    2. It's evident that survival is linked with a higher 'Fare' median, although this is not to be generalized since \n    some of the passengers who didn't had paid fares as high as 260$","52706d57":"## Fare","3be2a659":"    1.Most passengers embarked from Southampton, then Cherbourg followed by Queenstown .\n \n    2.Passengers who embarked from Southampton and Queenstown had less survivals, although the survival rate is \n    relatively low for Southampton passengers, but what is unique is that Cherbourg passengers had more \n    survivors!\n \n    3.The median of ages for all embark points are somehow similar, although Southampton passengers have more \n    elderly.\n    \n    4.Sex distribution amongst embark points looks reasonable where number of males are always higher..\n    \n    5.Fare distribution and passengers' classes tells a story for each embarkment point : \n        Cherbourg: A median as high as 29.7$ can be misleading, this embarkment point had 66 lower class and\n    85 upper class with 17 of middle class, this tells us that it's almost a 50-50 split between the \n    rich and the poor, not overlooking a rocketing value of 512$ and multiple fares in the range of \n        200$.\n        \n        Queenstown: A low median of 7.5$ for fares, the distribution of passenger classes reinforce the fact\n        that most of the passengers from this point were less fortunate. Although there's two upper class\n        and 3 middle class passengers.\n        \n        Southampton: The point that most passengers embarked from, with very high variance, but we can tell\n        that the majority of the passengers were at the lower class.\n        \n","d073ce43":"### One hot encoding categorial values","fd5ff140":"## Missing Data","87817479":"    Too many missing values for 'Cabin' => Drop the column.\n    \n\n    Few missing 'Embarked' values => Drop the rows with missing values.\n\n\n    Age is possibly an influencing factor for survival, so we need to keep it => Impute missing values.","62b115b2":"<span style='font-size:24px'>To no suprise, an ensemble voting classifier yielded the best result<\/span>","6fe2b32e":"# Data Exploration","50be35ef":"### Imputing Missing Age values","b054304b":"    We'll Explore the data by visualizing and then noting patterns and relationships between different   \n    variables to try and get an out of the box view as mush as possible, later this can help us impute the    'Age' \n    which is first in order alphabetically but we'll leave it last to get a better understanding and impute it \n    better than just replacing missing values with the median.","eeb64250":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Introduction\" data-toc-modified-id=\"Introduction-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Introduction<\/a><\/span><\/li><li><span><a href=\"#First-Steps\" data-toc-modified-id=\"First-Steps-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>First Steps<\/a><\/span><\/li><li><span><a href=\"#Data-Preparation-and-Cleaning\" data-toc-modified-id=\"Data-Preparation-and-Cleaning-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Data Preparation and Cleaning<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Drop-Unique-Columns\" data-toc-modified-id=\"Drop-Unique-Columns-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Drop Unique Columns<\/a><\/span><\/li><li><span><a href=\"#Missing-Data\" data-toc-modified-id=\"Missing-Data-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;<\/span>Missing Data<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Data-Exploration\" data-toc-modified-id=\"Data-Exploration-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Data Exploration<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Embarked\" data-toc-modified-id=\"Embarked-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Embarked<\/a><\/span><\/li><li><span><a href=\"#Fare\" data-toc-modified-id=\"Fare-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Fare<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Prediction-Models\" data-toc-modified-id=\"Prediction-Models-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Prediction Models<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#More-Data-Preparation\" data-toc-modified-id=\"More-Data-Preparation-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;<\/span>More Data Preparation<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Imputing-Missing-Age-values\" data-toc-modified-id=\"Imputing-Missing-Age-values-5.1.1\"><span class=\"toc-item-num\">5.1.1&nbsp;&nbsp;<\/span>Imputing Missing Age values<\/a><\/span><\/li><li><span><a href=\"#Standardizing-numerical-values\" data-toc-modified-id=\"Standardizing-numerical-values-5.1.2\"><span class=\"toc-item-num\">5.1.2&nbsp;&nbsp;<\/span>Standardizing numerical values<\/a><\/span><\/li><li><span><a href=\"#One-hot-encoding-categorial-values\" data-toc-modified-id=\"One-hot-encoding-categorial-values-5.1.3\"><span class=\"toc-item-num\">5.1.3&nbsp;&nbsp;<\/span>One hot encoding categorial values<\/a><\/span><\/li><li><span><a href=\"#X,-y-preparation-and-train-test-splitting\" data-toc-modified-id=\"X,-y-preparation-and-train-test-splitting-5.1.4\"><span class=\"toc-item-num\">5.1.4&nbsp;&nbsp;<\/span>X, y preparation and train-test splitting<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#K-Nearest-Neighbour\" data-toc-modified-id=\"K-Nearest-Neighbour-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;<\/span>K Nearest Neighbour<\/a><\/span><\/li><li><span><a href=\"#Support-Vector-Machine-(SVD)\" data-toc-modified-id=\"Support-Vector-Machine-(SVD)-5.3\"><span class=\"toc-item-num\">5.3&nbsp;&nbsp;<\/span>Support Vector Machine (SVD)<\/a><\/span><\/li><li><span><a href=\"#Random-Forest-Classifier-(Ensemble-of-Decision-trees)\" data-toc-modified-id=\"Random-Forest-Classifier-(Ensemble-of-Decision-trees)-5.4\"><span class=\"toc-item-num\">5.4&nbsp;&nbsp;<\/span>Random Forest Classifier (Ensemble of Decision trees)<\/a><\/span><\/li><li><span><a href=\"#Ensemble-of-previously-trained-classifiers\" data-toc-modified-id=\"Ensemble-of-previously-trained-classifiers-5.5\"><span class=\"toc-item-num\">5.5&nbsp;&nbsp;<\/span>Ensemble of previously trained classifiers<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>","b7659b04":"## Support Vector Machine (SVD)","11154431":"# Prediction Models ","dcc038e0":"# Introduction","5b9a32e3":"    As for Age, we will impute it later when exploring the feature, the idea is to find a pattern to better impute the age.","0130f314":"## More Data Preparation","4eb01b88":"# Data Preparation and Cleaning","7fd7a58d":"        Passengers on the Titanic embarked from three locations: Cherbourg, Queenstown and Southampton.\n        Let's explore where the passengers embarked from and is there any obvious influence for survival.","b8bec38d":"## Embarked","68ad7cb4":"    This notebook is for practice purposes, as a participation in a competition on Kaggle.\n    Link to the competition: https:\/\/www.kaggle.com\/c\/titanic\n\n    The objectives are: \n        1 - Create interactive plots using with and without using cufflinks.\n        2 - To create a survival prediction model"}}