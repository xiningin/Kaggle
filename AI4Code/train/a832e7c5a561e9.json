{"cell_type":{"2b6b6731":"code","b69aa371":"code","22fc8fa4":"code","03912648":"code","6a8067d4":"code","5039274d":"code","d8ac0cf2":"code","0307d32e":"code","8c6371d2":"code","0236bf1e":"code","01ceccad":"code","2fd54ddc":"code","65ebc503":"code","6c879f23":"code","7692c935":"code","83879b7e":"code","9e8ccabe":"code","f8dac4c0":"code","7b713227":"code","519dd11f":"code","4902e02f":"code","49c44555":"code","852728bf":"code","cf4e3514":"code","bd712781":"code","f9abe4d3":"code","08b49fde":"code","58952163":"code","64a64371":"code","85d2a3a2":"code","a9502559":"code","6d592c80":"code","cd426375":"markdown","defac6ab":"markdown","c7dd219f":"markdown","2d72354c":"markdown","94b7c684":"markdown","347c4b91":"markdown","96b9e701":"markdown","6f1e867f":"markdown","681588e5":"markdown","d663f9f5":"markdown","4f22a0c7":"markdown","3ee9c2cd":"markdown","a8b2175d":"markdown","b84ab510":"markdown","a578cb63":"markdown","8882dd3e":"markdown","0b667100":"markdown","e0884bb6":"markdown","56e4e1f6":"markdown","1d8df6f6":"markdown","72f8a2e0":"markdown","e6537adc":"markdown","cc3d65bf":"markdown","8eafa147":"markdown","794807f1":"markdown","32d84846":"markdown","ac948003":"markdown","f299a6e0":"markdown","08b8e12e":"markdown","39d34f43":"markdown","36268400":"markdown"},"source":{"2b6b6731":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b69aa371":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain.head()","22fc8fa4":"test.head()","03912648":"print(train.isnull().sum())\nprint(test.isnull().sum())","6a8067d4":"train[\"Age\"]=train[\"Age\"].fillna(train[\"Age\"].median())\ntest[\"Age\"]=test[\"Age\"].fillna(test[\"Age\"].median())\ntest[\"Fare\"]=test[\"Fare\"].fillna(test[\"Fare\"].median())\ntrain[\"Embarked\"]=train[\"Embarked\"].fillna(\"S\")\nprint(train.isnull().sum())\nprint(test.isnull().sum())","5039274d":"train[\"Sex\"][train[\"Sex\"] == \"male\"] = 0\ntrain[\"Sex\"][train[\"Sex\"] == \"female\"] = 1\ntest[\"Sex\"][test[\"Sex\"] == \"male\"] = 0\ntest[\"Sex\"][test[\"Sex\"] == \"female\"] = 1","d8ac0cf2":"train[\"Embarked\"][train[\"Embarked\"]== \"S\"] = 0\ntrain[\"Embarked\"][train[\"Embarked\"]== \"C\"] =1\ntrain[\"Embarked\"][train[\"Embarked\"]== \"Q\"] =2\ntest[\"Embarked\"][test[\"Embarked\"]== \"S\"] = 0\ntest[\"Embarked\"][test[\"Embarked\"]== \"C\"] =1\ntest[\"Embarked\"][test[\"Embarked\"]== \"Q\"] =2","0307d32e":"y = train.loc[:,[\"Survived\"]]\nx = train.loc[:,[\"Sex\",\"Age\",\"Pclass\",\"SibSp\",\"Fare\",\"Embarked\"]]\nprint(x,y)","8c6371d2":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,shuffle=True,random_state=0)\nprint(x_train,x_test,y_train,y_test)","0236bf1e":"from sklearn import tree\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier","01ceccad":"param = {\"max_depth\":[1,2,3,4,5],\n         \"min_samples_leaf\":[1,2,3,4,5,6,7,8,9,10],\n         \"min_samples_split\":[2,3,4,5]\n        }\n\nclf = GridSearchCV(tree.DecisionTreeClassifier(random_state=0,splitter=\"best\"),param,cv=5)\nclf = clf.fit(x_train,y_train)","2fd54ddc":"scores=clf.cv_results_[\"mean_test_score\"]\nparams = clf.cv_results_[\"params\"]","65ebc503":"best_clf=clf.best_estimator_\nprint(\"Best Condition:\\n\",best_clf)\nprint(\"Training Score:\\n\",best_clf.score(x_train,y_train))\nprint(\"Test Score\\n\",best_clf.score(x_test,y_test))\n#for i in range(len(scores)):\n  #  print(scores[i],params[i])","6c879f23":"clf = tree.DecisionTreeClassifier(max_depth=4,min_samples_leaf = 1,random_state=0)\nclf = clf.fit(x_train,y_train)","7692c935":"from sklearn.tree import export_graphviz\nexport_graphviz(clf, out_file=\"tree1.dot\",\n                feature_names=[\"Sex\",\"Age\",\"Pclass\",\"SibSp\",\"Fare\",\"Embarked\"], \n                class_names =[\"0\",\"1\"],rounded = True, filled=True,\n               special_characters=True)","83879b7e":"from IPython.display import Image, display_png\n!dot -Tpng tree1.dot -o tree1.png\ndisplay_png(Image(\"tree1.png\"))","9e8ccabe":"import matplotlib.pyplot as plt\ndef plot_feature_importances(model):\n    n_features = x.shape[1]\n    plt.barh(range(n_features),model.feature_importances_,align=\"center\")\n    plt.yticks(np.arange(n_features),x)\n    plt.xlabel(\"importance\")\n    plt.ylabel(\"features\")\n    plt.show\nplot_feature_importances(clf)    \nplt.savefig(\"Features Importances\")","f8dac4c0":"X= test.loc[:,[\"Sex\",\"Age\",\"Pclass\",\"SibSp\",\"Fare\",\"Embarked\"]]\nY=clf.predict(X)\nprint(Y)","7b713227":"PassengerId = np.array(test[\"PassengerId\"]).astype(int)\nresult = pd.DataFrame(Y,PassengerId,columns = [\"Survived\"])\nprint(result)","519dd11f":"result.to_csv(\"my_submission1.csv\",index_label = [\"PassengerId\"])\nprint(\"Your submission was successfully saved!\")","4902e02f":"Age_Q1 = train[\"Age\"].quantile(0.25)\nAge_Q3 = train[\"Age\"].quantile(0.75)\nAge_IQR = Age_Q3 - Age_Q1\nAge_LOWER_Q = Age_Q1 - 1.5*Age_IQR\nAge_HIGHER_Q = Age_Q3 + 1.5*Age_IQR\nAge_iqr = train[\"Age\"][(Age_LOWER_Q <= train[\"Age\"]) & (train[\"Age\"] <= Age_HIGHER_Q)].dropna()\nAge_iqr_out= train[\"Age\"][(Age_LOWER_Q >= train[\"Age\"]) & (train[\"Age\"] >= Age_HIGHER_Q)].dropna()\nprint(Age_iqr)\nAge_iqr.to_csv(\"Age iqr.csv\")","49c44555":"Fare_Q1 = train[\"Fare\"].quantile(0.25)\nFare_Q3 = train[\"Fare\"].quantile(0.75)\nFare_IQR = Fare_Q3 - Fare_Q1\nFare_LOWER_Q = Fare_Q1 - 1.5*Fare_IQR\nFare_HIGHER_Q = Fare_Q3 + 1.5*Fare_IQR\nFare_iqr = train[\"Fare\"][(Fare_LOWER_Q <= train[\"Fare\"]) & (train[\"Fare\"] <= Fare_HIGHER_Q)].dropna()\nprint(Fare_iqr)\nFare_iqr.to_csv(\"Fare iqr.csv\")","852728bf":"data = train.loc[:,[\"Survived\",\"Sex\",\"Pclass\",\"SibSp\",\"Embarked\"]]\ndata = pd.concat([data,Age_iqr],axis=1)\ndata = pd.concat([data,Fare_iqr],axis=1)\ndata = data.dropna(how = \"any\",axis= 0)\nprint(data)\nx = data.loc[:,[\"Sex\",\"Age\",\"Pclass\",\"SibSp\",\"Fare\",\"Embarked\"]]\ny = data.loc[:,[\"Survived\"]]\nprint(x,y)","cf4e3514":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,shuffle=True,random_state=0)","bd712781":"clf = GridSearchCV(tree.DecisionTreeClassifier(random_state=0,splitter=\"best\"),param,cv=5)\nclf = clf.fit(x_train,y_train)\nbest_clf=clf.best_estimator_\nprint(\"\u6700\u826f\u6761\u4ef6:\\n\",best_clf)\nprint(\"\u8a13\u7df4\u30b9\u30b3\u30a2:\\n\",best_clf.score(x_train,y_train))\nprint(\"\u30c6\u30b9\u30c8\u30b9\u30b3\u30a2\\n\",best_clf.score(x_test,y_test))\n#for i in range(len(scores)):\n   #print(scores[i],params[i])","f9abe4d3":"print(best_clf)\nclf = best_clf.fit(x_train,y_train)","08b49fde":"export_graphviz(clf, out_file=\"tree2.dot\",\n                feature_names=[\"Sex\",\"Age\",\"Pclass\",\"SibSp\",\"Fare\",\"Embarked\"], \n                class_names =[\"0\",\"1\"],rounded = True, filled=True,\n               special_characters=True)","58952163":"!dot -Tpng tree2.dot -o tree2.png\ndisplay_png(Image(\"tree2.png\"))","64a64371":"def plot_feature_importances(model):\n    n_features = x.shape[1]\n    plt.barh(range(n_features),model.feature_importances_,align=\"center\")\n    plt.yticks(np.arange(n_features),x)\n    plt.xlabel(\"importance\")\n    plt.ylabel(\"features\")\n    plt.show\nplot_feature_importances(clf)    \nplt.savefig(\"Features Importances Outlier Exclusion\")","85d2a3a2":"X= test.loc[:,[\"Sex\",\"Age\",\"Pclass\",\"SibSp\",\"Fare\",\"Embarked\"]]\nY=clf.predict(X)\nprint(Y)","a9502559":"PassengerId = np.array(test[\"PassengerId\"]).astype(int)\nresult = pd.DataFrame(Y,PassengerId,columns = [\"Survived\"])\nprint(result)","6d592c80":"result.to_csv(\"my_submission2.csv\",index_label = [\"PassengerId\"])\nprint(\"Your submission was successfully saved!\")","cd426375":"**\u5404\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u306e\u53ef\u8996\u5316**","defac6ab":"**\u4e88\u6e2c**","c7dd219f":"11.**\u4e88\u6e2c**","2d72354c":"4.**\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u306e\u6570\u5024\u5316**","94b7c684":"8.**\u7d50\u679c\u306e\u78ba\u8a8d**","347c4b91":"\u5bfe\u8c61\u30b3\u30f3\u30da : https:\/\/www.kaggle.com\/c\/titanic","96b9e701":"**\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u5206\u6790**","6f1e867f":"**\u5916\u308c\u5024\u306e\u691c\u51fa**","681588e5":"1. **\u30c7\u30fc\u30bf\u5165\u529b**","d663f9f5":"\u30c1\u30e5\u30fc\u30ea\u30f3\u30b0\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf","4f22a0c7":"3.**\u6b20\u640d\u306e\u5bfe\u51e6**","3ee9c2cd":"* \u7d50\u8ad6: Outlier contain 77.511%\n*      Outlier excludion 74.641%\n* \u539f\u56e0: Outlier excludion decreased Sex and Embarked importance.but increase Fare importance.  ","a8b2175d":"6.**\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b(\u5206\u5272\u6bd4\u73877:3)**","b84ab510":"\u5168\u4f53\u56f3","a578cb63":"Age\u3068Fare\u3092\u4e2d\u592e\u5024\u3001Embarked\u3092\u6700\u983b\u5024\u3067\u88dc\u5b8c","8882dd3e":"male\u30920 female\u30921\u306b\u3059\u308b","0b667100":"2. **\u6b20\u640d\u306e\u78ba\u8a8d**","e0884bb6":"10.**\u5404\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u306e\u53ef\u8996\u5316**","56e4e1f6":"**\u7d50\u679c\u306e\u51fa\u529b**","1d8df6f6":"\u30b9\u30b3\u30a2\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b","72f8a2e0":"9.**\u30e2\u30c7\u30eb\u306e\u53ef\u8996\u5316**","e6537adc":"Fare","cc3d65bf":"Age","8eafa147":"**\u7d50\u679c\u306e\u78ba\u8a8d**","794807f1":"**\u30c7\u30fc\u30bf\u6574\u7406**","32d84846":"7.**\u30e2\u30c7\u30eb\u69cb\u7bc9**","ac948003":"**\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b(\u5206\u5272\u6bd4\u73877:3)**","f299a6e0":"**Add Excludion outliers**","08b8e12e":"12.**\u7d50\u679c\u306e\u51fa\u529b**","39d34f43":"S\u30920 C\u30921 Q\u30922\u306b\u3059\u308b","36268400":"5.**\u30c7\u30fc\u30bf\u306e\u6574\u7406**"}}