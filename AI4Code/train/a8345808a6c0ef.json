{"cell_type":{"9ddd56c9":"code","6e546ec2":"code","1cc1cb42":"code","c47c4bba":"code","5df0d5a4":"code","6f94fd70":"code","1b06a169":"code","d5bca967":"code","58a65bf4":"code","f5a9194b":"code","99780bdf":"code","299ae363":"code","2ff1ad0f":"code","de45d93e":"code","a7ab5d64":"code","c2d2296a":"code","53c2c016":"code","63d1481f":"code","b5b284b4":"code","cfbf1ab9":"code","4a008fae":"code","e5a9ee9e":"code","1ba53da2":"code","ad2e5569":"code","23e320b6":"code","1fc31ac6":"code","aad63832":"code","e34787b9":"code","15463cc1":"code","1ba20bf7":"code","80e90989":"code","05802159":"code","32f46e51":"code","c7c70dfd":"code","33a1d55d":"code","9fee9f31":"code","eb3bb5c4":"code","5d6f573a":"code","ea5e11be":"code","d99c898a":"code","a551ac91":"code","a2945e58":"code","7a1241a0":"code","85aba1b5":"code","f45e5d62":"code","474db7ea":"code","d28d80b5":"code","272dacde":"code","bc11a241":"code","a89d738e":"code","d2263ebd":"code","c8fe40ae":"code","688d6278":"code","2b76c36c":"code","e6382f89":"code","d13a57fa":"code","dd031692":"code","751035e3":"code","4d6ffbff":"code","81aadbaa":"code","25ffe80f":"code","116d2391":"code","b6aa7cfc":"code","ecca91e0":"code","42b999c0":"code","2a6bfc22":"code","29106361":"markdown","af119b66":"markdown","e8ca953f":"markdown","76ccc40d":"markdown","25d2f90b":"markdown"},"source":{"9ddd56c9":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib._color_data as mcd","6e546ec2":"df = pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\")\ndf.head()","1cc1cb42":"df.shape","c47c4bba":"#Here we are dropping the columns values that we do not consider relevant for our analysis ","5df0d5a4":"df = df.drop(df.iloc[:, 0:1], axis = 1) #q1","6f94fd70":"df = df.drop(df.iloc[:, 33:50], axis = 1) #q10","1b06a169":"df = df.drop(df.iloc[:, 34:40], axis = 1) #q12","d5bca967":"df = df.drop(df.iloc[:, 35:47], axis = 1) #q14","58a65bf4":"df = df.drop(df.iloc[:, 66:73], axis = 1) #q18","f5a9194b":"df = df.drop(df.iloc[:, 66:72], axis = 1) #q19","99780bdf":"df = df.drop(df.iloc[:, 70:78], axis = 1) #q24","299ae363":"df = df.drop(df.iloc[:, 84:85], axis = 1) #q28","2ff1ad0f":"df = df.drop(df.iloc[:, 84:97], axis = 1) #q29a y q30a ","de45d93e":"df = df.drop(df.iloc[:, 134:150], axis = 1) #q36-a","a7ab5d64":"df = df.drop(df.iloc[:, 181:281], axis = 1) #q27b, q29b, q30b, q31b, q32b, q34b, q36b, q37b, q38b","c2d2296a":"#Droping the first row \ndf = df.drop(df.index[0])","53c2c016":"df.fillna('', inplace = True)","63d1481f":"df.head()","b5b284b4":"#checking for null values\ndf.isnull().sum().sum()","cfbf1ab9":"age = df.iloc[:,0].value_counts()\ntotal = age.sum()\n\nfig, axes = plt.subplots(1,1, figsize=(10,10)) \naxes.set_title('Participants Ages')\n\ngraph =axes.bar(range(age.shape[0]),age.values, color ='steelblue', alpha=0.7, tick_label=age.index)\n\nx = age.index\ny = age.values\n\nfor i in range(len(x)):\n    plt.text(i, y[i], y[i], ha=\"center\", va=\"bottom\")\n    ","4a008fae":"women_df = df[df['Q2']=='Woman']\nmen_df = df[df['Q2']=='Man']","e5a9ee9e":"women_ages = women_df['Q1'].value_counts()\nmen_ages = men_df['Q1'].value_counts()\n\nfig, axes = plt.subplots(1,1, figsize=(10,10)) \naxes.set_title('Male vs Women Age Participants', fontsize = 15)\nplt.ylabel('Participants')\nplt.xlabel('Age')\n\ngraph =axes.bar(range(women_ages.shape[0]),women_ages.values,color=\"teal\", alpha=0.7, tick_label=women_ages.index, label = 'Women')\ngraph2 =axes.bar(range(men_ages.shape[0]),men_ages.values,color=\"lightblue\", alpha=0.7, tick_label=men_ages.index, label = 'Men')\n\n\nx = women_ages.index\ny = women_ages.values\n\n\nfor i in range(len(x)):\n    plt.text(i, y[i], y[i], ha=\"center\", va=\"bottom\")\n    \nx2 = men_ages.index\ny2 = men_ages.values\n\nfor i in range(len(x2)):\n    plt.text(i, y2[i], y2[i], ha=\"center\", va=\"bottom\")\n\nplt.legend(fontsize=14)","1ba53da2":"gender= df.groupby('Q2')","ad2e5569":"df[\"Q2\"].replace({'Prefer not to say':'Other', \"Nonbinary\": \"Other\",\"Prefer to self-describe\": \"Other\"}, inplace=True)","23e320b6":"df['Q2'].value_counts()","1fc31ac6":"dfMan = gender.get_group('Man')\ndfWoman = gender.get_group('Woman')\ndfOther = gender.get_group('Other')","aad63832":"fig, axes = plt.subplots(1,1, figsize=(8,6)) \nmy_data = [20598, 4890,485]\nmy_labels = 'Man','Women','Other'\nmy_explode = (0, 0.1, 0)\nmy_colors = ['aquamarine','pink','violet']\nplt.pie(my_data,labels=my_labels,autopct='%1.1f%%', startangle=15, shadow = True, colors=my_colors, explode=my_explode)\nplt.title('Gender')\nplt.axis('equal')\nplt.show() ","e34787b9":"dfWoman[\"Q4\"].replace({'Some college\/university study without earning a bachelor\u2019s degree': 'University Studies- No degree'}, inplace = True)","15463cc1":"dfMan[\"Q4\"].replace({'Some college\/university study without earning a bachelor\u2019s degree': 'University Studies- No degree'}, inplace = True)","1ba20bf7":"education_women = dfWoman['Q4'].value_counts()\neducation_men = dfMan['Q4'].value_counts()\n\nfig, axes = plt.subplots(2,1, figsize=(16,8)) \n\naxes[0].barh(range(education_women.shape[0]),education_women.values, color ='lightpink', alpha=0.7, tick_label=education_women.index)\naxes[1].barh(range(education_men.shape[0]),education_men.values, color ='springgreen', alpha=0.7, tick_label=education_men.index)\n\naxes[0].set_title(\"Women Coding Experience\")\naxes[1].set_title(\"Men Coding Experience\")\n\naxes[0].invert_yaxis()\naxes[1].invert_yaxis()\n\nfor i in range(len(education_women)):\n    axes[0].text(education_women[i] +10 , i, education_women[i], ha='left', va='center')\n    \nfor i in range(len(education_men)):\n    axes[1].text(education_men[i] +10 , i, education_men[i], ha='left', va='center')","80e90989":"fig, ax = plt.subplots(figsize = (15,6))\n\nnames = ['Student ', 'Data Scientist ', 'Software Engineer', 'Other', 'Data Analyst','Currently not employed','Research Scientist','Machine Learning Engineer','Business Analyst','Program\/Project Manager','Data Engineer','Product Manager','Statistician','DBA\/Database Engineer','Developer Relations\/Advocacy']\nN = 15\nwomen_means = (1711, 645, 542, 507, 467,404,305,214,189,107,107,74,53,30,20)\nmen_means = (6804, 3616, 2449, 2393,2301,1986,1538,1499,968,849,668,319,313,171,99 )\n\nind = np.arange(N) \nwidth = 0.35       \nplt.bar(ind, men_means, width, label='Men')\nplt.bar(ind + width, women_means, width,\n    label='Women')\n\nplt.ylabel('Participants')\nplt.title('Current role of Men and Women Participants', fontsize = 15)\n\nplt.xticks(ind,names,rotation =90)\n           #('Student ', 'Data Scientist ', 'Software Engineer', 'Other', 'Data Analyst','Currently not employed','Research Scientist','Machine Learning Engineer','Business Analyst','Program\/Project Manager','Data Engineer','Product Manager','Statistician','DBA\/Database Engineer','Developer Relations\/Advocacy'))\nplt.legend(loc='best')\nplt.show()\n","05802159":"values = df['Q3'].value_counts()\nfig, ax = plt.subplots(figsize = (15,15))\nax = sns.countplot(y = 'Q3', data = df, order = df['Q3'].value_counts().index)\nax.set_title('Country of Residence of Participants', fontsize = 16)\n\nfor i in range(len(values)):\n    plt.text(values[i] + 50, i, values[i], ha='left', va='center')\n\nplt.xlabel(None)\nplt.ylabel(None)\n","32f46e51":"countplt, ax = plt.subplots(figsize = (16,4))\nsns.countplot(x = 'Q6', data = df, palette = 'magma', order = df['Q6'].value_counts().index)\nplt.title('Coding Experience', fontsize= 16)\nplt.xlabel(None)\nplt.ylabel(None)\n\ncoding_years = df['Q6'].value_counts()\nx = coding_years.index\ny = coding_years.values\n\nfor i in range(len(x)):\n    plt.text(i, y[i], y[i], ha=\"center\", va=\"bottom\")","c7c70dfd":"coding_women = dfWoman['Q6'].value_counts()\ncoding_men = dfMan['Q6'].value_counts()\n\nfig, axes = plt.subplots(2,1, figsize=(16,10)) \n\naxes[0].bar(range(coding_women.shape[0]),coding_women.values, color ='purple', alpha=0.7, tick_label=coding_women.index)\naxes[1].bar(range(coding_men.shape[0]),coding_men.values, color ='green', alpha=0.7, tick_label=coding_men.index)\n\naxes[0].set_title(\"Women Coding Experience\")\naxes[1].set_title(\"Men Coding Experience\")\n\nfor i in range(len(coding_women)):\n    axes[0].text(i, coding_women[i], coding_women[i], ha=\"center\", va=\"bottom\")\n    \nfor i in range(len(coding_men)):\n    axes[1].text(i, coding_men[i], coding_men[i], ha=\"center\", va=\"bottom\")","33a1d55d":"cols = dfMan.iloc[:,6:19].columns.tolist()\nlanguages = [\"Python\", \"R\", \"SQL\", \"C\", \"C++\", \"Java\", \"Javascript\",\"Julia\",\"Swift\",\"Bash\", \"MATLAP\", \"None\", \"Other\"]\nlang_program = []\nlang_together = []\nfor i, v in enumerate(cols):\n    temp = dfMan[v].replace('', np.nan).value_counts()[0]\n    lang_program.append(temp)\n    lang_together.append((languages[i], temp))\n\nimport matplotlib.pyplot as plt\nimport squarify \n    \n\nfig, axes = plt.subplots(1,1, figsize=(16,8)) \nlang_program = lang_program\n\nsquarify.plot(sizes=lang_program, label=lang_together, alpha=0.6, pad = True)\nplt.axis('off')\nplt.title('Men Programming Language')\n\nplt.show()","9fee9f31":"cols = dfWoman.iloc[:,6:19].columns.tolist()\nlanguages = [\"Python\", \"R\", \"SQL\", \"C\", \"C++\", \"Java\", \"Javascript\",\"Julia\",\"Swift\",\"Bash\", \"MATLAP\", \"None\", \"Other\"]\nlang_program = []\nlang_together = []\nfor i, v in enumerate(cols):\n    temp = dfWoman[v].replace('', np.nan).value_counts()[0]\n    lang_program.append(temp)\n    lang_together.append((languages[i], temp))\n\nimport matplotlib.pyplot as plt\nimport squarify \n    \nfig, axes = plt.subplots(1, figsize=(16,8))\nlang_program = lang_program\n\nsquarify.plot(sizes=lang_program, label=lang_together, alpha=0.6, pad = True)\nplt.axis('off')\nplt.title('Women Programming Language')\n\nplt.show()\n\n#Julia is 24 and Swift is 26 ","eb3bb5c4":"(dfWoman['Q7_Part_9']== 'Swift').sum()","5d6f573a":"(dfWoman['Q7_Part_8']== 'Julia').sum()","ea5e11be":"coding_women = dfWoman['Q6'].value_counts()\ncoding_men = dfMan['Q6'].value_counts()\n\nfig, axes = plt.subplots(2,1, figsize=(16,10)) \n\naxes[0].bar(range(coding_women.shape[0]),coding_women.values, color ='purple', alpha=0.7, tick_label=coding_women.index)\naxes[1].bar(range(coding_men.shape[0]),coding_men.values, color ='green', alpha=0.7, tick_label=coding_men.index)\n\naxes[0].set_title(\"Women Coding Experience\")\naxes[1].set_title(\"Men Coding Experience\")\n\nfor i in range(len(coding_women)):\n    axes[0].text(i, coding_women[i], coding_women[i], ha=\"center\", va=\"bottom\")\n    \nfor i in range(len(coding_men)):\n    axes[1].text(i, coding_men[i], coding_men[i], ha=\"center\", va=\"bottom\")","d99c898a":"cols = dfMan.iloc[:,20:34].columns.tolist()\nlang_program = []\nfor i in cols:\n    lang_program.append(dfMan[i].replace('', np.nan).value_counts()[0])\n\nfig, axes = plt.subplots(1,1, figsize=(15,9)) \nlang_program = lang_program\nlanguages = [\"JupyterLab\", \"RStudio\", \"Visual Studio\", \"Visual Studio Code (VSCode)\", \"Pycharm\", \"Spyder\", \"Notepad++\",\"Sublime Text\",\"Swift\",\"Vim\/Emacs\", \"MATLAB\", \"Jupyter Notebook\", \"None\", \"Other\"]\nplt.pie(lang_program ,labels=languages,autopct='%1.1f%%', shadow = False,explode=[0.01]*14)\nplt.title('Men Development Environment', fontsize = 16)\nplt.axis('equal')\n\n\nplt.legend()\nplt.show() ","a551ac91":"cols = dfWoman.iloc[:,20:34].columns.tolist()\nlang_program = []\nfor i in cols:\n    lang_program.append(dfWoman[i].replace('', np.nan).value_counts()[0])\n\nfig, axes = plt.subplots(1,1, figsize=(15,9)) \nlang_program = lang_program\nlanguages = [\"JupyterLab\", \"RStudio\", \"Visual Studio\", \"Visual Studio Code (VSCode)\", \"Pycharm\", \"Spyder\", \"Notepad++\",\"Sublime Text\",\"Swift\",\"Vim\/Emacs\", \"MATLAB\", \"Jupyter Notebook\", \"None\", \"Other\"]\nplt.pie(lang_program ,labels=languages,autopct='%1.1f%%', shadow = False,explode=[0.01]*14)\nplt.title('Women Development Environment', fontsize = 16)\nplt.axis('equal')\n\n\nplt.legend()\nplt.show() ","a2945e58":"#Predicting if men or women based on their university level of education(bacherlor's or master's), coding experience , and  country will have a six figures salary or not","7a1241a0":"df['Q3'].drop(df[df['Q3'] == \"I do not wish to disclose my location\"]['Q3'].index, inplace = True)","85aba1b5":"df_dt = df[['Q2','Q4','Q3','Q5','Q6','Q25']]\ndf_dt.head(10)","f45e5d62":"dict = {'Q2': 'Gender','Q3':'Country','Q4': 'Education','Q5':'Job Title','Q6': 'Years of Coding','Q25': 'Salary'}\ndf_dt.rename(columns=dict,inplace=True)","474db7ea":"df_dt = df_dt[(df_dt['Gender'] == 'Man' ) | (df_dt['Gender'] == 'Woman' )]\ndf_dt = df_dt[(df_dt['Education'] == 'Master\u2019s degree' ) | (df_dt['Education'] == 'Bachelor\u2019s degree' )]\ndf_dt = df_dt[(df_dt['Job Title'] == 'Data Scientist' ) | (df_dt['Job Title'] == 'Data Analyst' )]\ndf_dt = df_dt[(df_dt['Years of Coding'] == '3-5 years' ) | (df_dt['Years of Coding'] == '5-10 years' )]","d28d80b5":"df_dt.isnull().sum()","272dacde":"X = df_dt.drop(columns=['Salary'], axis=1)","bc11a241":"X = X.replace({\"Woman\": 0, \"Man\": 1})\nX = X.replace({\"Bachelor\u2019s degree\": 0, \"Master\u2019s degree\": 1})\nX = X.replace({\"Data Scientist\": 0, \"Data Analyst\": 1})\nX = X.replace({\"3-5 years\": 0, \"5-10 years\": 1})","a89d738e":"X = pd.get_dummies(X)","d2263ebd":"def salary(value):\n    if len(value) > 15:\n        return 2\n    elif len(value) == 15:\n        return 1\n    else: return 0","c8fe40ae":"y = df_dt['Salary'].apply(salary)","688d6278":"from sklearn import tree\nmodel1 = tree.DecisionTreeClassifier(criterion='entropy')","2b76c36c":"model1.fit(X,y)","e6382f89":"model1.score(X,y)","d13a57fa":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score","dd031692":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","751035e3":"DT = tree.DecisionTreeClassifier()\nDT.fit(X_train, y_train)\nDT_predicted_test = DT.predict(X_test)","4d6ffbff":"print(metrics.classification_report(y_test, DT_predicted_test))","81aadbaa":"print(\"accuracy score:\", round(accuracy_score(y_test, DT_predicted_test),2))\nprint(\"precision score:\", round(precision_score(y_test, DT_predicted_test),2))\nprint(\"recall score:\", round(recall_score(y_test, DT_predicted_test),2))","25ffe80f":"from sklearn.neural_network import MLPClassifier","116d2391":"NN = MLPClassifier()","b6aa7cfc":"NN.fit(np.array(X_train), np.array(y_train).ravel())","ecca91e0":"NN_predicted_test = NN.predict(X_test)","42b999c0":"print(metrics.classification_report(y_test, NN_predicted_test))","2a6bfc22":"print(\"accuracy score:\", round(accuracy_score(y_test, NN_predicted_test),2))\nprint(\"precision score:\", round(precision_score(y_test, NN_predicted_test),2))\nprint(\"recall score:\", round(recall_score(y_test, NN_predicted_test),2))","29106361":"Decision Tree","af119b66":"Neural Network","e8ca953f":"Coding Experience","76ccc40d":"Countries","25d2f90b":"Importing the necessary libraries"}}