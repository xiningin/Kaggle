{"cell_type":{"e7e1e83e":"code","3b1e2b2a":"code","f2311cea":"code","a34fb7a6":"code","a8115b2b":"code","ba40af5e":"code","67b199f0":"code","58680f07":"code","4d989fd7":"code","28ce4071":"code","1ed56ef1":"code","1c49ee59":"code","ffabae11":"code","5b1f48ee":"code","24228405":"code","08e7fc97":"code","ff2283f8":"code","b39fa90f":"code","fce76b02":"code","b8327414":"markdown","c7e49ea4":"markdown","525f9715":"markdown","f9a868e4":"markdown","4f9f9ad0":"markdown","b7bcf79c":"markdown","37b46122":"markdown","bd8b54ff":"markdown","ef1a0ebf":"markdown","22e479e2":"markdown","1715fa0f":"markdown","b2c558ed":"markdown","7548ae56":"markdown","9a5a6005":"markdown","49bc75ba":"markdown","aeb6b181":"markdown","977cdf24":"markdown","e76682a9":"markdown","4627de73":"markdown","909bf425":"markdown","09cca9c7":"markdown","fc1a77b4":"markdown","14334449":"markdown","c46ccac0":"markdown","5e7d7b3b":"markdown"},"source":{"e7e1e83e":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\n\nimport statsmodels.api as sm\nfrom statsmodels.tsa.api import VAR #Vector AutoRegression\n\nfrom statsmodels.tsa.stattools import adfuller #for the Dicky-Fuller Test\nfrom sklearn.metrics import mean_squared_error #for calculating the performance metric\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","3b1e2b2a":"df_train=pd.read_csv(\"..\/input\/into-the-future\/train.csv\")\ndf_train.head()","f2311cea":"df1=df_train[['time','feature_1','feature_2']]\ndf1.head()","a34fb7a6":"df1.set_index('time', inplace=True)\ndf1.plot(figsize=(12,8))","a8115b2b":"df1.info()","ba40af5e":"df1_train=df1[:int(0.85*len(df1))]\ndf1_test=df1[int(0.85*len(df1)):]","67b199f0":"def adfuller_test(data):\n    result=adfuller(data,autolag='AIC')\n    labels=[\"ADF Test Statistic\",\"p-value\",\"#Lags used\",\"#Observations\"]\n    for val,lab in zip(result,labels):\n        print(lab+\":\"+str(val))\n    #taking the significance value as 0.05\n    if result[1]>0.05 :\n        print(\"Model is Not Stationary\") #Null Hypothesis\n    else:\n        print(\"Model is Stationary\") #Alternate Hypothesis\n        \n\nprint(\"FEATURE 1 \")\nadfuller_test(df1_train['feature_1'])\nprint(\"FEATURE 2 \")\nadfuller_test(df1_train['feature_2'])","58680f07":"model = VAR(df1_train)\nresults = model.fit(maxlags=15, ic='aic')\nresults.summary()","4d989fd7":"predicted = results.forecast(results.y, steps=len(df1_test))\n\nlabels=['feature_1','feature_2']\npredicted=pd.DataFrame(predicted, columns=labels)","28ce4071":"print(predicted.shape)\ndf1_test.shape","1ed56ef1":"for i in labels:\n    print('rmse for '+i+' is : '+str(math.sqrt(mean_squared_error(predicted[i],df1_test[i]))))","1c49ee59":"plt.plot(predicted['feature_2'])\nplt.plot(df1_test['feature_2'])\nplt.show()","ffabae11":"df_test=pd.read_csv('..\/input\/into-the-future\/test.csv')\nprint(df_test.head())\ndf_test.shape","5b1f48ee":"data_test=df_test[['time','feature_1']]\ndata_test.set_index('time', inplace=True)\ndata_test.head()","24228405":"final_prediction = results.forecast(results.y, steps=len(data_test)+len(df1_test))\nfinal_prediction.shape","08e7fc97":"final_prediction1 = pd.DataFrame(final_prediction,columns=['feature_1','feature_2'],index=range(len(df1_test), len(df1_test)+len(final_prediction), 1))\nprint(final_prediction1.shape)\n\nfinal_prediction2=final_prediction1[len(df1_test):]\nfinal_prediction2.shape","ff2283f8":"print('rmse for '+i+' is : '+str(math.sqrt(mean_squared_error(final_prediction2['feature_1'],data_test['feature_1']))))\n\nplt.plot(final_prediction2['feature_1'])\nplt.plot(data_test['feature_1'])\nplt.show()","b39fa90f":"final_prediction2['id'] = index=range(564, 564+len(final_prediction2), 1)\nfinal_prediction2.set_index('id',inplace=True)\nfinal_sol =final_prediction2.drop(['feature_1'],1)\n\nfinal_sol","fce76b02":"final_sol.to_csv('Final_Solution.csv')","b8327414":"Performing the same Data Processing steps as performed in the Train dataset.","c7e49ea4":"Forecasting the CV data and converting it to DataFrame for further use.","525f9715":"So, moving ahead with the submission.","f9a868e4":"# Time Series data forecasting","4f9f9ad0":"# Conclusion","b7bcf79c":"# Training and Testing Model","37b46122":"Thank you for this opportunity, solving this was a great learning experience for me.\n<br><\/br>I'll be waiting for the feedback.\n<br><\/br>Thank You.","bd8b54ff":"Making sure if the shape of the predicted dataframe and the df1_test dataframe is same.","ef1a0ebf":"# Measuring the Performance","22e479e2":"# Final Prediction and Submission","1715fa0f":"I had tested with different types models and different parameters, and this was the model with the best predictions, having comparatively better RMSE score.","b2c558ed":"Checking the RMSE for *feature_1* just to be sure for any Overfitting and plotting the Predicted values of *feature_1* alongwith the Actual values *feature_1* in for test.csv","7548ae56":"# Data Preprocessing","9a5a6005":"Converting to DataFrame for further computations.","49bc75ba":"Splitting the Train data for training the model : the first 85% for Train and the remaining 15% for Cross Validation","aeb6b181":"# Importing Libraries","977cdf24":"So, as we can see that the RMSE for feature_1 is **8.057180950988691** and the RMSE for feature_2 is **242.59720453616242** so we can conclude that our forecast is quite accurate for the train data, so let's proceed to the final predictions of *feature_2* for Test data","e76682a9":"Checking the info, just to be sure, in case any missing values.","4627de73":"Loading the test.csv","909bf425":"As we can see that the RMSE for *feature_1* is **33.40936553566021** and the plot also shows that the forecast is quite satisfactory, so we can conclude that even for *feature_2* the RMSE would be nearly accurate, as per the trend.","09cca9c7":"Even though the data looks *stationary*, but it's still better to be sure, as the model might make wrong predictions in case of *non-stationary data*.\n\n<br><\/br>\nI'll be performing the ***Dicky Fuller Test*** , a Hypothesis Testing where: <br><\/br>\n* H0 : It's Non-stationary\n* H1 : It's Stationary\n","fc1a77b4":"As we can see, both *feature_1* and *feature_2* are stationary, so we can proceed with training the model.","14334449":"Root Mean Squared Error(RMSE) for *feature_1* and *feature_2*","c46ccac0":"Forecasting the final test data.","5e7d7b3b":"Plotting the Real and Predicted data"}}