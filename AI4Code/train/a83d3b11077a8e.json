{"cell_type":{"ff44407d":"code","f9d70824":"code","7a4eb7ed":"code","0614fe10":"code","e147fc0f":"code","308277ca":"code","ca67b94e":"code","9e94cec7":"code","7ca06b16":"code","fc3df321":"code","ac83de2b":"code","88fbb29b":"code","93e938f2":"code","179f42cf":"code","37b342f0":"code","7744f769":"code","381bd8e4":"code","72c43a04":"code","4a560541":"code","f4b63617":"code","858e632f":"code","68bf7dfa":"code","2fd9aa28":"code","37003639":"code","38bf6e37":"code","fd82b002":"code","f6ef01ba":"code","378990e4":"code","cb7cbcf5":"code","f41705a1":"code","b9e2cc26":"code","7a1555aa":"code","c946d8e1":"code","f663f224":"code","28e2da3b":"code","cafa760f":"code","225617d0":"code","0094cf96":"code","ee71fb3d":"code","1fbbf1aa":"code","aa0d3dff":"code","0b613251":"code","090f183f":"code","13b34194":"code","ca91efa6":"code","1dfaef53":"code","58764575":"code","b8d28d18":"code","d2a2ff52":"code","b95c8d93":"code","ac20ef2b":"code","6765a014":"code","9ae8dab9":"code","9c93f06b":"code","23420e6f":"code","a986c8a0":"code","0d6c8116":"code","812f125d":"code","d429cb52":"code","4e053bc9":"code","a1252f1e":"code","eb7d5cde":"markdown","3d6bafef":"markdown","3a4e1a73":"markdown","5e976900":"markdown","3c09ed7c":"markdown","98397207":"markdown","75362381":"markdown"},"source":{"ff44407d":"INPUT_DIR = r'..\/input'\nimport os\nprint(os.listdir(INPUT_DIR))","f9d70824":"import os\nimport time\nimport tqdm\nimport datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom catboost import Pool, CatBoostRegressor\nimport hyperopt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nsns.set()","7a4eb7ed":"# \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\ndf_ruloni = pd.read_csv(os.path.join(INPUT_DIR, 'Ruloni.csv'))\ndf_ruloni_copy = df_ruloni.copy()\ndf_valki = pd.read_csv(os.path.join(INPUT_DIR, 'Valki.csv'))\ndf_zavalki = pd.read_csv(os.path.join(INPUT_DIR, 'Zavalki.csv'))\n\ndf_ruloni.rename({'\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438':'\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'}, axis=1, inplace=True)\ndf_test = pd.read_csv(os.path.join(INPUT_DIR, 'Test.csv'))\ndf_sample_test = pd.read_csv(os.path.join(INPUT_DIR, 'sample_test.csv'))","0614fe10":"# \u0417\u0430\u043f\u0438\u0448\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043f\u0430\u0440\u0442\u0438\u0439\ndf_ruloni['party'] = 1e10\n\n# \u041f\u043e \u0434\u0430\u0442\u0430\u043c \u0437\u0430\u0432\u0430\u043b\u043a\u0438 \u0442\u0440\u0435\u0439\u043d\u0430\ndates = df_zavalki['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'].unique().tolist()\n# \u041f\u043e \u0434\u0430\u0442\u0430\u043c \u0437\u0430\u0432\u0430\u043b\u043a\u0438 \u0442\u0435\u0441\u0442\u0430\ntest_dates = df_test['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'].unique().tolist()\ndates = dates + test_dates\n\ni = 0\nfor f in tqdm.tqdm_notebook(dates[1:]):\n    #print(f'{f} < x <{dates[i]}')  \n    df_ruloni.loc[(df_ruloni['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'] < f)&\n                  (df_ruloni['party'] >= i), 'party'] = i\n    i+=1\n\n# \u041a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0438\n# <2018-12-31 21:03:39\ndf_ruloni.loc[(df_ruloni['party']==1e10)&\n              (df_ruloni['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438']<'2018-12-31 21:03:39'), 'party'] = 2413\ndf_ruloni.loc[df_ruloni['party']==1e10, 'party'] = 2414","e147fc0f":"df_ruloni.tail()","308277ca":"# \u0415\u0449\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f, \u0447\u0442\u043e \u0448\u043b\u043e \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0432 \u043f\u0430\u0440\u0442\u0438\u0438\ndf_ruloni['\u043f\u043e\u0440\u044f\u0434\u043e\u043a_\u043f\u0440\u043e\u0445\u043e\u0434\u0430'] = None\nfor i in tqdm.tqdm_notebook(range(2414+1)):\n    l = df_ruloni[df_ruloni['party']==i].shape[0]\n    df_ruloni.loc[df_ruloni['party']==i, '\u043f\u043e\u0440\u044f\u0434\u043e\u043a_\u043f\u0440\u043e\u0445\u043e\u0434\u0430'] = [x for x in range(1, l+1)]","ca67b94e":"# \u0414\u043b\u044f df_ruloni \u0434\u0430\u0442\u0443 \u0437\u0430\u0432\u0430\u043b\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0443\u044e, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\nfor i in tqdm.tqdm_notebook(range(2414+1)):\n    d = df_ruloni[df_ruloni['party']==i]['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'].iloc[0]\n    df_ruloni.loc[df_ruloni['party']==i, '\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'] = d","9e94cec7":"df_ruloni.head()","7ca06b16":"df_ruloni['\u043f\u043e\u0440\u044f\u0434\u043e\u043a_\u043f\u0440\u043e\u0445\u043e\u0434\u0430'].max()","fc3df321":"# \u0422\u043e\u043d\u043d\u0430\u0436 \ntonn = pd.DataFrame(df_ruloni.groupby(['party'])['\u041c\u0430\u0441\u0441\u0430'].sum())\ntonn.reset_index(inplace=True, drop=False)\nmass_std = tonn['\u041c\u0430\u0441\u0441\u0430'].std()\nmass_mean = tonn['\u041c\u0430\u0441\u0441\u0430'].mean()\nplt.hist(tonn['\u041c\u0430\u0441\u0441\u0430'], bins = 20)\nplt.plot([mass_mean+ 3*mass_std for x in range(100)], [x*2 for x in range(100)])\nplt.plot([mass_mean- 3*mass_std for x in range(100)], [x*2 for x in range(100)])\nplt.show()","ac83de2b":"df_ruloni['\u0428\u0438\u0440\u0438\u043d\u0430'].hist(bins=20)\nplt.show()","88fbb29b":"df_ruloni['\u0422\u043e\u043b\u0449\u0438\u043d\u0430'].hist(bins=20)\nplt.show()","93e938f2":"# \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c - \u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438\nmarki = pd.get_dummies(df_ruloni['\u041c\u0430\u0440\u043a\u0430'])\ndf_ruloni = pd.concat([df_ruloni, marki], axis=1)\ndel df_ruloni['\u041c\u0430\u0440\u043a\u0430']","179f42cf":"df_ruloni.head()","37b342f0":"def to_dtime(s):\n    return datetime.datetime.strptime(s, \"%Y-%m-%d %H:%M:%S\")\ndef to_seconds(end, start):\n    return (to_dtime(end) - to_dtime(start)).seconds","7744f769":"# \u0418\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u043c\u0430\u0440\u043e\u043a \u0441\u0442\u0430\u043b\u0438\nmarki_names = df_ruloni.columns.tolist()[6:]\n\ndf_ruloni['\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0428\u0438\u0440\u0438\u043d\u0430'] = df_ruloni['\u0422\u043e\u043b\u0449\u0438\u043d\u0430']*df_ruloni['\u0428\u0438\u0440\u0438\u043d\u0430']","381bd8e4":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043f\u0440\u043e\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u043c \u043c\u0430\u0440\u043a\u0430\u043c \u0441\u0442\u0430\u043b\u0438\nv1 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])[marki_names].sum())\nv1.reset_index(inplace=True)\n\n# \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u043f\u0440\u043e\u0448\u043b\u043e\nv2 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u043f\u043e\u0440\u044f\u0434\u043e\u043a_\u043f\u0440\u043e\u0445\u043e\u0434\u0430'].max())\nv2.reset_index(inplace=True)\nv2.rename({'\u043f\u043e\u0440\u044f\u0434\u043e\u043a_\u043f\u0440\u043e\u0445\u043e\u0434\u0430':'\u043f\u0440\u043e\u0448\u043b\u043e_\u0440\u0443\u043b\u043e\u043d\u043e\u0432'}, axis=1)\n\n# \u0421\u0443\u043c\u043c\u0430\u0440\u043d\u0430\u044f \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u0430\u044f \u043c\u0430\u0441\u0441\u0430\nv3 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u041c\u0430\u0441\u0441\u0430'].sum())\nv3.reset_index(inplace=True)\nv3.rename({'\u041c\u0430\u0441\u0441\u0430':'\u041c\u0430\u0441\u0441\u0430_\u0441\u0443\u043c\u043c\u0430'}, axis=1, inplace=True)\n\n# \u041c\u0438\u043d\u0438\u043c\u0443\u043c \u043c\u0430\u0441\u0441\u044b\nv4 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u041c\u0430\u0441\u0441\u0430'].min())\nv4.reset_index(inplace=True)\nv4.rename({'\u041c\u0430\u0441\u0441\u0430':'\u041c\u0430\u0441\u0441\u0430_\u043c\u0438\u043d'}, axis=1, inplace=True)\n\n# \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043c\u0430\u0441\u0441\u044b\nv5 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u041c\u0430\u0441\u0441\u0430'].max())\nv5.reset_index(inplace=True)\nv5.rename({'\u041c\u0430\u0441\u0441\u0430':'\u041c\u0430\u0441\u0441\u0430_\u043c\u0430\u043a\u0441'}, axis=1, inplace=True)\n\n# \u0421\u0438\u0433\u043c\u0430 \u043c\u0430\u0441\u0441\u0430\nv6 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u041c\u0430\u0441\u0441\u0430'].std())\nv6.reset_index(inplace=True)\nv6.rename({'\u041c\u0430\u0441\u0441\u0430':'\u041c\u0430\u0441\u0441\u0430_\u0441\u0438\u0433\u043c\u0430'}, axis=1, inplace=True)\n\n# \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u0430\u0441\u0441\u0430\nv7 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u041c\u0430\u0441\u0441\u0430'].mean())\nv7.reset_index(inplace=True)\nv7.rename({'\u041c\u0430\u0441\u0441\u0430':'\u041c\u0430\u0441\u0441\u0430_\u0441\u0440'}, axis=1, inplace=True)","72c43a04":"# \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0442\u043e\u043b\u0449\u0438\u043d\u0430\nv8 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0422\u043e\u043b\u0449\u0438\u043d\u0430'].mean())\nv8.reset_index(inplace=True)\nv8.rename({'\u0422\u043e\u043b\u0449\u0438\u043d\u0430':'\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0441\u0440'}, axis=1, inplace=True)\n\n# \u0421\u0438\u0433\u043c\u0430 \u0442\u043e\u043b\u0449\u0438\u043d\u044b\nv9 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0422\u043e\u043b\u0449\u0438\u043d\u0430'].std())\nv9.reset_index(inplace=True)\nv9.rename({'\u0422\u043e\u043b\u0449\u0438\u043d\u0430':'\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0441\u0438\u0433\u043c\u0430'}, axis=1, inplace=True)\n\n# \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0448\u0438\u0440\u0438\u043d\u0430\nv10 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0428\u0438\u0440\u0438\u043d\u0430'].mean())\nv10.reset_index(inplace=True)\nv10.rename({'\u0428\u0438\u0440\u0438\u043d\u0430':'\u0428\u0438\u0440\u0438\u043d\u0430_\u0441\u0440'}, axis=1, inplace=True)\n\n# \u0421\u0438\u0433\u043c\u0430 \u0448\u0438\u0440\u0438\u043d\u044b\nv11 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0428\u0438\u0440\u0438\u043d\u0430'].std())\nv11.reset_index(inplace=True)\nv11.rename({'\u0428\u0438\u0440\u0438\u043d\u0430':'\u0428\u0438\u0440\u0438\u043d\u0430_\u0441\u0438\u0433\u043c\u0430'}, axis=1, inplace=True)\n\n# \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0422\u043e\u043b\u0449\u0438\u043d\u0430*\u0428\u0438\u0440\u0438\u043d\u0430\nv12 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0428\u0438\u0440\u0438\u043d\u0430'].mean())\nv12.reset_index(inplace=True)\nv12.rename({'\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0428\u0438\u0440\u0438\u043d\u0430':'\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0428\u0438\u0440\u0438\u043d\u0430_\u0441\u0440'}, axis=1, inplace=True)\n\n# \u0421\u0438\u0433\u043c\u0430 \u0422\u043e\u043b\u0449\u0438\u043d\u0430*\u0428\u0438\u0440\u0438\u043d\u0430\nv13 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0428\u0438\u0440\u0438\u043d\u0430'].std())\nv13.reset_index(inplace=True)\nv13.rename({'\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0428\u0438\u0440\u0438\u043d\u0430':'\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0428\u0438\u0440\u0438\u043d\u0430_\u0441\u0438\u0433\u043c\u0430'}, axis=1, inplace=True)","4a560541":"# \u041c\u0438\u043d \u0442\u043e\u043b\u0449\u0438\u043d\u044b\nv14 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0422\u043e\u043b\u0449\u0438\u043d\u0430'].min())\nv14.reset_index(inplace=True)\nv14.rename({'\u0422\u043e\u043b\u0449\u0438\u043d\u0430':'\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u043c\u0438\u043d'}, axis=1, inplace=True)\n\n# \u041c\u0430\u043a\u0441 \u0442\u043e\u043b\u0449\u0438\u043d\u044b\nv15 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0422\u043e\u043b\u0449\u0438\u043d\u0430'].max())\nv15.reset_index(inplace=True)\nv15.rename({'\u0422\u043e\u043b\u0449\u0438\u043d\u0430':'\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u043c\u0430\u043a\u0441'}, axis=1, inplace=True)\n\n# \u041c\u0438\u043d \u0448\u0438\u0440\u0438\u043d\u044b\nv16 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0428\u0438\u0440\u0438\u043d\u0430'].min())\nv16.reset_index(inplace=True)\nv16.rename({'\u0428\u0438\u0440\u0438\u043d\u0430':'\u0428\u0438\u0440\u0438\u043d\u0430_\u043c\u0438\u043d'}, axis=1, inplace=True)\n\n# \u041c\u0430\u043a\u0441 \u0448\u0438\u0440\u0438\u043d\u044b\nv17 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u0428\u0438\u0440\u0438\u043d\u0430'].max())\nv17.reset_index(inplace=True)\nv17.rename({'\u0428\u0438\u0440\u0438\u043d\u0430':'\u0428\u0438\u0440\u0438\u043d\u0430_\u043c\u0430\u043a\u0441'}, axis=1, inplace=True)","f4b63617":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430\ndf_ruloni['\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438'] = df_ruloni_copy['\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438']\ndf_ruloni['\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_lag'] = df_ruloni['\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438'].shift(1)\ndf_ruloni['\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_lag'].fillna(value=0, inplace=True)","858e632f":"t = [116.81109473044754] # \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\nfor i in tqdm.tqdm_notebook(range(1,df_ruloni.shape[0])):\n    s = to_seconds(df_ruloni['\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438'].iloc[i],\n                   df_ruloni['\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_lag'].iloc[i])\n    t.append(s)\ndf_ruloni['\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f'] = t","68bf7dfa":"# \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\nv18 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f'].mean())\nv18.reset_index(inplace=True)\nv18.rename({'\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f':'\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f_\u0441\u0440'}, axis=1, inplace=True)\n\n# \u0421\u0438\u0433\u043c\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\nv19 = pd.DataFrame(df_ruloni.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])['\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f'].std())\nv19.reset_index(inplace=True)\nv19.rename({'\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f':'\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f_\u0441\u0438\u0433\u043c\u0430'}, axis=1, inplace=True)","2fd9aa28":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0435\u0439 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u043c\u0430\u0440\u043a\u0443 \u0441\u0442\u0430\u043b\u0438\ndf_ruloni_newf = df_ruloni.copy()\n\ncls = df_ruloni_newf.columns.tolist()\nfor i in ['\u041c\u0430\u0441\u0441\u0430', '\u0422\u043e\u043b\u0449\u0438\u043d\u0430', '\u0428\u0438\u0440\u0438\u043d\u0430', '\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438', 'party',\n          '\u043f\u043e\u0440\u044f\u0434\u043e\u043a_\u043f\u0440\u043e\u0445\u043e\u0434\u0430', '\u0422\u043e\u043b\u0449\u0438\u043d\u0430_\u0428\u0438\u0440\u0438\u043d\u0430','\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438',\n          '\u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_lag']:\n    cls.remove(i)\ndf_ruloni_newf = df_ruloni_newf[cls].copy()","37003639":"cls.remove('\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f')\nfor i in cls:\n    df_ruloni_newf[f'{i}_time'] = df_ruloni_newf[i]*df_ruloni_newf['\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f']\n    \nmarki_times = df_ruloni_newf.columns.tolist()[100:]\ndf_ruloni_newf['marki_time'] = 0\nfor m in marki_times:\n    df_ruloni_newf['marki_time'] = df_ruloni_newf[m]+df_ruloni_newf['marki_time']","38bf6e37":"df_ruloni['marki_time'] = df_ruloni_newf['marki_time']\ndf_ruloni_newf = df_ruloni_newf[marki_times].copy()\ndf_ruloni_newf['party'] = df_ruloni['party']","fd82b002":"tmp = pd.DataFrame(df_ruloni.groupby(['party'])['marki_time'].sum())\ntmp.reset_index(inplace=True, drop=False)\ntmp.rename({'marki_time':'marki_time_sum'}, axis=1, inplace=True)\n\ndf_ruloni_newf = df_ruloni_newf.merge(tmp, how='left', on = ['party'])\n\nfor m in marki_times:\n    df_ruloni_newf[m] = df_ruloni_newf[m]\/df_ruloni_newf['marki_time_sum']\n    \ntime_fractions = df_ruloni_newf[marki_times].copy()","f6ef01ba":"time_fractions['party'] = df_ruloni['party']\ntime_fractions['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'] = df_ruloni['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438']\n\ntime_fr = time_fractions.groupby(['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])[marki_times].sum()\ntime_fr.reset_index(inplace=True, drop=False)\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u043c\u043c\u044b \u0434\u043e\u043b\u0435\u0439 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0433\u043e\u043d\u0443 \u043f\u0430\u0440\u0442\u0438\u0438. \n# 1+- machine eps\ntime_fr.iloc[0][marki_times].sum()","378990e4":"time_fr.head(1)","cb7cbcf5":"df_zavalki.head()","f41705a1":"# \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 df_ruloni\ndf_ruloni_exp = pd.merge(v1,v2, how='left', on = ['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])\nfor v in [v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,\n          v14,v15,v16,v17,v18,v19,time_fr]:\n    df_ruloni_exp = pd.merge(df_ruloni_exp, v, how='left', on = ['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])","b9e2cc26":"df_ruloni_exp.head(1)","7a1555aa":"df_ruloni_exp.shape","c946d8e1":"def process_df_tocatb(df_test, df_valki, df_ruloni):\n\n    df_test['\u043d\u043e\u043c\u0435\u0440_\u043a\u043b\u0435\u0442\u043a\u0438'] = df_test['\u043d\u043e\u043c\u0435\u0440_\u043a\u043b\u0435\u0442\u043a\u0438'].astype(str)\n    \n    time_sec = []\n    for i in tqdm.tqdm(range(df_test.shape[0])):\n        s = to_seconds(df_test.iloc[i]['\u0434\u0430\u0442\u0430_\u0432\u044b\u0432\u0430\u043b\u043a\u0438'], df_test.iloc[i]['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])\n        time_sec.append(s)\n        \n    df_test['time_sec'] = time_sec\n    df_test = df_test.merge(df_valki, how='left', on = ['\u043d\u043e\u043c\u0435\u0440_\u0432\u0430\u043b\u043a\u0430'])\n    \n    df_test = df_test.merge(df_ruloni, how='left', on = ['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438'])\n\n    df_test.rename({'\u0438\u0437\u043d\u043e\u0441':'y'}, axis=1, inplace=True)\n    \n    return df_test","f663f224":"# \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nzavalki_to_catboost = process_df_tocatb(df_zavalki, df_valki, df_ruloni_exp)","28e2da3b":"# \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntest_to_catboost = process_df_tocatb(df_test, df_valki, df_ruloni_exp)","cafa760f":"zavalki_to_catboost.head()","225617d0":"def y_hist(zavalki_to_catboost):\n    # \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430\n    plt.hist(zavalki_to_catboost['y'].values, bins=20)\n    y_mean = zavalki_to_catboost['y'].mean()\n    y_std = zavalki_to_catboost['y'].std()\n    plt.plot([y_mean+ 3*y_std for x in range(1000)], [x*2 for x in range(1000)], color='r')\n    plt.plot([y_mean- 3*y_std for x in range(1000)], [x*2 for x in range(1000)], color='r')\n    plt.plot()\n    plt.show()","0094cf96":"y_hist(zavalki_to_catboost)","ee71fb3d":"# \u0423\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\nzavalki_to_catboost = zavalki_to_catboost[zavalki_to_catboost['y'] <=2]\nzavalki_to_catboost_ts= zavalki_to_catboost.copy()\nzavalki_to_catboost_ts.reset_index(inplace=True, drop=True)","1fbbf1aa":"plt.hist(zavalki_to_catboost['y'].values, bins=20)\nplt.show()","aa0d3dff":"# \u0415\u0441\u0442\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e 4 \u043a\u0432\u0430\u0440\u0442\u0430\u043b\u0443\n# \u0418\u0445 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u043a\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nprint(zavalki_to_catboost.iloc[17825:].shape)\nzavalki_to_catboost.iloc[17825:]","0b613251":"# \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438\ndel zavalki_to_catboost['\u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438']\ndel zavalki_to_catboost['\u0434\u0430\u0442\u0430_\u0432\u044b\u0432\u0430\u043b\u043a\u0438']","090f183f":"# \u0420\u0430\u0437\u0431\u0438\u0442\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u0432\u0430\u0440\u0442\u0430\u043b\u043e\u043c.\n# \u0422\u0435\u0441\u0442\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441 \u043f\u043e\u043a\u0432\u0430\u0440\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043e\u043a\u043d\u043e\u043c:\n# Train 1q, Test 2q; Train 2q, Test 3q\n# \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0434\u0430\u043d\u044b\u0445 \u043f\u043e 4 \u043a\u0432\u0430\u0440\u0442\u0430\u043b\u0443 - \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 best_model \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430.\n\n# \u041f\u043e\u043a\u0432\u0430\u0440\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u044f\u0447\u0435\u0435\u043a \u0441 \u0443\u0441\u0435\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e y \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \n# 1 reduced: 0:5869\n# 2 reduced: 5869:11806\n# 3 reduced: 11806:17825\n# 4 small:   17825:end\nX_q1nohe, y_q1 = zavalki_to_catboost.iloc[0:5869], zavalki_to_catboost['y'].iloc[0:5869]\nX_q2nohe, y_q2 = zavalki_to_catboost.iloc[5870:11806], zavalki_to_catboost['y'].iloc[5870:11806]\nX_q3nohe, y_q3 = zavalki_to_catboost.iloc[11807:17825], zavalki_to_catboost['y'].iloc[11807:17825]\nX_q4_small_val, y_q4_small_val = zavalki_to_catboost.iloc[17825:], zavalki_to_catboost['y'].iloc[17825:]","13b34194":"zavalki_to_catboost.head(1)","ca91efa6":"zavalki_to_catboost.shape","1dfaef53":"# \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0438\u0445 \u0438\u043d\u0434\u0435\u043a\u0441\u044b\nfor i, f in enumerate(X_q1nohe.columns):\n    print(i, f)","58764575":"#------------------------------\n#  \u0421\u0432\u043e\u0434\u043a\u0438 \u0438\u0437 \u0447\u0430\u0441\u0442\u0438 \u0438\u0434\u0435\u0439 \u043f\u043e \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044e RMSE \u0434\u043b\u044f Catboost\n#  \u041a\u0432\u0430\u0440\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u0446\u0435\u043b\u044c\u044e \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0430\u0432\u0434\u043e\u043f\u043e\u0434\u043e\u0431\u043d\u043e\u043c\u0443 \u043f\u043e \u0441\u0430\u0431\u043c\u0438\u0442\u0443\n#------------------------------\n# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \n#(0.2678169292)\/(0.2695692791) - \u043d\u0430 2999 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438\n\n# \u043c\u0438\u043d\/\u043c\u0430\u043a\u0441 \u043f\u043e \u0422\u043e\u043b\u0449\u0438\u043d\u0435 \u0438 \u0428\u0438\u0440\u0438\u043d\u0435\n# (0.2592309416)\/(0.2623674841)- \u043d\u0430 2999 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438\n\n# \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441 \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u0432\u0435\u0441\u043e\u043c \u043f\u043e \u0438\u0442\u043e\u0433\u0430\u043c\n# (0.2592309416)\/(0.2623674841)- \u043d\u0430 2999 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438\n\n# \u043c\u0438\u043d\/\u043c\u0430\u043a\u0441 \u043f\u043e \u0422\u043e\u043b\u0449\u0438\u043d\u0430*\u0428\u0438\u0440\u0438\u043d\u0430\n# (0.2592564188)\/(0.2630818086)- \u043d\u0430 2999 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438. \u0423\u0431\u0440\u0430\u0442\u044c\n\n# \u0423\u0431\u0440\u0430\u043d\u043e \u043c\u0438\u043d\/\u043c\u0430\u043a\u0441 \u043f\u043e \u0422\u043e\u043b\u0449\u0438\u043d\u0430*\u0428\u0438\u0440\u0438\u043d\u0430\n# (0.2592791627)\/(0.2626429178)- \u043d\u0430 2999 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438.\n\n# \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0438 \u0441\u0438\u0433\u043c\u0430 \u043f\u043e \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438\n# (0.2581583367)\/(0.2625029269)- \u043d\u0430 2999 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438.\n\n# \u041c\u0430\u0441\u0441\u0430_\u0441\u0443\u043c\u043c\u0430\/time_sec:\n# (0.2603577499)\/(0.2630249549)\n\n# \u0414\u043e\u043b\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043c\u0430\u0440\u043e\u043a \u0441\u0442\n# (0.2567618605)\/(0.259612986)\n\n# \u0414\u043e\u043b\u0438 \u043c\u0430\u0441\u0441 \u043c\u0430\u0440\u043e\u043a \u0441\u0442\n# (0.2567835873)\/(0.260658636) \u0423\u0431\u0440\u0430\u0442\u044c\n\n# iterations 3000>3500 \n# (0.255353185)\/(0.2585162396)  - \u043d\u0430 3499 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438.\n\n# iterations 3500>4000\n# (0.2545113556)\/(0.2576650744) - \u043d\u0430 3999 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438.\n\n#  \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 hyperopt\n# 500 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439, 10 eval-\u043e\u0432\n# {'l2_leaf_reg': 2.0, 'learning_rate': 0.03375590702146598}\n# [13:01<00:00, 77.64s\/it, best loss: 0.00924935909274656]\n# (0.2511933302)\/(0.2562225371)\n\n# \u041e\u0442\u0440\u0430\u0431\u043e\u0442\u043a\u0430 hyperopt \u043d\u0430 colaboratory:\n\n\"\"\"\ndef hyperopt_objective(params):\n    model = CatBoostRegressor(\n        l2_leaf_reg=int(params['l2_leaf_reg']),\n        learning_rate=params['learning_rate'],\n        iterations=3000,\n        eval_metric='RMSE',\n        random_seed=42,\n        task_type=\"GPU\",\n        logging_level='Silent'\n    )\n    \n    cv_data = cv(\n        Pool(zavalki_to_catboost, zavalki_to_catboost['y'],\n             cat_features=categorical_features_indices),\n        model.get_params()\n    )\n    best_rmse = np.min(cv_data['test-RMSE-mean'])\n    \n    return best_rmse # as hyperopt minimises\n    \nfrom numpy.random import RandomState\nparams_space = {\n    'l2_leaf_reg': hyperopt.hp.qloguniform('l2_leaf_reg', 0, 2, 1),\n    'learning_rate': hyperopt.hp.uniform('learning_rate', 1e-3, 1e-1),\n}\n\ntrials = hyperopt.Trials()\n\nbest = hyperopt.fmin(\n    hyperopt_objective,\n    space=params_space,\n    algo=hyperopt.tpe.suggest,\n    max_evals=10,\n    trials=trials,\n    rstate=RandomState(123)\n)\n\nprint(best)\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10\/10 [51:31<00:00, 307.29s\/it, best loss: 0.009103421834351715]\n{'l2_leaf_reg': 2.0, 'learning_rate': 0.03375590702146598}\n\"\"\"\n\n# 3000 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439, 10 eval-\u043e\u0432\n# {'l2_leaf_reg': 2.0, 'learning_rate': 0.03375590702146598}\n# [51:31<00:00, 307.29s\/it, best loss: 0.009103421834351715]\n# (0.2511933302)\/(0.2562225371)\n\n# y_lag\n# (0.2511000059)\/(0.2530664897)  \n# \u0414\u043b\u044f \u0442\u0435\u0441\u0442\u0430 - \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 y_lag,\n# \u041f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0438 \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0445 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043b\u0430\u0433\u043e\u0432\n# \u041d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0432\u043a\u043b\u0430\u0434, \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c.\n\n# iterations 4000>6000\n# (0.2511883717)\/(0.2562225371) -\u043d\u0430 5916\/3277 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438.\n\n# \u0423\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0442\u0430 \u0442\u043e, \u043a\u0430\u043a\u0438\u0435 \u0435\u0449\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0432\u0430\u043b\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0430\u043b\u043a\u0435\n# (0.2524229315)\/(0.2532975342)\n\n# \u041f\u0440\u0443\u043d\u0438\u043d\u0433 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432\n\"\"\"\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 10_time\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 104_time\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 106_time\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 107_time\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 15_time\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 28_time\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 29_time\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 31_time\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 37_time\n\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 40_time\n\"\"\"\n# (0.2508956729)\/(0.2545026402)","b8d28d18":"categorical_features_indices = [0, 1, 2, 5]","d2a2ff52":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0431\u044b\u043b\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e hyperopt\nparams = {\n    'iterations': 5000,\n    'learning_rate': 0.03375590702146598,\n    'l2_leaf_reg': 2.0,\n    'loss_function': 'RMSE',\n    'eval_metric': 'RMSE',\n    'ignored_features':['y',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 10_time',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 104_time',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 106_time',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 107_time',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 15_time',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 28_time',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 29_time',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 31_time',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 37_time',\n                        '\u041c\u0430\u0440\u043a\u0430 \u0441\u0442\u0430\u043b\u0438 40_time',]}\n\ncatb = CatBoostRegressor(**params)","b95c8d93":"train_pool = Pool(X_q1nohe, y_q1, \n                  cat_features=categorical_features_indices)\nvalidate_pool = Pool(X_q2nohe, y_q2, \n                     cat_features=categorical_features_indices)\ncatb.fit(train_pool, eval_set=validate_pool)","ac20ef2b":"d1 = dict()\nfor n, imp in zip(catb.feature_names_, catb.feature_importances_):\n    d1.update({n:imp})\n    print(n, imp)","6765a014":"df_d1 = pd.DataFrame([d1]).T\ndf_d1 = df_d1.sort_values(ascending=False, by=0)","9ae8dab9":"# Top-30 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfig = plt.figure(figsize = (10, 8))\nxs = [i for i in range(30)]\nplt.bar(xs, df_d1[0].values.tolist()[:30])\nplt.xticks(xs, df_d1.index.tolist()[:30], rotation=90)\nplt.show()","9c93f06b":"train_pool = Pool(X_q2nohe, y_q2, \n                  cat_features=categorical_features_indices)\nvalidate_pool = Pool(X_q3nohe, y_q3, \n                     cat_features=categorical_features_indices)\ncatb.fit(train_pool, eval_set=validate_pool)","23420e6f":"d2 = dict()\nfor n, imp in zip(catb.feature_names_, catb.feature_importances_):\n    d2.update({n:imp})\n    print(n, imp)","a986c8a0":"df_d2 = pd.DataFrame([d2]).T\ndf_d2 = df_d2.sort_values(ascending=False, by=0)","0d6c8116":"# Top-30 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfig = plt.figure(figsize = (10, 8))\nxs = [i for i in range(30)]\nplt.bar(xs, df_d2[0].values.tolist()[:30])\nplt.xticks(xs, df_d2.index.tolist()[:30], rotation=90)\nplt.show()","812f125d":"# \u0414\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430 \u0438\u0449\u0435\u043c best_model \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u043f\u043e 4 \u043a\u0432\u0430\u0440\u0442\u0430\u043b\u0443\nbest_model_params = params.copy()\nbest_model_params.update({'use_best_model': True})\n\nbest_model = CatBoostRegressor(**best_model_params)\ntrain_to_kaggle_pool = Pool(zavalki_to_catboost, zavalki_to_catboost['y'],\n                            cat_features=categorical_features_indices)\n\nvalidate_pool_to_kaggle = Pool(X_q4_small_val, y_q4_small_val, \n                               cat_features=categorical_features_indices)\n\nbest_model.fit(train_to_kaggle_pool, eval_set=validate_pool_to_kaggle)","d429cb52":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y \u0432 \u0442\u0440\u0435\u0439\u043d\u0435\ntest_to_catboost['y'] = 0\ntest_to_catboost_for_pred = test_to_catboost[zavalki_to_catboost.columns.tolist()]","4e053bc9":"preds_catb = best_model.predict(test_to_catboost_for_pred)\noutput = pd.DataFrame({'id':test_to_catboost['id'].values,\n                       'iznos':preds_catb})\noutput['iznos'].hist()\nplt.show()","a1252f1e":"#output.to_csv('submit_output.csv', index=False)\noutput.head(10)","eb7d5cde":"<a id='start'><\/a>\n [\u0412 \u043d\u0430\u0447\u0430\u043b\u043e](#start)\n \n 1. __[Data preprocessing](#prep)__\n \n 2. __[Feature engineering](#f_eng)__\n \n 3. __[Making data for model](#final_prep)__\n \n 4. __[Experiments results](#exp_res)__\n \n \u0412 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043d\u0430 Kaggle \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c.\n \u041f\u0430\u0439\u043f\u043b\u0430\u0439\u043d \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0440\u044f\u0434\u043e\u043c \u043f\u0440\u043e\u0431 \u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u0432\u043a\u043b\u044e\u0447\u0430\u043b \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 baseline \u043c\u043e\u0434\u0435\u043b\u0438, \n \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0432 3 \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u044f\u0445: \u0431\u0435\u0437 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438, c L2, \u0441 L1 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439.\n \u041f\u043e \u0438\u0442\u043e\u0433\u0430\u043c \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f baseline \u043c\u043e\u0434\u0435\u043b\u0438, \u0433\u0440\u0435\u0431\u043d\u0435\u0432\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0434\u0430\u043b\u0430 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u0442\u0435\u0441\u0442\u0443.\n \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043b\u0438\u0441\u044c \u0441 ridge \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0435\u0439.\n \u0414\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0443\u0436\u0435 \u043d\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u0430\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b XGBoost.\n \u0412 \u0441\u0438\u043b\u0443 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0441\u0442\u0430\u043b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433 CatBoost.\n","3d6bafef":"<a id='final_prep'><\/a>\n#### Final preprocess for modeling\n [\u0412 \u043d\u0430\u0447\u0430\u043b\u043e](#start)","3a4e1a73":"#### NLMK Kaggle InClass competition\n__The prediction of rolls wear in the hot strip mill (RAAI Summer School 2019, NLMK)__\n\n\u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043d\u043e\u0441\u0430 \u0432\u0430\u043b\u043a\u043e\u0432 \u043f\u0440\u043e\u043a\u0430\u0442\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u043d\u0430:\n\n[C\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430 Kaggle](#https:\/\/www.kaggle.com\/c\/prediction-of-rolls-wear-in-hot-strip-mill2\/leaderboard)","5e976900":"<a id='f_eng'><\/a>\n#### Feature engineering\n [\u0412 \u043d\u0430\u0447\u0430\u043b\u043e](#start)","3c09ed7c":"#### Experiments results\n<a id='exp_res'><\/a>\n [\u0412 \u043d\u0430\u0447\u0430\u043b\u043e](#start)","98397207":"#### Data preprocessing\n<a id='prep'><\/a>\n [\u0412 \u043d\u0430\u0447\u0430\u043b\u043e](#start)","75362381":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n\n    Ruloni.csv - \u0440\u0443\u043b\u043e\u043d\u044b, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0442\u0430\u043d\u0435 \u0433\u043e\u0440\u044f\u0447\u0435\u0439 \u043f\u0440\u043e\u043a\u0430\u0442\u043a\u0438 \u0437\u0430 2018 \u0433\u043e\u0434\n    Valki.csv - \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0432\u0430\u043b\u043a\u0438 \u0447\u0438\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043b\u0435\u0442\u0435\u0439\n    Zavalki.csv - \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0432\u0430\u043b\u043a\u043e\u0432 \u043d\u0430 \u0441\u0442\u0430\u043d\u0435 (I-III \u043a\u0432\u0430\u0440\u0442\u0430\u043b\u044b 2018 \u0433\u043e\u0434\u0430)\n    Test.csv - \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0432\u0430\u043b\u043a\u043e\u0432 \u0432 IV \u043a\u0432\u0430\u0440\u0442\u0430\u043b\u0435 2018, \u0438\u0437\u043d\u043e\u0441 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u043e\u043b\u0435 id \u0434\u043b\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435, \u0441\u043c. \u0444\u0430\u0439\u043b sample_test.csv\n    sample_test.csv - \u0444\u0430\u0439\u043b-\u0448\u0430\u0431\u043b\u043e\u043d \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 (\u0441\u0430\u0431\u043c\u0438\u0442\u0430)\n\n\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0442\u0430\u0431\u043b\u0438\u0446 \u0432 \u0444\u0430\u0439\u043b\u0430\u0445\n\n    Ruloni.csv\n    \u041c\u0430\u0440\u043a\u0430 - \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0440\u043a\u0438 \u0441\u0442\u0430\u043b\u0438\n    \u041c\u0430\u0441\u0441\u0430 - \u043c\u0430\u0441\u0441\u0430 \u043f\u0440\u043e\u043a\u0430\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0443\u043b\u043e\u043d\u0430 (\u0442)\n    \u0422\u043e\u043b\u0449\u0438\u043d\u0430 - \u0442\u043e\u043b\u0449\u0438\u043d\u0430 \u043f\u043e\u043b\u043e\u0441\u044b \u043c\u0435\u0442\u0430\u043b\u043b\u0430 (\u043c\u043c)\n    \u0428\u0438\u0440\u0438\u043d\u0430 - \u0448\u0438\u0440\u0438\u043d\u0430 \u043f\u043e\u043b\u043e\u0441\u044b \u043c\u0435\u0442\u0430\u043b\u043b\u0430 (\u043c\u043c)\n    \u0412\u0440\u0435\u043c\u044f_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 - \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0443\u043b\u043e\u043d\u0430\n    \n    \n    Valki.csv\n    \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b_\u0432\u0430\u043b\u043a\u0430 - \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u0432\u0430\u043b\u043a\u0430\n    \u043d\u043e\u043c\u0435\u0440_\u0432\u0430\u043b\u043a\u0430 - \u0443\u0447\u0451\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432\u0430\u043b\u043a\u0430\n    \n    \n    Zavalki.csv\n    \u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438 - \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432\u0430\u043b\u043a\u0430 \u0432 \u0441\u0442\u0430\u043d\n    \u0434\u0430\u0442\u0430_\u0432\u044b\u0432\u0430\u043b\u043a\u0438 - \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u043a\u0430 \u0438\u0437 \u0441\u0442\u0430\u043d\u0430\n    \u043d\u043e\u043c\u0435\u0440_\u043a\u043b\u0435\u0442\u043a\u0438 - \u043d\u043e\u043c\u0435\u0440 \u043a\u043b\u0435\u0442\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 (\u043a\u043b\u0435\u0442\u0438 8-12)\n    \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435_\u0432_\u043a\u043b\u0435\u0442\u0438 - \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u043a\u043b\u0435\u0442\u0438 (\u0432\u0435\u0440\u0445 \u0438\u043b\u0438 \u043d\u0438\u0437)\n    \u043d\u043e\u043c\u0435\u0440_\u0432\u0430\u043b\u043a\u0430 - \u0443\u0447\u0451\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432\u0430\u043b\u043a\u0430\n    \u0438\u0437\u043d\u043e\u0441 - \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0434\u0438\u0430\u043c\u0435\u0442\u0440\u0430 \u0432\u0430\u043b\u043a\u0430 \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0448\u043b\u0438\u0444\u043e\u0432\u043a\u0435 (\u044d\u0442\u0443 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c)\n    \n    \n    Test.csv\n    id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432\u0430\u043b\u043a\u0430 (\u044d\u0442\u043e\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441 \u0432\u0430\u0448\u0438\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u043c sample_test.csv)\n    \u0434\u0430\u0442\u0430_\u0437\u0430\u0432\u0430\u043b\u043a\u0438 - \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432\u0430\u043b\u043a\u0430 \u0432 \u0441\u0442\u0430\u043d\n    \u0434\u0430\u0442\u0430_\u0432\u044b\u0432\u0430\u043b\u043a\u0438 - \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u043a\u0430 \u0438\u0437 \u0441\u0442\u0430\u043d\u0430\n    \u043d\u043e\u043c\u0435\u0440_\u043a\u043b\u0435\u0442\u043a\u0438 - \u043d\u043e\u043c\u0435\u0440 \u043a\u043b\u0435\u0442\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 (\u043a\u043b\u0435\u0442\u0438 8-12)\n    \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435_\u0432_\u043a\u043b\u0435\u0442\u0438 - \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u043a\u043b\u0435\u0442\u0438 (\u0432\u0435\u0440\u0445 \u0438\u043b\u0438 \u043d\u0438\u0437)\n    \u043d\u043e\u043c\u0435\u0440_\u0432\u0430\u043b\u043a\u0430 - \u0443\u0447\u0451\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432\u0430\u043b\u043a\u0430\n    sample_test.csv\n    id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432\u0430\u043b\u043a\u043e\u0432 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 Test.csv\n    iznos - \u0432\u0430\u0448 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0438\u0437\u043d\u043e\u0441\u0430 \u0432\u0430\u043b\u043a\u0430\n"}}