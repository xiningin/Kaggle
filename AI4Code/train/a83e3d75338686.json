{"cell_type":{"d8394483":"code","5a2351da":"code","7b63c2ba":"code","5e6f09cd":"code","7c61e05e":"code","0cae5753":"code","b9917d5e":"code","5d3b809e":"code","0729f80e":"code","e720bdbe":"code","8557feae":"code","f219c2b9":"code","d35ba1d6":"code","822e6c27":"code","340f4fd0":"code","93078820":"code","95e95e46":"code","53f1979c":"code","fa1d3c9b":"code","c7c6901a":"code","3237d4e4":"code","efd6a708":"code","ad4631be":"code","bed43665":"code","d5fc322e":"code","3138ac2f":"code","cdc89351":"code","faf31216":"code","7684826a":"code","22864fac":"code","8aa5bf18":"code","b6ed2800":"markdown","8496caa2":"markdown"},"source":{"d8394483":"import numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport matplotlib\npd.set_option('display.max_columns', None)\npd.options.display.max_colwidth = 100\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew, boxcox_normmax\n\nimport seaborn as sns\n\nimport statsmodels.api as sm\n\nfrom plotly.offline import init_notebook_mode, iplot, plot\n\nimport statsmodels.formula.api as smf\nimport graphviz as gr","5a2351da":"data = pd.read_csv('\/kaggle\/input\/grallrounds\/Grants Results History Round over Round  Grant over Grant - GR1-GR12.csv')\n\ndef extract_values(df):\n    df.total = df.total.apply(lambda x: str(x).replace(',', '').replace('$', '')).astype(float)\n    df.crowdfund_amount_contributions_usd = df.crowdfund_amount_contributions_usd.apply(lambda x: str(x).replace('$', '').replace(',', '')).astype(float)\n    df.match_amount = df.match_amount.apply(lambda x: str(x).replace('$', '').replace(',', '')).astype(float)\n    return df\n\n\n\ndef cleaned_data(d):\n    d = d[d.total.notnull()]\n\n    d.region = d.region.fillna('undefined')\n    d.crowdfund_amount_contributions_usd = d.crowdfund_amount_contributions_usd.fillna(0)\n\n    abc = d.groupby(['grant_id']).agg(grant_uniq=(\"grant_title\", \"nunique\"), mode=(\"grant_title\", lambda x:x.value_counts().index[0]))\n\n    for x in abc[abc['grant_uniq']==2].index:\n        d.loc[lambda df: df['grant_id'] == x, 'grant_title'] = abc.loc[x, 'mode']\n        \n    return d.reset_index(drop=True)\n\ndata = extract_values(data)\ndata = cleaned_data(data)","7b63c2ba":"data = pd.get_dummies(data, columns= ['region','category'])","5e6f09cd":"corr = data.corr('spearman')\ncorr","7c61e05e":"import networkx as nx\n\n# Transform it in a links data frame (3 columns only):\nlinks = corr.stack().reset_index()\nlinks.columns = ['var1', 'var2','value']\n\n# correlation\nthreshold = 0.4\n\n# Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)\nlinks_filtered=links.loc[ (abs(links['value']) >= threshold ) & (links['var1'] != links['var2']) ]\n \n# Build your graph\nG=nx.from_pandas_edgelist(links_filtered, 'var1', 'var2')\n \n# Plot the network\nnx.draw_circular(G, with_labels=True, node_color='orange', node_size=300, edge_color='red', linewidths=1, font_size=7)","0cae5753":"# Create a categorical palette to identify the networks\nnumerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nused_columns = data.select_dtypes(include=numerics)\nnetwork_pal = sns.husl_palette(8, s=.45)\nnetwork_lut = dict(zip(map(str, used_columns), network_pal))\n\n# Convert the palette to vectors that will be drawn on the side of the matrix\nnetworks = data.columns.get_level_values(0)\nnetwork_colors = pd.Series(networks, index=data.columns).map(network_lut)\n\n# Draw the full plot\ng = sns.clustermap(data.corr('spearman'), center=0, cmap=\"vlag\",\n                   row_colors=network_colors, col_colors=network_colors,\n                   dendrogram_ratio=(.1, .2),\n                   cbar_pos=(.02, .32, .03, .2),\n                   linewidths=.75, figsize=(12, 13))\n\ng.ax_row_dendrogram.remove()\nplt.savefig('MSNObar.png', format='png')","b9917d5e":"# prepare data frames\ngr12 = data[data.round_number==12]\ngr11 = data[data.round_number==11]\ngr10 = data[data.round_number==10]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = gr12.total,\n                    y = gr12.num_unique_contributors,\n                    mode = \"markers\",\n                    name = \"12\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= gr12.grant_id)\n\n\n# creating trace2\ntrace2 =go.Scatter(\n                    x = gr11.total,\n                    y = gr11.num_unique_contributors,\n                    mode = \"markers\",\n                    name = \"11\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= gr11.grant_id)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = gr10.total,\n                    y = gr10.num_unique_contributors,\n                    mode = \"markers\",\n                    name = \"10\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= gr10.grant_id)\n\ndat = [trace1, trace2, trace3]\n\nlayout = dict(title = '10, 11 and 12 rounds',\n              xaxis= dict(title= 'Total raised funding',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Number of Unique Contributors',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = dat, layout = layout)\niplot(fig)","5d3b809e":"fig, ax = plt.subplots()\nax.scatter(x = data['match_amount'], y = data['crowdfund_amount_contributions_usd'])\nplt.ylabel('crowdfund_amount_contributions_usd', fontsize=13)\nplt.xlabel('match_amount', fontsize=13)\nplt.show()","0729f80e":"def plot_dist(var):\n    sns.distplot(var, fit=norm);\n    (mu, sigma) = norm.fit(var)\n\n    #plot the distribution\n    plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n                loc='best')\n    plt.ylabel('Frequency')\n    plt.title('Distribution')\n\n    #QQ-plot\n    plt.figure()\n    stats.probplot(var, plot=plt)\n    plt.show()\n\nplot_dist(data['match_amount'])","e720bdbe":"df = data[data.round_number.isin([8, 9, 10, 11])].grant_id.value_counts()\nd = data[(data.grant_id.isin(df[df==4].index))]\nd","8557feae":"data[(data.grant_id.isin(df[df==4].index))&(data.region_africa==1)].head(1)","f219c2b9":"data = pd.read_csv('\/kaggle\/input\/grallrounds\/Grants Results History Round over Round  Grant over Grant - GR1-GR12.csv')\n\ndef extract_values(df):\n    df.total = df.total.apply(lambda x: str(x).replace(',', '').replace('$', '')).astype(float)\n    df.crowdfund_amount_contributions_usd = df.crowdfund_amount_contributions_usd.apply(lambda x: str(x).replace('$', '').replace(',', '')).astype(float)\n    df.match_amount = df.match_amount.apply(lambda x: str(x).replace('$', '').replace(',', '')).astype(float)\n    return df\n\ndef cleaned_data(d):\n    d = d[d.total.notnull()]\n\n    d.region = d.region.fillna('undefined')\n    d.crowdfund_amount_contributions_usd = d.crowdfund_amount_contributions_usd.fillna(0)\n\n    abc = d.groupby(['grant_id']).agg(grant_uniq=(\"grant_title\", \"nunique\"), mode=(\"grant_title\", lambda x:x.value_counts().index[0]))\n\n    for x in abc[abc['grant_uniq']==2].index:\n        d.loc[lambda df: df['grant_id'] == x, 'grant_title'] = abc.loc[x, 'mode']\n        \n    return d.reset_index(drop=True)\n\ndata = extract_values(data)\ndata = cleaned_data(data)\ndata_ag = data.groupby(['round_number']).agg({\"total\":\"mean\", \"match_amount\":\"mean\", \"grant_id\":\"count\", \"num_unique_contributors\": \"mean\", \"crowdfund_amount_contributions_usd\": \"mean\"}).reset_index()\ndata = data.groupby(['round_number','region']).agg({\"total\":\"mean\", \"match_amount\":\"mean\", \"grant_id\":\"count\", \"num_unique_contributors\": \"mean\", \"crowdfund_amount_contributions_usd\": \"mean\"}).reset_index()","d35ba1d6":"#data = data.groupby(['round_number','region']).agg({\"total\":\"mean\", \"match_amount\":\"mean\", \"grant_id\":\"count\"}).reset_index()","822e6c27":"data","340f4fd0":"model1 = smf.ols('total ~ crowdfund_amount_contributions_usd', data=data_ag).fit()\nmodel1.summary().tables[1]","93078820":"model2 = smf.wls('total ~ crowdfund_amount_contributions_usd', data=data_ag, weights=data_ag[\"grant_id\"]).fit()\nmodel2.summary().tables[1]","95e95e46":"sns.scatterplot(x=\"crowdfund_amount_contributions_usd\", y = \"total\",  legend=False, data=data_ag, sizes=(40, 400))\nplt.plot(data_ag[\"crowdfund_amount_contributions_usd\"], model1.predict(data_ag[\"crowdfund_amount_contributions_usd\"]), c=\"C1\", label = \"Weighted\")\nplt.plot(data_ag[\"crowdfund_amount_contributions_usd\"], model2.predict(data_ag[\"crowdfund_amount_contributions_usd\"]), c=\"C2\", label = \"Non Weighted\")\nplt.xlabel(\"mean crowdfound amount\")\nplt.ylabel(\"total funding raised\")\nplt.legend();","53f1979c":"model1 = smf.wls('total ~ crowdfund_amount_contributions_usd + num_unique_contributors', data=data_ag, weights=data_ag[\"grant_id\"]).fit()\nmodel1.summary().tables[1]","fa1d3c9b":"data.region.value_counts()","c7c6901a":"model2 = smf.wls('total ~ C(region) + crowdfund_amount_contributions_usd + round_number', data=data, weights=data[\"grant_id\"]).fit()\nmodel2.summary().tables[1]","3237d4e4":"features = [\"total\",\"crowdfund_amount_contributions_usd\"]\n#features = [\"total\"]\ninverted = (data.query(\"round_number < 11 and round_number > 5\") # filter pre-intervention period\n            .pivot(index='region', columns=\"round_number\")[features] # make one column per year and one row per state\n            .T # flip the table to have one column per region\n            .fillna(0)) \n\ninverted.head()","efd6a708":"y = inverted['africa'].values # state of california\nX = inverted.drop(columns=['africa']).values  # other states\n\nfrom sklearn.linear_model import LinearRegression\nweights_lr = LinearRegression(fit_intercept=False).fit(X, y).coef_\nweights_lr.round(3)","ad4631be":"calif_synth_lr = (data.query(\"region!='africa' and round_number > 5\")\n                  .pivot(index='round_number', columns=\"region\")[\"total\"]\n                  .values.dot(weights_lr))","bed43665":"calif_synth_lr","d5fc322e":"plt.figure(figsize=(10,6))\nplt.plot(data.query(\"region=='africa'and round_number > 5\")[\"round_number\"], data.query(\"region=='africa'and round_number > 5\")[\"total\"], label=\"California\")\nplt.plot(data.query(\"region=='africa'and round_number > 5\")[\"round_number\"], calif_synth_lr, label=\"Synthetic Control\")\n#plt.vlines(x=1988, ymin=40, ymax=140, linestyle=\":\", lw=2, label=\"Proposition 99\")\nplt.ylabel(\"Gap in per-capita cigarette sales (in packs)\")\nplt.legend();","3138ac2f":"from typing import List\nfrom operator import add\nfrom toolz import reduce, partial\n\ndef loss_w(W, X, y) -> float:\n    return np.sqrt(np.mean((y - X.dot(W))**2))","cdc89351":"from scipy.optimize import fmin_slsqp\n\ndef get_w(X, y):\n    \n    w_start = [1\/X.shape[1]]*X.shape[1]\n\n    weights = fmin_slsqp(partial(loss_w, X=X, y=y),\n                         np.array(w_start),\n                         f_eqcons=lambda x: np.sum(x) - 1,\n                         bounds=[(0.0, 1.0)]*len(w_start),\n                         disp=False)\n    return weights","faf31216":"calif_weights = get_w(X, y)\nprint(\"Sum:\", calif_weights.sum())\nnp.round(calif_weights, 4)","7684826a":"calif_synth = (data.query(\"region!='africa' and round_number > 5\")\n                  .pivot(index='round_number', columns=\"region\")[\"total\"]\n                  .values.dot(calif_weights))","22864fac":"plt.figure(figsize=(10,6))\nplt.plot(data.query(\"region=='africa'and round_number > 5\")[\"round_number\"], data.query(\"region=='africa'and round_number > 5\")[\"total\"], label=\"Africa\")\nplt.plot(data.query(\"region=='africa'and round_number > 5\")[\"round_number\"], calif_synth, label=\"Synthetic Control\")\nplt.vlines(x=11, ymin=0, ymax=3000, linestyle=\":\", lw=2, label=\"Change \")\nplt.ylabel(\"Total raised\")\nplt.legend();","8aa5bf18":"plt.plot(data.query(\"region=='africa'and round_number > 5\")[\"round_number\"], data.query(\"region=='africa'and round_number > 5\")[\"total\"] - calif_synth,\n         label=\" Effect\")","b6ed2800":"https:\/\/seaborn.pydata.org\/examples\/structured_heatmap.html","8496caa2":"http:\/\/man.hubwiz.com\/docset\/Seaborn.docset\/Contents\/Resources\/Documents\/generated\/seaborn.clustermap.html"}}