{"cell_type":{"dbb88d35":"code","a15fabe3":"code","1bffee20":"code","ecca6f23":"code","5747a4a5":"code","f38ab849":"code","ad0b2794":"code","7252d164":"code","7b2dffba":"code","d1123017":"code","907c2106":"code","cc78f1ec":"code","ef3bc48c":"code","2090c950":"code","8faf0deb":"code","4df4d8a2":"code","bd41f8ae":"code","e330630a":"code","83021928":"code","6cca9906":"code","feeef9c1":"code","d121beb1":"code","5bbc2c98":"code","b849f07b":"code","35ba4363":"code","09771dc6":"code","8aee8819":"code","f067c791":"code","222aff39":"code","3cce1989":"code","a95ad5db":"code","e271384b":"code","c62ffedc":"code","fe698694":"code","f5864898":"code","72ab3699":"code","2d6c37f0":"code","a55a6845":"code","a3d8112a":"code","eb927457":"code","cf2011fc":"code","198e4781":"code","b48b8dbc":"code","a0a348c7":"code","81b29a26":"code","eb3231fe":"code","033e7ea1":"code","e3508dbe":"code","7cf92ed0":"code","ac0e36c9":"code","668db9fd":"code","ed9e4e03":"code","d3deeb08":"code","fe36b34e":"code","5ed7aea6":"code","b270efbb":"code","fd5c61ca":"code","a0d9969b":"code","7a454419":"code","bfd563e5":"code","6597786a":"code","037807a8":"code","cbccf575":"code","89ef7e48":"code","93d191be":"code","b427cdd6":"code","13599c09":"code","c1f129df":"code","8ef12373":"code","aed41415":"code","adf18759":"code","25902b1b":"markdown","97b9ccf1":"markdown","4b5a3513":"markdown","d166e91a":"markdown","4c6510a8":"markdown","f38c08f0":"markdown","92982186":"markdown","0f7e51c9":"markdown","430f46d7":"markdown","d3918c94":"markdown","423dd8b6":"markdown","18edb96f":"markdown","11aa8c95":"markdown","4e3388db":"markdown","e10e6cdd":"markdown"},"source":{"dbb88d35":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a15fabe3":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv('..\/input\/test.csv')","1bffee20":"train.head()","ecca6f23":"test.head()","5747a4a5":"print(train.columns)","f38ab849":"print(test.columns)","ad0b2794":"train.isnull().sum()","7252d164":"test.isnull().sum()","7b2dffba":"train.describe()","d1123017":"sns.countplot(x='Sex',data=train)\nprint(\"No of males:\"+str((train['Sex']=='male').sum()) )\nprint(\"No of females:\"+str((train['Sex']=='female').sum()))","907c2106":"sns.barplot(x='Sex',y='Survived',data=train)","cc78f1ec":"#checking what are the different passenger classes.\ntrain.Pclass.unique()","ef3bc48c":"#printing out the no. of people in each class.\nsns.countplot(x='Pclass',data=train)\nprint(\"No of passengers in 1st class:\" + str((train['Pclass']==1).sum()))\nprint(\"No of passengers in 2nd class:\" + str((train['Pclass']==2).sum()))\nprint(\"No of passengers in 3rd class:\" + str((train['Pclass']==3).sum()))","2090c950":"#we'll find the ratio of the people in each classes.\nsns.barplot(x='Pclass',y='Survived',data=train)","8faf0deb":"#checking the unique values in siblings and spouse column\ntrain.SibSp.unique()","4df4d8a2":"#printing out the no. of people who boarded the ship with how many siblings and their spouse.\nsns.countplot(x='SibSp',data=train)\nprint(\"People with no of siblings 0:  \" + str((train['SibSp']==0).sum()))\nprint(\"People with no of siblings 1:  \" + str((train['SibSp']==1).sum()))\nprint(\"People with no of siblings 2:  \" + str((train['SibSp']==2).sum()))\nprint(\"People with no of siblings 3:  \" + str((train['SibSp']==3).sum()))\nprint(\"People with no of siblings 4:  \" + str((train['SibSp']==4).sum()))\nprint(\"People with no of siblings 5:  \" + str((train['SibSp']==5).sum()))\nprint(\"People with no of siblings 8:  \" + str((train['SibSp']==8).sum()))","bd41f8ae":"sns.barplot(x='SibSp',y='Survived',data=train)","e330630a":"#Parent child unique values\ntrain.Parch.unique()","83021928":"sns.countplot(x='Parch',data=train)\nprint(\"People who came with 0 Parent or children: \"+ str((train['Parch']==0).sum()) )\nprint(\"People who came with 1 Parent or children: \"+ str((train['Parch']==1).sum()) )\nprint(\"People who came with 2 Parent or children: \"+ str((train['Parch']==2).sum()) )\nprint(\"People who came with 3 Parent or children: \"+ str((train['Parch']==3).sum()) )\nprint(\"People who came with 4 Parent or children: \"+ str((train['Parch']==4).sum()) )\nprint(\"People who came with 5 Parent or children: \"+ str((train['Parch']==5).sum()) )\nprint(\"People who came with 6 Parent or children: \"+ str((train['Parch']==6).sum()) )","6cca9906":"sns.barplot(x='Parch',y='Survived',data=train)","feeef9c1":"#Created a new dataframe with NaN values filled in as 0\ntrain_age=train\ntrain_age['Age'].fillna(0)\ntrain_age.head()","d121beb1":"train.Age.plot(kind='hist',figsize=[20,7])","5bbc2c98":"train.describe()","b849f07b":"test.describe()","35ba4363":"train.isnull().sum()","09771dc6":"test.isnull().sum()","8aee8819":"train.drop(labels=['Name','Ticket','Fare','Cabin'],axis=1,inplace=True)\ntest.drop(labels=['Name','Ticket','Fare','Cabin'],axis=1,inplace=True)","f067c791":"train.head()","222aff39":"test.head()","3cce1989":"train.isnull().sum()","a95ad5db":"test.isnull().sum()  ","e271384b":"#Filling missing values in Embarked \ntrain['Embarked'].value_counts()","c62ffedc":"test['Embarked'].value_counts()","fe698694":"train['Embarked'].fillna('S',inplace=True)","f5864898":"train.isnull().sum()","72ab3699":"mean_age=np.mean(train['Age'])\nmean_age","2d6c37f0":"train['Age'].fillna(mean_age,inplace=True)","a55a6845":"train.isnull().sum()","a3d8112a":"mean_age_test = np.mean(test['Age'])\nmean_age_test","eb927457":"test['Age'].fillna(mean_age_test,inplace=True)","cf2011fc":"test.isnull().sum()","198e4781":"#Map all values to strings\nsex_mapping = {'male':0,'female':1}\ntrain['Sex']=train['Sex'].map(sex_mapping)\ntest['Sex']=test['Sex'].map(sex_mapping)","b48b8dbc":"emb_mapping = {'S':1,'C':2,'Q':3}\ntrain['Embarked']=train['Embarked'].map(emb_mapping)\ntest['Embarked']=test['Embarked'].map(emb_mapping)","a0a348c7":"#splitting the data\nfrom sklearn.model_selection import train_test_split","81b29a26":"X=train.drop(labels=['PassengerId','Survived'],axis=1)\ny=train['Survived']","eb3231fe":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=77)","033e7ea1":"#K Nearest Neighbours\nfrom sklearn.neighbors import KNeighborsClassifier","e3508dbe":"KNN = KNeighborsClassifier()","7cf92ed0":"KNN.fit(X_train,y_train)","ac0e36c9":"pred_KNN = KNN.predict(X_test)","668db9fd":"from sklearn.metrics import accuracy_score","ed9e4e03":"acc_KNN= accuracy_score(y_test,pred_KNN)*100\nacc_KNN","d3deeb08":"#Using Logistic Regression\nfrom sklearn.linear_model import LogisticRegression","fe36b34e":"LogR = LogisticRegression()","5ed7aea6":"LogR.fit(X_train,y_train)","b270efbb":"pred_LogR=LogR.predict(X_test)","fd5c61ca":"acc_LogR=accuracy_score(y_test,pred_LogR)*100\nacc_LogR","a0d9969b":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier","7a454419":"Dec_Tree = DecisionTreeClassifier()","bfd563e5":"Dec_Tree.fit(X_train,y_train)","6597786a":"pred_dec_tree = Dec_Tree.predict(X_test)","037807a8":"acc_dec_tree=accuracy_score(y_test,pred_dec_tree)*100\nacc_dec_tree","cbccf575":"#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier","89ef7e48":"RandF = RandomForestClassifier()","93d191be":"RandF.fit(X_train,y_train)","b427cdd6":"pred_RandF=RandF.predict(X_test)","13599c09":"acc_RandF=accuracy_score(y_test,pred_RandF)*100\nacc_RandF","c1f129df":"print('Accuracy of K Nearest Neighbours:' + str(acc_KNN))\nprint('Accuracy of Logistic Regression:' + str(acc_LogR))\nprint('Accuracy of Decision Tree:' + str(acc_dec_tree))\nprint('Accuracy of Random Forest :' + str(acc_RandF))","8ef12373":"id = test['PassengerId']\npredictions = RandF.predict(test.drop(['PassengerId'],axis=1))","aed41415":"output = pd.DataFrame({'PassengerIds':id,'Survived':predictions},index=None)","adf18759":"output.to_csv('submissions.csv',index=False)","25902b1b":"Ratio between males and females who survived","97b9ccf1":"Checking for null values:","4b5a3513":"From the above graphs we can see that there were more passengers in 3rd class compared to the other two classes but the passengers in 1st class had more chance of survival compared to the other two classes and 2nd class had more chance of survival comapred to 3rd class.","d166e91a":"From the above graph you can see most of the people are around the age of 18-30.","4c6510a8":"No. of Males and females:","f38c08f0":"We can see most of the people have borded from S (South Hampton), So we can assign the same for the missing values.","92982186":"We can drop the cabin coulmn as it wont be usefull while training the model, same goes for passengerid name, ticket and fare.","0f7e51c9":"# Titanic survival predictions\n\nI am a newbie in data science and this is my first kernel on kaggle. Please point out any mistakes i made and areas which i can improve upon, it will be really helpful for me.\n\nWe are gonna be performing some data analysis, clean the data, choose which is the best model and create the submission file to submit for the competition.","430f46d7":"# Data cleaning","d3918c94":"We have filled all the missing values.","423dd8b6":"We have filled the missing values in Emarked, now to fill the age column, we are going to take the mean value of all the ages and fill that inplace of the missing values.","18edb96f":"From the above graphs we can see that most of the people came alone to the ship and not with their parents or children.\nBut when we look at the survival rates we can see that people who came with their kids or the children who came with their parent has a higher chance of survival.","11aa8c95":"From the above graphs we can see that there were more people who didnt have any siblings or spouses in the ship, but people with 1 or 2 siblings or people who were having spouses had higher chances of survival.","4e3388db":"From the 4 models we used we got the highest score with the Random forest model. So we are going to use that model to create the submissions file.","e10e6cdd":"From the above graph we can see more number of females survived when compared to males."}}