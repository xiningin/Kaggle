{"cell_type":{"e19f81a0":"code","0a2962f3":"code","9c303c72":"code","33d6848f":"code","735d6ff5":"code","50b8453a":"code","e9257934":"code","2765ef8f":"code","2ec6bb32":"code","3955be20":"code","b022a2ee":"code","2b92cf95":"markdown","835d487b":"markdown","34ff648f":"markdown","7144ebb3":"markdown","59203820":"markdown"},"source":{"e19f81a0":"import math\nimport json\nimport os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\nimport xgboost as xgb\nimport lightgbm as lgbm\nimport optuna.integration.lightgbm as lgbo\nfrom sklearn.preprocessing import StandardScaler, QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold, KFold, train_test_split\nfrom sklearn.metrics import roc_auc_score\nimport catboost\nimport optuna\nimport tensorflow as tf\n\nsns.set_theme()\nsns.set_palette(palette = \"rainbow\")\n\ngpu_available = tf.test.is_gpu_available()\n%matplotlib inline","0a2962f3":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntrain = train.set_index('id')\ntarget = train['claim']\ntrain = train.drop('claim', axis=1)\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\ntest = test.set_index('id')","9c303c72":"for col in train.columns:\n    avg_val = train[col].mean()\n    train[col].fillna(avg_val, inplace=True)\n    test[col].fillna(avg_val, inplace=True)","33d6848f":"FOLDS = 20\n\nprint(\"Using {} Folds, Calibraiton Train Size of {}, Calibraiton Test Size of {}\".format(FOLDS, 1 - 1 \/ FOLDS, 1 \/ FOLDS))","735d6ff5":"cal_X_train, cal_X_val, cal_y_train, cal_y_val = train_test_split(train, target, random_state=0, stratify=target, test_size=1 \/ FOLDS)","50b8453a":"def score_model(mod, X, y):\n    y_pred = mod.predict(X)\n    return np.sqrt(roc_auc_score(y, y_pred))","e9257934":"if True:\n    params = { \"objective\": \"binary\", \"metric\": \"auc\", \"device\": \"gpu\" if gpu_available else \"cpu\" }\n\n    lgb_train = lgbm.Dataset(cal_X_train, cal_y_train)\n    lgb_valid = lgbm.Dataset(cal_X_val,   cal_y_val)\n\n    model = lgbo.train(params, lgb_train, valid_sets=[lgb_valid], verbose_eval=False, num_boost_round=100, early_stopping_rounds=5)\n\n    params = model.params\n\n    with open(\"lgbm.json\", \"w\") as file:\n        file.write(json.dumps(params, indent=4))\nelse:\n    params = {\n        \"objective\": \"binary\",\n        \"metric\": \"auc\",\n        \"device\": \"gpu\",\n        \"feature_pre_filter\": False,\n        \"lambda_l1\": 1.5524815747440739,\n        \"lambda_l2\": 3.0890640417182456e-7,\n        \"num_leaves\": 132,\n        \"feature_fraction\": 0.4,\n        \"bagging_fraction\": 1,\n        \"bagging_freq\": 0,\n        \"min_child_samples\": 5,\n        \"num_iterations\": 100,\n        \"early_stopping_round\": 5\n    }\n\nparams[\"learning_rate\"] = 0.006\nparams[\"num_iterations\"] = 80000\nparams","2765ef8f":"test_preds = []\nfold_score = []\n\nfor fold, (trn_idx, val_idx) in enumerate(StratifiedKFold(n_splits=20, random_state=42, shuffle=True).split(train, target)):\n    print(\"Fold :\", fold + 1)\n\n    fold_X_train, fold_y_train = train.iloc[trn_idx], target.iloc[trn_idx]\n    fold_X_test,  fold_y_test  = train.iloc[val_idx], target.iloc[val_idx]\n\n    lgb_train = lgbm.Dataset(fold_X_train, fold_y_train)\n    lgb_valid = lgbm.Dataset(fold_X_test,  fold_y_test)\n\n    model = lgbm.train(\n        params, \n        lgb_train, \n        valid_sets=[lgb_valid], \n        verbose_eval=False, \n        early_stopping_rounds=100\n    )\n\n    test_preds.append(model.predict(test))\n    score = score_model(model, fold_X_test, fold_y_test)\n    fold_score.append(score)\n    \n    print(\"#### fold #########\", score)","2ec6bb32":"plt.figure(figsize=(15, 5))\ng = sns.barplot(x=list(range(len(test_preds))), y=fold_score)\ng.set_ylim(min(fold_score), max(fold_score))\ng.set_title(\"Model Performance\")\n\nNone","3955be20":"plt.subplots(figsize=(11, 9))\ncorr = np.corrcoef(test_preds)\ng = sns.heatmap(corr, mask=np.triu(np.ones_like(corr, dtype=bool)))\ng.set_title(\"Test Prediction Correlation\")\n\nNone","b022a2ee":"total_preds = np.zeros(shape=test_preds[0].shape)\nfor i, pred in enumerate(test_preds):\n    preds = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\n    preds[\"claim\"] = pred\n    preds.to_csv(\"submission_{}.csv\".format(i), index=False)\n    \n    total_preds += pred\n\ntotal_preds \/= len(test_preds)\n\npreds = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\npreds[\"claim\"] = total_preds\npreds.to_csv(\"submission.csv\", index=False)","2b92cf95":"# TPS September 2021 - LGBM Optuna Baseline","835d487b":"## K-Fold-Prediction","34ff648f":"## Search Hyperparameters","7144ebb3":"## Model Prediction Evaluation","59203820":"## Load, Preprocess, Setup"}}