{"cell_type":{"a056d6ac":"code","647a9ac8":"code","0ad895fa":"code","398df9d0":"code","2683f72a":"code","59873413":"code","410fb1a8":"code","7d9e8a01":"code","4c37fa7f":"code","ee8d0bf6":"code","de3b5342":"code","58978a6e":"code","3b30d518":"code","517bce8b":"code","e1a3acea":"code","a7c27ef6":"code","c79ff3ad":"code","c5a79b65":"code","4fdbe72a":"code","ddee2eb4":"code","3d251a27":"code","96ef6ef3":"code","96fd079d":"code","cd2e806e":"code","f650f86f":"code","e866985b":"code","09fa7e7f":"code","e9950d5f":"code","994d8412":"code","6b58d952":"code","2a423b18":"code","4bd566b2":"code","d5bfe039":"code","ef22a3e7":"code","8fcfcd58":"code","ff4f9d20":"code","bc05c2ee":"code","f4a9769d":"code","03ee2fbf":"code","43693169":"code","0612a566":"code","01a6891e":"code","77365b91":"code","5973067a":"code","4ea422e9":"code","28c0e812":"code","8081a72a":"code","b7d031d5":"code","be6fd55f":"code","2d266a5a":"code","b202604b":"code","15cb38c0":"code","b90c1ad6":"code","c026e5d9":"code","e250c92d":"code","f6bec06d":"code","f6b85a32":"code","97ab15c7":"code","c05672ea":"code","9777e8dd":"code","8502510d":"code","ee73dc0a":"code","5969bdda":"code","815c311b":"code","e96b4307":"code","a636987c":"code","6a70bd34":"code","e8411b54":"code","55b2e944":"code","257a7a0d":"code","c9419531":"code","079fef30":"code","24d0865d":"code","0967f2d7":"code","578b498d":"code","c17471f1":"code","e43f1aba":"code","9f1f8f8e":"code","47891ff5":"code","901b9a28":"code","eee16fc7":"code","c6ebebec":"code","4052c1d2":"code","27804412":"code","a0a19c10":"code","d98b7939":"code","76e529e5":"code","e0fa62a8":"code","3d6c1ab4":"code","cad00e60":"code","ea2d6803":"code","64a9fa8a":"code","7f7a5d9f":"code","701ed9db":"code","5f4d373e":"code","23818796":"code","4427858c":"code","c321bae7":"code","cd5a1ef0":"markdown","a85f7018":"markdown","05d43a48":"markdown","dd474855":"markdown","a8cd5a76":"markdown","2f0d589d":"markdown","58a012b2":"markdown","b8061335":"markdown","155d028a":"markdown","2749dc9b":"markdown","df0da52f":"markdown","e2643d37":"markdown","e05d9048":"markdown","723906d8":"markdown","bdce4201":"markdown","6706c922":"markdown","d20802a4":"markdown","6f44e6a6":"markdown","7e753344":"markdown","525bd3b3":"markdown","4a006aa8":"markdown","852120bb":"markdown","becebbe7":"markdown"},"source":{"a056d6ac":"import pandas as pd\nimport numpy as np","647a9ac8":"import matplotlib.pyplot as plt","0ad895fa":"from sklearn.metrics import precision_score, recall_score, confusion_matrix, classification_report, roc_curve, precision_recall_curve, accuracy_score \nfrom sklearn import linear_model","398df9d0":"import warnings \nimport math","2683f72a":"data_cidades = pd.read_csv('..\/input\/cities.csv')\ndata_q_vida = pd.read_csv('..\/input\/movehubqualityoflife.csv')\ndata_c_vida = pd.read_csv('..\/input\/movehubcostofliving.csv')","59873413":"data_cidades.head() #imprimindo os dados contidos nas primeiras linhas do dataset","410fb1a8":"data_cidades.tail() #imprimindo os dados contidos nas ultimas linhas do dataset","7d9e8a01":"data_cidades.shape #imprimindo numero de linhas e coulnas no dataset","4c37fa7f":"data_q_vida.head() #imprimindo os dados contidos nas primeiras linhas do dataset","ee8d0bf6":"data_q_vida.tail() #imprimindo os dados contidos nas ultimas linhas do dataset","de3b5342":"data_q_vida.shape #imprimindo numero de linhas e coulnas no dataset","58978a6e":"data_c_vida.head() #imprimindo os dados contidos nas primeiras linhas do dataset","3b30d518":"data_c_vida.tail() #imprimindo os dados contidos nas ultimas linhas do dataset","517bce8b":"data_c_vida.shape #imprimindo numero de linhas e coulnas no dataset","e1a3acea":"data_cidades.isna().sum() #verificando valores nulos ","a7c27ef6":"data_q_vida.isna().sum() #verificando valores nulos","c79ff3ad":"data_c_vida.isna().sum() #verificando valores nulos","c5a79b65":"data_cidades[data_cidades['Country'].isnull()] #retornando valores nulos do dataset em uma coluna especifica","4fdbe72a":"data_cidades.iloc[654, 1]= 'Ukraine' #setando pais na coluna country ap\u00f3s pesquisa","ddee2eb4":"data_cidades.iloc[724, 1]= 'Russia' #setando pais na coluna country ap\u00f3s pesquisa","3d251a27":"data_cidades.iloc[1529, 1]= 'Kosovo' #setando pais na coluna country ap\u00f3s pesquisa","96ef6ef3":"data_cidades[data_cidades['Country'].isnull()] #validando a atualiza\u00e7\u00e3o","96fd079d":"data_q_c_vida = pd.merge(data_c_vida, data_q_vida) #realizando a jun\u00e7\u00e3o dos datasets de custo de vida e qualidade de vida.","cd2e806e":"data_q_c_vida.head() #imprimindo os dados contidos nas primeiras linhas do dataset","f650f86f":"data_q_c_vida.tail() #imprimindo os dados contidos nas ultimas linhas do dataset","e866985b":"data_q_c_vida.shape #imprimindo o numero de linhas e colunas do dataset","09fa7e7f":"data_q_c_vida.dtypes #imprimindo tipos contidos nas variaveis","e9950d5f":"data_q_c_vida = data_q_c_vida.sort_values(by='City') #ordena\u00e7\u00e3o dos valores do novo dataset ao longo do eixo City","994d8412":"data_q_c_vida.reset_index(drop=True) #redefinindo indices e removendo niveis multiIndex","6b58d952":"data_q_c_vida_2 = pd.merge(data_q_c_vida, data_cidades,how='left', on='City') #jun\u00e7\u00e3o das colunas, cidades do lado esquerdo","2a423b18":"data_q_c_vida_2.head() #imprimindo colunas para verifica\u00e7\u00e3o do MERGE","4bd566b2":"data_q_c_vida_2[data_q_c_vida_2['Country'].isnull()] #verificando valores nulos","d5bfe039":"data_q_c_vida_2.iloc[227,0]='Z\u00fcrich' #preenchendo valores nulos com valores pesquisados para novo dataset","ef22a3e7":"data_q_c_vida_2.iloc[224,0]='Washington, D.C.'","8fcfcd58":"data_q_c_vida_2.iloc[201,0]='Tampa, Florida'","ff4f9d20":"data_q_c_vida_2.iloc[188,0]='S\u00e3o Paulo'","bc05c2ee":"data_q_c_vida_2.iloc[185,0]='San Francisco, California'","f4a9769d":"data_q_c_vida_2.iloc[184,0]='San Diego, California'","03ee2fbf":"data_q_c_vida_2.iloc[193,13]='Malta'","43693169":"data_q_c_vida_2.iloc[10,13]='United States'","0612a566":"data_q_c_vida_2.iloc[51,13]='Philippines'","01a6891e":"data_q_c_vida_2.iloc[61,13]='Argentina' ","77365b91":"data_q_c_vida_2.iloc[66,0]='Davao City'","5973067a":"data_q_c_vida_2.iloc[74,0]='D\u00fcsseldorf'","4ea422e9":"data_q_c_vida_2.iloc[79,0]='Frankfurt am Main'","28c0e812":"data_q_c_vida_2.iloc[81,13]='Ireland' ","8081a72a":"data_q_c_vida_2.iloc[100,0]='\u0130stanbul'","b7d031d5":"data_q_c_vida_2.iloc[101,0]='\u0130zmir'","be6fd55f":"data_q_c_vida_2.iloc[122,13]='Poland'","2d266a5a":"data_q_c_vida_2.iloc[129,0]='M\u00e1laga'","b202604b":"data_q_c_vida_2.iloc[130,0]='Malm\u00f6'","15cb38c0":"data_q_c_vida_2.iloc[134,13]='Spain'","b90c1ad6":"data_q_c_vida_2.iloc[136,0]='Medell\u00edn'","c026e5d9":"data_q_c_vida_2.iloc[139,0]='Miami, Florida'","e250c92d":"data_q_c_vida_2.iloc[141,0]='Minneapolis, Minnesota'","f6bec06d":"data_q_c_vida_2.iloc[164,13]='Thailand'","f6b85a32":"data_q_c_vida_2.iloc[166,0]='Philadelphia, Pennsylvania'","97ab15c7":"data_q_c_vida_2.iloc[167,0]='Phoenix, Arizona'","c05672ea":"data_q_c_vida_2.iloc[168,0]='Portland, Oregon'","9777e8dd":"data_q_c_vida_2.iloc[176,0]='Rio de Janeiro'","8502510d":"data_q_c_vida_2.iloc[178,13]='United States'","ee73dc0a":"data_q_c_vida_2.iloc[183,0]='San Antonio, Texas'","5969bdda":"data= pd.merge(data_q_c_vida_2, data_cidades, how='inner', on='City') #criando merge para novo dataset","815c311b":"data.head() #imprimindo colunas para verifica\u00e7\u00e3o do MERGE - criado Country_x e Country_y para compara\u00e7\u00e3o","e96b4307":"data.tail() #podemos verificar que Country_x ainda esta com valores nulos comparado a nova coluna Cuntry_y","a636987c":"data= data.drop('Country_x', axis=1) #dropando cloluna com valores nulos\ndata=data.rename(columns={'Country_y': 'Country'}) #renomeando coluna que vamos trabalhar\n\ndata[data['Country'].isnull()] #verificando a existencia de valores nulos","6a70bd34":"data.isna().sum()","e8411b54":"#data['City'].duplicated() # verificar dados duplicados","55b2e944":"cidades_duplicadas = data.City.value_counts() # passando para variavel os valor e seus contadores para tratar duplicatas na coluna City","257a7a0d":"cidades_duplicadas.head(11) # lendo os valores duplicados existentes na coluna City","c9419531":"data[(data['City'] == 'Valencia')] # lendo os valores duplicados existentes na coluna City de um dado especifico","079fef30":"data[(data['City'] == 'Cambridge')]","24d0865d":"data[(data['City'] == 'London')]","0967f2d7":"data.set_index('City').index.get_duplicates() # retornando uma lista classificada de elementos de \u00edndice que aparecem mais de uma vez no \u00edndice.","578b498d":"data = data.drop_duplicates(subset=['City', 'Country']) # dropando dados duplicados  considerando as colunas City e Country\n# desta forma o subset ajuda a n\u00e3o excluir cidades que estajam duplicadas, pois a avalia\u00e7\u00e3o ser\u00e1 feita nas duas colunas e \n# somente quando existir City e Country na mesma linha com duplicados = True o mesmo ir\u00e1 dropar.","c17471f1":"cidades_duplicadas = data.City.value_counts() # Observando os dados que foram tratados na fun\u00e7\u00e3o drop_duplicates + Subset","e43f1aba":"cidades_duplicadas.head(11) ","9f1f8f8e":"data[(data['City'] == 'Valencia')] # Observando os dados que foram tratados na fun\u00e7\u00e3o drop_duplicates + Subset","47891ff5":"data[(data['City'] == 'Cambridge')] ","901b9a28":"data[(data['City'] == 'London')] ","eee16fc7":"nomes_cidades = data.City.value_counts() # Observando os dados que foram tratados na fun\u00e7\u00e3o drop_duplicates + Subset","c6ebebec":"nomes_cidades[nomes_cidades> 1] ","4052c1d2":"data.columns = data.columns.str.replace(' ','_') # padroniza\u00e7\u00e3o das colunas","27804412":"data.head() # lendo o dataset","a0a19c10":"data.describe() # verificando contador de linhas, media, desvio padr\u00e3o, minimo, 1\u00b0 quartil, 2\u00b0 quartil, 3\u00b0 quartil e o maximo","d98b7939":"col = data.drop(['City', 'Country'], axis = 1) # passando para uma variavel as colunas numericas para analise de OUTLIERS","76e529e5":"col[(np.abs(col)> 3000).any(1)] # selecionar todas as linhas que excedam o valor 3300 utilizando any para booleano","e0fa62a8":"col[(np.abs(col)< 0).any(1)] # selecionar todas as linhas que tenha valores negativos utilizando any para booleano","3d6c1ab4":"superior = 3000\navg = 1427\n\ndata.loc[(data['Avg_Disposable_Income']>superior), 'Avg_Disposable_Income'] = avg\ndata.loc[(data['Avg_Rent']>superior), 'Avg_Rent'] = avg","cad00e60":"# passando preditoras para X\n# passando target para Y\n\nX = data.drop(['Movehub_Rating','Country','City'], axis = 1) \nY = data['Movehub_Rating']\ntest_size=0.30\nseed=42","ea2d6803":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX=StandardScaler().fit_transform(X)\nscaler","64a9fa8a":"# importa\u00e7\u00e3o train_test_split\nfrom sklearn.model_selection import train_test_split\n\n# utiliza\u00e7\u00e3o train_test_split, 30% teste e 70% treino\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)","7f7a5d9f":"# modelo regress\u00e3o linear\n\nreg_log = linear_model.LinearRegression()\nreg_log.fit (X_train,Y_train)\n\nY_pred = reg_log.predict(X_test)","701ed9db":"from sklearn.metrics import explained_variance_score\nexplained_variance_score=explained_variance_score(Y_test, Y_pred) ","5f4d373e":"from sklearn.metrics import mean_squared_error\nmean_squared_error=mean_squared_error(Y_test, Y_pred)","23818796":"from sklearn.metrics import mean_absolute_error\nerro_medio_absoluto=mean_absolute_error(Y_test, Y_pred)","4427858c":"print (\"Determination coefficient r\u00b2: {:.3f}\".format(reg_log.score(X_train,Y_train)))\nprint (\"Determination coefficient r\u00b2 of the testing set: {:.3f} \".format(reg_log.score(X_test,Y_test)))\nprint(\"mean_squared_error: {:.2f} \".format(mean_squared_error))\nprint(\"mean_absolute_error: {:.2f} \".format(erro_medio_absoluto))\nprint(\"Explained_variance_score: {:.3f} \".format(explained_variance_score))\nprint ('Linear Coefficient {:.2f}'.format(reg_log.intercept_))\nprint ('Angular Coefficient{:}'.format(reg_log.coef_))","c321bae7":"pd.DataFrame(list(zip(Y_test[10:20],Y_pred[10:20])),columns=['Avalia\u00e7\u00e3o Movehub','Predi\u00e7\u00e3o']) # resultado","cd5a1ef0":"<h4>Dropando coluna Country_x e renomeando Country_y para Country, normaliza\u00e7\u00e3o","a85f7018":"<h4>Dados do dataset Cidades","05d43a48":"<h4>(MERGE) para jun\u00e7\u00e3o da qualidade e custo de vida com as cidades setando as linhas do lado esquerdo","dd474855":"<h4>Dados do dataset qualidade de vida","a8cd5a76":"<h4>Aplicando a Media das colunas com (OUTLIERS)","2f0d589d":"<h4>Dados do dataset custo de vida","58a012b2":"<h4>Mesclar DataFrame ou denominado objetos de s\u00e9rie com uma associa\u00e7\u00e3o de estilo de banco de dados.\n\nA jun\u00e7\u00e3o \u00e9 feita em colunas ou \u00edndices. Se juntar colunas em colunas, os \u00edndices DataFrame ser\u00e3o ignorados . Caso contr\u00e1rio, se unir \u00edndices em \u00edndices ou \u00edndices em uma coluna ou colunas, o \u00edndice ser\u00e1 transmitido.","b8061335":"<h4>Verifica\u00e7\u00e3o de dados duplicados (DUPLICATAS)","155d028a":"<h4>Verifica\u00e7\u00e3o das colunas com valores nulos na coluna Country do dataset Cidades para o preenchimento do pais especifico das cidades","2749dc9b":"<h4>Tratando os valores (NULOS) em ambos datasets","df0da52f":"**<h4>(OUTLIERS)","e2643d37":"<h4>Valida\u00e7\u00e3o (MODELAGEM)","e05d9048":"<h1><center>MovehubCity -  LinearRegression<\/h1>\nAdriano Fonseca\n\nMay 2018","723906d8":"<h4>Leitura do novo dataset criado com custo de vida e qualidade de vida","bdce4201":"<h4>Importando biblioteca","6706c922":"<h4>DATA CLEANING","d20802a4":"<h4>Carregando dataset","6f44e6a6":"<h4>Gerando estat\u00edsticas descritivas que resumem a tend\u00eancia central, a dispers\u00e3o e a forma da distribui\u00e7\u00e3o de um conjunto de dados, excluindo NaNvalores. Analisa s\u00e9ries num\u00e9ricas e de objetos, bem como DataFrameconjuntos de colunas de tipos de dados mistos. \nA sa\u00edda ir\u00e1 variar dependendo do que \u00e9 fornecido.","7e753344":"<h4>Imprimindo os dados dos datasets","525bd3b3":"<h4>Redefir o \u00edndice ou um n\u00edvel dele.\n\nRedefinir o \u00edndice do DataFrame e use o padr\u00e3o em vez disso. Se o DataFrame tiver um MultiIndex, esse m\u00e9todo poder\u00e1 remover um ou mais n\u00edveis.","4a006aa8":"<h4>Ordenar pelos valores ao longo do eixo City","852120bb":"<h4>(DROP) e (NORMALIZA\u00c7\u00c3O) das colunas do novo dataset","becebbe7":"<h4>Novo (MERGE) para jun\u00e7\u00e3o da qualidade e custo de vida com as cidades setando as linhas no interior do dataset"}}