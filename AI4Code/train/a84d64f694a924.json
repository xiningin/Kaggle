{"cell_type":{"1f761591":"code","ef38996a":"code","0de41ca3":"code","34f3daec":"code","0fbb38e6":"code","91578095":"code","0d74bd0c":"code","ccbf7b01":"code","223d7569":"code","72cc2bf7":"code","4e0ae43c":"code","1f2198ac":"code","6e581052":"code","390cb3be":"code","e2d0c010":"code","5cc572df":"code","8d549043":"code","bf4dfc48":"code","da25c54a":"code","bec620f4":"code","e6540475":"code","d3cc2436":"code","c022db29":"code","d26cd913":"code","702bd873":"code","7bcef68b":"code","3b0244e1":"code","b220d9a1":"code","1c66b1d0":"code","a12babe4":"code","315359f0":"code","430cfa13":"code","3fdc47f0":"code","4dbf99cf":"code","9cc329fc":"code","6b71adad":"code","c71b23c5":"code","873c4a87":"code","41fb0a59":"code","4458e391":"code","4e56aed9":"code","b26632b4":"code","760097c6":"code","d8f0fe90":"code","32e08be7":"code","d9d3d5ca":"code","2097de57":"code","06d5c068":"code","23f338c8":"code","206bb555":"code","683995b0":"code","270e10f8":"code","46a0409f":"code","15627fbd":"code","3a47417c":"code","d8562d60":"code","1b6dec22":"code","6243fa52":"code","91b87355":"code","1dee8ba5":"code","9c6361a1":"code","3d793164":"code","52ad6a04":"code","2bbae0dc":"code","eb33296a":"code","32556ea9":"code","122bbe0d":"code","ac037f5e":"code","48080ac5":"code","a592c686":"code","f99e0247":"code","b7b54526":"code","157feab2":"code","4d8c0901":"code","52820ca5":"code","77dfea32":"code","53d80581":"code","7ccbffab":"code","a623dddc":"code","88bca2a4":"code","454d9496":"code","d8513544":"code","4960ab2d":"code","eb3ef56f":"code","7a805ca8":"code","67896088":"code","3ff7cd89":"code","787ebc68":"markdown","7efe9177":"markdown","7fb9ed52":"markdown","97d180db":"markdown","f98ae610":"markdown","cda12528":"markdown","71d9d4a4":"markdown","b253bf6d":"markdown","b98e5ef7":"markdown","2d3fabdd":"markdown","a8efb2b7":"markdown","84d41328":"markdown","87bb0e02":"markdown","e39329b7":"markdown"},"source":{"1f761591":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import StratifiedKFold,train_test_split,cross_val_score\nfrom lightgbm import LGBMClassifier\nfrom imblearn.combine import SMOTETomek\nimport lightgbm as lgb\n%matplotlib inline\nsns.set()","ef38996a":"train = pd.read_csv('..\/input\/autoinland-vehicle-insurance-claim-challenge\/Train.csv')\ntest = pd.read_csv('..\/input\/autoinland-vehicle-insurance-claim-challenge\/Test.csv')\nsubmit = pd.read_csv('..\/input\/autoinland-vehicle-insurance-claim-challenge\/SampleSubmission.csv')\n# variable = pd.read_csv('..\/data\/VariableDefinitions.csv')","0de41ca3":"target_col = \"target\"","34f3daec":"pseudo_label = pd.read_csv(\"..\/input\/starter-notebook-autoinland-vehicle-insurance\/submission_proba.csv\", index_col=\"ID\")","0fbb38e6":"train.info()","91578095":"test.info()","0d74bd0c":"train.head()","ccbf7b01":"train['target'].value_counts()","223d7569":"submit.head()","72cc2bf7":"pseudo_label","4e0ae43c":"pseudo_label[\"target\"].values","1f2198ac":"test[target_col] = pseudo_label[\"target\"][:1202].values","6e581052":"test.info()","390cb3be":"data = pd.concat([train, test], axis=0).reset_index(drop=True)","e2d0c010":"data.info()","5cc572df":"data.head(10)","8d549043":"data.isna().sum()","bf4dfc48":"data['Car_Category'].value_counts()\n","da25c54a":"data['ProductName'].value_counts()","bec620f4":"date_col = ['Policy Start Date','Policy End Date','First Transaction Date']\nnum_col = ['Age']\ncat_col = [col for col in test.columns if col not in date_col+num_col]","e6540475":"cat_col","d3cc2436":"one = list(data['Policy Start Date'])\ntwo = list(data['First Transaction Date'])\n\ncheck = []\n\nfor x in range(len(one)):\n    check.append((one[x], two[x]))","c022db29":"check2 = []\nfor x in check:\n    if x[0] != x[1]:\n        check2.append(x[0])","d26cd913":"len(check2)","702bd873":"data['Subject_Car_Make'].value_counts()","7bcef68b":"\ndata['Car_Category'] = data['Car_Category'].fillna(value='Saloon')\n\ndata['Gender'] = data['Gender'].fillna(value='NOT STATED')\n\ndata['LGA_Name'] = data['LGA_Name'].fillna(value='Victoria Island')\n\ndata['State'] = data['State'].fillna(value='Lagos')\n\ndata['Subject_Car_Colour'] = data['Subject_Car_Colour'].fillna(value='Black')\n\ndata['Subject_Car_Make'] = data['Subject_Car_Make'].fillna(value='TOYOTA')","3b0244e1":"data.isna().sum()","b220d9a1":"data['Car_Category'].value_counts()","1c66b1d0":"plt.figure(figsize=(15, 10))\nsns.barplot(x='Gender', y='target', data=data)","a12babe4":"plt.figure(figsize=(15, 10))\nsns.barplot(x='Age', y='target', data=data)","315359f0":"# Fixing the age column as it contains a lot of illegal values\n\ndef fix_age(x):\n    if x < 18:\n        return 0\n    elif x >= 18 and x <20:\n        return 1\n    elif x >=20 and x < 30:\n        return 2\n    elif x >= 30 and x < 40:\n        return 3\n    elif x >= 40 and x < 50:\n        return 4\n    elif x >= 50 and x < 60:\n        return 5\n    elif x >= 60 and x < 70:\n        return 6\n    elif x >= 70 and x < 80:\n        return 7\n    elif x >=80:\n        return 8\n    \ndata['Age'] = data['Age'].apply(fix_age)","430cfa13":"data['Age'].value_counts()","3fdc47f0":"def convert(x):\n    \n\n    load = ['Tipper Truck', 'Pick Up > 3 Tons', 'Wagon', 'Van', 'Truck']\n    people = ['Saloon', 'Motorcycle', 'JEEP', 'Mini Van', 'CAMRY CAR HIRE', 'Sedan', 'Bus', 'Mini Bus']\n    both = ['Station 4 Wheel', 'Pick Up']\n    body = ['Shape Of Vehicle Chasis']\n    unknown = ['Unknown']\n    \n    if x in load:\n        return 1.0\n    elif x in people:\n        return 2.0\n    elif x in both:\n        return 3.0\n    elif x in body:\n        return 4.0\n    elif x in unknown:\n        return 0.0\n\ndata['Cargo'] = data['Car_Category'].apply(convert)","4dbf99cf":"def sizze(x):\n    \n    small = ['Motorcycle']\n    medium = ['Saloon', 'Sedan', 'Shape Of Vehicle Chasis', 'CAMRY CAR HIRE', ]\n    large = ['JEEP', 'Mini Van',  'Mini Bus', 'Pick Up', 'Wagon']\n    extra_large = ['Van', 'Truck', 'Pick Up > 3 Tons', 'Tipper Truck', 'Bus', 'Station 4 Wheel']\n    unknown = ['Unknown']\n    \n    if x in small:\n        return 1.0\n    if x in medium:\n        return 2.0\n    if x in large:\n        return 3.0\n    if x in extra_large:\n        return 4.0\n    \n    if x in unknown:\n        return 0.0\n    \ndata['Size'] = data['Car_Category'].apply(sizze)","9cc329fc":"data['Size'].isna().sum()","6b71adad":"data['No_Pol'].value_counts()","c71b23c5":"def risk(x):\n    if x <= 1:\n        return 0\n    else:\n        return x\ndata['HigherRisk'] = data['No_Pol'].apply(risk)","873c4a87":"data['HigherRisk'].value_counts()","41fb0a59":"data['Black'] = data['Subject_Car_Colour'].apply(lambda x: 1 if x=='Black' else 0)","4458e391":"data.columns","4e56aed9":"#data = pd.get_dummies(data, columns=['Age'])\n#data = pd.get_dummies(data, columns=['Subject_Car_Colour'])\n#data = pd.get_dummies(data, columns=['Subject_Car_Make'])\n# data = pd.get_dummies(data, columns=['Size'])\n# data = pd.get_dummies(data, columns=['Cargo'])\n# data = pd.get_dummies(data, columns=['Black'])\n# data = pd.get_dummies(data, columns=['Higher Risk'])\n# data = pd.get_dummies(data, columns= ['Car_Category'])\n# data = pd.get_dummies(data, columns=['Gender'])\n# data = pd.get_dummies(data, columns=['ProductName'])","b26632b4":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder","760097c6":"cat_col","d8f0fe90":"data.columns","32e08be7":"cat_col = [\n 'No_Pol','Subject_Car_Colour','Car_Category','ProductName','HigherRisk','Gender','Black',\n 'LGA_Name','Subject_Car_Make',\n 'State']\n\nencoder = LabelEncoder()\n\nfor col in cat_col:\n    \n    data[col] = encoder.fit_transform(data[col])","d9d3d5ca":"data.info()","2097de57":"# Convert to datatime features\n\ndata['Policy Start Date'] = pd.to_datetime(data['Policy Start Date'])\ndata['Policy End Date'] = pd.to_datetime(data['Policy End Date'])","06d5c068":"data.info()","23f338c8":"# Start\ndata['startday'] = data['Policy Start Date'].dt.day\ndata['startmonth'] = data['Policy Start Date'].dt.month\ndata['startyear'] = data['Policy Start Date'].dt.year\n\n# End\ndata['endday'] = data['Policy End Date'].dt.day\ndata['endmonth'] = data['Policy End Date'].dt.month\ndata['endyear'] = data['Policy End Date'].dt.year","206bb555":"data['endyear'].value_counts()","683995b0":"data['startyear'].value_counts()","270e10f8":"# Caution\n\ndata['day'] = data['endday'] - data['startday']\ndata['month'] = data['endmonth'] - data['startmonth']\ndata['year'] = data['endyear'] - data['startyear']\n\n#data.drop(['end day', 'end month', 'end year', 'start day', 'start year', 'start month'], axis=1, inplace=True)","46a0409f":"data.head()","15627fbd":"data.drop(['First Transaction Date','Policy End Date', 'Policy Start Date', 'ID'], axis=1, inplace=True)\n# data.drop(['First Transaction Date', 'Policy End Date', 'Policy Start Date', 'LGA_Name', 'ID'], axis=1, inplace=True)","3a47417c":"#plt.figure(figsize=(20,15))\n\n#sns.heatmap(data.corr(), cmap='coolwarm')","d8562d60":"data.head(10)","1b6dec22":"data['target'].value_counts()","6243fa52":"n_trn=12079","91b87355":"train = data.iloc[0:12079, :]\ntest = data.iloc[12079:, :].drop('target', axis=1)","1dee8ba5":"train.info()","9c6361a1":"test.info()","3d793164":"X_train = train.drop(['target'], axis=1).copy()\ny_train = train['target'].copy()","52ad6a04":"X_train.shape, y_train.shape","2bbae0dc":"y_train","eb33296a":"!pip install kaggler","32556ea9":"import kaggler\n# from kaggler.model import AutoLGB\nfrom kaggler.preprocessing import DAE, TargetEncoder, LabelEncoder\n\nprint(f'Kaggler: {kaggler.__version__}')","122bbe0d":"data.info()","ac037f5e":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score, confusion_matrix\nimport warnings","48080ac5":"data.info()","a592c686":"cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=123)\nte = TargetEncoder(cv=cv)\ndf_te = te.fit_transform(data[cat_col], data[target_col])\ndf_te.columns = [f'te_{col}' for col in cat_col]\ndf_te.head()","f99e0247":"encoding_dim = 64\nfeature_cols = ['Gender', 'Age', 'No_Pol', 'Car_Category', 'Subject_Car_Colour',\n       'Subject_Car_Make', 'LGA_Name', 'State', 'ProductName',\n       'Cargo', 'Size', 'HigherRisk', 'Black', 'day', 'month',\n       'year']\n\nnum_cols = [x for x in feature_cols if x not in cat_col]","b7b54526":"dae = DAE( num_cols=feature_cols, encoding_dim=encoding_dim)\nX = dae.fit_transform(data[feature_cols])","157feab2":"df_dae = pd.DataFrame(X, columns=[f'dae_{i}' for i in range(encoding_dim)])\nprint(df_dae.shape)","4d8c0901":"data.isna().sum()","52820ca5":"X = pd.concat([data[feature_cols], df_te, df_dae], axis=1)\ny = data[target_col]\nX_tst = X.iloc[n_trn:]\n\np = np.zeros_like(y, dtype=float)\np_tst = np.zeros((test.shape[0],))\n","77dfea32":"pd.concat([X,y],axis=1)","53d80581":"!pip install lightautoml","7ccbffab":"## LightAutoML\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.dataset.roles import DatetimeRole\nfrom lightautoml.tasks import Task\nfrom lightautoml.utils.profiler import Profiler","a623dddc":"N_THREADS = 8  # threads cnt for lgbm and linear models\nJOB = 8\nN_FOLDS = 5  # folds cnt for AutoML\nRANDOM_STATE = 42  # fixed random state for various reasons\nTEST_SIZE = 0.2  # Test size for metric check\nTIMEOUT = 6000  # Time in seconds for automl run\n\nnp.random.seed(RANDOM_STATE)\n","88bca2a4":"def AUC_metric(y_true, y_pred, **kwargs):\n    return roc_auc_score(y_true, (y_pred > 0.5).astype(int), **kwargs)\n\n\ntask = Task(\"binary\", metric=roc_auc_score)\n\nroles = {\n    \"target\": \"target\",\n}\n\ntrain_df = pd.concat([X,y],axis=1)\n\ntrain_df_1, test_df_1 = train_test_split(train_df, test_size=0.20)","454d9496":"%%time \nautoml = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['catboost', 'lgb', 'catboost_tuned']]},\n                       reader_params = {'n_jobs': JOB})\n                       \noof_pred = automl.fit_predict(train_df_1, roles = roles)","d8513544":"pred = automl.predict(test_df_1)\nprediction = (pred.data[:, 0] > 0.5).astype(int)","4960ab2d":"print(\"AUC score :\", roc_auc_score(y_test, prediction))","eb3ef56f":"X_tst","7a805ca8":"pred = automl.predict(X_tst)\nprediction = (pred.data[:, 0] > 0.3).astype(int)","67896088":"sub = submit.copy()\nsub['target']=prediction\nsub.head()","3ff7cd89":"sub.to_csv(\"DEA_sub.csv\",index=False)","787ebc68":"# Feature Engineering","7efe9177":"# One Hot Encoding","7fb9ed52":"# Expanding the date time objects, additional feature creation","97d180db":"# Exploratory Data Analysis","f98ae610":"# Spliting and Scaling the data","cda12528":"# Importing the data","71d9d4a4":"### This means that the Policy start date and First transactional date are equal so we should drop one of them","b253bf6d":"# We also need to create features that would speak to the \n- Risk depending on the type of vehicle being insured (Car Category)\n- Type of Insurance (ProductName)","b98e5ef7":"# Categorical Encoder","2d3fabdd":"## Combining the test and train data","a8efb2b7":"## Identifying the various column types","84d41328":"# Importing the needed libraries","87bb0e02":"## creating features that speak to the risk associated with the individual themselves using\n- Age\n- Gender\n- Number of policies (We can create a separate colum from this that identifies wether or not each customer has more than one policies)","e39329b7":"# Fixing the class imbalance"}}