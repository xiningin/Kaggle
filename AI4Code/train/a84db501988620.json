{"cell_type":{"0dc6959b":"code","becf987c":"code","b8a21786":"code","15e7e58b":"code","07529c8c":"code","a407167b":"code","26184475":"code","e2098d17":"code","ed6b91a7":"code","a3e08c25":"code","8c7b76ee":"code","4eecf892":"code","2f0a9993":"code","821ed5f0":"code","23b431aa":"code","3451f6f5":"code","b986431c":"code","0817cc89":"code","f9729862":"code","129e9463":"code","e619f885":"code","3387e90f":"code","cc402761":"code","98a89a00":"markdown","251da55d":"markdown","22d9bee8":"markdown"},"source":{"0dc6959b":"import numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold, GridSearchCV\nimport optuna","becf987c":"!ls ..\/input\/titanic","b8a21786":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","15e7e58b":"gender_submission.head()","07529c8c":"data = pd.concat([train, test], sort=False)","a407167b":"data.isnull().sum()","26184475":"data['Sex'].replace(['male','female'], [0, 1], inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndata['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['fare_value']=data['Fare']\/50\nage_avg = data['Age'].mean()\nage_std = data['Age'].std()\ndata['Age'].fillna(np.random.randint(age_avg - age_std, age_avg + age_std), inplace=True)\ndata['age_value']=data['Age']\/50\ndata['family'] = (data['SibSp'] + data['Parch'])\/5 \ndata['isAlone'] = 0\ndata.loc[data['family'] > 0, 'isAlone'] = 1","e2098d17":"delete_columns = ['Name','PassengerId','SibSp','Parch','Ticket','Cabin','Age','Fare']\ndata.drop(delete_columns, axis=1, inplace=True)","ed6b91a7":"train = data[:len(train)]\ntest = data[len(train):]","a3e08c25":"Y_train = train['Survived']\nX_train = train.drop('Survived', axis = 1)\nX_test = test.drop('Survived', axis = 1)","8c7b76ee":"kf = KFold(n_splits=5)\noof = np.zeros(len(train))\nfor fold, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n    train_x, valid_x = X_train.iloc[train_index], X_train.iloc[valid_index]\n    train_y, valid_y  = Y_train[train_index], Y_train[valid_index]\n\n    gbm = lgb.LGBMClassifier(objective='binary')\n    gbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n            early_stopping_rounds=20,verbose= -1) \n    \n    oof[valid_index] = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n\nround(accuracy_score(Y_train, oof), 3)","4eecf892":"y_pred = gbm.predict(np.array(X_test))","2f0a9993":"sub = gender_submission\nsub['Survived'] = list(map(int, y_pred))\nsub.to_csv(\"submission.csv\", index=False)\nsub","821ed5f0":"def objective(trial):\n    kf = KFold(n_splits=5)\n    gbm = lgb.LGBMClassifier(objective='binary')\n    oof = np.zeros(len(train))\n\n    for fold, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n        train_x, valid_x = X_train.iloc[train_index], X_train.iloc[valid_index]\n        train_y, valid_y  = Y_train[train_index], Y_train[valid_index]\n        gbm = lgb.LGBMClassifier(objective='binary',\n                                 reg_alpha=trial.suggest_loguniform('reg_alpha', 1e-4, 100.0),\n                                 reg_lambda=trial.suggest_loguniform('reg_lambda', 1e-4, 100.0),\n                                 silent=True)\n        gbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n                early_stopping_rounds=20,verbose= -1) \n        oof[valid_index] = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n\n    accuracy = accuracy_score(Y_train, oof)\n    return 1.0 - accuracy","23b431aa":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=100)","3451f6f5":"kf = KFold(n_splits=5)\noof = np.zeros(len(train))\nfor fold, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n    train_x, valid_x = X_train.iloc[train_index], X_train.iloc[valid_index]\n    train_y, valid_y  = Y_train[train_index], Y_train[valid_index]\n\n    gbm2 = lgb.LGBMClassifier(objective='binary',\n                            reg_alpha=0.00022293330881290074,\n                            reg_lambda=0.04041101450049081)\n    gbm2.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n            early_stopping_rounds=20,verbose= -1)\n    oof[valid_index] = gbm2.predict(valid_x, num_iteration=gbm2.best_iteration_)\n\nround(accuracy_score(Y_train, oof), 3)","b986431c":"y_pred2 = gbm2.predict(np.array(X_test))","0817cc89":"sub = gender_submission\nsub['Survived'] = list(map(int, y_pred2))\nsub.to_csv(\"submission2.csv\", index=False)\nsub","f9729862":"from sklearn.model_selection import GridSearchCV\ngbm3 = lgb.LGBMClassifier(objective='binary')\nreg_cv = GridSearchCV(gbm3,{'reg_alpha':[0.0001,0.0002,0.0004,0.0008,0.0016],\n                            'reg_lambda':[0.01,0.02,0.04,0.08,0.16]},verbose=1)\nreg_cv.fit(X_train,Y_train)","129e9463":"reg_cv.best_params_","e619f885":"gbm3 = lgb.LGBMClassifier(**reg_cv.best_params_)\ngbm3.fit(X_train,Y_train)","3387e90f":"y_pred3 = gbm3.predict(np.array(X_test))","cc402761":"sub = gender_submission\nsub['Survived'] = list(map(int, y_pred3))\nsub.to_csv(\"submission3.csv\", index=False)\nsub","98a89a00":"# No optimization","251da55d":"# Optuna\nhttps:\/\/optuna.org\/","22d9bee8":"# GridSearchCV\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.GridSearchCV.html"}}