{"cell_type":{"78e3289b":"code","2070b20c":"code","78410a3e":"code","c1a0b048":"code","38f250af":"code","e3194330":"code","72d7e981":"code","f2c74c2d":"code","ce5eb9d5":"code","b03449db":"code","9b70c4b4":"code","a86e9435":"code","62dfaf39":"code","1a67bae3":"code","ad95df57":"code","862fe221":"code","d06e5b20":"code","5868d0c5":"code","14fef767":"code","d6bb1bb1":"code","2903303e":"code","1ea45eea":"code","ed3368aa":"code","c443edf6":"code","dd5c6944":"code","f09dfafa":"code","b3de7f61":"code","003c9b75":"code","29642a7a":"code","0b55b691":"code","87bc5104":"code","18515683":"code","5304207f":"code","50ca1b72":"code","53b0136e":"code","230a6790":"code","73876782":"code","84c357b7":"code","429076f9":"code","f6aba427":"code","a02e2803":"code","fa34c74a":"code","8956a213":"code","dd5c18ba":"code","643119f7":"code","63541680":"code","c73285cc":"code","30bc16b9":"code","b6b83c61":"code","64360620":"code","d3fc9642":"code","127dfdb2":"code","ba2ad1f9":"code","f9d7649b":"code","7630b7a8":"code","7e812ff9":"code","16e7a4fb":"code","826c68cc":"code","dbb76089":"code","31efc4e7":"code","8bca95d2":"code","e6769211":"code","e953d7d7":"code","a5709d94":"code","3fc500de":"code","08809d3f":"code","f9a6f4a2":"code","cc66fb6a":"code","4e58eaeb":"code","e609037d":"code","2ab5cd9d":"code","f8a64b90":"code","5f6a29a5":"code","e62f11a2":"code","71337767":"code","538f6bc6":"code","22209272":"code","d17749e2":"code","2e67a363":"code","033786ce":"code","25ecadac":"code","1790b4c7":"code","a975058d":"code","239d4941":"code","e00fa7a1":"code","2af36511":"code","e6ef9c96":"code","a97302bb":"code","21525733":"code","6d0cab77":"code","f8efb60d":"code","15c395c4":"code","c4f9b97a":"code","40000492":"code","28a99879":"code","ef451812":"code","80576019":"markdown","17022a27":"markdown","879b456a":"markdown","660b188d":"markdown"},"source":{"78e3289b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","2070b20c":"import warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns',None)","78410a3e":"df= pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')","c1a0b048":"df.head()","38f250af":"df.shape","e3194330":"df.info()","72d7e981":"df.isnull().sum()\n","f2c74c2d":"### dropping the column company\ndf.drop('company',axis=1,inplace=True)","ce5eb9d5":"sns.histplot(x='agent',data=df,kde=True)","b03449db":"median = df.agent.median()\ndf.agent.fillna(median,inplace=True)","9b70c4b4":"sns.histplot(x='agent',data=df,kde=True)","a86e9435":"median = df.children.median()\ndf.children.fillna(median,inplace=True)","62dfaf39":"df.country.isnull().sum()\/df.country.count()      #### as the data is less than 40 % we can use the mode to impute the NAN values","1a67bae3":"mode = df.country.mode()[0]\ndf.country.fillna(mode,inplace=True)","ad95df57":"df.isnull().sum()","862fe221":"cat = [cat for cat in df if(df[cat].dtype =='O')]\nprint(len(cat))\ncat","d06e5b20":"num = [num for num in df if(df[num].dtype !='O')]\nprint(len(num))\nnum","5868d0c5":"for i in cat:\n    print(df[i].value_counts())","14fef767":"l=['adults','children','babies']\n\nfor i in l:\n    print(i,\" \",df[i].unique())","d6bb1bb1":"filter = (df.adults ==0) & (df.children ==0) & (df.babies ==0) \ndf[filter]","2903303e":"df_new = df[~filter]","1ea45eea":"df_new.country.unique()","ed3368aa":"df_not_cancelled = df[df['is_canceled']==0]\ndf_cancelled = df[df['is_canceled']==1]","c443edf6":"df_not_cancelled['country'].value_counts()","dd5c6944":"df_not_cancelled['country'].value_counts().plot.barh(figsize=(10,10))","f09dfafa":"df_new.columns","b3de7f61":"sns.set_theme()\nplt.figure(figsize=(20,10))\nsns.boxplot(x='reserved_room_type',y='adr',hue='hotel',data=df_not_cancelled)\nplt.xlabel('Rooms Reserved')\nplt.ylabel('Price')\n","003c9b75":"df_not_cancelled.arrival_date_year.value_counts().plot.bar(figsize=(10,10))","29642a7a":"df_2015 = df_not_cancelled[df_not_cancelled['arrival_date_year']==2015]\ndf_2016 = df_not_cancelled[df_not_cancelled['arrival_date_year']==2016]\ndf_2017 = df_not_cancelled[df_not_cancelled['arrival_date_year']==2017]","0b55b691":"df_2015.groupby(['hotel','arrival_date_month'])['adr'].mean().plot.barh(figsize=(10,10))","87bc5104":"df_2016.groupby(['hotel','arrival_date_month'])['adr'].mean().plot.barh(figsize=(10,10))","18515683":"df_2017.groupby(['hotel','arrival_date_month'])['adr'].mean().plot.barh(figsize=(10,10))","5304207f":"df_2017.arrival_date_month.unique()","50ca1b72":"plt.figure(figsize=(10,10))\nsns.lineplot(x='arrival_date_month',y='adr',data=df_new,hue='hotel')\nplt.xticks(rotation=90)","53b0136e":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=90)\nsns.lineplot(x='arrival_date_month',y='adr',data=df_2015,hue='hotel')","230a6790":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=90)\nsns.lineplot(x='arrival_date_month',y='adr',data=df_2016,hue='hotel')","73876782":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=90)\nsns.lineplot(x='arrival_date_month',y='adr',data=df_2017,hue='hotel')","84c357b7":"df_guest_resort = df_new[df_new['hotel']=='Resort Hotel']\nresort = df_guest_resort['arrival_date_month'].value_counts()","429076f9":"df_guest_city = df_new[df_new['hotel']=='City Hotel']\ncity = df_guest_city['arrival_date_month'].value_counts()","f6aba427":"df_guests_combined = pd.concat([resort,city],axis=1)","a02e2803":"df_guests_combined.columns = ['Resort','City']\ndf_guests_combined","fa34c74a":"df_guests_combined['Months'] = df_guests_combined.index","8956a213":"df_guests_combined.sort_values(by='Months')","dd5c18ba":"plt.figure(figsize=(10,10))\nplt.plot(df_guests_combined.Resort,label='resort')\nplt.plot(df_guests_combined.City,label='city')\nplt.ylabel('Customers in number')\nplt.xlabel('Months')\nplt.legend(title='Hotel')\nplt.xticks(rotation=90)","643119f7":"df_new.head()","63541680":"plt.figure(figsize=(20,10))\nsns.heatmap(df_new.corr(),annot=True)","c73285cc":"y = df_new['is_canceled']","30bc16b9":"df_new = df_new.drop('is_canceled',axis=1)","b6b83c61":"df_new = pd.concat([df_new,y],axis=1)","64360620":"df_categorical = df_new[cat]","d3fc9642":"df_categorical.head()","127dfdb2":"df_categorical['reservation_status_date']= pd.to_datetime(df_categorical['reservation_status_date'])","ba2ad1f9":"df_categorical['year']= df_categorical['reservation_status_date'].dt.year\ndf_categorical['month']= df_categorical['reservation_status_date'].dt.month\ndf_categorical['date']= df_categorical['reservation_status_date'].dt.date","f9d7649b":"df_categorical.drop(['reservation_status_date'],axis=1,inplace=True)","7630b7a8":"df_categorical['cancelled'] = df['is_canceled']","7e812ff9":"df_categorical.head()","16e7a4fb":"for i in df_categorical.columns:\n    dict_convert = df_categorical.groupby([i])['cancelled'].mean().to_dict()\n    df_categorical[i] = df_categorical[i].map(dict_convert)","826c68cc":"df","dbb76089":"ncn = pd.concat([df_new[num],df_categorical],axis=1)","31efc4e7":"df_new[num].shape,df_categorical.shape","8bca95d2":"df_new.shape","e6769211":"ncn.drop('is_canceled',axis=1,inplace=True)","e953d7d7":"ncn.isnull().sum()","a5709d94":"def trans(col):\n    plt.figure(figsize=(5,5))\n    sns.distplot(ncn[col])\n    plt.xlabel(col)\n    plt.title(col)\n    plt.show()\n    ","3fc500de":"# for col in nc.columns:\n#     trans(col)","08809d3f":"# def trans(col):\n#     plt.figure(figsize=(8,8))\n#     sns.boxplot(ncn[col])\n#     plt.xlabel(col)\n#     plt.title(col)\n#     plt.show()\n    \n# for col in ncn.columns:\n#     trans(col)\n    \n    \n    \n#     lead time, Stay_in_weekend_nights, stay_in_week_night, agent, adr, total_of_special_request\n","f9a6f4a2":"def trans(col):\n    plt.figure(figsize=(10,5))\n    plt.subplot(1, 2, 1)\n    sns.boxplot(ncn[col])\n    plt.xlabel(col)\n    plt.title(col)\n    plt.subplot(1, 2, 2)\n    sns.boxplot(np.log1p(ncn[col]))\n    plt.xlabel(col)\n    plt.title(col)\n    plt.show()\n    \nfor col in ['lead_time','agent', 'adr', 'total_of_special_requests']:\n    trans(col)","cc66fb6a":"sns.boxplot(ncn.adr**(1\/2))","4e58eaeb":"import scipy.stats as stats\nimport pylab\n\ndef trans(col):\n    plt.figure(figsize=(10,5))\n    plt.subplot(1, 2, 1)\n    sns.distplot(np.log1p(ncn[col]))\n    plt.xlabel(col)\n    plt.title(col)\n    plt.subplot(1, 2, 2)\n    stats.probplot(np.log1p(ncn[col]),dist='norm',plot=pylab)\n    plt.xlabel(col)\n    plt.title(col)\n    plt.show()\n    \nfor col in ['lead_time','agent', 'adr']:\n    trans(col)","e609037d":"def trans(col):\n    plt.figure(figsize=(10,5))\n    plt.subplot(1, 2, 1)\n    sns.distplot(np.log1p(ncn[col]))\n    plt.xlabel(col)\n    plt.title(col)\n    plt.subplot(1, 2, 2)\n    sns.boxplot(np.log1p(ncn[col]))\n    plt.xlabel(col)\n    plt.title(col)\n    plt.show()\n    \nfor col in ['lead_time','agent','stays_in_weekend_nights']:\n    trans(col)","2ab5cd9d":"ncn['lead_time'] = np.log1p(ncn['lead_time'])\nncn['agent'] = np.log1p(ncn['agent'])\nncn['stays_in_weekend_nights'] = np.log1p(ncn['stays_in_weekend_nights'])","f8a64b90":"#### applying IQR  at adr\n\nQ1 = ncn['adr'].quantile(0.25)\nQ3 = ncn['adr'].quantile(0.75)\nIQR = Q3-Q1\n\nlower = ncn['adr'].quantile(0.25)-(1.5*IQR)\nupper = ncn['adr'].quantile(0.75)+(1.5*IQR)","5f6a29a5":"lower,upper","e62f11a2":"### adr transfrom\n\ndata = ncn.copy() \ndata.loc[data['adr']>210.75,'adr'] = 210.75\ndata.loc[data['adr']<0,'adr'] = 0\n\n### total_of_special_requests\ndata['total_of_special_requests'] = data['total_of_special_requests']**(1\/2)\n\n","71337767":"sns.boxplot(data['adr'])","538f6bc6":"def trans(col):\n    plt.figure(figsize=(10,5))\n    plt.subplot(1, 2, 1)\n    sns.distplot(data[col])\n    plt.xlabel(col)\n    plt.title(col)\n    plt.subplot(1, 2, 2)\n    sns.boxplot(data[col])\n    plt.xlabel(col)\n    plt.title(col)\n    plt.show()\n    \nfor col in ['lead_time','agent','adr','stays_in_weekend_nights']:\n    trans(col)","22209272":"data.head()","d17749e2":"X = data.iloc[:,:-1]\ny = data.iloc[:,-1]","2e67a363":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=15)","033786ce":"from sklearn.feature_selection import mutual_info_classif\nmi = mutual_info_classif(X_train,y_train)\nmi","25ecadac":"mi = pd.Series(mi)","1790b4c7":"mi.index = X_train.columns","a975058d":"mi.sort_values(ascending=True).plot.barh(figsize=(10,10))","239d4941":"from sklearn.feature_selection import SelectKBest\n\ntop_20 = SelectKBest(mutual_info_classif,k=20)\ntop_20.fit(X_train,y_train)\nX_train.columns[top_20.get_support()]","e00fa7a1":"selected_features= data[X_train.columns[top_20.get_support()]]","2af36511":"len(selected_features.columns)","e6ef9c96":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(selected_features,y,test_size=0.3,random_state=15)","a97302bb":"%%time\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report\nlg=LogisticRegression()\nlg.fit(X_train,y_train)\ny_pred = lg.predict(X_test)\nprint('Confusion Metric:\\n\\n ',  confusion_matrix(y_test,y_pred))\nprint('\\n\\n Accuracy Metric:\\n ',  accuracy_score(y_test,y_pred))\nprint('\\n\\nClassification Metric:\\n ',  classification_report(y_test,y_pred))","21525733":"data.cancelled.value_counts()  ############# almosts same value so Kfold will work ","6d0cab77":"from sklearn.model_selection import cross_val_score\nval = cross_val_score(lg,selected_features,y,cv=10)","f8efb60d":"val.mean()  #### this the cross-validated accuracy","15c395c4":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","c4f9b97a":"models=[]\n\nmodels.append(('Naive Bayes',GaussianNB()))\nmodels.append(('RandomForest Classifier ',RandomForestClassifier()))\nmodels.append(('KNeighbors Classifier',KNeighborsClassifier()))","40000492":"for name,model in models:\n    print(f\"Model: {name}\")\n    model.fit(X_train,y_train)\n    y_pred = model.predict(X_test)\n    print('Confusion Metric:\\n\\n ',  confusion_matrix(y_test,y_pred))\n    print('\\n\\n Accuracy Metric:\\n ',  accuracy_score(y_test,y_pred))\n    print('\\n\\nClassification Metric:\\n ',  classification_report(y_test,y_pred))\n          ","28a99879":"%%time\nfor name,model in models:\n    print(f\"Model: {name}\")\n    val = cross_val_score(model,X,y,cv=3)\n    print('Accuracy mean:\\n\\n ',val.mean())    ","ef451812":"#### Naive Bayes took less time and wins the race","80576019":"## Things to do-\n- there are 5 types of meals BB, HB, SC, Undefined, FB                           ------------------handle this Undefined\n- missing values ------- children  country  agent  company                         -----------------handle the missing values\n* country is the only categorical data that contain missing values others are numerical\n- there are some fields where the entry is there but there are no ADULTS ,CHILDREN or BABIES    ----------handle them \n- convert the reservation_status_date to datetime from object\n- is_canceled is the feature that should be categorical as its the predictor\n- check out for outliers\n- make model and check with cross validation \n- models to make random forest, naive bayes, logistic regression, KNN ","17022a27":"### EDA","879b456a":"## Analysis\n- there are 2 hotel - City Hotel and Resort Hotel\n- August has the highest booking and January has the least bookings\n- there are people from 177 countries that did the booking\n- the best room w.r.t City hotel is 'G' and Resort Hotel is 'H'\n- 2016 and 2017 in City and Resort hotel we have the maximum price in August and November is the cheapest\n- In 2015 the highest in City and Resort hotel was in September and August.\n- Resort hotel has more variabel data as compared to City hotel w.r.t. price.\n- City hotel is much populated than Resort Hotel \n- There is no columns with zero variance\n- Important Columns :\n* 'lead_time', 'stays_in_week_nights', 'adults', 'previous_cancellations',\n       'booking_changes', 'agent', 'days_in_waiting_list', 'adr',\n       'required_car_parking_spaces', 'total_of_special_requests', 'hotel',\n       'country', 'market_segment', 'distribution_channel',\n       'assigned_room_type', 'deposit_type', 'customer_type',\n       'reservation_status', 'month', 'date'\n- Naive Bayes took the less time and accuracy is almost 1","660b188d":"## Model Implementation"}}