{"cell_type":{"9169b8b9":"code","7eb03b2a":"code","96126dfa":"code","d2f374e2":"code","61e65f2c":"code","1fec83bd":"code","83b8b18a":"code","2eeb6650":"code","96f3ee02":"code","916af3b4":"code","a92d2337":"code","79213a84":"code","16eef8bd":"code","ef308ee2":"code","76eee144":"code","157dc164":"code","ff1ab36a":"code","1042ec68":"code","549d2201":"code","0920f081":"code","d304b49d":"markdown","2c399a42":"markdown","0198fa50":"markdown","ee7e3c14":"markdown","c1088652":"markdown","e427c7ae":"markdown","e8d7b2d7":"markdown","25de793d":"markdown","5fc622eb":"markdown","7b1eeea8":"markdown","24f9528d":"markdown","047f22d6":"markdown","b923fce2":"markdown","8d8b39e3":"markdown","dffb9942":"markdown","f22d25aa":"markdown","d046de7a":"markdown"},"source":{"9169b8b9":"import os\nprint(os.listdir(\"..\/input\"))\nimport pandas as pd\nimport numpy as np\nimport re #Regular expression for deleting characters which are not letters\nimport nltk #natural language tool kit\nimport PIL\nfrom nltk import punkt\nfrom nltk.corpus import stopwords \nfrom os import path #creating word cloud\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","7eb03b2a":"GPSA = pd.read_csv('..\/input\/googleplaystore.csv')\nGPSA.head()","96126dfa":"GPSA['Category'].value_counts()","d2f374e2":"GPSA.index[GPSA['Category'] == \"1.9\"].tolist()","61e65f2c":"GPSA = GPSA.drop(10472, axis = 0)","1fec83bd":"GPSA.rename(columns={'Content Rating':'Content'},inplace=True)\nGPSA.head()","83b8b18a":"print(\"There are {} observations and {} dimensions in this dataset. \\n\".format(GPSA.shape[0],GPSA.shape[1]))\n\nprint(\"There are {} categories in this dataset such as {}... \\n\".format(len(GPSA.Category.unique()),\n                                                                           \", \".join(GPSA.Category.unique()[0:5])))\n\nprint(\"There are {} genres under different categories in this dataset such as {}... \\n\".format(len(GPSA.Genres.unique()),\n                                                                                      \", \".join(GPSA.Genres.unique()[0:5])))","2eeb6650":"Category = GPSA.groupby(\"Category\")\nCategory.describe().head()","96f3ee02":"Category.mean().sort_values(by=\"Rating\",ascending=False).head()","916af3b4":"plt.figure(figsize=(15,10))\nCategory.size().sort_values(ascending=False).plot.bar()\nplt.xticks(rotation=50)\nplt.xlabel(\"Application Category\")\nplt.ylabel(\"Number of Android Applications\")\nplt.show()","a92d2337":"plt.figure(figsize=(15,10))\nCategory.max().sort_values(by=\"Rating\",ascending=False)[\"Rating\"].plot.bar()\nplt.xticks(rotation=50)\nplt.xlabel(\"Application Category\")\nplt.ylabel(\"Highest Rating\")\nplt.show()","79213a84":"from bokeh.io import show, output_file\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.plotting import figure\nfrom bokeh.palettes import RdPu6\nfrom bokeh.transform import factor_cmap\n\noutput_file(\"Google_Play.html\")\n\nGPSA.Content = GPSA.Content.astype(str)\nGPSA.Category = GPSA.Category.astype(str)\n\ngroup = GPSA.groupby(by=['Content', 'Category'])\n\nsource = ColumnDataSource(group)\n\nindex_cmap = factor_cmap('Content_Category', palette = RdPu6, factors = sorted(GPSA.Content.unique()), end = 1)\n\np = figure(plot_width=1200, plot_height=500, title= \"Mean Ratings by Category and Content\", x_range=group, toolbar_location=None, tooltips=[(\"Rating\", \"@Rating_mean\"), (\"Content, Category\", \"@Content_Category\")])\n\np.vbar(x='Content_Category', top = 'Rating_mean' , width=1, source=source, line_color=\"white\", fill_color=index_cmap, )\n\np.y_range.start = 0\np.x_range.range_padding = 0.025\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"Categories grouped by Content\"\np.xaxis.major_label_orientation = 1.0\np.outline_line_color = None\n\nshow(p)","16eef8bd":"GPSAr = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv', encoding = \"latin1\")\nGPSAr.head()","ef308ee2":"GPSAr = pd.concat([GPSAr.Translated_Review,GPSAr.Sentiment],axis=1)\nGPSAr.dropna(axis=0,inplace=True) #drop NaN values\nGPSAr.head()","76eee144":"GPSAr['Sentiment'].value_counts()","157dc164":"text_list = []\nfor i in GPSAr.Translated_Review:\n    text = re.sub(\"[^a-zA-Z]\",\" \",i)\n    text = text.lower()\n    text = nltk.word_tokenize(text)\n    lemma = nltk.WordNetLemmatizer()\n    text = [lemma.lemmatize(word) for word in text]\n    text = \" \".join(text)\n    text_list.append(text)","ff1ab36a":"text_list[5:10]","1042ec68":"text1 = \" \".join(review for review in GPSAr.Translated_Review)\nprint (\"There are {} words in the combination of all reviews.\".format(len(text1)))","549d2201":"wordcloud = WordCloud(max_font_size=150, max_words=100, background_color=\"grey\").generate(text)\nplt.figure()\nplt.imshow(wordcloud, interpolation=\"sinc\")\nplt.axis(\"off\")\nplt.show()","0920f081":"stopwords = set(STOPWORDS)\nstopwords.update([\"app\", \"game\", \"thank\", \"you\", \"think\", \"even\", \"make\", \"still\", \"really\", \"find\", \"much\",\n                  \"now\", \"go\", \"thing\", \"say\", \"got\", \"lot\", \"open\", \"day\", \"one\", \"back\", \"please\", \"sometime\",\n                 \"way\", \"first\", \"though\"]) \n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text1)\n\n# Display the generated image:\n# the matplotlib way:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","d304b49d":"*Explore the grouped category variable using measures of central tendenceis such as mean, median, quartiles, SD etc.*","2c399a42":"*The counts of sentiments per group*","0198fa50":"**Loading the Libraries**","ee7e3c14":"**Number of Android Applications grouped by Category**","c1088652":"*Editing the wordcloud; changing font size, background colour and the interpolation*","e427c7ae":"*In the categories variable, '1.9' value seems like an anamoly within the dataset. We are going to find its index value and then remove it altogether*","e8d7b2d7":"**Word Cloud using the Individual Reviews Dataset**","25de793d":"I hope I did justice to the dataset. Do comment if you have any suggestion for this notebook. \nCheers!","5fc622eb":"*The number of unique values within the category variable*","7b1eeea8":"*Create stopword list. Added stop words by multiple iterations of the code to remove selected words from each iteration of the word cloud*","24f9528d":"*Since we are not going to do any sentiment analysis, we are going to concatenate Translated_Review and Sentiment*","047f22d6":"We will look to analyse both the datasets using python visualisation libraries. ","b923fce2":"*The average ratings per category*","8d8b39e3":"**Creating bokeh chart to plot category and content by mean ratings**","dffb9942":"![Screen%20Shot%202019-05-28%20at%205.26.19%20PM%20%282%29.png](attachment:Screen%20Shot%202019-05-28%20at%205.26.19%20PM%20%282%29.png)\nThe file outputs as html and I have attached .png file so that you can view the output. Please provide any suggestions if you know how I can output it in the kaggle notebook. \n","f22d25aa":"**Average Ratings per Category**","d046de7a":"*Cleaning the data set for characted values such as !,. etc.*"}}