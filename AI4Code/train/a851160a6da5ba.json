{"cell_type":{"ce67ad1d":"code","6e293a49":"code","c9bbdadc":"code","3ba99f96":"code","37fcc6e8":"code","a7aa77c0":"code","bf941216":"code","a7d98827":"code","4b1663ea":"code","01f18ff6":"code","ce5cf123":"code","9bb263c1":"code","47ca2db9":"code","1c1d74a6":"code","32173a42":"code","588b1947":"code","8a54c684":"code","7d24eebc":"code","cba83881":"code","88b842e2":"code","2437ebdd":"code","310c6e09":"code","a26d4807":"code","e5cc8d01":"code","0e77f222":"code","89ae1a8a":"code","bc3e0318":"code","1535bdc8":"code","8d988002":"code","c2dc793f":"code","5b9dd781":"code","6a832174":"code","672538f4":"code","d26e7c20":"code","9a2f7453":"code","e0b689dc":"code","73697159":"code","f688dc7e":"code","05e8ae6e":"code","d98e09bb":"code","bc046fc3":"code","31f213a7":"code","c5de9d80":"code","28422485":"code","6df7f78a":"code","13a6a147":"code","ec1b0eee":"code","1e846123":"code","108ae884":"code","27becd73":"code","09c771f4":"code","d0c1c8c3":"code","cc661791":"code","49642cb4":"code","b1083882":"code","5da63bf8":"code","f3d7c3c8":"code","b2e31759":"code","8d7777fd":"code","ea1b42a9":"code","f434d69e":"code","d6b29de2":"code","b7b759c8":"code","fbf0c307":"code","1535712d":"code","6ac35373":"code","ff47bf49":"code","b0d26493":"code","eb4d00b1":"code","3c729408":"code","d1cc1345":"code","ae50c854":"code","571bba3f":"code","e35f0407":"code","6a56fe3f":"code","800a46e1":"code","0bc88fe0":"code","5c1a919b":"code","f86e4178":"code","02c0d17d":"code","1353157a":"code","f96ba788":"code","8f18124c":"code","d0a0f234":"code","f95a509e":"code","18fa492e":"code","4393a4ab":"markdown","fd8dec7f":"markdown","12413a57":"markdown"},"source":{"ce67ad1d":"# importing all the necessary modules\nimport math\nimport numpy as np \nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier,plot_tree # for ploting decision tree \nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6e293a49":"# for calculating gini impurity\ndef gini(samples):\n    s_sum=sum(samples)\n    score=0\n    probab=[]\n    for sample in samples:\n        prob=sample\/s_sum\n        probab.append(prob)\n    for prob in probab:\n        score+=prob*(1-prob)\n    return score","c9bbdadc":"gini([100,75,125])","3ba99f96":"# for calculating Entropy\ndef entropy(samples):\n    s_sum=sum(samples)\n    score=0\n    probab=[]\n    for sample in samples:\n        prob=sample\/s_sum\n        probab.append(prob)\n    for prob in probab:\n        if(prob>0):\n            score+=prob*(math.log(prob))\n    return -1*score","37fcc6e8":"entropy([100,75,125])","a7aa77c0":"gini([100,0,0]), entropy([100,0,0])","bf941216":"data=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","a7d98827":"data","4b1663ea":"#using only 3 features i.e. Survived, Sex, Parch for simplicity\nfeatures=[\"Survived\",\"Sex\",\"Parch\"]","01f18ff6":"new=data[features]","ce5cf123":"new","9bb263c1":"# mapping Sex column from categorical to numerical \nsex_mapping={\n    'female':0,\n    'male':1\n}\nnew[\"Sex\"]=new[\"Sex\"].map(sex_mapping)","47ca2db9":"new","1c1d74a6":"new.Parch.value_counts()","32173a42":"new.Survived.value_counts()","588b1947":"gini([549,342])","8a54c684":"new[new.Parch<=0.5].Survived.value_counts()","7d24eebc":"gini([445,233])","cba83881":"new[new.Parch>0.5].Survived.value_counts()","88b842e2":"gini([109,104])","2437ebdd":"new[new.Parch<=1.5].Survived.value_counts()","310c6e09":"gini([498,298])","a26d4807":"new[new.Parch>1.5].Survived.value_counts()","e5cc8d01":"gini([51,44])","0e77f222":"new[new.Parch<=2.5].Survived.value_counts()","89ae1a8a":"gini([538,338])","bc3e0318":"new[new.Parch>2.5].Survived.value_counts()","1535bdc8":"gini([11,4])","8d988002":"new[new.Parch<=3.5].Survived.value_counts()","c2dc793f":"gini([540,341])","5b9dd781":"new[new.Parch>3.5].Survived.value_counts()","6a832174":"gini([9,1])","672538f4":"new[new.Parch<=4.5].Survived.value_counts()","d26e7c20":"gini([544,341])","9a2f7453":"new[new.Parch>4.5].Survived.value_counts()","e0b689dc":"gini([5,1])","73697159":"new[new.Parch<=5.5].Survived.value_counts()","f688dc7e":"gini([548,342])","05e8ae6e":"new[new.Parch>5.5].Survived.value_counts()","d98e09bb":"gini([1,0])","bc046fc3":"new[new.Sex<=0.5].Survived.value_counts()","31f213a7":"gini([233,81])","c5de9d80":"new[new.Sex>0.5].Survived.value_counts()","28422485":"gini([468,109])","6df7f78a":"# for calculating weighted mean\np1=0.468\np2=0.497\ns1=796\ns2=95\n(p1*s1+ p2*s2)\/(s1+s2)\n","13a6a147":"new[(new.Sex<=0.5) & (new.Parch<=0.5)].Survived.value_counts()","ec1b0eee":"gini([41,153])","1e846123":"new[(new.Sex<=0.5) & (new.Parch>0.5)].Survived.value_counts()","108ae884":"gini([40,80])","27becd73":"new[(new.Sex<=0.5) & (new.Parch<=1.5)].Survived.value_counts()","09c771f4":"gini([55,199])","d0c1c8c3":"new[(new.Sex<=0.5) & (new.Parch>1.5)].Survived.value_counts()","cc661791":"gini([26,34])","49642cb4":"new[(new.Sex<=0.5) & (new.Parch<=2.5)].Survived.value_counts()","b1083882":"gini([74,229])","5da63bf8":"new[(new.Sex<=0.5) & (new.Parch>2.5)].Survived.value_counts()","f3d7c3c8":"gini([4,7])","b2e31759":"new[(new.Sex<=0.5) & (new.Parch<=3.5)].Survived.value_counts()","8d7777fd":"gini([75,232])","ea1b42a9":"new[(new.Sex<=0.5) & (new.Parch>3.5)].Survived.value_counts()","f434d69e":"gini([6,1])","d6b29de2":"new[(new.Sex<=0.5) & (new.Parch<=4.5)].Survived.value_counts()","b7b759c8":"gini([77,232])","fbf0c307":"new[(new.Sex<=0.5) & (new.Parch>4.5)].Survived.value_counts()","1535712d":"gini([4,1])","6ac35373":"new[(new.Sex<=0.5) & (new.Parch<=5.5)].Survived.value_counts()","ff47bf49":"gini([80,233])","b0d26493":"new[(new.Sex<=0.5) & (new.Parch>5.5)].Survived.value_counts()","eb4d00b1":"gini([1,0])","3c729408":"p1=0.381\np2=0\ns1=313\ns2=1\n(p1*s1+ p2*s2)\/(s1+s2)","d1cc1345":"new[(new.Sex<=0.5) & (new.Parch<=3.5) &(new.Parch<=0.5)].Survived.value_counts()","ae50c854":"gini([41,153])","571bba3f":"new[(new.Sex<=0.5) & (new.Parch<=3.5) &(new.Parch>0.5)].Survived.value_counts()","e35f0407":"gini([34,79])","6a56fe3f":"new[(new.Sex<=0.5) & (new.Parch<=3.5) &(new.Parch<=1.5)].Survived.value_counts()","800a46e1":"gini([55,199])","0bc88fe0":"new[(new.Sex<=0.5) & (new.Parch<=3.5) &(new.Parch>1.5)].Survived.value_counts()","5c1a919b":"gini([20,33])","f86e4178":"new[(new.Sex<=0.5) & (new.Parch<=3.5) &(new.Parch>2.5)].Survived.value_counts()","02c0d17d":"gini([1,3])","1353157a":"p1=0.369\np2=0.375\ns1=303\ns2=4\n(p1*s1+ p2*s2)\/(s1+s2)","f96ba788":"features","8f18124c":"feat=[\"Sex\",\"Parch\"]","d0a0f234":"new[feat]","f95a509e":"model=DecisionTreeClassifier()\nmodel.fit(new[feat],new.Survived)","18fa492e":"plt.figure(figsize=(20,10))\nplot_tree(model,feature_names=feat)\nplt.show()","4393a4ab":"# Decision Tree From Scratch","fd8dec7f":"****If you like my work, Please UPVOTE! I will come with more algorithms from scratch.****","12413a57":"# This is the final Decision Tree."}}