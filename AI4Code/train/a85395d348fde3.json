{"cell_type":{"477926b1":"code","50a9bde6":"code","27cd167b":"code","1af3e59b":"code","82258c28":"code","1f2b5d2e":"markdown","95fca287":"markdown","c62207d6":"markdown","2fa0c903":"markdown"},"source":{"477926b1":"%%writefile predict_only_when_confirmation.py\nimport random\nimport numpy as np\nimport lightgbm as lgb\nimport pandas as pd\n\nUSE_BACK = 10\n# CONT_WINS_THRES = 30\nCHECK_WINS_RATE_THRES = 0.9\nCHECK_PAST_PERIOD = 100\nPRED_USE_STEP_THRES = 200\nPRED_USE_SCORE_THRES = 0.9\nmy_actions = []\nop_actions = []\npr_actions = []\ncont_wins = 0\nsolutions   = []\n\n## ============== LIGHT GBM PREDICTION ============== ## \ndef predict(my_actions, op_actions):\n    size = len(my_actions)\n    \n    d = dict()\n    for u in range(USE_BACK):\n        d[f\"OP_{u}\"] = op_actions[u: size - (USE_BACK - u)]\n        d[f\"MY_{u}\"] = my_actions[u: size - (USE_BACK - u)]\n    \n    X_train = pd.DataFrame(d)\n    y_train = op_actions[USE_BACK: size]\n    y_train = pd.DataFrame(y_train, columns=[\"y\"])\n    \n    n = dict()\n    for u in range(USE_BACK):\n        n[f\"OP_{u}\"] = [op_actions[size - (USE_BACK - u)]]\n        n[f\"MY_{u}\"] = [my_actions[size - (USE_BACK - u)]]\n    \n    X_test = pd.DataFrame(n)\n\n    classifier = lgb.LGBMClassifier(\n        random_state=0, \n        n_estimators=20, \n    )\n    \n    classifier.fit(X_train, y_train)\n    return classifier.predict_proba(X_test).tolist()[0], int(classifier.predict(X_test)[0])\n\n## ============== RANDOM(NASH EQUILIBRIUM) ============== ##\ndef randomize():\n    return int(random.randint(0, 2))\n\n## ============== PREDICT ONLY CONFIRM, OTHER RANDOM ============== ##\ndef predict_only_when_confirmation(observation, configuration):\n    global my_actions\n    global op_actions\n    global pr_actions\n    global cont_wins\n    \n    if observation.step != 0:\n        op_actions.append(observation.lastOpponentAction)\n#         if observation.step > PRED_USE_STEP_THRES + 1:\n#             if op_actions[-1] == pr_actions[-1]:\n#                 cont_wins += 1\n#             else:\n#                 cont_wins = 0\n                \n    \n    if observation.step > USE_BACK:\n        pred_proba, pred = predict(my_actions, op_actions)\n        pr_actions.append(pred)\n        if observation.step > PRED_USE_STEP_THRES:\n            CONF_A = max(pred_proba) > PRED_USE_SCORE_THRES\n#             CONF_B = cont_wins > CONT_WINS_THRES\n            CONF_B = sum([op==l for op, l in zip(op_actions[-CHECK_PAST_PERIOD:], pr_actions[-CHECK_PAST_PERIOD-1:-1])])\/CHECK_PAST_PERIOD > CHECK_WINS_RATE_THRES\n            if CONF_A or CONF_B:\n                my_action = pred\n                my_action = (my_action + 1) % 3\n\n            else:\n                my_action = randomize()\n        else:\n            my_action = randomize()\n    else:    \n        my_action = randomize()\n    \n    my_actions.append(my_action)\n    \n    return my_action","50a9bde6":"import os\nfrom tqdm.notebook import tqdm\nimport pandas as pd\nfrom kaggle_environments import make, evaluate\n\n!pip install -q -U kaggle_environments","27cd167b":"def simulate_score(player1, player2, steps):\n    return evaluate(\n        \"rps\", \n        [player1, player2], \n        configuration={\"episodeSteps\": steps}\n    )","1af3e59b":"opponent_dict = dict()\nopponent_dict[\"black\"] = os.listdir(\"..\/input\/rps-dojo\/black_belt\")\nopponent_dict[\"blue\"] = os.listdir(\"..\/input\/rps-dojo\/blue_belt\")\nopponent_dict[\"white\"] = os.listdir(\"..\/input\/rps-dojo\/white_belt\")\n\nresults = []\nfor types, opponents in tqdm(opponent_dict.items()):\n    path = f\"..\/input\/rps-dojo\/{types}_belt\"\n    for opponent in tqdm(opponents):\n        result = simulate_score(\"predict_only_when_confirmation.py\", os.path.join(path, opponent), 1000)\n        result = [opponent, result[0], types]\n        results.append(result)\nresults_df = pd.DataFrame(results, columns=[\"opponent\", \"score\", \"belt\"])","82258c28":"import matplotlib.pyplot as plt\n%matplotlib inline\nfig, axes = plt.subplots(1, 3, figsize=(20, 5))\nresults_df[\"ps\"] = results_df[\"score\"].apply(lambda x: x[0])\n\nresults_df[results_df[\"belt\"] == \"black\"].set_index(\"opponent\")[\"ps\"].plot(kind=\"bar\", color=\"black\", ax=axes[0])\nresults_df[results_df[\"belt\"] == \"blue\"].set_index(\"opponent\")[\"ps\"].plot(kind=\"bar\", color=\"blue\", ax=axes[1])\nresults_df[results_df[\"belt\"] == \"white\"].set_index(\"opponent\")[\"ps\"].plot(kind=\"bar\", color=\"grey\", ax=axes[2])\naxes[0].set_ylim(-100, 100)\naxes[1].set_ylim(-100, 100)\naxes[2].set_ylim(-100, 100)\naxes[0].hlines(20, -1, 10, color=\"red\", linestyle=\"dashdot\")\naxes[0].hlines(-20, -1, 10, color=\"blue\", linestyle=\"dashdot\")\naxes[1].hlines(20, -1, 7, color=\"red\", linestyle=\"dashdot\")\naxes[1].hlines(-20, -1, 7, color=\"blue\", linestyle=\"dashdot\")\naxes[2].hlines(20, -1, 10, color=\"red\", linestyle=\"dashdot\")\naxes[2].hlines(-20, -1, 10, color=\"blue\", linestyle=\"dashdot\")\naxes[0].hlines(0, -1, 10, color=\"black\")\naxes[1].hlines(0, -1, 7, color=\"black\")\naxes[2].hlines(0, -1, 10, color=\"black\")\naxes[0].set_title(\"black belt\")\naxes[1].set_title(\"blue belt\")\naxes[2].set_title(\"white belt\")\nplt.suptitle(\"1000 battle point(Cut Over 100 and Under -100)\")","1f2b5d2e":"My strategy is Not Losing Strategy.\n* Trust the prediction when \n    * the prediction score is very better(over threshold)\n    * consecutive wins(over threshold)\n    * won the last few(exp:100) games at a high rate\n* Random when it's worth it","95fca287":"# My Strategy","c62207d6":"# Test","2fa0c903":"I used the agent list from [RPS Dojo](https:\/\/www.kaggle.com\/chankhavu\/rps-dojo) is a very useful notebook"}}