{"cell_type":{"b3e30d2f":"code","55101716":"code","fc54a0a6":"code","94bf2ad0":"code","fb885e5d":"code","980c7b1d":"code","66b60005":"code","b3c22eba":"code","1698095f":"code","c11d4a60":"code","26bfe177":"code","f7c94799":"code","d7234640":"code","04f41a21":"code","1d726378":"markdown","73ddfd7a":"markdown","0c924c53":"markdown","2f5a3d28":"markdown","28c9e5e5":"markdown","1e1dd261":"markdown","8ca45222":"markdown","3705c98e":"markdown"},"source":{"b3e30d2f":"import numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport sys\nimport csv\nimport os\nprint(os.listdir(\"..\/input\"))","55101716":"np.random.seed()","fc54a0a6":"def mean_std(x, mean, std):\n    \"\"\"normalizing data for preprocessing.\"\"\"\n    return float((x-mean)\/std)","94bf2ad0":"def mean_std_transform(x_train, X_test):\n    \"\"\"Mean std Data Transformation.\"\"\"\n    train_t = np.transpose(x_train)\n    test_t = np.transpose(X_test)\n\n    train = []\n    train_c = []\n    test = []\n    test_c = []\n    means = []\n    stds = []\n\n    for t in train_t:\n        mean, std = np.mean(t), np.std(t)\n        means.append(mean)\n        stds.append(std)\n        for x in t:\n            train_c.append(mean_std(x, mean, std))\n        train.append(train_c)\n        train_c = []\n\n    for i in range(len(test_t)):\n\n        for j in range(len(test_t[i])):\n            test_c.append(mean_std(test_t[i][j], means[i], stds[i]))\n        test.append(test_c)\n        test_c = []\n\n    return np.transpose(train), np.transpose(test)","fb885e5d":"path = '..\/input\/'\n    \nprint(\"model extract train init\")\ndf_train = pd.read_csv(path + 'train.csv')\ndf_train['ID_code'] = df_train['ID_code'].str.replace('train_', '', regex=True)\n\ny = (np.array(df_train['target'].values.tolist()).astype(np.int)).copy()\n\ndf_train = df_train.drop(columns=['target'])\nX = (np.array(df_train.values.tolist()).astype(np.float)).copy()\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nprint(\"model extract train end\")\n\nprint(\"model mean_std_transform init\")\nX_train, X_test = mean_std_transform(X_train, X_test)\nprint(\"model mean_std_transform end\")","980c7b1d":"print(\"model extract test init\")\ndf_test_final = pd.read_csv(path + 'test.csv')\ndf_test_final['ID_code'] = df_test_final['ID_code'].str.replace('test_', '', regex=True)\n\nX_test_final = np.array(df_test_final.values.tolist()).astype(np.float)\nX_test_final, a = mean_std_transform(X_test_final, [X_test])\nprint(\"model extract train end\")","66b60005":"# create dataset for lightgbm\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_eval = lgb.Dataset(X_test, y_test, reference=lgb_train)","b3c22eba":"# specify your configurations as a dict\nparams = {\n    'bagging_freq': 5,\n    'bagging_fraction': 0.38,\n    'boost_from_average':'false',\n    'boost': 'gbdt',\n    'feature_fraction': 0.045,\n    'learning_rate': 0.01,\n    'max_depth': -1,  \n    'metric':'auc',\n    'min_data_in_leaf': 80,\n    'min_sum_hessian_in_leaf': 10.0,\n    'num_leaves': 13,\n    'num_threads': 8,\n    'tree_learner': 'serial',\n    'objective': 'binary', \n    'verbosity': 1\n}","1698095f":"print('Starting training...')\n# train\ngbm = lgb.train(\n    params,\n    lgb_train,\n    num_boost_round=2000,\n    valid_sets=lgb_eval,\n    verbose_eval=5000,\n    early_stopping_rounds=1000\n)","c11d4a60":"print('Saving model...')\n# save model to file\ngbm.save_model('model.txt')","26bfe177":"print('Starting predicting...')\n# predict\ny_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration)\n# eval\nprint('The rmse of prediction is:', mean_squared_error(y_test, y_pred) ** 0.5)","f7c94799":"print('Starting final predicting...')\n# predict\nfinal_predict = gbm.predict(X_test_final, num_iteration=gbm.best_iteration)\ny = [float((x)) for x in final_predict]\ndf = pd.DataFrame({'ID_code': ['test_' + str(x) for x in range(200000)], 'target': y})","d7234640":"print('y mean: {}\\ny std: {}'.format(np.mean(y), np.std(y)))","04f41a21":"df.to_csv('submission.csv', index=False)","1d726378":"## Creating the submission csv","73ddfd7a":"## Importing libs","0c924c53":"## Predict","2f5a3d28":"# Santander Customer Transaction LightGBM\nThis is a study of LightGBM using the Santander Customer Transaction Public Dataset.\n\n* https:\/\/github.com\/microsoft\/LightGBM","28c9e5e5":"## Functions Definition\n\nFunctions to normalize (std) dataset.","1e1dd261":"## Spliting dataseg in train (80%) and test (20%)","8ca45222":"## Tranning job","3705c98e":"### For lightgbm we must create lightgbm dataset"}}