{"cell_type":{"92bacd59":"code","87f2896c":"code","f72f4aa7":"code","a936572c":"code","8fef2c0d":"code","5490d1a3":"code","e00d039e":"code","057d0650":"code","9b2a3bf6":"code","6b2f0b02":"code","a76fac5a":"code","c9d8f5ff":"code","a7905e46":"code","0a0114e8":"code","cfa91388":"code","2b72701f":"code","9935c5ca":"code","560d9515":"code","c223260e":"code","21164807":"code","69a8a51e":"code","78de0906":"code","887b568c":"code","d931bf39":"code","1fe74349":"code","55aa4ef0":"code","e728a68b":"code","224c8699":"code","b08f4fea":"code","28a856fa":"code","9e6e5a6e":"code","033b3e78":"code","0f94a600":"code","eae78354":"code","766c16bd":"code","ef025dd2":"markdown","2627a228":"markdown","24280623":"markdown","ea7724b3":"markdown","206c329e":"markdown","a28bba76":"markdown","b0513025":"markdown"},"source":{"92bacd59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87f2896c":"!pip install pmdarima","f72f4aa7":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pmdarima import auto_arima\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tools.eval_measures import rmse","a936572c":"#load the data\ndf = pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv')\ndf.head()","8fef2c0d":"df.info()","5490d1a3":"df.Month = pd.to_datetime(df.Month)\ndf = df.set_index(\"Month\")\ndf.head()","e00d039e":"df.index.freq = 'MS'\nax = df['#Passengers'].plot(figsize = (16,5), title = \"Monthly Passengers\")\nax.set(xlabel='Dates', ylabel='Total Passengers');","057d0650":"a = seasonal_decompose(df[\"#Passengers\"], model = \"add\")\na.plot();","9b2a3bf6":"import matplotlib.pyplot as plt\nplt.figure(figsize = (16,7))\na.seasonal.plot();","6b2f0b02":"auto_arima(df['#Passengers'], seasonal=True, m=12,\n           max_p=7, max_d=5, max_q=7,\n           max_P=4, max_D=4, max_Q=4).summary()","a76fac5a":"train_data = df[:len(df)-12]\ntest_data = df[len(df)-12:]\narima_model = SARIMAX(train_data['#Passengers'], order = (3,1,3), seasonal_order = (1,1,1,12))\narima_result = arima_model.fit()\narima_result.summary()","c9d8f5ff":"arima_pred = arima_result.predict(start = len(train_data), end = len(df)-1, typ=\"levels\").rename(\"ARIMA Predictions\")\narima_pred","a7905e46":"test_data['#Passengers'].plot(figsize = (16,5), legend=True)\narima_pred.plot(legend = True);","0a0114e8":"arima_rmse_error = rmse(test_data['#Passengers'], arima_pred)\narima_mse_error = arima_rmse_error**2\nmean_value = df['#Passengers'].mean()\n\nprint(f'MSE Error: {arima_mse_error}\\nRMSE Error: {arima_rmse_error}\\nMean: {mean_value}')","cfa91388":"test_data['ARIMA_Predictions'] = arima_pred","2b72701f":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)\nscaled_test_data = scaler.transform(test_data)","9935c5ca":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM","560d9515":"from keras.preprocessing.sequence import TimeseriesGenerator\n\nn_input = 12\nn_features= 1\ngenerator = TimeseriesGenerator(scaled_train_data, scaled_train_data, length=n_input, batch_size=1)","c223260e":"lstm_model = Sequential()\nlstm_model.add(LSTM(200, activation='relu', input_shape=(n_input, n_features)))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer='adam', loss='mse')\n\nlstm_model.summary()","21164807":"lstm_model.fit_generator(generator,epochs=20)","69a8a51e":"losses_lstm = lstm_model.history.history['loss']\nplt.figure(figsize=(12,4))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.xticks(np.arange(0,21,1))\nplt.plot(range(len(losses_lstm)),losses_lstm);","78de0906":"lstm_predictions_scaled = list()\n\nbatch = scaled_train_data[-n_input:]\ncurrent_batch = batch.reshape((1, n_input, n_features))\n\nfor i in range(len(test_data)):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    lstm_predictions_scaled.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","887b568c":"lstm_predictions_scaled","d931bf39":"lstm_predictions = scaler.inverse_transform(lstm_predictions_scaled)\nlstm_predictions","1fe74349":"test_data['LSTM_Predictions'] = lstm_predictions\ntest_data","55aa4ef0":"test_data['#Passengers'].plot(figsize = (16,5), legend=True)\ntest_data['LSTM_Predictions'].plot(legend = True);","e728a68b":"lstm_rmse_error = rmse(test_data['#Passengers'], test_data[\"LSTM_Predictions\"])\nlstm_mse_error = lstm_rmse_error**2\nmean_value = df['#Passengers'].mean()\n\nprint(f'MSE Error: {lstm_mse_error}\\nRMSE Error: {lstm_rmse_error}\\nMean: {mean_value}')","224c8699":"df.info()","b08f4fea":"df_pr = df.copy()\ndf_pr = df.reset_index()\ndf_pr.columns = ['ds','y'] # To use prophet column names should be like that\ntrain_data_pr = df_pr.iloc[:len(df)-12]\ntest_data_pr = df_pr.iloc[len(df)-12:]\nfrom fbprophet import Prophet\nm = Prophet()\nm.fit(train_data_pr)\nfuture = m.make_future_dataframe(periods=12,freq='MS')\nprophet_pred = m.predict(future)\nprophet_pred.tail()","28a856fa":"prophet_pred = pd.DataFrame({\"Date\" : prophet_pred[-12:]['ds'], \"Pred\" : prophet_pred[-12:][\"yhat\"]})\nprophet_pred = prophet_pred.set_index(\"Date\")\nprophet_pred.index.freq = \"MS\"\nprophet_pred","9e6e5a6e":"test_data[\"Prophet_Predictions\"] = prophet_pred['Pred'].values\nimport seaborn as sns\nplt.figure(figsize=(16,5))\nax = sns.lineplot(x= test_data.index, y=test_data[\"#Passengers\"])\nsns.lineplot(x=test_data.index, y = test_data[\"Prophet_Predictions\"]);","033b3e78":"prophet_rmse_error = rmse(test_data['#Passengers'], test_data[\"Prophet_Predictions\"])\nprophet_mse_error = prophet_rmse_error**2\nmean_value = df['#Passengers'].mean()\n\nprint(f'MSE Error: {prophet_mse_error}\\nRMSE Error: {prophet_rmse_error}\\nMean: {mean_value}')","0f94a600":"rmse_errors = [arima_rmse_error, lstm_rmse_error, prophet_rmse_error]\nmse_errors = [arima_mse_error, lstm_mse_error, prophet_mse_error]\nerrors = pd.DataFrame({\"Models\" : [\"ARIMA\", \"LSTM\", \"Prophet\"],\"RMSE Errors\" : rmse_errors, \"MSE Errors\" : mse_errors})\nplt.figure(figsize=(16,9))\nplt.plot_date(test_data.index, test_data[\"#Passengers\"], linestyle=\"-\",label='Monthly Passengers')\nplt.plot_date(test_data.index, test_data[\"ARIMA_Predictions\"], linestyle=\"-.\",label='ARIMA_Predictions')\nplt.plot_date(test_data.index, test_data[\"LSTM_Predictions\"], linestyle=\"--\",label='LSTM_Predictions')\nplt.plot_date(test_data.index, test_data[\"Prophet_Predictions\"], linestyle=\":\",label='Prophet_Predictions')\nplt.legend(loc=\"best\")\nplt.show()","eae78354":"print(f\"Mean: {test_data['#Passengers'].mean()}\")\nerrors","766c16bd":"test_data","ef025dd2":"Let\u2019s split the data into train and test set","2627a228":"First, we\u2019ll scale our train and test data with MinMaxScaler","24280623":"We need to create a Time Series Generator object before building LSTM model.","ea7724b3":"## LSTM Forecast","206c329e":"## ARIMA Forecast","a28bba76":"## Prophet Forecast","b0513025":"ARIMA is our best model. ARIMA, LSTM, and Prophet are easy to build the models and predict air pasengers. But, we need to improve our models through hyperparameter tuning."}}