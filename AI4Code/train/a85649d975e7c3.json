{"cell_type":{"e0785449":"code","d5d7e061":"code","0b808927":"code","4d3bf186":"code","2ef73ebb":"code","2f6d2f34":"code","34225f0c":"code","cac1d90b":"code","6e7a7e35":"code","b206cb9f":"code","f887fd3b":"code","02f1dfdf":"code","8a22194e":"code","c9b09e32":"code","a5bf244f":"code","74d17591":"code","ef7a9f3d":"code","aca06e99":"code","951dd930":"code","e61ed2a7":"code","c73c19fe":"code","d1f682a8":"code","ff05abe4":"code","de30131a":"code","87dba313":"code","652c14a7":"code","872e5603":"code","17dcd1ba":"code","a212136f":"code","59e470c8":"code","87da9a5f":"code","16521820":"code","d3a052f4":"code","4ebd5efa":"code","f0b1043d":"code","5e429fce":"code","ee27b47a":"code","40d060ff":"code","4873924e":"code","07d5d82a":"code","ec5a5fc1":"code","29381e29":"code","bd5868f3":"code","5bf269d3":"code","9af656b3":"code","c51d3e5f":"code","c72d966b":"code","990bd2e7":"code","0d112d77":"code","f0364e72":"code","d225ec95":"code","4a5bb5e7":"code","0f0ba609":"code","055052ea":"code","343829ad":"code","89fe2d34":"code","a55aaf62":"code","e7893e6c":"code","2a12ac88":"code","b54876bb":"code","ec647733":"code","96242300":"code","db58a454":"code","48e5d143":"code","85f45fc0":"code","e9ed9ee5":"code","588d41e3":"markdown","a3d79d3e":"markdown","e3fa0551":"markdown","31698f47":"markdown","6e87f22b":"markdown","279bcb25":"markdown","21575b35":"markdown","a5f0da7e":"markdown","1674739b":"markdown","90899dd9":"markdown","1499a7e0":"markdown","2cf374f9":"markdown","4c6bafcc":"markdown","fa5103b0":"markdown","ec8b0b44":"markdown","11575e8a":"markdown","c0c9d481":"markdown","f2c155ef":"markdown","72934ef5":"markdown","8ac6a02c":"markdown","fc6c3b36":"markdown","739f18a6":"markdown","acfcb70f":"markdown","d06022c0":"markdown","e79e80f0":"markdown","28706248":"markdown"},"source":{"e0785449":"# from google.colab import drive\n# drive.mount('\/content\/drive')","d5d7e061":"import os\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt","0b808927":"# os.chdir('drive\/My Drive')","4d3bf186":"!ls ..\/","2ef73ebb":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","2f6d2f34":"df_train","34225f0c":"df_train['Cabin'][:].tolist()","cac1d90b":"df_train['Cabin'].isnull().sum()","6e7a7e35":"from string import digits\nimport math\n\ndef get_cabin_class(s):\n\n  if isinstance(s, str):\n    remove_digits = str.maketrans('', '', digits)\n    res = s.translate(remove_digits)\n    res = \"\".join(set(res))\n  else:\n    res = ''\n  return res","b206cb9f":"df_train['cabin_class'] = df_train['Cabin'].apply(get_cabin_class)","f887fd3b":"df_test['cabin_class'] = df_test['Cabin'].apply(get_cabin_class)","02f1dfdf":"df_train","8a22194e":"df_train.columns","c9b09e32":"df_test.columns","a5bf244f":"import seaborn as sns\n\ncorrMatrix = df_train.corr()\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","74d17591":"df_train['Pclass'].value_counts()","ef7a9f3d":"df_train['Family'] = df_train['SibSp'] + df_train['Parch']","aca06e99":"df_test['Family'] = df_test['SibSp'] + df_test['Parch']","951dd930":"df_train","e61ed2a7":"x_train = df_train[['Pclass', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Fare', 'Family']]","c73c19fe":"x_test = df_test[['Pclass', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Fare', 'Family']]","d1f682a8":"y_train = df_train[['Survived']]","ff05abe4":"x_train['Age'].fillna(-1, inplace=True)","de30131a":"x_test['Age'].fillna(-1, inplace=True)","87dba313":"x_test['Fare'].fillna(x_test['Fare'].mean(), inplace=True)","652c14a7":"x_train.isna().sum()","872e5603":"x_test.isna().sum()","17dcd1ba":"x_train","a212136f":"x_train = pd.get_dummies(x_train, columns=['Sex'])","59e470c8":"x_test = pd.get_dummies(x_test, columns=['Sex'])","87da9a5f":"x_train","16521820":"x_train['Age'] = x_train['Age'].astype('int8')","d3a052f4":"x_test['Age'] = x_test['Age'].astype('int8')","4ebd5efa":"x_train","f0b1043d":"x_test","5e429fce":"x_train.shape","ee27b47a":"y_train.shape","40d060ff":"y_train = y_train.squeeze()","4873924e":"x_train","07d5d82a":"bins= [0, 13, 20, 40 , 60, 110]\n\nlabels = ['Kid','Teen','Young Adult', 'Senior Adult', 'Old']\n\nx_train['Age'] = pd.cut(x_train['Age'], bins=bins, labels=labels, right=False)\nx_test['Age'] = pd.cut(x_test['Age'], bins=bins, labels=labels, right=False)","ec5a5fc1":"x_train","29381e29":"x_train['Age'].value_counts()","bd5868f3":"x_train['Age'].isnull().sum()","5bf269d3":"x_train['Family'].value_counts()","9af656b3":"x_train['Pclass'].value_counts()","c51d3e5f":"for i in x_train.index:\n  if not isinstance(x_train['Age'][i], str):\n    if x_train['Family'][i] > 5 or x_train['Pclass'][i] == 1:\n      x_train['Age'][i] = 'Senior Adult'\n      print(i)\n    else:\n      # pass\n      x_train['Age'][i] = 'Young Adult'","c72d966b":"x_train.isnull().sum()","990bd2e7":"x_train = pd.get_dummies(x_train, columns=['Age'])","0d112d77":"x_train = pd.get_dummies(x_train, columns=['Pclass'])","f0364e72":"x_test = pd.get_dummies(x_test, columns=['Age'])","d225ec95":"x_test = pd.get_dummies(x_test, columns=['Pclass'])","4a5bb5e7":"x_train","0f0ba609":"x_test","055052ea":"from sklearn.preprocessing import MinMaxScaler, StandardScaler\nscaler = StandardScaler()\n\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.fit_transform(x_test)","343829ad":"parameters = {'C':[1, 10, 100],\n              'gamma':[0.1, 0.01, 0.001],\n              'kernel': ['linear', 'poly']\n            }","89fe2d34":"#Import svm model\nfrom sklearn import svm\n\nfrom sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\n\n#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\n\n#Create a Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n\nclf2 = DecisionTreeClassifier()\n\n#Create a Gaussian Classifier\nclf3 = RandomForestClassifier(n_estimators=100)\n\n# clf = VotingClassifier([('c_svc', clf1), ('dt', clf2), ('rf', clf3)], voting='hard' )","a55aaf62":"from sklearn.model_selection import GridSearchCV","e7893e6c":"grid = GridSearchCV(estimator=clf, param_grid=parameters, cv = 5, n_jobs=-1)","2a12ac88":"from sklearn.model_selection import RandomizedSearchCV","b54876bb":"random = RandomizedSearchCV(estimator=clf, param_distributions=parameters, cv = 5, n_jobs=-1)","ec647733":"#Train the model using the training sets\n\ngrid_result = grid.fit(x_train, y_train)\n\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n\n\n#Predict the response for test dataset\ny_pred = grid.predict(x_test)","96242300":"y_pred","db58a454":"y_pred = pd.DataFrame(y_pred, columns=['Survived'])","48e5d143":"submission = pd.concat([pd.DataFrame(df_test['PassengerId'], columns=['PassengerId']), y_pred], axis=1)","85f45fc0":"submission","e9ed9ee5":"submission.to_csv('submission.csv', index=False)","588d41e3":"Based on the observation from heatmap, define rules for missing age values\n\n\n\n---\n\n\nsenior adult - family > 5 and pclass 1\n\nyoung adult - family <= 5 and pclass 2 or 3","a3d79d3e":"Import and define classification models","e3fa0551":"Define Hyperparameter tuning grid for SVC","31698f47":"Select Suitable Columns For Training","6e87f22b":"Necessary Imports","279bcb25":"Change the shape to (891,)","21575b35":"Convert Cabin to Cabin Class","a5f0da7e":"Cabin Values","1674739b":"Look at the predictions","90899dd9":"Convert Age and Pclass to categories","1499a7e0":"Visualize Correlation Matrix","2cf374f9":"\nMount Google Drive","4c6bafcc":"Convert Age into Age categories","fa5103b0":"Fill Missing Age Values with -1","ec8b0b44":"Check again for missing values","11575e8a":"Read CSVs","c0c9d481":"Conver age to int","f2c155ef":"Family Count","72934ef5":"Define Grid Search and Randomized Search","8ac6a02c":"Fill missing fare values with the mean fare","fc6c3b36":"Train and Tune the classifier","739f18a6":"Convert the Sex column into one hot","acfcb70f":"Convert the predictions to the submission format","d06022c0":"Do standard scaling","e79e80f0":"Change Directory","28706248":"**Kaggle\/Colab Notebook for Titanic Survival Classifical Challenge**\n\n\n**Scikit-Learn**\n\n**0.79% Accuracy** \n\n**Top 15 %**\n"}}