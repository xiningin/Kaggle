{"cell_type":{"bd72bccf":"code","cd771c8a":"code","eaa6f882":"code","acc0d7a3":"code","ebae055a":"code","2208c24f":"code","0037eeb7":"code","9bc4e108":"code","c82d16a1":"code","ef3c6a2f":"code","6787ab53":"code","9996a029":"code","663988c9":"code","fb7ee65a":"code","5fd64da0":"code","ecc053a5":"code","a36db340":"code","1226cab3":"code","1a9458ba":"code","85ddafa0":"code","530936b9":"code","daff97d0":"code","11973377":"code","2d906fd6":"code","fe3decf2":"code","d30beb2a":"code","639dba93":"code","7643cf32":"code","a50b3b7f":"code","806cb0da":"code","30ee06ab":"code","5e5463aa":"code","31f0f03b":"code","e4e5d372":"code","6fa3104b":"code","e8954f29":"code","76046ad0":"code","b0cf9f9a":"code","f619d6d4":"code","def19d2a":"code","4248fae3":"code","139d1e10":"code","779263b8":"code","9aff3bf7":"code","a099c8ea":"code","cdbc558e":"code","0ef30d1f":"code","e5b6db7d":"code","a5351899":"code","2e5d5a2e":"code","ddf92960":"code","1dcb678b":"code","e1dbaa88":"code","8827ec96":"code","ccc41b4a":"code","983cb5cf":"code","de5a73e7":"code","819d64f0":"code","3dd0f4aa":"code","1209ad49":"code","47360196":"code","718a9443":"code","842d24e0":"code","4ef936d2":"code","6a7e2576":"code","6718e192":"code","8b109d58":"code","8292f582":"code","a334f5c5":"code","0e4aa55f":"code","596df3ba":"code","f191d2b4":"code","270e2c90":"code","cbf8b547":"code","da0de5eb":"code","64c4e9c0":"code","899b3d31":"code","673feb05":"markdown","2788f5b9":"markdown","7baaefdf":"markdown","d8da7558":"markdown","713ed282":"markdown"},"source":{"bd72bccf":"import os\nimport pandas as pd\nimport numpy as np\nfrom pandas import Series, DataFrame\nimport seaborn as sns\nimport matplotlib.pyplot as plt","cd771c8a":"dat=pd.read_csv(\"..\/input\/titanicdataset-traincsv\/train.csv\")","eaa6f882":"dat.head()","acc0d7a3":"dat['Sex']=[1 if i ==\"male\" else 0 for i in dat[\"Sex\"]]","ebae055a":"dat.isnull().sum()","2208c24f":"dat.info()","0037eeb7":"dat['Embarked'].value_counts()","9bc4e108":"dat[dat[\"Embarked\"].isnull()]","c82d16a1":"dat.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","ef3c6a2f":"#Since Embarked has Fare closer to median of C\ndat[\"Embarked\"]=dat[\"Embarked\"].fillna(\"C\")","6787ab53":"dat.shape","9996a029":"plt.style.use(\"seaborn-whitegrid\")\nsns.factorplot(x = \"Sex\",y=\"Age\",data = dat, kind=\"box\")\nplt.show()","663988c9":"dat['Age'] = dat['Age'].fillna(dat.groupby('Pclass')['Age'].transform('median'))","fb7ee65a":"dat.groupby('Pclass')['Age'].agg(np.sum)\ndat.groupby('Pclass')['Age'].transform('median')","5fd64da0":"dat[\"Age\"].describe()","ecc053a5":"dat.head()","a36db340":"import re\ndat['Title'] = dat['Name'].map(lambda x: re.compile(\"([A-Za-z]+)\\.\").search(x).group())","1226cab3":"dat[\"Title\"].unique()","1a9458ba":"dat['Title'] = dat['Title'].replace(['Capt.', 'Col.','Don.', 'Dr.', 'Major.', 'Rev.', 'Jonkheer.', 'Dona.'], 'Rare.')\ndat['Title'] = dat['Title'].replace(['Countess.', 'Lady.', 'Sir.'], 'Royal.')\ndat['Title'] = dat['Title'].replace('Mlle.', 'Miss.')\ndat['Title'] = dat['Title'].replace('Ms.', 'Miss.')\ndat['Title'] = dat['Title'].replace('Mme.', 'Mrs.')","85ddafa0":"dat.groupby([\"Title\",\"Survived\"])[\"Survived\"].agg({np.size})","530936b9":"dat[\"Title\"].unique().tolist()","daff97d0":"#Title Mapping\ntitle_mapping = {\"Mr.\": 1, \"Miss.\": 2, \"Mrs.\": 3, \"Master.\": 4, \"Royal.\": 5, \"Rare.\": 6}","11973377":"dat[\"Title\"]=dat[\"Title\"].map(title_mapping)","2d906fd6":"dat['fam']=dat['SibSp']+dat[\"Parch\"]+1","fe3decf2":"dat=dat.drop([\"SibSp\",\"Parch\",\"PassengerId\",\"Name\",\"Cabin\",\"Ticket\"], axis=1)","d30beb2a":"dat.head()","639dba93":"X=dat.drop([\"Survived\",], axis=1)","7643cf32":"y=dat[\"Survived\"]","a50b3b7f":"X.head()","806cb0da":"y.head()","30ee06ab":"X=pd.get_dummies(X)","5e5463aa":"X.head()","31f0f03b":"X.info()","e4e5d372":"#The following function compares train dataset columns with 'DV' column\ndef bar_chart(feature):\n    survived = dat[dat['Survived']==1][feature].value_counts()\n    dead = dat[dat['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","6fa3104b":"bar_chart('Sex')","e8954f29":"bar_chart('Pclass')","76046ad0":"dat['Age'].hist(bins=40,color='salmon')\nplt.title(\"AGE\",size=20)","b0cf9f9a":"bar_chart('Title')","f619d6d4":"bar_chart('fam')","def19d2a":"bar_chart('Embarked')","4248fae3":"import sklearn.model_selection as model_selection\nX_train,X_test, y_train, y_test=model_selection.train_test_split(X,y, test_size=0.2, random_state=200)","139d1e10":"#Accuracy score without hyperparameter tuning\nimport sklearn.metrics as metrics\ndef fit_evaluate_model(model, X_train, y_train, X_test, y_test):\n    model.fit(X_train, y_train)\n    y_predicted = model.predict(X_test)\n    return metrics.accuracy_score(y_test, y_predicted)","779263b8":"import sklearn.tree as tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ndt_classifier= tree.DecisionTreeClassifier()\nrf_classifier = RandomForestClassifier()\ngb_classifier = GradientBoostingClassifier()\n\ndt_accuracy= fit_evaluate_model(dt_classifier, X_train, y_train, X_test, y_test)\nrf_accuracy = fit_evaluate_model(rf_classifier, X_train, y_train, X_test, y_test)\ngb_accuracy = fit_evaluate_model(gb_classifier, X_train, y_train, X_test, y_test)","9aff3bf7":"print(\"Decision Tree : \",dt_accuracy)\nprint(\"Random Forest : \",rf_accuracy)\nprint(\"GradientBoosting : \",gb_accuracy)","a099c8ea":"#Now accuracy score with hyperparameter tuning\n","cdbc558e":"clf=tree.DecisionTreeClassifier(max_depth=3,random_state=200)\nclf.fit(X_train,y_train)","0ef30d1f":"clf.score(X_test,y_test)","e5b6db7d":"from sklearn.model_selection import GridSearchCV\nmod=GridSearchCV(clf,param_grid={'max_depth':[2,3,4,5,6]})\nmod.fit(X_train,y_train)","a5351899":"mod.best_estimator_","2e5d5a2e":"mod.best_params_","ddf92960":"#Finalizing max_depth as 3\nclf=tree.DecisionTreeClassifier(max_depth=3,random_state=200)\nclf.fit(X_train,y_train)","1dcb678b":"# Confusion matrix ( ACTUAL LABLES, PREDICTED LABLES)\nmetrics.confusion_matrix( y_test, clf.predict(X_test))","e1dbaa88":"mod1=metrics.accuracy_score(y_test, clf.predict(X_test))","8827ec96":"mod1","ccc41b4a":"#Random Forest\nrf=RandomForestClassifier(n_estimators=80,oob_score=True,n_jobs=-1,random_state=400)\nrf.fit(X_train,y_train)","983cb5cf":"rf.oob_score_","de5a73e7":"#Getting the best n_estimators\nfor w in range(10,150,10):\n    rf=RandomForestClassifier(n_estimators=w,oob_score=True,n_jobs=-1,random_state=400)\n    rf.fit(X_train,y_train)\n    oob=rf.oob_score_\n    print('For n_estimators = '+str(w))\n    print('OOB score is '+str(oob))\n    print('************************')","819d64f0":"#Finalizing n_estimator as 70\nrf=RandomForestClassifier(n_estimators=70,oob_score=True,n_jobs=-1,random_state=400)\nrf.fit(X_train,y_train)","3dd0f4aa":"rf.oob_score_","1209ad49":"rf.feature_importances_","47360196":"imp_feat=pd.Series(rf.feature_importances_,index=X.columns.tolist())\nimp_feat.sort_values(ascending=False)","718a9443":"mod2=metrics.accuracy_score(y_test, rf.predict(X_test))","842d24e0":"mod2","4ef936d2":"#Gradient Boosting\ngb=GradientBoostingClassifier(n_estimators=80,random_state=400, max_depth=2)\ngb.fit(X_train,y_train)","6a7e2576":"#For n_estimator\nfrom sklearn.model_selection import GridSearchCV\nmod=GridSearchCV(gb,param_grid={'n_estimators':[20,40,60,80,100,120,140,160,180,200]})\nmod.fit(X_train,y_train)","6718e192":"mod.best_estimator_","8b109d58":"mod.best_params_","8292f582":"gb=GradientBoostingClassifier(n_estimators=140,random_state=400, max_depth=2)\ngb.fit(X_train,y_train)","a334f5c5":"gb.feature_importances_","0e4aa55f":"feature_imp=pd.Series(gb.feature_importances_,index=X.columns)\nfeature_imp.sort_values(ascending=False)","596df3ba":"#For depth\nfrom sklearn.model_selection import GridSearchCV\nmod=GridSearchCV(clf,param_grid={'max_depth':[2,3,4,5,6,7,8]})\nmod.fit(X_train,y_train)","f191d2b4":"mod.best_estimator_","270e2c90":"#Finalizing max_depth=2 and n_estimators=140\ngb=GradientBoostingClassifier(n_estimators=140,random_state=400, max_depth=2)\ngb.fit(X_train,y_train)","cbf8b547":"mod3=metrics.accuracy_score(y_test,clf.predict(X_test))","da0de5eb":"mod3","64c4e9c0":"print(\"Decision Tree: \",mod1)\nprint(\"Random Forest: \",mod2)\nprint(\"Gradient Boosting: \",mod3)","899b3d31":"#Hence here, Decision Tree is most accurate for predecting for this dataset","673feb05":"### Dividing the dataset into X and Y","2788f5b9":"### EDA","7baaefdf":"### Missing value treatment","d8da7558":"#### Creating training and testing Model","713ed282":"#### Decision Tree"}}