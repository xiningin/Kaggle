{"cell_type":{"bfb3f3aa":"code","a7ad5d89":"code","8e5a949a":"code","a29adb30":"code","3bf2145f":"code","7147040e":"code","ea6b7a29":"code","8edec21e":"code","efe75176":"code","0e4bb352":"code","26c3419c":"code","bba1b671":"code","7f2fcc61":"code","c5154932":"code","b39e3a0c":"code","831a98ac":"code","b6ac8240":"code","978cfdd7":"code","68ea485d":"markdown"},"source":{"bfb3f3aa":"from tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\nfrom tensorflow.keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.optimizers import Adam, SGD, RMSprop\n\nimport tensorflow as tf\n\nimport os\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","a7ad5d89":"DATASET_DIR = \"..\/input\/covid-19-x-ray-10000-images\/dataset\"\n\n","8e5a949a":"os.listdir(DATASET_DIR)\n","a29adb30":"import glob\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\n\nnormal_images = []\nfor img_path in glob.glob(DATASET_DIR + '\/normal\/*'):\n    normal_images.append(mpimg.imread(img_path))\n\nfig = plt.figure()\nfig.suptitle('normal')\nplt.imshow(normal_images[0], cmap='gray') \n\ncovid_images = []\nfor img_path in glob.glob(DATASET_DIR + '\/covid\/*'):\n    covid_images.append(mpimg.imread(img_path))\n\nfig = plt.figure()\nfig.suptitle('covid')\nplt.imshow(covid_images[0], cmap='gray') ","3bf2145f":"print(len(normal_images))\nprint(len(covid_images))","7147040e":"IMG_W = 150\nIMG_H = 150\nCHANNELS = 3\n\nINPUT_SHAPE = (IMG_W, IMG_H, CHANNELS)\nNB_CLASSES = 2\nEPOCHS = 48\nBATCH_SIZE = 6","ea6b7a29":"from tensorflow.keras import backend as K\n\ndef ALReLU(x):\n   alpha = 0.01\n   return K.maximum(K.abs(alpha*x), x)\n\nfrom tensorflow.keras.layers import Input, Conv2D, Lambda\nfrom tensorflow.keras.utils import get_custom_objects\n\nget_custom_objects().update({'ALReLU':  tf.keras.layers.Activation(ALReLU)})","8edec21e":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=INPUT_SHAPE))\nmodel.add(Activation(ALReLU))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation(ALReLU))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(ALReLU))\nmodel.add(Conv2D(250,(3,3)))\nmodel.add(Activation(ALReLU))\n  \nmodel.add(Conv2D(128,(3,3)))\nmodel.add(Activation(ALReLU))\nmodel.add(AvgPool2D(2,2))\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(ALReLU))\nmodel.add(AvgPool2D(2,2))\n\nmodel.add(Conv2D(256,(2,2)))\nmodel.add(Activation(ALReLU))\nmodel.add(MaxPool2D(2,2))\n    \nmodel.add(Flatten())\nmodel.add(Dense(32))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\"))","efe75176":"model.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\n\n","0e4bb352":"model.summary()","26c3419c":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.3)\n\ntrain_generator = train_datagen.flow_from_directory(\n    DATASET_DIR,\n    target_size=(IMG_H, IMG_W),\n    batch_size=BATCH_SIZE,\n    class_mode='binary',\n    subset='training')\n\nvalidation_generator = train_datagen.flow_from_directory(\n    DATASET_DIR, \n    target_size=(IMG_H, IMG_W),\n    batch_size=BATCH_SIZE,\n    class_mode='binary',\n    shuffle= False,\n    subset='validation')\n\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch = train_generator.samples \/\/ BATCH_SIZE,\n    validation_data = validation_generator, \n    validation_steps = validation_generator.samples \/\/ BATCH_SIZE,\n    epochs = EPOCHS)","bba1b671":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","7f2fcc61":"print(\"training_accuracy\", history.history['accuracy'][-1])\nprint(\"validation_accuracy\", history.history['val_accuracy'][-1])","c5154932":"label = validation_generator.classes","b39e3a0c":"pred= model.predict(validation_generator)\npredicted_class_indices=np.argmax(pred,axis=1)\nlabels = (validation_generator.class_indices)\nlabels2 = dict((v,k) for k,v in labels.items())\npredictions = [labels2[k] for k in predicted_class_indices]\nprint(predicted_class_indices)\nprint (labels)\nprint (predictions)","831a98ac":"from sklearn.metrics import confusion_matrix\n\ncf = confusion_matrix(predicted_class_indices,label)\ncf","b6ac8240":"exp_series = pd.Series(label)\npred_series = pd.Series(predicted_class_indices)\npd.crosstab(exp_series, pred_series, rownames=['Actual'], colnames=['Predicted'],margins=True)","978cfdd7":"plt.matshow(cf)\nplt.title('Confusion Matrix Plot')\nplt.colorbar()\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show();","68ea485d":"**This notebook is just a fork of https:\/\/www.kaggle.com\/eswarchandt\/covid-19-detection-from-lung-x-rays \nby using custom activation function ALReLU ( https:\/\/arxiv.org\/abs\/2012.07564 )**"}}