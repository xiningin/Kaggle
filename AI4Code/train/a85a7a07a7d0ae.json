{"cell_type":{"54bfee45":"code","da9e993e":"code","f3e736dd":"code","f300f4e4":"code","8f4f3beb":"code","b1bd9554":"code","ab45d6dd":"code","a6ef74ea":"code","a914b85c":"code","c1e30462":"code","316e937c":"code","66e9e57e":"code","292e1f83":"code","0ae48d5b":"code","6bbf9da9":"code","936fc066":"code","8ef2bcd7":"code","893904b2":"code","1c29468e":"code","7e19be4c":"code","f5bcb190":"code","21a76479":"code","917e5128":"code","c23c5fb5":"code","9d62c809":"code","8fe969f4":"code","0fd67949":"code","95d1078f":"code","292b3984":"code","851b0a08":"markdown","2a8b004a":"markdown","5db12752":"markdown","9efe94c2":"markdown","39ebc216":"markdown"},"source":{"54bfee45":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nimport tensorflow as tf\nimport keras\n","da9e993e":"print('tf version:',tf.__version__,'\\n' ,'keras version:',keras.__version__,'\\n' ,'numpy version:',np.__version__)","f3e736dd":"# load previous prediction results\npredicted_data = pd.read_hdf('..\/input\/106-sol-elec-gas-3-univariate-multi-step-cnn-model\/predicted_data.hdf5')","f300f4e4":"\nsolarpower = pd.read_csv(\"..\/input\/solarpanelspower\/PV_Elec_Gas3.csv\",header = None,skiprows=1 ,names = ['date','cum_power','Elec_kW', \n                                                                            'Gas_mxm'], sep=',',usecols = [0,1,2,3],\n                     \n                     parse_dates={'dt' : ['date']}, infer_datetime_format=True,index_col='dt')\nprint(solarpower.head(2))\n","8f4f3beb":"# make cum_power stationary\n\nsolarpower2 = solarpower.shift(periods=1, freq='D', axis=0)\nsolarpower['cum_power_shift'] = solarpower2.loc[:,'cum_power']\nsolarpower['day_power'] = solarpower['cum_power'].values - solarpower['cum_power_shift']\nsolarpower.iloc[0:1].day_power.value = 0.\nA = solarpower.dropna()\ndel A['cum_power'], A['cum_power_shift']\nsolarpower = A","b1bd9554":"solarpower.head(2), solarpower.tail(2)","ab45d6dd":"X_train = solarpower[:'2018-10-28']\nX_valid = solarpower['2018-10-29':'2019-10-28'] # is 365 days\nX_train.shape, X_valid.shape","a6ef74ea":"X_train.tail(2), X_valid.head(2)","a914b85c":"# we devide the series into multiple input and output patterns\n\ndef my_split_window(series, window_in, window_out):\n    '''\n    the series is split into output sequences of length window_in and \n    output sequences of lenght window_out\n    returns arrays X, y\n    '''\n    X = []\n    y = []\n    n_steps = len(series) - window_in + 1\n    for step in range(n_steps):\n        if (step + window_in + window_out) > (len(series)):\n                    break\n        X_w = []\n        for i in range(window_in):\n            X_w.append(series[i+step])\n            y_w = []\n            for j in range(window_out):\n                n = i + j + step + 1\n\n                y_w.append(series[n])\n        X_w = np.array(X_w)\n        X.append(X_w)\n        y_w = np.array(y_w)\n        y.append(y_w)   \n    X = np.array(X)\n    y = np.array(y)\n    return X, y","c1e30462":"# test my_split_window\n\nseries = [10,20,30,40,50,60,70,80,90]\nwindow_in = 3\nwindow_out = 2\nX_, y_ = my_split_window(series, window_in, window_out)\nX_, y_\n","316e937c":"X_.shape, y_.shape","66e9e57e":"# apply my_split_window on daily solar power with a window of 365 days (we do not make account for leap years)\n\nwindow_in = 365\nwindow_out = 365\nX, y = my_split_window(X_train.day_power.values,  window_in, window_out)\n# print a sample\nfor i in range(3):\n    print(X[i][-2:], y[i][-2:])","292e1f83":"X.shape","0ae48d5b":"# vector output model:\n# model for univariate series input and prediction of  timestep vector\n# we have an input shape = (number of windows, window_in) \n#  and we have a window size of one year (365 days)\n# the output vector is of shape(number of window_out)\nn_features = 1 # it is a series\nwindow_in = 365\nwindow_out = 365\n# we have to reshape from (samples, timesteps) to (samples, timesteps, n_features)\nX = X.reshape((X.shape[0], X.shape[1], n_features ))\n\n# define model\ndef LSTM_cnn_model(window_in, window_out, n_features):\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.LSTM(32, return_sequences=True))\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Conv1D(filters=32, kernel_size=2, activation='relu',\n                                input_shape=(window_in, n_features)))\n    model.add(tf.keras.layers.MaxPool1D(pool_size=2))\n    model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Dense(50, activation='relu'))\n    model.add(tf.keras.layers.Dense(window_out))\n    return model\n    \nmodel = LSTM_cnn_model(window_in, window_out, n_features)\n# compile the model:\nmodel.compile(optimizer='adam', loss='mae')\n\n# fit model\nhistory = model.fit(X, y, epochs=20, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","6bbf9da9":"# predicting next year based on X_valid to see if model works\n# the model expects an input of shape(1, window_in, n_features  )\nX_input = X_valid.day_power.ravel()\nX_input = X_input.reshape(1, window_in, n_features)\n\ny_hat = model.predict(X_input, verbose=0)","936fc066":"plt.plot(y_hat[0], label='predicted_power')\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","8ef2bcd7":"first_r2_score = r2_score(y_true, y_hat[0]) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat[0])\nprint('r2_score %.5f' % first_r2_score)\nprint('mae %.2f' % first_mae)","893904b2":"def cumulate(series, start=0):\n    '''\n    start is the starting cumulative power, the series is the daily solar power\n    a list with daily cumulative power is the result\n    '''\n    cum = [start]\n    for i in range(len(series)):\n        sum_plus = cum[i] + series[i]\n        cum.append(sum_plus)\n    return cum","1c29468e":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat[0])\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","7e19be4c":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","f5bcb190":"# adding a feature:\nX_train = X_train.copy()\nX_valid = X_valid.copy()\nX_train['Gas_plus_Elek'] = X_train.Gas_mxm + X_train.Elec_kW\nX_valid['Gas_plus_Elek'] = X_valid.Gas_mxm + X_valid.Elec_kW","21a76479":"# apply split window\n# apply my_split_window on daily solar power with a window of 365 days (we do not make account for leap years)\n\nwindow_in = 365\nwindow_out = 365\nX, y = my_split_window(X_train.day_power.values,  window_in, window_out)\n# print a sample\nfor i in range(3):\n    print(X[i][-2:], y[i][-2:])","917e5128":"# vector output model:\n# model for univariate series input and prediction of  timestep vector\n# we have an input shape = (number of windows, window_in) \n#  and we have a window size of one year (365 days)\n# the output vector is of shape(number of window_out)\nn_features = 1 # it is a series\nwindow_in = 365\nwindow_out = 365\n# we have to reshape from (samples, timesteps) to (samples, timesteps, n_features)\nX = X.reshape((X.shape[0], X.shape[1], n_features ))\n\n\n\nmodel = LSTM_cnn_model(window_in, window_out, n_features)\n# compile the model:\nmodel.compile(optimizer='adam', loss='mae')\n\n# fit model\nhistory = model.fit(X, y, epochs=20, verbose=0)\n\n# graph of the loss shows convergence\nimport matplotlib.pyplot as plt\nplt.plot(history.history['loss'])\nplt.title('loss')\nplt.xlabel('epochs')\nplt.show()","c23c5fb5":"# predicting next year based on X_valid to see if model works\n# the model expects an input of shape(1, window_in, n_features  )\nX_input = X_train[-365:].day_power.ravel()\nX_input = X_input.reshape(1, window_in, n_features)\n\ny_hat = model.predict(X_input, verbose=0)","9d62c809":"plt.plot(y_hat[0], label='predicted_power')\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","8fe969f4":"first_r2_score = r2_score(y_true, y_hat[0]) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat[0])\nprint('r2_score %.5f' % first_r2_score)\nprint('mae %.2f' % first_mae)","0fd67949":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat[0])\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","95d1078f":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","292b3984":"predicted_data['106B_LSTM_4f_CNN_univariate_multi_ouput_20epochs'] = y_hat[0,:]\npredicted_data.to_hdf('predicted_data6B.hdf5',key='predicted_data', table='true',mode='a')","851b0a08":"These notebooks are based on the excellent article by Jason Brownlee:\nHow to Develop Convolutional Neural Network Models for Time Series Forecasting.  \nhttps:\/\/machinelearningmastery.com\/how-to-develop-convolutional-neural-network-models-for-time-series-forecasting\/  \n\nThese are the notebooks of the work on Daily Power Production of Solar Panels: 101_Univariate_and_CNN_model_on_daily_solar_power 102_Multivariate_multiple_input_series_CNN \n102_Multivariate_multiple_input_series_CNN\n103_Sol_Elec_Gas_2_1B_Multivariate_mulitple_input 104_Sol_Elec_Gas_2_C_Multivariate_parallel_series_CNN_Model 105_Sol_Elec_Gas_2_D_Multivariate_parallel_multi_output_CNN_Model 106_Sol_Elec_Gas_3_Univariate_Multi_Step_CNN_Model\n106_Sol_Elec_Gas_3_Univariate_Multi_Step_CNN_Model\n107_Sol_Elec_Gas_4_Multivariate_Multi_Step_CNN_Model 108_Sol_Elec_Gas_1_Univariate_LSTM_and_CNN_Model","2a8b004a":"test 106B : test prediction solarpower with *univariate multi-step LSTM and CNN* \n","5db12752":"This notbook uses :  \ntf version: 2.0.0-beta1 ;\n keras version: 2.2.4 ; \n numpy version: 1.16.4 ","9efe94c2":"We want to use a one-dimensional Convolutional Neural Network (1D CNN). Just like in a CNN for images,  \na 1D CNN extracts features. It is very usefull in timeseries. More info is on the links:  \nhttps:\/\/missinglink.ai\/guides\/keras\/keras-conv1d-working-1d-convolutional-neural-networks-keras\/  \nhttps:\/\/machinelearningmastery.com\/cnn-models-for-human-activity-recognition-time-series-classification\/  \n","39ebc216":"# but the cumulative power is actually much more interesting.#\n# It tels us what the the total expected solar power of that year will be. #"}}