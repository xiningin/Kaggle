{"cell_type":{"38883bc2":"code","bc2ed698":"code","1b1db3ef":"code","2c8f1a84":"code","ffcfa2aa":"code","6c69e7c5":"code","3935427f":"code","30061e13":"code","9672576f":"code","735338d5":"code","35ae9635":"code","88a594a6":"code","2f41607e":"code","df75a973":"code","0baa4cb3":"code","d5b0846f":"code","091ec6ed":"code","8d7932b1":"code","e0f6ec83":"code","b7d21450":"code","6c5f9e69":"code","69a6b3e9":"code","b77e275f":"code","fe985689":"code","75e893ce":"code","31a7360f":"code","14b4ea82":"code","2de299b1":"code","30cfa3f8":"code","4020dc8a":"code","8acbf30f":"code","9cd2d03e":"code","d757a5d2":"code","b68295ea":"code","39889b42":"code","c7306d03":"code","5098d316":"code","96cb9c33":"code","60e72253":"code","ab928d20":"code","6aa4e51a":"code","72664514":"code","5958051c":"code","29784836":"code","8b006bd4":"code","41f0ba9c":"code","7d34c4c9":"code","acb647ad":"code","d69b5e8d":"code","4629ec32":"code","f4df6cbf":"code","75db5e79":"code","72bd7787":"markdown","492d06c2":"markdown","1e153f42":"markdown","32c02f17":"markdown","dee77c93":"markdown","d12c0b32":"markdown","528acb92":"markdown","a7c813ff":"markdown","efc74016":"markdown","872a2cd7":"markdown","1dcebc09":"markdown","7a1aae33":"markdown","10e7319f":"markdown","68fddaa1":"markdown","9105e74e":"markdown","3fa55704":"markdown","9b29ee53":"markdown","cd74695c":"markdown","53c00f01":"markdown","6049cb07":"markdown","0774c051":"markdown","5e931a09":"markdown","3223f82b":"markdown","864de213":"markdown","f6680dc2":"markdown","80f23f33":"markdown","dd29b889":"markdown","b110f588":"markdown","d1d18ed7":"markdown","88c1ff2f":"markdown","ab421698":"markdown","f2d16781":"markdown","e94545a3":"markdown","1ca942ed":"markdown","3a6d909a":"markdown","3272ec92":"markdown","9bd6f7a0":"markdown","4b3caa34":"markdown","239ddddd":"markdown","73fcc6cd":"markdown","3ca81c7c":"markdown","e697a1d8":"markdown","deeb089b":"markdown"},"source":{"38883bc2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n","bc2ed698":"missing_values = ['?','--','-','??','.','unknown']\nraw_data=pd.read_csv(\"..\/input\/automobile-dataset\/Automobile_data.csv\",na_values=missing_values)\ndata=raw_data.copy()","1b1db3ef":"data.head()","2c8f1a84":"\ndata.describe(include='all')","ffcfa2aa":"data.info()","6c69e7c5":"data.isnull().sum()","3935427f":"data.duplicated().sum()","30061e13":"x=('make', 'fuel-type', 'aspiration','body-style', 'drive-wheels', 'engine-location', 'engine-type',\n       'num-of-cylinders', 'fuel-system', 'num-of-doors')\nfor i in x:\n    print (i)\n    print (data[i].unique())\n\n    ","9672576f":"#maping no-of-doors \ndata['num-of-doors']=data['num-of-doors'].map({'two':2,'four':4})","735338d5":"#maping num-of-cylinders\ndata['num-of-cylinders']=data['num-of-cylinders'].map({'two':2,'three':3,'four':4,'five':5,'six':6,'eight':8,'twelve':12})","35ae9635":"data['normalized-losses']=data['normalized-losses'].fillna((data['normalized-losses'].median()))\ndata['horsepower']=data['horsepower'].fillna((data['horsepower'].median()))\ndata['peak-rpm']=data['peak-rpm'].fillna((data['peak-rpm'].median()))\ndata['bore']=data['bore'].fillna((data['bore'].median()))\ndata['stroke']=data['stroke'].fillna((data['stroke'].median()))\ndata['price']=data['price'].fillna((data['price'].median()))\ndata['num-of-doors']=data['num-of-doors'].fillna((data['num-of-doors'].median()))","88a594a6":"#making a copy of the cleaned data\ndata_cleaned=data.copy()","2f41607e":"sns.histplot(data_cleaned['make'],y=data_cleaned['make'])","df75a973":"sns.histplot(data_cleaned['price'],kde=True)","0baa4cb3":"sns.histplot(data_cleaned['fuel-type'])\ndata_cleaned['fuel-type'].value_counts()","d5b0846f":"sns.histplot(data_cleaned['symboling'])","091ec6ed":"sns.histplot(data_cleaned['body-style'])","8d7932b1":"data.hist(figsize=(12,12))","e0f6ec83":"f,(ax1,ax2)=plt.subplots(2,1,sharex=True,figsize=(10,10))\nax1.scatter(data_cleaned['price'],data_cleaned['symboling'])\nax1.set_title('price & symboling')\nax2.scatter(data_cleaned['price'],data_cleaned['make'])\nax2.set_title('price & make')","b7d21450":"pd.crosstab(data_cleaned['symboling'],columns=[data_cleaned['engine-location'],data_cleaned['aspiration']])","6c5f9e69":"corr=data_cleaned.corr()","69a6b3e9":"plt.figure(figsize=(12,12))\nsns.heatmap(corr,annot=True)","b77e275f":"cols = ['symboling', 'normalized-losses', 'wheel-base', 'length', 'width', 'height'] \nplt.figure(figsize=(10,8))\nplt.title(\"Numerical Variables in Automobile Dataset\")\ndata_cleaned[cols].boxplot(color='blue')\nplt.show()\ncols = ['curb-weight', 'engine-size', 'bore', 'stroke', 'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg', 'highway-mpg'] \nplt.figure(figsize=(12,8))\nplt.title(\"Numerical Variables in Automobile Dataset\")\ndata_cleaned[cols].boxplot(color='green')\nplt.show()","fe985689":"sns.histplot(data_cleaned['normalized-losses'])\nq=data_cleaned['normalized-losses'].quantile(.995)\ndata1=data_cleaned[data_cleaned['normalized-losses']<q]\nsns.histplot(data1['normalized-losses'],color='yellow')","75e893ce":"sns.histplot(data1['peak-rpm'])\nq=data1['peak-rpm'].quantile(.999)\ndata2=data1[data1['peak-rpm']<q]\nsns.histplot(data2['peak-rpm'],color='yellow')","31a7360f":"#creating a check point \ndata_cleaned=data2.copy()","14b4ea82":"f,(ax1,ax2,ax3)=plt.subplots(1,3,sharex=True,figsize=(15,4))\nax1.scatter(data_cleaned['price'],data_cleaned['length'])\nax1.set_title('price & length')\nax2.scatter(data_cleaned['price'],data_cleaned['width'])\nax2.set_title('price & width')\nax3.scatter(data_cleaned['price'],data_cleaned['curb-weight'])\nax3.set_title('price & curb-weight')\nf,(ax4,ax5,ax6)=plt.subplots(1,3,sharex=True,figsize=(15,4))\nax4.scatter(data_cleaned['price'],data_cleaned['engine-size'])\nax4.set_title('price & engine size')\nax5.scatter(data_cleaned['price'],data_cleaned['horsepower'])\nax5.set_title('price & horsepower')\nax6.scatter(data_cleaned['price'],data_cleaned['city-mpg'])\nax6.set_title('price & city-mpg')","2de299b1":"log_price=np.log(data_cleaned['price'])\ndata_cleaned['log_price']=log_price","30cfa3f8":"f,(ax1,ax2,ax3)=plt.subplots(1,3,sharex=True,figsize=(15,4))\nax1.scatter(data_cleaned['log_price'],data_cleaned['length'])\nax1.set_title('price & length')\nax2.scatter(data_cleaned['log_price'],data_cleaned['width'])\nax2.set_title('price & width')\nax3.scatter(data_cleaned['log_price'],data_cleaned['curb-weight'])\nax3.set_title('price & curb-weight')\nf,(ax4,ax5,ax6)=plt.subplots(1,3,sharex=True,figsize=(15,4))\nax4.scatter(data_cleaned['log_price'],data_cleaned['engine-size'])\nax4.set_title('price & engine size')\nax5.scatter(data_cleaned['log_price'],data_cleaned['horsepower'])\nax5.set_title('price & horsepower')\nax6.scatter(data_cleaned['log_price'],data_cleaned['city-mpg'])\nax6.set_title('price & city-mpg')","4020dc8a":"data2=data_cleaned.drop(['price'],axis=1)\ndata2.head()","8acbf30f":"from statsmodels.stats.outliers_influence import variance_inflation_factor","9cd2d03e":"variables=data2[[ 'width','curb-weight',  'engine-size',  'horsepower',  'city-mpg']]\nvif=pd.DataFrame()\nvif['VIF']=[variance_inflation_factor(variables.values,i) for i in range (variables.shape[1])]\nvif['features']=variables.columns\nvif","d757a5d2":"data_no_multi=data2.drop(['symboling', 'normalized-losses','num-of-doors','wheel-base', 'length','height','bore','stroke',\n       'compression-ratio','peak-rpm','engine-location','aspiration','fuel-type','fuel-system'], axis=1)\ndata_no_multi.head()","b68295ea":"data_dummy=pd.get_dummies(data_no_multi,columns=[\"body-style\", \"drive-wheels\"], prefix=[\"body\", \"drive\"])\ndata_dummy.head()","39889b42":"data_dummy['engine-type'].value_counts()","c7306d03":"data_dummy['ohc_code']=np.where(data_dummy['engine-type'].str.contains('ohc'),1,0)\n\n#drop the engine-type variable\ndata3=data_dummy.drop('engine-type',axis=1)","5098d316":"from sklearn.preprocessing import OrdinalEncoder\n\nord_enc = OrdinalEncoder()\ndata3[\"make_code\"] = ord_enc.fit_transform(data3[[\"make\"]])\n\n#drop the make variable\ndata_preprocessed=data3.drop('make',axis=1)\ndata_preprocessed.head()","96cb9c33":"target=data_preprocessed['log_price']\ninputs=data_preprocessed.drop(['log_price'],axis=1)","60e72253":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(inputs,target,test_size=.2, random_state=42,shuffle=True)","ab928d20":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","6aa4e51a":"from sklearn.linear_model import LinearRegression","72664514":"reg=LinearRegression()\nreg.fit(x_train,y_train)","5958051c":"reg.score(x_train,y_train)","29784836":"reg.coef_","8b006bd4":"reg.intercept_","41f0ba9c":"r2=reg.score(x_train,y_train)\nn=x_train.shape[0]\np=x_train.shape[1]\nadjusted_r2=1-(1-r2)*(n-1)\/(n-p-1)\nadjusted_r2","7d34c4c9":"from sklearn.feature_selection import f_regression\nf_stats=f_regression(x_train,y_train)[0]\np_value=f_regression(x_train,y_train)[1]","acb647ad":"reg_summ=pd.DataFrame(data=x_train.columns.values,columns=['Features'])\nreg_summ['coefficients']=reg.coef_\nreg_summ['p_values']=p_value.round(3)\nreg_summ","d69b5e8d":"y_hat=reg.predict(x_train)","4629ec32":"plt.scatter(y_train,y_hat)\nplt.ylabel('prediction')\nplt.xlabel('Target')\nplt.show()","f4df6cbf":"sns.histplot(y_train-y_hat,kde=True)\nplt.title(\"Residuals pdf\")","75db5e79":"y_hat_test=reg.predict(x_test)\nplt.scatter(y_test,y_hat_test)\nplt.ylabel('prediction')\nplt.xlabel('Target')\nplt.show()","72bd7787":"normalized-losses has 41 missing values. num-of-doors, horsepower ans peak-rpm have 2. While bore, stroke and price have 4 missing values. ","492d06c2":"### Import Libraries","1e153f42":"#### Dummy Variable Encoding for body-style column and drive-wheel","32c02f17":"### Creating dummy variables","dee77c93":"### Checking null values","d12c0b32":"##### Plotting","528acb92":"### Checking Outliers using boxplot","a7c813ff":"Toyota, nissan, honda, mitsubishi are among the most bought cars","efc74016":"### Checking unique values for all variables with object data type","872a2cd7":"Normalized-losses and peak-rmp have 2 and 1 outliers respectively","1dcebc09":"### Prediction","7a1aae33":"### F-stats and P value","10e7319f":"Most of the values are ohc. So we can take ohc as 1 and the rest as 0.","68fddaa1":"#### Univariate","9105e74e":"##### Now we can do multiple linear regression ","3fa55704":"#### Linearity","9b29ee53":"#### Custom Binary Encoding for engine-type","cd74695c":"### Adjusted R-square","53c00f01":"### Checking duplicate values","6049cb07":"### Dropping unwanted columns","0774c051":"#### Multicollinearity","5e931a09":"### EDA","3223f82b":"### Replacing null values with median","864de213":"### Exploring Data","f6680dc2":"Most cars have zero to high risk. Very few cars have low risk","80f23f33":"We can see that length, width, curb-weight, engine size and horsepower positively correlated and city-mpg and highway-mpg are negatively correlated. So we will check VIF for these variables only","dd29b889":"#### Multivariate","b110f588":"### Creating a summary table","d1d18ed7":"Most of the cars are priced between 5000 - 20000","88c1ff2f":"Now all the outliers have been taken care of. (I have not shown here but 4 values were removed from the data. This can be verified by describe function.)","ab421698":"### Regression","f2d16781":"### Removing Outliers","e94545a3":"#### Bivariate","1ca942ed":"### Testing","3a6d909a":"#### Ordinal Encoding for make column","3272ec92":"174 cars have fuel type gas.","9bd6f7a0":"They seem to forming an exponential pattern. This will be solved by using log","4b3caa34":"### Relaxing OLS assumptions","239ddddd":"Except num-of-doors all others with missing value are of foat or int type. num-of-doors is object type. ","73fcc6cd":"### Import Data","3ca81c7c":"Sedan and hatchback are the most baught body types. Covertible are the least favourite  ","e697a1d8":"### Train Test Split","deeb089b":"1. bmw, porche, mercedes-bens are among the highest priced cars\n2. Car with syboling 0 & 3 are among the highest priced. 1 has an outlier."}}