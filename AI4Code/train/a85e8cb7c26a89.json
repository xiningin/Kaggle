{"cell_type":{"53c32de7":"code","8587fdbf":"code","0f25ec17":"code","6156b189":"code","cbb2e28d":"code","d7471185":"code","c852b34c":"code","5eb3a28e":"code","d201a68e":"code","2999c574":"code","39d13ebd":"code","4a8da3a3":"code","eb8c6f83":"code","cd2e823d":"code","78502653":"code","5cb0be48":"code","ef9f87ff":"code","ba705618":"code","e3708b22":"code","a3732867":"code","d2cd256b":"code","436734ec":"code","721f8421":"code","1249daa6":"code","df7e6951":"code","5f33a337":"code","4c9d54e9":"code","c25b6278":"code","e3d93eed":"code","d30fce8e":"code","9768f56b":"code","9b9f1518":"code","6d80523e":"code","9aa60c5c":"code","480de995":"code","8be3ebb5":"code","b065c26b":"code","2e000eb1":"code","ffaaccbe":"code","05a902a1":"code","7591f33f":"code","5cd3c2ff":"code","9067ba47":"code","3138ee00":"code","65ba62ab":"code","efdf1f60":"code","fb0a2428":"markdown","3c106ccc":"markdown","35edd2f9":"markdown","f529be24":"markdown","0d3a786b":"markdown","05e29503":"markdown","b754be83":"markdown","bc1b7066":"markdown","a6d4a389":"markdown","61bc8e36":"markdown","bf9f91bd":"markdown","4d6eb80f":"markdown","4ce68894":"markdown","68356e65":"markdown","06748578":"markdown","fe5a84f6":"markdown","d17dbcae":"markdown","23174619":"markdown","0d145134":"markdown","5fda4a88":"markdown","4bb3eb7b":"markdown","254baa78":"markdown"},"source":{"53c32de7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8587fdbf":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import SelectKBest,f_classif\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor,AdaBoostRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import Lasso,LinearRegression,Ridge\nfrom xgboost import XGBRegressor","0f25ec17":"train_full = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\n# test_full = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\ntrain_full = train_full.drop('Id',axis=1)\n# test_full = test_full.drop('Id',axis=1)\ntrain_full.shape","6156b189":"num_features = train_full.select_dtypes(exclude='object').columns\nnum_features","cbb2e28d":"cat_features = train_full.select_dtypes(include='object').columns\ncat_features","d7471185":"num_data = train_full[num_features].drop('SalePrice',axis=1)\n\nfig = plt.figure(figsize=(16,20))\n\nfor i in range(len(num_data.columns)):\n    fig.add_subplot(9,4,i+1)\n    sns.boxplot(y=num_data.iloc[:,i])\nplt.tight_layout()   \nplt.show()","c852b34c":"target = train_full.SalePrice\n\nfig = plt.figure(figsize=(16,20))\n\nfor i in range(len(num_data.columns)):\n    fig.add_subplot(9,4,i+1)\n    \n    sns.scatterplot(num_data.iloc[:,i],target)\n    plt.xlabel(num_data.columns[i])\nplt.tight_layout()\nplt.show()","5eb3a28e":"num_data_insale = train_full.select_dtypes(exclude='object')\n\ncorrelation = num_data_insale.corr()\nplt.figure(figsize=(20,20))\nsns.heatmap(correlation,square=True,linewidth=2.2,linecolor='black',annot_kws={'size':12})","d201a68e":"correlation['SalePrice'].sort_values(ascending=True).head(15)","2999c574":"correlation['SalePrice'].sort_values(ascending=False).head(15)","39d13ebd":"num_columns = train_full.select_dtypes(exclude='object').columns\ncorr_to_price = correlation['SalePrice']\nn_rows = 8\nn_cols = 5\nfig,ax = plt.subplots(n_rows,n_cols,sharey=True,figsize=(16,20))\n\nplt.subplots_adjust(bottom=-0.8)\n\nfor i in range(n_rows):\n    for j in range(n_cols):\n        plt.sca(ax[i,j])\n        index = n_cols*i+j\n        \n        if index<len(num_columns):\n            plt.scatter(train_full[num_columns[index]],train_full.SalePrice)\n            plt.xlabel(num_columns[index])\n            plt.title('Corr to SalePrice:{:.3f}'.format(corr_to_price[index]))\nplt.show()\n\n","4a8da3a3":"high_corr = ['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF'\n             ,'GrLivArea','FullBath','TotRmsAbvGrd','GarageCars','GarageArea']\nmid_corr = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtUnfSF','2ndFlrSF'\n            ,'BsmtFullBath','HalfBath','Fireplaces','GarageYrBlt','WoodDeckSF','OpenPorchSF',]\ncorr_ = train_full[high_corr+mid_corr].corr()\nplt.figure(figsize=(18,14))\nsns.heatmap(corr_,annot=True,square=True,linewidth=2.2,linecolor='black',annot_kws={'size':12})","eb8c6f83":"fig,ax = plt.subplots(2,2,sharex=False,sharey=False,figsize=(12,8))\n\nax[0][0].scatter(train_full['1stFlrSF'],train_full['TotalBsmtSF'])\nax[0][0].set_title('1stFlrSF - TotalBsmtSF')\n\nax[0][1].scatter(train_full['GrLivArea'],train_full['TotRmsAbvGrd'])\nax[0][1].set_title('GrLivArea - TotRmsAbvGrd')\n\nax[1][0].scatter(train_full['GarageCars'],train_full['GarageArea'])\nax[1][0].set_title('GarageCars - GarageArea')\n\nplt.show()\n","cd2e823d":"fig,ax = plt.subplots(2,2,sharex=False,sharey=False,figsize=(12,8))\n\nax[0][0].scatter(train_full['1stFlrSF']+train_full['TotalBsmtSF'],train_full['SalePrice'])\nax[0][0].set_title('1stFlrSF + TotalBsmtSF')\n\nax[0][1].scatter(train_full['TotRmsAbvGrd']+train_full['GrLivArea'],train_full['SalePrice'])\nax[0][1].set_title('GrLivArea + TotRmsAbvGrd')\n\nax[1][0].scatter(train_full['GarageCars']+train_full['GarageArea'],train_full['SalePrice'])\nax[1][0].set_title('GarageCars+GarageArea')\n\nplt.show()","78502653":"fig,ax = plt.subplots(2,2,sharex=False,sharey=False,figsize=(12,8))\n\nax[0][0].scatter(train_full['GarageCars'],train_full['SalePrice'])\nax[0][0].set_title('GarageCars')\n\nax[0][1].scatter(train_full['GarageArea'],train_full['SalePrice'])\nax[0][1].set_title('GarageArea')\n\nax[1][0].scatter(train_full['GarageCars']+train_full['GarageArea'],train_full['SalePrice'])\nax[1][0].set_title('GarageCars+GarageArea')\n\nplt.show()","5cb0be48":"num_data.isnull().sum().sort_values(ascending=False).head(4)","ef9f87ff":"cat_data = train_full.select_dtypes(include='object')\ncat_data.describe()","ba705618":"cat_data.isnull().sum().sort_values(ascending=False).head(17)","e3708b22":"train_full['Electrical'].value_counts()","a3732867":"train_full.head()","d2cd256b":"train_full['LotFrontage'].fillna(train_full['LotFrontage'].median(),inplace=True)\ntrain_full['LotFrontage'].isnull().sum()","436734ec":"train_full['GarageYrBlt'].fillna(0,inplace=True)\ntrain_full['MasVnrArea'].fillna(0,inplace=True)","721f8421":"None_cols=['PoolQC','Alley','Fence','FireplaceQu','GarageQual'\n           ,'GarageFinish','GarageType','GarageCond','BsmtFinType2','BsmtExposure'\n           ,'BsmtFinType1','BsmtQual','BsmtCond','MasVnrType']\n\nfor col in None_cols:\n    train_full[col].fillna(value='None',inplace=True)\n\ntrain_full['Electrical'].fillna('SBrkr',inplace=True)\ntrain_data = train_full.copy()\n\ntrain_data.isnull().sum().sort_values(ascending=False)\n\n","1249daa6":"train_data.shape","df7e6951":"train_data['LotFrontage'][train_data['LotFrontage']>200].index","5f33a337":"train_data = train_data.drop(train_data['LotFrontage'][train_data['LotFrontage']>200].index)\ntrain_data = train_data.drop(train_data['LotArea'][train_data['LotArea']>10000].index)\ntrain_data = train_data.drop(train_data['MasVnrArea'][train_data['MasVnrArea']>1000].index)\n# train_data['GarageArea'] = train_data.drop(train_data['GarageArea'][train_data['GarageArea']>1250].index)\ntrain_data = train_data.drop(train_data['GrLivArea'][train_data['GrLivArea']>4500].index)\ntrain_data = train_data.drop(train_data['WoodDeckSF'][train_data['WoodDeckSF']>800].index)\ntrain_data = train_data.drop(train_data['OpenPorchSF'][train_data['OpenPorchSF']>400].index)","4c9d54e9":"train_data.shape","c25b6278":"drop_features = ['MiscFeature','MSSubClass','OverallCond','BsmtFinSF2'\n                 ,'LowQualFinSF','BsmtHalfBath','BedroomAbvGr','KitchenAbvGr'\n                 ,'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal',\n                 'MoSold','YrSold','GarageArea','TotalBsmtSF','TotRmsAbvGrd','GrLivArea','1stFlrSF']\n\ntrain_data['GrLivTGrd'] = train_full['GrLivArea'] + train_full['TotRmsAbvGrd']\ntrain_data['1stTBSF'] = train_full['1stFlrSF'] + train_full['TotalBsmtSF']\ntrain_data = train_data.drop(drop_features,axis=1)\ntrain_data.shape","e3d93eed":"train_data.isnull().sum().sort_values(ascending=False).head()","d30fce8e":"train_data.head()","9768f56b":"cat_features = list(train_data.select_dtypes(include='object').columns)\nlen(cat_features)","9b9f1518":"X = pd.get_dummies(train_data.drop('SalePrice',axis=1))\ny = np.log(train_data.SalePrice)\nX_train,X_val,y_train,y_val = train_test_split(X,y,test_size=0.2,shuffle=True)\nmy_imputer = SimpleImputer()\nimputed_X_train = my_imputer.fit_transform(X_train)\nimputed_X_val = my_imputer.transform(X_val)\nprint('Train_set size:',X_train.shape)\nprint('Valid_set size:',X_val.shape)","6d80523e":"def inv(transformed_y):\n    return np.exp(transformed_y)\n\nmae = {}\n\n#1.LR\nLR = LinearRegression()\nLR.fit(X_train,y_train)\nLR_pred = LR.predict(X_val)\nLR_mae = mean_absolute_error(inv(LR_pred),inv(y_val))\nmae['LR_MAE'] = LR_mae\n\n#2.Lasso\nlasso = Lasso(alpha=0.0005,random_state=5)\nlasso.fit(X_train,y_train)\nLasso_pred = lasso.predict(X_val)\nLasso_mae = mean_absolute_error(inv(Lasso_pred),inv(y_val))\nmae['Lasso_MAE'] = Lasso_mae\n\n#3.RF\nRF = RandomForestRegressor(n_estimators=100)\nRF.fit(X_train,y_train)\nRF_pred = RF.predict(X_val)\nRF_mae = mean_absolute_error(inv(RF_pred),(y_val))\nmae['RF_MAE'] = RF_mae\n\n#4.Ridge\nRg = Ridge(alpha=0.002,random_state=5)\nRg.fit(X_train,y_train)\nRg_pred = Rg.predict(X_val)\nRg_mae = mean_absolute_error(inv(Rg_pred),inv(y_val))\nmae['Rg_MAE'] = Rg_mae\n\n#5.XGboost\nXG = XGBRegressor(n_estimator=500,learning_rate=0.01)\nXG.fit(X_train,y_train,early_stopping_rounds=5,eval_set=[(X_val,y_val)])\nXG_pred = XG.predict(X_val)\nXG_mae = mean_absolute_error(inv(XG_pred),inv(y_val))\nmae['XG_MAE'] = XG_mae\n\nprint(mae)","9aa60c5c":"from sklearn.model_selection import cross_val_score\n\nscore = cross_val_score(lasso,X,y,scoring='neg_mean_squared_error',cv=10,)\n\nRF_score = np.sqrt(-score)\n\nprint('For RF model:')\n\nprint('Mean RMSE:{:.3f}'.format(RF_score.mean()))\n\nprint('Error std deviation:{:.3f}'.format(RF_score.std()))","480de995":"from sklearn.model_selection import GridSearchCV\n\nparam = [{'alpha':[0.0001,0.001,0.005,0.01]}]\n\ntop_reg = Lasso()\ngrid_search = GridSearchCV(top_reg,param,cv=5,scoring='neg_mean_squared_error')\ngrid_search.fit(X,y)\ngrid_search.best_params_","8be3ebb5":"test = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\ntest_data = test.drop('Id',axis=1)\nId = test.Id","b065c26b":"test_data['LotFrontage'].fillna(train_full['LotFrontage'].median(),inplace=True)\ntest_data['LotFrontage'].isnull().sum()","2e000eb1":"test_data['GarageYrBlt'].fillna(0,inplace=True)\ntest_data['MasVnrArea'].fillna(0,inplace=True)","ffaaccbe":"None_cols=['PoolQC','Alley','Fence','FireplaceQu','GarageQual'\n           ,'GarageFinish','GarageType','GarageCond','BsmtFinType2','BsmtExposure'\n           ,'BsmtFinType1','BsmtQual','BsmtCond','MasVnrType']\n\nfor col in None_cols:\n    test_data[col].fillna(value='None',inplace=True)\n\ntest_data['Electrical'].fillna('SBrkr',inplace=True)\ntest_data_ = test_data.drop(drop_features,axis=1).copy()\n\ntest_data_.isnull().sum().sort_values(ascending=False)","05a902a1":"test_data_['GrLivTGrd'] = test_data['GrLivArea'] + test_data['TotRmsAbvGrd']\ntest_data_['1stTBSF'] = test_data['1stFlrSF'] + test_data['TotalBsmtSF']\ntest_data_.shape","7591f33f":"X_test = pd.get_dummies(test_data_)\nfinal_train, final_test = X.align(X_test, join='left', axis=1)","5cd3c2ff":"imputed_test = my_imputer.transform(final_test)\nimputed_test.shape","9067ba47":"final_model = Lasso(alpha=0.001,random_state=5)\nfinal_X_train = my_imputer.fit_transform(final_train)\nfinal_model.fit(final_X_train,y)","3138ee00":"final_preds = final_model.predict(imputed_test)","65ba62ab":"outcome = pd.DataFrame({'Id':Id,'SalePrice':inv(final_preds)})\noutcome.shape","efdf1f60":"outcome.to_csv('outcome3.csv',index=False)","fb0a2428":"### 1. Outlier\n- We can use box plot and scatter plot to visualize outliers","3c106ccc":"# 4 Model Selection","35edd2f9":"### Notes\n- LotFrontage(>200,2)\n- LotArea(>10000,4)\n- MasVnrArea(>1000,7)\n- GarageArea(>1250,5)\n- GrLivArea(>4500,3)\n- WoodDeckSF(>800,1)\n- OpenPorchSF(>400,5)","f529be24":"### Dealing with outliers","0d3a786b":"# Missing values","05e29503":"# 2 Imputation","b754be83":"# Categorical features","bc1b7066":"## Numerical features","a6d4a389":"# 5 Submission","61bc8e36":"### Note:\n#### highly correlated features(>0.5):\n- OverallQual 0.791\n- YearBuilt 0.523\n- YearRemodAdd 0.507\n- TotalBsmtSF 0.614\n- 1stFlrSF 0.606\n- GrLivArea 0.709\n- FullBath 0.561\n- TotRmsAbvGrd 0.534\n- GarageCars 0.640\n- GarageArea 0.623\n\n#### low correlated features(<0.2)\n- MSSubClass\n- OverallCond\n- BsmtFinSF2\n- LowQualFinSF\n- BsmtHalfBath\n- BedroomAbvGr\n- KitchenAbvGr\n- EnclosedPorch\n- 3SsnPorch\n- ScreenPorch\n- PoolArea\n- MiscVal\n- MoSold\n- YrSold","bf9f91bd":"## Numerical features","4d6eb80f":"### Notes\n#### highly correlated:\n\n- 1stFlrSF - TotalBsmtSF 0.82\n\n- GrLivArea - TotRmsAbvGrd 0.83\n\n- GarageCars - GarageArea 0.88\n\n- Remove GarageArea\u3001TotalBsmtSF\u3001TotRmsAbvGrd","4ce68894":"### Notes:\n- Create new features by combining two highly correlated features\n- drop GarageArea. It carries too much outliers.","68356e65":"# 3 Encode","06748578":"### Notes\n- LotFrontage : Can we use the most_frequent or median to fill missing values?\n\n- GarageYrBlt : Can we consider missing values of GarageYrBlt as houses have no garage? If it is true, we can fill missing values with None.\n\n- MasVnrArea : Can we consider missing values of MasVnrArea as houses have no Masonry veneer. If it is true, we can fill missing values with 0.","fe5a84f6":"## Separate numerical features and categorical features","d17dbcae":"### Note\n- Missing values of the features [PoolQC,Alley,Fence,FireplaceQu,GarageQual,GarageFinish,GarageType,GarageCond,BsmtFinType2,BsmtExposure,BsmtFinType1,BsmtQual,BsmtCond,MasVnrType] can be considered as houses have no such stuffs so that I can fill missing values with None.\n- MiscFeature can be dropped.\n- Use most frequent fill the only one missing value of the feature Electrical.","23174619":"### Notes\n- LotFrontage(>200,2)\n- LotArea(>10000,4)\n- MasVnrArea(>1000,7)\n- GarageArea(>1250,5)\n- GrLivArea(>4500,3)\n- WoodDeckSF(>800,1)\n- OpenPorchSF(>400,5)","0d145134":"# Categorical Features","5fda4a88":"## 2.Correlation","4bb3eb7b":"# 1 Understanding Data\n- How many numerical features\n- How many categorical features\n- How many features carry missing values\n- The correlation of each feature","254baa78":"## 1.Missing Values"}}