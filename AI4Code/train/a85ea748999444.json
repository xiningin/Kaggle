{"cell_type":{"ce20ed82":"code","3c5ff1a2":"code","f3eed3c8":"code","0b488143":"code","ba5adc40":"code","6e8a3f29":"code","f1a6729c":"code","aeb17ae1":"code","07c44022":"code","721dbe0f":"code","68e181f8":"code","1310fd93":"code","fd4d5d12":"code","392d7a89":"code","b682e326":"code","9865c364":"code","0c8b408a":"code","65237d39":"code","007c50e9":"code","b866b431":"code","ce91399b":"code","25d46d62":"code","34928e8c":"code","38969ddb":"code","8ce6c93c":"code","419f6245":"code","269af8a4":"code","dd0b6c08":"code","1867ac80":"code","7f2f1279":"code","e3b36cb7":"markdown","cb8c88ae":"markdown","fbf403cd":"markdown","24c47cb7":"markdown","3f5eefcf":"markdown","36d7f666":"markdown","3541b408":"markdown","c3a0d794":"markdown","5cd3cb31":"markdown","97657ece":"markdown","64552fd2":"markdown","c22fb1c2":"markdown","d3ae6f6f":"markdown","551e3b38":"markdown","bb8acded":"markdown","667b147c":"markdown","ef2a8782":"markdown","3370e249":"markdown","b6daeb45":"markdown","049990a6":"markdown","8d78f800":"markdown","9fbd41d7":"markdown","e1c121b6":"markdown","f0372f74":"markdown"},"source":{"ce20ed82":"## importing important libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","3c5ff1a2":"# importing datset\ndiabetes_df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndiabetes_df","f3eed3c8":"## take a quick info about dataset\ndiabetes_df.info()","0b488143":"## description about the dataset\ndiabetes_df.describe()","ba5adc40":"## check for null values\ndiabetes_df.isna().sum()","6e8a3f29":"import seaborn as sns","f1a6729c":"corr = diabetes_df.corr()\n_,ax = plt.subplots(figsize=(10,8))\nsns.heatmap(corr, annot= True, ax=ax, cmap = 'twilight').set_title(\"Correlation Between Columns\");","aeb17ae1":"_,ax = plt.subplots(figsize=(10,8))\nsns.scatterplot(x = diabetes_df[\"SkinThickness\"],\n               y = diabetes_df[\"Insulin\"],\n               hue = diabetes_df[\"Outcome\"],ax=ax).set_title(\"Insulin vs SkinTickness\" );","07c44022":"_,ax = plt.subplots(figsize = (10,8))\nsns.scatterplot(x = diabetes_df[\"Age\"],\n               y = diabetes_df[\"BMI\"],\n               hue = diabetes_df[\"Outcome\"], ax=ax).set_title(\"Age vs BMI\");","721dbe0f":"_,ax = plt.subplots(figsize = (10,8))\nsns.scatterplot(x = diabetes_df[\"Glucose\"],\n               y = diabetes_df[\"Insulin\"],\n               hue = diabetes_df[\"Outcome\"], ax=ax).set_title(\"Glucose vs Insulin\");","68e181f8":"_,ax = plt.subplots(figsize = (10,8))\nsns.scatterplot(x = diabetes_df[\"BMI\"],\n               y = diabetes_df[\"BloodPressure\"],\n               hue = diabetes_df[\"Outcome\"], ax=ax).set_title(\"BMI vs BloodPressure\");","1310fd93":"pd.plotting.scatter_matrix(diabetes_df, alpha=0.2, figsize =(15,10));","fd4d5d12":"# checking data distribution of outcomes\ndiabetes_df[\"Outcome\"].value_counts().plot(kind=\"bar\");","392d7a89":"diabetes_df[\"Insulin\"][diabetes_df[\"Insulin\"]==0].value_counts()","b682e326":"for i in diabetes_df.columns:\n    if i != \"Outcome\":\n        print(diabetes_df[i][diabetes_df[i]==0].value_counts(),\"\\n----------------------\\n\")","9865c364":"X = diabetes_df.drop(columns = [\"Outcome\"])\ny = diabetes_df[\"Outcome\"]","0c8b408a":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\nX","65237d39":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2)","007c50e9":"from sklearn.naive_bayes import MultinomialNB\n\nclf = MultinomialNB()\nclf.fit(X_train,y_train)","b866b431":"clf.score(X_test,y_test)","ce91399b":"from sklearn.tree import DecisionTreeClassifier\n\nclf_2 = DecisionTreeClassifier()\nclf_2.fit(X_train,y_train)","25d46d62":"clf_2.score(X_test,y_test)","34928e8c":"clf_2.score(X_train, y_train)","38969ddb":"from sklearn import tree\nplt.figure(figsize=(20,20))\ntree.plot_tree(clf_2,filled = True, fontsize = 14);","8ce6c93c":"clf_3 = DecisionTreeClassifier(max_depth=3, max_leaf_nodes=5)\nclf_3.fit(X_train,y_train)","419f6245":"clf_3.score(X_test, y_test)","269af8a4":"predictions = clf_3.predict(X_test)","dd0b6c08":"from sklearn.metrics import accuracy_score, precision_recall_fscore_support, confusion_matrix\n\ndef evaluate_model(y_true,y_pred):\n    accuracy = accuracy_score(y_true,y_pred)\n    precision,recall,fscore,_ = precision_recall_fscore_support(y_true, y_pred, average = \"weighted\")\n    result = {\"Accuracy\":accuracy,\n             \"Precision Score\":precision,\n             \"Recall Score\": recall,\n             \"F1-Score\":fscore}\n    return result","1867ac80":"results = evaluate_model(y_test,predictions)\nresults","7f2f1279":"cm = confusion_matrix(y_test, predictions)\nsns.heatmap(cm, annot=True);","e3b36cb7":"## Evaluation","cb8c88ae":"So many patients `Insulin` level is 0 and also in one case both `Insulin` and `Skin Thickness` is 0 and the patient\ndiagnose with `Diabetes`","fbf403cd":"## Visualization","24c47cb7":"well `MultinomialNB` classifier best suited for classification with descrete features, we already converted our features\nbetween 0-1 so it didn't work out perfectly","3f5eefcf":"Umm, not so clear but i can see a upward trend, `BloodPressure` increase with increasing `BMI` generally","36d7f666":"We have nearly 500 cases of patients not diagnosed with diabetes but less than 300 cases where patients diagnoed\nwith Diabetes. The entire dataset lean towards False cases a bit, we don't have equal data of each classes","3541b408":"First try out naive_bayes algorithms","c3a0d794":"wow, here is 8 patients whose `BMI` is 0. Apart from that i don't think this graph tells us anything.","5cd3cb31":"Filling these values with `Data Distributions` values will lead to full of error model,\nwhat can be done is scale the all columns values to `0-1` except dependent feature column","97657ece":"Except `DiabetesPedigreeFunction` and `Age` every other columns consist 0 values","64552fd2":"Generally, we can see a upward trend which means higher `Glucose` level generally indicates higher `Insulin` level.\nBut, at lot 0 `Insulin` values prompt in the graph. Also, from the graph we can clearly see higher `Insulin` level\nindicates `Diabetes` cases to be True, wgich in general makes sense.","c22fb1c2":"Let's Visualize our data to reveal some story","d3ae6f6f":"`tree` algorithms are known to overfit data. This is exactly what happening here, our train-data gives a score of \n1.0 which means 100% accuracy, it learns everything in train-data but didn't generalize well on test-data, give only\n68.83% accuracy","551e3b38":"This is a `Binary classification` problem, we have to predict whether patient diagnosed with Diabetes or not","bb8acded":"Perfect, we don't have any null values","667b147c":"All values are now between 0 and 1","ef2a8782":"## Train the dataset and Evaluate our result","3370e249":"## Split the dataset into train and test set","b6daeb45":"befor investigate about these 0 values letz plot scatter_matrix","049990a6":"Time to investigate about these 0 values","8d78f800":"## Feature Engineering","9fbd41d7":"As we can see in the above diagram `gini`(criterion parameter) is turned to 0 after depth=3 and this is where it's\noverfitting, if we don't set the `max_depth` parameter then it takes the `default` value whichs is `None` means\nthen nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.","e1c121b6":"Hey we improved the model, now it generalizes better than before","f0372f74":"374 **`0`** values is `Insulin` column, maybe either these were null values and before presenting to us, these null values\nturned to 0 or these are misrecorded case"}}