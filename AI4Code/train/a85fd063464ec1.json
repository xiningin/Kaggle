{"cell_type":{"0e87b14e":"code","c65be378":"code","580ad4e1":"code","14a24b3e":"code","9f75216b":"code","0cf2d348":"code","d5790ec0":"code","285d2c5d":"code","c211c767":"code","82c05772":"code","36d73d5c":"code","926a83d4":"code","7a7663cf":"code","6ba0851a":"code","5d53bf28":"code","2f800ef9":"code","1a996f07":"markdown"},"source":{"0e87b14e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c65be378":"import seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nimport math\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\n","580ad4e1":"filepath= '\/kaggle\/input\/creditcardfraud\/creditcard.csv'\ndata= pd.read_csv(filepath)","14a24b3e":"data.head()","9f75216b":"#From the graph we can see that the number of faudulent transactions are very low compared to the legal transactions\nsns.relplot(x='Amount',y='Time',hue='Class', data=data)","0cf2d348":"fraud= data.loc[data['Class']==1]\nlegal= data.loc[data['Class']==0]","d5790ec0":"print('number of fraudulent transactions--')\nprint(len(fraud))","285d2c5d":"print('number of legal transactions--')\nprint(len(legal))","c211c767":"#Define the dependant and independant variables and divide them into training and testing data\n\ny=data['Class']\nx=data.drop('Class',axis=1)\n#Splitting training and testing data\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.70,test_size=0.30, random_state=0)","82c05772":"##Now we will run a few machine learning techiniques to see which one is the most applicable\n\n\n#Logistic Regression\nLogisticRegressor = LogisticRegression(max_iter=10000)\nLogisticRegressor.fit(x_train, y_train)\ny_predicted = LogisticRegressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted)\nr = r2_score(y_test, y_predicted)\nmae = mean_absolute_error(y_test,y_predicted)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_predicted))\nprint('f1 score:')\nprint(f1_score(y_test,y_predicted))","36d73d5c":"# Random Forest\nrf = RandomForestClassifier()\nrf.fit(x_train,y_train);\ny_predicted_r = rf.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted_r)\nr = r2_score(y_test, y_predicted_r)\nmae = mean_absolute_error(y_test,y_predicted_r)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_predicted_r))\nprint('f1 score:')\nprint(f1_score(y_test,y_predicted_r))\n","926a83d4":"# Decision Tree - CART\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(x_train, y_train)\ny_predicted_d = regressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted_d)\nr = r2_score(y_test, y_predicted_d)\nmae = mean_absolute_error(y_test,y_predicted_d)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_predicted_d))\nprint('f1 score:')\nprint(f1_score(y_test,y_predicted_d))\n","7a7663cf":"#KNN\nmath.sqrt(len(y_test))\n\nclassify= KNeighborsClassifier (n_neighbors=291, p =2, metric= 'euclidean')\nclassify.fit(x_train,y_train)\nypred1=classify.predict(x_test)\n\nmsee = mean_squared_error(y_test, ypred1)\nr = r2_score(y_test, y_predicted_d)\nmaee = mean_absolute_error(y_test,ypred1)\nprint(\"Mean Squared Error:\",msee)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",maee)\n\nprint('f1 score:')\nprint(f1_score(y_test,ypred1))\nprint('accuracy score:')\nprint(accuracy_score(y_test,ypred1))","6ba0851a":"math.sqrt(len(y_test))","5d53bf28":"#SVM\n\nsvclassifier = SVC(kernel='linear')\nsvclassifier.fit(x_train, y_train)\ny_pred2 = svclassifier.predict(x_test)\n\nmseew = mean_squared_error(y_test, y_pred2)\nra = r2_score(y_test, y_pred2)\nmaeew = mean_absolute_error(y_test,y_pred2)\nprint(\"Mean Squared Error:\",mseew)\nprint(\"R score:\",ra)\nprint(\"Mean Absolute Error:\",maeew)\n\nprint('f1 score:')\nprint(f1_score(y_test,y_pred2))\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_pred2))","2f800ef9":"#Naive Bayes\n\ngnb = GaussianNB()\ny_preed = gnb.fit(x_train, y_train).predict(x_test)\n\nms = mean_squared_error(y_test, y_preed)\nrae = r2_score(y_test, y_preed)\nmew = mean_absolute_error(y_test,y_preed)\nprint(\"Mean Squared Error:\",ms)\nprint(\"R score:\",rae)\nprint(\"Mean Absolute Error:\",mew)\n\nprint('f1 score:')\nprint(f1_score(y_test,y_preed))\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_preed))","1a996f07":"Thus we can see that the SVM, KNN and the Naive Bayes algorithms produce the most accurate results."}}