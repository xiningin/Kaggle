{"cell_type":{"a5586598":"code","6e016af0":"code","39cb0e5b":"code","97e4ce07":"code","22ce80d1":"code","6599eab9":"code","ae870d26":"code","e5466ff6":"code","af53a3a8":"code","c84ef166":"code","fe3aea9a":"code","fca43f8e":"code","bf355348":"code","a20f7beb":"code","bb534056":"code","83684313":"code","4abf1f43":"code","b5cc2d2a":"code","ca9b5800":"code","6b48f473":"code","50d10824":"code","22b5e009":"code","e87fa093":"code","3ebdb3a9":"code","79af7015":"code","f7d069ad":"code","1ddd59ee":"code","173324d9":"code","1039adf9":"code","ec77d0bb":"code","e14c553b":"code","7ddc137e":"markdown","e0484e17":"markdown","c17afff2":"markdown","02b883c5":"markdown","b3dec1db":"markdown","1c821826":"markdown","fd95c1a9":"markdown","67be8c73":"markdown","c5bad289":"markdown","e3209c0a":"markdown","58d594a6":"markdown","095d0501":"markdown","ce85d324":"markdown","041721e2":"markdown","2beeee3a":"markdown","7ee8d4c5":"markdown","d7febfbc":"markdown","1be614d9":"markdown","46769974":"markdown","7f9520bd":"markdown","346b1e75":"markdown"},"source":{"a5586598":"import warnings\nwarnings.filterwarnings('ignore')\n\n#the basics\nimport pandas as pd, numpy as np, seaborn as sns\nimport math, json, os, random\nfrom matplotlib import pyplot as plt\nfrom tqdm import tqdm\n\n#tensorflow basics\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nimport keras.backend as K\n\n#for model evaluation\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, RepeatedStratifiedKFold","6e016af0":"def seed_everything(seed = 34):\n    os.environ['PYTHONHASHSEED']=str(seed)\n    tf.random.set_seed(seed)\n    np.random.seed(seed)\n    random.seed(seed)\n    \nseed_everything()","39cb0e5b":"#get comp data\ntrain = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/test.json', lines=True)\nsample_sub = pd.read_csv('\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv')","97e4ce07":"print(train.columns)","22ce80d1":"#sneak peak\nprint(train.shape)\nif ~ train.isnull().values.any(): print('No missing values')\ntrain.head()","6599eab9":"#sneak peak\nprint(test.shape)\nif ~ test.isnull().values.any(): print('No missing values')\ntest.head()","ae870d26":"#sneak peak\nprint(sample_sub.shape)\nif ~ sample_sub.isnull().values.any(): print('No missing values')\nsample_sub.head()","e5466ff6":"fig, ax = plt.subplots(1, 2, figsize = (15, 5))\nsns.kdeplot(train['signal_to_noise'], shade = True, ax = ax[0])\nsns.countplot(train['SN_filter'], ax = ax[1])\n\nax[0].set_title('Signal\/Noise Distribution')\nax[1].set_title('Signal\/Noise Filter Distribution');","af53a3a8":"print(f\"Samples with signal_to_noise greater than 1: {len(train.loc[(train['signal_to_noise'] > 1 )])}\")\nprint(f\"Samples with SN_filter = 1: {len(train.loc[(train['SN_filter'] == 1 )])}\")","c84ef166":"#target columns\ntarget_cols = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']","fe3aea9a":"token2int = {x:i for i, x in enumerate('().ACGUBEHIMSX')}","fca43f8e":"def preprocess_inputs(df, cols=['sequence', 'structure', 'predicted_loop_type']):\n    return np.transpose(\n        np.array(\n            df[cols]\n            .applymap(lambda seq: [token2int[x] for x in seq])\n            .values\n            .tolist()\n        ),\n        (0, 2, 1)\n    )","bf355348":"def rmse(y_actual, y_pred):\n    mse = tf.keras.losses.mean_squared_error(y_actual, y_pred)\n    return K.sqrt(mse)\n\ndef mcrmse(y_actual, y_pred, num_scored=len(target_cols)):\n    score = 0\n    for i in range(num_scored):\n        score += rmse(y_actual[:, :, i], y_pred[:, :, i]) \/ num_scored\n    return score","a20f7beb":"train_inputs = preprocess_inputs(train)\ntrain_labels = np.array(train[target_cols].values.tolist()).transpose((0, 2, 1))","bb534056":"len(token2int)","83684313":"def gru_layer(hidden_dim, dropout):\n    return tf.keras.layers.Bidirectional(\n                                tf.keras.layers.GRU(hidden_dim,\n                                dropout=dropout,\n                                return_sequences=True,\n                                kernel_initializer='orthogonal'))\n\ndef lstm_layer(hidden_dim, dropout):\n    return tf.keras.layers.Bidirectional(\n                                tf.keras.layers.LSTM(hidden_dim,\n                                dropout=dropout,\n                                return_sequences=True,\n                                kernel_initializer='orthogonal'))\n\ndef build_model(gru=False, lstm=False, seq_len=107, pred_len=68, dropout=0.4,\n                embed_dim=100, hidden_dim=128, layers=3):\n    \n    inputs = tf.keras.layers.Input(shape=(seq_len, 3))\n\n    embed = tf.keras.layers.Embedding(input_dim=len(token2int), output_dim=embed_dim)(inputs)\n    reshaped = tf.reshape(\n        embed, shape=(-1, embed.shape[1],  embed.shape[2] * embed.shape[3]))\n    \n    hidden = tf.keras.layers.SpatialDropout1D(.2)(reshaped)\n    \n    if gru:\n        for _ in range(layers):\n            hidden = gru_layer(hidden_dim, dropout)(hidden)\n        \n    elif lstm:\n        for _ in range(layers):\n            hidden = lstm_layer(hidden_dim, dropout)(hidden)\n    \n    #only making predictions on the first part of each sequence\n    truncated = hidden[:, :pred_len]\n    \n    out = tf.keras.layers.Dense(5, activation='linear')(truncated)\n\n    model = tf.keras.Model(inputs=inputs, outputs=out)\n\n    #some optimizers\n    adam = tf.optimizers.Adam()\n    radam = tfa.optimizers.RectifiedAdam()\n    lookahead = tfa.optimizers.Lookahead(adam, sync_period=6)\n    ranger = tfa.optimizers.Lookahead(radam, sync_period=6)\n    \n    model.compile(optimizer=adam, loss=mcrmse)\n    \n    return model","4abf1f43":"#basic training configuration\nFOLDS = 4\nEPOCHS = 120\nREPEATS = 1\nBATCH_SIZE = 64\nVERBOSE = 2\nSEED = 34","b5cc2d2a":"#get different test sets and process each\npublic_df = test.query(\"seq_length == 107\").copy()\nprivate_df = test.query(\"seq_length == 130\").copy()\n\npublic_inputs = preprocess_inputs(public_df)\nprivate_inputs = preprocess_inputs(private_df)","ca9b5800":"if tf.config.list_physical_devices('GPU') is not None:\n    print('Training on GPU')","6b48f473":"lr_callback = tf.keras.callbacks.ReduceLROnPlateau()","50d10824":"gru_histories = []\ngru_private_preds = np.zeros((private_df.shape[0], 130, 5))\ngru_public_preds = np.zeros((public_df.shape[0], 107, 5))\n\nrskf = RepeatedStratifiedKFold(FOLDS, n_repeats = REPEATS, random_state = SEED)\n\nfor f, (train_index, val_index) in enumerate(rskf.split(train_inputs, train['SN_filter'])):\n\n    sv_gru = tf.keras.callbacks.ModelCheckpoint(f'gru-{f}.h5')\n\n    train_ = train_inputs[train_index]\n    train_labs = train_labels[train_index]\n    val_ = train_inputs[val_index]\n    val_labs = train_labels[val_index]\n\n    gru = build_model(gru=True)\n    history = gru.fit(train_, train_labs, \n                      validation_data=(val_,val_labs),\n                      batch_size=BATCH_SIZE,\n                      epochs=EPOCHS,\n                      callbacks=[lr_callback,sv_gru],\n                      verbose = VERBOSE)  \n\n    gru_histories.append(history)\n\n    #load best model and predict\n    gru_short = build_model(gru=True, seq_len=107, pred_len=107)\n    gru_short.load_weights(f'gru-{f}.h5')\n    gru_public_pred = gru_short.predict(public_inputs) \/ FOLDS\n\n    gru_long = build_model(gru=True, seq_len=130, pred_len=130)\n    gru_long.load_weights(f'gru-{f}.h5')\n    gru_private_pred = gru_long.predict(private_inputs) \/ FOLDS * REPEATS\n\n    gru_public_preds += gru_public_pred\n    gru_private_preds += gru_private_pred\n\n    del gru_short, gru_long","22b5e009":"print(f\" GRU mean fold MCRMSE: {np.mean([min(history.history['val_loss']) for history in gru_histories])}\")","e87fa093":"lstm_histories = []\nlstm_private_preds = np.zeros((private_df.shape[0], 130, 5))\nlstm_public_preds = np.zeros((public_df.shape[0], 107, 5))\n\nrskf = RepeatedStratifiedKFold(FOLDS, n_repeats = REPEATS, random_state = SEED)\n\nfor f, (train_index, val_index) in enumerate(rskf.split(train_inputs, train['SN_filter'])):\n\n    sv_gru = tf.keras.callbacks.ModelCheckpoint(f'lstm-{f}.h5')\n\n    train_ = train_inputs[train_index]\n    train_labs = train_labels[train_index]\n    val_ = train_inputs[val_index]\n    val_labs = train_labels[val_index]\n\n    lstm = build_model(lstm=True)\n    history = lstm.fit(\n                        train_, train_labs, \n                        validation_data=(val_,val_labs),\n                        batch_size=BATCH_SIZE,\n                        epochs=EPOCHS,\n                        callbacks=[lr_callback,sv_gru],\n                        verbose = VERBOSE)  \n\n    lstm_histories.append(history)\n\n    #load best model and predict\n    lstm_short = build_model(lstm=True, seq_len=107, pred_len=107)\n    lstm_short.load_weights(f'lstm-{f}.h5')\n    lstm_public_pred = lstm_short.predict(public_inputs) \/ FOLDS\n\n    lstm_long = build_model(lstm=True, seq_len=130, pred_len=130)\n    lstm_long.load_weights(f'lstm-{f}.h5')\n    lstm_private_pred = lstm_long.predict(private_inputs) \/ FOLDS * REPEATS\n\n    lstm_public_preds += lstm_public_pred\n    lstm_private_preds += lstm_private_pred\n\n    del lstm_short, lstm_long","3ebdb3a9":"print(f\" LSTM mean fold validation MCRMSE: {np.mean([min(history.history['val_loss']) for history in lstm_histories])}\")","79af7015":"fig, ax = plt.subplots(1, 2, figsize = (20, 10))\n\nfor history in gru_histories:\n    ax[0].plot(history.history['loss'], color='C0')\n    ax[0].plot(history.history['val_loss'], color='C1')\nfor history in lstm_histories:\n    ax[1].plot(history.history['loss'], color='C0')\n    ax[1].plot(history.history['val_loss'], color='C1')\n\nax[0].set_title('GRU')\nax[1].set_title('LSTM')\n\nax[0].legend(['train', 'validation'], loc = 'upper right')\nax[1].legend(['train', 'validation'], loc = 'upper right')\n\nax[0].set_ylabel('MCRMSE')\nax[0].set_xlabel('Epoch')\nax[1].set_ylabel('MCRMSE')\nax[1].set_xlabel('Epoch');","f7d069ad":"public_df = test.query(\"seq_length == 107\").copy()\nprivate_df = test.query(\"seq_length == 130\").copy()\n\npublic_inputs = preprocess_inputs(public_df)\nprivate_inputs = preprocess_inputs(private_df)","1ddd59ee":"preds_gru = []\n\nfor df, preds in [(public_df, gru_public_preds), (private_df, gru_private_preds)]:\n    for i, uid in enumerate(df.id):\n        single_pred = preds[i]\n\n        single_df = pd.DataFrame(single_pred, columns=target_cols)\n        single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n        preds_gru.append(single_df)\n\npreds_gru_df = pd.concat(preds_gru)\npreds_gru_df.head()","173324d9":"preds_lstm = []\n\nfor df, preds in [(public_df, lstm_public_preds), (private_df, lstm_private_preds)]:\n    for i, uid in enumerate(df.id):\n        single_pred = preds[i]\n\n        single_df = pd.DataFrame(single_pred, columns=target_cols)\n        single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n        preds_lstm.append(single_df)\n\npreds_lstm_df = pd.concat(preds_lstm)\npreds_lstm_df.head()","1039adf9":"blend_preds_df = pd.DataFrame()\nblend_preds_df['id_seqpos'] = preds_gru_df['id_seqpos']\nblend_preds_df['reactivity'] = .5*preds_gru_df['reactivity'] + .5*preds_lstm_df['reactivity']\nblend_preds_df['deg_Mg_pH10'] = .5*preds_gru_df['deg_Mg_pH10'] + .5*preds_lstm_df['deg_Mg_pH10']\nblend_preds_df['deg_pH10'] = .5*preds_gru_df['deg_pH10'] + .5*preds_lstm_df['deg_pH10']\nblend_preds_df['deg_Mg_50C'] = .5*preds_gru_df['deg_Mg_50C'] + .5*preds_lstm_df['deg_Mg_50C']\nblend_preds_df['deg_50C'] = .5*preds_gru_df['deg_50C'] + .5*preds_lstm_df['deg_50C']","ec77d0bb":"submission = sample_sub[['id_seqpos']].merge(blend_preds_df, on=['id_seqpos'])\n\n#sanity check\nsubmission.head()","e14c553b":"submission.to_csv('submission.csv', index=False)\nprint('Submission saved')","7ddc137e":"### Submit Sample","e0484e17":"### 2. LSTM","c17afff2":"# IV. KFold Training and Inference\n\n**Note that I am stratifying by `SN_filter`. I want each fold to train and be evaulated on a similar distribution of high-to-low quality samples.**  ","02b883c5":"### Create Submission file","b3dec1db":"**It seems that `SN_filter = 1` filters more than just `signal_to_noise > 1`, so my guess it that `SN_filter = 1` performs step 1) and step 2).**","1c821826":"### 1. GRU","fd95c1a9":"# I. Brief EDA\n\n**From the data [description tab](https:\/\/www.kaggle.com\/c\/stanford-covid-vaccine\/data), we must predict multiple ground truths in this competition, 5 to be exact. While the submission requires all 5, only 3 are scored: `reactivity`, `deg_Mg_pH10` and `deg_Mg_50C`. It might be interesting to see how performance differs when training for all 5 predictors vs. just the 3 that are scored.**\n\n**The training features we are given are as follows:**\n\n* **id** - An arbitrary identifier for each sample.\n* **seq_scored** - (68 in Train and Public Test, 91 in Private Test) Integer value denoting the number of positions used in scoring with predicted values. This should match the length of `reactivity`, `deg_*` and `*_error_*` columns. Note that molecules used for the Private Test will be longer than those in the Train and Public Test data, so the size of this vector will be different.\n* **seq_length** - (107 in Train and Public Test, 130 in Private Test) Integer values, denotes the length of `sequence`. Note that molecules used for the Private Test will be longer than those in the Train and Public Test data, so the size of this vector will be different.\n* **sequence** - (1x107 string in Train and Public Test, 130 in Private Test) Describes the RNA sequence, a combination of `A`, `G`, `U`, and `C` for each sample. Should be 107 characters long, and the first 68 bases should correspond to the 68 positions specified in `seq_scored` (note: indexed starting at 0).\n* **structure** - (1x107 string in Train and Public Test, 130 in Private Test) An array of `(`, `)`, and `.` characters that describe whether a base is estimated to be paired or unpaired. Paired bases are denoted by opening and closing parentheses e.g. (....) means that base 0 is paired to base 5, and bases 1-4 are unpaired.\n* **reactivity** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likely secondary structure of the RNA sample.\n* **deg_pH10** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likelihood of degradation at the base\/linkage after incubating without magnesium at high pH (pH 10).\n* **deg_Mg_pH10** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likelihood of degradation at the base\/linkage after incubating with magnesium in high pH (pH 10).\n* **deg_50C** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likelihood of degradation at the base\/linkage after incubating without magnesium at high temperature (50 degrees Celsius).\n* **deg_Mg_50C** - (1x68 vector in Train and Public Test, 1x91 in Private Test) An array of floating point numbers, should have the same length as `seq_scored`. These numbers are reactivity values for the first 68 bases as denoted in `sequence`, and used to determine the likelihood of degradation at the base\/linkage after incubating with magnesium at high temperature (50 degrees Celsius).\n* **`*_error_*`** - An array of floating point numbers, should have the same length as the corresponding `reactivity` or `deg_*` columns, calculated errors in experimental values obtained in `reactivity` and `deg_*` columns.\n* **predicted_loop_type** - (1x107 string) Describes the structural context (also referred to as 'loop type')of each character in `sequence`. Loop types assigned by bpRNA from Vienna RNAfold 2 structure. From the bpRNA_documentation: S: paired \"Stem\" M: Multiloop I: Internal loop B: Bulge H: Hairpin loop E: dangling End X: eXternal loop","67be8c73":"# Competition Overview\n\n**In this [new competition](https:\/\/www.kaggle.com\/c\/stanford-covid-vaccine\/overview) we are helping to fight against the worldwide pandemic COVID-19. mRNA vaccines are the fastest vaccine candidates to treat COVID-19 but they currently facing several limitations. In particular, it is a challenge to design stable messenger RNA molecules. Typical vaccines are packaged in syringes and shipped under refrigeration around the world, but that is not possible for mRNA vaccines (currently).**\n\n**Researches have noticed that RNA molecules tend to spontaneously degrade, which is highly problematic because a single cut can render mRNA vaccines useless. Not much is known about which part of the backbone of a particular RNA is most susceptible to being damaged.**\n\n**Without this knowledge, the current mRNA vaccines are shopped under intense refrigeration and are unlikely to reach enough humans unless they can be stabilized. This is our task as Kagglers: we must create a model to predict the most likely degradation rates at each base of an RNA molecule.**\n\n**We are given a subset of an Eterna dataset comprised of over 3000 RNA molecules and their degradation rates at each position. Our models are then tested on the new generation of RNA sequences that were just created by Eterna players for COVID-19 mRNA vaccines**\n\n**Before we get started, please check out [Xhlulu](https:\/\/www.kaggle.com\/xhlulu)'s notebook [here](https:\/\/www.kaggle.com\/xhlulu\/openvaccine-simple-gru-model) as this one is based on it: I just added comments, made minor code changes, an LSTM, and fold training:**","c5bad289":"**Now we explore `signal_to_noise` and `SN_filter` distributions. As per the data tab of this competition the samples in `test.json` have been filtered in the following way:**\n\n1. Minimum value across all 5 conditions must be greater than -0.5.\n2. Mean signal\/noise across all 5 conditions must be greater than 1.0. [Signal\/noise is defined as mean( measurement value over 68 nts )\/mean( statistical error in measurement value over 68 nts)]\n3. To help ensure sequence diversity, the resulting sequences were clustered into clusters with less than 50% sequence similarity, and the 629 test set sequences were chosen from clusters with 3 or fewer members. That is, any sequence in the test set should be sequence similar to at most 2 other sequences.\n\n**But these filters have not been applied to the samples in `train.json` or the private test set of this competition, so we will likely see public leaderboard improvement by filtering `train.json` the same way that `test.json` was filtered.**\n\n**We can do 2) by setting `train['signal_to_noise'] > 1`. Now, I am not sure how `SN_filter` is related to this, so let's explore a bit further:**","e3209c0a":"**Now we just need to change the shape of each sample to long format:**","58d594a6":"# II. Processing","095d0501":"**We can filter by `SN_filter == 1` to train on only samples with similar statistics to those in `test.json`. Be careful using this though, as only the public leaderboard test set has filtered samples whereas the private one does not (more [here](https:\/\/www.kaggle.com\/c\/stanford-covid-vaccine\/data)). So it might improve your public LB score, but we do not know if it helps (it could even hurt) performance on the private test set. That being said, I am *not* going to train with any sort of sample filters:**","ce85d324":"**And blend; for now, we stick with 50\/50:**","041721e2":"#  Vaccine Degradation Prediction","2beeee3a":"**Now we do the same for the LSTM model so we can blend their predictions:**","7ee8d4c5":"# Version Changes\n\n**Version 10**:\n\n* added competition metric, as inspired by [Xhlulu](https:\/\/www.kaggle.com\/xhlulu)'s discussion post [here](https:\/\/www.kaggle.com\/c\/stanford-covid-vaccine\/discussion\/183211)\n* removed filtering (no `SN_filter == 1` constraint)\n* added kfold stratification by `SN_filter`\n","d7febfbc":"**Now we tokenize our RNA sequences so we can feed it to our model:**","1be614d9":"# III. Model\n\n**The below RNN architecture is adapted from the one and only [Xhlulu](https:\/\/www.kaggle.com\/xhlulu)'s notebook [here](https:\/\/www.kaggle.com\/xhlulu\/openvaccine-simple-gru-model). For his explanation of the model\/procedure, see his discussion post [here](https:\/\/www.kaggle.com\/c\/stanford-covid-vaccine\/discussion\/182303). I have made minor tweaks to some parameters and added an LSTM to experiment with blending.**\n\n**Note that for submission, the output must be the same length as the input, which is 107 for `train.json` and `test.json` and 130 for the private test set. However, this is not true for training, so training prediction sequences only need to be 68 long**\n\n**So we actually build 3 different models: one for training, one for predicting public test, and one for predicting private test set, each with different sequence lengths and prediction lengths. Luckily, we only need to train one model, save its weights, and load these weights into the other models.**\n\n**The last thing to set is the size of the embedding layer. In the context of NLP, the input dimension size of an embedding layer is the size of the vocabulary, which in our case is `len(token2int)`. The output dimension is typically the length of the pre-trained vectors you are using, like the GloVe vectors or Word2Vec vectors, which we don't have in this case, so we are free to experiment with different sizes. Let's use 100 for now as a starting point**","46769974":"# V. Submission\n\n**Again, thank you to [Xhlulu](https:\/\/www.kaggle.com\/xhlulu)'s notebook [here](https:\/\/www.kaggle.com\/xhlulu\/openvaccine-simple-gru-model) for providing this submission-formatting code**","7f9520bd":"**It seems we also have a `signal_to_noise` and a `SN_filter` column. These columns control the 'quality' of samples, and as such are important training hyperparameters. We will explore them shortly:**","346b1e75":"**We add a simple learning rate callback for now:**"}}