{"cell_type":{"e8afa616":"code","4256c3c7":"code","d6c43ba3":"code","7ff61417":"code","7d4c01c1":"code","8bae3cf4":"code","94b65709":"code","08d711b4":"code","3642ba0a":"code","94a46ac8":"code","cc70b2c0":"code","0c085294":"code","492a1860":"code","6be85f61":"code","1906b70c":"code","0b27a4d1":"code","3f75dfb8":"code","54cae3e1":"code","4b73db08":"code","8a151dc3":"code","ca4999ca":"code","7340c09b":"code","5850320a":"code","4c0466a2":"code","866935d0":"code","33d012f5":"code","4c139a29":"code","40ddabc1":"code","a8744c8c":"code","c2674cd5":"code","4aab2e9f":"code","950a48e2":"code","d0bb0fe4":"markdown","2a774a0e":"markdown","ea00bff8":"markdown","fe5a82a1":"markdown","bd6f2ef0":"markdown","6d96e7f6":"markdown","a6344cf8":"markdown","02460f33":"markdown","c3d6346f":"markdown","443613d6":"markdown","a5cb5cca":"markdown","2e8b7231":"markdown","3d158cb3":"markdown","e846a713":"markdown","7edce5ae":"markdown","1d21f7ca":"markdown","c2346748":"markdown","db691879":"markdown","54d69685":"markdown","8eaa1e4a":"markdown","161635e9":"markdown","62bfcdca":"markdown","ade6c4a4":"markdown","481c4fbd":"markdown"},"source":{"e8afa616":"# Importing Librarys\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV # to split the data\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve #To evaluate our model\nfrom sklearn.externals import joblib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom IPython.display import display, HTML\npd.set_option('display.max_columns', None)\n\n# Algorithmns models to be compared\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom xgboost import XGBClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","4256c3c7":"df=pd.read_csv(\"..\/input\/german-data\/german.data\",sep=\" \",header=None)\nheaders=[\"Status of existing checking account\",\"Duration in month\",\"Credit history\",\\\n         \"Purpose\",\"Credit amount\",\"Savings account\/bonds\",\"Present employment since\",\\\n         \"Installment rate in percentage of disposable income\",\"Personal status and sex\",\\\n         \"Other debtors \/ guarantors\",\"Present residence since\",\"Property\",\"Age in years\",\\\n        \"Other installment plans\",\"Housing\",\"Number of existing credits at this bank\",\\\n        \"Job\",\"Number of people being liable to provide maintenance for\",\"Telephone\",\"foreign worker\",\"Risk\"]\ndf.columns=headers","d6c43ba3":"print(df.shape)\nprint (df.columns)","7ff61417":"# To preview the data set\ndf.head(5)","7d4c01c1":"# Looking unique values\nprint(df.nunique())","8bae3cf4":"# Remove the missing values\ndf = df.dropna(how='any',axis=0)","94b65709":"Status_of_existing_checking_account={'A14':\"no checking account\",'A11':\"<0 SGD\", 'A12': \"0 <= <200 SGD\",'A13':\">= 200 SGD \"}\ndf[\"Status of existing checking account\"]=df[\"Status of existing checking account\"].map(Status_of_existing_checking_account)\n\nCredit_history={\"A34\":\"critical account\",\"A33\":\"delay in paying off\",\"A32\":\"existing credits paid back duly till now\",\"A31\":\"all credits at this bank paid back duly\",\"A30\":\"no credits taken\"}\ndf[\"Credit history\"]=df[\"Credit history\"].map(Credit_history)\n\nPurpose={\"A40\" : \"car (new)\", \"A41\" : \"car (used)\", \"A42\" : \"furniture\/equipment\", \"A43\" :\"radio\/television\" , \"A44\" : \"domestic appliances\", \"A45\" : \"repairs\", \"A46\" : \"education\", 'A47' : 'vacation','A48' : 'retraining','A49' : 'business','A410' : 'others'}\ndf[\"Purpose\"]=df[\"Purpose\"].map(Purpose)\n\nSaving_account={\"A65\" : \"no savings account\",\"A61\" :\"<100 SGD\",\"A62\" : \"100 <= <500 SGD\",\"A63\" :\"500 <= < 1000 SGD\", \"A64\" :\">= 1000 SGD\"}\ndf[\"Savings account\/bonds\"]=df[\"Savings account\/bonds\"].map(Saving_account)\n\nPresent_employment={'A75':\">=7 years\", 'A74':\"4<= <7 years\",  'A73':\"1<= < 4 years\", 'A72':\"<1 years\",'A71':\"unemployed\"}\ndf[\"Present employment since\"]=df[\"Present employment since\"].map(Present_employment)\n\nPersonal_status_and_sex={ 'A95':\"female:single\",'A94':\"male:married\/widowed\",'A93':\"male:single\", 'A92':\"female:divorced\/separated\/married\", 'A91':\"male:divorced\/separated\"}\ndf[\"Personal status and sex\"]=df[\"Personal status and sex\"].map(Personal_status_and_sex)\n\nOther_debtors_guarantors={'A101':\"none\", 'A102':\"co-applicant\", 'A103':\"guarantor\"}\ndf[\"Other debtors \/ guarantors\"]=df[\"Other debtors \/ guarantors\"].map(Other_debtors_guarantors)\n\nProperty={'A121':\"real estate\", 'A122':\"savings agreement\/life insurance\", 'A123':\"car or other\", 'A124':\"unknown \/ no property\"}\ndf[\"Property\"]=df[\"Property\"].map(Property)\n\nOther_installment_plans={'A143':\"none\", 'A142':\"store\", 'A141':\"bank\"}\ndf[\"Other installment plans\"]=df[\"Other installment plans\"].map(Other_installment_plans)\n\nHousing={'A153':\"for free\", 'A152':\"own\", 'A151':\"rent\"}\ndf[\"Housing\"]=df[\"Housing\"].map(Housing)\n\nJob={'A174':\"management\/ highly qualified employee\", 'A173':\"skilled employee \/ official\", 'A172':\"unskilled - resident\", 'A171':\"unemployed\/ unskilled  - non-resident\"}\ndf[\"Job\"]=df[\"Job\"].map(Job)\n\nTelephone={'A192':\"yes\", 'A191':\"none\"}\ndf[\"Telephone\"]=df[\"Telephone\"].map(Telephone)\n\nforeign_worker={'A201':\"yes\", 'A202':\"no\"}\ndf[\"foreign worker\"]=df[\"foreign worker\"].map(foreign_worker)\n\nrisk={1:\"Good Risk\", 2:\"Bad Risk\"}\ndf[\"Risk\"]=df[\"Risk\"].map(risk)","08d711b4":"df.head(5)","3642ba0a":"# Total number of good and bad risk\nax = sns.catplot(x='Risk', kind=\"count\", palette=\"ch:.25\", data=df)\nax.fig.subplots_adjust(top=0.9)\nax.fig.suptitle('Total number of Good and Bad risk', fontsize=16)","94a46ac8":"# Amount of loans granted according to purpose\nn_credits = df.groupby(\"Purpose\")[\"Personal status and sex\"].count().rename(\"Count\").reset_index()\nn_credits.sort_values(by=[\"Count\"], ascending=False, inplace=True)\n\nplt.figure(figsize=(10,6))\nbar = sns.barplot(x=\"Purpose\",y=\"Count\",data=n_credits)\nbar.set_xticklabels(bar.get_xticklabels(), rotation=60)\nplt.title(\"Amount of loans granted according to Purpose\")\nplt.ylabel(\"Number of granted credits\")\nplt.tight_layout()","cc70b2c0":"# Amount of loans granted according to age group\nn_credits = df.groupby(\"Age in years\")[\"Personal status and sex\"].count().rename(\"Count\").reset_index()\nn_credits.sort_values(by=[\"Count\"], ascending=False, inplace=True)\n\nplt.figure(figsize=(10,6))\nbar = sns.barplot(x=\"Age in years\",y=\"Count\",data=n_credits)\nbar.set_xticklabels(bar.get_xticklabels(), rotation=60)\nplt.title(\"Amount of loans granted according to age group\")\nplt.ylabel(\"Number of granted credits\")\nplt.tight_layout()","0c085294":"# Credit Distribution based on sex\n\nfig = plt.figure(figsize=(7,7))   # Veri k\u00fcmesinde ki cinsiyet da\u011f\u0131l\u0131m\u0131\ndf['Personal status and sex'].value_counts().plot(kind = 'pie', autopct='%.1f%%')\nplt.ylabel(\" \", fontsize = 20)\nplt.title(\"Credit Distribution by Personal status and sex\")\nprint(\"\")","492a1860":"def style_stats_specific_cell(x):\n\n    color_thresh = 'background-color: red'\n    \n    df_color = pd.DataFrame('', index=x.index, columns=x.columns)\n    rows_number=len(x.index)\n    for r in range(0,rows_number):\n        try:\n            val=(x.iloc[r, 1])\n            if val>0.05:\n                df_color.iloc[r, 1]=color_thresh\n        except:\n            pass\n    return df_color","6be85f61":"column_names_cat_stats=[\"Status of existing checking account\",\"Credit history\",\"Purpose\",\\\n\"Savings account\/bonds\",\"Present employment since\",\\\n\"Installment rate in percentage of disposable income\",\"Personal status and sex\",\\\n\"Other debtors \/ guarantors\",\"Present residence since\",\"Property\",\\\n\"Other installment plans\",\"Housing\",\"Number of existing credits at this bank\",\\\n\"Job\",\"Number of people being liable to provide maintenance for\",\"Telephone\",\"foreign worker\"]\n\nstatistical_significance=[]\nfor attr in column_names_cat_stats:\n    data_count=pd.crosstab(df[attr],df[\"Risk\"]).reset_index()\n    obs=np.asarray(data_count[[\"Bad Risk\",\"Good Risk\"]])\n    chi2, p, dof, expected = stats.chi2_contingency(obs)\n    statistical_significance.append([attr,round(p,4)])\nstatistical_significance=pd.DataFrame(statistical_significance)\nstatistical_significance.columns=[\"Attribute\",\"P-value\"]\ndisplay(statistical_significance.style.apply(style_stats_specific_cell, axis=None))\n\nprint(\"\\n\")\n\nstatistical_significance=[]\ncolumn_names_cont_stats=[\"Credit amount\",\"Age in years\",\"Duration in month\"]\ngood_risk_df = df[df[\"Risk\"]==\"Good Risk\"]\nbad_risk_df = df[df[\"Risk\"]==\"Bad Risk\"]\nfor attr in column_names_cont_stats:\n    statistic, p=stats.f_oneway(good_risk_df[attr].values,bad_risk_df[attr].values)\n    statistical_significance.append([attr,round(p,4)])\nstatistical_significance=pd.DataFrame(statistical_significance)\nstatistical_significance.columns=[\"Attribute\",\"P-value\"]\ndisplay(statistical_significance.style.apply(style_stats_specific_cell, axis=None))","1906b70c":"attr_significant=[\"Status of existing checking account\",\"Credit history\",\"Purpose\",\\\n\"Savings account\/bonds\",\"Present employment since\",\\\n\"Personal status and sex\",\"Property\",\"Other installment plans\",\"Housing\",\"foreign worker\",\\\n\"Credit amount\",\"Age in years\",\"Duration in month\"]\ntarget_variable=[\"Risk\"]\ndf=df[attr_significant+target_variable]","0b27a4d1":"col_cat_names=[\"Status of existing checking account\",\"Credit history\",\"Purpose\",\\\n\"Savings account\/bonds\",\"Present employment since\",\\\n\"Personal status and sex\",\"Property\",\"Other installment plans\",\"Housing\",\"foreign worker\"]\nfor attr in col_cat_names:\n    df = df.merge(pd.get_dummies(df[attr], prefix=attr), left_index=True, right_index=True)\n    df.drop(attr,axis=1,inplace=True)","3f75dfb8":"df.head(5)","54cae3e1":"risk={\"Good Risk\":1, \"Bad Risk\":0}\ndf[\"Risk\"]=df[\"Risk\"].map(risk)","4b73db08":"X = df.drop('Risk', 1).values #independent variables\ny = df[\"Risk\"].values #target variables","8a151dc3":"plt.figure(figsize=(14,12))\nsns.heatmap(df.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True,  linecolor='white', annot=True)\nplt.show()","ca4999ca":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=7)","7340c09b":"# to feed the random state\nseed = 7\nresults = []\nnames = []\nscoring = 'recall'\n\n# prepare models\nmodels = []\nmodels.append(('LogisticRegression\\t\\t', LogisticRegression()))\nmodels.append(('LinearDiscriminantAnalysis\\t', LinearDiscriminantAnalysis()))\nmodels.append(('KNeighborsClassifier\\t\\t', KNeighborsClassifier()))\nmodels.append(('DecisionTreeClassifier\\t\\t', DecisionTreeClassifier()))\nmodels.append(('GaussianNB\\t\\t\\t', GaussianNB()))\nmodels.append(('RandomForestClassifier\\t\\t', RandomForestClassifier()))\nmodels.append(('SVC\\t\\t\\t\\t', SVC(gamma='auto')))\nmodels.append(('GradientBoostingClassifier\\t', GradientBoostingClassifier()))\nmodels.append(('XGBClassifier\\t\\t\\t', XGBClassifier()))\nprint(\"Accuracy_Score:\")\nprint(\"--------------\")\nfor name, model in models:\n    model.fit(X_train,y_train)\n    kfold = KFold(n_splits=10, random_state=seed)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    print(name,'= {0:.0f}%'.format(accuracy_score(y_test, model.predict(X_test)) * 100))","5850320a":"importance = model.feature_importances_\nfeature_indexes_by_importance = importance.argsort()\n\nfor index in feature_indexes_by_importance:\n  print(\"{} - {:.2f}%\".format(df.columns[index], (importance[index] * 100.0)))","4c0466a2":"model = XGBClassifier()\nmodel.fit(X_train, y_train)\nprint('Accuracy_Score = {:.0f}%'.format(accuracy_score(y_test, model.predict(X_test)) * 100))\nprint('classification_report = ',classification_report(y_test, model.predict(X_test)))","866935d0":"param_grid = {\"max_depth\": [3, 5, 7, 10],\n              \"n_estimators\":[10, 50, 250, 500, 1000],\n              \"max_features\": [4, 7, 15, 20],\n              \"learning_rate\": [0.1, 0.05, 0.001]}\nmodel = XGBClassifier()\ngrid_search = GridSearchCV(model, param_grid=param_grid, n_jobs=4, verbose=100)\ngrid_search.fit(X_train, y_train)","33d012f5":"print(grid_search.best_params_)","4c139a29":"model = XGBClassifier(learning_rate= 0.05, max_depth= 3, max_features= 4, n_estimators= 250)\nmodel.fit(X_train, y_train)\nprint(model, '\\nAccuracy_Score = {:.0f}%'.format(accuracy_score(y_test, model.predict(X_test)) * 100))\nprint('Classification_Report = ',classification_report(y_test, model.predict(X_test)))","40ddabc1":"joblib.dump(model, 'trained_credit_risk_model.pkl')","a8744c8c":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\nprint(model, '\\nAccuracy_Score = {:.0f}%'.format(accuracy_score(y_test, model.predict(X_test)) * 100))\nprint('classification_report = ',classification_report(y_test, model.predict(X_test)))","c2674cd5":"dual=[True,False]\nmax_iter=[100,110,120,130,140]\nC = [1.0,1.5,2.0,2.5]\nparam_grid = dict(dual=dual,max_iter=max_iter,C=C)\nmodel = LogisticRegression()\ngrid_search = GridSearchCV(model, param_grid, n_jobs=4, verbose=100)\ngrid_search.fit(X_train, y_train)","4aab2e9f":"print(grid_search.best_params_)","950a48e2":"model = LogisticRegression(C= 1.0, dual= False, max_iter= 100)\nmodel.fit(X_train, y_train)\nprint(model, '\\nAccuracy_Score = {:.0f}%'.format(accuracy_score(y_test, model.predict(X_test)) * 100))\nprint('classification_report = ',classification_report(y_test, model.predict(X_test)))","d0bb0fe4":"### Print the best parameter based on GridSearchCV result (LogisticRegression)","2a774a0e":"## Model Selection\nFit the selected classification algorithms in the training set and find the accuracy of each algorithm.\n\n*Models = [RandomForestClassifier(), LogisticRegression(), DecisionTreeClassifier(), KNeighborsClassifier(), LinearDiscriminantAnalysis(),GaussianNB(), SVC(), GradientBoostingClassifier(), XGBClassifier()]*","ea00bff8":"## Data Preprocessing","fe5a82a1":"## Feature Engineering\nStatistical Test to determine whether input features are relevant to the outcome to be predicted.\n##### P-value <= 0.05 significant result\n##### P-value > 0.05 not significant result","bd6f2ef0":"### Print the best parameter based on GridSearchCV result (XGBClassifier)","6d96e7f6":"## Model Selection (XGBClassifier)\nFrom above models we can see, We are getting highest accuracy (80%) for XGBClassifier","a6344cf8":"### Print the results after parameter tuning (LogisticRegression)\nThere is no change in Accuracy (80%) after setting the hyper parameters for LogisticRegression","02460f33":"## Loading Dataset\n\nhttp:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/statlog\/german\/german.data\n\n**Independent Variables**\n\n- Attribute 1: (qualitative) Status of existing checking account\nA11 : ... < 0 DM\nA12 : 0 <= ... < 200 DM\nA13 : ... >= 200 DM \/ salary assignments for at least 1 year\nA14 : no checking account\n- Attribute 2: (numerical) Duration in month\n- Attribute 3: (qualitative) Credit history\nA30 : no credits taken\/all credits paid back duly\nA31 : all credits at this bank paid back duly\nA32 : existing credits paid back duly till now\nA33 : delay in paying off in the past\nA34 : critical account\/other credits existing (not at this bank)\n- Attribute 4: (qualitative) Purpose\nA40 : car (new)\nA41 : car (used)\nA42 : furniture\/equipment\nA43 : radio\/television\nA44 : domestic appliances\nA45 : repairs\nA46 : education\nA47 : vacation\nA48 : retraining\nA49 : business\nA410 : others\n- Attribute 5: (numerical) Credit amount\nAttibute 6: (qualitative) Savings account\/bonds\nA61 : ... < 100 DM\nA62 : 100 <= ... < 500 DM\nA63 : 500 <= ... < 1000 DM\nA64 : .. >= 1000 DM\nA65 : unknown\/ no savings account\n- Attribute 7: (qualitative) Present employment since\nA71 : unemployed\nA72 : ... < 1 year\nA73 : 1 <= ... < 4 years\nA74 : 4 <= ... < 7 years\nA75 : .. >= 7 years\n- Attribute 8: (numerical) Installment rate in percentage of disposable income\nAttribute 9: (qualitative) Personal status and sex\nA91 : male : divorced\/separated\nA92 : female : divorced\/separated\/married\nA93 : male : single\nA94 : male : married\/widowed\nA95 : female : single\nAttribute 10: (qualitative) Other debtors \/ guarantors\nA101 : none\nA102 : co-applicant\nA103 : guarantor\n- Attribute 11: (numerical) Present residence since\n- Attribute 12: (qualitative) Property A121 : real estate\nA122 : if not A121 : building society savings agreement\/life insurance\nA123 : if not A121\/A122 : car or other, not in attribute 6\nA124 : unknown \/ no property\n- Attribute 13: (numerical) Age in years\nAttribute 14: (qualitative) Other installment plans\nA141 : bank\nA142 : stores\nA143 : none\nAttribute 15: (qualitative) Housing\nA151 : rent\nA152 : own\nA153 : for free\n- Attribute 16: (numerical) Number of existing credits at this bank\n- Attribute 17: (qualitative) Job\nA171 : unemployed\/ unskilled - non-resident\nA172 : unskilled - resident\nA173 : skilled employee \/ official\nA174 : management\/ self-employed\/highly qualified employee\/ officer\n- Attribute 18: (numerical) Number of people being liable to provide maintenance for\n- Attribute 19: (qualitative) Telephone\nA191 : none\nA192 : yes, registered under the customers name\n- Attribute 20: (qualitative) foreign worker\nA201 : yes\nA202 : no\n\n**Target Variable**\n\n1 = Good Risk\n2 = Bad Risk","c3d6346f":"## Hyper parameter Tuning (LogisticRegression)\nSeting the Hyper Parameters for LogisticRegression","443613d6":"## Data Exploration\nPreview the data type and the shape of data","a5cb5cca":"## Credit Risk Predictions\nTo classify the customer as good or bad credit risk based on the attributes provided, so that the business can assess the risk of offering loans accordingly.","2e8b7231":"### Print the important features","3d158cb3":"## Data Visualization","e846a713":"## Model Selection (LogisticRegression)\nFrom above models we can see, We are getting highest accuracy (80%) for LogisticRegression","7edce5ae":"## Importing libraries\n- numpy\n- pandas\n- seaborn\n- matplotlib\n- scipy\n- scikit learn\n- xgboost","1d21f7ca":"### Converting target variable into numeric","c2346748":"### Principal Component Analysis : Dimensionality Reduction\nForming X & Y arrays","db691879":"### Splitting the data set into training set (70%) and test set (30%)","54d69685":"### Looking the correlation of the data","8eaa1e4a":"### One-Hot encoding\n__Creating Dummy Variable from Categorical Variables__","161635e9":"### Save the trained model to a file so we can use it for future prediction","62bfcdca":"## Hyper parameter Tuning (XGBClassifier)\nSeting the Hyper Parameters for XGBClassifier","ade6c4a4":"### Print the results after parameter tuning (XGBClassifier)\nAccuracy of the model increased from 80% to 81% after setting the hyper parameters in XGBClassifier","481c4fbd":"__Selected_Features__: Status of existing checking account, Credit history, Purpose,Savings account\/bonds, Present employment since, Personal status and sex, Property, Other installment plans, Housing, foreign worker, Credit amount, Age in years, Duration in month"}}