{"cell_type":{"f820cd20":"code","3c8d8ba8":"code","57cb955b":"code","9b459c04":"code","f19a12cf":"code","04befab6":"code","010cdbca":"code","4447c84d":"code","388c7d21":"code","34e67b57":"code","a0f2bfa5":"code","9d3b46c1":"code","71ff8738":"code","ea60c9ff":"code","6a98e7eb":"code","b0057072":"code","b96724e0":"code","40482798":"code","c5a667f2":"code","ad8ce4fa":"code","0d922c54":"markdown","6501aea8":"markdown","0a340d26":"markdown","0bf37fb6":"markdown","bd95bd05":"markdown","a60ea886":"markdown","631057cd":"markdown","d93059b4":"markdown","d0ca3257":"markdown","552f373b":"markdown","32d19585":"markdown"},"source":{"f820cd20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nfrom matplotlib import pyplot as plt\nfrom collections import Counter\nimport scikitplot as skplt\n","3c8d8ba8":"train_data = pd.read_csv(\"\/kaggle\/input\/mymusicalprefrences\/train.csv\")\ntrain_data.head()","57cb955b":"test_data = pd.read_csv(\"\/kaggle\/input\/mymusicalprefrences\/test.csv\")\ntest_data.head()","9b459c04":"train_data[\"Country\"].value_counts()","f19a12cf":"for i in range(len(train_data[\"Country\"])):\n    train_data[\"Country\"]=train_data[\"Country\"].map(lambda country:\"other\" if country not in [\"RUS\",\"USA\",\"GB\",\"SWE\",\"UA\"] else country)\ntrain_data[\"Country\"].value_counts()","04befab6":"for i in range(len(test_data[\"Country\"])):\n    test_data[\"Country\"]=test_data[\"Country\"].map(lambda country:\"other\" if country not in [\"RUS\",\"USA\",\"GB\",\"SWE\",\"UA\"] else country)\ntest_data[\"Country\"].value_counts()","010cdbca":"test_data[\"Artists_Genres\"].value_counts()[:50]","4447c84d":"for i in range(len(train_data[\"Artists_Genres\"])):\n    train_data[\"Artists_Genres\"]=train_data[\"Artists_Genres\"].map(lambda genre:\"other\" if genre not in [\"indie\",\"rock\",\"pop\",\"alternative\",\"rusrap\",\"rnb|foreignrap|pop\",\"ruspop\"] else genre)\ntrain_data[\"Artists_Genres\"].value_counts()","388c7d21":"for i in range(len(test_data[\"Artists_Genres\"])):\n    test_data[\"Artists_Genres\"]=test_data[\"Artists_Genres\"].map(lambda genre:\"other\" if genre not in [\"indie\",\"rock\",\"pop\",\"alternative\",\"rusrap\",\"rnb|foreignrap|pop\",\"ruspop\"] else genre)\ntest_data[\"Artists_Genres\"].value_counts()","34e67b57":"#\u043a\u0430\u043a\u043e\u0439 \u0432\u043e\u043a\u0430\u043b \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435\ntrain_data[\"Vocal\"]=train_data.loc[train_data[\"Category\"]==1][\"Vocal \"]\ntrain_data[\"Vocal\"].value_counts().plot.barh()\ntrain_data[\"Vocal\"].value_counts()","a0f2bfa5":"#\u043a\u0430\u043a\u043e\u0439 \u0432\u043e\u043a\u0430\u043b \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u043c\u0435\u043d\u044c\u0448\u0435\ntrain_data[\"Vocal\"]=train_data.loc[train_data[\"Category\"]==0][\"Vocal \"]\ntrain_data[\"Vocal\"].value_counts().plot.barh()\ntrain_data[\"Vocal\"].value_counts()","9d3b46c1":"train_data[\"Album_type\"].value_counts()","71ff8738":"train_data[\"Happiness\"] = train_data[\"Happiness\"].replace(np.nan,train_data[\"Happiness\"].mean())\ntest_data[\"Happiness\"] = test_data[\"Happiness\"].replace(np.nan,test_data[\"Happiness\"].mean())\ntrain_data[\"Album_type\"] = train_data[\"Album_type\"].replace(np.nan,\"other\")\ntest_data[\"Album_type\"] = test_data[\"Album_type\"].replace(np.nan,\"other\")","ea60c9ff":"train_data[\"Artists_Genres\"] = train_data[\"Artists_Genres\"].fillna(method = \"ffill\")\ntest_data[\"Artists_Genres\"] = test_data[\"Artists_Genres\"].fillna(method = \"ffill\")","6a98e7eb":"train_data.info()\n","b0057072":"train_data.isna().sum()\/train_data.shape[0]*100","b96724e0":"test_data.isna().sum()\/test_data.shape[0]*100","40482798":"from sklearn.ensemble import RandomForestClassifier\n\n#features = [\"Artists\", \"Country\", \"Artists_Genres\"]\nfeatures = [\"Country\",\"Album_type\",\"Duration\",\"Release_year\", \"Vocal \",\"BPM\"]\ny = train_data[\"Category\"]\n\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n[X.shape,X_test.shape,y.shape,test_data.shape,train_data.shape]\n","c5a667f2":"X","ad8ce4fa":"model = RandomForestClassifier(n_estimators=1000, max_depth=100, random_state=1)\nmodel.fit(X, y)\n\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'Id': test_data.Id, 'Category': predictions})\noutput.to_csv('submission.csv', index=False)","0d922c54":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u0432\u0438\u0434\u044b \u0436\u0430\u043d\u0440\u043e\u0432","6501aea8":"\u0411\u0443\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c - forest \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.","0a340d26":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d, \u0430 \u043c\u0430\u043b\u043e\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 - \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u0433\u0440\u0443\u043f\u043f\u0443. \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 - \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u0430\u043d\u044b, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432 \u043e\u0434\u043d\u0443 \u0433\u0440\u0443\u043f\u043f\u0443 \"other\"","0bf37fb6":"Reading data from file for train and test","bd95bd05":"\u041a\u0430\u043a\u0438\u0435 \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438.","a60ea886":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438","631057cd":"\u041f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0436\u0430\u043d\u0440\u043e\u0432, \u043a\u0430\u043a \u0434\u0435\u043b\u0430\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u043d.","d93059b4":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0438\u0447\u0435\u0439 \u044f \u0440\u0435\u0448\u0438\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f \u0438\u0437\u043c\u0435\u043d\u0438\u043b \u0432\u044b\u0448\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0442\u0440\u0430\u043d\u044b.","d0ca3257":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043a\u0430\u043a\u0438\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u0435\u0441\u0442\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435.","552f373b":"C\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u044b","32d19585":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439. "}}