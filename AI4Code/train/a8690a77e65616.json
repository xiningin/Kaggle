{"cell_type":{"f4672212":"code","fa9a4746":"code","bcce4409":"code","208900f6":"code","fcb4a194":"code","b631b4d0":"code","0030b861":"code","42fd582f":"code","90c5081f":"code","78437670":"code","b93bc040":"code","8e2e4231":"code","0e819595":"code","9657e23e":"code","79c7e791":"code","861a1dd7":"code","d1d78bb6":"code","ffacd6ec":"code","f6a77ced":"code","c4ee820b":"code","4790bf94":"code","81ff8b20":"code","d58c536d":"code","ecb31448":"code","12316708":"code","4e231e6f":"markdown"},"source":{"f4672212":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\nimport warnings\nwarnings.filterwarnings('ignore') \n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa9a4746":"share_race_by_city = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv\", encoding=\"windows-1252\")\nkill = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv\", encoding=\"windows-1252\")\npercent_over_25_completed_highschool= pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv\", encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv\", encoding=\"windows-1252\")\nmedian_household_income_2015 = pd.read_csv(\"\/kaggle\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv\", encoding=\"windows-1252\")","bcce4409":"percentage_people_below_poverty_level.head()","208900f6":"percentage_people_below_poverty_level.info()","fcb4a194":"percentage_people_below_poverty_level.describe()","b631b4d0":"percentage_people_below_poverty_level['Geographic Area'].unique()","0030b861":"percentage_people_below_poverty_level.poverty_rate.value_counts()","42fd582f":"percentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0,inplace = True)\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\narea_poverty_ratio = []\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area'] == i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio})\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')\n\n\n","90c5081f":"kill.head()","78437670":"kill.name.value_counts()","b93bc040":"# Most common 15 Name or Surname of killed people\nseparate = kill.name[kill.name != 'TK TK'].str.split() \na,b = zip(*separate)                    \nname_list = a+b                         \nname_count = Counter(name_list)         \nmost_common_names = name_count.most_common(15)  \nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n# \nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')","8e2e4231":"percent_over_25_completed_highschool.head()","0e819595":"percent_over_25_completed_highschool.percent_completed_hs.value_counts()","9657e23e":"percent_over_25_completed_highschool.percent_completed_hs.replace(\"-\", 0.0, inplace = True)\npercent_over_25_completed_highschool.percent_completed_hs = percent_over_25_completed_highschool.percent_completed_hs.astype(float)","79c7e791":"percent_over_25_completed_highschool.info()","861a1dd7":"area_list = list(percent_over_25_completed_highschool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highschool[percent_over_25_completed_highschool['Geographic Area']==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n\n#Sorting\nData = pd.DataFrame({\"area_list\": area_list, \"area_highschool\": area_highschool})\nData.sort_values(by= \"area_highschool\", ascending = True, inplace = True)\n\nplt.figure(figsize=(14,10))\nsns.barplot(x=Data[\"area_list\"], y=Data[\"area_highschool\"])\nplt.xlabel(\"States\")\nplt.ylabel(\"High School Graduate Rate\")\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")\n\n","d1d78bb6":"# High school graduation rate of the population that is older than 25 in states\npercent_over_25_completed_highschool.percent_completed_hs.replace(['-'],0.0,inplace = True)\npercent_over_25_completed_highschool.percent_completed_hs = percent_over_25_completed_highschool.percent_completed_hs.astype(float)\narea_list = list(percent_over_25_completed_highschool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highschool[percent_over_25_completed_highschool['Geographic Area']==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n# sorting\ndata = pd.DataFrame({'area_list': area_list,'area_highschool_ratio':area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'], y=sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")","ffacd6ec":"share_race_by_city.head()","f6a77ced":"share_race_by_city.info()","c4ee820b":"share_race_by_city.replace(\"-\", 0.0, inplace= True)\nshare_race_by_city.replace(\"(X)\", 0.0, inplace= True)","4790bf94":"share_race_by_city.info()","81ff8b20":"share_race_by_city.head()","d58c536d":"share_race_by_city.loc[:,[\"share_white\", \"share_black\", \"share_native_american\", \"share_asian\", \"share_hispanic\"]] = share_race_by_city.loc[:,[\"share_white\", \"share_black\", \"share_native_american\", \"share_asian\", \"share_hispanic\"]].astype(float)\nshare_race_by_city.dtypes\narea_list = list(share_race_by_city[\"Geographic area\"].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_by_city[share_race_by_city[\"Geographic area\"]== i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black)\/len(x))\n    share_native_american.append(sum(x.share_native_american)\/len(x))\n    share_hispanic.append(sum(x.share_hispanic)\/len(x))\n    share_asian.append(sum(x.share_asian)\/len(x))\n\n#g\u00f6rselle\u015ftirme\nplt.subplots(figsize = (10,17))\nsns.barplot(x= share_white, y= area_list, color= \"Yellow\", alpha= 0.5, label= \"White\")\nsns.barplot(x= share_black, y= area_list, color= \"Green\", alpha= 0.6, label= \"Black\")\nsns.barplot(x= share_native_american, y= area_list, color= \"Blue\", alpha= 0.7, label= \"Native American\")\nsns.barplot(x= share_hispanic, y= area_list, color= \"Purple\", alpha= 0.8, label= \"Hispanic\")\nsns.barplot(x= share_asian, y= area_list, color= \"Grey\", alpha= 0.9, label= \"Asian\")\n\n","ecb31448":"data.head()","12316708":"# high school graduation rate vs Poverty rate of each state\nsorted_data[\"area_poverty_ratio\"]= sorted_data[\"area_poverty_ratio\"]\/max(sorted_data[\"area_poverty_ratio\"])\nsorted_data2[\"area_highschool_ratio\"]= sorted_data2[\"area_highschool_ratio\"]\/max(sorted_data2[\"area_highschool_ratio\"])\ndata= pd.concat([sorted_data, sorted_data2[\"area_highschool_ratio\"]],axis=1)\ndata.sort_values(\"area_poverty_ratio\", inplace= True)\n\n#visualise\nplt.subplots(figsize= (20,10))\nsns.pointplot(x= \"area_list\", y= \"area_poverty_ratio\", data=data, color= \"turquoise\", alpha= 0.8 )\nsns.pointplot(x= \"area_list\" , y= \"area_highschool_ratio\", data=data, color= \"red\", alpha= 0.8 )\nplt.text(40,0.6,\"High School Graduate Ratio\", color= \"turquoise\", fontsize= \"17\", style= \"italic\")\nplt.text(40,0.55,\"Poverty Ratio\", color= \"red\", fontsize= \"17\", style= \"italic\")\nplt.xlabel(\"States\", fontsize= 15, color= \"blue\")\nplt.ylabel(\"Values\", fontsize= 15, color= \"blue\")\nplt.title(\"High School Graduate Ratio vs Poverty Ratio\", fontsize= 20, color=\"blue\")\nplt.grid()","4e231e6f":"# **neden astype \u00e7al\u0131\u015fm\u0131yo?**"}}