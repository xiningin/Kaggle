{"cell_type":{"a30b1dd9":"code","5e7a6e59":"code","8adbac7e":"code","28e32bd8":"code","139b83ee":"code","53c55c1a":"code","493dd8f9":"code","333bc939":"code","917c3421":"code","31572ade":"markdown","53d416d9":"markdown","1f85cedb":"markdown","74e4cdf9":"markdown","5ef1ad79":"markdown","f7b02e86":"markdown"},"source":{"a30b1dd9":"from sklearn.datasets import load_iris\nimport pandas as pd\n\niris = load_iris()\n\n# I prefer to work with DataFrame object so I convert the data into a DataFrame\niris_df = pd.DataFrame(iris.data, columns=iris.feature_names)\niris_df['target'] = iris.target","5e7a6e59":"iris_df.head()","8adbac7e":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier(random_state=42)\nmodel.fit(iris.data, iris.target)","28e32bd8":"from sklearn.tree import plot_tree\nimport matplotlib.pyplot as plt\n\ndef plot_decision_tree(model, feature_names, class_names):\n    # plot_tree function contains a list of all nodes and leaves of the Decision tree\n    tree = plot_tree(model, feature_names = feature_names, class_names = class_names,\n                     rounded = True, proportion = True, precision = 2, filled = True, fontsize=10)\n    \n    # I return the tree for the next part\n    return tree","139b83ee":"fig = plt.figure(figsize=(15, 12))\nplot_decision_tree(model, iris.feature_names, iris.target_names)\nplt.show()","53c55c1a":"def plot_decision_path_tree(model, X, class_names=None):\n    fig = plt.figure(figsize=(10, 10))\n    class_names = model.classes_.astype(str) if type(class_names) == type(None) else class_names\n    feature_names = X.index if type(X) == type(pd.Series()) else X.columns\n    \n    # Getting the tree from the function programmed above\n    tree = plot_decision_tree(model, feature_names, class_names)\n    \n    # Get the decision path of the wanted prediction \n    decision_path = model.decision_path([X])\n\n    # Now remember the tree object contains all nodes and leaves so the logic here\n    # is to loop into the tree and change visible attribute for components that \n    # are not in the decision path\n    for i in range(0,len(tree)):\n        if i not in decision_path.indices:\n            plt.setp(tree[i],visible=False)\n\n    plt.show()","493dd8f9":"from IPython.display import display\n\ndisplay(iris_df.iloc[0,:].to_frame().T)\nplot_decision_path_tree(model, iris_df.iloc[3,:-1], class_names=iris.target_names)","333bc939":"display(iris_df.iloc[50,:].to_frame().T)\nplot_decision_path_tree(model, iris_df.iloc[50,:-1], class_names=iris.target_names)","917c3421":"display(iris_df.iloc[100,:].to_frame().T)\nplot_decision_path_tree(model, iris_df.iloc[100,:-1], class_names=iris.target_names)","31572ade":"# Plotting a particular prediction path\nTo meet this goal I had to think differently about `matplotlib`, for many use of this package you have to create the graphic from scratch.\n\nHere it's different : you have the graph but you it to edit it (and remove what you do not need). So let's take a look of the code below.","53d416d9":"Thank you for reading, I hope this will be usefull.\n\nThat's all folks !\n\n$Nathan$","1f85cedb":"Let's use the (wonderful) function created above.","74e4cdf9":"# How to plot a Decision Tree and a path from a particular prediction ?\n\nI was looking online how to plot a particular prediction and a DecisionTreeClassifier from scikit-learn without [graphviz](https:\/\/graphviz.org\/) or with dot command line (C.F. [Introduction: How to Visualize a Decision Tree in Python using Scikit-Learn](https:\/\/www.kaggle.com\/willkoehrsen\/visualize-a-decision-tree-w-python-scikit-learn)).\n\nAt the end I found the [`plot_tree`](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.plot_tree.html) function from pandas (scikit-learn >= 0.21.3).\n\n**Don't forget that with the goal to get an interpretable model it can be usefull !**\n\n# Load data : Iris\nFor this notebook, I prefer to use an easy dataset (that you may know well) : iris dataset","5ef1ad79":"# Use plot_tree function\nNow let's dive into the main part of this notebook : I'm creating a function called `plot_decision_tree` that create a visualization of a Decision tree and I choose to return it because after plotting the full tree, **[spoiler alert]** we will use it to remove nodes and leaves that are useless.","f7b02e86":"# Model : Decision Tree\nLet's create a simple `DecisionTreeClassifier` and fit it with our data."}}