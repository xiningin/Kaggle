{"cell_type":{"932355fd":"code","0ca02d76":"code","9aab4807":"code","0a362090":"code","bfca4ad7":"code","b7b1067b":"code","8ab84ef3":"code","2af4d409":"code","be664fcd":"code","c5a84e37":"code","b213653b":"code","ece77fbf":"code","b6c449d0":"code","ff60a3c0":"code","3dbc8d08":"code","4f63a534":"code","efdb5766":"code","a2813bd3":"code","f671b966":"code","fb350798":"code","5b5f1e3a":"code","390b8c38":"code","394efb67":"code","624835e8":"code","030ce438":"code","a30a79d4":"code","a075e91e":"code","d8413a57":"code","fa8c548e":"code","5ed2c236":"code","c4d5d1e4":"code","59d5c176":"code","2e78c1f3":"code","123539d4":"code","b13bf881":"code","206b913a":"code","7ba5147f":"markdown","ceb3d9ff":"markdown","0bc1e66d":"markdown","7e2afde1":"markdown","9cc1453b":"markdown","1af06774":"markdown","a910be76":"markdown","e2f3735c":"markdown","44d4b38b":"markdown","dbbd2997":"markdown","86624801":"markdown","95b789f5":"markdown","4de4bc1b":"markdown","3e9fd686":"markdown"},"source":{"932355fd":"import os\nfiles = os.listdir('..\/input\/diabetic-retinopathy-resized\/resized_train_cropped\/resized_train_cropped')\nprint('Number of files: ',len(files)) ","0ca02d76":"# Making pretrained weights work without needing to find the default filename\nif not os.path.exists('\/tmp\/.cache\/torch\/checkpoints\/'):\n        os.makedirs('\/tmp\/.cache\/torch\/checkpoints\/')\n!cp '..\/input\/resnet50\/resnet50.pth' '\/tmp\/.cache\/torch\/checkpoints\/resnet50-19c8e357.pth'","9aab4807":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","0a362090":"from fastai import *\nfrom fastai.vision import *\nimport pandas as pd\nimport matplotlib.pyplot as plt","bfca4ad7":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nSEED = 999\nseed_everything(SEED)","b7b1067b":"print('Make sure cuda is installed:', torch.cuda.is_available())\nprint('Make sure cudnn is enabled:', torch.backends.cudnn.enabled)","8ab84ef3":"base_image_dir = os.path.join('..', 'input\/diabetic-retinopathy-resized')\ndf = pd.read_csv(os.path.join(base_image_dir, 'trainLabels_cropped.csv'))\ndf['path'] = df['image'].map(lambda x: os.path.join(base_image_dir,'resized_train_cropped\/resized_train_cropped','{}.jpeg'.format(x)))\ndf = df.drop(columns=['image'])\ndf = df.sample(frac=1).reset_index(drop=True) #shuffle dataframe\ndf.head(10)","2af4d409":"df['level'].hist(figsize = (10, 5))","be664fcd":"bs =16 #smaller batch size is better for training, but may take longer\nsz=512","c5a84e37":"tfms = get_transforms(do_flip=True,flip_vert=True,max_rotate=360,max_warp=0,max_zoom=1.1,max_lighting=0.1,p_lighting=0.5)\nsrc = (ImageList.from_df(df=df,path='.\/',cols='path') #get dataset from dataset\n        .split_by_rand_pct(0.2) #Splitting the dataset\n        .label_from_df(cols='level') #obtain labels from the level column\n      )\ndata= (src.transform(tfms,size=sz,resize_method=ResizeMethod.SQUISH,padding_mode='zeros') #Data augmentation\n        .databunch(bs=bs,num_workers=4) #DataBunch\n        .normalize(imagenet_stats) #Normalize     \n       )","b213653b":"data.show_batch(rows=3, figsize=(7,6))","ece77fbf":"print(data.classes)\nlen(data.classes),data.c","b6c449d0":"import torchvision\nfrom fastai.metrics import *\nfrom fastai.callbacks import *\nlearn = cnn_learner(data, models.resnet50, wd = 1e-5, metrics = [accuracy,KappaScore(weights='quadratic')],callback_fns=[partial(CSVLogger,append=True)])\nlearn.unfreeze()\n","ff60a3c0":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","3dbc8d08":"learn.fit_one_cycle(2, max_lr=slice(1e-6,4e-2))","4f63a534":"learn.recorder.plot_losses()","efdb5766":"learn.recorder.plot_metrics()","a2813bd3":"learn.save('prev-dataset')","f671b966":"interp = ClassificationInterpretation.from_learner(learn)\n\nlosses,idxs = interp.top_losses()\n\nlen(data.valid_ds)==len(losses)==len(idxs)","fb350798":"interp.plot_confusion_matrix(figsize=(12,12), dpi=60)","5b5f1e3a":"base_image_dir = os.path.join('..', 'input\/aptos2019-blindness-detection\/')\ntrain_dir = os.path.join(base_image_dir,'train_images\/')\ndf = pd.read_csv(os.path.join(base_image_dir, 'train.csv'))\ndf['path'] = df['id_code'].map(lambda x: os.path.join(train_dir,'{}.png'.format(x)))\ndf = df.drop(columns=['id_code'])\ndf = df.sample(frac=1).reset_index(drop=True) #shuffle dataframe\ndf.head(10)","390b8c38":"df['diagnosis'].hist(figsize = (10, 5))","394efb67":"bs = 64 #smaller batch size is better for training, but may take longer\nsz=224","624835e8":"tfms = get_transforms(do_flip=True,flip_vert=True,max_rotate=360,max_warp=0,max_zoom=1.1,max_lighting=0.1,p_lighting=0.5)\nsrc = (ImageList.from_df(df=df,path='.\/',cols='path') #get dataset from dataset\n        .split_by_rand_pct(0.2) #Splitting the dataset\n        .label_from_df(cols='diagnosis') #obtain labels from the level column\n      )\ndata= (src.transform(tfms,size=sz,resize_method=ResizeMethod.SQUISH,padding_mode='zeros') #Data augmentation\n        .databunch(bs=bs,num_workers=4) #DataBunch\n        .normalize(imagenet_stats) #Normalize     \n       )","030ce438":"learn = cnn_learner(data, base_arch=models.resnet50, metrics = [KappaScore(weights='quadratic')],callback_fns=[partial(CSVLogger,append=True)])\nlearn.load('prev-dataset')","a30a79d4":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","a075e91e":"learn.fit_one_cycle(1,max_lr = 1e-2)","d8413a57":"learn.recorder.plot_losses()\nlearn.recorder.plot_metrics()","fa8c548e":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","5ed2c236":"learn.fit_one_cycle(3,max_lr = slice(1e-6,1e-3))","c4d5d1e4":"learn.recorder.plot_losses()\nlearn.recorder.plot_metrics()","59d5c176":"sample_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/sample_submission.csv')\nsample_df.head()","2e78c1f3":"learn.data.add_test(ImageList.from_df(sample_df,'..\/input\/aptos2019-blindness-detection',folder='test_images',suffix='.png'))","123539d4":"preds,y = learn.get_preds(ds_type=DatasetType.Test)","b13bf881":"sample_df.diagnosis = preds.argmax(dim=-1).numpy().astype(int)\nsample_df.head()","206b913a":"sample_df.to_csv('submission.csv',index=False)","7ba5147f":"# Reading data\nHere I am going to open the dataset with pandas and check distribution of labels.","ceb3d9ff":"# Training\n\nTime to train on our competition dataset:","0bc1e66d":"**Training:**\n\nWe use transfer learning, where we retrain the last layers of a pretrained neural network. I use the ResNet50 architecture trained on the ImageNet dataset, which has been commonly used for pre-training applications in computer vision. Fastai makes it quite simple to create a model and train:","7e2afde1":"The dataset is highly imbalanced, with many samples with no disease:","9cc1453b":"# Create Submission\n\nNow that we have our model working on the APTOS dataset, we can create a submission and see how this model fares.","1af06774":"Note that the distribution of images are slightly different:","a910be76":"We look at our predictions and make a confusion matrix.","e2f3735c":"Versions:\n\n* v3 - First running version of the code. However, runtime is about 2 hours which will be too long for submission.\n* v4 - Reduced number of epochs to train\n* v5 - turn off internet connection for submission.","44d4b38b":"# Pretraining For APTOS Blindness Detection\n\nIn this kernel, I use my dataset of cropped and resized images from the previous [retinopathy detection competition](https:\/\/www.kaggle.com\/c\/diabetic-retinopathy-detection) to train a ResNet50 model. I then take that model and train on this competition dataset. I am not sure if this will work (as the image distributions are different) but we will see!","dbbd2997":"# Training on previous dataset","86624801":"For both datasets, we should train longer, but because of time constraints for submitting, I have limited training time. I will create a two-part kernel with longer training later.","95b789f5":"# Loading APTOS data\n\nNow let's move on to the APTOS competition dataset. Here I am going to open the dataset with pandas, check distribution of labels.\n","4de4bc1b":"# Checking results on previous dataset","3e9fd686":"Here, I load the dataset into the `ImageItemList` class provided by `fastai`. The fastai library also implements various transforms for data augmentation to improve training. While there are some defaults that I leave intact, I add vertical flipping (`do_flip=True`) as this has been commonly used for this particular problem."}}