{"cell_type":{"820359ff":"code","88aeb8d5":"code","62eda126":"code","28624884":"code","ac57c0f6":"code","25931f73":"code","13308b01":"code","e3a77b7d":"code","4c03c651":"code","a39a56af":"code","76e79de1":"code","c62cde14":"code","db6296ab":"code","f658d05b":"code","01bb1983":"code","58a7b21d":"code","2c2a6418":"code","50558290":"code","06461448":"code","38e58e64":"code","b45c04d1":"code","91a5bacd":"code","293c1042":"code","c6e7e4dd":"code","2f7608c7":"code","df68da1e":"code","9fa8e30f":"code","f896deb0":"code","9313426b":"code","dc58b158":"code","b8126521":"code","a6ddd86b":"code","9b7493ad":"code","fc90e5b2":"code","0017813b":"code","aebe0e84":"code","7bd96a5b":"code","be4f82e9":"code","9f42934d":"code","9df34ad3":"code","78452afb":"code","d47d8b4f":"code","1ce00f0d":"code","6851721a":"code","82a538be":"code","fdb5a3e3":"code","fc5bcff4":"code","f0dd47fa":"markdown","56913ae4":"markdown","89dd974b":"markdown","62efcd6e":"markdown","11830994":"markdown","b8337285":"markdown","174d5b90":"markdown","6f288284":"markdown","7515ae00":"markdown","3ba25cfa":"markdown","3d4ff948":"markdown"},"source":{"820359ff":"import numpy as np","88aeb8d5":"from sklearn.datasets import load_iris","62eda126":"iris = load_iris()","28624884":"type(iris)","ac57c0f6":"print(iris.DESCR)","25931f73":"X = iris.data","13308b01":"X","e3a77b7d":"y = iris.target","4c03c651":"y","a39a56af":"from keras.utils import to_categorical","76e79de1":"y = to_categorical(y)","c62cde14":"y.shape","db6296ab":"y","f658d05b":"from sklearn.model_selection import train_test_split","01bb1983":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42,stratify=y)","58a7b21d":"X_train","2c2a6418":"X_test","50558290":"y_train","06461448":"y_test","38e58e64":"from sklearn.preprocessing import MinMaxScaler","b45c04d1":"scaler_object = MinMaxScaler()","91a5bacd":"scaler_object.fit(X_train)","293c1042":"scaled_X_train = scaler_object.transform(X_train)","c6e7e4dd":"scaled_X_test = scaler_object.transform(X_test)","2f7608c7":"X_train.max()","df68da1e":"scaled_X_train.max()","9fa8e30f":"X_train","f896deb0":"scaled_X_train","9313426b":"from keras.models import Sequential\nfrom keras.layers import Dense","dc58b158":"model = Sequential()\nmodel.add(Dense(8, input_dim=4, activation='relu'))\nmodel.add(Dense(8, input_dim=4, activation='relu'))\nmodel.add(Dense(3, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","b8126521":"model.summary()","a6ddd86b":"# Play around with number of epochs as well!\nmodel.fit(scaled_X_train,y_train,epochs=150, verbose=1)","9b7493ad":"scaled_X_test","fc90e5b2":"# Spits out probabilities by default.\n# model.predict(scaled_X_test)","0017813b":"model.predict_classes(scaled_X_test)","aebe0e84":"model.metrics_names","7bd96a5b":"model.evaluate(x=scaled_X_test,y=y_test)","be4f82e9":"from sklearn.metrics import confusion_matrix,classification_report","9f42934d":"predictions = model.predict_classes(scaled_X_test)","9df34ad3":"predictions","78452afb":"y_test.argmax(axis=1)","d47d8b4f":"confusion_matrix(y_test.argmax(axis=1),predictions)","1ce00f0d":"print(classification_report(y_test.argmax(axis=1),predictions))","6851721a":"model.save('.\/iris.h5')","82a538be":"from keras.models import load_model","fdb5a3e3":"newmodel = load_model('.\/iris.h5')","fc5bcff4":"newmodel.predict_classes(X_test)","f0dd47fa":"## Building the Network with Keras\n\nLet's build a simple neural network!","56913ae4":"## Split the Data into Training and Test\n\nIts time to split the data into a train\/test set. Keep in mind, sometimes people like to split 3 ways, train\/test\/validation. We'll keep things simple for now. **Remember to check out the video explanation as to why we split and what all the parameters mean!**","89dd974b":"## Dataset\n\nWe will use the famous Iris Data set.\n_____\nMore info on the data set:\nhttps:\/\/en.wikipedia.org\/wiki\/Iris_flower_data_set\n\n## Reading in the Data Set\n\nWe've already downloaded the dataset, its in this folder. So let's open it up. ","62efcd6e":"Great job! we now know how to preprocess data, train a neural network, and evaluate its classification performance!","11830994":"Ok, now we have the data scaled!","b8337285":"## Saving and Loading Models\n\nNow that we have a model trained, let's see how we can save and load it.","174d5b90":"# Evaluating Model Performance\n\nSo how well did we do? How do we actually measure \"well\". Is 95% accuracy good enough? It all depends on the situation. Also we need to take into account things like recall and precision. Make sure to watch the video discussion on classification evaluation before running this code!","6f288284":"## Fit (Train) the Model","7515ae00":"## Standardizing the Data\n\nUsually when using Neural Networks, we will get better performance when we standardize the data. Standardization just means normalizing the values to all fit between a certain range, like 0-1, or -1 to 1.\n\nThe scikit learn library also provides a nice function for this.\n\nhttp:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.MinMaxScaler.html","3ba25cfa":"## Predicting New Unseen Data\n\nLet's see how we did by predicting on **new data**. Remember, our model has **never** seen the test data that we scaled previously! This process is the exact same process we would use on totally brand new data. For example , a brand new bank note that we just analyzed .","3d4ff948":"___\n\n\n___\n\n# Keras Basics\n\nWelcome to the section on deep learning! We'll be using Keras with a TensorFlow backend to perform our deep learning operations.\n\nThis means we should get familiar with some Keras fundamentals and basics!\n\n## Imports\n\n"}}