{"cell_type":{"2fb228a6":"code","1069d3b7":"code","a8385ab3":"code","639ae661":"code","d5ad33e6":"code","839181f9":"code","a89dc4f8":"code","755fc3d3":"code","83262077":"code","50db75f4":"code","91d31116":"code","2afc804f":"code","88f54cca":"code","a1edbea9":"code","5e927a28":"code","4f27531c":"code","86ba2801":"code","18d15e28":"code","c8c4f835":"code","5a67381d":"code","ee83e512":"code","afaad728":"code","39f06c90":"code","f5116f25":"code","e6d073ae":"code","5967c328":"code","ce9d5f47":"code","6c1c4019":"code","d746777b":"code","2ea4b9f1":"code","5f7b7bef":"code","5aee07b9":"code","4b198afb":"code","68358ad2":"code","b013ead2":"code","c88ed73f":"code","4cedfe24":"markdown","d3083a94":"markdown","4c348678":"markdown","72bb7dd9":"markdown","62f9cfbf":"markdown","37e38021":"markdown","31146ff8":"markdown","9a742524":"markdown"},"source":{"2fb228a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport string\nimport gc\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom scipy.stats import spearmanr\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics import make_scorer\nfrom sklearn.model_selection import KFold\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\neng_stopwords = set(stopwords.words(\"english\"))","1069d3b7":"%%time\ntrain_df = pd.read_csv('\/kaggle\/input\/google-quest-challenge\/train.csv')\nsample_sub_df = pd.read_csv('\/kaggle\/input\/google-quest-challenge\/sample_submission.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/google-quest-challenge\/test.csv')","a8385ab3":"pd.set_option('display.max_columns', None)\ntrain_df.head()","639ae661":"test_df.head()","d5ad33e6":"sample_sub_df.head()","839181f9":"print (f'Sahpe of training set: {train_df.shape}')\nprint (f'Sahpe of testing set: {test_df.shape}')","a89dc4f8":"train_df.columns","755fc3d3":"sns.set(rc={'figure.figsize':(11,8)})\nsns.set(style=\"whitegrid\")","83262077":"total = len(train_df)","50db75f4":"ax = sns.barplot(train_df['category'].value_counts().keys(), train_df['category'].value_counts())\nax.set(xlabel='Category', ylabel='# of records', title='Category vs. # of records')\nax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\")\nfor p in ax.patches: # loop to all objects and plot group wise % distribution\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 5,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=15) \n\nplt.show()","91d31116":"v = np.vectorize(lambda x: x.split('.')[0])\nsns.set(rc={'figure.figsize':(15,8)})\nax = sns.barplot(v(train_df['host'].value_counts().keys().values), train_df['host'].value_counts())\nax.set(xlabel='Host platforms', ylabel='# of records', title='Host platforms vs. # of records')\nax.set_xticklabels(ax.get_xticklabels(), rotation=50, ha=\"right\")\nplt.show()","2afc804f":"wc = WordCloud(background_color='white', max_font_size = 85, width=700, height=350)\nwc.generate(','.join(train_df['question_title'].tolist()))\nplt.figure(figsize=(15,10))\nplt.axis(\"off\")\nplt.imshow(wc, interpolation='bilinear')","88f54cca":"wc.generate(','.join(train_df['question_body'].tolist()).replace('gt', '').replace('lt', ''))\nplt.figure(figsize=(15,10))\nplt.axis(\"off\")\nplt.imshow(wc, interpolation='bilinear')","a1edbea9":"wc.generate(','.join(train_df['answer'].tolist()).replace('gt', '').replace('lt', ''))\nplt.figure(figsize=(15,10))\nplt.axis(\"off\")\nplt.imshow(wc, interpolation='bilinear')","5e927a28":"target_cols = sample_sub_df.drop(['qa_id'], axis=1).columns.values\ntarget_cols","4f27531c":"X_train = train_df.drop(np.concatenate([target_cols, np.array(['qa_id'])]), axis=1)\nY_train = train_df[target_cols]","86ba2801":"print (f'Shape of X_train: {X_train.shape}')\nprint (f'Shape of Y_train: {Y_train.shape}')","18d15e28":"X_train.head()","c8c4f835":"X_test = test_df\ndel test_df\ngc.collect()","5a67381d":"%%time\n# Size of answers\nX_train['answer_size'] = X_train['answer'].apply(lambda x: len(str(x).split()))\nX_test['answer_size'] = X_test['answer'].apply(lambda x: len(str(x).split()))\n\n# Size of question body\nX_train['question_body_size'] = X_train['question_body'].apply(lambda x: len(str(x).split()))\nX_test['question_body_size'] = X_test['question_body'].apply(lambda x: len(str(x).split()))\n\n# Size of question title\nX_train['question_title_size'] = X_train['question_title'].apply(lambda x: len(str(x).split()))\nX_test['question_title_size'] = X_test['question_title'].apply(lambda x: len(str(x).split()))\n\n# Number of unique words in the answer\nX_train['answer_num_unique_words'] = X_train['answer'].apply(lambda x: len(set(str(x).split())))\nX_test['answer_num_unique_words'] = X_test['answer'].apply(lambda x: len(set(str(x).split())))\n\n# Number of unique words in the question body\nX_train['question_body_num_unique_words'] = X_train['question_body'].apply(lambda x: len(set(str(x).split())))\nX_test['question_body_num_unique_words'] = X_test['question_body'].apply(lambda x: len(set(str(x).split())))\n\n# Number of characters in the answer\nX_train['answer_num_chars'] = X_train['answer'].apply(lambda x: len(str(x)))\nX_test['answer_num_chars'] = X_test['answer'].apply(lambda x: len(str(x)))\n\n# Number of characters in the question body\nX_train['question_body_num_chars'] = X_train['question_body'].apply(lambda x: len(str(x)))\nX_test['question_body_num_chars'] = X_test['question_body'].apply(lambda x: len(str(x)))\n\n# Number of stopwords in the answer\nX_train['answer_num_stopwords'] = X_train['answer'].apply(lambda x: len([w for w in str(x).lower().split() if w in eng_stopwords]))\nX_test['answer_num_stopwords'] = X_test['answer'].apply(lambda x: len([w for w in str(x).lower().split() if w in eng_stopwords]))\n\n# Number of stopwords in the question body\nX_train['question_body_num_stopwords'] = X_train['question_body'].apply(lambda x: len([w for w in str(x).lower().split() if w in eng_stopwords]))\nX_test['question_body_num_stopwords'] = X_test['question_body'].apply(lambda x: len([w for w in str(x).lower().split() if w in eng_stopwords]))\n\n# Number of punctuations in the answer\nX_train['answer_num_punctuations'] = X_train['answer'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))\nX_test['answer_num_punctuations'] = X_test['answer'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))\n\n# Number of punctuations in the question body\nX_train['question_body_num_punctuations'] = X_train['question_body'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))\nX_test['question_body_num_punctuations'] = X_test['question_body'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))\n\n# # Average length of the words in the answer\n# X_train['answer_mean_word_len'] = X_train['answer'].apply(lambda x: np.mean([len(w) for w in str(x).split()]))\n# X_test['answer_mean_word_len'] = X_test['answer'].apply(lambda x: np.mean([len(w) for w in str(x).split()]))\n\n# # Average length of the words in the question body\n# X_train['question_body_mean_word_len'] = X_train['question_body'].apply(lambda x: np.mean([len(w) for w in str(x).split()]))\n# X_test['question_body_mean_word_len'] = X_test['question_body'].apply(lambda x: np.mean([len(w) for w in str(x).split()]))\n\n# Number of upper case words in the answer\nX_train['answer_num_words_upper'] = X_train['answer'].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\nX_test['answer_num_words_upper'] = X_test['answer'].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\n\n# Number of upper case words in the question body\nX_train['question_body_num_words_upper'] = X_train['question_body'].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\nX_test['question_body_num_words_upper'] = X_test['question_body'].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\n\n# Number of title case words in the answer\nX_train['answer_num_words_title'] = X_train['answer'].apply(lambda x: len([w for w in str(x).split() if w.istitle()]))\nX_test['answer_num_words_title'] = X_test['answer'].apply(lambda x: len([w for w in str(x).split() if w.istitle()]))\n\n# Number of title case words in the question body\nX_train['question_body_num_words_title'] = X_train['question_body'].apply(lambda x: len([w for w in str(x).split() if w.istitle()]))\nX_test['question_body_num_words_title'] = X_test['question_body'].apply(lambda x: len([w for w in str(x).split() if w.istitle()]))","ee83e512":"X_train.head()","afaad728":"X_train = X_train.drop(['question_user_name', 'question_user_page', 'answer_user_name', 'answer_user_page', 'url'], axis=1)\nX_test = X_test.drop(['question_user_name', 'question_user_page', 'answer_user_name', 'answer_user_page', 'url', 'qa_id'], axis=1)","39f06c90":"tfv = TfidfVectorizer(min_df=3,  max_features=None, \n            strip_accents='unicode', analyzer='word',token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1,\n            stop_words = 'english')\ntsvd = TruncatedSVD(n_components = 1000)\n\nquestion_title = tfv.fit_transform(X_train['question_title'].values).toarray()\nquestion_title_test = tfv.transform(X_test['question_title'].values).toarray()\n#question_title = tfv.fit_transform(X_train['question_title'].values)\n#question_title_test = tfv.transform(X_test['question_title'].values)\n#question_title = tsvd.fit_transform(question_title)\n#question_title_test = tsvd.transform(question_title_test)\n\nquestion_body = tfv.fit_transform(X_train['question_body'].values).toarray()\nquestion_body_test = tfv.transform(X_test['question_body'].values).toarray()\n#question_body = tfv.fit_transform(X_train['question_body'].values)\n#question_body_test = tfv.transform(X_test['question_body'].values)\n#question_body = tsvd.fit_transform(question_body)\n#question_body_test = tsvd.transform(question_body_test)\n\nanswer = tfv.fit_transform(X_train['answer'].values).toarray()\nanswer_test = tfv.transform(X_test['answer'].values).toarray()\n#answer = tfv.fit_transform(X_train['answer'].values)\n#answer_test = tfv.transform(X_test['answer'].values)\n#answer = tsvd.fit_transform(answer)\n#answer_test = tsvd.transform(answer_test)","f5116f25":"cat_le = LabelEncoder()\ncat_le.fit(X_train['category'])\ncategory = cat_le.transform(X_train['category'])\ncategory_test = cat_le.transform(X_test['category'])","e6d073ae":"host_le = LabelEncoder()\nhost_le.fit(pd.concat([X_train['host'], X_test['host']], ignore_index=True))\nhost = host_le.transform(X_train['host'])\nhost_test = host_le.transform(X_test['host'])","5967c328":"meta_features_train = X_train.drop(['question_title', 'question_body', 'answer', 'category', 'host'], axis=1).to_numpy()\nmeta_features_test = X_test.drop(['question_title', 'question_body', 'answer', 'category', 'host'], axis=1).to_numpy()","ce9d5f47":"X_train = np.concatenate([question_title, question_body, answer], axis=1)\nX_test = np.concatenate([question_title_test, question_body_test, answer_test], axis=1)","6c1c4019":"del question_title\ndel question_title_test\ndel answer\ndel answer_test\ndel question_body\ndel question_body_test\ngc.collect()","d746777b":"X_train = np.column_stack((X_train, category, host, meta_features_train))\nX_test = np.column_stack((X_test, category_test, host_test, meta_features_test))","2ea4b9f1":"del category\ndel host\ndel meta_features_train\ndel category_test\ndel host_test\ndel meta_features_test\ngc.collect()","5f7b7bef":"print (X_train.shape)\nprint (X_test.shape)","5aee07b9":"np.isnan(X_train).any()","4b198afb":"len(X_test)","68358ad2":"folds = 5\nseed = 666\n\nkf = KFold(n_splits=folds, shuffle=True, random_state=seed)\ntest_preds = np.zeros((len(X_test), len(target_cols)))\nfold_scores = []\n\nfor train_index, val_index in kf.split(X_train):\n    x_train, y_train = X_train[train_index, :], Y_train.iloc[train_index]\n    x_val, y_val = X_train[val_index, :], Y_train.iloc[val_index]\n    \n    model = Sequential([\n        Dense(256, input_shape=(X_train.shape[1],)),\n        Dropout(0.25),\n        Activation('relu'),\n        Dense(128),\n        Dropout(0.20),\n        Activation ('relu'),\n        Dense(len(target_cols)),\n        Activation('sigmoid'),\n    ])\n    \n    model.compile(optimizer='adam', loss='binary_crossentropy')\n    \n    model.fit(x_train, y_train, epochs=20, validation_data=(x_val, y_val))\n    \n    preds = model.predict(x_val)\n    overall_score = 0\n    \n    for col_index, col in enumerate(target_cols):\n        overall_score += spearmanr(preds[:, col_index], y_val[col].values).correlation\/len(target_cols)\n        \n    fold_scores.append(overall_score)\n#     models.append(model)\n    test_preds += model.predict(X_test)\/folds\n    del x_train\n    del y_train\n    del x_val\n    del y_val\n    gc.collect()\n\nprint(fold_scores)","b013ead2":"for col_index, col in enumerate(target_cols):\n    sample_sub_df[col] = test_preds[:, col_index]","c88ed73f":"sample_sub_df.to_csv(\"submission.csv\", index = False)","4cedfe24":"### Distribution of category variable","d3083a94":"### Read the dataset\nLet's first read the dataset in pandas dataframes. ","4c348678":"It seems that most of the question answers from Stackoverflow (~20%) in training dataset.","72bb7dd9":"### Visualizing Wordclouds of question and answer's raw (without preprocessing) text","62f9cfbf":"### Feature Engineering:\nLet's first extract meta features from the text.\n\nWe will start with creating meta featues. The feature list is as follows:\n\n* Number of words in the text (size of question and answer)\n* Number of unique words in the text\n* Number of characters in the text\n* Number of stopwords\n* Number of punctuations\n* Number of upper case words\n* Number of title case words\n* Average length of the words","37e38021":"### Distribution of QA host platforms","31146ff8":"From the wordcloud highlighted words, it seems most of the words are technical and context of question and answer is technical (e.g. code, function, value, file, data, server, etc.).","9a742524":"### Glimpse of the dataset\nLet's see the high level overview of given data, like observing first few records and size of given data."}}