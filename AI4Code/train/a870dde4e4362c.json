{"cell_type":{"03404780":"code","786e8fc4":"code","98d9f40c":"code","4fa8b13f":"code","28fbc9fa":"code","cf79f7cf":"code","f55220e3":"code","6472d483":"code","41088718":"code","98f3d7fa":"code","088b0b50":"code","fd8ef973":"code","0c43f0f2":"code","880fd428":"code","b5d2e975":"code","0042a071":"code","036a6e1f":"code","7c89e230":"code","676a9ca1":"code","5a4bbd93":"code","a70a1223":"code","5ae65aec":"code","e292f73e":"code","f4b61cdf":"code","0f949a96":"code","d85376a3":"code","2a8a3481":"code","5d954ba5":"code","ea48d3bd":"code","e2a33adc":"code","3e23d092":"code","8815688a":"code","9a004f4f":"code","53921477":"code","8385b713":"code","966bcf8f":"code","40f65fd3":"code","4c96a90a":"code","0562145b":"markdown"},"source":{"03404780":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib \nimport matplotlib.pyplot as plt \n%matplotlib inline\nfrom datetime import datetime,time\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","786e8fc4":"data_path = '\/kaggle\/input\/cacSurveys3May2016-withColumnNames.csv'\ndata = pd.read_csv(data_path)\ndata","98d9f40c":"data.dropna()\n","4fa8b13f":"new_data = data.sample(n= 10000)\nnew_data","28fbc9fa":"# Drop a row by condition\n","cf79f7cf":" new = new_data.drop(columns=['Column 13'])","f55220e3":"final = new.rename(columns={\"Column 1\":\"ID\"})\nfinal\n","6472d483":"missing_data_results = new_data.isnull().sum()\nprint(missing_data_results)","41088718":"data2 = new_data.fillna( data.median() )","98f3d7fa":"data2","088b0b50":"missing_data_results = data2.isnull().sum()\nprint(missing_data_results)","fd8ef973":" new = data2.drop(columns=['Column 13'])","0c43f0f2":"final = new.rename(columns={\"Column 1\":\"ID\"})\nfinal","880fd428":"date= pd.to_datetime(final['Date'],errors = 'coerce')\nfinal['Date']=date \n#data1['Date'] = data1['Date'].astype('datetime64[ns]') \n","b5d2e975":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder() \nfinal['Parish'] = label_encoder.fit_transform(final['Parish']) \nfinal['Town'] = label_encoder.fit_transform(final['Town']) \nfinal['Shop Type'] = label_encoder.fit_transform(final['Shop Type']) \nfinal['Good or Service Name'] =label_encoder.fit_transform(final['Good or Service Name'])","0042a071":"final","036a6e1f":"data = pd.DataFrame({\n    'Parish':final['Parish'],\n    'Prices':final['Price']\n})\ndata","7c89e230":"data.corr()","676a9ca1":"plt.scatter(final['Parish'],final['Price'])\nplt.show()","5a4bbd93":"from sklearn.model_selection import train_test_split \nfrom sklearn import linear_model\nimport statsmodels.api as sm\n","a70a1223":"X_data = final[['Parish','Town']]\nY_data = final['Price'] ","5ae65aec":"#Splitting Data using a 70\/30 split\nX_train, X_test, y_train,y_test = train_test_split(X_data,Y_data, test_size = 0.30)","e292f73e":"regres = linear_model.LinearRegression()\nregres.fit(X_train,y_train)\n","f4b61cdf":"regres.coef_","0f949a96":"print(\"Regression Coefficients\")\npd.DataFrame(regres.coef_,index= X_train.columns,columns=[\"Coefficient\"])","d85376a3":"regres.intercept_","2a8a3481":"test_predicted = regres.predict(X_test)\ntest_predicted","5d954ba5":"from sklearn.metrics import mean_squared_error, r2_score","ea48d3bd":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, test_predicted))","e2a33adc":"# R squared\nprint('Variance score: %.2f' % r2_score(y_test, test_predicted))","3e23d092":"cluster = final[['Good or Service Name','Parish']]\ncluster.plot(kind='scatter',x='Good or Service Name',y='Parish')","8815688a":"final_values = cluster.iloc[:, :].values\nfinal_values","9a004f4f":"from sklearn.cluster import KMeans\nwcss =[]\nfor i in range (1, 15):\n    kmeans=KMeans(n_clusters=i, init='k-means++', n_init=10, max_iter=300)\n    kmeans.fit_predict(final_values)\n    wcss.append(kmeans.inertia_)\n    plt.plot(wcss, 'ro-', label=\"WCSS\")\n    plt.title(\"Using Kmeans to Compare two Data\")\n    plt.xlabel(\"Clusters\")\nplt.ylabel(\"WCSS\")\nplt.show()\n    ","53921477":" kmeans=KMeans(n_clusters=5, init='k-means++', n_init=10, max_iter=300)\ncluster[\"cluster\"] = kmeans.fit_predict(final_values)\ncluster","8385b713":"from matplotlib.pyplot import plot\nfinal.plot.scatter( x='Code', y='Price', title='Comparing Item codes to Prices ')\nplot","966bcf8f":"datas = final[['Good or Service Name','ID']]\ndf =pd.DataFrame(datas)\ndf","40f65fd3":"result = df.groupby('Good or Service Name').count()\nresult\nx = result.rename(columns={\"ID\": \"Output\"})\nx.head(87)","4c96a90a":"x.plot(kind=\"bar\", figsize =(12,8))","0562145b":"this shows that more items are sold at a lower cost and this can help to predict future sales"}}