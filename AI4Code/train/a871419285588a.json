{"cell_type":{"8eac9caa":"code","835802f6":"code","b55b3161":"code","184f1e94":"code","942a3ef1":"code","46712db5":"code","8b10fdef":"code","c5f78f5e":"code","1b198d92":"code","ff061a42":"code","602c4673":"markdown","1c9937a0":"markdown","78a24cbb":"markdown","020da98d":"markdown","40bbfc45":"markdown","8c6ec0a3":"markdown","cb00e00d":"markdown"},"source":{"8eac9caa":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2","835802f6":"integer_to_class = {'1': 'meningioma (1)', '2': 'glioma (2)', '3': 'pituitary tumor (3)'}","b55b3161":"from glob import glob\nglob('\/kaggle\/input\/*\/*\/*.npy')","184f1e94":"labels = np.load('\/kaggle\/input\/brain-tumor\/brain_tumor_dataset\/labels.npy')\nimages = np.load('\/kaggle\/input\/brain-tumor\/brain_tumor_dataset\/images.npy',allow_pickle=True)\nmasks = np.load('\/kaggle\/input\/brain-tumor\/brain_tumor_dataset\/masks.npy',allow_pickle=True)\n\nprint(labels.shape)\nprint(images.shape)\nprint(masks.shape)","942a3ef1":"import seaborn as sns\nsns.set()\nclasses, counts = np.unique(labels, return_counts=True)\nplt.bar(classes, counts, \n        tick_label=['meningioma (1)', 'glioma (2)', 'pituitary tumor (3)'])\n\nfor i, idx in enumerate(classes):\n    print('number of {}: {}'.format(integer_to_class[str(idx)], counts[i]))","46712db5":"plt.figure(figsize=(16, 8))\nfor i, idx in enumerate(np.random.randint(images.shape[0], size=18), start=1):\n    plt.subplot(3, 6, i)\n    plt.imshow(images[idx], cmap='bone')\n    \n    # set black pixel as transparent for the mask\n    mask = np.ma.masked_where(masks[idx] == False, masks[idx])\n    plt.imshow(mask, alpha=0.3, cmap='autumn')\n    \n    plt.title(integer_to_class[str(labels[idx])])\n    plt.axis('off')","8b10fdef":"def get_bounding_box(mask):\n    \"\"\"\n    Return the bounding box of a mask image.\n    \"\"\"\n    xmin, ymin, xmax, ymax = 0, 0, 0, 0\n\n    for row in range(mask.shape[0]):\n        if mask[row, :].max() != 0:\n            ymin = row\n            break\n\n    for row in range(mask.shape[0] - 1, -1, -1):\n        if mask[row, :].max() != 0:\n            ymax = row\n            break\n\n    for col in range(mask.shape[1]):\n        if mask[:, col].max() != 0:\n            xmin = col\n            break\n\n    for col in range(mask.shape[1] - 1, -1, -1):\n        if mask[:, col].max() != 0:\n            xmax = col\n            break\n\n    return xmin, ymin, xmax, ymax\n\n\ndef crop_to_bbox(image, bbox, crop_margin=10):\n    \"\"\"\n    Crop an image to the bounding by forcing a squared image as output.\n    \"\"\"\n    x1, y1, x2, y2 =  bbox\n    \n    # force a squared image\n    max_width_height = np.maximum(y2 - y1, x2 - x1)\n    y2 = y1 + max_width_height\n    x2 = x1 + max_width_height\n\n    # in case coordinates are out of image boundaries\n    y1 = np.maximum(y1 - crop_margin, 0)\n    y2 = np.minimum(y2 + crop_margin, image.shape[0])\n    x1 = np.maximum(x1 - crop_margin, 0)\n    x2 = np.minimum(x2 + crop_margin, image.shape[1])\n    \n    return image[y1:y2, x1:x2]\n","c5f78f5e":"from IPython.display import display, clear_output\nfrom tqdm import tqdm\n\ndim_cropped_image = 224\n\nimages_cropped = []\n\nfor i in tqdm(range(images.shape[0]),leave=True, position = 0):\n#     if i % 10 == 0:\n#         # print the pourcentage of images processed\n#         clear_output(wait=True)\n#         display('[{}\/{}] images processed: {:.1f} %'\n#                 .format(i+1, images.shape[0], (i+1) \/ images.shape[0] * 100))\n        \n    bbox = get_bounding_box(masks[i])\n    image = crop_to_bbox(images[i], bbox, 20)\n    image = cv2.resize(image, dsize=(dim_cropped_image, dim_cropped_image),\n                       interpolation=cv2.INTER_CUBIC)\n    images_cropped.append(image)\n    \n# clear_output(wait=True)\n# display('[{}\/{}] images processed: {:.1f} %'\n#         .format(i+1, images.shape[0], (i+1) \/ images.shape[0] * 100))","1b198d92":"images_cropped = np.array(images_cropped)\n\nprint(images_cropped.shape)","ff061a42":"plt.figure(figsize=(16, 8))\nfor i, idx in enumerate(np.random.randint(images.shape[0], size=18), start=1):\n    plt.subplot(3, 6, i)\n    plt.imshow(images_cropped[idx], cmap='bone')\n    plt.title(integer_to_class[str(labels[idx])])\n    plt.axis('off')","602c4673":"## Visualize some tumors","1c9937a0":"### Load images, masks and labels","78a24cbb":"## Crop the images on the tumors","020da98d":"# Data visualization\n\nNotebook to visualize:\n- the repartition of classes\n- the 2D slices with the tumor mask\n- the tumors","40bbfc45":"### Visualize some slices with their tumor mask","8c6ec0a3":"# Brain Tumor\n\n### This Notebook was collected from this [here](https:\/\/github.com\/guillaumefrd\/brain-tumor-mri-dataset) and then slightly modified","cb00e00d":"### Analyze the repartition of classes"}}