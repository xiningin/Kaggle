{"cell_type":{"93d5ef58":"code","5c18871a":"code","bc5e46f8":"code","2583d424":"code","74a1c22c":"code","d218ff05":"code","099e2cd3":"code","3c0e17f9":"code","f8e07790":"code","c9adacfa":"code","eb8a0b2f":"code","eb899f63":"code","b340a816":"code","4cf80951":"code","dcc901c4":"code","b6dfc189":"code","da0b1fc5":"code","f161b177":"code","68fc68f8":"code","f3bbe36a":"code","dd45c5bd":"code","3bf22791":"code","3bc1a3d6":"code","3d1c9d36":"code","11e0cfd1":"code","d4f59f62":"code","9c305225":"code","9556ea71":"code","b52b231d":"code","8f607911":"code","2e7a5b75":"code","6655f564":"code","29b97dd9":"code","1870dd3e":"code","d23a7a3c":"code","88b987fe":"code","a53a7d97":"code","c36894a1":"code","f63b8e5e":"code","07fce3c5":"code","38d894bf":"code","0d69adae":"code","73822c43":"code","4f9f22b2":"markdown","db0e40a4":"markdown","2c03c880":"markdown","187fdf6c":"markdown","63ff779a":"markdown","7764a373":"markdown","194c731c":"markdown","9875c5ba":"markdown","0ae92429":"markdown","7fc0732c":"markdown","cefd8129":"markdown","027950be":"markdown","cb1fb404":"markdown","2e93da5f":"markdown","521d626b":"markdown","5a94039b":"markdown","d6866fc1":"markdown","e94daaec":"markdown","f72a78f0":"markdown","be84b6af":"markdown","e53afa64":"markdown","8d1e4e3e":"markdown","8d849402":"markdown","feb7706e":"markdown","2416dc51":"markdown","5c3f0ba7":"markdown","1bf3d396":"markdown"},"source":{"93d5ef58":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n%matplotlib inline","5c18871a":"import os\nprint(os.listdir(\"..\/input\"))","bc5e46f8":"df = pd.read_csv('..\/input\/train.csv')\ndf.head()","2583d424":"df.shape","74a1c22c":"nulls = pd.DataFrame(df.isnull().sum())\n\nnulls = nulls[nulls[0] >0]\n\nprint(nulls)\n","d218ff05":"plt.figure(figsize=(20,6))\nsns.heatmap(df.isnull(), cbar=False,yticklabels=False)","099e2cd3":"columns = ['Alley','PoolQC','Fence','MiscFeature','FireplaceQu','LotFrontage']\ndf.drop(columns, axis=1, inplace = True)","3c0e17f9":"df['MasVnrType'].unique()","f8e07790":"df['MasVnrType'].fillna(value = 'None', inplace = True)","c9adacfa":"df['MasVnrType'].unique()","eb8a0b2f":"df.update(df['MasVnrArea'].fillna(value = 0, inplace = True))","eb899f63":"df.update(df['BsmtQual'].fillna(value = 'NA', inplace = True))\ndf['BsmtQual'].unique()","b340a816":"df.update(df['BsmtCond'].fillna(value = 'NA', inplace = True))\ndf['BsmtCond'].unique()","4cf80951":"columns = ['BsmtExposure','BsmtFinType1','BsmtFinType2','GarageYrBlt','GarageType','GarageFinish','GarageQual','GarageCond']\ndf.drop(columns, axis=1, inplace = True)","dcc901c4":"df['Electrical'].isnull().sum()","b6dfc189":"df.update(df.Electrical.dropna(inplace= True))\ndf['Electrical'].isnull().sum()","da0b1fc5":"plt.figure(figsize=(20,6))\nsns.heatmap(df.isnull(), cbar=False,yticklabels=False)","f161b177":"CorrTarget = df.corr()\nCorrTarget['SalePrice']","68fc68f8":"dicCorrelations = dict(CorrTarget['SalePrice'])\nBestCorrelations = []\n\nfor k,v in dicCorrelations.items():\n    if v >0.4:\n        BestCorrelations.append(k)\n    else:\n        continue","f3bbe36a":"print(BestCorrelations)","dd45c5bd":"plt.figure(figsize=(12,8))\nsns.heatmap(df[BestCorrelations].corr(),cmap = 'magma',annot = True, linecolor = 'black',lw = 1)","3bf22791":"df_bestcorr = df[BestCorrelations]\ndf_bestcorr.head(3)","3bc1a3d6":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(df_bestcorr.drop('SalePrice',axis=1), df_bestcorr['SalePrice'], test_size = 0.3)","3d1c9d36":"y_train= y_train.values.reshape(-1,1)\ny_test= y_test.values.reshape(-1,1)","11e0cfd1":"from sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor()\nmodel.fit(X_train,y_train.ravel())","d4f59f62":"predictions = model.predict(X_test)","9c305225":"plt.figure(figsize=(12,8))\nplt.scatter(y_test,predictions, marker = ('v'))\nplt.xlabel('Y Test')\nplt.ylabel('Predict')","9556ea71":"error = y_test-predictions\nerror = error.reshape(-1,1)\nsns.distplot(error,bins=50, color = 'red')","b52b231d":"from sklearn.model_selection import GridSearchCV","8f607911":"parameters = {'min_samples_leaf':[1,20], 'min_samples_split':[2,200],'n_estimators':[100,250,500,750,1000]}","2e7a5b75":"grid = GridSearchCV(model,parameters)\n\ngrid.fit(X_train,y_train.ravel())","6655f564":"grid.best_params_","29b97dd9":"best_model = grid.best_estimator_","1870dd3e":"predictions = best_model.predict(X_test)\n\nplt.figure(figsize=(12,8))\nplt.scatter(y_test,predictions, marker = ('v'))\nplt.xlabel('Y Test')\nplt.ylabel('Predict')","d23a7a3c":"error = y_test-predictions\nprint(error.sum())\nerror = error.reshape(-1,1)\n\nsns.distplot(error,bins=50, color = 'red')","88b987fe":"predictPrice = best_model.predict(df_bestcorr.drop('SalePrice',axis=1))\nx = pd.DataFrame(predictPrice,columns=['SalePrice_Predicted'])\n\nresult_comparision = pd.concat([df,x], axis = 1)\nresult_comparision.head()","a53a7d97":"result_comparision['Model_Error'] = result_comparision.SalePrice - result_comparision.SalePrice_Predicted\nresult_comparision[['SalePrice','SalePrice_Predicted','Model_Error']].head()","c36894a1":"df_test = pd.read_csv('..\/input\/test.csv', usecols = \n                      [  'OverallQual',\n                         'YearBuilt',\n                         'YearRemodAdd',\n                         'MasVnrArea',\n                         'TotalBsmtSF',\n                         '1stFlrSF',\n                         'GrLivArea',\n                         'FullBath',\n                         'TotRmsAbvGrd',\n                         'Fireplaces',\n                         'GarageCars',\n                         'GarageArea'])","f63b8e5e":"df_test.isnull().sum()","07fce3c5":"df_test.update(df_test['MasVnrArea'].fillna(value = 0, inplace = True))\ndf_test['TotalBsmtSF'].fillna(value = df_test.TotalBsmtSF.mean(), inplace = True)\ndf_test['GarageCars'].fillna(value = df_test.GarageCars.mean(), inplace = True)\ndf_test['GarageArea'].fillna(value = df_test.GarageArea.mean(), inplace = True)\ndf_test.isnull().sum()","38d894bf":"predict_result = best_model.predict(df_test)\npredict_result = pd.DataFrame(predict_result,columns=['SalePrice'])","0d69adae":"index = pd.read_csv('..\/input\/test.csv')\nId = index['Id']\nId = pd.DataFrame(Id)\n\nresult = pd.concat([Id,predict_result.round(2)], axis =1)\nresult.head()","73822c43":"result.to_csv('submission.csv',index=False)","4f9f22b2":"# **Filling missing\/null values**\n\n","db0e40a4":"## Column BSMTCOND","2c03c880":"# Saving results","187fdf6c":"# Using a heatmap to visualize the correlations","63ff779a":"# Starting the Regression model\n## First, We separate the data in test and train","7764a373":"# Using a Heatmap to see the null\/missing values","194c731c":"# Putting the best categories in another dataframe","9875c5ba":"# Let's put the new data on our dataset","0ae92429":"## Column BSMTQUAL","7fc0732c":"# Removing the basement data that is not crucial to the model","cefd8129":"# Removing the null values in ELECTRICAL category","027950be":"## Column MasVnrType","cb1fb404":"# Stracting the best correlations to the model - above 0.4","2e93da5f":"# Comparing the real data against the predictions","521d626b":"# Importing the Random Forrest Regressor","5a94039b":"# **Dropping columns with high number of null values**","d6866fc1":"## Using the GridSearchCV to find the best parameters to the model","e94daaec":"## Creating a new dataset with the predicted results","f72a78f0":"## Column MasVnrArea","be84b6af":"## Clearing the data","e53afa64":"# Correlations with the target column - SalePrice","8d1e4e3e":"We will drop the followed columns where we have a high number of null values:\n\n*     * Alley\n*     * PoolQC\n*     * Fence\n*     * MiscFeature\n*     * FireplaceQu\n*     * LotFrontage\n    \nWe can drop also the column *Id* because it will be irrelevant to the study","8d849402":"# Houses Pricing - Random Forest Regression","feb7706e":"# Predicting results","2416dc51":"# Working with the test dataset","5c3f0ba7":"### Reshaping the data","1bf3d396":"# **Searching for null\/missing values**"}}