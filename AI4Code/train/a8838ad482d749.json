{"cell_type":{"f51c17d9":"code","cc029666":"code","e0575484":"code","ae257758":"code","a84aeff2":"code","eff320f4":"code","7e293545":"code","3c5ab29e":"code","38707f78":"code","fdf84daa":"code","50cb5cbb":"code","cb75b567":"code","061bc597":"code","84ac6491":"code","e3ed7fe1":"code","5cd7c351":"code","3ffa05e3":"code","3d7170a5":"code","fd41813d":"code","5b23dacf":"code","e39a55d0":"code","b8dc3e99":"code","f3913cb4":"code","972e1242":"code","99c92e24":"code","24f50a92":"code","afe55ba4":"code","3084b1ca":"markdown"},"source":{"f51c17d9":"### IMPORTING LIBRARY\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets","cc029666":"df=pd.read_csv('..\/input\/iris\/Iris.csv')","e0575484":"df.head()","ae257758":"df.info()","a84aeff2":"df.describe()","eff320f4":"\ndef barchart(feature):\n    setosa=df[df['Species']=='Iris-setosa'][feature].value_counts()\n    virginica=df[df['Species']=='Iris-virginica'][feature].value_counts()\n    versicolor=df[df['Species']=='Iris-versicolor'][feature].value_counts()\n    #dead=df[df['Accident']==0][feature].value_counts()\n    #survived1=survived[1]\n    #dead1=dead[0]\n    df1 = pd.DataFrame([setosa,virginica,versicolor])\n    df1.index=['setosa','virginica','versicolor']\n    df1.plot(kind='bar',stacked=True,figsize=(10,5))","7e293545":"barchart('SepalLengthCm')","3c5ab29e":"df['SepalLengthCm'].value_counts().plot(kind='bar')","38707f78":"df['PetalLengthCm'].value_counts().plot(kind='bar')","fdf84daa":"df['PetalWidthCm'].value_counts().plot(kind='bar')","50cb5cbb":"barchart('PetalLengthCm')","cb75b567":"barchart('PetalWidthCm')","061bc597":"df['SepalLengthCm'].value_counts().plot(kind='pie')","84ac6491":"df['PetalLengthCm'].value_counts().plot(kind='pie')","e3ed7fe1":"df['PetalWidthCm'].value_counts().plot(kind='pie')","5cd7c351":"## drop the useless and the target column","3ffa05e3":"X= df.drop(['Id', 'Species'], axis=1)\nY = df['Species']","3d7170a5":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score","fd41813d":"X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.3)","5b23dacf":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC,LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier","e39a55d0":"sample_result=[]\nMachineLearningAlgo=[]\nX=['LinearSVC','DecisionTreeClassifier','KNeighborsClassifier','SVC','GradientBoostingClassifier','RandomForestClassifier']\nZ=[LinearSVC(),DecisionTreeClassifier(),KNeighborsClassifier(),SVC(),GradientBoostingClassifier(),RandomForestClassifier()]","b8dc3e99":"for model in Z:\n    model.fit(X_train,y_train)      ## training the model this could take a little time\n    accuracy=model.score(X_test,y_test)    ## comparing result with the test data set\n    MachineLearningAlgo.append(accuracy) \n    sample_result.append(model.predict([[6, 3, 4, 2]]))\n    ## saving the accuracy","f3913cb4":"d={'Accuracy':MachineLearningAlgo,'Algorithm':X}\ndf1=pd.DataFrame(d)","972e1242":"d1={'sample_result':sample_result,'Algorithm':X}\ndf2=pd.DataFrame(d1)","99c92e24":"# testting with different types of nearest neighbour in KNN\nfrom sklearn import metrics\nklist = list(range(1,30))\nscores = []\nfor k in klist:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train)\n    y_pred = knn.predict(X_test)\n    scores.append(metrics.accuracy_score(y_test, y_pred))\n    \nplt.plot(klist, scores)\nplt.xlabel('Value of k for KNN')\nplt.ylabel('Accuracy Score')\nplt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')\nplt.show()\n","24f50a92":"df1","afe55ba4":"df2","3084b1ca":"# modeling with sklearn"}}