{"cell_type":{"06108510":"code","b9199d34":"code","6691b255":"code","97c7e846":"code","c834550c":"code","da445efe":"code","c2842394":"code","4e58594e":"code","fb566cc7":"code","e1490320":"code","54f9e6e7":"code","e9dcdc75":"code","535b9a89":"code","63338a5b":"code","a9542379":"code","f80d8f28":"code","16958290":"code","296617c8":"markdown","d8818ab0":"markdown","d965e338":"markdown","4cd94d2e":"markdown","38cf48fb":"markdown","bfd72725":"markdown","1264fbcd":"markdown","948838bd":"markdown","7dc89dce":"markdown","8938ed94":"markdown","425f522e":"markdown","3e91e4d0":"markdown","ae8b2e2c":"markdown","23b6524a":"markdown","f80a06c3":"markdown","4f6bfa49":"markdown","c7574d9b":"markdown","115ec80a":"markdown","88c7ceda":"markdown","c2afc718":"markdown"},"source":{"06108510":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\"\"\"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\"\"\"\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9199d34":"# Common libs\nimport numpy as np\nimport pandas as pd\nimport os\nfrom pathlib import Path\n\n# Image processing\nimport cv2\n\n# Utility\nfrom tqdm import tqdm\n\n# Sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# Charts\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Tensorflow\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import vgg16\nfrom keras.layers import Dense, Dropout, BatchNormalization, Flatten\nfrom keras.models import Model, load_model\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping","6691b255":"input_path = '..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset'\n# Create Series contains all file_paths\nfile_paths = pd.Series(list(Path(input_path).glob('**\/*.png')), name='file_path')\n# Convert poxispath to str\nfile_paths = file_paths.map(lambda file_path: str(file_path))\n# Create Series contains all labels corresponding to file_path\nlabels = pd.Series(list(map(lambda file_path: file_path.split('\/')[6], file_paths)), name='category')\n# Create DataFrame cotains file_path and label\nfishes = pd.concat([file_paths, labels], axis=1)\n# Remove all files in GT folder\nfishes = fishes[fishes.category.map(lambda cate: cate[-2:] != 'GT')]\n# Shuffle data\nfishes = fishes.sample(frac=1).reset_index(drop=True)\nfishes.head()","97c7e846":"fishes.category.value_counts().plot(kind='bar')\nplt.title('Category counts')\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.show()","c834550c":"def plot_first_six_image():\n    fig = plt.figure(figsize=(20, 20))\n    for i in range(6):\n        row = fishes.loc[i]\n        ax = fig.add_subplot(1, 6, i+1)\n        img = plt.imread(row.file_path)\n        img = cv2.resize(img, (224, 224))\n        ax.set_title(row.category)\n        ax.imshow(img)\n    \nplot_first_six_image()","da445efe":"# Split to train\/test dataset\ntrain_fishes, test_fishes = train_test_split(fishes, test_size=0.2)","c2842394":"train_gen = ImageDataGenerator(validation_split=0.2)\ntest_gen = ImageDataGenerator()\ntrain_batches = train_gen.flow_from_dataframe(dataframe=train_fishes,\n                                             x_col='file_path',\n                                             y_col='category',\n                                             class_mode='categorical',\n                                             batch_size=64,\n                                             target_size=(224, 224),\n                                             subset='training',\n                                             color_mode='rgb')\nvalid_batches = train_gen.flow_from_dataframe(dataframe=train_fishes,\n                                             x_col='file_path',\n                                             y_col='category',\n                                             class_mode='categorical',\n                                             batch_size=64,\n                                             target_size=(224, 224),\n                                             subset='validation',\n                                             color_mode='rgb')\n# In test_batches, we should set shuffle=False to match predicted ouputs and grouth-true labels later\ntest_batches = test_gen.flow_from_dataframe(dataframe=test_fishes,\n                                           x_col='file_path',\n                                           y_col='category',\n                                           class_mode='categorical',\n                                           batch_size=64,\n                                           target_size=(224, 224),\n                                           color_mode='rgb',\n                                           shuffle=False)","4e58594e":"# Load and save pretrained VGG16\nbase_model = vgg16.VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\nif os.path.exists('..\/models') == False:\n    os.mkdir('..\/models')\nbase_model.save('..\/models\/vgg16_as_feature_extractor.h5')","fb566cc7":"# Freeze all conv block\nbase_model = load_model('..\/models\/vgg16_as_feature_extractor.h5')\nfor layer in base_model.layers:\n    layer.trainable = False\nbase_model.summary()","e1490320":"last_layer = base_model.get_layer('block5_pool')\nlast_output = last_layer.output\n\nx = Flatten()(last_output)\nx = Dense(64, activation='relu', name='FC_1')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.3)(x)\nx = Dense(9, activation='softmax', name='softmax')(x)\n\nnew_model = Model(inputs=base_model.input, outputs=x)\nnew_model.summary()","54f9e6e7":"early_stopping = EarlyStopping(monitor='val_accuracy',\n                               min_delta=0,\n                               patience=3,\n                               verbose=1,\n                               mode='auto',\n                               restore_best_weights=True)\nnew_model.compile(Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])\nhistory = new_model.fit_generator(generator=train_batches,\n                       steps_per_epoch=train_batches.n \/\/ train_batches.batch_size,\n                       validation_data=valid_batches,\n                       validation_steps=valid_batches.n \/\/ valid_batches.batch_size,\n                       epochs=10,\n                       verbose=1,\n                       callbacks=[early_stopping])\nnew_model.save('..\/models\/fish_classifier_best_model.h5')","e9dcdc75":"results = new_model.evaluate(test_batches, verbose=1)\nprint('Test accuracy: %.3f' % (results[1] * 100), '%')\nprint('Test loss: %.3f' % results[0])","535b9a89":"def plot_learning_curves(value='loss'):\n    plt.plot(history.history[value], label='train')\n    plt.plot(history.history['val_' + value], label='val')\n    plt.xlabel('epochs')\n    plt.ylabel(value + ' value')\n    plt.legend()\n    plt.show()","63338a5b":"plot_learning_curves()","a9542379":"plot_learning_curves('accuracy')","f80d8f28":"y_hat = new_model.predict(test_batches, verbose=1)\n# Compare first 10 predicted value and ground truth label\nprint('First 10 predicted value from model: ', np.argmax(y_hat[:10], axis=1))\nprint('First 10 ground truth label: ', test_batches.labels[:10])","16958290":"category = ['Black Sea Sprat', 'Glit-Head Bream', 'Hourse Mackerel', 'Red Mullet', \n           'Red Sea Bream', 'Sea Bass', 'Shrimp', 'Striped Red Mullet', 'Trout']\nconf_mat = confusion_matrix(y_true=test_batches.labels,\n                            y_pred=np.argmax(y_hat, axis=1))\nplt.imshow(conf_mat, cmap=plt.cm.Blues)\nplt.colorbar()\nindexes = np.arange(len(category))\nfor i in indexes:\n    for j in indexes:\n        plt.text(j, i, conf_mat[i, j], \n                horizontalalignment='center', \n                verticalalignment='center')\nplt.xticks(indexes, category, rotation=90)   \nplt.xlabel('Predicted label')\nplt.yticks(indexes, category)\nplt.ylabel('Ground truth')\nplt.title('Confusion matrix')\nplt.show()","296617c8":"## **3. Create DataFrame containts file path and  category**","d8818ab0":"## **1. Introduction**\n* Fish classification\n* This version uses pretrained VGG16 as feature extractor and add 2 fully connected layers\n* Dataset doesnt include image in GT folder\n* Train over 10 epoch - 99.44% acc on test dataset","d965e338":"## **9. Evaluate model**","4cd94d2e":"## **11. Confusion matrix**","38cf48fb":"## **7. Pretrained VGG16**","bfd72725":"## **8. Define new model**","1264fbcd":"Generate confusion matrix","948838bd":"**Compile model**","7dc89dce":"## **Add new classifier**\n\nNew classifier contains 2 FCS:\n\n* 1 FC contains 64 unit\n* 1 FC contains 9 unit (9 category)","8938ed94":"## **2. Import libs**","425f522e":"## **10. Plot learning curves**","3e91e4d0":"**Freeze feature extractor**","ae8b2e2c":"**Plot loss value**","23b6524a":"**Load and save pretrained VGG16**","f80a06c3":"## **4. Visualize image**","4f6bfa49":"Predict","c7574d9b":"After remove all file in GT folder from DataFrame, each category contains 1000 image","115ec80a":"**Plot accuracy value**","88c7ceda":"## **5. Split to train\/test dataset**","c2afc718":"## **6. Image generator**"}}