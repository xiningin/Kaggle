{"cell_type":{"02caeb53":"code","d0593406":"code","1554b894":"code","099d9fe9":"markdown"},"source":{"02caeb53":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sn\n\ntrain = pd.read_csv(\"..\/input\/mitbih-arrhythmia-database-de-chazal-class-labels\/DS1_signals.csv\", header=None)\nlabels = pd.read_csv(\"..\/input\/mitbih-arrhythmia-database-de-chazal-class-labels\/\/DS1_labels.csv\", header=None)\ntest = pd.read_csv(\"..\/input\/mitbih-arrhythmia-database-de-chazal-class-labels\/DS2_signals.csv\", header=None)\nlabels2 = pd.read_csv(\"..\/input\/mitbih-arrhythmia-database-de-chazal-class-labels\/\/DS2_labels.csv\", header=None)\n\ntrain['arrhytmia']=labels[0]\ntest['arrhytmia']=labels2[0]\ntotal=train.append(test)","d0593406":"total","1554b894":"def clustertechniques2(dtrain,label,indexv):\n    print('#encodings',dtrain.shape)\n    cols=[ci for ci in dtrain.columns if ci not in [indexv,'index',label]]\n    dtest=dtrain[dtrain[label].isnull()==True][[indexv,label]]\n    print(dtest)\n    #split data or use splitted data\n    X_train=dtrain[dtrain[label].isnull()==False].drop([indexv,label],axis=1).fillna(0)\n    Y_train=dtrain[dtrain[label].isnull()==False][label]\n    X_test=dtrain[dtrain[label].isnull()==True].drop([indexv,label],axis=1).fillna(0)\n    Y_test=np.random.random((X_test.shape[0],1))\n    if len(X_test)==0:\n        from sklearn.model_selection import train_test_split\n        X_train,X_test,Y_train,Y_test = train_test_split(dtrain.drop(label,axis=1).fillna(0),dtrain[label],test_size=0.25,random_state=0)\n    lenxtr=len(X_train)\n    print('splitting data train test X-y',X_train.shape,Y_train.shape,X_test.shape,Y_test.shape)\n   \n\n\n    import matplotlib.pyplot as plt \n    from sklearn import preprocessing\n    scale = preprocessing.MinMaxScaler().fit(X_train)\n    X_train = scale.transform(X_train)\n    X_test = scale.transform(X_test)\n\n    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n    from sklearn.neighbors import KNeighborsClassifier,NeighborhoodComponentsAnalysis\n    from sklearn.decomposition import PCA,TruncatedSVD,NMF,FastICA\n    from umap import UMAP  # knn lookalike of tSNE but faster, so scales up\n    from sklearn.manifold import TSNE #limit number of records to 100000\n\n    clusters = [TruncatedSVD(n_components=20, n_iter=7, random_state=42),\n                Dummy(1),\n                FastICA(n_components=7,random_state=0),\n                 ] \n    clunaam=['tSVD','raw','ICA']\n    \n    \n    from sklearn.neighbors import KNeighborsClassifier\n    from sklearn.svm import SVC, LinearSVC,NuSVC\n    from sklearn.multiclass import OneVsRestClassifier\n    from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier,ExtraTreesClassifier, AdaBoostClassifier, GradientBoostingClassifier\n    from sklearn.neural_network import MLPClassifier,MLPRegressor\n    from sklearn.linear_model import PassiveAggressiveClassifier,Perceptron,SGDClassifier,LogisticRegression\n    import xgboost as xgb\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.naive_bayes import GaussianNB\n    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\n    \n    classifiers = [KNeighborsClassifier(n_neighbors=5,n_jobs=-1),\n                   RandomForestClassifier(n_estimators=100, random_state=42,n_jobs=-1, oob_score=True),\n                   ExtraTreesClassifier(n_estimators=10, max_depth=50, min_samples_split=5, min_samples_leaf=1, random_state=None, min_impurity_decrease=1e-7),\n                   xgb.XGBClassifier(n_estimators=50, max_depth = 9, learning_rate=0.01, subsample=0.75, random_state=11),\n                   DecisionTreeClassifier(),\n                  ]\n    clanaam= ['KNN','rFor','Xtr','xgb','Decis']\n    from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\n    \n    results=[]\n\n\n    #cluster data\n    for clu in clusters:\n        clunm=clunaam[clusters.index(clu)] #find naam\n        X_total_clu = clu.fit_transform(np.concatenate( (X_train,X_test),axis=0))\n        X_total_clu = np.concatenate( (X_total_clu,np.concatenate( (X_train,X_test),axis=0)), axis=1)\n        plt.scatter(X_total_clu[:lenxtr,0],X_total_clu[:lenxtr,1],c=Y_train.values,cmap='prism')\n        plt.title(clu)\n        plt.show()\n        \n        #classifiy \n        for cla in classifiers:\n            import datetime\n            start = datetime.datetime.now()\n            clanm=clanaam[classifiers.index(cla)] #find naam\n            \n            print('    ',cla)\n            #cla.fit(X_total_clu,np.concatenate( (Y_train,Y_test)) )\n            cla.fit(X_total_clu[:lenxtr],Y_train )\n            \n            #predict\n            trainpredi=cla.predict(X_total_clu[:lenxtr])\n\n            print(classification_report(trainpredi,Y_train))            \n            testpredi=cla.predict(X_total_clu[lenxtr:])  \n            if classifiers.index(cla) in [0,2,3,4,5,7,8,9,10,11,12,13]:\n                trainprediprob=cla.predict_proba(X_total_clu[:lenxtr])\n                testprediprob=cla.predict_proba(X_total_clu[lenxtr:]) \n                plt.scatter(x=testprediprob[:,1], y=testpredi, marker='.', alpha=0.3)\n                plt.show()            \n            #testpredi=converging(pd.DataFrame(X_train),pd.DataFrame(X_test),Y_train,pd.DataFrame(testpredi),Y_test,clu,cla) #PCA(n_components=10,random_state=0,whiten=True),MLPClassifier(alpha=0.510,activation='logistic'))\n            \n            if len(dtest)==0:\n                test_score=cla.score(X_total_clu[lenxtr:],Y_test)\n                accscore=accuracy_score(testpredi,Y_test)\n                \n                train_score=cla.score(X_total_clu[:lenxtr],Y_train)\n\n                li = [clunm,clanm,train_score,accscore]\n                results.append(li)                \n                print(confusion_matrix(testpredi,Y_test))\n\n                plt.title(clanm+'test accuracy versus unknown:'+np.str(test_score)+' '+np.str(accscore)+' and test confusionmatrix')\n                plt.scatter(x=Y_test, y=testpredi, marker='.', alpha=1)\n                plt.scatter(x=[np.mean(Y_test)], y=[np.mean(testpredi)], marker='o', color='red')\n                plt.xlabel('Real test'); plt.ylabel('Pred. test')\n                plt.show()\n\n\n            else:\n#                testpredlabel=le.inverse_transform(testpredi)  #use if you labellezid the classes \n                testpredlabel=testpredi\n                print(confusion_matrix(trainpredi,Y_train))\n                submit = pd.DataFrame({indexv: dtest[indexv],label: testpredlabel})\n                submit[label]=submit[label].astype('int')\n\n                filenaam='subm_'+clunm+'_'+clanm+'.csv'\n                submit.to_csv(path_or_buf =filenaam, index=False)\n                \n            print(clanm,'0 classifier time',datetime.datetime.now()-start)\n            \n    if len(dtest)==0:       \n        print(pd.DataFrame(results).sort_values(3))\n        submit=[]\n    return submit\n\n#Custom Transformer that extracts columns passed as argument to its constructor \nclass Dummy( ):\n    #Class Constructor \n    def __init__( self, feature_names ):\n        self._feature_names = feature_names \n    \n    #Return self nothing else to do here    \n    def fit( self, X, y = None ):\n        return self \n    \n    #Method that describes what we need this transformer to do\n    def fit_transform( self, X, y = None ):\n        return X \n\nclustertechniques2(total.reset_index(),'arrhytmia','index') ","099d9fe9":"# overview\nof different clustering - classifier combinations and efficiency\n\nso with this information, the maximum accuracy should hoover approx 98.6%\n\nthe most difficult point is having a good confusion matrix for class 2 and 4"}}