{"cell_type":{"f001fd3d":"code","80dc3dcf":"code","47b10f44":"code","e1d24674":"code","070ce087":"code","714e20e7":"code","bc28a680":"code","503f0ea3":"code","2f3ac48b":"code","504aeb63":"code","823fa441":"code","8a9988ac":"code","32a8181d":"code","12575a40":"code","806a331c":"code","8486ecfe":"code","f953abe0":"code","b3da4b82":"code","0ab5c0dd":"code","d85c2de7":"code","b62f199b":"code","94e164d1":"code","bff9ecdf":"code","01ae95ba":"code","f51921d4":"code","7e3f593d":"code","034521cc":"code","4162dd9b":"code","9610fb45":"code","dcae71a3":"code","745c89de":"code","b56bb775":"code","8beb7914":"markdown","b4b30beb":"markdown","ef1e78e8":"markdown"},"source":{"f001fd3d":"import numpy              as np\nimport pandas             as pd\nimport matplotlib.pyplot  as plt\nimport seaborn            as sns\nimport tensorflow         as tf\n\n\nfrom sklearn.preprocessing   import OneHotEncoder\nfrom sklearn.compose         import ColumnTransformer\nfrom sklearn.preprocessing   import StandardScaler\n\n\nfrom sklearn.model_selection  import train_test_split\nfrom sklearn.linear_model     import LinearRegression\nfrom sklearn.linear_model     import LogisticRegression\nfrom sklearn.neighbors        import KNeighborsClassifier\nfrom sklearn.tree             import DecisionTreeClassifier\nfrom sklearn.ensemble         import RandomForestClassifier\nfrom sklearn.naive_bayes      import GaussianNB\nfrom sklearn.linear_model     import SGDClassifier\nfrom sklearn.metrics          import confusion_matrix,accuracy_score\n","80dc3dcf":"df=pd.read_csv('..\/input\/telcocustomerchurn\/Telco-Customer-Churn.csv')","47b10f44":"df.head()","e1d24674":"df.shape","070ce087":"df.info()","714e20e7":"df.describe()","bc28a680":"df.isnull().sum()","503f0ea3":"df.dtypes","2f3ac48b":"df.columns","504aeb63":"corr=df.corr()","823fa441":"plt.figure(figsize=(25,10))\nsns.heatmap(corr,vmax=0.7,square=True,annot=True)","8a9988ac":"transform = ColumnTransformer([('One',OneHotEncoder(),[1,3]),('sc',StandardScaler(),[2,5])],remainder='passthrough')","32a8181d":"x=transform.fit_transform(df)\n","12575a40":"column=['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport','StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n       'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn']","806a331c":"from sklearn.preprocessing import LabelEncoder\ncols = ('customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport','StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n       'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn')\n# Process columns and apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(df[c].values)) \n    df[c] = lbl.transform(list(df[c].values))\n\n# Check shape        \nprint('Shape data: {}'.format(df.shape))","8486ecfe":"x=df.drop('Churn',axis=1)\ny=df['Churn']\n","f953abe0":"x.head()","b3da4b82":"y","0ab5c0dd":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2, random_state = 42)","d85c2de7":"model=LinearRegression()\nmodel.fit(xtrain,ytrain)\nypred=model.predict(xtest)\nacc_lin_reg=round(model.score(xtrain,ytrain)*100,2 )\nprint(str(acc_lin_reg)+ ' percent')","b62f199b":"model = LogisticRegression(random_state=10)\nmodel.fit(xtrain,ytrain)\nypred=model.predict(xtest)\nprint(model.score(xtrain,ytrain))\n\nacc_log_reg=round(model.score(xtrain,ytrain)*100,2 )\nprint(str(acc_log_reg)+' percent')","94e164d1":"model = KNeighborsClassifier(n_neighbors = 3)\nmodel.fit(xtrain, ytrain)\nypred = model.predict(xtest)\nacc_knn = round(model.score(xtrain, ytrain) * 100, 2)\nprint (acc_knn)","bff9ecdf":"model = DecisionTreeClassifier(max_depth = 15,random_state=100)\nmodel.fit(xtrain, ytrain)\ny_pred = model.predict(xtest)\nacc_decision_tree = round(model.score(xtrain, ytrain) * 100, 2)\nprint (acc_decision_tree)\n","01ae95ba":"model = RandomForestClassifier(n_estimators=100,max_depth = 15)\nmodel.fit(xtrain, ytrain)\nypred = model.predict(xtest)\nacc_random_forest = round(model.score(xtrain, ytrain) * 100, 2)\nprint (acc_random_forest)","f51921d4":"model = GaussianNB()\nmodel.fit(xtrain, ytrain)\nypred = model.predict(xtest)\nacc_gnb = round(model.score(xtrain, ytrain) * 100, 2)\nprint (acc_gnb)","7e3f593d":"model = SGDClassifier()\nmodel.fit(xtrain, ytrain)\nypred = model.predict(xtest)\nacc_sgd = round(model.score(xtrain, ytrain) * 100, 2)\nprint (acc_sgd)","034521cc":"models = pd.DataFrame({\n    'Model': ['Linear Regression','Logistic Regression', \n              'KNN', 'Decision Tree', 'Random Forest', 'Naive Bayes', \n              'Stochastic Gradient Decent'],\n    \n    'Score': [acc_lin_reg,acc_log_reg,acc_knn,  \n              acc_decision_tree, acc_random_forest, acc_gnb, \n             acc_sgd]\n    })\n\nmodels.sort_values(by='Score', ascending=False)","4162dd9b":"model = RandomForestClassifier(n_estimators=100,max_depth = 15)\nmodel.fit(xtrain, ytrain)\nypred = model.predict(xtest)\nacc_random_forest = round(model.score(xtrain, ytrain) * 100, 2)\nprint (acc_random_forest)","9610fb45":"ypred=model.predict(xtest)\nprint(confusion_matrix(ytest,ypred))","dcae71a3":"print(accuracy_score(ytest,ypred))","745c89de":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU,PReLU,ELU\nfrom keras.layers import Dropout\n\n\n# Initialising the ANN\nclassifier =  tf.keras.models.Sequential()\n\n# Adding the hidden layer\nclassifier.add(tf.keras.layers.Dense(units=6, activation='relu'))\n\n# Adding the second hidden layer\nclassifier.add(tf.keras.layers.Dense(units=6, activation='relu'))\n\n# Adding the thred hidden layer\nclassifier.add(tf.keras.layers.Dense(units=6, activation='relu'))\n\n# Adding the output layer\nclassifier.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\n","b56bb775":"# Compiling the ANN\nclassifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Fitting the ANN to the Training set\nclassifier.fit(xtrain, ytrain, batch_size=32, epochs=100)","8beb7914":"Import libraries","b4b30beb":"Load dataset","ef1e78e8":"Artificial Neural **Network**"}}