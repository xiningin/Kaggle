{"cell_type":{"6bb490ae":"code","540c1804":"code","60264a05":"code","bad7700d":"code","d762b330":"code","f799413b":"code","e8133c54":"code","140690ef":"code","f82e76e5":"code","4700fbdc":"code","cb0ae486":"code","09b85a86":"code","61712b55":"code","81d761fa":"code","f4b41556":"code","2a92d0a0":"code","a8c31837":"code","5c1dd886":"code","6a487f19":"code","b90846e9":"code","4d2355bc":"code","58c39ef5":"code","22efbfe9":"code","23d77c4d":"code","cca87cfa":"code","8243a0ca":"code","c796701c":"code","7f8c2527":"code","977a2b4d":"code","090e176b":"code","10e4b965":"code","27fb7884":"code","aedde1e8":"markdown","73605485":"markdown","98a857b6":"markdown","bca89359":"markdown","6fad95ab":"markdown","4dac08a8":"markdown","e47cfe4d":"markdown","8dec53a4":"markdown","40c3b829":"markdown","a60c884c":"markdown","097849c3":"markdown","b57894bf":"markdown","aa108e07":"markdown","067997aa":"markdown","37b54e68":"markdown","9d7bc14b":"markdown","f9c6da59":"markdown","98872f6c":"markdown","36eed327":"markdown","6b167d3d":"markdown","04a48384":"markdown","e7dcf416":"markdown","8623724c":"markdown"},"source":{"6bb490ae":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib\nfrom pandas import datetime\nimport seaborn as sns\nimport plotly.express as px\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf, arma_order_select_ic\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pandas.plotting import autocorrelation_plot\nimport pmdarima as pm","540c1804":"covid_train=pd.read_csv(r\"..\/input\/covid19-global-forecasting-week-3\/train.csv\")\ncovid_test=pd.read_csv(r\"..\/input\/covid19-global-forecasting-week-3\/test.csv\")","60264a05":"covid_train.head()","bad7700d":"covid_test.head()","d762b330":"covid_train.isnull().sum()\/covid_train.shape[0]\ncovid_train.columns\ncovid_train.fillna('NA', inplace=True)","f799413b":"by_country = covid_train.groupby(['Country_Region','Province_State','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)\ncovid_train.fillna(\"NA\").groupby('Country_Region')['ConfirmedCases'].sum().sort_values()\nby_country_df = pd.DataFrame(by_country)","e8133c54":"#using seaborn\nsns.set(style=\"darkgrid\")\nsns.barplot(x=by_country_df.index[0:8], y=\"ConfirmedCases\", data= by_country_df.head(8))\n","140690ef":"#using plotly.express\nsns.barplot(data = by_country_df.head(15), x= by_country_df.index[0:15], y= 'ConfirmedCases')\n","f82e76e5":"by_date = covid_train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index()\nby_date_df = pd.DataFrame(by_date)","4700fbdc":"sns.barplot(data = by_date_df.loc[(by_date_df['Country_Region']=='India') & (by_date_df.Date >= '2020-01-22')].sort_values('ConfirmedCases', ascending= True),\n            x= 'Date', y= 'ConfirmedCases')","cb0ae486":"sns.barplot(data = by_date_df.loc[(by_date_df['Country_Region']=='US') & (by_date_df.Date >= '2020-01-22')].sort_values('ConfirmedCases', ascending= True),\n            x= 'Date', y= 'ConfirmedCases')","09b85a86":"sns.barplot(data = by_date_df.loc[(by_date_df['Country_Region']=='China') & (by_date_df.Date >= '2020-01-22')].sort_values('ConfirmedCases', ascending= True),\n            x= 'Date', y= 'ConfirmedCases')","61712b55":"sns.barplot(data = by_date_df.loc[(by_date_df['Country_Region']=='Germany') & (by_date_df.Date >= '2020-01-22')].sort_values('ConfirmedCases', ascending= False),\n            x= 'Date', y= 'ConfirmedCases')","81d761fa":"sns.barplot(data = by_date_df.loc[(by_date_df['Country_Region']=='Italy') & (by_date_df.Date >= '2020-01-22')].sort_values('ConfirmedCases', ascending= True),\n            x= 'Date', y= 'ConfirmedCases')","f4b41556":"cols1 = ['Id', 'Province_State', 'Country_Region', 'Fatalities']\nCOVID_ts_ConfirmedCases_train = covid_train.drop(cols1, axis= 1)\n#COVID_ts_ConfirmedCases_train.shape\n\ncols2 = ['ForecastId', 'Province_State', 'Country_Region']\nCOVID_ts_ConfirmedCases_test = covid_test.drop(cols2, axis= 1)\n#COVID_ts_ConfirmedCases_test.shape","2a92d0a0":"COVID_ts_ConfirmedCases_train.index = pd.to_datetime(COVID_ts_ConfirmedCases_train['Date'])\nCOVID_ts_ConfirmedCases_train.drop('Date', inplace= True, axis= 1)\n#COVID_ts_ConfirmedCases_train.shape\n#COVID_ts_ConfirmedCases_train.info()\n\nCOVID_ts_ConfirmedCases_test.index = pd.to_datetime(COVID_ts_ConfirmedCases_test['Date'])\nCOVID_ts_ConfirmedCases_test.drop('Date', inplace= True, axis= 1)\n#COVID_ts_ConfirmedCases_test.shape\n#COVID_ts_ConfirmedCases_test.info()","a8c31837":"COVID_ts_ConfirmedCases_train = COVID_ts_ConfirmedCases_train.resample('d').mean()\nCOVID_ts_ConfirmedCases_test = COVID_ts_ConfirmedCases_test.resample('d').sum()\/COVID_ts_ConfirmedCases_test.shape[0]","5c1dd886":"COVID_ts_ConfirmedCases_train.plot()","6a487f19":"autocorrelation_plot(COVID_ts_ConfirmedCases_train)","b90846e9":"result = adfuller(COVID_ts_ConfirmedCases_train.dropna())\nprint('ADF Statistic: {}'.format(result[0]))\nprint('p-value: {}'.format(result[1]))\n#print('Critical Values:')\nfor key, value in result[4].items():\n    print('Critical Values:','\\t{}: {}'.format(key, value))","4d2355bc":"fig = plt.figure()\nplt.plot(COVID_ts_ConfirmedCases_train.ConfirmedCases)\nplt.show()\n\nplot_acf(COVID_ts_ConfirmedCases_train.ConfirmedCases) #1\nplt.show()","58c39ef5":"plt.plot(COVID_ts_ConfirmedCases_train.ConfirmedCases.diff())\nplt.show()\n\nplot_acf(COVID_ts_ConfirmedCases_train.ConfirmedCases.diff()) #0\nplt.show()","22efbfe9":"plot_pacf(COVID_ts_ConfirmedCases_train.ConfirmedCases)\nplt.show()","23d77c4d":"plot_pacf(COVID_ts_ConfirmedCases_train.ConfirmedCases.diff()) #1 = AR = p\nplt.show()","cca87cfa":"model = ARIMA(COVID_ts_ConfirmedCases_train.ConfirmedCases, order=(1,2,0))\nmodel_fit = model.fit(disp= -1)\nprint(model_fit.summary())","8243a0ca":"model_fit.plot_predict(dynamic=False)\nplt.show()","c796701c":"fc, se, conf = model_fit.forecast(31, alpha= 0.05) #95% confidence\ntest = pd.DataFrame(COVID_ts_ConfirmedCases_test.loc['2020-04-07':])\n# Make as pandas series\nfc_series = pd.Series(fc, index=test.index)\nlower_series = pd.Series(conf[:, 0], index=test.index)\nupper_series = pd.Series(conf[:, 1], index=test.index)\n\n# Plot\nplt.figure(figsize=(12,5), dpi=100)\nplt.plot(COVID_ts_ConfirmedCases_train, label='training')\n#plt.plot(test, label='actual')\nplt.plot(fc_series, label='forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series,\n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","7f8c2527":"model = pm.auto_arima(COVID_ts_ConfirmedCases_train.ConfirmedCases, start_p=1, start_q=1,\n                   test='adf',       # use adftest to find optimal 'd'\n                   max_p=3, max_q=3, # maximum p and q\n                   m=1,              # frequency of series\n                   d=None,           # let model determine 'd'\n                   seasonal=False,   # No Seasonality\n                   start_P=0,\n                   D=0,\n                   trace=True,\n                   error_action='ignore',\n                   suppress_warnings=True,\n                   stepwise=True)","977a2b4d":"model = ARIMA(COVID_ts_ConfirmedCases_train.ConfirmedCases, order=(1,2,1))\nmodel_fit = model.fit(disp= -1)\nprint(model_fit.summary())","090e176b":"fc, se, conf = model_fit.forecast(31, alpha= 0.05) #95% confidence\ntest = pd.DataFrame(COVID_ts_ConfirmedCases_test.loc['2020-04-07':])\n# Make as pandas series\nfc_series = pd.Series(fc, index=test.index)\nlower_series = pd.Series(conf[:, 0], index=test.index)\nupper_series = pd.Series(conf[:, 1], index=test.index)\n\n# Plot\nplt.figure(figsize=(12,5), dpi=100)\nplt.plot(COVID_ts_ConfirmedCases_train, label='training')\n#plt.plot(test, label='actual')\nplt.plot(fc_series, label='forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series,\n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","10e4b965":"\nfrom pandas import datetime\nstart_index = datetime(2020, 4, 7)\nend_index = datetime(2020, 5, 7)\nforecast = model_fit.predict(start=start_index, end=end_index)","27fb7884":"forecast","aedde1e8":"Plotting Forecaste","73605485":"Plotting the confirmed cases by per day in United States","98a857b6":"Importing all the required packages","bca89359":"Confirmed Cases Globally","6fad95ab":"1st differencing of Origianl series and ACF\nTo find MA(q) parameter","4dac08a8":"PACF plots","e47cfe4d":"**Auto ARIMA**","8dec53a4":"Plotting the confirmed cases by per day in China","40c3b829":"Visualisation of Confirmed cases as per countries using Seaborn package","a60c884c":"# Actual vs Fitted","097849c3":"Original Series ACF","b57894bf":"Prediction","aa108e07":"Modifying p, d, q as per AIC factor provided by Aouto-ARIMA","067997aa":"1st differencing\nTo find AR(p)","37b54e68":"Plotting the confirmed cases by per day in Germany","9d7bc14b":"Grouping up the confirmed cases as per countries","f9c6da59":"Plotting the confirmed cases by per day in Italy","98872f6c":"Lag vs Autocorrelation","36eed327":"Grouping the data as per date and country region","6b167d3d":"Plotting the confirmed cases by per day in India","04a48384":"Loading the data","e7dcf416":"Building ARIMA","8623724c":"Visualisation of Confirmed cases as per countries using Plotly package"}}