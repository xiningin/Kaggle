{"cell_type":{"7e99b298":"code","ae41c351":"code","d9c12fe4":"code","1e566c3b":"code","4305d4c8":"code","eddd9fbd":"code","7729ec47":"code","e776698d":"code","49dcac31":"code","953ac302":"code","8c140656":"code","ea9ca79f":"code","5a4725e8":"markdown"},"source":{"7e99b298":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","ae41c351":"data = pd.read_csv('..\/input\/diabetes-data-set\/diabetes.csv')","d9c12fe4":"data.head()","1e566c3b":"zero_not_accepted = ['Glucose','BloodPressure','SkinThickness','BMI','Insulin']\nfor col in zero_not_accepted:\n    data[col]= data[col].replace(0,np.NaN)\n    mean = int(data[col].mean(skipna=True))\n    data[col] = data[col].replace(np.NaN,mean)","4305d4c8":"X = data.iloc[:,0:8]\ny = data.iloc[:,8]","eddd9fbd":"sns.heatmap(data.corr())","7729ec47":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)","e776698d":"X_train","49dcac31":"X_train.columns","953ac302":"def Euclidean_distance(point1, point2):\n    distance = 0\n    for col in X_train.columns:\n        distance += np.square(point1[col]-point2[col])\n    return np.sqrt(distance)","8c140656":"def KNN(k_value, X_train, X_test, y_train):\n    test_labels = []\n    for test in range(X_test.shape[0]):\n        distance = []\n        index = []\n        for train in range(X_train.shape[0]):\n            distance.append(Euclidean_distance(X_test.iloc[test], X_train.iloc[train]))\n            index.append(train)\n        Distance_Frame = pd.DataFrame({\n            'Distance': distance,\n            'Index': index\n        })\n        Distance_Frame = Distance_Frame.sort_values('Distance')\n        zeros_count = 0 \n        ones_count = 0\n        for i in Distance_Frame['Index'].head(k_value):\n            if y_train.iloc[i] == 0:\n                zeros_count+=1\n            elif y_train.iloc[i] == 1:\n                ones_count+=1\n        if zeros_count>=ones_count:\n            test_labels.append(0)\n        else:\n            test_labels.append(1)\n    return test_labels","ea9ca79f":"for i in range(3, 18, 3):\n    Pred_labels = KNN(i, X_train, X_test, y_train)\n    print('K:',i, end=\", \")\n    print(accuracy_score(Pred_labels, y_test))","5a4725e8":"# Using KNN Algorithm (To Predict if a Person will have Diabetes or Not)"}}