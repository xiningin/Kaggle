{"cell_type":{"e0adb6d5":"code","d437ab32":"code","55a31c9c":"code","9b49c6ab":"code","8fef0c6f":"code","011f0bf4":"code","914bcd0e":"code","99b47641":"code","78f06f2c":"code","ccfe934f":"code","e844b61c":"markdown","7ae8839a":"markdown","6ef79330":"markdown"},"source":{"e0adb6d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d437ab32":"import pandas as pd\nfrom sklearn.datasets import load_digits\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns","55a31c9c":"digits = load_digits()\ndir(digits)","9b49c6ab":"X = digits.data\nX.shape","8fef0c6f":"y=digits.target\ny.shape","011f0bf4":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.2,random_state=0)","914bcd0e":"knn=KNeighborsClassifier(n_neighbors=2,metric='euclidean',p=4)\nknn.fit(X_train,y_train)","99b47641":"y_pred=knn.predict(X_test)\ny_pred","78f06f2c":"score=accuracy_score(y_test,y_pred)\nscore","ccfe934f":"cm = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(10,7))\nsns.heatmap(cm, annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","e844b61c":"**Confusion Metrix**","7ae8839a":"**For theory you can refer to my blog on medium**\n**Megha Goriya**","6ef79330":"**Train , Test and Predict**"}}