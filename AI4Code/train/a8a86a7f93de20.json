{"cell_type":{"9fb67496":"code","742c8cf6":"code","a287a741":"code","5d63b8ff":"code","1133ae5e":"code","627d01ca":"code","876d24dd":"code","e52cffe7":"code","f8f74e33":"code","62d47186":"code","a98eae58":"code","0b5319cc":"code","5024c09f":"code","4bd33579":"code","4217495a":"code","39d2ae17":"code","e6ddf448":"code","40de50e6":"code","cfaccda7":"code","c85e4f03":"code","db67fc1a":"code","9617aa91":"code","49f0db0f":"code","66067acf":"code","478f9063":"code","18991662":"code","520e0afc":"code","624e59de":"code","c0b75735":"code","3a6894b7":"code","ee7275e0":"code","2f41305a":"code","d5a8e609":"code","9637ab88":"code","fe24b992":"code","fa7f0d2b":"code","141d47ed":"code","9b97f708":"code","db5e980d":"code","28ed1cca":"code","cc62ba7c":"markdown","dd0e6452":"markdown","85d5e2be":"markdown","b27a71dc":"markdown","ed4a98fd":"markdown","5ba9910f":"markdown","db784080":"markdown","519dc2f8":"markdown","2bff066a":"markdown","f0abb622":"markdown","b9800bb8":"markdown","a364e8f8":"markdown","086250c6":"markdown","b301a7f6":"markdown","06d56cec":"markdown","848753ff":"markdown","21356436":"markdown","b28d8134":"markdown","a769bed3":"markdown"},"source":{"9fb67496":"import pandas as pd\nimport numpy as np\nimport pylab as pl\nimport seaborn as sns\nimport sys, os\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport xgboost as xgb\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import r2_score,mean_squared_error,explained_variance_score\nimport missingno as nullnum","742c8cf6":"input_data_dir = \"..\/input\/house-prices-advanced-regression-techniques\"\ntrain_df = pd.read_csv(os.path.join(input_data_dir, \"train.csv\"))\ntest_df = pd.read_csv(os.path.join(input_data_dir, \"test.csv\"))\nfull_df = pd.concat([train_df, test_df], sort=False)","a287a741":"print(\"Size of training dataset       : {}\".format(train_df.shape))\nprint(\"Size of test dataset           : {}\".format(test_df.shape))","5d63b8ff":"full_df.info()","1133ae5e":"full_df.describe().T","627d01ca":"pyplot.figure(figsize=(20, 7))\nsns.heatmap(train_df.isnull(), cbar=False)\npyplot.show()","876d24dd":"nullnum.heatmap(train_df)","e52cffe7":"x = train_df.SalePrice.sort_values().reset_index().index\ny = train_df.SalePrice.sort_values().reset_index()[\"SalePrice\"]\nplt.scatter(x, y, color = \"darkblue\")\nplt.xlabel(\"Index\", size=36)\nplt.ylabel(\"Sales Price\", size=36)\nplt.title(\"Distribution of target variable\", size=30, pad=26)","f8f74e33":"corr_data = train_df.corr()\npyplot.figure(figsize=(32, 22))\nsns.set_style('ticks')\nsns.heatmap(corr_data, annot=True)\npyplot.show()","62d47186":"corr_data.SalePrice.apply(lambda x: abs(x)).sort_values(ascending=False).iloc[1:11][::-1].plot(kind='barh',color='red')\nplt.title(\"Top 10 highly correlated features\", size=20, pad=26)\nplt.xlabel(\"Correlation coefficient\")\nplt.ylabel(\"Features\")","a98eae58":"train_df = train_df.drop(['Id'], axis=1)\ntest_df = test_df.drop(['Id'], axis=1)\nfull_df = full_df.drop(['Id'], axis=1)","0b5319cc":"categorical_features = full_df.select_dtypes(include = [\"object\"]).columns\nnumerical_features = full_df.select_dtypes(exclude = [\"object\"]).columns\nnumerical_features = numerical_features.drop(\"SalePrice\")\nprint(\"Numerical features : \" + str(len(numerical_features)))\nprint(\"Categorical features : \" + str(len(categorical_features)))\nfull_df_num = full_df[numerical_features]\nfull_df_cat = full_df[categorical_features]","5024c09f":"print(\"Total missing values for categorical features in full_df: \" + str(full_df_cat.isnull().values.sum()))","4bd33579":"missing_val_col = [\"Alley\", \n                   \"PoolQC\", \n                   \"MiscFeature\",\n                   \"Fence\",\n                   \"FireplaceQu\",\n                   \"GarageType\",\n                   \"GarageFinish\",\n                   \"GarageQual\",\n                   \"GarageCond\",\n                   'BsmtQual',\n                   'BsmtCond',\n                   'BsmtExposure',\n                   'BsmtFinType1',\n                   'BsmtFinType2',\n                   'MasVnrType']\n\nfor i in missing_val_col:\n    full_df_cat[i] = full_df_cat[i].fillna('None')","4217495a":"full_df_cat['Functional'] = full_df_cat['Functional'].fillna('Typ') \nfull_df_cat['Utilities'] = full_df_cat['Utilities'].fillna('AllPub') \nfull_df_cat['Exterior1st'] = full_df_cat['Exterior1st'].fillna(full_df_cat['Exterior1st'].mode()[0]) \nfull_df_cat['Exterior2nd'] = full_df_cat['Exterior2nd'].fillna(full_df_cat['Exterior2nd'].mode()[0])\nfull_df_cat['KitchenQual'] = full_df_cat['KitchenQual'].fillna(\"TA\") \nfull_df_cat['SaleType'] = full_df_cat['SaleType'].fillna(full_df_cat['SaleType'].mode()[0])\nfull_df_cat['Electrical'] = full_df_cat['Electrical'].fillna(\"SBrkr\")\nfull_df_cat['MSZoning'] = full_df_cat['MSZoning'].fillna(\"RL\") ","39d2ae17":"print(\"Remaining missing values for categorical features in full_df: \" + str(full_df_cat.isnull().values.sum()))","e6ddf448":"full_df_cat_encod = full_df_cat.iloc[:,0:43]\nle = LabelEncoder()\n\nfor i in full_df_cat_encod:\n    full_df_cat_encod[i]=le.fit_transform(full_df_cat_encod[i])","40de50e6":"ntrain = train_df.shape[0]","cfaccda7":"numerical_features = train_df.select_dtypes(exclude = [\"object\"]).columns\nnumerical_features = numerical_features.drop(\"SalePrice\")\nprint(\"Numerical features : \" + str(len(numerical_features)))\nprint(\"Categorical features : \" + str(len(categorical_features)))\ntrain_df_num = train_df[numerical_features]","c85e4f03":"print(\"Total missing values for numerical features in full_df: \" + str(full_df_num.isnull().values.sum()))\nfull_df_num = full_df_num.fillna(full_df_num.median())\nprint(\"Remaining missing values for numerical features in full_df: \" + str(full_df_num.isnull().values.sum()))","db67fc1a":"train_df_X = pd.concat([full_df_cat_encod[:1022],full_df_num[:1022]],axis=1)\ntrain_df_X.shape","9617aa91":"train_df_X.head()","49f0db0f":"train_df_y = train_df.SalePrice[:1022]\ntrain_df_y.head()","66067acf":"val_df_X = pd.concat([full_df_cat_encod[1022:ntrain],full_df_num[1022:ntrain]],axis=1)\nval_df_X.shape","478f9063":"val_df_y = train_df.SalePrice[1022:ntrain]\nval_df_y.shape","18991662":"test_df_X = pd.concat([full_df_cat_encod[ntrain:],full_df_num[ntrain:]],axis=1)\ntest_df_X.shape","520e0afc":"test_df_X.head()","624e59de":"SVM_regressor = SVR(kernel='rbf')\nSVM_regressor.fit(train_df_X,train_df_y)","c0b75735":"SVM_val_df_pred = SVM_regressor.predict(val_df_X)","3a6894b7":"SVM_variance_score = explained_variance_score(val_df_y, SVM_val_df_pred)\nSVM_r2_score = r2_score(val_df_y, SVM_val_df_pred)\n\nprint(\"SVM_variance_score: %.5f\" %SVM_variance_score)\nprint(\"SVM_r2_score: %.5f\" %SVM_r2_score)","ee7275e0":"gbr = GradientBoostingRegressor()\ngbr.fit(train_df_X,train_df_y)","2f41305a":"gbr_val_df_pred = gbr.predict(val_df_X)","d5a8e609":"GBR_variance_score = explained_variance_score(val_df_y, gbr_val_df_pred)\nGBR_r2_score = r2_score(val_df_y, gbr_val_df_pred)\n\nprint(\"GBR_variance_score: %.5f\" %GBR_variance_score)\nprint(\"GBR_r2_score: %.5f\" %GBR_r2_score)","9637ab88":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,max_depth = 5, alpha = 10, n_estimators = 10)\nxg_reg.fit(train_df_X,train_df_y)","fe24b992":"xg_val_df_pred = xg_reg.predict(val_df_X)","fa7f0d2b":"xg_variance_score = explained_variance_score(val_df_y, xg_val_df_pred)\nxg_r2_score = r2_score(val_df_y, xg_val_df_pred)\n\nprint(\"xg_variance_score: %.5f\" %xg_variance_score)\nprint(\"xg_r2_score: %.5f\" %xg_r2_score)","141d47ed":"test_df_y = SVM_regressor.predict(test_df_X)","9b97f708":"submission_df = pd.read_csv(os.path.join(input_data_dir, \"sample_submission.csv\"))","db5e980d":"submission_df['SalePrice'] = test_df_y","28ed1cca":"#Save to csv\nsubmission_df.to_csv('submission.csv',index=False)\nsubmission_df.head(103)","cc62ba7c":"## **Apply Prediction models on the selected features.**","dd0e6452":"**Evaluation**","85d5e2be":"**Evaluation**","b27a71dc":"**Data Description**","ed4a98fd":"**Evaluation**","5ba9910f":"**Replacing missing values for numerical features by using median**","db784080":"**We got the lowest value of r2_score and variance_score in SVM Model compared to other 2 Models(GBR, XGBoost). So, SVM Model is the best fit for given data according to the above study.**","519dc2f8":"**Separating numerical features and categorical features**","2bff066a":"## **The 10 most Important features for predicting house prices.**","f0abb622":"### **Gradient Boosting Regressor**\n\n","b9800bb8":"## **Descriptive Analysis of the dataset**","a364e8f8":"**Test Data(test.csv) Predictions:**","086250c6":"**`Correlation Matrix and Heat Map`**","b301a7f6":"### **XGBoost**\n","06d56cec":"### **SVM Using a Gaussian type kernel.**","848753ff":"**NULL VALUES**","21356436":"**These Features have intentionally none value.**","b28d8134":"**Analysis of Target Variable**","a769bed3":"Target variable looks good on left but seem to have some outliers on the extreme right."}}