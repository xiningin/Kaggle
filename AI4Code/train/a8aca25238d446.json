{"cell_type":{"a91241ac":"code","a278c981":"code","b0287eab":"code","cba38d08":"code","bbf24a60":"code","0e16ce59":"code","8f1bea34":"code","dc2ccb1b":"code","3e6f6224":"code","51c6d9e0":"code","c4f1d9f0":"code","c192edd4":"markdown","42518251":"markdown","0be16dd9":"markdown","efcddf61":"markdown","71775636":"markdown","305b94ca":"markdown","1086520a":"markdown","cc67ba23":"markdown","48322904":"markdown","2addcd14":"markdown"},"source":{"a91241ac":"import tensorflow as tf\nfrom tensorflow.keras.datasets import fashion_mnist\n\n(train_data, train_labels), (test_data, test_labels) = fashion_mnist.load_data()\ntrain_data.shape, test_data.shape","a278c981":"import matplotlib.pyplot as plt\nplt.imshow(train_data[0])","b0287eab":"train_data = train_data\/255.0\ntest_data = test_data\/255.0","cba38d08":"class_names = ['T-shirt\/top', \n          'Trouser',\n          'Pullover',\n          'Dress',\n          'Coat',\n          'Sandal',\n          'Shirt',\n          'Sneaker',\n          'Bag',\n          'Ankle boot']","bbf24a60":"import numpy as np\n\ninput_shape = train_data[0].shape\noutput_shape = len(np.unique(train_labels))\n\ninput_shape, output_shape","0e16ce59":"tf.random.set_seed(42)\n\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Flatten(input_shape=input_shape),\n  tf.keras.layers.Dense(10, activation='relu'),\n  tf.keras.layers.Dense(10, activation='relu'),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(loss=tf.keras.losses.sparse_categorical_crossentropy, optimizer=tf.keras.optimizers.Adam(), metrics=['accuracy'])\n\nmodel.summary()","8f1bea34":"history = model.fit(train_data,\n                    train_labels,\n                    epochs=10,\n                    validation_data=(test_data, test_labels))","dc2ccb1b":"from sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(model, test_data, test_labels)","3e6f6224":"class estimator:\n  _estimator_type = ''\n  classes_=[]\n  def __init__(self, model, classes):\n    self.model = model\n    self._estimator_type = 'classifier'\n    self.classes_ = classes\n  def predict(self, X):\n    y_prob= self.model.predict(X)\n    y_pred = y_prob.argmax(axis=1)\n    return y_pred\n\nclassifier = estimator(model, class_names)","51c6d9e0":"plot_confusion_matrix(estimator=classifier, X=test_data, y_true=test_labels)","c4f1d9f0":"figsize = (12,12)\nplot_confusion_matrix(estimator=classifier, X=test_data, y_true=test_labels, cmap='Blues', normalize='true', ax=plt.subplots(figsize=figsize)[1])","c192edd4":"## Load and prepare the data","42518251":"### Plot a random data","0be16dd9":"## Problem statement\n> While practicing tensorflow I found out that the *`plot_confusion_matrix()`* function from **scikit learn** doesn't work with tensorflow models. \n\n>So after reading through the documentations I prepared this small work around that might come handy to a lot of people. \n\n>And if there is any already existing solution to this please share the link in comment section. ","efcddf61":"## Confusion matrix (Custom)\nNow before we see the custom approach let's see what happens if we try to use the `plot_confusion_matrix()` from scikit learn","71775636":"Now let's see whether it works or not\n","305b94ca":"Let's make it a bit bigger and prettier \n","1086520a":"As we can see that `plot_confusion_matrix()` only supports classifiers. But how it finds out whether something is classifier or not?\n\n- To find the answer, we have to look into the [source](https:\/\/github.com\/scikit-learn\/scikit-learn\/blob\/15a949460\/sklearn\/metrics\/_plot\/confusion_matrix.py#L260) file of the `plot_confusion_matrix()` function\n- From there we can see the [`is_classifier()`](https:\/\/github.com\/scikit-learn\/scikit-learn\/blob\/15a949460dbf19e5e196b8ef48f9712b72a3b3c3\/sklearn\/base.py#L771) function looks for an attribute called **`_estimator_type`** and checks whether it's **classifier** or not. \n- So to work around this problem we can simply wrap our model into a class called `estimator` and pass an attribute named **`_estimator_type`** to the class.","cc67ba23":"### Normalise the data set\n\nThe good news is the dataset is already preprocesses. so all we need to do is normalise the dataset","48322904":"### Make a list of classnames","2addcd14":"## Prepare the model\n"}}