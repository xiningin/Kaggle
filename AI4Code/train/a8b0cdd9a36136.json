{"cell_type":{"93aa6cc2":"code","a6bd8423":"code","24b6d650":"code","82d4173f":"code","949ecfc2":"code","0f772521":"code","746fc9ca":"code","beceb049":"code","047bc484":"code","9c4ff3bd":"code","4dd4d0bc":"code","c240f10f":"code","5c2df2d0":"code","a67ec125":"code","02607135":"code","4d787c71":"code","82e8bf8c":"code","5d18f5af":"code","53f1d290":"code","a5a42382":"code","e3bb4b43":"code","bdacc136":"code","d114850f":"code","57d682eb":"code","d9c08926":"code","7afe4241":"markdown","e685409c":"markdown","40dab7a8":"markdown","eb339158":"markdown","f0f1d8cd":"markdown","db585146":"markdown","d9859eb9":"markdown","85b88b31":"markdown","b0a0f13c":"markdown","de77c122":"markdown","9a2c400b":"markdown","1757257d":"markdown","802e46bb":"markdown","049140cd":"markdown","0e5fe41c":"markdown","5a75a2bc":"markdown","3d3a54bd":"markdown","8c4d3e16":"markdown","cbca6875":"markdown","91d33ad4":"markdown","528bb861":"markdown","06a92635":"markdown","7f999c0f":"markdown","432437e7":"markdown","81bef1f8":"markdown","fc8ce802":"markdown","8fb95aaf":"markdown","c678034d":"markdown","4e4df262":"markdown","882580a1":"markdown"},"source":{"93aa6cc2":"# libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nimport plotly.express as px\n# path for data\npath_csv = \"..\/input\/nba2k20-player-dataset\/nba2k-full.csv\"\n","a6bd8423":"df_nba = pd.read_csv(path_csv)\ndf_nba.head()","24b6d650":"df_nba.info()","82d4173f":"print(f\"Unique names: {df_nba.full_name.nunique()}\")\ndf_nba.full_name.value_counts().head(12)","949ecfc2":"#get repeated names\nrepeated_names = df_nba[df_nba.full_name.duplicated()].full_name\n# print(repeated_names)\n#Let's see what is the difference between them\ndf_nba[df_nba.full_name.isin(repeated_names)].sort_values(\"full_name\").head(4)","0f772521":"# look at hist for rating of players\n# sns.histplot(df_nba.rating)\nfig = px.histogram(df_nba, x=\"rating\", title=\"rating histogram\", nbins=40)\nfig.show()","746fc9ca":"print(f\"Mean: {df_nba.rating.mean()}\\n\\\nMedian: {df_nba.rating.median()}\\n\\\nMode: {df_nba.rating.mode()}\")","beceb049":"df_nba.jersey.value_counts().head()","047bc484":"#convert jersey to int format\nconvert_jersey = lambda s: s[1:]\ndf_nba.jersey = pd.to_numeric(df_nba.jersey.apply(convert_jersey))","9c4ff3bd":"px.bar(df_nba.team.value_counts().reset_index(name=\"number_players\").sort_values(\"number_players\"),\n       y='index',\n       x='number_players',\n       title='Number player\\'s in teams',orientation='h',\n       height=800)\n\n","4dd4d0bc":"px.bar(df_nba.groupby('team')['rating'].mean('rating').reset_index(name ='rating').sort_values(\"rating\", ascending=True),\n       x=\"rating\",\n       y=\"team\",\n       title=\"Teams players avg rating\",\n       orientation='h',\n       height=800)\n","c240f10f":"df_nba.position = df_nba.position.map({'F':'F', 'F-G': 'F-G', 'G':'G', 'F-C':'F-C', 'C':'C', 'G-F':'F-G', 'C-F':'F-C'})\nprint(f\"For 'position' in df_nba unique_value: {df_nba.position.unique()}\")\n# sns.histplot(df_nba.position)\npx.histogram(df_nba, x=\"position\")","5c2df2d0":"# convert b-day to datetime format\ndf_nba[\"b_day\"] = pd.to_datetime(df_nba[\"b_day\"])\npx.histogram(df_nba,\n             x='b_day',\n             nbins=15, \n             title=\"Birthday distribution\")","a67ec125":"# convert weigh_string to weight in lbs and kg\ndef weight_convert(series):\n    kg = []\n    lbs = []\n    for item in series:\n        lbs_t, kg_t = item.split(\" \/ \")\n        lbs.append(int(lbs_t[:3]))\n        kg.append(float(kg_t[:-3]))\n    return lbs, kg\n\n#convert weight in weight_lbs and weight_kg\nweight_lbs, weight_kg = weight_convert(df_nba.weight)\ndf_nba[\"weight_lbs\"] = pd.Series(weight_lbs)\ndf_nba[\"weight_kg\"] = pd.Series(weight_kg)\n# drop weight column\ndf_nba.drop(\"weight\",axis=1, inplace=True)\n\n# convert height_string to height in ft and m\ndef height_convert(series):\n    ft = []\n    m = []\n    for item in series:\n        ft_t, m_t = item.split(\" \/ \")\n        ft.append(float(ft_t.replace(\"-\", \".\")))\n        m.append(float(m_t))\n    return ft, m\n\n#convert height in height_ft and height_m\nheight_ft, height_m = height_convert(df_nba.height)\ndf_nba[\"height_ft\"] = pd.Series(height_ft)\ndf_nba[\"height_m\"] = pd.Series(height_m)\n# drop height column\ndf_nba.drop(\"height\",axis=1, inplace=True)\ndf_nba.head()","02607135":"px.density_heatmap(df_nba,\n                   x=\"height_m\", y=\"weight_kg\",\n                   marginal_x=\"histogram\", marginal_y=\"histogram\",\n                   title=\"Height and Weight distr\")","4d787c71":"# convert salary to int format\nconvert_salary = lambda s: s[1:]\ndf_nba.salary = pd.to_numeric(df_nba.salary.apply(convert_salary))","82e8bf8c":"px.histogram(df_nba,\n             x=\"salary\",\n             nbins=15,\n             title=\"Salary distribution\")","5d18f5af":"px.scatter(df_nba,\n           y='rating',\n           x='salary',\n           trendline=\"ols\",\n           color='position',\n           title=\"Dependence rating from salary\")","53f1d290":"px.bar(df_nba.country.value_counts().reset_index(name ='num_country').sort_values(\"num_country\", ascending=True),\n       y='index',\n       x=\"num_country\",\n       orientation='h',\n       height=800)\n","a5a42382":"# convert draft_year to numeric format\ndf_nba.draft_year = pd.to_numeric(df_nba.draft_year)\n\n# convert draft_peak and draft_round to int. If player is Undrafted, will have NA value\ndf_nba.draft_peak[df_nba.draft_peak == \"Undrafted\"] = 0\ndf_nba.draft_peak = pd.to_numeric(df_nba.draft_peak)\n\ndf_nba.draft_round[df_nba.draft_round == \"Undrafted\"] = 0\ndf_nba.draft_round = pd.to_numeric(df_nba.draft_round)\n","e3bb4b43":"import plotly.graph_objects as go\n\nfig = go.Figure(go.Histogram2d(x=df_nba.draft_peak, y=df_nba.draft_year,\n                        autobinx=False,\n                        xbins=dict(start=1, end=60, size= 3),\n                        autobiny=False,\n                        ybins=dict(start=1999, end=2020, size=1)))\n         \nfig.update_layout(\n    title=\"Number of players that have peaked depend on years and peak numbers\")\nfig.show()","bdacc136":"df_nba.college.value_counts().head(10)\n","d114850f":"print(f\"Unique version of nba dataset is: {df_nba.version.unique()}\")","57d682eb":"px.pie(df_nba, names='version')","d9c08926":"# plt.figure(figsize=(10,10))\n# sns.heatmap(df_nba.corr(),cbar=True,annot=True,cmap='Blues')\ncolumns_for_corr = [\"salary\", \"rating\", \"draft_year\", \"draft_peak\", \"weight_kg\", \"height_m\"]\npx.imshow(df_nba[columns_for_corr].corr())","7afe4241":"Yeaaa, salary and rating are dependent and for all position it almost similiar","e685409c":"Teams have 3-4% of all players in dataset.\n<p> let's see which comands has bigger average rating of there players","40dab7a8":"Let's look for **college** of players(place where they studied after high school)\n","eb339158":"**Rating** of the players it's how good player play and impact in game\nlet's look at player's rating distribution","f0f1d8cd":"![image.png](attachment:2f4a70b0-e3af-4e35-b260-d9d85c35d88d.png)","db585146":"**Position** of players are what type of player is:\n<p>G - Guard(1); \n<p>F-G - Forward-Guard(2);\n<p>F - Forward(3);\n<p>F-C - Forward-Center(4);\n<p>C - Center(5);\n    \n<p> In our dataset we have F-G and G-F that is the same and F-C and C-F that same also, we map value and build hist","d9859eb9":"Now let's look at jersey. It the number of the player on the back. So it can be absolutle randomly. But let's look which numbers players like more.","85b88b31":"As we saw earlier some players has NBA2k20 and NBA2k21 version","b0a0f13c":"**full_name**\nConsist of name of the players","de77c122":"There are not many old players <1985 and dataset has left skewed graphic for b_day","9a2c400b":"**country** is were players were born.","1757257d":"<h3>Show data and there info and describe","802e46bb":"**b-day** is column with date of birthday players\nIt is in format of object, convert it to datetime.","049140cd":"Show that some name are **repeated**\n<p>Let's look why...","0e5fe41c":"Almost all players are from *USA*","5a75a2bc":"<h1> EDA\n    ","3d3a54bd":"Hmmmm it's very simmiliar *to rating* => more money - lower players","8c4d3e16":"Almost all players are from nba2k20,only some of them are from 2k21 with some different characteristics(salary or maybe in another team) ","cbca6875":"Top 5 numbers is #0, #3, #5, #11 and #9\n<p>We can convert this numbers to int format, but it can't give us more information","91d33ad4":"We have also 3 very simmilar parameters draft_peak, draft_round, draft_year.\n<p>That means that when player can play in nba, comands can peak him by que\n<p>draft_year it's when player start play basketball in nba\n<p>draft_peak is with what number player has picked 1 - he has picked first, 60 - he has picked last\n<p>draft_round is in what round player has picked 1 round (30 peak) after 2 round\n<p>Convert all to int format","528bb861":"Salary it's very interesting parameter. It show how many earn players.\n<p>It in str format. Let's change format to int and show it distribution","06a92635":"Rating of players are very simmilar, so teams are balanced.","7f999c0f":"Player in average has 2m height and 95-99 kg weight, can say that they all very tall and muscles.","432437e7":"Can see top 10 university for basketball players to study.","81bef1f8":"**Team** it's simple name of team for which emblem players play","fc8ce802":"As we can see that 23 players don't has a team and 69 palyers haven't studied at college.\nThat's all missing value that we have.\n\nAnd almost all column has object dtype. ","8fb95aaf":"Let's look and last item in EDA is correlation between some items","c678034d":"See that mean rating is near 77, and min_rating is 67 and maximum is 97, so can say that after rating 87 is a super player that has very high skill in basketball.","4e4df262":"And the last column is about version of nba","882580a1":"Height and weight are phisical parameters of players. In basketball height take big role.\n<p> But this parameters in object format, reformat it in two column with corresponding value kg\/lbs and m\/ft"}}