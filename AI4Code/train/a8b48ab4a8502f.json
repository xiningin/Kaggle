{"cell_type":{"3e3ad1c7":"code","b7674f7f":"code","bbd45500":"code","7237f51b":"code","2a982fa6":"code","bb3a6386":"code","8ea05d17":"code","72e0800a":"code","2da2d0a0":"code","f744c3a8":"code","33a8071b":"code","3056d3bc":"code","6c70c297":"code","163a195c":"code","12be6e20":"code","7d6f321c":"code","b6026856":"code","b6dd7583":"code","24dd3fb8":"code","75ee7cf0":"code","3caa6aeb":"code","b15d299f":"code","7fd1e9f9":"code","008b8944":"code","ce473b13":"code","fafcb6af":"code","d6a8fc69":"code","760bcf56":"code","680f02fa":"code","6bb9a7e0":"code","ef0a1acd":"code","056ed19c":"code","2925b0a8":"code","d38a4359":"code","4823a865":"code","6aaa7ff0":"code","30b471af":"code","9189ccba":"code","0df0c5be":"code","25ca5ed3":"code","e0ad4cf4":"code","c1fd73ea":"code","94c82f04":"code","10318299":"code","e9134b26":"code","683718ee":"code","82103887":"code","5f346174":"markdown","3b8e6577":"markdown","0df1b4ae":"markdown","b4b7d99f":"markdown","a6b2a0ba":"markdown","8b06f8a1":"markdown"},"source":{"3e3ad1c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport operator\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# import warnings\nimport warnings\n# ignore warnings\nwarnings.filterwarnings(\"ignore\")\nfrom subprocess import check_output\nfrom IPython.display import Markdown as md\nfrom prettytable import PrettyTable\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom numpy import sqrt\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","b7674f7f":"# Membaca data dari dataset\ndata = pd.read_csv('..\/input\/vertebralcolumndataset\/column_2C.csv')","bbd45500":"# Mendapatkan dummies values\ndf = pd.get_dummies(data)\ndf.head(10)","7237f51b":"# Menghapus fitur atau kolom yang tidak diperlukan\ndf.drop(\"class_Normal\",axis = 1, inplace = True) \ndf.head(10)","2a982fa6":"# Melihat info pada data\ndata.info()","bb3a6386":"# Melihat deskripsi pada data\ndata.describe()","8ea05d17":"color_list = ['red' if i=='Abnormal' else 'green' for i in data.loc[:,'class']]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'class'],\n                                       c=color_list,\n                                       figsize= [15,15],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 200,\n                                       marker = '*',\n                                       edgecolor= \"black\")\nplt.show()","72e0800a":"# Mengetahui nilai pada class abnormal dan normal\nsns.countplot(x=\"class\", data=data)\ndata.loc[:,'class'].value_counts()","2da2d0a0":"# Membuat data1 termasuk pelvic_incidence sebagai fitur and sacral_slope variabel target\ndata1 = data[data['class'] =='Abnormal']\nx = np.array(data1.loc[:,'pelvic_incidence']).reshape(-1,1)\ny = np.array(data1.loc[:,'sacral_slope']).reshape(-1,1)\n# Gambar Scatter Plot\nplt.figure(figsize=[10,10])\nplt.scatter(x=x,y=y)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()","f744c3a8":"# Import LinearRegression dari sklearn.linear_model\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression()\npredict_space = np.linspace(min(x), max(x)).reshape(-1,1)\n# Fit\nreg.fit(x,y)\n# Prediksi\npredicted = reg.predict(predict_space)\n# # R^2 \n# print('R^2 score: ',reg.score(x, y))\ndegree = 1\n\nx = np.array(data1.loc[:,'pelvic_incidence']).reshape(-1,1)\ny = np.array(data1.loc[:,'sacral_slope']).reshape(-1,1)\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\nrmse = sqrt(mean_squared_error(y,y_poly_pred))\nr2 = r2_score(y,y_poly_pred)\n\n\n# tabel parameter\ntabel_parameter = PrettyTable(['parameter', 'nilai'])\ntabel_parameter.add_row(['Polynomial\\nDegree', degree])\ntabel_parameter.add_row(['RMSE','{:.10}'.format(rmse)])\ntabel_parameter.add_row(['R^2', '{:.10}'.format(r2)])\n\n# Gambar Regresi linear and scatter plot\nplt.plot(predict_space, predicted, color='black', linewidth=3)\nplt.scatter(x=x,y=y)\nplt.title('Biomechanical features of orthopedic patients\\n')\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()\nprint(tabel_parameter)","33a8071b":"# Mengetahui hasil persamaan pada nilai y \ndef display_equation(model):\n    for coef in model.coef_:\n        pass\n    streq = \"$y = \" +str(model.intercept_[0])\n    for i,c in enumerate(coef):\n        j = len(coef)-i-1\n        if abs(c) > c:\n            sign = \"-\"\n        else:\n            sign = \"+\"\n        if i > 1:\n            streq += sign +str(abs(c)) + \" \\cdot x^{\"+str(i)+\"}\"\n        elif i == 1:\n            streq += sign +str(abs(c)) + \" \\cdot x\"\n\n    streq =   streq + \"$\"\n    return md(streq)\ndisplay_equation(model)","3056d3bc":"# Polinomial\ndegree = 10\n\nx = np.array(data1.loc[:,'pelvic_incidence']).reshape(-1,1)\ny = np.array(data1.loc[:,'sacral_slope']).reshape(-1,1)\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\nrmse = sqrt(mean_squared_error(y,y_poly_pred))\nr2 = r2_score(y,y_poly_pred)","6c70c297":"# Tabel parameter\ntabel_parameter = PrettyTable(['parameter', 'nilai'])\ntabel_parameter.add_row(['Polynomial\\nDegree', degree])\ntabel_parameter.add_row(['RMSE','{:.10}'.format(rmse)])\ntabel_parameter.add_row(['R^2', '{:.10}'.format(r2)])","163a195c":"# Gambar scatter plot \nplt.scatter(x, y, s=10)\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\nx, y_poly_pred = zip(*sorted_zip)\nplt.title('Biomechanical features of orthopedic patients\\n')\nplt.xlabel('\\npelvic_incidence')\nplt.ylabel('sacral_slope')\n\nplt.plot(x, y_poly_pred, color='m')\nplt.show()\nprint(tabel_parameter)","12be6e20":"# Mengetahui hasil persamaan pada nilai y \ndef display_equation(model):\n    for coef in model.coef_:\n        pass\n    streq = \"$y = \" +str(model.intercept_[0])\n    for i,c in enumerate(coef):\n        j = len(coef)-i-1\n        if abs(c) > c:\n            sign = \"-\"\n        else:\n            sign = \"+\"\n        if i > 1:\n            streq += sign +str(abs(c)) + \" \\cdot x^{\"+str(i)+\"}\"\n        elif i == 1:\n            streq += sign +str(abs(c)) + \" \\cdot x\"\n\n    streq =   streq + \"$\"\n    return md(streq)\ndisplay_equation(model)","7d6f321c":"# Membaca data dari dataset\ndata = pd.read_csv('..\/input\/vertebralcolumndataset\/column_2C.csv')\n# Mendapatkan dummies values \ndf = pd.get_dummies(data)\ndf.head(10)","b6026856":"# Menghapus satu fitur atau kolom yang tidak diperlukan\ndf.drop(\"class_Normal\",axis = 1, inplace = True) \ndf.head(10)","b6dd7583":"# Melihat info pada data frame\ndf.info()","24dd3fb8":"# Melihat class Abnormal\nX = df\n\ny = df['class_Abnormal']","75ee7cf0":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nX['class_Abnormal'] = le.fit_transform(X['class_Abnormal'])\n\ny = le.transform(y)","3caa6aeb":"# Melihat info pada data\nX.info()","b15d299f":"# Melihat 5 data teratas\nX.head()","7fd1e9f9":"# Menambahkan kolom\ncols = X.columns","008b8944":"# Import MinMaxScaler dari sklearn.preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\n\nms = MinMaxScaler()\n\nX = ms.fit_transform(X)","ce473b13":"# Menambahkan kolom pada data frame\nX = pd.DataFrame(X, columns=[cols])","fafcb6af":"# Melihat 5 data teratas yang sudah ditambahkan kolom baru\nX.head()","d6a8fc69":"# Import library\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs\n\nfrom yellowbrick.cluster import KElbowVisualizer\n\n# Buat dataset dengan 3 kluster acak\nX, y = make_blobs(n_samples=310, n_features=10, centers=3, random_state=0)\n\n# Instantiate model clustering dan visualizer\nmodel = KMeans()\nvisualizer = KElbowVisualizer(model, k=(1,11))\n\nvisualizer.fit(X)        # Fit the data to the visualizer\nvisualizer.show()        # Finalize and render the figure","760bcf56":"# Tidak ada label di dalam data\nplt.scatter(data['pelvic_radius'],data['degree_spondylolisthesis'])\nplt.xlabel('pelvic_radius')\nplt.ylabel('degree_spondylolisthesis')\nplt.show()","680f02fa":"# Nilai K = 2\nfrom sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=2,random_state=0)\n\nkmeans.fit(X)\n\nlabels = kmeans.labels_\n\n# Periksa berapa banyak sampel yang diberi label dengan benar\n\ncorrect_labels = sum(y == labels)\n\nprint(\"Result: %d out of %d samples were correctly labeled.\" % (correct_labels, y.size))\n\nprint('Accuracy score: {0:0.2f}'. format(correct_labels\/float(y.size)))","6bb9a7e0":"# K = 2 ( Nilai Sembarang )\nfrom sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=2, random_state=0) \n\nkmeans.fit(X)","ef0a1acd":"# Mengetahui nilai array pada KMeans\nkmeans.cluster_centers_","056ed19c":"# Mengetahui nilai inersia pada KMeans\nkmeans.inertia_","2925b0a8":"# Nilai K = 3\nkmeans = KMeans(n_clusters=3, random_state=0)\n\nkmeans.fit(X)\n\n# Periksa berapa banyak sampel yang diberi label dengan benar\nlabels = kmeans.labels_\n\ncorrect_labels = sum(y == labels)\nprint(\"Result: %d out of %d samples were correctly labeled.\" % (correct_labels, y.size))\nprint('Accuracy score: {0:0.2f}'. format(correct_labels\/float(y.size)))","d38a4359":"# K = 3 ( Nilai Optimal )\nfrom sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=3, random_state=0) \n\nkmeans.fit(X)","4823a865":"# Mengetahui nilai array pada KMeans\nkmeans.cluster_centers_","6aaa7ff0":"# Mengetahui nilai inersia pada KMeans\nkmeans.inertia_","30b471af":"# Gambar Plot dari nilai K = 2\nfrom sklearn.datasets.samples_generator import make_blobs\nX, y_true = make_blobs(n_samples=300, centers=2,cluster_std=0.60, shuffle=True, random_state=0)\nplt.scatter(X[:, 0], X[:, 1], edgecolor='blue', s=50);","9189ccba":"# Import data dari library\nfrom sklearn.cluster import KMeans\n\nkm = KMeans(\n    n_clusters=2, init='random',\n    n_init=10, max_iter=300, \n    tol=1e-04, random_state=0\n)\ny_km = km.fit_predict(X)","0df0c5be":"# Gambar scatter plot dengan  klaster\nplt.scatter(\n    X[y_km == 0, 0], X[y_km == 0, 1],\n    s=50, c='lightgreen',\n    marker='s', edgecolor='black',\n    label='cluster 1'\n)\n\nplt.scatter(\n    X[y_km == 1, 0], X[y_km == 1, 1],\n    s=50, c='orange',\n    marker='o', edgecolor='black',\n    label='cluster 2'\n)\n\n# Mengetahui sentroid pada scatter plot\nplt.scatter(\n    km.cluster_centers_[:, 0], km.cluster_centers_[:, 1],\n    s=250, marker='*',\n    c='red', edgecolor='black',\n    label='centroids'\n)\nplt.legend(scatterpoints=1)\nplt.grid()\nplt.show()","25ca5ed3":"# Gambar Plot dari nilai K = 3\nfrom sklearn.datasets.samples_generator import make_blobs\nX, y_true = make_blobs(n_samples=300, centers=3,cluster_std=0.60, shuffle=True, random_state=0)\nplt.scatter(X[:, 0], X[:, 1], edgecolor='blue', s=50);","e0ad4cf4":"# Import data dari library\nfrom sklearn.cluster import KMeans\n\nkm = KMeans(\n    n_clusters=3, init='random',\n    n_init=10, max_iter=300, \n    tol=1e-04, random_state=0\n)\ny_km = km.fit_predict(X)","c1fd73ea":"# Gambar plot dengan 3 klaster\nplt.scatter(\n    X[y_km == 0, 0], X[y_km == 0, 1],\n    s=50, c='lightgreen',\n    marker='s', edgecolor='black',\n    label='cluster 1'\n)\n\nplt.scatter(\n    X[y_km == 1, 0], X[y_km == 1, 1],\n    s=50, c='orange',\n    marker='o', edgecolor='black',\n    label='cluster 2'\n)\n\nplt.scatter(\n    X[y_km == 2, 0], X[y_km == 2, 1],\n    s=50, c='lightblue',\n    marker='v', edgecolor='black',\n    label='cluster 3'\n)\n\n\n# Mengetahui sentroid pada scatter plot\nplt.scatter(\n    km.cluster_centers_[:, 0], km.cluster_centers_[:, 1],\n    s=250, marker='*',\n    c='red', edgecolor='black',\n    label='centroids'\n)\nplt.legend(scatterpoints=1)\nplt.grid()\nplt.show()","94c82f04":"# K = 2 ( Nilai Sembarang )  \nfrom yellowbrick.cluster import SilhouetteVisualizer\nfrom sklearn.cluster import KMeans\nmodel = SilhouetteVisualizer(KMeans(n_clusters=2))\nmodel.fit(X)\nmodel.show()","10318299":"# K= 3 ( Nilai Optimal )\nfrom yellowbrick.cluster import SilhouetteVisualizer\nfrom sklearn.cluster import KMeans\nmodel = SilhouetteVisualizer(KMeans(n_clusters=3))\nmodel.fit(X)\nmodel.show()","e9134b26":"# Import data dari library\nfrom sklearn.metrics import silhouette_samples, silhouette_score","683718ee":"n_clusters = 2\n# Inisialisasi clusterer dengan nilai n_clusters dan generator acak\nclusterer = KMeans(n_clusters=n_clusters, random_state=10)\ncluster_labels = clusterer.fit_predict(X)\n# Mengetahui banyaknya klaster dan nilai rata-rata silhouette \nsilhouette_avg = silhouette_score(X, cluster_labels)\nprint(\"For n_clusters =\", n_clusters,\n      \"The average silhouette_score is :\", silhouette_avg)\n# Hitung skor silhouette untuk setiap sampel \nsample_silhouette_values = silhouette_samples(X, cluster_labels)","82103887":"n_clusters = 3\n# Inisialisasi clusterer dengan nilai n_clusters dan generator acak \nclusterer = KMeans(n_clusters=n_clusters, random_state=10)\ncluster_labels = clusterer.fit_predict(X)\n# Mengetahui banyaknya klaster dan nilai rata-rata silhouette \nsilhouette_avg = silhouette_score(X, cluster_labels)\nprint(\"For n_clusters =\", n_clusters,\n      \"The average silhouette_score is :\", silhouette_avg)\n# Hitung skor siluet untuk setiap sampel \nsample_silhouette_values = silhouette_samples(X, cluster_labels)","5f346174":"Data Pre-Processing","3b8e6577":"KMEANS CLUSTERING","0df1b4ae":"> ******REGRESSION**","b4b7d99f":"Silhouette Plot of KMeans","a6b2a0ba":"Model Polynomial Regression (Degree = 10)","8b06f8a1":"Eksplorasi Data"}}