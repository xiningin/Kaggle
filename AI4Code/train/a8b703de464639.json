{"cell_type":{"761d132b":"code","326f1460":"code","399c3447":"code","3a933f8d":"code","a8121987":"code","16aef1de":"code","2f5e8bf6":"code","add2b8f9":"code","7f7915a5":"code","dc9b6855":"code","b2d43fd0":"code","bdcd0c5b":"code","fdd529fe":"code","20ac712e":"code","e8e913a5":"code","e78c8863":"code","0fcff44f":"code","081d5470":"markdown","2c73fe63":"markdown","1cd247b7":"markdown","0edf72f3":"markdown","00ac09c8":"markdown","5e7b29ac":"markdown","7b410f16":"markdown"},"source":{"761d132b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n!unzip ..\/input\/sentiment-analysis-on-movie-reviews\/test.tsv.zip \n!unzip ..\/input\/sentiment-analysis-on-movie-reviews\/train.tsv.zip \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","326f1460":"# !pip install sentencepiece\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport logging\n\nlogging.basicConfig(level=logging.INFO)","399c3447":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","3a933f8d":"%%time\nimport tensorflow_hub as hub \nimport tokenization\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","a8121987":"train = pd.read_csv('train.tsv', sep='\\t')\ntest = pd.read_csv('test.tsv', sep='\\t')","16aef1de":"%%time\nimport tensorflow_hub as hub \nimport tokenization\nmodule_url = 'https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/2'\nbert_layer = hub.KerasLayer(module_url, trainable=True)","2f5e8bf6":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)\n\ndef bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence) + [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n\ndef build_model(bert_layer, max_len=512):\n    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    pooled_output, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    net = tf.keras.layers.Dense(64, activation='relu')(clf_output)\n    net = tf.keras.layers.Dropout(0.2)(net)\n    net = tf.keras.layers.Dense(32, activation='relu')(net)\n    net = tf.keras.layers.Dropout(0.2)(net)\n    out = tf.keras.layers.Dense(5, activation='softmax')(net)\n    \n    model = tf.keras.models.Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(tf.keras.optimizers.Adam(lr=1e-5), loss='categorical_crossentropy', metrics=['accuracy'])\n    \n    return model","add2b8f9":"max_len = 150\ntrain_input = bert_encode(train.Phrase.values, tokenizer, max_len=max_len)\ntest_input = bert_encode(test.Phrase.values, tokenizer, max_len=max_len)\ntrain_labels = tf.keras.utils.to_categorical(train.Sentiment.values, num_classes=5)","7f7915a5":"model = build_model(bert_layer, max_len=max_len)\nmodel.summary()","dc9b6855":"%%time\ncheckpoint = tf.keras.callbacks.ModelCheckpoint('model.h5', monitor='val_accuracy', save_best_only=True, verbose=1)\nearlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=5, verbose=1)\n\ntrain_history = model.fit(\n    train_input, train_labels, \n    validation_split=0.2,\n    epochs=3,\n    callbacks=[checkpoint, earlystopping],\n    batch_size=32,\n    verbose=1\n)","b2d43fd0":"%%time \nmodel.load_weights('model.h5')\ntest_pred = model.predict(test_input)\ntest_labels = np.argmax(test_pred)\nsub = pd.read_csv('..\/input\/sentiment-analysis-on-movie-reviews\/sampleSubmission.csv')\nsub['Sentiment'] = np.argmax(test_pred, axis=-1)\nsub.to_csv('submission.csv', index=False)\n","bdcd0c5b":"\"\"\"# serialize model to JSON\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nmodel.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")\n \n# later...\n \n# load json and create model\njson_file = open('model.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n# load weights into new model\nloaded_model.load_weights(\"model.h5\")\nprint(\"Loaded model from disk\")\n \"\"\"","fdd529fe":"!pip install innvestigate ","20ac712e":"\n%matplotlib inline\n\nimport imp\nimport keras.backend\nimport keras.models\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\nimport pickle\nimport time\nimport keras\n\nfrom keras.datasets import mnist\nfrom keras.models import Model\nfrom keras import optimizers\n\nfrom matplotlib import cm, transforms\n\nimport innvestigate\nimport innvestigate.applications\nimport innvestigate.applications.mnist\nimport innvestigate.utils as iutils\nimport innvestigate.utils.visualizations as ivis\nfrom innvestigate.utils.tests.networks import base as network_base","e8e913a5":"# Specify methods that you would like to use to explain the model. \n# Please refer to iNNvestigate's documents for available methods.\nmethods = ['gradient', 'lrp.z', 'lrp.alpha_2_beta_1', 'pattern.attribution']\nkwargs = [{}, {}, {}, {'pattern_type': 'relu'}]","e78c8863":"# build an analyzer for each method\nanalyzers = []\n\nfor method, kws in zip(methods, kwargs):\n    analyzer = innvestigate.create_analyzer(method, model, **kws)\n    analyzer.fit(train_input, batch_size=256, verbose=1)\n    analyzers.append(analyzer)","0fcff44f":"# specify indices of reviews that we want to investigate\ntest_sample_indices = [156066, 156067, 156068, 156069, 156070, 156071]\n\ntest_sample_preds = [None]*len(test_sample_indices)\n\n# a variable to store analysis results.\nanalysis = np.zeros([len(test_sample_indices), len(analyzers), 1, 150])\n\nfor i, ridx in enumerate(test_sample_indices):\n    \n    x, y = test_input[ridx], test_labels[ridx]\n\n    t_start = time.time()\n    x = x.reshape((1, 1, 150, EMBEDDING_DIM))    \n\n    presm = model.predict_on_batch(x)[0] #forward pass without softmax\n    prob = model.predict_on_batch(x)[0] #forward pass with softmax\n    y_hat = prob.argmax()\n    test_sample_preds[i] = y_hat\n    \n    for aidx, analyzer in enumerate(analyzers):\n\n        a = np.squeeze(analyzer.analyze(x))\n        a = np.sum(a, axis=1)\n\n        analysis[i, aidx] = a\n    t_elapsed = time.time() - t_start\n    print('Review %d (%.4fs)'% (ridx, t_elapsed))\n","081d5470":"# Step_3: Run model and export predictions","2c73fe63":"# Step_1 load packages and data","1cd247b7":"We will need bert `Tokenization` class","0edf72f3":"Each epoch takes about 1 hours (even with GPU acceleration). After all, we have a large dataset.","00ac09c8":"# Model Analysis and Visualization","5e7b29ac":"We check only the first 150 characters of each review. \n\nYou can also increase this length, but the running time will increase too.","7b410f16":"# Step_2: build bert_layer and model"}}