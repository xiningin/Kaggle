{"cell_type":{"8f2e4ab7":"code","f5ab3dfe":"code","224a6bd5":"code","4e0b6a51":"code","f112562d":"code","293b1df0":"code","8893ca7f":"code","5a82f7f1":"code","29bb8faf":"code","c91a5773":"code","a65ca5b0":"code","dee714a0":"markdown","39d918d0":"markdown","78094d69":"markdown","90c45b9b":"markdown","b6f6b12e":"markdown"},"source":{"8f2e4ab7":"# We'll start by reading in the corpus, which preserves word order\nimport pandas as pd\n\ndata = pd.read_pickle('corpus.pkl')\ndata","f5ab3dfe":"# Create quick lambda functions to find the polarity and subjectivity of each routine\n# Terminal \/ Anaconda Navigator: conda install -c conda-forge textblob\nfrom textblob import TextBlob\n\npol = lambda x: TextBlob(x).sentiment.polarity\nsub = lambda x: TextBlob(x).sentiment.subjectivity\n\ndata['polarity'] = data['speeches'].apply(pol)\ndata['subjectivity'] = data['speeches'].apply(sub)\ndata","224a6bd5":"# Let's plot the results\nimport matplotlib.pyplot as plt\n\nplt.rcParams['figure.figsize'] = [10, 8]\n\nfor index, politician in enumerate(data.index):\n    x = data.polarity.loc[politician]\n    y = data.subjectivity.loc[politician]\n    plt.scatter(x, y, color='blue')\n    plt.text(x+.001, y+.001, data['full_name'][index], fontsize=12)\n    plt.xlim(-.01, .30) \n    \nplt.title('Sentiment Analysis', fontsize=20)\nplt.xlabel('<-- Negative -------- Positive -->', fontsize=17)\nplt.ylabel('<-- Facts -------- Opinions -->', fontsize=17)\n\nplt.show()","4e0b6a51":"# Split each routine into 10 parts\nimport numpy as np\nimport math\n\ndef split_text(text, n=10):\n    '''Takes in a string of text and splits into n equal parts, with a default of 10 equal parts.'''\n\n    # Calculate length of text, the size of each chunk of text and the starting points of each chunk of text\n    length = len(text)\n    size = math.floor(length \/ n)\n    start = np.arange(0, length, size)\n    \n    # Pull out equally sized pieces of text and put it into a list\n    split_list = []\n    for piece in range(n):\n        split_list.append(text[start[piece]:start[piece]+size])\n    return split_list","f112562d":"# Let's take a look at our data again\ndata","293b1df0":"# Let's create a list to hold all of the pieces of text\nlist_pieces = []\nfor t in data.speeches:\n    split = split_text(t)\n    list_pieces.append(split)\n    \nlist_pieces","8893ca7f":"#The list has 10 elements, one for each speech\nlen(list_pieces)","5a82f7f1":"# Each speech has been split into 10 pieces of text\nlen(list_pieces[0])\n","29bb8faf":"# Calculate the polarity for each piece of text\n\npolarity_speeches = []\nfor lp in list_pieces:\n    polarity_piece = []\n    for p in lp:\n        polarity_piece.append(TextBlob(p).sentiment.polarity)\n    polarity_speeches.append(polarity_piece)\n    \npolarity_speeches","c91a5773":"# Show the plot for one politician\nplt.plot(polarity_speeches[0])\nplt.title(data['full_name'].index[0])\nplt.show()","a65ca5b0":"# Show the plot for all politicians\nplt.rcParams['figure.figsize'] = [16, 12]\n\nfor index, politician in enumerate(data.index):    \n    plt.subplot(3, 4, index+1)\n    plt.plot(polarity_speeches[index])\n    plt.plot(np.arange(0,10), np.zeros(10))\n    plt.title(data['full_name'][index])\n    plt.ylim(ymin=-.2, ymax=.3)\n    \nplt.show()","dee714a0":"Sentiment of Routine\n","39d918d0":"## Sentiment of Routine Over Time\n","78094d69":"## Conclusions","90c45b9b":"Barack Obama is mostly positive speeches .\nPoliticians who are look alike are Hilary Clinton and Condolezza Rice. \nAl Gore and Susan Collins become happier over time.\n","b6f6b12e":"## Sentiment Analysis"}}