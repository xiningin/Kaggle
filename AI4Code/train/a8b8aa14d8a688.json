{"cell_type":{"ae242b0a":"code","00853045":"code","53c56c99":"code","ac1c79da":"code","9ca9589d":"code","47eb63d4":"code","ba9db796":"code","d288a9f9":"code","d5391652":"code","83b21169":"code","aaaf1338":"code","b32b4097":"code","58274160":"code","91b5bb66":"code","38c3386f":"code","3efb21b8":"code","566c7067":"code","cee05403":"code","c04ca600":"code","7dfe44ed":"code","868816a8":"code","175ca6d1":"code","196d03f2":"code","68499e81":"code","1e5d39fc":"markdown","a5380ed1":"markdown","a780cae5":"markdown","2e400999":"markdown","67c77ddb":"markdown","aa8442f8":"markdown","ecd5b9de":"markdown","34099983":"markdown","4bbabe56":"markdown","b40c473d":"markdown","ff008c30":"markdown","2debe705":"markdown","aeaaffc5":"markdown","2a1d59a1":"markdown","db8ea0b3":"markdown","901fa236":"markdown","2be63152":"markdown","1cd1b32b":"markdown"},"source":{"ae242b0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00853045":"import seaborn as ns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom geopy.geocoders import Nominatim\nfrom tqdm.notebook import trange, tqdm","53c56c99":"data=pd.read_csv('..\/input\/data-analyst-jobs\/DataAnalyst.csv')","ac1c79da":"data.head(3)","9ca9589d":"!head -1 \/kaggle\/input\/data-analyst-jobs\/DataAnalyst.csv","47eb63d4":"data.columns","ba9db796":"data.drop(['Unnamed: 0'], axis=1, inplace=True)","d288a9f9":"data.isnull().sum()","d5391652":"data['Company Name']=data['Company Name'].str.replace('\\\\n[0-9\\.]*','')\ndata['Company Name'].head(2)","83b21169":"job_counts=data['Job Title'].value_counts().rename_axis('Job Title').reset_index(name='counts')\nfig = px.bar(job_counts.nlargest(10, 'counts'), x='Job Title', y='counts',\n             hover_data=['counts'], color='counts',\n             labels={'counts':'# of jobs'})\nfig.show()","aaaf1338":"salaries=data['Salary Estimate'].str.replace('-1','0-0').str.replace(' \\(Glassdoor est.\\)|\\$','').str.replace('K','000').str.split('-',expand=True)\nsalaries.columns = ['MinSalary', 'MaxSalary']\n\nsalaries.MinSalary=salaries.MinSalary.astype('int64')\nsalaries.MaxSalary=salaries.MaxSalary.astype('int64')\n\ndata['MinSalary']=salaries.MinSalary\ndata['MaxSalary']=salaries.MaxSalary \n\nmax_df=salaries.MaxSalary.value_counts().rename_axis('MaxSalary').reset_index(name='counts')\n\nfig = px.bar(max_df.nlargest(20, 'counts'), x='MaxSalary', y='counts',\n             hover_data=['counts'], color='counts',\n             labels={'counts':'# of jobs'})\nfig.show()","b32b4097":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=salaries.MinSalary,name='Min Salary'))\nfig.add_trace(go.Histogram(x=salaries.MaxSalary,name='Max Salary'))\n\n\nfig.update_layout(\n    barmode='stack',\n    title_text='Salaries Histogram',\n    xaxis_title_text='Salary',\n    yaxis_title_text='Count',\n)\nfig.show()","58274160":"data['state']=data.Location.str.rsplit(',',n=1,expand=True)[1]\navg_rating_df=data.groupby('state')['Rating'].mean().reset_index(name='Average Rating')\n\n\nfig = px.bar(avg_rating_df.nlargest(15, 'Average Rating'), x='state', y='Average Rating',\n             hover_data=['Average Rating'], color='Average Rating',\n             labels={'Average Rating':'Average Rating in State'})\nfig.show()","91b5bb66":"avg_rating_df_ind=data.groupby('Industry')['Rating'].mean().reset_index(name='Average Rating')\n\n\nfig = px.bar(avg_rating_df_ind.nlargest(25, 'Average Rating'), x='Industry', y='Average Rating',\n             hover_data=['Average Rating'], color='Average Rating',\n             labels={'Average Rating':'Average Rating in Industry'})\nfig.show()","38c3386f":"avg_rating_df_comp=data.groupby(['Company Name']).agg({'Rating':['mean'], 'MaxSalary':['mean']}).reset_index()\navg_rating_df_comp.columns = avg_rating_df_comp.columns.get_level_values(0)\ntop25_df=avg_rating_df_comp.sort_values(by=['MaxSalary','Rating'],ascending=False)\n\nfig = px.bar(top25_df[top25_df.Rating>0].head(25), x='Rating', y='MaxSalary',\n             hover_data=['Rating','MaxSalary','Company Name'], color='Rating',\n             labels={'Company':'Company Name'})\nfig.show()","3efb21b8":"def get_coordinates(loc_name):\n    geolocator = Nominatim(user_agent=\"test user agent\")\n    location = geolocator.geocode(loc_name+ \" US\")\n    return (location.latitude, location.longitude)","566c7067":"row_number=0\ngeo_locations=pd.DataFrame()\n\n\nfor addr in tqdm(data.Location.unique()):\n    geo_locations.loc[row_number,'Location']=addr\n    coord=get_coordinates(addr)\n    geo_locations.loc[row_number,'Lat']=coord[0]\n    geo_locations.loc[row_number,'Lot']=coord[1]\n    row_number +=1","cee05403":"geo_locations.to_csv('Data_Analyst_Jobs_coordinates.csv', index=False)\n\ndf_count=data.Location.value_counts().rename_axis('Location').reset_index(name='counts')\n\njob_locations=pd.merge(df_count, geo_locations, on=\"Location\")","c04ca600":"fig = px.scatter_mapbox(job_locations, lat=\"Lat\", lon=\"Lot\", size=\"counts\",hover_name=\"Location\",title='Interactive Job Location Density Map',\n                  color_continuous_scale=px.colors.cyclical.IceFire, size_max=15, zoom=3, color_discrete_sequence=[\"fuchsia\"], mapbox_style=\"carto-positron\")\n#fig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(mapbox_style=\"stamen-terrain\") \nfig.show()","7dfe44ed":"job_locations['state']=job_locations.Location.str.rsplit(',',n=1,expand=True)[1]\n\nfig = px.treemap(job_locations, path=['state','Location'], values='counts')\nfig.show()","868816a8":"from datetime import date\n\ntoday = date.today()\n\nYear = today.strftime(\"%Y\")\n# we treat -1 ones as new company \ndata.Founded=data.Founded.apply(lambda x: int(Year) if x<0 else x)\ndata['CompanyAge']=int(Year)-data.Founded","175ca6d1":"fig = px.scatter_matrix(data,\n    dimensions=[\"CompanyAge\", \"MaxSalary\", \"MinSalary\",\"Rating\"],\n    color=\"Rating\")\nfig.show()","196d03f2":"industry_df=data.groupby('Industry')['Rating'].count().reset_index(name='total_jobs')\n\ndef industry_volume(ind):\n    return industry_df[industry_df.Industry==ind]['total_jobs'].to_list()[0]\n\ndata['Industry Job Size']=data.Industry.apply(lambda x: industry_volume(x) )\n\nfig = px.scatter(data, x=\"Rating\", y=\"Industry\", color=\"Rating\", size=\"Industry Job Size\",\n           hover_name=\"Rating\", log_x=True, size_max=60)\nfig.show()","68499e81":"fig = px.scatter_3d(data, x='Industry Job Size', y='MinSalary', z='CompanyAge',\n              color='Rating')\nfig.show()","1e5d39fc":"# **Missing Values**\n\nWe just have a single missing value in Company Name column.","a5380ed1":"# **Top 10 Max Salary**\n\nremove some constant string like ' (Glassdoor est.)' and parse salary as min and max columns","a780cae5":"# **Average Rating Per State**","2e400999":"# **Data Cleaning**","67c77ddb":"# **Average Rating Per Industry Top 25**","aa8442f8":"# **Export Location Dataset**\n\nExport Location latitude and longitude data in to csv file.","ecd5b9de":"# **Job Openings, Salary and Age Scatter**","34099983":"# **Relationship Between Rating, Company Age and Salaries**","4bbabe56":"# **Top Rated 25 Companies**\n\nSorted by Rating and their max salary average","b40c473d":"# **Data Analyst Jobs**\n\nWork in progress...","ff008c30":"# **Company Name**\n\nCompany Name contains additional line feed \"\\n\" and company rating in string","2debe705":"# **Top 10 Job Titles**","aeaaffc5":"# **Job Locations**","2a1d59a1":"# **Exploration**","db8ea0b3":"# **Treemap View of Job Locations Per State and Density**\n\nStrip State information from location and create a new column called 'state'","901fa236":"# **Rating vs Industry**\n\nNot all Industries have higher ratings","2be63152":"# **Where is Unnamed Column coming from?**\n\nLet's see 1st line of csv file with head command on Linux console. Since seperator is comma(,) 1st line doesn't have a name that's why pandas treat it as unnamed. Looks like an index column when we look at the values so we can safely drop it.","1cd1b32b":"# **Distribution of Min and Max Salaries**"}}