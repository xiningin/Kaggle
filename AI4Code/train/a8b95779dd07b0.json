{"cell_type":{"ba338d74":"code","4c786595":"code","aea40617":"code","6e8234ca":"code","ba1283b4":"code","99f20c67":"code","c8d7b6be":"code","5eeb2309":"code","ec32e180":"markdown","a44f982e":"markdown","ac1e875f":"markdown","3d91fad1":"markdown","ef20cf17":"markdown","9d3de03a":"markdown","e7184ca5":"markdown","8aa80778":"markdown"},"source":{"ba338d74":"import numpy as np \nimport pandas as pd \n\nfrom sklearn import ensemble\nfrom sklearn.model_selection import cross_val_predict,cross_validate\n\nfrom sklearn.metrics import accuracy_score,r2_score\nfrom sklearn.model_selection import cross_validate,GridSearchCV","4c786595":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","aea40617":"#1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","6e8234ca":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test\n\nparams={\"n_estimators\":np.arange(500,1000,100),\n        \"max_depth\":np.arange(2,12,2)\n       }\n\ngbm_est = ensemble.GradientBoostingClassifier(\n    learning_rate = 0.001, \n    loss = 'exponential', \n    max_features ='sqrt', \n    random_state = 42,\n    verbose=0)\n\ngr_gbm_est=GridSearchCV(gbm_est,params,cv=3,n_jobs=-1,verbose=10)\ngr_gbm_est.fit(X,y)","ba1283b4":"gr_gbm_est.best_estimator_","99f20c67":"cross_validate(gr_gbm_est.best_estimator_, X, y, cv=3)","c8d7b6be":"pred_test = gr_gbm_est.best_estimator_.predict(X_test)","5eeb2309":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = (pred_test > 0.5).astype(int)\nsubmission.to_csv('sub.csv', index=False)\nsubmission.head()","ec32e180":"# import libraries","a44f982e":"# load data","ac1e875f":"# preprocess","3d91fad1":"# make model (training)","ef20cf17":"# submit","9d3de03a":"# evaluate model","e7184ca5":"# train result = > best model ","8aa80778":"# predict "}}