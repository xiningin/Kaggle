{"cell_type":{"e29777f8":"code","fb4b0457":"code","6c453ce3":"code","c94427ba":"code","0d2781b6":"code","3cf66c7c":"code","c78383f4":"code","7746b979":"code","2df2153f":"code","d2c88a89":"code","dc86d11b":"code","bbe14f39":"code","26a4ce9b":"code","b2083d34":"code","26e59b65":"code","5ad618af":"code","d856510e":"code","1b5065b7":"markdown","bab2cf6b":"markdown","489d876e":"markdown","733d8fe7":"markdown","2abc7e32":"markdown","3dd9c150":"markdown","859975d6":"markdown","cadbb648":"markdown","75bb79b9":"markdown","406f5ffb":"markdown","502990ba":"markdown","9e674766":"markdown"},"source":{"e29777f8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualization library  \nimport matplotlib.pyplot as plt\nimport time","fb4b0457":"data = pd.read_csv('..\/input\/breast-cancer\/Breast_Cancer.csv')","6c453ce3":"data.head()","c94427ba":"# feature names as a list\ncol = data.columns       # .columns gives columns names in data \nprint(col)","0d2781b6":"# y includes our labels and x includes our features\ny = data.diagnosis                          # M or B \nlist = ['Unnamed: 32','id','diagnosis']\nx = data.drop(list,axis = 1 )\nx.head()","3cf66c7c":"ax = sns.countplot(y,label=\"Count\")\nB, M = y.value_counts()\nprint('Number of Benign: ',B)\nprint('Number of Malignant : ',M)","c78383f4":"x.describe()","7746b979":"# first ten features\ndata_dia = y\ndata = x\ndata_n_2 = (data - data.mean()) \/ (data.std())              # standardization\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","2df2153f":"# Second ten features\ndata = pd.concat([y,data_n_2.iloc[:,10:20]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","d2c88a89":"# Third ten features\ndata = pd.concat([y,data_n_2.iloc[:,20:31]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","dc86d11b":"# As an alternative of violin plot, box plot can be used\n# box plots are also useful in terms of seeing outliers\n# I do not visualize all features with box plot\n# In order to show you lets have an example of box plot\n# If you want, you can visualize other features as well.\nplt.figure(figsize=(10,10))\nsns.boxplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","bbe14f39":"sns.jointplot(x.loc[:,'concavity_worst'],\n              x.loc[:,'concave points_worst'],\n              kind=\"regg\",\n              color=\"#ce1414\");","26a4ce9b":"sns.set(style=\"white\")\ndf = x.loc[:,['radius_worst','perimeter_worst','area_worst']]\ng = sns.PairGrid(df, diag_sharey=False)\ng.map_lower(sns.kdeplot, cmap=\"Blues_d\")\ng.map_upper(plt.scatter)\ng.map_diag(sns.kdeplot, lw=3);","b2083d34":"sns.set(style=\"whitegrid\", palette=\"muted\")\ndata_dia = y\ndata = x\ndata_n_2 = (data - data.mean()) \/ (data.std())              # standardization\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","26e59b65":"data = pd.concat([y,data_n_2.iloc[:,10:20]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","5ad618af":"data = pd.concat([y,data_n_2.iloc[:,20:31]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","d856510e":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(x.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax);","1b5065b7":"<b style=\"color:blue\"><h2 align=center> About the Dataset <\/h2><\/b>\n\n---\n### Attribute Information:\n\n* ID number\n* Diagnosis (M = malignant, B = benign) 3-32)\n\n### Ten real-valued features are computed for each cell nucleus:\n\n1. radius (mean of distances from center to points on the perimeter) \n2. texture (standard deviation of gray-scale values) \n3. perimeter \n4. area \n5. smoothness (local variation in radius lengths) \n6. compactness (perimeter^2 \/ area - 1.0) \n7. concavity (severity of concave portions of the contour) \n8. concave points (number of concave portions of the contour)\n9. symmetry\n10. fractal dimension (\"coastline approximation\" - 1)\n\nThe mean, standard error and \"worst\" or largest (mean of the three largest values) of these features were computed for each image, resulting in 30 features. For instance, field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius.\n\nAll feature values are recoded with four significant digits.\n\nMissing attribute values: none\n\nClass distribution: 357 benign, 212 malignant","bab2cf6b":"<b style=\"color:blue\"><h2 align=center> 7. Uncovering Correlated Features With Pair Grids <\/h2><\/b>\n\n---","489d876e":"<b style=\"color:blue\"><h2 align=center> 6. Using Joint Plots For Feature Comparison <\/h2><\/b>\n\n---\n### A marginal\/join plot allows to study the relationship between 2 numeric variables. The central chart display their correlation. It is usually a scatterplot, a hexbin plot, a 2D histogram or a 2D density plot","733d8fe7":"<b style=\"color:blue\"><h2 align=center> 9. Observing all Pair-wise Correlations <\/h2><\/b>\n\n---\n### corr() is used to find the pairwise correlation of all columns in the dataframe. Any na values are automatically excluded. For any non-numeric data type columns in the dataframe it is ignored.","2abc7e32":"<b style=\"color:blue\"><h2 align=center> 5. Violin Plots and Box Plots <\/h2><\/b>\n\n---\n### A violin plot is a method of plotting numeric data. It is similar to a box plot, with the addition of a rotated kernel density plot on each side. Violin plots are similar to box plots, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.","3dd9c150":"<b style=\"color:blue\"><h2 align=center> 2. Separate Target Form Features <\/h2><\/b>\n\n---","859975d6":"<b style=\"color:blue\"><h2 align=center> 1. Loading Libraries and Data <\/h2><\/b>\n\n---","cadbb648":"<b style=\"color:red\"><h2 align=center> Exploratory Data Analysis <\/h2><\/b>\n\n---","75bb79b9":"<h2 align=center> 8. Observing the Distribution of Values and their Variance with Swarm Plots <\/h2>\n\n---\n### A swarm plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution. Arranging the points properly requires an accurate transformation between data and point coordinates.","406f5ffb":"<b style=\"color:blue\"><h2 align=center> Notebook Index <\/h2><\/b>\n\n---\n\n1. Loading Libraries and Data.\n2. Separate Target from Features.\n3. Plot Diagnosis Distributions.\n4. Visualizing Standardized Data with Seaborn .\n5. Violin Plots and Box Plots.\n6. Using Joint Plots for Feature Comparison.\n7. Uncovering Correlated Features with Pair Grids.\n8. Observing the Distribution of Values and their Variance with Swarm Plots.\n9. Observing all Pair-wise Correlations.","502990ba":"<b style=\"color:blue\"><h2 align=center> 4. Visualizing Standardized Data with Seaborn <\/h2><\/b>\n\n---","9e674766":"<b style=\"color:blue\"><h2 align=center> 3. Plot Diagnosis Distributions <\/h2><\/b>\n\n---"}}