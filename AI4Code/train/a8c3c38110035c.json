{"cell_type":{"e0117250":"code","a3578413":"code","e73a1bc1":"code","6ef8b98d":"code","e0c7f432":"code","f2fb5817":"code","301d1e4a":"code","5b32a3e3":"code","eba560d0":"markdown","55c5f66b":"markdown","f4f869c2":"markdown","bd9e387a":"markdown","89690166":"markdown"},"source":{"e0117250":"import os\nimport numpy as np\nimport pandas as pd\nimport Levenshtein\nimport cv2\nfrom PIL import Image\nfrom tqdm.auto import tqdm","a3578413":"%%time\n\ntrain = pd.read_csv('..\/input\/bms-molecular-translation\/train_labels.csv')\ntest = pd.read_csv('..\/input\/bms-molecular-translation\/sample_submission.csv')\n\ndef get_train_file_path(image_id):\n    return \"..\/input\/bms-molecular-translation\/train\/{}\/{}\/{}\/{}.png\".format(\n        image_id[0], image_id[1], image_id[2], image_id \n    )\n\ndef get_test_file_path(image_id):\n    return \"..\/input\/bms-molecular-translation\/test\/{}\/{}\/{}\/{}.png\".format(\n        image_id[0], image_id[1], image_id[2], image_id \n    )","e73a1bc1":"def get_score(y_true, y_pred):\n    scores = []\n    for true, pred in zip(y_true, y_pred):\n        score = Levenshtein.distance(true, pred)\n        scores.append(score)\n    avg_score = np.mean(scores)\n    return avg_score","6ef8b98d":"df = train\nc = ''\nfor l in range(16):\n    c += df['InChI'].str[l:l+1].mode()[0]\ndf = train[train['InChI'].str.contains(c)]\nprint(c)","e0c7f432":"df.shape[0]","f2fb5817":"m = 999\ncm = ''\ny_true = df['InChI'].values\nfor c in tqdm(y_true):\n    score = get_score(y_true, [c] * len(df))\n    if score<m:\n        m = score\n        cm = c\nprint(m, cm)","301d1e4a":"y_true = train['InChI'].values\nscore = get_score(y_true, [cm] * len(train))\nprint(score)","5b32a3e3":"test['InChI'] = cm\noutput_cols = ['image_id', 'InChI']\ndisplay(test[output_cols])\ntest[output_cols].to_csv('submission.csv.gz', compression='gzip', index=False)","eba560d0":"# Library","55c5f66b":"# Submission","f4f869c2":"# Naive baseline","bd9e387a":"# Data Loading","89690166":"# Scoring function"}}