{"cell_type":{"ec10c2a5":"code","02cf36f5":"code","7af0e20b":"code","6a93e7b8":"code","9d3120fd":"code","2a9f3f0f":"code","7942594d":"code","456314eb":"code","8423a932":"code","eb4b6b54":"code","f819e7f9":"code","84def919":"code","283b5df0":"code","8ae192f0":"code","1907fb98":"code","8dffbb1a":"code","2d9ad0b0":"code","49467820":"code","d50e1976":"code","f5e6b4e1":"code","9e87c72f":"code","239eea7a":"code","8cfd6bcb":"code","2d5e46ae":"code","483a9ff5":"code","7cfcfb10":"code","9af65e5e":"code","bb9cb4c6":"code","5d8365b8":"code","70cc934b":"code","ecff8339":"code","ef4ec268":"code","c08e5610":"code","2b7c979c":"code","c0512cef":"code","70b3e3d7":"code","3d323db2":"code","ee2d5700":"code","0b071716":"code","28b700c2":"code","77c277fb":"code","9f1b668d":"code","480b2e89":"code","1668eb56":"code","a14aec5f":"code","d7ce8845":"code","1b2f4a73":"markdown","86ca5989":"markdown","c72ec6ee":"markdown"},"source":{"ec10c2a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","02cf36f5":"data_train=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndata_gender=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ndata_test=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","7af0e20b":"data_train","6a93e7b8":"data_test","9d3120fd":"data_gender","2a9f3f0f":"data_train.head()#ilk belli sayidakiler\npd.options.display.max_rows=None # display all the table of data\npd.options.display.max_columns=None\ndisplay(data_train)","7942594d":"pd.reset_option(\"display.max_rows\") # reset the periveous setting\npd.reset_option(\"display.max_columns\")\npd.get_option(\"display.max_rows\")# see default row lines","456314eb":"##LECTURE2\ndata_gender.info()","8423a932":"data_genderTestMarged=pd.merge(data_gender,data_test,on='PassengerId')\ndata_genderTestMarged # passengerId ayni oldundan data genderdaki survived sutunu almak icin merge yaptik","eb4b6b54":"# bu merged ile data_tarin i merge yapacagiz columnlari uyusuyor mu kontrol edelim\ndata_genderTestMarged.columns==data_train.columns","f819e7f9":"# data_genderTestMarged ile data_tarin i concat.index devam etsin diye true dedik\ndata=pd.concat([data_train,data_genderTestMarged],ignore_index=True)\ndata","84def919":"data.describe() # sadece int ve float olan degerler ile ilgili bilgi","283b5df0":"data.info() # ilk  sayilari karsilastirip eksik var mi kontol ediyoruz","8ae192f0":"## transpoz. -to make rows to columns\ndata.describe().T","1907fb98":"# yaslarin ortalamasi\ndata['Age'].mean()","8dffbb1a":"# yuzde listesi describe bilgileimize rows olarak ekliyoruz\nperc=[.10,.20,.40,.60,.80,.90]\ninclude1_list =['object','float','int'] # object olanlari da ekleyince farkli verilerde ekleniyor tabloya\ninclude_list =['float','int']  # --25,50,75 olan kismi degistirdik\n\ndesc=data.describe(percentiles=perc,include=include_list)\ndesc","2d9ad0b0":"# data setimizin koralsyonunu inceliyoruz.iki veri arasinda iliskiyi +- olarak inceliyor\nkorelasyon = data.corr()\nkorelasyon","49467820":"# koralsyon tablosunda 1 den kucuk maksimum sayilari nasil listeleriz. +- 0.5 bi iliski oldugu izlenimini verir\nkorelasyon.abs()[korelasyon<1].max()","d50e1976":"korelasyon[korelasyon<1].abs().max()","f5e6b4e1":"#LECTURE3\ndata[data.Cabin.isna()] # nan olan satirlari iste","9e87c72f":"# Cabin bilgisi dolu olanlari listele\ndata[data.Cabin.isna()==False]","239eea7a":"# cabin sutununda tekrar eden verilerin sayisi\ndata[\"Cabin\"].value_counts()","8cfd6bcb":"# name sutununda tekrar eden verilerin sayisi\ndata[\"Name\"].value_counts()","2d5e46ae":"# ayni gorulen 2 ismi kontol edelim gercekten ayni kisi mi ===sonuc===farkli kisiler\ndata[(data[\"Name\"]=='Connolly, Miss. Kate') | (data[\"Name\"]=='Kelly, Mr. James')]","483a9ff5":"# Ticket sutununda tekrar eden verilerin sayisi\ndata[\"Ticket\"].value_counts()","7cfcfb10":"# 11 tane ayni bilet numarasindan var inceleyelim ===sonuc==9 cocuklu anne baba ayni bilet no almis\ndata[data['Ticket']=='CA. 2343']","9af65e5e":"# yapilmis siniflandirmalari gorme --unique\ndata.Survived.unique() # 0 ve 1 degerleri\ndata.Pclass.unique() # 3,2,1 degerleri\ndata.Sex.unique() # male female\ndata.SibSp.unique() # 1, 0, 3, 4, 2, 5, 8\ndata.Parch.unique() # 0, 1, 2, 5, 3, 4, 6, 9\ndata.Embarked.unique() # 'S', 'C', 'Q', nan","bb9cb4c6":"# titanicteki yanliz seyhat eden kisilerin listesi\ndata[(data['SibSp']==0)&(data['Parch']==0)]","5d8365b8":"## ortalama yanlis seyhat etmeyen\na=data[(data['SibSp']>=1)|(data['Parch']>=1)]['Survived'].mean()  \nb=data['Survived'].mean()\nc=data[(data['SibSp']==0)&(data['Parch']==0)]['Survived'].mean()\na,b,c","70cc934b":"data.isna().sum() # nan verilerin toplami sutunlarda","ecff8339":"\n# kolon ismi degistime\n#data.rename(columns={\"PassengerId\":'YolcuId',    ....}) hepsini tum clumnlari yazmak gerek\n","ef4ec268":"# LECTURE 4\n# kacindeki nan olanlari belirsizle doldurduk\ndata['Cabin'].fillna('Belirsiz',inplace=True)\ndata","c08e5610":"# icerik degistirme\n#data[\"Survived\"].replace(0,'Die',inplace=True)\n#data[\"Survived\"].replace(1,'Survive',inplace=True)\ndata[\"Survived\"].replace('Die',0,inplace=True)\ndata[\"Survived\"].replace('Survive',1,inplace=True)\ndata","2b7c979c":"# icerigi liste olarak degistirme\ndata['Embarked'].replace([\"C\",\"S\",'Q'],[\"Cherbourg\",'Southampton','Queenstown'],inplace=True)\ndata","c0512cef":"# icerigi Dictionary olarak degistirme\ndata['Sex'].replace({'male': 'M' ,'female':\"F\"},inplace=True)\ndata.head()","70b3e3d7":"# Nan degerlerini doldurmak\n# yas da Nan olanlar ortalamaya katilmiyor.Ancak Nanlari ortalama ile degisebililriz\ndata['Age'].fillna(data['Age'].mean(),inplace=True)\ndata","3d323db2":"# groupby ornekleri\ndata.Sex.groupby(data.Sex).count()","ee2d5700":"data.groupby(data.Sex).count()","0b071716":"data.groupby(\"Pclass\")['Survived'].describe()","28b700c2":"# aggergate valuelerini istedimiz memtodu yazabilirz, mean sum max \ndata.groupby('Pclass').aggregate({'Fare':'mean','Age':'max'}) ","77c277fb":"# pvot tableler  cinsiyet ve siniflara gore yasam degiskeninin ortalamisini gormek istiyoruz\ndata.pivot_table('Survived',index='Sex',columns='Pclass')","9f1b668d":"# cinsiyet ve bilet siniflandirmasina gore 0-25,25-80 yas araliginda yasam ortalamsi\nyas = pd.cut(data['Age'],[0,25,80])\ndata.pivot_table('Survived',['Sex',yas],'Pclass')","480b2e89":"# veriyi ortalamaya gore 2 gruba bolme-ortalama alti bir sinif ustu diger sinif\ncost=pd.qcut(data['Fare'],2)\ncost","1668eb56":"#yas degiskenindeki durumlara ve bilet fiyat siniflandirmasina gore\n# hayatta kalma durumu\n#piotable(istedimisSiniflandirma,satirda ne olacak,columsda ne olcak)\ndata.pivot_table(\"Survived\",('Sex',cost),(yas,\"Pclass\"))","a14aec5f":"data.pivot_table(index=\"Sex\", columns=\"Pclass\",aggfunc={\"Survived\":'mean',\"Fare\":'max'})","d7ce8845":"# cinsiyet ve bilet siniflarina gore yasam oranlari ve toplam duruma gore bakis\ndata.pivot_table(\"Survived\",index=\"Sex\",columns=\"Pclass\",margins=True)","1b2f4a73":"# Get The Data from csv","86ca5989":"# merge the datas","c72ec6ee":"## Analyze the titanic data"}}