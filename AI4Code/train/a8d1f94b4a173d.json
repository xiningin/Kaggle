{"cell_type":{"ac970818":"code","eade2d87":"code","74e7b065":"code","6675b1ce":"code","c96e1cd8":"code","0144ddac":"code","288c9f2a":"code","2d5b22e9":"code","68bc167d":"code","5b139272":"code","a9f76846":"code","1a5e92c9":"markdown","346db324":"markdown","eb33223b":"markdown","ef5a457a":"markdown","34acc171":"markdown","fe6d287b":"markdown"},"source":{"ac970818":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eade2d87":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier","74e7b065":"import warnings\nwarnings.filterwarnings('ignore')","6675b1ce":"train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\n\nx_data = train.drop(['Id', 'Cover_Type', 'Soil_Type1', 'Soil_Type7', 'Soil_Type15'], axis=1)\nx_test = test.drop(['Id', 'Soil_Type1', 'Soil_Type7', 'Soil_Type15'], axis=1)\n\ny_data = train.Cover_Type","c96e1cd8":"from sklearn.preprocessing import QuantileTransformer","0144ddac":"transformer = QuantileTransformer(random_state=21, output_distribution='uniform')\nx_data = transformer.fit_transform(x_data)\nx_test = transformer.transform(x_test)","288c9f2a":"x_train, x_val, y_train, y_val = train_test_split(x_data, y_data)","2d5b22e9":"model = XGBClassifier(tree_method='gpu_hist', predictor='gpu_predictor')\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_val)\n\nacc = accuracy_score(y_val, y_pred)\nprint(f'validation acc {acc}')\nprint(f'train acc {accuracy_score(y_train, model.predict(x_train))}')","68bc167d":"y_test = model.predict(x_test)","5b139272":"submission = pd.DataFrame(y_test, columns = ['Cover_Type'], index = test.Id)\nsubmission.to_csv('submission.csv')","a9f76846":"# submission = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\n# submission.Cover_Type = y_test\n# submission.to_csv('submission.csv', index=False)","1a5e92c9":"### Split train and val data","346db324":"### Predict test label","eb33223b":"### Import library","ef5a457a":"### Read data","34acc171":"### Save prediction and submission","fe6d287b":"### Train model"}}