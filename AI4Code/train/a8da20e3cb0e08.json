{"cell_type":{"84bdbc6e":"code","1cec929f":"code","30ed0315":"code","93e9ff34":"code","b0ad0080":"code","2bb6ac1d":"code","79f0b8ce":"code","f554265c":"code","68aa23bc":"code","fb229860":"code","c8e51cbd":"code","e4dab591":"code","6119a18e":"code","045b501b":"code","7fb2b2aa":"code","358e70cb":"code","d686f1e7":"code","7121c1a9":"code","93dbab4d":"code","5b4bc567":"code","5ca72de6":"code","51c6670b":"code","7186da0b":"code","a47784a6":"code","df183796":"code","bfd6bb77":"code","7077f2f1":"code","b117bdda":"code","390fdeca":"code","346d69f7":"code","34d83763":"code","30424b49":"code","6f7fa7a8":"code","08450fc0":"code","69e519a6":"code","1169b18a":"code","9141edea":"code","b40c11be":"code","136b06b5":"code","ad2297b2":"code","732fb290":"markdown","33dbff1e":"markdown","264b837d":"markdown","d0c56a92":"markdown","f3b3e358":"markdown","9d317965":"markdown","2d751819":"markdown","72101b38":"markdown","f99a8499":"markdown","a6524410":"markdown","5770a3ad":"markdown","b8cce9aa":"markdown"},"source":{"84bdbc6e":"!pip install pycaret","1cec929f":"!pip install shap","30ed0315":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom pycaret.regression import setup, blend_models, create_model, finalize_model, plot_model, predict_model, interpret_model\nimport shap\nfrom fbprophet import Prophet","93e9ff34":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')","b0ad0080":"df_train['IsTrain'] = 1\ndf_test['IsTrain'] = 0\ndf = pd.concat([df_train, df_test], sort=False,axis=0)\n\ndf['date_time'] = pd.to_datetime(df['date_time'])\n\ndf['day_of_week'] = df['date_time'].dt.dayofweek\ndf['hour'] = df['date_time'].dt.hour\ndf['working_hours'] =  df.hour.isin(np.arange(8, 21, 1)).astype(\"int\")\ndf.loc[(df['date_time'].dt.month >= 3) & (df['date_time'].dt.month <= 5), 'season'] = 1\ndf.loc[(df['date_time'].dt.month >= 6) & (df['date_time'].dt.month <= 8), 'season'] = 2\ndf.loc[(df['date_time'].dt.month >= 9) & (df['date_time'].dt.month <= 11), 'season'] = 3\ndf.loc[(df['date_time'].dt.month == 12) | (df['date_time'].dt.month <= 2), 'season'] = 4\n\ntrain = df.query('IsTrain == 1').drop(['IsTrain'], axis=1)\ntest =  df.query('IsTrain == 0').drop(['IsTrain','target_carbon_monoxide','target_benzene','target_nitrogen_oxides'], axis=1)","2bb6ac1d":"train.head()","79f0b8ce":"sel_train = df[6600:6900].copy()\ncols = ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides','deg_C','absolute_humidity', 'sensor_2']\nfor col in sel_train[cols].columns:\n    plt.figure(figsize=(16,4))\n    plt.plot(sel_train.date_time, sel_train[col])\n    plt.ylabel(col)\n    plt.show()","f554265c":"sel_train2 = train.query('absolute_humidity >= 0.24').loc[:,['target_carbon_monoxide','target_benzene','target_nitrogen_oxides','sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]\nplt.figure(figsize=(10,10))\nsns.heatmap(sel_train2.corr(), vmax=1, square=True,annot=True,cmap='RdBu')\nplt.show()","68aa23bc":"sns.pairplot(sel_train2)","fb229860":"def do_pycaret(target, train, test, categorical_features):\n    reg = setup(data=train, target=target, categorical_features=categorical_features, silent= True)\n    catboost = create_model(\"catboost\")\n    et = create_model(\"et\")\n    lightgbm = create_model(\"lightgbm\")\n    gbr = create_model(\"gbr\")\n    rf = create_model(\"rf\")\n    blend = blend_models(estimator_list= [catboost, et, lightgbm, gbr, rf], optimize='RMSLE')\n    predh = predict_model(blend)\n    final = finalize_model(blend)\n    pred = predict_model(final, data=test)\n    return(pred, catboost, lightgbm, rf)","c8e51cbd":"train1 = train.query('absolute_humidity >= 0.24').loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_5', 'season', 'working_hours', 'target_carbon_monoxide']]\ntrain1","e4dab591":"pred1, catboost1, lightgbm1, rf1 = do_pycaret('target_carbon_monoxide', train1, test, ['season'])\npred1","6119a18e":"interpret_model(catboost1)","045b501b":"interpret_model(lightgbm1)","7fb2b2aa":"interpret_model(rf1)","358e70cb":"train2 = train.loc[:,['sensor_2','target_benzene']]\ntrain2.head()","d686f1e7":"pred2, catboost2, lightgbm2, rf2 = do_pycaret('target_benzene', train2, test, None)\npred2","7121c1a9":"interpret_model(catboost2)","93dbab4d":"interpret_model(lightgbm2)","5b4bc567":"interpret_model(rf2)","5ca72de6":"train3 = train.query('absolute_humidity >= 0.24 & season >= 3').loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'working_hours', 'target_nitrogen_oxides']]\ntrain3","51c6670b":"pred3, catboost3, lightgbm3, rf3 = do_pycaret('target_nitrogen_oxides', train3, test, None)\npred3","7186da0b":"interpret_model(catboost3)","a47784a6":"interpret_model(lightgbm3)","df183796":"interpret_model(rf3)","bfd6bb77":"sub1 = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsub1.target_carbon_monoxide = pred1.Label\nsub1.target_benzene = pred2.Label\nsub1.target_nitrogen_oxides = pred3.Label\nsub1","7077f2f1":"train4 = train.query('season >= 3').loc[:,['day_of_week', 'hour', 'season', 'working_hours', 'target_carbon_monoxide']]\ntrain4","b117bdda":"pred4, catboost4, lightgbm4, rf4 = do_pycaret('target_carbon_monoxide', train4, test, ['season'])\npred4","390fdeca":"interpret_model(catboost4)","346d69f7":"interpret_model(lightgbm4)","34d83763":"interpret_model(rf4)","30424b49":"train5 = train.query('season >= 3').loc[:,['day_of_week', 'hour', 'season', 'working_hours', 'target_nitrogen_oxides']]\ntrain5","6f7fa7a8":"pred5, catboost5, lightgbm5, rf5 = do_pycaret('target_nitrogen_oxides', train5, test, ['season'])\npred5","08450fc0":"interpret_model(catboost5)","69e519a6":"interpret_model(lightgbm5)","1169b18a":"interpret_model(rf5)","9141edea":"sub2 = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsub2.target_carbon_monoxide = pred4.Label\nsub2.target_benzene = pred2.Label\nsub2.target_nitrogen_oxides = pred5.Label\nsub2","b40c11be":"sub_temp1 = sub1.query(\"date_time < '2011-01-02 21:00:00'\")\nsub_temp2 = sub2.query(\"date_time >= '2011-01-02 21:00:00' & date_time <= '2011-01-05 00:00:00'\")\nsub_temp3 = sub1.query(\"date_time > '2011-01-05 00:00:00' & date_time < '2011-01-28 17:00:00'\")\nsub_temp4 = sub1.query(\"date_time >= '2011-01-28 17:00:00' & date_time <= '2011-01-29 01:00:00'\")\nsub_temp5 = sub1.query(\"date_time > '2011-01-29 01:00:00' & date_time < '2011-02-08 17:00:00'\")\nsub_temp6 = sub2.query(\"date_time >= '2011-02-08 17:00:00' & date_time <= '2011-02-11 20:00:00'\")\nsub_temp7 = sub1.query(\"date_time > '2011-02-11 20:00:00'\")\n\nsubmission = pd.concat([sub_temp1, sub_temp2, sub_temp3, sub_temp4, sub_temp5, sub_temp6, sub_temp7], sort=False,axis=0)","136b06b5":"submission","ad2297b2":"submission.to_csv('pycaret_prophet_submission.csv',index=False)","732fb290":"Removed sensor_3 and sensoe_4 from the features of the training data for carbon monoxide prediction.  \nRemoved sensor_1 from the features of the training data in the prediction of nitrogen compounds.","33dbff1e":"#### Benzene\nI use only sensor 2, which has a high correlation.","264b837d":"# Tabular Playground Series - Jul 2021\nContinued from [last time ](https:\/\/www.kaggle.com\/astashiro\/tps-jul2021-05divide-and-predict).","d0c56a92":"### Prediction when the sensor is on\n#### Carbon monoxide\nI use sensors 1, 2, and 5 with high correlation.","f3b3e358":"### Predict with Pycaret","9d317965":"## Remove unwanted data and features","2d751819":"### Why divide?\n\nLook at the areas where the thermometer, hygrometer, and sensors are not working as shown below.\nBenzene is linked to a value close to zero, but carbon monoxide and nitrogen oxide are spiking independently of each sensor. Therefore, I thought it would be better to predict the carbon monoxide and nitrogen oxide separately from the part where the sensors are off.","72101b38":"### Merge predictions","f99a8499":"#### Nitrogen oxides\nI tried excluding the sensors from the feature set one by one, and the score was better when sensor_1 was excluded.","a6524410":"Check the correlation by excluding the area where the sensor is not working.","5770a3ad":"### Prediction when the sensor is off\n#### Carbon monoxide","b8cce9aa":"#### Nitrogen oxides"}}