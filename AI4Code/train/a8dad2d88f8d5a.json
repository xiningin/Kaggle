{"cell_type":{"a0571801":"code","f69f8996":"code","cb0de369":"code","dcbf692a":"code","6bced874":"code","9b72e857":"code","5c381e8b":"code","87645e2f":"markdown","8d357502":"markdown"},"source":{"a0571801":"import pandas as pd\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split","f69f8996":"testing_data = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\ntesting_data","cb0de369":"training_data = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntraining_data","dcbf692a":"X = training_data.drop(columns={'Id', 'Pawpularity'})\ny = training_data['Pawpularity']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\n\nX_pred = testing_data.drop(columns={'Id'})","6bced874":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor(n_estimators=50000, eval_metric=mean_absolute_error)\nmy_model.fit(X_train, y_train, \n             early_stopping_rounds=10, \n             eval_set=[(X_test, y_test)],\n             verbose=False)\n\ny_pred = my_model.predict(X_pred)","9b72e857":"testing_data['Pawpularity'] = pd.Series(y_pred).astype(float)\ntesting_data[['Id', 'Pawpularity']].to_csv('submission.csv', index=False)","5c381e8b":"df = pd.read_csv('.\/submission.csv')\ndf","87645e2f":"So we obtain a score who is [below the na\u00efve approach](https:\/\/www.kaggle.com\/maximeperez\/naive-approach), the matrix does not seems as useful at it seems at his first sight and a [quick analysis of the data](https:\/\/www.kaggle.com\/maximeperez\/first-analysis-of-the-data) could confirm that.","8d357502":"This notebook is a ML approach using only the matrix given to us without the images."}}