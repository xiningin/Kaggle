{"cell_type":{"421e9d4c":"code","f425ca00":"code","1d377553":"code","6aef1755":"code","70fcc4dc":"code","48014c9a":"code","395d1e6d":"code","0f202757":"code","0678d0f9":"code","84a1b6d9":"code","85b832ec":"code","bf2b77ea":"code","a03fccce":"code","8ec5174a":"code","4e0de333":"code","d215ec1f":"code","97e53a4c":"code","f3b40ac7":"code","9f31e492":"code","81a8efbc":"code","330a9062":"markdown","7373d818":"markdown","ff75f062":"markdown","3f7dd63e":"markdown","df1b17fe":"markdown","b47b5c0b":"markdown","1167ea12":"markdown","105edf56":"markdown","5e34dd38":"markdown","4c4524bb":"markdown","600cedb5":"markdown","8aa13534":"markdown","71ef5d37":"markdown","38e1fa83":"markdown","bf79d9da":"markdown","2ec693b3":"markdown"},"source":{"421e9d4c":"import pandas as pd\nimport numpy as np\nimport datetime\nimport requests\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport squarify\nimport plotly.offline as py\nimport plotly_express as px\n\nfrom IPython.display import Image\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\nage_details = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nhospital_beds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nindividual_details = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\nICMR_labs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nstate_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\npopulation = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv')\n\nworld_population = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-04-2020.csv')\n\nindia_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'],dayfirst = True)\nstate_testing['Date'] = pd.to_datetime(state_testing['Date'])\n","f425ca00":"world_confirmed = confirmed_df[confirmed_df.columns[-1:]].sum()\nworld_recovered = recovered_df[recovered_df.columns[-1:]].sum()\nworld_deaths = deaths_df[deaths_df.columns[-1:]].sum()\nworld_active = world_confirmed - (world_recovered - world_deaths)\n\nlabels = ['Active','Recovered','Deceased']\nsizes = [world_active,world_recovered,world_deaths]\ncolor= ['#66b3ff','green','red']\nexplode = []\n\nfor i in labels:\n    explode.append(0.05)\n    \nplt.figure(figsize= (15,10))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=9, explode =explode,colors = color)\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\n\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('World COVID-19 Cases',fontsize = 20)\nplt.axis('equal') \nplt.legend()\n# plt.savefig(\"world_cases.png\",dpi=500)\nplt.tight_layout()\n","1d377553":"hotspots = ['China','Germany','Iran','Italy','Spain','US','Korea, South','France','Turkey','United Kingdom','India']\ndates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]\n\ndf1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nglobal_confirmed = {}\nglobal_deaths = {}\nglobal_recovered = {}\nglobal_active= {}\n\nfor country in hotspots:\n    k =df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_confirmed[country] = k.values.tolist()[0]\n\n    k =df2[df2['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths[country] = k.values.tolist()[0]\n\n    k =df3[df3['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_recovered[country] = k.values.tolist()[0]\n    \nfor country in hotspots:\n    k = list(map(int.__sub__, global_confirmed[country], global_deaths[country]))\n    global_active[country] = list(map(int.__sub__, k, global_recovered[country]))\n    \nfig = plt.figure(figsize= (15,15))\nplt.suptitle('Active, Recovered, Deaths in Hotspot Countries and India as of May 15',fontsize = 20,y=1.0)\nplt.legend()\nk=0\nfor i in range(1,12):\n    ax = fig.add_subplot(6,2,i)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    ax.bar(dates_india,global_active[hotspots[k]],color = 'green',alpha = 0.6,label = 'Active');\n    ax.bar(dates_india,global_recovered[hotspots[k]],color='grey',label = 'Recovered');\n    ax.bar(dates_india,global_deaths[hotspots[k]],color='red',label = 'Death');   \n    plt.title(hotspots[k])\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left',prop={\"size\":16})\n    k=k+1\nplt.tight_layout(pad=3.0)\n# plt.savefig(\"Active_recovered_death.png\",dpi=500,bbox_inches='tight')\nplt.tight_layout(pad=3.0)","6aef1755":"hotspots = ['China','Germany','Iran','Italy','Spain','United States','South Korea','France','Turkey','United Kingdom','India']\ncountry_death_rate = pd.DataFrame(columns = ['country','day1','day2','day3'])\nworld_population['Population (2020)'] = world_population['Population (2020)']\/1000000\n\nd1=[]\nd2 =[]\nd3 = []\nfor country in hotspots:\n    p = float(world_population[world_population['Country (or dependency)'] == country ]['Population (2020)'])\n    if country == 'United States':\n        k = global_deaths['US'][-3:]\n    elif country == 'South Korea':\n        k = global_deaths['Korea, South'][-3:]\n    else:\n        k = global_deaths[country][-3:]\n    d1.append(round(k[0]\/p,2))\n    d2.append(round(k[1]\/p,2))\n    d3.append(round(k[2]\/p,2))\n\ncountry_death_rate['country'] = hotspots\ncountry_death_rate['day1'] = d1\ncountry_death_rate['day2'] = d2\ncountry_death_rate['day3'] = d3    \n\nplt.figure(figsize= (10,10))\nplt.hlines(y=country_death_rate['country'], xmin=country_death_rate['day1'], xmax=country_death_rate['day3'], color='grey', alpha=0.4);\nplt.scatter(country_death_rate['day1'], country_death_rate['country'], color='red', label='1 July',s=100);\nplt.scatter(country_death_rate['day2'], country_death_rate['country'], color='green', label='3rd July',s=100);\nplt.scatter(country_death_rate['day3'], country_death_rate['country'], color='red', label='4th July',s=100);\nplt.legend(prop={\"size\":16});\nplt.title(\"Death Rate per Million in Hotspot Countries\",fontsize=20);\n# plt.savefig('deathrate_permillion.png',dpi=500,bbox_inches='tight');\nplt.xlabel('Death Rate per Million');\n","70fcc4dc":"age_details.head()","48014c9a":"labels = list(age_details['AgeGroup'])\nsizes = list(age_details['TotalCases'])\n\nexplode = []\n\nfor i in labels:\n    explode.append(0.05)\n    \nplt.figure(figsize= (20,15))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=9, explode =explode)\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\n\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('India - Age Group wise Distribution',fontsize = 20)\nplt.legend()\nplt.axis('equal')  \nplt.savefig('agewise_distribution.png',dpi=500)\nplt.tight_layout()","395d1e6d":"labels = ['Missing', 'Male', 'Female']\nsizes = []\nsizes.append(individual_details['gender'].isnull().sum())\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\n\nexplode = (0, 0.1, 0)\ncolors = ['#ffcc99','#66b3ff','#ff9999']\n\nplt.figure(figsize= (15,10))\nplt.title('Percentage of Gender',fontsize = 30)\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',shadow=True, startangle=100)\nplt.axis('equal')\nplt.legend()\n# plt.savefig('percentage_gener.png',dpi=500)\nplt.tight_layout()","0f202757":"labels = ['Male', 'Female']\nsizes = []\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\n\nexplode = (0.1, 0)\ncolors = ['#66b3ff','#ff9999']\n\nplt.figure(figsize= (15,10))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nplt.title('Percentage of Gender (Ignoring the Missing Values)',fontsize = 20)\n\nplt.axis('equal')\nplt.legend()\n# plt.savefig(\"percentage_of_gender-missing.png\",dpi=500)\nplt.tight_layout()","0678d0f9":"dates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]","84a1b6d9":"df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nk = df1[df1['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_confirmed = k.values.tolist()[0] \n\nk = df2[df2['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_deaths = k.values.tolist()[0] \n\nk = df3[df3['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_recovered = k.values.tolist()[0] \n\nplt.figure(figsize= (20,15))\nplt.xticks(rotation = 90 ,fontsize = 20)\nplt.yticks(fontsize = 30)\nplt.xlabel(\"Dates\",fontsize = 40)\nplt.ylabel('Total cases',fontsize = 40)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\n\nax1 = plt.plot_date(y= india_confirmed,x= dates_india,label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(y= india_recovered,x= dates_india,label = 'Recovered',linestyle ='-',color = 'g')\nax3 = plt.plot_date(y= india_deaths,x= dates_india,label = 'Death',linestyle ='-',color = 'r')\n# plt.savefig(\"confirmed_active_deaths_india.png\",dpi=500)\nplt.legend();","85b832ec":"countries = ['China','US', 'Italy', 'Spain', 'France','India']\n\nglobal_confirmed = []\nglobal_recovered = []\nglobal_deaths = []\nglobal_active = []\n\nfor country in countries:\n    k =df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_confirmed.append(k.values.tolist()[0]) \n\n    k =df2[df2['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths.append(k.values.tolist()[0]) \n\n    k =df3[df3['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths.append(k.values.tolist()[0])  \n\nplt.figure(figsize= (20,15))\nplt.xticks(rotation = 90 ,fontsize = 20)\nplt.yticks(fontsize = 30)\nplt.xlabel(\"Dates\",fontsize = 30)\nplt.ylabel('Total cases',fontsize = 30)\nplt.title(\"Comparison with other Countries\" , fontsize = 20)\n\nfor i in range(len(countries)):\n    plt.plot_date(y= global_confirmed[i],x= dates_india,label = countries[i],linestyle =\"-\")\n# plt.savefig(\"comparison_with_countries.png\",dpi=500);    \nplt.legend();","bf2b77ea":"state_cases = india_covid_19.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases.to_csv(\"indiadata.csv\")\n\nstate_cases = state_cases.astype({'Deaths': 'int'})\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']+state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)\nstate_cases.sort_values('Confirmed', ascending= False).fillna(0).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Cure Rate (per 100)\"])","a03fccce":"all_state = list(india_covid_19['State\/UnionTerritory'].unique())\nall_state.remove('Unassigned')\n#all_state.remove('Nagaland#')\n#all_state.remove('Nagaland')\nlatest = india_covid_19[india_covid_19['Date'] > '24-03-20']\nstate_cases = latest.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nlatest['Active'] = latest['Confirmed'] - (latest['Deaths']- latest['Cured'])\nstate_cases = state_cases.sort_values('Confirmed', ascending= False).fillna(0)\nstates =list(state_cases['State\/UnionTerritory'][0:15])\n\nstates_confirmed = {}\nstates_deaths = {}\nstates_recovered = {}\nstates_active = {}\nstates_dates = {}\n\nfor state in states:\n    df = latest[latest['State\/UnionTerritory'] == state].reset_index()\n    k = []\n    l = []\n    m = []\n    n = []\n    for i in range(1,len(df)):\n        k.append(df['Confirmed'][i]-df['Confirmed'][i-1])\n        l.append(df['Deaths'][i]-df['Deaths'][i-1])\n        m.append(df['Cured'][i]-df['Cured'][i-1])\n        n.append(df['Active'][i]-df['Active'][i-1])\n    states_confirmed[state] = k\n    states_deaths[state] = l\n    states_recovered[state] = m\n    states_active[state] = n\n    date = list(df['Date'])\n    states_dates[state] = date[1:]\n    \ndef calc_movingaverage(values ,N):    \n    cumsum, moving_aves = [0], [0,0]\n    for i, x in enumerate(values, 1):\n        cumsum.append(cumsum[i-1] + x)\n        if i>=N:\n            moving_ave = (cumsum[i] - cumsum[i-N])\/N\n            moving_aves.append(moving_ave)\n    return moving_aves\n\nfig = plt.figure(figsize= (25,17))\nplt.suptitle('5-Day Moving Average of Confirmed Cases in Top 15 States',fontsize = 20,y=1.0)\nk=0\nfor i in range(1,15):\n    ax = fig.add_subplot(5,3,i)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    ax.bar(states_dates[states[k]],states_confirmed[states[k]],label = 'Day wise Confirmed Cases ') \n    moving_aves = calc_movingaverage(states_confirmed[states[k]],5)\n    ax.plot(states_dates[states[k]][:-2],moving_aves,color='red',label = 'Moving Average',linewidth =3)  \n    plt.title(states[k],fontsize = 20)\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left')\n    k=k+1\nplt.tight_layout(pad=3.0)","8ec5174a":"def calc_growthRate(values):\n    k = []\n    for i in range(1,len(values)):\n        summ = 0\n        for j in range(i):\n            summ = summ + values[j]\n        rate = (values[i]\/summ)*100\n        k.append(int(rate))\n    return k\n\nfig = plt.figure(figsize= (25,17))\nplt.suptitle('Growth Rate in Top 15 States',fontsize = 20,y=1.0)\nk=0\nfor i in range(1,15):\n    ax = fig.add_subplot(5,3,i)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    #ax.bar(states_dates[states[k]],states_confirmed[states[k]],label = 'Day wise Confirmed Cases ') \n    growth_rate = calc_growthRate(states_confirmed[states[k]])\n    ax.plot_date(states_dates[states[k]][21:],growth_rate[20:],color = '#9370db',label = 'Growth Rate',linewidth =3,linestyle='-')  \n    plt.title(states[k],fontsize = 20)\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left')\n    k=k+1\nplt.tight_layout(pad=3.0)","4e0de333":"colors_list = ['cyan','teal']\nstates = individual_details['detected_state'].unique()\nif len(states)%2==0:\n    n_rows = int(len(states)\/2)\nelse:\n    n_rows = int((len(states)+1)\/2)    \nplt.figure(figsize=(14,60))\n\nfor idx,state in enumerate(states):    \n    plt.subplot(n_rows,2,idx+1)\n    y_order = individual_details[individual_details['detected_state']==state]['detected_district'].value_counts().index\n    try:\n        g = sns.countplot(data=individual_details[individual_details['detected_state']==state],y='detected_district',orient='v',color=colors_list[idx%2],order=y_order)\n        plt.xlabel('Number of Cases')\n        plt.ylabel('')\n        plt.title(state)\n        plt.ylim(14,-1)\n    except:\n        pass\nplt.tight_layout()\nplt.show()","d215ec1f":"hospital_beds =hospital_beds.drop([36])\ncols_object = list(hospital_beds.columns[2:8])\n\nfor cols in cols_object:\n    hospital_beds[cols] = hospital_beds[cols].astype(int,errors = 'ignore')","97e53a4c":"top_10_primary = hospital_beds.nlargest(10,'NumPrimaryHealthCenters_HMIS')\ntop_10_community = hospital_beds.nlargest(10,'NumCommunityHealthCenters_HMIS')\ntop_10_district_hospitals = hospital_beds.nlargest(10,'NumDistrictHospitals_HMIS')\ntop_10_public_facility = hospital_beds.nlargest(10,'TotalPublicHealthFacilities_HMIS')\ntop_10_public_beds = hospital_beds.nlargest(10,'NumPublicBeds_HMIS')\n\nplt.figure(figsize=(20,15))\nplt.suptitle('Top 10 States in each Health Facility',fontsize=30)\nplt.subplot(221)\nplt.title('Primary Health Centers')\nplt.barh(top_10_primary['State\/UT'],top_10_primary['NumPrimaryHealthCenters_HMIS'],color ='#87479d');\n\nplt.subplot(222)\nplt.title('Community Health Centers')\nplt.barh(top_10_community['State\/UT'],top_10_community['NumCommunityHealthCenters_HMIS'],color = '#9370db');\n\nplt.subplot(224)\nplt.title('Total Public Health Facilities')\nplt.barh(top_10_community['State\/UT'],top_10_public_facility['TotalPublicHealthFacilities_HMIS'],color='#9370db');\n\nplt.subplot(223)\nplt.title('District Hospitals')\nplt.barh(top_10_community['State\/UT'],top_10_district_hospitals['NumDistrictHospitals_HMIS'],color = '#87479d');\nplt.savefig(\"top10_states_in_each_health.png\",dpi=500)","f3b40ac7":"top_rural_hos = hospital_beds.nlargest(10,'NumRuralHospitals_NHP18')\ntop_rural_beds = hospital_beds.nlargest(10,'NumRuralBeds_NHP18')\ntop_urban_hos = hospital_beds.nlargest(10,'NumUrbanHospitals_NHP18')\ntop_urban_beds = hospital_beds.nlargest(10,'NumUrbanBeds_NHP18')\n\nplt.figure(figsize=(20,15))\nplt.suptitle('Urban and Rural Health Facility',fontsize=20)\nplt.subplot(221)\nplt.title('Rural Hospitals')\nplt.barh(top_rural_hos['State\/UT'],top_rural_hos['NumRuralHospitals_NHP18'],color = '#87479d');\n\nplt.subplot(222)\nplt.title('Urban Hospitals')\nplt.barh(top_urban_hos['State\/UT'],top_urban_hos['NumUrbanHospitals_NHP18'],color = '#9370db');\n\nplt.subplot(223)\nplt.title('Rural Beds')\nplt.barh(top_rural_beds['State\/UT'],top_rural_beds['NumRuralBeds_NHP18'],color = '#87479d');\n\nplt.subplot(224)\nplt.title('Urban Beds')\nplt.barh(top_urban_beds['State\/UT'],top_urban_beds['NumUrbanBeds_NHP18'],color = '#9370db');\nplt.savefig(\"urban_and_rural_health.png\",dpi=500)\n","9f31e492":"state_testing.head()","81a8efbc":"mse","330a9062":"### Big Increases: Rajasthan, TN, Gujarat, WB, UP, Punjab, Maharashtra","7373d818":"# India Updates <a id=\"1\"><\/a>","ff75f062":"![](https:\/\/pbs.twimg.com\/media\/EX3pxxcXQAI8FoE?format=jpg&name=large)\nCredits : Prof. Shamika Ravi","3f7dd63e":"Men are the most affected accounting to 67%. But, remember we have ~80% data missing.","df1b17fe":"# 1. World Updates  <a id=\"32\"><\/a>\n","b47b5c0b":"### The Spike in India <a id=\"3\"><\/a>","1167ea12":"### Age Group Analysis <a id=\"2\"><\/a>","105edf56":"## Statewise Insights <a id=\"5\"><\/a>","5e34dd38":"**80% of the patients gender information is missing. Let's analyse with remaining the data.","4c4524bb":"### Certain Recovery : South Korea, Germany, Iran (Flattened the Curve!)\n### Uncertain Recovery : Italy, France, Spain (Flattening!)\n### United Kingdom showing very few recoveries","600cedb5":"We could see that the **age group <40 is the most affected** which is against the trend which says elderly people are more at risk of being affected. Only 17% of people >60 are affected.","8aa13534":"### Though being highly populated the relative confimred cases of India is low compared to other countries. This could be because of two reasons\n1. 21 day lockdown imposed by prime minister Narendra Modi (Source : [Health Ministry](http:\/\/www.indiatoday.in\/india\/story\/without-lockdown-india-would-have-2-lakh-covid-19-cases-by-now-health-ministry-1665903-2020-04-11))\n2. Low testing rate (Source: [news18](https:\/\/www.news18.com\/news\/india\/with-just-18-tests-per-million-of-population-why-indias-low-testing-rate-for-coronavirus-is-worrying-2552845.html))","71ef5d37":"![](https:\/\/pbs.twimg.com\/media\/EX3pu-9X0AMVTsp?format=jpg&name=large)","38e1fa83":"## Without lockdown, India would have 21 lakh Covid-19 cases by now: Health ministry","bf79d9da":"## Economic Impact of COVID-19 on India <a id=\"4\"><\/a>\n\n### The coronavirus is having a growing impact on the Indian economy. Here is an interesting insight on how an extenstion of the lockdown would affect the economy (Credits: McKincy & Company)\n\n![](https:\/\/www.mckinsey.com\/~\/media\/McKinsey\/Featured%20Insights\/India\/Getting%20ahead%20of%20coronavirus%20Saving%20lives%20and%20livelihoods%20in%20India\/SVGZ-India-COVID-ex1.ashx)","2ec693b3":"### Statewise Testing and Healthcare Insights <a id=\"6\"><\/a>"}}