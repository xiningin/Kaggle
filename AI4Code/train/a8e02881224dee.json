{"cell_type":{"d52bb658":"code","aa481603":"code","4f24ba88":"code","b11cdf65":"code","c81cb5bc":"code","b74f0af2":"code","aa805e81":"code","1a20a816":"code","12ed5042":"code","8d03e336":"code","3929c27c":"code","904006a4":"code","7de40753":"code","7c86c700":"code","e36c2d62":"code","4c27a743":"code","08edc532":"code","4d0c386b":"code","2ac4a63d":"code","eb93e517":"code","0d0395a4":"code","01e4bc64":"code","a60f9676":"markdown","716a3300":"markdown","0b46dbdf":"markdown","37403be4":"markdown","b2892d4b":"markdown","1ed5fc7d":"markdown","75842e7b":"markdown","5e157d5f":"markdown","de374251":"markdown","e85f2708":"markdown","31619f26":"markdown","a38b6be6":"markdown","9669e9af":"markdown","3f72a33a":"markdown","298e5c69":"markdown","7f6b39ea":"markdown","25c0a2dd":"markdown","e09417a0":"markdown","7a55fa32":"markdown","df14cae5":"markdown","8a56850d":"markdown","42dd3fb7":"markdown","2047e46d":"markdown","b01213e9":"markdown"},"source":{"d52bb658":"test = \"Hello World\"","aa481603":"print (\"test: \" + test)","4f24ba88":"import math\n\ndef basic_sigmoid(x):\n    \"\"\"\n    Compute sigmoid of x.\n\n    Arguments:\n    x -- A scalar\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n    #CODE STARTS HERE\n    s = 1\/(1+math.exp(-x))\n    #s = 1\/(1+np.exp(-x))\n    #CODE ENDS HERE\n    return s","b11cdf65":"print(\"basic_sigmoid(1) = \" + str(basic_sigmoid(1)))","c81cb5bc":"import numpy as np\n\n# example of np.exp\nt_x = np.array([1, 2, 3])\nprint(np.exp(t_x)) # result is (exp(1), exp(2), exp(3))","b74f0af2":"# example of vector operation\nt_x = np.array([1, 2, 3])\nprint (t_x + 3)","aa805e81":"# Sigmoid\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n    \n    # CODE STARTS HERE\n    s = 1\/(1 + np.exp(-x))\n    # CODE ENDS HERE\n    \n    return s","1a20a816":"t_x = np.array([1, 2, 3])\nprint(\"sigmoid(t_x) = \" + str(sigmoid(t_x)))","12ed5042":"# Sigmoid_derivative\n\ndef sigmoid_derivative(x):\n    \"\"\"\n    Compute the gradient (also called the slope or derivative) of the sigmoid function with respect to its input x.\n    You can store the output of the sigmoid function into variables and then use it to calculate the gradient.\n    \n    Arguments:\n    x -- A scalar or numpy array\n\n    Return:\n    ds -- Your computed gradient.\n    \"\"\"\n    \n    # CODE STARTS HERE\n    s = sigmoid(x)\n    ds = s*(1-s)\n    # CODE ENDS HERE\n    \n    return ds","8d03e336":"t_x = np.array([1, 2, 3])\nprint (\"sigmoid_derivative(t_x) = \" + str(sigmoid_derivative(t_x)))","3929c27c":"# Image2vector\n\ndef image2vector(image):\n    \"\"\"\n    Argument:\n    image -- a numpy array of shape (length, height, depth)\n    \n    Returns:\n    v -- a vector of shape (length*height*depth, 1)\n    \"\"\"\n    \n    # CODE STARTS HERE\n    v = image.reshape((image.shape[0] * image.shape[1] * image.shape[2],1))\n    # CODE ENDS HERE\n    \n    return v","904006a4":"# This is a 3 by 3 by 2 array, typically images will be (num_px_x, num_px_y,3) where 3 represents the RGB values\nt_image = np.array([[[ 0.67826139,  0.29380381],\n                     [ 0.90714982,  0.52835647],\n                     [ 0.4215251 ,  0.45017551]],\n\n                   [[ 0.92814219,  0.96677647],\n                    [ 0.85304703,  0.52351845],\n                    [ 0.19981397,  0.27417313]],\n\n                   [[ 0.60659855,  0.00533165],\n                    [ 0.10820313,  0.49978937],\n                    [ 0.34144279,  0.94630077]]])\n\nprint (\"image2vector(image) = \" + str(image2vector(t_image)))","7de40753":"# Normalize_rows\n\ndef normalize_rows(x):\n    \"\"\"\n    Implement a function that normalizes each row of the matrix x (to have unit length).\n    \n    Argument:\n    x -- A numpy matrix of shape (n, m)\n    \n    Returns:\n    x -- The normalized (by row) numpy matrix. You are allowed to modify x.\n    \"\"\"\n    \n    # CODE STARTS HERE\n    x_norm = np.linalg.norm(x,axis = 1, keepdims = True)\n    x = x\/x_norm\n    # CODE ENDS HERE\n\n    return x","7c86c700":"x = np.array([[0, 3, 4],\n              [1, 6, 4]])\nprint(\"normalizeRows(x) = \" + str(normalize_rows(x)))","e36c2d62":"# Softmax\n\ndef softmax(x):\n    \"\"\"Calculates the softmax for each row of the input x.\n\n    Your code should work for a row vector and also for matrices of shape (m,n).\n\n    Argument:\n    x -- A numpy matrix of shape (m,n)\n\n    Returns:\n    s -- A numpy matrix equal to the softmax of x, of shape (m,n)\n    \"\"\"\n    \n    # CODE STARTS HERE\n    x_exp = np.exp(x)\n    x_sum = np.sum(x_exp,axis = 1, keepdims = True)\n    s = x_exp\/x_sum\n    # CODE ENDS HERE\n    \n    return s","4c27a743":"t_x = np.array([[9, 2, 5, 0, 0],\n                [7, 5, 0, 0 ,0]])\nprint(\"softmax(x) = \" + str(softmax(t_x)))","08edc532":"import time\n\nx1 = [9, 2, 5, 0, 0, 7, 5, 0, 0, 0, 9, 2, 5, 0, 0]\nx2 = [9, 2, 2, 9, 0, 9, 2, 5, 0, 0, 9, 2, 5, 0, 0]\n\n### CLASSIC DOT PRODUCT OF VECTORS IMPLEMENTATION ###\ntic = time.process_time()\ndot = 0\n\nfor i in range(len(x1)):\n    dot += x1[i] * x2[i]\ntoc = time.process_time()\nprint (\"dot = \" + str(dot) + \"\\n ----- Computation time = \" + str(1000 * (toc - tic)) + \"ms\")\n\n### CLASSIC OUTER PRODUCT IMPLEMENTATION ###\ntic = time.process_time()\nouter = np.zeros((len(x1), len(x2))) # we create a len(x1)*len(x2) matrix with only zeros\n\nfor i in range(len(x1)):\n    for j in range(len(x2)):\n        outer[i,j] = x1[i] * x2[j]\ntoc = time.process_time()\nprint (\"outer = \" + str(outer) + \"\\n ----- Computation time = \" + str(1000 * (toc - tic)) + \"ms\")\n\n### CLASSIC ELEMENTWISE IMPLEMENTATION ###\ntic = time.process_time()\nmul = np.zeros(len(x1))\n\nfor i in range(len(x1)):\n    mul[i] = x1[i] * x2[i]\ntoc = time.process_time()\nprint (\"elementwise multiplication = \" + str(mul) + \"\\n ----- Computation time = \" + str(1000 * (toc - tic)) + \"ms\")\n\n### CLASSIC GENERAL DOT PRODUCT IMPLEMENTATION ###\nW = np.random.rand(3,len(x1)) # Random 3*len(x1) numpy array\ntic = time.process_time()\ngdot = np.zeros(W.shape[0])\n\nfor i in range(W.shape[0]):\n    for j in range(len(x1)):\n        gdot[i] += W[i,j] * x1[j]\ntoc = time.process_time()\nprint (\"gdot = \" + str(gdot) + \"\\n ----- Computation time = \" + str(1000 * (toc - tic)) + \"ms\")","4d0c386b":"x1 = [9, 2, 5, 0, 0, 7, 5, 0, 0, 0, 9, 2, 5, 0, 0]\nx2 = [9, 2, 2, 9, 0, 9, 2, 5, 0, 0, 9, 2, 5, 0, 0]\n\n### VECTORIZED DOT PRODUCT OF VECTORS ###\ntic = time.process_time()\ndot = np.dot(x1,x2)\ntoc = time.process_time()\nprint (\"dot = \" + str(dot) + \"\\n ----- Computation time = \" + str(1000 * (toc - tic)) + \"ms\")\n\n### VECTORIZED OUTER PRODUCT ###\ntic = time.process_time()\nouter = np.outer(x1,x2)\ntoc = time.process_time()\nprint (\"outer = \" + str(outer) + \"\\n ----- Computation time = \" + str(1000 * (toc - tic)) + \"ms\")\n\n### VECTORIZED ELEMENTWISE MULTIPLICATION ###\ntic = time.process_time()\nmul = np.multiply(x1,x2)\ntoc = time.process_time()\nprint (\"elementwise multiplication = \" + str(mul) + \"\\n ----- Computation time = \" + str(1000*(toc - tic)) + \"ms\")\n\n### VECTORIZED GENERAL DOT PRODUCT ###\ntic = time.process_time()\ndot = np.dot(W,x1)\ntoc = time.process_time()\nprint (\"gdot = \" + str(dot) + \"\\n ----- Computation time = \" + str(1000 * (toc - tic)) + \"ms\")","2ac4a63d":"# L1\n\ndef L1(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n    \n    Returns:\n    loss -- the value of the L1 loss function defined above\n    \"\"\"\n    \n    # CODE STARTS HERE\n    loss = sum(abs(y - yhat))\n    \n    # CODE ENDS HERE\n    \n    return loss","eb93e517":"yhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\nprint(\"L1 = \" + str(L1(yhat, y)))","0d0395a4":"# L2\n\ndef L2(yhat, y):\n    \"\"\"\n    Arguments:\n    yhat -- vector of size m (predicted labels)\n    y -- vector of size m (true labels)\n    \n    Returns:\n    loss -- the value of the L2 loss function defined above\n    \"\"\"\n    \n    # YOUR CODE STARTS HERE\n    #loss = sum(abs((y - yhat)**2))\n    loss = np.sum(np.dot(y-yhat,y-yhat))\n    # YOUR CODE ENDS HERE\n    \n    return loss","01e4bc64":"yhat = np.array([.9, 0.2, 0.1, .4, .9])\ny = np.array([1, 0, 0, 1, 1])\n\nprint(\"L2 = \" + str(L2(yhat, y)))","a60f9676":"**What you need to remember:**\n1. **np.exp(x)** works for any np.array x and applies the exponential function to every coordinate.\n2. the **sigmoid function** and its **gradient**.\n3. **image2vector** is commonly used in **deep learning**.\n4. **np.reshape** is widely used. In the future, you'll see that keeping your **matrix\/vector** dimensions. straight will go toward eliminating a lot of bugs.\n5. **NumPy** has efficient built-in functions.\n6. **Broadcasting** is extremely useful.","716a3300":"# Exercise 6 - normalize_rows\nImplement normalizeRows() to normalize the rows of a matrix. After applying this function to an input matrix x, each row of x should be a vector of unit length (meaning length 1).\n\n**Note**: Don't try to use x \/= x_norm. For the matrix division numpy must broadcast the x_norm, which is not supported by the operant \/=","0b46dbdf":"# 1 - Building basic functions with numpy\n**NumPy** is the main package for scientific computing in Python. It is maintained by a large community (www.numpy.org). In this notebook we will learn several key numpy functions such as np.exp, np.log, and np.reshape. We will need to know how to use these functions **machine learning** and **data science.**\n\n\n# 1.1 - sigmoid function, np.exp()\nBefore using **np.exp()**, you will use **math.exp()** to implement the sigmoid function. We will then see why np.exp() is preferable to math.exp().\n\n\n# Exercise 2 - basic_sigmoid\nBuild a function that returns the sigmoid of a real number x. Use math.exp(x) for the exponential function.\n\n**Reminder:**  \ud835\udc60\ud835\udc56\ud835\udc54\ud835\udc5a\ud835\udc5c\ud835\udc56\ud835\udc51(\ud835\udc65)=1\/1+\ud835\udc52(\u2212\ud835\udc65)  is sometimes also known as the logistic function. It is a non-linear function used not only in Machine Learning (Logistic Regression), but also in Deep Learning.\n<img src=\"https:\/\/miro.medium.com\/max\/1280\/1*OUOB_YF41M-O4GgZH_F2rw.png\">","37403be4":"# Exercise 9 - L2\nImplement the **NumPy vectorized** version of the L2 loss. There are several way of implementing the L2 loss but you may find the function np.dot() useful. As a reminder, if $x = [x_1, x_2, ..., x_n]$, then `np.dot(x,x)` = $\\sum_{j=0}^n x_j^{2}$. \n\n- L2 loss is defined as $$\\begin{align*} & L_2(\\hat{y},y) = \\sum_{i=0}^{m-1}(y^{(i)} - \\hat{y}^{(i)})^2 \\end{align*}\\tag{7}$$","b2892d4b":"<img src = \"https:\/\/i0.wp.com\/indianaiproduction.com\/wp-content\/uploads\/2019\/06\/Python-NumPy-Tutorial.jpg?fit=1280%2C720&ssl=1\">\nWelcome to my first Notebook. This Notebook will give you a brief introduction to Python library Numpy. Even if you've used Python before, this will help familiarize you with the functions of **Numpy** in **Machine Learning**.\n\n**Instructions:**\n\n1. We will be using Python 3.\n2. We will avoid using for-loops and while-loops, unless we are explicitly told to do so.\n3. After coding function, run the cell right below it to check if your result is correct.\n\n**After this Notebook you will:**\n\n1. Be able to use **NumPy functions** and **NumPy matrix\/vector** operations\n2. Understand the concept of \"**broadcasting**\"\n3. Be able to **vectorize** code\n\nLet's get started!","1ed5fc7d":"**Note:** In normalize_rows(), you can try to print the shapes of x_norm and x, and then rerun the assessment. You'll find out that they have different shapes. This is normal given that x_norm takes the norm of each row of x. So x_norm has the same number of rows but only 1 column. So how did it work when you divided x by x_norm? This is called **broadcasting**.","75842e7b":"# Exercise 3 - sigmoid\nImplement the **sigmoid function** using **NumPy**.\n\n**Instructions**: x could now be either a real number, a vector, or a matrix. The data structures we use in numpy to represent these shapes (vectors, matrices...) are called numpy arrays. You don't need to know more for now.\n$$ \\text{For } x \\in \\mathbb{R}^n \\text{,     } sigmoid(x) = sigmoid\\begin{pmatrix}\n    x_1  \\\\\n    x_2  \\\\\n    ...  \\\\\n    x_n  \\\\\n\\end{pmatrix} = \\begin{pmatrix}\n    \\frac{1}{1+e^{-x_1}}  \\\\\n    \\frac{1}{1+e^{-x_2}}  \\\\\n    ...  \\\\\n    \\frac{1}{1+e^{-x_n}}  \\\\\n\\end{pmatrix}\\tag{1} $$","5e157d5f":"# 1.3 - Reshaping arrays\nTwo common **NumPy** functions used in **Deep learning** are [np.shape](http:\/\/https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.ndarray.shape.html) and [np.reshape()](http:\/\/https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.reshape.html).\n\nX.shape is used to get the shape (dimension) of a matrix\/vector X.\nX.reshape(...) is used to reshape X into some other dimension.\nFor example, in computer science, an image is represented by a 3D array of shape  **(\ud835\udc59\ud835\udc52\ud835\udc5b\ud835\udc54\ud835\udc61\u210e,\u210e\ud835\udc52\ud835\udc56\ud835\udc54\u210e\ud835\udc61,\ud835\udc51\ud835\udc52\ud835\udc5d\ud835\udc61\u210e=3)** . However, when you read an image as the input of an algorithm you convert it to a vector of shape  **(\ud835\udc59\ud835\udc52\ud835\udc5b\ud835\udc54\ud835\udc61\u210e\u2217\u210e\ud835\udc52\ud835\udc56\ud835\udc54\u210e\ud835\udc61\u22173,1)** . In other words, you \"unroll\", or reshape, the 3D array into a 1D vector.\n<img src = \"https:\/\/media.springernature.com\/lw685\/springer-static\/image\/art%3A10.1007%2Fs11069-020-04315-y\/MediaObjects\/11069_2020_4315_Fig2_HTML.png\">","de374251":"**Expected output**: test: Hello World","e85f2708":"# Exercise 7 - softmax\nImplement a softmax function using **NumPy**. You can think of softmax as a normalizing function used when your algorithm needs to classify two or more classes.\n\n**Instructions**:\n- $\\text{for } x \\in \\mathbb{R}^{1\\times n} \\text{,     }$\n\n\\begin{align*}\n softmax(x) &= softmax\\left(\\begin{bmatrix}\n    x_1  &&\n    x_2 &&\n    ...  &&\n    x_n  \n\\end{bmatrix}\\right) \\\\&= \\begin{bmatrix}\n    \\frac{e^{x_1}}{\\sum_{j}e^{x_j}}  &&\n    \\frac{e^{x_2}}{\\sum_{j}e^{x_j}}  &&\n    ...  &&\n    \\frac{e^{x_n}}{\\sum_{j}e^{x_j}} \n\\end{bmatrix} \n\\end{align*}\n\n- $\\text{for a matrix } x \\in \\mathbb{R}^{m \\times n} \\text{,  $x_{ij}$ maps to the element in the $i^{th}$ row and $j^{th}$ column of $x$, thus we have: }$  \n\n\\begin{align*}\nsoftmax(x) &= softmax\\begin{bmatrix}\n            x_{11} & x_{12} & x_{13} & \\dots  & x_{1n} \\\\\n            x_{21} & x_{22} & x_{23} & \\dots  & x_{2n} \\\\\n            \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n            x_{m1} & x_{m2} & x_{m3} & \\dots  & x_{mn}\n            \\end{bmatrix} \\\\ \\\\&= \n \\begin{bmatrix}\n    \\frac{e^{x_{11}}}{\\sum_{j}e^{x_{1j}}} & \\frac{e^{x_{12}}}{\\sum_{j}e^{x_{1j}}} & \\frac{e^{x_{13}}}{\\sum_{j}e^{x_{1j}}} & \\dots  & \\frac{e^{x_{1n}}}{\\sum_{j}e^{x_{1j}}} \\\\\n    \\frac{e^{x_{21}}}{\\sum_{j}e^{x_{2j}}} & \\frac{e^{x_{22}}}{\\sum_{j}e^{x_{2j}}} & \\frac{e^{x_{23}}}{\\sum_{j}e^{x_{2j}}} & \\dots  & \\frac{e^{x_{2n}}}{\\sum_{j}e^{x_{2j}}} \\\\\n    \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n    \\frac{e^{x_{m1}}}{\\sum_{j}e^{x_{mj}}} & \\frac{e^{x_{m2}}}{\\sum_{j}e^{x_{mj}}} & \\frac{e^{x_{m3}}}{\\sum_{j}e^{x_{mj}}} & \\dots  & \\frac{e^{x_{mn}}}{\\sum_{j}e^{x_{mj}}}\n\\end{bmatrix} \\\\ \\\\ &= \\begin{pmatrix}\n    softmax\\text{(first row of x)}  \\\\\n    softmax\\text{(second row of x)} \\\\\n    \\vdots  \\\\\n    softmax\\text{(last row of x)} \\\\\n\\end{pmatrix} \n\\end{align*}","31619f26":"# Exercise 5 - image2vector\nImplement image2vector() that takes an input of shape (length, height, 3) and returns a vector of shape (length*height*3, 1). For example, if you would like to reshape an array v of shape (a, b, c) into a vector of shape (a*b,c) you would do:\n\n**v = v.reshape((v.shape[0] * v.shape[1], v.shape[2])) # v.shape[0] = a ; v.shape[1] = b ; v.shape[2] = c**\n* Please don't hardcode the dimensions of image as a constant. Instead look up the quantities we need with image.shape[0], etc.\n* You can use v = v.reshape(-1, 1). Just make sure you understand why it works.","a38b6be6":"**Notes:** \nSoftmax should be performed for all features of each training example, so softmax would be performed on the columns.\n\nIn this coding practice, we're just focusing on getting familiar with Python, so we're using the common math notation  **\ud835\udc5a\u00d7\ud835\udc5b** where  \ud835\udc5a  is the number of rows and  \ud835\udc5b  is the number of columns.","9669e9af":"# 2 - Vectorization\nIn **deep learning**, we deal with very large datasets. Hence, a non-computationally-optimal function can become a huge bottleneck in your algorithm and can result in a model that takes ages to run. To make sure that your code is computationally efficient, we will use vectorization. For example, try to tell the difference between the following implementations of the dot\/outer\/elementwise product.","3f72a33a":"Any time you need more info on a **NumPy** function, we encourage you to look at the [official documentation](http:\/\/https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.exp.html).","298e5c69":"# Table of Contents--\n* **Exercise 1**\n1. Building basic functions with **NumPy**\n        1.1 - sigmoid function, np.exp()\n*          **Exercise 2** - basic_sigmoid\n        * **Exercise 3** - sigmoid\n    1.2 - Sigmoid Gradient\n        * **Exercise 4** - sigmoid_derivative\n    1.3 - Reshaping arrays\n        * **Exercise 5** - image2vector\n    1.4 - Normalizing rows\n        * **Exercise 6** - normalize_rows\n        * **Exercise 7** - softmax\n2. Vectorization\n    2.1 Implement the L1 and L2 loss functions\n*         **Exercise 8** - L1\n        * **Exercise 9** - L2","7f6b39ea":"# 1.4 - Normalizing rows\nAnother common technique we use in **Machine Learning** and **Deep Learning** is to **normalize** our data. It often leads to a better performance because gradient descent converges faster after normalization. Here, by normalization we mean changing x to  \ud835\udc65\/\u2016\ud835\udc65\u2016  (dividing each row vector of x by its norm).\n\nFor example, if\n                $$x = \\begin{bmatrix}\n        0 & 3 & 4 \\\\\n        2 & 6 & 4 \\\\\n\\end{bmatrix}\\tag{3}$$ \nthen\n$$\\| x\\| = \\text{np.linalg.norm(x, axis=1, keepdims=True)} = \\begin{bmatrix}\n    5 \\\\\n    \\sqrt{56} \\\\\n\\end{bmatrix}\\tag{4} $$\nand\n$$ x\\_normalized = \\frac{x}{\\| x\\|} = \\begin{bmatrix}\n    0 & \\frac{3}{5} & \\frac{4}{5} \\\\\n    \\frac{2}{\\sqrt{56}} & \\frac{6}{\\sqrt{56}} & \\frac{4}{\\sqrt{56}} \\\\\n\\end{bmatrix}\\tag{5}$$ \n\nNote that you can divide matrices of different sizes and it works fine: this is called **broadcasting** and you're going to learn about it in part 5.\n\nWith **keepdims=True** the result will broadcast correctly against the original x.\n\n**axis=1** means you are going to get the norm in a row-wise manner. If you need the norm in a column-wise way, you would need to set **axis=0**.\n\nnumpy.linalg.norm has another parameter **ord** where we specify the type of normalization to be done (in the exercise below you'll do 2-norm). To get familiar with the types of normalization you can visit [numpy.linalg.norm](http:\/\/https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.linalg.norm.html)","25c0a2dd":"As you may have noticed, the **vectorized implementation** is much cleaner and more **efficient**. For bigger **vectors\/matrices**, the differences in running time become even **bigger**.\n\n**Note:** that **np.dot()** performs a matrix-matrix or **matrix-vector multiplication**. This is different from **np.multiply()** and the * operator (which is equivalent to .* in Matlab\/Octave), which performs an **element-wise multiplication**.","e09417a0":"Thank You on completing this Notebook. I hope that this little warm-up exercise help you to hone your NumPy knowledge and will be helpful for the future projects and notebooks.\n\n# What to remember:\n1. **Vectorization** is very important in deep learning. \n2. It provides **computational efficiency** and **clarity**.\n3. We have reviewed the **L1** and **L2 loss**.\n4. We are familiar with many **NumPy** functions such as **np.sum**, **np.dot**, **np.multiply**, **np.maximum**, etc...","7a55fa32":"Furthermore, if x is a vector, then a Python operation such as  \ud835\udc60=\ud835\udc65+3  or  \ud835\udc60=1\/\ud835\udc65  will output s as a vector of the same size as x.","df14cae5":"# 2.1 Implement the L1 and L2 loss functions\n\n# Exercise 8 - L1\nImplement the **NumPy vectorized** version of the L1 loss. We would find the function abs(x) (absolute value of x) useful.\n\n**Reminder:**\n\n* The loss is used to evaluate the performance of your model. The bigger your loss is, the more different your predictions ( \ud835\udc66\u0302  ) are from the true values ( \ud835\udc66 ). \n* In deep learning, you use optimization algorithms like Gradient Descent to train your model and to minimize the cost.\nL1 loss is defined as:\n$$\\begin{align*} & L_1(\\hat{y}, y) = \\sum_{i=0}^{m-1}|y^{(i)} - \\hat{y}^{(i)}| \\end{align*}\\tag{6}$$","8a56850d":"# Exercise 1\nSet test to \"Hello World\" in the cell below to print \"Hello World\" and run the two cells below.","42dd3fb7":"**Notes:**\n* If we print the shapes of x_exp, x_sum and s above and rerun the assessment cell, we will see that x_sum is of shape (2,1) while x_exp and s are of shape (2,5). x_exp\/x_sum works due to python **broadcasting**.\n\n**Congratulations!** You now have a pretty good understanding of python **NumPy** and have implemented a few useful functions that you will be using in deep learning.","2047e46d":"Actually, we rarely use the \"**math**\" library in **deep learning** because the inputs of the functions are real numbers. In deep learning we mostly use matrices and vectors. This is why numpy is more useful.","b01213e9":"# 1.2 - Sigmoid Gradient\nAs you've seen in lecture, you will need to compute gradients to optimize loss functions using **backpropagation**. Let's code our first **gradient function**.\n\n\n# Exercise 4 - sigmoid_derivative\nImplement the function sigmoid_grad() to compute the gradient of the sigmoid function with respect to its input x. The formula is:\n\n$$sigmoid\\_derivative(x) = \\sigma'(x) = \\sigma(x) (1 - \\sigma(x))\\tag{2}$$\nYou often code this function in two steps:\n\nSet s to be the sigmoid of x. You might find your sigmoid(x) function useful.\nCompute  **\ud835\udf0e\u2032(\ud835\udc65)=\ud835\udc60(1\u2212\ud835\udc60)**"}}