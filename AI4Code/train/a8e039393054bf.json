{"cell_type":{"d3d37562":"code","5bc20724":"code","d136ddef":"code","edfdc672":"code","d5442b08":"code","97df637e":"code","e6c584f9":"code","5125ec64":"code","6743bfb4":"code","815b6c68":"code","b26162af":"code","8156e2ec":"code","24559b7c":"code","2d8c1f80":"code","17ada1be":"code","51b02825":"code","d5e897dc":"code","397ca4e6":"markdown","69e41fc7":"markdown","5cc1b491":"markdown","95787a79":"markdown","c7e3b0e2":"markdown"},"source":{"d3d37562":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5bc20724":"df = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndf.head()","d136ddef":"df.shape","edfdc672":"df.dtypes","d5442b08":"df.isnull().sum()","97df637e":"df.describe()","e6c584f9":"df.rename(columns = {'CustomerID': 'customer_id', 'Age': 'age',\n                     'Gender': 'gender','Annual Income (k$)': 'income', \n                     'Spending Score (1-100)': 'spending_score'}, inplace = True)\n\n# Create new features for scaled data\ndf['s_age'] = df['age']\ndf['s_income'] = df['income']\ndf['s_spending_score'] = df['spending_score']","5125ec64":"# Scale age, income, and spending score\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\n\ndf[['s_age', 's_income', 's_spending_score',]] = scaler.fit_transform(df[['age', 'income', 'spending_score']])","6743bfb4":"from sklearn.cluster import KMeans\n\nX = df[['s_age', 's_income', 's_spending_score']].values\n\nwcss = []\n\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit_predict(X)\n    wcss.append(kmeans.inertia_)","815b6c68":"# Visualize an Elbow Plot to Identify the Optimal Number of Clusters\n\nplt.plot(range(1,11), wcss)\nplt.title('Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('wcss')","b26162af":"kmeans = KMeans(n_clusters = 4)\ny_predicted = kmeans.fit_predict(X)\ndf['cluster'] = y_predicted","8156e2ec":"df.head()","24559b7c":"# Convert cluster number from integer to string and order them for visualization purposes\n\ndf['cluster'] = df['cluster'].apply(str)\ndf = df.sort_values(by=['cluster'])","2d8c1f80":"import plotly.express as px\n\nfig = px.scatter_3d(df, x = 's_age', y = 's_income', z = 's_spending_score', color = 'cluster', opacity = 0.7)\nfig.update_layout(scene = dict(\n                    xaxis = dict(\n                         backgroundcolor = \"rgb(200, 200, 230)\",\n                         gridcolor = \"white\",\n                         showbackground = True,\n                         zerolinecolor = \"white\",\n                         title = \"Age\"),\n                    yaxis = dict(\n                        backgroundcolor = \"rgb(230, 200,230)\",\n                        gridcolor = \"white\",\n                        showbackground = True,\n                        zerolinecolor = \"white\",\n                        title = \"Annual Income\"),\n                    zaxis = dict(\n                        backgroundcolor = \"rgb(230, 230,200)\",\n                        gridcolor = \"white\",\n                        showbackground = True,\n                        zerolinecolor = \"white\",\n                        title = \"Spending Score\")\n                  ))\nfig.show()","17ada1be":"plt.figure(1 , figsize = (15 , 6))\nn = 0 \n\narr = list(map(str,range(0, 4)))\n\nfor cluster in arr:\n    for feature in ['age' , 'income' , 'spending_score']:\n        n += 1\n        plt.subplot(4, 3 , n) \n        plt.tight_layout()\n        plt.xlim(0, df[feature].max() + 15)\n        sns.distplot(df[df['cluster'] == cluster][feature])\n        plt.title('{} - Cluster {}'.format(feature, cluster))\n\nplt.show()","51b02825":"df['cluster'].value_counts(normalize=True) * 100","d5e897dc":"arr = list(map(str,range(0, 4)))\n\nprint('Entire df:')\nprint(df[['age', 'income', 'spending_score']].describe())\n\nfor i in arr:\n    print('\\nCluster Number '  + i + ':' + '\\n')\n    print(df[df['cluster'] == i][['age', 'income', 'spending_score']].describe())","397ca4e6":"## Apply K Means Clustering","69e41fc7":"## Analyze The Clusters\n\nCuster 0 is high-income, low-spending people of many ages (19.0%)\n\nCluster 1 is low-medium income, medium-high spending millennials (28.5%)\n\nCluster 2 is low-medium income, medium-spending older folks (32.5%)\n\nCluster 3 is high-income, high-spending millennials (20%)","5cc1b491":"## Visualize the Clusters","95787a79":"## Examine the Dataset","c7e3b0e2":"## Prepare the Data for K Means Clustering"}}