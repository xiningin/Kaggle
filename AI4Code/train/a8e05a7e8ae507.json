{"cell_type":{"48f01dcb":"code","ad1c2240":"code","02691e64":"code","8b902aae":"code","f50e3f6c":"code","97ed8780":"code","2885ce31":"code","95a423b4":"code","1313eb12":"code","cdf34608":"code","4e35e497":"code","da871f7a":"code","9b400806":"code","f92ede11":"code","cf56ebab":"code","3bcf22c1":"code","9d64af1b":"code","68739acf":"code","884d6688":"code","9ccfb93d":"code","9a63a605":"code","13135789":"code","47d08239":"code","0b8a333a":"code","fb6fc5e5":"code","7814720d":"code","e0add4ba":"code","0b2e94d0":"markdown","3e38663a":"markdown","1ff6109e":"markdown","643b6c10":"markdown","2710bbd9":"markdown","c9d2ffea":"markdown","c452d294":"markdown","1772cb34":"markdown","35f52c0d":"markdown","018d99c8":"markdown"},"source":{"48f01dcb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad1c2240":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport seaborn as sns","02691e64":"df = pd.read_csv(\"\/kaggle\/input\/the-bread-basket\/bread basket.csv\")","8b902aae":"df.head()","f50e3f6c":"df.describe()","97ed8780":"df.info()","2885ce31":"# Converting the 'date_time' column into the right format\ndf['date_time'] = pd.to_datetime(df['date_time'])","95a423b4":"df.head(10)","1313eb12":"# Count of unique customers\ndf['Transaction'].nunique()","cdf34608":"# Extracting date\ndf['date'] = df['date_time'].dt.date\n\n#Extracting time\ndf['time'] = df['date_time'].dt.time\n\n# Extracting month and replacing it with text\ndf['month'] = df['date_time'].dt.month\ndf['month'] = df['month'].replace((1,2,3,4,5,6,7,8,9,10,11,12), \n                                          ('January','February','March','April','May','June','July','August',\n                                          'September','October','November','December'))\n\n# Extracting hour\ndf['hour'] = df['date_time'].dt.hour\n# Replacing hours with text\nhour_in_num = (1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)\nhour_in_obj = ('1-2','7-8','8-9','9-10','10-11','11-12','12-13','13-14','14-15',\n               '15-16','16-17','17-18','18-19','19-20','20-21','21-22','22-23','23-24')\ndf['hour'] = df['hour'].replace(hour_in_num, hour_in_obj)\n\n# Extracting weekday and replacing it with text\ndf['weekday'] = df['date_time'].dt.weekday\ndf['weekday'] = df['weekday'].replace((0,1,2,3,4,5,6), \n                                          ('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))\n\n# dropping date_time column\ndf.drop('date_time', axis = 1, inplace = True)","4e35e497":"df.head()","da871f7a":"# cleaning the item column\ndf['Item'] = df['Item'].str.strip()\ndf['Item'] = df['Item'].str.lower()","9b400806":"df.head()","f92ede11":"plt.figure(figsize=(15,5))\nsns.barplot(x = df.Item.value_counts().head(20).index, y = df.Item.value_counts().head(20).values, palette = 'gnuplot')\nplt.xlabel('Items', size = 15)\nplt.xticks(rotation=45)\nplt.ylabel('Count of Items', size = 15)\nplt.title('Top 20 Items purchased by customers', color = 'green', size = 20)\nplt.show()","cf56ebab":"monthTran = df.groupby('month')['Transaction'].count().reset_index()\nmonthTran.loc[:,\"monthorder\"] = [4,8,12,2,1,7,6,3,5,11,10,9]\nmonthTran.sort_values(\"monthorder\",inplace=True)\n\nplt.figure(figsize=(12,5))\nsns.barplot(data = monthTran, x = \"month\", y = \"Transaction\")\nplt.xlabel('Months', size = 15)\nplt.ylabel('Orders per month', size = 15)\nplt.title('Number of orders received each month', color = 'green', size = 20)\nplt.show()\n\n\nplt.show()","3bcf22c1":"weekTran = df.groupby('weekday')['Transaction'].count().reset_index()\nweekTran.loc[:,\"weekorder\"] = [4,0,5,6,3,1,2]\nweekTran.sort_values(\"weekorder\",inplace=True)\n\nplt.figure(figsize=(12,5))\nsns.barplot(data = weekTran, x = \"weekday\", y = \"Transaction\")\nplt.xlabel('Week Day', size = 15)\nplt.ylabel('Orders per day', size = 15)\nplt.title('Number of orders received each day', color = 'green', size = 20)\nplt.show()\n\n\nplt.show()","9d64af1b":"hourTran = df.groupby('hour')['Transaction'].count().reset_index()\nhourTran.loc[:,\"hourorder\"] = [1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,7,8,9]\nhourTran.sort_values(\"hourorder\",inplace=True)\n\nplt.figure(figsize=(12,5))\nsns.barplot(data = hourTran, x = \"Transaction\", y = \"hour\")\nplt.ylabel('Hours', size = 15)\nplt.xlabel('Orders each hour', size = 15)\nplt.title('Count of orders received each hour', color = 'green', size = 20)\nplt.show()","68739acf":"dayTran = df.groupby('period_day')['Transaction'].count().reset_index()\n# dayTran.loc[:,\"hourorder\"] = [1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,7,8,9]\n# dayTran.sort_values(\"hourorder\",inplace=True)\n\nplt.figure(figsize=(12,5))\nsns.barplot(data = dayTran, x = \"Transaction\", y = \"period_day\")\nplt.ylabel('Period', size = 15)\nplt.xlabel('Orders each period of a day', size = 15)\nplt.title('Count of orders received each period of a day', color = 'green', size = 20)\nplt.show()","884d6688":"dates = df.groupby('date')['Transaction'].count().reset_index()\ndates = dates[dates['Transaction']>=200].sort_values('date').reset_index(drop = True)\n\ndates = pd.merge(dates, df[['date','weekday']], on = 'date', how = 'inner')\ndates.drop_duplicates(inplace =True)\ndates","9ccfb93d":"data = df.groupby(['period_day','Item'])['Transaction'].count().reset_index().sort_values(['period_day','Transaction'],ascending=False)\nday = ['morning','afternoon','evening','night']\n\nplt.figure(figsize=(15,8))\nfor i,j in enumerate(day):\n    plt.subplot(2,2,i+1)\n    df1 = data[data.period_day==j].head(10)\n    sns.barplot(data=df1, y=df1.Item, x=df1.Transaction, color='pink')\n    plt.xlabel('')\n    plt.ylabel('')\n    plt.title('Top 10 items people like to order in \"{}\"'.format(j), size=13)\n\nplt.show()","9a63a605":"from mlxtend.frequent_patterns import association_rules, apriori","13135789":"transactions_str = df.groupby(['Transaction', 'Item'])['Item'].count().reset_index(name ='Count')\ntransactions_str","47d08239":"# making a mxn matrice where m=transaction and n=items and each row represents whether the item was in the transaction or not\nmy_basket = transactions_str.pivot_table(index='Transaction', columns='Item', values='Count', aggfunc='sum').fillna(0)\n\n\nmy_basket.head()","0b8a333a":"# making a function which returns 0 or 1\n# 0 means item was not in that transaction, 1 means item present in that transaction\n\ndef encode(x):\n    if x<=0:\n        return 0\n    if x>=1:\n        return 1\n\n# applying the function to the dataset\n\nmy_basket_sets = my_basket.applymap(encode)\nmy_basket_sets.head()","fb6fc5e5":"# using the 'apriori algorithm' with min_support=0.01 (1% of 9465)\n# It means the item should be present in atleast 94 transaction out of 9465 transactions only when we considered that item in\n# frequent itemset\nfrequent_items = apriori(my_basket_sets, min_support = 0.01,use_colnames = True)\nfrequent_items","7814720d":"# now making the rules from frequent itemset generated above\n\nrules = association_rules(frequent_items, metric = \"lift\", min_threshold = 1)\nrules.sort_values('confidence', ascending = False, inplace = True)\nrules","e0add4ba":"# arranging the data from highest to lowest with respect to 'confidence'\n\nrules.sort_values('confidence', ascending=False)","0b2e94d0":"People order more on weekends.","3e38663a":"Mostly transactions are on weekends, as we saw earlier in our graph.","1ff6109e":"# Apriori Algorithm","643b6c10":"There is no missing value.","2710bbd9":"People prefer to order in the morning and afternoon.","c9d2ffea":"People order more during the afternoon, since there are a lot of maximum order percentage between 12-5.","c452d294":"# Reading and Cleaning Data","1772cb34":"Coffee has the highest transactions.\n\nCoke is the 20th most buyed product.","35f52c0d":"Most transactions were in **March, January, February, November, December**","018d99c8":"# Data Visualization"}}