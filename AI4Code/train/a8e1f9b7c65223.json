{"cell_type":{"073a65d4":"code","ab801a2b":"code","0efed73a":"code","1e844fb9":"code","9f09540d":"code","81a7b5c3":"code","fe4825ba":"code","1935c9db":"code","356f055b":"code","b8ef294d":"code","8bb422e7":"code","3108aba4":"code","721f29c5":"code","7a0e67fe":"code","2b0f0e9d":"markdown"},"source":{"073a65d4":"#Import Base Packages\nimport pandas as pd\nimport numpy as np\nimport os\n\n#Import Visualization Packages\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot, download_plotlyjs\ninit_notebook_mode(connected=True) #important call otherwise plotly graphs will not show up in notebook \n\n#Import BigQuery API for Accessing Medicare Data\nfrom google.cloud import bigquery\n\n#print(os.listdir(\"..\/input\"))","ab801a2b":"#Load Medicare Part D Prescriber (2014) Dataset\n#Aggregated by total beneficiaries, claims, & claim cost per state\n\nclient = bigquery.Client() #need to call this to prime the bigquery cursor\n\nquery = (\n    '''\n    select\n        nppes_provider_state as state,\n        sum(bene_count) as beneficiaries,\n        sum(total_claim_count) as total_claims,\n        sum(total_drug_cost) as total_claim_cost\n    from `bigquery-public-data.cms_medicare.part_d_prescriber_2014`\n    group by 1\n    order by 2 desc\n    '''\n    #\"limit 100\"\n)\nquery_job = client.query(query)\n\nmedicare = query_job.to_dataframe()\n\nmedicare.head()","0efed73a":"#Beneficiaries by State Bar Chart\n\ndata = [dict(\n    type = 'bar',\n    x = medicare.state,\n    y = (medicare.beneficiaries\/1000000).round(1),\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n    text= medicare.state\n)\n       ]\nlayout = dict(title = '2014 Medicare Beneficiaries by State (Millions)',\n             )\n\nfig = dict(data = data, layout = layout)\niplot(fig)","1e844fb9":"#Beneficiaries by State Choropleth Map\n\ndata = [dict(\n    type = 'choropleth',\n    locations = medicare['state'], #spatial coordinates\n    z = (medicare['beneficiaries']\/1000000).round(1).astype(float), #data to be color-coded\n    locationmode = 'USA-states', #set of locations match entries in locations\n    colorscale = 'Reds',\n    text = medicare['state'],\n    colorbar = dict(\n            title = \"Millions\")\n)\n]\n\nlayout = go.Layout(\n    title_text = '2014 Medicare Beneficiaries by State',\n    geo_scope='usa', #limit map scope to USA\n)\n\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n#fig = go.Figure(data = data, layout = layout)\n#fig.show() #two ways to show figure (dictionary notation or go.Figure)","9f09540d":"#Medicare Beneficiaries Per Capita\n\n#Import 2015 US Pop Estimates by State\npop2015 = pd.read_csv(\"..\/input\/population.csv\")\npop2015.columns = ['state','population']\n\n#Join State medicare info Drugs and Populations\nmed_pop = pd.merge(medicare, pop2015, how = 'left', left_on = 'state', right_on = 'state')\nmed_pop = med_pop.dropna(subset = ['population']) #drop rows where population is NaN\nmed_pop['benef_per_cap'] = med_pop['beneficiaries']\/med_pop['population']\nmed_pop['claims_per_cap'] = med_pop['total_claims']\/med_pop['population']\nmed_pop['cost_per_cap'] = med_pop['total_claim_cost']\/med_pop['population']\n\nmed_pop.head()","81a7b5c3":"#Medicare Beneficiaries Per Capita Choropleth Map\n\ndata = [dict(\n    type = 'choropleth',\n    locations = med_pop['state'], #spatial coordinates\n    z = med_pop['benef_per_cap'].astype(float), #data to be color-coded\n    locationmode = 'USA-states', #set of locations match entries in locations\n    colorscale = 'Blues',\n    text = medicare['state'],\n    reversescale = True,\n)\n]\n\nlayout = go.Layout(\n    title_text = '2014 Medicare Beneficiaries per Capita by State',\n    geo_scope='usa', #limit map scope to USA\n)\n\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n#fig = go.Figure(data = data, layout = layout)\n#fig.show()","fe4825ba":"#Most Prescribed Drugs in US\n#Aggregated by Total Claims and Cost\n\nquery = (\n    '''\n    select\n        generic_name,\n        sum(total_claim_count) as total_claims,\n        sum(total_drug_cost) as total_claim_cost\n    from `bigquery-public-data.cms_medicare.part_d_prescriber_2014`\n    group by 1\n    order by 2 desc\n    '''\n    #\"limit 100\"\n)\nquery_job = client.query(query)\n\ndrugs = query_job.to_dataframe() #don't forget this call... very useful!\ndrugs.head(10)\n","1935c9db":"#Most Prescribed Drugs per Capita by State\n#Aggregated by Total Claims and Cost\n\nquery = (\n    '''\n    select\n        nppes_provider_state as state,\n        generic_name,\n        sum(total_claim_count) as total_claims,\n        sum(total_drug_cost) as total_claim_cost\n    from `bigquery-public-data.cms_medicare.part_d_prescriber_2014`\n    group by 1,2\n    order by 3 desc\n    '''\n    #\"limit 100\"\n)\nquery_job = client.query(query)\n\nstate_drugs = query_job.to_dataframe() #don't forget this call... very useful!\n\n#Join Prescribed Drugs and Populations\ndrug_pop = pd.merge(state_drugs, pop2015, how = 'left', left_on = 'state', right_on = 'state')\ndrug_pop = drug_pop.dropna(subset = ['population']) #drop rows where population is NaN\ndrug_pop['claims_per_cap'] = drug_pop['total_claims']\/drug_pop['population']\ndrug_pop['cost_per_cap'] = drug_pop['total_claim_cost']\/drug_pop['population']\n\n#Get top drugs for each state\ntop_drugs = drug_pop.groupby(['state'])\ntop_drugs = top_drugs.apply(lambda x: x.sort_values(by = ['total_claims'], ascending = False))\ntop_drugs = top_drugs.reset_index(drop = True)\ntop5_drugs = top_drugs.groupby(['state']).head(5)","356f055b":"#Graph Top Drugs by Number of States the Drug is within the Top 5\nbuckets = top5_drugs['generic_name'].nunique()\ndrug_counts = top5_drugs['generic_name'].count()\n\ndata = [dict(\n        type = 'histogram',\n        x = top5_drugs['generic_name'],\n            )\n       ]\n\nlayout = go.Layout(\n        title_text = 'Counts of Top 5 Drugs in Each State',\n)\n\nfig = dict(data = data, layout = layout)\niplot(fig)","b8ef294d":"#Import Nursing Facility Data\n\nquery = (\n    '''\n    select\n        *\n    from `bigquery-public-data.cms_medicare.nursing_facilities_2014`\n    '''\n    \"limit 100\"\n)\nquery_job = client.query(query)\n\nnursing = query_job.to_dataframe() #don't forget this call... very useful!\nnursing.head()","8bb422e7":"#Facility Clustering\nfrom sklearn.cluster import KMeans\n\nnursing = nursing.drop(columns = ['facility_name', 'street_address', 'city', 'state', 'zip_code', 'male_beneficiaries', 'female_beneficiaries', 'dual_beneficiaries', 'nondual_beneficiaries', 'percent_of_beneficiaries_with_hypertension'])\nnursing.index = nursing['provider_id']\nnursing = nursing.dropna()\n\ncluster = KMeans(\n            n_clusters = 4,\n            init = 'k-means++',\n            n_init = 10,\n            max_iter = 300,\n                )\n\nnursing['cluster'] = cluster.fit_predict(nursing)\n\nfrom sklearn.decomposition import PCA #Principal Component Analysis so I can create scatter plot\npca = PCA(n_components=2).fit(nursing)\npca_2d = pca.transform(nursing)\n","3108aba4":"kmeans = cluster.fit(nursing)\ny_kmeans = cluster.predict(nursing)\nplt.scatter(pca_2d[:,0], pca_2d[:,1], c=y_kmeans, s=50, cmap='viridis')\nplt.show()","721f29c5":"centers = kmeans.cluster_centers_\nplt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5)\nplt.show()","7a0e67fe":"#Regression Analysis\n#Predictive? Correlation?\nfrom sklearn.linear_model import LinearRegression","2b0f0e9d":"This is a notebook I am creating to play around with the Medicare dataset. I am particulary intrigued by prescriptions and insurance claims geographically. I will also undertake some statistical analysis and ML to make some inferences about patient demographics. This is good practice for Google BigQuery, Plotly, & SciKitLearn."}}