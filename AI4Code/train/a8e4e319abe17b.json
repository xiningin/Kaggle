{"cell_type":{"13641bb4":"code","27b4e99a":"code","34594b71":"code","11f626cc":"code","57a71cd2":"code","946407e6":"code","bd593699":"code","9f565fed":"code","150bbfbe":"code","e550f560":"code","abf3002c":"code","bae4a119":"code","9a8368af":"code","049ca772":"markdown","82fa3429":"markdown","54031715":"markdown","2943eafc":"markdown","80928b92":"markdown","4cb9f88c":"markdown","b35faac7":"markdown"},"source":{"13641bb4":"!pip install psycopg2-binary\nimport psycopg2\nimport pandas\nfrom datetime import datetime\nfrom threading import Thread\nfrom time import sleep\npandas.set_option('display.max_colwidth', None)\npandas.set_option('display.notebook_repr_html', True)\n\n# tablet server metrics\ndef stats_thread():\n    t1=datetime.now()\n    for i in range(1000000): \n     tablet_servers=pandas.read_html('http:\/\/yba.pachot.net:7000\/tablet-servers')[0]   \n     rops=tablet_servers.sum(axis = 0, skipna = True)[\"Read ops\/sec\"]\n     wops=tablet_servers.sum(axis = 0, skipna = True)[\"Write ops\/sec\"]\n     print(f\"{datetime.now()} Read ops\/sec={rops:8.2f} Write ops\/sec={wops:8.2f}\")\n     t2=datetime.now()\n     if (t2-t1).total_seconds() > 20 :\n      break\n     sleep(0.5)   \n\n# sql connection\ncon = psycopg2.connect(\"dbname=yugabyte user=yugabyte password=devad host=yba.pachot.net port=5433\")\ncon.autocommit=True\ncur=con.cursor()    \n\ndef sql_loops(sql):\n    sleep(30)  \n    stats=Thread(target = stats_thread) ; stats.start()\n    t1=datetime.now()\n    for i in range(1000000):\n        cur.execute(sql);\n        t2=datetime.now()\n        if (t2-t1).total_seconds() > 20 :\n            break\n    stats.join()\n    print(f\"Executions: {i\/((t2-t1).total_seconds()):8.2f} per second\")\n    return pandas.read_html('http:\/\/yba.pachot.net:7000\/tablet-servers')[0]     ","27b4e99a":"cur.execute(\"\"\"\n    drop table if exists demo;\n    create table if not exists demo (\n        a int,\n        b int\n        ) split into 1 tablets;\n\"\"\");","34594b71":"sql_loops(\"\"\"\n        insert into demo select generate_series from generate_series(1,1);        \n    \"\"\")","11f626cc":"sql_loops(\"\"\"\n        insert into demo select generate_series from generate_series(1,511);        \n    \"\"\")","57a71cd2":"sql_loops(\"\"\"\n        insert into demo select generate_series from generate_series(1,512);        \n    \"\"\")","946407e6":"sql_loops(\"\"\"\n        insert into demo select generate_series from generate_series(1,513);        \n    \"\"\")","bd593699":"sql_loops(\"\"\"\n        insert into demo select generate_series from generate_series(1,1000);        \n    \"\"\")","9f565fed":"cur.execute(\"\"\"\n    drop table if exists demo;\n    create table if not exists demo (\n        a int,\n        b int\n        ) split into 6 tablets;\n\"\"\");","150bbfbe":"sql_loops(\"\"\"\n        insert into demo select generate_series from generate_series(1,1000);        \n    \"\"\")","e550f560":"cur.execute(\"\"\"\n    drop table if exists demo;\n    create table if not exists demo (\n        a serial primary key,\n        b int\n        ) split into 6 tablets;  \n\"\"\");","abf3002c":"sql_loops(\"\"\"\n        insert into demo(b) select generate_series from generate_series(1,1000);        \n    \"\"\")","bae4a119":"cur.execute(\"\"\"\n    create index demob on demo(b);    \n\"\"\");","9a8368af":"sql_loops(\"\"\"\n        insert into demo(b) select 1000+generate_series from generate_series(1,1000);        \n    \"\"\")","049ca772":"# table with 6 tablets\n*6 tablets = 6x write ops*","82fa3429":"## Insert multi-rows\n*1 batch (`--ysql_session_max_batch_size=512`) is open write ops.*","54031715":"# now with a primary key declared\nthis adds read ops to check unique constraint? Not sure because I expected all tablets \ud83e\udd14","2943eafc":"## Insert 1 row\n*1 row is 1 write ops to one tablet*","80928b92":"# A table with no primary key specified, and one tablet:","4cb9f88c":"## Insert 1000 row\n*more than 512 rows is 2 write ops*","b35faac7":"## additional index\n*doubles the writes*"}}