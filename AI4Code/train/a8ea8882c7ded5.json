{"cell_type":{"c01f9011":"code","14bb55a7":"code","0e2944e2":"code","889af0f5":"code","f9fb6413":"code","7861c0dc":"code","ecfed9b4":"code","195d313e":"code","38bd5027":"code","eaa2a2a7":"code","b5f7d435":"markdown","8fd08bdb":"markdown","a76700e4":"markdown","ed2d19a0":"markdown","e54aa8ae":"markdown"},"source":{"c01f9011":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport shutil\nimport tensorflow as tf\nimport pathlib\nimport PIL\nimport time\nimport zipfile\nimport random\nfrom tensorflow.keras.layers import *","14bb55a7":"import warnings\nwarnings.filterwarnings('ignore')","0e2944e2":"MAIN_PATH = \"..\/input\/tire-texture-image-recognition\/Tire Textures\/training_data\"\nTEST_PATH = \"..\/input\/tire-texture-image-recognition\/Tire Textures\/testing_data\"\nCLASSES = os.listdir(MAIN_PATH)\nNUM_CLASSES = len(CLASSES)\nNUM_TEST_IMAGES = len(os.listdir(os.path.join(TEST_PATH,\"cracked\")))+len(os.listdir(os.path.join(TEST_PATH,\"normal\")))\nHEIGHT,WIDTH = 32,32\nBATCH_SIZE = 32\nSPLIT = 0.2","889af0f5":"train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=20,\n    horizontal_flip=True,\n    validation_split=SPLIT)\n'''\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    '''\ntrain_ds = train_datagen.flow_from_directory(\n    MAIN_PATH,\n    target_size = (HEIGHT,WIDTH),\n    batch_size = BATCH_SIZE,\n    subset = \"training\",\n    class_mode = \"categorical\",\n    shuffle = True\n)\n\nval_ds = train_datagen.flow_from_directory(\n    MAIN_PATH,\n    target_size = (HEIGHT,WIDTH),\n    batch_size = BATCH_SIZE,\n    subset = \"validation\",\n    class_mode = \"categorical\",\n    shuffle = True\n)\n\ntest_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255)\ntest_ds = test_datagen.flow_from_directory(\n    TEST_PATH,\n    target_size = (HEIGHT,WIDTH),\n    shuffle = False\n)","f9fb6413":"def create_model():\n    vgg16 = tf.keras.applications.VGG16(include_top=False, weights='imagenet',input_shape=[HEIGHT,WIDTH, 3])\n            \n    x = vgg16.output\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n    x = tf.keras.layers.Dropout(0.3) (x)\n    x = tf.keras.layers.Dense(128) (x)\n    x = tf.keras.layers.LeakyReLU(alpha=0.2) (x)\n    x = tf.keras.layers.GaussianDropout(0.4) (x)\n    outputs = tf.keras.layers.Dense(NUM_CLASSES,activation=\"sigmoid\", dtype='float32')(x)\n        \n    model = tf.keras.Model(vgg16.input, outputs)\n    return model\n\nmodel = create_model()\nmodel.summary()","7861c0dc":"def compile_model(model, lr=0.0001):\n    \n    optimizer = tf.keras.optimizers.RMSprop(lr=1e-4)\n    \n    loss = tf.keras.losses.BinaryCrossentropy()\n        \n    metrics = [\n       tf.keras.metrics.BinaryAccuracy(name='binary_accuracy')\n    ]\n\n    model.compile(optimizer=optimizer, loss=loss, metrics=metrics)\n\n    return model","ecfed9b4":"def create_callbacks():\n    \n    cpk_path = '.\/best_model.h5'\n    \n    checkpoint = tf.keras.callbacks.ModelCheckpoint(\n        filepath=cpk_path,\n        monitor='val_binary_accuracy',\n        mode='max',\n        save_best_only=True,\n        verbose=1,\n    )\n\n    reducelr = tf.keras.callbacks.ReduceLROnPlateau(\n        monitor='val_binary_accuracy',\n        mode='max',\n        factor=0.1,\n        patience=3,\n        verbose=0\n    )\n\n    earlystop = tf.keras.callbacks.EarlyStopping(\n        monitor='val_binary_accuracy',\n        mode='max',\n        patience=10, \n        verbose=1\n    )\n    \n    callbacks = [checkpoint, reducelr, earlystop]         \n    \n    return callbacks","195d313e":"EPOCHS= 60\nVERBOSE =1\n\ntf.keras.backend.clear_session()\n\nwith tf.device('\/device:GPU:0'):\n    \n    model = create_model()\n    model = compile_model(model, lr=0.0001)\n   \n    callbacks = create_callbacks()\n    \n    history = model.fit(train_ds, \n                        epochs=EPOCHS,\n                        callbacks=callbacks,\n                        validation_data = val_ds,\n                        verbose=VERBOSE)","38bd5027":"acc = history.history['binary_accuracy']\nval_acc = history.history['val_binary_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs_range = range(len(history.history['val_loss']))\nplt.figure(figsize=(15, 10))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Binary Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Binary Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Binary Accuracy')\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","eaa2a2a7":"model.evaluate(test_ds)","b5f7d435":"# 3. Metrics Visualization","8fd08bdb":"# 1. Loading and preprocessing data","a76700e4":"# 2. Creating model","ed2d19a0":"# I refered to Note Book 'Traffic Sign Recognition' https:\/\/www.kaggle.com\/shanmukh05\/traffic-sign-recognition to use basic TensorFlow framework. Thank you very much for sharing 'Traffic Sign Recognition' Note Book !","e54aa8ae":"# 4. Test Evalution"}}