{"cell_type":{"39e8ce98":"code","fc8799cb":"code","b325cfb1":"code","d3cfc1e1":"code","b4bcbdb0":"code","eaef7a12":"markdown","db665709":"markdown","3d1cfc4f":"markdown","bca200d0":"markdown","08eba276":"markdown"},"source":{"39e8ce98":"import pandas as pd\nfrom sklearn import preprocessing","fc8799cb":"df = pd.read_csv(\"..\/input\/gender-detection\/Gender_Detection.csv\", sep = r',', skipinitialspace = True, encoding = 'unicode_escape')\n\ndf.head()","b325cfb1":"# Replacing values\ndf = df.replace(\"M\", 1)\ndf = df.replace(\"F\", 0)\n\n# Typecasting\ndf[\"Name\"] = df[\"Name\"].astype(str)\n\n# Initializing Encoder\nnumber = preprocessing.LabelEncoder()\n\n# Add a features with encoder two characters of the end of the name\ndf[\"end2\"] = number.fit_transform(df[\"Name\"].str[-2:])\n\ndf.head()","d3cfc1e1":"from sklearn.model_selection import train_test_split\n\n# Columns used as predictors\nX = df.drop([\"Gender\",\"Name\"], axis = 1).values\n\ny = df[\"Gender\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)","b4bcbdb0":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion = \"entropy\")\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","eaef7a12":"# Name-based Gender Prediction with Random Forest","db665709":"#### Defining X and y and Splitting data","3d1cfc4f":"#### Applying Decision Tree","bca200d0":"#### Add feature two characters of the end of the name","08eba276":"#### Loading and Displaying data"}}