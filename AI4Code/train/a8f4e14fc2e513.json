{"cell_type":{"3c036789":"code","07eb149d":"code","7ecd2240":"code","601c0ecc":"code","ffe1e6b5":"code","40662047":"code","67f48e68":"code","558f541e":"code","3c63007c":"markdown","7e183f72":"markdown","4ab90e1e":"markdown","918b0f8e":"markdown","9779d78a":"markdown","69b10dc9":"markdown"},"source":{"3c036789":"%env URL=postgres:\/\/yugabyte:yugabyte@yb1.pachot.net:5433\/yugabyte\nn_procs = ","07eb149d":"! pip3 install psycopg2 orator orator_cache ","7ecd2240":"import time\n\n\nclass Progress:\n    def __init__(self, target_value=100, max_values=10):\n        self.target_value = target_value\n        self.values_at_time = []\n        self.cur_value = 0\n        self.max_values = max_values\n\n    def set_gauge(self, value):\n        self.values_at_time.append((value, time.time()))\n        self.values_at_time = self.values_at_time[-self.max_values:]\n        self.cur_value = value\n\n        # if decreasing, remove earlier estimates\n        while len(self.values_at_time) > 1 and self.values_at_time[0][0] > value:\n            self.values_at_time.pop(0)\n\n    def incr(self, value = 1):\n        self.cur_value += value\n        self.set_gauge(self.cur_value)\n\n    def left_human(self):\n        sec = self.left_sec()\n        if sec < 0:\n            return f'?'\n        if sec < 60:\n            return f'{sec:.0f} sec'\n        if sec < 3600:\n            return f'{sec\/60:.0f} min'\n        if sec < 86400:\n            return f'{sec\/3600:.1f} hr'\n\n        return f'{sec\/86400:.1f} days'\n\n    def left_sec(self):\n        left_sec = 0.0\n        if len(self.values_at_time) > 0:\n            current_value = self.values_at_time[-1][0]\n            try:\n                left_sec = (self.target_value - current_value) \/ self.speed_per_sec()\n            except ZeroDivisionError:\n                return 0\n            # print('left sec', left_sec)\n\n        return left_sec\n\n    def speed_per_sec(self):\n        if len(self.values_at_time) < 2:\n            return 0\n\n        current_value, current_time = self.values_at_time[-1]\n        first_value, first_time = self.values_at_time[0]\n        # print(f'cur value: {current_value:.7f} last; first_value: {first_value:.7f}')\n        time_passed = (current_time - first_time)\n        if time_passed == 0:\n            return 0\n        # print('time_passed', time_passed)\n        speed_per_sec = (current_value - first_value) \/ time_passed\n        # print('speed per sec', speed_per_sec)\n        return speed_per_sec\n\n    def speed_per_hour(self):\n        return self.speed_per_sec() * 3600\n\n\n\np = Progress(100)\np.set_gauge(7)\ntime.sleep(3)\np.set_gauge(10)\nprint(p.left_sec())  # 90","601c0ecc":"import os\nimport random\nfrom urllib.parse import urlparse\n\nfrom orator import DatabaseManager, Model\nfrom orator_cache import DatabaseManager, Cache\n\ndef init_db(key):\n    result = urlparse(os.environ[key])\n    config = {\n        'pgsql': {\n            'driver': 'pgsql',\n            'host': result.hostname, # random.choice(['10.1.0.2','10.1.0.3','10.1.0.5'])\n            'database': result.path[1:],\n            'user': result.username,\n            'port': result.port,\n            'password': result.password,\n            'prefix': ''\n        }\n    }\n\n    db = DatabaseManager(config)\n    Model.set_connection_resolver(db)\n    db.update('set timezone = 0')\n    return db\n\ndef safe_random_sample(x, n):\n    if len(x) <= n: return x\n    return random.sample(x, n)","ffe1e6b5":"import random\nimport sys\nimport time\nfrom concurrent.futures import ProcessPoolExecutor\n\nfrom faker import Faker\n\nfake = Faker()\n\n\ndb = init_db(\"URL\")","40662047":"\ndb.update('drop table if exists subscriptions')\ndb.update('drop table if exists users')\ndb.update('drop table if exists channels')\ndb.update('drop table if exists kv')","67f48e68":"\ndb.update('''\n    create extension if not exists \"uuid-ossp\";\n\n    create table channels (\n      id uuid primary key default uuid_generate_v1(),\n      name text\n    );\n\n    create table users (\n        id uuid primary key default uuid_generate_v1(),\n        is_admin boolean,\n        name text,\n        created_at timestamptz default current_timestamp\n    );\n\n    create table subscriptions (\n        id uuid primary key default uuid_generate_v1(),\n        user_id uuid not null references users(id),\n        channel_id uuid not null references channels(id),\n        unread_count int not null default 0 check ( unread_count >= 0 ),\n        created_at timestamptz default current_timestamp,\n        updated_at timestamptz default current_timestamp\n    );\n\n    create unique index on subscriptions (user_id, channel_id);\n    create index on subscriptions (user_id, unread_count);     \n\n    create table kv (k text primary key, v int); \n    insert into kv (k, v) values ('count', 0); \n''')\n","558f541e":"\nsubs_count = [1, 16, 3, 12, 36, 40, 233, 184, 5, 1, 24, 98, 94, 1, 8, 1, 493, 8, 4, 2, 27, 249, 1, 56, 1, 5, 110, 1, 9, 1, 16, 1, 2, 1, 47, 2, 342, 273, 135, 3, 6, 2, 17, 2, 4, 497, 2, 5, 1, 28, 3, 103, 1, 53, 8, 19, 154, 7, 49, 3, 542, 5, 46, 1, 7, 16, 58, 4, 2, 7, 17, 161, 22, 3, 5, 5, 519, 5, 9, 1, 76, 72, 890, 3, 5, 1, 1, 2, 6, 1, 1, 1, 4, 178, 2, 8526, 18, 162, 4, 3, 4, 2287, 12, 1, 5, 11, 26, 1, 3, 1, 1, 155, 15, 15, 170, 9, 3, 7, 24, 35, 9, 1, 559, 1, 87, 6, 23, 4, 22, 45, 1, 20, 50, 74, 44, 2, 7, 1, 34, 19, 1, 9, 160, 7, 14, 217, 3, 5, 15, 15, 13, 1, 1, 4, 1, 3, 3, 1, 2, 5, 3, 9, 568, 4, 5, 4, 147, 1, 43, 1, 43, 2, 7, 10, 1, 10, 1, 55, 3, 318, 4, 19, 32, 1, 25, 4, 2, 35, 39, 1, 18, 1, 85, 47, 28, 1, 3, 15, 4, 125, 7, 6, 69, 1, 8, 8, 44, 940, 30, 2, 76, 33, 6, 9, 227, 1, 1, 1, 12, 7, 1, 10, 19, 4, 1, 10, 18, 4, 69, 26, 189, 2, 145, 6, 80, 15, 2, 4270, 6, 1052, 1, 171, 824, 21, 473, 16, 103, 2, 154, 7, 43, 2, 152, 1, 2, 6, 1, 2, 2, 2, 577, 1, 10, 49, 6, 5, 22, 1, 283, 406, 1, 1, 4, 9, 46, 242, 28, 9, 3, 1, 60, 3, 1, 6, 49, 21, 14, 1, 1, 408, 172, 108, 1, 9, 222, 8, 8, 45, 1, 1, 38, 14, 2, 274, 4, 13, 121, 54, 51, 3, 1, 2, 1, 18, 4, 30, 9, 9, 1, 1, 1, 38, 3, 357, 7, 36, 380, 2, 2, 387, 394, 9, 13, 233, 1, 1, 3, 9, 7, 4, 2, 25, 50, 2, 4, 2, 10, 4, 2, 6, 2, 9, 21, 1, 3, 1, 5, 6, 113, 24, 28, 5, 5, 19, 8, 363, 25, 425, 1, 1, 28, 7, 4, 3, 1, 1, 75, 19, 225, 5, 7, 1, 114, 5, 59, 44, 11, 1, 1, 19, 494, 125, 5, 17, 12, 1, 6, 4, 4, 3, 4, 88, 1, 19, 1, 68, 1, 23, 9, 9, 96, 14, 186, 1239, 100, 11, 184, 10, 6, 2, 6, 4, 21, 1, 9, 16, 911, 15, 10, 9, 6, 1, 5, 1, 4, 44, 39, 3, 24, 25, 2, 53, 1, 108, 35, 1, 2, 1, 12, 3, 80, 1, 325, 1, 256, 2, 30, 1, 1, 4, 214, 14, 210, 2, 213, 69, 3, 35, 52, 33, 2, 5, 43, 14, 14, 111, 3, 2, 1, 36, 13, 5, 1, 38, 34, 8, 1, 7, 8, 13, 1, 1, 1, 5, 17, 1, 218, 7, 13, 2, 10, 88, 3, 14, 22, 1, 21, 17, 293, 8, 1, 266, 5, 14, 23, 1, 742, 59, 428, 4, 3, 10, 1, 6, 1, 94, 37, 4, 1, 26, 10, 19, 3, 1, 29, 494, 2, 2, 2, 126, 286, 186, 22, 1, 15, 3, 27, 191, 3, 39, 41, 2, 19, 5, 16, 32, 1, 134, 220, 1, 3, 262, 10, 4, 32, 170, 3, 19, 189, 1, 6, 2, 201, 202, 1454, 2, 2, 16, 6, 4, 1, 20, 3, 7, 57, 1, 28, 10, 8, 4, 107, 2, 6, 24, 3, 322, 119, 20, 52, 7, 7, 1, 2, 129, 1, 3, 1, 113, 2, 3, 70, 7, 37, 6, 668, 2, 1, 1, 1, 263, 1, 2, 16, 12, 20, 1, 2, 8, 8, 10, 168, 2, 23, 2, 1, 17, 2, 8, 30, 2, 7, 115, 16, 3, 10, 16, 1, 181, 117, 1, 75, 1, 785, 8, 1, 3, 1, 11, 605, 7, 1, 6, 34, 3, 12, 118, 2, 2, 80, 56, 3, 5, 11, 9, 129, 5, 13, 47, 3, 7, 20, 3, 2, 10, 12, 78, 217, 6, 223, 77, 7, 44, 283, 2, 163, 118, 21, 439, 2, 2, 1, 4189, 4, 608, 12, 119, 76, 25, 1, 226, 49, 12, 1, 26, 5, 26, 63, 1, 36, 22, 6, 9, 1, 15, 4, 4, 32, 11, 6, 4, 43, 1, 1, 2, 67, 1, 2, 1, 28, 1, 2, 373, 643, 2, 3, 285, 23, 4, 5, 9, 6, 7, 24, 1, 4, 1, 2, 2, 235, 16, 20, 1, 108, 17, 1, 38, 1, 3, 31, 1, 48, 12, 4, 621, 2, 8, 39, 1, 143, 20, 470, 5, 25, 3, 101, 5, 8, 15, 16, 2, 3, 43, 4, 6, 219, 1, 62, 1, 1, 1, 94, 14, 33, 4, 1, 1, 140, 3, 1, 1, 16, 2, 18, 5, 7, 50, 10, 26, 2, 58, 52, 10, 8, 148, 92, 38, 1, 1, 9, 6, 15, 48, 6, 3, 2, 6, 67, 2, 1, 3, 2, 474, 34, 1, 10, 2, 21, 60, 3, 9, 1, 28, 7, 53, 224, 2, 306, 13, 1, 20, 1, 534, 5, 3, 3, 22, 1, 13, 31, 1, 1, 2, 18, 2, 4, 177, 1, 30, 29, 82, 7, 5, 50, 6, 1, 3, 1, 7, 59, 3, 96, 2, 265, 27, 4, 49, 2, 1, 23, 5, 25, 44, 1, 31, 3, 106, 2, 1, 12, 2, 4, 1, 1, 40, 147, 4, 2, 4, 36, 3, 3, 109, 2, 5, 26, 2, 2, 10, 126, 180, 27, 65, 2, 1, 3, 2, 19, 209, 138, 2, 66, 3, 2, 2, 271, 12, 16, 3, 2, 13, 95, 4, 5, 80, 1, 5, 1, 4, 17, 73, 2, 170, 535, 18, 4, 33, 1, 34, 3, 1, 2, 5, 28, 27, 50, 134, 1, 3, 7, 86, 133, 242, 22, 17, 1, 1, 81, 15, 1, 13, 20, 258, 5, 88, 7, 43, 1, 4, 192, 1]\n\nuser_ids = []\nchannel_ids = []\nprint(f'{len(channel_ids)} channels total')\nprint(f'{db.select(\"select count(*) from subscriptions\")[0][0]} subscriptions total')\n\ndef worker(i):\n    p = Progress(10_000_000)\n\n    db = init_db(\"URL\")\n    total_subs = db.select(\"select v from kv where k = 'count'\")[0][0]\n\n    while True:\n        p.set_gauge(total_subs)\n        print(f'{total_subs} subscriptions total ({total_subs \/ 11263109. * 100.:.2f}%) {p.left_human()} {p.speed_per_sec()}\/sec')\n        if total_subs > 10_000_000: break\n\n        t = time.time()\n        n=10\n        for _ in range(n):\n            channel_ids.append(db.select('insert into channels (name) values (%s) returning id', [fake.sentence()[:-1]])[0][0])\n\n            user_id = db.select('insert into users (name) values (%s) returning id', [fake.name()])[0][0]\n\n            channels = safe_random_sample(channel_ids, random.choice(subs_count))\n            for channel_id in channels:\n                db.select('insert into subscriptions (user_id, channel_id, unread_count) values (%s, %s, %s) returning id', [user_id, channel_id, random.uniform(0, 20)])\n\n            total_subs = db.select(\"update kv set v=v+%s where k = 'count' returning v;\", [len(channels)])[0][0]\n        print(f'Took {time.time() - t}s')\n\n\nprint(f'Running in {n_procs} processes')\nwith ProcessPoolExecutor(n_procs) as p:\n    for _ in p.map(worker, range(n_procs)):\n        print('Done')","3c63007c":"### --drop","7e183f72":"## create_data.py","4ab90e1e":"## common.py","918b0f8e":"## --init","9779d78a":"## progress.py","69b10dc9":"### run"}}