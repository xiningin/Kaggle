{"cell_type":{"b03cf074":"code","72191cac":"code","1e66f213":"code","77d3e08a":"code","ca61805e":"code","bb7d0992":"code","ca36f907":"code","21533e5d":"code","1edbe294":"code","6179fc84":"code","7a5df6a9":"code","41109d12":"code","7b3a2922":"code","6eda0730":"code","68ea005d":"code","23087e1a":"code","0ee80286":"markdown","48b17830":"markdown","ae036269":"markdown","d53ff7d2":"markdown","36da5aad":"markdown","e8412a2b":"markdown","44aba5e5":"markdown","60f01be8":"markdown","7a1199dc":"markdown","272dc52f":"markdown","52c53ac4":"markdown","d89834a7":"markdown","47cd9e00":"markdown","52dca6f4":"markdown","9f904a57":"markdown","b1bc4ecc":"markdown","d2916fa3":"markdown","9cb2acf2":"markdown","fb219e39":"markdown","12ec2bfb":"markdown","95d5a430":"markdown"},"source":{"b03cf074":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2, glob, os\nfrom matplotlib import pyplot as plt\nfrom PIL import Image\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72191cac":"# Importing essential datasets\nBASE = '..\/input\/cusersmarilonedriveimagens24814jpeg\/'","1e66f213":"# Reading and understanding a single image\nimg = cv2.imread(\"..\/input\/cusersmarilonedriveimagens24814jpeg\/24814.jpeg\")\nplt.figure(figsize=(10,10))\nplt.imshow(img, cmap = 'twilight'), plt.axis('off'), plt.title('Profitable Memes',fontsize=20),plt.show()","77d3e08a":"# Visualizing the image histogram for first image\ncounts,bins,_ = plt.hist(img.ravel(),density = False, alpha = 0.8, histtype = 'stepfilled', color = '#0303FF', edgecolor = '#44FF80')","ca61805e":"# Understanding multivariate normal for the first image\nx, y = np.random.multivariate_normal([0,200],[[1, 0], [0, 200]],10000).T\nplt.hist2d(x,y,bins=30,cmap=\"Reds\")\ncb = plt.colorbar()\ncb.set_label('Counts in Bin')\nplt.show()","bb7d0992":"# Grayscale histogram\nplt.figure(figsize=(15,8))\nplt.subplot(241), plt.plot(cv2.calcHist([cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)],[0],None,[256], [0,256]), color = 'k'), plt.title('Profitable Memes',fontsize=15)\nplt.subplot(242), plt.plot(cv2.calcHist([img],[0],None,[256],[0,256]),color = 'b'), plt.xlim([0,256])\nplt.subplot(243), plt.plot(cv2.calcHist([img],[0],None,[256],[0,256]),color = 'g'), plt.xlim([0,256])\nplt.subplot(244), plt.plot(cv2.calcHist([img],[0],None,[256],[0,256]),color = 'r'), plt.xlim([0,256])\nplt.show()","ca36f907":"# Grayscale Histogram Equalization\nplt.figure(figsize=(20,10))\nplt.subplot(121),plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2GRAY), cmap = 'gray'), plt.axis('off'), plt.title('Profitable Memes',fontsize=20)\nplt.subplot(122),plt.imshow(cv2.equalizeHist(cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)), cmap = 'gray'), plt.axis('off'), plt.title('Equalized Histogram',fontsize=20)\nplt.show()","21533e5d":"# 3-channel Histogram Equalization\nchannels = cv2.split(img)\neq_channels = []\nfor ch, color in zip(channels, ['B', 'G', 'R']): \n    eq_channels.append(cv2.equalizeHist(ch))\nplt.figure(figsize=(20,10))\nplt.subplot(121),plt.imshow(img, cmap = 'gray'), plt.axis('off'), plt.title('Profitable Memes',fontsize=20)\nplt.subplot(122),plt.imshow(cv2.cvtColor(cv2.merge(eq_channels),cv2.COLOR_BGR2RGB), cmap = 'gray'), plt.axis('off'), plt.title('Equalized Histogram',fontsize=20)\nplt.show()","1edbe294":"# Averaging the images\nplt.figure(figsize=(20,10))\nplt.subplot(121),plt.imshow(cv2.blur(img,(40,40)), cmap = 'hsv'), plt.axis('off'), plt.title('I Can Not read Memes MetaMeme',fontsize=30)\nplt.show()","6179fc84":"# Making borders for the images\nplt.figure(figsize=(20,10))\nplt.subplot(231), plt.imshow(img, cmap = 'gray'), plt.axis('off'), plt.title('Grey',fontsize=25)\nplt.subplot(232), plt.imshow(cv2.copyMakeBorder(img,10,10,10,10,cv2.BORDER_REPLICATE), cmap = 'Blues'), plt.axis('off'), plt.title('Replicate',fontsize=25)\nplt.subplot(233), plt.imshow(cv2.copyMakeBorder(img,10,10,10,10,cv2.BORDER_REFLECT), cmap = 'gray'), plt.axis('off'), plt.title('Reflect',fontsize=25)\nplt.subplot(234), plt.imshow(cv2.copyMakeBorder(img,10,10,10,10,cv2.BORDER_REFLECT_101), cmap = 'Blues'), plt.axis('off'), plt.title('Reflect 101',fontsize=25)\nplt.subplot(235), plt.imshow(cv2.copyMakeBorder(img,10,10,10,10,cv2.BORDER_WRAP), cmap = 'gray'), plt.axis('off'), plt.title('Wrap',fontsize=25)\nplt.subplot(236), plt.imshow(cv2.copyMakeBorder(img,10,10,10,10,cv2.BORDER_CONSTANT,value=(120,80,250)), cmap = 'Blues'), plt.axis('off'), plt.title('Constant',fontsize=25)\nplt.subplots_adjust(wspace=0.05, hspace=-0.3)\nplt.show()","7a5df6a9":"# Mask operations for the images\nkernel = cv2.getGaussianKernel(15, 2.0)\nkernel_2D = kernel @ kernel.transpose()\nblurred_img = cv2.filter2D(img, -1, kernel_2D)\nplt.imshow(blurred_img, cmap = 'Blues'), plt.axis('off'), plt.title('Gaussian masking',fontsize=20), plt.show()","41109d12":"# Uniform addition of pixel values to images\nimgx = (img * 0.5 + (96, 128, 160)).clip(0,255)\nplt.imshow(imgx.astype(np.uint8), cmap = 'Blues'), plt.axis('off'), plt.title('Uniform addition',fontsize=20), plt.show()","7b3a2922":"# Mask creation by drawing in image\nmask_01 = np.zeros_like(img[0:300,0:400])\ncv2.rectangle(mask_01, (50, 50), (100, 200), (255, 255, 255), thickness=-1)\ncv2.circle(mask_01, (200, 100), 50, (255, 255, 255), thickness=-1)\ncv2.fillConvexPoly(mask_01, np.array([[330, 50], [300, 200], [360, 150]]), (255, 255, 255))\nmask_01x = cv2.resize(mask_01,img.shape[1::-1])\nplt.imshow(mask_01), plt.axis('off'), plt.title('Sample Mask',fontsize=20), plt.show()","6eda0730":"# Bitwise and with the mask created\nplt.figure(figsize=(10,10))\nplt.imshow(cv2.bitwise_and(img,mask_01x)), plt.axis('off'), plt.title('Bitwise masking',fontsize=20), plt.show()","68ea005d":"# Reading a new image for working with image channels\nimg = cv2.imread(BASE+'24814.jpeg')\nprint(img.shape)\n\n# Splitting the channels\nplt.figure(figsize=(15,15))\nb,g,r = cv2.split(img)\nmask_03 = np.zeros(img.shape[:2], dtype = \"uint8\")\nimgx = cv2.merge((mask_03,g,r))\nplt.subplot(221), plt.imshow(img[:,:,0], cmap= 'gray'), plt.axis('off'), plt.title('Red Channel',fontsize=20)\nplt.subplot(222), plt.imshow(img[:,:,1], cmap= 'gray'), plt.axis('off'), plt.title('Green Channel',fontsize=20) \nplt.subplot(223), plt.imshow(img[:,:,2], cmap= 'gray'), plt.axis('off'), plt.title('Blue Channel',fontsize=20) \nplt.subplot(224), plt.imshow(imgx), plt.axis('off'), plt.title('Channels Merged',fontsize=20)\nplt.subplots_adjust(wspace=0, hspace=-0.25)\nplt.show()","23087e1a":"# Crop and Resize Images\nheight, width = img.shape[:2]\nquarter_height, quarter_width = height \/ 4, width \/ 4\nT = np.float32([[1, 0, quarter_width], [0, 1, quarter_height]]) \n\nplt.figure(figsize=(20,15))\nplt.subplot(231), plt.imshow(img), plt.axis('off'), plt.title('Original Image',fontsize=20)\nplt.subplot(232), plt.imshow(cv2.resize(img,(200,200))), plt.axis('off'), plt.title('Resized Image',fontsize=20)\nplt.subplot(234), plt.imshow(cv2.warpAffine(img, T, (width,height)) ), plt.axis('off'), plt.title('Translated Image',fontsize=20)\nplt.subplot(235), plt.imshow(cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)), plt.axis('off'), plt.title('Rotated Image',fontsize=20)\nplt.subplot(236), plt.imshow(np.flip(img,(0, 1))), plt.axis('off'), plt.title('Flipped Image',fontsize=20)","0ee80286":"#NLP (Natural Language Processing) Ensemble : BERT + ERNIE\n\n\"BERT: Bidirectional Encoder Representations from Transformers is a Transformer-based machine learning technique for natural language processing pre-training developed by Google.\"\nhttps:\/\/en.wikipedia.org\/wiki\/BERT_(language_model)\n\n![](https:\/\/pics.me.me\/bert-ernie-bernie-4711762.png)me.me","48b17830":"#That Meme speaks for itself. Specially to my \"whatever code\"\n\n![](https:\/\/i.pinimg.com\/736x\/53\/c3\/11\/53c311e4188074cd5b3c3e53287e56ef.jpg)in.pinterest.com","ae036269":"#Disaster Girl Meme, more than 573,000 at auction.\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRRtL7bxYbB1mDWmp3WVnEewGSWsQpdEIjl9A&usqp=CAU)tiktok.com","d53ff7d2":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcR32G3Grc4szX0U_hLEfbKoIWtssHQ8S6el39ApWIsc011wkIoQtxnZKmJWhicVP_oHLXs&usqp=CAU)memecrunch.com","36da5aad":"#MEME Phenomenon\n\n\"Within the meme phenomenon, certain photos and video clips have risen to international comedy fame after having been adapted and re-adapted over and over on the internet to be shared online for amusement. Many of these photos which popular memes are based on display regular people whose portraits struck a nerve with internet audiences and who were turned into characters for the sake of the respective memes \u2013 like \"Bad Luck Brian\" (Ohio resident Kyle Craven) and \"Overly Attached Girlfriend\" (Laina Morris from Denton, Texas). The most profitable meme NFT to date is \u201cDisaster Girl,\u201d which brought in more than 573,000 at auction.\"\n\nhttps:\/\/www.statista.com\/chart\/24814\/meme-nft-auction-prices\/?utm_source=Statista+Newsletters&utm_campaign=ef0d341d89-All_InfographTicker_daily_COM_PM_KW17_2021_We_COPY&utm_medium=email&utm_term=0_662f7ed75e-ef0d341d89-315801217","e8412a2b":"#Success Kid\n\n![](https:\/\/miro.medium.com\/max\/875\/1*7hjPyLsKGUD3YYkn6l9S9w.jpeg)https:\/\/medium.com\/@EvaKhuu\/original-success-kid-meme-2fa819e5dc39","44aba5e5":"![](https:\/\/smartclick.ai\/wp-content\/uploads\/2020\/02\/meme.jpg)smartclick.ai","60f01be8":"#Geese fly south. Where do Kagglers fly? Probably to another warmer Competition.\n\n![](https:\/\/img.ifunny.co\/images\/00ce37b539bfd240df256d089ac074899b722ed75c38f14328dda67d354e3033_3.jpg)ifunny.co","7a1199dc":"#Tensorflow or Pytorch? Pytorch or Tensorflow? \n\n![](https:\/\/images-cdn.9gag.com\/photo\/a0Qv3Bz_700b.jpg)9gag.com","272dc52f":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT0Gjpw2GQvgBbwxE9ffDDZF0tbymL6ePXevQ&usqp=CAU)code-love.com","52c53ac4":"#My Deep Learning Skills\n\n![](https:\/\/pics.me.me\/deep-learning-what-society-thinks-i-do-what-my-friends-16494539.png)medium.com","d89834a7":"#Look at the signature. It's almost (almost) Prata.\n\n![](https:\/\/pbs.twimg.com\/media\/D0WnXarU0AA8BQz.jpg)twitter.com\nMumbai Machine Learning Group\n","47cd9e00":"#No High Scoring Notebooks in Wakanda.\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSHLAX187NAMEprkzJJ89iOYPfKdKw1WtMdB1ZA6p3Uq7yCosWtWneLx-J-Hp9YaOLo_bc&usqp=CAU)kaggle.com","52dca6f4":"#Overly Attached Girlfriend.\n\n![](https:\/\/brobible.com\/wp-content\/uploads\/2021\/04\/overly-attached-nft.jpeg?w=650)brobible.com","9f904a57":"#Elon Musk colonizing Jupiter. Thanks God My Notebooks are on Kaggle!\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQ00DkTuqnG6_y1x8b3FGh79IlTTxfichU_Eg&usqp=CAU)br.pinterest.com","b1bc4ecc":"#Bad Luck Brian\" (Ohio resident Kyle Craven).\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTfx57bMj_7xHqwzTWJAcTU0C9JkjgGs1mhOQ&usqp=CAU)museudememes.com.br","d2916fa3":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT8pfsTuAvaT_B0c79WGpWXMxHxkiHf2q1NbaK0ODugmKBDDZTPubl816CKytzhdjmLJ1c&usqp=CAU)twitter.com","9cb2acf2":"#Overly Attached Gollum and his Precious Medals.\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQHWTZ3FTXRavQLrbr0NtManf05ZJb4oPpCTw&usqp=CAU)memegenerator.net","fb219e39":"#Nyan Cat Beta testing version 2 or Me testing other kagglers code.\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQy1_Be6b3J95yYutmgp8TFvSQfvCJcmP364A&usqp=CAU)pinterest.com","12ec2bfb":"#My own accuracy:))\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQqcA08e28CAuemReF9hqSTklSaNTWLB2FoC6E-343OLfekCTs36wkBmmREajxFNis1okM&usqp=CAU)imgflip.com","95d5a430":"#Nyan Dog Weird\n\n![](https:\/\/media1.tenor.com\/images\/c46f25b056db7f2c4268c0eae2edfb54\/tenor.gif?itemid=12144240)https:\/\/tenor.com\/search\/nyan-dog-gifs\n\nhttps:\/\/tenor.com\/view\/nyan-dog-weird-dog-ass-rainbow-gif-12144240"}}