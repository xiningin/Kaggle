{"cell_type":{"b53fd5d0":"code","2cced611":"code","55e4ec4c":"code","08a15874":"code","b105a38a":"code","947d15cc":"code","31969020":"code","757aef19":"code","cefe5fd7":"code","4ea040fa":"code","f544638a":"code","1bc074b2":"code","85e657d8":"code","30e02706":"code","cac31a3c":"code","4d1bdf27":"code","96f52abf":"code","851624ae":"code","673b69be":"code","99afde93":"code","bc8e266d":"code","95534ecf":"code","08889cad":"code","40b141e5":"code","c86a9b36":"code","9a658319":"code","d3c0bd4f":"code","2796de02":"code","c18c76f7":"code","97ce8a46":"markdown","a909e01d":"markdown"},"source":{"b53fd5d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cced611":"import seaborn as sns\nimport matplotlib.pyplot as plt\n#import matplotlib as plt","55e4ec4c":"with open('\/kaggle\/input\/hashcode-drone-delivery\/busy_day.in') as file:\n    myfile=file.read().splitlines()\n","08a15874":"myfile","b105a38a":"index=0","947d15cc":"simulation_parameters=myfile[index].split(\" \")","31969020":"simulation_parameters","757aef19":"print(\"row of grid, column of grid , drones, turns, max load in units(u)\", myfile[0], \n      \"\\n differnet type of products\",myfile[1],\n      \"\\n product types weight\",myfile[2],\n      \"\\n warhouses\", myfile[3],\n      \"\\n First warehouse location at first warehouse (row, column):\",myfile[4],\n      '\\n Inventory of products:',myfile[5],\n      \"\\n second warehouse location at first warehouse (row, column):\",myfile[6],\n      '\\n Inventory of products:',myfile[7],\n      '\\n last warehouse location (row, column)  :',myfile[22],\n      '\\n Inventory of products at last ware house:',myfile[23],\n      '\\n Number of orders:',myfile[24],\n      '\\n First order to be delivery at:',myfile[25],\n      '\\n Number of items in order:',myfile[26],\n      '\\n Items of product types:',myfile[27]   )  ","cefe5fd7":"s=len(myfile[23])\ns","4ea040fa":"warhouse_locs=myfile[4:24:2]","f544638a":"warhouse_row=[warhouse_row.split()[0] for warhouse_row in warhouse_locs]\nwarhouse_col=[warhouse_col.split()[1] for warhouse_col in warhouse_locs]\nwarehouse_df=pd.DataFrame({\"warhouse_row\":warhouse_row,\"warhouse_col\":warhouse_col}).astype(np.uint16)\nwarehouse_df\n\n","1bc074b2":"sns.relplot( y=\"warhouse_row\", x=\"warhouse_col\" ,data=warehouse_df)","85e657d8":"product_cols=[f'warehouse_{i}' for i in range(10)]\nproducts=[product.split() for product in myfile[5:24:2]]\nproduct_df=pd.DataFrame(products).T\nproduct_df.columns=product_cols\nproduct_df","30e02706":"#for i in order_df:\n #   if i > 0:\n  #      print(i)","cac31a3c":"sub_orders=[f'prod_{i}' for  i in range(19)]\norder_df=pd.DataFrame([orders.split() for orders in myfile[27:3775:3] ]).fillna(0).astype(np.uint16)\n                                                                                         \n                                                                                         #(\"int\")\norder_df.columns=sub_orders\norder_df[\"order_x\"]=[orders.split()[0] for orders in myfile[25:3775:3]]\norder_df[\"order_y\"]=[orders.split()[1] for orders in myfile[25:3775:3]]\norder_df[\"order_items\"]= myfile[26:3775:3]\n\norder_df=order_df.astype(\"int\")\norder_df\n","4d1bdf27":"order_df.dtypes","96f52abf":"import seaborn as sns\n\nfig=plt.figure(figsize=(10,15))\nsns.scatterplot(x=\"order_x\", y=\"order_y\", data=order_df,s=30, alpha=0.5)\n\n#plt.scatter(, x=, y=)","851624ae":"x= range(400)\ny = range(400,600)\nfig = plt.figure(figsize=(20,15))\nax1 = fig.add_subplot(222)\n\nax1.scatter(warehouse_df['warhouse_row'], warehouse_df['warhouse_col'], s=60, c='b', marker=\"o\", label='ware_house')\nax1.scatter(order_df[\"order_x\"], order_df['order_y'], s=20, c='r', marker=\"o\", label='orders')\nplt.legend(loc='upper left');\nplt.show()","673b69be":"order_df1=order_df.copy()","99afde93":"order_id=np.arange(1250)\nour_orders=order_df1.iloc[:,0:19]\n\nour_orders[\"order_id\"]=order_id\nour_orders","bc8e266d":"our_orders =our_orders.set_index(\"order_id\").stack()\n","95534ecf":"our_orders\n","08889cad":"\nour_orders=pd.DataFrame(our_orders)\nour_orders.columns=[\"product_id\"]","40b141e5":"our_orders.drop(our_orders.loc[our_orders['product_id']==0].index, inplace=True)\n\n","c86a9b36":"our_orders","9a658319":"product_id=np.arange(400)\nproduct_df[\"product_id\"]=product_id\n","d3c0bd4f":"\nproduct_df1 =product_df.set_index(\"product_id\").stack()\nproduct_df1=pd.DataFrame(product_df1)\nproduct_df1.columns=[\"ware_house\"]\nproduct_df1=product_df1.astype(\"int\")\n\nproduct_df1.drop(product_df1.loc[product_df1[\"ware_house\"]==0].index, inplace=True)\n\n\n\n","2796de02":"product_df1","c18c76f7":"our_orders","97ce8a46":"**","a909e01d":"# warhouses locations "}}