{"cell_type":{"cf9e2c69":"code","249c3059":"code","581e2d8d":"code","66b3682a":"code","357463d6":"code","729aa823":"code","a5a0c5e7":"code","15e580ac":"code","63b01bd8":"code","8bd551b2":"code","c1f2c3f3":"code","5d401d92":"code","a4ce0031":"code","65abc4e7":"code","26e35920":"code","0c3f7094":"code","a54cd7fc":"code","fda561d9":"code","1b409fdd":"code","8857d07d":"code","b2b80ba5":"code","7ee44dc2":"code","9c734f78":"code","12ff3100":"code","17ff782b":"code","fae3c377":"code","86da5fe3":"code","8d1aed66":"code","b7744fa8":"code","29112e36":"code","dc81acfb":"code","c5cacd08":"code","6040f888":"code","894e9e61":"code","cb5f4e98":"code","e94df878":"code","f0381d88":"code","972dea1c":"code","16b58499":"code","4d269b84":"code","4bceb0a2":"code","243200c6":"code","7fe77b71":"code","8027255f":"code","99db283e":"code","bc9422dc":"code","eda57bb3":"code","9a7967a8":"code","8fc5e0de":"code","86dcedb4":"code","4d7f6bb7":"code","846cac01":"code","8fcb647c":"code","163d8ccc":"code","c3bb7dbd":"code","1af727af":"code","7a0b6a3e":"code","e1d57a8d":"code","2bcef9de":"code","9c42b76b":"code","f42e4b48":"code","2cebb6ba":"code","84ed697f":"code","a342d3bb":"code","1b35baed":"code","7005c51b":"code","3f8d434c":"code","0b9893a9":"code","70ee7ac1":"code","f63645f9":"code","361cba2c":"code","b54fc4af":"code","f5eebe2f":"code","660700a7":"markdown","2eb3fe47":"markdown","c9f8752c":"markdown","29ec5615":"markdown","849b5e01":"markdown","12d7fc1f":"markdown","1261c654":"markdown","1c4aa0b8":"markdown","9e9560c5":"markdown","d0cadc92":"markdown","4e0372ac":"markdown","0f08c6f7":"markdown","9b5b256b":"markdown","f8d30dae":"markdown","0c0baac6":"markdown","f60d8702":"markdown","e26a4c87":"markdown","ad856fa7":"markdown","eead0458":"markdown","1dd47838":"markdown","46178d30":"markdown","41186de2":"markdown","957574c7":"markdown","2483a1d1":"markdown"},"source":{"cf9e2c69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","249c3059":"import pandas as pd\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","581e2d8d":"train.head()","66b3682a":"train.tail()","357463d6":"train.shape","729aa823":"test.shape","a5a0c5e7":"train.info()","15e580ac":"test.info()","63b01bd8":"train.isnull().sum()","8bd551b2":"test.isnull().sum()","c1f2c3f3":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots","5d401d92":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))\n    print(df)","a4ce0031":"bar_chart('Sex')","65abc4e7":"bar_chart('Pclass')","26e35920":"bar_chart('SibSp')","0c3f7094":"bar_chart('Parch')","a54cd7fc":"bar_chart('Embarked')","fda561d9":"train.head()","1b409fdd":"from IPython.display import Image\nImage(url= \"https:\/\/static1.squarespace.com\/static\/5006453fe4b09ef2252ba068\/t\/5090b249e4b047ba54dfd258\/1351660113175\/TItanic-Survival-Infographic.jpg?format=1500w\")","8857d07d":"train.head(10)","b2b80ba5":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","7ee44dc2":"train['Title'].value_counts()","9c734f78":"test['Title'].value_counts()","12ff3100":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","17ff782b":"train.head()","fae3c377":"bar_chart('Title')","86da5fe3":"# delete unnecessary feature from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","8d1aed66":"train.head()","b7744fa8":"test.head()","29112e36":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","dc81acfb":"train.head()","c5cacd08":"bar_chart('Sex')","6040f888":"train.head(100)","894e9e61":"# fill missing age with mean age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"mean\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"mean\"), inplace=True)","cb5f4e98":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"mean\")","e94df878":"facet = sns.FacetGrid(train, hue = 'Survived', aspect = 4)\nfacet.map(sns.kdeplot, 'Age', shade=True)\nfacet.set(xlim = (0, train['Age'].max()))\nfacet.add_legend()\n\nplt.show()","f0381d88":"facet = sns.FacetGrid(train, hue = 'Survived', aspect = 4)\nfacet.map(sns.kdeplot, 'Age', shade = True)\nfacet.set(xlim = (0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 40)","972dea1c":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","16b58499":"train.head(30)","4d269b84":"test.head(30)","4bceb0a2":"bar_chart('Age')","243200c6":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))\n","7fe77b71":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","8027255f":"train.head()","99db283e":"embarked_mapping = {'S': 0, 'C': 1, 'Q': 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","bc9422dc":"train.head(100)","eda57bb3":"# fill missing Fare with mean fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"mean\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"mean\"), inplace=True)\ntrain.head(50)","9a7967a8":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","8fc5e0de":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","86dcedb4":"train.head()","4d7f6bb7":"train.Cabin.value_counts()","846cac01":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","8fcb647c":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","163d8ccc":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\n# why use a minority ? Feature Scaling : To fit the range of numbers\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","c3bb7dbd":"#fill missing Fare with mean fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"mean\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"mean\"), inplace=True)","1af727af":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","7a0b6a3e":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","e1d57a8d":"train['FamilySize'].value_counts()","2bcef9de":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","9c42b76b":"train.head()","f42e4b48":"test.head()","2cebb6ba":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","84ed697f":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","a342d3bb":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","1b35baed":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","7005c51b":"clf = KNeighborsClassifier(n_neighbors= 13)\nscore = cross_val_score(clf, train_data, target, cv = k_fold, n_jobs=1, scoring = 'accuracy')\nprint(score)\nround(np.mean(score)*100, 2)","3f8d434c":"clf = DecisionTreeClassifier()\nscore = cross_val_score(clf, train_data, target, cv = k_fold, n_jobs=1, scoring = 'accuracy')\nprint(score)\nround(np.mean(score)*100, 2)","0b9893a9":"clf = RandomForestClassifier(n_estimators=13)\nscore = cross_val_score(clf, train_data, target, cv = k_fold, n_jobs=1, scoring = 'accuracy')\nprint(score)\nround(np.mean(score)*100, 2)","70ee7ac1":"clf = GaussianNB()\nscore = cross_val_score(clf, train_data, target, cv = k_fold, n_jobs=1, scoring = 'accuracy')\nprint(score)\nround(np.mean(score)*100, 2)","f63645f9":"clf = SVC()\nscore = cross_val_score(clf, train_data, target, cv = k_fold, n_jobs=1, scoring = 'accuracy')\nprint(score)\nround(np.mean(score)*100, 2)","361cba2c":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis = 1).copy()\nprediction = clf.predict(test_data)","b54fc4af":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","f5eebe2f":"submission = pd.read_csv('submission.csv')\nsubmission.head()","660700a7":"\n# **Bar Chart for Categorical Features**\n* Pclass\n* Sex\n* SibSp ( # of siblings and spouse)\n* Parch ( # of parents and children)\n* Embarked\n* Cabin","2eb3fe47":"\nmore than 50% of 1st class are from S embark\nmore than 50% of 2nd class are from S embark\nmore than 50% of 3rd class are from S embark\n\n**fill out missing embark with S embark**","c9f8752c":"# **FamilySize**","29ec5615":"Probability of survival : female > male","849b5e01":"# **how titanic sank?**\nsank from the bow of the ship where third class rooms located\nconclusion, Pclass is key feature for classifier","12d7fc1f":"Probability of survival : Pclass 1 > Pclass 2 > Pclass 3","1261c654":"Probability of survival : with more 2 siblings or spouse > with out them ","1c4aa0b8":"Probability of survival : S(33.7%) < Q(39.0%) < C(55.4%)","9e9560c5":"**Sex**\n\nmale : 0 female : 1","d0cadc92":"# **Cabin**","4e0372ac":"# **Collecting the data**","0f08c6f7":"# **Name**","9b5b256b":"# **Fare**","f8d30dae":"# **Exploratory data analysis**\n\nPrinting first 5 rows of the train dataset.","0c0baac6":"# **References**\n* https:\/\/github.com\/minsuk-heo\/kaggle-titanic\/blob\/master\/titanic-solution.ipynb","f60d8702":"**Embarked**\n\n**filling missing values**","e26a4c87":"# **Binning**\nBinning\/Converting Numerical Age to Categorical Variable\n\nfeature vector map:\nchild: 0\nyoung: 1\nadult: 2\nmid-age: 3\nsenior: 4\n\n","ad856fa7":"# **Cross Validation (K-fold)**","eead0458":"\n# **Data Dictionary**\n* Survived: 0 = No, 1 = Yes\n* pclass: Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\n* sibsp: # of siblings \/ spouses aboard the Titanic\n* parch: # of parents \/ children aboard the Titanic\n* ticket: Ticket number\n* cabin: Cabin number\n* embarked: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton\n\n**Total rows and columns**\nWe can see that there are 891 rows and 12 columns in our training dataset.","1dd47838":"# **Feature engineering**\nFeature engineering is the process of using domain knowledge of the data\nto create features (feature vectors) that make machine learning algorithms work.\n\nfeature vector is an n-dimensional vector of numerical features that represent some object.\nMany algorithms in machine learning require a numerical representation of objects,\nsince such representations facilitate processing and statistical analysis.","46178d30":"# **Modelling**","41186de2":"**Title map**\n\nMr : 0\nMiss : 1\nMrs: 2\nOthers: 3","957574c7":"Probability of survival : with more than 2 parents or children > alone[](http:\/\/)","2483a1d1":"**Age**\n\nthere is missing Age.values"}}