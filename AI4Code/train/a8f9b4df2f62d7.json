{"cell_type":{"b6425364":"code","72eba2ae":"code","2e646f70":"code","05457ecf":"code","fc5eb43a":"code","e345ca8e":"code","a368b77e":"code","9f983716":"code","7a76eaa3":"code","67217d65":"code","3426b259":"code","c6156003":"code","8b58a433":"markdown","176eaa63":"markdown","5ebaff8c":"markdown","aed05684":"markdown"},"source":{"b6425364":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72eba2ae":"df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_t=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","2e646f70":"df['Embarked']=df['Embarked'].astype(str)\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder,StandardScaler\nle=LabelEncoder()\nfor col in df[['Sex','Embarked']]:\n    df[col]=le.fit_transform(df[col])\ndf['Age']=df['Age'].replace(np.nan,df['Age'].median())","05457ecf":"enc_1=OneHotEncoder()\ndf_ohe=enc_1.fit_transform(df[['Pclass','Embarked']]).toarray()\npd.DataFrame(df_ohe)\ndf=pd.concat([df,pd.DataFrame(df_ohe)],axis=1)","fc5eb43a":"X=df.drop([\"Survived\",\"Name\",\"Cabin\",\"Ticket\",\"PassengerId\",'Pclass','Embarked'],axis=1)\ny=df[\"Survived\"]\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X, y, random_state=0)","e345ca8e":"df_t['Embarked']=df_t['Embarked'].astype(str)\nfor col in df_t[['Sex','Embarked']]:\n    df_t[col]=le.fit_transform(df_t[col])\ndf_t['Age']=df_t['Age'].replace(np.nan,df['Age'].median())","a368b77e":"df_t_ohe=enc_1.transform(df_t[['Pclass','Embarked']]).toarray()\ndf_t=pd.concat([df_t,pd.DataFrame(df_t_ohe)],axis=1)\nX_t=df_t.drop([\"Name\",\"Cabin\",\"Ticket\",\"PassengerId\",'Pclass','Embarked'],axis=1)","9f983716":"Fare_median=df['Fare'].median()\nX_t['Fare']= X_t['Fare'].fillna(Fare_median)","7a76eaa3":"from sklearn.ensemble import GradientBoostingClassifier\nclf_2 = GradientBoostingClassifier(random_state = 0)","67217d65":"clf_2.fit(X_train,y_train)\nclf_2.score(X_test,y_test)","3426b259":"predictions=clf_2.predict(X_t)","c6156003":"output = pd.DataFrame({'PassengerId': df_t['PassengerId'], 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)","8b58a433":"for testing the best para\nfrom sklearn.model_selection import GridSearchCV\nclf=LogisticRegression(solver='liblinear')\ngrid_values = {'C':[0.01,0.1, 1, 10] ,'penalty':['l1','l2']}\ngrid_clf_acc = GridSearchCV(clf, param_grid = grid_values, cv=5,scoring = 'accuracy')\ngrid_clf_acc.fit(X_train, y_train)\nprint('Grid best parameter (max. accuracy):' , grid_clf_acc.best_params_)\nprint('Grid best score (accuracy):' , grid_clf_acc.best_score_)\ngrid_clf_acc.cv_results_","176eaa63":"clf=LogisticRegression(C=0.1,penalty='l2',solver='liblinear')\nclf.fit(X_train,y_train)\nclf.score(X_test,y_test)","5ebaff8c":"from sklearn.linear_model import LogisticRegression","aed05684":"from sklearn.model_selection import GridSearchCV\ngrid_values = {'learning_rate': [0.1,0.01,0.05] ,'max_depth':[2,3,4]}\ngrid_clf_acc = GridSearchCV(clf_2, param_grid = grid_values, cv=3,scoring = 'accuracy')\ngrid_clf_acc.fit(X_train, y_train)\nprint('Grid best parameter (max. accuracy):' , grid_clf_acc.best_params_)\nprint('Grid best score (accuracy):' , grid_clf_acc.best_score_)\ngrid_clf_acc.cv_results_"}}