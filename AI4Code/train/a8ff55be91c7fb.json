{"cell_type":{"da88c9be":"code","b93b6fef":"code","e71f5b7b":"code","5641db5a":"code","a58dba70":"code","5e23ae97":"code","e683707d":"code","d2121f86":"code","3f7513ef":"code","1d4c3baf":"code","5f3b2ac1":"code","60fd81c5":"code","15a3640e":"code","a07ab614":"code","8f18a108":"code","40a9c8d9":"code","30d33f2d":"code","428e2d71":"code","d6bb55fd":"code","44f7bb1d":"code","d3fd026f":"code","f15b7e3f":"code","b9be6e34":"code","2c3ce69d":"code","053b04ab":"code","6a2043dc":"code","f7a3de14":"code","8e21413b":"code","9f5f2369":"code","e9184d4f":"markdown","a2e0adee":"markdown"},"source":{"da88c9be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b93b6fef":"permutations = pd.read_csv('\/kaggle\/input\/santa-2021\/permutations.csv')\ndistance_matrix = pd.read_csv('\/kaggle\/input\/santa-2021\/distance_matrix.csv')\nwildcards = pd.read_csv('\/kaggle\/input\/santa-2021\/wildcards.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/santa-2021\/sample_submission.csv')","e71f5b7b":"permutations","5641db5a":"distance_matrix","a58dba70":"distance_matrix.shape","5e23ae97":"wildcards","e683707d":"sample_submission","d2121f86":"print('The number of elements in the schedule: {}.'.format(len(sample_submission.iloc[0 , 0])))\nprint('The number of elements in the schedule: {}.'.format(len(sample_submission.iloc[1 , 0])))\nprint('The number of elements in the schedule: {}.'.format(len(sample_submission.iloc[2 , 0])))","3f7513ef":"import itertools\n\nprint(\"Elements' permutations: {}\\nNumber of permutations: {}\\n\"\n      .format(list(itertools.permutations([1, 2, 3])), len(list(itertools.permutations([1, 2, 3])))))\nprint(\"Elements' permutations: {}\\nNumber of permutations: {}\\n\"\n      .format(list(itertools.permutations([1, 2, 3], 2)), len(list(itertools.permutations([1, 2, 3], 2)))))\nprint(\"Elements' permutations: {}\\nNumber of permutations: {}\"\n      .format(list(itertools.permutations([1, 2, 3], 1)), len(list(itertools.permutations([1, 2, 3], 1)))))","1d4c3baf":"comm =permutations[permutations.Permutation.str[:2] =='\ud83c\udf85\ud83e\udd36']\ncomm","5f3b2ac1":"other =permutations[permutations.Permutation.str[:2] !='\ud83c\udf85\ud83e\udd36'].reset_index(drop=True)\nother","60fd81c5":"a=comm.copy()\nb=comm.copy()\nc=comm.copy()\nfor i in range(len(other)):\n    if i%3 ==0:\n        a = a.append(other.iloc[i],ignore_index=True)\n    if i%3 ==1:\n        b = b.append(other.iloc[i],ignore_index=True)\n    if i%3 ==2:\n        c = c.append(other.iloc[i],ignore_index=True)\n        \naa =str()\nbb =str()\ncc =str()\nfor i in a.Permutation.values:\n    aa +=i\n\nfor i in b.Permutation.values:\n    bb +=i\nfor i in c.Permutation.values:\n    cc +=i\n    \n    \nsample_submission.loc[0,'schedule'] = aa\nsample_submission.loc[1,'schedule'] = bb\nsample_submission.loc[2,'schedule'] = cc","15a3640e":"print(len(sample_submission.loc[0,'schedule']))\nprint(len(sample_submission.loc[1,'schedule']))\nprint(len(sample_submission.loc[2,'schedule']))","a07ab614":"comm_check =str()\nfor i in comm.Permutation.values:\n    comm_check +=i\ncomm_check","8f18a108":"other_check =str()\nfor i in other.Permutation.values:\n    other_check +=i\nlen(other_check)","40a9c8d9":"len(comm_check)","30d33f2d":"for r in range(int(len(other_check)\/7)):\n    x = r*7\n    #for i in range(len(comm_check)-7):\n    if comm_check.find(other_check[x:x+7])== True:\n            print('find',x)\n    else:\n            comm_check +=other_check[x:x+7]\n    #if x%100 ==0:\n    #    print(x)","428e2d71":"len(comm_check)","d6bb55fd":"data = permutations.Permutation.to_list()\nprint(data[:10])\nprint(len(data))","44f7bb1d":"all_check =str(data.pop(int(np.random.rand()*len(data))))\nprint(all_check)\nprint(len(data))","d3fd026f":"pattern_list = list(itertools.permutations(range(7),7))\npattern_list[0:3]","f15b7e3f":"pattern = pd.DataFrame()\npattern['permutation'] = pattern_list.copy()\npattern['permutation'] = pattern['permutation'].apply(lambda x: str(x[0])+str(x[1])+str(x[2])+str(x[3])+str(x[4])+str(x[5])+str(x[6]))\npattern","b9be6e34":"len(pattern.permutation.unique())","2c3ce69d":"pattern =pattern[pattern['permutation'].str[:2] !='01'].reset_index(drop=True)\npattern","053b04ab":"a = str()\nfor i in range(len(pattern)):\n    a+=str(pattern.permutation.values[i])\nlen(a)","6a2043dc":"comm = pd.DataFrame()\ncomm['permutation'] = pattern_list.copy()\ncomm['permutation'] = comm['permutation'].apply(lambda x: str(x[0])+str(x[1])+str(x[2])+str(x[3])+str(x[4])+str(x[5])+str(x[6]))\ncomm = comm[comm['permutation'].str[:2] =='01'].reset_index(drop=True)\ncomm","f7a3de14":"pattern","8e21413b":"a = str()\nfor i in range(len(pattern)):\n    a+=str(pattern.permutation.values[i])\nlen(a)","9f5f2369":"comm = pd.DataFrame()\ncomm['permutation'] = pattern_list.copy()\ncomm['permutation'] = comm['permutation'].apply(lambda x: str(x[0])+str(x[1])+str(x[2])+str(x[3])+str(x[4])+str(x[5])+str(x[6]))\ncomm = comm[comm['permutation'].str[:2] =='01'].reset_index(drop=True)\ncomm","e9184d4f":"# Permutation","a2e0adee":"# Exploratory Data Analysis"}}