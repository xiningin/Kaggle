{"cell_type":{"aaa47816":"code","e302f8c1":"code","99cc0e2a":"code","6ac8e948":"code","d6cb6513":"code","06f35311":"code","a6a83d3e":"code","756d0097":"code","162a1961":"code","be1c1436":"code","217a0726":"code","9ddbceb7":"code","453b725a":"code","20b071dc":"code","7c5cb64d":"markdown"},"source":{"aaa47816":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport zipfile\nimport cv2\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\n\ntraining_images_folder = '\/train\/train'\ntest_images_folder = '\/test\/test1'\n\nimage_size = 32\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e302f8c1":"with zipfile.ZipFile('\/kaggle\/input\/dogs-vs-cats\/train.zip', 'r') as train_zip:\n    train_zip.extractall('\/train')\n    \nwith zipfile.ZipFile('\/kaggle\/input\/dogs-vs-cats\/test1.zip', 'r') as test_zip:\n    test_zip.extractall('\/test')\n\nprint('Files extracted')\nprint(\"Training files:\",len(os.listdir(training_images_folder)))\nprint(\"Test files:\",len(os.listdir(test_images_folder)))","99cc0e2a":"# Read categories to get the y array\ntrain_files = os.listdir(training_images_folder)\ncategories = []\nfor img in train_files: \n    categories.append(img.split('.')[0])\ny = np.array(categories)\nprint(y)","6ac8e948":"def get_image_arr(path):\n        img = cv2.imread(path, cv2.COLOR_BGR2GRAY) \n        img = cv2.resize(img, (image_size, image_size)).reshape(1,-1)\n        return img","d6cb6513":"def get_features_count(path):\n        img = cv2.imread(path, cv2.COLOR_BGR2GRAY) \n        img = cv2.resize(img, (image_size, image_size)).reshape(-1,1)\n        return len(img)","06f35311":"features_count = get_features_count(training_images_folder + '\/' + train_files[0])\nprint('Features count: ',features_count)","a6a83d3e":"#Create the X array\nX = np.ones((1,features_count), int)\nadvance = 0\n\nfor x in train_files:\n    X = np.append(X,get_image_arr(training_images_folder + '\/' + x),axis = 0)\n\nprint('X traing array generated',X)","756d0097":"X = np.delete(X, (0), axis=0)\n\nprint('X shape:',X.shape)\nprint('y shape:',y.shape)","162a1961":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\nprint('X Train shape:',X_train.shape)\nprint('X Test shape:',X_test.shape)\nprint('Y Train shape:',y_train.shape)\nprint('Y Test shape:',y_test.shape)","be1c1436":"#Scale data\ntrain_scaler = preprocessing.RobustScaler().fit(X_train)\nx_scaled = train_scaler.transform(X_train)\n\ntest_scaler = preprocessing.RobustScaler().fit(X_test)\ntest_scaled = test_scaler.transform(X_test)","217a0726":"images_model = LogisticRegression(max_iter=2000)\nimages_model.fit(x_scaled, y_train)\n\ny_prima = images_model.predict(test_scaled)\nprint(y_prima)","9ddbceb7":"#Statistics \nprint(classification_report(y_test, y_prima))","453b725a":"#Accuracy\naccuracy_score(y_test, y_prima)","20b071dc":"#confusion matrix\ndisp = plot_confusion_matrix(images_model, X_train, y_train,\n                             cmap=plt.cm.Blues,\n                             normalize=None)\nplt.show()","7c5cb64d":"This is an academic exercise. The purpose of this notebook is check how LogisticRegression performs when it comes to image classification.\n\nAny advice is extremely welcome."}}