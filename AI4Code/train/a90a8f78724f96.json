{"cell_type":{"c9d37a39":"code","87692221":"code","8bb11222":"code","55bbf68c":"code","e52202de":"code","d8449f1d":"code","44babb98":"code","756556db":"code","4ed90c37":"code","5f95928a":"code","5fe2cbe4":"code","e599d2e6":"code","efb7675a":"code","de62fd94":"code","0aad6973":"code","04642ef3":"code","543f10af":"code","a45f4695":"code","febaa88d":"code","7b2cf5d4":"code","b3fc181b":"code","ef90e1b4":"code","1d926145":"code","2fe1e735":"code","39903a64":"code","5c9c5d5f":"code","07b099ff":"code","d0830868":"code","8f21d0f2":"code","6bf467b5":"code","f91929f7":"code","65c7c5dc":"code","3ad94856":"code","e98e629a":"code","9fbda4ab":"code","9dc7f309":"code","a164bc77":"code","17ef1a8d":"code","5071f2cf":"code","ce6748f8":"code","d802018c":"code","d96ff260":"code","08a90508":"code","64b9e549":"code","75a2b55f":"code","4d3d0e2c":"code","272d54fe":"code","5ce075cd":"code","d2ceb609":"code","056ebc77":"code","3d8cff9e":"code","62abd6fd":"code","d56a0d52":"code","c7776f0e":"code","65cb8739":"code","fa16805e":"markdown","c0c016c6":"markdown","375c9bc8":"markdown","cff6400e":"markdown","7b39daed":"markdown","461c136a":"markdown","24fa2792":"markdown","ef2a4fb4":"markdown","443c30f3":"markdown","7e8fdbcb":"markdown","4d080769":"markdown"},"source":{"c9d37a39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns \n\nsns.set_theme(style='darkgrid')\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87692221":"## Importing the data set\n\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","8bb11222":"train.head()","55bbf68c":"print(f'The number of Rows,columns in training dataset is :{train.shape}')\nprint(f'The number of Rows,columns in testing dataset is :{test.shape}')","e52202de":"train.info()","d8449f1d":"train.describe()","44babb98":"## Making copy of the data \ndf=train.copy()","756556db":"train.columns","4ed90c37":"plt.figure(figsize=(8,5))\nsns.countplot(x='Pclass',data=df)","5f95928a":"plt.figure(figsize=(8,6))\ndf['Sex'].value_counts().plot.pie(autopct='%.2f%%',explode=[0.08]*2)","5fe2cbe4":"sns.boxplot(x=df.Age,color='green')","e599d2e6":"plt.figure(figsize=(8,6))\nsns.countplot(x=df['SibSp'])","efb7675a":"plt.figure(figsize=(8,6))\nsns.countplot(x=df['Parch'])","de62fd94":"plt.figure(figsize=(8,6))\nsns.histplot(x=df.Fare,bins=40)","0aad6973":"plt.figure(figsize=(8,6))\nsns.countplot(x=df.Embarked)","04642ef3":"plt.figure(figsize=(8,6))\nsns.countplot(x='Pclass',data=df,hue='Survived')","543f10af":"df.groupby('Pclass')['Survived'].value_counts()","a45f4695":"plt.figure(figsize=(8,6))\nsns.countplot(x='Sex',data=df,hue='Survived')","febaa88d":"df.groupby('Sex')['Survived'].value_counts()","7b2cf5d4":"plt.figure(figsize=(8,5))\nsns.histplot(x='Age',hue='Survived',data=df)","b3fc181b":"def age_group(a):\n    if a <=14:\n        return 'Children'\n    elif 14<a<=25:\n        return 'Young'\n    elif 25<a<=64:\n        return 'Adults'\n    elif a>64:\n        return 'Old'","ef90e1b4":"df['AgeGroup']=df['Age'].apply(age_group)\ntest['AgeGroup']=test['Age'].apply(age_group)","1d926145":"plt.figure(figsize=(8,6))\nsns.countplot(x=df.AgeGroup,hue=df.Survived)","2fe1e735":"df.groupby('AgeGroup')['Survived'].value_counts()","39903a64":"plt.figure(figsize=(8,5))\nsns.countplot(x='SibSp',data=df,hue='Survived')","5c9c5d5f":"df.groupby('SibSp')['Survived'].value_counts()","07b099ff":"plt.figure(figsize=(8,5))\nsns.countplot(x='Parch',data=df,hue='Survived')","d0830868":"df.groupby('Parch')['Survived'].value_counts()","8f21d0f2":"plt.figure(figsize=(8,6))\nsns.boxplot(x='Survived',y='Fare',data=df)","6bf467b5":"plt.figure(figsize=(8,5))\nsns.countplot(x='Embarked',data=df,hue='Survived')","f91929f7":"df.groupby('Embarked')['Survived'].value_counts()","65c7c5dc":"## droping the unwanted columns\ndf.drop(labels=['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)\nx_test=test.drop(labels=['PassengerId','Name','Ticket','Cabin'],axis=1)\n\nprint(df.head())\nprint(x_test.head())","3ad94856":"df.skew()","e98e629a":"## Looking for null values :\n\nprint(f'Null values in train set :')\nprint(df.isna().sum())\nprint(f'Null Values in test Set:')\nprint(x_test.isna().sum())","9fbda4ab":"df.groupby('AgeGroup')['Age'].median()","9dc7f309":"def impute_age(cols):\n    Age = cols[0]\n    AgeGroup = cols[1]\n    \n    if pd.isnull(Age):\n\n        if AgeGroup == 'Adults':\n            return 36.0\n\n        elif AgeGroup == 'Chlidren':\n            return 4.0\n\n        elif AgeGroup == 'Young':\n            return 21.0\n        else:\n            return 70.0\n\n    else:\n        return Age","a164bc77":"df['Age'] = df[['Age','AgeGroup']].apply(impute_age,axis=1)\nx_test['Age'] = x_test[['Age','AgeGroup']].apply(impute_age,axis=1)","17ef1a8d":"print(f'Most frequent valueof Emabarked in Train data:{df.Embarked.mode()}')\nprint(f'Most frequent valueof Emabarked in Test data:{x_test.Embarked.mode()}')","5071f2cf":"df['Embarked'].fillna(value='S',inplace=True)\nx_test['Embarked'].fillna(value='S',inplace=True)\nx_test['Fare'].fillna(value=x_test['Fare'].mean(),inplace=True)","ce6748f8":"print(f'Null values in train set :')\nprint(df.isna().sum())\nprint(f'Null Values in test Set:')\nprint(x_test.isna().sum())","d802018c":"df.shape","d96ff260":"df.drop('AgeGroup',axis=1,inplace=True)\nx_test.drop('AgeGroup',axis=1,inplace=True)","08a90508":"df=pd.get_dummies(data=df,columns=['Embarked','Sex'],drop_first=True)\ndf.head()","64b9e549":"x_test=pd.get_dummies(data=x_test,columns=['Embarked','Sex'],drop_first=True)\nx_test.head()","75a2b55f":"df.info()","4d3d0e2c":"for col in df.columns:\n    if df[col].dtype == 'uint8':\n        df[col]=df[col].astype('int')\n","272d54fe":"X=df.drop('Survived',axis=1)\ny=df['Survived']","5ce075cd":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier","d2ceb609":"def pred(model):\n    clf=model()\n    clf.fit(X,y)\n    return clf.predict(x_test)\n","056ebc77":"## Random Forest Classifier\n \ny_pred_rfc=pred(AdaBoostClassifier)","3d8cff9e":"## Ada Boost Classifier\n\ny_pred_ada=pred(AdaBoostClassifier)","62abd6fd":"## XG Boost\n\ny_pred_xgb=pred(XGBClassifier)","d56a0d52":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score","c7776f0e":"def evaluate(y_pred):\n    print(classification_report(y,y_pred))\n    print(confusion_matrix(y,y_pred))\n    print(f'Accuracy of the matrix : {accuracy_score(y,y_pred)}')","65cb8739":"submission = pd.DataFrame(y_pred_xgb, test[\"PassengerId\"]).rename(columns={0:\"Survived\"})\nsubmission.to_csv(path_or_buf=\"submission.csv\",index=True)","fa16805e":"### Dealing with Categorical Data ","c0c016c6":"L,U = impute_outliers(df.Age)\nL1,U1 = impute_outliers(df.Fare)\n\nl,u = impute_outliers(x_test.Age)\nl1,u1 = impute_outliers(x_test.Fare)","375c9bc8":"df.drop(df[(df.Age<L) | (df.Age>U)].index , inplace = True)\ndf.drop(df[(df.Fare<L1) | (df.Fare>U1)].index , inplace = True)\n\nx_test.drop(x_test[(x_test.Age<l) | (x_test.Age>u)].index , inplace = True)\nx_test.drop(x_test[(x_test.Fare<l1) | (x_test.Fare>u1)].index , inplace = True)","cff6400e":"## <u>Feature Engineering<\/u>:\n    ","7b39daed":"## <u>Insights from Bi-variate Analysis<\/u>:\n\n#### => Survivale Rate for following Passenger Class:\n     1st : 62.9%\n     2nd : 47.3%\n     3rd : 24%\n\n#### => 74% of the Female survived while only 19% of the male survived\n\n#### => Survival Rate for Different Age Group :\n     Adult(15 to 25 years): 41%\n     Children(less than 15) : 58% \n     Old(>64) : 9%\n     Young (25 to 64 years) : 34%\n \n#### => Solo traveller has survival rate of 34% \n\n#### => Person traveling with one or two companions has more chances of survival than            others.\n\n#### => People who survived has median fare ticket price greater than 75 percentile of            people who did not survived.\n\n#### => Survival Rate of People with following Embarked:\n     S : 33.7%\n     C : 55.5 %\n     Q : 39 %","461c136a":"### <u>Insights from Univariate Analysis<\/u>:\n\n#### => Most of the passengers were from 3rd class\n#### => 65% of the passengers were Male\n#### => 75% of the population in Titanic were above 20 and below 40 years od age.\n#### => Maximum passengers were travelling solo i.e didn't have any parter\/child\/relative with them.\n#### => Most of the passenger bought the ticket with fare price less than 100.\n#### => Most people has Embared 'S'","24fa2792":"## <u>Evaluating Model<\/u>:","ef2a4fb4":"### Dealing with Outliers:\n\ndef impute_outliers(feat):\n    sorted(feat)\n    Q1,Q3 = np.percentile(feat , [25,75])\n    IQR = Q3 - Q1\n\n    low_limit = Q1 - (1.5*IQR)\n    up_limit = Q3 + (1.5*IQR)\n\n    return low_limit,up_limit","443c30f3":"## <u>Machine Learning Model<\/u>:","7e8fdbcb":"#### Since I was having trouble in drawing conclusion from age column so I decided to make a Age_category column and analysis age categorically","4d080769":"## <u>Exploratory Data Analysis<\/u>"}}