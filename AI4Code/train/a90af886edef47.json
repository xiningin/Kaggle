{"cell_type":{"dc5e2723":"code","6010a208":"code","1e40c6a5":"code","24da79dc":"code","8e8d7a9c":"code","8c8799f0":"code","15f4330e":"code","e1c4393f":"code","a0f39956":"code","a1181a1d":"code","dbfa4ed0":"code","e8c460db":"code","7dfb0eee":"code","b9eb11b9":"code","7cfeedc9":"code","e8410207":"code","fc7150a7":"code","5beb6273":"code","a7a2f964":"code","d32938e5":"code","d6db1d32":"code","c8b0f125":"code","f7f6b437":"code","a1a621d1":"code","b719003e":"markdown","ab024cda":"markdown","9de8f042":"markdown","bd772f35":"markdown","d0542380":"markdown","4df33456":"markdown","50ebec2d":"markdown","9f3066fe":"markdown","ac1c7de2":"markdown","01702a55":"markdown","aef769fe":"markdown","2abd037c":"markdown"},"source":{"dc5e2723":"import pandas as pd\nimport numpy as np\nimport matplotlib as pyplot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier\n%matplotlib inline","6010a208":"# to see all the comands result in a single kernal \n%load_ext autoreload\n%autoreload 2\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","1e40c6a5":"# to increase no. of rows and column visibility in outputs\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","24da79dc":"train = pd.read_csv(r'..\/input\/janatahack-crosssell-prediction\/train.csv')\ntest = pd.read_csv(r'..\/input\/janatahack-crosssell-prediction\/test.csv')\nsample_submmission = pd.read_csv(r'..\/input\/janatahack-crosssell-prediction\/sample_submission.csv')\ntrain.shape\ntest.shape\nsample_submmission.shape","8e8d7a9c":"test.info()","8c8799f0":"%matplotlib inline\nimport matplotlib.pyplot as plt\ntrain.hist(bins=50, figsize=(20,15))\nplt.show()","15f4330e":"train.head()","e1c4393f":"train.isna().sum().sum()\ntest.isna().sum().sum()","a0f39956":"numeric_data = train.select_dtypes(include=np.number) # select_dtypes selects data with numeric features\nnumeric_col = numeric_data.columns \n\nprint(\"Numeric Features:\")\nprint(numeric_data.head())\nprint(\"====\"*20)","a1181a1d":"categorical_data = train.select_dtypes(exclude=np.number) # we will exclude data with numeric features\ncategorical_col = categorical_data.columns                                                                              # we will store the categorical features in a variable\n\nprint(\"Categorical Features:\")\nprint(categorical_data.head())\nprint(\"====\"*20)","dbfa4ed0":"train['Response'].value_counts()\/len(train)\ntrain['Gender'].value_counts()\ntrain['Vehicle_Age'].value_counts()\ntrain['Vehicle_Damage'].value_counts()","e8c460db":"le = LabelEncoder()\ntrain['Vehicle_Age'] = le.fit_transform(train['Vehicle_Age'])\ntrain['Gender'] = le.fit_transform(train['Gender'])\ntrain['Vehicle_Damage'] = le.fit_transform(train['Vehicle_Damage'])\ntest['Gender'] = le.fit_transform(test['Gender'])\ntest['Vehicle_Age'] = le.fit_transform(test['Vehicle_Age'])\ntest['Vehicle_Damage'] = le.fit_transform(test['Vehicle_Damage'])","7dfb0eee":"train.head()","b9eb11b9":"train.columns","7cfeedc9":"col_1=['Gender', 'Age','Driving_License', 'Region_Code', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage']","e8410207":"# categorical column \ncat_col=['Gender','Driving_License', 'Region_Code', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage','Policy_Sales_Channel']","fc7150a7":"train['Region_Code']=train['Region_Code'].astype(int)\ntest['Region_Code']=test['Region_Code'].astype(int)\ntrain['Policy_Sales_Channel']=train['Policy_Sales_Channel'].astype(int)\ntest['Policy_Sales_Channel']=test['Policy_Sales_Channel'].astype(int)\n","5beb6273":"X = train[col_1]\ny = train['Response']\nX_test = test[col_1]\ny_valid_pred = 0\ny_test_pred = 0","a7a2f964":"K = 4\nkf = KFold(n_splits = K, random_state=150307, shuffle = True)","d32938e5":"OPTIMIZE_ROUNDS = False\n# Run CV\nmodel = CatBoostClassifier()\n\nfor i, (train_i, test_i) in enumerate(kf.split(train)):\n    \n    # Create data for this fold\n    y_train, y_eval = y.iloc[train_i], y.iloc[test_i]\n    X_train, X_eval = X.iloc[train_i,:], X.iloc[test_i,:]\n    print( \"\\nFold \", i)\n    \n    # Run model for this fold\n    if OPTIMIZE_ROUNDS:\n        fit_model = model.fit( X_train, y_train, \n                               eval_set=[X_eval, y_eval],\n                               use_best_model=True\n                             )\n        print( \"  N trees = \", model.tree_count_ )\n    else:\n        fit_model = model.fit( X_train, y_train,cat_features=cat_col,eval_set=(X_eval, y_eval),early_stopping_rounds=40,verbose=200 )\n        \n    # Generate validation predictions for this fold\n    pred = fit_model.predict_proba(X_eval)[:,1]\n    print( \"  ROCAUC = \", roc_auc_score(y_eval, pred) )\n    y_valid_pred.iloc[test_i] = pred\n    \n    # Accumulate test set predictions\n    y_test_pred += fit_model.predict_proba(test[col_1])[:, 1]\n    \ny_test_pred \/= K  # Average test set predictions\n\nprint( \"\\nROCAUC for full training set:\" )\nroc_auc_score(y, y_valid_pred)","d6db1d32":"feat_importances = pd.Series(fit_model.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(15).plot(kind='barh')\n#feat_importances.nsmallest(20).plot(kind='barh')\nplt.show()","c8b0f125":"# Create submission file\nsubmmission = pd.DataFrame()\nsubmmission['id'] = test['id'].values\nsubmmission['Response'] = y_test_pred\nsubmmission.to_csv('cat_submitfinal.csv', float_format='%.6f', index=False)","f7f6b437":"submmission.head()","a1a621d1":"# 85.86 on Public leaderboard","b719003e":"# Implementing CatBoost Classifier","ab024cda":"# Test Data Prediction","9de8f042":"# **Janatahack: Cross-sell Prediction**\n\n[https:\/\/datahack.analyticsvidhya.com\/contest\/janatahack-cross-sell-prediction\/#ProblemStatement](http:\/\/)\n\nYour client is an Insurance company that has provided Health Insurance to its customers now they need your help in building a model to predict whether the policyholders (customers) from past year will also be interested in Vehicle Insurance provided by the company.\n\nAn insurance policy is an arrangement by which a company undertakes to provide a guarantee of compensation for specified loss, damage, illness, or death in return for the payment of a specified premium. A premium is a sum of money that the customer needs to pay regularly to an insurance company for this guarantee.\n\nFor example, you may pay a premium of Rs. 5000 each year for a health insurance cover of Rs. 200,000\/- so that if, God forbid, you fall ill and need to be hospitalised in that year, the insurance provider company will bear the cost of hospitalisation etc. for upto Rs. 200,000. Now if you are wondering how can company bear such high hospitalisation cost when it charges a premium of only Rs. 5000\/-, that is where the concept of probabilities comes in picture. For example, like you, there may be 100 customers who would be paying a premium of Rs. 5000 every year, but only a few of them (say 2-3) would get hospitalised that year and not everyone. This way everyone shares the risk of everyone else.\n\nJust like medical insurance, there is vehicle insurance where every year customer needs to pay a premium of certain amount to insurance provider company so that in case of unfortunate accident by the vehicle, the insurance provider company will provide a compensation (called \u2018sum assured\u2019) to the customer.\n\nBuilding a model to predict whether a customer would be interested in Vehicle Insurance is extremely helpful for the company because it can then accordingly plan its communication strategy to reach out to those customers and optimise its business model and revenue. \n\nNow, in order to predict, whether the customer would be interested in Vehicle insurance, you have information about demographics (gender, age, region code type), Vehicles (Vehicle Age, Damage), Policy (Premium, sourcing channel) etc.","bd772f35":"# Identifying Categorical Features","d0542380":"# Label Encoding categorical features","4df33456":"# Identifying Numerical Features","50ebec2d":"# Applying k-fold validation","9f3066fe":"# Import the Libraries","ac1c7de2":"# Import the dataset","01702a55":"# Check for Missing Data","aef769fe":"# Basic Visualization","2abd037c":"# Since cat_feature in catboost cannot be float changing data type"}}