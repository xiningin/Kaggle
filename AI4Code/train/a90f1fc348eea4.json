{"cell_type":{"f9e21b3b":"code","2cd00824":"code","325afbee":"code","ecf2c436":"code","0603c3b8":"code","f5820705":"code","5ba2dc88":"code","e6e12949":"code","0646a377":"code","cafe43a7":"code","41647307":"code","0e4d4f68":"code","85880260":"code","e01af707":"code","a4a46606":"code","d361951f":"code","4a831b4e":"code","e5dbc92a":"code","dcaaf80b":"code","4ae8e570":"code","e2279cf3":"code","c7e0ef60":"code","5861f0fa":"code","7fce4e68":"code","c21c5a53":"code","35acc49b":"code","500b9950":"code","936bebbd":"code","6a3bf180":"code","5c5a5db2":"code","1dd708fc":"code","3fae4eda":"code","dfd651cc":"code","2c9f2679":"code","37f51739":"code","54ca6b48":"code","6ce6aac3":"code","8bc6e9d3":"code","d4df4bdd":"code","63283dd4":"code","e96fb4ce":"code","b56e0ceb":"code","2a5d2367":"code","d1a62a40":"code","3647bb8a":"code","4a3ad682":"code","21054125":"code","0cc3b615":"code","ea2c5275":"code","11d5816f":"code","f87ad5be":"code","bda0ba45":"code","7adcbc3a":"code","ecfb0bef":"code","f60daf7d":"code","3200fb07":"code","79e109f7":"code","52bea146":"code","7a3cb9af":"code","4ba2cd94":"code","92f9f65d":"code","3b9c4b8e":"code","52130b49":"code","4980d78a":"code","b7f7a324":"code","cb10d5b8":"code","a8fdaadb":"code","83b0ab23":"markdown","f3ef15e4":"markdown","4234d90c":"markdown","04b9e1e9":"markdown","0e8538cf":"markdown","c16ff26a":"markdown","a147e353":"markdown","eedbb1b1":"markdown","e6469b1f":"markdown","c4165e58":"markdown","1589e896":"markdown","308d7889":"markdown","f34ef5e5":"markdown","208cf78d":"markdown","0876f274":"markdown","9247f330":"markdown","ed0fe881":"markdown","50f8e74b":"markdown","21cd1f83":"markdown","69a3f9a0":"markdown","73fcf310":"markdown","a1587d64":"markdown","90f1e5d0":"markdown","f5acda65":"markdown","25b3e457":"markdown","515d28e6":"markdown","f56ac917":"markdown","05b3ec52":"markdown","846abcb4":"markdown","fd7d38ed":"markdown","c369446c":"markdown","4698bf72":"markdown","fe84d29b":"markdown","4f56be5d":"markdown","0249af44":"markdown","e15b63aa":"markdown","13cb5f30":"markdown","6df443c6":"markdown","2048086f":"markdown","0fff7a26":"markdown","9532ab17":"markdown","6c181a44":"markdown","1572b36d":"markdown","27702a8f":"markdown","33c07aa1":"markdown","943d14eb":"markdown","182e9fd5":"markdown","d9048609":"markdown","e2f36a10":"markdown","8ade14cf":"markdown","791615c5":"markdown","6632d06b":"markdown","5acb3343":"markdown","ebfd5110":"markdown","be498f64":"markdown","d04f7523":"markdown","d4a13fd2":"markdown","41f58cc4":"markdown","ee852e71":"markdown","a4fe2158":"markdown","dde7ce16":"markdown","5fe0fd5d":"markdown","9c8c6ce0":"markdown","5f1ff3bc":"markdown","e39c17ec":"markdown","7a9f4239":"markdown","e2c4c3aa":"markdown","5fbd7a0d":"markdown","efba9518":"markdown","ad04d489":"markdown","2430372e":"markdown","8d67c63d":"markdown"},"source":{"f9e21b3b":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport missingno as msno\nfrom sklearn.preprocessing import LabelEncoder\ne=LabelEncoder()\nfrom pandas_profiling import ProfileReport\n\nfrom IPython.display import Image","2cd00824":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndf.head()","325afbee":"df.drop(['show_id','description'], axis = 1, inplace=True)","ecf2c436":"df.rename(columns = {'listed_in' : 'Genre', 'date_added' : 'date'}, inplace= True)","0603c3b8":"profile = ProfileReport(df, title='Netflix each column Report', html={'style':{'full_width':False}})","f5820705":"profile.to_notebook_iframe()","5ba2dc88":"profile.to_widgets()","e6e12949":"df.info()","0646a377":"missing_no=df.isna().sum()\nmissing_no","cafe43a7":"for i in range(len(missing_no)):\n  if missing_no[i] > 0:\n    print('missing value rate in {} column = {}%'.format(df.columns[i],missing_no[i]\/len(df)*100))","41647307":"a4_dims = (12, 8)\nfig, ax = plt.subplots(figsize=a4_dims)\nsns.heatmap(ax=ax,data=df.isnull(), cbar=False)","0e4d4f68":"msno.matrix(df)","85880260":"df.drop(['director','cast'], axis = 1, inplace=True)","e01af707":"df['date'].unique()","a4a46606":"df['date'] = pd.to_datetime(df.date)\ndf.head()","d361951f":"df['date'] = df.date.fillna(method='ffill')\ndf.head()","4a831b4e":"no_missing = len(df[:][df['date'].isna() == True])\nno_missing","e5dbc92a":"df['rating'].unique()","dcaaf80b":"df[:][df['rating'].isna() == True]","4ae8e570":"rating_1 = ['TV-MA', 'R', 'PG-13', 'TV-14', 'TV-PG', 'NR', 'TV-G']\nid = [67, 2359, 3660, 3736, 3737, 3738, 4323]\n\nfor i1 in range(len(id)):\n  df.iloc[id[i1],5] = rating_1[i1]\n\ndf.iloc[67,5]","e2279cf3":"df.isna().sum()","c7e0ef60":"df['country'].value_counts()","5861f0fa":"df['country'] = df['country'].fillna(df['country'].mode()[0])\n","7fce4e68":"df['p_country'] = df['country'].apply(lambda x: x.split(\",\")[0])\ndf.head()","c21c5a53":"df.isnull().sum()","35acc49b":"c2 = []\nc3 = []\nc4 = []\nc5 = []\nc6 = []\nfor x in range(len(df)):\n  if len(df['country'][x].split(',')) == 1:\n    c2.append(df['country'][x])\n  elif 'United States' in df['country'][x].split(','):\n    c3.append(df['country'][x])\n  elif ' United States' in df['country'][x].split(','):\n    c4.append(df['country'][x])\n  elif 'United Kingdom' in df['country'][x].split(','):\n    c5.append(df['country'][x])\n  elif ' United Kingdom' in df['country'][x].split(','):\n    c6.append(df['country'][x])\ncsmn = np.array(c2)\nprint(pd.DataFrame(csmn, columns = ['country']))\nprint('\\n Unique countries: \\n', np.unique(csmn))\nprint('\\nlength of the rows which contain single country: ',len(c2))\nprint('\\nlength of the rows which contain multiple countries: ', len(df) - len(c2))\nprint('\\nlength of the rows which contain united states in multiple countries: ',len(c3)+len(c4))\nprint('\\nlength of the rows which contain united states in multiple countries: ',len(c5)+len(c6))\n","500b9950":"df_g = df.groupby('type')","936bebbd":"df_g1 = df_g.get_group('Movie')\ndf_g1 = df_g1.reset_index()\ndf_g1.drop('index',axis=1,inplace=True)\ndf_g1.head()","6a3bf180":"app = []\nfor st1 in range(len(df_g1)):\n  for st in range(len(df_g1['Genre'][st1].split(','))):\n    app.append(df_g1['Genre'][st1].split(',')[st].strip())\n\nTotal_Genre_in_Genre_column = np.array(app)\nprint('All Genre Categories in Genre column:\\n',Total_Genre_in_Genre_column)\nprint('\\n Length of total Categories in Genre column:',len(Total_Genre_in_Genre_column))\n\nprint('\\n Total differrent Categories in Genre: \\n\\n',np.unique(Total_Genre_in_Genre_column))","5c5a5db2":"G = pd.DataFrame(Total_Genre_in_Genre_column)\nG.value_counts()","1dd708fc":"arr1_sngl = df_g1.Genre.apply(lambda sngl: sngl.split(','))\narr1_sngl","3fae4eda":"count1=0\ncount2=0\ncount3=0\nfor category in arr1_sngl:\n  if len(category) == 1:\n    count1=count1+1\n  elif len(category) == 2:\n    count2=count2+1\n  elif len(category) > 2:\n    count3=count3+1\n    # print(category)\nprint('There are {} Single categories in Genre Column'.format(count1))\nprint('There are {} Binary categories in Genre Column'.format(count2))\nprint('There are {} Multiple categories in Genre Column'.format(count3))","dfd651cc":"arr = df_g1.Genre.apply(lambda x: [x.strip() for x in x.split(\",\")])\narr","2c9f2679":"genre_we_dont_want = ['Anime Features', 'Children & Family Movies','Classic Movies', 'Cult Movies','Faith & Spirituality', 'Independent Movies',\n                        'International Movies', 'LGBTQ Movies', 'Movies']\ndef movie(dont_want):\n  for i in range(len(arr)):\n    if arr[i][0] == dont_want:\n        if len(arr[i]) == 1:\n          print(i,arr[i])\nfor i1 in range(len(genre_we_dont_want)):\n    movie(genre_we_dont_want[i1])  ","37f51739":"df_g1.Genre[1201]","54ca6b48":"Unwanted_Genre = ['Anime Features', 'Children & Family Movies''Classic Movies', 'Cult Movies','Faith & Spirituality', 'Independent Movies',\n                        'International Movies', 'LGBTQ Movies', 'Movies']\ndef movie(dont_want):\n  for i4 in range(len(arr)):\n    if arr[i4][0] == dont_want:\n        if len(arr[i4]) == 1:\n          arr[i4][0] = 'Action & Adventure'\nfor i5 in range(len(Unwanted_Genre)):\n    movie(Unwanted_Genre[i5])  \nprint(arr)\nprint('\\nReplaced with International Movies:', arr[1201])","6ce6aac3":"df_g1['Genre1'] = arr","8bc6e9d3":"m1 = []\nfor m in df_g1.Genre1:\n  m1.append(', '.join(m))\ndf_g1['Genre1'] = pd.DataFrame(m1)\ndf_g1.Genre1","d4df4bdd":"df_g1.Genre1[1201]","63283dd4":"import re\ndf_g1['real_Genre']=df_g1.Genre1.apply(\n    lambda x: re.split('\\s*,\\s*', x)).apply(\n        lambda x: [e for e in x if e not in [ 'International Movies', 'Independent Movies','Children & Family Movies','Anime Features','Classic Movies', 'Cult Movies', 'Faith & Spirituality', 'LGBTQ Movies', 'Movies']])\ndf_g1","e96fb4ce":"df_g1['real_Genre']=df_g1['real_Genre'].apply(lambda s: ', '.join(s))\ndf_g1","b56e0ceb":"df_g1['real_Genre'][1201]","2a5d2367":"df_g1","d1a62a40":"df_g1.drop('Genre1', axis=1, inplace = True)\ndf_g1.head()","3647bb8a":"arr2_sngl = df_g1.real_Genre.apply(lambda sngl: sngl.split(','))\narr2_sngl = pd.DataFrame(arr2_sngl)\narr2_sngl = arr2_sngl.real_Genre.apply(lambda w: [z1.strip() for z1 in w])\narr2_sngl","4a3ad682":"count1=0\ncount2=0\ncount3=0\nsn = []\nmt = []\nfor category in arr2_sngl:\n  if len(category) == 1:\n    count1=count1+1\n    sn.append(category)\n\n  elif len(category) == 2:\n    count2=count2+1 \n\n  elif len(category) > 2:\n    count3=count3+1\n\nsn = pd.DataFrame(sn)\n\nprint(sn.value_counts())\nprint('There are {} Single categories in real_Genre Column'.format(count1))\nprint('There are {} Binary categories in real_Genre Column'.format(count2))\nprint('There are {} Multiple categories in real_Genre Column'.format(count3))","21054125":"bin=[]\nmlt=[]\nfor category in arr2_sngl:\n  if len(category) == 2:\n    for st1 in range(len(category)):\n        bin.append(category[st1])\n  elif len(category) > 2:\n    for st2 in range(len(category)):\n        mlt.append(category[st2])\n\nbin = pd.DataFrame(bin)\nmlt = pd.DataFrame(mlt)\n\n\nprint('Binary:\\n')\nprint(bin.value_counts())\nprint('\\nMultiple:\\n')\nprint(mlt.value_counts())","0cc3b615":"mlt=[]\nbin=[]\nsng=[]\nbin_index = []\nmlt_index = []\nsng_index = []\nfor index,category in enumerate(arr2_sngl):\n  if len(category) == 1:\n    sng.append(category)\n    sng_index.append(index)\n  if len(category) == 2:\n    bin.append(category)\n    bin_index.append(index)\n  elif len(category) > 2:\n    mlt.append(category)\n    mlt_index.append(index)\n\nbin = pd.DataFrame(bin)\nmlt = pd.DataFrame(mlt)\n\n\nBinary_Genre = (pd.DataFrame(list(map(lambda b: df_g1.iloc[b], bin_index))))\nBinary_Genre.reset_index(inplace=True)\nBinary_Genre.drop(['Genre','index'], axis=1, inplace=True)\n\nMultiple_Genre = pd.DataFrame(list(map(lambda m: df_g1.iloc[m], mlt_index)))\nMultiple_Genre.reset_index(inplace=True)\nMultiple_Genre.drop(['Genre','index'], axis=1, inplace=True)\n\n\nSingle_Genre = pd.DataFrame(list(map(lambda s: df_g1.iloc[s], sng_index)))\nSingle_Genre.reset_index(inplace=True)\nSingle_Genre.drop(['Genre','index'], axis=1, inplace=True)\n\n\nBinary_Genre","ea2c5275":"Single_Genre\n\n","11d5816f":"Multiple_Genre","f87ad5be":"label_c=e.fit_transform(df_g1.p_country)\n","bda0ba45":"enc = df_g1.copy()\nenc['p_country'] = label_c\nenc","7adcbc3a":"dummy_type = pd.get_dummies(df_g1['type'])\ndummy_type","ecfb0bef":"enc['type'] = dummy_type['Movie']\nenc","f60daf7d":"label_s = e.fit_transform(Single_Genre.real_Genre)\nlabel_b = e.fit_transform(Binary_Genre.real_Genre)\nlabel_m = e.fit_transform(Multiple_Genre.real_Genre)\n\nMultiple_Genre['real_Genre_encode'] = label_m\nBinary_Genre['real_Genre_encode'] = label_b\nSingle_Genre['real_Genre_encode'] = label_s\n","3200fb07":"Binary_Genre.head()","79e109f7":"Single_Genre.head()","52bea146":"Multiple_Genre.head()","7a3cb9af":"df_real = pd.read_csv('..\/input\/netflix-movies-along-with-all-information\/Netflix Movies.csv')","4ba2cd94":"plt.figure(figsize=(13,7))\n\ng = sns.countplot(y = df_real.p_country, order=df_real.p_country.value_counts().index[:15])\nplt.title('Top 15 Countries Contributor on Netflix')\nplt.xlabel('Titles')\nplt.ylabel('Country')\nplt.show()","92f9f65d":"app = []\nfor st1 in range(len(df_real)):\n  for st in range(len(df_real['director'][st1].split(','))):\n    app.append(df_real['director'][st1].split(',')[st].strip())\n\ndir = pd.DataFrame(app)\n","3b9c4b8e":"plt.figure(figsize=(13,7))\n\nsns.countplot(y = dir[0], order=dir[0].value_counts().index[:10], palette='PuRd_r')\nplt.title('Top 10 Director Based on given Titles')\nplt.xlabel('Count')\nplt.ylabel('Director')\nplt.show()","52130b49":"app = []\nfor st1 in range(len(df_real)):\n  for st in range(len(df_real['Genre'][st1].split(','))):\n    app.append(df_real['Genre'][st1].split(',')[st].strip())\n\ngen = pd.DataFrame(app)\n","4980d78a":"plt.figure(figsize=(13,7))\n\nsns.countplot(y = gen[0], order=gen[0].value_counts().index[:10], palette='gist_rainbow')\nplt.title(label='Top 10 Genre',fontsize=30,color=\"black\")\n\nplt.xlabel('Count')\nplt.ylabel('Genre')\nplt.show()","b7f7a324":"plt.figure(figsize=(13,7))\n\nsns.countplot(y = Single_Genre.real_Genre, hue = df_real.rating_age, palette='gist_rainbow')","cb10d5b8":"app = []\nfor st1 in range(len(df_real)):\n  for st in range(len(df_real['cast'][st1].split(','))):\n    app.append(df_real['cast'][st1].split(',')[st].strip())\n\nactor = pd.DataFrame(app)\n\n\n","a8fdaadb":"plt.figure(figsize=(13,7))\n\nsns.countplot(y = actor[0], order=actor[0].value_counts().index[:10], palette='gist_rainbow_r')\nplt.title(label='Top Actor on Netflix based on the number of titles',fontsize=30,color=\"black\")\n\nplt.xlabel('Count')\nplt.ylabel('Actor')\nplt.show()","83b0ab23":"**There in above code, you can see the second element of list is starting with space. We have to eliminate this. Check below**","f3ef15e4":"**The all Genre Words in Genre column.**","4234d90c":"**drop Genre1, real_Genre is formated from the Genre1 therefore we only keeps the real_Genre.**","04b9e1e9":"# **Genre Column**","0e8538cf":"**Top Genres on Netflix**","c16ff26a":"https:\/\/whimsical.com\/machine-learning-M8Eq1mUB4jp89Mz7PpqchY","a147e353":"**Filling with first term in country**","eedbb1b1":"**Check Below There is three Genre columns: Genre, Genre1, and real_Genre.**\n\n1. **Genre: Original**\n\n\n2. **Genre1: It is basically formated from Genre, where we Convert all the Unwanted Genre to the Wanted Genre for Single Category.** \n\n3. **real_Genre: It is formated from Genre1, where we remove the all Unwanted Genre from the multiple categories and It does have the same attribute of Genre1 as it is formated from Genre1.**\n\n**Therefore, we Don't need the Genre1**","e6469b1f":"# **Feature imputation using Unique values**.","c4165e58":"**Rename the columns.**","1589e896":"**Check Below, There is no Na value in rating column.**","308d7889":"In this data set, there are 12 features.\n\n**show_id** = Unique ID for every Movie \/ TV Show\n\n**type** = Identifier - A Movie \/ TV Show\n\n**title** = Title of Movie \/ TV Show\n\n**director** = Director of the Movie\n\n**cast** = Actors involved in the Movie \/ TV Show\n\n**country** = Country where the Movie \/ TV Show was produced\n\n**data_added** = Date it was added on Netflix\n\n**release_year** = Actual Release year of the Movie \/ TV Show\n\n**rating** = TV Rating of the Movie \/ TV Show\n\n**duration** = Total Duration - in minutes or number of seasons\n\nLet's overview each feature and figure out how to use them to visualization.","f34ef5e5":"### **See the differrence from original data**","208cf78d":"**From Above I will only focus on following Common Genre.**\n\n***Wanted Genre :*** \n\n\n*   **Action & Adventure** \n*   **Comedies**\n*   **Documentaries**\n*   **Dramas**\n*   **Horror Movies** \n*   **Music & Musicals**\n*   **Romantic Movies** \n*   **Sci-Fi & Fantasy** \n*   **Sports Movies**\n*   **Thrillers**\n*   **Stand-up Comedy**\n\n\n***UnWanted Genre :***\n\n*   **Anime Features**\n*   **Children & Family Movies**\n*   **Classic Movies**\n*   **Cult Movies**\n*   **Faith & Spirituality**\n*   **Independent Movies**\n*   **International Movies**\n*  **LGBTQ Movies**\n*   **Movies**\n\n","0876f274":"# **Familarize Data.**","9247f330":"**Check the counting of all categories as single, binary, and multiple.**\n\n**We have improved it we have more single, and we also improved the binary more. Check the data in starting there were more multiple categories**","ed0fe881":"**Single_Genre: All of the rows of data which contains the single data in Genre column**\n\n**binary_Genre: All of the rows of data which contains the binary data in Genre column**\n\n**Multiple_Genre: All of the rows of data which contains the multiple data in Genre column**","50f8e74b":"**To know the most popular director, we can visualize it.**","21cd1f83":"**Top Actor on Netflix based on the number of titles**","69a3f9a0":"# **Frequent Imputation.**","73fcf310":"Value count for each of differrent Categories present in Genre column. ","a1587d64":"Check Below, Encoding in p_country","90f1e5d0":"**Checking out the country column as it also contains multiple country names for single row.**\n\n* **The column of country contains the multiple name of countries in single row. Check out in dataframe.**\n\n* **Datasets contains 69 differrent countries.**\n\n* **country's column have 681 unique names along with multiple names of countries in single row.**\n\n* **total number of countries which contains united states are**","f5acda65":"Check Below, encoding in type.","25b3e457":"**Ignoring the director and cast column.**\n\n**cleaning the missing values Country, rating, and date_added.**","515d28e6":"**Real_Genre Column**","f56ac917":"# **Missing values**","05b3ec52":"**Country Column**","846abcb4":"**These All are the Single Categories genre. You can see These are less, they don't affect our prediction that much. Therefore, we convert all of them to the 'Action & Adventure'** \n\n**We Basically Converts Unwanted Genre to the Wanted**","fd7d38ed":"# **Forward imputations**","c369446c":"**Check Null values in country**","4698bf72":"# **Deletion**","fe84d29b":"# **Multiple Categories in Single Row**","4f56be5d":"### **Single Categories of Genre in each row.**","0249af44":"**We have to deal with binary and Multiple**","e15b63aa":"**Handling missing values in rating**","13cb5f30":"**Genre column contains many multiple names, We have to deal with them.**\n\n**Grouping based on type: Movies and TV Show**","6df443c6":"Netflix is the most popular platform nowadays for the purpose of entertainment. Here, we will deal with extraction, cleaning, and then visualization of netflix datasets. \n\nThese are some questions to answers using the netflix dataset. \n\n1. How much content added across all years.\n2. Top 10 Countries as contributer to netflix. \n3. Top Genres on Netflix.\n4. Amount of content by rating. \n5. Top directors on netflix.\n6. Top 10 Actors on netflix.\n7. How Genres affects the rating.\n8. In which month a movie should release to help rpoducers to get profit.\n9. Top 10 best movies of 2020, you must watch. \n10. Understanding what content is available in different countries","2048086f":"**See Below, There is More no of following Categories;**\n\n1. **Binary: Dramas, Comedies, Romantic Movies, Action & Adventure, Thrillers.**\n\n2. **Multiple: Dramas, Comedies, Romantic Movies, Action & Adventure, Thrillers.**","0fff7a26":"**Now We have eliminated all the single Unwanted Catogries of Genre**","9532ab17":"**Droping the columns which is not in use of us.**","6c181a44":"No Na Value. ","1572b36d":"**Handling missing values in Country Column**","27702a8f":"**Replace above all Single Categories Genre to the 'Action&Adventure'**","33c07aa1":"**Check UnWanted Genre Above.**\n\n**change ['Unwanted Genre'] ==>** **Action and adventure.**\n\n","943d14eb":"# **Feature Encoding**","182e9fd5":"Frequent Imputation using mode.","d9048609":"**Creating Genre1 column in our dataset, In this colum, we have converted the unwanted Genre to Wanted Genre for Single Categories, For Multiple Categories We will do after finshishing with this one**","e2f36a10":"**We have to check how many single, binary, and multiple categories are in real_Genre.**","8ade14cf":"**Genre affected by the age.**\n\n**The most of movies are allowed for Adults**","791615c5":"**Check the counting of all categories as single, binary, and multiple.**\n\n**We have to improve this, we want more single, and binary.**","6632d06b":"# **Binary and Multiple Categories.**","5acb3343":"# **Feature Imputations**","ebfd5110":"**Type Column.**","be498f64":"**Check this it has changed from 'International Movies' to 'Action & Adventure'**","d04f7523":"The below diagram is from my whimsical account, which I most of the time follow. This is the complete mashine learning pipeline.","d4a13fd2":"**There are Multiple categories of Genre in a single row as well as Single cateogry in single Row.**\n\n\n**First We have to deal with the Single Cateogries in each row of Genre Column.**\n\n**Differrence between;**\n\n1.   **Single Categories in Single Row**:\n\n      *   For Example: Check the 4 index ['Drama'], it Contains Only single Category.\n      \n\n2.   **Multiple Categories in Single Row**:\n\n      *  For Example: Check the 1 Index ['Drama','Internal Movies'] and Check the 3 Index ['Action & Adventure', 'Independent Movies', 'Sci-Fi & Fantasy']\n\n","41f58cc4":"**csmn = countries single movie name => the rows which contain single name of movie in country's column** ","ee852e71":"**The Genre column contains so many categories for individual movies, there is many categories which we do not want it to  be in that column, and we will only keep there which are common Genre. So we need to check the number of categories in Genre column.**","a4fe2158":"From above profiling report, \n\n**director** has a high cardinality: 4049 distinct values\t\n\n**cast** has a high cardinality: 6831 distinct values\t\n\n**country** has a high cardinality: 681 distinct values\t\n\n**date_added** has a high cardinality: 1565 distinct values\n\n**duration** has a high cardinality: 216 distinct values\t\n\n**listed_in** has a high cardinality: 492 distinct values\t\n\n**description** has a high cardinality: 7769 distinct values\t\n","dde7ce16":"# **Data Preprocessing**","5fe0fd5d":"**Below, We converted the list format of real_Genre to the string format.**\n\n**Check real_Genre Above and Below, you will see the differrence.**","9c8c6ce0":"**Exploring the countries by the amount of the produces content of Netflix.**","5f1ff3bc":"**You can clearly see the missing values occurs in director, cast, country, and rating.**\n","e39c17ec":"**Convert the row back to str from list.**","7a9f4239":"**On 1201 index there is string of 'International Movies', We check on this index whether it has changed to the 'Action & Adventure' or not.**","e2c4c3aa":"Converted the data form, for example 'August 14, 2020' to 2020-08-14 to better handle the dates.","5fbd7a0d":"**Missing value plot**","efba9518":"See and Visualize the dataset in the easy way.\n\nYou can clearly see the properties of each columns. ","ad04d489":"**Check Now, there is no missing values in date column.**","2430372e":"# **Labelencoder**","8d67c63d":"# **Visualizations**"}}