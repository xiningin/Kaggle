{"cell_type":{"79ce52a2":"code","28f377ab":"code","b699d3ab":"code","4891bcc1":"code","61423812":"code","54a5eb50":"code","f69ede01":"code","68de8441":"code","d8753de7":"code","8d9b65cb":"code","9c9e0009":"code","4050735f":"code","cc878a30":"code","66500a36":"code","2bfe1048":"code","10c2b75f":"code","4ab42907":"code","c869c3bf":"code","31d18c3a":"code","245bdfb9":"code","65c90569":"code","78112b4f":"code","2046bdd0":"code","d8907e17":"code","797ce22a":"code","eec04d77":"code","68dde364":"code","676ecf9a":"code","bc204fd8":"code","7069830c":"code","dd99cabe":"code","f6e16763":"code","8cbbb060":"code","a010197f":"code","4f57945e":"markdown","85d04aeb":"markdown","f5aca35b":"markdown","921de0b9":"markdown","84d9548e":"markdown","5b994b41":"markdown","17b8c504":"markdown","7846230b":"markdown","2c0e2ea1":"markdown","0c6e036e":"markdown","7f0df7bd":"markdown","261d6299":"markdown","116a18a7":"markdown"},"source":{"79ce52a2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import accuracy_score,r2_score\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold,KFold\n\nimport xgboost as xgb\nimport lightgbm as lgb\n\nimport warnings\nwarnings.filterwarnings('ignore')","28f377ab":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\n#test_labels = test.loc[:,'Id'].values\n\n#train.drop(\"Id\", axis = 1, inplace = True)\n#test.drop(\"Id\", axis = 1, inplace = True)","b699d3ab":"train.shape,test.shape","4891bcc1":"train['SalePrice'].describe()","61423812":"plt.figure(figsize=(8,8))\nsns.distplot(train['SalePrice'],norm_hist=True)\n\nplt.title('Sale Price Distribution')\nplt.show()","54a5eb50":"categorical = train.select_dtypes('O').columns\nprint(\"Categorical Data:\",len(categorical))\nprint(categorical)\n\nnumeric = train.select_dtypes(['int','float']).columns\nprint(\"\\nNumeric Data:\",len(numeric))\nprint(numeric)","f69ede01":"print(\"5 most correlated features\")\nn = 6\ncorr_matrix = train.corr()\ncorr_matrix.nlargest(n,'SalePrice')['SalePrice']","68de8441":"plt.figure(figsize=(8,8))\nplt.title(\"OverallQual Vs SalePrice\")\nsns.boxplot(x=train['OverallQual'],y=train['SalePrice']);","d8753de7":"sns.jointplot(x=train['GrLivArea'],y=train['SalePrice'],kind='reg')\nplt.title(\"GrLivArea Vs SalePrice\");","8d9b65cb":"sns.boxplot(x=train['GarageCars'],y=train['SalePrice'])\nplt.title(\"Garage Cars Vs SalePrice\");","9c9e0009":"rows = train [(train['GarageCars'] > 3) & (train['SalePrice'] < 300000)]\nrows = train [(train['GarageCars'] > 3) & (train['SalePrice'] < 300000)].index\n\nsns.boxplot(x=train['GarageCars'],y=train['SalePrice'])\nplt.title(\"Garage Cars Vs SalePrice\");","4050735f":"sns.jointplot(train['GarageArea'],train['SalePrice']);\nplt.title(\"Garage Area Vs Sale Price\");","cc878a30":"rows = train[(train['GarageArea'] > 1000) & (train['SalePrice'] < 300000)].index\n\ntrain = train.drop(rows)\n\nsns.jointplot(x=train['GarageArea'],y=train['SalePrice'])\nplt.title(\"Garage Area Vs SalePrice\");","66500a36":"sns.jointplot(train['TotalBsmtSF'],train['SalePrice'],kind='reg')\nplt.title(\"Total Basement Square Foot Vs Sale Price\");","2bfe1048":"#Concatenate the training and testing data for easy clean up\nhousing_df = pd.concat([train, test], keys=['train', 'test'])","10c2b75f":"#PoolQC : NA means \"No Pool\"        \nhousing_df['PoolQC'] = housing_df['PoolQC'].fillna('NoPOOL')\n\n#MiscFeature : NA means \"no misc feature\"\nhousing_df['MiscFeature'] = housing_df['MiscFeature'].fillna(\"NOMISC\")\n\n#Alley : NA means \"no alley access\"\nhousing_df['Alley'] = housing_df['Alley'].fillna('NOACCESS')\n\n#Fence : NA means \"no fence\"\nhousing_df['Fence'] = housing_df['Fence'].fillna('NOFENCE')\n\n#FireplaceQu : NA means \"no fireplace\"\nhousing_df['FireplaceQu'] = housing_df['Fence'].fillna('NOFP')\n\n#LotFrontage : fill it with median\nhousing_df['LotFrontage'] = housing_df['LotFrontage'].fillna(housing_df['LotFrontage'].median())\n\n#GarageType, GarageFinish, GarageQual and GarageCond : Replacing missing data with \"None\".\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    housing_df[col] = housing_df[col].fillna('None')\n\n#GarageYrBlt, GarageArea and GarageCars : Replacing missing data with 0.\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    housing_df[col] = housing_df[col].fillna(0)\n\n#BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath: Replace with 0\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath','BsmtHalfBath'):\n    housing_df[col] = housing_df[col].fillna(0)\n            \n#BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : replace  NaN with 'NOBASE'.\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure','BsmtFinType1','BsmtFinType2'):\n    housing_df[col] = housing_df[col].fillna('NOBASE')\n\n#MasVnrArea and MasVnrType :  fill 0 for the area and None for the type.\nhousing_df['MasVnrArea'] = housing_df['MasVnrArea'].fillna(0)\nhousing_df['MasVnrType'] = housing_df['MasVnrType'].fillna('None')\n\n#MSZoning (The general zoning classification) : Fill with mode\nhousing_df['MSZoning'] = housing_df['MSZoning'].fillna(housing_df['MSZoning'].mode)\n\n#Utilities : drop \nhousing_df = housing_df.drop(['Utilities'],axis=1)\n\n#Functional : data description says NA means typical.\nhousing_df['Functional'] = housing_df['Functional'].fillna('Typical')\n\n#Electrical : one NA value,set it to mode\nhousing_df['Electrical'] = housing_df['Electrical'].fillna(housing_df['Electrical'].mode()[0])\n\n#KitchenQual: one NA value,set it to mode\nhousing_df['KitchenQual'] = housing_df['KitchenQual'].fillna(housing_df['KitchenQual'].mode()[0])\n\n#Exterior1st and Exterior2nd : one NA value each,set it to mode\nhousing_df['Exterior1st'] = housing_df['Exterior1st'].fillna(housing_df['Exterior1st'].mode()[0])\nhousing_df['Exterior2nd'] = housing_df['Exterior2nd'].fillna(housing_df['Exterior2nd'].mode()[0])\n\n#SaleType : one NA value each,set it to mode\nhousing_df['SaleType'] = housing_df['SaleType'].fillna(housing_df['SaleType'].mode()[0])\n\n#MSSubClass : replace missing values with None\nhousing_df['MSSubClass'] = housing_df['MSSubClass'].fillna('None')\n\n#Total Square Foot\nhousing_df['TotalSF'] = housing_df['TotalBsmtSF'] + housing_df['1stFlrSF'] + housing_df['2ndFlrSF']\n\nhousing_df.drop(['TotalBsmtSF', '1stFlrSF', '2ndFlrSF'], axis=1, inplace=True)","4ab42907":"housing_df['MSSubClass']   = housing_df['MSSubClass'].astype(str)\nhousing_df['OverallCond']  = housing_df['OverallCond'].astype(str)\nhousing_df['KitchenAbvGr'] = housing_df['KitchenAbvGr'].astype(str)\nhousing_df['YrSold']       = housing_df['YrSold'].astype(str)\nhousing_df['MoSold']       = housing_df['MoSold'].astype(str)\nhousing_df['MSZoning']     = housing_df['MSZoning'].astype(str)","c869c3bf":"#housing_df.drop(['Fireplaces', 'FireplaceQu','Fireplaces', 'FireplaceQu','YrSold', 'MoSold','Condition1', 'Condition2','Exterior1st', 'Exterior2nd','RoofMatl', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'Heating', 'LowQualFinSF',\n#               'BsmtFullBath', 'BsmtHalfBath', 'Functional', 'GarageYrBlt', 'GarageArea', 'GarageCond', 'WoodDeckSF',\n#               'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal'],\n#              axis=1, inplace=True)","31d18c3a":"from sklearn.preprocessing import LabelEncoder\nlabel = LabelEncoder()\n\ncategorical = ( 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold','BldgType','Condition1' ,'Condition2'  ,'Electrical', 'Exterior1st', 'Exterior2nd' ,'Foundation', 'GarageType', 'Heating' \n        ,'HouseStyle', 'KitchenAbvGr', 'LandContour', 'LotConfig','MiscFeature', 'Neighborhood' ,'RoofMatl' ,'RoofStyle', 'SaleCondition',\n         'SaleType','MasVnrType','MSZoning')\n\nfor col in categorical:\n    label.fit(housing_df[col].values)\n    housing_df[col] = label.transform(housing_df[col].values)\n    \nhousing_df.head()","245bdfb9":"housing_df = pd.get_dummies(housing_df)\nhousing_df","65c90569":"housing_df_standardized = housing_df[housing_df.columns[~housing_df.columns.isin(['Id','SalePrice'])]]\n\nhousing_df_standardized = (housing_df_standardized - housing_df_standardized.mean())\/housing_df_standardized.std()\n\nhousing_df_standardized['Id'] = housing_df.loc[:,'Id']\n\nhousing_df_standardized['SalePrice'] = housing_df.loc[:,'SalePrice']\n","78112b4f":"#Seperate the train labels - target and features\ntrain_labels = housing_df_standardized.loc['train','SalePrice']\ntrain_data = housing_df_standardized.loc['train'].drop(['Id','SalePrice'],axis=1).select_dtypes(include=[np.number])\n\n#Extract the Id for test_label\ntest_label = housing_df_standardized.loc['test','Id']\ntest_data = housing_df_standardized.loc['test'].drop(['Id','SalePrice'],axis=1).select_dtypes(include=[np.number])\n#","2046bdd0":"X = train_data.copy()\ny = train_labels.copy()\nX_submission = test_data.copy()","d8907e17":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3)","797ce22a":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=3, max_features='sqrt',\n                                               min_samples_leaf=15, min_samples_split=10, loss='huber')\ngbr = GBoost.fit(X_train.values, y_train.values)\n\n#cross_val_score(GBoost, X_test.values, y_test.values, cv=5)\n#print(\"GBoost Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))\n#sale_pred = model_gboost.predict(X_submission)\n\nprint(\"Random Forest Regressor Score :\",gbr.score(X_test,y_test))","eec04d77":"#pd.DataFrame({'Id': test_label, 'SalePrice': sale_pred}).to_csv('my_submission_gsb.csv', index =False)    #","68dde364":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import VotingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor","676ecf9a":"lr= LinearRegression()\nlr.fit(X_train,y_train)\n\nprint(\"Linear Regression Accuracy :\",lr.score(X_test,y_test))","bc204fd8":"rfr= RandomForestRegressor(n_estimators=3000,max_depth=4, random_state=0)\nrfr.fit(X_train,y_train)\n\nprint(\"Random Forest Regressor Score :\",rfr.score(X_test,y_test))","7069830c":"dr= DecisionTreeRegressor(max_depth=4,random_state=0)\ndr.fit(X_train,y_train)\n\nprint(\"Decision Tree Regressor Score :\",dr.score(X_test,y_test))","dd99cabe":"br = BaggingRegressor()\nbr.fit(X_train,y_train)\nprint(\"Bagging Regressor Score :\",br.score(X_test,y_test))","f6e16763":"adar = AdaBoostRegressor(random_state=0,n_estimators=1000)\nadar.fit(X_train,y_train)\n\nprint(\"AdaBoost Regressor Score :\",adar.score(X_test,y_test))","8cbbb060":"voting_r = VotingRegressor(estimators=[('Linear Regression', lr),(\"Random Forest Regressor\",rfr),(\"Decsion Tree Regressor\",dr),(\"Bagging Regressor\",br),(\"AdaBoost Regressor\",adar),(\"Gradient Boost Regressor\",gbr)],n_jobs=-1)\n\nvoting_r.fit(X_train,y_train)\n\nprint(\"Voting Regressor Score :\",voting_r.score(X_test,y_test))","a010197f":"sale_pred = voting_r.predict(X_submission)\npd.DataFrame({'Id': test_label, 'SalePrice': sale_pred}).to_csv('my_submission_voting.csv', index =False)    #","4f57945e":"    80 is a lot of feature to analyse. So let's just concentrate on 5 most correlated features with the \n    Sale Price which is our target","85d04aeb":"    This will be our approach at predicting the price of an unknown house - \n\n    1. Load pacakages and data\n    2. Analyse Sale Price \n    3. Multivariate Analysis\n    4. Cleaning and Imputing Missing Data\n    5. Feature Engineering\n    6. Modeling and Prediction","f5aca35b":"**2. Analyse Sale Price**","921de0b9":"**Housing Sale price prediction -**\n\n    What are the important things to consider when one thinks of buying a house?\n\n    1. Locality ( a safe, secure and friendly neighborhood)\n    2. Square Foot\n    3. Number of bedrooms\n    4. Number of Bathrooms\n    5. Kitchen\n    6. Garage and Basement\n    7. Year of built \n    8. New or resale house\n    9. Additional Utilities\n    10. Ofcourse a resonable Price for the house with all required features.\n    \n    Well, the above features will definitely give an idea of the Price of the house theoritically . But \n    will our ML algorithm be able to predict accurately, if so, how accurately?","84d9548e":"**1. Load packages and data**","5b994b41":"    We will ignore Saleprice and plot the correlation with rest with SalePrice\n        \n    OverallQual : Rates the overall material and finish of the house (1= Very Poor,10 = Very Excellent)\n    GrLivArea   : Above grade (ground) living area square feet\n    GarageCars  : Size of garage in car capacity\n    GarageArea  : Size of garage in square feet\n    TotalBsmtSF : Total square feet of basement area","17b8c504":"*More number of Garage-Cars, should have more Saleprice. But in the boxplot above, 4-car garage has very less sale price. Let's get rid of this outlier and plot again.*","7846230b":"    Exclude the Id and SalePrice in scaling.","2c0e2ea1":"**4. Imputing Missing Values**","0c6e036e":"    Looks like this too has some outliers. More Garage area has less Saleprice","7f0df7bd":"    Lowest Sale Price     : $ 34900\n    Highest Sale Price    : $ 755000\n    Average Sale Price    : $ 180921 \n\n    This can be visualized using the seaborn distribution plot\n    \n    It will be interesting to understand what factors contribute to the price of a house","261d6299":"    LabelEncoding of the features below ","116a18a7":"  **3. Multivariate Analysis**\n  \n      The dataset has 2 types of features - numeric and categorical"}}