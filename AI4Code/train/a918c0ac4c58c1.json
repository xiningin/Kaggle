{"cell_type":{"fbbefa17":"code","d173745e":"code","4dbd9f5d":"code","83933f50":"code","3fddffc2":"code","a864c6a1":"code","2094a19a":"code","a0c727d6":"code","02f8780e":"code","b4e37291":"code","f18ab7df":"code","dee173a8":"code","590405ac":"code","37a7cb7f":"code","30988476":"code","20922e50":"code","a7a807e9":"code","47a48a88":"code","092b8da2":"code","55d7aac6":"code","c1029d7f":"code","65414ca8":"code","756f731e":"code","312b4b2c":"code","932bcb47":"code","934fd6ab":"code","ba9af145":"code","90bdac28":"code","85e0170d":"code","970daff5":"code","02bb2796":"code","e1689504":"code","815a0686":"code","17f5ec39":"code","8b9cba2f":"code","8ad587ac":"code","5888f111":"code","461aa10d":"code","70b8764a":"code","cca06574":"code","99667857":"code","41dd16a4":"code","f7e24ba1":"code","ece82539":"code","8af7a101":"code","7fdc63ad":"code","dd7a08b9":"code","67658464":"code","26f5c4ec":"code","b8db0938":"code","32d3e87d":"code","77e4a7ac":"code","6f17b823":"code","6d24f7eb":"code","73e47120":"code","8ba671d4":"code","9aa59ed7":"code","3e9075d1":"code","26f65ed4":"code","ffd479d3":"code","7b8368d5":"code","50feec49":"code","be35d340":"code","ff038cc4":"code","07334341":"code","75cfdcb1":"code","4bc08c78":"code","5d581c44":"code","adab264d":"code","318a6775":"code","1d1c0aaa":"code","c0cb2c7d":"code","a8dce512":"code","c10d4727":"code","5e1ad46e":"code","fffe7ef7":"code","02b76a99":"markdown","d7caee18":"markdown","79d82de6":"markdown","16adc8c3":"markdown","20e2908f":"markdown","27767fd8":"markdown","9138ee1d":"markdown","a841307c":"markdown","11333507":"markdown"},"source":{"fbbefa17":"# import the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats as st\nsns.set(color_codes=True)\n\n#Visualize plots within the notebook\n\n%matplotlib inline","d173745e":"#Importing the dataset\ndata = pd.read_csv('..\/input\/hr-data\/HR_Employee_Attrition_Data.csv')","4dbd9f5d":"#Check if the data is imported correctly\ndata.sample(5)           ","83933f50":"#Finding the description of data\n\ndata.describe()","3fddffc2":"#Check the datatypes , shape to know more about data\nprint(data.shape)\nprint(data.dtypes)","a864c6a1":"#Check any duplicated data\n\ndata[data.duplicated()]","2094a19a":"#Finding the missing values\n\ndata.isnull().sum()","a0c727d6":"data.sample(5)","02f8780e":"#We will seperate","b4e37291":"## Finding the outliers first\n\nQ1 = data.quantile(0.25)\nQ3 = data.quantile(0.75)\nIQR = Q3 - Q1\n## We will only consider 99.3 percentile useful data for our analysis and remove remaining 0.7 percentile data below or above it\nmini = Q1 - 1.5 * IQR\nmaxi = Q3 + 1.5 * IQR\ndata = data[~((data < mini) | (data > maxi)).any(axis = 1)]\nmini\n","f18ab7df":"##Lets map attrition rate Yes - 1 , No : 0\nat = {'Yes' : 1 , 'No' : 0}\n\ndata['Attrition'] = list(map(lambda x : at[x] , data.Attrition))","dee173a8":"##Drop unnecessary columns that do not effect the attrition\n\ndata.drop(columns = ['EmployeeCount', 'EmployeeNumber', 'Over18' , 'StandardHours'] , inplace = True)\n\n","590405ac":"data.shape\n","37a7cb7f":"plt.figure(figsize = (16,6))\nsns.distplot(data.Age, kde = False , color = 'blue',  hist_kws={\"alpha\": 1})\nsns.distplot(data[data.Attrition == 1].Age , color = 'orange', kde = False , hist_kws={\"alpha\": 1})","30988476":"### Lets visualize the percentage of males wrt females \n\nsns.countplot(x = 'Gender' , hue = 'Attrition' , data = data)\n\n","20922e50":"### Lets draw pairplot to have better understanding for the relationships between data\n\n##https:\/\/towardsdatascience.com\/exploratory-data-analysis-in-python-c9a77dfa39ce\n\n##https:\/\/medium.com\/@monikapdb\/employee-attrition-analysis-using-machine-learning-methods-73564358e87f","a7a807e9":"plt.subplots(figsize =(10,6))\nc = data.corr()\nsns.heatmap(c, cmap = 'coolwarm', annot = False)","47a48a88":"\n##Corelation shows that Age, Joblevel, Monthly Income, TotalWorkingYears, YearsAtCompany , YearsInCurrentRole ,         \n##YearsSinceLastPromotion , YearsWithCurrManager   are important features for analysis.        \n","092b8da2":"(data.PerformanceRating == 3)","55d7aac6":"data.drop('PerformanceRating' , axis = 1 , inplace = True)","c1029d7f":"##Visualize the monthly income\n##Let us bin the monthly salary first\n\nbins = [1000, 1500 , ]\ndf['binned'] = pd.cut(df['percentage'], bins)\nprint (df)","65414ca8":"df[df.MonthlyIncome > 12000]","756f731e":"##whats the avg no of people where salary > 12000 and attrition == 0\ndata[(data.MonthlyIncome > 12000) & (data.Attrition == 0)].shape\n\n","312b4b2c":"sns.barplot(x = 'MonthlyIncome' , y = 'JobLevel', data = data)","932bcb47":"#https:\/\/towardsdatascience.com\/why-feature-correlation-matters-a-lot-847e8ba439c4\n\n# list(map(lambda x : ( x , x + 1499) , range(1000, 17000, 1499)))\n\nl = []\ndef f(start):\n    nextval = 0\n    while(nextval <= 17000):\n        x = start\n        nextval = start + 1499\n        l.append((x, nextval))\n        start = nextval + 1\n    return l\nbins = f(1000)\nbins\n\nMI = pd.DataFrame(bins)","934fd6ab":"MI","ba9af145":"data[['MonthlyIncome', 'Attrition']]","90bdac28":"data['Yes'] = pd.cut(data[data['Attrition'] == 1].MonthlyIncome , 10)\n# pd.cut(data['MonthlyIncome'], 10)","85e0170d":"data['MonthlyIncome']","970daff5":"data.drop('Yes' , axis = 1, inplace = True)","02bb2796":"data.shape","e1689504":"\ndf = pd.DataFrame({\n    'AT': data[data['Attrition'] == 1].MonthlyIncome,\n    'NAT': data[data['Attrition'] == 0].MonthlyIncome\n})","815a0686":"df","17f5ec39":"custom_bucket_array = np.linspace(1000, 20000, 9, dtype = 'int')\ncustom_bucket_array\n","8b9cba2f":"df['AT'] = pd.cut(df['AT'], custom_bucket_array)\ndf['NAT'] = pd.cut(df['NAT'], custom_bucket_array)\ndf.head()","8ad587ac":"df","5888f111":"data[['MonthlyIncome', 'Attrition']]","461aa10d":"\na = df.groupby('AT').size()\nb = df.groupby('NAT').size()\nplt.figure(figsize = (16,6))\ncategories = df['NAT'].cat.categories\nind = np.array([x for x, _ in enumerate(a.index)])\nwidth = 0.35    \nplt.bar(x = ind, height = a, width = 0.35, label='Attrition')\nplt.bar(ind + width, b, width,\n    label='No Attrition')\n\nplt.xticks( ind + width \/ 2  , labels = a.index, fontweight = 'bold')\nplt.legend()\nplt.xticks(rotation = 90)\nplt.yticks(fontweight = 'bold')\nplt.show()\n\n\n\n","70b8764a":"np.random.normal(10, 3, (3,3))","cca06574":"import random\nrandom.randrange(1,20, size = (2,1))","99667857":"type(np.random.randint(10, size=(3,4,5)))","41dd16a4":"np.array(np.random.randint(1,20,(2,2)))","f7e24ba1":" np.array([[1,2,3],[4,5,6], [9,0, 2]])","ece82539":"x = np.array([3,4,5])\ngrid = np.array([17,18,19])\nnp.concatenate([x,grid])\n","8af7a101":"np.array([[9],[9]])","7fdc63ad":"income = np.random.randint(1000, 9000, 9000).reshape(9000,1)\nattrition = np.random.randint(0,2,9000).reshape(9000,1)\ntest = np.random.randint(3,6,9000).reshape(9000,1)\ndf = pd.DataFrame(np.hstack([income, attrition, test]), columns = ['income', 'attrition', 'test'])\ndf.head()","dd7a08b9":"r = pd.cut(df.income, np.arange(1000, 9001, 500))\n\n","67658464":"print(r.index)","26f5c4ec":"dat = df.groupby([r, 'attrition']).count().unstack()\ndat","b8db0938":"s = pd.Series(['x',2,7,1], index = list('ABCD'))\ns","32d3e87d":"pd.DataFrame(s).reset_index()","77e4a7ac":"\ndat.columns = dat.columns.droplevel()\ndat.head()\n","6f17b823":"dat","6d24f7eb":"row_sum = dat.sum(axis = 1)\nrow_sum.head()","73e47120":"dat.iloc[:,0] = dat.iloc[:,0]\/ row_sum * 100\ndat.iloc[:,1] = dat.iloc[:,1]\/ row_sum * 100","8ba671d4":"dat","9aa59ed7":"df.plot(kind = 'bar', stacked = True)","3e9075d1":" df1 = pd.DataFrame({'id':[1,1,1,2,2,2,2,3,4],'value':[1,2,3,1,2,3,4,1,1]})\n df1","26f65ed4":"df1.loc[:3, ['id', 'value']]","ffd479d3":"df1.groupby('id').apply(lambda x: x['value'].reset_index()).reset_index()","7b8368d5":"stocks = pd.read_csv('http:\/\/bit.ly\/smallstocks')","50feec49":"data","be35d340":"ser = data.groupby(['Attrition', 'BusinessTravel']).Age.mean()\nser","ff038cc4":"ser.unstack()","07334341":"dta = data.pivot_table(values = 'Age', index = 'Attrition', columns = 'BusinessTravel' , aggfunc = 'mean')\ndta","75cfdcb1":"ser","4bc08c78":"ser.loc[, 'Travel_Rarely']","5d581c44":"ser","adab264d":"data.head(50)","318a6775":"##dataframe with multiindex\n\ndata.set_index(['Attrition' , 'BusinessTravel'], inplace = True)","1d1c0aaa":"data.sort_index(inplace = True)","c0cb2c7d":"data.loc['No', 'Travel_Rarely']","a8dce512":"data.loc['No']","c10d4727":"data['Age'][(data.Age > 32) & (data.Attrition == 'Yes')]","5e1ad46e":"def addition(n): \n    return n + n \n  \n# We double all numbers using map() \nnumbers = (1, 2, 3, 4) \nresult = map(addition, numbers) \nprint(list(result)) \n","fffe7ef7":"data['title'] = [0] * dataset[]","02b76a99":"#MonthlyIncome also depends on JobLevel, TotalWorkingYears (See Correlation map)\n### What is the joblevel and workingyears of the employees that determine their monthly income?","d7caee18":"### What is the age group of the employees where attrition occurs maximum? ","79d82de6":"### Cleaning the data","16adc8c3":"## The average performance rating is 3 for all employees where attrition is Yes.","20e2908f":"### We can conclude that maximum employees age between 28 - 38 years and  attrition is maximum at 25 -35 years.","27767fd8":"## Work In Progress\n**Problem Statement -** \n\n **Given the data of the employees of a company, predict the attrition, so that HR can take preventive measure controls to minimze it.**\n \n**Analysis Required**\n- Does the data actually helps us to predict  attrition rate?\n- What are the features that may contribute for attrition?\n- How can we decrease the attrition?**\n**","9138ee1d":"### We can conclude that there are only avg of 4 people where monthlyincome > 12000, where Attrition is True","a841307c":"### Data Exploration","11333507":"### We can conclude attrition of males are nearly as twice as females."}}