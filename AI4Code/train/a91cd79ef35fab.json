{"cell_type":{"79570108":"code","0776b314":"code","64ee3a06":"code","bf175142":"code","b82bb92d":"code","304d4356":"code","dc9a2c15":"code","860cd817":"code","31081417":"code","5fc71114":"code","58417a23":"code","6d317ab1":"code","dffc901f":"code","d5a94643":"code","19d29007":"code","8a13bc1a":"code","9b6dbaa1":"code","0a148913":"code","d9e75e6c":"code","5c08b40c":"code","6cb55c01":"code","27bc98f9":"code","26c4260b":"code","d009cbc3":"code","30c2a5ac":"code","fb7d6058":"code","aa780133":"code","b0994a32":"code","675ce8ce":"code","f9fc71e6":"code","ecd98860":"code","91591633":"code","bb9b13af":"code","ad8c5319":"code","1692022d":"code","356d1414":"code","8deb1be7":"code","af5585e1":"code","e5e1bcb0":"code","6d3f8b82":"code","8ec8683f":"code","3665cabd":"code","17a27757":"code","f56e6ff9":"code","487e65cb":"code","79248946":"code","b76b7b6a":"code","10388086":"code","12bed8be":"markdown","66d3d136":"markdown","9b4cbbf4":"markdown","2cd18ba6":"markdown","dc6d80db":"markdown","b29de9f7":"markdown","d6efc5be":"markdown","46d74a3b":"markdown","6995113a":"markdown","2eed1a8a":"markdown","c3b45013":"markdown","b919b1a1":"markdown","05b7b8f4":"markdown","bc6bce21":"markdown","087abb2a":"markdown","457b15af":"markdown","80f206d1":"markdown"},"source":{"79570108":"import pandas as pd              # \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","0776b314":"df_train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_train.head()","64ee3a06":"df_train.info()","bf175142":"df_train.describe()","b82bb92d":"df_train.describe(include=['O']) #showing the descriptive statistics of object datatype","304d4356":"df_train.isnull().sum() #count the missing or null value","dc9a2c15":"df_train.isnull()","860cd817":"df_train.shape","31081417":"df_test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","5fc71114":"df_test.head(10)","58417a23":"df_test.shape","6d317ab1":"df_test.info()","dffc901f":"df_test.isnull().sum()","d5a94643":"survived=df_train[df_train['Survived']==1]\nnot_survived=df_train[df_train['Survived']==0]\nprint(\"Survived: %i (%.1f%%)\"%(len(survived),float(len(survived))\/len(df_train)*100.0))\nprint(\"Not Survived: %i (%.1f%%)\"%(len(not_survived),float(len(not_survived))\/len(df_train)*100.0))\nprint(\"Total: %i\"%len(df_train))","19d29007":"sns.barplot(x='Pclass',y='Survived',data=df_train)","8a13bc1a":"sns.barplot(x='Sex',y='Survived',data=df_train)","9b6dbaa1":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=df_train,palette='RdBu_r')","0a148913":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=df_train,palette='rainbow')","d9e75e6c":"plt.xlabel(\"Age of the passanger\",fontsize=18)\nplt.ylabel(\"Count\",fontsize=18)\nplt.title(\"Age histogram of the passanger\",fontsize=22)\ndf_train['Age'].hist(bins=30,color='darkred',alpha=0.7,figsize=(10,6))","5c08b40c":"plt.figure(figsize=(10,6))\nplt.xlabel(\"Passanger class\",fontsize=18)\nplt.xlabel(\"Age\",fontsize=18)\nsns.boxplot(x='Pclass',y='Age',data=df_train,palette='winter')","6cb55c01":"df_train.Embarked.value_counts()","27bc98f9":"df_train.groupby('Embarked').Survived.value_counts()","26c4260b":"df_train[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean()","d009cbc3":"sns.barplot(x='Embarked',y='Survived',data=df_train) #train.groupby('Embarked').Survived.mean().plot(kind='bar')","30c2a5ac":"sns.barplot(x='Parch',y='Survived',ci=None,data=df_train) #ci=None will hide the error bar","fb7d6058":"f_class_Age=df_train.groupby('Pclass')['Age'].mean()\nf_class_Age=pd.DataFrame(f_class_Age)\nf_class_Age.plot.bar(y='Age')\nplt.title(\"Average Age of passengers by class\",fontsize=17)\nplt.ylabel(\"Age (years)\",fontsize=17)\nplt.xlabel(\"Passenger Class\",fontsize=17)","aa780133":"a=list(f_class_Age['Age'])\ndef impute_age(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    if pd.isnull(Age):\n        if Pclass==1:\n            return a[0]\n        elif Pclass==2:\n            return a[1]\n        else:\n            return a[2]\n    else:\n        return Age","b0994a32":"df_train['Age']=df_train[['Age','Pclass']].apply(impute_age,axis=1)\nd=df_train.describe()\ndT=d.T\ndT.plot.bar(y='count')\nplt.title(\"Bar plot of the count of numberic features\",fontsize=17)","675ce8ce":"df_train.drop('Cabin',axis=1,inplace=True)\ndf_train.dropna(inplace=True)\ndf_train.head()","f9fc71e6":"df_train.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)\ndf_train.head()","ecd98860":"sex=pd.get_dummies(df_train['Sex'],drop_first=True)\nembark=pd.get_dummies(df_train['Embarked'],drop_first=True)","91591633":"df_train.drop(['Sex','Embarked'],axis=1,inplace=True)\ndf_train=pd.concat([df_train,sex,embark],axis=1)\ndf_train.head()","bb9b13af":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(df_train.drop('Survived',axis=1),\n                                               df_train['Survived'],test_size=0.10,\n                                               random_state=111)","ad8c5319":"from sklearn.linear_model import LogisticRegression","1692022d":"clf=LogisticRegression()\nclf.fit(X_train,y_train)","356d1414":"clf.score(X_train,y_train)","8deb1be7":"clf.score(X_test,y_test)","af5585e1":"y_pred=clf.predict(X_test)","e5e1bcb0":"y_pred","6d3f8b82":"from sklearn import metrics\ncnf_matrix=metrics.confusion_matrix(y_test,y_pred)\ncnf_matrix","8ec8683f":"sns.heatmap(cnf_matrix,annot=True)","3665cabd":"print(\"Accuracy:\",metrics.accuracy_score(y_test,y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test,y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test,y_pred))","17a27757":"from sklearn.ensemble import RandomForestClassifier\nclf=RandomForestClassifier(n_estimators=50)\nmodel=clf.fit(X_train,y_train)","f56e6ff9":"y_pred=clf.predict(X_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\ncnf=confusion_matrix(y_pred,y_test)","487e65cb":"cnf","79248946":"classificationreport=classification_report(y_pred,y_test)\nprint(classificationreport)","b76b7b6a":"acc=accuracy_score(y_pred,y_test)\nacc","10388086":"y_pred_proba=clf.predict_proba(X_test)[::,1]\nfpr,tpr,_=metrics.roc_curve(y_test,y_pred_proba)\nauc=metrics.roc_auc_score(y_test,y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","12bed8be":"Here, you can see the confusion matrix of the array object. The dimension of this matrix is 2*2 because this model is binary classification. You have two classes 0 and 1. Diagonal values represent accurate predictions, while non-diagonal elements are inaccurate predictions. In the output 51 and 27 are actual predictions, while 2 and 9 are incorrect predictions.","66d3d136":"Receiver Operating Characteristic (ROC) Curve is a plot of the true positive rate against the false positive rate. It shows the tradeoff between sensitivity and specificity.","9b4cbbf4":"**Convert categorical feature like 'Sex' and 'Embarked' to dummy variables**","2cd18ba6":"**Data wrangling (impute and drop )\ni) Impute age (by averaging) ii) Drop unnecessary features iii) Convert categorical features to dummy variables**","dc6d80db":"**How does the age difference looks within the Passanger classes?\nIt looks like that the average age is different for three classes and it generally decreases from 1st class to 3rd class.**","b29de9f7":"******Apply Logistic Regression Algorithm******","d6efc5be":"********Data Visualization********","46d74a3b":"********ROC Curve********","6995113a":"**Drop Cabin and any other null value**","2eed1a8a":"**Embarked vs Survived**","c3b45013":"**Parch vs Survived**","b919b1a1":"**How does the overall age distribution looks like?**********************","05b7b8f4":"Precision: Precision is about being precise i.e., how accurate your model is. In other words, you can say, when a model makes a prediction, how often it is correct. In your prediction case, when your Logistic Regression model predicted passanger are going to survive or not, that patients have 90% of the time.\nRecall: If there are patients who have survived in the test set and your Logistic Regression model can identify it 75% of the time.","bc6bce21":"**Define a function to impute (fill up missing values) age feature**","087abb2a":"****IMPORTING THE TITANIC DATASET train.csv************","457b15af":"********Prediction of survival outcome on Titanic Data********","80f206d1":"****Confusion Matrix****"}}