{"cell_type":{"5fc6e265":"code","59198e17":"code","708ced33":"code","3b45d088":"code","1d8689ce":"code","476cefb7":"code","a08149af":"code","72bd4b26":"code","2cf93d7f":"code","03abcbc5":"code","0fde18b2":"code","6f12f018":"code","eab471e1":"code","b70bd7e2":"code","7fee151c":"code","d25e1b2d":"code","f24213f5":"code","079708a1":"code","a439a5de":"code","6c2d380d":"code","684817d7":"code","f575fc25":"code","fa856ebd":"code","2a373338":"code","7f8c7930":"code","bf667ce7":"code","b2f68418":"code","757cab42":"code","002c7b49":"code","b1dc177c":"markdown","736ca8fc":"markdown","2438e742":"markdown","73348da0":"markdown","5c737cd4":"markdown","d6b39abe":"markdown","8aad663e":"markdown","20d15545":"markdown","c7ed8e91":"markdown","43111003":"markdown","8137c236":"markdown","841d632c":"markdown","0c1f067c":"markdown","dc30caec":"markdown","64c2d847":"markdown","cd20e3cc":"markdown","6ac9cbde":"markdown","1ae2f84e":"markdown","8a856917":"markdown","48b4e829":"markdown"},"source":{"5fc6e265":"pip install quick-eda","59198e17":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport quick_eda\nfrom quick_eda.df_eda import df_eda\nfrom quick_eda.column_eda import column_eda\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix","708ced33":"# Not limiting the column number when displaying dataframe\npd.set_option(\"display.max_columns\", None)","3b45d088":"df = pd.read_csv(\"..\/input\/machine-predictive-maintenance-classification\/predictive_maintenance.csv\", sep = \",\", skipinitialspace = True)\ndf.head()","1d8689ce":"df_eda(df)","476cefb7":"column_eda(df, \"Failure Type\")","a08149af":"df[\"Failure Type\"].unique()","72bd4b26":"df[\"Failure Type\"].value_counts()","2cf93d7f":"vc = df[\"Failure Type\"].value_counts()\n\nplt.title(\"Occurences of Failure Types\", fontsize=16)\n\nlabels = [\"No Failure\", \"Heat Dissipation Failure\", \"Power Failure\", \"Overstrain Failure\", \"Tool Wear Failure\", \"Random Failures\"]\n\nvc.plot(kind=\"pie\", figsize=(21,21), startangle=360)\n\nplt.legend(fontsize=13)\nplt.show()","03abcbc5":"correlations = df.corr()\n\nplt.figure(figsize=(16, 16))\nplt.title(\"Heatmap displaying the correlations between all columns\", fontsize=20)\nsns.heatmap(correlations, annot=True, cmap=\"YlGnBu\", cbar_kws={'label': 'Correlation Value'})","0fde18b2":"df[\"Product ID\"] = df[\"Product ID\"].astype(\"str\")\ndf[\"Type\"] = df[\"Type\"].astype(\"str\")\ndf[\"Failure Type\"] = df[\"Failure Type\"].astype(\"str\")\n\nnumber = preprocessing.LabelEncoder()\n\ndf[\"Product ID\"] = number.fit_transform(df[\"Product ID\"])\ndf[\"Type\"] = number.fit_transform(df[\"Type\"])\ndf[\"Failure Type\"] = number.fit_transform(df[\"Failure Type\"])","6f12f018":"X = df.drop([\"Target\"], axis = 1).values\ny = df[\"Target\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)","eab471e1":"scaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","b70bd7e2":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","7fee151c":"model = DecisionTreeClassifier(criterion = \"entropy\")\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","d25e1b2d":"model = KNeighborsClassifier(n_neighbors = 5)\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","f24213f5":"y_test_pred = model.predict(X_test)","079708a1":"# Predicted y values\nprint(y_test_pred)","a439a5de":"# Real y values\nprint(y_test)","6c2d380d":"confusion_matrix(y_test, y_test_pred)","684817d7":"X = df.drop([\"Failure Type\"], axis = 1).values\ny = df[\"Failure Type\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)","f575fc25":"scaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","fa856ebd":"model = LogisticRegression(multi_class = \"multinomial\", solver = \"saga\")\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","2a373338":"y_test_pred = model.predict(X_test)","7f8c7930":"# Predicted failure types\nprint(y_test_pred) # Failure types are labeled (1 being no failure and so on...)","bf667ce7":"predicted_failure_types = number.inverse_transform(y_test_pred)\npredicted_failure_types","b2f68418":"# Real failure types\nprint(y_test)","757cab42":"real_failure_types = number.inverse_transform(y_test)\nreal_failure_types","002c7b49":"confusion_matrix(y_test, y_test_pred)","b1dc177c":"### Correlation Matrix","736ca8fc":"### Evaluating model through prediction on test data","2438e742":"### Scaling data","73348da0":"### Logistic Regression","5c737cd4":"### quick_eda on column \"Failure Type\"","d6b39abe":"### Evaluating by checking if correct failure types were pedicted","8aad663e":"# <h2 style = \"font-size: 40px; border:0; color:black\"><b>DATA OVERIVIEW & GRAPHICS<\/b><\/h2>","20d15545":"# <h2 style = \"font-size: 40px; border:0; color:black\"><b>PREDICTING TARGET<\/b><\/h2>","c7ed8e91":"<div>\n<img src = \"https:\/\/blog.advids.co\/wp-content\/uploads\/\/2017\/09\/analytics.gif\" width = \"1000\"\/>\n<\/div>","43111003":"### Splitting data","8137c236":"# <h2 style = \"font-size: 40px; border:0; color:black\"><b>IMPORTING REQUIRED LIBRARIES<\/b><\/h2>","841d632c":"### Pie Chart showing the different Failure Types","0c1f067c":"# <h2 style = \"font-size: 40px; border:0; color:black\"><b>LOADING AND DISPLAYING DATA<\/b><\/h2>","dc30caec":"# <h1 style = \"font-size: 80px; border:0; color:black\"><b>Machine Failure Prediction<\/b><\/h1>","64c2d847":"|                   | Model: Not True | Model: True    |\n|-------------------|-----------------|----------------|\n| Reality: Not True | True negative   | False positive |\n| Reality: True     | False negative  | True positive  |","cd20e3cc":"# <h2 style = \"font-size: 40px; border:0; color:black\"><b>PREDICTING FAILURE TYPE<\/b><\/h2>","6ac9cbde":"### quick_eda on whole dataframe","1ae2f84e":"### KNN","8a856917":"### Decision Tree","48b4e829":"### Label Encoding data"}}