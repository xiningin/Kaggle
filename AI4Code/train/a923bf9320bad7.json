{"cell_type":{"e485d70c":"code","2173fdff":"code","beebdd2c":"code","3366b14d":"code","8f1c8f29":"code","19f88b81":"code","55673f1e":"code","6965dfe9":"code","d5c1ffe4":"code","ffc790c7":"code","be6b64d3":"markdown","cbd331b8":"markdown","44b334a5":"markdown"},"source":{"e485d70c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.patches import Rectangle\nimport matplotlib.cm as cm\nfrom mpl_toolkits.basemap import Basemap\n\n%matplotlib notebook\nplt.style.use('seaborn-white')","2173fdff":"# Importing the London Police Records dataset:\nstreet = pd.read_csv('..\/input\/london-police-records\/london-street.csv')\n\nstreet.drop(['Crime ID', 'Context'], axis=1, inplace=True) # removing mostly-emplty columns\nstreet.dropna(inplace=True) # removing rows with emply fields\n\n# Filtering for data from 2016 to reduce dataset size:\nstreet['Year'] = street['Month'].apply(lambda x: x.split('-')[0].strip())\nstreet = street.loc[street['Year'] == '2016']\n\n# One of the columns in street contains 'LSOA codes'.\n# In the UK, the Lower Layer Super Output Areas (LSOAs) are small\n# geographic areas used by the Office for National Statistics\n\nstreet.head()","beebdd2c":"# Preparing the data:\n\n# Grouping data by location (LSOA code) and by time. A single data point\n# correstonds to all crimes of a given type commited in one LSOA in one month,\n# e.g all bicycle thefts in LSOA E01000001 in Jun 2016.\n\ndf1 = pd.crosstab([street['LSOA code'], street['Month']], \n                  street['Crime type']) # creates a column for each crime type\ndf1.drop('Other crime', axis=1, inplace=True)\ndf1.reset_index(inplace=True)\ndf1.columns.name = None # simplifies plot labelling\ndf1.head()","3366b14d":"# Defining functions for the interactivity of the figure.\n\ncrimes = list(df1)[2:] # List crime types\n\n# The figure contains a heatmap and a correspondng scatter plot.\n# When clicked on, a tile in the heatmap is outlined and a corresponding\n# scatterplot is generated.\n\ndef plotting(xlabel, ylabel, xint, yint):\n    global outline\n    outline.remove() # remove tile outline from previous onclick event\n    scatter_ax.cla() # clear scatterplot axis\n    s = sns.scatterplot(df1[xlabel], df1[ylabel], color='navy',\n                    ax=scatter_ax, alpha = 0.2, s=80) # plot scatterplot\n    #update names of x and y axis:\n    scatter_ax.set_xlabel('%s (cases per month per LSOA)' % (xlabel))\n    scatter_ax.set_ylabel('%s (cases per month per LSOA)' % (ylabel))\n    title = ('More %s, more %s?' % (xlabel, ylabel)) # update plot's title\n    heatmap_ax.set_title(title, fontsize=16, horizontalalignment='center')\n    # draw tile outline:\n    rect = Rectangle((xint, yint),1,1,fill=False,\n                             edgecolor='navy',linewidth=2.0)\n    outline = heatmap_ax.add_patch(rect)\n\ndef onclick(event): # Defines what happens whene mouse button is pressed\n    # xdata, ydata = x, y coordinates of mouse in data coords\n    # round down the coordinates by converting float into integer,\n    # to index into the list of crimes:\n    xint = int(event.xdata) \n    yint = int(event.ydata)\n    xlabel = crimes[xint]\n    ylabel = crimes[yint]\n    \n    plotting(xlabel, ylabel, xint, yint)","8f1c8f29":"# Compute pairwise Pearson correlation between crime types.\n# A Pearson correlation is a number between -1 (negative correlation)\n# and 1 (positive correlation) that indicates the extent to which\n# two variables are linearly related (0 for no correlation)\n\ncorr = df1.corr()\ncorr.head()","19f88b81":"# corr will be plotted as heatmap with tile colours corresponding to Pearson scores\n# Data in corr dataframe is duplicated\n# To remove duplicates, generate a diagonal (istead of square) correlation matirix,\n# with repeated data hidden with a triangular mask:\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True","55673f1e":"# The scatter plot and heatmap's colorbar overlap the heatmap.\n# Hence, defining overlapping axes:\nf = plt.figure(figsize=(10, 10))\nheatmap_ax = f.add_axes([0.11, 0.11, 0.7, 0.9])\ncbar_ax = f.add_axes([0.62, 0.42, 0.3, 0.03])\nscatter_ax = f.add_axes([0.62, 0.55, 0.3, 0.3])\n\n# Figure's and plot's titles:\nf.suptitle('Do rates of different crimes correlate?',\n          fontsize=20, horizontalalignment='center',\n          weight='semibold')\nheatmap_ax.set_title('Click on tiles to see more details',\n                     fontsize=16, horizontalalignment='center')\ncbar_ax.set_title('Pearson correlation scores \\n(1: positive correlation, 0: no correlation)',\n                  horizontalalignment='center')\n\n# A Diverging colour palette with 40 categories for the heatmap:\ncmap = sns.color_palette(\"RdBu_r\", 40)\n\n# For labelling the heatmap (added line breaks into longer crime names):                 \nlabels = ['Bicycle theft', 'Burglary', 'Criminal damage\\nand arson',\n          'Drugs', 'Other theft', 'Possession of\\nweapons',\n          'Public order', 'Robbery', 'Shoplifting', 'Theft from\\nthe person',\n          'Vehicle crime', 'Violence and\\nsexual offences']\n\n# Drawing the heatmap using the Seaborn (sns) visualisation library,\n# a high-level interface for drawing pretty statistical graphics:\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0, annot=True,\n            square=True, linewidths=.5, ax=heatmap_ax,\n            xticklabels=labels, yticklabels=labels,cbar_ax = cbar_ax,\n            cbar_kws = dict(orientation='horizontal'))\n\n# Drawing a scatterplot corresponding to one tile in heatmap:\ns = sns.scatterplot(df1['Other theft'], df1['Shoplifting'], ax=scatter_ax,\n                alpha=0.2, s=80, color='navy')\n# Hiding right y axis and upper x axis\nscatter_ax.spines['right'].set_visible(False)\nscatter_ax.spines['top'].set_visible(False)\n# Lablelling the x and y axis:\nscatter_ax.set_xlabel('Burglary (cases per month per LSOA)')\nscatter_ax.set_ylabel('Shoplifting (cases per month per LSOA)')\n\n# Adding an outline to the corresponding tile in the heatmap:\nrect = Rectangle((3, 7),1,1,fill=False,\n                         edgecolor='navy',linewidth=2.0)\noutline = heatmap_ax.add_patch(rect)\n  \n# Add interactivity, triggered by pressing mouse bottom:\nf.canvas.mpl_connect('button_press_event', onclick)\n\nplt.show()","6965dfe9":"# Limiting the dataframe to cases of bike theft:\nbikes = street[['Longitude','Latitude','Last outcome category']\n              ].loc[street['Crime type'] == 'Bicycle theft']\nbikes.head()","d5c1ffe4":"# 'Last outcomes' of bike theft and their frequencies:\noutcomes = pd.DataFrame(bikes['Last outcome category'].value_counts())\n# For each outcome I manually selected a colour for plotting. In particular,\n# I picked warm colours (orange, red, brown) for the guilty party was found\n# to make them stand out from unresolved or unseccessful cases\noutcomes['Color'] = ['#00CED1','#6495ED','#66CDAA','#7B68EE','#FF4500',\n                     '#DC143C','#8B0000','#A52A2A','#7FFFD4','#FF8C00',\n                     '#FF6347','#00FF7F','#3CB371','#FF0000','#F4A460',\n                     '#A0522D','#D2691E']\noutcomes","ffc790c7":"# Plotting\n\n# A detailed map of the roads of Greater London is too big\n# to look well in the published version of this file.\n# Hence, I \"zoomed in\" and displayed only teh central part of London.\n# For a map of bike theft everywhere in Greater London,\n# use the following coordinates:\n# llcrnrlon=-0.526348576,\n# llcrnrlat=51.277394014,\n# urcrnrlon=0.347125976,\n# urcrnrlat=51.712845414,\n\nfig = plt.figure(figsize=(15, 10))\nax = fig.add_axes([0.25, 0.0, 1.0, 0.9])\n\nfig.suptitle('Where not to park your bike in central London, \\nand why not to expect to get it back when stollen',\n          fontsize=20, horizontalalignment='left',\n          weight='semibold')\n\n# Basemap in a Matplotlib extention that allows ploting on maps.\n# projection specifies the method of projecting the spherical Earth onto a flat surface\n# Mercator ('merc') is a 2D cylindrical, conformal projection\n# Every projection method causes distortions. lat_ts specifies the latitude of true scale\n# llcrnrlon, llcrnrlat, urcrnrlon and urcrnrlat define the plotted region,\n# e.g. llcrnrlor is the longitude of lower left corner of our map\nm = Basemap(resolution='c',\n            projection='merc',\n            llcrnrlon=-0.15,\n            llcrnrlat=51.49,\n            urcrnrlon=-0.05,\n            urcrnrlat=51.532,\n            lat_ts=0,\n            suppress_ticks=True);\nm.drawmapboundary(color=None)\n\n# Adding London roads from a shape file. This data comes from\n# #https:\/\/download.geofabrik.de\/europe\/great-britain\/england\/greater-london.html\n# and is an OpenStreetMap file.\n# \"shapefile\" consists of a collection of files with a common filename prefix,\n# stored in the same directory. The three mandatory files have filename\n# extensions .shp, .shx, and .dbf\n# Thus, when loading a \"shapefile\" provide a file name without extension:\nm.readshapefile('..\/input\/openstreetmap-greater-london-dec-2018\/gis_osm_roads_free_1',\n                'London', color='#ABB2B9')\n\nlat = bikes['Latitude'].values\nlon = bikes['Longitude'].values\ncolours = outcomes['Color'].to_dict() # a dict mappint outcome name to colour\n\n# Plotting locations of bike theft instances, coloured by 'Last outcome Category':\nx, y = m(lon, lat)  # transform coordinates for plotting on out map\n# Seaborn (sns) library allows using a dataframe column to color a plot: \nsns.scatterplot(x, y, ax=ax, s=20, \n                hue=bikes['Last outcome category'],\n                palette=colours)\n# Specifying legend's position:\nplt.legend(loc=0,bbox_to_anchor=(-0.25, 0.3, 0.25, 0.6))\nm","be6b64d3":"**If the number of burglaries goes up, should we expect more shoplifting?**\n\n*Looking for correlation between prevalence of  different crimes*\n\nI will plot an interactive figure consisting of a heatmap and a correspondng scatter plot.","cbd331b8":"**Where not to park your bike, and why not to expect to get it back when stollen**\n\nI plated the instances of bike theft in 2016 on a map of London's roads.\nThe instances are coloured according to the  'Last outcome'.","44b334a5":"**Playing with the London Police Records: london-street dataframe**\n\n*Two questions and two figures*"}}