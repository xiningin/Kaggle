{"cell_type":{"e7dc3224":"code","321bbe08":"code","247ee5ec":"code","365c4d70":"code","3b361159":"code","fb448ea6":"code","c516bfea":"code","891ccc6d":"code","e6647216":"code","f48d5d1c":"code","ac8c54f4":"code","f0001c9c":"code","3616e884":"code","9da1ce69":"code","bc3f569e":"code","5def0a79":"code","c730f02d":"code","6b19a91a":"code","947fe405":"code","8f480c61":"code","963b0d01":"code","200f4459":"code","d4197a73":"code","a26a5be2":"code","7e5ebc6d":"code","55be616c":"code","1790e969":"code","78621bdb":"code","ae4fedc2":"code","6a2a4c8d":"code","153dc8f6":"code","95770505":"code","8b31d3dc":"code","19bd506a":"code","cca82c9e":"code","0bc67fc0":"code","3adca4a7":"code","49fe81e8":"code","fc3a813d":"code","48a12d0b":"code","7f35ed47":"code","3ab7f44d":"code","30d168f2":"code","9cf0b97c":"code","f917507d":"code","a9c520d2":"markdown","99c9e271":"markdown","d6d3396e":"markdown","e97b0847":"markdown","ce37cd7c":"markdown","79f87b99":"markdown","550d4dd4":"markdown","35982085":"markdown","9ab5201d":"markdown","e3366f4c":"markdown","72d30cb0":"markdown","76558990":"markdown","d00631b7":"markdown","9a400ffe":"markdown","d325e7d9":"markdown","e1c33f07":"markdown","52f26d2a":"markdown","cdb1f1f1":"markdown","fac43a87":"markdown","87f3ca6c":"markdown","714f2136":"markdown","c056a038":"markdown","08a3a781":"markdown","957d1251":"markdown","36706569":"markdown","86ce8770":"markdown","111a7c1a":"markdown","1eb4bf42":"markdown","328c37c1":"markdown","893817a5":"markdown","e5d8abbd":"markdown","28d4df51":"markdown","d09bc5bc":"markdown","b40fb507":"markdown","af40c4dc":"markdown","a3beee6d":"markdown","4759a75b":"markdown","a670dc37":"markdown","8b1be536":"markdown","eacbbe8b":"markdown","1cbd41c7":"markdown","3f51957a":"markdown","10da915a":"markdown","b4152a4f":"markdown","8099ec4f":"markdown"},"source":{"e7dc3224":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n\n\n# Any results you write to the current directory are saved as output.","321bbe08":"data = [1,2,3,4,5]\narr = np.array(data)\narr","247ee5ec":"data = [[1,2,3,4],[5,6,3,2]]\narr = np.array(data)\nprint(arr.shape)\narr","365c4d70":"arr.ndim","3b361159":"arr.shape","fb448ea6":"arr.dtype","c516bfea":"arr = np.zeros(10)\nprint(arr.shape) \nprint(arr.dtype)\nprint(arr.ndim)\narr","891ccc6d":"arr = np.zeros((2,3))\nprint(arr.shape)\nprint(arr.dtype)\nprint(arr.ndim)\narr","e6647216":"arr = np.zeros((2,3,2))\nprint(arr.shape)\nprint(arr.dtype)\nprint(arr.ndim)\narr","f48d5d1c":"arr = np.ones((2,3,2))\nprint(arr.shape)\nprint(arr.dtype)\nprint(arr.ndim)\narr","ac8c54f4":"np.arange(5)","f0001c9c":"arr= np.array([1,2,3],dtype=np.float64)\narr","3616e884":"arr = np.array([1,2,3])\nprint(arr.dtype)\nnew_arr = arr.astype(np.float64)\nprint(new_arr.dtype)","9da1ce69":"arr = np.array([[1,2],[3,4]])\nprint(arr*arr)\nprint('________________________')\nprint(arr)","bc3f569e":"arr1 = np.array([1,2])\narr2 = np.array([2,4])\nprint(arr1*arr2)","5def0a79":"arr = np.array([1,2])\nprint(arr*2)","c730f02d":"arr1 = np.array([1,2])\narr2 = np.array([2])\nprint(arr1*arr2)\nprint(arr1.shape)\nprint(arr2.shape)","6b19a91a":"arr1 = np.array([1,2])\narr2 = np.array([2,3,5])\n\nprint(arr1.shape)\nprint(arr2.shape)\nprint(arr1*arr2)","947fe405":"arr = np.array([1,2,3])\narr1 = np.array([2,3,4])\nprint(arr1-arr)","8f480c61":"arr = np.array([1,2])\narr1 = np.array([2,3,4])\nprint(arr1-arr)","963b0d01":"arr = np.array([1])\narr1 = np.array([2,3,4])\nprint(arr1-arr)","200f4459":"arr = np.array([2,4,6])\nnewArr = arr\/2\nprint(newArr)","d4197a73":"arr1 = np.array([1,2,3])\narr2 = np.array([1,1,1])\nprint(arr1>arr2)","a26a5be2":"arr = np.arange(10)\narr[5:10]","7e5ebc6d":"arr[2:]","55be616c":"arr[:2]","1790e969":"arr[:-2]","78621bdb":"arr[-2:]","ae4fedc2":"arr[2:-3]","6a2a4c8d":"arr[-2:5]","153dc8f6":"arr = np.array([[1,2,3],[2,3,4],[5,4,3],[1,1,1]])\nprint(arr.shape)\nprint(arr.ndim)\narr","95770505":"arr[0]","8b31d3dc":"arr = np.array([1,2,3,4,5,6])\narr[arr > 2]","19bd506a":"arr[arr > 2 | arr < 4]","cca82c9e":"arr = np.arange(15).reshape((3,5))\narr","0bc67fc0":"arr.T","3adca4a7":"arr = np.arange(10)\nnp.sqrt(arr)","49fe81e8":"np.exp(arr)","fc3a813d":"np.random.rand(4)","48a12d0b":"arr1 = np.array([1,2,3,4])\narr2 = np.array([1,3,2,4])\nnp.maximum(arr1,arr2)","7f35ed47":"np.where(arr1>3,arr1,arr2)","3ab7f44d":"arr = np.arange(5)\nprint(arr.sum())\nprint(arr.mean())","30d168f2":"arr = np.array([[1,2,3],[1,2,5]])\nprint(arr.sum(axis=1))\nprint(arr.sum(axis=0))\nprint(arr.mean(axis=1))\nprint(arr.mean(axis=0))\narr","9cf0b97c":"arr = np.array([2,3,4,1,5])\narr.sort()\narr","f917507d":"arr = np.array([3,2,4,5,2,3,4])\nnp.unique(arr)","a9c520d2":"# 1. What is Numpy","99c9e271":"* numpy is very compititive and loves comparison, lets see this below with an example","d6d3396e":"# <span style=\"font-size:18px\">Maths with NumPy<\/span>","e97b0847":"> * notice how we can't subtract numpy of different shape, unless of course if one of the shapes is 1","ce37cd7c":"#  <span style=\"font-size:18px\">2.2Data Types in NumPy<\/span>","79f87b99":"#  <span style=\"font-size:18px\">2.3 Slicing in numpy<\/style>","550d4dd4":"* ***np.arange*** : gives us an array of numbers starting from 0 and going till one less than the value given as parameter.so np.arrange(5) would give array([0,1,2,3,4])\n> * all details here - https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.arange.html","35982085":"* ***np.ones*** : one could call it np.zeros twin , it pretty much does the same thing. although it does but 1 in place of zeros. so we get array of 1's insted of 0's ***numpy.ones(shape, dtype=None, order='C'): *** \n> * parameters are same as ones used for np.zeros","9ab5201d":"* Lets see how good is numpy in deviding","e3366f4c":"![3.png](attachment:3.png)","72d30cb0":"#  <span style=\"font-size:18px\">2.5 Transposing Arrays<\/style>","76558990":"* Numpy wont mind if you change its dtype, infact will help you out with astype()","d00631b7":"* ***np.zeros*** : sometimes we need a numpy array of zeros , for this we can use numpy.zeros function . in argument we supply the shape, datatype, or the order - ** numpy.zeros(shape,dtype=float,order='C')**\n> * shape argument can be integer or tuple of ints\n> * the default datatype argument is float64\n> * order argument tells Whether to store multi-dimensional data in row-major (C-style) or column-major (Fortran-style) order in memory.","9a400ffe":"> * we will look at 2 dimensional numpy since this is most common\n![4.png](attachment:4.png)","d325e7d9":"> * notice how 1 is subtracted from each element","e1c33f07":"> * notice how each element is devided by a scalar","52f26d2a":"![2.png](attachment:2.png)","cdb1f1f1":"#  <span style=\"font-size:18px\">2.4 Numpy axes<\/style>","fac43a87":"* **list to array**** - below we see how list is converted to numpy array","87f3ca6c":"> * below we multiply two different numpy array , notice how 1 is multiplied by 2 to get 2 and 2 is multiplied by 4 to result in 8","714f2136":"#  <span style=\"font-size:18px\">2.6 Universal Functions<\/style>","c056a038":"* we can decide the datatype of a numpy array using dtype , as shown below","08a3a781":"# <span style=\"font-size:18px\">2.1 Creating ndarrays<\/span>","957d1251":"> * over here in below example numpy got pissed and refused to give result. after some digging around finally numpy agreed to share why it was pissed. here's the reply - <br><br>\n***When operating on two arrays, NumPy compares their shapes element-wise. It starts with the trailing dimensions, and works its way forward. Two dimensions are compatible when\nthey are equal, or\none of them is 1***","36706569":"* NumPy loves maths, that's the best part about it, let's see few examples","86ce8770":"> * notice how arr*arr results in each element getting squared","111a7c1a":"* **dtype** : Numpy holds data of various data types , it could be float64 or int64 or any other. dtype function helps us find the data type","1eb4bf42":"> * lets multiply numpy - ","328c37c1":"> * Below we multiply two  numpy arrays of different shapes","893817a5":"> * when we slice [x,x+n] we get results including x and excluding x+n\n> * when we slice [x:] we get all values including x \n> * when we slice [:x] we get all values till x and excluding x\n> * when we slice [:-x] we get all values from strting other than the last x values.\n> * when we slice [-x:] we get last x values\n> * when we slice [x:-y] we get all values starting from x with x included till last y values","e5d8abbd":"* Now numpy is cool and gels with many datatypes, here's a screenshot of all its friends","28d4df51":"> * notice how below when ar1 is compared to arr2 as arr1>arr2 we get list of [False True True] , this is because each element in both numpy array are being compared. 1 > 1 results in False, 2>1 results in True, 3>1 results in true. arr1[0] is compared with arr2[0] , arr1[1] is compared with arr2[1], arr1[2] is compared with arr2[2]","d09bc5bc":"> * Here are some other methods we can use-\n![5.png](attachment:5.png)\n![6.png](attachment:6.png)\n![7.png](attachment:7.png)","b40fb507":"> * Below we mulitply numpy array by a scalar, notice how each element is multiplied by scalar value, 2 in this case","af40c4dc":"# 2. The NumPy ndarray","a3beee6d":"* **ndim** : but what is the dimension of the array that we have here, lets see it with ndim. As we can see it's a 1d numpy array","4759a75b":"* NumPy is a general-purpose array-processing package. It provides a high-performance multidimensional array object, and tools for working with these arrays\n* NumPy performs computations faster than normal methods","a670dc37":"> * Notice how each element is subtracted , 2-1=1 ; 3-2 = 1; 4-3=1","8b1be536":"> ok now lets subtract numpy","eacbbe8b":"* ***shape*** : So we know the content of the array and the dimension of the array , let's see what is the shape. From shape we can see that array has 2 rows and 4 columns","1cbd41c7":"* **Nested list to array** : we can even create nested list to array, as you see that we get an array where the lists inside the lists are preserved","3f51957a":"> * boolean indexing in numpy","10da915a":"* Hungry for some more cool built in function - I have a screenshot list","b4152a4f":"#  <span style=\"font-size:18px\">2.7 Mathemetical and Statistical Methods<\/style>","8099ec4f":"![1.png](attachment:1.png)"}}