{"cell_type":{"e123960e":"code","66e74ba8":"code","a9d4eb75":"code","8b1557d1":"code","f859a84c":"code","9546760a":"code","974a53c3":"code","2438e197":"code","194d25a0":"code","c466dc23":"code","5d62e576":"code","1a9d513c":"markdown"},"source":{"e123960e":"!pip install efficientnet -q","66e74ba8":"import os\n\nimport numpy as np\nimport pandas as pd\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold","a9d4eb75":"SEED = 0        #\u968f\u673a\u6570\u79cd\u5b50\uff0c\u7528\u6765KFold\u5206\u6570\u636e\u96c6\nFOLDS = 5        #\u4ea4\u53c9\u9a8c\u8bc1\u6b21\u6570\nBATCH_SIZES = 18\nEPOCHS = 40\nls = 0.015       # \u6807\u7b7e\u5e73\u6ed1\uff0c\u53ef\u4ee5\u5c1d\u8bd50.015\uff0c\u4e0d\u7528\u8bf7\u51990\uff0c\u53ef\u6297\u8fc7\u62df\u5408\nIMAGE_SIZE = (224, 240, 260, 300, 380, 456, 528, 600, 512)\n\nSIIM_para = {}\nSIIM_para['SEED'] = SEED\nSIIM_para['FOLDS'] = FOLDS\nSIIM_para['BATCH_SIZES'] = BATCH_SIZES\nSIIM_para['EPOCHS'] = EPOCHS\nSIIM_para['IMAGE_SIZE'] = IMAGE_SIZE[8]\nprint('SIIM_parameters: {}'.format(SIIM_para))","8b1557d1":"def get_lr_callback():\n    lr_start   = 1e-4 # \u521d\u59cb\u5b66\u4e60\u7387\n    lr_max   =  2e-4# \u6700\u5927\u5b66\u4e60\u7387\n    lr_min     = 1e-7 #\u6700\u5c0f\u5b66\u4e60\u7387\n    lr_ramp_ep =  3 # \u7528\u51e0\u4e2aepoch\u8fbe\u5230\u6700\u5927\u5b66\u4e60\u7387\n    lr_sus_ep  =  3# \u7528\u6700\u5927\u7684\u5b66\u4e60\u7387\u8dd1\u51e0\u4e2aepoch\n    lr_decay   = .4 # \u9000\u706b\uff0c\u5e38\u7528\u65b9\u6cd5\n   \n    def lrfn(epoch):\n        if epoch < lr_ramp_ep:\n            lr = (lr_max - lr_start) \/ lr_ramp_ep * epoch + lr_start\n            \n        elif epoch < lr_ramp_ep + lr_sus_ep:\n            lr = lr_max\n            \n        else:\n            lr = (lr_max - lr_min) * lr_decay**(epoch - lr_ramp_ep - lr_sus_ep) + lr_min\n            \n        return lr\n\n    lr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=False)\n    return lr_callback","f859a84c":"def auto_select_strategy():\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n    \n    return strategy","9546760a":"def build_decoder(with_labels=True, target_size=(256, 256), ext='jpg'):\n    def decode(path):\n        file_bytes = tf.io.read_file(path)\n\n        if ext == 'png':\n            img = tf.image.decode_png(file_bytes, channels=3)\n        elif ext in ['jpg', 'jpeg']:\n            img = tf.image.decode_jpeg(file_bytes, channels=3)\n        else:\n            raise ValueError(\"Image extension not supported\")\n        img = tf.cast(img, tf.float32) \/ 255.0\n        img = tf.image.resize(img, target_size)\n\n        return img\n    \n    def decode_with_labels(path, label):\n        return decode(path), label\n    \n    return decode_with_labels if with_labels else decode\n\n\ndef build_augmenter(with_labels=True):\n    def augment(img):\n        if tf.random.uniform(()) > 0.5:\n            img = tf.image.flip_left_right(img)\n    \n        if tf.random.uniform(()) > 0.4:\n            img = tf.image.flip_up_down(img)\n\n        if tf.random.uniform(()) > 0.5:\n            img = tf.image.rot90(img, k=1)\n\n#        if tf.random.uniform(()) > 0.45:\n#            img = tf.image.random_saturation(img, 0.7, 1.3)\n\n#        if tf.random.uniform(()) > 0.45:\n#            img = tf.image.random_contrast(img, 0.8, 1.2)\n#            \n#        if tf.random.uniform(()) > 0.45:\n#            img = tf.image.random_brightness(img, 0.1)\n        return img\n    \n    def augment_with_labels(img, label):\n        return augment(img), label\n    \n    return augment_with_labels if with_labels else augment\n\n\ndef build_dataset(paths, labels=None, bsize=128, cache=True,\n                  decode_fn=None, augment_fn=None,\n                  augment=True, repeat=True, shuffle=1024, \n                  cache_dir=\"\"):\n    if cache_dir != \"\" and cache is True:\n        os.makedirs(cache_dir, exist_ok=True)\n    \n    if decode_fn is None:\n        decode_fn = build_decoder(labels is not None)\n    \n    if augment_fn is None:\n        augment_fn = build_augmenter(labels is not None)\n    \n    AUTO = tf.data.experimental.AUTOTUNE\n    slices = paths if labels is None else (paths, labels)\n    \n    dset = tf.data.Dataset.from_tensor_slices(slices)\n    dset = dset.map(decode_fn, num_parallel_calls=AUTO)\n    dset = dset.cache(cache_dir) if cache else dset\n    dset = dset.map(augment_fn, num_parallel_calls=AUTO) if augment else dset\n    dset = dset.repeat() if repeat else dset\n    dset = dset.shuffle(shuffle) if shuffle else dset\n    dset = dset.batch(bsize).prefetch(AUTO)\n    \n    return dset","974a53c3":"COMPETITION_NAME = \"siimcovid19-512-img-png-600-study-png\"\nstrategy = auto_select_strategy()\nREPLICAS = strategy.num_replicas_in_sync * BATCH_SIZES\nGCS_DS_PATH = KaggleDatasets().get_gcs_path(COMPETITION_NAME)","2438e197":"load_dir = f\"\/kaggle\/input\/{COMPETITION_NAME}\/\"\ndf = pd.read_csv('..\/input\/siimcov19csv\/train.csv')\nlabel_cols = df.columns[4]","194d25a0":"def build_model(dim=512):\n    \n    inp = tf.keras.layers.Input(shape=(dim,dim,3))\n    base = tf.keras.applications.ResNet101(input_shape=(dim,dim,3),weights='imagenet',include_top=False)\n\n    x = base(inp)\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n\n    x = tf.keras.layers.Dense(1024, activation='relu')(x)\n    x = tf.keras.layers.Dropout(0.2)(x)\n\n    x = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n    \n    model = tf.keras.Model(inputs=inp,outputs=x)\n    opt = tf.keras.optimizers.Adam(learning_rate=0.001)\n    loss = tf.keras.losses.BinaryCrossentropy(label_smoothing=ls) \n    model.compile(optimizer=opt,loss=loss,metrics=['AUC'])\n    model.summary()\n    \n    return model","c466dc23":"skf = KFold(n_splits=FOLDS,shuffle=True,random_state=SEED)\ndf['fold'] = -1\nfor fold, (train_idx, val_idx) in enumerate(skf.split(df, groups = df.StudyInstanceUID.tolist())):\n    df.loc[val_idx, 'fold'] = fold","5d62e576":"for i in range(5):\n    \n    valid_paths = GCS_DS_PATH + '\/image\/' + df[df['fold'] == i]['id'] + '.png' #\"\/train\/\"\n    train_paths = GCS_DS_PATH + '\/image\/' + df[df['fold'] != i]['id'] + '.png' #\"\/train\/\" \n    valid_labels = df[df['fold'] == i][label_cols].values\n    train_labels = df[df['fold'] != i][label_cols].values\n\n\n\n    decoder = build_decoder(with_labels=True, target_size=(IMAGE_SIZE[8], IMAGE_SIZE[8]), ext='png')\n    test_decoder = build_decoder(with_labels=False, target_size=(IMAGE_SIZE[8], IMAGE_SIZE[8]),ext='png')\n\n    train_dataset = build_dataset(\n        train_paths, train_labels, bsize=REPLICAS, decode_fn=decoder\n    )\n\n    valid_dataset = build_dataset(\n        valid_paths, valid_labels, bsize=REPLICAS, decode_fn=decoder,\n        repeat=False, shuffle=False, augment=False\n    )\n\n    try:\n        n_labels = train_labels.shape[1]\n    except:\n        n_labels = 1\n\n    with strategy.scope():\n        model = build_model(dim=IMAGE_SIZE[8])\n\n    steps_per_epoch = train_paths.shape[0] \/\/ REPLICAS\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(\n        f'model{i}.h5', save_best_only=True, monitor='val_loss', mode='min')\n\n\n    history = model.fit(\n        train_dataset, \n        epochs=EPOCHS,\n        verbose=1,\n        callbacks=[checkpoint, get_lr_callback()],\n        steps_per_epoch=steps_per_epoch,\n        validation_data=valid_dataset)\n\n    hist_df = pd.DataFrame(history.history)\n    hist_df.to_csv(f'history{i}.csv')","1a9d513c":"\u611f\u8c22\u5927\u4f6c[h053473666](https:\/\/www.kaggle.com\/h053473666)\u7684\u6570\u636e\u96c6[https:\/\/www.kaggle.com\/h053473666\/siimcovid19-512-img-png-600-study-png](https:\/\/www.kaggle.com\/h053473666\/siimcovid19-512-img-png-600-study-png)"}}