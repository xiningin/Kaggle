{"cell_type":{"fca2ace3":"code","2bebba6f":"code","9f2f5cb9":"code","93031371":"code","3e876638":"code","737af7b0":"code","d00c4be7":"code","1836e6b3":"code","a00e9c98":"code","f244dd0b":"code","a2a87729":"code","ca06f100":"code","2bfb9591":"code","59f03100":"code","009bfc63":"code","0f80041c":"code","5b4aad46":"code","8ae7c9f5":"code","93a6157f":"code","151b6f8e":"code","a0ed482b":"code","77b9e06d":"code","b7cb2fea":"code","bd389434":"code","3b548223":"code","82e422da":"code","c7ef53d3":"code","a4726ea2":"markdown","d422c2ed":"markdown","31660836":"markdown","7449e842":"markdown","c2116391":"markdown","58ae3c34":"markdown","c5a970c7":"markdown","21ac574b":"markdown"},"source":{"fca2ace3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bebba6f":"sample_submission = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nf = open('\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt', 'r')\ndata_description = f.read()\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","9f2f5cb9":"df_train = pd.DataFrame(train)\ndf_test = pd.DataFrame(test)","93031371":"pd.set_option('display.max_columns', 100)","3e876638":"df_all = pd.concat([df_train.drop(columns='SalePrice'),df_test],ignore_index=True)","737af7b0":"df_all","d00c4be7":"# Search for missing data\nimport missingno as msno\nmsno.matrix(df=df_all, figsize=(20,14), color=(0,.3,.3))\n","1836e6b3":"# String label to categorical values\nfrom sklearn.preprocessing import LabelEncoder\n\nfor i in range(df_all.shape[1]):\n    if df_all.iloc[:,i].dtypes == object:\n        lbl = LabelEncoder()\n        lbl.fit(list(df_all.iloc[:,i].values))\n        df_all.iloc[:,i] = lbl.transform(list(df_all.iloc[:,i].values))","a00e9c98":"# Missing data (type = int or float) fill in 0\nfor column in df_all.columns:\n    df_all[column] = df_all[column].fillna(0)","f244dd0b":"# Add new columns\ndef add_new_columns(df):\n    # \u5efa\u7269\u5185\u306e\u7dcf\u9762\u7a4d = 1\u968e\u306e\u9762\u7a4d + 2\u968e\u306e\u9762\u7a4d + \u5730\u4e0b\u306e\u9762\u7a4d\n    df[\"TotalSF\"] = df[\"1stFlrSF\"] + df[\"2ndFlrSF\"] + df[\"TotalBsmtSF\"]\n\n    # \u4e00\u90e8\u5c4b\u3042\u305f\u308a\u306e\u5e73\u5747\u9762\u7a4d = \u5efa\u7269\u306e\u7dcf\u9762\u7a4d \/ \u90e8\u5c4b\u6570\n    df['AreaPerRoom'] = df['TotalSF']\/df['TotRmsAbvGrd']\n\n    # \u7bc9\u5e74\u6570 + \u6700\u65b0\u30ea\u30d5\u30a9\u30fc\u30e0\u5e74 : \u3053\u306e\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u5024\u6bb5\u304c\u9ad8\u304f\u306a\u308a\u305d\u3046\n    df['YearBuiltPlusRemod']=df['YearBuilt']+df['YearRemodAdd']\n\n    # \u304a\u98a8\u5442\u306e\u7dcf\u9762\u7a4d\n    # Full bath : \u6d74\u69fd\u3001\u30b7\u30e3\u30ef\u30fc\u3001\u6d17\u9762\u53f0\u3001\u4fbf\u5668\u5168\u3066\u304c\u5099\u308f\u3063\u305f\u30d0\u30b9\u30eb\u30fc\u30e0\n    # Half bath : \u6d17\u9762\u53f0\u3001\u4fbf\u5668\u304c\u5099\u308f\u3063\u305f\u90e8\u5c4b)(\u30b7\u30e3\u30ef\u30fc\u30eb\u30fc\u30e0\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308b)\n    # \u30b7\u30e3\u30ef\u30fc\u304c\u306a\u3044\u5834\u5408\u3092\u60f3\u5b9a\u3057\u3066Half Bath\u306b\u306f0.5\u306e\u4fc2\u6570\u3092\u3064\u3051\u308b\n    df['TotalBathrooms'] = (df['FullBath'] + (0.5 * df['HalfBath']) + df['BsmtFullBath'] + (0.5 * df['BsmtHalfBath']))\n\n    # \u5408\u8a08\u306e\u5c4b\u6839\u4ed8\u304d\u306e\u7384\u95a2\u306e\u7dcf\u9762\u7a4d \n    df['TotalPorchSF'] = (df['OpenPorchSF'] + df['3SsnPorch'] + df['EnclosedPorch'] + df['ScreenPorch'] + df['WoodDeckSF'])\n\n    # \u30d7\u30fc\u30eb\u306e\u6709\u7121\n    df['HasPool'] = df['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n\n    # 2\u968e\u306e\u6709\u7121\n    df['Has2ndFloor'] = df['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n\n    # \u30ac\u30ec\u30fc\u30b8\u306e\u6709\u7121\n    df['HasGarage'] = df['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n\n    # \u5730\u4e0b\u5ba4\u306e\u6709\u7121\n    df['HasBsmt'] = df['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n\n    # \u6696\u7089\u306e\u6709\u7121\n    df['HasFireplace'] = df['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n\nadd_new_columns(df_all)","a2a87729":"msno.matrix(df=df_all, figsize=(20,14), color=(0,.3,.3))","ca06f100":"df_all.info()","2bfb9591":"df_train = pd.merge(df_all.iloc[df_train.index[0]:df_train.index[-1]+1],df_train['SalePrice'],left_index=True,right_index=True)\ndf_test = df_all.iloc[df_train.index[-1]+1:]","59f03100":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.histplot(df_train['SalePrice'])","009bfc63":"# Truncate outliers\ndf_train = df_train[(df_train['SalePrice'] < 510000)]\nsns.histplot(df_train['SalePrice'])","0f80041c":"df_train_corr = df_train.corr()\ndf_train_corr","5b4aad46":"f, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(df_train_corr, vmax=.8, square=True, cmap='Blues');","8ae7c9f5":"predictor_cols = []\nfor i in df_train_corr:\n    if df_train_corr[i]['SalePrice'] > 0.05 or df_train_corr[i]['SalePrice'] < -0.05:\n        innerName = df_train_corr[i].name\n        if innerName != 'SalePrice':\n            predictor_cols.append(innerName)\npredictor_cols","93a6157f":"from sklearn.ensemble import RandomForestRegressor as RFR\nfrom sklearn.model_selection import GridSearchCV\n\ntrain_x = df_train[predictor_cols]","151b6f8e":"train_x.info()","a0ed482b":"# Scaling\n#scale_train_x = preprocessing.minmax_scale(train_x[:, :])\n\ntrain_y = df_train.SalePrice\n\n# Tune parameters\nsearch_params = {\n    'n_estimators'      : [600],\n    'max_features'      : [24],\n    'random_state'      : [0],\n    'n_jobs'            : [-1],\n    'min_samples_split' : [3],\n    'max_depth'         : [17]\n}\n\nmodel = GridSearchCV(\n    RFR(),\n    search_params,\n    cv = 3,\n    verbose=True\n)\n\nmodel.fit(train_x, train_y)","77b9e06d":"print(model.best_estimator_)","b7cb2fea":"from sklearn import preprocessing\nfrom sklearn.metrics import r2_score\n\n# Check score\nt_true = np.array(df_train['SalePrice'])\nx_forScore = df_train[predictor_cols]\nnp_x_forScore = np.array(x_forScore)\nfloat_x_forScore = np_x_forScore.astype('float32')\n# Scaling\n#scale_float_x_forScore = preprocessing.minmax_scale(float_x_forScore[:, :])\n\npredict = model.predict(float_x_forScore)\nprint(t_true)\nprint(predict)\nr2_score = r2_score(t_true, predict)\nr2_score","bd389434":"test_x = df_test[predictor_cols]","3b548223":"# Scaling\n#scale_test_x = preprocessing.minmax_scale(test_x[:, :])","82e422da":"test_y = model.predict(test_x)\ntest_y","c7ef53d3":"if r2_score > 0.95:\n    my_submission = pd.DataFrame({'Id': test.Id, 'SalePrice': test_y})\n    my_submission.to_csv('submission.csv', index=False)\n    print('Succeeded : r2 = {:.5f}'.format(r2_score))\nelse:\n    print('Low Score : r2 = {:.5f}'.format(r2_score))","a4726ea2":"# 2. Preprocessing","d422c2ed":"# 4. Check the correlation for each item","31660836":"# 6. Modeling","7449e842":"# 5. Extract items with high correlation coefficient","c2116391":"# 3. Histogram","58ae3c34":"# 7. Predict","c5a970c7":"# 1. Import data","21ac574b":"# 8. Prepare upload data"}}