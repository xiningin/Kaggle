{"cell_type":{"2d37479a":"code","f7484bea":"code","43bd3185":"code","1965ee10":"code","2fb6a758":"code","e0291bb9":"code","571acb44":"code","c1f251d8":"code","c28eed85":"code","75f932b9":"code","718bcedc":"code","3dc13bed":"markdown","3bb93458":"markdown","4a43f9fe":"markdown","452b2c82":"markdown","1adee4a5":"markdown","cd5dc7ce":"markdown","0992a85c":"markdown","c92c3686":"markdown","7418a50f":"markdown","4d407d95":"markdown","6be2d8ce":"markdown","8466248d":"markdown","eea01051":"markdown","494bfefd":"markdown"},"source":{"2d37479a":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import balanced_accuracy_score","f7484bea":"APP_INPUT_LIB  = \"..\/input\/data-for-investing-type-prediction\"\nAPP_INPUT_FILE = \"investing_program_prediction_data.csv\"\n\ndata = pd.read_csv(os.path.join(APP_INPUT_LIB,APP_INPUT_FILE))","43bd3185":"display_settings = {'display.max_rows' : 20 , 'display.max_columns' : 50 , 'display.width' : 200}\nfor op,value in display_settings.items():\n    pd.set_option(op,value)","1965ee10":"# Print data dimensions\nprint(\"Data dimensions :\")\nprint(data.shape)\n# List of columns\nprint(\"List of columns :\")\nprint(data.columns)","2fb6a758":"# Create feature groups\nAPP_TARGET_FEATURE = \"InvType\"\nse_features = [f for f in data.columns if 'SE' in f]\nba_features = [f for f in data.columns if 'BA' in f]\npe_features = [f for f in data.columns if 'PE' in f]\nia_features = [f for f in data.columns if 'IA' in f]\n\n#### List sample customer data - Age and Geographic location\nprint(\"Sample customer data :\")\nprint(data[se_features].head())\n\n#### List sample banking activity data\nprint(\"Sample banking activity data :\")\nprint(data[ba_features].head())\n\n#### List sample investing history data\nprint(\"Sample investing portfolio data :\")\nprint(data[pe_features].head())\n\n#### List sample investing activity data\nprint(\"Sample investing activity data :\")\nprint(data[ia_features].head())","e0291bb9":"fig = plt.figure(figsize=(10,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x = APP_TARGET_FEATURE , data = data).set_title(APP_TARGET_FEATURE + \" \" + \"Distribution\")","571acb44":"selected_input_features = ba_features\ncorr = data[selected_input_features].corr()\nfig = plt.figure(figsize=(15,15))\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","c1f251d8":"label_encoders = dict()\n\nfor f in data.columns :\n    f_type = data[f].dtype.name\n    if (f_type == 'object'):\n        f_enc = LabelEncoder() ; data[f] = f_enc.fit_transform(data[f]) ; label_encoders[f] = f_enc","c28eed85":"from sklearn.model_selection import RepeatedStratifiedKFold\nnum_folds = 3 ; num_rep = 1 ; splits = dict()\nrkfs_partitioner  = RepeatedStratifiedKFold(n_splits = num_folds , n_repeats = num_rep , random_state = 1234)\nsplit_cnt = 0\nfor train_idxs , test_idxs in rkfs_partitioner.split(data , data[APP_TARGET_FEATURE]):\n    # print(\"TRAIN:\", len(train_idxs), \"TEST:\", len(test_idxs))\n    i_rep  = split_cnt \/\/ num_folds\n    i_part = split_cnt - i_rep * num_folds\n    # print(cnt) ; print(i_rep) ; print(i_part)\n    splits['R' + str(i_rep) + 'P' + str(i_part)] = {'Train' : train_idxs , 'Test' : test_idxs}\n    split_cnt += 1","75f932b9":"performance_metrics    = dict()\n\nfor i_split in splits.keys() :\n    X_train = data.loc[splits[i_split]['Train'],[i for i in data.columns if i not in [APP_TARGET_FEATURE]]]\n    y_train = data.loc[splits[i_split]['Train'],APP_TARGET_FEATURE]\n    i_model = RandomForestClassifier(n_estimators = 100 ,  max_features = 'sqrt' , max_depth = 15 , random_state = 0) \n    i_model.fit(X_train,y_train)\n    X_test  = data.loc[splits[i_split]['Test'],[i for i in data.columns if i not in [APP_TARGET_FEATURE]]]\n    y_test  = data.loc[splits[i_split]['Test'],APP_TARGET_FEATURE]\n    y_test_cl_preds = i_model.predict(X_test).flatten() \n    performance_metrics[i_split] = balanced_accuracy_score(y_test,y_test_cl_preds)","718bcedc":"print(\"Average Balanced accuracy is : %1.3f\" % np.mean(list(performance_metrics.values())))","3dc13bed":"**Setup pandas presentation**","3bb93458":"**Imports**","4a43f9fe":"Create baseline model and evaluate with balanced accuracy averaged over 3 folds  \nAlgorithm = sklearn.ensemble.RandomForestClassifier . No feature enginnering ","452b2c82":"**Input features correlation heatmap**","1adee4a5":"**Describe feature groups**","cd5dc7ce":"Conclusion : Two classes are almost balanced","0992a85c":"## **Build some baseline model**","c92c3686":"## **Explore Data**","7418a50f":"Conclusion : All bussiness activity features positively correlated , but with different magnitude","4d407d95":"**Input data dimensionality**","6be2d8ce":"**Distribution of target feature**","8466248d":"**Read data**","eea01051":"**Prepare label encoders**","494bfefd":"**Prepare 3-CV cross validation**"}}