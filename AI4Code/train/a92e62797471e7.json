{"cell_type":{"3c14fd5b":"code","e8ab8641":"code","63dd2a5f":"code","c470eddf":"code","ff373226":"code","85ba44f5":"markdown","7c9b3e10":"markdown","93977af4":"markdown","a9abb609":"markdown","38345544":"markdown","c7d1f6e5":"markdown","783a2562":"markdown"},"source":{"3c14fd5b":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e8ab8641":"#1.Data preprocessing\n\n#read the data\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nntrain = train.shape[0]#1460\nntest = test.shape[0]#1459\ndata = pd.concat([train, test], axis = 0, sort = False)\n\n#Delete feature columns with missing values greater than 50%\nmissing_cols = [c for c in data if data[c].isna().mean() * 100 > 50]\n#missing_cols are ['Alley', 'PoolQC', 'Fence', 'MiscFeature']\ndata = data.drop(missing_cols, axis = 1)\n\n#Fill the missing values\nobject_df = data.select_dtypes(include = ['object'])\nnumerical_df = data.select_dtypes(exclude = ['object'])\n#Fill in the missing features of Object type\uff0c\u5373\u5bf9Object\u578b\u7684\u7f3a\u5931\u7279\u5f81\u8fdb\u884c\u586b\u5145\nobject_df = object_df.fillna('unknow')\n#Fill in the median of numerical missing features\nmissing_cols = [c for c in numerical_df if numerical_df[c].isna().sum() > 0]\nfor c in missing_cols:\n    numerical_df[c] = numerical_df[c].fillna(numerical_df[c].median())\n\n# Delete the feature:distribution imblance --single categlory accounts for more than 95%\ndistribution_imbalance = []\nfor c in object_df.columns:\n    percent = pd.DataFrame(object_df[c].value_counts(normalize = True) * 100)\n    for i in percent.iloc[0]:\n        if i > 95:\n            distribution_imbalance.append(c)\nobject_df = object_df.drop(distribution_imbalance, axis = 1)","63dd2a5f":"#Basic feature structure\n\n#YrSold - YearBulit = House construction age\nnumerical_df.loc[numerical_df['YrSold'] < numerical_df['YearBuilt'], 'YrSold'] = 2009 #Outlier handling\nnumerical_df['Age_House'] = (numerical_df['YrSold'] - numerical_df['YearBuilt'])\n\n#TotalBsmtBath = BsmtFullBath + 0.5 * BsmtHaifBath\nnumerical_df['TotalBsmtBath'] = numerical_df['BsmtFullBath'] + numerical_df['BsmtHalfBath']\n\n#TotalBath = FullBath + 0.5 * HaifBath\nnumerical_df['TotalBath'] = numerical_df['FullBath'] + numerical_df['HalfBath']\n\n#TotalSA = TotalBsmtSF + 1stFlrSF + 2ndFlrSF\nnumerical_df['TotalSA '] = numerical_df['TotalBsmtSF'] + numerical_df['1stFlrSF']+ numerical_df['2ndFlrSF']","c470eddf":"#Feature encoding\nbin_map = {'TA': 2, 'Gd': 3, 'Fa': 1, 'Ex' : 4, 'Po':1, 'None': 0,\n          'Y': 1, 'N': 0, 'Reg' : 3, 'IR1':2,'IR2':1,\n          'IR3':0,'None':0,'No':2,'Mn':2,\n          'Av':3,'Gd':4,'Unf':1,'LwQ':2,\n          'Rec':3,'BLQ':4,'ALQ':5,'GLQ':6}\nobject_df['ExterQual'] = object_df['ExterQual'].map(bin_map)\nobject_df['ExterCond'] = object_df['ExterCond'].map(bin_map)\nobject_df['BsmtCond'] = object_df['BsmtCond'].map(bin_map)\nobject_df['BsmtQual'] = object_df['BsmtQual'].map(bin_map)\nobject_df['HeatingQC'] = object_df['HeatingQC'].map(bin_map)\nobject_df['KitchenQual'] = object_df['KitchenQual'].map(bin_map)\nobject_df['FireplaceQu'] = object_df['FireplaceQu'].map(bin_map)\nobject_df['GarageQual'] = object_df['GarageQual'].map(bin_map)\nobject_df['GarageCond'] = object_df['GarageCond'].map(bin_map)\nobject_df['CentralAir'] = object_df['CentralAir'].map(bin_map)\nobject_df['LotShape'] = object_df['LotShape'].map(bin_map)\nobject_df['BsmtExposure'] = object_df['BsmtExposure'].map(bin_map)\nobject_df['BsmtFinType1'] = object_df['BsmtFinType1'].map(bin_map)\nobject_df['BsmtFinType2'] = object_df['BsmtFinType2'].map(bin_map)\n\nPavedDrive = {'N':0, 'P':1,'Y':2}\nobject_df['PavedDrive'] = object_df['PavedDrive'].map(PavedDrive)\n\n# select all the remained object features\nrest_object_columns = object_df.select_dtypes(include = ['object']) \n#one-hot encoding\nobject_df = pd.get_dummies(object_df,columns = rest_object_columns.columns)\n\ndata = pd.concat([object_df, numerical_df], axis = 1, sort = False)\ndata","ff373226":"def correlation(data, threshold):\n    col_corr = set()\n    corr_matrix = data.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i,j]) > threshold: #compare with the threshold value\n                colname = corr_matrix.columns[i] #get name\n                col_corr.add(colname)\n    return col_corr\n\nall_cols = [c for c in data.columns if c not in ['SalePrice']]\ncorr_features = correlation(data[all_cols], 0.9)\ncorr_features","85ba44f5":"This is my learning notes of a Chinese Book \u300a\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7ade\u8d5b\u5b9e\u6218\u300b by \u738b\u8d3a \u5218\u9e4f \u94b1\u4e7e","7c9b3e10":"In this part, we will complete the task of data cleaning, mainly to delete feature columns with a missing value ratio greater than 50%, fill in different types of missing value features, and delete feature columns with extremely uneven attribute distributions.","93977af4":"# # 4.2 Feature Extraction","a9abb609":"# # 4.1 Data preprocessing","38345544":"# # 4.3 Feature Selection","c7d1f6e5":"There are three main basic steps:\n1.Data preprocessing\n2.Feature extraction\n3.Feature selection","783a2562":"# Chapter 04 Feature Engineering"}}