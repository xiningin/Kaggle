{"cell_type":{"a26ee97b":"code","ad1c4dd5":"code","dcd60a0a":"code","f640d190":"code","2c31dfca":"code","1bb29be0":"code","72465d82":"code","bbfa8572":"code","1d6f83d8":"markdown","9cd84023":"markdown"},"source":{"a26ee97b":"!rm .\/* -r","ad1c4dd5":"!cp -r ..\/input\/yolov4pytorch\/pytorch-YOLOv4\/* .\/","dcd60a0a":"!pip install -U -r requirements.txt","f640d190":"import numpy as np\nimport pandas as pd\nimport os\ndf = pd.read_csv('..\/input\/global-wheat-detection\/train.csv')\nbboxs = np.stack(df['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))\nfor i, column in enumerate(['x', 'y', 'w', 'h']):\n    df[column] = bboxs[:,i]\ndf.drop(columns=['bbox'], inplace=True)\ndf['x1'] = df['x'] + df['w']\ndf['y1'] = df['y'] + df['h']\ndf['classes'] = 0\nfrom tqdm.auto import tqdm\nimport shutil as sh\ndf = df[['image_id','x', 'y', 'w', 'h','x1','y1','classes']]\ndf.head()","2c31dfca":"def f7(seq):\n    seen = set()\n    seen_add = seen.add\n    return [x for x in seq if not (x in seen or seen_add(x))]\nindex = f7(df.image_id)\nimport random\nrandom.Random(42).shuffle(index)\nlen(index)","1bb29be0":"source = 'train'\nfor fold in [0]:\n    val_index = index[len(index)*fold\/\/5:len(index)*(fold+1)\/\/5]\n    for name,mini in tqdm(df.groupby('image_id')):\n        if not os.path.exists('convertor'):\n            os.makedirs('convertor')\n        sh.copy(\"..\/input\/global-wheat-detection\/{}\/{}.jpg\".format(source,name),'convertor\/{}.jpg'.format(name))\n        if name in val_index:\n            path2save = 'convertor\/val.txt'\n        else:\n            path2save = 'convertor\/train.txt'\n        with open(path2save, 'a') as f:\n            f.write(f'{name}.jpg')\n            row = mini[['x','y','x1','y1','classes']].astype(int).values\n            # row = row\/1024\n            row = row.astype(str)\n            for j in range(len(row)):\n                text = ' '+','.join(row[j])\n                f.write(text)\n            f.write('\\n')","72465d82":"#!python train.py -l 0.01 -g 0 -classes 1 -dir \/kaggle\/working\/convertor -pretrained ..\/input\/yolov4coco\/yolov4.conv.137.pth -optimizer sgd -iou-type giou -train_label_path convertor\/train.txt","bbfa8572":"!rm convertor\/*","1d6f83d8":"## Reference\nhttps:\/\/github.com\/Tianxiaomo\/pytorch-YOLOv4\nhttps:\/\/www.kaggle.com\/orkatz2\/yolov5-train","9cd84023":"## This is a YOLOv4 training pipeline with Pytorch. I use coco pre-trained weights. Have fun and feel free to leave any comment!"}}