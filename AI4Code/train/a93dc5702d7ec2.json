{"cell_type":{"ddbe2dcc":"code","650c0a18":"code","6ca29e8e":"code","e37285ca":"code","d875e0c9":"code","f446ce99":"code","db8fdc3a":"code","dcaedc9f":"code","5eb666e8":"code","6d41e002":"code","3f46f369":"code","f86aeafc":"code","d8331011":"code","f201c794":"code","5711b41b":"code","37536969":"code","94a2f779":"code","0e019418":"code","a30280c9":"code","326fec2b":"code","942b08aa":"code","f6a13965":"code","d8009f50":"code","6b428577":"code","26ef9b58":"code","a0efaaa7":"code","f559b846":"code","2f8ebfca":"code","9b357060":"code","e4abbac4":"code","7f9f3817":"code","c8d9b591":"code","a4c4cec2":"code","35f6d56d":"code","b0da29a1":"code","8db1ac71":"code","a7549704":"code","795f2aba":"code","861d40f9":"code","fcce545d":"code","e5125fb9":"code","5a682ec2":"code","0cbc9566":"code","a8690de3":"code","8e72e607":"code","9981e2ba":"code","2eba0940":"code","f69c84e8":"code","db93bfdb":"code","a5aa0b27":"code","d42848f1":"code","4e7419c5":"code","ac16f6c0":"code","574deae6":"code","4a12c209":"code","027ee483":"code","06990ff5":"code","3481c7be":"code","7657f508":"code","60975777":"code","68c1107c":"code","161c31d9":"code","3d31648c":"code","f26968d9":"code","5d9cf405":"code","95d55f67":"code","f3b5f66d":"code","764035af":"code","e8beeb6c":"code","f0d5ffcc":"code","5f4241de":"code","e42bfb2f":"code","c23e50d2":"code","2d2fdd7b":"code","027fb1e0":"code","35b98f09":"code","b89bb8ef":"code","7d85cbcf":"code","680958bd":"code","e0bf6d13":"code","b2fd7403":"code","dff84f84":"code","b3d3199d":"code","b1db94e3":"code","0f425721":"code","0e4a2673":"code","83cc20f6":"code","19fec199":"code","9f04cd2a":"code","e1de991c":"code","06d6319e":"code","b9e9302d":"code","ec7568e4":"code","80c1508a":"code","e3b9536f":"code","a902cc36":"code","5d2b9fa0":"code","fa07e4a9":"code","171435a7":"code","602048cf":"code","624d6835":"markdown","cfcf2ac9":"markdown","16c82e6c":"markdown","8771af76":"markdown","0ec1ca8e":"markdown","3c7ed2a0":"markdown","dc9ec793":"markdown","4557da25":"markdown","45075818":"markdown"},"source":{"ddbe2dcc":"#import the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns\nimport plotly.express as px","650c0a18":"#read the dataset and check the first five rows\ninp0 = pd.read_csv(\"\/kaggle\/input\/google-plasystore-data\/playstore-analysis (2).csv\")\ninp0.head()","6ca29e8e":"#Check the shape of the dataframe\ninp0.shape","e37285ca":"#Check the datatypes of all the columns of the dataframe\ninp0.info()","d875e0c9":"#Check the number of null values in the columns\ninp0.isnull().sum()","f446ce99":"#Drop the rows having null values in the Rating field\ninp1 = inp0[~inp0.Rating.isnull()]\n\n#Check the shape of the dataframe\ninp1.shape","db8fdc3a":"# Check the number of nulls in the Rating field again to cross-verify\ninp1.Rating.isnull().sum()","dcaedc9f":"#Check the number of nulls in the dataframe again and find the total number of null values\ninp1.isnull().sum()\n","5eb666e8":"#Inspect the nulls in the Android Version column\ninp1[inp1['Android Ver'].isnull()]","6d41e002":"#Drop the row having shifted values\ninp1.loc[10472,:]\ninp1[(inp1['Android Ver'].isnull() & (inp1.Category == \"1.9\"))]\ninp1 = inp1[~(inp1['Android Ver'].isnull() & (inp1.Category == \"1.9\"))]\n#Check the nulls again in Android version column to cross-verify\ninp1[inp1['Android Ver'].isnull()]","3f46f369":"#Check the most common value in the Android version column\ninp1['Android Ver'].value_counts()","f86aeafc":"#Fill up the nulls in the Android Version column with the above value\ninp1['Android Ver'] = inp1['Android Ver'].fillna(inp1['Android Ver'].mode()[0])","d8331011":"#Check the nulls in the Android version column again to cross-verify\ninp1['Android Ver'].isnull().sum()","f201c794":"#Check the nulls in the entire dataframe again\ninp1.isnull().sum()","5711b41b":"#Check the most common value in the Current version column\ninp1['Current Ver'].value_counts()","37536969":"#Replace the nulls in the Current version column with the above value\ninp1['Current Ver'] = inp1['Current Ver'].fillna(inp1['Current Ver'].mode()[0])","94a2f779":"inp1['Current Ver'].value_counts()","0e019418":"#Check the datatypes of all the columns \ninp1.dtypes","a30280c9":"inp1.head()","326fec2b":"#Analyse the Price column to check the issue\ninp1.Price.value_counts()","942b08aa":"#Write the function to make the changes\ninp1.Price = inp1.Price.apply(lambda x: 0 if x==\"0\" else float(x[1:]))","f6a13965":"#Verify the dtype of Price once again\ninp1.Price.dtype","d8009f50":"#Analyse the Reviews column\ninp1.Reviews.value_counts()","6b428577":"#Change the dtype of this column\ninp1.Reviews = inp1.Reviews.astype(\"int32\")\n#Check the quantitative spread of this dataframe\ninp1.Reviews.describe()\n","26ef9b58":"#Analyse the Installs Column\ninp1.Installs.head()\n","a0efaaa7":"def clean_installs(val):\n    return int(val.replace(\",\",\"\").replace(\"+\",\"\"))\ntype(clean_installs(\"3,000+\"))\ninp1.Installs = inp1.Installs.apply(clean_installs)\ninp1.Installs.describe()","f559b846":"#Perform the sanity checks on the Reviews column\ninp1[(inp1.Reviews > inp1.Installs)].shape","2f8ebfca":"inp1[(inp1.Reviews > inp1.Installs)]","9b357060":"inp1 = inp1[inp1.Reviews <= inp1.Installs]","e4abbac4":"#perform the sanity checks on prices of free apps \ninp1[(inp1.Type == \"Free\") & (inp1.Price>0)]","7f9f3817":"#Create a box plot for the price column\nplt.boxplot(inp1.Price)\nplt.show()","c8d9b591":"#Check the apps with price more than 200\ninp1[inp1.Price > 200]","a4c4cec2":"#Clean the Price column\ninp1 = inp1[inp1.Price < 200]","35f6d56d":"inp1.Price.describe()","b0da29a1":"#Create a box plot for paid apps\ninp1[inp1.Price>0].Price.plot.box()","8db1ac71":"#Check the apps with price more than 30\ninp1[inp1.Price>30]","a7549704":"#Clean the Price column again\ninp1 = inp1[inp1.Price <= 30]\ninp1.shape","795f2aba":"#Create a histogram of the Reviews\n?plt.hist\nplt.hist(inp1.Reviews)\nplt.show()","861d40f9":"#Create a boxplot of the Reviews column\nplt.boxplot(inp1.Reviews)\nplt.show()","fcce545d":"#Check records with 1 million reviews\ninp1[inp1.Reviews >= 10000000]","e5125fb9":"#Drop the above records\ninp1 = inp1[inp1.Reviews <= 1000000]\ninp1.shape","5a682ec2":"plt.hist(inp1.Reviews)\nplt.show()","0cbc9566":"plt.boxplot(inp1.Installs)\nplt.show()\n","a8690de3":"inp1.Installs.describe()","8e72e607":"inp1 = inp1[inp1.Installs <= 100000000]\ninp1.shape","9981e2ba":"inp1.Size.describe()","2eba0940":"plt.boxplot(inp1.Size)\nplt.show()","f69c84e8":"#Create a distribution plot for rating\nsns.distplot(inp1.Rating)\nplt.show()","db93bfdb":"#Change the number of bins\nsns.distplot(inp1.Rating, bins=20)\nplt.show()","a5aa0b27":"#Apply matplotlib functionalities\nsns.distplot(inp1.Rating, bins=20, color=\"g\")\nplt.title(\"Distribution of app ratings\", fontsize=12)\nplt.show()","d42848f1":"sns.set_style(\"white\")\nsns.distplot(inp1.Rating, bins=20, color=\"g\")\nplt.title(\"Distribution of app ratings\", fontsize=12)\nplt.show()","4e7419c5":"plt.style.available","ac16f6c0":"plt.style.use(\"tableau-colorblind10\")","574deae6":"#Change the number of bins to 20\nsns.distplot(inp1.Rating, bins=20)\nplt.show()","4a12c209":"plt.style.use(\"ggplot\")","027ee483":"sns.distplot(inp1.Rating, bins=20)\nplt.show()","06990ff5":"#Analyse the Content Rating column\ninp1['Content Rating'].value_counts()","3481c7be":"#Remove the rows with values which are less represented \ninp1 = inp1[~inp1['Content Rating'].isin([\"Adults only 18+\",\"Unrated\"])]","7657f508":"inp1.shape","60975777":"#Reset the index\ninp1.reset_index(inplace=True, drop=True)","68c1107c":"inp1.info()","161c31d9":"#Check the apps belonging to different categories of Content Rating \ninp1['Content Rating'].value_counts()","3d31648c":"#Plot a pie chart\ninp1['Content Rating'].value_counts().plot.pie()\nplt.show()","f26968d9":"inp1['Content Rating'].value_counts().plot.barh()\nplt.show()","5d9cf405":"###Size vs Rating\n\n##Plot a scatter-plot in the matplotlib way between Size and Rating\nplt.scatter(inp1.Size, inp1.Rating)\nplt.show()","95d55f67":"### Plot the same thing now using a jointplot\nsns.set_style(\"white\")","f3b5f66d":"sns.jointplot(inp1.Size, inp1.Rating)\nplt.show()","764035af":"## Plot a jointplot for Price and Rating\nsns.jointplot(inp1.Price, inp1.Rating)\nplt.show()","e8beeb6c":"##Plot a reg plot for Price and Rating again for only the paid apps.\nsns.jointplot(\"Price\", \"Rating\", data=inp1[inp1.Price>0], kind=\"reg\")\nplt.show()","f0d5ffcc":"sns.pairplot(inp1[['Reviews', 'Size', 'Price','Rating']])\nplt.show()","5f4241de":"##Plot a bar plot of Content Rating vs Average Rating \ninp1.groupby(['Content Rating'])['Rating'].mean().plot.bar()","e42bfb2f":"##Plot the bar plot again with Median Rating\ninp1.groupby(['Content Rating'])['Rating'].median().plot.bar()","c23e50d2":"sns.barplot(data=inp1, x=\"Content Rating\", y=\"Rating\")\n\nplt.show()","2d2fdd7b":"##Plot the above bar plot using the estimator parameter\nsns.barplot(data=inp1, x=\"Content Rating\", y=\"Rating\", estimator=np.median)\nplt.show()","027fb1e0":"##Plot the bar plot with only the 5th percentile of Ratings\nsns.barplot(data=inp1, x=\"Content Rating\", y=\"Rating\", estimator=lambda x: np.quantile(x,0.05))\nplt.show()","35b98f09":"sns.barplot(data=inp1, x=\"Content Rating\", y=\"Rating\", estimator=np.min)\nplt.show()","b89bb8ef":"##Plot a box plot of Rating vs Content Rating\nplt.figure(figsize=[9,7])\nsns.boxplot(inp1['Content Rating'], inp1.Rating)\nplt.show()","7d85cbcf":"sns.boxplot(inp1.Rating)\nplt.show()","680958bd":"inp1['Genres'].value_counts()","e0bf6d13":"c = ['Tools','Entertainment','Medical','Education']\ninp5= inp1[inp1['Genres'].isin(c)]","b2fd7403":"sns.boxplot(inp5['Genres'],inp1.Rating)","dff84f84":"##Ratings vs Size vs Content Rating\n\n##Prepare buckets for the Size column using pd.qcut\n\ninp1['Size_Bucket'] = pd.qcut(inp1.Size, [0, 0.2, 0.4, 0.6, 0.8, 1], [\"VL\",\"L\",\"M\",\"H\",\"VH\"])","b3d3199d":"##Create a pivot table for Size_buckets and Content Rating with values set to Rating\ninp1.head()\npd.pivot_table(data=inp1, index=\"Content Rating\", columns=\"Size_Bucket\", values=\"Rating\")","b1db94e3":"##Change the aggregation to median\npd.pivot_table(data=inp1, index=\"Content Rating\", columns=\"Size_Bucket\", values=\"Rating\", aggfunc=np.median)","0f425721":"##Change the aggregation to 20th percentile\npd.pivot_table(data=inp1,index=\"Content Rating\",columns=\"Size_Bucket\",values=\"Rating\",aggfunc=lambda x: np.quantile(x,0.2))","0e4a2673":"##Store the pivot table in a separate variable\nres = pd.pivot_table(data=inp1,index=\"Content Rating\",columns=\"Size_Bucket\",values=\"Rating\",aggfunc=lambda x: np.quantile(x,0.2))","83cc20f6":"##Apply customisations\nsns.heatmap(res, cmap = \"Greens\", annot=True)\nplt.show()","19fec199":"##Keep the aggregation at minimum value for Rating\ninp1.dtypes","9f04cd2a":"## Extract the month from the Last Updated Date\ninp1['Last Updated'].head()","e1de991c":"inp1['updated_month'] = pd.to_datetime(inp1['Last Updated']).dt.month","06d6319e":"## Find the average Rating across all the months\ninp1.groupby(['updated_month'])['Rating'].mean()","b9e9302d":"## Plot a line graph\nplt.figure(figsize=[10,5])\ninp1.groupby(['updated_month'])['Rating'].mean().plot()\nplt.show()","ec7568e4":"## Create a pivot table for Content Rating and updated Month with the values set to Installs\npd.pivot_table(data=inp1, values=\"Installs\", index=\"updated_month\", columns=\"Content Rating\", aggfunc=sum)","80c1508a":"##Store the table in a separate variable\nmonthly = pd.pivot_table(data=inp1, values=\"Installs\", index=\"updated_month\", columns=\"Content Rating\", aggfunc=sum)","e3b9536f":"##Plot the stacked bar chart.\nmonthly.plot(kind=\"bar\", stacked=\"True\", figsize=[10,6])\nplt.show()","a902cc36":"##Plot the stacked bar chart again wrt to the proportions.\nmonthly_perc = monthly[[\"Everyone\",\"Everyone 10+\",\"Mature 17+\",\"Teen\"]].apply(lambda x: x\/x.sum(), axis=1)","5d2b9fa0":"monthly_perc.plot(kind=\"bar\", stacked=\"True\", figsize=[10,6])\nplt.show()","fa07e4a9":"#Take the table you want to plot in a separate variable\nres = inp1.groupby([\"updated_month\"])[['Rating']].mean()\nres.reset_index(inplace=True)","171435a7":"res","602048cf":"#Prepare the plot\nfig = px.line(res, x=\"updated_month\",y=\"Rating\",title=\"Montly average rating\")\nfig.show()","624d6835":"#### Missing Value Treatment","cfcf2ac9":"#### Handling Incorrect Data Types ","16c82e6c":"**Problem Statement**\n\nThe team at Google Play Store wants to develop a feature that would enable them to boost visibility for the most promising apps. Now, this analysis would require a preliminary understanding of the features that define a well-performing app\n\n","8771af76":"### Data Handling and Cleaning","0ec1ca8e":"The data that we have needs to make sense and therefore we can perform certain sanity checks on them to ensure they are factually correct as well. Some sanity checks can be:\n\n- Rating is between 1 and 5 for all the apps.\n- Number of Reviews is less than or equal to the number of Installs.\n- Free Apps shouldn\u2019t have a price greater than 0.\n","3c7ed2a0":"Handling missing values for rating\n - Ratings is the target variable\n - drop the records","dc9ec793":"Imputing Missing Values\n\n- For numerical variables use mean and median\n- For categorical variables use mode","4557da25":"#### Sanity Checks","45075818":"#### Outliers Analysis Using Boxplot"}}