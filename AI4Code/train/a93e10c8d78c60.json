{"cell_type":{"87640c70":"code","26652efe":"code","80bdae63":"code","f7ee9a3c":"code","456cc4da":"code","fc8349e1":"code","9c6422bc":"code","8494bad7":"code","ebc54398":"code","f8e6b883":"code","adde8248":"code","f8d88626":"code","75637e74":"code","a75d9cd8":"code","073c81f2":"code","76ca5d44":"code","e27cefb4":"code","3b3e0020":"code","b0937bf9":"code","faa9af6a":"code","a8160fb7":"code","617e3607":"code","2675da77":"markdown","86ddabc9":"markdown","fa3cf337":"markdown","9391fe5c":"markdown"},"source":{"87640c70":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\nfrom datetime import datetime\nimport dateutil.parser\nimport seaborn as sns \nsns.set_style('whitegrid')\ninit_notebook_mode(connected=True)\n","26652efe":"df = pd.read_csv(\"..\/input\/youtube-new\/USvideos.csv\")\n","80bdae63":"# Convert timestamp strings to datetime object.\ndef convert_date(timestamp, date_format='%Y-%m-%d'):\n    '''\n    Converts timestamp to datetime object with specified format.\n    default format: '%Y-%m-%d'\n    '''\n    if 'Z' not in timestamp: # trending_date has format 'yy.dd.mm'\n        parsed_date = datetime.strptime(timestamp, '%y.%d.%m')\n        return parsed_date\n    else:               # publish_time has format 'yyyy-mm-ddThh:mm:ss.000Z'\n        d = dateutil.parser.parse(timestamp)\n        parsed_date = d.strftime('%Y-%m-%d')\n        return d.strptime(parsed_date, date_format)\n\n\n# Map category labels, add category_label column.\ndef map_categories(df, map_dict, column='category_label'):\n    '''\n    Adds category label column to dataframe.\n    Accepts df: Dataframe to perform map on.\n            column: Column name in df to perform map on. (default='category_label')\n            map_dict: Dictionary containing map items. (default=category_dict)\n    '''\n    df[column] = df.category_id.map(map_dict)\n    return df\n\n# Find top youTube video producers for specified year.\ndef top_video_producing_for_yr(df, year, top_range=5):\n    '''\n    Finds top video producers for specified year.\n    Accepts df: Dataframe.\n            year: Year to filter by.\n            top_range: Number of top entries to print \/ return. (default=5)\n    '''\n\n    year_filter = [date.year == year for date in df['publish_time']]\n    sliced_df = df[year_filter]\n\n    channel_vid_groups = sliced_df.groupby(['channel_title'])['video_id'].count()\n    sorted_groups = channel_vid_groups.sort_values(ascending=False)\n    top_producers = sorted_groups[:top_range]\n\n    print('#'*30)\n    print(f'Top {top_range} video producers in {year} were:')\n    print()\n    i = 0\n    for vid_count in top_producers:\n        print('\\t', f'{str(i+1)}) {top_producers.index[i]} : {vid_count} videos.', end='')\n        print('\\n')\n        i += 1\n\n    print('#'*30)\n\n    return top_producers\n\n\n# Plotly Bar graph \ndef plotly_bar(x, y, name, title, x_title, y_title, filename, colors=None):\n    trace1 = go.Bar(x=x, \n                    y=y,\n                    name=name,\n                    marker={'color':colors})\n    layout = go.Layout(title=title, \n                        xaxis={'title':x_title},\n                        yaxis={'title':y_title})\n\n    data = [trace1]\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig, filename=filename)\n\n# Plotly Bar graph for year\ndef plot_category_bar_for_yr(df, year, colors=None):\n    year_filter = [date.year == year for date in df['publish_time']]\n    sliced_df = df[year_filter]\n\n    category_counts_for_yr = sliced_df.category_label.value_counts()\n    print(category_counts_for_yr)\n\n    x = category_counts_for_yr.index\n    y = category_counts_for_yr\n    name = f'Category Bar For {year}'\n    title = f'Category Count ({year})'\n    x_title = 'Category'\n    y_title = 'Count'\n    filename = f'category_bar_{year}'\n\n    plotly_bar(x=x, y=y, name=name, title=title, x_title=x_title, y_title=y_title, filename=filename, colors=colors)\n\n","f7ee9a3c":"date_columns = ['trending_date', 'publish_time']\n\nfor col in date_columns:\n    df[col] = [convert_date(ts) for ts in df[col]]\n","456cc4da":"# Take a peak at the first 5 rows (head).\ndf.head()\n","fc8349e1":"# Take a peak at the dataframes info function.\ndf.info()\n\n# 40,949 total entries.\n# Every column looks complete with the exception of the video descriptions.\n","9c6422bc":"# Take a peak at the dataframes describe function.\ndf.describe()\n","8494bad7":"# Let add category labels to the dataframe.\ncategory_dict = {\n    \n    1 :  'Film & Animation',\n    2 : 'Autos & Vehicles',\n    10 : 'Music',\n    15 : 'Pets & Animals',\n    17 : 'Sports',\n    18 : 'Short Movies',\n    19 : 'Travel & Events',\n    20 : 'Gaming',\n    21 : 'Videoblogging',\n    22 : 'People & Blogs',\n    23 : 'Comedy',\n    24 : 'Entertainment',\n    25 : 'News & Politics',\n    26 : 'Howto & Style',\n    27 : 'Education',\n    28 : 'Science & Technology',\n    29 : 'Nonprofits & Activism',\n    30 : 'Movies',\n    31 : 'Anime\/Animation',\n    32 : 'Action\/Adventure',\n    33 : 'Classics',\n    34 : 'Comedy',\n    35 : 'Documentary',\n    36 : 'Drama',\n    37 : 'Family',\n    38 : 'Foreign',\n    39 : 'Horror',\n    40 : 'Sci-Fi\/Fantasy',\n    41 : 'Thriller',\n    42 : 'Shorts',\n    43 : 'Shows',\n    44 : 'Trailers',\n}\n\n","ebc54398":"# Store new dataframe in a new variable.\nmapped_df = map_categories(df, map_dict=category_dict)\nyear_list = [int(date.year) for date in mapped_df['publish_time']]\nmapped_df['year'] = year_list\n\n# Rearrange columns so that category_id \n# and category_label are next to one another.\nmapped_df = mapped_df[['video_id', 'trending_date', 'title', 'channel_title', 'category_id',\n                    'category_label', 'publish_time', 'tags', 'views', 'likes', 'dislikes', \n                    'comment_count', 'thumbnail_link', 'comments_disabled', 'ratings_disabled',\n                    'video_error_or_removed', 'description', 'year']]\n\n","f8e6b883":"category_counts = mapped_df.category_label.value_counts()\ncategory_counts\n\ncategory_list = category_counts.index\ncat_colors = ['#016e29', '#7f2171', '#b241d0', '#decad2', '#54d7a1', '#10e481', '#2ec580', '#4fa15c',\n                '#94d85c', '#df5aad', '#6dd279', '#91a9ed', '#bb232b', '#b6d41b', '#359fe1', '#4985fd']\n\ncat_colors_dict = {cat:color for cat, color in zip(category_list, cat_colors)}\n","adde8248":"i = 0\nfor count in category_counts:\n    print(f'Of the {mapped_df.shape[0]} videos uploaded, {count} ({(count\/mapped_df.shape[0]) * 100:0.2f}%) videos were of the {category_counts.index[i]} category.')\n    print()\n    i += 1\n","f8d88626":"# PLot bar chart for all years.\nx = category_counts.index\ny = category_counts\nname = 'Category Bar'\ncolors = cat_colors\ntitle = 'Category Count (2006 - 2018)'\nx_title = 'Category'\ny_title = 'Count'\nfilename = 'category_bar'\nplotly_bar(x, y, name, title, x_title, y_title, filename, colors=colors)\n\n","75637e74":"# PLot bar chart for 2018.\nplot_category_bar_for_yr(mapped_df, 2018, colors=cat_colors)\n","a75d9cd8":"# PLot bar chart for 2018.\nplot_category_bar_for_yr(mapped_df, 2017, colors=cat_colors)\n","073c81f2":"# Table of year and category labels. Here we see the general number of videos\n# (That are tracked) uploaded since 2006.\ngrouped_df = mapped_df.groupby(['category_label', 'year'])['video_id'].count()\nunstacked_df = grouped_df.unstack().fillna(value=0)\nunstacked_df\n\n","76ca5d44":"channel_groups = mapped_df.groupby(['channel_title'])['video_id'].count().sort_values(ascending=False)\nchannel_groups[:30]\n","e27cefb4":"end = 30\nname = f'Top {end}'\ntitle = f'Top  {end} Video Producing Channels'\nx_title = 'Channels'\ny_title = 'Count'\nfilename = f'top_ {end}_producing'\n\nplotly_bar(x=channel_groups.index[:end], \n            y=channel_groups[:end], \n            name=name, \n            title=title, \n            x_title=x_title, \n            y_title=y_title, \n            filename=filename)","3b3e0020":"# Top category for ESPN channel.\ntop_channel_df = mapped_df[mapped_df['channel_title'] == 'ESPN']\ntop_channel_df.groupby(['category_label'])['video_id'].count().sort_values(ascending=False)\n","b0937bf9":"# Top category for The Tonight Show.\nchannel = 'The Tonight Show Starring Jimmy Fallon'\ntop_channel_df = mapped_df[mapped_df['channel_title'] == channel]\ntop_channel_df.groupby(['category_label'])['video_id'].count().sort_values(ascending=False)\n","faa9af6a":"# Report out categories and the amount of view accrued from 2006 - 2018.\nview_counts = mapped_df.groupby(['category_label'])['views'].sum().sort_values(ascending=False)\n\ni = 0\nfor count in view_counts:\n    print(f'{view_counts.index[i]} has accrued {count} views all-time (2006-2018).')\n    print()\n    i += 1\n\nprint('View Count Series')\nprint(view_counts)\n","a8160fb7":"# Report out categories and the amount of view accrued in 2017.\ndf_2017 = mapped_df[mapped_df['year'] == 2017]\nview_counts_2017 = df_2017.groupby(['category_label'])['views'].sum().sort_values(ascending=False)\n\ni = 0\nfor count in view_counts_2017:\n    print(f'{view_counts_2017.index[i]} has accrued {count} views in 2017.')\n    print()\n    i += 1\n\nprint()\nprint('View Count Series 2017', '#'*10)\nprint(view_counts_2017)\nprint('#'*35)\n","617e3607":"# Report out categories and the amount of view accrued in 2018.\ndf_2018 = mapped_df[mapped_df['year'] == 2018]\nview_counts_2018 = df_2018.groupby(['category_label'])['views'].sum().sort_values(ascending=False)\n\ni = 0\nfor count in view_counts_2018:\n    print(f'{view_counts_2018.index[i]} has accrued {count} views in 2018.')\n    print()\n    i += 1\n\nprint()\nprint('View Count Series 2018', '#'*10)\nprint(view_counts_2018)\nprint('#'*35)\n\n\n","2675da77":" # Trending YouTube Video Statistics Analysis\n\n ![Photo by Isaac Smith on Unsplash](https:\/\/images.unsplash.com\/photo-1543286386-713bdd548da4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=900&q=60 \"Chart\")\n\n Photo by Isaac Smith on Unsplash\n\n YouTube (the world-famous video sharing website) maintains a\n list of the top trending videos on the platform. According to\n Variety magazine, \u201cTo determine the year\u2019s top-trending videos,\n YouTube uses a combination of factors including measuring users interactions\n (number of views, shares, comments and likes). Note that they\u2019re not the\n most-viewed videos overall for the calendar year\u201d. Top performers on the\n YouTube trending list are music videos (such as the famously virile \u201cGangam Style\u201d),\n celebrity and\/or reality TV performances, and the random dude-with-a-camera viral\n videos that YouTube is well-known for.\n\n This dataset was collected using the YouTube API.\n\n Columns include:\n- video_id\n- trending_date\n- title\n- channel_title\n- category_id\n- publish_time\n- tags\n- views (number of views)\n- likes (number of likes)\n- dislikes (number of dislikes)\n- comment_count \n- thumbnail_link\n- comments_disabled\n- ratings_disabled\n- video_error_or_removed\n- description","86ddabc9":" ### Standard imports.","fa3cf337":" ## Exploring video category.\n- Which category was assigned the most?\n- Which category was assigned the least?\n- Which creator uploaded the most videos?\n>- Which were their most assigned video category?\n- Which category has had the most views 2017 \/ 2018?","9391fe5c":" ### Load Dataset"}}