{"cell_type":{"5df05f0f":"code","20dbd6f0":"code","72c832d6":"code","dbe1830c":"code","468bfdb7":"code","3a27d189":"code","bf6ee4a5":"code","f6d57f10":"code","5e387e9a":"code","f57ca56e":"code","96e7be76":"code","95da1af1":"code","7244a3a8":"code","6597b6ff":"code","eea35f57":"code","d0e41097":"code","314e5e7b":"code","9071667d":"code","aea157ec":"code","bbabecad":"code","eb885313":"code","4d5ae140":"code","ea5538e7":"code","9a8f525c":"markdown","5dc08b24":"markdown","db7d8a29":"markdown","19fe20d0":"markdown","1e43c71a":"markdown","e8884282":"markdown","de779c2f":"markdown","76cd765e":"markdown","0a89fd85":"markdown","69d297af":"markdown","d919419e":"markdown"},"source":{"5df05f0f":"def my_fun(x):\n    return x**2","20dbd6f0":"my_fun(3)","72c832d6":"y = lambda x: x**2\n\n#We are saying that lambda take x, Square it and return the answer in y","dbe1830c":"y(3)","468bfdb7":"# Using Simple Function\n\ndef my_sum(x,y,z):\n    return x+y+z\n    ","3a27d189":"result = my_sum(1,2,3)\nresult","bf6ee4a5":"# Using Lambda()\n\nresult = lambda x,y,z: x+y+z\n\nresult(1,2,3)","f6d57f10":"num_a = int(input(\"Enter 1st number:\"))\nnum_b = int(input(\"Enter 2nd number:\"))\n\nmult_ab = lambda x, y : x * y\n\nprint(\"Multiplication = {}\". format(mult_ab(num_a, num_b)))","5e387e9a":"# Defining 2 lists a and b\n\na = [1,4,5,6,9]\nb = [1,7,9,11,4]","f57ca56e":"# Defining a function to be performed on the elements of lists\n\ndef my_sum(a,b):\n    return a+b","96e7be76":"# Now we can use map() to apply the function to the entire lists and generate a new list\n\nc = list(map(my_sum,a,b))\nc","95da1af1":"input_list = [1,2,3,4]","7244a3a8":"output_list = list(map(lambda x: x**2, input_list))\noutput_list","6597b6ff":"def cube(x):\n    return x*x*x","eea35f57":"numbers = list(range (-10,11))\nnumbers","d0e41097":"cubed = list(map(lambda x: cube(x), numbers))","314e5e7b":"cubed","9071667d":"prices = [20,33,56,11,78,65,34,12,79,88]\nprices","aea157ec":"# Return only even numbers\n\neven_list = list(filter(lambda x: (x%2==0), prices))\neven_list\n\n# lambda will select only those numbers which return 0 ","bbabecad":"# Return only odd numbers\n\nodd_list = list(filter(lambda x:(x%2==1), prices))\nodd_list","eb885313":"# Return Prices that are greater than or equal to 56\n\nout_list = list(filter(lambda x: (x>=56), prices))\nout_list","4d5ae140":"# Return a value between 34 and 78\n\nout_list = list(filter(lambda x: (x>=34 and x<=78), prices))\nout_list","ea5538e7":"a = int(input(\"Enter lower bound:\"))\nb = int(input(\"Enter upper bound:\"))\n\nnumbers = range(a,b)\n\nc= list(filter(lambda x: (x>=0 and x%2==0), numbers))\n\nprint(c)","9a8f525c":"# Lambda Function\n","5dc08b24":"Write a code that takes the range from the user (ie upper and lower bound) and returns a list of positive and even numbers only-\n","db7d8a29":"# Map()-","19fe20d0":"#### Another example","1e43c71a":"# Filter()-","e8884282":"#### Now using Lambda()\n- there is no function in lambda","de779c2f":"#### Map() with Lambda","76cd765e":"Map() will take the name of the function i.e the operation we want to perform on 2 lists.\n\nand,\n\nthen we will cast whatever the map() returns to a list.","0a89fd85":"#### Code that take 2 inputs from the user and multiply them","69d297af":"#### Write a function that takes an argument and returns its cubic value.\n#### Define a list of integers ranging from -10 to 10.\n#### Apply the function to the entire list and generate a new output list.","d919419e":"#### Basic function that squares the input"}}