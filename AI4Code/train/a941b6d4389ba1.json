{"cell_type":{"ae7e1081":"code","6e1a869e":"code","b416703f":"code","03134d86":"code","e4734c1e":"code","55becda9":"code","c35858ac":"code","8e434bad":"code","7a957687":"code","6cbaadfe":"code","cf02c596":"code","44c2df9f":"code","32060cf4":"markdown","77ba1b95":"markdown","c01e0026":"markdown","8fb40131":"markdown","d3471bee":"markdown","bd1bb212":"markdown","d30be4d7":"markdown"},"source":{"ae7e1081":"import os\nimport cv2\nimport numpy as np \nimport matplotlib.pyplot as plt\n\ndata_dir = '\/kaggle\/input\/'\ndata_file = os.listdir(data_dir)\ndata_file.sort()\ndata_file","6e1a869e":"img_path_1, img_path_2 = [os.path.join(data_dir, filename) for filename in data_file]\nprint(img_path_1,'\\n',img_path_2)","b416703f":"for img_path in [img_path_1, img_path_2]:\n    img = cv2.imread(img_path)\n    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n    plt.figure(figsize = (12, 7))\n    plt.imshow(img)\n    plt.title('original image : \"%s\"'%(img_path))\nplt.show()","03134d86":"def fix_pixel_in_chanel_display(img_path, value, chanel=None):\n    \"\"\" \n    This function converts the colored_images w.r.t various pixel_value and chanel\n    Input_Args: \n        img_path (string) : path to image\n        chanel (int from 0-2): coresponding to chanels {blue, green, red} of the image\n        value (int from 0-255): value at each chanel input\n    Return: an image which changed after plug in the parameter\n    \"\"\"\n    ## read image\n    img = cv2.imread(img_path)\n    ## convert to RGB mode to show in matplotlib\n    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n    ## asgin RGB chanels to their_full_names\n    chanel_names = ['\"red\"', '\"green\"', '\"blue\"']\n    if chanel != None:\n        img[:, :, chanel] = value\n    ## display the images and its title\n    plt.title('all_pixel(chanel = %s) = %s'%(chanel_names[chanel], value))\n    plt.imshow(img)","e4734c1e":"values = np.arange(0, 256, 51)\nprint(img_path_1)\nplt.figure(figsize = (28, 10) )\nidx = 1\nfor c in range(3):\n    for k in range(6):\n        plt.subplot(3, 6, idx)\n        fix_pixel_in_chanel_display(img_path_1, values[k], c)\n        idx = idx + 1","55becda9":"print(img_path_2)\nplt.figure(figsize = (28, 9) )\nidx = 1\nfor c in range(3):\n    for k in range(6):\n        plt.subplot(3, 6, idx)\n        fix_pixel_in_chanel_display(img_path_2, values[k], c)\n        idx = idx + 1","c35858ac":"def split_colored_wrt_height(img_path, values_range, chanel_id):\n    \"\"\"\n    This function split an image to various colors with respect to the given chanel and corespondence pixels.\n    Input args:\n        img_path (string): path to the image\n        values_range (list of integers): values of the pixel in each partitions of image by height\n        chanel_id (int in {0,1,2}): corresponding to Red, Green and Blue\n    Returns: plot of image\n    \"\"\"\n    img = cv2.imread(img_path)\n    n = len(values_range)\n    h, w = img.shape[:2]\n    hp = h \/\/ (len(values_range) + 1)\n    img = img[:hp*(n+1), :, :]\n    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n    chanel_names = ['\"red\"', '\"green\"', '\"blue\"']\n    \n    for k in range(n):\n        img[hp * (k+1): hp*(k+2), :, chanel_id] = values_range[k]\n    plt.imshow(img)\n    Values = ['original'] + values_range.tolist()\n    vl = ['height in [%s, %s), \\n all_pixel(chanel = %s) = %s'%(hp * k, hp*(k+1), chanel_names[chanel_id], Values[k]) for k in range(n+1)]\n    plt.yticks([int((k+0.5)*h\/(n+1)) for k in range(n+1)], vl)","8e434bad":"plt.figure(figsize = (22, 18))\nfor chanel in [0, 1, 2]:\n    plt.subplot(3, 1, chanel + 1)\n    split_colored_wrt_height(img_path_1, values, chanel)\nplt.show()","7a957687":"plt.figure(figsize = (22, 18))\nfor chanel in [0, 1, 2]:\n    plt.subplot(3, 1, chanel + 1)\n    split_colored_wrt_height(img_path_2, values, chanel)\nplt.show()","6cbaadfe":"def split_colored_wrt_width(img_path, values_range, chanel_id):\n    \"\"\"\n    This function split an image to various colors with respect to the given chanel and corespondence pixels.\n    Input args:\n        img_path (string): path to the image\n        values_range (list of integers): values of the pixel in each partitions of image by width\n        chanel_id (int in {0,1,2}): corresponding to Red, Green and Blue\n    Returns: plot of image\n    \"\"\"\n    img = cv2.imread(img_path)    \n    n = len(values_range)\n    h, w = img.shape[:2]\n    wp = w \/\/ (n + 1)\n    img = img[:, : wp*(n+1), :]\n    chanel_names = ['\"red\"', '\"green\"', '\"blue\"']\n    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n    for k in range(n):\n        img[:, wp * (k+1): wp*(k+2), chanel_id] = values_range[k]\n    plt.imshow(img)\n    Values = ['original'] + values_range.tolist()\n    vl = ['width in [%s, %s), all_pixel(chanel = %s) = %s'%(wp * k, wp*(k+1), chanel_names[chanel_id], Values[k]) for k in range(n+1)]\n    plt.xticks([int((k+0.5)*w\/(n+1)) for k in range(n+1)], vl, rotation=85)","cf02c596":"plt.figure(figsize = (21, 12))\nfor k in range(3):\n    plt.subplot(1,3,k+1), split_colored_wrt_width(img_path_1, values, k)\nplt.show()","44c2df9f":"plt.figure(figsize = (21, 12))\nfor k in range(3):\n    plt.subplot(1,3,k+1), split_colored_wrt_width(img_path_2, values, k)\nplt.show()","32060cf4":"#### Display","77ba1b95":"## Convert color space. Asign all_pixel_chanel to a value\n\n### 1. List the `file_name` in the folder","c01e0026":"### 5. Split the image to the sequences of various color w.r.t the width","8fb40131":"### 2. Loading the original images","d3471bee":"### 3. Define a function to display the output_image after plug-in pixel&chanel","bd1bb212":"So, there are 2 files in this folder. Now we will name the `image_path` before loading it","d30be4d7":"### 4. Split the image to the sequences of various color w.r.t the height"}}