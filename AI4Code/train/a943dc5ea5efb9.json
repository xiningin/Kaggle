{"cell_type":{"b39118e2":"code","5b9e16c6":"code","50b8406e":"code","d3559516":"code","f9f7fd49":"code","dc21fa03":"code","bf8251f1":"code","bec7da57":"code","264c86a7":"code","201ea1b2":"code","a4af4283":"code","b2f673e1":"code","bc176a5d":"code","da160832":"code","e7870ce2":"code","b084f882":"code","f3ca14ce":"code","0dd0fe09":"code","50d60e46":"code","d6ef1316":"code","963c97be":"code","06c4fbaf":"code","3a66110b":"code","eb6ad0cb":"code","4187a85f":"code","44ea250e":"markdown","dceecc38":"markdown","d7db6861":"markdown","3e021316":"markdown","21d08a27":"markdown","6cdddb8f":"markdown","55d2cfb6":"markdown","2e6f0805":"markdown","7abaecae":"markdown"},"source":{"b39118e2":"# General imports\nimport numpy as np\nimport pandas as pd\nfrom pandas.tseries.holiday import USFederalHolidayCalendar as calendar\nimport os, sys, gc, warnings, random, datetime, math\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.preprocessing import LabelEncoder\n\nimport lightgbm as lgb\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nwarnings.filterwarnings('ignore')\n\nos.chdir('\/kaggle\/input\/ieeedataminification') # Set working directory\nprint(os.listdir('\/kaggle\/input\/ieeedataminification'))","5b9e16c6":"# Data Load\n\ntrain_df = pd.read_pickle('train_transaction.pkl')\ntest_df = pd.read_pickle('test_transaction.pkl')\ntrain_identity = pd.read_pickle('train_identity.pkl')\ntest_identity = pd.read_pickle('test_identity.pkl')\n\nprint('Load Data')   \nprint('Shape control:', train_df.shape, test_df.shape)","50b8406e":"# Helpers\n# Seeder\n# seed to make all processes deterministic     # type: int\n\ndef seed_everything(seed=0):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \n## Memory Reducer\n# :df pandas dataframe to reduce size             # type: pd.DataFrame()\n# :verbose                                        # type: bool\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","d3559516":"# Vars\nSEED = 42\nseed_everything(SEED)\nTARGET = 'isFraud'\nSTART_DATE = datetime.datetime.strptime('2017-11-30', '%Y-%m-%d')","f9f7fd49":"def values_normalization(dt_df, periods, columns):\n    for period in periods:\n        for col in columns:\n            new_col = col +'_'+ period\n            dt_df[col] = dt_df[col].astype(float)  \n\n            temp_min = dt_df.groupby([period])[col].agg(['min']).reset_index()\n            temp_min.index = temp_min[period].values\n            temp_min = temp_min['min'].to_dict()\n\n            temp_max = dt_df.groupby([period])[col].agg(['max']).reset_index()\n            temp_max.index = temp_max[period].values\n            temp_max = temp_max['max'].to_dict()\n\n            temp_mean = dt_df.groupby([period])[col].agg(['mean']).reset_index()\n            temp_mean.index = temp_mean[period].values\n            temp_mean = temp_mean['mean'].to_dict()\n\n            temp_std = dt_df.groupby([period])[col].agg(['std']).reset_index()\n            temp_std.index = temp_std[period].values\n            temp_std = temp_std['std'].to_dict()\n\n            dt_df['temp_min'] = dt_df[period].map(temp_min)\n            dt_df['temp_max'] = dt_df[period].map(temp_max)\n            dt_df['temp_mean'] = dt_df[period].map(temp_mean)\n            dt_df['temp_std'] = dt_df[period].map(temp_std)\n\n            dt_df[new_col+'_min_max'] = (dt_df[col]-dt_df['temp_min'])\/(dt_df['temp_max']-dt_df['temp_min'])\n            dt_df[new_col+'_std_score'] = (dt_df[col]-dt_df['temp_mean'])\/(dt_df['temp_std'])\n            del dt_df['temp_min'],dt_df['temp_max'],dt_df['temp_mean'],dt_df['temp_std']\n    return dt_df","dc21fa03":"def frequency_encoding(train_df, test_df, columns, self_encoding=False):\n    for col in columns:\n        temp_df = pd.concat([train_df[[col]], test_df[[col]]])\n        fq_encode = temp_df[col].value_counts(dropna=False).to_dict()\n        if self_encoding:\n            train_df[col] = train_df[col].map(fq_encode)\n            test_df[col]  = test_df[col].map(fq_encode)            \n        else:\n            train_df[col+'_fq_enc'] = train_df[col].map(fq_encode)\n            test_df[col+'_fq_enc']  = test_df[col].map(fq_encode)\n    return train_df, test_df","bf8251f1":"def timeblock_frequency_encoding(train_df, test_df, periods, columns, \n                                 with_proportions=True, only_proportions=False):\n    for period in periods:\n        for col in columns:\n            new_col = col +'_'+ period\n            train_df[new_col] = train_df[col].astype(str)+'_'+train_df[period].astype(str)\n            test_df[new_col]  = test_df[col].astype(str)+'_'+test_df[period].astype(str)\n\n            temp_df = pd.concat([train_df[[new_col]], test_df[[new_col]]])\n            fq_encode = temp_df[new_col].value_counts().to_dict()\n\n            train_df[new_col] = train_df[new_col].map(fq_encode)\n            test_df[new_col]  = test_df[new_col].map(fq_encode)\n            \n            if only_proportions:\n                train_df[new_col] = train_df[new_col]\/train_df[period+'_total']\n                test_df[new_col]  = test_df[new_col]\/test_df[period+'_total']\n\n            if with_proportions:\n                train_df[new_col+'_proportions'] = train_df[new_col]\/train_df[period+'_total']\n                test_df[new_col+'_proportions']  = test_df[new_col]\/test_df[period+'_total']\n\n    return train_df, test_df","bec7da57":"def uid_aggregation(train_df, test_df, main_columns, uids, aggregations):\n    for main_column in main_columns:  \n        for col in uids:\n            for agg_type in aggregations:\n                new_col_name = col+'_'+main_column+'_'+agg_type\n                temp_df = pd.concat([train_df[[col, main_column]], test_df[[col,main_column]]])\n                temp_df = temp_df.groupby([col])[main_column].agg([agg_type]).reset_index().rename(\n                                                        columns={agg_type: new_col_name})\n\n                temp_df.index = list(temp_df[col])\n                temp_df = temp_df[new_col_name].to_dict()   \n\n                train_df[new_col_name] = train_df[col].map(temp_df)\n                test_df[new_col_name]  = test_df[col].map(temp_df)\n    return train_df, test_df\n\ndef uid_aggregation_and_normalization(train_df, test_df, main_columns, uids, aggregations):\n    for main_column in main_columns:  \n        for col in uids:\n            \n            new_norm_col_name = col+'_'+main_column+'_std_norm'\n            norm_cols = []\n            \n            for agg_type in aggregations:\n                new_col_name = col+'_'+main_column+'_'+agg_type\n                temp_df = pd.concat([train_df[[col, main_column]], test_df[[col,main_column]]])\n                temp_df = temp_df.groupby([col])[main_column].agg([agg_type]).reset_index().rename(\n                                                        columns={agg_type: new_col_name})\n\n                temp_df.index = list(temp_df[col])\n                temp_df = temp_df[new_col_name].to_dict()   \n\n                train_df[new_col_name] = train_df[col].map(temp_df)\n                test_df[new_col_name]  = test_df[col].map(temp_df)\n                norm_cols.append(new_col_name)\n            \n            train_df[new_norm_col_name] = (train_df[main_column]-train_df[norm_cols[0]])\/train_df[norm_cols[1]]\n            test_df[new_norm_col_name]  = (test_df[main_column]-test_df[norm_cols[0]])\/test_df[norm_cols[1]]          \n            \n            del train_df[norm_cols[0]], train_df[norm_cols[1]]\n            del test_df[norm_cols[0]], test_df[norm_cols[1]]\n                                              \n    return train_df, test_df\n","264c86a7":"def check_cor_and_remove(train_df, test_df, i_cols, new_columns, remove=False):\n    # Check correllation\n    print('Correlations','#'*10)\n    for col in new_columns:\n        cor_cof = np.corrcoef(train_df[TARGET], train_df[col].fillna(0))[0][1]\n        print(col, cor_cof)\n\n    if remove:\n        print('#'*10)\n        print('Best options:')\n        best_fe_columns = []\n        for main_col in i_cols:\n            best_option = ''\n            best_cof = 0\n            for col in new_columns:\n                if main_col in col:\n                    cor_cof = np.corrcoef(train_df[TARGET], train_df[col].fillna(0))[0][1]\n                    cor_cof = (cor_cof**2)**0.5\n                    if cor_cof>best_cof:\n                        best_cof = cor_cof\n                        best_option = col\n\n            print(main_col, best_option, best_cof)            \n            best_fe_columns.append(best_option)\n\n        for col in new_columns:\n            if col not in best_fe_columns:\n                del train_df[col], test_df[col]\n\n    return train_df, test_df","201ea1b2":"# All features columns\n# Main Data\n# 'TransactionID',                     -> This is pure noise, we cannot use this column as feature\n# 'isFraud',                           -> Our Target\n# 'TransactionDT',                     -> Time from reference time point. VERY valuable column\n# 'TransactionAmt',                    -> Many unique values and has to be combined with other columns\n#                                         The best score boost should come from \n#                                         TransactionDT->TransactionAmt combination\n# 'ProductCD',                         -> 100% categorical feature options to use:\n#                                         Frequency encoding\/Target encoding\/\n#                                         Combinations with other columns\/Model categorical feature\n# 'card1' - 'card6',                   -> Categorical features with information about Client\n# 'addr1' - 'addr2',                   -> add2 - Country \/ addr1 - subzone\n# 'dist1' - 'dist2',                   -> dist2 - Country distance \/ dist1 - local distance from merchant\n# 'P_emaildomain' - 'R_emaildomain',   -> Categorical feature. It's possible to make \n#                                         subgroup feature from it or general group\n# 'C1' - 'C14'                         -> Counts. Should be numerical features (all ints?)\n# 'D1' - 'D15'                         -> Timedeltas - minimal value will be same for each month and day\n#                                         but maximum and mean values will grow over time \n# 'M1' - 'M9'\n# 'V1' - 'V339'\n\n## Identity Data\n# 'TransactionID'\n# 'id_01' - 'id_38'\n# 'DeviceType',\n# 'DeviceInfo'\n\n# Add list of feature that we will\n# remove later from final features list\nremove_features = [\n    'TransactionID','TransactionDT', # These columns are pure noise right now\n    TARGET,\n    ]\n\nbase_columns = [col for col in list(train_df) if col not in remove_features]","a4af4283":"# Model params\nlgb_params = {\n                    'objective':'binary',\n                    'boosting_type':'gbdt',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.01,\n                    'num_leaves': 2**8,\n                    'max_depth':-1,\n                    'tree_learner':'serial',\n                    'colsample_bytree': 0.7,\n                    'subsample_freq':1,\n                    'subsample':0.7,\n                    'n_estimators':80000,\n                    'max_bin':255,\n                    'verbose':-1,\n                    'seed': SEED,\n                    'early_stopping_rounds':100, \n                }","b2f673e1":"# Model\n\ndef make_predictions(tr_df, tt_df, features_columns, target, lgb_params, NFOLDS=6):\n    folds = KFold(n_splits=NFOLDS, shuffle=True, random_state=SEED)\n\n    X,y = tr_df[features_columns], tr_df[target]    \n    P,P_y = tt_df[features_columns], tt_df[target]  \n\n    tt_df = tt_df[['TransactionID',target]]    \n    predictions = np.zeros(len(tt_df))\n    \n    for fold_, (trn_idx, val_idx) in enumerate(folds.split(X, y)):\n        print('Fold:',fold_)\n        tr_x, tr_y = X.iloc[trn_idx,:], y[trn_idx]\n        vl_x, vl_y = X.iloc[val_idx,:], y[val_idx]\n            \n        print(len(tr_x),len(vl_x))\n        tr_data = lgb.Dataset(tr_x, label=tr_y)\n        vl_data = lgb.Dataset(vl_x, label=vl_y)  \n\n        estimator = lgb.train(\n            lgb_params,\n            tr_data,\n            valid_sets = [tr_data, vl_data],\n            verbose_eval = 200,\n        )   \n        \n        pp_p = estimator.predict(P)\n        predictions += pp_p\/NFOLDS\n        \n        del tr_x, tr_y, vl_x, vl_y, tr_data, vl_data\n        gc.collect()\n        \n    tt_df['prediction'] = predictions\n    \n    return tt_df\n\ndef make_test_predictions(tr_df, tt_df, target, lgb_params, NFOLDS=6):\n    \n    new_columns = set(list(train_df)).difference(base_columns + remove_features)\n    features_columns = base_columns + list(new_columns)\n    \n    folds = KFold(n_splits=NFOLDS, shuffle=True, random_state=SEED)\n\n    X,y = tr_df[features_columns], tr_df[target]    \n    P,P_y = tt_df[features_columns], tt_df[target]  \n\n    for col in list(X):\n        if X[col].dtype=='O':\n            X[col] = X[col].fillna('unseen_before_label')\n            P[col] = P[col].fillna('unseen_before_label')\n\n            X[col] = train_df[col].astype(str)\n            P[col] = test_df[col].astype(str)\n\n            le = LabelEncoder()\n            le.fit(list(X[col])+list(P[col]))\n            X[col] = le.transform(X[col])\n            P[col]  = le.transform(P[col])\n\n            X[col] = X[col].astype('category')\n            P[col] = P[col].astype('category')\n        \n    tt_df = tt_df[['TransactionID',target]]    \n    predictions = np.zeros(len(tt_df))\n\n    tr_data = lgb.Dataset(X, label=y)\n    vl_data = lgb.Dataset(P, label=P_y) \n    estimator = lgb.train(\n            lgb_params,\n            tr_data,\n            valid_sets = [tr_data, vl_data],\n            verbose_eval = 200,\n        )   \n        \n    pp_p = estimator.predict(P)\n    predictions += pp_p\/NFOLDS\n        \n    tt_df['prediction'] = predictions\n    \n    return tt_df","bc176a5d":"# TransactionDT\ndates_range = pd.date_range(start='2017-10-01', end='2019-01-01')\nus_holidays = calendar().holidays(start=dates_range.min(), end=dates_range.max())\n\n# Let's add temporary \"time variables\" for aggregations\n# and add normal \"time variables\"\nfor df in [train_df, test_df]:\n    \n    # Temporary variables for aggregation\n    df['DT'] = df['TransactionDT'].apply(lambda x: (START_DATE + datetime.timedelta(seconds = x)))\n    df['DT_M'] = ((df['DT'].dt.year-2017)*12 + df['DT'].dt.month).astype(np.int8)\n    df['DT_W'] = ((df['DT'].dt.year-2017)*52 + df['DT'].dt.weekofyear).astype(np.int8)\n    df['DT_D'] = ((df['DT'].dt.year-2017)*365 + df['DT'].dt.dayofyear).astype(np.int16)\n    \n    df['DT_hour'] = (df['DT'].dt.hour).astype(np.int8)\n    df['DT_day_week'] = (df['DT'].dt.dayofweek).astype(np.int8)\n    df['DT_day_month'] = (df['DT'].dt.day).astype(np.int8)\n        \n    # Possible solo feature\n    df['is_december'] = df['DT'].dt.month\n    df['is_december'] = (df['is_december']==12).astype(np.int8)\n\n    # Holidays\n    df['is_holiday'] = (df['DT'].dt.date.astype('datetime64').isin(us_holidays)).astype(np.int8)\n\n# Remove temporary features from final list\nremove_features += ['DT','DT_M','DT_W','DT_D','DT_hour','DT_day_week','DT_day_month']\n    \n# Total transactions per timeblock\nfor col in ['DT_M','DT_W','DT_D']:\n    temp_df = pd.concat([train_df[[col]], test_df[[col]]])\n    fq_encode = temp_df[col].value_counts().to_dict()\n            \n    train_df[col+'_total'] = train_df[col].map(fq_encode)\n    test_df[col+'_total']  = test_df[col].map(fq_encode)\n    \n    # We can't use it as solo feature\n    remove_features.append(col+'_total')","da160832":"# Card columns \"outliers\"\nfor col in ['card1']: \n    valid_card = pd.concat([train_df[[col]], test_df[[col]]])\n    valid_card = valid_card[col].value_counts()\n    valid_card_std = valid_card.values.std()\n\n    invalid_cards = valid_card[valid_card<=2]\n    print('Rare cards',len(invalid_cards))\n\n    valid_card = valid_card[valid_card>2]\n    valid_card = list(valid_card.index)\n\n    print('No intersection in Train', len(train_df[~train_df[col].isin(test_df[col])]))\n    print('Intersection in Train', len(train_df[train_df[col].isin(test_df[col])]))\n    \n    train_df[col] = np.where(train_df[col].isin(test_df[col]), train_df[col], np.nan)\n    test_df[col]  = np.where(test_df[col].isin(train_df[col]), test_df[col], np.nan)\n\n    train_df[col] = np.where(train_df[col].isin(valid_card), train_df[col], np.nan)\n    test_df[col]  = np.where(test_df[col].isin(valid_card), test_df[col], np.nan)\n    print('#'*20)\n\nfor col in ['card2','card3','card4','card5','card6',]: \n    print('No intersection in Train', col, len(train_df[~train_df[col].isin(test_df[col])]))\n    print('Intersection in Train', col, len(train_df[train_df[col].isin(test_df[col])]))\n    \n    train_df[col] = np.where(train_df[col].isin(test_df[col]), train_df[col], np.nan)\n    test_df[col]  = np.where(test_df[col].isin(train_df[col]), test_df[col], np.nan)\n    print('#'*20)","e7870ce2":"# Client Virtual ID\n# Let's add some kind of client uID based on cardID and addr columns\n# The value will be very specific for each client so we need to remove it\n# from final features. But we can use it for aggregations.\ntrain_df['uid'] = train_df['card1'].astype(str)+'_'+train_df['card2'].astype(str)\ntest_df['uid'] = test_df['card1'].astype(str)+'_'+test_df['card2'].astype(str)\n\ntrain_df['uid2'] = train_df['uid'].astype(str)+'_'+train_df['card3'].astype(str)+'_'+train_df['card5'].astype(str)\ntest_df['uid2'] = test_df['uid'].astype(str)+'_'+test_df['card3'].astype(str)+'_'+test_df['card5'].astype(str)\n\ntrain_df['uid3'] = train_df['uid2'].astype(str)+'_'+train_df['addr1'].astype(str)+'_'+train_df['addr2'].astype(str)\ntest_df['uid3'] = test_df['uid2'].astype(str)+'_'+test_df['addr1'].astype(str)+'_'+test_df['addr2'].astype(str)\n\ntrain_df['uid4'] = train_df['uid3'].astype(str)+'_'+train_df['P_emaildomain'].astype(str)\ntest_df['uid4'] = test_df['uid3'].astype(str)+'_'+test_df['P_emaildomain'].astype(str)\n\ntrain_df['uid5'] = train_df['uid3'].astype(str)+'_'+train_df['R_emaildomain'].astype(str)\ntest_df['uid5'] = test_df['uid3'].astype(str)+'_'+test_df['R_emaildomain'].astype(str)\n\n# Add values remove list\nnew_columns = ['uid','uid2','uid3','uid4','uid5']\nremove_features += new_columns\n\nprint('#'*10)\nprint('Most common uIds:')\nfor col in new_columns:\n    print('#'*10, col)\n    print(train_df[col].value_counts()[:10])\n\n# Do Global frequency encoding \ni_cols = ['card1','card2','card3','card5'] + new_columns\ntrain_df, test_df = frequency_encoding(train_df, test_df, i_cols, self_encoding=False)","b084f882":"# card3\/card5 most common hour \n# card3 or card5 is a bank country?\n# can we find:\n# the most popular Transaction Hour\n# the most popular Week Day\n# and then find distance from it\n\n# Prepare bank type feature\nfor df in [train_df, test_df]:\n    df['bank_type'] = df['card3'].astype(str) +'_'+ df['card5'].astype(str)\nremove_features.append('bank_type') \n\nencoding_mean = {\n    1: ['DT_D','DT_hour','_hour_dist','DT_hour_mean'],\n    2: ['DT_W','DT_day_week','_week_day_dist','DT_day_week_mean'],\n    3: ['DT_M','DT_day_month','_month_day_dist','DT_day_month_mean'],\n    }\n\nencoding_best = {\n    1: ['DT_D','DT_hour','_hour_dist_best','DT_hour_best'],\n    2: ['DT_W','DT_day_week','_week_day_dist_best','DT_day_week_best'],\n    3: ['DT_M','DT_day_month','_month_day_dist_best','DT_day_month_best'],   \n    }\n\n# Some ugly code here (even worse than in other parts)\nfor col in ['card3','card5','bank_type']:\n    for df in [train_df, test_df]:\n        for encode in encoding_mean:\n            encode = encoding_mean[encode].copy()\n            new_col = col + '_' + encode[0] + encode[2]\n            df[new_col] = df[col].astype(str) +'_'+ df[encode[0]].astype(str)\n\n            temp_dict = df.groupby([new_col])[encode[1]].agg(['mean']).reset_index().rename(\n                                                                    columns={'mean': encode[3]})\n            temp_dict.index = temp_dict[new_col].values\n            temp_dict = temp_dict[encode[3]].to_dict()\n            df[new_col] = df[encode[1]] - df[new_col].map(temp_dict)\n\n        for encode in encoding_best:\n            encode = encoding_best[encode].copy()\n            new_col = col + '_' + encode[0] + encode[2]\n            df[new_col] = df[col].astype(str) +'_'+ df[encode[0]].astype(str)\n            temp_dict = df.groupby([col,encode[0],encode[1]])[encode[1]].agg(['count']).reset_index().rename(\n                                                                    columns={'count': encode[3]})\n\n            temp_dict.sort_values(by=[col,encode[0],encode[3]], inplace=True)\n            temp_dict = temp_dict.drop_duplicates(subset=[col,encode[0]], keep='last')\n            temp_dict[new_col] = temp_dict[col].astype(str) +'_'+ temp_dict[encode[0]].astype(str)\n            temp_dict.index = temp_dict[new_col].values\n            temp_dict = temp_dict[encode[1]].to_dict()\n            df[new_col] = df[encode[1]] - df[new_col].map(temp_dict)","f3ca14ce":"# bank_type\n# Tracking nomal activity\n# by doing timeblock frequency encoding\ni_cols = ['bank_type'] #['uid','uid2','uid3','uid4','uid5','bank_type']\nperiods = ['DT_M','DT_W','DT_D']\n\n# We have few options to encode it here:\n# - Just count transactions\n# (but some timblocks have more transactions than others)\n# - Devide to total transactions per timeblock (proportions)\n# - Use both\n# - Use only proportions\ntrain_df, test_df = timeblock_frequency_encoding(train_df, test_df, periods, i_cols, \n                                 with_proportions=False, only_proportions=True)","0dd0fe09":"# D Columns\ni_cols = ['D'+str(i) for i in range(1,16)]\nperiods = ['DT_D']\n\ntemp_df = pd.concat([train_df[['TransactionDT']+i_cols+periods], test_df[['TransactionDT']+i_cols+periods]])\nfor period in periods:\n    for col in i_cols:\n        for df in [temp_df]:\n            df.set_index(period)[col].plot(style='.', title=col, figsize=(15, 3))\n            plt.show()","50d60e46":"# D Columns\n# From columns description we know that\n# D1-D15: timedelta, such as days between previous transaction, etc.\n# 1. I can't imagine normal negative timedelta values (Let's clip Values)\n# 2. Normalize (Min-Max, Standard score) All D columns, except D1,D2,D9\n# 3. Do some aggregations based on uIDs\n# 4. Freaquency encoding\n# 5. D1,D2 are clipped by max train_df values (let's scale it)\ni_cols = ['D'+str(i) for i in range(1,16)]\nuids = ['uid','uid2','uid3','uid4','uid5','bank_type']\naggregations = ['mean','std']\n\n# uIDs aggregations\ntrain_df, test_df = uid_aggregation(train_df, test_df, i_cols, uids, aggregations)\n\n# Cleaning Neagtive values and columns transformations\nfor df in [train_df, test_df]:\n\n    for col in i_cols:\n        df[col] = df[col].clip(0) \n    \n    # Lets transform D8 and D9 column\n    # As we almost sure it has connection with hours\n    df['D9_not_na'] = np.where(df['D9'].isna(),0,1)\n    df['D8_not_same_day'] = np.where(df['D8']>=1,1,0)\n    df['D8_D9_decimal_dist'] = df['D8'].fillna(0)-df['D8'].fillna(0).astype(int)\n    df['D8_D9_decimal_dist'] = ((df['D8_D9_decimal_dist']-df['D9'])**2)**0.5\n    df['D8'] = df['D8'].fillna(-1).astype(int)\n\n# Values Normalization\ni_cols.remove('D1')\ni_cols.remove('D2')\ni_cols.remove('D9')\nperiods = ['DT_D','DT_W','DT_M']\nfor df in [train_df, test_df]:\n    df = values_normalization(df, periods, i_cols)\n\nfor col in ['D1','D2']:\n    for df in [train_df, test_df]:\n        df[col+'_scaled'] = df[col]\/train_df[col].max()\n        \n# Global Self frequency encoding\n# self_encoding=True because \n# we don't need original values anymore\ni_cols = ['D'+str(i) for i in range(1,16)]\ntrain_df, test_df = frequency_encoding(train_df, test_df, i_cols, self_encoding=True)","d6ef1316":"# TransactionAmt\ni_cols = ['TransactionAmt']\nperiods = ['DT_D']\n\ntemp_df = pd.concat([train_df[['TransactionDT']+i_cols+periods], test_df[['TransactionDT']+i_cols+periods]])\nfor period in periods:\n    for col in i_cols:\n        for df in [temp_df]:\n            df.set_index(period)[col].plot(style='.', title=col, figsize=(15, 3))\n            plt.show()\n\n# Clip Values\ntrain_df['TransactionAmt'] = train_df['TransactionAmt'].clip(0,5000)\ntest_df['TransactionAmt']  = test_df['TransactionAmt'].clip(0,5000)\n\n# Check if the Transaction Amount is common or not (we can use freq encoding here)\n# In our dialog with a model we are telling to trust or not to these values   \ntrain_df['TransactionAmt_check'] = np.where(train_df['TransactionAmt'].isin(test_df['TransactionAmt']), 1, 0)\ntest_df['TransactionAmt_check']  = np.where(test_df['TransactionAmt'].isin(train_df['TransactionAmt']), 1, 0)\n\n# For our model current TransactionAmt is a noise\n# https:\/\/www.kaggle.com\/kyakovlev\/ieee-check-noise\n# (even if features importances are telling contrariwise)\n# There are many unique values and model doesn't generalize well\n# Lets do some aggregations\ni_cols = ['TransactionAmt']\nuids = ['card1','card2','card3','card5','uid','uid2','uid3','uid4','uid5','bank_type']\naggregations = ['mean','std']\n\n# uIDs aggregations\ntrain_df, test_df = uid_aggregation(train_df, test_df, i_cols, uids, aggregations)\n \n# TransactionAmt Normalization\nperiods = ['DT_D','DT_W','DT_M']\nfor df in [train_df, test_df]:\n    df = values_normalization(df, periods, i_cols)\n\n# Product type\ntrain_df['product_type'] = train_df['ProductCD'].astype(str)+'_'+train_df['TransactionAmt'].astype(str)\ntest_df['product_type'] = test_df['ProductCD'].astype(str)+'_'+test_df['TransactionAmt'].astype(str)\n\ni_cols = ['product_type']\nperiods = ['DT_D','DT_W','DT_M']\ntrain_df, test_df = timeblock_frequency_encoding(train_df, test_df, periods, i_cols, \n                                                 with_proportions=False, only_proportions=True)\ntrain_df, test_df = frequency_encoding(train_df, test_df, i_cols, self_encoding=True)\n\n# Small \"hack\" to transform distribution \n# (doesn't affect auc much, but I like it more)\n# please see how distribution transformation can boost your score \n# (not our case but related)\n# https:\/\/scikit-learn.org\/stable\/auto_examples\/compose\/plot_transformed_target.html\ntrain_df['TransactionAmt'] = np.log1p(train_df['TransactionAmt'])\ntest_df['TransactionAmt'] = np.log1p(test_df['TransactionAmt'])","963c97be":"# C Columns\ni_cols = ['C'+str(i) for i in range(1,15)]\n\n# Global Self frequency encoding\n# self_encoding=False because \n# I want to keep original values\ntrain_df, test_df = frequency_encoding(train_df, test_df, i_cols, self_encoding=False)\n\n# Clip max values\nfor df in [train_df, test_df]:\n    for col in i_cols:\n        max_value = train_df[train_df['DT_M']==train_df['DT_M'].max()][col].max()\n        df[col] = df[col].clip(None,max_value) ","06c4fbaf":"# Device info and identity\nfor df in [train_identity, test_identity]:\n    ########################### Device info\n    df['DeviceInfo'] = df['DeviceInfo'].fillna('unknown_device').str.lower()\n    df['DeviceInfo_device'] = df['DeviceInfo'].apply(lambda x: ''.join([i for i in x if i.isalpha()]))\n    df['DeviceInfo_version'] = df['DeviceInfo'].apply(lambda x: ''.join([i for i in x if i.isnumeric()]))\n    \n    ########################### Device info 2\n    df['id_30'] = df['id_30'].fillna('unknown_device').str.lower()\n    df['id_30_device'] = df['id_30'].apply(lambda x: ''.join([i for i in x if i.isalpha()]))\n    df['id_30_version'] = df['id_30'].apply(lambda x: ''.join([i for i in x if i.isnumeric()]))\n    \n    ########################### Browser\n    df['id_31'] = df['id_31'].fillna('unknown_device').str.lower()\n    df['id_31_device'] = df['id_31'].apply(lambda x: ''.join([i for i in x if i.isalpha()]))\n    \n# Merge Identity columns\ntemp_df = train_df[['TransactionID']]\ntemp_df = temp_df.merge(train_identity, on=['TransactionID'], how='left')\ndel temp_df['TransactionID']\ntrain_df = pd.concat([train_df,temp_df], axis=1)\n    \ntemp_df = test_df[['TransactionID']]\ntemp_df = temp_df.merge(test_identity, on=['TransactionID'], how='left')\ndel temp_df['TransactionID']\ntest_df = pd.concat([test_df,temp_df], axis=1)\n\ni_cols = [\n          'DeviceInfo','DeviceInfo_device','DeviceInfo_version',\n          'id_30','id_30_device','id_30_version',\n          'id_31','id_31_device',\n          'id_33',\n         ]\n\n# Global Self frequency encoding\n# self_encoding=True because \n# we don't need original values anymore\ntrain_df, test_df = frequency_encoding(train_df, test_df, i_cols, self_encoding=True)","3a66110b":"# ProductCD and M4 Target mean\n# As we already have frequency encoded columns\n# We can have different global transformation on them\n# Target mean?\n# We will transform original values as we don't need them\n# Leakage over folds?\n# Yes, we will have some,\n# But in the same time we already have leakage from \n# V columns and card1->card6 columns\n# So, no much harm here\nfor col in ['ProductCD','M4']:\n    temp_dict = train_df.groupby([col])[TARGET].agg(['mean']).reset_index().rename(\n                                                        columns={'mean': col+'_target_mean'})\n    temp_dict.index = temp_dict[col].values\n    temp_dict = temp_dict[col+'_target_mean'].to_dict()\n\n    train_df[col] = train_df[col].map(temp_dict)\n    test_df[col]  = test_df[col].map(temp_dict)","eb6ad0cb":"# Encode Str columns\n# For all such columns (probably not)\n# we already did frequency encoding (numeric feature)\n# so we will use astype('category') here\nfor col in list(train_df):\n    if train_df[col].dtype=='O':\n        print(col)\n        train_df[col] = train_df[col].fillna('unseen_before_label')\n        test_df[col]  = test_df[col].fillna('unseen_before_label')\n        \n        train_df[col] = train_df[col].astype(str)\n        test_df[col] = test_df[col].astype(str)\n        \n        le = LabelEncoder()\n        le.fit(list(train_df[col])+list(test_df[col]))\n        train_df[col] = le.transform(train_df[col])\n        test_df[col]  = le.transform(test_df[col])\n        \n        train_df[col] = train_df[col].astype('category')\n        test_df[col] = test_df[col].astype('category')","4187a85f":"# Minification\ntrain_df.to_pickle('\/kaggle\/working\/train_df.pkl')\ntest_df.to_pickle('\/kaggle\/working\/test_df.pkl')\n\nremove_features = pd.DataFrame(remove_features, columns=['features_to_remove'])\nremove_features.to_pickle('\/kaggle\/working\/remove_features.pkl')","44ea250e":"<img src=\"https:\/\/github.com\/DataCampM2DSSAF\/suivi-du-data-camp-equipe-tchouacheu-niang-chokki\/blob\/master\/img\/credit-card-fraud-detection.png?raw=true\" width=\"800\" align=\"right\">","dceecc38":"# <a style=\"color:#6699ff\"> I. Load Data<\/a>","d7db6861":"----","3e021316":"<h1 align=\"center\" style=\"color:#6699ff\"> DataCamp IEEE Fraud Detection <\/h1>","21d08a27":"<h1 align=\"center\" style=\"color:#6699ff\"> IEEE Frequency encode with preprocessing for LGBM <\/h1>","6cdddb8f":"# <a style=\"color:#6699ff\">  Table of Contents<\/a> \n\n<a style=\"color:#6699ff\"> I. Load Data<\/a>\n\n<a style=\"color:#6699ff\"> II. Preprocessing for LGBM<\/a>\n\n<a style=\"color:#6699ff\"> III. Feature Engineering and Model<\/a>\n","55d2cfb6":"# <a style=\"color:#6699ff\"> II. Preprocessing for LGBM<\/a>","2e6f0805":"# <a style=\"color:#6699ff\"> III. Feature Engineering and Model<\/a>","7abaecae":"#  <a style=\"color:#6699ff\"> Team <\/a>\n- <a style=\"color:#6699ff\">Mohamed NIANG <\/a>\n- <a style=\"color:#6699ff\">Fernanda Tchouacheu <\/a>\n- <a style=\"color:#6699ff\">Hypolite Chokki <\/a>"}}