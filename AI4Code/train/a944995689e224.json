{"cell_type":{"ac59e3d2":"code","c4ef7d4b":"code","0ede9cf5":"code","4fbe0cf8":"code","ab088b6c":"code","95edea14":"code","d5a054fa":"code","d47c00f8":"code","d4b10df3":"code","2af27bfc":"code","e1bf1c91":"code","fa3ec10e":"code","4dd9eb42":"code","95d5e4bd":"code","ef783394":"code","3656f287":"code","75bcdf5f":"code","1a11320c":"code","e1f34c76":"code","fc08409e":"code","3a73e4f8":"code","1ca6313b":"markdown","1e32e136":"markdown","fc23758e":"markdown","67cab555":"markdown","8c0d569d":"markdown","2c2dde82":"markdown","b93272da":"markdown","a28df68d":"markdown","66b6da69":"markdown","88545837":"markdown","179812dd":"markdown","0a0310a3":"markdown","585003a6":"markdown","55f054fd":"markdown","5b901edc":"markdown","bd53e6ba":"markdown","6ef76cae":"markdown","b8729064":"markdown","531d2c0e":"markdown","8155b21a":"markdown","48932cd9":"markdown","58f2b756":"markdown","0b4fb45a":"markdown","9491e353":"markdown","257f9720":"markdown"},"source":{"ac59e3d2":"from sklearn import preprocessing\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import preprocessing\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport pydot\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set()\n\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n# Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport tensorflow as tf\nimport datetime, os\n\nimport sklearn\nfrom sklearn import metrics\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import export_graphviz, DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.exceptions import NotFittedError\nfrom sklearn.utils import shuffle\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras import optimizers\nfrom keras.wrappers.scikit_learn import KerasClassifier\n\nfrom IPython.display import display\n%load_ext tensorboard.notebook\n\n\n\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, f1_score,confusion_matrix,classification_report\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.preprocessing import normalize\npd.set_option('display.max_columns', None)\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import mean_squared_error\n\nimport pickle","c4ef7d4b":"odf=pd.read_csv('\/kaggle\/input\/equipfails\/equip_failures_training_set.csv',index_col=0)\nodft=pd.read_csv('\/kaggle\/input\/equipfails\/equip_failures_test_set.csv',index_col=0)","0ede9cf5":"odf.describe()","4fbe0cf8":"odf.shape","ab088b6c":"odf.dtypes","95edea14":"odf.head(5)","d5a054fa":"df=odf.replace({'na':-999999})\nXt=odft.replace({'na':-999999})\nXt=Xt.astype(float)\ndf=df.astype(float)\ndf['target']=df['target'].astype(int)","d47c00f8":"sns.countplot(df['target'],label=\"Count\")","d4b10df3":"X=df.iloc[:,1:]\ny=df.iloc[:,0]\n\n#L2 Normalize\nXn=normalize(X)\nXtn=normalize(Xt)","2af27bfc":"# Confusion Matrix\ndef confusion_matrix(target, prediction, score=None):\n   cm = metrics.confusion_matrix(target, prediction)\n   plt.figure(figsize=(4,4))\n   sns.heatmap(cm, annot=True,fmt=\".3f\", linewidths=.5, square=True, cmap='Blues_r')\n   plt.ylabel('Act')\n   plt.xlabel('Pred')","e1bf1c91":"X_train, X_test, y_train, y_test = train_test_split(Xn, y, test_size=0.2, random_state=8)","fa3ec10e":"my_class = ExtraTreesClassifier(random_state=0)\nmy_class.fit(X_train, y_train)\ny_pred= clf.predict(X_test)\nprint('accuracy: {}'.format(accuracy_score(y_test, y_pred)))\nprint(f'F1: {f1_score(y_test,y_pred)}')\nconfusion_matrix(y_test,y_pred)","4dd9eb42":"my_class = AdaBoostClassifier(random_state=0)\nmy_class.fit(X_train, y_train)\ny_pred= my_class.predict(X_test)\nprint('accuracy: {}'.format(accuracy_score(y_test, y_pred)))\nprint(f'F1: {f1_score(y_test,y_pred)}')\nconfusion_matrix(y_test,y_pred)","95d5e4bd":"lg = LogisticRegression(solver='lbfgs', random_state=18)\nlg.fit(X_train, y_train)\nlogistic_prediction = lg.predict(X_test)\nscore = metrics.accuracy_score(y_test, logistic_prediction)\nprint(score)\nconfusion_matrix(y_test,logistic_prediction)","ef783394":"data_dmatrix = xgb.DMatrix(data=Xn,label=y)\nxgc = xgb.XGBClassifier(objective ='reg:logistic', colsample_bytree = 0.15,\n                          learning_rate = 0.1, \n                          max_depth = 20, alpha = 12, n_estimators = 700)\nxgc.fit(X,y)","3656f287":"pred_train=xgc.predict(X)\npred_train.sum()","75bcdf5f":"pred_test=xgc.predict(Xt)\npred_test.sum()","1a11320c":"yt=pd.DataFrame(pred_test)\nyt.index=yt.index+1\nyt","e1f34c76":"test=pd.read_csv('..\/input\/equipfails\/equip_failures_test_set.csv',na_values='na')\ndf= pd.DataFrame()\ndf['id'] = test['id']\ndf['target'] = pred_test\ndf.to_csv('submission2.csv', index=False)","fc08409e":"file_name='submision.csv'\nyt.to_csv(file_name,index=True)\n# from IPython.display import FileLink\n# FileLink(file_name)","3a73e4f8":"filename = 'Final_Model.mod'\npickle.dump(xgc, open(filename, 'wb'))","1ca6313b":"Data is normalized here in case they are needed in future. Original data is also kept here.","1e32e136":"<h3>Data Normalization<\/h3>","fc23758e":"<h2>Data Preprocessing<\/h2>","67cab555":"<h4> Model: Logstic Regression <h4>","8c0d569d":"<h3>Handle Missing Data<\/h3>","2c2dde82":"A training set is provided for model building. Readings from 107 sensors are recorded, where these sensors can be categorized as two types: discrete and histogram(time-based). The goal is to categorize whether or not the given equipment pattern shows the equipment failure. Thus, the goal of this dataset is to do a classification task on sensor data.","b93272da":"<h4> Model: XGBoost <h4>","a28df68d":"<h4> Model: Extra Trees Classifier <\/h4>","66b6da69":"<h2>Data Understanding<\/h2>","88545837":"<h1> Detecting Failure : Team Sleep Deprived <\/h1>","179812dd":"Since it is a classification task, several classification models are used and compared below. Among these, some of the models are skipped as shown below:\n1. KNN: Although KNN also does classification, the data has too many features for KNN to work properly. In other words, the dimension is too high and thus it will become sparse in high dimensional space. Thus, KNN is skipped\/\n2. SVM: SVM is skipped due to high training time. Tuning parameters for SVM also takes much time. However, if this works, it will be one of the good choice since it works pretty fast for prediction and can be potentially applied to some embedded systems.\n\nBelow most methods we used are tree-based algorithms since they are pretty good at classifying.","0a0310a3":"Various models are trained and compared below. Due to limited time and computing resources, some models are skipped or not fully tuned.","585003a6":"<h2> Model Training <\/h2>","55f054fd":"The data highly unbalanced, having a ratio of 60:1. So this informs us that for some learning algorithm we use needs to have a very high penalty for the 1s so that it does not get biased to the zeros. ","5b901edc":"<h3>Unbalanced Classes<\/h3>","bd53e6ba":"<h2>Business Understanding<\/h2>","6ef76cae":"<h2> Model Save <\/h2>","b8729064":"<h3> Train and Test Separation  <\/h3>","531d2c0e":"It can be found that some of the columns are of type 'object', which indicates that there are potentially other non-numerical data in it.","8155b21a":"<h2> Import Packages <\/h2>","48932cd9":"Simple regression based models are bad because they are mis-detecting 1s as 0 which is pretty bad considering the dataset is highly unbalanced are there are only a few 1s in the sample. This motivates us to use some forest based techniques.","58f2b756":"members -\nChen Liang,\nSunny Guha,\nPrajakta Bedekar,\nSrinivas Subramanian\n","0b4fb45a":"As shown above some of values are 'na' in the type of string. Thus these values needs to be replaced. Since all values are comparatively large (from the df describe()), as for here, we use one traditionally used method to handle missing data, which is to replace them as a very small value. -999999 is used for replacement.","9491e353":"Equipment fail with oil wells can bring various negative impacts to both the company and environment. Thus, detecting failure event is an essential task. Several sensors are used for gathering various information from the equipment in order to detect equipments faliure. With the help of predictive models, equipment failure can be easier to find in a timely manner.","257f9720":"<h4> Model: AdaBoost Classifier <\/h4>"}}