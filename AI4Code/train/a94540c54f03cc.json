{"cell_type":{"34408671":"code","9bb8d023":"code","ab64a813":"code","df18b799":"code","839bd8dd":"code","eb60402d":"code","de35ab9d":"code","8cd6ef56":"code","87fd2ffc":"code","b7317527":"code","df5cfe98":"code","623f77a0":"code","034ddfab":"code","a0ed7b57":"code","9eb164d9":"code","51b9f346":"markdown","dc7b2797":"markdown","5794212c":"markdown","b632e71d":"markdown","a0d60375":"markdown","a2a8042c":"markdown","9add55af":"markdown","beffb68f":"markdown","ad825ea3":"markdown","6b612e12":"markdown","f0270e9b":"markdown","f7e70bb9":"markdown","e14c8609":"markdown","b9cdc23d":"markdown","22a2a3bf":"markdown"},"source":{"34408671":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nplt.style.use('ggplot')","9bb8d023":"df = pd.read_csv(r\"..\/input\/Pokemon.csv\")","ab64a813":"count = df.groupby('Type 1').size()\ncount.plot.bar(color='black', figsize=(15, 7))\nplt.title('Occurences of Type 1')\nplt.show()","df18b799":"singles = df[['Type 1', 'Type 2']].fillna('None').groupby(['Type 2', 'Type 1']).size()['None']\nsingles.plot.bar(color='black', figsize=(15, 7))\nplt.title('Single typed pokemon Type')\nplt.show()","839bd8dd":"count = df.groupby(['Type 1', 'Type 2']).size().unstack()\nfig, ax = plt.subplots(figsize=(15, 7))\nsns.heatmap(count, xticklabels=count.columns, \n            yticklabels=count.columns,\n           cmap='plasma')\nplt.title('Double type combinations')\nplt.show()","eb60402d":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\ndf.plot.hexbin(x='Attack', y='Defense', gridsize=50, ax=ax1)\nax1.set_title('Attack - Defense')\ndf.plot.hexbin(x='Sp. Atk', y='Sp. Def', gridsize=50, ax=ax2)\nax2.set_title('Special Attack - Special Defense')\nplt.show()","de35ab9d":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\ndf.plot.hexbin(x='Attack', y='Sp. Atk', gridsize=50, ax=ax1)\nax1.set_title('Special Attack - Attack')\ndf.plot.hexbin(x='Defense', y='Sp. Def', gridsize=50, ax=ax2)\nax2.set_title('Special Defense - Defense')\nplt.show()","8cd6ef56":"legend = df[df['Legendary'] == True]\nnormal = df[df['Legendary'] != True]\ng = sns.JointGrid(x=\"Attack\", y=\"Defense\", data=normal, height=7, ratio=5)\nsns.distplot(legend.Attack, ax=g.ax_marg_x)\nsns.distplot(legend.Defense, ax=g.ax_marg_y, vertical=True)\nsns.distplot(normal.Attack, ax=g.ax_marg_x)\nsns.distplot(normal.Defense, ax=g.ax_marg_y, vertical=True)\ng.ax_joint.scatter(legend.Attack, legend.Defense, label='Legendary', alpha=0.8)\ng.ax_joint.scatter(normal.Attack, normal.Defense, label='Normal', alpha=0.4)\ng.ax_joint.legend()\nplt.show()","87fd2ffc":"g = sns.JointGrid(x=\"Sp. Atk\", y=\"Sp. Def\", data=normal, height=7, ratio=5)\nsns.distplot(legend['Sp. Atk'], ax=g.ax_marg_x)\nsns.distplot(legend['Sp. Def'], ax=g.ax_marg_y, vertical=True)\nsns.distplot(normal['Sp. Atk'], ax=g.ax_marg_x)\nsns.distplot(normal['Sp. Def'], ax=g.ax_marg_y, vertical=True)\ng.ax_joint.scatter(legend['Sp. Atk'], legend['Sp. Def'], label='Legendary', alpha=0.8)\ng.ax_joint.scatter(normal['Sp. Atk'], normal['Sp. Def'], label='Normal', alpha=0.4)\ng.ax_joint.legend()\nplt.show()","b7317527":"fig, ax = plt.subplots(figsize=(15, 7))\nlegend['Total'].plot.kde(label='Legendary', alpha=0.7)\nnormal['Total'].plot.kde(label='Normal', alpha=0.7)\nax.legend()\nax.set_title('Total')\nplt.show()","df5cfe98":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nfeatures = ['HP', 'Attack', 'Defense', 'Speed', 'Sp. Atk', 'Sp. Def']\nx = df[features].values\nx = StandardScaler().fit_transform(x)\npca = PCA(n_components=2)\npcs = pca.fit_transform(x)\nmain_df = pd.DataFrame(data = pcs\n             , columns = ['pc1', 'pc2'])\nmain_df = pd.concat([main_df, df[['Legendary']]], axis = 1)\n\nlegend = main_df[main_df['Legendary'] == True]\nnormal = main_df[main_df['Legendary'] != True]\n\ng = sns.JointGrid(x=\"pc1\", y=\"pc2\", data=normal, height=7, ratio=5)\nsns.distplot(legend[\"pc1\"], ax=g.ax_marg_x)\nsns.distplot(legend[\"pc2\"], ax=g.ax_marg_y, vertical=True)\nsns.distplot(normal[\"pc1\"], ax=g.ax_marg_x)\nsns.distplot(normal[\"pc2\"], ax=g.ax_marg_y, vertical=True)\ng.ax_joint.scatter(legend[\"pc1\"], legend[\"pc2\"], label='Legendary', alpha=0.8)\ng.ax_joint.scatter(normal[\"pc1\"], normal[\"pc2\"], label='Normal', alpha=0.4)\ng.ax_joint.legend()\nplt.show()","623f77a0":"pca1 = pca.components_[0]\ndata = main_df[['pc1', 'Legendary']].sort_values(by='pc1', axis=0)\ndata.astype(float).plot.scatter(x='pc1', y='Legendary')\nplt.title('Legendary')\nplt.show()","034ddfab":"from sklearn.linear_model import LogisticRegression\nfrom scipy.special import expit\nfrom numpy import sort\nfrom sklearn.metrics import confusion_matrix\n\nx = data['pc1'].values.reshape(-1, 1)\ny = data['Legendary'].values.astype(float).reshape(800,)\nmodel = LogisticRegression(solver='lbfgs')\nmodel.fit(x, y)\n\nloss = expit(x * model.coef_ + model.intercept_)\nfig, ax = plt.subplots(figsize=(15, 7))\nax.scatter(x, y, color='blue', alpha=0.5, label='Real Values')\nax.plot(x, loss, color='red', alpha=0.5, label='Predicted Values')\nax.legend()\nplt.show()","a0ed7b57":"y_pred = model.predict(x)\nerror = (y - y_pred) ** 2\nprint('  Error: ', error.sum() \/ error.shape[0], '%')","9eb164d9":"confusion = confusion_matrix(y, y_pred)\nsns.heatmap(confusion, annot=True)\nplt.show()","51b9f346":"Perhaps it would be interesting to look at the PCA for all the stats. The first PCA component seems to carry most of the information to seperate both groups. It would be interesting to use it as a feature for a model to predict legendary pokemon. However, we can see that the model may predict poorly for several reasons: \n\n- Half of the legendary pokemon seems to have fairly regular stats (overlapping with blue points on the graph).\n- There is way more normal pokemon than legendary pokemon.\n\nThe model will surely predict nicely if a pokemon is normal, but may have struggle to predict if a pokemon is legendary.","dc7b2797":"As said earlier, the overall model seems to predict nicely the normal pokemon.","5794212c":"## Let's try to predict legendary Pokemon with a simple model!\n\nFirst let's plot legendary and normal pokemon for attack & defense stats. Even though there is a distinction between both categories, it is not really sharp.","b632e71d":"--- \n## Visualization","a0d60375":"Let's visualize the relationship between Attack & Defense, and Special Attack & Special Defense. \n\nIt seems that there is some correlation between these two couples of variable: A high attack may imply a high defense. ","a2a8042c":"Same here for Special Attack - Attack and Special Defense - Defense. Naturally it seems to be correlated as well.","9add55af":"However the accuracy for predicting legendary is really low (<50%). Here on the confusion matrix, a lot of legendary pokemon were not classified as legendary.","beffb68f":"When it comes to single typed pokemon, the trend seems to stay the same.","ad825ea3":"# Pokemon data exploration","6b612e12":"As for double typed pokemon, some of the most represented combos are: Normal-Flight, Bug-Flying, Grass-Poison & Bug-Poison ","f0270e9b":"Total seems to be an important feature to dissociate both groups. ","f7e70bb9":"Let's visualize first the different types.","e14c8609":"The same foes with Sp. Attack & Sp. Defense.","b9cdc23d":"Now let's build a simply logistic regression.","22a2a3bf":"It would be interesting to investigate further parterns for better models: Legendary may have a prefered type, more likely to be double-typed perhaps ? "}}