{"cell_type":{"0333ff52":"code","0d9f2569":"code","abee8fe7":"code","698c89f2":"code","f5672bc3":"code","bdbf1353":"code","f2e65c40":"code","7ac69668":"code","e94cccee":"code","1d1a9c42":"code","9138e6fd":"code","7c85c77a":"code","cdc44e75":"code","d3efa80d":"code","2154eac5":"code","b716427a":"code","5dda2e3c":"code","cae73017":"code","9ac23c96":"code","2ba41765":"code","b3edcac7":"code","ee41533c":"code","ff7c09e0":"code","cc456c48":"code","e890da93":"code","c2f3c389":"code","13c94881":"code","da75864b":"code","7694712c":"code","d0b67ae4":"code","47a8e4a9":"code","062635cc":"code","9f9192a5":"code","7c5c1080":"code","d0038d58":"code","a754227b":"code","e5c6bc41":"code","991f637d":"code","17d3406b":"code","d263cfda":"code","cc729e66":"code","3b558d7d":"code","fbcffc83":"code","2f81291b":"code","8a7faf46":"code","45d0f513":"code","6c09991d":"code","d969fa15":"code","29112572":"code","68d78766":"code","4224b4ca":"code","1fd15df4":"code","a8a956f2":"code","bcc57e18":"code","c22f9bd6":"code","163459fb":"markdown","bd66c4f3":"markdown","b8dff333":"markdown","85b7b1e5":"markdown","a34250ae":"markdown","4715c18e":"markdown","461ad0c3":"markdown","e785c2ac":"markdown","931dd8b1":"markdown","cee08b00":"markdown","6ecec0a5":"markdown","1c80e85e":"markdown","296c5fa2":"markdown","1e00e2d9":"markdown","3b7d8e82":"markdown","9dc4393f":"markdown","9533c555":"markdown","7bc5b8be":"markdown","e82382c0":"markdown","6567de30":"markdown","ef4e5087":"markdown","f3d7c5ac":"markdown","81ee08a1":"markdown","a6aa5cb3":"markdown","91124e23":"markdown","03ec68eb":"markdown","120bf34b":"markdown","0187fdcf":"markdown","c1abb330":"markdown","cc35414b":"markdown","d6073a32":"markdown","54d5c202":"markdown","7bb21f33":"markdown","52feab77":"markdown","9e0b5b6d":"markdown","bd9fbc1f":"markdown"},"source":{"0333ff52":"# if using from the AISE.ai machine image on Google Cloud Platform,\n# upload the kaggle.json file to \/jet\/prs\/workspace, and then from SSH:\n# cd \/home\/jet\n# mkdir .kaggle\n# cd \/jet\/prs\/workspace\n# cp kaggle.json \/home\/jet\/.kaggle\n#  chmod 600 \/home\/jet\/.kaggle\/kaggle.json\nnewdownloads = False\nif newdownloads:\n    # install missing packages\n    !pip install matplotlib\n    !pip install scikit-learn\n    !pip install fuzzywuzzy\n    !pip install python-Levenshtein\n    !pip install tqdm\n    !pip install kaggle\n    !pip install \"dask[complete]\"\n    !pip install graphviz\n    \n    # download the kaggle data\n    import os\n    import zipfile\n    DATA_DIR = '\/jet\/prs\/workspace\/data'\n    os.makedirs(DATA_DIR)\n    os.chdir(DATA_DIR)\n    !kaggle competitions download -c 20-newsgroups-ciphertext-challenge\n    #unzip\n    trainzip = zipfile.ZipFile('train.csv.zip')\n    trainzip.extractall(path=DATA_DIR)\n    testzip = zipfile.ZipFile('test.csv.zip')\n    testzip.extractall(path=DATA_DIR)","0d9f2569":"import os\n\nimport numpy as np\nnp.random.seed(seed=42) # fix seed for reproduceability\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom scipy import stats\n\nfrom sklearn.feature_extraction.text import CountVectorizer\ntoken_pattern = r\"[a-zA-Z0-9!@#$&()<>'=\\-]+\" # CountVectorizer word token\n\nfrom fuzzywuzzy import fuzz, process\nimport Levenshtein as leven\n\nfrom itertools import compress\nfrom tqdm import tqdm\n\n# distributed computing\nfrom dask import delayed, compute\nfrom dask.diagnostics import ProgressBar\nProgressBar().register()","abee8fe7":"# Kaggle test and training data\nonkaggle = True\nif onkaggle:\n    train_datafile = '..\/input\/train.csv'\n    test_datafile = '..\/input\/test.csv'\nelse:\n    train_datafile = '\/jet\/prs\/workspace\/data\/train.csv'\n    test_datafile = '\/jet\/prs\/workspace\/data\/test.csv'","698c89f2":"train_df = pd.read_csv(train_datafile)\ntest_df =  pd.read_csv(test_datafile)\ntest_df['length'] = np.array([len(test_df['ciphertext'].iloc[idx]) for idx in range(len(test_df))],dtype=int)","f5672bc3":"print(\"Train data\")\ntrain_df.tail(5)","bdbf1353":"print(\"Test data\")\ntest_df.tail(5)","f2e65c40":"%%time\nfrom sklearn.datasets import fetch_20newsgroups\ntwenty_databunch = fetch_20newsgroups(subset='all', download_if_missing=True)\n\n# CORRECTION TO MATCH KAGGLE DATA\ndef sourcetransform(textstring):\n    return textstring.replace('\\r\\n','\\n').replace('\\r','\\n').replace('\\n','\\n ').rstrip(' ')\n\nsourcetext = twenty_databunch.data\nfor i,textstring in enumerate(sourcetext):\n    sourcetext[i] = sourcetransform(textstring)\n    \ntwenty_databunch.data = sourcetext\n\ntwenty_datalengths = [len(datastring) for datastring in twenty_databunch.data]\n\ncategory_names = twenty_databunch.target_names\n\n\nchunks_plaintext = []\nchunks_target = []\nchunks_length = []\nfor i in range(len(twenty_databunch.target)):\n    strlength = len(twenty_databunch.data[i])\n    if strlength > 300:\n        for j in range(strlength \/\/ 300):\n            chunks_plaintext.append(twenty_databunch.data[i][300*j:300*(j+1)])\n            chunks_target.append(twenty_databunch.target[i])\n            chunks_length.append(300)\n        if strlength%300 > 0:\n            chunks_plaintext.append(twenty_databunch.data[i][300*(strlength \/\/ 300):(300*(strlength \/\/ 300)+strlength%300)])\n            chunks_target.append(twenty_databunch.target[i])\n            chunks_length.append(strlength%300)\n    else:\n        chunks_plaintext.append(twenty_databunch.data[i])\n        chunks_target.append(twenty_databunch.target[i])\n        chunks_length.append(strlength)\n        \nchunk_df = pd.DataFrame({'plaintext':chunks_plaintext,\n                         'length':np.array(chunks_length,dtype=int), \n                         'target':np.array(chunks_target,dtype=int)})\nchunk_df['testref'] = np.nan\nchunk_df['trainref'] = np.nan\n\n\n# is is very helpful to have a copy of the data in dictionary form for fuzzy wuzzy lookup\nsourcetext_dict = {idx: el for idx, el in enumerate(chunks_plaintext)}\nchunk_df.tail()","7ac69668":"# translating a string of text to an array of 8-bit integers representing ASCII values\ndef string2ascii(textstring):\n    return np.array([ord(char) for char in textstring], dtype=np.int8)\n\n# translating an array of 8-bit integers representing ASCII values to a string\ndef ascii2string(nparray):\n    return ''.join(chr(npint) for npint in nparray)\n\n# calculate ascii character frequency per million characters\ndef char_per_million(stringsarray):\n    asciicount = np.zeros((128,), dtype=int)\n    for k,textdata in enumerate(stringsarray):\n        asciicount += np.histogram(string2ascii(textdata),np.arange(129))[0]\n    totalchars = np.sum(asciicount)\n    return np.multiply(asciicount,np.divide(1000000.0,totalchars))\n\n# substitution decipher using the input asciimap dataframe (index= ciphered ascii integer)\ndef decipher_subst(textstring,asciimap):\n    inarray = string2ascii(textstring)\n    outarray = np.zeros(len(inarray),dtype=np.int8)\n    for asciival in asciimap.index:\n        outarray[inarray==asciival] = asciimap['decipher'].loc[asciival]\n    return ascii2string(outarray)\n\n# For fine-tuning a cipher, this identifies letter character replacements needed\n# The output is a 128x128 matrix with rows and columns corresponding to ascii characters \n# The element in element [a,b] is the number of times the ascii character in texta had to \n# be switched for the ascii character in textb\ndef leven_replace_matrix(textA,textB):\n    # initialize output matrix\n    asciiswitchmat = np.zeros([128,128],dtype=int)\n    # calculate edits for Levenshtein distance\n    lops = leven.editops(textA,textB)\n    # count the character replacements needed\n    replacetf = [editop[0] is 'replace' for editop in lops]\n    replacerefA =  np.array([editop[1] for editop in lops],dtype=np.int8)\n    replacerefB =  np.array([editop[2] for editop in lops],dtype=np.int8)\n    goodidx = np.logical_and(replacetf,np.logical_and(replacerefA<128,replacerefB<128))\n    replacerefA = replacerefA[replacetf]\n    replacerefB = replacerefB[replacetf]\n    for i, refA in enumerate(replacerefA):\n        asciiswitchmat[ord(textA[refA]),ord(textB[replacerefB[i]])] += 1\n    return asciiswitchmat","e94cccee":"def char_count(textstring):\n    return np.histogram(string2ascii(textstring),np.arange(129))[0]\n    \n# calculate ascii character frequency per million characters\ndef char_per_300(stringsarray):\n    asciicount = np.zeros((128,), dtype=int)\n    for k,textdata in enumerate(stringsarray):\n        asciicount += char_count(textdata)\n    totalchars = np.sum(asciicount)\n    return np.multiply(asciicount,np.divide(300.0,totalchars))\n\n# number of words\ndef num_recognized_words(stringsarray,worddictionary):\n    vectorizer = CountVectorizer(analyzer='word',vocabulary=worddictionary2)\n    X = vectorizer.fit_transform(stringsarray)\n    return np.sum(X)\n\n# calculate words per million characters using a given dictionary list of ngrams\n# the worddictionary is generated on a previous run of CountVectorizer using English text\ndef word_per_million(stringsarray,worddictionary):\n    totalchars = sum([len(cipherstring) for cipherstring in stringsarray])\n    vectorizer = CountVectorizer(analyzer='word',token_pattern=token_pattern,vocabulary=worddictionary)\n    #vectorizer = CountVectorizer(vocabulary=worddictionary)\n    X = vectorizer.fit_transform(stringsarray)\n    return np.squeeze(np.asarray(np.sum(X,axis=0)*(1000000.0\/totalchars)))\n\n# calculate ngrams per million characters using a given dictionary list of ngrams\n# the ngramdictionary is generated on a previous run of CountVectorizer using English text\ndef ngram_per_million(stringsarray,ngramdictionary):\n    ngramlength = len(next(iter(ngramdictionary)))\n    totalchars = sum([len(cipherstring) for cipherstring in stringsarray])\n    vectorizer = CountVectorizer(analyzer='char', \n                             max_features=1000,\n                             lowercase = False,\n                             ngram_range = (n_ngram,n_ngram),\n                             vocabulary=ngramdictionary)\n    X = vectorizer.fit_transform(stringsarray)\n    return np.squeeze(np.asarray(np.sum(X,axis=0)*(1000000.0\/totalchars)))\n\ndef similarity_score(x, y):\n    return 1.0 - np.divide(np.linalg.norm(x - y),np.linalg.norm(y))\n\n# goodnes of fit\ndef goodness_of_fit(cipher_array,asciimap,verbose=True):\n    decipher_array = [decipher_subst(ciphertext,asciimap) \n     for ciphertext in cipher_array]\n    w_score = num_recognized_words(decipher_array, worddictionary)\n    wpm_candidate = word_per_million( decipher_array, worddictionary)\n    npm_candidate = ngram_per_million( decipher_array, ngramdictionary)\n    wpm_score = similarity_score(wpm_candidate, wpm_plaintext)\n    npm_score = similarity_score(npm_candidate, npm_plaintext)\n    if verbose:\n        print('   Goodness-of-Fit vs Source Text   ')\n        print('====================================')\n        print(\"Number of Recognized Words = \" + str(w_score))\n        print(\"Word-per-Million Similarity = \" + str(wpm_score))\n        print(\"Ngram-per-Million Similarity = \" + str(npm_score))\n    return w_score,wpm_score, npm_score","1d1a9c42":"# Display an example data item along with its associated category and filename\ndataitem = 0\nprint(twenty_databunch.data[dataitem])","9138e6fd":"fig, ax = plt.subplots(figsize=(9, 12))\nax.barh(np.arange(len(category_names)),\n        [sum(twenty_databunch.target==k) for k in range(len(category_names))],\n        tick_label = category_names)\nax.tick_params(axis='both',labelsize=14)\nplt.title('# of Newsgroup Postings',fontsize=16)\nplt.show()","7c85c77a":"print(str((100*sum(chunk_df['length']==300))\/\/len(chunk_df))+'% of the data items have a size = 300')","cdc44e75":"print(str(sum(chunk_df['length']<5))+' of the data items have a size < 5 characters!')","d3efa80d":"%%time\ncpm_plaintext = char_per_million(chunks_plaintext)\nasciitop = np.argsort(-1*cpm_plaintext)\nasciitop_df = pd.DataFrame({'char':[chr(asciinum) for asciinum in asciitop],'char_per_million':cpm_plaintext[asciitop]},index=asciitop)","2154eac5":"# create a bar chart to highlight the top 40 most common characters\nfig, ax = plt.subplots(figsize=(15, 5))\nax.plot(np.arange(30),asciitop_df['char_per_million'].iloc[0:30],color='red', marker='*', markersize=10)\nax.set_xticklabels([\"'\"+chr(asciinum)+\"'\" for asciinum in asciitop_df.index[0:30]])\nax.set_xticks(np.arange(30))\nax.tick_params(axis='both',labelsize=16)\nplt.ylabel('Occurrence per Million Characters',fontsize=16)\nplt.title('Top 30 ASCII Characters: Plaintext Source',fontsize=18)\nplt.show()\nprint(\"Of the 128 possible ASCII values, only \"+ str(sum(cpm_plaintext>1)) +\" are used more than once per million\")","b716427a":"# the 5000 most common traditional words\ntotalchars = sum([len(cipherstring) for cipherstring in twenty_databunch.data])\nvectorizer = CountVectorizer(analyzer='word', max_features=5000)\nsource_words = vectorizer.fit_transform(twenty_databunch.data)\nworddictionary2 = vectorizer.vocabulary_\n\n# the 5000 most common words, including one-letter words and symbols\ntotalchars = sum([len(cipherstring) for cipherstring in twenty_databunch.data])\nvectorizer = CountVectorizer(analyzer='word', max_features=5000, token_pattern=token_pattern)\nsource_words = vectorizer.fit_transform(twenty_databunch.data)\nworddictionary = vectorizer.vocabulary_\n# the word-per-million score from plaintext English that we try to match in deciphering\nwpm_plaintext = word_per_million(twenty_databunch.data,worddictionary)\n\n# the 1000 most common English ngrams\nn_ngram = 3\ntotalchars = sum([len(cipherstring) for cipherstring in twenty_databunch.data])\nvectorizer = CountVectorizer(analyzer='char', \n                             max_features=1000,\n                             lowercase = False,\n                             ngram_range = (n_ngram,n_ngram) )\nsource_words = vectorizer.fit_transform(twenty_databunch.data)\nngramdictionary = vectorizer.vocabulary_\n# the word-per-million score from plaintext English that we try to match in deciphering\nnpm_plaintext = ngram_per_million(twenty_databunch.data,ngramdictionary)","5dda2e3c":"# this dictionary dataframe will show the common words\nworddict_df = pd.DataFrame.from_dict(worddictionary, orient='index')\nworddict_df.reset_index(inplace=True)\nworddict_df.rename(index=str, columns={\"index\": \"word\", 0: \"dict_index\"},inplace=True)\nworddict_df.set_index('dict_index',inplace=True)\nworddict_df.sort_index(inplace=True)\nworddict_df['words_per_million'] = wpm_plaintext\nworddict_df.sort_values('words_per_million',ascending=False,inplace=True)\nprint(\"Top 10 Most Common Words\/Symbols\")\nprint(worddict_df.head(10))","cae73017":"# we combine test and training data for greatest precision\ncpm_train = char_per_million(train_df[train_df['difficulty']==1]['ciphertext'])\ncpm_test =  char_per_million(test_df[test_df['difficulty']==1]['ciphertext'])\ncpm_cipher = 0.67*cpm_test + 0.33*cpm_train\n\nc1asciitop = np.argsort(-1*cpm_cipher)\nc1asciitop_df = pd.DataFrame({'char':[chr(asciinum) for asciinum in c1asciitop],\n                            'char_per_million':cpm_cipher[c1asciitop]},index=c1asciitop)","9ac23c96":"# create a bar chart to highlight the top 40 most common characters\nfig, ax = plt.subplots(figsize=(15, 5))\nax.bar(np.arange(30),\n       c1asciitop_df['char_per_million'].iloc[0:30],\n       tick_label = [\"'\"+chr(asciinum)+\"'\" for asciinum in c1asciitop_df.index[0:30]] )\nax.plot(np.arange(30),asciitop_df['char_per_million'].iloc[0:30],color='red', marker='*', markersize=10)\nax.tick_params(axis='both',labelsize=16)\nplt.ylabel('Occurrence per Million Characters',fontsize=16)\nplt.title('Top 30 ASCII Characters: Ciphertext Difficulty=1',fontsize=18)\nplt.legend(['Distribution for Top Characters in Source Data','Distribution for Difficulty=1'],fontsize=16)\nplt.show()\nprint(\"Of the 128 possible ASCII values, only \"+ str(sum(cpm_cipher>1)) +\" are used more than once per million\")","2ba41765":"asciimap = pd.DataFrame(asciitop, index=c1asciitop,columns=['decipher'])","b3edcac7":"textstring = train_df[train_df['difficulty']==1]['ciphertext'].iloc[0]\nprint('SAMPLE DECIPHER ATTEMPT:')\nprint(decipher_subst(textstring,asciimap))","ee41533c":"%%time\n# Go through the plain text from the category and find the matching entry\ntextstring = decipher_subst(train_df[train_df['difficulty']==1]['ciphertext'].iloc[0],asciimap)\ntextcategory = train_df[train_df['difficulty']==1]['target'].iloc[0]\nsourcematch = process.extractOne(textstring, sourcetext_dict, scorer = fuzz.ratio)","ff7c09e0":"print('Found a match in source data with \"fuzz.ratio\" score of ' + str(fuzz.ratio(textstring,sourcematch[0])))\nprint('Source data found in category = ' + category_names[chunk_df['target'].iloc[sourcematch[2]]])\nprint('Matching text below:')\nprint('----------------')\nprint(sourcematch[0])\nprint(' ')","cc456c48":"# subsample of ciphertext\nsubset_size = 2000\ntune_df = train_df[np.logical_and(train_df['difficulty']==1,\n                                    np.array([len(train_df['ciphertext'].iloc[idx]) for idx in range(len(train_df))])>100)]\ntuneindices = tune_df.index[:subset_size]\n        \n# function to match to source data for same category and length >100 chars\ndef finetunematch(idx):\n    textstring = decipher_subst(tune_df['ciphertext'].loc[idx],asciimap)\n    selectindices = np.logical_and(chunk_df['target']==tune_df['target'].loc[idx],chunk_df['length']>250)\n    sourcematch = process.extractOne(textstring, \n                                     list(compress(chunks_plaintext, selectindices)), \n                                     scorer = fuzz.ratio)\n    return sourcematch[0], textstring, sourcematch[1]\n\n# parallel evaluation using Dask (big benefits for more CPUs)\npar_compute = [delayed(finetunematch)(idx) for idx in tuneindices]\noutput_arrays = compute(*par_compute, scheduler='processes')","e890da93":"# select those with relatively high fuzzy.ratio scores\nminfuzzyscore = 80\nsourcematch_array = [arrays[0] for arrays in output_arrays]\ndecipher_array = [arrays[1] for arrays in output_arrays]\nfuzzyscores_array = np.array([arrays[2] for arrays in output_arrays])\nsourcematch_array = list(compress(sourcematch_array, (fuzzyscores_array>=minfuzzyscore) ))\ndecipher_array = list(compress(decipher_array, (fuzzyscores_array>=minfuzzyscore) ))\ncipher_array =  tune_df[:subset_size]['ciphertext']\ncipher_array = list(compress(cipher_array, (fuzzyscores_array>=minfuzzyscore) ))","c2f3c389":"print('In subsample, ' + str(np.sum(fuzzyscores_array>=minfuzzyscore)) + ' of the ' + str(subset_size) + ' have fuzzy.ratios > ' \n       + str(minfuzzyscore) + ' and will be used for fine-tuning')\nprint(' ')\nprint('Before fine-tuning the sub-sample:')\ngof = goodness_of_fit(cipher_array,asciimap=asciimap)\nprint('Average fuzzy.ratio = ' + str(np.mean(fuzzyscores_array[fuzzyscores_array>=minfuzzyscore])))","13c94881":"# initialize asciiswitchmat, a 128x128 matrix with rows numbers corresponding to ascii characters\n# that should be replaced by the ascii character of the column number\nasciiswitchmat = np.zeros([128,128],dtype=int)\nasciicount = np.zeros((128,), dtype=int)\n\nfor i, textstring in enumerate(decipher_array):\n    asciiswitchmat += leven_replace_matrix(textstring,sourcematch_array[i])\n    asciicount += np.histogram(string2ascii(textstring),np.arange(129))[0]\n\ndeciphererror_dict = {'ascii_replacement': [np.argmax(asciiswitchmat[i,...]) for i in range(128)],\n                      'char_decipher': [chr(i) for i in range(128)],\n                      'char_replacement': [chr(np.argmax(asciiswitchmat[i,...])) for i in range(128)],\n                      'numError': np.sum(asciiswitchmat,axis=1),\n                      'numReplace': [asciiswitchmat[i,np.argmax(asciiswitchmat[i,...])] for i in range(128)],\n                      'totalObs': asciicount}\n\ndeciphererror_df = pd.DataFrame.from_dict(deciphererror_dict)\ndeciphererror_df['pctError'] = deciphererror_df['numError'] \/ deciphererror_df['totalObs']\ndeciphererror_df['pctBestReplace'] = deciphererror_df['numReplace'] \/ deciphererror_df['numError']  \ndeciphererror_df.sort_values(by=['pctError'],ascending=False,inplace=True)\ndeciphererror_df.head(10)","da75864b":"# correct the identified errors in character substitution\nerrorprone = np.logical_and(deciphererror_df['totalObs']>=1,\n                            np.logical_and(deciphererror_df['pctError']>=0.01*(100-minfuzzyscore),\n                                           deciphererror_df['pctBestReplace']>=0.5)),\ndecipherchars = deciphererror_df.index[errorprone]\nimprovementchars = deciphererror_df['ascii_replacement'].loc[errorprone].values\ntmpasciimap = asciimap.copy()\nfor i,decipherchar in enumerate(decipherchars):\n    asciimap['decipher'].loc[tmpasciimap['decipher'].values==decipherchar] = improvementchars[i]","7694712c":"# Repeating the previous code\n# subsample of ciphertext\nsubset2_size = 2000\ntuneindices = tune_df.index[subset_size:(subset2_size+subset_size)]\n\n# parallel evaluation using Dask (big benefits for more CPUs)\npar_compute2 = [delayed(finetunematch)(idx) for idx in tuneindices]\noutput_arrays = compute(*par_compute2, scheduler='processes')\nsourcematch_array = [arrays[0] for arrays in output_arrays]\ndecipher_array = [arrays[1] for arrays in output_arrays]\nfuzzyscores_array = np.array([arrays[2] for arrays in output_arrays])\nsourcematch_array = list(compress(sourcematch_array, (fuzzyscores_array>=minfuzzyscore) ))\ndecipher_array = list(compress(decipher_array, (fuzzyscores_array>=minfuzzyscore) ))\ncipher_array =  tune_df[subset_size:(subset_size+subset2_size)]['ciphertext']\ncipher_array = list(compress(cipher_array, (fuzzyscores_array>=minfuzzyscore) ))\n\nprint('In 2nd subsample, ' + str(np.sum(fuzzyscores_array>=minfuzzyscore)) + ' of the ' + str(subset2_size) + ' have fuzzy.ratios > ' \n       + str(minfuzzyscore) + ' and will be used for fine-tuning')\n\n# initialize asciiswitchmat, a 128x128 matrix with rows numbers corresponding to ascii characters\n# that should be replaced by the ascii character of the column number\nasciiswitchmat = np.zeros([128,128],dtype=int)\nasciicount = np.zeros((128,), dtype=int)\n\nfor i, textstring in enumerate(decipher_array):\n    asciiswitchmat += leven_replace_matrix(textstring,sourcematch_array[i])\n    asciicount += np.histogram(string2ascii(textstring),np.arange(129))[0]\n\ndeciphererror_dict = {'ascii_replacement': [np.argmax(asciiswitchmat[i,...]) for i in range(128)],\n                      'char_decipher': [chr(i) for i in range(128)],\n                      'char_replacement': [chr(np.argmax(asciiswitchmat[i,...])) for i in range(128)],\n                      'numError': np.sum(asciiswitchmat,axis=1),\n                      'numReplace': [asciiswitchmat[i,np.argmax(asciiswitchmat[i,...])] for i in range(128)],\n                      'totalObs': asciicount}\n\ndeciphererror_df = pd.DataFrame.from_dict(deciphererror_dict)\ndeciphererror_df['pctError'] = deciphererror_df['numError'] \/ deciphererror_df['totalObs']\ndeciphererror_df['pctBestReplace'] = deciphererror_df['numReplace'] \/ deciphererror_df['numError']\n\n# correct the identified errors in character substitution\nerrorprone = np.logical_and(deciphererror_df['totalObs']>=1,\n                            np.logical_and(deciphererror_df['pctError']>=0.1,\n                                           deciphererror_df['pctBestReplace']>=0.8)),\ndecipherchars = deciphererror_df.index[errorprone]\nimprovementchars = deciphererror_df['ascii_replacement'].loc[errorprone].values\ntmpasciimap = asciimap.copy()\nfor i,decipherchar in enumerate(decipherchars):\n    asciimap['decipher'].loc[tmpasciimap['decipher'].values==decipherchar] = improvementchars[i]","d0b67ae4":"print('After fine-tuning the sub-sample:')\ngof = goodness_of_fit(cipher_array,asciimap=asciimap)","47a8e4a9":"textstring = train_df[train_df['difficulty']==1]['ciphertext'].iloc[0]\nprint('FINAL DECIPHER:')\nprint(decipher_subst(textstring,asciimap))","062635cc":"%%time\ntest_df['plaintext'] = ['']*len(test_df)\n# fill in plaintext for test data\nc1indices = test_df[test_df['difficulty']==1].index\ntest_df.loc[c1indices,'plaintext'] = [decipher_subst(test_df['ciphertext'].loc[idx],asciimap) for idx in c1indices]","9f9192a5":"%%time\ncpm_plaintext = char_per_million(chunks_plaintext)\nasciitop = np.argsort(-1*cpm_plaintext)\nasciitop_df = pd.DataFrame({'char':[chr(asciinum) for asciinum in asciitop],'char_per_million':cpm_plaintext[asciitop]},index=asciitop)\n\n# we combine test and training data for greatest precision\ncpm_train = char_per_million(train_df[train_df['difficulty']==2]['ciphertext'])\ncpm_test =  char_per_million(test_df[test_df['difficulty']==2]['ciphertext'])\ncpm_cipher = 0.67*cpm_test + 0.33*cpm_train\n\nc2asciitop = np.argsort(-1*cpm_cipher)\nc2asciitop_df = pd.DataFrame({'char':[chr(asciinum) for asciinum in c1asciitop],\n                            'char_per_million':cpm_cipher[c2asciitop]},index=c2asciitop)\n\n# create a bar chart to highlight the top 40 most common characters\nfig, ax = plt.subplots(figsize=(15, 5))\nax.bar(np.arange(30),\n       c2asciitop_df['char_per_million'].iloc[0:30],\n       tick_label = [\"'\"+chr(asciinum)+\"'\" for asciinum in c2asciitop_df.index[0:30]] )\nax.plot(np.arange(30),asciitop_df['char_per_million'].iloc[0:30],color='red', marker='*', markersize=10)\nax.tick_params(axis='both',labelsize=16)\nplt.ylabel('Occurrence per Million Characters',fontsize=16)\nplt.title('Top 30 ASCII Characters: Ciphertext Difficulty=2',fontsize=18)\nplt.show()\nprint(\"Of the 128 possible ASCII values, only \"+ str(sum(cpm_cipher>1)) +\" are used more than once per million\")","7c5c1080":"%%time\nasciimap2 = pd.DataFrame(asciitop, index=c2asciitop,columns=['decipher'])\n# Go through the plain text from the category and find the matching entry\ntextstring = decipher_subst(train_df[train_df['difficulty']==2]['ciphertext'].iloc[0],asciimap2)\ntextcategory = train_df[train_df['difficulty']==2]['target'].iloc[0]\nsourcematch = process.extractOne(textstring, sourcetext_dict, scorer = fuzz.ratio)\n\nprint('Found a match in source data with \"fuzz.ratio\" score of ' + str(fuzz.ratio(textstring,sourcematch[0])))\nprint('Source data found in category = ' + category_names[chunk_df['target'].iloc[sourcematch[2]]])\nprint('Original deciphering using character frequency:')\nprint('----------------')\nprint(textstring)\nprint(' ')\nprint('Matching text below:')\nprint('----------------')\nprint(sourcematch[0])\nprint(' ')","d0038d58":"# subsample of ciphertext\nsubset_size = 2000\ntune_df = train_df[np.logical_and(train_df['difficulty']==2,\n                                    np.array([len(train_df['ciphertext'].iloc[idx]) for idx in range(len(train_df))])>100)]\ntuneindices = tune_df.index[:subset_size]\n        \n# function to match to source data for same category and length greater than 100 characters\ndef finetunematch2(idx):\n    textstring = decipher_subst(tune_df['ciphertext'].loc[idx],asciimap2)\n    selectindices = np.logical_and(chunk_df['target']==tune_df['target'].loc[idx],chunk_df['length']==len(textstring))\n    sourcematch = process.extractOne(textstring, \n                                     list(compress(chunks_plaintext, selectindices)), \n                                     scorer = fuzz.ratio)\n    return sourcematch[0], textstring, sourcematch[1]\n\n# parallel evaluation using Dask (big benefits for more CPUs)\npar_compute = [delayed(finetunematch2)(idx) for idx in tuneindices]\noutput_arrays = compute(*par_compute, scheduler='processes')","a754227b":"# select those with relatively high fuzzy.ratio scores\nminfuzzyscore = 80\nsourcematch_array = [arrays[0] for arrays in output_arrays]\ndecipher_array = [arrays[1] for arrays in output_arrays]\nfuzzyscores_array = np.array([arrays[2] for arrays in output_arrays])\nsourcematch_array = list(compress(sourcematch_array, (fuzzyscores_array>=minfuzzyscore) ))\ndecipher_array = list(compress(decipher_array, (fuzzyscores_array>=minfuzzyscore) ))\ncipher_array =  tune_df[:subset_size]['ciphertext']\ncipher_array = list(compress(cipher_array, (fuzzyscores_array>=minfuzzyscore) ))\nprint('In subsample, ' + str(np.sum(fuzzyscores_array>=minfuzzyscore)) + ' of the ' + str(subset_size) + ' have fuzzy.ratios > ' \n       + str(minfuzzyscore) + ' and will be used for fine-tuning')\nprint(' ')\nprint('Before fine-tuning the sub-sample:')\ngof = goodness_of_fit(cipher_array,asciimap=asciimap2)\nprint('Average fuzzy.ratio = ' + str(np.mean(fuzzyscores_array[fuzzyscores_array>=minfuzzyscore])))","e5c6bc41":"# initialize asciiswitchmat, a 128x128 matrix with rows numbers corresponding to ascii characters\n# that should be replaced by the ascii character of the column number\nasciiswitchmat = np.zeros([128,128],dtype=int)\nasciicount = np.zeros((128,), dtype=int)\n\nfor i, textstring in enumerate(decipher_array):\n    asciiswitchmat += leven_replace_matrix(textstring,sourcematch_array[i])\n    asciicount += np.histogram(string2ascii(textstring),np.arange(129))[0]\n\ndeciphererror_dict2 = {'ascii_replacement': [np.argmax(asciiswitchmat[i,...]) for i in range(128)],\n                      'char_decipher': [chr(i) for i in range(128)],\n                      'char_replacement': [chr(np.argmax(asciiswitchmat[i,...])) for i in range(128)],\n                      'numError': np.sum(asciiswitchmat,axis=1),\n                      'numReplace': [asciiswitchmat[i,np.argmax(asciiswitchmat[i,...])] for i in range(128)],\n                      'totalObs': asciicount}\n\ndeciphererror_df2 = pd.DataFrame.from_dict(deciphererror_dict2)\ndeciphererror_df2['pctError'] = deciphererror_df2['numError'] \/ deciphererror_df2['totalObs']\ndeciphererror_df2['pctBestReplace'] = deciphererror_df2['numReplace'] \/ deciphererror_df2['numError']  \ndeciphererror_df2.sort_values(by=['numError'],ascending=False,inplace=True)","991f637d":"# correct the identified errors in character substitution\nerrorprone = np.logical_and(deciphererror_df2['totalObs']>=1,\n                            np.logical_and(deciphererror_df2['pctError']>=0.1,\n                                           deciphererror_df2['pctBestReplace']>=0.5)),\ndecipherchars = deciphererror_df2.index[errorprone]\nimprovementchars = deciphererror_df2['ascii_replacement'].loc[errorprone].values\ntmpasciimap = asciimap2.copy()\nfor i,decipherchar in enumerate(decipherchars):\n    asciimap2['decipher'].loc[tmpasciimap['decipher'].values==decipherchar] = improvementchars[i]","17d3406b":"subset2_size = 2000\ntuneindices = tune_df.index[subset_size:(subset2_size+subset_size)]\n\n# parallel evaluation using Dask (big benefits for more CPUs)\npar_compute2 = [delayed(finetunematch2)(idx) for idx in tuneindices]\noutput_arrays = compute(*par_compute2, scheduler='processes')\n\n\n# select those with relatively high fuzzy.ratio scores\nminfuzzyscore = 80\nsourcematch_array = [arrays[0] for arrays in output_arrays]\ndecipher_array = [arrays[1] for arrays in output_arrays]\nfuzzyscores_array = np.array([arrays[2] for arrays in output_arrays])\nsourcematch_array = list(compress(sourcematch_array, (fuzzyscores_array>=minfuzzyscore) ))\ndecipher_array = list(compress(decipher_array, (fuzzyscores_array>=minfuzzyscore) ))\ncipher_array =  tune_df[subset_size:(subset_size+subset2_size)]['ciphertext']\ncipher_array = list(compress(cipher_array, (fuzzyscores_array>=minfuzzyscore) ))\n\n\nprint('In 2nd subsample, ' + str(np.sum(fuzzyscores_array>=minfuzzyscore)) + ' of the ' + str(subset2_size) + ' have fuzzy.ratios > ' \n       + str(minfuzzyscore) + ' and will be used for fine-tuning')\n\n# initialize asciiswitchmat, a 128x128 matrix with rows numbers corresponding to ascii characters\n# that should be replaced by the ascii character of the column number\nasciiswitchmat = np.zeros([128,128],dtype=int)\nasciicount = np.zeros((128,), dtype=int)\n\nfor i, textstring in enumerate(decipher_array):\n    asciiswitchmat += leven_replace_matrix(textstring,sourcematch_array[i])\n    asciicount += np.histogram(string2ascii(textstring),np.arange(129))[0]\n\ndeciphererror_dict = {'ascii_replacement': [np.argmax(asciiswitchmat[i,...]) for i in range(128)],\n                      'char_decipher': [chr(i) for i in range(128)],\n                      'char_replacement': [chr(np.argmax(asciiswitchmat[i,...])) for i in range(128)],\n                      'numError': np.sum(asciiswitchmat,axis=1),\n                      'numReplace': [asciiswitchmat[i,np.argmax(asciiswitchmat[i,...])] for i in range(128)],\n                      'totalObs': asciicount}\n\ndeciphererror_df = pd.DataFrame.from_dict(deciphererror_dict)\ndeciphererror_df['pctError'] = deciphererror_df['numError'] \/ deciphererror_df['totalObs']\ndeciphererror_df['pctBestReplace'] = deciphererror_df['numReplace'] \/ deciphererror_df['numError']\n\n# correct the identified errors in character substitution\nerrorprone = np.logical_and(deciphererror_df['totalObs']>=2,\n                            np.logical_and(deciphererror_df['pctError']>=0.2,\n                                           deciphererror_df['pctBestReplace']>=0.66)),\ndecipherchars = deciphererror_df.index[errorprone]\nimprovementchars = deciphererror_df['ascii_replacement'].loc[errorprone].values\ntmpasciimap = asciimap2.copy()\nfor i,decipherchar in enumerate(decipherchars):\n    asciimap2['decipher'].loc[tmpasciimap['decipher'].values==decipherchar] = improvementchars[i]","d263cfda":"print('After fine-tuning the sub-sample:')\ngof = goodness_of_fit(cipher_array,asciimap=asciimap2)","cc729e66":"textstring = train_df[train_df['difficulty']==2]['ciphertext'].iloc[0]\nprint('FINAL DECIPHER:')\nprint(decipher_subst(textstring,asciimap2))","3b558d7d":"%%time\nc2indices = test_df[test_df['difficulty']==2].index\ntest_df.loc[c2indices,'plaintext'] = [decipher_subst(test_df['ciphertext'].loc[idx],asciimap2) for idx in c2indices]","fbcffc83":"# we combine test and training data for greatest precision\ncpm_train = char_per_million(train_df[train_df['difficulty']==3]['ciphertext'])\ncpm_test =  char_per_million(test_df[test_df['difficulty']==3]['ciphertext'])\ncpm_cipher = 0.67*cpm_test + 0.33*cpm_train\n\nc3asciitop = np.argsort(-1*cpm_cipher)\nc3asciitop_df = pd.DataFrame({'char':[chr(asciinum) for asciinum in c3asciitop],\n                            'char_per_million':cpm_cipher[c3asciitop]},index=c3asciitop)\n\n# create a bar chart to highlight the top 40 most common characters\nfig, ax = plt.subplots(figsize=(15, 5))\nax.bar(np.arange(30),\n       c3asciitop_df['char_per_million'].iloc[0:30],\n       tick_label = [\"'\"+chr(asciinum)+\"'\" for asciinum in c3asciitop_df.index[0:30]] )\nax.plot(np.arange(30),asciitop_df['char_per_million'].iloc[0:30],color='red', marker='*', markersize=10)\nax.tick_params(axis='both',labelsize=16)\nplt.ylabel('Occurrence per Million Characters',fontsize=16)\nplt.title('Top 30 ASCII Characters: Ciphertext Difficulty=3',fontsize=18)\nplt.legend(['Distribution for Top Characters in Source Data','Distribution for Difficulty=3'],fontsize=16)\nplt.show()","2f81291b":"# Go through the plain text from the category and find the matching entry\ntextstring = decipher_subst(train_df[train_df['difficulty']==3]['ciphertext'].iloc[0],asciimap2)\ntextcategory = train_df[train_df['difficulty']==3]['target'].iloc[0]\nsourcematch = process.extractOne(textstring, sourcetext_dict, scorer = fuzz.ratio)\n\nprint('Found a match in source data with \"fuzz.ratio\" score of ' + str(fuzz.ratio(textstring,sourcematch[0])))\nprint('Source data found in category = ' + category_names[chunk_df['target'].iloc[sourcematch[2]]])\nprint('Original deciphering of difficulty #3 ciphertext of using mapping from cipher #2:')\nprint('----------------')\nprint(textstring)\nprint(' ')\nprint('Matching text below:')\nprint('----------------')\nprint(sourcematch[0])\nprint(' ')","8a7faf46":"# subsample of ciphertext\nsubset_size = 400\n\nreversemap2 = asciimap2.copy()\nreversemap2.drop_duplicates('decipher',inplace=True)\nreversemap2.reset_index(inplace=True)\nreversemap2.rename(index=str,columns={\"decipher\":\"index\",\"index\":\"decipher\"},inplace=True)\nreversemap2.set_index('index',inplace=True)\nreversemap2.head()\n\ntransform_ct = np.zeros((128,), dtype=int)\ntransform_out = np.zeros((128,), dtype=int)\nstable_ct = np.zeros((128,), dtype=int)\nfor idx in tqdm(range(subset_size)):\n    textstring = decipher_subst(train_df[train_df['difficulty']==3]['ciphertext'].iloc[idx],asciimap2)\n    textcategory = train_df[train_df['difficulty']==3]['target'].iloc[idx]\n    sourcematch = process.extractOne(textstring, \n                                     list(compress(chunks_plaintext,chunks_target==textcategory)), \n                                     scorer = fuzz.ratio)\n    s1 = string2ascii(decipher_subst(sourcematch[0],reversemap2))\n    s2 = string2ascii(train_df[train_df['difficulty']==3]['ciphertext'].iloc[idx])\n    if len(s1)==len(s2):\n        transform_ct += np.histogram(np.array(s1[(s1-s2)>0],dtype=int),np.arange(129))[0]\n        transform_out += np.histogram(np.array(s2[(s1-s2)>0],dtype=int),np.arange(129))[0]\n        stable_ct += np.histogram(np.array(s1[(s1-s2)==0],dtype=int),np.arange(129))[0]\n\ntransform_pct = np.divide(transform_ct, (transform_ct + stable_ct+1) )\n\nenoughobs = np.arange(128)[np.logical_and((transform_ct+stable_ct)>5,np.arange(128)>40)]\nfig, ax = plt.subplots(figsize=(20, 4))\nax.bar(np.arange(len(enoughobs)),\n        transform_pct[enoughobs],\n              tick_label = [\"'\"+chr(asciinum)+\"'\" for asciinum in enoughobs] )\nplt.title('Characters Transformed by Cipher Number 3',fontsize=16)\nplt.show()","45d0f513":"c3mod = set()\nmodascii = np.union1d(np.arange(65,91),np.arange(97,123))\nfor i in modascii:\n    c3mod.add(i)","6c09991d":"%%time\ntrain_lengths = np.array([len(cipherstring) for cipherstring in train_df['ciphertext']])\nc3indices = train_df.index[np.logical_and(train_df['difficulty']==3,train_lengths>290)]\n\nnumsamples = 50\nc3modmat = np.nan*np.zeros((numsamples,300))\ns2startmat = np.nan*np.zeros((numsamples,300)) \nfor i,idx in enumerate(c3indices[0:numsamples]):\n    textstring = decipher_subst(train_df['ciphertext'].loc[idx],asciimap2)\n    textcategory = train_df['target'].loc[idx]\n    selectindices = np.logical_and(chunk_df['target']==textcategory,chunk_df['length']>290)\n    sourcematch = process.extractOne(textstring,\n                                     list(compress(chunks_plaintext, selectindices)),\n                                     scorer = fuzz.ratio)\n    # Look at the differences for the modified characters\n    s1 = string2ascii(decipher_subst(sourcematch[0],reversemap2))\n    s2 = string2ascii(train_df['ciphertext'].loc[idx])\n    s2mods = [(snum in c3mod) for snum in s2]\n    ds = (s1[s2mods]-s2[s2mods])\n    # append to matrix\n    c3modmat[i,0:len(ds)] = ds\n    s2startmat[i,0:len(ds)] = s2[s2mods]\n    \n    \n# with only 26 letters, we cycle back to the beginning\nc3modmat[c3modmat<0] = c3modmat[c3modmat<0]+26\n\nfig, ax = plt.subplots(figsize=(15, 5))\n#ax.plot(np.arange(300),c3modmat.transpose())\nax.matshow(c3modmat[0:40,0:80])\nplt.xlabel('Character Changes',fontsize=16)\nplt.ylabel('Ciphertext Samples',fontsize=16)\nplt.title(\"EUREKA! A CONSISTENT PATTERN!\",fontsize=22)\nplt.show()","d969fa15":"modeadjust,_ = stats.mode(c3modmat,axis=0,nan_policy='omit')\nmodeadjust = np.squeeze(modeadjust.data)\nmodeadjust = np.trim_zeros(modeadjust)\nstartadj = 91\nprint('Modal adjustment to alphabetic characters')\nprint(ascii2string(startadj-np.array(modeadjust,dtype=int)))\nprint('Chars 0-19')\nprint(ascii2string(startadj-np.array(modeadjust[0:19],dtype=int)))\nprint('Chars 19-38')\nprint(ascii2string(startadj-np.array(modeadjust[19:37],dtype=int)))\nprint('Key = ')\nmodeadjust0 = [ 19.,  22.,  15.,  22.,  13.,   1.,  21.,  12.,   6.,  24.,  19.,\n        22.,   1.,  20.,   26.,  18.,  13.,  22.,   8.]\nprint(ascii2string(startadj-np.array(modeadjust0,dtype=int)))","29112572":"def decipher_rolling(textstring,c3mod,c3adjust):\n    inarray = string2ascii(textstring)\n    outarray = np.zeros(len(inarray),dtype=np.int8)\n    outarray[:] = inarray\n    # check to see if any substitutions are needed\n    modchars = [(snum in c3mod) for snum in inarray]\n    nmods = sum(modchars)\n    if nmods>0:\n        modchars = np.squeeze(np.argwhere(modchars))\n        lowermods = outarray[modchars] > 95\n        charadj = outarray[modchars] - 65 - 32*lowermods\n        charadj = (charadj + c3adjust[:nmods])%26\n        outarray[modchars] = 65+32*lowermods+charadj\n    return ascii2string(outarray)\n\nc3adjust = np.tile(modeadjust0,16)\nc3adjust = c3adjust[0:300]","68d78766":"textstring = train_df[train_df['difficulty']==3]['ciphertext'].iloc[0]\nprint('FINAL DECIPHER:')\nprint(decipher_subst(decipher_rolling(textstring,c3mod,c3adjust),asciimap2))","4224b4ca":"%%time\nc3indices = test_df[test_df['difficulty']>2].index\ntest_df.loc[c3indices,'plaintext'] = [decipher_subst(decipher_rolling(test_df['ciphertext'].loc[idx],c3mod,c3adjust),asciimap2) for idx in c3indices]","1fd15df4":"def minleven(textstring,selectdataframe):\n    arrayofstrings = selectdataframe['plaintext'].values\n    ldistances = [leven.distance(textstring,compstring) for compstring in arrayofstrings]\n    bestfitref = np.argmin(ldistances)\n    bestfittext = selectdataframe['plaintext'].iloc[bestfitref]\n    bestfitindex = selectdataframe.index[bestfitref]\n    return bestfittext, bestfitindex\n\ndef char_count(textstring):\n    return np.histogram(string2ascii(textstring),np.arange(129))[0]\n    \n# calculate ascii character frequency per million characters\ndef char_per_300(stringsarray):\n    asciicount = np.zeros((128,), dtype=int)\n    for k,textdata in enumerate(stringsarray):\n        asciicount += char_count(textdata)\n    totalchars = np.sum(asciicount)\n    return np.multiply(asciicount,np.divide(300.0,totalchars))\n\ndef similarity_score(x, y):\n    #ss = 1.0 - np.divide(np.linalg.norm(x - y),np.linalg.norm(y))\n    ss = np.sum(np.multiply(x,y))\n    return ss","a8a956f2":"%%time\n# major speedup with a pseudo-hash\ncp300 = char_per_300(chunks_plaintext)\ntest_df['Predicted'] = 1\ntest_df['Levenshtein'] = np.nan\ntest_df['lookupscore'] = [similarity_score(char_count(textstring),cp300) for textstring in test_df['plaintext'].values ]\nchunk_df['lookupscore'] = [similarity_score(char_count(textstring),cp300) for textstring in chunk_df['plaintext'].values ]","bcc57e18":"def exacttestmatch(idx):\n    textstring = test_df['plaintext'].loc[idx]\n    selectindices = np.argwhere(chunk_df['lookupscore']==test_df['lookupscore'].loc[idx])\n    if len(selectindices)==1:\n        matchtext = chunk_df['plaintext'].loc[selectindices[0]].values[0]\n        matchtarget = chunk_df['target'].loc[selectindices[0]].values[0]\n        matchdist = leven.distance(textstring,matchtext)\n    else:\n        matchtarget = np.nan\n        matchdist = 300\n    return matchtarget, matchdist\n\n\nfor idx in tqdm(test_df.index):\n    matchtarget, matchdist = exacttestmatch(idx)\n    if matchdist == 0:\n        test_df.loc[idx,'Predicted'] = matchtarget\n        test_df.loc[idx,'Levenshtein'] = matchdist\n        \nprint(str(np.sum(test_df['Levenshtein']==0))+\"\/\"+str(len(test_df))+\" exact matches\")","c22f9bd6":"submission_df = test_df.copy()\nsubmission_df.set_index('Id',inplace=True)\nsubmission_df.drop(['difficulty','plaintext','ciphertext','length','Levenshtein','lookupscore'],\n                   axis=1,inplace=True)\nsubmission_df['Predicted'] = pd.to_numeric(submission_df['Predicted'],downcast='integer')\nsubmission_df.to_csv('submission.csv')","163459fb":"## Distribution of ASCII characters in plaintext\nIn hacking the cipher, it will be helpful to see what the true distribution of ASCII characters is within the plaintext. The traditional letters will probably be fairly similar to the general distribution of alphabet letters in written English documents, but the newsgroup format of these postings could change the frequency with which we see capitalization and special characters.","bd66c4f3":"Looks like another substititution cipher. And even though this Kaggle competition creates the ciphertext by encoding with cipher #1 and then with cipher #2 to create the difficulty=2 ciphers, we can simply solve for the composition mapping between the plaintext in the source and the ciphertext. \n\n(However, you might find some interesting insight into the exact deciphering by looking at the patterns in going from cipher 1 to cipher 2. This would be helpful in correctly deciphering rare characters).","b8dff333":"If assign the numerical shifts to alphabetic characters, the pattern reveals a secret message that repeats every 19 characters! A fitting tribute to [Helen Fouch\u00e9 Gaines](https:\/\/en.wikipedia.org\/wiki\/Helen_Fouch%C3%A9_Gaines)","85b7b1e5":"Let's run through some more to try to correctly map characters that are less frequently observed.","a34250ae":"# 2. Characteristics of Plaintext Data\nFirst, let's look at the actual, plaintext data to get a feel for what we should expect to see in the postings from the 20 newsgroups. Knowing the characteristics of the text will make it much easier to decipher.\n\nEach of the newsgroup documents looks something like this:","4715c18e":"## Length of the newsgroup documents (after being split into 300 char strings)\nBeyond a general understanding of the dataset, the length of the documents can be helpful in decrypting the ciphers as you try to match plaintext to ciphertext--especially in trying to puzzle through the more complicated 3rd and 4th ciphers.","461ad0c3":"We have a polyalphabetic substitution cipher with a rolling key (i.e. a Vigen\u00e8re cipher). Let's now decipher our example text and then all of difficulty = 3.","e785c2ac":"Strangely, we (and fuzzywuzzy) are able to just barely figure out the matching plaintext when using the cipher#2 mapping. But the unmatched plaintext characters don't consistently correspond to the same ciphertext characters. \n\nLet's reverse engineer which ciphertext characters are the ones that we can't seem to consistently match.","931dd8b1":" While this level of accuracy is probably fine for identifying most of the `difficulty=1` ciphers, we may want to perfect the decryption. Getting the first cipher completely correct could help with the others.\n \n To fine-tune the mapping, let's take the identified matches and figure out which characters are not mapped correctly. We need a fairly large subset to find the rare characters, like \"K\", but going through so many example ciphers to find the rare characters eats significant time! For this step, it is helpful to use parallel processing (done here via `dask`).","cee08b00":"This looks great and exactly matches the source. Let's now decipher all the test data for difficulty=1.","6ecec0a5":"### Load Kaggle data","1c80e85e":"# 6. Make Predictions\nAfter having cracked some\/all of the ciphers, a big challenge is to efficiently process this all. Obvious methods, like fuzzy wuzzy lookups, take 10-30 seconds for each data item--which eats up a lot of CPU time. \n\n**Important tip: find fast\/efficient ways to do this. My method uses a \"psuedo hash\" that I made up which is called `lookupscore`. ** I match deciphered text to the source for cases where they have the same lookup score, and then uses slower comparisons for the cases where there are no exact matches. The more accuraate you have your deciphering, the fewer \"slow comparisons\" you need to make. ","296c5fa2":"Using those matches, some of the most common character replacements needed to match the proposed decipher with the source text (using Levenshtein distance edits) are:","1e00e2d9":"### Preliminary Setup\nIf not being run on a Kaggle kernel, you need to [create an API Token](https:\/\/github.com\/Kaggle\/kaggle-api#api-credentials), upload it, and make sure it is in the directory (usually ~\/.kaggle\/kaggle.json)","3b7d8e82":"Again, just using the character frequency is not a bad place to start. We can then fine-tune by matching to the source text.","9dc4393f":"Of course it would be too easy if cipher number three were another substitution cipher. Looking at the distribution of characters, we can see that the probability distribution of characters does not match the frequencies we would observe in typical plaintext for most characters...though it seems that the space character matches. \n\nInteresting. It must be the case that plaintext characters are not always mapped to the same ciphertext characters. \n\nLet's see what it looks like if we try to decipher ciphertext from difficulty #3 using our mapping from cipher #2.","9533c555":"### Load Python packages\nWe will import the usual `numpy`\/`pandas`\/`matplotlib`. Also `CountVectorizer` from `sklearn` for dealing with text analysis, `fuzzywuzzy` and `Levenshtein` for string matching, `itertools` to help with lists, and `dask` for  parallel processing.","7bc5b8be":"## Dictionaries of most common words and ngrams\n\nNote that we are not only using the default definion of a word (at least two alphanumeric characters) but are also considering an alternative dictionary allowing for one-letter words and special characters. This is done when loading the Python packages, defining the alternative CountVector word token: \n\n`token_pattern = r\"[a-zA-Z0-9!@#$&()<>'=\\-]+\" `","e82382c0":"Not bad! At this point, the text is already legible enough to understand. We could finish deciphering manually by making a few corrections to the asciimap (i.e. we could turn the  >'s sideways to makes v's!). \n\n... but manual deciphering is no fun!  And automating and optimizing may create tools that we will need for deciphering the later ciphers.","6567de30":"There are 18,846 data items distributed across the 20 categories.","ef4e5087":"Ah ha! These seem to all be alphabetic characters (upper and lowercase) that are being modified. We'll define this set of alphabetic characters as `c3mod`.","f3d7c5ac":"# 3. Cracking Cipher#1\n\nLet's get started on cracking the cipher for `difficulty=1`.\n\n## Observed character frequencies\n\nMany classic ciphers can be grouped into one of two categories; (1) substitution, where each character is mapped to another, and (2) transposition., where the ordering of the characters is switched.\n\nWe can use the observed frequency of characters to identify them. In a transposition ciphertext, the characters show the same frequency of occurrence as normal English text. In contrast, a substitution cipher will produce ciphertext where each character has a different frequency than it would in English. But importantly, the probability distribution should look about the same--just with different characters.\n\nIf the shape of the probability distribution changes, the cipher is more complicated. This could likely fall in the category of a \"polyalphabetic substitution cipher\", where the substitutions mapping changes from one letter to the next. \n\nSo let's look at the distribution of observed characters per million.","81ee08a1":"# 1. Utility Functions\n\nThe functions in the code section below may be helpful:\n* translating between strings of text and 8-bit ascii representations (`string2ascii` and `ascii2string`)\n* calculating vectors where each element is the frequency of character per million characters of text ( `char_per_million`)\n* decipher function for a substitution cipher given a mapping between ascii characters (`decipher_subst`)\n* trimming a longer text to match a shorter one with the same fuzzy similarity (`trim_matchedsource`)\n* matrix of ascii character replacement operations needed for Levenshtein distance (`leven_replace_matrix`)\n\n\nAnd for later use:\n* calculating vectors where each element is the frequency of word\/ngram per million characters of text (`word_per_million` and `ngram_per_million`). We can use these calculate similarity to properties of a source language.text (`similarity_score`)","a6aa5cb3":"## Finding actual plaintext in the source and fine-tuning\nThe current `asciimap` substitution deciphering--while not perfect--is close enough to easily find the plaintext source and perfect the final substitutions in the cipher. Note that it takes about 25 seconds for `fuzzy wuzy` to find a match on a typical CPU.","91124e23":"# 4. Cracking Cipher #2\nWe can follow the exact same process in examining cipher #2. First let's look at the distribution of the ascii characters in the ciphertext.","03ec68eb":"To help ensure the matches are high quality, let's only use matches where the text similarity, as measured by the `fuzz.ratio`, is higher than 80.","120bf34b":"And we can now decipher difficulty=3 (and we will also try to use this to attempt difficulty=4).","0187fdcf":"To make this kernel run for less time, we will only look for exact matches.","c1abb330":"# 5. Cracking Cipher #3\nAs before let's start by looking at the distribution of characters in ciphertext for difficulty =3. ","cc35414b":"# A First Crack: Tools, Tips & 3 Cipher Solutions\n\nTo get started on this Kaggle competition, we will need some tools for cracking simple ciphers. This kernel explores the data, creates some helpful functionality for all ciphers, and applies them to cracking the first three ciphers.\n0. Loading the Source Data (Important!)\n1. Utility Functions\n2. Characteristics of Plaintext Data\n    * Length of the newsgroup documents (before being split into 300 char strings)\n    * Distribution of ASCII characters in plaintext\n    * Dictionary of most common words in the plaintext source\n3. Cracking Cipher#1\n    * Matching the observed character frequencies\n    * Optimizing the decryption with word frequency similarity (or ngrams)\n    * Finding actual plaintext in the source and fine-tuning\n4. Cracking Cipher #2\n5. Cracking Cipher #3\n5. Make Predictions\n\nIn working on this, many thanks is due to:\n - [Practical Cryptography](http:\/\/practicalcryptography.com\/ciphers\/classical-era\/) for a summary of classic ciphers\n - [The scikit-learn tutorial for text data](https:\/\/scikit-learn.org\/stable\/tutorial\/text_analytics\/working_with_text_data.html) using the same \"20 Newgroups\" dataset\n\n** Hope you found this public kernel to be helpful! **","d6073a32":"Now we should have a fairly accurate solution. Let's check goodness-of-fit statistics as well as our decryption of the sample cipher at `iloc[0]`","54d5c202":"# 0. Loading the Source Data (Important!)\nIt will be helpful to reference the plaintext data from the **20 Newsgroups** data set, which is conveniently one of the `sklearn.datasets`. We will download this using `sklearn`, which brings some conveniences relative to the primary source on Jason Rennie's homepage ( [http:\/\/qwone.com\/~jason\/20Newsgroups\/](http:\/\/qwone.com\/~jason\/20Newsgroups\/) ).\n\nNote that the `fetch_20newsgroups` function used here returns a scikit-learn \"bunch\" object (see details [here](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.datasets.fetch_20newsgroups.html) ). \n\nIt will be extremely helpful to break this up into 300 character chunks **in exactly the same way as the Kaggle organizer. ** To do this, the key piece of code modifies the line breaks and trailing white space:\n\n`textstring.replace('\\r\\n','\\n').replace('\\r','\\n').replace('\\n','\\n ').rstrip(' ')`","7bb21f33":" It seems that cipher #3 is doing a transformation that only applies to these aphabetic characters, shifting them by varying amounts. Let's now try to find some pattern in how they are being shifted.","52feab77":"This is what we expect to see from a substitution cipher. Note the red line showing the shape of the distribution for the top characters in the source data: different letters but almost exactly the same distribution!\n \nLet's start deciphering by trying out a mapping between the characters of the plaintext and the ciphertext with the most similar frequency of occurrence. To do this, we will create an `asciimap` dataframe that connects each ciphertext characer in the index to a plaintext character in the `decipher` column. Then, if we just line up the frequency of letters ocurring in the plaintext English with the ciphertext, we can generate a first guess on a potential substitution mapping. Let's see how legible this is for the sample training data at `iloc[0]`:","9e0b5b6d":"And we can now decipher difficulty=2. ","bd9fbc1f":"And we can submit this for scoring on the Leaderboard...and only cipher #4 remains to be solved!"}}