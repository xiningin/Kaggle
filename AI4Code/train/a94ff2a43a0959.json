{"cell_type":{"59410f85":"code","e057f32c":"code","5143ec5f":"code","63421fe9":"code","da44176c":"code","38093cc2":"code","2ba62ea4":"code","6946bc0e":"code","4aeae92f":"code","8f6df2e4":"code","9a2d911b":"code","573ae2c6":"code","34c4b008":"code","b14f8aed":"code","7df29edf":"markdown"},"source":{"59410f85":"import os\nos.listdir('..\/input\/input\/input\/keras-pretrained-models\/')","e057f32c":"import os\ncache_dir = os.path.expanduser(os.path.join('~', '.keras'))\nif not os.path.exists(cache_dir):\n    os.makedirs(cache_dir)\nmodels_dir = os.path.join(cache_dir, 'models')\nif not os.path.exists(models_dir):\n    os.makedirs(models_dir)","5143ec5f":"!cp ..\/input\/input\/input\/keras-pretrained-models\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5 ~\/.keras\/models\/","63421fe9":"print(os.listdir('..\/input\/input\/input\/plant-seedlings-classification\/train\/'))","da44176c":"import fnmatch\nimport os\nimport numpy as np\nimport pandas as pd\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.applications.inception_v3 import preprocess_input\nfrom keras.preprocessing import image\nnp.random.seed(21)\n\npath = '..\/input\/input\/input\/plant-seedlings-classification\/train\/'\ntrain_label = []\ntrain_img = []\nlabel2num = {'Loose Silky-bent':0, 'Charlock':1, 'Sugar beet':2, 'Small-flowered Cranesbill':3,\n             'Common Chickweed':4, 'Common wheat':5, 'Maize':6, 'Cleavers':7, 'Scentless Mayweed':8,\n             'Fat Hen':9, 'Black-grass':10, 'Shepherds Purse':11}\nfor i in os.listdir(path):\n    label_number = label2num[i]\n    new_path = path+i+'\/'\n    for j in fnmatch.filter(os.listdir(new_path), '*.png'):\n        temp_img = image.load_img(new_path+j, target_size=(200,200))\n        train_label.append(label_number)\n        temp_img = image.img_to_array(temp_img)\n        train_img.append(temp_img)\n\ntrain_img = np.array(train_img)\n\ntrain_y=pd.get_dummies(train_label)\ntrain_y = np.array(train_y)\ntrain_img=preprocess_input(train_img)\n\nprint('Training data shape: ', train_img.shape)\nprint('Training labels shape: ', train_y.shape)","38093cc2":"def precision(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    return precision\n\n\ndef recall(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    return recall\n\n\ndef fscore(y_true, y_pred):\n    if K.sum(K.round(K.clip(y_true, 0, 1))) == 0:\n        return 0\n\n    p = precision(y_true, y_pred)\n    r = recall(y_true, y_pred)\n    f_score = 2 * (p * r) \/ (p + r + K.epsilon())\n    return f_score","2ba62ea4":"# import keras\n# from keras.models import Sequential,Model\n# from keras.layers import Dense, Dropout, Flatten, Activation\n# from keras.layers import Conv2D, MaxPooling2D\n# from keras.layers import Convolution2D, Dense, Input, Flatten, Dropout, MaxPooling2D, BatchNormalization, GlobalAveragePooling2D, Concatenate\n# from keras.layers.normalization import BatchNormalization\n# from keras.applications.inception_v3 import InceptionV3\n# from keras.preprocessing.image import ImageDataGenerator\n# from keras import backend as K\n# from keras import optimizers, losses, activations, models\n\n# base_model = InceptionV3(weights='imagenet', include_top=False,input_shape=(200,200,3))\n# #model.summary()\n# base_model.trainable = False\n\n# add_model = Sequential()\n# add_model.add(base_model)\n# add_model.add(GlobalAveragePooling2D())\n# add_model.add(Dropout(0.5))\n# add_model.add(Dense(12, activation='softmax'))\n\n# model = add_model\n# model.compile(loss='categorical_crossentropy', \n#               optimizer=optimizers.SGD(lr=1e-4, \n#                                        momentum=0.9),\n#               metrics=['accuracy',fscore])\n# model.summary()","6946bc0e":"import keras\nfrom keras.models import Sequential,Model\nfrom keras.layers import Dense, Dropout, Flatten, Activation\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.preprocessing.image import ImageDataGenerator\n\ndef inceptionv3_model(num_classes=None):\n\n    model = InceptionV3(weights='imagenet', include_top=False,input_shape=(200,200,3))\n    model.layers.pop()\n    model.layers.pop()\n    model.layers.pop()\n\n    model.outputs = [model.layers[-1].output]\n\n    model.layers[-2].outbound_nodes= []\n    x=Conv2D(256, kernel_size=(2,2),strides=2)(model.output)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)    \n    x=Conv2D(128, kernel_size=(2,2),strides=1)(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    x=Conv2D(64, kernel_size=(2,2),strides=2)(model.output)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x) \n    x=Flatten()(x)\n    x=Dense(num_classes, activation='softmax')(x)\n\n    model=Model(model.input,x)\n\n    for layer in model.layers[:46]:\n\n        layer.trainable = False\n\n\n    return model","4aeae92f":"from keras import backend as K\nnum_classes=12\nmodel = inceptionv3_model(num_classes)\nmodel.compile(optimizer=\"nadam\", loss='categorical_crossentropy', metrics=['accuracy',fscore])\n# model.compile(loss='categorical_crossentropy', \n#               optimizer=optimizers.SGD(lr=1e-4, \n#                                        momentum=0.9),\n#               metrics=['accuracy'])\nmodel.summary()","8f6df2e4":"#Split training data into rain set and validation set\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, Y_train, Y_valid=train_test_split(train_img,train_y,test_size=0.1, random_state=42)\n\n#Data augmentation\n'''from keras.preprocessing.image import ImageDataGenerator\ngen_train = ImageDataGenerator( \n    rotation_range=30,\n    width_shift_range=0.2,\n   height_shift_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True\n\n)\ngen_train.fit(X_train)\n\n#Train model\nfrom keras.callbacks import ModelCheckpoint\nepochs = 10\nbatch_size = 32\nmodel_checkpoint = ModelCheckpoint('weights.h5', monitor='val_loss', save_best_only=True)\n\nmodel.fit_generator(gen_train.flow(X_train, Y_train, batch_size=batch_size, shuffle=True), \n                    steps_per_epoch=(X_train.shape[0]\/\/(4*batch_size)), \n                    epochs=epochs, \n                    validation_data=(X_valid,Y_valid),\n                    callbacks=[model_checkpoint],verbose=1)\n'''\nfrom keras.callbacks import ModelCheckpoint\nepochs = 10\nbatch_size = 32\n# model_checkpoint = ModelCheckpoint('weights.h5', monitor='val_loss', save_best_only=True)\n\nmodel_checkpoint = ModelCheckpoint('.\/model62.{epoch:02d}-{val_loss:.2f}-{val_acc:.2f}.h5',\n                           monitor='val_loss',\n                             verbose=1,\n                            save_best_only=True,\n                            mode='min',\n                             save_weights_only=False)\n\n\nmodel.fit(X_train,Y_train,\n          batch_size=128,\n          epochs=20,\n          verbose=1, shuffle=True, validation_data=(X_valid,Y_valid), callbacks=[model_checkpoint])","9a2d911b":"# train_img= train_img.reindex(np.random.permutation(train_img.index))\n# train_y \n# #test_proportion of 3 means 1\/3 so 33% test and 67% train\n# def shuffle(matrix, target, test_proportion):\n#     ratio = int(matrix.shape[0]\/test_proportion) #should be int\n#     X_train = matrix[ratio:,:]\n#     X_test =  matrix[:ratio,:]\n#     Y_train = target[ratio:,:]\n#     Y_test =  target[:ratio,:]\n#     return X_train, X_test, Y_train, Y_test\n\n# X_train, X_test, Y_train, Y_test = shuffle(X, Y, 3)\n\n#np.random.shuffle(train_img)","573ae2c6":"from keras.models import load_model\nmodel=load_model(\"model62.14-0.59-0.85.h5\",custom_objects={'fscore': fscore})","34c4b008":"# import matplotlib.pyplot as plt\n# def plot_model(model):\n#     plots = [i for i in model.history.history.keys() if i.find('val_') == -1]\n#     plt.figure(figsize=(10,10))\n\n#     for i, p in enumerate(plots):\n#         plt.subplot(len(plots), 2, i + 1)\n#         plt.title(p)\n#         plt.plot(model.history.history[p], label=p)\n#         plt.plot(model.history.history['val_'+p], label='val_'+p)\n#         plt.legend()\n\n#     plt.show()\n    \n# plot_model(model)","b14f8aed":"from sklearn.metrics import classification_report, confusion_matrix\nlabelNames=['Loose Silky-bent', 'Charlock', 'Sugar beet', 'Small-flowered Cranesbill',\n             'Common Chickweed', 'Common wheat', 'Maize', 'Cleavers', 'Scentless Mayweed',\n             'Fat Hen', 'Black-grass', 'Shepherds Purse']\npreds = model.predict(X_valid)\nprint(\"[INFO] evaluating network...\")\nprint(classification_report(Y_valid.argmax(axis=1), preds.argmax(axis=1),\n\ttarget_names=labelNames))\nprint(\"The confusion matrix:\")\nprint(confusion_matrix(Y_valid.argmax(axis=1), preds.argmax(axis=1)))","7df29edf":"Transfer learning using Inception V3 on the plant-seedlings-classification dataset of kaggle.\nAn accuracy of 85% with a validation loss of 0.58 was achieved.\n\n"}}