{"cell_type":{"f72f84e2":"code","7331513a":"code","65762427":"code","aca67af0":"code","bc756839":"code","6fdc0e06":"code","dd210035":"code","8580a47c":"code","60766c04":"code","936a1204":"code","05387267":"code","cfde9932":"code","12024688":"code","d8e898c9":"code","9c77f1fd":"code","b68875a1":"code","eb7836e0":"code","f38c842a":"code","bcefea33":"code","27487615":"code","9964a07f":"code","11563409":"code","a3b93f41":"code","7a924b33":"code","8e073f50":"code","daa58917":"code","074ed8ee":"code","95376a3f":"code","e06ae580":"code","3181b7f7":"code","0098a89d":"code","99f0938c":"code","362ef95c":"code","d57487ae":"code","30ab0d1b":"code","877dcc66":"markdown"},"source":{"f72f84e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7331513a":"from fastai.tabular import *","65762427":"path = Config().data_path()","aca67af0":"train_data = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nlen(train_data), train_data.head()","bc756839":"test_data = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest_data = test_data.fillna(0)\nlen(test_data), test_data.head()","6fdc0e06":"#remove outliers\n\ntrain_data = train_data.drop(\n    train_data[(train_data['GrLivArea']>4000) & (train_data['SalePrice']<300000)].index\n)","dd210035":"all_data=pd.concat((train_data, test_data), axis=0)","8580a47c":"# New features\n\nall_data['TotalSF']=all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\nall_data['No2ndFlr']=(all_data['2ndFlrSF']==0)\nall_data['NoBsmt']=(all_data['TotalBsmtSF']==0)\n\n\nall_data['TotalBath']     = all_data['BsmtFullBath'] + all_data['FullBath'] + (all_data['BsmtHalfBath']\/2) + (all_data['HalfBath']\/2)\nall_data['YrBltAndRemod'] = all_data['YearBuilt']+all_data['YearRemodAdd']\n\n# Basement \n\nBasement = ['BsmtCond', 'BsmtExposure', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtFinType1', 'BsmtFinType2', 'BsmtQual', 'BsmtUnfSF',\\\n            'TotalBsmtSF']\nBsmt=all_data[Basement]\n\nBsmt=Bsmt.replace(to_replace='Po', value=1)\nBsmt=Bsmt.replace(to_replace='Fa', value=2)\nBsmt=Bsmt.replace(to_replace='TA', value=3)\nBsmt=Bsmt.replace(to_replace='Gd', value=4)\nBsmt=Bsmt.replace(to_replace='Ex', value=5)\nBsmt=Bsmt.replace(to_replace='None', value=0)\n\nBsmt=Bsmt.replace(to_replace='No', value=1)\nBsmt=Bsmt.replace(to_replace='Mn', value=2)\nBsmt=Bsmt.replace(to_replace='Av', value=3)\nBsmt=Bsmt.replace(to_replace='Gd', value=4)\n\nBsmt=Bsmt.replace(to_replace='Unf', value=1)\nBsmt=Bsmt.replace(to_replace='LwQ', value=2)\nBsmt=Bsmt.replace(to_replace='Rec', value=3)\nBsmt=Bsmt.replace(to_replace='BLQ', value=4)\nBsmt=Bsmt.replace(to_replace='ALQ', value=5)\nBsmt=Bsmt.replace(to_replace='GLQ', value=6)\n\nBsmt['BsmtScore']= Bsmt['BsmtQual']  * Bsmt['BsmtCond'] * Bsmt['TotalBsmtSF']\nall_data['BsmtScore']=Bsmt['BsmtScore']\n\nBsmt['BsmtFin'] = (Bsmt['BsmtFinSF1'] * Bsmt['BsmtFinType1']) + (Bsmt['BsmtFinSF2'] * Bsmt['BsmtFinType2'])\nall_data['BsmtFinScore']=Bsmt['BsmtFin']\nall_data['BsmtDNF']=(all_data['BsmtFinScore']==0)\n\n# Lot\n\nlot=['LotFrontage', 'LotArea','LotConfig','LotShape']\nLot=all_data[lot]\n\nLot['LotScore'] = np.log((Lot['LotFrontage'] * Lot['LotArea'])+1)\nall_data['LotScore']=Lot['LotScore']\n\n# Garage \n\ngarage=['GarageArea','GarageCars','GarageCond','GarageFinish','GarageQual','GarageType','GarageYrBlt']\nGarage=all_data[garage]\nall_data['NoGarage']=(all_data['GarageArea']==0)\n\nGarage=Garage.replace(to_replace='Po', value=1)\nGarage=Garage.replace(to_replace='Fa', value=2)\nGarage=Garage.replace(to_replace='TA', value=3)\nGarage=Garage.replace(to_replace='Gd', value=4)\nGarage=Garage.replace(to_replace='Ex', value=5)\nGarage=Garage.replace(to_replace='None', value=0)\n\nGarage=Garage.replace(to_replace='Unf', value=1)\nGarage=Garage.replace(to_replace='RFn', value=2)\nGarage=Garage.replace(to_replace='Fin', value=3)\n\nGarage=Garage.replace(to_replace='CarPort', value=1)\nGarage=Garage.replace(to_replace='Basment', value=4)\nGarage=Garage.replace(to_replace='Detchd', value=2)\nGarage=Garage.replace(to_replace='2Types', value=3)\nGarage=Garage.replace(to_replace='Basement', value=5)\nGarage=Garage.replace(to_replace='Attchd', value=6)\nGarage=Garage.replace(to_replace='BuiltIn', value=7)\n\nGarage['GarageScore']=(Garage['GarageArea']) * (Garage['GarageCars']) * (Garage['GarageFinish'])*(Garage['GarageQual']) * \\\n(Garage['GarageType'])\nall_data['GarageScore']=Garage['GarageScore']\n\n# other \n\nall_data['NoLowQual']=(all_data['LowQualFinSF']==0)\nall_data['NoOpenPorch']=(all_data['OpenPorchSF']==0)\nall_data['NoWoodDeck']=(all_data['WoodDeckSF']==0)\n\n","60766c04":"# Drop\n\nall_data=all_data.drop(columns=['PoolArea','PoolQC'])\nall_data=all_data.drop(columns=['MiscVal','MiscFeature'])\nall_data=all_data.drop(columns=['Street','Utilities','Condition2','RoofMatl','Heating'])\n","936a1204":"dep_var = 'SalePrice'\n\ntarget = train_df[dep_var].copy()","05387267":"# unskew values\n\nnumeric=all_data.select_dtypes(np.number)\n\ndef log_transform(col_list):\n    transformed_col=[]\n    while len(col_list)!=0:\n        col=col_list.pop(0)\n        if all_data[col].skew() > 0.5:\n            print(f\"Unskewing {col}\")\n            all_data[col]=np.log(all_data[col]+1)\n            transformed_col.append(col)\n        else:\n            pass\n    print(f\"{len(transformed_col)} features had been transformed\")\n    print(all_data.shape)\n    \nlog_transform(list(numeric))","cfde9932":"all_data[dep_var] = target","12024688":"# all_data[dep_var].head()","d8e898c9":"cat_vars = ['MSSubClass', 'MSZoning',\n       'Alley', 'LotShape', 'LandContour', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \n       'BsmtFinType2', 'HeatingQC', 'CentralAir', 'Electrical', \n       'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageQual',\n       'GarageCond', 'PavedDrive',\n       'Fence', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition',\n       'NoLowQual', 'NoOpenPorch', 'NoWoodDeck', 'BsmtDNF', 'No2ndFlr', 'NoBsmt', 'YrBltAndRemod']\n\ncont_vars =  [ 'LotFrontage', 'LotArea','MasVnrArea', 'BsmtFinSF1',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n       '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'GarageArea', \n       'WoodDeckSF', 'OpenPorchSF','EnclosedPorch', '3SsnPorch', 'ScreenPorch',\n       'GarageScore', 'BsmtFinScore', 'LotScore', 'TotalSF', 'TotalBath']","9c77f1fd":"# cat_vars = ['MSSubClass', 'MSZoning','Street',\n#        'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n#        'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n#        'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n#        'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n#        'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n#        'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \n#        'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', \n#        'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n#        'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n#        'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n#        'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageQual',\n#        'GarageCond', 'PavedDrive', 'PoolQC',\n#        'Fence', 'MiscFeature', 'MoSold', 'YrSold', 'SaleType',\n#        'SaleCondition']\n\n# cont_vars =  [ 'LotFrontage', 'LotArea','MasVnrArea', 'BsmtFinSF1',\n#        'BsmtFinSF2', 'BsmtUnfSF', 'To talBsmtSF',\n#        '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'GarageArea', \n#        'WoodDeckSF', 'OpenPorchSF','EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal']","b68875a1":"\n\ntrain_df=all_data[:len(train_data)]\ntest_df=all_data[len(train_data):]","eb7836e0":"dep_var = 'SalePrice'\ndf = train_df[cat_vars + cont_vars + [dep_var]].copy()\n\n\n\nprocs=[FillMissing, Categorify, Normalize]\nvalid_idx = range(len(df)-290, len(df))\n","f38c842a":"data = (TabularList.from_df(df, path=path, cat_names=cat_vars, cont_names=cont_vars, procs=procs,)\n                .split_by_idx(valid_idx)\n                .label_from_df(cols=dep_var, label_cls=FloatList, log=True)\n                .add_test(TabularList.from_df(test_df, path=path, cat_names=cat_vars, cont_names=cont_vars))\n                .databunch())","bcefea33":"# max_y = (np.max(train_df['SalePrice'])*1.05)\n# y_range = torch.tensor([0, max_y], device=defaults.device)\n\nmax_log_y = np.log(np.max(train_df['SalePrice'])*1.1)\ny_range = torch.tensor([0, max_log_y], device=defaults.device)\n\nmax_log_y, y_range","27487615":"learn = tabular_learner(\n    data, \n    layers=[1000,500],\n    ps=[0.001,0.01],\n    emb_drop=0.04,             \n    y_range=y_range, \n    metrics=[exp_rmspe]\n)\n\nlearn.model","9964a07f":"len(data.train_ds.cont_names)","11563409":"learn.lr_find()","a3b93f41":"learn.recorder.plot()","7a924b33":"# learn.fit_one_cycle(100, 1e-3)\n\nfrom fastai.callbacks import *\n\n# learn.fit_one_cycle(250, 1e-3)\n\nlearn.fit_one_cycle(\n    500, \n    1e-3, \n    callbacks=[\n      ShowGraph(learn),\n      SaveModelCallback(learn,monitor='exp_rmspe',mode='min')\n    ]\n)","8e073f50":"#learn.recorder.plot_losses()","daa58917":"learn.recorder.plot_metrics(skip_start=100)","074ed8ee":"learn.load('bestmodel')","95376a3f":"# diff_total = 0\n\n# for x in range(len(train_df)):\n#   target = train_df.iloc[x].SalePrice\n#   pred = np.exp(learn.predict(train_df.iloc[x])[1][0])\n#   diff =  abs(target - int(pred.data))\n#   diff_total = diff_total + diff\n\n# len(train_df), diff_total , diff_total \/ len(train_df)","e06ae580":"# RMSE score\n\nkaggle_df = train_df.drop(columns=['SalePrice'])\n\nk_predictions = [0] * len(train_df)\nk_targets     = [0] * len(train_df)\n\n\nfor x in range(len(kaggle_df)):\n  k_predictions[x] = learn.predict(kaggle_df.iloc[x])[1][0].item()\n  k_targets[x]     = np.log(train_df.SalePrice.iloc[x])\n    \nroot_mean_squared_error(tensor(k_predictions), tensor(k_targets))    ","3181b7f7":"reference_data = pd.read_csv(\"\/kaggle\/input\/house-price-reference\/reference.csv\")\nreference_data = reference_data.fillna(0)\nlen(reference_data), reference_data.head()","0098a89d":"# kaggle score (against reference data)\n    \nroot_mean_squared_error(tensor(k_predictions), tensor(np.log(reference_data.SalePrice))) ","99f0938c":"# i = 3\n# k_predictions[i], k_targets[i], k_predictions[i]\/k_targets[i]","362ef95c":"predictions = [0] * len(test_df)\n\nfor x in range(len(test_df)):\n  predictions[x] = np.exp(learn.predict(test_df.iloc[x])[1][0].item())\n","d57487ae":"len(predictions), predictions","30ab0d1b":"output = pd.DataFrame({'Id': test_df.Id, 'SalePrice': predictions})\n\noutput.to_csv('house_price_cuijamm1_submission.csv', index=False)","877dcc66":"# Model"}}