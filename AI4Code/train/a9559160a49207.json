{"cell_type":{"13b8b530":"code","9735726b":"code","43ac8448":"code","2864913a":"code","43c4727a":"code","842cf9c9":"code","0d35f61f":"code","7951e7db":"code","315f3721":"code","64dcc65f":"code","18340bac":"code","b1cdd328":"code","dc084140":"code","878432f1":"code","8ac1cbe1":"code","066ddb93":"code","c1756a2f":"code","c24876a1":"code","353d742f":"code","682758a7":"code","d12ce1b3":"code","03831003":"code","b2135e4a":"code","ca3be3f6":"code","671cc5a2":"code","8cea8cfa":"code","c4cf220e":"code","49de4aa7":"code","1cbe53e6":"code","179dc1f9":"code","30d52cea":"code","c8a56aad":"code","f7cb0f21":"code","50785e0f":"code","402beca8":"code","2032e659":"code","bfa50b6a":"code","ea5c9725":"code","8d853c33":"code","ebd58ead":"code","3402ee9b":"code","2a71d0ad":"code","39e6fa2f":"code","4db05dc5":"code","f9d9a9ff":"markdown","b768b18c":"markdown","93a7d917":"markdown","68fd1052":"markdown","f10353f6":"markdown","4fc76f3e":"markdown","cafbcaa8":"markdown","45311990":"markdown","9a13315d":"markdown","6f195177":"markdown","ce3e849c":"markdown","d35d3c0b":"markdown","757f5300":"markdown","9f587464":"markdown","4e6aeedd":"markdown","ce83ab35":"markdown","1264f4ee":"markdown","fb92e569":"markdown","7768ca2e":"markdown","eec90f40":"markdown","7e0f5ad9":"markdown","ed119a1e":"markdown","0521d6ce":"markdown","d05dd0a2":"markdown","e7e521f4":"markdown","67425e1e":"markdown","c4f53c5c":"markdown","9884698b":"markdown","fe54f5ac":"markdown","0d2c7732":"markdown","fb2a588f":"markdown","e644e416":"markdown","274b056a":"markdown","d4cf6c9a":"markdown","5c0755fd":"markdown","c7c6a845":"markdown","a6cf73d4":"markdown","76d8274e":"markdown","c34fbda7":"markdown"},"source":{"13b8b530":"#importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9735726b":"# Reading the train data\ndf_train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_train.head()","43ac8448":"# Reading the test data \ndf_test=pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ndf_test.head()","2864913a":"# to check the shape of both train and test data set\nprint(df_train.shape)\n\nprint(df_test.shape)","43c4727a":"# to check the information related to train dataset\ndf_train.info()\n","842cf9c9":"# to check the information related to test dataset\ndf_test.info()","0d35f61f":"#To check stastical data related to train dataset\nprint(df_train.describe())\n","7951e7db":"#To check stastical data related to test dataset\nprint(df_test.describe())","315f3721":"# to check the missing values in train data set\nprint(\"Missing values in train data set\")\nprint(df_train.isnull().sum())\nprint('-'*50)\nprint(\"Missing percentage in train data set\")\nprint(df_train.isnull().sum()\/len(df_train))","64dcc65f":"\n# To check the missing values in test data set\nprint(\"Missing values in train data set\")\nprint(df_test.isnull().sum())\nprint('-'*50)\nprint(\"Missing percentage in train data set\")\nprint(df_test.isnull().sum()\/len(df_test))","18340bac":"# droping cabin from both train and test data set\ndf_train.drop(\"Cabin\", axis = 1, inplace = True)\ndf_test.drop(\"Cabin\", axis = 1, inplace = True)","b1cdd328":"#the median will be an acceptable value to place in the NaN cells\ndf_train[\"Age\"].fillna(df_train[\"Age\"].median(), inplace = True)\ndf_test[\"Age\"].fillna(df_test[\"Age\"].median(), inplace = True) ","dc084140":"# to check the value counts\ndf_train['Embarked'].value_counts(normalize=True)","878432f1":"#impute with mode\ndf_train[\"Embarked\"].fillna(\"S\", inplace = True)","8ac1cbe1":"# to impute missing values with meadian value\ndf_test[\"Fare\"].fillna(df_test[\"Fare\"].median(), inplace = True)","066ddb93":"print('Missing values in Train Data')\nprint(df_train.isnull().sum())\nprint('*'*75)\nprint('Missing values in Test Data ')\nprint('-'*50)\nprint(df_test.isnull().sum())","c1756a2f":"# to find the co-relation on train dataset\nplt.figure(figsize=(15,5))\nsns.heatmap(df_train.corr(),annot=True,cmap='YlGnBu')","c24876a1":"# pie plot and  countplot\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',shadow=True)\nplt.subplot(1,2,2)\nplt.title(\"survived\")\nsns.countplot('Survived',data=df_train)","353d742f":"# comparing survived with respect to pclass\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\ndf_train['Pclass'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)\nplt.subplot(1,2,2)\nplt.title(\"survived\")\nsns.barplot(x=\"Pclass\",y='Survived',data=df_train)","682758a7":"# comparing survived with respect to sex\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\ndf_train['Sex'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)\nplt.subplot(1,2,2)\nplt.title(\"survived\")\nsns.barplot(x=\"Sex\",y='Survived',data=df_train)","d12ce1b3":"# comparing survived with respect to Embarked\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\ndf_train['Embarked'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.subplot(1,2,2)\nplt.title(\"survived\")\nsns.barplot(x=\"Embarked\",y='Survived',data=df_train)","03831003":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.barplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=df_train)\nplt.subplot(1,2,2)\nsns.barplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", data=df_train)","b2135e4a":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.barplot(x=\"Pclass\", y=\"Survived\", hue=\"Embarked\", data=df_train)\nplt.subplot(1,2,2)\nsns.barplot(x=\"Embarked\", y=\"Survived\", hue=\"Pclass\", data=df_train)","ca3be3f6":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.barplot(x=\"Sex\", y=\"Survived\", hue=\"Embarked\", data=df_train)\nplt.subplot(1,2,2)\nsns.barplot(x=\"Embarked\", y=\"Survived\", hue=\"Sex\", data=df_train)","671cc5a2":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\ndf_train[df_train['Survived']==0].Age.plot.hist(bins=20)\nplt.xlabel(\"AGE\")\nplt.ylabel(\"Surive\")\nplt.title(\"survive\")\nplt.subplot(1,2,2)\ndf_train[df_train['Survived']==1].Age.plot.hist(bins=20)\nplt.xlabel(\"AGE\")\nplt.ylabel(\"Surive\")\nplt.title(\"Didnot survive\")","8cea8cfa":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.barplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", data=df_train)\nplt.subplot(1,2,2)\nsns.barplot(x=\"Sex\", y=\"Age\", hue=\"Survived\", data=df_train)","c4cf220e":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.barplot(x=\"Parch\", y=\"Survived\", data=df_train)\nplt.subplot(1,2,2)\nsns.barplot(x=\"Parch\", y=\"Survived\", hue=\"Pclass\", data=df_train)","49de4aa7":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.barplot(x=\"SibSp\", y=\"Survived\", data=df_train)\nplt.subplot(1,2,2)\nsns.barplot(x=\"SibSp\", y=\"Survived\", hue=\"Pclass\", data=df_train)","1cbe53e6":"plt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nsns.countplot(x=\"Embarked\", hue=\"Pclass\", data=df_train)\nplt.subplot(2,2,2)\nsns.countplot(x=\"Embarked\", hue=\"Sex\", data=df_train)\nplt.subplot(2,2,3)\nsns.countplot(x=\"Embarked\", hue=\"Survived\", data=df_train)\nplt.subplot(2,2,4)\nsns.countplot(x=\"Embarked\", hue=\"Parch\", data=df_train)","179dc1f9":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder() \ndf_train['Embarked']= label_encoder.fit_transform(df_train['Embarked']) \ndf_train['Sex']= label_encoder.fit_transform(df_train['Sex'])\ndf_test['Embarked']= label_encoder.fit_transform(df_test['Embarked']) \ndf_test['Sex']= label_encoder.fit_transform(df_test['Sex'])","30d52cea":"df_train.head()\n#s=2,c=0\ndf_test.head()","c8a56aad":"# droping Ticket and name from train dataset\ndf_train.drop([\"Ticket\",\"Name\"], axis = 1, inplace = True)\ndf_test.drop([\"Ticket\",\"Name\"], axis = 1, inplace = True)","f7cb0f21":"df_train.head()","50785e0f":"# scaling standerdise\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression","402beca8":"scaler = StandardScaler()\n\ndf_train[['Age','Fare']] = scaler.fit_transform(df_train[['Age','Fare']])\ndf_test[['Age','Fare']] = scaler.transform(df_test[['Age','Fare']])\n\ndf_train.head()","2032e659":"df_test.head()","bfa50b6a":"X_train = df_train.drop(['Survived','PassengerId'], axis=1)\ny_train = df_train[\"Survived\"]\nX_test  = df_test.drop(\"PassengerId\", axis=1)\nX_train.shape, y_train.shape, X_test.shape","ea5c9725":"\nLR = LogisticRegression()\nLR.fit(X_train, y_train)\n\n# Making Predictions\ny_pred = LR.predict(X_test)","8d853c33":"print(\"Accuracy:\",round(LR.score(X_train, y_train)*100,2))","ebd58ead":"coefs=LR.coef_[0]\ncoefs\n","3402ee9b":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train, y_train)\npred = clf.predict(X_test)\n\n\ndfs = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nfile = {\"PassengerId\":dfs[\"PassengerId\"],\"Survived\":pred}\nfile = pd.DataFrame(file)\n\nfile.to_csv(\"submission.csv\",index=False)","2a71d0ad":"# from sklearn.ensemble import RandomForestClassifier\n\n# #Create a Gaussian Classifier\n# clf=RandomForestClassifier(n_estimators=100)\n\n# #Train the model using the training sets y_pred=clf.predict(X_test)\n# clf.fit(X_train,y_train)\n\n# pred=clf.predict(X_test)\n\n# dfs = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n# file1 = {\"PassengerId\":dfs[\"PassengerId\"],\"Survived\":pred}\n# file1 = pd.DataFrame(file)\n\n# # file.to_csv(\"submission.csv\",index=False)\n\n\n","39e6fa2f":"# clf.score(X_train, y_train)\n# random_forest = round(clf.score(X_train, y_train) * 100, 2)\n# random_forest","4db05dc5":"output = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': pred})\n\noutput.to_csv('my_submission.csv', index=False)\n\n","f9d9a9ff":"# 1.Reading and Improting the data","b768b18c":"<font color=blue>cabin as highest missing percentage in both train and test data set droping it.","93a7d917":"Handling Missing values","68fd1052":"# 4.Logistic Regression","f10353f6":"1.SURVIVED","4fc76f3e":"3.EMBARKED, SURVIVED and SEX","cafbcaa8":"Parch,Survived and Pclass","45311990":"1.PCLASS, SURVIVED and SEX","9a13315d":"<font color=blue>single spouse or siblings are more likely to survive and belongs to class 2 ","6f195177":" *Decision Tree*","ce3e849c":"> *Random Forest*","d35d3c0b":"<font color=blue>38.4% of passangersa survived.","757f5300":"<font color=blue>Embarked Q classes are survived more.","9f587464":"<font color=blue>1.Survived is highly correlated with Fare(.26)\n    \n<font color=blue>2.Survived is also strongly related to Passenger Class(-.34)    ","4e6aeedd":"<font color=blue>  class1 24.2% , class 2 20.7% and class 3 55.1%  members are present and class3 people are more surivied.","ce83ab35":"**Hi, guys thank you for going through note book, please do comment and help me to improve .**","1264f4ee":"Scaling","fb92e569":"<font color=blue>Female are more like to survive .","7768ca2e":"[![titanic_sinks_lifeboat.jpg](attachment:titanic_sinks_lifeboat.jpg)](http:\/\/)","eec90f40":"<font color=blue>females belongs to c Embarked are more likely to survive","7e0f5ad9":"<font color=blue>females are more survived than male ","ed119a1e":"Pclass,Age and Survived","0521d6ce":"<font color=blue>From above we can identify some of the missing values in the column age and cabin","d05dd0a2":"<font color=blue>3 members of the family and belong to class 2 are more likely to survive","e7e521f4":"# 2.Data Cleaning and Preparation","67425e1e":"# 3. EDA","c4f53c5c":"2.PCLASS, SURVIVED and EMBARKED","9884698b":"Category variable to numeric variable","fe54f5ac":"SURVIVE With respect to AGE","0d2c7732":"# <font color=red****>TITANIC SURVIVAL RATE PREDECTION","fb2a588f":"<font color=blue>More survive people who are in the age of 25-30 are  more survived.","e644e416":"<font color=blue>females who belongs to age of 20to 30 are more likely to survive","274b056a":"3.SURVIVED and SEX","d4cf6c9a":"<font color=blue>From above we can identify some of the missing values in the column fare,age and cabin","5c0755fd":"<font color=blue>Embarked c are more like to survive more","c7c6a845":"Embarked,pclass,sex,survived,parch","a6cf73d4":"4. SURVIVED and EMBARKED","76d8274e":"SibSp, survived and pclass","c34fbda7":"2. SURVIVED and PCLASS"}}