{"cell_type":{"12bd50d0":"code","f2696354":"code","5129fbb3":"code","4ce5703f":"code","2544ed8b":"code","e699cc27":"code","ebed1af0":"code","184a13dd":"code","97d78241":"code","548b8786":"code","b1494830":"code","7c4575fc":"code","6dd5da13":"code","c2efac51":"code","d9f03d1a":"code","c26201fd":"code","6f1062ea":"code","e70757be":"code","d4255360":"code","3f246af8":"code","ed06c532":"code","754336da":"code","f0b5917f":"code","7f6583a0":"code","6ebefad8":"code","e5fd49b3":"code","6e00c1df":"code","db781fb6":"code","d97ec464":"markdown","16eca8c4":"markdown","b7161166":"markdown","69027975":"markdown","cf7277c4":"markdown","1d062170":"markdown","5403ae00":"markdown","65be74be":"markdown","08438183":"markdown","3bab1ffb":"markdown","4a497e73":"markdown","77305dd1":"markdown","089574bb":"markdown","4da92eec":"markdown","f870199a":"markdown","deea5117":"markdown","778397a6":"markdown","7a6eaef7":"markdown","da4be6c0":"markdown","e8edd40c":"markdown","d9f11f29":"markdown","af609b71":"markdown","d3987021":"markdown","cfbb2279":"markdown"},"source":{"12bd50d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom fbprophet import Prophet\nimport plotly.graph_objects as go\nimport warnings \n\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2696354":"df = pd.read_csv('\/kaggle\/input\/pakistan-corona-virus-citywise-data\/PK COVID-19-3jun.csv', parse_dates= ['Date'])","5129fbb3":"df.head()","4ce5703f":"df.info()","2544ed8b":"df.isnull().sum()","e699cc27":"df['Travel_history'].unique()","ebed1af0":"df['Travel_history'] = df['Travel_history'].replace(df['Travel_history'][df['Travel_history'].isnull()].values, 'Unknown')","184a13dd":"df = df.sort_values('Date')","97d78241":"df['Province'].unique()","548b8786":"df['Province'].replace('khyber Pakhtunkhwa', 'Khyber Pakhtunkhwa', inplace=True )\ndf['Province'].replace('islamabad Capital Territory', 'Islamabad Capital Territory', inplace=True )","b1494830":"df['Travel_history'].unique()","7c4575fc":"df['City'].unique()","6dd5da13":"sns.set(font_scale=2.7)\n\nplt.figure(figsize= (20,15))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"New Case, Recovered, Death Per Day in Pakistan\" , fontsize = 30)\n\na = df.groupby('Date')['Cases'].sum().index \nb = df.groupby('Date')['Cases'].sum().values\nplt.plot(a,b, marker = '.',ls='--',lw=2,color='black')\n\nx = df.groupby('Date')['Recovered'].sum().index\ny = df.groupby('Date')['Recovered'].sum().values\nplt.plot(x,y, marker = '.', ls='dashdot',lw=2,color='green')\n\n\nc = df.groupby('Date')['Deaths'].sum().index \nd = df.groupby('Date')['Deaths'].sum().values\nplt.plot(c,d, marker = '.', ls='dashdot',lw=2,color='red')\n\n\nplt.legend([\"Cases\", 'Recovered', 'Deaths'], loc =\"upper left\", fontsize=15)\nplt.show()","c2efac51":"df['Cum_Cases'] = df['Cases'].cumsum()\ndf['Cum_Deaths'] = df['Deaths'].cumsum()\ndf['Cum_Recovered'] = df['Recovered'].cumsum()","d9f03d1a":"plt.figure(figsize= (20,15))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Recovered, Death Cases in Pakistan\" , fontsize = 30)\n\na = df.groupby('Date')['Cum_Cases'].sum().index \nb = df.groupby('Date')['Cum_Cases'].sum().values\nplt.plot(a,b, marker = 'o',ls='--',lw=2,color='black')\n\nx = df.groupby('Date')['Cum_Recovered'].sum().index\ny = df.groupby('Date')['Cum_Recovered'].sum().values\nplt.plot(x,y, marker = 'o', ls='dashdot',lw=2,color='green')\n\n\nc = df.groupby('Date')['Cum_Deaths'].sum().index \nd = df.groupby('Date')['Cum_Deaths'].sum().values\nplt.plot(c,d, marker = 'o', ls='dashdot',lw=2,color='red')\n\n\nplt.legend([\"Cum_Cases\", 'Cum_Recovered', 'Cum_Deaths'], loc =\"upper left\", fontsize=15)\nplt.show()","c26201fd":"def short(x):\n    if x == 'Islamabad Capital Territory':\n        return 'ISB'\n    elif x == 'Sindh':\n        return 'SD'\n    elif x == 'Gilgit-Baltistan':\n        return 'GB'\n    elif x == 'Baluchistan':\n        return 'BL'\n    elif x == 'Punjab':\n        return 'PJ'\n    elif x == 'Khyber Pakhtunkhwa':\n        return 'KPK'\n    elif x == 'Azad Jummu Kashmir':\n        return 'AJK'\n    else:\n        return 'FATA'\n    \n\ndf['Province_Acr'] = df['Province'].apply(short)","6f1062ea":"plt.figure(figsize=(15,10))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Province\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\n\na = df.groupby('Province_Acr')['Cases'].sum().sort_values(ascending=False).index \nb = df.groupby('Province_Acr')['Cases'].sum().sort_values(ascending=False).values\nplt.bar(a,b)\n\nx = df.groupby('Province_Acr')['Recovered'].sum().sort_values(ascending=False).index\ny = df.groupby('Province_Acr')['Recovered'].sum().sort_values(ascending=False).values\nplt.bar(x,y,)\n\n\nc = df.groupby('Province_Acr')['Deaths'].sum().sort_values(ascending=False).index \nd = df.groupby('Province_Acr')['Deaths'].sum().sort_values(ascending=False).values\nplt.bar(c,d)\n\n\nplt.legend([\"Cases\", 'Recovered', 'Deaths'], loc =\"upper right\", fontsize = 15)\n\nplt.show()","e70757be":"plt.figure(figsize=(15,9))\n\nsns.set(font_scale=1)\nsns.relplot(x=\"Province_Acr\", y=\"Travel_history\", size=\"Cases\",\n            sizes=(10, 1500), alpha=.5, color='r',\n            height=8, aspect=1.6 , data=df).tight_layout()\nplt.show()","d4255360":"df['Case_Growth_Rate'] = df['Cases'].pct_change()\n\nplt.figure(figsize=(15,8))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Date\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\n\nx = df['Date']\ny = df['Case_Growth_Rate']\n\nplt.bar(x,y, color = 'Salmon', width = 1.2)\n\nplt.show()","3f246af8":"df['Active_Cases'] = df['Cum_Cases'] - df['Recovered'] - df['Deaths']\n\ncorona_data = df.groupby(['Date'])['Cases', 'Recovered',\n                                   'Active_Cases','Deaths', \n                                   'Cum_Cases'].sum().reset_index().sort_values('Date',ascending=False)\ncorona_data['Mortality Rate'] = ((corona_data['Deaths']\/corona_data['Cum_Cases'])*100)\ncorona_data['Recovery Rate'] = ((corona_data['Recovered']\/corona_data['Cum_Cases'])*100)","ed06c532":"plt.figure(figsize=(15,9))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.plot(corona_data['Date'], corona_data['Mortality Rate'], marker = 'o', ls='dashdot',lw=2,color='Crimson' )\n\nplt.show()","754336da":"plt.figure(figsize=(15,9))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\n\nplt.plot(corona_data['Date'], corona_data['Recovery Rate'], marker = 'o', ls='dashdot',lw=2,color='Indigo' )\n\nplt.show()","f0b5917f":"cord = pd.read_csv('\/kaggle\/input\/pakistan-corona-virus-citywise-data\/covid_cases_city_coordinates.csv')\ndf = df.merge(cord, how='left', on='City').copy()","7f6583a0":"df['Date_S'] = df['Date'].astype(str)\n\nfig = px.density_mapbox(df, \n                        lat=\"Latitude (generated)\", \n                        lon=\"Longitude (generated)\", \n                        hover_name=\"City\", \n                        hover_data=[\"Cum_Cases\",\"Cum_Deaths\",\"Cum_Recovered\"], \n                        animation_frame=\"Date_S\",\n                        color_continuous_scale=\"Portland\",\n                        radius=20, \n                        zoom=4.5,height=750)\nfig.update_layout(title='Pakistan Corona Virus Cases Time Lapse - Confirmed, Deaths, Recovered',\n                  font=dict(family=\"Courier New, monospace\",\n                            size=18,\n                            color=\"#7f7f7f\")\n                 )\nfig.update_layout(mapbox_style=\"open-street-map\", mapbox_center_lon=70, mapbox_center_lat=31)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\n\n\nfig.show()","6ebefad8":"sns.set(font_scale=2.7)\ng = sns.FacetGrid(df, col=\"Province\", height=11, aspect=1.2, col_wrap=2, margin_titles=True)\ng.map(sns.lineplot,'Date', 'Cases', color='red', label='New Case', ls='--', lw=4)\ng.map(sns.lineplot,'Date', 'Recovered', color='DarkOliveGreen', label='New Recovered', ls='-.', lw=4)\ng.set_xticklabels(rotation=90)\ng.tight_layout()\ng.set_ylabels('Total Cases')\ng.add_legend()\n\ng.fig.subplots_adjust(top=0.9)\ng.fig.suptitle('Daily Cases vs Daily Recovery', x=0.45, y=0.95, fontsize=50)\n\nplt.show()","e5fd49b3":"d_new = df.groupby('Date')['Active_Cases'].sum().reset_index()\nd_new.columns = ['ds', 'y']\n\nm = Prophet()\nm.fit(d_new)\n\nfuture = m.make_future_dataframe(periods=30)\nforecast = m.predict(future)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter( x = forecast['ds'], y = forecast['yhat'],\n                        mode='lines+markers',name='Predicted Cases',marker_color='DarkSlateGray'))\nfig.add_trace(go.Scatter( x = d_new['ds'], y = d_new['y'],\n                        mode='lines+markers',name='Actual Cases',marker_color='Tomato'))","6e00c1df":"d_new = df.groupby('Date')['Deaths'].sum().reset_index()\nd_new.columns = ['ds', 'y']\n\nm = Prophet()\nm.fit(d_new)\n\nfuture = m.make_future_dataframe(periods=30)\nforecast = m.predict(future)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter( x = forecast['ds'], y = forecast['yhat'],\n                        mode='lines+markers',name='Predicted Cases',marker_color='FireBrick'))\nfig.add_trace(go.Scatter( x = d_new['ds'], y = d_new['y'],\n                        mode='lines+markers',name='Actual Cases',marker_color='DarkBlue'))","db781fb6":"d_new = df.groupby('Date')['Recovered'].sum().reset_index()\nd_new.columns = ['ds', 'y']\n\nm = Prophet()\nm.fit(d_new)\n\nfuture = m.make_future_dataframe(periods=30)\nforecast = m.predict(future)\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter( x = forecast['ds'], y = forecast['yhat'],\n                        mode='lines+markers',name='Predicted Cases',marker_color='Green'),)\nfig.add_trace(go.Scatter( x = d_new['ds'], y = d_new['y'],\n                        mode='lines+markers',name='Actual Cases',marker_color='Gold'))","d97ec464":"## Mortality Rate","16eca8c4":"Forecasting of Total Cases for Next 30 Days.","b7161166":"We also have other data whose travel history is set to 'Unknown'. Therefore we also will set our missing values to 'Unknown'.","69027975":"## City Wise Cases","cf7277c4":"Checking if there's any need to clean Travel History and City Data.","1d062170":"### Getting Information about the Data","5403ae00":"## Recovery Rate","65be74be":"#### Do let me know if you find this notebook helpful.... Thanks","08438183":"## Cases and Travel History Relation","3bab1ffb":"We can see couple of provinces typed with different spelling. So we have to correct them first.","4a497e73":"### Loading and Understanding the Data","77305dd1":"Forecasting of Deaths for Next 30 Days.","089574bb":"### Loading City Coordinates","4da92eec":"## Forecasting","f870199a":"## Case Growth Rate","deea5117":"## Plotting Cummulative Cases","778397a6":"## New, Recovered and Deaths Cases Per Day","7a6eaef7":"## Pakistan Corona Case Time Lapse","da4be6c0":"#### Checking Missing Values","e8edd40c":"## Province Wise - Daily Cases vs Daily Recovery","d9f11f29":"Sorting DataFrame w.r.t to Dates","af609b71":"Only travel history has null values","d3987021":"Forecasting of Cured for Next 30 Days","cfbb2279":"Setting short form for Cities Name."}}