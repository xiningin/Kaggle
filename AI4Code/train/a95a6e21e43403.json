{"cell_type":{"d5a42ef6":"code","fb8ccc1e":"code","64668292":"code","b9055b41":"code","c493dd94":"code","5ad7162a":"code","66efda0b":"code","f5f7516c":"code","5384e2f2":"code","d8413697":"code","c7166f18":"code","bdccc430":"code","6fcd189c":"code","f4bafbbb":"code","97f4e3ce":"markdown","6f0f2b18":"markdown","3e288cd6":"markdown","3e5fcacc":"markdown","bf04e5a1":"markdown","8dafa677":"markdown","d1ac5b7a":"markdown","e3a67d18":"markdown","1b42c202":"markdown","8831d9f2":"markdown","3b989054":"markdown","8e9e4fbc":"markdown","21d8683d":"markdown","e5b2c765":"markdown","3802213f":"markdown","b7611a03":"markdown","ac640611":"markdown","5a980d50":"markdown"},"source":{"d5a42ef6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb8ccc1e":"import matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns\nfrom colorama import Fore, Back, Style \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nfrom statsmodels.formula.api import ols\nimport plotly.graph_objs as gobj\n\ninit_notebook_mode(connected=True)\nwarnings.filterwarnings(\"ignore\")\nimport plotly.figure_factory as ff\n\n%matplotlib inline\n\nimport xgboost\nimport pandas as pd\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom xgboost import plot_importance","64668292":"df = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\nprint(df.shape)\ndf.head()","b9055b41":"df.isnull().sum()","c493dd94":"categorical_columns = ['sex', 'smoking', 'diabetes', 'anaemia', 'high_blood_pressure', 'DEATH_EVENT']\nreal_number_columns = list(set(df.columns)-set(categorical_columns))","5ad7162a":"# support function for categorical columns analysis\ndef get_data_for_visualize_categorical_columns(data, column):\n    '''\n    Params:\n        data: pd.DataFrame\n    '''\n    death_colum = 'DEATH_EVENT'\n    unique_vals = data[column].unique().tolist()\n    labels = []\n    death_means = []\n    survived_means = []\n    label_template = column + '{}_{}'\n    for val in unique_vals:\n        temp_data = data[data[column]==val]\n        labels.append(val)\n        for death_event in data[death_colum].unique():\n            # death\n            if death_event == 1:\n                death_means.append(temp_data[temp_data[death_colum]==death_event].shape[0])\n            # survived\n            else:\n                survived_means.append(temp_data[temp_data[death_colum]==death_event].shape[0])\n            #labels.append(label_template.format(val, death_event))\n#     death_std = np.zeros(len(death_means))\n#     survived_std = np.zeros(len(death_means))\n    return death_means, survived_means, labels\n            \n    \n    ","66efda0b":"death_means, survived_means, labels = get_data_for_visualize_categorical_columns(df, 'sex')\nprint(labels, death_means, survived_means)\nfor i in range(len(labels)):\n    if labels[i]==1:\n        labels[i] = 'Male'\n    else:\n        labels[i]='Female'\n        \nfig, ax = plt.subplots(2,3, figsize=(24,10))\nwidth=0.35   \nax[0][0].bar(labels, death_means, width, label='death')\nax[0][0].bar(labels, survived_means, width, bottom=death_means, label='survived')\nax[0][0].set_ylabel('Number of patients')\nax[0][0].set_title('Stacked bar chart about relationship between gender and death event')\nax[0][0].legend()\n\nax[0][1].pie(death_means,labels=labels, autopct='%1.1f%%')\nax[0][1].set_title('Pie chart: probability of gender when a death event happened')\n\nax[0][2].pie(survived_means,labels=labels, autopct='%1.1f%%')\nax[0][2].set_title('Pie chart: probability of gender when a death event not happen')\n\nax[1][0].pie([death_means[0], survived_means[0]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][0].set_title('Pie chart: probability of death event when patient is male')\n\nax[1][1].pie([death_means[1], survived_means[1]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][1].set_title('Pie chart: probability of death event when patient is female')\nplt.show()","f5f7516c":"death_means, survived_means, labels = get_data_for_visualize_categorical_columns(df, 'smoking')\nprint(labels, death_means, survived_means)\nfor i in range(len(labels)):\n    if labels[i]==1:\n        labels[i] = 'smoke'\n    else:\n        labels[i]='not smoke'\nprint(labels, death_means, survived_means)      \nfig, ax = plt.subplots(2,3, figsize=(24,10))\nwidth=0.35   \nax[0][0].bar(labels, death_means, width, label='death')\nax[0][0].bar(labels, survived_means, width, bottom=death_means, label='survived')\nax[0][0].set_ylabel('Number of patients')\nax[0][0].set_title('Stacked bar chart about relationship between smocking and death event')\nax[0][0].legend()\n\nax[0][1].pie(death_means,labels=labels, autopct='%1.1f%%')\nax[0][1].set_title('Pie chart: probability of smocking when a death event happened')\n\nax[0][2].pie(survived_means,labels=labels, autopct='%1.1f%%')\nax[0][2].set_title('Pie chart: probability of smocking when a death event not happen')\n\nax[1][0].pie([death_means[0], survived_means[0]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][0].set_title('Pie chart: probability of death event when patient is not smocking')\n\nax[1][1].pie([death_means[1], survived_means[1]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][1].set_title('Pie chart: probability of death event when patient is smocking')\n\nplt.show()","5384e2f2":"death_means, survived_means, labels = get_data_for_visualize_categorical_columns(df, 'diabetes')\nprint(labels, death_means, survived_means)\nfor i in range(len(labels)):\n    if labels[i]==1:\n        labels[i] = 'diabetes'\n    else:\n        labels[i]='not diabetes'\nprint(labels, death_means, survived_means)      \nfig, ax = plt.subplots(2,3, figsize=(24,10))\nwidth=0.35   \nax[0][0].bar(labels, death_means, width, label='death')\nax[0][0].bar(labels, survived_means, width, bottom=death_means, label='survived')\nax[0][0].set_ylabel('Number of patients')\nax[0][0].set_title('Stacked bar chart about relationship between diabetes and death event')\nax[0][0].legend()\n\nax[0][1].pie(death_means,labels=labels, autopct='%1.1f%%')\nax[0][1].set_title('Pie chart: probability of diabetes when a death event happened')\n\nax[0][2].pie(survived_means,labels=labels, autopct='%1.1f%%')\nax[0][2].set_title('Pie chart: probability of diabetes when a death event not happen')\n\nax[1][0].pie([death_means[0], survived_means[0]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][0].set_title('Pie chart: probability of death event when patient is not diabetes')\n\nax[1][1].pie([death_means[1], survived_means[1]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][1].set_title('Pie chart: probability of death event when patient is diabetes')\n\nplt.show()","d8413697":"death_means, survived_means, labels = get_data_for_visualize_categorical_columns(df, 'anaemia')\nprint(labels, death_means, survived_means)\nfor i in range(len(labels)):\n    if labels[i]==1:\n        labels[i] = 'anaemia'\n    else:\n        labels[i]='not anaemia'\nprint(labels, death_means, survived_means)      \nfig, ax = plt.subplots(2,3, figsize=(24,10))\nwidth=0.35   \nax[0][0].bar(labels, death_means, width, label='death')\nax[0][0].bar(labels, survived_means, width, bottom=death_means, label='survived')\nax[0][0].set_ylabel('Number of patients')\nax[0][0].set_title('Stacked bar chart about relationship between anaemia and death event')\nax[0][0].legend()\n\nax[0][1].pie(death_means,labels=labels, autopct='%1.1f%%')\nax[0][1].set_title('Pie chart: probability of anaemia when a death event happened')\n\nax[0][2].pie(survived_means,labels=labels, autopct='%1.1f%%')\nax[0][2].set_title('Pie chart: probability of anaemia when a death event not happen')\n\nax[1][0].pie([death_means[0], survived_means[0]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][0].set_title('Pie chart: probability of death event when patient is not anaemia')\n\nax[1][1].pie([death_means[1], survived_means[1]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][1].set_title('Pie chart: probability of death event when patient is anaemia')\n\nplt.show()","c7166f18":"death_means, survived_means, labels = get_data_for_visualize_categorical_columns(df, 'high_blood_pressure')\nprint(labels, death_means, survived_means)\nfor i in range(len(labels)):\n    if labels[i]==1:\n        labels[i] = 'high_blood_pressure'\n    else:\n        labels[i]='not high_blood_pressure'\nprint(labels, death_means, survived_means)      \nfig, ax = plt.subplots(2,3, figsize=(24,10))\nwidth=0.35   \nax[0][0].bar(labels, death_means, width, label='death')\nax[0][0].bar(labels, survived_means, width, bottom=death_means, label='survived')\nax[0][0].set_ylabel('Number of patients')\nax[0][0].set_title('Stacked bar chart about relationship between high_blood_pressure and death event')\nax[0][0].legend()\n\nax[0][1].pie(death_means,labels=labels, autopct='%1.1f%%')\nax[0][1].set_title('Pie chart: probability of high_blood_pressure when a death event happened')\n\nax[0][2].pie(survived_means,labels=labels, autopct='%1.1f%%')\nax[0][2].set_title('Pie chart: probability of high_blood_pressure when a death event not happen')\n\nax[1][0].pie([death_means[0], survived_means[0]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][0].set_title('Pie chart: probability of death event when patient is high_blood_pressure')\n\nax[1][1].pie([death_means[1], survived_means[1]],labels=['Death', 'Survived'], autopct='%1.1f%%')\nax[1][1].set_title('Pie chart: probability of death event when patient is not high_blood_pressure')\n\nplt.show()","bdccc430":"# refer https:\/\/www.kaggle.com\/nayansakhiya\/heart-fail-analysis-and-quick-prediction-96-rate\/notebook\nsurv = df[df[\"DEATH_EVENT\"]==0][\"age\"]\nnot_surv = df[df[\"DEATH_EVENT\"]==1][\"age\"]\nhist_data = [surv,not_surv]\ngroup_labels = ['Survived', 'Death']\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(\n    title_text=\"Analysis in Age on Survival Status\")\nfig.show()","6fcd189c":"# refer https:\/\/www.kaggle.com\/nayansakhiya\/heart-fail-analysis-and-quick-prediction-96-rate\/notebook\n\nfig = px.violin(df, y=\"age\", x=\"sex\", color=\"DEATH_EVENT\", box=True, points=\"all\", hover_data=df.columns)\nfig.update_layout(title_text=\"Analysis in Age and Gender on Survival Status\")\nfig.show()\n#0: female, 1: male ","f4bafbbb":"# create dataset \ncols = ['sex', 'smoking', 'diabetes', 'anaemia', 'high_blood_pressure', 'age', 'ejection_fraction',\n              'platelets', 'serum_creatinine', 'serum_sodium']\n# cols = ['ejection_fraction','serum_creatinine', 'serum_sodium','age', 'high_blood_pressure', 'platelets', 'sex']\ny = df['DEATH_EVENT']\n\nx = df[cols]\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.3, random_state=1111)\n\n# build xgboost model \n# params = {\n#     'gamma': [0.5, 1, 1.5, 2, 5],\n#     'subsample': [0.6, 0.8, 1.0],\n#     'colsample_bytree': [0.6, 0.8, 1.0],\n#     'max_depth': [3, 4, 5],\n#     'learning_rate':[0.1, 0.01, 0.001], \n#     'n_estimators':[20, 50, 100, 300],\n# }\n\nfolds = 3\nparam_comb = 5\n\n# skf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)\nclf = xgboost.XGBClassifier(\n    eval_metric = 'auc',\n    nthread = -1,\n    max_depth=5,\n    subsample=0.5,\n    n_estimators=4,\n    gamma=0.001,\n#     random_state=3\n)\nclf.fit(x_train,y_train)\n\n# grid_search = GridSearchCV(clf, param_grid=params,\n#                             scoring='roc_auc', n_jobs=-1, \n#                             verbose=3)\n# grid_search.fit(x_train,y_train)\n\npred = clf.predict(x_test)\nprint(accuracy_score(clf.predict(x_train), y_train))\nprint(accuracy_score(pred, y_test))\nprint(roc_auc_score(pred, y_test))\nplot_importance(clf)\n\ncm = confusion_matrix(y_test, pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.title(\"Gredient Boosting Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","97f4e3ce":"## age vs death event ","6f0f2b18":"# Build predict model","3e288cd6":"## anaemia vs deadth event","3e5fcacc":"# analysis each column vs DEATH_EVENT","bf04e5a1":"## age vs gender vs death event ","8dafa677":"* t\u1ec9 l\u1ec7 ra \u0111i khi m\u1ed9t ng\u01b0\u1eddi l\u00e0 nam ho\u1eb7c n\u1eef c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t kh\u00f4ng \u0111\u00e1ng k\u1ec3 (2 bi\u1ec3u \u0111\u1ed3 qu\u1ea1t \u1edf d\u01b0\u1edbi)\n* trong d\u1eef li\u1ec7u hi\u1ec7n c\u00f3, t\u1ec9 l\u1ec7 nam \u00e1p \u0111\u1ea3o (~64%)","d1ac5b7a":"## diabetes vs deadth event ","e3a67d18":"* Sex - Gender of patient Male = 1, Female =0\n* Age - Age of patient\n* Diabetes - 0 = No, 1 = Yes\n* Anaemia - 0 = No, 1 = Yes\n* High_blood_pressure - 0 = No, 1 = Yes\n* Smoking - 0 = No, 1 = Yes\n* DEATH_EVENT - 0 = No, 1 = Yes","1b42c202":"* ph\u1ea7n l\u1edbn b\u00eanh nh\u00e2n \u0111\u1ec1u ko thi\u1ebfu m\u00e1u, tuy nhi\u00ean s\u1ef1 kh\u00e1c bi\u1ec7t l\u00e0 kh\u00e1 nh\u1ecf (55%~45%)\n* thi\u1ebfu m\u00e1u l\u00e0m t\u0103ng nguy c\u01a1 t\u1eed vong do suy tim (35.7% death khi thi\u1ebfu m\u00e1u, 29.4% s\u1ed1ng s\u00f3t n\u1ebfu ko thi\u1ebfu m\u00e1u)","8831d9f2":"* ph\u1ea7n l\u1edbn b\u1ec7nh nh\u00e2n trong data ko b\u1ecb huy\u1ebft \u00e1p cao (x\u1ea5p x\u1ec9 63~64%)\n* khi b\u1ecb huy\u1ebft \u00e1p cao, t\u1ec9 l\u1ec7 suy tim cao h\u01a1n h\u1eb3n (hai bi\u1ec3u \u0111\u1ed3 qu\u1ea1t d\u01b0\u1edbi c\u00f9ng 37% > 29.4%)","3b989054":"* ph\u00e2n ph\u1ed1i x\u00e1c su\u1ea5t c\u1ee7a n\u1eef gi\u1edbi cho th\u1ea5y c\u00f3 s\u1ef1 \u0111\u1ed3ng \u0111\u1ec1u v\u1ec1 t\u1ec9 l\u1ec7 death v\u00e0 survived. S\u1ef1 kh\u00e1c bi\u1ec7t nho nh\u1ecf l\u00e0 n\u1eef gi\u1edbi trong giai do\u1ea1n 53-60 th\u00ec death \u0111\u1ea1t \u0111\u1ec9nh, 60-70 th\u00ec survived \u0111\u1ea1t \u0111\u1ec9nh \n* nam gi\u1edbi death \u0111\u1ea1t \u0111\u1ec9nh 60-70, survived \u0111\u1ea1t \u0111\u1ec9nh 50-62","8e9e4fbc":"## high_blood_pressure vs death event","21d8683d":"* c\u0169ng gi\u1ed1ng nh\u01b0 ph\u1ea7n tr\u01b0\u1edbc, vi\u1ec7c h\u00fat thu\u1ed1c hay ko ko l\u00e0m cho t\u1ec9 l\u1ec7 death cao h\u01a1n hay th\u1ea5p h\u01a1n \u0111\u00e1ng k\u1ec3 \n* s\u1ed1 l\u01b0\u1ee3ng ng ko h\u00fat thu\u1ed1c kh\u00e1 cao, (~67%)\n* h\u01a1i ng\u01b0\u1ee3c so v\u1edbi th\u1ef1c t\u1ebf khi cta ngh\u0129 h\u00fat thu\u1ed1c s\u1ebd l\u00e0m t\u0103ng kh\u1ea3 n\u0103g l\u00ean b\u00e0n th\u1edd v\u00e0 g\u00e2y ra nhi\u1ec1u t\u00e1c d\u1ee5ng ph\u1ee5 l\u00ean tim m\u1ea1ch. Ho\u1eb7c c\u0169ng c\u00f3 th\u1ec3 do d\u1eef li\u1ec7u ch\u01b0a \u0111\u1ee7 nhi\u1ec1u. ","e5b2c765":"# input data","3802213f":"* ph\u1ea7n l\u1edbn b\u00eanh nh\u00e2n trong data b\u1ecb ti\u1ec3u \u0111\u01b0\u1eddng (~58%)\n* t\u1ec9 l\u1ec7 ra \u0111i do suy tim kh\u00f4ng thay \u0111\u1ed5i nhi\u1ec1u l\u1eafm khi b\u1ec7nh nh\u00e2n c\u00f3 b\u1ecb ti\u1ec3u \u0111\u01b0\u1eddng hay ko (~32%)\n","b7611a03":"## sex vs DEATH_EVENT","ac640611":"* t\u1eeb 40~70 tu\u1ed5i c\u00f3 v\u1ebb s\u1ed1 l\u01b0\u1ee3ng s\u1ed1ng s\u00f3t kh\u00e1c nhi\u1ec1u so v\u1edbi ph\u1ea7n c\u00f2n l\u1ea1i \n* death event tr\u1ea3i d\u00e0i qua m\u1ecdi l\u1ee9a tu\u1ed5i (sadness :'( )","5a980d50":"## smoking vs death event"}}