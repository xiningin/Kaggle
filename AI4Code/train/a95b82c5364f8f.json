{"cell_type":{"04ca968c":"code","b035ee77":"code","f15766fe":"code","904bc3a6":"code","6fb50f40":"code","47f18cd3":"code","c6a0c62d":"code","5b05634e":"code","348018b4":"code","af14c6df":"code","0bf9c689":"code","a2bfee7e":"code","facc5d24":"code","11b2ca9a":"code","8bc20597":"code","f57cbb44":"code","cb59373b":"code","0a8b2afd":"code","9f124ea5":"code","d6027da5":"code","709cfb60":"code","833671db":"code","e0273f4c":"code","bee7914a":"code","058812f6":"code","16c395d8":"code","56db4401":"code","51b874de":"code","69409f33":"code","69f6d99f":"code","d06d8854":"code","ab29b566":"code","b78af44b":"code","4de5cb66":"code","114fa7bf":"code","89f72a00":"code","c39c6d44":"code","83e84828":"code","7ab940f0":"code","7bf6cc3a":"code","1f3ab8d3":"code","7377ba63":"code","16611e45":"code","67aabe6e":"code","f9383525":"markdown","bdde20c4":"markdown","83baeb44":"markdown","25ffac5a":"markdown","c43f3578":"markdown","30b092a9":"markdown","abd56ba6":"markdown","7928f602":"markdown","37dde276":"markdown","7188323b":"markdown","905b70bd":"markdown","92251175":"markdown","a092f405":"markdown","b3b710bc":"markdown","26f4007d":"markdown","f852a653":"markdown","56cb5112":"markdown","6fb4ea16":"markdown","7fa8223a":"markdown","31ab684d":"markdown","11d00ace":"markdown"},"source":{"04ca968c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, plot_mpl\nimport plotly.offline as py\ninit_notebook_mode(connected=True)\nplt.rcParams.update({'font.size': 14})","b035ee77":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Deaths.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')","f15766fe":"# Drop date columns if they are mostly NaN\nna_columns = (confirmed_df.isna().sum() \/ confirmed_df.shape[0]) > 0.99\nna_columns = na_columns[na_columns]\n\nconfirmed_df = confirmed_df.drop(na_columns.index, axis=1)\ndeaths_df = deaths_df.drop(na_columns.index, axis=1)\nrecoveries_df = recoveries_df.drop(na_columns.index, axis=1)","904bc3a6":"## Tidy up the data\nconfirmed_df = confirmed_df.melt(id_vars=['Country\/Region', 'Province\/State', 'Lat', 'Long'], var_name='date', value_name='confirmed')\ndeaths_df = deaths_df.melt(id_vars=['Country\/Region', 'Province\/State', 'Lat', 'Long'], var_name='date', value_name='deaths')\nrecoveries_df = recoveries_df.melt(id_vars=['Country\/Region', 'Province\/State', 'Lat', 'Long'], var_name='date', value_name='recoveries')","6fb50f40":"confirmed_df['date'] = pd.to_datetime(confirmed_df['date'])\ndeaths_df['date'] = pd.to_datetime(deaths_df['date'])\nrecoveries_df['date'] = pd.to_datetime(recoveries_df['date'])","47f18cd3":"full_df = confirmed_df.merge(recoveries_df).merge(deaths_df)\nfull_df = full_df.rename(columns={'Country\/Region': 'Country', 'date': 'Date', 'confirmed': \"Confirmed\", \"recoveries\": \"Recoveries\", \"deaths\": \"Deaths\"})\n# Check null values\nfull_df.isnull().sum()","c6a0c62d":"world_df = full_df.groupby(['Date']).agg({'Confirmed': ['sum'], 'Recoveries': ['sum'], 'Deaths': ['sum']}).reset_index()\nworld_df.columns = world_df.columns.get_level_values(0)\n\ndef add_rates(df):\n    df['Confirmed Change'] = df['Confirmed'].diff().shift(-1)\n \n    df['Mortality Rate'] = df['Deaths'] \/ df['Confirmed']\n    df['Recovery Rate'] = df['Recoveries'] \/ df['Confirmed']\n    df['Growth Rate'] = df['Confirmed Change'] \/ df['Confirmed']\n    df['Growth Rate Change'] = df['Growth Rate'].diff().shift(-1)\n    df['Growth Rate Accel'] = df['Growth Rate Change'] \/ df['Growth Rate']\n    return df\n\nworld_df = add_rates(world_df)","5b05634e":"def plot_aggregate_metrics(df, fig=None):\n    if fig is None:\n        fig = go.Figure()\n    fig.update_layout(template='plotly_dark')\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Confirmed'],\n                             mode='lines+markers',\n                             name='Confirmed',\n                             line=dict(color='Yellow', width=2)\n                            ))\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Deaths'],\n                             mode='lines+markers',\n                             name='Deaths',\n                             line=dict(color='Red', width=2)\n                            ))\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Recoveries'],\n                             mode='lines+markers',\n                             name='Recoveries',\n                             line=dict(color='Green', width=2)\n                            ))\n    return fig","348018b4":"plot_aggregate_metrics(world_df).show()","af14c6df":"def plot_diff_metrics(df, fig=None):\n    if fig is None:\n        fig = go.Figure()\n\n    fig.update_layout(template='plotly_dark')\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Mortality Rate'],\n                             mode='lines+markers',\n                             name='Mortality rate',\n                             line=dict(color='red', width=2)))\n\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Recovery Rate'],\n                             mode='lines+markers',\n                             name='Recovery rate',\n                             line=dict(color='Green', width=2)))\n\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Growth Rate'],\n                             mode='lines+markers',\n                             name='Growth rate confirmed',\n                             line=dict(color='Yellow', width=2)))\n    fig.update_layout(yaxis=dict(tickformat=\".2%\"))\n    \n    return fig","0bf9c689":"plot_diff_metrics(world_df).show()","a2bfee7e":"fig = go.Figure()\nfig.update_layout(template='plotly_dark')\n\ntmp_df = world_df.copy()\ntmp_df = tmp_df[tmp_df['Growth Rate Accel'] < 10]\n\nfig.add_trace(go.Scatter(x=tmp_df['Date'], \n                         y=tmp_df['Growth Rate Accel'],\n                         mode='lines+markers',\n                         name='Growth Acceleration',\n                         line=dict(color='Green', width=3)))\nfig.update_layout(yaxis=dict(tickformat=\".2%\"))\n\nfig.show()","facc5d24":"confirmed_by_country_df = full_df.groupby(['Date', 'Country']).sum().reset_index()","11b2ca9a":"fig = px.line(confirmed_by_country_df, x='Date', y='Confirmed', color='Country', line_group=\"Country\", hover_name=\"Country\")\nfig.update_layout(template='plotly_dark')\nfig.show()","8bc20597":"# Log scale to allow for view\n#  (1) of countries other than China, and\n#  (2) identifying linear sections, which indicate exponential growth\nfig = px.line(confirmed_by_country_df, x='Date', y='Confirmed', color='Country', line_group=\"Country\", hover_name=\"Country\")\nfig.update_layout(\n    template='plotly_dark',\n    yaxis_type=\"log\"\n)\nfig.show()","f57cbb44":"confirmed_by_country_df.groupby('Country').max().sort_values(by='Confirmed', ascending=False)[:10]","cb59373b":"k_layout_kwargs = {\n    'font': dict(size=12,),\n    'legend': dict(x=0, y=-0.7),\n}","0a8b2afd":"us_df = confirmed_by_country_df[confirmed_by_country_df['Country'] == 'US'].copy()\nus_df = add_rates(us_df)","9f124ea5":"tmp_df = us_df[us_df['Confirmed'] > 100]\n\nplot_aggregate_metrics(tmp_df).show()","d6027da5":"plot_diff_metrics(tmp_df).show()","709cfb60":"from sklearn.linear_model import LinearRegression\n\nus_growth_rates = {}\n\nus_n_days_to_fit = 5\nconfirmed_us_df = confirmed_by_country_df[(confirmed_by_country_df['Country'] == 'US') & (confirmed_by_country_df['Date'] >= (np.datetime64('today') - np.timedelta64(us_n_days_to_fit,'D')))]\n\nx = (confirmed_us_df['Date'] - confirmed_us_df['Date'].min()).dt.days.to_numpy().reshape(-1, 1)\ny = np.log(confirmed_us_df['Confirmed'])\nreg = LinearRegression().fit(x, y)\nprint(f\"Model fit score: {reg.score(x, y):.2f}\")\nprint(f\"Growth rate: {reg.coef_[0]:.3f}\")\nus_growth_rates[us_n_days_to_fit] = reg.coef_[0]\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=x[:,0],\n        y=np.exp(y),\n        name='U.S.'\n    )\n)\n\nxx = np.linspace(0, len(x[:,0]) + 14, 100)  # Forecast 14 days out\nyy = reg.predict(xx.reshape(-1,1))\n\nfig.add_trace(\n    go.Scatter(\n        x=xx,\n        y=np.exp(yy),\n        name='U.S. - Exponential fit',\n        mode='lines',\n    )\n)\n\nfig.update_layout(\n    title=f\"Exponential Model of U.S. Confirmed Cases<br>(fit to last {us_n_days_to_fit} days) with 14-Day Extrapolation\",\n    xaxis_title=f\"Days since {confirmed_us_df['Date'].min()}\",\n    yaxis_title=\"Number of Confirmed Cases\",\n    yaxis_type=\"log\",\n    **k_layout_kwargs,\n)\n\nfig.show()","833671db":"n_days_to_fit = 4\nconfirmed_us_df = confirmed_by_country_df[(confirmed_by_country_df['Country'] == 'US') & (confirmed_by_country_df['Date'] >= (np.datetime64('today') - np.timedelta64(n_days_to_fit,'D')))]\n\nx = (confirmed_us_df['Date'] - confirmed_us_df['Date'].min()).dt.days.to_numpy().reshape(-1, 1)\ny = np.log(confirmed_us_df['Confirmed'])\nreg = LinearRegression().fit(x, y)\nprint(f\"Model fit score: {reg.score(x, y):.2f}\")\nprint(f\"Growth rate: {reg.coef_[0]:.3f}\")\nus_growth_rates[us_n_days_to_fit] = reg.coef_[0]\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=confirmed_by_country_df[confirmed_by_country_df['Country'] == 'US']['Date'],\n        y=confirmed_by_country_df[confirmed_by_country_df['Country'] == 'US']['Confirmed'],\n        name='U.S.',\n        line=dict(width=4)\n    )\n)\n\npredict_days_out = 7*2\n\nexponential_fit_date_range = pd.date_range(confirmed_us_df['Date'].min(), confirmed_us_df['Date'].max() + np.timedelta64(predict_days_out,'D'))\n\nxx = np.linspace(0, len(x[:,0]) + predict_days_out, exponential_fit_date_range.shape[0])  # Forecast 14 days out\nyy = reg.predict(xx.reshape(-1,1))\n\nfig.add_trace(\n    go.Scatter(\n        x=exponential_fit_date_range,\n        y=np.exp(yy),\n        name='U.S. - Exponential fit',\n        mode='lines'\n    )\n)\n\nfig.update_layout(\n    title=f\"Exponential Model of U.S. Confirmed Cases<br>(fit to last {us_n_days_to_fit} days) with {predict_days_out}-Day Extrapolation\",\n    xaxis_title=f\"Date\",\n    yaxis_title=\"Number of Confirmed Cases\",\n    yaxis_type=\"log\",\n    **k_layout_kwargs,\n)\n\nfig.show()","e0273f4c":"proxy_country = 'Italy'\n\nconfirmed_iran_df = confirmed_by_country_df[(confirmed_by_country_df['Country'] == proxy_country) & (confirmed_by_country_df['Confirmed'] >= 100)]\n\nx = (confirmed_iran_df['Date'] - confirmed_iran_df['Date'].min()).dt.days.to_numpy().reshape(-1, 1)\ny = np.log(confirmed_iran_df['Confirmed'])\nreg = LinearRegression().fit(x, y)\nprint(f\"Model fit score: {reg.score(x, y):.2f}\")\nprint(f\"Growth rate: {reg.coef_[0]:.3f}\")\niran_growth_rate = reg.coef_[0]\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=x[:,0],\n        y=np.exp(y),\n        name=proxy_country\n    )\n)\n\nxx = np.linspace(0, len(x[:,0]) + 14, 100)  # Forecast 14 days out\nyy = reg.predict(xx.reshape(-1,1))\n\nfig.add_trace(\n    go.Scatter(\n        x=xx,\n        y=np.exp(yy),\n        name=f'{proxy_country} - Exponential fit'\n    )\n)\n\nfig.update_layout(\n    title=f\"Exponential Model of {proxy_country} Confirmed Cases<br>with 14-Day Extrapolation\",\n    xaxis_title=f\"Days since {confirmed_iran_df['Date'].min()}\",\n    yaxis_title=\"Number of Confirmed Cases\",\n    yaxis_type=\"log\",\n    **k_layout_kwargs,\n)\n\nfig.show()","bee7914a":"def linear_model(x, a, b):\n    return b * x + a\n\n\ndef linear_model_fixed_slope(slope):\n    def func(x, intercept):\n        return linear_model(x, a=intercept, b=slope)\n    \n    return func\n\ntest_model = linear_model_fixed_slope(2)\nx = np.array([1, 2, 3])\ntest_model(x=x, intercept=2)","058812f6":"from scipy.optimize import curve_fit\n\n\ndef get_model(model, popt):\n    def fitted_model(x):\n        return model(x, *popt)\n    return fitted_model\n\n\nx = (confirmed_us_df['Date'] - confirmed_us_df['Date'].min()).dt.days.to_numpy()\ny = np.log(confirmed_us_df['Confirmed'].to_numpy())\n\n# Pull the slope from the Iran model and use for the U.S., allowing only the intercept to vary\nmodel = linear_model_fixed_slope(iran_growth_rate)\npopt, pcov = curve_fit(model, x, y)\n\nfitted_model_iran_rate = get_model(model, popt)\n\n# Now do the same using the slope from the US model\nmodel = linear_model_fixed_slope(us_growth_rates[us_n_days_to_fit])\npopt, pcov = curve_fit(model, x, y)\n\nfitted_model_us_rate = get_model(model, popt)\n\n# Plot results\nfor layout_kwargs in [{}, {\"yaxis_type\": \"log\"}]:\n    fig = go.Figure()\n\n    fig.add_trace(\n        go.Scatter(\n            x=confirmed_by_country_df[confirmed_by_country_df['Country'] == 'US']['Date'],\n            y=confirmed_by_country_df[confirmed_by_country_df['Country'] == 'US']['Confirmed'],\n            name='U.S.',\n            line=dict(width=4)\n        )\n    )\n\n    exponential_fit_date_range = pd.date_range(confirmed_us_df['Date'].min(), confirmed_us_df['Date'].max() + np.timedelta64(14,'D'))\n\n    xx = np.linspace(0, len(x) + 14, exponential_fit_date_range.shape[0])  # Forecast 14 days out\n    yy = fitted_model_iran_rate(xx)\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy),\n            name=f'U.S. - Exponential fit based on {proxy_country} growth rate ({iran_growth_rate:.0%})',\n            mode='lines'\n        )\n    )\n\n    #########\n\n    yy = fitted_model_us_rate(xx)\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy),\n            name=f'U.S. - Exponential fit based on US growth rate ({us_growth_rates[us_n_days_to_fit]:.0%}) (fitted to {us_n_days_to_fit} days)',\n            mode='lines'\n        )\n    )\n\n    fig.update_layout(\n        title=\"Exponential Model of U.S. Confirmed Cases<br>with 14-Day Extrapolation\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Number of Confirmed Cases\",\n        **k_layout_kwargs,\n        **layout_kwargs\n    )\n\n    fig.show()","16c395d8":"from fbprophet.plot import plot_plotly\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot","56db4401":"full_pop = 330e6\n\n#floor_model = lambda x: max(x - 1, 0)  # Use the value itself because the function only increases\nfloor_model = lambda x: round(0.65 * x)\ncap_model = lambda x: round(min(full_pop, 1.5 * x + 10000))  # 50% above plus one to ensure floor > cap at 0\n\n# Modeling Iran confirmed cases \nconfirmed_training_df = confirmed_by_country_df[(confirmed_by_country_df['Country'] == 'US') & (confirmed_by_country_df['Confirmed'] > 0)]\nconfirmed_training_df = confirmed_training_df.rename(columns={'Date': 'ds', 'Confirmed': 'y'}).reset_index(drop=True)\n\nconfirmed_training_df['floor'] = confirmed_training_df.y.apply(floor_model)\nconfirmed_training_df['cap'] = confirmed_training_df.y.apply(cap_model)","51b874de":"confirmed_training_df.y = confirmed_training_df.y.apply(np.log10)\nconfirmed_training_df.floor = confirmed_training_df.floor.apply(np.log10)\nconfirmed_training_df.cap = confirmed_training_df.cap.apply(np.log10)","69409f33":"# Total confirmed model \nm = Prophet(\n    growth='linear',\n    #interval_width=0.90,\n    changepoint_prior_scale=0.05,\n    changepoint_range=0.9,\n    yearly_seasonality=False,\n    weekly_seasonality=False,\n    daily_seasonality=False,\n    #n_changepoints=2\n)\nm.fit(confirmed_training_df)\nfuture = m.make_future_dataframe(periods=14)\nfuture['floor'] = confirmed_training_df.floor\nfuture['cap'] = confirmed_training_df.cap\nconfirmed_forecast = m.predict(future)","69f6d99f":"for kwargs in [{}, {\"yaxis_type\": \"log\"}]:\n    fig = plot_plotly(m, confirmed_forecast, plot_cap=False, changepoints=True)\n    annotations = []\n    annotations.append(dict(\n        xref='paper',\n        yref='paper',\n        x=0.0,\n        y=1.15,\n        xanchor='left',\n        yanchor='bottom',\n        text='Predictions for log10 Confirmed cases U.S.',\n        font=dict(\n            family='Arial',\n            size=30,\n            color='rgb(37,37,37)'),\n        showarrow=False))\n    fig.update_layout(\n        annotations=annotations,\n        **kwargs\n    )\n    fig.show()","d06d8854":"for kwargs in [{}, {\"yaxis_type\": \"log\"}]:\n    fig = plot_plotly(m, confirmed_forecast, plot_cap=False, changepoints=True)\n    annotations = []\n    annotations.append(dict(\n        xref='paper',\n        yref='paper',\n        x=0.0,\n        y=1.15,\n        xanchor='left',\n        yanchor='bottom',\n        text='Predictions for Confirmed cases U.S.',\n        font=dict(\n            family='Arial',\n            size=30,\n            color='rgb(37,37,37)'),\n        showarrow=False))\n    fig.update_layout(\n        annotations=annotations,\n        **kwargs\n    )\n    for trace in fig.data:\n        trace.y = np.power(trace.y, 10)\n    fig.show()","ab29b566":"k_washington_state_min_date = np.datetime64('2020-02-24')\n\nwashington_state_selector = lambda x: x.endswith(', WA') or x == 'Washington'\n\nus_df = full_df[full_df['Country'] == 'US'].copy()\nwa_df = us_df[us_df['Province\/State'].apply(washington_state_selector)]\nwa_df = wa_df.drop(['Lat', 'Long'], axis=1).groupby('Date').sum().reset_index()\nwa_df = wa_df[wa_df['Date'] >= k_washington_state_min_date]\nwa_df = add_rates(wa_df)\n\ntmp_df = wa_df[wa_df['Confirmed'] > 100]\n\nfig = plot_aggregate_metrics(tmp_df)\n\nfig.update_layout(\n    title=\"Washington State\",\n    template='plotly_dark',\n    yaxis_type='log',\n    font=dict(\n        size=18,\n    ),\n)\n\nfig.show()","b78af44b":"fig = plot_diff_metrics(tmp_df)\n\nfig.update_layout(\n    title=\"Washington State\",\n    template='plotly_dark',\n    font=dict(\n        size=18,\n    ),\n)\n\nfig.show()","4de5cb66":"# Find Washington growth rate\nwa_growth_rates = {}\n\nn_days_to_fit = 5\n\nwa_window_df = wa_df[wa_df['Date'] >= (np.datetime64('today') - np.timedelta64(n_days_to_fit,'D'))]\n\nx = (wa_window_df['Date'] - wa_window_df['Date'].min()).dt.days.to_numpy().reshape(-1, 1)\ny = np.log(wa_window_df['Confirmed'])\nreg = LinearRegression().fit(x, y)\nprint(f\"Model fit score: {reg.score(x, y):.2f}\")\nprint(f\"Growth rate: {reg.coef_[0]:.3f}\")\nwa_growth_rates[n_days_to_fit] = reg.coef_[0]\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=wa_df['Date'],\n        y=wa_df['Confirmed'],\n        name='Washington State',\n        line=dict(width=4)\n    )\n)\n\npredict_days_out = 7*2\n\nexponential_fit_date_range = pd.date_range(wa_window_df['Date'].min(), wa_window_df['Date'].max() + np.timedelta64(predict_days_out,'D'))\n\nxx = np.linspace(0, len(x[:,0]) + predict_days_out, exponential_fit_date_range.shape[0])  # Forecast 14 days out\nyy = reg.predict(xx.reshape(-1,1))\n\nfig.add_trace(\n    go.Scatter(\n        x=exponential_fit_date_range,\n        y=np.exp(yy),\n        name='Washington State - Exponential fit',\n        mode='lines'\n    )\n)\n\nfig.update_layout(\n    title=f\"Exponential Model of Washington State Confirmed Cases<br>(fit to last {n_days_to_fit} days) with {predict_days_out}-Day Extrapolation\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Number of Confirmed Cases\",\n    yaxis_type=\"log\",\n    **k_layout_kwargs,\n)\n\nfig.show()","114fa7bf":"import requests\nimport json\nimport time\n\ncount = 0\nwhile True:\n    try:\n        r = requests.get(url='https:\/\/covidtracking.com\/api\/states\/daily')\n        us_testing_df = pd.read_json(json.dumps(r.json()))\n    except:\n        time.sleep(np.power(2, count)) # exponential backoff\n        count += 1\n        continue\n    break\nus_testing_df['date'] = pd.to_datetime(us_testing_df['date'], format='%Y%m%d')","89f72a00":"wa_testing_df = us_testing_df[us_testing_df['state'] == 'WA'].copy()\nwa_testing_df = wa_testing_df.sort_values('date').reset_index(drop=True)","c39c6d44":"wa_testing_diff_df = pd.DataFrame({\n    'date': wa_testing_df['date'],\n    'positive': wa_testing_df['positive'].diff().shift(-1),\n    'negative': wa_testing_df['negative'].diff().shift(-1),\n})","83e84828":"from plotly.subplots import make_subplots\n\ndf = wa_testing_diff_df\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Scatter(\n        x=df['date'], \n        y=df['positive'],\n        mode='lines+markers',\n        name='Daily Positive Tests',\n        line=dict(color='red', width=2),\n    ),\n    secondary_y=False\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=df['date'], \n        y=df['negative'],\n        mode='lines+markers',\n        name='Daily Negative Tests',\n        line=dict(color='green', width=2),\n    ),\n    secondary_y=False\n)\n\n# Positive Rate\n\ndf = df[df['date'] > np.datetime64('2020-03-09')]\n\nfig.add_trace(\n    go.Scatter(\n        x=df['date'], \n        y=df['positive'] \/ (df['positive'] + df['negative']),\n        mode='lines+markers',\n        name='Percentage of Tests Positive',\n        line=dict(color='purple', width=2),\n    ),\n    secondary_y=True\n)\n\nfig.update_yaxes(title_text=\"<b>Daily Number of Tests<\/b>\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>Percentage of Tests Positive<\/b>\", tickformat=\".2%\", secondary_y=True)\n\nfig.show()","7ab940f0":"# Now fit for King County assuming the growth rate for Washington State\n\n#\n# Clean up the data\n#\nking_county_df = us_df[us_df['Province\/State'].apply(lambda x: x == 'King County, WA')].reset_index(drop=True)\nking_county_df = king_county_df[king_county_df['Date'] >= k_washington_state_min_date]\n# Fill in datapoint from https:\/\/sccinsight.com\/2020\/03\/10\/does-king-county-have-enough-hospital-beds-to-deal-with-the-coronavirus\/\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-10'), 'Confirmed'] = 190\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-10'), 'Deaths'] = np.NaN\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-10'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/12-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-11'), 'Confirmed'] = 270\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-11'), 'Deaths'] = 27\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-11'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/13-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-12'), 'Confirmed'] = 328\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-12'), 'Deaths'] = 32\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-12'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/14-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-13'), 'Confirmed'] = 388\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-13'), 'Deaths'] = 35\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-13'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/15-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-14'), 'Confirmed'] = 420\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-14'), 'Deaths'] = 37\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-14'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/16-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-15'), 'Confirmed'] = 488\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-15'), 'Deaths'] = 43\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-15'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/17-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-16'), 'Confirmed'] = 518\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-16'), 'Deaths'] = 46\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-16'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/18-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-17'), 'Confirmed'] = 562\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-17'), 'Deaths'] = 56\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-17'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/19-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-18'), 'Confirmed'] = 693\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-18'), 'Deaths'] = 60\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-18'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/20-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-19'), 'Confirmed'] = 793\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-19'), 'Deaths'] = 67\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-19'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/21-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-20'), 'Confirmed'] = 934\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-20'), 'Deaths'] = 74\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-20'), 'Recoveries'] = np.NaN\n# Fill in datapoint from https:\/\/www.kingcounty.gov\/depts\/health\/news\/2020\/March\/22-covid.aspx\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-21'), 'Confirmed'] = 1040\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-21'), 'Deaths'] = 75\nking_county_df.loc[king_county_df['Date'] == np.datetime64('2020-03-21'), 'Recoveries'] = np.NaN\n\n# Fill NaN values using last valid value\nking_county_df = king_county_df.fillna(method='ffill')\n\n# Drop rows with non-sense data\nking_county_df = king_county_df.loc[~((king_county_df['Date'] > np.datetime64('2020-03-01')) & (king_county_df['Confirmed'] == 0)), :]\n\n# Add rates for each metric\nking_county_df = add_rates(king_county_df)\n\n#\n# Hospital bed data\n# based on https:\/\/sccinsight.com\/2020\/03\/10\/does-king-county-have-enough-hospital-beds-to-deal-with-the-coronavirus\/\nbed_capacity = 3600\nhosptialization_rate = 0.05\nhospital_max_caseload = bed_capacity \/ hosptialization_rate\n\n#\n# Fit model\n#\n\nking_county_window_df = king_county_df[king_county_df['Date'] >= (np.datetime64('today') - np.timedelta64(n_days_to_fit,'D'))]\n\nx = (king_county_window_df['Date'] - king_county_window_df['Date'].min()).dt.days.to_numpy().reshape(-1, 1)\ny = np.log(king_county_window_df['Confirmed'])\n\n# Fit model to King County\nking_county_wa_growth_rates = {}\nreg = LinearRegression().fit(x, y)\nprint(f\"Model fit score: {reg.score(x, y):.2f}\")\nprint(f\"Growth rate: {reg.coef_[0]:.3f}\")\nking_county_wa_growth_rates[n_days_to_fit] = reg.coef_[0]\n\nx = x.ravel()\ny = y.to_numpy()\n\n# Pull the slope from the Washington model and use for the King County, allowing only the intercept to vary\nmodel = linear_model_fixed_slope(wa_growth_rates[n_days_to_fit])\npopt, pcov = curve_fit(model, x, y)\n\nfitted_model_washington_rate = get_model(model, popt)\n\n# Now do the same using the slope from the US model\nus_growth_rate_n_days_to_fit = n_days_to_fit\n\nmodel = linear_model_fixed_slope(us_growth_rates[us_n_days_to_fit])\npopt, pcov = curve_fit(model, x, y)\n\nfitted_model_us_rate = get_model(model, popt)\n\n# Plot results\nfor layout_kwargs in [{}, {\"yaxis_type\": \"log\"}]:\n    fig = go.Figure()\n\n    fig.add_trace(\n        go.Scatter(\n            x=king_county_df['Date'],\n            y=king_county_df['Confirmed'],\n            name='King County, WA',\n            line=dict(width=4)\n        )\n    )\n    \n    predict_days_out = 7*4\n\n    exponential_fit_date_range = pd.date_range(wa_window_df['Date'].min(), wa_window_df['Date'].max() + np.timedelta64(predict_days_out,'D'))\n\n    xx = np.linspace(0, len(x) + predict_days_out, exponential_fit_date_range.shape[0])  # Forecast number of days out\n    \n    ##########\n    \n    yy = reg.predict(xx.reshape(-1, 1))\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy),\n            name=f'King County, WA - Exponential fit over last {n_days_to_fit} days'\n        )\n    )\n    \n    ##########\n    \n    yy = fitted_model_washington_rate(xx)\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy),\n            name=f'King County, WA - Exponential fit to King County, WA, growth rate={reg.coef_[0]:.0%} (fitted to last {n_days_to_fit} days)',\n            mode='lines'\n        )\n    )\n\n    #########\n\n    yy = fitted_model_us_rate(xx)\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy),\n            name=f'King County, WA - Exponential fit based on US growth rate={us_growth_rates[us_n_days_to_fit]:.0%} (fitted to {us_n_days_to_fit} days)',\n            mode='lines'\n        )\n    )\n    \n    #########\n    \n    fig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0=exponential_fit_date_range.min(),\n            y0=hospital_max_caseload,\n            x1=exponential_fit_date_range.max(),\n            y1=hospital_max_caseload,\n            line=dict(\n                color=\"Red\",\n                width=4,\n                dash='dash'\n            ),\n    )\n    \n    fig.add_trace(\n        go.Scatter(\n            x=[exponential_fit_date_range.min() - np.timedelta64(3,'D')],\n            y=[np.exp(np.log(hospital_max_caseload) * 0.87),],\n            mode='text',\n            text='Hospital Max Caseload',\n            showlegend=False\n        )\n    )\n    \n    #########\n\n    fig.update_layout(\n        title=f\"Exponential Model of King County, WA Confirmed Cases<br>with {predict_days_out}-Day Extrapolation\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Number of Confirmed Cases\",\n        **k_layout_kwargs,\n        **layout_kwargs\n    )\n\n    fig.show()","7bf6cc3a":"king_county_population = 2.189e6\n\n# Plot results\nfor layout_kwargs in [{}, {\"yaxis_type\": \"log\"}]:\n    fig = go.Figure()\n\n    fig.add_trace(\n        go.Scatter(\n            x=king_county_df['Date'],\n            y=king_county_df['Confirmed'] * 1e6 \/ king_county_population,\n            name='King County, WA',\n            line=dict(width=4)\n        )\n    )\n    \n    predict_days_out = 7*4\n\n    exponential_fit_date_range = pd.date_range(wa_window_df['Date'].min(), wa_window_df['Date'].max() + np.timedelta64(predict_days_out,'D'))\n\n    xx = np.linspace(0, len(x) + predict_days_out, exponential_fit_date_range.shape[0])  # Forecast number of days out\n    \n    ##########\n    \n    yy = reg.predict(xx.reshape(-1, 1))\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy) * 1e6 \/ king_county_population,\n            name=f'King County, WA - Exponential fit to King County, WA, growth rate={reg.coef_[0]:.0%} (fitted to last {n_days_to_fit} days)'\n        )\n    )\n    \n    ##########\n    \n    yy = fitted_model_washington_rate(xx)\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy) * 1e6 \/ king_county_population,\n            name=f'King County, WA - Exponential fit based on Washington State growth rate={wa_growth_rates[n_days_to_fit]:.0%} (fitted to {n_days_to_fit} days)',\n            mode='lines'\n        )\n    )\n\n    #########\n\n    yy = fitted_model_us_rate(xx)\n\n    fig.add_trace(\n        go.Scatter(\n            x=exponential_fit_date_range,\n            y=np.exp(yy) * 1e6 \/ king_county_population,\n            name=f'King County, WA - Exponential fit based on US growth rate={us_growth_rates[us_growth_rate_n_days_to_fit]:.0%} (fitted to {us_growth_rate_n_days_to_fit} days)',\n            mode='lines'\n        )\n    )\n    \n    #########\n    \n    fig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0=exponential_fit_date_range.min(),\n            y0=hospital_max_caseload,\n            x1=exponential_fit_date_range.max(),\n            y1=hospital_max_caseload,\n            line=dict(\n                color=\"Red\",\n                width=4,\n                dash='dash'\n            ),\n    )\n    \n    fig.add_trace(\n        go.Scatter(\n            x=[exponential_fit_date_range.min() - np.timedelta64(3,'D')],\n            y=[np.exp(np.log(hospital_max_caseload) * 0.87),],\n            mode='text',\n            text='Hospital Max Caseload',\n            showlegend=False\n        )\n    )\n    \n    #########\n\n    fig.update_layout(\n        title=f\"Exponential Model of King County, WA Confirmed Cases<br>with {predict_days_out}-Day Extrapolation\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Number of Confirmed Cases per Million Inhabitants\",\n        **k_layout_kwargs,\n        **layout_kwargs\n    )\n\n    fig.show()","1f3ab8d3":"population_northern_italy = 27801460\npopulation_italy = 60.48e6\n\nprint(f\"Italy population correction factor: {population_italy \/ population_northern_italy:.2f}\")","7377ba63":"tmp_df = king_county_df[king_county_df['Confirmed'] > 50].copy()\n\nfig = plot_aggregate_metrics(tmp_df)\n\nfig.update_layout(\n    title=\"King County, WA\",\n    template='plotly_dark',\n    yaxis_type='log',\n    font=dict(\n        size=18,\n    ),\n)\n\nfig.show()","16611e45":"fig = plot_diff_metrics(tmp_df)\n\nfig.update_layout(\n    title=\"King County, WA\",\n    template='plotly_dark',\n    font=dict(\n        size=18,\n    ),\n)\n\nfig.show()","67aabe6e":"fig = go.Figure()\nfig.update_layout(template='plotly_dark')\n\ntmp_df = tmp_df[tmp_df['Growth Rate Accel'] < 10]\n\nfig.add_trace(go.Scatter(x=tmp_df['Date'], \n                         y=tmp_df['Growth Rate Accel'],\n                         mode='lines+markers',\n                         name='Growth Acceleration',\n                         line=dict(color='Green', width=3)))\nfig.update_layout(yaxis=dict(tickformat=\".2%\"))\n\nfig.update_layout(\n    title=\"King County, WA\",\n    template='plotly_dark',\n    font=dict(\n        size=18,\n    ),\n)\n\nfig.show()","f9383525":"### Applying the proxy model to the U.S.","bdde20c4":"#### *TODO*\n\n* Project peak of active cases\n* Apply [SIR model](https:\/\/scipython.com\/book\/chapter-8-scipy\/additional-examples\/the-sir-epidemic-model\/)","83baeb44":"# Washington State Statistics\n\nI live in Seattle, and it would be nice to know when we'll hit peak Corona. With a population in King County of ~2.3 million, how soon will we hit the peak?","25ffac5a":"# Modeling Difference Instead of Levels\n\nThe avobe models regress the absolute case numbers instead of the growth rate. This is a classic mistake in statistics. Instead, a regression should be done on the growth rate and the change in that should be modeled.","c43f3578":"# U.S. Model with Prophet\n\nWe allow for a linear model that detects changepoints at Prophet's default significance. In effect, this is a spline of linear models. This is nice because we expect the growth rate to change at some points during the spread.","30b092a9":"# Worldwide Rates","abd56ba6":"# King County, WA - Testing\n\nhttps:\/\/covidtracking.com\/api\/","7928f602":"The Italy growth rate is at 25%. The U.S. growth rate is at 38%","37dde276":"Import the data (make sure you update this on a daily basis)","7188323b":"# Daily Percent Change in Growth Rate\n\nUseful for tracking whether the growth rate is increasing. Any positive percentage indicates exponential growth.","905b70bd":"# King County, WA - Confirmed Cases","92251175":"# Top 10 countries by confirmed cases","a092f405":"# **Last updated on 2020-03-23**\n\n**Feel free to fork and rerun all cells to pull the latest data and update predictions**","b3b710bc":"# Washington State - Confirmed Cases","26f4007d":"This notebook tracks the spread of the novel coronavirus, also known as the 2019-nCoV. It is a contagious respiratory virus that first started in Wuhan in December 2019. As of 2\/11\/2020, the virus is officially named COVID-19 by the World Health Organization.\n\nData: https:\/\/github.com\/CSSEGISandData\/COVID-19. A big thank you to Johns Hopkins for providing the data.\n\nLearn more from the [WHO](https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019)\n<br>Learn more from the [CDC](https:\/\/www.cdc.gov\/coronavirus\/2019-ncov)\n<br>Map Visualizations from  [Johns Hopkins](https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6)","f852a653":"# Modeling U.S.","56cb5112":"# Worldwide Cases","6fb4ea16":"# King County, WA - Confirmed Cases per Million Inhabitants","7fa8223a":"The y-axis above is the log of the number of cases. So let's rescale that.","31ab684d":"***You can select individual traces above by double-clicking on the legend on the right***","11d00ace":"# Confirmed Cases by Country"}}