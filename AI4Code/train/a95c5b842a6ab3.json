{"cell_type":{"235343d2":"code","65bc4e93":"code","8004ac0c":"code","4b7162c8":"code","cb759ca4":"code","9c16ada2":"code","5ecfbc88":"code","ece959e1":"code","403c6c71":"markdown"},"source":{"235343d2":"import os\nimport sys\nimport re\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas.io.sql as psql\nimport sqlite3\nfrom datetime import datetime as dt\nimport datetime\nimport time \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nshow_tables = \"select tbl_name from sqlite_master where type = 'table'\"\ndesc = \"PRAGMA table_info([{table}])\"\n\ntry:\n    conn.close()\nexcept:\n    pass\nconn = sqlite3.connect(':memory:')\ncursor = conn.cursor()\n\n#\/kaggle\/input\/hayabusa2\/hkattrp.db\n#\/kaggle\/input\/hayabusa2\/aocsc.db\n\nattach = 'attach \"..\/input\/hayabusa2\/{data_name}.db\" as {data_name}'\n\ndata_list = ['hkattrp','aocsc']\n\nfor data_name in data_list:\n    cursor.execute(attach.format(data_name=data_name))\n    \n# count: aocsc 5075859 hkattrp 7501952\n# desc: ['datetime', 'q1', 'q2', 'q3', 'q4', 'avx', 'avy', 'avz']\n# hkattrp \u306f\u3001\u7db4\u9593\u9055\u3044 hkattrpt \u304c\u672c\u6765\u306e\u7db4\u3001\u30bf\u30a4\u30d7\u30df\u30b9\u3067\u30c7\u30fc\u30bf\u3092\u3064\u304f\u3063\u3066\u3042\u308a\u307e\u3059\u3002\u3059\u307f\u307e\u305b\u3093\u3002","65bc4e93":"# conn \u306f\u3001global \u3067\u6c17\u306b\u305b\u305a\u4f7f\u3046\nclass nvdashboard():\n    def __init__(self):\n        self.data_list = data_list\n        print(dt.now())\n        \n    # tg\u306f\u3001\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u540d\n    # start \u306f\u6587\u5b57\u5217\n    # interval \u306f\u79d2\u5358\u4f4d\n    # sample_num \u306f\u3001\u53d6\u308a\u6562\u3048\u305a50 \u306b\u3057\u3066\u304a\u304f\n    # \u88dc\u5b8c\u306f\u306a\u3057\n    # \u307e\u305a\u3001epoch \u306b\u5909\u63db\n    # \n    \n    def sampling(self,start,interval=1,sample_num=100,tg='aocsc'):\n        if tg not in self.data_list:\n            print('Eror...: ' + tg + ' not in data_list')\n        \n        start_epoch = self.to_epoch(start)\n        last_epoch = start_epoch + interval*sample_num\n\n        last = dt.strftime(self.from_epoch(last_epoch),\n                           '%Y\/%m\/%d %H:%M:%S')+'.000'\n        \n        print('last: ' + str(last))\n        sql = \"\"\"\n        select * from {tg}\n        where datetime >  '{start}'\n        and datetime < '{last}'\n        \"\"\"[1:-1]\n        df = pd.read_sql(sql.format(tg=tg,start=start,last=last),conn)\n        \n        df['epoch'] = df['datetime']\n        df['epoch'] = df['epoch'].map(self.to_epoch)\n        df['s'] = df['epoch']\n        df['s'] = df['s'].map(lambda x: (x-start_epoch) \/\/ interval )\n        \n\n        df_sample = df[['s', 'q1', 'q2', 'q3', 'q4', 'avx', 'avy', 'avz']].groupby('s')\n\n        \"\"\"\n        print(df.shape)\n        print()\n        print(df.head(3))\n        print(df.tail(3))\n        \"\"\"\n        #return(df)\n        return(df_sample.mean())\n    \n    def to_epoch(self,datetime_string):\n        return(int(time.mktime(pd.to_datetime(datetime_string).timetuple())))\n    \n    def from_epoch(self,epoch_time):\n        return(dt.fromtimestamp(epoch_time))\n    \n\nnv = nvdashboard()","8004ac0c":"# \u30c7\u30fc\u30bf\u6570\u306e\u30ab\u30a6\u30f3\u30c8\u3067\u3059\u304c\u3001\u30000.8568644220013084 sec \u304b\u304b\u308a\u307e\u3059\u3002\nsql = \"\"\"\nselect count(*) from aocsc\n\"\"\"[1:-1]\nstart_time = time.perf_counter()\ndf = pd.read_sql(sql,conn)\nexecution_time = time.perf_counter() - start_time\nprint(execution_time)","4b7162c8":"import ipywidgets as widgets\nfrom ipywidgets import HBox,VBox\nfrom IPython.display import display,clear_output\n\ncol_dropdown = widgets.Dropdown(\noptions=['q1','q2','q3','q4','avx','avy','avz'],description='Columns')\n\nyear_dropdown =widgets.Dropdown(\noptions=['2014','2015','2016','2017','2018'],description='year')\n\nmonth_dropdown = widgets.Dropdown(\noptions = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11','12'] ,\ndescription = 'month')\n\ndays = [str(x).zfill(2)  for x in  range(32)][1:]\nday_dropdown = widgets.Dropdown(\noptions = days ,\ndescription = 'day')\n\nhours = [str(x).zfill(2)  for x in  range(24)]\nhour_dropdown = widgets.Dropdown(\noptions = hours ,\ndescription = 'hour')\n\nminutes = [str(x).zfill(2)  for x in  range(60)]\nminute_dropdown = widgets.Dropdown(\noptions = minutes ,\ndescription = 'minute')\n\nseconds = [str(x).zfill(2)  for x in  range(60)]\nsecond_dropdown = widgets.Dropdown(\noptions = seconds ,\ndescription = 'second')\n\nintervals = [1,60,600,3600,86400]\ninterval_dropdown = widgets.Dropdown(\noptions=intervals,\ndescription=' interval( second )')\n\n","cb759ca4":"start = '2014\/12\/03 04:07:05.773'\ninterval = 60  # \u79d2\u5358\u4f4d\nsample_num = 10000\ntarget_data = 'aocsc'\ndf = nv.sampling(start,interval,sample_num,target_data)\n","9c16ada2":"col_dropdown = widgets.Dropdown(\noptions=['q1','q2','q3','q4','avx','avy','avz'],description='Columns',value='avx')\nsample_start = widgets.Dropdown(\noptions=[0,1000,2000,3000],description='sample_start',value=0)\nsample_length = widgets.Dropdown(\noptions=[100,500,1000],description='sample_length')\ndisplay(col_dropdown)\ndisplay(sample_start)\ndisplay(sample_length)","5ecfbc88":"df[sample_start.value:sample_start.value + sample_length.value][col_dropdown.value].plot(figsize=(20,6))","ece959e1":"1+1","403c6c71":"# \u30c7\u30fc\u30bf\u53d6\u5f97(sampling) \u65e5\u6642\u3092\u79d2\u5358\u4f4d\u3067\u6307\u5b9a\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u3067\u5e73\u5747\u5024\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u884c\u3046\n## \u30b5\u30f3\u30d7\u30eb\u6570\u306f\u300110000 \u3067\u56fa\u5b9a"}}