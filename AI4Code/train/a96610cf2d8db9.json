{"cell_type":{"7c0a645b":"code","a58edb58":"code","a1f438ad":"code","a956cc32":"code","9d3f50a0":"code","3d508e53":"code","e1fa3c90":"code","1434d8dc":"code","a6b5deed":"code","812c7adb":"code","b4e2ac78":"code","96e3157c":"code","ddb6540f":"code","8ca32c9d":"code","97ed06f5":"code","0c29452c":"code","8a343a18":"code","99ee463f":"code","2c2c7c70":"code","efa28d05":"code","6106a47a":"code","c6042efe":"code","e49fd86f":"code","6d871bde":"code","612fde2b":"code","e8719e5b":"code","489450a6":"code","a49734b5":"code","3159d4f2":"code","d10c67db":"code","ac91fe35":"markdown","70c324c1":"markdown","88aa6cfa":"markdown","63eb1c47":"markdown","0ca6dc6c":"markdown","99ed3834":"markdown","5d286392":"markdown","0f4d8a6b":"markdown","3b6fb227":"markdown","ed9a1777":"markdown","b1f9a5c3":"markdown","b9f82432":"markdown","c0a26265":"markdown","6bf4db96":"markdown","afd4187a":"markdown","4dc9d145":"markdown","9f745f54":"markdown","ce85407a":"markdown","b425f148":"markdown","46ad294b":"markdown","46dcdde7":"markdown"},"source":{"7c0a645b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a58edb58":"df=pd.read_csv('..\/input\/predicting-who-pays-back-loans\/loan_data.csv')","a1f438ad":"df.info()","a956cc32":"df.describe()","9d3f50a0":"df.head()","3d508e53":"plt.figure(figsize=(10,6))\ndf[df['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='Credit.Policy=1')\ndf[df['credit.policy']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='Credit.Policy=0')\nplt.legend()\nplt.xlabel('FICO')","e1fa3c90":"plt.figure(figsize=(10,6))\ndf[df['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='Credit.Policy=1')\ndf[df['not.fully.paid']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='Credit.Policy=0')\nplt.legend()\nplt.xlabel('FICO')","1434d8dc":"plt.figure(figsize=(10,6))\nsns.countplot(x='purpose',hue='not.fully.paid',data=df,palette='Set1')","a6b5deed":"sns.set_style(\"darkgrid\")\nsns.jointplot(x='fico',y='int.rate',data=df,color='purple')","812c7adb":"sns.lmplot(x='fico',y='int.rate',data=df,palette='Set1',hue='credit.policy',col='not.fully.paid')","b4e2ac78":"df.info()","96e3157c":"cat_feats=['purpose']","ddb6540f":"final_data=pd.get_dummies(df,columns=cat_feats,drop_first=True)","8ca32c9d":"final_data.head()","97ed06f5":"from sklearn.model_selection import train_test_split","0c29452c":"X_train, X_test, y_train, y_test = train_test_split(final_data.drop('not.fully.paid',axis=1),final_data['not.fully.paid'], test_size=0.3, random_state=101)","8a343a18":"from sklearn.tree import DecisionTreeClassifier","99ee463f":"dtree=DecisionTreeClassifier()","2c2c7c70":"dtree.fit(X_train,y_train)","efa28d05":"predict=dtree.predict(X_test)","6106a47a":"from sklearn.metrics import classification_report,confusion_matrix","c6042efe":"print(classification_report(y_test,predict))","e49fd86f":"print(confusion_matrix(y_test,predict))","6d871bde":"from sklearn.ensemble import RandomForestClassifier","612fde2b":"rfc=RandomForestClassifier(n_estimators=600)","e8719e5b":"rfc.fit(X_train,y_train)","489450a6":"pred=rfc.predict(X_test)","a49734b5":"print(classification_report(y_test,pred))","3159d4f2":"print(confusion_matrix(y_test,pred))","d10c67db":"# Depends what metric you are trying to optimize for. \n# Notice the recall for each class for the models.\n# Neither did very well, more feature engineering is needed.","ac91fe35":"** Create a similar figure, except this time select by the not.fully.paid column.**","70c324c1":"___\n___\n# Random Forest Project \n\nFor this project we will be exploring publicly available data from [LendingClub.com](www.lendingclub.com). Lending Club connects people who need money (borrowers) with people who have money (investors). Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back. We will try to create a model that will help predict this.\n\nLending club had a [very interesting year in 2016](https:\/\/en.wikipedia.org\/wiki\/Lending_Club#2016), so let's check out some of their data and keep the context in mind. This data is from before they even went public.\n\nWe will use lending data from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full. You can download the data from [here](https:\/\/www.lendingclub.com\/info\/download-data.action) or just use the csv already provided. It's recommended you use the csv provided as it has been cleaned of NA values.\n\nHere are what the columns represent:\n* credit.policy: 1 if the customer meets the credit underwriting criteria of LendingClub.com, and 0 otherwise.\n* purpose: The purpose of the loan (takes values \"credit_card\", \"debt_consolidation\", \"educational\", \"major_purchase\", \"small_business\", and \"all_other\").\n* int.rate: The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.\n* installment: The monthly installments owed by the borrower if the loan is funded.\n* log.annual.inc: The natural log of the self-reported annual income of the borrower.\n* dti: The debt-to-income ratio of the borrower (amount of debt divided by annual income).\n* fico: The FICO credit score of the borrower.\n* days.with.cr.line: The number of days the borrower has had a credit line.\n* revol.bal: The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).\n* revol.util: The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).\n* inq.last.6mths: The borrower's number of inquiries by creditors in the last 6 months.\n* delinq.2yrs: The number of times the borrower had been 30+ days past due on a payment in the past 2 years.\n* pub.rec: The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).","88aa6cfa":"## Predictions and Evaluation\n\nLet's predict off the y_test values and evaluate our model.\n\n** Predict the class of not.fully.paid for the X_test data.**","63eb1c47":"## Training the Random Forest model\n\nNow its time to train our model!\n\n**Create an instance of the RandomForestClassifier class and fit it to our training data from the previous step.**","0ca6dc6c":"# Import Libraries\n\n**Import the usual libraries for pandas and plotting. You can import sklearn later on.**","99ed3834":"**Now use pd.get_dummies(loans,columns=cat_feats,drop_first=True) to create a fixed larger dataframe that has new feature columns with dummy variables. Set this dataframe as final_data.**","5d286392":"**Now create a classification report from the results. Do you get anything strange or some sort of warning?**","0f4d8a6b":"# Setting up the Data\n\nLet's get ready to set up our data for our Random Forest Classification Model!\n\n**Check loans.info() again.**","3b6fb227":"## Get the Data\n\n** Use pandas to read loan_data.csv as a dataframe called loans.**","ed9a1777":"## Training a Decision Tree Model\n\nLet's start by training a single decision tree first!\n\n** Import DecisionTreeClassifier**","b1f9a5c3":"# Exploratory Data Analysis\n\nLet's do some data visualization! We'll use seaborn and pandas built-in plotting capabilities, but feel free to use whatever library you want. Don't worry about the colors matching, just worry about getting the main idea of the plot.\n\n** Create a histogram of two FICO distributions on top of each other, one for each credit.policy outcome.**\n\n*Note: This is pretty tricky, feel free to reference the solutions. You'll probably need one line of code for each histogram, I also recommend just using pandas built in .hist()*","b9f82432":"## Predictions and Evaluation of Decision Tree\n**Create predictions from the test set and create a classification report and a confusion matrix.**","c0a26265":"** Check out the info(), head(), and describe() methods on loans.**","6bf4db96":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**","afd4187a":"** Create the following lmplots to see if the trend differed between not.fully.paid and credit.policy. Check the documentation for lmplot() if you can't figure out how to separate it into columns.**","4dc9d145":"** Create a countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid. **","9f745f54":"** Let's see the trend between FICO score and interest rate. Recreate the following jointplot.**","ce85407a":"**What performed better the random forest or the decision tree?**","b425f148":"## Categorical Features\n\nNotice that the **purpose** column as categorical\n\nThat means we need to transform them using dummy variables so sklearn will be able to understand them. Let's do this in one clean step using pd.get_dummies.\n\nLet's show you a way of dealing with these columns that can be expanded to multiple categorical features if necessary.\n\n**Create a list of 1 element containing the string 'purpose'. Call this list cat_feats.**","46ad294b":"## Train Test Split\n\nNow its time to split our data into a training set and a testing set!\n\n** Use sklearn to split your data into a training set and a testing set as we've done in the past.**","46dcdde7":"**Show the Confusion Matrix for the predictions.**"}}