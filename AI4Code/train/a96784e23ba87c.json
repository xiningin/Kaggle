{"cell_type":{"28d37f2f":"code","d55253a4":"code","f0e98b4f":"code","8a78183d":"code","a2309ba3":"code","847e5875":"code","bc05f807":"code","60dbe63f":"code","8d2ec913":"code","e0337490":"code","6a04a279":"code","2cc8abf4":"code","c9735dbc":"code","37ef2b5e":"code","47db4707":"code","3f4e9ffd":"code","c7b8de46":"code","2dd9b552":"code","e67854b6":"code","f8c36da6":"code","2fedfd14":"code","53f1c03e":"code","6a0e6c20":"code","d3a8729b":"code","dbcfbe6d":"code","19b1ccf8":"code","328c026b":"code","e27829e2":"code","18eae2e5":"code","97314db0":"code","242a9003":"code","313bcc8e":"code","6261ded7":"code","5712e8d6":"code","3a553973":"code","f7117881":"code","1fc59eea":"code","5b4b767f":"code","e531d147":"code","dcbfc396":"code","7623c795":"code","aafafab3":"code","0f265d35":"code","47c78bcc":"code","5b3d8bf1":"code","6581cbef":"code","2363037e":"code","a3c27032":"code","ad17553f":"code","ae76ac17":"code","0bcaafc3":"code","3616ba47":"code","f5d1eb58":"code","6d40168d":"code","e6d3dc92":"code","02ff44ce":"code","6da5c6f5":"code","c52a4ec4":"code","1af74c23":"code","bb1a3595":"code","d8457c30":"code","72d11e8c":"code","23f237c6":"code","3f94a9a0":"code","7623aa06":"code","5ce6ba05":"code","e1d48cfc":"code","be7806d7":"code","72e85e1a":"code","827e41fd":"code","5d21f6e7":"code","67257af0":"code","93df613d":"code","a6809206":"code","baba301b":"code","62a5182f":"code","0313814f":"code","e0b8b0e1":"code","8a193c0d":"code","4839fb63":"code","c18b8e59":"code","2337a9a8":"code","a150fd30":"code","48905a34":"code","e892ecc1":"code","48dcecbc":"code","cb8a4f7b":"code","99f85776":"code","e4343bfe":"code","437fe9e4":"code","4b7fb532":"code","ea17d138":"code","0814dd2c":"code","1e6214e5":"code","019caf39":"code","a7c2521e":"code","61cff578":"code","f4daea3f":"code","2f346660":"code","260f179d":"code","17a361cc":"code","d71f85cd":"code","01f87247":"code","305758d6":"code","d5f8dbba":"code","33f3900f":"code","0e0b9a0d":"code","03a2d2a5":"code","07403517":"code","38345107":"code","adb9053b":"code","47ae0f7d":"code","e898a12d":"code","37d78645":"code","8778368d":"code","2e976f1d":"code","5a6da28e":"code","d761e43a":"code","53e474ff":"code","4873dfc0":"code","e4141a3e":"code","2476f5ad":"code","7f62d0ba":"code","32bf8261":"code","3ad5b6b2":"code","e5a5c3bf":"code","61397282":"code","9fb85cd2":"code","17b6403a":"code","16245f39":"code","1a120758":"code","3558b295":"code","f062c219":"code","784f62cc":"code","6c872025":"code","98897b84":"code","f27d08ef":"code","f02da627":"code","1f2f7085":"code","9bf5e5e5":"code","92f60012":"code","3830c4ff":"code","3a5c906e":"code","71baf301":"code","df30352e":"code","470b4bde":"code","37fa0304":"code","8d7d8504":"code","496f792f":"code","6d8b9d16":"code","c500051b":"markdown","9e43c637":"markdown","28b657f7":"markdown","c7ab651c":"markdown","05029f4c":"markdown","0f4bc031":"markdown"},"source":{"28d37f2f":"#Project team 5 ----------------------------------------------------------------------------------------","d55253a4":"#Importing modules and reading dataset -----------------------------------------------------------------","f0e98b4f":"pip install beautifulsoup4","8a78183d":"pip install smote-variants","a2309ba3":"#Importing modules\nimport numpy as np\nimport holidays\nimport pandas as pd\nimport seaborn as sns\nimport pickle\nimport time\nimport timeit\n\nimport scikitplot as skplt\n\n\nimport matplotlib.pyplot as plt\nplt.style.use('dark_background')\n%matplotlib inline\n\nimport datetime\nimport math\nfrom collections import Counter\n\n#scipy\nimport scipy.stats as stats\nfrom scipy import stats\nfrom scipy.stats import chi2_contingency\n\n#sklearn\nimport sklearn\nfrom sklearn import ensemble\nfrom sklearn import preprocessing\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import AdaBoostClassifier, BaggingClassifier, ExtraTreesClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, log_loss, recall_score \nfrom sklearn.metrics import classification_report, confusion_matrix, roc_auc_score\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, train_test_split\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, OrdinalEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.utils import resample\n\n#for clustering\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import normalize\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import MiniBatchKMeans\nfrom sklearn.metrics import silhouette_score\n\n#other learners\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom kmodes.kmodes import KModes\n\n#imblearn\nfrom imblearn.ensemble import BalancedBaggingClassifier\nfrom imblearn.ensemble import EasyEnsembleClassifier\nfrom imblearn.ensemble import BalancedRandomForestClassifier\n\n#webscraping\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\nimport urllib\nfrom IPython.core.display import HTML\n\n#time series\nimport statsmodels.api as sm\nfrom pylab import rcParams\nimport itertools\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\n\n\n#smote\nimport smote_variants as sv\n\n\n#warning ignorer\nimport warnings\nwarnings.filterwarnings(\"ignore\")","847e5875":"#jump to pickle --------------------------------------------------------------------------------------------","bc05f807":"#read dataset\nac = pd.read_csv('..\/input\/uk-road-safety-accidents-and-vehicles\/Accident_Information.csv', chunksize = 30000)\nvc = pd.read_csv('..\/input\/uk-road-safety-accidents-and-vehicles\/Vehicle_Information.csv', chunksize = 30000)","60dbe63f":"print(ac.shape)\nprint(vc.shape)","8d2ec913":"#Data cleaning ------------------------------------------------------------------------------------","e0337490":"#cleaning ac\nacchunk = []\nfor chunk in ac:\n    acchunk_filter = chunk[\n        (chunk.Year.astype(int) >= 2010) &\n        (chunk.Year.astype(int) <= 2017) &\n        (chunk['Road_Type'] != \"Unknown\") &\n        (chunk['Junction_Control'] != \"Data missing or out of range\") &\n        (chunk['Carriageway_Hazards'] != \"Data missing or out of range\") &\n        (chunk['Junction_Detail'] != \"Data missing or out of range\") &\n        (chunk['Road_Surface_Conditions'] != \"Data missing or out of range\") &\n        (chunk['Special_Conditions_at_Site'] != \"Data missing or out of range\") &\n        (chunk['Weather_Conditions'] != \"Data missing or out of range\") &\n        (chunk['Latitude'].notnull()) &\n        (chunk['Longitude'].notnull())\n    ]\n    acchunk.append(acchunk_filter)\ndf1 = pd.concat(acchunk)\n","6a04a279":"#cleaning vc\nvcchunk = []\nfor chunk2 in vc:\n    vcchunk_filter = chunk2[\n        (chunk2.Year.astype(int) >= 2010)&\n        (chunk2.Year.astype(int) <= 2017) &\n        (chunk2['Driver_Home_Area_Type'] != \"Data missing or out of range\") &\n        (chunk2['Journey_Purpose_of_Driver'] != \"Data missing or out of range\") &\n        (chunk2['Junction_Location'] != \"Data missing or out of range\") &\n        (chunk2['Was_Vehicle_Left_Hand_Drive'] != \"Data missing or out of range\") &\n        (chunk2['Hit_Object_in_Carriageway'] != \"Data missing or out of range\") &\n        (chunk2['Skidding_and_Overturning'] != \"Data missing or out of range\") &\n        (chunk2['Towing_and_Articulation'] != \"Data missing or out of range\") &\n        (chunk2['Vehicle_Leaving_Carriageway'] != \"Data missing or out of range\") &\n        (chunk2['Vehicle_Manoeuvre'] != \"Data missing or out of range\") &\n        (chunk2['Vehicle_Type'] != \"Data missing or out of range\") &\n        (chunk2['X1st_Point_of_Impact'] != \"Data missing or out of range\") &\n        (chunk2['Sex_of_Driver'] != \"Data missing or out of range\") &\n        (chunk2['Age_Band_of_Driver'] != \"Data missing or out of range\")    \n    ]\n    vcchunk.append(vcchunk_filter)\ndf2 = pd.concat(vcchunk)","2cc8abf4":"print(df1.shape)\nprint(df2.shape)","c9735dbc":"#merge datasets\ndf = pd.merge(df1,df2)\nprint(df.shape)","37ef2b5e":"print(df.columns)","47db4707":"#correlation between Location_Easting_OSGR & Location_Northing_OSGR AND Longitude & Latitude\nprint(df['Location_Easting_OSGR'].corr(df['Longitude']))\nprint(df['Location_Northing_OSGR'].corr(df['Latitude']))","3f4e9ffd":"df = df.drop(['Location_Easting_OSGR', 'Location_Northing_OSGR'], axis = 1)\nprint(df.shape)","c7b8de46":"#correcting column names\ndf.columns = map(str.lower, df.columns)\ndf.columns = df.columns.str.replace('.','')\ndf.columns = df.columns.str.replace('(','')\ndf.columns = df.columns.str.replace(')','')","2dd9b552":"#converting date to datetime format\ndf['date'] = pd.to_datetime((df['date']), format= \"%Y-%m-%d\")","e67854b6":"df.dtypes","f8c36da6":"#converting misclassified to objects\ndf[['did_police_officer_attend_scene_of_accident', 'vehicle_reference', 'vehicle_locationrestricted_lane',\n    '1st_road_number', '2nd_road_number','driver_imd_decile', 'pedestrian_crossing-physical_facilities',\n    'pedestrian_crossing-human_control']] =  df[['did_police_officer_attend_scene_of_accident', \n    'vehicle_reference', 'vehicle_locationrestricted_lane','1st_road_number', '2nd_road_number',\n    'driver_imd_decile', 'pedestrian_crossing-physical_facilities', 'pedestrian_crossing-human_control']].astype('object')","2fedfd14":"df.columns.to_series().groupby(df.dtypes).groups","53f1c03e":"#Nulls and outliers -----------------------------------------------------------------------------------","6a0e6c20":"df.isnull().sum().sort_values(ascending = False) \/ df.shape[0] * 100","d3a8729b":"#2nd_road_class\ndf['2nd_road_class'].value_counts() \/ df.shape[0] * 100","dbcfbe6d":"df = df.drop(['2nd_road_class'], axis = 1)","19b1ccf8":"#driver_imd_decile\ndf['driver_imd_decile'].value_counts() \/ df.shape[0] * 100 ","328c026b":"df['driver_imd_decile'].fillna(method = 'ffill', inplace = True)","e27829e2":"#age_of_vehicle\ndf['age_of_vehicle'].value_counts() \/ df.shape[0] * 100\n#df['age_of_vehicle'].describe()","18eae2e5":"df['age_of_vehicle'].median()","97314db0":"df['age_of_vehicle'].fillna(7, inplace = True)\n\ndef age_check(age):\n    if age >= 0 and age <= 120:\n        return age\n    else:\n        return np.nan\n\ndf['age_of_vehicle'] = df['age_of_vehicle'].apply(age_check)\ndf['age_of_vehicle'] = pd.cut(df['age_of_vehicle'], [0,2,5,8,11,14,17,120], labels = ['1', '2', '3','4','5','6','7'])","242a9003":"#model\ndf['model'].value_counts() \/ df.shape[0] * 100","313bcc8e":"df['model'].describe()","6261ded7":"df['model'].fillna(method = 'ffill', inplace = True)","5712e8d6":"#engine_capacity_cc\ndf['engine_capacity_cc'].describe()","3a553973":"df['engine_capacity_cc'].value_counts() \/ df.shape[0] * 100","f7117881":"#IQR\nq75, q25 = np.percentile(df['engine_capacity_cc'].dropna(), [75 ,25])\niqr = q75 - q25\necmin = q25 - (iqr * 1.5)\necmax = q75 + (iqr * 1.5)\nprint(ecmax)\nprint(ecmin)","1fc59eea":"df = df[df['engine_capacity_cc'] <= ecmax]","5b4b767f":"df = df[df['engine_capacity_cc'] >= ecmin]","e531d147":"df['engine_capacity_cc'].describe()","dcbfc396":"df['engine_capacity_cc'].mean()","7623c795":"df['engine_capacity_cc'].fillna(1652, inplace = True)","aafafab3":"def enginecap(eng_cc):\n    if eng_cc <= 1500:\n        return \"small engine cc\"\n    if eng_cc > 1500 and eng_cc <= 2000:\n        return \"medium engine cc\"\n    if eng_cc > 2000:\n        return \"large engine cc\"\n\ndf['engine_capacity_cc_size'] = df['engine_capacity_cc'].apply(enginecap)","0f265d35":"df.isnull().sum().sort_values(ascending = False) \/ df.shape[0] * 100","47c78bcc":"#lsoa_of_accident_location\ndf['lsoa_of_accident_location'].value_counts()","5b3d8bf1":"df['lsoa_of_accident_location'].describe()","6581cbef":"df['lsoa_of_accident_location'].fillna(method = 'ffill', inplace = True)","2363037e":"#other nulls are just dropped\ndf.dropna(inplace = True)\ndf.isnull().sum().sort_values(ascending = False) \/ df.shape[0] * 100","a3c27032":"df.shape","ad17553f":"#outliers of all floats\/ints excluding lat\/long and year\ndf_num = df[['engine_capacity_cc','number_of_casualties','number_of_vehicles','speed_limit']]\ndf_num.hist( bins = 25, grid = False, figsize = (12,8))","ae76ac17":"#number_of_casualties\ndf['number_of_casualties'].value_counts()","0bcaafc3":"def casualities(num_cas):\n    if num_cas >= 1 and num_cas < 2:\n        return \"1\"\n    elif num_cas >= 2 and num_cas < 3:\n        return \"2\"\n    elif num_cas >= 3 and num_cas < 4:\n        return \"3\"\n    elif num_cas >= 4 and num_cas < 5:\n        return \"4\"\n    elif num_cas >= 5:\n        return \"5+\"\n    \ndf['number_of_casualties'] = df['number_of_casualties'].apply(casualities)","3616ba47":"#Feature manipulation ------------------------------------------------------------------------------","f5d1eb58":"#unique values\ndf.nunique().sort_values(ascending = False)","6d40168d":"#new_date_column\ndf['date'] = pd.to_datetime(df['date'])","e6d3dc92":"#new_month_column\ndf['month'] = df ['date'].apply(lambda time: time.month)","02ff44ce":"#creating a weekend feature\ndf['weekend'] = np.where(df['day_of_week'].isin(['Friday', 'Saturday', 'Sunday']), 1, 0)","6da5c6f5":"#new_hour_column\ndf['hour'] = df['time'].str[0:2] \ndf['hour'] = df['hour'].astype('int')","c52a4ec4":"#time of day dictionary\ntimeofdaygroups = {1: \"Morning Rush (6-10)\",\n                   2: \"Day (10-12)\",\n                   3: \"Lunch Rush (12-14)\",\n                   4: \"Afternoon (14-16)\",\n                   5: \"After Work Rush (16-18)\",\n                   6: \"Evening (18-22)\",\n                   7: \"Night (22-6)\"}","1af74c23":"def daygroup(hour):\n    if hour >= 6 and hour < 10:\n        return \"1\"\n    elif hour >= 10 and hour < 12:\n        return \"2\"\n    elif hour >= 12 and hour < 14:\n        return \"3\"\n    elif hour >= 14 and hour < 16:\n        return \"4\"\n    elif hour >= 16 and hour < 18:\n        return \"5\"\n    elif hour >= 18 and hour < 22:\n        return \"6\"\n    else:\n        return \"7\"   \n    \ndf['time_of_day'] = df['hour'].apply(daygroup)","bb1a3595":"df[['weekend','day_of_week','time', 'time_of_day']].head(10)","d8457c30":"#vehicle_type\ndf['vehicle_type'].value_counts() \/ df.shape[0] * 100","72d11e8c":"#motorcycles\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Motorcycle over 500cc\", value = \"Motorcycle\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Motorcycle over 125cc and up to 500cc\", value = \"Motorcycle\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Motorcycle 125cc and under\", value = \"Motorcycle\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Motorcycle 50cc and under\", value = \"Motorcycle\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Electric motorcycle\", value = \"Motorcycle\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Motorcycle - unknown cc\", value = \"Motorcycle\")\n\n#Goods_vehicle\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Van \/ Goods 3.5 tonnes mgw or under\", value = \"Goods Vehicle\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Goods over 3.5t. and under 7.5t\", value = \"Goods Vehicle\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Goods vehicle - unknown weight\", value = \"Goods Vehicle\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Goods 7.5 tonnes mgw and over\", value = \"Goods Vehicle\")\n\n#car\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Taxi\/Private hire car\", value = \"Car\")\n\n\n#bus\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Minibus (8 - 16 passenger seats)\", value = \"Bus\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Bus or coach (17 or more pass seats)\", value = \"Bus\")\n\n#other vehicle\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Agricultural vehicle\", value = \"Other Vehicle\")\ndf['vehicle_type'] = df['vehicle_type'].replace(to_replace = \"Other vehicle\", value = \"Other Vehicle\")\n","23f237c6":"#age_band_of_driver \ndf['age_band_of_driver'].value_counts() \/ df.shape[0] * 100","3f94a9a0":"df['age_band_of_driver'] = df['age_band_of_driver'].replace(\"Over 75\", \"75-100\")","7623aa06":"# number_of_vehicles\ndf['number_of_vehicles'].value_counts() \/ df.shape[0] * 100","5ce6ba05":"df['number_of_vehicles'].dtypes","e1d48cfc":"df['number_of_vehicles'] = df['number_of_vehicles'].astype('object')","be7806d7":"#new_column_accident_seriousness\ndf['accident_seriousness'] = df['accident_severity']\ndf['accident_seriousness'] = df['accident_seriousness'].replace(to_replace = \"Slight\", value = \"Not Serious\")\ndf['accident_seriousness'] = df['accident_seriousness'].replace(to_replace = \"Serious\", value = \"Serious\")\ndf['accident_seriousness'] = df['accident_seriousness'].replace(to_replace = \"Fatal\", value = \"Serious\")\ndf.shape","72e85e1a":"df.accident_seriousness.value_counts()","827e41fd":"#Visualizations ----------------------------------------------------------------------------------------","5d21f6e7":"accidentsperyear = df.groupby(['year'])['accident_index'].count()\n\nplt.style.use('dark_background')\nplt.figure(figsize = (10,5))\ncolors = sns.color_palette(\"plasma\", n_colors = 7)\nsns.barplot(accidentsperyear.index,accidentsperyear.values, palette = colors)\nsns.despine(top = True, right = True, left = True, bottom = True)\nplt.title(\"Accidents Per Year\",fontsize = 20,fontweight = \"bold\")\nplt.xlabel(\"\\nYear\", fontsize = 15, fontweight = \"bold\")\nplt.ylabel(\"\\nNumber of Accidents\", fontsize = 15, fontweight = \"bold\")\nplt.savefig('accidentsperyear.png')\nplt.tight_layout()","67257af0":"accidentspermonth = df.groupby(['month'])['accident_index'].count()\n\nplt.style.use('dark_background')\nplt.figure(figsize = (20,10))\ncolors = sns.color_palette(\"plasma_r\", n_colors = 12)\nmt = sns.barplot(accidentspermonth.index,accidentspermonth.values, palette = colors)\nsns.despine(top = True, right = True, left = True, bottom = True)\ngroup_labels = ['Jan', 'Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec' ]\nmt.set_xticklabels(group_labels)\nplt.title(\"Accidents Per Month\",fontsize = 20,fontweight = \"bold\")\nplt.xticks(fontsize = 18)\nplt.yticks(fontsize = 12)\nplt.xlabel(\"\\nMonth\", fontsize = 15, fontweight = \"bold\")\nplt.ylabel(\"\\nNumber of Accidents\", fontsize = 15, fontweight = \"bold\")\nplt.savefig('accidentspermonth.png')\nplt.tight_layout()","93df613d":"weekdays = ['Monday', 'Tuesday','Wednesday','Thursday', 'Friday', 'Saturday', 'Sunday']\naccweekday = df.groupby(['year', 'day_of_week']).size()\naccweekday = accweekday.rename_axis(['year', 'day_of_week'])\\\n                               .unstack('day_of_week')\\\n                               .reindex(columns=weekdays)\nplt.figure(figsize=(15,10))\nplt.style.use('dark_background')\nsns.heatmap(accweekday, cmap='plasma_r')\nplt.title('\\nAccidents by Weekday per Year\\n', fontsize=14, fontweight='bold')\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=12)\nplt.xlabel('')\nplt.ylabel('')\nplt.savefig('accidentsbyweekdayperyear.png')\nplt.show()","a6809206":"timeofdaygroups = {'1': \"Morning Rush\",\n                   '2': \"Day\",\n                   '3': \"Lunch Rush\",\n                   '4': \"Afternoon\",\n                   '5': \"After Work Rush\",\n                   '6': \"Evening\",\n                   '7': \"Night\"}\ndf['time_of_day'] = df['time_of_day'].map(timeofdaygroups)","baba301b":"accidentspertod = df.groupby(['time_of_day'])['accident_index'].count()\nplt.style.use('dark_background')\nplt.figure(figsize=(15,10))\ntod=[\"Morning Rush\", \"Day\", \"Lunch Rush\", \"Afternoon\",\n     \"After Work Rush\", \"Evening\", \"Night\"]\nsns.barplot(accidentspertod.index,accidentspertod.values, order=tod, palette='rainbow')\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.title(\"Accidents Per Time of Day\",fontsize=20,fontweight=\"bold\")\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=12)\n\nplt.xlabel(\"\", fontsize=15, fontweight=\"bold\")\nplt.ylabel(\"\\nNumber of Accidents\", fontsize=15, fontweight=\"bold\")\nplt.tight_layout()\nplt.savefig('accidentspertod.png')","62a5182f":"#Correlations ------------------------------------------------------------------------------------------------","0313814f":"#correlation by accident seriousness pearson\ncorrdf = df.apply(LabelEncoder().fit_transform)\nsc = StandardScaler()\ncorrdf = sc.fit_transform(corrdf)\ncorrdf = pd.DataFrame(data = corrdf, columns = df.columns)\ncorr = corrdf.corr()['accident_seriousness']\ncorr[np.argsort(corr, axis = 0)[::-1]]","e0b8b0e1":"#correlation by accident seriousness spearman\ncorr_spear = corrdf.corr(method = 'spearman')['accident_seriousness'] \ncorr_spear[np.argsort(corr_spear, axis = 0)[::-1]]","8a193c0d":"#ChiSquare","4839fb63":"not_serious = df[(df['accident_seriousness'] == \"Not Serious\")]\nprint(not_serious.accident_seriousness.value_counts())\n\nserious = df[(df['accident_seriousness'] == \"Serious\")]\nprint(serious.accident_seriousness.value_counts())","c18b8e59":"#map 1, 2, 3 in did_police_officer_attend_scene_of_accident with Yes, No, Self-reported\npoliceattend = {1: \"Yes\", 2: \"No\", 3: \"Self-Reported\"}\nnot_serious['did_police_officer_attend_scene_of_accident'] = not_serious['did_police_officer_attend_scene_of_accident'].map(policeattend)\ndf['did_police_officer_attend_scene_of_accident'] = df['did_police_officer_attend_scene_of_accident'].map(policeattend)\nserious['did_police_officer_attend_scene_of_accident'] = serious['did_police_officer_attend_scene_of_accident'].map(policeattend)","2337a9a8":"imddecile = {1:\"Most deprived 10%\", 2:\"More deprived 10-20%\", 3:\"More deprived 20-30%\", \n             4:\"More deprived 30-40%\", 5:\"More deprived 40-50%\", 6:\"Less deprived 40-50%\", \n             7:\"Less deprived 30-40%\", 8:\"Less deprived 20-30%\", 9:\"Less deprived 10-20%\", \n             10:\"Least deprived 10%\"}\nnot_serious['driver_imd_decile'] = not_serious['driver_imd_decile'].map(imddecile)\ndf['driver_imd_decile'] = df['driver_imd_decile'].map(imddecile)\nserious['driver_imd_decile'] = serious['driver_imd_decile'].map(imddecile)","a150fd30":"dftotal = float(len(df))\nnstotal = float(len(not_serious))\nsetotal = float(len(serious))","48905a34":"#did_police_officer_attend_scene_of_accident","e892ecc1":"fig, ax =plt.subplots(1,2,figsize = (15,8))\nsns.despine(top=True, right=True, left=False, bottom=False)\nax1 = sns.countplot( \"did_police_officer_attend_scene_of_accident\", hue=\"accident_seriousness\", \n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 = sns.countplot(\"did_police_officer_attend_scene_of_accident\", hue=\"accident_seriousness\",  \n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"Did Police Officer Attend Scene Of Accident\", fontsize=20, fontweight=\"bold\")\nax1.set_xlabel('Attendance of Not Serious Accidents', fontsize=12, fontweight=\"bold\")\nax2.set_xlabel('Attendance of Serious Accidents', fontsize=12, fontweight=\"bold\")\nax1.set_ylabel('Number Attended')\nax2.set_ylabel('Number Attended')\nax1.get_legend().remove()\nax2.get_legend().remove()\nplt.style.use('dark_background')\nplt.savefig('did_police_officer_attend_scene_of_accident.png')\nfig.show()\n","48dcecbc":"#1st_point_of_impact","cb8a4f7b":"# First Point of Impact Vs Accident Seriousness (Not Serious)\nfpoa_order =[\"Front\", \"Nearside\", \"Did not impact\", \"Back\", \"Offside\"]\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=True, right=True, left=False, bottom=False)\nax1 =sns.countplot(\"accident_seriousness\",hue=\"x1st_point_of_impact\", hue_order=fpoa_order,  \n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 = sns.countplot(\"accident_seriousness\",hue=\"x1st_point_of_impact\", hue_order=fpoa_order, \n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"First Point of Impact in Accidents\", fontsize=20, fontweight=\"bold\")\nax1.set_xlabel('First Point of Impact of Not Serious Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_xlabel('First Point of Impact of Serious Accidents',  fontsize=15, fontweight=\"bold\")\nax1.set_ylabel('First Point of Impact Count', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('')\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nplt.style.use('dark_background')\nplt.savefig('x1st_point_of_impact.png')\nfig.show()\n","99f85776":"#number_of_vehicles","e4343bfe":"\nnov_order=[\"1\",\"2\", \"3\", \"4+\"]\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=True, right=True, left=False, bottom=False)\nax1 =sns.countplot(\"accident_seriousness\", hue=\"number_of_vehicles\", hue_order=nov_order,\n              palette=\"GnBu_d\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 = sns.countplot(\"accident_seriousness\", hue=\"number_of_vehicles\", hue_order=nov_order,\n              palette=\"GnBu_d\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"Number of Vehicles in Accidents\", fontsize=20, fontweight=\"bold\")\nax1.set_xlabel('Number of Vehicles of Not Serious Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_xlabel('Number of Vehicles of Serious Accidents', fontsize=15, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.set_ylabel('')\nplt.style.use('dark_background')\nplt.savefig('number_of_vehicles.png')\nfig.show()\n","437fe9e4":"#speed_limit","4b7fb532":"splt_order=[15, 20,30,40,50,60,70]\nsplt_order2=[20,30,40,50,60,70]\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"speed_limit\", hue_order=splt_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.4f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"speed_limit\", hue_order=splt_order2,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"Speed Limit in Accidents\", fontsize=20, fontweight=\"bold\")\nax1.set_xlabel('Speed Limit of Not Serious Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_xlabel('Speed Limit of Serious Accidents', fontsize=15, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nplt.style.use('dark_background')\nplt.savefig('speed_limit.png')\nfig.show()\n","ea17d138":"#urban_or_rural_area","0814dd2c":"fig, ax =plt.subplots(1,2,figsize = (15,8))\nsns.despine(top=True, right=True, left=False, bottom=False)\nax1 =sns.countplot(\"accident_seriousness\",  hue=\"urban_or_rural_area\",\n              palette=\"PuBu\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 = sns.countplot(\"accident_seriousness\",  hue=\"urban_or_rural_area\",\n              palette=\"PuBu\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"Urban or Rural Areas vs Accidents\", fontsize=20, fontweight=\"bold\")\nax1.set_xlabel('\\nUrban or Rural Areas vs Not Serious Accidents', fontsize=14, fontweight=\"bold\")\nax2.set_xlabel('\\nUrban or Rural Areas vs Serious Accidents', fontsize=14, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.set_ylabel('')\nplt.style.use('dark_background')\nplt.savefig('urban_or_rural_area.png')\nfig.show()\n","1e6214e5":"#skidding_and_overturning","019caf39":"sao_order=[\"None\", \"Skidded\", \"Skidded and overturned\", \"Overturned\", \"Jackknifed\", \n           \"Jackknifed and overturned\"]\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=False, right=True, left=True)\nax1 =sns.countplot(\"accident_seriousness\", hue=\"skidding_and_overturning\", hue_order=sao_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.3f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"skidding_and_overturning\", hue_order=sao_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.3f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"Skidding and Overturning in Accidents\", fontsize=20, fontweight=\"bold\")\nax1.set_xlabel('\\nSkidding and Overturning in Not Serious Accidents', fontsize=14, fontweight=\"bold\")\nax2.set_xlabel('\\nSkidding and Overturning in Serious Accidents', fontsize=14, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nplt.style.use('dark_background')\nplt.savefig('skidding_and_overturning.png')\nfig.show()\n","a7c2521e":"#vehicle_leaving_carriageway","61cff578":"vlc_order=[\"Did not leave carriageway\", \"Straight ahead at junction\", \"Nearside\", \n           \"Offside\", \"Offside on to central reservation\", \"Nearside and rebounded\", \n           \"Offside - crossed central reservation\", \"Offside and rebounded\", \n           \"Offside on to centrl res + rebounded\"]\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=False, right=True, left=True)\nax1 =sns.countplot(\"accident_seriousness\", hue=\"vehicle_leaving_carriageway\", hue_order=vlc_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"vehicle_leaving_carriageway\", hue_order=vlc_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"Vehicle Leaving Carriageway in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Not Serious Accidents\\n\\n', fontsize=13, fontweight=\"bold\")\nax2.set_xlabel('Serious Accidents', fontsize=13, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nplt.style.use('dark_background')\nplt.savefig('vehicle_leaving_carriageway.png')\nfig.show()\n\n","f4daea3f":"#sex_of_driver","2f346660":"sod_order=[\"Female\", \"Male\", \"Not known\"]\n\nfig, ax =plt.subplots(1,2,figsize = (15,8))\nsns.despine(top=True, right=True, left=False, bottom=False)\nax1 =sns.countplot(\"accident_seriousness\", hue=\"sex_of_driver\", hue_order=sod_order,\n              palette=\"magma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 = sns.countplot(\"accident_seriousness\", hue=\"sex_of_driver\", hue_order=sod_order,\n              palette=\"magma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"Sex of Driver in Accidents\", fontsize=20, fontweight=\"bold\")\nax1.set_xlabel('\\nSex of Driver in Not Serious Accidents', fontsize=14, fontweight=\"bold\")\nax2.set_xlabel('\\nSex of Driver in Serious Accidents', fontsize=14, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.set_ylabel('')\nplt.style.use('dark_background')\nplt.savefig('sex_of_driver.png')\nfig.show()\n","260f179d":"#vehicle_type","17a361cc":"vt_order=['Bus', 'Car', 'Goods Vehicle', 'Motorcycle', 'Other Vehicle']\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=False, right=True, left=True)\nax1 =sns.countplot(\"accident_seriousness\", hue=\"vehicle_type\", hue_order=vt_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"vehicle_type\", hue_order=vt_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"Vehicle Type in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Vehicle Type in Not Serious Accidents\\n\\n', fontsize=13, fontweight=\"bold\")\nax2.set_xlabel('Vehicle Type in Serious Accidents', fontsize=13, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nplt.style.use('dark_background')\nplt.savefig('vehicle_type.png')\nfig.show()","d71f85cd":"#vehicle_manoeuvre","01f87247":"vm_order=['Turning right', 'Going ahead other', 'Going ahead right-hand bend',\n          'Slowing or stopping', 'Turning left', 'Waiting to go - held up',\n          'Waiting to turn right', 'Overtaking static vehicle - offside' ,\n          'Parked', 'Overtaking - nearside', 'U-turn', 'Changing lane to right', \n          'Reversing', 'Waiting to turn left', 'Changing lane to left',\n          'Going ahead left-hand bend', 'Overtaking moving vehicle - offside', 'Moving off']\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"vehicle_manoeuvre\",hue_order=vm_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"vehicle_manoeuvre\",hue_order=vm_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Vehicle Manuevers in Accidents\", fontsize=18, fontweight=\"bold\")\n\nax1.set_xlabel('Vehicle Manuevers in Not Serious Accidents\\n\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Vehicle Manuevers in Serious Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n\nplt.tight_layout() # No overlap of subplots\nplt.style.use('dark_background')\nplt.savefig('vehicle_manoeuvre.png')\nfig.show()","305758d6":"#driver_home_area_type","d5f8dbba":"dhoa_order=['Urban area', 'Rural', 'Small town']\n\nfig, ax =plt.subplots(1,2,figsize = (15,8))\nsns.despine(top=True, right=True, left=False, bottom=False)\nax1 =sns.countplot(\"accident_seriousness\", hue=\"driver_home_area_type\", hue_order=dhoa_order,\n              palette=\"magma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \nax2 = sns.countplot(\"accident_seriousness\", hue=\"driver_home_area_type\", hue_order=dhoa_order,\n              palette=\"magma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12) \nfig.suptitle(\"Driver Home Type Area in Accidents\", fontsize=20, fontweight=\"bold\")\nax1.set_xlabel('\\nDriver Home Type Area in Not Serious Accidents', fontsize=14, fontweight=\"bold\")\nax2.set_xlabel('\\nDriver Home Type Area in Serious Accidents', fontsize=14, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.set_ylabel('')\nplt.style.use('dark_background')\nplt.savefig('driver_home_area.png')\nfig.show()\n","33f3900f":"#age_band_of_driver","0e0b9a0d":"#age_band_of_driver\nabod_order=['Under 16', '16-25', '26-45', '46-65','Over 65']\n\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"age_band_of_driver\", hue_order=abod_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"age_band_of_driver\", hue_order=abod_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Age Band of Driver in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Age Band of Driver in Not Serious Accidents\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Age Band of Driver in Serious Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n\nplt.style.use('dark_background')\nplt.savefig('age_band_of_driver.png')\nfig.show()\n","03a2d2a5":"#junction_control","07403517":"jc_order = ['Give way or uncontrolled', 'Auto traffic signal', 'Authorised person',\n            'Stop sign','Not at junction or within 20 metres']\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"junction_control\", hue_order=jc_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"junction_control\", hue_order=jc_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Junction Control in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Junction Control in Not Serious Accidents\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Junction Control in Serious Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n\nplt.style.use('dark_background')\nplt.savefig('junction_control.png')\nfig.show()\n","38345107":"#hit_object_off_carriageway","adb9053b":"hooffc_order=['None', 'Lamp post', 'Road sign or traffic signal', 'Other permanent object',\n              'Entered ditch', 'Tree', 'Near\/Offside crash barrier','Central crash barrier',\n              'Bus stop or bus shelter', 'Telegraph or electricity pole', 'Submerged in water',\n              'Wall or fence']\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"hit_object_off_carriageway\", hue_order=hooffc_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.3f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"hit_object_off_carriageway\", hue_order=hooffc_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Objects Hit Off Carriageway in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Objects Hit Off Carriageway in Not Serious Accidents\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Objects Hit Off Carriageway in Serious Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n\nplt.style.use('dark_background')\nplt.savefig('hit_object_off_carriageway.png')\nfig.show()\n","47ae0f7d":"#hit_object_in_carriageway 2","e898a12d":"hoinc_order=['None', 'Kerb', 'Other object', 'Bollard or refuge', 'Parked vehicle',\n             'Road works', 'Open door of vehicle', 'Central island of roundabout',\n             'Previous accident', 'Bridge (side)', 'Any animal (except ridden horse)',\n             'Bridge (roof)']\n\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,12))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"hit_object_in_carriageway\", hue_order=hoinc_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.3f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"hit_object_in_carriageway\", hue_order=hoinc_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.3f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Objects Hit in Carriageway in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Objects Hit in Carriageway in Not Serious Accidents\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Objects Hit in Carriageway in Serious Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n\nplt.style.use('dark_background')\nplt.savefig('hit_object_in_carriageway.png')\nfig.show()\n","37d78645":"#driver_imd_decile","8778368d":"imd_order=[\"Least deprived 10%\", \"Less deprived 10-20%\", \"Less deprived 20-30%\", \n           \"Less deprived 30-40%\",\"Less deprived 40-50%\",\"Most deprived 10%\",\n           \"More deprived 10-20%\", \"More deprived 20-30%\", \"More deprived 30-40%\",\n           \"More deprived 40-50%\"]\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,15))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"driver_imd_decile\", hue_order=imd_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"driver_imd_decile\", hue_order=imd_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Driver Area Deprivation Scores in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Driver Area Deprivation Scores in Not Serious Accidents\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Driver Area Deprivation Scores in Serious Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n\nplt.style.use('dark_background')\nplt.savefig('driver_imd_decile.png')\nfig.show()","2e976f1d":"#junction_detail","5a6da28e":"jud_order=['T or staggered junction', 'Mini-roundabout', 'Crossroads',\n           'Private drive or entrance', 'More than 4 arms (not roundabout)',\n           'Roundabout', 'Slip road', 'Other junction','Not at junction or within 20 metres']\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,15))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"junction_detail\", hue_order=jud_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"junction_detail\", hue_order=jud_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Junction Details in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Junction Details in Not Serious Accidents\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Junction Details in Serious Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n\nplt.style.use('dark_background')\nplt.savefig('junction_detail.png')\nfig.show()\n","d761e43a":"#junction_location","53e474ff":"jul_order=['Mid Junction - on roundabout or on main road', 'Entering main road',\n           'Approaching junction or waiting\/parked at junction approach',\n           'Cleared junction or waiting\/parked at junction exit', 'Leaving main road',\n           'Leaving roundabout', 'Entering roundabout', 'Entering from slip road',\n           'Not at or within 20 metres of junction']\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,15))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"junction_location\", hue_order=jul_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"junction_location\", hue_order=jul_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Junction Locations in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Junction Locations in Not Serious Accidents\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Junction Locations in Serious Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=15, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nplt.style.use('dark_background')\n\nplt.savefig('junction_location.png')\nfig.show()\n","4873dfc0":"#propulsion_code","e4141a3e":"pd_order=['Petrol', 'Heavy oil', 'Hybrid electric', 'Bio-fuel', 'LPG Petrol', 'Diesel',\n          'Fuel cells', 'New fuel technology', 'Electric diesel']\npd_order2=['Petrol', 'Heavy oil', 'Hybrid electric', 'Bio-fuel', 'LPG Petrol', 'Electric diesel']\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,15))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"propulsion_code\", hue_order=pd_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"propulsion_code\", hue_order=pd_order2,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Propulsion Codes in Accidents\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Propulsion Codes in Not Serious Accidents\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Propulsion Codes in Serious Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=13.5, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n\nplt.style.use('dark_background')\nplt.savefig('propulsion_code.png')\nfig.show()\n","2476f5ad":"#year","7f62d0ba":"year_order=[2010, 2011, 2012, 2013, 2014, 2015, 2016]\n\n\nfig, ax =plt.subplots(nrows=2, ncols=1,figsize = (15,15))\nsns.despine(top=False, right=True, left=True)\n\nax1 =sns.countplot(\"accident_seriousness\", hue=\"year\", hue_order=year_order,\n              palette=\"plasma\", data=not_serious, ax=ax[0])\nfor p in ax1.patches:\n    height = p.get_height()\n    ax1.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/nstotal*100),\n            ha=\"center\",fontsize=12) \n    \nax2 =  sns.countplot(\"accident_seriousness\", hue=\"year\", hue_order=year_order,\n              palette=\"plasma\", data=serious, ax=ax[1])\nfor p in ax2.patches:\n    height = p.get_height()\n    ax2.text(p.get_x()+p.get_width()\/2.,\n            height + 4,\n            '{:1.2f}%'.format(height\/setotal*100),\n            ha=\"center\",fontsize=12)\n    \nfig.suptitle(\"Accidents by Year\", fontsize=18, fontweight=\"bold\")\nax1.set_xlabel('Not Serious Accidents by Year\\n', fontsize=13.5, fontweight=\"bold\")\nax2.set_xlabel('Serious Accidents by Year', fontsize=13.5, fontweight=\"bold\")\nax1.set_ylabel('Number of Accidents', fontsize=13.5, fontweight=\"bold\")\nax2.set_ylabel('Number of Accidents', fontsize=13.5, fontweight=\"bold\")\nax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n\nplt.style.use('dark_background')\nplt.savefig('year.png')\nfig.show()\n","32bf8261":"#Machine learning ----------------------------------------------------------------------------------------","3ad5b6b2":"df1 = df\ndf1.set_index('accident_index', inplace = True)\ndf1.head()","e5a5c3bf":"df1 = df1.drop(['accident_severity'], axis = 1) ","61397282":"print(df1.head())","9fb85cd2":"print(df1.columns)","17b6403a":"#separating by dtypes\nnotif = df1.select_dtypes(exclude = ['int','float','int64'])\nintfldtypes = df1.select_dtypes(include = ['int','float','int64'])\nprint('Objects',notif.columns)\nprint(\"\\nNonObjects\",intfldtypes.columns)\nprint(df1.shape)\nprint(notif.shape)\nprint(intfldtypes.shape)","16245f39":"#label encode objects\nobj_le = notif.apply(LabelEncoder().fit_transform)\ndf_ml = pd.concat([obj_le,intfldtypes], axis = 1, sort = False)\nprint(df_ml.shape)","1a120758":"df_ml.dtypes","3558b295":"#start from here -------------------------------------------------------------------------------------------","f062c219":"#pickling data\n#df_ml.to_pickle(\"dfx.pkl\")\ndf_ml = pd.read_pickle(\"..\/input\/notsampled-pkl\/not_sampled.pkl\")","784f62cc":"X = df_ml.drop(['accident_seriousness'], axis = 1)\ny = df_ml['accident_seriousness']","6c872025":"df_ml.accident_seriousness.value_counts()","98897b84":"plt.figure(figsize = (12,6))\nax = sns.countplot(x = \"accident_seriousness\", palette = \"magma\", data = df_ml)\n\nplt.style.use('dark_background')\nplt.title(\"Accident Seriousness\",fontsize = 25,fontweight = \"bold\")\nplt.xlabel(\"\", fontsize = 15, fontweight = \"bold\")\nplt.ylabel(\"\\nNumber of Accidents\\n\", fontsize = 15, fontweight = \"bold\")\nplt.xticks(fontsize = 18)\nplt.yticks(fontsize = 12)\nsns.despine(top = True, right = True, left = True, bottom = False)\nplt.savefig('accident_seriousness.png')\nplt.show()","f27d08ef":"#testing and training sets\nres_X_train, res_X_test, res_y_train, res_y_test = train_test_split(X, y, test_size = 0.25, random_state = 27)","f02da627":"#under sampling\nres_X = pd.concat([res_X_train, res_y_train], axis = 1)\nnot_severe = res_X[res_X.accident_seriousness == 0]\nsevere = res_X[res_X.accident_seriousness == 1]\n\nnot_severe_decreased = resample(not_severe, replace = True, n_samples = len(severe), random_state = 27)\nnewdf = pd.concat([severe, not_severe_decreased])","1f2f7085":"newdf.accident_seriousness.value_counts()","9bf5e5e5":"#over sampling\nX1 = res_X_train.values\ny1 = res_y_train.values\n\nprint(\"Before upsampling\")\na = []\nfor i in np.unique(y1):\n    a.append(np.sum(y1 == i))\n    print(\"class %d - samples: %d\" % (i, np.sum(y1 == i)))\n\noversampler = sv.MulticlassOversampling(sv.distance_SMOTE())\nX_samp, y_samp = oversampler.sample(X1, y1)\n\nprint(\"After upsampling\")\nb = []\nfor i in np.unique(y_samp):\n    b.append(np.sum(y_samp == i))\n    print(\"class %d - samples: %d\" % (i, np.sum(y_samp == i)))","92f60012":"new_df = pd.DataFrame(data = X_samp, columns = X.columns)\nnew_df['accident_seriousness'] = y_samp","3830c4ff":"print(new_df.shape)","3a5c906e":"#save csv file\n#out = pd.DataFrame(data = new_df)\n#out.to_csv('.\/finalcsv.csv')","71baf301":"res_X_train = new_df.drop('accident_seriousness', axis = 1)\nres_y_train = new_df.accident_seriousness","df30352e":"#Bagging classifier ----------------------------------------------------------------------------------------","470b4bde":"begin = time.time()\n\nclf = BaggingClassifier(max_features = X.shape[1], n_estimators = 500, random_state = 42)\nclf.fit(res_X_train, res_y_train)\nprint(\"Training completed...\")\nprint('~' * 40)\n\ny_pred = clf.predict(res_X_test)\ntime.sleep(1)\nend = time.time()\nprint(\"Testing completed...\")\nprint('~' * 40)\nprint('~' * 40)\n\nprint(\"BaggingClassifier Results:\")\nprint('~' * 40)\n\nacc = accuracy_score(res_y_test, y_pred)\nprint(\"Accuracy: {:.4%}\".format(acc))\n\nskplt.metrics.plot_confusion_matrix(res_y_test, y_pred, figsize = (5,5))\n\nprint(f\"Total runtime of the Model is {end - begin} s\")","37fa0304":"#Balanced bagging classifier --------------------------------------------------------------------------------","8d7d8504":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 27)","496f792f":"begin = time.time()\n\nclf2 = BalancedBaggingClassifier(max_features = X.shape[1], n_estimators = 500, replacement = True, sampling_strategy = 'majority', random_state = 42)\nclf2.fit(X_train, y_train)\nprint(\"Training completed...\")\nprint('~' * 40)\n\ny_pred2 = clf2.predict(X_test)\ntime.sleep(1)\nend = time.time()\nprint(\"Testing completed...\")\nprint('~' * 40)\nprint('~' * 40)\n\nprint(\"BalancedBaggingClassifier Results:\")\nprint('~' * 40)\n\nacc2 = accuracy_score(y_test, y_pred2)\nprint(\"Accuracy: {:.4%}\".format(acc2))\n\nskplt.metrics.plot_confusion_matrix(y_test, y_pred2, figsize = (5,5))\n\nprint(f\"Total runtime of the Model is {end - begin} s\")","6d8b9d16":"#Completed --------------------------------------------------------------------------------------------------","c500051b":"#### Method:\nFor my visualizations I have decided to use some of the features with the highest correlations to accident_seriousness:\n* did_police_officer_attend_scene_of_accident \n* x1st_point_of_impact \n* number_of_vehicles  \n* speed_limit\n* urban_or_rural_area  \n* skidding_and_overturning \n* vehicle_leaving_carriageway \n* sex_of_driver     \n* vehicle_type  \n* vehicle_manoeuvre \n* engine_capacity_cc \n* number_of_casualties                           \n* driver_home_area_type  \n* age_band_of_driver  \n* junction_control  \n* hit_object_off_carriageway\n* hit_object_in_carriageway \n* driver_imd_decile *\n* junction_detail *\n* junction_location *\n* propulsion_code *\n* year *\n***\nNote: The columns used were selected because of the absolute value of their correlation in relation to accident_seriousness\n\n*columns added after correlation was done after undersampling","9e43c637":"I want to condense the vehicle type variables. ","28b657f7":"#### Chi-Squared Test\n\nBefore these visualizations were done, I wanted to be sure that the visualizations were of some importance to accident_seriousness. For this, the chi-squared test was used.","c7ab651c":"### Imbalanced Data\nThe data in this dataset is extremely imbalanced for what we are trying to predict. We are going to resample the data as undersampling, where we reduce the number of majority (Not Serious Accidents) samples.<br><br> \n***\nThe machine learning classifier algorithms that we are going to use are as follows:\n* Bagging Classifier (sklearn)\n* AdaBoost Classifier (sklearn)\n* Random Forest Classifier (sklearn)\n* Gradient Boosting Classifier (sklearn)*\n* LightGBM Classifier (LightGBM)\n* XGBoost Classifier (xgboost)\n* Balanced Bagging Classifier(imblearn)\n* Balanced Random Forest Classifier (imblearn) \n* Easy Ensemble Classifier (imblearn)<br><br>\n***\n*Gradient Boosting was commented out because of the time it took to run (18hrs) and not having relevant enough results to still consider.","05029f4c":"## Visualizations In Relation to Accident Seriousness","0f4bc031":"### Visualization Summary\n* <b>did_police_officer_attend_scene_of_accident:<\/b> Police attended most accidents but were less likely to NOT be called in serious accidents.\n* <b>x1st_point_of_impact:<\/b> Majority of accidents were front impacted as the first point of impact. Not serious accidents had a higher percentage of Back impact accidents than serious accidents. Serious accidents had higher percentages of Offside and Nearside accidents. \n* <b>number_of_vehicles:<\/b>  Nothing significant.\n* <b>speed_limit:<\/b> Majority of accidents occurred in 30 speed limit zones. It would have been beneficial to have actual data on the speeds of the vehicles involved or at least if they were speeding.\n* <b>urban_or_rural_area:<\/b> Rural areas had a higher percentage of serious accidents. This may relate to hospital locations or emergency vehicle arrival data which was not available.\n* <b>skidding_and_overturning:<\/b> Higher percentages of serious accidents involved skidding, jackknifing or overturning.\n* <b>vehicle_leaving_carriageway:<\/b> Most vehicles did not leave the carriageway in either type of accident, however serious accidents had higher percentages of those that did leave the carriageway.\n* <b>sex_of_driver:<\/b> Men were more involved in both serious and not serious accidents, however according to racfoundation.org, there are only 355 of female privately registered cars on UK roads.\n* <b>vehicle_type:<\/b>  Motorcycles were involved in a significantly higher percentage of serious accidents than not serious accidents\n* <b>vehicle_manoeuvre:<\/b> Nothing significant.                      \n* <b>driver_home_area_type:<\/b> Rural and Small Towns has higher percentages of serious accidents. This may relate to hospital locations or emergency vehicle arrival data which was not available.\n* <b>age_band_of_driver:<\/b> The age bands over the age of 25 had a higher percentage of serious accidents than not serious.\n* <b>junction_control:<\/b>  Most areas with accidents were uncontrolled. \n* <b>hit_object_off_carriageway:<\/b> The majority of accidents did not involve objects being hit off the carriageway, however serious accidents had higher percentages of accidents that did involve hitting an object off the carriageway.\n* <b>hit_object_in_carriageway:<\/b> Most accidents did not involve objects being hit in the carriageway; however serious accidents had higher percentages of accidents that did involve hitting an object off the carriageway.\n* <b>driver_imd_decile:<\/b> Nothing significant. Most accidents occurred in areas that were Less deprived 20-30%\n* <b>junction_detail:<\/b> T or staggered junctions were where most of the accidents occurred.\n* <b>junction_location:<\/b> Nothing that separates the two serious types. However, most accidents seem to have occurred in Mid Junction - on roundabout or on main road or situations where the driver was approaching junction or waiting\/parked at junction approach.\n* <b>propulsion_code:<\/b> Diesel, Fuel cells, New fuel technology, vehicles were not recorded as a part of serious accidents.\n* <b>year:<\/b> There has been a spike in percentage of serious accidents over the years. However, the percentage of not serious accidents has remained somewhat consistent"}}