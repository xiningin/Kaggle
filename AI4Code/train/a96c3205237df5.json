{"cell_type":{"2b70eb5c":"code","5e3c89eb":"code","d8aa5037":"code","7c09fd32":"code","678604e0":"code","f8d157b4":"code","4b9cb42c":"code","1725ca54":"code","311ccd6b":"code","969e562b":"code","6bced3d9":"markdown","956c721d":"markdown","bd63c596":"markdown","efe6a305":"markdown","74565a80":"markdown","68584198":"markdown"},"source":{"2b70eb5c":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor \nfrom sklearn.impute import SimpleImputer\n","5e3c89eb":"train_df = pd.read_csv('..\/input\/Dataset\/Train.csv')\ntest_df = pd.read_csv('..\/input\/Dataset\/Test.csv')\n\ntrain_df.head()\ntrain_df.describe()","d8aa5037":"# req_columns = ['Gender','Age', 'Education_Level', 'Relationship_status', 'Hometown', 'Unit', 'Decision_skill_posses', \n#                'time_of_service', 'Time_since_promotion']\nreq_cols = ['Age', 'Education_Level', 'Time_of_service', 'Time_since_promotion', 'growth_rate', 'Travel_Rate', 'Post_Level',\n           'Pay_Scale', 'Work_Life_balance', 'VAR1', 'VAR2', 'VAR3', 'VAR4', 'VAR5','VAR6']\n\nX = train_df[req_cols]\ny = train_df.Attrition_rate\n\ntrain_X, valid_X, train_y, valid_y = train_test_split(X, y, random_state=0)\nprint(\"Size of total  {}, Size of train data {}, Size of vaid data {}\".format(len(X), len(train_X), len(valid_X)))","7c09fd32":"missing_valid_cols = [col for col in valid_X.columns if valid_X[col].isnull().any()]\nprint(\"missing_valid_cols \",missing_valid_cols)\nmissing_train_cols = [col for col in train_X.columns if train_X[col].isnull().any()]\nprint(\"missing_valid_cols \",missing_train_cols)\n\n## Imputing missing values\nimputer = SimpleImputer()\nnew_train_X = pd.DataFrame(imputer.fit_transform(train_X))\nnew_valid_X = pd.DataFrame(imputer.transform(valid_X))\n## Adding columns\nnew_train_X.columns = train_X.columns\nnew_valid_X.columns = valid_X.columns\ntrain_X = new_train_X\nvalid_X = new_valid_X\n","678604e0":"def train_and_evaluate(train_X, train_y, valid_X, valid_y, max_leaf=500):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf, random_state=0)\n    ## Fitting model\n    model.fit(train_X, train_y)\n    ## Training Loss\n    train_preds = model.predict(train_X)\n    train_loss = mean_absolute_error(train_preds, train_y)\n    predictions = model.predict(valid_X)\n    valid_loss = mean_absolute_error(predictions, valid_y)\n    print(\"Base Line model performance \\n \\t \\t----------------------------- \\n \\t \\\n                 Train loss {:,.4f} \\t Valid loss {:,.4f}\".format(train_loss, valid_loss))\n    return model","f8d157b4":"for i in [10, 25, 50, 100, 150, 250, 500, 250, 1000]:\n    print(i)\n    train_and_evaluate(train_X, train_y, valid_X, valid_y, max_leaf=i)","4b9cb42c":"## Best model\nmodel = train_and_evaluate(train_X, train_y, valid_X, valid_y, max_leaf=10)","1725ca54":"req_cols = ['Age', 'Education_Level', 'Time_of_service', 'Time_since_promotion', 'growth_rate', 'Travel_Rate', 'Post_Level',\n           'Pay_Scale', 'Work_Life_balance', 'VAR1', 'VAR2', 'VAR3', 'VAR4', 'VAR5','VAR6']\n\ntest_X_plus = test_df[req_cols]\n\ncols_missing = [col for col in test_X_plus.columns if test_X_plus[col].isnull().any()]\nprint(cols_missing)\n\n## Imputing\nnew_test_X = pd.DataFrame(imputer.transform(test_X_plus))\n## Adding columns\nnew_test_X.columns = test_X_plus.columns","311ccd6b":"def prediction(model, test_X):\n    preds = model.predict(test_X)\n    return preds\npreds = prediction(model, new_test_X)\nprint(preds)","969e562b":"def submit(preds, test_df, filename = 'submission.csv'):\n    ## Employee_ID   Attrition_rate\n    empId = test_df['Employee_ID'].tolist()\n    dict = {\"Employee_ID\": empId, \"Attrition_rate\": preds}\n    sub = pd.DataFrame(dict)\n    sub.to_csv(filename, index=False)\nsubmit(preds, test_df)","6bced3d9":"## Train and Validation Data","956c721d":"## Missing Value Analysis and Correction","bd63c596":"## Prediction","efe6a305":"## Configuration Files","74565a80":"## Libraries","68584198":"## Baseline Model Using Decision Tree Regressor"}}