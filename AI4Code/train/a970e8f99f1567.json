{"cell_type":{"1756ac34":"code","c0100b09":"code","49d8db9a":"code","e6932fc6":"code","c8804580":"code","f4b0b974":"code","e145564a":"code","28af745e":"code","5a092934":"code","d2099a65":"code","fc13e662":"code","81990fb3":"code","c9f91b56":"code","09959aa3":"code","dc69153d":"code","aeda79ee":"code","c651d6c9":"code","6e9993dd":"code","2c21790b":"code","54eb379b":"code","b295c0b1":"code","1c3d5c8f":"code","d93259d0":"code","9b4bfff2":"code","c4f98f88":"markdown","1259709d":"markdown","59348f0b":"markdown","fd41355d":"markdown","47a282ee":"markdown","b045bbe9":"markdown","598707e5":"markdown","388a411d":"markdown","c16df8ab":"markdown","eef35c57":"markdown","3b9ad3df":"markdown"},"source":{"1756ac34":"#Importing necessary packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c0100b09":"#Reading dataset\ndata = pd.read_csv('..\/input\/logistic-regression\/Social_Network_Ads.csv')\ndata.head()","49d8db9a":"#Checking for missing data\ndata.info()","e6932fc6":"#Properties of data\ndata.describe()","c8804580":"#Using label encoder to encode the categorical feature - Gender\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ndata['Gender'] = le.fit_transform(data['Gender'])\ndata.head()","f4b0b974":"#Plotting heatmap of correlation matrix of features\nplt.figure(figsize=(10,10))\nsns.heatmap(data.corr(),annot=True,cmap='inferno',mask=np.triu(data.corr(),k=1))","e145564a":"#Replacing space in column headers with '_'\ndata.columns = data.columns.str.replace(' ', '_')\ndata.info()","28af745e":"#Dropping user_id and gender\ndata.drop(labels = ['User_ID','Gender'], axis = 1, inplace = True)\ndata.info()","5a092934":"#checking for duplicates\nsum(data.duplicated())","d2099a65":"#dropping ALL duplicate values\ndata.drop_duplicates(keep = False, inplace = True)","fc13e662":"#Plotting boxplot of features to find outliers\nplt.figure(figsize=(20, 12))\n\nplt.subplot(3,3,1)\nsns.boxplot(data['Age'],color='yellow')\nplt.subplot(3,3,2)\nsns.boxplot(data['EstimatedSalary'], color='yellow')\n\nplt.show()","81990fb3":"#Viewing class distribution\nplt.figure(figsize=(6, 4))\nsns.countplot('Purchased', data=data)\nplt.title('Class Distributions')","c9f91b56":"#Getting X and y\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values","09959aa3":"#Splitting data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\n\n#reshaping\ny_train = y_train.reshape(len(y_train), 1)\ny_test = y_test.reshape(len(y_test), 1)\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)","dc69153d":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","aeda79ee":"#adding bias variable\nX_new = np.concatenate((np.ones((len(X_train), 1), dtype = int), X_train), axis = 1)\nprint(X_new.shape)","c651d6c9":"#Sigmoid activation function\ndef sigmoid_function(X, theta):\n    \"\"\"\n    Arguments: \n      X - Feature matrix X also containing the bias variable\n      theta - parameters being optimized\n\n    Returns:\n      h - hypothesis function 1 \/ (1 + e ^-(X * theta))\n    \"\"\"\n\n    h = (1 \/ (1 + np.exp(-np.matmul(X, theta))))\n    return h","6e9993dd":"#Computing cost\ndef cost_function(m, h, y):\n    \"\"\"\n    Arguments: \n      m - size of training set\n      h - hypothesis function (X * theta)\n      y - dependent variable\n\n    Returns:\n      J - Computed cost    \n    \"\"\"\n    \n    J = (np.sum((-y * np.log(h)) - ((1 - y) * (np.log(1 - h)))) \/ m)\n    return J","2c21790b":"#gradient descent\ndef grad_func(m, X, y, theta, alpha, h):\n    \"\"\"\n    Arguments: \n      m - size of training set\n      X - Feature matrix X also containing the bias variable\n      y - dependent variable\n      theta - parameters being optimized\n      alpha - learning rate \n      h - hypothesis function (X * theta)\n\n    Returns:\n      theta - Optimized parameters    \n    \"\"\"\n\n    theta = theta - ((alpha\/m) * (np.matmul((h - y).T, X))).T\n    return theta","54eb379b":"#Logistic Regression from scratch\nm = len(X_new)\nalpha = 0.01403\ncost = []\nepochs = 2000\n\n#theta initialization\ntheta = np.zeros((X_new.shape[1], 1),dtype=float)\n\nfor i in range(epochs):\n  h = sigmoid_function(X_new, theta)\n  J = cost_function(m, h, y_train)\n  cost.append(J)\n  theta = grad_func(m, X_new, y_train, theta, alpha, h)\n\n#Plotting cost function vs epochs\nplt.plot(list(range(epochs)), cost, '-r')\nplt.title(\"Cost function vs epochs\")\nplt.xlabel(\"epochs\")\nplt.ylabel(\"J - cost function\")\nplt.show()","b295c0b1":"#Preparing test data\n\n#adding bias variable\nXt_new = np.concatenate((np.ones((len(X_test), 1), dtype=int), X_test), axis=1)\nprint(Xt_new.shape, y_test.shape)","1c3d5c8f":"#Predicting results\ny_pred = sigmoid_function(Xt_new, theta)\nprint(y_pred.shape)\n\ny_pred_new = []\nfor x in y_pred:\n    y_pred_new.append(1 if(x > 0.5) else 0)\n\ny_pred_new = np.array(y_pred_new)\ny_pred_new = y_pred_new.T\ny_pred_new = y_pred_new.reshape(len(y_pred_new), 1)\n\nprint(y_pred_new.shape)","d93259d0":"#Confusion matrix visualized:\nfrom sklearn.metrics import confusion_matrix\ncf_matrix = confusion_matrix(y_test, y_pred_new)\n\nsns.heatmap(cf_matrix, annot=True)","9b4bfff2":"#Metrics based result\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred_new))","c4f98f88":"As there is little to no relation of userID and gender w.r.t the dependent feature - Purchased, we will drop it.","1259709d":"There seems to be no data missing","59348f0b":"Let us find outliers","fd41355d":"There seems to be no outliers present","47a282ee":"**Thank you!**","b045bbe9":"Implementing logistic regression from scratch","598707e5":"These are the duplicate data present. We will delete them","388a411d":"The data is not too imbalanced so no need of resampling.","c16df8ab":"Scaling data","eef35c57":"#**Model Training**","3b9ad3df":"Before moving on further let us encode the categorical variable - gender"}}