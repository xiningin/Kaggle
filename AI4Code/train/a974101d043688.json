{"cell_type":{"4529b577":"code","1a4e6bd1":"code","5fdadb2e":"code","2898b8a2":"code","c0566a56":"code","85e52299":"code","d04ace8b":"code","e9830011":"code","a037d9f0":"code","be0470e1":"markdown","052b1c7a":"markdown","86f50080":"markdown","18d85bb1":"markdown"},"source":{"4529b577":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\n    \nfrom pathlib import Path","1a4e6bd1":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_tasks = sorted(os.listdir(test_path))","5fdadb2e":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n\n\ndef plot_task(task, swap=False):\n    plt_index = (0,1) if not swap else (1,0)\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[plt_index[0]][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[plt_index[0]][fig_num].set_title(f'Train-{i} in')\n        axs[plt_index[0]][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[plt_index[0]][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[plt_index[1]][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[plt_index[1]][fig_num].set_title(f'Train-{i} out')\n        axs[plt_index[1]][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[plt_index[1]][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[plt_index[0]][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[plt_index[0]][fig_num].set_title(f'Test-{i} in')\n        axs[plt_index[0]][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[plt_index[0]][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[plt_index[1]][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[plt_index[1]][fig_num].set_title(f'Test-{i} out')\n        axs[plt_index[1]][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[plt_index[1]][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()","2898b8a2":"def open_plot_task(task_name, swap=False):\n    task_file = str(training_path \/ task_name)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n\n    plot_task(task, swap=swap)","c0566a56":"reversible = pd.DataFrame([[\"e509e548.json\",True,True],[\"11852cab.json\",False,False],[\"ecdecbb3.json\",False,False],[\"1b60fb0c.json\",True,True],[\"9d9215db.json\",False,False],[\"6455b5f5.json\",True,True],[\"dae9d2b5.json\",False,False],[\"f9012d9b.json\",False,False],[\"10fcaaa3.json\",True,False],[\"39a8645d.json\",False,False],[\"e76a88a6.json\",True,False],[\"6c434453.json\",True,False],[\"a1570a43.json\",False,False],[\"d43fd935.json\",True,False],[\"88a10436.json\",False,False],[\"855e0971.json\",False,False],[\"9aec4887.json\",False,False],[\"e9614598.json\",True,True],[\"98cf29f8.json\",False,False],[\"f5b8619d.json\",True,False],[\"48d8fb45.json\",False,False],[\"f25ffba3.json\",True,False],[\"8a004b2b.json\",False,False],[\"7447852a.json\",True,True],[\"9ecd008a.json\",False,False],[\"d06dbe63.json\",True,True],[\"fafffa47.json\",False,False],[\"952a094c.json\",True,False],[\"1fad071e.json\",False,False],[\"746b3537.json\",False,False],[\"d687bc17.json\",False,False],[\"99b1bc43.json\",False,False],[\"90f3ed37.json\",True,True],[\"b7249182.json\",True,False],[\"93b581b8.json\",True,False],[\"4c5c2cf0.json\",False,False],[\"d23f8c26.json\",False,False],[\"7b7f7511.json\",True,False],[\"6e19193c.json\",True,False],[\"3eda0437.json\",True,True],[\"beb8660c.json\",False,False],[\"af902bf9.json\",True,True],[\"dc1df850.json\",True,True],[\"264363fd.json\",False,False],[\"27a28665.json\",False,False],[\"c59eb873.json\",True,False],[\"9172f3a0.json\",True,False],[\"5521c0d9.json\",False,False],[\"0e206a2e.json\",False,False],[\"3c9b0459.json\",True,False]],\n                         columns=[\"task_name\", \"reversible\", \"trivial\"])\nreversible.head()","85e52299":"reversible.groupby([\"reversible\", \"trivial\"]).reversible.count() \/ reversible.reversible.count()","d04ace8b":"open_plot_task(reversible.query(\"reversible==False\").task_name.iloc[0], swap=True)","e9830011":"open_plot_task(reversible.query(\"reversible==True and trivial==False\").task_name.iloc[0], swap=True)","a037d9f0":"open_plot_task(reversible.query(\"reversible==True and trivial==True\").task_name.iloc[0], swap=True)","be0470e1":"# Reversible Tasks\n\nWhile thinking about the methods to search through the DSL, I came across bidirectional search and wondered how it might apply here. In general, bidirectional search is good because it helps fight against the exponential growth of leaves with the tree depth, by cutting it in half as it searches from both sides. On the other hand, it has many limitations in the cases where it can be applied.\n\nAs a starting step, I looked through 50 random tasks to extract some statistics on the reversible nature of the tasks.\n\nI defined them as reversible if it's possible to guess the input from the output. I went on to define a reversible task as trivial if it reduces the task to some simple action such as remove all blue tiles and doesn't require the same priors as the original, un-reversed task.\n\nWith this small sample I found that ~50% of the tasks are indeed reversible, with >50% of these being non-trivial.\n\nIf it's useful to anyone, the mappings are below as well as a visualisation of some of the tasks.","052b1c7a":"Calculate the distribution statistics.","86f50080":"Visualise an example of each, non-reversible, reversible and trivially reversible. Note the output and input have swapped locations for better visualisation.","18d85bb1":"Import the results for the checked tasks."}}