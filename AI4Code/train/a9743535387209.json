{"cell_type":{"d458ab76":"code","170bfdb3":"code","4deeb2a8":"code","b42b4022":"code","0b44611e":"code","c9f12c8a":"code","5e148e67":"code","a6d5bb6e":"code","9c16ffce":"code","fa3dd8a8":"code","615f716a":"code","f837f076":"code","dd12b3d9":"code","19fea03d":"code","7c8ed6d3":"code","601a4ccb":"code","ef4e6260":"code","e8ff7b9d":"code","6c66b79f":"code","9b3b2f33":"code","d4dddc68":"code","d2059b8b":"code","25f54487":"code","03e2edbe":"code","7e480f14":"code","ff0952d4":"code","ac4f0475":"code","26b45fb0":"code","0c2ac902":"code","0ae2cbea":"code","5b6885f6":"code","fffe285f":"code","ae935a50":"code","cc340376":"code","0ed7cb9d":"code","c831e7dc":"code","53e209b9":"code","453ccf05":"code","3b3a72cb":"code","37f68935":"code","d97cb1b5":"code","a1903fc1":"code","13c64778":"code","9d152f29":"markdown","f60da50c":"markdown","51163fea":"markdown","ed7dce0d":"markdown","2516dae8":"markdown","6294d6b3":"markdown","fa7a0e83":"markdown","ca9c40ac":"markdown","88a3cbc3":"markdown","dc461258":"markdown","b48f604f":"markdown","6a228611":"markdown","d3188837":"markdown","7b95846d":"markdown","2c2657cb":"markdown","26856914":"markdown","a38bfcfa":"markdown","b9766d73":"markdown","2029a0b9":"markdown","0322fda3":"markdown","afcd2354":"markdown","e167970b":"markdown","27c4b6f2":"markdown","221dda9a":"markdown","b19cfeb4":"markdown","f29cd0c3":"markdown","fc121949":"markdown","72a49573":"markdown","a0a284c1":"markdown","cdd11e78":"markdown","1f93e3ca":"markdown","defc99bc":"markdown","1c027682":"markdown","a3306a5a":"markdown","93debb82":"markdown","3b193c66":"markdown","28875e5e":"markdown","7b0dc454":"markdown","42dddce6":"markdown","7cb7eb6d":"markdown","b9140035":"markdown","82bbf41c":"markdown","1a3cb63f":"markdown","b66f8565":"markdown","ceb68a39":"markdown","430f395a":"markdown","b046208a":"markdown","067b0e06":"markdown","068c9c4b":"markdown","d8de2df1":"markdown","386b4150":"markdown","6a60ef68":"markdown","674ab8b0":"markdown"},"source":{"d458ab76":"%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.rcParams['figure.figsize'] = (10, 8)\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nimport collections\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom ipywidgets import Image\nfrom io import StringIO\nimport pydotplus #pip install pydotplus","170bfdb3":"# Create dataframe with dummy variables\ndef create_df(dic, feature_list):\n    out = pd.DataFrame(dic)\n    out = pd.concat([out, pd.get_dummies(out[feature_list])], axis = 1)\n    out.drop(feature_list, axis = 1, inplace = True)\n    return out\n\n# Some feature values are present in train and absent in test and vice-versa.\ndef intersect_features(train, test):\n    common_feat = list( set(train.keys()) & set(test.keys()))\n    return train[common_feat], test[common_feat]","4deeb2a8":"features = ['Looks', 'Alcoholic_beverage','Eloquence','Money_spent']","b42b4022":"df_train = {}\ndf_train['Looks'] = ['handsome', 'handsome', 'handsome', 'repulsive',\n                         'repulsive', 'repulsive', 'handsome'] \ndf_train['Alcoholic_beverage'] = ['yes', 'yes', 'no', 'no', 'yes', 'yes', 'yes']\ndf_train['Eloquence'] = ['high', 'low', 'average', 'average', 'low',\n                                   'high', 'average']\ndf_train['Money_spent'] = ['lots', 'little', 'lots', 'little', 'lots',\n                                  'lots', 'lots']\ndf_train['Will_go'] = LabelEncoder().fit_transform(['+', '-', '+', '-', '-', '+', '+'])\n\ndf_train = create_df(df_train, features)\ndf_train","0b44611e":"df_test = {}\ndf_test['Looks'] = ['handsome', 'handsome', 'repulsive'] \ndf_test['Alcoholic_beverage'] = ['no', 'yes', 'yes']\ndf_test['Eloquence'] = ['average', 'high', 'average']\ndf_test['Money_spent'] = ['lots', 'little', 'lots']\ndf_test = create_df(df_test, features)\ndf_test","c9f12c8a":"# Some feature values are present in train and absent in test and vice-versa.\ny = df_train['Will_go']\ndf_train, df_test = intersect_features(train=df_train, test=df_test)\ndf_train","5e148e67":"df_test","a6d5bb6e":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier(max_depth = 2, random_state=17)\ntree.fit(df_train,y)\n","9c16ffce":"from sklearn.tree import export_graphviz\nexport_graphviz(tree,\n               out_file='demo_tree_1.dot',filled=True,\n               feature_names=df_train.columns)","fa3dd8a8":"balls = [1 for i in range(9)] + [0 for i in range(11)]","615f716a":"# two groups\nballs_left  = [1 for i in range(8)] + [0 for i in range(5)] # 8 blue and 5 yellow\nballs_right = [1 for i in range(1)] + [0 for i in range(6)] # 1 blue and 6 yellow","f837f076":"data_train = pd.read_csv('..\/input\/adult_train.csv')","dd12b3d9":"data_train.tail()","19fea03d":"data_test = pd.read_csv('..\/input\/adult_test.csv')","7c8ed6d3":"data_test.tail()","601a4ccb":"# necessary to remove rows with incorrect labels in test dataset\ndata_test = data_test[(data_test['Target'] == ' >50K.') | (data_test['Target']==' <=50K.')]\n\n# encode target variable as integer\ndata_train.loc[data_train['Target']==' <=50K', 'Target'] = 0\ndata_train.loc[data_train['Target']==' >50K', 'Target'] = 1\n\ndata_test.loc[data_test['Target']==' <=50K.', 'Target'] = 0\ndata_test.loc[data_test['Target']==' >50K.', 'Target'] = 1","ef4e6260":"data_test.describe(include='all').T","e8ff7b9d":"data_train['Target'].value_counts()","6c66b79f":"fig = plt.figure(figsize=(25, 15))\ncols = 5\nrows = np.ceil(float(data_train.shape[1]) \/ cols)\nfor i, column in enumerate(data_train.columns):\n    ax = fig.add_subplot(rows, cols, i + 1)\n    ax.set_title(column)\n    if data_train.dtypes[column] == np.object:\n        data_train[column].value_counts().plot(kind=\"bar\", axes=ax)\n    else:\n        data_train[column].hist(axes=ax)\n        plt.xticks(rotation=\"vertical\")\nplt.subplots_adjust(hspace=0.7, wspace=0.2)","9b3b2f33":"data_train.dtypes","d4dddc68":"data_test.dtypes","d2059b8b":"data_test['Age'] = data_test['Age'].astype(int)","25f54487":"data_test['fnlwgt'] = data_test['fnlwgt'].astype(int)\ndata_test['Education_Num'] = data_test['Education_Num'].astype(int)\ndata_test['Capital_Gain'] = data_test['Capital_Gain'].astype(int)\ndata_test['Capital_Loss'] = data_test['Capital_Loss'].astype(int)\ndata_test['Hours_per_week'] = data_test['Hours_per_week'].astype(int)","03e2edbe":"# choose categorical and continuous features from data\n\ncategorical_columns = [c for c in data_train.columns \n                       if data_train[c].dtype.name == 'object']\nnumerical_columns = [c for c in data_train.columns \n                     if data_train[c].dtype.name != 'object']\n\nprint('categorical_columns:', categorical_columns)\nprint('numerical_columns:', numerical_columns)","7e480f14":"# fill missing data\n\nfor c in categorical_columns:\n    data_train[c].fillna(data_train[c].mode(), inplace=True)\n    data_test[c].fillna(data_train[c].mode(), inplace=True)\n    \nfor c in numerical_columns:\n    data_train[c].fillna(data_train[c].median(), inplace=True)\n    data_test[c].fillna(data_train[c].median(), inplace=True)","ff0952d4":"data_train = pd.concat([data_train[numerical_columns],\n    pd.get_dummies(data_train[categorical_columns])], axis=1)\n\ndata_test = pd.concat([data_test[numerical_columns],\n    pd.get_dummies(data_test[categorical_columns])], axis=1)","ac4f0475":"set(data_train.columns) - set(data_test.columns)","26b45fb0":"data_train.shape, data_test.shape","0c2ac902":"data_test['Country_ Holand-Netherlands'] = 0","0ae2cbea":"set(data_train.columns) - set(data_test.columns)","5b6885f6":"data_train.head(2)","fffe285f":"data_test.head(2)","ae935a50":"X_train = data_train.drop(['Target'], axis=1)\ny_train = data_train['Target']\n\nX_test = data_test.drop(['Target'], axis=1)\ny_test = data_test['Target']","cc340376":"from sklearn.tree import DecisionTreeClassifier\n# for maximum depth = 3\ntree = DecisionTreeClassifier(random_state=17, max_depth=3)\ntree.fit(X_train,y_train)","0ed7cb9d":"tree_predcs = tree.predict(X_test)","c831e7dc":"accuracy_score(y_test,tree_predcs) #84,4","53e209b9":"from sklearn.model_selection import GridSearchCV, StratifiedKFold\ntree_params = {'max_depth': range(2,11)}\n\nskf = StratifiedKFold(n_splits = 5, shuffle=True, random_state=17)\nlocally_best_tree = GridSearchCV(estimator = tree, param_grid=tree_params\n                                , cv=skf, n_jobs=-1, verbose = 1)\nlocally_best_tree.fit(X_train, y_train)","453ccf05":"locally_best_tree.best_params_","3b3a72cb":"tuned_tree = locally_best_tree\ntuned_tree.fit(X_train,y_train)\ntuned_tree_predictions = tuned_tree.predict(X_test)\naccuracy_score(y_test,tuned_tree_predictions) ","37f68935":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\nrf = RandomForestClassifier(n_estimators=100,max_depth=2, \n                            random_state=17)\n\nrf.fit(X_train,y_train)","d97cb1b5":"rf_predcs = rf.predict(X_test)\naccuracy_score(y_test,rf_predcs)","a1903fc1":"forest_params = {'max_depth':range(10,21), \n                 'max_features':range(5,105,20)}\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=17)    \nlocally_best_forest = GridSearchCV(estimator = rf, \n                                  param_grid = forest_params,\n                                  cv=skf)\nlocally_best_forest.fit","13c64778":"locally_best_forest_pred = rf.predict(X_test)\naccuracy_score(y_test,locally_best_forest_pred)","9d152f29":"4\\. What is the entropy of a fair dice? (where we look at a dice as a system with 6 equally probable states)?","f60da50c":"3\\. What is the entropy of the state given by the list **balls_left**?","51163fea":"As we see, in the test data, age is treated as type **object**. We need to fix this.","ed7dce0d":"### 3.1 Decision tree without parameter tuning","2516dae8":"Train a decision tree with maximum depth of 9 (it is the best **max_depth** in my case), and compute the test set accuracy. Use parameter **random_state = 17** for reproducibility.","6294d6b3":"### 3.3 (Optional) Random forest without parameter tuning","fa7a0e83":"#### Training data","ca9c40ac":"#### Fill in missing data for continuous features with their median values, for categorical features with their mode.","88a3cbc3":"Also we'll cast all **float** features to **int** type to keep types consistent between our train and test data.","dc461258":"Your goal is to figure out how decision trees work by walking through a toy problem. While a single decision tree does not yield outstanding results, other performant algorithms like gradient boosting and random forests are based on the same idea. That is why knowing how decision trees work might be useful.","b48f604f":"#### Dataset description:","6a228611":"Consider the following warm-up example: we have 9 blue balls and 11 yellow balls. Let ball have label **1** if it is blue, **0** otherwise.","d3188837":"#### Optional:\n- Implement a decision tree building algorithm by calling **best_feature_to_split** recursively\n- Plot the resulting tree","7b95846d":"- **Age** \u2013 continuous feature\n- **Workclass** \u2013  continuous feature\n- **fnlwgt** \u2013 final weight of object, continuous feature\n- **Education** \u2013  categorical feature\n- **Education_Num** \u2013 number of years of education, continuous feature\n- **Martial_Status** \u2013  categorical feature\n- **Occupation** \u2013  categorical feature\n- **Relationship** \u2013 categorical feature\n- **Race** \u2013 categorical feature\n- **Sex** \u2013 categorical feature\n- **Capital_Gain** \u2013 continuous feature\n- **Capital_Loss** \u2013 continuous feature\n- **Hours_per_week** \u2013 continuous feature\n- **Country** \u2013 categorical feature","2c2657cb":"Let's start by loading all necessary libraries:","26856914":"Next split the balls into two groups:","a38bfcfa":"### Part 1. Toy dataset \"Will They? Won't They?\"","b9766d73":"### 3.4 (Optional) Random forest with parameter tuning","2029a0b9":"#### Creating the dataset","0322fda3":"Let's take a sneak peek of upcoming lectures and try to use a random forest for our task. For now, you can imagine a random forest as a bunch of decision trees, trained on slightly different subsets of the training data.","afcd2354":"Make predictions for the test data and assess accuracy.","e167970b":"2\\. Let's split the data by the feature \"Looks_handsome\". What is the entropy $S_1$ of the left group - the one with \"Looks_handsome\". What is the entropy $S_2$ in the opposite group? What is the information gain (IG) if we consider such a split?","27c4b6f2":"#### Additional: display the resulting tree using graphviz. You can use pydot or [web-service](https:\/\/www.coolutils.com\/ru\/online\/DOT-to-PNG) dot2png.","221dda9a":"[Dataset](http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/adult) UCI Adult (no need to download it, we have a copy in the course repository): classify people using demographical data - whether they earn more than \\$50,000 per year or not.","b19cfeb4":"Tests","f29cd0c3":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\">\n    \n## Open Machine Learning Course\n\nAuthors: [Maria Sumarokova](https:\/\/www.linkedin.com\/in\/mariya-sumarokova-230b4054\/), senior data scientist\/analyst at Veon, and [Yury Kashnitsky](https:\/\/www.linkedin.com\/in\/festline\/), data scientist at Mail.Ru Group. Translated and edited by Gleb Filatov, Aleksey Kiselev, [Anastasia Manokhina](https:\/\/www.linkedin.com\/in\/anastasiamanokhina\/), [Egor Polusmak](https:\/\/www.linkedin.com\/in\/egor-polusmak\/), and [Yuanyuan Pao](https:\/\/www.linkedin.com\/in\/yuanyuanpao\/). All content is distributed under the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license.","fc121949":"We'll dummy code some categorical features: **Workclass**, **Education**, **Martial_Status**, **Occupation**, **Relationship**, **Race**, **Sex**, **Country**. It can be done via pandas method **get_dummies**","72a49573":"<img src='https:\/\/habrastorage.org\/webt\/bd\/aq\/5w\/bdaq5wi3c4feezaexponvin8wmo.png'>","a0a284c1":"5\\. What is the information gain from splitting the initial dataset into **balls_left** and **balls_right** ?","cdd11e78":"Make predictions for the test data and assess accuracy.","1f93e3ca":"#### Draw a decision tree (by hand or in any graphics editor) for this dataset. Optionally you can also implement tree construction and draw it here.","defc99bc":"We'll go through a toy example of binary classification - Person A is deciding whether they will go on a second date with Person B. It will depend on their looks, eloquence, alcohol consumption (only for example), and how much money was spent on the first date.","1c027682":"#### Checking data types","a3306a5a":"Feature descriptions:","93debb82":"Train a decision tree **(DecisionTreeClassifier)** with a maximum depth of 3, and evaluate the accuracy metric on the test data. Use parameter **random_state = 17** for results reproducibility.","3b193c66":"#### Implement a function to calculate the Shannon Entropy","28875e5e":"<img src = 'https:\/\/habrastorage.org\/webt\/mu\/vl\/mt\/muvlmtd2njeqf18trbldenpqvnm.png'>","7b0dc454":"#### Train a decision tree using sklearn on the training data. You may choose any depth for the tree.","42dddce6":"### Part 3. The \"Adult\" dataset","7cb7eb6d":"Train a random forest **(RandomForestClassifier)**. Set the number of trees to 100 and use **random_state = 17**.","b9140035":"#### Test data","82bbf41c":"#### There is no Holland in the test data. Create new zero-valued feature.","1a3cb63f":"Train a random forest **(RandomForestClassifier)**. Tune the maximum depth and maximum number of features for each tree using **GridSearchCV**. ","b66f8565":"# <center> Assignment #3 (demo)\n## <center>  Decision trees with a toy task and the UCI Adult dataset \n\nPlease fill in the answers in the [web-form](https:\/\/docs.google.com\/forms\/d\/1wfWYYoqXTkZNOPy1wpewACXaj2MZjBdLOL58htGWYBA\/edit).","ceb68a39":"1\\. What is the entropy $S_0$ of the initial system? By system states, we mean values of the binary feature \"Will_go\" - 0 or 1 - two states in total.","430f395a":"Make a prediction with the trained model on the test data.","b046208a":"Train a decision tree **(DecisionTreeClassifier, random_state = 17).** Find the optimal maximum depth using 5-fold cross-validation **(GridSearchCV)**.","067b0e06":"6\\. What is the test set accuracy of a decision tree with maximum tree depth of 3 and **random_state = 17**?","068c9c4b":"### 3.2 Decision tree with parameter tuning","d8de2df1":"### Part 2. Functions for calculating entropy and information gain.","386b4150":"#### Reading train and test data","6a60ef68":"#### Primary data analysis","674ab8b0":"**Target** \u2013 earnings level, categorical (binary) feature."}}