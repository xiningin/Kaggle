{"cell_type":{"9a0323c1":"code","7369739a":"code","bf1c7eab":"code","226427c7":"code","ff100dbd":"code","78874761":"code","68a0fc70":"code","d0f11e31":"code","dff5bf13":"code","38be8713":"code","a7e9c626":"code","2460d29d":"code","2f4281f1":"code","104e1a75":"code","a4a00f54":"code","8b59fcf1":"markdown","a36a907b":"markdown","adff7769":"markdown","263d74e8":"markdown","81fc0ce4":"markdown","70e91a40":"markdown","6b923cf7":"markdown","d9bab873":"markdown","afc8a382":"markdown","5e1da9d6":"markdown","c6c35e68":"markdown","6868c286":"markdown","785265e9":"markdown","ea01303a":"markdown","054f4766":"markdown","a4497261":"markdown","99ae8f1b":"markdown","142299a2":"markdown"},"source":{"9a0323c1":"pip install highlight_text","7369739a":"import requests\nfrom bs4 import BeautifulSoup\nimport json\nfrom tqdm import tqdm\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom highlight_text import fig_text\nfrom matplotlib.patches import Arc\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\nimport re","bf1c7eab":"# Entering the league's  link\nlink = \"https:\/\/understat.com\/league\/La_liga\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the players stats \nstrings = scripts[3].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end]\njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)\n# Creating the dataframe\nall_shots = pd.DataFrame(data)\n# Changing the data type using pd.to_numeric() function\nall_shots[\"id\"] = pd.to_numeric(all_shots[\"id\"])\nidd = all_shots[\"id\"].values.tolist()","226427c7":"shoots = pd.DataFrame()\nfor i in tqdm(idd):\n    url = f\"https:\/\/understat.com\/player\/{i}\"\n    r = requests.get(url)\n    soup = BeautifulSoup(r.content, 'lxml')\n    scripts = soup.find_all('script')\n    strings = scripts[3].string\n    ind_start = strings.index(\"('\")+2\n    ind_end = strings.index(\"')\")\n    json_data = strings[ind_start:ind_end]\n    json_data = json_data.encode('utf8').decode('unicode_escape')\n    data = json.loads(json_data)\n    shoots = shoots.append(pd.DataFrame(data))","ff100dbd":"barca_shoots = shoots[(shoots[\"h_team\"]==\"Barcelona\")|((shoots[\"a_team\"]==\"Barcelona\"))]\nprint(barca_shoots.shape)\ndisplay(barca_shoots.head(9))","78874761":"# Changing data types\nbarca_shoots['X'] = barca_shoots['X'].astype('float64')\nbarca_shoots['Y'] = barca_shoots['Y'].astype('float64')\n\n# Adjustind dimensions for soccer pitch\nbarca_shoots['X1'] = (barca_shoots['X']\/100)*105*100\nbarca_shoots['Y1'] = (barca_shoots['Y']\/100)*68*100\n","68a0fc70":"def football_pitch(x_min=0, x_max=105,\n               y_min=0, y_max=68,\n               pitch_color=\"#f0f0f0\",\n               line_color='black',\n               line_thickness=1.5,\n               point_size=20,\n               orientation=\"horizontal\",\n               aspect=\"full\",\n               axis='off',\n               ax=None\n               ):\n\n    if not ax:\n        raise TypeError(\"This function is intended to be used with an existing fig and ax in order to allow flexibility in plotting of various sizes and in subplots.\")\n\n\n    if orientation.lower().startswith(\"h\"):\n        first = 0\n        second = 1\n        arc_angle = 0\n\n        if aspect == \"half\":\n            ax.set_xlim(x_max \/ 2, x_max + 5)\n\n    elif orientation.lower().startswith(\"v\"):\n        first = 1\n        second = 0\n        arc_angle = 90\n\n        if aspect == \"half\":\n            ax.set_ylim(x_max \/ 2, x_max + 5)\n\n    \n    else:\n        raise NameError(\"You must choose one of horizontal or vertical\")\n    \n    ax.axis(axis)\n\n    rect = plt.Rectangle((x_min, y_min),\n                         x_max, y_max,\n                         facecolor=pitch_color,\n                         edgecolor=\"none\",\n                         zorder=-2)\n\n    ax.add_artist(rect)\n\n    x_conversion = x_max \/ 100\n    y_conversion = y_max \/ 100\n\n    pitch_x = [0,5.8,11.5,17,50,83,88.5,94.2,100] # x dimension markings\n    pitch_x = [x * x_conversion for x in pitch_x]\n\n    pitch_y = [0, 21.1, 36.6, 50, 63.2, 78.9, 100] # y dimension markings\n    pitch_y = [x * y_conversion for x in pitch_y]\n\n    goal_y = [45.2, 54.8] # goal posts\n    goal_y = [x * y_conversion for x in goal_y]\n\n    # side and goal lines\n    lx1 = [x_min, x_max, x_max, x_min, x_min]\n    ly1 = [y_min, y_min, y_max, y_max, y_min]\n\n    # outer box\n    lx2 = [x_max, pitch_x[5], pitch_x[5], x_max]\n    ly2 = [pitch_y[1], pitch_y[1], pitch_y[5], pitch_y[5]]\n\n    lx3 = [0, pitch_x[3], pitch_x[3], 0]\n    ly3 = [pitch_y[1], pitch_y[1], pitch_y[5], pitch_y[5]]\n\n    # goals\n    lx4 = [x_max, x_max+2, x_max+2, x_max]\n    ly4 = [goal_y[0], goal_y[0], goal_y[1], goal_y[1]]\n\n    lx5 = [0, -2, -2, 0]\n    ly5 = [goal_y[0], goal_y[0], goal_y[1], goal_y[1]]\n\n    # 6 yard box\n    lx6 = [x_max, pitch_x[7], pitch_x[7], x_max]\n    ly6 = [pitch_y[2],pitch_y[2], pitch_y[4], pitch_y[4]]\n\n    lx7 = [0, pitch_x[1], pitch_x[1], 0]\n    ly7 = [pitch_y[2],pitch_y[2], pitch_y[4], pitch_y[4]]\n\n\n    # Halfline, penalty spots, and kickoff spot\n    lx8 = [pitch_x[4], pitch_x[4]]\n    ly8 = [0, y_max]\n\n    lines = [\n        [lx1, ly1],\n        [lx2, ly2],\n        [lx3, ly3],\n        [lx4, ly4],\n        [lx5, ly5],\n        [lx6, ly6],\n        [lx7, ly7],\n        [lx8, ly8],\n        ]\n\n    points = [\n        [pitch_x[6], pitch_y[3]],\n        [pitch_x[2], pitch_y[3]],\n        [pitch_x[4], pitch_y[3]]\n        ]\n\n    circle_points = [pitch_x[4], pitch_y[3]]\n    arc_points1 = [pitch_x[6], pitch_y[3]]\n    arc_points2 = [pitch_x[2], pitch_y[3]]\n\n\n    for line in lines:\n        ax.plot(line[first], line[second],\n                color=line_color,\n                lw=line_thickness,\n                zorder=-1)\n\n    for point in points:\n        ax.scatter(point[first], point[second],\n                   color=line_color,\n                   s=point_size,\n                   zorder=-1)\n\n    circle = plt.Circle((circle_points[first], circle_points[second]),\n                        x_max * 0.088,\n                        lw=line_thickness,\n                        color=line_color,\n                        fill=False,\n                        zorder=-1)\n\n    ax.add_artist(circle)\n\n    arc1 = Arc((arc_points1[first], arc_points1[second]),\n               height=x_max * 0.088 * 2,\n               width=x_max * 0.088 * 2,\n               angle=arc_angle,\n               theta1=128.75,\n               theta2=231.25,\n               color=line_color,\n               lw=line_thickness,\n               zorder=-1)\n\n    ax.add_artist(arc1)\n\n    arc2 = Arc((arc_points2[first], arc_points2[second]),\n               height=x_max * 0.088 * 2,\n               width=x_max * 0.088 * 2,\n               angle=arc_angle,\n               theta1=308.75,\n               theta2=51.25,\n               color=line_color,\n               lw=line_thickness,\n               zorder=-1)\n\n    ax.add_artist(arc2)\n\n    ax.set_aspect(\"equal\")\n\n    return ax","d0f11e31":"print(barca_shoots.situation.unique())","dff5bf13":"open_play = barca_shoots[barca_shoots[\"situation\"]==\"OpenPlay\"]\nfree_kick = barca_shoots[barca_shoots[\"situation\"]==\"DirectFreekick\"]\ncorner =  barca_shoots[barca_shoots[\"situation\"]==\"FromCorner\"]\nset_piece = barca_shoots[barca_shoots[\"situation\"]==\"SetPiece\"]","38be8713":"fig = plt.figure(figsize=(15,20),constrained_layout=True)\ngs = fig.add_gridspec(nrows=1,ncols=2)\n\nax = fig.add_subplot(gs[0])\nfootball_pitch(orientation=\"vertical\",aspect=\"half\",line_color=\"black\",ax=ax)\nsns.kdeplot(free_kick[\"Y1\"],free_kick[\"X1\"], shade=\"True\",color=\"cyan\", levels = 10)\n\nax1 = fig.add_subplot(gs[1])\nfootball_pitch(orientation=\"vertical\",aspect=\"half\",line_color=\"black\",ax=ax1)\nsns.kdeplot(corner[\"Y1\"],corner[\"X1\"], shade=\"True\",color=\"crimson\", levels = 10)\n\nfig_text(0.55,0.66, s=\"FC Barcelona Corners 2020\/2021 Season\",font='Comic Sans MS',fontsize=20,fontweight=\"bold\",color='crimson')\nfig_text(0.07,0.66, s=\"FC Barcelona Free Kicks 2020\/2021 Season\",font='Comic Sans MS',fontsize=20,fontweight=\"bold\",color='cyan')","a7e9c626":"messi = barca_shoots[barca_shoots[\"player\"]==\"Lionel Messi\"]\nmessi_goals = messi[messi['result']==\"Goal\"]","2460d29d":"fig = plt.figure(figsize=(15,20),constrained_layout=True)\ngs = fig.add_gridspec(nrows=1,ncols=2)\n\nax = fig.add_subplot(gs[0])\nfootball_pitch(orientation=\"vertical\",aspect=\"half\",line_color=\"black\",ax=ax)\nsns.kdeplot(messi_goals[\"Y1\"],messi_goals[\"X1\"], shade=\"True\",color=\"cyan\", levels = 10)\n\nax1 = fig.add_subplot(gs[1])\nfootball_pitch(orientation=\"vertical\",aspect=\"half\",line_color=\"black\",ax=ax1)\nsns.kdeplot(messi[\"Y1\"],messi[\"X1\"], shade=\"True\",color=\"crimson\", levels = 10)\n\nfig_text(0.55,0.66, s=\"Lionel Messi Goals 2020\/2021 Season\",font='Comic Sans MS',fontsize=20,fontweight=\"bold\",color='crimson')\nfig_text(0.07,0.66, s=\"Lionel Messi Total Shots 2020\/2021 Season\",font='Comic Sans MS',fontsize=20,fontweight=\"bold\",color='cyan')","2f4281f1":"pedri = barca_shoots[barca_shoots[\"player\"]==\"Pedri\"]\ndembele = barca_shoots[barca_shoots[\"player\"]==\"Ousmane Demb\u00e9l\u00e9\"]\n","104e1a75":"fig = plt.figure(figsize=(15,20),constrained_layout=True)\ngs = fig.add_gridspec(nrows=1,ncols=2)\n\nax = fig.add_subplot(gs[0])\nfootball_pitch(orientation=\"vertical\",aspect=\"half\",line_color=\"black\",ax=ax)\nsns.kdeplot(pedri[\"Y1\"],pedri[\"X1\"], shade=\"True\",color=\"cyan\", levels = 10)\n\nax1 = fig.add_subplot(gs[1])\nfootball_pitch(orientation=\"vertical\",aspect=\"half\",line_color=\"black\",ax=ax1)\nsns.kdeplot(dembele[\"Y1\"],dembele[\"X1\"], shade=\"True\",color=\"crimson\", levels = 10)\n\nfig_text(0.55,0.66, s=\"Ousmane Dembele Total Shots 2020\/2021 Season\",font='Comic Sans MS',fontsize=20,fontweight=\"bold\",color='crimson')\nfig_text(0.07,0.66, s=\"Pedri Gonzalez Total Shots 2020\/2021 Season\",font='Comic Sans MS',fontsize=20,fontweight=\"bold\",color='cyan')","a4a00f54":"fig, ax = plt.subplots(figsize=(10, 14))\nfootball_pitch(orientation=\"vertical\",aspect=\"half\",line_color=\"black\",ax=ax)\n#sns.kdeplot(free_kick[\"X1\"],free_kick[\"Y1\"], levels = 800, thresh = 0.3,shade=True,color=\"cyan\")\nsns.kdeplot(data=barca_shoots, x=\"Y1\", y=\"X1\", hue=\"situation\", fill=True,shade=True,levels=10)\n","8b59fcf1":"<a id=\"4.\"><\/a>\n# Filtering FC Barcelona shoots\nNow that we've scraped every single shot in La Liga, let's focus on shots taken by FC Barcelona :","a36a907b":"<a id=\"1.1\"><\/a>\n# Notebook content\n\n* [1. Introduction](#1.)\n    - [1.1. Notebook Content.](#1.1)\n* [2.Importing libraries.](#2.)\n* [3.Scraping shots](#3.)\n    - [3.1. Scraping match IDs.](#3.1)\n    - [3.2. Understat for loops.](#3.2)\n* [4. Filtering FC Barcelona shots](#4.)\n* [5. Draw pitch](#5.)\n* [6. Plotting the Heatmaps](#6.)\n   -  [6.1. Free kicks vs Corners.](#6.1)\n   -  [6.2. Messi Goals vs Messi Shots](#6.2)\n   -  [6.3. Pedri vs Dembele shots](#6.3)\n   -  [6.4. All shots overlaid](#6.4)\n* [7. References](#7.)\n","adff7769":"<a id=\"6.1\"><\/a>\n## Free kicks and Corners\nNow finally let's plot the heatmaps, let's start by 2 heatmaps one for free kicks and one for Penalties ","263d74e8":"<a id=\"7.\"><\/a>\n# References\nAs stated befor the main reference for this notebooks was [This FC Python Tutorial](https:\/\/fcpython.com\/visualisation\/football-heatmaps-seaborn) and also this [notebook](https:\/\/github.com\/coder-harshil\/Football-Data-Scraping-Cleaning-and-Visualization\/blob\/main\/Heatmap.py)","81fc0ce4":"<a id=\"6.\"><\/a>\n# Plotting heatmaps\nBefore plotting the heatmaps let's separate the shots by situation, let's check the situations available within the data : ","70e91a40":"We'll ignore Penalties because it does not make sense to plot it, it's always the same starting point.","6b923cf7":"<a id=\"6.2\"><\/a>\n## Messi Goals vs Total Shots\nNow let's plot the goals scored by Messi and the total shots taken by him : ","d9bab873":"<a id=\"2.\"><\/a>\n# Importing Libraries","afc8a382":"<a id=\"6.3\"><\/a>\n## Pedri and Dembele Shots 2020\/2021 Season\nLet's go now to my other two favorite players Pedri and Dembele","5e1da9d6":"<a id=\"3.1\"><\/a>\n## Scraping the match IDs","c6c35e68":"<a id=\"6.4\"><\/a>\n## All Barcelona shots last season overlaid \nFinally let's overlay every shot taken in la liga by their situation:","6868c286":"# Understat Series : Heatmaps\n\n\n\n**By Jose Gonzalez**\n\n\n**Was greatly inspired by the [This FC Python Tutorial](https:\/\/fcpython.com\/visualisation\/football-heatmaps-seaborn) They have a great webape explaining basics , shotmaps, passing networks, dashboards etc , [Check out their website](https:\/\/fcpython.com\/)**\n\n![image.png](attachment:image.png)","785265e9":"We've got 4744 shots taken by Barcelona in the 2020\/2021 Season , now let's change the data types of a few columns in order to manipulate them for further analysis and modify the field dimensions to adjust to our soccer pitch:","ea01303a":"<a id=\"3.2\"><\/a>\n## Understat for loops\nOnce the match IDs have scraped, let's run the loop , it'll take around 10 minutes : ","054f4766":"Looking at Dembele's heatmap it's remarkable his control of both sides of the pitch as he's ambidextrous","a4497261":"<a id=\"3.\"><\/a>\n# Scraping shots\nIn order to scrape all shots taken by each player from la liga, we must first scrape their IDs and change their data type from obj to int and then run a loop with those values to scrape all the shots the players have taken throughout their careers.","99ae8f1b":"<a id=\"5.\"><\/a>\n# Football Pitch\nNow let's create the soccer pitch and once again it's all thanks again to [This FC Python Tutorial](https:\/\/fcpython.com\/visualisation\/drawing-pitchmap-adding-lines-circles-matplotlib)","142299a2":"<a id=\"1.\"><\/a>\n# Introduction\nAlthough most of the soccer heatmaps are for passes and tackles and movement, I think it's interesting the do a quick analysis of heatmaps for shots. Based on the tutorial above from FC Python , I've decided to explore this topic using Understat's data.\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)"}}