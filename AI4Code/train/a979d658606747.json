{"cell_type":{"73cd9e8e":"code","98f8ebee":"code","8888af8a":"code","03bbb712":"code","eade1030":"code","88b5493a":"code","12822ca1":"code","78ad45ea":"code","544877c6":"code","566a01e9":"code","5409a020":"code","07eef701":"code","d62ff38e":"code","480861e6":"code","8673f42a":"code","feaf2905":"code","5003b7db":"code","3caa5bdf":"code","843b5134":"code","963415b3":"code","fb51959e":"code","7a811b52":"code","c2c51c2e":"code","5289755e":"code","36c07faa":"code","a33e1b14":"code","d5856a6b":"code","0c2c8494":"code","d3d4c356":"code","7b292ab9":"code","be1f853e":"code","3b4ce546":"code","61dba648":"code","91e0abdb":"code","eb732fd0":"code","44fb2e19":"code","8d1c43b6":"code","bf6ecdd4":"code","f538511c":"code","c3b24d97":"code","8fec92d9":"code","0de035b4":"code","a4552917":"code","13f96580":"code","98d31458":"code","0de9a5a4":"code","f395e2a2":"code","7d8a41be":"code","b18d131d":"code","0a42bcf8":"code","6845332c":"code","7b020f91":"markdown","8803a7e5":"markdown","4422151a":"markdown","b5a04311":"markdown","b4431079":"markdown","91637908":"markdown","b1ea27a3":"markdown","a80fb994":"markdown","69b916b1":"markdown","78d1274d":"markdown","0efd4f0a":"markdown","097656c6":"markdown","1ca3f494":"markdown","23702cfd":"markdown","12d7ae0e":"markdown","3ff8f69e":"markdown","a0f2c0aa":"markdown","221790f1":"markdown","d02a241f":"markdown"},"source":{"73cd9e8e":"# Data Processing\nimport numpy as np \nimport pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option(\"max_rows\", None)\n\n# Data Visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style='whitegrid')\n\n# Modeling\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\n\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nfrom sklearn.model_selection import RandomizedSearchCV","98f8ebee":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","8888af8a":"train.head()","03bbb712":"train.shape","eade1030":"test.head()","88b5493a":"test.shape","12822ca1":"plt.figure(figsize=(20,10))\nb = sns.distplot(train['SalePrice'])\nb.set_title(\"SalePrice Distribution\");","78ad45ea":"plt.figure(figsize=(20,10))\nb = sns.boxplot(y = 'SalePrice', data = train)\nb.set_title(\"SalePrice Distribution\");","544877c6":"len(train[train['SalePrice'] > 700000])","566a01e9":"train.shape","5409a020":"train = train[train['SalePrice'] <= 700000]","07eef701":"train.shape","d62ff38e":"train.columns[train.isna().any()].tolist()","480861e6":"test.columns[test.isna().any()].tolist()","8673f42a":"#missing data\ntotal = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","feaf2905":"train = train.drop(['PoolQC'], axis=1)\ntest = test.drop(['PoolQC'], axis=1)\n\ntrain = train.drop(['MiscFeature'], axis=1)\ntest = test.drop(['MiscFeature'], axis=1)\n\ntrain = train.drop(['Alley'], axis=1)\ntest = test.drop(['Alley'], axis=1)\n\ntrain = train.drop(['Fence'], axis=1)\ntest = test.drop(['Fence'], axis=1)\n\ntrain = train.drop(['FireplaceQu'], axis=1)\ntest = test.drop(['FireplaceQu'], axis=1)\n\ntrain = train.drop(['LotFrontage'], axis=1)\ntest = test.drop(['LotFrontage'], axis=1)","5003b7db":"train = train.fillna(train.median())\ntest = test.fillna(test.median())","3caa5bdf":"test['MSZoning'] = test['MSZoning'].fillna('None')","843b5134":"train = train.drop(['Utilities'], axis=1)\ntest = test.drop(['Utilities'], axis=1)","963415b3":"test['Exterior1st'] = test['Exterior1st'].fillna('None')\n\ntrain.loc[train['Exterior1st'].value_counts()[train['Exterior1st']].values < 18,'Exterior1st'] = 'Rare'\ntest.loc[test['Exterior1st'].value_counts()[test['Exterior1st']].values < 18,'Exterior1st'] = 'Rare'","fb51959e":"test['Exterior2nd'] = test['Exterior2nd'].fillna('None')\n\ntrain.loc[train['Exterior2nd'].value_counts()[train['Exterior2nd']].values < 10,'Exterior2nd'] = 'Rare'\ntest.loc[test['Exterior2nd'].value_counts()[test['Exterior2nd']].values < 10,'Exterior2nd'] = 'Rare'","7a811b52":"train['MasVnrType'] = train['MasVnrType'].fillna('Missing')\ntest['MasVnrType'] = test['MasVnrType'].fillna('Missing')","c2c51c2e":"train['BsmtQual'] = train['BsmtQual'].fillna('None')\ntest['BsmtQual'] = test['BsmtQual'].fillna('None')","5289755e":"train['BsmtCond'] = train['BsmtCond'].fillna('None')\ntest['BsmtCond'] = test['BsmtCond'].fillna('None')","36c07faa":"train['BsmtExposure'] = train['BsmtExposure'].fillna('None')\ntest['BsmtExposure'] = test['BsmtExposure'].fillna('None')","a33e1b14":"train['BsmtFinType1'] = train['BsmtFinType1'].fillna('None')\ntest['BsmtFinType1'] = test['BsmtFinType1'].fillna('None')","d5856a6b":"train['BsmtFinType2'] = train['BsmtFinType2'].fillna('None')\ntest['BsmtFinType2'] = test['BsmtFinType2'].fillna('None')","0c2c8494":"train['Electrical'] = train['Electrical'].fillna('None')\ntest['Electrical'] = test['Electrical'].fillna('None')","d3d4c356":"test['KitchenQual'] = test['KitchenQual'].fillna('None')","7b292ab9":"test['Functional'] = test['Functional'].fillna('None')","be1f853e":"train['GarageType'] = train['GarageType'].fillna('None')\ntest['GarageType'] = test['GarageType'].fillna('None')","3b4ce546":"train['GarageFinish'] = train['GarageFinish'].fillna('None')\ntest['GarageFinish'] = test['GarageFinish'].fillna('None')","61dba648":"train['GarageQual'] = train['GarageQual'].fillna('None')\ntest['GarageQual'] = test['GarageQual'].fillna('None')","91e0abdb":"train['GarageCond'] = train['GarageCond'].fillna('None')\ntest['GarageCond'] = test['GarageCond'].fillna('None')","eb732fd0":"train['SaleType'] = train['SaleType'].fillna('None')\ntest['SaleType'] = test['SaleType'].fillna('None')","44fb2e19":"train.isna().all().sum()","8d1c43b6":"test.isna().all().sum()","bf6ecdd4":"y_train = train['SalePrice'].values\ndf = pd.concat((train, test)).reset_index(drop=True)\ndf.drop(['SalePrice'], axis=1, inplace=True)","f538511c":"from sklearn.preprocessing import LabelEncoder\ncols = ('BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(df[c].values)) \n    df[c] = lbl.transform(list(df[c].values))\n","c3b24d97":"corrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True);","8fec92d9":"df = pd.get_dummies(df)\nprint(df.shape)","0de035b4":"train = df[df['Id'] < 1461]\ntest = df[df['Id'] >= 1461]","a4552917":"# Everything except target variable\nX = train\n\n# Target variable\ny = y_train","13f96580":"# Random seed for reproducibility\nnp.random.seed(42)\n\n# Split into train & test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","98d31458":"# Put models in a dictionary\nmodels = {\"ElasticNet\": ElasticNet(tol=0.1),\n          \"Lasso\": Lasso(tol=0.1), \n          \"BayesianRidge\": BayesianRidge(n_iter=1000),\n          \"LassoLarsIC\" : LassoLarsIC(max_iter=45),\n          \"RandomForestRegressor\" : RandomForestRegressor(),\n          \"GradientBoostingRegressor\" : GradientBoostingRegressor(),\n          \"XGBRegressor\": XGBRegressor(),\n          \"LGBMRegressor\": LGBMRegressor()\n}\n\n# Create function to fit and score models\ndef fit_and_score(models, X_train, X_test, y_train, y_test):\n    \"\"\"\n    Fits and evaluates given machine learning models.\n    models : a dict of different Scikit-Learn machine learning models\n    X_train : training data\n    X_test : testing data\n    y_train : labels assosciated with training data\n    y_test : labels assosciated with test data\n    \"\"\"\n    # Random seed for reproducible results\n    np.random.seed(42)\n    # Make a list to keep model scores\n    model_scores = {}\n    # Loop through models\n    for name, model in models.items():\n        # Fit the model to the data\n        model.fit(X_train, y_train)\n        # Predicting target values\n        y_pred = model.predict(X_test)\n        # Evaluate the model and append its score to model_scores\n        model_scores[name] = np.sqrt(mean_squared_error(y_test, y_pred))\n    return model_scores","0de9a5a4":"model_scores = fit_and_score(models=models,\n                             X_train=X_train,\n                             X_test=X_test,\n                             y_train=y_train,\n                             y_test=y_test)\nmodel_scores","f395e2a2":"np.random.seed(42)\n\ngbr = GradientBoostingRegressor(n_estimators=5000)\ngbr.fit(X_train, y_train)\ny_pred = gbr.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","7d8a41be":"# Plotting the Train and Test scores\nplt.figure(figsize=(20,10))\nplt.plot(y_test, label=\"True values\")\nplt.plot(y_pred, label=\"Predicted values\")\nplt.xticks(np.arange(1, 51, 1))\nplt.xlabel(\"Object\")\nplt.ylabel(\"Values\")\nplt.legend();","b18d131d":"y_pred = gbr.predict(test)","0a42bcf8":"sample_submission.head()","6845332c":"sample_submission['SalePrice'] = y_pred\nsample_submission.to_csv(\"submission.csv\", index=False)\nsample_submission.head()","7b020f91":"# Feature Engineering","8803a7e5":"# Predicting values","4422151a":"# Overview","b5a04311":"## Target Value: SalePrice","b4431079":"Nope, we don't have any left!","91637908":"**Context:** \n> Ask a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.   \nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.\n\n**About the Data:**\n\n*File descriptions*\n* train.csv - the training set\n* test.csv - the test set\n* data_description.txt - full description of each column, originally prepared by Dean De Cock but lightly edited to match the column names used here\n* sample_submission.csv - a benchmark submission from a linear regression on year and month of sale, lot square footage, and number of bedrooms\n\n\n*Data fields*\nHere's a brief version of what you'll find in the data description file.\n\n* SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n* MSSubClass: The building class\n* MSZoning: The general zoning classification\n* LotFrontage: Linear feet of street connected to property\n* LotArea: Lot size in square feet\n* Street: Type of road access\n* Alley: Type of alley access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* Utilities: Type of utilities available\n* LotConfig: Lot configuration\n* LandSlope: Slope of property\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* MasVnrArea: Masonry veneer area in square feet\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* Foundation: Type of foundation\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinType2: Quality of second finished area (if present)\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* BsmtFullBath: Basement full bathrooms\n* BsmtHalfBath: Basement half bathrooms\n* FullBath: Full bathrooms above grade\n* HalfBath: Half baths above grade\n* Bedroom: Number of bedrooms above basement level\n* Kitchen: Number of kitchens\n* KitchenQual: Kitchen quality\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n* Functional: Home functionality rating\n* Fireplaces: Number of fireplaces\n* FireplaceQu: Fireplace quality\n* GarageType: Garage location\n* GarageYrBlt: Year garage was built\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageArea: Size of garage in square feet\n* GarageQual: Garage quality\n* GarageCond: Garage condition\n* PavedDrive: Paved driveway\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n* PoolQC: Pool quality\n* Fence: Fence quality\n* MiscFeature: Miscellaneous feature not covered in other categories\n* MiscVal: Value of miscellaneous feature\n* MoSold: Month Sold\n* YrSold: Year Sold\n* SaleType: Type of sale\n* SaleCondition: Condition of sale","b1ea27a3":"Let's check if we have any NaN values left:","a80fb994":"# Imports","69b916b1":"**Where do we have NaN values?**","78d1274d":"# Modeling","0efd4f0a":"<div style=\"text-align:center;\"><img src=\"https:\/\/images.unsplash.com\/photo-1516156008625-3a9d6067fab5?ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80\" \/><\/div>","097656c6":"Fill the other values with `None`.","1ca3f494":"<h1 style=\"text-align:center\">My House Price Prediction Approach<\/h1>","23702cfd":"# Handling missing values","12d7ae0e":"Let's delete the columns that have more than 15% missing data:","3ff8f69e":"Let's look at which values have what percentage of missing data:","a0f2c0aa":"# Exploring the Data","221790f1":"We have two outliers where `SalePrice` is `> 700000`. Let's get rid of these.","d02a241f":"Let's first fill all numeric values with the median."}}