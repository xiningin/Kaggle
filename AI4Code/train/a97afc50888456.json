{"cell_type":{"2afe5187":"code","12926c57":"code","aaf7626e":"code","ef02f04b":"code","f2f57756":"code","dc880541":"code","0d60d6c6":"code","dd1d9007":"code","d3c2682e":"code","eb4d4e01":"code","4af2ee94":"code","3dd54ba0":"code","39115748":"code","eb2e5141":"code","2382d01a":"code","12ce1f69":"code","320e6c8a":"code","ba806889":"code","788b5a1f":"code","c7133df2":"code","f9bf2207":"code","e6c0b208":"code","29401cbf":"code","dbc27229":"code","ba62fecc":"code","0cc7a2b5":"code","210d7a1b":"code","e7990edc":"code","7082f2c5":"code","19b30105":"code","68d74acc":"code","5d26b5e3":"code","fbf2edc3":"code","032355d0":"code","a056a292":"code","56d33e5d":"code","07763a9b":"code","23d93df0":"code","7e1669aa":"code","757d4230":"code","ffc29382":"code","918e800f":"code","163f4cad":"code","7a6da53b":"code","b38a8130":"code","1a416a3b":"code","68c56a11":"code","7ecc5a3a":"code","88d60da6":"code","4f8a69be":"code","a259bba0":"code","a0964625":"code","1e1cbdde":"code","1926d4a2":"code","f4c45f91":"code","39902af1":"code","3de141a4":"code","8f3d1305":"code","0d1dd18e":"code","2ba51331":"code","c110ad26":"code","a10dfb84":"markdown","65bd9fa0":"markdown","9cf23331":"markdown","e3bbb19e":"markdown","2b7fcb3d":"markdown","54be1636":"markdown","266063f4":"markdown","d826fee0":"markdown","9a2f97f5":"markdown","9c243450":"markdown","0f4e22b7":"markdown","a3d077c7":"markdown","ec52a0df":"markdown","a7c621b8":"markdown"},"source":{"2afe5187":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport plotly as py\nimport plotly.graph_objs as go\nfrom sklearn.cluster import KMeans\nimport warnings\nimport os\nwarnings.filterwarnings(\"ignore\")\npy.offline.init_notebook_mode(connected = True)\n%config InlineBacked.figure_format = 'svg'","12926c57":"df = pd.read_csv(r'..\/input\/CutomerInfoDataset.csv')","aaf7626e":"df.head()","ef02f04b":"df.shape","f2f57756":"df.describe()","dc880541":"df.dtypes","0d60d6c6":"df.isnull().sum()","dd1d9007":"plt.style.use('fivethirtyeight')","d3c2682e":"plt.figure(1 , figsize = (10 , 6))\nsns.countplot(y = 'Aging' , data = df)\nplt.show()","eb4d4e01":"plt.figure(1 , figsize = (10 , 6))\nfor aging in [0, 31, 61, 91, 121]:\n    plt.scatter(x = 'Aging' , y = 'RegisCap' , data = df[df['Aging'] == aging] ,\n                s = 200 , alpha = 0.5 , label = aging)\nplt.xlabel('Aging'), plt.ylabel('RegisCap') \nplt.title('Aging vs RegisCap')\nplt.legend()\nplt.show()","4af2ee94":"plt.figure(1 , figsize = (13 , 7))\nn = 0 \nfor x in ['RegisCap', 'NOOrder\/M', 'PriceOrder\/M']:\n    for y in ['RegisCap', 'NOOrder\/M', 'PriceOrder\/M']:\n        n += 1\n        plt.subplot(6 , 3 , n)\n        plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n        sns.regplot(x = x , y = y , data = df)\n        plt.ylabel(y.split()[0]+' '+y.split()[1] if len(y.split()) > 1 else y)\nplt.show()","3dd54ba0":"plt.figure(1 , figsize = (10 , 6))\nfor aging in [0, 31, 61, 91, 121]:\n    plt.scatter(x = 'NOOrder\/M' , y = 'RegisCap' , data = df[df['Aging'] == aging] ,\n                s = 200 , alpha = 0.5 , label = aging)\nplt.xlabel('NOOrder\/M'), plt.ylabel('RegisCap') \nplt.title('NOOrder\/M vs RegisCap')\nplt.legend()\nplt.show()","39115748":"plt.figure(1 , figsize = (10, 6))\nfor aging in [0, 31, 61, 91, 121]:\n    plt.scatter(x = 'PriceOrder\/M' , y = 'RegisCap' , data = df[df['Aging'] == aging] ,\n                s = 200 , alpha = 0.5 , label = aging)\nplt.xlabel('PriceOrder\/M'), plt.ylabel('RegisCap') \nplt.title('PriceOrder\/M vs RegisCap')\nplt.legend()\nplt.show()","eb2e5141":"plt.figure(1 , figsize = (10, 6))\nfor aging in [0, 31, 61, 91, 121]:\n    plt.scatter(x = 'NOOrder\/M' , y = 'Employee' , data = df[df['Aging'] == aging] ,\n                s = 200 , alpha = 0.5 , label = aging)\nplt.xlabel('NOOrder\/M'), plt.ylabel('Employee') \nplt.title('NOOrder\/M vs Employee')\nplt.legend()\nplt.show()","2382d01a":"plt.figure(1 , figsize = (10, 6))\nfor focusType in [1, 2, 3]:\n    plt.scatter(x = 'PriceOrder\/M' , y = 'Employee' , data = df[df['FocusType'] == focusType] ,\n                s = 200 , alpha = 0.5 , label = focusType)\nplt.xlabel('PriceOrder\/M'), plt.ylabel('Employee') \nplt.title('PriceOrder\/M vs Employee')\nplt.legend()\nplt.show()","12ce1f69":"plt.figure(1 , figsize = (10, 6))\nfor focusType in [1, 2, 3]:\n    plt.scatter(x = 'NOOrder\/M' , y = 'PriceOrder\/M' , data = df[df['FocusType'] == focusType] ,\n                s = 200 , alpha = 0.5 , label = focusType)\nplt.xlabel('NOOrder\/M'), plt.ylabel('PriceOrder\/M') \nplt.title('NOOrder\/M vs PriceOrder\/M')\nplt.legend()\nplt.show()","320e6c8a":"from sklearn.preprocessing import StandardScaler\n# standardize the features\nsc = StandardScaler()\ndfs = sc.fit_transform(df)","ba806889":"col = [\"NOOrder\/M\", \"PriceOrder\/M\", \"RegisCap\", \"Employee\", \"Aging\", \"CreditLimit\"]\ndfk = df.copy()\ndfk[col] = sc.fit_transform(dfk[col])","788b5a1f":"'''PriceOrder\/M and RegisCap'''\n# X1 = df[['AVGNOOrderPerMonth' , 'RegisteredCapital']].iloc[: , :].values\nX1 = dfs[:, [2, 3]]\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X1)\n    inertia.append(algorithm.inertia_)\n    \nalgorithm = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X1)\nlabels1 = algorithm.labels_\ncentroids1 = algorithm.cluster_centers_\n\nh = 0.02\nx_min, x_max = X1[:, 0].min() - 1, X1[:, 0].max() + 1\ny_min, y_max = X1[:, 1].min() - 1, X1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) \n\nplt.figure(1 , figsize = (10 , 6) )\nplt.clf()\nZ = Z.reshape(xx.shape)\nplt.imshow(Z , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'PriceOrder\/M' ,y = 'RegisCap' , data = dfk , c = labels1 , \n            s = 200 )\nplt.scatter(x = centroids1[: , 0] , y =  centroids1[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('RegisCap') , plt.xlabel('PriceOrder\/M')\nplt.show()","c7133df2":"'''NOOrder\/M and RegisCap'''\n# X1 = df[['AVGNOOrderPerMonth' , 'RegisteredCapital']].iloc[: , :].values\nX1 = dfs[:, [1, 3]]\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X1)\n    inertia.append(algorithm.inertia_)\n    \nalgorithm = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X1)\nlabels1 = algorithm.labels_\ncentroids1 = algorithm.cluster_centers_\n\nh = 0.02\nx_min, x_max = X1[:, 0].min() - 1, X1[:, 0].max() + 1\ny_min, y_max = X1[:, 1].min() - 1, X1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) \n\nplt.figure(1 , figsize = (10 , 6) )\nplt.clf()\nZ = Z.reshape(xx.shape)\nplt.imshow(Z , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'NOOrder\/M' ,y = 'RegisCap' , data = dfk , c = labels1 , \n            s = 200 )\nplt.scatter(x = centroids1[: , 0] , y =  centroids1[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('RegisCap') , plt.xlabel('NOOrder\/M')\nplt.show()","f9bf2207":"'''PriceOrder\/M and Employee'''\nX1 = dfs[:, [2, 4]]\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X1)\n    inertia.append(algorithm.inertia_)\n    \nalgorithm = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X1)\nlabels1 = algorithm.labels_\ncentroids1 = algorithm.cluster_centers_\n\nh = 0.02\nx_min, x_max = X1[:, 0].min() - 1, X1[:, 0].max() + 1\ny_min, y_max = X1[:, 1].min() - 1, X1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) \n\nplt.figure(1 , figsize = (10 , 6) )\nplt.clf()\nZ = Z.reshape(xx.shape)\nplt.imshow(Z , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'PriceOrder\/M' ,y = 'Employee' , data = dfk , c = labels1 , \n            s = 200 )\nplt.scatter(x = centroids1[: , 0] , y =  centroids1[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Employee') , plt.xlabel('PriceOrder\/M')\nplt.show()","e6c0b208":"'''NOOrder\/M and PriceOrder\/M'''\nX1 = dfs[:, [1, 2]]\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X1)\n    inertia.append(algorithm.inertia_)\n    \nalgorithm = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X1)\nlabels1 = algorithm.labels_\ncentroids1 = algorithm.cluster_centers_\n\nh = 0.02\nx_min, x_max = X1[:, 0].min() - 1, X1[:, 0].max() + 1\ny_min, y_max = X1[:, 1].min() - 1, X1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) \n\nplt.figure(1 , figsize = (10 , 6) )\nplt.clf()\nZ = Z.reshape(xx.shape)\nplt.imshow(Z , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'NOOrder\/M' ,y = 'PriceOrder\/M' , data = dfk , c = labels1 , \n            s = 200 )\nplt.scatter(x = centroids1[: , 0] , y =  centroids1[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('PriceOrder\/M') , plt.xlabel('NOOrder\/M')\nplt.show()","29401cbf":"X3 = df[['NOOrder\/M' , 'PriceOrder\/M' ,'Employee']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X3)\n    inertia.append(algorithm.inertia_)","dbc27229":"algorithm = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X3)\nlabels3 = algorithm.labels_\ncentroids3 = algorithm.cluster_centers_","ba62fecc":"df3d = df.copy()","0cc7a2b5":"df3d['label3'] =  labels3\ntrace1 = go.Scatter3d(\n    x= df3d['NOOrder\/M'],\n    y= df3d['PriceOrder\/M'],\n    z= df3d['Employee'],\n    mode='markers',\n     marker=dict(\n        color = df3d['label3'], \n        size= 20,\n        line=dict(\n            color= df3d['label3'],\n            width= 12\n        ),\n        opacity=0.8\n     )\n)\ndata = [trace1]\nlayout = go.Layout(\n    title= 'Clusters',\n    scene = dict(\n            xaxis = dict(title  = 'NOOrder\/M'),\n            yaxis = dict(title  = 'PriceOrder\/M'),\n            zaxis = dict(title  = 'Employee')\n        )\n)\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","210d7a1b":"df['FocusType'].value_counts()","e7990edc":"df.isnull().any()","7082f2c5":"numeric_cols = list(df.columns) ","19b30105":"plt.figure(figsize=(10,5))\nsns.heatmap(df.corr(), annot = True, cmap='coolwarm',linewidths=.1)\nplt.show()","68d74acc":"#Draw boxplots for all numeric columns\nfig, axes = plt.subplots(figsize=(18, 10), nrows=3, ncols=3, squeeze=0)\ni=0\nfor ax, col in zip(axes.reshape(-1), numeric_cols):\n  ax.boxplot(df[col], labels=[col], sym='k.')\n\nplt.tight_layout()","5d26b5e3":"outliers=[]\ndef detect_outlier(data_1):\n    \n    threshold=3\n    mean_1 = np.mean(data_1)\n    std_1 =np.std(data_1)\n    \n    index = 0\n    \n    for y in data_1:\n        z_score= (y - mean_1)\/std_1 \n        if np.abs(z_score) > threshold:\n            outliers.append(index)\n        \n        index = index + 1\n    return outliers","fbf2edc3":"outlier_z_score = detect_outlier(df['NOOrder\/M'])\ndf.drop(outlier_z_score, inplace=True)\nprint(outlier_z_score)","032355d0":"# df.reset_index(inplace=True)\n# outlier_z_score = detect_outlier(df['CreditLimit'])\n# df.drop(outlier_z_score, inplace=True)\n# print(outlier_z_score)","a056a292":"# df.reset_index(inplace=True)\n# outlier_z_score = detect_outlier(df['RegisCap'])\n# df.drop(outlier_z_score, inplace=True)\n# print(outlier_z_score)","56d33e5d":"# df.reset_index(inplace=True)\n# outlier_z_score = detect_outlier(df['Employee'])\n# df.drop(outlier_z_score, inplace=True)\n# print(outlier_z_score)","07763a9b":"df.shape","23d93df0":"df.head()","7e1669aa":"col = [\"NOOrder\/M\", \"PriceOrder\/M\", \"RegisCap\", \"Employee\", \"Aging\", \"CreditLimit\"]\nsc = StandardScaler()\ndf[col] = sc.fit_transform(df[col])","757d4230":"df.head()","ffc29382":"X = df.iloc[:,1:-1]\ny = df.iloc[:,-1]","918e800f":"X.head()","163f4cad":"y.head()","7a6da53b":"#Label encoding on the 'target' column\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nle = LabelEncoder()\ny = le.fit_transform(y)","b38a8130":"#Convert array to Series\ny = pd.Series(y)\ny.value_counts()","1a416a3b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","68c56a11":"X_train.shape","7ecc5a3a":"y_train.shape","88d60da6":"X_test.shape","4f8a69be":"y_test.shape","a259bba0":"# from sklearn.feature_selection import SelectKBest\n# from sklearn.feature_selection import mutual_info_classif\n# from sklearn.feature_selection import chi2","a0964625":"# #Select 4 features\n# selector = SelectKBest(score_func=mutual_info_classif, k=4)\n\n# #Fit the selector to the training data set.\n# selector_model = selector.fit(X_train, y_train)","1e1cbdde":"# #Show selected features\n# select_column = X_train.columns[selector_model.get_support(indices=True)]\n# select_column","1926d4a2":"# select_column_fix = ['NOOrder\/M', 'PriceOrder\/M', 'Aging','CreditLimit']","f4c45f91":"# X_train = X_train[select_column_fix]","39902af1":"# X_test = X_test[select_column_fix]","3de141a4":"# X_train.shape","8f3d1305":"# X_test.shape","0d1dd18e":"from sklearn.linear_model import LogisticRegression\n\nmymodel_Logistic = LogisticRegression(multi_class='auto', solver='liblinear')\nmymodel_Logistic.fit(X_train, y_train)\n\ny_pred = mymodel_Logistic.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred, average='weighted')\nrecall = recall_score(y_test, y_pred, average='weighted')\nf1 = f1_score(y_test, y_pred, average='weighted')\n\nprint(\"Performance:\")\nprint(\" >accuracy = \" + str(accuracy))\nprint(\" >precision = \" + str(precision))\nprint(\" >recall = \" + str(recall))\nprint(\" >f1 = \" + str(f1))","2ba51331":"from sklearn.neighbors import KNeighborsClassifier\n\nmymodel_KNeighbors = KNeighborsClassifier(n_neighbors=3)\nmymodel_KNeighbors.fit(X_train, y_train)\n\ny_pred = mymodel_KNeighbors.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred, average='weighted')\nrecall = recall_score(y_test, y_pred, average='weighted')\nf1 = f1_score(y_test, y_pred, average='weighted')\n\nprint(\"Performance:\")\nprint(\" >accuracy = \" + str(accuracy))\nprint(\" >precision = \" + str(precision))\nprint(\" >recall = \" + str(recall))\nprint(\" >f1 = \" + str(f1))","c110ad26":"from sklearn import svm\n\nmymodel_SVM = svm.SVC(kernel='linear')\nmymodel_SVM.fit(X_train, y_train)\n\ny_pred = mymodel_SVM.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred, average='weighted')\nrecall = recall_score(y_test, y_pred, average='weighted')\nf1 = f1_score(y_test, y_pred, average='weighted')\n\nprint(\"Performance:\")\nprint(\" >accuracy = \" + str(accuracy))\nprint(\" >precision = \" + str(precision))\nprint(\" >recall = \" + str(recall))\nprint(\" >f1 = \" + str(f1))","a10dfb84":"**Perform predictive modeling using SVM**","65bd9fa0":"**Scaler**","9cf23331":"**Perform predictive modeling using Logistic Regression**","e3bbb19e":"**Outlier**","2b7fcb3d":"**Classification**","54be1636":"**Data Exploration**","266063f4":"**Perform predictive modeling using K-nearest neighbors**","d826fee0":"**Heat Map**","9a2f97f5":"**Perform feature engineering**","9c243450":"**Clustering using K- means 3D**","0f4e22b7":"**\u0e17\u0e23\u0e07\u0e1e\u0e25 \u0e40\u0e01\u0e23\u0e34\u0e01\u0e01\u0e34\u0e14\u0e32\u0e01\u0e32\u0e23\n62199130373**","a3d077c7":"**Clustering using K- means**","ec52a0df":"**Data Visualization**","a7c621b8":"**Split data into training set and test set.**"}}