{"cell_type":{"06fde5da":"code","a4137e90":"code","688335dc":"code","675ecf66":"code","a59ab36f":"code","d22d919b":"code","3d819329":"code","f5e93aef":"code","ef01f538":"code","5eec6c59":"code","4a62d30f":"code","3d314972":"code","fe68d742":"code","c8287d8a":"code","cc1afbbc":"code","13885b35":"code","2a9284df":"code","52f7a092":"code","69092164":"code","127e0c2c":"code","58e45956":"code","83aff96a":"code","cc5099c6":"code","1f16fb18":"code","2985a713":"code","3b4daae4":"code","20fe45d7":"code","12954bc7":"code","b0bb53fb":"code","1d8fa4cb":"code","e257379a":"code","ddf488d2":"code","cbbb7164":"code","92494a8f":"code","0142c3b5":"code","fd86657e":"markdown","2081a115":"markdown"},"source":{"06fde5da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4137e90":"news_data_true = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')\nnews_data_true.head() ## load the true dataset","688335dc":"news_data_true.shape ## check shape of the data","675ecf66":"news_data_true.info() ## check info of the column","a59ab36f":"news_data_true.drop('date',axis=1,inplace=True) ## drop date column from data","d22d919b":"news_data_true['subject'].value_counts(normalize=True) ## check type and quantity of news ","3d819329":"news_data_true['status'] = 0 ## add column as status indicates whether a news is fake or true","f5e93aef":"news_data_fake = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')\nnews_data_fake.head() ## load fake news dataset","ef01f538":"news_data_fake.shape ## check the shape of the fake dataset","5eec6c59":"news_data_fake.info() ## check info about fake dataset","4a62d30f":"news_data_fake.drop('date',axis=1,inplace=True) ## remove date column","3d314972":"news_data_fake['subject'].value_counts(normalize=True) ## check type and quantity of news ","fe68d742":"news_data_fake['status'] = 1 ## add column as status indicates whether a news is fake or true","c8287d8a":"news_data = pd.concat([news_data_true,news_data_fake],axis=0,ignore_index=True) ## concatenate two datasets","cc1afbbc":"news_data ## check the final dataset","13885b35":"import sklearn\nfrom sklearn.utils import shuffle\n\nnews_data_final = shuffle(news_data) ## shuffle all the datapoints","2a9284df":"news_data_final ## check our shuffled dataset","52f7a092":"import nltk\nnltk.download('stopwords',download_dir='.\/')","69092164":"nltk.data.path","127e0c2c":"import tensorflow as tf\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\n#NLTK_DATA='\/usr\/share\/nltk_data'\n\n# Initialize the stopwords\nstoplist = stopwords.words('english')\n\nvocab_size = 10000\ncorpus = []\nps = PorterStemmer() ## used for standardization of words\n\nfor i in range(0,len(news_data_final)):\n    message = re.sub('[^a-zA-Z]',' ',news_data_final['title'][i]) ## except a-z and A-Z all charectors will be replaced by space\n    message = message.lower() ## then make every words in lower\n    message = message.split() ## then split every words in list\n    \n    message = [ps.stem(word) for word in message if not word in stoplist] ## use stem to stem words which are not in stoplist\n    message = ' '.join(message) ## then join those words to make the full sentence as a list \n    corpus.append(message) ## then append all the sentences in the corpus\n\n","58e45956":"corpus ## check the corpus of sentences","83aff96a":"import tensorflow.keras ## import keras library\nfrom keras.preprocessing.text import one_hot ## ued one hot encoding for our words\n\nonehot_rep = [one_hot(word,vocab_size) for word in corpus] ## index size of each word in 10k size vocabulary vector","cc5099c6":"onehot_rep ## index representation from 1ok vocab of vector representation of our sentences","1f16fb18":"from keras.preprocessing.sequence import pad_sequences ## import library for pre proccessing\n\nembedded_data = pad_sequences(onehot_rep,maxlen=20,padding='pre') ## done pre padding to make all the sequences of equal length","2985a713":"embedded_data ## done padding to make each sequence same lengths","3b4daae4":"## model desing \n\nfrom tensorflow.keras.layers import Embedding,Dense,LSTM,Dropout\nfrom tensorflow.keras.models import Sequential\n#from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\n\n## Creating model\nembedding_vector_features=40\nmodel=Sequential()\nmodel.add(Embedding(vocab_size,embedding_vector_features,input_length=20)) ## embedding layer used 40 features to make feature representation of the sentences\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(100))\nmodel.add(Dropout(0.3)) ## drop out layer to make the model more regularized\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model.summary()) ## model architechture done","20fe45d7":"X_final=np.array(embedded_data) ## store our X and y\ny_final=np.array(news_data['status']) ","12954bc7":"X_final.shape,y_final.shape\n","b0bb53fb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.2, shuffle=True)","1d8fa4cb":"### Finally Training\nmodel.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10, verbose=2,batch_size=8)","e257379a":"y_pred=model.predict_classes(X_test) ## store the prediction\n","ddf488d2":"from sklearn.metrics import confusion_matrix ## import confusion matrix\n","cbbb7164":"confusion_matrix(y_test,y_pred) ## check confusion matrix\n","92494a8f":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred) ## check test data prediction","0142c3b5":"from sklearn.metrics import classification_report\n\nreport = classification_report(y_test,y_pred)\n\nprint(report) ## check classification report","fd86657e":"* No null values in the dataset.","2081a115":"* This is our final result."}}