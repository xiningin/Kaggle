{"cell_type":{"2d1c361e":"code","b1246236":"code","febb1ff6":"code","9e358858":"code","662db61f":"code","9a7e7646":"code","50eba7c9":"code","b6af7531":"code","6ade975c":"code","e2737853":"code","119c41b2":"code","82b1ffdb":"code","12d9527f":"code","9f126289":"code","78fc454a":"code","26aa2049":"code","6b01138b":"code","c7ab0259":"code","4a90c2f7":"code","22e6ac73":"code","72a300b5":"code","2d5b58f4":"code","4c05d9ce":"code","6d3d5e82":"code","56b1a119":"code","e97d2196":"code","879758b7":"code","e4042a58":"code","7a036cd0":"code","310a93f8":"code","fe75cefa":"code","5c21fce6":"code","a8331558":"code","d7e5fc4d":"code","83ee3c85":"code","a479d278":"code","31d125ba":"code","89e0b2f2":"code","315dc0c2":"code","829a4a24":"code","aaf33760":"code","1352bf68":"code","cf58eb79":"code","1af284a0":"code","f4650c12":"code","493c768a":"code","f1e60676":"code","8df2d0b6":"code","6281bc78":"code","0a31749d":"code","23916ac7":"code","759c6063":"markdown","62b530cb":"markdown","85f2a9bf":"markdown","834b3576":"markdown","14535c35":"markdown","8eca13f8":"markdown","d999b5b6":"markdown","42cd7cd1":"markdown","86e9f6b8":"markdown","cbe07a29":"markdown","fb2fe1c2":"markdown","00e7a58d":"markdown","57bc1a30":"markdown","ccacb606":"markdown","8cbde84c":"markdown"},"source":{"2d1c361e":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","b1246236":"dt=pd.read_csv('..\/input\/bankfull\/bank-full.csv')","febb1ff6":"dt.head()","9e358858":"dt['Target'].hist()","662db61f":"dt.isnull().sum()","9a7e7646":"dt.duplicated().sum()","50eba7c9":"fig = plt.figure(figsize = (15,20))\nax = fig.gca()\ndt.hist(ax = ax)\nplt.show()","b6af7531":"plt.figure(figsize=(15,8))\nsns.heatmap(dt.corr(),annot=True)\nplt.show()","6ade975c":"dt['default'] = dt['default'].map({'yes': 1, 'no': 0})\ndt['housing'] = dt['housing'].map({'yes': 1, 'no': 0})\ndt['loan'] = dt['loan'].map({'yes': 1, 'no': 0})\ndt['Target'] = dt['Target'].map({'yes': 1, 'no': 0})","e2737853":"dt.drop(['day','month','marital'],1,inplace=True)","119c41b2":"dt.shape","82b1ffdb":"job = pd.get_dummies(dt['job'],prefix='job',drop_first=True)\ndt = pd.concat([dt,job],axis=1)\n\nedu = pd.get_dummies(dt['education'],prefix='education',drop_first=True)\ndt = pd.concat([dt,edu],axis=1)\n\ncont = pd.get_dummies(dt['contact'],prefix='contact',drop_first=True)\ndt = pd.concat([dt,cont],axis=1)\n\npout = pd.get_dummies(dt['poutcome'],prefix='poutcome',drop_first=True)\ndt = pd.concat([dt,pout],axis=1)","12d9527f":"dt.drop(['job','education','contact','poutcome'], 1,inplace=True)","9f126289":"dt.info()","78fc454a":"dt.head()","26aa2049":"sns.boxplot(x=dt['age'])","6b01138b":"sns.boxplot(x=dt['balance'])","c7ab0259":"sns.boxplot(x=dt['duration'])","4a90c2f7":"sns.boxplot(x=dt['campaign'])","22e6ac73":"sns.boxplot(x=dt['pdays'])","72a300b5":"sns.boxplot(x=dt['previous'])","2d5b58f4":"from scipy import stats\nz = np.abs(stats.zscore(dt[['age','balance','duration','campaign','pdays','previous']]))\nprint(z)","4c05d9ce":"threshold = 3\nprint(np.where(z > 3))","6d3d5e82":"dt.shape","56b1a119":"df = dt[(z < 3).all(axis=1)]","e97d2196":"df.shape","879758b7":"sns.boxplot(df['age'])","e4042a58":"df.describe()","7a036cd0":"df.head()","310a93f8":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot=True)","fe75cefa":"X = df.drop(['Target'],1)\ny = df['Target']","5c21fce6":"import statsmodels.api as sm\n\nres = sm.Logit(y,X).fit()\nres.summary()","a8331558":"X.drop(['poutcome_other','default'],1,inplace=True)","d7e5fc4d":"res = sm.Logit(y,X).fit()\nres.summary()","83ee3c85":"X.drop(['education_unknown','contact_telephone'],1,inplace=True)","a479d278":"res = sm.Logit(y,X).fit()\nres.summary()","31d125ba":"X.drop(['previous','job_student'],1,inplace=True)","89e0b2f2":"res = sm.Logit(y,X).fit()\nres.summary()","315dc0c2":"from imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\nfrom collections import Counter","829a4a24":"#The numbers before SMOTE\nnum_before = dict(Counter(y))\n\n#Performing SMOTE\n\n#Define pipeline\nover = SMOTE(sampling_strategy=0.8)\nunder = RandomUnderSampler(sampling_strategy=0.8)\nsteps = [('o', over), ('u', under)]\npipeline = Pipeline(steps=steps)\n\n#Transforming the dataset\nX_smote, y_smote = pipeline.fit_resample(X, y)\n\n\n#Tthe numbers after SMOTE\nnum_after =dict(Counter(y_smote))\n","aaf33760":"print(num_before, num_after)","1352bf68":"labels = [\"No\",\"Yes\"]\nplt.figure(figsize=(15,6))\nplt.subplot(1,2,1)\nsns.barplot(labels, list(num_before.values()))\nplt.title(\"Numbers Before Balancing\")\nplt.subplot(1,2,2)\nsns.barplot(labels, list(num_after.values()))\nplt.title(\"Numbers After Balancing\")\nplt.show()","cf58eb79":"X1 = pd.DataFrame(X_smote)\ny1= pd.DataFrame(y_smote)","1af284a0":"new_data = pd.concat([X1, y1], axis=1)\nnew_data.columns = ['age', 'balance', 'housing', 'loan', 'duration', 'campaign', 'pdays','job_blue-collar','job_entrepreneur','job_housemaid',\n                    'job_management','job_retired','job_self-employed','job_services','job_technician','job_unemployed','job_unknown','education_secondary',\n                    'education_tertiary','contact_unknown','poutcome_success','poutcome_unknown','outcome']\nnew_data.head()","f4650c12":"X_new = new_data.drop(['outcome'],1)\ny_new = new_data['outcome']","493c768a":"X_new.head()","f1e60676":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X_new,y_new,test_size=0.2,random_state=0)","8df2d0b6":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","6281bc78":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state = 0)\nlr.fit(x_train, y_train)","0a31749d":"y_pred = lr.predict(x_test)\nprint(y_pred)","23916ac7":"from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score\ncm = confusion_matrix(y_test, y_pred)\nacc = accuracy_score(y_test, y_pred)\npre = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nprint(\"Confusion Matrix : \\n\",cm)\nprint(\"Accuracy :\",acc)\nprint(\"Precision :\",pre)\nprint(\"Recall :\",recall)\nprint(\"F1-score :\",f1)","759c6063":"# Z-score\n*Z-score is finding the distribution of data where mean is 0 and standard deviation is 1 i.e. normal distribution. While calculating the Z-score we re-scale the data and look for data points which are too far from zero. These data points which are way too far from zero will be treated as the outliers. In most of the cases, if the Z-score value is greater than or less than 3 or -3 respectively, that data point will be identified as outliers.*","62b530cb":"# Checking the distribution of varaibles ","85f2a9bf":"# Removing the irrelevant variables","834b3576":"# Here we will use LogisticRegression to see how well our model works","14535c35":"# Removal of irrelevant variables\n\n*Here we will use logit function to check which variables are relevant. This is done by checking the p-value of the variables. The variables which has p-value greater then 0.05 will be removed*","8eca13f8":"*Rows and columns after removing the outliers*","d999b5b6":"# *Synthetic Minority Oversampling Technique(SMOTE)*\n\n*SMOTE first selects a minority class instance x\u00b9 at random and finds its k nearest minority class neighbors. The synthetic instance is then created by choosing one of the k nearest neighbors x\u00b2 at random and connecting x\u00b9 and x\u00b2 to form a line segment in the feature space. The synthetic instances are generated as a convex combination of the two chosen instances x\u00b2 and x\u00b9.*","42cd7cd1":"# Correlation matrix of the variables","86e9f6b8":"# Mapping Yes to 1 and No to 0","cbe07a29":"# Importing the Dataset","fb2fe1c2":"# From the above figure we can see that the data is imbalanced","00e7a58d":"# Creating dummy variables and simultaneously removing one variable to avoid dummy variable trap","57bc1a30":"# Detection of Outliers using BoxPlot","ccacb606":"*Rows and Columns before removing the outliers*","8cbde84c":"# **Importing the Libraries**"}}