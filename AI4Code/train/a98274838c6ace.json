{"cell_type":{"30ae4cc5":"code","836dfa64":"code","07719050":"code","fdf4635c":"markdown","d3a4cf0c":"markdown","a75220f2":"markdown","5544f094":"markdown","30deef81":"markdown"},"source":{"30ae4cc5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2 # image processing\n\nfrom matplotlib import pyplot as plt # data visualization\n\n# making sure result is reproducible\nSEED = 2019\nnp.random.seed(SEED)","836dfa64":"def read_image(image):\n    '''\n        Simply read a single image and convert it RGB in opencv given its filename.\n    '''\n\n    return cv2.cvtColor(cv2.imread(image), cv2.COLOR_BGR2RGB)\n\n\ndef apply_ben_preprocessing(image):\n    '''\n        Apply Ben's preprocessing on a single image in opencv format\n    '''\n    \n    return cv2.addWeighted(image, 4, cv2.GaussianBlur(image, (0,0), 10), -4, 128)\n\n\ndef apply_denoising(image):\n    '''\n        Apply denoising on a single image given it in opencv format.\n        Denoising is done using twice the recommended strength from opencv docs.\n    '''\n    \n    return cv2.fastNlMeansDenoisingColored(image, None, 20, 20, 7, 21)","07719050":"train_df = pd.read_csv('..\/input\/train.csv')\nsamples = train_df.sample(n=10)\n\nfor ID in samples['image_id']:\n    filename = '..\/input\/train_images\/{}.jpg'.format(ID)\n    \n    img = read_image(filename)\n    before = apply_ben_preprocessing(img)\n    after = apply_denoising(before)\n\n    fig, ax = plt.subplots(1, 2, figsize=(16, 20))\n    ax[0].imshow(before)\n    ax[1].imshow(after)","fdf4635c":"## Prerequisites","d3a4cf0c":"## Some Utility Functions","a75220f2":"## After Thought\n\nIf this kernel helps you in anyway, please give an upvote :)\n\nFeel free to comment and discuss with me below on the subject and I will continue to explore more about this dataset and hopefully I can come up with a model that achieves a decent result. \n\n#### As always, Happy Kaggling! :)","5544f094":"## Let's See the Differences","30deef81":"## Inspired by [Applying Ben's Preprocessing](https:\/\/www.kaggle.com\/banzaibanzer\/applying-ben-s-preprocessing)\n\n## My Own Insight: Denoising after Ben's Preprocssing Leads To Better Visual Clarity\n\nApplying Ben's Preprocessing introduces noises(I assume gaussian?) to images at a certain level and thus denoising can help reduce such negative effect. **(Even some characters inked from back of the page becomes more recognizable).**\n\nHowever, the cons:\n1. The denoising takes WAY TOO LONG. On average, each image requires about 21-23 seconds to be denoised.\n\n2. The denoising algorithm in nature cause slight loss of information. However, in my opinion, the loss of information it cause is acceptable compared to its benefits.\n"}}