{"cell_type":{"4502ded0":"code","748753aa":"code","b6dbe9a6":"code","9314e516":"code","e23f1cc9":"code","6256c7bd":"code","c8a9c5ae":"code","ca5bdbf3":"code","cfd8ca11":"code","b4204632":"code","9ea210b1":"code","76fdca5c":"code","b22eeb9f":"code","83ef1ac3":"code","301bba5c":"code","9b88cc84":"code","f731f909":"code","c5d33941":"markdown","d8ceeb99":"markdown","c77a348b":"markdown","ac62bd59":"markdown","369a4600":"markdown","5be2a141":"markdown","afe3390b":"markdown","26f25bc6":"markdown"},"source":{"4502ded0":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import plot\nimport re\nimport itertools\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\n\nraw= pd.read_csv(\"..\/input\/scotch_review.csv\")","748753aa":"raw.head(10)\n\n","b6dbe9a6":"#To figure out the name, age and concentration\n\ndf=raw.name.str.split(',',expand=True)\n\ndf.head(3)\n\n","9314e516":"df.columns=['name','a','b','c','d']\ndf.head()","e23f1cc9":"\ndf.a = df.a.apply(lambda x: np.nan if not '%' in str(x) else x)\ndf.b = df.b.apply(lambda x: np.nan if not '%' in str(x) else x)\ndf.c = df.c.apply(lambda x: np.nan if not '%' in str(x) else x)\ndf.d = df.d.apply(lambda x: np.nan if not '%' in str(x) else x)\ndf['concentration'] = [df.a[i] if df.a[i] is not np.nan else df.b[i] if df.b[i] is not np.nan else df.c[i] if df.c[i] else df.d[i] if df.d[i] is not np.nan else df.a[i] for i in range(df.shape[0])]\n","6256c7bd":"df.reindex().head()","c8a9c5ae":"    df_a=pd.concat([df.name,df.concentration],axis=1)\n    df_a.sample(5)\n","ca5bdbf3":"df_p=raw.price.str.replace(\"[({',$qwertyuioplkjhgfdsazxcvbnm%:]\", \" \")\ndf_price=df_p.convert_objects(convert_numeric=True)\ndf_price.sample()\n","cfd8ca11":"df_b=df_a.concentration.str.replace(\"[({'qwertyuioplkjhgfdsazxcvbnm%:]\", \" \")\ndf_b.head()\n\n","b4204632":"df_c=df_b.convert_objects(convert_numeric=True)\ndf_c.head()","9ea210b1":"df_col_merged =pd.concat([df_a.name, df_c, df_price, raw.category, raw.iloc[:,3],raw.description], axis=1)\n\ndf_col_merged.info()","76fdca5c":"final_df=df_col_merged.dropna()\nfinal_df\n\n","b22eeb9f":"final_df.loc[final_df['price'].idxmax()]\n\n\n","83ef1ac3":"GSW=final_df.loc[final_df['category'] == 'Grain Scotch Whisky', 'name':'category']\nBMSW=final_df.loc[final_df['category'] == 'Blended Malt Scotch Whisky', 'name':'category']\nSGW=final_df.loc[final_df['category'] == 'Single Grain Whisky', 'name':'category']\nSMS=final_df.loc[final_df['category'] == 'Single Malt Scotch', 'name':'category']\nBSW=final_df.loc[final_df['category'] == 'Blended Scotch Whisky', 'name':'category']\n","301bba5c":"\n\nfig, ax = plt.subplots(2, 3, figsize=(12, 10))\nsns.distplot(final_df['concentration'],axlabel=\"Frequency distribution of Concentration\", color=\"r\", kde = True, ax=ax[0][0])\n#sns.distplot(smw['concentration'],  hist=False,kde = True,rug_kws={\"color\": \"g\"}, ax=ax[0][1])\nsns.distplot(GSW['concentration'],axlabel=\"GSW\", kde = True, ax=ax[0][1])\nsns.distplot(BMSW['concentration'], axlabel=\"BMSW\",    kde = True, ax=ax[0][2])\nsns.distplot(SGW['concentration'],axlabel=\"SGW\",  kde = True, ax=ax[1][0])\nsns.distplot(SMS['concentration'], axlabel=\"SMS\", kde = True, ax=ax[1][1])\nsns.distplot(BSW['concentration'],label='BSW' ,axlabel=\"BSW\", kde = True, ax=ax[1][2])\n\n\n\n","9b88cc84":"whiskey_type=final_df.category.unique()\nwhiskey_type","f731f909":"final_df.groupby('category').mean()","c5d33941":"**Lets clean the price column**","d8ceeb99":"** Extracting the concentration % of Whiskey to a single column****","c77a348b":"**Frequency distribution of Whiskey conc %**","ac62bd59":"**Removing % sign and changing the dtype of column concentration**","369a4600":"**Lets analyze if there is any relation b\/w concentration and price**","5be2a141":"********#To figure out the name, age and concentration********","afe3390b":"**Creating a new table with name and concentration**","26f25bc6":"**Renaming columns**"}}