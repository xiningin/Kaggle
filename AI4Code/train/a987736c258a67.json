{"cell_type":{"59f5864d":"code","3e336212":"code","3e9339d0":"code","ea496c3a":"code","bedc0fcc":"code","c0d8649e":"code","0272093e":"code","e2d4cb56":"code","ea7bdc7d":"code","18728e27":"code","62e321e1":"code","7d10942f":"code","7307b0ac":"code","31fb503b":"code","7463a73c":"code","181eae2e":"code","370f6b01":"code","0c05f004":"code","fd895df7":"markdown","27985723":"markdown","dd6082f0":"markdown","a54fdef7":"markdown","3ed79cd3":"markdown","31953e7f":"markdown","153ea569":"markdown","1e39d11d":"markdown","28dd0539":"markdown","c2e088bb":"markdown","dfe21b01":"markdown","ec957bf7":"markdown","f7ff9b03":"markdown","8ec8badb":"markdown","c100d4da":"markdown","800640a5":"markdown","e51d48b8":"markdown","aa53a21b":"markdown","1d02e9a6":"markdown","eedc3674":"markdown","aaa07cad":"markdown","569b0d5c":"markdown","be3c763c":"markdown","52186da8":"markdown","23c29501":"markdown","8f009169":"markdown","12fe4116":"markdown","048ce570":"markdown"},"source":{"59f5864d":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport math\n\n# Visualizations\nfrom matplotlib import pyplot as plt\nimport missingno as msno\n\n# Plotly import\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n# Avoid http:\/\/requirejs.org\/docs\/errors.html#scripterror\nimport plotly.offline as pyo\npyo.init_notebook_mode()","3e336212":"def resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.loc[0].values\n    summary['Second Value'] = df.loc[1].values\n    summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=10),2) \n\n    return summary\n\n# Function from ->> https:\/\/www.kaggle.com\/kabure\/eda-feat-engineering-encode-conquer\n\n# My understanding of entropy:\n#    The closest the entropy value to 0, the more predictable the instance value will be. \n#    In other words, the closest entropy value to 0, the less surprising the instance value we will be\n\n# References: \n#    https:\/\/machinelearningmastery.com\/what-is-information-entropy\/\n#    https:\/\/www.youtube.com\/watch?v=YtebGVx-Fxw\n\n\n#___________________________________________________________\n# EXPANDED DESCRIBE FUNCTION\n\ndef expanded_describe(df):\n    '''\n    Expand pd.describe() function\n    \n    Notes\n    unique2: count unique values not matter if it is \n             an integer, float, or object data type.\n             \n    top2:    it shows the top frequent value no matter if it is \n             an integer, float or object data type. \n             It makes a descending order for those columns with \n             more than one mode and chooses the first value.\n             \n    freq2:   it shows the frequency of the top frequent value, \n             whether it is an integer, float, or object data type.\n    '''\n    \n    df_describe = df.describe(include='all').T\n    df_describe.insert(loc=0, column='dtypes', \n                       value=pd.DataFrame(df.dtypes,\n                                          columns=['dtypes'])['dtypes'])\n    \n    # reset index and replace index for column_name\n    df_describe = df_describe.reset_index()\n    df_describe.rename(columns={'index':'column_name'}, inplace=True)\n    \n    # dropping unique column from pd.describe() and adding column unique2\n    df_describe.drop(['unique'], axis=1, inplace=True)\n    df_describe.insert(loc=2, column='unique2', value=pd.DataFrame(df.nunique().values))\n    \n    \n    # dropping top column from pd.describe() and adding column top2\n    df_describe.drop(['top'], axis=1, inplace=True)\n    df_describe.insert(loc=4, column='top2', value=df.mode().loc[0].values)\n    \n    # adding quick view of first three value \n    df_describe['First Value'] = df.loc[0].values\n    df_describe['Second Value'] = df.loc[1].values\n    df_describe['Third Value'] = df.loc[2].values\n    \n    for name in df_describe['column_name'].value_counts().index:\n        df_describe.loc[df_describe['column_name'] == name, \n                        'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), \n                                                         base=10),2) \n        \n        df_describe.loc[df_describe['column_name'] == name,\n                        'freq2'] = df[name].value_counts().values[0]\n        \n        \n    # Dropping freq from pd.describe() and relocating freq2\n    df_describe.drop(['freq'], axis=1, inplace=True)\n    df_describe.insert(loc=5, column='freq2', value=df_describe.pop('freq2'))\n    df_describe['freq2'] = df_describe['freq2'].astype(int)\n    \n    \n    # to improve visualization replace NaN for '-' in columns mean to max\n    # rows with '-' are not numeric data type columns.\n    df_describe.fillna('-', inplace=True)\n    \n    return df_describe","3e9339d0":"def spot_missing_values(df, nan_string_list):\n    '''\n    Function that evaluates pd.isnull() plus other\n    string values (such as ' ', 'No available', etc) to spot\n    missing values. \n    \n    df: DataFrame\n    nan_string_list: list of string e.g.: 'N\/A',' ',etc.\n    '''\n\n    summary_missing = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary_missing = summary_missing.reset_index()\n    summary_missing['isnull'] = df.isnull().sum().values #to_frame('isnull').reset_index()['isnull']\n    summary_missing['column_name'] = summary_missing['index']\n    summary_missing = summary_missing[['column_name', 'dtypes','isnull']]\n\n    for row in summary_missing['column_name'].value_counts().index:\n        for string in nan_string_list:\n            c_name = str(\"value: '\" + str(string) + \"'\")\n            summary_missing.loc[summary_missing['column_name'] == row, c_name] = df[df[row]==string][row].count()\n\n    summary_missing['total_missing'] = summary_missing.drop(['column_name', 'dtypes'], axis=1).sum(axis=1)\n    summary_missing['percent_missing'] = (summary_missing['total_missing']\/len(df)*100).map(\"{:,.2f}%\".format)\n    \n    return summary_missing\n\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/missing_data.html\n# https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.isnull.html","ea496c3a":"def reshape_df(DataFrame,\n               feature_columns,\n               against_to):\n    '''\n    DataFrame = DataFrame \n    feature_columns = list()\n    against_to = string\n    \n    Function Description:\n        Generate datasets with the needed shape to plot with plotly.\n    \n    new shape example:\n    \n        |gender  |Churn No  |Churn Yes  |Total\n    0   |Male    |2619      |930        |3549\n    1   |Female  |2544      |939        |3483\n    '''\n    df_list = []\n    for col in feature_columns:\n        df1 = DataFrame.copy()\n        df2 = df1.groupby([col, against_to]).size().reset_index(name='counts')\n        df3 = df2.pivot(index=col, columns=against_to)\n\n        df3.columns = [against_to+' '+ c[1] for c in df3.columns]\n        df3['Total'] = df3[\"Churn No\"] + df3[\"Churn Yes\"]\n        df3 = df3.sort_values(by = 'Total', ascending=False)\n        df3 = df3.reset_index()\n        df_list.append(df3)\n    \n    if len(feature_columns) == 1:\n        return df3\n    else:\n        return [df for df in df_list]\n","bedc0fcc":"def custom_bar_chart(DataFrame,\n                     feature_columns, \n                     plot1_title,\n                     xaxis1_title,\n                     hover_desc_var1,\n                     plot2_title = None,\n                     xaxis2_title = None,\n                     hover_desc_var2 = None,\n                     yaxis2_title = None,\n                     subplots_rows = 1,\n                     subplots_cols = 2,\n                     against_to = 'Churn',\n                     yaxis1_title = 'Number of customers',\n                     color = ['rgb(203,182,186)','rgb(83,98,139)']):\n    \n    \n    '''\n    Function Description:\n        To generate custom stacked bar plots \n\n    '''\n\n    # Variables hover_annotation. \n    a1 = hover_desc_var1\n    a2 = hover_desc_var2\n\n    if len(feature_columns) == 1:\n        \n        # IF YES: GENERATE 1 PLOT.\n        \n        # To generate dataset with the needed shape.\n        df1 = reshape_df(DataFrame,feature_columns,\n                         against_to)\n        \n        # To generate % of Churn No or Yes for each class of each categorical variable.\n        percent1 = round(df1['Churn No']\/df1['Total']*100,2)\n        percent2 = round(df1['Churn Yes']\/df1['Total']*100,2)\n        # To generate 1 stacked bar plot.\n        fig = go.Figure(data=[\n            \n             \n            go.Bar(name = 'Retain', \n                   x = df1[feature_columns[0]], \n                   y = df1['Churn No'],\n                   marker = {'color': color[0]},\n                   text = percent1,\n                   textposition=\"none\",\n                   hovertemplate = a1+'%{x}<br>'+\n                   'Retain <br>'+\n                   'N\u00b0 Cust: %{y}<br>'+\n                   '% Cust: %{text}%'+\n                   '<extra><\/extra>'\n                  ),\n            \n            \n            go.Bar(name = 'Churn',\n                   x = df1[feature_columns[0]], \n                   y = df1['Churn Yes'],\n                   marker = {'color':color[1]},#'rgb(148,96,77)'\n                   text = percent2,\n                   textposition=\"none\",\n                   hovertemplate = a1+'%{x}<br>'+\n                   'Churn <br>'+\n                   'N\u00b0 Cust: %{y}<br>'+\n                   '% Cust: %{text}%'+\n                   '<extra><\/extra>'\n                  )\n        ])\n        \n        # Add total customers and percentages per class on each variable. \n        for i in range(len(df1[feature_columns[0]])):\n            total_cust = str(df1['Total'].loc[i])+' '\n            pct = str(round(df1['Total'].loc[i]\/df1['Total'].sum()*100,2))+'%'\n            label2 = total_cust+'<br>'+pct\n            fig.add_annotation(x = df1[feature_columns[0]].loc[i],\n                               y = df1['Total'].loc[i],\n                               xref='x1', \n                               yref='y1',\n                               yshift = 17, # shift the annotation's position up or down in px.\n                               text = label2,\n                               showarrow=False)     \n    \n        fig.update_layout(barmode = 'stack',\n                         title_text = plot1_title,\n                         title_x = 0.5, # to center the title\n#                          title_y = 0.82, # reduce  space between graph and title\n                         xaxis_title = xaxis1_title,\n                         yaxis1_title = yaxis1_title,\n                         )\n        \n        config = {'displaylogo': False}\n        return fig.show(config = config)\n    \n    else: \n        \n        # __________________________________________________________\n        # Generate 2 dataset with the needed shape.\n        \n        df1, df2 = reshape_df(DataFrame,feature_columns,\n                              against_to)\n\n        # Creating 2 Subplots side-by-side.\n        fig = make_subplots(rows = subplots_rows, cols = subplots_cols,\n                        specs = [[{'type':'xy'}, {'type':'xy'}]], # 'xy' > bar\n                        subplot_titles = (plot1_title, plot2_title),\n                       )\n\n        # Subplot 1 - Stacked\n        percent = round(df1['Churn No']\/df1['Total']*100,2)\n        fig.add_trace(go.Bar(name = 'Retain',\n                             x = df1[feature_columns[0]],\n                             y = df1['Churn No'],\n#                              offsetgroup = 0,\n                             marker = {'color': color[0]},#'rgb(63,170,217)'\n#                              visible='legendonly',\n                             text = percent,\n                             textposition=\"none\",\n                             hovertemplate = a1+'%{x}<br>'+\n                             'Retain <br>'+\n                             'N\u00b0 Cust: %{y}<br>'+\n                             '% Cust: %{text}%'+\n                             '<extra><\/extra>',\n            ),\n            row = 1,\n            col = 1,\n        )\n\n        percent = round(df1['Churn Yes']\/df1['Total']*100,2)\n        fig.add_trace(\n            go.Bar(\n                name = 'Churn',\n                x = df1[feature_columns[0]],\n                y = df1['Churn Yes'],\n#                 offsetgroup = 0,\n                marker = {'color':color[1]},#'rgb(148,96,77)'\n#                labels = {x: 'Phone Service'}\n                text = percent,\n                textposition=\"none\",\n                hovertemplate = a1+'%{x}<br>'+\n                'Churn <br>'+\n                'N\u00b0 Cust: %{y}<br>'+\n                '% Cust: %{text}%'+\n                '<extra><\/extra>',\n            ),\n            row = 1,\n            col = 1,\n        )\n    \n        # Subplot 2 - Stacked\n        percent = round(df2['Churn No']\/df2['Total']*100,2)\n        fig.add_trace(go.Bar(name = 'Retain',\n                             x = df2[feature_columns[1]],\n                             y = df2['Churn No'],\n#                              offsetgroup = 0,\n                             marker = {'color': color[0]},\n#                              visible = 'legendonly',\n                             showlegend = False,\n                             text = percent,\n                             textposition=\"none\",\n                             hovertemplate= a2+'%{x}<br>'+\n                             'Retain <br>'+\n                             'N\u00b0 Cust: %{y}<br>'+\n                             '% Cust: %{text}%'+\n                             '<extra><\/extra>',\n            ),\n            row = 1,\n            col = 2,\n        )\n\n        percent = round(df2['Churn Yes']\/df2['Total']*100,2)\n        fig.add_trace(\n            go.Bar(\n                name = 'Churn',\n                x = df2[feature_columns[1]],\n                y = df2['Churn Yes'],\n#                 offsetgroup = 0,\n                marker = {'color': color[1]},\n#                 labels = {x: 'Phone Service'},\n                showlegend = False,\n                text = percent,\n                textposition=\"none\",\n                hovertemplate = a2+'%{x}<br>'+\n                'Churn <br>'+\n                'N\u00b0 Cust: %{y}<br>'+\n                '% Cust: %{text}%'+\n                '<extra><\/extra>',\n            ),\n            row = 1,\n            col = 2,\n        )\n        \n        # Add total customers and percentages per class on each variable. \n        for i in range(len(df1[feature_columns[0]])):\n            total_cust = str(df1['Total'].loc[i])+' '\n            pct = str(round(df1['Total'].loc[i]\/df1['Total'].sum()*100,2))+'%'\n            label2 = total_cust+'<br>'+pct\n            fig.add_annotation(x = df1[feature_columns[0]].loc[i],\n                               y = df1['Total'].loc[i],\n                               yshift = 17, # shift the annotation's position up or down in px.\n                               xref='x1', \n                               yref='y1',\n                               text = label2,\n                               showarrow=False)       \n        \n        for i in range(len(df2[feature_columns[1]])):\n            total_cust = str(df2['Total'].loc[i])+' '\n            pct = str(round(df2['Total'].loc[i]\/df2['Total'].sum()*100,2))+'%'\n            label2 = total_cust+'<br>'+pct\n            fig.add_annotation(x = df2[feature_columns[1]].loc[i],\n                               y = df2['Total'].loc[i],\n                               yshift = 17, # shift the annotation's position up or down in px.\n                               xref='x2', \n                               yref='y2',\n                               text = label2,\n                               showarrow=False)\n        \n        fig.update_layout({'barmode':'stack'},\n                          xaxis1_title = xaxis1_title,\n                          yaxis1_title = yaxis1_title,\n                          xaxis2_title = xaxis2_title,\n                          yaxis2_title = yaxis2_title,\n                          showlegend = True,\n                         ) \n\n        config = {'displaylogo': False}\n        return fig.show(config = config)\n\n# https:\/\/plotly.com\/python-api-reference\/generated\/plotly.graph_objects.Figure.html\n# https:\/\/plotly.com\/python-api-reference\/generated\/plotly.graph_objects.Bar.html\n","c0d8649e":"def custome_histograms(DataFrame,\n                       trace_var = 'Contract',\n                       class_trace_var = ['Month-to-month','One year', 'Two year'],\n                       histnorm = 'probability',\n                       color = ['#51638C','#D1C3CA','#80B4CE'], \n                       title = 'Churnned customers contract distributions',\n                       xaxis_title_text = 'tenure in months', # xaxis label\n                       yaxis_title_text = 'Density' # yaxis label\n                      ):\n    \n    \n    df1 = DataFrame\n    x1 = df1[(df1[trace_var]==class_trace_var[0])&(df1['Churn']=='Yes')]['tenure']\n    x2 = df1[(df1[trace_var]==class_trace_var[1])&(df1['Churn']=='Yes')]['tenure']\n    x3 = df1[(df1[trace_var]==class_trace_var[2])&(df1['Churn']=='Yes')]['tenure']\n    \n    fig = go.Figure()\n    \n    fig.add_trace(go.Histogram(name = class_trace_var[0], \n                               x = x1,\n                               histnorm = histnorm, # Density\n                               marker = dict(color = color[0]),\n                               xbins = dict(start=1.0,size=3), # tenure does not have value 0\n                               hovertemplate = 'Bin-range: ' + '%{x}' \n                               + '<br>Density: %{y:.2f}<extra><\/extra>'),\n                 )\n    fig.add_trace(go.Histogram(name = class_trace_var[1],\n                               x = x2,\n                               histnorm = histnorm, # Density \n                               visible = 'legendonly',\n                               marker = dict(color = color[1]),\n                               xbins = dict(start=1.0,size=3),\n                               hovertemplate = 'Bin-range: ' + '%{x}' \n                               + '<br>Density: %{y:.2f}<extra><\/extra>'),\n                 )\n    fig.add_trace(go.Histogram(name = class_trace_var[2],\n                               x = x3,\n                               histnorm = histnorm, # Density\n                               visible = 'legendonly',\n                               marker = dict(color = color[2]),\n                               xbins = dict(start=1.0,size=3),\n                               hovertemplate = 'Bin-range: ' + '%{x}'\n                               + '<br>Density: %{y:.2f}<extra><\/extra>'),\n                 )\n\n    \n    \n# xbins=dict(\n#         start=-3.0,\n#         end=4,\n#         size=0.5\n#     )\n    fig.update_traces(opacity=0.75)\n\n    fig.update_layout(barmode = 'overlay',\n        title_text = title, # title of plot\n        title_x = 0.5, # to center the title\n#         title_y = 0.82, # reduce space between title and graph area.\n        xaxis_title_text = xaxis_title_text, # xaxis label\n        yaxis_title_text = yaxis_title_text, # yaxis label\n        bargap = 0, # gap between bars of adjacent location coordinates\n        bargroupgap = 0 # gap between bars of the same location coordinates\n    )\n    \n    fig.update_xaxes(tick0=0.0, dtick=6)\n    config = {'displaylogo': False}    \n    return fig.show(config = config)","0272093e":"def costum_boxplot(DataFrame,\n                   numeric_column,\n                   dependent_var,\n                   time_month,\n                   group_month,\n                   title_text,\n                   xaxis_title_text,\n                   yaxis_title_text\n                  ):\n\n    df = DataFrame\n    column = numeric_column\n    months = time_month\n    dependent_var = dependent_var\n    m = group_month\n    #___________________________________________________________\n    # Adding column 'tenure2' for quarters\n    df['tenure2'] = np.where((df[months]%m)==0,df['tenure']\/m,np.floor(df['tenure']\/m)+1 )\n    \n    #___________________________________________________________\n    # Adapting column for plot\n    df['Customer'] = df[dependent_var].replace({'No':'Retain','Yes':'Churn'})\n\n    churn_mean = df[df[dependent_var]=='Yes'][column].mean() # Churn mean monthly charges\n    retain_mean = df[df[dependent_var]=='No'][column].mean() # Retain mean monthly charges\n\n    #___________________________________________________________\n    # Boxplot plotly\n    fig = px.box(df, \n                 x=\"tenure2\", \n                 y=column, \n                 color=\"Customer\", \n                 color_discrete_map={'Retain': 'rgb(203,182,186)', \n                                     'Churn': 'rgb(83,98,139)'}\n                )\n\n    fig.update_traces(quartilemethod=\"inclusive\") \n\n    # info about \"inclusive\", \"exclusive\", or \"linear\":\n    #     https:\/\/plotly.com\/python\/box-plots\/#choosing-the-algorithm-for-computing-quartiles\n\n\n    fig.add_hrect(y0=churn_mean, y1=churn_mean, line_width=2, line_dash=\"dot\",\n                  line_color='rgb(83,98,139)', opacity=0.3)\n\n    fig.add_hrect(y0=retain_mean, y1=retain_mean, line_width=2, line_dash=\"dot\",\n                  line_color='rgb(203,182,186)', opacity=0.3)\n\n    # layer = 'bellow' traces. \n    fig.update_layout(title_text = title_text, # title of plot\n                      title_x = 0.5, # to center the title\n                      xaxis_title_text = xaxis_title_text, # xaxis label\n                      yaxis_title_text = yaxis_title_text, # yaxis label             \n                     )\n    fig.update_xaxes(tick0=0.0, dtick=1)\n\n    config = {'displaylogo': False}\n    return fig.show(config = config)","e2d4cb56":"def custom_line_chart(DataFrame,\n                      dependent_var,\n                      time_month,\n                      group_month,\n                      display, # options: 'percent' or 'customer'\n                      title_text,\n                      xaxis_title_text,\n                      yaxis_title_text\n                     ):\n    \n    '''\n    Create a line chart that could change from months, quarters, etc. \n    That could change from percentages to count of customers. \n    '''\n    \n    \n    df = DataFrame\n    m = group_month\n    \n    #___________________________________________________________\n    # Adding column 'tenure2' for quarters\n    df['tenure2'] = np.where((df[time_month]%m)==0,df[time_month]\/m,np.floor(df[time_month]\/m)+1 )\n\n\n    #___________________________________________________________\n    # Reshaping dataset for column \n    a = 'tenure2' # 'tenure' is in months, 'tenure2' is in quarters\n    df2 = reshape_df(DataFrame = df,\n                     feature_columns = [a],\n                     against_to = dependent_var).sort_values(by = a).reset_index()\n\n    display = display\n    if display == 'percent':\n        y1 = df2['Churn Yes']\/df2['Total']*100\n        hovertemplate1 ='Tenure: ' + '%{x}' +' months'+ '<br>Churn customer: %{y:.2f}%<extra><\/extra>'\n        y2 = df2['Churn No']\/df2['Total']*100\n        hovertemplate2 ='Tenure: ' + '%{x}' +' months'+ '<br>Retain customer: %{y:.2f}%<extra><\/extra>'\n    elif display == 'customer':\n        y1 = df2['Churn Yes']\n        hovertemplate1 ='Tenure: ' + '%{x}' +' months'+ '<br>Churn customer: %{y}<extra><\/extra>'\n        y2 = df2['Churn No']\n        hovertemplate2 ='Tenure: ' + '%{x}' +' months'+ '<br>Retain customer: %{y}<extra><\/extra>'\n    \n    #___________________________________________________________\n    # LINE PLOT\n    fig = go.Figure()\n\n    fig.add_trace(go.Scatter(name = 'Churn',\n                             x = df2[a],\n                             y =  y1, \n                             mode = 'lines',\n                             marker = dict(color='rgb(83,98,139)'),\n                             hovertemplate = hovertemplate1\n                             ))\n\n    fig.add_trace(go.Scatter(name = 'Retain',\n                             x = df2[a],\n                             y = y2,\n                             mode = 'lines',\n                             marker = dict(color='rgb(203,182,186)'),\n                             hovertemplate = hovertemplate2\n                             ))\n\n    fig.update_layout(title_text = title_text, # title of plot\n                      title_x = 0.5, # to center the title\n    #                   title_y = 1, # reduce difference between subtitle and title.\n                      xaxis_title_text = xaxis_title_text, # xaxis label\n                      yaxis_title_text = yaxis_title_text, # yaxis label\n                     )\n\n    fig.update_xaxes(tick0=0.0, dtick=3)\n    config = {'displaylogo': False}\n    \n    return fig.show(config = config)","ea7bdc7d":"def serv_dist_in_num_servs(n_serv):\n    \n    '''\n    Function describes the distribution of services for customers \n    who have selected a certain number of services. \n    \n    It is need a column with the number of active services per customer. \n    \n    It is needed a column with the list of active services per customer, \n        that column should be named as 'ActvServ'\n        \n        Example code to generated that column 'ActvServ':\n        list2 = []\n        for i in range(len(df)):\n            list1=[]\n            for j in col_list:\n                if ~pd.Series(df[j].iloc[i]).str.contains('No', regex=False)[0]:\n                    list1.append(j)\n            list2.append(list1)\n        df['ActvServ'] = list2\n    '''\n\n    n_serv = n_serv\n    flatten_list = sum(df[df['num_services']==n_serv]['ActvServ'].values, []) # flatten.\n    values, counts = np.unique(flatten_list, return_counts=True)\n    df3 = pd.DataFrame({'Services': values, 'counts': counts})\n    df3.sort_values(by=['counts'], ascending=False, inplace=True)\n    df3.reset_index(inplace=True)\n    df3.drop(['index'], inplace=True, axis=1)\n\n\n    # Stacked bar plot for the first two service with higher frequency.\n    custom_bar_chart(DataFrame = df[df['num_services']==n_serv],\n                     feature_columns = [df3['Services'].iloc[0],df3['Services'].iloc[1] ],\n                     plot1_title = str(df3['Services'].iloc[0])+' for '+str(n_serv)+' services selected',\n                     plot2_title = str(df3['Services'].iloc[0])+' for '+str(n_serv)+' services selected',\n                     xaxis1_title = str(df3['Services'].iloc[0]),\n                     xaxis2_title = str(df3['Services'].iloc[1]),\n                     hover_desc_var1 = str(df3['Services'].iloc[0]+': '),\n                     hover_desc_var2 = str(df3['Services'].iloc[1]+': ')\n                    ) \n\n    # Pie chart with \n    fig = px.pie(df3, values='counts', names='Services', color='Services',\n                color_discrete_sequence=px.colors.qualitative.Pastel1)\n    \n    # https:\/\/plotly.com\/python\/discrete-color\/\n    \n    fig.update_layout(\n        title_text = 'Service distribution for customer with ' +str(n_serv)+ ' services' , # title of plot\n        title_x = 0.5, # to center the title\n    )\n\n    config = {'displaylogo': False}\n    \n    return fig.show(config=config)\n","18728e27":"df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","62e321e1":"# Quick view to the columns data\npd.set_option(\"display.max_columns\",40)\n# df.head(10)\n# df.tail(10)\ndf.sample(10)","7d10942f":"expanded_describe(df)","7307b0ac":"spot_missing_values(df, [' ','No apply', 'empty'])","31fb503b":"# pd.to_numeric(df['TotalCharges'], errors='raise')\n#   previous code line generate \n#   ValueError: Unable to parse string \" \" at position 488\n\n\n# If \u2018coerce\u2019, then invalid parsing will be set as NaN.\ndf['TotalCharges'] = pd.to_numeric(df.TotalCharges, errors='coerce')\n\n# drop NaN\ndf = df.dropna(axis=0)\n\n# drop customerID\ndf.drop('customerID', axis=1, inplace=True)\n\n# verifying there is not missing values. \nspot_missing_values(df, [' ','No apply', 'empty'])\n# expanded_describe(df)","7463a73c":"c_labels = ['Retain', 'Churn']\nfig = go.Figure(data=[go.Pie(labels=c_labels, \n                             values=df['Churn'].value_counts(), \n                             hole=.3,\n                            marker=dict(colors=['rgb(203,182,186)','rgb(83,98,139)'])\n                            )\n                     ]\n               )\n\n\n# fig.update_trace(color_discrete_sequence=[\"red\", \"blue\"])\n\nfig.update_layout(\n    title_text=\"Churn distribution\",\n    title_x = 0.5,\n    legend=dict(\n        orientation=\"v\",\n        yanchor=\"top\",\n        y=1.0,\n        xanchor=\"left\",\n        x=1\n    ),\n    legend_tracegroupgap = 90\n    )\n\nconfig = {'displaylogo': False}\nfig.show(config=config)","181eae2e":"df['SeniorCitizen'].replace({0:'Under 65',1:'Over 65'}, inplace = True)\ncustom_bar_chart(DataFrame = df,\n                 feature_columns = ['gender', 'SeniorCitizen'],\n                 plot1_title = 'Sex Distribution vs Churn',\n                 plot2_title = 'Senior citizen vs Churn',\n                 xaxis1_title = 'Sex distribution',\n                 xaxis2_title = 'Senior citizen distribution',\n                 hover_desc_var1 = 'Sex: ',\n                 hover_desc_var2 = 'Senior citizen: ') \n\ncustom_bar_chart(DataFrame = df,\n                 feature_columns = ['Partner', 'Dependents'],\n                 plot1_title = 'Partner vs Churn',\n                 plot2_title = 'Dependents vs Churn',\n                 xaxis1_title = 'Partner',\n                 xaxis2_title = 'Dependents',\n                 hover_desc_var1 = 'With partner: ',\n                 hover_desc_var2 = 'With dependents: ') ","370f6b01":"custom_bar_chart(DataFrame = df,\n                 feature_columns = ['PhoneService', 'MultipleLines'],\n                 plot1_title = 'Phone service vs Churn',\n                 plot2_title = 'Multiline vs Churn',\n                 xaxis1_title = 'Phone service',\n                 xaxis2_title = 'Multiline',\n                 hover_desc_var1 = 'With phone service: ',\n                 hover_desc_var2 = 'With multiline: ') \n\ncustom_bar_chart(DataFrame=df,\n                 feature_columns=['InternetService', 'OnlineSecurity'],\n                 plot1_title='Internet service vs Churn',\n                 plot2_title='Online security vs Churn',\n                 xaxis1_title='Internet service',\n                 xaxis2_title='Online security',\n                 hover_desc_var1='With internet service: ',\n                 hover_desc_var2='With online security: ')\n\ncustom_bar_chart(DataFrame=df,\n                 feature_columns=['OnlineBackup', 'DeviceProtection'],\n                 plot1_title='Online backup vs Churn',\n                 plot2_title='Device protection vs Churn',\n                 xaxis1_title='Online backup',\n                 xaxis2_title='Device protection',\n                 hover_desc_var1='With online backup: ',\n                 hover_desc_var2='With device protection: ')\n\ncustom_bar_chart(DataFrame = df,\n                 feature_columns = ['TechSupport'],\n                 plot1_title = 'Tech support vs Churn',\n                 xaxis1_title = 'Tech support',\n                 hover_desc_var1 = 'With tech support: ',\n                ) \n\ncustom_bar_chart(DataFrame = df,\n                 feature_columns = ['StreamingTV','StreamingMovies'],\n                 plot1_title = 'Streaming TV vs Churn',\n                 plot2_title = 'Streaming movies vs Churn',\n                 xaxis1_title = 'Streaming TV',\n                 xaxis2_title = 'Streaming movie',\n                 hover_desc_var1 = 'With streaming TV: ',\n                 hover_desc_var2 = 'With streaming movie: ') ","0c05f004":"custom_bar_chart(DataFrame = df,\n                 feature_columns = ['Contract','PaperlessBilling'],\n                 plot1_title = 'Contract vs Churn',\n                 plot2_title = 'Paperless billing vs Churn',\n                 xaxis1_title = 'Contract',\n                 xaxis2_title = 'Paperless billing',\n                 hover_desc_var1 = 'Contract: ',\n                 hover_desc_var2 = 'Paperless billing: ') \n\ncustome_histograms(DataFrame = df, \n                   trace_var = 'Contract',\n                   class_trace_var = ['Month-to-month','One year', 'Two year'],\n                   histnorm = 'probability',\n                   color = ['#51638C','#D1C3CA','#80B4CE'], \n                   title = 'Churnned customers contract distributions',\n                   xaxis_title_text = 'tenure in months',\n                   yaxis_title_text = 'Density')\n\ncustom_line_chart(DataFrame = df,\n                  dependent_var='Churn',\n                  time_month='tenure',\n                  group_month=1,\n                  display = 'percent',\n                  title_text = 'Churn and retain customer percentage per month of tenure',\n                  xaxis_title_text = 'Tenure in month',\n                  yaxis_title_text = 'Percent of retain and churned customer')\n\ncustom_line_chart(DataFrame = df,\n                  dependent_var='Churn',\n                  time_month='tenure',\n                  group_month=1,\n                  display = 'customer',\n                  title_text = 'Churned and retained count of customers per month',\n                  xaxis_title_text = 'Tenure in month',\n                  yaxis_title_text = 'Count of customers')\n\ncostum_boxplot(DataFrame=df,\n               numeric_column='MonthlyCharges',\n               dependent_var='Churn',\n               time_month='tenure',\n               group_month=3,\n               title_text='Boxplot for monthly charge grouped quarterly',\n               xaxis_title_text = 'Tenure in quarters',\n               yaxis_title_text = 'Monthly charges per customer')\n\ncostum_boxplot(DataFrame=df,\n               numeric_column='TotalCharges',\n               dependent_var='Churn',\n               time_month='tenure',\n               group_month=3,\n               title_text='Boxplot for total charge grouped quarterly',\n               xaxis_title_text = 'Tenure in quarters',\n               yaxis_title_text = 'Total charges per customer')\n\ncustom_bar_chart(DataFrame = df,\n                 feature_columns = ['PaymentMethod'],\n                 plot1_title = 'Payment method vs Churn',\n                 xaxis1_title = 'Payment method',\n                 hover_desc_var1 = 'With payment method: ',\n                ) \n\n\n#___________________________________________________________\n# COUNTING ACTIVE SERVICES PER CUSTOMER\n\n# list of services\ncolumn_list=['PhoneService', 'MultipleLines', 'InternetService',\n             'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', \n             'TechSupport','StreamingTV', 'StreamingMovies']\n\n\n# Counting Active Services. \ndf['num_services'] = (df[['PhoneService', 'MultipleLines',\n                           'OnlineSecurity', 'OnlineBackup', \n                           'DeviceProtection', 'TechSupport',\n                           'StreamingTV', 'StreamingMovies']] == 'Yes').sum(axis=1)+np.where(df['InternetService']!='No',1,0)\n\n# # Verifying \n# df[['tenure', 'tenure2','PhoneService', 'MultipleLines',\n#     'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n#     'StreamingTV', 'StreamingMovies', 'InternetService','num_services']].head(20)\n\n# Plot\ncustom_bar_chart(DataFrame = df,\n                 feature_columns = ['num_services'],\n                 plot1_title = 'Number of services vs Churn',\n                 xaxis1_title = 'Number of services',\n                 hover_desc_var1 = 'Number of services active: '\n                ) \n\n\n#___________________________________________________________\n# Create column 'ActvServ'\ncol_list = ['PhoneService', 'MultipleLines','InternetService',\n            'OnlineSecurity', 'OnlineBackup','DeviceProtection', \n            'TechSupport','StreamingTV', 'StreamingMovies']\n\n\nlist2 = []\nfor i in range(len(df)):\n    \n    list1=[]\n    for j in col_list:\n        if ~pd.Series(df[j].iloc[i]).str.contains('No', regex=False)[0]:\n            list1.append(j)\n            \n    list2.append(list1)\n            \ndf['ActvServ'] = list2\n\n#___________________________________________________________\n# SERVICE DISTRIBUTION BASED ON NUMBER OF ACTIVE SERVICES PER CUSTOMER\n\nserv_dist_in_num_servs(n_serv=3)\nserv_dist_in_num_servs(n_serv=4)\n","fd895df7":"### Insights\n* Sex distribution among male and female are similar. It is not showing a clear difference between churn and retained customers.\n* Curiously, customers over 65 years old are more likely to churn (around 42% of churn rate). It could be related to age issues.\n* In general, the number of customers with or without a partner is very similar. On the other hand, most customers do not have dependents (around 70% of them). The interesting point is that customers without a partner or dependents are more likely to churn (approximately 33% and 31%, respectively)","27985723":"## Quick view to the dataset.","dd6082f0":"### Insigths\n* The dependent variable is Churn. In general, 26.6% of customer churn, while the company was able to retain 73.4% of the customers.\n* Since the objective is to predict customer churn, this dataset is unbalanced. ","a54fdef7":"### spot_missing_values():","3ed79cd3":"# Introduction\n\nCompanies invest a lot of money in marketing campaigns to convert prospective customers to current ones. This process is vital for organizations to keep certain revenue levels, re-invest to improve the quality of their service, respond to shareholders, and so on. Therefore, understanding why my customer flees and predicting a customer churn with enough anticipation to implement a retention plan is an integral part of the day-to-day business.  Bearing this in mind, this kernel will focus on understanding what information is available and get a sense of what could be causing the churn of our customers. This kernel will be the base to build future machine learning models. \n\nInstead of using Matplotlib, Seaborn, or both, I decided to use **Plotly** for this kernel. Plotly is a python library for visualizations that offer excellent interactivity in their visualization, and I really like that. Moreover, Plotly with Dash are tools that can help you build web applications with interactive dashboards.\n\nHopefully, you'll find this helpful kernel. Please, don't hesitate to ask any questions or if you think there is a better way to code, leave a comment. ","31953e7f":"### custom_bar_chart()","153ea569":"## Spotting missing values","1e39d11d":"### custom_line_chart()","28dd0539":"### custome_histograms()","c2e088bb":"### Insights\n* Even though most customers have phone service (around 90%), customer with or without service have a similar rate churn (around 25% to 27%).\n* Customers with multiline phone services are slightly more likely to churn, around 29%, compared to the 25% churn rate for customers without multiline services.\n* Around 78% of customer has internet service (fiber optic and DSL). Interestingly, customers with Fiber optic service are more likely to churn, with approximately a churn rate of 42%.\n* Figures show that customers who do not complement their internet service with online security, online backup, device protection, or tech support are more likely to churn. The churn rate for those customers ranges between 39% to 42%. Additionally, the churn rate for customers without or with services such as streaming tv and streaming movies are similar, which is between 30% to 34% churn.","dfe21b01":"### reshape_df()","ec957bf7":"# VIZ - Demographic evaluation","f7ff9b03":"### Insights\n* Previous tables shows that there is not missing values. It possible to proceed with data visualization.","8ec8badb":"# Loading libraries","c100d4da":"### Insights: \n* Even though there is not missing values such as np.nan, there are strings values such as ' ' \n    that indicate missing values.\n* According to the previous table, the only column with missing values is TotalCharges. \n    Since it represents 0.16% of the data, the plan of action will be to drop those 11 rows. \n* customerID could be dropped. At this stage, it seems that the id code nomenclature does not hold any hidden information.\n","800640a5":"# Data Visualization","e51d48b8":"# Future work. \n\nThis kernel is not finished. My following step will include:\n*  SMOTE\/ No SMOTE\n*  Hyperparameter tuning\n*  Cross-Validation\n*  Machine Learning Model \n    *   Logistic Regression,\n    *   Random Forest,\n    *   Super Vector Machine,\n* and more. \n\n## Please feel free to comment to make any questions. If you think that something could be improved, please don't hesitate to comment.\n\nIf this kernel helps you somehow, please do not forget to upvote. \n\n### Keep kaggling!\n","aa53a21b":"# Utility functions","1d02e9a6":"### resumetable() | expanded_describe():","eedc3674":"# VIZ - Customer account information","aaa07cad":"# VIZ - Service evaluation","569b0d5c":"### serv_dist_in_num_servs()","be3c763c":"# Understanding the data","52186da8":"## General Info about Dataset:\n\nMore info could be found in the following link: \n* https:\/\/community.ibm.com\/community\/user\/businessanalytics\/blogs\/steven-macko\/2019\/07\/11\/telco-customer-churn-1113\n\n### Column description\n\n#### Demographic info:\n* gender\n* SeniorCitizen: Indicates if the customer is under 65 or older: Yes, No\n* Partner\n* Dependents\n\n#### Company services:\n\n* PhoneService,\n* Multiple lines,\n* Internet service,\n* Online security,\n* Online backup,\n* Device protection,\n* Tech support,\n* Streaming TV,\n* Streaming movies\n\n#### Customer account information:\n* CustomerID\n* Contract\n* Ternure\n* Paperless billing\n* Payment method\n* Monthly charges\n* Total charges\n\n### Additional considerations:\nColumn tenure indicates the months that a particular customer has been with the company by the end of the quarter (The fiscal quarter that the data has been derived from (e.g. Q3)).\nI will assume that all the customer cancelation dates are the same","23c29501":"### Insights\n* Turning to customer service information, 55% of customers have a month-to-month contract with a high churn rate of approximately 43%, which is relatively high compared to 11% churn of customers with one-year contracts or the roughly 3% churn for customers with two-year contracts.  \n* Including tenure in the analysis or contract and churn,  the histogram shows that the greater the customer commitment, the later the customer service cancelation is. Around 62% of the month-to-month customers churn within the first year. In contrast to month-to-month customers, customers with one-year or two-year contracts seem to delay their churn. Around 70% of One-year contract customers cancel their service after three years, and 65% of two-year contract customers cancel their service after five years.\n* In general, comparing the churn rate per month, we can see that the more time the client is in the company, the lower the customer attrition will be. \n\n* Interestingly, 59% of customers prefer paperless billing; however, in terms of churn, paperless billing represents a 33% churn compared to other forms of billing that represent 16% churn. \n* Slightly over a third of the customers use electronic checks as preferred payment methods; however, it has a 45% churn. Other payment methods (such as mailed checks, automatic payment with bank transfer, and credit cards) present a churn rate of around 15% to 19%.\n\n* Around 62% of customers cancel their services the first month, representing 380 customers. After the first three months, the churn rate changes to be lower than the retention rate of customers, and for each month that the company keeps the client, the company can reduce the churn rate up to around 2% (customer with six years).\n\n* Additionally, according to the boxplot, it seems that customers with higher monthly charges are more likely to churn than those who have to pay lower monthly bills. This difference is accentuated for those customers with a longer time in the company.\n\n* As was expected, the total charges per customer increased as the customer tenure increased. However, it is interesting that customers with higher total charges are more likely to churn than customers with lower total charges. \n\n* Counting multiline as a service, each customer can add up to nine services. According to the bar chart, with around a 45% churn rate, customers with three services are more likely to churn.\n* If we give a deeper look at the service distribution of active services for customers who have selected 3 or 4 services, we can see that the churn rate for customers with Internet service (Fiber optic) reaches up to 59% and 51%, respectively. \n\n\nNote: For the following steps (data mining models), I will keep the new column 'num_services'.","8f009169":"## Loading dataset","12fe4116":"### Insights: \n* customerID is unique, which means that we have data from 7043 different customers. \n* TotalCharges, most of its values are unique. It has a wrong data types, and the top\n    frequent value appear empty (' ').\n* Our dataset has 21 columns and 7043 rows. \n    \n","048ce570":"### costum_boxplot()"}}