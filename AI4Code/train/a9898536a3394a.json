{"cell_type":{"b87dd4b4":"code","34639a52":"code","395cd89b":"code","33c0a6c1":"code","5652df80":"code","cb4dec57":"code","662f0bb4":"code","81f18ffa":"code","f5f45f7c":"code","1b825f97":"code","67c6249d":"code","3e6b5abc":"code","c1353ab3":"code","f669f8ca":"code","be96bbc3":"code","26a98857":"code","9e63db23":"code","4265fb42":"code","4995a458":"code","c75f6f1b":"code","596176b2":"code","67fb955b":"code","ce608254":"code","07bbd5f7":"code","4bf80c91":"code","3cd33622":"code","6bc0a0c7":"code","2710957f":"code","77e30ab4":"code","238c0906":"code","51eb736f":"code","7a2ac57c":"code","e58a8e6b":"code","7ec5e552":"code","f10f6c17":"code","b61d4e82":"code","60a81177":"code","c8d5ab93":"code","d02a7134":"code","dfc87b1f":"code","bb5e160c":"code","3da32399":"code","c3733658":"code","a2105add":"code","c32fd890":"code","3e288f89":"code","2480647c":"code","73a89641":"code","b3f1852b":"code","381dd11b":"code","0b623b47":"code","e440a11b":"markdown","598eaa00":"markdown","9d8794b2":"markdown","ca3ed332":"markdown","0a0e9311":"markdown","21faf6d1":"markdown","f0e662d6":"markdown","d2df096e":"markdown","46b574a4":"markdown","075e348c":"markdown","12fa1b92":"markdown","cdfe8ef4":"markdown","b4a4ca84":"markdown","25a112d9":"markdown"},"source":{"b87dd4b4":"import os\nimport torch\nimport torchvision\nimport tarfile\nfrom torchvision.datasets.utils import download_url\nfrom torch.utils.data import random_split","34639a52":"project_name='05-cifar10-cnn'","395cd89b":"# Dowload the dataset\ndataset_url = \"http:\/\/files.fast.ai\/data\/cifar10.tgz\"\ndownload_url(dataset_url, '.')","33c0a6c1":"# Extract from archive\nwith tarfile.open('.\/cifar10.tgz', 'r:gz') as tar:\n    tar.extractall(path='.\/data')","5652df80":"data_dir = '.\/data\/cifar10'\n\nprint(os.listdir(data_dir))\nclasses = os.listdir(data_dir + \"\/train\")\nprint(classes)","cb4dec57":"airplane_files = os.listdir(data_dir + \"\/train\/airplane\")\nprint('No. of training examples for airplanes:', len(airplane_files))\nprint(airplane_files[:5])","662f0bb4":"ship_test_files = os.listdir(data_dir + \"\/test\/ship\")\nprint(\"No. of test examples for ship:\", len(ship_test_files))\nprint(ship_test_files[:5])","81f18ffa":"from torchvision.datasets import ImageFolder\nfrom torchvision.transforms import ToTensor","f5f45f7c":"dataset = ImageFolder(data_dir+'\/train', transform=ToTensor())","1b825f97":"dataset","67c6249d":"img, label = dataset[0]\nprint(img.shape, label)\nimg","3e6b5abc":"print(dataset.classes)","c1353ab3":"import matplotlib.pyplot as plt\n\ndef show_example(img, label):\n    print('Label: ', dataset.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))","f669f8ca":"show_example(*dataset[0])","be96bbc3":"show_example(*dataset[1099])","26a98857":"random_seed = 42\ntorch.manual_seed(random_seed);","9e63db23":"val_size = 5000\ntrain_size = len(dataset) - val_size\n\ntrain_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","4265fb42":"from torch.utils.data.dataloader import DataLoader\n\nbatch_size=128","4995a458":"train_dl = DataLoader(\n                      train_ds, \n                      batch_size, \n                      shuffle=True, \n                      num_workers=4, \n                      pin_memory=True\n                     )\nval_dl = DataLoader(\n                    val_ds, \n                    batch_size*2, \n                    num_workers=4, \n                    pin_memory=True\n                   )","c75f6f1b":"from torchvision.utils import make_grid\n\ndef show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))\n        break","596176b2":"def apply_kernel(image, kernel):\n    ri, ci = image.shape       # image dimensions\n    rk, ck = kernel.shape      # kernel dimensions\n    ro, co = ri-rk+1, ci-ck+1  # output dimensions\n    output = torch.zeros([ro, co])\n    for i in range(ro): \n        for j in range(co):\n            output[i,j] = torch.sum(image[i:i+rk,j:j+ck] * kernel)\n    return output","67fb955b":"sample_image = torch.tensor([\n    [3, 3, 2, 1, 0], \n    [0, 0, 1, 3, 1], \n    [3, 1, 2, 2, 3], \n    [2, 0, 0, 2, 2], \n    [2, 0, 0, 0, 1]\n], dtype=torch.float32)\n\nsample_kernel = torch.tensor([\n    [0, 1, 2], \n    [2, 2, 0], \n    [0, 1, 2]\n], dtype=torch.float32)\n\napply_kernel(sample_image, sample_kernel)","ce608254":"import torch.nn as nn\nimport torch.nn.functional as F","07bbd5f7":"simple_model = nn.Sequential(\n                            nn.Conv2d(3,\n                                      8, \n                                      kernel_size=3, \n                                      stride=1, \n                                      padding=1\n                                     ),\n                            nn.MaxPool2d(2, 2)\n                            )","4bf80c91":"for images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = simple_model(images)\n    print('out.shape:', out.shape)\n    break","3cd33622":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))","6bc0a0c7":"class Cifar10CnnModel(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 64 x 16 x 16\n\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 128 x 8 x 8\n\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 256 x 4 x 4\n\n            nn.Flatten(), \n            nn.Linear(256*4*4, 1024),\n            nn.ReLU(),\n            nn.Linear(1024, 512),\n            nn.ReLU(),\n            nn.Linear(512, 10))\n\n    def forward(self, xb):\n        return self.network(xb)","2710957f":"model = Cifar10CnnModel()\nmodel","77e30ab4":"for images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = model(images)\n    print('out.shape:', out.shape)\n    print('out[0]:', out[0])\n    break","238c0906":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","51eb736f":"device = get_default_device()\ndevice","7a2ac57c":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","e58a8e6b":"@torch.no_grad()       # Do not track grad\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","7ec5e552":"model = to_device(Cifar10CnnModel(), device)","f10f6c17":"evaluate(model, val_dl)","b61d4e82":"num_epochs = 10\nopt_func = torch.optim.Adam\nlr = 0.001","60a81177":"history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","c8d5ab93":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","d02a7134":"plot_accuracies(history)","dfc87b1f":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","bb5e160c":"plot_losses(history)","3da32399":"test_dataset = ImageFolder(data_dir+'\/test', transform=ToTensor())","c3733658":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return dataset.classes[preds[0].item()]","a2105add":"img, label = test_dataset[0]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","c32fd890":"img, label = test_dataset[1002]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","3e288f89":"img, label = test_dataset[6153]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","2480647c":"test_loader = DeviceDataLoader(DataLoader(test_dataset, batch_size*2), device)\nresult = evaluate(model, test_loader)\nresult","73a89641":"torch.save(model.state_dict(), 'cifar10-cnn.pth')","b3f1852b":"model2 = to_device(Cifar10CnnModel(), device)","381dd11b":"model2.load_state_dict(torch.load('cifar10-cnn.pth'))","0b623b47":"evaluate(model2, test_loader)","e440a11b":"## **Training the Model**","598eaa00":"## **Testing with individual images**","9d8794b2":"## **Defining the Model (Convolutional Neural Network)**\nIn our previous tutorial, we defined a deep neural network with fully-connected layers using `nn.Linear`. For this tutorial however, we will use a convolutional neural network, using the `nn.Conv2d` class from PyTorch.","ca3ed332":"**Part 5 of \"PyTorch: Zero to GANs\"**","0a0e9311":"After that we have downloaded our dataset so lets extracts whats in it","21faf6d1":"## **Training and Validation Datasets**","f0e662d6":"## Imports","d2df096e":"## **Saving and Loading the Model**","46b574a4":"## Exploring the Data","075e348c":"# **Image Classification using Convolutional Neural Networks in PyTorch**","12fa1b92":"Let's get a brief info about the dataset","cdfe8ef4":"# **THE END**","b4a4ca84":"There are certain advantages offered by convolutional layers when working with image data:\n\n- **Fewer parameters**: A small set of parameters (the kernel) is used to calculate outputs of the entire image, so the model has much fewer parameters compared to a fully connected layer.\n- **Sparsity of connections**: In each layer, each output element only depends on a small number of input elements, which makes the forward and backward passes more efficient.\n- **Parameter sharing and spatial invariance**: The features learned by a kernel in one part of the image can be used to detect similar pattern in a different part of another image.","25a112d9":"* ***User***: [@manishshah120](https:\/\/www.kaggle.com\/manishshah120)\n* ***LinkedIn***: https:\/\/www.linkedin.com\/in\/manishshah120\/\n* ***GitHub***: https:\/\/github.com\/ManishShah120\n* ***Twitter***: https:\/\/twitter.com\/ManishShah120\n\n> *This Notebook was created while undergoing a course \"[Deep Learning with PyTorch: Zero to GANs](https:\/\/jovian.ml\/forum\/t\/start-here-welcome-to-deep-learning-with-pytorch-zero-to-gans\/1622)\" from \"jovian.ml\" in collaboratoin with \"freecodecamp.org\"*"}}