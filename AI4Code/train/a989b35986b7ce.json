{"cell_type":{"53046be6":"code","6f5a90ba":"code","010aa88e":"code","895a7f52":"code","29195878":"code","8fb43cfd":"code","1482c3ae":"code","bbcd9758":"code","74487b23":"code","0adc6171":"code","17413707":"code","e423db40":"code","e9bc7cdb":"code","f9f21aab":"code","5c401377":"code","877fe96e":"markdown","ba1c820a":"markdown","33a4004a":"markdown","256c0d3d":"markdown","1cf64e68":"markdown"},"source":{"53046be6":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxAPEBUQEBAQEBUVFRYXFRYVFRcVFRUXFhUXFhUVFRgYHSkgGRonGxYXITEhJSkrLi4uFx8zODMuNyguLi0BCgoKDg0OGxAQGjUlICUtNy4tMy0rLS0rLTAtNystLy8tLS0tLi0tLS0tLS0tLTUtLS0tLS8tLS0tLy0tLS0tLf\/AABEIAKgBLAMBEQACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAACAAEDBAUGBwj\/xABOEAACAQIEAgUFCgoIBgMBAAABAgMAEQQFEiEGMRNBUWFxByIygZEUNFJyc6GxsrPSFiMkNUJVgpOUwRUlM0NEYoOSU1S0wtHwCGPxF\/\/EABoBAQADAQEBAAAAAAAAAAAAAAABAgQDBQb\/xAA6EQACAgECAwQIBAUEAwEAAAAAAQIDEQQxEiFBBRNRcSJhgaGxwdHwFDM0kRUjMuHxNUKC0iRDUgb\/2gAMAwEAAhEDEQA\/AOvUUAYFAQT5nh4v7SeGP40iL9JoCs3E2BH+KiPxTq+regIm4yy9f78nwilP\/ZQAfh1lw\/vn\/cy\/doBxx7lv\/Gf9zL92gJV48yz\/AJkjxim+5QFiPjTLD\/jYR8YlPrAUBo4PPsFNtFi8NIexZUJ9gN6A01oAwKAICgHAoAgKAICgHtQCtQD2oBWoBWoBWoBrUA1qAYigBIoASKAYigBIoACKAEigAIoACKAAigAIoACKABhQAEUBGBQHnXFGYvNPIjMdCMUVL+b5psSRyJJB3NAYdgOQA8LChJGxoQRMaArzMQCQL0BHquN6Aic0BA5oCCUA8wDQG9wJn8+DxkKxu3RySpG8dzoKuwW+nkCL3uOygPo0CgHAoAgKAICgGkkVRdmVR2sQB89AGhBFwQQeRG4PhQA9MmrRrXV8G41dvLnQElqAVqAqZpmEeGjMsmrSCB5oubnlQ6VVStmoQ3YeX4tZ4klQMFcXAawNu+xP00InBwk4vdE9qFBiKAYigBIoASKAzM7ziLBqGlDm97BQCTpFzzIHX20yd6NPZfLhgFmWZw4dA8rFQxstgSSbX5DuoVqpnbLhgssnhlWRVdDqVgGU9oIuDQ5tNPDHIoQARQAEUABFAARQAEUABFAARQEaigOb4P4Zw+Y4rGicyDo5Tp0MF9KWW97g\/BFAdWfJZl3wsT+8H3aAE+SrLvhYn94Pu0AJ8k+W\/CxP7wfdoAT5JMt+Fiv3g+7QDHyRZZ24r94Pu0AJ8j2V9uK\/ej7tAAfI3lfbiv3o+7QAnyL5V24v96Pu0BwflD4LwmUYzLRhTKemnOvpH1\/2cuH022FvTagPZbUAQFAEBQBAUBy\/lDH5NH8sv2clVlsel2T+o9jNnhwfkeH+Rj+qKsY9R+bPzfxOWxI\/rxPjL\/0xqvU9Kv8A06Xn80dBn3E0WDcRukjsVDebpCgEkbkm\/UeQNS3gxabRWXpuOEl4lHB8c4Z3CyJJED+kbMo+NY3HjYjttTJ2n2ZdGPFFqXkyfjz3mfjp9Jo9ivZn6mPt+DLnC22BgJ2\/F\/8AmiOGr\/Pn5sysXxzhkYqiSSgfpCyqe9b7kd5AqOI0w7MulFNtLPi+Zs5NnMOMUtESCttSMAHW\/K4BIIO+4JGx7KsuZlv09lEuGaM3OOK48NM0Bildltc+aFOpQwtuSefWBUNnWjRSthx8SS9bJ8j4hhxhKoGRwL6WtuPhKQdxuOw91E8ldTo7NPji2fVbCz3iCHB2V9TuRcKtrgctTEmwGx79jttRvA02ksvzwbLq9ji+K8+TGRqFR0KByblSLMBaxBv1HqqreT2Oz9HOibk2mmujOo4qbDrBGcRHJINQC6DpYHQTe9xtYGrM8nQxulbil4eOv+GTyZlDh8JHMEcR6I9CKAWAZRpG5te3fQ5QpndbwLdsyPw1iv8A2Mlu5lv7L2v66jiRt\/hVuccUc+Gf7G\/gsWk8YkjN1PqII2II6jVjzrK5VycZLDRi4\/iqCNyiK0pGxIsFuOYBO59Qt31GTXV2fbOHG2or1vAeV8Qx4l+jCSK1ibnSV25i4N7+qieSuo0VlEVNtNPwZqkVJjAIoCMigAIoCNaApeSg\/lmZfKj7WegPS6AVAKgFQCoBUAqAVAeK\/wDyLmaOTL5ENmT3UynsZfc7Kd+8CgPTYjcA9oH0UBIBQBAUAQFAcv5RF\/JU+WX7OSqy2PS7K\/ULyZs8Mm+Dw9v+Eg9YUA\/OKsY9Qv50\/N\/E5Wc3z1QN7OPmwxJqvU9OCx2bLPV\/NB8VD+tcL44b\/qGo9yuj\/R2mp5QcMhwhkIGtHTSevzmCsL9mkk2\/yjsqZbHDsuco6hJdc5\/Yy8wdmyWItzuo9Suyr8wFR0O+nio9oYXi\/gy1PIy5GCvXGin4rSBW+YmnQ5Qipa\/D\/wDplzgPDIMGrgDU7PrNtzZ2UA9wAG3\/AJqY7HPtKUpamWemxjZJGIc3kjiFkPSAgcgNIe3gGAHdULc1ah8eghKW+fqXpuJsRLO8OBwyyaCQWY89J0k81AF+V237KnPgcFooQrVl08Z2SWWZOSGT+lj0saxOS2tF9EEwatrE3vs3Pm1QtzVqFD8ClB5WeXTxJcPGsucP0g1WZiAdxdEATbwF\/EXp1KTbj2dHh6vn+7+iD8pajo4zYXtKL9drLtSRHY\/5svL6Fjjv3tF8oPs2pLYp2T+o9j+RFnv5qg+Jh\/qCj2K6H9b7X8y3hIVfLArAEGBj67EgjvB3vU9DPdJx1MpLpJ\/EyOHZWXAYsqTqUSFbdR6EEEeu1Qtjd2lGL1cU9njP7ljgaJBHIwA1a9PeFCggeFyaRKdryl3yT2xyK2X\/AJ0k8ZPoFOpN3+n1+f8A2OqIqx5IDCgI2FAAaAjUUBk+RybpMTmD2tqdGt2apJzb56A9SoBUAqAVAKgFQCoBUB4x\/wDIPDiXEZXESQJHnjJHMB2w6k\/PQHpqJYAdm3soAwKAICgCAoCrm+WpioWhckBuRHNWBurD19XXuKM6U2yqmpx3RyOHybN8KDFBKpS5tYoQL8yBIt17bDvquGenPU6K58dkWn1x\/n6Grwvww+HkOIxDiSU3sASwXV6TFj6THl3XPO9SkZ9XrFbFV1rEUY3HCO2YwLGdLlYQjctLGZgreo2PqqHua+z3FaaxyWV1LGI4ezTFlUxc6dGpvcafDUFRRqaxPpdpphs5w1elozKmD4vX\/k6LNsiWbB+5Iz0YUJ0ZO9ihFtXjaxPfepaMNGolXcrXzf1KXD2S4hMPJhsYVaMjSiqQbKb6rNYHmRa\/K1Ejpqr65WqypNPd+Zkw5FmmDLR4WVWjY3B8zny1FXHmm3ZcVGGjVPVaW\/ErotS9Wz+\/tmrwrw22FZppnEkz3GxJCgnU253ZibEnu8SZSwZtXq1clCCxFbGa\/D2Nws7y4J4yrk7NYGxOrSQRY2PIg3qMHf8AF0W1RhenmOzRJk+RYwY33ZiTFc31aTuT0XRrYBbcgOuiXMrfqqXQqak9888EnEfDckkwxWFcJLtcE2uVFgwa2xsACDsQB33lorpdZGEHVbHMX7jIzLJM0xgCzmOwBsWKAXYWJ\/Fi\/UKjDNNOq0enblWpZf34m7xTlMuJhSOLTdXBOo2FgjLtt2mpayYtDqI0W8clyx0I80yiWTAx4ddGtFiBubL5igNY2o1yI02ojVqO9e3P3lnCYF0wYgOnX0RTntcgjn2b1Jxtmp2ymuryU+F8pkw0bpLoOp72B1C2lV327jUJGjX6mOos44rpjn7TI\/oAKxfC41Y0PY5uB8Esrbgd\/Lv51GDv+PUoqN1fE1s9vkVOGI\/y1rP0oVZCZN\/O3C6tyeZPbvRbmjXy\/wDEhmPDl7fudmwqx4YDUBG1ADQESUBheRD+1xv+l9eagPWKAVAKgFQCoBUAqAVAePeXb37k\/wAvJ9phaA9KtQBAUAQFAEBQBAUAQFAPagMnMeHYsRiI8S7yh4tGkKVCHo3LrqBUnmeoiowaK9TOFcq1s9zXtUmcVqAa1ANagGIoASKAEigBIoACKAE0ABFAARQAEUBy78FYbqknUdl0PsJS\/tvUcKPSj2reljl+xq5blUWGUiMG5tqYm7Nblc\/yFhuanBju1Fl0uKbyWjQ4kZoADQAGgIkoDA8h5\/HY7\/R+vPQHrNAKgI450YkKysVNiAQSD2HspgqpJvCZJQsKgFQCoBUB495dvfuT\/LyfaYWgPTKAICgCAoDBxPFuHjxPuZg9w6oXFtAZrc972BNibbWPZUZNkNDbKnvlt7+R0QFSYwrUA4FAPagMjizMZMLhHni0a1MYGoEr58qIdgR1MeuoZo0lStujCWzJOGsY+IwkU0hBZg17Cw2dhy8AKIrqK1XbKC2TNO1ScQSKAY0Bk8S5hJhsO0sUfSMCBYgkKCd2IG5A\/nUM76auNlijJ4XiFkOMkxGGSWWPo2a913HJioYA7gEAMPGpK3wjCxxi8pdS9ahyOW4WzubFTTrLosltIVbW85hvcknYCoTN2r00Kq65R\/3LL931OjNSYSlmuPTDRNK9yBbYcySbACh0qqlbNQjuyrk2cR4tWZAylTYq1r7i4Ox5Hf2GoTyX1GmnRLhmXzUnAjNAAaAA0BGaABqAA0BEtAYXkXi0YrMUJuUaNSe3TJOP5UB6tQCoDyKPGPBiZGUkDpXvY2PpHcd9elOtWVrxwfOzm42trxZ3eVZ\/qUa\/OB5MOfrFeXKXA8SPSp1mf6\/3N+GZXF1IIqU09jfGSksoOpJFQCoDx7y7e\/cn+Xk+0wtAem0AQoCrm+OGGgkmNjoW4Hax2UetiBQ6VVuyagup51FkJly+XGNdn6Qtv+lGCRKx6t2ZmPxKpjlk916pV6qNK\/pS4f3+0v3O+4TzL3ThUdjd18yTt1Ltc95Fm\/aqyZ42rp7m6UP28jnMfm2YzY6TCYWVI9LNpuqAWUAnUzKx6+yo55N1VGmhp43WpvPL4+XgHgM9x2ExaYXHMsgkKgMAu2s6UZSqi41bEEd\/iyxZpqLaXbRlY3TNXjPiJ8IEigAMsm4JGrSt7Cy9bE7DwNS2Z9FpFc3KbxGO5zfEUGbJhWOMkR4WMeoDo9SHpFKX0oP09I2Lc\/XUPODdpJaN3x7tNPp4P3s38rxjwZMs0dtSIxW4uL9Kw3HrqVsYrYKzWOD2cjJy2XOsXH7ohxEeklgFYRgkqSp26M7XHwhULLNN8dFTJ1yi211z\/f5GtxXxFLA6YXDKHncLc2vbUdKhRy1EgnfYC3btLZm0eljZGVtjxFGTi8wzfAaZcSyTxsbEeYQOvSSqKVOx33G1Rlo0106PUvgrzGXTPX3s3eIM4YZf7qwzaS3RFSQCQHdQQQdr7kVLfIxabTqWoVVni0\/ZkHBZ2Uy5cXOdbaTfkupukKKNhYXNhTPIWafOpdMPHCMHAYrOMWOnhkjRLmy2RVaxsQl1YncEXJG4NQsmy2vRUPu5Jt9WhvJ5fpsRq56Uv46nv89Ik9qcPd1cO2OXlyO3NWPHOJ4ylbE4mHBIesFrdTN1\/spqb9qqvwPW0C7mqeofTkvP7x7yvhFGX5kYhtFLYLc9Tn8Xz7HuvgabMtZnU6NT3lDfy\/x8DoOJ8bJh8OZIyA2pRci9rnfapZg0dMbrlCWzOchfNXiGIWUOhGoKBHqI+Lo7uQN6jmbprQRm63FrDxn7fyNrhvOfdaHUAHW2q3Ig+iw7AbHbuqU8mPWaV6eeM5T5o5\/C4\/MMW7iGZV0WJFlUWJIFroxPI1HM3To0lEIOyLbkvHy8i3lmcTpP7mxQ3JsGsAbn0b6dmU8gR1+uxPxON+lqlT39D5dU+h0LVY8wCgIloDG8kXv\/ADX5VftsRQHqVAKgPJcZD+Nk+O\/1jXpxl6KPlr3\/ADJebLWWTtC3ap5j+Y76z6mlWx9ZFd3A\/UddgjcB422PWP514Epzqlh8mezS8rigyzBnyatD3+OOV\/8A3rrRXq4vlPke3HRXd2ptc\/Dqa6OGFwQR2itaaayjM01yYVSQePeXf37k\/wAvJ9phaA9NFAGKA4zyiYwnocIm5dg5A5m50Rr62LetRVZeB63ZcEnK6W0V9+74igy3OEhECtD0YTRp\/Fm62sQSV3v\/ADphlZ26GUnJqWXz6fUg4BnbDYuXBy7Fr7X\/ALyPs7bpc+Cii5cjt2ko3VQ1EPL79pNk\/wCfJv8AV+qtOpzu\/wBPr8\/+wuPR+XYX9j7ajJ0H6e7y+TB49vDmGGxDAlB0Z7f7KbW4HfYj20e5PZ67zT21Lc1+O8bFLlrmOWNwzQldLA3\/AB8Z2t3VL2M3Z8WtVFNfeGVYvzD\/AKbfbGnQu\/1\/\/L5l\/wAnf5vT48v2rUjsc+0v1MvZ8EYOfOMNnMc0uyNobUeQGjoifURc9gqOpq06duhnCG6f0ZqeUDMofcZjEiM0jJpCsG2Vw5bbqsOfaRUvYz9mVylqE0uS3M\/HQNHkSq1wT0bWPMB8QHX5mFR0O1U1PtDiW2X8GBiIWfI0076bMfirM1z6hv6qdBCaj2g2\/F+81uDMzhbCRprRWjuGUkAjziQ2\/URvfxHMGpRm19UoXyyt3lGN5PzfEYnwX671ETT2j+TT5fJHZzSKil2NlUEsewAXJ9lWPJxk82yhMZiZ5MXhwofUbltPm6+SjUCCQoA8LdtUWWfQah6emqFFuds8vvxyFxJgscVE2KKkL5oZdIK6jtfSB1j2mjyRobdLxOutP0vHGDWz7G+6MsWXrYpq+MDZvnBqXsY9HU6taoPpn4MtZDmUEeDjLyxjQvnDUNQIJ208791StjPqq5vUSSTy28GVwGhLzSWsLIPXdmt6hb\/dURNnauIquvqlz930K\/B+IRJptbqmoLp1EC9me9r8+Y9tIk9pRbqqaXT6A5vKuIx8QiIaxjUldxdXZ2IPXZT8xo9ydPF1aKyU+Wdjrmqx4wBoCFaAw\/JAf6xzYf8A2p9tiaA9VoBUB5xPBeRvjN9JrYpckfIaiX82Xmx1w9OI45M2XiLon6OPzkvZ7dfxf\/d687WpWL1o+\/8A\/wA\/2HZXDvr+Te0fD1v1\/A6LL1WVQ0fnBuVq8PEnLhS5nr3T7ttS5HTZXg2j3Y2uPR\/ma9TSUTr5yfsPH1FysfJGhW0zHjvl49+ZR8vJ9phqA9PFAEKAzpcggfEjFNrMgKkXbzRpFl2t1c\/Gowd46iyNbqT9FmuKk4GXNw7h3xIxZ1iUFTdWsCVFhcW7Nj3VGDutTYqnVn0WSYfIIExLYtdfSNe9283zgAbC3dU4IlqLHWqm\/RX38x8z4fgxUsc0uvVHbTpaw2bULi2+9RgV6iyuMoxfKW5czPLYcVGYpkDre\/WCD2qRuD3jtqSldkq5cUHhnODydYPVq14jw1J9Oi9Rwo3\/AMV1GMZX7G7\/AEJD7l9xgMItOm2o6ratXpHvqTF30+87zPPOfaSZTlkeEiEMWrSCxGo3N2JY7+JoRbbK2bnPdkWcZPBi0CTJqtupBsyntUj6ORoTTdOqXFB4Zi4HgXBxPrPSS2Nwrkab94VRq9dxUYRqt7S1FkeFvC9RtZrl0eKiMMurSxUnSbHzWDDfxFSZKrZVyU47obA4BIIlhQEooIAbe4JJN+3maETnKcnKW7OfxnA2DkbUvSxdelCCo8Aym3hUYRtr7T1EFjOfMv5NkEGD1GLWSwAYs17gXI2FgOZ6qJYM+o1Vl+ON7FvH4VZo2ifUFcWOk2NusXqTjCTjJSW6K+V5ZHhU6OIGxYsbm5JNhufAChe66d0uObywsfhEmjaJxdWFjbn2gjvuAaFITcJKUd0cxxJl0eFwLJGW0mVG843sSQNvZVWuR6OiulbrIznv\/ZkOT8M4efDxSsZAWW50sLE3PaDb1USRa\/tHUQslFPkm+iOkweEjhQRxqFUdX0kk7k99WPMnOU5OUnls4ThzLYsVJMrlvMCkaTYjUzg35jqHsqiR7ur1VlFdXdvdfQ6nLslhwxLICWItqY3NuwdQ9QqyWDyL9Vbf\/Wy61SZwKAhWgMDyPH+s83+Vj+1xNAesUAqA4x4fOJ7z9Ndk+R8XqH\/Ol5v4nJ57nJkb3Phrtc2JXcufgpbq7+uuvA0ss+z7B7EVWNTqVz3SfT1v1+HgaWQcAzSWfEnoV+ALGQ+PUvznwrFOKkz6K\/taMOVSy\/Hp\/c9ByzLIcMnRwoEHX1kntJO5NIwjHZHh3X2XS4rHllyrHIVAeO+Xj35lHy8n2mGoD08UAYoAhQBXoA1oAxQBCgCFAPQDGgGNACaAA0AJoADQAmgANAAaAA0ABoCN1B5gHxoALW5UABoCLSByAHgKAFqABqAjoCFaA57yOH+s84+Wj+vPQHrVAKgOPzHh\/FYlzFqEEN\/PcEM7g\/ooByHaT7O3TXZCC4nzfuMWh0VdNsr7FxSy+FdF636zbyTh7DYIWhjGq27tu58T1DuFhXGdkpvLPTt1Flr9JmrVDiKgFQCoDxzy9e+8o+Wl+0w1AeoUAYoAhQBigCFAEKAIUAQoB70AiaA5\/FYFzjVkE0YF1IUuRIAALoq9Yax6\/wBI9m\/Fwl3ilnl4GmNsFS4OPPxNiedEF3dUH+Zgv012MyWSOHGRSGySxuexXVj8xqE0yXFrdFHPca8KKY9N2fT5wJsNLHaxG+1c7puEco76WlW2cLCy7HrJFGWkTWyKSNQB1EC4t236qvF5SZyshwya8CxLIqjUzBQOZJAHtNWKEUWIST0HR7c9LBreyieSWmtwjQgA0ABoADQAGgIzQANQEbUBG1ABQEK0Bzvka\/Oec\/LR\/XnoD1ugFQCoBUAqAVAKgFQHjvl59+ZR8tL9phqA9PoAhQBigCFAEKAMUA4NAFegFegFegOWxv5wX48f1RWWX568vqehX+jn5\/Qj4jQNjEHLUkK3FrgNNIptfr3qt8eKyKZ00cnCiclugc8ytcPodHfdtO9rqwBZWUgC3on5qi6tVpSgW0t8r267OawWc8m6TDQOebMjHxMTk101LzWZ9CsX48xsryeNo4pi0mohJLebbVs3wb2v31NdEElLHMi\/V2tyg3y2Kk4OKxRQsQqs4H+UJ5rFb7ai3XbkRztVJfzbXF7I7Qa0+nViXpMHNMAcOyPG7b3AJtdWAuOQF1Ivcf8AnatsFVicC2nuepzXbz8Gb2Hm6RFcC2pVa3xgD\/OtqeTy2sPARoQAaAA0BGaAA0BGaABqAjagANAQrQHOeRn855z8sn2k9AeuUAqAVAKgFQCoBUAqA8c8vXvvKPlpfr4agPT+ugCFAGKAIUAQoAgaAK9APegFegFegOWxrj+kVFxfVHtff0R1Vlkv568vqehW1+DkvX9Ac\/kAx0QJAJGHsL7n8e\/Klq\/mxJ07X4exFvi5wI4ySAOl6zb+7kqdUswKdntK3n4EWNhL4KEqC2hY2IG5t0ek2\/3X9VWti5VYRXTWKGoy9uZXy7iBESOKwYjSgIcbgELe3O9uqqV3rlHHM6X6OScpprG4GM1YTEGW11ZmIJ2B17st+ptRuB1gDvtE812ceOTLV8N9CqziS2Ax+ObFOqRpYjcAkE3O2preioF\/G\/hetk++xGK5F6alpMzsfPojfgiCIqDkqhR4KLD6K2o8tvLyOaEAGgANAAaAjNAAaAjagAagANAQLQHO+Rn855z8sn2k9Aek5rnceHdYtEs8rgssUKa30jYu1yFRb7XYi52FzQFrL8YJ4xIEljvcaZEaNwQSCCrd45jY8wSKAs0BDjcSsMbyvfTGjO1hc2UFjYdewoA4ZA6hhyYAjwIuKAxBxbhtRUrOo6R4hIYm6JpIywZA\/K90YC9rnbmaA2MFilmiSVL6ZEV1uLGzAMLjq2NATUB435fPfeUfLS\/Xw1Aen0AQoAhQBg0AQNAODQBA0A96AV6AV6AWqgBvQDXoASaADvoAWoCNUCiygKOwCw+agGNAAaAA0ABoADQEZoADQEZoAGoADQEC0Bz\/AJGvznnPy0f156A7bNsLPBi3xUMEmJSaBIZFidEmjMbSMjx9IyqQema\/nAgqpF97AYjZRjfNlnixeJhMjk4T3SpmQGNFiZ3Mio9mEhKh7DWpFytAQz5JmOgK8c80pgjXDzLiQFwcgLEmbU6lyLoS6hy+kg94GbmscskvQASTYh8Ti0MqYhDHKhw+J6OHohJdNA6MEMihSvpHVuBvZFk+MjxwedMQQGJEiSRiHozFpWKQGQsdJsAioouNWo0BZwHC7mOVpzNq90YqWKEyL0V2lkMMll5khg1mOxN7AjYDDw3D2PMsKSQTRqBDG7pMgQQe5VjkUnptWsPq81VC7BgSd6A6PgNZ5Y3xeIfWz6YoyCdJiw90EoB2BkfpJL9jJ2UBwvl9995T8tL9fDUB6cTvQBA0AQNAOWAFybAcz1UBXXM8OTYTwk9nSLf6anDKqcW8JlwGoLD3oB70A96Aa9AK9ANegK+NxawoZHvYW5bncgD5zUpZeEUnOMIuUtkR4DGrPGJFDKCWFmtfzWKnkSOY7aNYeGK7I2RUo7MnJqC4BNACTQFaTFxKbNJGp7Cyg\/OaEZQ6Sq4urKw7QQR81CSlmeZphxdg7XBNlAvZbX5kdtWjFvY43XwqxxdS01VOwBoCM0ADUBGaABqAA0BAtAYPkc\/OecfKxfXnoD1qgFQCoCFcJEJDKI0EhFi4UayOwta5FATUAqAYigGjQKAqgKALAAWAA5AAchQHj3l8H5XlHy0v18NQHpZO9AEDQBA0By2MkfGYjolNkVmAvuoCGzSEfpG\/LxHLc13ilCPF1PItlLVXumLxFb\/fu95pHhqK1uklv2+Yfm01XvpHd9mUYxj3mlgYFw8KpqFkU3J2HWzHuHM91c28vJthBQioroZc3FUQNlRmHaxCX71B39tq6KpmKXaVSbSTeOqXI1cuzGPEKSlwR6Stsy35XtcesEjn2VSUXF4ZrpuhbHigytmefRQNosXYcwLALflqY8vAXO47amMHI5X6uul8L5vwW4GW8QRTMEIKMfRuQVY9gYdfiB3XpKtpZIo1tdsuFcn4Mu5hmEcC6nJ32AG7MewD+Z2qsYtvCO9tsKo8U3hGOOK0v\/ZH1Opb2cr+uuncvxMX8Srxnhljxx\/cmzjFLNgzIoIDFNja4tKosbEjqqILE0jrqpqemlJbNB8Mn8mX40n2r1Fn9TLaH9PEr4viSJGsoLj4Vwqnt0nmfG1uy9Sq21kpZr64ycUm2vBFzLszTEA6bqRzVrXF+RFtiO\/6KrKLjud6NRC6PFBlomqnY5DA4QSzyISVGudvNte4mI6wfhGtLm4wWDw69PC\/U2KfRh5jgDhnVkc3a9m2Dgi3WNiu\/K3tvUQlx8mTqaPwmLKm99huIZukjje1tULtbs1Kht89Vq6nXtF5Vb9f0NzMcUIUMjAkAgWFr+cwUcyBzIrkll4PTtsVcXJ9DLTPlJ9C4\/ysGPjbbaundPoYv4jWn6UWvNE2NzNYwpCs4ZSwK23At2nvFUjBy2NF+phSk5bPwJsRiAiF+YAuLdfYBft29tQll4O05KEXJ9CHCYrpQTpK2Nt7b7A3FvGplHheClNyuhxx2JGqp1ANAQLQGH5HvzpnHysX1pqA9ZoBUAqAVAKgFQCoBUB475ePfmUfLyfaYagPSL0AQNAEpoDmOH20Ykq2x0yJ+0rC4H+xvZXeznBM8nRvh1VkXu38zczvEPHAzo2lgUsbA2vIqnYgjkTXKKy8HoaibhVKUd0jKxGLkkwJLsWJkCk2A217DzQB1AeurqKVmDFO6c9E5vdr54+BocNxKMODYEuX1bc7OygHusALVWxviZo0MVGiOPAzMjATGsiej+NW3UFV9vZYD9qrz5wTMulShq7IR2\/x9RuHFEmJZ3F2Adt+pi4ufEXI9dLOUUholxai2Ut0\/r9B+L0VXR181mVySOd0KFG8RqO\/cOypq55RHaXoyhNb5B4jbViYw+y6I79weRhJ4bAewVFf9LaJ1y4tRXGWxpcTgDDgAAAOgAGwHPYCq1f1GjtD9PL2fFFOT83DxH29SvzPac5\/of8AigsE5XLmI52m+eRxSX5hbTycdGmvB\/MoZPPNGHMMIku1i2k3FlBCXBG29\/2qvYot82ZNDO2FXoV5z1ykWMnw0q4jW0RjBD32soDHUAN+VwKrNx4UkzRpqrVqJWSjwp+tPny\/udATXE9I4\/D9L0z9CSH1z8tHo9Mb+ntztWh8PAuI8KtXfibO6xnPUuf0ViJWvM9uq5bUwHWFAGkePzGq95GK9FGn8FdbJO+XJdF9oi4oUBVAFgIpAB2ABQBSrqR2n\/6\/P6GnmuNEQ9EMWJsDsNtyT3Db2jxrnCLk8G3U6iNEOJ+wx8biJ5EUyIoS4IbTY77Dm5Ive3LrrrBRUuTMGrnfKl8cEl580G0erCK3WhZv2Q7Bh\/t3\/ZFVUsWHWdXe6NLrhNewglxQ6BYyfRY3+JGAyn54\/nq6hiw4W6nj0axu\/R\/b795qYKLRGqnna58TufnNcJPLyerTWq4KHgg2qDoATQECmgPB+KM2xWEzLF+5sRPh9cp1dFIyarbjVpIva59tAUPwxzT9Y47+Il+9QDfhjmn6xx38RL96gF+GOafrHHfxEn3qAX4Y5p+scd\/ES\/eoBfhjmn6xx38RL96gH\/DHNP1jjv4iX71AOOMM0\/WOO\/iJPvUAQ4uzT9Y47+Ik+9QB4HNsVisZhfdOInxGiePT0sjPp1SJq06jtew9goD6kvQDg0AQNAY+bZMZG6SIgMbEgki5HJlYbq2w9g5dfSFmFh7GHU6PvJKyDxJFWXC4+Rejcsy7XBMVjpII3A1cwKspVp5OE6dbOLhJrD+\/A1MFltsMYJbedcnSb2ubqQSOYIB5cxVJSzLiRsp0\/DQqpc+XxM2PAY2G6RNdSealLeNn3U+F\/XV3KEubRkhp9VSuCuSa9fQ0cjyowXdyC5FtrkKL3O53JJsSe4eJpOfEadLpe5TcnmT3ZVx2USpKZsM1iSTa4BBb0ravNZSd7HkfVa0ZrHDI5W6WxWd7S8N7p7AYfKJ5pBJiW2FrglSzAG4Wy+aq9vbv23o5pLESIaW2disve2yRezzBxTBdcixPuELWsw21KQSNQ5cjce0GsJOL5GjU6eF8Upcn0MHMMK0aqGxAk381A7PYWPnAE2UDly67V1hJN8kebrKZ11ena34LxNnCYTpcEsd9JZdQPZ52tb93KuTlieT0YVcemVb6xx7gMnwMqB45rGMiwUEEEtfXY2BA8e3xqZyTeUV0lFlUHCbTXQpjLcVAx6F9QPWCtyBy1K4037x83KrccZf1I4R0t9DfcyXC+jNDK0xILGdrggWHm3BF7+gAOvvrnLh\/2muhXLPeterBfJqpoMXLcvkjneRgukmW1jc+fJqG3hXSU04pGKjTSrunY3yZqk1zNpmZzgTMAVsSNQIOwIa19+3b5zXSufCzHrNM74pJ4aK8uBlkiXWwMilvSI3UnkSo52AN7Hv7aRmoyytit2mndSozfpLnnoVpMNimUI1yotzKfo8rkC\/UKspQTyjlZTq7IOuTjjx5l7CKIo1SRkB8489t2J2va\/OuUnltm+mHd1qPgjHwmHVpQq2Kg+l2xobqO8XsO8XNd5Sahz3PIoojLVvhfoxefb9\/A3CazntgE0ABNAQA0B4n5SMinixss5jZopTrVwCVGw1BiPRIIPPqoDjtI7qAbRQDaKAWigH0UA4SgCCUA9rUB0\/k\/wAgnxmNgMcbGOOVHkksdCqjBiNXLUbWA570B9KA0AQNAEDQBA0A4NAPegHvQD3oBXoBXoCjmeWpiNOtnUrqAKkfpWvcMCP0RVoycdjhfp4XLEynDw7CpuzSOPgnSFPjpUE+2rO2TOFfZ1EHnGfM165m4YmgGJoASaAEmgBJoACaAEmgAJoACaAo43ALKQxZ1IFvN09t\/wBJTVozcdjPfpYX44+g+HwyxghbknmTuT2f\/g2qHJvmzpVTCqPDBYRITUHQjY0ABNAQKaAkU0BVxOU4ab+1w8Enx40b6RQFKTg3LW54LD+pdP1bUBA3k+yk\/wCDUeEko+h6AD\/+bZSf8Mw8Jpvv0AS+TTKf+Wb99L96gJk8nGUD\/CX8ZZj\/AN9AW4eBMqXlgYfXqb6xNAaWD4dwMJvFg8Kh7RCgPttegNZdhYbCgCBoAgaAIGgCBoBwaAe9APegHvQCvQCvQDXoBXoBr0AJNAMTQAk0AJNACTQAk0ABNACTQAE0ABNAATQAMaAjJoAb0B\/\/2Q==',width=400,height=400)","6f5a90ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","010aa88e":"df = pd.read_csv('..\/input\/google-apps\/The Android App Market on Google Play\/datasets\/user_reviews.csv', encoding='ISO-8859-2')\ndf.head()","895a7f52":"df.isnull().sum()","29195878":"# filling missing values with NA\ndf[['Translated_Review', 'Sentiment', 'Sentiment_Polarity', 'Sentiment_Subjectivity']] = df[['Translated_Review', 'Sentiment', 'Sentiment_Polarity', 'Sentiment_Subjectivity']].fillna('NA')","8fb43cfd":"fig = plt.figure(figsize=[10,7])\nsns.countplot(df['Sentiment'], color=sns.xkcd_rgb['greenish cyan'])\nplt.title('Google Play & Android App')\nplt.show()","1482c3ae":"df.drop([\"App\",\"Sentiment_Polarity\",\"Sentiment_Subjectivity\"],axis=1,inplace=True)\ndf.head()","bbcd9758":"import re\ndef clean_text(text):\n    text=text.lower()\n    text=re.sub(\"\\n\",\" \",text)\n    text=re.sub(\"\\[\\[User.*\",\" \",text)\n    text=re.sub(\"\\(http:\/\/.*?\\s\\(http:\/\/.*\\)\",\" \",text)\n    text=re.sub(\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\",\" \",text)\n    text=re.sub(\"[.,]\",\" \",text)\n    text=text.split()\n    text=\" \".join(text)\n    return text","74487b23":"df[\"Translated_Review\"]=df[\"Translated_Review\"].apply(str).apply(lambda x:clean_text(x))","0adc6171":"from wordcloud import WordCloud,STOPWORDS\nstopwords=set(STOPWORDS)\nwc=WordCloud(width=800,height=800,stopwords=stopwords,colormap='Set2',background_color=\"black\",max_words=100,min_font_size=10).generate(str(df[\"Translated_Review\"]))\nplt.figure(figsize=(6,6))\nplt.imshow(wc,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.tight_layout(pad = 0) \nplt.show()","17413707":"from keras.models import Sequential\nfrom keras.layers import Embedding\nfrom keras.layers import Dense\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Flatten\nfrom keras.layers import SimpleRNN\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom kaggle_datasets import KaggleDatasets\nimport transformers\nfrom transformers import TFAutoModel, AutoTokenizer\nfrom tqdm.notebook import tqdm\nfrom tokenizers import Tokenizer, models, pre_tokenizers, decoders, processors","e423db40":"def fast_encode(texts, tokenizer, chunk_size=256, maxlen=512):\n    tokenizer.enable_truncation(max_length=maxlen)\n    tokenizer.enable_padding(max_length=maxlen)\n    all_ids = []\n    \n    for i in tqdm(range(0, len(texts), chunk_size)):\n        text_chunk = texts[i:i+chunk_size].tolist()\n        encs = tokenizer.encode_batch(text_chunk)\n        all_ids.extend([enc.ids for enc in encs])\n    \n    return np.array(all_ids)","e9bc7cdb":"def regular_encode(texts, tokenizer, maxlen=512):\n    enc_di = tokenizer.batch_encode_plus(\n        texts, \n        return_attention_masks=False, \n        return_token_type_ids=False,\n        pad_to_max_length=True,\n        max_length=maxlen\n    )\n    \n    return np.array(enc_di['input_ids'])","f9f21aab":"def build_model(transformer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    sequence_output = transformer(input_word_ids)[0]\n    cls_token = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(cls_token)\n    \n    model = Model(inputs=input_word_ids, outputs=out)\n    model.compile(Adam(lr=1e-5), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","5c401377":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcR7-8eXwRntTU8vv80Fw8881fhPlrEnHc65ElVBk3glpLmhwQOc&usqp=CAU',width=400,height=400)","877fe96e":"Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","ba1c820a":"zello.com","33a4004a":"youtube.com","256c0d3d":"I stopped here since starts TPU XML-RoBERTa. ","1cf64e68":"#Codes from Akshay Kumar Ray https:\/\/www.kaggle.com\/akshaykumarray\/jigsaw-toxic-comment-using-xlm-roberta"}}