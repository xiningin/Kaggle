{"cell_type":{"1003115b":"code","b658d72e":"code","4f7dbdcd":"code","a594eee3":"code","e1b868d0":"code","81d69865":"code","c065569c":"code","48e32cea":"code","468d8912":"code","1871d34b":"code","22f1561f":"code","bcc70a3a":"markdown","b825442a":"markdown"},"source":{"1003115b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport math\nimport re\nfrom glob import iglob\nfrom itertools import groupby\nimport statistics\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.linear_model import LinearRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b658d72e":"\"\"\"\nPreprocessing\n\"\"\"\n\ndef load_data(ID):\n    dtypes = {\n     'sessionTime' : \"float32\",\n     'frameIdentifier' : \"uint32\",\n     'pilot_index' : \"uint8\",\n     'worldPositionX' : \"float32\",\n     'worldPositionY' : \"float32\",\n     'worldPositionZ' : \"float32\",\n     'gForceLateral' : \"float32\",\n     'gForceLongitudinal' : \"float32\",\n     'speed' : \"float32\",\n     'throttle' : \"float32\",\n     'brake' : \"float32\",\n     'gear': \"uint8\",\n     'drs' : \"bool\",\n     'fuelMix': \"uint8\",\n     'pitLimiterStatus': \"bool\",\n     'fuelInTank' : \"float32\",\n     'fuelRemainingLaps' : \"float32\",\n     'ersStoreEnergy' : \"uint32\",\n     'ersDeployMode' : \"uint32\",\n     'ersHarvestedThisLapMGUK' : \"uint32\",\n     'ersHarvestedThisLapMGUH' : \"uint32\",\n     'ersDeployedThisLap' : \"uint32\",\n     'carPosition' : \"uint8\",\n     'currentLapTime' : \"float32\",\n     'currentLapNum' : \"uint8\",\n     'sector': \"uint8\",\n     'lapDistance' : \"float32\",\n     'totalDistance' : \"float32\",\n    }\n\n    fillnas = {\n        'gear' : 0,\n        \"fuelMix\": 1,\n        \"pitLimiterStatus\" : False,\n        \"ersStoreEnergy\" : 4e6,\n        \"ersDeployMode\" : 1,\n        \"ersHarvestedThisLapMGUK\" : 0,\n        \"ersHarvestedThisLapMGUH\" : 0,\n        \"ersDeployedThisLap\" : 0,\n        \"sector\" : 0\n    }\n    \n    telemetry = pd.read_csv(f\"\/kaggle\/input\/f1-2020-race-data\/TelemetryData_{ID}.csv\", usecols=[\n        'sessionTime',\n        'frameIdentifier',\n        'pilot_index',\n        'worldPositionX',\n        'worldPositionY',\n        'worldPositionZ',\n        'gForceLateral',\n        'gForceLongitudinal',\n        'speed',\n        'throttle',\n        'brake',\n        'gear',\n        'drs',\n        'fuelMix',\n        'pitLimiterStatus',\n        'fuelInTank',\n        'fuelRemainingLaps',\n        'ersStoreEnergy',\n        'ersDeployMode',\n        'ersHarvestedThisLapMGUK',\n        'ersHarvestedThisLapMGUH',\n        'ersDeployedThisLap',\n        'carPosition',\n        'currentLapTime',\n        'currentLapNum',\n        'sector',\n        'lapDistance',\n        'totalDistance',\n        'tyresWear',\n        'actualTyreCompound',\n        'tyresDamage',\n        'pitStatus'\n    ], dtype={\n        \"pitStatus\": str\n    })\n    session = pd.read_csv(f\"\/kaggle\/input\/f1-2020-race-data\/SessionData_{ID}.csv\").iloc[0].to_dict()\n    participant = pd.read_csv(f\"\/kaggle\/input\/f1-2020-race-data\/ParticipantData_{ID}.csv\")\n    race = pd.read_csv(f\"\/kaggle\/input\/f1-2020-race-data\/RaceTimeData_{ID}.csv\")\n    \n    for col, dtype in dtypes.items():\n        if col in fillnas:\n            telemetry[col] = telemetry[col].fillna(fillnas[col])\n        telemetry[col] = telemetry[col].astype(dtype)\n    \n    return telemetry, session, participant, race\n\ndef get_my_id(df):\n    return df[df[\"aiControlled\"] == 0].iloc[0][\"pilot_index\"]\n\n\"\"\"\nRemove flashback\n\"\"\"\n\ndef remove_flashbacks(df, pilot=19):\n    df2 = df[df[\"pilot_index\"] == pilot]\n    frame, X = df2[\"frameIdentifier\"].values, df2[[\"worldPositionX\", \"worldPositionY\", \"worldPositionZ\"]].values\n    dist_sq = ((X[1:, :] - X[:-1, :])**2).sum(axis=1)\n    idx_frame_after_flashback = np.argwhere(dist_sq > 1000).flatten() + 1 # to add the frame 0 shifted for the distance computation\n\n    number_flashback = idx_frame_after_flashback.shape[0]\n    pos_before_flashback = X[idx_frame_after_flashback-1]\n    pos_after_flashback = X[idx_frame_after_flashback]  # position after validateing the flashback\n    frames_before_flashback = frame[idx_frame_after_flashback-1]\n    frames_after_flashback = frame[idx_frame_after_flashback] # first frame after validating the flashback\n\n    for i in range(number_flashback):\n        X_start = pos_after_flashback[i, :]\n        frame_start = frames_after_flashback[i]\n        idx_pos = idx_frame_after_flashback[i]\n        offset = min(500, idx_pos)\n        d = ((X[idx_pos-offset:idx_pos] - X_start)**2).sum(axis=1)\n        start, stop = frame[idx_pos - offset + np.argmin(d)], frame_start\n        df = df[(df[\"frameIdentifier\"] > stop) | (df[\"frameIdentifier\"] <= start)]\n\n    return df\n\n\"\"\"\nFuel Ratio\n\"\"\"\n\ndef get_ratio_fuel(df, track_length):\n    dist = df[\"lapDistance\"].values\n\n    ans = [0, 0, 0]\n    for key, seq in groupby( df[\"fuelMix\"].values):\n        n = len(list(seq))\n        ans[key] += (dist[n-1] - dist[0]) \/ track_length\n        dist = dist[n:]\n\n    return ans\n\ndef get_fuel_diff(df):\n    return df[\"fuelInTank\"].max() - df[\"fuelInTank\"].min()\n\ndef engine_provider(team):\n    return{\n        \"Ferrari\": \"Ferrari\",\n        \"Mercedes\": \"Mercedes\",\n        \"Renault\": \"Renault\",\n        \"McLaren\": \"Renault\",\n        \"Red Bull Racing\": \"Honda\",\n        \"Toro Rosso\": \"Honda\",\n        \"Racing Point\": \"Mercedes\",\n        \"Williams\": \"Mercedes\",\n        \"Alfa Romeo\": \"Ferrari\",\n        \"Haas\": \"Ferrari\"\n    }[team]\n\ndef train_fuel_model(df):\n    X = df[[\"lean\", \"normal\", \"rich\"]].values\n    y = df[\"fuel_burned\"].values\n    \n    mdl = LinearRegression(fit_intercept=False)\n    mdl.fit(X, y)\n\n    return mdl.coef_\n\ndef get_fuel_estimation(df, track_length):\n    mix = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_ratio_fuel, track_length).rename(\"percent_mix\").reset_index()\n    mix[\"lean\"] = mix[\"percent_mix\"].apply(lambda x:x[0])\n    mix[\"normal\"] = mix[\"percent_mix\"].apply(lambda x:x[1])\n    mix[\"rich\"] = mix[\"percent_mix\"].apply(lambda x:x[2])\n\n    consumed_fuel = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_fuel_diff).rename(\"fuel_burned\").reset_index()\n\n    fuel = pd.merge(mix, consumed_fuel, how=\"left\", left_on=[\"pilot_index\", \"currentLapNum\"], right_on = [\"pilot_index\", \"currentLapNum\"])\n    a, b, c = train_fuel_model(fuel)\n    \n    return {\n        \"fuel_consumption_lean\" : a,\n        \"fuel_consumption_normal\" : b,\n        \"fuel_consumption_rich\" : c,\n    }\n\n\"\"\"\nERS factors\n\"\"\"\n\ndef get_ratio_ers(df, track_length):\n    dist = df[\"lapDistance\"].values\n\n    ans = [0, 0, 0]\n    for key, seq in groupby( df[\"ersDeployMode\"].values):\n        n = len(list(seq))\n        ans[key] += (dist[n-1] - dist[0]) \/ track_length\n        dist = dist[n:]\n\n    return ans\n\ndef train_ers_model(df):\n    X = df[[\"Disable\", \"Normal\", \"Overtake\"]].values\n    y = df[\"ersDeployedThisLap\"].values\n    \n    mdl = LinearRegression(fit_intercept=False)\n    mdl.fit(X, y)\n    \n    return mdl.coef_\n\ndef get_ERS_estimation(df, track_length):\n    ers_used = df.groupby([\"pilot_index\", \"currentLapNum\"]).agg({\n        \"ersDeployedThisLap\" : \"max\"\n    }).reset_index()\n\n    ers = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_ratio_ers, track_length).rename(\"ers_mix\").reset_index()\n    ers[\"Disable\"] = ers[\"ers_mix\"].apply(lambda x:x[0])\n    ers[\"Normal\"] = ers[\"ers_mix\"].apply(lambda x:x[1])\n    ers[\"Overtake\"] = ers[\"ers_mix\"].apply(lambda x:x[2])\n\n    ers = pd.merge(ers, ers_used, how=\"left\", left_on=[\"pilot_index\", \"currentLapNum\"], right_on = [\"pilot_index\", \"currentLapNum\"])\n    a, b, c = train_ers_model(ers)\n    \n    return {\n#         \"ERS_Disable\" : int(a),\n        \"ERS_Normal\" : int(b),\n        \"ERS_Overtake\" : int(c),\n    }\n\ndef get_energy_recovered(df):\n    lap_restriction = df[\"currentLapNum\"].max() - 1\n    ers_harvested = df[[\"pilot_index\", \"currentLapNum\", 'ersHarvestedThisLapMGUK', 'ersHarvestedThisLapMGUH']].groupby([\"pilot_index\", \"currentLapNum\"]).max().reset_index()\n    ers_harvested = ers_harvested[ers_harvested[\"currentLapNum\"] < lap_restriction]\n    return {\n        \"ersHarvested_MGUK\" : int(ers_harvested.median()['ersHarvestedThisLapMGUK']),\n        \"ersHarvested_MGUH\" : int(ers_harvested.median()['ersHarvestedThisLapMGUH']),\n    }\n\n\"\"\"\nTyre degradation\n\"\"\"\n\ndef make_dataframe_tyre(df):\n    df_tyre = df[[\n        \"frameIdentifier\",\n        \"pilot_index\",\n        \"currentLapTime\",\n        \"currentLapNum\",\n        \"fuelInTank\",\n        \"tyresWear\",\n        \"actualTyreCompound\",\n        \"tyresDamage\"\n    ]]\n    \n    wear = df_tyre[\"tyresDamage\"].str.split(\"\/\", expand=True).astype(\"float32\")\n    wear = wear.mean(axis=1).rename(\"wear\")\n\n    df_tyre = pd.concat([df_tyre[[\"frameIdentifier\", \"pilot_index\", \"currentLapTime\", \"fuelInTank\", \"actualTyreCompound\", \"currentLapNum\"]], wear], axis=1)\n    \n    return df_tyre\n    \ndef train_degradation_model(df):\n    summary = df.groupby('currentLapNum').tail(1)\n    summary = summary[summary[\"currentLapTime\"] > 50]\n    summary = summary[summary[\"wear\"].notnull()]\n    \n    wear = summary[\"wear\"].to_list()\n    tyre = summary[\"actualTyreCompound\"].to_list()\n    \n    wears = []\n    buffer = [wear[0]]\n    for c, prev, curr in zip(tyre[:-1], wear[:-1], wear[1:]):\n        if prev > curr:\n            wears.append((c, buffer))\n            buffer = [curr]\n        else:\n#             if not math.isnan(curr):\n            buffer.append(curr)\n    wears.append((c, buffer))    \n    result = {\n        \"soft\" : [],\n        \"medium\" : [],\n        \"hard\" : [],\n    }\n\n    for c, w in wears:\n        model = LinearRegression(fit_intercept=False)  # at lap 0, wear is 0 (no califications)\n        X = np.arange(1, len(w)+1).reshape(-1, 1)\n        y = np.array(w).reshape(-1, 1)\n        model.fit(X, y)\n        result[c].append(model.coef_[0][0])\n    \n    return result\n\ndef get_tyre_degradation(df):\n    subdf = make_dataframe_tyre(df)\n    results = subdf.groupby(\"pilot_index\").apply(train_degradation_model).to_list()\n    \n    agg_result = {\n        \"soft\" : [],\n        \"medium\" : [],\n        \"hard\" : [],\n    }\n\n    for result in results:\n        for key, vals in result.items():\n            agg_result[key] += vals\n    \n    \n    soft = sum(agg_result[\"soft\"]) \/ len(agg_result[\"soft\"]) if len(agg_result[\"soft\"]) > 0 else 0\n    medium = sum(agg_result[\"medium\"]) \/ len(agg_result[\"medium\"]) if len(agg_result[\"medium\"]) > 0 else 0\n    hard = sum(agg_result[\"hard\"]) \/ len(agg_result[\"hard\"]) if len(agg_result[\"hard\"]) > 0 else 0\n    \n    return {\n        \"tyre_degradation_soft\" : soft,\n        \"tyre_degradation_medium\" : medium,\n        \"tyre_degradation_hard\" : hard,\n    }\n\n\"\"\"\nTrack Stats\n\"\"\"\n\ndef get_distance(df, feature):\n    dist = df[\"lapDistance\"].values\n\n    ans = 0\n    for key, seq in groupby( df[feature].values):\n        n = len(list(seq))\n        if key:\n            ans += dist[n-1] - dist[0] \n        dist = dist[n:]\n\n    return ans\n\ndef get_power_area(df, track_length):\n    \n    df[\"flat_out\"] = df[\"throttle\"]>0.95\n    df[\"braking_zone\"] = df[\"brake\"]>0.30\n    \n    flat = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_distance, feature=\"flat_out\").reset_index()\n    brake = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_distance, feature=\"braking_zone\").reset_index()\n\n    ans = pd.merge(flat, brake, how=\"left\", left_on=[\"pilot_index\", \"currentLapNum\"], right_on = [\"pilot_index\", \"currentLapNum\"])\n    ans.columns = [\"pilot_index\", \"currentLapNum\", \"percent_lap_flat_out\", \"percent_lap_braking\"]\n    ans[[\"percent_lap_flat_out\", \"percent_lap_braking\"]] \/= track_length\n    \n    lap_restriction = df[\"currentLapNum\"].max() - 1\n    ans = ans[ans[\"currentLapNum\"] < lap_restriction]\n    \n    return ans[[\"percent_lap_flat_out\", \"percent_lap_braking\"]].quantile(0.5).to_dict()\n\n\ndef get_average_gear_change(df):\n    def get_number_gear_change(df):\n        ans = 0\n        for key, seq in groupby(df[\"gear\"]):\n            ans += 1\n        return ans\n\n    ans = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_number_gear_change).rename(\"gear_change\").reset_index()\n    lap_restriction = df[\"currentLapNum\"].max() - 1\n    ans = ans[ans[\"currentLapNum\"] < lap_restriction]\n    return { \"average_gear_change\" : int(ans[\"gear_change\"].median()) }\n    \ndef get_average_speed(df, track_length):\n    lap_restriction = df[\"currentLapNum\"].max() - 2\n    fastest_lap = df[df[\"currentLapNum\"]<lap_restriction][\"LapTime\"].min()\n    fastest_avg_speed = track_length \/ fastest_lap * 3.6\n    avg_speed = track_length \/ df[\"LapTime\"].median() * 3.6\n    return {\n        \"average_fastest_lap\" : fastest_avg_speed,\n        \"average_median_lap\" : avg_speed\n    }\n\ndef get_high_and_slow_sections(df, track_length):\n    df[\"above300\"] = df[\"speed\"]>300\n    df[\"below150\"] = df[\"speed\"]<150\n    above300 = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_distance, \"above300\").rename(\"percent_lap_above_300\").reset_index()\n    below150 = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_distance, \"below150\").rename(\"percent_lap_below_150\").reset_index()\n\n    lap_restriction = df[\"currentLapNum\"].max() - 1\n    ans = pd.merge(above300, below150, how=\"left\", left_on=[\"pilot_index\", \"currentLapNum\"], right_on = [\"pilot_index\", \"currentLapNum\"])\n    ans = ans[ans[\"currentLapNum\"]<lap_restriction]\n    ans[[\"percent_lap_above_300\", \"percent_lap_below_150\"]] \/= track_length\n    return ans[[\"percent_lap_above_300\", \"percent_lap_below_150\"]].median().to_dict()\n    \ndef get_median_highest_speed(df):\n    def get_max_speed(df):\n        idx = df[\"speed\"].argmax()\n        return df.iloc[idx][[\"drs\", \"speed\"]]\n\n    lap_restriction = df[\"currentLapNum\"].max() - 1\n    speed = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_max_speed).reset_index()\n    speed = speed[speed[\"currentLapNum\"]<lap_restriction]\n    return {\n        \"highest_speed_with_drs\": speed[speed[\"drs\"] == True][\"speed\"].median(),\n        \"highest_speed_without_drs\": speed[speed[\"drs\"] == False][\"speed\"].median()\n    }\n    \n\"\"\"\nPIT Duration\n\"\"\"\n    \ndef get_pit_durations_per_lap(df):\n    sessionTime = df[\"sessionTime\"].values\n    pitStatus = df[\"pitStatus\"].fillna(\"on track\").values\n\n    pit_stop_duration = []\n    pitting_duration = []\n\n    current_index = 0\n    was_on_pit = False\n    for val, elems in groupby(pitStatus):\n        nrows = len(list(elems))\n        if val == \"pitting\" and not was_on_pit:\n            start_pit_stand = sessionTime[0]\n            was_on_pit = True\n        elif val == \"on track\" and was_on_pit:  # in case on penalty of drive thru, we may not have a \"in pit area\" status\n            stop_pit_stand = sessionTime[0]\n            pitting_duration.append(stop_pit_stand - start_pit_stand)\n            was_on_pit = False\n        elif val == \"in pit area\":\n            start_pit_stop = sessionTime[0]\n            stop_pit_stop = sessionTime[nrows]\n            pit_stop_duration.append(stop_pit_stop - start_pit_stop)\n        sessionTime=sessionTime[nrows:]\n    \n    return pit_stop_duration, pitting_duration\n\ndef get_average_pit_duration(detail):\n    pit_area_durations, pit_lane_durations = [], []\n    for pit_area_duration, pit_lane_duration in detail:\n        if len(pit_area_duration)>0:\n            pit_area_durations += pit_area_duration\n            pit_lane_durations += pit_lane_duration\n    \n    ans_pit_lane = statistics.median(pit_lane_durations) if len(pit_lane_durations) > 0 else 0\n    ans_pit_area = statistics.median(pit_area_durations) if len(pit_area_durations) > 0 else 0\n    return ans_pit_lane, ans_pit_area\n\ndef get_pit_lane_entry_and_exit(df):\n    df['in_pit'] = df[\"pitStatus\"].notnull()\n    \n    all_pilots = df[\"pilot_index\"].unique()\n    dists_entry = []\n    dists_exit = []\n    for pilot_id in all_pilots:\n        sub_df = df[df[\"pilot_index\"] == pilot_id].copy()\n        in_pit, lap_distance, lap_time = sub_df['in_pit'].values, sub_df['lapDistance'].values, sub_df['currentLapTime'].values\n        for pit_bool, seq in groupby(in_pit):\n            n_frames = len(list(seq))\n            if pit_bool:\n#                 if lap_distance[0] > 2000 and 300 < lap_distance[n_frames-1] < 2000: # entry is always at the end of a lap and a lap is more than 3km\n                dists_entry.append(lap_distance[0])\n                dists_exit.append(lap_distance[n_frames-1])\n            lap_distance = lap_distance[n_frames:]\n            \n    return statistics.median(dists_entry), statistics.median(dists_exit)\n\ndef get_time_eq_on_track(df, ref):\n    x = df[\"lapDistance\"].values\n    t = df[\"currentLapTime\"].values\n    dx = x - ref\n    idx_min = np.argmin(np.abs(dx))\n    if dx[idx_min] < 10:  # when I finish the lap, AI behind are directly stopped so we may not find the real min\n        return t[idx_min]\n    else:\n        return None\n\ndef get_time_out_of_pit(df, track_length, race):\n    pit_data = df.groupby([\"pilot_index\"]).apply(get_pit_durations_per_lap).values\n    pit_stop_duration, pitting_duration = get_average_pit_duration(pit_data)\n    \n    entry, exit = get_pit_lane_entry_and_exit(df)\n    pit_length = track_length - entry + exit\n    entry_t = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_time_eq_on_track, entry).rename(\"entryTime\").reset_index()\n    exit_t = df.groupby([\"pilot_index\", \"currentLapNum\"]).apply(get_time_eq_on_track, exit).rename(\"exitTime\").reset_index()\n    \n    time_info = pd.merge(entry_t, race,  how='left', left_on=[\"pilot_index\", \"currentLapNum\"], right_on = [\"pilot_index\", \"currentLapNum\"])\n    time_info = pd.merge(time_info, exit_t,  how='left', left_on=[\"pilot_index\", \"currentLapNum\"], right_on = [\"pilot_index\", \"currentLapNum\"])\n    time_info[\"pit_duration_in_track\"] = time_info[\"LapTime\"] - time_info[\"entryTime\"] + time_info[\"exitTime\"]\n    duration_track = time_info[time_info[\"pit_duration_in_track\"] > 3][\"pit_duration_in_track\"].median()\n    \n    return {\n        \"pit_lane_duration\" : pit_stop_duration, \n        \"pit_area_duration\" : pitting_duration,\n        \"pit_length\" : pit_length,\n        \"duration_on_track\" : duration_track,\n        \"time_lost_per_stop\" : pit_stop_duration - duration_track\n    }\n\n\"\"\"\nMAIN\n\"\"\"\n\ndef process(ID):\n    telemetry, session, participant, race = load_data(ID)\n    session[\"weather\"] = \"Dry\"\n    myID = get_my_id(participant)\n    telemetry = remove_flashbacks(telemetry, pilot=myID)\n    fuel_data = get_fuel_estimation(telemetry, session[\"trackLength\"])\n    ers_data = get_ERS_estimation(telemetry, session[\"trackLength\"])\n    ers_recovered = get_energy_recovered(telemetry)\n    tyre_degradation = get_tyre_degradation(telemetry)\n    throttle = get_power_area(telemetry, session[\"trackLength\"])\n    gear_change = get_average_gear_change(telemetry)\n    speed = get_average_speed(race, session[\"trackLength\"])\n    section_speed = get_high_and_slow_sections(telemetry, session[\"trackLength\"])\n    highest_speed = get_median_highest_speed(telemetry)\n    pit_data = get_time_out_of_pit(telemetry, session[\"trackLength\"], race)\n    return {\n        \"ID\" : ID,\n        **session,\n        **fuel_data,\n        **ers_data,\n        **ers_recovered,\n        **tyre_degradation,\n        **throttle,\n        **gear_change,\n        **speed,\n        **section_speed,\n        **highest_speed,\n        **pit_data,\n    }","4f7dbdcd":"all_results = []\nfor i, file in enumerate(iglob(\"\/kaggle\/input\/f1-2020-race-data\/TelemetryData_*.csv\")):\n    ID = re.search('_(\\d+).', file).group(1)\n    print(f\"{i+1:0>2}\/22 - {ID}\")\n    all_results.append(process(ID))\n\nfinal = pd.DataFrame(all_results)\nfinal[\"totalDistance\"] = final[\"totalLaps\"] * final[\"trackLength\"]\n    \nrearranged = ['ID',\n 'weather',\n 'trackTemperature',\n 'airTemperature',\n 'totalLaps',\n 'trackLength',\n 'totalDistance',\n 'trackId',\n 'fuel_consumption_lean',\n 'fuel_consumption_normal',\n 'fuel_consumption_rich',\n 'ERS_Normal',\n 'ERS_Overtake',\n 'ersHarvested_MGUK',\n 'ersHarvested_MGUH',\n 'tyre_degradation_soft',\n 'tyre_degradation_medium',\n 'tyre_degradation_hard',\n 'percent_lap_flat_out',\n 'percent_lap_braking',\n 'average_gear_change',\n 'average_fastest_lap',\n 'average_median_lap',\n 'percent_lap_above_300',\n 'percent_lap_below_150',\n 'highest_speed_with_drs',\n 'highest_speed_without_drs',\n 'pit_lane_duration',\n 'pit_area_duration',\n 'pit_length',\n 'duration_on_track',\n 'time_lost_per_stop'\n]\nfinal = final[rearranged]\nfinal = final.round(3)\nfinal[\"highest_speed_with_drs\"] = final[\"highest_speed_with_drs\"].astype(int)\nfinal[\"highest_speed_without_drs\"] = final[\"highest_speed_without_drs\"].astype(int)\nfinal[[\"percent_lap_flat_out\", \"percent_lap_braking\", \"percent_lap_above_300\", \"percent_lap_below_150\"]] *= 100","a594eee3":"final.columns","e1b868d0":"final.to_csv(\"\/kaggle\/working\/final.csv\", index=False)","81d69865":"df = pd.read_csv(\"\/kaggle\/working\/final.csv\")","c065569c":"df[\"dist_above_300\"] = df[\"percent_lap_above_300\"] * df[\"trackLength\"] \/ 100\ndf[\"dist_below_150\"] = df[\"percent_lap_below_150\"] * df[\"trackLength\"] \/ 100\ndf[\"dist_below_300\"] = df[\"trackLength\"] - df[\"dist_above_300\"]\n\nfig, ax = plt.subplots(figsize=(20, 12))\nsns.barplot(x=\"trackId\", y=\"trackLength\", data = df, ax=ax, color=\"r\", label=\"above 300\")\nsns.barplot(x=\"trackId\", y=\"dist_below_300\", data = df, ax=ax, color=\"g\", label=\"between 150 and 300\")\nsns.barplot(x=\"trackId\", y=\"dist_below_150\", data = df, ax=ax, color=\"b\", label=\"below 150\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nax.set_ylabel(\"trackLength\")\nax.legend()\nplt.title(\"Distance at given speed per Track\")\nplt.show()","48e32cea":"fig, ax = plt.subplots(figsize=(20, 12))\nsns.barplot(x=\"trackId\", y=\"fuel_consumption_rich\", data = df, ax=ax, color=\"r\", label=\"Rich\")\nsns.barplot(x=\"trackId\", y=\"fuel_consumption_normal\", data = df, ax=ax, color=\"g\", label=\"Normal\")\nsns.barplot(x=\"trackId\", y=\"fuel_consumption_lean\", data = df, ax=ax, color=\"b\", label=\"Lean\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nax.set_ylabel(\"Consumption kg\/Lap\")\nax.legend()\nplt.title(\"Fuel Mix consumption\")\nplt.show()","468d8912":"fig, ax = plt.subplots(figsize=(20, 12))\nsns.barplot(x=\"trackId\", y=\"tyre_degradation_soft\", data = df, ax=ax, color=\"r\", label=\"Soft\")\nsns.barplot(x=\"trackId\", y=\"tyre_degradation_medium\", data = df, ax=ax, color=\"g\", label=\"Medium\")\nsns.barplot(x=\"trackId\", y=\"tyre_degradation_hard\", data = df, ax=ax, color=\"b\", label=\"Hard\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nax.set_ylabel(\"Tyre Degradation %\/Lap\")\nax.legend()\nplt.title(\"Tyre Degradation\")\nplt.show()","1871d34b":"df[\"totalHarvested\"] = df['ersHarvested_MGUK'] + df['ersHarvested_MGUH']\n\nfig, (ax, ax2) = plt.subplots(1, 2, sharey='row', figsize=(30, 12))\nsns.barplot(x=\"trackId\", y=\"totalHarvested\", data = df, ax=ax, color=\"r\", label=\"ersHarvested_MGUH\")\nsns.barplot(x=\"trackId\", y=\"ersHarvested_MGUK\", data = df, ax=ax, color=\"g\", label=\"ersHarvested_MGUK\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nax.set_ylabel(\"Energy J\/Lap\")\nax.legend()\nax.set_title(\"Energy Harvested per Lap\")\n\nsns.barplot(x=\"trackId\", y=\"ERS_Normal\", data = df, ax=ax2, color=\"b\", label=\"ERS Consummed W\/O OT\")\nax2.set_title(\"Energy Consummed without OT per Lap\")\nax2.legend()\nax2.set_xticklabels(ax2.get_xticklabels(), rotation=45)\n\nplt.show()\n","22f1561f":"fig, ax = plt.subplots(figsize=(20, 12))\nsns.barplot(x=\"trackId\", y=\"average_gear_change\", data = df, ax=ax)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\nax.set_ylabel(\"Gear change\")\nax.legend()\nplt.title(\"Gear change per Lap\")\nplt.show()","bcc70a3a":"# Introduction\n\nThis notebook is just a merge of all metrics defined previouly for each tracks. Few bugs have been fixed also due to the difference between tracks","b825442a":"# Plots"}}