{"cell_type":{"31c70f65":"code","7cc7fba4":"code","06a23d5b":"code","47526f8d":"code","b233a778":"code","58b4097e":"code","04c6e63b":"code","09733ebc":"code","402b2b66":"code","107874e8":"code","d03773c0":"code","da5cdef6":"code","2f262b78":"code","7d833e01":"code","759f6863":"code","59da3dfc":"code","9028d39d":"code","ca63721b":"code","c26229ec":"code","5bd5f6fe":"code","629a13ef":"code","e038ccb1":"code","1bdef346":"code","844799e8":"code","8bac6071":"code","d22c4689":"code","5ce6f08b":"code","df665166":"code","8072aef4":"code","c9e0b22f":"code","0b16022b":"code","e02c4187":"code","f7882902":"code","b879d1cc":"code","44368b05":"code","f729b26e":"code","e8aea84c":"code","07bd5ed9":"code","115e283f":"code","af7108fd":"code","d17baa55":"code","32d6a8fb":"code","195bccb0":"code","9331b52e":"code","da993f9a":"code","f0011156":"code","04e13324":"code","b57ecd4e":"code","a903743a":"code","f51f0c76":"code","7b657c1c":"code","41239f2e":"markdown","50fbdec0":"markdown","6e65e574":"markdown","c102dabd":"markdown","16cecba5":"markdown","b0573980":"markdown","7ba529d6":"markdown","21e58cdd":"markdown","e4248e78":"markdown","bb63c4b7":"markdown","d7ed7c48":"markdown","79a850a0":"markdown","68badf59":"markdown","5f9f812b":"markdown","4c938f34":"markdown"},"source":{"31c70f65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7cc7fba4":"import pandas as pd\nimport numpy as np\nimport matplotlib\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\npd.set_option('display.max_columns',None)","06a23d5b":"train_df = pd.read_csv(\"\/kaggle\/input\/DontGetKicked\/training.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/DontGetKicked\/test.csv\")\nsubmissions_df = pd.read_csv(\"\/kaggle\/input\/DontGetKicked\/example_entry.csv\")\n\ntrain_df.head(5)","47526f8d":"a=train_df.IsBadBuy.value_counts()\nplt.figure(figsize=(3,3.5))\nsns.barplot(x=['Yes','No'],y=a,palette=['g','r'])\nplt.ylabel('counts')\nplt.title(\"Is Bad Buy\")\nplt.show()","b233a778":"age=pd.DataFrame(train_df.VehicleAge.value_counts())\nplt.figure(figsize=(6,4))\nsns.barplot(x=age.index,y='VehicleAge',data=age,palette='Set2')\nplt.ylabel('counts')\nplt.xlabel('Age of Vehicle')\nplt.title(\"Vehicle Age\")\nplt.show()","58b4097e":"plt.title(\"Vehicle Age vs Is Bad Buy \")\nsns.countplot(x = \"VehicleAge\", data =train_df, hue = \"IsBadBuy\",palette=['y','c'])\nplt.legend(['0:Good buy','1:BadBuy'])\nplt.show()","04c6e63b":"px.histogram(train_df, x = \"Make\", color = \"IsBadBuy\",height=500,width=800)","09733ebc":"px.histogram(train_df, x = \"Nationality\", color = \"IsBadBuy\",height=450,width=800)","402b2b66":"px.histogram(train_df, x = \"Auction\", color = \"IsBadBuy\",height=450,width=800)","107874e8":"px.scatter(train_df.head(5000), x = 'MMRAcquisitionAuctionAveragePrice', y = 'MMRAcquisitionRetailAveragePrice', color = 'IsBadBuy',height=500,width=1000)","d03773c0":"px.scatter(train_df, x = 'MMRAcquisitionAuctionAveragePrice', y = 'MMRCurrentAuctionAveragePrice' ,color = 'IsBadBuy',height=500,width=1000)","da5cdef6":"px.scatter(train_df, x = 'MMRAcquisitionAuctionAveragePrice', y = 'MMRAcquisitionRetailAveragePrice', color = 'IsBadBuy',height=500,width=1000)","2f262b78":"plt.figure(figsize=(25,10))\nmask_matrix=np.triu(train_df.corr())\nsns.heatmap(train_df.corr(),cmap='crest',annot=True, linewidths=.5, fmt= '.1f',mask=mask_matrix);\nplt.show();","7d833e01":"total=train_df.Nationality.value_counts()\namerican=train_df[(train_df.Nationality=='AMERICAN')&(train_df.IsBadBuy==1)].count()[1]\notherasian=train_df[(train_df.Nationality=='OTHER ASIAN')&(train_df.IsBadBuy==1)].count()[1]\ntopasian=train_df[(train_df.Nationality=='TOP LINE ASIAN')&(train_df.IsBadBuy==1)].count()[1]\nother=train_df[(train_df.Nationality=='OTHER')&(train_df.IsBadBuy==1)].count()[1]\nprint(\"Probability of bad buys depending on country :- \\n----------------------------------------------\\n\")\nprint(\"AMERICAN\\t: \",american\/total[0],\n        \"\\nOTHER ASIAN\\t: \",otherasian\/total[1], \n        \"\\nTop LINE ASIAN\\t: \" ,topasian\/total[2],\n        \"\\nOTHERS\\t\\t: \",other\/total[3])\nx_titles=['American','OtherAsian','TopLineAsian','Others'];\ny_titles=[american\/total[0],otherasian\/total[1],topasian\/total[2],other\/total[3]]\nplt.figure(figsize=(8,6))\nplt.title(\"Probability of bad buys depending on country\",fontsize=16)\nplt.ylabel('Probability',fontsize=16)\nplt.xlabel('Country',fontsize=16)\nsns.barplot(x=x_titles,y=y_titles);\nplt.show()","759f6863":"print(\"Description about the columns of Dataset:-\\n\")\ntext_file = open('\/kaggle\/input\/DontGetKicked\/Carvana_Data_Dictionary.txt')\nfile_content = text_file.read()\nprint(file_content)\ntext_file.close()","59da3dfc":"train_df.drop(['RefId','BYRNO','VNZIP1','PurchDate'],axis=1,inplace=True)\ntest_df.drop(['RefId','BYRNO','VNZIP1','PurchDate'],axis=1,inplace=True)","9028d39d":"print(\"For Training Dataset:\")\ndf=pd.DataFrame(train_df.isna().sum())\ndf.rename({0:'counts'},axis=1,inplace=True)\ndf[(df.counts>0)]","ca63721b":"print(\"For Test Dataset:\")\ndf=pd.DataFrame(test_df.isna().sum())\ndf.rename({0:'counts'},axis=1,inplace=True)\ndf[(df.counts>0)]","c26229ec":"#for col in train_df:\n#    print(col,\" value_counts\",len(train_df[f'{col}'].value_counts()))","5bd5f6fe":"print(\"Model.value_counts:\",len(train_df.Model.value_counts(dropna=False)))\nprint(\"Make.value_counts:\",len(train_df.Make.value_counts(dropna=False)))\nprint(\"SubModel.value_counts:\",len(train_df.SubModel.value_counts(dropna=False)))\nprint(\"Color.value_counts:\",len(train_df.Color.value_counts(dropna=False)))\nprint(\"WheelType.value_counts:\",len(train_df.WheelType.value_counts(dropna=False)))\nprint(\"WheelTypeID.value_counts:\",len(train_df.WheelTypeID.value_counts(dropna=False)))\nprint(\"Trim.value_counts:\",len(train_df.Trim.value_counts(dropna=False)))\nprint(\"TopThreeAmericanName.value_counts:\",len(train_df.TopThreeAmericanName.value_counts(dropna=False)))\nprint(\"Nationality.value_counts:\",len(train_df.Nationality.value_counts(dropna=False)))\nprint(\"Transmission.value_counts:\",len(train_df.Transmission.value_counts(dropna=False)))\nprint(\"Size.value_counts:\",len(train_df.Size.value_counts(dropna=False)))\nprint(\"AUCGUART.value_counts:\",len(train_df.AUCGUART.value_counts(dropna=False)))\nprint(\"PRIMEUNIT.value_counts:\",len(train_df.AUCGUART.value_counts(dropna=False)))\nprint(\"VNST.value_counts:\",len(train_df.VNST.value_counts(dropna=False)))\nprint(\"IsOnlineSale.value_counts:\",len(train_df.IsOnlineSale.value_counts(dropna=False)))","629a13ef":"train_df.Transmission.value_counts(dropna=False)\ntrain_df[\"Transmission\"].replace(\"Manual\",\"MANUAL\",inplace=True)\ntrain_df.Transmission.value_counts(dropna=False)","e038ccb1":"train_df.WheelType.value_counts(dropna=False)","1bdef346":"train_df.WheelTypeID.value_counts(dropna=False)","844799e8":"train_df.Nationality.value_counts(dropna=False)","8bac6071":"train_df.Size.value_counts(dropna=False)","d22c4689":"train_df.Model.value_counts(dropna=False)","5ce6f08b":"train_df.drop(['Model','Trim','SubModel','VehYear','WheelTypeID','VNST'],axis=1,inplace=True)\ntest_df.drop(['Model','Trim','SubModel','VehYear','WheelTypeID','VNST'],axis=1,inplace=True)","df665166":"train_df.sample(5)","8072aef4":"targets=train_df['IsBadBuy']\ntrain_df.drop('IsBadBuy',axis=1,inplace=True)","c9e0b22f":"categorical_cols = train_df.select_dtypes(include = 'object').columns.tolist()\nnumeric_cols = train_df.select_dtypes(exclude='object').columns.tolist()","0b16022b":"from sklearn.impute import SimpleImputer\nimputer=SimpleImputer(strategy='mean');\nimputer.fit(train_df[numeric_cols]);\ntrain_df[numeric_cols]=imputer.transform(train_df[numeric_cols]);\ntest_df[numeric_cols]=imputer.transform(test_df[numeric_cols]);","e02c4187":"df=pd.DataFrame(train_df.isna().sum())\ndf.rename({0:'counts'},axis=1,inplace=True)\ndf[(df.counts>0)]","f7882902":"# Due to different versions of libraries OneHotEncoder is not working efficiently (i.e not able to deal with NaN values)\ntrain_df.Transmission.fillna('Trans_unk',inplace=True)\ntrain_df.WheelType.fillna('WheelType_unk',inplace=True)\ntrain_df.Nationality.fillna('Nationality_unk',inplace=True)\ntrain_df.Size.fillna('Trans_unk',inplace=True)\ntrain_df.TopThreeAmericanName.fillna('TopThreeAmericanName_unk',inplace=True)\ntrain_df.PRIMEUNIT.fillna('PRIMEUNIT_unk',inplace=True)\ntrain_df.AUCGUART.fillna('AUCGUART_unk',inplace=True)\ntrain_df.Color.fillna('Color_unk',inplace=True)\n\ntest_df.TopThreeAmericanName.fillna('Trans_unk',inplace=True)\ntest_df.Size.fillna('Trans_unk',inplace=True)\ntest_df.WheelType.fillna('Trans_unk',inplace=True)\ntest_df.Nationality.fillna('Trans_unk',inplace=True)\ntest_df.Transmission.fillna('Trans_unk',inplace=True)\ntest_df.PRIMEUNIT.fillna('PRIMEUNIT_unk',inplace=True)\ntest_df.AUCGUART.fillna('AUCGUART_unk',inplace=True)\ntest_df.Color.fillna('Color_unk',inplace=True)","b879d1cc":"from sklearn.preprocessing import OneHotEncoder\nencoder=OneHotEncoder(sparse=False,handle_unknown='ignore')\nencoder.fit(train_df[categorical_cols])\nencoded_cols=list(encoder.get_feature_names(categorical_cols))\ntrain_df[encoded_cols]=encoder.transform(train_df[categorical_cols]);\ntest_df[encoded_cols]=encoder.transform(test_df[categorical_cols]);","44368b05":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(train_df[numeric_cols]);\ntrain_df[numeric_cols]=scaler.transform(train_df[numeric_cols])\ntest_df[numeric_cols]=scaler.transform(test_df[numeric_cols])","f729b26e":"train_df=train_df[numeric_cols+encoded_cols]\ntest_df=test_df[numeric_cols+encoded_cols]","e8aea84c":"from sklearn.model_selection import train_test_split\ninputs,val_inputs,targets,val_targets = train_test_split(train_df,targets,test_size=0.25, random_state=42)","07bd5ed9":"from sklearn.metrics import accuracy_score, confusion_matrix\n# A Dum model saying \"NO\" always has a accuracy of 87% . So we need to have a percentage above it !!!!!!!!\ndum_model_outs=np.zeros(len(inputs))\naccuracy_score(dum_model_outs,targets)","115e283f":"%%time\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nmodel=DecisionTreeClassifier(max_depth=12,random_state=42)\nmodel.fit(inputs,targets)\nprint(\"Train_acc:\",model.score(inputs,targets),\" | Val_acc:\",model.score(val_inputs,val_targets))","af7108fd":"def max_depth(min,max):\n    depth=[]\n    tr_ac=[]\n    va_ac=[]\n    for i in range(min,max,2):\n        model =DecisionTreeClassifier(max_depth=i, random_state=42)\n        model.fit(inputs,targets)\n        depth.append(i)\n        tr_ac.append(model.score(inputs,targets))\n        va_ac.append(model.score(val_inputs,val_targets))\n        \n    tr_ac=1-np.array(tr_ac);\n    va_ac=1-np.array(va_ac);\n    \n    plt.figure(figsize=(10,8))\n    sns.set_style('darkgrid')\n    plt.title('Error in train and Validation Accuracy Vs Depth')\n    plt.xlabel('Depth')\n    plt.ylabel('Error in Accuracy')\n    plt.plot(depth,tr_ac,'cs-',linewidth=3,markersize=9)\n    plt.plot(depth,va_ac,'D--',color='orange',linewidth=3, markersize=7)\n    plt.legend(['Loss_Train','Loss_Val']);\n    plt.show()\nmax_depth(4,18)","d17baa55":"model=DecisionTreeClassifier(max_depth=6,random_state=42,max_features=0.9,class_weight={0:1,1:2})\nmodel.fit(inputs,targets)\nprint(\"Train_acc:\",model.score(inputs,targets),\" | Val_acc:\",model.score(val_inputs,val_targets))","32d6a8fb":"preds=model.predict(test_df)\nsubmissions_df['IsBadBuy']=preds\nsubmissions_df.to_csv('Submissions.csv',index=False)","195bccb0":"from sklearn.ensemble import RandomForestClassifier    ","9331b52e":"%%time\nmodel=RandomForestClassifier(n_jobs=-1,n_estimators=12,max_depth=16,random_state=42)\nmodel.fit(inputs,targets)\nprint(\"Train_acc:\",model.score(inputs,targets),\" | Val_acc:\",model.score(val_inputs,val_targets))","da993f9a":"def max_depth(min,max):\n    depth=[]\n    tr_ac=[]\n    va_ac=[]\n    for i in range(min,max,2):\n        model =RandomForestClassifier(max_depth=i, random_state=42)\n        model.fit(inputs,targets)\n        depth.append(i)\n        tr_ac.append(model.score(inputs,targets))\n        va_ac.append(model.score(val_inputs,val_targets))\n        \n    tr_ac=1-np.array(tr_ac);\n    va_ac=1-np.array(va_ac);\n    \n    plt.figure(figsize=(10,8))\n    sns.set_style('darkgrid')\n    plt.title('Error in train and Validation Accuracy Vs Depth')\n    plt.xlabel('Depth')\n    plt.ylabel('Error in Accuracy')\n    plt.plot(depth,tr_ac,'cs-',linewidth=3,markersize=9)\n    plt.plot(depth,va_ac,'D--',color='orange',linewidth=3, markersize=7)\n    plt.legend(['Loss_Train','Loss_Val']);\n    plt.show()\nmax_depth(10,20)","f0011156":"def test_model(**params):\n        model=RandomForestClassifier(n_jobs=-1,random_state=42,**params)\n        model.fit(inputs,targets)\n        print(\" | Train_acc: \",model.score(inputs,targets),\" | Val_acc: \",model.score(val_inputs,val_targets) ) \n        return model.score(inputs,targets),model.score(val_inputs,val_targets)","04e13324":"test_model(n_estimators=12)\ntest_model(n_estimators=100)","b57ecd4e":"%%time\nmodel=RandomForestClassifier(n_jobs=-1,n_estimators=100,max_depth=16,random_state=42)\nmodel.fit(inputs,targets)\nprint(\"Train_acc:\",model.score(inputs,targets),\" | Val_acc:\",model.score(val_inputs,val_targets))","a903743a":"importance_df = pd.DataFrame({\n    'feature': inputs.columns,\n    'importance': model.feature_importances_\n}).sort_values('importance', ascending=False)\nimportance_df.head(10)","f51f0c76":"plt.figure(figsize=(10,6))\nplt.title('Feature Importance')\nsns.barplot(data=importance_df.head(10),palette='husl',x='importance', y='feature');\nplt.show()","7b657c1c":"preds=model.predict_proba(test_df)\nsubmissions_df['IsBadBuy']=preds[:,1]\nsubmissions_df.to_csv('Submissions.csv',index=False)","41239f2e":"### Conclusions\n\n\n1. We can drop **`Model`**, **`Trim`** and **`SubModel`** as they have alot of categories and model wont be able to learn all of them.\n\n\n2. Note: **`WheelType`** and **`WheelTypeID`** are one and the same. One of them is containing numeric categories and other as string. Its better we drop **`WheelTypeID`** as the other column has type of metal used for making the wheel which might help us understand the importance of a particular metal used in making the wheel\n\n3.  **`VehYear`** might not play a crucial role as we have  **`VehicleAge`** as a column. The  **`PurchDate`** varies and similarly  **`VehYear`** varies.The only thing that matters is how much old the vehicle is at the time of resale. Thus `drop` **`VehYear`**\n\n4. State from which car is bought should nit be a factor for judging bad buy . Thus we can drop **`VNST`** .\n","50fbdec0":"# Conclusion\nI took my inspriation from the following notebooks:-\n\n* https:\/\/www.kaggle.com\/mikhailtokar\/ml-rgr-dgk\n* https:\/\/www.kaggle.com\/yogesh893\/dont-get-kicked\n* https:\/\/jovian.ai\/learn\/machine-learning-with-python-zero-to-gbms\/lesson\/random-forests-and-regularization\n* https:\/\/jovian.ai\/learn\/machine-learning-with-python-zero-to-gbms\/lesson\/gradient-boosting-with-xgboost","6e65e574":"### Analysis made:\n\n* The given Dataset has Dataset alot of Yes for **`IsBadBuy`** column (alot of zeros denoting good buy)\n* Maximum cars comming for resale is **3-4 yrs** old and is mostly considered a good buy compared to the ones which are **4-5 years** old\n* **Top LINE ASIAN** countries seem to dominate the probability of bad buys when segregated according to nationality\n* Resale Cars from **America** can be bought as it has less chances of beeing a bad buy as compared to the other nationalities \n* **Ford** and **Chevrolet** cars have a high chance of being a bad buy","c102dabd":"Notice **`WheelType`** and **`WheelTypeId`** are the same columns one in coded values other in text","16cecba5":"#EXPLORATORY DATA ANALYSIS","b0573980":"![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAABHcAAAC+CAYAAAC\/B+N0AAAgAElEQVR4Ae29f2xVx533nz+fPytV3aXqjyibtk\/TKN20abWKtGq\/TVspQtZWjaJok12r2qVRnwg9SBVUz8qJtijKonyBVLFIiqxAdmsTiLMx5YmhsMZGNmA74PLjEgcjwCY28mLq1E4sE3IT0PvRzJk595xzz7m+1xi4135FIr4\/5syZec37zJnzvjOfuUP8BwEIQAACEIAABCAAAQhAAAIQgAAEIFCzBO6o2ZJTcAhAAAIQgAAEIAABCEAAAhCAAAQgAAFh7iACCEAAAhCAAAQgAAEIQAACEIAABCBQwwQwd2q48Sg6BCAAAQhAAAIQgAAEIAABCEAAAhDA3EEDEIAABCAAAQhAAAIQgAAEIAABCECghglg7tRw41F0CEAAAhCAAAQgAAEIQAACEIAABCCAuYMGIAABCEAAAhCAAAQgAAEIQAACEIBADRPA3KnhxqPoEIAABCAAAQhAAAIQgAAEIAABCEAAcwcNQAACEIAABCAAAQhAAAIQgAAEIACBGiaAuVPDjUfRIQABCEAAAhCAAAQgAAEIQAACEIAA5g4agAAEIAABCEAAAhCAAAQgAAEIQAACNUwAc6eGG4+iQwACEIAABCAAAQhAAAIQgAAEIAABzB00AAEIQAACEIAABCAAAQhAAAIQgAAEapgA5k4NNx5FhwAEIAABCEAAAhCAAAQgAAEIQAACmDtoAAIQgAAEIAABCEAAAhCAAAQgAAEI1DABzJ0abjyKDgEIQAACEIAABCAAAQhAAAIQgAAEMHfQAAQgAAEIQAACEIAABCAAAQhAAAIQqGECmDs13HgUHQIQgAAEIAABCEAAAhCAAAQgAAEIYO6gAQhAAAIQgAAEIAABCEAAAhCAAAQgUMMEMHdquPEoOgQgAAEIQAACEIAABCAAAQhAAAIQwNxBAxCAAAQgAAEIQAACEIAABCAAAQhAoIYJYO7UcONRdAhAAAIQgAAEIAABCEAAAhCAAAQggLmDBiAAAQhAAAIQgAAEIAABCEAAAhCAQA0TwNyp4caj6BCAAAQgAAEIQAACEIAABCAAAQhAAHMHDUAAAhCAAAQgAAEIQAACEIAABCAAgRomgLlTw41H0SEAAQhAAAIQgAAEIAABCEAAAhCAAOYOGoAABCAAAQhAAAIQgAAEIAABCEAAAjVMAHOnhhuPokMAAhCAAAQgAAEIQAACEIAABCAAAcwdNAABCEAAAhCAAAQgAAEIQAACEIAABGqYAOZODTceRYcABCAAAQhAAAIQgAAEIAABCEAAApg7aAACEIAABCAAAQhAAAIQgAAEIAABCNQwAcydGm48ig4BCEAAAhCAAAQgAAEIQAACEIAABDB30AAEIAABCEAAAhCAAAQgAAEIQAACEKhhApg7Ndx4FB0CEIAABCAAAQhAAAIQgAAEIAABCGDuoAEIQAAC1UzgWl75fPDv2vVqLmihbPk\/nVPunVHN1Eh5CyXnFQQgMG8C12c0+k5O5\/6Un3cWqQferHxTT8aHEFhAAvlJnTs5qNGZBczzBrOaGRtU7uykFvgqvcFScTgEbiGBTyLj6lt42lt1qtLmzuw5dTQ1qen3xzXxSXqRJo41qampSccvp3\/PpxCAAAQgMA8CVyeU62pVi+mDw3\/btfftc5rO6I9Ln2VCx00++8\/pSumEN\/jtpHI7gjL3XIgMH93N9FpR7tcC82pedSrKLPYB96cYDt4sSQKTyr1prsfDGo1cjgGKGQ3tCa7VjnPFvcKVcx2272kfKu\/JNH+hJ+irduQ0GWF9zZrTxVd+JEn4Mi1tVr7hQbyoUQLunhTe36L3OvO6Q+dma6Vq6fexyZPbg2uie+TWmylp99yrI+qxvLcr96daYUs5IbAwBK5Nn1P\/H9w16fudllZ1nZy49dfnwlQpNZfyzJ2mJrUNTCjt1szgOZUrH0IAAhCYP4GrozrcYga327X3UE7nxsY1fmFI\/fuDm1LLgXMq73ErWoRbZe5I+UtDyr0zEjOhgntFymDd\/4hwbCJa2AV5zf1pQTCSSY0TmDjWYh8wj15KVMRfe2aQ+\/Z4Yox3TeNvmz6oTbn3E8dlvf1kWiPv5DR0KeoiVdLvZKRNzTerEHxeOwRce7\/ZpaMnc8oV\/RvSRFRK1Vwxfy0l72NXJzR0clAj02lPUDe3Qun33GuavjCo3JnF9TB7c0mS+6Ig8H5Ou8y9zpg5bw9pZHxco+dy6mkP7o+7jqX7HLVY97LNnaamFvVfLO6cGDzXYrNTZghAoJoJTJ5qsw9jHWeTFo554DI3opZ5zJbMeHC6RSDSB5qSsgbFC1Au7k8LAJEsap7AtYv9tj9pOxWdTyP5z+3MwJbjiturEzpuDOaizyvFUUm\/U0naSstB+uojsIja+ybex+bbbpn33PlmyHEQqFkCeY0eCn6sOHop6WXMaOgPtTZTsHRDlGfu9BwOfkVuOazRq\/EMUwfP169o\/J3D6vh98Cvz9t936PA747oSjb\/wp0G172lX\/3tXlL+UU49J29JaWHLwybTOvd2hXTua1PKf7ep5J2V9aH5aI8d61P6f5mFnu3Z1H1\/4td7x6vIOAhCAwE0nEPSruzQ4XXyqa7OTGh8f1+Ssu0FF+tJY6iuj6t\/Trva+UbcMqzCQnslParB7l7Y3mf51b3H\/7I99Z1J2Gus+szzM9LE5Tdh7QF4TJ13fu2OXOt4eicXXmXynXe17+jVqVnq4vExfbkyp1vbCdzZdu1t6tmOXvSe0vxN\/AL0yPqjD+6NlHdVMyhKuK+PmFxiTV4ta9\/Xr3PQ1pd6fYpB4A4ElQCA\/qsPmF8v\/is\/4C2b0dKj\/7fbiGTofDqk9NqMnr+kLx9015sZlx0Y0HZ1ZEek3DNUr7\/WrfU9w7ZrxnRnzFfqjOPeSaRP5miPDPmY26IuCseJe9Z+btjOQbL9l+w3T5\/RoMCUOUP7PIzre3a5WY2Lt2KWeY+c0mRjjxkvJu4UlULgnFS8KjJzp6qiO7mtX+\/6cJqPPZZ+M67jRVNegJiPPF+XeM5Lt33FoUOPRgqToLijVpAbNefcM2uWHJe9jWffn5PPL\/sMajJ1cUuRY+5wU3t8OayhFzyGxEvdc6YpG+wplt8ckzzOP57EkS66lsDV4URUErujcfjMGPazRlPFjfnrcjquno\/1\/zMsI7iPHL0wXL98qJ12kLwk9j6bIDyrJPPYd1uDYTGI2bfkgyzN3zFSlS0fVZh4EDozE4jUUDZ6vTer4790gvqvfTrMsLCWIHHv5ePDL9KHD2uUH9dakaVLLoZxyB1q0\/femA3I33qYm7T0T+RV7ZkQ99mHBLFs4qtzAYe11Dw9d5yLpymdBSghAAAJVQcDP3Nl1ZDRuiqeVzvelyZgZ\/pfEMMaOG0j\/11Ed3d+k7b\/vUb\/pN32\/G13q5Y\/tPqzDO9xDmTPrTQy2wWO7rOlu+ufAtGlSy5HCso7gvuCWYJUYaJYcFOuaJk6025hDLf\/Zpf6TOfX7GESJOHAz57qC2ETmB4JDR9VvjKuWLnXZmzkx4dJkw2dLiUBkYBuaMS4Wz54hzbyfs+O7aGwdH2\/n8HvmgCsaOWB+RGvS9j8ctktojvYE16bpD8IHbt9vuKUpJQ2bBP6SaRP5mkN9H3P40K7EWLFFh0\/l1NWyXbvMA7g3j5v2aujDwklnhnusud20Y68OD+R09NDe4H1LlxhCFjjd3FdlmjtGgcNBH783Ev9p8tQu+4NBYVVBBfcM3\/7Re4ZdshFp\/xTdBTxcud3DWcn7WNr9OXx+aVGreU6KPL+0n4gsDfHHmuckb46Get6VvVyyxD3XXMvBQ27kwTJ6nnk8j3Et3dyrhNwXgoCfudOirqEUgyZ5ik8mdNwt10qOlWPLt6Lp7L2xX11uTL29e6QQPsH3Jfs7bCxj62+0u9h0YR6uPzhZyCN2rmQZS7wv29yRGWgfCzrSqHmSNHeu\/WlQPXt2qSe2nCCvkW5j+LQXbq6uM4kFa74+rUE7NapJu05Gfr39cEh7Y786mUZqUVPTLh2\/HLHxr89oyA7mezQSdd9KAOArCEAAAlVHIOzs\/frgQZ0bn9aVlF8c5Adm5Zo7TU3qiBrlmtE5++DWosNj7snP34hiDzp5jdolYcaAjxj1n4yr38YHOhou6\/APXtFgmGmfWe7+XMlYBW59dDK+UH48+KGhzd8jfIDIN49qPHxwla5dPh6srybgf9XJmwLdegIzQ2Z2TpPCuDszwYYZwVIttwTr0Kj7VdLH23EG7cyIDu9v195ETILJk8Hy0fDhOvVaLv8BXspIm5KvH3vGBr\/Tg8FYsSn+4DsztDf4MdGPS31Ms4RJrJmhYBOR2xH89tZLogrO6Np7z1Eb\/8LMSI39i00Lc0sn\/AoCp4mWULOSyr5nuJh2LYdjzwrhPcPnmaK7AFrc3LGfZaUtuj\/755c2HY3esMLnl4h2\/XNS4t42czYIdN6SvGcmWjT9nnsl09yZ1\/MY11KCOm+rlkBoqpqZmsbUH9LI+zPKR2wEX\/bAOG7S3lOTkdkzfqxciEPn08XH1HmND5h7Y4uCH0ci4QeMbxGLSSd5kzrqrUg+j8K5fNnK+VuBuSPJPHCYWTmRAb+\/wc61W9bEgDF3Ir+guk4r+kuRKXCQX8QEsrVIdKR+inFRAMDCGvIQaDkUSAMBCECg2ghcv6KJM\/3hzBobF8MsOeryS6NcgYsGj+5zP9hMztxp6td48mbmfrkPg6r6YxN9rP81P3yYs6fyg8VCsOS0QWXaZ\/Zwf67EQDWYvZS8F5gj3A4\/bwa\/ephfdA2b2MxOm7H\/USFy37Gf8z8ILEEC7hr3cXfy7x2OxO7yZo7vG5zZY2b1lEDlHzLDnbZSr+UMwyY134y0KfmWHCsmy+0fkl0fE9S9KSWOpOeQtrNYaoH58IYI+LF98HwQ3OMirxP3BG\/etB0b0Tn7A2\/hnmOKUe49w7d\/2j1j2hpM7pf9FN0F1fXljsx+yUqbvD\/755c\/FF9b18aPBjNVT7gft92x\/poNUftzhff28JvYi\/R7rr9fR8ruzjOf5zHPMj4mMMXgWoo1Bm+qg0B+RqMne8IZ50Gfk9yF1s1qbTlaNFaOh0XITic\/KcWvdvLXrDeOQxqRGbThZ+6FWxpddP0n06W8r8zcMZfrn4JfQ\/2vqUHnkRg8X7uiyQtDdqphh5kW66YoGYihCZTs8Fzh0jujREf6p+PBFHw\/fdCufQ2WcLW7pQPhYCOl0nwEAQhAoJYIXMvP2D7VL3Ft2nFU434WT0ZfGgYqDgeAGQ9OBsS1cfWb2ZE+rb8RJQbX3twJ+3EL0Q8WCwPttH487TN7eOq5zDIQM8j3MXpc\/+76ehsjw0+JP9ES\/+Eg0rB+tkK8vJEEvITAkiHgDBsbd8c\/eHkzR4qZPQkjyCK6ntf0+DkNnuxXj7kO\/TJNMxPQzxpMvZZL9DtF7DPSpuSb3p9kHO\/6yCbXn026PsMv\/bexgFzfEiwzLfRlRUXkgwUk4Nrrv4Y0nc8rn\/zn73HhGa9p8oRZQRAYQNElWsHSwRu\/Z4SnMi9SdBd878odjZmRlTZ5f05oMfV8\/j6cPNYn9ufy6fznib\/p14i\/XxebO+F17PJJPz5ed66lBHTe1gyBa1emNR7ZLavlv5zhemVEXdHxcFaNSl6H8esksy\/x5\/LLLqN+hl+CmRiHZxUn+nnF5o45OJyGdHamOGDl9JD22in6ZlDeYdcyD54b11Bv0BmHg+yMTquczsQvQ2j6w+GUrROD7RSHLkfm50drzGsIQAACNUxg+t1giUH4K1tGXxreTMIBoLvZhO+jECZ0NHoz8zetxE3lVpo7QVyANnUdSdsi13w2amcVBPeMyA8HkWr5mQXhfSfyHS8hsLQIeEPHzEqZDHbCiv6K6K55068E13lkR76r4+q3sRRNrK529bydU+7MiEZPBstDwofC1H6jVL+TbIGMtCn5lhwrJvu4xAO17zP2mviORdtvm89qaAvuJMKaep\/R3iXq4Pv02JIHm96bFjd2z4idOkV3wfeu3Jg74TMg11JMObypKQKFkAN2Bpq\/7pP3kWSdSqZL9BE+bWJMHY7T3+yysexS70fvlZo\/myxU8H5e5o6dFm9j4+zVXhcjJxg8+4BFe5V7Pz7v399Mw0F2xgNJyRu270jdWvGmgfjGnelV5FMIQAACtUTATBstmBdFJU88qHizu2jbdN9Phjcod7NJ29rY74yTnEKauBHdOnNHCpbydswZ3NQP9nsuJA19\/zCbbvwUceUDCCxyAn4JxdF3B+1OWKEpY+vtljvuzylnt4wtzOoJlru06HDiGvP9QZhP6gC2kgf4jLQp+ZYcK4Z9nmvQRJ\/p+4ww\/tAib\/fqrV5Ge2cVeHZEXebH4\/2HddiGiOgvzGA1YR1s+IcbuWdI1+zsIff84nVX9KzhfgzxzySmvD5t4p4Z3p\/97DZ\/X44aq76+fnm0P1\/Gc1J4rqTOfT7ub\/o14k2whZm5w7WUgM7b6iSQn9CQGVefmSje7coEbD8X\/aHCXd9u6X+sQtevBTMMbRdRIp1fful3qMzqH+Ty8OliJ5v\/m3maOybsQRCMz0+PDEwb32kUBgVB0fwe8pFBdkanld4ZuRtA2JH6wGqRqPaOwczwcfWfHNToh3Fzaf6IOBICEIDArSTg+8tEwHhbBB9kLbIUwg8IY2v4fQD8yFIrH6y0qSURa+KaJmzwt0jcmowbkb8Bhia9LZPv9wtLGdL68eCzlBg6\/lyJ+D4+\/kAsYKo53ycTGnz7aOEmnVr\/+D0qXt5b2ZacCwJVRMBfa3ZZS\/G16Hfps+O6yMNn+rVrzNMWu0SmLHMnGQcnFYsb6yXT+nJHHpzT+pjMgMwJc8fHQ\/DhBQpFmdHIsX7l3hnVDEPIApab9qoSc8cHIg4CDpvgx2YH37aBwu5SZd8zfDyM2D0zcs\/wpol\/QGuJm0jh7ozhM0nE3Encx4rMHRMzzv04Ht29zW5a44KwHvVB8TKekyozd5LXub9fL4y5w7V00y4OMl5IAtfGddQYw5GYwWH2YTBzP1v1msaPmHtb1lh5rnSSNz3DuF4p97Dg\/P5cxeP9a5cH1T+Q03xWIs3f3LH9oNt+NhJLZ\/qdYD3srt4hjdrAZCPK7W\/Vrt8HuyqEg+yMTqvkDTvSkYZR7Xd06Pi5URthf+RkR7CVZXRrzrD1eAEBCECgNgiE\/VvTdru1dzBVs7A9Ymz7YU0q55ZMtLT36OjJozr8h+1q299hf50P4+h4c2dPhzre3KWek+c0Oj6iwTK2NPbUbsTcmTkTLCdr2dev3Mlzhe2T\/U23aZd6BnIaHL\/iTud3JmhRe89gsJvK2JD67faULeoa9ukKD5mm\/oMXxjV67rg6duxS14Fgh6DwvuMrwl8ILEkCbnaOMXfSfpW87OIZRuPoSMqPHQ4Cve477nY1GtVQn4m7E4z3Sps7\/mG2RXv7csqdi+4+kmyEjLQpA+OSY0X\/cO6zT5o74e6vTdq+\/7jOjZldmsxYdbs1q3adKFVGnyl\/b5yAM3dsvIkgjEN8WUJhedy1i\/1Wg4W28f3+Lh3\/k3fiyr9nBLv\/Nil+zwhi9hSCA3tDyeyu06H+kzn1d7WqxW1n3BR5JjFx6+zDY\/I+lvKsE97fW\/bqqH1+KdyHY4ZjyrGWub8ekjpPNEj6PXeBzR2upQR13lYrgdCUbWlVl1labGbyDBzW3h1B2JgWP3PdVGDmXDBLsGm7Oo4lxspRUzhMt0s974xofHxU544VvIgJHzfMX7ORHyhCTj6PlnaXx7hGz\/Sr3ZlRI7NhyrJf3JC5Y5ZnBVvoRmbkaEajfe1BwGP769B27T05oWm3dV84yM7otEresKMdqRlw\/Gkw3E8+mEGUspNM2ShICAEIQKB6COT\/fE79fwgeNvwMySZj9rx9TrEdYk2RZ0ad6REMTtv7RjTjZ1eGA8DCr6TT00PqcTc0k\/f2\/YkduDJuRDdi7pj7ReHeEN\/e8dr7g+rw5YnMGND1GY28vTcw7e39JNjCsv\/cdGR7SqkoXUu7+t+b0Yybahved6qneSkJBG4LAT87J3UbZR9YvSn5a\/81Tb7jBqz2OmxRa885zYwfL2PmTqJ\/SjOVoiSifZlPm9IflRwrhn2ey7jI3DGf5zX5TpeC4OzB4L7JDPpPpk\/bjxaR1wtFwN2TfN9e9NfNBv1kQkffNL+6x2fQyC\/T+n1Ok9ddmcq9Z6S1\/469On4xsbz3k0kNOtMvuFcOajLvyx2Z\/WL2JUi7j2U86xQ\/v5h7+4hmfD1MdTKOLXfmTvo9d6HNHVNQrqWFuiLI5+YSuDKeS\/gGpl8x\/f64rkSvPVOMmZHEGNzc94Y07Q0bX9S0dF2mn\/AJIjP70syd1HM1afsf+nVu2hvXkbzKeFna3Ckjg8wk11zk+\/mVKzPbtC+CNbL51L3q09LzGQQgAIGaIeD70nw+bmikVeCTvK4lb1Bp6dxntu9M3qhKpF+Qr8ya5YxzmvKk3jL8Oud86reFYrl0lTAoHMwrCECgJAF\/HWZcvyWPNV9W0j9VknbOE5dK4GIoZPU9pQ7lu+ol4LU61z1Dvv3nuLeY+\/AcSTyMzPuYTxD5659fbuo9y7CY7zUbKevcLz3LjPv43BmQAgK3hsAnfne+Mi5qn3aupOWmK1VDn8cNXq83z9wpVXi+gwAEIAABCEAAAhCAAAQgAAEIQAACEFgQApg7C4KRTCAAAQhAAAIQgAAEIAABCEAAAhCAwO0hgLlze7hzVghAAAIQgAAEIAABCEAAAhCAAAQgsCAEMHcWBCOZQAACEIAABCAAAQhAAAIQgAAEIACB20MAc+f2cOesEIAABCAAAQhAAAIQgAAEIAABCEBgQQhg7iwIRjKBAAQgAAEIQAACEIAABCAAAQhAAAK3hwDmzu3hzlkhAAEIQAACEIAABCAAAQhAAAIQgMCCEMDcWRCMZAIBCEAAAhCAAAQgAAEIQAACEIAABG4PAcyd28Ods0IAAhCAAAQgAAEIQAACEIAABCAAgQUhgLmzIBjJBAIQgAAEIAABCEAAAhCAAAQgAAEI3B4CFZg7ec3Ozgb\/rt6ewlZ61tmzAxp4b7bSw+ZMn7+c00BuQvk5U5IAAhCAwI0RyNdYv3tjteVoCEAAAhCAAAQgAAEISLrqvIfZeTx152\/g2BLwKxmXV5K2xCkr+qoMc2dWQ20b9FR9nerqCv9WPL9TQx9WdC6XeEitJp8dQ\/M5uPxj8jltteVt1cKeaUIdvzYc1ql7svzikBICEIBARQQ+zKn11ysi\/W69nlq\/W8Np5vpUTq3P1tu063qmSp9mslvr6urUeqZ0Mr6FAAQWGYFK+olFVvW06gztMGO5hR4jpp2Jz0oSQJcxPOgyhoM3S5bAhAZeaVD9vLyHWeV2rNWKyLH1Kzdo9\/BcBlFeuVdLjKUrGJfPvrtT654s+CZ1dfVqeKVbY8kxvBuTRz2W8PU8vZI5zJ28hnasUV19g7buH9KE+wV54kyHtjbUq65+q3LJQs4pwltk7kiafbdDHe\/ehJk7F3vV0TfGzJ0525oEEIDAvAjkh9W6uk71z7Yqdzn45WFquFubzWcvdGsizHRWYz2btaauTisaGrSqrk6YOyEcXkAAApbAPPqJJUCOh+jb3cjoMq0F0GUaFT5bWgTyGtq2SnX1a9WamwhWDV0eUPPqOtWtblVpjyav4TeMdxE5dmpY3U3msw3qvpxNMv9usx1HG3OlaCxd9rhcyp9t1Rpj5mzr1dhUMIafOLNbG+rrVP9qLu4fnGlVXV2Dmg\/llMsl\/l2cn4dR2txxblJjX0rmH\/aqMa3y2czcN7fO3JmzKCSAAAQgUIUEZo9sVl1do3qTsyMv7lZD3SrtHHaFNjeF+gY1\/3FKcv110Q0pWT9m7iSJ8B4Ci5vAfPqJxU3E1o6H6NvcyOgytQHQZSoWPlxKBN7bbc2RrScSM20uBzPP1+4v\/MRZhGV2QJvr6lTsXYxp9zN1WrXLD6ATR14dUvOqOq3d16HmFH+j7HG5ZjXw2zrVvdirpHsy29eouroN6o1MsJ86tEF1dVuVS1Q1UbqK3pY2d6yblD19364j8zN3pga09ZkG7T6bPP+wdj\/ToK1HfE0K5k7+Yre2PvuUnXK1YnWjWpOzYcI88xrr2aq1K+tV9+QaNbYNBcA+HNLOFxvskrEVq9dpa1+0safsdK6Gt+KNOJXbrc3Pr7FTtepXNhTyihR79r1etbp8zfnWvRqfRjX8VoMaXhmQr5E\/tDjvnKau+W\/N30iZLvdqqyuHLXtP8UygucoRzTn2+tqUcm9t1rrVZknHCq15frN255KllYrL67hKyp9oVsMzjer+71jO9s1U32Y1PNM8j1lbxXnxCQQgUExg4o87tbNtIDJDx6VJGjOTYxrzd495mDsTf2xVo+0n6vXUs1vVnRajbHZMvTsa1WD6X9ufpKQ7u1sNz2zVQLKbCftwV\/7w\/ayG32rUGjNl9fnusC+dd583ldPu364L8qt\/Sg0vtqo3rS5Xg7rY89Y\/pbW2b4\/0y5GmSC2LZx1Jx0sIVD2B+fQTplKxsUS9nmpo1M602dDRPqLU9VdmunKuvXAcNjus3W68ljWmk\/Ia60v0dRfNzPSUZVnRMvr+7uICjrqrXiy3sIA3WZdRHVlt7Ogt3C+j1Yy2eQn9RvMLnw0S94SbpcvUc\/vnr2hdeA2BRUBgeJeZtZO2ZNYsm4qPG4uqe3lAO9t2aqDo+XVK3c9nhYVxs31W79SwAp8i+UNp2eNy8wxtVjqlXZ\/WV4mHdZnY12DrGncrimpV0QelzR3jftXXadWrAwmTIuUcyYeOMEkSkjN3nt+gDU82qPGtXuVyA+resc4aLmt2DBWmK7k8G3+7WQ0v7lZvLqfeNp9up5pXr1Vzz4ByuV7tfN4YGfVqDq2v4kY07lh93QqtazPnzCnXF6yHi06RCqdSvdKhAZPmj24J2q87wgctOyCIPJCYqkSO09YAACAASURBVE70uLx3dNvjBnpag7V2q1s1FDawK9OLm7V55Tq1urLvfnGNLfvmI4W7RDnlCBHHXkyo+wWzZC7Jtl4begrm15wsXMyiYnfUxRz67UCRIxkrBm8gAIEFJ5DPNau+bq06im5aqnjmzuZXt+qp51vV\/UfTF+5Wo1lqm8z76lCwPKyhUbv7zHTRXu3eZNZAx\/sTpdywbOWT9wVvQD2\/Tit+vVk7e3rV3ROYyvPt84LjzBK2rerwZbR96prCDCdTGFeXuicjfe+mBq14oVXN\/xa\/4efPuCm1m4L7Tshnjim9C97gZAiBhSbgr8G5YnNpSr1mLPHkOu2015Uff9Ur9mtqZh+xRq1nIqZIxvVXXxdPV+61Z8dh\/7ZZmxsiY53frbU\/Fq6J\/TLrwguYsZ8bn\/W+1aiGJzdogxnoR2Pu+Gn3DVvVYfrF3IA6bMyHjD53odtmKee3wLrM1FFsTJ59X6gmXc733riU5UTda5mAuffUqS7jOXOqZ53q6porj6ebz6m5vk7Fz7WShndqjbkXnTX3rKRvUZplyXF57FC31GyVMZAK\/3lPYWJqWL37d2rnW90aGE7+UlpIX86r0uaOMS2OBPEc6p5cq81t5oQTysdmo7jTJAfx4dmTkJy5k3yICA2SNdr9XjzP+kQDj+1psGZIbIChYLpVIVBz0tyZULcZwG9LhFce7lbz\/sIMm6Ftdar7t2hMC0kf5rS7reD4+4YI0f93h9aaKVwHCuaJrcFUrzXHCgMNVyYTjDm25m8icBMjhlE55QgRR15M7F8bBHuO5S9N7DOfb9aA9Y\/KYZFX7nf1qouYWvY0tq5REy1ycl5CAAI3j4B\/iEr0h+EJyx0cu3Rmxkysx7qa01Zj5ocPRq4PWNUcMaiDsw23mbXLmzXgl41VaO7E4wYFec63z7MzEF\/tjdfF3Q\/q3yjcQsfeSl9vHfSNEXPHDQBWbYv80GCKeG1YO03Moyz+YUPwAgJVTKDcfsJNf29+N16X4Z5mdYQzgV0fkXxgVnIQm9WXuOCVfrBbwbVnx2F1q9T8bsRA8ueN\/uLrxizRH7dsjdy4LWbuvNucMn6aVe6tnekzAeNoeHcjBBZSl05HsR+LTdncsotVbf6+UBu6nO+98Uaag2MhcPsIJJ\/fEyXx\/XRFmxr5GMKRcWuYbTBpoTDmS\/oWYcLiF3ONyzWrMTtRpFut659Sff1a7YwFDHJ1ra93q5gaghnoJo7mix3FwZeLS5D6yZzmjj3qw2H1tm0OlkXZyNMrgunshYkm4a\/GxTuwJCE5cyd1gDyk1vo6Nexzjxyus4+bOFLg2sWnNZlyxk2XpDicE\/h8hybSzCmHZ\/iNetWtalYuWrcEuvh5jHESTKlK2Eb2KDu1zA9c5MqUUveJA8aJLExBK6cciWIZe0wdz9SpPi269rVgK\/tgGFQeC\/NrfH1dQ2yWgDWP6psXdG1gcT34BAIQiBNwM\/KKHqIiqcodHLt00ZmCQS6uf\/IGuJu9l5yaatO6Nc1hHhWaO8k+3eQ5vz4vUv\/Yy7wGmqJTd4e1c1WdCoP6SGJXF\/\/DQP7E1szdEIM1194kj+TBSwjUCoFy+4mpXm0wP1qVim3g+oi061n\/3VGID1aqL7Fb1QYjk0quPTsOC8dWEfiJgX\/2+MzFRYiMu3TWjHlWqbnUADByKl4uIIEF1GWgo\/QYFlYPXjc1osuFvTcuYJuRFQRuCoFh6wX4MVnRKbLGm0UJCx8Eq2vis0T9t\/b5O7ZBVNK38CmTf8sYl7tZQMHuVyasTGGiSJDbrCbezam3L6epyO8UU39sthulrIquZkqevsT78sydSAb5D8eU80uO6jeo1ztnrmMu19wp\/DocydybH96cyMhzfuaOZKZpNpgt3U2shd82q6NvWBPhkilXjsu9arRbl63Qmhe3andPTmMfRogXmUhJUylaH0l2oOGDJyUNp0LaoE4Fc0dllKNwtH9VriDLZKHggSg025x5lPqA5IvAXwhAYIEJ+F8cSkf5v\/GAyq5\/8jMIM\/rfoHLB7L9wZkzWzTaZR\/J9lNS8+jyXwYdjGurr0M62rWp8psHFB4qaO6X6xsAU9wOJor44VkYTzK9erUWx5aKJeA2BKibgrsFU0zZW7LyG3gi2oa1fuVabt3WoNzlz2+W1YnWDGsx1F\/3XEMRTtGPCUtd95JyVXHvJH9nCbBJ9UWY683OY+WEuau5oQr0vmiX+dTJxILe+1a3cxdlCqIDwJLxYcAILqMtARyu0JqpH\/9rGjnNj7VrR5Y3cGxe8ocgQAjebQPazsj1zwsCfqzR+iWbR7E1z4GSvNtTXK\/yh0mZWarzoz1bmuNwnN3F4Joe024ZNiXgnke+TL+MrbpLfln5fsbkTZuemN4aD+8xOMgkpeF8wDMIcbcBhG+zI\/3KckWfQcVc6c8ed58MxDexv1ubng0DMJkDoureG4zfv\/JSGenZr64t+epTZm74Q3DQ5WEi+j9YoHosiW7Cpg5o5yhE7j32TZF2cIvZJGSxiM4+iv8TFMuINBCBwcwjkNbzLxJFI\/8Uhds5yB8cZ\/aoJ+G7737LMnURflnigCsuVPFfyfZjQvai4z5MmDjW6APnmAXSndu7vVW54SjmzxNbXpeQa6grMnbnKn6wP7yFQbQSchuc2d4KCz14cUMe2zVrnzBoTg2e3n1bu8lr7WxMAPv2fDWpZ5nWTOg7y\/BJ5ZI67En1RZrpUc8ecLK+pM93a\/WqjGmyw+TrVN2zVQGKpuy8WfxeIwALqMtCRCSWRrslws4KEprJqUhW6nMe9Mas+fA6B6ibgZlWmrHIx5U6udClVl\/zwTq2tr1PREk17kIsrF44TfU5zPUtXMC73Wfq\/ReEP\/Bcpf+29LLI7bkqSrI9KmjuzF01AubGMwLmJae+uk0yuzy4OTBRAq0vu825LGMwUmcswCjraeZo7MRKzGttjlkPFlx7FkhjL6chWu++9n3qcHCzEDJDEwYEIfeCnxANRJG3Jm4dLlyxH5HD30i09CGNmFKfI\/iSDhV2XHojL1vOZQmDp7Lz4BgIQWAgC4VTStB1qkicod3CcOaBNmDvJpVex8w0FW0X6OGP+gSr5AJQ8V\/J9LM\/iN+X0eWYpb2GtdCEPG6cgvGmXvyyr5NIr\/4tRsp6F0\/IKAtVNoNx+Iq0Ws2PabYIQ+3GA6yP82CjtEPtZyb6kcFQl115yHBbm4vsiN6s8WNISD2AZpHW7rsRm7oS5FF6YHf5W1Sl9zFpIxqsbJLCAugx0lL4sK1bKGtbl3PfGWE15A4GaIhAsp00LAeKMn3BsV6Jal7u1wRk7qZFWXJ8TLJkywfXT\/yVXJM09Lg\/CoMzGF\/24giZ9gBJpb2C8WdLc8e536s4sRe5TMNhPLtnJv9tsjZHCr0TO3IkG43RVDtJGgvVmPAjMy9zJTym3v1ndPo6a14OdjeK3e5\/VcM\/u4m3DE+tyiwYVwzu1qiiwnzlBEKSp\/nc5NzMo2ai+ED6OkF+WVV45zNH5hHqG21bZmEGFHbqCc+RzrcFWxSYAalksfNlcoKm2DhuzIjXKuE\/KXwhAYMEIzJ4wa25XqPFQLOxxdv7lDo4z+tWimTuaVe+LweyXZAlMTIPYrl0u+GpjX\/wWGpjbvn8t7OiVvFlK5fd5cQAZv7Dkh9RqHsgiA4DhXekBlcf2mGDzkYDKH\/aqMS1Avlzw12SQ+XiBeAeB6iZQZj+Rn8ypY1t3bFcPU7H4Uqagj0gNMn5xQLt7hlwcgey+ZOJAoxqe3R2cp4Jrr2gc5qknzJ1gJ5Nk4GWzUUawG2x0WdbscLd2v5VTuFmGzbOMrXf9ufk7fwILqUuro+RSi6BoY0d2q\/vdKTcmrwVdzvfeOP+m4EgI3HYCLuB90UZF7vPYWNPEbUsaKR\/m1LzaBCVObrYRqVl+SsMm2HHRv912DNiwLdhZe8xvHCKprHF51sYA5tRurFx4lg5iDRf\/QJnYbCBS7HJeljR35LaFrKs3W47nNDY1q9nZCQ2bbXNXm9g10XVjLup8ZKtxu93kv60NdpIKt90MBuMNL2xQQ0Ozei9OaXZ2VhO5Vjt1qv6F3sKNNeMhZF7mjokfY8q8unDO2cs5tT5rAii3asgKwziCZhvxDdp9ZsKWa3ZqWN1NZqvywkyh4kGFP26tWnPuuMtD2m3Wbse2zi3f3CmnHMHOWPXxXbrcgKX+2VYNJNmGs6XKYVGQz2xfo3M0CwwK3\/IKAhBYaALBGuE6PfXbjpQbT87GgSg6Z5mDYx+bp9hgSczcMSew20PWaU1Tt4Zt\/z+lsb5mG7ssPs01MIHr6hu0df+A3UK4e8c6PfXrtWqoK8\/cKafPK6qzN6CK+vUGrTH9fcTcsVuhm+3e6xvUaJZvte3U1vVPacWrW7U5au6YahsjqG6NNvcMa2p2VrNTY+rdZuKPlLE8rriQfAKB6iFQbj\/hr\/3f9bqxX2GcFgvy6NM1dWjoshkjzmriTIc2m53lXojsyFeUbkrDPcFurGv9JhoVXHvF4zCHOGHuGNPabuleXxifTV3sVXNDgza8EI+5Y2Z81NfVa8NbQ5ow1\/1soYyFHyirpykXVUkWWJdhH77ft+WEhvYbvdUrFnuj6nXpny9KP5csKi1QGQiYnQ93uHGYvYanNJbbHcTEXR2ZiemMlLonm91zfLArXqsZ\/\/2vzeooMm5KrUjy2NN\/NKxkXB7M7jEhXTqUs8\/iEe8ksTGKT7v2jV4Nm3vo5SF1vGLGm+kGtS9lqb+lzR1z5OyYul9da2MaFKYs1eup9TsV7obpz3B1TB2bgiB6Ju2K53dq6MMkJP9+QhNHtgYBju1UKAOhO77t14KaO+aXmiHtfD4IlufrsuLXW9UbnWJ\/dUzdFmphelb9yg3afbbwi3T6oGJWQ23rYpyK8vYxLXzAaM\/NLP3qie+WpTLKMXVoQ3rjX+7V1l9H62l2N+uN7xJWDgtfPvdrWt2LvRlL9HxC\/kIAAgtBwPYxGVNEY7NMoicrd3Cc0a8Wz9wJMs9f7NZWY4r48tQ\/pQ1vDRf3BR\/m1Br2O64\/v2gCEJdj7pgb8tx9b7S64etkX2YMpiMTid0TXeprZganC7r8zDptfmtIs343g1i\/nNdYT\/T+VKfkfSA8Py8gUEsEyu0nzPDv3Z1aZzeY8OOhlLGEmQyc7CPqUsZzJr+zu7XBBrR1+aX2JeVde+njMCke59A1TFHfskabj0xoIjnuUvG5zQYcqf1dLbV5LZR1wXWZ1pYN2tozFo+xWQu6LNIv96NakDRlvFECyedq4z3s1nB0IyQ\/CSVq+FiD39+z0v76VTJZ5fM+RXwOZ2Xj8rzG+lrj97u6lJ3GbRGCvmpt5F5rxps7ywnHkFGFuc0df6DbStv8KlM0\/cmn8X9N2uQUKf9d8q\/Pt9z0yePn8\/5q8OvSbFQgyXzs9pwmXYUF8\/UplXfyXKXez1WOEtu6y9UzX0aakixKlY\/vIACBJUEgb3\/JLmPnmPysSvY5c9Gaq8\/LOD4sX6n+LvXY4EaevoOjWw9d6X0g9Tx8CIHaJFD2tVXOmMMuJw\/GYKVHVzfh2nN9y9z9kz93Gf1dbTbpoih1uboM0pVWmwES5leSjtfG3PmVzCb6Zbm6nOe9MXoqXkOg9gi4a24BL7lbysDfF8s4abl91VxZlW\/uzJUT30MAAhCAAASqlcDUgJpf6Y7PYDRlvbjbLh2Ob4VZrZWgXBCAAAQgAAEIQAACEEgngLmTzoVPIQABCEBgMRFwOyfUNzRqZ4+JC9Srjm2NdmlwLDbIYqozdYEABCAAAQhAAAIQWDIEMHeWTFNTUQhAAAJLnMDsmHp3NKrhmYbg3\/ObtdPs6FPxUq4lzpHqQwACEIAABCAAAQhUHQHMnaprEgoEAQhAAAIQgAAEIAABCEAAAhCAAATKJ4C5Uz4rUkIAAhCAAAQgAAEIQAACEIAABCAAgaojgLlTdU1CgSAAAQhAAAIQgAAEIAABCEAAAhCAQPkEMHfKZ0VKCEAAAhCAAAQgAAEIQAACEIAABCBQdQQwd6quSSgQBCAAAQhAAAIQgAAEIAABCEAAAhAonwDmTvmsSAkBCEAAAhCAAAQgAAEIQAACEIAABKqOAOZO1TUJBYIABCAAAQhAAAIQgAAEIAABCEAAAuUTwNwpnxUpIQABCEAAAhCAAAQgAAEIQAACEIBA1RHA3Km6JqFAEIAABCAAAQhAAAIQgAAEIAABCECgfAKYO+WzIiUEIAABCEAAAhCAAAQgAAEIQAACEKg6Apg7VdckFAgCEIAABCAAAQhAAAIQgAAEIAABCJRPAHOnfFakhAAEIAABCEAAAhCAAAQgAAEIQAACVUcAc6fqmoQCQQACEIAABCAAAQhAAAIQgAAEIACB8glg7pTPipQQgAAEIAABCEAAAhCAAAQgAAEIQKDqCGSaO0+9+V3xDwZoAA2gATSABtAAGkADaAANoAE0gAbQABq4tRqo1D0qae6YzGjAW9uA8IY3GkADaAANoAE0gAbQABpAA2gADaCBpa0BzB1mHGHIoQE0gAbQABpAA2gADaABNIAG0AAaQAM1rAHMnRpuPJzZpe3M0v60PxpAA2gADaABNIAG0AAaQANoAA0YDVT6H8uyMINwc9EAGkADaAANoAE0gAbQABpAA2gADaCBKtIA5k4VNQaOK44rGkADaAANoAE0gAbQABpAA2gADaABNFCpBjB3MHdwW9EAGkADaAANoAE0gAbQABpAA2gADaCBGtYA5k4NN16lTh7pcX\/RABpAA2gADaABNIAG0AAaQANoAA0sPg1g7mDu4M6iATSABtAAGkADaAANoAE0gAbQABpAAzWsAcydGm483NbF57bSprQpGkADaAANoAE0gAbQABpAA2gADVSqAcwdzB3cWTSABtAAGkADaAANoAE0gAbQABpAA2ighjWAuVPDjVepk0d63F80gAbQABpAA2gADaABNIAG0AAaQAOLTwOYO5g7uLNoAA2gATSABtAAGkADaAANoAE0gAbQQA1roDrNndcf0M+3Bf9+8cbic9RwSWlTNIAG0AAaQANoAA2gATSABtAAGkADaGChNFBd5s7v7tXD9X+hrz3wGd0Z\/vucvrvy66rfVu2N\/i395B9Nue\/W4\/Nx+7Y7M2s+x3IMDjMaQANoAA2gATSABtAAGkADaAANoIElq4GqMXd+0Xi3vv39wNS557E79cNffUUP\/+qv9L3HPhcYPT\/6sn66tZoNnhszdx7\/pan7F\/WTf6\/mOlK2hXJVyQctoQE0gAbQABpAA2gADaABNIAG0MBCaaA6zJ3X79OPlxtzY5l+uOGBhNP2HdU\/8yU7m+drT35DP69aJxJzZ6FEST50cGgADaABNIAG0AAaQANoAA2gATSABsrXQFWYO\/\/87Bft7Jz7fnmffpFq3tyvusdSZrZs+2v99Jdf1rcf\/qzufOBzuv8f79TyF74VN4d+9w394NHP69v\/8k39ounr+sHfm2Vfn9P9\/\/QVPd5iQD2gx3\/l8vjRMv3Nynv0szDOz7f06FOf17cf\/ar+4c379dgvv6z7f\/QZ3fmjZfrbX96TWCqWYe688S099i936m\/+zsxA+qzu\/fs7tfz\/v79QT1c+m6\/5\/hFzvrv06O8ijZis5z\/drZ9sSppgkfSpDPmejgENoAE0gAbQABpAA2gADaABNIAG0MBi1EAVmDsP6NEnjXHzedW9UkJkPiaNN1623qO\/NUaLMUTq79LDq+7Ud937b6+OmET\/\/nX9jYnf80936ns\/+gt92xg91mj5jO78u7u1\/JfL9LWHjaHy+cC4eeAz+tr\/vteZL96wuVM\/tum+oO+tukt\/Gzn+8e2+zD5tJObO9vv040eM8eTK+Ku79KA1oj6j+72RNZe5E9bzc\/ruk38Vq+eDz94fN7IwdeCBBtAAGkADaAANoAE0gAbQABpAA2hgyWmgCsydb+rHNtbOX1UQiNgYQsY0+Uv98IXIDJY37ledDWq8TA+\/7EwXb+58\/0v6SRiz5wE9utIc\/xl97cl79M9e+Nvv1Q9iZfGGTZCusCTsO3r8l8vs8ff\/n2860fi0BXPnH\/6PSfNZxU2YB\/TYqr+0ZQ\/L+OZ3lR5zx9dzmX7c+J2COMN6flk\/tbOPvMHE38XowFIndI0G0AAaQANoAA2gATSABtAAGkADpTRQBebOffqx3RmrYIqUKrD9bts39D1zzGP\/Uz\/zxoz7+4sX\/iqIz7PamS7e3FnpZ+MEgvBLwX6wIWKavOkNGh\/Y2L9PmVX0+r36gSnD8q\/oH+y5fVpfj2\/qYRNH6NHiMj71yv\/Utx\/4jO4LjaEMc8fXM1F2w+AXG+6y5tL3no+YWwkWc3IkfcEwgwUs0AAaQANoAA2gATSABtAAGkADaKBGNVAF5o4zQR6oYOZO493W2Ljzl\/cVC8+bOf\/49WBGjn+fSOvNnR83Rt0\/b9AkzR1v2ETT3q+fPGGWhfnv\/LHu\/e\/u0YPG\/Pm+WwpmloP5f4+47d4jZUqdubPp7mBb+B8tKxzr83BLw\/7m2USMoRoVIkZUVFu8Rg9oAA2gATSABtAAGkADaAANoAE0UL4GqsDc8TF3\/rKwlCrNoIjG3KkKc8ebOd6U8u+dueNNpeVfctu6m63dE\/+eL8TMSTV3fD0fu7P4WJdXXSMzd7jgy7\/gYQUrNIAG0AAaQANoAA2gATSABtDA4tNAFZg739XP133ZzsS5b1UkEHLM4PlrLX80slvWVhckOW1r9Je\/ovvMjJlVblaPN1kis2SMkCubueNn8kQFcJ9+aGfm3J2xLMt9\/8TXi5aOpV1IqeaOr6evS4xJtCy8TmPKZ+gCDaABNIAG0AAaQANoAA2gATSABpaCBqrC3Hnq9W\/qx38X7Hz14NrCbJagAR4Igxd\/LYw947dG\/0Jih63v6HEbrPiz+uELLpbOgpg7n1EhcHJwYfzs2S8FsX2Kdtbyy7S+o8f+twnanAiGbOLlNH5VP1j1FUVn3QTmTjK2j6tnLBi0O\/9zd+sHv\/qqHn0lGjOIi3YpXLTUEZ2jATSABtAAGkADaAANoAE0gAbQQFQD1WHumBkpW7+uB+1OVZ\/R1x42W45\/RQ+v\/HK4PbnZtryw7bgxSO7W\/XbmzBf0w2e\/ocdeuEfLV3w+MFx+FpktsyDmzhf14M8+p2+v+Kp++sI39JNfflH32HNHd+BKLMuK1un7n9ff\/ss9euyFe\/Xov96lb5t6fv9L+um\/F8T4s3\/9gp299LW\/v0sP\/+rr+ofXg+\/Cev7oi\/qxree9+umv3Pn\/7u4wXbRReV3gCgtYoAE0gAbQABpAA2gADaABNIAG0MBi10D1mDvGDNn21\/rJyi8ExokxT6yB8hd68Ff36p\/fKBbjzzd9VQ8+HGxpbtM+8Dl9d+U9+lk07YKYO3fr8ZZ79cNHCuf62iN36SdN0VkzKeaONXju0Q8e+1xQF1enex5LHmvqdr8efSowp8wW79Ft0ovr+VndW\/8VPc426MUBtQ1z\/sEADaABNIAG0AAaQANoAA2gATSABpaQBqrL3AnBf0c\/3\/aAfr4tap5kP7T\/wqZ9QL+ImjphXtnHzW0CFBs2wbnKK1csfxcQ+ufb5yjPG99RVhpfz5+7WT2x\/BekvnOUjXPQOaIBNIAG0AAaQANoAA2gATSABtAAGqg6DVSpuVMtJkOxuYOhUi1tQznQIhpAA2gADaABNIAG0AAaQANoAA2gAaOBSv+7I+sAn9niEhbmzuJqTy562hMNoAE0gAbQABpAA2gADaABNIAGFp8GsryarM+XmLnzgB7\/16\/o4V99o6ztzLlAFt8FQpvSpmgADaABNIAG0AAaQANoAA2gATRQ7RrIMnGyPl9i5g4CrnYBUz40igbQABpAA2gADaABNIAG0AAaQANLXQNZJk7W55g7BI6qusBRS\/0ipv7cyNAAGkADaAANoAE0gAbQABpAA0tbA1kmTtbnmDuYO5g7aAANoAE0gAbQABpAA2gADaABNIAG0EAVaSDLxMn6HHOnihoPZ3ZpO7O0P+2PBtAAGkADaAANoAE0gAbQABpAA0YDlf6HuYO5gzuLBtAAGkADaAANoAE0gAbQABpAA2gADVSRBjB3qqgxcFxxXNEAGkADaAANoAE0gAbQABpAA2gADaCBSjWAuYO5g9uKBtAAGkADaAANoAE0gAbQABpAA2gADdSwBjB3arjxKnXySI\/7iwbQABpAA2gADaABNIAG0AAaQANoYPFpYEHNHQSy+ARCm9KmaAANoAE0gAbQABpAA2gADaABNIAGqlsDC2buVJoR6SEAAQhAAAIQgAAEIAABCEAAAhCAAARuPYHM3bJufVE4IwQgAAEIQAACEIAABCAAAQhAAAIQgEClBDB3KiVGeghAAAIQgAAEIAABCEAAAhCAAAQgUEUEMHeqqDEoCgQgAAEIQAACEIAABCAAAQhAAAIQqJQA5k6lxEgPAQhAAAIQgAAEIAABCEAAAhCAAASqiADmThU1BkWBAAQgAAEIQAACEIAABCAAAQhAAAKVEsDcqZQY6SEAAQhAAAIQgAAEIAABCEAAAhCAQBURwNyposagKBCAAAQgAAEIQAACEIAABCAAAQhAoFICmDuVEiM9BCAAAQhAAAIQgAAEIAABCEAAAhCoIgKYO1XUGBQFAhCAAAQgAAEIQAACEIAABCAAAQhUSgBzp1JipIcABCAAAQhAAAIQgAAEIAABCEAAAlVEAHOnihqDokAAAhCAAAQgAAEIQAACEIAABCAAgUoJYO5USoz0EIAABCAAAQhAAAIQgAAEIAABCECgighg7lRRY1AUCEAAAhCAAAQgAAEIQAACEIAABCBQKQHMnUqJkR4CEIAABCAAAQhAAAIQgAAEIAABCFQRAcydKmqMxVaUqxfPa8+xy7o6V8Wuf6Dj\/Wd1evL6XCn5HgIQgAAEIAABCEAAAhCAAAQgAIEEgXmYOxf03PpOPdI5lciqpYChrAAAFOBJREFUyt9ez2v6gxldzVd5ORdN8S5ry8udumP9Qb12KVKp2RlNz8Qb4erAEd2xvlN3vHEhknAxvfxUVz+Y0fTHCfPq0qAeWd+p53I3t659b3TqjqZBRZvh5p6xkLs99\/oB9RU+uuFXNyPPGy5UZgZBf7l4tZ1Zcb6AAAQgAAEIQAACEIAABG4hgaVj7tyiB+lb2HZVf6qr509ry8Hx2MydVKPh+gfq23dKfYt25k6GIXqLNJnK\/Bap52YYMTcjz5uHA3Pn5rElZwhAAAIQgAAEIAABCEDAE8Dc8ST4e0sI3E6j4ZZUMPUkmDvM3Fmss9JSBc+HEIAABCAAAQhAAAIQgMAtJrAA5s6U9jR366H2i0VFP97erYeaz4TLQcL3kxe0ccsB3bW+U\/e8fESvnf9I0kc63XlEj7zYqTs2HtBDW07o+AeRZSynT+ihTf3aMxmkW\/4bn25Ae0Y\/LTp39AN73sYDWra+U3e92K2HNnVr9aHIsrL8lLra+4NzmzI19mrjscj30czC15e05ZVuPfSfF2IzU+zX10e1cVO3ntgTYfLBuNre6NVDptzrO\/Xg5iN67exsmJt9EdYx\/rEmz2j1pm69dNp97tONX1bb9m7ds7HUkqZI+0S43\/XiQa3cN6rpCOIg9+uaPntaz205EOS78YAe2T6o09G2sAkz0kWqFLa3Se\/q8KApq2nfTaYdTuh45LuwfkFBpEqYXZrV8XbH1+rnWJkzgT7VpWMntHJzoMdlvzmgFW3ndSm2cizCcPS0Vru0huHqzvjMJF90\/\/fSoX49tKmQt623v1bCmTufaqR\/QCuM9v01kdSGyTDKw9ZxQG1p6fzJ3d9UQy2h+Qc39+ulNM0n0plr47mD4ym6+UinDybqcP4jpc6ySeSZeu4SGg\/znB3Xa17\/Gw9oxRundTqiv6D6GTot0rOky+f10n8cVKjRLcV8vaZHjA5eDvqUcFndbHCN++OXm+tmlpk7CTnyFgIQgAAEIAABCEAAAhC4CQQWxNx5rSndXEg+VNr3m3u1clO3nu48q67+U1q9yTzs92rj7w\/qwS0n1HbsvPbs69dDxgR4+ZRGfKVzAzZ+y9NvHNQ9TQN6rf+8uvoH9Zw598ZubRyMPY37o+zf6ZHz6jp4RA+t79SKPefVdey8jo+79Nff12uvmDwO6jlTpmNn9dobB63x9OAbKcZNJOeRvd26Y+MRdX0c+VCSiSGzbP0BbTztnBPzgNfYqWWbevXSQXP+M3rp1W5rNj3R+X7hYFfHWIwa821oArikNl23Hmk6oHteOaItB89oS9\/lQj6xV1Oy7dM8oOc2dWtF+xlb\/zZjhGzs1F1bTofmmznsam5AD67v1EOvBm3RdfCEVtg2OqjXxgtO0NVBl675lPYcM23h2tK0mUsWa\/+P39fxY+f10qudumPTEdvOXccuadqcNFk\/81mFzFa+2h2WeU\/nES03+mk8puOFIseoBG+ua6TzoG2HR94YtPXY0zmgR+yxA+oLjQLHcEuvVv7G6+SMXtpywJoxKw\/NpOQdfHR1fFRdx05ohWH6xmnLvmvEpXf1Xrmtv6Bpz3t9t7ZciBQ+k8cBPZcz5mj2f7F2MMlKaD6mx49HrW7N9bV6X0E3Rh8P\/t+IcSlj4gQsPMdAXwf1hLk+ozF3yj13CY3b+qw\/qCdeKeg0vd0q1\/Oyzf3a4q9R274HtPFMoR3suTcd1CONB\/TEtlNqO3hKe0YLei30I8E1ftcrB21cpeyYO+N6qTEw9WzcKRN7KvVft14KO8PstuYbCEAAAhCAAAQgAAEIQGBpErj15o4xPSIPS5o9q5XmYSZiCpimuNrfHw\/Gax\/2gsCw3jywTeYfFqNGUFpbphkIkkb2dQfniRgX0nVdOtgbGDTRsibzHT2l5es79fRA1FjKq2t71Jhy7188EjELTEaf6vjvD1hja8+fXcYVmTudmst8CnJ1xsT6A3r6RNwE8EZOWP6Pz+vpjZ361usJUyt\/URuNOfXqmcCM0XX1vd6pOzYPFsw3c7I\/n9dLbad1+oPgzEWmghTM5EgG9y1qm0qZFZf56okj+pYNVlx4MHeUC39c+z3SETHYzLeTp7VyY9TA8AzjBpc1SYx5kaxP4QzuVellWeb4mKZnz2q1aYfQQHE8GqOGk8n6I\/W9fkB3vFjaxEq2g9X8xkRddF0jHQd1x\/petXk92pksR9SWuDZOtxtTcyCYdWWK4TjGjCHz+YXg+oiaO2Wf213vaRoPzJ1OLd+bCBE9PqgnTLu1jwfcy9bzp7o0cEIrt5+Ot8P1cb20qVPL2ox7E\/wXnLvYUMuslzGASwYLv67pI0esoZpu6gRmj+FQPMvOl4q\/EIAABCAAAQhAAAIQgMBSJ3DrzZ1Nkdk4ln7GsoXkA7972Ft9JGqkuObLDWiZnelQojmT+dmkl7TFPLyl7tJ0URtfjD5gp+XtHvq3nS0szXIPlMv3uZk0H5\/V6qzdxT44Y42tcOZHReaOmdmRVqbkZ66MRdxNunj5rx5JGGqRrKYP9doH\/z3OuDne1qk7XjyirrTlLe64pKlgPk77rGjmTsXMjGEYKax5ef2Cns7i7pIGM68G1Jfi\/xz\/v840sWkdp9DcKpwrMETm2g2qtLkTtn+YrTvf666BHY9U7V84pYesYRoeXPQizjzQ\/ENJY8Qc5c5TXJ54lknjNZvjjPaYmVrhzJ0Kzm2vhXSNBwZLr7wWC6W7HujLab0SPRfyiL76SHua4+adPXfRtVSiH3HXePbMHXO+0gYPxk60TXgNAQhAAAIQgAAEIAABCKQRuPXmTtEsh0rMHTPbIKUaqcZNIl1qmoyHbnuom53ySnzZUiJXTR80pkd\/uDQreKCMzH5IPa\/P5X29tjkyM6AicyexxbjPsuhvwihIfB998L\/UaWZuZBgV427b7kGXwfhprTDLl8wSnS1H9FLneZ3+c9x4i+btT5v2WZG5sxDMVKptg9KklsUX9ITZnv2g2ibNB45higlYkpnPK6ssmfV05\/PXikvn40UF8YqC2FEPuVhSYdyX8JyFF\/F6BlxMbKFYPjYGUhAb6JHOSLyp\/IxOnzqjLW3HtHpLt\/z5olvcx\/MvnNe8ssZPqKkKzp11LXiD0MxWip\/Kvou2R\/R1UdKknk2CqUvqO3hKG9uOaIXh4eJjRWdmpde1lNYC46e0uWNOnm7wYOwUtRwfQAACEIAABCAAAQhAAAIpBGrP3EmsxLB1ynxIjtQ4NU2ph7KMWSaRLO3L2OybvLq2deqOLafd8qWMeDJhHgnTIOuBNln2rHRhvtEXiXNEv\/IPys5EKPkwnCyDyefj99XXecI+9NsgsiauTPOZcGlL2oNw2meVmTuJ+mSyKN22pvipZfF8YvkmzunTmOYtZYiF6TLKksbUHuPOlzB3lv\/HMW1sS\/9n476E54u\/iNczKMu3XjmSmdeWUy4mkDfwNh7Q8v8w6U+p7dhFXRoIjC8fGyqef\/zcaeZOWeeO8Y\/nac9XNHsmSBO0xxE7G6tk28TYX9dId6+Ns7XsN91a+cYxbTQxhs68ry6z\/NC3Q6ZmMtrXFqlcc8ckjhs8GDvxducdBCAAAQhAAAIQgAAEIJBNoHJzp2jJjHsQ9UtIIudKPvQl3wdJgwejol+2Yw9fkuzDXqeePpGyhubMMX1rjqUpRQaCPXmppVfBrJo7UuoVqaIkFw\/FLNlxRk9s+UzM\/IkfGS4d8jFf\/ANtcnZSKosKZ+4k4+PYorhlM265UXLpVay0biZL6swpm\/BTXerrt3FufP3T2jvts6K2mQ+zItOv1AN3ULP40qtYbV38mcAkuO0zd9J0FS9uyXdx5oHmU5dlJXLxS+8KgaVdAq8FxzxIlzaTxpmd4cyd8s8dXO\/pGrf1icyWixbbtqmLB1S+nkf1XFqsKR9bak5zxx0fxkiKlMj1l0X9WyRJ\/KUxeAa0oo0YO3EuvIMABCAAAQhAAAIQgAAEShEoYe44cyMaT8bkdNoYKZ3yD\/Dm12YbXDcZ1HX2gp42WzvP+WBUmbmzLFmeMoPKegOhUG5TmetBUOOiYMeFYLBhsOESFIPdsXq1ZU9vyu5ZM2rbEnCIBc01QaOP9Aexgny8VrdUZMXB6O5LPtBtp8KlN94EKjI00grpzLfk7ksmafJ8fz5td3UqCjCsj4IZSWHQ6hkd7zyhlwYiy3dMfgnjL24qBGWznyVnXSTNK1XALJPF3OZOoOXiQNO6fklbXu7Usu3nXSylhZm5U2SoFNXbt19i5o7jUQho7dOZdU9n9FLnBV1K7NgWSZGYoeQ0n7aT2J8vaMu+MzrtmjWt\/YyZGeyMVTBe\/O5wyYDd+vMZG5i6sNSv\/HPPbe50qig2kOtzwnYrW88ZWvn4gp4rqw\/LCgAuGYNpWcmAytGW4jUEIAABCEAAAhCAAAQgAIH5EShh7vidpDr1SNtZnb48o5Ezg3rabNvbOKDjkYfJ4OGuU3c1HQu2uD5ots8+qOUvL7S5060nXunWclee6Q8uq6vNbSnenTAaingEswaWbR6wZTw96WYAuQdQ83nXxRlNfzCjkVMnbDyZZa8kdjEqytN9cD3I28SfSQ3OfOaY3Q3nweZBHb9szjGl02ZrdrOzT2y79cvWVAi2ni5sy37Py912G\/cbMneaDuqJTf3acuqyreOlM4NaWdSW12VnPqw\/oJWdF3XpgxlNX76kttcN4+gOQW7Gz8aDesnlN335ol5rNtthFx7608yBYDbFAa3cd1Zdpy4H5kmayVEusxsxd+Tr0a3njgVcpi+O6iVjxsV2k7pRc8edp7FfW\/rPq++i27Usrd5WUklzR1LI45T6Qp2esm04l06L2iGi+T0jU4EeRs7quc3Bte1n6gTxpA7o6YOXAi24683E3Ym2s5nZ1PaKYVbgeGnkjJ7eFFyvBXPH7KgWGD7meit17jnNnU1Gz92Fsl08H5R\/40G1haZn+Xq2BmzjEbU5HtM2v249aK6ROQ1qsz7vtN2pq9CPuGvclrNT5c\/cyepk+BwCEIAABCAAAQhAAAIQgEA2gZLmjq7P6nj7Qd3jAuca8+Kul49oT2xrZJP5Rzq9r7eQbuNBbTzxQWLGQFaMk0pm7piAyu8HM2HMr+Hm38ZurT7odqbKrqf95urpE3rE1SU2i2LygjaaLa19nus7tdxsixyPD1widzcjwSwNO52ybMzM0jk\/qNWbIufYeEBPtI8Wb288eVbPGVPMleWh5kGdPu+CGedcETINjbQiFowJs\/W5MZR83nc1ndDxot2uPtLpzv5YumW\/OaiXBmfjmc+O67XmwFjz+SXTFZkKJofr72tPeJwLRJ1hcpTFLJNFxmyMeC2k6x+or+2gjbfi62E03jb6aSRlgWHkQ\/uyZFyXaOLxM4X297PPMuodLgOLmAomqyIeNsbRoE4nmiZ6WvM6tR1SNG\/M2T5vepoDU9jYmEonBhLmjqQiPRzQykPvayQtJlE5585s10J9RqJMjbG6qV+vnXfGWQihTD0ny2T6lUPvF7FLZenOVdQ+jf3aM\/6+XjN9S0ow7rCIvIAABCAAAQhAAAIQgAAEIHCDBEqbOz7z63n76\/70bPSB138Z\/fuprs6U7YhED5z7dfJhb9bMgJnV1XQvpUR+13V1JvkA6JLbPGd0dR5VsIFjM3bwKRTGnLvMcn88O69yFM7lXyWMiXLb0qebqz0\/ng20MVc6Xxz\/N\/+Rpj8up\/EqYObzns9fUx4zU2lOjc8n88gxs\/PRbOR48\/IGdJrISfLtV6otfJpy2Li0ZV1DPt9S5y4qcPKDT3XVtNtc+itLz15r8+sDgpL5PDL6mGTxeQ8BCEAAAhCAAAQgAAEIQGABCGSaO\/\/fjmPhDA8\/o+F2\/bX1TJg7t6ss\/rwx9i7Wx\/J9wQwin+Z2\/w3KGDd3bneZOH9h5hQslhaL\/\/Ebs5wtXucvbj4U60p4AwEIQAACEIAABCAAAQhAYD4EMs2d+WR2U49JmDs39VzlZv7BWRtX5KHfxGOVlHv4rUkXN3duzTk5CwQgAAEIQAACEIAABCAAAQhAAAK3ikDtmDujZ7Sx7ZT6PrhVaOY+z9Wzp7Wx7Zg27jurkaLYNXMff2tSzKhv3zFt7CsvLtGtKRNngQAEIAABCEAAAhCAAAQgAAEIQGChCNSOubNQNSYfCEAAAhCAAAQgAAEIQAACEIAABCCwiAhg7iyixqQqEIAABCAAAQhAAAIQgAAEIAABCCw9Apg7S6\/NqTEEIAABCEAAAhCAAAQgAAEIQAACi4gA5s4iakyqAgEIQAACEIAABCAAAQhAAAIQgMDSI4C5s\/TanBpDAAIQgAAEIAABCEAAAhCAAAQgsIgIYO4sosakKhCAAAQgAAEIQAACEIAABCAAAQgsPQKYO0uvzakxBCAAAQhAAAIQgAAEIAABCEAAAouIAObOImpMqgIBCEAAAhCAAAQgAAEIQAACEIDA0iOAubP02pwaQwACEIAABCAAAQhAAAIQgAAEILCICGDuLKLGpCoQgAAEIAABCEAAAhCAAAQgAAEILD0CmDtLr82pMQQgAAEIQAACEIAABCAAAQhAAAKLiADmziJqTKoCAQhAAAIQgAAEIAABCEAAAhCAwNIjgLmz9NqcGkMAAhCAAAQgAAEIQAACEIAABCCwiAhg7iyixqQqEIAABCAAAQhAAAIQgAAEIAABCCw9Apg7S6\/NqTEEIAABCEAAAhCAAAQgAAEIQAACi4gA5s4iakyqAgEIQAACEIAABCAAAQhAAAIQgMDSI4C5s\/TanBpDAAIQgAAEIAABCEAAAhCAAAQgsIgIYO4sosakKhCAAAQgAAEIQAACEIAABCAAAQgsPQKYO0uvzakxBCAAAQhAAAIQgAAEIAABCEAAAouIAObOImpMqgIBCEAAAhCAAAQgAAEIQAACEIDA0iOAubP02pwaQwACEIAABCAAAQhAAAIQgAAEILCICGDuLKLGpCoQgAAEIAABCEAAAhCAAAQgAAEILD0CmDtLr82pMQQgAAEIQAACEIAABCAAAQhAAAKLiADmziJqTKoCAQhAAAIQgAAEIAABCEAAAhCAwNIjgLmz9NqcGkMAAhCAAAQgAAEIQAACEIAABCCwiAhg7iyixqQqEIAABCAAAQhAAAIQgAAEIAABCCw9Av8PzYVEXt1L5xwAAAAASUVORK5CYII=)","7ba529d6":"# DOWNLOAD DATASET AND BASIC REQUIREMNETS\n\n","21e58cdd":"# Importing header files and loading dataset ","e4248e78":"# Model-1 : DecisionTreeClassifier","bb63c4b7":"# Data Cleaning\n","d7ed7c48":"1. **`RefId`** is not a useful column .\n2. **`BYRNO`**(Unique number assigned to the buyer that purchased the vehicle) is not useful too\n3. **`VNZIP1`** (Zipcode where the car was purchased) is not useful too\n4. The vehicle age and VehYear bought are present thus **`PurchDate`** is not required.\n","79a850a0":"#Model-2 :- Random Forest Classifier\n\n","68badf59":"## Summary\n\n* did **exploratory data analysis** , **data cleaning** and created **2 models** to predict outputs \n* Train_acc=91.26 %\n* Test_acc=**90.05** %\n* Submission in Kaggle lies in in top 100(i.e **top 20%****)","5f9f812b":"#Feature Engineering","4c938f34":"# DUMB MODEL"}}