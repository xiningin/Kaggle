{"cell_type":{"47a8f3f9":"code","4349862b":"code","1c40953a":"code","f0ea4902":"code","4b10d029":"code","5afa2c08":"code","5b82fa80":"code","8c4299b7":"code","dcd5741f":"code","62e4321f":"code","a709e2e2":"code","cbe05b61":"code","f022da39":"code","e0335887":"code","ea13c388":"code","2951bd15":"code","ae2da84d":"code","f5ac911a":"code","998ffcca":"code","af3f37ef":"code","0fb0c80e":"code","6a904679":"code","dc858838":"code","a3144517":"code","fb025704":"code","99f8c23e":"code","43b103fb":"code","95cf8537":"code","1d664f00":"code","e3ea5e32":"code","7d76b894":"code","ee26bc18":"code","c6951334":"code","c34c0963":"code","138622f9":"code","42f1fe1f":"code","947f1dea":"code","a084e94b":"code","cc23a144":"code","8d053d11":"code","eea15d77":"code","8ed19864":"code","c7797d2c":"code","972ba777":"code","c3f75cbe":"code","67d85be6":"code","2da6fc1d":"code","6b65265d":"code","17d21d32":"code","118e1870":"code","df117ac4":"code","3c261e20":"code","6b047cc4":"code","2481831c":"code","c8964b6c":"code","428a4c01":"code","dc35cece":"code","178aa9bf":"code","2f314f06":"code","cf4e7949":"code","2d39c48f":"code","f8a9f8ef":"code","296f72df":"code","31844fbb":"code","2b353c9b":"code","4f2f93c3":"code","b75040ed":"code","88a6ecfc":"code","df5eb37b":"code","ff3986f2":"code","04f7d6ec":"code","774406fa":"code","b70bccfd":"code","0f3c6350":"code","2ca6abc6":"code","5f2ff5fc":"code","ad9e5afd":"code","43dd1196":"code","5075d27a":"code","5ff51768":"code","dffd2c12":"markdown","950fa87c":"markdown","306c11bb":"markdown","6678432c":"markdown","3641cb33":"markdown","afaf023b":"markdown","09edd8c4":"markdown","435c6aac":"markdown","3e8074f4":"markdown","fe9687cc":"markdown","81de9f24":"markdown","5d4be19b":"markdown","f7a014b4":"markdown","72d07e2c":"markdown","d844106f":"markdown","3a973ba9":"markdown"},"source":{"47a8f3f9":"# seaborn version update -> \ub9e8 \ucc98\uc74c\uc5d0 \ud574\uc918\uc57c \ud568\n!pip install seaborn==0.11","4349862b":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(action='ignore')\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os","1c40953a":"sns.__version__","f0ea4902":"train = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv')","4b10d029":"print(train.shape)\nprint(test.shape)","5afa2c08":"train.head()","5b82fa80":"train.columns","8c4299b7":"train.info()\n# id \uc81c\uc678\ud558\uace0, \ubcc0\uc218\ub294 15\uac1c, \uadf8 \uc911 \uc218\uce58\ud615 \ubcc0\uc218\ub294 6\uac1c\n# null data\ub294 \uc5c6\uc5b4\ubcf4\uc778\ub2e4.","dcd5741f":"# \uacb0\uce21\uce58 \ucc3e\uc544\ubcf4\ub294 \ub2e4\ub978 \ubc29\ubc95: missingno\n\nmsno.matrix(train)","62e4321f":"columns = train.columns\nfor i in range(1,len(columns)):\n    print(columns[i],':',train[columns[i]].unique(),'\\n')\n\n# id\ub294 \ube90\uc74c","a709e2e2":"lst = ['workclass', 'education','marital_status', 'occupation', 'relationship', 'race', 'sex',\n       'native_country','income']","cbe05b61":"for unit in lst:\n    print('<',unit,'>')\n    print(train[unit].value_counts()) # value\uac00 \uba87 \uac1c\uc529 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcfc \uc218 \uc788\ub2e4.\n    print()","f022da39":"fig, ax = plt.subplots(1, 1, figsize=(12, 5)) # plot\uc744 1 by 1\uc73c\ub85c, \ud06c\uae30\ub294 12*5\nsns.countplot(data=train, x='workclass', ax=ax)\nplt.show()","e0335887":"fig, ax = plt.subplots(1, 1, figsize=(12, 5)) # plot\uc744 1 by 1\uc73c\ub85c, \ud06c\uae30\ub294 12*5\nsns.countplot(data=train, x='race', ax=ax, hue='sex') # hue: \uc0c9\uc0c1\uc758 \uae30\uc900\nplt.show()","ea13c388":"fig, ax = plt.subplots(figsize=(12, 5)) # plot\uc744 1 by 1\uc73c\ub85c, \ud06c\uae30\ub294 12*5\nsns.countplot(data=train, x='income', ax=ax, hue='sex') # hue: \uc0c9\uc0c1\uc758 \uae30\uc900\nplt.show()","2951bd15":"train.describe()\n# \uc218\uce58\ud615 \ubcc0\uc218\ub9cc \ub098\uc628\ub2e4. (id \uc81c\uc678 6\uac1c \ubcc0\uc218)","ae2da84d":"fig, ax = plt.subplots(1, 1, figsize=(12, 5))\nax.hist(train['age'], width=3, edgecolor='black')\n\nax.set_title('Age Distribution', fontweight='bold')\nplt.show()","f5ac911a":"# \ubd84\ud3ec \ud655\uc778\nfig,ax = plt.subplots(figsize=(12, 5))\nsns.kdeplot(data=train, x='age')\nplt.show()","998ffcca":"# income\uc744 \uc22b\uc790\ub85c 1, 0\ntrain['income'] = (train['income'] == '>50K').astype(int)\n# \uc774\ub807\uac8c\ub3c4 \uac00\ub2a5: train.income = train.income.map(lambda x: int(x=='>50K'))\n## .map: Series\uc5d0 \uc4f8 \uc218 \uc788\ub294 \ud568\uc218, \uc774 \uc548\uc758 \ub370\uc774\ud130\ub97c \ubcc0\ud615 (for\ubb38\uc774 \uc880 \ub290\ub824\uc11c \ucd94\ucc9c)","af3f37ef":"# pivot table: groupby\n\ntrain.groupby(['marital_status'])[['income']].mean().style.background_gradient(cmap='Purples')\n# \ubc31\uc778 \ub0a8\uc131, Asian-Pac-Islander \ub0a8\uc131 \/ \ub300\uccb4\ub85c \ub0a8\uc131\uc774 \ub9ce\uc774 \ubc84\ub294 \ub290\ub08c","0fb0c80e":"# pivot table: \uba54\uc18c\ub4dc\n\npd.pivot_table(train,\n              columns='sex',\n              index='race',\n              values='income',\n              aggfunc='mean')","6a904679":"pd.pivot_table(train,\n              columns='sex',\n              index='race',\n              values='income',\n              aggfunc='sum')","dc858838":"fig = plt.subplots(figsize = (12, 5))\nsns.boxplot(data=train, x='race', y='age', hue='sex') # \uc778\uc885\uc5d0 \ub530\ub978 \ub098\uc774\nplt.show()","a3144517":"fig = plt.subplots(figsize = (12, 5))\nsns.violinplot(data=train, x='race', y='age', hue='sex') # \uc778\uc885\uc5d0 \ub530\ub978 \ub098\uc774\nplt.show()","fb025704":"train.corr().style.background_gradient()","99f8c23e":"corr = train.corr() # \uc0c1\uad00\uacc4\uc218","43b103fb":"fig = plt.subplots(figsize=(10, 10))\nsns.heatmap(corr, square=True, linecolor='white', linewidth=1, cmap='coolwarm',\n            vmax=1.0, vmin=-1.0)\nplt.show()\n\n# \ub0a8\ub4e4\ub3c4 \uac00\ub3c5\uc131 \ub192\uac8c \ubcfc \uc218 \uc788\ub3c4\ub85d!","95cf8537":"y_train = train['income']","1d664f00":"x_train = train.drop(['income'], axis=1, inplace=False)","e3ea5e32":"x_train.head()","7d76b894":"from category_encoders.ordinal import OrdinalEncoder\n# Label incode \uc0ac\uc6a9\n\nLE_encoder = OrdinalEncoder(list(x_train.columns))\ntrain_le = LE_encoder.fit_transform(x_train, y_train)\ntest_le = LE_encoder.transform(test)","ee26bc18":"from sklearn.tree import DecisionTreeClassifier\ndt_clf = DecisionTreeClassifier()\ndt_clf.fit(train_le, y_train)","c6951334":"dt_clf.predict(test_le).astype(int)","c34c0963":"sample_submission['prediction'] = dt_clf.predict(test_le).astype(int)\nsample_submission.to_csv('submission.csv', index=False)","138622f9":"sample_submission","42f1fe1f":"train.drop(['id'], axis=1, inplace=True)\nx_train.drop(['id'], axis=1, inplace=True)","947f1dea":"# sample \ubf51\uc544\ubcf4\uae30\ntrain.sample(10)","a084e94b":"train.describe()\n# capital_gain, capital_loss \uc880 \uc774\uc0c1\ud558\ub2e4.","cc23a144":"train.native_country.value_counts()\n# train \uadf8 \uc790\uccb4\ub294 Data Frame\uc774\uc9c0\ub9cc, train.native_country\ub294 Series\uc774\ub2e4. (\uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud568\uc218\uac00 \ub2e4\ub984)","8d053d11":"train.workclass.value_counts()","eea15d77":"train.capital_gain.describe(percentiles=[.9])","8ed19864":"# loc(column\uba85), iloc(\uc22b\uc790): \ub370\uc774\ud130\ub97c \ucc3e\uc544\uac00\ub294 \uac83\ntrain.capital_gain == 99999\n# \uc870\uac74\ubb38 -> \uacb0\uacfc: \ub9de\ub294\uc9c0 \ud2c0\ub9b0\uc9c0 -> \uace8\ub77c\ub77c\ntrain.loc[train.capital_gain < 99999, :]","c7797d2c":"train.loc[train.race == 'White', :]","972ba777":"train.apply(lambda x: x['age'] + x['hours_per_week'], axis = 1)\n# axis: \ucd95","c3f75cbe":"train.age.plot(kind='box') # \uac04\ub2e8\ud558\uac8c \uac00\ub2a5\ud568","67d85be6":"train.apply(lambda x: '?' in list(x), axis=1)\n# \ubb3c\uc74c\ud45c\uac00 \ub4e4\uc5b4\uc788\uc5b4?","2da6fc1d":"# \uacb0\uce21\uce58 \ud655\uc778\ntrain[train.apply(lambda x: '?' in list(x), axis=1)]","6b65265d":"train.workclass.value_counts()","17d21d32":"train.occupation.value_counts()","118e1870":"train.loc[(train.workclass == '?') & (train.occupation == '?')]","df117ac4":"train.native_country.value_counts()","3c261e20":"# Null \uad00\ub828 \ud301: \uc77c\uc77c\ud788 \ud655\uc778\ud558\uc9c0 \uc54a\uace0 \uacb0\uce21\uce58\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ubc29\ubc95?\n\ntrain.info()\n\n## Null\uc774 \uc788\ub2e4\uba74 object, int\uc774\ub4e0 float\ub77c\uace0 \ub098\uc628\ub2e4.","6b047cc4":"train.loc[train.capital_gain < 99999].sort_values('capital_gain',ascending=False)","2481831c":"# log \ud45c\ud604\ntrain['log_capital_gain'] = train.capital_gain.map(lambda x: np.log(x, where=(x!=0)))","c8964b6c":"train[['capital_gain','log_capital_gain']]","428a4c01":"# Scaling\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\n\nmm_scaler = MinMaxScaler()\nst_scaler = StandardScaler()","dc35cece":"train['MM_fnlwgt'] = mm_scaler.fit_transform(train['fnlwgt'].values.reshape(-1,1))\ntest['MM_fnlwgt'] = mm_scaler.transform(test['fnlwgt'].values.reshape(-1,1))\n\ntrain['MM_age'] = mm_scaler.fit_transform(train['age'].values.reshape(-1,1))\ntest['MM_age'] = mm_scaler.transform(test['age'].values.reshape(-1,1))\n\ntrain['ST_fnlwgt'] = st_scaler.fit_transform(train['fnlwgt'].values.reshape(-1,1))\ntest['ST_fnlwgt'] = st_scaler.transform(test['fnlwgt'].values.reshape(-1,1))\n\ntrain['ST_age'] = st_scaler.fit_transform(train['age'].values.reshape(-1,1))\ntest['ST_age'] = st_scaler.transform(test['age'].values.reshape(-1,1))","178aa9bf":"train.describe()[['MM_fnlwgt', 'MM_age']]","2f314f06":"train.describe()[['ST_fnlwgt', 'ST_age']].round(6)","cf4e7949":"# \uc778\ucf54\ub529 - Onehot encoder\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\n\noe = OneHotEncoder()\noe_result = oe.fit_transform(train['workclass'].values.reshape(-1,1))","2d39c48f":"oe.get_feature_names(['workclass'])","f8a9f8ef":"oe_result.toarray()","296f72df":"sub = pd.DataFrame(data=oe_result.toarray(), columns=oe.get_feature_names(['workclass']))","31844fbb":"pd.concat([train, sub], axis=1)","2b353c9b":"# Label encoder\n\nle = LabelEncoder()\nle.fit_transform(train['workclass'].values.reshape(-1, 1))","4f2f93c3":"workclass_to_num = dict(zip(train['workclass'].unique(),[0,1,2,3,4,5,6,7,8,9]))","b75040ed":"workclass_to_num","88a6ecfc":"train['workclass'].map(workclass_to_num)","df5eb37b":"# onehot \uc778\ucf54\ub529 \uc77c\uad04\uc801\uc73c\ub85c \uac04\ub2e8\ud558\uac8c \ud558\ub294 \ubc29\ubc95\ndummied = pd.get_dummies(train)","ff3986f2":"dummied","04f7d6ec":"# PCA\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=60, svd_solver='full')","774406fa":"X_train_std = st_scaler.fit_transform(dummied)","b70bccfd":"X_train_pca = pca.fit_transform(X_train_std)","0f3c6350":"X_train_pca.shape","2ca6abc6":"pca.explained_variance_ratio_","5f2ff5fc":"sum(pca.explained_variance_ratio_)","ad9e5afd":"X_train_2 = X_train_std - X_train_std.mean(axis=0)\n\nres = np.dot(X_train_2, pca.components_.T)\nres","43dd1196":"np.allclose(X_train_pca, res)","5075d27a":"X_train_2.shape","5ff51768":"tt = train.apply(lambda x: x['capital_gain'] - x['capital_loss'], axis = 1)","dffd2c12":"# 1\uac15) Kaggle Start, EDA\n## 1. \ubb34\uc5c7\uc744 \ubcfc \uac83\uc778\uac00?\n- \uc5b4\ub5a4 \ubb38\uc81c\ub97c \ud574\uacb0?\n- \uc5b4\ub5a4 \uc885\ub958\uc758 \ub370\uc774\ud130? \uc774\ub97c \uc5b4\ub5bb\uac8c \ucc98\ub9ac?****\n- \ub204\ub77d\uac12\uc774 \ubb34\uc5c7? \uc774\ub97c \uc5b4\ub5bb\uac8c \ucc98\ub9ac?\n- \ud2b9\uc774\uac12, \uc774\uc0c1\uce58\ub294 \uc5b4\ub514\uc5d0? \uc774\ub97c \uc5b4\ub5bb\uac8c \ucc98\ub9ac?\n- \ub370\uc774\ud130\ub97c \ucd5c\ub300\ud55c \ud65c\uc6a9\ud558\ub824\uba74 \uc5b4\ub5a4 \uc0c8\ub85c\uc6b4 Feature\ub97c \ub9cc\ub4e4\uae4c?","950fa87c":"## \uacfc\uc801\ud569 \ubc29\uc9c0\ub97c \uc704\ud55c Test \/ Validation \ubd84\ub9ac\n\n\uc6d0\ub798\ub294 \ub370\uc774\ud130\uc758 \uacfc\uc801\ud569\uc744 \ubc29\uc9c1\ud558\uae30 \uc704\ud574 test dataset \uc774\uc804\uc5d0 validation dataset\uc744 \ub9cc\ub4e4\uc5b4 train dataset\uc73c\ub85c \ud6c8\ub828\ud55c \uacb0\uacfc\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\uadf8\ub9ac\uace0 \uc774\ub7f0 validation\uc5d0\ub3c4 \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4.\n\ud2b9\ud788 \uce90\uae00\uc5d0\uc11c\ub294 Cross-Validation\uc744 \ub9ce\uc774 \uc0ac\uc6a9\ud558\ub294\ub370 \n\n- KFold\n- Stratified KFold\n\n\ub4f1 \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc774 \ucee4\ub110\uc5d0\uc11c\ub294 \ub530\ub85c \ub2e4\ub8e8\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","306c11bb":"## 3. ML\uc758 \uae30\ubcf8\uc740 \ud1b5\uacc4, \ub300\ud45c\uac12 \uc54c\uc544\ubcf4\uc790\n- count: \uac1c\uc218\n- mean: \ud3c9\uade0\n- std: \ud45c\uc900 \ud3b8\ucc28\n- min: \ucd5c\uc19f\uac12\n- 25%: \uc81c 1\uc0ac\ubd84\uc704\uac12\n- 50%: \uc911\uc559\uac12, \uc911\uc704\uac12\n- 75%: \uc81c 3\uc0ac\ubd84\uc704\uac12\n- max: \ucd5c\ub313\uac12","6678432c":"## \uacb0\uacfc \uc81c\ucd9c\n\n\uc608\ube44 \uc81c\ucd9c \ud30c\uc77c\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uc81c\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc81c\ucd9c \ud30c\uc77c\uc740 csv \ud30c\uc77c\ub85c \uc81c\ucd9c\ud574\uc57c\ud558\uba70, `to_csv` \uba54\uc11c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \uce90\uae00 \uc11c\ubc84 \ub0b4\uc5d0 csv \ud30c\uc77c\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","3641cb33":"# 2\uac15) Feature Engineering\n## 1. \ub370\uc774\ud130\uac00 \ubb34\uc5c7\uc778\uac00?\n1. \uad6c\ubd84\n    - \uc815\ud615 \ub370\uc774\ud130: Table \ud615\ud0dc(SQL)\uc758 \ub370\uc774\ud130\n    - \ube44\uc815\ud615 \ub370\uc774\ud130: \uadf8 \uc678(\uc774\ubbf8\uc9c0, \ud14d\uc2a4\ud2b8 \ub4f1)\n2. \ub610 \ub2e4\ub978 \uad6c\ubd84\n    - \uc218\uce58\ud615 \ub370\uc774\ud130(Numerical Data)\n    - \ubc94\uc8fc\ud615 \ub370\uc774\ud130(Categorical Data)\n- \uae30\ubcf8\uc801\uc73c\ub85c \uc5b4\ub5a4 \uad6c\uc870\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uace0, \ubcc0\ud615\uc744 \uc2dc\ucf30\uc744 \ub54c \uc5b4\ub5a4 \ubcc0\ud654\uac00 \uc788\ub294\uc9c0, \uadf8\uac8c \ub0b4\uac00 \uc815\ub9d0 \uc6d0\ud588\ub358 \uac74\uc9c0","afaf023b":"\uadf8 \uc678\uc5d0\ub3c4 \ub2e4\uc591\ud55c feature engineering \ub610\ub294 feature selection \uc744 \ud560 \uc218 \uc788\uc9c0\ub9cc \uc5ec\uae30\uc11c\ub294 \uc0dd\ub7b5\ud569\ub2c8\ub2e4.","09edd8c4":"## 4. EDA\uc758 \ud575\uc2ec = \uc2dc\uac01\ud654!\n- \uc65c?\n    - \uc2dc\uac01\ud654 \uc790\ub8cc\ub97c \uc0ac\uc6a9\ud558\uba74 Text+\uc22b\uc790\ubcf4\ub2e4 \ube60\ub974\uac8c \uc774\ud574 \uac00\ub2a5\n- \uc2dc\uac01\ud654\ud574\uc57c\ud560 \uac83\ub4e4\n    - Composition: \ubb34\uc5c7\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\ub294\uac00? (\ub0a8\uc790\uac00 \uba87 \ud37c\uc13c\ud2b8?)\n    - Distribution: \ubcc0\uc218\uc758 \ubd84\ud3ec\uac00 \uc5b4\ub5bb\uac8c \ub418\ub294\uac00?\n    - Relationship: \ubcc0\uc218 \uac04\uc758 \uad00\uacc4? (\uc0b0\uc810\ub3c4)\n    - Comparison: \ube44\uad50 (Train\uacfc Test\uac04\uc758 \ubd84\ud3ec\uc758 \ucc28\uc774\uac00 \uc788\uc744\uae4c?)  \n- \uc758\uc758: \ubaa8\ub378\uc740 \uadf8\ub0e5 \ub123\uc5b4\uc904\uac70\uc9c0\ub9cc\n    1) \uc0c8\ub85c\uc6b4 Feature Engineering\ud560 \ub54c \ub3c4\uc6c0\uc774 \ub41c\ub2e4.\n    2) \uac01 Feature\ub294 \uc5b4\ub5a4 \ubd84\ud3ec\ub97c \uac00\uc815\ud558\uace0 \uc788\ub294\ub370, \uce58\uc6b0\uccd0\uc9c4 \uacbd\uc6b0\ub294 \ub458\ub85c \ub098\ub20c \uc218\ub3c4 \uc788\ub2e4.\n    3) Stacking\ud560 \ub54c..?","435c6aac":"\uacb0\uacfc\ub97c \uc81c\ucd9c\ud558\uace0 \ub098\uc11c\ub294 \ub9ac\ub354\ubcf4\ub4dc\ub97c \ud655\uc778\ud558\uace0, \uc774 \ub9ac\ub354\ubcf4\ub4dc \uacb0\uacfc\uc5d0 \ub530\ub77c \ub2e4\uc2dc \uc704\uc5d0\uc11c \ubd80\ud130 EDA\ub97c \uc9c4\ud589\ud574\uc8fc\uc2dc\uba74 \ub429\ub2c8\ub2e4.","3e8074f4":"- id\n- age : \ub098\uc774 (\uc218\uce58\ud615 - \uc774\uc0b0\ud615)\n- workclass : \uace0\uc6a9 \ud615\ud0dc (\ubc94\uc8fc\ud615 - \uba85\ubaa9\ud615)\n- fnlwgt : \uc0ac\ub78c \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58 (final weight\uc758 \uc57d\uc790) (\uc218\uce58\ud615 - \uc774\uc0b0\ud615)\n- education : \uad50\uc721 \uc218\uc900 (\ubc94\uc8fc\ud615 - \uc21c\uc11c\ud615)\n- education_num : \uad50\uc721 \uc218\uc900 \uc218\uce58 (\uc218\uce58\ud615 - \uc774\uc0b0\ud615)\n- marital_status: \uacb0\ud63c \uc0c1\ud0dc (\ubc94\uc8fc\ud615 - \uba85\ubaa9\ud615)\n- occupation : \uc5c5\uc885 (\ubc94\uc8fc\ud615 - \uba85\ubaa9\ud615) \n- relationship : \uac00\uc871 \uad00\uacc4 (\ubc94\uc8fc\ud615 - \uba85\ubaa9\ud615)\n- race : \uc778\uc885 (\ubc94\uc8fc\ud615 - \uba85\ubaa9\ud615)\n- sex : \uc131\ubcc4 (\ubc94\uc8fc\ud615 - \uba85\ubaa9\ud615)\n- capital_gain : \uc591\ub3c4 \uc18c\ub4dd (\uc218\uce58\ud615 - \uc774\uc0b0\ud615)\n- capital_loss : \uc591\ub3c4 \uc190\uc2e4 (\uc218\uce58\ud615 - \uc774\uc0b0\ud615)\n- hours_per_week : \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04 (\uc218\uce58\ud615 - \uc774\uc0b0\ud615)\n- native_country : \uad6d\uc801 (\ubc94\uc8fc\ud615 - \uba85\ubaa9\ud615)\n- income : \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12) (\ubc94\uc8fc\ud615 - \uc21c\uc11c\ud615? => \uc218\uce58\ud615 - \uc774\uc0b0\ud615)\n    - \\>50K : 1\n    - <=50K : 0","fe9687cc":"## 3. Data Preprocessing\n1. Handle Missing Values: \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uac12, \uc2dc\uc2a4\ud15c \uc624\ub958\ub85c \uc778\ud55c \ube44\uc815\uc0c1\uc801\uc778 \uac12\n    - \ud574\ub2f9 Feature\ub97c \uc124\uba85\ud560 \uc218 \uc788\ub2e4\uace0 \uc0dd\uac01\ud558\uae30\uc5d0 \uc560\ub9e4\ud55c \uac12, \uc758\ubbf8 \uc790\uccb4\uac00 Missing\uc77c \uc218\ub3c4 \uc788\ub2e4.\n    - \uc0ad\uc81c\n        - \ud55c Feature\uc758 80% \uc774\uc0c1\uc774 \ubabb \uc4f8 \ub370\uc774\ud130 \ub77c\uba74?: Feature \uc81c\uac70\ud574\ub3c4 \ub420 \uac83\uc774\ub2e4.\n        - \ub370\uc774\ud130 \uc218\uac00 \ucda9\ubd84\ud788 \ub9ce\uc544\uc11c \ub370\uc774\ud130 \uba87 \uac1c \uc5c6\uc5b4\uc838\ub3c4 \uad1c\ucc2e\ub2e4\uba74: Row \uc81c\uac70\n    - \ub300\uce58\n        - \ub2e4\ub978 Sample\uc758 \ubd84\ud3ec(\ud1b5\uacc4)\ub85c \uc5b4\ub290 \uc815\ub3c4 \uc608\uce21\uc774 \uac00\ub2a5\ud558\ub2e4\uba74\n        - \uc758\ubbf8\uc801\uc73c\ub85c \ucd94\ub860\uc774 \uac00\ub2a5\ud560 \ub54c\n2. Handle Outliers\n    - \uac19\uc740 Feature\uc758 \ub2e4\ub978 \uc0d8\ud50c\ub4e4\uacfc \ube44\uad50\ud588\uc744 \ub54c \ube44\uc815\uc0c1\uc801\uc73c\ub85c \ub5a8\uc5b4\uc9c4 \uad00\uce21\uce58\n    - \uc0ad\uc81c: \uc815\uc0c1 \ubd84\ud3ec\uc5d0 \ubc97\uc5b4\ub098\ub294 Outlier \uc81c\uac70\n    - \ub300\uce58: \uc758\ubbf8\uc801\uc73c\ub85c \ub2e4\ub978 \uac12(\ucd5c\ub300, \ucd5c\uc18c)\uc73c\ub85c \ub300\uccb4 \uac00\ub2a5\ud55c \uc9c0 \uc5ec\ubd80 \ud310\ub2e8\n    - \ub85c\uadf8 \ubcc0\ud658: Scale, \uc22b\uc790 \uadf8 \uc790\uccb4\uac00 \uc791\uc544\uc9c4\ub2e4.\n3. Select Dependent & Independent Value\n    - \uc885\uc18d \ubcc0\uc218: target, y\n    - \ud604\uc5c5\uc5d0\uc11c\ub294 \uc2a4\uc2a4\ub85c \uc815\uc758\ud574\uc57c \ud55c\ub2e4.\n4. Split Train & Test Set\n5. Scaling\n    - \uac19\uc740 \uc218\uce58\ud615 \ub370\uc774\ud130\ub77c\ub3c4 \ud3c9\uade0, \ucd5c\ub300, \ucd5c\uc18c\uac00 \ub2e4\ub978 \uacbd\uc6b0, \ubaa8\ub378\uc744 \uad6c\uc131\ud558\uace0 \uc624\ucc28\ub97c \uc774\uc6a9\ud574 \ud559\uc2b5\uc744 \ud560 \ub54c, \uacfc\uc5f0 \uac01 Feature\uac00 \ub3d9\ub4f1\ud55c \uc601\ud5a5\ub825\uc744 \uac00\uc9c8\uae4c?\n    - Min-max Scaler (0~1): Outlier\uc5d0 \ubbfc\uac10\ud558\ub2e4.\n    - Standard Scaler (\ud45c\uc900\ud654): Outlier \uc601\ud5a5 \ub35c \ubc1b\uc74c\n6. Data Leakage (\ub370\uc774\ud130 \ub204\uc218)\n    - train\uc758 \ubd84\ud3ec\uac00 \uadf8\ub300\ub85c test\ub85c \uac00\uc9c0\ub294 \uc54a\uc744 \uc218 \uc788\ub2e4. overfitting\uc758 \uac00\ub2a5\uc131\ub3c4 \uc788\ub2e4.","81de9f24":"## 6. \uc774\ud6c4\uc758 \uc791\uc5c5\ub4e4\uc744 \uac04\ub2e8\ud558\uac8c \uc9c4\ud589\ud574\ubcf4\uc558\ub2e4.","5d4be19b":"## 2. \ub370\uc774\ud130\ub97c \uc0b4\ud53c\ub294 \uac83\uc73c\ub85c \uc2dc\uc791\n- \uc5b4\ub5a4 \ub370\uc774\ud130\uc778\uc9c0 \ud655\uc778\ud558\uace0, \ubaa8\ub378\uc5d0 \ub123\uc744 \uc218 \uc788\ub294\uc9c0? (\ub300\ubd80\ubd84\uc740 \uc22b\uc790 feature\ub85c)\n- \uc218\uce58\ud615(numerical): \uc218\n    - \uc774\uc0b0\ud615(discrete): 1\uba85, 2\uba85, 3\uba85 \ub4f1\n    - \uc5f0\uc18d\ud615(continiuous): 6.23\ucd08, 5.77\ub9cc\uc6d0 \ub4f1\n- \ubc94\uc8fc\ud615(categorical): \uc218 \uc678\uc758 \uac12\n    - \uba85\ubaa9\ud615(nominal): \uc21c\uc11c \uc0c1\uad00 \uc5c6\ub294 \uac12 (ex. race: \ubc31\uc778, \ud751\uc778)\n    - \uc21c\uc11c\ud615(ordinal): \uc21c\uc11c\uac00 \uc788\ub294 \uac12 (ex. education: \uace0\uc878, \ub300\uc878, \uc11d\uc0ac\uc878, \ubc15\uc0ac\uc878 \ub4f1)\n- tip) \uac01 \ubcc0\uc218 \ubcc4\ub85c \uc5b4\ub5a4 \ub370\uc774\ud130\uc778\uc9c0 \ubd84\ub958\ud574\ubcf4\uace0 \uc2dc\uc791!","f7a014b4":"## 5. \uc774\ud6c4\uc758 \uc791\uc5c5\n1. \uc804\ucc98\ub9ac\n    - Feature Engineering: Feature\ub97c \uc5b4\ub5bb\uac8c \uc0c8\ub86d\uac8c \ub9cc\ub4e4\uace0 \ubc14\uafc0 \uac83\uc778\uac00\n    - Feature Selection: Feature\ub97c \uc5b4\ub5bb\uac8c \uc120\ud0dd\ud560 \uac83\uc778\uac00\n    - \ub3c4\uba54\uc778 \uc9c0\uc2dd, \ubaa8\ub378\uc758 \ud2b9\uc131\uc5d0 \ub9de\uac8c\n    - Feature importance \uac19\uc740 \uac83\ub3c4 \uc788\ub2e4.\n2. \ubaa8\ub378\n    - ML \ubaa8\ub378: scikit-learn \ud65c\uc6a9 (\ub300\ud45c\uc801\uc778 \uac70 20\uac1c \uc815\ub3c4)\n    - XGBoost, LGBM, Catboost,... : \uc694\uc998 \uce90\uae00\uc5d0\uc11c \uc8fc\ub85c \uc0ac\uc6a9\n        - \uc870\uae08 \ub290\ub9ac\uba74 cuml\n    - \uc2a4\ud0dc\ud0b9, \uc559\uc0c1\ube14,...\n3. \uacb0\uacfc\n    - Score: f1-score\ub97c \uc65c \uc4f0\uc9c0?\n    - Overfitting\uacfc\uc758 \uc2f8\uc6c0\n        - Validation\n        - \uc81c\ucd9c \ud30c\uc77c \uc120\ud0dd\n    - Hyperparameter \ubc14\uafb8\uba70 \ubc18\ubcf5\n    - \ub2e4\uc2dc EDA\ubd80\ud130...","72d07e2c":"## \ubaa8\ub378 \ud6c8\ub828 \ubc0f \uc608\uce21\n\nscikit-learn\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ub300\ubd80\ubd84\uc758 \ubaa8\ub378\uc740 train, target\uc744 \uc785\ub825\uc73c\ub85c \ubc1b\uc544 \ud6c8\ub828\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4.\n\n\ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\uc758 \ucc28\uc774\uac00 \uc788\uc9c0\ub9cc \ubaa8\ub378 \uc885\ub958\uc5d0 \ub530\ub77c \ucee4\uc2a4\ud140\ud574\ub3c4 \ub418\uaca0\uc8e0?\n\n- Decision Tree\n- KNN\n- Linear Classification\n- Logistic Regression\n- Lasso\n- Ridge\n- Random Forest\n- XGBoost\n- Perceptron\n\n\uc774\ub7f0 \ubaa8\ub378\uc740 sklearn \ub610\ub294 cuml, pycaret \ub4f1\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uad6c\ud604\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\ucc3e\uc544\ubcf4\uc2dc\uba74\uc11c \ud558\uc2dc\uba74 \uc88b\uc2b5\ub2c8\ub2e4.","d844106f":"categorical feature\uc758 \uacbd\uc6b0\uc5d0\ub294 \uc77c\ubc18\uc801\uc778 \ubaa8\ub378\uc5d0\uc11c \ubc14\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ubcc0\ud658(encoding)\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\n\uc5ec\uae30\uc11c\ub3c4 \ub2e4\uc591\ud55c Encoding \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \n\n- Label Encoding\n- One-Hot Encoding\n- Mean Encoding\n\n\ub4f1\uc774 \uc874\uc7ac\ud558\uace0, category_encoders \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec Encoding\uc744 \uc9c4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","3a973ba9":"## 2. Pandas \ub77c\uc774\ube0c\ub7ec\ub9ac\nPandas \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \ub9ce\uc774 \uc4f0\uc774\ub294 \uac83\ub4e4\uc744 \uc704\uc8fc\ub85c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\nloc, iloc, info, describe, value_counts, head, tail, sample, map, apply, groupby \ub4f1"}}