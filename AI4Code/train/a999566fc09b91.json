{"cell_type":{"39ccbf97":"code","c86274b9":"code","1936828a":"code","bfa2f109":"code","dfec2510":"code","46f550f4":"code","bd3f9219":"code","4d43a0d5":"code","33266675":"code","7e1f1273":"code","6a41f121":"markdown","bc636b25":"markdown","2b28354c":"markdown","86c6532e":"markdown","e1b240b2":"markdown","c06fff46":"markdown"},"source":{"39ccbf97":"import pandas as pd\nimport numpy as np\n\ndef load_dataset(train_or_test='train'):\n    df = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\n    df = modify_features(df)\n    return df\n    \ndef modify_features(df):\n    df.set_index('Id', inplace=True)\n    df = df[df['Cover_Type'] != 5]  # Only 1 sample for type 5. What can I do with it?!\n    df = df.astype({fieldname: 'float64' for fieldname in list(df)[:10]}, copy=False)\n    aspect_in_radian = df['Aspect'] * np.pi \/ 180.\n    df['Aspect_cos'], df['Aspect_sin'] = np.cos(aspect_in_radian), np.sin(aspect_in_radian)\n    del df['Aspect']\n    del df['Soil_Type7'], df['Soil_Type15']  # univalent features\n    \n    cols = list(df)\n    cols = cols[0:1] + cols[-2:] + cols[1:9] + cols[9:-2]  #rearranging; 11 continuous features + 42 boolean features + 1 label\n    df = df[cols]\n    return df\n\ndf = load_dataset()\nprint('Shape:', df.shape)\ndf.head(5)","c86274b9":"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=7, ncols=8, figsize=(24, 24))\nfor num, fieldname in enumerate(df):\n    ax = axs[num \/\/ 8][num % 8]\n    ax.set_title(f'{fieldname}')\n    if num < 11:\n        ax.hist(df[fieldname])\n    else:\n        vc = df[fieldname].value_counts().sort_index()\n        if fieldname == 'Cover_Type':\n            vc = vc.reindex(list(range(1, 7+1)))\n        ax.bar(vc.index, vc)\n    \nplt.tight_layout()\nplt.show()\nplt.close('all')","1936828a":"import matplotlib.pyplot as plt\n\nfilt = 'Wilderness_Area4'\nfig, axs = plt.subplots(nrows=2, ncols=6, figsize=(24, 8))\nfor num, fieldname in zip(range(11), df):\n    ser = df[fieldname]\n    ax = axs[num \/\/ 6][num % 6]\n    ax.set_title(f'{fieldname}')\n    ax.hist(ser[df[filt] == 0], color='C0', alpha=0.5)\n    \n    ax = ax.twinx()\n    ax.hist(ser[df[filt] == 1], color='C1', alpha=0.5)\nax = axs[-1][-1]\nax.set_title('Cover_Type')\ndf['Cover_Type'][df[filt] == 0].value_counts().sort_index().reindex(list(range(1, 8))).plot.bar(ax=ax, rot=0, alpha=0.5, color='C0')\nax = ax.twinx()\ndf['Cover_Type'][df[filt] == 1].value_counts().sort_index().reindex(list(range(1, 8))).plot.bar(ax=ax, rot=0, alpha=0.5, color='C1')\n\nfig.suptitle(f'filtered by {filt}: blue=0, orange=1', fontsize=20)\nplt.tight_layout()\nplt.show()\nplt.close('all')","bfa2f109":"import matplotlib.pyplot as plt\n\nfilt = 'Soil_Type3'\nfig, axs = plt.subplots(nrows=2, ncols=6, figsize=(24, 8))\nfor num, fieldname in zip(range(11), df):\n    ser = df[fieldname]\n    ax = axs[num \/\/ 6][num % 6]\n    ax.set_title(f'{fieldname}')\n    ax.hist(ser[df[filt] == 0], color='C0', alpha=0.5)\n    \n    ax = ax.twinx()\n    ax.hist(ser[df[filt] == 1], color='C1', alpha=0.5)\nax = axs[-1][-1]\nax.set_title('Cover_Type')\ndf['Cover_Type'][df[filt] == 0].value_counts().sort_index().reindex(list(range(1, 8))).plot.bar(ax=ax, rot=0, alpha=0.5, color='C0')\nax = ax.twinx()\ndf['Cover_Type'][df[filt] == 1].value_counts().sort_index().reindex(list(range(1, 8))).plot.bar(ax=ax, rot=0, alpha=0.5, color='C1')\n\nfig.suptitle(f'filtered by {filt}: blue=0, orange=1', fontsize=20)\nplt.tight_layout()\nplt.show()\nplt.close('all')","dfec2510":"import matplotlib.pyplot as plt\n\nfilt = 'Soil_Type6'\nfig, axs = plt.subplots(nrows=2, ncols=6, figsize=(24, 8))\nfor num, fieldname in zip(range(11), df):\n    ser = df[fieldname]\n    ax = axs[num \/\/ 6][num % 6]\n    ax.set_title(f'{fieldname}')\n    ax.hist(ser[df[filt] == 0], color='C0', alpha=0.5)\n    \n    ax = ax.twinx()\n    ax.hist(ser[df[filt] == 1], color='C1', alpha=0.5)\nax = axs[-1][-1]\nax.set_title('Cover_Type')\ndf['Cover_Type'][df[filt] == 0].value_counts().sort_index().reindex(list(range(1, 8))).plot.bar(ax=ax, rot=0, alpha=0.5, color='C0')\nax = ax.twinx()\ndf['Cover_Type'][df[filt] == 1].value_counts().sort_index().reindex(list(range(1, 8))).plot.bar(ax=ax, rot=0, alpha=0.5, color='C1')\n\nfig.suptitle(f'filtered by {filt}: blue=0, orange=1', fontsize=20)\nplt.tight_layout()\nplt.show()\nplt.close('all')","46f550f4":"import matplotlib.pyplot as plt\n\nfilt = 'Cover_Type'\nfig, axs = plt.subplots(nrows=2, ncols=6, figsize=(24, 8))\nfor num, fieldname in zip(range(11), df):\n    ser = df[fieldname]\n    ax = axs[num \/\/ 6][num % 6]\n    ax.set_title(f'{fieldname}')\n    ax.hist(ser[df[filt] == 1], color='C0', histtype='step')\n    \n    ax = ax.twinx()\n    ax.hist(ser[df[filt] == 2], color='C1', histtype='step')\n    \n    ax = ax.twinx()\n    ax.hist(ser[df[filt] == 4], color='C2', histtype='step')\n    \n    ax = ax.twinx()\n    ax.hist(ser[df[filt] == 6], color='C3', histtype='step')\n    \n    ax = ax.twinx()\n    ax.hist(ser[df[filt] == 7], color='C4', histtype='step')\n    \n    \nfig.suptitle(f'filtered by {filt}')\nplt.tight_layout()\nplt.show()\nplt.close('all')","bd3f9219":"wilderness_sum = df.loc[:, 'Wilderness_Area1':'Wilderness_Area4'].sum(axis=1) + df['Wilderness_Area4']\nwilderness_sum.value_counts().sort_index().plot.bar(rot=0)\n# plt.hist(wilderness_sum)\nplt.gca().set_title('Sum of Wilderness_Area\\'s')\nplt.show()\nplt.close('all')\n\nwilderness_comb = df['Wilderness_Area1'].copy()\nfor i in range(2, 4+1):\n    wilderness_comb *= 10\n    wilderness_comb += (i*df[f'Wilderness_Area{i}'])\nvc = wilderness_comb.value_counts()\nvc.index = vc.index.map(lambda x: ','.join(list(str(x).replace('0', ''))))\nvc.sort_index().plot.bar(rot=0)\nplt.gca().set_title('Combination of Wilderness_Area\\'s')\nplt.show()\nplt.close('all')\n\nsoil_sum = df.loc[:, 'Soil_Type1':'Soil_Type40'].sum(axis=1) + df['Soil_Type40']\nsoil_sum.value_counts().sort_index().plot.bar(rot=0)\nplt.gca().set_title('Sum of Soil_Type\\'s')\nplt.show()\nplt.close('all')","4d43a0d5":"p = 41 # prime number is used to treat combinations numerically\nsoil_comb = df['Soil_Type1'].copy()\nfor i in range(2, 40 + 1):\n    if f'Soil_Type{i}' not in df:\n        continue\n    soil_comb += (soil_comb * (p-1) + i) * df[f'Soil_Type{i}']\nprint(soil_comb[soil_comb < p**2].value_counts()) # combination value less than p ** k means there are at mosk k different types of soil\nprint(soil_comb[soil_comb < p**3].value_counts())\nprint(soil_comb[soil_comb < p**4].value_counts())","33266675":"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=7, ncols=8, figsize=(24, 24))\nfor num, fieldname in enumerate(df):\n    ax = axs[num \/\/ 8][num % 8]\n    ax.set_title(f'{fieldname}')\n    ax.plot(df[fieldname].cumsum())\nplt.tight_layout()\nplt.show()\nplt.close('all')","7e1f1273":"import seaborn as sns\n\ndf_small = df.iloc[::10]  # to cope with overflow issue\nsns.heatmap(df_small.corr(method='pearson'))\nplt.show()\nplt.close('all')\nsns.heatmap(df_small.corr(method='kendall'))\nplt.show()\nplt.close('all')\nsns.heatmap(df_small.corr(method='spearman'))\nplt.show()\nplt.close('all')","6a41f121":"# Preparation","bc636b25":"# Correlation coefficients","2b28354c":"# Histograms","86c6532e":"# Major observations:\n- Three fields 'Elevations', 'Horizontal_Distance_To_Roadways' and 'Horizontal_Distance_To_Fire_Points' exhibit different distributions\n- when filtered by 'Widerness_Area4', 'Soil_Type3' and 'Cover_Type'\n- Considering distribution of class label('Cover_Type'), filtering by 'Soil_Type6' results in some distinct ones as well\n- However, each of those filtering boolean variables is highly skewed, and I am not sure about statistical significance \n- Possible combinations of 'Wilderness_area's are observed, whereas the same for 'Soil_Type's seems intractible\n- Seemingly no chunking like November TPS","e1b240b2":"# Cumulative sum","c06fff46":"# Categorical fields"}}