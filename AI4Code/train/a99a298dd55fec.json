{"cell_type":{"b32a65e6":"code","03ff9533":"code","989b3fec":"code","4193ba07":"code","636e6df7":"code","5619ee59":"code","015aa6a7":"code","4acb2427":"code","8d4168ab":"code","9a578f13":"code","2f4ffe58":"code","e4de5db3":"code","85346bcf":"code","f0f4cc6d":"code","4c5f6761":"code","54fd2d98":"code","def83824":"code","dec8467c":"code","b5606580":"code","ada2848e":"code","7fad47e9":"code","825f11c9":"code","f083d9bb":"code","00ca65fa":"markdown"},"source":{"b32a65e6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\n# minmaxscaler\uc640\ub3c4 \ube44\uc2b7\ud558\uc9c0\ub9cc, outliers\uc5d0 \ub300\ud574\uc11c \ub354 \uc798 \uc7a1\ub294 robustscaler\uc744 \uc0ac\uc6a9\ud574\ubcf4\uc790.\nfrom sklearn.preprocessing import RobustScaler\n#feature \uac1c\uc218\uac00 \ub108\ubb34 \ub9ce\uc73c\ubbc0\ub85c PCA\ub97c \ud65c\uc6a9\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neural_network import MLPClassifier","03ff9533":"data = pd.read_csv('..\/input\/csgo-round-winner-classification\/csgo_round_snapshots.csv')\ndata","989b3fec":"data.isnull()","4193ba07":"#null\uac12\uc774 0\uac1c. \uc804\ucc98\ub9ac\uac00 \uc0ac\uc804\uc5d0 \ub41c\ub4ef?\n#\uc804\uccb4 dataframe\uc758 cell\uc5d0\uc11c null\uac12\uc758 \ucd1d \uac1c\uc218\ub97c \ubc18\ud658\nnp.sum(np.sum(data.isnull()))","636e6df7":"data.select_dtypes(np.number)","5619ee59":"#\ud760... \uc5b4\ub5bb\uac8c drop method\uac00 input\uc73c\ub85c dataframe\uc744 \ubc1b\uc744 \uc218 \uc788\uc9c0?\ndata.drop(data.select_dtypes(np.number), axis=1)","015aa6a7":"data","4acb2427":"#converting data['bomb_planted']'s true, false value into 0,1\n#\uc774\ub807\uac8c \ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\ub294 \uae30\uc874\uc758 \uac12\uc774 true, false\ub85c\ub9cc \uad6c\uc131\ub418\uc5b4 \uc788\uc744\ub54c\ndata['bomb_planted'] = data['bomb_planted'].astype(np.int16)","8d4168ab":"encoder = LabelEncoder()\n\ndata['map'] = encoder.fit_transform(data['map'])\nmap_mappings={index : label for index, label in enumerate(encoder.classes_)}\nprint(map_mappings)","9a578f13":"data['round_winner'] = encoder.fit_transform(data['round_winner'])\nroundwinner_mappings={index : label for index, label in enumerate(encoder.classes_)}\nprint(roundwinner_mappings)","2f4ffe58":"data","e4de5db3":"y=data['round_winner']\nX=data.drop('round_winner', axis=1)","85346bcf":"#mean\uc744 0\uc73c\ub85c scaling\nscaler = RobustScaler()\nX= scaler.fit_transform(X)\npd.DataFrame(X)","f0f4cc6d":"sns.heatmap(pd.DataFrame(X).corr())","4c5f6761":"pca = PCA(n_components=96)\npca.fit(X)","54fd2d98":"plt.hist(pca.explained_variance_ratio_, bins=96)\nplt.show()","def83824":"pca.explained_variance_ratio_","dec8467c":"#alpha\uac12\uc744 \uc81c\uc678\ud55c \ubd80\ubd84\uae4c\uc9c0\ub294 total_variance\uac12\uc5d0 \ub4e4\uc5b4\uac00\uc57c \ud55c\ub2e4.\ndef getKComponents(pca, alpha):\n    total_variance=0\n    for feature, variance in enumerate(pca.explained_variance_ratio_):\n        total_variance+=variance\n        if (total_variance>1-alpha):\n            return feature+1\n    return pca.explained_variance_ratio_\n        ","b5606580":"#96 features\uac00 33 features\ub85c \uc904\uc74c. 95%\uc758 data \uc124\uba85\uac00\nk = getKComponents(pca, 0.05)","ada2848e":"X=pca.transform(X)[:, 0:k]\npd.DataFrame(X)","7fad47e9":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)","825f11c9":"log_model = LogisticRegression()\nnn_model = MLPClassifier(verbose=True)\n\nlog_model.fit(X_train, y_train)\nnn_model.fit(X_train, y_train)","f083d9bb":"#80%\uc758 \uc608\uce21!! \ub9e4\uc6b0 \uc591\ud638\nprint(f\"Logistic model : {log_model.score(X_test, y_test)}\")\nprint(f\"Neural Net model : {nn_model.score(X_test, y_test)}\")","00ca65fa":"**Features\uac00 \ub108\ubb34 \ub9ce\uc73c\ubbc0\ub85c\n=>> Correaltion metrics\uc640 PCA\uc0ac\uc6a9**"}}