{"cell_type":{"98e17907":"code","54ea00a2":"code","319d6d68":"code","2889afab":"code","66bbe62b":"code","cc55095e":"code","723d20b2":"code","3ba62fbd":"code","78458c08":"code","44600f80":"code","38bd98f3":"code","d0612e71":"code","d76c1a61":"code","8ef12341":"code","b453e4a9":"code","0c830657":"code","6df1d71a":"code","b482f107":"code","ad3544cd":"code","acd04f27":"code","b67bc9d3":"code","7c6e5562":"code","2378086f":"code","1330e024":"code","6c3c8a59":"code","fe85306f":"code","cecf0d3b":"code","9f21adaa":"code","1f00784a":"code","ac480447":"code","feb3bc19":"code","72cc4c1e":"code","64d6a1f0":"code","67a0af42":"code","ec171265":"code","a6e24ab4":"code","5c50262d":"code","476d6808":"code","5fb3c773":"code","b3663b06":"code","02128123":"code","30d15896":"code","ece7d99a":"code","5e9b523b":"code","b9c911ea":"code","374f28b9":"code","b3a3adb4":"code","26514c25":"code","89edf12d":"code","c9cdc27e":"code","3869518d":"code","4cba65c4":"code","b3b66904":"code","bc1c9f5d":"code","6afc9011":"code","a6d04a12":"code","42466d2e":"code","62572513":"code","fd6d760c":"code","f08fbc33":"code","c6311c46":"code","8085ca32":"code","83974e8c":"code","adc11d93":"code","015e0188":"code","4ff78de8":"code","1a3110c1":"code","9b1667a7":"code","be0dd4c7":"code","ebcfd957":"code","36205965":"code","77c11ab3":"code","cf433e33":"code","4be52b28":"code","1757abaa":"code","18e6b5a5":"code","d2fbe396":"code","757ee955":"code","53659f5e":"code","a08331e3":"code","34f2e22e":"code","482a05c2":"code","32eaf6ff":"code","1260ed59":"code","a29677cf":"code","e92340f1":"code","64d5835d":"code","e0894ef1":"code","1da23c3b":"code","b9e10145":"code","fbb67709":"code","1b23e4ee":"code","fe11673e":"code","510d1f10":"code","75bfd9f9":"code","38d66537":"code","75e1f016":"code","fc4a4210":"code","55c8ae18":"code","ebd9c104":"code","6b531488":"code","ccfcfd17":"code","3a08f414":"code","19703cf5":"code","b58a6a50":"code","1c7fbe8e":"code","984d516a":"code","5f93c827":"code","2b605445":"code","505bfca8":"code","6ce8b5ae":"code","e26a44cb":"code","447e7f3e":"code","4fa146e5":"code","6348f79a":"code","ac0e2163":"code","6229389f":"code","64a65eb3":"code","84e3aab6":"code","6a0228a5":"code","4319c9af":"code","9b84b251":"code","37ec7fc5":"code","68cd984a":"code","d60146f9":"code","c852082c":"code","6d8de470":"code","a4d4a13d":"code","9ce91404":"code","c66c8127":"code","ee55a4d5":"code","fbc9feba":"code","8c3adfe2":"code","482a2a8e":"code","d1a95c3e":"code","5b38a1df":"code","d3c30649":"code","5dc82c78":"code","f5e96c02":"code","77e62f34":"code","d418bb2b":"code","36cee619":"code","f6403d71":"code","bb29f390":"code","4c35bd69":"code","1dfb3e76":"code","6f333da3":"code","0ed097d7":"code","22991355":"code","c3eec88a":"code","79b5a455":"code","e2369137":"code","bd0df458":"code","99351866":"code","a29b1c50":"code","20bfc086":"code","e5aae78d":"code","fbd4158e":"code","25d8b382":"code","76bfe882":"code","8e1a8227":"code","a5dcf53c":"code","2f1475ff":"code","d63f4318":"code","e4784269":"code","1a8c813d":"code","515ab3d0":"code","baff7aaf":"code","ceace0bd":"code","8a746469":"code","81179b19":"code","c97cb65f":"code","0437e653":"code","e6936e11":"code","4a67c250":"code","64d095d7":"code","b5477d5f":"code","bff640f5":"code","d24f9d66":"code","88abe2ed":"code","5d6dc88d":"code","b952e423":"code","1ac3f49f":"code","28b1c576":"code","5a138838":"code","16524afd":"code","1b18f3ad":"code","a0a2c9c3":"code","44ba0c9c":"code","55d30c1a":"code","cfcdaf2d":"code","62422a23":"code","416eb9eb":"code","b717ba57":"code","d225a3e4":"code","f84686aa":"code","d3bf331f":"code","bd3240e6":"code","4cd97cbf":"code","b549bc2a":"code","f030c1a9":"code","3e3a13b6":"code","62199e97":"code","f017a99c":"code","ee28dbef":"code","2d5fc539":"code","6479a17c":"code","144f58b9":"code","60e5be91":"code","8b7d1160":"code","91b93784":"code","4bb3f49e":"code","a64f21db":"code","31073849":"code","057ebbff":"code","7b30a7a9":"code","023d0328":"code","56538afd":"code","600a97c4":"code","cb462b4b":"code","186749fe":"code","5eae04b9":"code","abb63d84":"code","6a101ea2":"code","4fc9d159":"code","791ae945":"code","aaacca9c":"code","c5b882d4":"code","3c11c5b2":"code","a03636c4":"code","4d3faa0b":"code","08a7a1ef":"code","d56e0eaf":"code","2ae0fe37":"code","99ec88ab":"code","f5fa9341":"code","6063f756":"code","61b7ee83":"code","802f60ae":"code","05a50a19":"code","e6bece93":"code","38228dd0":"code","8fd3befc":"code","266d6073":"code","0d7fa4d5":"code","5046ad31":"code","5dfb9a8b":"code","2f4bc835":"code","007d5d21":"code","2c4f6fe9":"code","a734a3cd":"code","daf377e9":"code","17a17c54":"code","eb91a513":"code","346b43cb":"code","d1b35d26":"code","87951f4b":"code","cd56c60c":"code","64fba818":"code","e2a250c5":"code","35ccfd81":"code","9b7469ce":"code","bc408293":"code","edcdaa94":"code","ab65bcb1":"code","626ccb44":"code","26559d68":"code","30d2237d":"code","f461c3c1":"code","668374f1":"code","1c5f4474":"code","01333c87":"code","f5ff94a0":"code","e98f8b1c":"code","61d8fc8b":"code","bb89d44f":"code","17044bf6":"code","46d99f8c":"code","68bde29c":"code","a039e575":"code","d22fa1c3":"code","1338dcee":"code","fd81e50f":"code","7ac3397c":"code","5530721d":"code","f43e6041":"markdown","5dd298b8":"markdown","9689fa8b":"markdown","4e6331f2":"markdown","304e37cf":"markdown","3fa5a9aa":"markdown","862cd562":"markdown","a51433a8":"markdown","725f3573":"markdown","a18b5348":"markdown","b481ce50":"markdown","12a176ac":"markdown","f3b841fd":"markdown","2b066082":"markdown","eec68c9c":"markdown","2e33649a":"markdown","a1f50c69":"markdown","0b514953":"markdown","264a2eca":"markdown","59056675":"markdown","500c5cb5":"markdown","d033ac1e":"markdown","161bcdd2":"markdown","eb7b6bda":"markdown","b42d3c62":"markdown","8021e1d0":"markdown","e0e2b8a2":"markdown","696ce2c6":"markdown","32adea89":"markdown","6735707f":"markdown","4f96ac28":"markdown","7ce5cb55":"markdown","1aa84f39":"markdown","40005d81":"markdown","657a4bc2":"markdown","4ee0a93b":"markdown","5efabb22":"markdown","9dc1b4d8":"markdown","addaf84e":"markdown","21c9fd6f":"markdown","6363bc75":"markdown","2b536673":"markdown","c6f2478a":"markdown","554f80f4":"markdown","45fefb53":"markdown","c160c389":"markdown","79061845":"markdown","34bdb234":"markdown","f520d95b":"markdown","0d8db22e":"markdown","5eb2d3d8":"markdown","b7f8a4f4":"markdown","7e131a4d":"markdown","bfa4be86":"markdown","ee850c5e":"markdown","0005d5aa":"markdown","083c0577":"markdown","808f88f3":"markdown","7dacef62":"markdown","158c49ce":"markdown","91a1e916":"markdown","ed45a3f0":"markdown","80f390e2":"markdown","27d4edf1":"markdown","3b1235bd":"markdown","bb707c1f":"markdown","7838e7a6":"markdown","d5904a21":"markdown","27350925":"markdown","06189a2f":"markdown","6ebdbb22":"markdown","c540e06b":"markdown","bdad351d":"markdown","9f709b54":"markdown","78137dc7":"markdown","c8662106":"markdown","9560a92c":"markdown","e8dc93dd":"markdown","f1eff3f6":"markdown","94ab0e2d":"markdown","437440eb":"markdown","af64ce48":"markdown","2811f7c3":"markdown","af087fb8":"markdown","42c59d3f":"markdown","cc891a92":"markdown","faf82f98":"markdown","7ba70e61":"markdown","78b135ae":"markdown","130ba20a":"markdown","8b028f79":"markdown","91bf2db3":"markdown","6d492dab":"markdown","6e48f5e6":"markdown","86e819d5":"markdown","80235313":"markdown","b41780ff":"markdown","2f535255":"markdown","ed439feb":"markdown","553f95cc":"markdown","968dd519":"markdown","86ebeb3f":"markdown","f9f16570":"markdown","43495b31":"markdown","bf004eeb":"markdown","5ecb5c42":"markdown","c6bc3425":"markdown","bcf6e5ad":"markdown","b54348dc":"markdown","535cc975":"markdown"},"source":{"98e17907":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns                                       \n%matplotlib inline\nsns.set()\npd.set_option('mode.chained_assignment', None)      # To suppress pandas warnings.\npd.set_option('display.max_colwidth', -1)           # To display all the data in each column\npd.options.display.max_columns = 50                 # To display every column of the dataset in head()\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom subprocess import check_output","54ea00a2":"#!pip install -U matplotlib","319d6d68":"#!pip install pandas-profiling --upgrade","2889afab":"import pandas_profiling \nfrom pandas_profiling import ProfileReport\n#from pandas_profiling.utils.cache import cache_file","66bbe62b":"pandas_profiling.__version__","cc55095e":"#pip install -U plotly","723d20b2":"file1=\"..\/input\/indian-super-league\/All_Matches.csv\"\nallmatches_df = pd.read_csv(file1,encoding='ISO-8859-1',sep=\"|\")\nallmatches_df.head(3)","3ba62fbd":"file1=\"..\/input\/indian-super-league\/Match_Info.csv\"\nmatchinfo_df = pd.read_csv(file1,encoding='ISO-8859-1',sep=\"|\")\nmatchinfo_df.head(3)","78458c08":"file1=\"..\/input\/indian-super-league\/Season_Teams.csv\"\nseasonteams_df = pd.read_csv(file1,encoding='ISO-8859-1',sep=\"|\")\nseasonteams_df.head(3)","44600f80":"file1=\"..\/input\/indian-super-league\/Teams_Profile.csv\"\ntmprof_df = pd.read_csv(file1,encoding='ISO-8859-1',sep=\"|\")\ntmprof_df.head(3)","38bd98f3":"file1=\"..\/input\/indian-super-league\/Player_Bio.csv\"\nplayerbio_df = pd.read_csv(file1,encoding='ISO-8859-1',sep=\"|\")\nplayerbio_df.head(3)","d0612e71":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(allmatches_df)","d76c1a61":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(matchinfo_df)","8ef12341":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(seasonteams_df)","b453e4a9":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(tmprof_df)","0c830657":"playerbio_df['season'].unique()","6df1d71a":"playerbio_df.replace(to_replace='2014 playoffs',value='2014',inplace=True)\nplayerbio_df.replace(to_replace='2015 playoffs',value='2015',inplace=True)\nplayerbio_df.replace(to_replace='2016 playoffs',value='2016',inplace=True)\nplayerbio_df.replace(to_replace='2017 playoffs',value='2017',inplace=True)\nplayerbio_df.replace(to_replace='2017\/2018 playoffs',value='2017',inplace=True)\nplayerbio_df.replace(to_replace='2017\/2018',value='2017',inplace=True)\nplayerbio_df.season.unique()","b482f107":"playerbio_df = playerbio_df.drop_duplicates(subset=['season', 'player'])\nplayerbio_df.describe(include='all')","ad3544cd":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(playerbio_df)","acd04f27":"playerbio_df['height.cm'].mode()","b67bc9d3":"playerbio_df['height.cm'].median()","7c6e5562":"playerbio_df['height.cm'].mean()","2378086f":"playerbio_df['height.cm'].fillna(178.0,inplace=True)\nprint(playerbio_df['height.cm'].mean())\nprint(playerbio_df['height.cm'].median())\nprint(playerbio_df['height.cm'].mode())\nprint(playerbio_df['height.cm'].isnull())","1330e024":"#!pip install pandas-profiling                #in case need to download before upgrade\n\n# This to be used for Local environment\n'''\nprofile = ProfileReport(allmatches_df)\n\n#profile = allmatches_df.profile_report(title=\"ISL_DATA_All_Mateches_before_preprocessing\", progress_bar=True, minimal=True)\nprofile.to_file(\"ISL_DATA_All_Mateches_before_preprocessing.html\")\n'''\n# This to be used for Google Collab: profile.to_widgets() not working so used to_notebook_iframe\n\nprofile = ProfileReport(allmatches_df,title = 'ISL_DATA_All_Mateches_before_preprocessing',html={'style':{'full_width':True}})\nprofile.to_notebook_iframe()\nprofile.to_file(output_file=\"ISL_DATA_All_Mateches_before_preprocessing.html\")","6c3c8a59":"allmatches_df['Team1_Code'].value_counts()","fe85306f":"allmatches_df['Team2_Code'].value_counts()","cecf0d3b":"m_df=pd.merge(left = matchinfo_df, right = allmatches_df, on = 'MatchID', how ='outer')\nmatch_df = m_df.set_index('MatchID')\nmatch_df.head(3)","9f21adaa":"match_df['Stadium'].value_counts()","1f00784a":"match_df.drop('Asst_Referee_1',axis=1,inplace=True)\nmatch_df.drop('Asst_Referee_2',axis=1,inplace=True)\nmatch_df.drop('PSO',axis=1,inplace=True)\nmatch_df.drop('AET',axis=1,inplace=True)\nmatch_df.head(2)","ac480447":"match_df.describe(include = 'all')","feb3bc19":"match_df['HT_Team1_Goals'].isnull().value_counts()","72cc4c1e":"match_df['HT_Team2_Goals'].isnull().value_counts()","64d6a1f0":"match_df['HT_Team1_Goals'].fillna(0,inplace=True)\nmatch_df['HT_Team2_Goals'].fillna(0,inplace=True)","67a0af42":"match_df['HT_Team1_Goals'].isnull().value_counts()","ec171265":"match_df['HT_Team2_Goals'].isnull().value_counts()","a6e24ab4":"match_df['Attendance'].isnull().value_counts()","5c50262d":"match_df[match_df.Attendance.isnull()].Stadium","476d6808":"match_df.groupby(['Stadium'])['Attendance'].agg(['sum','mean','count'])","5fb3c773":"match_df.loc['S01M013','Attendance']=33.28\nmatch_df.loc['S04M065','Attendance']=15.22\nmatch_df.loc['S04M073','Attendance']=21.56","b3663b06":"print(match_df.loc['S01M013'].Attendance,match_df.loc['S04M065'].Attendance,match_df.loc['S04M073'].Attendance)","02128123":"match_df['Attendance'].isnull().value_counts()","30d15896":"match_df.describe(include = 'all')","ece7d99a":"match_df[\"HT_Team1_Goals\"].fillna(0, inplace = True)\nmatch_df[\"ET_Team1_Goals\"].fillna(0, inplace = True)\nmatch_df[\"PS_Team1_Goals\"].fillna(0, inplace = True)\nmatch_df[\"HT_Team2_Goals\"].fillna(0, inplace = True)\nmatch_df[\"ET_Team2_Goals\"].fillna(0, inplace = True)\nmatch_df[\"PS_Team2_Goals\"].fillna(0, inplace = True)\nmatch_df.head(2)","5e9b523b":"match_df.describe(include = 'all')","b9c911ea":"match_df.info()","374f28b9":"match_df.dtypes","b3a3adb4":"match_df['Team1_Goal']=match_df[['FT_Team1_Goals','ET_Team1_Goals','PS_Team1_Goals']].sum(axis=1)\nmatch_df['Team2_Goal']=match_df[['FT_Team2_Goals','ET_Team2_Goals','PS_Team2_Goals']].sum(axis=1)\nmatch_df['Total_HT_Goal']=match_df[['HT_Team1_Goals','HT_Team2_Goals']].sum(axis=1)\nmatch_df['Total_Goal']=match_df[['Team1_Goal','Team2_Goal']].sum(axis=1)\nmatch_df.head(3)","26514c25":"def fwin(row):\n    if row['Team1_Goal']== row['Team2_Goal']:\n        val = 'Draw'\n    elif row['Team1_Goal'] > row['Team2_Goal']:\n        val = row['Team1_Code']\n    else:\n        val = row['Team2_Code']\n    return val","89edf12d":"def floss(row):\n    if row['Team1_Goal']== row['Team2_Goal']:\n        val = 'Draw'\n    elif row['Team1_Goal'] > row['Team2_Goal']:\n        val = row['Team2_Code']\n    else:\n        val = row['Team1_Code']\n    return val","c9cdc27e":"match_df['Results_Win'] = match_df.apply(fwin, axis=1)\nmatch_df['Results_Loss'] = match_df.apply(floss, axis=1)\nmatch_df.head(3)","3869518d":"def Team_win(row):\n    if row['Team1_Code']== row['Results_Win']:\n        val = 'Home'\n    elif row['Team2_Code'] == row['Results_Win']:\n        val = 'Away'\n    else:\n        val = 'Draw'\n    return val","4cba65c4":"match_df['Team_Win'] = match_df.apply(Team_win, axis=1)","b3b66904":"def ht_win(row):\n    if row['HT_Team1_Goals']== row['HT_Team2_Goals']:\n        val = 'Draw'\n    elif row['HT_Team1_Goals'] > row['HT_Team2_Goals']:\n        val = row['Team1_Code']\n    else:\n        val = row['Team2_Code']\n    return val","bc1c9f5d":"match_df['HT_Results'] = match_df.apply(ht_win, axis=1)","6afc9011":"def ft_win(row):\n    if row['FT_Team1_Goals']== row['FT_Team2_Goals']:\n        val = 'Draw'\n    elif row['FT_Team1_Goals'] > row['FT_Team2_Goals']:\n        val = row['Team1_Code']\n    else:\n        val = row['Team2_Code']\n    return val","a6d04a12":"match_df['FT_Results'] = match_df.apply(ft_win, axis=1)","42466d2e":"def ht_ft(row):\n    if row['Results_Win']== row['FT_Results']:\n        if row['FT_Results']== row['HT_Results']:\n            val = '1st Half'\n        else:\n            val = '2nd Half'\n    else:\n        val = 'ET & PS'\n    return val","62572513":"match_df['Match_Decider'] = match_df.apply(ht_ft, axis=1)","fd6d760c":"match_df.describe(include = 'all')","f08fbc33":"isl1=match_df.sort_values(by='Season')\nisl1['Season'].unique()","c6311c46":"isl1=match_df.sort_values(by='Season')\nisl1['Season'].unique()","8085ca32":"match_df.replace(to_replace='2017\/2018',value='2017',inplace=True)\nmatch_df.Season.value_counts()","83974e8c":"def missing_data(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data(match_df)","adc11d93":"#!pip install pandas-profiling                #in case need to download before upgrade\n\n# This to be used for Local environment\n'''\nprofile = ProfileReport(allmatches_df)\n#profile = allmatches_df.profile_report(title=\"ISL_DATA_All_Mateches_after_preprocessing\", progress_bar=True, minimal=True)\nprofile.to_file(\"ISL_DATA_All_Mateches_after_preprocessing.html\")\n'''\n\n# This to be used for Google Collab: profile.to_widgets() not working so used to_notebook_iframe\n\nprofile = ProfileReport(match_df,title = 'ISL_DATA_All_Mateches_after_preprocessing',html={'style':{'full_width':True}})\nprofile.to_notebook_iframe()\nprofile.to_file(output_file=\"ISL_DATA_All_Mateches_after_preprocessing.html\")","015e0188":"#trends over season in isl\nsns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.distplot([tuple(match_df.Season)],bins=4)\n\nplt.xlabel('ISL seasons', color='blue')\nplt.title('ISL Match Distribution across the Years',color='red',fontsize=30)","4ff78de8":"match_df.reset_index(inplace=True)","1a3110c1":"seasonMatches=match_df.groupby(['Season'])['MatchID'].count().reset_index()\nseasonMatches.columns=['Seasons','TotalMatchesPlayed']\nseasonMatches","9b1667a7":"seasonMatches.plot(x='Seasons', y='TotalMatchesPlayed', kind='bar')\nplt.xlabel('ISL season year',fontsize=15)\nplt.ylabel('No of ISL matches ',fontsize=15)\nplt.title('No of matches played per year',fontsize=30)","be0dd4c7":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.distplot([tuple(match_df.Attendance)],bins=10)\n\nplt.xlabel('Attendance in 1000', color='blue')\nplt.title('ISL Attendance Distribution',color='red',fontsize=30)","ebcfd957":"meanatt=match_df.pivot_table(index='Season',values='Attendance',aggfunc='mean')\nmeanatt.reset_index(inplace=True)\nmeanatt","36205965":"attendancedist=match_df.groupby(['Season','Stadium'])['Attendance'].mean().reset_index()\nattendancedist.column=['Seasons','Stadium','Attendance']\nattendancedist.head(3)","77c11ab3":"meanatt.plot(x='Season', y='Attendance', kind='bar')\nplt.xlabel('Seasons',fontsize=15)\nplt.ylabel('Mean of attendance in 1000',fontsize=15)\nplt.title('Mean attendance across the year',fontsize=30)","cf433e33":"tmprof_df","4be52b28":"match_df.Stadium.unique()","1757abaa":"tmprof_df.Stadium.unique()","18e6b5a5":"stadattm=match_df.pivot_table(index='Stadium',values='Attendance',aggfunc='max')\nstadattm.reset_index(inplace=True)\nstadattm","d2fbe396":"stadium_capacity={'Stadium':['Salt Lake Stadium (Kolkata \/ India)',\n       'Indira Gandhi Athletic Stadium (Guwahati \/ India)',\n       'Jawaharlal Nehru Stadium (Delhi \/ India)',\n       'Fatorda Stadium (Margao \/ India)',\n       'DY Patil Stadium (Mumbai \/ India)',\n       'Jawaharlal Nehru Stadium (Chennai \/ India)',\n       'Balewadi Stadium (Pune \/ India)',\n       'Jawaharlal Nehru Stadium (Kochin \/ India)',\n       'Rabindra Sarobar Stadium (Kolkata \/ India)',\n       'Mumbai Football Arena (Mumbai \/ India)',\n       'Sree Kanteerava Stadium (Bangalore \/ India)',\n       'Jawaharlal Nehru Stadium (Margao, Goa \/ India)',\n       'JRD Tata Sports Complex (Jamshedpur \/ India)',\n       'Kalinga Stadium (Bhubaneswar \/ India)'], \n    'Capacity':[66.687,23.850,34.230,19.500,37.000,26.976,11.900,37.245,15.000,22.000,24.000,19.000,60.000,8.500]}\nstad_cap=pd.DataFrame.from_dict(stadium_capacity)\nstad_cap","757ee955":"match_df=pd.merge(match_df,stad_cap,how='left',on='Stadium')\nmatch_df.head(3)","53659f5e":"match_df['Att percent']=100*match_df['Attendance']\/match_df['Capacity']\nmatch_df.head(3)","a08331e3":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.distplot([tuple(match_df['Att percent'])],bins=10)\n\nplt.xlabel('Attendance percentage', color='blue')\nplt.title('ISL Attendance % Distribution',color='red',fontsize=30)","34f2e22e":"tgoala=match_df.pivot_table(index='Season',values='Total_Goal',aggfunc='sum')\ntgoala.reset_index(inplace=True)\ntgoala","482a05c2":"thgoala=match_df.pivot_table(index='Season',values='Total_HT_Goal',aggfunc='sum')\nthgoala.reset_index(inplace=True)\nthgoala","32eaf6ff":"tgoalm=match_df.pivot_table(index='Season',values='Total_Goal',aggfunc='mean')\ntgoalm.reset_index(inplace=True)\ntgoalm","1260ed59":"thgoalm=match_df.pivot_table(index='Season',values='Total_HT_Goal',aggfunc='mean')\nthgoalm.reset_index(inplace=True)\nthgoalm","a29677cf":"seasons_df=pd.merge(left = thgoala, right = tgoala, on = 'Season', how ='outer')\nseasons_df","e92340f1":"seasonsm_df=pd.merge(left = thgoalm, right = tgoalm, on = 'Season', how ='outer')\nseasonsm_df['HT_Mean_Goal']=seasonsm_df['Total_HT_Goal']\nseasonsm_df['FT_Mean_Goal']=seasonsm_df['Total_Goal']\nseasonsm_df.drop(['Total_HT_Goal','Total_Goal'],axis=1,inplace=True)\nseasonsm_df","64d5835d":"s1_df=pd.merge(left = seasonsm_df, right = meanatt, on = 'Season', how ='outer')\ns1_df['Mean Attendance']=s1_df['Attendance']\ns1_df.drop(['Attendance'],axis=1,inplace=True)\ns1_df","e0894ef1":"season_details_df=pd.merge(left = seasons_df, right = s1_df, on = 'Season', how ='outer')\nseason_details_df","1da23c3b":"season_details_df.head(2)","b9e10145":"meanattper=match_df.pivot_table(index='Season',values='Att percent',aggfunc='mean')\nmeanattper.reset_index(inplace=True)\nmeanattper","fbb67709":"season_details_df=pd.merge(left = season_details_df, right = meanattper, on = 'Season', how ='outer')\nseason_details_df","1b23e4ee":"season_details_df['Att percent'].plot(kind='pie', fontsize=14, autopct='%3.1f%%', \n                                               figsize=(10,10), shadow=True, startangle=135,labels=season_details_df.Season ,legend=True, cmap='coolwarm_r')\n\nplt.ylabel('Attendance percentage')\nplt.title('Pie chart showing the attendance percentage across seasons')","fe11673e":"match_df.head(1)","510d1f10":"teamwinner=match_df['Team_Win'].value_counts().reset_index()\n\nhome=(teamwinner.loc[teamwinner['index']=='Home','Team_Win']\/teamwinner['Team_Win'].sum())*100\naway=(teamwinner.loc[teamwinner['index']=='Away','Team_Win']\/teamwinner['Team_Win'].sum())*100\ndrawn=(teamwinner.loc[teamwinner['index']=='Draw','Team_Win']\/teamwinner['Team_Win'].sum())*100\npos=('home','away','drawn')\nprint(home,away,drawn)","75bfd9f9":"plt.bar(pos,(41.37,32.37,26.26))\nplt.xlabel('Team win', color='r')\nplt.ylabel('Team win percentage ', color='r')\nplt.title('Percentage of team win at venues', color='m', fontsize=22)","38d66537":"match_df[match_df['Season']=='2014']['Team_Win'].value_counts().plot(kind='pie', explode=[0.05,0.05,0.05], fontsize=14, autopct='%3.1f%%', \n                                               figsize=(10,10), shadow=True, startangle=135, legend=True, cmap='summer')\n\nplt.ylabel('Team win at vanue percentage')\nplt.title('Pie chart showing the proportion of winning percent at venues : Season 2014')","75e1f016":"match_df[match_df['Season']=='2015']['Team_Win'].value_counts().plot(kind='pie', explode=[0.05,0.05,0.05], fontsize=14, autopct='%3.1f%%', \n                                               figsize=(10,10), shadow=True, startangle=135, legend=True, cmap='spring')\n\nplt.ylabel('Team win at vanue percentage')\nplt.title('Pie chart showing the proportion of winning percent at venues:2015')","fc4a4210":"match_df[match_df['Season']=='2016']['Team_Win'].value_counts().plot(kind='pie', explode=[0.05,0.05,0.05], fontsize=14, autopct='%3.1f%%', \n                                               figsize=(10,10), shadow=True, startangle=135, legend=True, cmap='autumn')\n\nplt.ylabel('Team win at vanue percentage')\nplt.title('Pie chart showing the proportion of winning percent at venues:2016')","55c8ae18":"match_df[match_df['Season']=='2017']['Team_Win'].value_counts().plot(kind='pie', explode=[0.05,0.05,0.05], fontsize=14, autopct='%3.1f%%', \n                                               figsize=(10,10), shadow=True, startangle=135, legend=True, cmap='winter')\n\nplt.ylabel('Team win at vanue percentage')\nplt.title('Pie chart showing the proportion of winning percent at venues:2017')","ebd9c104":"match_df['Team_Win'].value_counts().plot(kind='pie', explode=[0.05,0.05,0.05], fontsize=14, autopct='%3.1f%%', \n                                               figsize=(10,10), shadow=True, startangle=135, legend=True, cmap='coolwarm')\n\nplt.ylabel('Team win at vanue percentage')\nplt.title('Pie chart showing the proportion of winning percent at venues : All seasons')","6b531488":"most_htWinner=match_df['HT_Results'].value_counts()\nmost_htWinner","ccfcfd17":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.countplot(y='HT_Results', data=match_df)\nplt.title('Half Time Results',fontsize=20, color='red')","3a08f414":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.countplot(y='FT_Results', data=match_df)\nplt.title('Full Time Results',fontsize=20, color='red')","19703cf5":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.countplot(y='Results_Win', data=match_df)\nplt.title('End Result including ET & PS',fontsize=20, color='red')","b58a6a50":"match_df.Match_Decider.unique()","1c7fbe8e":"decider=match_df['Match_Decider'].value_counts().reset_index()\nprint(decider)\nhalf1stPercentage=(decider.loc[decider['index']=='1st Half','Match_Decider']\/decider['Match_Decider'].sum())*100\nhalf2ndPercentage=(decider.loc[decider['index']=='2nd Half','Match_Decider']\/decider['Match_Decider'].sum())*100\nhalfETPercentage=(decider.loc[decider['index']=='ET & PS','Match_Decider']\/decider['Match_Decider'].sum())*100\npos1=('1st Half Decider','2nd Half Decider','ET\/PS Decider')\nprint(half1stPercentage,half2ndPercentage,halfETPercentage)","984d516a":"plt.bar(pos1,(52.16,46.76,1.08))\nplt.xlabel('Decider phase', color='r')\nplt.ylabel('Decider percentage ', color='r')\nplt.title('Percentage of decider moments of the match', color='m', fontsize=22)","5f93c827":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.distplot([tuple(match_df.HT_Team1_Goals+match_df.HT_Team2_Goals)],bins=6)\n\nplt.xlabel('Goals scored', color='blue')\nplt.title('ISL Goal Distribution: Half Time',color='red',fontsize=30)","2b605445":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.distplot([tuple(match_df.Team1_Goal+match_df.Team2_Goal)],bins=10)\n\nplt.xlabel('Goals scored', color='blue')\nplt.title('ISL Goal Distribution: End Results',color='red',fontsize=30)","505bfca8":"match_df.head(3)","6ce8b5ae":"Most_win=match_df['Results_Win'].value_counts().reset_index()\nMost_win.columns=['Team_name','Total_win']\n\nmatchplayed=pd.concat([match_df['Team1_Code'],match_df['Team2_Code']]).value_counts().reset_index()\nmatchplayed.columns=['Team_name','Total_match_played']\n\nMost_win=pd.merge(Most_win,matchplayed)\n\n\n\nMost_win['win_percentage']=(Most_win['Total_win']\/Most_win['Total_match_played'])*100\n\nMost_win.head(3)","e26a44cb":"plt.barh(Most_win['Team_name'],Most_win['Total_match_played'])\nplt.xlabel('Total Match Played by a Team',color='r')\nplt.ylabel('Teams Name',color='r')\nplt.title('Total Match Played by each Team through out the ISL season',fontsize=16,color='darkgreen')","447e7f3e":"total_win=Most_win['Total_win']\nteamName=Most_win['Team_name']\npos=np.arange(len(Most_win['Team_name']))\nbar_width = 0.35\nplt.barh(pos+bar_width,Most_win['Total_match_played'],bar_width,color='green',edgecolor='black')\nplt.barh(pos,total_win,bar_width,color='yellow',edgecolor='black')\n\nplt.yticks(pos, teamName)\nplt.ylabel('Team Name', fontsize=16)\nplt.xlabel('No Of matches',fontsize=16)\nplt.legend(['TotalMatchPlayed','Total_win'],loc=1)\nplt.title('Total match played VS Total win by each team',fontsize=20, color='blue')","4fa146e5":"def gdiff(row):\n    if row['Team1_Goal']== row['Team2_Goal']:\n        val = 0\n    elif row['Team1_Goal'] > row['Team2_Goal']:\n        val = int(row['Team1_Goal'])- int(row['Team2_Goal']) \n    else:\n        val = int(row['Team2_Goal'])- int(row['Team1_Goal'])\n    return val","6348f79a":"match_df['Goal_diff'] = match_df.apply(gdiff, axis=1)\nmatch_df.head(3)","ac0e2163":"winbygoals=match_df[['Results_Win','Team1_Code','Team2_Code','Goal_diff','Match_Decider']]\n\nwinbygoals=winbygoals[winbygoals['Goal_diff']>0]\nwinbygoals=winbygoals.sort_values('Goal_diff',ascending=False)\nwinbygoals","6229389f":"plt.xticks(rotation=90)\nplt.plot(winbygoals['Results_Win'].head(10),winbygoals['Goal_diff'].head(10),'-gD',color='r')\n#plt.plot(winbygoals['Results_Win'],winbygoals['Goal_diff'],'-gD',color='r')\nplt.xlabel('Team Name', color='r')\nplt.ylabel('Goal Diff', color='r')\nplt.title('Team winner by most goal diff top 10', fontsize=20, color='purple')","64a65eb3":"plt.scatter(winbygoals['Results_Win'],winbygoals['Goal_diff'])\nplt.xticks(rotation=90)\nplt.xlabel('Team Name',color='red')\nplt.ylabel('Goal diff',color='red')\nplt.title('Team win by Goal diff',color='purple',fontsize=20)","84e3aab6":"sorted(winbygoals['Results_Win'].unique())","6a0228a5":"team_codes= {'Results_Win':['ATK', 'BGL', 'CHN', 'DEL', 'GOA', 'JSD', 'KER', 'MUM', 'NEU', 'PUN'],\n         'Teams_Code':[1,2,3,4,5,6,7,8,9,10]}\nteam_codes_df=pd.DataFrame.from_dict(team_codes)\nteam_codes_df1=(pd.merge(team_codes_df,winbygoals,how='left',on='Results_Win')).sort_values('Goal_diff',ascending=False)\nteam_codes_df1","4319c9af":"team_codes_df1.plot(kind='hexbin', x='Teams_Code', y='Goal_diff', figsize=(18, 8), gridsize=25, fontsize=13, colormap='Reds', sharex=False)\n\nplt.title('Hexplot showing the variation of Goal Difference with Teams')\nteam_codes_df","9b84b251":"match_df.plot(kind='hexbin', x='Att percent', y='Goal_diff', figsize=(15, 7), gridsize=25, fontsize=13, colormap='Reds', sharex=False)\n\nplt.title('Hexplot showing the variation of Goal Difference with Att percent each match')","37ec7fc5":"match_df.plot(kind='hexbin', x='Att percent', y='Total_Goal', figsize=(15, 7), gridsize=25, fontsize=13, colormap='Greens', sharex=False)\n\nplt.title('Hexplot showing the variation of Total Goal with Att percent each match')","68cd984a":"match_df.plot(kind='scatter', x='Att percent', y='Total_Goal', figsize=(10, 6), color='purple', grid=False)\n\nplt.title('Scatter plot showing the variation of Total Goal with Att percent each match')","d60146f9":"seasonteams_df.tail(3)","c852082c":"seasonteams_df.replace(to_replace='2017\/2018',value='2017',inplace=True)\nseasonteams_df.tail(3)","6d8de470":"playoff_df=seasonteams_df.pivot_table(index='Team_Code',values='Playoff',aggfunc='sum')\nplayoff_df.reset_index(inplace=True)\nplayoff_df['Total Seasons']=4\nplayoff_df","a4d4a13d":"match_df['Round'].unique()\nwinner=match_df[match_df['Round']=='Final']\nwinner.head(3)","9ce91404":"winner_sesnwise=winner.groupby(['Season'])['Results_Win'].value_counts()\nwinner_sesnwise_df=pd.DataFrame(winner_sesnwise)\nwinner_sesnwise_df.columns=['Count']\nwinner_sesnwise_df.head()\nwinner_sesnwise_df.reset_index(inplace=True)\nwinner_sesnwise_df.columns=['Season','Team_Name','Count']\nwinnersn_df=winner_sesnwise_df.pivot_table(index='Team_Name',values='Count',aggfunc='sum')\nwinnersn_df.reset_index(inplace=True)\nwinnersn_df.columns=['Team_Code','Win']\nwinnersn_df","c66c8127":"playoff_df\nwinnersn_df1=pd.merge(playoff_df,winnersn_df,how='inner',on='Team_Code')\nwinnersn_df1['Conversion Rate']=100*winnersn_df1['Win']\/winnersn_df1['Playoff']\nwinnersn_df1","ee55a4d5":"total_win=winnersn_df1['Win']\nteamName=winnersn_df1['Team_Code']\npos=np.arange(len(winnersn_df1['Team_Code']))\nbar_width = 0.35\nplt.barh(pos+bar_width,winnersn_df1['Total Seasons'],bar_width,color='red',edgecolor='black')\nplt.barh(pos,total_win,bar_width,color='blue',edgecolor='black')\n\nplt.yticks(pos, teamName)\nplt.ylabel('Team Name', fontsize=16)\nplt.xlabel('No Of Wins',fontsize=16)\nplt.legend(['Total Seasons','Total Wins'],loc=0)\nplt.title('Total Seasons VS Win by teams',fontsize=20, color='blue')","fbc9feba":"Most_win_sesnwise=match_df.groupby(['Season'])['Results_Win'].value_counts()\nMost_win_sesnwise=pd.DataFrame(Most_win_sesnwise)\nMost_win_sesnwise.columns=['Count']\nMost_win_sesnwise.head(3)\nMost_win_sesnwise.reset_index(inplace=True)\nMost_win_sesnwise.columns=['Season','Team_Name','Count']\nMost_win_sesnwise.head(3)","8c3adfe2":"df22=Most_win_sesnwise.pivot_table(index='Season',values='Count',aggfunc='sum')\ndf22.reset_index(inplace=True)\ndf22.columns=['Season','Total Count']\ndf22","482a2a8e":"Most_win_sesnwise[Most_win_sesnwise['Season']=='2017'].Count","d1a95c3e":"a1=[]\nb1=[]\nfor i in range(len(Most_win_sesnwise)) : \n    a1.append(Most_win_sesnwise.loc[i, \"Team_Name\"])  \n    b1.append(Most_win_sesnwise.loc[i, \"Count\"])  \nprint(a1)\nprint(b1)","5b38a1df":"# Libraries\nimport matplotlib.pyplot as plt\n \n# Make data: I have 3 groups and 7 subgroups\ngroup_names=['2014', '2015', '2016','2017']\ngroup_size=[61,61,61,95]\nsubgroup_names = a1\nsubgroup_size = b1\n# Create colors\na, b, c,d=[plt.cm.Blues, plt.cm.Reds, plt.cm.Greens,plt.cm.Oranges]\n \n# First Ring (outside)\nfig, ax = plt.subplots()\nax.axis('equal')\nmypie, _ = ax.pie(group_size, radius=5, labels=group_names, colors=[a(0.6), b(0.6), c(0.6), d(0.6)])\nplt.setp( mypie, width=0.5, edgecolor='white')\n \n# Second Ring (Inside)\nmypie2, _ = ax.pie(subgroup_size, radius=5-0.5, labels=subgroup_names, labeldistance=0.9)\nplt.setp( mypie2, width=0.6, edgecolor='white')\nplt.margins(0,0)\n\n# show it\nplt.show()\n","d3c30649":"Most_win_sesnwise_df1=pd.merge(Most_win_sesnwise,df22,how='left',on='Season')\nMost_win_sesnwise_df1\nMost_win_sesnwise_df1['Percentage']=100*Most_win_sesnwise_df1['Count']\/Most_win_sesnwise_df1['Total Count']\nMost_win_sesnwise_df1.head(3)","5dc82c78":"a1=[]\nb1=[]\nfor i in range(len(Most_win_sesnwise_df1)) : \n    a1.append(Most_win_sesnwise_df1.loc[i, \"Team_Name\"])  \n    b1.append(Most_win_sesnwise_df1.loc[i, \"Percentage\"])  \nprint(a1)\nprint(b1)","f5e96c02":"# Libraries\nimport matplotlib.pyplot as plt\n \n# Make data: I have 3 groups and 7 subgroups\ngroup_names=['2014', '2015', '2016','2017']\ngroup_size=[100,100,100,100]\nsubgroup_names = a1\nsubgroup_size = b1\n# Create colors\na, b, c,d=[plt.cm.Blues, plt.cm.Reds, plt.cm.Greens,plt.cm.Oranges]\n \n# First Ring (outside)\nfig, ax = plt.subplots()\nax.axis('equal')\nmypie, _ = ax.pie(group_size, radius=6, labels=group_names, colors=[a(0.6), b(0.6), c(0.6), d(0.6)])\nplt.setp( mypie, width=0.5, edgecolor='white')\n \n# Second Ring (Inside)\nmypie2, _ = ax.pie(subgroup_size,radius=6-0.5, labels=subgroup_names, labeldistance=0.8)\nplt.setp( mypie2, width=0.6, edgecolor='white')\nplt.margins(0,0)\n\nplt.show()\n","77e62f34":"season_details_df","d418bb2b":"sns.pairplot(data=season_details_df[['Total_HT_Goal', 'Total_Goal', 'HT_Mean_Goal', 'FT_Mean_Goal', 'Att percent']], height=2.5, diag_kind='kde')","36cee619":"match_df.head(3)","f6403d71":"import datetime\nmatch_df['Date_Time'] = pd.to_datetime(match_df['Date_Time'])\nmday=match_df[match_df.columns[6]]\nmday.dt.day_name()","bb29f390":"match_df['Day']=match_df['Date_Time'].dt.day_name()\nmatch_df.head(3)","4c35bd69":"df11=match_df[['Total_HT_Goal', 'Total_Goal', 'Goal_diff', 'Att percent','Team_Win','Day']].copy()\ndf11\nsns.pairplot(df11,hue=\"Team_Win\", height=2.5, diag_kind='kde')","1dfb3e76":"corr_mat = df11.corr()\nplt.figure(figsize=(10,8))\nsns.heatmap(corr_mat, annot=True, cmap='viridis')","6f333da3":"Most_win.head(3)","0ed097d7":"corr_mat1 = Most_win.corr()\nplt.figure(figsize=(10,8))\nsns.heatmap(corr_mat1, annot=True, cmap='viridis')","22991355":"match_df.head(2)","c3eec88a":"Most_win","79b5a455":"Most_lost=match_df['Results_Loss'].value_counts().reset_index()\nMost_lost.columns=['Team_name','Total_Loss']\n\nMost_lost=pd.merge(Most_lost,matchplayed)\n\n\n\nMost_lost['Loss_percentage']=(Most_lost['Total_Loss']\/Most_lost['Total_match_played'])*100\n\nMost_lost","e2369137":"Most_lost.drop(['Total_match_played'],axis=1,inplace=True)\nMost_lost.head(3)","bd0df458":"team_stats=pd.merge(Most_win,Most_lost,how='outer',on='Team_name')\nteam_stats['Match_drawn'] = team_stats['Total_match_played'] - team_stats['Total_win']- team_stats['Total_Loss']\nteam_stats['drawn_percentage'] = 100*team_stats['Match_drawn'] \/ team_stats['Total_match_played']\nteam_stats.head(2)","99351866":"Most_htahead=match_df['HT_Results'].value_counts().reset_index()\nMost_htahead.columns=['Team_name','Total_HT_Ahead']\nMost_htahead=pd.merge(Most_htahead,matchplayed)\nMost_htahead","a29b1c50":"Most_htahead.drop(['Total_match_played'],axis=1,inplace=True)\nteam_stats=pd.merge(team_stats,Most_htahead,how='outer',on='Team_name')","20bfc086":"team_stats['HT_ahead_percentage']=(team_stats['Total_HT_Ahead']\/team_stats['Total_match_played'])*100\nteam_stats.head(2)","e5aae78d":"def tmtype(row):\n    if row['win_percentage']> 39 and row['drawn_percentage']< 25:\n        val = 'Aggressive'\n    elif row['Loss_percentage']> 39:\n        val = 'Underperformer'\n    else:\n        val = 'Defensive'\n    return val","fbd4158e":"team_stats['Type'] = team_stats.apply(tmtype, axis=1)\nteam_stats","25d8b382":"team_stats[['Team_name','win_percentage','HT_ahead_percentage','drawn_percentage','Loss_percentage']]","76bfe882":"import pandas\nfrom pandas.plotting import parallel_coordinates\nplt.figure(figsize=(16,9))\nparallel_coordinates(team_stats, \n                    class_column='Type', colormap='Dark2',\n                     cols=['win_percentage','HT_ahead_percentage','drawn_percentage','Loss_percentage'])","8e1a8227":"playerbio_df['position'].value_counts()","a5dcf53c":"playerbio_df.describe(include='all')","2f1475ff":"def missing_data1(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data1(playerbio_df)","d63f4318":"playerbio_df.season.unique()","e4784269":"playerbio_df[playerbio_df.dob.isnull()]","1a8c813d":"playerbio_df['dob'].value_counts().idxmax()","515ab3d0":"playerbio_df['dob'].mode()","baff7aaf":"playerbio_df['dob'].fillna('03\/01\/1994',inplace=True)\nplayerbio_df.head(3)","ceace0bd":"def missing_data1(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data1(playerbio_df)","8a746469":"import datetime\nplayerbio_df['dob'] = pd.to_datetime(playerbio_df['dob'])\nplayerbio_df.dob","81179b19":"playerbio_df.head(3)","c97cb65f":"def agecut(row):\n    if row['season']== '2014':\n        val = '2014-01-01'\n    elif row['season']== '2015':\n        val = '2015-01-01'\n    elif row['season']== '2016':\n        val = '2016-01-01'  \n    else:\n        val = '2017-01-01' \n    return val","0437e653":"playerbio_df['Age_cutoff'] = playerbio_df.apply(agecut, axis=1)\nplayerbio_df.head(3)","e6936e11":"playerbio_df.Age_cutoff.unique()","4a67c250":"playerbio_df['Age_cutoff'] = pd.to_datetime(playerbio_df['Age_cutoff'])\nplayerbio_df.Age_cutoff","64d095d7":"playerbio_df['Age_on_1stJanSeason']=playerbio_df['Age_cutoff'].sub(playerbio_df['dob'],axis=0)\/ np.timedelta64(365, 'D')\nplayerbio_df.head(3)","b5477d5f":"playerbio_df.season.unique()","bff640f5":"playerbio_df.describe(include='all')","d24f9d66":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.distplot([tuple(playerbio_df.Age_on_1stJanSeason)],bins=15)\n\nplt.xlabel('Age', color='blue')\nplt.title('Player Age Distribution',color='red',fontsize=30)","88abe2ed":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.distplot([tuple(playerbio_df['height.cm'])],bins=15)\n\nplt.xlabel('Height', color='blue')\nplt.title('Player Height Distribution',color='red',fontsize=30)","5d6dc88d":"playerbio_df.plot(kind='hexbin', x='Age_on_1stJanSeason', y='height.cm', figsize=(15, 7), gridsize=25, fontsize=13, colormap='Greens', sharex=False)\n\nplt.title('Hexplot showing the variation of Age and height')","b952e423":"plt.figure(figsize=(10, 8))\nsns.boxplot(data=playerbio_df, x='season', y='Age_on_1stJanSeason', palette='coolwarm', width=0.8)\nplt.xticks(rotation=45)","1ac3f49f":"plt.figure(figsize=(10, 8))\nsns.boxplot(data=playerbio_df, x='season', y='height.cm', palette='cool', width=0.8)\nplt.xticks(rotation=45)","28b1c576":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.countplot(y='position', data=playerbio_df)\nplt.title('Player positions',fontsize=20, color='red')","5a138838":"position_sesnwise=playerbio_df.groupby(['season'])['position'].value_counts()\nposition_sesnwise=pd.DataFrame(position_sesnwise)\nposition_sesnwise.columns=['Count']\nposition_sesnwise.head(3)\nposition_sesnwise.reset_index(inplace=True)\nposition_sesnwise.columns=['Season','Positions','Count']\nposition_sesnwise","16524afd":"df24=position_sesnwise.pivot_table(index='Season',values='Count',aggfunc='sum')\ndf24.reset_index(inplace=True)\ndf24.columns=['Season','Total Count']\ndf24","1b18f3ad":"position_sesnwise_df1=pd.merge(position_sesnwise,df24,how='left',on='Season')\nposition_sesnwise_df1\nposition_sesnwise_df1['Percentage']=100*position_sesnwise_df1['Count']\/position_sesnwise_df1['Total Count']\nposition_sesnwise_df1","a0a2c9c3":"A1=[]\nB1=[]\nfor i in range(len(position_sesnwise_df1)) : \n    A1.append(position_sesnwise_df1.loc[i, \"Positions\"])  \n    B1.append(position_sesnwise_df1.loc[i, \"Percentage\"])  \nprint(A1)\nprint(B1)","44ba0c9c":"# Libraries\nimport matplotlib.pyplot as plt\n \n# Make data: I have 3 groups and 7 subgroups\ngroup_names=['2014', '2015', '2016','2017']\ngroup_size=[100,100,100,100]\nsubgroup_names = A1\nsubgroup_size = B1\n \n# Create colors\na, b, c,d=[plt.cm.Blues, plt.cm.Reds, plt.cm.Greens,plt.cm.Oranges]\n \n# First Ring (outside)\nfig, ax = plt.subplots()\nax.axis('equal')\nmypie, _ = ax.pie(group_size, radius=5, labels=group_names, colors=[a(0.6), b(0.6), c(0.6), d(0.6)])\nplt.setp( mypie, width=0.5, edgecolor='white')\n \n# Second Ring (Inside)\nmypie2, _ = ax.pie(subgroup_size,radius=5-0.5, labels=subgroup_names, labeldistance=0.7)\nplt.setp( mypie2, width=0.6, edgecolor='white')\nplt.margins(0,0)\n\n# show it\nplt.show()","55d30c1a":"position_sesnwise_df1.head(3)","cfcdaf2d":"MF1=[]\nDF1=[]\nGK1=[]\nFW1=[]\nfor i in range(len(position_sesnwise_df1)) : \n    if position_sesnwise_df1.loc[i, \"Positions\"]=='MF':\n        MF1.append(position_sesnwise_df1.loc[i, \"Percentage\"]) \n    elif position_sesnwise_df1.loc[i, \"Positions\"]=='DF':\n        DF1.append(position_sesnwise_df1.loc[i, \"Percentage\"]) \n    elif position_sesnwise_df1.loc[i, \"Positions\"]=='GK':\n        GK1.append(position_sesnwise_df1.loc[i, \"Percentage\"])\n    else:  \n        FW1.append(position_sesnwise_df1.loc[i, \"Percentage\"])  \nprint(MF1)\nprint(DF1)\nprint(GK1)\nprint(FW1)","62422a23":"x1 = position_sesnwise_df1['Season'].unique()\nbd1= pd.DataFrame({'MF': MF1, 'DF' : DF1, 'GK' : GK1, 'FW' : FW1})\nax1 = bd1.plot.bar(stacked=True,legend='upper right',figsize=(18,10))\nplt.xticks(np.arange(4),('2014', '2015', '2016', '2017'))\nplt.yticks(np.arange(0, 101, 10))\nax1.legend(loc='upper right')\nplt.show(block=True)","416eb9eb":"playerbio_df","b717ba57":"playerbio_df[playerbio_df['player']=='Sandip Nandy']","d225a3e4":"playerbio_df['season'].unique()","f84686aa":"playerbio_df1456 = playerbio_df.drop_duplicates(subset=['season', 'player'])\nplayerbio_df1456","d3bf331f":"playerbio_df1456[playerbio_df1456['player']=='Sandip Nandy']","bd3240e6":"playerbio_df1456['team'].unique()","4cd97cbf":"playerbio_df1456.shape","b549bc2a":"playerbio_df1456[playerbio_df1456['season'].isnull()]","f030c1a9":"playerbio_df1456.groupby(['season'])['player'].count()","3e3a13b6":"playerbio_df1456['player'].value_counts()","62199e97":"df321=playerbio_df1456['player'].value_counts()\ndf321=pd.DataFrame(df321)\ndf321.columns=['season_count']\ndf321.sort_values('season_count')\ndf321.shape","f017a99c":"df321['season_count'].value_counts()","ee28dbef":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.distplot([tuple(df321['season_count'])],bins=4)\n\nplt.xlabel('Number of seasons', color='blue')\nplt.title('Player Distribution',color='red',fontsize=30)","2d5fc539":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.countplot(y='season_count', data=df321)\nplt.title('Player season count',fontsize=20, color='red')","6479a17c":"playerbio_df.head(2)","144f58b9":"playerbio_df['Age_on_1stJanSeason']=playerbio_df['Age_on_1stJanSeason'].astype(int)\nplayerbio_df.head(6)","60e5be91":"playerbio_df.position.unique()","8b7d1160":"playerbio_df.describe()","91b93784":"df123=playerbio_df[playerbio_df['season']=='2014']\ndf123","4bb3f49e":"plt.figure(figsize=(15,15))\nsns.catplot(x='Age_on_1stJanSeason', y='height.cm', hue=\"season\",\n            kind=\"swarm\", data=playerbio_df,height=8,aspect=1.2)","a64f21db":"# Making bokeh specific imports.\n\nfrom bokeh.plotting import Figure, figure, output_file, show, output_notebook\nfrom bokeh.layouts import column\nfrom bokeh.models import ColumnDataSource, CustomJS, Slider, HoverTool\nfrom bokeh.io import push_notebook\noutput_notebook()","31073849":"from bokeh.plotting import figure, show\nfrom bokeh.models import ColumnDataSource, CDSView, GroupFilter","057ebbff":"# features to plot \n\nsource = ColumnDataSource(playerbio_df[playerbio_df['season']=='2014'])\n\nFW = CDSView(source=source, filters=[GroupFilter(column_name='position', group='FW')])\nMF = CDSView(source=source, filters=[GroupFilter(column_name='position', group='MF')])\nDF = CDSView(source=source, filters=[GroupFilter(column_name='position', group='DF')])\nGK = CDSView(source=source, filters=[GroupFilter(column_name='position', group='GK')])\n\n# define the plot size \nTOOLTIPS = [(\"team\",\"@team\"),(\"season\",\"@season\"),(\"name\",\"@player\"),(\"position\",\"@position\")]\n\nplot = Figure(plot_width=900, plot_height=700, tools=[HoverTool(tooltips=TOOLTIPS,show_arrow=True)], \n              x_axis_label='Age',y_axis_label='height.cm')\n\n# plot \n\nplot.circle(x='Age_on_1stJanSeason', y='height.cm', source=source, view=FW,\n         size=12, color='red', alpha=0.6, legend_label='FW')\n\nplot.square(x='Age_on_1stJanSeason', y='height.cm', source=source, view=MF,\n         size=12, color='green', alpha=0.6, legend_label='MF')\n\nplot.triangle(x='Age_on_1stJanSeason', y='height.cm', source=source, view=DF,\n           size=12, color='blue', alpha=0.6, legend_label='DF')\n\nplot.circle_x(x='Age_on_1stJanSeason', y='height.cm', source=source, view=GK,\n           size=12, color='magenta', alpha=0.6, legend_label='GK')\n\nplot.legend.location = \"top_left\"","7b30a7a9":"def update_plot(season):\n    new_data = playerbio_df[playerbio_df['season']==str(season)]\n    \n    source.data = new_data\n    push_notebook()","023d0328":"# Bring the plot in to action \n\nfrom ipywidgets import interact\ninteract(update_plot, season=(2014,2017,1))  # start, end, increment position\nshow(plot, notebook_handle=True)","56538afd":"most_Isl_Held=match_df['Stadium'].value_counts().reset_index()\nmost_Isl_Held.columns=['Stadium', 'Matchcount']\nmost_Isl_Held","600a97c4":"most_Referee=match_df['Referee'].value_counts().reset_index()\nmost_Referee.columns=['Referre', 'Matchcount']\nmost_Referee","cb462b4b":"match_df['Stadium'].value_counts()","186749fe":"most_Isl_Held.plot(x='Stadium', y='Matchcount', kind='bar')\nplt.xlabel('Stadiums',fontsize=15)\nplt.ylabel('No of ISL matches ',fontsize=15)\nplt.title('No of matches played in stadium',fontsize=30)","5eae04b9":"most_Referee.head(10).plot(x='Referre', y='Matchcount', kind='bar', figsize=(10,8))\nplt.xlabel('Most playing Referee Names',fontsize=15)\nplt.ylabel('No of ISL matches host',fontsize=15)\nplt.title('No of matches hosted by top 10 playing Referee',fontsize=30)","abb63d84":"match_df.head(3)","6a101ea2":"stadatt=match_df.pivot_table(index='Stadium',values='Attendance',aggfunc='mean')\nstadatt.reset_index(inplace=True)\nstadatt","4fc9d159":"stadatt.plot(x='Stadium', y='Attendance', kind='bar')\nplt.xlabel('Stadiums',fontsize=15)\nplt.ylabel('Mean of attendance ',fontsize=15)\nplt.title('Mean attendance in 1000 across the all Stadiums',fontsize=30)","791ae945":"percatt=match_df.pivot_table(index='Stadium',values='Att percent',aggfunc='mean')\npercatt.reset_index(inplace=True)\npercatt","aaacca9c":"percatt.plot(x='Stadium', y='Att percent', kind='bar')\nplt.xlabel('Stadiums',fontsize=15)\nplt.ylabel('Percentage of attendance ',fontsize=15)\nplt.title('Mean Percentage attendance across the all Stadiums',fontsize=30)","c5b882d4":"v=match_df['Stadium'].unique()\nv.sort()\nprint(v)","3c11c5b2":"sorted(match_df['Stadium'].unique())","a03636c4":"    a=match_df[match_df['Team_Win'] == 'Home'].groupby(['Stadium'])['Team_Win'].count()\n    b=match_df[match_df['Team_Win'] == 'Away'].groupby(['Stadium'])['Team_Win'].count()\n    c=match_df[match_df['Team_Win'] == 'Draw'].groupby(['Stadium'])['Team_Win'].count()\n    x=sorted(match_df['Stadium'].unique())\n    bd1= pd.DataFrame({'Home': a, 'Away' : b,'Draw' : c})\n    ax1 = bd1.plot.bar(stacked=True,legend='upper right',figsize=(12,7))\n    plt.xticks(np.arange(14),x)\n    plt.yticks(np.arange(0, 41, 4))\n    plt.ylabel('No of match Count')\n    plt.legend(['Home', 'Away','Draw'])","4d3faa0b":"match_df['Match_Decider'].unique()","08a7a1ef":"match_df[match_df['Match_Decider'] == 'ET & PS'].groupby(['Stadium'])['Match_Decider'].unique().count()","d56e0eaf":"    a=match_df[match_df['Match_Decider'] == '1st Half'].groupby(['Stadium'])['Match_Decider'].count()\n    b=match_df[match_df['Match_Decider'] == '2nd Half'].groupby(['Stadium'])['Match_Decider'].count()\n    c=match_df[match_df['Match_Decider'] == 'ET & PS'].groupby(['Stadium'])['Match_Decider'].count()\n    x=sorted(match_df['Stadium'].unique())\n    bd1= pd.DataFrame({'1st Half': a, '2nd Half' : b,'ET & PS' : c})\n    ax1 = bd1.plot.bar(stacked=True,legend='upper right',figsize=(15,8))\n    plt.xticks(np.arange(14),x)\n    plt.yticks(np.arange(0, 41, 4))\n    plt.ylabel('No of match Count')\n    plt.legend(['1st Half', '2nd Half','ET & PS'])","2ae0fe37":"match_df['FT_Results'].unique()","99ec88ab":"    a=match_df[match_df['FT_Results'] == 'ATK'].groupby(['Stadium'])['FT_Results'].count()\n    b=match_df[match_df['FT_Results'] == 'NEU'].groupby(['Stadium'])['FT_Results'].count()\n    c=match_df[match_df['FT_Results'] == 'Draw'].groupby(['Stadium'])['FT_Results'].count()\n    d=match_df[match_df['FT_Results'] == 'CHN'].groupby(['Stadium'])['FT_Results'].count()\n    e=match_df[match_df['FT_Results'] == 'MUM'].groupby(['Stadium'])['FT_Results'].count()\n    f=match_df[match_df['FT_Results'] == 'DEL'].groupby(['Stadium'])['FT_Results'].count()\n    g=match_df[match_df['FT_Results'] == 'PUN'].groupby(['Stadium'])['FT_Results'].count()\n    h=match_df[match_df['FT_Results'] == 'KER'].groupby(['Stadium'])['FT_Results'].count()\n    i=match_df[match_df['FT_Results'] == 'GOA'].groupby(['Stadium'])['FT_Results'].count()\n    j=match_df[match_df['FT_Results'] == 'BGL'].groupby(['Stadium'])['FT_Results'].count()\n    k=match_df[match_df['FT_Results'] == 'JSD'].groupby(['Stadium'])['FT_Results'].count()\n    x=sorted(match_df['Stadium'].unique())\n    bd1= pd.DataFrame({'ATK': a, 'NEU' : b,'Draw' : c,'CHN': d, 'MUM' : e,'DEL': f, 'PUN' : g,'KER': h, 'GOA' : i,'BGL': j, 'JSD' : k})\n    ax1 = bd1.plot.bar(stacked=True,legend='upper right',figsize=(15,8))\n    plt.xticks(np.arange(14),x)\n    plt.yticks(np.arange(0, 41, 4))\n    plt.ylabel('No of match Count')\n    plt.legend(['ATK','NEU','Draw','CHN', 'MUM','DEL', 'PUN','KER', 'GOA','BGL', 'JSD' ])","f5fa9341":"    a=match_df[match_df['HT_Results'] == 'ATK'].groupby(['Stadium'])['HT_Results'].count()\n    b=match_df[match_df['HT_Results'] == 'NEU'].groupby(['Stadium'])['HT_Results'].count()\n    c=match_df[match_df['HT_Results'] == 'Draw'].groupby(['Stadium'])['HT_Results'].count()\n    d=match_df[match_df['HT_Results'] == 'CHN'].groupby(['Stadium'])['HT_Results'].count()\n    e=match_df[match_df['HT_Results'] == 'MUM'].groupby(['Stadium'])['HT_Results'].count()\n    f=match_df[match_df['HT_Results'] == 'DEL'].groupby(['Stadium'])['HT_Results'].count()\n    g=match_df[match_df['HT_Results'] == 'PUN'].groupby(['Stadium'])['HT_Results'].count()\n    h=match_df[match_df['HT_Results'] == 'KER'].groupby(['Stadium'])['HT_Results'].count()\n    i=match_df[match_df['HT_Results'] == 'GOA'].groupby(['Stadium'])['HT_Results'].count()\n    j=match_df[match_df['HT_Results'] == 'BGL'].groupby(['Stadium'])['HT_Results'].count()\n    k=match_df[match_df['HT_Results'] == 'JSD'].groupby(['Stadium'])['HT_Results'].count()\n    x=sorted(match_df['Stadium'].unique())\n    bd1= pd.DataFrame({'ATK': a, 'NEU' : b,'Draw' : c,'CHN': d, 'MUM' : e,'DEL': f, 'PUN' : g,'KER': h, 'GOA' : i,'BGL': j, 'JSD' : k})\n    ax1 = bd1.plot.bar(stacked=True,legend='upper right',figsize=(15,8))\n    plt.xticks(np.arange(14),x)\n    plt.yticks(np.arange(0, 41, 4))\n    plt.ylabel('No of match Count')\n    plt.legend(['ATK','NEU','Draw','CHN', 'MUM','DEL', 'PUN','KER', 'GOA','BGL', 'JSD' ])","6063f756":"match_df.head(3)","61b7ee83":"sns.set(color_codes=True)                                               \nsns.set_palette(sns.color_palette(\"muted\"))\nsns.countplot(y='Day', data=match_df)\nplt.title('Day wise matches',fontsize=20, color='red')","802f60ae":"match_df.Round.unique()","05a50a19":"plt.figure(figsize=(15,15))\nsns.catplot(x=\"Attendance\", y=\"Day\", hue=\"Team_Win\",\n            kind=\"violin\", data=match_df,height=8,aspect=1.2)","e6bece93":"plt.figure(figsize=(15,15))\nsns.catplot(x=\"Attendance\", y=\"Day\", hue=\"Team_Win\",\n            kind=\"swarm\", data=match_df)","38228dd0":"plt.figure(figsize=(10,6))\nsns.catplot(x=\"Att percent\", y=\"Day\", hue=\"Team_Win\",\n            kind=\"violin\", data=match_df,height=10,aspect=1.5)","8fd3befc":"plt.figure(figsize=(15,15))\nsns.catplot(x=\"Att percent\", y=\"Day\", hue=\"Team_Win\",\n            kind=\"swarm\", data=match_df,height=6,aspect=1.2)","266d6073":"plt.figure(figsize=(12, 8))\nsns.boxplot(data=match_df, x='Day', y='Att percent', palette='viridis', width=0.8)\nplt.xticks(rotation=45)","0d7fa4d5":"match_df['Day'].unique()","5046ad31":"    a=match_df[match_df['Day'] == 'Sunday'].groupby(['Stadium'])['Day'].count()\n    b=match_df[match_df['Day'] == 'Monday'].groupby(['Stadium'])['Day'].count()\n    c=match_df[match_df['Day'] == 'Tuesday'].groupby(['Stadium'])['Day'].count()\n    d=match_df[match_df['Day'] == 'Wednesday'].groupby(['Stadium'])['Day'].count()\n    e=match_df[match_df['Day'] == 'Thursday'].groupby(['Stadium'])['Day'].count()\n    f=match_df[match_df['Day'] == 'Friday'].groupby(['Stadium'])['Day'].count()\n    g=match_df[match_df['Day'] == 'Saturday'].groupby(['Stadium'])['Day'].count()\n    x=sorted(match_df['Stadium'].unique())\n    bd1= pd.DataFrame({'Sunday': a, 'Monday' : b,'Tuesday' : c,'Wednesday': d, 'Thursday' : e,'Friday': f, 'Saturday' : g})\n    ax1 = bd1.plot.bar(stacked=True,legend='upper right',figsize=(15,8))\n    plt.xticks(np.arange(14),x)\n    plt.yticks(np.arange(0, 41, 4))\n    plt.ylabel('No of match Count')\n    plt.legend(['Sunday', 'Monday','Tuesday','Wednesday', 'Thursday','Friday', 'Saturday' ])","5dfb9a8b":"match_df.head(2)","2f4bc835":"stadium_state={'Stadium':['Salt Lake Stadium (Kolkata \/ India)',\n       'Indira Gandhi Athletic Stadium (Guwahati \/ India)',\n       'Jawaharlal Nehru Stadium (Delhi \/ India)',\n       'Fatorda Stadium (Margao \/ India)',\n       'DY Patil Stadium (Mumbai \/ India)',\n       'Jawaharlal Nehru Stadium (Chennai \/ India)',\n       'Balewadi Stadium (Pune \/ India)',\n       'Jawaharlal Nehru Stadium (Kochin \/ India)',\n       'Rabindra Sarobar Stadium (Kolkata \/ India)',\n       'Mumbai Football Arena (Mumbai \/ India)',\n       'Sree Kanteerava Stadium (Bangalore \/ India)',\n       'Jawaharlal Nehru Stadium (Margao, Goa \/ India)',\n       'JRD Tata Sports Complex (Jamshedpur \/ India)',\n       'Kalinga Stadium (Bhubaneswar \/ India)'], \n    'State':['West Bengal','Assam','Delhi','Goa','Maharashtra','Tamil Nadu','Maharashtra','Kerala','West Bengal','Maharashtra',\n            'Karnataka','Goa','Jharkhand','Odisha']}\nstad_st=pd.DataFrame.from_dict(stadium_state)\nstad_st","007d5d21":"match_df=pd.merge(match_df,stad_st,how='left',on='Stadium')\nmatch_df.head(3)","2c4f6fe9":"from bokeh.models import GeoJSONDataSource\nfrom urllib.request import urlopen\nimport json\n\nfrom bokeh.models import GeoJSONDataSource, HoverTool, LinearColorMapper\nfrom bokeh.palettes import Viridis256\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_file, show\nimport matplotlib.pyplot as plt\nfrom bokeh.io import show, output_notebook\n%matplotlib \noutput_notebook()","a734a3cd":"import plotly.express as px\nfig = px.choropleth(\n    match_df,\n    geojson=\"https:\/\/gist.githubusercontent.com\/jbrobst\/56c13bbbf9d97d187fea01ca62ea5112\/raw\/e388c4cae20aa53cb5090210a42ebb9b765c0a36\/india_states.geojson\",\n    featureidkey='properties.ST_NM',\n    locations='State',\n    color='Att percent',\n    color_continuous_scale='Reds'\n)\n\nfig.update_geos(fitbounds=\"locations\", visible=True)\n\nfig.show()","daf377e9":"percatt","17a17c54":"percatt_df=pd.merge(percatt,stad_st,how='left',on='Stadium')\npercatt_df","eb91a513":"tot_att=match_df.pivot_table(index='State',values='Attendance',aggfunc='sum')\ntot_att.reset_index(inplace=True)\ntot_att","346b43cb":"import plotly.express as px\nfig = px.choropleth(\n    tot_att,\n    geojson=\"https:\/\/gist.githubusercontent.com\/jbrobst\/56c13bbbf9d97d187fea01ca62ea5112\/raw\/e388c4cae20aa53cb5090210a42ebb9b765c0a36\/india_states.geojson\",\n    featureidkey='properties.ST_NM',\n    locations='State',\n    color='Attendance',\n    color_continuous_scale='Blues'\n)\n\nfig.update_geos(fitbounds=\"locations\", visible=True)\n\nfig.show()","d1b35d26":"match_df.head(2)","87951f4b":"most_Isl_Held","cd56c60c":"stadium_city={'Stadium':['Salt Lake Stadium (Kolkata \/ India)',\n       'Indira Gandhi Athletic Stadium (Guwahati \/ India)',\n       'Jawaharlal Nehru Stadium (Delhi \/ India)',\n       'Fatorda Stadium (Margao \/ India)',\n       'DY Patil Stadium (Mumbai \/ India)',\n       'Jawaharlal Nehru Stadium (Chennai \/ India)',\n       'Balewadi Stadium (Pune \/ India)',\n       'Jawaharlal Nehru Stadium (Kochin \/ India)',\n       'Rabindra Sarobar Stadium (Kolkata \/ India)',\n       'Mumbai Football Arena (Mumbai \/ India)',\n       'Sree Kanteerava Stadium (Bangalore \/ India)',\n       'Jawaharlal Nehru Stadium (Margao, Goa \/ India)',\n       'JRD Tata Sports Complex (Jamshedpur \/ India)',\n       'Kalinga Stadium (Bhubaneswar \/ India)'], \n    'City':['Kolkata','Guwahati','New Delhi','Margao','Mumbai','Chennai','Pune','Kochin','Kolkata','Mumbai',\n            'Bangalore','Margao','Jamshedpur','Bhubaneswar']}\nstad_ct=pd.DataFrame.from_dict(stadium_city)\nstad_ct","64fba818":"cityname={'City':['Kolkata','Guwahati','New Delhi','Margao','Mumbai','Chennai','Pune','Kochin',\n            'Bangalore','Jamshedpur','Bhubaneswar'],\n         'Longitude':[88.3639,91.7362,77.2090,73.9862,72.8777,80.2707,73.8567,76.2673,77.5946,86.2029,85.8245],\n         'Latitude':[22.5726,26.1445,28.6139,15.2832,19.0760,13.0827,18.5204,9.9312,12.9716,22.8046,20.2961]}\nstad_ctnm=pd.DataFrame.from_dict(cityname)\nstad_ctnm","e2a250c5":"stad_ct=pd.merge(stad_ct,stad_ctnm,how='left',on='City')\nstad_ct","35ccfd81":"stadium_all=pd.merge(percatt,most_Isl_Held,how='left',on='Stadium')\nstadium_all","9b7469ce":"stadium_all=pd.merge(stadium_all,stad_st,how='left',on='Stadium')\nstadium_all","bc408293":"stadium_all=pd.merge(stadium_all,stad_cap,how='left',on='Stadium')\nstadium_all","edcdaa94":"stadium_all=pd.merge(stadium_all,stadattm,how='left',on='Stadium')\nstadium_all","ab65bcb1":"stadium_all=pd.merge(stadium_all,stad_ct,how='left',on='Stadium')\nstadium_all","626ccb44":"#from plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\n#import chart_studio.plotly as py\n#from plotly import tools\n#init_notebook_mode(connected=True)","26559d68":"data = [go.Scattergeo(lon=stadium_all['Longitude'], \n                              lat=stadium_all['Latitude'], \n                              text=stadium_all['Stadium'], name='',\n                              marker=dict(size=stadium_all['Matchcount'], color='Red'))]","30d2237d":"layout = go.Layout(title=go.layout.Title(text='Match count during all seasons'), showlegend=False,\n                   geo=go.layout.Geo(resolution=110, scope='asia', showframe=False, showcoastlines=True,\n                                     landcolor=\"rgb(229, 229, 229)\", countrycolor=\"blue\", coastlinecolor=\"pink\"))","f461c3c1":"fig = go.Figure(data=data, layout=layout)","668374f1":"\nfig.add_trace(go.Scattergeo(lon=[81.8463], lat=[25.4358], text=['India'], mode='text', showlegend=False, geo='geo'))","1c5f4474":"data = [go.Scattergeo(lon=stadium_all['Longitude'], \n                              lat=stadium_all['Latitude'], \n                              text=stadium_all['Stadium'], name='',\n                              marker=dict(size=stadium_all['Capacity']\/1.5, color='Blue'))]","01333c87":"layout = go.Layout(title=go.layout.Title(text='Capacity of Stadium'), showlegend=False,\n                   geo=go.layout.Geo(resolution=110, scope='asia', showframe=False, showcoastlines=True,\n                                     landcolor=\"rgb(229, 229, 229)\", countrycolor=\"white\", coastlinecolor=\"purple\"))","f5ff94a0":"fig = go.Figure(data=data, layout=layout)","e98f8b1c":"fig.add_trace(go.Scattergeo(lon=[81.8463], lat=[25.4358], text=['India'], mode='text', showlegend=False, geo='geo'))","61d8fc8b":"data = [go.Scattergeo(lon=stadium_all['Longitude'], \n                              lat=stadium_all['Latitude'], \n                              text=stadium_all['Stadium'], name='',\n                              marker=dict(size=stadium_all['Att percent']\/3, color='green'))]","bb89d44f":"layout = go.Layout(title=go.layout.Title(text='Mean attendance % during all seasons'), showlegend=False,\n                   geo=go.layout.Geo(resolution=110, scope='asia', showframe=False, showcoastlines=True,\n                                     landcolor=\"rgb(229, 229, 229)\", countrycolor=\"white\", coastlinecolor=\"lime\"))","17044bf6":"fig = go.Figure(data=data, layout=layout)","46d99f8c":"fig.add_trace(go.Scattergeo(lon=[81.8463], lat=[25.4358], text=['India'], mode='text', showlegend=False, geo='geo'))","68bde29c":"match_df_new=match_df.copy()\nmatch_df_new.head(2)","a039e575":"from sklearn.preprocessing import LabelEncoder                                    # Label encoder is used to transform non-numerical labels to numerical labels.\nnumber = LabelEncoder()                                                           # Here as our data set consists only of categorical values except age\nfor i in match_df_new.columns:                                                          # in order to find the correlation between variables, we do Label encoding \n    match_df_new[i] = number.fit_transform(match_df_new[i].astype('str'))","d22fa1c3":"match_df_new.head(3)","1338dcee":"match_df.Team1_Code.unique()","fd81e50f":"number.fit(['ATK', 'NEU', 'DEL', 'GOA', 'MUM', 'CHN', 'PUN', 'KER', 'BGL',\n       'JSD'])","7ac3397c":"number.transform(['ATK', 'NEU', 'DEL', 'GOA', 'MUM', 'CHN', 'PUN', 'KER', 'BGL',\n       'JSD'])","5530721d":"features_correlation = match_df_new.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(features_correlation,vmax=1,square=True,annot=False,cmap='Blues')\nplt.show()","f43e6041":"### Observation\n\n- **JRD, Jawaharlal Nehru (Delhi), Mumbai Football arena and Salt Lake Kolkata** are having mean attendance of **38%, 44%, 32% and 49%** respectively. Root cause analysis needs to be investigated further. ","5dd298b8":"<a id=section50402><\/a>\n### 5.4.2 How does the attendance varies across all stadiums? ","9689fa8b":"### Importing 3rd Dataset","4e6331f2":"<a id=section505><\/a>\n### 5.5 **Analysis w.r.t the Strategical & Geographical\/Regional aspects:** ","304e37cf":"<a id=section301><\/a>\n### Description of the Dataset\n\n- This dataset provides a **match wise detail** of **ISL Seasons from 2014 to 2017** in **India**, including seasons, team names, date & time, goal information and match round.","3fa5a9aa":"<a id=section301><\/a>\n### Comments\n\n- We will not be doing analysis on **Asst_Referee1 & 2** so Pandas profiling has not been done on this data set.","862cd562":"<a id=section301><\/a>\n### Comments\n\n- No missing data and small data set so Pandas profiling has not been done on this data set.","a51433a8":"<a id=section4><\/a>\n## 4. Data Processing","725f3573":"<a id=section50211><\/a>\n### 5.2.11 How does all the team stretegize their games? ","a18b5348":"### Observation\n\n- It seems the players are getting replaced each season so the maximum occurrences of players are in one season mostly; **these could be causing confusion over fans** and hence the **popularity** of the game is **declining**. ","b481ce50":"<a id=section50503><\/a>\n### 5.5.3 Summary: Correlation among all the columns ","12a176ac":"### Importing 2nd Dataset","f3b841fd":"<a id=section50102><\/a>\n### 5.1.2 How the no of Matches played season wise? ","2b066082":"### Observation\n\n- **CHN, GOA and ATK** are in leaderboard position respectively.","eec68c9c":"### Observation\n\n- **Home** teams have not disappointed their fans and the **Away** teams have also challenged well to the home teams. So on an average matches were **not being one-sided**.","2e33649a":"### Observation\n\n- Attendance % have not influenced much by the selection of the **match day being fallen on a weekday or weekend**.","a1f50c69":"<a id=section301><\/a>\n### Comments\n\n- We have replaced the **height.cm** with mode. Pandas profiling will not be done as all other columns are non zero values.","0b514953":"<a id=section6><\/a>\n## 6. Conclusion\n\n- Game qualities are at similar & acceptable level throughout all the seasons; so it may not be potentially impactful for the drop in popularity of **ISL**. Hence the same must be improved or atleast to be maintained in coming seasons.  \n\n\n- Player distribution w.r.t position and qualities are also acceptable but  **retaining of players** in same team could be a key challange in order to reassure respective fan's emotion hence popularity of the tournament.\n\n\n- Some of the stadium's are having **poor mean attendance (%)**; more deep dive needs to be carried out by the respective **state association** in order to have a root cause analysis.\n\n\n- The tournaments are mostly being organized at **Eastern and Southern parts of India**. ","264a2eca":"### Observation\n\n- The total goal scored follows normal distribution at the end where total Half Time goals are right skewed.","59056675":"### Observation\n\n- Referees are well experienced and hence top 10 of them have been selected for atleast 8 matches or more. ","500c5cb5":"<a id=section50501><\/a>\n### 5.5.1 How does the weekdays\/weekend games are influencing the popularity? ","d033ac1e":"### Observation\n\n- The games brought excitement in the 2nd half; as the number of the draw results (up to half time) reduces at the end of the game.","161bcdd2":"### Observation\n\n- More teams introduced hence more matches in 2017 season.","eb7b6bda":"### Observation\n\n- Mean Attendance gradually decreasing. \nWhether this drop is being attribted to introduction of some new stadiums having lesser capacity in 2017 or really the torunament is loosing its popularity day by day; this will be analyzed further.","b42d3c62":"<a id=section50303><\/a>\n### 5.3.3 What is the overall combination of players across different positions in each seasons? ","8021e1d0":"<a id=section50203><\/a>\n### 5.2.3 How the match deciding moments are distributed? ","e0e2b8a2":"### Importing 4th Dataset","696ce2c6":"### Observation\n\n- **CHN and ATK** are sharing the **title** two times each.","32adea89":"<a id=section50104><\/a>\n### 5.1.4 What is the mean Attendance season wise? ","6735707f":"### Comments\n\n- Replacing missing attendance data with mean attendance of the respective stadiums.","4f96ac28":"### Comments\n\n- Match result has been evaluated based on total goals.","7ce5cb55":"<a id=section50201><\/a>\n### 5.2.1 How the Home team winning varies across seasons? ","1aa84f39":"### Observation\n\n- **Jawaharlal Nehru (Kochin)** witnessed most **Weekend** matches.","40005d81":"<a id=section50210><\/a>\n### 5.2.10 How does the total goals, goal differences, match days and attendance are correlated ? ","657a4bc2":"<a id=section50202><\/a>\n### 5.2.2 How the match results favoring respective teams? ","4ee0a93b":"<a id=section50208><\/a>\n### 5.2.8 Which teams became champion during all the seasons? ","5efabb22":"<a id=section2><\/a>\n## 2. Tools: Importing Packages","9dc1b4d8":"<a id=section402><\/a>\n### 4.2 Pandas Profiling after Data Preprocessing","addaf84e":"### Observation\n\n- In general, **% attendance** does not show any strong relation with the **total goals and goal differences**. There are some outliers too.","21c9fd6f":"<a id=section301><\/a>\n### Description of the Dataset\n\n- This dataset provides a **season & team wise detail** of **ISL Seasons from 2014 to 2017** in **India**, including seasons, team names, team code and playoff playing information.","6363bc75":"<a id=section301><\/a>\n### Missing data identification\n\n- This is done to identify the data sets, on which Pandas profiling must be done.","2b536673":"<a id=section50302><\/a>\n### 5.3.2 What is the overall combination of players across different positions? ","c6f2478a":"### Observation\n\n- **Kalinga Stadium and Balewadi Stadium** are having **very low stadium capacity**.","554f80f4":"### Observation\n\n- **JSB** and **BGL** are newly introduced in 2017 season.","45fefb53":"<a id=section1><\/a>\n## 1. Problem Statement\n\nBased on **quality of games & players**, **organizational constraints** and **strategic & regional influences** in **India**, **how can ISL expand and resuscitate** its **excitement and popularity** in the coming **seasons**?\n","c160c389":"### EDA with Pandas profiling will be very much helpful as one line code is sufficient and here is a graphical representation of the same. The use of describe(), info() has also been depicted here.\n\n<img src=\"https:\/\/github.com\/pathakchiranjit\/EDA_Projects_INSAID_June2020_batch\/blob\/master\/EDA_snaps.JPG?raw=true\" align='left'><br\/>\"","79061845":"<a id=section301><\/a>\n### Comments\n\n- No missing data and small data set so Pandas profiling has not been done on this data set.","34bdb234":"<a id=section401><\/a>\n### 4.1 Data Preprocessing","f520d95b":"<a id=section50401><\/a>\n### 5.4.1 How does the stadiums and referees are being utilized for the games? ","0d8db22e":"### Observation\n\n- **Balewadi (Pune), Jawaharlal Nehru (Kochin) and Jawaharlal Nehru (Delhi)** have been experienced most **2nd half decider**. Other stadiums have been experienced with mostly **1st half decider**. **Fatorda (Margao), Jawaharlal Nehru (Kochin) and Jawaharlal Nehru (Delhi)** have been experienced **the Playoffs i.e. Extra time & Penalty shootout matches**.","5eb2d3d8":"### Observation\n\n- Attendance % have not influenced much the **Home Team** win.","b7f8a4f4":"<a id=section301><\/a>\n### Description of the Dataset\n\n- This dataset provides a **team wise detail** of **ISL Seasons from 2014 to 2017** in **India**, including foundation date, full names, nick names, home stadium, capacity and team codes.","7e131a4d":"<a id=section3><\/a>\n## 3. Collecting & Loading Data","bfa4be86":"<a id=section602><\/a>\n### 6.2 Limitation of this study","ee850c5e":"### Importing 5th Dataset","0005d5aa":"### Observation\n\n- Most of the total goals are scored during 1st half (sotrong correlation     +0.69) and most of the goal differences are occurred in the 2nd half or later (corr value +0.47) indicating well distribution of excitement during matches. Attendance % is not well correlated with the match results. ","083c0577":"<a id=section50301><\/a>\n### 5.3.1 How does the Player's anthropometry distributed? ","808f88f3":"### Observation\n\n- Match distribution seems fine. Some newly added stadiums are there.","7dacef62":"### Observation\n\n- Respective position wise distribution are quite good w.r.t the overall game stretegies and it is not varying much throughut the seasons. ","158c49ce":"### Comments\n\n- Replacing missing HT Goals as 0 as if draw situation. PS and ET are not applicable to all matches so replacing with 0.","91a1e916":"<a id=section502><\/a>\n\n### 5.2 **Analysis w.r.t the Quality Of the Games:** ","ed45a3f0":"<a id=section501><\/a>\n### 5.1 **Identification of challanges** ","80f390e2":"<a id=section505><\/a>\n### 5.4 **Analysis w.r.t the Infrastructural & Organizational aspects:** ","27d4edf1":"- The study has been **solely carried out over data set of results** of **all the matches, players & stadium information**. Hence, it **does not contain** any **financial analysis** of the tournament.\n","3b1235bd":"### Observation\n\n- Distribution shows mostly young players have been chosen in 2016 and 2017 so upcoming season could be more exciting. ","bb707c1f":"<a id=section50304><\/a>\n### 5.3.4 Whether players are getting replaced in each season? ","7838e7a6":"<a id=section302><\/a>\n### The above analysis depicts that the quality of the game have not been affected much over seasons and there is an optimal balance among teams w.r.t their game strategies **(Defensive, Attacking and Underperformer)** so there is ample potential for coming seasons to be more exciting and interesting. ","d5904a21":"<a id=section302><\/a>\n### Based on the above facts the key challenge has been understood as **Fall in % Attendances which essentially means drop in the popularity of the game**. \n### This could mainly be attributed to the below topics; hence a detail analysis is being envisaged for the same : \n### **a)  Does the Quality of Games are falling down?**\n### **b)  Does the Player's performances are limiting this drop in popularity?**\n### **c)  Does the infrastructural & organizational bottole-necks are causing these hindrances ?**\n### **d)  Do we need to review some of the strategies based on geographical\/regional analysis to resuscitate the excitement?**","27350925":"### Observation\n\n- Each teams are well equipped with home stadium. ","06189a2f":"### **This is EDA project based on ISL Data 2014-2017 season**\n\n<img src=\"https:\/\/github.com\/pathakchiranjit1988\/EDA_Projects_INSAID_June2020_batch\/blob\/master\/ISL_pics.jpg?raw=true\" align='left'><br\/>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","6ebdbb22":"<a id=section50105><\/a>\n### 5.1.5 How the percentage of Attendance w.r.t. total stadium capacities distributed? ","c540e06b":"<a id=section50209><\/a>\n### 5.2.9 How Teams were performed across all seasons? ","bdad351d":"### Observation\n\n- We have seen most matches are with 1 goal difference i.e. indication of not being one-sided.","9f709b54":"<a id=section601><\/a>\n### 6.1 Actionable Insights","78137dc7":"### Observation\n\n- **Western & Northern part of India** are yet to be **explored**.","c8662106":"## Table of Contents\n\n1. [Objective: Problem Statement](#section1)<br>\n2. [Tools: Importing Packages](#section2)<br>\n3. [Collecting & Loading Data](#section3)<br>\n  - 3.1 [Importing Data sets & Description](#section301)<br>\n  - 3.2 [Pandas Profiling before Data Preprocessing](#section302)<br>\n4. [Data Preprocessing](#section4)<br>\n  - 4.1 [Data Preprocessing](#section401)<br>\n  - 4.2 [Pandas Profiling after Data Preprocessing](#section402)<br>\n5. [Exploratory Data Analysis](#section5)<br>\n  - 5.1 [**Identification of challanges:**](#section501)<br>\n    - 5.1.1 [How the Matches Distributed across all the seasons?](#section50101)<br>\n    - 5.1.2 [How the no of Matches played season wise?](#section50102)<br>\n    - 5.1.3 [How the Attendance distributed ?](#section50103)<br>\n    - 5.1.4 [What is the mean Attendance season wise?](#section50104)<br>\n    - 5.1.5 [How the percentage of Attendance w.r.t. total stadium capacities distributed?](#section50105)<br>\n    - 5.1.6 [How the percentage of Attendance varies season wise ?](#section50106)<br><br>\n  - 5.2 [**Analysis w.r.t the Quality Of Games:**](#section502)<br>\n      - 5.2.1 [How the Home team winning varies across seasons?](#section50201)<br>\n      - 5.2.2 [How the match results favoring respective teams?](#section50202)<br>\n      - 5.2.3 [How the match deciding moments are distributed?](#section50203)<br>\n      - 5.2.4 [How the goals are distributed?](#section50204)<br>\n      - 5.2.5 [What is the Team wise performances?](#section50205)<br> \n      - 5.2.6 [How the Goal difference occures throughout the seasons?](#section50206)<br> \n      - 5.2.7 [How does the attendance influnece the Goal difference, Total goals? influenced?](#section50207)<br>\n      - 5.2.8 [Which teams became champion during all the seasons?](#section50208)<br>\n      - 5.2.9 [How Teams were performed across all seasons?](#section50209)<br>\n      - 5.2.10 [How does the total goals, goal differences, match days and attendance are correlated ?](#section50210)<br>\n      - 5.2.11 [How does all the team stretegise their games?](#section50211)<br> <br>\n  - 5.3 [**Analysis w.r.t the Quality Of Players:**](#section503)<br>\n      - 5.3.1 [How does the Player's anthropometry distributed?](#section50301)<br>\n      - 5.3.2 [What is the overall combination of players across different positions?](#section50302)<br>\n      - 5.3.3 [What is the overall combination of players across different positions in each seasons?](#section50303)<br>\n      - 5.3.4 [Whether players are getting replaced in each season?](#section50304)<br>\n      - 5.3.5 [How player's physics\/strength are mapped in each season?](#section50305)<br><br>\n  - 5.4 [**Analysis w.r.t the Infrastructural & Organizational aspects:**](#section504)<br>\n      - 5.4.1 [How does the stadiums and referees are being utilized for the games?](#section50401)<br>\n      - 5.4.2 [How does the attendance varies across all stadiums?](#section50402)<br>\n      - 5.4.3 [How does the team performances distributed across all stadiums?](#section50403)<br><br>\n  - 5.5 [**Analysis w.r.t the Stretegical & Geographical\/Regional aspects:**](#section505)<br>\n      - 5.5.1 [How does the weekdays\/weekend games are influencing the popularity?](#section50501)<br>\n      - 5.5.2 [How does the regional\/geographical factors are influencing the popularity?](#section50502)<br>\n      - 5.5.3 [Summary: Correlation among all the columns](#section50503)<br><br> \n6. [Conclusion](#section6)\n  - 6.1 [Actionable Insights](#section601)\n  - 6.2 [Limitation of this study](#section602)","9560a92c":"<a id=section301><\/a>\n### Comments\n\n- Pandas profiling to be done on this data set **allmatches_df**","e8dc93dd":"### Observation\n\n- The ratio of the deciding moments of the matches are almost same (~52:47). This shows that the game's excitement are well distributed.","f1eff3f6":"<a id=section301><\/a>\n### 3.1 Importing Data sets & Description","94ab0e2d":"<a id=section50204><\/a>\n### 5.2.4 How the goals are distributed? ","437440eb":"<a id=section503><\/a>\n### 5.3 **Analysis w.r.t the Quality Of Players:** ","af64ce48":"<a id=section50403><\/a>\n### 5.4.3 How does the team performances distributed across all stadiums? ","2811f7c3":"<a id=section50106><\/a>\n### 5.1.6 How the percentage of Attendance varies season wise ? ","af087fb8":"### Observation\n\n- Players are well distributed w.r.t physical parameters\/ Strength; so the selection of player does not affecting the quality of the game and hence popularity. ","42c59d3f":"<a id=section50103><\/a>\n### 5.1.3 How the Attendance distributed ? ","cc891a92":"<a id=section50207><\/a>\n### 5.2.7 How does the attendance influence the Goal difference, Total goals? ","faf82f98":"### Observation\n\n- **Jawaharlal Nehru (Delhi) and Rabindra Sarobar Stadium Kolkata** have been experienced most **Drawn** matches. **Balewadi (Pune) and Indira Gandhi Athletic Stadium (Guwahati)** have been experienced most **Away team wins**. \nThe same for other stadiums are well balanced.","7ba70e61":"### Comments\n\n- Match winner type has been evaluated based on total playing teams.","78b135ae":"<a id=section5><\/a>\n## 5. Exploratory Data Analysis","130ba20a":"<a id=section50206><\/a>\n### 5.2.6 How the Goal difference occurs throughout the seasons? ","8b028f79":"### Observation\n\n- Age and Height of all the players are mostly normally distributed. ","91bf2db3":"<a id=section50205><\/a>\n### 5.2.5 What is the Team wise performances? ","6d492dab":"### Importing 1st Dataset","6e48f5e6":"<a id=section302><\/a>\n### 3.2 Pandas Profiling before Data Preprocessing","86e819d5":"### Observation\n\n- **JRD, Jawaharlal Nehru (Delhi), Mumbai Football arena and Salt Lake Kolkata** are having mean attendance of **38%, 44%, 32% and 49%** respectively. Root cause analysis needs to be investigated further. ","80235313":"### Observation\n\n- **PUN, KER, CHN and NEU** are very strong at **Home**. **ATK** have won most **Away** matches as compared to other teams.","b41780ff":"#### Observation\n\nAll the **discussed topics** are being **summarized** here by means of a correlation **heatmap** for easy reference and understanding. ","2f535255":"<a id=section301><\/a>\n### Description of the Dataset\n\n- This dataset provides a **season wise detail** of **ISL Players from 2014 to 2017** in **India**, including seasons, playing team names, dob, height and playing position information.","ed439feb":"<a id=section301><\/a>\n### Description of the Dataset\n\n- This dataset provides a **match wise detail** of **ISL Seasons from 2014 to 2017** in **India**, including stadium, attendance, referee and match ID.","553f95cc":"### Observation\n\n- Percentage of respective total matches played by each team are being evaluated w.r.t **Win_percentage, Half time ahead percentages, draw matches and lost matches** and the analysis shows an optimal distribution of teams w.r.t their game strategies. ","968dd519":"### Comments\n\n- Match's deciding moments has been evaluated based on goal situation in the match.","86ebeb3f":"### Observation\n\n- Attendance % also follows Normal distribution mostly about the mean of ~75%.","f9f16570":"### Observation\n\n- The winning matches are also well distributed among all the teams hence showing team performances on similar level ; which also essentially attributed the most draw matches in all the seasons. It means the games are not boring atleast. ","43495b31":"<a id=section50502><\/a>\n### 5.5.2 How does the regional\/geographical factors are influencing the popularity? ","bf004eeb":"### Observation\n\n- Respective position wise distribution seems balanced w.r.t the overall game strategies and it is not varying much throughout the seasons. ","5ecb5c42":"**Data Source:**\n\nhttps:\/\/data.world\/ajaigovindg\/hero-indian-super-league","c6bc3425":"### Observation\n\n- Attendance mostly followed normal distribution.","bcf6e5ad":"<a id=section50305><\/a>\n### 5.3.5 How player's physics\/strength are mapped in each season? \n\n---\n\n","b54348dc":"- Some **amendments in player's contracts with respective teams** may be excercised in order to **retain the players at-least upto two seasons**, hence assuring **fan's trust**.\n\n- **JRD, Jawaharlal Nehru (Delhi), Mumbai Football arena and Salt Lake Kolkata** are having very **poor mean attendance %** so **investigation** w.r.t **infrastructure, pricing of tickets, logistic\/transportation and promotion of events** are being recommended and subsequently corrective actions must be taken in order to motivate and attract fans.\n\n- Considering multidimensional regional aspect, some **strategic cities** in the **Northern and Western parts of India** may be explored for arranging the tournament in coming seasons. However, **prior study may be envisaged** in order to identify those locations.\n\n- As we have seen **the attendance % does not vary much between weekdays and weekends** so **OTT platform** may be explored with minimum **subscription** in order to reach more fans during the **emerging digital era**; with this **more regional teams and more number of games can be planned within same time frame by distributing more weekday matches**. However, this might be decided based on prior analysis, which is not been carried out during this study.","535cc975":"<a id=section50101><\/a>\n### 5.1.1 How the Matches Distributed across all the seasons? "}}