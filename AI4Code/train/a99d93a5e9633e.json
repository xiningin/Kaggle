{"cell_type":{"c10809db":"code","84b6590c":"code","b66b6f5c":"code","19520ec8":"code","3cb96396":"code","ed9ae6ec":"code","34a96f7f":"code","8c9fb210":"code","5548c296":"code","8162eee1":"code","094a72c5":"code","0b7ed885":"code","03285756":"code","fa66e6b7":"code","9e48b1cd":"code","deacf4a4":"code","4a8a0166":"code","704f6189":"code","448c4bfb":"code","9a7fb88a":"code","eb0b01e5":"code","a39416c7":"code","bd35d1ae":"code","59f59b7c":"code","7f758f0f":"code","4491ef76":"markdown","c0bcc7d4":"markdown","1d1fbf0e":"markdown","d347dd28":"markdown","3ce3e40e":"markdown","13283718":"markdown"},"source":{"c10809db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","84b6590c":"import os\nimport shutil\nimport pandas as pd\nimport numpy as np\n# import keras\nimport tensorflow as tf\nimport tensorflow_hub as hub\n# import tensorflow_text as text\n# from official.nlp import optimization  # to create AdamW optmizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\n\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n# import spacy\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\ntf.get_logger().setLevel('ERROR')\n\npd.set_option(\"display.max_columns\", 150)\npd.set_option('display.max_rows', 999)\npd.set_option('display.max_colwidth', None)","b66b6f5c":"!unzip ..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip\n!unzip ..\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip\n!unzip ..\/input\/jigsaw-toxic-comment-classification-challenge\/test_labels.csv.zip\n!unzip ..\/input\/jigsaw-toxic-comment-classification-challenge\/sample_submission.csv.zip","19520ec8":"train = pd.read_csv(\"\/kaggle\/working\/train.csv\")\ntrain.head()","3cb96396":"train.info()","ed9ae6ec":"print('Number of duplicated rows:', sum(train.duplicated()))","34a96f7f":"train.iloc[58:60,:]","8c9fb210":"train['toxic'].value_counts()","5548c296":"target = (\n    train['toxic']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Target', 'toxic':'Count'})\n    .replace([0,1], ['Normal', 'Toxic']) \n    .groupby('Target')\n    .sum()\n    .reset_index()    \n          )   \n\nfig = go.Figure(data=[go.Pie(labels=target['Target'], \n                             values=target['Count'])])\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=['#8cb074', '#5a7c47'], line=dict(color='white', width=5)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"Target Distribution [toxic]\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=20, color='#000000'))\n\n\nfig.show()","8162eee1":"train['severe_toxic'].value_counts()","094a72c5":"target = (\n    train['severe_toxic']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Target', 'severe_toxic':'Count'})\n    .replace([0,1], ['Normal', 'Severe_toxic']) \n    .groupby('Target')\n    .sum()\n    .reset_index()    \n          )   \n\nfig = go.Figure(data=[go.Pie(labels=target['Target'], \n                             values=target['Count'])])\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=['#8cb074', '#5a7c47'], line=dict(color='white', width=1)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"Target Distribution [severe_toxic]\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=20, color='#000000'))\n\n\nfig.show()","0b7ed885":"train['obscene'].value_counts()","03285756":"target = (\n    train['obscene']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Target', 'obscene':'Count'})\n    .replace([0,1], ['Normal', 'Obscene']) \n    .groupby('Target')\n    .sum()\n    .reset_index()    \n          )   \n\nfig = go.Figure(data=[go.Pie(labels=target['Target'], \n                             values=target['Count'])])\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=['#8cb074', '#5a7c47'], line=dict(color='white', width=5)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"Target Distribution [obscene]\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=20, color='#000000'))\n\n\nfig.show()","fa66e6b7":"train['threat'].value_counts()","9e48b1cd":"target = (\n    train['threat']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Target', 'threat':'Count'})\n    .replace([0,1], ['Normal', 'Threat']) \n    .groupby('Target')\n    .sum()\n    .reset_index()    \n          )   \n\nfig = go.Figure(data=[go.Pie(labels=target['Target'], \n                             values=target['Count'])])\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=['#8cb074', '#5a7c47'], line=dict(color='white', width=1)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"Target Distribution [threat]\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=20, color='#000000'))\n\n\nfig.show()","deacf4a4":"train['insult'].value_counts()","4a8a0166":"target = (\n    train['insult']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Target', 'insult':'Count'})\n    .replace([0,1], ['Normal', 'Insult']) \n    .groupby('Target')\n    .sum()\n    .reset_index()    \n          )   \n\nfig = go.Figure(data=[go.Pie(labels=target['Target'], \n                             values=target['Count'])])\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=['#8cb074', '#5a7c47'], line=dict(color='white', width=5)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"Target Distribution [insult]\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=20, color='#000000'))\n\n\nfig.show()","704f6189":"train['identity_hate'].value_counts()","448c4bfb":"target = (\n    train['identity_hate']\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={'index':'Target', 'identity_hate':'Count'})\n    .replace([0,1], ['Normal', 'Identity_hate']) \n    .groupby('Target')\n    .sum()\n    .reset_index()    \n          )   \n\nfig = go.Figure(data=[go.Pie(labels=target['Target'], \n                             values=target['Count'])])\n\nfig.update_traces(hoverinfo='percent+value', \n                  textinfo='label', \n                  textfont_size=20,\n                  marker=dict(colors=['#8cb074', '#5a7c47'], line=dict(color='white', width=1)))\n\nfig.update_layout(showlegend=False, \n                  title_text=\"Target Distribution [identity_hate]\",\n                  title_x=0.5,\n                  font=dict(family=\"Hiragino Kaku Gothic Pro, sans-serif\", size=20, color='#000000'))\n\n\nfig.show()","9a7fb88a":"test_labels = pd.read_csv(\"\/kaggle\/working\/test_labels.csv\")\ntest_labels.head(100)","eb0b01e5":"test_labels_unique = test_labels[test_labels['toxic']!=-1]['id'].unique()","a39416c7":"len(test_labels_unique)","bd35d1ae":"test = pd.read_csv(\"\/kaggle\/working\/test.csv\")\ntest.tail()","59f59b7c":"print('Number of duplicated rows:', sum(test.duplicated()))","7f758f0f":"test.info()","4491ef76":"# **Load data**","c0bcc7d4":"# **Imports**","1d1fbf0e":"## **Train data**","d347dd28":"<font size=\"5\">Clearly, all classes are imbalanced<\/font>","3ce3e40e":"# **Exploring Test data**","13283718":"## **Distributions of classes**"}}