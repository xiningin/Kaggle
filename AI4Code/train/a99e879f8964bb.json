{"cell_type":{"7105b878":"code","3b163232":"code","dcb08fba":"code","e65cf4bb":"code","4052a57e":"code","a8702c53":"code","a93998ed":"code","0f70074f":"code","d6fe6e78":"code","c7423c93":"code","3c1c46c5":"code","fcf60cc6":"code","cef145a5":"code","0a6605fa":"code","80e827c6":"code","5e6b4558":"code","e8693876":"code","da2dba35":"code","4c326371":"code","43322f8e":"code","2285c690":"code","9eaaaf88":"code","1fbc5c57":"code","7e7b2c88":"code","3f551712":"code","c130041c":"code","b029d287":"code","9751c00e":"code","787fdd48":"code","6e6254a2":"code","cdc94934":"code","fbe6381f":"code","05e95e31":"code","0d94511d":"code","aae05ec1":"code","57a0fe98":"code","e1b4af3b":"code","000fb734":"code","d2a004ec":"code","f93028d3":"code","2e4cb317":"code","d3605a24":"code","96ed9c1d":"code","e92cf3d2":"code","aae9a198":"code","aa4e78a8":"code","787e67d7":"code","72db6ce2":"code","84cb7c17":"code","e17baf98":"code","bad924d4":"code","8e1e691b":"code","d0345b35":"code","e455a565":"code","58f9bb31":"code","12fc45b2":"code","c789d7b5":"code","e3e2cb8e":"code","589e8d16":"code","97efada1":"code","06b13274":"markdown"},"source":{"7105b878":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport fun_py as fp\n\n","3b163232":"train= pd.read_csv(\"..\/input\/credit-score-prediction\/CreditScore_train.csv\")\ntest= pd.read_csv(\"..\/input\/credit-score-prediction\/CreditScore_test.csv\")","dcb08fba":"print(\"Train Data Shape b4 adding target col : \",train.shape)\nprint(\"Test Data Shape b4 adding target col : \",test.shape)","e65cf4bb":"train[\"source\"] = \"train\"\ntest[\"source\"] = \"test\"\nprint(\"Train Data Shape aftr adding target col : \",train.shape)\nprint(\"Test Data Shape aftr adding target col : \",test.shape)","4052a57e":"df = pd.concat([train,test])","a8702c53":"fp.data_duplicates(df,0)","a93998ed":"fp.data_isna(df)","0f70074f":"\n#fp.data_groupcols(df)","d6fe6e78":"df.shape","c7423c93":"lst=[]\nlst=df.columns","3c1c46c5":"row=df.shape[0]\ncols=[]","fcf60cc6":"len(cols)","cef145a5":"[cols.append(i) for i in lst if df[i].isnull().sum()\/row*100 > 70 ]","0a6605fa":"len(cols)","80e827c6":"cols","5e6b4558":"data=df.drop(cols,axis=1)","e8693876":"data.shape","da2dba35":"fp.data_nullcols(data,0)","4c326371":"#fp.data_groupcols(data)","43322f8e":"pd.options.display.max_rows = 4000\n\ncolg=data.corr()['y'].sort_values() > 0.3\ncoll=data.corr()['y'].sort_values() <-0.3","2285c690":"data.shape","9eaaaf88":"lstg=[]\nlstl=[]\nlstg.clear()\nlstg.clear()\nlen(lstg)\nlen(lstl)\n        ","1fbc5c57":"[lstg.append(i) for i,j in colg.items() if j == True]\n[lstl.append(i) for i,j in coll.items() if j == True]\n","7e7b2c88":"print(\"Length of lstl\",len(lstl))\nprint(\"Length of lstg\",len(lstg))","3f551712":"lstd=[]\n#lstd=lstg+lstl\nprint(\"Length of lstd\",len(lstd))\n","c130041c":"lstd=lstg+lstl\nprint(\"Length of lstd\",len(lstd))","b029d287":"data_cols=data.columns","9751c00e":"#data.corr('x002')['y']\n#data['x002'].corr(data['y'])\n#df['A'].corr(df['B'])\n#pd.options.display.max_columns = 4000\n#data.corr()","787fdd48":"cor_target = abs(data.corr()[\"y\"])\n#Selecting highly correlated features\nrelevant_features = cor_target[cor_target<0.3]\nrelevant_features","6e6254a2":" lst_key=[]","cdc94934":"for i,j in relevant_features.items():\n    lst_key.append(i)\n#print(lst_key.count())\n","fbe6381f":"len(lst_key)","05e95e31":"#lstd","0d94511d":"#lstd.remove('y')\nm_cols=[]","aae05ec1":"lstd1= ['x017','x047','x015','x043','x251','x248','x018','x019','x028','x020','x004','x027','x030','x224','x260','x261','x229','x262','x247','x250','x246','x245','x014','x023','x002','x239','x025','x225','x237','x244','x046','x228','x226','x249','x227','x022','x236','x005','x235','x041','x057','x058','x287','x148','x253','x059','x065','x064','x162','x297','x293','x063','x168','x173','x056','x278','x036','x172','x277','x276','x099']","57a0fe98":"len(lstd1)","e1b4af3b":"drop_cols=['x062','x066','x067','x068','x069','x070','x071','x072','x073','x074','x075','x076','x077','x078','x079','x080','x081','x082','x083','x084','x085','x086','x087','x088','x089','x090','x091','x092','x093','x094','x095','x096','x097','x100','x101','x102','x103','x104','x105','x106','x107','x108','x109','x110','x111','x112','x113','x114','x115','x116','x117','x118','x119','x120','x121','x122','x123','x124','x125','x126','x127','x128','x129','x130','x131','x132','x133','x134','x135','x136','x137','x138','x139','x140','x141','x142','x143','x144','x145','x146','x147','x149','x150','x151','x152','x153','x154','x156','x157','x158','x159','x160','x161','x163','x164','x165','x166','x167','x169','x170','x171','x174','x175','x176','x177','x178','x179','x180','x181','x182','x183','x184','x185','x186','x187','x188','x189','x190','x191','x192','x193','x194','x195','x196','x197','x198','x199','x200','x201','x202','x203','x204','x205','x206','x207','x208','x209','x210','x211','x212','x213','x214','x215','x216','x217','x218','x219','x220','x221','x222','x223','x230','x231','x232','x233','x234','x238','x240','x241','x243','x252','x254','x258','x263','x264','x265','x266','x267','x268','x269','x270','x271','x272','x273','x274','x275','x279','x280','x281','x282','x283','x284','x285','x286','x288','x289','x290','x291','x292','x294','x296','x298','x299','x300','x301','x303','x001','x003','x006','x007','x008','x009','x010','x011','x012','x013','x016','x021','x024','x026','x029','x031','x032','x033','x034','x035','x037','x038','x039','x040','x042','x044','x045','x048','x049','x050','x051','x052','x053','x054','x055','x060','x061']","000fb734":"len(drop_cols)","d2a004ec":"data.shape","f93028d3":"prep_data=data.copy()","2e4cb317":"prep_data.drop(columns=drop_cols,axis=1,inplace=True)","d3605a24":"prep_data.shape","96ed9c1d":"#prep_data.columns","e92cf3d2":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns\ncoL=list(prep_data.columns)\n","aae9a198":"type(coL)","aa4e78a8":"%matplotlib inline\ntrain_test_b4_split_data=prep_data.copy\n","787e67d7":"null_cols=fp.data_nullcols(prep_data,1)","72db6ce2":"for i in null_cols:\n    prep_data[i].fillna(prep_data[i].mean(),inplace=True)","84cb7c17":"train_final = prep_data[prep_data.source==\"train\"]\ntest_final = prep_data[prep_data.source==\"test\"]","e17baf98":"train_final = train_final.drop(columns='source',axis=1)\ntest_final = test_final.drop(columns='source',axis=1)\ntrain_final.shape\n","bad924d4":"train_final.columns","8e1e691b":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\n","d0345b35":"X = train_final.drop(\"y\", axis=1)\nY = train_final[\"y\"]\nprint(X.shape)\nprint(Y.shape)","e455a565":"seed      = 42\ntest_size = 0.30\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = test_size)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","58f9bb31":"# user variables to tune\nfolds   = 5\nmetric  = \"neg_mean_absolute_error\"\n\n# hold different regression models in a single dictionary\nmodels = {}\nmodels[\"Linear\"]        = LinearRegression()\nmodels[\"Lasso\"]         = Lasso()\nmodels[\"Ridge\"]         = Ridge()\nmodels[\"ElasticNet\"]    = ElasticNet()\nmodels[\"DecisionTree\"]  = DecisionTreeRegressor()\nmodels[\"KNN\"]           = KNeighborsRegressor()\nmodels[\"RandomForest\"]  = RandomForestRegressor()\nmodels[\"AdaBoost\"]      = AdaBoostRegressor()\nmodels[\"GradientBoost\"] = GradientBoostingRegressor()\nmodels[\"XGBoost\"] = XGBRegressor()\n\n# 10-fold cross validation for each model\nmodel_results = []\nmodel_names   = []\nfor model_name in models:\n\tmodel   = models[model_name]\n\tk_fold  = KFold(n_splits=folds, random_state=seed)\n\tresults = cross_val_score(model, X_train, Y_train, cv=k_fold, scoring=metric)\n\t\n\tmodel_results.append(results)\n\tmodel_names.append(model_name)\n\tprint(\"{}: {}, {}\".format(model_name, round(results.mean(), 3), round(results.std(), 3)))\n\n","12fc45b2":"# box-whisker plot to compare regression models\nimport matplotlib.pyplot as plt \nfigure = plt.figure(figsize = (35,15))\n\nfigure.suptitle('Regression models comparison')\naxis = figure.add_subplot(111)\nplt.boxplot(model_results)\naxis.set_xticklabels(model_names, rotation = 45, ha=\"right\")\naxis.set_ylabel(\"Mean Absolute Error (MAE)\")\nplt.margins(0.05, 0.1)","c789d7b5":"model = RandomForestRegressor()\nmodel.fit(X_train,Y_train)\n\n##print(\"Intercept : \", model.intercept_)\n##print(\"Slope : \", model.coef_)\n\n#Predicting TEST & TRAIN DATA\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\n\nerror_percent = np.mean(np.abs((Y_train - train_predict) \/ Y_train)) * 100\nprint(\"MAPE - Mean Absolute Percentage Error (TRAIN DATA): \",error_percent )\nY_train, train_predict = np.array(Y_train), np.array(train_predict)","e3e2cb8e":"model = RandomForestRegressor()\nmodel.fit(X_test,Y_test)\n\n##print(\"Intercept : \", model.intercept_)\n##print(\"Slope : \", model.coef_)\n\n#Predicting TEST & TRAIN DATA\n#train_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)\n\nerror_percent = np.mean(np.abs((Y_test - test_predict) \/ Y_test)) * 100\nprint(\"MAPE - Mean Absolute Percentage Error (TEST DATA): \",error_percent )\nY_test, test_predict = np.array(Y_test), np.array(test_predict)","589e8d16":"dtrain_predictions = model.predict(X_train)","97efada1":"#Print model report:\nprint(\"\\nModel Report\")\nprint(\"RMSE : %.4g\" % np.sqrt(mean_squared_error(Y_train, dtrain_predictions)))\n    \n#Predict on testing data:\n#test_final[\"res_linear\"] =  model.predict(X_train)","06b13274":"Removing columns which has more than 70% of NA Values . 10 cols (x098,x155,x242,x255,x256,x257,x259,x295,x302,x304) are removed"}}