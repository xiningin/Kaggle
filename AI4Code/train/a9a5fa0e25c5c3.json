{"cell_type":{"3a0e6d03":"code","499b584c":"code","813446f0":"code","3c70b464":"code","0d2d5948":"code","6473f95d":"code","1ae94340":"code","5bb04314":"code","f6ed1372":"code","dede89c8":"code","f424b566":"code","347797d9":"code","6852c047":"code","bba29794":"code","05d720eb":"code","025c5af7":"code","7063aa91":"markdown","ff969b7f":"markdown","f7bb05ae":"markdown","f5cb89a2":"markdown","13a82498":"markdown","7bc1c737":"markdown","62be6d64":"markdown","86fc8344":"markdown"},"source":{"3a0e6d03":"#Importing Liabraries\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport datetime\nfrom sklearn.preprocessing import MinMaxScaler\n\n#Importing Keras libraries and packages\nfrom keras.models import Model,Sequential\nfrom keras.layers import Input, Dense, Embedding, SpatialDropout1D, add, concatenate\nfrom keras.preprocessing import text, sequence\nfrom keras.layers import LSTM,Dropout\nplt.style.use('fivethirtyeight')","499b584c":"#loading Dataset\ndf = pd.read_csv('..\/input\/tesla-stocks-history\/TSLA.csv',index_col=\"Date\",parse_dates=True)\ndf","813446f0":"#Number of Rows and Columns\ndf.shape","3c70b464":"df.isna().any()","0d2d5948":"df.info()","6473f95d":"#Visualize the Closing Price history\nplt.figure(figsize=(16,8))\nplt.title('Close Price History')\nplt.plot(df['Close'])\nplt.xlabel('Date',fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.show()","1ae94340":"#Create a new dataframe with only Close Column\ndata = df.filter(['Close'])\n\n#Convert dataframe to a numpy array\ndataset = data.values\n\n#Get the number of rows to train the model\ntraining_data_len = math.ceil( len(dataset) * .8) # 80% data for training\ntraining_data_len","5bb04314":"#Scale the data\nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data","f6ed1372":"#Create the training dataset\ntrain_data = scaled_data[0:training_data_len , :]\n#Split the data into x_train and y_train datasets\nx_train = []\ny_train = []\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i, 0])\n    y_train.append(train_data[i, 0])\n    if i<=61:\n        print(x_train)\n        print(y_train)\n        print()\n","dede89c8":"#Convert the x_train and y_train to numpy arrays\nx_train,y_train = np.array(x_train), np.array(y_train)\n\nx_train.shape","f424b566":"#Reshape the data\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))\nx_train.shape","347797d9":"model = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape = (x_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences = False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\n\n#Compiling the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n#Train the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)","6852c047":"#Create the Testing dateset\ntest_data = scaled_data[training_data_len - 60: , :]\n\n#Create the datasets x_test and y_test\nx_test = []\ny_test = dataset[training_data_len:, :]\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i, 0])\n    \n#Converting x-test to numpy array\nx_test = np.array(x_test)\n\n#Reshape the data\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))\n\n#Get the models predicted price values\npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)","bba29794":"#Plot the data\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n\n#Visualize the data\nplt.figure(figsize=(16,8))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)',fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close','Predictions']])\nplt.legend(['Train','Val','Predictions'],loc='lower right')\nplt.show()","05d720eb":"#Compare valid and Predicted Prices\nvalid.head()","025c5af7":"# If you like this notebook, don't forget to upvote .","7063aa91":"# Setup","ff969b7f":"# Data Preprocessing ","f7bb05ae":"### In this notebook we are going to Predict Tesla Stock prices by using LSTM.","f5cb89a2":"# Actual vs Predicted Prices","13a82498":"## Above shows that Predicted values are very close to original values.","7bc1c737":"# Contents\n## * Setup\n## * Exploring Dataset\n## * Data Preprocessing\n## * Building LSTM model\n## * Actual vs Predicted Prices","62be6d64":"# 3. Building LSTM model","86fc8344":"# Exploring Dataset"}}