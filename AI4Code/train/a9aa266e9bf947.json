{"cell_type":{"aa70b544":"code","2bd2f4d4":"code","c1257ea6":"code","81d88808":"code","cef68ece":"code","47b510e9":"code","bd5f5754":"code","7cdbf58c":"code","4ae1f0e9":"code","468dd037":"code","97ccb6d8":"code","f9234a7c":"code","cbb4e6b7":"code","97ad8255":"code","53ff5bd5":"code","94f5d095":"code","d45ec1a4":"code","aa63d408":"code","2073f277":"code","bc80783f":"code","7314a593":"code","b9409cf2":"markdown","f76a4c5f":"markdown","2d1879be":"markdown","c7099d48":"markdown","ad739856":"markdown","56d87384":"markdown","5610cee4":"markdown","18e29d16":"markdown","855f7642":"markdown","42276ff9":"markdown"},"source":{"aa70b544":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bd2f4d4":"#import the libraries\nimport numpy as np\nimport pandas as pd \nfrom bs4 import BeautifulSoup\nimport matplotlib.pyplot as plt\nimport os\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout,BatchNormalization\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport matplotlib.pyplot as plt\nimport cv2\nimport random as rand","c1257ea6":"# Defiine functions that performs task 1 mentioned above\n\n#This function will get the coordinates of face given in the annotations file\n# the coordinates of lower left corner and upper right corner\ndef generate_box(obj):  \n    xmin = int(obj.find('xmin').text)\n    ymin = int(obj.find('ymin').text)\n    xmax = int(obj.find('xmax').text)\n    ymax = int(obj.find('ymax').text)\n    \n    return [xmin, ymin, xmax, ymax]\n#This function will give label assciated with each label and convert them to numbers\ndef generate_label(obj):\n    if obj.find('name').text == \"with_mask\":\n        return 1\n    elif obj.find('name').text == \"mask_weared_incorrect\":\n        return 2\n    return 0\n#Using in this main function we parse the annotations file and get the objects out from them\n# Also we use the above two functions here \ndef generate_target(image_id, file): \n    with open(file) as f:\n        data = f.read()\n        soup = BeautifulSoup(data, 'xml')\n        objects = soup.find_all('object')\n\n        num_objs = len(objects)\n\n        boxes = []\n        labels = []\n        for i in objects:\n            boxes.append(generate_box(i))\n            labels.append(generate_label(i))\n            \n        boxes=np.array(boxes)\n        labels=np.array(labels)\n\n        img_id = np.array(image_id)\n    # Annotation is in dictionary format\n        target = {}\n        target[\"boxes\"] = boxes\n        target[\"labels\"] = labels\n        \n        return (target,num_objs)","81d88808":"imgs = list(sorted(os.listdir(\"\/kaggle\/input\/face-mask-detection\/images\/\")))\nlen(imgs)","cef68ece":"labels = list(sorted(os.listdir(\"\/kaggle\/input\/face-mask-detection\/annotations\/\")))","47b510e9":"# Here we use the above functions and save results in lists\ntargets=[]#store coordinates\nnumobjs=[]#stores number of faces in each image\n#run the loop for number of images we have\nfor i in range(853):\n    file_image = 'maksssksksss'+ str(i) + '.png'\n    file_label = 'maksssksksss'+ str(i) + '.xml'\n    img_path = os.path.join(\"\/kaggle\/input\/face-mask-detection\/images\/\", file_image)\n    label_path = os.path.join(\"\/kaggle\/input\/face-mask-detection\/annotations\/\", file_label)\n    #Generate Label\n    target,numobj = generate_target(i, label_path)\n    targets.append(target)\n    numobjs.append(numobj)\n    ","bd5f5754":"#In this step we carry forward the second step mentioned above.\nimport cv2\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nface_images=[]\nface_labels=[]\nfor i in range(853):\n    img_path = r\"..\/input\/face-mask-detection\/images\/maksssksksss{}.png\".format(i)\n    #read image\n    img = cv2.imread(img_path)\n    for j in range(numobjs[i]):\n#       get coordinates of ith image in list \n        locs=(targets[i]['boxes'][j])\n#     Get the face from the image using the coordinates\n#the arguments are as ymin , ymax and xmin xmax\n        img1=img[locs[1]:locs[3],locs[0]:locs[2]]\n        img1 = cv2.resize(img1, (224, 224))\n        img1 = img_to_array(img1)\n        img1 = preprocess_input(img1)\n        face_images.append(img1)\n        face_labels.append(targets[i]['labels'][j])\n\nface_images= np.array(face_images, dtype=\"float32\")\nface_labels = np.array(face_labels)\n\n","7cdbf58c":"len(face_labels)","4ae1f0e9":"unique, counts = np.unique(face_labels, return_counts=True)\ndict(zip(unique, counts))","468dd037":"#Encode the labels in one hot encode form\nlb = LabelEncoder()\nlabels = lb.fit_transform(face_labels)\nlabels = to_categorical(labels)\nlabels","97ccb6d8":"#Perform data augmentation.\naug = ImageDataGenerator(\n    zoom_range=0.1,\n    rotation_range=25,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n    )","f9234a7c":"#define the model\nbaseModel = MobileNetV2(weights=\"imagenet\", include_top=False,\n\tinput_shape=(224, 224, 3))\n\n# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(7, 7))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(256, activation=\"relu\")(headModel)\nheadModel = Dropout(0.25)(headModel)\nheadModel = Dense(3, activation=\"softmax\")(headModel)\n\n# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n\tlayer.trainable = False","cbb4e6b7":"#define the hyperparamets for traing te neural network\nINIT_LR = 1e-4\nEPOCHS = 20\nBS = 32","97ad8255":"#divide data into training and testing sets\n(trainX, testX, trainY, testY) = train_test_split(face_images, labels,\n\ttest_size=0.2, stratify=labels, random_state=42)","53ff5bd5":"#Free some space.I did this tep as the notebook was running out of space while training\ndel targets,face_images,face_labels","94f5d095":"#Complie the model and train it\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt,\n\tmetrics=[\"accuracy\"])\n\n# train the head of the network\nH = model.fit(\n\taug.flow(trainX, trainY, batch_size=BS),\n\tsteps_per_epoch=len(trainX) \/\/ BS,\n\tvalidation_data=(testX, testY),\n\tvalidation_steps=len(testX) \/\/ BS,\n\tepochs=EPOCHS,\nclass_weight = {0:5 , 1:1, 2:10}) #Here we sets weights to each class. \n#Class having high weight will be considered more importat while training","d45ec1a4":"print(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=32)\n\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n\n# show a nicely formatted classification report\nprint(classification_report(testY.argmax(axis=1), predIdxs\n\t))\n\n# # serialize the model to disk\n# print(\"[INFO] saving mask detector model...\")\n\n# plot the training loss and accuracy\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")\nplt.show()","aa63d408":"#save the model and name it as you wish.\nmodel.save('kaggle1.h5')","2073f277":"#load the saved model\nimport keras\nmodel = keras.models.load_model('kaggle1.h5')","bc80783f":"#train the saved model again \nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt,\n\tmetrics=[\"accuracy\"])\n\n# train the head of the network\nprint(\"[INFO] training head...\")\nH = model.fit(\n\taug.flow(trainX, trainY, batch_size=BS),\n\tsteps_per_epoch=len(trainX) \/\/ BS,\n\tvalidation_data=(testX, testY),\n\tvalidation_steps=len(testX) \/\/ BS,\n\tepochs=EPOCHS,\nclass_weight = {0:5 , 1:1, 2:10})","7314a593":"#Evaluate the model again\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=32)\n\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n\n# show a nicely formatted classification report\nprint(classification_report(testY.argmax(axis=1), predIdxs\n\t))\n\n# # serialize the model to disk\n# print(\"[INFO] saving mask detector model...\")\n\n# plot the training loss and accuracy\nN = EPOCHS\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_acc\")\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")\nplt.show()","b9409cf2":"Next we check total number of faces detected and how many belong to each class. We see that the images in which mask is woren properly are really less. We will increase their weight when training the model.","f76a4c5f":"The biggest challenge is here to convert the available data to the form we can use it. It is going to take most of our time.So let us explore the data. Our dataset contains two folders, one having images and other having annotations.Since each of these images contain multiple persons which are either wearing a mask or not weraing it or not wearing it properly, we need to get these faces out of the images.","2d1879be":"The next step is o evaluate the model and plot the graphs showing the learning process.In the plot we can see when the the training stopped,the model was still improving, thus we save the model and train it again from the point we left.","c7099d48":"When testing this model on my webcam, I found it was not much reliable as if you cover your face with hand,it ll show you are wearing the mask. I have made another model but that can only detect if the person is wearing a mask or not.The model works exceptionally well abd better than this model as it cannot be fooled with a hand over mouth.Here is the link to the article [Real time mask detection using OpenCV](https:\/\/www.mygreatlearning.com\/blog\/real-time-face-detection)","ad739856":"[Here is a link to the youtube video showing results of this model on webcam stream](https:\/\/youtu.be\/HFNxRrirj2s)","56d87384":"# Mask Detection using MobilenetV2","5610cee4":"As you can see the performance of the model increased after training again for about 20 epochs(I ran the training cell twice by mistake so in the graph you cannot see that the model has started training from where I left)","18e29d16":"So here a brief summary of what we are going to do here\n1. First we are going to go through all the annotations file and parse the information using beautifulsoap.Later we are going to make a list which contains a dictionary having information about coordinates of faces and the labels of each face. \n2. Next we will use opencv to read the image , extract the face ares from it, preprocess it and save it to a list.We are going to save the labels simuntaneosly in another list\n3. Now we will finetune the MobilenetV2 model and get the results.\n\nAlso to know how to  use this model to detect the masks in real time on a webcam feed, follow the article [Mask detection using openCV](https:\/\/www.mygreatlearning.com\/blog\/real-time-face-detection).\n\n\n","855f7642":"Here is a step by step guide to make a classifier that can classify the faces as wearing mask, not wearing a mask and not wearing a mask properly.","42276ff9":"The annotations file of each file will help in that as it contains information about where the face it and under which category does  it fall"}}