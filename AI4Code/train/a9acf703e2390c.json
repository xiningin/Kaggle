{"cell_type":{"72323fc1":"code","45c46854":"code","90f22265":"code","1499e2d3":"code","4b3512ce":"code","2f431457":"code","5833c5e6":"code","f4d071d1":"code","6db267df":"code","85331b47":"code","169b1d7c":"code","e30dc161":"code","db55498b":"code","4d7748f2":"code","0427a273":"code","211754ce":"code","8977278b":"code","77efe75d":"code","0adb126d":"code","3d3bc072":"code","322f77bc":"code","36b34b8f":"code","ea8e369e":"code","a5726290":"code","b35fa3a3":"code","ec87d0d9":"code","d526588b":"code","52e849d0":"code","e2a3bd23":"code","7ff8b76b":"code","11d54309":"code","6fda6df7":"code","1a7d3419":"code","49128d4c":"code","95f3dff3":"code","4dc2e534":"code","b1543fd2":"code","b133ef5e":"code","791b47cd":"code","da3090d2":"code","110058dc":"code","fa171004":"code","5bfaad00":"code","3c322d9e":"code","f433d075":"code","83b63b88":"code","83de8adb":"code","982a744e":"code","e29d1e27":"code","97d86f4a":"code","55b2dade":"code","925a0008":"code","9a4add4a":"code","65ac889f":"code","7d72c6c9":"code","4807b1d7":"code","c843add8":"code","57684c2f":"code","8ab84343":"code","ccbc5f05":"markdown","4a23ccd8":"markdown","69f49b9d":"markdown","1a0cd497":"markdown","38eac387":"markdown","c8a450d6":"markdown","cdb8b3a6":"markdown","6fb62ed5":"markdown","9f7edf9d":"markdown","6decdd7a":"markdown","b9a4bda5":"markdown","7ec68a0a":"markdown","36e8aeea":"markdown","d0e59392":"markdown","82c12268":"markdown","d1e4dcf8":"markdown","1735b662":"markdown","dd2bdfd1":"markdown","cf2eaf6b":"markdown","41e58c32":"markdown","8f9d392a":"markdown","25d37c3a":"markdown","d518bd06":"markdown","84e7ed34":"markdown","74efc1b7":"markdown","5c15cec7":"markdown","b8666b75":"markdown","9492b246":"markdown","67f2316c":"markdown"},"source":{"72323fc1":"# import libraries for data exploration\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# %config InlineBackend.figure_Format='retina'\nimport warnings\nwarnings.filterwarnings('ignore')","45c46854":"# let's load the dataset\nhr = pd.read_csv(r'train_LZdllcl (1).csv')\nbckup = hr.copy()\nhr.head()","90f22265":"hr.info() # basic descr","1499e2d3":"hr = hr.drop('employee_id', axis=1)","4b3512ce":"hr['is_promoted'].value_counts()","2f431457":"sns.countplot(hr['is_promoted'])","5833c5e6":"hr.isnull().sum()","f4d071d1":"hr['education'].value_counts()","6db267df":"hr['previous_year_rating'].value_counts()","85331b47":"labels = hr['is_promoted'].copy()\nhr = hr.drop('is_promoted', axis=1)","169b1d7c":"# let's impute the missing values with mode and median value for now.","e30dc161":"from sklearn.impute import SimpleImputer","db55498b":"imputer = SimpleImputer(strategy='most_frequent')","4d7748f2":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","0427a273":"num_pipline = Pipeline([  # create pipelines for feature transformations\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())\n])","211754ce":"cat_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('encoder', OneHotEncoder())\n])","8977278b":"num_attribs = list(hr.select_dtypes(include=np.number))\ncat_attribs = list(hr.select_dtypes(exclude=np.number))","77efe75d":"full_pipeline = ColumnTransformer([\n    ('num_attribs', num_pipline, num_attribs),\n    ('cat_attribs', cat_pipeline, cat_attribs)\n])","0adb126d":"hr_prepared = full_pipeline.fit_transform(hr)","3d3bc072":"hr_prepared.shape","322f77bc":"# hr_prepared = pd.DataFrame(hr_prepared, columns=list(hr))","36b34b8f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(hr_prepared, labels, test_size=0.2, random_state=42)","ea8e369e":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","a5726290":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report, f1_score # choosing confusion matrix and F1 score","b35fa3a3":"log_reg = LogisticRegression()\n\nlog_reg.fit(X_train, y_train)","ec87d0d9":"predicted = log_reg.predict(X_test)","d526588b":"print(confusion_matrix(y_test, predicted))","52e849d0":"print(classification_report(y_test, predicted))","e2a3bd23":"f1_score(y_test, predicted)","7ff8b76b":"from imblearn.over_sampling import SMOTE","11d54309":"sm = SMOTE()","6fda6df7":"X, y = sm.fit_resample(hr_prepared, labels)","1a7d3419":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","49128d4c":"new_model = LogisticRegression()\nnew_predict = new_model.fit(X_train, y_train).predict(X_test)","95f3dff3":"print(confusion_matrix(y_test, new_predict))","4dc2e534":"print(classification_report(y_test, new_predict))","b1543fd2":"f1_score(y_test, new_predict)","b133ef5e":"hr.isnull().sum()","791b47cd":"cat_hr = bckup.copy()\n\neducation_mode = cat_hr['education'].mode()[0]\npyr_median = cat_hr['previous_year_rating'].median()\n\ncat_hr['education'].fillna(education_mode, inplace=True)\ncat_hr['previous_year_rating'].fillna(pyr_median, inplace=True)","da3090d2":"# cat_hr = bckup.dropna(how='any')","110058dc":"cat_hr.isnull().sum().sum()","fa171004":"cat_hr.drop('employee_id', axis=1, inplace=True)\n# cat_hr.head()","5bfaad00":"from catboost import CatBoostClassifier\nfrom imblearn.over_sampling import SMOTENC","3c322d9e":"sm = SMOTENC(categorical_features=[0, 1, 2, 3, 4]) # categorical feature column index are given as input","f433d075":"X = cat_hr.drop('is_promoted', axis=1)\ny = cat_hr['is_promoted'].copy()\n\nX, y = sm.fit_resample(X, y)","83b63b88":"cat_hr.columns","83de8adb":"X = pd.DataFrame(X, columns=['department', 'region', 'education', 'gender', 'recruitment_channel',\n       'no_of_trainings', 'age', 'previous_year_rating', 'length_of_service',\n       'KPIs_met >80%', 'awards_won?', 'avg_training_score'])","982a744e":"np.unique(y, return_counts=True)","e29d1e27":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","97d86f4a":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","55b2dade":"new_cbr = CatBoostClassifier(verbose=400, eval_metric='F1')","925a0008":"new_cbr.fit(X_train, y_train,cat_features=[0,1,2,3,4],eval_set=(X_test, y_test),plot=True) #index of cat. features are mentioned","9a4add4a":"test_data = pd.read_csv(r'test_2umaH9m.csv') \n# test_data.head()","65ac889f":"# test_data_prepared = full_pipeline.fit_transform(test_data)","7d72c6c9":"test_data.isnull().sum()","4807b1d7":"test_data['education'].fillna(test_data['education'].mode()[0], inplace=True)\ntest_data['previous_year_rating'].fillna(test_data['previous_year_rating'].median(), inplace=True)","c843add8":"final = test_data.drop('employee_id', axis=1)","57684c2f":"cbr_predicted = new_cbr.predict(final)\n\ncbr_predicted = pd.DataFrame(cbr_predicted, columns=['is_promoted'])\n\ndf = pd.concat([test_data['employee_id'], cbr_predicted], axis=1)","8ab84343":"df.to_csv(r'C:\\Users\\gokul\\Downloads\\results.csv')","ccbc5f05":"**Imbalance handling**","4a23ccd8":"**Dependent variables**:       \n\n    Employee id - Unique ID for employee\n    Department - Department of employee\n    Region - Region of employment (unordered)\n    Education - Education Level\n    Gender - Gender of Employee\n    Recruitment Channel - Channel of recruitment for employee\n    No of trainings - no of other trainings completed in previous year on soft skills, technical skills etc.\n    Age - Age of Employee\n    Previous year rating - Employee Rating for the previous year\n    Length of service - Length of service in years\n    KPIs met >80% ? - if Percent of KPIs(Key performance Indicators) >80% then 1 else 0\n    Awards won? - if awards won during previous year then 1 else 0\n    Avg training score - Average score in current training evaluations\n\n**Target variable**:               \n\n    Is promoted ? - (Target) Recommended for promotion","69f49b9d":"**Aim**:            \n    Company needs your help in identifying the eligible candidates at a particular checkpoint \n    so that they can expedite the entire","1a0cd497":"### Feature category        \n**Categorical**       \n    - department              \n    - region                  \n    - education               \n    - gender                  \n    - recruitment_channel \n    - no_of_trainings\n    - age\n    - previous_year_rating \n    - KPIs_met >80%\n    - awards_won?\n    - is_promoted \n    - \n**Continuous**    \n    - length_of_service\n    - avg_training_score\n    ","38eac387":"**Without treating imbalance**","c8a450d6":"As we can see, the f score has greatly improved after handling imbalance, from 30% to 80%. Let's see we can improve\nthe score with other models.","cdb8b3a6":"To resample data with categorical features, we are using SMOTENC, which is designed to handle both categorical and\nnumerical features.","6fb62ed5":"We used one hot encoding to encode the categorical features in the data, let's use Cat boost algorithm, which has in built \nmechanism to handle categorical features.","9f7edf9d":"Since under sampling leads to loss of data, let's try first with over sampling method SMOTE.","6decdd7a":"## Exploratory Data Analysis","b9a4bda5":"Now, our data is balanced.","7ec68a0a":"### Handling missing values","36e8aeea":"### Final prediction","d0e59392":"Let's drop unnecessary features.","82c12268":"### Let's check the balance of the dataset","d1e4dcf8":"As we can figure out, only few candidates will be considered for promotion, and that makes sense. But, in order to get \naccurate results, we may need to handle this imbalance data.","1735b662":"**Logistic Regression**","dd2bdfd1":"### Prepare test data","cf2eaf6b":"Our dataset contains 54808 entries and 14 features","41e58c32":"Our classification results are poor for predicting, whether a customer has got promotion.","8f9d392a":"Our accuracy has greatly increased from 80% to 96%, using Cat boost.","25d37c3a":"**Cat Boost**","d518bd06":"### Data Type      \n**Object**\n\n    - department              \n    - region                  \n    - education               \n    - gender                  \n    - recruitment_channel \n    \n**Numeric**              \n    - employee_id\n    - no_of_trainings\n    - age\n    - previous_year_rating    \n    - length_of_service       \n    - KPIs_met >80%           \n    - awards_won?             \n    - avg_training_score      \n    - is_promoted             ","84e7ed34":"we have missing values in 'Region' and 'Previous year rating' column","74efc1b7":"We could see that, the model couldn't classify more than half of the data is missclassified in true negative region.","5c15cec7":"### Attribute information","b8666b75":"After one hot encoding, our dimensions has increased from 14 to 58.","9492b246":"### Model building","67f2316c":"**After handling imbalance**"}}