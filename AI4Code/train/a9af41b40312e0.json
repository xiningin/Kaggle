{"cell_type":{"5696ab25":"code","c0623a1f":"code","40f11095":"code","18ed29be":"code","a1ec0e6b":"code","8cd990aa":"code","03a26a96":"code","30cc89c2":"code","44779fd4":"code","6ac18a52":"code","a7937834":"code","68e62923":"code","e3aed8b0":"code","abbbabea":"code","3373b588":"code","ddd3efab":"code","43417795":"code","2ef45663":"code","308f75d5":"code","0559cac2":"code","6ee34d53":"code","67935ed3":"code","ed83500a":"code","a977818f":"code","82738b24":"code","d6f85440":"code","73a7d9a0":"code","c1831162":"code","28d0629e":"code","1270cea7":"code","e5e730ad":"code","32db30c0":"code","38d10bf3":"code","608fcfe6":"code","206ab832":"code","fe1156e0":"code","edfc6c41":"code","1131b166":"code","4f9f9a3c":"code","dd9c998d":"code","c072c1cd":"code","97eec65c":"code","2868615b":"code","c3211d7e":"code","aa65fc24":"code","013443fb":"code","3a7481fd":"code","37bbd4d8":"code","a5520978":"code","868fe5f6":"code","7b21ca79":"code","1af3d22c":"code","f710ac50":"code","26f67816":"code","7afac2d6":"code","7aff83be":"code","a6d27cd9":"code","56bd9f1e":"code","6f631664":"code","3448ab69":"code","3ab9b428":"code","a68d2b36":"code","3c6ba45b":"code","85be6b56":"code","53c611be":"code","8568dde5":"code","d54d7e52":"code","96dfa145":"code","bbfb51a9":"code","d559217d":"code","7eb4604e":"code","2b6dd428":"code","dee84053":"code","affca8fc":"code","41b51e5c":"code","49b59af2":"code","7c2bccc9":"code","3f8d8e12":"code","1746c638":"code","8cc9d015":"code","55406319":"code","60d92d69":"code","e41c670a":"code","4ec623a2":"code","3a132d2e":"code","0ce8cc5e":"code","b9fef705":"code","7a75b58f":"code","dad16a8c":"code","1bb7b770":"code","d851d9a7":"code","ecc25bb8":"code","d398aec8":"code","96ad069d":"code","f4ac1b9d":"code","afbc8aa9":"code","a3fba42c":"code","a0a1e17b":"code","9f1960c3":"code","6c641bae":"code","6ad49de7":"code","01ad9b99":"code","5b0e814e":"code","e8e08d9d":"code","b9a6f138":"code","aac7fc7e":"code","bc60d38f":"code","d92f6bde":"code","167656c8":"code","d0e2d5c3":"code","c643e0e3":"code","160dacaf":"code","3cf7ef8e":"code","3f7fb0d9":"code","3cb06ad1":"code","b2419a65":"code","d42f7ec5":"code","d6b10202":"code","cf241593":"code","8718f44f":"code","58f19d72":"code","7f54b6c8":"code","774eec75":"code","5a372792":"code","d2fd7455":"code","ee732dc5":"code","c9d5d137":"code","9f555d11":"code","fcb35184":"code","497a4e0a":"code","77aff5ef":"code","b920e652":"code","4718cc89":"code","62f82461":"code","16b30128":"code","9f609f97":"code","2797889f":"code","1911e83f":"code","05ffa280":"code","eaa7cc66":"code","51c6c510":"code","d92d4550":"code","12e1e8c8":"code","03fb25b8":"code","251aac1b":"code","3d4f3218":"code","3f7239b2":"code","19bac811":"code","55d77946":"code","9370aca0":"code","9364137d":"code","3d02a1f4":"code","6975fda8":"code","0b82c943":"code","6415ccf6":"code","dec13aa2":"code","5a203b47":"markdown"},"source":{"5696ab25":"# functions literacy\n\n# ?print\n# help(print)\n\nprint(\"a\", \"b\", sep=\"_\")","c0623a1f":"# define a function\n\ndef calculate(x):\n    print(x * 2)","40f11095":"calculate(2)","18ed29be":"def summer(arg1, arg2):\n    print(arg1 + arg2)","a1ec0e6b":"summer(1, 2)","8cd990aa":"def summer(arg1, arg2):\n    \"\"\"\n    sum of two numbers\n    \n    args:\n    ------\n            arg1: int, float\n            arg2: int, float\n    \n    \"\"\"\n    print(arg1+arg2)","03a26a96":"help(summer)","30cc89c2":"summer(7,888)","44779fd4":"# statement\/body part of functions\n\ndef multiplication(a, b):\n    c = a * b\n    print(c)","6ac18a52":"multiplication(2,3)","a7937834":"def say_hi():\n    print(\"hello\")\n    print(\"hi\")\n    print(\"hola\")","68e62923":"say_hi()","e3aed8b0":"list_store = []\n\ndef add_element(a, b):\n    c = a * b\n    list_store.append(c)\n    print(list_store)","abbbabea":"add_element(10,999)\nadd_element(10,923)\nadd_element(10,939)","3373b588":"list_store","ddd3efab":"# default parameters\/arguments\n\ndef divide(a, b=1):\n    print(a\/b)","43417795":"divide(3333)","2ef45663":"# \"return\" allows to use the output of a function as input.\ndef calculate_(warm, moisture, charge):\n    return int ((warm + moisture) \/ charge)","308f75d5":"calculate_(10,20,30) * 10","0559cac2":"def standardization(a, p):\n    return a * 10 \/ 100 * p * p","6ee34d53":"standardization(10, 10)","67935ed3":"def all_calculation(warm, moisture, charge, p):\n    a = calculate_(warm, moisture, charge)\n    b = standardization(a, p)\n    print(b * 10)","ed83500a":"all_calculation(10, 10, 10, 10)","a977818f":"# local & global variables\n\nlist_store = [1, 2]\n\ndef add_element(a, b):\n    c = a * b\n    list_store.append(c)\n    print(list_store)\n    \nadd_element(10, 20)","82738b24":"# correct function writing\n\n# dry (don't repeat yourself)\n# dot (do one thing)\n# modularity\n# pep8","d6f85440":"# conditions\n\n1 == 1\n1 == 2\n\nif 1 == 1:\n    print(\"something\")","73a7d9a0":"number = 10\nif number == 10:\n    print(\"condition is met\")","c1831162":"def number_check(number):\n    if number == 10:\n        print(\"condition is met\")","28d0629e":"number_check(10)","1270cea7":"# else\ndef number_check(number):\n    if number == 10:\n        print(\"condition is met\")\n    else:\n        print(\"condition is not met\")","e5e730ad":"number_check(110)","32db30c0":"# elif\n\ndef number_check(number):\n    if number > 10:\n        print(\"greater than 10\")\n    elif number < 10:\n        print(\"less than 10\")\n    else:\n        print(\"equal to 10\")","38d10bf3":"number_check(10)\nnumber_check(9)\nnumber_check(11)","608fcfe6":"# loops\nstudents = [\"john\", \"mark\", \"venessa\", \"mariam\"]\nstudents[0]\nstudents[2]\nstudents[3]\n\n# type(students[0])\n\nstudents[0].upper()\nstudents[1].upper()\nstudents[2].upper()","206ab832":"for i in students:\n    print(i.upper())","fe1156e0":"for i in students:\n    print(\"_ \" +i + \"_\")","edfc6c41":"for i in students:\n    print(F\"Old_Name: {i}, New_Name: {i.upper()}\")","1131b166":"salaries = [1000, 2000, 3000, 4000, 5000]\n\nfor salary in salaries:\n    print(salary)","4f9f9a3c":"# 1000 * 20 \/ 100 + 1000\n# raise salaries with the for loop\n\ndef new_salary(x):\n    return int(x * 20 \/ 100 + x)","dd9c998d":"new_salary(10000)","c072c1cd":"def new_salary(salary, rate):\n    return int(salary * rate \/ 100 + salary)","97eec65c":"new_salary(6000,20)","2868615b":"def new_salary(salary, rate=20):\n    return int(salary * rate \/ 100 + salary)","c3211d7e":"new_salary(4000)\nnew_salary(4000,30)","aa65fc24":"for salary in salaries:\n    print(new_salary(salary, 400))","013443fb":"def raise_up(x):\n    print(int(x * 10 \/ 100 + x))","3a7481fd":"def raise_down(x):\n    print(int(x * 20 \/ 100 + x))","37bbd4d8":"for salary in salaries:\n    if salary >= 3000:\n        raise_up(salary)\n    else:\n        raise_down(salary)","a5520978":"def new_salary(salary, rate=20):\n    print(int(salary * rate \/ 100 + salary))\n    #return int(salary * rate \/ 100 + salary)","868fe5f6":"for salary in salaries:\n    if salary >= 3000:\n        new_salary(salary, rate = 10)\n    else:\n        new_salary(salary, rate = 20)","7b21ca79":"# interview question\n\n# before: \"hi my name is john and i am learning python\"\n# after: \"Hi mY NaMe iS JoHn aNd i aM LeArNiNg pYtHoN\"\n\nfor i in range(len(\"burak\")):\n    print(i)","1af3d22c":"def alternating(string):\n    new_string = \"\"\n    for string_index in range(len(string)):\n        if string_index % 2 == 0:\n            new_string += string[string_index].upper()\n        else:\n            new_string += string[string_index].lower()\n        \n    print(new_string)","f710ac50":"alternating(\"hi my name is john and i am learning python\")","26f67816":"def alternating_practical(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i].upper()\n        else:\n            new_string += string[i].lower()\n        print(new_string)","7afac2d6":"alternating_practical(\"hello my name is burak kanber\")","7aff83be":"# break & continue & while\n\n# break: used to stop when a condition is met.\n\nsalaries = [1000, 2000, 3000, 4000]\n\nfor salary in salaries:\n    if salary == 3000:\n        print(\"break point\")\n        break\n    print(salary)","a6d27cd9":"# continue: object in iteration is skipped when a condition is met\n\nfor salary in salaries:\n    if salary == 3000:\n        continue\n    print(salary)","56bd9f1e":"# while: \"as long as\" do this\n\nnumber = 1\nwhile number < 11:\n    print(number)\n    number += 1","6f631664":"students_ = ['john', 'mark', 'venessa', 'mariam']","3448ab69":"# enumerate\nfor student in students_:\n    print(i)","3ab9b428":"for index, student in enumerate(students_):\n    print(index, student)","a68d2b36":"A = []\nB = []\n\nfor index, student in enumerate(students_):\n    if index % 2 == 0:\n        A.append(student)\n    else:\n        B.append(student)","3c6ba45b":"A","85be6b56":"B","53c611be":"def divide_students(students_): #students_ list\n    groups = [[], []]\n    for index, student in enumerate(students_):\n        if index % 2 == 0:\n            groups[0].append(student)\n        else:\n            groups[1].append(student)\n    \n    return groups","8568dde5":"divide_students(students_)","d54d7e52":"# alternating string with enumerate\ndef alternating_with_enumerate(string):\n    new_string = \"\"\n    for i, letter in enumerate(string):\n        if i % 2 == 0:\n            new_string += letter.upper()\n        else:\n            new_string += letter.lower()\n    print(new_string)","96dfa145":"alternating_with_enumerate(\"this time it will\")","bbfb51a9":"# zip\n\nstudents = [\"a\", \"b\", \"c\"]\ndepartments = [\"ad\", \"bd\", \"cd\"]\nages = [1, 3, 5]\n\nprint(list(zip(students, departments, ages)))","d559217d":"# lambda\n\nnew_sum = lambda a,b: a + b\nnew_sum(7, 8) * 133","7eb4604e":"# map\n\nsalaries = [1000, 3000, 5000]\ndef new_salary(x):\n    return x * 20 \/ 100 + x\n\nfor salary in salaries:\n    print(new_salary(salary))","2b6dd428":"list(map(new_salary, salaries))","dee84053":"list(map(lambda x: x * 20 \/ 100 + x, salaries))","affca8fc":"list(map(lambda x: x ** 2, salaries))","41b51e5c":"list(map(lambda x: x.upper(), \"john\"))","49b59af2":"# filter\n\n6 % 2 == 0\nlist_store = [1,2,3,4,5,6,7,8,9,10]\nlist(filter(lambda x: x % 2 == 0, list_store))","7c2bccc9":"# reduce\nfrom functools import reduce\nlist_store = [10,1,3,4]\nreduce(lambda a,b: a + b, list_store)","3f8d8e12":"# comprehensions #LEVEL 2 CONGRATULATIONS YOU HAVE LEVELED ***********","1746c638":"# list comprehension\nsalaries = [1000, 2000, 3000]\n\nfor salary in salaries:\n    print(new_salary(salary))\n\nnull_list = []\n\nfor salary in salaries:\n    null_list.append(new_salary(salary))\n    \nnull_list","8cc9d015":"for salary in salaries:\n    if salary > 3000:\n        null_list.append(new_salary(salary))\n    else:\n        null_list.append(new_salary(salary*2))\n        \nnull_list","55406319":"[new_salary(salary * 2) if salary > 3000 else new_salary(salary) for salary in salaries]","60d92d69":"salaries = [1000, 2000, 3000, 4000]\n\nsalaries","e41c670a":"[new_salary(salary * 2) if salary < 3000 else new_salary(salary) for salary in salaries]","4ec623a2":"[salary * 2 for salary in salaries]","3a132d2e":"[salary * 2 for salary in salaries if salary > 3000]","0ce8cc5e":"[salary * 2 if salary < 3000 else salary ** 2 for salary in salaries]","b9fef705":"def new_salary(salary, rate=20):\n    return int(salary * rate \/ 100 + salary)","7a75b58f":"[new_salary(salary * 2) if salary > 3000 else new_salary(salary) for salary in salaries]","dad16a8c":"students = [\"John\", \"Mark\", \"Venessa\", \"Mariam\"]\nstudents_no = [\"John\", \"Venessa\"]","1bb7b770":"[student.lower() if student in students_no else student.upper() for student in students]","d851d9a7":"# dictionary comprehension\n\ndict_ = {\"a\": 1, 'b': 2, 'c': 3, 'd': 4}\ndict_[\"a\"]\ndict_[\"b\"]\n\ndict_.keys()\ndict_.values()\ndict_.items()","ecc25bb8":"for value in dict_.values():\n    print(value*5)","d398aec8":"{k: v*5 for (k, v) in dict_.items()}","96ad069d":"#list comp.\n[value * 5 for value in dict_.values()]","f4ac1b9d":"#dict comp.\n{k.upper(): v * 5 for (k, v) in dict_.items()}","afbc8aa9":"# add element to dictionary using loop\n\n# squaring even numbers and adding them to the dictionary\n# interview question\n\nnumbers = range(10)\nfor i in numbers:\n    print(i)","a3fba42c":"new_dict = {}\nfor n in numbers:\n    if n % 2 == 0:\n        new_dict[n] = n ** 2","a0a1e17b":"new_dict","9f1960c3":"numbers_ = range(10)\nfor n in numbers_:\n    print(n)\n    \n{n: n ** 2 if n % 2 == 0  else n ** 3 for n in numbers_}\n{n: n ** 2 for n in numbers_ if n % 2 == 0}","6c641bae":"# list & dict comprehension apps\n# the goal is to change variable names in a dataset\n\n# before:\n# [\"total\", \"speeding\", \"alcohol\", \"not_distracted\", \"no_previous\", \"ins_premium\", \"ins_losses\", \"abbrev\"]\n\n# after:\n# [\"TOTAL\", \"SPEEDING\", \"ALCOHOL\", \"NOT_DISTRACTED\", \"NO_PREVIOUS\", \"INS_PREMIUM\", \"INS_LOSSES\", \"ABBREV\"]","6ad49de7":"import seaborn as sns\ndf = sns.load_dataset(\"car_crashes\")","01ad9b99":"df.columns","5b0e814e":"df.columns = [col.upper() for col in df.columns]","e8e08d9d":"df.columns","b9a6f138":"A = []\nfor col in df.columns:\n    A.append(col.lower())\n    \ndf.columns = A\n\nA","aac7fc7e":"[col + \"_FLAG_\" if \"ins\" in col else col + \"_NO_FLAG_\" for col in df.columns]","bc60d38f":"df.columns = [\"_FLAG_\" + col if \"ins\" in col else col + \"_NO_FLAG_\" for col in df.columns]","d92f6bde":"[\"CAT_\" + col.upper() if df[col].dtype == \"O\" else col.upper() for col in df.columns]","167656c8":"list_ = [\"mean\", \"min\", \"max\", \"var\"]\n{col: list_ for col in df.columns}","d0e2d5c3":"dff = sns.load_dataset(\"car_crashes\")\ndff.head()","c643e0e3":"num_cols = [col for col in dff.columns if dff[col].dtype != \"O\"]","160dacaf":"agg_list = [\"min\", \"max\", \"mean\", \"sum\"]\ndict_ = {}\n\nfor col in num_cols:\n    dict_[col] = agg_list\n    \ndict_","3cf7ef8e":"{col: agg_list for col in num_cols}","3f7fb0d9":"new_dict_ = {col: agg_list for col in num_cols}","3cb06ad1":"dff.groupby(\"abbrev\").agg(new_dict_)","b2419a65":"dff_2 = sns.load_dataset(\"tips\")","d42f7ec5":"dff_2.head()","d6b10202":"num_cols = [col for col in dff_2.columns if dff_2[col].dtype in [int, float]]","cf241593":"agg_list = [\"min\", \"max\", \"mean\", \"sum\"]\nnew_dict = {col: agg_list for col in num_cols}","8718f44f":"dff_2.groupby(\"time\").agg(new_dict)","58f19d72":"import seaborn as sns\ndf = sns.load_dataset(\"tips\")","7f54b6c8":"df.head()","774eec75":"num_cols = [col for col in df.columns if df[col].dtype in [int, float]]\nnum_cols","5a372792":"agg_list = [\"mean\", \"sum\", \"min\", \"max\"]","d2fd7455":"new_dict = {col: agg_list for col in num_cols}","ee732dc5":"df.groupby(\"time\").agg(new_dict)","c9d5d137":"df.groupby(\"day\").agg(new_dict)","9f555d11":"\"\"\"\nnum_cols = [col for col in df.columns if df[col].dtype in [int, float]]\nagg_list = [\"mean\", \"sum\", \"min\", \"max\"]\nnew_dict = {col: agg_list for col in num_cols}\ndf.groupby(\"time\").agg(new_dict)\n\"\"\"\n\n# num_cols = [col for col in df.columns if df[col].dtype in [int,float]]\n# agg_list = [\"min\", \"max\", \"sum\", \"mean\"]\n# new_dict = {col: agg_list for col in num_cols}\n# df.groupby(\"time\").agg(new_dict)","fcb35184":"import seaborn as sns\ndf = sns.load_dataset(\"car_crashes\")","497a4e0a":"num_cols = [col for col in df.columns if df[col].dtype != \"O\"]","77aff5ef":"num_cols","b920e652":"agg_list = [\"min\", \"max\", \"sum\", \"mean\"]","4718cc89":"new_dict = {col: agg_list for col in num_cols}","62f82461":"df.groupby(\"speeding\").agg(new_dict)","16b30128":"new_dict","9f609f97":"{col: [str(col) + \"_\" + c for c in agg_list] for col in num_cols}","2797889f":"# fancy index\n\ndf[num_cols].head()","1911e83f":"{row[0]: [int(s) for s in row[1:]] for row in df[num_cols].values}","05ffa280":"# decorators\n\ndef say_hi(name):\n    return f\"Hello {name}!\"","eaa7cc66":"say_hi(\"burak\")","51c6c510":"def talk(func):\n    return func(\"John\")","d92d4550":"talk(say_hi)","12e1e8c8":"def say_hey(name):\n    return f\"Hey hey {name}!\"","03fb25b8":"talk(say_hey)","251aac1b":"def meeting():\n    print(\"hi guys! i am the host\")\n    \n    def hi_from_john():\n        print(\"hello!\")\n        \n    def hi_from_erik():\n        print(\"hey hey!\")\n        \n    hi_from_john()\n    hi_from_erik()\n    \nmeeting()","3d4f3218":"# returning functions from functions\n\ndef meeting():\n    print(\"hi guys! i am the host\")\n    \n    def hi_from_john():\n        print(\"hello!\")\n        \n    def hi_from_erik():\n        print(\"hey hey!\")\n        \n    hi_from_john()\n    hi_from_erik()\n    \n    return hi_from_john, hi_from_erik\n\nhi_from_john, hi_from_erik = meeting()","3f7239b2":"# basic decorator template\n# decorators wrap a function, modifying its behavior\n\ndef my_decorator(func):\n    def wrapper():\n        print(\"Do something before the function call\")\n        func()\n        print(\"Do something before the function call\")\n    return wrapper\n\ndef say_hi():\n    print(\"Hello!\")","19bac811":"say_hi = my_decorator(say_hi)","55d77946":"say_hi()","9370aca0":"say_hi","9364137d":"say_hi.__name__","3d02a1f4":"import functools\ndef my_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Do something before the function call.\")\n        func(*args, **kwargs)\n        print(\"Do something after the function call.\")\n    return wrapper\n\n@my_decorator\ndef say_hi(name):\n    print(\"Hello!\", name)\n    \n    \nsay_hi(\"BK\")","6975fda8":"def my_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Do something before the function call.\")\n        func(*args, **kwargs)\n        print(\"Do something after the function call.\")\n    return wrapper","0b82c943":"def party_boy(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"welcome our home!\")\n        func(*args, **kwargs)\n        print(\"Bye bye!\")\n    return wrapper","6415ccf6":"@party_boy\ndef do_corona_party():\n    print(\"Do something silly\")\n    \ndo_corona_party()","dec13aa2":"# real world example: timing function\n\nimport functools\nimport time\n\ndef timer(func):\n    @functools.wraps(func)\n    def wrapper_timer(*args, **kwargs):\n        start_time = time.perf_counter()\n        value = func(*args, **kwargs)\n        end_time = time.perf_counter()\n        run_time = end_time - start_time\n        print(f\"Finished {func.__name__!r} in {run_time:.4f} secs\")\n        return value\n    return wrapper_timer\n\n@timer\ndef sum_of_even_numbers(numbers):\n    even_sum = 0\n    for number in range(numbers):\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum\n\n\nsum_of_even_numbers(10)","5a203b47":"<h2 style='background:#11489c; border:0; color:white'><center>Data Structures<\/center><\/h2>\n\nIn the studies on the python programming language, data structures were emphasized and practiced\n\n<h2 style='background:#11489c; border:0; color:white'><center>Sections - Comprehensions\/Functions\/Conditions\/Loops<\/center><\/h2>\n\n* Comprehensions\n* <a href=\"https:\/\/ibb.co\/W5NtjM6\"><img src=\"https:\/\/i.ibb.co\/F3kVCyK\/1-x-Uhlkns-L6r-R-s-Dc-VQK7k-Q.png\" alt=\"1-x-Uhlkns-L6r-R-s-Dc-VQK7k-Q\" border=\"0\"><\/a>\n\n* Functions\n* <a href=\"https:\/\/ibb.co\/GCtZGdx\"><img src=\"https:\/\/i.ibb.co\/ss6Tcgm\/98650python-functions-banner.jpg\" alt=\"98650python-functions-banner\" border=\"0\"><\/a>\n\n* Conditions\n* <a href=\"https:\/\/ibb.co\/DLgSGzn\"><img src=\"https:\/\/i.ibb.co\/wYrxJB1\/t-78f3bacaa261.png\" alt=\"t-78f3bacaa261\" border=\"0\"><\/a>\n\n* Loops\n* <a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/i.ibb.co\/r7BQGMB\/5-22.png\" alt=\"5-22\" border=\"0\"><\/a>"}}