{"cell_type":{"e379e150":"code","58a1c2a3":"code","3ecdad97":"code","62949dc3":"code","cb37a290":"code","2504bed6":"code","06b1ab65":"code","4c22d9a3":"code","51e60e16":"code","94c23473":"code","1fa97d93":"code","ccfe69d9":"code","8924ba3b":"code","b6d24826":"code","bb373bed":"code","2555bfc2":"code","66411bd5":"code","f41f7b6d":"code","dab16b9b":"code","1c77a267":"code","b500b4fe":"code","50f60c32":"code","ad59c769":"code","0acfaaf3":"code","786ac814":"code","c5c427dc":"code","b1b7a34d":"code","ce6d12b3":"code","0fe1697e":"code","869df2b9":"code","cc55a32c":"code","b105e33a":"markdown","7f437ff5":"markdown"},"source":{"e379e150":"!pip install neattext\nimport pandas as pd\nimport neattext.functions as nfx\nimport matplotlib.pyplot as plt\n%matplotlib inline","58a1c2a3":"# Load ML\/Rc Pkgs\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity,linear_kernel","3ecdad97":"# Load our dataset\n\ndf = pd.read_csv(\"..\/input\/udemy-courses\/udemy_courses.csv\")","62949dc3":"df.head()","cb37a290":"df['course_title']\n","2504bed6":"\ndir(nfx)","06b1ab65":"# Clean Text:stopwords,special charac\ndf['clean_course_title'] = df['course_title'].apply(nfx.remove_stopwords)","4c22d9a3":"# Clean Text:stopwords,special charac\ndf['clean_course_title'] = df['clean_course_title'].apply(nfx.remove_special_characters)","51e60e16":"df[['course_title','clean_course_title']]","94c23473":"# vectorize our clean_course_tile\ncount_vect = CountVectorizer()\ncv_mat = count_vect.fit_transform(df['clean_course_title'])","1fa97d93":"# Sparse\ncv_mat\n","ccfe69d9":"cv_mat.todense()","8924ba3b":"df_cv_words = pd.DataFrame(cv_mat.todense(),columns=count_vect.get_feature_names())\n","b6d24826":"# Cosine Similarity Matrix\ncosine_sim_mat = cosine_similarity(cv_mat)\n","bb373bed":"\ncosine_sim_mat","2555bfc2":"df.head()","66411bd5":"# Get Course ID\/Index\ncourse_indices = pd.Series(df.index,index=df['course_title']).drop_duplicates()\n","f41f7b6d":"course_indices","dab16b9b":"idx=course_indices['How To Maximize Your Profits Trading Options']","1c77a267":" scores = list(enumerate(cosine_sim_mat[idx]))","b500b4fe":"# Sort our scores per cosine score\nsorted_scores = sorted(scores,key=lambda x:x[1],reverse=True)\n","50f60c32":"sorted_scores","ad59c769":"# Selected Courses Scores\nselected_course_indices = [i[0] for i in sorted_scores[1:]]","0acfaaf3":"selected_course_indices\n","786ac814":"selected_course_scores = [i[1] for i in sorted_scores[1:]]","c5c427dc":"recommended_result = df['course_title'].iloc[selected_course_indices]\n","b1b7a34d":"rec_df = pd.DataFrame(recommended_result)","ce6d12b3":"rec_df.head()","0fe1697e":"rec_df['similarity_scores'] = selected_course_scores","869df2b9":"\ndef recommend_course(title,num_of_rec=10):\n    # ID for title\n    idx = course_indices[title]\n    # Course Indice\n    # Search inside cosine_sim_mat\n    scores = list(enumerate(cosine_sim_mat[idx]))\n    # Scores\n    # Sort Scores\n    sorted_scores = sorted(scores,key=lambda x:x[1],reverse=True)\n    # Recommend \n    selected_course_indices = [i[0] for i in sorted_scores[1:]]\n    selected_course_scores = [i[1] for i in sorted_scores[1:]]\n    result = df['course_title'].iloc[selected_course_indices]\n    rec_df = pd.DataFrame(result)\n    rec_df['similarity_scores'] = selected_course_scores\n    return rec_df.head(num_of_rec)","cc55a32c":"recommend_course(\"Trading Options Basics\",10)","b105e33a":"#  wrapping up everything in single function","7f437ff5":"# Course Recommendation System using udemy dataset\n\nCosine similarity (recommendation )\nLinear Similarity\n\n# steps\n### Dataset (Udemy courses)\n### Vectorize Our dataset\n### Cosine Similarity Matrix Construction\n### ID Score\n### Recommended\n"}}