{"cell_type":{"960feca6":"code","2fba9a46":"code","7c704c4d":"code","a9d9e66b":"code","3e244479":"code","4f05ef19":"code","b338fea5":"code","1c52ae7b":"code","13817f3c":"code","4eaae6d9":"code","a7789031":"code","dc661b1a":"code","beddf6bf":"code","d1f720c3":"code","534fdac1":"code","fc5e9842":"code","7135dca7":"code","882272a6":"code","99728561":"code","a6e7834e":"code","cf29383c":"code","df94732e":"code","d7f63f69":"code","e4f241af":"code","ce233d6a":"code","d246602f":"code","df424a4e":"code","1f309c73":"code","083554ce":"code","a01cf6c7":"code","db7190d3":"code","d8d6a56a":"code","0da17047":"code","0ba6a8e2":"code","88fb8496":"code","032986ec":"code","2eecd6ab":"code","0af31dc5":"code","d067b912":"code","77dfd576":"code","b3f05cab":"code","a1687c29":"markdown","a8459850":"markdown","6a40d9c6":"markdown","4b3b74c1":"markdown","ceb1af9e":"markdown","5f668fee":"markdown","3f931159":"markdown","d2d2db09":"markdown","937c880c":"markdown","d820dc5f":"markdown","b66d9775":"markdown"},"source":{"960feca6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n!pip install Livelossplot\nfrom livelossplot import PlotLossesKeras\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2fba9a46":"\nimport numpy as np\nimport pandas as pd\nimport cv2\nfrom PIL import Image\nimport scipy\n\nimport tensorflow as tf\nfrom tensorflow.keras.applications import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.losses import *\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.preprocessing.image import *\nfrom tensorflow.keras.utils import *\n# import pydot\n\nfrom sklearn.metrics import *\nfrom sklearn.model_selection import *\nimport tensorflow.keras.backend as K\n\nfrom tqdm import tqdm, tqdm_notebook\nfrom colorama import Fore\nimport json\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom glob import glob\nfrom skimage.io import *\n%config Completer.use_jedi = False\nimport time\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nimport lightgbm as lgb\nimport xgboost as xgb\n\nprint(\"All modules have been imported\")","7c704c4d":"info=pd.read_csv(\"..\/input\/mias-mammography\/Info.txt\",sep=\" \")\ninfo=info.drop('Unnamed: 7',axis=1)\ninfo.SEVERITY.fillna(0)","a9d9e66b":"info.BG.value_counts()","3e244479":"sns.set_style('darkgrid')\nfig, (ax1, ax2) = plt.subplots(1,2,figsize=(15,5))\nsns.barplot(x=info.BG.unique(),y=info.BG.value_counts(),palette='Blues_r',ax=ax1)\nsns.barplot(x=info.CLASS.unique(),y=info.CLASS.value_counts(),palette='Blues_r',ax=ax2)\n","4f05ef19":"from PIL import Image\nimport glob\nx= []\nfor filename in sorted(glob.glob(\"..\/input\/mias-mammography\/all-mias\/*.pgm\")): \n    img=cv2.imread(filename)\n    img =cv2.resize(img,(224, 224))\n    x.append(img)\n","b338fea5":"fig=plt.figure(figsize=(15,15))\ncolumns = 3\nrows = 3\nfor i in range(1, columns*rows +1):\n    img = np.random.randint(10)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(x[i])\nplt.show()","1c52ae7b":"# Image Augmentation\nno_angles = 360\nurl = '\/kaggle\/input\/mias-mammography\/all-mias\/'\n\ndef save_dictionary(path,data):\n        print('saving catalog...')\n        #open('u.item', encoding=\"utf-8\")\n        import json\n        with open(path,'w') as outfile:\n            json.dump(str(data), fp=outfile)\n        # save to file:\n        print(' catalog saved')","13817f3c":"# train_test_split_datagen=ImageDataGenerator(\"augmentations such as flip,brightness range,etc....\")\n# val_datagen=ImageDataGenerator(\"augmentations such as flip,brightness range,etc....\")\n# test_datagen=ImageDataGenerator(\"augmentations such as flip,brightness range,etc....\")\ndef read_image():\n        print(\"Reading images\")\n        import cv2\n        info = {}\n        for i in range(322):\n            if i<9:\n                image_name='mdb00'+str(i+1)\n            elif i<99:\n                image_name='mdb0'+str(i+1)\n            else:\n                image_name = 'mdb' + str(i+1)\n            image_address= url+image_name+'.pgm'\n            img = cv2.imread(image_address,1)\n            img = cv2.resize(img, (224,224))\n            rows, cols,channel = img.shape\n            info[image_name]={}\n            for angle in range(0,no_angles,8):\n                M = cv2.getRotationMatrix2D((cols \/ 2, rows \/ 2), angle, 1) \n                img_rotated = cv2.warpAffine(img, M, (cols, rows))\n                info[image_name][angle]=img_rotated\n        return (info)\n","4eaae6d9":"def read_lable():\n    print(\"Reading labels\")\n    filename = url+'Info.txt'\n    text_all = open(filename).read()\n    #print(text_all)\n    lines=text_all.split('\\n')\n    info={}\n    for line in lines:\n        words=line.split(' ')       \n        if len(words)>3:\n            if (words[3] == 'B'):\n                info[words[0]] = {}\n                for angle in range(0,no_angles,8):\n                    info[words[0]][angle] = 0\n            if (words[3] == 'M'):\n                info[words[0]] = {}\n                for  angle in range(0,no_angles,8):\n                    info[words[0]][angle] = 1\n    return (info)","a7789031":"import numpy as np\nlable_info=read_lable()\nimage_info=read_image()\nids=lable_info.keys() \ndel lable_info['Truth-Data:']\nX=[]\nY=[]\nfor id in ids:\n    for angle in range(0,no_angles,8):\n        X.append(image_info[id][angle])\n        Y.append(lable_info[id][angle])\nX=np.array(X)\nY=np.array(Y)\nY=to_categorical(Y,2)\nx_train, x_test1, y_train, y_test1 = train_test_split(X, Y, test_size=0.3, random_state=42)\nx_val, x_test, y_val, y_test = train_test_split(x_test1, y_test1, test_size=0.3, random_state=42)\nprint(len(x_train),len(x_val),len(x_test))","dc661b1a":"Y1=pd.DataFrame(Y)\nY1.value_counts()","beddf6bf":"#Callbacks\nc2=tf.keras.callbacks.EarlyStopping(\n    monitor=\"val_loss\",\n    min_delta=0,\n    patience=6,\n    mode=\"auto\",\n    baseline=None,\n    restore_best_weights=True,\n)\n\nc3=tf.keras.callbacks.ReduceLROnPlateau(\n    monitor=\"val_loss\",\n    factor=0.1,\n    patience=6,\n    mode=\"auto\",\n    min_delta=0.0001,\n    cooldown=0,\n    min_lr=0.001\n)\nnClasses=2","d1f720c3":"model = Sequential()\n\nmodel.add(Conv2D(16,(3,3),padding='same',input_shape =x_train[0].shape))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n\nmodel.add(Conv2D(32,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n\nmodel.add(Flatten())\nmodel.add(Dense(nClasses,activation='softmax'))\n    \nmodel.summary()","534fdac1":"from livelossplot import PlotLossesKeras\nc1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c2,c3])","fc5e9842":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","7135dca7":"print(\"Performance Report:\")\ny_pred1=model.predict_classes(x_test)\ny_test1=[np.argmax(x) for x in y_test]\ny_pred_prb1=model.predict_proba(x_test)\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test1, y_pred1),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test1, y_pred1, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test1,y_pred1, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test1, y_pred1, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test1, y_pred1, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test1, y_pred1),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test1, y_pred1,target_names=target))","882272a6":"\nmodel = Sequential()\n\nmodel.add(Conv2D(16, (3, 3), padding='same', activation='relu', input_shape=(224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(32,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n    \nmodel.add(Conv2D(64,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n    \n\nmodel.add(Flatten())\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(nClasses, activation='softmax'))\n","99728561":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","a6e7834e":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","cf29383c":"print(\"Performance Report:\")\ny_pred21=model.predict_classes(x_test)\ny_test21=[np.argmax(x) for x in y_test]\ny_pred_prb21=model.predict_proba(x_test)\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test21, y_pred21),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test21, y_pred21, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test21,y_pred21, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test21, y_pred21, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test21, y_pred21, average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test21, y_pred21),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test21, y_pred21,target_names=target))","df94732e":"\nmodel = Sequential()\n\nmodel.add(Conv2D(16, (3, 3), padding='same', activation='relu', input_shape=(224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(32,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n    \nmodel.add(Conv2D(64,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n    \nmodel.add(Conv2D(32,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n\nmodel.add(Flatten())\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(nClasses, activation='softmax'))\n","d7f63f69":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","e4f241af":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","ce233d6a":"print(\"Performance Report:\")\ny_pred2=model.predict_classes(x_test)\ny_test2=[np.argmax(x) for x in y_test]\ny_pred_prb2=model.predict_proba(x_test)\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test2, y_pred2),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test2, y_pred2, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test2,y_pred2, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test2, y_pred2, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test2, y_pred2,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test2, y_pred2),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test2, y_pred2,target_names=target))","d246602f":"\nmodel = Sequential()\n\nmodel.add(Conv2D(16, (3, 3), padding='same', activation='relu', input_shape=(224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(32,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n    \nmodel.add(Conv2D(64,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n    \nmodel.add(Conv2D(128,(3,3),padding='same'))\nmodel.add(Conv2D(128,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n\nmodel.add(Flatten())\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(nClasses, activation='softmax'))\n","df424a4e":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","1f309c73":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","083554ce":"print(\"Performance Report:\")\ny_pred31=model.predict_classes(x_test)\ny_test31=[np.argmax(x) for x in y_test]\ny_pred_prb31=model.predict_proba(x_test)\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test31, y_pred31),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test31, y_pred31, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test31,y_pred31, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test31, y_pred31, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test31, y_pred31,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test31, y_pred31),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test31, y_pred31,target_names=target))","a01cf6c7":"\n\nmodel = Sequential()\n    \nmodel.add(Conv2D(16, (3, 3), padding='same', activation='relu', input_shape=(224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(32,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n    \nmodel.add(Conv2D(64,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n    \nmodel.add(Conv2D(128,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n    \nmodel.add(Conv2D(64,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n\nmodel.add(Conv2D(32,(3,3),padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'same'))\n\nmodel.add(Flatten())\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(nClasses, activation='softmax'))\n    ","db7190d3":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nhistory=model.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","d8d6a56a":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","0da17047":"print(\"Performance Report:\")\ny_pred3=model.predict_classes(x_test)\ny_test3=[np.argmax(x) for x in y_test]\ny_pred_prb3=model.predict_proba(x_test)\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test3, y_pred3),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test3, y_pred3, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test3,y_pred3, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test3, y_pred3, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test3, y_pred3,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test31, y_pred31),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test3, y_pred3,target_names=target))","0ba6a8e2":"\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=(224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(256, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(256, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(128, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(nClasses, activation='softmax'))\n    ","88fb8496":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nmodel.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","032986ec":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","2eecd6ab":"print(\"Performance Report:\")\ny_pred41=model.predict_classes(x_test)\ny_test41=[np.argmax(x) for x in y_test]\ny_pred_prb41=model.predict_proba(x_test)\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test41, y_pred41),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test41, y_pred41, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test41,y_pred41, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test41, y_pred41, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test41, y_pred41,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test41, y_pred41),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test41, y_pred41,target_names=target))","0af31dc5":"\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=(224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(128, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(256, (3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(256, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(128, (3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(128, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(64, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(32, (3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(32, (3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n    ","d067b912":"c1=PlotLossesKeras()\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy','AUC'])\nmodel.fit(x_train,y_train,epochs=10,callbacks=[c1,c3],batch_size=16)","77dfd576":"model.evaluate(x_val,y_val,callbacks=[c2,c3],batch_size=16)","b3f05cab":"print(\"Performance Report:\")\ny_pred4=model.predict_classes(x_test)\ny_test4=[np.argmax(x) for x in y_test]\ny_pred_prb4=model.predict_proba(x_test)\ntarget=[\"B\",\"M\"]\nfrom sklearn import metrics\nprint('Accuracy score is :', np.round(metrics.accuracy_score(y_test4, y_pred4),4))\nprint('Precision score is :', np.round(metrics.precision_score(y_test4, y_pred4, average='weighted'),4))\nprint('Recall score is :', np.round(metrics.recall_score(y_test4,y_pred4, average='weighted'),4))\nprint('F1 Score is :', np.round(metrics.f1_score(y_test4, y_pred4, average='weighted'),4))\nprint('ROC AUC Score is :', np.round(metrics.roc_auc_score(y_test4, y_pred4,multi_class='ovo', average='weighted'),4))\nprint('Cohen Kappa Score:', np.round(metrics.cohen_kappa_score(y_test4, y_pred4),4))\nprint('\\t\\tClassification Report:\\n', metrics.classification_report(y_test4, y_pred4,target_names=target))","a1687c29":"# Defining our callbacks","a8459850":"# Visualizing the Images","6a40d9c6":"# References and other implementations\n#### https:\/\/www.kaggle.com\/aayushkandpal\/inceptionresnetv2-breastcancer-identification-gdf\n#### https:\/\/www.kaggle.com\/aayushkandpal\/densenet201-breast-cancer-identification-gdf\n#### https:\/\/www.kaggle.com\/aayushkandpal\/vgg-19-breast-cancer-identification-gdf\n#### https:\/\/www.kaggle.com\/aayushkandpal\/mobilenet-breast-cancer-identification-gdf\n#### https:\/\/www.kaggle.com\/aayushkandpal\/efficientnetb7-breast-cancer-identification-gdf\n#### https:\/\/www.kaggle.com\/aayushkandpal\/xceptionnet-breast-cancer-identification-gdf\n#### https:\/\/www.kaggle.com\/aayushkandpal\/resnet50-breast-cancer-identification-gdf\n#### https:\/\/www.kaggle.com\/meryemsafa\/bccnnkfold\n#### https:\/\/www.kaggle.com\/vstein\/pretrained-mobilenetv2-image-filter-on-mammogr\n#### https:\/\/www.kaggle.com\/valeriamoonlight\/inceptionv3-for-mammography-classification\n#### https:\/\/www.kaggle.com\/rajaatif\/mias-mammogram\n#### https:\/\/www.kaggle.com\/kmader\/high-res-mobilenet-for-mammography\n#### https:\/\/www.kaggle.com\/aditi02\/breastcancer-cnn-mias\n","4b3b74c1":"# 3 Layered CNN","ceb1af9e":"# 4 Layered CNN","5f668fee":"# 2 Layered CNN\n","3f931159":"# 8 Layered CNN","d2d2db09":"# 5 Layered CNN","937c880c":"# AIM\n## To classify the images into \n### F Fatty\n### G Fatty-glandular\n### D Dense-glandular\n\n# Validation Strategy:\n\n## Train Data Size= 0.7*Total_Data\n## Validation Data Size= 0.21* Total_Data\n## Test Data Size= 0.09 * Total_Data\n\n# Augmentaions Used:\n## Each Image is rotated through 45 angles\n","d820dc5f":"# 6 Layered CNN","b66d9775":"# 7 Layered CNN"}}