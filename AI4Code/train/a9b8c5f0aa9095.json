{"cell_type":{"4fe8f548":"code","28854485":"code","2fd782d6":"code","9b868783":"code","7b11fc1a":"code","4c3ae0fc":"code","ad4b8861":"code","92c20663":"code","6ad070cf":"code","77f1c095":"code","7a71dfd6":"code","efc28f0e":"markdown","57482eeb":"markdown","37c001b4":"markdown","7e3ed67d":"markdown","c5dcb619":"markdown","1c5f8a35":"markdown","b0f65b9a":"markdown","34563079":"markdown","a44355eb":"markdown","6efce1da":"markdown","f48346e7":"markdown","b5c9d4ee":"markdown","9145ffd0":"markdown","b3e09fc5":"markdown","011c0f0b":"markdown","c00e64e5":"markdown","d0192592":"markdown","a8839b15":"markdown","a6e8e6d0":"markdown","a5d0e4c3":"markdown","31c5ceca":"markdown","d7b255e5":"markdown","0ec1c7d6":"markdown","cd75cc2a":"markdown","a701c86f":"markdown","2dc7cccc":"markdown","8616f384":"markdown","52febbae":"markdown","96614374":"markdown"},"source":{"4fe8f548":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\n%matplotlib inline","28854485":"!wget -O FuelConsumption.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/FuelConsumptionCo2.csv","2fd782d6":"df = pd.read_csv(\"FuelConsumption.csv\")\n\n# take a look at the dataset\ndf.head()","9b868783":"cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY','FUELCONSUMPTION_COMB','CO2EMISSIONS']]\ncdf.head(9)","7b11fc1a":"plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","4c3ae0fc":"msk = np.random.rand(len(df)) < 0.8\ntrain = cdf[msk]\ntest = cdf[~msk]","ad4b8861":"plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","92c20663":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\nx = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\ny = np.asanyarray(train[['CO2EMISSIONS']])\nregr.fit (x, y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)","6ad070cf":"y_hat= regr.predict(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\nx = np.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])\ny = np.asanyarray(test[['CO2EMISSIONS']])\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((y_hat - y) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % regr.score(x, y))","77f1c095":"# write your code here\nregr1 = linear_model.LinearRegression()\nx1 = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\ny1 = np.asanyarray(train[['CO2EMISSIONS']])\nregr1.fit (x1, y1)\n# The coefficients\nprint ('Coefficients: ', regr1.coef_)","7a71dfd6":"y_hat1= regr1.predict(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\nx1 = np.asanyarray(test[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY']])\ny1 = np.asanyarray(test[['CO2EMISSIONS']])\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((y_hat1 - y1) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % regr1.score(x1, y1))","efc28f0e":"Lets select some features that we want to use for regression.","57482eeb":"### Importing Needed packages","37c001b4":"#### Creating train and test dataset\nTrain\/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. \nThis will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.\n\nThis means that we know the outcome of each data point in this dataset, making it great to test with! And since this data has not been used to train the model, the model has no knowledge of the outcome of these data points. So, in essence, it\u2019s truly an out-of-sample testing.\n\n","7e3ed67d":"<h1>Table of contents<\/h1>\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n    <ol>\n        <li><a href=\"#understanding-data\">Understanding the Data<\/a><\/li>\n        <li><a href=\"#reading_data\">Reading the Data in<\/a><\/li>\n        <li><a href=\"#multiple_regression_model\">Multiple Regression Model<\/a><\/li>\n        <li><a href=\"#prediction\">Prediction<\/a><\/li>\n        <li><a href=\"#practice\">Practice<\/a><\/li>\n    <\/ol>\n<\/div>\n<br>\n<hr>","c5dcb619":"We denote the train and test sizes. np.random.rand() is used to generate random numbers over a region. Here we are using it in such a way so that we get 80% of values to be true and others as false. So, in train we use msk which returns 80% true values and in test we use \"~msk\" which means \"not msk\" so it will return 20% false values.","1c5f8a35":"We plotted a scatter plot using the real data here with the graph being Engine size(x-axis) VS Emission(y-axis) and used to plt.show() to visualize the result. Plt.show() generally works as a print statement for the visualizations. We used blue dots but we can use any colour we want.","b0f65b9a":"We see a very little change in residual sum of squares but we see no change in the variance score.","34563079":"<h2>Want to learn more?<\/h2>\n\nIBM SPSS Modeler is a comprehensive analytics platform that has many machine learning algorithms. It has been designed to bring predictive intelligence to decisions made by individuals, by groups, by systems \u2013 by your enterprise as a whole. A free trial is available through this course, available here: <a href=\"http:\/\/cocl.us\/ML0101EN-SPSSModeler\">SPSS Modeler<\/a>\n\nAlso, you can use Watson Studio to run these notebooks faster with bigger datasets. Watson Studio is IBM's leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, Watson Studio enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of Watson Studio users today with a free account at <a href=\"https:\/\/cocl.us\/ML0101EN_DSX\">Watson Studio<\/a>\n\n<h3>Thanks for completing this Lab !<\/h3>\n\n","a44355eb":"__explained variance regression score:__  \nIf $\\hat{y}$ is the estimated target output, y the corresponding (correct) target output, and Var is Variance, the square of the standard deviation, then the explained variance is estimated as follow:\n\n$\\texttt{explainedVariance}(y, \\hat{y}) = 1 - \\frac{Var\\{ y - \\hat{y}\\}}{Var\\{y\\}}$  \nThe best possible score is 1.0, lower values are worse.","6efce1da":"Here, we use pandas library to import the dataset and create it into a dataframe. Then using the head attribute we see the first 5 rows of the dataframe to see how it looks.","f48346e7":"We plotted a scatter plot using the trained data here with the graph being Engine size(x-axis) VS Emission(y-axis) and used to plt.show() to visualize the result. Plt.show() generally works as a print statement for the visualizations. We used blue dots but we can use any colour we want.","b5c9d4ee":"We select only the required features for the Multiple linear regresssion model and using 9 inside the head parameter we look at the first 9 rows.","9145ffd0":"\n<h1><center>Machine Learning(IT) Sem V <\/center><\/h1>\n<h1><center>Lab on Multiple Linear Regression<\/center><\/h1>\n\n1. Name:- Rohith Kalvakota\n2. Roll No:- A223\n3. SAP ID:- 70011118031\n\n<h4>About this Notebook<\/h4>\nIn this notebook, we will learn how to use scikit-learn to implement Multiple linear regression. You need to download a dataset that is related to fuel consumption and Carbon dioxide emission of cars. Then, we split our data into training and test sets, create a model using training set, Evaluate your model using test set, and finally use model to predict unknown value.\n","b3e09fc5":"Here we imported libraries that are required for building the multiple linear regression model. We import Pandas, Pylab, Numpy and matplotlib. Pandas is used to import data and numpy is used for calculations. \nMatplotlib is used for visualizing the results or any required data. PyLab is a procedural interface to the Matplotlib object-oriented plotting library. Matplotlib is the whole package; matplotlib.pyplot is a module in Matplotlib; and PyLab is a module that gets installed alongside Matplotlib.","011c0f0b":"<h2 id=\"reading_data\">Reading the data in<\/h2>","c00e64e5":"#### Train data distribution","d0192592":"Lets plot Emission values with respect to Engine size:","a8839b15":"We use wget which is a GNU computer program that retrieves content from web servers. We use -O because we are using the datset as input. After -O we give the file name and the link from where it has to access.","a6e8e6d0":"As mentioned before, __Coefficient__ and __Intercept__ , are the parameters of the fit line. \nGiven that it is a multiple linear regression, with 3 parameters, and knowing that the parameters are the intercept and coefficients of hyperplane, sklearn can estimate them from our data. Scikit-learn uses plain Ordinary Least Squares method to solve this problem.\n\n#### Ordinary Least Squares (OLS)\nOLS is a method for estimating the unknown parameters in a linear regression model. OLS chooses the parameters of a linear function of a set of explanatory variables by minimizing the sum of the squares of the differences between the target dependent variable and those predicted by the linear function. In other words, it tries to minimizes the sum of squared errors (SSE) or mean squared error (MSE) between the target variable (y) and our predicted output ($\\hat{y}$) over all samples in the dataset.\n\nOLS can find the best parameters using of the following methods:\n    - Solving the model parameters analytically using closed-form equations\n    - Using an optimization algorithm (Gradient Descent, Stochastic Gradient Descent, Newton\u2019s Method, etc.)","a5d0e4c3":"In reality, there are multiple variables that predict the Co2emission. When more than one independent variable is present, the process is called multiple linear regression. For example, predicting co2emission using FUELCONSUMPTION_COMB, EngineSize and Cylinders of cars. The good thing here is that Multiple linear regression is the extension of simple linear regression model.","31c5ceca":"We import the package from the sklearn library. Then we build the model and we give x as input and y as input  asanyarray attribute is used to denote values of the required features as a array. Then we fit the model ad then print the coefficients we get as result from running the model.","d7b255e5":"We have a look at the predictions and print their residual sum of squares and variance for better understanding of the results we get.","0ec1c7d6":"\n<h2 id=\"understanding_data\">Understanding the Data<\/h2>\n\n### `FuelConsumption.csv`:\nWe have downloaded a fuel consumption dataset, **`FuelConsumption.csv`**, which contains model-specific fuel consumption ratings and estimated carbon dioxide emissions for new light-duty vehicles for retail sale in Canada. [Dataset source](http:\/\/open.canada.ca\/data\/en\/dataset\/98f1a129-f628-4ce4-b24d-6f16bf24dd64)\n\n- **MODELYEAR** e.g. 2014\n- **MAKE** e.g. Acura\n- **MODEL** e.g. ILX\n- **VEHICLE CLASS** e.g. SUV\n- **ENGINE SIZE** e.g. 4.7\n- **CYLINDERS** e.g 6\n- **TRANSMISSION** e.g. A6\n- **FUELTYPE** e.g. z\n- **FUEL CONSUMPTION in CITY(L\/100 km)** e.g. 9.9\n- **FUEL CONSUMPTION in HWY (L\/100 km)** e.g. 8.9\n- **FUEL CONSUMPTION COMB (L\/100 km)** e.g. 9.2\n- **CO2 EMISSIONS (g\/km)** e.g. 182   --> low --> 0\n","cd75cc2a":"np.random.rand(x) returns x random numbers with uniforms distribution over 0 to 1 (exclusive). When we apply the condition < 0.8 it returns True for every number which is less than 0.8 This will make sure that approximately 80 percent of values are True and rest are False. So, in essence you can have a 80\/20 train test split when you apply this mask to your original df. df[msk] will return every index for which the msk value is True. And ~msk means \"not equal to\" in df indexing.","a701c86f":"__Did you know?__ When it comes to Machine Learning, you will likely be working with large datasets. Is such cases we need to use the the cloud based datasets. There are various cloud service providers for big data. Like MS Azure, GCP, and IBM Cloud.  As a business, where can you host your data? IBM is offering a unique opportunity for businesses, with 10 Tb of IBM Cloud Object Storage: [Sign up now for free](http:\/\/cocl.us\/ML0101EN-IBM-Offer-CC)","2dc7cccc":"<h2 id=\"multiple_regression_model\">Multiple Regression Model<\/h2>\n","8616f384":"<h2 id=\"prediction\">Prediction<\/h2>","52febbae":"<h2 id=\"practice\">Practice<\/h2>\nTry to use a multiple linear regression with the same dataset but this time use __FUEL CONSUMPTION in CITY__ and \n__FUEL CONSUMPTION in HWY__ instead of FUELCONSUMPTION_COMB. Does it result in better accuracy?","96614374":"### Downloading Data\nTo download the data, we will use <a href=\"https:\/\/www.gnu.org\/software\/wget\/manual\/wget.html\"> !wget <\/a>to download it from IBM Object Storage."}}