{"cell_type":{"b80fdc95":"code","8225ba2e":"code","7a4db509":"code","8d80f323":"code","de721b88":"code","da2218f5":"code","59f42a1e":"code","92d20fdf":"code","cd8d64f4":"code","0fc61a37":"code","00e2ef6a":"code","bbf51c8d":"code","9751657b":"code","524af29e":"code","1f753527":"code","b5ab1a43":"code","b915faec":"code","0e49944d":"code","da029a2d":"code","3fd8c358":"code","80433a80":"markdown","b6449b09":"markdown","a279f164":"markdown","3ed79484":"markdown","a55dfb74":"markdown","c364efee":"markdown","40fb6177":"markdown","f364206e":"markdown","69d106a4":"markdown","b9fbb99b":"markdown","1d67f35a":"markdown","615c6ec4":"markdown","296132c9":"markdown","900bc1f8":"markdown","12220c63":"markdown","e96c1067":"markdown","fc4bb49e":"markdown","0a56d73c":"markdown"},"source":{"b80fdc95":"PATH_TRAIN = '\/kaggle\/input\/data-without-drift\/train_clean.csv'","8225ba2e":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7a4db509":"def group_feat_train(_train):\n    train = _train.copy()\n    # group init\n    train['group'] = int(0)\n\n    # group 1\n    idxs = (train['batch'] == 3) | (train['batch'] == 7)\n    train['group'][idxs] = int(1)\n\n    # group 2\n    idxs = (train['batch'] == 5) | (train['batch'] == 8)\n    train['group'][idxs] = int(2)\n\n    # group 3\n    idxs = (train['batch'] == 2) | (train['batch'] == 6)\n    train['group'][idxs] = int(3)\n\n    # group 4\n    idxs = (train['batch'] == 4) | (train['batch'] == 9)\n    train['group'][idxs] = int(4)\n    \n    return train[['group']]","8d80f323":"sns.set()","de721b88":"df_tr = pd.read_csv(PATH_TRAIN)","da2218f5":"batch_list = []\nfor n in range(10):\n    batchs = np.ones(500000)*n\n    batch_list.append(batchs.astype(int))\nbatch_list = np.hstack(batch_list)\ndf_tr['batch'] = batch_list","59f42a1e":"group = group_feat_train(df_tr)\ndf_tr = pd.concat([df_tr, group], axis=1)","92d20fdf":"df_tr['mean_sig'] = df_tr.groupby(['open_channels','batch'])['signal'].transform('mean')","cd8d64f4":"res = 100\nx = np.arange(len(df_tr))\n\nfig = plt.figure(figsize=(20, 5))\nfor i in df_tr[df_tr['batch']==7]['open_channels'].unique():\n    idxs = (df_tr['batch'] == 7) & (df_tr['open_channels'].values==i)\n    plt.scatter(x[idxs], df_tr['signal'].values[idxs], s=2, label=f'open_channel: {i}')\n    \nfig.legend(fontsize=10)\nplt.title('batch7')\nplt.ylabel('signal')","0fc61a37":"res = 1\nx = np.arange(len(df_tr))\n\nfig = plt.figure(figsize=(20, 5))\nfor i in df_tr[df_tr['batch']==7]['open_channels'].unique():\n    idxs = (df_tr['batch'] == 7) & (df_tr['open_channels'].values==i)\n    plt.scatter(x[idxs], df_tr['signal'].values[idxs], s=4, label=f'open_channel: {i}')\n    \nfig.legend(fontsize=10)\nplt.xlim(3_642_000, 3_650_000)\nplt.title('batch7')\nplt.ylabel('signal')","00e2ef6a":"left = 3641000\nright = 3829000","bbf51c8d":"res = 100\nx = np.arange(len(df_tr))\n\nfig = plt.figure(figsize=(20, 5))\nfor i in df_tr[df_tr['batch']==7]['open_channels'].unique():\n    idxs = (df_tr['batch'] == 7) & (df_tr['open_channels'].values==i)\n    plt.scatter(x[idxs], df_tr['signal'].values[idxs], s=2, label=f'open_channel: {i}')\nplt.axvline(left, linestyle='--', color='black')\nplt.axvline(right, linestyle='--', color='black')\n\n# batch7 signal mean (without noisy area)\nidxs_noisy = (df_tr['open_channels']==3) & (left<df_tr.index) & (df_tr.index<right)\nidxs_not_noisy = (df_tr['open_channels']==3) & ~idxs_noisy\nplt.axhline(df_tr[idxs_not_noisy]['signal'].mean(), label='mean(open_channel=3)', color='black')\n    \nfig.legend(fontsize=10)\nplt.title('batch7')\nplt.ylabel('signal')","9751657b":"thresh_high = 2.0\nthresh_low = 0.1","524af29e":"res = 1\nx = np.arange(len(df_tr))\n\nfig = plt.figure(figsize=(20, 5))\nfor i in df_tr[df_tr['batch']==7]['open_channels'].unique():\n    idxs = (df_tr['batch'] == 7) & (df_tr['open_channels'].values==i)\n    plt.scatter(x[idxs], df_tr['signal'].values[idxs], s=4, label=f'open_channel: {i}')\n    \nplt.axvline(left, linestyle='--', color='black')\n\n# batch7 signal mean (without noisy area)\nidxs_noisy = (df_tr['open_channels']==3) & (left<df_tr.index) & (df_tr.index<right)\nidxs_not_noisy = (df_tr['open_channels']==3) & ~idxs_noisy\nmean = df_tr[idxs_not_noisy]['signal'].mean()\nplt.axhspan(thresh_high, thresh_low, color='gray', alpha=0.3)\nplt.axhline(mean, label='mean(open_channel=3)', color='black')\n    \nfig.legend(fontsize=10)\nplt.xlim(3_642_000, 3_650_000)\nplt.title('batch7')\nplt.ylabel('signal')","1f753527":"df_tr['signal_mod'] = df_tr['signal'].values\n\nidxs_outlier = idxs_noisy & (thresh_high<df_tr['signal'].values)\ndf_tr['signal_mod'][idxs_outlier]  = mean\nidxs_outlier = idxs_noisy & (df_tr['signal'].values<thresh_low)\ndf_tr['signal_mod'][idxs_outlier]  = mean","b5ab1a43":"res = 1\nx = np.arange(len(df_tr))\n\nfig = plt.figure(figsize=(20, 5))\nfor i in df_tr[df_tr['batch']==7]['open_channels'].unique():\n    idxs = (df_tr['batch'] == 7) & (df_tr['open_channels'].values==i)\n    plt.scatter(x[idxs], df_tr['signal_mod'].values[idxs], s=4, label=f'open_channel: {i}')\n    \nplt.axvline(left, linestyle='--', color='black')\n\n# batch7 signal mean (without noisy area)\nidxs_noisy = (df_tr['open_channels']==3) & (left<df_tr.index) & (df_tr.index<right)\nmean = df_tr[idxs_noisy]['signal'].mean()\nplt.axhspan(thresh_high, thresh_low, color='gray', alpha=0.3)\n# plt.axhline(mean, label='mean(open_channel=3)', color='black')\n    \nfig.legend(fontsize=10)\nplt.xlim(3_642_000, 3_650_000)\n# plt.xlim(3_642_000, 3_900_000)\nplt.title('batch7')\nplt.ylabel('signal')","b915faec":"def create_signal_mod(train):\n    left = 3641000\n    right = 3829000\n    thresh_dict = {\n        3: [0.1, 2.0],\n        2: [-1.1, 0.7],\n        1: [-2.3, -0.6],\n        0: [-3.8, -2],\n    }\n    \n    train['signal_mod'] = train['signal'].values\n    for ch in train[train['batch']==7]['open_channels'].unique():\n        idxs_noisy = (train['open_channels']==ch) & (left<train.index) & (train.index<right)\n        idxs_not_noisy = (train['open_channels']==ch) & ~idxs_noisy\n        mean = train[idxs_not_noisy]['signal'].mean()\n\n        idxs_outlier = idxs_noisy & (thresh_dict[ch][1]<train['signal'].values)\n        train['signal_mod'][idxs_outlier]  = mean\n        idxs_outlier = idxs_noisy & (train['signal'].values<thresh_dict[ch][0])\n        train['signal_mod'][idxs_outlier]  = mean\n    return train\ndf_tr = create_signal_mod(df_tr)","0e49944d":"res = 100\nx = np.arange(len(df_tr))\n\nfig = plt.figure(figsize=(20, 5))\nfor i in df_tr[df_tr['batch']==7]['open_channels'].unique():\n# for i in [0]:\n    idxs = (df_tr['batch'] == 7) & (df_tr['open_channels'].values==i)\n    plt.scatter(x[idxs], df_tr['signal_mod'].values[idxs], s=4, label=f'open_channel: {i}')\n    \n    \nfig.legend(fontsize=10)\nplt.title('batch7')\nplt.ylabel('signal')","da029a2d":"colors = ['blue', 'orange', 'green', 'red']","3fd8c358":"res = 1\nfig, axs = plt.subplots(4, 2, figsize=(25, 12))\nfig.suptitle('batch7')\nfor i_ch, ch in enumerate(df_tr[df_tr['batch']==7]['open_channels'].unique()):\n    # for i in [0]:\n        idxs = (df_tr['batch'] == 7) & (df_tr['open_channels'].values==ch)\n        axs[i_ch, 0].scatter(x[idxs][::res], df_tr['signal'].values[idxs][::res], s=4, label=f'open_channel: {ch}', color=colors[i_ch])\n        axs[i_ch, 1].scatter(x[idxs][::res], df_tr['signal_mod'].values[idxs][::res], s=4, label=f'open_channel: {ch} (mod)', color=colors[i_ch])\n        axs[i_ch, 0].legend(loc='upper left')\n        axs[i_ch, 1].legend(loc='upper left')\n        axs[i_ch, 0].set_ylabel('signal')\n        axs[i_ch, 1].set_ylabel('signal_mod')\n        axs[i_ch, 0].set_ylim(df_tr['signal'][idxs][::res].min(), df_tr['signal'][idxs][::res].max())\n        axs[i_ch, 1].set_ylim(df_tr['signal'][idxs][::res].min(), df_tr['signal'][idxs][::res].max())","80433a80":"---> There is too much noise.  \n---> The signal for open_channels=3 has been present at low values below -2.    \n---> I decided to replace the outliers that exist in index=3641000 ~ 3829000 with other appropriate values.  ","b6449b09":"<br>\nDetermine the threshold for outliers.  \nIn this case, the threshold was determined by eye measurement.","a279f164":"# Handling noise in batch7\nI was bothered by batch 7.\nI'm sure everyone does, too.\n\nAs we all know, there is a strong spike in batch 7 that prevents the model from learning.  \n(https:\/\/www.kaggle.com\/c\/liverpool-ion-switching\/discussion\/149846)\n\nWhen I analyzed batch 7 in detail, I found it to be due to an artificial error.\n\nSo, I took the method of replacing the outliers with appropriate values.\n\n","3ed79484":"# Import everything I need :)","a55dfb74":"setting","c364efee":"# My function","40fb6177":"<br>\n\nadd batch and group","f364206e":"---> This result was not what I had imagined.\n\n<br>\nLet's look at it in further detail.","69d106a4":"---> OK!!\n\n<br>\n\nApply the same process to all channels.","b9fbb99b":"# Preparation","1d67f35a":"--> goooood !!","615c6ec4":"<br>\n\nload dataset","296132c9":"<br>\n\nFor example, replace the value of open_channel=3(blue points).    \nThe replacement value is the average value of open_channel=3, except for index=3641000~3829000.  ","900bc1f8":"# EDA\nLet's plot the batch 7 signals by open_channels.","12220c63":"Mean value visualization","e96c1067":"# Const","fc4bb49e":"<br>\n\nplot per open_channels","0a56d73c":"---> The signal of open_channels=3, which is out of the gray shading, is taken as an outlier.\n\n<br>\nLet's replace the outlier with the average value."}}