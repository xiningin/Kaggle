{"cell_type":{"31f418a8":"code","a8fa5057":"code","75bab152":"code","4ce4ad29":"code","3bd6695c":"code","e18c0534":"code","f2df92b5":"code","a135ccf5":"code","ca1b040d":"code","42aa57a9":"code","b93b0827":"code","2dae542c":"code","d7553883":"code","4d339743":"code","db3ce7e7":"code","675172ae":"code","0d0d307c":"code","bd6ecae2":"code","c6cb91f8":"code","ce6981a8":"code","d8f6c889":"code","af09b51f":"code","bd8cc757":"code","c43006e0":"code","5f418d40":"code","27bb34b3":"code","e6ba6534":"code","ecfe3e85":"code","50133410":"code","6a6fe0b9":"code","17d0edb3":"markdown","4b3c8042":"markdown","da555245":"markdown","b9072dd1":"markdown","b9fa9ecd":"markdown","cda3e677":"markdown","eb9781b8":"markdown","a229a821":"markdown","2b31ff91":"markdown","3cb18ea3":"markdown","1a3e3668":"markdown","bd026bae":"markdown","87a351f7":"markdown","490b4465":"markdown","b488168f":"markdown","03cd8b7b":"markdown","b3b1944a":"markdown","11ef715e":"markdown","0a52b73a":"markdown"},"source":{"31f418a8":"import numpy as np\nimport pandas as pd\nimport os\nimport glob\nimport re\nimport matplotlib.pyplot as plt\nfrom pyarrow import parquet as pq\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.metrics import r2_score","a8fa5057":"def std_ask_bid_price_and_size(df_train=None, mode='train'):\n    # \u7279\u5fb4\u91cf\u306e\u9078\u629e\n    feature_list=[\"ask_price1\", \"ask_price2\", \"bid_price1\", \"bid_price2\", \"ask_size1\", \"ask_size2\", \"bid_size1\", \"bid_size2\"]\n    #statistic_list=[\"mean\",\"median\",\"std\",\"count\",\"sum\"]\n    # train\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308b\u3068\u304d\n    if mode == 'train':\n        list_order_book_file = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')\n    # test\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308b\u3068\u304d\n    else:\n        list_order_book_file = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')        \n\n    # enumerate\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f7f\u3046\n    for kkk, iii in enumerate(list_order_book_file):\n        # \u5404stock_id\u3054\u3068\u306b\u53d6\u5f97\n        df_order=pd.read_parquet(iii)\n        #df_order_feature = df_order.groupby(\"time_id\")[feature_list].agg(statistic_list).reset_index()\n        # \n        df_order_feature = df_order.groupby(\"time_id\")[feature_list].agg(ask_size1_std=('ask_size1', 'std'),ask_size2_std=('ask_size2', 'std'),bid_size1_std=('bid_size1', 'std'),bid_size2_std=('bid_size2', 'std'),ask_price1_std=('ask_price1', 'std'),ask_price2_std=('ask_price2', 'std'),bid_price1_std=('bid_price1', 'std'),bid_price2_std=('bid_price2', 'std')).reset_index()\n        result = re.search(r'=\\d+$', iii)\n        stock_id_plus_equal=result.group()\n        stock_id=stock_id_plus_equal.strip(\"=\")\n        df_order_feature['stock_id']=int(stock_id)\n        #df_order_feature_target = pd.merge(df_order_feature,df_train,on=['stock_id', 'time_id'],how='left')\n        \n        if kkk ==0:\n            df_order_feature_all=df_order_feature\n        else:\n            df_order_feature_all=pd.concat([df_order_feature_all, df_order_feature])\n    \n    df_order_feature_all['row_id'] = df_order_feature_all['stock_id'].astype(str) + '-' + df_order_feature_all['time_id'].astype(str)\n    df_order_feature_all=df_order_feature_all.drop(columns=[\"time_id\", \"stock_id\"])\n    #df_order_feature_all.drop(columns=[\"time_id\", \"stock_id\"])\n    if mode == 'train':\n        df_joined = df_train.merge(df_order_feature_all, on =['row_id'], how = 'left')\n    else:\n        df_joined=df_order_feature_all\n    \n    return df_joined","75bab152":"train=pd.read_csv('\/kaggle\/input\/optiver-realized-volatility-prediction\/train.csv')\nstock = train.groupby(\"stock_id\")[\"target\"].agg([\"mean\",\"median\",\"std\",\"count\",\"sum\"]).reset_index()\nprint(stock)\ntrain['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\ntrain = train[['row_id','target']]\ntrain","4ce4ad29":"train=std_ask_bid_price_and_size(df_train=train, mode='train')\ntrain.head()","3bd6695c":"model = lgb.LGBMRegressor(objective='regression', learning_rate=0.1, n_estimators=1000,\n                          max_depth=5, min_child_weight=1.0, colsample_bytree=0.8,\n                          subsample=0.8, reg_alpha=0.0, reg_lambda=1.0)","e18c0534":"feature_columns=['ask_price1_std', 'ask_price2_std','bid_price1_std', 'bid_price2_std']\n\ntrain_x=train[feature_columns]\ntrain_y=train['target']","f2df92b5":"model.fit(np.log(train_x.values), np.log(train_y.values))","a135ccf5":"test=std_ask_bid_price_and_size(mode='test')\ntest.head()","ca1b040d":"test_x=test[feature_columns]\ntest_pred=model.predict(np.log(test_x.values))\ntest_pred","42aa57a9":"df_submit=pd.DataFrame({'row_id':test['row_id'],\n                       'target':np.exp(test_pred)})\ndf_submit.to_csv(\"submission.csv\", index=False)\ndf_submit","b93b0827":"# book_train_parquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0\")\n# book_train_parquet.head(5)","2dae542c":"# book_test_parquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/stock_id=0\")\n# book_test_parquet.head(5)","d7553883":"# trade_train_parquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0\")\n# trade_train_parquet.head(5)","4d339743":"# trade_test_parquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_test.parquet\/stock_id=0\")\n# trade_test_parquet.head(5)","db3ce7e7":"# train = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/train.csv\")\n# train","675172ae":"# test = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/test.csv\")\n# test","0d0d307c":"# submission = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/sample_submission.csv\")\n# submission","bd6ecae2":"# def log_returns(list_stock_prices):\n#     return np.log(lost_stock_prices).diff()","c6cb91f8":"# stock = train.groupby(\"stock_id\")[\"target\"].agg([\"mean\",\"median\",\"std\",\"count\",\"sum\"]).reset_index()\n# stock","ce6981a8":"# print(\"mean value=\" ,stock[\"mean\"].mean())\n# plt.hist(stock[\"mean\"])","d8f6c889":"# print(\"sum value=\" ,stock[\"sum\"].mean())\n# plt.hist(stock[\"sum\"])","af09b51f":"# book_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\n# book_test = book_example[book_example[\"time_id\"]==5]\n# book_test","bd8cc757":"# trade_example = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0\")\n# trade_test = trade_example[trade_example[\"time_id\"]==5]\n# trade_test","c43006e0":"# samples = [\"bid_price1\",\"bid_price2\",\"ask_price1\",\"ask_price2\"]\n# plt.figure(figsize=(20,5))\n\n# for num,a in enumerate(samples):\n#     plt.plot(book_test[\"seconds_in_bucket\"],book_test[a],label=a)\n    \n# plt.plot(trade_test[\"seconds_in_bucket\"],trade_test[\"price\"],label=\"trade_parquet\",lw=10)\n# plt.legend(fontsize=12)","5f418d40":"# stock0 = train[train[\"stock_id\"]==0]\n# min_index = stock0[\"target\"].idxmin()\n# min_time_id = stock0.iloc[min_index][\"time_id\"]\n# print(\"min index is\",min_time_id,\"min target is\",stock0.iloc[min_index][\"target\"])\n\n# book_test_min = book_example[book_example[\"time_id\"]==min_time_id]\n# trade_test_min = trade_example[trade_example[\"time_id\"]==min_time_id]\n\n\n# plt.figure(figsize=(20,5))\n\n# for num,a in enumerate(samples):\n    \n   \n#     plt.plot(book_test_min[\"seconds_in_bucket\"],book_test_min[a],label=a)\n    \n# plt.plot(trade_test_min[\"seconds_in_bucket\"],trade_test_min[\"price\"],label=\"trade_parquet\",lw=10)\n# plt.legend(fontsize=12)","27bb34b3":"# stock0 = train[train[\"stock_id\"]==0]\n# max_index = stock0[\"target\"].idxmax()\n# max_time_id = stock0.iloc[max_index][\"time_id\"]\n# print(\"max index is\",max_time_id,\"max target is\",stock0.iloc[max_index][\"target\"])\n\n# book_test_max = book_example[book_example[\"time_id\"]==max_time_id]\n# trade_test_max = trade_example[trade_example[\"time_id\"]==max_time_id]\n\n\n# plt.figure(figsize=(20,5))\n\n# for num,a in enumerate(samples):\n    \n   \n#     plt.plot(book_test_max[\"seconds_in_bucket\"],book_test_max[a],label=a)\n    \n# plt.plot(trade_test_max[\"seconds_in_bucket\"],trade_test_max[\"price\"],label=\"trade_parquet\",lw=10)\n# plt.legend(fontsize=12)","e6ba6534":"# plt.figure(figsize=(20,5))\n# plt.plot(trade_test_min[\"seconds_in_bucket\"],trade_test_min[\"price\"],lw=10,label=\"min_vol_time\")\n# plt.plot(trade_test_max[\"seconds_in_bucket\"],trade_test_max[\"price\"],lw=10,label = \"max_vol_time\")\n# plt.legend(fontsize=15)","ecfe3e85":"# stock2 = stock[[\"stock_id\",\"median\"]]\n# stock2 = stock2.set_index(\"stock_id\")\n# stock2","50133410":"# stock_dict = stock2.to_dict()\n# # example stock id = 0\u306emedian\u5024\n# stock_dict[\"median\"][0]","6a6fe0b9":"# sample = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/sample_submission.csv\")\n# sample[\"stock_id\"] = [s.split(\"-\")[0] for s in sample[\"row_id\"]]\n# sample[\"target\"] = [stock_dict[\"median\"][int(s)] for s in sample[\"stock_id\"]]\n# sample = sample.drop(\"stock_id\",axis=1)\n# sample.to_csv(\"submission.csv\",index=False)\n# sample","17d0edb3":"# \u8a66\u3057\u306bstock_id = 0, time_id = 5\u306ebook\uff0ctrade\u3092\u898b\u3066\u307f\u308b","4b3c8042":"# \u5b9f\u969b\u306e\u53d6\u5f15\u3092\u91cd\u306d\u305f\u30b0\u30e9\u30d5","da555245":"# train.csv\u306e\u69d8\u5b50","b9072dd1":"# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u8868\u793a","b9fa9ecd":"# stock_id = 0\u3067\u6700\u3082\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u304c\u4f4e\u3044\u6642\u306e\u30b0\u30e9\u30d5","cda3e677":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","eb9781b8":"# \u30aa\u30fc\u30c0\u30fc\u30d6\u30c3\u30af\u306e\u72b6\u6cc1\n## \u7d2b\u304c\u5b9f\u969b\u306e\u53d6\u5f15\uff0e\u30aa\u30fc\u30c0\u30fc\u30d6\u30c3\u30af\u306ebit\u3068ask\u306e\u9593\u3092\u3046\u308d\u3046\u308d\uff0e","a229a821":"# stock_id = 0\u3067\u6700\u3082\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u304c\u9ad8\u3044\u6642\u306e\u30b0\u30e9\u30d5","2b31ff91":"### \u3053\u306e\u30b0\u30e9\u30d5\u304b\u3089\uff0c\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u304c\u5927\u304d\u3044\u3068\u304d\u306f10\u5206\u9593\u306e\u5909\u52d5\u304c\u3059\u3054\u304f\u5927\u304d\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u308b","3cb18ea3":"# test.csv\u306e\u69d8\u5b50","1a3e3668":"# LightGBM\u306e\u5b9f\u884c","bd026bae":"# submission.csv\u3092\u69d8\u5b50\u898b","87a351f7":"# \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6574\u5f62","490b4465":"# \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u751f\u6210","b488168f":"# book_[train\/test].parquet\u306e\u69d8\u5b50","03cd8b7b":"# \u682a\u3054\u3068\u306e\u7d71\u8a08\u91cf\u3092\u62bd\u51fa","b3b1944a":"# \u8a66\u3057\u306b\u4e2d\u592e\u5024\u3092submit","11ef715e":"# \u95a2\u6570\u306e\u5b9a\u7fa9","0a52b73a":"# trade_[train\/test].parquet\u306e\u69d8\u5b50"}}