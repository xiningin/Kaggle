{"cell_type":{"3800ce9f":"code","84cc3c7b":"code","0b391111":"code","100dd566":"code","031b8398":"code","daf9faca":"code","5ddc6b15":"code","5a986b49":"code","459daf4d":"code","26040804":"code","1cf920c8":"code","d8727e8e":"code","0c04233d":"code","99e0f789":"code","998a8da9":"code","caa3fbc6":"code","e5063cca":"code","54892e57":"code","a346c810":"code","a1d264b6":"code","903e1ba2":"code","640d8e76":"code","a8437fbe":"code","02aa2d10":"code","10a25ca4":"code","e43305c4":"markdown","5fcf31aa":"markdown","913a514b":"markdown","129e6f9c":"markdown","1eedf05e":"markdown","6c7c689d":"markdown","5ef7299f":"markdown","025db85a":"markdown","3fc5253d":"markdown","037f29df":"markdown","595d3c3c":"markdown","0daebd3e":"markdown","3559f402":"markdown","9b2a45f7":"markdown","f901f713":"markdown","810d499f":"markdown","913c27ca":"markdown","21682301":"markdown","3f65e089":"markdown","71efab61":"markdown","00e0c1ce":"markdown","901150f9":"markdown","d06489b9":"markdown","feb93d72":"markdown","db53e66e":"markdown","521b2dc2":"markdown","efdcde98":"markdown","699f3a7b":"markdown","76dde201":"markdown","f4874326":"markdown","f06cfdd6":"markdown","98ef9b0b":"markdown","449fefe0":"markdown","31667d2e":"markdown","9264f85e":"markdown","3f30ee67":"markdown","f6c6a249":"markdown","8e645b6e":"markdown"},"source":{"3800ce9f":"# importing the libraries\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","84cc3c7b":"# reading the movies dataset\nmovies = pd.read_csv('..\/input\/movielens-latest-small\/movies.csv')","0b391111":"# viewing the first few rows of the movies dataset\nmovies.head()","100dd566":"# reading the ratings dataset\nratings = pd.read_csv('..\/input\/movielens-latest-small\/ratings.csv')","031b8398":"# viewing the first few rows of the ratings dataset\nratings.head()","daf9faca":"# reading the links dataset\nlinks = pd.read_csv('..\/input\/movielens-latest-small\/links.csv')","5ddc6b15":"# viewing the first few rows of the links dataset\nlinks.head()","5a986b49":"# reading the tags dataset\ntags = pd.read_csv('..\/input\/movielens-latest-small\/tags.csv')","459daf4d":"# viewing the first few rows of the tags dataset\ntags.head()","26040804":"# creating a pivot table\npd.pivot_table(ratings, index='userId', columns='movieId', values='rating')","1cf920c8":"# finding all the values in the rating column\nratings.rating.unique()","d8727e8e":"# filling the missing values in the pivot table with 0 and converting to DataFrame\ndf = pd.DataFrame(pd.pivot_table(ratings, index='userId', columns='movieId', values='rating', fill_value=0))\ndf","0c04233d":"# importing the packages\nfrom sklearn.metrics import pairwise_distances\nfrom scipy.spatial.distance import cosine, correlation","99e0f789":"# computing pairwise distances using cosine similarity between the users\ndistance_matrix = pairwise_distances(df, metric='cosine')","998a8da9":"# finding the top 5 most similar users\n(distance_matrix[9]).argsort()[1:6]+1","caa3fbc6":"# finding the intersection of the sets of the movies that both users 2 and 338 have watched\nset(ratings.loc[ratings.userId==2, 'movieId']).intersection(set(ratings.loc[ratings.userId==338, 'movieId']))","e5063cca":"# printing the ratings given by users \nprint('Movie ID 318: ', movies.loc[movies.movieId==318, 'title'].values[0])\nprint('Rating by User 2: ', ratings.loc[((ratings.userId==2) & (ratings.movieId==318)), 'rating'].values[0])\nprint('Rating by User 338: ', ratings.loc[((ratings.userId==338) & (ratings.movieId==318)), 'rating'].values[0])\nprint()\nprint('Movie ID 6874: ', movies.loc[movies.movieId==6874, 'title'].values[0])\nprint('Rating by User 2: ', ratings.loc[((ratings.userId==2) & (ratings.movieId==6874)), 'rating'].values[0])\nprint('Rating by User 338: ', ratings.loc[((ratings.userId==338) & (ratings.movieId==6874)), 'rating'].values[0])","54892e57":"# finding the intersection of the sets of the movies that both users 2 and 338 have watched and rating more than or equal to 4.0\nset(ratings.loc[((ratings.userId==2) & (ratings.rating>=4.0)), 'movieId']).intersection(set(ratings.loc[((ratings.userId==338) & (ratings.rating>=4.0)), 'movieId']))","a346c810":"# printing the title of the movie\nprint('Movie ID 6874: ', movies.loc[movies.movieId==6874, 'title'].values[0])","a1d264b6":"# merging the dataframes ratings and movies\ndf = ratings.merge(movies, on='movieId')","903e1ba2":"# creating the pivot table and convert it to a DataFrame\ndf = pd.DataFrame(pd.pivot_table(df, index='title', columns='userId', values='rating', fill_value=0))\ndf","640d8e76":"# computing pairwise distances using correlation between the movies\ndistance_matrix = pairwise_distances(df, metric='correlation')","a8437fbe":"# finding the movies which contain the word Godfather\ndf[df.index.str.contains('Godfather')]","02aa2d10":"# finding index of Godfather movie\nindices = list(df.index) \nindices.index('Godfather, The (1972)')","10a25ca4":"# finding the top 5 similar movies\nsimilar_indices = (distance_matrix[3499].argsort()[1:6])\nfor i in similar_indices:\n  print(indices[i])","e43305c4":"As we can see, the movies Godfather: Part II, The (1974), Goodfellas (1990), One Flew Over the Cuckoo's Nest (1975), Reservoir Dogs (1992), and Fargo (1996) are the most similar to Godfather, The (1972).","5fcf31aa":"As we can see, the users 159, 143, 563, 177 and 189 are most similar to user 10.","913a514b":"First, we import the libraries:\n\n*  NumPy - for data manipulation.\n*  Pandas - for data manipulation.\n*  MatPlotLib - for data visualization.\n*  Seaborn - for data visualization.","129e6f9c":"As we can see, the missing values are now filled with 0. Hence, a rating more than 0 represents that the user has watched the movie and given the rating, and the value 0 represents that the user has not watched the movie. Another reason for filling the missing values with 0 was to make the pivot table numeric for further analysis. Also, the last userId is same as the number of rows, meaning no missing values in the sequence.","1eedf05e":"Next, we use the index previously found and splice the distance_matrix. Post that, we sort the correlations in the descending order to find the highest correlation between movies, and hence the most similar movies. We use the argsort() function on the array to return the indices. Then, we splice the array to find the top 5 similar movies. To do this, we splice values from 1 to 6. We leave out the index 0 because it is by default the same movie. Then, we print the movies by using the indices and finding their values in the indices list we previously made.","6c7c689d":"Next, we use the loc[] function from the Pandas library to find the title and rating of the movies in common watched by both the users.","5ef7299f":"As we can see, movie having movieId 6874 is common between users 2 and 338 and has rating more than or equal to 4.0.","025db85a":"As we can see, there are 5 movies which contain the word Godfather. However, we choose the first movie - Godfather, The (1972), which is the oldest.","3fc5253d":"To solve Question 7, first we use the loc[] function from the Pandas library and filter the dataset to get movieIds rated by Users 2 and 338. Then, we pass both of these filtered dataframes to the set() function to form sets and then find the intersection of these sets, hence, finding the movies that both the users have watched in common.","037f29df":"As we can see, the movie having movieId 318 or The Shawshank Redemption was given a rating of 3.0 by User 2 and 5.0 by User 338, whereas the movie having movieId 6874 or Kill Bill Vol. 1 was given a rating of 4.0 by User 2 and 4.5 by User 338. This indicates that User 2 is more critical in watching movies.","595d3c3c":"#### **Q8.** Use the movies dataset to find out the common movienames between user 2 and user 338 with least rating of 4.0","0daebd3e":"As we can see, movie having movieId 6874 is Kill Bill Vol. 1.","3559f402":"To solve Question 6, we first compute pairwise distances between the rows, that is the users, based on the cosine similarity. To do this, we use the pairwise_distances() function from the ScikitLearn library and set the value of the parameter metric to 'cosine'.","9b2a45f7":"#### **Q7.** Use the \u201cmovies\u201ddataset to find out the names of movies, user 2 and user 338 have watched in common and how they have rated each one of them.","f901f713":"#### **Q3, 4, 5.** Importing the required packages.","810d499f":"**Meta-Data** of the MovieLens Dataset:\n\nThe data is developed by GroupLens Research for their Movie Recommender System Project - MovieLens. It contains four csv datasets - movies.csv, ratings.csv, links.csv and tags.csv each of which have either of the two identifiers - userId and movieId. The dataset was developed over a period of 22 years wherein only those randomized and anonymized users who have rated atleast 20 movies have been selected, and only those movies which have atleast 1 rating or tag have been selected. Description of the columns in the dataset:\n\nIdentifiers:\n\n*  userId - random and anonymous IDs given to identify users. This is the only way a user can be recognized as no other demographic information is given. The IDs are a complete sequence from 1 to 610.\n*   movieId - IDs given to identify movies. Since only those movies which have 1 or more rating or tag are selected, it is not a complete sequence.\n\nmovies.csv:\n*   title -  the title of the movie alongwith the year of release.\n*   genre - tags of genres given. Possible values: action, adventure, animation, children's, comedy, crime, documentary, drama, fantasy, film-noir, horror, musical, mystery, romance, sci-fi, thriller, war, western, (no genre listed).\n\nratings.csv:\n*   rating - ratings given by user. Maximum Value: 5; Minimum Value: 0.5; Step Value: 0.5.\n*   timestamp - timestamp of when the movie was rated (UTC Time).\n\nlinks.csv:\n*   imdbId: link to the imdb page of the movie.\n*   tmbdId: link to the moviedb page of the movie.\n\ntags.csv:\n*   tag: a word or short phrase that describes the user's impressions about the movie. \n*   timestamp - timestamp of when the movie was rated (UTC Time).\n\n\nThe datases have been ordered by the userIds, and inside the userId, by the movieId.\n\n\n\n\n","913c27ca":"#### **Q1.** Read about the movielens datasetand write down a summary of metadata.","21682301":"As we can see, movies having movieIds 318 and 6874 are the ones watched by both the users.","3f65e089":"#### **Q10.** Find the top 5  movies which are similar to the movie \u201cGodfather\u201d.","71efab61":"Next, we use the pivot_table() function from the Pandas library, and pass the values 'title', 'userId', and 'rating' to the parameters index, columns, and values respectively. As from our analysis in Question 2, we fill the missing values with 0, and convert it to a Pandas DataFrame using the DataFrame() function from the Pandas library for further analysis.","00e0c1ce":"Next, we use the loc[] function from the Pandas library to find the title of the movies in common watched by both the users and having rating more than or equal to 4.0.","901150f9":"To solve further Questions, we download the following packages to compute the distances and hence similarity between the users and movies.","d06489b9":"As we can see, no user has given a rating of '0' to any movie. Hence, we use the constant 0 to fill in the missing values by setting the parameter fill_value to 0, and convert it to a Pandas DataFrame using the DataFrame() function from the Pandas library for further analysis.","feb93d72":"Next, we read all the datasets and store them in a Pandas dataframe. To do this, we use the read_csv() function from the Pandas library. We also view the first few rows of each dataset to get a glimpse.","db53e66e":"Since the movieId and row number is not the same, we find the index of the Godfather movie. To do this, we first make a list of all the movies and then find the index of the Godfather movie in the list.","521b2dc2":"To solve Question 10, we first compute pairwise distances between the rows, that is the movies, based on the correlation. To do this, we use the pairwise_distances() function from the ScikitLearn library and set the value of the parameter metric to 'correlation'.","efdcde98":"#### **Q9.** Create a pivot table for representing the similarity among movies using correlation.","699f3a7b":"Next, we find the movies which contain the word Godfather. To do this, we use string functions and filter the dataframe.","76dde201":"To solve Question 9, we first merge the dataframes ratings and movies using the merge() function from the Pandas library on the column movieId.","f4874326":"Author: Khushee Kapoor\n\nLast Updated: 26\/12\/2021","f06cfdd6":"To solve Question 2, we use the pivot_table() function from the Pandas library, and pass the values 'userId', 'movieId', and 'rating' to the parameters index, columns, and values respectively. This way, every individual row represents a user and columns represent movies.","98ef9b0b":"## Recommender System - Collaborative and Content Filtering - MovieLens Dataset","449fefe0":"As we can see from the pivot table above, the last movieId exceeds the number of rows. That means that the movieId and the row numbers are not the same. This is because only those movies who have atleast 1 rating or tag have been chosen.","31667d2e":"To solve Question 8, first we use the loc[] function from the Pandas library and filter the dataset to get movieIds rated by Users 2 and 338 which have rating more than or equal to 4.0. Then, we pass both of these filtered dataframes to the set() function to form sets and then find the intersection of these sets, hence, finding the movies that both the users have watched in common, having rating more than or equal to 4.0.","9264f85e":"Next, we splice and select the 9th row from the resultant distance matrix to select the 10th User. We do this because arrays in Python are 0-indexed and the UserIDs start from 1. Post that, we sort the cosine similarities in the descending order to find the highest cosine similarity between users, and hence the most similar users. We use the argsort() function on the array to return the indices, and hence the UserIDs of the sorted array. Then, we splice the array to find the top 5 similar users. To do this, we splice values from 1 to 6. We leave out the index 0 because it is by default the same user. After splicing, we add 1 to the indices since arrays in Python are 0-indexed and UserIDs start from 1. ","3f30ee67":"As we can see, there are a lot of NaN or missing values in the dataset. To handle the missing values, we will fill them with a constant. The constant has to be a value that does not clash with the values in the dataset. To do so, let's find the ratings present in the dataset.","f6c6a249":"#### **Q6.** Find the 5 most similar user for user with user Id 10.","8e645b6e":"#### **Q2.** Read the \u201cratings.csv\u201d file and create a pivot table with index=\u2018userId\u2019, columns=\u2018movieId\u2019, values = \u201crating\". "}}