{"cell_type":{"dedd1649":"code","46747a21":"code","7f1ab440":"code","0e86e2eb":"code","ba240633":"code","1a12b604":"code","02e1f914":"code","150d8d1f":"code","2dd0f0ed":"code","e52e1209":"code","253209db":"code","8d386db9":"code","bc125665":"code","a9b78cff":"code","d98bbaa3":"code","c9aa7279":"code","33828da1":"code","356b9c38":"code","a1aa45e9":"code","5994a9f7":"code","be3642f3":"code","405d05f9":"markdown","ad9540ac":"markdown","7ff91d57":"markdown","93997f75":"markdown","6ecf5af6":"markdown","4273cf7e":"markdown","f587f702":"markdown","0942d98f":"markdown","5c6f7e1b":"markdown","b5c93872":"markdown","0bd1d9a5":"markdown","b5111778":"markdown","0b8f4b99":"markdown","bb940eae":"markdown","a50af1c8":"markdown","12cd1bbc":"markdown"},"source":{"dedd1649":" #This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46747a21":"df = pd.read_json('\/kaggle\/input\/simple-talk1\/intents.json')","7f1ab440":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport json\nimport random \nimport pickle\nfrom nltk.stem import WordNetLemmatizer\nimport nltk\nnltk.download('punkt')\nimport nltk\nnltk.download('wordnet')\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout\nfrom tensorflow.keras.optimizers import SGD\nlemmatizer = WordNetLemmatizer()\nimport string\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import load_model","0e86e2eb":"intents = json.loads(open('\/kaggle\/input\/simple-talk1\/intents.json').read())","ba240633":"words= []\nclasses = []\ndocuments = []","1a12b604":"for intent in intents['intents']:\n    for pattern in intent['patterns']:\n        word_list = nltk.word_tokenize(pattern)\n        words.extend(word_list)\n        documents.append((word_list, intent['tag']))\n        if intent['tag'] not in classes:\n            classes.append(intent['tag'])\n        \n        ","02e1f914":"words = [lemmatizer.lemmatize(word) for word in words if word not in string.punctuation]\nwords = sorted(set(words))","150d8d1f":"classes = sorted(set(classes))\npickle.dump(words,  open('words.pkl', 'wb'))\npickle.dump(classes,  open('classes.pkl', 'wb'))","2dd0f0ed":"training = []\noutput_empty = [0]*len(classes)","e52e1209":"for document in documents:\n    bag = []\n    word_patterns = document[0]\n    word_patterns = [lemmatizer.lemmatize(word.lower()) for word in word_patterns]\n    for word in words:\n        bag.append(1) if word in word_patterns else bag.append(0)\n        \n        \n    output_raw = list(output_empty)\n    output_raw[classes.index(document[1])] =1\n    training.append([bag, output_raw])\n    ","253209db":"random.shuffle(training)\ntraining = np.array(training)","8d386db9":"train_x = list(training[:,0])\ntrain_y = list(training[:,1])","bc125665":"early_stopping = EarlyStopping(\n    monitor='val_loss',\n    min_delta=0.001, # minimium amount of change to count as an improvement\n    patience=2, # how many epochs to wait before stopping\n    restore_best_weights=True,\n)","a9b78cff":"model = Sequential()","d98bbaa3":"model.add(Dense(256, input_shape=(len(train_x[0]),), activation = 'relu'))\nmodel.add(Dropout(0.5))\n# model.add(Dense(258,activation = 'relu'))\n# model.add(Dropout(0.5))\nmodel.add(Dense(128,activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64,activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(len(train_y[0]),activation = 'softmax'))\nsgd = SGD(lr=0.01, decay = 1e-6,momentum = 0.9,nesterov =True )\nmodel.compile(loss='categorical_crossentropy', optimizer = sgd, metrics= ['accuracy'])\nhist =model.fit(np.array(train_x),np.array(train_y), epochs=600, batch_size = 20, verbose=0 , callbacks=[early_stopping])\n","c9aa7279":"model.save('chatbotmodel.h5', hist)\nprint('done')","33828da1":"!pip install discord","356b9c38":"import discord","a1aa45e9":"lemmatizer = WordNetLemmatizer()\nintents = json.loads(open('\/kaggle\/input\/simple-talk1\/intents.json').read())\nwords = pickle.load(open('.\/words.pkl', 'rb'))\nclasses = pickle.load(open('.\/classes.pkl', 'rb'))\nmodel = load_model('.\/chatbotmodel.h5')","5994a9f7":"import nest_asyncio\nnest_asyncio.apply()","be3642f3":"def clean_up_sentence(sentence):\n    sentence_words = nltk.word_tokenize(sentence)\n    sentence_words = [lemmatizer.lemmatize(word) for word in sentence_words]\n    return sentence_words\n\n\ndef bag_of_words(sentence):\n    sentence_words = clean_up_sentence(sentence)\n    bag = [0]*len(words)\n    for w in sentence_words:\n        for i, word in enumerate(words):\n            if word == w:\n                bag[i]= 1\n\n    return np.array(bag)\n\n\n\ndef predict_class(sentence):\n    bow = bag_of_words(sentence)\n    res = model.predict(np.array([bow]))[0]\n    ERROR_THRESHOLD = 0.25\n    results = [[i,r] for i , r in enumerate(res)  if r > ERROR_THRESHOLD]\n    results.sort(key = lambda x:x[1], reverse=True)\n    return_list = []\n    for r in results:\n        return_list.append({'intent': classes[r[0]], 'probability':str(r[1])})\n\n    return return_list\n\n\n\ndef get_response(intents_list, intents_json):\n    tag = intents_list[0]['intent']\n    list_of_intents = intents_json['intents']\n    for i in list_of_intents:\n        if i['tag'] == tag:\n            result = random.choice(i['responses'])\n            break\n    return result","405d05f9":"**Now from side navigation choose OAuth2 and check the box which shown in pic**\n\n\n![bot6.PNG](attachment:ebd5e08b-d417-427a-8679-3749ca03bfdf.PNG)","ad9540ac":"**chose any name for your chatbot**\n\n\n![bot2.PNG](attachment:105b84bf-08da-4d79-93cb-122688df5926.PNG)\n","7ff91d57":"**Now setect server name in which you want to add your bot then click Authorize button** \n\n![bot8.PNG](attachment:5b58dd43-0d67-40bb-97e3-62f75c185a14.PNG)\n","93997f75":"**check all the boxes that are shown in pic **\n\n\n![bot5.PNG](attachment:54ba390b-0267-4bb3-aa21-579ac380c35c.PNG)","6ecf5af6":"**now chose For me and my friend option**\n\n\n![third.PNG](attachment:53ccbc7d-0b09-4d15-a6fb-e4da9ff75dc7.PNG)\n\n","4273cf7e":"**copy the link by clicking copy button **\n![bot7.PNG](attachment:f9949315-8b44-43ae-aea4-499a3431af10.PNG)\n\n\n**now open new tab copy the link**","f587f702":"**on the right side you can see button name add bot click it**\n\n![bot4.PNG](attachment:d63cc8b7-8ae3-48c0-aaae-08cfb978c110.PNG)","0942d98f":"**Hi everyone in this notebook i will creat simple chatbot and use it on discord.**\n\nAgenda of this notebook is to show beginners how can we use trained model in apps.\nIn this notebook I will create a chatbot which will just answers few questions.\n\n**prerequisite**\nYou should have account on Discord.\nif you don't have discord account then click on link below and create you account.\nhttps:\/\/discord.com\/\n\n\n\n","5c6f7e1b":"you can see in above picture that my dataset it's so small becaue i don't want to perform EDA i just want to show you how can we discord.","b5c93872":" here is link for second part  \n https:\/\/www.kaggle.com\/muhammadishaque\/creating-simple-discord-chatbot-part-2\n \n i ma dividing it into 2 part becaue there are alot image so kaggle can not save alot of images","0bd1d9a5":"**click on your bot then on side navigation choose bot**\n\n![Cbot3.PNG](attachment:cc21de16-6483-4e84-8e8c-002f1fe1ed8b.PNG)","b5111778":"**now give anyname to your server**\n\n![forth.PNG](attachment:61c3df76-4a4b-4eeb-8030-0cf50896440c.PNG)\n\n**wow !! you have created server**\n\n\n\n\n![fith.PNG](attachment:611a699a-d67f-4c72-97c4-ab3e9ba14dff.PNG)","0b8f4b99":"**now we have to create chatbot**\nclick following link \nhttps:\/\/discord.com\/developers\/applications\n\nlogin and click new application\n![bot1.PNG](attachment:8c32f1bf-4fc6-49e2-b875-cbb4777187bb.PNG)","bb940eae":"Now we created chatbot now we are going to use that chatbot in Discord\nfor add chatbot discord first you should create discord server that show in following picture\nopen discord\nclick plus sign to create server\n\n\n\n![first pic.PNG](attachment:bf662294-96ca-45b0-b6cc-c1464490f6ec.PNG)\n\n","a50af1c8":"![Capture.PNG](attachment:87d4fbe6-65f9-4f2f-ae9c-1312e74a4e6b.PNG)","12cd1bbc":"now chose create my own option\n\n![second.PNG](attachment:9a6a841d-c9fb-41c8-b1e0-2e14b4658838.PNG)"}}