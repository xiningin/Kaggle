{"cell_type":{"572ff8a1":"code","358abdd9":"markdown","0df8a64b":"markdown"},"source":{"572ff8a1":"%matplotlib inline\nfrom matplotlib import  rc\nfrom IPython.display import HTML\nimport numpy as np\nfrom numpy.random import default_rng\nimport matplotlib.pyplot    as plt\nimport matplotlib.patches   as patches\nimport matplotlib.path      as path\nimport matplotlib.animation as animation\nimport scipy.stats\nfrom scipy.stats import norm\n\n#===========================================================================\n# initial setup\n#===========================================================================\ndata     = 0\nn_bins   = 200\nn, bins  = np.histogram(data, n_bins)\nmeanList = []\nx_min    = -0.5\nx_max    =  0.5\n\n#===========================================================================\n# get the corners of the rectangles for the histogram\n#===========================================================================\nleft   = np.array(bins[:-1])\nright  = np.array(bins[1:])\nbottom = np.zeros(len(left))\ntop    = bottom + n\nnrects = len(left)\nnverts = nrects * (1 + 3 + 1)\nverts  = np.zeros((nverts, 2))\ncodes  = np.ones(nverts, int) * path.Path.LINETO\ncodes[0::5] = path.Path.MOVETO\ncodes[4::5] = path.Path.CLOSEPOLY\nverts[0::5, 0] = left\nverts[0::5, 1] = bottom\nverts[1::5, 0] = left\nverts[1::5, 1] = top\nverts[2::5, 0] = right\nverts[2::5, 1] = top\nverts[3::5, 0] = right\nverts[3::5, 1] = bottom\npatch = None\n\n#===========================================================================\n# what to plot in each frame\n#===========================================================================\ndef animate(i):\n    global meanList\n    for i in range(25):\n        # sample 25 random values between -0.5 and 0.5 from a uniform dist. \n        values =  np.random.default_rng().uniform(-0.5,0.5,25)\n        # calculate the mean of these 25 values\n        mean = sum(values) \/ 25\n        # add this new mean value to my list\n        meanList.append(mean)\n    n, bins = np.histogram(meanList, 200,range=(x_min,x_max),density=True)\n    top = bottom + n\n    verts[1::5, 1] = top\n    verts[2::5, 1] = top\n    return [patch, ]\n\n#===========================================================================\n# what each plot looks like\n#===========================================================================\nfig, ax = plt.subplots(figsize=(10, 5))\nbarpath = path.Path(verts, codes)\npatch = patches.PathPatch(\n    barpath, facecolor='darkmagenta', edgecolor='crimson', alpha=0.5)\nax.add_patch(patch)\nax.set_xlim(x_min,x_max)\nax.set_ylim(0,8)\n# also plot a normal curve on top\nx = np.linspace(x_min, x_max, 100)\nmeanValue = 0.\nstd       = 0.06\ny         = scipy.stats.norm.pdf(x,meanValue,std)\nax.plot(x,y, color='orangered',linewidth=3);\n\n#===========================================================================\n# make the animation\n#===========================================================================\nn_frames = 200\nanim = animation.FuncAnimation(fig, animate, n_frames, repeat=True, blit=False)\nHTML(anim.to_jshtml())","358abdd9":"This is a demonstration script of the [central limit theorem](https:\/\/en.wikipedia.org\/wiki\/Central_limit_theorem) using a [matplotlib animated histogram](https:\/\/matplotlib.org\/3.2.2\/gallery\/animation\/animated_histogram.html) within a kaggle notebook, which I got working with the help of the notebook [\"Testing matplotlib animation\"](https:\/\/www.kaggle.com\/mrisdal\/testing-matplotlib-animation) by [Meg Risdal](https:\/\/www.kaggle.com\/mrisdal).\n\nThe idea behind this is to take [random samples from a uniform distribution](https:\/\/numpy.org\/devdocs\/reference\/random\/generated\/numpy.random.Generator.uniform.html), here each time I take 25 numbers between $[-0.5,0.5)$, calculate the mean value of these 25 samples, and add this mean value to a list. The idea is that the eventually the a plot of these mean values will converge to form a [normal distribution](https:\/\/en.wikipedia.org\/wiki\/Normal_distribution) whose [expectation value](https:\/\/en.wikipedia.org\/wiki\/Expected_value) will lie in the middle of the distribution, which in this case is zero.\n\nIt is worth noting that while here the average of 25 samples is used, one also arrives at a normal distribution just as well with a sample size as small as **3**.\n\n#### Just press play...","0df8a64b":"**Acknowledgements**:\nThis notebook was produced with the help of [Pranav Kasela](https:\/\/www.kaggle.com\/pranavkasela)."}}