{"cell_type":{"771550e3":"code","6bbb39d5":"code","69f29fcc":"code","97e96766":"code","98aa7b5e":"code","48cfc7c6":"code","153b240c":"code","2a1196ab":"code","e6908c6f":"code","c80740be":"code","2ca20683":"code","d19c5ee7":"code","298d38e6":"code","d5b7cade":"code","61f8ad39":"code","ac26feb7":"code","ddf52276":"code","7ee175a3":"markdown","968a3721":"markdown","269b3406":"markdown","4b51894a":"markdown","21f7d79a":"markdown","36b024e3":"markdown","141ac934":"markdown","85c7edfe":"markdown","e7599ce2":"markdown"},"source":{"771550e3":"import keras\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras import backend as K\nimport os\nfrom PIL import Image\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nfrom random import randrange\nfrom keras.layers import Dropout\nfrom keras.layers import BatchNormalization, Activation\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.layers.convolutional import UpSampling2D, Conv2D\nfrom keras.models import Sequential, Model\nfrom keras.callbacks import EarlyStopping\nfrom keras.models import load_model\nfrom random import randrange","6bbb39d5":"os.listdir('..\/input\/aerial-change-detection-in-video-games\/AICDDataset')","69f29fcc":"low = []\npaths = []\nhigh = []\nfor r, d, f in os.walk(r'..\/input\/aerial-change-detection-in-video-games\/AICDDataset\/Images_Shadows'):\n    for file in f:\n        if '.png' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    x = np.array(img.resize((128,128)))\n    if(x.shape == (128,128,3)):\n        low.append(x)\n    x = np.array(img.resize((512,512)))\n    if(x.shape == (512,512,3)):\n        high.append(x)\ndel paths","97e96766":"low = np.array(low)\/256\nlow.shape","98aa7b5e":"high = np.array(high)\/256\nhigh.shape","48cfc7c6":"x_train,x_test,y_train,y_test = train_test_split(low, high, test_size=0.25, shuffle=True, random_state=69)\ndel high\ndel low","153b240c":"model = Sequential()\n\nmodel.add(Conv2D(128, kernel_size=(2,2), input_shape=(128, 128, 3), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\n\nmodel.add(Conv2D(128, kernel_size=(2,2), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\nmodel.add(Dropout(0.25))\n\nmodel.add(UpSampling2D())\n\nmodel.add(Conv2D(128, kernel_size=(4,4), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\n\nmodel.add(Conv2D(128, kernel_size=(5,5), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\nmodel.add(Dropout(0.25))\n\nmodel.add(UpSampling2D())\n\nmodel.add(Conv2D(128, kernel_size=(3,3), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\n\nmodel.add(Conv2D(128, kernel_size=(2,2), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, kernel_size=(4,4), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, kernel_size=(2,2), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, kernel_size=(3,3), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, kernel_size=(5,5), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(3, kernel_size=(2,2), padding=\"same\"))\nmodel.add(LeakyReLU(alpha=0.2))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\nprint(model.summary())","2a1196ab":"# Configure the callback\ncheckpoint = EarlyStopping(monitor='val_loss', min_delta=0.0001, patience=4, verbose=1, mode='auto', restore_best_weights=True)\ncallbacks_list = [checkpoint]","e6908c6f":"history = model.fit(x_train, y_train, epochs=20, batch_size=3, verbose=1,validation_data=(x_test, y_test),callbacks=callbacks_list)","c80740be":"# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Test', 'Validation'], loc='upper right')\nplt.show()","2ca20683":"paths = []\nfor r, d, f in os.walk(r'..\/input\/aerial-change-detection-in-video-games\/AICDDataset\/Images_Shadows'):\n    for file in f:\n        if '.png' in file:\n            paths.append(os.path.join(r, file))","d19c5ee7":"index = randrange(len(paths))\n\n#select image\nimg = Image.open(paths[index])\n\n#create plot\nf, axarr = plt.subplots(1,3,figsize=(15,15),gridspec_kw={'width_ratios': [1,4,4]})\naxarr[0].set_xlabel('Original Image', fontsize=10)\naxarr[1].set_xlabel('Interpolated Image', fontsize=10)\naxarr[2].set_xlabel('Super Sampled Image', fontsize=10)\n\n#original image downsampled\nx = img.resize((128,128))\n#interpolated image using Nearest Neighbor\ny = x.resize((512,512),resample=Image.NEAREST)\n#plotting first two images\nx = np.array(x)\ny = np.array(y)\naxarr[0].imshow(x)\naxarr[1].imshow(y)\n#plotting super sampled image\nx = x.reshape(1,128,128,3) \/ 256\nresult = np.array(model.predict_on_batch(x))*256\nresult = result.reshape(512,512,3)\nresult = result.astype(int)\naxarr[2].imshow(result)","298d38e6":"index = randrange(len(paths))\n\n#select image\nimg = Image.open(paths[index])\n\n#create plot\nf, axarr = plt.subplots(1,3,figsize=(15,15),gridspec_kw={'width_ratios': [1,4,4]})\naxarr[0].set_xlabel('Original Image', fontsize=10)\naxarr[1].set_xlabel('Interpolated Image', fontsize=10)\naxarr[2].set_xlabel('Super Sampled Image', fontsize=10)\n\n#original image downsampled\nx = img.resize((128,128))\n#interpolated image using Nearest Neighbor\ny = x.resize((512,512),resample=Image.NEAREST)\n#plotting first two images\nx = np.array(x)\ny = np.array(y)\naxarr[0].imshow(x)\naxarr[1].imshow(y)\n#plotting super sampled image\nx = x.reshape(1,128,128,3) \/ 256\nresult = np.array(model.predict_on_batch(x))*256\nresult = result.reshape(512,512,3)\nresult = result.astype(int)\naxarr[2].imshow(result)","d5b7cade":"index = randrange(len(paths))\n\n#select image\nimg = Image.open(paths[index])\n\n#create plot\nf, axarr = plt.subplots(1,3,figsize=(15,15),gridspec_kw={'width_ratios': [1,4,4]})\naxarr[0].set_xlabel('Original Image', fontsize=10)\naxarr[1].set_xlabel('Interpolated Image', fontsize=10)\naxarr[2].set_xlabel('Super Sampled Image', fontsize=10)\n\n#original image downsampled\nx = img.resize((128,128))\n#interpolated image using Nearest Neighbor\ny = x.resize((512,512),resample=Image.NEAREST)\n#plotting first two images\nx = np.array(x)\ny = np.array(y)\naxarr[0].imshow(x)\naxarr[1].imshow(y)\n#plotting super sampled image\nx = x.reshape(1,128,128,3) \/ 256\nresult = np.array(model.predict_on_batch(x))*256\nresult = result.reshape(512,512,3)\nresult = result.astype(int)\naxarr[2].imshow(result)","61f8ad39":"paths = []\nfor r, d, f in os.walk(r'..\/input\/the-simpsons-characters-dataset\/simpsons_dataset\/simpsons_dataset\/homer_simpson'):\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))","ac26feb7":"index = randrange(len(paths))\n\n#select image\nimg = Image.open(paths[index])\n\n#create plot\nf, axarr = plt.subplots(1,3,figsize=(15,15),gridspec_kw={'width_ratios': [1,4,4]})\naxarr[0].set_xlabel('Original Image', fontsize=10)\naxarr[1].set_xlabel('Interpolated Image', fontsize=10)\naxarr[2].set_xlabel('Super Sampled Image', fontsize=10)\n\n#original image downsampled\nx = img.resize((128,128))\n#interpolated image using Nearest Neighbor\ny = x.resize((512,512),resample=Image.NEAREST)\n#plotting first two images\nx = np.array(x)\ny = np.array(y)\naxarr[0].imshow(x)\naxarr[1].imshow(y)\n#plotting super sampled image\nx = x.reshape(1,128,128,3) \/ 256\nresult = np.array(model.predict_on_batch(x))*256\nresult = result.reshape(512,512,3)\nresult = result.astype(int)\naxarr[2].imshow(result)","ddf52276":"index = randrange(len(paths))\n\n#select image\nimg = Image.open(paths[index])\n\n#create plot\nf, axarr = plt.subplots(1,3,figsize=(15,15),gridspec_kw={'width_ratios': [1,4,4]})\naxarr[0].set_xlabel('Original Image', fontsize=10)\naxarr[1].set_xlabel('Interpolated Image', fontsize=10)\naxarr[2].set_xlabel('Super Sampled Image', fontsize=10)\n\n#original image downsampled\nx = img.resize((128,128))\n#interpolated image using Nearest Neighbor\ny = x.resize((512,512),resample=Image.NEAREST)\n#plotting first two images\nx = np.array(x)\ny = np.array(y)\naxarr[0].imshow(x)\naxarr[1].imshow(y)\n#plotting super sampled image\nx = x.reshape(1,128,128,3) \/ 256\nresult = np.array(model.predict_on_batch(x))*256\nresult = result.reshape(512,512,3)\nresult = result.astype(int)\naxarr[2].imshow(result)","7ee175a3":"# Data Preparation\n\nI am compiling a list of ```128x128``` images as my input and ```256x256``` images as my output","968a3721":"# Other Datasets\nLets see how well the model is able to generalize","269b3406":"# Results","4b51894a":"# CNN Model","21f7d79a":"I am selecting random images from the dataset and comparing the performance of [Nearest Neighbor](https:\/\/pillow.readthedocs.io\/en\/3.1.x\/reference\/Image.html#PIL.Image.Image.resize) Interpolation vs. the DLSS Model","36b024e3":"# Inspiration\nThis [Computerphile Video](https:\/\/www.youtube.com\/watch?v=_DPRt3AcUEY) inpsired me to try to code a DLSS program <br\/>\nI can only work with small images due to memory contraints <br\/>\nI am going to try to super sample ```128x128``` images to ```512x512``` images <br\/>\nThis is increasing the size of the image by ```16``` times","141ac934":"# Training\nI am using a callback that restores the best weights if the model starts to become over trained","85c7edfe":"Splitting data into train and test sets","e7599ce2":"31\/100 images did not contain 3 color channels and were omitted from the training dataset"}}