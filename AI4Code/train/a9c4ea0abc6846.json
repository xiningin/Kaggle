{"cell_type":{"9fb5286a":"code","d41798ca":"code","2ec1b086":"code","0f5763b6":"code","fa59513c":"code","2da5499a":"code","88d038c4":"code","f0e0d576":"code","e6862fbc":"code","87d40c8d":"markdown","d4217d32":"markdown","5135f049":"markdown","b325c37c":"markdown","5f27ba5a":"markdown","2128ed4c":"markdown","9b566f96":"markdown","bd8bf0c6":"markdown","0e3db800":"markdown","ce241478":"markdown","0d989022":"markdown","6f39f257":"markdown"},"source":{"9fb5286a":"# Usual imports\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.decomposition import NMF, LatentDirichletAllocation, TruncatedSVD\nfrom statistics import *\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport concurrent.futures\nimport time\nimport pyLDAvis.sklearn\nfrom pylab import bone, pcolor, colorbar, plot, show, rcParams, savefig\nimport textstat\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Plotly based imports for visualization\nfrom plotly import tools\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n# spaCy based imports\nimport spacy\nfrom spacy.lang.en.stop_words import STOP_WORDS\nfrom spacy.lang.en import English","d41798ca":"%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\"))","2ec1b086":"quora_train = pd.read_csv(\"..\/input\/train.csv\")\nquora_train.head()","0f5763b6":"sentence=\"I love it, when David writes Great looking code\"\nparser = English() # Defines the parse sapcy will use\nmytokens = parser(sentence)\nprint(mytokens)","fa59513c":"mytokens = [ word.lemma_.lower().strip() if word.lemma_ != \"-PRON-\" else word.lower_ for word in mytokens ]\nprint(mytokens)","2da5499a":"punctuations = string.punctuation  #gets a list of puctuations carachters from the string library\nstopwords = list(STOP_WORDS) #gets a list of stop words - words that usually have little meaning in the phrase\nmytokens = [ word for word in mytokens if word not in stopwords and word not in punctuations ]\nprint(mytokens)","88d038c4":"mytokens = \" \".join([i for i in mytokens]) #go over each token in \"mytokens\" and add it to a string. Use a space (\" \".) to separate the words in the new string.\nprint(mytokens)","f0e0d576":"# SpaCy Parser for questions\npunctuations = string.punctuation\nstopwords = list(STOP_WORDS)\nparser = English()\n\ndef spacy_tokenizer(sentence): #Create a function called spacy_tokenizer that takes \"sentence\" as an argument and returns the processed sentence \n    mytokens = parser(sentence)\n    mytokens = [ word.lemma_.lower().strip() if word.lemma_ != \"-PRON-\" else word.lower_ for word in mytokens ]\n    mytokens = [ word for word in mytokens if word not in stopwords and word not in punctuations ]\n    mytokens = \" \".join([i for i in mytokens])\n    return mytokens","e6862fbc":"tqdm.pandas()\nsincere_questions = quora_train[\"question_text\"][quora_train[\"target\"] == 0].progress_apply(spacy_tokenizer)\ninsincere_questions = quora_train[\"question_text\"][quora_train[\"target\"] == 1].progress_apply(spacy_tokenizer)","87d40c8d":"## Hasta La Vista, Baby","d4217d32":"Thats it. We have a processed string that can be fed into a model. But.... We did it only once for a specific phrase. Now its time to encapsulate all that into a function that can be used again to process the whole questions file.","5135f049":"###  Print content of inputs archive from kaggle","b325c37c":"# Completely lost? Annotated Questions Preprocessing \n\nHi all, this kernel is aimed to help you guys really understand the nuts and bolts. I've shamelessly copied the code and some of the text from Siddharth Yadav's kernel - [Analyzing Quora for the Insinceres](https:\/\/www.kaggle.com\/thebrownviking20\/analyzing-quora-for-the-insinceres) and tried to explain every bit of the code - what it does and why its there. \n\nLet me know If you like it, by leaving a comment and upvoting. \n\nHave fun.\n\n\n\n\n# About the dataset\nAn existential problem for any major website today is how to handle toxic and divisive content. Quora wants to tackle this problem head-on to keep their platform a place where users can feel safe sharing their knowledge with the world.\n\nQuora is a platform that empowers people to learn from each other. On Quora, people can ask questions and connect with others who contribute unique insights and quality answers. A key challenge is to weed out insincere questions -- those founded upon false premises, or that intend to make a statement rather than look for helpful answers.\n\nIn this competition, Kagglers will develop models that identify and flag insincere questions. To date, Quora has employed both machine learning and manual review to address this problem. With your help, they can develop more scalable methods to detect toxic and misleading content.\n\nHere's your chance to combat online trolls at scale. Help Quora uphold their policy of \u201cBe Nice, Be Respectful\u201d and continue to be a place for sharing and growing the world\u2019s knowledge.","5f27ba5a":"Now, all thats left is to filter out stop words and punctuation. The idea is to use only words with semantical meaning in the analysis. ","2128ed4c":"### Read Training Data set","9b566f96":"Here is an example of how the tokenization process works:","bd8bf0c6":"## Pre-processing\nIf you're working with a lot of text, you'll eventually want to know more about it. For example, what's it about? What do the words mean in context? Who is doing what to whom? Which texts are similar to each other?\nThe process of converting data to something a computer can understand is referred to as pre-processing. \n\nIn this case, we will tokenize the data, get rid on useless words and standardize lower and upper case based on the LEMMA of each word (Lemma is the base form of the word - for example, the lemma of \"is\" is \"be\" - to understand this better, read more  [here](https:\/\/spacy.io\/usage\/linguistic-features)\n\n###   Tokenization - Segmenting text into words, punctuations marks etc.\n\nAltough it is possible to work with the questions as a whole, tokenization allows us to compare different features such as similar words, etc. It also allows us to disconsider punctuation and stop words.\nThe code bellow creates a function that will then be used to parse the question text using the spacy library.\nTo understand how this works, take a look [here](https:\/\/spacy.io\/usage\/spacy-101)","0e3db800":"After all that, we join the tokens to recreate the question. For that, we will use the join function. ","ce241478":"The code bellow Uses the function we just defined to proccess the tex of all quora questions.\nThe first line uses the tqdm function to ask the computer to show the progress of whats happening. It helps to know that the computer is actually doing something and not just stuck... Read more about this function [here](https:\/\/pypi.org\/project\/tqdm\/).\nThe second line creates a file called sincere_questions that includes the processed result of all questions from the file quora_train where target=0 (sincere questions).\nThe third line creates a file called insincere_questions that includes the parsed result of all questions from the file quora_train where target=1 (insincere questions).\nYou can understand the code as\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"F2TEG96\"><a href=\"\/\/imgur.com\/F2TEG96\">Understanding Python code -\u00a0 Spacy tokenizer<\/a><\/blockquote><script async src=\"\/\/s.imgur.com\/min\/embed.js\" charset=\"utf-8\"><\/script>:\n","0d989022":"###  Import Python libraries","6f39f257":"The following code transforms each word in mytokens into the lemma of the word. There is an issue with creating the leema of pronouns like I and his - the function returns \"-PRON-\" for those words (read more about this [here](https:\/\/github.com\/explosion\/spaCy\/issues\/962). As a workarround, we ask for the lemma of the word. If the lemma is \"-PRON-\", then we ask for the word in itself in lowercase.\n<blockquote class=\"imgur-embed-pub\" lang=\"en\" data-id=\"a\/q1EEPRt\"><a href=\"\/\/imgur.com\/q1EEPRt\"><\/a><\/blockquote><script async src=\"\/\/s.imgur.com\/min\/embed.js\" charset=\"utf-8\"><\/script>                                        "}}