{"cell_type":{"c31ec0fb":"code","8dded596":"code","9c2dd4c4":"code","61b3c7f1":"code","3419b3b0":"code","15248cbd":"code","d984b46d":"code","a94af3bc":"code","d59703bf":"code","db67fa50":"code","286584e2":"code","ba3691a8":"code","76db31b1":"code","2fb178f6":"code","6fe74651":"code","3ba05f3a":"code","0c3f310a":"code","cbd10906":"code","b18e3a3e":"code","7ec0604e":"markdown","4f7fdee1":"markdown","a641fd36":"markdown","43b22c7a":"markdown","642a99ea":"markdown","25db35de":"markdown","28c40c40":"markdown","46f10fd5":"markdown","9913cbb6":"markdown","df97c0da":"markdown","a702e3d3":"markdown","ed8fa7d1":"markdown","d6b0b43a":"markdown","0c9d348c":"markdown","90e2974d":"markdown","325c7438":"markdown","66205ddb":"markdown","b33d7ccb":"markdown"},"source":{"c31ec0fb":"!git clone https:\/\/github.com\/ridhodwidharmawan\/gee-atmcorr-S2","8dded596":"cd \/kaggle\/working\/gee-atmcorr-S2\/bin\/","9c2dd4c4":"import ee\nee.Authenticate()","61b3c7f1":"!conda install -c conda-forge py6s -y","3419b3b0":"from Py6S import *\nimport datetime\nimport math\nimport os\nimport sys\nsys.path.append(os.path.join(os.path.dirname(os.getcwd()),'bin'))\nfrom atmospheric import Atmospheric\n\nee.Initialize()","15248cbd":"# This is centroid of Yogyakarta City\ngeom = ee.Geometry.Point(110.363524, -7.782469)","d984b46d":"# The first Sentinel 2 image\nS2 = ee.Image(\n  ee.ImageCollection('COPERNICUS\/S2')\n    .filterBounds(geom)\n    .filterDate('2018-01-01', '2018-12-31')\n    .sort('CLOUDY_PIXEL_PERCENTAGE')\n    .first()\n  )\n\n# top of atmosphere reflectance\ntoa = S2.divide(10000)","a94af3bc":"info = S2.getInfo()['properties']\nscene_date = datetime.datetime.utcfromtimestamp(info['system:time_start']\/1000)# i.e. Python uses seconds, EE uses milliseconds\nsolar_z = info['MEAN_SOLAR_ZENITH_ANGLE']\ndate = ee.Date(scene_date.strftime(\"%Y-%m-%d\"))","d59703bf":"h2o = Atmospheric.water(geom,date).getInfo()\no3 = Atmospheric.ozone(geom,date).getInfo()\naot = Atmospheric.aerosol(geom,date).getInfo()","db67fa50":"SRTM = ee.Image('CGIAR\/SRTM90_V4')# Shuttle Radar Topography mission covers *most* of the Earth\nalt = SRTM.reduceRegion(reducer = ee.Reducer.mean(),geometry = geom.centroid()).get('elevation').getInfo()\nkm = alt\/1000 # i.e. Py6S uses units of kilometers","286584e2":"# Instantiate\ns = SixS()\n\n# Atmospheric constituents\ns.atmos_profile = AtmosProfile.UserWaterAndOzone(h2o,o3)\ns.aero_profile = AeroProfile.Continental\ns.aot550 = aot\n\n# Earth-Sun-satellite geometry\ns.geometry = Geometry.User()\ns.geometry.view_z = 0               # always NADIR (I think..)\ns.geometry.solar_z = solar_z        # solar zenith angle\ns.geometry.month = scene_date.month # month and day used for Earth-Sun distance\ns.geometry.day = scene_date.day     # month and day used for Earth-Sun distance\ns.altitudes.set_sensor_satellite_level()\ns.altitudes.set_target_custom_altitude(km)","ba3691a8":"def spectralResponseFunction(bandname):\n    \"\"\"\n    Extract spectral response function for given band name\n    \"\"\"\n\n    bandSelect = {\n        'B1':PredefinedWavelengths.S2A_MSI_01,\n        'B2':PredefinedWavelengths.S2A_MSI_02,\n        'B3':PredefinedWavelengths.S2A_MSI_03,\n        'B4':PredefinedWavelengths.S2A_MSI_04,\n        'B5':PredefinedWavelengths.S2A_MSI_05,\n        'B6':PredefinedWavelengths.S2A_MSI_06,\n        'B7':PredefinedWavelengths.S2A_MSI_07,\n        'B8':PredefinedWavelengths.S2A_MSI_08,\n        'B8A':PredefinedWavelengths.S2A_MSI_8A,\n        'B9':PredefinedWavelengths.S2A_MSI_09,\n        'B10':PredefinedWavelengths.S2A_MSI_10,\n        'B11':PredefinedWavelengths.S2A_MSI_11,\n        'B12':PredefinedWavelengths.S2A_MSI_12,\n        }\n    \n    return Wavelength(bandSelect[bandname])","76db31b1":"def toa_to_rad(bandname):\n    \"\"\"\n    Converts top of atmosphere reflectance to at-sensor radiance\n    \"\"\"\n    \n    # solar exoatmospheric spectral irradiance\n    ESUN = info['SOLAR_IRRADIANCE_'+bandname]\n    solar_angle_correction = math.cos(math.radians(solar_z))\n    \n    # Earth-Sun distance (from day of year)\n    doy = scene_date.timetuple().tm_yday\n    d = 1 - 0.01672 * math.cos(0.9856 * (doy-4))# http:\/\/physics.stackexchange.com\/questions\/177949\/earth-sun-distance-on-a-given-day-of-the-year\n   \n    # conversion factor\n    multiplier = ESUN*solar_angle_correction\/(math.pi*d**2)\n\n    # at-sensor radiance\n    rad = toa.select(bandname).multiply(multiplier)\n    \n    return rad","2fb178f6":"def surface_reflectance(bandname):\n    \"\"\"\n    Calculate surface reflectance from at-sensor radiance given waveband name\n    \"\"\"\n    \n    # run 6S for this waveband\n    s.wavelength = spectralResponseFunction(bandname)\n    s.run()\n    \n    # extract 6S outputs\n    Edir = s.outputs.direct_solar_irradiance             #direct solar irradiance\n    Edif = s.outputs.diffuse_solar_irradiance            #diffuse solar irradiance\n    Lp   = s.outputs.atmospheric_intrinsic_radiance      #path radiance\n    absorb  = s.outputs.trans['global_gas'].upward       #absorption transmissivity\n    scatter = s.outputs.trans['total_scattering'].upward #scattering transmissivity\n    tau2 = absorb*scatter                                #total transmissivity\n    \n    # radiance to surface reflectance\n    rad = toa_to_rad(bandname)\n    ref = rad.subtract(Lp).multiply(math.pi).divide(tau2*(Edir+Edif))\n    \n    return ref","6fe74651":"# Use this if you only need surface reflectance of rgb channel\nb = surface_reflectance('B2')\ng = surface_reflectance('B3')\nr = surface_reflectance('B4')\nref = r.addBands(g).addBands(b)\n\n# # Calculate surface reflectance for all wavebands\n# output = S2.select('QA60')\n# for band in ['B1','B2','B3','B4','B5','B6','B7','B8','B8A','B9','B10','B11','B12']:\n#     print(band)\n#     output = output.addBands(surface_reflectance(band))","3ba05f3a":"from IPython.display import display, Image\n\nregion = geom.buffer(5000).bounds().getInfo()['coordinates']\nchannels = ['B4','B3','B2']\n\noriginal = Image(url=toa.select(channels).getThumbUrl({\n                'region':region,\n                'min':0,\n                'max':0.15\n                }))\n\ncorrected = Image(url=ref.select(channels).getThumbUrl({\n                'region':region,\n                'min':0,\n                'max':0.15\n                }))\n\ndisplay(original, corrected)","0c3f310a":"# # set some properties for export\ndateString = scene_date.strftime(\"%Y-%m-%d\")\nref = ref.set({'satellite':'Sentinel 2',\n              'fileID':info['system:index'],\n              'date':dateString,\n              'aerosol_optical_thickness':aot,\n              'water_vapour':h2o,\n              'ozone':o3})","cbd10906":"# Define YOUR Google Earth Engine assetID \n# in my case it was something like this..\nassetID = 'users\/ridhodwid\/S2A_SR_yogya_'+dateString","b18e3a3e":"# # export\nexport = ee.batch.Export.image.toAsset(\\\n    image=ref,\n    description='sentinel2_atmcorr_export',\n    assetId = assetID,\n    region = region)\n\n# # uncomment to run the export\nexport.start() ","7ec0604e":"### Choose clearest image in a year \nThe following code will grab the first scene of clearest image in a year (Example 2018)","4f7fdee1":"### Atmospheric constituents","a641fd36":"### Radiance to Surface Reflectance\n\nReflected sunlight can be described as follows (wavelength dependence is implied):\n\n$ L = \\tau\\rho(E_{dir} + E_{dif})\/\\pi + L_p$\n\nwhere L is at-sensor radiance, $\\tau$ is transmissivity, $\\rho$ is surface reflectance, $E_{dir}$ is direct solar irradiance, $E_{dif}$ is diffuse solar irradiance and $L_p$ is path radiance. There are five unknowns in this equation, 4 atmospheric terms ($\\tau$, $E_{dir}$, $E_{dif}$ and $L_p$) and surface reflectance. The 6S radiative transfer code is used to solve for the atmospheric terms, allowing us to solve for surface reflectance.\n\n$ \\rho = \\pi(L - L_p) \/ \\tau(E_{dir} + E_{dif}) $","43b22c7a":"# Sentinel 2 Atmospheric Correction in Google Earth Engine","642a99ea":"### TOA Reflectance to Radiance\n\nSentinel 2 data is provided as top-of-atmosphere reflectance. Lets convert this to at-sensor radiance for the atmospheric correction.*\n\n\\*<sub>You *can* atmospherically corrected directly from TOA reflectance. However, I suggest radiance for a couple of reasons.\n  Firstly, it is more intuitive. Instead of *spherical albedo* (which I suspect is more of a mathematical convenience than a physical property) you can use solar irradiance, transmissivity, path radiance, etc. Secondly, Py6S seems to be more geared towards converting from radiance to SR<\/sup>\n\n\n\n","25db35de":"### Atmospheric Correction","28c40c40":"### Installing Py6s using conda-forge channel\nIts reccomended using package from conda-forge, don't use pip","46f10fd5":"### 6S object\n\nThe backbone of Py6S is the 6S (i.e. SixS) class. It allows you to define the various input parameters, to run the radiative transfer code and to access the outputs which are required to convert radiance to surface reflectance.","9913cbb6":"### Location Coordinate of Study Area\nDefine the location that you are looking for.","df97c0da":"### Calculate target altitude in km","a702e3d3":"### Authorize Google Earth Engine API","ed8fa7d1":"### Export to Asset","d6b0b43a":"### Clone Repo","0c9d348c":"### Display results","90e2974d":"### Spectral Response functions","325c7438":"### Import modules \nImport require module and initialize Earth Engine","66205ddb":"Py6S uses the Wavelength class to handle the wavelength(s) associated with a given channel (a.k.a. waveband). This might be a single scalar value (e.g. a central wavelength) or, if known, possibly the spectral response function of the waveband. The Sentinel 2 spectral response functions are provided with Py6S (as well as those of a number of missions). For more details please see the [docs](http:\/\/py6s.readthedocs.io\/en\/latest\/params.html#wavelengths) or the (comment-rich) [source code](https:\/\/github.com\/robintw\/Py6S\/blob\/master\/Py6S\/Params\/wavelength.py)","b33d7ccb":"### Get Metadata"}}