{"cell_type":{"56189032":"code","78964365":"code","f8c213c4":"code","b7e723c6":"code","c1de868e":"code","7ae6dd92":"code","cb77812d":"code","f9416c2e":"code","dc111505":"code","550a6bc7":"code","6505a01e":"code","6024e766":"code","cb24a81d":"code","c7805bc2":"code","cc46b168":"code","ed97d57b":"code","de9e425b":"code","bfc140f5":"code","e1879747":"code","7b58de7c":"code","6ef37f6a":"code","b3d7df4b":"code","6636f4b6":"code","1261936f":"code","bcb461c7":"code","bba3e45c":"code","50acce54":"code","2131ffa3":"code","29d2bcbc":"code","dbd712ef":"code","0f4db301":"code","4ca11da1":"code","21950d8e":"markdown","9780f025":"markdown","27eade11":"markdown","8a5e760e":"markdown","d6734c4a":"markdown","82d00844":"markdown","573940e9":"markdown","460f7c94":"markdown","0a7fc307":"markdown"},"source":{"56189032":"! pip install dataprep\n! pip install -U pandas_profiling\n! pip install sweetviz","78964365":"! pip install -U lightautoml\n! pip install h2o","f8c213c4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","b7e723c6":"from dataprep.eda import create_report, plot, plot_missing, plot_correlation\nfrom pandas_profiling import ProfileReport\nimport sweetviz","c1de868e":"from lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\nfrom sklearn.metrics import accuracy_score, f1_score\nimport torch\n\nimport h2o\nfrom h2o.automl import H2OAutoML","7ae6dd92":"! ls ..\/input\/titanic","cb77812d":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\ndf_all = pd.concat([df_train, df_test], axis=0, ignore_index=True)","f9416c2e":"def eda(df):\n  '''\n  this is a simple function to eda the data\n  '''\n  print('-'*20, 'eda begin', '-'*20)\n  print('common info')\n  df.info()\n  print('-'*40)\n\n  print('missing value')\n  if df.isna().sum().sum()==0:\n    print('there is not missing values in this dataset')\n  else:\n    print('detected')\n    display(df.isna().sum())\n  print('-'*40)\n\n  print('categorical columns')\n  print('total:', len(df.select_dtypes(include='O').columns))\n  display(df.select_dtypes(include='O').columns)\n  try:\n    display(df.describe(include='O'))\n  except:\n    print('there is no categorical feature in this dataset to display')\n  print('-'*40)\n\n  print('continuous columns')\n  print('total:', len(df.select_dtypes(exclude='O').columns))\n  display(df.select_dtypes(exclude='O').columns)\n  try:\n    display(df.describe(exclude='O'))\n  except:\n    print('there is no continuous feature in this dataset to display')\n  print('-'*40)\n\n  print('duplicated rows')\n  if df.duplicated().sum()==0:\n    print('there is not duplicated rows in this dataset')\n  else:\n    print('detected')\n    display(df[df.duplicated()])\n  print('-'*40)\n\n  print('simple rows')\n  display(df.head(5))\n  print('-'*20, 'eda end', '-'*20)","dc111505":"eda(df_train)","550a6bc7":"eda(df_test)","6505a01e":"%%time\ncreate_report(df_train, title='train dataset dataprep')","6024e766":"%%time\ncreate_report(df_test, title='test dataset dataprep')","cb24a81d":"%%time\nProfileReport(df_train, title='train dataset pandas profile report').to_notebook_iframe()","c7805bc2":"%%time\nProfileReport(df_test, title='test dataset pandas profile report').to_notebook_iframe()","cc46b168":"%%time\nsweetviz.analyze(df_train).show_notebook()","ed97d57b":"%%time\nsweetviz.compare([df_train, 'Train'], [df_test, 'Test'], 'Survived').show_notebook()","de9e425b":"def fix_missing(df):\n  df.Cabin = df.Cabin.fillna('Nan').str[0]\n\n  df.Ticket = df.Ticket.fillna('X').apply(lambda x:str(x).split()[0])\n\n  pclass_age_map = df.loc[:, ['Pclass', 'Age']].groupby('Pclass').mean().to_dict()\n  df.Age = df.Age.mask(df.Age.isna(), df.Pclass.map(pclass_age_map['Age']))\n\n  df.Embarked = df.Embarked.fillna('X')\n\n  pclass_fare_map = df.loc[:, ['Pclass', 'Fare']].groupby('Pclass').mean().to_dict()\n  df.Fare = df.Fare.mask(df.Fare.isna(), df.Pclass.map(pclass_fare_map['Fare']))\n\n  return df","bfc140f5":"df_train = fix_missing(df_train)\ndf_test = fix_missing(df_test)\nprint(df_train.isna().sum().sum())\nprint(df_test.isna().sum().sum())","e1879747":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 300 # Time in seconds for automl run\n\nnp.random.seed(RANDOM_STATE)\ntorch.set_num_threads(N_THREADS)","7b58de7c":"def acc_score(y_true, y_pred, **kwargs):\n  return accuracy_score(y_true, (y_pred>0.5).astype(int), **kwargs)\ndef f1_metrics(y_true, y_pred, **kwargs):\n  return f1_score(y_true, (y_pred>0.5).astype(int), **kwargs)\n\ntask = Task('binary', metric=f1_metrics)\n\nroles = {\n    'target':'Survived',\n    'drop':['PassengerId', 'Name', 'Ticket']\n}","6ef37f6a":"%%time\nlight_auto_ml = TabularUtilizedAutoML(\n    task=task,\n    timeout=TIMEOUT,\n    cpu_limit=N_THREADS,\n    general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n    reader_params = {'n_jobs': N_THREADS}\n)\noof_preds = light_auto_ml.fit_predict(df_train, roles=roles)","b3d7df4b":"%%time\ntest_pred = light_auto_ml.predict(df_test)","6636f4b6":"df_sub.Survived = (test_pred.data>0.5).astype(int)","1261936f":"df_sub.to_csv('kaggle_titanic_light_automl_submission.csv', index=False)","bcb461c7":"h2o.init()","bba3e45c":"hf_train = h2o.H2OFrame(df_train.copy())\nhf_test = h2o.H2OFrame(df_test.copy())\nhf_train['Survived'] = hf_train['Survived'].asfactor()\n","50acce54":"feature_cols = df_train.drop(['PassengerId', 'Survived'], axis=1).columns.to_list()\ntarget_col = 'Survived'","2131ffa3":"%%time\nh2o_automl = H2OAutoML(\n    seed=42,\n    nfolds=3,\n    max_runtime_secs = 300,\n    exclude_algos=['DeepLearning']\n)\nh2o_automl.train(x=feature_cols, y=target_col, training_frame=hf_train)","29d2bcbc":"lb = h2o_automl.leaderboard\nlb.head(rows = lb.nrows)","dbd712ef":"test_preds = h2o_automl.predict(hf_test)\ntest_preds_df = h2o.as_list(test_preds)","0f4db301":"df_sub.Survived = test_preds_df.predict","4ca11da1":"df_sub.to_csv('kaggle_titanic_h2o_automl_submission.csv', index=False)","21950d8e":"# eda\nin this part let us do the eda job","9780f025":"# feature enginnering\nin this part let us do some feature enginner job to prepare and clear the data","27eade11":"# h2oautoml","8a5e760e":"# lib&data\nin this part let us prepare our envirmoment","d6734c4a":"## typical eda","82d00844":"## pandas profiling","573940e9":"## sweetviz","460f7c94":"## dataprep","0a7fc307":"# lightautoml\nin this part we use the lightautom model to build, train, predict"}}