{"cell_type":{"75b39ffd":"code","95aa340c":"code","60db8280":"code","e339c2dc":"code","204c98de":"code","99a8aba8":"code","d8284478":"code","783a79e4":"code","121a8916":"code","65062f0c":"code","96520e8a":"code","11f0e9d7":"code","33bfd19f":"code","98c1d2cd":"code","7eb6691e":"code","037914cc":"code","fbf8a115":"markdown","27731581":"markdown","292e5af6":"markdown","2fb9d979":"markdown","a32a3ce5":"markdown","3498ccca":"markdown"},"source":{"75b39ffd":"import pandas as pd\n\ntrain = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')","95aa340c":"res = train.isnull().sum()\nprint(res[70:])","60db8280":"train.LotFrontage = train.LotFrontage.fillna(0)\ntrain.Alley = train.Alley.fillna('None')\ntrain.MasVnrType = train.MasVnrType.fillna('None')\ntrain.MasVnrArea = train.MasVnrArea.fillna(0)\ntrain.BsmtQual = train.BsmtQual.fillna('noBsm')\ntrain.BsmtCond = train.BsmtCond.fillna('noBsm')\ntrain.BsmtExposure = train.BsmtExposure.fillna('noBsm')\ntrain.BsmtFinType1 = train.BsmtFinType1.fillna('noBsm')\ntrain.BsmtFinType2 = train.BsmtFinType2.fillna('noBsm')\ntrain.Electrical = train.Electrical.fillna('noEle')\ntrain.FireplaceQu = train.FireplaceQu.fillna('noFire')\ntrain.GarageType = train.GarageType.fillna('noGar')\ntrain.GarageYrBlt = train.GarageYrBlt.fillna('noGar')\ntrain.GarageFinish = train.GarageFinish.fillna('noGar')\ntrain.GarageQual = train.GarageQual.fillna('noGar')\ntrain.GarageCond = train.GarageCond.fillna('noGar')\ntrain.PoolQC = train.PoolQC.fillna('noPool')\ntrain.Fence = train.Fence.fillna('noFen')\ntrain.MiscFeature = train.MiscFeature.fillna('noMisc')","e339c2dc":"train[['PoolArea', 'PoolQC', 'Fence', 'MiscFeature', 'MiscVal']][108:]","204c98de":"import binascii\n\nfor col in train.columns[2:]:\n    for i in range(len(train[col])):\n        if type(train[col][i])==type(str()):\n            train[col][i] = int(train[col][i].encode().hex(),16)","99a8aba8":"y = train.SalePrice\nX = train[train.columns[1:-1]]","d8284478":"from sklearn.model_selection import train_test_split\ntrain_X, test_X, train_y, test_y = train_test_split(X,y)","783a79e4":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_log_error\nimport random\n\nmodel = DecisionTreeRegressor()\n\nfeatures = []\nfor item in X.columns:\n    features += [item]\n\nmodel.fit(train_X, train_y)\npreds = model.predict(test_X)\nmin_err = mean_squared_log_error(test_y, preds)\n\ncount = 0\n\nwhile count <= 0xffffffff:\n    # feeding data with candidate 'features'\n    num = random.randint(1,79)\n    tmp_features = random.sample(features, num)\n\n    tmp_train_X = train_X[tmp_features]\n    model.fit(tmp_train_X, train_y)\n    # perform test\n    tmp_test_X = test_X[tmp_features]\n    preds = model.predict(tmp_test_X)\n    msle = mean_squared_log_error(test_y, preds)\n    # apply the test result\n    if min_err > msle:\n        min_err = msle\n        min_features = tmp_features\n        count = 0\n    else:\n        count += 1\n\nfeatures = min_features\nprint(features)\nmodel.fit(train_X[features], train_y)\nprint(min_err)","121a8916":"print(len(features))","65062f0c":"test.MSZoning = test.MSZoning.fillna(-1)\ntest.Exterior1st = test.Exterior1st.fillna(-1)\ntest.BsmtFullBath = test.BsmtFullBath.fillna(-1)\ntest.BsmtHalfBath = test.BsmtHalfBath.fillna(-1)\ntest.TotalBsmtSF = test.TotalBsmtSF.fillna(-1)\ntest.KitchenQual = test.KitchenQual.fillna(-1)\ntest.LotFrontage = test.LotFrontage.fillna(0)\ntest.Alley = test.Alley.fillna('None')\ntest.MasVnrType = test.MasVnrType.fillna('None')\ntest.MasVnrArea = test.MasVnrArea.fillna(0)\ntest.BsmtQual = test.BsmtQual.fillna('noBsm')\ntest.BsmtCond = test.BsmtCond.fillna('noBsm')\ntest.BsmtExposure = test.BsmtExposure.fillna('noBsm')\ntest.BsmtFinType1 = test.BsmtFinType1.fillna('noBsm')\ntest.BsmtFinType2 = test.BsmtFinType2.fillna('noBsm')\ntest.Electrical = test.Electrical.fillna('noEle')\ntest.FireplaceQu = test.FireplaceQu.fillna('noFire')\ntest.GarageType = test.GarageType.fillna('noGar')\ntest.GarageYrBlt = test.GarageYrBlt.fillna('noGar')\ntest.GarageFinish = test.GarageFinish.fillna('noGar')\ntest.GarageQual = test.GarageQual.fillna('noGar')\ntest.GarageCond = test.GarageCond.fillna('noGar')\ntest.PoolQC = test.PoolQC.fillna('noPool')\ntest.Fence = test.Fence.fillna('noFen')\ntest.MiscFeature = test.MiscFeature.fillna('noMisc')","96520e8a":"import binascii\n\nfor col in test.columns:\n    for i in range(len(test[col])):\n        if type(test[col][i])==type(str()):\n            test[col][i] = int(test[col][i].encode().hex(),16)","11f0e9d7":"test[features].isnull().sum()","33bfd19f":"print(len(features))\nX_test = test[features]\npreds = model.predict(X_test)","98c1d2cd":"submission = pd.read_csv('..\/input\/home-data-for-ml-course\/sample_submission.csv')\nsubmission.head()","7eb6691e":"submission.SalePrice = preds","037914cc":"submission.to_csv('submission_2.csv', index=False)","fbf8a115":"filling NaN","27731581":"making submission","292e5af6":"convert string to int","2fb9d979":"## import pandas as pd\n\n","a32a3ce5":"find out what is the best 'features'","3498ccca":"preparing for the test"}}