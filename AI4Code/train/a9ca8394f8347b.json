{"cell_type":{"7c411a82":"code","a0f7393e":"code","1235f35e":"code","fe381177":"code","91f47061":"code","802650cc":"code","a1b35fb7":"code","7ee29786":"code","ae0504e8":"code","c69f680f":"markdown","622d7adf":"markdown"},"source":{"7c411a82":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\nsub = None\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/subs20191106\/'):\n    for filename in filenames:\n        filename = os.path.join(dirname, filename)\n        print(filename)\n        if sub is None:\n            sub = pd.read_csv(filename)\n        else:\n            sub.meter_reading += pd.read_csv(filename, usecols=['meter_reading']).meter_reading\n    sub.meter_reading = sub.meter_reading.clip(lower=0) \/ len(filenames)\n\nsub.describe()","a0f7393e":"# prediction's log-log histogram:\nax = np.log1p(sub.meter_reading).hist(bins=100)\nax.set_yscale('log')","1235f35e":"path = '..\/input\/clean-weather-data-eda'\nbuilding = pd.read_csv(f'{path}\/building_metadata.csv.gz', dtype={'building_id':np.uint16, 'site_id':np.uint8})","fe381177":"train = pd.read_csv(f'{path}\/train.csv.gz', dtype={'building_id':np.uint16, 'meter':np.uint8}, parse_dates=['timestamp'])\ntrain = train.merge(building, on='building_id', how='left')\ntrain.head()","91f47061":"# target's log-log histogram:\nax = np.log1p(train.meter_reading).hist(bins=100)\nax.set_yscale('log')","802650cc":"test = pd.read_csv(f'{path}\/test.csv.gz', dtype={'building_id':np.uint16, 'meter':np.uint8}, parse_dates=['timestamp'])\ntest['meter_reading'] = sub.meter_reading\ntest = test.merge(building, on='building_id', how='left')\ntest.head()","a1b35fb7":"weather_trn = pd.read_csv(f'{path}\/weather_train.csv.gz', parse_dates=['timestamp'],\n                                                       dtype={'site_id':np.uint8, 'air_temperature':np.float16},\n                                                       usecols=['site_id', 'timestamp', 'air_temperature'])\nweather_tst = pd.read_csv(f'{path}\/weather_test.csv.gz', parse_dates=['timestamp'],\n                                                       dtype={'site_id':np.uint8, 'air_temperature':np.float16},\n                                                       usecols=['site_id', 'timestamp', 'air_temperature'])\ntrain = train.merge(weather_trn, on=['site_id', 'timestamp'], how='left')\ntest = test.merge(weather_tst, on=['site_id', 'timestamp'], how='left')","7ee29786":"building_id = 1258\nmeter = 1 # pick a meter\n\ntrain_sample = train[(train['building_id'] == building_id) & (train['meter'] == meter)]  # same train sample as above\ntest_sample = test[(test['building_id'] == building_id) & (test['meter'] == meter)]  # and the same meter in the test set\n\nfig, ax = plt.subplots(figsize=(16,4))\nplt.title(f'Building {building_id} Meter {meter}')\nax.xaxis.set_tick_params(rotation=30, labelsize=10)\nax2 = ax.twinx()\n\n# plot training sample\ndates = matplotlib.dates.date2num(train_sample['timestamp'])\nax2.plot_date(dates, train_sample['meter_reading'], '-', label='train', alpha=0.8)\nax.plot_date(dates, train_sample['air_temperature'], '.', color='tab:cyan', label='air_temperature')\n\n# plot test sample\ndates = matplotlib.dates.date2num(test_sample['timestamp'])\nax2.plot_date(dates, test_sample['meter_reading'], '*', label='test', alpha=0.8)\nax.plot_date(dates, test_sample['air_temperature'], '.', color='tab:cyan', label='air_temperature')\n\nax.set_ylabel('air_temperature'); ax2.set_ylabel('meter_reading')\nax.legend(loc='upper left'); ax2.legend(loc='upper right')","ae0504e8":"sub.to_csv(f'submission.csv', index=False, float_format='%g')","c69f680f":"### Conclusions?\nIt looks like the models fail to predict the extremes, as both very low and very high values don't appear in the histograms","622d7adf":"# A late night ensemble of the best public kernels\n* You can also see a sample meter below, using the [clean weather data](https:\/\/www.kaggle.com\/hmendonca\/clean-weather-data-eda)\n\nKernels:\n* https:\/\/www.kaggle.com\/rohanrao\/ashrae-half-and-half\n* https:\/\/www.kaggle.com\/kimtaegwan\/what-s-your-cv-method\n* https:\/\/www.kaggle.com\/nz0722\/aligned-timestamp-lgbm-by-meter-type\n* https:\/\/www.kaggle.com\/isaienkov\/keras-nn-with-embeddings-for-cat-features-1-15"}}