{"cell_type":{"4c1f91b7":"code","041dd175":"code","4a3c5535":"code","77b63d81":"code","558fb604":"code","4d501eb9":"code","9308b8c3":"code","021be761":"code","08412491":"code","a6c669e6":"code","63cffe70":"code","e8b24068":"code","8acdcfac":"code","40611688":"code","41e19320":"markdown","08210b8c":"markdown","e0e48e30":"markdown","fdf2e076":"markdown","5dc92ab5":"markdown","ac8d82e0":"markdown","7b5ce800":"markdown","4f65c2f0":"markdown"},"source":{"4c1f91b7":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\n\ndef proc_img(filepath):\n    \"\"\" Create a DataFrame with the filepath and the labels of the pictures\n    \"\"\"\n\n    labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepath))\n\n    filepath = pd.Series(filepath, name='Filepath').astype(str)\n    labels = pd.Series(labels, name='Label')\n\n    # Concatenate filepaths and labels\n    df = pd.concat([filepath, labels], axis=1)\n\n    # Shuffle the DataFrame and reset index\n    df = df.sample(frac=1).reset_index(drop = True)\n    \n    return df\n\n# Create a list with the filepaths\ntrain_dir = Path('..\/input\/the-simpsons-characters-dataset\/simpsons_dataset')\nfilepaths = list(train_dir.glob(r'**\/*.jpg'))\n\n# Create a DataFrame with the filepaths and the labels of the picture\ndf = proc_img(filepaths)\n\nprint(f'Number of pictures: {df.shape[0]}\\n')\nprint(f'Number of different labels: {len(df.Label.unique())}\\n')\nprint(f'Labels: {df.Label.unique()}')\n\n# The DataFrame with the filepaths in one column and the labels in the other one\ndf.head(5)","041dd175":"# Create a DataFrame with one Label of each category\ndf_unique = df.copy().drop_duplicates(subset=[\"Label\"]).reset_index()\n\n# Display 40 picture of the dataset\nfig, axes = plt.subplots(nrows=4, ncols=10, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(df_unique.Filepath[i]))\n#     ax.set_title(df_unique.Label[i])\nplt.tight_layout(pad=0.5)\nplt.show()","4a3c5535":"# Separate in train and test data\ntrain_df, test_df = train_test_split(df, train_size=0.8, shuffle=True, random_state=0)","77b63d81":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n    validation_split=0.2\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)","558fb604":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='training',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='validation',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)","4d501eb9":"# Load the pretained model\npretrained_model = tf.keras.applications.MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\n\npretrained_model.trainable = False","9308b8c3":"inputs = pretrained_model.input\n\nx = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\n\noutputs = tf.keras.layers.Dense(42, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=50,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=5,\n            restore_best_weights=True\n        )\n    ]\n)","021be761":"pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()","08412491":"pd.DataFrame(history.history)[['loss','val_loss']].plot()\nplt.title(\"Loss\")\nplt.show()","a6c669e6":"# Predict the label of the test_images\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_images.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]\n\n# Display the result\nprint(f'The first 5 predictions: {pred[:5]}')","63cffe70":"from sklearn.metrics import accuracy_score\ny_test = list(test_df.Label)\nacc = accuracy_score(y_test,pred)\nprint(f'Accuracy on the test set: {acc * 100:.2f}%')","e8b24068":"from sklearn.metrics import classification_report\nclass_report = classification_report(y_test, pred, zero_division=1)\nprint(class_report)","8acdcfac":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncf_matrix = confusion_matrix(y_test, pred, normalize='true')\nplt.figure(figsize = (20,15))\nsns.heatmap(cf_matrix, annot=False, xticklabels = sorted(set(y_test)), yticklabels = sorted(set(y_test)))\nplt.title('Normalized Confusion Matrix', fontsize = 23)\nplt.show()","40611688":"# Display 15 picture of the dataset with their labels\nfig, axes = plt.subplots(nrows=4, ncols=5, figsize=(15, 12),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(test_df.Filepath.iloc[i]))\n    ax.set_title(f\"True: {test_df.Label.iloc[i].split('_')[0]}\\nPredicted: {pred[i].split('_')[0]}\")\nplt.tight_layout()\nplt.show()","41e19320":"# Teach a neural network to recognize the Simpsons\n\nUsing around 42000 pictures of 42 characters of the Simpsons to teach the neural network and testing the result on pictures it hasn't seen before.\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/en\/c\/ca\/Simpsons_cast.png\"> ","08210b8c":"# 2. Load the Images with a generator<a class=\"anchor\" id=\"2\"><\/a>","e0e48e30":"# 5. Examples of prediction<a class=\"anchor\" id=\"5\"><\/a>\n","fdf2e076":"## <u>Visualize 40 pictures<\/u>","5dc92ab5":"# 1. Data preprocessing and visualization<a class=\"anchor\" id=\"1\"><\/a>","ac8d82e0":"# 4. Visualize the result<a class=\"anchor\" id=\"4\"><\/a>","7b5ce800":"# 3. Train the model<a class=\"anchor\" id=\"3\"><\/a>\n","4f65c2f0":"# Table of contents\n\n[<h3>1. Data preprocessing and visualization<\/h3>](#1)\n\n[<h3>2. Load the Images with a generator<\/h3>](#2)\n\n[<h3>3. Train the model<\/h3>](#3)\n\n[<h3>4. Visualize the result<\/h3>](#4)\n\n[<h3>5. Example of predictions<\/h3>](#5)"}}