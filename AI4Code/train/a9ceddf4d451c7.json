{"cell_type":{"a8cae21f":"code","a2c8ebe8":"code","f00c8500":"code","675cfa82":"code","38bed323":"code","b7c2bf56":"code","59539ea9":"code","a652ed43":"code","ea1dbf87":"code","38de34f3":"code","588d74c5":"code","55187b8e":"code","38fa0eab":"code","29c26ee7":"code","7437c291":"code","d53b6cd6":"code","5b1664f5":"code","47f2dcd1":"code","e22d6104":"code","a7b3e745":"code","8e8dc02f":"code","0638f836":"code","e4ec63d5":"code","486eeb74":"code","af4a9793":"code","83c6e0ad":"code","53fedb7e":"code","1acafa43":"code","07ccb120":"code","61bc2ada":"code","f808a8d9":"code","5a676ae0":"code","4f7793c2":"code","dbe6f574":"code","17b20cd5":"code","0faf6769":"code","1e8ea94d":"code","c248bd3e":"markdown","112227c2":"markdown","acaac721":"markdown","06b8e505":"markdown","694f3f2c":"markdown","febe6d7a":"markdown","bce3b84d":"markdown","00564b95":"markdown","01a7304e":"markdown","c89baf47":"markdown","95bdad0d":"markdown","f8fad89b":"markdown","6a064d4f":"markdown","8e697c25":"markdown","0dc06e4d":"markdown","fb4b0b97":"markdown","6f93f999":"markdown","2d668847":"markdown","e98479dc":"markdown","97a531f9":"markdown","91238789":"markdown","b6b36675":"markdown","2789eec2":"markdown","e95a5628":"markdown","743a8e48":"markdown","e7cd6d68":"markdown","8a3219a1":"markdown","ff0445a5":"markdown","2166408e":"markdown","c844ea7a":"markdown","9df31159":"markdown","38c4e439":"markdown","ddefa68a":"markdown"},"source":{"a8cae21f":"import pandas as pd\nimport numpy as np\nimport math\nimport re\nfrom scipy.sparse import csr_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom surprise import Reader, Dataset, SVD, evaluate\nsns.set_style(\"darkgrid\")\nfrom sklearn.model_selection import train_test_split # function for splitting data to train and test sets\n\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.classify import SklearnClassifier\n\nfrom wordcloud import WordCloud,STOPWORDS\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer","a2c8ebe8":"df = pd.read_csv('..\/input\/amazon\/Amazon_Instant_Video_5.csv')\nprint('Dataset 1 shape {}'.format(df.shape))\nprint('-Database examples-')\nprint(df.iloc[:550, :])","f00c8500":"text = df['reviewText']\ntext = text.head(550)\nprint(text)","675cfa82":"overall = df['overall']\noverall = overall.head(550)\nprint(overall)","38bed323":"dfList = text.tolist()\ntricky_sentences = []\nfor i in range(len(dfList)):\n    tricky_sentences.append(dfList[i])\nprint(tricky_sentences)\n","b7c2bf56":"#sentences.extend(tricky_sentences)\nallOverall = []\nallScore = []\nsid = SentimentIntensityAnalyzer()\ncounter = 0\nfor sentence in tricky_sentences:\n    #print(sentence)\n    ss = sid.polarity_scores(str(sentence))\n    #for k in sorted(ss):\n    if float(ss['compound']) >0:\n        #round up numbers to 1 which are greater than 0\n        ss['compound'] = '1'\n    elif float(ss['compound']) < 0:\n        #round down numbers to -1 which are less than 0\n        ss['compound'] = '-1'\n    elif float(ss['compound']) == 0:\n        #change the data type of 0\n        ss['compound'] = '0'\n    #append scores to a list\n    allScore.append(ss['compound'])\n    #append overall stars to a list\n    allOverall.append(overall[counter])\n        #print('{0}: {1}, '.format(k, ss[k]), end='')\n    counter = counter + 1\n    \nprint(allScore)\nprint(allOverall)","59539ea9":"#counter for positive scores\nPcounter = 0\n#counter for negative scores\nNcounter = 0\n\nfor i in range(len(allScore)):\n    if int(allScore[i]) > 0:\n        #counting the positive scores\n        Pcounter = Pcounter +1\n    elif int(allScore[i]) < 0:\n        #counting the negative scores\n        Ncounter = Ncounter +1\n\nprint(\"Postive numbers :  \" + str(Pcounter))\nprint(\"Negtive numbers :  \" + str(Ncounter))\n\n#td=(SPd\/(SPd+SNd))*RS\ntd = (Pcounter\/(Pcounter+Ncounter))*5\n\nprint(\"Mean :  \" + str(td))\n        ","a652ed43":"df = pd.read_csv('..\/input\/amazon-products\/Baby_5.csv')\nprint('Dataset 1 shape {}'.format(df.shape))\nprint('-Database examples-')\nprint(df.iloc[:550, :])","ea1dbf87":"text = df['reviewText']\ntext = text.head(550)\nprint(text)","38de34f3":"overall = df['overall']\noverall = overall.head(550)\nprint(overall)","588d74c5":"dfList = text.tolist()\ntricky_sentences = []\nfor i in range(len(dfList)):\n    tricky_sentences.append(dfList[i])\nprint(tricky_sentences)","55187b8e":"#sentences.extend(tricky_sentences)\nallOverall = []\nallScore = []\nsid = SentimentIntensityAnalyzer()\ncounter = 0\nfor sentence in tricky_sentences:\n    #print(sentence)\n    ss = sid.polarity_scores(str(sentence))\n    #for k in sorted(ss):\n    if float(ss['compound']) >0:\n        #round up numbers to 1 which are greater than 0\n        ss['compound'] = '1'\n    elif float(ss['compound']) < 0:\n        #round down numbers to -1 which are less than 0\n        ss['compound'] = '-1'\n    elif float(ss['compound']) == 0:\n        #change the data type of 0\n        ss['compound'] = '0'\n    #append scores to a list\n    allScore.append(ss['compound'])\n    #append overall stars to a list\n    allOverall.append(overall[counter])\n        #print('{0}: {1}, '.format(k, ss[k]), end='')\n    counter = counter + 1\n    \nprint(allScore)\nprint(allOverall)","38fa0eab":"#counter for positive scores\nPcounter = 0\n#counter for negative scores\nNcounter = 0\n\nfor i in range(len(allScore)):\n    if int(allScore[i]) > 0:\n        #counting the positive scores\n        Pcounter = Pcounter +1\n    elif int(allScore[i]) < 0:\n        #counting the negative scores\n        Ncounter = Ncounter +1\n\nprint(Pcounter)\nprint(Ncounter)\n\n#td=(SPd\/(SPd+SNd))*RS\ntd = (Pcounter\/(Pcounter+Ncounter))*5\n\nprint(td)","29c26ee7":"def sentimentAnalysis(name, path):\n    df = pd.read_csv(path)\n    #print('Dataset 1 shape {}'.format(df.shape))\n    #print('-Database examples-')\n    #print(df.iloc[:550, :])\n    \n    text = df['reviewText']\n    text = text.head(550)\n    #print(text)\n    \n    overall = df['overall']\n    overall = overall.head(550)\n    #print(overall)\n    \n    dfList = text.tolist()\n    tricky_sentences = []\n    for i in range(len(dfList)):\n        tricky_sentences.append(dfList[i])\n    #print(tricky_sentences)\n    \n    #sentences.extend(tricky_sentences)\n    allOverall = []\n    allScore = []\n    sid = SentimentIntensityAnalyzer()\n    counter = 0\n    for sentence in tricky_sentences:\n        #print(sentence)\n        ss = sid.polarity_scores(str(sentence))\n        #for k in sorted(ss):\n        if float(ss['compound']) >0:\n            #round up numbers to 1 which are greater than 0\n            ss['compound'] = 'positive'\n        elif float(ss['compound']) < 0:\n            #round down numbers to -1 which are less than 0\n            ss['compound'] = 'negative'\n        elif float(ss['compound']) == 0:\n            #change the data type of 0\n            ss['compound'] = 'neutral'\n        #append scores to a list\n        allScore.append(ss['compound'])\n        #append overall stars to a list\n        allOverall.append(overall[counter])\n            #print('{0}: {1}, '.format(k, ss[k]), end='')\n        counter = counter + 1\n    \n    print(name)\n    print(allScore)\n    #print(allOverall)","7437c291":"def printing(name, path):\n    df = pd.read_csv(path)\n    #print('Dataset 1 shape {}'.format(df.shape))\n    #print('-Database examples-')\n    #print(df.iloc[:550, :])\n    \n    text = df['reviewText']\n    text = text.head(550)\n    #print(text)\n    \n    overall = df['overall']\n    overall = overall.head(550)\n    #print(overall)\n    \n    dfList = text.tolist()\n    tricky_sentences = []\n    for i in range(len(dfList)):\n        tricky_sentences.append(dfList[i])\n    #print(tricky_sentences)\n    \n    #sentences.extend(tricky_sentences)\n    allOverall = []\n    allScore = []\n    sid = SentimentIntensityAnalyzer()\n    counter = 0\n    for sentence in tricky_sentences:\n        #print(sentence)\n        ss = sid.polarity_scores(str(sentence))\n        #for k in sorted(ss):\n        if float(ss['compound']) >0:\n            #round up numbers to 1 which are greater than 0\n            ss['compound'] = 'positive'\n        elif float(ss['compound']) < 0:\n            #round down numbers to -1 which are less than 0\n            ss['compound'] = 'negative'\n        elif float(ss['compound']) == 0:\n            #change the data type of 0\n            ss['compound'] = 'neutral'\n        #append scores to a list\n        allScore.append(ss['compound'])\n        #append overall stars to a list\n        allOverall.append(overall[counter])\n            #print('{0}: {1}, '.format(k, ss[k]), end='')\n        counter = counter + 1\n    \n    #print(allScore)\n    #print(allOverall)\n    \n    #counter for positive scores\n    Pcounter = 0\n    #counter for negative scores\n    Ncounter = 0\n\n    for i in range(len(allScore)):\n        if allScore[i] is 'positive':\n            #counting the positive scores\n            Pcounter = Pcounter +1\n        elif allScore[i] is 'negative':\n            #counting the negative scores\n            Ncounter = Ncounter +1\n\n    #print(Pcounter)\n    #print(Ncounter)\n\n    #td=(SPd\/(SPd+SNd))*RS\n    td = (Pcounter\/(Pcounter+Ncounter))*5\n    \n    #print(td)\n    \n    bts = df['overall'].mean()\n    #print(bts)\n    print(\"-----  brand  ------, ----  trust  ----, ----  rating  -----\")\n    \n    print('{0}, {1}, {2}'.format(name,td,bts))\n\n\n    ","d53b6cd6":"printing('Amazon_Instant_Video','..\/input\/amazon\/Amazon_Instant_Video_5.csv')\nsentimentAnalysis('Amazon_Instant_Video','..\/input\/amazon\/Amazon_Instant_Video_5.csv')","5b1664f5":"printing('Baby','..\/input\/amazon-products\/Baby_5.csv')","47f2dcd1":"printing('Digital_Music','..\/input\/amazon-products\/Digital_Music_5.csv')","e22d6104":"printing('Musical_Instruments','..\/input\/amazon-products\/Musical_Instruments_5.csv')","a7b3e745":"printing('Patio_Lawn_and_Garden','..\/input\/amazon-products\/Patio_Lawn_and_Garden_5.csv')","8e8dc02f":"printing('Automotive','..\/input\/amazon-products-2\/Automotive_5.csv')","0638f836":"printing('Grocery_and_Gourmet_Food','..\/input\/amazon-products-2\/Grocery_and_Gourmet_Food_5.csv')","e4ec63d5":"printing('Apps_for_Android','..\/input\/amazon-products-3\/Apps_for_Android_5.csv')","486eeb74":"printing('Beauty','..\/input\/amazon-products-3\/Beauty_5.csv')","af4a9793":"printing('Office_Products','..\/input\/amazon-products-3\/Office_Products_5.csv')","83c6e0ad":"printing('Pet_Supplies','..\/input\/amazon-products-3\/Pet_Supplies_5.csv')","53fedb7e":"printing('CDs_and_Vinyl','..\/input\/amazon-products-4\/CDs_and_Vinyl.csv')","1acafa43":"printing('Cell_Phones_and_Accessories','..\/input\/amazon-products-4\/Cell_Phones_and_Accessories.csv')","07ccb120":"printing('Clothing_Shoes_and_Jewelry','..\/input\/amazon-products-4\/Clothing_Shoes_and_Jewelry.csv')","61bc2ada":"printing('Electronics','..\/input\/amazon-products-4\/Electronics.csv')","f808a8d9":"printing('Health_and_Personal_Care','..\/input\/amazon-products-4\/Health_and_Personal_Care.csv')","5a676ae0":"printing('Home_and_Kitchen','..\/input\/amazon-products-4\/Home_and_Kitchen.csv')","4f7793c2":"printing('Movies_and_TV','..\/input\/amazon-products-4\/Movies_and_TV.csv')","dbe6f574":"printing('Sports_and_Outdoors','..\/input\/amazon-products-4\/Sports_and_Outdoors.csv')","17b20cd5":"printing('Tools_and_Home_Improvement','..\/input\/amazon-products-4\/Tools_and_Home_Improvement.csv')","0faf6769":"printing('Toys_and_Games','..\/input\/amazon-products-4\/Toys_and_Games.csv')","1e8ea94d":"printing('Video_Games','..\/input\/amazon-products-4\/Video_Games.csv')","c248bd3e":"# *Brand Sports_and_Outdoors*","112227c2":"# *Brand Pet_Supplies*","acaac721":"from nltk import tokenize\nlines_list = tokenize.sent_tokenize(paragraph)\nsentences.extend(lines_list)","06b8e505":"# Perform sentiment : *Brand Digital_Music*","694f3f2c":"# *Brand Automotive*","febe6d7a":"# *Brand Home_and_Kitchen*","bce3b84d":"# *Brand Movies_and_TV*","00564b95":"# *Brand Clothing_Shoes_and_Jewelry*","01a7304e":"# The third brand Digital Music Table","c89baf47":"# *Brand Electronics*","95bdad0d":"# Perform sentiment : *Brand called Baby*","f8fad89b":"# Perform sentiment : *Brand Musical_Instruments*","6a064d4f":"# *Brand Patio_Lawn_and_Garden*","8e697c25":"# *Brand Office_Products*","0dc06e4d":"# *Brand CDs_and_Vinyl*","fb4b0b97":"# *Brand Grocery_and_Gourmet_Food*","6f93f999":"## To show the score ( 5 scale )","2d668847":"# *Brand Apps_for_Android*","e98479dc":"# To perform analysis to obtain : ","97a531f9":"# *Brand Beauty*","91238789":"## To import the Amazon data ( the first 550 lines ).","b6b36675":"# Cleaning the data","2789eec2":"# import the environment ","e95a5628":"# Final Report\n\n\n\n\n\n### -----  brand  ------,  ----  trust  ----,  ----  rating  -----\n\n#### Amazon_Instant_Video,   4.059040590405904, 4.209529709637451\n\n> ####  The instant video trust value is less than true rating.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Baby, 4.273897058823529, 4.214115130105975\n\n> ####  The Baby brand trust value is almost as same as rating\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Digital_Music, 4.6422018348623855, 4.22251414088338\n\n> ####  the trust value of Digital_Music is higher than rating value \n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Musical_Instruments, 4.416666666666666, 4.488743787155248\n\n> ####  Musical_Instruments brand trust value is almost as same as rating value \n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Patio_Lawn_and_Garden, 4.169741697416974, 4.186482820976492\n\n> #### Patio_Lawn_and_Garden brand value is almost as same as rating value.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Automotive, 4.370300751879699, 4.471840961266058\n\n> #### Automotive brand trust value is lower than rating value.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Grocery_and_Gourmet_Food, 4.564814814814815, 4.243041506340329\n\n> #### Grocery_and_Gourmet_Food brand value is higher than rating value.\n\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Apps_for_Android, 3.973634651600753, 3.968930999539138\n\n> #### Apps_for_Android brand value is almost as same as rating value.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Beauty,            4.166666666666667,   4.190391028805755\n\n> #### Beauty brand value is less than rating value.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Office_Products, 4.5403377110694185, 4.345957414848473\n\n> #### Office_Products brand trust value higher than rating value.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Pet_Supplies, 3.996282527881041, 4.229744798398338\n\n> #### Pet_Supplies brand trust value is less than rating value.\n\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### CDs_and_Vinyl,       4.293577981651376, 4.294394456227815\n\n> #### CDs_and_Vinyl brand trust value is almost as same as rating value.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Cell_Phones_and_Accessories, 4.105769230769231, 4.129912208970422\n\n> #### Cell_Phones_and_Accessories trust value is almost as same as rating value.\n\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Clothing_Shoes_and_Jewelry, 4.634146341463415, 4.245133254628118\n\n> #### Clothing_Shoes_and_Jewelry brand value is higher than rating value.\n\n## -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Electronics, 4.3190298507462686, 4.222779228836577\n\n> #### Electronics brand trust value is a bit higher than rating value.\n\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Health_and_Personal_Care, 4.25, 4.274957774537685\n\n> #### Health_and_Personal_Care brand trust value is less than rating value.\n\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Home_and_Kitchen, 4.49438202247191, 4.316655247044493\n\n> #### Home_and_Kitchen brand trust value is higher than rating.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Movies_and_TV, 4.666666666666667, 4.110648217148062\n\n> #### Movies_and_TV brand trust value is very higher than rating value. @\n\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Sports_and_Outdoors, 4.41988950276243, 4.393450699710128\n\n> #### Sports_and_Outdoors brand trust value is higher than rating value.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Tools_and_Home_Improvement, 4.446494464944649, 4.365448109699872\n\n> #### Tools_and_Home_Improvement brand trust  value is higher than rating value.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Toys_and_Games, 4.817184643510054, 4.356307093802395\n\n> #### Toys_and_Games brand trust value is very higher than rating value.\n\n### -----  brand  ------, ----  trust  ----, ----  rating  -----\n\n#### Video_Games, 4.340659340659341, 4.086396582966606\n\n> #### Video_Games brand trust value is higher than rating value.\n\n\n\n\n\n\n## Conclusion:\n\n\t#### Most brand's trust value is higher than rating value \n\t\n\t#### and the Movies_and_TV trust value is 4.66 the rating value is 4.11. This one has the biggest gap.\n\t\n\t#### Obviously, the method provided by the paper is more precise than traditional one.","743a8e48":"# The second brand Baby Table","e7cd6d68":"# *Brand Toys_and_Games*","8a3219a1":"# *Brand Health_and_Personal_Care*","ff0445a5":"# *Brand Tools_and_Home_Improvement*","2166408e":"# Result: of every brand --trust--   --rating--\n\n\n## Perform sentiment :  *Brand called Amazon_Instant_Video*","c844ea7a":"# *Brand Cell_Phones_and_Accessories*","9df31159":"# *Brand Video_Games*","38c4e439":"# Project-part-2","ddefa68a":"# To show the review "}}