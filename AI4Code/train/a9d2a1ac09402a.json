{"cell_type":{"e46b8394":"code","e5f3ca8c":"code","e154a05d":"code","8983d83f":"code","4ad9c0be":"code","f513b35a":"code","088bd193":"code","a811c70e":"code","0de6cbbb":"code","94092977":"code","94fab085":"code","6aaae220":"code","0edc4f90":"code","0754b8b6":"markdown"},"source":{"e46b8394":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nfrom fastai import *\nfrom fastai.vision import *\nimport torch","e5f3ca8c":"train = pd.read_csv('..\/input\/train.csv')\ntest_file = pd.read_csv('..\/input\/sample_submission.csv')\n","e154a05d":"test_img = ImageList.from_df(test_file,path='..\/input\/test',folder = 'test')\n\n# Image augmentation on the images \ntransforms = get_transforms(do_flip=True, flip_vert=True, max_rotate = 20.0, max_zoom=1.1, max_lighting = 0.5, max_warp = 0.2, p_affine = 0.75, p_lighting = 0.75)\ntrain_img = (ImageList.from_df(train,path='..\/input\/train',folder='train').split_by_rand_pct(0.01).label_from_df().add_test(test_img).transform(transforms,size=64)\n             .databunch(path='.',bs=64,device=torch.device('cuda:0')).normalize(imagenet_stats))\n","8983d83f":"#display training images\n\ntrain_img.show_batch(rows=4, figsize=(10,10))","4ad9c0be":"#Now we apply transfer learning where we use an already trained model by replacing its last layer and fitting it with the rest of the model.\nlearn = cnn_learner(train_img , models.densenet201, metrics = [error_rate,accuracy])","f513b35a":"learn.lr_find()\n#we use this magic function given in fastai to search for the best learning rate. More on this later","088bd193":"learn.recorder.plot(suggestion =True)","a811c70e":"learn.recorder.plot()","0de6cbbb":"alpha =  3e-02\nlearn.fit_one_cycle(5,slice(alpha))","94092977":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_top_losses(9, figsize=(7,6))","94fab085":"preds,_ = learn.get_preds(ds_type = DatasetType.Test)\n# test_file.has_cactus = ","6aaae220":"test_file.has_cactus = preds.numpy()[:,0]","0edc4f90":"test_file.to_csv('submission.csv',index=False)","0754b8b6":"As you can clearly see the best learning rate is somewhere close to 0.1 which is found by this function for this particular variant of densenet. We will use this learning rate to train our model on dense-net 201 architecture."}}