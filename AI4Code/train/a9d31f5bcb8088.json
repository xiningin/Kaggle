{"cell_type":{"ee8c48fc":"code","ccc271bd":"code","62ec88f0":"code","d0fbb3ea":"code","1815d8d6":"code","b760a817":"code","074e8680":"code","310bf9e2":"code","c2a45046":"code","d4fffa38":"code","fc05ca2f":"code","65d6c256":"code","72c8d1a2":"code","41163368":"code","46a03ff2":"code","2fd269ad":"code","54fe9325":"code","d54c8dc1":"code","69d7a54b":"markdown","2e26f860":"markdown","031229eb":"markdown","3a5f5c8c":"markdown","47314240":"markdown","a0624623":"markdown","bec24066":"markdown","b61b48ee":"markdown","17cd0cf9":"markdown","d087afa2":"markdown","7ac26968":"markdown","30154ff2":"markdown"},"source":{"ee8c48fc":"%matplotlib inline\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport matplotlib.image as mpimg","ccc271bd":"img = mpimg.imread('..\/input\/irisfiles\/iris.jpeg')\n\nplt.figure(figsize = (12,8))\nplt.imshow(img)","62ec88f0":"import os\n\niris = pd.read_csv('..\/input\/iris\/Iris.csv')\niris.drop('Id',axis=1,inplace=True)\n\nfrom sklearn.model_selection import train_test_split\ntrain_set, test_set = train_test_split(iris, test_size=0.2, random_state=42)","d0fbb3ea":"train_X, train_y = train_set.drop('Species', axis=1), train_set['Species']\ntest_X, test_y   = test_set.drop('Species', axis=1), test_set['Species']","1815d8d6":"iris.info()","b760a817":"prep_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler()),\n])\n\ntrain_X_prep = prep_pipeline.fit_transform(train_X)","074e8680":"tree_clf = DecisionTreeClassifier(max_depth=2)\n\ntree_clf.fit(train_X, train_y)","310bf9e2":"predictions = tree_clf.predict(train_X)\ntarget = train_y","c2a45046":"acc = accuracy_score(predictions, target)\nacc","d4fffa38":"conf_mx = confusion_matrix(target, predictions)\nconf_mx","fc05ca2f":"from sklearn.tree import export_graphviz\n\nexport_graphviz( tree_clf,\n                out_file=\"iris_tree_train.dot\", \n                feature_names=iris.columns[:-1], \n                class_names=iris['Species'].unique(), rounded=True,\n                filled=True\n        )","65d6c256":"img = mpimg.imread('..\/input\/irisfiles\/tree-train.png')\n\nplt.figure(figsize = (8,8))\nplt.imshow(img)","72c8d1a2":"lin_svm = LinearSVC(C=1, loss='hinge')\nlin_svm.fit(train_X_prep, train_y)","41163368":"test_X_prep = prep_pipeline.fit_transform(test_X)\ntarget = test_y \n\npredictions = lin_svm.predict(test_X_prep)","46a03ff2":"acc = accuracy_score(predictions, target)\nacc","2fd269ad":"print(confusion_matrix(target, predictions))\ntarget.unique()","54fe9325":"iris.columns","d54c8dc1":"plt.figure(figsize=(12,2.7))\n\nplt.subplot(121)\nplt.scatter(iris['SepalLengthCm'][iris['Species']=='Iris-setosa'], iris['SepalWidthCm'][iris['Species']=='Iris-setosa'] , color='r', label=\"Iris-setosa\")\nplt.scatter(iris['SepalLengthCm'][iris['Species']=='Iris-versicolor'], iris['SepalWidthCm'][iris['Species']=='Iris-versicolor'], color='b', label=\"Iris-versicolor\")\nplt.scatter(iris['SepalLengthCm'][iris['Species']=='Iris-virginica'], iris['SepalWidthCm'][iris['Species']=='Iris-virginica'], color='y', label=\"Iris-virginica\")\nplt.xlabel(\"Sepal length\", fontsize=14)\nplt.ylabel(\"Sepal width\", fontsize=14)\n\n\nplt.subplot(122)\nplt.scatter(iris['PetalLengthCm'][iris['Species']=='Iris-setosa'], iris['PetalWidthCm'][iris['Species']=='Iris-setosa'] , color='r', label=\"Iris-setosa\")\nplt.scatter(iris['PetalLengthCm'][iris['Species']=='Iris-versicolor'], iris['PetalWidthCm'][iris['Species']=='Iris-versicolor'], color='b', label=\"Iris-versicolor\")\nplt.scatter(iris['PetalLengthCm'][iris['Species']=='Iris-virginica'], iris['PetalWidthCm'][iris['Species']=='Iris-virginica'], color='y', label=\"Iris-virginica\")\nplt.xlabel(\"Petal length\", fontsize=14)\nplt.ylabel(\"Petal width\", fontsize=14)\nplt.legend(loc=\"best\")\n\n\n\n\nplt.show()","69d7a54b":"### Let's see how these iris species look.","2e26f860":"# Accuracy and confusion matrix<a name='tree-acc'>","031229eb":"[Image Source](https:\/\/www.pngkey.com\/png\/detail\/82-826789_iris-iris-sepal-and-petal.png)\n> Visually it is much easier to tell the difference between Setosa and other spicies than between Versicolor and Virginica. ","3a5f5c8c":"# Contents:\n1. [Load Libraries](#libraries)\n2. [Read and split data](#read-and-split)\n3. [Data preprocessing pipeline](#pipeline)\n4. [Desicion Tree Classifier](#tree)\n    1. [Accuracy](#tree-acc)\n    2. [Visualizing the Decision Tree](#visual-tree)\n5. [Support Vector Machine](#svm)\n    1. [Accuracy](#svm-acc)\n6. [Summary](#summary)","47314240":"# Load libraries<a name='libraries'>","a0624623":"# Accuracy and confusion matrix<a name='svm-acc'>\n","bec24066":"# Visualizing the Decision Tree<a name='visual-tree'>","b61b48ee":"# Support Vector Machine<a name='svm'>\n> **Note**: If you do not know what `C` parameter means, I would recommend reading answers on [this](https:\/\/stats.stackexchange.com\/questions\/31066\/what-is-the-influence-of-c-in-svms-with-linear-kernel) page. ","17cd0cf9":"# Pipeline of data preprocessing<a name=\"pipeline\">\n\n> Although this data has no missing values, I still like to use `imputer` because it makes the code friendly for new data which could have missing values. Feature Scaling is not necessary for **Decision Tree Classifier**, but it is necessary for **SVM** which is sensitive to the feature scaling. ","d087afa2":"# Decision Tree Classifier<a name='tree'>\n> Since Decision Tree is not sensitive to the feature scaling I will not use `prep_pipeline` and `train_X_prep` yet.","7ac26968":"# Summary<a name=\"summary\">\n> To sum up, both algorithms achieved very similar results and probably it happened because of the simple nature of our data. Also, if you look at the plots above you can notice that <span style=\"color:red\"> Iris-setosa<\/span> stands out from other species and theoretically it must have been easier for both algorithms to distuingish <span style=\"color:red\"> Iris-setosa<\/span> from <span style=\"color:blue\"> Iris-versicolor<\/span> and <span style=\"color:yellow\"> Iris-virginica<\/span>. In contrast, distuingishing <span style=\"color:blue\"> Iris-versicolor<\/span> and <span style=\"color:yellow\"> Iris-virginica<\/span> could be not that trivial. You also can see it on the visualization of the Decision Tree. Anyways, achieved accuracy of almost 97% tells us that our algorithms were effective.<br\/>\nThis notebook could be useful for someone who is just getting started with Machine Learning and wants to see simple flow of solving simple Machine Learning problem. ","30154ff2":"# Read and split data<a name=\"read-and-split\">"}}