{"cell_type":{"4bb74ede":"code","a807d234":"code","cc7f7953":"code","449d7b02":"code","c0401d10":"code","dd8a4c5e":"code","7be3c6a7":"code","88d917ee":"code","87f620e1":"code","5b1f1586":"code","df065c04":"code","da6a6fce":"code","04d94045":"code","17cdc4cd":"code","0bb20d25":"code","8da72b12":"code","2287cc30":"code","d13c70b3":"code","88d98a6a":"code","bb22b59e":"markdown","b7939fc6":"markdown"},"source":{"4bb74ede":"!pip uninstall --y kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6","a807d234":"!mkdir -p ~\/.kaggle\n!cp ..\/input\/kagglejson\/kaggle.json ~\/.kaggle\n!ls -lha ..\/input\/kagglejson\/kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json","cc7f7953":"!kaggle competitions download -c ai-tomato","449d7b02":"!unzip ai-tomato.zip","c0401d10":"import pandas as pd \nimport numpy as np\nimport torch \nimport torchvision.datasets as datasets\nimport torchvision.transforms as transforms\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport torch.nn as nn","dd8a4c5e":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\ntorch.manual_seed(777)\nif device == 'cuda':\n    torch.cuda.manual_seed_all(777)","7be3c6a7":"train = pd.read_csv('..\/input\/ai-tomato\/training_set.csv')\nprint(train.head(10))\nprint(train.info())\n","88d917ee":"learning_rate = 0.001\ntraining_epoch = 2000\nbatch_size = 40 ","87f620e1":"x_train = train.iloc[:,1:-1]\ny_train = train.iloc[:,[-1]]\n\nx_train = np.array(x_train)\ny_train = np.array(y_train)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train)\n\nprint(x_train.shape)\nprint(y_train.shape)","5b1f1586":"train_dataset = torch.utils.data.TensorDataset(x_train,y_train)\n\ndata_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                          batch_size = batch_size,\n                                          shuffle = True,\n                                          drop_last=True)\n\n","df065c04":"linear1 = nn.Linear(6,4,bias=True)\nlinear2 = nn.Linear(4,4,bias=True)\nlinear3 = nn.Linear(4,4,bias=True)\nlinear4 = nn.Linear(4,4,bias=True)\nlinear5 = nn.Linear(4,1,bias=True)\n\nnn.init.kaiming_uniform_(linear1.weight)\nnn.init.kaiming_uniform_(linear2.weight)\nnn.init.kaiming_uniform_(linear3.weight)\nnn.init.kaiming_uniform_(linear4.weight)\nnn.init.kaiming_uniform_(linear5.weight)\n\nrelu = nn.SELU()","da6a6fce":"model = nn.Sequential(\n    linear1,relu,\n    linear2,relu,\n    linear3,relu,\n    linear4,relu,\n    linear5\n).to(device)","04d94045":"loss = nn.MSELoss().to(device)\noptimizer = optim.Adam(model.parameters(),lr=learning_rate)","17cdc4cd":"total_batch = len(data_loader)\n\nfor epoch in range(training_epoch):\n    avg_cost = 0\n    for X,Y in data_loader:\n        X = X.to(device)\n        Y = Y.to(device)\n\n        optimizer.zero_grad()\n        hypothesis = model(X)\n        cost = loss(hypothesis,Y)\n        cost.backward()\n        optimizer.step()\n\n        avg_cost += cost\/total_batch\n\n    print('epoch {:.4f} , cost = {:.6f}'.format(epoch,avg_cost))\nprint('learning finished!')","0bb20d25":"test = pd.read_csv('..\/input\/ai-tomato\/test_set.csv')\nprint(test.info())\ntest = test.iloc[:,1:-1]\ntest = np.array(test)\ntest = torch.FloatTensor(test).to(device)\n\nwith torch.no_grad():\n    predict = model(test)\npredict","8da72b12":"correct_prediction = predict.cpu().numpy().reshape(-1,1)\nresult = pd.read_csv('..\/input\/ai-tomato\/submit_sample.csv')","2287cc30":"for i in range(len(correct_prediction)):\n    result['expected'][i] = correct_prediction[i]\n    ","d13c70b3":"result.to_csv('submit.csv',index=False)","88d98a6a":"!kaggle competitions submit -c ai-tomato -f submit.csv -m \"14010974_\uc774\uae30\ud0dd_\uae30\ub9d0\uace0\uc0ac\ud30c\ud2b82-1\"","bb22b59e":"layer 5\uac1c , kaiming uniform \ucd08\uae30\ud654","b7939fc6":"\ud1a0\ub9c8\ud1a0 \uac00\uaca9 \uc608\uce21 "}}