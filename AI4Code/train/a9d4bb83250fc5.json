{"cell_type":{"e19f8706":"code","ab3df83c":"code","5defdda5":"code","feb917f6":"code","50d454e6":"code","d5ed6d2e":"code","8d0c292d":"code","48069704":"code","76de51d3":"code","9ed16da3":"code","37953708":"code","8afd6082":"code","98f7f147":"code","73947324":"code","1874c094":"code","2075dc45":"code","093cc070":"code","ec681093":"code","6c40a2ee":"code","8a4d47f7":"code","f71409d5":"code","fb8d51db":"code","c567156a":"code","89f7a48a":"code","fd16acee":"code","c8a6f3e2":"code","ce82ff80":"code","baa5076f":"code","dfa24b03":"code","eaf31472":"code","24f3ab8c":"code","75ebc1ab":"code","a4640c5f":"code","b5a33200":"code","ec7394ef":"code","cfd70a2e":"code","dd9ba9a0":"code","78209e2a":"code","96afe03f":"code","3498adf9":"code","5a86fe9c":"code","7a23ccc2":"code","3a8baea5":"code","e9f69327":"code","34d22780":"code","23e7cc79":"code","f81f11f3":"code","047e270f":"code","1924b096":"code","b6fde12f":"code","c0caf3f1":"code","6734c3ee":"code","bc20e149":"code","f2f34615":"code","4dc312dc":"code","86000d53":"code","0efedd77":"code","04bde199":"code","4096299d":"code","6bf7f73f":"code","306ec5cd":"code","55e115a5":"code","853fdf5b":"code","c3e253ba":"code","d3eece04":"code","b380f802":"code","b3c69a41":"code","e047dee6":"code","44dccd57":"code","91f5b015":"code","32e1e09c":"code","a35a1721":"code","436e23d2":"code","453e44ce":"code","e1ed06b4":"code","e78c7238":"code","a72f5cd9":"code","d309c487":"code","bcce757e":"code","b5f9b8e1":"code","a2ca1b55":"code","ea6c457f":"code","2c08a76d":"code","200401fa":"code","5b35fbef":"code","d1a06d75":"code","a456bb75":"code","ba6a5bd0":"code","75bf2344":"code","68de3b8d":"code","64105b32":"code","f912686b":"code","eec31286":"code","d8de5854":"code","4aba51ec":"code","97c08007":"code","d48e7bb2":"code","c5d371ae":"code","8a203bac":"code","c3d43554":"code","4b367cac":"code","c56ee7eb":"code","0820e455":"code","9e7c7797":"code","b5a1114e":"code","81a20968":"code","c33d6e7f":"code","41f6ffc7":"code","a09ee726":"markdown"},"source":{"e19f8706":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab3df83c":"pd.set_option('display.max_row',111)\npd.set_option('display.max_column',111)","5defdda5":"data = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')","feb917f6":"data.head(5)","50d454e6":"#------------------------------------------------------ ANALYSE DE FORME ---------------------------------------------------------------------------------------------------","d5ed6d2e":"df = data.copy()","8d0c292d":"print(df.columns)","48069704":"# Identification de notre Target","76de51d3":"# Notre Target est : Attrition_Flag","9ed16da3":"# Identifier quels types des variables","37953708":"print(df.dtypes)","8afd6082":"# Analyser des valeurs manquantes","98f7f147":"plt.figure(figsize=(20,10))\nsns.heatmap(df.isna(),cbar=False)","73947324":"# Pourcentage des valeurs manquantes","1874c094":"print((df.isna().sum()\/df.shape[0]).sort_values(ascending= True))","2075dc45":"# Pour ce qui est de valeurs manquantes : Il ya z\u00e9ro pourcent ","093cc070":"# -------------------------------------------------- ANALYSE DE FOND ------------------------------------------------------------------------------------------------------","ec681093":"# Elimination des colonnes inutiles","6c40a2ee":"df = df.drop('Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1',axis=1)\ndf = df.drop('Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2',axis = 1)\ndf = df.drop('CLIENTNUM',axis=1)","8a4d47f7":"# ------------------------------------------ Etude de r\u00e9lation Univari\u00e9 de differentes variables --------------------------------------------------------------------------","f71409d5":"sns.set()\n\nfrom subprocess import check_output\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\ndef annot_plot(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n         ax.annotate(f\"{p.get_height() * 100 \/ df.shape[0]:.2f}%\", (p.get_x() + p.get_width() \/ 2., p.get_height()),\n         ha='center', va='center', fontsize=11, color='black', rotation=0, xytext=(0, 10),\n         textcoords='offset points')             \ndef annot_plot_num(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n        ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+w, p.get_height()+h))\n\nimport os","fb8d51db":"#----------------------------------------- Variable qualitative ------------------------------------------------------------","c567156a":"# Variable Customer_Age:","89f7a48a":"plt.hist(df['Customer_Age'])","fd16acee":"df['Customer_Age'].describe()","c8a6f3e2":"# Donc la moyenne d'age est : 46 ans,le plus jeune a : 26 ans et le plus vieu a 73 ans","ce82ff80":"# Variable Attrition_Flag : \nax = sns.countplot('Attrition_Flag',data=df)\nplt.ylabel('Total')\nannot_plot(ax,1,3)\nplt.show()","baa5076f":"# Donc apr\u00e8s analyse on voit vite que 83.93% de nos clients sont restant et 16.07% sont partant","dfa24b03":"# Variable Gender : \nax = sns.countplot('Gender',data=df)\nplt.ylabel('Total')\nannot_plot(ax,1,3)\nplt.show()","eaf31472":"# Il ya 52.91% des femmes et  47.09% des hommes","24f3ab8c":"ax = sns.countplot('Marital_Status',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","75ebc1ab":"ax = sns.countplot('Education_Level',data=df)\nplt.ylabel('Total')\nannot_plot(ax,1,3)\nplt.show()","a4640c5f":"ax = sns.countplot('Card_Category',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","b5a33200":"ax = sns.countplot('Income_Category',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","ec7394ef":"#------------------------------------- Variable quantitative --------------------------------------------------------------","cfd70a2e":"# Total_Amt_Chng_Q4_Q1\n# repr\u00e9sente combien le client a augment\u00e9 les nombres de transaction en comparant le 4e trimestre avec le 1er.","dd9ba9a0":"sns.distplot(df['Total_Amt_Chng_Q4_Q1'])","78209e2a":"effectif = df['Total_Amt_Chng_Q4_Q1'].value_counts()\nmodalite = effectif.index\ntab = pd.DataFrame(modalite,columns = [\"Total_Amt_Chng_Q4_Q1\"])\ntab['n'] = effectif.values\ntab['f'] = tab['n']\/len(df)\ntab['F'] = tab['f'].cumsum()","96afe03f":"tab","3498adf9":"sns.distplot(df['Total_Trans_Amt'])\neffectif = df['Total_Trans_Amt'].value_counts()\nmodalite = effectif.index\ntab = pd.DataFrame(modalite,columns = [\"Total_Trans_Amt\"])\ntab['n'] = effectif.values\ntab['f'] = tab['n']\/len(df)\ntab['F'] = tab['f'].cumsum()\ntab","5a86fe9c":"sns.distplot(df['Total_Trans_Ct'])","7a23ccc2":"sns.distplot(df['Dependent_count'])\neffectif = df['Dependent_count'].value_counts()\nmodalite = effectif.index\ntab = pd.DataFrame(modalite,columns = [\"Dependent_count\"])\ntab['n'] = effectif.values\ntab['f'] = tab['n']\/len(df)\ntab['F'] = tab['f'].cumsum()","3a8baea5":"tab","e9f69327":"#--------------------------------------------------- M\u00e9sure de tendance central --------------------------------------------","34d22780":"for col in df.select_dtypes('int64'):\n    print(\"moyenne de \",col,\"\\n :\" ,df[col].mean())\n    print(\"m\u00e9dianne  de \",col,\"\\n\", df[col].median())\n    print(\"mode de \",col,\"\\n\",df[col].mode())\n    print(\"var de \",col,\"\\n\",df[col].var(ddof=0))\n    print(\"ect de \",col,\"\\n\",df[col].std(ddof=0))\n    plt.figure()\n    plt.hist(df[col])\n    plt.show()","23e7cc79":"# R\u00e9lation entre deux variables qualitatives : ","f81f11f3":"# Entre Attrition_Flag et Gender","047e270f":"ax = sns.countplot('Attrition_Flag',hue='Gender',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","1924b096":"# Entre Attrition_Flag et Card_Categoy\nax = sns.countplot('Attrition_Flag',hue='Card_Category',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","b6fde12f":"# Entre Attrition_Flag et Income_Category\nax = sns.countplot('Attrition_Flag',hue='Income_Category',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","c0caf3f1":"ax = sns.countplot('Attrition_Flag',hue='Education_Level',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","6734c3ee":"ax = sns.countplot('Attrition_Flag',hue='Dependent_count',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","bc20e149":"ax = sns.countplot('Attrition_Flag',hue='Marital_Status',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","f2f34615":"# R\u00e9lation entre Card_Category et Income_Category\n# Est ce que le fais de possede une categorie de carte \u00e0 l'effet sur notre revenus?\nax = sns.countplot('Card_Category',hue='Income_Category',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","4dc312dc":"ax = sns.countplot('Card_Category',hue='Gender',data=df)\nplt.ylabel('Total')\nannot_plot(ax,0.8,1)\nplt.show()","86000d53":"# Cr\u00e9ation du tableau de contingence","0efedd77":"X = \"Card_Category\"\nY = \"Gender\"\ncont = df[[X,Y]].pivot_table(index=X,columns=Y,aggfunc=len,margins=True,margins_name=\"Total\")\ncont","04bde199":"X = \"Card_Category\"\nY = \"Income_Category\"\ncont = df[[X,Y]].pivot_table(index=X,columns=Y,aggfunc=len,margins=True,margins_name=\"Total\")\ncont","4096299d":"X = \"Marital_Status\"\nY = \"Education_Level\"\ncont = df[[X,Y]].pivot_table(index=X,columns=Y,aggfunc=len,margins=True,margins_name=\"Total\")\ncont","6bf7f73f":"X = \"Card_Category\"\nY = \"Attrition_Flag\"\ncont = df[[X,Y]].pivot_table(index=X,columns=Y,aggfunc=len,margins=True,margins_name=\"Total\")\ncont","306ec5cd":"#------------------------------------------------------------- R\u00e9lation entre deux variables quantitatives ----------------------------------------------------------------","55e115a5":"# Analysez corr\u00e9lative entre deux variables quantitatives","853fdf5b":"import scipy.stats as st\nimport numpy as np\n\nprint(st.pearsonr(df[\"Total_Trans_Amt\"],df['Total_Trans_Ct'])[0])\nprint(np.cov(df[\"Total_Trans_Amt\"],df['Total_Trans_Ct'],ddof=0)[1,0])","c3e253ba":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr())","d3eece04":"# Donc il  n'as pas vraiment de corr\u00e9lation entre variable sauf la variable Total_Trans_Amt et Total_Trans_Ct qui ont une co\u00e9fficient de corr\u00e9lation de 0.80","b380f802":"plt.figure(figsize=(90,60))\nsns.relplot(x='Total_Ct_Chng_Q4_Q1',y='Total_Amt_Chng_Q4_Q1',data=df)\nplt.show()","b3c69a41":"plt.figure(figsize=(90,60))\nsns.relplot(x='Total_Ct_Chng_Q4_Q1',y='Total_Amt_Chng_Q4_Q1',hue='Attrition_Flag',data=df)\nplt.show()","e047dee6":"#Months_on_book\nplt.figure(figsize=(10,8))\nsns.distplot(df['Months_on_book'],kde=True,color='y')\nplt.show()","44dccd57":"#Total_Ct_Chng_Q4_Q1\nplt.figure(figsize=(10,8))\nsns.distplot(df['Total_Ct_Chng_Q4_Q1'],kde=True,color='b')\nplt.show()","91f5b015":"#Total_Amt_Chng_Q4_Q1\nplt.figure(figsize=(10,8))\nsns.distplot(df['Total_Amt_Chng_Q4_Q1'],kde=True,color='g')\nplt.show()","32e1e09c":"#Credit_Limit\nplt.figure(figsize=(10,8))\nsns.distplot(df['Credit_Limit'],kde=True,color='b')\nplt.show()","a35a1721":"#Total_Trans_amt\nplt.figure(figsize=(10,8))\nsns.distplot(df['Total_Trans_Amt'],kde=True,color='y')\nplt.show()","436e23d2":"#Avg_Open_To_Buy\nplt.figure(figsize=(10,8))\nsns.distplot(df['Avg_Open_To_Buy'],kde=True,color='g')\nplt.show()","453e44ce":"#Total_Revolving_Bal\nplt.figure(figsize=(10,8))\nsns.distplot(df['Total_Revolving_Bal'],kde=True,color='b')\nplt.show()","e1ed06b4":"#Total_Relationship_Count\nplt.figure(figsize=(10,8))\nsns.distplot(df['Total_Relationship_Count'],kde=True,color='r')\nplt.show()","e78c7238":"#-------------------------------------------------------------  MODELISATION-----------------------------------------------------------------------------------------------","a72f5cd9":"from sklearn.metrics import f1_score,confusion_matrix,classification_report\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.feature_selection import SelectKBest,f_classif\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import PolynomialFeatures,StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV,RandomizedSearchCV","d309c487":"\n#----------------------------------------------  Encodade des variables ---------------------------------------------------","bcce757e":"encoder  = LabelEncoder()\n\ntarget = encoder.fit_transform(df['Attrition_Flag'])\nsexe   = encoder.fit_transform(df['Gender'])\neduction = encoder.fit_transform(df['Education_Level'])\nstatus   = encoder.fit_transform(df['Marital_Status'])\nincome   = encoder.fit_transform(df['Income_Category'])\ncard     = encoder.fit_transform(df['Card_Category'])","b5f9b8e1":"df['Attrition_Flag'] =target\ndf['Gender'] = sexe\ndf['Education_Level'] = eduction\ndf['Marital_Status']   = status\ndf['Income_Category'] = income\ndf['Card_Category'] = card","a2ca1b55":"#-------------------------------------------- Inputation ------------------------------------------------------------------","ea6c457f":"def imputation(df):\n    df = df.dropna(axis = 0)\n    return df","2c08a76d":"data = imputation(df)","200401fa":"X = data.drop('Attrition_Flag',axis= 1)\ny = data['Attrition_Flag']\nX_train,X_test,y_train,y_test  = train_test_split(X,y,random_state = 0,train_size = 0.3)","5b35fbef":"# Transformer","d1a06d75":"scaler = StandardScaler()\nX_train_transformer = scaler.fit_transform(X_train)","a456bb75":"preprocessor = make_pipeline(PolynomialFeatures(2,include_bias = False),SelectKBest(f_classif,k=10))\n\nRandomForest = make_pipeline(preprocessor,RandomForestClassifier(random_state = 0))\nAdaBoost     = make_pipeline(preprocessor,AdaBoostClassifier(random_state = 0))\nSVM          = make_pipeline(preprocessor,StandardScaler(),SVC(random_state = 0))\nKNN          = make_pipeline(preprocessor,StandardScaler(),KNeighborsClassifier())\n\ndict_of_models = {'RandomForest' : RandomForest,\n                  'AdaBoost'     : AdaBoost,\n                  'SVM'          : SVM,\n                  'KNN'          : KNN}","ba6a5bd0":"#------------------------------------- Proc\u00e9dure d'\u00e9valuation -------------------------------------------------------------","75bf2344":"def evaluation(model):\n    \n    model.fit(X_train,y_train)\n    ypred = model.predict(X_test)\n    \n    print(confusion_matrix(y_test,ypred))\n    print(classification_report(y_test,ypred))\n    N,train_score,val_score = learning_curve(model,X_train,y_train,cv=4,\n                                             scoring = 'f1',\n                                             train_sizes = np.linspace(0.1,1,10))\n    \n    plt.figure(figsize = (12,8))\n    #sns.heatmap(confusion_matrix(y_test,ypred),square = True,annot = True,cbar=False)\n    plt.plot(N,val_score.mean(axis=1),label='validation score')\n    plt.plot(N,train_score.mean(axis=1),label='train score')\n    plt.legend()","68de3b8d":"model_1 = RandomForestClassifier(random_state=0)\nmodel_2 = make_pipeline(PolynomialFeatures(2),SelectKBest(f_classif,k=10),\n                       RandomForestClassifier(random_state = 0))","64105b32":"dict_list_model = {\"RandomForest\" : RandomForest,\n                  \"AdaBoost\" : AdaBoost,\n                  \"SVM\" : SVM,\n                  \"KNN\" : KNN}","f912686b":"for name,model in dict_of_models.items() :\n    print(name)\n    evaluation(model)","eec31286":"#------------------------------------------ Optimisation ------------------------------------------------------------","d8de5854":"hyper_params = {\"svc__gamma\" : [1e-3,1e-4],\n                 \"svc__C\" : [1,10,100,1000],\n                \"pipeline__polynomialfeatures__degree\" : [2,3,4],\n               \"pipeline__selectkbest__k\" : range(40,60)}","4aba51ec":"grid = RandomizedSearchCV(SVM,hyper_params,scoring='precision',cv=7,n_iter = 40)\ngrid.fit(X_train,y_train)","97c08007":"print(grid.best_params_)","d48e7bb2":"y_pred = grid.predict(X_test)","c5d371ae":"print(classification_report(y_test,y_pred))","8a203bac":"#---------------------------------------- Precision Recall Curve -----------------------------------------------------------","c3d43554":"from sklearn.metrics import precision_recall_curve","4b367cac":"precision,recall,threshold = precision_recall_curve(y_test,grid.best_estimator_.decision_function(X_test))","c56ee7eb":"plt.plot(threshold,precision[:-1],label = 'precision')\nplt.plot(threshold,recall[:-1],label = 'recall')\nplt.legend()","0820e455":"def model_final(model,X,threshold = 0):\n    return model.decision_function(X) > threshold","9e7c7797":"y_pred = model_final(grid.best_estimator_,X_test,threshold = 0)","b5a1114e":"from sklearn.metrics import recall_score,precision_score\n","81a20968":"f1_score(y_test,y_pred)","c33d6e7f":"recall_score(y_test,y_pred)","41f6ffc7":"precision_score(y_test,y_pred)","a09ee726":"# 1. * Analyse bi-varie\u00e9s****"}}