{"cell_type":{"ea48aa47":"code","799f863b":"code","2d3e9376":"code","3ec3ce7c":"code","0781b9a4":"code","a9a1bdeb":"code","9d708876":"code","04be6880":"code","48757ee9":"code","5ced43e0":"code","edecbea5":"code","c51dd41a":"code","4fd51c20":"code","ce77d810":"code","7d0c2d4a":"code","ee90df29":"code","fc4f3ebe":"code","f9026ba7":"code","5dc9b2b1":"code","64b952d2":"code","2117c69d":"code","c43501f1":"code","0c3fc5bb":"code","d205173f":"code","3129aab5":"code","258a8815":"code","e7d7940f":"code","5c8668a1":"code","4574abe7":"code","591d0fe2":"code","844cb78a":"code","db71ce1f":"code","03a8d447":"code","dd868bcc":"code","20173f08":"markdown","b0a1b538":"markdown","cd64f821":"markdown","aec517a8":"markdown","a8beae4b":"markdown","1524cf2a":"markdown","f4dc7ebd":"markdown","428fa269":"markdown","f2988f98":"markdown","77c3a23f":"markdown","70c147c1":"markdown","9e822b6b":"markdown"},"source":{"ea48aa47":"import os\nimport cv2\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tensorflow.keras import Sequential,layers,experimental\n\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","799f863b":"!ls \/kaggle\/input\/eye-dataset\/train_dataset","2d3e9376":"path = '\/kaggle\/input\/eye-dataset\/train_dataset'\nclosedLeftEyes = path + '\/closedLeftEyes'\nopenLeftEyes =path + '\/openLeftEyes'\nclosedRightEyes = path + '\/closedRightEyes'\nopenRightEyes = path + '\/openRightEyes'","3ec3ce7c":"def plot_image(eyes,limit=5):\n    for img in os.listdir(eyes)[:limit]:\n        image = eyes+'\/'+img\n        image = cv2.imread(image)\n        plt.matshow(image)\n        plt.show()\n        print(image.shape)","0781b9a4":"plot_image(openLeftEyes)","a9a1bdeb":"plot_image(openRightEyes)","9d708876":"plot_image(closedLeftEyes)","04be6880":"plot_image(closedRightEyes,5)","48757ee9":"len(os.listdir(openLeftEyes) + os.listdir(openRightEyes))","5ced43e0":"len(os.listdir(closedLeftEyes) + os.listdir(closedRightEyes))","edecbea5":"open_eyes = []\nclosed_eyes = []","c51dd41a":"def append_open(eyes):\n    i = 0\n    for img in os.listdir(eyes):\n        image = eyes+'\/'+img\n        image = cv2.imread(image)\n        if (image is not None):\n            if image.shape == (24,24,3):\n                open_eyes.append(image)\n                i += 1\n    print(\"Count:\",i)\ndef append_closed(eyes):\n    i = 0\n    for img in os.listdir(eyes):\n        image = eyes+'\/'+img\n        image = cv2.imread(image)\n        if (image is not None):\n            if image.shape == (24,24,3):\n                closed_eyes.append(image)\n                i += 1\n    print(\"Count:\",i)","4fd51c20":"append_open(openLeftEyes)\nappend_open(openRightEyes)","ce77d810":"append_closed(closedLeftEyes)\nappend_closed(closedRightEyes)","7d0c2d4a":"len(open_eyes), len(closed_eyes)","ee90df29":"# open = 1\n# closed = 0\nopen_labels = [ 1 for i in range(len(open_eyes)) ]\nclose_labels = [ 0 for i in range(len(closed_eyes)) ]","fc4f3ebe":"len(open_labels), len(close_labels)","f9026ba7":"data = open_eyes+closed_eyes\nx = np.array(data)\/255 #Scaling","5dc9b2b1":"x.shape","64b952d2":"data2 = open_labels+close_labels\ny = np.array(data2)","2117c69d":"y.shape","c43501f1":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)\nx_train.shape, x_test.shape, y_train.shape, y_test.shape","0c3fc5bb":"pd.Series(y_train).value_counts()","d205173f":"pd.Series(y_test).value_counts()","3129aab5":"model = Sequential([\n    layers.Conv2D(filters=24, kernel_size=(3,3),activation='relu',input_shape=(24,24,3)),\n    layers.MaxPool2D((2,2)),\n    \n    layers.Conv2D(filters=48, kernel_size=(3,3),activation='relu'),\n    layers.MaxPool2D((2,2)),\n\n    layers.Flatten(),\n    layers.Dense(48, activation='relu'),\n    layers.Dense(1,activation='sigmoid')\n\n])\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)","258a8815":"model.fit(x_train,y_train,epochs=20)","e7d7940f":"model.evaluate(x_test,y_test)","5c8668a1":"def predict(x):\n    pred = model.predict(x)\n    pred[pred >= 0.5] = 1\n    pred[pred < 0.5] = 0\n    return pred\n\ndef plot_cm(yt,yp,title=None):\n    cm = confusion_matrix(yt,yp)\n    plt.figure(figsize=(10,10))\n    sns.heatmap(cm,annot=True,fmt='g')\n    plt.title(title)\n    plt.show()\n    ","4574abe7":"y_pred_test = predict(x_test)\ny_pred_train = predict(x_train)","591d0fe2":"plot_cm(y_test, y_pred_test,title='Test Data')","844cb78a":"plot_cm(y_train, y_pred_train,title='Train Data')","db71ce1f":"print(\"Test Data Report\")\nprint(classification_report(y_test,y_pred_test))","03a8d447":"print(\"Train Data Report\")\nprint(classification_report(y_train,y_pred_train))","dd868bcc":"model.save(\"Eye-detect-model\")","20173f08":"# **Splitting the data**","b0a1b538":"# **Model Building and Predictions**","cd64f821":"# **5 ClosedRightEye Images**","aec517a8":"# **Saving Model as file**","a8beae4b":"# **Combining open and closed eyes label data**","1524cf2a":"# **5 ClosedLeftEye Images**","f4dc7ebd":"# **5 OpenLeftEye Images**","428fa269":"# **Classification reports**","f2988f98":"# **5 OpenRightEye Images**","77c3a23f":"# **Combining open and closed eyes data**","70c147c1":"# **Separating open and closed eyes**","9e822b6b":"# **Labels for open and closed eyes**"}}