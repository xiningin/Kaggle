{"cell_type":{"5ff3c25b":"code","d89151ef":"code","cb259188":"code","a84e8963":"code","05c741d5":"code","9f867cf5":"code","1aee7ef7":"code","c101f742":"code","350a0e58":"code","be20a3a2":"code","b4f11000":"code","7d03508a":"code","679d92cc":"code","344d0a2b":"code","892b6f6c":"code","8654bbbf":"code","5983f1e5":"code","1dc0380b":"code","9642c1c6":"code","758158e6":"code","14d3f8d5":"code","4c9b756a":"code","8888af43":"code","ec54962e":"markdown","9f5535ee":"markdown","4df79ada":"markdown","4cd8abe1":"markdown","2b048d1e":"markdown","fd9a8c93":"markdown","6f39235e":"markdown","4430d596":"markdown","1ea2ea70":"markdown","d98ba6c6":"markdown","5066da1a":"markdown","e9858473":"markdown","7e43245f":"markdown","95866d5c":"markdown","03032d39":"markdown","a9b1de04":"markdown","37abc5c2":"markdown","627335ac":"markdown","697cd18d":"markdown","f4e1d2f6":"markdown","820d1416":"markdown","221c2065":"markdown","e49ed2df":"markdown","61d9ebc1":"markdown","c56c7bf2":"markdown"},"source":{"5ff3c25b":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nfrom scipy import stats","d89151ef":"df_original = pd.read_csv('..\/input\/covid19-in-usa\/us_states_covid19_daily.csv')\ndf_original.head()","cb259188":"ax = sns.heatmap(df_original.isnull(),yticklabels=False,cbar=False)\nax.set(xlabel='columns', ylabel='rows (white if null)', title='Checking Dataset for Null Values')\nplt.show()","a84e8963":"df_cleaning = df_original.copy()\n\n# Update column types.\ndf_cleaning['date'] = df_cleaning['date'].apply(lambda x: dt.datetime.strptime(str(x), '%Y%m%d'))\n\n# Rename colums for easier use.\ndf_cleaning = df_cleaning.rename(columns={'total':'total_tests_inc_pending', \n                                          'totalTestResults':'total_tests', \n                                          'death':'deaths'})\n# Drop columns that aren't needed.\ndf_cleaning = df_cleaning.drop(columns=['dateChecked',\n                                        'hash',\n                                        'fips', \n                                        'deathIncrease',\n                                        'hospitalizedIncrease',\n                                        'negativeIncrease',\n                                        'positiveIncrease',\n                                        'totalTestResultsIncrease'])\n\nstate_dict = {}\nfor state in df_cleaning.state.unique():\n    # Process each state separately, mostly to do the forward filling for NaNs by state.\n    state_df = df_cleaning[df_cleaning['state']==state].copy()\n    state_df = state_df.sort_values(by='date', ascending=True)\n    state_df = state_df.reset_index(drop=True)\n    state_df.loc[0] = state_df.loc[0].fillna(0)\n    state_df.index = state_df.index + 1\n    state_df = state_df.fillna(method='ffill')\n    state_dict[state] = state_df\n    \n# Rejoin all states to make one large dataframe.\ndf = pd.DataFrame()\nfor state_df in state_dict.values():\n    df = pd.concat([df, state_df])\ndf= df.reset_index()\n\n# Add additional feature columns.\ndf['death_rate'] = (df['deaths'] \/ df['positive'])\n# NaN values occur here when there are 0 positive cases and thus no deaths, can fill with 0s.\ndf['death_rate'] = df['death_rate'].fillna(0) ","05c741d5":"ax = sns.heatmap(df.isnull(),yticklabels=False,cbar=False)\nax.set(xlabel='columns', ylabel='rows (white if null)')\nplt.show()","9f867cf5":"df.head()","1aee7ef7":"\ndef format_plot(fig):\n    \"\"\"\n    Format figures for standard appearance.\n    \"\"\"\n    plt.xlabel('Time')\n    plt.xticks(rotation=45)\n    plt.legend(loc='upper left', fontsize='large')\n\ndef best_and_worst(df, rank_on, y_label, states_per_plot=5, more_is_worse=True):\n    \"\"\"\n    Plots states_per_plot number of best and worst faring states, ranked on the \"rank_on\" column.\n    Labels both y axes with the y_label string provided.\n    the more_is_worse boolean indicates if a larger number makes a state worse or better off.\n    \"\"\"\n    most_recent_day = df.date.max()\n    if more_is_worse:\n        ranked = df[df['date']==most_recent_day].sort_values(by=rank_on, ascending=False)\n    else:\n        ranked = df[df['date']==most_recent_day].sort_values(by=rank_on, ascending=True)\n    worst = ranked.head(states_per_plot).state\n    best = ranked.tail(states_per_plot).state\n\n    fig=plt.figure(figsize=(20,5))\n    plt.subplot(1, 2, 1)\n    for state in worst:\n        state_df = df[df['state']== state].copy()\n        plt.plot(state_df.date, state_df[rank_on], label=state)\n        plt.title('Worst States')\n        plt.ylabel(y_label)\n        format_plot(fig)\n    plt.subplot(1, 2, 2)\n    for state in best:\n        state_df = df[df['state']== state].copy()\n        plt.plot(state_df.date, state_df[rank_on], label=state)\n        plt.title('Best States')\n        plt.ylabel(y_label)\n        format_plot(fig)\n        \n    plt.show()\n    \n","c101f742":"best_and_worst(df=df, rank_on='positive', y_label='Number of Positive Cases')","350a0e58":"best_and_worst(df=df, rank_on='deaths', y_label='Number of Deaths')","be20a3a2":"best_and_worst(df=df, rank_on='total_tests', y_label='Number of Completed Tests', more_is_worse=False)","b4f11000":"best_and_worst(df=df, rank_on='death_rate', y_label='Death Rate')","7d03508a":"def get_lin_exp_fits(state_df, col='positive'):\n    # Calculate linear and exponential fits.\n    linear_coeffs = stats.linregress(x=state_df.index, y=state_df[col])\n    positive_values = state_df[col]>0\n    exp_coeffs = stats.linregress(x=state_df.index[positive_values], y=np.log(state_df.loc[positive_values, col]))\n    return linear_coeffs, exp_coeffs\n\ndef plot_lin_vs_exp(state_df, col='positive', y_label='Number of Positive Cases'):\n    \"\"\" Calculate linear and exponential fits \n    \"\"\"\n    linear_coeffs, exp_coeffs = get_lin_exp_fits(state_df, col=col)\n    \n    # Plot the results.\n    fig=plt.figure(figsize=(20,5))\n    plt.subplot(1, 3, 1)\n    plt.plot(state_df.date, state_df[col], label=\"data\")\n    plt.plot(state_df.date,  linear_coeffs[1] + state_df.index*linear_coeffs[0], label=\"linear prediction\")\n    plt.title('Linear Fit')\n    plt.ylabel(y_label)\n    format_plot(fig)\n    plt.subplot(1, 3, 2)\n    plt.plot(state_df.date, state_df[col], label=\"data\")\n    plt.plot(state_df.date,  np.exp(exp_coeffs[1])  * (np.exp(exp_coeffs[0])**state_df.index), label=\"exp prediction\")\n    plt.title('Exponential Fit')\n    plt.ylabel(y_label)\n    format_plot(fig)\n    plt.subplot(1, 3, 3)\n    plt.plot(state_df.date, np.log(state_df[col]), label=\"data\")\n    plt.plot(state_df.date,  exp_coeffs[1] + state_df.index*exp_coeffs[0], label=\"exp prediction\")\n    plt.title('Exponential Fit, Log Plot')\n    plt.ylabel('Log ' + y_label)\n    format_plot(fig)\n","679d92cc":"plot_lin_vs_exp(state_df=state_dict[\"NY\"])","344d0a2b":"plot_lin_vs_exp(state_df=state_dict[\"NY\"], col='deaths', y_label='Number of Deaths')\nprint(\"New York State\")","892b6f6c":"plot_lin_vs_exp(state_df=state_dict[\"WA\"])\nprint(\"Washington State:\")","8654bbbf":"linear, exponential = get_lin_exp_fits(state_dict[\"NY\"])\nprint (\"linear r-squared:\", linear.rvalue**2)\nprint (\"exponential r-squared:\", exponential.rvalue**2)","5983f1e5":"all_states = df.state.unique()\n\nagg_df = pd.DataFrame(columns=['state','linear_slope','linear_intercept','linear_r2','exp_base','exp_mult','exp_r2'])\n\nfor state in all_states:\n    state_df = state_dict[state]\n    # Only consider states with at least one positive case\n    if state_df.positive.abs().sum() != 0:\n        linear, exp = get_lin_exp_fits(state_dict[state])\n        row = pd.DataFrame(data={'state':[state],\n                                 'linear_slope':[linear.slope],\n                                 'linear_intercept':[linear.intercept],\n                                 'linear_r2':[linear.rvalue**2],\n                                 'exp_base':[np.exp(exp.slope)],\n                                 'exp_mult':[np.exp(exp.intercept)],\n                                 'exp_r2':[exp.rvalue**2]})\n        agg_df = agg_df.append(row, ignore_index=True)\n\nagg_df = agg_df.sort_values(by='exp_base', ascending=False)\nagg_df.head()\n    ","1dc0380b":"plt.plot(agg_df.linear_r2, agg_df.exp_r2,'o')\nplt.ylabel(\"Exponential Fit R Squared\")\nplt.xlabel(\"Linear Fit R Squared \")\nplt.title(\"Linear and Exponential R Squared Values, Per State\")\nplt.show()","9642c1c6":"fig=plt.figure(figsize=(20,5))\nagg_df = agg_df.sort_values(by='linear_r2')\nplt.bar(agg_df.state,agg_df.linear_r2)\nplt.xlabel(\"State\")\nplt.ylabel(\"Linear Fit R Squred Value\")\nplt.title(\"States Ranked by Linear Fit R Squared\")\nplt.show()","758158e6":"plot_lin_vs_exp(state_df=state_dict[\"TX\"])\nprint(\"Texas: Less linear, more exponential\")","14d3f8d5":"plot_lin_vs_exp(state_df=state_dict[\"VI\"])\nprint(\"Virginia: More linear, less exponential\")","4c9b756a":"fig=plt.figure(figsize=(20,5))\nagg_df = agg_df.sort_values(by='exp_base')\nplt.bar(agg_df.state,agg_df.exp_base)\nplt.xlabel(\"State\")\nplt.ylabel(\"Exponential Fit Basee Value\")\nplt.title(\"States Ranked by Exponential Fit Base\")\nplt.show()","8888af43":"fig=plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nplt.plot(agg_df.linear_r2, agg_df.exp_base,'o')\nplt.ylabel(\"Exponential Fit Base\")\nplt.xlabel(\"Linear Fit R Squared \")\nplt.title(\"Linear R Squared vs Exponential Base, Per State\")\nplt.subplot(1,2,2)\nplt.plot(agg_df.exp_r2, agg_df.exp_base,'o')\nplt.ylabel(\"Exponential Fit Base\")\nplt.xlabel(\"Exponential Fit R Squared \")\nplt.title(\"Exponential R Squared vs Exponential Base, Per State\")\nplt.show()","ec54962e":"## Intro","9f5535ee":"### Which states have the highest\/lowest death rate?","4df79ada":"Let's take a closer look at a state that has worse linear growth (one on the left), like Texas:","4cd8abe1":"### Which states have performed the most\/least tests?","2b048d1e":"This notebook is meant to be a beginner-approachable look at the covid spread in the USA, grouped by state. It does some basic data cleaning, visualizations, and exponential fit analysis.\n\nThe notebook uses US covid spread data from [this kaggle dataset](http:\/\/https:\/\/www.kaggle.com\/sudalairajkumar\/covid19-in-usa), which originally pulls the data from the [Covid Tracking Project](http:\/\/https:\/\/covidtracking.com\/). We're inundated with news and data about covid every day, and no one analysis will answer all of the questions we have about this virus. With that in mind, this notebook choses to focus on the following questions:\n\nGeneral Status Questions\n - Which states have the most cases? Deaths? Tests?\n - Which states have the highest death rates?\n - Which states are growing at an exponential rate vs a linear rate?\n - Which states have the highest base for their exponential fit (which states are growing at the fastest exponential rate)?\n\nCOVID Policy Questions [TODO]\n - How are states with a shelter in place doing compared to states without?\n - How does case rate change post shelter in place?\n - How does the [social distancing scoreboard](http:\/\/https:\/\/www.unacast.com\/covid19\/social-distancing-scoreboard) correlate to growth rate?\n - How would forecasts look with\/without social distancing?\n \nEconomic Downstream Questions [TODO]\n - How does covid relate to unemployment? Open table data?\n \nI will be updating this notebook as I go, so expect some sections to be missing\/incomplete. I welcome comments if you have thoughts!","fd9a8c93":"Taking a look at New York, we can see that indeed, a linear curve doesn't quite grow fast enough, and that an exponential fit is much more accurate.","6f39235e":"## Which States are Doing the Best? The Worst?\n\nBelow (hidden) are some functions to create consistent plots across the set of comparisons we're making. Then we can look at the data: which states have the most and least deaths, cases, and tests?","4430d596":"Even Washington, where social distancing began much sooner, still looks somewhat exponential, although the fit quality of linear vs. exponential growth is less clear.","1ea2ea70":"Now that we've filled in all the NaNs, let's do a visual check to make sure all values in the dataframe are indeed defined (in this case, we expect the heatmap to be all black).","d98ba6c6":"## Linear vs Exponential Growth\n\nOne of the main concerns about covid growth is: are the number of cases growing linearly, or exponentially? Here we'll look at if the growth looks more linear or exponential, by state.\n\nWe'll start with the example of New York, since it currently has the largest number of cases by far.","5066da1a":"### Which states have the most\/least positive cases?","e9858473":"Here we see that the r squared value for the exponential fit is much higher, and thus likely a better fit for New York case growth over time. This begs the question: which states currently trend towards exponential case growth? The hidden code below calculates linear and exponential fits for all states.","7e43245f":"## Data Imports and Cleaning\n\nGrab the data from Kaggle and all the python packages we'll need for analysis.","95866d5c":"Sidenote: as a friendly math reminder, if $y = e^{mx} e^b$ is a good fit for the data, then\n\\begin{align}\ny &= e^{mx} e^b \\\\\ne^{log(y)} &= e^{m x + b} \\\\\nlog(y)&=m x + b \\\\\n\\end{align}\n\nmeaning $log(y)=m x + b$ will a good linear fit.","03032d39":"## United States Covid-19: Where should we be the most concerned?","a9b1de04":"Hidden below is code to fit and plot linear and exponential functions to a state's number of positive cases over time.","37abc5c2":"And finally, let's take a look at our dataframe and see that all the columns we want are now there and look roughly reasonable!","627335ac":"So how can we determine which states are growing at an exponential rate, vs a linear rate? We can look at the quality of a linear vs exponential fit by taking a look at the r squared value of each fit.","697cd18d":"And contrast that with a more linear state (one on the right) like Virginia:","f4e1d2f6":"There is some variation in the exponential base value, ranging from close to 1.0 to as high as 1.5. As you'd expect, the states with lower exponential base values are the ones with the highest linear fit r squared values (and thus look the most linear). There doesn't look like there's much correlation between the exponential fit r squared values and the exponential base, but all of those r squared values are so high that the difference between them is negligible.","820d1416":"Excellent. We can now start to answer some concrete questions.","221c2065":"Plotting the linear vs exponential r squared values per state, we see that in general exponential fits tend to do better, while linear fits have a wide variety of success rates.","e49ed2df":"Looking at the data, we see a fair number of null values we'll need to fill in and some columns we might want to add. Specifically, we'll clean the data by:\n - changing the string dates to datetimes for easier use\n - filling in NaN values via forward filling, setting the first date to 0 positive cases\/deaths if that value is NaN\n - Adding a death rate column, where death rate = num deaths\/num positive cases\n - Renaming some columns and dropping columns we won't use.","61d9ebc1":"Whether or not a state's number of cases is growing at an exponential rate is one thing, but what about the rate of that exponential growth? Below, we rank states based on the exponent base in their exponential fit.","c56c7bf2":"### Which states have the most\/least number of deaths?"}}