{"cell_type":{"b20c4b18":"code","4e3d0d0b":"code","4d762382":"code","981d3ed0":"code","d8342cf1":"code","8a2368fe":"code","02787780":"code","e7044372":"code","10e3438e":"code","fea7fddf":"code","b8cc4b6e":"code","f2161a90":"code","05cf21d5":"code","40c9551c":"code","7d96cd9f":"code","8f3090ff":"code","492417af":"code","424c0453":"code","bfc5f822":"code","7d45e84f":"code","a2352d2a":"code","aba2e833":"code","7138b01f":"code","00798a30":"code","8aa488d0":"code","51538907":"code","2256c19e":"code","7da9be84":"code","90754131":"code","f41a2a5b":"code","e17350cf":"code","76d6e895":"code","1558c09d":"code","c686d7dc":"code","95f36467":"code","192c410b":"code","57185944":"code","22328dce":"code","dbbe407c":"code","e51f0054":"code","21ec5521":"code","0b4bcd70":"code","1a7da01b":"code","25bf6b39":"code","f1a86911":"code","4057e135":"code","b5fb7855":"code","2b49cf39":"code","abb0289e":"code","8d23f699":"code","84daa6be":"code","f6880638":"code","6a9d49bb":"code","7d751932":"code","8456bab0":"code","d23d9883":"code","05fd1233":"code","f40e90cb":"code","29f04e2f":"code","b2d5b39b":"code","ef33d718":"code","c476e30e":"code","fb7d5add":"code","4edc99bd":"code","12cf9c54":"code","b445d44a":"code","08796896":"code","5d063d03":"code","6690efcb":"code","baf93b0c":"code","30784c12":"code","c4b40139":"code","cec3ed31":"code","79f02381":"code","ca0847c9":"code","013bf71b":"code","c05b7eed":"code","8697019b":"code","3978a57e":"code","8c8994bd":"code","3d8235da":"code","9937662f":"code","7beb8c26":"code","13e0bd3c":"code","6bd1af00":"markdown","766f0296":"markdown","851d76f2":"markdown","751a6fad":"markdown","d83db209":"markdown","3e0498ce":"markdown","715e1176":"markdown","de835b2c":"markdown","f11492c2":"markdown","d5d3386c":"markdown","423f2c61":"markdown","882c7223":"markdown","6c42fcfe":"markdown","62def1e8":"markdown","a1e0ff7e":"markdown","1bef6344":"markdown","bec89794":"markdown","2da467bd":"markdown","0435522b":"markdown","71171c52":"markdown","6cf76bf0":"markdown","a78ae88f":"markdown","c5f33852":"markdown","d3d0f3c4":"markdown","d17c4d4b":"markdown","f91d0288":"markdown","930be32f":"markdown","62983079":"markdown","250eea11":"markdown","8580226a":"markdown","3079f459":"markdown","eeb0d297":"markdown","2e9344bd":"markdown"},"source":{"b20c4b18":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\nimport pandas as pd\nimport requests, json\nimport time\nimport traceback","4e3d0d0b":"models_dict = {'AC':3,'AMC':4,'AURUS':10,'Acura':145,'Adler':4,'Alfa Romeo':145,'Alpina':10,'Ariel':1,'Aro':7,'Asia':7,'Aston Martin':20,'Auburn':1,'Audi':11130,'Austin':2,\\\n               'BAIC':2,'BMW':16647,'BYD':125,'Bentley':173,'Borgward':1,'Brabus':2,'Brilliance':94,'Bugatti':1,'Buick':44,'CHERYEXEED':78,'Cadillac':692,'Chana':1,'ChangFeng':3,\\\n               'Changan':484,'Changhe':2,'Chery':3429,'Chevrolet':12926,'Chrysler':650,'Citroen':2421,'DKW':1,'DS':5,'DW Hower':18,'Dacia':43,'Dadi':5,'Daewoo':4992,'Daihatsu':373,\\\n               'Daimler':1,'Datsun':1219,'Delage':1,'Derways':14,'Dodge':771,'DongFeng':51,'Doninvest':23,'Eagle':3,'FAW':277,'FSO':2,'Ferrari':29,'Fiat':909,'Fisker':1,'Ford':12124,\\\n               'Foton':10,'GAC':10,'GMC':45,'Geely':2060,'Genesis':83,'Geo':8,'Great Wall':900,'Hafei':47,'Haima':99,'Hanomag':1,'Haval':1339,'Hawtai':10,'Heinkel':1,'Honda':5698,\\\n               'HuangHai':2,'Hudson':1,'Hummer':162,'Hyundai':23231,'Infiniti':1935,'Iran Khodro':79,'Isuzu':149,'JAC':80,'Jaguar':717,'Jeep':937,'Jinbei':7,'Kia':20809,'LADA (\u0412\u0410\u0417)':77398,\\\n               'LTI':1,'Lamborghini':16,'Lancia':33,'Land Rover':3476,'Landwind':3,'Lexus':3932,'Lifan':2209,'Ligier':1,'Lincoln':186,'Luxgen':23,'MG':19,'MINI':1042,'Mahindra':4,'Marussia':1,\\\n               'Maruti':1,'Maserati':97,'Maybach':11,'Mazda':8327,'McLaren':3,'Mercedes-Benz':21671,'Mercury':37,'Metrocab':1,'Mitsubishi':11276,'Mitsuoka':4,'Nissan':19415,'Oldsmobile':16,\\\n               'Opel':9582,'PUCH':7,'Packard':1,'Peugeot':4462,'Plymouth':21,'Pontiac':113,'Porsche':1590,'Proton':12,'RAM':32,'Ravon':291,'Renault':19025,'Renault Samsung':2,'Rolls-Royce':57,\\\n               'Rover':222,'SEAT':214,'Saab':271,'Saturn':33,'Scion':19,'Shanghai Maple':8,'ShuangHuan':2,'Simca':1,'Skoda':9601,'Smart':165,'SsangYong':1840,'Subaru':2436,'Suzuki':2940,'TATA':4,\\\n               'Talbot':1,'Tatra':4,'Tesla':152,'Tianma':2,'Tianye':10,'Toyota':24191,'Trabant':4,'Triumph':3,'Vauxhall':1,'Volkswagen':19792,'Volvo':3346,'Vortex':395,'Wanderer':5,'Wartburg':3,\\\n               'Willys':13,'Xin Kai':3,'Yulon':1,'ZX':15,'Zibar':1,'Zotye':85,'\u0410\u0432\u0442\u043e\u043a\u0430\u043c':1,'\u0413\u0410\u0417':4318,'\u0413\u043e\u043d\u043e\u0447\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c':6,'\u0417\u0410\u0417':1380,'\u0417\u0418\u041b':7,'\u0417\u0438\u0421':3,'\u0418\u0416':626,'\u041a\u0430\u043d\u043e\u043d\u0438\u0440':1,'\u041b\u0443\u0410\u0417':299,'\u041c\u043e\u0441\u043a\u0432\u0438\u0447':671,\\\n               '\u0421\u041c\u0417':21,'\u0422\u0430\u0433\u0410\u0417':189,'\u0423\u0410\u0417':5713}","4d762382":"# \u0443\u0431\u0435\u0440\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043d\u0438\u0436\u0435 300 \u0438 \u043f\u043e\u0432\u044b\u0441\u0438\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \nlist_keys_to_delete = []\nfor mark in models_dict.keys():\n    if models_dict[mark] < 300:\n        list_keys_to_delete.append(mark)\n    \nfor key in list_keys_to_delete: del models_dict[key]\n\nfor mark in list(models_dict.keys()):\n    mark_up = mark.upper()\n    models_dict[mark_up]=models_dict.pop(mark)","981d3ed0":"# \u0423\u0434\u0430\u043b\u0438\u043c \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nfor key in ['LADA (\u0412\u0410\u0417)','\u0413\u0410\u0417','\u0423\u0410\u0417', '\u0417\u0410\u0417', '\u0418\u0416', '\u041c\u041e\u0421\u041a\u0412\u0418\u0427']: del models_dict[key]","d8342cf1":"# \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\nmodels_dict['GREAT_WALL']=models_dict.pop('GREAT WALL')\nmodels_dict['LAND_ROVER']=models_dict.pop('LAND ROVER')\nmodels_dict['MERCEDES']=models_dict.pop('MERCEDES-BENZ')\nmodels_dict['SSANG_YONG']=models_dict.pop('SSANGYONG')","8a2368fe":"# \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\n\nmodels_dict = {'AUDI': 11130,  'BMW': 16647,  'CADILLAC': 692,  'CHANGAN': 484,  'CHERY': 3429,  'CHEVROLET': 12926,  'CHRYSLER': 650,  'CITROEN': 2421,\n 'DAEWOO': 4992,  'DAIHATSU': 373,  'DATSUN': 1219,  'DODGE': 771,  'FIAT': 909,  'FORD': 12124,  'GEELY': 2060,  'HAVAL': 1339,  'HONDA': 5698,\n 'HYUNDAI': 23231,  'INFINITI': 1935,  'JAGUAR': 717,  'JEEP': 937,  'KIA': 20809,  'LEXUS': 3932,  'LIFAN': 2209,  'MINI': 1042,  'MAZDA': 8327,\n 'MITSUBISHI': 11276,  'NISSAN': 19415,  'OPEL': 9582,  'PEUGEOT': 4462,  'PORSCHE': 1590,  'RENAULT': 19025,  'SKODA': 9601,  'SUBARU': 2436, \n 'SUZUKI': 2940,  'TOYOTA': 24191,  'VOLKSWAGEN': 19792,  'VOLVO': 3346,  'VORTEX': 395,  'GREAT_WALL': 900,  'LAND_ROVER': 3476, 'MERCEDES': 21671,\n 'SSANG_YONG': 1840}","02787780":"# headers \u043d\u0430\u0448\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435\nHEADERS = {\n    'Accept': '*\/*',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',\n    'Connection': 'keep-alive',\n    'Content-Length':'103',\n    'content-type':'application\/json',\n    'Cookie':'autoru_gdpr=1; _csrf_token=0b9bfe638dd0b95a7c3ac9b3fd59d540eae8102094150176; autoru_sid=a%3Ag60697fdd20d5osjl7hjk5o65qso5f3m.bbec9e47fe6c357861dac8894dd324be%7C1617526749509.604800.Rmi4CAt4gY8VoAVCNf8yGA.WhKyb55vGRLnuhVwmAYw-WpbpGJhnU11ZIgNnQ0xwlQ; autoruuid=g60697fdd20d5osjl7hjk5o65qso5f3m.bbec9e47fe6c357861dac8894dd324be; suid=8b392ef0642f31eba6e490553b2a8876.aa730c703f9c9a4f5e66993fe8c916ea; from_lifetime=1617559952775; from=direct; yuidlt=1; yandexuid=8768961311617526753; cmtchd=MTYxNzUyNjc2MDU5Ng==; gdpr=0; cycada=p92JQFOQLJpa73XwSOM\/xy61EE8dGReKfzAjoY3mt3A=; _ym_uid=1617526759299819712; _ym_d=1617559952; _ym_isad=2; mindboxDeviceUUID=ab564749-0f98-40b1-89d2-41b766a1c42d; directCrm-session=%7B%22deviceGuid%22%3A%22ab564749-0f98-40b1-89d2-41b766a1c42d%22%7D; _ga=GA1.2.1029486733.1617532156; _gid=GA1.2.1469364259.1617532156; tmr_reqNum=3; tmr_lvid=bf1506bfca36781b64ee3b80ce17ae53; tmr_lvidTS=1617532156060; X-Vertis-DC=vla',\n    'Host': 'auto.ru',\n    'Origin':'https:\/\/auto.ru',\n    'Referer':'https:\/\/auto.ru\/',\n    'User-Agent':'Mozilla\/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko\/20100101 Firefox\/87.0',\n    'x-client-app-version':'5f535b6dbd',\n    'x-client-date':'1617559954352',\n    'x-csrf-token':'0b9bfe638dd0b95a7c3ac9b3fd59d540eae8102094150176',\n    'x-page-request-id':'52e324b5b6813d1a9c9635b956cb5b85',\n    'x-requested-with':'fetch'\n}","e7044372":"url = 'https:\/\/auto.ru\/-\/ajax\/desktop\/listing\/' # \u0443\u0440\u043b \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\n\ndf_list = [] # \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0441\u043f\u0430\u0440\u0448\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\npage_dict = {} # \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0430\u0440\u0441\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0441\u044f\n\nfor pages in range(1,100): # \u0432\u0441\u0435\u0433\u043e \u0441\u0430\u0439\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 99 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 - \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\n    for model in models_dict: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n        if models_dict[model] > (pages * 37): # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0432\u043e\u043e\u0431\u0449\u0435 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u043e \u044d\u0442\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n            time.sleep(1) # \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u043c\u0435\u0436\u0434\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043d\u0430\u0448 IP\n            param = {\"catalog_filter\":[{\"mark\":model}],\"section\":\"all\",\"category\":\"cars\", \"page\": pages} # \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n            try:\n                response = requests.post(url, data=json.dumps(param), headers = HEADERS) # \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n                data = response.json()\n                if data['status'] == 'SUCCESS': # \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0445\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043d\u0430\u0448 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\n                    for elem in data['offers']:\n                        try:\n                            df_list.append(elem)\n                        except:\n                            print(df_list)\n                        page_dict.update({model: pages}) # \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430   \n                    # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430\n                    pd.DataFrame([page_dict]).to_csv(r'pars_models.csv', index=False) # \u0430 \u0442\u0430\u043a\u0436\u0435 \u0444\u0430\u0439\u043b \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0433\u0434\u0435 \u043f\u0430\u0440\u0441\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0441\u044f\n            except:\n                print(data['status']) # \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\n                print(model,pages, traceback.format_exc()) # \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c, \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u0441\u0443\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438\n\npd.DataFrame(df_list).to_csv(r'autoru.csv', index=False) # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432\u0441\u0451 \u0432 \u0444\u0430\u0439\u043b (\u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0434\u0435\u043b\u0430\u043b \u0432 \u0442\u0440\u0438 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438)\n!cp autoru.csv \"\/content\/drive\/My Drive\/Data Science\/SF\/auto.ru\/\" # \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0444\u0430\u0439\u043b \u043a \u0441\u0435\u0431\u0435 \u0432 \u0433\u0443\u0433\u043b \u0434\u0438\u0441\u043a","10e3438e":"df_t = pd.DataFrame(df_list) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0441\u043f\u0430\u0440\u0448\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ndf_t = df_t.drop_duplicates(subset=['id']) # \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b","fea7fddf":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0441\u0430\u043c\u044b\u043c\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\ndf_tnew = pd.DataFrame()\n\ndf_tnew['bodyType'] = ''\ndf_tnew['brand'] = ''\ndf_tnew['color'] = df_t['color_hex']\ndf_tnew['complectation_dict'] = ''\ndf_tnew['description'] = df_t['description']\ndf_tnew['engineDisplacement'] = ''\ndf_tnew['enginePower'] = ''\ndf_tnew['equipment_dict'] = ''\ndf_tnew['fuelType'] = ''\ndf_tnew['mileage'] = ''\ndf_tnew['modelDate'] = ''\ndf_tnew['model_info'] = ''\ndf_tnew['model_name'] = ''\ndf_tnew['name'] = ''\ndf_tnew['numberOfDoors'] = ''\ndf_tnew['priceCurrency'] = 'RUB'\ndf_tnew['productionDate'] = ''\ndf_tnew['sell_id'] = df_t['saleId']\ndf_tnew['super_gen'] = ''\ndf_tnew['vehicleConfiguration'] = ''\ndf_tnew['vehicleTransmission'] = ''\ndf_tnew['vendor'] = ''\ndf_tnew['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = ''\ndf_tnew['\u041f\u0422\u0421'] = ''\ndf_tnew['\u041f\u0440\u0438\u0432\u043e\u0434'] = ''\ndf_tnew['\u0420\u0443\u043b\u044c'] = ''\ndf_tnew['id'] = df_t['id']\ndf_tnew['price'] = ''","b8cc4b6e":"def first_level(df, new_df, column, parametr, new_parametr):\n    iterator = 0\n    for x in df[column]:\n        if x is not None:\n            try:\n                new_df[new_parametr][iterator] = eval(x)[parametr]\n            except:\n                new_df[new_parametr][iterator] = ''\n        iterator += 1\n        \ndef second_level(df, new_df, column, parametr_1, parametr_2, new_parametr):\n    iterator = 0\n    for x in df[column]:\n        if x is not None:\n            try:\n                new_df[new_parametr][iterator] = eval(x)[parametr_1][parametr_2]\n            except:\n                new_df[new_parametr][iterator] = ''\n        iterator += 1","f2161a90":"first_level(df_t, df_tnew, 'vehicle_info', 'complectation', 'complectation_dict')\nfirst_level(df_t, df_tnew, 'vehicle_info', 'equipment', 'equipment_dict')\nfirst_level(df_t, df_tnew, 'state', 'mileage', 'mileage')\nfirst_level(df_t, df_tnew, 'vehicle_info', 'model_info', 'model_info')\nfirst_level(df_t, df_tnew, 'documents', 'year', 'productionDate')\nfirst_level(df_t, df_tnew, 'vehicle_info', 'tech_param', 'super_gen')\nfirst_level(df_t, df_tnew, 'vehicle_info', 'vendor', 'vendor')\nfirst_level(df_t, df_tnew, 'documents', 'owners_number', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b')\nfirst_level(df_t, df_tnew, 'documents', 'pts', '\u041f\u0422\u0421')\nfirst_level(df_t, df_tnew, 'vehicle_info', 'steering_wheel', '\u0420\u0443\u043b\u044c')\nfirst_level(df_t, df_tnew, 'price_info', 'price', 'price')\nsecond_level(df_t, df_tnew, 'vehicle_info', 'configuration', 'human_name', 'bodyType')\nsecond_level(df_t, df_tnew, 'vehicle_info', 'mark_info', 'code', 'brand')\nsecond_level(df_t, df_tnew, 'vehicle_info', 'tech_param', 'human_name', 'engineDisplacement')\nsecond_level(df_t, df_tnew, 'vehicle_info', 'tech_param', 'power', 'enginePower')\nsecond_level(df_t, df_tnew, 'vehicle_info', 'super_gen', 'year_from', 'modelDate')\nsecond_level(df_t, df_tnew, 'vehicle_info', 'model_info', 'code', 'model_name')\nsecond_level(df_t, df_tnew, 'vehicle_info', 'tech_param', 'human_name', 'name')\nsecond_level(df_t, df_tnew, 'vehicle_info', 'configuration', 'doors_count', 'numberOfDoors')\nsecond_level(df_t, df_tnew, 'vehicle_info', 'tech_param', 'transmission', 'vehicleTransmission')","05cf21d5":"# \u043f\u0430\u0440\u0430 \u0440\u0443\u0447\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043d\u0435\u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\niterator = 0\nfor x in df_t['lk_summary']:\n    if x is not None:        \n        try:\n            df_tnew['fuelType'][iterator] = x.split(' ')[-1]\n        except:\n            df_tnew['fuelType'][iterator] = ''\n    iterator += 1\n    \niterator = 0\nfor x in df_t['lk_summary']:\n    if x is not None:        \n        try:\n            df_tnew['\u041f\u0440\u0438\u0432\u043e\u0434'][iterator] = x.split(' ')[-2][:-1]\n        except:\n            df_tnew['\u041f\u0440\u0438\u0432\u043e\u0434'][iterator] = ''\n    iterator += 1\n\niterator = 0\nfor x in df_tnew['engineDisplacement']:    \n    df_tnew['engineDisplacement'][iterator] = str(x[:3]) + ' LTR'\n    iterator += 1\n    \niterator = 0\nfor x in df_tnew['enginePower']:\n    df_tnew['enginePower'][iterator] = str(x) + ' N12'\n    iterator += 1\n\niterator = 0\nfor x in df_tnew['sell_id']:\n    df_tnew['sell_id'][iterator] = str(x[:10])\n    iterator += 1\n    \niterator = 0\nfor x in df_t['vehicle_info']:\n    if x is not None:\n        try:\n            df_tnew['vehicleConfiguration'][iterator] = \\\n            eval(x)['configuration']['body_type'] + ' ' + \\\n            eval(x)['tech_param']['transmission'] + ' ' + \\\n            eval(x)['tech_param']['human_name'][:3]\n        except:\n            df_tnew['vehicleConfiguration'][iterator] = ''\n    iterator += 1","40c9551c":"# \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u043e\u0432\ncolor_dict = {'040001' : '\u0447\u0451\u0440\u043d\u044b\u0439', 'FAFBFB' : '\u0431\u0435\u043b\u044b\u0439', '97948F' : '\u0441\u0435\u0440\u044b\u0439', 'CACECB' : '\u0441\u0435\u0440\u0435\u0431\u0440\u0438\u0441\u0442\u044b\u0439', '0000CC' : '\u0441\u0438\u043d\u0438\u0439', 'EE1D19' : '\u043a\u0440\u0430\u0441\u043d\u044b\u0439', \\\n              '200204' : '\u043a\u043e\u0440\u0438\u0447\u043d\u0435\u0432\u044b\u0439', '007F00' : '\u0437\u0435\u043b\u0451\u043d\u044b\u0439', 'C49648' : '\u0431\u0435\u0436\u0435\u0432\u044b\u0439', '22A0F8' : '\u0433\u043e\u043b\u0443\u0431\u043e\u0439', 'DEA522' : '\u0437\u043e\u043b\u043e\u0442\u0438\u0441\u0442\u044b\u0439', '660099' : '\u043f\u0443\u0440\u043f\u0443\u0440\u043d\u044b\u0439', \\\n              'FF8649' : '\u043e\u0440\u0430\u043d\u0436\u0435\u0432\u044b\u0439', '4A2197' : '\u0444\u0438\u043e\u043b\u0435\u0442\u043e\u0432\u044b\u0439', 'FFD600' : '\u0436\u0451\u043b\u0442\u044b\u0439', 'FFC0CB' : '\u0440\u043e\u0437\u043e\u0432\u044b\u0439'}\n\niterator = 0\nfor x in df_tnew['color']:\n    df_tnew['color'][iterator] = color_dict[x]    \n    iterator += 1","7d96cd9f":"len(df_tnew)","8f3090ff":"df_tnew.to_csv('train.csv') # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u043c \u043d\u0430\u0448 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0432 \u0444\u0430\u0439\u043b","492417af":"import numpy as np # linear algebra\nimport sys\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\n\nimport warnings\n#warnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport re","424c0453":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","bfc5f822":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","7d45e84f":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","a2352d2a":"VERSION    = 1\nDIR_TRAIN  = '..\/input\/autoru\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0441\u0432\u043e\u0439 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nDIR_TEST   = '..\/input\/sf-dst-car-price-prediction\/'\nVAL_SIZE   = 0.33   # 33%\nN_FOLDS    = 5\n\n# CATBOOST\nITERATIONS = 2000\nLR         = 0.1","aba2e833":"!ls ..\/input\/","7138b01f":"train = pd.read_csv(DIR_TRAIN+'train.csv') # \u043c\u043e\u0439 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntest = pd.read_csv(DIR_TEST+'test.csv')\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')","00798a30":"test.info()","8aa488d0":"train.info()","51538907":"# \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ntest.drop(['\u0422\u0430\u043c\u043e\u0436\u043d\u044f', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', 'car_url', 'image', 'parsing_unixtime', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'priceCurrency'], axis=1, inplace=True,)\ntrain.drop(['id', 'priceCurrency'], axis=1, inplace=True,)\n\n# \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u043f\u0435\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c,     \ntest.drop(['description', 'complectation_dict', 'equipment_dict', 'super_gen', 'model_info'], axis=1, inplace=True,)\ntrain.drop(['description', 'complectation_dict', 'equipment_dict', 'super_gen', 'model_info'], axis=1, inplace=True,)","2256c19e":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntest.isna().sum()","7da9be84":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntest['\u041f\u0422\u0421'].value_counts()","90754131":"# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntest['\u041f\u0422\u0421'] = test['\u041f\u0422\u0421'].fillna(test['\u041f\u0422\u0421'].value_counts().index[0])","f41a2a5b":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntrain.isna().sum()","e17350cf":"train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].value_counts() # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432.","76d6e895":"train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna(0) # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","1558c09d":"train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].astype('str')\ntrain['numberOfDoors'] = train['numberOfDoors'].astype('str')","c686d7dc":"iterator = 0\nfor x in train.isna().sum():\n    col = train.isna().sum().index[iterator] # \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n    if x < 200:\n        train = train.dropna(subset=[col]) # \u0432\u0441\u0451 \u0447\u0442\u043e \u043c\u0435\u043d\u044c\u0448\u0435 200 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 - \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n    else:\n        train[col] = train[col].fillna(train[col].value_counts().index[0]) # \u0433\u0434\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 200 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 - \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u044f\u0447\u0435\u0439\u043a\u0438 \u0441\u0430\u043c\u044b\u043c\u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\n    iterator += 1","95f36467":"num_cols = ['mileage', 'modelDate', 'productionDate', 'price']\n\n# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nplt.figure(figsize=(20, 10))\niterator = 1\nfor i in num_cols:\n    plt.subplot(2, 2, iterator)\n    train[i].hist(bins=100)\n    plt.title(i)\n    iterator += 1","192c410b":"for x in num_cols:\n    print(train[x].value_counts())","57185944":"train.loc[train['mileage'] == 0, 'mileage'] = train[train['mileage'] > 0]['mileage'].mean()","22328dce":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\ndef remove_outlier(df_in, col_name):\n    q1 = df_in[col_name].quantile(0.25)\n    q3 = df_in[col_name].quantile(0.75)\n    iqr = q3-q1 #Interquartile range\n    fence_low  = q1-1.5*iqr\n    fence_high = q3+1.5*iqr\n    df_out = df_in.loc[(df_in[col_name] > fence_low) & (df_in[col_name] < fence_high)]\n    return df_out","dbbe407c":"# \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e\ntrain = remove_outlier(train, 'modelDate')\ntrain = remove_outlier(train, 'productionDate')\ntrain = remove_outlier(train, 'price')\ntrain = remove_outlier(train, 'mileage')\ntrain = train.reset_index(drop=True)","e51f0054":"len(train)","21ec5521":"num_cols = ['mileage', 'modelDate', 'productionDate', 'price']\n\n# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nplt.figure(figsize=(20, 10))\niterator = 1\nfor i in num_cols:\n    plt.subplot(2, 2, iterator)\n    train[i].hist(bins=100)\n    plt.title(i)\n    iterator += 1","0b4bcd70":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(train.drop(['price', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'], axis=1).corr(),)","1a7da01b":"train_LR = train.copy()","25bf6b39":"train_LR = train_LR[train_LR['bodyType'].isin(train_LR['bodyType'].value_counts()[:10].index)]\ntrain_LR = train_LR.reset_index(drop=True)","f1a86911":"train_LR = pd.get_dummies(train_LR, columns=['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', 'brand', 'vendor', 'bodyType'])","4057e135":"train['bodyType'].value_counts(ascending=True).plot(kind='barh')","b5fb7855":"# \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u043c\u0430\u043b\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b bodyType\ntrain = train[train['bodyType'].isin(train['bodyType'].value_counts()[:10].index)]\ntrain = train.reset_index(drop=True)","2b49cf39":"# \u0435\u0441\u0442\u044c \u044f\u0432\u043d\u044b\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c\ntrain['engineDisplacement'].value_counts(ascending=True).plot(kind='barh')","abb0289e":"# \u0438\u0437-\u0437\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0435 \u0432\u0435\u0440\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u0430\u044f \u043f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0430 LTR - \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u044d\u0442\u043e \u0438 \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u0442\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\nfor index, value in enumerate(train['engineDisplacement']):\n    train['engineDisplacement'][index] = re.sub(r'(\\d).*(\\d)(\\D*)', '\\\\1.\\\\2', value)","8d23f699":"# \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u043c\u0430\u043b\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b engineDisplacement\ntrain = train[train['engineDisplacement'].isin(train['engineDisplacement'].value_counts()[:30].index)]\ntrain = train.reset_index(drop=True)","84daa6be":"# \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 engineDisplacement \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ntrain['engineDisplacement'].value_counts().index","f6880638":"engineDisplacement_list = ['1.6', '2.0', '1.5', '1.4', '1.8', '3.0', '2.5', '2.4', '1.3', '1.2', '0.8', '3.5', '2.2', '1.7', '4.0', '2.3', '5.0', '3.6', '2.7', \\\n                           '1.0', '1.9', '4.4', '3.2', '2.8', '0.7']","6a9d49bb":"train = train[train['engineDisplacement'].isin(engineDisplacement_list)]\ntrain = train.reset_index(drop=True)","7d751932":"# \u0438\u0437-\u0437\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0435 \u0432\u0435\u0440\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u0430\u044f \u043f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0430 LTR - \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u044d\u0442\u043e \u0438 \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u0442\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\nfor index, value in enumerate(train['engineDisplacement']):\n    train['engineDisplacement'][index] = re.sub(r'(\\d).*(\\d)', '\\\\1\\\\2', value)","8456bab0":"# \u0435\u0441\u0442\u044c \u044f\u0432\u043d\u044b\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c\ntrain['enginePower'].value_counts(ascending=True).plot(kind='barh')","d23d9883":"# \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0442\u043e\u0436\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439\nfor index, value in enumerate(train['enginePower']):\n    train['enginePower'][index] = re.sub(r'(\\d*)\\s(12)$', '\\\\1', value)","05fd1233":"# \u0435\u0441\u0442\u044c \u044f\u0432\u043d\u044b\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c\ntrain['vehicleConfiguration'].value_counts(ascending=True).plot(kind='barh')","f40e90cb":"train['vehicleConfiguration'].value_counts()[:200].sum()","29f04e2f":"# \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u043c\u0430\u043b\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b engineDisplacement\ntrain = train[train['vehicleConfiguration'].isin(train['vehicleConfiguration'].value_counts()[:200].index)]\ntrain = train.reset_index(drop=True)","b2d5b39b":"# \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 float \u0432 int (\u0438\u043d\u0430\u0447\u0435 catboost \u0432\u044b\u0434\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443)\ntrain_preproc = train.copy()\nfor feature in ['mileage', 'modelDate', 'productionDate', 'engineDisplacement', 'enginePower']:\n    train_preproc[feature]=train_preproc[feature].astype('int32')\n    \nX_sub = test.copy()\nfor feature in ['mileage', 'modelDate', 'productionDate']:\n    X_sub[feature]=X_sub[feature].astype('int32')","ef33d718":"def preproc_data(df_input):\n    '''includes several functions to pre-process the predictor data.'''\n    \n    df_output = df_input.copy()    \n        \n    # ################### Feature Engineering ####################################################\n    # \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0442\u0447\u0435\u0439\n    \n    # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    df_output['\u041f\u0422\u0421'] = df_output['\u041f\u0422\u0421'].fillna(df_output['\u041f\u0422\u0421'].value_counts().index[0])\n\n    df_output['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = df_output['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna(0) # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n\n    df_output['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = df_output['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].astype('str')\n    df_output['numberOfDoors'] = df_output['numberOfDoors'].astype('str')\n\n    iterator = 0\n    for x in df_output.isna().sum():\n        col = df_output.isna().sum().index[iterator] # \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n        if x < 200:\n            df_output = df_output.dropna(subset=[col]) # \u0432\u0441\u0451 \u0447\u0442\u043e \u043c\u0435\u043d\u044c\u0448\u0435 200 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 - \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n        else:\n            df_output[col] = df_output[col].fillna(df_output[col].value_counts().index[0]) # \u0433\u0434\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 200 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 - \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u044f\u0447\u0435\u0439\u043a\u0438 \u0441\u0430\u043c\u044b\u043c\u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\n        iterator += 1\n    \n    # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\n    df_output.loc[df_output['mileage'] == 0, 'mileage'] = df_output[df_output['mileage'] > 0]['mileage'].mean()\n\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n    def remove_outlier(df_in, col_name):\n        q1 = df_in[col_name].quantile(0.25)\n        q3 = df_in[col_name].quantile(0.75)\n        iqr = q3-q1 #Interquartile range\n        fence_low  = q1-1.5*iqr\n        fence_high = q3+1.5*iqr\n        df_out = df_in.loc[(df_in[col_name] > fence_low) & (df_in[col_name] < fence_high)]\n        return df_out\n\n    # \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n    df_output = remove_outlier(df_output, 'modelDate')\n    df_output = remove_outlier(df_output, 'productionDate')\n    try:\n        df_output = remove_outlier(df_output, 'price')\n    except:\n        df_output = df_output\n    df_output = remove_outlier(df_output, 'mileage')\n    df_output = df_output.reset_index(drop=True)\n\n    # \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u043c\u0430\u043b\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b bodyType\n    df_output = df_output[df_output['bodyType'].isin(df_output['bodyType'].value_counts()[:10].index)]\n    df_output = df_output.reset_index(drop=True)\n    \n    # \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0442\u043e\u0436\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439\n    for index, value in enumerate(df_output['enginePower']):\n        df_output['enginePower'][index] = re.sub(r'(\\d*).*(12)$', '\\\\1', value)\n\n    # \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u043c\u0430\u043b\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b vehicleConfiguration\n    df_output = df_output[df_output['vehicleConfiguration'].isin(df_output['vehicleConfiguration'].value_counts()[:200].index)]\n    df_output = df_output.reset_index(drop=True)\n    \n    # ################### fix ############################################################## \n    # \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 float \u0432 int (\u0438\u043d\u0430\u0447\u0435 catboost \u0432\u044b\u0434\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443)\n    for feature in ['mileage', 'modelDate', 'productionDate', 'enginePower']:\n        df_output[feature]=df_output[feature].astype('int32')\n    \n    return df_output","c476e30e":"def preproc_data_test(df_input):\n    '''includes several functions to pre-process the predictor data.'''\n    \n    df_output = df_input.copy()    \n        \n    # ################### Feature Engineering ####################################################\n    # \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0442\u0447\u0435\u0439\n    \n    # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    df_output['\u041f\u0422\u0421'] = df_output['\u041f\u0422\u0421'].fillna(df_output['\u041f\u0422\u0421'].value_counts().index[0])\n\n    df_output['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = df_output['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna(0) # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n\n    df_output['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = df_output['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].astype('str')\n    df_output['numberOfDoors'] = df_output['numberOfDoors'].astype('str')\n       \n    # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\n    df_output.loc[df_output['mileage'] == 0, 'mileage'] = df_output[df_output['mileage'] > 0]['mileage'].mean()\n    \n    # \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0442\u043e\u0436\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439\n    for index, value in enumerate(df_output['enginePower']):\n        df_output['enginePower'][index] = re.sub(r'(\\d*).*(12)$', '\\\\1', value)\n    \n    # ################### fix ############################################################## \n    # \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 float \u0432 int (\u0438\u043d\u0430\u0447\u0435 catboost \u0432\u044b\u0434\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443)\n    for feature in ['mileage', 'modelDate', 'productionDate', 'enginePower']:\n        df_output[feature]=df_output[feature].astype('int32')\n    \n    return df_output","fb7d5add":"train_preproc = preproc_data(train)\nX_sub = preproc_data_test(test)","4edc99bd":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score","12cf9c54":"random_forest = RandomForestRegressor(random_state = RANDOM_SEED)\n\nX_RF = train_preproc[['mileage', 'modelDate', 'productionDate', 'enginePower']]\ny_RF = train_preproc.price.values\n\nX_RF_train, X_RF_test, y_RF_train, y_RF_test = train_test_split(X_RF, y_RF, test_size=0.3, random_state=RANDOM_SEED)\n\nscaler = StandardScaler()\nX_RF_train = scaler.fit_transform(X_RF_train)\nX_RF_test = scaler.transform(X_RF_test)\n\nrandom_forest.fit(X_RF_train, y_RF_train)\ny_RF_pred = random_forest.predict(X_RF_test)\n\nprint('MAPE: ', mape(y_RF_test, y_RF_pred))","b445d44a":"random_forest_out_of_bag = RandomForestRegressor(oob_score=True,random_state = RANDOM_SEED)\n\nrandom_forest_out_of_bag.fit(X_RF_train, y_RF_train)\nprint('oob_score: ', random_forest_out_of_bag.oob_score_)","08796896":"test_LR = test.copy()\n\ntest_LR = test_LR[test_LR['bodyType'].isin(test_LR['bodyType'].value_counts()[:10].index)]\ntest_LR = test_LR.reset_index(drop=True)\n\ntest_LR = pd.get_dummies(test_LR, columns=['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', 'brand', 'vendor', 'bodyType'])","5d063d03":"#train_LR = pd.get_dummies(train_LR, columns=['bodyType'])","6690efcb":"train_preproc = train_LR.copy()\nfor feature in ['mileage', 'modelDate', 'productionDate']:\n    train_preproc[feature]=train_preproc[feature].astype('int32')\n    \nX_sub = test_LR.copy()\nfor feature in ['mileage', 'modelDate', 'productionDate']:\n    X_sub[feature]=X_sub[feature].astype('int32')","baf93b0c":"# \u041f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f.\nfrom sklearn import preprocessing\nimport pandas as pd\n\nscaler = preprocessing.MinMaxScaler()\n\nd = scaler.fit_transform(train_preproc[['mileage', 'modelDate','productionDate']])\n\nscaled_df = pd.DataFrame(d, columns=['mileage', 'modelDate','productionDate'])\nscaled_df.head()","30784c12":"train_preproc[['mileage', 'modelDate','productionDate']]","c4b40139":"# \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e\nfrom sklearn.model_selection import train_test_split\n\nX_LR = train_preproc[['mileage', 'modelDate', 'productionDate', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_0.0', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_1.0', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_2.0', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_3.0', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_4.0',\\\n                     'brand_AUDI', 'brand_BMW', 'brand_CADILLAC', 'brand_CHANGAN', 'brand_CHERY','brand_CHEVROLET', 'brand_CHRYSLER', 'brand_CITROEN', 'brand_DAEWOO',\\\n                       'brand_DAIHATSU', 'brand_DATSUN', 'brand_DODGE', 'brand_FIAT','brand_FORD', 'brand_GEELY', 'brand_GREAT_WALL', 'brand_HAVAL',\\\n                       'brand_HONDA', 'brand_HYUNDAI', 'brand_INFINITI', 'brand_JAGUAR','brand_JEEP', 'brand_KIA', 'brand_LAND_ROVER', 'brand_LEXUS',\\\n                       'brand_LIFAN', 'brand_MAZDA', 'brand_MERCEDES', 'brand_MINI','brand_MITSUBISHI', 'brand_NISSAN', 'brand_OPEL', 'brand_PEUGEOT',\\\n                       'brand_PORSCHE', 'brand_RENAULT', 'brand_SKODA', 'brand_SSANG_YONG','brand_SUBARU', 'brand_SUZUKI', 'brand_TOYOTA', 'brand_VOLKSWAGEN',\\\n                       'brand_VOLVO', 'brand_VORTEX', 'bodyType_\u0412\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432.', 'bodyType_\u041a\u043e\u043c\u043f\u0430\u043a\u0442\u0432\u044d\u043d', 'bodyType_\u041a\u0443\u043f\u0435', 'bodyType_\u041b\u0438\u0444\u0442\u0431\u0435\u043a',\\\n                       'bodyType_\u041c\u0438\u043d\u0438\u0432\u044d\u043d', 'bodyType_\u0421\u0435\u0434\u0430\u043d', 'bodyType_\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b 5 \u0434\u0432.', 'bodyType_\u0425\u044d\u0442\u0447\u0431\u0435\u043a 3 \u0434\u0432.', 'bodyType_\u0425\u044d\u0442\u0447\u0431\u0435\u043a 5 \u0434\u0432.','bodyType_\u0425\u044d\u0442\u0447\u0431\u0435\u043a 5 \u0434\u0432. Stepway',\\\n                       'vendor_AMERICAN', 'vendor_CHINESE','vendor_EUROPEAN', 'vendor_JAPANESE', 'vendor_KOREAN','vendor_RUSSIAN'\n                     ]]\ny_LR = train_preproc.price.values\n\n# \u0422\u0435\u043f\u0435\u0440\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u044d\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \n# \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438. \u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0437\u0430\u0434\u0430\u0435\u043c 0,3.\nX_LR_train, X_LR_test, y_LR_train, y_LR_test = train_test_split(X_LR, y_LR, test_size=VAL_SIZE, random_state=RANDOM_SEED)\n\n# \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438:\nfrom sklearn.linear_model import LinearRegression\nLR_Model = LinearRegression() #\u041e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u043c, \u0447\u0442\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c - \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\nLR_Model.fit(X_LR_train,y_LR_train) #\u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","cec3ed31":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:\ny_LR_pred = LR_Model.predict(X_LR_test)\ny_LR_pred\n\ndef mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))\n\nprint(mape(y_LR_test, y_LR_pred))","79f02381":"X = train_preproc.drop(['price'], axis=1,)\ny = train_preproc.price.values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","ca0847c9":"X_train.nunique()","013bf71b":"# Keep list of all categorical features in dataset to specify this for CatBoost\ncat_features_ids = np.where(X_train.apply(pd.Series.nunique) < 4500)[0].tolist()","c05b7eed":"cat_features_ids","8697019b":"cat_features_ids = [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19]","3978a57e":"model = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE']\n                         )\nmodel.fit(X_train, y_train,\n         cat_features=cat_features_ids,\n         eval_set=(X_test, y_test),\n         verbose_eval=100,\n         use_best_model=True,\n         plot=True\n         )","8c8994bd":"model.save_model('catboost_single_model_baseline.model')","3d8235da":"predict_submission_RF = random_forest.predict(X_sub[['mileage', 'modelDate', 'productionDate', 'enginePower']])\npredict_submission_CB = model.predict(X_sub)","9937662f":"mean_arr = np.array([predict_submission_RF, predict_submission_CB])\nprice = mean_arr.mean(axis=0)","7beb8c26":"#predict_submission = model.predict(X_sub)\n#predict_submission","13e0bd3c":"sample_submission['price'] = price\nsample_submission.to_csv(f'submission_v{VERSION}.csv', index=False)\nsample_submission.head(10)","6bd1af00":"\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0443, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e \u0441\u0443\u0442\u0438 \u044d\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","766f0296":"\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e.","851d76f2":"\u0412\u0438\u0434\u0438\u043c \u043c\u043d\u043e\u0433\u043e \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 mileage. \u041a\u0440\u0430\u0439\u043d\u0435 \u043c\u0430\u043b\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0447\u0435\u043d\u044c \u0441\u0442\u0430\u0440\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0430\u0439\u043d\u0435 \u0440\u0435\u0434\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0446\u0435\u043d\u044b. \n\u041f\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 mileage \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435\u043c, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n\u0412 modelDate \u0438 productionDate - \u0443\u0434\u0430\u043b\u0438\u043c \u043a\u0440\u0430\u0439\u043d\u0435 \u0441\u0442\u0430\u0440\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.\n\u0412 price \u0443\u0434\u0430\u043b\u0438\u043c \u043a\u0440\u0430\u0439\u043d\u0435 \u0434\u043e\u0440\u043e\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.","751a6fad":"\u0412 \u043e\u0431\u0449\u0435\u043c \u043d\u0435 \u043f\u043b\u043e\u0445\u043e. \u041f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c 167 398 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439.\u0415\u0441\u043b\u0438 \u043f\u043e\u0438\u0433\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0441 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0434\u0440\u0443\u0433\u0438\u0435), \u0442\u043e \u0437\u0430 \u043d\u0435\u0434\u0435\u043b\u044c\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u0438\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430.","d83db209":"\u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0431\u0435\u0437 \u043a\u0430\u043a\u0438\u0445 \u043b\u0438\u0431\u043e \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0434\u0430\u0432\u0430\u043b\u0430 \u0443\u0436\u0430\u0441\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043a\u043e\u043b\u043e 2. \u041f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041c\u0410\u0420\u0415 \u0443\u0436\u0435 0,487. \u0414\u0432\u0438\u0436\u0435\u043c\u0441\u044f \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438!","3e0498ce":"\u0414\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043f\u0438\u0448\u0435\u043c \u0434\u0440\u0443\u0433\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043f\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043c\u044b \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0430\u043b\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c.","715e1176":"## \u21161. \u041f\u0430\u0440\u0441\u0438\u043d\u0433","de835b2c":"\u0427\u0443\u0442\u043a\u0430 \u043f\u043e\u0434\u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043b\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u044f\u0432\u043d\u043e \u0441\u0442\u0430\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435.","f11492c2":"\u041f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u0434\u0435\u043b\u0430\u0442\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043b\u0430\u0431\u044b\u0439. MAPE \u043e\u043a\u043e\u043b\u043e 0,49. \u041d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0443\u0441\u0440\u0435\u0434\u043d\u044f\u0442\u044c \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 CatBoost, \u0433\u0434\u0435 0,11.","d5d3386c":"\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \u0434\u0430\u0435\u0442 \u0432\u043f\u043e\u043b\u043d\u0435 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041c\u0410\u0420\u0415 = 0.104. \u0411\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0432\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0443\u0441\u0440\u0435\u0434\u043d\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441 CatBoost.","423f2c61":"### \u041f\u0430\u0440\u0441\u0438\u0442\u044c \u0431\u0443\u0434\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c POST \u0447\u0435\u0440\u0435\u0437 JSON \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u0438 \u0443\u0434\u043e\u0431\u043d\u043e.","882c7223":"#### \u0421\u0440\u0435\u0434\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043d\u0435\u0442\u0443 \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e - 17 \u0442\u044b\u0441. \u044d\u0442\u043e \u043e\u043a\u043e\u043b\u043e 13%, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u043b\u044f\u043c\u0438. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0451 \u043e\u0434\u043d\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.","6c42fcfe":"# \u0418\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 Ivan Stramyk \u043f\u043e \u041f\u0440\u043e\u0435\u043a\u0442\u0443 6. Car Price prediction","62def1e8":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e, \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u044f \u0447\u0442\u043e \u0434\u0430\u0442\u0430 \u0432\u044b\u0445\u043e\u0434\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043a\u0430 \u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439.","a1e0ff7e":"\u0418\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u043d\u0430\u0448\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","1bef6344":"## \u0423\u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441 \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430 \u0438 CatBoost.","bec89794":"## \u21163. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","2da467bd":"# Submission","0435522b":"## \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","71171c52":"## CatBoost","6cf76bf0":"## Data Preprocessing","a78ae88f":"\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u043e, \u0447\u0442\u043e productionDate \u0438 modelDate \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442, \u043d\u043e \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u043d\u0438\u0445, \u0442\u0430\u043a \u043a\u0430\u043a \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u043b\u0443\u0447\u0448\u0435 \u0443\u0447\u0438\u0442\u0441\u044f \u043d\u0430 \u043e\u0431\u0435\u0438\u0445, \u0447\u0435\u043c \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u043a\u0430 \u043f\u0430\u0440\u0443 OneHot \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","c5f33852":"\u041f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u044f\u0442 \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 JSON \u0432 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0434\u043b\u044f \u043d\u0430\u0441 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u0432\u0438\u0434. \u041d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0436\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u0430\u043a \u0432 test.csv, \u043d\u043e \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0446\u0435\u043d\u044b \u0438 id \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432.","d3d0f3c4":"##### \u041f\u0430\u0440\u0441\u0438\u043b \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043b\u0430\u0431 https:\/\/colab.research.google.com\/drive\/1UyKMfeF-DjK_gad25PEofaLhFir2b9uH?usp=sharing \n\u041a\u043e\u0434 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e \u043d\u0438\u0436\u0435.\n\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043f\u043e \u043c\u0430\u0440\u043a\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u043d\u0430 02.04.2021","d17c4d4b":"# Data","f91d0288":"# Setup","930be32f":"\u0412\u0438\u0434\u0438\u043c \u044f\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043a\u043e\u0441\u044b. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435. ","62983079":"CatBoost \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0434\u0430\u043b 10,69%. \u041d\u0435 \u043f\u043b\u043e\u0445\u043e, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u0438 \u0435\u0449\u0435 \u043e\u0433\u0440\u043e\u043c\u043d\u044b\u0439 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0435\u0442\u0443, \u043d\u043e \u0435\u0441\u043b\u0438 \u0431\u044b \u044d\u0442\u043e \u0431\u044b\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0430\u0436\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 - \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u0435\u0449\u0435 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b \u0432\u043d\u0430\u0447\u0430\u043b\u0435 \u0438 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","250eea11":"#### \u0412 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043b\u0438\u0431\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u043c, \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u0430\u043c\u044b\u043c\u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.","8580226a":"\u041e\u043f\u044b\u0442\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438, \u0447\u0442\u043e \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0432\u043b\u0438\u044f\u0435\u0442 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 OneHot \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b\", \"brand\", \"bodyType\". \u0412 \u0442\u043e \u0436\u0435 \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \"numberOfDoors\", \"color\", \"vehicleTransmission\" \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u043e \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\u0422\u0430\u043a \u0436\u0435 \u0440\u0435\u0448\u0438\u043b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \"engineDisplacement\" \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0435\u0449\u0451 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e.","3079f459":"## Fit","eeb0d297":"## \u21162. \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 - \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0441\u0430\u043c\u044b\u043c\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438","2e9344bd":"## \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441"}}