{"cell_type":{"8567577f":"code","390880db":"code","9b8f1bc0":"code","3ef157f3":"code","492a2b45":"code","933cc81c":"code","d67829e6":"code","e21d238a":"code","377f15ba":"code","905fe941":"code","d108d9dc":"code","3991e2e7":"code","f5764c82":"code","b119d40d":"code","510c6aa5":"code","d8e7bf00":"code","b78e5297":"markdown","afbc3d9d":"markdown"},"source":{"8567577f":"import numpy as np \nimport pandas as pd\npd.options.display.max_columns = None\n\nimport seaborn as sns\nsns.set_style('whitegrid')\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')","390880db":"df = pd.read_csv('..\/input\/delhi-house-price-prediction\/MagicBricks.csv')","9b8f1bc0":"df.head()","3ef157f3":"df.shape","492a2b45":"df.info()","933cc81c":"{columns : len(df[columns].unique()) for columns in df.select_dtypes('object')}","d67829e6":"{columns : len(df[columns].unique()) for columns in df.select_dtypes('float')}","e21d238a":"df.isna().sum()","377f15ba":"df.loc[df['Furnishing'].isna(),:]","905fe941":"def onehot_encode(df,column,rename=False):\n    if rename==True:\n        df[column] = df[column].replace({x:i for i, x in enumerate(df[column].unique())})\n    \n    dummies=pd.get_dummies(df[column], prefix=column)\n    df=pd.concat([dummies, df], axis =1)\n    df=df.drop(column, axis=1)\n    \n    return df","d108d9dc":"def preprocess_inputs(df):\n    df=df.copy()\n    \n    # Drop price pr-sft as it is same as price column\n     \n    df = df.drop('Per_Sqft', axis=1).reset_index(drop=True)\n    \n    # treating rest of the missing values\n    \n    df['Parking'] = df['Parking'].fillna(df['Parking'].mode())\n    df=df.dropna()\n    \n    # Changing Categorical values into numeri values\n    \n    df['Furnishing'] = df.Furnishing.map({'Semi-Furnished' : 2, 'Furnished' : 1, 'Unfurnished' : 0})\n    df['Status'] = df.Status.map({'Ready_to_move' : 1, 'Almost_ready' : 0})\n    df['Transaction'] = df.Transaction.map({'New_Property' : 1, 'Resale' : 0})\n    df['Type'] = df.Type.map({'Builder_Floor' : 1, 'Apartment' : 0})\n    \n    # onehot encode Locality column\n    \n    df = onehot_encode(df,column = 'Locality', rename=True)\n    \n    # Splitting the Data\n    \n    X = df.drop('Price', axis=1)\n    y = df['Price']\n    \n    X_train,X_test,y_train,y_test = train_test_split(X,y, train_size = 0.7, random_state = 1)\n    \n    # Scale the Dataset\n    \n    sc = StandardScaler()\n    sc.fit(X_train)\n    \n    X_train = pd.DataFrame(sc.transform(X_train), columns =X.columns)\n    X_test = pd.DataFrame(sc.transform(X_test), columns =X.columns)\n    \n    \n    return X_train,X_test,y_train,y_test\n    ","3991e2e7":"X_train,X_test,y_train,y_test = preprocess_inputs(df)","f5764c82":"from sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor","b119d40d":"models= {\n    \n    'lr': LinearRegression(), \n    'lr_l2' : Ridge(), \n    'lr_l1': Lasso(),\n    'Knn' : KNeighborsRegressor(),\n    'MLP' : MLPRegressor(),\n    \"RF\" : RandomForestRegressor(), \n    'GB' : GradientBoostingRegressor(),\n    \"XGB\" :  XGBRegressor(),\n    \"cat\": CatBoostRegressor()\n    \n}","510c6aa5":"for name, model in models.items():\n    model.fit(X_train,y_train)\n    print(name + ' trained')","d8e7bf00":"for name, model in models.items():\n    print( name + 'R^2 score: {:.5f}'.format(model.score(X_test,y_test)))","b78e5297":"Furnishing and Type have 5 missing values in same rows we will drop them.","afbc3d9d":"# Training"}}