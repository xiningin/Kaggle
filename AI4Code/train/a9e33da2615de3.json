{"cell_type":{"1cccfb28":"code","e33f1222":"code","733cd4f0":"code","67902f90":"code","cd53086d":"code","05bab3ee":"code","20ee9810":"markdown"},"source":{"1cccfb28":"import numpy as np\nimport pandas as pd \nimport os\ni = 0\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        i += 1\n        if i < 5:\n            print(os.path.join(dirname, filename))\nprint('Printed 5 filenames out of ', i)","e33f1222":"list_fn = ['\/kaggle\/input\/end-als\/end-als\/transcriptomics-data\/DESeq2\/bulbar_vs_limb.csv',\n'\/kaggle\/input\/end-als\/end-als\/transcriptomics-data\/DESeq2\/ctrl_vs_case.csv']\nimport time\nt0 = time.time()\nlist_data_df = []\nfor fn in list_fn:\n    d = pd.read_csv(fn)\n    list_data_df.append(d)\n    print('Loaded:', fn, 'shape:', d.shape)\nlist_data_names = [ 'bulbar_vs_limb'.replace('_',' '),  'ctrl_vs_case'.replace('_',' ') ]\n\nprint(time.time()-t0, 'seconds passed')\n\ndf = list_data_df[1]\ndisplay(df.head(1))\ndf_targets = df.iloc[:,:2].copy()\ndf_targets['Order'] = range(df.shape[0])\n\ndf_targets = df_targets.set_index(df_targets.columns[0])\nfor d in list_data_df[:1]:\n    d = d.iloc[:,:2]\n    d = d.set_index(d.columns[0])\n    df_targets = df_targets.join(d, how = 'outer')\ndf_targets = df_targets.sort_values('Order')\ndf_targets = df_targets.drop(columns = 'Order')\ndf_targets.columns = ['ctrl_vs_case'.replace('_',' '), 'bulbar_vs_limb'.replace('_',' ') ]\ndf_targets   ","733cd4f0":"# check: \n(df.iloc[:,1].values != df_targets.iloc[:,0].values ) .sum() # Check ","67902f90":"df.head(1)","cd53086d":"df_targets.describe()","05bab3ee":"import time\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport umap\nfrom sklearn.decomposition import PCA\nfrom matplotlib.lines import Line2D\n\nt0 = time.time()\n\nX = df.iloc[:,2:].values\npca = PCA()# n_components=2)\nr = pca.fit_transform(X)\nprint('Top 10 explained_variance_ratio_', pca.explained_variance_ratio_[:10])\nprint('Top 10 singular_values_', pca.singular_values_[:10])\n\nprint(time.time() - t0,'seconds passed')\n\nfig = plt.figure(figsize = (24,6) ); c = 0\nsns.set(font_scale=1.25,style=\"white\")\nfor i,col in enumerate(df_targets.columns):\n        data_name = col # list_names[i]\n        y = df_targets[col].copy()# d.iloc[:,1].values\n        y = y.fillna('NAN')\n        y = y.values\n\n        c += 1; fig.add_subplot(1,3,c)\n        sns.scatterplot(x = r[:,0], y = r[:,1]\/100000 , hue = y,style=y)\n        #sns.lmplot(data=r, hue = y)\n        #sns.lmplot(x = r[:,0], y = r[:,1]\/100000 , hue = y)\n        plt.title(\"Graph for PCA Analysis of \"+data_name.title())\n        plt.grid()\n        plt.xlabel('PCA1')\n        plt.ylabel('PCA2 (10^5)')\n        if i<1:\n            \n            custom = [Line2D([], [], marker='.', color='b', linestyle='None'),\n                          Line2D([], [], marker='x', color='#DD8452', linestyle='None')]\n            plt.legend(custom, ['Ctrl', 'Case'])\n        else:\n            custom = [Line2D([], [], marker='.', color='b', linestyle='None'),\n                      Line2D([], [], marker='x', color='#DD8452', linestyle='None'), \n                        Line2D([], [], marker='s', color='g', linestyle='None')]\n            plt.legend(custom, ['Bulbar', 'Not Known','Limb'])\n    \n    #print(time.time() - t0,'seconds passed')\nplt.show()\nprint(time.time() - t0,'seconds passed. Finished.')\n\n","20ee9810":"# Dimensional reduction by PCA for *Ctrl vs Case* and *Bulbar vs Limb*"}}