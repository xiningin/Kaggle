{"cell_type":{"66bd8025":"code","0fb8f81f":"code","101d5d73":"code","b1038e04":"code","abee44f4":"code","01114675":"code","ce74e725":"code","76a45fae":"code","4b029bbf":"code","e2624584":"code","c00da3fa":"code","04ea09e3":"code","2e0c1f98":"code","be24fae1":"code","6d0ab6cf":"code","f16ff519":"code","58015cd8":"code","7da5f9e1":"code","bb58fd78":"code","16ea7d9c":"code","b11d9bb5":"code","b287ed6b":"code","92aabf05":"code","7630f4ff":"code","5963a7f5":"code","5bd17ae9":"code","22bbcafb":"code","804cde07":"code","f574ec22":"code","d5028ab1":"code","0326e209":"code","e27308e6":"code","e219824d":"code","9d17cdd4":"markdown","593f4942":"markdown","d5b439fb":"markdown","9bcacb4b":"markdown","4375d829":"markdown"},"source":{"66bd8025":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0fb8f81f":"import pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nfrom pandas_profiling import ProfileReport\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import display, HTML\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, iplot","101d5d73":"data = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndata_test = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')","b1038e04":"profile = ProfileReport(data, title=\"Pandas Profiling Report\")","abee44f4":"profile","01114675":"data.target.value_counts()","ce74e725":"#Not much class imbalance","76a45fae":"null_columns=data.columns[data.isnull().any()]\nnull_ = data[null_columns].isnull().sum()\ntrain_w_null_cols = (null_\/data.shape[0])*100 \nprint (train_w_null_cols)","4b029bbf":"data['length'] = data['text'].apply(len)","e2624584":"data_1 = [\n    go.Box(\n        y=data[data['target']==0]['length'],\n        name='Fake'\n    ),\n    go.Box(\n        y=data[data['target']==1]['length'],\n        name='Real'\n    )\n]\nlayout = go.Layout(\n    title = 'Comparison of text length in Tweets '\n)\nfig = go.Figure(data=data_1, layout=layout)\nfig.show()","c00da3fa":"data.keyword.value_counts()[:20].plot(kind='bar', title='Top 20 keywords in text', color='red')","04ea09e3":"data.location.value_counts()[:20].plot(kind='bar', title='Top 20 location in tweet', color='blue')  # Check the top 15 locations ","2e0c1f98":"import re","be24fae1":"import nltk\nnltk.download('all')","6d0ab6cf":"from nltk.stem import WordNetLemmatizer \nps = WordNetLemmatizer() \nfrom nltk.corpus import stopwords","f16ff519":"corpus = []\nfor i in  range(0,7613):\n    review = re.sub('[^a-zA-Z]', ' ', data['text'][i])\n    review = review.lower()\n    review = review.split()\n    review = [ps.lemmatize(word) for word in review if not word in set(stopwords.words('english'))]\n    review = ' '.join(review)\n    corpus.append(review)\n    ","58015cd8":"corpus_test = []\nfor i in  range(0,3263):\n    #review = re.sub('[^a-zA-Z]', ' ', data_test['text'][i])\n    #review = review.lower()\n    #review = review.split()\n    #review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]\n    #review = ' '.join(review)\n    corpus_test.append(review)\n    ","7da5f9e1":"y_data = data.iloc[:,4]","bb58fd78":"from sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.model_selection import train_test_split\n\nvect = CountVectorizer()\ntext_clf = Pipeline([\n ('vect', CountVectorizer()),\n ('tfidf', TfidfTransformer()),\n ('clf', SGDClassifier(loss='hinge', penalty='l2',\n                       alpha=1e-3, random_state=42,\n                           max_iter=5, tol=None)),])\n\nx_train, x_test, y_train, y_test = train_test_split(data.text, y_data, test_size=0.3, random_state=0)","16ea7d9c":"text_clf.fit(x_train, y_train)\npredicted = text_clf.predict(x_test)\nnp.mean(predicted == y_test)","b11d9bb5":"from sklearn.model_selection import GridSearchCV","b287ed6b":"parameters = {\n     'vect__ngram_range': [(1, 1), (1, 2)],\n     'tfidf__use_idf': (True, False),\n     'clf__alpha': (1e-2, 1e-3),\n }","92aabf05":"gs_clf = GridSearchCV(text_clf, parameters, cv=5)","7630f4ff":"gs_clf = gs_clf.fit(x_train, y_train)","5963a7f5":"\ny_pred = gs_clf.predict(x_test)","5bd17ae9":"gs_clf.best_score_","22bbcafb":"from sklearn import metrics\nprint(metrics.accuracy_score(y_test, y_pred))","804cde07":"print(metrics.confusion_matrix(y_pred, y_test))","f574ec22":"print(metrics.f1_score(y_test, y_pred))","d5028ab1":"gs_clf.cv_results_","0326e209":"data_test.head()","e27308e6":"y_pred_test = gs_clf.predict(data_test.text)","e219824d":"output = pd.DataFrame({'Id': data_test.id, 'Survived': y_pred_test})\noutput.to_csv('NLP_Disaster_tweet_class.csv', index=False)\nprint(\"Your submission was successfully saved!\")","9d17cdd4":"## Visualization","593f4942":"**Checking NULL values**\n","d5b439fb":"\n**Check for class imabalance in target**","9bcacb4b":"Parameter tuning using grid search","4375d829":"# Data Preparation"}}