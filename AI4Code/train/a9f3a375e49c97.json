{"cell_type":{"7b01faee":"code","e1d58c41":"code","008985f7":"code","849c5077":"code","fe74a04a":"code","efdd979d":"code","d5a2e4cf":"code","4a61cfc6":"code","3ef6a82c":"code","b995552b":"code","0b855b6d":"code","7c612656":"code","a0f631a5":"code","1a482413":"code","ffc06f52":"code","47444e7d":"code","db48eba1":"code","9775c6f3":"code","f42e6780":"code","341cda85":"code","bd6f77f8":"code","061f1963":"code","dbbaa8c4":"code","bb4daebe":"code","7dc35c78":"code","0adbcd91":"code","c3503610":"code","cf0f3354":"code","9ba3ebb8":"code","6efc4508":"code","a4e2302a":"code","456d28ee":"code","75664f92":"code","88175a8f":"code","947cdc90":"code","48e64462":"code","ec378cb6":"code","3a340fbc":"code","b0cafe32":"code","3357f995":"code","3cd15073":"code","63149ab1":"code","a3f31c44":"code","2e6dad38":"code","65be6c3b":"code","29390f2d":"code","7cbf9ecd":"code","0c503585":"code","37e96f27":"code","8b681995":"code","e95260d2":"code","8fa00004":"code","19c30450":"code","b5de7ed8":"code","2f7da891":"code","04d97ee1":"code","03fca86e":"code","da82ecf7":"code","b96e41bc":"code","da99598d":"code","d8f5ad58":"code","2bc9741d":"code","93d4b68d":"code","b8e1d662":"code","7a3ab7a6":"code","7cb9de6e":"code","742f6282":"markdown","cf453882":"markdown","8a1be6e4":"markdown","91a3d0d7":"markdown","133554e0":"markdown","dee4ad9f":"markdown","7e45a41b":"markdown","48ece3a3":"markdown","7887df50":"markdown","a6503657":"markdown","3ffd6dfb":"markdown","d2868228":"markdown","8a2f7db7":"markdown"},"source":{"7b01faee":"#importing libraries:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n%matplotlib inline","e1d58c41":"#importing datasets.\nbar=pd.read_csv('..\/input\/stockmarket-dataset\/bar-S.csv')\nquote=pd.read_csv('..\/input\/stockmarket-dataset\/quote-S.csv')","008985f7":"#bar.reset_index(drop=True,inplace=True)\nbar.head()","849c5077":"quote.head()","fe74a04a":"bar_N1=bar[['symbol','average_price']]\nbar_N1.head()","efdd979d":"bar_N1.describe()","d5a2e4cf":"from sklearn.preprocessing import LabelEncoder\nLE=LabelEncoder()     #Label Encoding\nlabel=LE.fit_transform(bar_N1['symbol'])","4a61cfc6":"#Dropping the unuseful columns\nbar_N1=bar_N1.drop(\"symbol\", axis='columns')","3ef6a82c":"#appending the transformed column \nbar_N1[\"symbol\"]=label\nbar_N1.head()","b995552b":"#Using Elbow Method to find the optimum number of clusters\nfrom sklearn.cluster import KMeans\nwcss=[]\nK_rng=10\n\nfor i in range(1,K_rng):\n    K=KMeans(i)\n    K.fit(bar_N1)\n    w=K.inertia_\n    wcss.append(w)\n    \nClusters=range(1,K_rng)\nplt.figure(figsize=(12,8))\nplt.plot(Clusters,wcss)\nplt.xlabel('Clusters')\nplt.ylabel('WCSS Values') #Within Cluster Sum of Squares\nplt.title('Elbow Method Visualisation')","0b855b6d":"#Fitting the model\nK2= KMeans(5)\nK2.fit(bar_N1)","7c612656":"#Prediction using the model\nN1_pred=bar_N1.copy()\nN1_pred['Predicted']=K2.fit_predict(bar_N1)","a0f631a5":"#Visualise the clusters after prediction\nplt.figure(figsize=(8,5))\nplt.scatter(N1_pred['average_price'], N1_pred['symbol'], c=N1_pred['Predicted'], label='average_price', cmap = 'rainbow')\nplt.xlabel('Average Price')\nplt.ylabel('Symbol')\nplt.title('Average Price vs Symbol(K=4)')","1a482413":"quote_df = quote.copy()\nquote_df = quote_df [['time', 'ask_price','ticker']]\nquote_df.head()","ffc06f52":"quote_df.rename(columns = {'time' : 'date', 'ask_price' : 'price_t'}, inplace = True)","47444e7d":"#Return calculation manually\n\nquote_df['price_t-1'] = quote_df['price_t'].shift(1)","db48eba1":"#Return calculation using formula\n\nquote_df['return'] = quote_df['price_t'].pct_change(1)","9775c6f3":"quote_df.head()","f42e6780":"df_q=quote_df[['ticker','return']]","341cda85":"df_q.isnull().sum()","bd6f77f8":"df_q=df_q.dropna()\ndf_q.head()","061f1963":"label2=LE.fit_transform(df_q['ticker'])\ndf_q=df_q.drop(\"ticker\", axis='columns')\ndf_q[\"ticker\"]=label2\ndf_q.head()","dbbaa8c4":"#Using Elbow Method to find the optimum number of clusters\nfrom sklearn.cluster import KMeans\nwcss=[]\nK_rng=10\n\nfor i in range(1,K_rng):\n    K=KMeans(i)\n    K.fit(df_q)\n    w=K.inertia_\n    wcss.append(w)\n    \nClusters=range(1,K_rng)\nplt.figure(figsize=(12,8))\nplt.plot(Clusters,wcss)\nplt.xlabel('Clusters')\nplt.ylabel('WCSS Values') #Within Cluster Sum of Squares\nplt.title('Elbow Method Visualisation')","bb4daebe":"N=N1_pred['Predicted'].unique()","7dc35c78":"bar_N1['Predicted']=N1_pred['Predicted']\nbar_N1['volume']=bar['volume']","0adbcd91":"bar_N1.head()","c3503610":"#listing out the stocks of different clusters\nfor i in N:\n    print(\"For N1=\",i)\n    stock = bar_N1['volume'].loc[bar_N1['Predicted'] == i]\n    print(stock)\n    print(\"======================================================\")","cf0f3354":"quote.head()","9ba3ebb8":"x=quote['time'].str.split(\" \", n = 1, expand = True)\nquote['Day']= x[0] # Date\nquote['Time']=x[1] # Time\nquote=quote.drop(\"time\", axis='columns')\nquote.head()","6efc4508":"quote_N3=quote[['ticker','bid_size']]","a4e2302a":"label1=LE.fit_transform(quote['ticker'])","456d28ee":"#Dropping the unuseful columns\nquote_N3=quote_N3.drop(\"ticker\", axis='columns')","75664f92":"#appending the transformed column \nquote_N3[\"ticker\"]=label1\nquote_N3.head()","88175a8f":"#Using Elbow Method to find the optimum number of clusters\nfrom sklearn.cluster import KMeans\nwcss=[]\nK_rng=10\n\nfor i in range(1,K_rng):\n    K=KMeans(i)\n    K.fit(quote_N3)\n    w=K.inertia_\n    wcss.append(w)\n    \nClusters=range(1,K_rng)\nplt.figure(figsize=(12,8))\nplt.plot(Clusters,wcss)\nplt.xlabel('Clusters')\nplt.ylabel('WCSS Values') #Within Cluster Sum of Squares\nplt.title('Elbow Method Visualisation')","947cdc90":"#Fitting the model\nK3= KMeans(4)\nK3.fit(quote_N3)","48e64462":"#Prediction using the model\nN3_pred=quote_N3.copy()\nN3_pred['Predicted']=K3.fit_predict(quote_N3)","ec378cb6":"N3_pred['Day']=quote['Day']\nN3_pred.head()","3a340fbc":"Days=N3_pred['Day'].unique()\nn=N3_pred['Predicted'].unique()","b0cafe32":"#Distribution of bid_size in each cluster in a day\nfor i in n:\n    for j in Days:\n        print(\"In Day=\",j)\n        print(\"For N1=\",i)\n        final= N3_pred[(N3_pred['Predicted'] == i) & (N3_pred['Day'] == j)]\n        print(\"Total bid size=\",final['bid_size'].sum())\n        print(\"================================\")\n    ","3357f995":"#Visualise the clusters after prediction\nplt.figure(figsize=(12,8))\nplt.scatter(N3_pred['bid_size'], N3_pred['ticker'], c=N3_pred['Predicted'], cmap = 'rainbow')\nplt.xlabel('bid_size')\nplt.ylabel('ticker')\nplt.title('bid_size vs ticker(K=4)')","3cd15073":"data = quote.copy()\ndata=data [[ 'bid_price','bid_size']]\ndata.head()","63149ab1":"data.rename(columns = {'bid_price' : 'price_T'}, inplace = True)","a3f31c44":"data['price_T-1'] = data['price_T'].shift(1)\ndata['price_change'] = (data['price_T']\/data['price_T-1'])-1\ndata.head()","2e6dad38":"data.isnull().sum()","65be6c3b":"data=data.dropna()","29390f2d":"#Showing the distribution of Bid Size and the Price change\nplt.figure()\ndataframe=data[['bid_size','price_change']].plot(figsize=(14,9),marker='o',grid=True,markersize=5)#line plot\nplt.title(\"Distribution of Bid Size and Price Change in a day\")\nplt.xlabel('Time')\nplt.ylabel('Distribution');","7cbf9ecd":"y=bar['time'].str.split(\" \", n = 1, expand = True)\nbar['Day']= x[0] # Date\nbar['Time']=x[1] # Time\nbar=bar.drop(\"time\", axis='columns')\nbar.head()","0c503585":"grouped_quote= quote.groupby(\"Day\")","37e96f27":"agg_bid_size=grouped_quote['bid_size'].agg(np.sum).sort_values(ascending=False).reset_index()","8b681995":"agg_bid_size.head()","e95260d2":"grouped_bar=bar.groupby(\"Day\")\nagg_vol=grouped_bar['volume'].agg(np.sum).sort_values(ascending=False).reset_index()","8fa00004":"agg_vol.head()","19c30450":"data_merge=pd.merge(agg_bid_size,agg_vol,on='Day')","b5de7ed8":"data_merge.head()","2f7da891":"plt.figure()\ndataframe=data_merge.plot(x='Day',y=['bid_size','volume'],figsize=(14,9),marker='o',grid=True,markersize=5)\nplt.title(\"Comparative Line plot between bid_size and volume per day \")\nplt.xlabel('Day')\nplt.ylabel('Comparative_Features');","04d97ee1":"Grouped_N1=bar_N1.groupby(\"Predicted\")","03fca86e":"avg_stock=Grouped_N1['volume'].agg(np.mean).sort_values(ascending=False).reset_index()","da82ecf7":"#Average stocks of all clusters of N1\navg_stock","b96e41bc":"new_quote=quote[['Day','bid_price','bid_size']]\nnew_quote.head()","da99598d":"new_quote['mean_price']=new_quote['bid_price'].agg(np.mean)\nnew_quote['std_price']=np.subtract(new_quote['bid_price'],new_quote['mean_price'])\nnew_quote['Volatility'] = np.square(new_quote['std_price'])\nnew_quote=new_quote.drop(['mean_price','std_price'], axis='columns')\nnew_quote.head()","d8f5ad58":"#How bid_size and volatility is distributed on a day\nrslt_df = new_quote[new_quote['Day'] == '2020-09-11'] \nrslt_df.head()","2bc9741d":"#bid_size and volatility on 2020-09-11\nplt.figure()\ndataframe=rslt_df[['bid_size','Volatility']].plot(figsize=(14,9),marker='o',grid=True,markersize=5)#line plot\nplt.title(\"Distribution of Bid Size and Volatility in a day\")\nplt.xlabel('Time')\nplt.ylabel('Distribution');","93d4b68d":"plt.figure(figsize=[20,10])\nax = sns.barplot(x=\"Day\", y=\"bid_size\", data=new_quote, palette=\"Blues\")\nplt.xticks(rotation=90, fontsize=16)\nplt.yticks(fontsize=15)\nplt.title(\"Distribution of Bid Size\",fontsize=24)\nplt.xlabel(\"Days\",fontsize=20)\nplt.ylabel(\"Bid Size\",fontsize=20)\nplt.tight_layout()","b8e1d662":"plt.figure(figsize=[20,10])\nax = sns.barplot(x=\"Day\", y=\"Volatility\", data=new_quote, palette=\"Greens\")\nplt.xticks(rotation=90, fontsize=16)\nplt.yticks(fontsize=15)\nplt.title(\"Distribution of Volatility\",fontsize=24)\nplt.xlabel(\"Days\",fontsize=20)\nplt.ylabel(\"Volatility\",fontsize=20)\nplt.tight_layout()","7a3ab7a6":"import math\nfrom statsmodels.tsa.stattools import acf, pacf\nimport statsmodels.tsa.stattools as ts\nfrom statsmodels.tsa.arima_model import ARIMA","7cb9de6e":"new_N1=bar[['Day','average_price']]\nnew_N1.head()","742f6282":"# Question 2:-","cf453882":"# Question 7:- ","8a1be6e4":"# Question 3:-","91a3d0d7":"Hence the optimum number of clusters is 5.\n\n\n**Ans.1. N1=5**","133554e0":"# Question 6:-","dee4ad9f":"# Question1:-","7e45a41b":"# Question 5:-","48ece3a3":"# Question 8:- \n","7887df50":"**N3=4**","a6503657":"**Hence N2=4 (As seen from the Elbow plot)**","3ffd6dfb":"# Make clusters (N1) based on ticker\/symbol and price for bar. Value of N1?\n\n# Instead of price, consider return to get clusters N2. Use the quote dataset. Value of N2?\n\n# list out the stocks, cluster wise. Consider N1 only.\n\n# N3, cluster based on bid_size and  ticker\/symbol. How bid_size in each cluster of N3 is distributed in a day? \n\n# how the price change and size is distributed? bid only from the quote dataset.\n\n# how volatility and size are distributed across a day? Bid only from the quote dataset.\n\n# cumulative bid_size in a day and compare with volume from bar dataset. Make the average of all stocks in any cluster. Show for all clusters of N1. \n","d2868228":"# Question 4:-","8a2f7db7":"# For N3=4"}}