{"cell_type":{"c95fa8ea":"code","d5e95d15":"code","27d8e519":"code","4adf00b5":"code","70fb83fb":"code","7b92736c":"code","a20a69a2":"code","d6dcb18f":"code","b8b609fc":"code","b5b3e0a4":"code","b3d9c517":"code","81e32869":"code","548ae2b6":"code","fa5c8a76":"code","134b8cb7":"code","070fe729":"code","5b634cd6":"markdown","4eb673de":"markdown","5ac07667":"markdown","bcac03d8":"markdown","c9772443":"markdown","c2db377f":"markdown","96090e11":"markdown","2ff24a59":"markdown","c5995612":"markdown","8e9abb21":"markdown","39bc9c79":"markdown","871f97f4":"markdown"},"source":{"c95fa8ea":"# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt","d5e95d15":"fashion_mnist = keras.datasets.fashion_mnist\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","27d8e519":"plt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()","4adf00b5":"plt.figure()\nplt.imshow(train_images[1])\nplt.colorbar()\nplt.grid(False)\nplt.show()","70fb83fb":"plt.figure()\nplt.imshow(train_images[2])\nplt.colorbar()\nplt.grid(False)\nplt.show()","7b92736c":"train_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0","a20a69a2":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","d6dcb18f":"model = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(10)\n])","b8b609fc":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","b5b3e0a4":"#Fitting the Model\nmodel.fit(train_images, train_labels, epochs=10)\n#Evaluating Accuracy\ntest_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)\nprint('\\nTest accuracy:', test_acc)","b3d9c517":"#Make Predictions\nprobability_model = tf.keras.Sequential([model, \n                                         tf.keras.layers.Softmax()])\npredictions = probability_model.predict(test_images)\npredictions[0]","81e32869":"np.argmax(predictions[0])","548ae2b6":"test_labels[0]","fa5c8a76":"def plot_image(i, predictions_array, true_label, img):\n  true_label, img = true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n\n  plt.imshow(img, cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n\n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  true_label = true_label[i]\n  plt.grid(False)\n  plt.xticks(range(10))\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1])\n  predicted_label = np.argmax(predictions_array)\n\n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')","134b8cb7":"i = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","070fe729":"# Plot the first X test images, their predicted labels, and the true labels.\n# Color correct predictions in blue and incorrect predictions in red.\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()","5b634cd6":"To verify that the data is in the correct format and to verify that we are ready to create and train the neural network for image classification with TensorFlow, let\u2019s display the first 25 images of the training set and display the name of the class under each image:","4eb673de":"# What is Image Classification?\nImage classification is the process of categorizing and labelling groups of pixels or vectors in an image according to specific rules. The categorization law can be designed using one or more spectral or textural characteristics.","5ac07667":"Now I\u2019m going to scale these values \u200b\u200bto a range of 0 to 1 before passing them to the neural network model. To do this, we need to divide the values \u200b\u200bby 255. The training set and the test set should be preprocessed in the same way:","bcac03d8":"## 4. Verify Predictions\nLet\u2019s look at the 0th frame of the predictions and the prediction table. The correct prediction labels are blue and the incorrect prediction labels are red:","c9772443":"## 2. Compiling The Model\nNow, let\u2019s move forward with compiling our model:","c2db377f":"## Image Classification with TensorFlow: Building Model\nNow to Build the neural network for the task of Image Classification with TensorFlow, we first need to configure the model layers and then move forward with compiling the model.\n\n## 1. Setting Up Layers\nThe basic building block of neural networks is its layers. Layers work by extracting the representations from data fed into them. Most of the deep learning, Models involves doing simple layers together. Now, let\u2019s create the layers of our neural network:","96090e11":"## 3. Training Model\nNow, let\u2019s train the Neural Network for the task of Image Classification with TensorFlow, and make predictions on it:","2ff24a59":"Now, I will create a helper function to plot our predictions:","c5995612":"## Import the Fashion MNIST dataset\nFashion MNIST is intended as a drop-in replacement for the classic MNIST dataset\u2014often used as the \u201cHello, World\u201d of machine learning programs for computer vision. The MNIST dataset contains images of handwritten digits (0, 1, 2, etc.) in a format identical to that of the images of clothing that I will use for the task of image classification with TensorFlow.\n\nThe Fashion MNIST Dataset is an advanced version of the traditional MNIST dataset which is very much used as the \u201cHello, World\u201d of machine learning. The MNIST dataset contains images of handwritten numbers (0, 1, 2, etc.) in the same format as the clothing images I will be using for the image classification task with TensorFlow. Now let\u2019s import the Fashion MNIST dataset to get started with the task:","8e9abb21":"# Image Classification with TensorFlow\nNow, Image Classification can also be done by using less complex models provided by Scikit-Learn, so why TensorFlow. By using TensorFlow we can build a neural network for the task of Image Classification. By building a neural network we can discover more hidden patterns than just classification. Now let\u2019s get started with the task of Image Classification with TensorFlow by importing some necessary packages:","39bc9c79":"## Preprocess The Data\nFor this task of Image Classification with TensorFlow, the data must be preprocessed before training the neural network. If you inspect the first frame of the training set, you will find that the pixel values \u200b\u200bare between 0 and 255:","871f97f4":"A prediction is an array of 10 numbers. They represent the \u201cconfidence\u201d of the model that the image matches each of the 10 different garments. Let\u2019s see which label has the highest confidence value:"}}