{"cell_type":{"57664da5":"code","4a2f3757":"code","c45af3ed":"code","99e768c4":"code","dbd5f5c8":"code","cfea924d":"code","c08c37ee":"code","2e250f83":"code","fa0cbe28":"code","62f597ca":"code","5a507421":"code","a3cbff9e":"code","e4ba9b33":"code","46dcc1cb":"code","67c327f0":"code","2d7970a9":"code","c393743e":"code","6981b5cc":"code","fd85db8a":"code","207733de":"code","c9c34578":"code","a148c196":"code","df478e6b":"code","82190b7f":"code","5410ef7a":"code","6ba9237e":"code","3fc2c6b5":"code","bf28e3c2":"code","66d89d31":"code","cc794d83":"code","036f46b3":"code","294c8c96":"code","85559e2c":"code","86713467":"code","1b6956a2":"code","be138113":"code","4f537720":"code","aa0f1a60":"code","3a2ce8b4":"code","203e4aae":"code","74a2312a":"code","9c2c1d98":"code","19e600c2":"code","e4b79af3":"code","478ee59a":"code","8a3395f9":"code","b0debf15":"code","dab4604a":"code","d6949e70":"code","e84fcf77":"code","27813409":"code","395c0df7":"code","79dda5cf":"code","7f9c2133":"code","51fbd195":"code","7e1937aa":"code","f3a2fcba":"code","88ca2c2b":"code","7ae68b53":"code","8cb05057":"code","7c8daff1":"code","19791a14":"code","a0fa4f2d":"code","2dc0eb85":"code","94b07b8e":"code","5be2b47e":"code","04033bd2":"code","3a050d15":"code","bc217921":"code","662be645":"code","190b08de":"code","f58fb3b4":"markdown","68d10308":"markdown","1995b447":"markdown","32621bd0":"markdown","9773cb62":"markdown","9dc44516":"markdown","531eaee6":"markdown","6ac3aed8":"markdown","9e4a2b1a":"markdown","2e8b38f0":"markdown","4e5c7bf4":"markdown","755d2193":"markdown","c547ee88":"markdown","923dbeee":"markdown","1735e638":"markdown","a02702fc":"markdown","94f919dc":"markdown","ede161bf":"markdown","639189b9":"markdown","6fd46f72":"markdown","abd25a12":"markdown","fc0dc7d8":"markdown","3ea9efae":"markdown","dfa3d2f7":"markdown","3f0de4a9":"markdown","715c5ed6":"markdown","39ec2562":"markdown","585dd170":"markdown","7ad60f12":"markdown","bfacbd6c":"markdown","71703902":"markdown","2c49542d":"markdown","35bf523f":"markdown","4049241e":"markdown","a5ff94ba":"markdown"},"source":{"57664da5":"!pip install ..\/input\/kerasapplications\/keras-team-keras-applications-3b180cb -f .\/ --no-index\n!pip install ..\/input\/efficientnet\/efficientnet-1.1.0\/ -f .\/ --no-index","4a2f3757":"import os\nimport cv2\nimport pydicom\nimport pandas as pd\nimport numpy as np \nimport tensorflow as tf \nimport matplotlib.pyplot as plt \nimport random\nfrom tqdm.notebook import tqdm \nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import mean_absolute_error\nfrom tensorflow_addons.optimizers import RectifiedAdam\nfrom tensorflow.keras import Model\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom tensorflow.keras.optimizers import Nadam\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom PIL import Image","c45af3ed":"def seed_everything(seed=2020):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)","99e768c4":"seed_everything(42)","dbd5f5c8":"config = tf.compat.v1.ConfigProto()\nconfig.gpu_options.allow_growth = True\nsession = tf.compat.v1.Session(config=config)","cfea924d":"Dropout_model = 0.3855\nFVC_weight = 0.2\nConfidence_weight = 0.2","c08c37ee":"commits_df = pd.DataFrame(columns = ['commit_num', 'FVC_weight', 'Dropout_model', 'LB_score', 'seed'])","2e250f83":"n=0\ncommits_df.loc[n,'commit_num'] = 1\ncommits_df.loc[n,'Dropout_model'] = 0.4\ncommits_df.loc[n,'FVC_weight'] = 0.25\ncommits_df.loc[n,'LB_score'] = -6.8111","fa0cbe28":"n=1\ncommits_df.loc[n,'commit_num'] = 4\ncommits_df.loc[n,'Dropout_model'] = 0.36\ncommits_df.loc[n,'FVC_weight'] = 0.25\ncommits_df.loc[n,'LB_score'] = -6.8105","62f597ca":"n=2\ncommits_df.loc[n,'commit_num'] = 6\ncommits_df.loc[n,'Dropout_model'] = 0.36\ncommits_df.loc[n,'FVC_weight'] = 0.35\ncommits_df.loc[n,'LB_score'] = -6.8158","5a507421":"n=3\ncommits_df.loc[n,'commit_num'] = 8\ncommits_df.loc[n,'Dropout_model'] = 0.35\ncommits_df.loc[n,'FVC_weight'] = 0.25\ncommits_df.loc[n,'LB_score'] = -6.8107","a3cbff9e":"n=4\ncommits_df.loc[n,'commit_num'] = 9\ncommits_df.loc[n,'Dropout_model'] = 0.35\ncommits_df.loc[n,'FVC_weight'] = 0.3\ncommits_df.loc[n,'LB_score'] = -6.8125","e4ba9b33":"n=5\ncommits_df.loc[n,'commit_num'] = 10\ncommits_df.loc[n,'Dropout_model'] = 0.36\ncommits_df.loc[n,'FVC_weight'] = 0.2\ncommits_df.loc[n,'LB_score'] = -6.8089","46dcc1cb":"n=6\ncommits_df.loc[n,'commit_num'] = 11\ncommits_df.loc[n,'Dropout_model'] = 0.36\ncommits_df.loc[n,'FVC_weight'] = 0.15\ncommits_df.loc[n,'LB_score'] = -6.8100","67c327f0":"n=7\ncommits_df.loc[n,'commit_num'] = 13\ncommits_df.loc[n,'Dropout_model'] = 0.36\ncommits_df.loc[n,'FVC_weight'] = 0.175\ncommits_df.loc[n,'LB_score'] = -6.8096","2d7970a9":"n=8\ncommits_df.loc[n,'commit_num'] = 14\ncommits_df.loc[n,'Dropout_model'] = 0.36\ncommits_df.loc[n,'FVC_weight'] = 0.225\ncommits_df.loc[n,'LB_score'] = -6.8100","c393743e":"n=9\ncommits_df.loc[n,'commit_num'] = 15\ncommits_df.loc[n,'Dropout_model'] = 0.32\ncommits_df.loc[n,'FVC_weight'] = 0.2\ncommits_df.loc[n,'LB_score'] = -6.8092","6981b5cc":"n=10\ncommits_df.loc[n,'commit_num'] = 16\ncommits_df.loc[n,'Dropout_model'] = 0.25\ncommits_df.loc[n,'FVC_weight'] = 0.2\ncommits_df.loc[n,'LB_score'] = -6.8093","fd85db8a":"n=11\ncommits_df.loc[n,'commit_num'] = 17\ncommits_df.loc[n,'Dropout_model'] = 0.25\ncommits_df.loc[n,'FVC_weight'] = 0.5\ncommits_df.loc[n,'LB_score'] = -6.8283","207733de":"n=12\ncommits_df.loc[n,'commit_num'] = 18\ncommits_df.loc[n,'Dropout_model'] = 0.38\ncommits_df.loc[n,'FVC_weight'] = 0.2\ncommits_df.loc[n,'LB_score'] = -6.8087","c9c34578":"n=13\ncommits_df.loc[n,'commit_num'] = 19\ncommits_df.loc[n,'Dropout_model'] = 0.39\ncommits_df.loc[n,'FVC_weight'] = 0.2\ncommits_df.loc[n,'LB_score'] = -6.8090","a148c196":"n=14\ncommits_df.loc[n,'commit_num'] = 20\ncommits_df.loc[n,'Dropout_model'] = 0.37\ncommits_df.loc[n,'FVC_weight'] = 0.2\ncommits_df.loc[n,'LB_score'] = -6.8092","df478e6b":"n=15\ncommits_df.loc[n,'commit_num'] = 21\ncommits_df.loc[n,'Dropout_model'] = 0.38\ncommits_df.loc[n,'FVC_weight'] = 0.19\ncommits_df.loc[n,'LB_score'] = -6.8093","82190b7f":"n=16\ncommits_df.loc[n,'commit_num'] = 23\ncommits_df.loc[n,'Dropout_model'] = 0.38\ncommits_df.loc[n,'FVC_weight'] = 0.2\ncommits_df.loc[n,'LB_score'] = -6.8402","5410ef7a":"# Find and mark maximum value of LB score\ncommits_df['LB_score'] = pd.to_numeric(commits_df['LB_score'])\ncommits_df['max'] = 0\ncommits_df.loc[commits_df['LB_score'].idxmax(), 'max'] = 1","6ba9237e":"# Seed\ncommits_df['seed'] = 42\ncommits_df.loc[commits_df['commit_num'] == 23, 'seed'] = 0","3fc2c6b5":"commits_df","bf28e3c2":"# Interactive plot with results of parameters tuning\nfig = px.scatter_3d(commits_df, x='FVC_weight', y='Dropout_model', z='LB_score', color = 'max', \n                    symbol = 'seed',\n                    title='Parameters and LB score visualization of OSIC PFP solutions')\nfig.update(layout=dict(title=dict(x=0.1)))","66d89d31":"train = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv') ","cc794d83":"def get_tab(df):\n    vector = [(df.Age.values[0] - 30) \/ 30] \n    \n    if df.Sex.values[0] == 'male':\n       vector.append(0)\n    else:\n       vector.append(1)\n    \n    if df.SmokingStatus.values[0] == 'Never smoked':\n        vector.extend([0,0])\n    elif df.SmokingStatus.values[0] == 'Ex-smoker':\n        vector.extend([1,1])\n    elif df.SmokingStatus.values[0] == 'Currently smokes':\n        vector.extend([0,1])\n    else:\n        vector.extend([1,0])\n    return np.array(vector) ","036f46b3":"A = {} \nTAB = {} \nP = [] \nfor i, p in tqdm(enumerate(train.Patient.unique())):\n    sub = train.loc[train.Patient == p, :] \n    fvc = sub.FVC.values\n    weeks = sub.Weeks.values\n    c = np.vstack([weeks, np.ones(len(weeks))]).T\n    a, b = np.linalg.lstsq(c, fvc)[0]\n    \n    A[p] = a\n    TAB[p] = get_tab(sub)\n    P.append(p)","294c8c96":"def get_img(path):\n    d = pydicom.dcmread(path)\n    return cv2.resize(d.pixel_array \/ 2**11, (512, 512))","85559e2c":"from tensorflow.keras.utils import Sequence\n\nclass IGenerator(Sequence):\n    BAD_ID = ['ID00011637202177653955184', 'ID00052637202186188008618']\n    def __init__(self, keys, a, tab, batch_size=32):\n        self.keys = [k for k in keys if k not in self.BAD_ID]\n        self.a = a\n        self.tab = tab\n        self.batch_size = batch_size\n        \n        self.train_data = {}\n        for p in train.Patient.values:\n            self.train_data[p] = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/')\n    \n    def __len__(self):\n        return 1000\n    \n    def __getitem__(self, idx):\n        x = []\n        a, tab = [], [] \n        keys = np.random.choice(self.keys, size = self.batch_size)\n        for k in keys:\n            try:\n                i = np.random.choice(self.train_data[k], size=1)[0]\n                img = get_img(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{k}\/{i}')\n                x.append(img)\n                a.append(self.a[k])\n                tab.append(self.tab[k])\n            except:\n                print(k, i)\n       \n        x,a,tab = np.array(x), np.array(a), np.array(tab)\n        x = np.expand_dims(x, axis=-1)\n        return [x, tab] , a","86713467":"from tensorflow.keras.layers import (\n    Dense, Dropout, Activation, Flatten, Input, BatchNormalization, GlobalAveragePooling2D, Add, Conv2D, AveragePooling2D, \n    LeakyReLU, Concatenate \n)\nimport efficientnet.tfkeras as efn\n\ndef get_efficientnet(model, shape):\n    models_dict = {\n        'b0': efn.EfficientNetB0(input_shape=shape,weights=None,include_top=False),\n        'b1': efn.EfficientNetB1(input_shape=shape,weights=None,include_top=False),\n        'b2': efn.EfficientNetB2(input_shape=shape,weights=None,include_top=False),\n        'b3': efn.EfficientNetB3(input_shape=shape,weights=None,include_top=False),\n        'b4': efn.EfficientNetB4(input_shape=shape,weights=None,include_top=False),\n        'b5': efn.EfficientNetB5(input_shape=shape,weights=None,include_top=False),\n        'b6': efn.EfficientNetB6(input_shape=shape,weights=None,include_top=False),\n        'b7': efn.EfficientNetB7(input_shape=shape,weights=None,include_top=False)\n    }\n    return models_dict[model]\n\ndef build_model(shape=(512, 512, 1), model_class=None):\n    inp = Input(shape=shape)\n    base = get_efficientnet(model_class, shape)\n    x = base(inp)\n    x = GlobalAveragePooling2D()(x)\n    inp2 = Input(shape=(4,))\n    x2 = tf.keras.layers.GaussianNoise(0.2)(inp2)\n    x = Concatenate()([x, x2]) \n    x = Dropout(Dropout_model)(x)\n    x = Dense(1)(x)\n    model = Model([inp, inp2] , x)\n    \n    weights = [w for w in os.listdir('..\/input\/osic-model-weights') if model_class in w][0]\n    model.load_weights('..\/input\/osic-model-weights\/' + weights)\n    return model\n\nmodel_classes = ['b5'] #['b0','b1','b2','b3',b4','b5','b6','b7']\nmodels = [build_model(shape=(512, 512, 1), model_class=m) for m in model_classes]\nprint('Number of models: ' + str(len(models)))","1b6956a2":"tr_p, vl_p = train_test_split(P, shuffle=True, train_size = 0.8) ","be138113":"def score(fvc_true, fvc_pred, sigma):\n    sigma_clip = np.maximum(sigma, 70) # changed from 70, trie 66.7 too\n    delta = np.abs(fvc_true - fvc_pred)\n    delta = np.minimum(delta, 1000)\n    sq2 = np.sqrt(2)\n    metric = (delta \/ sigma_clip)*sq2 + np.log(sigma_clip* sq2)\n    return np.mean(metric)","4f537720":"subs = []\nfor model in models:\n    metric = []\n    for q in tqdm(range(1, 10)):\n        m = []\n        for p in vl_p:\n            x = [] \n            tab = [] \n\n            if p in ['ID00011637202177653955184', 'ID00052637202186188008618']:\n                continue\n\n            ldir = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/')\n            for i in ldir:\n                if int(i[:-4]) \/ len(ldir) < 0.8 and int(i[:-4]) \/ len(ldir) > 0.15:\n                    x.append(get_img(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/{i}')) \n                    tab.append(get_tab(train.loc[train.Patient == p, :])) \n            if len(x) < 1:\n                continue\n            tab = np.array(tab) \n\n            x = np.expand_dims(x, axis=-1) \n            _a = model.predict([x, tab]) \n            a = np.quantile(_a, q \/ 10)\n\n            percent_true = train.Percent.values[train.Patient == p]\n            fvc_true = train.FVC.values[train.Patient == p]\n            weeks_true = train.Weeks.values[train.Patient == p]\n\n            fvc = a * (weeks_true - weeks_true[0]) + fvc_true[0]\n            percent = percent_true[0] - a * abs(weeks_true - weeks_true[0])\n            m.append(score(fvc_true, fvc, percent))\n        print(np.mean(m))\n        metric.append(np.mean(m))\n\n    q = (np.argmin(metric) + 1)\/ 10\n\n    sub = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv') \n    test = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv') \n    A_test, B_test, P_test,W, FVC= {}, {}, {},{},{} \n    STD, WEEK = {}, {} \n    for p in test.Patient.unique():\n        x = [] \n        tab = [] \n        ldir = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/test\/{p}\/')\n        for i in ldir:\n            if int(i[:-4]) \/ len(ldir) < 0.8 and int(i[:-4]) \/ len(ldir) > 0.15:\n                x.append(get_img(f'..\/input\/osic-pulmonary-fibrosis-progression\/test\/{p}\/{i}')) \n                tab.append(get_tab(test.loc[test.Patient == p, :])) \n        if len(x) <= 1:\n            continue\n        tab = np.array(tab) \n\n        x = np.expand_dims(x, axis=-1) \n        _a = model.predict([x, tab]) \n        a = np.quantile(_a, q)\n        A_test[p] = a\n        B_test[p] = test.FVC.values[test.Patient == p] - a*test.Weeks.values[test.Patient == p]\n        P_test[p] = test.Percent.values[test.Patient == p] \n        WEEK[p] = test.Weeks.values[test.Patient == p]\n\n    for k in sub.Patient_Week.values:\n        p, w = k.split('_')\n        w = int(w) \n\n        fvc = A_test[p] * w + B_test[p]\n        sub.loc[sub.Patient_Week == k, 'FVC'] = fvc\n        sub.loc[sub.Patient_Week == k, 'Confidence'] = (\n            P_test[p] - A_test[p] * abs(WEEK[p] - w) \n    ) \n\n    _sub = sub[[\"Patient_Week\",\"FVC\",\"Confidence\"]].copy()\n    subs.append(_sub)","aa0f1a60":"N = len(subs)\nsub = subs[0].copy() # ref\nsub[\"FVC\"] = 0\nsub[\"Confidence\"] = 0\nfor i in range(N):\n    sub[\"FVC\"] += subs[0][\"FVC\"] * (1\/N)\n    sub[\"Confidence\"] += subs[0][\"Confidence\"] * (1\/N)","3a2ce8b4":"sub.head()","203e4aae":"sub[[\"Patient_Week\",\"FVC\",\"Confidence\"]].to_csv(\"submission_img.csv\", index=False)","74a2312a":"img_sub = sub[[\"Patient_Week\",\"FVC\",\"Confidence\"]].copy()","9c2c1d98":"ROOT = \"..\/input\/osic-pulmonary-fibrosis-progression\"\nBATCH_SIZE=128\n\ntr = pd.read_csv(f\"{ROOT}\/train.csv\")\ntr.drop_duplicates(keep=False, inplace=True, subset=['Patient','Weeks'])\nchunk = pd.read_csv(f\"{ROOT}\/test.csv\")\n\nprint(\"add infos\")\nsub = pd.read_csv(f\"{ROOT}\/sample_submission.csv\")\nsub['Patient'] = sub['Patient_Week'].apply(lambda x:x.split('_')[0])\nsub['Weeks'] = sub['Patient_Week'].apply(lambda x: int(x.split('_')[-1]))\nsub =  sub[['Patient','Weeks','Confidence','Patient_Week']]\nsub = sub.merge(chunk.drop('Weeks', axis=1), on=\"Patient\")","19e600c2":"tr['WHERE'] = 'train'\nchunk['WHERE'] = 'val'\nsub['WHERE'] = 'test'\ndata = tr.append([chunk, sub])","e4b79af3":"print(tr.shape, chunk.shape, sub.shape, data.shape)\nprint(tr.Patient.nunique(), chunk.Patient.nunique(), sub.Patient.nunique(), \n      data.Patient.nunique())","478ee59a":"data['min_week'] = data['Weeks']\ndata.loc[data.WHERE=='test','min_week'] = np.nan\ndata['min_week'] = data.groupby('Patient')['min_week'].transform('min')","8a3395f9":"base = data.loc[data.Weeks == data.min_week]\nbase = base[['Patient','FVC']].copy()\nbase.columns = ['Patient','min_FVC']\nbase['nb'] = 1\nbase['nb'] = base.groupby('Patient')['nb'].transform('cumsum')\nbase = base[base.nb==1]\nbase.drop('nb', axis=1, inplace=True)","b0debf15":"data = data.merge(base, on='Patient', how='left')\ndata['base_week'] = data['Weeks'] - data['min_week']\ndel base","dab4604a":"COLS = ['Sex','SmokingStatus'] #,'Age'\nFE = []\nfor col in COLS:\n    for mod in data[col].unique():\n        FE.append(mod)\n        data[mod] = (data[col] == mod).astype(int)","d6949e70":"#\ndata['age'] = (data['Age'] - data['Age'].min() ) \/ ( data['Age'].max() - data['Age'].min() )\ndata['BASE'] = (data['min_FVC'] - data['min_FVC'].min() ) \/ ( data['min_FVC'].max() - data['min_FVC'].min() )\ndata['week'] = (data['base_week'] - data['base_week'].min() ) \/ ( data['base_week'].max() - data['base_week'].min() )\ndata['percent'] = (data['Percent'] - data['Percent'].min() ) \/ ( data['Percent'].max() - data['Percent'].min() )\nFE += ['age','percent','week','BASE']","e84fcf77":"tr = data.loc[data.WHERE=='train']\nchunk = data.loc[data.WHERE=='val']\nsub = data.loc[data.WHERE=='test']\ndel data","27813409":"tr.shape, chunk.shape, sub.shape","395c0df7":"C1, C2 = tf.constant(70, dtype='float32'), tf.constant(1000, dtype=\"float32\")\n\ndef score(y_true, y_pred):\n    tf.dtypes.cast(y_true, tf.float32)\n    tf.dtypes.cast(y_pred, tf.float32)\n    sigma = y_pred[:, 2] - y_pred[:, 0]\n    fvc_pred = y_pred[:, 1]\n    \n    #sigma_clip = sigma + C1\n    sigma_clip = tf.maximum(sigma, C1)\n    delta = tf.abs(y_true[:, 0] - fvc_pred)\n    delta = tf.minimum(delta, C2)\n    sq2 = tf.sqrt( tf.dtypes.cast(2, dtype=tf.float32) )\n    metric = (delta \/ sigma_clip)*sq2 + tf.math.log(sigma_clip* sq2)\n    return K.mean(metric)\n\ndef qloss(y_true, y_pred):\n    # Pinball loss for multiple quantiles\n    qs = [0.2, 0.50, 0.8]\n    q = tf.constant(np.array([qs]), dtype=tf.float32)\n    e = y_true - y_pred\n    v = tf.maximum(q*e, (q-1)*e)\n    return K.mean(v)\n\ndef mloss(_lambda):\n    def loss(y_true, y_pred):\n        return _lambda * qloss(y_true, y_pred) + (1 - _lambda)*score(y_true, y_pred)\n    return loss\n\ndef make_model(nh):\n    z = L.Input((nh,), name=\"Patient\")\n    x = L.Dense(100, activation=\"relu\", name=\"d1\")(z)\n    x = L.Dense(100, activation=\"relu\", name=\"d2\")(x)\n    p1 = L.Dense(3, activation=\"linear\", name=\"p1\")(x)\n    p2 = L.Dense(3, activation=\"relu\", name=\"p2\")(x)\n    preds = L.Lambda(lambda x: x[0] + tf.cumsum(x[1], axis=1), \n                     name=\"preds\")([p1, p2])\n    \n    model = M.Model(z, preds, name=\"CNN\")\n    model.compile(loss=mloss(0.65), optimizer=tf.keras.optimizers.Adam(lr=0.1, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.01, amsgrad=False), metrics=[score])\n    return model","79dda5cf":"y = tr['FVC'].values\nz = tr[FE].values\nze = sub[FE].values\nnh = z.shape[1]\npe = np.zeros((ze.shape[0], 3))\npred = np.zeros((z.shape[0], 3))","7f9c2133":"net = make_model(nh)\nprint(net.summary())\nprint(net.count_params())","51fbd195":"NFOLD = 5 # originally 5\nkf = KFold(n_splits=NFOLD)","7e1937aa":"%%time\ncnt = 0\nEPOCHS = 855\nfor tr_idx, val_idx in kf.split(z):\n    cnt += 1\n    print(f\"FOLD {cnt}\")\n    net = make_model(nh)\n    net.fit(z[tr_idx], y[tr_idx], batch_size=BATCH_SIZE, epochs=EPOCHS, \n            validation_data=(z[val_idx], y[val_idx]), verbose=0) #\n    print(\"train\", net.evaluate(z[tr_idx], y[tr_idx], verbose=0, batch_size=BATCH_SIZE))\n    print(\"val\", net.evaluate(z[val_idx], y[val_idx], verbose=0, batch_size=BATCH_SIZE))\n    print(\"predict val...\")\n    pred[val_idx] = net.predict(z[val_idx], batch_size=BATCH_SIZE, verbose=0)\n    print(\"predict test...\")\n    pe += net.predict(ze, batch_size=BATCH_SIZE, verbose=0) \/ NFOLD","f3a2fcba":"sigma_opt = mean_absolute_error(y, pred[:, 1])\nunc = pred[:,2] - pred[:, 0]\nsigma_mean = np.mean(unc)\nprint(sigma_opt, sigma_mean)","88ca2c2b":"idxs = np.random.randint(0, y.shape[0], 100)\nplt.plot(y[idxs], label=\"ground truth\")\nplt.plot(pred[idxs, 0], label=\"q25\")\nplt.plot(pred[idxs, 1], label=\"q50\")\nplt.plot(pred[idxs, 2], label=\"q75\")\nplt.legend(loc=\"best\")\nplt.show()","7ae68b53":"print(unc.min(), unc.mean(), unc.max(), (unc>=0).mean())","8cb05057":"plt.hist(unc)\nplt.title(\"uncertainty in prediction\")\nplt.show()","7c8daff1":"sub.head()","19791a14":"# PREDICTION\nsub['FVC1'] = 1.*pe[:, 1]\nsub['Confidence1'] = pe[:, 2] - pe[:, 0]\nsubm = sub[['Patient_Week','FVC','Confidence','FVC1','Confidence1']].copy()\nsubm.loc[~subm.FVC1.isnull()].head(10)","a0fa4f2d":"subm.loc[~subm.FVC1.isnull(),'FVC'] = subm.loc[~subm.FVC1.isnull(),'FVC1']\nif sigma_mean<70:\n    subm['Confidence'] = sigma_opt\nelse:\n    subm.loc[~subm.FVC1.isnull(),'Confidence'] = subm.loc[~subm.FVC1.isnull(),'Confidence1']","2dc0eb85":"subm.head()","94b07b8e":"subm.describe().T","5be2b47e":"otest = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\nfor i in range(len(otest)):\n    subm.loc[subm['Patient_Week']==otest.Patient[i]+'_'+str(otest.Weeks[i]), 'FVC'] = otest.FVC[i]\n    subm.loc[subm['Patient_Week']==otest.Patient[i]+'_'+str(otest.Weeks[i]), 'Confidence'] = 0.1","04033bd2":"subm[[\"Patient_Week\",\"FVC\",\"Confidence\"]].to_csv(\"submission_regression.csv\", index=False)","3a050d15":"reg_sub = subm[[\"Patient_Week\",\"FVC\",\"Confidence\"]].copy()","bc217921":"df1 = img_sub.sort_values(by=['Patient_Week'], ascending=True).reset_index(drop=True)\ndf2 = reg_sub.sort_values(by=['Patient_Week'], ascending=True).reset_index(drop=True)","662be645":"df = df1[['Patient_Week']].copy()\ndf['FVC'] = FVC_weight*df1['FVC'] + (1-FVC_weight)*df2['FVC']\ndf['Confidence'] = Confidence_weight*df1['Confidence'] + (1-Confidence_weight)*df2['Confidence']\ndf.head()","190b08de":"df.to_csv('submission.csv', index=False)","f58fb3b4":"### Commit 19\n\n* Dropout_model = 0.39\n* FVC_weight = 0.2\n* Confidence_weight = 0.2\n\nLB = -6.8090","68d10308":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [My upgrade](#2)\n    -  [Commit now](#2.1)\n    -  [Previous commits](#2.2)\n    -  [Parameters and LB score visualization](#2.3)\n1. [Download data, auxiliary functions and model tuning](#3)\n1. [Prediction and submission](#4)\n    -  [Average prediction](#4.1)\n    -  [Osic-Multiple-Quantile-Regression](#4.2)\n    -  [The change of mloss](#4.3) \n    -  [Ensemble and blending](#4.4)","1995b447":"### Commit 15\n\n* Dropout_model = 0.32\n* FVC_weight = 0.2\n* Confidence_weight = 0.2\n\nLB = -6.8092","32621bd0":"### Commit 10\n\n* Dropout_model = 0.36\n* FVC_weight = 0.2\n* Confidence_weight = 0.2\n\nLB = -6.8089","9773cb62":"## 4.3 The change of mloss <a class=\"anchor\" id=\"4.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","9dc44516":"### Commit 21\n\n* Dropout_model = 0.38\n* FVC_weight = 0.19\n* Confidence_weight = 0.19\n\nLB = -6.8093","531eaee6":"### Commit 11\n\n* Dropout_model = 0.36\n* FVC_weight = 0.15\n* Confidence_weight = 0.15\n\nLB = -6.8100","6ac3aed8":"### seed_everything\n* Commits 1-21: seed_everything = 42\n* Commit 23: seed_everything = 0\n","9e4a2b1a":"### Commit 18\n\n* Dropout_model = 0.38\n* FVC_weight = 0.2\n* Confidence_weight = 0.2\n\nLB = -6.8087","2e8b38f0":"## 2.3 Parameters and LB score visualization <a class=\"anchor\" id=\"2.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","4e5c7bf4":"### Commit 14\n\n* Dropout_model = 0.36\n* FVC_weight = 0.225\n* Confidence_weight = 0.225\n\nLB = -6.8100","755d2193":"### Commit 9\n\n* Dropout_model = 0.35\n* FVC_weight = 0.3\n* Confidence_weight = 0.3\n\nLB = -6.8125","c547ee88":"<a class=\"anchor\" id=\"0\"><\/a>\n# [OSIC Pulmonary Fibrosis Progression](https:\/\/www.kaggle.com\/c\/osic-pulmonary-fibrosis-progression)","923dbeee":"### Commit 6\n\n* Dropout_model = 0.36\n* FVC_weight = 0.35\n* Confidence_weight = 0.36\n\nLB = -6.8158","1735e638":"### Commit 1 (parameters from https:\/\/www.kaggle.com\/reighns\/higher-lb-score-by-tuning-mloss)\n\n* Dropout_model = 0.4\n* FVC_weight = 0.25\n* Confidence_weight = 0.26\n\nLB = -6.8111","a02702fc":"### Commit 17\n\n* Dropout_model = 0.25\n* FVC_weight = 0.5\n* Confidence_weight = 0.5\n\nLB = -6.8283","94f919dc":"## 3. Download data, auxiliary functions and model tuning <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","ede161bf":"## 2.1. Commit now <a class=\"anchor\" id=\"2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","639189b9":"## 4.2 Osic-Multiple-Quantile-Regression <a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","6fd46f72":"### Commit 23\n\n* Dropout_model = 0.38\n* FVC_weight = 0.2\n* Confidence_weight = 0.2\n\nLB = -6.8402","abd25a12":"## 1. Import libraries <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","fc0dc7d8":"### Commit 13\n\n* Dropout_model = 0.36\n* FVC_weight = 0.175\n* Confidence_weight = 0.175\n\nLB = -6.8096","3ea9efae":"[Go to Top](#0)","dfa3d2f7":"Other parameters should be changed to increase accuracy.","3f0de4a9":"## 2.2 Previous commits <a class=\"anchor\" id=\"2.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","715c5ed6":"## 4. Prediction and submission <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","39ec2562":"## 2. My upgrade <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","585dd170":"### Commit 4\n\n* Dropout_model = 0.36\n* FVC_weight = 0.25\n* Confidence_weight = 0.26\n\nLB = -6.8105","7ad60f12":"### Commit 20\n\n* Dropout_model = 0.37\n* FVC_weight = 0.2\n* Confidence_weight = 0.2\n\nLB = -6.8092","bfacbd6c":"# Acknowledgements\n\n* Ulrich GOUE's Osic-Multiple-Quantile-Regression-Starter\n    - Model that uses images can be found at: https:\/\/www.kaggle.com\/miklgr500\/linear-decay-based-on-resnet-cnn\n* Michael Kazachok's Linear Decay (based on ResNet CNN)\n    - Model that uses tabular data can be found at: https:\/\/www.kaggle.com\/ulrich07\/osic-multiple-quantile-regression-starter\n* Replaced Michael's model with EfficientNets B0, B2, B4\n* Tuning the parameters of the models from https:\/\/www.kaggle.com\/reighns\/higher-lb-score-by-tuning-mloss \n* https:\/\/www.kaggle.com\/leoisleo1\/efficientnets-quantile-regression-inference\n* https:\/\/www.kaggle.com\/khoongweihao\/efficientnets-quantile-regression-inference","71703902":"### I use the notebook [Higher LB score by tuning mloss (around -6.811)](https:\/\/www.kaggle.com\/reighns\/higher-lb-score-by-tuning-mloss-around-6-811) from [Hongnan Gao](https:\/\/www.kaggle.com\/reighns) as a basis and will try to tune its various parameters. \n\n#### From the first attempt, it was possible to improve the LB score","2c49542d":"## 4.1 Average prediction <a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","35bf523f":"## 4.4 Ensemble and blending <a class=\"anchor\" id=\"4.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","4049241e":"### Commit 8\n\n* Dropout_model = 0.35\n* FVC_weight = 0.25\n* Confidence_weight = 0.26\n\nLB = -6.8107","a5ff94ba":"### Commit 16\n\n* Dropout_model = 0.25\n* FVC_weight = 0.2\n* Confidence_weight = 0.2\n\nLB = -6.8093"}}