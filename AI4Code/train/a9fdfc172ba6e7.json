{"cell_type":{"e7f7413b":"code","b911428e":"code","21774670":"code","5309913f":"code","445e6d6f":"code","a349efa5":"code","11e93073":"code","fa7ce28d":"code","4d9c4d98":"code","65248c2e":"code","2a2c5725":"code","66bf4ad9":"code","e7727dc6":"code","2f52f9bb":"code","55d20fea":"code","dfc06439":"markdown","568e868a":"markdown","91dca11c":"markdown","8e566501":"markdown","5843e69a":"markdown","32f22bee":"markdown","814aa502":"markdown","928119a9":"markdown"},"source":{"e7f7413b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","b911428e":"train_dir = '..\/input\/cassava-leaf-disease-classification\/train_images\/'\ntest_dir = '..\/input\/cassava-leaf-disease-classification\/test_images\/'\n","21774670":"train_df = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\nlabel_js = pd.read_json('..\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json', \n                         orient='index')\n","5309913f":"train_df['image'] = train_dir+train_df.image_id","445e6d6f":"from keras.preprocessing import image\nfig, axes = plt.subplots(nrows=5, ncols=5, figsize=(20,20))\nfor row in np.arange(5):\n    for col in np.arange(5):        \n        cur_img_name = train_df[train_df.label==row].image.sample().values[0]\n        cur_img = image.load_img(cur_img_name)\n        cur_img = image.img_to_array(cur_img)\n        axes[row, col].imshow(cur_img\/255., aspect='auto')  \n        axes[row, col].tick_params(axis='both', which='both', \n                                   bottom=False, top=False, \n                                   labelbottom=False, right=False, \n                                   left=False, labelleft=False)\nfor ax, label in zip(axes[:,0], label_js[0]):\n    ax.set_ylabel(label, rotation=90, size='large')\n\nplt.subplots_adjust(wspace=.05, hspace=.05)\nplt.show()\n","a349efa5":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(train_df['image'],train_df['label'], test_size=0.2)\n\nfrom sklearn.preprocessing import LabelBinarizer\nlb = LabelBinarizer()\nlb.fit(train_df.label)\n\ny_train_lb = lb.transform(y_train)\ny_val_lb = lb.transform(y_val)\n\nX_train_df = pd.DataFrame(X_train).reset_index().drop(labels='index', axis=1)\ny_train_df = pd.DataFrame(y_train_lb).add_prefix('label_')\n\nX_val_df = pd.DataFrame(X_val).reset_index().drop(labels='index', axis=1)\ny_val_df = pd.DataFrame(y_val_lb).add_prefix('label_')\n\ntrain = pd.concat([X_train_df, y_train_df], axis=1)\nvalidation = pd.concat([X_val_df, y_val_df], axis=1)\n\n","11e93073":"from keras.preprocessing.image import ImageDataGenerator\n\ndef create_image_generators(preprocess_input, target_image_size):\n    train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n    val_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n\n    train_generator = train_datagen.flow_from_dataframe(\n        train,\n        x_col='image',\n        y_col=[f'label_{x}' for x in np.arange(5)],\n        target_size=target_image_size,\n        batch_size=32,\n        shuffle=True,\n        class_mode='raw')\n\n    validation_generator = val_datagen.flow_from_dataframe(\n        validation,\n        x_col='image',\n        y_col=[f'label_{x}' for x in np.arange(5)],\n        target_size=target_image_size,\n        shuffle=False,\n        batch_size=32,\n        class_mode='raw')\n    return train_generator, validation_generator","fa7ce28d":"from keras.applications.resnet50 import preprocess_input as preprocess_input_rn\ntrain_generator_rn50, validation_generator_rn50 = create_image_generators(preprocess_input_rn, (224,224))","4d9c4d98":"from keras.applications.resnet50 import ResNet50 \nbase_model_rn50 = ResNet50(input_shape=(224,224, 3),\n                        include_top=False, \n                        weights='imagenet')\n","65248c2e":"from keras.layers import Flatten, Dense, GlobalAveragePooling2D, BatchNormalization, Activation, Dropout\nfrom keras.models import Model, Sequential\n\ndropout_dense_layer = 0.3\n\nmodel_rn50 = Sequential()\nmodel_rn50.add(base_model_rn50)\n    \nmodel_rn50.add(GlobalAveragePooling2D())\nmodel_rn50.add(Dense(128))\nmodel_rn50.add(BatchNormalization())\nmodel_rn50.add(Activation('relu'))\nmodel_rn50.add(Dense(32))\nmodel_rn50.add(BatchNormalization())\nmodel_rn50.add(Activation('relu'))\nmodel_rn50.add(Dropout(dropout_dense_layer))\n\nmodel_rn50.add(Dense(5, activation='softmax'))\n    \nmodel_rn50.summary()","2a2c5725":"model_rn50.compile(optimizer='adam', \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])","66bf4ad9":"EPOCHS = 5\nBATCH_SIZE = 32\n","e7727dc6":"history = model_rn50.fit_generator(generator=train_generator_rn50,\n                    validation_data=validation_generator_rn50,                    \n                    steps_per_epoch=len(train)\/\/BATCH_SIZE,\n                    epochs=EPOCHS)","2f52f9bb":"import os\nimage_name_list = os.listdir(test_dir)\n\nlabel_list_rn50 = []\nlist_rn50 = []\n\n\n\nfor image_name in image_name_list:\n    img = image.load_img(test_dir+image_name, target_size=(224, 224))\n    model_input_img = preprocess_input_rn(np.expand_dims(img.copy(), axis=0)) \n    predicted_list_rn50 = model_rn50.predict(model_input_img)   \n    list_rn50.append(predicted_list_rn50)\n    predicted_label = np.argmax(predicted_list_rn50)\n    label_list_rn50.append(predicted_label)","55d20fea":"label_list_rn50","dfc06439":"Loading base model and previously saved weights","568e868a":"Function for creating training and validation image generators","91dca11c":"Predict labels","8e566501":"Splitting dataset and encoding categorical target","5843e69a":"# ResNet50 model","32f22bee":"Image generators for training and validation","814aa502":"Disease sample photos","928119a9":"Adding layers for classification"}}