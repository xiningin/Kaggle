{"cell_type":{"2e0ff383":"code","e58e9388":"code","b92415a0":"code","d6722797":"code","7903e77e":"code","646328ef":"code","e2a76d40":"code","9cf91a08":"code","063d28a0":"code","83c80757":"code","8fdcb30f":"code","99daba41":"code","c040a10e":"code","c2a8f20a":"code","d1c32c38":"code","1144a679":"code","6387c4b1":"code","5f92dc0a":"code","eae9fd7d":"code","118d4551":"code","adb57d23":"code","006e5066":"code","240f6707":"code","55f2a2dd":"code","95f96dc1":"code","d5e58aaf":"code","90980b9f":"markdown","a2d591b6":"markdown","15d42bd8":"markdown","02c110c8":"markdown","2b66686f":"markdown","41bc78ae":"markdown","5849ff6f":"markdown","2186a30f":"markdown","75b8d4a4":"markdown","0acb8894":"markdown"},"source":{"2e0ff383":"from IPython.display import Image\nImage(\"\/kaggle\/input\/dtw-image\/Screenshot 2020-06-07 at 10.53.09.png\")","e58e9388":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n!pip install tslearn\nimport tslearn\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import date\nfrom tslearn.clustering import TimeSeriesKMeans \nfrom tslearn import metrics\n\nfrom scipy.signal import hilbert, butter, filtfilt\nfrom scipy.fftpack import fft,fftfreq,rfft,irfft,ifft\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport scipy.stats as stats\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nseed = 0\nnp.random.seed(seed)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b92415a0":"df_covid = pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv')","d6722797":"df_covid.head()","7903e77e":"#Datatype conversion\ndf_covid.Date = pd.to_datetime(df_covid.Date)","646328ef":"#Checking the number of entries for each country\ndf_covid['Country\/Region'].value_counts()","e2a76d40":" selected_countries = df_covid['Country\/Region'].value_counts().reset_index(name=\"count\").query(\"count > 500\")['index']","9cf91a08":"df_covid_filtered = df_covid[df_covid['Country\/Region'].isin(selected_countries)]","063d28a0":"# multiline plot with group by\n\nfig, ax1= plt.subplots(nrows = 1, ncols = 1,figsize=(15,15))\nfor key, grp in df_covid_filtered.groupby(['Country\/Region']): \n    ax1.plot(grp['Date'], grp['Confirmed'], label = \"{}\".format(key))\nplt.legend(loc='best')    \nplt.show()\n","83c80757":"df_covid_filtered['Date'] = pd.to_datetime(df_covid_filtered['Date'])","8fdcb30f":"\ndf_covid_pivot = df_covid.reset_index().pivot_table(index='Date', columns='Country\/Region', values='Confirmed', aggfunc = 'sum')","99daba41":"#Transposing\ndf_covid_pivot = df_covid_pivot.T","c040a10e":"df_covid_pivot.index","c2a8f20a":"# converting to array \ndf_train = np.array(df_covid_pivot).reshape(df_covid_pivot.shape[0],df_covid_pivot.shape[1],1)","d1c32c38":"plt.figure(figsize=(20,15))\nsz = df_train.shape[1]\n\n# DBA-k-means\nprint(\"DBA k-means\")\ndba_km = TimeSeriesKMeans(n_clusters=4,\n                          n_init=2,\n                          metric=\"dtw\",\n                          verbose=True,\n                          max_iter_barycenter=10,\n                          random_state=seed)\ny_pred = dba_km.fit_predict(df_train)\nlabels = dict(zip(df_covid_pivot.index, y_pred))\n\n\nfor yi in range(4):\n    plt.subplot(2, 2, 1 + yi)\n    for xx in df_train[y_pred == yi]:\n        if yi == 0:\n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='blue' ) \n            plt.legend([ k for k, v in labels.items() if v == 0 ], loc ='upper left')\n        elif yi == 1: \n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='green' )\n            plt.legend([ k for k, v in labels.items() if v == 1 ], loc ='upper left')\n            \n        elif yi ==2:\n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='magenta' )\n            plt.legend([ k for k, v in labels.items() if v == 2 ], loc ='upper left')\n            \n        else:\n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='purple' )\n            plt.legend([ k for k, v in labels.items() if v == 3 ], loc ='upper left')\n            \n        plt.plot(dba_km.cluster_centers_[yi].ravel(), \"r-\")\n    plt.xlim(0, sz)\n    plt.ylim(-5, 1000000)\n    #plt.legend(df_excep.columns[1:],loc=\"upper left\")\n    plt.text(0.55, 0.85,'Cluster %d ' % (yi + 1),\n             transform=plt.gca().transAxes)\n    ","1144a679":"\nplt.figure(figsize=(20,15))\nsz = df_train.shape[1]\n\n# Euclidean distance k means\nprint(\"Euclidean k-means\")\nkm = TimeSeriesKMeans(n_clusters=4, verbose=True, random_state=seed)\ny_pred = km.fit_predict(df_train)\nlabels = dict(zip(df_covid_pivot.index, y_pred))\n\n\nfor yi in range(4):\n    plt.subplot(2, 2, 1 + yi)\n    for xx in df_train[y_pred == yi]:\n        if yi == 0:\n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='blue' ) \n            plt.legend([ k for k, v in labels.items() if v == 0 ], loc ='upper left')\n        elif yi == 1: \n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='green' )\n            plt.legend([ k for k, v in labels.items() if v == 1 ], loc ='upper left')\n            \n        elif yi ==2:\n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='magenta' )\n            plt.legend([ k for k, v in labels.items() if v == 2 ], loc ='upper left')\n            \n        else:\n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='purple' )\n            plt.legend([ k for k, v in labels.items() if v == 3 ], loc ='upper left')\n            \n        plt.plot(dba_km.cluster_centers_[yi].ravel(), \"r-\")\n    plt.xlim(0, sz)\n    plt.ylim(-5, 1000000)\n    #plt.legend(df_excep.columns[1:],loc=\"upper left\")\n    plt.text(0.55, 0.85,'Cluster %d ' % (yi + 1),\n             transform=plt.gca().transAxes)\n    ","6387c4b1":"\nplt.figure(figsize=(20,15))\nsz = df_train.shape[1]\n\n# Soft dtw -  k means\nprint(\"Soft dtw k-means\")\nkm = TimeSeriesKMeans(n_clusters=4,\n                           metric=\"softdtw\",\n                           metric_params={\"gamma\": .01},\n                           verbose=True,\n                           random_state=seed)\ny_pred = km.fit_predict(df_train)\nlabels = dict(zip(df_covid_pivot.index, y_pred))\n\n\nfor yi in range(4):\n    plt.subplot(2, 2, 1 + yi)\n    for xx in df_train[y_pred == yi]:\n        if yi == 0:\n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='blue' ) \n            plt.legend([ k for k, v in labels.items() if v == 0 ], loc ='upper left')\n        elif yi == 1: \n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='green' )\n            plt.legend([ k for k, v in labels.items() if v == 1 ], loc ='upper left')\n            \n        elif yi ==2:\n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='magenta' )\n            plt.legend([ k for k, v in labels.items() if v == 2 ], loc ='upper left')\n            \n        else:\n            plt.plot(xx.ravel(), \"k-\", alpha=.5, color ='purple' )\n            plt.legend([ k for k, v in labels.items() if v == 3 ], loc ='upper left')\n            \n        plt.plot(dba_km.cluster_centers_[yi].ravel(), \"r-\")\n    plt.xlim(0, sz)\n    plt.ylim(-5, 1000000)\n    #plt.legend(df_excep.columns[1:],loc=\"upper left\")\n    plt.text(0.55, 0.85,'Cluster %d ' % (yi + 1),\n             transform=plt.gca().transAxes)\n    ","5f92dc0a":"df_covid_cluster_results = df_covid_pivot","eae9fd7d":"df_covid_cluster_results['Cluster'] = y_pred","118d4551":"df_covid_cluster_results.loc[df_covid_cluster_results.Cluster==2,df_covid_cluster_results.columns !='Cluster']","adb57d23":"for i in range(4):\n    for j in range(4):\n        if i < j:\n            path, dist = metrics.dtw_path(df_covid_cluster_results.loc[df_covid_cluster_results.Cluster==i,df_covid_cluster_results.columns !='Cluster'], \n                                df_covid_cluster_results.loc[df_covid_cluster_results.Cluster==j,df_covid_cluster_results.columns !='Cluster'])\n            print('Distance between cluster ' +str(i)+ ' and '+ str(j)+ ' is  %.2f'%(dist))","006e5066":"#Band pass filter\ndef butter_bandpass(lowcut, highcut, fs, order=5):\n    nyq = 0.5 * fs\n    low = lowcut \/ nyq\n    high = highcut \/ nyq\n    b, a = butter(order, [low, high], btype='band')\n    return b, a\n\n\ndef butter_bandpass_filter(data, lowcut, highcut, fs, order=5):\n    b, a = butter_bandpass(lowcut, highcut, fs, order=order)\n    y = filtfilt(b, a, data)\n    return y\n\nlowcut  = .01\nhighcut = .5\nfs = 30.\norder = 1","240f6707":"y1 = butter_bandpass_filter(df_covid_pivot.loc['Brazil',:],lowcut=lowcut,highcut=highcut,fs=fs,order=order)\ny2 = butter_bandpass_filter(df_covid_pivot.loc['Russia',:],lowcut=lowcut,highcut=highcut,fs=fs,order=order)\n\nal1 = np.angle(hilbert(y1),deg=False)\nal2 = np.angle(hilbert(y2),deg=False)\nphase_synchrony = 1-np.sin(np.abs(al1-al2)\/2)\nN = len(al1)\n\n# Plot results\nf,ax = plt.subplots(3,1,figsize=(14,7),sharex=True)\nax[0].plot(y1,color='r',label='y1')\nax[0].plot(y2,color='b',label='y2')\nax[0].legend(bbox_to_anchor=(0., 1.02, 1., .102),ncol=2)\nax[0].set(xlim=[0,N], title='Filtered Timeseries Data')\nax[1].plot(al1,color='r')\nax[1].plot(al2,color='b')\nax[1].set(ylabel='Angle',title='Angle at each Timepoint',xlim=[0,N])\nphase_synchrony = 1-np.sin(np.abs(al1-al2)\/2)\nax[2].plot(phase_synchrony)\nax[2].set(ylim=[0,1.1],xlim=[0,N],title='Instantaneous Phase Synchrony',xlabel='Time',ylabel='Phase Synchrony')\nplt.tight_layout()\nplt.show()","55f2a2dd":"phase_synchrony.mean()","95f96dc1":"y1 = butter_bandpass_filter(df_covid_pivot.loc['Brazil',:],lowcut=lowcut,highcut=highcut,fs=fs,order=order)\ny2 = butter_bandpass_filter(df_covid_pivot.loc['US',:],lowcut=lowcut,highcut=highcut,fs=fs,order=order)\n\nal1 = np.angle(hilbert(y1),deg=False)\nal2 = np.angle(hilbert(y2),deg=False)\nphase_synchrony = 1-np.sin(np.abs(al1-al2)\/2)\nN = len(al1)\n\n# Plot results\nf,ax = plt.subplots(3,1,figsize=(14,7),sharex=True)\nax[0].plot(y1,color='r',label='y1')\nax[0].plot(y2,color='b',label='y2')\nax[0].legend(bbox_to_anchor=(0., 1.02, 1., .102),ncol=2)\nax[0].set(xlim=[0,N], title='Filtered Timeseries Data')\nax[1].plot(al1,color='r')\nax[1].plot(al2,color='b')\nax[1].set(ylabel='Angle',title='Angle at each Timepoint',xlim=[0,N])\nphase_synchrony = 1-np.sin(np.abs(al1-al2)\/2)\nax[2].plot(phase_synchrony)\nax[2].set(ylim=[0,1.1],xlim=[0,N],title='Instantaneous Phase Synchrony',xlabel='Time',ylabel='Phase Synchrony')\nplt.tight_layout()\nplt.show()","d5e58aaf":"# phase synchrony is lower as compared to same cluster countries\n\nphase_synchrony.mean()","90980b9f":"# Dynamic Time Warping:\n\nDynamic Time Warping is a path-searching algorithm. DTW finds the minimum cost path between the complete matrix of pairwise distances between two time-series.\n\nThis matrix of pairwise distances is referred to as the cost matrix.\n\n\nLow cost implies similarity, high cost implies dissimilarity. DTW finds a path through the cost matrix of minimum total cost. Each valid path through the cost matrix is called a \u201cwarping\u201d path.\n\n\n","a2d591b6":"# Reading Dataset","15d42bd8":"# Phase Synchrony\n\nPhase Synchrony, measures moment-to-moment synchrony between two signals. It can be somewhat subjective because you need to filter the data to the wavelength of interest but you might have theoretical reasons for determining such bands. To calculate phase synchrony, we need to extract the phase of the signal which can be done by using the Hilbert transform which splits the signal into its phase and power. This allows us to assess if two signals are in phase (moving up and down together) or out of phase.\n\nIf we want to compare the pattern of two specific countries and see how similar they are, we can use phase synchrony approach. Let's pick Brazil and Russia as those countries are clustered together due to similar pattern by DTW. ","02c110c8":"Ref:\nhttps:\/\/towardsdatascience.com\/four-ways-to-quantify-synchrony-between-time-series-data-b99136c4a9c9\n","2b66686f":"# Euclidean distance - Timeseries clustering\n\n\nThe Euclidean distance between two time series is the square root of the sum of the squared length of the vertical hatch lines while joining the series point to point\n","41bc78ae":"As we can see, the phase synchrony is quite high between these 2 countries as they have similar pattern of increase in covid cases which was rightly clustered together using dtw.","5849ff6f":"# Soft Dynamic Time Warping - Timeseries Clustering\n\nSoft-DTW is a differentiable loss function, and both its value and gradient can be computed with quadratic time\/space complexity (DTW has quadratic time but linear space complexity). ","2186a30f":"Let's try to check the sychrony between Brazil and US which are from different clusters and have different pattern of increase.","75b8d4a4":"# Dynamic time warping - Time series clustering","0acb8894":"# Finding similarity between the clusters"}}