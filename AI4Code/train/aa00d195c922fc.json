{"cell_type":{"3dea4100":"code","965a18d2":"code","1f5a0f64":"code","1387a536":"code","23b87881":"code","cc35fefd":"code","c96c7bfa":"code","8fda4f19":"code","40461fdc":"code","d7b6388f":"code","414ad7dc":"code","46776e70":"code","aab47062":"code","e577be9f":"code","91e807c7":"code","eeaca135":"code","3d8cd8e6":"code","ea8d2345":"code","2226fad3":"code","6139c849":"code","c5427701":"code","da16600d":"markdown","bfc38233":"markdown"},"source":{"3dea4100":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","965a18d2":"import numpy as np\nimport pandas as pd","1f5a0f64":"data = pd.read_csv('\/kaggle\/input\/imdb-5000-movie-dataset\/movie_metadata.csv')\ndata.head()","1387a536":"data.shape, data.columns","23b87881":"# keep important features which can help to recommend movies, drop others\ndata = data.drop(['color', 'num_critic_for_reviews', 'duration',\n        'director_facebook_likes', 'actor_3_facebook_likes',\n        'actor_1_facebook_likes', 'gross', \n        'num_voted_users', 'cast_total_facebook_likes',\n        'facenumber_in_poster', 'plot_keywords', 'movie_imdb_link',\n        'num_user_for_reviews', 'language', 'country',\n        'content_rating', 'budget', 'title_year', 'actor_2_facebook_likes',\n        'imdb_score', 'aspect_ratio', 'movie_facebook_likes'], 1)","cc35fefd":"data.head()","c96c7bfa":"data.info()","8fda4f19":"data.dropna(inplace=True)","40461fdc":"## clean genres--- remove | between generes\ndata['genres'] = data['genres'].apply(lambda a: str(a).replace('|', ' '))\ndata['genres']","d7b6388f":"data['movie_title'][0]","414ad7dc":"data['movie_title'] = data['movie_title'].apply(lambda a:a[:-1])\ndata['movie_title'][0]","46776e70":"## combined features on which we will calculate cosine similarity\ndata['combined'] = data['director_name']+' '+data['actor_2_name']+' '+data['genres']+' '+data['actor_1_name']+' '+data['actor_3_name']","aab47062":"data.head()","e577be9f":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","91e807c7":"vec = CountVectorizer()\nvec_matrix = vec.fit_transform(data['combined'])","eeaca135":"similarity = cosine_similarity(vec_matrix)","3d8cd8e6":"def recommend(movie):\n    if movie not in data['movie_title'].unique():\n        return('Sorry! The movie you requested is not in our database. Please check the spelling or try with some other movies')\n    else:\n        i = data.loc[data['movie_title']==movie].index[0]\n        lst = list(enumerate(similarity[i]))\n        lst = sorted(lst, key = lambda x:x[1] ,reverse=True)\n        lst = lst[1:11] # excluding first item since it is the requested movie itself\n        l = []\n        for i in range(len(lst)):\n            a = lst[i][0]\n            l.append(data['movie_title'][a])\n        plt.bar(l, [i[1] for i in lst])\n        plt.xticks(rotation=90)\n        plt.xlabel('similar movies to---> '+movie)\n        plt.ylabel('cosine scores')\n        return l","ea8d2345":"data['movie_title'].sample(10)","2226fad3":"recommend('The Kids Are All Right')","6139c849":"recommend('The Dark Knight Rises')","c5427701":"recommend('Pirates of the Caribbean: At World\\'s End')","da16600d":"### vectorizing and then calculating cosine sim","bfc38233":"### Text Preprocessing"}}