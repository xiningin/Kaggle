{"cell_type":{"8fe37c36":"code","f197b453":"code","9d487090":"code","05736485":"code","859d4207":"code","bf38e8c5":"code","e9622c17":"code","b2bc4108":"code","831153ea":"code","da5af4df":"code","3cb9b949":"code","9c84b78f":"code","7010cadc":"code","3558a0ba":"code","c57b02bf":"code","f60ae443":"code","80df35ec":"code","90ead9a7":"markdown","5570d144":"markdown","c836fdb6":"markdown","d7074a95":"markdown","937db750":"markdown","36ad23fc":"markdown","8fac0f50":"markdown","f6a4d8e4":"markdown","67afa272":"markdown","c3ef15f8":"markdown","ead86ca2":"markdown","3a36d4a5":"markdown","943b1121":"markdown","58f0bbd9":"markdown","93ef189f":"markdown","e180ceef":"markdown","2d670c85":"markdown","4af65d28":"markdown"},"source":{"8fe37c36":"import matplotlib.pyplot as plt\nimport numpy as np \nimport os\nimport pandas as pd \nimport seaborn as sns\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split, cross_val_predict\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f197b453":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","9d487090":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","05736485":"train.info()","859d4207":"train = train.drop('Name', axis=1)\ntrain = train.drop('Cabin', axis=1)\ntrain = train.drop('Ticket', axis=1)\ntrain.info()","bf38e8c5":"train['Age'].fillna(np.nanmedian(train['Age']), inplace=True)\ntrain.info()","e9622c17":"train = pd.get_dummies(train, columns=['Sex'], prefix='Sex')\ntrain = pd.get_dummies(train, columns=['Embarked'], prefix=\"Emb\")\ntrain = pd.get_dummies(train, columns=['Pclass'], prefix='Class')\n\ntrain.head()","b2bc4108":"test = test.drop('Name', axis=1)\ntest = test.drop('Cabin', axis=1)\ntest = test.drop('Ticket', axis=1)\ntest['Age'].fillna(np.nanmedian(test['Age']), inplace=True)\ntest['Fare'].fillna(np.nanmedian(test['Fare']), inplace=True)\ntest = pd.get_dummies(test, columns=['Sex'], prefix='Sex')\ntest = pd.get_dummies(test, columns=['Embarked'], prefix=\"Emb\")\ntest = pd.get_dummies(test, columns=['Pclass'], prefix='Class')","831153ea":"corrmatx = train.corr()\nfig, ax = plt.subplots(figsize=(13,13))         \nsns.heatmap(corrmatx, annot=True, linewidths=.5, ax=ax, center=0)","da5af4df":"X = train.drop('Survived', axis=1)\ny = train[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.1, random_state=42)","3cb9b949":"tree_class = DecisionTreeClassifier(random_state=42)\n\ntree_class.fit(X_train, y_train)","9c84b78f":"tree_predictions = tree_class.predict(X_test)\ny_train_pred = cross_val_predict(tree_class, X_train, y_train, cv=3)\n\nconfmx = confusion_matrix(y_train,y_train_pred)\n\nplt.matshow(confmx, cmap=plt.cm.gray)\nprint(confmx)\ntree_score = tree_class.score(X_test,y_test)\nprint(tree_score)","7010cadc":"knn = KNeighborsClassifier(n_neighbors=5)\n\nknn.fit(X_train,y_train)","3558a0ba":"knn_predictions = knn.predict(X_test)\ny_train_pred = cross_val_predict(knn, X_train, y_train, cv=3)\n\nconfmx = confusion_matrix(y_train,y_train_pred)\n\nplt.matshow(confmx, cmap=plt.cm.gray)\nprint(confmx)\nknn_score = knn.score(X_test,y_test)\nprint(knn_score)","c57b02bf":"sgd_clf = SGDClassifier(random_state=42)\n\nsgd_clf.fit(X_train,y_train)","f60ae443":"sgd_predictions = sgd_clf.predict(X_test)\ny_train_pred = cross_val_predict(sgd_clf, X_train, y_train, cv=3)\n\nconfmx = confusion_matrix(y_train,y_train_pred)\n\nplt.matshow(confmx, cmap=plt.cm.gray)\nprint(confmx)\nsgd_score = sgd_clf.score(X_test,y_test)\nprint(sgd_score)","80df35ec":"X_pred = test\nif tree_score > sgd_score and tree_score > knn_score:\n    out_pred = tree_class.predict(X_pred)\nelif knn_score > sgd_score and knn_score > sgd_score:\n    out_pred = knn.predict(X_pred)\nelse:\n    out_pred = sgd_clf.predict(X_pred)\n\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': out_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Success\")","90ead9a7":"# Load Data\n## Training Data","5570d144":"# Decision Trees\n## Build Model","c836fdb6":"## Do same to test data","d7074a95":"## Fix missing values","937db750":"# SGDClassifier\n## Build Model\n","36ad23fc":"## Evaluate Model","8fac0f50":"## Evaluate Model","f6a4d8e4":"# Generate Submission Data","67afa272":"# Split Training Data ","c3ef15f8":"## Test Data","ead86ca2":"## Removing irrelevant data\n\nThe name information won't add anything to the model's predictions. While the cabin information could be interesting to compare to, there is too much of it missing to make any sense out of. The ticket number, similar to the passenger name, won't provide much information outside of identifying people.","3a36d4a5":"# Imports","943b1121":"# Nearest Neighbor\n## Build Model","58f0bbd9":"It appears that the highest correlations with surviving passengers are based on being a female or male, with other slightly less correlations being the price of the ticket (which lines up closely with the class the passenger was in), and the port the passenger embarked at (which interestingly also correlates with what class ticket they purchased).","93ef189f":"## One-hot encoding","e180ceef":"# Data Analysis","2d670c85":"## Evaluate Model","4af65d28":"## Correlation Matrix"}}