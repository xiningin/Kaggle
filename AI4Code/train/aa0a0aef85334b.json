{"cell_type":{"5a977072":"code","887c9532":"code","b3d3a2fd":"code","a78a48e6":"code","0dca5250":"code","45a0e707":"code","a58e8086":"code","d8c8c134":"code","932955aa":"code","47a61499":"code","3730c0f5":"code","d8f8638d":"code","87fa6135":"code","9fee49aa":"code","34fdb7fd":"code","94942f9a":"code","4bebaef2":"code","2c1af972":"code","896b9a43":"code","619c119f":"code","94a76b39":"code","1c2f80b7":"code","9d903f9a":"code","5700ca47":"code","4ac4d8ae":"code","88ba0d75":"markdown","91a28c9b":"markdown","66c82a6c":"markdown","b4c52ccd":"markdown","7f130f01":"markdown","f951d94a":"markdown","04c935ce":"markdown","f6317c72":"markdown","4bb6d20a":"markdown","9609c46f":"markdown","5a424828":"markdown","2db3bb2a":"markdown","32c7b754":"markdown","7bbd5bbb":"markdown","6fde5648":"markdown","35c2e200":"markdown","c34107e7":"markdown","53e15354":"markdown","795f0fbc":"markdown","a076a4c8":"markdown","ac502e6f":"markdown","5e754c3d":"markdown","248d1107":"markdown","854ad14e":"markdown"},"source":{"5a977072":"import numpy as np\nimport pandas as pd\n\n# These are just some display settings\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth', None)\n\n# Display floating points in a more readable format\npd.options.display.float_format = '{:,.2f}'.format","887c9532":"# Read in the movies data first\nmovies_df = pd.read_csv(\"\/kaggle\/input\/imdb-data\/IMDb movies.csv\")\nmovies_df.head(5)","b3d3a2fd":"# We can take a look at the schema\nmovies_df.info()","a78a48e6":"# To select certain columns from a dataframe we specify them as a list of strings within square brackets\nmovies_df[['director', 'genre', 'original_title']]","0dca5250":"# To filter a dataframe we use expressions within the square 'selecting' brackets\nmovies_df[movies_df['avg_vote'] >= 7.0].head(3)","45a0e707":"# You can call operations via methods available to the 'dataframe' type\nmovies_df.sort_values(by='avg_vote', ascending=False).head(3)","a58e8086":"movies_df.describe(include=np.number)","d8c8c134":"movies_df.describe(include=['O'])","932955aa":"# Examine the 'worlwide_gross_income' column for its issues\nmovies_df[~(movies_df['worlwide_gross_income'].isna())]['worlwide_gross_income'].head(10)","47a61499":"# We can use regex to extract the digits from the column\nmovies_df['worlwide_gross_income'] = movies_df['worlwide_gross_income'].str.extract(r'(\\d+)').astype('float')\nmovies_df[~(movies_df['worlwide_gross_income'].isna())].head(10)","3730c0f5":"movies_df[['original_title', 'worlwide_gross_income']].sort_values(by='worlwide_gross_income', ascending=False).head(10)","d8f8638d":"# Here we leverage the 'usecols' argument to grab what I need\nratings_df = pd.read_csv(\"\/kaggle\/input\/imdb-data\/IMDb ratings.csv\", usecols=['imdb_title_id', 'mean_vote', 'median_vote', 'males_allages_avg_vote', 'females_allages_avg_vote', 'total_votes'])\nratings_df.head(5)","87fa6135":"movie_ratings_df = movies_df[['imdb_title_id', 'original_title', 'worlwide_gross_income']].merge(\n    ratings_df,\n    on='imdb_title_id',\n    how='inner'\n)\n\nmovie_ratings_df.head(10)","9fee49aa":"movie_ratings_df[['original_title', 'mean_vote', 'total_votes']].sort_values(by='mean_vote', ascending=False).head(10)","34fdb7fd":"filtered_movie_ratings_df = movie_ratings_df[movie_ratings_df['total_votes'] >= 500000].copy()","94942f9a":"filtered_movie_ratings_df[['original_title', 'mean_vote', 'total_votes']].sort_values(by='mean_vote', ascending=False).head(10)","4bebaef2":"# I'll stick with the filtered movies so we can see movies we all know about\nfiltered_movie_ratings_df['skewness'] = filtered_movie_ratings_df['mean_vote'] - filtered_movie_ratings_df['median_vote']\nfiltered_movie_ratings_df.head(10)","2c1af972":"# Get movies with the highest skewness\nfiltered_movie_ratings_df.sort_values('skewness', ascending=False).head(10)","896b9a43":"# This operation creates a new column as the element-wise subtraction of two columns\nfiltered_movie_ratings_df['rating_discrepency_by_sex'] = filtered_movie_ratings_df['males_allages_avg_vote'] - filtered_movie_ratings_df['females_allages_avg_vote']","619c119f":"filtered_movie_ratings_df.sort_values(by='rating_discrepency_by_sex', ascending=False)","94a76b39":"# There's a catch though - this data is de-normalised as two directors appear as one element in the dataframe\n# The filter expression is simply searching for 'director elements' that contain commas\nmovies_df[movies_df['director'].str.contains(',') == True].head(3)","1c2f80b7":"# First move - turn the comman seperated values into a list\nmovies_df['director_list'] = movies_df['director'].str.split(',')\n\nmovies_df[['director', 'director_list']].head(5)","9d903f9a":"# Now we will use the explode operator to turn each list element into a new row\nexploded_movies_df = movies_df.explode('director_list').copy()\n\nexploded_movies_df[['director', 'director_list']][exploded_movies_df['director'].str.contains(',') == True].head(6)","5700ca47":"grouped_exploded_movies_df = exploded_movies_df.groupby('director_list', as_index=False).agg({'worlwide_gross_income': 'sum'})\n\ngrouped_exploded_movies_df","4ac4d8ae":"grouped_exploded_movies_df.sort_values(by='worlwide_gross_income', ascending=False).head(10)","88ba0d75":"## Movies with the Highest Skewness\n>How would you figure which movies people have polarised opinions on?","91a28c9b":"We may look at the data types of each column using the `.info()` method.\n  \n__Note__ that columns which have mixed data types (for example, entries have a combination of integers and strings) will have the **object** dtype.","66c82a6c":"## Introduction\n\nThis notebook is aimed at beginners wanting to learn basic data manipulations using the Pandas library in Python.\nThe datasets used are International Movies Database (IMDB) Data.\n  \nThe basic analysis we are going to answer throughout are:\n* Which are the highest grossing movies within the data?\n* Which movies have the highest average user vote?\n* Which movies have the most 'polarised' votes?\n* Which movies have the largest vote difference by sex?\n* What is the gross income per director?\n*__A Challenge Question!__","b4c52ccd":"A simple strategy would be to simple allocate the same income to each director on the movie.\n  \nNote that the income per director will no longer be additive.","7f130f01":"## Movies with the Largest Vote Difference by Sex\nThere are multiple ways of doing something like this - the one presented is straightforward, but you should try some other ways.\n  \nWe'll stick with the filtered dataset for this question.","f951d94a":"We will be using **\"NumPy\"** and **\"Pandas\"**.\n  \n**NumPy** is a library for Python that adds support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays.\n  \n**Pandas** is a high-level data manipulation tool that is built on the NumPy package.\n  \nAliasing \u201cnumpy\u201d to \u201cnp\u201d and \u201cpandas\u201d and \u201cpd\u201d is optional (you could call them anything you want), but is recommended as a convention.\n  \nSee the Pandas API reference [here](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/index.html).\n  \nSee the NumPy documentation [here](https:\/\/numpy.org\/doc\/).","04c935ce":"## Movies with the highest vote\nIn order to get hold of ratings, the 'IMDB ratings.csv' will need to be joined onto the movies data.\n  \nOnly the necessary columns will be selected from ratings - this assumes some pre-existing knowledge about the data.\n  \n_Note that the movies dataframe has got user rating info - but let's assume we want detailed ratings info._","f6317c72":"## Challenge Question!\n> Find the variance and standard deviation of ratings per movie.\n  \nSee [here](https:\/\/en.wikipedia.org\/wiki\/Variance) for a definition of variance.\n>_Hint:_ The data in `IMDB ratings.csv` has columns that count the number of a particular rating - e.g. `votes_10` counts the number of rating 10 votes for a movie.","4bb6d20a":"__Note__ that 'worlwide_gross_income' is included as an 'object' column instead of a numeric column, which is problematic for the rest of the analysis - we'll have to clean that column.","9609c46f":"We will filter on the `movie_ratings_df` and create a new DataFrame based on the filtered copy.\n\n__Note:__ When creating a new DataFrame from an old one, be sure to remember the **.copy()** method, this ensures you are creating a completely new dataframe that is not 'tied' to the old one.","5a424828":"For more information on methods and techniques in Pandas see the Pandas API reference [here](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/index.html).","2db3bb2a":"The two different options listed give stats for firstly, numeric columns (specified by `include=np.number`), and secondly for 'text-like' columns (specified by `include=['O']`).\n  \n\nNote that the statistics given are different for numbers and text columns.","32c7b754":"But first, we want to examine the 'worlwide_gross_income' column - we do this by viewing the first 10 entries. \\\nWe also ensure to exclude entries which are blank in our preview using the **bitwise NOT operator (~)** and `.isna()` method.","7bbd5bbb":"The `.merge()` method below performs a *SQL-like join*.\n  \nFor a quick refresher on joins see [the W3Schools page](https:\/\/www.w3schools.com\/sql\/sql_join.asp) on joins.\n> Would you consider using another type of join here?","6fde5648":"## Looking at the Basic Stats of a Dataset\nWhen examining a dataset it's useful to look at the basic statistics of each column.","35c2e200":"Let's view the top 10 movies according to average (mean) votes.","c34107e7":"Data skewness can be measured as the difference between the mean and median - this is so because the mean is the average of a variable and thus will tend towards extreme values. The median is the 'middlemost' value in the data and thus is not influenced by outliers like the mean is. _Technically speaking, you should divide this difference by the standard deviation of the data, by the definition of skewness_. More on the standard deviation later.\n  \nThus, their difference is a good measure of how much data tends towards extreme values.\n  \nSee [this](https:\/\/www.youtube.com\/watch?v=U0NZu6f5TMI) video on the concept of skewness.","53e15354":"Next, we want to get rid of the currency symbols and keep only the numerical figures. For this, we will be using **Regular Expressions** to extract digits only. We will then convert the column to a float data type (i.e. a real number with a decimal point).\n\n> Exercise: Do more research on what Regular Expressions are, and how they are used. \\\n> Hint - Have you ever used CTRL+F command before?","795f0fbc":"## Finding the Gross Income per Director\nHere we'll leverage the `group_by` method in Pandas to find the sum of the 'worlwide_gross_income' per director.","a076a4c8":">We see a bunch of movies you \\[probably\\] haven't heard of - why?","ac502e6f":"## Some basic Syntax\nThe following are some fundamental data manipulation techniques in Pandas.","5e754c3d":"## Reading in the Data\nThe key data structure in Pandas is a DataFrame. DataFrames are incredibly powerful as they allow you to store and manipulate tabular data in rows of observations and columns.\n  \nPandas allows us to read in data that exists in mulitple different formats - in this case plain old csv is being used.\n  \nThe `.head(x)` method allows us to preview the first x items of the DataFrame. You should also try out the `.tail()` method.","248d1107":"## Let's import the modules we need","854ad14e":"## Finding the Top Grossing Movies within the Dataset\nNow that the gross income column is clean, the first question can be answered.\n  \nThis is a 'one-liner' using Pandas: simply select and then sort.\n\n>Question: what if we wanted to see the lowest grossing movies?"}}