{"cell_type":{"85e4c951":"code","4d54f117":"code","3e29f69a":"code","290d020e":"code","4a7c19ec":"code","f4635ce4":"code","b50aac70":"code","673de058":"code","2e872224":"markdown","8d344904":"markdown","23ca96bc":"markdown","3888bfb8":"markdown","dd9704ba":"markdown","736b0117":"markdown","61868c47":"markdown","5c29c70b":"markdown","5601f893":"markdown"},"source":{"85e4c951":"import pandas as pd\n\ndef count_if(array, value):\n    count = 0\n    for element in array:\n        if element == value:\n            count += 1\n    return count\n\ndef array_count(elements_to_count, original_array):\n    count_array = [None] * len(elements_to_count)\n    c = 0\n\n    for value in range(len(elements_to_count)):\n        count_array[c] = original_array.count(elements_to_count[value])\n        c += 1\n        \n    return count_array\n\ndef reverse(array):\n    reversed_array = [None]*len(array)\n    n = 0\n    for data in reversed(array):\n        reversed_array[n] = data\n        n += 1\n\n    return reversed_array\n\ndef rank_set_list(df, rank, info, set_list=True, array=True):\n    ranking = df[df['Rank'] == rank]\n    raw_info_in_rank = ranking[info].to_list()\n\n    if set_list == True:\n        set_info = list(set(raw_info_in_rank))\n        none_cases = count_if(set_info, None)\n        if none_cases > 0:\n            set_info.remove(None)\n\n        if array == True:\n            return set_info, raw_info_in_rank\n\n        else: return set_info\n    \n    else: return raw_info_in_rank\n\ndef rank_info(df, rank, column_info, info_name='Albums'):\n    set_info, raw_info_in_rank = rank_set_list(df, rank, column_info)\n    info_count = array_count(elements_to_count=set_info, original_array=raw_info_in_rank)\n    info = {info_name: set_info,\n            'Counts' : info_count}\n    df_info = pd.DataFrame(info)\n    df_info = df_info.sort_values(by=['Counts'])\n\n    return df_info","4d54f117":"file_dir = '..\/input\/amazon-mexico-top-50-best-sellers\/mexico\/parquet\/mx-music.parquet'","3e29f69a":"# Personal Build\n# from graph.data_filters import *\n\n# Kernel Graphics\nimport matplotlib.pyplot as plt\nfrom matplotlib import dates as mdates\nimport matplotlib.patches as mpatches\n\n# Data Management\nimport pandas as pd\n\ndef plot_rank_barh(x, y, rank):\n    plt.figure(figsize=(8,8))\n    plt.barh(y=y, width=x)\n\n    for i, v in enumerate(x):\n        plt.text(v+1, i, str(v), fontweight='bold')\n\n    xlabel = f'Times shown at #{rank} position' \n    plt.xlabel(xlabel)\n\n    header = f'Times an album hit the #{rank} position' \n    plt.title(label=header)\n\n    plt.show()\n\ndf = pd.read_parquet(file_dir)\n\ndef barh_and_scatters(pivot_column, df_info=df, top_rank=5, extracted_info_name='Albums', n_plots=1):\n\n    top = top_rank + 1 \n    info = pivot_column\n    df = df_info\n\n    for rank in range(1, top):\n        \n        #Extract Info\n        \n        extracted_df = rank_info(df, rank, info, extracted_info_name)\n        albums = extracted_df[extracted_info_name].to_list()\n        info_count = extracted_df['Counts'].to_list()\n\n        #Plot\n        plot_rank_barh(info_count, albums, rank)\n\n        # scatter\n        rank_df = df[df['Rank'] == rank]\n        x = rank_df['Stars']\n        y = rank_df['Reviews']\n        \n        groups = rank_df.groupby(info)        \n        markers = ['o', 'x', 'v', 'p']\n        fig, ax = plt.subplots()\n        m = 0\n        p = 0\n        \n\n        for name, group in groups:\n            if (m % 10 == 0) and (m > 0):\n                p += 1\n            if p == 4: p = 0\n\n            ax.plot(group.Stars , group.Reviews, marker=markers[p], linestyle='', label=name)\n            m += 1\n\n        plt.legend(loc='best', bbox_to_anchor=(1,1), ncol=2)\n        plt.xlabel(\"Stars\")\n        plt.ylabel(\"Count of Reviews\")\n\ndef barh_plus_scatter(pivot_column, df_info=df, top_rank=5, extracted_info_name='Albums', n_plots=1, w_fig=8, h_fig=8):\n    top = top_rank + 1 \n    info = pivot_column\n    df = df_info\n\n    for rank in range(1, top):\n        \n        #Extract Info\n        \n        extracted_df = rank_info(df, rank, info, extracted_info_name)\n        albums = extracted_df[extracted_info_name].to_list()\n        info_count = extracted_df['Counts'].to_list()\n\n        #Plot\n        fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2,figsize=(w_fig, h_fig))\n        title = f' Top #{rank} Info' \n        fig.suptitle(title)\n        \n        # plt.figure(figsize=(w_fig,h_fig))\n\n        ax1.barh(y=albums, width=info_count)\n\n        for i, v in enumerate(info_count):\n            ax1.text(v+1, i, str(v))\n\n        xlabel = f'Times shown at #{rank} position' \n        ax1.set_xlabel(xlabel)\n\n        bar_header = f'Times an {extracted_info_name} hit the #{rank} position' \n        ax1.set_title(label=bar_header)\n\n        # scatter\n        rank_df = df[df['Rank'] == rank]\n        x = rank_df['Stars']\n        y = rank_df['Reviews']\n        \n        ax2.set_xlabel('Stars')\n        ax2.set_title(f'Reviews vs Stars per {extracted_info_name} at the #{rank} position')\n        ax2.set_ylabel('Reviews')\n        groups = rank_df.groupby(info)        \n        markers = ['o', 'x', 'v', 'p']\n        \n        m = 0\n        p = 0\n        for name, group in groups:\n            if (m % 10 == 0) and (m > 0):\n                p += 1\n            if p == 4: p = 0\n            ax2.plot(group.Stars , group.Reviews, marker=markers[p], linestyle='', label=name)\n            \n            m += 1\n\n        ax2.legend(loc='best', bbox_to_anchor=(1,1), ncol=2)\n        ax2.set_xlim([0, 5])\n        plt.show()\n        ","290d020e":"# Personal Build\n# from graph.data_filters import *\n\n# Kernel Graphics\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\n\n# Data Management\nimport pandas as pd\n\nmain_colors = px.colors.qualitative.Bold\ndf = pd.read_parquet(file_dir)\n# extracted_df = rank_info(df, 1, artist, 'Artist\/Band')\n# labels = extracted_df['Artist\/Band'].to_list()\n# labels_count = extracted_df['Counts'].to_list()\n# labels = reverse(labels)\nalbum = 'Product Names'\nartist = 'Authors\/Company'\n\ndef plotly_dashboard(pivot_column, rank=1, df_info=df, top_rank=None, extracted_info_name='Albums'):    \n    info = pivot_column\n    df = df_info\n    main_colors = px.colors.qualitative.Bold\n    \n    if top_rank:\n        top = top_rank + 1 \n        for rank in range(rank, top):\n            plotly_figures(info, df, main_colors, rank, extracted_info_name)\n    \n    else:\n        plotly_figures(info, df, main_colors, rank, extracted_info_name)\n\ndef plotly_figures(info, df, main_colors, rank, extracted_info_name):\n    extracted_df = rank_info(df, rank, info, extracted_info_name)\n    labels = extracted_df[extracted_info_name].to_list()\n    labels_count = extracted_df['Counts'].to_list()\n    row_1_barh_and_lines(rank, extracted_df, info, extracted_info_name, labels, labels_count, original_df=df, line_colors=main_colors)\n\n    #FIGURE 2\n    labels = reverse(labels)\n    row_2_rank_boxes(rank, info, extracted_info_name, labels, original_df=df, box_colors=main_colors)\n\n    #FIGURE 3\n    #Labels are reversed in order to match with the other graphs\n    row_3_boxes_and_scatter(rank, info, labels, original_df=df, scatter_colors=main_colors)\n\ndef row_1_barh_and_lines(rank, extracted_df, info, extracted_info_name, labels, labels_count, line_colors, original_df=df):\n    df = original_df\n    bar_header = f'Times an album hit the top #{rank}'\n    line_header = f'{extracted_info_name} Rank History'\n    \n    \n    fig = make_subplots(\n        rows=1, cols=2,\n        specs=[[{'type': 'bar'}, {'type': 'scatter'}]],\n        subplot_titles=(bar_header, line_header)\n        )\n\n    #Horizontal Bars\n    fig.add_trace(\n        go.Bar(\n            x = labels_count, y = labels, orientation = 'h',\n            showlegend = False,\n            text = labels,\n                hovertemplate=\n                \"<b>%{text}<\/b><br><br>\" +\n                \"Times: %{x}<br>\" \n            ), row = 1, col = 1)\n    fig.update_traces(marker_color='#F58518')\n    fig.update_yaxes(title_text=extracted_info_name, row=1, col=1)\n    # fig.update_xaxes(title_text=f'Times hited the top#{rank}', row=1, col=1)\n    \n\n    #lines\n    labels = reverse(labels)\n    color = 0\n    for label in labels:\n        best_seller = df[df[info] == label]\n        fig.add_trace(\n            go.Scatter(\n                x = best_seller.time, y = best_seller.Rank, mode = 'lines', name = label, line=dict(color = line_colors[color]),\n                text = best_seller[info],\n                hovertemplate=\n                \"<b>%{text}<\/b><br><br>\" +\n                \"Time: %{x}<br>\" +\n                \"Rank Position: #%{y:,0f}<br>\"\n                ), row=1, col=2)\n        if color < (len(line_colors)-1):\n            color += 1\n        else:\n            color = 0\n    # fig.update_layout(yaxis=dict(autorange = \"reversed\"), row=1, col=2)\n    fig.update_yaxes(title_text='Rank Position', range=[1,50], row=1, col=2, autorange=\"reversed\")\n    fig.update_xaxes(title_text='Date' , row=1, col=2)\n\n\n    fig.update_layout(\n        title = {\n            'text' : f\"Amazon Music's sells at web page. Top #{rank} Info\",\n            'x' : 0.5,\n            'xanchor' : 'center',\n            'yanchor' : 'top',\n            'y' : 0.9\n        },\n        title_font_size = 30,\n        margin = dict(r=30, t=100, b=0, l=10),\n        height = 400,\n    )\n    \n    fig.show()\n\ndef row_2_rank_boxes(rank, info,  extracted_info_name, labels, box_colors, original_df=df):\n    df = original_df\n    ranking_box_header = f'Ranking distribution of the {extracted_info_name} at Top #{rank}:'  \n\n    fig2 = make_subplots(\n        rows=1, cols=1,\n        specs=[[{'type': 'Box'}]]\n        )\n    color = 0\n    for label in labels:\n        info_df = df[df[info] == label]\n        fig2.add_trace(\n                go.Box(\n                    y = info_df.Rank, showlegend = False,\n                    name = label,\n                    marker_color = box_colors[color]\n                ))\n        if color < (len(box_colors)-1):\n            color += 1\n        else:\n            color = 0\n\n    fig2.update_layout(\n        margin=dict(r=10, t=40, b=50, l=10),\n        height=300,\n        title_text = ranking_box_header\n    )\n    fig2.update_yaxes(title_text='Rank Position', range=[1,50], autorange=\"reversed\", row=1, col=1)\n    fig2.show()\n\ndef row_3_boxes_and_scatter(rank, info, labels, scatter_colors, original_df=df):\n    df = original_df\n    box_header = f'Stats of of the #{rank} position'\n    scatter_header = f'Reviews vs Stars of the #{rank} position'\n\n    fig3 = make_subplots(\n        rows=1, cols=5,\n        column_widths=[0.19, 0.19, 0.19, 0.005, 0.425],\n        specs=[[{'type': 'box'}, {'type': 'box'}, {'type': 'box'}, None, {'type': 'scatter'}]],\n        subplot_titles=(None, box_header, None, scatter_header, None)\n    )\n    \n    #BOXES INFO\n    top_5 = df[(df['Rank'] >= 1) & (df['Rank']<=5)]\n    rank_df = df[df['Rank'] == rank]\n    box_info = ['Stars', 'Reviews', 'Price_std_or_min']\n    colors = ['#FECB52', 'gold', 'crimson', 'red','green','lightseagreen']\n\n    #Box\n    b = 1\n    c = 0\n    for i in box_info:\n        fig3.add_trace(\n            go.Box(\n                y = top_5[i], showlegend = False,\n                name = f'Tops 1-5',\n                marker_color = colors[c],\n            ), row = 1, col = b)\n        \n        c += 1\n\n        fig3.add_trace(\n            go.Box(\n                y = rank_df[i], showlegend = False,\n                name = f'Top {rank}',\n                marker_color = colors[c],\n            ),\n            row = 1, col = b)\n        if i == 'Price_std_or_min':\n            i = 'Price'\n        fig3.update_xaxes(title_text=i, row=1, col=b)\n        b += 1\n        c += 1 \n\n    #Scatter\n    groups = rank_df.groupby(info)\n    color = 0 \n    for label in labels:\n        best_seller = df[df[info] == label]\n        fig3.add_trace(\n            go.Scatter(\n                x = best_seller.Stars, y = best_seller.Reviews, mode = 'markers', name = label, marker=dict(color = scatter_colors[color]),\n                text = best_seller[artist],\n                hovertemplate=\n                \"<b>%{text}<\/b><br><br>\" +\n                \"Stars: %{x}<br>\" +\n                \"Reviews: %{y:,0f}<br>\"\n                ), row = 1, col = 5)\n        if color < (len(scatter_colors)-1):\n            color += 1\n        else:\n            color = 0\n\n    fig3.update_yaxes(title_text=\"Reviews\", row=1, col=5)\n    fig3.update_xaxes(title_text=\"Stars\",range=[0,5], row=1, col=5)\n    fig3.update_layout(\n        margin=dict(r=10, t=40, b=50, l=10),\n        height=300,\n    )\n\n    fig3.show()\n","4a7c19ec":"artist = 'Authors\/Company'\nbarh_and_scatters(artist, top_rank=1)","f4635ce4":"barh_plus_scatter(artist, extracted_info_name='Artist' , top_rank=2, w_fig=20, h_fig=8)","b50aac70":"barh_plus_scatter(album, top_rank=3, w_fig=20, h_fig=8)","673de058":"artist = 'Authors\/Company'\nplotly_dashboard(artist, rank=1, extracted_info_name=\"Artist\/Band\")","2e872224":"What?! Does Gloria Trevi beat Katy Perry, Lady Gaga, and Britney Spears?! I don\u2019t know you, but for me is funny to watch the loyalty of \u201cLa Oreja de Van Gogh\u201d fans until nowadays. But I have some kind of trouble reading the scatter plot. Well, I can see the main objective, there is a wall of stars\/reviews: after 500 reviews it seems impossible to keep the 5 stars.\n\nThis could be used on a web page or blog. I can take any of these pictures, save them as .jpg or .png and pass them to the Front-End. But how it would look If I need them on paper? Let\u2019s see.","8d344904":"# Building graphs\n\nMatplotlib and Seaborn are two of the most popular graph libraries that every Data Analyst learns. \n\nLet us start with two of the most used plots in this area: count bars (aka histograms) and scatters. The bars will show how many times, an artist or group hits the first place of the board; the scatter will light us if there is any relationship between the stars rate (x-axis) and the number of reviews (y-axis).","23ca96bc":"## Simple data filters function","3888bfb8":"Thanks for reach here! The best comes here. You can imagine the hours that took me to learn how to code these graphs just by checking my old code on the _music graphs notebook.ipynb_. But what would you think that you can take minutes building them? And even better! Without a notebook! Just on a web page! Like a blog! Well, not quite that.\n\nTableau is a powerful software developed to build this great interactive dashboard for big amounts of data. You can share your dashboards with others and make them public [here.](https:\/\/public.tableau.com\/profile\/edward5144#!\/vizhome\/AmazonBestSellers_16116180017330\/AmazonMexicoTop50BestSellersMusic) Keep in mind that Tableau is build for Business Intelligence and not quite fits whit analysis like the made here. The main reason of saying this, is that in the data filters I made a special buildin function that filters the artists that reach a rank between 1 and the selected one. This implays to make a query for every request, that means duplicating the data. So in the Tableau page that you will see, you will watch all the 50 rank positions at once.\n\n# Conclusion\n\nData Visualization is an interesting way of doing Exploratory Data Analysis. Yes, you have just read an EDA of Amazon Mexico Music board. The first aspects that we have to consider are the media where we are going to communicate, define our visual space and make readable our dashboards for the audience.\n\nHope this works as a beginning to your journey in the Data Analysis world!","dd9704ba":"# About this notebook\n\nHere I just want to show the no-tech people that making dashboards is not like any slide or spreadsheet program. Here, in the \u201cwild world of python\u201d~(the most friendly of all languages)~, you have to consider three questions:\n\n  1. Where is going to be shown my work: App, blog, paper, or website?\n  2. How much \u201cvisual space\u201d will I have?\n  3. Do I need\/can make the plots interactable?\n\nThese questions can be tricky if you only consider one of them. Why? Well, above I will show you the results that you can have with three ways to make a dashboard; two of them need a programming language (python), and a friendly environment or IDE (jupyter notebook). The last one, Tableau, is a powerful tool for Exploratory Data Analysis and Business Intelligence but has a little negative aspect (as far as I know now).\n\nBut first, let's import all the code from the scripts. In the midtime that I get how to load my scripts, the code cells will be hidden in here. It's planned to be on scripts just to separate the main ideas and how you can use each library.\n","736b0117":"As you can see, is not the best choice. Do not worry, there are ways to move the legend over the plots, but the problem will remains. Considering the objective of this notebook is not for formatting plots, we are here to show a solution for a web page or blog.\n\n# Plotly and its interactive plots.\n\n\n[Plotly](https:\/\/plotly.com\/python) is a graphing library, also available on R and Javascript. From plotly page:\n>[\u2026]makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts.\nPlotly.py is free and open source and you can view the source, report issues, or contribute on GitHub.\n\nTaking advantage of the interactive graphs, you can take a bunch of them, put them together on a dashboard and look at the data they have. If you haven\u2019t tried one, try these bullets:>\n - Point the bar of an artist and look at the times he\/she\/they hit the first position.\n - Double click on that artist\/band's name on a line plot, look at its history.\n - Look upon the box plot (second row) and look at their average position. Yes, this can be interpreted as \"La Oreja de Van Gogh\"  has the best median (half of its data) ranking of all, the second place. Can you tell the artists that have a median of 4th position?\n - What is the difference between the median price of the top 1 versus the top 5?","61868c47":"At first sight, on a 24\u201d screen seems quite right, because we don\u2019t have a big number of labels. But what happens when you have a lot of them? For that, we are going to request the first three positions, so this could be something \u201cmore real\u201d.","5c29c70b":"## Matplotlib code","5601f893":"## Plotly"}}