{"cell_type":{"66afec0d":"code","e9dfd5fc":"code","21d99c21":"code","f83c5ed0":"code","a07e8c6c":"code","c19750d7":"code","88953859":"code","44ada1c9":"code","438dfc56":"code","363a1e56":"code","cc7ce243":"code","b46a6594":"code","c54878ff":"code","34cad624":"code","d008e1b1":"code","4fb0c1a5":"code","d9e000b5":"code","29eec564":"code","5154143f":"code","bc85956a":"code","d18fc3c9":"code","a008c5a7":"code","b53fb398":"code","516131b1":"code","ed662471":"code","ba818487":"code","7684e32e":"code","f057ee53":"code","b1069139":"code","c158f607":"code","ce483878":"code","e52205f7":"code","ea67f514":"code","cc6d5abb":"code","c931728b":"code","965237fd":"code","753a5a26":"code","b1e8d7da":"code","42e0ae74":"code","ebace96b":"code","beac3622":"code","34fb328c":"code","ba189cf0":"code","f8edd86a":"code","a148642b":"code","51aafb12":"code","515fc180":"code","d48e1ec4":"code","fa62710c":"code","37add1b2":"code","6ad2ee44":"code","5ec3f1f1":"code","d5805492":"code","9caed10e":"markdown","bd65ff1e":"markdown","3f692210":"markdown","d4989fa5":"markdown","27e7cb57":"markdown","bedf8d28":"markdown","62cb0104":"markdown","9b1eba0c":"markdown","85da27e4":"markdown","af2c1416":"markdown","0bf3bd31":"markdown"},"source":{"66afec0d":"print('Hello world!')","e9dfd5fc":"# \u0422\u0438\u043f\u044b \u0434\u0430\u043d\u044b\u0445\n\nprint(type('Hello world!'))\nprint(type(4))\nprint(type(4.))\nprint(type(True))\nprint(type(None))","21d99c21":"# \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b\n\nprint(2 + 3)\nprint(5.5 - 2)\nprint(20 \/ 3)\nprint(12 \/\/ 5)\nprint(12 % 5)\nprint(2 ** 2)\nprint(4 ** 0.5)","f83c5ed0":"# \u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\n\nprint(5 > 2)\nprint(5 <= 2)\nprint(5 == 5)","a07e8c6c":"# \u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b\n\nprint(5 == 5 and 5 <= 2)\nprint(5 == 5 or 5 <= 2)\nprint(not 5 == 5)","c19750d7":"# \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432\n\nprint(int(5.6))\nprint(float('6.5'))\nprint(bool(10))","88953859":"def summ(a, b):\n    return a + b\n\nprint(summ(1,5.5))","44ada1c9":"def maximum(a, b):\n    if a > b:\n        return a\n    return b\n\nprint(maximum(5, 7))","438dfc56":"def how_old(age):\n    if age < 18:\n        print('young')\n    elif age < 70:\n        print('adult')\n    else:\n        print('old')\n\nhow_old(45)","363a1e56":"a = 5\nb = a if a < 10 else 10\n\nprint(b)","cc7ce243":"# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\n\na = []\na = list()\na = [5, 2.1, 0, False, [1, 2, 3]]\n\nprint('{}, len: {}'.format(a, len(a)))","b46a6594":"# \u0421\u0440\u0435\u0437\u044b\n\na = [0, 1, 2, 3, 4, 5]\n\nprint('a: {}\\n'.format(a))\nprint('a[0]: {}\\n'.format(a[0]))\nprint('a[3]: {}\\n'.format(a[3]))\nprint('a[2:5]: {}\\n'.format(a[2:5]))\nprint('a[5:2]: {}\\n'.format(a[5:2]))\nprint('a[5:2:-1]: {}\\n'.format(a[5:2:-1]))\nprint('a[:3]: {}\\n'.format(a[:3]))\nprint('a[2:]: {}\\n'.format(a[2:]))","c54878ff":"print('a: {}\\n'.format(a))\nprint('a[-1]: {}\\n'.format(a[-1]))\nprint('a[-2]: {}\\n'.format(a[-2]))\nprint('a[-5:-2]: {}\\n'.format(a[-5:-2]))\nprint('a[-5:-2:-1]: {}\\n'.format(a[-5:-2:-1]))\nprint('a[::-1]: {}\\n'.format(a[::-1]))","34cad624":"# \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430\n\na = [1,2,3]\nb = a\nb[1] = 4\n\nprint(a)\nprint(b)","d008e1b1":"# \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430\n\na = [1,2,3]\nb = a[:]\nb[1] = 4\n\nprint(a)\nprint(b)","4fb0c1a5":"# \u041c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438\n\na = [1,2,3]\na.append(4)\n\nprint(a)","d9e000b5":"for i in [1,2,3]:\n    print(i)","29eec564":"# \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n\nfor i in range(2, 6):\n    print(i)","5154143f":"# \u0426\u0438\u043a\u043b \u0441 \u0438\u043d\u0434\u0435\u043a\u043e\u0441\u043c\n\na = [5, 1, 2, 5, 23, 3]\nb = [2, 4, 1, 7, 6, 8]\n\nfor i in range(len(a)):\n    print(a[i], b[i])","bc85956a":"# \u0426\u0438\u043a\u043b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430\n\na = [i for i in range(5)]\nprint(a)","d18fc3c9":"# \u0420\u0430\u0437\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u043e\u0432\n\na = [0] * 8\n\nprint(a)","a008c5a7":"# \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0443\u043b\u044f\u043c\u0438\n\na = [[0] * 8] * 8\na[0][2] = 2\n\nfor i in a:\n    print(i)","b53fb398":"# \u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0443\u043b\u044f\u043c\u0438\n\na = [[0] * 8 for i in range(8)]\na[5][2] = 2\n\nfor i in a:\n    print(i)","516131b1":"# \u041a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u0432\n\na = [1,2,3] + [1,2,3]\n\nprint(a)","ed662471":"# \u0420\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0446\u0438\u043a\u043b\u0430\n\na = [[j, j ** 2] for j in range(8)]\n\nfor num, sq in a:\n    print('Num: {}, Square {}'.format(num, sq))","ba818487":"# \u041a\u043e\u0440\u0442\u0435\u0436\u0438 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445\n\ndef find_max(x):\n    ind = 0\n    maximum = x[0]\n    for i in range(1,len(x)):\n        if x[i] > maximum:\n            maximum = x[i]\n            ind = i\n    return maximum, ind\n\nout = find_max([4,3,5])\n\nprint(out)\nprint(type(out))\nprint(out[1])","7684e32e":"# \u0420\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u043a\u0430 \u043a\u043e\u0440\u0442\u0435\u0436\u0430\n\nmaximum, index = find_max([4,3,5])\n\nprint(maximum, index)","f057ee53":"# \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e\n\na = set([2,3,2,4,2,3,1,5])\na = {2,3,2,4,2,3,1,5}\nfor i in a:\n    print(i)","b1069139":"# \u0421\u043b\u043e\u0432\u0430\u0440\u044c\n\na = {'one': 1, 'two': 2}\nfor i in a:\n    print(i)\nfor i in a:\n    print(a[i])\nfor i, j in a.items():\n    print(i, j)","c158f607":"# \u0413\u0440\u0443\u043f\u043f\u043e\u0432\u043e\u0435 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u0435\n\na = 2\nb = 5\na, b = b, a\n\nprint(a, b)","ce483878":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"map\"\n\na = ['1', '2', '3', '4', '5', '6', '7']\nb = list(map(int, a))\n\nprint(b)","e52205f7":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"lambda\"\n\na = [1, 2, 3, 4, 5, 6, 7]\nb = list(map(lambda x: x ** 2 + 2, a))\n\n\nprint(b)","ea67f514":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"filter\"\n\na = [1, 2, 3, 4, 5, 6, 7]\nb = list(filter(lambda x: x % 2, a)) \n\nprint (b)","cc6d5abb":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"reduce\"\n\nfrom functools import reduce\n\na = [1, 2, 3]\nb = reduce(lambda x,y: x + y ** 2, a)\n\nprint (b)","c931728b":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"zip\"\n\na = [1,2,3]\nb = [4,5,6]\nc = [7,8]\nres = list(zip(a, b, c))\n\nprint (res)","965237fd":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n\nimport torch","753a5a26":"# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u043d\u0437\u043e\u0440\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n\na = torch.tensor([1,2,3,4], dtype = torch.float64)\n\nprint(a)","b1e8d7da":"# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0442\u0435\u043d\u0437\u043e\u0440\u0430\n\na = torch.randn((10,10,10))\n\nprint(a)","42e0ae74":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\n\nprint(a.shape)","ebace96b":"# \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u0442\u0435\u043d\u0437\u043e\u0440\u043e\u043c\n\nprint(a.mean())","beac3622":"# \u0421\u0440\u0435\u0437\u044b \u0442\u0435\u043d\u0437\u043e\u0440\u043e\u0432\n\nprint(a[:-2].size())","34fb328c":"# \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0442\u0435\u043d\u0437\u043e\u0440\u0430\u043c\u0438 \u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\n\na = torch.randn((2,2))\nb = torch.randn((2,2))\nc = torch.add(a, b)\n\nprint(c)","ba189cf0":"# \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0442\u0435\u043d\u0437\u043e\u0440\u0430\u043c\u0438 \u0441 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0435\u043d\u0437\u043e\u0440\u0430\n\na = torch.randn((2,2))\nb = torch.randn((2,2))\n\nprint(a)\n\na.add_(b)\n\nprint(a)","f8edd86a":"# \u041c\u0430\u0442\u0440\u0438\u0447\u043d\u043e\u0435 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435\n\na = torch.randn((20,10))\nb = torch.randn((10,12))\n\nc = torch.mm(a, b)\n\nprint(c.size())","a148642b":"# \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n\na = torch.tensor([2], dtype=torch.float32, requires_grad=True)\nb = torch.tensor([3], dtype=torch.float32, requires_grad=True)\nc = a * b\nc.backward()\n\nprint(c)\nprint(a.grad)\nprint(b.grad)","51aafb12":"a = torch.randn((2,4), dtype=torch.float32, requires_grad=True)\nb = torch.randn((4,1), dtype=torch.float32, requires_grad=True)\nc = a.mm(b)\nd = c.sum()\n\nprint(a)\nprint(b)\nprint(c)\nprint(d)","515fc180":"d.backward()\n\nprint(a.grad)\nprint(b.grad)","d48e1ec4":"from matplotlib import pyplot as plt\n\nx = torch.tensor([24, 27, 32, 37, 41, 43, 50, 52], dtype=torch.float32)\ny = torch.tensor([17, 18.8, 18, 19.5, 21, 20, 27, 29], dtype=torch.float32)\na = torch.randn((1), dtype = torch.float32, requires_grad=True)\nb = torch.randn((1), dtype = torch.float32, requires_grad=True)\nlr = 0.00005\n\ny_plot = a * x + b\n\nfig, ax = plt.subplots(figsize=(8, 5), ncols=1)\nax.scatter(x, y)\nax.plot(x.detach(), y_plot.detach(), c='r')\n\nplt.show()","fa62710c":"history = []\n\nfor i in range(30):\n    if a.grad:\n        a.grad.data.zero_()\n        b.grad.data.zero_()\n    \n    out = a * x + b\n    \n    loss = (y - out).square().mean()\n    loss.backward()\n    \n    history.append(loss.item())\n    \n    print('Loss:', loss)\n    \n    with torch.no_grad():\n        a.sub_(a.grad.data * lr)\n        b.sub_(b.grad.data * lr)","37add1b2":"y_plot = a * x + b\n\nfig, ax = plt.subplots(figsize = (16, 5), ncols=2)\nax[0].scatter(x, y)\nax[0].plot(x.detach(), y_plot.detach(), c='r')\nax[1].plot(history, c='g')\n\nplt.show()","6ad2ee44":"class LinRegDataset(torch.utils.data.Dataset):\n    \n    def __init__(self, x, y):\n        self.x = x.unsqueeze(1)\n        self.y = y.unsqueeze(1)\n\n    def __len__(self):\n        return len(self.x)\n\n    def __getitem__(self, idx):\n        return (self.x[idx], self.y[idx])\n\nclass LenearRegression(torch.nn.Module):\n\n    def __init__(self, number_of_features, number_of_outputs, dropout_rate=0):\n        super(LenearRegression, self).__init__()\n        self.layers = torch.nn.Sequential(torch.nn.Dropout(dropout_rate),\n                                          torch.nn.Linear(number_of_features, number_of_outputs, bias=True))\n\n    def forward(self, x):\n        return self.layers(x)\n\nx = torch.tensor([24, 27, 32, 37, 41, 43, 50, 52], dtype=torch.float32)\ny = torch.tensor([17, 18.8, 18, 19.5, 21, 20, 27, 29], dtype=torch.float32)\n\ndataset = LinRegDataset(x, y)\n\nloader = torch.utils.data.DataLoader(dataset, batch_size=2)\n\ncriterion = torch.nn.MSELoss()\n\nmodel = LenearRegression(1, 1)\n\noptimizer = torch.optim.SGD(model.parameters(), lr=0.00005)\n\ny_plot = model.forward(dataset.x)\n\nfig, ax = plt.subplots(figsize=(8, 5), ncols=1)\nax.scatter(x, y)\nax.plot(x.detach(), y_plot.detach(), c='r')\n\nplt.show()","5ec3f1f1":"history = []\n\nif torch.cuda.is_available():\n    model = model.to('cuda')\n\nfor i in range(30):\n    run_loss = 0\n    iters = 0\n    \n    for x_batch, y_batch in loader:\n        if torch.cuda.is_available():\n            x_batch = x_batch.to('cuda')\n            y_batch = y_batch.to('cuda')\n        \n        optimizer.zero_grad()\n        \n        out = model.forward(x_batch)\n        \n        loss = criterion(out, y_batch)\n        loss.backward()\n        \n        optimizer.step()\n        \n        iters += 1\n        \n        run_loss += loss.item()\n    \n    history.append(run_loss \/ iters)\n    \n    print('Loss:', run_loss \/ iters)","d5805492":"y_plot = model.forward(dataset.x)\n\nfig, ax = plt.subplots(figsize=(16, 5), ncols=2)\nax[0].scatter(x, y)\nax[0].plot(x.detach(), y_plot.detach(), c='r')\nax[1].plot(history, c='g')\n\nplt.show()","9caed10e":"# \u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b","bd65ff1e":"# \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f","3f692210":"# \u0412\u044b\u0432\u043e\u0434","d4989fa5":"# Lists","27e7cb57":"# \u0426\u0438\u043a\u043b\u044b","bedf8d28":"# \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0434\u0438\u0444\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","62cb0104":"# \u041a\u043e\u0440\u0442\u0435\u0436\u0438","9b1eba0c":"# \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u0438","85da27e4":"# Pytorch","af2c1416":"# \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","0bf3bd31":"# \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 Pytorch"}}