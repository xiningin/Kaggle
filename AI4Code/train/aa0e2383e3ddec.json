{"cell_type":{"9165e8c4":"code","a2aae8a3":"code","d4b3aa77":"code","61e696a6":"code","32dfbb30":"code","d3338543":"code","a6455b56":"code","56dfb767":"code","2cda1c82":"code","fba6bb50":"code","7f308295":"code","7ae77de5":"code","2af321e8":"code","754d73c6":"code","be24d544":"code","61709599":"code","754e6896":"code","464e1dcf":"code","d0f7e608":"code","31fc6e11":"code","78d800f7":"code","85b8f356":"code","e5161215":"code","309f67e0":"code","960f7c8b":"code","3e84fcaf":"code","dfa914ba":"markdown","5fb1d7c1":"markdown","bf902800":"markdown","fbdc70f3":"markdown","3113afa6":"markdown","21a2cd21":"markdown","74327a8c":"markdown","bb23d257":"markdown","99f9deb6":"markdown","0b7774c2":"markdown","a7663eb3":"markdown"},"source":{"9165e8c4":"import os\nimport gc\nimport datetime\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\n\nimport catboost as cb\n\nimport warnings\nwarnings.simplefilter('ignore', FutureWarning)\n\nprint(os.listdir(\"..\/input\"))","a2aae8a3":"train = pd.read_csv('..\/input\/train.csv', parse_dates=[\"first_active_month\"])\ntest = pd.read_csv('..\/input\/test.csv', parse_dates=[\"first_active_month\"])\n\nmerchants = pd.read_csv('..\/input\/merchants.csv')\nhistorical_transactions = pd.read_csv('..\/input\/historical_transactions.csv')\nnew_merchant_transactions = pd.read_csv('..\/input\/new_merchant_transactions.csv')\n\nsample_submission = pd.read_csv('..\/input\/sample_submission.csv')","d4b3aa77":"train.shape, test.shape, sample_submission.shape","61e696a6":"merchants.shape, historical_transactions.shape, new_merchant_transactions.shape","32dfbb30":"train.head(10)","d3338543":"merchants.head()","a6455b56":"historical_transactions.head()","56dfb767":"new_merchant_transactions.head()","2cda1c82":"def missing_impute(df):\n    for i in df.columns:\n        if df[i].dtype == \"object\":\n            df[i] = df[i].fillna(\"other\")\n        elif (df[i].dtype == \"int64\" or df[i].dtype == \"float64\"):\n            df[i] = df[i].fillna(df[i].mean())\n        else:\n            pass\n    return df\n\ndef datetime_extract(df, dt_col='first_active_month'):\n    df['date'] = df[dt_col].dt.date \n    df['day'] = df[dt_col].dt.day \n    df['dayofweek'] = df[dt_col].dt.dayofweek\n    df['dayofyear'] = df[dt_col].dt.dayofyear\n    df['days_in_month'] = df[dt_col].dt.days_in_month\n    df['daysinmonth'] = df[dt_col].dt.daysinmonth \n    df['month'] = df[dt_col].dt.month\n    df['week'] = df[dt_col].dt.week \n    df['weekday'] = df[dt_col].dt.weekday\n    df['weekofyear'] = df[dt_col].dt.weekofyear\n    df['year'] = train[dt_col].dt.year\n    \n    df['elapsed_time'] = (datetime.date(2018, 2, 1) - df['date']).dt.days\n\n    return df","fba6bb50":"# Do impute missing values for all datasets\nfor df in [train, test, merchants, historical_transactions, new_merchant_transactions]:\n    missing_impute(df)","7f308295":"# Do extract datetime values for train and test\ntrain = datetime_extract(train, dt_col='first_active_month')\ntest = datetime_extract(test, dt_col='first_active_month')","7ae77de5":"# Define the aggregation procedure outside of the groupby operation\naggregations = {\n    'purchase_amount': ['sum', 'mean', 'std', 'min', 'max', 'size', 'median']\n}\n\ngrouped = historical_transactions.groupby('card_id').agg(aggregations)\ngrouped.columns = grouped.columns.droplevel(level=0)\ngrouped.rename(columns={\n    \"sum\": \"sum_purchase_amount\", \n    \"mean\": \"mean_purchase_amount\",\n    \"std\": \"std_purchase_amount\", \n    \"min\": \"min_purchase_amount\",\n    \"max\": \"max_purchase_amount\", \n    \"size\": \"num_purchase_amount\",\n    \"median\": \"median_purchase_amount\"\n}, inplace=True)\ngrouped.reset_index(inplace=True)\n\ntrain = pd.merge(train, grouped, on=\"card_id\", how=\"left\")\ntest = pd.merge(test, grouped, on=\"card_id\", how=\"left\")\n\ndel grouped\ngc.collect()","2af321e8":"train.head()","754d73c6":"train.shape, test.shape","be24d544":"# Define the aggregation procedure outside of the groupby operation\naggregations = {\n    'purchase_amount': ['sum', 'mean', 'std', 'min', 'max', 'size', 'median']\n}\n\ngrouped = new_merchant_transactions.groupby('card_id').agg(aggregations)\ngrouped.columns = grouped.columns.droplevel(level=0)\ngrouped.rename(columns={\n    \"sum\": \"sum_purchase_amount\", \n    \"mean\": \"mean_purchase_amount\",\n    \"std\": \"std_purchase_amount\", \n    \"min\": \"min_purchase_amount\",\n    \"max\": \"max_purchase_amount\", \n    \"size\": \"num_purchase_amount\",\n    \"median\": \"median_purchase_amount\"\n}, inplace=True)\ngrouped.reset_index(inplace=True)\n\ntrain = pd.merge(train, grouped, on=\"card_id\", how=\"left\")\ntest = pd.merge(test, grouped, on=\"card_id\", how=\"left\")\n\ndel grouped\ngc.collect()","61709599":"train.head()","754e6896":"train.shape, test.shape","464e1dcf":"# One-hot encode features\nohe_df_1 = pd.get_dummies(train['feature_1'], prefix='f1_')\nohe_df_2 = pd.get_dummies(train['feature_2'], prefix='f2_')\nohe_df_3 = pd.get_dummies(train['feature_3'], prefix='f3_')\n\nohe_df_4 = pd.get_dummies(test['feature_1'], prefix='f1_')\nohe_df_5 = pd.get_dummies(test['feature_2'], prefix='f2_')\nohe_df_6 = pd.get_dummies(test['feature_3'], prefix='f3_')\n\n# Numerical representation of the first active month\ntrain = pd.concat([train, ohe_df_1, ohe_df_2, ohe_df_3], axis=1, sort=False)\ntest = pd.concat([test, ohe_df_4, ohe_df_5, ohe_df_6], axis=1, sort=False)\n\ndel ohe_df_1, ohe_df_2, ohe_df_3\ndel ohe_df_4, ohe_df_5, ohe_df_6\ngc.collect()","d0f7e608":"train.shape, test.shape","31fc6e11":"excluded_features = ['first_active_month', 'card_id', 'target', 'date', 'year']\ntrain_features = [c for c in train.columns if c not in excluded_features]","78d800f7":"train.isnull().sum()","85b8f356":"for col in train_features:\n    for df in [train, test]:\n        if df[col].dtype == \"float64\":\n            df[col] = df[col].fillna(df[col].mean())","e5161215":"# Prepare data for training\nX = train.copy()\ny = X['target']\n\n# Split data with kfold\nkfolds = KFold(n_splits=5, shuffle=True, random_state=2018)\n\n# Make importance dataframe\nimportances = pd.DataFrame()\n\noof_preds = np.zeros(X.shape[0])\nsub_preds = np.zeros(test.shape[0])\n\nfor n_fold, (trn_idx, val_idx) in enumerate(kfolds.split(X, y)):\n    X_train, y_train = X[train_features].iloc[trn_idx], y.iloc[trn_idx]\n    X_valid, y_valid = X[train_features].iloc[val_idx], y.iloc[val_idx]\n    \n    # CatBoost Regressor estimator\n    model = cb.CatBoostRegressor(\n        learning_rate = 0.03,\n        iterations = 1000,\n        eval_metric = 'RMSE',\n        allow_writing_files = False,\n        od_type = 'Iter',\n        bagging_temperature = 0.2,\n        depth = 10,\n        od_wait = 20,\n        silent = True\n    )\n    \n    # Fit\n    model.fit(\n        X_train, y_train,\n        eval_set=[(X_train, y_train), (X_valid, y_valid)],\n        verbose=None,\n        early_stopping_rounds=100\n    )\n    \n    # Feature importance\n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_features\n    imp_df['gain'] = model.get_feature_importance()\n    imp_df['fold'] = n_fold + 1\n    importances = pd.concat([importances, imp_df], axis=0, sort=False)\n    \n    oof_preds[val_idx] = model.predict(X_valid)\n    test_preds = model.predict(test[train_features])\n    sub_preds += test_preds \/ kfolds.n_splits\n    \nprint(np.sqrt(mean_squared_error(y, oof_preds)))","309f67e0":"importances['gain_log'] = importances['gain']\nmean_gain = importances[['gain', 'feature']].groupby('feature').mean()\nimportances['mean_gain'] = importances['feature'].map(mean_gain['gain'])\n\nplt.figure(figsize=(8, 12))\nsns.barplot(x='gain_log', y='feature', data=importances.sort_values('mean_gain', ascending=False))","960f7c8b":"# Length of submission\nlen(sub_preds)","3e84fcaf":"# Make submission\nsample_submission['target'] = sub_preds\nsample_submission.to_csv(\"cb_submission.csv\", index=False)\nsample_submission.head()","dfa914ba":"# One Hot Encoding","5fb1d7c1":"# Load libs","bf902800":"# CatBoost training","fbdc70f3":"# Feature Importances","3113afa6":"# Preprocessing","21a2cd21":"# Load datasets","74327a8c":"# Make submission","bb23d257":"# Notes\n\n* Getting started with CatBoost as a single model for training","99f9deb6":"--> Still missing values. So need to fill missing values again","0b7774c2":"## Merge with historical transactions","a7663eb3":"## Merge with new merchant"}}