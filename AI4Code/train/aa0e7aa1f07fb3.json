{"cell_type":{"7aa3a86d":"code","dda4012c":"code","b8538f15":"code","882117e1":"code","2d22edbc":"code","91269545":"code","61ae3714":"markdown","e701bac2":"markdown","da598bc5":"markdown","883716f8":"markdown","05024a99":"markdown","69658c60":"markdown"},"source":{"7aa3a86d":"import pandas as pd","dda4012c":"df = pd.read_csv(\"..\/input\/churn-modelling\/Churn_Modelling.csv\")\n\ndf.head()","b8538f15":"df = pd.get_dummies(df)\n\ndf.head()","882117e1":"from sklearn.model_selection import train_test_split\n\n# Columns used as predictors\nX = df.drop([\"Exited\"], axis = 1).values\n\ny = df[\"Exited\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)","2d22edbc":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion = \"gini\")\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","91269545":"%matplotlib inline\n%config InlineBackend.figure_formats = set([\"svg\"])\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import plot_tree\n\nplt.figure(figsize = (16, 14))\nplot_tree(model, feature_names = df.drop([\"Exited\"], axis = 1).columns.values, class_names = [\"Left\", \"Stayed\"], filled = True)\nplt.show()","61ae3714":"#### Visualizing Decision Tree","e701bac2":"#### Applying Decision Tree","da598bc5":"#### Loading and Displaying data","883716f8":"# Customer Churn Binary Classification with **Decision Tree**","05024a99":"#### One-Hot-Encoding","69658c60":"#### Defining X and y and Splitting data"}}