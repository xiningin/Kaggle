{"cell_type":{"bd065440":"code","756794c6":"code","c12f2f18":"code","18df4b3e":"code","662aa445":"code","119111af":"code","4c5ea68b":"code","382e4cd2":"code","1ca25730":"code","cae88b7c":"code","38d94db1":"code","d7b1b142":"code","13755e8c":"code","12412fde":"code","bdf4bda0":"code","d61bd295":"code","3ce88831":"code","b01eb056":"code","b244bc17":"code","bc3b6d2f":"code","9b7fc62a":"markdown","8fe98eff":"markdown","ab28904f":"markdown","ca17c871":"markdown","409f1d7a":"markdown","5d6ce602":"markdown","c5df6624":"markdown","5334916e":"markdown","e375dc74":"markdown","69a376a0":"markdown","3453c20f":"markdown","930beb8e":"markdown"},"source":{"bd065440":"labels = {\"Asthma\" : 0, \"Covid\" : 1, \"Flu\" : 2, \"COPD\" : 3, \"Lung Cancer\" : 4}","756794c6":"import json\nimport os\nimport numpy as np\nX = []\ny = []\nfor disease, label in labels.items():\n    folder_path = \"..\/input\/pulmonary-diseaes-dataset\/\" + disease\n    for file_name in os.listdir(folder_path):\n        with open(folder_path + \"\/\" + file_name) as file:\n            arr = np.array(json.load(file))\n            X.append(arr)\n            for i in range(arr.shape[0]):\n                y.append(label)","c12f2f18":"a = X[0]\nfor i in range(1,len(X)):\n  a = np.vstack((a, X[i]))\nX = a\nX.shape","18df4b3e":"import matplotlib.pyplot as plt\n\ncounts = [0] * len(labels)\nfor i in y:\n    counts[i] += 1\n\nnames = list(labels.keys())\n\nplt.figure(figsize=(9, 3))\n\nplt.bar(names, counts)","662aa445":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","119111af":"from imblearn.over_sampling import SMOTE ","4c5ea68b":"X_train = np.reshape(X_train, (X_train.shape[0], int(X_train.shape[1] * X_train.shape[2])))\nX_train.shape","382e4cd2":"sm = SMOTE()\nX_train , y_train = sm.fit_resample(X_train, y_train)","1ca25730":"X_train = np.reshape(X_train, (X_train.shape[0],  45, 216))\nX_train.shape","cae88b7c":"counts = [0] * len(labels)\nfor i in y_train:\n    counts[i] += 1\n\nnames = list(labels.keys())\n\nplt.figure(figsize=(9, 3))\n\nplt.bar(names, counts)","38d94db1":"X_train, X_test = X_train[..., np.newaxis] , X_test[..., np.newaxis]\nX_train.shape, X_test.shape","d7b1b142":"from tensorflow.keras.utils import to_categorical\ny_test_2 , y_train_2 = y_test.copy(), y_train.copy()\ny_test , y_train = to_categorical(y_test) , to_categorical(y_train)","13755e8c":"import tensorflow as tf\nfrom tensorflow import keras\ndef get_model():\n    model = keras.Sequential()\n\n    model.add(keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(X_train.shape[1], X_train.shape[2], 1)) )\n    model.add(keras.layers.MaxPooling2D((3, 3), strides=(2, 2), padding='same'))\n    model.add(keras.layers.BatchNormalization())\n\n    model.add(keras.layers.Conv2D(32, (3, 3), activation='relu'))\n    model.add(keras.layers.MaxPooling2D((3, 3), strides=(2, 2), padding='same'))\n    model.add(keras.layers.BatchNormalization())\n\n    model.add(keras.layers.Conv2D(32, (2, 2), activation='relu'))\n    model.add(keras.layers.MaxPooling2D((2, 2), strides=(2, 2), padding='same'))\n    model.add(keras.layers.BatchNormalization())\n\n    model.add(keras.layers.Flatten())\n    model.add(keras.layers.Dense(64, activation='relu'))\n    model.add(keras.layers.Dropout(0.3))\n\n    model.add(keras.layers.Dense(len(labels), activation='softmax'))\n\n    optimiser = tf.keras.optimizers.Adam(learning_rate=0.0001)\n    model.compile(optimizer=optimiser,\n                      loss='categorical_crossentropy',\n                      metrics=['categorical_accuracy'])\n    return model","12412fde":"model = get_model()\nhistory = model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=32, epochs=100)","bdf4bda0":"import matplotlib.pyplot as plt\ndef plot_history(history):\n    plt.plot(history.history['categorical_accuracy'])\n    plt.plot(history.history['val_categorical_accuracy'])\n    plt.title('model accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.show()\n    # summarize history for loss\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.show()\nplot_history(history)","d61bd295":"def print_classification_report():\n    pred = model.predict(X_test)\n    y_pred = []\n    for i in range(pred.shape[0]):\n      index = -1\n      maxVal = 0\n      for j in range(pred.shape[1]):\n        if pred[i][j] > maxVal:\n          index = j\n          maxVal = pred[i][j]\n      y_pred.append(index)\n    from sklearn.metrics import classification_report\n    print(classification_report(y_test_2, y_pred))\nprint_classification_report()","3ce88831":"X_train = X_train[ : , 4 : 17, : ]\nX_test = X_test[: , 4:17, : ]\nX_train.shape, X_test.shape","b01eb056":"model = get_model()\nhistory = model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=32, epochs=100)","b244bc17":"plot_history(history)","bc3b6d2f":"print_classification_report()","9b7fc62a":"Plot History","8fe98eff":"### Train","ab28904f":"Get only MFCC Features","ca17c871":"### Data Distribution","409f1d7a":"SMOTE (synthetic minority oversampling technique)","5d6ce602":"As you can see from above our data has unbalanced. We can use SMOTE algorithm to balance our data.","c5df6624":"Precision, Recall, F1","5334916e":"OK, Our shape is (1557, 45, 216)\n\nShape-2 is about audio features\n\n0 : Amplitude-Envelope\n\n1 : RMS\n\n2 : Zero Crossing\n\n3 : STFT\n\n4-16 : MFCC\n\n17-29 : MFCC-Delta\n\n30-42 : MFCC-Delta-2 (Order:2)\n\n43: Spectral Centroid\n\n44: Spectral Bandwith\n\nIf you don't know this features you can check [librosa documentation](https:\/\/librosa.org\/doc\/latest\/index.html).","e375dc74":"#### Sometimes train with only MFCC feature gives better results","69a376a0":"SMOTE does not work for 3d arrays.","3453c20f":"Plot y_train distrubition","930beb8e":"SMOTE algorithm balanced data for train set"}}