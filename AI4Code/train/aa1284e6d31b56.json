{"cell_type":{"3e4c432d":"code","3cb4f58a":"code","0b68f08d":"code","3005a5b3":"code","5d22b6e8":"code","048e2a9a":"code","c48d0144":"code","824bbea2":"code","59ddfc2c":"code","3c382eda":"code","c3dd607a":"code","070b2a14":"code","a0ad9f10":"code","3dc22e0e":"code","ff601907":"markdown","73575640":"markdown","a642403c":"markdown","15c9663c":"markdown","10f67edc":"markdown","77dfe636":"markdown","0f06018e":"markdown","1f41c9d6":"markdown","116a8de2":"markdown","5e3cb15a":"markdown","fa945643":"markdown"},"source":{"3e4c432d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3cb4f58a":"import pandas as pd \ndf = pd.read_csv('\/kaggle\/input\/fish-market\/Fish.csv')","0b68f08d":"df.describe()","3005a5b3":"df.info()","5d22b6e8":"data=df[['Species','Length1','Length2','Length3','Height','Width','Weight']]\ndata.head()","048e2a9a":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndata.Species=le.fit_transform(data.Species)\ndata.head()","c48d0144":"X=data.iloc[:,:-1] # X is the input it`s all columns from 0 to before last one\ny=data.iloc[:,-1] # y is the output it`s the last column only","824bbea2":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2,random_state=7)","59ddfc2c":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train, y_train)\nscore1=lr.score(X_test,y_test)","3c382eda":"from sklearn.neural_network import MLPRegressor\nmp=MLPRegressor()\nmp.fit(X_train,y_train)\nscore2=mp.score(X_test,y_test)","c3dd607a":"from sklearn.svm import SVR\nsr=SVR(kernel='linear')\nsr.fit(X_train,y_train)\nscore3=sr.score(X_test,y_test)","070b2a14":"from sklearn.tree import DecisionTreeRegressor\ndtr=DecisionTreeRegressor()\ndtr.fit(X,y)\nscore4=dtr.score(X_test,y_test)","a0ad9f10":"model=pd.DataFrame({'Model' :['linear regression','MLPRegrosser','SVR','Decision Tree'],'Score' :[score1,score2,score3,score4]})\nmodel.sort_values(by='Score',ascending=False)","3dc22e0e":"import seaborn as sns\nimport matplotlib.pyplot as plt \nplt.figure(figsize=(5,5))\nsns.barplot(x='Model',y='Score',data=model)\nplt.show()","ff601907":"# SVR","73575640":"# MLPRegressor","a642403c":"# Converting str values to int","15c9663c":"# Read data","10f67edc":"# Models Accuracy","77dfe636":"# Linear Regression","0f06018e":"# Rearrangement for data","1f41c9d6":"# Data spliting","116a8de2":"# Define input and output","5e3cb15a":"# Models Visualization","fa945643":"# Decision Tree"}}