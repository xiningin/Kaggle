{"cell_type":{"3090a75a":"code","97c5156a":"code","4df110da":"code","ef2b3cd6":"code","328ba55b":"code","4af98534":"code","e6a2814f":"code","487154a6":"code","816f5698":"code","c7c6fd21":"code","fe3cbe14":"code","fc304b22":"code","bdb5b45e":"code","a683ee4b":"code","7e29406c":"markdown","b2172216":"markdown","6671f5f1":"markdown","598d62b2":"markdown","54649b27":"markdown"},"source":{"3090a75a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","97c5156a":"import plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nimport matplotlib.pyplot as plt","4df110da":"gas = pd.read_csv('\/kaggle\/input\/weekly-fuel-prices-in-italy\/weekly_fuel_prices_all_data_from_2005_to_20210823.csv')","ef2b3cd6":"def liter(price):\n    return price \/ 1000  # PRICE in Data set is probably per 1000 liters (didn't find info about it), so made new column","328ba55b":"gas['Liter'] = gas['PRICE'].apply(lambda x: liter(x))\ngas['Year'] = pd.to_datetime(gas['SURVEY_DATE']).dt.year\ngas['Month'] = pd.to_datetime(gas['SURVEY_DATE']).dt.month\ngas.rename(columns = {'PRODUCT_NAME' : 'Gas name'}, inplace = True)\n\ngas.head()","4af98534":"plot = gas.groupby([gas['Year'], gas['Gas name']], as_index = False).mean()","e6a2814f":"fig = px.line(plot, x = 'Year', y = 'Liter', color = 'Gas name', title = 'Mean gas price in Italy through 2005 - 2021\/08\/16 years', template = 'simple_white')\n\nfig.update_layout(yaxis_title = '', xaxis_title = '')\n\nfig.update_yaxes(nticks = 20)\nfig.update_xaxes(nticks = 20)\n\nfig.show()","487154a6":"y = gas['PRICE']\nfeatures = ['EXCISE', 'PRODUCT_ID', 'NET']\n\nX = gas[features]\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, random_state = 8)","816f5698":"model = LinearRegression()\nmodel.fit(train_X, train_y)","c7c6fd21":"predicted_value = model.predict(test_X)\npredicted_value = np.round(predicted_value, 2)\n\nRME = mean_squared_error(test_y, predicted_value, squared = False)\nprint(f'Root mean error value: {RME:.6f}')","fe3cbe14":"plot = pd.DataFrame({ 'ID' : test_X['PRODUCT_ID'],\n                     'Net' : test_X['NET'],\n                     'Excise' : test_X['EXCISE'],\n                     'Price' : predicted_value,\n                     'Actual price' : test_y\n                    })\n\nplot.head()","fc304b22":"conditions = [\n    (plot['ID'] == 1),\n    (plot['ID'] == 2),\n    (plot['ID'] == 3),\n    (plot['ID'] == 5),\n    (plot['ID'] == 6),\n    (plot['ID'] == 8)\n             ]\n\nvalues = ['Euro-Super 95', 'Automotive gas oil', 'Heating gas oil', 'LPG', 'Residual fuel oil', 'Heavy fuel oil']\n\nplot['Name'] = np.select(conditions, values)  # added Name column to find gas easier","bdb5b45e":"plot.head()","a683ee4b":"plt.scatter(plot['Actual price'], plot['Net'], color = 'r', label = 'Actual gas price')\nplt.scatter(plot['Price'], plot['Net'], color = 'g', label = 'Gas price predicted by LR')\n\nplt.legend()\nplt.show()","7e29406c":"### New data frame, removed columns which are not interested for us","b2172216":"### Column creation, manipulation","6671f5f1":"### Libraries used (+ pandas and numpy)","598d62b2":"### New data frame for plotting prices","54649b27":"### ML part, trying Linear Regression model to predict gas price, with his Net price and excise"}}