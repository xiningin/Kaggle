{"cell_type":{"dabfb0c5":"code","7c547bd7":"code","00e08240":"code","c98f1062":"code","2bf8a2f7":"code","a35ebe9b":"code","e6e5b0c1":"code","8b6f01a8":"code","01fbc6b3":"code","0621eed0":"code","b3c75cf9":"code","dcc0d96e":"code","33ee6757":"code","0f43d1ed":"code","c5945514":"code","6e88d3e9":"code","2a859061":"code","40f5bf59":"code","4cc4f5d2":"code","ffd53e04":"code","0a2c4d42":"code","df09b999":"code","16e34f75":"markdown","2e56d2f5":"markdown","982df32f":"markdown","ee69b18d":"markdown","b2510b21":"markdown","6259f8ed":"markdown","e0827f9a":"markdown","7938d72a":"markdown","e55fb89d":"markdown","13ceea9b":"markdown","c274e3b5":"markdown","d0a6b769":"markdown","76cb8595":"markdown","6911fd61":"markdown"},"source":{"dabfb0c5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport networkx as nx\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7c547bd7":"df = pd.read_csv('\/kaggle\/input\/witcher-network\/witcher_network.csv')\nshort_df = pd.read_csv('\/kaggle\/input\/witcher-network\/witcher_small_network.csv')","00e08240":"df.head()","c98f1062":"#these characters were way off to the side which made the rest of the network scrunch up so I decided to delete them form the dataframe\ndf = df.drop(df.index[df['Source'] == 'Vreemde'])\ndf = df.drop(df.index[df['Source'] == 'Morteisen'])\ndf = df.drop(df.index[df['Target'] == 'Vreemde'])\ndf = df.drop(df.index[df['Target'] == 'Morteisen'])","2bf8a2f7":"G = nx.Graph()\n\nfor _, edge in df.iterrows():\n    G.add_edge(edge['Source'], edge['Target'], weight=edge['Weight'])\n\n#nx.draw(G,with_labels=True, node_color='g')\ndeg_centrality = nx.degree_centrality(G)\ncent = np.fromiter(deg_centrality.values(), float)\nsizes = cent \/ np.max(cent) * 200","a35ebe9b":"plt.figure(figsize=(20,20))\nnx.draw_networkx(G,with_labels=True, node_color='g', node_size=sizes*10)\nplt.show","e6e5b0c1":"most_influential = nx.degree_centrality(G)\n\ncharacters = []\n\nfor w in sorted(G, key=most_influential.get, reverse=True):\n    characters.append(w)\n    sorted_influential = (w, most_influential[w])\n    #print(w, most_influential[w])\n    #print(len(sorted_influential))\n\n\n#top_characters = characters[0:15]\n#bottom_characters = characters[:15]\n#print(top_characters)\n#print(bottom_characters)","8b6f01a8":"#for char in bottom_characters:\n    #shortened_df = df.drop(df.index[df['Source'] == char])\n    #shortened_df = df.drop(df.index[df['Target'] == char])","01fbc6b3":"short_df.info()","0621eed0":"#visualizing using shortened DF\nShort_G = nx.Graph()\n\nfor _, edge in short_df.iterrows():\n    Short_G.add_edge(edge['Source'], edge['Target'], weight=edge['Weight'])\n\n#nx.draw(G,with_labels=True, node_color='g')\ndeg_centrality = nx.degree_centrality(Short_G)\ncent = np.fromiter(deg_centrality.values(), float)\nsizes = cent \/ np.max(cent) * 200","b3c75cf9":"plt.figure(figsize=(20,20))\nnx.draw_networkx(Short_G,with_labels=True, node_color='g', node_size=sizes*20)\nplt.show","dcc0d96e":"#subsetting dataframe by book\n\n#book_1 = df.loc[df['book'] == 1]\n#book_2 = df.loc[df['book'] == 2]\n#book_3 = df.loc[df['book'] == 3]\n#book_4 = df.loc[df['book'] == 4]\n#book_5 = df.loc[df['book'] == 5]\n#book_6 = df.loc[df['book'] == 6]\n#book_7 = df.loc[df['book'] == 7]\n\nbook_1 = short_df.loc[short_df['book'] == 1]\nbook_2 = short_df.loc[short_df['book'] == 2]\nbook_3 = short_df.loc[short_df['book'] == 3]\nbook_4 = short_df.loc[short_df['book'] == 4]\nbook_5 = short_df.loc[short_df['book'] == 5]\nbook_6 = short_df.loc[short_df['book'] == 6]\nbook_7 = short_df.loc[short_df['book'] == 7]\n","33ee6757":"G_book1 = nx.Graph()\n\nfor _, edge in book_1.iterrows():\n    G_book1.add_edge(edge['Source'], edge['Target'], weight=edge['Weight'])","0f43d1ed":"deg_cen_book1 = nx.degree_centrality(G_book1)","c5945514":"# Creating a list of networks for all the books\nbooks = [G_book1]\nbook_fnames = [book_2, book_3, book_4, book_5, book_6, book_7]\nfor book_fname in book_fnames:\n    book = book_fname\n    G_book = nx.Graph()\n    for _, edge in book.iterrows():\n        G_book.add_edge(edge['Source'], edge['Target'], weight=edge['Weight'])\n    books.append(G_book)","6e88d3e9":"# Calculating the degree centrality of book 1\ndeg_cen_book1 = nx.degree_centrality(books[0])\n\n# Calculating the degree centrality of book 7\ndeg_cen_book7 = nx.degree_centrality(books[6])\n\n# Sorting the dictionaries according to their  degree centrality and extracting the top 10\nsorted_deg_cen_book1 = sorted(deg_cen_book1.items(), key=lambda x:x[1], reverse=True)[0:10]\n\n# Sorting the dictionaries according to their degree centrality and extracting the top 10\nsorted_deg_cen_book7 = sorted(deg_cen_book7.items(), key=lambda x:x[1], reverse=True)[0:10]\n\n# Printing out the top 10 of book1 and book5\nprint(\"Book 1\", sorted_deg_cen_book1)\nprint(\"Book 5\", sorted_deg_cen_book7)","2a859061":"%matplotlib inline\n\n# Creating a list of degree centrality of all the books\nevol = [nx.degree_centrality(book) for book in books]\n \n# Creating a DataFrame from the list of degree centralities in all the books\ndegree_evol_df = pd.DataFrame.from_records(evol)\n\n# Plotting the degree centrality evolution of Geralt, Ciri, and Yennefer\ndegree_evol_df[['Geralt', 'Ciri', 'Yennefer']].plot()","40f5bf59":"#### Creating a list of betweenness centrality of all the books just like we did for degree centrality\nevol = [nx.betweenness_centrality(book, weight='weight') for book in books]\n\n# Making a DataFrame from the list\nbetweenness_evol_df = pd.DataFrame.from_records(evol).fillna(0)\n\n# Finding the top 4 characters in every book\nset_of_char = set()\nfor i in range(4):\n    set_of_char |= set(list(betweenness_evol_df.T[i].sort_values(ascending=False)[0:4].index))\nlist_of_char = list(set_of_char)\n\n# Plotting the evolution of the top characters\nbetweenness_evol_df[list_of_char].plot(figsize=(13, 7))","4cc4f5d2":"evol = [nx.pagerank(book) for book in books]\npagerank_evol_df = pd.DataFrame.from_records(evol).fillna(0)\n\n# Finding the top 4 characters in every book\nset_of_char = set()\nfor i in range(4):\n    set_of_char |= set(list(pagerank_evol_df.T[i].sort_values(ascending=False)[0:4].index))\nlist_of_char = list(set_of_char)\n\n# Plotting the top characters\npagerank_evol_df[list_of_char].plot(figsize=(13, 7))","ffd53e04":"# Creating a list of pagerank, betweenness centrality, degree centrality\n# of all the characters in the seventh book.\nmeasures = [nx.pagerank(books[6]), \n            nx.betweenness_centrality(books[6], weight='weight'), \n            nx.degree_centrality(books[6])]\n\n# Creating the correlation DataFrame\ncor = pd.DataFrame.from_records(measures)\n\n# Calculating the correlation\ncor.T.corr()","0a2c4d42":"# Finding the most important character in the 7th book according to degree centrality, betweenness centrality and pagerank.\np_rank, b_cent, d_cent = cor.idxmax(axis=1)\n\nprint(p_rank)\nprint(b_cent)\nprint(d_cent)","df09b999":"import numpy as np\nimport matplotlib.colors as mcolors\nimport matplotlib.cm as cm\n\ndeg_centrality = nx.degree_centrality(Short_G)\n\ncent = np.fromiter(deg_centrality.values(), float)\nsizes = cent \/ np.max(cent) * 200\nnormalize = mcolors.Normalize(vmin=cent.min(), vmax=cent.max())\ncolormap = cm.viridis\n\nscalarmappaple = cm.ScalarMappable(norm=normalize, cmap=colormap)\nscalarmappaple.set_array(cent)\n\nplt.figure(figsize=(20,20))\nplt.colorbar(scalarmappaple)\nnx.draw(Short_G, node_size=sizes*10, node_color=sizes*20, cmap=colormap,with_labels=True)\nplt.show()","16e34f75":"now lets determine the most important character according to three metrics:\n* degree centrality, betweeness centrality, and pagerank    ","2e56d2f5":"Conclusion","982df32f":"# Visualization","ee69b18d":"# The Evolution of Charcater Importance","b2510b21":"# Most Influential","6259f8ed":"This network is obviously very crowded, so I am going to find the 15 most influential characters and only include connections with those characters","e0827f9a":"*The Witcher* is a fantasy novel series by Andrzej Sapkowski and is the inspiration behind multiple computer games and, of course, the popular Netflix show! The series consists of various plots and timelines and therefor I was really interested in seeing what a social network visualization of the book series would look like.","7938d72a":"Geralt is the mos timportant character according to all 3 standards!","e55fb89d":"Correlation between different measures","13ceea9b":"# Visualize the network by degree centrality with a gradient","c274e3b5":"first using degree centrality","d0a6b769":"![image.jpeg](attachment:66819518-52f6-496d-aa6f-c8ef42da4b10.jpeg)","76cb8595":"Last but not least... Pagerank!","6911fd61":"Now betweeness centrality"}}