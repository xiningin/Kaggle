{"cell_type":{"b6b2b6ac":"code","2e1e8367":"code","518f99bb":"code","f9dfc839":"code","4ed45600":"code","73f9efbb":"code","a2bb5385":"code","0cb674a0":"code","3d963748":"code","598b1809":"code","9790eddb":"code","9ca6a8ca":"code","fc1ab83c":"code","1cea9a50":"code","7a65fbb6":"code","e15f5090":"code","4b7d93a1":"code","213eadd4":"code","5636cdc1":"code","7d84c7f8":"code","34ba7739":"code","429ecdb9":"code","e966f458":"code","2cfdac04":"code","b43a0d07":"code","fb8937fd":"code","5a91d5e6":"code","4c430b4f":"code","f593b244":"code","79133663":"code","850c6cb0":"code","a2d962d4":"code","9b4c588b":"code","35fc5ff9":"code","59efcbd2":"code","8dca9f73":"code","b2516f64":"code","323b1ac8":"code","2cccc917":"markdown","ad470053":"markdown","e7699ef5":"markdown","323dfed2":"markdown","eba12ea4":"markdown","a2ab8b00":"markdown","baefce54":"markdown","adf87c1d":"markdown","79530e9b":"markdown","d11c6565":"markdown","327294b0":"markdown","07ae4c23":"markdown","37757d01":"markdown","f26788ee":"markdown","b20cae78":"markdown","ab4cdffd":"markdown","fee1a1bf":"markdown","93675d6f":"markdown","bc5081f0":"markdown","89f3fa4c":"markdown","d7676737":"markdown","5bfa788f":"markdown","072ca966":"markdown","c16a72e4":"markdown","714c6e09":"markdown","6bdabdaa":"markdown","9fa37eaa":"markdown","e1bf069e":"markdown","8f245d4c":"markdown","2801473f":"markdown","1d8315ae":"markdown","85a8406c":"markdown","3d22865f":"markdown","b2e21686":"markdown","873e3ddc":"markdown","91e7c2c9":"markdown","a87cddd8":"markdown","61e926eb":"markdown","09824963":"markdown","d756c0b8":"markdown","ee68cc7f":"markdown","b88f6656":"markdown","ea9a96db":"markdown","f8da3e59":"markdown","ef9cad2e":"markdown","94fd910f":"markdown","5f1999b7":"markdown","29952074":"markdown","9b72cceb":"markdown","4cad7528":"markdown"},"source":{"b6b2b6ac":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport plotly.graph_objects as go\n\npd.set_option('display.max_columns',None)\npd.set_option('display.max_rows',None)\n%matplotlib inline","2e1e8367":"df_train = pd.read_csv('..\/input\/suspicious-transaction-detection\/train.csv')\ndf_test = pd.read_csv('..\/input\/suspicious-transaction-detection\/test.csv')\n\ndf_train.head()","518f99bb":"nulls = df_train.isnull().sum()\/df_train.shape[0]\nfor i in range(0,10):\n    print(f'{len(nulls[nulls.values<=(i\/100)])*100\/len(nulls)}% columns have null values less than {i*1}% rows') \n\nfor i in range(1,10):\n    print(f'{len(nulls[nulls.values<=(i\/10)])*100\/len(nulls)}% columns have null values less than {i*10}% rows')","f9dfc839":"list(nulls[nulls.values<=0.1].index)\n#sel_cols = list(nulls[nulls.values<=0.1].index)\n#df_train = df_train[sel_cols]\n#df_test = df_test[[col for col in sel_cols if col!='Target']]\n#list(df_train.columns)","4ed45600":"target_vc = df_train['Target'].value_counts()\ntrace = go.Pie(labels = target_vc.index, \n               values = target_vc.values,\n               hoverinfo = 'percent+value+label',\n               textinfo = 'percent',\n               textposition = 'inside',\n               textfont = dict(size=14),\n               title = 'Fraud Flag',\n               titlefont = dict(size=15),\n               hole = 0.5,\n               showlegend = True,\n               marker = dict(line=dict(color='black',width=2)))\nfig = go.Figure(data=[trace])\nfig.update_layout(height=400, width=400)\nfig.show()","73f9efbb":"timestamp = pd.to_datetime(df_train['Timestamp'])\ntimestamp.head()","a2bb5385":"year = timestamp.dt.year\nmonth = timestamp.dt.month\nday = timestamp.dt.day\ntime_of_day = timestamp.dt.hour","0cb674a0":"year_vc = year.value_counts()\ntrace = go.Pie(labels = year_vc.index, \n               values = year_vc.values,\n               hoverinfo = 'percent+value+label',\n               textinfo = 'percent',\n               textposition = 'inside',\n               textfont = dict(size=14),\n               title = 'Year',\n               titlefont = dict(size=15),\n               hole = 0.5,\n               showlegend = True,\n               marker = dict(line=dict(color='black',width=2)))\nfig = go.Figure(data=[trace])\nfig.update_layout(height=400, width=400)\nfig.show()","3d963748":"month_vc = month.value_counts(sort=False)\nfig,ax = plt.subplots(figsize=(8,5))\nax.plot(month_vc.index,month_vc.values,label='total',color='black')\nax.scatter(month_vc.index,month_vc.values,color='red')\nax.set_title('Month Record')\nax.legend()","598b1809":"month_target = pd.concat([df_train['Target'],month],axis=1)\nmonth_target.columns = ['Target','Month']\nfraud_month_vc = month_target[month_target.Target==1]['Month'].value_counts(sort=False)\n\nfig,ax = plt.subplots(figsize=(8,5))\nax.plot(fraud_month_vc.index,fraud_month_vc.values,label='fraud')\nax.scatter(fraud_month_vc.index,fraud_month_vc.values,color='red')\nax.set_title('Month Record')\nax.legend()","9790eddb":"day_vc = day.value_counts(sort=False)\nfig,ax = plt.subplots(figsize=(8,5))\nax.plot(day_vc.index,day_vc.values,label='total',color='black')\nax.scatter(day_vc.index,day_vc.values,color='red')\nax.set_title('Day Record')\nax.legend()","9ca6a8ca":"day_target = pd.concat([df_train['Target'],day],axis=1)\nday_target.columns = ['Target','Day']\nfraud_day_vc = day_target[day_target.Target==1]['Day'].value_counts().sort_index()\n\nfig,ax = plt.subplots(figsize=(8,5))\nax.plot(fraud_day_vc.index,fraud_day_vc.values,label='fraud')\nax.scatter(fraud_day_vc.index,fraud_day_vc.values,color='red')\nax.set_title('Day Record')\nax.legend()","fc1ab83c":"hour_vc = time_of_day.value_counts(sort=False)\nfig,ax = plt.subplots(figsize=(8,5))\nax.plot(hour_vc.index,hour_vc.values,label='total',color='black')\nax.scatter(hour_vc.index,hour_vc.values,color='red')\nax.set_title('Time of Day Record')\nax.set_xticks(range(1,13))\nax.legend()","1cea9a50":"hour_target = pd.concat([df_train['Target'],time_of_day],axis=1)\nhour_target.columns = ['Target','Hour']\nfraud_hour_vc = hour_target[hour_target.Target==1]['Hour'].value_counts(sort=False)\n\nfig,ax = plt.subplots(figsize=(8,5))\nax.plot(fraud_hour_vc.index,fraud_hour_vc.values,label='fraud')\nax.scatter(fraud_hour_vc.index,fraud_hour_vc.values,color='red')\nax.set_title('Time of Day Record')\nax.set_xticks(range(1,13))\nax.legend()","7a65fbb6":"fig,ax = plt.subplots(nrows=1,ncols=2,figsize=(12,5))\nsns.boxplot(data=df_train['Amount'],ax=ax[0])\nax[0].set_title('Boxplot of Amount')\nsns.distplot(df_train['Amount'].values.clip(0,10000),ax=ax[1])\nax[1].set_title('Histogram of Amount')","e15f5090":"fraud_amount = df_train[df_train.Target==1]['Amount']\nnormal_amount = df_train[df_train.Target==0]['Amount']\nfig,ax = plt.subplots(nrows=1,ncols=2,figsize=(12,5))\nsns.boxplot(data=[fraud_amount,normal_amount],ax=ax[0])\nax[0].set_xticklabels(['Fraud','Not Fraud'])\nax[0].set_title('Boxplot of Amount')\nsns.distplot(normal_amount.values.clip(0,10000),ax=ax[1],color='blue',label='Not Fraud')\nsns.distplot(fraud_amount.values,ax=ax[1],color='red',label='Fraud')\nax[1].set_title('Histogram of Amount')\nax[1].legend()","4b7d93a1":"goods_vc_fraud = df_train[df_train.Target==1]['Goods'].value_counts().sort_index()\ngoods_vc_normal = df_train[df_train.Target==0]['Goods'].value_counts().sort_index()\ngoods_vc = pd.concat([goods_vc_fraud,goods_vc_normal],axis=1)\ngoods_vc.columns=['Fraud','Not Fraud']\nfig,ax = plt.subplots(figsize=(8,5))\ngoods_vc.plot(kind='bar',ax=ax)\nplt.xticks(rotation=0)\nax.set_title('Goods')","213eadd4":"A0 = df_train['A_0']\nA0 = A0.fillna('Null')\nA1 = df_train['A_1']\nA1 = A1.fillna('Null')\nA0_vc = A0.value_counts().head(10)\nA1_vc = A1.value_counts().head(10)\n\nfig,ax = plt.subplots(nrows=1,ncols=2,figsize=(15,5))\nax[0].bar([str(v) for v in list(A0_vc.index)],A0_vc.values)\nax[1].bar([str(v) for v in list(A1_vc.index)],A1_vc.values)\nax[0].set_title('A_0')\nax[1].set_title('A_1')","5636cdc1":"df_train[['A_0','A_1']].describe()","7d84c7f8":"E0 = df_train['E_0']\nE0 = E0.fillna('Null')\nE1 = df_train['E_1']\nE1 = E1.fillna('Null')\nE0_vc = E0.value_counts().head(10)\nE1_vc = E1.value_counts().head(10)\n\nfig,ax = plt.subplots(nrows=1,ncols=2,figsize=(15,5))\nax[0].bar([str(v) for v in list(E0_vc.index)],E0_vc.values)\nax[1].bar([str(v) for v in list(E1_vc.index)],E1_vc.values)\nax[0].set_xticklabels(labels=[str(v) for v in list(E0_vc.index)], rotation=70)\nax[1].set_xticklabels(labels=[str(v) for v in list(E1_vc.index)], rotation=70)\nax[0].set_title('E_0')\nax[1].set_title('E_1')","34ba7739":"E0 = df_train['E_0'].fillna('null').values\nE1 = df_train['E_1'].fillna('null').values\ncnt1 = 0\ncnt2 = 0\ncnt3 = 0\nfor a,b in zip(E0,E1):\n    if a!='null' and b!='null':\n        ## E0==E1\n        if a==b:\n            cnt1 += 1\n        ## E0!=E1\n        elif a!=b:\n            cnt2 += 1\n    ## Unknown exist        \n    else:\n        cnt3 += 1        \ncnt1,cnt2,cnt3","429ecdb9":"M0 = df_train['M_0']\nM0 = M0.fillna('Null')\nM1 = df_train['M_1']\nM1 = M1.fillna('Null')\nM0_vc = M0.value_counts()\nM1_vc = M1.value_counts().head(10)\n\nfig,ax = plt.subplots(nrows=1,ncols=2,figsize=(15,5))\nax[0].bar([str(v) for v in list(M0_vc.index)],M0_vc.values)\nax[1].bar([str(v) for v in list(M1_vc.index)],M1_vc.values)\nax[0].set_xticklabels(labels=[str(v) for v in list(M0_vc.index)], rotation=70)\nax[1].set_xticklabels(labels=[str(v) for v in list(M1_vc.index)], rotation=70)\nax[0].set_title('M_0')\nax[1].set_title('M_1')","e966f458":"M1 = df_train[df_train.Target==1]['M_0']\nM0 = df_train[df_train.Target==0]['M_0']\nM1 = M1.fillna('Null')\nM0 = M0.fillna('Null')\nvc1 = M1.value_counts(sort=False)\nvc0 = M0.value_counts(sort=False)\nvc_concat = pd.concat([vc1,vc0],axis=1)\nvc_concat.columns=['Fraud','Not Fraud']\n\nfig,ax=plt.subplots(figsize=(7,5))\nvc_concat.plot(kind='bar',ax=ax)\nax.set_title('M_0')\nax.legend()","2cfdac04":"fig,ax=plt.subplots(nrows=3,ncols=3,figsize=(20,20))\nfor i in range(0,9):\n    C1 = df_train[df_train.Target==1][f'C_{i}']\n    C0 = df_train[df_train.Target==0][f'C_{i}']\n    C1 = C1.fillna('Null')\n    C0 = C0.fillna('Null')\n    vc1 = C1.value_counts(sort=False)\n    vc0 = C0.value_counts(sort=False)\n    vc_concat = pd.concat([vc1,vc0],axis=1)\n    vc_concat.columns=['Fraud','Not Fraud']\n\n    #fig,ax = plt.subplots(figsize=(5,3))\n    vc_concat.plot(kind='bar',ax=ax[divmod(i,3)[0],divmod(i,3)[1]])\n    ax[divmod(i,3)[0],divmod(i,3)[1]].set_title(f'C_{i}')\n    ax[divmod(i,3)[0],divmod(i,3)[1]].legend()","b43a0d07":"fig,ax=plt.subplots(nrows=1,ncols=2,figsize=(15,5))\nfor i,col in enumerate(['C_24','C_25']):\n    C1 = df_train[df_train.Target==1][col]\n    C0 = df_train[df_train.Target==0][col]\n    C1 = C1.fillna('Null')\n    C0 = C0.fillna('Null')\n    vc1 = C1.value_counts(sort=False)\n    vc0 = C0.value_counts(sort=False)\n    vc_concat = pd.concat([vc1,vc0],axis=1)\n    vc_concat.columns=['Fraud','Not Fraud']\n\n    #fig,ax = plt.subplots(figsize=(5,3))\n    vc_concat.plot(kind='bar',ax=ax[i])\n    ax[i].set_title(col)\n    ax[i].legend()","fb8937fd":"fig,ax=plt.subplots(nrows=2,ncols=2,figsize=(12,12))\nfor i,col in enumerate(['C_23','C_26','C_27','C_28']):\n    C = df_train[col]\n    C = C.fillna('Null')\n    vc = C.value_counts().head(10)\n\n    vc.plot(kind='bar',ax=ax[divmod(i,2)[0],divmod(i,2)[1]])\n    ax[divmod(i,2)[0],divmod(i,2)[1]].set_title(col)","5a91d5e6":"df_train[['C_23','C_26','C_27','C_28']].describe()","4c430b4f":"fig,ax=plt.subplots(nrows=1,ncols=3,figsize=(15,5))\nfor i,col in enumerate(['O_4','O_7','O_8']):\n    C1 = df_train[df_train.Target==1][col]\n    C0 = df_train[df_train.Target==0][col]\n    C1 = C1.fillna('Null')\n    C0 = C0.fillna('Null')\n    vc1 = C1.value_counts(sort=False)\n    vc0 = C0.value_counts(sort=False)\n    vc_concat = pd.concat([vc1,vc0],axis=1)\n    vc_concat.columns=['Fraud','Not Fraud']\n\n    #fig,ax = plt.subplots(figsize=(5,3))\n    vc_concat.plot(kind='bar',ax=ax[i])\n    ax[i].set_title(col)\n    ax[i].legend()","f593b244":"fig,ax=plt.subplots(nrows=1,ncols=2,figsize=(12,5))\nfor i,col in enumerate(['O_2','O_6']):\n    C = df_train[col]\n    C = C.fillna('Null')\n    vc = C.value_counts().head(10)\n\n    vc.plot(kind='bar',ax=ax[i])\n    ax[i].set_title(col)","79133663":"fig,ax=plt.subplots(nrows=2,ncols=2,figsize=(12,12))\nfor i,col in enumerate(['O_10','O_12','O_16','O_17']):\n    C1 = df_train[df_train.Target==1][col]\n    C0 = df_train[df_train.Target==0][col]\n    C1 = C1.fillna('Null')\n    C0 = C0.fillna('Null')\n    vc1 = C1.value_counts(sort=False)\n    vc0 = C0.value_counts(sort=False)\n    vc_concat = pd.concat([vc1,vc0],axis=1)\n    vc_concat.columns=['Fraud','Not Fraud']\n\n    #fig,ax = plt.subplots(figsize=(5,3))\n    vc_concat.plot(kind='bar',ax=ax[divmod(i,2)[0],divmod(i,2)[1]])\n    ax[divmod(i,2)[0],divmod(i,2)[1]].set_title(col)\n    ax[divmod(i,2)[0],divmod(i,2)[1]].legend()","850c6cb0":"df_train['O_13'].unique()","a2d962d4":"df_train['O_14'].unique()","9b4c588b":"df_train[['O_13','O_14']].isnull().sum()\/df_train.shape[0]","35fc5ff9":"fig,ax=plt.subplots(nrows=1,ncols=2,figsize=(12,5))\nfor i,col in enumerate(['O_11','O_15']):\n    C = df_train[col]\n    C = C.fillna('Null')\n    vc = C.value_counts().head(10)\n\n    vc.plot(kind='bar',ax=ax[i])\n    ax[i].set_title(col)","59efcbd2":"fig,ax=plt.subplots(nrows=1,ncols=3,figsize=(15,5))\nfor i,col in enumerate(['O_23','O_25','O_28']):\n    C1 = df_train[df_train.Target==1][col]\n    C0 = df_train[df_train.Target==0][col]\n    C1 = C1.fillna('Null')\n    C0 = C0.fillna('Null')\n    vc1 = C1.value_counts(sort=False)\n    vc0 = C0.value_counts(sort=False)\n    vc_concat = pd.concat([vc1,vc0],axis=1)\n    vc_concat.columns=['Fraud','Not Fraud']\n\n    #fig,ax = plt.subplots(figsize=(5,3))\n    vc_concat.plot(kind='bar',ax=ax[i])\n    ax[i].set_title(col)\n    ax[i].legend()","8dca9f73":"fig,ax=plt.subplots(nrows=2,ncols=2,figsize=(12,12))\nfor i,col in enumerate(['O_21','O_24','O_26','O_27']):\n    C = df_train[col]\n    C = C.fillna('Null')\n    vc = C.value_counts().head(10)\n\n    vc.plot(kind='bar',ax=ax[divmod(i,2)[0],divmod(i,2)[1]])\n    ax[divmod(i,2)[0],divmod(i,2)[1]].set_title(col)","b2516f64":"fig,ax=plt.subplots(nrows=1,ncols=2,figsize=(10,5))\nfor i,col in enumerate(['O_30','O_39']):\n    C1 = df_train[df_train.Target==1][col]\n    C0 = df_train[df_train.Target==0][col]\n    C1 = C1.fillna('Null')\n    C0 = C0.fillna('Null')\n    vc1 = C1.value_counts(sort=False)\n    vc0 = C0.value_counts(sort=False)\n    vc_concat = pd.concat([vc1,vc0],axis=1)\n    vc_concat.columns=['Fraud','Not Fraud']\n\n    #fig,ax = plt.subplots(figsize=(5,3))\n    vc_concat.plot(kind='bar',ax=ax[i])\n    ax[i].set_title(col)\n    ax[i].legend()","323b1ac8":"fig,ax=plt.subplots(nrows=2,ncols=2,figsize=(12,12))\nfor i,col in enumerate(['O_31','O_32','O_35','O_36']):\n    C = df_train[col]\n    C = C.fillna('Null')\n    vc = C.value_counts().head(10)\n\n    vc.plot(kind='bar',ax=ax[divmod(i,2)[0],divmod(i,2)[1]])\n    ax[divmod(i,2)[0],divmod(i,2)[1]].set_title(col)","2cccc917":"## C","ad470053":"### O_10,O_12,O_16,O_17","e7699ef5":"C_24 and C_25 are card company and card type. Maybe useful in modeling.","323dfed2":"All the data records are in 2016","eba12ea4":"Similarly, too many missing values. I prefer to drop them","a2ab8b00":"## Amount","baefce54":"1. A_0 and A_1 is very wired. They may function like the longtitude and latitude. \n2. Missing values are in the same row.\n3. For A_0, no ideas about how to filling the missing values (drop A_0 could be a choice, bin A_0 could be a choice). For A_1, fill all missing values with 87.0 could be a choice. \n4. Drop all rows with missing values in A_0 and A_1 could also be a choice","adf87c1d":"Drop them is preferred.","79530e9b":"## M","d11c6565":"# Data Visualization","327294b0":"### Month","07ae4c23":"### O_21,O_24,O_26,O_27","37757d01":"M_1 could be dropped. M_0 could be dropped or treat missing values as a category. Dropping it is preferred. Need experiments when modeling.","f26788ee":"For all categorical features,\n\nOnly Goods, C_23 - C_28 are reserved under 10% null-value threshold.\n\nA_0, A_1, E_0, E_1, M_0, M_1, C_0 - C_8, O_2, O_4, O_6-O_8, O_10 - O_17, O_19, O_21, O_23 - O_28, O_30 - O_32, O_35, O_36, O_39 are eliminated.\n\nThis threshold can be used to remove numeric features, but not feasible for removing categorical features.","b20cae78":"1. The amount range of fraud transcation is narrower than the range of normal transcation. It seems that extreme large amount is more likely to be a normal transcation. \n2. For both transcations, most of the amount are in range (0,1000).","ab4cdffd":"### C_24,C_25","fee1a1bf":"### O_2,O_6","93675d6f":"### Time of Day (Hour)","bc5081f0":"### C_23,C_26,C_27,C_28","89f3fa4c":"Drop them is preferred.","d7676737":"### C_0 - C_8","5bfa788f":"### O_23,O_25,O_28","072ca966":" C_0 - C_8 could be dropped or treat missing values as a category, but we still need to do experiments when modeling.","c16a72e4":"## A","714c6e09":"It seems like month is a useful feature","6bdabdaa":"## Goods","9fa37eaa":"Drop them is preferred","e1bf069e":"## Target","8f245d4c":"Similarly, too many missing values. I prefer to drop them","2801473f":"It seems that there are two peaks in the start and end of month. Day could be useful.","1d8315ae":"O_13 is the broswer type and O_14 is the resolution ratio. Similarly, too many missing values exist. I prefer to drop them.","85a8406c":"Similarly, too many missing values exist. I prefer to drop them.","3d22865f":"### O_4,O_7,O_8","b2e21686":"It seems that 30000 is an extreme value. In the histogram, I clip the value. Most of the transcation amount are in range (0,1000). Let's take a look at how the amount look like in fraud transcation.","873e3ddc":"### Day","91e7c2c9":"Extreme inbalanced ","a87cddd8":"Aggreate the two columns to create a new category feature [E0=E1, E0!=E1, Unknown] may make sense. The idea is to check whether the two email addresses are identical.","61e926eb":"### O_31,O_32,O_35,O_36","09824963":"### O_11,O_15","d756c0b8":"### O_13, O_14","ee68cc7f":"Day of Time (Hour) could be a useful feature. Two peaks at the start of the day and end of the day.","b88f6656":"## O","ea9a96db":"Drop them is preferred","f8da3e59":"# Overview","ef9cad2e":"### Year","94fd910f":"## E","5f1999b7":"### O_30,O_39","29952074":"Too many missing values in feature O_4, O_7, O_8. I prefer to drop them.","9b72cceb":"Bin features C_23,C_26,C_27,C_28 could be a choice","4cad7528":"## Timestamp"}}