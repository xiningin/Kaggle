{"cell_type":{"56dbc7ef":"code","f52cf45c":"code","179b3056":"code","724df9d4":"code","7844aab4":"code","2ab6cb84":"code","3b11b291":"code","74035918":"code","221d01fc":"code","927ed869":"code","50f43dda":"code","d28d6feb":"code","8c7a7e2d":"code","2f7de1b3":"code","a75a0e1b":"code","d7dc3759":"code","1961db06":"code","12ee00b7":"code","b064ec22":"code","c877f6b7":"code","d4487f4c":"code","52673f21":"code","291d01c9":"code","d64cb1f3":"code","4891509b":"code","283e1804":"code","a19d6283":"code","a8c76a73":"code","ba1955f0":"code","b7693f6c":"code","6c9f4456":"code","024fbbfd":"markdown","79cb0ccf":"markdown"},"source":{"56dbc7ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f52cf45c":"data=pd.read_csv('..\/input\/train_V2.csv')\ndata.head()","179b3056":"data.tail()","724df9d4":"## Id \n#search for duplicates\nany(data['Id'].duplicated())\n","7844aab4":"## Id \n#total no of players\nlen(data['Id'])","2ab6cb84":"## groupId\n#Check NaN\ndata[data['groupId'].isnull()]\n#No nan present","3b11b291":"## groupId\n#No. of people per group\ngroupIdData=pd.DataFrame(data['groupId'].value_counts())\ngroupIdData.reset_index(level=0, inplace=True)\ngroupIdData.columns = ['groupId', 'Members']\ngroupIdData.head()","74035918":"## groupId\n#Basic Stats on the members in each group\ngroupIdData['Members'].describe()","221d01fc":"## groupId\n# removing invalid groups where members more than 4 \/ could be just \"useless\" bots\ngroupIdDataValid=groupIdData[groupIdData['Members']<=4]\ngroupIdDataValid.head()","927ed869":"## groupId\n#Basic Stats on the members in each VALID group\ngroupIdDataValid['Members'].describe()","50f43dda":"## matchId \n# Total no. people in a match\nmatchIdData=pd.DataFrame(data['matchId'].value_counts())\nmatchIdData.reset_index(level=0, inplace=True)\nmatchIdData.columns = ['matchId', 'Players']\nmatchIdData.head()","d28d6feb":"## matchId \n# Total no. of matches\nlen(matchIdData)","8c7a7e2d":"## matchId\n#Basic Stats on the players in each match\nmatchIdData['Players'].describe()","2f7de1b3":"## matchId\n# removing invalid matches where players are equal to 10 or less\n# we need good comepition to identify most import fratures for a win \nmatchIdDataValid=matchIdData[matchIdData['Players']>10]\nmatchIdDataValid.tail()","a75a0e1b":"## matchId\n#Basic Stats on the members in each VALID group\nmatchIdDataValid['Players'].describe()","d7dc3759":"## Main DataSet\n# remove invalid groups from further analysis\ngroupIdDataValidList=list(groupIdDataValid['groupId'])\ndata=data[data['groupId'].isin(groupIdDataValidList)]\nmatchIdDataValidList=list(matchIdDataValid['matchId'])\ndata=data[data['matchId'].isin(matchIdDataValidList)]\nlen(data['Id'])","1961db06":"## assists\n#Basic Stats on the player assists in each match\ndata['assists'].describe()","12ee00b7":"## boosts\n#Basic Stats on the player boosts in each match\ndata['boosts'].describe()","b064ec22":"## damageDealt \n#Basic Stats on the player damage dealt in each match\ndata['damageDealt'].describe()","c877f6b7":"## Killing Stats\n# Basic Stats on player headshotKills, kills, roadKills and friendlyKills \nkilling=data[['kills','headshotKills','roadKills','teamKills']]\nkilling.describe(include='all')","d4487f4c":"## heals \n#Basic Stats on the player healing items used in each match\ndata['heals'].describe()","52673f21":"## revives\n# Basic Stats on the player reviving another player  in a match\ndata['revives'].describe()","291d01c9":"## weaponsAcquired\n# Basic Stats on the no. of weapon picked up a player\ndata['weaponsAcquired'].describe()","d64cb1f3":"## numGroups\n# Basic Stats on the no. of groups joining a game \ndata['numGroups'].describe()","4891509b":"## killPlace\n\n#Basic Stats on the player rank based on her\/his kills in the match\n# Just checking for a  min max limits else it is not useful\ndata['killPlace'].describe()","283e1804":"## Travel \n# Basic descriptive analysis of player travel distance on foot, vehicle and swim\n# All values are in 'm' \ndata['totalDistance']=data.walkDistance+data.rideDistance+data.swimDistance\ntravel=data[['walkDistance','rideDistance','swimDistance','totalDistance']]\ntravel.describe(include='all')","a19d6283":"## Elo Rating\n# basic description of Kill and win Elo rating of each players\nElo=data[['winPoints','killPoints']]\nElo.describe(include='all')\n\n### Does this makes sense as Elo rating evolves with time and same player can increase\/decrease so mean and all may not be meaningful \n","a8c76a73":"# Some rating for group participation\ngroupIdDataList=list(set(data['groupId']))\nfor group in groupIdDataList:\n    #if (i+1)%100 ==0:\n      #  print(i+1,'\/',len(groupIdDataList))\n        \n    data.loc[data['groupId']==group,'totalTeamsKills']=data[data['groupId']==group]['kills'].mean()\n    data.loc[data['groupId']==group,'totalTeamWinPoints']=data[data['groupId']==group]['winPoints'].mean()\n    data.loc[data['groupId']==group,'totalTeamKillPoints']=data[data['groupId']==group]['killPoints'].mean()\n","ba1955f0":"# Some elo based expectation caluation\nmatchIdDataList=list(set(data['matchId']))\n\nfor match in matchIdDataList:\n    matchData=data[data['matchId']== match]\n    \n    groupsMatchList=list(set(matchData['groupId']))\n    \n    for group in groupsMatchList:\n        data.loc[data['groupId']==group,'ExpectedWinPoints']=1\/(1+10**(-abs(matchData[matchData['groupId']==group]['totalTeamWinPoints'].mean()-matchData['totalTeamWinPoints'].mean())\/400))\n        data.loc[data['groupId']==group,'ExpectedKillPoints']=1\/(1+10**(-abs(matchData[matchData['groupId']==group]['totalTeamKillPoints'].mean()-matchData['totalTeamKillPoints'].mean())\/400))\n        ","b7693f6c":"dropCols = ['Id', 'groupId', 'matchId']\n# These have no outcome on the game;\n#'maxPlace'=='numGroups'\n#data=data.drop(['maxPlace'], axis=1)\nkeepCols = [col for col in data.columns if col not in dropCols]\ncorr = data[keepCols].corr()\nplt.figure(figsize=(15,10))\nplt.title(\"Correlation Heat Map of Data\")\nsns.heatmap(\n    corr,\n    xticklabels=corr.columns.values,\n    yticklabels=corr.columns.values,\n    annot=True,\n    cmap=\"RdYlGn\",\n)\nplt.show()","6c9f4456":"data.to_csv('..\/working\/cleanedTrain.csv')\nprint(os.listdir(\"..\/working\"))","024fbbfd":"**Bivariate Analysis**","79cb0ccf":"**Univariate Analysis**"}}