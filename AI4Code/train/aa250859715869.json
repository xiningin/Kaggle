{"cell_type":{"aaca8f3b":"code","52dd7122":"code","032661a5":"code","7ac899e4":"code","ac49af62":"code","bef38f12":"code","4d362845":"code","4fffaacc":"code","57651f1d":"code","9ff3daed":"code","1f28926a":"code","0b1fa54f":"code","26ce77de":"code","4f522f01":"code","e5c2cfb6":"code","62ba06eb":"code","bfdafc4b":"code","7289ef43":"code","f1fee884":"code","ffe22bea":"code","e9b122de":"code","eb9872f9":"code","7411b5de":"code","bf91cd12":"code","5170b13d":"code","00a8f785":"code","d3a2ceb7":"code","90574498":"code","0bb127a6":"code","44cd6edf":"code","393d7562":"code","d263ffa0":"code","0f7bd19f":"code","6efa394a":"code","09a482b5":"code","b67f3ef5":"code","07388e97":"code","723ed930":"code","77eabe84":"markdown","ef05f168":"markdown","8bb3f3a4":"markdown","6a5eab19":"markdown","837d4ebe":"markdown","b4a82129":"markdown","6f8ab4e6":"markdown","0223e2d8":"markdown","f106d5bc":"markdown","5f2e9cb1":"markdown","939043ed":"markdown","72ccf320":"markdown","dd7a2a14":"markdown","54aef477":"markdown","112d9503":"markdown","c4a5efbc":"markdown","a27e23d5":"markdown","54c9cc7e":"markdown","ecb0a6bc":"markdown","325fc382":"markdown","3738d926":"markdown","f99f7506":"markdown","2bd92659":"markdown","fc612272":"markdown","4b270faf":"markdown","60aff64f":"markdown","7e030d36":"markdown","df51d5eb":"markdown"},"source":{"aaca8f3b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","52dd7122":"#importing essential libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n#from sklearn.preprocessing import Standard\nimport os # accessing directory structure\nimport plotly\nimport plotly.express as px","032661a5":"#Enter your code here\n#movies =pd.read_csv('movie_plotly.csv')\nmovies = pd.read_csv(\"\/kaggle\/input\/MovieAssignmentData.csv\") \nmovies.head()","7ac899e4":"#movies.dtypes","ac49af62":"# Subtask 1.3 - Try adding multiple facets to the scatter plot, so that we could view three genres - \n#'Action','Drama','Biography' side by side\nimport plotly.express as px\nplt.figure(figsize=[300,320])\nfig = px.scatter(movies, x=\"Runtime\", y=\"IMDb_rating\", \n                 animation_group=\"genre_1\",size=\"actor_1_facebook_likes\",\n                 color=\"genre_1\",facet_col=\"genre_1\", \n                 hover_name=\"genre_1\",log_x=True, size_max=45, range_x=[100,150], range_y=[7.4,8.9])\nfig.show()","bef38f12":"#Sub task 1.1 marginal plots with an histogram\nimport plotly.express as px\nplt.figure(figsize=[100,100])\nmovies = pd.read_csv(\"\/kaggle\/input\/MovieAssignmentData.csv\")\nfig = px.scatter(movies, x=\"budget\", y=\"Gross\", color=\"genre_1\", marginal_y=\"rug\", marginal_x=\"histogram\")\nfig","4d362845":"#Subtask 1.1 - Try customizing your scatter plot with addition of marginal plots such as box plot or violin plot\nimport plotly.express as px\nplt.figure(figsize=[100,100])\nmovies = pd.read_csv(\"\/kaggle\/input\/MovieAssignmentData.csv\")\nfig = px.scatter(movies, x=\"budget\", y=\"Gross\", color=\"genre_1\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\")\nfig","4fffaacc":"#Subtask 1.4 - Try creating a bubble plot between IMDb rating and runtime and see if linking 'actor's Facebook likes' \n#to the size of the marker bring out any additional insight from the plot.","57651f1d":"#What is the insight that you see  to get by adding the third dimension of 'actor's Facebook likes'","9ff3daed":"#movies.head().dtypes","1f28926a":"import plotly.express as px\nplt.figure(figsize=[300,320])\nfig = px.scatter(movies, x=\"Runtime\", y=\"IMDb_rating\", \n                 animation_group=\"genre_1\",size=\"actor_1_facebook_likes\", \n                 color=\"genre_1\",facet_col=\"genre_1\", \n                 hover_name=\"genre_1\",log_x=True, size_max=45, range_x=[100,150], range_y=[7.4,8.9])\nfig.show()","0b1fa54f":"df = px.data.gapminder()\ndf.head()","26ce77de":"fig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", animation_frame=\"year\", animation_group=\"country\",\n           size=\"gdpPercap\", color=\"continent\", hover_name=\"country\", facet_col=\"continent\",\n           log_x=True, size_max=45, range_x=[100,1000000], range_y=[30,90])\nfig.show()","4f522f01":"df = px.data.tips()\ndf.head(5)","e5c2cfb6":"#Subtask 1- Create a comparison plot among different days of a week with respect to time of the day,\n#total bill value and tip amount.Also, try color coding the client based on gender","62ba06eb":"import plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", facet_row=\"time\", facet_col=\"day\", color=\"smoker\", trendline=\"ols\",\n          category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"time\": [\"Lunch\", \"Dinner\"]})\nfig.show()","bfdafc4b":"import plotly.graph_objects as go\n\ncategories = ['Bitterness','Froth','Price',\n              'Content', 'Mouthfeel']\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatterpolar(\n      r=[1, 5, 2, 2, 3],\n      theta=categories,\n      fill='toself',\n      name='Product A'\n))\nfig.add_trace(go.Scatterpolar(\n      r=[4, 3, 2.5, 1, 2],\n      theta=categories,\n      fill='toself',\n      name='Product B'\n))\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[0, 5]\n    )),\n  showlegend=False\n)\n\nfig.show()","7289ef43":"df = px.data.gapminder()\ndf","f1fee884":"import plotly.express as px\ndf = px.data.gapminder()\nfig = px.area(df, x=\"year\", y=\"pop\", color=\"continent\", line_group=\"country\")\nfig.show()","ffe22bea":"df = px.data.tips()\ndf","e9b122de":"import plotly.express as px\ndf = px.data.tips()\nfig = px.box(df, x=\"day\", y=\"total_bill\", color=\"sex\", notched=True)\nfig.show()","eb9872f9":"import plotly.express as px\ndf = px.data.tips()\nfig = px.violin(df, y=\"total_bill\", x=\"day\", color=\"sex\", box=True, points=\"all\", hover_data=df.columns)\nfig.show()","7411b5de":"df = px.data.tips()\ndf","bf91cd12":"#importing essential libraries\n \nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n#from sklearn.preprocessing import Standard\nimport os # accessing directory structure\nimport plotly\nimport plotly.express as px","5170b13d":"#Plotly Version\nplotly.__version__","00a8f785":"import sys; \nprint(sys.version)\nimport plotly\nprint(plotly.__version__)","d3a2ceb7":"#Install plotly\n!pip install plotly==4.8.1 --trusted-host pypi.org --trusted-host files.pythonhosted.org","90574498":"import sys; \nprint(sys.version)\nimport plotly\nprint(plotly.__version__)","0bb127a6":"import sys; \nprint(sys.version)\nimport plotly\nprint(plotly.__version__)","44cd6edf":"#Install plotly\n!pip install plotly==4.8.1 --trusted-host pypi.org --trusted-host files.pythonhosted.org","393d7562":"import sys; \nprint(sys.version)\nimport plotly\nprint(plotly.__version__)","d263ffa0":"import plotly.express as px\nimport plotly.graph_objects as py\nimport numpy as np\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.sunburst(df, path=['continent', 'country'], values='pop',\n                  color='gdpPercap', hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['gdpPercap'], weights=df['pop']))\nfig.show()","0f7bd19f":"px.data.gapminder().dtypes","6efa394a":"df=px.data.gapminder()\ndf","09a482b5":"import plotly.express as px\nplt.figure(figsize=[150,125])\ndf = px.data.gapminder()\nfig = px.choropleth(df, locations=\"country\", color=\"lifeExp\", hover_name=\"country\",animation_frame=\"country\", \n                    range_color=[20,80])\nfig.show()","b67f3ef5":"df = px.data.gapminder()\ndf","07388e97":"import plotly.express as px\nplt.figure(figsize=[300,320])\ndf = px.data.gapminder()\nfig = px.scatter_geo(df, locations=\"iso_alpha\", color=\"continent\", hover_name=\"country\", size=\"pop\",\n               animation_frame=\"year\", projection=\"natural earth\")\nfig.show()","723ed930":"df = px.data.gapminder()\ndf","77eabe84":"Subtask 3-\n\nImport Gapminder dataset using command -  df = px.data.gapminder()\n\nPlot an area line chart between 'population' and 'years', and colour code the line_group according to the continent.\n\nYour output should look like this:\n![image.png](attachment:image.png)","ef05f168":"Comparison plots are crucial to compare multiple variables with each other. Comparison plots are helpful to detect underlying patterns and relationship in-between the variables. ","8bb3f3a4":"Subtask - 5\nTry and create violin plot on the restaurant tips dataset between 'total_bill' vs 'day of the week' and color code it based on gender\nYour output should look like this -\n![image.png](attachment:image.png)","6a5eab19":"Is the distribution of data much more evident from this plot?","837d4ebe":"## 1. Checking the Relationship among variables - \n","b4a82129":" Subtask 1-\n    Create a comparison plot among different days of a week with respect to time of the day, total bill value and tip amount.    \n    Also, try color coding the client based on gender\n    \nYour output should look like this:\n![image.png](attachment:image.png)","6f8ab4e6":"## Radar Chart\/ Spyder Chart - \nRadar chart are best used for comparing two products with each other against multiple sub-categories\n\nMore reference on radar charts can be found at this link - https:\/\/plotly.com\/python\/radar-chart\/","0223e2d8":"## Practice exercises on Plotly - \nUntil now, we have looked at various kind of basic plots available with Matplotlib and Seaborn. \n\nWith Plotly we could take our visualizations to the next level via advance features that plotly offers namely:\n1. Option to dynamically choose the sub-category to plot the data which could come in handy to selectively choose and  compare multiple categories\/sub-categories plotted in the data\n2. Customizations such as facets, marginal visualizations\n3. Geo-political mapping\n4. Animation feature- which could be used to visualize the changes in the target data over a chosen continuous value such as GDP of a country vs time\n\nAs part of this exercise, we would have a look at multiple kinds of plots suitable for various types of data, and try to see what customizations\/features provided by Plotly could be leveraged to create a better infographic.\n\nGenerally, there are three different methods for visual data analysis:\n1. Relationship\n2. Comparison\n3. Composition\n\nAs part of this exercise, we will focus on plotly to explore various plots and their corresponding features for each category, starting with Relationship analysis plots.\n\n","f106d5bc":"## Comparison Plots","5f2e9cb1":"Subtask 2- \nPlot life expectancy across all countries from the gapminder dataset for the year 2007 on the Choropleth map, color code the data based on life expectancy\n\nYour output should look like this -\n![image.png](attachment:image.png)","939043ed":"## Area line chart\nLine charts and area line chart are suitable for time-based data plotting example - population increase over the years as seen in Gapminder's dataset is time-based data\n\nArea line charts are helpful to show categorically stacked data, for example, if we wanted to see the trend of population stack of various continents changing over-time we would use this plot\n\nNote: the lines are randomly placed, each filled area corresponds to one value of the column given by the line_group parameter.\n\nReference - https:\/\/plotly.com\/python\/filled-area-plots\/","72ccf320":"## Scatter plot - \nScatter plots are used to check the relationship between the variables and the distribution of the data.\nWith plotly, we have the option to add marginal plots such as histogram, box-plots next to the scatter plot in order to get a more summarized and comprehensive view of the data and to add to it we could dynamically choose the categories to plot from by selecting\/de-selecting categories from the legend section.","dd7a2a14":"Subtask 3.1 - Export the geopolitical plot into an interactive format\n\nIf you like some of these graphs and also feel excited about it, please feel free to share these plots on social media platforms, to showcase newly learned skill, this would also help you and your peers to learn from each other's expertise.\n","54aef477":"## Composition\nYou would be already aware of charts such as pie chart, which are suitable to check composition within the data, with plotly we can go a step ahead and build Sunburst charts;\n\nIntroducing Sunburst chart, using which we could create an interactive pie chart wherein the parents of the components can also be mapped, Sunburst chart is especially helpful when we have multiple children columns\/categories and even their corresponding parent categories\nYou can find more info on Sunburst chart here:\nhttps:\/\/plotly.com\/python\/sunburst-charts\/","112d9503":"Subtask 1.3 - \nTry adding multiple facets to the scatter plot, so that we could view three genres - 'Action','Drama','Biography' side by side\n\nYour output should look like this -\n![image.png](attachment:image.png)","c4a5efbc":"## Geo-political map plots \n\nWe can also have a look at the gapminders's data directly on world map, with plotly we have access to easy to use geo-political map plots - \nYou can see the syntax for map plots here - https:\/\/plotly.com\/python\/maps\/\n\nWith plotly, we can plot various type of geopolitical map such as:\n1. A Choropleth map -  is a type of thematic map in which areas are shaded or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each region, such as population density or per-capita income.\n2. A bubble map plot - is a variation of map plots, bubble map plots are especially helpful to plot time-based geopolitical data which closely focuses on a continuous variable that could be linked to the size of the marker.","a27e23d5":"Subtask 1 - Create a sunburst chart to plot world population from the gapminder's datset; map the population of the countries to there respective continent and color code the plot based on gdp per capita\n\nYour output should look like this -\n![image.png](attachment:image.png)","54c9cc7e":"Subtask 1.5 - Plot the GDP per capita vs life expectancy for all the countries grouped in facets according to their respective continent and add an animation frame to it according to the 'year'\n\n\nYour output should look like this -\n![image.png](attachment:image.png)","ecb0a6bc":"Task 1 -\nExplore the IMDb dataset used in the assignment, please find the csv file download link on the platform.\n\nPlot a scatter plot using plotly to see the relationship between the 'Budget' vs 'Gross values' according to different genres. \nUse plotly express to quickly configure the plot - https:\/\/plotly.com\/python\/plotly-express\/\n\nSubtasks for customizations - \n1. Subtask 1.1 - Try customizing your scatter plot with addition of marginal plots such as histogram, box plot or violin plot\n2. Subtask 1.2 - Try linking hover-over data and try exploring the option to choose the genres dynamically\n\nYour output should look like this -\n![image.png](attachment:image.png)\n","325fc382":"## Boxplot and Violin plot \nBoxplot and Violin plot are great plots to have a summarized view of the data, let us try and see how well they summarize the info on 'Restaurant tips dataset'\n\nTry loading the dataset using code: \ndf = px.data.tips()\n\nBoxplot reference - https:\/\/plotly.com\/python\/box-plots\/\nViolin plot reference - https:\/\/plotly.com\/python\/violin\/","3738d926":"Subtask - 3\nPlot the country-wise world population using a bubble-map plot and add 'year' as animation_variable to it.\nAlso, try adjusting the size of the marker by using argument 'size_max=50'\n\nFind reference for this task here-\nhttps:\/\/plotly.com\/python\/bubble-maps\/\n\nYour output should look like this -\n![image.png](attachment:image.png)","f99f7506":"1. Subtask 1- Plotting 'Many categories table chart'\n\nMany categories table chart is used to plot multiple plots side by side in a tabular format; this chart is especially useful when we have multiple variables\/dimensions along with multiple categorical values such the case in the below-mentioned dataset - where we have multiple categorical values - the day of the week, and numerous other variables (in this case - 6)\n\nPlotly has given access to various inbuilt-datasets in the package, 'restaurant tips dataset' is one such data set that could be imported using command px.data.tips(), go ahead explore this data. \n\nReference - https:\/\/plotly.com\/python\/plotly-express\/","2bd92659":"## Animating the data plots\nData animation against a continuous variable could be a helpful tool to add another dimension to the plot and see the values\/pattern change with respect to the animator's value. \n\nLet us now explore this feature of plotly through Gapminder's dataset on 'GDP per capita vs life expectancy' \n\nThis dataset covers the change in GDP per capita vs life expectancy over the years across different continents\n\nTo import this data simply use:\ndf = px.data.gapminder()\n\nHere is a reference on how to add animation to a scatter plot - https:\/\/plotly.com\/python\/plotly-express\/\n","fc612272":"Subtask 2- We have data from various brands of beer; Create a radar chart to compare them as shown in image below:\n1. Characterstics=      ['Bitterness','Froth','Price','Content', 'Mouthfeel']\n2. Product A_corresponding_values= [1, 4, 2, 2, 3]\n3. Product A_corresponding_values= [3, 2, 2.5, 1, 2]\n4. Product A_corresponding_values= [4, 3, 4, 3.5, 2]\n\n![image.png](attachment:image.png)","4b270faf":"## Violin plot\nViolin plots are similar to Boxplots, but they have an addition of a rotated kernel density plot on each side. Violin plots are particularly helpful in case we want to know the density of datapoints in a particular section.\n\nYou can find more info on Violin plots here - https:\/\/plotly.com\/python\/violin\/\n","60aff64f":"## Bubble plot\nIn the bubble plot, we add a third dimension of the data by linking it to the size of the marker; this could bring in additional insights from the data.\n\nSubtask 1.4 - Try creating a bubble plot between IMDb rating and runtime and see if linking 'actor's Facebook likes' to the size of the marker bring out any additional insight from the plot.\n\nYour output should look like this - \n![image.png](attachment:image.png)","7e030d36":"Subtask 4 - Create box plot on resturant tips dataset between the variables 'total bill' vs 'day of the week' and color code based on gender\n![image.png](attachment:image.png)","df51d5eb":"An essential aspect of plotly is to export the visualizations in a interactive format i.e. the HTML format, to export any figure created by plotly into HTML format add the command - 'fig.write_html(\"path\/to\/file.html\")' within the same cell. \n\nReference - https:\/\/plotly.com\/python\/interactive-html-export\/\n\nTo export the images in static format such as '.PNG' use the 'save as '.PNG' option available on the upper right end of the plot or use this link for command reference - https:\/\/plotly.com\/python\/static-image-export\/\n\n"}}