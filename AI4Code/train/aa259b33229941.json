{"cell_type":{"5528fd4d":"code","2331d4b5":"code","049e7a25":"code","8cc76982":"code","3857df64":"code","b7696177":"code","640f57f8":"code","e64ae4a9":"code","c9868551":"code","cfdc17db":"code","a1fa4793":"code","6f9eacd6":"code","8a4d7bac":"code","79f58362":"code","219bba42":"code","1985c665":"code","b815b2ec":"code","3484e0db":"code","6a6fdc16":"code","e20a6ea7":"code","96f56ccf":"code","a2d4a792":"code","9c95ac24":"code","a973645f":"code","789c0c5e":"code","d4b43467":"code","c6618f1b":"code","7ef36d4f":"code","6d3fcd0b":"code","182623dc":"code","6a90ab51":"code","6a1c419b":"code","bc56e270":"code","b6a8c686":"code","4ee96ecc":"code","3299c44a":"code","68ef5b69":"code","a2abdcf0":"code","fd26db29":"code","8dcfcb55":"code","7502574c":"code","dd512d47":"code","14b89703":"code","f196fcab":"code","2b2f2794":"code","c56e23ba":"code","ab79a1fe":"code","107f7f11":"code","01cfa7d5":"code","64b3d7c4":"code","81712bc3":"code","a70f7464":"code","3676380f":"code","83dcd900":"code","86882c0b":"markdown","51895326":"markdown","96a7456f":"markdown","267fb4b4":"markdown","e3afbe2c":"markdown","12d8012e":"markdown","15e17b75":"markdown","4303b84c":"markdown","766afba9":"markdown","42164b73":"markdown","ee5b8349":"markdown","adef2231":"markdown","c536e5fb":"markdown","6ef4ab5d":"markdown","5fac5546":"markdown","c3dacccf":"markdown","4d0d05dd":"markdown","f2972b7d":"markdown","e270fa55":"markdown","edecea3b":"markdown","e7e5c759":"markdown","a972f796":"markdown","e5d53359":"markdown","c7f0a10d":"markdown","2e65addf":"markdown","538373c2":"markdown","e5d06f49":"markdown","2cdfc8a4":"markdown","2ab734a8":"markdown","62d4e969":"markdown","20e5b3c5":"markdown","09ff3836":"markdown","fdc656d5":"markdown","0727b107":"markdown","271c4270":"markdown","05fc795f":"markdown","aeef6598":"markdown","709260d3":"markdown","8980c77a":"markdown","f15b9be5":"markdown","3400321f":"markdown"},"source":{"5528fd4d":"# import all packages and set plots to be embedded inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\n%matplotlib inline","2331d4b5":"# load in the dataset into a pandas dataframe\nloans = pd.read_csv(\"..\/input\/prosperloandata2\/prosperLoanData.csv\")","049e7a25":"loans.shape\n","8cc76982":"loans.head()\n","3857df64":"df_loans = loans.loc[:, ['ListingCreationDate', 'Term', 'LoanStatus', 'ClosedDate', 'BorrowerAPR',\n                         'BorrowerRate', 'LenderYield', 'ProsperRating (Alpha)', 'ProsperScore', 'ListingCategory (numeric)',\n                         'BorrowerState', 'Occupation', 'EmploymentStatus', 'AmountDelinquent',\n                         'IncomeRange', 'StatedMonthlyIncome',\n                         'LoanCurrentDaysDelinquent',\n                         'LoanOriginalAmount', 'LoanOriginationDate', \n                         'MonthlyLoanPayment', 'LP_ServiceFees', 'Investors']]\ndf_loans.info()","b7696177":"df_loans.duplicated().sum()\n","640f57f8":"df_loans.isnull().sum()\n","e64ae4a9":"df_loans.head()","c9868551":"#Adjust Datetime columns\ndf_loans['ListingCreationDate'] = pd.to_datetime(df_loans['ListingCreationDate']) \ndf_loans['ClosedDate'] = pd.to_datetime(df_loans['ClosedDate'])\ndf_loans['LoanOriginationDate'] = pd.to_datetime(df_loans['LoanOriginationDate'])\ndf_loans.info()","cfdc17db":"# Convert ProsperRating & IncomeRange to ordinal categorical \nordinal_var_dict = {'ProsperRating (Alpha)': ['N\/A','HR','E','D','C', 'B', 'A', 'AA'],\n                    'IncomeRange':['$0','$1-24,999','$25,000-49,999','$50,000-74,999','$75,000-99,999','$100,000+']}\nfor var in ordinal_var_dict:\n    ordered_var = pd.api.types.CategoricalDtype(ordered = True, categories = ordinal_var_dict[var])\n    df_loans[var] = df_loans[var].astype(ordered_var)","a1fa4793":"df_loans['ProsperRating (Alpha)'].value_counts()","6f9eacd6":"df_loans['IncomeRange'].value_counts()","8a4d7bac":"#Adjust datatype for all other categorical columns\ndf_loans['Occupation'] = df_loans['Occupation'].astype('category')\ndf_loans['BorrowerState'] = df_loans['BorrowerState'].astype('category')\ndf_loans['LoanStatus'] = df_loans['LoanStatus'].astype('category')\ndf_loans['ListingCategory (numeric)'] = df_loans['ListingCategory (numeric)'].astype('category')\ndf_loans['EmploymentStatus'] = df_loans['EmploymentStatus'].astype('category')\n","79f58362":"df_loans['Occupation'].value_counts()","219bba42":"df_loans.shape","1985c665":"df_loans.info()","b815b2ec":"# Distribution of Borrower APR in percentage \nbinsize = 2\nborrowe_APR_percentage = df_loans['BorrowerAPR']*100\nbins = np.arange(df_loans['BorrowerAPR'].min()*100, df_loans['BorrowerAPR'].max()*100+binsize, binsize)\n\nplt.figure(figsize=[10, 5])\nplt.hist(x = borrowe_APR_percentage, bins = bins)\nplt.title('Borrower APR Distribution (%)')\nplt.xlabel('Borrower Annual Percentage Rate (%)')\nplt.ylabel('Count')\nplt.xticks([5, 10, 15, 20, 25, 30, 35, 40], ['5','10', '15', '20', '25', '30', '35', '40'])\nplt.show()\n","3484e0db":"#Prosper Score Distribution (range form 1 to 10)\nbase_color = sb.color_palette()[0]\nsb.countplot(data=df_loans, x= 'ProsperScore', color=base_color)\nplt.title('Prosper Score Distribution')\nplt.xlabel('Prosper Score');","6a6fdc16":"# Loan Original Amount Distribution\nbinsize = 1000\nbins = np.arange(df_loans['LoanOriginalAmount'].min(), df_loans['LoanOriginalAmount'].max()+binsize, binsize)\n\nplt.figure(figsize=[10, 8])\nplt.hist(data = df_loans, x = 'LoanOriginalAmount', bins = bins)\nplt.title('Loan Original Amount Distribution')\nplt.xlabel('Loan Original Amount in $')\nplt.ylabel('Count')\nplt.show()","e20a6ea7":"# Putting Loan Original Amount in a log-scale\nlog_binsize = 0.025\nbins = 10 ** np.arange(3, np.log10(df_loans['LoanOriginalAmount'].max())+log_binsize, log_binsize)\n\nplt.figure(figsize=[8, 5])\nplt.hist(data = df_loans, x = 'LoanOriginalAmount', bins = bins)\nplt.title('Loan Original Amount distribution with Log scale')\nplt.xscale('log')\nplt.xticks([500, 1e3, 2e3,3e3, 5e3, 1e4, 2e4, 3e4, 5e4], ['500', '1k', '2k', '3k', '5k', '10k', '20k', '30k', '50K'])\nplt.xlabel('Loan Original Amount ($)')\nplt.ylabel('count')\nplt.show()","96f56ccf":"#Checking loans' term (expressed in months)\ndf_loans['Term'].value_counts()","a2d4a792":"base_color = sb.color_palette()[0]\nsb.countplot(data=df_loans,x= 'Term',color=base_color);\nplt.title('Terms of loan (Months)')\nplt.xlabel('Term (Months)');","9c95ac24":"#Lender Yield Distribution\nbinsize = 0.01\nbins = np.arange(df_loans['LenderYield'].min(), df_loans['LenderYield'].max()+binsize, binsize)\n\nplt.figure(figsize=[8, 5])\nplt.hist(data = df_loans, x = 'LenderYield', bins = bins)\nplt.xlabel('Lender Yield')\nplt.title('Lender Yield Distribution')\nplt.ylabel('count')\nplt.show()","a973645f":"# Service Fees Distribution\nbinsize = 50\nbins = np.arange(df_loans['LP_ServiceFees'].min(), df_loans['LP_ServiceFees'].max()+binsize, binsize)\n\nplt.figure(figsize=[10, 5])\nplt.hist(data = df_loans, x = 'LP_ServiceFees', bins = bins)\nplt.xlabel('Service Fees $')\nplt.title('Service Fees Distribution')\nplt.ylabel('count')\nplt.show()","789c0c5e":"#Amount Delinquent Distribution\nbinsize = 10000\nbins = np.arange(df_loans['AmountDelinquent'].min(), df_loans['AmountDelinquent'].max()+binsize, binsize)\n\nplt.figure(figsize=[8, 5])\nplt.hist(data = df_loans[df_loans['AmountDelinquent']>0], x = 'AmountDelinquent', bins = bins)\nplt.title('Amount Delinquent Distribution')\nplt.xlabel('Amount Delinquent')\nplt.ylabel('count')\nplt.show()","d4b43467":"df_loans['AmountDelinquent'].max()","c6618f1b":"df_loans['AmountDelinquent'].min()","7ef36d4f":"df_loans['AmountDelinquent'].value_counts()","6d3fcd0b":"#Amount Delinquent Distribution on a log scale\n\nlog_binsize = 0.1\nbins = 10 ** np.arange(0,5, log_binsize)\n\nplt.figure(figsize=[8, 5])\nplt.hist(data = df_loans, x = 'AmountDelinquent', bins = bins)\nplt.title('Amount Delinquent Distribution on Log-scale')\nplt.xscale('log')\nplt.xticks([1e1, 1e2, 1e3, 2e4, 1e5], ['10', '100', '1k', '10k', '100k'])\nplt.xlabel('Amount Delinquent ($)')\nplt.ylabel('count')\nplt.show()","182623dc":"# Loan Current Days Delinquent Distribution\nbinsize = 100\nbins = np.arange(0, df_loans['LoanCurrentDaysDelinquent'].max()+binsize, binsize)\n\nplt.figure(figsize=[12, 5])\nplt.hist(data = df_loans[df_loans['LoanCurrentDaysDelinquent']>0], x = 'LoanCurrentDaysDelinquent', bins = bins)\nplt.title('Loan Current Days Delinquent')\nplt.xlabel('Loan Current Days Delinquent (Days)')\nplt.ylabel('Count')\nplt.show()","6a90ab51":"#Number of Investors Distrobution\nbinsize = 1\nbins = np.arange(df_loans['Investors'].min(), df_loans['Investors'].max()+binsize, binsize)\n\n#plt.figure(figsize=[8, 5])\nplt.hist(data = df_loans[df_loans['Investors'] > 0], x = 'Investors', bins = bins)\nplt.xlabel('Number of Investors')\nplt.title('Number of Investors Distrobution')\nplt.ylabel('count')\nplt.show()","6a1c419b":"#Number of Investors Distrobution on log scale for all loans\nlog_binsize = 0.05\nbins = 10 ** np.arange(0, 5, log_binsize)\n\nplt.figure(figsize=[10, 8])\nplt.hist(data = df_loans, x = 'Investors', bins = bins)\nplt.title('Investors on log scale')\nplt.xscale('log')\nplt.xticks([1e1, 1e2, 1e3], ['10', '100', '1000'])\nplt.xlabel('Investors')\nplt.ylabel('count')\nplt.show()\n","bc56e270":"#We can plot the same for only loans with more than 1 investor\nlog_binsize = 0.05\nbins = 10 ** np.arange(0.1, 3.5, log_binsize)\n\nplt.figure(figsize=[8, 5])\nplt.hist(data = df_loans, x = 'Investors', bins = bins)\nplt.title('Investers on log scale (more than 1 investor)')\nplt.xscale('log')\nplt.xticks([1e1, 1e2, 1e3], ['10', '100', '1000'])\nplt.xlabel('Investors')\nplt.ylabel('Count')\nplt.show()","b6a8c686":"# Monthly loan payment distribution\nbinsize = 50\nbins = np.arange(0, df_loans['MonthlyLoanPayment'].max()+binsize, binsize)\n\nplt.figure(figsize=[8, 5])\nplt.hist(data = df_loans, x = 'MonthlyLoanPayment', bins = bins)\nplt.xlabel('Loan Monthly Payment ($)')\nplt.ylabel('count')\nplt.title('Monthly loan payment distribution')\nplt.show()\n","4ee96ecc":"# Using log-scale\nlog_binsize = 0.025\nbins = 10 ** np.arange(1, np.log10(df_loans['MonthlyLoanPayment'].max())+log_binsize, log_binsize)\n\nplt.figure(figsize=[10, 5])\nplt.hist(data = df_loans, x = 'MonthlyLoanPayment', bins = bins)\nplt.xscale('log')\nplt.xticks([10, 20, 50, 100, 200, 500, 1e3, 2e3], ['10', '20','50', '100', '200', '500', '1000', '2000'])\nplt.xlabel('Monthly Loan Payment ($)')\nplt.ylabel('count')\nplt.title('Monthly Loan Payment on log scale')\nplt.show()","3299c44a":"# Prosper Rating Distribution\n\nplt.figure(figsize=[10, 6]);\nsb.countplot(data=df_loans,x='ProsperRating (Alpha)',color=base_color);\nplt.title('Prosper Rating Distribution');","68ef5b69":"#Borrower State Distrobution\ncat_order = df_loans['BorrowerState'].value_counts().index\nplt.figure(figsize=[15, 10])\nsb.countplot(data=df_loans,x='BorrowerState',color=base_color, order=cat_order);\nplt.title('Borrower State Distribution');\nplt.xticks(rotation=90);","a2abdcf0":"#Borrower Income Range Status Distrobution\nplt.figure(figsize=[10, 5])\nsb.countplot(data=df_loans,x='IncomeRange',color=base_color);\nplt.title('Borrower Income Range Distribution')","fd26db29":"# Loan Origination by Year\nplt.figure(figsize=[10, 5])\nsb.countplot(data=df_loans,x=df_loans['LoanOriginationDate'].dt.year,color=base_color)\nplt.title('Loans Originated by Year')\nplt.xlabel('Loan Origination Year');","8dcfcb55":"# Listing Creation  by Year\nplt.figure(figsize=[10, 5])\nsb.countplot(data=df_loans,x=df_loans['ListingCreationDate'].dt.year,color=base_color)\nplt.title('Listing Creation by Year')\nplt.xlabel('Listing Creation Year');","7502574c":"df_loans.info()","dd512d47":"numeric_variables = ['Term', 'BorrowerAPR', 'BorrowerRate', 'LenderYield', 'ProsperScore', \n                     'StatedMonthlyIncome', 'LoanOriginalAmount', 'MonthlyLoanPayment', 'LP_ServiceFees', 'Investors',\n                    'AmountDelinquent','LoanCurrentDaysDelinquent']","14b89703":"categorical_variables = ['LoanStatus', 'ProsperRating (Alpha)', 'ListingCategory (numeric)', 'BorrowerState', 'Occupation', \n                         'EmploymentStatus', 'IncomeRange']","f196fcab":"# Correlation matrix for all numeric variables\nplt.figure(figsize = [12, 8])\nsb.heatmap(df_loans[numeric_variables].corr(), annot = True, fmt = '.3f',\n           cmap = 'vlag_r', center = 0)\nplt.title('Correlation Matrix') \nplt.show()","2b2f2794":"# plot matrix: sample 500 loans so that plots are clearer and\n# they render faster\nsamples = np.random.choice(df_loans.shape[0], 500, replace = False)\ndf_loans_samp = df_loans.loc[samples,:]\n\ng = sb.PairGrid(data = df_loans_samp, vars = numeric_variables)\ng = g.map_diag(plt.hist, bins = 20);\ng.map_offdiag(plt.scatter);","c56e23ba":"# Checking the relation between LoanOriginalAmount and BorrowerAPR\n\nplt.figure(figsize = [15, 6]) \nplt.subplot(1, 2, 1)\nplt.scatter(data = df_loans, x = 'LoanOriginalAmount', y = 'BorrowerAPR',  alpha =  0.01)\nplt.title('Scatter Plot of LoanOriginalAmount and BorrowerAPR')\nplt.xlabel('LoanOriginalAmount')\nplt.ylabel('BorrowerAPR');\nplt.colorbar();\n\nplt.subplot(1, 2, 2)\nbins_x = np.arange(df_loans['LoanOriginalAmount'].min(), df_loans['LoanOriginalAmount'].max()+1000, 1000)\nbins_y = np.arange(df_loans['BorrowerAPR'].min(), df_loans['BorrowerAPR'].max()+0.1, 0.1)\nplt.hist2d(data = df_loans, x = 'LoanOriginalAmount', y = 'BorrowerAPR', bins = [bins_x, bins_y], \n               cmap = 'viridis_r', cmin = 0.5)\nplt.title('HeatMap of LoanOriginalAmount and BorrowerAPR')\nplt.xlabel('LoanOriginalAmount')\nplt.ylabel('BorrowerAPR');","ab79a1fe":"# Borrower APR vs Status of Loan \nplt.figure(figsize = [20, 5])\nsb.boxplot(data=df_loans,y='BorrowerAPR',x='LoanStatus',color=base_color);\nplt.title('BorrowerAPR & LoanStatus');\nplt.ylabel('Borrower APR');\nplt.xlabel('Loan Status');\nplt.xticks(rotation=15);","107f7f11":"# Borrower APR vs Employment status\nplt.figure(figsize = [20, 5])\n\nsb.boxplot(data=df_loans,y='BorrowerAPR',x='EmploymentStatus',color=base_color);\nplt.title('BorrowerAPR & EmploymentStatus');\nplt.ylabel('Borrower APR');\nplt.xlabel('Employment Status');","01cfa7d5":"plt.figure(figsize = [15, 5])\nsb.violinplot(data=df_loans,x='ListingCategory (numeric)', y='BorrowerAPR',color=base_color);\nplt.title('BorrowerAPR for different Loan Gategories')\nplt.xlabel('Loan Category ');\nplt.ylabel('BorrowerAPR');","64b3d7c4":"# LenderYield vs Borrower APR  vs ProsperRating\nplt.figure(figsize = [10, 5])\nplt.scatter(data=df_loans,x='LenderYield',y = 'BorrowerAPR',c='ProsperScore',cmap = 'viridis_r')\nplt.colorbar(label = 'ProsperScore');\nplt.title('LenderYield vs Borrower APR  vs ProsperRating');\nplt.xlabel('Lender Yield');\nplt.ylabel('Borrower APR');\n","81712bc3":"# LoanStatus Vs BorrowerAPR in each EmploymentStatus\nplt.figure(figsize=[20,12])\nsb.boxplot(x=\"LoanStatus\", y=\"BorrowerAPR\", hue=\"EmploymentStatus\", data=df_loans, palette=\"RdYlGn_r\");\nplt.title('BorrowerAPR Vs LoanStatus in each EmploymentStatus');\nplt.xlabel('Loan Status');\nplt.ylabel('BorrowerAPR');\nplt.xticks(rotation = 15);\n","a70f7464":"df_loans['LoanStatus'].value_counts()","3676380f":"# EmploymentStatus vs BorrowerAPR in each LoanStatus\nfig = plt.figure(figsize = [20,8])\nax = sb.pointplot(data = df_loans, x = 'LoanStatus', y = 'BorrowerAPR', hue = 'EmploymentStatus', linestyles = \"\",\n                  dodge = 0.5, palette = 'inferno_r')\nplt.title('EmploymentStatus vs BorrowerAPR in each LoanStatus')\nplt.ylabel('BorrowerAPR')\nplt.xticks(rotation=15)\nplt.legend(ncol=2)\nplt.show();","83dcd900":"# BorrowerAPR vs. CreditScoreRangeUpper & CreditScoreRangeUpper\nplt.figure(figsize = [15, 5]) \ncm = plt.cm.get_cmap('CMRmap_r')\nplt.scatter(data=df_loans[df_loans['StatedMonthlyIncome']<20000],x='ProsperScore',y='BorrowerAPR',c='LoanOriginalAmount',cmap=cm) \nplt.colorbar(label = 'LoanOriginalAmount')\nplt.title('BorrowerAPR vs. ProsperScore using LoanOriginalAmount')\nplt.xlabel('ProsperScore')\nplt.ylabel('BorrowerAPR');","86882c0b":"### Talk about some of the relationships you observed in this part of the investigation. How did the feature(s) of interest vary with other features in the dataset?\n\n> From the relation between EmploymentStatus and BorrowerAPR: \n- People who are not employed receive high interest rate compared to the employed\n- The higher the income, the lower the interest rate\n\n> Original loan amount was lowest just after 2008 financial crisis, after that the amount is increasing over the year. From 2013 to 2014 , amount gets really big. \n\n### Did you observe any interesting relationships between the other features (not the main feature(s) of interest)?\n\n>The loan status for the past dues have a high interest rate. <br>\nNumber of Defaulted loans for Self-employed people are larger than those for Not Employed\n\n","51895326":"> Strong positive correlations between Lender yield and Borrower APR. Prosper Score and Prosper Rating are also positive correlation. Credit Score upper range has also some weak +ve correlation with prosper score.\n\n> Negative correlation between prosper score & APR, and prosper score & Lender yield. Negative correlation between prosper ratings & APR, and prosper score & Lender yield.\n","96a7456f":"* It is obvious that most amounts delinquent falls around $1000 and it is normally distibuted\n","267fb4b4":"## Bivariate Exploration\n","e3afbe2c":"### Discuss the distribution(s) of your variable(s) of interest. Were there any unusual points? Did you need to perform any transformations?\n\n> Loan Original Amount distribution is right skewed and I performed log transformation on it to interpret the visualization. I also did the log transformation to these variables: Monthly Loan Payment, Investors and Amount Delinquent.\n<br> <br>\n> Year 2013 had the highest loan creation. California (CA) had the biggest number of loans. Service fees was left skewed but I couldn't do the log scale because of negative values.\n\n### Of the features you investigated, were there any unusual distributions? Did you perform any operations on the data to tidy, adjust, or change the form of the data? If so, why did you do this?\n\n> Due to the high difference between AmountDelinquent values the distribution was really on large scale and I couldn't see it clear so I did the log transformation. <br>\n> Some features had long-tailed, skewed distributions, these were checked on a log scale to show the hidden distribution in some areas.","12d8012e":"## Multivariate Exploration","15e17b75":"> To investigate variables in pairs, we need to identify numeric and categorical features in order to select the proper chart type.","4303b84c":"> Out of the 113937 rows and 81 columns, I am going to select only the columns that are related to our exploration of the loan. I will chose about 15 columns to investigate. These columns are related to the amount of loan, dates, rates and other charactrestics about the borrowers.","766afba9":"* There's a long tail in the distribution, so let's put it on a log scale instead","42164b73":"* We can see that people with income range of $25,000-49,999 are the ones who are taking loans most\n\n","ee5b8349":"* The is normally distributed with the peak between 100  and 200 and some increase at the 500\n","adef2231":"* The same observation as the previous chart which is expected because we normally create the list every year.\n","c536e5fb":"### Talk about some of the relationships you observed in this part of the investigation. Were there features that strengthened each other in terms of looking at your feature(s) of interest?\n\n>Relation between EmploymentStatus, LoanStatus and BorrowerAPR: <br>\n* We see that Employed people are diverse regarding the Loan Status and BorrowerAPR as they have sometimes high borrower rate like in chargeoff and sometimes low borrower rate like in the past dues.<br>\n* Employees with Full-Time and part-time tend to have lower BorrowerAPR across all loan status categories.<br>\n* Employees with Not-Employed & Self-Employed tend to have higher BorrowerAPR in some areas like the past dues but lower BorrowerAPR in the current and completed status.<br>\n<br><br>\n\n\n### Were there any interesting or surprising interactions between features?\n\n>Scatter plot and Heatmap were also created to find out that ProsperScore and BorrowerAPR were negatively correlated as higher the prosper score lower will be the risk attached hence lower will be the APR and that further lowers down the yield.\n","6ef4ab5d":"> we see that most of the values are in the 3 years (36 months)","5fac5546":"> we see that Lender Yield is nomarlly distributed with most of the values between 0.1 and 0.2 and we notice an increase at 0.3","c3dacccf":"* We can see that there is a drop in 2009 in loans but it started to increase gradually and reached it's peak at 2013","4d0d05dd":"* We can see that California (CA), Texas (TX) and New York (NY) have the 3 biggest numbers of loans originated in that period of time.","f2972b7d":"## Univariate Exploration\nI will start with the most important features: Borrower APR , Prosper Score and Loan Original Amount","e270fa55":"* On BorrowerAPR vs LoanStatus graph we notice that Current and completed loans have lower rate than the past-due loans and have lower mean.\n* On  Borrower APR vs Employment status graph we notice that Employed people have lower IQR than not employed","edecea3b":"\n> Prosper Scores are almost normally distributed and values 4, 6 and 8 are the most common.\n","e7e5c759":"* We can see that most of the loans with higher amounts (>$20,000) are taken by people with higher prosper score (10 and above)","a972f796":"> We see that service fees are left skewed but we can't put it in the log scale because of the negative values.","e5d53359":"> Most of loans has around 100 investors","c7f0a10d":"> At the end of your report, make sure that you export the notebook as an\nhtml file from the `File > Download as... > HTML` menu. Make sure you keep\ntrack of where the exported file goes, so you can put it in the same folder\nas this notebook for project submission. Also, make sure you remove all of\nthe quote-formatted guide notes like this one before you finish your report!","2e65addf":"* Most borrowers get Prosper Rating of 'C'","538373c2":"### What is the structure of your dataset?\n\n> The dataset contains 113937 rows and 22 columns. Most of the columns are numeric but we also have categorical variables(both ordinal and nominal) and datetime variables.\n\n### What is\/are the main feature(s) of interest in your dataset?\nI will work with Borrower Rate, Borrower APR, Prosper Score, Credit Score, Original Loan Amount, Monthly Payment, Borrower Occupation, Borrower State and others if needed.\n> There are some important features to look at including:\n* BorrowerAPR: The Borrower's Annual Percentage Rate (APR) for the loan.\n* ProsperScore: A custom risk score built using historical Prosper data. The score ranges from 1-10, with 10 being the best, or * lowest risk score. Applicable for loans originated after July 2009.\n* LoanOriginationDate: The date the loan was originated.\n* LenderYield: The Lender yield on the loan. Lender yield is equal to the interest rate on the loan less the servicing fee.\n\n### What features in the dataset do you think will help support your investigation into your feature(s) of interest?\n\n> I think that *Loan Status* and *Employment Status* will have a strong impact on loan and the features we are trying to explor. Also the *Monthly Income* will play a role here and the *Term* (lenght of the loan) may have an effect. SO I will try to invistigate these more.\n","e5d06f49":"* Number of investors (for data with number of inestoers more than 1) is almost normally distributed around 100 and that was expected from the previce one","2cdfc8a4":"# Prosper Loan Data Visualization (Data Analysis Easy Steps )\n## by Omar Elsherif\n\n## Preliminary Wrangling\n\n> This data set contains 113,937 loans with 81 variables on each loan, including loan amount, borrower rate (or interest rate), current loan status, borrower income, and many others.<br>\n> Data dictionary to understand the variables more form this link: https:\/\/docs.google.com\/spreadsheets\/d\/1gDyi_L4UvIrLTEC6Wri5nbaMmkGmLQBk-Yx3z0XDEtI\/edit#gid=0\n<br> <br>\nWe are trying to answer these questions\n  1. What factors affect a loan\u2019s outcome status?\n  2. What affects the borrower\u2019s APR or interest rate?\n  3. Are there differences between loans depending on how large the original loan amount was?","2ab734a8":"* Past Due loans generally have higher interest rates in all employment statuses\n","62d4e969":"* So we can see that in years terms can be either 1 year (12 month) or 3 years (36 months) or 5 years (60 months)","20e5b3c5":"> Most of delinquent are on the first 500 days and the distribution is bimodal.","09ff3836":"* For each category of loan status, the lowest APR is for Employed and Full-time. Whereas highest APR is for Not employed.\n* Most of the high BorrowerAPR are on the chargeoff, completed and current.\n* We notice some outliers in chargeoff and defaulted loan status.","fdc656d5":"* We can't see this distribution well so let's try log scale as it may work better","0727b107":"high-level overview of data shape and composition\n","271c4270":"> We see that the Borrower APR is normally distrubuted with the peak between 15 and 20 percent in addition we have some increase in the 35 percent","05fc795f":"> We can see that the relationship between all variables are clear. Borrower APR and Lender yield are directly positively correlated as when the interest borrowers pays more , the lender yield will increase. Higher the prosper score lower will lower borrower apr and then the lender yield will also be lower. ","aeef6598":"* We can see that Amount Delinquent is right skewed and we can't see insights from if so let's try log scale\n* Also, most of the loans do not have delinquence as we saw that at 0 we have 89818. It is better checking this in log-scale\n","709260d3":"* We see that the distribution is right skewed with a long tail so I will try it in the log scale to see it more better","8980c77a":"* We see negative relationship between loan original amount and borrower apr, means large loans have relatively less annual interest rate from the borrower.","f15b9be5":"* We can see that Cosmetic Procedure are given higer interest rates with data distributed well in it.\n<br>\n* Listing Category: The category of the listing that the borrower selected when posting their listing: 0 - Not Available, 1 - Debt Consolidation, 2 - Home Improvement, 3 - Business, 4 - Personal Loan, 5 - Student Use, 6 - Auto, 7- Other, 8 - Baby&Adoption, 9 - Boat, 10 - Cosmetic Procedure, 11 - Engagement Ring, 12 - Green Loans, 13 - Household Expenses, 14 - Large Purchases, 15 - Medical\/Dental, 16 - Motorcycle, 17 - RV, 18 - Taxes, 19 - Vacation, 20 - Wedding Loans \n<br><br> \ncheck data dict to see listing category more clear (https:\/\/docs.google.com\/spreadsheets\/d\/1gDyi_L4UvIrLTEC6Wri5nbaMmkGmLQBk-Yx3z0XDEtI\/edit#gid=0)","3400321f":"* The highest value for original loan amount is between 3K and 5K. Also I notice increase in amount between 10K and 20K\n"}}