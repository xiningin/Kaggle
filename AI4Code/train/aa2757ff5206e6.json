{"cell_type":{"09bd2f5f":"code","fdcefc14":"code","9f5f4f88":"code","34925d3c":"code","91f9715c":"code","dc5bb91f":"code","d3eda410":"code","2c71661a":"code","6d6dc49c":"code","27194f20":"code","4f929458":"code","4fc2391b":"code","fd562d7c":"code","d0f7dc4d":"code","dbc8ad19":"code","cacba742":"code","c2aa159d":"code","59e3e1f0":"markdown","1bb50cd7":"markdown","be192bf7":"markdown","65780828":"markdown","42e29525":"markdown","2e29883a":"markdown","9f84366f":"markdown","f496f5d2":"markdown","6d5ec452":"markdown","a23a8d3c":"markdown","4ed95aa2":"markdown","f1e2624b":"markdown","54461257":"markdown","7db6b73e":"markdown","e16a43f2":"markdown","2cc711ec":"markdown","0b8e80b1":"markdown","a57c5499":"markdown","56d8c320":"markdown","030087ac":"markdown","2c82ee09":"markdown","34a7753e":"markdown","4d9935c1":"markdown","5206497b":"markdown","23570854":"markdown","2ce1834a":"markdown","0556cdc3":"markdown","848a091c":"markdown","0bcd33c6":"markdown","cf63b744":"markdown","0b451ceb":"markdown","832f6e44":"markdown","eae316db":"markdown"},"source":{"09bd2f5f":"# Standard dependencies\nimport os\nimport numpy as np\nimport random as rn\nimport pandas as pd\nfrom numba import jit\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.callbacks import Callback\n\n# Scipy's implementation of Spearman's Rho \nfrom scipy.stats import spearmanr\n\n# Set seed for reproducability\nseed = 1234\nrn.seed(seed)\nnp.random.seed(seed)\nos.environ['PYTHONHASHSEED'] = str(seed)\n\n# Paths for easy data access\nBASE_PATH = \"..\/input\/google-quest-challenge\/\"\nTRAIN_PATH = BASE_PATH + \"train.csv\"\nTEST_PATH = BASE_PATH + \"test.csv\"\nSUB_PATH = BASE_PATH + \"sample_submission.csv\"","fdcefc14":"# File sizes and specifications\nprint('\\n# Files and file sizes')\nfor file in os.listdir(BASE_PATH):\n    print('{}| {} MB'.format(file.ljust(30), \n                             str(round(os.path.getsize(BASE_PATH + file) \/ 1000000, 2))))","9f5f4f88":"# All 30 targets\ntarget_cols = ['question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible', 'answer_relevance',\n       'answer_satisfaction', 'answer_type_instructions',\n       'answer_type_procedure', 'answer_type_reason_explanation',\n       'answer_well_written']","34925d3c":"# Read in training data\ndf = pd.read_csv(TRAIN_PATH)","91f9715c":"print(\"Target variables:\")\ndf[target_cols].head()","dc5bb91f":"def spearmans_rho(y_true, y_pred, axis=0):\n    \"\"\"\n        Calculates the Spearman's Rho Correlation between ground truth labels and predictions \n    \"\"\"\n    return spearmanr(y_true, y_pred, axis=axis)","d3eda410":"def _get_ranks(arr: np.ndarray) -> np.ndarray:\n    \"\"\"\n        Efficiently calculates the ranks of the data.\n        Only sorts once to get the ranked data.\n        \n        :param arr: A 1D NumPy Array\n        :return: A 1D NumPy Array containing the ranks of the data\n    \"\"\"\n    temp = arr.argsort(kind='stable')\n    ranks = np.empty_like(temp)\n    ranks[temp] = np.arange(len(arr))\n    return ranks\n\ndef spearmans_rho_custom(y_true: np.ndarray, y_pred: np.ndarray) -> np.float32:\n    \"\"\"\n        Efficiently calculates the Spearman's Rho correlation using only NumPy\n        \n        :param y_true: The ground truth labels\n        :param y_pred: The predicted labels\n    \"\"\"\n    # Get ranked data\n    true_rank = _get_ranks(y_true)\n    pred_rank = _get_ranks(y_pred)\n    \n    return np.corrcoef(true_rank, pred_rank)[1][0] ","2c71661a":"class SpearmanRhoCallback(Callback):\n    def __init__(self, training_data, validation_data, patience, model_name):\n        self.x = training_data[0]\n        self.y = training_data[1]\n        self.x_val = validation_data[0]\n        self.y_val = validation_data[1]\n        \n        self.patience = patience\n        self.value = -1\n        self.bad_epochs = 0\n        self.model_name = model_name\n\n    def on_train_begin(self, logs={}):\n        return\n\n    def on_train_end(self, logs={}):\n        return\n\n    def on_epoch_begin(self, epoch, logs={}):\n        return\n\n    def on_epoch_end(self, epoch, logs={}):\n        y_pred_val = self.model.predict(self.x_val)\n        rho_val = np.mean([spearmanr(self.y_val[:, ind], y_pred_val[:, ind] + np.random.normal(0, 1e-7, y_pred_val.shape[0])).correlation for ind in range(y_pred_val.shape[1])])\n        if rho_val >= self.value:\n            self.value = rho_val\n        else:\n            self.bad_epochs += 1\n        if self.bad_epochs >= self.patience:\n            print(\"Epoch %05d: early stopping Threshold\" % epoch)\n            self.model.stop_training = True\n            #self.model.save_weights(self.model_name)\n        print('\\rval_spearman-rho: %s' % (str(round(rho_val, 4))), end=100*' '+'\\n')\n        return rho_val\n\n    def on_batch_begin(self, batch, logs={}):\n        return\n\n    def on_batch_end(self, batch, logs={}):\n        return","6d6dc49c":"# Sample two times from distributions that are highly correlated\nsamp_size = 1000000\nnorm_num = np.arange(samp_size) + np.random.normal(0, 10, samp_size)\nnorm_num2 = np.arange(samp_size) + np.random.normal(0, 100000, samp_size)","27194f20":"%%timeit\nspearmanr(norm_num, norm_num2)[0]","4f929458":"%%timeit\nspearmans_rho_custom(norm_num, norm_num2)","4fc2391b":"corrs = []\n# Make random predictions\nfor col in target_cols:\n    naive_preds = np.random.rand(len(df))\n    corr = spearmans_rho_custom(naive_preds, df[col])\n    corrs.append(corr)\nrand_baseline = np.mean(corrs)\nprint(f\"Spearman's Rho Score for random uniform predictions: {round(rand_baseline, 6)}\")","fd562d7c":"corrs = []\n# Predict the mean and a small amount of noise to avoid division by zero\nfor col in target_cols:\n    probs = df[col].value_counts().values \/ len(df)\n    vals = list(df[col].value_counts().index)\n    naive_preds = df[col].mean() + np.random.normal(0, 1e-15, len(df))\n    corr = spearmans_rho_custom(naive_preds, df[col])\n    corrs.append(corr)\nmean_baseline = np.mean(corrs)\nprint(f\"Spearman's Rho Score for predicting the mean with some noise: {round(mean_baseline, 6)}\")","d0f7dc4d":"corrs = []\n# Calculate probability of some prediction and sample according to those probabilities\nfor col in target_cols:\n    probs = df[col].value_counts().values \/ len(df)\n    vals = list(df[col].value_counts().index)\n    naive_preds = np.random.choice(vals, len(df), p=probs)\n    corr = spearmanr(naive_preds, df[col])[0]\n    corrs.append(corr)\ndist_baseline = np.mean(corrs)\nprint(f\"Spearman's Rho Score for sampling from calculated distribution: {round(dist_baseline, 6)}\")","dbc8ad19":"# TODO Spearman Correlation loss function for Tensorflow 2.0+","cacba742":"# Read in sample submission file\nsub_df = pd.read_csv(SUB_PATH)\n\n# Make random predictions\nfor col in target_cols:\n    naive_preds = np.random.rand(len(sub_df))\n    sub_df[col] = naive_preds.round(6)\n    \nsub_df.to_csv('submission.csv', index=False)","c2aa159d":"print('Final predictions:')\nsub_df.head(2)","59e3e1f0":"## Speed Comparison <a id=\"4\"><\/a>","1bb50cd7":"Also, [Abhishek Thakur](https:\/\/www.kaggle.com\/abhishek) provided us with a nice implementation of Spearman's Rho as a callback compatible with Tensorflow\/Keras. Use this callback if you are training a Tensorflow\/Keras model and want to keep score on Spearman's Rho.\n\n[The implementation was copied from this Kaggle kernel](https:\/\/www.kaggle.com\/abhishek\/distilbert-use-features-oof)","be192bf7":"![](http:\/\/i.hurimg.com\/i\/hdn\/75\/0x0\/59c9a5f845d2a027e83ddaf9.jpg)","65780828":"[Spearman's Rho](https:\/\/en.wikipedia.org\/wiki\/Spearman%27s_rank_correlation_coefficient) is one of the most popular ways to evaluate the correlation between variables. It is an appropriate metric for both continuous and discrete ordinal variables. The Spearman's Rho score will always be between -1 (perfect negative correlation) and 1 (Perfect correlation). The original formula can look quite daunting but for completeness we present it here:\n\n![](https:\/\/www.statisticshowto.datasciencecentral.com\/wp-content\/uploads\/2015\/01\/tied-ranks-1.png)\n\nR(x) and R(y) are the ranks.\n\nR(x)bar and R(y)bar are the mean ranks.\n\n[Image Source](https:\/\/www.statisticshowto.datasciencecentral.com\/wp-content\/uploads\/2015\/01\/tied-ranks-1.png)\n\nWe can clean up the formula a bit if you are familiar with how covariance and the standard deviation are calculated. We define Spearman's Rho as the Covariance of the ranks of the variables divided by the multiplied standard deviations of the ranks:\n\n![](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/a8dda555d22080d721679401fa13181cad3863f6) \n\nIf all ranks are distinct integers we can use a popular simplified formula to calculate Spearman's Rho:\n\n![](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/b69578f3203ecf1b85b1a0929772b376ae07a3ce)\n\n","42e29525":"Thirdly, we can create a naive baseline using the probability that a value occurs and use these probabilities to create a new distribution to sample from. Unfortunately, there will be no increase in score compared to the random baseline.","2e29883a":"Unfortunately I have not found a way to get a naive baseline that performs better than random uniform. Please let me know in the comments if there is a way to do better than random. I will implement it in this kernel.","9f84366f":"In this kernel we explore the competition metric for the [Google QUEST Q&A Labeling 2019 competition](https:\/\/www.kaggle.com\/c\/google-quest-challenge). The competition metric is called [Spearman's Rank Correlation Coefficient (or Spearman's Rho)](https:\/\/en.wikipedia.org\/wiki\/Spearman%27s_rank_correlation_coefficient). This metric is similar to Pearson correlation, but used the ranks of the data instead of the raw data.","f496f5d2":"## Naive Baselines <a id=\"5\"><\/a>","6d5ec452":"## The Metric <a id=\"3\"><\/a>","a23a8d3c":"In essence there are two choices to optimize for the Spearman's Rho score (in this competition):\n\n1. Use binary_crossentropy since it is essentially a binary classification problem.\n2. Implement a custom loss function to optimize Spearman's Rho directly.","4ed95aa2":"A second way to formulate a naive baseline is to predict the mean of the column. However, we have to add a little noise to avoid a division by zero error. Remember that in order to calculate Spearman's Rho we have to divide by standard deviation of the first column multiplied by the standard deviation of the second column. If our prediction is completely constant than the standard deviation will be zero and hence we will get an error.\n\nUnfortunately, this will not improve compared to the random predictions.","f1e2624b":"The most basic benchmark is to sample from a random uniform distribution ([0,1]). This will give us a score that is close to 0.","54461257":"### Speed Test Scipy's Implementation","7db6b73e":"### 3. Predict using distribution based on the data","e16a43f2":"Spearman's Rho can be formulated as a loss function, so it can be used to directly optimize a Machine Learning model.","2cc711ec":"### Speed Test Custom Implementation","0b8e80b1":"We can use an optimized implementation from Scipy that uses [Cython](https:\/\/cython.org\/) and can already calculate Spearman's Rho pretty efficiently. It will also provide the p-value for the calculation.","a57c5499":"### 2. Optimize Spearman's Rho directly","56d8c320":"## Dependencies <a id=\"1\"><\/a>","030087ac":"## Table of Contents","2c82ee09":"**That's it! If you like this Kaggle kernel, feel free to give an upvote and leave a comment! Your feedback is also very welcome! I will try to implement your suggestions in this kernel!**","34a7753e":"Let's implement Spearman's R using only NumPy to get better insight in the structure of the formula and see how you can implement it yourself in Python.","4d9935c1":"Our custom implementation only needs to sort once, but it still takes advantage of the optimized function from NumPy. It also calculates only the correlation without p-values. This is probably why it runs a little faster than Scipy's version. We will show this with an example using sampled linear data with noise.","5206497b":"## Submission <a id=\"7\"><\/a>","23570854":"### 1. Predict using random uniform predictions","2ce1834a":"## Optimizing Spearman's Rho <a id=\"6\"><\/a>","0556cdc3":"- [Dependencies](#1)\n- [Preparation](#2)\n- [The Metric](#3)\n- [Speed Comparison](#4)\n- [Naive Baselines](#5)\n- [Optimizing Spearman's Rho](#6)\n- [Submission](#7)","848a091c":"### 2. Predict mean rank with noise","0bcd33c6":"## Preparation <a id=\"2\"><\/a>","cf63b744":"### Understanding the Metric: Spearman's Rank Correlation Coefficient (Spearman's Rho)","0b451ceb":"### 1. Use binary_crossentropy","832f6e44":"P.S. This kernel is the third in a series of kernels on metrics. Feel free to check out the previous ones on [Root Mean Square Logirithmic Error (RMSLE)](https:\/\/www.kaggle.com\/carlolepelaars\/understanding-the-metric-rmsle) and [Quadratic Weighted Kappa (QWK)](https:\/\/www.kaggle.com\/carlolepelaars\/understanding-the-metric-quadratic-weighted-kappa).","eae316db":"Binary Crossentropy is a common loss function that is already implemented in most libraries. Just select \"binary_crossentropy\" as a loss function in the Machine Learning library of your choice. ;)"}}