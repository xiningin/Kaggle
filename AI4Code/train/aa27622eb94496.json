{"cell_type":{"be656175":"code","f9cd7cd6":"code","b6c401de":"code","bf1f5b22":"code","fc94d4bd":"code","491713eb":"code","c42ab18c":"code","0d0e342c":"code","5e6c64d6":"code","488c6182":"code","84f15577":"code","a6ed41d7":"code","c2301279":"code","a4fce737":"code","e2518e24":"code","ee961b39":"code","913baa78":"code","02c92b7a":"code","8f1a2060":"code","fd6592ee":"code","1326f673":"code","2504f7e7":"code","0073d891":"code","54493766":"code","50e099f9":"code","6076275c":"code","c7e84c26":"code","0fc194e9":"code","fc16b1d0":"code","2bfb1786":"code","5e67b6fa":"code","c15f329d":"code","85d5d71b":"code","d4b0b2da":"code","482977f0":"code","6bc96e4f":"code","ac17e284":"code","7499d650":"code","351896a5":"code","abdfbf43":"code","b3b721e8":"code","e13a8165":"code","1709cdbb":"code","b10ae3f4":"code","07dd9efd":"code","54336bac":"markdown","a41bfb69":"markdown","3232e95b":"markdown","1d003750":"markdown","ec56acc7":"markdown","887d4ec5":"markdown","3d53e12c":"markdown","5c9d4978":"markdown","a12103f2":"markdown","7b997faf":"markdown","ec1d371b":"markdown","34b9c51d":"markdown","655902f0":"markdown","1311278d":"markdown","050e15f0":"markdown","ab60d202":"markdown","c15de14d":"markdown","5483ea81":"markdown","69cc0a23":"markdown","e02999fe":"markdown","675f0937":"markdown","8c6b4182":"markdown","bbbd202f":"markdown","0c7f4c13":"markdown","9f55d856":"markdown","ff8b3235":"markdown","73a365ff":"markdown","dfc482da":"markdown","c7e7a347":"markdown","7c9fd73d":"markdown","5588558a":"markdown"},"source":{"be656175":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nplt.rc('seaborn-darkgrid')\nplt.style.use('dark_background')\nplt.rc('figure', figsize=(38,8))\nplt.rc('font', size=12)\nplt.rc('lines', markersize=8)\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pickle\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler","f9cd7cd6":"h_df = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\nh_df.head()","b6c401de":"h_df.shape","bf1f5b22":"print(h_df.isna().sum())\nprint(h_df.isnull().sum())\nprint('Duplicated \\t',h_df.duplicated().sum())","fc94d4bd":"h_df.info()","491713eb":"h_df.describe()","c42ab18c":"h_df.columns","0d0e342c":"h_df.groupby(by=h_df['Sex']).mean()","5e6c64d6":"h_df.groupby(by=h_df['Sex']).median()","488c6182":"h_df.groupby(by=h_df['Sex']).sum()","84f15577":"h_df.groupby(by=h_df['Sex']).std()","a6ed41d7":"plt.rc('figure', figsize=(38,18))\nplt.rc('lines', markersize=12)\nplt.scatter(h_df['Age'], h_df['RestingBP'],alpha=0.5,color='red')\nplt.scatter(h_df['Age'], h_df['Cholesterol'],alpha=0.5,color='violet')\nplt.scatter(h_df['Age'], h_df['MaxHR'],alpha=0.3,color='aqua')\nplt.legend(['RestingBP','Cholesterol','MaxHR'])","c2301279":"plt.scatter(h_df['Age'], h_df['Oldpeak'],alpha=0.5,color='blue')\nplt.legend(['RestingBP'])","a4fce737":"plt.rc('figure', figsize=(38,10))\nplt.subplot(1,4,1)\nsns.boxplot(h_df['RestingBP'],color='red')\nplt.subplot(1,4,2)\nsns.boxplot(h_df['Cholesterol'],color='orange')\nplt.subplot(1,4,3)\nsns.boxplot(h_df['MaxHR'],color='coral')\nplt.subplot(1,4,4)\nsns.boxplot(h_df['Oldpeak'],color='brown')\nplt.show()","e2518e24":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 - q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nint_col = h_df.drop(['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope'],axis=1)\nnum = int_col.columns\nfor i in num:\n    count_outliers(h_df,i)\n","ee961b39":"def remove_outliers(data):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    Q1 = data.quantile(0.30)\n    Q3 = data.quantile(0.70)\n    IQR = Q3 - Q1\n\n    data = data[~((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR)))]\n\n    return data","913baa78":"h_df.columns","02c92b7a":"h_df.shape","8f1a2060":"h_df['RestingBP'] = remove_outliers(h_df['RestingBP'])\nh_df['Cholesterol'] = remove_outliers(h_df['Cholesterol'])\nh_df['MaxHR'] = remove_outliers(h_df['MaxHR'])\nh_df['Oldpeak'] = remove_outliers(h_df['Oldpeak'])","fd6592ee":"plt.scatter(h_df['Age'], h_df['RestingBP'],alpha=0.5,color='red')\nplt.scatter(h_df['Age'], h_df['Cholesterol'],alpha=0.5,color='violet')\nplt.scatter(h_df['Age'], h_df['MaxHR'],alpha=0.3,color='aqua')\n#plt.scatter(h_df['Age'], h_df['Oldpeak'],alpha=0.5,color='blue')\nplt.legend(['RestingBP','Cholesterol','MaxHR'])","1326f673":"plt.scatter(h_df['Age'], h_df['Oldpeak'],alpha=0.5,color='blue')\nplt.legend(['RestingBP'])","2504f7e7":"plt.rc('figure', figsize=(38,8))\nplt.subplot(1,4,1)\nsns.boxplot(h_df['RestingBP'],color='navy')\nplt.subplot(1,4,2)\nsns.boxplot(h_df['Cholesterol'],color='maroon')\nplt.subplot(1,4,3)\nsns.boxplot(h_df['MaxHR'],color='magenta')\nplt.subplot(1,4,4)\nsns.boxplot(h_df['Oldpeak'],color='purple')\nplt.show()","0073d891":"plt.subplot(1,5,1)\nsns.countplot(h_df['ChestPainType'],palette='pastel')\nplt.subplot(1,5,2)\nsns.countplot(h_df['Sex'],palette='cool')\nplt.subplot(1,5,3)\nsns.countplot(h_df['RestingECG'],palette='gnuplot')\nplt.subplot(1,5,4)\nsns.countplot(h_df['ExerciseAngina'],palette='Set3')\nplt.subplot(1,5,5)\nsns.countplot(h_df['ST_Slope'],palette='autumn')\nplt.show()","54493766":"h_df.groupby(by=['HeartDisease','Sex']).sum()","50e099f9":"h_df.groupby(by=['ChestPainType','Sex']).sum()","6076275c":"h_df.groupby(by=['RestingECG','Sex']).sum()","c7e84c26":"h_df.groupby(by=['FastingBS','Sex']).sum()","0fc194e9":"plt.rc('lines', markersize=4)\nsns.pairplot(h_df,hue='Sex',palette='cool')","fc16b1d0":"plt.rc('figure', figsize=(12,6))\nsns.countplot(h_df['HeartDisease'],hue=h_df['Sex'],palette='copper')","2bfb1786":"htmap  = h_df.drop(columns=['ChestPainType', 'RestingECG', 'ExerciseAngina','ST_Slope','Sex'], axis=1).set_index('Age')\nsns.heatmap(htmap.corr(),annot=True)","5e67b6fa":"def LABEL_ENCODING(c1):\n    from sklearn import preprocessing\n    label_encoder = preprocessing.LabelEncoder()\n    h_df[c1]= label_encoder.fit_transform(h_df[c1])\n    h_df[c1].unique()","c15f329d":"LABEL_ENCODING(\"Sex\")\nLABEL_ENCODING(\"ChestPainType\")\nLABEL_ENCODING(\"RestingECG\")\nLABEL_ENCODING(\"ExerciseAngina\")\nLABEL_ENCODING(\"ST_Slope\")\nh_df.head(5)","85d5d71b":"print(h_df.isna().sum())","d4b0b2da":"h_df = h_df.dropna(axis=0)\nprint(h_df.isna().sum())","482977f0":"x = h_df.iloc[:,:11]\ny = h_df.iloc[:,11:12]","6bc96e4f":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=40, shuffle=True)","ac17e284":"print('x_train:',x_train.shape)\nprint('y_train:',y_train.shape)\nprint('x_test:',x_test.shape)\nprint('y_test:',y_test.shape)","7499d650":"!pip install scikit-learn  -U","351896a5":"log_reg = LogisticRegression(solver='liblinear')\nlogreg = log_reg.fit(x_train, y_train)\nlogreg_pred = logreg.predict(x_test)\nlogreg_pred","abdfbf43":"y_test = np.array(y_test)\ny_test=y_test.reshape(171,)\nplt.rc('figure', figsize=(12,6))\nplt.subplot(1,2,1)\nsns.countplot(y_test,palette='gnuplot')\nplt.title('Ground Truth')\nplt.xlabel('Heart Disease')\nplt.subplot(1,2,2)\nsns.countplot(logreg_pred, palette='brg')\nplt.title('Predicted')\nplt.xlabel('Heart Disease')","b3b721e8":"plt.rc('figure', figsize=(32,6))\nplt.subplot(1,2,1)\nsns.swarmplot(x_test['Age'],logreg_pred)\nplt.title('Ground Truth')\nplt.xlabel('Heart Disease')\nplt.subplot(1,2,2)\nsns.swarmplot(x_test['Age'],y_test)\nplt.title('Predicted')\nplt.xlabel('Heart Disease')","e13a8165":"print(\"Accuracy:\",metrics.accuracy_score(y_test, logreg_pred))","1709cdbb":"plt.rc('figure', figsize=(12,6))\nprint(confusion_matrix(y_test,logreg_pred))\nsns.heatmap(confusion_matrix(y_test,logreg_pred),annot=True)","b10ae3f4":"print(classification_report(y_test,logreg_pred))","07dd9efd":"pickle.dump(log_reg, open('model.pkl', 'wb'))","54336bac":"# **Metrics**","a41bfb69":"**Drop the Null Values**","3232e95b":"**Heart failure (HF), also known as congestive heart failure (CHF) and (congestive) cardiac failure (CCF), is a set of manifestations caused by the failure of the heart's function as a pump supporting the blood flow through the body; its signs and symptoms result from a structural and\/or functional abnormality of the heart, that disrupts its filling with blood or its ejecting of it during each heart beat.Signs and symptoms of heart failure commonly include shortness of breath, excessive tiredness, and leg swelling.The shortness of breath is usually worse with exercise or while lying down, and may wake the person at night. A limited ability to exercise is also a common feature.Chest pain, including angina, does not typically occur due to heart failure.**\n\n**How common is condition?\nCommon (More than 10 lakh cases per year in India)\nIs condition treatable?\nTreatments can help manage condition, no known cure\nDoes diagnosis require lab test or imaging?\nOften requires lab test or imaging\nCondition Highlight\nCommon for ages 60 and older\nCondition Highlight\nMore common in females\nCondition Highlight\nFamily history may increase likelihood\nCondition Highlight\nUrgent medical attention recommended in severe cases**","1d003750":"# **Split the DataFrame into Train and Test Data**","ec56acc7":"**Describe DataFrame**","887d4ec5":"**Verify DataFrame**","3d53e12c":"# **Import Modules**","5c9d4978":"# **Data Visualization**","a12103f2":"# **Train in Logistic Regression**","7b997faf":"# **Confusion Matrix**","ec1d371b":"# **Accuracy Metrics**","34b9c51d":"# **Save Model for Deployment**","655902f0":"<div style=\"width:100%;text-align: center;\"> <img align=middle src=\"https:\/\/media.giphy.com\/media\/8cBhJBU2wlq6H6qY4W\/giphy.gif\" alt=\"Heat beating\" style=\"height:400px;margin-top:3rem;\"> <\/div>","1311278d":"**Data Info**","050e15f0":"# **Outliers are Removed. Good Data!**","ab60d202":"# **Heart Failure Prediction**\ud83d\udc68\u200d\u2695\ufe0f\ud83d\udc94","c15de14d":"# **Find Outliers**","5483ea81":"**Data Columns**","69cc0a23":"<div style=\"width:100%;text-align: center;\"> <img align=middle src=\"https:\/\/media.giphy.com\/media\/9hizEeiaQkTOzF6Jci\/giphy.gif\" alt=\"Heat beating\" style=\"height:600px;margin-top:3rem;\"> <\/div>","e02999fe":"# **Count Outliers**","675f0937":"# **Description**","8c6b4182":"# **Clean the DataFrame**","bbbd202f":"1. Age: age of the patient [years]\n2. Sex: sex of the patient [M: Male, F: Female]\n3. ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n4. RestingBP: resting blood pressure [mm Hg]\n5. Cholesterol: serum cholesterol [mm\/dl]\n6. FastingBS: fasting blood sugar [1: if FastingBS > 120 mg\/dl, 0: otherwise]\n7. RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n8. MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n9. ExerciseAngina: exercise-induced angina [Y: Yes, N: No]\n10. Oldpeak: oldpeak = ST [Numeric value measured in depression]\n11. ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]\n12. HeartDisease: output class [1: heart disease, 0: Normal]","0c7f4c13":"**Sum of Comparison with each columns**","9f55d856":"# **Read DataFrame**","ff8b3235":"# **Find Missing Values**","73a365ff":"# **Remove Outliers**","dfc482da":"# **Compare with Actual Data**","c7e7a347":"**DataFrame Shape**","7c9fd73d":"# **One HotEncoding**","5588558a":"**Pairplot**"}}