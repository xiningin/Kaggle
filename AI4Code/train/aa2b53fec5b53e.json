{"cell_type":{"4346bf57":"code","01ff2f5b":"code","86665fb8":"code","9d5fd114":"code","2137ce4d":"code","68d505a3":"code","4f9c974b":"code","55f8a783":"code","ad2adc54":"code","ba0bac30":"code","0ddb49b2":"code","308c854c":"code","82db2b85":"code","60ee5c53":"code","a952d254":"code","4c342388":"code","3c3e60de":"code","f008333f":"markdown"},"source":{"4346bf57":"# import libraries\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom keras.models import Sequential\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.impute import SimpleImputer \nfrom keras.layers import Dense,Activation,Dropout\nfrom sklearn.model_selection import train_test_split","01ff2f5b":"#filter warnings\nwarnings.filterwarnings(\"ignore\")\n# import data \ndata = pd.read_csv('..\/input\/breastcancerwisconsin\/breast-cancer-wisconsin.csv',delimiter=',')\ndata.head()","86665fb8":"# Dropped \"ID\" Column cause is unneeded\ndata.drop(['id'], inplace=True, axis=1)\ndata.replace('?', -99999, inplace=True)","9d5fd114":"# Visualize Malign and Benign Patient Count\ncount = data.benormal.value_counts()\ncount.plot(kind='bar')\nplt.legend()","2137ce4d":"# Last Column is output data. So (2 is benign, 4 is malignant) \ndata['benormal'] = data['benormal'].map(lambda x: 1 if x == 4 else 0)","68d505a3":"# First 9 column is input parameters. \nX = data.iloc[:,0:9]\n# Last Column is output data. So (0 is benign, 1 is malignant) \ny = data.iloc[:,-1]","4f9c974b":"scaler = preprocessing.MinMaxScaler()\nX = scaler.fit_transform(X)","55f8a783":"# train test split\nX_train,X_test,y_train,y_test = train_test_split(X, y, test_size=0.2)\n\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)\nprint(X_train)","ad2adc54":"# Create Model with KERAS library\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_shape=(9,))) # FC Fully Connected Layer, input_dimension is dataset input parameters\nmodel.add(Dropout(0.05))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.10))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.20))\nmodel.add(Dense(1, activation='sigmoid'))","ba0bac30":"# Compile Model\nmodel.compile(\n    optimizer=\"adam\",\n    loss=\"binary_crossentropy\",\n    metrics=[\"accuracy\"])","0ddb49b2":"# Fit Model\nhistory =  model.fit(X_train,y_train, \n                     epochs=25,\n                     batch_size=8,\n                     validation_data=(X_test, y_test))","308c854c":"# model save\nmodel.save_weights(\"example.h5\")","82db2b85":"# Visualize Loss and Accuracy Rates\nplt.plot(history.history[\"loss\"],label=\"train_loss\")\nplt.plot(history.history[\"val_loss\"],label=\"val_loss\")\nplt.legend()\nplt.show()\n\nplt.figure()\nplt.plot(history.history[\"accuracy\"],label=\"train_acc\")\nplt.plot(history.history[\"val_accuracy\"],label=\"val_acc\")\nplt.legend()\nplt.show()","60ee5c53":"Y_pred = model.predict(X_test)\nY_pred = [ 1 if y>=0.5 else 0 for y in Y_pred]","a952d254":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, Y_pred)\nprint(cm)","4c342388":"sns.heatmap(cm,annot=True)","3c3e60de":"from sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report \nprint('Confusion Matrix :')\nprint(cm) \nprint('Accuracy Score :',accuracy_score(y_test, Y_pred))\nprint('Report : ')\nprint(classification_report(y_test, Y_pred))","f008333f":"<h1 align=\"center\">Breast Cancer Classification using Deep Neural Networks with Keras<\/h1> "}}