{"cell_type":{"f9d83d58":"code","b3a78f01":"code","fae6983d":"code","515521fe":"code","f6b5649e":"code","dfb284b7":"code","dcc1d773":"code","227fc16c":"code","221b51da":"markdown","5b42623f":"markdown","ca043be3":"markdown","7373e25e":"markdown","f4737c3d":"markdown"},"source":{"f9d83d58":"from abc import ABCMeta, abstractstaticmethod","b3a78f01":"class IChair(metaclass=ABCMeta):\n    \n    @abstractstaticmethod\n    def get_dimensions():\n        \"\"\"\"The Chair Interface\"\"\"","fae6983d":"class BigChair(IChair):\n    def __init__(self):\n        self.height = 80\n        self.width = 80\n        self.depth = 80\n    def get_dimensions(self):\n        return {\"height\": self.height, \"width\": self.width, \"depth\": self.depth}","515521fe":"class MediumChair(IChair):\n    def __init__(self):\n        self.height = 70\n        self.width = 70\n        self.depth = 70\n    def get_dimensions(self):\n        return {\"height\": self.height, \"width\": self.width, \"depth\": self.depth}","f6b5649e":"class SmallChair(IChair):\n    def __init__(self):\n        self.height = 60\n        self.width = 60\n        self.depth = 60\n    def get_dimensions(self):\n        return {\"height\": self.height, \"width\": self.width, \"depth\": self.depth}","dfb284b7":"class ChairFactory():\n    \n    @staticmethod\n    def get_chair(chairtype):\n        try:\n            if chairtype == \"BigChair\":\n                return BigChair()\n            if chairtype == \"MediumChair\":\n                return MediumChair()\n            if chairtype == \"SmallChair\":\n                return SmallChair()\n            raise AssertionError(\"Chair not found\")\n        except AssertionError(\"Chair not found\") as e_:\n            print(_e)","dcc1d773":"if __name__ == \"__main__\":\n    CHAIR = ChairFactory.get_chair(\"BigChair\")\n    print(f\"{CHAIR.__class__} : {CHAIR.get_dimensions()}\")\n    \n    CHAIR = ChairFactory.get_chair(\"MediumChair\")\n    print(f\"{CHAIR.__class__} : {CHAIR.get_dimensions()}\")\n    \n    CHAIR = ChairFactory.get_chair(\"SmallChair\")\n    print(f\"{CHAIR.__class__} : {CHAIR.get_dimensions()}\")\n","227fc16c":"<class '__main__.BigChair'> : {'height': 80, 'width': 80, 'depth': 80}\n<class '__main__.MediumChair'> : {'height': 70, 'width': 70, 'depth': 70}\n<class '__main__.SmallChair'> : {'height': 60, 'width': 60, 'depth': 60}\n","221b51da":"BigChair, MediumChair y SmallChair, son clases concretas que implementan la IClass Interfaz.","5b42623f":"#### Interfaz","ca043be3":"#### Tipos de clase que la f\u00e1brica puede entregar.","7373e25e":"Se llama al m\u00e9todo Factory get_new_object(),\npara devolverle un objeto de tipo que la f\u00e1brica puede entregar.\n\nPython llamar\u00e1 al ChairFactory m\u00e9todo get_chair(type)y ChairFactory le devolver\u00e1 un objeto del tipo de silla que se solicit\u00f3.","f4737c3d":"<center>\n \n## Factory design pattern in pyton\n\nPodemos utilizar este patr\u00f3n cuando definamos una clase a partir de la que se crear\u00e1n objetos pero sin saber de qu\u00e9 tipo son, siendo otras subclases las encargadas de decidirlo.\n\n![Esta es una imagen de ejemplo](https:\/\/informaticapc.com\/patrones-de-diseno\/images\/factory-method.jpg)\n\nEl patr\u00f3n de dise\u00f1o Factory Method nos permite la creaci\u00f3n de un subtipo determinado por medio de una clase de Factor\u00eda, la cual oculta los detalles de creaci\u00f3n del objeto.\n\nEl objeto real creados es enmascarado detr\u00e1s de una interface com\u00fan entre todos los objetos que pueden ser creado, con la finalidad de que estos pueden variar sin afectar la forma en que el cliente interact\u00faa con ellos. \n\n<center\/>\n    \n### Ejemplo en python\n![Esta es una imagen de ejemplo](https:\/\/miro.medium.com\/max\/875\/1*5IZePpkCm65-tmitI3c5rg.png)"}}