{"cell_type":{"247cb580":"code","5cba4202":"code","3c63fc04":"code","fd8744ee":"code","4493e882":"markdown","8cfcd62f":"markdown","7639a9bb":"markdown","5c8094ea":"markdown","a9612853":"markdown","45c3327e":"markdown","3088bcea":"markdown","a1a3247d":"markdown"},"source":{"247cb580":"# ====================================================================\n# LOADING LIBRARIES - SETTING UP THE ENVIRONMENT\n# ====================================================================\nimport streamlit as st\nimport numpy as np\nfrom PIL import Image\nimport pickle\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\nimport seaborn as sns\nimport shap\n\n\n# ====================================================================\n#LET'S LOAD DATA - FIXED VARIABLES\n# ====================================================================\n#We are going to use differents dataframe previously created (EDA available on kaggle).\n#The dataframe used for our dashboard are going to be listed and named below.\n#In order to create an interactive dashboard, we are also going to use the selected model.\n#Why did I select this best model ? Check the explaination on the kaggle notebook.\n\n# Directory : local - Best model after EDA (for details, check kaggle notebook : https:\/\/www.kaggle.com\/vanessatribet\/p7-v3)\nFILE_BEST_MODELE = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\modele\\best_model.pickle'\n# Directory : local - Initial test set provided for the project\nFILE_APPLICATION_TEST = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\application_test.pickle'\n# Directory : local - test set after EDA and modelisation\nFILE_TEST_SET = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\test_set.pickle'\n# Directory : local - Template for my dashboard\nFILE_DASHBOARD = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_dashboard.pickle'\n# Directory : local - Personal Data of the client\nFILE_CLIENT_INFO = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_info_client.pickle'\n# Directory : local - Environemental features from the client environment\nFILE_CLIENT_PRET = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_pret_client.pickle'\n\n#In our analysis, we do analyze previous result from previous customers, but we also decide to analyze the\n#closest neighbours in order to better perform in our decision (KNN).\n#Specifics dataframe have been created for this feature of the dashboard.\n\nFILE_VOISINS_INFO = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_info_voisins.pickle'\nFILE_VOISIN_PRET = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_pret_voisins.pickle'\nFILE_VOISIN_AGG = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_voisin_train_agg.pickle'\nFILE_ALL_TRAIN_AGG = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_all_train_agg.pickle'\n\n\n\n# ====================================================================\n# LET'S LOAD DATA - IMAGES\n# ====================================================================\n#We want to create a user-friendly dashboard. Including pictures and company visual will create a corporate atmosphere.\n\n# The company name is \"Pr\u00eat \u00e0 d\u00e9penser\". The logo is provided in the project explaination.\nlogo =  Image.open(r\"C:\\temp\\P7-DASHBOARD-temp\\resources\\images\\logo.png\")\n# Curve Legend\nlineplot_legende =  Image.open(r\"C:\\temp\\P7-DASHBOARD-temp\\resources\\images\\lineplot_legende.png\")\n\n\n# ====================================================================\n#LET'S DEFINE THE DIFFERENT VARIABLES\n# ====================================================================\n#The provided dataset did include a high amount of informations from differents parameters.\n#Some of them are going to be used : the one that can have more or less impact on the ability to refund the credit.\n#4 different categories are defined :\n\ngroup_val1 = ['AMT_ANNUITY',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n              'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n              'INST_PAY_AMT_INSTALMENT_SUM']\n\ngroup_val2 = ['CAR_EMPLOYED_RATIO', 'CODE_GENDER',\n              'CREDIT_ANNUITY_RATIO', 'CREDIT_GOODS_RATIO',\n              'YEAR_BIRTH', 'YEAR_ID_PUBLISH',\n              'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3',\n              'EXT_SOURCE_MAX', 'EXT_SOURCE_SUM',\n              'FLAG_OWN_CAR',\n              'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n              'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n              'PREV_APP_INTEREST_SHARE_MAX']\n\ngroup_val3 = ['AMT_ANNUITY_MEAN',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN',\n              'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN',\n              'INST_PAY_AMT_INSTALMENT_SUM_MEAN']\n\ngroup_val4 = ['CAR_EMPLOYED_RATIO_MEAN', 'CODE_GENDER_MEAN',\n              'CREDIT_ANNUITY_RATIO_MEAN', 'CREDIT_GOODS_RATIO_MEAN',\n              'YEAR_BIRTH_MEAN', 'YEAR_ID_PUBLISH_MEAN',\n              'EXT_SOURCE_1_MEAN', 'EXT_SOURCE_2_MEAN', 'EXT_SOURCE_3_MEAN',\n              'EXT_SOURCE_MAX_MEAN', 'EXT_SOURCE_SUM_MEAN',\n              'FLAG_OWN_CAR_MEAN',\n              'INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN',\n              'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN',\n              'PREV_APP_INTEREST_SHARE_MAX_MEAN']\n\n\n# ====================================================================\n# LET'S DEFINE THE LAYOUT OF THE DASHBOARD WITH HTML MARKDOWN\n# ====================================================================\nhtml_AMT_ANNUITY = \"<h4 style='text-align: center'>AMT_ANNUITY<\/h4> <br\/> <h5 style='text-align: center'>Annuity Amount<\/h5> <hr\/>\"\nhtml_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN = \"<h4 style='text-align: center'>BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN<\/h4> <br\/> <h5 style='text-align: center'>Minimum value of the difference between the current credit card credit limit and the current credit debt<\/h5> <hr\/>\"\nhtml_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN = \"<h4 style='text-align: center'>BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN<\/h4> <br\/> <h5 style='text-align: center'>Average value of the difference between the current credit card credit limit and the current credit debt<\/h5> <hr\/>\"\nhtml_INST_PAY_AMT_INSTALMENT_SUM = \"<h4 style='text-align: center'>INST_PAY_AMT_INSTALMENT_SUM<\/h4> <br\/> <h5 style='text-align: center'>Sum of the amount of the prescribed advance from previous appropriations on this advance<\/h5> <hr\/>\"\nhtml_BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN = \"<h4 style='text-align: center'>BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN<\/h4> <br\/> <h5 style='text-align: center'>Average of the ratio of previous loans to other institutions of: current credit debt and current credit card limit (value * 100)<\/h5> <hr\/>\"\nhtml_CAR_EMPLOYED_RATIO = \"<h4 style='text-align: center'>CAR_EMPLOYED_RATIO<\/h4> <br\/> <h5 style='text-align: center'>Ratio: Age of the applicant\u2019s car \/ Seniority in employment at the date of application (value * 1000)<\/h5> <hr\/>\"\nhtml_CODE_GENDER = \"<h4 style='text-align: center'>CODE_GENDER<\/h4> <br\/> <h5 style='text-align: center'>Sex<\/h5> <hr\/>\"\nhtml_CREDIT_ANNUITY_RATIO = \"<h4 style='text-align: center'>CREDIT_ANNUITY_RATIO<\/h4> <br\/> <h5 style='text-align: center'>Ratio: Loan Credit Amount \/ Loan Annuity<\/h5> <hr\/>\"\nhtml_CREDIT_GOODS_RATIO = \"<h4 style='text-align: center'>CREDIT_GOODS_RATIO<\/h4> <br\/> <h5 style='text-align: center'>Ratio: Loan credit amount \/ price of property for which the loan is granted \/ Credit is greater than the price of property? (value * 100)<\/h5> <hr\/>\"\nhtml_YEAR_BIRTH = \"<h4 style='text-align: center'>YEAR_BIRTH<\/h4> <br\/> <h5 style='text-align: center'>Age (years)<\/h5> <hr\/>\"\nhtml_YEAR_ID_PUBLISH = \"<h4 style='text-align: center'>YEAR_ID_PUBLISH<\/h4> <br\/> <h5 style='text-align: center'>How many days prior to the application did the client change the ID with which they applied for the loan? (years)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_1 = \"<h4 style='text-align: center'>EXT_SOURCE_1<\/h4> <br\/> <h5 style='text-align: center'>Source externe normalis\u00e9e (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_2 = \"<h4 style='text-align: center'>EXT_SOURCE_2<\/h4> <br\/> <h5 style='text-align: center'>Source externe normalis\u00e9e (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_3 = \"<h4 style='text-align: center'>EXT_SOURCE_3<\/h4> <br\/> <h5 style='text-align: center'>Source externe normalis\u00e9e (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_MAX = \"<h4 style='text-align: center'>EXT_SOURCE_MAX<\/h4> <br\/> <h5 style='text-align: center'>Valeur maximale des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3) (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_SUM = \"<h4 style='text-align: center'>EXT_SOURCE_SUM<\/h4> <br\/> <h5 style='text-align: center'>Somme des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3, valeur * 100)<\/h5> <hr\/>\"\nhtml_FLAG_OWN_CAR = \"<h4 style='text-align: center'>FLAG_OWN_CAR<\/h4> <br\/> <h5 style='text-align: center'>Indicateur si le client poss\u00e8de une voiture<\/h5> <hr\/>\"\nhtml_INST_PAY_DAYS_PAYMENT_RATIO_MAX = \"<h4 style='text-align: center'>INST_PAY_DAYS_PAYMENT_RATIO_MAX<\/h4> <br\/> <h5 style='text-align: center'>Valeur maximal dans l'historique des pr\u00e9c\u00e9dents cr\u00e9dits rembours\u00e9s dans Home Cr\u00e9dit du ratio : La date \u00e0 laquelle le versement du cr\u00e9dit pr\u00e9c\u00e9dent \u00e9tait cens\u00e9 \u00eatre pay\u00e9 (par rapport \u00e0 la date de demande du pr\u00eat actuel) \\ Quand les \u00e9ch\u00e9ances du cr\u00e9dit pr\u00e9c\u00e9dent ont-elles \u00e9t\u00e9 effectivement pay\u00e9es (par rapport \u00e0 la date de demande du pr\u00eat<\/h5> <hr\/>\"\nhtml_NAME_EDUCATION_TYPE_HIGHER_EDUCATION = \"<h4 style='text-align: center'>NAME_EDUCATION_TYPE_HIGHER_EDUCATION<\/h4> <br\/> <h5 style='text-align: center'>Niveau d'\u00e9ducation le plus \u00e9l\u00e9v\u00e9<\/h5> <hr\/>\"\nhtml_POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM = \"<h4 style='text-align: center'>POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM<\/h4> <br\/> <h5 style='text-align: center'>Somme des contrats actifs au cours du mois<\/h5> <hr\/>\"\nhtml_PREV_APP_INTEREST_SHARE_MAX = \"<h4 style='text-align: center'>PREV_APP_INTEREST_SHARE_MAX<\/h4> <br\/> <h5 style='text-align: center'>La valeur maximale de tous les pr\u00e9c\u00e9dents cr\u00e9dit dans d'autres institution : de la dur\u00e9e du cr\u00e9dit multipli\u00e9 par l'annuit\u00e9 du pr\u00eat moins le montant final du cr\u00e9dit<\/h5> <hr\/>\"\n\n# ====================================================================\n# LET'S DEFINE THE HEADER OF THE DASHBOARD\n# ====================================================================\n\nhtml_header=\"\"\"\n    <head>\n        <title>Interactive Dashboard - Agreement for bank loan<\/title>\n        <meta charset=\"utf-8\">\n        <meta name=\"keywords\" content=\"Bank Loan, Dashboard, Scoring\">\n        <meta name=\"description\" content=\"Application - Dashboard - Credit Scoring\">\n        <meta name=\"author\" content=\"Vanessa Tribet\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <\/head>             \n    <h1 style=\"font-size:300%; color: #00A8A8; font-family:Arial\"> Let's calculate your credit scoring <br>\n        <h2 style=\"color:#00DB79; font-family:Georgia\"> Data driven decision of your loan request : we are 100% transparent with you!<\/h2>\n        <hr style= \"  display: block;\n          margin-top: 0;\n          margin-bottom: 0;\n          margin-left: auto;\n          margin-right: auto;\n          border-style: inset;\n          border-width: 1.5px;\"\/>\n     <\/h1>\n\"\"\"\nst.set_page_config(page_title=\"Bank Loan application - Dashboard\", page_icon=\"\", layout=\"wide\")\nst.markdown('<style>body{background-color: #00A8A8}<\/style>',unsafe_allow_html=True)\nst.markdown(html_header, unsafe_allow_html=True)\n\n\n\n# If we want to hide to default button on the top right \n#st.markdown(\"\"\" <style>\n#MainMenu {visibility: hidden;}\n#footer {visibility: hidden;}\n#<\/style> \"\"\", unsafe_allow_html=True)\n\n\n\n# If you want to remove the default margins\n#padding = 1\n#st.markdown(f\"\"\" <style>\n#    .reportview-container .main .block-container{{\n#        padding-top: {padding}rem;\n#        padding-right: {padding}rem;\n#        padding-left: {padding}rem;\n#        padding-bottom: {padding}rem;\n#    }} <\/style> \"\"\", unsafe_allow_html=True)\n\n\n# ====================================================================\n# LET'S LOAD EVERY DATASETS WITH MEMORY OPTIMISATION\n# ====================================================================\n#We are working with big dataset. It might be financial & time consuming.\n#In order to optimize it, we will work with the memory cache (it will avoid a complete recalculation\n#everytime we are making small changes).\n@st.cache(persist=True)\ndef load():\n    with st.spinner('Import des donn\u00e9es'):\n        # we import the dataframe related to the personal information of the customer\n        fic_client_info = FILE_CLIENT_INFO\n        with open(fic_client_info, 'rb') as df_info_client:\n            df_info_client = pickle.load(df_info_client)\n\n        # we import the dataframe related to the loan request of the customer\n        fic_client_pret = FILE_CLIENT_PRET\n        with open(fic_client_pret, 'rb') as df_pret_client:\n            df_pret_client = pickle.load(df_pret_client)\n\n        # we import the dataframe related to the neighbours personal data\n        fic_voisin_info = FILE_VOISINS_INFO\n        with open(fic_voisin_info, 'rb') as df_info_voisins:\n            df_info_voisins = pickle.load(df_info_voisins)\n\n        # we import the dataframe related to the loan request of the neighbours\n        fic_voisin_pret = FILE_VOISIN_PRET\n        with open(fic_voisin_pret, 'rb') as df_pret_voisins:\n            df_pret_voisins = pickle.load(df_pret_voisins)\n\n        # we import the dataframe related to the dashboard\n        fic_dashboard = FILE_DASHBOARD\n        with open(fic_dashboard, 'rb') as df_dashboard:\n            df_dashboard = pickle.load(df_dashboard)\n\n        # we import the dataframe related to the neighbours\n        fic_voisin_train_agg = FILE_VOISIN_AGG\n        with open(fic_voisin_train_agg, 'rb') as df_voisin_train_agg:\n            df_voisin_train_agg = pickle.load(df_voisin_train_agg)\n\n        # we import the dataframe aggregated related to the trained data\n        fic_all_train_agg = FILE_ALL_TRAIN_AGG\n        with open(fic_all_train_agg, 'rb') as df_all_train_agg:\n            df_all_train_agg = pickle.load(df_all_train_agg)\n\n        # we import the dataframe related to the test data\n        with open(FILE_TEST_SET, 'rb') as df_test_set:\n            test_set = pickle.load(df_test_set)\n\n        # we import the dataframe related to the test application\n        with open(FILE_APPLICATION_TEST, 'rb') as df_application_test:\n            application_test = pickle.load(df_application_test)\n\n    # we import the best model selected and trained (see the kaggle notebook for the details : lgbm)\n    with st.spinner('Import du mod\u00e8le'):\n        fic_best_model = FILE_BEST_MODELE\n        with open(fic_best_model, 'rb') as model_lgbm:\n            best_model = pickle.load(model_lgbm)\n\n    # SHAP values\n    with st.spinner('Lancement SHAP values'):\n        # Test set without ID\n        X_bar = test_set.set_index('SK_ID_CURR')\n        # Shap training on the train set\n        bar_explainer = shap.Explainer(best_model, X_bar)\n        bar_values = bar_explainer(X_bar, check_additivity=False)\n\n    return df_info_client, df_pret_client, df_info_voisins, df_pret_voisins, \\\n           df_dashboard, df_voisin_train_agg, df_all_train_agg, test_set, \\\n           application_test, best_model, bar_values\n\n\n# Now we can load the dataframe and the model.\ndf_info_client, df_pret_client, df_info_voisins, df_pret_voisins, \\\ndf_dashboard, df_voisin_train_agg, df_all_train_agg, test_set, \\\napplication_test, best_model, bar_values = load()\n\n# ====================================================================\n# CUSTOMER SELECTION\n# ====================================================================\n\nhtml_select_client = \"\"\"\n    <div class=\"card\">\n      <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #00A8A8; padding-top: 5px; width: auto;\n                  height: 40px;\">\n        <h3 class=\"card-title\" style=\"background-color:#00A8A8; color:white;\n                   font-family:Arial; text-align: center; padding: 0px 0;\">\n          Customer information & Loan expectation\n        <\/h3>\n      <\/div>\n    <\/div>\n    \"\"\"\n\nst.markdown(html_select_client, unsafe_allow_html=True)\n\nwith st.container():\n    col1, col2 = st.columns([1, 3])\n    with col1:\n        st.write(\"\")\n        col1.header(\"**Customer ID**\")\n        client_id = col1.selectbox('Select your customer ID :',\n                                   df_info_voisins['ID_CLIENT'].unique())\n    with col2:\n        # Customer : Main informations\n        # st.write(\"*Traits stricts*\")\n        client_info = df_info_client[df_info_client['SK_ID_CURR'] == client_id].iloc[:, :]\n        client_info.set_index('SK_ID_CURR', inplace=True)\n        st.table(client_info)\n        # Main information related to the loan request\n        # st.write(\"*Loan request*\")\n        client_pret = df_pret_client[df_pret_client['SK_ID_CURR'] == client_id].iloc[:, :]\n        client_pret.set_index('SK_ID_CURR', inplace=True)\n        st.table(client_pret)\n\n# ====================================================================\n# SCORING - PREDICTIONS\n# ====================================================================\n\nhtml_score = \"\"\"\n    <div class=\"card\">\n      <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #00A8A8; padding-top: 5px; width: auto;\n                  height: 40px;\">\n        <h3 class=\"card-title\" style=\"background-color:#00A8A8; color:white;\n                   font-family:Arial; text-align: center; padding: 0px 0;\">\n          Scoring\n        <\/h3>\n      <\/div>\n    <\/div>\n    \"\"\"\n\nst.markdown(html_score, unsafe_allow_html=True)\n\n# Let's prepare the data we want to include in our scoring gauge ==============================================\n\n# ============== Customer scoring of the customer in % ==> let's use the selected model ======================\n# Let's use the features of the customers\nX_test = test_set[test_set['SK_ID_CURR'] == client_id]\n# Predictive scoring - probabilities\ny_proba = best_model.predict_proba(X_test.drop('SK_ID_CURR', axis=1))[:, 1]\n# Customer score in percentage rounded and integer\nscore_client = int(np.rint(y_proba * 100))\n\n# ============== Average score of the 10 closest neighbours of the test group (in percentage) =============\n\n# Average score of the 10 closest to the test set in percentage.\nscore_moy_voisins_test = int(np.rint(df_dashboard[\n                                         df_dashboard['SK_ID_CURR'] == client_id]['SCORE_10_VOISINS_MEAN_TEST'] * 100))\n\n# ============== Pourcentage of defaulting neighbouring customers in customer history =======\npourc_def_voisins_train = int(np.rint(df_dashboard[\n                                          df_dashboard['SK_ID_CURR'] == client_id]['%_NB_10_VOISINS_DEFAILLANT_TRAIN']))\n\n# ============== Predicted pourcentage of failed neighbouring customers among new customers ==\npourc_def_voisins_test = int(np.rint(df_dashboard[\n                                         df_dashboard['SK_ID_CURR'] == client_id]['%_NB_10_VOISINS_DEFAILLANT_TEST']))\n\n# Score Yield Gauge Graph ==========================================\nfig_jauge = go.Figure(go.Indicator(\n    mode='gauge+number+delta',\n    # Customer scoring in % df_dashboard['SCORE_CLIENT_%']\n    value=score_client,\n    domain={'x': [0, 1], 'y': [0, 1]},\n    title={'text': 'Cr\u00e9dit score du client', 'font': {'size': 24}},\n    # Scoring of the 10 neighbourgs - test set\n    # df_dashboard['SCORE_10_VOISINS_MEAN_TEST']\n    delta={'reference': score_moy_voisins_test,\n           'increasing': {'color': 'Crimson'},\n           'decreasing': {'color': 'Green'}},\n    gauge={'axis': {'range': [None, 100],\n                    'tickwidth': 3,\n                    'tickcolor': 'darkblue'},\n           'bar': {'color': 'white', 'thickness': 0.25},\n           'bgcolor': 'white',\n           'borderwidth': 2,\n           'bordercolor': 'gray',\n           'steps': [{'range': [0, 25], 'color': 'Green'},\n                     {'range': [25, 49.49], 'color': 'LimeGreen'},\n                     {'range': [49.5, 50.5], 'color': 'red'},\n                     {'range': [50.51, 75], 'color': 'Orange'},\n                     {'range': [75, 100], 'color': 'Crimson'}],\n           'threshold': {'line': {'color': 'white', 'width': 10},\n                         'thickness': 0.8,\n                         # Customer scoring in %\n                         # df_dashboard['SCORE_CLIENT_%']\n                         'value': score_client}}))\n\nfig_jauge.update_layout(paper_bgcolor='white',\n                        height=400, width=500,\n                        font={'color': 'darkblue', 'family': 'Arial'},\n                        margin=dict(l=0, r=0, b=0, t=0, pad=0))\n\nwith st.container():\n    # GAUGE + summary of average score of neighbours\n    col1, col2 = st.columns([1.5, 1])\n    with col1:\n        st.plotly_chart(fig_jauge)\n    with col2:\n        st.write(\"\")\n        st.write(\"\")\n        st.write(\"\")\n        st.write(\"\")\n        st.write(\"\")\n        # Texte d'accompagnement de la jauge\n        if 0 <= score_client < 25:\n            score_text = 'Cr\u00e9dit score : EXCELLENT'\n            st.success(score_text)\n        elif 25 <= score_client < 50:\n            score_text = 'Cr\u00e9dit score : BON'\n            st.success(score_text)\n        elif 50 <= score_client < 75:\n            score_text = 'Cr\u00e9dit score : MOYEN'\n            st.warning(score_text)\n        else:\n            score_text = 'Cr\u00e9dit score : BAS'\n            st.error(score_text)\n        st.write(\"\")\n        st.markdown(f'Cr\u00e9dit score moyen des 10 clients similaires : **{score_moy_voisins_test}**')\n        st.markdown(f'**{pourc_def_voisins_train}**% de clients voisins r\u00e9ellement d\u00e9faillants dans l\\'historique')\n        st.markdown(f'**{pourc_def_voisins_test}**% de clients voisins d\u00e9faillants pr\u00e9dits pour les nouveaux clients')\n\n# ====================================================================\n# SIDEBAR\n# ====================================================================\n\n# All The current customer\u2019s unmodified information\ndf_client_origin = application_test[application_test['SK_ID_CURR'] == client_id]\n\n# All The current customer\u2019s unmodified information\ndf_client_test = test_set[test_set['SK_ID_CURR'] == client_id]\n\n# All current customer information\ndf_client_courant = df_dashboard[df_dashboard['SK_ID_CURR'] == client_id]\n\n# --------------------------------------------------------------------\n# LOGO\n# --------------------------------------------------------------------\n# Loading the company logo\nst.sidebar.image(logo, width=240, caption=\" Dashboard - Aide \u00e0 la d\u00e9cision\",\n                 use_column_width='always')\n\n\n# --------------------------------------------------------------------\n# MORE INFORMATION\n# --------------------------------------------------------------------\ndef all_infos_clients():\n    ''' Affiche toutes les informations sur le client courant\n    '''\n    html_all_infos_clients = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #00A8A8; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#00A8A8; color:white;\n                      font-family:Arial; text-align: center; padding: 0px 0;\">\n                      Additional informations\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir toutes infos clients ?\"):\n        st.markdown(html_all_infos_clients, unsafe_allow_html=True)\n\n        with st.spinner('**Affiche toutes les informations sur le client courant...**'):\n            with st.expander('Toutes les informations du client courant',\n                             expanded=True):\n                st.dataframe(df_client_origin)\n                st.dataframe(df_client_test)\n\n\nst.sidebar.subheader('Plus infos')\nall_infos_clients()\n\n\n# --------------------------------------------------------------------\n# CLIENTS SIMILAIRES\n# --------------------------------------------------------------------\ndef infos_clients_similaires():\n    ''' Affiche les informations sur les clients similaires :\n            - traits stricts.\n            - demande de pr\u00eat\n    '''\n    html_clients_similaires = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #00A8A8; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#00A8A8; color:white;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Comparison with customers who have similar profiles\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    titre = True\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir graphiques comparatifs ?\"):\n\n        if titre:\n            st.markdown(html_clients_similaires, unsafe_allow_html=True)\n            titre = False\n\n        with st.spinner('**Affiche les graphiques comparant le client courant et les clients similaires...**'):\n\n            with st.expander('Comparaison variables impactantes client courant\/moyennes des clients similaires',\n                             expanded=True):\n                with st.container():\n                    # Pr\u00e9paratifs dataframe\n                    df_client = df_voisin_train_agg[df_voisin_train_agg['ID_CLIENT'] == client_id].astype(int)\n                    # ====================================================================\n                    # Lineplot comparatif features importances client courant\/voisins\n                    # ====================================================================\n\n                    # ===================== Valeurs moyennes des features importances pour le client courant =====================\n                    df_feat_client = df_client_courant[['SK_ID_CURR', 'AMT_ANNUITY',\n                                                        'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                                        'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                                        'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                                        'CAR_EMPLOYED_RATIO', 'CODE_GENDER',\n                                                        'CREDIT_ANNUITY_RATIO', 'CREDIT_GOODS_RATIO',\n                                                        'DAYS_BIRTH', 'DAYS_ID_PUBLISH',\n                                                        'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3',\n                                                        'EXT_SOURCE_MAX', 'EXT_SOURCE_SUM',\n                                                        'FLAG_OWN_CAR', 'INST_PAY_AMT_INSTALMENT_SUM',\n                                                        'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                                        'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                                        'PREV_APP_INTEREST_SHARE_MAX']]\n                    df_feat_client['YEAR_BIRTH'] = \\\n                        np.trunc(np.abs(df_feat_client['DAYS_BIRTH'] \/ 365)).astype('int8')\n                    df_feat_client['YEAR_ID_PUBLISH'] = \\\n                        np.trunc(np.abs(df_feat_client['DAYS_ID_PUBLISH'] \/ 365)).astype('int8')\n                    df_feat_client.drop(columns=['DAYS_BIRTH', 'DAYS_ID_PUBLISH'],\n                                        inplace=True)\n                    df_feat_client_gp1 = df_feat_client[group_val1]\n                    df_feat_client_gp2 = df_feat_client[group_val2]\n                    # X\n                    x_gp1 = df_feat_client_gp1.columns.to_list()\n                    x_gp2 = df_feat_client_gp2.columns.to_list()\n                    # y\n                    y_feat_client_gp1 = df_feat_client_gp1.values[0].tolist()\n                    y_feat_client_gp2 = df_feat_client_gp2.values[0].tolist()\n\n                    # ===================== Valeurs moyennes des features importances pour les 10 voisins =======================\n                    df_moy_feat_voisins = df_client[['ID_CLIENT', 'AMT_ANNUITY_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN',\n                                                     'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN',\n                                                     'CAR_EMPLOYED_RATIO_MEAN', 'CODE_GENDER_MEAN',\n                                                     'CREDIT_ANNUITY_RATIO_MEAN', 'CREDIT_GOODS_RATIO_MEAN',\n                                                     'DAYS_BIRTH_MEAN', 'DAYS_ID_PUBLISH_MEAN',\n                                                     'EXT_SOURCE_1_MEAN', 'EXT_SOURCE_2_MEAN', 'EXT_SOURCE_3_MEAN',\n                                                     'EXT_SOURCE_MAX_MEAN', 'EXT_SOURCE_SUM_MEAN',\n                                                     'FLAG_OWN_CAR_MEAN', 'INST_PAY_AMT_INSTALMENT_SUM_MEAN',\n                                                     'INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN',\n                                                     'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN',\n                                                     'PREV_APP_INTEREST_SHARE_MAX_MEAN']]\n                    df_moy_feat_voisins['YEAR_BIRTH_MEAN'] = \\\n                        np.trunc(np.abs(df_moy_feat_voisins['DAYS_BIRTH_MEAN'] \/ 365)).astype('int8')\n                    df_moy_feat_voisins['YEAR_ID_PUBLISH_MEAN'] = \\\n                        np.trunc(np.abs(df_moy_feat_voisins['DAYS_ID_PUBLISH_MEAN'] \/ 365)).astype('int8')\n                    df_moy_feat_voisins.drop(columns=['DAYS_BIRTH_MEAN', 'DAYS_ID_PUBLISH_MEAN'],\n                                             inplace=True)\n                    df_moy_feat_voisins_gp3 = df_moy_feat_voisins[group_val3]\n                    df_moy_feat_voisins_gp4 = df_moy_feat_voisins[group_val4]\n                    # y\n                    y_moy_feat_voisins_gp3 = df_moy_feat_voisins_gp3.values[0].tolist()\n                    y_moy_feat_voisins_gp4 = df_moy_feat_voisins_gp4.values[0].tolist()\n\n                    # ===================== Valeurs moyennes de tous les clients non-d\u00e9faillants\/d\u00e9faillants du train sets =======================\n                    df_all_train = df_all_train_agg[['TARGET', 'AMT_ANNUITY_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN',\n                                                     'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN',\n                                                     'CAR_EMPLOYED_RATIO_MEAN', 'CODE_GENDER_MEAN',\n                                                     'CREDIT_ANNUITY_RATIO_MEAN', 'CREDIT_GOODS_RATIO_MEAN',\n                                                     'YEAR_BIRTH_MEAN', 'DAYS_ID_PUBLISH_MEAN',\n                                                     'EXT_SOURCE_1_MEAN', 'EXT_SOURCE_2_MEAN', 'EXT_SOURCE_3_MEAN',\n                                                     'EXT_SOURCE_MAX_MEAN', 'EXT_SOURCE_SUM_MEAN',\n                                                     'FLAG_OWN_CAR_MEAN', 'INST_PAY_AMT_INSTALMENT_SUM_MEAN',\n                                                     'INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN',\n                                                     'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN',\n                                                     'PREV_APP_INTEREST_SHARE_MAX_MEAN']]\n                    df_all_train['YEAR_ID_PUBLISH_MEAN'] = \\\n                        np.trunc(np.abs(df_all_train['DAYS_ID_PUBLISH_MEAN'] \/ 365)).astype('int8')\n                    df_all_train.drop(columns=['DAYS_ID_PUBLISH_MEAN'],\n                                      inplace=True)\n                    # Non-d\u00e9faillants\n                    df_all_train_nondef_gp3 = df_all_train[df_all_train['TARGET'] == 0][group_val3]\n                    df_all_train_nondef_gp4 = df_all_train[df_all_train['TARGET'] == 0][group_val4]\n                    # D\u00e9faillants\n                    df_all_train_def_gp3 = df_all_train[df_all_train['TARGET'] == 1][group_val3]\n                    df_all_train_def_gp4 = df_all_train[df_all_train['TARGET'] == 1][group_val4]\n                    # y\n                    # Non-d\u00e9faillants\n                    y_all_train_nondef_gp3 = df_all_train_nondef_gp3.values[0].tolist()\n                    y_all_train_nondef_gp4 = df_all_train_nondef_gp4.values[0].tolist()\n                    # D\u00e9faillants\n                    y_all_train_def_gp3 = df_all_train_def_gp3.values[0].tolist()\n                    y_all_train_def_gp4 = df_all_train_def_gp4.values[0].tolist()\n\n                    # L\u00e9gende des courbes\n                    st.image(lineplot_legende)\n\n                    col1, col2 = st.columns([1, 1.5])\n                    with col1:\n                        # Lineplot de comparaison des features importances client courant\/voisins\/all ================\n                        plt.figure(figsize=(6, 6))\n                        plt.plot(x_gp1, y_feat_client_gp1, color='Orange')\n                        plt.plot(x_gp1, y_moy_feat_voisins_gp3, color='SteelBlue')\n                        plt.plot(x_gp1, y_all_train_nondef_gp3, color='Green')\n                        plt.plot(x_gp1, y_all_train_def_gp3, color='Crimson')\n                        plt.xticks(rotation=90)\n                        st.set_option('deprecation.showPyplotGlobalUse', False)\n                        st.pyplot()\n                    with col2:\n                        # Lineplot de comparaison des features importances client courant\/voisins\/all ================\n                        plt.figure(figsize=(8, 5))\n                        plt.plot(x_gp2, y_feat_client_gp2, color='Orange')\n                        plt.plot(x_gp2, y_moy_feat_voisins_gp4, color='SteelBlue')\n                        plt.plot(x_gp2, y_all_train_nondef_gp4, color='Green')\n                        plt.plot(x_gp2, y_all_train_def_gp4, color='Crimson')\n                        plt.xticks(rotation=90)\n                        st.set_option('deprecation.showPyplotGlobalUse', False)\n                        st.pyplot()\n\n                    with st.container():\n\n                        vars_select = ['AMT_ANNUITY',\n                                       'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                       'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                       'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                       'CAR_EMPLOYED_RATIO',\n                                       'CODE_GENDER',\n                                       'CREDIT_ANNUITY_RATIO',\n                                       'CREDIT_GOODS_RATIO',\n                                       'EXT_SOURCE_1',\n                                       'EXT_SOURCE_2',\n                                       'EXT_SOURCE_3',\n                                       'EXT_SOURCE_MAX',\n                                       'EXT_SOURCE_SUM',\n                                       'FLAG_OWN_CAR',\n                                       'INST_PAY_AMT_INSTALMENT_SUM',\n                                       'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                       'NAME_EDUCATION_TYPE_HIGHER_EDUCATION',\n                                       'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                       'PREV_APP_INTEREST_SHARE_MAX',\n                                       'YEAR_BIRTH',\n                                       'YEAR_ID_PUBLISH']\n\n                        feat_imp_to_show = st.multiselect(\"Feature(s) importance(s) \u00e0 visualiser : \",\n                                                          vars_select)\n\n                        # ==============================================================\n                        # Variable AMT_ANNUITY\n                        # Annuit\u00e9 du pr\u00eat\n                        # ==============================================================\n\n                        if 'AMT_ANNUITY' in feat_imp_to_show:\n                            with st.spinner('**Chargement du graphique comparatif AMT_ANNUITY...**'):\n                                amt_min = int(df_client.AMT_ANNUITY_MIN.values)\n                                amt_q25 = int(df_client.AMT_ANNUITY_Q25.values)\n                                amt_mean = int(df_client.AMT_ANNUITY_MEAN.values)\n                                amt_q75 = int(df_client.AMT_ANNUITY_Q75.values)\n                                amt_max = int(df_client.AMT_ANNUITY_MAX.values)\n                                amt_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'AMT_ANNUITY'].values)\n                                amt_axis_min = min(amt_min, amt_client)\n                                amt_axis_max = max(amt_max, amt_client)\n\n                                fig_amt = go.Figure()\n\n                                fig_amt.add_trace(go.Indicator(\n                                    mode=\"number+gauge+delta\",\n                                    value=amt_client,\n                                    delta={'reference': amt_mean,\n                                           'increasing': {'color': 'Crimson'},\n                                           'decreasing': {'color': 'Green'}},\n                                    domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                    title={'text': 'Annuit\u00e9', 'font': {'size': 12},\n                                           'align': 'left'},\n                                    gauge={\n                                        'shape': 'bullet',\n                                        'axis': {'range': [amt_axis_min, amt_axis_max]},\n                                        'threshold': {\n                                            'line': {'color': 'black', 'width': 3},\n                                            'thickness': 0.75,\n                                            'value': amt_client},\n                                        'steps': [\n                                            {'range': [0, amt_min], 'color': 'white'},\n                                            {'range': [amt_min, amt_q25], 'color': '#de3a5b'},\n                                            {'range': [amt_q25, amt_mean], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [amt_mean, amt_q75], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [amt_q75, amt_max], 'color': '#de3a5b'}],\n                                        'bar': {'color': 'black'}}))\n\n                                fig_amt.update_layout(height=200,\n                                                      margin={'t': 0, 'b': 0, 'l': 0})\n\n                                st.markdown(html_AMT_ANNUITY, unsafe_allow_html=True)\n\n                                # ==================== Go Indicator bullets ==============================================\n                                st.plotly_chart(fig_amt)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='AMT_ANNUITY',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         amt_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['AMT_ANNUITY'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['AMT_ANNUITY'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('AMT_ANNUITY', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=amt_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN\n                        # Valeur minimum de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle\n                        # de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit\n                        # ==============================================================\n                        if 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN' in feat_imp_to_show:\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN...**'):\n                                bccddm_min = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MIN.values)\n                                bccddm_q25 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_Q25.values)\n                                bccddm_mean = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN.values)\n                                bccddm_q75 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_Q75.values)\n                                bccddm_max = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MAX.values)\n                                bccddm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                        'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN'].values)\n                                bccddm_axis_min = min(bccddm_min, bccddm_client)\n                                bccddm_axis_max = max(bccddm_max, bccddm_client)\n\n                                fig_bccdm = go.Figure()\n\n                                fig_bccdm.add_trace(go.Indicator(\n                                    mode=\"number+gauge+delta\",\n                                    value=bccddm_client,\n                                    delta={'reference': bccddm_mean,\n                                           'increasing': {'color': 'Crimson'},\n                                           'decreasing': {'color': 'Green'}},\n                                    domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                    title={'text': 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                           'font': {'size': 9}, 'align': 'left'},\n                                    gauge={\n                                        'shape': 'bullet',\n                                        'axis': {'range': [bccddm_axis_min, bccddm_axis_max]},\n                                        'threshold': {\n                                            'line': {'color': 'black', 'width': 3},\n                                            'thickness': 0.75,\n                                            'value': bccddm_client},\n                                        'steps': [\n                                            {'range': [0, bccddm_min], 'color': 'white'},\n                                            {'range': [bccddm_min, bccddm_q25], 'color': '#de3a5b'},\n                                            {'range': [bccddm_q25, bccddm_mean], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddm_mean, bccddm_q75], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddm_q75, bccddm_max], 'color': '#de3a5b'}],\n                                        'bar': {'color': 'black'}}))\n\n                                fig_bccdm.update_layout(height=200,\n                                                        margin={'t': 0, 'b': 0, 'l': 0})\n\n                                st.markdown(html_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN, unsafe_allow_html=True)\n\n                                # Go Indicator bullets\n                                st.plotly_chart(fig_bccdm)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         bccddm_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=bccddm_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN\n                        # Valeur moyenne de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle\n                        # de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit\n                        # ==============================================================\n                        if 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN' in feat_imp_to_show:\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN...**'):\n                                bccddmean_min = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MIN.values)\n                                bccddmean_q25 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_Q25.values)\n                                bccddmean_mean = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN.values)\n                                bccddmean_q75 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_Q75.values)\n                                bccddmean_max = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MAX.values)\n                                bccddmean_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                           'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN'].values)\n                                bccddmean_axis_min = min(bccddmean_min, bccddmean_client)\n                                bccddmean_axis_max = max(bccddmean_max, bccddmean_client)\n\n                                fig_bccddmean = go.Figure()\n\n                                fig_bccddmean.add_trace(go.Indicator(\n                                    mode=\"number+gauge+delta\",\n                                    value=bccddmean_client,\n                                    delta={'reference': bccddmean_mean,\n                                           'increasing': {'color': 'Crimson'},\n                                           'decreasing': {'color': 'Green'}},\n                                    domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                    title={'text': 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                           'font': {'size': 9}, 'align': 'left'},\n                                    gauge={\n                                        'shape': 'bullet',\n                                        'axis': {'range': [bccddmean_axis_min, bccddmean_axis_max]},\n                                        'threshold': {\n                                            'line': {'color': 'black', 'width': 3},\n                                            'thickness': 0.75,\n                                            'value': bccddmean_client},\n                                        'steps': [\n                                            {'range': [0, bccddmean_min], 'color': 'white'},\n                                            {'range': [bccddmean_min, bccddmean_q25], 'color': '#de3a5b'},\n                                            {'range': [bccddmean_q25, bccddmean_mean], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddmean_mean, bccddmean_q75], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddmean_q75, bccddmean_max], 'color': '#de3a5b'}],\n                                        'bar': {'color': 'black'}}))\n\n                                fig_bccddmean.update_layout(height=200,\n                                                            margin={'t': 0, 'b': 0, 'l': 0})\n\n                                st.markdown(html_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN, unsafe_allow_html=True)\n\n                                # Go Indicator bullets\n                                st.plotly_chart(fig_bccddmean)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         bccddmean_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=bccddmean_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                        # ==============================================================\n                        # Variable BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN\n                        # Moyenne de du ratio des pr\u00eats pr\u00e9c\u00e9dents sur d'autres institution de :\n                        # la dette actuelle sur le cr\u00e9dit et la limite de cr\u00e9dit actuelle de la\n                        # carte de cr\u00e9dit\n                        # ==============================================================\n                        if 'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN' in feat_imp_to_show:\n\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN...**'):\n\n                                bcdtcrm_min = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MIN.values * 100)\n                                bcdtcrm_q25 = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_Q25.values * 100)\n                                bcdtcrm_mean = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN.values * 100)\n                                bcdtcrm_q75 = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_Q75.values * 100)\n                                bcdtcrm_max = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MAX.values * 100)\n                                bcdtcrm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                         'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN'].values * 100)\n                                bcdtcrm_axis_min = min(bcdtcrm_min, bcdtcrm_client)\n                                bcdtcrm_axis_max = max(bcdtcrm_max, bcdtcrm_client)\n\n                                cond = bcdtcrm_client == bcdtcrm_min and bcdtcrm_min == bcdtcrm_q25 \\\n                                       and bcdtcrm_q25 == bcdtcrm_mean and bcdtcrm_mean == bcdtcrm_q75 \\\n                                       and bcdtcrm_q75 == bcdtcrm_max\n\n                                if not cond:\n\n                                    fig_bcdtcrm = go.Figure()\n\n                                    fig_bcdtcrm.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=bcdtcrm_client,\n                                        delta={'reference': bcdtcrm_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [bcdtcrm_axis_min, bcdtcrm_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': bcdtcrm_client},\n                                            'steps': [\n                                                {'range': [0, bcdtcrm_min], 'color': 'white'},\n                                                {'range': [bcdtcrm_min, bcdtcrm_q25], 'color': '#de3a5b'},\n                                                {'range': [bcdtcrm_q25, bcdtcrm_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [bcdtcrm_mean, bcdtcrm_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [bcdtcrm_q75, bcdtcrm_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_bcdtcrm.update_layout(height=200,\n                                                              margin={'t': 0, 'b': 0, 'l': 0})\n                                    st.markdown(html_BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_bcdtcrm)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             bcdtcrm_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=bcdtcrm_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                        # ==============================================================\n                        # Variable CAR_EMPLOYED_RATIO\n                        # Ratio : \u00c2ge de la voiture du demandeur \/ Anciennet\u00e9 dans l'emploi \u00e0 la\n                        # date de la demande\n                        # ==============================================================\n                        if 'CAR_EMPLOYED_RATIO' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif CAR_EMPLOYED_RATIO...**'):\n\n                                cer_max = int(df_client.CAR_EMPLOYED_RATIO_MIN.values * 1000)\n                                cer_q75 = int(df_client.CAR_EMPLOYED_RATIO_Q25.values * 1000)\n                                cer_mean = int(df_client.CAR_EMPLOYED_RATIO_MEAN.values * 1000)\n                                cer_q25 = int(df_client.CAR_EMPLOYED_RATIO_Q75.values * 1000)\n                                cer_min = int(df_client.CAR_EMPLOYED_RATIO_MAX.values * 1000)\n                                cer_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'CAR_EMPLOYED_RATIO'].values * 1000)\n                                cer_axis_min = min(cer_min, cer_client)\n                                cer_axis_max = max(cer_max, cer_client)\n\n                                cond = cer_client == cer_min and cer_min == cer_q25 and \\\n                                       cer_q25 == cer_mean and cer_mean == cer_q75 and \\\n                                       cer_q75 == cer_max\n\n                                if not cond:\n                                    fig_cer = go.Figure()\n\n                                    fig_cer.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=cer_client,\n                                        delta={'reference': cer_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'CAR_EMPLOYED_RATIO',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [cer_axis_min, cer_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': cer_client},\n                                            'steps': [\n                                                {'range': [0, cer_min], 'color': 'white'},\n                                                {'range': [cer_min, cer_q25], 'color': '#de3a5b'},\n                                                {'range': [cer_q25, cer_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cer_mean, cer_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cer_q75, cer_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_cer.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_CAR_EMPLOYED_RATIO, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_cer)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='CAR_EMPLOYED_RATIO',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             cer_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['CAR_EMPLOYED_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['CAR_EMPLOYED_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('CAR_EMPLOYED_RATIO', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=cer_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_CAR_EMPLOYED_RATIO, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable CREDIT_ANNUITY_RATIO\n                        # Ratio : montant du cr\u00e9dit du pr\u00eat \/ Annuit\u00e9 de pr\u00eat\n                        # ==============================================================\n                        if 'CREDIT_ANNUITY_RATIO' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif CREDIT_ANNUITY_RATIO...**'):\n\n                                car_min = int(df_client.CREDIT_ANNUITY_RATIO_MIN.values)\n                                car_q25 = int(df_client.CREDIT_ANNUITY_RATIO_Q25.values)\n                                car_mean = int(df_client.CREDIT_ANNUITY_RATIO_MEAN.values)\n                                car_q75 = int(df_client.CREDIT_ANNUITY_RATIO_Q75.values)\n                                car_max = int(df_client.CREDIT_ANNUITY_RATIO_MAX.values)\n                                car_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'CREDIT_ANNUITY_RATIO'].values)\n                                car_axis_min = min(car_min, car_client)\n                                car_axis_max = max(car_max, car_client)\n\n                                cond = car_client == car_min and car_min == car_q25 and \\\n                                       car_q25 == car_mean and car_mean == car_q75 \\\n                                       and car_q75 == car_max\n\n                                if not cond:\n                                    fig_car = go.Figure()\n\n                                    fig_car.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=car_client,\n                                        delta={'reference': car_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'CREDIT_ANNUITY_RATIO',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [car_axis_min, car_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': car_client},\n                                            'steps': [\n                                                {'range': [0, car_min], 'color': 'white'},\n                                                {'range': [car_min, car_q25], 'color': '#de3a5b'},\n                                                {'range': [car_q25, car_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [car_mean, car_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [car_q75, car_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_car.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_CREDIT_ANNUITY_RATIO, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_car)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='CREDIT_ANNUITY_RATIO',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             car_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_ANNUITY_RATIO'][df_dashboard[\n                                                                                          'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_ANNUITY_RATIO'][df_dashboard[\n                                                                                          'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('CREDIT_ANNUITY_RATIO', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=car_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_CREDIT_ANNUITY_RATIO, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable CREDIT_GOODS_RATIO\n                        # Ratio : Montant du cr\u00e9dit du pr\u00eat \/ prix des biens pour lesquels le pr\u00eat\n                        # est accord\u00e9 \/ Cr\u00e9dit est sup\u00e9rieur au prix des biens ?\n                        # ==============================================================\n                        if 'CREDIT_GOODS_RATIO' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif CREDIT_GOODS_RATIO...**'):\n\n                                cgr_min = int(df_client.CREDIT_GOODS_RATIO_MIN.values * 100)\n                                cgr_q25 = int(df_client.CREDIT_GOODS_RATIO_Q25.values * 100)\n                                cgr_mean = int(df_client.CREDIT_GOODS_RATIO_MEAN.values * 100)\n                                cgr_q75 = int(df_client.CREDIT_GOODS_RATIO_Q75.values * 100)\n                                cgr_max = int(df_client.CREDIT_GOODS_RATIO_MAX.values * 100)\n                                cgr_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'CREDIT_GOODS_RATIO'].values * 100)\n                                cgr_axis_min = min(cgr_min, cgr_client)\n                                cgr_axis_max = max(cgr_max, cgr_client)\n\n                                cond = cgr_client == cgr_min and cgr_min == cgr_q25 \\\n                                       and cgr_q25 == cgr_mean and cgr_mean == cgr_q75 \\\n                                       and cgr_q75 == cgr_max\n\n                                if not cond:\n                                    fig_cgr = go.Figure()\n\n                                    fig_cgr.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=cgr_client,\n                                        delta={'reference': cgr_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'CREDIT_GOODS_RATIO',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [cgr_axis_min, cgr_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': cgr_client},\n                                            'steps': [\n                                                {'range': [0, cgr_min], 'color': 'white'},\n                                                {'range': [cgr_min, cgr_q25], 'color': '#de3a5b'},\n                                                {'range': [cgr_q25, cgr_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cgr_mean, cgr_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cgr_q75, cgr_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_cgr.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_CREDIT_GOODS_RATIO, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_cgr)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='CREDIT_GOODS_RATIO',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             cgr_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_GOODS_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_GOODS_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('CREDIT_GOODS_RATIO', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=cgr_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_CREDIT_GOODS_RATIO, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable YEAR_BIRTH\n                        # \u00c2ge (ans)\n                        # ==============================================================\n                        if 'YEAR_BIRTH' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif YEAR_BIRTH...**'):\n\n                                age_max = int(-df_client.DAYS_BIRTH_MIN.values \/ 365)\n                                age_q75 = int(-df_client.DAYS_BIRTH_Q25.values \/ 365)\n                                age_mean = int(-df_client.DAYS_BIRTH_MEAN.values \/ 365)\n                                age_q25 = int(-df_client.DAYS_BIRTH_Q75.values \/ 365)\n                                age_min = int(-df_client.DAYS_BIRTH_MAX.values \/ 365)\n                                age_client = int(-df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                    'DAYS_BIRTH'].values \/ 365)\n                                age_axis_min = min(age_min, age_client)\n                                age_axis_max = max(age_max, age_client)\n\n                                cond = age_client == age_min and age_min == age_q25 and \\\n                                       age_q25 == age_mean and age_mean == age_q75 and age_q75 == age_max\n\n                                if not cond:\n                                    fig_age = go.Figure()\n\n                                    fig_age.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=age_client,\n                                        delta={'reference': age_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': '\u00c2ge',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [age_axis_min, age_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': age_client},\n                                            'steps': [\n                                                {'range': [0, age_min], 'color': 'white'},\n                                                {'range': [age_min, age_q25], 'color': '#de3a5b'},\n                                                {'range': [age_q25, age_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [age_mean, age_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [age_q75, age_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_age.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_YEAR_BIRTH, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_age)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='YEAR_BIRTH',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             age_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['YEAR_BIRTH'][df_dashboard[\n                                                                                'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['YEAR_BIRTH'][df_dashboard[\n                                                                                'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('YEAR_BIRTH', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=age_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_YEAR_BIRTH, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable YEAR_ID_PUBLISH\n                        # Combien de jours avant la demande le client a-t-il chang\u00e9 la pi\u00e8ce\n                        # d'identit\u00e9 avec laquelle il a demand\u00e9 le pr\u00eat ? (ans)\n                        # ==============================================================\n                        if 'YEAR_ID_PUBLISH' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif YEAR_ID_PUBLISH...**'):\n\n                                dip_max = int(-df_client.DAYS_ID_PUBLISH_MIN.values \/ 365)\n                                dip_q75 = int(-df_client.DAYS_ID_PUBLISH_Q25.values \/ 365)\n                                dip_mean = int(-df_client.DAYS_ID_PUBLISH_MEAN.values \/ 365)\n                                dip_q25 = int(-df_client.DAYS_ID_PUBLISH_Q75.values \/ 365)\n                                dip_min = int(-df_client.DAYS_ID_PUBLISH_MAX.values \/ 365)\n                                dip_client = int(-df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                    'DAYS_ID_PUBLISH'].values \/ 365)\n                                dip_axis_min = min(dip_min, dip_client)\n                                dip_axis_max = max(dip_max, dip_client)\n\n                                cond = dip_client == dip_min and dip_min == dip_q25 and \\\n                                       dip_q25 == dip_mean and dip_mean == dip_q75 and dip_q75 == dip_max\n\n                                if not cond:\n                                    fig_dip = go.Figure()\n\n                                    fig_dip.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=dip_client,\n                                        delta={'reference': dip_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'DAYS_ID_PUBLISH',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [dip_axis_min, dip_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': dip_client},\n                                            'steps': [\n                                                {'range': [0, dip_min], 'color': 'white'},\n                                                {'range': [dip_min, dip_q25], 'color': '#de3a5b'},\n                                                {'range': [dip_q25, dip_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [dip_mean, dip_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [dip_q75, dip_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_dip.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_YEAR_ID_PUBLISH, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_dip)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='DAYS_ID_PUBLISH',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             dip_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['DAYS_ID_PUBLISH'][df_dashboard[\n                                                                                     'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['DAYS_ID_PUBLISH'][df_dashboard[\n                                                                                     'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('DAYS_ID_PUBLISH', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=dip_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_YEAR_ID_PUBLISH, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_1\n                        # Source externe normalis\u00e9e\n                        # ==============================================================\n                        if 'EXT_SOURCE_1' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_1...**'):\n\n                                es1_min = int(df_client.EXT_SOURCE_1_MIN.values * 100)\n                                es1_q25 = int(df_client.EXT_SOURCE_1_Q25.values * 100)\n                                es1_mean = int(df_client.EXT_SOURCE_1_MEAN.values * 100)\n                                es1_q75 = int(df_client.EXT_SOURCE_1_Q75.values * 100)\n                                es1_max = int(df_client.EXT_SOURCE_1_MAX.values * 100)\n                                es1_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_1'].values * 100)\n                                es1_axis_min = min(es1_min, es1_client)\n                                es1_axis_max = max(es1_max, es1_client)\n\n                                cond = es1_client == es1_min and es1_min == es1_q25 and \\\n                                       es1_q25 == es1_mean and es1_mean == es1_q75 and \\\n                                       es1_q75 == es1_max\n\n                                if not cond:\n                                    fig_es1 = go.Figure()\n\n                                    fig_es1.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=es1_client,\n                                        delta={'reference': es1_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_1',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [es1_axis_min, es1_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': es1_client},\n                                            'steps': [\n                                                {'range': [0, es1_min], 'color': 'white'},\n                                                {'range': [es1_min, es1_q25], 'color': '#de3a5b'},\n                                                {'range': [es1_q25, es1_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es1_mean, es1_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es1_q75, es1_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_es1.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_1, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_es1)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_1',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             es1_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_1'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_1'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_1', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=es1_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_1, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_2\n                        # Source externe normalis\u00e9e\n                        # ==============================================================\n                        if 'EXT_SOURCE_2' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_2...**'):\n\n                                es2_min = int(df_client.EXT_SOURCE_2_MIN.values * 100)\n                                es2_q25 = int(df_client.EXT_SOURCE_2_Q25.values * 100)\n                                es2_mean = int(df_client.EXT_SOURCE_2_MEAN.values * 100)\n                                es2_q75 = int(df_client.EXT_SOURCE_2_Q75.values * 100)\n                                es2_max = int(df_client.EXT_SOURCE_2_MAX.values * 100)\n                                es2_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_2'].values * 100)\n                                es2_axis_min = min(es2_min, es2_client)\n                                es2_axis_max = max(es2_max, es2_client)\n\n                                cond = es2_client == es2_min and es2_min == es2_q25 and \\\n                                       es2_q25 == es2_mean and es2_mean == es2_q75 and \\\n                                       es2_q75 == es2_max\n\n                                if not cond:\n                                    fig_es2 = go.Figure()\n\n                                    fig_es2.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=es2_client,\n                                        delta={'reference': es2_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_2',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [es2_axis_min, es2_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': es2_client},\n                                            'steps': [\n                                                {'range': [0, es2_min], 'color': 'white'},\n                                                {'range': [es2_min, es2_q25], 'color': '#de3a5b'},\n                                                {'range': [es2_q25, es2_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es2_mean, es2_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es2_q75, es2_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_es2.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_2, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_es2)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_2',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             es2_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_2'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_2'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_2', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=es2_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_2, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_3\n                        # Source externe normalis\u00e9e\n                        # ==============================================================\n                        if 'EXT_SOURCE_3' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_3...**'):\n\n                                es3_min = int(df_client.EXT_SOURCE_3_MIN.values * 100)\n                                es3_q25 = int(df_client.EXT_SOURCE_3_Q25.values * 100)\n                                es3_mean = int(df_client.EXT_SOURCE_3_MEAN.values * 100)\n                                es3_q75 = int(df_client.EXT_SOURCE_3_Q75.values * 100)\n                                es3_max = int(df_client.EXT_SOURCE_3_MAX.values * 100)\n                                es3_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_3'].values * 100)\n                                es3_axis_min = min(es3_min, es3_client)\n                                es3_axis_max = max(es3_max, es3_client)\n\n                                cond = es3_client == es3_min and es3_min == es3_q25 and \\\n                                       es3_q25 == es3_mean and es3_mean == es3_q75 and \\\n                                       es3_q75 == es3_max\n\n                                if not cond:\n                                    fig_es3 = go.Figure()\n\n                                    fig_es3.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=es3_client,\n                                        delta={'reference': es3_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_3',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [es3_axis_min, es3_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': es3_client},\n                                            'steps': [\n                                                {'range': [0, es3_min], 'color': 'white'},\n                                                {'range': [es3_min, es3_q25], 'color': '#de3a5b'},\n                                                {'range': [es3_q25, es3_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es3_mean, es3_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es3_q75, es3_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_es3.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_3, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_es3)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_3',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             es3_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_3'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_3'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_3', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=es3_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_3, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_MAX\n                        # Valeur maximale des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3)\n                        # ==============================================================\n                        if 'EXT_SOURCE_MAX' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_MAX...**'):\n\n                                esm_min = int(df_client.EXT_SOURCE_MAX_MIN.values * 100)\n                                esm_q25 = int(df_client.EXT_SOURCE_MAX_Q25.values * 100)\n                                esm_mean = int(df_client.EXT_SOURCE_MAX_MEAN.values * 100)\n                                esm_q75 = int(df_client.EXT_SOURCE_MAX_Q75.values * 100)\n                                esm_max = int(df_client.EXT_SOURCE_MAX_MAX.values * 100)\n                                esm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_MAX'].values * 100)\n                                esm_axis_min = min(esm_min, esm_client)\n                                esm_axis_max = max(esm_max, esm_client)\n\n                                cond = esm_client == esm_min and esm_min == esm_q25 and \\\n                                       esm_q25 == esm_mean and esm_mean == esm_q75 and \\\n                                       esm_q75 == esm_max\n\n                                if not cond:\n                                    fig_esm = go.Figure()\n\n                                    fig_esm.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=esm_client,\n                                        delta={'reference': esm_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_MAX',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [esm_axis_min, esm_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': esm_client},\n                                            'steps': [\n                                                {'range': [0, esm_min], 'color': 'white'},\n                                                {'range': [esm_min, esm_q25], 'color': '#de3a5b'},\n                                                {'range': [esm_q25, esm_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [esm_mean, esm_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [esm_q75, esm_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_esm.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_MAX, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_esm)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_MAX',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             esm_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_MAX'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_MAX'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_MAX', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=esm_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_MAX, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_SUM\n                        # Somme des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3)\n                        # ==============================================================\n                        if 'EXT_SOURCE_SUM' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_SUM...**'):\n\n                                ess_min = int(df_client.EXT_SOURCE_SUM_MIN.values * 100)\n                                ess_q25 = int(df_client.EXT_SOURCE_SUM_Q25.values * 100)\n                                ess_mean = int(df_client.EXT_SOURCE_SUM_MEAN.values * 100)\n                                ess_q75 = int(df_client.EXT_SOURCE_SUM_Q75.values * 100)\n                                ess_max = int(df_client.EXT_SOURCE_SUM_MAX.values * 100)\n                                ess_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_SUM'].values * 100)\n                                ess_axis_min = min(ess_min, ess_client)\n                                ess_axis_max = max(ess_max, ess_client)\n\n                                cond = ess_client == ess_min and ess_min == ess_q25 and \\\n                                       ess_q25 == ess_mean and ess_mean == ess_q75 and \\\n                                       ess_q75 == ess_max\n\n                                if not cond:\n                                    fig_ess = go.Figure()\n\n                                    fig_ess.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=ess_client,\n                                        delta={'reference': ess_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_SUM',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [ess_axis_min, ess_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': ess_client},\n                                            'steps': [\n                                                {'range': [0, ess_min], 'color': 'white'},\n                                                {'range': [ess_min, ess_q25], 'color': '#de3a5b'},\n                                                {'range': [ess_q25, ess_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ess_mean, ess_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ess_q75, ess_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_ess.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_SUM, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_ess)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_SUM',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             ess_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_SUM'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_SUM'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_SUM', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=ess_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_SUM, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable INST_PAY_AMT_INSTALMENT_SUM\n                        # Somme du montant de l'acompte prescrit des cr\u00e9dits pr\u00e9c\u00e9dents sur cet\n                        # acompte\n                        # ==============================================================\n                        if 'INST_PAY_AMT_INSTALMENT_SUM' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif INST_PAY_AMT_INSTALMENT_SUM...**'):\n\n                                ipais_min = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_MIN.values)\n                                ipais_q25 = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_Q25.values)\n                                ipais_mean = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_MEAN.values)\n                                ipais_q75 = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_Q75.values)\n                                ipais_max = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_MAX.values)\n                                ipais_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                       'INST_PAY_AMT_INSTALMENT_SUM'].values)\n                                ipais_axis_min = min(ipais_min, ipais_client)\n                                ipais_axis_max = max(ipais_max, ipais_client)\n\n                                cond = ipais_client == ipais_min and ipais_min == ipais_q25 and \\\n                                       ipais_q25 == ipais_mean and ipais_mean == ipais_q75 and \\\n                                       ipais_q75 == ipais_max\n\n                                if not cond:\n                                    fig_ipais = go.Figure()\n\n                                    fig_ipais.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=ipais_client,\n                                        delta={'reference': ipais_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'INST_PAY_AMT_INSTALMENT_SUM',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [ipais_axis_min, ipais_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': ipais_client},\n                                            'steps': [\n                                                {'range': [0, ipais_min], 'color': 'white'},\n                                                {'range': [ipais_min, ipais_q25], 'color': '#de3a5b'},\n                                                {'range': [ipais_q25, ipais_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipais_mean, ipais_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipais_q75, ipais_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_ipais.update_layout(height=200,\n                                                            margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_INST_PAY_AMT_INSTALMENT_SUM, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_ipais)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='INST_PAY_AMT_INSTALMENT_SUM',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             ipais_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_AMT_INSTALMENT_SUM'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_AMT_INSTALMENT_SUM'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('INST_PAY_AMT_INSTALMENT_SUM', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=ipais_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_INST_PAY_AMT_INSTALMENT_SUM, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable INST_PAY_DAYS_PAYMENT_RATIO_MAX\n                        # Valeur maximal dans l'historique des pr\u00e9c\u00e9dents cr\u00e9dits rembours\u00e9s\n                        # dans Home Cr\u00e9dit du ratio : La date \u00e0 laquelle le versement du cr\u00e9dit\n                        # pr\u00e9c\u00e9dent \u00e9tait cens\u00e9 \u00eatre pay\u00e9 (par rapport \u00e0 la date de demande du\n                        # pr\u00eat actuel) \\ Quand les \u00e9ch\u00e9ances du cr\u00e9dit pr\u00e9c\u00e9dent ont-elles \u00e9t\u00e9\n                        # effectivement pay\u00e9es (par rapport \u00e0 la date de demande du pr\u00eat\n                        # ==============================================================\n                        if 'INST_PAY_DAYS_PAYMENT_RATIO_MAX' in feat_imp_to_show:\n\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif INST_PAY_DAYS_PAYMENT_RATIO_MAX...**'):\n\n                                ipdprm_min = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_MIN.values)\n                                ipdprm_q25 = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_Q25.values)\n                                ipdprm_mean = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN.values)\n                                ipdprm_q75 = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_Q75.values)\n                                ipdprm_max = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_MAX.values)\n                                ipdprm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                        'INST_PAY_DAYS_PAYMENT_RATIO_MAX'].values)\n                                ipdprm_axis_min = min(ipdprm_min, ipdprm_client)\n                                ipdprm_axis_max = max(ipdprm_max, ipdprm_client)\n\n                                cond = ipdprm_client == ipdprm_min and ipdprm_min == ipdprm_q25 and \\\n                                       ipdprm_q25 == ipdprm_mean and ipdprm_mean == ipdprm_q75 and \\\n                                       ipdprm_q75 == ipdprm_max\n\n                                if not cond:\n                                    fig_ipdprm = go.Figure()\n\n                                    fig_ipdprm.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=ipdprm_client,\n                                        delta={'reference': ipdprm_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [ipdprm_axis_min, ipdprm_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': ipdprm_client},\n                                            'steps': [\n                                                {'range': [0, ipdprm_min], 'color': 'white'},\n                                                {'range': [ipdprm_min, ipdprm_q25], 'color': '#de3a5b'},\n                                                {'range': [ipdprm_q25, ipdprm_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipdprm_mean, ipdprm_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipdprm_q75, ipdprm_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_ipdprm.update_layout(height=200,\n                                                             margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_INST_PAY_DAYS_PAYMENT_RATIO_MAX, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_ipdprm)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             ipdprm_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_DAYS_PAYMENT_RATIO_MAX'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_DAYS_PAYMENT_RATIO_MAX'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('INST_PAY_DAYS_PAYMENT_RATIO_MAX', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=ipdprm_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_INST_PAY_DAYS_PAYMENT_RATIO_MAX, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM\n                        # Somme des contrats actifs au cours du mois\n                        # ==============================================================\n                        if 'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM' in feat_imp_to_show:\n\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM...**'):\n\n                                pcncsas_min = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MIN.values)\n                                pcncsas_q25 = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_Q25.values)\n                                pcncsas_mean = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN.values)\n                                pcncsas_q75 = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_Q75.values)\n                                pcncsas_max = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MAX.values)\n                                pcncsas_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                         'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM'].values)\n                                pcncsas_axis_min = min(pcncsas_min, pcncsas_client)\n                                pcncsas_axis_max = max(pcncsas_max, pcncsas_client)\n\n                                cond = pcncsas_client == pcncsas_min and pcncsas_min == pcncsas_q25 and \\\n                                       pcncsas_q25 == pcncsas_mean and pcncsas_mean == pcncsas_q75 and \\\n                                       pcncsas_q75 == pcncsas_max\n\n                                if not cond:\n                                    fig_pcncsas = go.Figure()\n\n                                    fig_pcncsas.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=pcncsas_client,\n                                        delta={'reference': pcncsas_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [pcncsas_axis_min, pcncsas_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': pcncsas_client},\n                                            'steps': [\n                                                {'range': [0, pcncsas_min], 'color': 'white'},\n                                                {'range': [pcncsas_min, pcncsas_q25], 'color': '#de3a5b'},\n                                                {'range': [pcncsas_q25, pcncsas_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [pcncsas_mean, pcncsas_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [pcncsas_q75, pcncsas_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_pcncsas.update_layout(height=200,\n                                                              margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_pcncsas)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             pcncsas_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=pcncsas_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable PREV_APP_INTEREST_SHARE_MAX\n                        # La valeur maximale de tous les pr\u00e9c\u00e9dents cr\u00e9dit dans d'autres\n                        # institution : de la dur\u00e9e du cr\u00e9dit multipli\u00e9 par l'annuit\u00e9 du pr\u00eat\n                        # moins le montant final du cr\u00e9dit\n                        # ==============================================================\n                        if 'PREV_APP_INTEREST_SHARE_MAX' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif PREV_APP_INTEREST_SHARE_MAX...**'):\n\n                                paism_min = int(df_client.PREV_APP_INTEREST_SHARE_MAX_MIN.values)\n                                paism_q25 = int(df_client.PREV_APP_INTEREST_SHARE_MAX_Q25.values)\n                                paism_mean = int(df_client.PREV_APP_INTEREST_SHARE_MAX_MEAN.values)\n                                paism_q75 = int(df_client.PREV_APP_INTEREST_SHARE_MAX_Q75.values)\n                                paism_max = int(df_client.PREV_APP_INTEREST_SHARE_MAX_MAX.values)\n                                paism_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                       'PREV_APP_INTEREST_SHARE_MAX'].values)\n                                paism_axis_min = min(paism_min, paism_client)\n                                paism_axis_max = max(paism_max, paism_client)\n\n                                cond = paism_client == paism_min and paism_min == paism_q25 and \\\n                                       paism_q25 == paism_mean and paism_mean == paism_q75 and \\\n                                       paism_q75 == paism_max\n\n                                if not cond:\n                                    fig_paism = go.Figure()\n\n                                    fig_paism.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=paism_client,\n                                        delta={'reference': paism_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'PREV_APP_INTEREST_SHARE_MAX',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [paism_axis_min, paism_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': paism_client},\n                                            'steps': [\n                                                {'range': [0, paism_min], 'color': 'white'},\n                                                {'range': [paism_min, paism_q25], 'color': '#de3a5b'},\n                                                {'range': [paism_q25, paism_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [paism_mean, paism_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [paism_q75, paism_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_paism.update_layout(height=200,\n                                                            margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_PREV_APP_INTEREST_SHARE_MAX, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_paism)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='PREV_APP_INTEREST_SHARE_MAX',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             paism_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['PREV_APP_INTEREST_SHARE_MAX'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['PREV_APP_INTEREST_SHARE_MAX'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('PREV_APP_INTEREST_SHARE_MAX', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=paism_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_PREV_APP_INTEREST_SHARE_MAX, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable : CODE_GENDER\n                        # Sex\n                        # ==============================================================\n                        if 'CODE_GENDER' in feat_imp_to_show:\n                            with st.spinner('**Chargement du graphique comparatif CODE_GENDER...**'):\n                                cg_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                    'CODE_GENDER'].values)\n\n                                st.markdown(html_CODE_GENDER, unsafe_allow_html=True)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='CODE_GENDER',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         cg_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['CODE_GENDER'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['CODE_GENDER'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('CODE_GENDER', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=cg_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable FLAG_OWN_CAR\n                        # Indicateur si le client poss\u00e8de une voiture\n                        # ==============================================================\n                        if 'FLAG_OWN_CAR' in feat_imp_to_show:\n                            with st.spinner('**Chargement du graphique comparatif FLAG_OWN_CAR...**'):\n                                foc_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'FLAG_OWN_CAR'].values)\n\n                                st.markdown(html_FLAG_OWN_CAR, unsafe_allow_html=True)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='FLAG_OWN_CAR',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         foc_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['FLAG_OWN_CAR'][df_dashboard[\n                                                                              'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['FLAG_OWN_CAR'][df_dashboard[\n                                                                              'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('FLAG_OWN_CAR', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=foc_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable NAME_EDUCATION_TYPE_HIGHER_EDUCATION\n                        # Indicateur si le client poss\u00e8de une voiture\n                        # ==============================================================\n                        if 'NAME_EDUCATION_TYPE_HIGHER_EDUCATION' in feat_imp_to_show:\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif NAME_EDUCATION_TYPE_HIGHER_EDUCATION...**'):\n                                nethe_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                       'NAME_EDUCATION_TYPE_HIGHER_EDUCATION'].values)\n\n                                st.markdown(html_NAME_EDUCATION_TYPE_HIGHER_EDUCATION, unsafe_allow_html=True)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='NAME_EDUCATION_TYPE_HIGHER_EDUCATION',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         nethe_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['NAME_EDUCATION_TYPE_HIGHER_EDUCATION'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['NAME_EDUCATION_TYPE_HIGHER_EDUCATION'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('NAME_EDUCATION_TYPE_HIGHER_EDUCATION', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=nethe_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.pyplot()\n\n                                # ====================== COMPARAISON TRAITS STRICTS CLIENT COURANT \/ CLIENTS SIMILAIRES ============================\n    if st.sidebar.checkbox(\"Comparer traits stricts ?\"):\n\n        if titre:\n            st.markdown(html_clients_similaires, unsafe_allow_html=True)\n            titre = False\n\n        with st.spinner('**Affiche les traits stricts comparant le client courant et les clients similaires...**'):\n\n            with st.expander('Comparaison traits stricts',\n                             expanded=True):\n                # Infos principales clients similaires\n                voisins_info = df_info_voisins[df_info_voisins['ID_CLIENT'] == client_id].iloc[:, 1:]\n                voisins_info.set_index('INDEX_VOISIN', inplace=True)\n                st.write('Client courant')\n                st.dataframe(client_info)\n                st.write('10 clients similaires')\n                st.dataframe(voisins_info.style.highlight_max(axis=0))\n\n    # ====================== COMPARAISON DEMANDE DE PR\u00caT CLIENT COURANT \/ CLIENTS SIMILAIRES ============================\n    if st.sidebar.checkbox(\"Comparer demande pr\u00eat ?\"):\n\n        if titre:\n            st.markdown(html_clients_similaires, unsafe_allow_html=True)\n            titre = False\n\n        with st.spinner(\n                '**Affiche les informations de la demande de pr\u00eat comparant le client courant et les clients similaires...**'):\n\n            with st.expander('Comparaison demande de pr\u00eat',\n                             expanded=True):\n                # Infos principales sur la demande de pr\u00eat\n                voisins_pret = df_pret_voisins[df_pret_voisins['ID_CLIENT'] == client_id].iloc[:, 1:]\n                voisins_pret.set_index('INDEX_VOISIN', inplace=True)\n                st.write('Client courant')\n                st.dataframe(client_pret)\n                st.write('10 clients similaires')\n                st.dataframe(voisins_pret.style.highlight_max(axis=0))\n\n\nst.sidebar.subheader('Clients similaires')\ninfos_clients_similaires()\n\n\n# --------------------------------------------------------------------\n# FACTEURS D'INFLUENCE : SHAP VALUE\n# --------------------------------------------------------------------\n\ndef affiche_facteurs_influence():\n    ''' Affiche les facteurs d'influence du client courant\n    '''\n    html_facteurs_influence = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Variables importantes\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir facteurs d\\'influence\"):\n        st.markdown(html_facteurs_influence, unsafe_allow_html=True)\n\n        with st.spinner('**Affiche les facteurs d\\'influence du client courant...**'):\n            with st.expander('Facteurs d\\'influence du client courant',\n                             expanded=True):\n                explainer = shap.TreeExplainer(best_model)\n\n                client_index = test_set[test_set['SK_ID_CURR'] == client_id].index.item()\n                X_shap = test_set.set_index('SK_ID_CURR')\n                X_test_courant = X_shap.iloc[client_index]\n                X_test_courant_array = X_test_courant.values.reshape(1, -1)\n\n                shap_values_courant = explainer.shap_values(X_test_courant_array)\n\n                col1, col2 = st.columns([1, 1])\n                # BarPlot du client courant\n                with col1:\n                    plt.clf()\n\n                    # BarPlot du client courant\n                    shap.plots.bar(bar_values[client_index], max_display=40)\n\n                    fig = plt.gcf()\n                    fig.set_size_inches((10, 20))\n                    # Plot the graph on the dashboard\n                    st.pyplot(fig)\n\n                # D\u00e9cision plot du client courant\n                with col2:\n                    plt.clf()\n\n                    # D\u00e9cision Plot\n                    shap.decision_plot(explainer.expected_value[1], shap_values_courant[1],\n                                       X_test_courant)\n\n                    fig2 = plt.gcf()\n                    fig2.set_size_inches((10, 15))\n                    # Plot the graph on the dashboard\n                    st.pyplot(fig2)\n\n\nst.sidebar.subheader('Facteurs d\\'influence')\naffiche_facteurs_influence()\n\n# --------------------------------------------------------------------\n# STATISTIQUES GENERALES\n# --------------------------------------------------------------------\n\ndico_stats = {'Variable cible': 'TARGET',\n              'Type de pr\u00eat': 'NAME_CONTRACT_TYPE',\n              'Sexe': 'CODE_GENDER',\n              'T\u00e9l. professionnel': 'FLAG_EMP_PHONE',\n              'Note r\u00e9gion o\u00f9 vit client': 'REGION_RATING_CLIENT_W_CITY',\n              'Niveau \u00e9ducation du client': 'NAME_EDUCATION_TYPE',\n              'Profession du client': 'OCCUPATION_TYPE',\n              'Type d\\'organisation de travail du client': 'ORGANIZATION_TYPE',\n              'Adresse du client = adresse de contact': 'REG_CITY_NOT_LIVE_CITY',\n              'R\u00e9gion du client = adresse professionnelle': 'REG_CITY_NOT_WORK_CITY',\n              'Adresse du client = adresse professionnelle': 'LIVE_CITY_NOT_WORK_CITY',\n              'Logement du client': 'NAME_HOUSING_TYPE',\n              'Statut familial': 'NAME_FAMILY_STATUS',\n              'Type de revenu du client': 'NAME_INCOME_TYPE',\n              'Client poss\u00e8de une maison ou appartement?': 'FLAG_OWN_REALTY',\n              'Accompagnateur lors de la demande de pr\u00eat?': 'NAME_TYPE_SUITE',\n              'Quel jour de la semaine le client a-t-il demand\u00e9 le pr\u00eat ?': 'WEEKDAY_APPR_PROCESS_START',\n              'Le client a-t-il fourni un num\u00e9ro de t\u00e9l\u00e9phone portable ?': 'FLAG_MOBIL',\n              'Le client a-t-il fourni un num\u00e9ro de t\u00e9l\u00e9phone professionnel fixe ?': 'FLAG_WORK_PHONE',\n              'Le t\u00e9l\u00e9phone portable \u00e9tait-il joignable?': 'FLAG_CONT_MOBILE',\n              'Le client a-t-il fourni un num\u00e9ro de t\u00e9l\u00e9phone domicile fixe ?': 'FLAG_PHONE',\n              'Le client a-t-il fourni une adresse \u00e9lectronique': 'FLAG_EMAIL',\n              '\u00c2ge (ans)': 'AGE_YEARS',\n              'Combien d\\'ann\u00e9es avant la demande la personne a commenc\u00e9 son emploi actuel ?': 'YEARS_EMPLOYED',\n              'Combien de jours avant la demande le client a-t-il chang\u00e9 son enregistrement ?': 'DAYS_REGISTRATION',\n              'Combien de jours avant la demande le client a-t-il chang\u00e9 la pi\u00e8ce d\\'identit\u00e9 avec laquelle il a demand\u00e9 le pr\u00eat ?': 'DAYS_ID_PUBLISH',\n              'Prix du bien que le client a demand\u00e9': 'AMT_GOODS_PRICE',\n              'Nombre d\\enfants?': 'CNT_CHILDREN',\n              'Revenu du client': 'AMT_INCOME_TOTAL',\n              'Montant du cr\u00e9dit du pr\u00eat': 'AMT_CREDIT',\n              'Annuit\u00e9 de pr\u00eat': 'AMT_ANNUITY',\n              '\u00c2ge de la voiture du client': 'OWN_CAR_AGE',\n              'Combien de membres de la famille a le client': 'CNT_FAM_MEMBERS',\n              'Population normalis\u00e9e de la r\u00e9gion o\u00f9 vit le client': 'REGION_POPULATION_RELATIVE',\n              'Notre \u00e9valuation de la r\u00e9gion o\u00f9 vit le client (1 ou 2 ou 3)': 'REGION_RATING_CLIENT',\n              'Indicateur si l\\'adresse permanente du client ne correspond pas \u00e0 l\\'adresse de contact': 'REG_REGION_NOT_LIVE_REGION',\n              'Indicateur si l\\'adresse permanente du client ne correspond pas \u00e0 l\\'adresse professionnelle': 'REG_REGION_NOT_WORK_REGION',\n              'Indicateur si l\\'adresse de contact du client ne correspond pas \u00e0 l\\'adresse de travail': 'LIVE_REGION_NOT_WORK_REGION',\n              'Combien de jours avant la demande le client a-t-il chang\u00e9 de t\u00e9l\u00e9phone ?': 'DAYS_LAST_PHONE_CHANGE',\n              'Statut des cr\u00e9dits d\u00e9clar\u00e9s par le Credit Bureau': 'CREDIT_ACTIVE',\n              'Devise recod\u00e9e du cr\u00e9dit du Credit Bureau': 'CREDIT_CURRENCY',\n              'Type de cr\u00e9dit du Bureau de cr\u00e9dit (voiture ou argent liquide...)': 'CREDIT_TYPE',\n              'Combien d\\ann\u00e9es avant la demande actuelle le client a-t-il demand\u00e9 un cr\u00e9dit au Credit Bureau ?': 'YEARS_CREDIT',\n              'Dur\u00e9e restante du cr\u00e9dit CB (en jours) au moment de la demande dans Cr\u00e9dit immobilier': 'DAYS_CREDIT_ENDDATE',\n              'Combien de jours avant la demande de pr\u00eat la derni\u00e8re information sur la solvabilit\u00e9 du Credit Bureau a-t-elle \u00e9t\u00e9 fournie ?': 'DAYS_CREDIT_UPDATE',\n              'Nombre de jours de retard sur le cr\u00e9dit CB au moment de la demande de pr\u00eat': 'CREDIT_DAY_OVERDUE',\n              'Montant maximal des impay\u00e9s sur le cr\u00e9dit du Credit Bureau jusqu\\'\u00e0 pr\u00e9sent': 'AMT_CREDIT_MAX_OVERDUE',\n              'Combien de fois le cr\u00e9dit du Bureau de cr\u00e9dit a-t-il \u00e9t\u00e9 prolong\u00e9 ?': 'CNT_CREDIT_PROLONG',\n              'Montant actuel du cr\u00e9dit du Credit Bureau': 'AMT_CREDIT_SUM',\n              'Dette actuelle sur le cr\u00e9dit du Credit Bureau': 'AMT_CREDIT_SUM_DEBT',\n              'Limite de cr\u00e9dit actuelle de la carte de cr\u00e9dit d\u00e9clar\u00e9e dans le Bureau de cr\u00e9dit': 'AMT_CREDIT_SUM_LIMIT',\n              'Montant actuel en retard sur le cr\u00e9dit du Bureau de cr\u00e9dit': 'AMT_CREDIT_SUM_OVERDUE',\n              'Annuit\u00e9 du cr\u00e9dit du Credit Bureau': 'AMT_ANNUITY',\n              'Statut du pr\u00eat du Credit Bureau durant le mois': 'STATUS',\n              'Mois du solde par rapport \u00e0 la date de la demande': 'MONTHS_BALANCE',\n              'Statut du contrat au cours du mois': 'NAME_CONTRACT_STATUS',\n              'Solde au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_BALANCE',\n              'Montant total \u00e0 recevoir sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_TOTAL_RECEIVABLE',\n              'Nombre d\\'\u00e9ch\u00e9ances pay\u00e9es sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_INSTALMENT_MATURE_CUM',\n              'Mois du solde par rapport \u00e0 la date d\\'application': 'MONTHS_BALANCE',\n              'Limite de la carte de cr\u00e9dit au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_CREDIT_LIMIT_ACTUAL',\n              'Montant retir\u00e9 au guichet automatique pendant le mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_DRAWINGS_ATM_CURRENT',\n              'Montant pr\u00e9lev\u00e9 au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_DRAWINGS_CURRENT',\n              'Montant des autres pr\u00e9l\u00e8vements au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_DRAWINGS_OTHER_CURRENT',\n              'Montant des pr\u00e9l\u00e8vements ou des achats de marchandises au cours du mois de la cr\u00e9dibilit\u00e9 pr\u00e9c\u00e9dente': 'AMT_DRAWINGS_POS_CURRENT',\n              'Versement minimal pour ce mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_INST_MIN_REGULARITY',\n              'Combien le client a-t-il pay\u00e9 pendant le mois sur le cr\u00e9dit pr\u00e9c\u00e9dent ?': 'AMT_PAYMENT_CURRENT',\n              'Combien le client a-t-il pay\u00e9 au total pendant le mois sur le cr\u00e9dit pr\u00e9c\u00e9dent ?': 'AMT_PAYMENT_TOTAL_CURRENT',\n              'Montant \u00e0 recevoir pour le principal du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_RECEIVABLE_PRINCIPAL',\n              'Montant \u00e0 recevoir sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_RECIVABLE',\n              'Nombre de retraits au guichet automatique durant ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_ATM_CURRENT',\n              'Nombre de retraits pendant ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_CURRENT',\n              'Nombre d\\'autres retraits au cours de ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_OTHER_CURRENT',\n              'Nombre de retraits de marchandises durant ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_POS_CURRENT',\n              'DPD (jours de retard) au cours du mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'SK_DPD',\n              'DPD (Days past due) au cours du mois avec tol\u00e9rance (les dettes avec de faibles montants de pr\u00eat sont ignor\u00e9es) du cr\u00e9dit pr\u00e9c\u00e9dent': 'SK_DPD_DEF',\n              'La date \u00e0 laquelle le versement du cr\u00e9dit pr\u00e9c\u00e9dent \u00e9tait cens\u00e9 \u00eatre pay\u00e9 (par rapport \u00e0 la date de demande du pr\u00eat actuel)': 'DAYS_INSTALMENT',\n              'Quand les \u00e9ch\u00e9ances du cr\u00e9dit pr\u00e9c\u00e9dent ont-elles \u00e9t\u00e9 effectivement pay\u00e9es (par rapport \u00e0 la date de demande du pr\u00eat actuel) ?': 'DAYS_ENTRY_PAYMENT',\n              'Version du calendrier des versements (0 pour la carte de cr\u00e9dit) du cr\u00e9dit pr\u00e9c\u00e9dent': 'NUM_INSTALMENT_VERSION',\n              'Sur quel versement nous observons le paiement': 'NUM_INSTALMENT_NUMBER',\n              'Quel \u00e9tait le montant de l\\'acompte prescrit du cr\u00e9dit pr\u00e9c\u00e9dent sur cet acompte ?': 'AMT_INSTALMENT',\n              'Ce que le client a effectivement pay\u00e9 sur le cr\u00e9dit pr\u00e9c\u00e9dent pour ce versement': 'AMT_PAYMENT',\n              'Statut du contrat au cours du mois': 'NAME_CONTRACT_STATUS',\n              'Dur\u00e9e du cr\u00e9dit pr\u00e9c\u00e9dent (peut changer avec le temps)': 'CNT_INSTALMENT',\n              'Versements restant \u00e0 payer sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_INSTALMENT_FUTURE',\n              'EXT_SOURCE_1': 'EXT_SOURCE_1',\n              'EXT_SOURCE_2': 'EXT_SOURCE_2',\n              'EXT_SOURCE_3': 'EXT_SOURCE_3',\n              'FLAG_DOCUMENT_2': 'FLAG_DOCUMENT_2',\n              'FLAG_DOCUMENT_3': 'FLAG_DOCUMENT_3',\n              'FLAG_DOCUMENT_4': 'FLAG_DOCUMENT_4',\n              'FLAG_DOCUMENT_5': 'FLAG_DOCUMENT_5',\n              'FLAG_DOCUMENT_6': 'FLAG_DOCUMENT_6',\n              'FLAG_DOCUMENT_7': 'FLAG_DOCUMENT_7',\n              'FLAG_DOCUMENT_8': 'FLAG_DOCUMENT_8',\n              'FLAG_DOCUMENT_9': 'FLAG_DOCUMENT_9',\n              'FLAG_DOCUMENT_10': 'FLAG_DOCUMENT_10',\n              'FLAG_DOCUMENT_11': 'FLAG_DOCUMENT_11',\n              'FLAG_DOCUMENT_12': 'FLAG_DOCUMENT_12',\n              'FLAG_DOCUMENT_13': 'FLAG_DOCUMENT_13',\n              'FLAG_DOCUMENT_14': 'FLAG_DOCUMENT_14',\n              'FLAG_DOCUMENT_15': 'FLAG_DOCUMENT_15',\n              'FLAG_DOCUMENT_16': 'FLAG_DOCUMENT_16',\n              'FLAG_DOCUMENT_17': 'FLAG_DOCUMENT_17',\n              'FLAG_DOCUMENT_18': 'FLAG_DOCUMENT_18',\n              'FLAG_DOCUMENT_19': 'FLAG_DOCUMENT_19',\n              'FLAG_DOCUMENT_20': 'FLAG_DOCUMENT_20',\n              'FLAG_DOCUMENT_21': 'FLAG_DOCUMENT_21',\n              'FONDKAPREMONT_MODE': 'FONDKAPREMONT_MODE',\n              'HOUSETYPE_MODE': 'HOUSETYPE_MODE',\n              'WALLSMATERIAL_MODE': 'WALLSMATERIAL_MODE',\n              'EMERGENCYSTATE_MODE': 'EMERGENCYSTATE_MODE',\n              'FLOORSMAX_AVG': 'FLOORSMAX_AVG',\n              'FLOORSMAX_MEDI': 'FLOORSMAX_MEDI',\n              'FLOORSMAX_MODE': 'FLOORSMAX_MODE',\n              'FLOORSMIN_MODE': 'FLOORSMIN_MODE',\n              'FLOORSMIN_AVG': 'FLOORSMIN_AVG',\n              'FLOORSMIN_MEDI': 'FLOORSMIN_MEDI',\n              'APARTMENTS_AVG': 'APARTMENTS_AVG',\n              'APARTMENTS_MEDI': 'APARTMENTS_MEDI',\n              'APARTMENTS_MODE': 'APARTMENTS_MODE',\n              'BASEMENTAREA_AVG': 'BASEMENTAREA_AVG',\n              'BASEMENTAREA_MEDI': 'BASEMENTAREA_MEDI',\n              'BASEMENTAREA_MODE': 'BASEMENTAREA_MODE',\n              'YEARS_BEGINEXPLUATATION_AVG': 'YEARS_BEGINEXPLUATATION_AVG',\n              'YEARS_BEGINEXPLUATATION_MODE': 'YEARS_BEGINEXPLUATATION_MODE',\n              'YEARS_BEGINEXPLUATATION_MEDI': 'YEARS_BEGINEXPLUATATION_MEDI',\n              'YEARS_BUILD_AVG': 'YEARS_BUILD_AVG',\n              'YEARS_BUILD_MODE': 'YEARS_BUILD_MODE',\n              'YEARS_BUILD_MEDI': 'YEARS_BUILD_MEDI',\n              'COMMONAREA_AVG': 'COMMONAREA_AVG',\n              'COMMONAREA_MEDI': 'COMMONAREA_MEDI',\n              'COMMONAREA_MODE': 'COMMONAREA_MODE',\n              'ELEVATORS_AVG': 'ELEVATORS_AVG',\n              'ELEVATORS_MODE': 'ELEVATORS_MODE',\n              'ELEVATORS_MEDI': 'ELEVATORS_MEDI',\n              'ENTRANCES_AVG': 'ENTRANCES_AVG',\n              'ENTRANCES_MODE': 'ENTRANCES_MODE',\n              'ENTRANCES_MEDI': 'ENTRANCES_MEDI',\n              'LANDAREA_AVG': 'LANDAREA_AVG',\n              'LANDAREA_MEDI': 'LANDAREA_MEDI',\n              'LANDAREA_MODE': 'LANDAREA_MODE',\n              'LIVINGAPARTMENTS_AVG': 'LIVINGAPARTMENTS_AVG',\n              'LIVINGAPARTMENTS_MODE': 'LIVINGAPARTMENTS_MODE',\n              'LIVINGAPARTMENTS_MEDI': 'LIVINGAPARTMENTS_MEDI',\n              'LIVINGAREA_AVG': 'LIVINGAREA_AVG',\n              'LIVINGAREA_MODE': 'LIVINGAREA_MODE',\n              'NONLIVINGAPARTMENTS_AVG': 'NONLIVINGAPARTMENTS_AVG',\n              'NONLIVINGAPARTMENTS_MODE': 'NONLIVINGAPARTMENTS_MODE',\n              'NONLIVINGAREA_AVG': 'NONLIVINGAREA_AVG',\n              'NONLIVINGAREA_MEDI': 'NONLIVINGAREA_MEDI',\n              'TOTALAREA_MODE': 'TOTALAREA_MODE',\n              'OBS_30_CNT_SOCIAL_CIRCLE': 'OBS_30_CNT_SOCIAL_CIRCLE',\n              'DEF_30_CNT_SOCIAL_CIRCLE': 'DEF_30_CNT_SOCIAL_CIRCLE',\n              'DEF_60_CNT_SOCIAL_CIRCLE': 'DEF_60_CNT_SOCIAL_CIRCLE',\n              'AMT_REQ_CREDIT_BUREAU_HOUR': 'AMT_REQ_CREDIT_BUREAU_HOUR',\n              'AMT_REQ_CREDIT_BUREAU_DAY': 'AMT_REQ_CREDIT_BUREAU_DAY',\n              'AMT_REQ_CREDIT_BUREAU_WEEK': 'AMT_REQ_CREDIT_BUREAU_WEEK',\n              'AMT_REQ_CREDIT_BUREAU_MON': 'AMT_REQ_CREDIT_BUREAU_MON',\n              'AMT_REQ_CREDIT_BUREAU_QRT': 'AMT_REQ_CREDIT_BUREAU_QRT',\n              'AMT_REQ_CREDIT_BUREAU_YEAR': 'AMT_REQ_CREDIT_BUREAU_YEAR',\n              'DAYS_ENDDATE_FACT': 'DAYS_ENDDATE_FACT'}\n\npath_img = \"resources\/images\/stats\/\"\n\n\ndef affiche_stats():\n    ''' Affiche les statistiques g\u00e9n\u00e9rales provenant de l'EDA\n    '''\n    html_facteurs_influence = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Distribution des variables g\u00e9n\u00e9rale\/pour les d\u00e9faillants\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir les distributions\"):\n        st.markdown(html_facteurs_influence, unsafe_allow_html=True)\n\n        with st.spinner('**Affiche les statistiques g\u00e9n\u00e9rales\/pour les d\u00e9faillants...**'):\n            with st.expander('Distribution des variables',\n                             expanded=True):\n                choix = st.selectbox(\"Choisir une variable : \", dico_stats.keys())\n                nom_img = dico_stats[choix]\n                img = Image.open(path_img + nom_img + \".png\")\n                st.image(img)\n\n\nst.sidebar.subheader('Stats g\u00e9n\u00e9rales')\naffiche_stats()\n\n# ====================================================================\n# FOOTER\n# ====================================================================\nhtml_line = \"\"\"\n<br>\n<br>\n<br>\n<br>\n<hr style= \"  display: block;\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n  margin-left: auto;\n  margin-right: auto;\n  border-style: inset;\n  border-width: 1.5px;\">\n<p style=\"color:Gray; text-align: right; font-size:12px;\">Auteur : vanessa.tribet@gmail.com - 28.09.2021<\/p>\n\"\"\"\nst.markdown(html_line, unsafe_allow_html=True)","5cba4202":">onglet p7.py","3c63fc04":"# ====================================================================\n# Chargement des librairies\n# ====================================================================\nimport streamlit as st\nimport numpy as np\nfrom PIL import Image\nimport pickle\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\nimport seaborn as sns\nimport shap\n\n\n# ====================================================================\n#LET'S LOAD DATA - VARIABLES STATIQUES\n# ====================================================================\n\n\n# R\u00e9pertoire de sauvegarde du meilleur mod\u00e8le\nFILE_BEST_MODELE = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\modele\\best_model.pickle'\n# R\u00e9pertoire de sauvegarde des dataframes n\u00e9cessaires au dashboard\n# Test set brut original\nFILE_APPLICATION_TEST = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\application_test.pickle'\n# Test set pr\u00e9-proc\u00e9d\u00e9\nFILE_TEST_SET = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\test_set.pickle'\n# Dashboard\nFILE_DASHBOARD = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_dashboard.pickle'\n# Client\nFILE_CLIENT_INFO = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_info_client.pickle'\nFILE_CLIENT_PRET = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_pret_client.pickle'\n# 10 plus proches voisins du train set\nFILE_VOISINS_INFO = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_info_voisins.pickle'\nFILE_VOISIN_PRET = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_pret_voisins.pickle'\nFILE_VOISIN_AGG = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_voisin_train_agg.pickle'\nFILE_ALL_TRAIN_AGG = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_all_train_agg.pickle'\n\n\n# ====================================================================\n#LET'S LOAD DATA - VARIABLES GLOBALES\n# ====================================================================\ngroup_val1 = ['AMT_ANNUITY',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n              'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n              'INST_PAY_AMT_INSTALMENT_SUM']\n\ngroup_val2 = ['CAR_EMPLOYED_RATIO', 'CODE_GENDER',\n              'CREDIT_ANNUITY_RATIO', 'CREDIT_GOODS_RATIO',\n              'YEAR_BIRTH', 'YEAR_ID_PUBLISH',\n              'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3',\n              'EXT_SOURCE_MAX', 'EXT_SOURCE_SUM',\n              'FLAG_OWN_CAR',\n              'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n              'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n              'PREV_APP_INTEREST_SHARE_MAX']\n\ngroup_val3 = ['AMT_ANNUITY_MEAN',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN',\n              'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN',\n              'INST_PAY_AMT_INSTALMENT_SUM_MEAN']\n\ngroup_val4 = ['CAR_EMPLOYED_RATIO_MEAN', 'CODE_GENDER_MEAN',\n              'CREDIT_ANNUITY_RATIO_MEAN', 'CREDIT_GOODS_RATIO_MEAN',\n              'YEAR_BIRTH_MEAN', 'YEAR_ID_PUBLISH_MEAN',\n              'EXT_SOURCE_1_MEAN', 'EXT_SOURCE_2_MEAN', 'EXT_SOURCE_3_MEAN',\n              'EXT_SOURCE_MAX_MEAN', 'EXT_SOURCE_SUM_MEAN',\n              'FLAG_OWN_CAR_MEAN',\n              'INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN',\n              'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN',\n              'PREV_APP_INTEREST_SHARE_MAX_MEAN']\n\n# ====================================================================\n# IMAGES\n# ====================================================================\n# Logo de l'entreprise\nlogo =  Image.open(r\"C:\\temp\\P7-DASHBOARD-temp\\resources\\images\\logo.png\")\n# L\u00e9gende des courbes\nlineplot_legende =  Image.open(r\"C:\\temp\\P7-DASHBOARD-temp\\resources\\images\\lineplot_legende.png\")\n\n\n# ====================================================================\n# HTML MARKDOWN\n# ====================================================================\nhtml_AMT_ANNUITY = \"<h4 style='text-align: center'>AMT_ANNUITY<\/h4> <br\/> <h5 style='text-align: center'>Annuit\u00e9 du pr\u00eat<\/h5> <hr\/>\"\nhtml_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN = \"<h4 style='text-align: center'>BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN<\/h4> <br\/> <h5 style='text-align: center'>Valeur minimale de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit<\/h5> <hr\/>\"\nhtml_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN = \"<h4 style='text-align: center'>BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN<\/h4> <br\/> <h5 style='text-align: center'>Valeur moyenne de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit<\/h5> <hr\/>\"\nhtml_INST_PAY_AMT_INSTALMENT_SUM = \"<h4 style='text-align: center'>INST_PAY_AMT_INSTALMENT_SUM<\/h4> <br\/> <h5 style='text-align: center'>Somme du montant de l'acompte prescrit des cr\u00e9dits pr\u00e9c\u00e9dents sur cet acompte<\/h5> <hr\/>\"\nhtml_BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN = \"<h4 style='text-align: center'>BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN<\/h4> <br\/> <h5 style='text-align: center'>Moyenne du ratio des pr\u00eats pr\u00e9c\u00e9dents sur d'autres institution de : la dette actuelle sur le cr\u00e9dit et la limite de cr\u00e9dit actuelle de la carte de cr\u00e9dit (valeur * 100)<\/h5> <hr\/>\"\nhtml_CAR_EMPLOYED_RATIO = \"<h4 style='text-align: center'>CAR_EMPLOYED_RATIO<\/h4> <br\/> <h5 style='text-align: center'>Ratio : \u00c2ge de la voiture du demandeur \/ Anciennet\u00e9 dans l'emploi \u00e0 la date de la demande (valeur * 1000)<\/h5> <hr\/>\"\nhtml_CODE_GENDER = \"<h4 style='text-align: center'>CODE_GENDER<\/h4> <br\/> <h5 style='text-align: center'>Sexe<\/h5> <hr\/>\"\nhtml_CREDIT_ANNUITY_RATIO = \"<h4 style='text-align: center'>CREDIT_ANNUITY_RATIO<\/h4> <br\/> <h5 style='text-align: center'>Ratio : montant du cr\u00e9dit du pr\u00eat \/ Annuit\u00e9 de pr\u00eat<\/h5> <hr\/>\"\nhtml_CREDIT_GOODS_RATIO = \"<h4 style='text-align: center'>CREDIT_GOODS_RATIO<\/h4> <br\/> <h5 style='text-align: center'>Ratio : Montant du cr\u00e9dit du pr\u00eat \/ prix des biens pour lesquels le pr\u00eat est accord\u00e9 \/ Cr\u00e9dit est sup\u00e9rieur au prix des biens ? (valeur * 100)<\/h5> <hr\/>\"\nhtml_YEAR_BIRTH = \"<h4 style='text-align: center'>YEAR_BIRTH<\/h4> <br\/> <h5 style='text-align: center'>\u00c2ge (ans)<\/h5> <hr\/>\"\nhtml_YEAR_ID_PUBLISH = \"<h4 style='text-align: center'>YEAR_ID_PUBLISH<\/h4> <br\/> <h5 style='text-align: center'>Combien de jours avant la demande le client a-t-il chang\u00e9 la pi\u00e8ce d'identit\u00e9 avec laquelle il a demand\u00e9 le pr\u00eat ? (ans)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_1 = \"<h4 style='text-align: center'>EXT_SOURCE_1<\/h4> <br\/> <h5 style='text-align: center'>Source externe normalis\u00e9e (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_2 = \"<h4 style='text-align: center'>EXT_SOURCE_2<\/h4> <br\/> <h5 style='text-align: center'>Source externe normalis\u00e9e (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_3 = \"<h4 style='text-align: center'>EXT_SOURCE_3<\/h4> <br\/> <h5 style='text-align: center'>Source externe normalis\u00e9e (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_MAX = \"<h4 style='text-align: center'>EXT_SOURCE_MAX<\/h4> <br\/> <h5 style='text-align: center'>Valeur maximale des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3) (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_SUM = \"<h4 style='text-align: center'>EXT_SOURCE_SUM<\/h4> <br\/> <h5 style='text-align: center'>Somme des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3, valeur * 100)<\/h5> <hr\/>\"\nhtml_FLAG_OWN_CAR = \"<h4 style='text-align: center'>FLAG_OWN_CAR<\/h4> <br\/> <h5 style='text-align: center'>Indicateur si le client poss\u00e8de une voiture<\/h5> <hr\/>\"\nhtml_INST_PAY_DAYS_PAYMENT_RATIO_MAX = \"<h4 style='text-align: center'>INST_PAY_DAYS_PAYMENT_RATIO_MAX<\/h4> <br\/> <h5 style='text-align: center'>Valeur maximal dans l'historique des pr\u00e9c\u00e9dents cr\u00e9dits rembours\u00e9s dans Home Cr\u00e9dit du ratio : La date \u00e0 laquelle le versement du cr\u00e9dit pr\u00e9c\u00e9dent \u00e9tait cens\u00e9 \u00eatre pay\u00e9 (par rapport \u00e0 la date de demande du pr\u00eat actuel) \\ Quand les \u00e9ch\u00e9ances du cr\u00e9dit pr\u00e9c\u00e9dent ont-elles \u00e9t\u00e9 effectivement pay\u00e9es (par rapport \u00e0 la date de demande du pr\u00eat<\/h5> <hr\/>\"\nhtml_NAME_EDUCATION_TYPE_HIGHER_EDUCATION = \"<h4 style='text-align: center'>NAME_EDUCATION_TYPE_HIGHER_EDUCATION<\/h4> <br\/> <h5 style='text-align: center'>Niveau d'\u00e9ducation le plus \u00e9l\u00e9v\u00e9<\/h5> <hr\/>\"\nhtml_POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM = \"<h4 style='text-align: center'>POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM<\/h4> <br\/> <h5 style='text-align: center'>Somme des contrats actifs au cours du mois<\/h5> <hr\/>\"\nhtml_PREV_APP_INTEREST_SHARE_MAX = \"<h4 style='text-align: center'>PREV_APP_INTEREST_SHARE_MAX<\/h4> <br\/> <h5 style='text-align: center'>La valeur maximale de tous les pr\u00e9c\u00e9dents cr\u00e9dit dans d'autres institution : de la dur\u00e9e du cr\u00e9dit multipli\u00e9 par l'annuit\u00e9 du pr\u00eat moins le montant final du cr\u00e9dit<\/h5> <hr\/>\"\n\n# ====================================================================\n# HEADER - TITRE\n# ====================================================================\n\nhtml_header=\"\"\"\n    <head>\n        <title>Application Dashboard Cr\u00e9dit Score<\/title>\n        <meta charset=\"utf-8\">\n        <meta name=\"keywords\" content=\"Home Cr\u00e9dit Group, Dashboard, pr\u00eat, cr\u00e9dit score\">\n        <meta name=\"description\" content=\"Application de Cr\u00e9dit Score - dashboard\">\n        <meta name=\"author\" content=\"Loetitia Rabier\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <\/head>             \n    <h1 style=\"font-size:300%; color:Crimson; font-family:Arial\"> Pr\u00eat \u00e0 d\u00e9penser <br>\n        <h2 style=\"color:Gray; font-family:Georgia\"> DASHBOARD<\/h2>\n        <hr style= \"  display: block;\n          margin-top: 0;\n          margin-bottom: 0;\n          margin-left: auto;\n          margin-right: auto;\n          border-style: inset;\n          border-width: 1.5px;\"\/>\n     <\/h1>\n\"\"\"\nst.set_page_config(page_title=\"Pr\u00eat \u00e0 d\u00e9penser - Dashboard\", page_icon=\"\", layout=\"wide\")\nst.markdown('<style>body{background-color: #fbfff0}<\/style>',unsafe_allow_html=True)\nst.markdown(html_header, unsafe_allow_html=True)\n\n# Cacher le bouton en haut \u00e0 droite\nst.markdown(\"\"\" <style>\n#MainMenu {visibility: hidden;}\nfooter {visibility: hidden;}\n<\/style> \"\"\", unsafe_allow_html=True)\n\n# Suppression des marges par d\u00e9faut\npadding = 1\nst.markdown(f\"\"\" <style>\n    .reportview-container .main .block-container{{\n        padding-top: {padding}rem;\n        padding-right: {padding}rem;\n        padding-left: {padding}rem;\n        padding-bottom: {padding}rem;\n    }} <\/style> \"\"\", unsafe_allow_html=True)\n\n\n# ====================================================================\n# CHARGEMENT DES DONNEES\n# ====================================================================\n\n\n# Chargement du mod\u00e8le et des diff\u00e9rents dataframes\n# Optimisation en conservant les donn\u00e9es non modifi\u00e9es en cache m\u00e9moire\n@st.cache(persist=True)\ndef load():\n    with st.spinner('Import des donn\u00e9es'):\n        # Import du dataframe des informations des traits stricts du client\n        fic_client_info = FILE_CLIENT_INFO\n        with open(fic_client_info, 'rb') as df_info_client:\n            df_info_client = pickle.load(df_info_client)\n\n            # Import du dataframe des informations sur le pr\u00eat du client\n        fic_client_pret = FILE_CLIENT_PRET\n        with open(fic_client_pret, 'rb') as df_pret_client:\n            df_pret_client = pickle.load(df_pret_client)\n\n        # Import du dataframe des informations des traits stricts des voisins\n        fic_voisin_info = FILE_VOISINS_INFO\n        with open(fic_voisin_info, 'rb') as df_info_voisins:\n            df_info_voisins = pickle.load(df_info_voisins)\n\n        # Import du dataframe des informations sur le pr\u00eat des voisins\n        fic_voisin_pret = FILE_VOISIN_PRET\n        with open(fic_voisin_pret, 'rb') as df_pret_voisins:\n            df_pret_voisins = pickle.load(df_pret_voisins)\n\n        # Import du dataframe des informations sur le dashboard\n        fic_dashboard = FILE_DASHBOARD\n        with open(fic_dashboard, 'rb') as df_dashboard:\n            df_dashboard = pickle.load(df_dashboard)\n\n        # Import du dataframe des informations sur les voisins aggr\u00e9g\u00e9s\n        fic_voisin_train_agg = FILE_VOISIN_AGG\n        with open(fic_voisin_train_agg, 'rb') as df_voisin_train_agg:\n            df_voisin_train_agg = pickle.load(df_voisin_train_agg)\n\n        # Import du dataframe des informations sur les voisins aggr\u00e9g\u00e9s\n        fic_all_train_agg = FILE_ALL_TRAIN_AGG\n        with open(fic_all_train_agg, 'rb') as df_all_train_agg:\n            df_all_train_agg = pickle.load(df_all_train_agg)\n\n        # Import du dataframe des informations sur les voisins aggr\u00e9g\u00e9s\n        with open(FILE_TEST_SET, 'rb') as df_test_set:\n            test_set = pickle.load(df_test_set)\n\n        # Import du dataframe du test set brut original\n        with open(FILE_APPLICATION_TEST, 'rb') as df_application_test:\n            application_test = pickle.load(df_application_test)\n\n    # Import du meilleur mod\u00e8le lgbm entrain\u00e9\n    with st.spinner('Import du mod\u00e8le'):\n        # Import du meilleur mod\u00e8le lgbm entrain\u00e9\n        fic_best_model = FILE_BEST_MODELE\n        with open(fic_best_model, 'rb') as model_lgbm:\n            best_model = pickle.load(model_lgbm)\n\n    # SHAP values\n    with st.spinner('Lancement SHAP values'):\n        # Test set sans l'identifiant\n        X_bar = test_set.set_index('SK_ID_CURR')\n        # Entra\u00eenement de shap sur le train set\n        bar_explainer = shap.Explainer(best_model, X_bar)\n        bar_values = bar_explainer(X_bar, check_additivity=False)\n\n    return df_info_client, df_pret_client, df_info_voisins, df_pret_voisins, \\\n           df_dashboard, df_voisin_train_agg, df_all_train_agg, test_set, \\\n           application_test, best_model, bar_values\n\n\n# Chargement des dataframes et du mod\u00e8le\ndf_info_client, df_pret_client, df_info_voisins, df_pret_voisins, \\\ndf_dashboard, df_voisin_train_agg, df_all_train_agg, test_set, \\\napplication_test, best_model, bar_values = load()\n\n# ====================================================================\n# CHOIX DU CLIENT\n# ====================================================================\n\nhtml_select_client = \"\"\"\n    <div class=\"card\">\n      <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n        <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                   font-family:Georgia; text-align: center; padding: 0px 0;\">\n          Informations sur le client \/ demande de pr\u00eat\n        <\/h3>\n      <\/div>\n    <\/div>\n    \"\"\"\n\nst.markdown(html_select_client, unsafe_allow_html=True)\n\nwith st.container():\n    col1, col2 = st.columns([1, 3])\n    with col1:\n        st.write(\"\")\n        col1.header(\"**ID Client**\")\n        client_id = col1.selectbox('S\u00e9lectionnez un client :',\n                                   df_info_voisins['ID_CLIENT'].unique())\n    with col2:\n        # Infos principales client\n        # st.write(\"*Traits stricts*\")\n        client_info = df_info_client[df_info_client['SK_ID_CURR'] == client_id].iloc[:, :]\n        client_info.set_index('SK_ID_CURR', inplace=True)\n        st.table(client_info)\n        # Infos principales sur la demande de pr\u00eat\n        # st.write(\"*Demande de pr\u00eat*\")\n        client_pret = df_pret_client[df_pret_client['SK_ID_CURR'] == client_id].iloc[:, :]\n        client_pret.set_index('SK_ID_CURR', inplace=True)\n        st.table(client_pret)\n\n# ====================================================================\n# SCORE - PREDICTIONS\n# ====================================================================\n\nhtml_score = \"\"\"\n    <div class=\"card\">\n      <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n        <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                   font-family:Georgia; text-align: center; padding: 0px 0;\">\n          Cr\u00e9dit Score\n        <\/h3>\n      <\/div>\n    <\/div>\n    \"\"\"\n\nst.markdown(html_score, unsafe_allow_html=True)\n\n# Pr\u00e9paration des donn\u00e9es \u00e0 afficher dans la jauge ==============================================\n\n# ============== Score du client en pourcentage ==> en utilisant le mod\u00e8le ======================\n# S\u00e9lection des variables du clients\nX_test = test_set[test_set['SK_ID_CURR'] == client_id]\n# Score des pr\u00e9dictions de probabilt\u00e9s\ny_proba = best_model.predict_proba(X_test.drop('SK_ID_CURR', axis=1))[:, 1]\n# Score du client en pourcentage arrondi et nombre entier\nscore_client = int(np.rint(y_proba * 100))\n\n# ============== Score moyen des 10 plus proches voisins du test set en pourcentage =============\n\n# Score moyen des 10 plus proches voisins du test set en pourcentage\nscore_moy_voisins_test = int(np.rint(df_dashboard[\n                                         df_dashboard['SK_ID_CURR'] == client_id]['SCORE_10_VOISINS_MEAN_TEST'] * 100))\n\n# ============== Pourcentage de clients voisins d\u00e9faillants dans l'historique des clients =======\npourc_def_voisins_train = int(np.rint(df_dashboard[\n                                          df_dashboard['SK_ID_CURR'] == client_id]['%_NB_10_VOISINS_DEFAILLANT_TRAIN']))\n\n# ============== Pourcentage de clients voisins d\u00e9faillants pr\u00e9dits parmi les nouveaux clients ==\npourc_def_voisins_test = int(np.rint(df_dashboard[\n                                         df_dashboard['SK_ID_CURR'] == client_id]['%_NB_10_VOISINS_DEFAILLANT_TEST']))\n\n# Graphique de jauge du c\u00e9dit score ==========================================\nfig_jauge = go.Figure(go.Indicator(\n    mode='gauge+number+delta',\n    # Score du client en % df_dashboard['SCORE_CLIENT_%']\n    value=score_client,\n    domain={'x': [0, 1], 'y': [0, 1]},\n    title={'text': 'Cr\u00e9dit score du client', 'font': {'size': 24}},\n    # Score des 10 voisins test set\n    # df_dashboard['SCORE_10_VOISINS_MEAN_TEST']\n    delta={'reference': score_moy_voisins_test,\n           'increasing': {'color': 'Crimson'},\n           'decreasing': {'color': 'Green'}},\n    gauge={'axis': {'range': [None, 100],\n                    'tickwidth': 3,\n                    'tickcolor': 'darkblue'},\n           'bar': {'color': 'white', 'thickness': 0.25},\n           'bgcolor': 'white',\n           'borderwidth': 2,\n           'bordercolor': 'gray',\n           'steps': [{'range': [0, 25], 'color': 'Green'},\n                     {'range': [25, 49.49], 'color': 'LimeGreen'},\n                     {'range': [49.5, 50.5], 'color': 'red'},\n                     {'range': [50.51, 75], 'color': 'Orange'},\n                     {'range': [75, 100], 'color': 'Crimson'}],\n           'threshold': {'line': {'color': 'white', 'width': 10},\n                         'thickness': 0.8,\n                         # Score du client en %\n                         # df_dashboard['SCORE_CLIENT_%']\n                         'value': score_client}}))\n\nfig_jauge.update_layout(paper_bgcolor='white',\n                        height=400, width=500,\n                        font={'color': 'darkblue', 'family': 'Arial'},\n                        margin=dict(l=0, r=0, b=0, t=0, pad=0))\n\nwith st.container():\n    # JAUGE + r\u00e9capitulatif du score moyen des voisins\n    col1, col2 = st.columns([1.5, 1])\n    with col1:\n        st.plotly_chart(fig_jauge)\n    with col2:\n        st.write(\"\")\n        st.write(\"\")\n        st.write(\"\")\n        st.write(\"\")\n        st.write(\"\")\n        # Texte d'accompagnement de la jauge\n        if 0 <= score_client < 25:\n            score_text = 'Cr\u00e9dit score : EXCELLENT'\n            st.success(score_text)\n        elif 25 <= score_client < 50:\n            score_text = 'Cr\u00e9dit score : BON'\n            st.success(score_text)\n        elif 50 <= score_client < 75:\n            score_text = 'Cr\u00e9dit score : MOYEN'\n            st.warning(score_text)\n        else:\n            score_text = 'Cr\u00e9dit score : BAS'\n            st.error(score_text)\n        st.write(\"\")\n        st.markdown(f'Cr\u00e9dit score moyen des 10 clients similaires : **{score_moy_voisins_test}**')\n        st.markdown(f'**{pourc_def_voisins_train}**% de clients voisins r\u00e9ellement d\u00e9faillants dans l\\'historique')\n        st.markdown(f'**{pourc_def_voisins_test}**% de clients voisins d\u00e9faillants pr\u00e9dits pour les nouveaux clients')\n\n# ====================================================================\n# SIDEBAR\n# ====================================================================\n\n# Toutes Les informations non modifi\u00e9es du client courant\ndf_client_origin = application_test[application_test['SK_ID_CURR'] == client_id]\n\n# Toutes Les informations non modifi\u00e9es du client courant\ndf_client_test = test_set[test_set['SK_ID_CURR'] == client_id]\n\n# Toutes les informations du client courant\ndf_client_courant = df_dashboard[df_dashboard['SK_ID_CURR'] == client_id]\n\n# --------------------------------------------------------------------\n# LOGO\n# --------------------------------------------------------------------\n# Chargement du logo de l'entreprise\nst.sidebar.image(logo, width=240, caption=\" Dashboard - Aide \u00e0 la d\u00e9cision\",\n                 use_column_width='always')\n\n\n# --------------------------------------------------------------------\n# PLUS INFORMATIONS\n# --------------------------------------------------------------------\ndef all_infos_clients():\n    ''' Affiche toutes les informations sur le client courant\n    '''\n    html_all_infos_clients = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Plus infos\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir toutes infos clients ?\"):\n        st.markdown(html_all_infos_clients, unsafe_allow_html=True)\n\n        with st.spinner('**Affiche toutes les informations sur le client courant...**'):\n            with st.expander('Toutes les informations du client courant',\n                             expanded=True):\n                st.dataframe(df_client_origin)\n                st.dataframe(df_client_test)\n\n\nst.sidebar.subheader('Plus infos')\nall_infos_clients()\n\n\n# --------------------------------------------------------------------\n# CLIENTS SIMILAIRES\n# --------------------------------------------------------------------\ndef infos_clients_similaires():\n    ''' Affiche les informations sur les clients similaires :\n            - traits stricts.\n            - demande de pr\u00eat\n    '''\n    html_clients_similaires = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Clients similaires\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    titre = True\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir graphiques comparatifs ?\"):\n\n        if titre:\n            st.markdown(html_clients_similaires, unsafe_allow_html=True)\n            titre = False\n\n        with st.spinner('**Affiche les graphiques comparant le client courant et les clients similaires...**'):\n\n            with st.expander('Comparaison variables impactantes client courant\/moyennes des clients similaires',\n                             expanded=True):\n                with st.container():\n                    # Pr\u00e9paratifs dataframe\n                    df_client = df_voisin_train_agg[df_voisin_train_agg['ID_CLIENT'] == client_id].astype(int)\n                    # ====================================================================\n                    # Lineplot comparatif features importances client courant\/voisins\n                    # ====================================================================\n\n                    # ===================== Valeurs moyennes des features importances pour le client courant =====================\n                    df_feat_client = df_client_courant[['SK_ID_CURR', 'AMT_ANNUITY',\n                                                        'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                                        'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                                        'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                                        'CAR_EMPLOYED_RATIO', 'CODE_GENDER',\n                                                        'CREDIT_ANNUITY_RATIO', 'CREDIT_GOODS_RATIO',\n                                                        'DAYS_BIRTH', 'DAYS_ID_PUBLISH',\n                                                        'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3',\n                                                        'EXT_SOURCE_MAX', 'EXT_SOURCE_SUM',\n                                                        'FLAG_OWN_CAR', 'INST_PAY_AMT_INSTALMENT_SUM',\n                                                        'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                                        'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                                        'PREV_APP_INTEREST_SHARE_MAX']]\n                    df_feat_client['YEAR_BIRTH'] = \\\n                        np.trunc(np.abs(df_feat_client['DAYS_BIRTH'] \/ 365)).astype('int8')\n                    df_feat_client['YEAR_ID_PUBLISH'] = \\\n                        np.trunc(np.abs(df_feat_client['DAYS_ID_PUBLISH'] \/ 365)).astype('int8')\n                    df_feat_client.drop(columns=['DAYS_BIRTH', 'DAYS_ID_PUBLISH'],\n                                        inplace=True)\n                    df_feat_client_gp1 = df_feat_client[group_val1]\n                    df_feat_client_gp2 = df_feat_client[group_val2]\n                    # X\n                    x_gp1 = df_feat_client_gp1.columns.to_list()\n                    x_gp2 = df_feat_client_gp2.columns.to_list()\n                    # y\n                    y_feat_client_gp1 = df_feat_client_gp1.values[0].tolist()\n                    y_feat_client_gp2 = df_feat_client_gp2.values[0].tolist()\n\n                    # ===================== Valeurs moyennes des features importances pour les 10 voisins =======================\n                    df_moy_feat_voisins = df_client[['ID_CLIENT', 'AMT_ANNUITY_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN',\n                                                     'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN',\n                                                     'CAR_EMPLOYED_RATIO_MEAN', 'CODE_GENDER_MEAN',\n                                                     'CREDIT_ANNUITY_RATIO_MEAN', 'CREDIT_GOODS_RATIO_MEAN',\n                                                     'DAYS_BIRTH_MEAN', 'DAYS_ID_PUBLISH_MEAN',\n                                                     'EXT_SOURCE_1_MEAN', 'EXT_SOURCE_2_MEAN', 'EXT_SOURCE_3_MEAN',\n                                                     'EXT_SOURCE_MAX_MEAN', 'EXT_SOURCE_SUM_MEAN',\n                                                     'FLAG_OWN_CAR_MEAN', 'INST_PAY_AMT_INSTALMENT_SUM_MEAN',\n                                                     'INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN',\n                                                     'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN',\n                                                     'PREV_APP_INTEREST_SHARE_MAX_MEAN']]\n                    df_moy_feat_voisins['YEAR_BIRTH_MEAN'] = \\\n                        np.trunc(np.abs(df_moy_feat_voisins['DAYS_BIRTH_MEAN'] \/ 365)).astype('int8')\n                    df_moy_feat_voisins['YEAR_ID_PUBLISH_MEAN'] = \\\n                        np.trunc(np.abs(df_moy_feat_voisins['DAYS_ID_PUBLISH_MEAN'] \/ 365)).astype('int8')\n                    df_moy_feat_voisins.drop(columns=['DAYS_BIRTH_MEAN', 'DAYS_ID_PUBLISH_MEAN'],\n                                             inplace=True)\n                    df_moy_feat_voisins_gp3 = df_moy_feat_voisins[group_val3]\n                    df_moy_feat_voisins_gp4 = df_moy_feat_voisins[group_val4]\n                    # y\n                    y_moy_feat_voisins_gp3 = df_moy_feat_voisins_gp3.values[0].tolist()\n                    y_moy_feat_voisins_gp4 = df_moy_feat_voisins_gp4.values[0].tolist()\n\n                    # ===================== Valeurs moyennes de tous les clients non-d\u00e9faillants\/d\u00e9faillants du train sets =======================\n                    df_all_train = df_all_train_agg[['TARGET', 'AMT_ANNUITY_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN',\n                                                     'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN',\n                                                     'CAR_EMPLOYED_RATIO_MEAN', 'CODE_GENDER_MEAN',\n                                                     'CREDIT_ANNUITY_RATIO_MEAN', 'CREDIT_GOODS_RATIO_MEAN',\n                                                     'YEAR_BIRTH_MEAN', 'DAYS_ID_PUBLISH_MEAN',\n                                                     'EXT_SOURCE_1_MEAN', 'EXT_SOURCE_2_MEAN', 'EXT_SOURCE_3_MEAN',\n                                                     'EXT_SOURCE_MAX_MEAN', 'EXT_SOURCE_SUM_MEAN',\n                                                     'FLAG_OWN_CAR_MEAN', 'INST_PAY_AMT_INSTALMENT_SUM_MEAN',\n                                                     'INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN',\n                                                     'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN',\n                                                     'PREV_APP_INTEREST_SHARE_MAX_MEAN']]\n                    df_all_train['YEAR_ID_PUBLISH_MEAN'] = \\\n                        np.trunc(np.abs(df_all_train['DAYS_ID_PUBLISH_MEAN'] \/ 365)).astype('int8')\n                    df_all_train.drop(columns=['DAYS_ID_PUBLISH_MEAN'],\n                                      inplace=True)\n                    # Non-d\u00e9faillants\n                    df_all_train_nondef_gp3 = df_all_train[df_all_train['TARGET'] == 0][group_val3]\n                    df_all_train_nondef_gp4 = df_all_train[df_all_train['TARGET'] == 0][group_val4]\n                    # D\u00e9faillants\n                    df_all_train_def_gp3 = df_all_train[df_all_train['TARGET'] == 1][group_val3]\n                    df_all_train_def_gp4 = df_all_train[df_all_train['TARGET'] == 1][group_val4]\n                    # y\n                    # Non-d\u00e9faillants\n                    y_all_train_nondef_gp3 = df_all_train_nondef_gp3.values[0].tolist()\n                    y_all_train_nondef_gp4 = df_all_train_nondef_gp4.values[0].tolist()\n                    # D\u00e9faillants\n                    y_all_train_def_gp3 = df_all_train_def_gp3.values[0].tolist()\n                    y_all_train_def_gp4 = df_all_train_def_gp4.values[0].tolist()\n\n                    # L\u00e9gende des courbes\n                    st.image(lineplot_legende)\n\n                    col1, col2 = st.columns([1, 1.5])\n                    with col1:\n                        # Lineplot de comparaison des features importances client courant\/voisins\/all ================\n                        plt.figure(figsize=(6, 6))\n                        plt.plot(x_gp1, y_feat_client_gp1, color='Orange')\n                        plt.plot(x_gp1, y_moy_feat_voisins_gp3, color='SteelBlue')\n                        plt.plot(x_gp1, y_all_train_nondef_gp3, color='Green')\n                        plt.plot(x_gp1, y_all_train_def_gp3, color='Crimson')\n                        plt.xticks(rotation=90)\n                        st.set_option('deprecation.showPyplotGlobalUse', False)\n                        st.pyplot()\n                    with col2:\n                        # Lineplot de comparaison des features importances client courant\/voisins\/all ================\n                        plt.figure(figsize=(8, 5))\n                        plt.plot(x_gp2, y_feat_client_gp2, color='Orange')\n                        plt.plot(x_gp2, y_moy_feat_voisins_gp4, color='SteelBlue')\n                        plt.plot(x_gp2, y_all_train_nondef_gp4, color='Green')\n                        plt.plot(x_gp2, y_all_train_def_gp4, color='Crimson')\n                        plt.xticks(rotation=90)\n                        st.set_option('deprecation.showPyplotGlobalUse', False)\n                        st.pyplot()\n\n                    with st.container():\n\n                        vars_select = ['AMT_ANNUITY',\n                                       'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                       'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                       'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                       'CAR_EMPLOYED_RATIO',\n                                       'CODE_GENDER',\n                                       'CREDIT_ANNUITY_RATIO',\n                                       'CREDIT_GOODS_RATIO',\n                                       'EXT_SOURCE_1',\n                                       'EXT_SOURCE_2',\n                                       'EXT_SOURCE_3',\n                                       'EXT_SOURCE_MAX',\n                                       'EXT_SOURCE_SUM',\n                                       'FLAG_OWN_CAR',\n                                       'INST_PAY_AMT_INSTALMENT_SUM',\n                                       'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                       'NAME_EDUCATION_TYPE_HIGHER_EDUCATION',\n                                       'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                       'PREV_APP_INTEREST_SHARE_MAX',\n                                       'YEAR_BIRTH',\n                                       'YEAR_ID_PUBLISH']\n\n                        feat_imp_to_show = st.multiselect(\"Feature(s) importance(s) \u00e0 visualiser : \",\n                                                          vars_select)\n\n                        # ==============================================================\n                        # Variable AMT_ANNUITY\n                        # Annuit\u00e9 du pr\u00eat\n                        # ==============================================================\n\n                        if 'AMT_ANNUITY' in feat_imp_to_show:\n                            with st.spinner('**Chargement du graphique comparatif AMT_ANNUITY...**'):\n                                amt_min = int(df_client.AMT_ANNUITY_MIN.values)\n                                amt_q25 = int(df_client.AMT_ANNUITY_Q25.values)\n                                amt_mean = int(df_client.AMT_ANNUITY_MEAN.values)\n                                amt_q75 = int(df_client.AMT_ANNUITY_Q75.values)\n                                amt_max = int(df_client.AMT_ANNUITY_MAX.values)\n                                amt_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'AMT_ANNUITY'].values)\n                                amt_axis_min = min(amt_min, amt_client)\n                                amt_axis_max = max(amt_max, amt_client)\n\n                                fig_amt = go.Figure()\n\n                                fig_amt.add_trace(go.Indicator(\n                                    mode=\"number+gauge+delta\",\n                                    value=amt_client,\n                                    delta={'reference': amt_mean,\n                                           'increasing': {'color': 'Crimson'},\n                                           'decreasing': {'color': 'Green'}},\n                                    domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                    title={'text': 'Annuit\u00e9', 'font': {'size': 12},\n                                           'align': 'left'},\n                                    gauge={\n                                        'shape': 'bullet',\n                                        'axis': {'range': [amt_axis_min, amt_axis_max]},\n                                        'threshold': {\n                                            'line': {'color': 'black', 'width': 3},\n                                            'thickness': 0.75,\n                                            'value': amt_client},\n                                        'steps': [\n                                            {'range': [0, amt_min], 'color': 'white'},\n                                            {'range': [amt_min, amt_q25], 'color': '#de3a5b'},\n                                            {'range': [amt_q25, amt_mean], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [amt_mean, amt_q75], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [amt_q75, amt_max], 'color': '#de3a5b'}],\n                                        'bar': {'color': 'black'}}))\n\n                                fig_amt.update_layout(height=200,\n                                                      margin={'t': 0, 'b': 0, 'l': 0})\n\n                                st.markdown(html_AMT_ANNUITY, unsafe_allow_html=True)\n\n                                # ==================== Go Indicator bullets ==============================================\n                                st.plotly_chart(fig_amt)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='AMT_ANNUITY',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         amt_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['AMT_ANNUITY'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['AMT_ANNUITY'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('AMT_ANNUITY', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=amt_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN\n                        # Valeur minimum de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle\n                        # de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit\n                        # ==============================================================\n                        if 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN' in feat_imp_to_show:\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN...**'):\n                                bccddm_min = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MIN.values)\n                                bccddm_q25 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_Q25.values)\n                                bccddm_mean = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN.values)\n                                bccddm_q75 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_Q75.values)\n                                bccddm_max = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MAX.values)\n                                bccddm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                        'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN'].values)\n                                bccddm_axis_min = min(bccddm_min, bccddm_client)\n                                bccddm_axis_max = max(bccddm_max, bccddm_client)\n\n                                fig_bccdm = go.Figure()\n\n                                fig_bccdm.add_trace(go.Indicator(\n                                    mode=\"number+gauge+delta\",\n                                    value=bccddm_client,\n                                    delta={'reference': bccddm_mean,\n                                           'increasing': {'color': 'Crimson'},\n                                           'decreasing': {'color': 'Green'}},\n                                    domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                    title={'text': 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                           'font': {'size': 9}, 'align': 'left'},\n                                    gauge={\n                                        'shape': 'bullet',\n                                        'axis': {'range': [bccddm_axis_min, bccddm_axis_max]},\n                                        'threshold': {\n                                            'line': {'color': 'black', 'width': 3},\n                                            'thickness': 0.75,\n                                            'value': bccddm_client},\n                                        'steps': [\n                                            {'range': [0, bccddm_min], 'color': 'white'},\n                                            {'range': [bccddm_min, bccddm_q25], 'color': '#de3a5b'},\n                                            {'range': [bccddm_q25, bccddm_mean], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddm_mean, bccddm_q75], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddm_q75, bccddm_max], 'color': '#de3a5b'}],\n                                        'bar': {'color': 'black'}}))\n\n                                fig_bccdm.update_layout(height=200,\n                                                        margin={'t': 0, 'b': 0, 'l': 0})\n\n                                st.markdown(html_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN, unsafe_allow_html=True)\n\n                                # Go Indicator bullets\n                                st.plotly_chart(fig_bccdm)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         bccddm_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=bccddm_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN\n                        # Valeur moyenne de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle\n                        # de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit\n                        # ==============================================================\n                        if 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN' in feat_imp_to_show:\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN...**'):\n                                bccddmean_min = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MIN.values)\n                                bccddmean_q25 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_Q25.values)\n                                bccddmean_mean = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN.values)\n                                bccddmean_q75 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_Q75.values)\n                                bccddmean_max = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MAX.values)\n                                bccddmean_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                           'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN'].values)\n                                bccddmean_axis_min = min(bccddmean_min, bccddmean_client)\n                                bccddmean_axis_max = max(bccddmean_max, bccddmean_client)\n\n                                fig_bccddmean = go.Figure()\n\n                                fig_bccddmean.add_trace(go.Indicator(\n                                    mode=\"number+gauge+delta\",\n                                    value=bccddmean_client,\n                                    delta={'reference': bccddmean_mean,\n                                           'increasing': {'color': 'Crimson'},\n                                           'decreasing': {'color': 'Green'}},\n                                    domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                    title={'text': 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                           'font': {'size': 9}, 'align': 'left'},\n                                    gauge={\n                                        'shape': 'bullet',\n                                        'axis': {'range': [bccddmean_axis_min, bccddmean_axis_max]},\n                                        'threshold': {\n                                            'line': {'color': 'black', 'width': 3},\n                                            'thickness': 0.75,\n                                            'value': bccddmean_client},\n                                        'steps': [\n                                            {'range': [0, bccddmean_min], 'color': 'white'},\n                                            {'range': [bccddmean_min, bccddmean_q25], 'color': '#de3a5b'},\n                                            {'range': [bccddmean_q25, bccddmean_mean], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddmean_mean, bccddmean_q75], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddmean_q75, bccddmean_max], 'color': '#de3a5b'}],\n                                        'bar': {'color': 'black'}}))\n\n                                fig_bccddmean.update_layout(height=200,\n                                                            margin={'t': 0, 'b': 0, 'l': 0})\n\n                                st.markdown(html_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN, unsafe_allow_html=True)\n\n                                # Go Indicator bullets\n                                st.plotly_chart(fig_bccddmean)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         bccddmean_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=bccddmean_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                        # ==============================================================\n                        # Variable BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN\n                        # Moyenne de du ratio des pr\u00eats pr\u00e9c\u00e9dents sur d'autres institution de :\n                        # la dette actuelle sur le cr\u00e9dit et la limite de cr\u00e9dit actuelle de la\n                        # carte de cr\u00e9dit\n                        # ==============================================================\n                        if 'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN' in feat_imp_to_show:\n\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN...**'):\n\n                                bcdtcrm_min = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MIN.values * 100)\n                                bcdtcrm_q25 = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_Q25.values * 100)\n                                bcdtcrm_mean = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN.values * 100)\n                                bcdtcrm_q75 = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_Q75.values * 100)\n                                bcdtcrm_max = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MAX.values * 100)\n                                bcdtcrm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                         'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN'].values * 100)\n                                bcdtcrm_axis_min = min(bcdtcrm_min, bcdtcrm_client)\n                                bcdtcrm_axis_max = max(bcdtcrm_max, bcdtcrm_client)\n\n                                cond = bcdtcrm_client == bcdtcrm_min and bcdtcrm_min == bcdtcrm_q25 \\\n                                       and bcdtcrm_q25 == bcdtcrm_mean and bcdtcrm_mean == bcdtcrm_q75 \\\n                                       and bcdtcrm_q75 == bcdtcrm_max\n\n                                if not cond:\n\n                                    fig_bcdtcrm = go.Figure()\n\n                                    fig_bcdtcrm.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=bcdtcrm_client,\n                                        delta={'reference': bcdtcrm_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [bcdtcrm_axis_min, bcdtcrm_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': bcdtcrm_client},\n                                            'steps': [\n                                                {'range': [0, bcdtcrm_min], 'color': 'white'},\n                                                {'range': [bcdtcrm_min, bcdtcrm_q25], 'color': '#de3a5b'},\n                                                {'range': [bcdtcrm_q25, bcdtcrm_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [bcdtcrm_mean, bcdtcrm_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [bcdtcrm_q75, bcdtcrm_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_bcdtcrm.update_layout(height=200,\n                                                              margin={'t': 0, 'b': 0, 'l': 0})\n                                    st.markdown(html_BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_bcdtcrm)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             bcdtcrm_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=bcdtcrm_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                        # ==============================================================\n                        # Variable CAR_EMPLOYED_RATIO\n                        # Ratio : \u00c2ge de la voiture du demandeur \/ Anciennet\u00e9 dans l'emploi \u00e0 la\n                        # date de la demande\n                        # ==============================================================\n                        if 'CAR_EMPLOYED_RATIO' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif CAR_EMPLOYED_RATIO...**'):\n\n                                cer_max = int(df_client.CAR_EMPLOYED_RATIO_MIN.values * 1000)\n                                cer_q75 = int(df_client.CAR_EMPLOYED_RATIO_Q25.values * 1000)\n                                cer_mean = int(df_client.CAR_EMPLOYED_RATIO_MEAN.values * 1000)\n                                cer_q25 = int(df_client.CAR_EMPLOYED_RATIO_Q75.values * 1000)\n                                cer_min = int(df_client.CAR_EMPLOYED_RATIO_MAX.values * 1000)\n                                cer_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'CAR_EMPLOYED_RATIO'].values * 1000)\n                                cer_axis_min = min(cer_min, cer_client)\n                                cer_axis_max = max(cer_max, cer_client)\n\n                                cond = cer_client == cer_min and cer_min == cer_q25 and \\\n                                       cer_q25 == cer_mean and cer_mean == cer_q75 and \\\n                                       cer_q75 == cer_max\n\n                                if not cond:\n                                    fig_cer = go.Figure()\n\n                                    fig_cer.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=cer_client,\n                                        delta={'reference': cer_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'CAR_EMPLOYED_RATIO',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [cer_axis_min, cer_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': cer_client},\n                                            'steps': [\n                                                {'range': [0, cer_min], 'color': 'white'},\n                                                {'range': [cer_min, cer_q25], 'color': '#de3a5b'},\n                                                {'range': [cer_q25, cer_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cer_mean, cer_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cer_q75, cer_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_cer.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_CAR_EMPLOYED_RATIO, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_cer)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='CAR_EMPLOYED_RATIO',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             cer_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['CAR_EMPLOYED_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['CAR_EMPLOYED_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('CAR_EMPLOYED_RATIO', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=cer_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_CAR_EMPLOYED_RATIO, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable CREDIT_ANNUITY_RATIO\n                        # Ratio : montant du cr\u00e9dit du pr\u00eat \/ Annuit\u00e9 de pr\u00eat\n                        # ==============================================================\n                        if 'CREDIT_ANNUITY_RATIO' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif CREDIT_ANNUITY_RATIO...**'):\n\n                                car_min = int(df_client.CREDIT_ANNUITY_RATIO_MIN.values)\n                                car_q25 = int(df_client.CREDIT_ANNUITY_RATIO_Q25.values)\n                                car_mean = int(df_client.CREDIT_ANNUITY_RATIO_MEAN.values)\n                                car_q75 = int(df_client.CREDIT_ANNUITY_RATIO_Q75.values)\n                                car_max = int(df_client.CREDIT_ANNUITY_RATIO_MAX.values)\n                                car_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'CREDIT_ANNUITY_RATIO'].values)\n                                car_axis_min = min(car_min, car_client)\n                                car_axis_max = max(car_max, car_client)\n\n                                cond = car_client == car_min and car_min == car_q25 and \\\n                                       car_q25 == car_mean and car_mean == car_q75 \\\n                                       and car_q75 == car_max\n\n                                if not cond:\n                                    fig_car = go.Figure()\n\n                                    fig_car.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=car_client,\n                                        delta={'reference': car_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'CREDIT_ANNUITY_RATIO',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [car_axis_min, car_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': car_client},\n                                            'steps': [\n                                                {'range': [0, car_min], 'color': 'white'},\n                                                {'range': [car_min, car_q25], 'color': '#de3a5b'},\n                                                {'range': [car_q25, car_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [car_mean, car_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [car_q75, car_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_car.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_CREDIT_ANNUITY_RATIO, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_car)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='CREDIT_ANNUITY_RATIO',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             car_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_ANNUITY_RATIO'][df_dashboard[\n                                                                                          'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_ANNUITY_RATIO'][df_dashboard[\n                                                                                          'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('CREDIT_ANNUITY_RATIO', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=car_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_CREDIT_ANNUITY_RATIO, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable CREDIT_GOODS_RATIO\n                        # Ratio : Montant du cr\u00e9dit du pr\u00eat \/ prix des biens pour lesquels le pr\u00eat\n                        # est accord\u00e9 \/ Cr\u00e9dit est sup\u00e9rieur au prix des biens ?\n                        # ==============================================================\n                        if 'CREDIT_GOODS_RATIO' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif CREDIT_GOODS_RATIO...**'):\n\n                                cgr_min = int(df_client.CREDIT_GOODS_RATIO_MIN.values * 100)\n                                cgr_q25 = int(df_client.CREDIT_GOODS_RATIO_Q25.values * 100)\n                                cgr_mean = int(df_client.CREDIT_GOODS_RATIO_MEAN.values * 100)\n                                cgr_q75 = int(df_client.CREDIT_GOODS_RATIO_Q75.values * 100)\n                                cgr_max = int(df_client.CREDIT_GOODS_RATIO_MAX.values * 100)\n                                cgr_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'CREDIT_GOODS_RATIO'].values * 100)\n                                cgr_axis_min = min(cgr_min, cgr_client)\n                                cgr_axis_max = max(cgr_max, cgr_client)\n\n                                cond = cgr_client == cgr_min and cgr_min == cgr_q25 \\\n                                       and cgr_q25 == cgr_mean and cgr_mean == cgr_q75 \\\n                                       and cgr_q75 == cgr_max\n\n                                if not cond:\n                                    fig_cgr = go.Figure()\n\n                                    fig_cgr.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=cgr_client,\n                                        delta={'reference': cgr_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'CREDIT_GOODS_RATIO',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [cgr_axis_min, cgr_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': cgr_client},\n                                            'steps': [\n                                                {'range': [0, cgr_min], 'color': 'white'},\n                                                {'range': [cgr_min, cgr_q25], 'color': '#de3a5b'},\n                                                {'range': [cgr_q25, cgr_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cgr_mean, cgr_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cgr_q75, cgr_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_cgr.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_CREDIT_GOODS_RATIO, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_cgr)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='CREDIT_GOODS_RATIO',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             cgr_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_GOODS_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_GOODS_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('CREDIT_GOODS_RATIO', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=cgr_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_CREDIT_GOODS_RATIO, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable YEAR_BIRTH\n                        # \u00c2ge (ans)\n                        # ==============================================================\n                        if 'YEAR_BIRTH' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif YEAR_BIRTH...**'):\n\n                                age_max = int(-df_client.DAYS_BIRTH_MIN.values \/ 365)\n                                age_q75 = int(-df_client.DAYS_BIRTH_Q25.values \/ 365)\n                                age_mean = int(-df_client.DAYS_BIRTH_MEAN.values \/ 365)\n                                age_q25 = int(-df_client.DAYS_BIRTH_Q75.values \/ 365)\n                                age_min = int(-df_client.DAYS_BIRTH_MAX.values \/ 365)\n                                age_client = int(-df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                    'DAYS_BIRTH'].values \/ 365)\n                                age_axis_min = min(age_min, age_client)\n                                age_axis_max = max(age_max, age_client)\n\n                                cond = age_client == age_min and age_min == age_q25 and \\\n                                       age_q25 == age_mean and age_mean == age_q75 and age_q75 == age_max\n\n                                if not cond:\n                                    fig_age = go.Figure()\n\n                                    fig_age.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=age_client,\n                                        delta={'reference': age_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': '\u00c2ge',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [age_axis_min, age_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': age_client},\n                                            'steps': [\n                                                {'range': [0, age_min], 'color': 'white'},\n                                                {'range': [age_min, age_q25], 'color': '#de3a5b'},\n                                                {'range': [age_q25, age_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [age_mean, age_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [age_q75, age_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_age.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_YEAR_BIRTH, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_age)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='YEAR_BIRTH',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             age_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['YEAR_BIRTH'][df_dashboard[\n                                                                                'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['YEAR_BIRTH'][df_dashboard[\n                                                                                'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('YEAR_BIRTH', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=age_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_YEAR_BIRTH, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable YEAR_ID_PUBLISH\n                        # Combien de jours avant la demande le client a-t-il chang\u00e9 la pi\u00e8ce\n                        # d'identit\u00e9 avec laquelle il a demand\u00e9 le pr\u00eat ? (ans)\n                        # ==============================================================\n                        if 'YEAR_ID_PUBLISH' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif YEAR_ID_PUBLISH...**'):\n\n                                dip_max = int(-df_client.DAYS_ID_PUBLISH_MIN.values \/ 365)\n                                dip_q75 = int(-df_client.DAYS_ID_PUBLISH_Q25.values \/ 365)\n                                dip_mean = int(-df_client.DAYS_ID_PUBLISH_MEAN.values \/ 365)\n                                dip_q25 = int(-df_client.DAYS_ID_PUBLISH_Q75.values \/ 365)\n                                dip_min = int(-df_client.DAYS_ID_PUBLISH_MAX.values \/ 365)\n                                dip_client = int(-df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                    'DAYS_ID_PUBLISH'].values \/ 365)\n                                dip_axis_min = min(dip_min, dip_client)\n                                dip_axis_max = max(dip_max, dip_client)\n\n                                cond = dip_client == dip_min and dip_min == dip_q25 and \\\n                                       dip_q25 == dip_mean and dip_mean == dip_q75 and dip_q75 == dip_max\n\n                                if not cond:\n                                    fig_dip = go.Figure()\n\n                                    fig_dip.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=dip_client,\n                                        delta={'reference': dip_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'DAYS_ID_PUBLISH',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [dip_axis_min, dip_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': dip_client},\n                                            'steps': [\n                                                {'range': [0, dip_min], 'color': 'white'},\n                                                {'range': [dip_min, dip_q25], 'color': '#de3a5b'},\n                                                {'range': [dip_q25, dip_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [dip_mean, dip_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [dip_q75, dip_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_dip.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_YEAR_ID_PUBLISH, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_dip)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='DAYS_ID_PUBLISH',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             dip_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['DAYS_ID_PUBLISH'][df_dashboard[\n                                                                                     'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['DAYS_ID_PUBLISH'][df_dashboard[\n                                                                                     'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('DAYS_ID_PUBLISH', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=dip_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_YEAR_ID_PUBLISH, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_1\n                        # Source externe normalis\u00e9e\n                        # ==============================================================\n                        if 'EXT_SOURCE_1' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_1...**'):\n\n                                es1_min = int(df_client.EXT_SOURCE_1_MIN.values * 100)\n                                es1_q25 = int(df_client.EXT_SOURCE_1_Q25.values * 100)\n                                es1_mean = int(df_client.EXT_SOURCE_1_MEAN.values * 100)\n                                es1_q75 = int(df_client.EXT_SOURCE_1_Q75.values * 100)\n                                es1_max = int(df_client.EXT_SOURCE_1_MAX.values * 100)\n                                es1_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_1'].values * 100)\n                                es1_axis_min = min(es1_min, es1_client)\n                                es1_axis_max = max(es1_max, es1_client)\n\n                                cond = es1_client == es1_min and es1_min == es1_q25 and \\\n                                       es1_q25 == es1_mean and es1_mean == es1_q75 and \\\n                                       es1_q75 == es1_max\n\n                                if not cond:\n                                    fig_es1 = go.Figure()\n\n                                    fig_es1.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=es1_client,\n                                        delta={'reference': es1_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_1',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [es1_axis_min, es1_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': es1_client},\n                                            'steps': [\n                                                {'range': [0, es1_min], 'color': 'white'},\n                                                {'range': [es1_min, es1_q25], 'color': '#de3a5b'},\n                                                {'range': [es1_q25, es1_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es1_mean, es1_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es1_q75, es1_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_es1.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_1, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_es1)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_1',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             es1_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_1'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_1'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_1', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=es1_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_1, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_2\n                        # Source externe normalis\u00e9e\n                        # ==============================================================\n                        if 'EXT_SOURCE_2' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_2...**'):\n\n                                es2_min = int(df_client.EXT_SOURCE_2_MIN.values * 100)\n                                es2_q25 = int(df_client.EXT_SOURCE_2_Q25.values * 100)\n                                es2_mean = int(df_client.EXT_SOURCE_2_MEAN.values * 100)\n                                es2_q75 = int(df_client.EXT_SOURCE_2_Q75.values * 100)\n                                es2_max = int(df_client.EXT_SOURCE_2_MAX.values * 100)\n                                es2_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_2'].values * 100)\n                                es2_axis_min = min(es2_min, es2_client)\n                                es2_axis_max = max(es2_max, es2_client)\n\n                                cond = es2_client == es2_min and es2_min == es2_q25 and \\\n                                       es2_q25 == es2_mean and es2_mean == es2_q75 and \\\n                                       es2_q75 == es2_max\n\n                                if not cond:\n                                    fig_es2 = go.Figure()\n\n                                    fig_es2.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=es2_client,\n                                        delta={'reference': es2_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_2',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [es2_axis_min, es2_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': es2_client},\n                                            'steps': [\n                                                {'range': [0, es2_min], 'color': 'white'},\n                                                {'range': [es2_min, es2_q25], 'color': '#de3a5b'},\n                                                {'range': [es2_q25, es2_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es2_mean, es2_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es2_q75, es2_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_es2.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_2, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_es2)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_2',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             es2_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_2'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_2'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_2', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=es2_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_2, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_3\n                        # Source externe normalis\u00e9e\n                        # ==============================================================\n                        if 'EXT_SOURCE_3' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_3...**'):\n\n                                es3_min = int(df_client.EXT_SOURCE_3_MIN.values * 100)\n                                es3_q25 = int(df_client.EXT_SOURCE_3_Q25.values * 100)\n                                es3_mean = int(df_client.EXT_SOURCE_3_MEAN.values * 100)\n                                es3_q75 = int(df_client.EXT_SOURCE_3_Q75.values * 100)\n                                es3_max = int(df_client.EXT_SOURCE_3_MAX.values * 100)\n                                es3_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_3'].values * 100)\n                                es3_axis_min = min(es3_min, es3_client)\n                                es3_axis_max = max(es3_max, es3_client)\n\n                                cond = es3_client == es3_min and es3_min == es3_q25 and \\\n                                       es3_q25 == es3_mean and es3_mean == es3_q75 and \\\n                                       es3_q75 == es3_max\n\n                                if not cond:\n                                    fig_es3 = go.Figure()\n\n                                    fig_es3.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=es3_client,\n                                        delta={'reference': es3_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_3',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [es3_axis_min, es3_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': es3_client},\n                                            'steps': [\n                                                {'range': [0, es3_min], 'color': 'white'},\n                                                {'range': [es3_min, es3_q25], 'color': '#de3a5b'},\n                                                {'range': [es3_q25, es3_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es3_mean, es3_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es3_q75, es3_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_es3.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_3, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_es3)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_3',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             es3_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_3'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_3'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_3', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=es3_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_3, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_MAX\n                        # Valeur maximale des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3)\n                        # ==============================================================\n                        if 'EXT_SOURCE_MAX' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_MAX...**'):\n\n                                esm_min = int(df_client.EXT_SOURCE_MAX_MIN.values * 100)\n                                esm_q25 = int(df_client.EXT_SOURCE_MAX_Q25.values * 100)\n                                esm_mean = int(df_client.EXT_SOURCE_MAX_MEAN.values * 100)\n                                esm_q75 = int(df_client.EXT_SOURCE_MAX_Q75.values * 100)\n                                esm_max = int(df_client.EXT_SOURCE_MAX_MAX.values * 100)\n                                esm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_MAX'].values * 100)\n                                esm_axis_min = min(esm_min, esm_client)\n                                esm_axis_max = max(esm_max, esm_client)\n\n                                cond = esm_client == esm_min and esm_min == esm_q25 and \\\n                                       esm_q25 == esm_mean and esm_mean == esm_q75 and \\\n                                       esm_q75 == esm_max\n\n                                if not cond:\n                                    fig_esm = go.Figure()\n\n                                    fig_esm.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=esm_client,\n                                        delta={'reference': esm_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_MAX',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [esm_axis_min, esm_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': esm_client},\n                                            'steps': [\n                                                {'range': [0, esm_min], 'color': 'white'},\n                                                {'range': [esm_min, esm_q25], 'color': '#de3a5b'},\n                                                {'range': [esm_q25, esm_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [esm_mean, esm_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [esm_q75, esm_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_esm.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_MAX, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_esm)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_MAX',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             esm_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_MAX'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_MAX'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_MAX', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=esm_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_MAX, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_SUM\n                        # Somme des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3)\n                        # ==============================================================\n                        if 'EXT_SOURCE_SUM' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_SUM...**'):\n\n                                ess_min = int(df_client.EXT_SOURCE_SUM_MIN.values * 100)\n                                ess_q25 = int(df_client.EXT_SOURCE_SUM_Q25.values * 100)\n                                ess_mean = int(df_client.EXT_SOURCE_SUM_MEAN.values * 100)\n                                ess_q75 = int(df_client.EXT_SOURCE_SUM_Q75.values * 100)\n                                ess_max = int(df_client.EXT_SOURCE_SUM_MAX.values * 100)\n                                ess_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_SUM'].values * 100)\n                                ess_axis_min = min(ess_min, ess_client)\n                                ess_axis_max = max(ess_max, ess_client)\n\n                                cond = ess_client == ess_min and ess_min == ess_q25 and \\\n                                       ess_q25 == ess_mean and ess_mean == ess_q75 and \\\n                                       ess_q75 == ess_max\n\n                                if not cond:\n                                    fig_ess = go.Figure()\n\n                                    fig_ess.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=ess_client,\n                                        delta={'reference': ess_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_SUM',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [ess_axis_min, ess_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': ess_client},\n                                            'steps': [\n                                                {'range': [0, ess_min], 'color': 'white'},\n                                                {'range': [ess_min, ess_q25], 'color': '#de3a5b'},\n                                                {'range': [ess_q25, ess_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ess_mean, ess_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ess_q75, ess_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_ess.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_SUM, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_ess)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_SUM',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             ess_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_SUM'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_SUM'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_SUM', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=ess_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_SUM, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable INST_PAY_AMT_INSTALMENT_SUM\n                        # Somme du montant de l'acompte prescrit des cr\u00e9dits pr\u00e9c\u00e9dents sur cet\n                        # acompte\n                        # ==============================================================\n                        if 'INST_PAY_AMT_INSTALMENT_SUM' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif INST_PAY_AMT_INSTALMENT_SUM...**'):\n\n                                ipais_min = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_MIN.values)\n                                ipais_q25 = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_Q25.values)\n                                ipais_mean = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_MEAN.values)\n                                ipais_q75 = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_Q75.values)\n                                ipais_max = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_MAX.values)\n                                ipais_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                       'INST_PAY_AMT_INSTALMENT_SUM'].values)\n                                ipais_axis_min = min(ipais_min, ipais_client)\n                                ipais_axis_max = max(ipais_max, ipais_client)\n\n                                cond = ipais_client == ipais_min and ipais_min == ipais_q25 and \\\n                                       ipais_q25 == ipais_mean and ipais_mean == ipais_q75 and \\\n                                       ipais_q75 == ipais_max\n\n                                if not cond:\n                                    fig_ipais = go.Figure()\n\n                                    fig_ipais.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=ipais_client,\n                                        delta={'reference': ipais_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'INST_PAY_AMT_INSTALMENT_SUM',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [ipais_axis_min, ipais_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': ipais_client},\n                                            'steps': [\n                                                {'range': [0, ipais_min], 'color': 'white'},\n                                                {'range': [ipais_min, ipais_q25], 'color': '#de3a5b'},\n                                                {'range': [ipais_q25, ipais_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipais_mean, ipais_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipais_q75, ipais_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_ipais.update_layout(height=200,\n                                                            margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_INST_PAY_AMT_INSTALMENT_SUM, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_ipais)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='INST_PAY_AMT_INSTALMENT_SUM',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             ipais_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_AMT_INSTALMENT_SUM'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_AMT_INSTALMENT_SUM'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('INST_PAY_AMT_INSTALMENT_SUM', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=ipais_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_INST_PAY_AMT_INSTALMENT_SUM, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable INST_PAY_DAYS_PAYMENT_RATIO_MAX\n                        # Valeur maximal dans l'historique des pr\u00e9c\u00e9dents cr\u00e9dits rembours\u00e9s\n                        # dans Home Cr\u00e9dit du ratio : La date \u00e0 laquelle le versement du cr\u00e9dit\n                        # pr\u00e9c\u00e9dent \u00e9tait cens\u00e9 \u00eatre pay\u00e9 (par rapport \u00e0 la date de demande du\n                        # pr\u00eat actuel) \\ Quand les \u00e9ch\u00e9ances du cr\u00e9dit pr\u00e9c\u00e9dent ont-elles \u00e9t\u00e9\n                        # effectivement pay\u00e9es (par rapport \u00e0 la date de demande du pr\u00eat\n                        # ==============================================================\n                        if 'INST_PAY_DAYS_PAYMENT_RATIO_MAX' in feat_imp_to_show:\n\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif INST_PAY_DAYS_PAYMENT_RATIO_MAX...**'):\n\n                                ipdprm_min = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_MIN.values)\n                                ipdprm_q25 = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_Q25.values)\n                                ipdprm_mean = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN.values)\n                                ipdprm_q75 = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_Q75.values)\n                                ipdprm_max = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_MAX.values)\n                                ipdprm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                        'INST_PAY_DAYS_PAYMENT_RATIO_MAX'].values)\n                                ipdprm_axis_min = min(ipdprm_min, ipdprm_client)\n                                ipdprm_axis_max = max(ipdprm_max, ipdprm_client)\n\n                                cond = ipdprm_client == ipdprm_min and ipdprm_min == ipdprm_q25 and \\\n                                       ipdprm_q25 == ipdprm_mean and ipdprm_mean == ipdprm_q75 and \\\n                                       ipdprm_q75 == ipdprm_max\n\n                                if not cond:\n                                    fig_ipdprm = go.Figure()\n\n                                    fig_ipdprm.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=ipdprm_client,\n                                        delta={'reference': ipdprm_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [ipdprm_axis_min, ipdprm_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': ipdprm_client},\n                                            'steps': [\n                                                {'range': [0, ipdprm_min], 'color': 'white'},\n                                                {'range': [ipdprm_min, ipdprm_q25], 'color': '#de3a5b'},\n                                                {'range': [ipdprm_q25, ipdprm_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipdprm_mean, ipdprm_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipdprm_q75, ipdprm_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_ipdprm.update_layout(height=200,\n                                                             margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_INST_PAY_DAYS_PAYMENT_RATIO_MAX, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_ipdprm)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             ipdprm_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_DAYS_PAYMENT_RATIO_MAX'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_DAYS_PAYMENT_RATIO_MAX'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('INST_PAY_DAYS_PAYMENT_RATIO_MAX', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=ipdprm_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_INST_PAY_DAYS_PAYMENT_RATIO_MAX, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM\n                        # Somme des contrats actifs au cours du mois\n                        # ==============================================================\n                        if 'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM' in feat_imp_to_show:\n\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM...**'):\n\n                                pcncsas_min = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MIN.values)\n                                pcncsas_q25 = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_Q25.values)\n                                pcncsas_mean = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN.values)\n                                pcncsas_q75 = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_Q75.values)\n                                pcncsas_max = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MAX.values)\n                                pcncsas_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                         'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM'].values)\n                                pcncsas_axis_min = min(pcncsas_min, pcncsas_client)\n                                pcncsas_axis_max = max(pcncsas_max, pcncsas_client)\n\n                                cond = pcncsas_client == pcncsas_min and pcncsas_min == pcncsas_q25 and \\\n                                       pcncsas_q25 == pcncsas_mean and pcncsas_mean == pcncsas_q75 and \\\n                                       pcncsas_q75 == pcncsas_max\n\n                                if not cond:\n                                    fig_pcncsas = go.Figure()\n\n                                    fig_pcncsas.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=pcncsas_client,\n                                        delta={'reference': pcncsas_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [pcncsas_axis_min, pcncsas_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': pcncsas_client},\n                                            'steps': [\n                                                {'range': [0, pcncsas_min], 'color': 'white'},\n                                                {'range': [pcncsas_min, pcncsas_q25], 'color': '#de3a5b'},\n                                                {'range': [pcncsas_q25, pcncsas_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [pcncsas_mean, pcncsas_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [pcncsas_q75, pcncsas_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_pcncsas.update_layout(height=200,\n                                                              margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_pcncsas)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             pcncsas_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=pcncsas_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable PREV_APP_INTEREST_SHARE_MAX\n                        # La valeur maximale de tous les pr\u00e9c\u00e9dents cr\u00e9dit dans d'autres\n                        # institution : de la dur\u00e9e du cr\u00e9dit multipli\u00e9 par l'annuit\u00e9 du pr\u00eat\n                        # moins le montant final du cr\u00e9dit\n                        # ==============================================================\n                        if 'PREV_APP_INTEREST_SHARE_MAX' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif PREV_APP_INTEREST_SHARE_MAX...**'):\n\n                                paism_min = int(df_client.PREV_APP_INTEREST_SHARE_MAX_MIN.values)\n                                paism_q25 = int(df_client.PREV_APP_INTEREST_SHARE_MAX_Q25.values)\n                                paism_mean = int(df_client.PREV_APP_INTEREST_SHARE_MAX_MEAN.values)\n                                paism_q75 = int(df_client.PREV_APP_INTEREST_SHARE_MAX_Q75.values)\n                                paism_max = int(df_client.PREV_APP_INTEREST_SHARE_MAX_MAX.values)\n                                paism_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                       'PREV_APP_INTEREST_SHARE_MAX'].values)\n                                paism_axis_min = min(paism_min, paism_client)\n                                paism_axis_max = max(paism_max, paism_client)\n\n                                cond = paism_client == paism_min and paism_min == paism_q25 and \\\n                                       paism_q25 == paism_mean and paism_mean == paism_q75 and \\\n                                       paism_q75 == paism_max\n\n                                if not cond:\n                                    fig_paism = go.Figure()\n\n                                    fig_paism.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=paism_client,\n                                        delta={'reference': paism_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'PREV_APP_INTEREST_SHARE_MAX',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [paism_axis_min, paism_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': paism_client},\n                                            'steps': [\n                                                {'range': [0, paism_min], 'color': 'white'},\n                                                {'range': [paism_min, paism_q25], 'color': '#de3a5b'},\n                                                {'range': [paism_q25, paism_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [paism_mean, paism_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [paism_q75, paism_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_paism.update_layout(height=200,\n                                                            margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_PREV_APP_INTEREST_SHARE_MAX, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_paism)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='PREV_APP_INTEREST_SHARE_MAX',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             paism_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['PREV_APP_INTEREST_SHARE_MAX'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['PREV_APP_INTEREST_SHARE_MAX'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('PREV_APP_INTEREST_SHARE_MAX', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=paism_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_PREV_APP_INTEREST_SHARE_MAX, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable CODE_GENDER\n                        # Sexe\n                        # ==============================================================\n                        if 'CODE_GENDER' in feat_imp_to_show:\n                            with st.spinner('**Chargement du graphique comparatif CODE_GENDER...**'):\n                                cg_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                    'CODE_GENDER'].values)\n\n                                st.markdown(html_CODE_GENDER, unsafe_allow_html=True)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='CODE_GENDER',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         cg_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['CODE_GENDER'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['CODE_GENDER'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('CODE_GENDER', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=cg_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable FLAG_OWN_CAR\n                        # Indicateur si le client poss\u00e8de une voiture\n                        # ==============================================================\n                        if 'FLAG_OWN_CAR' in feat_imp_to_show:\n                            with st.spinner('**Chargement du graphique comparatif FLAG_OWN_CAR...**'):\n                                foc_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'FLAG_OWN_CAR'].values)\n\n                                st.markdown(html_FLAG_OWN_CAR, unsafe_allow_html=True)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='FLAG_OWN_CAR',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         foc_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['FLAG_OWN_CAR'][df_dashboard[\n                                                                              'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['FLAG_OWN_CAR'][df_dashboard[\n                                                                              'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('FLAG_OWN_CAR', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=foc_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable NAME_EDUCATION_TYPE_HIGHER_EDUCATION\n                        # Indicateur si le client poss\u00e8de une voiture\n                        # ==============================================================\n                        if 'NAME_EDUCATION_TYPE_HIGHER_EDUCATION' in feat_imp_to_show:\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif NAME_EDUCATION_TYPE_HIGHER_EDUCATION...**'):\n                                nethe_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                       'NAME_EDUCATION_TYPE_HIGHER_EDUCATION'].values)\n\n                                st.markdown(html_NAME_EDUCATION_TYPE_HIGHER_EDUCATION, unsafe_allow_html=True)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='NAME_EDUCATION_TYPE_HIGHER_EDUCATION',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         nethe_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['NAME_EDUCATION_TYPE_HIGHER_EDUCATION'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['NAME_EDUCATION_TYPE_HIGHER_EDUCATION'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('NAME_EDUCATION_TYPE_HIGHER_EDUCATION', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=nethe_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.pyplot()\n\n                                # ====================== COMPARAISON TRAITS STRICTS CLIENT COURANT \/ CLIENTS SIMILAIRES ============================\n    if st.sidebar.checkbox(\"Comparer traits stricts ?\"):\n\n        if titre:\n            st.markdown(html_clients_similaires, unsafe_allow_html=True)\n            titre = False\n\n        with st.spinner('**Affiche les traits stricts comparant le client courant et les clients similaires...**'):\n\n            with st.expander('Comparaison traits stricts',\n                             expanded=True):\n                # Infos principales clients similaires\n                voisins_info = df_info_voisins[df_info_voisins['ID_CLIENT'] == client_id].iloc[:, 1:]\n                voisins_info.set_index('INDEX_VOISIN', inplace=True)\n                st.write('Client courant')\n                st.dataframe(client_info)\n                st.write('10 clients similaires')\n                st.dataframe(voisins_info.style.highlight_max(axis=0))\n\n    # ====================== COMPARAISON DEMANDE DE PR\u00caT CLIENT COURANT \/ CLIENTS SIMILAIRES ============================\n    if st.sidebar.checkbox(\"Comparer demande pr\u00eat ?\"):\n\n        if titre:\n            st.markdown(html_clients_similaires, unsafe_allow_html=True)\n            titre = False\n\n        with st.spinner(\n                '**Affiche les informations de la demande de pr\u00eat comparant le client courant et les clients similaires...**'):\n\n            with st.expander('Comparaison demande de pr\u00eat',\n                             expanded=True):\n                # Infos principales sur la demande de pr\u00eat\n                voisins_pret = df_pret_voisins[df_pret_voisins['ID_CLIENT'] == client_id].iloc[:, 1:]\n                voisins_pret.set_index('INDEX_VOISIN', inplace=True)\n                st.write('Client courant')\n                st.dataframe(client_pret)\n                st.write('10 clients similaires')\n                st.dataframe(voisins_pret.style.highlight_max(axis=0))\n\n\nst.sidebar.subheader('Clients similaires')\ninfos_clients_similaires()\n\n\n# --------------------------------------------------------------------\n# FACTEURS D'INFLUENCE : SHAP VALUE\n# --------------------------------------------------------------------\n\ndef affiche_facteurs_influence():\n    ''' Affiche les facteurs d'influence du client courant\n    '''\n    html_facteurs_influence = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Variables importantes\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir facteurs d\\'influence\"):\n        st.markdown(html_facteurs_influence, unsafe_allow_html=True)\n\n        with st.spinner('**Affiche les facteurs d\\'influence du client courant...**'):\n            with st.expander('Facteurs d\\'influence du client courant',\n                             expanded=True):\n                explainer = shap.TreeExplainer(best_model)\n\n                client_index = test_set[test_set['SK_ID_CURR'] == client_id].index.item()\n                X_shap = test_set.set_index('SK_ID_CURR')\n                X_test_courant = X_shap.iloc[client_index]\n                X_test_courant_array = X_test_courant.values.reshape(1, -1)\n\n                shap_values_courant = explainer.shap_values(X_test_courant_array)\n\n                col1, col2 = st.columns([1, 1])\n                # BarPlot du client courant\n                with col1:\n                    plt.clf()\n\n                    # BarPlot du client courant\n                    shap.plots.bar(bar_values[client_index], max_display=40)\n\n                    fig = plt.gcf()\n                    fig.set_size_inches((10, 20))\n                    # Plot the graph on the dashboard\n                    st.pyplot(fig)\n\n                # D\u00e9cision plot du client courant\n                with col2:\n                    plt.clf()\n\n                    # D\u00e9cision Plot\n                    shap.decision_plot(explainer.expected_value[1], shap_values_courant[1],\n                                       X_test_courant)\n\n                    fig2 = plt.gcf()\n                    fig2.set_size_inches((10, 15))\n                    # Plot the graph on the dashboard\n                    st.pyplot(fig2)\n\n\nst.sidebar.subheader('Facteurs d\\'influence')\naffiche_facteurs_influence()\n\n# --------------------------------------------------------------------\n# STATISTIQUES GENERALES\n# --------------------------------------------------------------------\n\ndico_stats = {'Variable cible': 'TARGET',\n              'Type de pr\u00eat': 'NAME_CONTRACT_TYPE',\n              'Sexe': 'CODE_GENDER',\n              'T\u00e9l. professionnel': 'FLAG_EMP_PHONE',\n              'Note r\u00e9gion o\u00f9 vit client': 'REGION_RATING_CLIENT_W_CITY',\n              'Niveau \u00e9ducation du client': 'NAME_EDUCATION_TYPE',\n              'Profession du client': 'OCCUPATION_TYPE',\n              'Type d\\'organisation de travail du client': 'ORGANIZATION_TYPE',\n              'Adresse du client = adresse de contact': 'REG_CITY_NOT_LIVE_CITY',\n              'R\u00e9gion du client = adresse professionnelle': 'REG_CITY_NOT_WORK_CITY',\n              'Adresse du client = adresse professionnelle': 'LIVE_CITY_NOT_WORK_CITY',\n              'Logement du client': 'NAME_HOUSING_TYPE',\n              'Statut familial': 'NAME_FAMILY_STATUS',\n              'Type de revenu du client': 'NAME_INCOME_TYPE',\n              'Client poss\u00e8de une maison ou appartement?': 'FLAG_OWN_REALTY',\n              'Accompagnateur lors de la demande de pr\u00eat?': 'NAME_TYPE_SUITE',\n              'Quel jour de la semaine le client a-t-il demand\u00e9 le pr\u00eat ?': 'WEEKDAY_APPR_PROCESS_START',\n              'Le client a-t-il fourni un num\u00e9ro de t\u00e9l\u00e9phone portable ?': 'FLAG_MOBIL',\n              'Le client a-t-il fourni un num\u00e9ro de t\u00e9l\u00e9phone professionnel fixe ?': 'FLAG_WORK_PHONE',\n              'Le t\u00e9l\u00e9phone portable \u00e9tait-il joignable?': 'FLAG_CONT_MOBILE',\n              'Le client a-t-il fourni un num\u00e9ro de t\u00e9l\u00e9phone domicile fixe ?': 'FLAG_PHONE',\n              'Le client a-t-il fourni une adresse \u00e9lectronique': 'FLAG_EMAIL',\n              '\u00c2ge (ans)': 'AGE_YEARS',\n              'Combien d\\'ann\u00e9es avant la demande la personne a commenc\u00e9 son emploi actuel ?': 'YEARS_EMPLOYED',\n              'Combien de jours avant la demande le client a-t-il chang\u00e9 son enregistrement ?': 'DAYS_REGISTRATION',\n              'Combien de jours avant la demande le client a-t-il chang\u00e9 la pi\u00e8ce d\\'identit\u00e9 avec laquelle il a demand\u00e9 le pr\u00eat ?': 'DAYS_ID_PUBLISH',\n              'Prix du bien que le client a demand\u00e9': 'AMT_GOODS_PRICE',\n              'Nombre d\\enfants?': 'CNT_CHILDREN',\n              'Revenu du client': 'AMT_INCOME_TOTAL',\n              'Montant du cr\u00e9dit du pr\u00eat': 'AMT_CREDIT',\n              'Annuit\u00e9 de pr\u00eat': 'AMT_ANNUITY',\n              '\u00c2ge de la voiture du client': 'OWN_CAR_AGE',\n              'Combien de membres de la famille a le client': 'CNT_FAM_MEMBERS',\n              'Population normalis\u00e9e de la r\u00e9gion o\u00f9 vit le client': 'REGION_POPULATION_RELATIVE',\n              'Notre \u00e9valuation de la r\u00e9gion o\u00f9 vit le client (1 ou 2 ou 3)': 'REGION_RATING_CLIENT',\n              'Indicateur si l\\'adresse permanente du client ne correspond pas \u00e0 l\\'adresse de contact': 'REG_REGION_NOT_LIVE_REGION',\n              'Indicateur si l\\'adresse permanente du client ne correspond pas \u00e0 l\\'adresse professionnelle': 'REG_REGION_NOT_WORK_REGION',\n              'Indicateur si l\\'adresse de contact du client ne correspond pas \u00e0 l\\'adresse de travail': 'LIVE_REGION_NOT_WORK_REGION',\n              'Combien de jours avant la demande le client a-t-il chang\u00e9 de t\u00e9l\u00e9phone ?': 'DAYS_LAST_PHONE_CHANGE',\n              'Statut des cr\u00e9dits d\u00e9clar\u00e9s par le Credit Bureau': 'CREDIT_ACTIVE',\n              'Devise recod\u00e9e du cr\u00e9dit du Credit Bureau': 'CREDIT_CURRENCY',\n              'Type de cr\u00e9dit du Bureau de cr\u00e9dit (voiture ou argent liquide...)': 'CREDIT_TYPE',\n              'Combien d\\ann\u00e9es avant la demande actuelle le client a-t-il demand\u00e9 un cr\u00e9dit au Credit Bureau ?': 'YEARS_CREDIT',\n              'Dur\u00e9e restante du cr\u00e9dit CB (en jours) au moment de la demande dans Cr\u00e9dit immobilier': 'DAYS_CREDIT_ENDDATE',\n              'Combien de jours avant la demande de pr\u00eat la derni\u00e8re information sur la solvabilit\u00e9 du Credit Bureau a-t-elle \u00e9t\u00e9 fournie ?': 'DAYS_CREDIT_UPDATE',\n              'Nombre de jours de retard sur le cr\u00e9dit CB au moment de la demande de pr\u00eat': 'CREDIT_DAY_OVERDUE',\n              'Montant maximal des impay\u00e9s sur le cr\u00e9dit du Credit Bureau jusqu\\'\u00e0 pr\u00e9sent': 'AMT_CREDIT_MAX_OVERDUE',\n              'Combien de fois le cr\u00e9dit du Bureau de cr\u00e9dit a-t-il \u00e9t\u00e9 prolong\u00e9 ?': 'CNT_CREDIT_PROLONG',\n              'Montant actuel du cr\u00e9dit du Credit Bureau': 'AMT_CREDIT_SUM',\n              'Dette actuelle sur le cr\u00e9dit du Credit Bureau': 'AMT_CREDIT_SUM_DEBT',\n              'Limite de cr\u00e9dit actuelle de la carte de cr\u00e9dit d\u00e9clar\u00e9e dans le Bureau de cr\u00e9dit': 'AMT_CREDIT_SUM_LIMIT',\n              'Montant actuel en retard sur le cr\u00e9dit du Bureau de cr\u00e9dit': 'AMT_CREDIT_SUM_OVERDUE',\n              'Annuit\u00e9 du cr\u00e9dit du Credit Bureau': 'AMT_ANNUITY',\n              'Statut du pr\u00eat du Credit Bureau durant le mois': 'STATUS',\n              'Mois du solde par rapport \u00e0 la date de la demande': 'MONTHS_BALANCE',\n              'Statut du contrat au cours du mois': 'NAME_CONTRACT_STATUS',\n              'Solde au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_BALANCE',\n              'Montant total \u00e0 recevoir sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_TOTAL_RECEIVABLE',\n              'Nombre d\\'\u00e9ch\u00e9ances pay\u00e9es sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_INSTALMENT_MATURE_CUM',\n              'Mois du solde par rapport \u00e0 la date d\\'application': 'MONTHS_BALANCE',\n              'Limite de la carte de cr\u00e9dit au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_CREDIT_LIMIT_ACTUAL',\n              'Montant retir\u00e9 au guichet automatique pendant le mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_DRAWINGS_ATM_CURRENT',\n              'Montant pr\u00e9lev\u00e9 au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_DRAWINGS_CURRENT',\n              'Montant des autres pr\u00e9l\u00e8vements au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_DRAWINGS_OTHER_CURRENT',\n              'Montant des pr\u00e9l\u00e8vements ou des achats de marchandises au cours du mois de la cr\u00e9dibilit\u00e9 pr\u00e9c\u00e9dente': 'AMT_DRAWINGS_POS_CURRENT',\n              'Versement minimal pour ce mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_INST_MIN_REGULARITY',\n              'Combien le client a-t-il pay\u00e9 pendant le mois sur le cr\u00e9dit pr\u00e9c\u00e9dent ?': 'AMT_PAYMENT_CURRENT',\n              'Combien le client a-t-il pay\u00e9 au total pendant le mois sur le cr\u00e9dit pr\u00e9c\u00e9dent ?': 'AMT_PAYMENT_TOTAL_CURRENT',\n              'Montant \u00e0 recevoir pour le principal du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_RECEIVABLE_PRINCIPAL',\n              'Montant \u00e0 recevoir sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_RECIVABLE',\n              'Nombre de retraits au guichet automatique durant ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_ATM_CURRENT',\n              'Nombre de retraits pendant ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_CURRENT',\n              'Nombre d\\'autres retraits au cours de ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_OTHER_CURRENT',\n              'Nombre de retraits de marchandises durant ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_POS_CURRENT',\n              'DPD (jours de retard) au cours du mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'SK_DPD',\n              'DPD (Days past due) au cours du mois avec tol\u00e9rance (les dettes avec de faibles montants de pr\u00eat sont ignor\u00e9es) du cr\u00e9dit pr\u00e9c\u00e9dent': 'SK_DPD_DEF',\n              'La date \u00e0 laquelle le versement du cr\u00e9dit pr\u00e9c\u00e9dent \u00e9tait cens\u00e9 \u00eatre pay\u00e9 (par rapport \u00e0 la date de demande du pr\u00eat actuel)': 'DAYS_INSTALMENT',\n              'Quand les \u00e9ch\u00e9ances du cr\u00e9dit pr\u00e9c\u00e9dent ont-elles \u00e9t\u00e9 effectivement pay\u00e9es (par rapport \u00e0 la date de demande du pr\u00eat actuel) ?': 'DAYS_ENTRY_PAYMENT',\n              'Version du calendrier des versements (0 pour la carte de cr\u00e9dit) du cr\u00e9dit pr\u00e9c\u00e9dent': 'NUM_INSTALMENT_VERSION',\n              'Sur quel versement nous observons le paiement': 'NUM_INSTALMENT_NUMBER',\n              'Quel \u00e9tait le montant de l\\'acompte prescrit du cr\u00e9dit pr\u00e9c\u00e9dent sur cet acompte ?': 'AMT_INSTALMENT',\n              'Ce que le client a effectivement pay\u00e9 sur le cr\u00e9dit pr\u00e9c\u00e9dent pour ce versement': 'AMT_PAYMENT',\n              'Statut du contrat au cours du mois': 'NAME_CONTRACT_STATUS',\n              'Dur\u00e9e du cr\u00e9dit pr\u00e9c\u00e9dent (peut changer avec le temps)': 'CNT_INSTALMENT',\n              'Versements restant \u00e0 payer sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_INSTALMENT_FUTURE',\n              'EXT_SOURCE_1': 'EXT_SOURCE_1',\n              'EXT_SOURCE_2': 'EXT_SOURCE_2',\n              'EXT_SOURCE_3': 'EXT_SOURCE_3',\n              'FLAG_DOCUMENT_2': 'FLAG_DOCUMENT_2',\n              'FLAG_DOCUMENT_3': 'FLAG_DOCUMENT_3',\n              'FLAG_DOCUMENT_4': 'FLAG_DOCUMENT_4',\n              'FLAG_DOCUMENT_5': 'FLAG_DOCUMENT_5',\n              'FLAG_DOCUMENT_6': 'FLAG_DOCUMENT_6',\n              'FLAG_DOCUMENT_7': 'FLAG_DOCUMENT_7',\n              'FLAG_DOCUMENT_8': 'FLAG_DOCUMENT_8',\n              'FLAG_DOCUMENT_9': 'FLAG_DOCUMENT_9',\n              'FLAG_DOCUMENT_10': 'FLAG_DOCUMENT_10',\n              'FLAG_DOCUMENT_11': 'FLAG_DOCUMENT_11',\n              'FLAG_DOCUMENT_12': 'FLAG_DOCUMENT_12',\n              'FLAG_DOCUMENT_13': 'FLAG_DOCUMENT_13',\n              'FLAG_DOCUMENT_14': 'FLAG_DOCUMENT_14',\n              'FLAG_DOCUMENT_15': 'FLAG_DOCUMENT_15',\n              'FLAG_DOCUMENT_16': 'FLAG_DOCUMENT_16',\n              'FLAG_DOCUMENT_17': 'FLAG_DOCUMENT_17',\n              'FLAG_DOCUMENT_18': 'FLAG_DOCUMENT_18',\n              'FLAG_DOCUMENT_19': 'FLAG_DOCUMENT_19',\n              'FLAG_DOCUMENT_20': 'FLAG_DOCUMENT_20',\n              'FLAG_DOCUMENT_21': 'FLAG_DOCUMENT_21',\n              'FONDKAPREMONT_MODE': 'FONDKAPREMONT_MODE',\n              'HOUSETYPE_MODE': 'HOUSETYPE_MODE',\n              'WALLSMATERIAL_MODE': 'WALLSMATERIAL_MODE',\n              'EMERGENCYSTATE_MODE': 'EMERGENCYSTATE_MODE',\n              'FLOORSMAX_AVG': 'FLOORSMAX_AVG',\n              'FLOORSMAX_MEDI': 'FLOORSMAX_MEDI',\n              'FLOORSMAX_MODE': 'FLOORSMAX_MODE',\n              'FLOORSMIN_MODE': 'FLOORSMIN_MODE',\n              'FLOORSMIN_AVG': 'FLOORSMIN_AVG',\n              'FLOORSMIN_MEDI': 'FLOORSMIN_MEDI',\n              'APARTMENTS_AVG': 'APARTMENTS_AVG',\n              'APARTMENTS_MEDI': 'APARTMENTS_MEDI',\n              'APARTMENTS_MODE': 'APARTMENTS_MODE',\n              'BASEMENTAREA_AVG': 'BASEMENTAREA_AVG',\n              'BASEMENTAREA_MEDI': 'BASEMENTAREA_MEDI',\n              'BASEMENTAREA_MODE': 'BASEMENTAREA_MODE',\n              'YEARS_BEGINEXPLUATATION_AVG': 'YEARS_BEGINEXPLUATATION_AVG',\n              'YEARS_BEGINEXPLUATATION_MODE': 'YEARS_BEGINEXPLUATATION_MODE',\n              'YEARS_BEGINEXPLUATATION_MEDI': 'YEARS_BEGINEXPLUATATION_MEDI',\n              'YEARS_BUILD_AVG': 'YEARS_BUILD_AVG',\n              'YEARS_BUILD_MODE': 'YEARS_BUILD_MODE',\n              'YEARS_BUILD_MEDI': 'YEARS_BUILD_MEDI',\n              'COMMONAREA_AVG': 'COMMONAREA_AVG',\n              'COMMONAREA_MEDI': 'COMMONAREA_MEDI',\n              'COMMONAREA_MODE': 'COMMONAREA_MODE',\n              'ELEVATORS_AVG': 'ELEVATORS_AVG',\n              'ELEVATORS_MODE': 'ELEVATORS_MODE',\n              'ELEVATORS_MEDI': 'ELEVATORS_MEDI',\n              'ENTRANCES_AVG': 'ENTRANCES_AVG',\n              'ENTRANCES_MODE': 'ENTRANCES_MODE',\n              'ENTRANCES_MEDI': 'ENTRANCES_MEDI',\n              'LANDAREA_AVG': 'LANDAREA_AVG',\n              'LANDAREA_MEDI': 'LANDAREA_MEDI',\n              'LANDAREA_MODE': 'LANDAREA_MODE',\n              'LIVINGAPARTMENTS_AVG': 'LIVINGAPARTMENTS_AVG',\n              'LIVINGAPARTMENTS_MODE': 'LIVINGAPARTMENTS_MODE',\n              'LIVINGAPARTMENTS_MEDI': 'LIVINGAPARTMENTS_MEDI',\n              'LIVINGAREA_AVG': 'LIVINGAREA_AVG',\n              'LIVINGAREA_MODE': 'LIVINGAREA_MODE',\n              'NONLIVINGAPARTMENTS_AVG': 'NONLIVINGAPARTMENTS_AVG',\n              'NONLIVINGAPARTMENTS_MODE': 'NONLIVINGAPARTMENTS_MODE',\n              'NONLIVINGAREA_AVG': 'NONLIVINGAREA_AVG',\n              'NONLIVINGAREA_MEDI': 'NONLIVINGAREA_MEDI',\n              'TOTALAREA_MODE': 'TOTALAREA_MODE',\n              'OBS_30_CNT_SOCIAL_CIRCLE': 'OBS_30_CNT_SOCIAL_CIRCLE',\n              'DEF_30_CNT_SOCIAL_CIRCLE': 'DEF_30_CNT_SOCIAL_CIRCLE',\n              'DEF_60_CNT_SOCIAL_CIRCLE': 'DEF_60_CNT_SOCIAL_CIRCLE',\n              'AMT_REQ_CREDIT_BUREAU_HOUR': 'AMT_REQ_CREDIT_BUREAU_HOUR',\n              'AMT_REQ_CREDIT_BUREAU_DAY': 'AMT_REQ_CREDIT_BUREAU_DAY',\n              'AMT_REQ_CREDIT_BUREAU_WEEK': 'AMT_REQ_CREDIT_BUREAU_WEEK',\n              'AMT_REQ_CREDIT_BUREAU_MON': 'AMT_REQ_CREDIT_BUREAU_MON',\n              'AMT_REQ_CREDIT_BUREAU_QRT': 'AMT_REQ_CREDIT_BUREAU_QRT',\n              'AMT_REQ_CREDIT_BUREAU_YEAR': 'AMT_REQ_CREDIT_BUREAU_YEAR',\n              'DAYS_ENDDATE_FACT': 'DAYS_ENDDATE_FACT'}\n\npath_img = \"resources\/images\/stats\/\"\n\n\ndef affiche_stats():\n    ''' Affiche les statistiques g\u00e9n\u00e9rales provenant de l'EDA\n    '''\n    html_facteurs_influence = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Distribution des variables g\u00e9n\u00e9rale\/pour les d\u00e9faillants\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir les distributions\"):\n        st.markdown(html_facteurs_influence, unsafe_allow_html=True)\n\n        with st.spinner('**Affiche les statistiques g\u00e9n\u00e9rales\/pour les d\u00e9faillants...**'):\n            with st.expander('Distribution des variables',\n                             expanded=True):\n                choix = st.selectbox(\"Choisir une variable : \", dico_stats.keys())\n                nom_img = dico_stats[choix]\n                img = Image.open(path_img + nom_img + \".png\")\n                st.image(img)\n\n\nst.sidebar.subheader('Stats g\u00e9n\u00e9rales')\naffiche_stats()\n\n# ====================================================================\n# FOOTER\n# ====================================================================\nhtml_line = \"\"\"\n<br>\n<br>\n<br>\n<br>\n<hr style= \"  display: block;\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n  margin-left: auto;\n  margin-right: auto;\n  border-style: inset;\n  border-width: 1.5px;\">\n<p style=\"color:Gray; text-align: right; font-size:12px;\">Auteur : loe.rabier@gmail.com - 17\/08\/2021<\/p>\n\"\"\"\nst.markdown(html_line, unsafe_allow_html=True)","fd8744ee":"# ====================================================================\n# Chargement des librairies\n# ====================================================================\nimport streamlit as st\nimport numpy as np\nfrom PIL import Image\nimport pickle\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\nimport seaborn as sns\nimport shap\n\n\n# ====================================================================\n#LET'S LOAD DATA - VARIABLES STATIQUES\n# ====================================================================\n\n\n# R\u00e9pertoire de sauvegarde du meilleur mod\u00e8le\nFILE_BEST_MODELE = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\modele\\best_model.pickle'\n# R\u00e9pertoire de sauvegarde des dataframes n\u00e9cessaires au dashboard\n# Test set brut original\nFILE_APPLICATION_TEST = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\application_test.pickle'\n# Test set pr\u00e9-proc\u00e9d\u00e9\nFILE_TEST_SET = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\test_set.pickle'\n# Dashboard\nFILE_DASHBOARD = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_dashboard.pickle'\n# Client\nFILE_CLIENT_INFO = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_info_client.pickle'\nFILE_CLIENT_PRET = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_pret_client.pickle'\n# 10 plus proches voisins du train set\nFILE_VOISINS_INFO = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_info_voisins.pickle'\nFILE_VOISIN_PRET = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_pret_voisins.pickle'\nFILE_VOISIN_AGG = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_voisin_train_agg.pickle'\nFILE_ALL_TRAIN_AGG = r'C:\\temp\\P7-DASHBOARD-temp\\resources\\data\\df_all_train_agg.pickle'\n\n\n# ====================================================================\n#LET'S LOAD DATA - VARIABLES GLOBALES\n# ====================================================================\ngroup_val1 = ['AMT_ANNUITY',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n              'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n              'INST_PAY_AMT_INSTALMENT_SUM']\n\ngroup_val2 = ['CAR_EMPLOYED_RATIO', 'CODE_GENDER',\n              'CREDIT_ANNUITY_RATIO', 'CREDIT_GOODS_RATIO',\n              'YEAR_BIRTH', 'YEAR_ID_PUBLISH',\n              'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3',\n              'EXT_SOURCE_MAX', 'EXT_SOURCE_SUM',\n              'FLAG_OWN_CAR',\n              'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n              'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n              'PREV_APP_INTEREST_SHARE_MAX']\n\ngroup_val3 = ['AMT_ANNUITY_MEAN',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN',\n              'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN',\n              'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN',\n              'INST_PAY_AMT_INSTALMENT_SUM_MEAN']\n\ngroup_val4 = ['CAR_EMPLOYED_RATIO_MEAN', 'CODE_GENDER_MEAN',\n              'CREDIT_ANNUITY_RATIO_MEAN', 'CREDIT_GOODS_RATIO_MEAN',\n              'YEAR_BIRTH_MEAN', 'YEAR_ID_PUBLISH_MEAN',\n              'EXT_SOURCE_1_MEAN', 'EXT_SOURCE_2_MEAN', 'EXT_SOURCE_3_MEAN',\n              'EXT_SOURCE_MAX_MEAN', 'EXT_SOURCE_SUM_MEAN',\n              'FLAG_OWN_CAR_MEAN',\n              'INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN',\n              'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN',\n              'PREV_APP_INTEREST_SHARE_MAX_MEAN']\n\n# ====================================================================\n# IMAGES\n# ====================================================================\n# Logo de l'entreprise\nlogo =  Image.open(r\"C:\\temp\\P7-DASHBOARD-temp\\resources\\images\\logo.png\")\n# L\u00e9gende des courbes\nlineplot_legende =  Image.open(r\"C:\\temp\\P7-DASHBOARD-temp\\resources\\images\\lineplot_legende.png\")\n\n\n# ====================================================================\n# HTML MARKDOWN\n# ====================================================================\nhtml_AMT_ANNUITY = \"<h4 style='text-align: center'>AMT_ANNUITY<\/h4> <br\/> <h5 style='text-align: center'>Annuit\u00e9 du pr\u00eat<\/h5> <hr\/>\"\nhtml_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN = \"<h4 style='text-align: center'>BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN<\/h4> <br\/> <h5 style='text-align: center'>Valeur minimale de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit<\/h5> <hr\/>\"\nhtml_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN = \"<h4 style='text-align: center'>BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN<\/h4> <br\/> <h5 style='text-align: center'>Valeur moyenne de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit<\/h5> <hr\/>\"\nhtml_INST_PAY_AMT_INSTALMENT_SUM = \"<h4 style='text-align: center'>INST_PAY_AMT_INSTALMENT_SUM<\/h4> <br\/> <h5 style='text-align: center'>Somme du montant de l'acompte prescrit des cr\u00e9dits pr\u00e9c\u00e9dents sur cet acompte<\/h5> <hr\/>\"\nhtml_BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN = \"<h4 style='text-align: center'>BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN<\/h4> <br\/> <h5 style='text-align: center'>Moyenne du ratio des pr\u00eats pr\u00e9c\u00e9dents sur d'autres institution de : la dette actuelle sur le cr\u00e9dit et la limite de cr\u00e9dit actuelle de la carte de cr\u00e9dit (valeur * 100)<\/h5> <hr\/>\"\nhtml_CAR_EMPLOYED_RATIO = \"<h4 style='text-align: center'>CAR_EMPLOYED_RATIO<\/h4> <br\/> <h5 style='text-align: center'>Ratio : \u00c2ge de la voiture du demandeur \/ Anciennet\u00e9 dans l'emploi \u00e0 la date de la demande (valeur * 1000)<\/h5> <hr\/>\"\nhtml_CODE_GENDER = \"<h4 style='text-align: center'>CODE_GENDER<\/h4> <br\/> <h5 style='text-align: center'>Sexe<\/h5> <hr\/>\"\nhtml_CREDIT_ANNUITY_RATIO = \"<h4 style='text-align: center'>CREDIT_ANNUITY_RATIO<\/h4> <br\/> <h5 style='text-align: center'>Ratio : montant du cr\u00e9dit du pr\u00eat \/ Annuit\u00e9 de pr\u00eat<\/h5> <hr\/>\"\nhtml_CREDIT_GOODS_RATIO = \"<h4 style='text-align: center'>CREDIT_GOODS_RATIO<\/h4> <br\/> <h5 style='text-align: center'>Ratio : Montant du cr\u00e9dit du pr\u00eat \/ prix des biens pour lesquels le pr\u00eat est accord\u00e9 \/ Cr\u00e9dit est sup\u00e9rieur au prix des biens ? (valeur * 100)<\/h5> <hr\/>\"\nhtml_YEAR_BIRTH = \"<h4 style='text-align: center'>YEAR_BIRTH<\/h4> <br\/> <h5 style='text-align: center'>\u00c2ge (ans)<\/h5> <hr\/>\"\nhtml_YEAR_ID_PUBLISH = \"<h4 style='text-align: center'>YEAR_ID_PUBLISH<\/h4> <br\/> <h5 style='text-align: center'>Combien de jours avant la demande le client a-t-il chang\u00e9 la pi\u00e8ce d'identit\u00e9 avec laquelle il a demand\u00e9 le pr\u00eat ? (ans)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_1 = \"<h4 style='text-align: center'>EXT_SOURCE_1<\/h4> <br\/> <h5 style='text-align: center'>Source externe normalis\u00e9e (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_2 = \"<h4 style='text-align: center'>EXT_SOURCE_2<\/h4> <br\/> <h5 style='text-align: center'>Source externe normalis\u00e9e (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_3 = \"<h4 style='text-align: center'>EXT_SOURCE_3<\/h4> <br\/> <h5 style='text-align: center'>Source externe normalis\u00e9e (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_MAX = \"<h4 style='text-align: center'>EXT_SOURCE_MAX<\/h4> <br\/> <h5 style='text-align: center'>Valeur maximale des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3) (valeur * 100)<\/h5> <hr\/>\"\nhtml_EXT_SOURCE_SUM = \"<h4 style='text-align: center'>EXT_SOURCE_SUM<\/h4> <br\/> <h5 style='text-align: center'>Somme des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3, valeur * 100)<\/h5> <hr\/>\"\nhtml_FLAG_OWN_CAR = \"<h4 style='text-align: center'>FLAG_OWN_CAR<\/h4> <br\/> <h5 style='text-align: center'>Indicateur si le client poss\u00e8de une voiture<\/h5> <hr\/>\"\nhtml_INST_PAY_DAYS_PAYMENT_RATIO_MAX = \"<h4 style='text-align: center'>INST_PAY_DAYS_PAYMENT_RATIO_MAX<\/h4> <br\/> <h5 style='text-align: center'>Valeur maximal dans l'historique des pr\u00e9c\u00e9dents cr\u00e9dits rembours\u00e9s dans Home Cr\u00e9dit du ratio : La date \u00e0 laquelle le versement du cr\u00e9dit pr\u00e9c\u00e9dent \u00e9tait cens\u00e9 \u00eatre pay\u00e9 (par rapport \u00e0 la date de demande du pr\u00eat actuel) \\ Quand les \u00e9ch\u00e9ances du cr\u00e9dit pr\u00e9c\u00e9dent ont-elles \u00e9t\u00e9 effectivement pay\u00e9es (par rapport \u00e0 la date de demande du pr\u00eat<\/h5> <hr\/>\"\nhtml_NAME_EDUCATION_TYPE_HIGHER_EDUCATION = \"<h4 style='text-align: center'>NAME_EDUCATION_TYPE_HIGHER_EDUCATION<\/h4> <br\/> <h5 style='text-align: center'>Niveau d'\u00e9ducation le plus \u00e9l\u00e9v\u00e9<\/h5> <hr\/>\"\nhtml_POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM = \"<h4 style='text-align: center'>POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM<\/h4> <br\/> <h5 style='text-align: center'>Somme des contrats actifs au cours du mois<\/h5> <hr\/>\"\nhtml_PREV_APP_INTEREST_SHARE_MAX = \"<h4 style='text-align: center'>PREV_APP_INTEREST_SHARE_MAX<\/h4> <br\/> <h5 style='text-align: center'>La valeur maximale de tous les pr\u00e9c\u00e9dents cr\u00e9dit dans d'autres institution : de la dur\u00e9e du cr\u00e9dit multipli\u00e9 par l'annuit\u00e9 du pr\u00eat moins le montant final du cr\u00e9dit<\/h5> <hr\/>\"\n\n# ====================================================================\n# HEADER - TITRE\n# ====================================================================\n\nhtml_header=\"\"\"\n    <head>\n        <title>Application Dashboard Cr\u00e9dit Score<\/title>\n        <meta charset=\"utf-8\">\n        <meta name=\"keywords\" content=\"Home Cr\u00e9dit Group, Dashboard, pr\u00eat, cr\u00e9dit score\">\n        <meta name=\"description\" content=\"Application de Cr\u00e9dit Score - dashboard\">\n        <meta name=\"author\" content=\"Loetitia Rabier\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <\/head>             \n    <h1 style=\"font-size:300%; color:Crimson; font-family:Arial\"> Pr\u00eat \u00e0 d\u00e9penser <br>\n        <h2 style=\"color:Gray; font-family:Georgia\"> DASHBOARD<\/h2>\n        <hr style= \"  display: block;\n          margin-top: 0;\n          margin-bottom: 0;\n          margin-left: auto;\n          margin-right: auto;\n          border-style: inset;\n          border-width: 1.5px;\"\/>\n     <\/h1>\n\"\"\"\nst.set_page_config(page_title=\"Pr\u00eat \u00e0 d\u00e9penser - Dashboard\", page_icon=\"\", layout=\"wide\")\nst.markdown('<style>body{background-color: #fbfff0}<\/style>',unsafe_allow_html=True)\nst.markdown(html_header, unsafe_allow_html=True)\n\n# Cacher le bouton en haut \u00e0 droite\nst.markdown(\"\"\" <style>\n#MainMenu {visibility: hidden;}\nfooter {visibility: hidden;}\n<\/style> \"\"\", unsafe_allow_html=True)\n\n# Suppression des marges par d\u00e9faut\npadding = 1\nst.markdown(f\"\"\" <style>\n    .reportview-container .main .block-container{{\n        padding-top: {padding}rem;\n        padding-right: {padding}rem;\n        padding-left: {padding}rem;\n        padding-bottom: {padding}rem;\n    }} <\/style> \"\"\", unsafe_allow_html=True)\n\n\n# ====================================================================\n# CHARGEMENT DES DONNEES\n# ====================================================================\n\n\n# Chargement du mod\u00e8le et des diff\u00e9rents dataframes\n# Optimisation en conservant les donn\u00e9es non modifi\u00e9es en cache m\u00e9moire\n@st.cache(persist=True)\ndef load():\n    with st.spinner('Import des donn\u00e9es'):\n        # Import du dataframe des informations des traits stricts du client\n        fic_client_info = FILE_CLIENT_INFO\n        with open(fic_client_info, 'rb') as df_info_client:\n            df_info_client = pickle.load(df_info_client)\n\n            # Import du dataframe des informations sur le pr\u00eat du client\n        fic_client_pret = FILE_CLIENT_PRET\n        with open(fic_client_pret, 'rb') as df_pret_client:\n            df_pret_client = pickle.load(df_pret_client)\n\n        # Import du dataframe des informations des traits stricts des voisins\n        fic_voisin_info = FILE_VOISINS_INFO\n        with open(fic_voisin_info, 'rb') as df_info_voisins:\n            df_info_voisins = pickle.load(df_info_voisins)\n\n        # Import du dataframe des informations sur le pr\u00eat des voisins\n        fic_voisin_pret = FILE_VOISIN_PRET\n        with open(fic_voisin_pret, 'rb') as df_pret_voisins:\n            df_pret_voisins = pickle.load(df_pret_voisins)\n\n        # Import du dataframe des informations sur le dashboard\n        fic_dashboard = FILE_DASHBOARD\n        with open(fic_dashboard, 'rb') as df_dashboard:\n            df_dashboard = pickle.load(df_dashboard)\n\n        # Import du dataframe des informations sur les voisins aggr\u00e9g\u00e9s\n        fic_voisin_train_agg = FILE_VOISIN_AGG\n        with open(fic_voisin_train_agg, 'rb') as df_voisin_train_agg:\n            df_voisin_train_agg = pickle.load(df_voisin_train_agg)\n\n        # Import du dataframe des informations sur les voisins aggr\u00e9g\u00e9s\n        fic_all_train_agg = FILE_ALL_TRAIN_AGG\n        with open(fic_all_train_agg, 'rb') as df_all_train_agg:\n            df_all_train_agg = pickle.load(df_all_train_agg)\n\n        # Import du dataframe des informations sur les voisins aggr\u00e9g\u00e9s\n        with open(FILE_TEST_SET, 'rb') as df_test_set:\n            test_set = pickle.load(df_test_set)\n\n        # Import du dataframe du test set brut original\n        with open(FILE_APPLICATION_TEST, 'rb') as df_application_test:\n            application_test = pickle.load(df_application_test)\n\n    # Import du meilleur mod\u00e8le lgbm entrain\u00e9\n    with st.spinner('Import du mod\u00e8le'):\n        # Import du meilleur mod\u00e8le lgbm entrain\u00e9\n        fic_best_model = FILE_BEST_MODELE\n        with open(fic_best_model, 'rb') as model_lgbm:\n            best_model = pickle.load(model_lgbm)\n\n    # SHAP values\n    with st.spinner('Lancement SHAP values'):\n        # Test set sans l'identifiant\n        X_bar = test_set.set_index('SK_ID_CURR')\n        # Entra\u00eenement de shap sur le train set\n        bar_explainer = shap.Explainer(best_model, X_bar)\n        bar_values = bar_explainer(X_bar, check_additivity=False)\n\n    return df_info_client, df_pret_client, df_info_voisins, df_pret_voisins, \\\n           df_dashboard, df_voisin_train_agg, df_all_train_agg, test_set, \\\n           application_test, best_model, bar_values\n\n\n# Chargement des dataframes et du mod\u00e8le\ndf_info_client, df_pret_client, df_info_voisins, df_pret_voisins, \\\ndf_dashboard, df_voisin_train_agg, df_all_train_agg, test_set, \\\napplication_test, best_model, bar_values = load()\n\n# ====================================================================\n# CHOIX DU CLIENT\n# ====================================================================\n\nhtml_select_client = \"\"\"\n    <div class=\"card\">\n      <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n        <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                   font-family:Georgia; text-align: center; padding: 0px 0;\">\n          Informations sur le client \/ demande de pr\u00eat\n        <\/h3>\n      <\/div>\n    <\/div>\n    \"\"\"\n\nst.markdown(html_select_client, unsafe_allow_html=True)\n\nwith st.container():\n    col1, col2 = st.columns([1, 3])\n    with col1:\n        st.write(\"\")\n        col1.header(\"**ID Client**\")\n        client_id = col1.selectbox('S\u00e9lectionnez un client :',\n                                   df_info_voisins['ID_CLIENT'].unique())\n    with col2:\n        # Infos principales client\n        # st.write(\"*Traits stricts*\")\n        client_info = df_info_client[df_info_client['SK_ID_CURR'] == client_id].iloc[:, :]\n        client_info.set_index('SK_ID_CURR', inplace=True)\n        st.table(client_info)\n        # Infos principales sur la demande de pr\u00eat\n        # st.write(\"*Demande de pr\u00eat*\")\n        client_pret = df_pret_client[df_pret_client['SK_ID_CURR'] == client_id].iloc[:, :]\n        client_pret.set_index('SK_ID_CURR', inplace=True)\n        st.table(client_pret)\n\n# ====================================================================\n# SCORE - PREDICTIONS\n# ====================================================================\n\nhtml_score = \"\"\"\n    <div class=\"card\">\n      <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n        <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                   font-family:Georgia; text-align: center; padding: 0px 0;\">\n          Cr\u00e9dit Score\n        <\/h3>\n      <\/div>\n    <\/div>\n    \"\"\"\n\nst.markdown(html_score, unsafe_allow_html=True)\n\n# Pr\u00e9paration des donn\u00e9es \u00e0 afficher dans la jauge ==============================================\n\n# ============== Score du client en pourcentage ==> en utilisant le mod\u00e8le ======================\n# S\u00e9lection des variables du clients\nX_test = test_set[test_set['SK_ID_CURR'] == client_id]\n# Score des pr\u00e9dictions de probabilt\u00e9s\ny_proba = best_model.predict_proba(X_test.drop('SK_ID_CURR', axis=1))[:, 1]\n# Score du client en pourcentage arrondi et nombre entier\nscore_client = int(np.rint(y_proba * 100))\n\n# ============== Score moyen des 10 plus proches voisins du test set en pourcentage =============\n\n# Score moyen des 10 plus proches voisins du test set en pourcentage\nscore_moy_voisins_test = int(np.rint(df_dashboard[\n                                         df_dashboard['SK_ID_CURR'] == client_id]['SCORE_10_VOISINS_MEAN_TEST'] * 100))\n\n# ============== Pourcentage de clients voisins d\u00e9faillants dans l'historique des clients =======\npourc_def_voisins_train = int(np.rint(df_dashboard[\n                                          df_dashboard['SK_ID_CURR'] == client_id]['%_NB_10_VOISINS_DEFAILLANT_TRAIN']))\n\n# ============== Pourcentage de clients voisins d\u00e9faillants pr\u00e9dits parmi les nouveaux clients ==\npourc_def_voisins_test = int(np.rint(df_dashboard[\n                                         df_dashboard['SK_ID_CURR'] == client_id]['%_NB_10_VOISINS_DEFAILLANT_TEST']))\n\n# Graphique de jauge du c\u00e9dit score ==========================================\nfig_jauge = go.Figure(go.Indicator(\n    mode='gauge+number+delta',\n    # Score du client en % df_dashboard['SCORE_CLIENT_%']\n    value=score_client,\n    domain={'x': [0, 1], 'y': [0, 1]},\n    title={'text': 'Cr\u00e9dit score du client', 'font': {'size': 24}},\n    # Score des 10 voisins test set\n    # df_dashboard['SCORE_10_VOISINS_MEAN_TEST']\n    delta={'reference': score_moy_voisins_test,\n           'increasing': {'color': 'Crimson'},\n           'decreasing': {'color': 'Green'}},\n    gauge={'axis': {'range': [None, 100],\n                    'tickwidth': 3,\n                    'tickcolor': 'darkblue'},\n           'bar': {'color': 'white', 'thickness': 0.25},\n           'bgcolor': 'white',\n           'borderwidth': 2,\n           'bordercolor': 'gray',\n           'steps': [{'range': [0, 25], 'color': 'Green'},\n                     {'range': [25, 49.49], 'color': 'LimeGreen'},\n                     {'range': [49.5, 50.5], 'color': 'red'},\n                     {'range': [50.51, 75], 'color': 'Orange'},\n                     {'range': [75, 100], 'color': 'Crimson'}],\n           'threshold': {'line': {'color': 'white', 'width': 10},\n                         'thickness': 0.8,\n                         # Score du client en %\n                         # df_dashboard['SCORE_CLIENT_%']\n                         'value': score_client}}))\n\nfig_jauge.update_layout(paper_bgcolor='white',\n                        height=400, width=500,\n                        font={'color': 'darkblue', 'family': 'Arial'},\n                        margin=dict(l=0, r=0, b=0, t=0, pad=0))\n\nwith st.container():\n    # JAUGE + r\u00e9capitulatif du score moyen des voisins\n    col1, col2 = st.columns([1.5, 1])\n    with col1:\n        st.plotly_chart(fig_jauge)\n    with col2:\n        st.write(\"\")\n        st.write(\"\")\n        st.write(\"\")\n        st.write(\"\")\n        st.write(\"\")\n        # Texte d'accompagnement de la jauge\n        if 0 <= score_client < 25:\n            score_text = 'Cr\u00e9dit score : EXCELLENT'\n            st.success(score_text)\n        elif 25 <= score_client < 50:\n            score_text = 'Cr\u00e9dit score : BON'\n            st.success(score_text)\n        elif 50 <= score_client < 75:\n            score_text = 'Cr\u00e9dit score : MOYEN'\n            st.warning(score_text)\n        else:\n            score_text = 'Cr\u00e9dit score : BAS'\n            st.error(score_text)\n        st.write(\"\")\n        st.markdown(f'Cr\u00e9dit score moyen des 10 clients similaires : **{score_moy_voisins_test}**')\n        st.markdown(f'**{pourc_def_voisins_train}**% de clients voisins r\u00e9ellement d\u00e9faillants dans l\\'historique')\n        st.markdown(f'**{pourc_def_voisins_test}**% de clients voisins d\u00e9faillants pr\u00e9dits pour les nouveaux clients')\n\n# ====================================================================\n# SIDEBAR\n# ====================================================================\n\n# Toutes Les informations non modifi\u00e9es du client courant\ndf_client_origin = application_test[application_test['SK_ID_CURR'] == client_id]\n\n# Toutes Les informations non modifi\u00e9es du client courant\ndf_client_test = test_set[test_set['SK_ID_CURR'] == client_id]\n\n# Toutes les informations du client courant\ndf_client_courant = df_dashboard[df_dashboard['SK_ID_CURR'] == client_id]\n\n# --------------------------------------------------------------------\n# LOGO\n# --------------------------------------------------------------------\n# Chargement du logo de l'entreprise\nst.sidebar.image(logo, width=240, caption=\" Dashboard - Aide \u00e0 la d\u00e9cision\",\n                 use_column_width='always')\n\n\n# --------------------------------------------------------------------\n# PLUS INFORMATIONS\n# --------------------------------------------------------------------\ndef all_infos_clients():\n    ''' Affiche toutes les informations sur le client courant\n    '''\n    html_all_infos_clients = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Plus infos\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir toutes infos clients ?\"):\n        st.markdown(html_all_infos_clients, unsafe_allow_html=True)\n\n        with st.spinner('**Affiche toutes les informations sur le client courant...**'):\n            with st.expander('Toutes les informations du client courant',\n                             expanded=True):\n                st.dataframe(df_client_origin)\n                st.dataframe(df_client_test)\n\n\nst.sidebar.subheader('Plus infos')\nall_infos_clients()\n\n\n# --------------------------------------------------------------------\n# CLIENTS SIMILAIRES\n# --------------------------------------------------------------------\ndef infos_clients_similaires():\n    ''' Affiche les informations sur les clients similaires :\n            - traits stricts.\n            - demande de pr\u00eat\n    '''\n    html_clients_similaires = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Clients similaires\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    titre = True\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir graphiques comparatifs ?\"):\n\n        if titre:\n            st.markdown(html_clients_similaires, unsafe_allow_html=True)\n            titre = False\n\n        with st.spinner('**Affiche les graphiques comparant le client courant et les clients similaires...**'):\n\n            with st.expander('Comparaison variables impactantes client courant\/moyennes des clients similaires',\n                             expanded=True):\n                with st.container():\n                    # Pr\u00e9paratifs dataframe\n                    df_client = df_voisin_train_agg[df_voisin_train_agg['ID_CLIENT'] == client_id].astype(int)\n                    # ====================================================================\n                    # Lineplot comparatif features importances client courant\/voisins\n                    # ====================================================================\n\n                    # ===================== Valeurs moyennes des features importances pour le client courant =====================\n                    df_feat_client = df_client_courant[['SK_ID_CURR', 'AMT_ANNUITY',\n                                                        'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                                        'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                                        'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                                        'CAR_EMPLOYED_RATIO', 'CODE_GENDER',\n                                                        'CREDIT_ANNUITY_RATIO', 'CREDIT_GOODS_RATIO',\n                                                        'DAYS_BIRTH', 'DAYS_ID_PUBLISH',\n                                                        'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3',\n                                                        'EXT_SOURCE_MAX', 'EXT_SOURCE_SUM',\n                                                        'FLAG_OWN_CAR', 'INST_PAY_AMT_INSTALMENT_SUM',\n                                                        'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                                        'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                                        'PREV_APP_INTEREST_SHARE_MAX']]\n                    df_feat_client['YEAR_BIRTH'] = \\\n                        np.trunc(np.abs(df_feat_client['DAYS_BIRTH'] \/ 365)).astype('int8')\n                    df_feat_client['YEAR_ID_PUBLISH'] = \\\n                        np.trunc(np.abs(df_feat_client['DAYS_ID_PUBLISH'] \/ 365)).astype('int8')\n                    df_feat_client.drop(columns=['DAYS_BIRTH', 'DAYS_ID_PUBLISH'],\n                                        inplace=True)\n                    df_feat_client_gp1 = df_feat_client[group_val1]\n                    df_feat_client_gp2 = df_feat_client[group_val2]\n                    # X\n                    x_gp1 = df_feat_client_gp1.columns.to_list()\n                    x_gp2 = df_feat_client_gp2.columns.to_list()\n                    # y\n                    y_feat_client_gp1 = df_feat_client_gp1.values[0].tolist()\n                    y_feat_client_gp2 = df_feat_client_gp2.values[0].tolist()\n\n                    # ===================== Valeurs moyennes des features importances pour les 10 voisins =======================\n                    df_moy_feat_voisins = df_client[['ID_CLIENT', 'AMT_ANNUITY_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN',\n                                                     'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN',\n                                                     'CAR_EMPLOYED_RATIO_MEAN', 'CODE_GENDER_MEAN',\n                                                     'CREDIT_ANNUITY_RATIO_MEAN', 'CREDIT_GOODS_RATIO_MEAN',\n                                                     'DAYS_BIRTH_MEAN', 'DAYS_ID_PUBLISH_MEAN',\n                                                     'EXT_SOURCE_1_MEAN', 'EXT_SOURCE_2_MEAN', 'EXT_SOURCE_3_MEAN',\n                                                     'EXT_SOURCE_MAX_MEAN', 'EXT_SOURCE_SUM_MEAN',\n                                                     'FLAG_OWN_CAR_MEAN', 'INST_PAY_AMT_INSTALMENT_SUM_MEAN',\n                                                     'INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN',\n                                                     'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN',\n                                                     'PREV_APP_INTEREST_SHARE_MAX_MEAN']]\n                    df_moy_feat_voisins['YEAR_BIRTH_MEAN'] = \\\n                        np.trunc(np.abs(df_moy_feat_voisins['DAYS_BIRTH_MEAN'] \/ 365)).astype('int8')\n                    df_moy_feat_voisins['YEAR_ID_PUBLISH_MEAN'] = \\\n                        np.trunc(np.abs(df_moy_feat_voisins['DAYS_ID_PUBLISH_MEAN'] \/ 365)).astype('int8')\n                    df_moy_feat_voisins.drop(columns=['DAYS_BIRTH_MEAN', 'DAYS_ID_PUBLISH_MEAN'],\n                                             inplace=True)\n                    df_moy_feat_voisins_gp3 = df_moy_feat_voisins[group_val3]\n                    df_moy_feat_voisins_gp4 = df_moy_feat_voisins[group_val4]\n                    # y\n                    y_moy_feat_voisins_gp3 = df_moy_feat_voisins_gp3.values[0].tolist()\n                    y_moy_feat_voisins_gp4 = df_moy_feat_voisins_gp4.values[0].tolist()\n\n                    # ===================== Valeurs moyennes de tous les clients non-d\u00e9faillants\/d\u00e9faillants du train sets =======================\n                    df_all_train = df_all_train_agg[['TARGET', 'AMT_ANNUITY_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN',\n                                                     'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN',\n                                                     'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN',\n                                                     'CAR_EMPLOYED_RATIO_MEAN', 'CODE_GENDER_MEAN',\n                                                     'CREDIT_ANNUITY_RATIO_MEAN', 'CREDIT_GOODS_RATIO_MEAN',\n                                                     'YEAR_BIRTH_MEAN', 'DAYS_ID_PUBLISH_MEAN',\n                                                     'EXT_SOURCE_1_MEAN', 'EXT_SOURCE_2_MEAN', 'EXT_SOURCE_3_MEAN',\n                                                     'EXT_SOURCE_MAX_MEAN', 'EXT_SOURCE_SUM_MEAN',\n                                                     'FLAG_OWN_CAR_MEAN', 'INST_PAY_AMT_INSTALMENT_SUM_MEAN',\n                                                     'INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN',\n                                                     'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN',\n                                                     'PREV_APP_INTEREST_SHARE_MAX_MEAN']]\n                    df_all_train['YEAR_ID_PUBLISH_MEAN'] = \\\n                        np.trunc(np.abs(df_all_train['DAYS_ID_PUBLISH_MEAN'] \/ 365)).astype('int8')\n                    df_all_train.drop(columns=['DAYS_ID_PUBLISH_MEAN'],\n                                      inplace=True)\n                    # Non-d\u00e9faillants\n                    df_all_train_nondef_gp3 = df_all_train[df_all_train['TARGET'] == 0][group_val3]\n                    df_all_train_nondef_gp4 = df_all_train[df_all_train['TARGET'] == 0][group_val4]\n                    # D\u00e9faillants\n                    df_all_train_def_gp3 = df_all_train[df_all_train['TARGET'] == 1][group_val3]\n                    df_all_train_def_gp4 = df_all_train[df_all_train['TARGET'] == 1][group_val4]\n                    # y\n                    # Non-d\u00e9faillants\n                    y_all_train_nondef_gp3 = df_all_train_nondef_gp3.values[0].tolist()\n                    y_all_train_nondef_gp4 = df_all_train_nondef_gp4.values[0].tolist()\n                    # D\u00e9faillants\n                    y_all_train_def_gp3 = df_all_train_def_gp3.values[0].tolist()\n                    y_all_train_def_gp4 = df_all_train_def_gp4.values[0].tolist()\n\n                    # L\u00e9gende des courbes\n                    st.image(lineplot_legende)\n\n                    col1, col2 = st.columns([1, 1.5])\n                    with col1:\n                        # Lineplot de comparaison des features importances client courant\/voisins\/all ================\n                        plt.figure(figsize=(6, 6))\n                        plt.plot(x_gp1, y_feat_client_gp1, color='Orange')\n                        plt.plot(x_gp1, y_moy_feat_voisins_gp3, color='SteelBlue')\n                        plt.plot(x_gp1, y_all_train_nondef_gp3, color='Green')\n                        plt.plot(x_gp1, y_all_train_def_gp3, color='Crimson')\n                        plt.xticks(rotation=90)\n                        st.set_option('deprecation.showPyplotGlobalUse', False)\n                        st.pyplot()\n                    with col2:\n                        # Lineplot de comparaison des features importances client courant\/voisins\/all ================\n                        plt.figure(figsize=(8, 5))\n                        plt.plot(x_gp2, y_feat_client_gp2, color='Orange')\n                        plt.plot(x_gp2, y_moy_feat_voisins_gp4, color='SteelBlue')\n                        plt.plot(x_gp2, y_all_train_nondef_gp4, color='Green')\n                        plt.plot(x_gp2, y_all_train_def_gp4, color='Crimson')\n                        plt.xticks(rotation=90)\n                        st.set_option('deprecation.showPyplotGlobalUse', False)\n                        st.pyplot()\n\n                    with st.container():\n\n                        vars_select = ['AMT_ANNUITY',\n                                       'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                       'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                       'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                       'CAR_EMPLOYED_RATIO',\n                                       'CODE_GENDER',\n                                       'CREDIT_ANNUITY_RATIO',\n                                       'CREDIT_GOODS_RATIO',\n                                       'EXT_SOURCE_1',\n                                       'EXT_SOURCE_2',\n                                       'EXT_SOURCE_3',\n                                       'EXT_SOURCE_MAX',\n                                       'EXT_SOURCE_SUM',\n                                       'FLAG_OWN_CAR',\n                                       'INST_PAY_AMT_INSTALMENT_SUM',\n                                       'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                       'NAME_EDUCATION_TYPE_HIGHER_EDUCATION',\n                                       'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                       'PREV_APP_INTEREST_SHARE_MAX',\n                                       'YEAR_BIRTH',\n                                       'YEAR_ID_PUBLISH']\n\n                        feat_imp_to_show = st.multiselect(\"Feature(s) importance(s) \u00e0 visualiser : \",\n                                                          vars_select)\n\n                        # ==============================================================\n                        # Variable AMT_ANNUITY\n                        # Annuit\u00e9 du pr\u00eat\n                        # ==============================================================\n\n                        if 'AMT_ANNUITY' in feat_imp_to_show:\n                            with st.spinner('**Chargement du graphique comparatif AMT_ANNUITY...**'):\n                                amt_min = int(df_client.AMT_ANNUITY_MIN.values)\n                                amt_q25 = int(df_client.AMT_ANNUITY_Q25.values)\n                                amt_mean = int(df_client.AMT_ANNUITY_MEAN.values)\n                                amt_q75 = int(df_client.AMT_ANNUITY_Q75.values)\n                                amt_max = int(df_client.AMT_ANNUITY_MAX.values)\n                                amt_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'AMT_ANNUITY'].values)\n                                amt_axis_min = min(amt_min, amt_client)\n                                amt_axis_max = max(amt_max, amt_client)\n\n                                fig_amt = go.Figure()\n\n                                fig_amt.add_trace(go.Indicator(\n                                    mode=\"number+gauge+delta\",\n                                    value=amt_client,\n                                    delta={'reference': amt_mean,\n                                           'increasing': {'color': 'Crimson'},\n                                           'decreasing': {'color': 'Green'}},\n                                    domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                    title={'text': 'Annuit\u00e9', 'font': {'size': 12},\n                                           'align': 'left'},\n                                    gauge={\n                                        'shape': 'bullet',\n                                        'axis': {'range': [amt_axis_min, amt_axis_max]},\n                                        'threshold': {\n                                            'line': {'color': 'black', 'width': 3},\n                                            'thickness': 0.75,\n                                            'value': amt_client},\n                                        'steps': [\n                                            {'range': [0, amt_min], 'color': 'white'},\n                                            {'range': [amt_min, amt_q25], 'color': '#de3a5b'},\n                                            {'range': [amt_q25, amt_mean], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [amt_mean, amt_q75], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [amt_q75, amt_max], 'color': '#de3a5b'}],\n                                        'bar': {'color': 'black'}}))\n\n                                fig_amt.update_layout(height=200,\n                                                      margin={'t': 0, 'b': 0, 'l': 0})\n\n                                st.markdown(html_AMT_ANNUITY, unsafe_allow_html=True)\n\n                                # ==================== Go Indicator bullets ==============================================\n                                st.plotly_chart(fig_amt)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='AMT_ANNUITY',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         amt_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['AMT_ANNUITY'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['AMT_ANNUITY'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('AMT_ANNUITY', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=amt_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN\n                        # Valeur minimum de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle\n                        # de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit\n                        # ==============================================================\n                        if 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN' in feat_imp_to_show:\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN...**'):\n                                bccddm_min = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MIN.values)\n                                bccddm_q25 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_Q25.values)\n                                bccddm_mean = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MEAN.values)\n                                bccddm_q75 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_Q75.values)\n                                bccddm_max = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN_MAX.values)\n                                bccddm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                        'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN'].values)\n                                bccddm_axis_min = min(bccddm_min, bccddm_client)\n                                bccddm_axis_max = max(bccddm_max, bccddm_client)\n\n                                fig_bccdm = go.Figure()\n\n                                fig_bccdm.add_trace(go.Indicator(\n                                    mode=\"number+gauge+delta\",\n                                    value=bccddm_client,\n                                    delta={'reference': bccddm_mean,\n                                           'increasing': {'color': 'Crimson'},\n                                           'decreasing': {'color': 'Green'}},\n                                    domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                    title={'text': 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                           'font': {'size': 9}, 'align': 'left'},\n                                    gauge={\n                                        'shape': 'bullet',\n                                        'axis': {'range': [bccddm_axis_min, bccddm_axis_max]},\n                                        'threshold': {\n                                            'line': {'color': 'black', 'width': 3},\n                                            'thickness': 0.75,\n                                            'value': bccddm_client},\n                                        'steps': [\n                                            {'range': [0, bccddm_min], 'color': 'white'},\n                                            {'range': [bccddm_min, bccddm_q25], 'color': '#de3a5b'},\n                                            {'range': [bccddm_q25, bccddm_mean], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddm_mean, bccddm_q75], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddm_q75, bccddm_max], 'color': '#de3a5b'}],\n                                        'bar': {'color': 'black'}}))\n\n                                fig_bccdm.update_layout(height=200,\n                                                        margin={'t': 0, 'b': 0, 'l': 0})\n\n                                st.markdown(html_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN, unsafe_allow_html=True)\n\n                                # Go Indicator bullets\n                                st.plotly_chart(fig_bccdm)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         bccddm_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('BUREAU_CURRENT_CREDIT_DEBT_DIFF_MIN', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=bccddm_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN\n                        # Valeur moyenne de la diff\u00e9rence entre la limite de cr\u00e9dit actuelle\n                        # de la carte de cr\u00e9dit et la dette actuelle sur le cr\u00e9dit\n                        # ==============================================================\n                        if 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN' in feat_imp_to_show:\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN...**'):\n                                bccddmean_min = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MIN.values)\n                                bccddmean_q25 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_Q25.values)\n                                bccddmean_mean = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MEAN.values)\n                                bccddmean_q75 = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_Q75.values)\n                                bccddmean_max = int(df_client.BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN_MAX.values)\n                                bccddmean_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                           'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN'].values)\n                                bccddmean_axis_min = min(bccddmean_min, bccddmean_client)\n                                bccddmean_axis_max = max(bccddmean_max, bccddmean_client)\n\n                                fig_bccddmean = go.Figure()\n\n                                fig_bccddmean.add_trace(go.Indicator(\n                                    mode=\"number+gauge+delta\",\n                                    value=bccddmean_client,\n                                    delta={'reference': bccddmean_mean,\n                                           'increasing': {'color': 'Crimson'},\n                                           'decreasing': {'color': 'Green'}},\n                                    domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                    title={'text': 'BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                           'font': {'size': 9}, 'align': 'left'},\n                                    gauge={\n                                        'shape': 'bullet',\n                                        'axis': {'range': [bccddmean_axis_min, bccddmean_axis_max]},\n                                        'threshold': {\n                                            'line': {'color': 'black', 'width': 3},\n                                            'thickness': 0.75,\n                                            'value': bccddmean_client},\n                                        'steps': [\n                                            {'range': [0, bccddmean_min], 'color': 'white'},\n                                            {'range': [bccddmean_min, bccddmean_q25], 'color': '#de3a5b'},\n                                            {'range': [bccddmean_q25, bccddmean_mean], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddmean_mean, bccddmean_q75], 'color': '#dec7cb',\n                                             'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                            {'range': [bccddmean_q75, bccddmean_max], 'color': '#de3a5b'}],\n                                        'bar': {'color': 'black'}}))\n\n                                fig_bccddmean.update_layout(height=200,\n                                                            margin={'t': 0, 'b': 0, 'l': 0})\n\n                                st.markdown(html_BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN, unsafe_allow_html=True)\n\n                                # Go Indicator bullets\n                                st.plotly_chart(fig_bccddmean)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         bccddmean_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('BUREAU_CURRENT_CREDIT_DEBT_DIFF_MEAN', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=bccddmean_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.set_option('deprecation.showPyplotGlobalUse', False)\n                                st.pyplot()\n\n                        # ==============================================================\n                        # Variable BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN\n                        # Moyenne de du ratio des pr\u00eats pr\u00e9c\u00e9dents sur d'autres institution de :\n                        # la dette actuelle sur le cr\u00e9dit et la limite de cr\u00e9dit actuelle de la\n                        # carte de cr\u00e9dit\n                        # ==============================================================\n                        if 'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN' in feat_imp_to_show:\n\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN...**'):\n\n                                bcdtcrm_min = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MIN.values * 100)\n                                bcdtcrm_q25 = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_Q25.values * 100)\n                                bcdtcrm_mean = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MEAN.values * 100)\n                                bcdtcrm_q75 = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_Q75.values * 100)\n                                bcdtcrm_max = int(df_client.BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN_MAX.values * 100)\n                                bcdtcrm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                         'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN'].values * 100)\n                                bcdtcrm_axis_min = min(bcdtcrm_min, bcdtcrm_client)\n                                bcdtcrm_axis_max = max(bcdtcrm_max, bcdtcrm_client)\n\n                                cond = bcdtcrm_client == bcdtcrm_min and bcdtcrm_min == bcdtcrm_q25 \\\n                                       and bcdtcrm_q25 == bcdtcrm_mean and bcdtcrm_mean == bcdtcrm_q75 \\\n                                       and bcdtcrm_q75 == bcdtcrm_max\n\n                                if not cond:\n\n                                    fig_bcdtcrm = go.Figure()\n\n                                    fig_bcdtcrm.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=bcdtcrm_client,\n                                        delta={'reference': bcdtcrm_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [bcdtcrm_axis_min, bcdtcrm_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': bcdtcrm_client},\n                                            'steps': [\n                                                {'range': [0, bcdtcrm_min], 'color': 'white'},\n                                                {'range': [bcdtcrm_min, bcdtcrm_q25], 'color': '#de3a5b'},\n                                                {'range': [bcdtcrm_q25, bcdtcrm_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [bcdtcrm_mean, bcdtcrm_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [bcdtcrm_q75, bcdtcrm_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_bcdtcrm.update_layout(height=200,\n                                                              margin={'t': 0, 'b': 0, 'l': 0})\n                                    st.markdown(html_BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_bcdtcrm)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             bcdtcrm_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=bcdtcrm_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_BUREAU_CURRENT_DEBT_TO_CREDIT_RATIO_MEAN, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                        # ==============================================================\n                        # Variable CAR_EMPLOYED_RATIO\n                        # Ratio : \u00c2ge de la voiture du demandeur \/ Anciennet\u00e9 dans l'emploi \u00e0 la\n                        # date de la demande\n                        # ==============================================================\n                        if 'CAR_EMPLOYED_RATIO' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif CAR_EMPLOYED_RATIO...**'):\n\n                                cer_max = int(df_client.CAR_EMPLOYED_RATIO_MIN.values * 1000)\n                                cer_q75 = int(df_client.CAR_EMPLOYED_RATIO_Q25.values * 1000)\n                                cer_mean = int(df_client.CAR_EMPLOYED_RATIO_MEAN.values * 1000)\n                                cer_q25 = int(df_client.CAR_EMPLOYED_RATIO_Q75.values * 1000)\n                                cer_min = int(df_client.CAR_EMPLOYED_RATIO_MAX.values * 1000)\n                                cer_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'CAR_EMPLOYED_RATIO'].values * 1000)\n                                cer_axis_min = min(cer_min, cer_client)\n                                cer_axis_max = max(cer_max, cer_client)\n\n                                cond = cer_client == cer_min and cer_min == cer_q25 and \\\n                                       cer_q25 == cer_mean and cer_mean == cer_q75 and \\\n                                       cer_q75 == cer_max\n\n                                if not cond:\n                                    fig_cer = go.Figure()\n\n                                    fig_cer.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=cer_client,\n                                        delta={'reference': cer_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'CAR_EMPLOYED_RATIO',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [cer_axis_min, cer_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': cer_client},\n                                            'steps': [\n                                                {'range': [0, cer_min], 'color': 'white'},\n                                                {'range': [cer_min, cer_q25], 'color': '#de3a5b'},\n                                                {'range': [cer_q25, cer_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cer_mean, cer_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cer_q75, cer_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_cer.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_CAR_EMPLOYED_RATIO, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_cer)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='CAR_EMPLOYED_RATIO',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             cer_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['CAR_EMPLOYED_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['CAR_EMPLOYED_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('CAR_EMPLOYED_RATIO', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=cer_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_CAR_EMPLOYED_RATIO, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable CREDIT_ANNUITY_RATIO\n                        # Ratio : montant du cr\u00e9dit du pr\u00eat \/ Annuit\u00e9 de pr\u00eat\n                        # ==============================================================\n                        if 'CREDIT_ANNUITY_RATIO' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif CREDIT_ANNUITY_RATIO...**'):\n\n                                car_min = int(df_client.CREDIT_ANNUITY_RATIO_MIN.values)\n                                car_q25 = int(df_client.CREDIT_ANNUITY_RATIO_Q25.values)\n                                car_mean = int(df_client.CREDIT_ANNUITY_RATIO_MEAN.values)\n                                car_q75 = int(df_client.CREDIT_ANNUITY_RATIO_Q75.values)\n                                car_max = int(df_client.CREDIT_ANNUITY_RATIO_MAX.values)\n                                car_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'CREDIT_ANNUITY_RATIO'].values)\n                                car_axis_min = min(car_min, car_client)\n                                car_axis_max = max(car_max, car_client)\n\n                                cond = car_client == car_min and car_min == car_q25 and \\\n                                       car_q25 == car_mean and car_mean == car_q75 \\\n                                       and car_q75 == car_max\n\n                                if not cond:\n                                    fig_car = go.Figure()\n\n                                    fig_car.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=car_client,\n                                        delta={'reference': car_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'CREDIT_ANNUITY_RATIO',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [car_axis_min, car_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': car_client},\n                                            'steps': [\n                                                {'range': [0, car_min], 'color': 'white'},\n                                                {'range': [car_min, car_q25], 'color': '#de3a5b'},\n                                                {'range': [car_q25, car_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [car_mean, car_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [car_q75, car_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_car.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_CREDIT_ANNUITY_RATIO, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_car)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='CREDIT_ANNUITY_RATIO',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             car_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_ANNUITY_RATIO'][df_dashboard[\n                                                                                          'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_ANNUITY_RATIO'][df_dashboard[\n                                                                                          'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('CREDIT_ANNUITY_RATIO', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=car_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_CREDIT_ANNUITY_RATIO, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable CREDIT_GOODS_RATIO\n                        # Ratio : Montant du cr\u00e9dit du pr\u00eat \/ prix des biens pour lesquels le pr\u00eat\n                        # est accord\u00e9 \/ Cr\u00e9dit est sup\u00e9rieur au prix des biens ?\n                        # ==============================================================\n                        if 'CREDIT_GOODS_RATIO' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif CREDIT_GOODS_RATIO...**'):\n\n                                cgr_min = int(df_client.CREDIT_GOODS_RATIO_MIN.values * 100)\n                                cgr_q25 = int(df_client.CREDIT_GOODS_RATIO_Q25.values * 100)\n                                cgr_mean = int(df_client.CREDIT_GOODS_RATIO_MEAN.values * 100)\n                                cgr_q75 = int(df_client.CREDIT_GOODS_RATIO_Q75.values * 100)\n                                cgr_max = int(df_client.CREDIT_GOODS_RATIO_MAX.values * 100)\n                                cgr_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'CREDIT_GOODS_RATIO'].values * 100)\n                                cgr_axis_min = min(cgr_min, cgr_client)\n                                cgr_axis_max = max(cgr_max, cgr_client)\n\n                                cond = cgr_client == cgr_min and cgr_min == cgr_q25 \\\n                                       and cgr_q25 == cgr_mean and cgr_mean == cgr_q75 \\\n                                       and cgr_q75 == cgr_max\n\n                                if not cond:\n                                    fig_cgr = go.Figure()\n\n                                    fig_cgr.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=cgr_client,\n                                        delta={'reference': cgr_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'CREDIT_GOODS_RATIO',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [cgr_axis_min, cgr_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': cgr_client},\n                                            'steps': [\n                                                {'range': [0, cgr_min], 'color': 'white'},\n                                                {'range': [cgr_min, cgr_q25], 'color': '#de3a5b'},\n                                                {'range': [cgr_q25, cgr_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cgr_mean, cgr_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [cgr_q75, cgr_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_cgr.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_CREDIT_GOODS_RATIO, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_cgr)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='CREDIT_GOODS_RATIO',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             cgr_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_GOODS_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['CREDIT_GOODS_RATIO'][df_dashboard[\n                                                                                        'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('CREDIT_GOODS_RATIO', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=cgr_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_CREDIT_GOODS_RATIO, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable YEAR_BIRTH\n                        # \u00c2ge (ans)\n                        # ==============================================================\n                        if 'YEAR_BIRTH' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif YEAR_BIRTH...**'):\n\n                                age_max = int(-df_client.DAYS_BIRTH_MIN.values \/ 365)\n                                age_q75 = int(-df_client.DAYS_BIRTH_Q25.values \/ 365)\n                                age_mean = int(-df_client.DAYS_BIRTH_MEAN.values \/ 365)\n                                age_q25 = int(-df_client.DAYS_BIRTH_Q75.values \/ 365)\n                                age_min = int(-df_client.DAYS_BIRTH_MAX.values \/ 365)\n                                age_client = int(-df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                    'DAYS_BIRTH'].values \/ 365)\n                                age_axis_min = min(age_min, age_client)\n                                age_axis_max = max(age_max, age_client)\n\n                                cond = age_client == age_min and age_min == age_q25 and \\\n                                       age_q25 == age_mean and age_mean == age_q75 and age_q75 == age_max\n\n                                if not cond:\n                                    fig_age = go.Figure()\n\n                                    fig_age.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=age_client,\n                                        delta={'reference': age_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': '\u00c2ge',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [age_axis_min, age_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': age_client},\n                                            'steps': [\n                                                {'range': [0, age_min], 'color': 'white'},\n                                                {'range': [age_min, age_q25], 'color': '#de3a5b'},\n                                                {'range': [age_q25, age_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [age_mean, age_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [age_q75, age_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_age.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_YEAR_BIRTH, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_age)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='YEAR_BIRTH',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             age_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['YEAR_BIRTH'][df_dashboard[\n                                                                                'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['YEAR_BIRTH'][df_dashboard[\n                                                                                'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('YEAR_BIRTH', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=age_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_YEAR_BIRTH, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable YEAR_ID_PUBLISH\n                        # Combien de jours avant la demande le client a-t-il chang\u00e9 la pi\u00e8ce\n                        # d'identit\u00e9 avec laquelle il a demand\u00e9 le pr\u00eat ? (ans)\n                        # ==============================================================\n                        if 'YEAR_ID_PUBLISH' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif YEAR_ID_PUBLISH...**'):\n\n                                dip_max = int(-df_client.DAYS_ID_PUBLISH_MIN.values \/ 365)\n                                dip_q75 = int(-df_client.DAYS_ID_PUBLISH_Q25.values \/ 365)\n                                dip_mean = int(-df_client.DAYS_ID_PUBLISH_MEAN.values \/ 365)\n                                dip_q25 = int(-df_client.DAYS_ID_PUBLISH_Q75.values \/ 365)\n                                dip_min = int(-df_client.DAYS_ID_PUBLISH_MAX.values \/ 365)\n                                dip_client = int(-df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                    'DAYS_ID_PUBLISH'].values \/ 365)\n                                dip_axis_min = min(dip_min, dip_client)\n                                dip_axis_max = max(dip_max, dip_client)\n\n                                cond = dip_client == dip_min and dip_min == dip_q25 and \\\n                                       dip_q25 == dip_mean and dip_mean == dip_q75 and dip_q75 == dip_max\n\n                                if not cond:\n                                    fig_dip = go.Figure()\n\n                                    fig_dip.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=dip_client,\n                                        delta={'reference': dip_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'DAYS_ID_PUBLISH',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [dip_axis_min, dip_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': dip_client},\n                                            'steps': [\n                                                {'range': [0, dip_min], 'color': 'white'},\n                                                {'range': [dip_min, dip_q25], 'color': '#de3a5b'},\n                                                {'range': [dip_q25, dip_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [dip_mean, dip_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [dip_q75, dip_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_dip.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_YEAR_ID_PUBLISH, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_dip)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='DAYS_ID_PUBLISH',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             dip_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['DAYS_ID_PUBLISH'][df_dashboard[\n                                                                                     'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['DAYS_ID_PUBLISH'][df_dashboard[\n                                                                                     'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('DAYS_ID_PUBLISH', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=dip_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_YEAR_ID_PUBLISH, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_1\n                        # Source externe normalis\u00e9e\n                        # ==============================================================\n                        if 'EXT_SOURCE_1' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_1...**'):\n\n                                es1_min = int(df_client.EXT_SOURCE_1_MIN.values * 100)\n                                es1_q25 = int(df_client.EXT_SOURCE_1_Q25.values * 100)\n                                es1_mean = int(df_client.EXT_SOURCE_1_MEAN.values * 100)\n                                es1_q75 = int(df_client.EXT_SOURCE_1_Q75.values * 100)\n                                es1_max = int(df_client.EXT_SOURCE_1_MAX.values * 100)\n                                es1_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_1'].values * 100)\n                                es1_axis_min = min(es1_min, es1_client)\n                                es1_axis_max = max(es1_max, es1_client)\n\n                                cond = es1_client == es1_min and es1_min == es1_q25 and \\\n                                       es1_q25 == es1_mean and es1_mean == es1_q75 and \\\n                                       es1_q75 == es1_max\n\n                                if not cond:\n                                    fig_es1 = go.Figure()\n\n                                    fig_es1.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=es1_client,\n                                        delta={'reference': es1_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_1',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [es1_axis_min, es1_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': es1_client},\n                                            'steps': [\n                                                {'range': [0, es1_min], 'color': 'white'},\n                                                {'range': [es1_min, es1_q25], 'color': '#de3a5b'},\n                                                {'range': [es1_q25, es1_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es1_mean, es1_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es1_q75, es1_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_es1.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_1, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_es1)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_1',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             es1_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_1'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_1'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_1', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=es1_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_1, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_2\n                        # Source externe normalis\u00e9e\n                        # ==============================================================\n                        if 'EXT_SOURCE_2' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_2...**'):\n\n                                es2_min = int(df_client.EXT_SOURCE_2_MIN.values * 100)\n                                es2_q25 = int(df_client.EXT_SOURCE_2_Q25.values * 100)\n                                es2_mean = int(df_client.EXT_SOURCE_2_MEAN.values * 100)\n                                es2_q75 = int(df_client.EXT_SOURCE_2_Q75.values * 100)\n                                es2_max = int(df_client.EXT_SOURCE_2_MAX.values * 100)\n                                es2_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_2'].values * 100)\n                                es2_axis_min = min(es2_min, es2_client)\n                                es2_axis_max = max(es2_max, es2_client)\n\n                                cond = es2_client == es2_min and es2_min == es2_q25 and \\\n                                       es2_q25 == es2_mean and es2_mean == es2_q75 and \\\n                                       es2_q75 == es2_max\n\n                                if not cond:\n                                    fig_es2 = go.Figure()\n\n                                    fig_es2.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=es2_client,\n                                        delta={'reference': es2_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_2',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [es2_axis_min, es2_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': es2_client},\n                                            'steps': [\n                                                {'range': [0, es2_min], 'color': 'white'},\n                                                {'range': [es2_min, es2_q25], 'color': '#de3a5b'},\n                                                {'range': [es2_q25, es2_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es2_mean, es2_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es2_q75, es2_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_es2.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_2, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_es2)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_2',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             es2_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_2'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_2'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_2', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=es2_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_2, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_3\n                        # Source externe normalis\u00e9e\n                        # ==============================================================\n                        if 'EXT_SOURCE_3' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_3...**'):\n\n                                es3_min = int(df_client.EXT_SOURCE_3_MIN.values * 100)\n                                es3_q25 = int(df_client.EXT_SOURCE_3_Q25.values * 100)\n                                es3_mean = int(df_client.EXT_SOURCE_3_MEAN.values * 100)\n                                es3_q75 = int(df_client.EXT_SOURCE_3_Q75.values * 100)\n                                es3_max = int(df_client.EXT_SOURCE_3_MAX.values * 100)\n                                es3_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_3'].values * 100)\n                                es3_axis_min = min(es3_min, es3_client)\n                                es3_axis_max = max(es3_max, es3_client)\n\n                                cond = es3_client == es3_min and es3_min == es3_q25 and \\\n                                       es3_q25 == es3_mean and es3_mean == es3_q75 and \\\n                                       es3_q75 == es3_max\n\n                                if not cond:\n                                    fig_es3 = go.Figure()\n\n                                    fig_es3.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=es3_client,\n                                        delta={'reference': es3_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_3',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [es3_axis_min, es3_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': es3_client},\n                                            'steps': [\n                                                {'range': [0, es3_min], 'color': 'white'},\n                                                {'range': [es3_min, es3_q25], 'color': '#de3a5b'},\n                                                {'range': [es3_q25, es3_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es3_mean, es3_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [es3_q75, es3_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_es3.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_3, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_es3)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_3',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             es3_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_3'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_3'][df_dashboard[\n                                                                                  'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_3', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=es3_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_3, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_MAX\n                        # Valeur maximale des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3)\n                        # ==============================================================\n                        if 'EXT_SOURCE_MAX' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_MAX...**'):\n\n                                esm_min = int(df_client.EXT_SOURCE_MAX_MIN.values * 100)\n                                esm_q25 = int(df_client.EXT_SOURCE_MAX_Q25.values * 100)\n                                esm_mean = int(df_client.EXT_SOURCE_MAX_MEAN.values * 100)\n                                esm_q75 = int(df_client.EXT_SOURCE_MAX_Q75.values * 100)\n                                esm_max = int(df_client.EXT_SOURCE_MAX_MAX.values * 100)\n                                esm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_MAX'].values * 100)\n                                esm_axis_min = min(esm_min, esm_client)\n                                esm_axis_max = max(esm_max, esm_client)\n\n                                cond = esm_client == esm_min and esm_min == esm_q25 and \\\n                                       esm_q25 == esm_mean and esm_mean == esm_q75 and \\\n                                       esm_q75 == esm_max\n\n                                if not cond:\n                                    fig_esm = go.Figure()\n\n                                    fig_esm.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=esm_client,\n                                        delta={'reference': esm_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_MAX',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [esm_axis_min, esm_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': esm_client},\n                                            'steps': [\n                                                {'range': [0, esm_min], 'color': 'white'},\n                                                {'range': [esm_min, esm_q25], 'color': '#de3a5b'},\n                                                {'range': [esm_q25, esm_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [esm_mean, esm_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [esm_q75, esm_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_esm.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_MAX, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_esm)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_MAX',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             esm_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_MAX'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_MAX'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_MAX', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=esm_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_MAX, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable EXT_SOURCE_SUM\n                        # Somme des 3 sources externes normalis\u00e9es (EXT_SOURCE_1, EXT_SOURCE_2 et EXT_SOURCE_3)\n                        # ==============================================================\n                        if 'EXT_SOURCE_SUM' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif EXT_SOURCE_SUM...**'):\n\n                                ess_min = int(df_client.EXT_SOURCE_SUM_MIN.values * 100)\n                                ess_q25 = int(df_client.EXT_SOURCE_SUM_Q25.values * 100)\n                                ess_mean = int(df_client.EXT_SOURCE_SUM_MEAN.values * 100)\n                                ess_q75 = int(df_client.EXT_SOURCE_SUM_Q75.values * 100)\n                                ess_max = int(df_client.EXT_SOURCE_SUM_MAX.values * 100)\n                                ess_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'EXT_SOURCE_SUM'].values * 100)\n                                ess_axis_min = min(ess_min, ess_client)\n                                ess_axis_max = max(ess_max, ess_client)\n\n                                cond = ess_client == ess_min and ess_min == ess_q25 and \\\n                                       ess_q25 == ess_mean and ess_mean == ess_q75 and \\\n                                       ess_q75 == ess_max\n\n                                if not cond:\n                                    fig_ess = go.Figure()\n\n                                    fig_ess.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=ess_client,\n                                        delta={'reference': ess_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'EXT_SOURCE_SUM',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [ess_axis_min, ess_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': ess_client},\n                                            'steps': [\n                                                {'range': [0, ess_min], 'color': 'white'},\n                                                {'range': [ess_min, ess_q25], 'color': '#de3a5b'},\n                                                {'range': [ess_q25, ess_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ess_mean, ess_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ess_q75, ess_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_ess.update_layout(height=200,\n                                                          margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_EXT_SOURCE_SUM, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_ess)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='EXT_SOURCE_SUM',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             ess_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_SUM'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['EXT_SOURCE_SUM'][df_dashboard[\n                                                                                    'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('EXT_SOURCE_SUM', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=ess_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_EXT_SOURCE_SUM, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable INST_PAY_AMT_INSTALMENT_SUM\n                        # Somme du montant de l'acompte prescrit des cr\u00e9dits pr\u00e9c\u00e9dents sur cet\n                        # acompte\n                        # ==============================================================\n                        if 'INST_PAY_AMT_INSTALMENT_SUM' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif INST_PAY_AMT_INSTALMENT_SUM...**'):\n\n                                ipais_min = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_MIN.values)\n                                ipais_q25 = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_Q25.values)\n                                ipais_mean = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_MEAN.values)\n                                ipais_q75 = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_Q75.values)\n                                ipais_max = int(df_client.INST_PAY_AMT_INSTALMENT_SUM_MAX.values)\n                                ipais_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                       'INST_PAY_AMT_INSTALMENT_SUM'].values)\n                                ipais_axis_min = min(ipais_min, ipais_client)\n                                ipais_axis_max = max(ipais_max, ipais_client)\n\n                                cond = ipais_client == ipais_min and ipais_min == ipais_q25 and \\\n                                       ipais_q25 == ipais_mean and ipais_mean == ipais_q75 and \\\n                                       ipais_q75 == ipais_max\n\n                                if not cond:\n                                    fig_ipais = go.Figure()\n\n                                    fig_ipais.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=ipais_client,\n                                        delta={'reference': ipais_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'INST_PAY_AMT_INSTALMENT_SUM',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [ipais_axis_min, ipais_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': ipais_client},\n                                            'steps': [\n                                                {'range': [0, ipais_min], 'color': 'white'},\n                                                {'range': [ipais_min, ipais_q25], 'color': '#de3a5b'},\n                                                {'range': [ipais_q25, ipais_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipais_mean, ipais_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipais_q75, ipais_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_ipais.update_layout(height=200,\n                                                            margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_INST_PAY_AMT_INSTALMENT_SUM, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_ipais)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='INST_PAY_AMT_INSTALMENT_SUM',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             ipais_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_AMT_INSTALMENT_SUM'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_AMT_INSTALMENT_SUM'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('INST_PAY_AMT_INSTALMENT_SUM', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=ipais_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_INST_PAY_AMT_INSTALMENT_SUM, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable INST_PAY_DAYS_PAYMENT_RATIO_MAX\n                        # Valeur maximal dans l'historique des pr\u00e9c\u00e9dents cr\u00e9dits rembours\u00e9s\n                        # dans Home Cr\u00e9dit du ratio : La date \u00e0 laquelle le versement du cr\u00e9dit\n                        # pr\u00e9c\u00e9dent \u00e9tait cens\u00e9 \u00eatre pay\u00e9 (par rapport \u00e0 la date de demande du\n                        # pr\u00eat actuel) \\ Quand les \u00e9ch\u00e9ances du cr\u00e9dit pr\u00e9c\u00e9dent ont-elles \u00e9t\u00e9\n                        # effectivement pay\u00e9es (par rapport \u00e0 la date de demande du pr\u00eat\n                        # ==============================================================\n                        if 'INST_PAY_DAYS_PAYMENT_RATIO_MAX' in feat_imp_to_show:\n\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif INST_PAY_DAYS_PAYMENT_RATIO_MAX...**'):\n\n                                ipdprm_min = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_MIN.values)\n                                ipdprm_q25 = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_Q25.values)\n                                ipdprm_mean = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_MEAN.values)\n                                ipdprm_q75 = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_Q75.values)\n                                ipdprm_max = int(df_client.INST_PAY_DAYS_PAYMENT_RATIO_MAX_MAX.values)\n                                ipdprm_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                        'INST_PAY_DAYS_PAYMENT_RATIO_MAX'].values)\n                                ipdprm_axis_min = min(ipdprm_min, ipdprm_client)\n                                ipdprm_axis_max = max(ipdprm_max, ipdprm_client)\n\n                                cond = ipdprm_client == ipdprm_min and ipdprm_min == ipdprm_q25 and \\\n                                       ipdprm_q25 == ipdprm_mean and ipdprm_mean == ipdprm_q75 and \\\n                                       ipdprm_q75 == ipdprm_max\n\n                                if not cond:\n                                    fig_ipdprm = go.Figure()\n\n                                    fig_ipdprm.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=ipdprm_client,\n                                        delta={'reference': ipdprm_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [ipdprm_axis_min, ipdprm_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': ipdprm_client},\n                                            'steps': [\n                                                {'range': [0, ipdprm_min], 'color': 'white'},\n                                                {'range': [ipdprm_min, ipdprm_q25], 'color': '#de3a5b'},\n                                                {'range': [ipdprm_q25, ipdprm_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipdprm_mean, ipdprm_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [ipdprm_q75, ipdprm_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_ipdprm.update_layout(height=200,\n                                                             margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_INST_PAY_DAYS_PAYMENT_RATIO_MAX, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_ipdprm)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='INST_PAY_DAYS_PAYMENT_RATIO_MAX',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             ipdprm_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_DAYS_PAYMENT_RATIO_MAX'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['INST_PAY_DAYS_PAYMENT_RATIO_MAX'][df_dashboard[\n                                                                                                     'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('INST_PAY_DAYS_PAYMENT_RATIO_MAX', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=ipdprm_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_INST_PAY_DAYS_PAYMENT_RATIO_MAX, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM\n                        # Somme des contrats actifs au cours du mois\n                        # ==============================================================\n                        if 'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM' in feat_imp_to_show:\n\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM...**'):\n\n                                pcncsas_min = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MIN.values)\n                                pcncsas_q25 = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_Q25.values)\n                                pcncsas_mean = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MEAN.values)\n                                pcncsas_q75 = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_Q75.values)\n                                pcncsas_max = int(df_client.POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM_MAX.values)\n                                pcncsas_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                         'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM'].values)\n                                pcncsas_axis_min = min(pcncsas_min, pcncsas_client)\n                                pcncsas_axis_max = max(pcncsas_max, pcncsas_client)\n\n                                cond = pcncsas_client == pcncsas_min and pcncsas_min == pcncsas_q25 and \\\n                                       pcncsas_q25 == pcncsas_mean and pcncsas_mean == pcncsas_q75 and \\\n                                       pcncsas_q75 == pcncsas_max\n\n                                if not cond:\n                                    fig_pcncsas = go.Figure()\n\n                                    fig_pcncsas.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=pcncsas_client,\n                                        delta={'reference': pcncsas_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [pcncsas_axis_min, pcncsas_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': pcncsas_client},\n                                            'steps': [\n                                                {'range': [0, pcncsas_min], 'color': 'white'},\n                                                {'range': [pcncsas_min, pcncsas_q25], 'color': '#de3a5b'},\n                                                {'range': [pcncsas_q25, pcncsas_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [pcncsas_mean, pcncsas_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [pcncsas_q75, pcncsas_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_pcncsas.update_layout(height=200,\n                                                              margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_pcncsas)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             pcncsas_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM'][df_dashboard[\n                                                                                                              'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=pcncsas_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_POS_CASH_NAME_CONTRACT_STATUS_ACTIVE_SUM, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable PREV_APP_INTEREST_SHARE_MAX\n                        # La valeur maximale de tous les pr\u00e9c\u00e9dents cr\u00e9dit dans d'autres\n                        # institution : de la dur\u00e9e du cr\u00e9dit multipli\u00e9 par l'annuit\u00e9 du pr\u00eat\n                        # moins le montant final du cr\u00e9dit\n                        # ==============================================================\n                        if 'PREV_APP_INTEREST_SHARE_MAX' in feat_imp_to_show:\n\n                            with st.spinner('**Chargement du graphique comparatif PREV_APP_INTEREST_SHARE_MAX...**'):\n\n                                paism_min = int(df_client.PREV_APP_INTEREST_SHARE_MAX_MIN.values)\n                                paism_q25 = int(df_client.PREV_APP_INTEREST_SHARE_MAX_Q25.values)\n                                paism_mean = int(df_client.PREV_APP_INTEREST_SHARE_MAX_MEAN.values)\n                                paism_q75 = int(df_client.PREV_APP_INTEREST_SHARE_MAX_Q75.values)\n                                paism_max = int(df_client.PREV_APP_INTEREST_SHARE_MAX_MAX.values)\n                                paism_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                       'PREV_APP_INTEREST_SHARE_MAX'].values)\n                                paism_axis_min = min(paism_min, paism_client)\n                                paism_axis_max = max(paism_max, paism_client)\n\n                                cond = paism_client == paism_min and paism_min == paism_q25 and \\\n                                       paism_q25 == paism_mean and paism_mean == paism_q75 and \\\n                                       paism_q75 == paism_max\n\n                                if not cond:\n                                    fig_paism = go.Figure()\n\n                                    fig_paism.add_trace(go.Indicator(\n                                        mode=\"number+gauge+delta\",\n                                        value=paism_client,\n                                        delta={'reference': paism_mean,\n                                               'increasing': {'color': 'Crimson'},\n                                               'decreasing': {'color': 'Green'}},\n                                        domain={'x': [0.5, 1], 'y': [0.8, 1]},\n                                        title={'text': 'PREV_APP_INTEREST_SHARE_MAX',\n                                               'font': {'size': 9}, 'align': 'left'},\n                                        gauge={\n                                            'shape': 'bullet',\n                                            'axis': {'range': [paism_axis_min, paism_axis_max]},\n                                            'threshold': {\n                                                'line': {'color': 'black', 'width': 3},\n                                                'thickness': 0.75,\n                                                'value': paism_client},\n                                            'steps': [\n                                                {'range': [0, paism_min], 'color': 'white'},\n                                                {'range': [paism_min, paism_q25], 'color': '#de3a5b'},\n                                                {'range': [paism_q25, paism_mean], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [paism_mean, paism_q75], 'color': '#dec7cb',\n                                                 'line': {'color': 'DarkSlateGray', 'width': 2}},\n                                                {'range': [paism_q75, paism_max], 'color': '#de3a5b'}],\n                                            'bar': {'color': 'black'}}))\n\n                                    fig_paism.update_layout(height=200,\n                                                            margin={'t': 0, 'b': 0, 'l': 0})\n\n                                    st.markdown(html_PREV_APP_INTEREST_SHARE_MAX, unsafe_allow_html=True)\n\n                                    # Go Indicator bullets\n                                    st.plotly_chart(fig_paism)\n\n                                    # ==================== ViolinPlot ========================================================\n                                    sns.violinplot(x='PRED_CLASSE_CLIENT', y='PREV_APP_INTEREST_SHARE_MAX',\n                                                   data=df_dashboard,\n                                                   palette=['Green', 'Crimson'])\n\n                                    plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                             paism_client,\n                                             color=\"orange\",\n                                             marker=\"$\\\\bigotimes$\", markersize=28)\n                                    plt.xlabel('TARGET', fontsize=16)\n                                    client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                           linestyle='None',\n                                                           markersize=16, label='Position du client')\n                                    plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                    # ==================== DistPlot ==========================================================\n                                    # Non-d\u00e9faillants\n                                    sns.distplot(df_dashboard['PREV_APP_INTEREST_SHARE_MAX'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 0],\n                                                 label='Non-D\u00e9faillants', hist=False, color='Green')\n                                    # D\u00e9faillants\n                                    sns.distplot(df_dashboard['PREV_APP_INTEREST_SHARE_MAX'][df_dashboard[\n                                                                                                 'PRED_CLASSE_CLIENT'] == 1],\n                                                 label='D\u00e9faillants', hist=False, color='Crimson')\n                                    plt.xlabel('PREV_APP_INTEREST_SHARE_MAX', fontsize=16)\n                                    plt.ylabel('Probability Density', fontsize=16)\n                                    plt.xticks(fontsize=16, rotation=90)\n                                    plt.yticks(fontsize=16)\n                                    # Position du client\n                                    plt.axvline(x=paism_client, color='orange', label='Position du client')\n                                    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                    st.set_option('deprecation.showPyplotGlobalUse', False)\n                                    st.pyplot()\n\n                                else:\n\n                                    st.markdown(html_PREV_APP_INTEREST_SHARE_MAX, unsafe_allow_html=True)\n                                    st.write(\"Toutes les valeurs sont identiques\")\n\n                                    # ==============================================================\n                        # Variable CODE_GENDER\n                        # Sexe\n                        # ==============================================================\n                        if 'CODE_GENDER' in feat_imp_to_show:\n                            with st.spinner('**Chargement du graphique comparatif CODE_GENDER...**'):\n                                cg_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                    'CODE_GENDER'].values)\n\n                                st.markdown(html_CODE_GENDER, unsafe_allow_html=True)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='CODE_GENDER',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         cg_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['CODE_GENDER'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['CODE_GENDER'][df_dashboard[\n                                                                             'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('CODE_GENDER', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=cg_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable FLAG_OWN_CAR\n                        # Indicateur si le client poss\u00e8de une voiture\n                        # ==============================================================\n                        if 'FLAG_OWN_CAR' in feat_imp_to_show:\n                            with st.spinner('**Chargement du graphique comparatif FLAG_OWN_CAR...**'):\n                                foc_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                     'FLAG_OWN_CAR'].values)\n\n                                st.markdown(html_FLAG_OWN_CAR, unsafe_allow_html=True)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='FLAG_OWN_CAR',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         foc_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['FLAG_OWN_CAR'][df_dashboard[\n                                                                              'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['FLAG_OWN_CAR'][df_dashboard[\n                                                                              'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('FLAG_OWN_CAR', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=foc_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.pyplot()\n\n                                # ==============================================================\n                        # Variable NAME_EDUCATION_TYPE_HIGHER_EDUCATION\n                        # Indicateur si le client poss\u00e8de une voiture\n                        # ==============================================================\n                        if 'NAME_EDUCATION_TYPE_HIGHER_EDUCATION' in feat_imp_to_show:\n                            with st.spinner(\n                                    '**Chargement du graphique comparatif NAME_EDUCATION_TYPE_HIGHER_EDUCATION...**'):\n                                nethe_client = int(df_dashboard[df_dashboard['SK_ID_CURR'] == client_id][\n                                                       'NAME_EDUCATION_TYPE_HIGHER_EDUCATION'].values)\n\n                                st.markdown(html_NAME_EDUCATION_TYPE_HIGHER_EDUCATION, unsafe_allow_html=True)\n\n                                # ==================== ViolinPlot ========================================================\n                                sns.violinplot(x='PRED_CLASSE_CLIENT', y='NAME_EDUCATION_TYPE_HIGHER_EDUCATION',\n                                               data=df_dashboard,\n                                               palette=['Green', 'Crimson'])\n\n                                plt.plot(df_client_courant['PRED_CLASSE_CLIENT'],\n                                         nethe_client,\n                                         color=\"orange\",\n                                         marker=\"$\\\\bigotimes$\", markersize=28)\n                                plt.xlabel('TARGET', fontsize=16)\n                                client = mlines.Line2D([], [], color='orange', marker='$\\\\bigotimes$',\n                                                       linestyle='None',\n                                                       markersize=16, label='Position du client')\n                                plt.legend(handles=[client], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n                                st.pyplot()\n\n                                # ==================== DistPlot ==========================================================\n                                # Non-d\u00e9faillants\n                                sns.distplot(df_dashboard['NAME_EDUCATION_TYPE_HIGHER_EDUCATION'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 0],\n                                             label='Non-D\u00e9faillants', hist=False, color='Green')\n                                # D\u00e9faillants\n                                sns.distplot(df_dashboard['NAME_EDUCATION_TYPE_HIGHER_EDUCATION'][df_dashboard[\n                                                                                                      'PRED_CLASSE_CLIENT'] == 1],\n                                             label='D\u00e9faillants', hist=False, color='Crimson')\n                                plt.xlabel('NAME_EDUCATION_TYPE_HIGHER_EDUCATION', fontsize=16)\n                                plt.ylabel('Probability Density', fontsize=16)\n                                plt.xticks(fontsize=16, rotation=90)\n                                plt.yticks(fontsize=16)\n                                # Position du client\n                                plt.axvline(x=nethe_client, color='orange', label='Position du client')\n                                plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=18)\n                                st.pyplot()\n\n                                # ====================== COMPARAISON TRAITS STRICTS CLIENT COURANT \/ CLIENTS SIMILAIRES ============================\n    if st.sidebar.checkbox(\"Comparer traits stricts ?\"):\n\n        if titre:\n            st.markdown(html_clients_similaires, unsafe_allow_html=True)\n            titre = False\n\n        with st.spinner('**Affiche les traits stricts comparant le client courant et les clients similaires...**'):\n\n            with st.expander('Comparaison traits stricts',\n                             expanded=True):\n                # Infos principales clients similaires\n                voisins_info = df_info_voisins[df_info_voisins['ID_CLIENT'] == client_id].iloc[:, 1:]\n                voisins_info.set_index('INDEX_VOISIN', inplace=True)\n                st.write('Client courant')\n                st.dataframe(client_info)\n                st.write('10 clients similaires')\n                st.dataframe(voisins_info.style.highlight_max(axis=0))\n\n    # ====================== COMPARAISON DEMANDE DE PR\u00caT CLIENT COURANT \/ CLIENTS SIMILAIRES ============================\n    if st.sidebar.checkbox(\"Comparer demande pr\u00eat ?\"):\n\n        if titre:\n            st.markdown(html_clients_similaires, unsafe_allow_html=True)\n            titre = False\n\n        with st.spinner(\n                '**Affiche les informations de la demande de pr\u00eat comparant le client courant et les clients similaires...**'):\n\n            with st.expander('Comparaison demande de pr\u00eat',\n                             expanded=True):\n                # Infos principales sur la demande de pr\u00eat\n                voisins_pret = df_pret_voisins[df_pret_voisins['ID_CLIENT'] == client_id].iloc[:, 1:]\n                voisins_pret.set_index('INDEX_VOISIN', inplace=True)\n                st.write('Client courant')\n                st.dataframe(client_pret)\n                st.write('10 clients similaires')\n                st.dataframe(voisins_pret.style.highlight_max(axis=0))\n\n\nst.sidebar.subheader('Clients similaires')\ninfos_clients_similaires()\n\n\n# --------------------------------------------------------------------\n# FACTEURS D'INFLUENCE : SHAP VALUE\n# --------------------------------------------------------------------\n\ndef affiche_facteurs_influence():\n    ''' Affiche les facteurs d'influence du client courant\n    '''\n    html_facteurs_influence = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Variables importantes\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir facteurs d\\'influence\"):\n        st.markdown(html_facteurs_influence, unsafe_allow_html=True)\n\n        with st.spinner('**Affiche les facteurs d\\'influence du client courant...**'):\n            with st.expander('Facteurs d\\'influence du client courant',\n                             expanded=True):\n                explainer = shap.TreeExplainer(best_model)\n\n                client_index = test_set[test_set['SK_ID_CURR'] == client_id].index.item()\n                X_shap = test_set.set_index('SK_ID_CURR')\n                X_test_courant = X_shap.iloc[client_index]\n                X_test_courant_array = X_test_courant.values.reshape(1, -1)\n\n                shap_values_courant = explainer.shap_values(X_test_courant_array)\n\n                col1, col2 = st.columns([1, 1])\n                # BarPlot du client courant\n                with col1:\n                    plt.clf()\n\n                    # BarPlot du client courant\n                    shap.plots.bar(bar_values[client_index], max_display=40)\n\n                    fig = plt.gcf()\n                    fig.set_size_inches((10, 20))\n                    # Plot the graph on the dashboard\n                    st.pyplot(fig)\n\n                # D\u00e9cision plot du client courant\n                with col2:\n                    plt.clf()\n\n                    # D\u00e9cision Plot\n                    shap.decision_plot(explainer.expected_value[1], shap_values_courant[1],\n                                       X_test_courant)\n\n                    fig2 = plt.gcf()\n                    fig2.set_size_inches((10, 15))\n                    # Plot the graph on the dashboard\n                    st.pyplot(fig2)\n\n\nst.sidebar.subheader('Facteurs d\\'influence')\naffiche_facteurs_influence()\n\n# --------------------------------------------------------------------\n# STATISTIQUES GENERALES\n# --------------------------------------------------------------------\n\ndico_stats = {'Variable cible': 'TARGET',\n              'Type de pr\u00eat': 'NAME_CONTRACT_TYPE',\n              'Sexe': 'CODE_GENDER',\n              'T\u00e9l. professionnel': 'FLAG_EMP_PHONE',\n              'Note r\u00e9gion o\u00f9 vit client': 'REGION_RATING_CLIENT_W_CITY',\n              'Niveau \u00e9ducation du client': 'NAME_EDUCATION_TYPE',\n              'Profession du client': 'OCCUPATION_TYPE',\n              'Type d\\'organisation de travail du client': 'ORGANIZATION_TYPE',\n              'Adresse du client = adresse de contact': 'REG_CITY_NOT_LIVE_CITY',\n              'R\u00e9gion du client = adresse professionnelle': 'REG_CITY_NOT_WORK_CITY',\n              'Adresse du client = adresse professionnelle': 'LIVE_CITY_NOT_WORK_CITY',\n              'Logement du client': 'NAME_HOUSING_TYPE',\n              'Statut familial': 'NAME_FAMILY_STATUS',\n              'Type de revenu du client': 'NAME_INCOME_TYPE',\n              'Client poss\u00e8de une maison ou appartement?': 'FLAG_OWN_REALTY',\n              'Accompagnateur lors de la demande de pr\u00eat?': 'NAME_TYPE_SUITE',\n              'Quel jour de la semaine le client a-t-il demand\u00e9 le pr\u00eat ?': 'WEEKDAY_APPR_PROCESS_START',\n              'Le client a-t-il fourni un num\u00e9ro de t\u00e9l\u00e9phone portable ?': 'FLAG_MOBIL',\n              'Le client a-t-il fourni un num\u00e9ro de t\u00e9l\u00e9phone professionnel fixe ?': 'FLAG_WORK_PHONE',\n              'Le t\u00e9l\u00e9phone portable \u00e9tait-il joignable?': 'FLAG_CONT_MOBILE',\n              'Le client a-t-il fourni un num\u00e9ro de t\u00e9l\u00e9phone domicile fixe ?': 'FLAG_PHONE',\n              'Le client a-t-il fourni une adresse \u00e9lectronique': 'FLAG_EMAIL',\n              '\u00c2ge (ans)': 'AGE_YEARS',\n              'Combien d\\'ann\u00e9es avant la demande la personne a commenc\u00e9 son emploi actuel ?': 'YEARS_EMPLOYED',\n              'Combien de jours avant la demande le client a-t-il chang\u00e9 son enregistrement ?': 'DAYS_REGISTRATION',\n              'Combien de jours avant la demande le client a-t-il chang\u00e9 la pi\u00e8ce d\\'identit\u00e9 avec laquelle il a demand\u00e9 le pr\u00eat ?': 'DAYS_ID_PUBLISH',\n              'Prix du bien que le client a demand\u00e9': 'AMT_GOODS_PRICE',\n              'Nombre d\\enfants?': 'CNT_CHILDREN',\n              'Revenu du client': 'AMT_INCOME_TOTAL',\n              'Montant du cr\u00e9dit du pr\u00eat': 'AMT_CREDIT',\n              'Annuit\u00e9 de pr\u00eat': 'AMT_ANNUITY',\n              '\u00c2ge de la voiture du client': 'OWN_CAR_AGE',\n              'Combien de membres de la famille a le client': 'CNT_FAM_MEMBERS',\n              'Population normalis\u00e9e de la r\u00e9gion o\u00f9 vit le client': 'REGION_POPULATION_RELATIVE',\n              'Notre \u00e9valuation de la r\u00e9gion o\u00f9 vit le client (1 ou 2 ou 3)': 'REGION_RATING_CLIENT',\n              'Indicateur si l\\'adresse permanente du client ne correspond pas \u00e0 l\\'adresse de contact': 'REG_REGION_NOT_LIVE_REGION',\n              'Indicateur si l\\'adresse permanente du client ne correspond pas \u00e0 l\\'adresse professionnelle': 'REG_REGION_NOT_WORK_REGION',\n              'Indicateur si l\\'adresse de contact du client ne correspond pas \u00e0 l\\'adresse de travail': 'LIVE_REGION_NOT_WORK_REGION',\n              'Combien de jours avant la demande le client a-t-il chang\u00e9 de t\u00e9l\u00e9phone ?': 'DAYS_LAST_PHONE_CHANGE',\n              'Statut des cr\u00e9dits d\u00e9clar\u00e9s par le Credit Bureau': 'CREDIT_ACTIVE',\n              'Devise recod\u00e9e du cr\u00e9dit du Credit Bureau': 'CREDIT_CURRENCY',\n              'Type de cr\u00e9dit du Bureau de cr\u00e9dit (voiture ou argent liquide...)': 'CREDIT_TYPE',\n              'Combien d\\ann\u00e9es avant la demande actuelle le client a-t-il demand\u00e9 un cr\u00e9dit au Credit Bureau ?': 'YEARS_CREDIT',\n              'Dur\u00e9e restante du cr\u00e9dit CB (en jours) au moment de la demande dans Cr\u00e9dit immobilier': 'DAYS_CREDIT_ENDDATE',\n              'Combien de jours avant la demande de pr\u00eat la derni\u00e8re information sur la solvabilit\u00e9 du Credit Bureau a-t-elle \u00e9t\u00e9 fournie ?': 'DAYS_CREDIT_UPDATE',\n              'Nombre de jours de retard sur le cr\u00e9dit CB au moment de la demande de pr\u00eat': 'CREDIT_DAY_OVERDUE',\n              'Montant maximal des impay\u00e9s sur le cr\u00e9dit du Credit Bureau jusqu\\'\u00e0 pr\u00e9sent': 'AMT_CREDIT_MAX_OVERDUE',\n              'Combien de fois le cr\u00e9dit du Bureau de cr\u00e9dit a-t-il \u00e9t\u00e9 prolong\u00e9 ?': 'CNT_CREDIT_PROLONG',\n              'Montant actuel du cr\u00e9dit du Credit Bureau': 'AMT_CREDIT_SUM',\n              'Dette actuelle sur le cr\u00e9dit du Credit Bureau': 'AMT_CREDIT_SUM_DEBT',\n              'Limite de cr\u00e9dit actuelle de la carte de cr\u00e9dit d\u00e9clar\u00e9e dans le Bureau de cr\u00e9dit': 'AMT_CREDIT_SUM_LIMIT',\n              'Montant actuel en retard sur le cr\u00e9dit du Bureau de cr\u00e9dit': 'AMT_CREDIT_SUM_OVERDUE',\n              'Annuit\u00e9 du cr\u00e9dit du Credit Bureau': 'AMT_ANNUITY',\n              'Statut du pr\u00eat du Credit Bureau durant le mois': 'STATUS',\n              'Mois du solde par rapport \u00e0 la date de la demande': 'MONTHS_BALANCE',\n              'Statut du contrat au cours du mois': 'NAME_CONTRACT_STATUS',\n              'Solde au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_BALANCE',\n              'Montant total \u00e0 recevoir sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_TOTAL_RECEIVABLE',\n              'Nombre d\\'\u00e9ch\u00e9ances pay\u00e9es sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_INSTALMENT_MATURE_CUM',\n              'Mois du solde par rapport \u00e0 la date d\\'application': 'MONTHS_BALANCE',\n              'Limite de la carte de cr\u00e9dit au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_CREDIT_LIMIT_ACTUAL',\n              'Montant retir\u00e9 au guichet automatique pendant le mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_DRAWINGS_ATM_CURRENT',\n              'Montant pr\u00e9lev\u00e9 au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_DRAWINGS_CURRENT',\n              'Montant des autres pr\u00e9l\u00e8vements au cours du mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_DRAWINGS_OTHER_CURRENT',\n              'Montant des pr\u00e9l\u00e8vements ou des achats de marchandises au cours du mois de la cr\u00e9dibilit\u00e9 pr\u00e9c\u00e9dente': 'AMT_DRAWINGS_POS_CURRENT',\n              'Versement minimal pour ce mois du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_INST_MIN_REGULARITY',\n              'Combien le client a-t-il pay\u00e9 pendant le mois sur le cr\u00e9dit pr\u00e9c\u00e9dent ?': 'AMT_PAYMENT_CURRENT',\n              'Combien le client a-t-il pay\u00e9 au total pendant le mois sur le cr\u00e9dit pr\u00e9c\u00e9dent ?': 'AMT_PAYMENT_TOTAL_CURRENT',\n              'Montant \u00e0 recevoir pour le principal du cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_RECEIVABLE_PRINCIPAL',\n              'Montant \u00e0 recevoir sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'AMT_RECIVABLE',\n              'Nombre de retraits au guichet automatique durant ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_ATM_CURRENT',\n              'Nombre de retraits pendant ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_CURRENT',\n              'Nombre d\\'autres retraits au cours de ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_OTHER_CURRENT',\n              'Nombre de retraits de marchandises durant ce mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_DRAWINGS_POS_CURRENT',\n              'DPD (jours de retard) au cours du mois sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'SK_DPD',\n              'DPD (Days past due) au cours du mois avec tol\u00e9rance (les dettes avec de faibles montants de pr\u00eat sont ignor\u00e9es) du cr\u00e9dit pr\u00e9c\u00e9dent': 'SK_DPD_DEF',\n              'La date \u00e0 laquelle le versement du cr\u00e9dit pr\u00e9c\u00e9dent \u00e9tait cens\u00e9 \u00eatre pay\u00e9 (par rapport \u00e0 la date de demande du pr\u00eat actuel)': 'DAYS_INSTALMENT',\n              'Quand les \u00e9ch\u00e9ances du cr\u00e9dit pr\u00e9c\u00e9dent ont-elles \u00e9t\u00e9 effectivement pay\u00e9es (par rapport \u00e0 la date de demande du pr\u00eat actuel) ?': 'DAYS_ENTRY_PAYMENT',\n              'Version du calendrier des versements (0 pour la carte de cr\u00e9dit) du cr\u00e9dit pr\u00e9c\u00e9dent': 'NUM_INSTALMENT_VERSION',\n              'Sur quel versement nous observons le paiement': 'NUM_INSTALMENT_NUMBER',\n              'Quel \u00e9tait le montant de l\\'acompte prescrit du cr\u00e9dit pr\u00e9c\u00e9dent sur cet acompte ?': 'AMT_INSTALMENT',\n              'Ce que le client a effectivement pay\u00e9 sur le cr\u00e9dit pr\u00e9c\u00e9dent pour ce versement': 'AMT_PAYMENT',\n              'Statut du contrat au cours du mois': 'NAME_CONTRACT_STATUS',\n              'Dur\u00e9e du cr\u00e9dit pr\u00e9c\u00e9dent (peut changer avec le temps)': 'CNT_INSTALMENT',\n              'Versements restant \u00e0 payer sur le cr\u00e9dit pr\u00e9c\u00e9dent': 'CNT_INSTALMENT_FUTURE',\n              'EXT_SOURCE_1': 'EXT_SOURCE_1',\n              'EXT_SOURCE_2': 'EXT_SOURCE_2',\n              'EXT_SOURCE_3': 'EXT_SOURCE_3',\n              'FLAG_DOCUMENT_2': 'FLAG_DOCUMENT_2',\n              'FLAG_DOCUMENT_3': 'FLAG_DOCUMENT_3',\n              'FLAG_DOCUMENT_4': 'FLAG_DOCUMENT_4',\n              'FLAG_DOCUMENT_5': 'FLAG_DOCUMENT_5',\n              'FLAG_DOCUMENT_6': 'FLAG_DOCUMENT_6',\n              'FLAG_DOCUMENT_7': 'FLAG_DOCUMENT_7',\n              'FLAG_DOCUMENT_8': 'FLAG_DOCUMENT_8',\n              'FLAG_DOCUMENT_9': 'FLAG_DOCUMENT_9',\n              'FLAG_DOCUMENT_10': 'FLAG_DOCUMENT_10',\n              'FLAG_DOCUMENT_11': 'FLAG_DOCUMENT_11',\n              'FLAG_DOCUMENT_12': 'FLAG_DOCUMENT_12',\n              'FLAG_DOCUMENT_13': 'FLAG_DOCUMENT_13',\n              'FLAG_DOCUMENT_14': 'FLAG_DOCUMENT_14',\n              'FLAG_DOCUMENT_15': 'FLAG_DOCUMENT_15',\n              'FLAG_DOCUMENT_16': 'FLAG_DOCUMENT_16',\n              'FLAG_DOCUMENT_17': 'FLAG_DOCUMENT_17',\n              'FLAG_DOCUMENT_18': 'FLAG_DOCUMENT_18',\n              'FLAG_DOCUMENT_19': 'FLAG_DOCUMENT_19',\n              'FLAG_DOCUMENT_20': 'FLAG_DOCUMENT_20',\n              'FLAG_DOCUMENT_21': 'FLAG_DOCUMENT_21',\n              'FONDKAPREMONT_MODE': 'FONDKAPREMONT_MODE',\n              'HOUSETYPE_MODE': 'HOUSETYPE_MODE',\n              'WALLSMATERIAL_MODE': 'WALLSMATERIAL_MODE',\n              'EMERGENCYSTATE_MODE': 'EMERGENCYSTATE_MODE',\n              'FLOORSMAX_AVG': 'FLOORSMAX_AVG',\n              'FLOORSMAX_MEDI': 'FLOORSMAX_MEDI',\n              'FLOORSMAX_MODE': 'FLOORSMAX_MODE',\n              'FLOORSMIN_MODE': 'FLOORSMIN_MODE',\n              'FLOORSMIN_AVG': 'FLOORSMIN_AVG',\n              'FLOORSMIN_MEDI': 'FLOORSMIN_MEDI',\n              'APARTMENTS_AVG': 'APARTMENTS_AVG',\n              'APARTMENTS_MEDI': 'APARTMENTS_MEDI',\n              'APARTMENTS_MODE': 'APARTMENTS_MODE',\n              'BASEMENTAREA_AVG': 'BASEMENTAREA_AVG',\n              'BASEMENTAREA_MEDI': 'BASEMENTAREA_MEDI',\n              'BASEMENTAREA_MODE': 'BASEMENTAREA_MODE',\n              'YEARS_BEGINEXPLUATATION_AVG': 'YEARS_BEGINEXPLUATATION_AVG',\n              'YEARS_BEGINEXPLUATATION_MODE': 'YEARS_BEGINEXPLUATATION_MODE',\n              'YEARS_BEGINEXPLUATATION_MEDI': 'YEARS_BEGINEXPLUATATION_MEDI',\n              'YEARS_BUILD_AVG': 'YEARS_BUILD_AVG',\n              'YEARS_BUILD_MODE': 'YEARS_BUILD_MODE',\n              'YEARS_BUILD_MEDI': 'YEARS_BUILD_MEDI',\n              'COMMONAREA_AVG': 'COMMONAREA_AVG',\n              'COMMONAREA_MEDI': 'COMMONAREA_MEDI',\n              'COMMONAREA_MODE': 'COMMONAREA_MODE',\n              'ELEVATORS_AVG': 'ELEVATORS_AVG',\n              'ELEVATORS_MODE': 'ELEVATORS_MODE',\n              'ELEVATORS_MEDI': 'ELEVATORS_MEDI',\n              'ENTRANCES_AVG': 'ENTRANCES_AVG',\n              'ENTRANCES_MODE': 'ENTRANCES_MODE',\n              'ENTRANCES_MEDI': 'ENTRANCES_MEDI',\n              'LANDAREA_AVG': 'LANDAREA_AVG',\n              'LANDAREA_MEDI': 'LANDAREA_MEDI',\n              'LANDAREA_MODE': 'LANDAREA_MODE',\n              'LIVINGAPARTMENTS_AVG': 'LIVINGAPARTMENTS_AVG',\n              'LIVINGAPARTMENTS_MODE': 'LIVINGAPARTMENTS_MODE',\n              'LIVINGAPARTMENTS_MEDI': 'LIVINGAPARTMENTS_MEDI',\n              'LIVINGAREA_AVG': 'LIVINGAREA_AVG',\n              'LIVINGAREA_MODE': 'LIVINGAREA_MODE',\n              'NONLIVINGAPARTMENTS_AVG': 'NONLIVINGAPARTMENTS_AVG',\n              'NONLIVINGAPARTMENTS_MODE': 'NONLIVINGAPARTMENTS_MODE',\n              'NONLIVINGAREA_AVG': 'NONLIVINGAREA_AVG',\n              'NONLIVINGAREA_MEDI': 'NONLIVINGAREA_MEDI',\n              'TOTALAREA_MODE': 'TOTALAREA_MODE',\n              'OBS_30_CNT_SOCIAL_CIRCLE': 'OBS_30_CNT_SOCIAL_CIRCLE',\n              'DEF_30_CNT_SOCIAL_CIRCLE': 'DEF_30_CNT_SOCIAL_CIRCLE',\n              'DEF_60_CNT_SOCIAL_CIRCLE': 'DEF_60_CNT_SOCIAL_CIRCLE',\n              'AMT_REQ_CREDIT_BUREAU_HOUR': 'AMT_REQ_CREDIT_BUREAU_HOUR',\n              'AMT_REQ_CREDIT_BUREAU_DAY': 'AMT_REQ_CREDIT_BUREAU_DAY',\n              'AMT_REQ_CREDIT_BUREAU_WEEK': 'AMT_REQ_CREDIT_BUREAU_WEEK',\n              'AMT_REQ_CREDIT_BUREAU_MON': 'AMT_REQ_CREDIT_BUREAU_MON',\n              'AMT_REQ_CREDIT_BUREAU_QRT': 'AMT_REQ_CREDIT_BUREAU_QRT',\n              'AMT_REQ_CREDIT_BUREAU_YEAR': 'AMT_REQ_CREDIT_BUREAU_YEAR',\n              'DAYS_ENDDATE_FACT': 'DAYS_ENDDATE_FACT'}\n\npath_img = \"resources\/images\/stats\/\"\n\n\ndef affiche_stats():\n    ''' Affiche les statistiques g\u00e9n\u00e9rales provenant de l'EDA\n    '''\n    html_facteurs_influence = \"\"\"\n        <div class=\"card\">\n            <div class=\"card-body\" style=\"border-radius: 10px 10px 0px 0px;\n                  background: #DEC7CB; padding-top: 5px; width: auto;\n                  height: 40px;\">\n                  <h3 class=\"card-title\" style=\"background-color:#DEC7CB; color:Crimson;\n                      font-family:Georgia; text-align: center; padding: 0px 0;\">\n                      Distribution des variables g\u00e9n\u00e9rale\/pour les d\u00e9faillants\n                  <\/h3>\n            <\/div>\n        <\/div>\n        \"\"\"\n\n    # ====================== GRAPHIQUES COMPARANT CLIENT COURANT \/ CLIENTS SIMILAIRES ===========================\n    if st.sidebar.checkbox(\"Voir les distributions\"):\n        st.markdown(html_facteurs_influence, unsafe_allow_html=True)\n\n        with st.spinner('**Affiche les statistiques g\u00e9n\u00e9rales\/pour les d\u00e9faillants...**'):\n            with st.expander('Distribution des variables',\n                             expanded=True):\n                choix = st.selectbox(\"Choisir une variable : \", dico_stats.keys())\n                nom_img = dico_stats[choix]\n                img = Image.open(path_img + nom_img + \".png\")\n                st.image(img)\n\n\nst.sidebar.subheader('Stats g\u00e9n\u00e9rales')\naffiche_stats()\n\n# ====================================================================\n# FOOTER\n# ====================================================================\nhtml_line = \"\"\"\n<br>\n<br>\n<br>\n<br>\n<hr style= \"  display: block;\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n  margin-left: auto;\n  margin-right: auto;\n  border-style: inset;\n  border-width: 1.5px;\">\n<p style=\"color:Gray; text-align: right; font-size:12px;\">Auteur : loe.rabier@gmail.com - 17\/08\/2021<\/p>\n\"\"\"\nst.markdown(html_line, unsafe_allow_html=True)","4493e882":"**Step1**\n\nLaunch PyCharm (with your IDE or open the app directly)\n\n**Step2**\n\nCreate a new file. name it (for example p7.py)\n\n**Step3**\n    \nIn the Pycharm terminal, install the following (1 by 1): \n        - pip install streamlit\n        - pip install numpy\n        - pip install matplotlib\n        - pip install lightgbm==2.3.1\n        - pip install seaborn\n        - pip install shap\n        \n \nSpecificities : \nWe do not need to install pandas : pip install pandas\n            - pip install plotly.express\n        - pip install plotly\n        - pip install wordcloud\n        - pip install stop-words   \n\n\n**Step4**\n\nLaunch the file : write in the terminal : streamlit run p7.py\nA webpage should open\nSelect in the option the possibility to update after each changes in the code\n\n**Step5**\n\nInclude the following code in the maib part of PyCharm\n\n**Step6**\n    \nCheck the dashboard on the webpage. See the result in video. [click here\/video not yet available](XXX)","8cfcd62f":"Data Origins : [Click here](XXX) \n\u200b\n\nThis data originally came from [here](XXX)\n\u200b\n\n","7639a9bb":"<h1>Step by Step","5c8094ea":"> onglet script_runner.py","a9612853":"<h1>EDA","45c3327e":"<h1>Context & expected results","3088bcea":"For each customers coming to the bank for a loan request, we want to evaluate the possibility to accept the loan or not. \nThis decision will be data based. \nWe will analyze the differente informations (personal) and features for each customer and estimate if the loan will be paid back or not.","a1a3247d":"\ud83d\udcb2\ud83d\udcb0\ud83d\udcb8\ud83d\udcb3**CREATE INTERACTIVE DASHBOARDS - BANK LOAN RISKS**\u274c\u2705\n\n*This application is a Streamlit dashboard used to evaluate the risk for the bank if the credit request is accepted*\n\n*Project for CentraleSupElec *\n\n#Python #Sentiment #Dashboard #Streamlit #PyCharm #Flask\n\n--------------"}}