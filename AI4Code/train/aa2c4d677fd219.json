{"cell_type":{"ec4e9f80":"code","eb108c33":"code","d00624b3":"code","125967c0":"code","b13eac7a":"code","68e83d16":"code","82390010":"code","05866971":"code","f44e3f1f":"code","9b7bd266":"code","fedcb062":"code","92e8351d":"code","db9d456b":"code","bfe86736":"code","e89472d1":"code","874590c4":"code","b2d19afe":"code","a12456be":"code","a1a58603":"code","8f9dd7e5":"code","721f69a9":"code","b0ae0f7b":"code","36701205":"code","70fe9625":"code","94efc3c5":"code","39046976":"code","33a79bfd":"code","d0083e3b":"code","5cea5da2":"code","42a59be3":"code","93f2c5e3":"code","36e8f4c9":"markdown","4ed6bb69":"markdown","bb832b67":"markdown","babd6342":"markdown","b543c432":"markdown","e14e6066":"markdown","7dcad7da":"markdown","4504a941":"markdown","a55d7ed9":"markdown","8328f7d1":"markdown","f5812b12":"markdown","a84754f4":"markdown"},"source":{"ec4e9f80":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","eb108c33":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.cluster import KMeans\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier\nfrom xgboost import plot_tree, plot_importance\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score, roc_curve\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d00624b3":"train = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\ntest = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')","125967c0":"train.head()","b13eac7a":"train.info()","68e83d16":"train.describe().T","82390010":"train.isnull().sum()","05866971":"import pandas_profiling as pandas_pf\npandas_pf.ProfileReport(train)","f44e3f1f":"sns.countplot(x = \"wifi\",data=train)","9b7bd266":"sns.countplot(x = \"n_cores\",data=train)","fedcb062":"range_mapping = {0: \"cheap\",\n    1: \"standart\",\n    2: \"expensive\",\n    3: \"very expensive\"}","92e8351d":"train['price_range_mapped'] = train['price_range'].map(range_mapping)","db9d456b":"grid = sns.FacetGrid(train, col=\"price_range\", hue=\"price_range_mapped\", palette=\"hsv\",height=5\n                   )\ngrid.map(sns.distplot, \"ram\").add_legend();","bfe86736":"plt.figure(figsize = (15,10))\nsns.boxplot(x=\"three_g\", y=\"battery_power\", hue = \"price_range_mapped\", data = train)\nplt.xlabel(\"3-G\", fontsize = 20)\nplt.ylabel(\"Battery Power\", fontsize = 20)\n\nplt.show()","e89472d1":"plt.figure(figsize=(10,20))\nsns.jointplot(x=train['pc'], y=train['fc'], kind=\"hex\", color=\"#82FFFC\");\nplt.xlabel(\"Mobile Weight\")\nplt.ylabel(\"Primary Camera mega pixels\")","874590c4":"corr=train.corr()\nfig = plt.figure(figsize=(15,12))\nheatmap = sns.heatmap(corr, cmap='viridis')\nheatmap.set_title(\"Correlation \")","b2d19afe":"features = ['battery_power', 'blue', 'clock_speed','dual_sim', 'fc', 'four_g', 'int_memory', 'm_dep', 'mobile_wt', 'n_cores',\n            'pc', 'px_height', 'px_width', 'ram', 'sc_h', 'sc_w', 'talk_time', 'three_g', 'touch_screen', 'wifi']\ntarget = ['price_range']","a12456be":"x = train[features].values\ny = train[target].values","a1a58603":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state = 24)","8f9dd7e5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","721f69a9":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\nlr_predict = lr.predict(X_test)\nlr_conf_matrix = confusion_matrix(y_test, lr_predict)\nlr_acc_score = accuracy_score(y_test, lr_predict)\nprint(\"confussion matrix\")\nprint(lr_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of Logistic Regression:\",lr_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,lr_predict))","b0ae0f7b":"nb = GaussianNB()\nnb.fit(X_train,y_train)\nnbpred = nb.predict(X_test)\nnb_conf_matrix = confusion_matrix(y_test, nbpred)\nnb_acc_score = accuracy_score(y_test, nbpred)\nprint(\"confussion matrix\")\nprint(nb_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of Naive Bayes model:\",nb_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,nbpred))","36701205":"rf = RandomForestClassifier(n_estimators=20, random_state=12,max_depth=5)\nrf.fit(X_train,y_train)\nrf_predicted = rf.predict(X_test)\nrf_conf_matrix = confusion_matrix(y_test, rf_predicted)\nrf_acc_score = accuracy_score(y_test, rf_predicted)\nprint(\"confussion matrix\")\nprint(rf_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of Random Forest:\",rf_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,rf_predicted))","70fe9625":"xgb = XGBClassifier(learning_rate=0.01, n_estimators=25, max_depth=15,gamma=0.6, subsample=0.52,colsample_bytree=0.6,seed=27, \n                    reg_lambda=2, booster='dart', colsample_bylevel=0.6, colsample_bynode=0.5)\nxgb.fit(X_train, y_train)\nxgb_predicted = xgb.predict(X_test)\nxgb_conf_matrix = confusion_matrix(y_test, xgb_predicted)\nxgb_acc_score = accuracy_score(y_test, xgb_predicted)\nprint(\"confussion matrix\")\nprint(xgb_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of Extreme Gradient Boost:\",xgb_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,xgb_predicted))","94efc3c5":"knn = KNeighborsClassifier(n_neighbors=200)\nknn.fit(X_train, y_train)\nknn_predicted = knn.predict(X_test)\nknn_conf_matrix = confusion_matrix(y_test, knn_predicted)\nknn_acc_score = accuracy_score(y_test, knn_predicted)\nprint(\"confussion matrix\")\nprint(knn_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of K-NeighborsClassifier:\",knn_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,knn_predicted))","39046976":"dt = DecisionTreeClassifier(criterion = 'entropy',random_state=0,max_depth = 6)\ndt.fit(X_train, y_train)\ndt_predicted = dt.predict(X_test)\ndt_conf_matrix = confusion_matrix(y_test, dt_predicted)\ndt_acc_score = accuracy_score(y_test, dt_predicted)\nprint(\"confussion matrix\")\nprint(dt_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of DecisionTreeClassifier:\",dt_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,dt_predicted))","33a79bfd":"svc =  SVC(kernel='rbf', C=2)\nsvc.fit(X_train, y_train)\nsvc_predicted = svc.predict(X_test)\nsvc_conf_matrix = confusion_matrix(y_test, svc_predicted)\nsvc_acc_score = accuracy_score(y_test, svc_predicted)\nprint(\"confussion matrix\")\nprint(svc_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of Support Vector Classifier:\",svc_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,svc_predicted))","d0083e3b":"sgdc = SGDClassifier(max_iter=5000, random_state=0)\nsgdc.fit(X_train, y_train)\nsgdc_predicted = sgdc.predict(X_test)\nsgdc_conf_matrix = confusion_matrix(y_test, sgdc_predicted)\nsgdc_acc_score = accuracy_score(y_test, sgdc_predicted)\nprint(\"confussion matrix\")\nprint(sgdc_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of : Stochastic Gradient Descent\",sgdc_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,sgdc_predicted))","5cea5da2":"mlpc = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5000, 10), random_state=1)\nmlpc.fit(X_train, y_train)\nmlpc_predicted = mlpc.predict(X_test)\nmlpc_conf_matrix = confusion_matrix(y_test, mlpc_predicted)\nmlpc_acc_score = accuracy_score(y_test, mlpc_predicted)\nprint(\"confussion matrix\")\nprint(mlpc_conf_matrix)\nprint(\"-------------------------------------------\")\nprint(\"Accuracy of : MLP Classifier\",mlpc_acc_score*100,'\\n')\nprint(\"-------------------------------------------\")\nprint(classification_report(y_test,mlpc_predicted))","42a59be3":"model_ev = pd.DataFrame({'Model': ['Logistic Regression','Naive Bayes','Random Forest','Extreme Gradient Boost',\n                    'K-Nearest Neighbour','Decision Tree','Support Vector Machine', 'Stochastic Gradient Descent', 'Neural Nets'], 'Accuracy': [lr_acc_score*100,\n                    nb_acc_score*100,rf_acc_score*100,xgb_acc_score*100,knn_acc_score*100,dt_acc_score*100,svc_acc_score*100, sgdc_acc_score*100, mlpc_acc_score*100]})\nmodel_ev","93f2c5e3":"colors = ['red','green','blue','gold','silver','yellow','orange','magenta', 'cyan']\nplt.figure(figsize=(12,5))\nplt.title(\"barplot Represent Accuracy of different models\")\nplt.xlabel(\"Accuracy %\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Algorithms\")\nplt.bar(model_ev['Model'],model_ev['Accuracy'],color = colors)\nplt.show()","36e8f4c9":"**Data seems to be distributed evenly**","4ed6bb69":"# ML MODELS","bb832b67":"# Data Preprocessing","babd6342":"**To better understand correlation between price range and ram,price range numeric values changed into categorical ones**","b543c432":"Accuracy Ranking\n* Logistic Regression\n* Neural Nets\n* Support Vector Machine","e14e6066":"**ZERO MISSING VALUES **","7dcad7da":"# Thank you for reading\n\n\n# If you enjoyed my work, please consider upvoting\n\n\n# More of my work:\n\n**Stroke EDA and Classification(%94.60 Accuracy)**\n\n- https:\/\/www.kaggle.com\/umutalpaydn\/stroke-eda-and-classification-94-60-accuracy\n\n**Heart-Disease Analysis & Classification**\n\n- https:\/\/www.kaggle.com\/umutalpaydn\/heart-disease-analysis-classification\n\n**VideoGameSales EDA**\n\n- https:\/\/www.kaggle.com\/umutalpaydn\/videogamesales-eda\n\n**Iris Classification KNN & Logistic Regression**\n\n- https:\/\/www.kaggle.com\/umutalpaydn\/iris-classification-knn-logistic-regression\n\n**Pokemon EDA with Seaborn**\n\n- https:\/\/www.kaggle.com\/umutalpaydn\/pokemon-eda-with-seaborn","4504a941":"# Data Analysis","a55d7ed9":"**Pandas profiling generates profile reports from a pandas DataFrame. The pandas df.describe() function is great but a little basic for serious exploratory data analysis. pandas_profiling extends the pandas DataFrame with df.profile_report() for quick data analysis.**","8328f7d1":"# Pandas Profiling","f5812b12":"# Visualizations","a84754f4":"**There are 4 types of price range:**\n\n* Cheap: RAM ranges between 0 to 2000 MB\n* Standart: RAM ranges between 0 to 3000 MB\n* Expensive: RAM ranges between 1000 to 4000 MB\n* Very Expensive: RAM ranges between 2000 to 4000 MB"}}