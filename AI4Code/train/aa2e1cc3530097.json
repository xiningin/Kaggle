{"cell_type":{"61b75e82":"code","9cc67067":"code","eb853a55":"code","f975d81c":"code","b7d56b8e":"code","12d1ebf6":"code","e51ba4a4":"code","b8d54f9b":"markdown"},"source":{"61b75e82":"import os\nimport numpy as np\nimport pandas as pd\nimport pydicom","9cc67067":"# Load the data\nbase_path = \"\/kaggle\/input\/siim-covid19-detection\/\"\nimages_df = pd.read_csv(os.path.join(base_path,\"train_image_level.csv\"))\n\n# Strip the extra text from the image IDs\nimages_df['id'] = images_df['id'].map(lambda x: x.rstrip('_image'))","eb853a55":"# This function finds the first image in a StudyInstanceUID directory and returns its path\ndef get_image_by_study_id(study_id):\n    study_path = base_path + \"train\/\" + study_id + \"\/\"\n    for subdir, dirs, files in os.walk(study_path):\n        for file in files:     \n            image = os.path.join(subdir, file)\n            if os.path.isfile(image):\n                return image\n    return \"none\"","f975d81c":"# Specify the tags we want and make dataframe to hold them\ncolumns = columns=['StudyID',\n                   'FileID',\n                   'TransferSyntaxUID',\n                   'PhotometricInterpretation',\n                   'PatientSex',\n                   'Rows',\n                   'Columns',\n                   'BitsAllocated',\n                   'BitsStored',\n                   'HighBit',\n                   'PixelRepresentation',\n                   'ImagerPixelSpacing']\n\ntags_df = pd.DataFrame(columns=columns)","b7d56b8e":"# Iterate through the images and grab some tags\n\nfor index, row in images_df.iterrows():\n    pt_sex = \"O\"\n    rows = 0\n    cols = 0\n    bits_allocated = 0\n    bits_stored = 0\n    high_bit = 0\n    pixel_representation = -1\n    imager_pixel_spacing = \"0\"\n    \n    # Open a file\n    img_file = get_image_by_study_id(row['StudyInstanceUID'])\n    img = pydicom.dcmread(img_file)\n    \n    # Get the file ID from the filename\n    file = img_file.split(\"\/\")\n    filename = file[-1].split(\".\")\n\n    # TransfersyntaxUID\n    ts_uid = img.file_meta.TransferSyntaxUID\n    \n    # PhotometricInterpretation\n    pm = img.PhotometricInterpretation\n    \n    # Get the following tags using their group\/element hex values. We _could_ use pydicom dot notation here instead.   \n    # PatientSex\n    if (0x0010,0x0040) in img:\n        pt_sex = img[0x0010,0x0040][0]\n        \n    # Rows\n    if (0x0028,0x0010) in img:\n        rows = img[0x0028,0x0010].value\n        \n    # Columns\n    if (0x0028,0x0011) in img:\n        cols = img[0x0028,0x0011].value\n    \n    # BitsAllocated\n    if (0x0028,0x0100) in img:\n        bits_allocated = img[0x0028,0x0100].value\n        \n    # BitsStored\n    if (0x0028,0x0101) in img:\n        bits_stored = img[0x0028,0x0101].value\n        \n    # HighBit\n    if (0x0028,0x0102) in img:\n        high_bit = img[0x0028,0x0102].value\n        \n    # PixelRepresentation\n    if (0x0028,0x0103) in img:\n        pixel_representation = img[0x0028,0x0103].value\n        \n    # ImagerPixelSpacing\n    if (0x0018,0x1164) in img:\n        imager_pixel_spacing = str(img[0x0018,0x1164].value[0]) + \"\/\" + str(img[0x0018,0x1164].value[1])\n        \n    new_row = [[row['StudyInstanceUID'], \n                filename[0], \n                ts_uid, \n                pm, \n                pt_sex, \n                rows, \n                cols, \n                bits_allocated, \n                bits_stored, \n                high_bit, \n                pixel_representation,\n                imager_pixel_spacing]]\n    \n    new_df = pd.DataFrame(new_row, columns=columns)\n    tags_df = tags_df.append(new_df)\n    \ntags_df.head()","12d1ebf6":"# Check the original images dataframe shape\nprint(\"Images DF shape: \" + str(images_df.shape))\n\n# Check the tags dataframe shape\nprint(\"Tags DF shape: \" + str(tags_df.shape))","e51ba4a4":"# Export to CSV\ntags_df.to_csv('dicom_tags.csv',index=False)","b8d54f9b":"### Get un-anonymized DICOM tags from the test set\n\nIn this notebook, we'll ..\n\n- Extract relevant DICOM tags from all the images in the train set that haven't been anon'd.\n- Export them to a csv file with their StudyID and ImageID.\n\nI used the train csv file to get a single image from each study, rather than iterating through the directories and picking up a lot of dupes.\n- It took about 17 min on GPU to go through the train set.\n- I created a dataset if you don't want to export the tags yourself -> https:\/\/www.kaggle.com\/davidbroberts\/siimfisabiorsna-covid19-dicom-tags\n- This could be tweaked and run on the test set by iterating over the directory since there isn't a df for test.\n\nHere's the tags we extract:\n- TransferSyntaxUID\n- PhotometricInterpretation\n- PatientSex\n- Rows\n- Columns\n- BitsAllocated\n- BitsStored\n- HighBit\n- PixelRepresentation\n- ImagerPixelSpacing"}}