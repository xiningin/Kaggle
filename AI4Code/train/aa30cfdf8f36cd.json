{"cell_type":{"d3026b5d":"code","5ab6cc02":"code","24d51ca5":"code","4fc92fb4":"code","5cb57fa6":"code","a46dfdeb":"code","87c361a6":"code","ea0e7a80":"code","928d19cc":"code","6c656cc1":"code","0c65c203":"code","cb33b748":"code","7688f118":"code","6b0a14b8":"code","cc445730":"code","2f4b91dd":"code","20972682":"code","21ac02c5":"code","01462324":"code","56447d68":"code","66ecd5b9":"code","395189c1":"code","d8adfc44":"code","f182b1ca":"code","edaa2923":"code","7fb7b182":"code","c80f505d":"code","6638581a":"code","3bd297e0":"code","4c1b653a":"code","79b99ef8":"code","953fc73d":"code","07038d5a":"code","1e9f9d0d":"code","9426c47b":"code","791b438a":"code","6e3278d2":"code","3358d119":"code","83562bc6":"code","455811cb":"code","e0283533":"code","bd7db939":"code","98f8b3e8":"code","37fbac43":"code","7efe1d3a":"code","86cfbf3d":"code","3913728a":"code","36cd261c":"code","faa5584a":"code","8b5fb737":"code","32347455":"code","9c0c5b3c":"code","ebe0eb0b":"code","cc27393e":"code","cc1133a4":"code","5ae90a3f":"code","2e4cd106":"code","bd295398":"markdown","36a54d0a":"markdown","831648cc":"markdown","4b94c1f7":"markdown","a431d3ac":"markdown","567d632c":"markdown","31e23509":"markdown","8b71abe7":"markdown","9eb87608":"markdown","34ae80bd":"markdown","467b6a0a":"markdown","9e79d7ad":"markdown","8d3b75d7":"markdown","b57f0e16":"markdown","567ccc1a":"markdown","0e3742c8":"markdown","d30aae41":"markdown","1b4105a5":"markdown","77134e67":"markdown"},"source":{"d3026b5d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport datetime \nimport time\n\n%matplotlib inline\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport matplotlib.dates as mdates","5ab6cc02":"events_df = pd.read_csv('..\/input\/ecommerce-dataset\/events.csv')\nevents_df.head()","24d51ca5":"events_df.timestamp = events_df.timestamp.apply(lambda x: datetime.datetime.fromtimestamp(x\/\/1000.0) )","4fc92fb4":"events_df.head()","5cb57fa6":"events_df.info()","a46dfdeb":"events_df.describe()","87c361a6":"events_df.event.value_counts()","ea0e7a80":"len(events_df.visitorid.unique())","928d19cc":"len(events_df.transactionid.unique())","6c656cc1":"len(events_df.itemid.unique())","0c65c203":"\nitem_1_df = pd.read_csv('..\/input\/ecommerce-dataset\/item_properties_part1.csv')\nitem_2_df = pd.read_csv('..\/input\/ecommerce-dataset\/item_properties_part2.csv')\nitems_df = pd.concat([item_1_df,item_2_df])\nitems_df.head()","cb33b748":"items_df.timestamp = items_df.timestamp.apply(lambda x: datetime.datetime.fromtimestamp(x\/\/1000.0) )\nitems_df.head()","7688f118":"items_df.info()","6b0a14b8":"items_df.describe()","cc445730":"len(items_df.itemid.unique())","2f4b91dd":"max(items_df.itemid)","20972682":"items_df.property.value_counts()","21ac02c5":"cat_df = pd.read_csv(\"..\/input\/ecommerce-dataset\/category_tree.csv\")\ncat_df.head()","01462324":"cat_df.describe()","56447d68":"cat_df.info()","66ecd5b9":"temp = cat_df.groupby('parentid')['categoryid'].count().sort_values(ascending=False).head(10).to_frame().reset_index()\ntemp['parentid'] = temp.parentid.astype('Int64').astype('str')\ntemp.head()","395189c1":"#color = sns.color_palette(\"crest\")\nax = sns.barplot(x='parentid', y='categoryid', data=temp, order=temp.parentid)\nax.set(xlabel='Category Id', ylabel='Child Categories', title='Top 10 Categories by Number of Children')","d8adfc44":"#Top categories having items\ntemp = items_df[items_df.property == 'categoryid'].groupby('value').itemid.nunique().sort_values(ascending=False).to_frame().reset_index().head(10)\ntemp.head()","f182b1ca":"ax = sns.barplot(x='value', y='itemid', data=temp, order=temp.value)\nax.set(xlabel='Category Id', ylabel='Items in Category', title='Top 10 Categories by Number of Items')","edaa2923":"ax = sns.countplot(x='event', data=events_df)\nax.set(xlabel = '', ylabel='Number of Events', title='Total Events in each Event Category')","7fb7b182":"#Convert date to string\nevents_df['date'] = [d.date().isoformat() for d in events_df.timestamp]\n\n# Count of visitors each day\ntemp = events_df.groupby('date').visitorid.count().to_frame().reset_index()\ntemp['date'] = pd.to_datetime(temp['date'])\ntemp.head()","c80f505d":"ax = sns.lineplot(x='date', y='visitorid', data=temp)\nax.set(xlabel=\"\", \n       ylabel=\"No. of Visitors\",\n       title=\"Visitors Over Time\")\nax.set_xlim(temp.iloc[0].date, temp.iloc[-1].date)\nax.tick_params(axis=\"x\", rotation=45)","6638581a":"temp = events_df.groupby(['date','event']).visitorid.count().to_frame().reset_index()\n#\ntemp['date'] = pd.to_datetime(temp['date'])\ntemp.head()","3bd297e0":"ax = sns.lineplot(x='date', y='visitorid', hue='event', data=temp)\nax.set(xlabel=\"\", \n       ylabel=\"No. of Visitors\",\n       title=\"Visitors Over Time by Events\")\nax.set_xlim(temp.iloc[0].date, temp.iloc[-1].date)\nax.tick_params(axis=\"x\", rotation=45)","4c1b653a":"# Only visitors doing addtocart and transactions \ntemp = events_df[events_df.event != 'view'].groupby(['date','event']).visitorid.count().to_frame().reset_index()\ntemp['date'] = pd.to_datetime(temp['date'])\ntemp.head()","79b99ef8":"ax = sns.lineplot(x='date', y='visitorid', hue='event', data=temp)\nax.set(xlabel=\"\", \n       ylabel=\"No. of Visitors\",\n       title=\"Visitors Over Time by Events\")\nax.set_xlim(temp.iloc[0].date, temp.iloc[-1].date)\nax.tick_params(axis=\"x\", rotation=45)","953fc73d":"#piviting events\ntemp_pivot = temp.pivot(index='date', columns='event', values='visitorid').reset_index()\ntemp_pivot.head()","07038d5a":"ax = sns.scatterplot(x='addtocart', y='transaction', data=temp_pivot)\nax.set(xlabel=\"Add to Cart\", \n       ylabel=\"Transaction\",\n       title=\"Correlation of User Activity by Number of Visitors\")\nax.tick_params(axis=\"x\", rotation=45)","1e9f9d0d":"temp = events_df.groupby(['date','event']).visitorid.count().to_frame().reset_index()\n#\ntemp['date'] = pd.to_datetime(temp['date'])\n#temp.head()\ntemp_pivot = temp.pivot(index='date', columns='event', values='visitorid').reset_index()\ntemp_pivot.head()","9426c47b":"sns.pairplot(temp_pivot)","791b438a":"corr = temp_pivot.corr()\ncorr","6e3278d2":"sns.heatmap(corr)","3358d119":"from mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\n","83562bc6":"# Firstly let's create an array that lists visitors who made a purchase\ncustomer_purchased = events_df[events_df.transactionid.notnull()].visitorid.unique()\n    \npurchased_items = []\nbuyer = []\n    \n# Create another list that contains all their purchases \nfor customer in customer_purchased:\n\n    #Generate a Pandas series type object containing all the visitor's purchases and put them in the list\n    #buyer.append(customer)\n    purchased_items.append(list(events_df.loc[(events_df.visitorid == customer) & (events_df.transactionid.notnull())].itemid.values)) ","455811cb":"# Encoding Transactions and Items to Crosstab\nte = TransactionEncoder()\nte_ary = te.fit(purchased_items).transform(purchased_items)\ndf = pd.DataFrame(te_ary, columns=te.columns_)\ndf\ndf.shape","e0283533":"frq_items = apriori(df, min_support=0.001, use_colnames=True)\nfrq_items.shape","bd7db939":"frq_items.sort_values(['support'], ascending=False)","98f8b3e8":"temp = frq_items.sort_values(['support'], ascending=False)\nax = sns.barplot(x='itemsets', y='support', data=temp.head(10))\nax.set(xlabel=\"\", \n       ylabel=\"Support\",\n       title=\"Itemsets by Support\")\nax.tick_params(axis=\"x\", rotation=45)","37fbac43":"frq_items_indexed = frq_items.set_index('itemsets')\nfrq_items_indexed.plot(kind='bar')","7efe1d3a":"rules_ap = association_rules(frq_items, metric =\"confidence\", min_threshold = 0.01)\nrules_ap","86cfbf3d":"# Plotting support vs. confidence\n\nrules_ap.plot.scatter(x='support',y='confidence')","3913728a":"rules_lift = association_rules(frq_items, metric=\"lift\", min_threshold=2)\nrules_lift = rules_ap.copy()\nrules_lift","36cd261c":"from mlxtend.frequent_patterns import fpgrowth\n\nfrq_items_fp=fpgrowth(df, min_support=0.001, use_colnames=True)\n\nprint(frq_items_fp)","faa5584a":"rules_fp = association_rules(frq_items_fp, metric=\"confidence\", min_threshold=0.01)\nrules_fp","8b5fb737":"!pip install --index-url https:\/\/test.pypi.org\/simple\/ PyARMViz","32347455":"from PyARMViz import datasets\nfrom PyARMViz import PyARMViz\nfrom PyARMViz import Rule","9c0c5b3c":"rules = rules_lift\nrules","ebe0eb0b":"def convert_rules_df_viz_rules(rules_df, num_trans):\n    \"\"\"\n    Covert from the rules data frame from association rules to \n    rules list that can be visualized with PyARMViz package\n    \n    Parameters\n    ----------\n    \n    rules_df: DataFrame\n        The rules dataframe from association_rules method\n    num_trans: int\n        Number of transactions used to build association rules\n    \"\"\"\n    rules_list = []\n    rule_dict = {'lhs':(), 'rhs':(), 'count_full':(), 'count_lhs':(), 'count_rhs':(), 'num_transactions':()}\n    for index, row in rules.iterrows():\n        antec = tuple(row['antecedents'])\n        conseq = list(row['consequents'])\n        count_full = row['support']*num_trans\n        count_lhs = row['antecedent support']*num_trans\n        count_rhs = row['consequent support']*num_trans\n        rule_dict['lhs']= antec\n        rule_dict['rhs']= conseq\n        rule_dict['count_full']= count_full\n        rule_dict['count_lhs']= count_lhs\n        rule_dict['count_rhs']= count_rhs\n        rule_dict['num_transactions'] = num_trans\n        rules_list.append(Rule.generate_rule_from_dict(rule_dict))\n\n    return rules_list","cc27393e":"# Number of transactions from the original dataset\nnum_trans = rules_fp.shape[0] \nrules_list = convert_rules_df_viz_rules(rules, num_trans)","cc1133a4":"rules_list","5ae90a3f":"fig = PyARMViz.generate_rule_strength_plot(rules_list, allow_compound_flag=True)","2e4cd106":"fig = PyARMViz.generate_rule_start_end_plot(rules_list)","bd295398":"We can see that not all category have parent, 25 categories to be true. Hence, these might be parent. So we do not have a single parent in the data.","36a54d0a":"## Data Visualization","831648cc":"# EDA\nThe data set has 3 different files and we will start analysing each of them\n\n## Events CSV\n\nThis file contains events data, events that are performed on the site by users.","4b94c1f7":"### Transactions","a431d3ac":"## Frequent Patterns","567d632c":"## Visualizing Rules using PyARMViz","31e23509":"## Summary\n- ","8b71abe7":"## Items CSV","9eb87608":"## Category CSV","34ae80bd":"We can see that transaction id has lot of NULLs. These events live viewing an item or adding to cart.\n\n### Event","467b6a0a":"Out of 22,457 transactions, 17,673 transactions are unique, that means that multiple items are transacted in one transaction.\n\n### Items","9e79d7ad":"# Association of Items","8d3b75d7":"We can see that since association is low, hence confidence and lift both give same result.","b57f0e16":"This notebook shows the basic EDA and Visualizations on the dataset.\n\nThank you!","567ccc1a":"From the two above we see that both algorithms found identical association rules with same coefficients, just presented in a different order.","0e3742c8":"### Unique Visitors","d30aae41":"This is not the number of items as some items might had got deleted.","1b4105a5":"Out of 417,053 , only 235,061 items had event on them.","77134e67":"Numer of transactions is 11,719 and items is 12025."}}