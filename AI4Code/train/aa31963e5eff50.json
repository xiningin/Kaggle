{"cell_type":{"7911537e":"code","50728e92":"code","74486cc6":"code","4edabc74":"code","31e13774":"code","ccc4759b":"code","c00c7372":"code","baf478ec":"code","8eb31f18":"code","b75e282a":"code","0a43bd5a":"code","213f6221":"code","d550a3f5":"code","a731953d":"code","e058af0a":"code","13169529":"code","e0772de3":"code","3e373121":"code","4ab1fe54":"code","bccfc9ca":"code","9b677123":"code","2bb6a78b":"code","17ccd8bb":"code","b7d7dc64":"code","e90e8633":"code","398bf13a":"code","8daee0ac":"code","f592e8d7":"code","fab7981d":"code","f57f3b8e":"code","4d51043e":"code","acd74710":"code","f574673d":"code","2579e48e":"code","3a9f71d3":"code","3ce2c2bb":"code","08d67046":"code","d635bafe":"code","0491ec54":"code","e99d8f58":"code","b0f5e04c":"code","ca90a5d0":"code","f42d51f6":"code","8c94445c":"code","7f58e6e4":"code","116a70a1":"code","1aef7e18":"code","20b4ca5f":"code","823c13f2":"code","7dd4dd2b":"code","d0c34475":"code","acb57413":"code","419bb956":"code","d4d1df72":"code","29c193e3":"code","5c884e47":"code","2b0bb9a7":"code","040c086c":"code","e3b131b2":"code","953afcd2":"code","609187c2":"code","55d0cc04":"code","cb1e93b8":"code","50e70abb":"code","c7fc8d77":"code","b2549ab0":"code","e9e06c29":"code","99d3b22d":"code","d1cc3bf9":"code","afd9acd4":"code","a5116702":"markdown","202ff846":"markdown","faea95c6":"markdown","c98efbe2":"markdown","472c3e7d":"markdown","90bc0078":"markdown","b247244a":"markdown","8be7836b":"markdown","da9c8a80":"markdown","f5b30d81":"markdown","2d5fb22f":"markdown","056cb8f6":"markdown","debc32f2":"markdown","8264a702":"markdown","721c8fa2":"markdown","a1a71fc6":"markdown","57135f2b":"markdown","2904a8d4":"markdown","a76a49a7":"markdown","27921bda":"markdown","664bf144":"markdown","6a747be4":"markdown","5811ae41":"markdown","dc70899a":"markdown","41e6f9ed":"markdown","fcc15228":"markdown","b4cb9332":"markdown","c81275c3":"markdown","12e160b1":"markdown"},"source":{"7911537e":"import numpy as np \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport math\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","50728e92":"df_train = pd.read_csv(\"\/kaggle\/input\/GiveMeSomeCredit\/cs-training.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/GiveMeSomeCredit\/cs-test.csv\")\ndf_train.head()","74486cc6":"df_train.info()","4edabc74":"df_train.describe()","31e13774":"sns.countplot(x=\"SeriousDlqin2yrs\", data=df_train)\nprint(\"Default Rate: {}\".format(df_train[\"SeriousDlqin2yrs\"].sum() \/ len(df_train)))","ccc4759b":"null_val_sums = df_train.isnull().sum()\npd.DataFrame({\"Column\": null_val_sums.index, \"Number of Null Values\": null_val_sums.values,\n             \"Proportion\": null_val_sums.values \/ len(df_train) })","c00c7372":"df_train[\"RevolvingUtilizationOfUnsecuredLines\"].describe()","baf478ec":"sns.distplot(df_train[\"RevolvingUtilizationOfUnsecuredLines\"])","8eb31f18":"default_prop = []\nfor i in range(int(df_train[\"RevolvingUtilizationOfUnsecuredLines\"].max())):\n    temp_ = df_train.loc[df_train[\"RevolvingUtilizationOfUnsecuredLines\"] >= i]\n    default_prop.append([i, temp_[\"SeriousDlqin2yrs\"].mean()])\ndefault_prop","b75e282a":"sns.lineplot(x=[i[0] for i in default_prop], y=[i[1] for i in default_prop])\nplt.title(\"Proportion of Defaulters As Minimum RUUL Increases\")","0a43bd5a":"print(\"Proportion of Defaulters with Total Amount of Money Owed Not Exceeding Total Credit Limit: {}\"\\\n     .format(df_train.loc[(df_train[\"RevolvingUtilizationOfUnsecuredLines\"] >= 0) & (df_train[\"RevolvingUtilizationOfUnsecuredLines\"] <= 1)][\"SeriousDlqin2yrs\"].mean()))","213f6221":"print(\"Proportion of Defaulters with Total Amount of Money Owed Not Exceeding or Equal to 13 times of Total Credit Limit:\\n{}\"\\\n     .format(df_train.loc[(df_train[\"RevolvingUtilizationOfUnsecuredLines\"] >= 0) & (df_train[\"RevolvingUtilizationOfUnsecuredLines\"] < 13)][\"SeriousDlqin2yrs\"].mean()))","d550a3f5":"df_train[\"age\"].describe()","a731953d":"sns.distplot(df_train[\"age\"])","e058af0a":"sns.distplot(df_train.loc[df_train[\"SeriousDlqin2yrs\"] == 0][\"age\"])","13169529":"sns.distplot(df_train.loc[df_train[\"SeriousDlqin2yrs\"] == 1][\"age\"])","e0772de3":"late_pay_cols = [\"NumberOfTimes90DaysLate\", \"NumberOfTime60-89DaysPastDueNotWorse\",\n                \"NumberOfTime30-59DaysPastDueNotWorse\"]\ndf_train[\"NumberOfTimes90DaysLate\"].value_counts().sort_index()","3e373121":"df_train[\"NumberOfTime60-89DaysPastDueNotWorse\"].value_counts().sort_index()","4ab1fe54":"df_train[\"NumberOfTime30-59DaysPastDueNotWorse\"].value_counts().sort_index()","bccfc9ca":"df_train.loc[df_train[\"NumberOfTimes90DaysLate\"] > 17][late_pay_cols].describe()","9b677123":"distinct_triples_counts = dict()\nfor arr in df_train.loc[df_train[\"NumberOfTimes90DaysLate\"] > 17][late_pay_cols].values:\n    triple = \",\".join(list(map(str, arr)))\n    if triple not in distinct_triples_counts:\n        distinct_triples_counts[triple] = 0\n    else:\n        distinct_triples_counts[triple] += 1\ndistinct_triples_counts","2bb6a78b":"df_train[\"DebtRatio\"].describe()","17ccd8bb":"df_train[\"DebtRatio\"].quantile(0.95)","b7d7dc64":"df_train.loc[df_train[\"DebtRatio\"] > df_train[\"DebtRatio\"].quantile(0.95)][[\"DebtRatio\", \"MonthlyIncome\", \"SeriousDlqin2yrs\"]].describe()","e90e8633":"len(df_train[(df_train[\"DebtRatio\"] > df_train[\"DebtRatio\"].quantile(0.95)) & (df_train['SeriousDlqin2yrs'] == df_train['MonthlyIncome'])])","398bf13a":"df_train.loc[df_train[\"DebtRatio\"] > df_train[\"DebtRatio\"].quantile(0.95)][\"MonthlyIncome\"].value_counts()","8daee0ac":"print(\"Number of people who owe around 2449 or more times what they own and have same values for MonthlyIncome and SeriousDlqin2yrs: {}\"\\\n     .format(len(df_train.loc[(df_train[\"DebtRatio\"] > df_train[\"DebtRatio\"].quantile(0.95)) & (df_train[\"MonthlyIncome\"] == df_train[\"SeriousDlqin2yrs\"])])))","f592e8d7":"df_train[\"DebtRatio\"].quantile(0.975)","fab7981d":"df_train.loc[df_train[\"DebtRatio\"] > df_train[\"DebtRatio\"].quantile(0.975)][[\"DebtRatio\", \"MonthlyIncome\", \"SeriousDlqin2yrs\"]].describe()","f57f3b8e":"len(df_train[(df_train[\"DebtRatio\"] > df_train[\"DebtRatio\"].quantile(0.975)) & (df_train['SeriousDlqin2yrs'] == df_train['MonthlyIncome'])])","4d51043e":"df_train.loc[df_train[\"DebtRatio\"] > df_train[\"DebtRatio\"].quantile(0.975)][\"MonthlyIncome\"].value_counts()","acd74710":"print(\"Number of people who owe around 3490 or more times what they own and have same values for MonthlyIncome and SeriousDlqin2yrs: {}\"\\\n     .format(len(df_train.loc[(df_train[\"DebtRatio\"] > df_train[\"DebtRatio\"].quantile(0.975)) & (df_train[\"MonthlyIncome\"] == df_train[\"SeriousDlqin2yrs\"])])))","f574673d":"sns.distplot(df_train[\"MonthlyIncome\"].dropna())","2579e48e":"df_train[\"MonthlyIncome\"].describe()","3a9f71d3":"sns.distplot(df_train.loc[df_train[\"DebtRatio\"] <= df_train[\"DebtRatio\"].quantile(0.975)][\"MonthlyIncome\"].dropna())","3ce2c2bb":"df_train[\"NumberOfOpenCreditLinesAndLoans\"].describe()","08d67046":"sns.distplot(df_train[\"NumberOfOpenCreditLinesAndLoans\"])","d635bafe":"df_train[\"NumberRealEstateLoansOrLines\"].describe()","0491ec54":"sns.countplot(x=\"NumberRealEstateLoansOrLines\", data=df_train.loc[df_train[\"NumberRealEstateLoansOrLines\"] <= 10])","e99d8f58":"df_train.loc[df_train[\"NumberRealEstateLoansOrLines\"] > 13][\"SeriousDlqin2yrs\"].describe()","b0f5e04c":"df_train[\"NumberOfDependents\"].describe()","ca90a5d0":"df_train[\"NumberOfDependents\"].value_counts()","f42d51f6":"df_train.loc[df_train[\"NumberOfDependents\"] <= 10][\"SeriousDlqin2yrs\"].describe()","8c94445c":"sns.countplot(x=\"NumberOfDependents\", data=df_train.loc[df_train[\"NumberOfDependents\"] <= 10])","7f58e6e4":"df_train = df_train.fillna(df_train.median())\nprint(df_train.isnull().sum())","116a70a1":"\nage_bins = [-math.inf, 25, 40, 50, 60, 70, math.inf]\ndf_train['bin_age'] = pd.cut(df_train['age'],bins=age_bins).astype(str)\ndependent_bin = [-math.inf,2,4,6,8,10,math.inf]\ndf_train['bin_NumberOfDependents'] = pd.cut(df_train['NumberOfDependents'],bins=dependent_bin).astype(str)\ndpd_bins = [-math.inf,1,2,3,4,5,6,7,8,9,math.inf]\ndf_train['bin_NumberOfTimes90DaysLate'] = pd.cut(df_train['NumberOfTimes90DaysLate'],bins=dpd_bins)\ndf_train['bin_NumberOfTime30-59DaysPastDueNotWorse'] = pd.cut(df_train['NumberOfTime30-59DaysPastDueNotWorse'], bins=dpd_bins)\ndf_train['bin_NumberOfTime60-89DaysPastDueNotWorse'] = pd.cut(df_train['NumberOfTime60-89DaysPastDueNotWorse'], bins=dpd_bins)\n\n\ndf_train['bin_RevolvingUtilizationOfUnsecuredLines'] = pd.qcut(df_train['RevolvingUtilizationOfUnsecuredLines'],q=5,duplicates='drop').astype(str)\ndf_train['bin_DebtRatio'] = pd.qcut(df_train['DebtRatio'],q=5,duplicates='drop').astype(str)\ndf_train['bin_MonthlyIncome'] = pd.qcut(df_train['MonthlyIncome'],q=5,duplicates='drop').astype(str)\ndf_train['bin_NumberOfOpenCreditLinesAndLoans'] = pd.qcut(df_train['NumberOfOpenCreditLinesAndLoans'],q=5,duplicates='drop').astype(str)\ndf_train['bin_NumberRealEstateLoansOrLines'] = pd.qcut(df_train['NumberRealEstateLoansOrLines'],q=5,duplicates='drop').astype(str)\n","1aef7e18":"bin_cols = [c for c in df_train.columns.values if c.startswith('bin_')]\n","20b4ca5f":"def cal_IV(df, feature, target):\n    lst = []\n    cols=['Variable', 'Value', 'All', 'Bad']\n    for i in range(df[feature].nunique()):\n        \n        val = list(df[feature].unique())[i]\n        lst.append([feature, val, df[df[feature] == val].count()[feature], df[(df[feature] == val) & (df[target] == 1)].count()[feature]])\n#     print(lst)\n    data = pd.DataFrame(lst, columns=cols)\n    data = data[data['Bad'] > 0]\n\n    data['Share'] = data['All'] \/ data['All'].sum()\n    data['Bad Rate'] = data['Bad'] \/ data['All']\n    data['Distribution Good'] = (data['All'] - data['Bad']) \/ (data['All'].sum() - data['Bad'].sum())\n    data['Distribution Bad'] = data['Bad'] \/ data['Bad'].sum()\n    data['WoE'] = np.log(data['Distribution Bad'] \/ data['Distribution Good'])\n    data['IV'] = (data['WoE'] * (data['Distribution Bad'] - data['Distribution Good'])).sum()\n\n    data = data.sort_values(by=['Variable', 'Value'], ascending=True)\n\n    return data['IV'].values[0]","823c13f2":"for f in bin_cols:\n    print(f)\n    print(cal_IV(df_train,f,'SeriousDlqin2yrs'))","7dd4dd2b":"def cal_WOE(df,features,target):\n    df_new = df\n    for f in features:\n        df_woe = df_new.groupby(f).agg({target:['sum','count']})\n        df_woe.columns = list(map(''.join, df_woe.columns.values))\n        df_woe = df_woe.reset_index()\n        df_woe = df_woe.rename(columns = {target+'sum':'bad'})\n        df_woe = df_woe.rename(columns = {target+'count':'all'})\n        df_woe['good'] = df_woe['all']-df_woe['bad']\n        df_woe = df_woe[[f,'good','bad']]\n        df_woe['bad_rate'] = df_woe['bad'].mask(df_woe['bad']==0, 1)\/df_woe['bad'].sum() # mask 0 to 1 to avoid log(0)\n        df_woe['good_rate'] = df_woe['good']\/df_woe['good'].sum()\n        \n        df_woe['woe'] = np.log(df_woe['bad_rate'].divide(df_woe['good_rate'],fill_value=1))\n        df_woe.columns = [c if c==f else c+'_'+f for c in list(df_woe.columns.values)]\n        df_new = df_new.merge(df_woe,on=f,how='left')\n    return df_new\n        \n\n    ","d0c34475":"# \u6211\u4eec\u6839\u636eIV\u9009\u51fa\u6765\u7684\u7279\u5f81\nfeature_cols = ['RevolvingUtilizationOfUnsecuredLines','NumberOfTime30-59DaysPastDueNotWorse','age','NumberOfTimes90DaysLate','NumberOfTime60-89DaysPastDueNotWorse']\nbin_cols = ['bin_RevolvingUtilizationOfUnsecuredLines','bin_NumberOfTime30-59DaysPastDueNotWorse','bin_age','bin_NumberOfTimes90DaysLate','bin_NumberOfTime60-89DaysPastDueNotWorse']\ndf_woe = cal_WOE(df_train,bin_cols,'SeriousDlqin2yrs')\nwoe_cols = [c for c in list(df_woe.columns.values) if 'woe' in c]\ndf_woe[woe_cols]\n","acb57413":"# df2 = df_woe[['woe_bin_age','bin_age']].drop_duplicates()\n# df2.head(10)","419bb956":"df_bin_to_woe = pd.DataFrame(columns = ['features','bin','woe'])\nfor f in feature_cols:\n    b = 'bin_'+f\n    w = 'woe_bin_'+f\n    df = df_woe[[w,b]].drop_duplicates()\n    df.columns = ['woe','bin']\n    df['features'] = f\n    df=df[['features','bin','woe']]\n    df_bin_to_woe = pd.concat([df_bin_to_woe,df])\ndf_bin_to_woe","d4d1df72":"X_train, X_test, y_train, y_test = train_test_split(df_woe[woe_cols], df_woe['SeriousDlqin2yrs'], test_size=0.2, random_state=42)","29c193e3":"print('bad rate is: ',y_train.mean())","5c884e47":"#\u5c1d\u8bd5\u8fc7SMOTE\u53bb\u8fc7\u91c7\u6837\uff0c\u4f46\u6ca1\u5565\u6548\u679c\uff0c\u5c31\u6ce8\u91ca\u6389\u4e86\n# from imblearn.over_sampling import SMOTE \n# sm = SMOTE(random_state=42)\n# X_train, y_train = sm.fit_resample(X_train, y_train)\n# print('bad rate is: ',y_train.mean())","2b0bb9a7":"X_train.describe()","040c086c":"model = LogisticRegression(random_state=42).fit(X_train,y_train)","e3b131b2":"#\u5728\u9a8c\u8bc1\u96c6\u4e0a\u770b\u6027\u80fd\nmodel.score(X_test,y_test)","953afcd2":"import sklearn.metrics as metrics\n# calculate the fpr and tpr for all thresholds of the classification\nprobs = model.predict_proba(X_test)\n\npreds = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, preds)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nimport matplotlib.pyplot as plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","609187c2":"#\u6df7\u6dc6\u77e9\u9635\ny_pred = model.predict(X_test)\nmetrics.confusion_matrix(y_test,y_pred)","55d0cc04":"model.coef_","cb1e93b8":"A = 650\nB =72.13","50e70abb":"def generate_scorecard(model_coef,binning_df,features,B):\n    lst = []\n    cols = ['Variable','Binning','Score']\n    coef = model_coef[0]\n    for i in range(len(features)):\n        f = features[i]\n        df = binning_df[binning_df['features']==f]\n        for index,row in df.iterrows():\n            lst.append([f,row['bin'],int(round(-coef[i]*row['woe']*B))])\n    data = pd.DataFrame(lst, columns=cols)\n    return data\n    ","c7fc8d77":"score_card = generate_scorecard(model.coef_,df_bin_to_woe,feature_cols,B)\nscore_card\n    ","b2549ab0":"sort_scorecard = score_card.groupby('Variable').apply(lambda x: x.sort_values('Score', ascending=False))\nsort_scorecard","e9e06c29":"# \u672c\u6bb5\u4ee3\u7801\u7684\u76ee\u7684\u662f\u628a\u8f93\u5165\u6570\u636e\u6620\u5c04\u5230\u5206\u7bb1\uff0c\u5e76\u4e14\u9009\u53d6\u76f8\u5e94\u7684\u5206\u503c\u6765\u8ba1\u7b97\u6700\u540e\u7684\u4fe1\u7528\u8bc4\u5206\ndef str_to_int(s):\n    if s == '-inf':\n        return -999999999.0\n    elif s=='inf':\n        return 999999999.0\n    else:\n        return float(s)\n    \ndef map_value_to_bin(feature_value,feature_to_bin):\n    for idx, row in feature_to_bin.iterrows():\n        bins = str(row['Binning'])\n        left_open = bins[0]==\"(\"\n        right_open = bins[-1]==\")\"\n        binnings = bins[1:-1].split(',')\n        in_range = True\n        # check left bound\n        if left_open:\n            if feature_value<= str_to_int(binnings[0]):\n                in_range = False   \n        else:\n            if feature_value< str_to_int(binnings[0]):\n                in_range = False   \n        #check right bound\n        if right_open:\n            if feature_value>= str_to_int(binnings[1]):\n                in_range = False \n        else:\n            if feature_value> str_to_int(binnings[1]):\n                in_range = False   \n        if in_range:\n            return row['Binning']\n    return null\n\ndef map_to_score(df,score_card):\n    scored_columns = list(score_card['Variable'].unique())\n    score = 0\n    for col in scored_columns:\n        feature_to_bin = score_card[score_card['Variable']==col]\n        feature_value = df[col]\n        selected_bin = map_value_to_bin(feature_value,feature_to_bin)\n        selected_record_in_scorecard = feature_to_bin[feature_to_bin['Binning'] == selected_bin]\n        score += selected_record_in_scorecard['Score'].iloc[0]\n    return score  \n\ndef calculate_score_with_card(df,score_card,A):\n    df['score'] = df.apply(map_to_score,args=(score_card,),axis=1)\n    df['score'] = df['score']+A\n    df['score'] = df['score'].astype(int)\n    return df\n        \n        \n\n    ","99d3b22d":"good_sample = df_train[df_train['SeriousDlqin2yrs']==0].sample(5, random_state=1)\ngood_sample = good_sample[feature_cols]\nbad_sample = df_train[df_train['SeriousDlqin2yrs']==1].sample(5, random_state=1)\nbad_sample = bad_sample[feature_cols]\n","d1cc3bf9":"calculate_score_with_card(good_sample,score_card,A)","afd9acd4":"calculate_score_with_card(bad_sample,score_card,A)","a5116702":"# Exploratory Data Analysis - Preparing for one of the top performing models\n\u672ckernel EDA\u90e8\u5206\u6765\u6e90\u4e8e https:\/\/www.kaggle.com\/nicholasgah\/eda-credit-scoring-top-100-on-leaderboard\n","202ff846":"### Null Values and Proportions","faea95c6":"\u672ckernel\u662f\u6587\u7ae0\u7684\u4f8b\u5b50\uff0c\u76f8\u5173\u7406\u8bba\u90e8\u53c2\u8003\u77e5\u4e4e\u4e13\u680f\u6587\u7ae0https:\/\/zhuanlan.zhihu.com\/p\/148102950\n\n## Table of Contents\n\n1. [\u5bfc\u5165\u5305](#1)\n2. [\u5bfc\u5165\u6570\u636e](#2)\n3. [EDA](#3)\n4. [\u6570\u636e\u5206\u7bb1](#4)\n5. [\u7279\u5f81\u7b5b\u9009](#5)\n6. [\u903b\u8f91\u56de\u5f52\u5efa\u6a21](#6)\n7. [\u8bc4\u5206\u5361\u8f6c\u6362](#7)\n8. [\u603b\u7ed3](#8)","c98efbe2":"### DebtRatio","472c3e7d":"\u56e0\u4e3a\u6bd4\u8d5b\u662f\u7528AUC\u4f5c\u4e3a\u6807\u51c6\uff0c\u6240\u4ee5\u6211\u4e5f\u770b\u770b\u6211\u7684\u6a21\u578bAUC\u591a\u5c11","90bc0078":"\u53ef\u4ee5\u770b\u5230\u57fa\u672c\u6bcf\u9879\u90fd\u662f\u51cf\u5206\u9879\u3002\u4e3a\u4e86\u65b9\u4fbf\u67e5\u770b\uff0c\u8fd9\u91cc\u518d\u5206\u7ec4\u6392\u5e8f\u4e0b\uff0c\u6bcf\u7ec4\u6309\u7167\u5206\u503c\u7684\u9ad8\u4f4e","b247244a":"\u53ef\u4ee5\u770b\u5230\uff0c\u597d\u7684\u6837\u672c\u5206\u6570\u8bc4\u5206\u90fd\u6bd4\u574f\u6837\u672c\u5206\u6570\u4f4e\uff0c\u8bf4\u660e\u4e86\u8bc4\u5206\u5361\u7684\u6709\u6548\u6027\u3002\u4f8b\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u597d\u7684\u6837\u672c\u5206\u6570\u90fd\u662f500\u4ee5\u4e0a\uff0c\u574f\u7684\u6837\u672c\u90fd\u5728500\u4ee5\u4e0b\u3002\u867d\u7136\u6362\u4e9b\u6837\u672c\u4f1a\u53d1\u73b0\u672a\u5fc5\u5b8c\u6210\u51c6\u786e\uff0c\u4f46\u603b\u4f53\u6765\u8bf4\u80fd\u8bc6\u522b\u8f83\u591a\u7684\u574f\u5ba2\u6237\u3002","8be7836b":"## \u8bc4\u5206\u5361\u8f6c\u6362 <a class=\"anchor\" id=\"7\"><\/a>","da9c8a80":"### RevolvingUtilizationOfUnsecuredLines","f5b30d81":"### NumberOfDependents","2d5fb22f":"## \u5bfc\u5165\u6570\u636e<a class=\"anchor\" id=\"2\"><\/a>","056cb8f6":"\u9700\u8981 qcut\u7684:\n* RevolvingUtilizationOfUnsecuredLines\n* DebtRatio\n* MonthlyIncome\n* NumberOfOpenCreditLinesAndLoans\n* NumberRealEstateLoansOrLines\n\t\n\n\u9700\u8981 cut\u7684:\n* age\n* NumberOfDependents\n* NumberOfTime30-59DaysPastDueNotWorse\n* NumberOfTimes90DaysLate\n* NumberOfTime60-89DaysPastDueNotWorse\n","debc32f2":"## \u7279\u5f81\u7b5b\u9009 <a class=\"anchor\" id=\"5\"><\/a>","8264a702":"## \u903b\u8f91\u56de\u5f52\u5efa\u6a21 <a class=\"anchor\" id=\"6\"><\/a>","721c8fa2":"### Late Payment Columns\n\n- NumberOfTimes90DaysLate\n- NumberOfTime60-89DaysPastDueNotWorse\n- NumberOfTime30-59DaysPastDueNotWorse","a1a71fc6":"\u4e3a\u4e86\u9a8c\u8bc1\u8bc4\u5206\u5361\u7684\u6548\u679c\uff0c\u6211\u4eec\u9009\u4e24\u4e2a0\uff0c\u4e24\u4e2a1\u3002\u522b\u60f3\u6b6a\u4e86\uff0c\u6211\u8bf4\u7684\u662fSeriousDlqin2yrs == 0 \u6216\u8005 SeriousDlqin2yrs == 1,\u4e3a\u4e86notebook\u91cd\u65b0\u8fd0\u884c\u65f6\u7ed3\u679c\u4e0d\u53d8\uff0c\u6211\u56fa\u5b9a\u4e00\u4e2arandom state\u3002","57135f2b":"### MonthlyIncome","2904a8d4":"### \u9700\u8981\u8ba1\u7b97A\u548cB\u7684\u8bdd\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e24\u4e2a\u53c2\u6570\n1. \u57fa\u51c6\u5206\u3002\u6211\u4eec\u8bbe\u03b8_0\u4e3a20\uff1a1\u65f6\u7684\u591a\u6570\u98ce\u63a7\u7b56\u7565\u57fa\u51c6\u5206\u90fd\u8bbe\u7f6e\u4e3a650\uff0c\u6211\u4eec\u5c31\u8bd5\u8bd5650\u5427\uff0c\u57fa\u51c6\u5206\u4e3aA-B\\theta_0\n2. PDO\uff08point of double\uff09\uff0c\u6bd4\u7387\u7ffb\u756a\u65f6\u5206\u6570\u7684\u53d8\u52a8\u503c\u3002\u5047\u8bbe\u6211\u4eec\u8bbe\u7f6e\u4e3a\u5f53odds\u7ffb\u500d\u65f6\uff0c\u5206\u503c\u51cf\u5c1130\u3002\n\n\u800cA\u3001B\u8ba1\u7b97\u516c\u5f0f\uff08\u63a8\u5bfc\u8fc7\u7a0b\u8be6\u89c1\u6211\u7684\u77e5\u4e4e\u4e13\u680f https:\/\/zhuanlan.zhihu.com\/p\/148102950\uff09\n\n![image.png](attachment:image.png)\n\n","a76a49a7":"\u53ea\u9009\u62e9IV>0.1\u7684\uff0c\u5165\u9009\u7684\u6709\u4e94\u4e2a\u53d8\u91cf\uff1a\n* bin_RevolvingUtilizationOfUnsecuredLines\n* bin_NumberOfTime30-59DaysPastDueNotWorse\t\n* bin_age\n* bin_NumberOfTimes90DaysLate\n* bin_NumberOfTime60-89DaysPastDueNotWorse\t\n","27921bda":"## \u603b\u7ed3 <a class=\"anchor\" id=\"8\"><\/a>\n\u672ckernel\u8bbe\u8ba1\u4e86\u4e00\u4e2abaseline\u7684\u8bc4\u5206\u5361\uff0c\u91c7\u7528\u4e86\u7b80\u5355\u7684\u5206\u7bb1\u7b56\u7565\uff0c\u8ba1\u7b97\u4e86\u6bcf\u4e2a\u5206\u7bb1\u7684woe\u503c\uff0c\u6700\u540e\u8f6c\u6362\u6210\u8bc4\u5206\u5361\u3002\u672ckernel\u4ecd\u6709\u5f88\u591a\u4f18\u5316\u7a7a\u95f4\uff0c\u6b22\u8fce\u8bfb\u8005fork\u5e76\u4e14\u5c1d\u8bd5\u8fdb\u884c\u4f18\u5316","664bf144":"\u53ef\u4ee5\u770b\u5230\uff0c\u603b\u4f53\u6765\u8bf4\u8bc4\u5206\u7b26\u5408\u9884\u671f\uff0c\u4f8b\u5982RevolvingUtilizationOfUnsecuredLines\u8d8a\u9ad8\uff0c\u7ed9\u7684\u5206\u6570\u8d8a\u4f4e\u3002\n\u4e0d\u8fc7\u4e5f\u6709\u7684\u8bc4\u5206\u5e76\u4e0d\u662f\u5b8c\u5168\u7b26\u5408\u9884\u671f\uff0c\u4f8b\u5982NumberOfTime60-89DaysPastDueNotWorse\u5728(8.0, 9.0]\u6bb5\u7684\u5206\u6570\u7adf\u7136\u662f0\uff0c\u8fd9\u5b8c\u5168\u6ca1\u9053\u7406\u554a\uff01\u8fd9\u4e2a\u95ee\u9898\u7684\u51fa\u73b0\uff0c\u548c\u8bad\u7ec3\u96c6\u5728\u8fd9\u4e2a\u5206\u6570\u6bb5\u7684\u6837\u672c\u91cf\u6709\u5173\uff0c\u89e3\u51b3\u65b9\u6cd5\u53ef\u4ee5\u662f\u91cd\u65b0\u8bbe\u8ba1\u5206\u7bb1\u7b56\u7565\uff0c\u4e0d\u8fc7\u672ckernel\u7684\u76ee\u7684\u662f\u505a\u4e2abaseline\uff0c\u8bfb\u8005\u6709\u5174\u8da3\u53ef\u4ee5\u7814\u7a76\u4e0b\u5982\u4f55\u4f18\u5316","6a747be4":"### NumberRealEstateLoansOrLines","5811ae41":"\n## \u5bfc\u5165\u5305<a class=\"anchor\" id=\"1\"><\/a>","dc70899a":"\u755930%\u4f5c\u4e3a\u6a21\u578b\u7684\u9a8c\u8bc1\u96c6","41e6f9ed":"### NumberOfOpenCreditLinesAndLoans","fcc15228":"## EDA <a class=\"anchor\" id=\"3\"><\/a>\n\n- Around 6% of samples defaulted\n- MonthlyIncome and NumberOfDependents have 29731 (19.82%) and 3924 (2.61%) null values respectively\n- We also notice that when NumberOfTimes90DaysLate has values above 17, there are 267 instances where the three columns NumberOfTimes90DaysLate, NumberOfTime60-89DaysPastDueNotWorse, NumberOfTime30-59DaysPastDueNotWorse share the same values, specifically 96 and 98.\n    - We can see that sharing the same values of 96 and 98 respectively is not logical since trivial calculations can reveal that being 30 days past due for 96 times for a single person within a timespan of 2 years is not possible.\n- RevolvingUtilizationOfUnsecuredLines\n    - Defined as ratio of the total amount of money owed to total credit limit\n    - distribution of values is right-skewed, consider removing outliers\n    - It is expected that as this value increases, the proportion of people defaulting should increase as well\n    - However, we can see that as the minimum value of this column is set to 13, the proportion of defaulters is smaller than that belonging to the pool of clients with total amount of money owed not exceeding total credit limit.\n    - Thus we should remove those samples with RevolvingUtilizationOfUnsecuredLines's value more than equal to 13\n- age\n    - There seems to be more younger people defaulting and the distribution seems fine on the whole\n- NumberOfTimes90DaysLate\n    - It is interesting to note that there are no one who is 90 or more days past due between 17 and 96 times.\n- NumberOfTime60-89DaysPastDueNotWorse\n    - It is interesting to note that there are no one who is 60-89 days past due between 11 and 96 times.\n- NumberOfTime30-59DaysPastDueNotWorse\n    - It is interesting to note that there are no one who is 30-59 days past due between 13 and 96 times.\n- DebtRatio\n    - 2.5% of clients owe around 3490 or more times what they own\n    - For the people who have monthly income in this 2.5%, only 185 people have values for their monthly incomes and the values are either 0 or 1.\n    - There are 164 out of these 185 people who are of two different types, first with no monthly income and does not default and second with monthly income and does default.\n- MonthlyIncome\n    - Distribution of values is skewed, we can consider imputation with median.\n    - We can also consider imputing with normally distributed values with its mean and standard deviation.\n- Numberof Dependents\n    - We can consider imputing with its mode, which is zero.","b4cb9332":"### age","c81275c3":"\u4ee3\u5165\u6570\u5b57\u53ef\u7b97\u5f97\n![image.png](attachment:image.png)","12e160b1":"## \u6570\u636e\u5206\u7bb1 <a class=\"anchor\" id=\"4\"><\/a>"}}