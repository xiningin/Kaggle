{"cell_type":{"7e2f7258":"code","63de3022":"code","5ec8cfdd":"code","1c08ba9d":"code","13a65f0b":"code","c3d8a124":"code","cce5469f":"code","0191f136":"code","1cb51809":"code","66748128":"code","cc1b1d4e":"code","e858edb6":"code","ba76d2d4":"code","26ef35a4":"code","da8df43b":"code","f7a5bf63":"code","a919adb3":"code","4aa6c862":"markdown","efc2cecc":"markdown","220b7f93":"markdown","b552e5b8":"markdown"},"source":{"7e2f7258":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63de3022":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import LogisticRegression\nimport seaborn as sns","5ec8cfdd":"data = pd.read_csv('..\/input\/iris\/Iris.csv')","1c08ba9d":"data","13a65f0b":"data.info()","c3d8a124":"data.isna().sum()","cce5469f":"data['Species'].value_counts()","0191f136":"# changing the species column to category\nfor label, content in data.items():\n    if pd.api.types.is_string_dtype(content):\n        data[label] = content.astype('category')","1cb51809":"for label, content in data.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        data[label] = pd.Categorical(content).codes","66748128":"sns.heatmap(data.corr(), annot=True)","cc1b1d4e":"# dropping the Id column because it's useless\ndata.drop('Id', axis=1, inplace=True)","e858edb6":"#creating a function to try models\ndef model(m):\n    x = data.drop('Species', axis=1)\n    y = data['Species']\n    np.random.seed(0)\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)\n    clf = m\n    clf.fit(x_train, y_train)\n    s = clf.score(x_test, y_test)\n    return s\n","ba76d2d4":"# Trying RandomForestClassifier\nmodel(RandomForestClassifier())","26ef35a4":"model(LogisticRegression(max_iter=1000))","da8df43b":"x = data.drop('Species', axis=1)\ny = data['Species']\nnp.random.seed(0)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)\nclf = LogisticRegression(max_iter=1000)\nclf.fit(x_train, y_train)\nclf.score(x_test, y_test)","f7a5bf63":"y_preds = clf.predict(x_test)\nprint(classification_report(y_test, y_preds))","a919adb3":"cross_val_score(clf, x, y, cv=5)","4aa6c862":"# Checking out the data","efc2cecc":"## LogisticRegression is Perfect! But let's make sure","220b7f93":"## We are dealing with a multi-class classification problem","b552e5b8":"# The LogisticRegression model is a perfect model for this! I hope this was helpful for you."}}