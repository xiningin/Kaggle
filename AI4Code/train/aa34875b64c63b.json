{"cell_type":{"3dcaf249":"code","4249c069":"code","098423a4":"code","d018dd45":"code","43290ed8":"code","ec227443":"code","77a4b211":"code","7f6d8191":"code","fd329af0":"code","dceaa0f9":"code","5eb27481":"code","c604bce9":"code","c0835f1b":"code","b5b41cfd":"code","34ecae5f":"code","b927c93c":"code","44c3a038":"code","2fd3c740":"code","da74ec8a":"code","138eca3d":"code","882c132e":"code","dd2761c7":"code","75a79565":"code","80077c61":"code","3c9ed313":"code","c5da46bd":"code","adae5c81":"code","132028cf":"code","637fa60b":"code","dd0a4c6b":"code","37c6c1b9":"code","8ecff0d0":"code","77c5fcfa":"code","fb9531b4":"code","a8fda763":"code","e2e1361b":"code","da9eb159":"markdown","76b47cd7":"markdown","0e643b8e":"markdown","88605dd2":"markdown","4b270820":"markdown","f831bb48":"markdown","56d53bbb":"markdown","42dc8760":"markdown","7a1bd28d":"markdown","e81798c4":"markdown","77a9eb1d":"markdown"},"source":{"3dcaf249":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom kaggle.competitions import nflrush\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4249c069":"# https:\/\/stackoverflow.com\/questions\/30228069\/how-to-display-the-value-of-the-bar-on-each-bar-with-pyplot-barh\ndef label_bars(ax, bars, text_format, **kwargs):\n    \"\"\"\n    Attaches a label on every bar of a regular or horizontal bar chart\n    \"\"\"\n    ys = [bar.get_y() for bar in bars]\n    y_is_constant = all(y == ys[0] for y in ys)  # -> regular bar chart, since all all bars start on the same y level (0)\n\n    if y_is_constant:\n        _label_bar(ax, bars, text_format, **kwargs)\n    else:\n        _label_barh(ax, bars, text_format, **kwargs)\n\n\ndef _label_bar(ax, bars, text_format, **kwargs):\n    \"\"\"\n    Attach a text label to each bar displaying its y value\n    \"\"\"\n    max_y_value = ax.get_ylim()[1]\n    inside_distance = max_y_value * 0.05\n    outside_distance = max_y_value * 0.01\n\n    for bar in bars:\n        text = text_format.format(bar.get_height())\n        text_x = bar.get_x() + bar.get_width() \/ 2\n\n        is_inside = bar.get_height() >= max_y_value * 0.15\n        if is_inside:\n            color = \"white\"\n            text_y = bar.get_height() - inside_distance\n        else:\n            color = \"black\"\n            text_y = bar.get_height() + outside_distance\n\n        ax.text(text_x, text_y, text, ha='center', va='bottom', color=color, **kwargs)\n\n\ndef _label_barh(ax, bars, text_format, **kwargs):\n    \"\"\"\n    Attach a text label to each bar displaying its y value\n    Note: label always outside. otherwise it's too hard to control as numbers can be very long\n    \"\"\"\n    max_x_value = ax.get_xlim()[1]\n    distance = max_x_value * 0.0025\n\n    for bar in bars:\n        text = text_format.format(bar.get_width())\n\n        text_x = bar.get_width() + distance\n        text_y = bar.get_y() + bar.get_height() \/ 2\n\n        ax.text(text_x, text_y, text, va='center', **kwargs)","098423a4":"train_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\ntrain_df.head()","d018dd45":"train_df.shape","43290ed8":"env = nflrush.make_env()\niter_test = env.iter_test()\n(test_df, sample_prediction_df) = next(iter_test)\ntest_df.head()","ec227443":"sample_prediction_df.head()","77a4b211":"print(test_df.shape)\nprint(len(test_df['DisplayName'].unique()))","7f6d8191":"train_df.columns","fd329af0":"train_df.info()","dceaa0f9":"missing_values = train_df.isnull().sum()\nmissing_values = missing_values[missing_values>0]\nmissing_values.sort_values(ascending=False,inplace=True)\nmissing_values","5eb27481":"print('Total of Games Played: ', len(train_df.GameId.unique()))","c604bce9":"train_df.Team.value_counts()","c0835f1b":"train_df.groupby('PlayId').first()['Yards'].plot(\n    kind = 'hist',\n    figsize=(15,5),\n    bins=50,\n    title='Distribution of yard gain'\n)","b5b41cfd":"color_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\n\nfig, axes = plt.subplots(4,1, figsize=(15,8), sharex=True)\nn=0\nfor i, d in train_df.groupby('Down'):\n    d['Yards'].plot(kind='hist', \n                    bins=30,\n                   color=color_pal[n],\n                   ax=axes[n],\n                   title = f'Yards Gained on down {i}')\n    n+=1","34ecae5f":"fig, ax= plt.subplots(figsize=(20,5))\nsns.violinplot(x='Distance-to-Gain',\n              y='Yards',\n              data=train_df.rename(columns={'Distance':'Distance-to-Gain'}),\n              ax=ax)\nplt.ylim(-10,20)\nplt.title('Yards vs Distance-to-gain')\nplt.show()","b927c93c":"print('Unique game data provided: {}'.format(train_df['GameId'].nunique()))\nprint('Unique play data provided: {}'.format(train_df['PlayId'].nunique()))","44c3a038":"train_df.groupby('GameId')['PlayId'].nunique().plot(kind='hist',\n                                                   figsize=(15,5),\n                                                   title='Distribution of plays per gameid',\n                                                   bins=50)","2fd3c740":"fig , (ax1, ax2) = plt.subplots(1,2, figsize=(15,5))\nsns.boxplot(data = train_df.groupby('PlayId').first()[['Distance','Down']], x='Down', y= 'Distance', ax=ax1)\nax1.set_title('Distance-to-Gain by Down')\nsns.boxplot(data = train_df.groupby('PlayId').first()[['Yards','Down']], x='Down', y= 'Yards', ax=ax2)\nax2.set_title('Yards-to-Gain by Down')","da74ec8a":"# train_df['Distance'].plot(kind='hist', title='Distribution of distance to go', figsize=(15,5), bins=30)\n\nsns.distplot(train_df['Distance'])\n","138eca3d":"fig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize=(16,4))\ntrain_df['S'].plot(kind='hist', title=\"Distribution of speed\",ax=ax1, bins=20)\ntrain_df['A'].plot(kind='hist', title=\"Distribution of Acceleration\",ax=ax2, bins=20)\ntrain_df['Dis'].plot(kind='hist', title=\"Distribution of Distance\",ax=ax3, bins=20)\n","882c132e":"fig, (ax1,ax2,ax3) = plt.subplots(1,3, figsize=(16,4))\n\ntrain_df.query('NflIdRusher == NflId')['S'].plot(kind='hist', title='Distribution of speed (ball carrier only)', ax=ax1, bins=20)\ntrain_df.query('NflIdRusher == NflId')['A'].plot(kind='hist', title='Distribution of speed (ball carrier only)', ax=ax2, bins=20)\ntrain_df.query('NflIdRusher == NflId')['Dis'].plot(kind='hist', title='Distribution of speed (ball carrier only)', ax=ax3, bins=20)\n","dd2761c7":"sns.pairplot(train_df.query('NflIdRusher==NflId')[['S','A','Dis','Yards','DefensePersonnel']], hue='DefensePersonnel')","75a79565":"fig,ax = plt.subplots(1,1,figsize=(16,8))\ntrain_df['DefensePersonnel'].value_counts().sort_values().head(15).plot(kind='barh', ax=ax)","80077c61":"fig,ax = plt.subplots(1,1,figsize=(16,8))\ntrain_df['OffensePersonnel'].value_counts().sort_values().head(30).plot(kind='barh', ax=ax)","3c9ed313":"top_10_defenses = train_df.groupby('DefensePersonnel')['GameId'].count().sort_values(ascending=False).index[:10].tolist()\ntop_10_defenses","c5da46bd":"train_play = train_df.groupby('PlayId').first()\ntrain_top10_defense = train_play.loc[train_play['DefensePersonnel'].isin(top_10_defenses)]\n\nfig, ax = plt.subplots(1,1,figsize=(16,8))\nsns.violinplot(x='DefensePersonnel', y='Yards', data=train_top10_defense, ax=ax)\nplt.ylim(-10,20)","adae5c81":"fig, ax = plt.subplots(figsize=(15, 5))\nax.set_ylim(-10, 100)\nax.set_title('Yards vs Quarter')\nsns.boxenplot(x='Quarter',\n            y='Yards',\n            data=train_df.sample(5000),\n            ax=ax)\nplt.show()","132028cf":"train_df['DefendersInTheBox'].value_counts().sort_values().plot(kind='barh')","637fa60b":"fig, ax = plt.subplots(1,1,figsize=(16,4))\nsns.boxenplot(x='DefendersInTheBox',\n             y='Yards',\n             data=train_df.query('DefendersInTheBox > 2')\n             )","dd0a4c6b":"fig, ax = plt.subplots(3,2,constrained_layout=True, figsize=(15,10))\nax_id1=0\nax_id2=0\nfor i in range(4,10):\n    this_ax = ax[ax_id1][ax_id2]\n    sns.distplot(train_df.query('DefendersInTheBox == @i')['Yards'],\n                ax=this_ax, color=color_pal[ax_id1])\n    this_ax.set_title(f'{i} Defenders in the box')\n    ax_id2 +=1\n    if ax_id2 == 2:\n        ax_id2=0\n        ax_id1+=1","37c6c1b9":"train_df.query('NflIdRusher == NflId').groupby('DisplayName')['Yards'].agg(['count','mean']).query('count > 100').sort_values(by='mean', ascending=True).\\\ntail(10)['mean'].plot(kind='barh', figsize=(15,5), title='Top 10 players with average yards', xlim=(0,6))\nplt.show()\n\n\ntrain_df.query('NflIdRusher == NflId').groupby('DisplayName')['Yards'].agg(['count','mean']).query('count > 100').sort_values(by='mean', ascending=True).\\\nhead(10)['mean'].plot(kind='barh', figsize=(15,5), title='Bottom 10 players with average yards', xlim=(0,6))\nplt.show()\n","8ecff0d0":"# Create the DL-LB combos\ntrain_df['DL_LB'] = train_df['DefensePersonnel'] \\\n    .str[:10] \\\n    .str.replace(' DL, ','-') \\\n    .str.replace(' LB','') # Clean up and convert to DL-LB combo\ntop_5_dl_lb_combos = train_df.groupby('DL_LB').count()['GameId'] \\\n    .sort_values() \\\n    .tail(10).index.tolist()\nax = train_df.loc[train_df['DL_LB'].isin(top_5_dl_lb_combos)] \\\n    .groupby('DL_LB').mean()['Yards'] \\\n    .sort_values(ascending=True) \\\n    .plot(kind='bar',\n          title='Average Yards Top 5 Defensive DL-LB combos',\n          figsize=(15, 5),\n          color=color_pal[4])\n# for p in ax.patches:\n#     ax.annotate(str(round(p.get_height(), 2)),\n#                 (p.get_x() * 1.005, p.get_height() * 1.015))\n\n#bars = ax.bar(0.5, 5, width=0.5, align=\"center\")\nbars = [p for p in ax.patches]\nvalue_format = \"{:0.2f}\"\nlabel_bars(ax, bars, value_format, fontweight='bold')\nplt.show()","77c5fcfa":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12*2, 6.33*2)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\nimport math\ndef get_dx_dy(angle, dist):\n    cartesianAngleRadians = (450-angle)*math.pi\/180.0\n    dx = dist * math.cos(cartesianAngleRadians)\n    dy = dist * math.sin(cartesianAngleRadians)\n    return dx, dy","fb9531b4":"play_id = train_df.query(\"DL_LB == '3-4'\")['PlayId'].reset_index(drop=True)[500]\nfig, ax = create_football_field()\ntrain_df.query(\"PlayId == @play_id and Team == 'away'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=200, legend='Away')\ntrain_df.query(\"PlayId == @play_id and Team == 'home'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=200, legend='Home')\ntrain_df.query(\"PlayId == @play_id and NflIdRusher == NflId\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='red', s=200, legend='Rusher')\nrusher_row = train_df.query(\"PlayId == @play_id and NflIdRusher == NflId\")\nyards_covered = rusher_row[\"Yards\"].values[0]\n\nx = rusher_row[\"X\"].values[0]\ny = rusher_row[\"Y\"].values[0]\nrusher_dir = rusher_row[\"Dir\"].values[0]\nrusher_speed = rusher_row[\"S\"].values[0]\ndx, dy = get_dx_dy(rusher_dir, rusher_speed)\nyards_gained = train_df.query(\"PlayId == @play_id\")['Yards'].tolist()[0]\nax.arrow(x, y, dx, dy, length_includes_head=True, width=0.3)\nplt.title(f'Example of a 3-4 Defense - run resulted in {yards_gained} yards gained', fontsize=20)\nplt.legend()\nplt.show()","a8fda763":"plt.figure(figsize=(12,10))\ntemp_df = train_df.query(\"NflIdRusher == NflId\")\nsns.boxplot(data=temp_df, y=\"PossessionTeam\", x=\"Yards\", showfliers=False, whis=3.0)\nplt.ylabel('PossessionTeam', fontsize=12)\nplt.xlabel('Yards (Target)', fontsize=12)\nplt.title(\"Possession team Vs Yards (target)\", fontsize=20)\nplt.show()","e2e1361b":"plt.figure(figsize=(16,12))\ntemp_df = train_df.query(\"NflIdRusher == NflId\")\nsns.catplot(data=temp_df, x=\"Quarter\", y=\"Yards\", kind=\"boxen\")\nplt.xlabel('Quarter', fontsize=12)\nplt.ylabel('Yards (Target)', fontsize=12)\nplt.title(\"Quarter Vs Yards (target)\", fontsize=20)\nplt.show()","da9eb159":"### Data\n* GameId - a unique game identifier\n* PlayId - a unique play identifier\n* Team - home or away\n* X - player position along the long axis of the field. See figure below.\n* Y - player position along the short axis of the field. See figure below.\n* S - speed in yards\/second\n* A - acceleration in yards\/second^2\n* Dis - distance traveled from prior time point, in yards\n* Orientation - orientation of player (deg)\n* Dir - angle of player motion (deg)\n* NflId - a unique identifier of the player\n* DisplayName - player's name\n* JerseyNumber - jersey number\n* Season - year of the season\n* YardLine - the yard line of the line of scrimmage\n* Quarter - game quarter (1-5, 5 == overtime)\n* GameClock - time on the game clock\n* PossessionTeam - team with possession\n* Down - the down (1-4)\n* Distance - yards needed for a first down\n* FieldPosition - which side of the field the play is happening on\n* HomeScoreBeforePlay - home team score before play started\n* VisitorScoreBeforePlay - visitor team score before play started\n* NflIdRusher - the NflId of the rushing player\n* OffenseFormation - offense formation\n* OffensePersonnel - offensive team positional grouping\n* DefendersInTheBox - number of defenders lined up near the line of scrimmage, spanning the width of the ---offensive line\n* DefensePersonnel - defensive team positional grouping\n* PlayDirection - direction the play is headed\n* TimeHandoff - UTC time of the handoff\n* TimeSnap - UTC time of the snap\n* Yards - the yardage gained on the play (you are predicting this)\n* PlayerHeight - player height (ft-in)\n* PlayerWeight - player weight (lbs)\n* PlayerBirthDate - birth date (mm\/dd\/yyyy)\n* PlayerCollegeName - where the player attended college\n* HomeTeamAbbr - home team abbreviation\n* VisitorTeamAbbr - visitor team abbreviation\n* Week - week into the season\n* Stadium - stadium where the game is being played\n* Location - city where the game is being player\n* StadiumType - description of the stadium environment\n* Turf - description of the field surface\n* GameWeather - description of the game weather\n* Temperature - temperature (deg F)\n* Humidity - humidity p- WindSpeed - wind speed in miles\/hour WindDirection - wind direction","76b47cd7":"**Running strategies change as the game goes on...**\n\nHow are the yards gained impacted by the time in the game? Many times teams run the ball at the end of the game when they are ahead, in order to run out the gameclock and win. In these situations the run is expected more and defenses can scheme against it.\n\nIt doesn't look like the quarter has a huge impact on the running yards gained.","0e643b8e":"**What Ball Carriers stand out?**\n\n\nLets now look at ball carriers (the players who typically are handed off the ball) and see if any individual players stand out. We will only look at players with more than 100 plays. Then we can plot the top and bottom 10 players.","88605dd2":"**Yards gained by Distance-to-Gain**\n\nWe can see that there appears to be a increase in the average yards gained as the distance to gain increases. We also can see that as the distances increase the distribution of Yards moves from a normal distribution to bimodal. This could be because of sparsity of data for the extremely large distance-to-gain values.","4b270820":"**Yards** the Target we are trying to predict\n\nLets have a closer look at it","f831bb48":"#### Yards gained by Down","56d53bbb":"# Visualization the data","42dc8760":"Code Refrence https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-nfl","7a1bd28d":"**Defenders In The \"Box\"**\n\nThe number of defenders in the box is an important part of stopping the running game. Typically defenses will add more players to this area of the field when they really want to stop a run, this comes at a cost leaving wide recievers less covered.\n\nWow! This plot shows a big difference in yards gained when looking at the number of defenders in the box. If you've got 8+ defenders in the box you're looking to stop the run big time! And you can see the average rush yardage is lower. Conversely having 3 men in the box (maybe because they are in prevent defense for a long yard to gain) allows for a average return of about 10 yards!","e81798c4":"In this competition, you will develop a model to predict how many yards a team will gain on given rushing plays as they happen. You'll be provided game, play, and player-level data, including the position and speed of players as provided in the NFL\u2019s Next Gen Stats data. And the best part - you can see how your model performs from your living room, as the leaderboard will be updated week after week on the current season\u2019s game data as it plays out","77a9eb1d":"### Data Description\n* Each row represents a player at a given moment in time.\n* Each 22 players participating in a given play have a row.\n\n\nFrom the official description:\n\n`Each row in the file corresponds to a single player's involvement in a single play.\nThe dataset was intentionally joined (i.e. denormalized) to make the API simple.\nAll the columns are contained in one large dataframe which is grouped and provided by PlayId.`"}}