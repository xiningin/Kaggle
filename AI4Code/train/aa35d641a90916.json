{"cell_type":{"5c8c0bef":"code","881b5334":"code","878e167b":"code","327da2e3":"code","319a9b0a":"code","3e03fe78":"code","1cb98a06":"code","33814d25":"code","56b5beba":"code","7facdded":"code","200fe0e5":"code","b2d6d8e3":"code","62eda569":"code","97d15c6e":"code","1ea866ab":"code","4e1b05e7":"code","7061a78e":"code","5f253310":"code","a4d01a7d":"code","9678f2d6":"code","537e7482":"code","86bdafb0":"code","a9086d36":"code","60588416":"code","e3981fba":"markdown","223c773f":"markdown","72e3c25f":"markdown","7354315d":"markdown","a0fc7c34":"markdown","a7a7e806":"markdown","f666f400":"markdown","0d6808cb":"markdown","587de8fc":"markdown","eb4b151a":"markdown","88713333":"markdown","1df03c08":"markdown","aaefd22c":"markdown","0f94841d":"markdown","9e689fba":"markdown"},"source":{"5c8c0bef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","881b5334":"import warnings\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('fivethirtyeight')\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib\nmatplotlib.rcParams['axes.labelsize'] = 14\nmatplotlib.rcParams['xtick.labelsize'] = 12\nmatplotlib.rcParams['ytick.labelsize'] = 12\nmatplotlib.rcParams['text.color'] = 'k'","878e167b":"confirmed = pd.read_excel(\"..\/input\/c19datasetforpredictionmodel\/USA_Confirmed.xlsx\")\nconfirmed['CalDate'] = pd.to_datetime(confirmed['CalDate'])\nconfirmed","327da2e3":"confirmed['CalDate'].min(), confirmed['CalDate'].max()","319a9b0a":"confirmed = confirmed.set_index('CalDate')\nconfirmed.index","3e03fe78":"y = confirmed['Count'].resample('D').sum() #resample by Date","1cb98a06":"y['2020':]","33814d25":"#plot a graph to show trend\n\ny.plot(figsize=(20, 10))\nplt.show()","56b5beba":"p = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","7facdded":"for param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod=sm.tsa.statespace.SARIMAX(y,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n            results=mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue\n            \n#The Akaike Information Critera (AIC) is a widely used measure of a statistical model. \n#It basically quantifies 1) the goodness of fit, \n#and 2) the simplicity\/parsimony, of the model into a single statistic","200fe0e5":"mod = sm.tsa.statespace.SARIMAX(y,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 1, 12), #lowest AIC\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","b2d6d8e3":"results.plot_diagnostics(figsize=(16, 8))\nplt.show()","62eda569":"pred = results.get_prediction(start=pd.to_datetime('2020-04-13'), dynamic=False)\npred_ci = pred.conf_int()\nax = y['2020':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(20, 10))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Cases')\nplt.legend()\nplt.show()","97d15c6e":"pred_uc = results.get_forecast(steps=15)\npred_ci = pred_uc.conf_int()\nax = y.plot(label='observed', figsize=(20, 10))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('# Cases')\nplt.legend()\nplt.show()","1ea866ab":"confirmed_global = pd.read_excel(\"..\/input\/c19datasetforpredictionmodel\/Global_Confirmed.xlsx\")\nconfirmed_global['CalDate_Global'] = pd.to_datetime(confirmed_global['CalDate_Global'])\nconfirmed_global","4e1b05e7":"confirmed_global['CalDate_Global'].min(), confirmed_global['CalDate_Global'].max()","7061a78e":"confirmed_global = confirmed_global.set_index('CalDate_Global')\nconfirmed_global.index","5f253310":"y_global = confirmed_global['Count_Global'].resample('D').sum() #resample by Date\ny_global['2020':]","a4d01a7d":"p = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","9678f2d6":"for param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod=sm.tsa.statespace.SARIMAX(y_global,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n            results=mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue","537e7482":"mod = sm.tsa.statespace.SARIMAX(y_global,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 1, 12), #lowest AIC\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","86bdafb0":"results.plot_diagnostics(figsize=(16, 8))\nplt.show()","a9086d36":"pred = results.get_prediction(start=pd.to_datetime('2020-04-13'), dynamic=False)\npred_ci = pred.conf_int()\nax = y_global['2020':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(20,10))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Cases')\nplt.legend()\nplt.show()","60588416":"pred_uc = results.get_forecast(steps=15)\npred_ci = pred_uc.conf_int()\nax = y_global.plot(label='observed', figsize=(20,10))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast for Global')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('# Cases')\nplt.legend()\nplt.show()","e3981fba":"In a typical forecasting model, the validation is performed using an approach called \u201cone step ahead forecast\u201d. In this approach, approximately 70%-75% of the data is used to train the model and remaining 30%-25% of data is used for validation. ","223c773f":"Based on the above chart, we can see that the accuracy of the model is good. \n\nPost creation and validation of the model, # cases for upcoming fifteen days can be plotted on a graph with a lower and upper range.","72e3c25f":"# **Design Flow:**\n\n**High Level Flow:**\n\n![1%20HighLevelFlow.PNG](attachment:1%20HighLevelFlow.PNG)\n\n\n\n\n**Low Level Flow:**\n\n* Data Collection -> Data Modelling:\n\n![2%20LowLevelFlow.PNG](attachment:2%20LowLevelFlow.PNG)\n\n\n\n* Data Model Export-> SARIMAX Model -> Forecasted Values\n\n![3%20LowLevelFloe.PNG](attachment:3%20LowLevelFloe.PNG)\n\n\n\n","7354315d":"# ****Overview****\n\nCoronavirus disease 2019 (COVID-19) is an infectious disease caused by severe acute respiratory syndrome coronavirus. The disease was first identified in December 2019 in Wuhan, the capital of China's Hubei province, and has since spread globally, resulting in the ongoing 2019\u201320 coronavirus pandemic. Common symptoms include fever, cough and shortness of breath. The time from exposure to onset of symptoms is typically around five days. As of 11 April 2020, more than 1.7 million cases have been reported in more than 200 countries resulting in more than 103,000 deaths. More than 382,000 people have recovered. ** \n\nThe virus is mainly spread between people during close contact, often via small droplets produced during coughing, sneezing, or talking. People may also become infected by touching a contaminated surface and then their face. The virus can survive on surfaces for up to 72 hours. **\nIn this project, a prediction model has been created based on the avaiable data on world wide web. \n\n**: Source Wikipedia\n\n\n****Approach****\n    \nBase dataset has been created based on country-wise geographical factors, population, industrial work force and pandemic history. Number of reported cases by country have been downloaded in a consolidated file. \n\nThe datasets are merged and used in the forecasting model to predict the number of cases for upcoming five to ten days.\n\n","a0fc7c34":"Above is how the forecast for USA. \n\n\n\nBut there might be no usage of the geographic, population and labourforce because it will be identical for a single country. Check below screenshot:\n\n![8.PNG](attachment:8.PNG)\n\n\n\nThe identical values will not be helpful while finding the most suitable variables for the model. \n\n# So, what is the use of this data?\n\n\nTo answer the above question, the values will be helpful if there is a need to forecast the values globally or more than one country, in that case the geographical factors like temperature, precipitation with pandemic history might be consumed as a dependent variable for the forecast.\n\n![9.PNG](attachment:9.PNG)\n\n\n","a7a7e806":"We will choose the matrix with lowest AIC value ((1,1,1)x(1,1,1,12)-> 949) to be used as parameters while creating the model \n\nLet' see how the model looks like:","f666f400":"# Extract Transform Load:\n\nAll the files have been loaded to QlikView for creating a data model which will support the data and a source data for forecasting model will be extracted. \n\nPost completing the data modelling, below data model is created:\n\n\n![4%20DataModel.PNG](attachment:4%20DataModel.PNG)\n\n\n\nOn top of the data model, below charts can help visulaize the data:\n\n\n\n\n\n![5%20BloackChart.PNG](attachment:5%20BloackChart.PNG)\n\n![61.png](attachment:61.png)\n\n![7%20USAHeatMap.PNG](attachment:7%20USAHeatMap.PNG)\n\n\nThree data sets have been exported using the data model:\n\n* Dataset for USA (USA_Confirmed.xlsx)\n* Global dataset (Global_Confirmed.xlsx)\n* Dataset for India (India_Confirmed.xlsx)\n","0d6808cb":"we can clearly see different sets or residuals here as compared to USA model (listed below):\n\n![10.PNG](attachment:10.PNG)\n\n","587de8fc":"Let's take the matrix with minimum AIC ((1,1,1)x(1,1,1,12))","eb4b151a":"# **C19 Prediction Model Based on Geographic Factors, Population, Population Density and Labor Force**","88713333":"# Step by Step Development of Forecasting Model for USA\n\nFile USA_Confirmed.xlsx has been used in generating the number of confirmed C19 cases for USA for next 7 days","1df03c08":"# ARIMA Model Creation:\nAutoregressive Integrated Moving Average is the most commonly used method for time-series forecasting. \n\nThree parameters are used in ARIMA model:\n-\tSeasonality (p) \n-\tTrend (d)\n-\tNoise (q)\n","aaefd22c":"# Parameter Selection for Forecasting:\n\nParameter selection is one of the most important steps while working on any forecasting model. Grid search has been used to find the most suitable set of parameters for the time-series model.\nIn this approach, multiple parameter grids will be evaluated based on AIC (Akaike Information Criteria). The grid with the best (lowest) AIC will be considered as the best option to use the parameters in the model. \n\n\nThe Akaike Information Critera (AIC) is a widely used measure of a statistical model. \nIt basically quantifies 1) the quality of fit, and 2) the intelligibility, of the model into a single statistic","0f94841d":"Now let's plot a chart to see how the current trend looks like...","9e689fba":"# **Data Modelling:**\n\n* **Data Collection:**\n\n\nBelow datasets have been utilized in the data model:\n\n    * Reported Cases:\n    Count of reported cases have been downloaded from GitHub: [(https:\/\/github.com\/CSSEGISandData\/COVID-19)] \n    The dataset contains count of confirmed, recovered and demises (each by country). Below are the sample data files\n        Uploaded files: \n        time_series_covid19_confirmed_global.csv\n        time_series_covid19_confirmed_US.csv\n        time_series_covid19_deaths_global.csv\n        time_series_covid19_deaths_US.csv\n        time_series_covid19_recovered_global.csv\n        \n        \n    * Population:\n    Population by country has been downloaded from https:\/\/www.worldometers.info\/world-population\/population-by-country\/\n        Uploaded files:\n        Population by Country (2020) - Worldometer.pdf\n        Population by Country (2020) - Worldometer.xlsx\n        \n    * Population Density by Country:\n    Population density has been downloaded from https:\/\/en.wikipedia.org\/wiki\/List_of_countries_and_dependencies_by_population_density\n        Uploaded files:\n        Population by density.pdf\n        PopulationDensity.xlsx\n        \n    * Atmospheric Precipitation: \n        Uploaded files:\n        Precipitation.csv\n        \n    * Yearly Average Temperature by Country:\n      Source for temperature data is https:\/\/climateknowledgeportal.worldbank.org\/download-data\n            Uploaded files:\n            AvgTemparatureData.csv\n            \n    * Average Rainfall by Country:\n        Uploaded files:\n        AvgRainfallData.csv\n        \n    * Labour Force by Country:\n        Uploaded file:\n        LabourForce.csv\n        \n    * Pandemic History by Country:\n      A dataset has been downloaded from WHO website for pandemic history by country:\n        Uploaded files:\n        PandemicHistory_Plague.pdf\n        PandemicsData.xlsx\n    "}}