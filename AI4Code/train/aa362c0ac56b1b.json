{"cell_type":{"e6118b36":"code","08360f6b":"code","b2fa9066":"code","cb76e34d":"code","d4045dc5":"code","80a1e8e7":"code","67a89831":"code","b3661f62":"code","0b812d05":"code","5a97d4da":"code","692d1562":"code","7b4e2075":"code","c48a5fa7":"code","8abc47a0":"code","246311ed":"code","83229bda":"code","36483bce":"code","b92c121d":"code","249d81a5":"code","f6e067fd":"code","4456e3cc":"code","b06e1b45":"code","2764d6f2":"code","96f30e27":"code","c0cd3d06":"code","df2b8f04":"code","98d40883":"code","744ab25b":"code","39637daa":"code","4dedf728":"code","48419edd":"code","8135d744":"code","a817288a":"code","c354b86b":"code","8bf04798":"code","49ba274c":"code","4173655d":"code","48188cef":"markdown","d5dbfbfb":"markdown","3d7e1b2b":"markdown","ecf1fa57":"markdown","ed9fb144":"markdown"},"source":{"e6118b36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","08360f6b":"#Importando as bibliotecas\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\n\nimport statsmodels.api as sm\nimport statsmodels.api as tsa\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.arima_model import ARMA\nfrom statsmodels.tsa.ar_model import AR\nfrom statsmodels.tsa.stattools import adfuller, arma_order_select_ic\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 15, 6\n\nfrom matplotlib import pyplot as plt\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\nfrom random import random\n#from pandas.plotting import register_matplotlib_converters\n%matplotlib inline","b2fa9066":"#Importar a base Brasil\nBrasil = pd.read_excel('\/kaggle\/input\/Brasil.xlsx', skiprows=12, usecols=[0,1,4], encoding='latin1')\n\n#Apresentar os dados Brasil\nBrasil.head()","cb76e34d":"#Renomear colunas\nBrasil.rename(columns={\"M\u00caS\": \"Periodo\", \"PRODUTO\":\"Combust\u00edveis\", \"PRECO M\u00c9DIO REVENDA\": \"Pre\u00e7os\"}, inplace=True)\nBrasil.head()","d4045dc5":"#Apresentando informa\u00e7\u00f5es das variaveis \nBrasil.info()","80a1e8e7":"#Filtrar a coluna Combustiveis\nBrasil = Brasil[Brasil['Combust\u00edveis'] == 'ETANOL HIDRATADO']\nBrasil.head()","67a89831":"#Remover a coluna combustiveis\nBrasil.drop(columns=['Combust\u00edveis'], inplace=True, axis=1)\nBrasil.head()","b3661f62":"#Importar o dataset Mensal_Brasil configurando apresenta\u00e7\u00e3o dos dados. \nmensalB = pd.read_excel('\/kaggle\/input\/MENSAL_BRASIL-DESDE_Jan2013.xlsx',skiprows=15,usecols=[0,1,4],encoding='latin1')\nmensalB.head()","0b812d05":"#Renomear colunas\nmensalB.rename(columns={\"M\u00caS\":\"Periodo\",\"PRODUTO\":\"combustiveis\",\"PRE\u00c7O M\u00c9DIO REVENDA\":\"Pre\u00e7os\"}, inplace=True)\nmensalB.head()","5a97d4da":"# Apresentando o tipo de dados na base.\nmensalB.info()","692d1562":"#filtrar a coluna Combustiveis\nmensalB = mensalB[mensalB['combustiveis'] =='ETANOL HIDRATADO']\nmensalB.head()","7b4e2075":"#Remover a coluna Combustiveis\nmensalB.drop(columns=['combustiveis'], inplace=True, axis=1)\nmensalB.head()","c48a5fa7":"#Unir os datasets apos ajustes\ndados = pd.concat([Brasil, mensalB], ignore_index=True, sort=True)\ndados.head()","8abc47a0":"#atribuindo a coluna periodo no index na base\ndados.index = dados['Periodo']\ndados.drop('Periodo',inplace=True, axis=1)\ndados.head()","246311ed":"plt.plot(dados)\nplt.title('Evolu\u00e7\u00e3o do pre\u00e7o do Etanol Hidratado')\nplt.xlabel('Periodo')\nplt.ylabel('Pre\u00e7os')\nplt.show()","83229bda":"#Plotar gr\u00e1fico de Periodo e pre\u00e7os\n\nX = [i for i in range(0, len(dados))]\nX = np.reshape(X, (len(X), 1))\ny = dados\nmodelo = LinearRegression()\nmodelo.fit(X, y)\n\nmodelo.coef_\ntendencia = modelo.predict(X)\n\nplt.plot(dados.values, color='blue',label='Original')\nplt.plot(tendencia,color='red', label='Tend\u00eancia' )\nplt.title('Regress\u00e3o Periodo por pre\u00e7o')\nplt.xlabel('Periodo')\nplt.ylabel('Pre\u00e7os')\nplt.show()","36483bce":"mean = dados.rolling(window=12).mean()\nm_std = dados.rolling(window=12).std()\n\nori = plt.plot(dados, color='blue', label='Original')\nmm = plt.plot(mean, color='red',label='M\u00e9dia')\nstd = plt.plot(m_std, color='black', label='Desvio')\nplt.legend(loc='best')\nplt.title('Evolu\u00e7\u00e3o do pre\u00e7o do Etanol Hidratado')\n\nplt.show()\n\nresult = adfuller(dados['Pre\u00e7os'])\nprint('ADF Statistic: {}'.format(result[0]))\nprint('p-value: {}'.format(result[1]))\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print('\\t{}: {}'.format(key, value))","b92c121d":"#Estatistica do modelo\narma_mod30 = sm.tsa.ARMA(dados, (3,0)).fit(disp=False)\n\nprint(arma_mod30.summary())","249d81a5":"#Previss\u00e3o do pre\u00e7o para 12 meses\nfig, ax = plt.subplots(figsize=(8,6))\nfig = arma_mod30.plot_predict(start='2001-07-01', end='2020-10-01', ax=ax)\nplt.title('Previss\u00e3o do pre\u00e7o para 12 meses, utilizando o modelo ARMA')\nplt.ylabel('Pre\u00e7os')\nplt.xlabel('Periodo')\nlegend = ax.legend(loc='upper left')","f6e067fd":"#Varia\u00e7\u00e3o de periodo e pre\u00e7o\nper = np.log(dados).diff().dropna()\nper.plot()","4456e3cc":"from statsmodels.graphics.tsaplots import plot_acf\nplot_acf(dados)\n\n#plotar o gr\u00e1fico de autocorrela\u00e7\u00e3o dos res\u00edduos entre duas s\u00e9ries\n","b06e1b45":"dados.shift(1)","2764d6f2":"dados_diff = dados.diff(periods=1) \n#Integrar e ordenar","96f30e27":"dados_diff = dados_diff[1:]\ndados_diff.head()","c0cd3d06":"#Plotar o gr\u00e1fico de autocorrela\u00e7\u00e3o \nplot_acf(dados_diff)","df2b8f04":"fig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(dados.values.squeeze(), lags=40, ax=ax1)\nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(dados, lags=40, ax=ax2)","98d40883":"dados_diff.plot()","744ab25b":"modelo = ARIMA(dados, order=(0, 1, 1)).fit()\nprint(modelo.summary())","39637daa":"#Previss\u00e3o do pre\u00e7o 12 meses\nfig, ax = plt.subplots(figsize=(8,6))\nfig = modelo.plot_predict(start='2001-08-01', end='2020-10-01', ax=ax)\nplt.title('Previss\u00e3o do pre\u00e7o 12 meses, modelo ARIMA')\nplt.ylabel('Pre\u00e7os')\nplt.xlabel('Periodo')\nlegend = ax.legend(loc='upper left')","4dedf728":"#Previss\u00e3o do pre\u00e7o para 12 meses\nfig, ax = plt.subplots(figsize=(8,6))\nfig = modelo.plot_predict(start='2001-08-01', end='2020-10-01', ax=ax)\nplt.title('Previss\u00e3o do pre\u00e7o para 12 meses, utilizando o modelo ARIMA')\nplt.ylabel('Pre\u00e7os')\nplt.xlabel('Periodo')\nlegend = ax.legend(loc='upper left')","48419edd":"#Modelo Naive sem sazonalidade\nnaive = ARIMA(dados, order=(0, 0, 0))\nnaive_treinado = naive.fit()\nprint(naive_treinado.summary())","8135d744":"plt.rcParams.update({'figure.figsize':(9,3)})\nnaive_treinado.plot_predict(start=1,end=230)\nplt.show()","a817288a":"#Modelo naive com sazonalidade\n\nsnaive = ARIMA(dados, order=(0, 1, 0))\nsnaive_treinado = snaive.fit()\nprint(snaive_treinado.summary())","c354b86b":"#Treinando o modelo com sazonalidade\nsnaive_treinado.plot_predict(start=1,end=230)\nplt.show()","8bf04798":" #sem Tendencia e Ajuste sazonal\nmodel = ExponentialSmoothing(dados)\nhw_model = model.fit()\npred = hw_model.predict(start=dados.index[0], end=dados.index[219])\nplt.title('Holt-Winters Filtering')\nplt.plot(dados.index, dados, label='Original', color='k')\nplt.plot(pred.index, pred, label='Holt-Winters',color='r')\nplt.legend(loc='best');","49ba274c":"#Modelo com tendencia e ajuste sazonal\n\nmodel = ExponentialSmoothing(dados, trend='mul',seasonal='mul')\nhw_model = model.fit(optimized=True, use_boxcox=False, remove_bias=False)\npred = hw_model.predict(start=14, end=219)\nplt.title('Holt-Winters Filtering, com Tendencia e Ajuste sazonal')\nplt.plot(dados.index, dados, label='Original')\nplt.plot(pred.index, pred, label='Holt-Winters')\nplt.legend(loc='best');\nplt.show()","4173655d":"#Modelo Holt-Winters com Tendencia e Ajuste sazonal, previs\u00e3o para 36 meses\n\nmodel = ExponentialSmoothing(dados, seasonal_periods=7 ,trend='add', seasonal='mul',damped=True,)\nhw_model = model.fit()\npred = hw_model.predict(start='2019-11-01', end='2022-10-01')\nplt.title('Holt-Winters Filtering, com Tendencia e Ajuste sazonal')\nplt.plot(dados.index, dados, label='Original')\nplt.plot(pred.index, pred, label='Holt-Winters')\nplt.legend(loc='best');\nplt.show()","48188cef":"# Modelo Arma\n","d5dbfbfb":"# Modelo Arima","3d7e1b2b":"# Apresenta\u00e7\u00e3o\/Ajuste dos Dados","ecf1fa57":"# Modelo Naive\n","ed9fb144":"# Holt-Winters"}}