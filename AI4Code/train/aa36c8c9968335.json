{"cell_type":{"a40a7957":"code","a2e32cf8":"code","97d6c8f8":"code","6bcaaab6":"code","717221e9":"code","ebbc484b":"code","cd32258d":"code","a5dbe9cc":"code","eedd64bf":"code","f2386c02":"code","2d0959da":"code","1a642aec":"code","4651fefd":"code","a933e4e4":"code","82639952":"code","471e830a":"code","5accb060":"code","cf4c85cd":"code","4ca2a9bb":"code","6cd4e3b0":"code","30999ad1":"code","f89e4ad2":"code","fc75f918":"code","4916a7ad":"code","289e834b":"code","eddae300":"code","2178c0e5":"code","85ce9bec":"code","143b5873":"code","c3985eeb":"code","e434bb73":"code","bd408c55":"code","e3a33611":"code","3b9192be":"code","0f81b00b":"code","a073e3cb":"code","a5a8c17e":"code","67b6ffca":"code","46d130fc":"code","ac02b538":"code","7a374902":"code","dcd12b4d":"code","0238e6c6":"code","c92c6e69":"markdown","6c21c3e6":"markdown","a77182ab":"markdown","d3e9f157":"markdown","9f5a3bca":"markdown","ca65fc76":"markdown","2a6938e9":"markdown","c99a2ed4":"markdown","2cc44bbc":"markdown","6b35b64a":"markdown","39875899":"markdown","4a71e2c4":"markdown","e5f2c633":"markdown","94659695":"markdown","cc7bb9df":"markdown","f84afff1":"markdown","ff8d2a4e":"markdown","b4697266":"markdown","e8eae044":"markdown","649f57a5":"markdown","08365051":"markdown","72b48c7c":"markdown","e528a071":"markdown","6c819ed9":"markdown","b7b62ca0":"markdown","d0bb7537":"markdown","6bccbb21":"markdown","2c1da5b6":"markdown","e95af70a":"markdown","09e1f0fa":"markdown","50045a18":"markdown","9f84fdc6":"markdown","1f513eda":"markdown"},"source":{"a40a7957":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2e32cf8":"#to ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","97d6c8f8":"#reading the dataset\ndf = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","6bcaaab6":"df.head()","717221e9":"df.shape","ebbc484b":"#checking for duplicate values in the dataset\ndf.duplicated().sum()","cd32258d":"import seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","a5dbe9cc":"sns.countplot(x = df['type'], data = df);","eedd64bf":"directors = df.director.value_counts().head(10)\nsns.barplot(x = directors, y = directors.index);\nplt.ylabel('director');\nplt.xlabel('no. of movies')","f2386c02":"ratings = df['rating'].value_counts()\nsns.barplot(x= ratings, y= ratings.index);\nplt.ylabel('rating');\nplt.xlabel ('number of movies');","2d0959da":"country = df.country.value_counts().head(10)\nsns.barplot(x = country, y = country.index);\nplt.ylabel('country');\nplt.xlabel ('number of movies');","1a642aec":"df['duration'].value_counts()","4651fefd":"movies = df[(df['type'] == \"Movie\")]\nmovies.head()","a933e4e4":"movies['duration'].value_counts()","82639952":"movie_time = movies['duration'].value_counts().head(50)\n\nplt.figure(figsize=(20, 10));\nsns.barplot(x = movie_time.index, y = movie_time);\nplt.xticks(rotation=90);\nplt.ylabel('number of movies');\nplt.xlabel ('Duration(min)');","471e830a":"movies['duration'] = movies['duration'].str.extract(\"([-+]?\\d*\\.\\d+|[-+]?\\d+)\").astype(float)","5accb060":"movies.head()","cf4c85cd":"sns.kdeplot(movies['duration']);","4ca2a9bb":"movies.sort_values('duration', ascending = False).head(1)","6cd4e3b0":"movies.sort_values('duration', ascending = True).head(1)","30999ad1":"df.columns","f89e4ad2":"#creating a new dataframe with desired columns\nmovies_df = df[[ 'title', 'director', 'cast', 'description', 'country', 'rating','listed_in']]","fc75f918":"movies_df.head()","4916a7ad":"movies_df.isnull().sum()","289e834b":"movies_df['director'] = movies_df['director'].fillna('')\nmovies_df['cast'] = movies_df['cast'].fillna('')\nmovies_df['country'] = movies_df['country'].fillna('')\nmovies_df['rating'] = movies_df['rating'].fillna('')","eddae300":"movies_df.isnull().sum()","2178c0e5":"# i will only use top ten cast members\nmovies_df['cast'] = movies_df['cast'].apply(lambda x:x.split(\", \")[0:10])","85ce9bec":"movies_df.cast.head()","143b5873":"movies_df['description'] = movies_df['description'].apply(lambda x:x.split())\nmovies_df['rating'] = movies_df['rating'].apply(lambda x:x.split())\nmovies_df['country'] = movies_df['country'].apply(lambda x:x.split(\",\"))\nmovies_df['director'] = movies_df['director'].apply(lambda x:x.split(\",\"))\nmovies_df['listed_in'] = movies_df['listed_in'].apply(lambda x:x.split(\",\"))","c3985eeb":"movies_df['features'] = movies_df['cast']+movies_df['description']+movies_df['rating']+movies_df['country']+movies_df['director']+movies_df['listed_in']","e434bb73":"feature_df = movies_df[['title', 'features']]","bd408c55":"feature_df.head()","e3a33611":"#removing empty elements\nfeature_df['features']= feature_df['features'].apply(lambda x : list(filter(None, x)))","3b9192be":"#removing space from a name, country to make it a single word\nfeature_df['features']=feature_df['features'].apply(lambda x : [i.replace(\" \", \"\") for i in x])","0f81b00b":"#converting the list into a string\nfeature_df['features']=feature_df['features'].apply(lambda x : \" \".join(x))","a073e3cb":"#converting the string to lowercase\nfeature_df['features']=feature_df['features'].apply(lambda x : x.lower())","a5a8c17e":"feature_df.head()","67b6ffca":"from sklearn.feature_extraction.text import CountVectorizer\n#max_feature attribute will only use top 5000 words ocurring with high frequency\n#stop_words will skip helper words in english language eg: in to the etc.\ncv = CountVectorizer(max_features=5000, stop_words='english')\nvector = cv.fit_transform(feature_df['features']).toarray()","46d130fc":"from sklearn.metrics.pairwise import cosine_similarity\nsimilarity = cosine_similarity(vector)\nsimilarity","ac02b538":"movie = 'Jaane Tu... Ya Jaane Na'","7a374902":"movie_index = feature_df[feature_df['title'] == movie].index[0]","dcd12b4d":"similar_movies = sorted(list(enumerate(similarity[movie_index])),reverse=True,key = lambda x: x[1])\nsimilar_movies[0:6]","0238e6c6":"for i in similar_movies[1:6]:\n        print(feature_df.iloc[i[0]].title)","c92c6e69":"## Number of Movies\/TV shows for different ratings","6c21c3e6":"I created a new dataframe with only title and features column","a77182ab":"As is obvious from the above plot that most of the content on netflix is rated TV-MA i.e for mature audiences (above age 17).","d3e9f157":"To calculate similarity between any two movies, firstly we will convert them into vectors and then calculate the cosine distance between them. To covert a movie into a vector I used CountVectorizer from sklearn library.","9f5a3bca":"United states has produced most of the content in the dataset.Duration wise breakdown of the content.","ca65fc76":"## Longest Movie","2a6938e9":"Number of TV shows are less than half the number of movies in the dataset.\n\n## Top ten directors with the most number of movies","c99a2ed4":"NaN values will be problematic so I replaced them with empty strings.","2cc44bbc":"TV shows has on the minimum only 1 season and maximum 3 seasons but with movies there is a wide range of duration. So, I stored all the movies in a different dataframe for the analysis.","6b35b64a":"I have written a blog about this notebook, if you want you can read about it there also.\nhttps:\/\/manigarg0000.medium.com\/netflix-movies-and-tv-show-analysis-b9f0e3a6c335\n","39875899":"This is how the data looks like. It has columns like title, whether it is a movie or a tv show, rating, release date etc.","4a71e2c4":"Importing matplotlib and seaborn for visualization","e5f2c633":"# netflix-movie-recommendation-and-eda\u00b6\nI built a recommendation system with the data of movies and tv shows available on netflix and also performed some basic exploratory data analysis on the dataset. The dataset is available on Kaggle here https:\/\/www.kaggle.com\/shivamb\/netflix-shows.","94659695":"I combined all the above columns into a new column.","cc7bb9df":"longest movie is Black Mirror Bandersnatch of 312 mins (5.2 hrs) long.","f84afff1":"And to calculate cosine distance i used cosine_similarity from sklearn library.","ff8d2a4e":"The column now look like this.","b4697266":"## Shortest Movie","e8eae044":"It is obvious from the plot that most movies of duration 75 - 115 minutes.","649f57a5":"I won't use all the columns in the model, only those which will be helpful to calculate the similarity between two movies","08365051":"similarity is a matrix of shape. So I fetched the row at movie_index to extract the similarity of given movie with other movies. And convert it into a list and sort it to get the first five most similar movies. But to sort it first it needs to enumerated first so that the index numbers of them movies is known to fetch the titles.","72b48c7c":"This gives similarity score of every movie with every other movie. To get top five most similar movies I fetched the index number of the given movie.","e528a071":"It has 8807 rows and 12 columns.\n\nThe data was ready to use as it for our analysis except for some NaN values which I thought would not interfere with the analysis part, so i did not change it.","6c819ed9":"Then i fetched the first five movie titles using their index.","b7b62ca0":"There are 205 distinct values in the duration column so it didn't make much sense to plot all, because most of the values occur only once. So, I took top 50 durations.","d0bb7537":"# Exploratory data analysis","6bccbb21":"The columns director, cast, description, country, rating and listed in contains string values. I want to combine all of these into a single column. To do that first I individually converted each of the columns in to a list and then combine them.","2c1da5b6":"shortest movie is only 3 min long short film named Silent.","e95af70a":"The plot above surely looks beautiful but there not much to make a solid conclusion. A Kernel Distribution Estimation Plot is a good choice in this case. But the duration column has a type object so I first converted it to float for the kdeplot.","09e1f0fa":"Firstly, I plotted a chart to compare the number of Movies and TV shows in the data.","50045a18":"So That was the analysis, Now I will make a recommendation system.\n\nMostly there are two types of recommendation systems:\n1.Content based : based on the similarity between content that the user has already consumed and the recommended content\n2.Collaborative based : based on behaviour of similar users, the content that one user consumes is recommended to other\nI am using content based filering method for the model","9f84fdc6":"Then i performed some operations on features column to make it more suitable for the model","1f513eda":"## Top ten countries with most content produced."}}