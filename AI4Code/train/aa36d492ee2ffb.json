{"cell_type":{"65865fca":"code","e1c4fef3":"code","1d5ea4de":"code","2a397d10":"code","6b7dbde9":"code","9244b0a9":"code","f33cabd7":"code","7d727829":"code","96866e9d":"code","2d16201a":"code","13bb1652":"code","4a8c0cea":"code","0072864e":"code","9b7dbfec":"code","2436a1e2":"code","3f4f1fa1":"code","549f9d71":"code","5b4eeb9d":"code","d2fb9f1a":"code","d081e55e":"code","08df8a66":"code","081a3614":"code","d797af88":"code","b2acd08b":"code","5e39c537":"code","cc894999":"code","bfa8b355":"code","2ffc169e":"code","6b70a8cc":"code","f08a61df":"code","49e1f43f":"code","2447b761":"code","1b4cad22":"code","e4b3068d":"code","b7dd18fb":"code","fbc60e49":"code","e0202a40":"code","f8a4b82e":"code","9a1b424b":"markdown","271d3432":"markdown","913296be":"markdown"},"source":{"65865fca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1c4fef3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1d5ea4de":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","2a397d10":"train.head()","6b7dbde9":"train.isnull().sum()","9244b0a9":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","f33cabd7":"sns.set_style('whitegrid')\nsns.countplot(x='Survived', data=train)","7d727829":"sns.set_style('whitegrid')\nsns.countplot(x='Survived', hue='Pclass', data=train, palette='rainbow')","96866e9d":"sns.histplot(train['Age'].dropna(), kde=False, color='darkred', bins=40)","2d16201a":"sns.countplot(x='SibSp', data=train)","13bb1652":"sns.histplot(train['Fare'])","4a8c0cea":"sns.pairplot(train)","0072864e":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass', y='Age', data=train)","9b7dbfec":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='SibSp', y='Age', data=train)","2436a1e2":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","3f4f1fa1":"train_size, test_size = train.shape[0], test.shape[0]\nx, y = train.drop('Survived', axis=1), train['Survived']\n\nx_total = pd.concat([x, test])","549f9d71":"# fill the missing age based on normal distribution\ndef impute_age_normal(df, colname='Age'):\n    mean = df[colname].mean()\n    std = df[colname].std()\n    null_count = df[colname].isnull().sum()\n    null_vector = df[colname].isnull()\n    \n    normal_fill = np.random.randint(mean-std, mean+std, size=null_count)\n    col_val = df[colname].copy()\n    col_val[null_vector] = normal_fill\n    return col_val","5b4eeb9d":"# train['Age'] = train[['Age', 'Pclass']].apply(impute_age, axis=1)\nx_total['Age'] = impute_age_normal(x_total, 'Age')\nx_total['Fare'] = impute_age_normal(x_total, 'Fare')\nembarked_mode = x_total['Embarked'].mode()\nx_total['Embarked'].fillna('S', inplace=True)","d2fb9f1a":"x_total.drop('Cabin', axis=1, inplace=True)","d081e55e":"sex = pd.get_dummies(x_total['Sex'], drop_first=True)\nembark = pd.get_dummies(x_total['Embarked'], drop_first=True)","08df8a66":"x_total = pd.concat([x_total, sex, embark], axis=1)","081a3614":"from sklearn.preprocessing import minmax_scale\n\nx_total[['Age', 'Fare']] = minmax_scale(x_total[['Age', 'Fare']])\n\nx, test = x_total.iloc[:train_size, :], x_total.iloc[train_size:, :]\n\nx.drop(['Sex', 'Embarked', 'Name', 'Ticket', 'PassengerId', 'Fare'], axis=1, inplace=True)","d797af88":"x","b2acd08b":"from sklearn.model_selection import train_test_split","5e39c537":"x_train, x_test, y_train, y_test = train_test_split(x,\n                                                   y, test_size=0.3,\n                                                    random_state=101\n                                                   )","cc894999":"from sklearn.linear_model import LogisticRegression","bfa8b355":"logmodel = LogisticRegression()\nlogmodel.fit(x_train, y_train)","2ffc169e":"predictions = logmodel.predict(x_test)","6b70a8cc":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_test, predictions)","f08a61df":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, predictions)","49e1f43f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\n\nfrom sklearn.model_selection import cross_val_score\n\nmodels = []\n\nmodels.append((\"LogisticRegression\",LogisticRegression()))\nmodels.append((\"SVC\",SVC()))\nmodels.append((\"LinearSVC\",LinearSVC()))\nmodels.append((\"KNeighbors\",KNeighborsClassifier()))\nmodels.append((\"DecisionTree\",DecisionTreeClassifier()))\nmodels.append((\"RandomForest\",RandomForestClassifier()))\nrf2 = RandomForestClassifier(n_estimators=100, criterion='gini',\n                                max_depth=8, random_state=0, max_features=None)\nmodels.append((\"RandomForest2\",rf2))\nmodels.append((\"MLPClassifier\",MLPClassifier(hidden_layer_sizes=(64, 128, 128), solver='adam', learning_rate='adaptive', random_state=0)))\n\npredictors = [\"Pclass\", \"Age\", \"Sex\"]\nresults = []\nnames = []\nfor name,model in models:\n    result = cross_val_score(model, x_train, y_train,  cv=3)\n    names.append(name)\n    results.append(result)\n\nfor i in range(len(names)):\n    print(names[i],results[i].mean())","2447b761":"model2 = MLPClassifier(hidden_layer_sizes=(64, 128, 128), solver='adam', learning_rate='adaptive', random_state=0)\nmodel2.fit(x_train, y_train)","1b4cad22":"predictions = model2.predict(x_test)\naccuracy_score(y_test, predictions)","e4b3068d":"# test = pd.read_csv('titanic\/test.csv')\npids = test['PassengerId']\n\ntest['Age'] = test[['Age', 'Pclass']].apply(impute_age, axis=1)\n\n# test.drop('Cabin', axis=1, inplace=True)\n# sex = pd.get_dummies(test['Sex'], drop_first=True)\n# embark = pd.get_dummies(test['Embarked'], drop_first=True)\n\ntest.drop(['Sex', 'Embarked', 'Name', 'Ticket', 'PassengerId', 'Fare'], axis=1, inplace=True)\n\n# test = pd.concat([test, sex, embark], axis=1)","b7dd18fb":"test","fbc60e49":"predictions = model2.predict(test)","e0202a40":"predictions","f8a4b82e":"pd.DataFrame({'PassengerId': pids, 'Survived': predictions}).to_csv(\"titanic\/titanic_output2.csv\", index=False)","9a1b424b":"# Testing multiple Models","271d3432":"## Model Building","913296be":"Based on the Pclass, we'll implement a simple age imputer."}}