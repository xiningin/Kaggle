{"cell_type":{"882472b5":"code","0c07b31e":"code","aa34c0ec":"code","cc3d7b4b":"code","58fe2a61":"code","283fa587":"code","0ad361f5":"code","11596f17":"code","dd5ea9cb":"code","71d4adb2":"code","a1efb40b":"code","518b341d":"code","08a66643":"code","a5ab966a":"code","b26d10c7":"code","6aaf2a81":"code","eb4ee048":"code","36fefcb6":"code","97ac29c3":"code","9abfdf45":"code","9d03d133":"code","8090cd8c":"code","f4346189":"code","1c23160e":"code","65c4c0ae":"code","cd71cb49":"code","6f738f76":"code","1ffad7be":"code","326f4644":"code","f27801c4":"code","efd66878":"code","b4519d77":"markdown","4436b1b1":"markdown","564b3379":"markdown","4854fb2f":"markdown","48c1516e":"markdown","4420e572":"markdown","a0e20919":"markdown","00a457c3":"markdown","01f95231":"markdown","16dfdf76":"markdown","0e7d389a":"markdown"},"source":{"882472b5":"import numpy as np\nimport pandas as pd\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, AveragePooling2D, Activation, Dropout, Flatten, Dense, BatchNormalization, Input\nfrom keras import backend as K\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport glob\nfrom pathlib import Path\nimport cv2\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom keras.models import load_model\nfrom keras.utils import to_categorical\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import precision_recall_fscore_support","0c07b31e":"# Get the path for pneumonia and normal sub-directories\npneumonia = '..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA'\nnormal = '..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL'\npneumonia1 = Path(pneumonia)\nnormal1 = Path(normal)\n\npneumonia_name = pneumonia1.glob('*.jpeg') #listing all the images names from pneumonia class\nnormal_name = normal1.glob('*.jpeg') #listing all the images names from non-pneumonia class\n\ntraining_data = [] #Empty list to combine\n\nfor img in pneumonia_name:\n    training_data.append((img, 0))\nfor img in normal_name:\n    training_data.append((img, 1))","aa34c0ec":"df = pd.DataFrame(training_data, columns = ['image_name', 'label'], index = None)\ndf.head()","cc3d7b4b":"df.tail()","58fe2a61":"df['label'].value_counts()","283fa587":"plt.figure(figsize = (10, 10))\nsns.countplot(y = 'label', data =df)\nplt.title('Countplot of nuemoina and normal patients')\nplt.xlabel('Count of patients')\nplt.ylabel('Pnuemoina VS normal')","0ad361f5":"pneumonia_data = df[df['label'] == 0]['image_name'].iloc[:10].tolist()\nnormal_data = df[df['label'] == 1]['image_name'].iloc[:10].tolist()","11596f17":"fig = plt.figure(figsize = (30, 10))\nplt.subplot(2,5,1)\nimage = cv2.imread(str(pneumonia_data[0]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,2)\nimage = cv2.imread(str(pneumonia_data[1]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,3)\nimage = cv2.imread(str(pneumonia_data[2]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,4)\nimage = cv2.imread(str(pneumonia_data[3]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,5)\nimage = cv2.imread(str(pneumonia_data[4]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,6)\nimage = cv2.imread(str(normal_data[0]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)\n\nplt.subplot(2,5,7)\nimage = cv2.imread(str(normal_data[1]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)\n\nplt.subplot(2,5,8)\nimage = cv2.imread(str(normal_data[2]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)\n\nplt.subplot(2,5,9)\nimage = cv2.imread(str(normal_data[3]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)\n\nplt.subplot(2,5,10)\nimage = cv2.imread(str(normal_data[4]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)","dd5ea9cb":"fig = plt.figure(figsize = (30, 10))\nplt.subplot(2,5,1)\nimage = cv2.imread(str(pneumonia_data[5]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,2)\nimage = cv2.imread(str(pneumonia_data[6]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,3)\nimage = cv2.imread(str(pneumonia_data[7]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,4)\nimage = cv2.imread(str(pneumonia_data[8]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,5)\nimage = cv2.imread(str(pneumonia_data[9]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Pneumonia', fontsize = 20)\n\nplt.subplot(2,5,6)\nimage = cv2.imread(str(normal_data[5]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)\n\nplt.subplot(2,5,7)\nimage = cv2.imread(str(normal_data[6]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)\n\nplt.subplot(2,5,8)\nimage = cv2.imread(str(normal_data[7]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)\n\nplt.subplot(2,5,9)\nimage = cv2.imread(str(normal_data[8]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)\n\nplt.subplot(2,5,10)\nimage = cv2.imread(str(normal_data[9]))\nplt.imshow(image, aspect=\"auto\")\nplt.title('Normal', fontsize = 20)","71d4adb2":"img_height, img_width = 256, 256\nepochs = 10\nbatch_size = 32\ntrain_dir ='..\/input\/chest-xray-pneumonia\/chest_xray\/train'\nvalidation_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/val'\ntest_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/test'\nnb_train_samples = 5216\nnb_validation_samples = 16","a1efb40b":"if K.image_data_format() == 'channel_first':\n    input_shape = (3, img_height, img_width)\nelse:\n    input_shape = (img_height, img_width, 3)","518b341d":"#Instantiate an empty model\nmodel = Sequential()\n\n# Convolutional Layer\nmodel.add(Conv2D(6, kernel_size=(5, 5), strides=(1, 1), activation='tanh', input_shape=input_shape, padding=\"same\"))\n\n# Pooling Layer\nmodel.add(AveragePooling2D(pool_size=(2, 2), strides=(1, 1), padding='valid'))\n\n# Convolutional Layer\nmodel.add(Conv2D(16, kernel_size=(5, 5), strides=(1, 1), activation='tanh', padding='valid'))\n\n# Pooling Layer\nmodel.add(AveragePooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))\n\n# Fully Connected Convolutional Layer\nmodel.add(Conv2D(120, kernel_size=(5, 5), strides=(1, 1), activation='tanh', padding='valid'))\n\n#Flatten the CNN output so that we can connect it with fully connected layers\nmodel.add(Flatten())\n\n# Fully Connected Layer\nmodel.add(Dense(84, activation='tanh'))\n\n#Output Layer with softmax activation\nmodel.add(Dense(2, activation='softmax'))","08a66643":"model.summary()","a5ab966a":"#compiling the model\nmodel.compile(optimizer =Adam(lr = 0.001, decay = 1e-4), loss = 'binary_crossentropy', metrics = ['accuracy'] )","b26d10c7":"train_datagen = ImageDataGenerator(\n                rescale = 1. \/ 255,\n                shear_range = 0.2,\n                zoom_range = 0.2,\n                horizontal_flip = True,\n                rotation_range = 40,\n                width_shift_range = 0.2,\n                height_shift_range = 0.2)\n\ntest_datagen = ImageDataGenerator(rescale=1. \/ 255)","6aaf2a81":"train_generator = train_datagen.flow_from_directory(\n                train_dir,\n                target_size=(img_width, img_height),\n                batch_size=batch_size,\n                class_mode='categorical')","eb4ee048":"for data, labels in train_generator:\n    print(data.shape)\n    print(labels.shape)\n    print(labels)\n    break","36fefcb6":"validation_generator = train_datagen.flow_from_directory(\n                    validation_dir,\n                    target_size=(img_width, img_height),\n                    batch_size=batch_size,\n                    class_mode='categorical')","97ac29c3":"test_generator = test_datagen.flow_from_directory(\n                    test_dir,\n                    target_size=(img_width, img_height),\n                    batch_size=1,\n                    shuffle = False,\n                    class_mode='categorical')","9abfdf45":"print(test_generator.class_indices)","9d03d133":"checkpointer = ModelCheckpoint(filepath = 'model.h5',\n                       verbose = 1,\n                       mode = 'auto',\n                       save_best_only = True,\n                       monitor='val_loss')","8090cd8c":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch = nb_train_samples \/\/ batch_size,\n    epochs = epochs,\n    validation_data=validation_generator,\n    validation_steps=nb_validation_samples \/\/ batch_size, \n    callbacks=[checkpointer])","f4346189":"history.history.keys()","1c23160e":"acc = history.history['accuracy']\n#val_acc = history.history['val_acc']\nloss = history.history['loss']\n#val_loss = history.history['val_loss']\nplt.figure(figsize = (8, 8))\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, loss, 'bo', label='Training loss')\n#plt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training loss and training accuracy')\nplt.legend()","65c4c0ae":"scores = model.evaluate_generator(test_generator, steps = 624)","cd71cb49":"print(\"Loss on Test Data is\", scores[0])\nprint(\"Accuracy on Test Data is\", scores[1] * 100,\"%\")","6f738f76":"pred = model.predict_generator(test_generator, steps = 624)","1ffad7be":"pred = np.argmax(pred, axis = 1)","326f4644":"normal_test_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL'\npneumonia_test_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA'\n\nnormal_test = Path(normal_test_dir).glob('*.jpeg')\npneumonia_test = Path(pneumonia_test_dir).glob('*.jpeg')\n\ntest_labels = []\n\nfor img in normal_test:\n    label = to_categorical(0, num_classes = 2)\n    test_labels.append(label)\n\nfor img in pneumonia_test:\n    label = to_categorical(1, num_classes = 2) \n    test_labels.append(label)\n    \ntest_labels = np.array(test_labels)","f27801c4":"test_labels","efd66878":"y_true = np.argmax(test_labels, axis = 1)","b4519d77":"* # Pneumonia Diagnosis using LeNet-5 architecture\n\nHello everyone!!! Hope all are doing well and enjoying the things on Kaggle. \n\nBeing a Machine Learning Engineer it is our responsibility to apply predictive modeling in the medical domain. The applications of ML and DL have a huge scope on healthcare but applying them without domain knowledge isn\u2019t a simple thing. So in this kernel, I will walk you through LeNet-5 architecture for detecting pneumonia. The whole aim of this notebook is to understand and apply the LeNet-5 architecture for this dataset. Also, I will be covering the various model architectures in Keras like VGG, Alexnet, and so on with this dataset and will be comparing them in separate discussions. \n\n#### Pneumonia\nPneumonia is a very common disease and it has the following types.\n* Bacterial pneumonia\n* Viral Pneumonia \n* Mycoplasma pneumonia \n* Fungal pneumonia\n\n#### Dataset description:\nThe dataset contains 5,863 x-rays images (JPEG) divided into two categories (pneumonia \/ normal).\nThe dataset contains 3 subsets: train, value, test. We will train the model only on the training set.\nAll chest x-rays were taken as part of routine clinical care.\nAll chest x-rays were taken as part of routine clinical care. Chest X-ray images (anterior-posterior) were selected from retrospective cohorts of pediatric patients of one to five years old from Guangzhou Women and Children\u2019s Medical Center, Guangzhou.\n\n\n#### Performance Metrics : \n        1. Confusion Matrix\n        2. Precision, Recall\nPrecision also cannot be taken as single metric and has less significance than recall for this dataset because we want to minimize false negative.\n\nFalse negative has to be intuitively minimized because falsely diagnosing a patient of pneumonia as not having a pneumonia is a much larger deal than falsely diagnosing a healthy person as a pneumonia patient which is our major concern . That is why we are making this model . To reduce the mistakes done by doctors accidentally .\n\n#### Importing the libraries","4436b1b1":"There are 3875 X-ray images of pnuemonia and 1341 images of normal patients.","564b3379":"#### Data Augmentation","4854fb2f":"As you can see from above plot the count of pnuemonia patients are almost 3 times more than the normal patients. So this is imbalanced dataset. Therefore validation accuracy won't be a good metric to analyze the model performance","48c1516e":"Loading the model with minimum validation loss.\n* NOTE : This is model will not be model trained at last epoch becuase we have used the keras callback function to save the best model at intermediate epochs.","4420e572":"Building LeNet-5 network architecutre.","a0e20919":"We will first go through the training data and do some analysis on that like number of samples per class,etc.\nThe training directory has two another sub-directories:\n* Pneumonia : This directorty has all samples X-ray images which describes pneumonia.\n* Normal : These are the images which describes normal cases.","00a457c3":"Visualizing some images of both the categories.","01f95231":"Making Checkpoint each epoch to check and save the best model performance till last and also avoiding further validation loss drop due to overfitting.","16dfdf76":"Visualizing training and validation performance on dataset.","0e7d389a":"If you look carefully in above plots there are some cases where we won't be able to classify between a normal case and pneumonia case with our naked eyes but of course the expert peoples in medical domain can figure out difference between them."}}