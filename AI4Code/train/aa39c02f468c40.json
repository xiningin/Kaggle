{"cell_type":{"87e52997":"code","459eda77":"code","be3d3baa":"code","cf68a79c":"code","0b909dab":"code","7cc6173e":"code","58dbfa93":"code","cc2b2e6a":"code","2cb3f522":"markdown","9d90d3a9":"markdown","0886ca7d":"markdown","f0091655":"markdown","d0e0a6e2":"markdown"},"source":{"87e52997":"def get_direction(food_row, player_row, food_column, player_column, forbidden_directions):\n    direction = None\n    row_difference = abs(food_row - player_row)\n    col_difference = abs(food_column - player_column)\n\n    other_row_difference = 7 - row_difference\n    other_col_difference = 11 - col_difference\n\n    if food_row > player_row:\n        if row_difference > other_row_difference and \"NORTH\" not in forbidden_directions:\n            direction = \"NORTH\"\n        elif row_difference < other_row_difference and \"SOUTH\" not in forbidden_directions:\n            direction = \"SOUTH\"\n    if food_row < player_row:\n        if row_difference < other_row_difference and \"NORTH\" not in forbidden_directions:\n            direction = \"NORTH\"\n        elif row_difference > other_row_difference and \"SOUTH\" not in forbidden_directions:\n            direction = \"SOUTH\"\n\n    if food_column > player_column:\n        if col_difference < other_col_difference and \"EAST\" not in forbidden_directions:\n            direction = \"EAST\"\n        elif col_difference > other_col_difference  and \"WEST\" not in forbidden_directions:\n            direction = \"WEST\"\n    if food_column < player_column:\n        if col_difference > other_col_difference and \"EAST\" not in forbidden_directions:\n            direction = \"EAST\"\n        elif col_difference < other_col_difference  and \"WEST\" not in forbidden_directions:\n            direction = \"WEST\"\n    \n    return direction","459eda77":"def get_closest_food(player_row, player_column, observation, configuration):\n    foods = observation.food\n    distances = []\n    for i in range(len(foods)):\n        food_row, food_column = row_col(foods[i], configuration.columns)\n        total_distance = (food_row - player_row)**2 + (food_column - player_column)**2\n        distances.append(total_distance)\n    min_distance_index = distances.index(min(distances))\n    closest_food = foods[min_distance_index]\n    food_row, food_column = row_col(foods[min_distance_index], configuration.columns)\n    return food_row, food_column","be3d3baa":"\ndef get_allgoose_directions(observation, configuration):\n\n    number_of_geese = len(observation.geese)\n    all_forbidden_directions = [] \n    all_allowed_directions = []\n  #  print(\"New positions\", new_positions)\n   # print(observation.step)\n    if observation.step == 0:\n        for i in range(number_of_geese):\n            previous_directions.append(None) \n            if len(new_positions) < 2:\n                new_positions.append(None)\n   # print(\"New positions after append\", new_positions)\n   # print(new_positions)\n    banned_directions = {\"EAST\" : \"WEST\", \"WEST\" : \"EAST\", \"NORTH\" : \"SOUTH\", \"SOUTH\" : \"NORTH\"}\n    directions_2 = {\"NORTH\" : Action.NORTH.name, \"SOUTH\" : Action.SOUTH.name, \"EAST\" : Action.EAST.name, \"WEST\" : Action.WEST.name}\n    directions = {\"NORTH\" : [-1, 0], \"SOUTH\" : [1, 0], \"EAST\" : [0,1], \"WEST\" : [0,-1]}\n    for i in range(number_of_geese):\n        forbidden_directions = []\n        allowed_directions = list(directions_2.values())\n        previous_direction = previous_directions[i]\n        if previous_direction is not None:\n            banned_direction = banned_directions[previous_direction]\n        else:\n            banned_direction = None\n\n        if banned_direction is not None:\n            allowed_directions.remove(banned_direction)\n            forbidden_directions.append(banned_direction)\n            \n        all_allowed_directions.append(allowed_directions)\n        all_forbidden_directions.append(forbidden_directions)\n\n        player_goose = observation.geese[i]\n        player_head = player_goose[0]\n        player_row, player_column = row_col(player_head, configuration.columns)\n        food_row, food_column = get_closest_food(player_row, player_column, observation, configuration)\n        direction = get_direction(food_row, player_row, food_column, player_column, forbidden_directions)\n        #print(\"New positions before\", new_positions)\n        if direction is None:\n            new_positions[i] = (player_row, player_column, direction)\n        else:\n            add_row = directions[direction][0]\n            add_col = directions[direction][1]\n            new_row = player_row + add_row\n            new_column = player_column + add_col\n            new_positions[i] = (new_row, new_column, direction)\n        \n    \n\n        previous_direction = direction\n        previous_directions[i] = previous_direction\n    #print(\"new positions after\", new_positions)\n    return previous_directions, new_positions, all_forbidden_directions, all_allowed_directions\n        ","cf68a79c":"def check_collision(observation, configuration, my_intended_direction, all_forbidden_directions, all_allowed_directions, my_index, my_new_row, my_new_col):\n    my_goose = observation.geese[my_index]\n    my_goose_head = my_goose[0]\n    my_goose_row, my_goose_col = row_col(my_goose_head, configuration.columns)\n    for i in range(len(my_goose)):\n        row, col = row_col(my_goose[i], configuration.columns)\n        if my_new_row == row and my_new_col == col:\n            print(\"Will hit own body if move\", my_intended_direction)\n            all_forbidden_directions[my_index].append(my_intended_direction)\n            if my_intended_direction in all_allowed_directions[my_index]:\n                all_allowed_directions[my_index].remove(my_intended_direction)\n    return all_forbidden_directions, all_allowed_directions","0b909dab":"from kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nimport random\nglobal previous_directions\nglobal new_positions\nglobal directions\nnew_positions = []\nprevious_directions = []   \ndef agent(obs_dict, config_dict):\n    \n    observation = Observation(obs_dict)\n    #print(observation.step)\n    configuration = Configuration(config_dict)\n    #print(configuration) \n    previous_directions, new_positions, all_forbidden_directions, all_allowed_directions = get_allgoose_directions(observation, configuration)\n    my_index = observation.index\n    #print(\"New positions\",new_positions)\n  #  print(all_forbidden_directions[my_index])\n    (my_new_row, my_new_col, my_intended_direction) = new_positions[my_index]\n    #print(new_positions)\n    for i in range(len(new_positions)):\n        (new_row, new_col, directions) = new_positions[i]\n        if i != my_index and my_new_row == new_row and my_new_col == new_col:\n            print(\"Will hit other snake if move \", my_intended_direction)\n            all_forbidden_directions[my_index].append(my_intended_direction)\n            if my_intended_direction in all_allowed_directions[my_index]:\n                all_allowed_directions[my_index].remove(my_intended_direction)\n    \n    while my_intended_direction in all_forbidden_directions[my_index]:\n        if len(all_allowed_directions[my_index]) > 0:\n            my_intended_direction = random.choice(all_allowed_directions[my_index])\n        else:\n            my_intended_direction = random.choice(list(directions_2.values()))\n        all_forbiden_directions, all_allowed_directions = check_collision(observation, configuration, my_intended_direction, all_forbidden_directions, all_allowed_directions, my_index, my_new_row, my_new_col)\n    previous_directions[my_index] = my_intended_direction\n    return my_intended_direction  ","7cc6173e":"from kaggle_environments import evaluate, make, utils\n\n# Setup a hungry_geese environment.\nenv = make(\"hungry_geese\", debug = True)","58dbfa93":"for i in range(1000):\n    env.run([agent, \"random\"])\n    #env.render(mode=\"ipython\", width=500, height=450)","cc2b2e6a":"def mean_reward(rewards):\n    print(rewards)\n    return sum(r[0] for r in rewards) \/ float(len(rewards))\n\n# Run multiple episodes to estimate its performance.\nprint(\"Greedy vs Random Agent:\", mean_reward(evaluate(\"hungry_geese\", [agent, \"random\"], num_episodes=1000)))\nprint(\"Greedy vs Greedy:\", mean_reward(evaluate(\"hungry_geese\", [agent, agent], num_episodes=1000)))","2cb3f522":"# Greedy VS Greedy","9d90d3a9":"* This agent takes advantage of board wrapping and goes for the closest food. It also avoids switching directions eg \"WEST\" to \"EAST\" which is not allowed.\n\n###Add collision detection on other geese bodies\n","0886ca7d":"# Greedy VS Random","f0091655":"# Greedy Agent function","d0e0a6e2":"## Write Submission File"}}