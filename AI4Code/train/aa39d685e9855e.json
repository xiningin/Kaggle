{"cell_type":{"4859e303":"code","b91e9b3e":"code","0dba5c8a":"code","8e9d6ee5":"code","6ec66edf":"code","c7f493f9":"code","b7e3e602":"code","d4035a34":"code","0cc12564":"code","43fc529b":"code","b5704531":"code","b702cc29":"code","3ebdbcbb":"code","fe28f0cd":"code","0f2b9265":"code","713c3f9a":"code","afcbfc26":"code","64755cd2":"code","a195e534":"code","50058ed9":"code","2908b464":"code","bc21c3cc":"code","6c09e059":"code","deef6e6e":"code","42e8ecae":"code","df10863f":"code","5acc6d41":"code","ca27ec4d":"code","fb5fd789":"code","18e49a24":"code","ebf81a51":"code","cad07d8a":"code","e8bdecea":"code","b222bfff":"code","0f334b8e":"code","8ff2ec85":"code","ad31b456":"code","211219f4":"code","9fedd7ed":"code","88d72de1":"code","82cfdde3":"code","556a5fea":"code","65fa1182":"code","ad3f947e":"code","3f0c04e8":"code","605e0cf9":"code","f98af839":"code","69cd8de2":"code","f1f7c988":"code","6520586a":"code","951ea5c0":"code","3ba6a7e7":"code","7223010b":"code","980de2d0":"code","bc9e223c":"code","07b4d034":"code","7cc4faa4":"code","166a5825":"code","710a0e1c":"code","bfc41a0d":"code","1fe07a28":"code","39c4030d":"code","f485fa0b":"code","9f71f65b":"code","300e00d6":"code","fdea1195":"code","bed65e8a":"code","fc1604c0":"code","df0d22e8":"code","8ea808e2":"code","2989871d":"code","573bf872":"code","aba45135":"code","2761530c":"code","66437803":"markdown","3a0af98c":"markdown","a31812b6":"markdown","66de70e3":"markdown","3be02038":"markdown","39a6993c":"markdown","4a104d8e":"markdown","d2c7e31e":"markdown","14c5f26f":"markdown","f0cd58af":"markdown","03982cb4":"markdown","1b89e8b9":"markdown","96c5ccb9":"markdown","fc578e0a":"markdown","b93c2dc5":"markdown","f75e39ea":"markdown","a84deb04":"markdown","948d882e":"markdown","00cbb9e0":"markdown","6482c748":"markdown","0c76b0d0":"markdown","8850bb22":"markdown","255ac023":"markdown","1293ccdf":"markdown","59785ca3":"markdown","1517d1c3":"markdown","41e3f74e":"markdown","6703c5cf":"markdown","a83c4fac":"markdown","22e2bbf7":"markdown","26859fde":"markdown","7d2540da":"markdown","8018d61a":"markdown","489abf9b":"markdown","f8e8a3f8":"markdown","270295b5":"markdown","a0268dae":"markdown","333dc392":"markdown","0256121a":"markdown","de6f6f3b":"markdown","96a0ee84":"markdown","5f133d09":"markdown","57811d33":"markdown","083d0752":"markdown"},"source":{"4859e303":"pip install --upgrade pip'","b91e9b3e":"# Importing required libraries\nimport numpy as np\nimport pandas as pd, datetime\nimport seaborn as sns\nfrom statsmodels.tsa.stattools import adfuller\nimport matplotlib.pyplot as plt\nget_ipython().run_line_magic('matplotlib', 'inline')\nfrom time import time\nimport os\nfrom math import sqrt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport itertools\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import acf,pacf\nfrom statsmodels.tsa.arima_model import  ARIMA\nfrom sklearn import model_selection\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom pandas import DataFrame\nimport xgboost as xgb\nfrom fbprophet import Prophet\nimport warnings\nwarnings.filterwarnings('ignore')","0dba5c8a":"# Import datast \nstore = pd.read_csv('..\/input\/rossmann-store-sales\/store.csv')\ntrain = pd.read_csv('..\/input\/rossmann-store-sales\/train.csv', index_col='Date', parse_dates=True)\ntest = pd.read_csv('..\/input\/rossmann-store-sales\/test.csv')\ntrain.shape, test.shape, store.shape","8e9d6ee5":"train.head()","6ec66edf":"test.head()","c7f493f9":"store.head()","b7e3e602":"train.shape","d4035a34":"# Extract Year, Month, Day, Wee columns \ntrain['Year'] = train.index.year\ntrain['Month'] = train.index.month\ntrain['Day'] = train.index.day\ntrain['WeekofYear'] = train.index.weekofyear\n\ntrain['SalesPerCustomer'] = train['Sales']\/train['Customers']","0cc12564":"train.head()","43fc529b":"# Checking the data when the store is closed \ntrain_store_closed = train[(train.Open == 0)]\ntrain_store_closed.head()","b5704531":"# Check when the store was closed \ntrain_store_closed.hist('DayOfWeek')","b702cc29":"# Check whether there school was closed for holyday \ntrain_store_closed['SchoolHoliday'].value_counts().plot(kind='bar')","3ebdbcbb":"# Check whether there school was closed for holyday \ntrain_store_closed['StateHoliday'].value_counts().plot(kind='bar')","fe28f0cd":"# Check the null values\n# In here there is no null value \ntrain.isnull().sum()","0f2b9265":"# Number of days with closed stores\ntrain[(train.Open == 0)].shape[0]","713c3f9a":"# Okay now check No. of dayes store open but sales zero ( It might be caused by external refurbishmnent)\ntrain[(train.Open == 1) & (train.Sales == 0)].shape[0]","afcbfc26":"# Work with store data \nstore.head()","64755cd2":"# Check null values \n# Most of the columns has null values \n\nstore.isnull().sum()","a195e534":"# Replacing missing values for Competiton distance with median\nstore['CompetitionDistance'].fillna(store['CompetitionDistance'].median(), inplace=True)","50058ed9":"# No info about other columns - so replcae by 0\nstore.fillna(0, inplace=True)","2908b464":"# Again check it and now its okay \n\nstore.isnull().sum().sum()","bc21c3cc":"# Work with test data \ntest.head()","6c09e059":"# check null values ( Only one feature Open is empty)\ntest.isnull().sum()","deef6e6e":"# Assuming stores open in test\ntest.fillna(1, inplace=True)","42e8ecae":"# Again check \ntest.isnull().sum().sum()","df10863f":"# Join train and store table \ntrain_store_joined = pd.merge(train, store, on='Store', how='inner')\ntrain_store_joined.head()","5acc6d41":"train_store_joined.groupby('StoreType')['Customers', 'Sales', 'SalesPerCustomer'].sum().sort_values('Sales', ascending='desc')","ca27ec4d":"# Closed and zero-sales observations \ntrain_store_joined[(train_store_joined.Open == 0) | (train_store_joined.Sales==0)].shape","fb5fd789":"# Open & Sales >0 stores\ntrain_store_joined_open = train_store_joined[~((train_store_joined.Open ==0) | (train_store_joined.Sales==0))]\ntrain_store_joined_open","18e49a24":"plt.figure(figsize=(20, 10))\nsns.heatmap(train_store_joined.corr(), annot=True)","ebf81a51":"# Now plot the sales trend over the month \nsns.factorplot(data = train_store_joined_open, x='Month', y='Sales',\n              col ='Promo', hue='Promo2', row='Year')","cad07d8a":"# Sales and trend over days\nsns.factorplot(data= train_store_joined_open, x='DayOfWeek', y=\"Sales\",\n              hue='Promo')","e8bdecea":"pd.plotting.register_matplotlib_converters()","b222bfff":"# Data Preparation: input should be float type \n\n# our Sales data is int type so lets make it float\ntrain['Sales'] = train['Sales'] * 1.00\n\ntrain['Sales'].head()","0f334b8e":"train.Store.unique()","8ff2ec85":"# Assigning one store from each category\nsales_a = train[train.Store == 2]['Sales']\nsales_b = train[train.Store == 85]['Sales'].sort_index(ascending = True) \nsales_c = train[train.Store == 1]['Sales']\nsales_d = train[train.Store == 13]['Sales']\n\nframe, (ax1, ax2, ax3, ax4) = plt.subplots(4, figsize = (20, 16))\n\n# Visualize Trend \nsales_a.resample('w').sum().plot(ax = ax1)\nsales_b.resample('w').sum().plot(ax = ax2)\nsales_c.resample('w').sum().plot(ax = ax3)\nsales_d.resample('w').sum().plot(ax = ax4)\n\n\n# will be used to resample the speed column of our DataFrame\n#The 'W' indicates we want to resample by week. At the bottom of this post is a summary of different time frames.\n# You could use for Day = d, MOnth = m, Year = y","ad31b456":"# lets create a functions to test the stationarity \ndef test_stationarity(timeseries):\n    # Determine rolling statestics \n    roll_mean = timeseries.rolling(window=7).mean()\n    roll_std = timeseries.rolling(window=7).std()\n    \n    # plotting rolling statestics \n    plt.subplots(figsize = (16, 6))\n    orginal = plt.plot(timeseries.resample('w').mean(), color='blue',linewidth= 3, label='Orginal')\n    roll_mean = plt.plot(roll_mean.resample('w').mean(), color='red',linewidth= 3, label='Rolling Mean')\n    roll_mean = plt.plot(roll_std.resample('w').mean(), color='green',linewidth= 3, label='Rolling Std')\n    \n    plt.legend(loc='best')\n    plt.show()\n    \n    # Performing Dickey-Fuller test \n    print('Result of Dickey-Fuller test:')\n    result= adfuller(timeseries, autolag='AIC')\n    \n    print('ADF Statestics: %f' %result[0])\n    print('P-value: %f' %result[1])\n    print('Critical Values:')\n    for key, value in result[4].items():\n        print(key, value)\n    ","211219f4":"test_stationarity(sales_a)","9fedd7ed":"test_stationarity(sales_b)","88d72de1":"test_stationarity(sales_c)","82cfdde3":"test_stationarity(sales_d)","556a5fea":"# plotting trends and seasonality \n\ndef plot_timeseries(sales,StoreType):\n\n    fig, axes = plt.subplots(2, 1, sharex=True, sharey=False)\n    fig.set_figheight(6)\n    fig.set_figwidth(20)\n\n    decomposition= seasonal_decompose(sales, model = 'additive',freq=365)\n\n    estimated_trend = decomposition.trend\n    estimated_seasonal = decomposition.seasonal\n    estimated_residual = decomposition.resid\n    \n    axes[1].plot(estimated_seasonal, 'g', label='Seasonality')\n    axes[1].legend(loc='upper left');\n    \n    axes[0].plot(estimated_trend, label='Trend')\n    axes[0].legend(loc='upper left');\n\n    plt.title('Decomposition Plots')","65fa1182":"plot_timeseries(sales_a, 'a')","ad3f947e":"plot_timeseries(sales_b, 'b')","3f0c04e8":"plot_timeseries(sales_c, 'c')","605e0cf9":"plot_timeseries(sales_d, 'd')","f98af839":"def auto_corr(sales):\n    lag_acf = acf(sales, nlags=30)\n    lag_pacf = pacf(sales,nlags=20,method='ols')\n    \n    plt.subplot(121)\n    plt.plot(lag_acf)\n    plt.axhline(y=0, linestyle='--', color='red')\n    plt.axhline(y=1.96\/np.sqrt(len(sales_a)), linestyle='--', color='red')\n    plt.axhline(y=-1.96\/np.sqrt(len(sales_a)), linestyle='--', color='red')\n    plt.title('ACF')\n    \n    plt.subplot(122)\n    plt.plot(lag_pacf)\n    plt.axhline(y=0, linestyle='--', color='red')\n    plt.axhline(y=1.96\/np.sqrt(len(sales_a)), linestyle='--', color='red')\n    plt.axhline(y=-1.96\/np.sqrt(len(sales_a)), linestyle='--', color='red')\n    plt.title('PACF')\n","69cd8de2":"# ACF and PCF for store A\nauto_corr(sales_a)","f1f7c988":"# ACF and PCF for store B\nauto_corr(sales_b)","6520586a":"# ACF and PCF for store C\nauto_corr(sales_c)","951ea5c0":"# ACF and PCF for store D\nauto_corr(sales_d)","3ba6a7e7":"# Summering sales on per week basis \n# ARIMA = Autoregresive Integrated Moving Average \n\n\ntrain_arima = train.resample('w').mean()\ntrain_arima = train_arima[['Sales']]\ntrain_arima.plot()","7223010b":"train_arima.head()","980de2d0":"# Define the p, d and q parameters to take any value between 0 and 3\np = d = q = range(0, 2)\n\n# Generate all different combinations of p, q and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\n\nprint('Examples of parameter combinations for Seasonal ARIMA: ')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","bc9e223c":"# Determing p,d,q combinations with AIC scores.\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(train_arima,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n\n            results = mod.fit()\n\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue","07b4d034":"# Fitting the data to SARIMA model \nmodel_sarima = sm.tsa.statespace.SARIMAX(train_arima,\n                                        order=(1, 1, 1),\n                                        seasonal_order=(1,1,1,12),\n                                        enforce_stationarity=False,\n                                        enforce_invertibility=False)\nresults_sarima= model_sarima.fit()\nprint(results_sarima.summary().tables[1])","7cc4faa4":"# Checking diagnostic plots\nresults_sarima.plot_diagnostics(figsize=(16, 10))\nplt.show()","166a5825":"# Model prediction \n\npred = results_sarima.get_prediction(start=pd.to_datetime('2015-1-4'), dynamic=False)\n\n# Get confidence interval of forecast \npred_ci = pred.conf_int()\n\nax = train_arima['2014':].plot(label='Observed', figsize=(15,7))\npred.predicted_mean.plot(ax=ax, label='One step ahed Forecast', alpha=1)\n\nax.fill_between(pred_ci.index, \n               pred_ci.iloc[:, 0],\n               pred_ci.iloc[:,1],\n               color='r', alpha=.1)\n\nax.set_xlabel('Date')\nax.set_ylabel('Sales')\nplt.legend()\nplt.show()\n\ntrain_arima_forecasted = pred.predicted_mean\ntrain_arima_truth = train_arima['2015-01-04':]\n\nrms_arima= sqrt(mean_squared_error(train_arima_truth,train_arima_forecasted))\nprint('Root Mean Squared Error = ',rms_arima)","710a0e1c":"# Save your predicted results for future validation. \n# You could find this results in output sections\n\ntrain_arima_forecasted.to_csv('predicted_data.csv')\nprint('Predicted Data Saved in output')","bfc41a0d":"# Creating a train dataset\ntrain_prophet = train.copy()\ntrain_prophet.reset_index(level=0, inplace=True)","1fe07a28":"# Converting col names to specific names as required by Prophet library\ntrain_prophet = train_prophet.rename(columns = {'Date': 'ds',\n                                'Sales': 'y'})\ntrain_prophet.head()","39c4030d":"# Downsampling to week because modelling on daily basis takes a lot of time\nts_week_prophet = train_prophet.set_index(\"ds\").resample(\"W\").sum()\nts_week_prophet.head()","f485fa0b":"train_store_joined.columns","9f71f65b":"# Dropping Customers and Sale per customer\nts_xgboost = train_store_joined.copy()\nts_xgboost = ts_xgboost.drop(['Customers', 'SalesPerCustomer', 'PromoInterval'], axis=1)","300e00d6":"ts_xgboost.head()\n# Here we do not have any categorical variables so we do not have to convert them into numerical to use in XGBoost ","fdea1195":"# Combining similar columns into one column and dropping old columns\nts_xgboost['CompetitionOpen'] = 12 * (ts_xgboost.Year - ts_xgboost.CompetitionOpenSinceYear) + (ts_xgboost.Month - ts_xgboost.CompetitionOpenSinceMonth)\nts_xgboost['PromoOpen'] = 12 * (ts_xgboost.Year - ts_xgboost.Promo2SinceYear) + (ts_xgboost.WeekofYear - ts_xgboost.Promo2SinceWeek) \/ 4.0\nts_xgboost = ts_xgboost.drop([\"CompetitionOpenSinceMonth\", \"CompetitionOpenSinceYear\"], axis = 1)\nts_xgboost = ts_xgboost.drop([\"Promo2SinceWeek\", \"Promo2SinceYear\"], axis = 1)","bed65e8a":"# Converting categorical cols to numerical cols and removing old cols\nmappings = {0:0, \"0\": 0, \"a\": 1, \"b\": 1, \"c\": 1}\nts_xgboost[\"StateHoliday_cat\"] = ts_xgboost[\"StateHoliday\"].map(mappings)\nts_xgboost[\"StoreType_cat\"] = ts_xgboost[\"StoreType\"].map(mappings)\nts_xgboost[\"Assortment_cat\"] = ts_xgboost[\"Assortment\"].map(mappings)\nts_xgboost = ts_xgboost.drop([\"StateHoliday\", \"StoreType\", \"Assortment\"], axis = 1)","fc1604c0":"# Splitting the data\nfeatures = ts_xgboost.drop([\"Sales\"], axis = 1)\ntarget = ts_xgboost[\"Sales\"]\n\nX_train, X_test, y_train, y_test = model_selection.train_test_split(features, target, test_size = 0.20) ","df0d22e8":"# Tuning parameters - using default metrics\nparams = {'max_depth':6, \"booster\": \"gbtree\", 'eta':0.3, 'objective':'reg:linear'} \n\ndtrain = xgb.DMatrix(X_train, y_train)\ndtest = xgb.DMatrix(X_test, y_test)\nwatchlist = [(dtrain, 'train'), (dtest, 'eval')]\n\n# Training the model\nxgboost = xgb.train(params, dtrain, 100, evals=watchlist,early_stopping_rounds= 100, verbose_eval=True)\n         \n# Making predictions\npreds = xgboost.predict(dtest)","8ea808e2":"# RMSE of model\nrms_xgboost = sqrt(mean_squared_error(y_test, preds))\nprint(\"Root Mean Squared Error for XGBoost:\", rms_xgboost)","2989871d":"# Tuning parameters\nparams_2 = {'max_depth':10, 'eta':0.1,  'gamma': 2}\n\ndtrain = xgb.DMatrix(X_train, y_train)\ndtest = xgb.DMatrix(X_test, y_test)\nwatchlist = [(dtrain, 'train'), (dtest, 'eval')]\n\n# Training the model\nxgboost_2 = xgb.train(params_2, dtrain, 100, evals=watchlist,early_stopping_rounds= 100, verbose_eval=True)\n         \n# Making predictions\npreds_2 = xgboost_2.predict(dtest)","573bf872":"# RMSE of model\nrms_xgboost_2 = sqrt(mean_squared_error(y_test, preds_2))\nprint(\"Root Mean Squared Error for XGBoost:\", rms_xgboost_2)","aba45135":"# Let's see the feature importance\nfig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(xgboost_2, max_num_features=50, height=0.8, ax=ax)\nplt.show()","2761530c":"# Comparing performance of above three models - through RMSE\nrms_arima = format(float(rms_arima))\nrms_xgboost_2 = format(float(rms_xgboost_2))\n\nmodel_errors = pd.DataFrame({\n    \"Model\": [\"SARIMA\",  \"XGBoost\"],\n    \"RMSE\": [rms_arima, rms_xgboost_2]\n})\n\nmodel_errors.sort_values(by = \"RMSE\")","66437803":"# Time Series Forcusting ","3a0af98c":"From the above chart we could see sales of store type A, C has highest sales at the end of the year. December months has christmas season. So, that they get highes salary. At the end of the month their sell decrease. We can not find semiler trend for store B and D, it could be there is no\ndata for that time perion. Possible reason is \"store closed\".","a31812b6":"Train data as almost 1M observations of sales data over the year of appriximatelly (2013-2015). \nOkay, bread Date column in Year, Month, Day, Week columns","66de70e3":"# Model 01: Seasonal Autoregressive Integrated Moving Average\nIn order to use this model, we need to first find out values of **p, d and q. p** represents number of Autoregressive terms - lags of dependent variable.\n* q represents number of Moving Average terms\n* lagged forecast errors in prediction equation. \n* d represents number of non-seasonal differences.\n\n**To find the values of p, d and q - we use Autocorrelation function (ACF) and Partial Autocorrelation (PACF) plots.**\n\n**ACF** measure of correlation between time series with a lagged version of itself. \n**PACF** measure of correlation between time series with a lagged version of itself but after eliminating the variations already explained by the intervening comparison.\n\n**p value** is the value on x-axis of PACF where the plot crosses the upper Confidence Interval for the first time.\n\n**q value** is the value on x-axis of ACF where the plot crosses the upper Confidence Interval for the first time.\n","3be02038":"In this section we will consider only one store from each store type(a, b, c, d). ","39a6993c":"# Baseline XGBoost ","4a104d8e":"Here, The state is closed for (a= Public holyday, b = Easter holyday, c = Christmas and 0 is None)","d2c7e31e":"**A) Rolling Mean:** A rolling analysis of a time series model is often used to assess the model's stability over time. The window is rolled (slid across the data) on a weekly basis, in which the average is taken on a weekly basis. Rolling Statistics is a visualization test, where we can compare the original data with the rolled data and check if the data is stationary or not.\n\n**B) Dicky -Fuller test:** This test provides us the statistical data such as p-value to understand whether we can reject the null hypothesis. If p-value is less than the critical value (say 0.5), we will reject the null hypothesis and say that data is stationary.","14c5f26f":"# stationarity of Time Seriese","f0cd58af":"![](https:\/\/m.strelapark.de\/fileadmin\/_processed_\/csm_rossmann_shop_foto_stralsund_1633a5fb67.jpg)","03982cb4":"# Lets create trends and seasonality ","1b89e8b9":"The above graphs suggest that the p = 2 and q = 2 but let's do a grid search and see which combination of p, q and d gives the lowest Akaike information criterion (**AIC**, which tells us the quality of statistical models for a given set of data. Best model uses the lowest number of features to fit the data.\n\nIf we are to predict the sales of each store, we need to consider the whole data set rather than one store of each category. We took one store of each category to understand the tiem series data but from now on, we'll use the whole dataset for modelling","96c5ccb9":"Register pandas formatters and converters with matplotlib.\n\nThis function modifies the global matplotlib.units.registry dictionary. pandas adds custom converters for\n\npd.Timestamp\n\npd.Period\n\nnp.datetime64\n\ndatetime.datetime\n\ndatetime.date\n\ndatetime.time","fc578e0a":"So, we have 172,871 observations when the stores were closed or have zero sales.","b93c2dc5":"Here 1 is school closed day and it pretty low. And 0 is None. ","f75e39ea":"#### From the above chart we can see a strong positive correlation between the amount of Sales and Customers visiting the store. We can also observe a positive correlation between a running promotion (Promo = 1) and number of customers.","a84deb04":"# **Insights**\n### 1. Storetype a has highest customer and sales \n### 2. Storetype b has highest SalesPerCustomer \n### 3. There is no promotion offer in Saturday and Sunday\n### 4. Customers are going to buy their goods in tuesday on promotional offer. ","948d882e":"### Fitting the model","00cbb9e0":"# Rossman Store Sales Prediction","6482c748":"let's iterate through these combinations to see which one gives the lowest AIC score.","0c76b0d0":"From this chart, we could see that, 7th day store was mostly clodes. It is Sunday and makes sense. ","8850bb22":"### From the above chart, 0 represents sales and 1 represents promotin in a week. Promotions are not given in weekend (Saturday and Sunday). Because peoples are goinf to buy their household things on the weekend and wothout promotion sales increased in a dramatic way. Promotion are highest on monday and as well as sales are high on that day. ","255ac023":"## Evaluation Matrics","1293ccdf":"### Autocorrelation function to make ACF and PACF","59785ca3":"\nFrom the above plots, we can see that there is seasonality and trend present in our data. So, we'll use forecasting models that take both of these factors into consideration. For example, SARIMAX and Prophet.","1517d1c3":"# MOdel 2: XGBoost\nNow we will drop columns that are correlated (e.g Customers, SalePerCustomer) in addition to merging similar columns into one column (CompetitionOpenSinceMonth, CompetitionOpenSinceYear).","41e3f74e":"# Hypertuning XGBoost\nNow let's try to decrease the RMSE of XGBoost by passing different values for our hyperparameters in the XGBoost model.\n\n**eta:** It defines the learning rate i.e step size to learn the data in the gradient descent modeling (the basis for XGBoost). The default value is 0.3 but we want to keep the learning rate low to avoid overfitting. So, we'll choose **0.2** as eta\n\n**max_depth:** Maximum depth of a tree. The default value is 6 but we want our model to be more complex and find good predictions. So, let's choose 10 as max depth.\n\n**gamma:** Minimum loss reduction required to make a further partition on a leaf node of the tree. The larger gamma is, the more conservative the algorithm will be. The default value is 0, let's choose a little higher value so as to get good predictions","6703c5cf":"# Steps: \n1. Explatory Data Analysis\n2. Time Series Analysis \n    2.1. Predictive Modeling \n3. Results","a83c4fac":"# Final XGBoost Model:\nAfter hypertuning, we were able to reduce RMSE from 1223.31 to 1176.20 which is great! Now, let's compare the performance of all models","22e2bbf7":"### Hyperparamter turing ARIMA model\nAs discussed above, we have three parameters (p, d and q) for SARIMA model. So, in order to choose the best combination of these parameter, we'll use a grid search. The best combination of parameters will give the lowest AIC score.","26859fde":"From above charts we could observe that, mean and variance of the data are not change most over time. So, we do not compute any transformation. ","7d2540da":"# Model Comparison & Selection\nWe used the Root Mean Squared Error **(RMSE)** to evaluate and validate the performance of various models used. Let's see which model performed better and why\/why not.\n\na) We can see from the above table that **SARIMA** performs the best than **XGBoost**.\n\nb) It makes sense because **SARIMA is designed specifically for seasonal time series data while XGBoost is a general (though powerful) machine learning approach with various applications.**\n\n\nBased on the above analysis, we'll choose ARIMA as our final model to predict the sales because it gives us the least RMSE and is well suited to our needs of predicting time series seasonal data.","8018d61a":"We can see from the above 'Histogram plus estimated density' plot that our KDE (Kernel Desnity Estimator) plot closely follows the N(0,1) normal distribution plot. The Normal Q-Q plot shows that the ordered distribution of residuals follows the distribution similar to normal distribution. Thus, our model seems to be pretty good.\n\n**Standardized residual plot tells us that there is no major seasonality trend, which is confirmed by Correlogram (autocorrelation) plot. Autocorrelation plot tells us that the time series residuals have low correlation with lagged versions of itself**","489abf9b":"### 1.1: Trends & Seasonility \nHow the sales vary with month, promo(First promotional Offer), promo2(Second Promotional Offer) and years. ","f8e8a3f8":"## Used dataset is **rossmann store data**. It operates over 3,000 drug stores in 7 European countries. The challenge is to predict their daily sales for up to six weeks in advance.","270295b5":"# Correlation Analysis","a0268dae":"### There are 2 ways to test the stationarity of time series\n* A) Rolling Mean: Visualization \n* B) Dicky - Fuller test: Statistical test","333dc392":"# **1. Explamatory Data Analysis(EDA)**","0256121a":"# Model 2: Prophetic \nFrom our Grid search and foundoptimal parameter we also have another loweset AIC: ARIMA(1, 1, 1)x(0, 1, 1, 12)12 - AIC:1806.29. Lets try to use it ","de6f6f3b":"So, we can see that, the above grid search result our optimal paramiter (ARIMA(1, 1, 1)x(1, 1, 1, 12)12 - AIC:1807.3489408440882) ","96a0ee84":"**1. MAE - Mean Absolute Error:** It is the average of the absolute difference between the predicted values and observed values.\n![](https:\/\/www.statisticshowto.com\/wp-content\/uploads\/2016\/10\/MAE.png)\n\n**2. RMSE - Root Mean Square Error:** It is the square root of the average of squared differences between the predicted values and observed values.\n![](https:\/\/help.innovyze.com\/download\/attachments\/2459040\/scadawatch_analytical_function_rmse_formula.png?version=1&modificationDate=1555033531000&api=v2)","5f133d09":"Stationarity means that the statistical properties of a time series do not change over time. Some stationary data is (constant mean, constant variance and constant covariance with time). ","57811d33":"# 2. Time Series Analysis ","083d0752":"# Results"}}