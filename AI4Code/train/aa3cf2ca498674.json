{"cell_type":{"bb23dd35":"code","5f7d12be":"code","10a65180":"code","1b530af4":"code","b4741b6d":"code","ff0cbad0":"code","90cee134":"code","8b7d8b6a":"code","4a2b2544":"markdown","5ba5054f":"markdown","bd2391c3":"markdown","08c12b66":"markdown","e5b2c606":"markdown","4878bf83":"markdown"},"source":{"bb23dd35":"import sys\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact, widgets\nfrom datetime import datetime\nfrom pytz import timezone\nprint('tic', datetime.now(timezone('Canada\/Pacific')).isoformat(timespec='minutes'))","5f7d12be":"train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\n\n# just slimming down\n\n# remove rows we don't need\ntrain = train.loc[ train['weight']>0 ]\n\n# remove columns we don't need\ntrain = train[ ['resp', 'resp_1', 'resp_2', 'resp_3', 'resp_4', 'date', 'weight'] ]\n\ntargets = ['resp', 'resp_1', 'resp_2', 'resp_3', 'resp_4']","10a65180":"dailyp = pd.DataFrame(index=train['date'].unique(), columns=targets)\ndailyp.index.name = 'date'\nfor ntarget, target in enumerate(targets):\n# assuming action=1 when target>0\n    df = train.loc[ train[target]>0 ].copy()\n    dailyp[target] = df.groupby('date', sort=False).apply(lambda x: (x['weight'] * x[target]).sum())\ndailyp","1b530af4":"t = dailyp.apply(lambda x: x.sum() \/ np.sqrt((x**2).sum()) * np.sqrt(250\/len(x)))","b4741b6d":"util_all = 6 * dailyp.sum()\nax = util_all.plot.bar(ylabel='utility score', grid=True)\nax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])\nutil_all","ff0cbad0":"window = 150     # CHANGE TO DESIRED WINDOW WIDTH\nwindow = max(100, min(window, len(dailyp)-2) )\nutil = pd.DataFrame(index=np.arange(len(dailyp)-window), columns=targets)\nfor ntarget, target in enumerate(targets):\n    for head in range(len(dailyp)-window):\n        dailyps = dailyp.loc[head:head+window, target]\n        t = dailyps.sum() \/ np.sqrt((dailyps**2).sum() * np.sqrt(250\/window))\n        if min(max(t, 0), 6)!=6:\n            print('t kicking into effect')\n        util.loc[head, target] = 6 * dailyps.sum()\nutil.index.name = 'start date'\nax = util.plot(ylabel='sliding-window utility scores', grid=True, figsize=(12, 7))\nax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])\nutil","90cee134":"# sanity\npick_date = np.random.choice(window)\ndailyps = dailyp.loc[ pick_date  :pick_date+window, 'resp_3' ]\nauto = util.loc[pick_date, 'resp_3']\nmanual = 6 * dailyps.sum()\nnp.testing.assert_allclose(auto, manual)\nmanual, auto","8b7d8b6a":"print('toc', datetime.now(timezone('Canada\/Pacific')).isoformat(timespec='minutes') )","4a2b2544":"# Step 2: $ t = \\frac{\\sum p_i}{\\sqrt{\\sum p_i^2}} * \\sqrt{\\frac{250}{\\mid i \\mid}} $","5ba5054f":"# Step 1: $ p_i = \\sum_j (weight_{ij} * resp_{ij} * action_{ij}) $\n* I'm going to use ```dailyp``` to represent $p_i$. Not using ```pi```, which would feel like $\\pi$.\n* Sanity check for the next cell was already done in a preceding notebook, [Day 85 before vs after: a look at utility score](https:\/\/www.kaggle.com\/marychin\/day-85-before-vs-after-a-look-at-utility-score).","bd2391c3":"# Step 3: $ u = min(max(t, 0), 6) \\sum p_i $\nNoting the values for ```t``` from the previous cell, ```t``` obviously never gets a chance to be of any effect. \nSo, effectively $ u = 6\\sum p_i $.","08c12b66":"# Utility score for the entire training set","e5b2c606":"# Questions this notebook seeks to answer\nThis notebook is motivated by two questions:\n* The *utility score* is defined over a number of days e.g. over the date range of the training dataset, or the mock test \/ public \/ private dataset. What if we take a slightly granular look by sliding, say, a 100-day or 200-day window, how would the *utility score* evolve over time?\n* How would the above compare between ```resp```, ```resp_1```, ```resp_2```, ```resp_3``` and ```resp_4```?\n\nThis notebook calculates the *utility score* as defined under the competition [evaluation tab](https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/overview\/evaluation): \nFor each ```date``` i, we have\n\n$ p_i = \\sum_j (weight_{ij} * resp_{ij} * action_{ij}) $\n\n$ t = \\frac{\\sum p_i}{\\sqrt{\\sum p_i^2}} * \\sqrt{\\frac{250}{\\mid i \\mid}} $\n\n$ u = min(max(t, 0), 6) \\sum p_i $\n\nThis is a follow-on notebook from [Day 85 before vs after: a look at utility score](https:\/\/www.kaggle.com\/marychin\/day-85-before-vs-after-a-look-at-utility-score).","4878bf83":"# Sliding-window utility scores"}}