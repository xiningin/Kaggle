{"cell_type":{"abf00153":"code","490fa972":"code","1f4bcde6":"code","4c0a465e":"code","2327f725":"code","d62fb42b":"code","3352c89d":"code","49d3c860":"code","84cd7c7a":"code","fa7ccaf5":"code","eba6a98a":"markdown","c4f654d9":"markdown"},"source":{"abf00153":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os\nimport glob\nimport cv2\nimport annoy\nimport time\n\nfrom tqdm import tqdm\nfrom numpy.linalg import norm\nfrom scipy.spatial import distance","490fa972":"train_folder_dir = '..\/input\/pre-product-matching-id-ndsc-2020\/sample_img\/sample_img'\ntest_folder_dir = '..\/input\/pre-product-matching-id-ndsc-2020\/training_img\/training_img'\n\ndf_train = pd.read_csv('..\/input\/pre-product-matching-id-ndsc-2020\/new_training_set.csv')\ndf_test = pd.read_csv('..\/input\/pre-product-matching-id-ndsc-2020\/new_test_sample.csv')\n\ntrain_image_paths = df_train['image_2'].values\ntest_image_paths = df_test['image_2'].values\n\n\n","1f4bcde6":"def image_generator(image_paths, base_dir):\n    for path in image_paths:\n        img = cv2.imread(base_dir + path)\n        resized = cv2.resize(img, (25,25))\n        yield resized.flatten()","4c0a465e":"x_train <- data.matrix(training[,-1]) \/ 255\nx_test <- data.matrix(test[,-1]) \/ 255\ndim(x_train)","2327f725":"dim(x_test)","d62fb42b":"y_train <- training$Label\ny_test <- test$Label\nstr(y_train)","3352c89d":"str(y_test)","49d3c860":"model <- keras_model_sequential()\n# model %>% \n#   layer_dense(units = 256, activation = \"relu\", input_shape = c(784)) %>% \n#   layer_dropout(rate = 0.4) %>% \n#   layer_dense(units = 128, activation = \"relu\") %>% \n#   layer_dropout(rate = 0.3) %>% \n#   layer_dense(units = 10, activation = \"softmax\")\n\nmodel %>% \n  layer_flatten(input_shape = c(784)) %>% \n  layer_dense(units = 128, activation = \"relu\") %>% \n  layer_dense(units = 10, activation = \"softmax\")\n\nsummary(model)","84cd7c7a":"model %>% compile(\n  loss = \"sparse_categorical_crossentropy\",\n  optimizer = optimizer_rmsprop(),\n  metrics = c(\"accuracy\")\n)","fa7ccaf5":"history <- model %>% fit(\n  x_train, y_train,\n  epochs = 6\n)\nmodel %>% evaluate(x_test, y_test)","eba6a98a":"Data yang digunakan merupakan supervised learning dengan klasifikasi gambar, maka ","c4f654d9":"Supaya dapat direpresentasi sebagai kisaran nilai antara 0 sampai 1, maka masing-masing data train dan test terlebih dahulu dijadikan matriks, lalu dibagi dengan 255 (nilai terbesar sebuah piksel)"}}