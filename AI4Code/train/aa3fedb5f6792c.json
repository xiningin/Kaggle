{"cell_type":{"9de07fec":"code","b311a2f6":"code","78c09022":"code","ac425b0f":"code","9d0b61cd":"code","0d156826":"code","b6a8f273":"code","5537d397":"code","2d52ab3f":"code","ee0f66fe":"code","65bf8bcb":"code","7bedbd71":"code","d1f90081":"code","57d303a4":"code","34609362":"code","cf8c858b":"code","b05b6047":"code","40bb552c":"code","10098e72":"code","81674e31":"code","1042067f":"code","64cbdcfb":"code","ef9d288b":"code","48c41a49":"code","6ef4c8e1":"code","c5bd7350":"code","aba04459":"code","06b5eb22":"code","e24d07cb":"code","820d64cf":"code","632cf9a1":"code","5a1b009c":"code","ec308b91":"code","c1c8a0dc":"code","d7b0b1e6":"code","6fdc1699":"code","ca3e1513":"code","7862495b":"code","0523f103":"code","9091965a":"code","f5a4d7ba":"code","73d8ac6d":"code","39f28a4e":"code","dfef5d4f":"code","6d0243c3":"code","66f3c860":"code","16d90e28":"code","41f39910":"code","de3a595a":"code","adbf8d1a":"code","550f4639":"code","bf774881":"code","516f59c1":"code","8f4c6490":"code","b4bdd3e0":"code","3e78fea9":"code","ce5081c5":"code","cfc302c9":"code","d2948d29":"code","067eb9f5":"code","21eef8bb":"code","6745d43e":"code","9411ffad":"code","63371b4c":"code","94e50a0d":"code","ec832ab4":"markdown","e95d3f5a":"markdown","94a1de18":"markdown","afcc685a":"markdown","ded60c92":"markdown","b8aa6eaf":"markdown","b29cf975":"markdown","8cc29c03":"markdown","4e232c4e":"markdown","1f602262":"markdown","eddb98ab":"markdown"},"source":{"9de07fec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np # linear algebra\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b311a2f6":"%%time\ntrain = pd.read_csv('..\/input\/turkiye-is-bankasi-machine-learning-challenge-4\/MLChallenge4\/train.csv')\ntest = pd.read_csv('..\/input\/turkiye-is-bankasi-machine-learning-challenge-4\/MLChallenge4\/test.csv')","78c09022":"train.dtypes","ac425b0f":"train.isnull().sum()","9d0b61cd":"train.nunique()","0d156826":"train.TXN_TRM.unique()","b6a8f273":"train = train.drop(columns=['TXN_TRM'])","5537d397":"colors = [\"#0101DF\", \"#DF0101\"]\n\nsns.countplot('TARGET', data=train, palette=colors)\nplt.title('Class Distributions \\n (0: No Fraud || 1: Fraud)', fontsize=12)\nplt.show()","2d52ab3f":"train.head()","ee0f66fe":"train.dtypes","65bf8bcb":"plt.figure(figsize=(12,8))\nsns.distplot(train.TXN_TIME)","7bedbd71":"plt.figure(figsize=(12,8))\nsns.distplot(train.TXN_AMNT)","d1f90081":"plt.figure(figsize=(12,8))\nsns.distplot(train[(train.TARGET == 1)].TXN_AMNT.values)","57d303a4":"plt.figure(figsize=(12,8))\nsns.distplot(train[(train.TARGET == 1)].TXN_TIME.values)","34609362":"plt.figure(figsize=(12,8))\nsns.distplot(train[(train.TARGET == 1)].DAY_OF_WEEK.values)","cf8c858b":"plt.figure(figsize=(12,8))\nsns.distplot(train[(train.TARGET == 1)].DAY_OF_MONTH.values)","b05b6047":"plt.figure(figsize=(12,8))\nsns.histplot(train[(train.TARGET == 1)].DAY_OF_WEEK.values)","40bb552c":"train.DAY_OF_MONTH = train.DAY_OF_MONTH.astype('int16')\ntrain.TXN_TIME = train.TXN_TIME.astype('int16')\ntrain.DAY_OF_WEEK = train.DAY_OF_WEEK.astype('int16')","10098e72":"print('Max: ', max(train.DAY_OF_WEEK.values))\nprint('Min: ', min(train.DAY_OF_WEEK.values))\n# 1 -> Monday\n# 7 -> Sunday","81674e31":"# WEEKEND\ntrain['IS_WEEKEND'] = 1\nfor i in range(len(train.DAY_OF_WEEK.values)):\n    if train.DAY_OF_WEEK.values[i] > 5:\n        train['IS_WEEKEND'].values[i] = 1\n    else:\n        train['IS_WEEKEND'].values[i] = 0","1042067f":"train['IS_NIGHT'] = 1\nfor i in range(len(train.TXN_TIME)):\n    if len(str(train.TXN_TIME.values[i])) > 3:\n        if int(str(train.TXN_TIME.values[i])[:2]) <= 6:\n            train['IS_NIGHT'].values[i] = 1\n        else:\n            train['IS_NIGHT'].values[i] = 0\n    elif len(str(train.TXN_TIME.values[i])) <= 3:\n            if int(str(train.TXN_TIME.values[i])[:1]) <= 6:\n                train['IS_NIGHT'].values[i] = 1\n            else:\n                train['IS_NIGHT'].values[i] = 0","64cbdcfb":"train.head()","ef9d288b":"day_onehot = pd.get_dummies(train.DAY_OF_WEEK,prefix='DAY')\ntrain = pd.concat([train,day_onehot],axis=1)","48c41a49":"train = train.reset_index(drop=True)","6ef4c8e1":"train.head()","c5bd7350":"train['Timestamp'] = 0\n\nfor i in tqdm(range(len(train))):\n    if len(str(train.TXN_TIME.values[i])) > 3:\n                train['Timestamp'][i] = pd.Timestamp(year=2021,month=1, day=train.DAY_OF_MONTH.values[i],\n                                hour=int(str(train.TXN_TIME.values[i])[:2]),minute=int(str(train.TXN_TIME.values[i])[2:]))\n\n    elif len(str(train.TXN_TIME.values[i])) == 3:\n                train['Timestamp'][i] = pd.Timestamp(year=2021,month=1, day=train.DAY_OF_MONTH.values[i],\n                                hour=int(str(train.TXN_TIME.values[i])[:1]), minute=int(str(train.TXN_TIME.values[i])[1:]))\n    \n    elif len(str(train.TXN_TIME.values[i])) == 2:\n                train['Timestamp'][i] = pd.Timestamp(year=2021,month=1, day=train.DAY_OF_MONTH.values[i],\n                                hour=int(str(train.TXN_TIME.values[i])[:1]), minute=int(str(train.TXN_TIME.values[i])[1:]))\n\n    elif len(str(train.TXN_TIME.values[i])) == 1:\n                train['Timestamp'][i] = pd.Timestamp(year=2021,month=1, day=train.DAY_OF_MONTH.values[i],\n                                hour=int(str(train.TXN_TIME.values[i])))","aba04459":"train.tail()","06b5eb22":"train['TXN_HOUR'] = 0\n\nfor i in tqdm(range(len(train))):\n    train.TXN_HOUR.values[i] = train.Timestamp[i].hour","e24d07cb":"train.Timestamp = pd.to_datetime(train.Timestamp)","820d64cf":"def get_customer_spending_behaviour_features_days(customer_transactions, windows_size_in_days=[1,7,20]):\n    \n    # Let us first order transactions chronologically\n    customer_transactions=customer_transactions.sort_values('Timestamp')\n\n    \n    # The transaction date and time is set as the index, which will allow the use of the rolling function \n    customer_transactions.index=customer_transactions.Timestamp\n    \n    # For each window size\n    for window_size in windows_size_in_days:\n    \n        # Compute the sum of the transaction amounts and the number of transactions for the given window size\n        SUM_AMOUNT_TX_WINDOW=customer_transactions['TXN_AMNT'].rolling(str(window_size) + 'd').sum()\n        NB_TX_WINDOW=customer_transactions['TXN_AMNT'].rolling(str(window_size) + 'd').count()\n    \n        # Compute the average transaction amount for the given window size\n        # NB_TX_WINDOW is always >0 since current transaction is always included\n        AVG_AMOUNT_TX_WINDOW = SUM_AMOUNT_TX_WINDOW \/ NB_TX_WINDOW\n    \n        # Save feature values\n        customer_transactions['CUSTOMER_ID_NB_TX_'+str(window_size)+'DAY_WINDOW']=list(NB_TX_WINDOW)\n        customer_transactions['CUSTOMER_ID_AVG_AMOUNT_'+str(window_size)+'DAY_WINDOW']=list(AVG_AMOUNT_TX_WINDOW)\n    \n    # Reindex\n    customer_transactions = customer_transactions.reset_index(drop=True)\n        \n    # And return the dataframe with the new features\n    return customer_transactions","632cf9a1":"train =get_customer_spending_behaviour_features_days(train)","5a1b009c":"len(train)","ec308b91":"train.head(10)","c1c8a0dc":"train = train.drop(columns=['TXN_TIME', 'Timestamp','DAY_OF_WEEK','DAY_OF_MONTH'])","d7b0b1e6":"train.head(20)","6fdc1699":"test = test.drop(columns='TXN_TRM')","ca3e1513":"test.DAY_OF_MONTH = test.DAY_OF_MONTH.astype('int16')\ntest.TXN_TIME = test.TXN_TIME.astype('int16')\ntest.DAY_OF_WEEK = test.DAY_OF_WEEK.astype('int16')","7862495b":"print('Max: ', max(test.DAY_OF_WEEK.values))\nprint('Min: ', min(test.DAY_OF_WEEK.values))\n# 1 -> Monday\n# 7 -> Sunday","0523f103":"# WEEKEND\ntest['IS_WEEKEND'] = 1\nfor i in range(len(test.DAY_OF_WEEK.values)):\n    if test.DAY_OF_WEEK.values[i] > 5:\n        test['IS_WEEKEND'].values[i] = 1\n    else:\n        test['IS_WEEKEND'].values[i] = 0","9091965a":"print('Max: ', max(test.DAY_OF_MONTH.values))\nprint('Min: ', min(test.DAY_OF_MONTH.values))","f5a4d7ba":"test['IS_NIGHT'] = 1\nfor i in range(len(test.TXN_TIME)):\n    if len(str(test.TXN_TIME.values[i])) > 3:\n        if int(str(test.TXN_TIME.values[i])[:2]) <= 6:\n            test['IS_NIGHT'].values[i] = 1\n        else:\n            test['IS_NIGHT'].values[i] = 0\n    elif len(str(test.TXN_TIME.values[i])) <= 3:\n            if int(str(test.TXN_TIME.values[i])[:1]) <= 6:\n                test['IS_NIGHT'].values[i] = 1\n            else:\n                test['IS_NIGHT'].values[i] = 0","73d8ac6d":"day_onehot_test = pd.get_dummies(test.DAY_OF_WEEK,prefix='DAY')\ntest = pd.concat([test,day_onehot_test],axis=1)","39f28a4e":"test = test.reset_index(drop=True)","dfef5d4f":"test['Timestamp'] = 0\n\nfor i in tqdm(range(len(test))):\n    if len(str(test.TXN_TIME.values[i])) > 3:\n                test['Timestamp'][i] = pd.Timestamp(year=2021,month=1, day=test.DAY_OF_MONTH.values[i],\n                                hour=int(str(test.TXN_TIME.values[i])[:2]),minute=int(str(test.TXN_TIME.values[i])[2:]))\n\n    elif len(str(test.TXN_TIME.values[i])) == 3:\n                test['Timestamp'][i] = pd.Timestamp(year=2021,month=1, day=test.DAY_OF_MONTH.values[i],\n                                hour=int(str(test.TXN_TIME.values[i])[:1]), minute=int(str(test.TXN_TIME.values[i])[1:]))\n    \n    elif len(str(test.TXN_TIME.values[i])) == 2:\n                test['Timestamp'][i] = pd.Timestamp(year=2021,month=1, day=test.DAY_OF_MONTH.values[i],\n                                hour=int(str(test.TXN_TIME.values[i])[:1]), minute=int(str(test.TXN_TIME.values[i])[1:]))\n\n    elif len(str(test.TXN_TIME.values[i])) == 1:\n                test['Timestamp'][i] = pd.Timestamp(year=2021,month=1, day=test.DAY_OF_MONTH.values[i],\n                                hour=int(str(test.TXN_TIME.values[i])))","6d0243c3":"test.tail()","66f3c860":"test['TXN_HOUR'] = 0\n\nfor i in tqdm(range(len(test))):\n    test.TXN_HOUR.values[i] = test.Timestamp[i].hour","16d90e28":"test.Timestamp = pd.to_datetime(test.Timestamp)","41f39910":"test = get_customer_spending_behaviour_features_days(test)","de3a595a":"test.head()","adbf8d1a":"test = test.drop(columns=['TXN_TIME', 'Timestamp','DAY_OF_WEEK','DAY_OF_MONTH'])","550f4639":"test.head(10)","bf774881":"train.head()","516f59c1":"test.head()","8f4c6490":"test.dtypes","b4bdd3e0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train[train.columns[1:]], train['TARGET'], shuffle=True, stratify = train['TARGET'])","3e78fea9":"X_train.head()","ce5081c5":"cat_cols = [0,1,2,3,5,6,7,8,9]","cfc302c9":"from catboost import CatBoostClassifier","d2948d29":"cb = CatBoostClassifier(iterations=10000,\n                        task_type='GPU',\n                        custom_loss=['AUC'])","067eb9f5":"cb.fit(X_train,y_train,cat_features=cat_cols, eval_set=(X_test,y_test),plot=False,verbose=False)","21eef8bb":"from sklearn.metrics import roc_auc_score\npred_cb = cb.predict_proba(X_test)\nroc_auc_score(y_test,pred_cb[:,1])","6745d43e":"from hyperopt import hp, fmin, tpe\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score\n\ndef hyperopt_objective(params):\n    print(params)\n    model = CatBoostClassifier(**params, random_seed=42, task_type='GPU', iterations=100)\n    model.fit(X_train,y_train, cat_features=cat_cols, eval_set=(X_test,y_test), verbose=0)\n    y_pred = model.predict_proba(X_test)\n    return -roc_auc_score(y_test, y_pred[:, 1])\n\nspace = {\n    'learning_rate': hp.uniform('learning_rate', 0.01, 0.1),\n    'depth': hp.randint('depth', 3, 10),\n    'l2_leaf_reg': hp.uniform('l2_leaf_reg', 1, 10),\n    'boosting_type': hp.choice('boosting_type', ['Ordered', 'Plain']),\n}\n\ntuning = True\nif tuning == True:\n    best = fmin(hyperopt_objective,\n        space=space,\n        algo=tpe.suggest,\n        max_evals=10)\n    best_params = best.copy()\n    best_params['boosting_type'] = 'Plain' if best['boosting_type'] == 1 else 'Ordered'\n    print(best_params)","9411ffad":"test.head()","63371b4c":"final_prediction = cb.predict_proba(test[test.columns[1:]])\nsub = pd.Series(final_prediction[:,1], name='Predicted')\nfinal = pd.concat([test.ID, sub],axis=1)\nfinal.head()","94e50a0d":"final.to_csv('submission.csv', index = False)","ec832ab4":"# Modeling","e95d3f5a":"# Extract Hours","94a1de18":"# Tuning Parameters","afcc685a":"# Prediction","ded60c92":"# Preprocessing","b8aa6eaf":"## Test Data Transformation","b29cf975":"## Customer Behavior","8cc29c03":"# Figures","4e232c4e":"# Extract Hours","1f602262":"## Train Data Transformation","eddb98ab":"## Customer Behavior"}}