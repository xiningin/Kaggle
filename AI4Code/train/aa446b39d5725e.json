{"cell_type":{"06e5a43e":"code","eb872504":"code","c7a9288b":"code","0d3d2ceb":"code","20fed8e5":"code","03c4b2c2":"code","67e938dd":"code","45d4e657":"code","a6239be6":"code","14e77857":"code","a32936de":"code","85a3aba6":"code","cababb61":"code","0e23edea":"code","0c738ce9":"code","b7247bfc":"code","a6574aea":"code","a799c957":"code","779a1744":"code","f7b1e1bb":"code","31de8076":"code","03fd06e6":"code","8ac683ed":"code","0dbec223":"code","022027ef":"code","925f0c7f":"code","f26de198":"code","290c8854":"code","da7366e7":"code","83ae40d7":"code","f9613ac5":"code","c2793a9c":"code","8bedbc61":"code","b1243fc2":"code","fe029784":"markdown","e5c09698":"markdown","20d8bccd":"markdown","65c19c9f":"markdown","524d5cbf":"markdown","252a19f3":"markdown","347c6a57":"markdown","abe4c95d":"markdown","8b220cdc":"markdown","4daaac13":"markdown","b3751124":"markdown","11d705ea":"markdown","1aba1ef9":"markdown","d54fca66":"markdown","26c49d3d":"markdown","69857dde":"markdown","640052a0":"markdown","4a0b6ae1":"markdown","4cb40b57":"markdown","223da651":"markdown","98671d0c":"markdown","475f034c":"markdown","ecfbb897":"markdown"},"source":{"06e5a43e":"# Team Annihilators- MehulKumar Patel,Dhiraj Patel \n# Emails: dhiru474@gmail.com,mkpatel.p64@gmail.com\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb872504":"matches=pd.read_csv('..\/input\/skillsay-ai-crickethon-dataset\/matches.csv');\ndeliveries=pd.read_csv('..\/input\/skillsay-ai-crickethon-dataset\/deliveries.csv');\nkohli=pd.read_csv('..\/input\/viratkohlidataset\/ViratKohli IPL 2020.csv')","c7a9288b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nsns.set(color_codes=True)\nfrom datetime import datetime\nfrom scipy import stats \nimport warnings\nwarnings.filterwarnings('ignore')\nfrom pylab import rcParams\n%matplotlib inline\nrcParams['figure.figsize'] = 6, 6","0d3d2ceb":"matches.tail(3)","20fed8e5":"matches.columns","03c4b2c2":"deliveries.tail(3)","67e938dd":"deliveries.columns","45d4e657":"## Replace Delhi Daredevils with Delhi capitals as the franchise is same\nmatches.team1.replace({'Delhi Daredevils' : 'Delhi Capitals'},regex=True,inplace=True)\nmatches.team2.replace({'Delhi Daredevils' : 'Delhi Capitals'},regex=True,inplace=True)\nmatches.toss_winner.replace({'Delhi Daredevils' : 'Delhi Capitals'},regex=True,inplace=True)\nmatches.winner.replace({'Delhi Daredevils' : 'Delhi Capitals'},regex=True,inplace=True)","a6239be6":"#Filtered data oF last 3 seasons (2017,2018,2019) of IPL \nlast3_seasons=matches[(matches['id']<=59)|(matches['id']>=7894)]\ndf2=deliveries[(deliveries['match_id']<=59)|(deliveries['match_id']>=7894)]","14e77857":"batter=df2[(df2['extra_runs']==0)]\nbatsmen = pd.DataFrame(batter.groupby(['batsman']).agg({'batsman_runs' : 'sum','ball' : 'count','match_id' : 'nunique'}))\nbatsmen['Average'] = (batsmen['batsman_runs']\/batsmen['match_id']).round(2)\nbatsmen['Strike_Rate'] = ((batsmen['batsman_runs']\/batsmen['ball'])*100).round(2)\nbatsmen.rename(columns = {'ball':'balls_played', 'match_id':'Total_matches'}, inplace = True)\nbatsmen = batsmen.sort_values(by ='batsman_runs' , ascending = False)\nbatsmen[batsmen['batsman_runs'] > 1000]","a32936de":"bowling=df2[df2.dismissal_kind!='run out']\nbowlers = pd.DataFrame(bowling.groupby(['bowler']).agg({'match_id' : 'nunique','total_runs' : 'sum','ball' : 'count','player_dismissed':'count'}))\nbowlers['Economy'] = (6*bowlers['total_runs']\/bowlers['ball']).round(2)\nbowlers['Strike_rate'] = (bowlers['ball']\/bowlers['player_dismissed']).round(2)\nbowlers.rename(columns = {'ball':'balls_bowled', 'match_id':'Total_matches','player_dismissed':'Wickets','total_runs':'Runs_conceded'}, inplace = True)\nbowlers = bowlers.sort_values(by ='Wickets' , ascending = False )\nbowlers[(bowlers['Wickets'] >=30)]","85a3aba6":"## Who has affected more number of stumpings among IPL wiket-keepers?\n\ndf = deliveries[deliveries['dismissal_kind']=='stumped']\nstumped=pd.DataFrame(df.groupby(['fielder']).agg({'player_dismissed' : 'count'}))\nstumped.rename(columns = {'fielder':'wicket-keeper', 'player_dismissed':'Total_stumpings'}, inplace = True)\nstumped = stumped.sort_values(by ='Total_stumpings' , ascending = False)\nstumped[stumped['Total_stumpings']>10]","cababb61":"df = deliveries[(deliveries['dismissal_kind']=='caught')|(deliveries['dismissal_kind']=='caught and bowled')]\nstumped=pd.DataFrame(df.groupby(['fielder']).agg({'player_dismissed' : 'count'}))\nstumped.rename(columns = {'player_dismissed':'Total_catches'}, inplace = True)\nstumped = stumped.sort_values(by ='Total_catches' , ascending = False)\nstumped[stumped['Total_catches']>50]","0e23edea":"deliveries_sum=deliveries.groupby('over',axis=0).sum()\nover=np.arange(1,21)\ntotal_sum=deliveries_sum.total_runs\n#relationship between runs and overs \nplt.plot(over,total_sum)\nplt.xlabel('overs')\nplt.ylabel('runs')\nplt.title('over vs runs')\nplt.show()\n","0c738ce9":"##Best utilization of death overs by batting teams\n\n##Here we try to find out which team have utilized the death overs best.\np_df = deliveries[ deliveries.over >= 16 ]  \ndef overs_played(x):\n    return (len(x)\/\/6)\n    \ndeath_overs = p_df.groupby('batting_team')['batsman_runs'].agg([overs_played, 'sum']).reset_index()\ndeath_overs = death_overs[death_overs.overs_played>500]   \ndeath_overs['run-rate'] =(death_overs['sum'] \/death_overs['overs_played'])  \ndeath_overs = death_overs.sort_values(by='run-rate', ascending=False).reset_index(drop=True)  \ndeath_overs = death_overs[['batting_team','overs_played','run-rate']]\ndeath_overs\n","b7247bfc":"### Power-Hitter in last 3 seasons of IPL in death overs.\n\ndf2=deliveries[(deliveries['match_id']<=59)|(deliveries['match_id']>=7894)]\ndeath_df = df2[(df2.over >= 16) & (df2.extra_runs ==0)] \ndef balls_faced(x):\n    return len(x)\n\ntemp_df = death_df.groupby('batsman')['batsman_runs'].agg([balls_faced,'sum']).reset_index() \ntemp_df = temp_df[(temp_df.balls_faced>50)]   \ntemp_df['strike_rate_in_death_overs'] = (((temp_df['sum'] \/ temp_df['balls_faced'])*100)).round(2) \ntemp_df.rename(columns = {'sum':'Total_runs'}, inplace = True)\ntemp_df = temp_df.sort_values(by='strike_rate_in_death_overs', ascending=False).reset_index(drop=True)  \ntemp_df = temp_df[['batsman','balls_faced','Total_runs','strike_rate_in_death_overs']]\ntemp_df[(temp_df.strike_rate_in_death_overs>120)]","a6574aea":"### Power-Hitter in death overs in all editions of IPL .\n\ndeath_df = deliveries[(deliveries.over >= 16) & (deliveries.extra_runs ==0)] \ndef balls_faced(x):\n    return len(x)\n\ntemp_df = death_df.groupby('batsman')['batsman_runs'].agg([balls_faced,'sum']).reset_index() \ntemp_df = temp_df[(temp_df.balls_faced>50)]   \ntemp_df['strike_rate_in_death_overs'] = (((temp_df['sum'] \/ temp_df['balls_faced'])*100)).round(2) \ntemp_df.rename(columns = {'sum':'Total_runs'}, inplace = True)\ntemp_df = temp_df.sort_values(by='strike_rate_in_death_overs', ascending=False).reset_index(drop=True)  \ntemp_df = temp_df[['batsman','balls_faced','Total_runs','strike_rate_in_death_overs']]\ntemp_df[(temp_df.strike_rate_in_death_overs>180)]","a799c957":"##Best utilization of powerplay by batting teams\np_df = deliveries[ deliveries.over <= 6 ]  \ndef overs_played(x):\n    return (len(x)\/\/6)\n    \npowerplay = p_df.groupby('batting_team')['batsman_runs'].agg([overs_played, 'sum']).reset_index()\npowerplay = powerplay[powerplay.overs_played>500]   \npowerplay['run-rate'] =(powerplay['sum'] \/powerplay['overs_played'])  \npowerplay = powerplay.sort_values(by='run-rate', ascending=False).reset_index(drop=True)  \npowerplay = powerplay[['batting_team','overs_played','run-rate']]\npowerplay","779a1744":"### Power-Hitter in last 3 seasons of IPL in powerplay overs.\n\ndf2=deliveries[(deliveries['match_id']<=59)|(deliveries['match_id']>=7894)]\ndeath_df = df2[(df2.over <= 6) & (df2.extra_runs ==0)] \ndef balls_faced(x):\n    return len(x)\n\ntemp_df = death_df.groupby('batsman')['batsman_runs'].agg([balls_faced,'sum']).reset_index() \ntemp_df = temp_df[(temp_df.balls_faced>40)]   \ntemp_df['strike_rate_in_powerplay_overs'] = (((temp_df['sum'] \/ temp_df['balls_faced'])*100)).round(2) \ntemp_df.rename(columns = {'sum':'Total_runs'}, inplace = True)\ntemp_df = temp_df.sort_values(by='Total_runs', ascending=False).reset_index(drop=True)  \ntemp_df = temp_df[['batsman','balls_faced','Total_runs','strike_rate_in_powerplay_overs']]\ntemp_df[(temp_df.strike_rate_in_powerplay_overs>120)]","f7b1e1bb":"### Power-Hitter in power-play overs in all editions of IPL .\n\ndeath_df = deliveries[(deliveries.over <= 6) & (deliveries.extra_runs ==0)] \ndef balls_faced(x):\n    return len(x)\n\ntemp_df = death_df.groupby('batsman')['batsman_runs'].agg([balls_faced,'sum']).reset_index() \ntemp_df = temp_df[(temp_df.balls_faced>50)]   \ntemp_df['strike_rate_in_powerplay_overs'] = (((temp_df['sum'] \/ temp_df['balls_faced'])*100)).round(2) \ntemp_df.rename(columns = {'sum':'Total_runs'}, inplace = True)\ntemp_df = temp_df.sort_values(by='strike_rate_in_powerplay_overs', ascending=False).reset_index(drop=True)  \ntemp_df = temp_df[['batsman','balls_faced','Total_runs','strike_rate_in_powerplay_overs']]\ntemp_df[(temp_df.strike_rate_in_powerplay_overs>130)]","31de8076":"## In all editions of IPL.\ndeath_df = deliveries[(deliveries.over > 6) & (deliveries.over < 16) & (deliveries.extra_runs ==0)] \ndef balls_faced(x):\n    return len(x)\n\ntemp_df = death_df.groupby('batsman')['batsman_runs'].agg([balls_faced,'sum']).reset_index() \ntemp_df = temp_df[(temp_df.balls_faced>50)]   \ntemp_df['strike_rate_in_middle_overs'] = (((temp_df['sum'] \/ temp_df['balls_faced'])*100)).round(2) \ntemp_df.rename(columns = {'sum':'Total_runs'}, inplace = True)\ntemp_df = temp_df.sort_values(by='Total_runs', ascending=False).reset_index(drop=True)  \ntemp_df = temp_df[['batsman','balls_faced','Total_runs','strike_rate_in_middle_overs']]\ntemp_df[(temp_df.Total_runs>1000)]","03fd06e6":"## In last 3 seasons of IPL\ndf2=deliveries[(deliveries['match_id']<=59)|(deliveries['match_id']>=7894)]\ndeath_df = df2[(df2.over > 6) & (df2.over > 16) & (df2.extra_runs ==0)] \ndef balls_faced(x):\n    return len(x)\n\ntemp_df = death_df.groupby('batsman')['batsman_runs'].agg([balls_faced,'sum']).reset_index() \ntemp_df = temp_df[(temp_df.balls_faced>50)]   \ntemp_df['strike_rate_in_middle_overs'] = (((temp_df['sum'] \/ temp_df['balls_faced'])*100)).round(2) \ntemp_df.rename(columns = {'sum':'Total_runs'}, inplace = True)\ntemp_df = temp_df.sort_values(by='Total_runs', ascending=False).reset_index(drop=True)  \ntemp_df = temp_df[['batsman','balls_faced','Total_runs','strike_rate_in_middle_overs']]\ntemp_df[(temp_df.Total_runs>100)]","8ac683ed":"## cskmi dataframe\ncskmi=deliveries[np.logical_or(np.logical_and(deliveries['batting_team'] == 'Mumbai Indians',deliveries['bowling_team']== 'Chennai Super Kings'),np.logical_and(deliveries['bowling_team']=='Mumbai Indians',deliveries['batting_team']=='Chennai Super Kings'))]\ncskmi.head(3)","0dbec223":"# Previous 2 season's records of deliveries dataset (filtered with the help of match_id)\ncskmi_2season = cskmi[cskmi['match_id'] >= 7894]\ncskmi_2season.head(3)","022027ef":"## Creating a function and then calling the same function by player name for dotballs ratio\ndef dotballs(bowler_name):\n df_bowler = cskmi_2season[cskmi_2season.bowler == bowler_name]\n total_dot = df_bowler[df_bowler['total_runs'] == 0]\n dots_bowler = total_dot['total_runs'].count()\n total_balls=df_bowler['ball'].count() - df_bowler[df_bowler.wide_runs >= 1].count() - df_bowler[df_bowler.noball_runs >= 1].count()\n total_balls_df = total_balls['ball']   \n print('Dot ball ratio of :',bowler_name)\n print((dots_bowler\/total_balls_df).round(3)*100)","925f0c7f":"## Lets look for bowlers that bowled in 2020\ndotballs('RD Chahar')\ndotballs('JJ Bumrah')\ndotballs('HH Pandya')\ndotballs('KH Pandya')","f26de198":"## For boult dot ball ratio\ncsk = deliveries[deliveries.batting_team == 'Chennai Super Kings']\nboult_against_csk = csk[csk.bowler == 'TA Boult']\ndotballs = boult_against_csk[boult_against_csk['total_runs'] == 0].count()\nfinal_dotballs = dotballs['total_runs']\ntotal_balls = boult_against_csk['ball'].count() - boult_against_csk[boult_against_csk.wide_runs >= 1].count() - boult_against_csk[boult_against_csk.noball_runs >= 1].count()\ndfx = (final_dotballs\/total_balls)*100\nprint(\"Boult dot balls ratio against csk in % =\",dfx['ball'].round())","290c8854":"bowl=cskmi_2season[(cskmi_2season.dismissal_kind!='run out') & (cskmi_2season.bowling_team=='Mumbai Indians') ]\nbowlers = pd.DataFrame(bowl.groupby(['bowler']).agg({'match_id' : 'nunique','total_runs' : 'sum','ball' : 'count','player_dismissed':'count'}))\nbowlers['Economy'] = (6*bowlers['total_runs']\/bowlers['ball']).round(2)\nbowlers.rename(columns = {'ball':'balls_bowled', 'match_id':'Total_matches','player_dismissed':'Wickets','total_runs':'Runs_conceded'}, inplace = True)\nbowlers = bowlers.sort_values(by ='Wickets' , ascending = False )\nbowlers[bowlers.Economy<=10]","da7366e7":"wicket=deliveries[deliveries['player_dismissed']=='V Kohli']['dismissal_kind'].value_counts()\nwicket","83ae40d7":"wicket=(deliveries[deliveries['player_dismissed']=='V Kohli']['bowler'].value_counts())\nwicket","f9613ac5":"bowler_type=kohli.groupby(['Bowler_type']).size().reset_index(name='Bowler_count')\nbowler_type=bowler_type.sort_values(\"Bowler_count\",ascending=False)\nbowler_type.groupby(\"Bowler_type\").head(2)","c2793a9c":"kohli.Out.replace({'yes' : 'Yes'},regex=True,inplace=True)\nsns.set(style='dark')\nfig=plt.gcf()\nfig.set_size_inches(8,5.2)\nsns.countplot(kohli['Out'],order=kohli['Out'].value_counts().index)\nplt.text(-0.1,5,str(kohli['Out'].value_counts()['Yes']),size=29,color='black')\nplt.text(0.9,5,str(kohli['Out'].value_counts()['No']),size=29,color='black')\nplt.xlabel('Out\/Not out',fontsize=15)\nplt.ylabel('Total count',fontsize=15)\nplt.yticks(fontsize=0)\nplt.title('Number of times Kohli got out')\nplt.show()","8bedbc61":"dis_type=kohli.groupby(['Dismissal_type']).size().reset_index(name='Dismissal_type_count')\ndis_type.groupby(\"Dismissal_type\").head()","b1243fc2":"df_virat=kohli[['Opposition_Team','Dismissal_Description']]\ndf_virat","fe029784":"# Virat Kohli's dismissal insights","e5c09698":"## Insights derived from dataset after synthesis and analysis of IPL data is as follows: (2008-2019)\n\nNOTE: The insights are majorly derived considering IPL seasons from 2017 to 2019. The insights about player performance is derived considering all seasons wherever it was necessary. \n1. Rishab Pant has the highest run scoring Indian batsmen in the last 3 seasons combined. He is way ahead than Virat Kohli and Rohit Sharma as fas ar IPL is concerned in last 3 years.\n2. David Warner can be described as best batsman from last 3 seasons as he has staggering average of 51 from 26 IPL mathes he played in 2017 and 2019.\n3. Leg spinners have proved to be vital pick for franchises as the wicket-taking option apart from lead pacers.Leggies Rashid Khan, Imran Tahir and Yuzvendra Chahal have been in top form in last 3 years.\n4. MS Dhoni has affected most number of stumpings summing 38 and 98 catches making him best wicket-keeper of IPL. Not Suresh Raina but Dinesh Karthik has the record of having most number of catches in the IPL.\n5. Approximately 18% dip is observed in the runs scored just after the power-play overs. Royal Challengers Bangalore has highest run-rate in death-overs while Rajasthan royals have the least.Sunrishers Hyderabad has best run-rate in Powerplay in last 3 seasons while the champion team Mumbai Indians have the least strangely.\n6. S Dhawan has scored the most runs as an opener in power-play in last 3 seasons.Narine has the highest strike rate of 191 in powerplays in last three years. S Raina has scored 2966 runs in all editions of IPL in the middle overs from over 7 to over 15. He is followed by Virat Kohli and Rohit Sharma as high run scorers in middle overs from all seasons of IPL.MS Dhoni has been the high run scorer in middle overs from last 3 editions of IPL. \n7. Krunal is highly effective in stopping the flow of runs as he has been having highest ratio of dot balls against CSK and took 6 wickets at economy of 7 in the 5 matches he has played against CSK.\n8. Seam bowlers should bowl outside off(third stumps) short ball moving inline with the body of Virat Kohli.This kind of ball troubles Virat Kohli as he edges or plays the shot earlier than required which in return goes up in the air and gets him caught out.Spin bowlers can too bowl a length-bowl at third stumps moving towards the stumps. He either tries to drive or block which increases his chances of getting caught in the 30 yard ring or else LBW if he misses the shot.\n\n\n\n","20d8bccd":"Seam bowlers should bowl outside off(third stumps) short ball moving inline with the body of Virat Kohli.This kind of ball troubles Virat Kohli as he edges or plays the shot earlier than required which in return goes up in the air and gets him caught out.\nSpin bowlers can too bowl a length-bowl at third stumps moving towards the stumps. He either tries to drive or block which increases his chances of getting caught in the 30 yard ring or else LBW if he misses the shot.","65c19c9f":"Sunrishers Hyderabad has best run scoring ability in Powerplay while the 3 champion team Mumbai Indians have the least strangely.","524d5cbf":"Here we see that Rishab Pant has been the high runs scoring batsmen in last 3 seasons scoring flamboyant 1594 runs.\nDavid Warner can be described the most powerful runs-scoring batsmen as he has scored 1326 runs in 26 matches at net average of 51 runs per match.","252a19f3":"# Which bowler has overall best bowling performance in last 3 seasons from 2017 to 2019?","347c6a57":"Krunal is highly effective in stopping the flow of runs as he has been having highest ratio of dot balls against CSK and took 6 wickets at economy of 7 in the 5 matches he has played against CSK.\nSimilar type of Bowling analysis can be performed for sets of different teams as well to dtermine the best bowling strategy against a particular team.","abe4c95d":"MS Dhoni has affected most number of 38 stumpings followed by Uthappa and Karthik.","8b220cdc":"# Death-Over Analysis","4daaac13":"JJ Bumrah has been highest number of wickets in last 3 seasons combined.Rashid Khan is next with 55 scalps with better economy rate than JJ Bumrah.","b3751124":"# Which batsmen has overall best batting performance in last 3 seasons from 2017 to 2019?","11d705ea":"## Runs-scorer in middle overs.","1aba1ef9":"# Virat Kohli in IPL 2020.","d54fca66":"Royal Challengers Bangalore has highest run-rate in death-overs while Rajasthan royals have the least.","26c49d3d":"# Runs vs Over Graph","69857dde":"# Who is the best behind the wickets?","640052a0":"### Power-play Analysis","4a0b6ae1":"Karthik has taken highest number of catches that is 109 followed by Suresh Raina.","4cb40b57":"# Insights of IPL dataset provided by Skillsay Ai Crickethon Team","223da651":"# MI bowling analysis against CSK.","98671d0c":"AB de villiers is the batsman with high strike rate in death overs in last 3 seasons followed by Pant and Samson.","475f034c":"The amount of runs scored in powerplay upto 5th and death-overs from over number 16 is very high. The amount of runs is less in between 6 to 8 overs and then again increases as the game progresses.There dip of roughl 16% can be seen after the powerplay ends.(100*(12500-10200)\/12500)= 18% dip","ecfbb897":"# Who has takes maximum number of catches from all editions of IPL?"}}