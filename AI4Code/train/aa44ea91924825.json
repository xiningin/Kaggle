{"cell_type":{"4810ad5c":"code","c35ad8f8":"code","34efd796":"code","648f1634":"code","dbce9479":"code","83339438":"code","08098982":"code","5b90c54c":"code","122a08f3":"code","9d5e2d4c":"code","652b4bb3":"code","216ef3cc":"code","db75dd57":"code","7f411846":"code","4b9a0a7c":"code","de59554d":"code","aa248172":"code","6063fa07":"code","805a3f93":"code","432226c4":"code","5ac7ee9c":"code","3823cce7":"code","1bc26108":"code","b2e024c5":"code","329f2b3d":"code","07bd8546":"code","7855f652":"code","3c165ff3":"code","76d45131":"code","cc3433f9":"code","65e8d0df":"code","3b0eda7a":"code","5f30c85f":"code","eed3bbc6":"code","1358cd59":"code","e1b1b2dd":"code","887158d0":"code","d25cda53":"code","301ca192":"code","e388fcc7":"code","82f1c17b":"code","08109a54":"code","34f67d3f":"code","9a149db1":"code","f2548b28":"code","df8055e7":"code","e586082e":"code","a6d84109":"code","88f42d80":"code","f531bd4f":"code","eaf17add":"code","ae82b929":"code","300bed03":"code","c1ed09bf":"code","90f0aec9":"code","a784723f":"code","8a0e60bd":"code","d89a2238":"code","ae7d14f2":"code","9f320bdd":"code","9a4012d2":"code","f189cf72":"code","7be3b6ae":"code","25b29eb4":"code","a519c521":"code","8cb487b7":"code","e3901ce4":"code","25912f0d":"code","7154c0dc":"code","98d23340":"code","75655420":"code","97ea27b4":"code","cb650d8b":"code","4afadc56":"code","812624d3":"code","d9384419":"code","e862ac9b":"code","d8415866":"code","bacf3bf3":"code","375ae8a8":"code","cbbc1704":"code","3b627591":"code","b1c8f5e9":"code","3b50e1cb":"code","e400d631":"code","8a33447f":"code","7262ccc9":"code","8cbbff67":"code","9662d57f":"code","7844b977":"code","33804020":"code","81fc11f5":"code","eed0fe21":"code","f347f7ae":"code","8b111540":"code","cfdf01fe":"code","9402a4b9":"code","989e0dba":"code","fef579a1":"code","304436b2":"code","6fd5cf39":"code","f9450117":"code","0e4b72db":"code","077685f5":"code","9cf84e59":"code","afff63b2":"code","6c7db7f2":"code","0da98025":"code","b355c5f7":"code","df615648":"code","d8559089":"code","96ccb4a6":"code","d33c910d":"code","7e440295":"code","f7ed40d6":"code","0a09c2da":"code","8654f90f":"code","df90e6ad":"code","7c566119":"code","baa6d9c3":"code","f4bd497e":"code","0171ef24":"code","1d47790c":"code","6f035fbd":"code","3462861f":"code","63680d30":"code","73786394":"code","37ee223c":"code","51d28616":"code","26d782ae":"code","22f17637":"code","d8fcedbd":"code","284a0e85":"code","927d23cc":"code","a3ee4f52":"code","cc6a0124":"code","f3b49e4f":"code","22ccdb39":"code","c4c3f0ba":"code","734e33ed":"code","c808c1b7":"code","2bdca188":"code","78efe59d":"code","cede163a":"code","09d90f2c":"code","ef374c89":"code","4876fd40":"code","3d2a48c4":"code","da478d1a":"code","d7b12756":"code","aa8337bb":"code","34616d6e":"code","15e7e7ef":"code","8e01d11a":"code","5b0e0714":"code","75a85a8c":"code","bd6eda5c":"code","042acf77":"code","a12253b9":"code","1562a99b":"code","7d2a461a":"code","fbe9db90":"code","08b66073":"code","c152f5aa":"code","99eed83e":"code","c1a32495":"code","384a88f6":"code","831eb4b9":"code","4fcfce72":"code","583d6d17":"code","c47948cb":"code","e382fd60":"code","69784467":"code","abf924d1":"code","397ffc4b":"code","93804db7":"code","40cf5de6":"code","80d8ae35":"code","dd19ee6b":"code","5b7113fc":"code","ac47da1b":"code","6a9e141e":"code","5900483b":"code","074aaaa9":"code","c34f291d":"code","58232a66":"code","2e66d145":"code","9bcb01f3":"code","4a82987e":"code","6aff9042":"code","d276ce37":"code","7bc8663a":"code","86430224":"code","2c7817ee":"code","1dcfd17c":"code","04fd2412":"code","937debd3":"code","b7fd27ca":"code","f6547a48":"code","ce9fdede":"code","99a48fa3":"code","ecc5fa64":"code","55964341":"code","59b2be36":"code","5d0a1a25":"code","e9eb6227":"code","7aab3a06":"code","0b83f1ba":"code","b0f67de4":"code","f9935b21":"code","7914e78a":"code","38e1a359":"code","d4fea9a9":"code","f4b563f7":"code","6c9fe31b":"code","9a3a0901":"code","3759d2db":"code","ca6ace8f":"code","e6f02813":"code","95ec2138":"code","7e39eb41":"code","20609fca":"code","dfbb2e6c":"code","8e1e9610":"code","e56a6072":"code","5541b4c0":"code","e9360706":"code","ad94b5a0":"code","3f3dfe59":"code","866525ed":"code","be94009c":"code","ecbe5243":"code","330359a6":"code","72874371":"code","a2f25a8e":"code","3e650dbb":"code","e5fe02ef":"code","9136005b":"code","dfcbd9bc":"code","cddc9113":"code","b8a94624":"code","c5331e8e":"code","b3e23550":"code","ef5019fd":"code","f2b19775":"code","fc3d7eaf":"code","cfca4a6f":"code","ff5e2f3b":"code","01ffd757":"code","96dedfae":"code","980b2841":"code","7a5ac99e":"code","759dc99c":"code","0c1549ab":"code","fe49754d":"code","7ca8c2c5":"code","0b470ec1":"code","9d7ed355":"code","b1d26f39":"code","4c44ba1d":"code","73f34dde":"code","bcd2feca":"code","38049748":"code","ddc87527":"code","a926a32a":"code","48f52308":"code","dcb45f57":"code","2ba8b329":"code","7783ba36":"code","bbf112fa":"code","4185c2da":"code","2a67de8c":"code","ce511862":"code","35d06b4f":"code","c6e19b26":"code","63f8942a":"code","9191cd48":"code","9f446a47":"code","a5e3caff":"code","e5f8a7ff":"code","fa7067c3":"code","6c7b9ae1":"code","fbde47b0":"code","e33660da":"code","afd0dd66":"code","789dfa53":"code","1233a3f1":"code","98b31b68":"code","46e88b5b":"code","8224c900":"markdown","9e3093ab":"markdown","bae06360":"markdown","ee5e3a51":"markdown","7ca0f6d5":"markdown","6f471ba6":"markdown","fc3fe862":"markdown","5e672a98":"markdown","9069fffb":"markdown","372a5c28":"markdown","68abb0d8":"markdown","21988aac":"markdown","8e58eeb5":"markdown","19966066":"markdown","25843683":"markdown","a2713ba1":"markdown","f98a5854":"markdown","152b7041":"markdown","4ca4550f":"markdown","1de42c2d":"markdown","52576146":"markdown","1c4ea9b9":"markdown","b9ffcf9d":"markdown","52945b07":"markdown","a364a220":"markdown","624c63c4":"markdown","38988124":"markdown","502f004b":"markdown","34148470":"markdown","02384398":"markdown","d901cff6":"markdown","18615dcd":"markdown","fa2d9a14":"markdown","35988365":"markdown","38f948b4":"markdown","bc8cad1b":"markdown","4f7e53cf":"markdown","89dfcba1":"markdown","caa04092":"markdown","71e08da3":"markdown","8e64cfe0":"markdown","b76fdb11":"markdown","e3e8268b":"markdown","d9906496":"markdown","6915c171":"markdown","94cf3445":"markdown","9b3a226e":"markdown","b864d37d":"markdown","223676dd":"markdown","3a1fdb39":"markdown","39607e4a":"markdown","fd160657":"markdown","f6d1af1e":"markdown","32546d22":"markdown","8f862f8a":"markdown","f86f3b55":"markdown","ac2c57a2":"markdown","3f6705ff":"markdown","16ea1ccf":"markdown","b823b59e":"markdown","95589cdb":"markdown","55fdb4ad":"markdown","16a24c45":"markdown","539fb4e5":"markdown","1eaded6e":"markdown","98bd02d4":"markdown","ea1aa6fe":"markdown","3b24e128":"markdown","c374ccc7":"markdown","ac59ecc2":"markdown","c2ca1ff1":"markdown","8749be5b":"markdown","b4b0b1f7":"markdown","04ee5fca":"markdown","0470ea51":"markdown","03b28328":"markdown","4e41a0cd":"markdown","1bbbd6cb":"markdown","cb8b1340":"markdown","987fad63":"markdown","99f34cda":"markdown","e9f48b30":"markdown","16d3c547":"markdown","4079461b":"markdown","85ceb3f8":"markdown","d21c782b":"markdown","f257916b":"markdown","2a982f8c":"markdown","9418cc84":"markdown","d359a0af":"markdown","8ed6bbf0":"markdown","acaee672":"markdown","b73068e2":"markdown","34b7205e":"markdown","28bdba91":"markdown","01db0fb4":"markdown","68c8958d":"markdown"},"source":{"4810ad5c":"!pip install https:\/\/github.com\/pandas-profiling\/pandas-profiling\/archive\/master.zip","c35ad8f8":"!pip install xgboost","34efd796":"!pip install tpot","648f1634":"import pandas as pd\nimport numpy as np\nimport sklearn \nimport pylab as plt\nimport seaborn as sns\nimport matplotlib.ticker as mtick\nfrom sklearn.decomposition import PCA\nimport pandas_profiling as pp\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import classification_report\nimport timeit\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import linear_model\nfrom xgboost import XGBClassifier\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom scipy import stats\nfrom sklearn.utils import resample\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nimport tpot\nfrom tpot import TPOTClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.pipeline import make_pipeline, make_union\nfrom tpot.builtins import StackingEstimator\nfrom sklearn.pipeline import make_pipeline\nimport pickle\nfrom sklearn.linear_model import Ridge\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import median_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import PowerTransformer\nfrom tpot.builtins import ZeroCount","dbce9479":"data=pd.read_excel('..\/input\/telco-customer-churn-1113\/Telco_customer_churn.xlsx')","83339438":"#data = pd.read_excel ('Telco_customer_churn.csv.xlsx')","08098982":"data.shape","5b90c54c":"data.info()","122a08f3":"\n#Customer ID \n#count,country and state unique value\n#city :the city\n#zip code\n#lat long : latitude , longitude\n#gender:Whether the customer is a male or a female\n#senior citizen :Whether the customer is a senior citizen or not (yes, no)\n#partner :Whether the customer has a partner or not (Yes, No)\n#dependents:Whether the customer has dependents or not (Yes, No)\n#tenure months :Number of months the customer has stayed with the company\n#phone service :Whether the customer has a phone service or not (Yes, No)\n#multiple lines :Whether the customer has multiple lines or not (Yes, No, No phone service)\n#internet service :Customer\u2019s internet service provider (DSL, Fiber optic, No)\n#online security :Whether the customer has online security or not (Yes, No, No internet service)\n#online backup :Whether the customer has online backup or not (Yes, No, No internet service)\n#device protection :Whether the customer has device protection or not (Yes, No, No internet service)\n#tech support :Whether the customer has tech support or not (Yes, No, No internet service)\n#streaming TV :Whether the customer has streaming TV or not (Yes, No, No internet service)\n#streaming movies :Whether the customer has streaming movies or not (Yes, No, No internet service)\n#contract :The contract term of the customer (Month-to-month, One year, Two year)\n#paperless billing : Whether the customer has paperless billing or not (Yes, No) (facturation sans papier)\n#payment method :The customer\u2019s payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))\n#monthly charges :The amount charged to the customer monthly\n#total charges :The total amount charged to the customer\n#churn label :Whether the customer churned or not (Yes or No)\n#churn value : churn label but with (0 or 1)\n#churn score : score for clients\n#cltv: customer lifetime value (something like that to calculate (acquisition costs, revenue, customer service))\n#churn reason : the reason of leaving (20 reasons)\n","9d5e2d4c":"print(data.isnull().sum())","652b4bb3":"col=data.columns\nprint(col)","216ef3cc":"data.describe()","db75dd57":"nbr_col_unique =data.nunique()\nprint(nbr_col_unique)","7f411846":"for item in data.columns:\n    print(item)\n    print (data[item].unique())","4b9a0a7c":"To_drop=['CustomerID']\ndata=data.drop(To_drop,axis=1)","de59554d":"data.head()","aa248172":"To_drop=['Count','Country','State']\ndata=data.drop(To_drop,axis=1)","6063fa07":"nbr_col_unique =data.nunique()\nprint(nbr_col_unique)","805a3f93":"var_gender='Churn Label'\nprint(data[var_gender].unique())\ny=data[var_gender]\nax = sns.countplot(y,label=\"Churn Label\")     \nno, yes = y.value_counts()\nprint('Number of yes: ',yes)\nprint('Number of no : ',no)\nprint('pourcentage')\nprint('pourcentage value of yes:',float(yes)*100\/float(yes+no),'%')\nprint('pourcentage value of no :',float(no)*100\/float(yes+no),'%')\nplt.show()\nlabels='No','Yes'\nm=float(yes)*100\/float(yes+no)\nf=float(no)*100\/float(yes+no)\nsizes=data['Churn Label'].value_counts()\nplt.pie(sizes, labels=labels,autopct='%1.1f%%', shadow=True, startangle=140)\nplt.legend(labels=labels)\nplt.title(\"churm rate\")\nplt.axis('equal')\nplt.show()","432226c4":"data.head()","5ac7ee9c":"data.info()","3823cce7":"sns.pairplot(data, hue='Churn Value', height=2.5);","1bc26108":"var_gender='Gender'\nprint(data[var_gender].unique())\ny=data[var_gender]","b2e024c5":"\nax = sns.countplot(y,label=\"Count\")     \nmale, female = y.value_counts()\nprint('Number of Male: ',male)\nprint('Number of Female : ',female)\nprint('pourcentage')\nprint('pourcentage value of Male:',float(male)*100\/float(male+female),'%')\nprint('pourcentage value of Yes :',float(female)*100\/float(male+female),'%')","329f2b3d":"#diagramme \u00e0 secteurs - comptage de sexe\nlabels='Male','Female'\nm=float(male)*100\/float(male+female)\nf=float(female)*100\/float(male+female)\nsizes=data['Gender'].value_counts()\nplt.pie(sizes, labels=labels,autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.show()","07bd8546":"gb = data.groupby(\"Gender\")[\"Churn Label\"].value_counts().to_frame().rename({\"Churn Label\": \"Number of Customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Gender\", y = \"Number of Customers\", data = gb, hue = \"Churn Label\", palette = sns.color_palette(\"hls\", 8)).set_title(\"Gender and relative Churn Rates in our population\");","7855f652":"var_senior_citizen='Senior Citizen'\nprint(data[var_senior_citizen].unique())\ny=data[var_senior_citizen]","3c165ff3":"import seaborn as sns\nax = sns.countplot(y,label=\"Count\")     \nno_old, old = y.value_counts()\nprint('Number of No: ',no_old)\nprint('Number of Yes : ',old)\nprint('pourcentage')\nprint('pourcentage of No:',float(no_old)*100\/float(no_old+old),'%')\nprint('pourcentage of Yes :',float(old)*100\/float(no_old+old),'%')","76d45131":"#diagramme \u00e0 secteurs - comptage de senior citizen\nlabels='no old person','old person'\nm=float(no_old)*100\/float(no_old+old)\nf=float(no_old)*100\/float(no_old+old)\nsizes=data['Senior Citizen'].value_counts()\nplt.pie(sizes, labels=labels,autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.show()","cc3433f9":"gb = data.groupby(\"Senior Citizen\")[\"Churn Label\"].value_counts().to_frame().rename({\"Churn Label\": \"Number of Customers\"}, axis = 1).reset_index()\ngb[\"Senior Citizen\"].replace(to_replace =\"No\", value =\"Young\", inplace = True)\ngb[\"Senior Citizen\"].replace(to_replace =\"Yes\", value =\"Senior\", inplace = True)\nprint(gb)\ntp = gb.groupby(\"Senior Citizen\")[\"Number of Customers\"].sum().to_frame().reset_index().rename({\"Number of Customers\": \"# Customers in Age Group\"}, axis = 1)\ngb = pd.merge(gb, tp, on = \"Senior Citizen\")\ngb[\"Churn Rate in Age Group\"] = gb[\"Number of Customers\"]\/gb[\"# Customers in Age Group\"]\ngb = gb[gb[\"Churn Label\"] == \"Yes\"]\n\nsns.barplot(x = \"Senior Citizen\", y = \"Churn Rate in Age Group\", data = gb).set_title(\"Churn Rate for Young and Senior customers\");","65e8d0df":"var_partner='Partner'\nprint(data[var_partner].unique())\ny=data[var_partner]","3b0eda7a":"import seaborn as sns\nax = sns.countplot(y,label=\"Count\").set_title(\"Partner\")    \nno_partner, partner = y.value_counts()\nprint('Number of No: ',no_partner)\nprint('Number of Yes : ',partner)\nprint('pourcentage')\nprint('pourcentage of No:',float(no_partner)*100\/float(no_partner+partner),'%')\nprint('pourcentage of Yes :',float(partner)*100\/float(no_partner+partner),'%')","5f30c85f":"labels='no partner','partner'\nm=float(no_partner)*100\/float(no_partner+partner)\nf=float(no_partner)*100\/float(no_partner+partner)\nsizes=data['Partner'].value_counts()\nplt.pie(sizes, labels=labels,autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.show()","eed3bbc6":"var_dependents='Dependents'\nprint(data[var_dependents].unique())\ny=data[var_dependents]","1358cd59":"import seaborn as sns\nax = sns.countplot(y,label=\"Count\").set_title(\"Dependents\")    \nno_depend, depend = y.value_counts()\nprint('Number of No: ',no_depend)\nprint('Number of Yes : ',depend)\nprint('pourcentage')\nmean_no_depend=float(no_depend)*100\/float(no_depend+depend)\nmean_depend=float(depend)*100\/float(no_depend+depend)\nprint('pourcentage of No:',mean_no_depend,'%')\nprint('pourcentage of Yes :',mean_depend,'%')","e1b1b2dd":"#diagramme \u00e0 secteurs - comptage of dependents\nlabels='no dependent','dependent'\nm=mean_no_depend\nf=mean_depend\nsizes=data['Dependents'].value_counts()\nplt.pie(sizes, labels=labels,autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.show()","887158d0":"var_dependents='Tenure Months'\nprint(data[var_dependents].unique())\ny=data[var_dependents]","d25cda53":"data['Tenure Months'].unique()","301ca192":"data.hist(column='Tenure Months',bins=100);\nplt.xlabel('Tenure Months')\nplt.ylabel('number of customers')","e388fcc7":"data['Tenure Months'].describe()","82f1c17b":"sns.kdeplot(data=data,x='Tenure Months')\nplt.grid(True)","08109a54":"var_phone_service='Phone Service'\nprint(data[var_phone_service].unique())\ny=data[var_phone_service]","34f67d3f":"import seaborn as sns\nax = sns.countplot(y,label=\"Customers\").set_title(\"Phone Service\")     \nphone_ser, no_phone_ser = y.value_counts()\nprint('Number of Yes: ',phone_ser)\nprint('Number of No : ',no_phone_ser)\nprint('pourcentage')\nmean_phone_ser=float(phone_ser)*100\/float(phone_ser+no_phone_ser)\nmean_no_phone_ser=float(no_phone_ser)*100\/float(phone_ser+no_phone_ser)\nprint('pourcentage of Yes:',mean_phone_ser,'%')\nprint('pourcentage of No :',mean_no_phone_ser,'%')","9a149db1":"labels='with phone service','without phone service'\nsizes=data['Phone Service'].value_counts()\nplt.pie(sizes, labels=labels,autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.show()","f2548b28":"var_multiple_lines='Multiple Lines'\nprint(data[var_multiple_lines].unique())\ny=data[var_multiple_lines]","df8055e7":"x=data['Multiple Lines'].value_counts()","e586082e":"import seaborn as sns\nax = sns.countplot(y,label=\"Count\")     \nno,yes,no_phone = y.value_counts()\nprint('Number of No: ',no)\nprint('Number of Yes : ',yes)\nprint('Number of No Phone: ',no_phone)\nprint('pourcentage')\nmean_no=float(no)*100\/float(no+yes+no_phone)\nmean_yes=float(yes)*100\/float(no+yes+no_phone)\nmean_no_phone=float(no_phone)*100\/float(no+yes+no_phone)\nprint('pourcentage of No:',mean_no,'%')\nprint('pourcentage of Yes :',mean_yes,'%')\nprint('pourcentage of No Phone :',mean_no_phone,'%')","a6d84109":"gb = data.groupby(\"Multiple Lines\")[\"Churn Label\"].value_counts().to_frame().rename({\"Churn Label\": \"Number of Customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Multiple Lines\", y = \"Number of Customers\", data = gb, hue = \"Churn Label\", palette = sns.color_palette(\"hls\", 8)).set_title(\"Multiple Lines and relative Churn Rates in our population\");","88f42d80":"mean_no=gb[\"Number of Customers\"][0]\/float(gb[\"Number of Customers\"][0]+gb[\"Number of Customers\"][1])\nmean_yes=gb[\"Number of Customers\"][2]\/float(gb[\"Number of Customers\"][2]+gb[\"Number of Customers\"][3])\nmean_no_phone=gb[\"Number of Customers\"][4]\/float(gb[\"Number of Customers\"][4]+gb[\"Number of Customers\"][5])\nprint('pourcentage of No:',mean_no,'%')\nprint('pourcentage of Yes :',mean_yes,'%')\nprint('pourcentage of No Phone :',mean_no_phone,'%')","f531bd4f":"internet = (data['Internet Service'].value_counts()*100.0 \/len(data)).plot(kind='pie',labels = ['Fiber optic', 'DSL', 'No'], figsize = (7,7) , colors = ['orange','purple', 'black'], fontsize = 15)\npourcentage=data['Internet Service'].value_counts()*100.0 \/len(data)\nprint(pourcentage)\nplt.show()","eaf17add":"contract = (data['Contract'].value_counts()*100.0 \/len(data)).plot(kind='bar', stacked = True,\\\n                                                rot = 0, color = ['orange','blue','magenta'])\n  \ncontract.yaxis.set_major_formatter(mtick.PercentFormatter())\ncontract.set_ylabel('Customers')\ncontract.set_xlabel('Contract')\ncontract.set_title('Contract distribution');","ae82b929":"gb = data.groupby(\"Contract\")[\"Churn Label\"].value_counts().to_frame().rename({\"Churn Label\": \"Number of Customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Contract\", y = \"Number of Customers\", data = gb, hue = \"Churn Label\", palette = sns.color_palette(\"hls\", 8)).set_title(\"Contracts and relative Churn Rates in our population\");","300bed03":"gb","c1ed09bf":"mean_yes_month=gb[\"Number of Customers\"][1]\/float(gb[\"Number of Customers\"][0]+gb[\"Number of Customers\"][1])\nmean_yes_year=gb[\"Number of Customers\"][3]\/float(gb[\"Number of Customers\"][2]+gb[\"Number of Customers\"][3])\nmean_yes_two_year=gb[\"Number of Customers\"][5]\/float(gb[\"Number of Customers\"][4]+gb[\"Number of Customers\"][5])\nprint('pourcentage of month to month type contract churners:',mean_yes_month,'%')\nprint('pourcentage of one year type contract churners: :',mean_yes_year,'%')\nprint('pourcentage of two year type contract churners: :',mean_yes_two_year,'%')","90f0aec9":"data.hist(column='Monthly Charges',bins=100);\nplt.xlabel('monthly charges')\nplt.ylabel('number of persons')","a784723f":"data['Monthly Charges'].plot.kde();","8a0e60bd":"sns.distplot(data[\"Monthly Charges\"]).set_title(\"Monthly Charges Distribution\");","d89a2238":"try:\n    data[\"Total Charges\"].astype(\"float64\")\nexcept ValueError:\n    print(\"We can't convert this column to floats, there must be some non-convertible values\")","ae7d14f2":"data.dtypes","9f320bdd":"print(data[\"Total Charges\"].value_counts().head(n=8))","9a4012d2":"print(data[\"Total Charges\"].value_counts().index[0])\nprint(data[\"Total Charges\"].value_counts().index[1])","f189cf72":"data.drop(data[data['Total Charges'] == \" \"].index, axis = 0, inplace = True)\ndata.reset_index(drop = True, inplace = True)","7be3b6ae":"data.shape","25b29eb4":"data[\"Total Charges\"] = data[\"Total Charges\"].astype(\"float64\")","a519c521":"data.hist(column='Total Charges',bins=100);\nplt.xlabel('Total charges')\nplt.ylabel('number of persons')","8cb487b7":"data['Total Charges'].plot.kde();","e3901ce4":"sns.distplot(data[\"Total Charges\"]).set_title(\"Total Charges Distribution\");","25912f0d":"print(data.dtypes)","7154c0dc":"fig, axis = plt.subplots(nrows = 2, ncols = 3, figsize = (16, 10))\n\ngb = data.groupby(\"Internet Service\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Internet Service\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[0][0]).set_title(\"Internet Service and Churn\");\n\ngb = data.groupby(\"Phone Service\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Phone Service\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[0][1]).set_title(\"Phone Service and Churn\");\n\ngb = data.groupby(\"Multiple Lines\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Multiple Lines\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[0][2]).set_title(\"Multiple Lines Phone Option and Churn\");\n\ngb = data.groupby(\"Contract\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Contract\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[1][1]).set_title(\"Contract Type and Churn\");","98d23340":"fig, axis = plt.subplots(nrows = 2, ncols = 3, figsize = (16, 10))\n\ngb = data.groupby(\"Online Security\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Online Security\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[0][0]).set_title(\"Online Security Internet Service and Churn\")\n\ngb = data.groupby(\"Online Backup\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Online Backup\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[0][1]).set_title(\"Online Backup Internet Service and Churn\")\n\ngb = data.groupby(\"Device Protection\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Device Protection\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[0][2]).set_title(\"Device Protection Internet Service and Churn\")\n\ngb = data.groupby(\"Tech Support\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Tech Support\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[1][0]).set_title(\"Tech Support Internet Service and Churn\")\n\ngb = data.groupby(\"Streaming TV\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Streaming TV\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[1][1]).set_title(\"Streaming TV Internet Service and Churn\")\n\ngb = data.groupby(\"Streaming Movies\")[\"Churn Label\"].value_counts()\/len(data)\ngb = gb.to_frame().rename({\"Churn Label\": \"% of customers\"}, axis = 1).reset_index()\nsns.barplot(x = \"Streaming Movies\", y = \"% of customers\", data = gb, hue = \"Churn Label\", ax = axis[1][2]).set_title(\"Streaming Movies Internet Service and Churn\");","75655420":"gb = data[(data[\"Online Security\"] != \"No internet service\")].replace([\"Yes\", \"No\"], [1, 0]).groupby(\"Tenure Months\")[\"Online Security\"].sum().to_frame().reset_index()\nsns.lmplot(\"Tenure Months\", \"Online Security\", data = gb, line_kws={'color': 'red'}, lowess = True);\nax = plt.gca()\nax.set_title(\"Number of Online Security subscribers per Tenure level\");","97ea27b4":"gb = data[(data[\"Online Security\"] != \"No internet service\")].replace([\"Yes\", \"No\"], [1, 0]).groupby(\"Tenure Months\")[\"Online Backup\"].sum().to_frame().reset_index()\nsns.lmplot(\"Tenure Months\", \"Online Backup\", data = gb, line_kws={'color': 'red'}, lowess = True)\nax = plt.gca()\nax.set_title(\"Number of OnlineBackup subscribers per Tenure level\");","cb650d8b":"gb = data[(data[\"Online Security\"] != \"No internet service\")].replace([\"Yes\", \"No\"], [1, 0]).groupby(\"Tenure Months\")[\"Device Protection\"].sum().to_frame().reset_index()\nsns.lmplot(\"Tenure Months\", \"Device Protection\", data = gb, line_kws={'color': 'red'}, lowess = True)\nax = plt.gca()\nax.set_title(\"Number of DeviceProtection subscribers per Tenure level\");","4afadc56":"gb = data[(data[\"Online Security\"] != \"No internet service\")].replace([\"Yes\", \"No\"], [1, 0]).groupby(\"Tenure Months\")[\"Tech Support\"].sum().to_frame().reset_index()\nsns.lmplot(\"Tenure Months\", \"Tech Support\", data = gb, line_kws={'color': 'red'}, lowess = True)\nax = plt.gca()\nax.set_title(\"Number of TechSupport subscribers per Tenure level\");","812624d3":"gb = data[(data[\"Online Security\"] != \"No internet service\")].replace([\"Yes\", \"No\"], [1, 0]).groupby(\"Tenure Months\")[\"Streaming TV\"].sum().to_frame().reset_index()\nsns.lmplot(\"Tenure Months\", \"Streaming TV\", data = gb, line_kws={'color': 'red'}, lowess = True)\nax = plt.gca()\nax.set_title(\"Number of StreamingTV subscribers per Tenure level\");","d9384419":"gb = data[(data[\"Online Security\"] != \"No internet service\")].replace([\"Yes\", \"No\"], [1, 0]).groupby(\"Tenure Months\")[\"Streaming Movies\"].sum().to_frame().reset_index()\nsns.lmplot(\"Tenure Months\", \"Streaming Movies\", data = gb, line_kws={'color': 'red'}, lowess = True)\nax = plt.gca()\nax.set_title(\"Number of StreamingMovies subscribers per Tenure level\");","e862ac9b":"gb = data[(data[\"Online Security\"] != \"No internet service\")].replace([\"Yes\", \"No\"], [1, 0])\ngb[\"AllServices\"] = gb[\"Online Security\"]*gb[\"Online Backup\"]*gb[\"Device Protection\"]*gb[\"Tech Support\"]*gb[\"Streaming TV\"]*gb[\"Streaming Movies\"]\nsns.lmplot(\"Tenure Months\", \"AllServices\", data = gb, line_kws={'color': 'red'}, lowess = True);\nax = plt.gca()\nax.set_title(\"Percentage of subscribers to all services per Tenure level\");","d8415866":"tvc = gb[\"Tenure Months\"].value_counts()\ni = []\nv = []\nfor tenure in tvc.index:\n    i.append(tenure)\n    v.append(len(gb[(gb[\"Tenure Months\"] == tenure) & (gb.AllServices == 1)])\/len(gb[gb[\"Tenure Months\"] == tenure]))","bacf3bf3":"df = pd.DataFrame(data = v, index = i, columns = [\"%AllServices\"]).reset_index().sort_values(\"index\").reset_index(drop = True).rename({\"index\": \"tenure\"}, axis = 1)\nsns.lmplot(\"tenure\", \"%AllServices\", data = df, line_kws={'color': 'red'}, lowess = True)\nax = plt.gca()\nax.set_title(\"Percentage of Customers with all Additional Services Active per Tenure level\");","375ae8a8":"plt.plot(df.tenure, df[\"%AllServices\"]);\nax = plt.gca()\nax.set_title(\"Trend in percentage of customers subscribed to all services for each tenure level\");","cbbc1704":"plt.figure(figsize=(20,10))\nsns.heatmap(data.isna(), cbar=False)","3b627591":"nombre1=data['Churn Reason'].value_counts().sum()\nnombre2=data['Churn Label'].value_counts()\nprint(nombre1)\nprint(nombre2['Yes'])","b1c8f5e9":"To_drop=['Churn Reason']\ndata=data.drop(To_drop,axis=1)","3b50e1cb":"To_drop=['Churn Label']\ndata=data.drop(To_drop,axis=1)","e400d631":"columns_to_convert = ['Partner', \n                      'Dependents', \n                      'Phone Service', \n                      'Paperless Billing', \n                      ]\n\nfor item in columns_to_convert:\n    data[item].replace(to_replace='Yes', value=1, inplace=True)\n    data[item].replace(to_replace='No',  value=0, inplace=True)\ndata.head()","8a33447f":"data.info()","7262ccc9":"nbr_col_unique =data.nunique()\nprint(nbr_col_unique)","8cbbff67":"sns.pairplot(data, hue='Churn Value', height=2.5);","9662d57f":"df=data.copy()","7844b977":"To_drop=['City','Lat Long']\ndf=df.drop(To_drop,axis=1)","33804020":"df.info()","81fc11f5":"nbr_col_unique =df.nunique()\nprint(nbr_col_unique)","eed0fe21":"x=data['Latitude']\ny=data['Longitude']\nsns.displot(data, x=x, y=y, hue=\"Churn Value\", kind=\"kde\")","f347f7ae":"x=data['Latitude']\ny=data['Longitude']\n\nsns.jointplot(\n    data=data,\n    x=x, y=y, hue=\"Churn Value\",\n    kind=\"kde\"\n)","8b111540":"data.hist(column='Churn Score',bins=80);\nplt.xlabel('Churn Score')\nplt.ylabel('number of persons')","cfdf01fe":"data['Churn Score'].plot.kde()","9402a4b9":"ax = sns.boxplot(x=data['Churn Value'], y=data['Churn Score'], data=data)","989e0dba":"df.columns","fef579a1":"df = pd.get_dummies(df.iloc[:, 1 :])\ndf.head()","304436b2":"df.columns","6fd5cf39":"df.shape","f9450117":"liste_columns=df.columns\nk=0\nfor i in liste_columns:\n  test=stats.shapiro(df[i])\n  if (test[1]>0.05):\n    k=k+1\n    print('the p_value of ',i,' is ',test[1])\nif k==0:\n  print('all variables has not a normal distribution because all p_values are smaller than 0.05')\n","0e4b72db":"c=df.corr()[['Churn Value']]\ns = c.unstack()\nso = s.sort_values(kind=\"quicksort\")\nprint(so)","077685f5":"plt.figure(figsize=(10,5))\nfig, ax = plt.subplots(figsize=(15,15)) \nsns.heatmap(df.corr()[['Churn Value']],cmap=\"RdBu_r\",center=0.0, annot=True);\nc=df.corr()[['Churn Value']].abs()\ns = c.unstack()\nso = s.sort_values(kind=\"quicksort\")\nprint(so)","9cf84e59":"plt.figure(figsize=(10,5))\nfig, ax = plt.subplots(figsize=(15,15)) \nsns.heatmap(df.corr()[['Churn Value']],cmap=\"RdBu_r\",center=0.0, annot=True);\nc=df.corr(method='spearman')[['Churn Value']].abs()\ns = c.unstack()\nso = s.sort_values(kind=\"quicksort\")\nprint(so)","afff63b2":"sns.clustermap(df.corr(method='spearman'),figsize=(15,15))\nplt.show()","6c7db7f2":"f = plt.figure(figsize=(19, 15))\nplt.matshow(df.corr(method='spearman').abs(), fignum=f.number)\nplt.xticks(range(df.shape[1]), df.columns, fontsize=14, rotation=45)\nplt.yticks(range(df.shape[1]), df.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)\nplt.title('Correlation Matrix', fontsize=16);","0da98025":"corr = df.corr(method='spearman')\ncorr.style.background_gradient(cmap='coolwarm')","b355c5f7":"var_gender='Churn Value'\nprint(df[var_gender].unique())\ny=df[var_gender]   \nno, yes = y.value_counts()\nprint('Number of yes: ',yes)\nprint('Number of no : ',no)","df615648":"df_majority = df[df['Churn Value']==0]\ndf_minority = df[df['Churn Value']==1]\ndf_minority_upsampled = resample(df_minority, \n                                 replace=True,     \n                                 n_samples=len(df_majority),    \n                                 random_state=123) \ndf_upsampled = pd.concat([df_majority, df_minority_upsampled])\n ","d8559089":"X_samp=df_upsampled.copy()\nY_samp=df_upsampled['Churn Value']\nTo_drop=['Churn Value']\nX_samp=X_samp.drop(To_drop,axis=1)","96ccb4a6":"X=df.copy()","d33c910d":"Y=df['Churn Value']","7e440295":"To_drop=['Churn Value']\nX=X.drop(To_drop,axis=1)","f7ed40d6":"sc=StandardScaler()\nX_pca=sc.fit_transform(X) \nmodel=PCA(n_components=30)\nX_pca_comp=model.fit_transform(X_pca)","0a09c2da":"X_pca_comp.shape","8654f90f":"var=model.explained_variance_ratio_*100\nprint(var)","df90e6ad":"np.cumsum(model.explained_variance_ratio_*100)","7c566119":"plt.plot(np.cumsum(model.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance')\nplt.show()","baa6d9c3":"np.argmax(np.cumsum(model.explained_variance_ratio_)>0.9)","f4bd497e":"sc=StandardScaler()\nX_pca=sc.fit_transform(X) \nmodel=PCA(n_components=26)\nX_pca_comp=model.fit_transform(X_pca)","0171ef24":"X_pca_comp.shape","1d47790c":"var=model.explained_variance_ratio_*100\nprint(var)","6f035fbd":"np.cumsum(model.explained_variance_ratio_*100)","3462861f":"plt.plot(np.cumsum(model.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance')\nplt.show()","63680d30":"pca_df=pd.DataFrame(X_pca_comp,columns=['pca1','pca2','pca3','pca4','pca5','pca6','pca7','pca8','pca9','pca10','pca11','pca12','pca13','pca14','pca15','pca16','pca17','pca18','pca19','pca20','pca21','pca22','pca23','pca24','pca25','pca26'])","73786394":"X_train, X_test, Y_train, Y_test= train_test_split(pca_df,Y, train_size=0.80, random_state=6,stratify=Y)","37ee223c":"final_model = XGBClassifier()\nfinal_model.fit(X_train, Y_train)\nprint(final_model.score(X_test, Y_test))\nprint(final_model.score(X_train, Y_train))","51d28616":"labels=['No','Yes']\nplot_confusion_matrix(final_model, X_test, Y_test,display_labels=labels, cmap=plt.cm.Blues)\nplt.show()","26d782ae":"knn_pred_prob =final_model.predict_proba(X_test)[:,1]\nknn_auroc = roc_auc_score(Y_test, knn_pred_prob)\nprint(\"xgboost AUROC: {}\".format(knn_auroc))\nknn_y_pred = final_model.predict(X_test)\nprint(classification_report(Y_test, knn_y_pred,digits=6))","22f17637":"def idx_max_knn(liste):\n  max = liste[0][0]\n  param=liste[0][1]\n  a = 0  \n  for i in range(len(liste)):\n    if liste[i][0]>max:\n      max =liste [i][0]\n      param=liste[i][1]\n      a=i\n  return [max,a,param]\n","d8fcedbd":"def idx_max_2x2_knn(liste):\n\t  \n  a = 0\n  b =liste[0][1]\n  max = liste[0][0]\n  param=liste[0][2]\n  for i in np.arange(len(liste)):\n    if liste[i][0]>max:\n      max=liste[i][0]\n      b=liste[i][1]\n      param=liste[i][2]\n      a=i\n  return [max,b,a,param]","284a0e85":"Features_model1=X.copy()","927d23cc":"All_features=['Latitude','Longitude','Gender_Male','Gender_Female','Multiple Lines_No phone service','Phone Service','Multiple Lines_No','Multiple Lines_Yes','Streaming Movies_Yes','Streaming TV_Yes','Device Protection_Yes','Online Backup_Yes','Payment Method_Mailed check','Payment Method_Bank transfer (automatic)','Internet Service_DSL','CLTV','Streaming TV_No','Streaming Movies_No','Payment Method_Credit card (automatic)','Partner','Senior Citizen_No','Senior Citizen_Yes','Tech Support_Yes','Online Security_Yes','Contract_One year','Paperless Billing','Monthly Charges','Total Charges','Device Protection_No internet service','Streaming Movies_No internet service','Streaming TV_No internet service','Tech Support_No internet service','Online Security_No internet service','Online Backup_No internet service','Internet Service_No','Dependents','Device Protection_No','Online Backup_No','Payment Method_Electronic check','Contract_Two year','Internet Service_Fiber optic','Tech Support_No','Online Security_No','Tenure Months','Contract_Month-to-month','Churn Score']","a3ee4f52":"def All_algo(liste,n):\n  X_train, X_test, Y_train, Y_test= train_test_split(liste,Y, train_size=n, random_state=6,stratify=Y)\n  robust = RobustScaler()\n  X_train=robust.fit_transform(X_train)\n  X_test=robust.transform(X_test)\n  knn = KNeighborsClassifier()\n  knn_param_grid = {'n_neighbors' : np.arange(1,60),\n                  'weights' : ['uniform', 'distance'],\n                  'algorithm':['auto','ball_tree','kd_tree','brute'],\n                  'metric' : ['euclidean', 'manhattan','minkowski']}\n  knn_cv = GridSearchCV(knn, param_grid = knn_param_grid, cv = 5,n_jobs=-1,verbose=2)\n  start = timeit.default_timer()\n  knn_cv.fit(X_train, Y_train)\n  stop = timeit.default_timer()\n  print('Time: ', stop - start)\n  print(\"Tuned KNN Parameters (GridSearchCv): {}\".format(knn_cv.best_params_))\n  print(\"Best KNN Training Score (GridSearchCv) :{}\".format(knn_cv.best_score_))\n  dictio=knn_cv.best_params_\n  final_model = KNeighborsClassifier(n_neighbors=dictio['n_neighbors'], metric=dictio['metric'],algorithm=dictio['algorithm'],weights=dictio['weights'])\n  final_model.fit(X_train, Y_train)\n  print(final_model.score(X_test, Y_test))\n  print(final_model.score(X_train, Y_train))\n  knn_pred_prob =final_model.predict_proba(X_test)[:,1]\n  knn_auroc = roc_auc_score(Y_test, knn_pred_prob)\n  print(\"KNN AUROC: {}\".format(knn_auroc))\n  return[knn_auroc,knn_cv.best_params_] ","cc6a0124":"def All_algo(liste,n):\n  X_train, X_test, Y_train, Y_test= train_test_split(liste,Y, train_size=n, random_state=6,stratify=Y)\n  robust = RobustScaler()\n  X_train=robust.fit_transform(X_train)\n  X_test=robust.transform(X_test)\n  knn = KNeighborsClassifier()\n  knn_param_grid = {'n_neighbors' : np.arange(1,60),\n                  'weights' : ['uniform', 'distance'],\n                  'algorithm':['auto','ball_tree','kd_tree','brute'],\n                  'metric' : ['euclidean', 'manhattan','minkowski']}\n  knn_cv = RandomizedSearchCV(knn, param_distributions= knn_param_grid,n_iter=150, random_state=3, cv=5,n_jobs=-1,verbose=2)\n  start = timeit.default_timer()\n  knn_cv.fit(X_train, Y_train)\n  stop = timeit.default_timer()\n  print('Time: ', stop - start)\n  print(\"Tuned KNN Parameters (RandomizedSearchCV): {}\".format(knn_cv.best_params_))\n  print(\"Best KNN Training Score (RandomizedSearchCV) :{}\".format(knn_cv.best_score_))\n  dictio=knn_cv.best_params_\n  final_model = KNeighborsClassifier(n_neighbors=dictio['n_neighbors'], metric=dictio['metric'],algorithm=dictio['algorithm'],weights=dictio['weights'])\n  final_model.fit(X_train, Y_train)\n  print(final_model.score(X_test, Y_test))\n  print(final_model.score(X_train, Y_train))\n  knn_pred_prob =final_model.predict_proba(X_test)[:,1]\n  knn_auroc = roc_auc_score(Y_test, knn_pred_prob)\n  print(\"KNN AUROC: {}\".format(knn_auroc))\n  return[knn_auroc,knn_cv.best_params_] ","f3b49e4f":"\nstart = timeit.default_timer()\nListe_fin=[]\nfor j in np.arange(len(All_features)-1,0,-1):\n  print(j)\n  Features_model1=X.copy()\n  L=[]\n  To_drop=All_features[:j]\n  Features_model1=Features_model1.drop(To_drop,axis=1)\n  for k in np.arange (0.75,0.93,0.01):\n    var =All_algo(Features_model1,k)\n    L.append(var)\n    print('-------')\n  print(L)\n  print('when we have '+str(j)+' features')\n  print(idx_max_knn(L))\n  Liste_fin.append(idx_max_knn(L))\nprint(Liste_fin)\nstop = timeit.default_timer()\nprint('Time: ', stop - start)","22ccdb39":"\nprint(idx_max_2x2_knn(Liste_fin))\nprint('the best auc is ',idx_max_2x2_knn(Liste_fin)[0])\nprint('the best percentage of train set is ',(idx_max_2x2_knn(Liste_fin)[1]*0.01+0.75))\nprint('the best number of columns is ',idx_max_2x2_knn(Liste_fin)[2]+1)\nprint('the best params are ',idx_max_2x2_knn(Liste_fin)[3])","c4c3f0ba":"Features_model1= X.copy()","734e33ed":"len(Features_model1.columns)","c808c1b7":"To_drop=All_features[:(len(Features_model1.columns)-idx_max_2x2_knn(Liste_fin)[2]-1)]\nFeatures_model1=Features_model1.drop(To_drop,axis=1)","2bdca188":"var=len(Features_model1.columns)-42\nTo_drop=All_features[:var]\nFeatures_model1=Features_model1.drop(To_drop,axis=1)","78efe59d":"X_train, X_test, Y_train, Y_test= train_test_split(Features_model1,Y, train_size=0.91, random_state=6,stratify=Y)","cede163a":"robust = RobustScaler()\nX_train=robust.fit_transform(X_train)\nX_test=robust.transform(X_test)","09d90f2c":"dictio=idx_max_2x2_knn(Liste_fin)[3]","ef374c89":"#final_model = KNeighborsClassifier(n_neighbors=27, metric='manhattan',algorithm='brute',weights='uniform')\nfinal_model = KNeighborsClassifier(n_neighbors=dictio['n_neighbors'], metric=dictio['metric'],algorithm=dictio['algorithm'],weights=dictio['weights'])\nfinal_model.fit(X_train, Y_train)\nprint(final_model.score(X_test, Y_test))\nprint(final_model.score(X_train, Y_train))","4876fd40":"#final_model = KNeighborsClassifier(n_neighbors=27, metric='manhattan',algorithm='brute',weights='uniform')\nfinal_model = KNeighborsClassifier(n_neighbors=23, metric='manhattan',algorithm='kd_tree',weights='uniform')\nfinal_model.fit(X_train, Y_train)\nprint(final_model.score(X_test, Y_test))\nprint(final_model.score(X_train, Y_train))","3d2a48c4":"labels=['No','Yes']\nplot_confusion_matrix(final_model, X_test, Y_test,display_labels=labels, cmap=plt.cm.Blues)\nplt.show()","da478d1a":"knn_pred_prob =final_model.predict_proba(X_test)[:,1]\nknn_auroc = roc_auc_score(Y_test, knn_pred_prob)\nprint(\"KNN AUROC: {}\".format(knn_auroc))\nknn_y_pred = final_model.predict(X_test)\nprint(classification_report(Y_test, knn_y_pred,digits=6))","d7b12756":"Features_model1=X.copy()","aa8337bb":"All_features=['Latitude','Longitude','Gender_Male','Gender_Female','Multiple Lines_No phone service','Phone Service','Multiple Lines_No','Multiple Lines_Yes','Streaming Movies_Yes','Streaming TV_Yes','Device Protection_Yes','Online Backup_Yes','Payment Method_Mailed check','Payment Method_Bank transfer (automatic)','Internet Service_DSL','CLTV','Streaming TV_No','Streaming Movies_No','Payment Method_Credit card (automatic)','Partner','Senior Citizen_No','Senior Citizen_Yes','Tech Support_Yes','Online Security_Yes','Contract_One year','Paperless Billing','Monthly Charges','Total Charges','Device Protection_No internet service','Streaming Movies_No internet service','Streaming TV_No internet service','Tech Support_No internet service','Online Security_No internet service','Online Backup_No internet service','Internet Service_No','Dependents','Device Protection_No','Online Backup_No','Payment Method_Electronic check','Contract_Two year','Internet Service_Fiber optic','Tech Support_No','Online Security_No','Tenure Months','Contract_Month-to-month','Churn Score']","34616d6e":"len(All_features)","15e7e7ef":"def idx_max_dt(liste):\n  max = liste[0][0]\n  param=liste[0][1]\n  a = 0  \n  for i in range(len(liste)):\n    if liste[i][0]>max:\n      max =liste [i][0]\n      param=liste[i][1]\n      a=i\n  return [max,a,param]","8e01d11a":"def idx_max_2x2_dt(liste): \n  a = 0\n  b =liste[0][1]\n  max = liste[0][0]\n  param=liste[0][2]\n  for i in np.arange(len(liste)):\n    if liste[i][0]>max:\n      max=liste[i][0]\n      b=liste[i][1]\n      param=liste[i][2]\n      a=i\n  return [max,b,a,param]","5b0e0714":"def Best_dt(liste,n):\n  X_train, X_test, Y_train, Y_test= train_test_split(liste,Y, train_size=n, random_state=6,stratify=Y)\n  dt=DecisionTreeClassifier(random_state=0)\n  params_distributions={'criterion':['gini', 'entropy'],\n                        'splitter':['best', 'random'],\n                        'max_depth':[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n                                      18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n                                      35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45] ,\n                        }\n  dt_cv = RandomizedSearchCV(dt, param_distributions= params_distributions,n_iter=150, random_state=3, cv=5,n_jobs=-1,verbose=2,scoring='roc_auc')\n  start = timeit.default_timer()\n  dt_cv.fit(X_train, Y_train)\n  stop = timeit.default_timer()\n  print('Time: ', stop - start)\n  print(\"Tuned dt Parameters (RandomizedSearchCV): {}\".format(dt_cv.best_params_))\n  print(\"Best dt Training Score (RandomizedSearchCV) :{}\".format(dt_cv.best_score_))\n  dictio=dt_cv.best_params_\n  final_model = DecisionTreeClassifier(criterion=dictio['criterion'],\n                                       splitter=dictio['splitter'],\n                                       max_depth=dictio['max_depth'],\n                                       random_state=1)\n  final_model.fit(X_train, Y_train)\n  print(final_model.score(X_test, Y_test))\n  print(final_model.score(X_train, Y_train))\n  dt_pred_prob =final_model.predict_proba(X_test)[:,1]\n  dt_auroc = roc_auc_score(Y_test, dt_pred_prob)\n  print(\"Decision Tree AUROC: {}\".format(dt_auroc))\n  return[dt_auroc,dt_cv.best_params_] ","75a85a8c":"len(Features_model1.columns)","bd6eda5c":"start = timeit.default_timer()\nListe_fin=[]\nfor j in np.arange(len(All_features)-1,0,-1):\n  print(j)\n  Features_model1=X.copy()\n  L=[]\n  To_drop=All_features[:j]\n  Features_model1=Features_model1.drop(To_drop,axis=1)\n  for k in np.arange (0.7,0.92,0.01):\n    var =Best_dt(Features_model1,k)\n    L.append(var)\n    print('-------')\n  print(L)\n  print('when we have '+str(j)+' features')\n  print(idx_max_dt(L))\n  Liste_fin.append(idx_max_dt(L))\nprint(Liste_fin)\nstop = timeit.default_timer()\nprint('Time: ', stop - start)","042acf77":"print(idx_max_2x2_dt(Liste_fin))\nprint('the best auc is ',idx_max_2x2_dt(Liste_fin)[0])\nprint('the best percentage of train set is ',(idx_max_2x2_dt(Liste_fin)[1]*0.01+0.7))\nprint('the best number of columns is ',idx_max_2x2_dt(Liste_fin)[2]+1)\nprint('the best params are ',idx_max_2x2_dt(Liste_fin)[3])","a12253b9":"[0.985812935867633, 19, 22, {'splitter': 'best', 'max_depth': 6, 'criterion': 'gini'}]\nthe best auc is  0.985812935867633\nthe best percentage of train set is  0.8899999999999999\nthe best number of columns is  23\nthe best params are  {'splitter': 'best', 'max_depth': 6, 'criterion': 'gini'}","1562a99b":"Features_model1=X.copy()","7d2a461a":"To_drop=All_features[:(len(Features_model1.columns)-idx_max_2x2_dt(Liste_fin)[2]-1)]\nFeatures_model1=Features_model1.drop(To_drop,axis=1)","fbe9db90":"len(Features_model1.columns)","08b66073":"To_drop=All_features[:(len(Features_model1.columns)-23)]\nFeatures_model1=Features_model1.drop(To_drop,axis=1)","c152f5aa":"len(Features_model1.columns)","99eed83e":"X_train, X_test, Y_train, Y_test= train_test_split(Features_model1,Y, train_size=0.89, random_state=6,stratify=Y)","c1a32495":"dictio=idx_max_2x2_dt(Liste_fin)[3]","384a88f6":"dictio={'splitter': 'best', 'max_depth': 6, 'criterion': 'gini'}","831eb4b9":"final_model = DecisionTreeClassifier(splitter=dictio['splitter'],\n                            max_depth=dictio['max_depth'],\n                            criterion=dictio['criterion'])\nfinal_model.fit(X_train, Y_train)\nprint(final_model.score(X_test, Y_test))\nprint(final_model.score(X_train, Y_train))","4fcfce72":"labels=['No','Yes']\nplot_confusion_matrix(final_model, X_test, Y_test,display_labels=labels, cmap=plt.cm.Blues)\nplt.show()","583d6d17":"dt_pred_prob =final_model.predict_proba(X_test)[:,1]\ndt_auroc = roc_auc_score(Y_test, dt_pred_prob)\nprint(\"DecisionTree AUROC: {}\".format(dt_auroc))\ndt_y_pred = final_model.predict(X_test)\nprint(classification_report(Y_test, dt_y_pred,digits=6))","c47948cb":"import graphviz \nfrom sklearn import tree\n\ndot_data = tree.export_graphviz(final_model, out_file=None) \ngraph = graphviz.Source(dot_data) \ngraph.render(\".\/Churn\") ","e382fd60":"Features_model1=X.copy()","69784467":"Features_model1.columns","abf924d1":"Features_model1.shape","397ffc4b":"X_train, X_test, Y_train, Y_test= train_test_split(Features_model1,Y, train_size=0.7, random_state=6,stratify=Y)","93804db7":"decision_tree = DecisionTreeClassifier(random_state=0)","40cf5de6":"decision_tree.fit(X_train, Y_train)","80d8ae35":"print('Le train score est :', decision_tree.score(X_train, Y_train))\nprint('Le test score est :', decision_tree.score(X_test, Y_test))","dd19ee6b":"labels=['No','Yes']\nplot_confusion_matrix(decision_tree, X_test, Y_test,display_labels=labels, cmap=plt.cm.Blues)\nplt.show()","5b7113fc":"from sklearn.metrics import confusion_matrix\nY_pred = decision_tree.predict(X_test)\nprint(confusion_matrix(Y_test, Y_pred))\n","ac47da1b":"Y_pred = decision_tree.predict(X_test)\ndt_auroc = roc_auc_score(Y_test, Y_pred)\nprint(\"decision tree AUROC: {}\".format(dt_auroc))\nprint(classification_report(Y_test, Y_pred, digits=8))\n","6a9e141e":"decision_tree.feature_importances_","5900483b":"All_features=['Latitude','Longitude','Gender_Male','Gender_Female','Multiple Lines_No phone service','Phone Service','Multiple Lines_No','Multiple Lines_Yes','Streaming Movies_Yes','Streaming TV_Yes','Device Protection_Yes','Online Backup_Yes','Payment Method_Mailed check','Payment Method_Bank transfer (automatic)','Internet Service_DSL','CLTV','Streaming TV_No','Streaming Movies_No','Payment Method_Credit card (automatic)','Partner','Senior Citizen_No','Senior Citizen_Yes','Tech Support_Yes','Online Security_Yes','Contract_One year','Paperless Billing','Monthly Charges','Total Charges','Device Protection_No internet service','Streaming Movies_No internet service','Streaming TV_No internet service','Tech Support_No internet service','Online Security_No internet service','Online Backup_No internet service','Internet Service_No','Dependents','Device Protection_No','Online Backup_No','Payment Method_Electronic check','Contract_Two year','Internet Service_Fiber optic','Tech Support_No','Online Security_No','Tenure Months','Contract_Month-to-month','Churn Score']","074aaaa9":"sum_importance=0\nnumber_features=0\nfor var, importance in zip(All_features, decision_tree.feature_importances_):\n    if importance > 0.009:\n        print(var, importance)\n        number_features=number_features+1\n        sum_importance=sum_importance+importance\n\nprint('the number of features is ',number_features)\nprint(\"la somme d'importance est= \",sum_importance)","c34f291d":"from sklearn.tree import plot_tree\nlabels=['No','Yes']\nplt.figure(figsize=(30,10))\nplot_tree(decision_tree, feature_names= All_features, class_names=labels, filled=True)\nplt.show()","58232a66":"import graphviz \nfrom sklearn import tree\n\ndot_data = tree.export_graphviz(decision_tree, out_file=None) \ngraph = graphviz.Source(dot_data) \ngraph.render(\".\/Churn1\") ","2e66d145":"Features_model_RF=X.copy()","9bcb01f3":"All_features=['Latitude','Longitude','Gender_Male','Gender_Female','Multiple Lines_No phone service','Phone Service','Multiple Lines_No','Multiple Lines_Yes','Streaming Movies_Yes','Streaming TV_Yes','Device Protection_Yes','Online Backup_Yes','Payment Method_Mailed check','Payment Method_Bank transfer (automatic)','Internet Service_DSL','CLTV','Streaming TV_No','Streaming Movies_No','Payment Method_Credit card (automatic)','Partner','Senior Citizen_No','Senior Citizen_Yes','Tech Support_Yes','Online Security_Yes','Contract_One year','Paperless Billing','Monthly Charges','Total Charges','Device Protection_No internet service','Streaming Movies_No internet service','Streaming TV_No internet service','Tech Support_No internet service','Online Security_No internet service','Online Backup_No internet service','Internet Service_No','Dependents','Device Protection_No','Online Backup_No','Payment Method_Electronic check','Contract_Two year','Internet Service_Fiber optic','Tech Support_No','Online Security_No','Tenure Months','Contract_Month-to-month','Churn Score']","4a82987e":"def idx_max(liste):\n\tmax = liste[0]\n\ta = 0  \n\tfor i in range(len(liste)):\n\t\tif liste[i] > max:\n\t\t\tmax  = liste [i]\n\t\t\ta = i\n\treturn [max,a]","6aff9042":"def idx_max_2x2(liste):\n\t  \n  a = 0\n  b =liste[0][1]\n  max = liste[0][0]\n  for i in np.arange(len(liste)):\n    if liste[i][0]>max:\n      max=liste[i][0]\n      b=liste[i][1]\n      a=i\n  return [max,b,a]\n   ","d276ce37":"def idx_max_RF(liste):\n  max = liste[0][0]\n  param=liste[0][1]\n  a = 0  \n  for i in range(len(liste)):\n    if liste[i][0]>max:\n      max =liste [i][0]\n      param=liste[i][1]\n      a=i\n  return [max,a,param]","7bc8663a":"def idx_max_2x2_RF(liste):\n\t  \n  a = 0\n  b =liste[0][1]\n  max = liste[0][0]\n  param=liste[0][2]\n  for i in np.arange(len(liste)):\n    if liste[i][0]>max:\n      max=liste[i][0]\n      b=liste[i][1]\n      param=liste[i][2]\n      a=i\n  return [max,b,a,param]","86430224":"def Best_RF(liste,n):\n  X_train, X_test, Y_train, Y_test= train_test_split(liste,Y, train_size=n, random_state=6,stratify=Y)\n  robust = RobustScaler()\n  X_train=robust.fit_transform(X_train)\n  X_test=robust.transform(X_test)\n  RF=RandomForestClassifier(random_state=3)\n  params_distributions={'criterion':['gini','entropy'],\n                        'n_estimators': [800,1200,1500],\n                        'n_jobs':[-1]}\n  RF_random=RandomizedSearchCV(RF,param_distributions=params_distributions,n_iter=75,random_state=3,cv=5,n_jobs=-1,verbose=2,scoring='roc_auc')\n  start = timeit.default_timer()\n  RF_random.fit(X_train,Y_train)\n  stop = timeit.default_timer()\n  print('Time: ', stop - start)\n  print(\"Tuned RandomForest Parameters (RandomizedSearchCV): {}\".format(RF_random.best_params_))\n  print(\"Best RandomForest Training Score (RandomizedSearchCV) :{}\".format(RF_random.best_score_))\n  dictio=RF_random.best_params_\n  final_model = RandomForestClassifier(criterion=dictio['criterion'],n_estimators=dictio['n_estimators'],random_state=3,n_jobs=-1)\n  final_model.fit(X_train, Y_train)\n  print(final_model.score(X_test, Y_test))\n  print(final_model.score(X_train, Y_train))\n  RF_pred_prob =final_model.predict_proba(X_test)[:,1]\n  RF_auroc = roc_auc_score(Y_test, RF_pred_prob)\n  print(\"RandomForest AUROC: {}\".format(RF_auroc))\n  return[RF_auroc,RF_random.best_params_] ","2c7817ee":"start = timeit.default_timer()\nListe_fin=[]\nfor j in np.arange(len(All_features)-1,0,-1):\n  print(j)\n  Features_model_RF=X.copy()\n  L=[]\n  To_drop=All_features[:j]\n  Features_model_RF=Features_model_RF.drop(To_drop,axis=1)\n  for k in np.arange (0.79,0.9,0.01):\n    var=Best_RF(Features_model_RF,k)\n    L.append(var)\n    print('-------')\n  print(L)\n  print('when we have '+str(j)+' features')\n  print(idx_max_RF(L))\n  Liste_fin.append(idx_max_RF(L))\nprint(Liste_fin)\nstop = timeit.default_timer()\nprint('Time: ', stop - start)","1dcfd17c":"print(idx_max_2x2_RF(Liste_fin))\nprint('the best auc is ',idx_max_2x2_RF(Liste_fin)[0])\nprint('the best percentage of train set is ',(idx_max_2x2_RF(Liste_fin)[1]*0.01+0.8))\nprint('the best number of columns is ',idx_max_2x2_RF(Liste_fin)[2]+1)\nprint('the best params are ',idx_max_2x2_RF(Liste_fin)[3])","04fd2412":"Features_model_RF=X.copy()","937debd3":"len(Features_model_RF.columns)","b7fd27ca":"To_drop=All_features[:(len(Features_model_RF.columns)-idx_max_2x2_RF(Liste_fin)[2]-1)]\nFeatures_model_RF=Features_model_RF.drop(To_drop,axis=1)","f6547a48":"To_drop=All_features[:(len(Features_model_RF.columns)-42)]\nFeatures_model_RF=Features_model_RF.drop(To_drop,axis=1)","ce9fdede":"X_train, X_test, Y_train, Y_test= train_test_split(Features_model_RF,Y, train_size=0.89, random_state=3,stratify=Y)","99a48fa3":"robust = RobustScaler()\nX_train=robust.fit_transform(X_train)\nX_test=robust.transform(X_test)","ecc5fa64":"dictio=idx_max_2x2_RF(Liste_fin)[3]","55964341":"dictio={'criterion':'gini','n_estimators':1200}","59b2be36":"final_model = RandomForestClassifier(criterion=dictio['criterion'],n_estimators=dictio['n_estimators'],random_state=3,n_jobs=-1)\nfinal_model.fit(X_train, Y_train)\nprint(final_model.score(X_test, Y_test))\nprint(final_model.score(X_train, Y_train))","5d0a1a25":"labels=['No','Yes']\nplot_confusion_matrix(final_model, X_test, Y_test,display_labels=labels, cmap=plt.cm.Blues)\nplt.show()","e9eb6227":"knn_pred_prob =final_model.predict_proba(X_test)[:,1]\nknn_auroc = roc_auc_score(Y_test, knn_pred_prob)\nprint(\"RandomForest AUROC: {}\".format(knn_auroc))\nknn_y_pred = final_model.predict(X_test)\nprint(classification_report(Y_test, knn_y_pred,digits=6))","7aab3a06":"Features_model_RF=X.copy()","0b83f1ba":"Features_model_RF.columns","b0f67de4":"Features_model_RF.shape","f9935b21":"X_train, X_test, Y_train, Y_test= train_test_split(Features_model_RF,Y, train_size=0.8, random_state=6,stratify=Y)","7914e78a":"model_RF = RandomForestClassifier(n_estimators=1000,random_state=3)","38e1a359":"model_RF.fit(X_train, Y_train)","d4fea9a9":"print('Le train score est :', model_RF.score(X_train, Y_train))\nprint('Le test score est :', model_RF.score(X_test, Y_test))","f4b563f7":"labels=['No','Yes']\nplot_confusion_matrix(model_RF, X_test, Y_test,display_labels=labels, cmap=plt.cm.Blues)\nplt.show()","6c9fe31b":"from sklearn.metrics import confusion_matrix\nY_pred = model_RF.predict(X_test)\nprint(confusion_matrix(Y_test, Y_pred))\n","9a3a0901":"Y_pred = model_RF.predict(X_test)\ndt_auroc = roc_auc_score(Y_test, Y_pred)\nprint(\"Random Forest AUROC: {}\".format(dt_auroc))\nprint(classification_report(Y_test, Y_pred, digits=8))\n","3759d2db":"Features_modelxg1=X.copy()","ca6ace8f":"Features_modelxg1.columns","e6f02813":"Features_modelxg1","95ec2138":"All_features=['Latitude','Longitude','Gender_Male','Gender_Female','Multiple Lines_No phone service','Phone Service','Multiple Lines_No','Multiple Lines_Yes','Streaming Movies_Yes','Streaming TV_Yes','Device Protection_Yes','Online Backup_Yes','Payment Method_Mailed check','Payment Method_Bank transfer (automatic)','Internet Service_DSL','CLTV','Streaming TV_No','Streaming Movies_No','Payment Method_Credit card (automatic)','Partner','Senior Citizen_No','Senior Citizen_Yes','Tech Support_Yes','Online Security_Yes','Contract_One year','Paperless Billing','Monthly Charges','Total Charges','Device Protection_No internet service','Streaming Movies_No internet service','Streaming TV_No internet service','Tech Support_No internet service','Online Security_No internet service','Online Backup_No internet service','Internet Service_No','Dependents','Device Protection_No','Online Backup_No','Payment Method_Electronic check','Contract_Two year','Internet Service_Fiber optic','Tech Support_No','Online Security_No','Tenure Months','Contract_Month-to-month','Churn Score']","7e39eb41":"len(All_features)","20609fca":"def idx_max(liste):\n\tmax = liste[0]\n\ta = 0  \n\tfor i in range(len(liste)):\n\t\tif liste[i] > max:\n\t\t\tmax  = liste [i]\n\t\t\ta = i\n\treturn [max,a]","dfbb2e6c":"def idx_max_2x2(liste):\n\t  \n  a = 0\n  b =liste[0][1]\n  max = liste[0][0]\n  for i in np.arange(len(liste)):\n    if liste[i][0]>max:\n      max=liste[i][0]\n      b=liste[i][1]\n      a=i\n  return [max,b,a]\n   ","8e1e9610":"def idx_max_xgb(liste):\n  max = liste[0][0]\n  param=liste[0][1]\n  a = 0  \n  for i in range(len(liste)):\n    if liste[i][0]>max:\n      max =liste [i][0]\n      param=liste[i][1]\n      a=i\n  return [max,a,param]","e56a6072":"def idx_max_2x2_xgb(liste):\n\t  \n  a = 0\n  b =liste[0][1]\n  max = liste[0][0]\n  param=liste[0][2]\n  for i in np.arange(len(liste)):\n    if liste[i][0]>max:\n      max=liste[i][0]\n      b=liste[i][1]\n      param=liste[i][2]\n      a=i\n  return [max,b,a,param]","5541b4c0":"def Best_XGBoost(liste,n):\n  X_train, X_test, Y_train, Y_test= train_test_split(liste,Y, train_size=n, random_state=6,stratify=Y)\n  robust = RobustScaler()\n  X_train=robust.fit_transform(X_train)\n  X_test=robust.transform(X_test)\n  xgb=XGBClassifier(random_state=0)\n  params_distributions={'silent': [False],\n                        'max_depth': [3,6, 10, 15, 20],\n                        'learning_rate': [0.001, 0.01, 0.1, 0.2, 0,3],\n                        'subsample': [0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n                        'colsample_bytree': [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n                        'colsample_bylevel': [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n                        'min_child_weight': [0.5, 1.0, 3.0, 5.0, 7.0, 10.0],\n                        'gamma': [0, 0.25, 0.5, 1.0],\n                        'reg_lambda': [0.1, 1.0, 5.0, 10.0, 50.0, 100.0],\n                        'n_estimators': [100,150,200],\n                        'n_jobs':[-1]}\n  \n  xgb_random=RandomizedSearchCV(xgb,param_distributions=params_distributions,n_iter=15,random_state=3,cv=5,n_jobs=-1,verbose=2,scoring='roc_auc')\n  start = timeit.default_timer()\n  xgb_random.fit(X_train,Y_train)\n  stop = timeit.default_timer()\n  print('Time: ', stop - start)\n  print(\"Tuned xgboost Parameters (RandomizedSearchCV): {}\".format(xgb_random.best_params_))\n  print(\"Best xgboost Training Score (RandomizedSearchCV) :{}\".format(xgb_random.best_score_))\n  dictio=xgb_random.best_params_\n  final_model = XGBClassifier(silent=dictio['silent'],\n                              max_depth=dictio['max_depth'],\n                              learning_rate=dictio['learning_rate'],\n                              subsample=dictio['subsample'],\n                              colsample_bytree=dictio['colsample_bytree'],\n                              colsample_bylevel=dictio['colsample_bylevel'],\n                              min_child_weight=dictio['min_child_weight'],\n                              gamma=dictio['gamma'],\n                              reg_lambda=dictio['reg_lambda'],\n                              n_estimators=dictio['n_estimators'],\n                              random_state=0)\n  final_model.fit(X_train, Y_train)\n  print(final_model.score(X_test, Y_test))\n  print(final_model.score(X_train, Y_train))\n  xgb_pred_prob =final_model.predict_proba(X_test)[:,1]\n  xgb_auroc = roc_auc_score(Y_test, xgb_pred_prob)\n  print(\"XGBoost AUROC: {}\".format(xgb_auroc))\n  return[xgb_auroc,xgb_random.best_params_] ","e9360706":"def best_auc(liste):\n  m=len(liste)\n  val_max=liste[0][0]\n  indice=0\n  for i in range(m):\n    if liste[i][0]>val_max:\n      val_max=liste[i][0]\n      indice=i\n\n  return [indice,val_max]","ad94b5a0":" from sklearn.feature_selection import RFECV","3f3dfe59":"def Best_XGBoost_RFECV(n):\n  liste=X.copy()\n  X_train, X_test, Y_train, Y_test= train_test_split(liste,Y, train_size=n, random_state=6,stratify=Y)\n  robust = RobustScaler()\n  X_train=robust.fit_transform(X_train)\n  X_test=robust.transform(X_test)\n  xgb=XGBClassifier(random_state=0)\n  params_distributions={'silent': [False],\n                        'max_depth': [3,6, 10, 15, 20],\n                        'learning_rate': [0.001, 0.01, 0.1, 0.2, 0,3],\n                        'subsample': [0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n                        'colsample_bytree': [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n                        'colsample_bylevel': [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n                        'min_child_weight': [0.5, 1.0, 3.0, 5.0, 7.0, 10.0],\n                        'gamma': [0, 0.25, 0.5, 1.0],\n                        'reg_lambda': [0.1, 1.0, 5.0, 10.0, 50.0, 100.0],\n                        'n_estimators': [100,150,200],\n                        'n_jobs':[-1]}\n  xgb_random=RandomizedSearchCV(xgb,param_distributions=params_distributions,n_iter=10,random_state=3,cv=5,n_jobs=-1,verbose=2,scoring='roc_auc')\n  start = timeit.default_timer()\n  xgb_random.fit(X_train,Y_train)\n  stop = timeit.default_timer()\n  print('Time: ', stop - start)\n  print(\"Tuned xgboost Parameters (RandomizedSearchCV): {}\".format(xgb_random.best_params_))\n  print(\"Best xgboost Training Score (RandomizedSearchCV) :{}\".format(xgb_random.best_score_))\n  dictio=xgb_random.best_params_\n  final_model = XGBClassifier(silent=dictio['silent'],\n                              max_depth=dictio['max_depth'],\n                              learning_rate=dictio['learning_rate'],\n                              subsample=dictio['subsample'],\n                              colsample_bytree=dictio['colsample_bytree'],\n                              colsample_bylevel=dictio['colsample_bylevel'],\n                              min_child_weight=dictio['min_child_weight'],\n                              gamma=dictio['gamma'],\n                              reg_lambda=dictio['reg_lambda'],\n                              n_estimators=dictio['n_estimators'],\n                              random_state=0)\n  selector = RFECV(final_model, step=1,min_features_to_select=1,scoring='roc_auc' ,cv=5,n_jobs=-1)\n  selector.fit(X_train, Y_train)\n  print(selector.score(X_test, Y_test))\n  print(selector.score(X_train, Y_train))\n  xgb_pred_prob =selector.predict(X_test)\n  xgb_auroc = roc_auc_score(Y_test, xgb_pred_prob)\n  print(\"XGBoost AUROC: {}\".format(xgb_auroc))\n  return [selector.grid_scores_,xgb_auroc]","866525ed":"start = timeit.default_timer()\nL=[]\nfor k in np.arange (0.8,0.81,0.01):\n  var=Best_XGBoost_RFECV(k)\n  L.append(var)\n  print('-------')\nprint(L)\nstop = timeit.default_timer()\nprint('Time: ', stop - start)","be94009c":"final_list=[]","ecbe5243":"start = timeit.default_timer()\nListe_fin=[]\nfor j in np.arange(len(All_features)-1,0,-1):\n  print(j)\n  Features_modelxg1=X.copy()\n  L=[]\n  To_drop=All_features[:j]\n  Features_modelxg1=Features_modelxg1.drop(To_drop,axis=1)\n  for k in np.arange (0.8,0.83,0.01):\n    var=Best_XGBoost(Features_modelxg1,k)\n    L.append(var)\n    print('-------')\n  print(L)\n  print('when we have '+str(j)+' features')\n  print(idx_max_xgb(L))\n  Liste_fin.append(idx_max_xgb(L))\nprint(Liste_fin)\nstop = timeit.default_timer()\nprint('Time: ', stop - start)","330359a6":"print('between 0.8 and 0.82')\nprint(idx_max_2x2_xgb(Liste_fin))\nprint('the best auc is ',idx_max_2x2_xgb(Liste_fin)[0])\nprint('the best percentage of train set is ',(idx_max_2x2_xgb(Liste_fin)[1]*0.01+0.8))\nprint('the best number of columns is ',idx_max_2x2_xgb(Liste_fin)[2]+1)\nprint('the best params are ',idx_max_2x2_xgb(Liste_fin)[3])","72874371":"between 0.8 and 0.82\n[0.9859347417573031, 0, 41, {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}]\nthe best auc is  0.9859347417573031\nthe best percentage of train set is  0.8\nthe best number of columns is  42\nthe best params are  {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}","a2f25a8e":"var=[0.9859347417573031, 0, 41, {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}]\nfinal_list.append(var)","3e650dbb":"start = timeit.default_timer()\nListe_fin=[]\nfor j in np.arange(len(All_features)-1,0,-1):\n  print(j)\n  Features_model1=X.copy()\n  L=[]\n  To_drop=All_features[:j]\n  Features_model1=Features_model1.drop(To_drop,axis=1)\n  for k in np.arange (0.83,0.86,0.01):\n    var = Best_XGBoost(Features_model1,k)\n    L.append(var)\n    print('-------')\n  print(L)\n  print('when we have '+str(j)+' features')\n  print(idx_max_xgb(L))\n  Liste_fin.append(idx_max_xgb(L))\nprint(Liste_fin)\nstop = timeit.default_timer()\nprint('Time: ', stop - start)","e5fe02ef":"print('between 0.83 and 0.85')\nprint(idx_max_2x2_xgb(Liste_fin))\nprint('the best auc is ',idx_max_2x2_xgb(Liste_fin)[0])\nprint('the best percentage of train set is ',(idx_max_2x2_xgb(Liste_fin)[1]*0.01+0.83))\nprint('the best number of columns is ',idx_max_2x2_xgb(Liste_fin)[2]+1)\nprint('the best params are ',idx_max_2x2_xgb(Liste_fin)[3])","9136005b":"between 0.83 and 0.85\n[0.9860737327188939, 2, 30, {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}]\nthe best auc is  0.9860737327188939\nthe best percentage of train set is  0.85\nthe best number of columns is  31\nthe best params are  {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}","dfcbd9bc":"var=[0.9860737327188939, 2, 30, {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}]\nfinal_list.append(var)","cddc9113":"start = timeit.default_timer()\nListe_fin=[]\nfor j in np.arange(len(All_features)-1,0,-1):\n  print(j)\n  Features_model1=X.copy()\n  L=[]\n  To_drop=All_features[:j]\n  Features_model1=Features_model1.drop(To_drop,axis=1)\n  for k in np.arange (0.86,0.89,0.01):\n    var =Best_XGBoost(Features_model1,k)\n    L.append(var)\n    print('-------')\n  print(L)\n  print('when we have '+str(j)+' features')\n  print(idx_max_xgb(L))\n  Liste_fin.append(idx_max_xgb(L))\nprint(Liste_fin)\nstop = timeit.default_timer()\nprint('Time: ', stop - start)","b8a94624":"print('between 0.86 and 0.88')\nprint(idx_max_2x2_xgb(Liste_fin))\nprint('the best auc is ',idx_max_2x2_xgb(Liste_fin)[0])\nprint('the best percentage of train set is ',(idx_max_2x2_xgb(Liste_fin)[1]*0.01+0.86))\nprint('the best number of columns is ',idx_max_2x2_xgb(Liste_fin)[2]+1)\nprint('the best params are ',idx_max_2x2_xgb(Liste_fin)[3])","c5331e8e":"between 0.86 and 0.88\n[0.9865564747709559, 3, 31, {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}]\nthe best auc is  0.9865564747709559\nthe best percentage of train set is  0.89\nthe best number of columns is  32\nthe best params are  {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}","b3e23550":"var=[0.9865564747709559, 3, 31, {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}]\nfinal_list.append(var)","ef5019fd":"start = timeit.default_timer()\nListe_fin=[]\nfor j in np.arange(len(All_features)-1,0,-1):\n  print(j)\n  Features_model1=X.copy()\n  L=[]\n  To_drop=All_features[:j]\n  Features_model1=Features_model1.drop(To_drop,axis=1)\n  for k in np.arange (0.89,0.92,0.01):\n    var =Best_XGBoost(Features_model1,k)\n    L.append(var)\n    print('-------')\n  print(L)\n  print('when we have '+str(j)+' features')\n  print(idx_max_xgb(L))\n  Liste_fin.append(idx_max_xgb(L))\nprint(Liste_fin)\nstop = timeit.default_timer()\nprint('Time: ', stop - start)","f2b19775":"print('between 0.89 and 0.91')\nprint(idx_max_2x2_xgb(Liste_fin))\nprint('the best auc is ',idx_max_2x2_xgb(Liste_fin)[0])\nprint('the best percentage of train set is ',(idx_max_2x2_xgb(Liste_fin)[1]*0.01+0.89))\nprint('the best number of columns is ',idx_max_2x2_xgb(Liste_fin)[2]+1)\nprint('the best params are ',idx_max_2x2_xgb(Liste_fin)[3])","fc3d7eaf":"between 0.89 and 0.91\n[0.9865564747709559, 0, 31, {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}]\nthe best auc is  0.9865564747709559\nthe best percentage of train set is  0.89\nthe best number of columns is  32\nthe best params are  {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}","cfca4a6f":"var=[0.9865564747709559, 0, 31, {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}]\nfinal_list.append(var)","ff5e2f3b":"best_auc(final_list)","01ffd757":"[0.9865564747709559, 3, 31, {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}]\nthe best auc is  0.9865564747709559\nthe best percentage of train set is  0.89\nthe best number of columns is  32\nthe best params are  {'subsample': 0.7, 'silent': False, 'reg_lambda': 5.0, 'n_jobs': -1, 'n_estimators': 100, 'min_child_weight': 10.0, 'max_depth': 20, 'learning_rate': 0.1, 'gamma': 0.25, 'colsample_bytree': 0.5, 'colsample_bylevel': 1.0}","96dedfae":"[0.9866051322403465, 0, 41, {'subsample': 1.0, 'silent': False, 'reg_lambda': 50.0, 'n_jobs': -1, 'n_estimators': 150, 'min_child_weight': 3.0, 'max_depth': 3, 'learning_rate': 0.2, 'gamma': 1.0, 'colsample_bytree': 0.5, 'colsample_bylevel': 0.9}]\nthe best auc is  0.9866051322403465\nthe best percentage of train set is  0.89\nthe best number of columns is  42\nthe best params are  {'subsample': 1.0, 'silent': False, 'reg_lambda': 50.0, 'n_jobs': -1, 'n_estimators': 150, 'min_child_weight': 3.0, 'max_depth': 3, 'learning_rate': 0.2, 'gamma': 1.0, 'colsample_bytree': 0.5, 'colsample_bylevel': 0.9}","980b2841":"Features_model1= X.copy()","7a5ac99e":"len(Features_model1.columns)","759dc99c":"To_drop=All_features[:(len(Features_model1.columns)-idx_max_2x2_xgb(Liste_fin)[2]-1)]\nFeatures_model1=Features_model1.drop(To_drop,axis=1)","0c1549ab":"To_drop=All_features[:(len(Features_model1.columns)-42)]\nFeatures_model1=Features_model1.drop(To_drop,axis=1)","fe49754d":"len(Features_model1.columns)","7ca8c2c5":"X_train, X_test, Y_train, Y_test= train_test_split(Features_model1,Y, train_size=0.89, random_state=6,stratify=Y)","0b470ec1":"robust = RobustScaler()\nX_train=robust.fit_transform(X_train)\nX_test=robust.transform(X_test)","9d7ed355":"dictio=idx_max_2x2_xgb(Liste_fin)[3]\n","b1d26f39":"dictio={'subsample': 1.0, 'silent': False, 'reg_lambda': 50.0, 'n_jobs': -1, 'n_estimators': 150, 'min_child_weight': 3.0, 'max_depth': 3, 'learning_rate': 0.2, 'gamma': 1.0, 'colsample_bytree': 0.5, 'colsample_bylevel': 0.9}","4c44ba1d":"final_model = XGBClassifier(silent=dictio['silent'],\n                              max_depth=dictio['max_depth'],\n                              learning_rate=dictio['learning_rate'],\n                              subsample=dictio['subsample'],\n                              colsample_bytree=dictio['colsample_bytree'],\n                              colsample_bylevel=dictio['colsample_bylevel'],\n                              min_child_weight=dictio['min_child_weight'],\n                              gamma=dictio['gamma'],\n                              reg_lambda=dictio['reg_lambda'],\n                              n_estimators=dictio['n_estimators'])\nfinal_model.fit(X_train, Y_train)\nprint(final_model.score(X_test, Y_test))\nprint(final_model.score(X_train, Y_train))","73f34dde":"labels=['No','Yes']\nplot_confusion_matrix(final_model, X_test, Y_test,display_labels=labels, cmap=plt.cm.Blues)\nplt.show()","bcd2feca":"knn_pred_prob =final_model.predict_proba(X_test)[:,1]\nknn_auroc = roc_auc_score(Y_test, knn_pred_prob)\nprint(\"xgboost AUROC: {}\".format(knn_auroc))\nknn_y_pred = final_model.predict(X_test)\nprint(classification_report(Y_test, knn_y_pred,digits=6))","38049748":"pickle.dump(final_model,open('.\/model.pkl','wb'))","ddc87527":"Liste_fin_auc=[]\nfor j in np.arange(len(All_features)-1,0,-1):\n  print(j)\n  Features_modelxg1=X.copy()\n  L=[]\n  To_drop=All_features[:j]\n  Features_modelxg1=Features_modelxg1.drop(To_drop,axis=1)\n  for k in np.arange (0.7,0.95,0.01):\n    X_train, X_test, Y_train, Y_test= train_test_split(Features_modelxg1,Y, train_size=k, random_state=6,stratify=Y)\n    model = XGBClassifier(random_state=3,n_jobs=-1)\n    model.fit(X_train, Y_train)\n    print(k)\n    print(model.score(X_test, Y_test))\n    print(model.score(X_train, Y_train))\n    knn_pred_prob = model.predict_proba(X_test)[:,1]\n    knn_auroc = roc_auc_score(Y_test, knn_pred_prob)\n    print(\"XGBoost AUROC: {}\".format(knn_auroc))\n    L.append(knn_auroc)\n    print('-------')\n  print(L)\n  print('when we have '+str(j)+' features')\n  print(idx_max(L))\n  Liste_fin_auc.append(idx_max(L))\nprint(Liste_fin_auc)","a926a32a":"print(idx_max_2x2(Liste_fin_auc))\nprint('the best auc is ',idx_max_2x2(Liste_fin_auc)[0])\nprint('the best percentage of train set is ',(idx_max_2x2(Liste_fin_auc)[1]*0.01+0.7))\nprint('the best number of columns is ',len(All_features)-(idx_max_2x2(Liste_fin_auc)[2]+1))","48f52308":"Features_modelxg1=X_samp.copy()","dcb45f57":"To_drop=All_features[:(idx_max_2x2(Liste_fin_auc)[2]+1)]\nFeatures_modelxg1=Features_modelxg1.drop(To_drop,axis=1)","2ba8b329":"To_drop=All_features[:(len(Features_modelxg1.columns)-34)]\nFeatures_modelxg1=Features_modelxg1.drop(To_drop,axis=1)","7783ba36":"len(Features_modelxg1.columns)","bbf112fa":"pt = PowerTransformer()\nFeatures_modelxg1=pt.fit_transform(Features_modelxg1)","4185c2da":"X_train, X_test, Y_train, Y_test= train_test_split(Features_modelxg1,Y_samp, train_size=0.89, random_state=6,stratify=Y_samp)","2a67de8c":"robust = RobustScaler()\nX_train=robust.fit_transform(X_train)\nX_test=robust.transform(X_test)","ce511862":"model = XGBClassifier(random_state=3,n_jobs=-1)\nmodel.fit(X_train, Y_train)","35d06b4f":"model.feature_importances_","c6e19b26":"print(model.score(X_test, Y_test))\nprint(model.score(X_train, Y_train))","63f8942a":"y_pred = model.predict(X_test)","9191cd48":"accuracy = accuracy_score(Y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","9f446a47":"labels=['No','Yes']\nplot_confusion_matrix(model, X_test, Y_test,display_labels=labels, cmap=plt.cm.Blues)\nplt.show()","a5e3caff":"knn_pred_prob = model.predict_proba(X_test)[:,1]\nknn_auroc = roc_auc_score(Y_test, knn_pred_prob)\nprint(\"XGBoost AUROC: {}\".format(knn_auroc))\nknn_y_pred = model.predict(X_test)\nprint(classification_report(Y_test, knn_y_pred,digits=4))","e5f8a7ff":"from sklearn import svm","fa7067c3":"Features_modelsvm1_M=X.copy()","6c7b9ae1":"X_train, X_test, Y_train, Y_test= train_test_split(Features_modelsvm1_M,Y, train_size=0.89, random_state=6,stratify=Y)","fbde47b0":"robust = RobustScaler()\nX_train=robust.fit_transform(X_train)\nX_test=robust.transform(X_test)","e33660da":"model = svm.SVC(kernel='poly')\nmodel.fit(X_train, Y_train)","afd0dd66":"print(model.score(X_test, Y_test))\nprint(model.score(X_train, Y_train))","789dfa53":"y_pred = model.predict(X_test)","1233a3f1":"accuracy = accuracy_score(Y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","98b31b68":"labels=['No','Yes']\nplot_confusion_matrix(model, X_test, Y_test,display_labels=labels, cmap=plt.cm.Blues)\nplt.show()","46e88b5b":"knn_pred_prob = model.predict(X_test)\nknn_auroc = roc_auc_score(Y_test, knn_pred_prob)\nprint(\"SVM AUROC: {}\".format(knn_auroc))\nknn_y_pred = model.predict(X_test)\nprint(classification_report(Y_test, knn_y_pred,digits=4))","8224c900":"* histogram of 'Tenure Months'","9e3093ab":"- OnlineSecurity, OnlineBackup, TechSupport seem to have a significant impact on lowering the churn. If the company wants to lower the churn rate, It may be a good idea to include these services as standard in the following order: OnlineSecurity, TechSupport, OnlineBackUp, DeviceProtection (although removing the internet connection service altogether may be potentially be more beneficial, at least the Fiber one; see graphs above for details). Although unlikely, it is also possible that these services get cumulated with tenure, and thus their effect on the churn only reflects the negative impact of tenure on the churn rate; in the next cells we will try to figure out whether this is true or not.","bae06360":"##Gender distribution :","ee5e3a51":"##with all features","7ca0f6d5":"* the column city has 1129 values so encoding it will add a large number of columns to the dataset, which is not convenient. <br>\n* the column 'Lat Long' is already encoded. ","6f471ba6":"* the churn score has a remarkable impact on each clumn","fc3fe862":"* display column's name","5e672a98":"* Men and women are evenly distributed in our sample, and show the same proportions of Churn.","9069fffb":"* understanding over variables ","372a5c28":"Correlation with table form","68abb0d8":"## Contract distribution","21988aac":"# Decision tree","8e58eeb5":"* Convert all yes and no to 0's & 1's so our classifier can use this data.","19966066":"* During this chapter, we\u2019ll be going through the data comprehension by describing its\ncontent explore it, in order to gain some insights through primary intuition","25843683":"* Among the ones that have internet service, DSL and Fiber optic are almost equally distributed (the fraction of people having Fiber optic is slightly greater). Less than one fourth of the members of our sample has no internet service.","a2713ba1":"##with all features","f98a5854":"standardization for pca","152b7041":"#we have separated X for features and Y for target","4ca4550f":"* We have 11 observations that take an empty string value. Let's drop that. The string we want to drop is :' '","1de42c2d":"Correlation Matrix with abs","52576146":"* the graph has almost the same shape as the California's map so we can conlude from this result that a large number of churners is situated in the north of the this state.<br>\n* we can provide this area with better services","1c4ea9b9":"#we are going to start with the variables which have a small redundancy","b9ffcf9d":"Indeed, it seems that the people who subscribed for first have many additional services. Possible explanations:","52945b07":"* We delete this column because it contains the same significant of Churn Value ","a364a220":"* It's obvious that that customers who have month to month type contract are more likely to churn ","624c63c4":"* the dataset contains 7043 rows and 33 columns ","38988124":"* we drop the customer ID : each row has a unique value.","502f004b":"* we have an unbalanced target","34148470":"* we can't make the histogram and the density with total charges because the type is not numerical so we will convert it ","02384398":"* customers with multiple lines,without multiple lines and with no phone  are showed the same proportions of Churn","d901cff6":"It's weird that so many people with high tenures have so many additional services. Is it just that there are many people with maximum tenure although the percentage of additional services across tenure level stays the same? Hypothesis: at the beginning, the company had a launch offer all-included. Let's check the percentages of people that have these services for each tenure level.","18615dcd":"* 90 % of customers have phone service","fa2d9a14":"## Phone Service distribution","35988365":"- There is a strong spike up in the percentage and number of users with all the services around tenure month = 70. Nonetheless, the trend in percentage of users with all the services grows constantly, while the absolute number of the individual services stays pretty much constant across tenure levels. This means the the increase in percentage is justifiable only by a convenient launch offer all-inclusive, that rules out the large amount of active offers for customers with extremely high tenure.","38f948b4":"* since we 1585 values in this column, we can't separate churners and non churners by their monthly charges.","bc8cad1b":"* column \"Churn Reason\" have 5174 null values. ","4f7e53cf":"#SVM","89dfcba1":"* Let's first have a look at the churn rate.","caa04092":"##Tests for normal distributions","71e08da3":"- Launch offer: all additional services forever included at a discounted price.","8e64cfe0":"Now we want to see how the \"Internet Services\" that follow the variable pattern: [\"No\", \"Yes\", \"No internet service\"] affect the churn rate","b76fdb11":"* Our sample is mainly composed by young people. Senior customers are more prone to churning.","e3e8268b":"using default parameters","d9906496":"* it can be noticed that there are some values of altitude and longitude where the density of customers is high ","6915c171":"* it can be noticed that there is a homogeneity in the distribution of customers in relation with churn value  depending on latitude and longitude from which it may be that the altitude and longitude are weakly correlated with our target.","94cf3445":"* 'Partner' column evenly distributed","9b3a226e":"* histogram de Total charges ","b864d37d":"##other columns","223676dd":"* absence of outliers.","3a1fdb39":"* density plot","39607e4a":"Either case, we can dismiss the hypothesis that additional services are accumulated through tenure, for two reasons:","fd160657":"## Total Charges distribution ","f6d1af1e":"* All customers who left have Churn Reasons ","32546d22":"##boucle","8f862f8a":"- Selection bias: the first customers are the ones who appreciate the most the services offered by the company.","f86f3b55":"# KNN Model ","ac2c57a2":"search the best model params","3f6705ff":"* correlation value with abs and person parameter for better understanding of each feature.","16ea1ccf":"* almost the same result of the previous pairplot.","b823b59e":"* More than half customers have a month-to-month contract.","95589cdb":"* We notice that The customers with Fiber optic tend to churn a lot more when compared to DSL and No Internet. Maybe the Internet connection offered is low-quality?<br\/>\nMultipleLines do not seem to affect the churn rate.<br\/>\nShorter-term contract renewals are highly correlated with the churn rate. But most likely it's an omitted variable bias issue: the more I trust a provider, the more I reason in long-terms with it.","55fdb4ad":"To assess whether additional services are accumulated through tenure (e.g. fidalty programs), we run a lmplot for each additional Internet service.","16a24c45":"* there's almost an even split between males and females.","539fb4e5":"## Monthly charge distribution","1eaded6e":"* the type of each column","98bd02d4":"* Let's drop the observations with empty values, reset the index and now we should be able to convert the Total Charges column to float:\n\n","ea1aa6fe":"correlation value without abs","3b24e128":"##boucle","c374ccc7":"* the number of unique values in each column","ac59ecc2":"* The column of 'Churn Label' is like the column 'Churn Value' but the difference is the values 'Yes' ,'No' in 'Churn Label' and 1, 0 in 'Churn Value'.  ","c2ca1ff1":"all variables has not a normal distribution because all p_values are smaller than 0.05","8749be5b":"so we will use spearman in correlation parameter","b4b0b1f7":"#XGBoost","04ee5fca":"- if there was a cumulation of benefits, the drop on the 69th - tenure month value could be hardly justifiable, whereas it could be justified by a change in the offer or a decrease in interest towards the company.","0470ea51":"* histogram de Monthly Charges","03b28328":"* density plot","4e41a0cd":"* density plot","1bbbd6cb":"## Internet service distribution","cb8b1340":"if we use RFECV we can't have the best result.","987fad63":"- StreamingTV and StreamingMovies do not seem to have a large enough effect on customer Churn Rate.","99f34cda":"* best params using RandomSearchCV but because the number of iterations.","e9f48b30":"correlation value with abs and spearman parameter","16d3c547":"# Correlation","4079461b":"## Tenure months distribution","85ceb3f8":"## Multiple Lines distribution","d21c782b":"* The majority of the customers in our sample are new clients. There is also a high number of people with a tenure around 70 months. Most likely the company is not older than 72 months, and there either was a strong incentive for subscription (like a competitive launch offer, which could explain the high number through efficient retention rates) or there was some form of selection bias (the offers were unique on the market and highly valued by a group of customers, leading to fast market saturation, which could explain the high number by keeping the retention rate constant and leveraging high sales volumes). These are the only two reasons that can explain such a sharp kickstart in the number of subscriptions and their sudden drop.","f257916b":"#Random Forest\n","2a982f8c":"The absolute number of each Additional Service seems to move in syncro with the others as tenure increases. It does not seem that there is any significant correlation between the number of active Additional Services and tenure, although people with borderline tenures have an extremely high number of Additional Services.","9418cc84":"## Partner distribution","d359a0af":"* we drop 'Count','Country' and 'State'.<br>\n* same value for all rows.","8ed6bbf0":"##Churn Score\n","acaee672":"## Age distribution","b73068e2":"##Dependents","34b7205e":"# Data Understanding ","28bdba91":"Correlation Matrix without abs","01db0fb4":"with necessary columns","68c8958d":"# Customer Churn"}}