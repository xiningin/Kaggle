{"cell_type":{"dfca0871":"code","ad3e5530":"code","b2b2ef7d":"code","d4e3be8e":"code","eb415ad9":"code","483e3de8":"code","f077e38d":"code","ac9ba45c":"code","9d12cd59":"code","1a1165aa":"code","97dbad8c":"code","bee5b249":"code","1f149530":"code","d4e03cd3":"code","69b616c4":"code","0668a0d0":"code","8c6a333e":"code","e627e003":"code","6bda295d":"code","4457a78b":"code","877f639a":"code","16fa0b0d":"code","fabcb70c":"code","80ada9a8":"code","4663bdda":"code","3fe638d5":"code","32f24e37":"code","36d09d21":"code","f138228e":"code","0595e3a6":"code","77b4b896":"code","ee0494db":"code","9d46f2fe":"code","5f55f2c2":"code","d9fb25f9":"code","3619508a":"code","e72b1418":"code","a5e485c1":"markdown","3e50bbe4":"markdown","a209b02d":"markdown","f460bb60":"markdown"},"source":{"dfca0871":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ad3e5530":"train = pd.read_csv('train_v9rqX0R.csv')","b2b2ef7d":"train['Outlet_Size'] = train['Outlet_Size'].fillna(train['Outlet_Size'].mode().dropna().values[0])\ntrain['Item_Weight'] = train['Item_Weight'].fillna(train['Item_Weight'].mean())","d4e3be8e":"train.head()","eb415ad9":"train['Item_Fat_Content'] = train['Item_Fat_Content'].replace('LF','low fat').replace('Low Fat','low fat').replace('reg','Regular')\ntrain['Outlet_Establishment_Year'] =train.Outlet_Establishment_Year.max()-train.Outlet_Establishment_Year","483e3de8":"# encod = ['Item_Type','Outlet_Size','Outlet_Location_Type','Outlet_Type']\n# dummies = ['Item_Fat_Content']\ndrop_col = ['Outlet_Identifier','Item_Identifier']","f077e38d":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","ac9ba45c":"train.info()","9d12cd59":"train.Item_Type = le.fit_transform(train.Item_Type)\ntrain.Outlet_Size = le.fit_transform(train.Outlet_Size)\ntrain.Outlet_Location_Type = le.fit_transform(train.Outlet_Location_Type)\ntrain.Outlet_Type = le.fit_transform(train.Outlet_Type)\ntrain.Item_Fat_Content = le.fit_transform(train.Item_Fat_Content)","1a1165aa":"train.drop(drop_col,1, inplace=True)","97dbad8c":"# train['Item_Fat_Content']=pd.get_dummies('Item_Fat_Content')","bee5b249":"train.head()","1f149530":"X = train.drop('Item_Outlet_Sales',1)\ny = train['Item_Outlet_Sales']","d4e03cd3":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3)","69b616c4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nnums = ['Item_Weight','Item_Visibility','Item_MRP','Outlet_Establishment_Year']\nX_train[nums] = scaler.fit_transform(X_train[nums])\nX_test[nums] = scaler.fit_transform(X_test[nums])","0668a0d0":"y_train.head()","8c6a333e":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nmodel = lr.fit(X_train, y_train)","e627e003":"y_pred = model.predict(X_test)","6bda295d":"y_pred","4457a78b":"model.score(X_test, y_test)*100","877f639a":"from sklearn import metrics","16fa0b0d":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=1000)\nmodel.fit(X_train,y_train)\n","fabcb70c":"print(model.score(X_test,y_test))","80ada9a8":"from sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(n_estimators=100,max_depth=4)\nGBR.fit(X_train,y_train)","4663bdda":"print(GBR.score(X_test,y_test))","3fe638d5":"from sklearn.model_selection import KFold, cross_val_score\nfrom xgboost import XGBRegressor\n\nXGBR = XGBRegressor(n_estimators=100,learning_rate=0.05)\nXGBR.fit(X_train,y_train)","32f24e37":"print(XGBR.score(X_test,y_test))","36d09d21":"pred = XGBR.predict(X_test)","f138228e":"from sklearn.metrics import mean_absolute_error\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(y_test,pred)))","0595e3a6":"test = pd.read_csv('test_AbJTz2l.csv')","77b4b896":"test.head()","ee0494db":"test['Outlet_Size'] = test['Outlet_Size'].fillna(test['Outlet_Size'].mode().dropna().values[0])\ntest['Item_Weight'] = test['Item_Weight'].fillna(test['Item_Weight'].mean())\ntest['Item_Fat_Content'] = test['Item_Fat_Content'].replace('LF','low fat').replace('Low Fat','low fat').replace('reg','Regular')\ntest['Outlet_Establishment_Year'] =test.Outlet_Establishment_Year.max()-test.Outlet_Establishment_Year\ndrop_col = ['Outlet_Identifier','Item_Identifier']\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntest.Item_Type = le.fit_transform(test.Item_Type)\ntest.Outlet_Size = le.fit_transform(test.Outlet_Size)\ntest.Outlet_Location_Type = le.fit_transform(test.Outlet_Location_Type)\ntest.Outlet_Type = le.fit_transform(test.Outlet_Type)\ntest.Item_Fat_Content = le.fit_transform(test.Item_Fat_Content)\ntest.drop(drop_col,1, inplace=True)","9d46f2fe":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nnums = ['Item_Weight','Item_Visibility','Item_MRP','Outlet_Establishment_Year']\ntest[nums] = scaler.fit_transform(test[nums])","5f55f2c2":"test.head()","d9fb25f9":"test_pred = XGBR.predict(test)","3619508a":"test['Sales_Predictions'] = test_pred","e72b1418":"test.head()","a5e485c1":"### 3.GradientBoostingRegressor","3e50bbe4":"### 2. RandomForestRegressor","a209b02d":"### 1.Linear Regression","f460bb60":"## Test data"}}