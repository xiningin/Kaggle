{"cell_type":{"626a1071":"code","ea1e29e3":"code","89ea07cf":"code","211f872d":"code","7bc70c6c":"code","d064eb09":"code","855e0499":"code","3d9b45c5":"code","f6cca1f9":"code","678671fb":"code","a203c09c":"code","0f665990":"code","7fb243b9":"code","05cb0a03":"code","4dc03314":"code","cc51a8ad":"code","d6644259":"code","c7dfe600":"code","544186d3":"code","5d01fed4":"code","1fe8254e":"code","ca2c6262":"code","3eebc9b6":"code","340d925c":"code","e6866265":"code","d70840c1":"code","cfdee85b":"code","0729e84e":"code","5008d404":"code","8fd7958c":"code","787d69c8":"code","7b051687":"code","0b615068":"code","0709b3d2":"code","120a5efa":"code","cec0065e":"code","2a461d1b":"code","f322e52b":"markdown","542d673b":"markdown","6f155513":"markdown"},"source":{"626a1071":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n  #      print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea1e29e3":"import random\nimport cv2\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n\nstyle.use('fivethirtyeight')\n\nfont = {'family': 'sans-serif',\n        'weight': 'bold',\n        'size': 20}\nplt.rc('font', **font)\nplt.rcParams['figure.figsize'] = (15, 8)\n\nfrom sklearn.cluster import KMeans\nfrom collections import Counter","89ea07cf":"dirnames = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        dirnames.append(os.path.join(dirname, filename))","211f872d":"len(dirnames)","7bc70c6c":"random.shuffle(dirnames)","d064eb09":"df = pd.DataFrame(dirnames, columns = ['location'])\ndf.head()","855e0499":"path = df['location'].iloc[0]\nimg = cv2.imread(path)\n\nprint(img.shape)\nplt.imshow(img)","3d9b45c5":"img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.figure(figsize = (15, 8))\nplt.imshow(img)","f6cca1f9":"def rgb_to_hex(rgb):\n    return \"#{:02x}{:02x}{:02x}\".format(int(rgb[0]), int(rgb[1]), int(rgb[2]))\n\ndef modify(image):\n    return image.reshape(image.shape[0] * image.shape[1], 3)","678671fb":"kmeans = KMeans(1)\nkmeans.fit(modify(img))\nprint(rgb_to_hex(kmeans.cluster_centers_[0]))","a203c09c":"img.shape","0f665990":"kmeans.cluster_centers_[0]","7fb243b9":"[1, 2, 3] * 2","05cb0a03":"def process(path):\n    img = cv2.imread(path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    kmeans = KMeans(1)\n    kmeans.fit(modify(img))\n    return kmeans.cluster_centers_[0], rgb_to_hex(kmeans.cluster_centers_[0])","4dc03314":"red = df['location'][:5].apply(lambda x: process(x)[0][0]).values","cc51a8ad":"print(np.mean(red))\nprint(np.std(red))","d6644259":"from scipy import stats\n\nstats.skew(red)","c7dfe600":"def PearsonMedianCoeff(sample, xbar, median):\n    gp = 3 * (xbar - median) \/ len(sample)\n    return gp\nPearsonMedianCoeff(red, np.mean(red), np.median(red))","544186d3":"np.median(red)","5d01fed4":"df = df.sample(frac = 1)","1fe8254e":"final_df = pd.read_csv('..\/input\/final-csv\/3000_bookcovers.csv')","ca2c6262":"final_df.shape","3eebc9b6":"final_df.head()","340d925c":"rgb = (final_df['red'].min(), final_df['green'].min(), final_df['blue'].min())\nrgb_to_hex(rgb)","e6866265":"rgb = (final_df['red'].max(), final_df['green'].max(), final_df['blue'].max())\nrgb_to_hex(rgb)","d70840c1":"final_df['red'].hist(color = '#0a0a07')","cfdee85b":"np.dot((final_df['red'].max(), final_df['green'].max(), final_df['blue'].max()),\n       (final_df['red'].min(), final_df['green'].min(), final_df['blue'].min()))","0729e84e":"from sklearn.preprocessing import MinMaxScaler\n\nmin_max = MinMaxScaler()\ndf1 = min_max.fit_transform(final_df.iloc[:, 1:-1])\n\nprint(df1.shape)\n\nred, green, blue = final_df['red'].values, final_df['green'].values, final_df['blue'].values","5008d404":"df1","8fd7958c":"#ax = plt.axes(projection = '3d')\nplt.figure(figsize = (15, 8))\nplt.scatter(red, green, blue, facecolors = df1)\nplt.show()","787d69c8":"ax = plt.axes(projection = '3d')\n#plt.figure(figsize = (15, 8))\nax.scatter(red, green, blue, facecolors = df1)\nplt.show()","7b051687":"def SimulateSample(series, mu = 0, n = 10, m = 1000):\n    x_bars = []\n    cdf = []\n    \n    for _ in range(m):\n        xs = random.sample(list(series), n)\n        x_bar = np.mean(xs)\n        x_bars.append(x_bar)\n        \n    return x_bars\n\ndef EvalCdf(sample, x):\n    count = 0\n    for i in sample:\n        if i <= x:\n            count += 1\n    return count \/ len(sample)\n\ndef RMSE(actual, estimates):\n    error = [(actual - estimate) ** 2 for estimate in estimates]\n    return np.sqrt(np.mean(error))","0b615068":"def Plot(column):\n    sample = SimulateSample(final_df[column], mu = final_df[column].mean())\n    cdf = [EvalCdf(sample, x) for x in sorted(sample)]\n\n    plt.plot(sorted(sample), cdf, drawstyle = 'steps', color = 'maroon', label = 'CDF')\n    plt.axvline(np.percentile(sample, 5), 0, ls = '--', color = 'black', label = '95% CI')\n    plt.axvline(np.percentile(sample, 95), 0, ls = '--', color = 'black')\n    plt.axvline(final_df[column].mean(), 0, color = 'grey', ls = '--', label = 'Population mean')\n    plt.axvline(final_df[column].mean() - RMSE(final_df[column].mean(), sample), 0, color = 'grey', alpha = 0.6, ls = ':', label = 'std. error')\n    plt.axvline(final_df[column].mean() + RMSE(final_df[column].mean(), sample), 0, color = 'grey', alpha = 0.6, ls = ':')\n    plt.legend(shadow = True, framealpha = 1.0, facecolor = 'white', edgecolor = 'maroon')\n    #plt.xlim([np.percentile(sample, 5), np.percentile(sample, 95)])\n\n    print(np.percentile(sample, 5), np.percentile(sample, 95))","0709b3d2":"Plot('red')","120a5efa":"Plot('blue')","cec0065e":"Plot('green')","2a461d1b":"kmeans = KMeans(10)\nkmeans.fit(np.array(final_df.iloc[:, 1:4]))\nrgb_to_hex(kmeans.cluster_centers_[0])","f322e52b":"# RED","542d673b":"# Idea:","6f155513":"The idea is to research whether children's book covers are serene, which could be demonstrated best by recognizing the colors that predominantly feature in their books...\n\n***P.S. The notebook is under construction***"}}