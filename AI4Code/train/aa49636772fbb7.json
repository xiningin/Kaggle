{"cell_type":{"e435b4d5":"code","4e57d9c1":"code","2a569252":"code","eb467e71":"code","799112b7":"code","8b98cea0":"code","27cae7f1":"code","3d080ee6":"code","3d9ae7e0":"code","39fa2882":"code","50d72bb4":"code","73f41980":"code","e536f1f2":"code","e82e7d1c":"code","2459344f":"code","6541d237":"code","779aa92d":"code","5fa9fe58":"code","edf96b79":"code","0dd1eab9":"code","c72d6c8f":"code","22e000a8":"code","d8afb9fe":"code","8952289c":"code","e358115d":"code","74b9437f":"code","ee321e94":"code","d5fa4657":"code","d0ecec83":"code","43c46ae0":"code","b789c450":"code","2643ebfe":"code","2a05dcba":"code","dff04e2c":"markdown","e4560891":"markdown","9682ebcf":"markdown","d85c1b40":"markdown","f5c41726":"markdown","2dfbb20f":"markdown"},"source":{"e435b4d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4e57d9c1":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","2a569252":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","eb467e71":"train.info()","799112b7":"test.info()","8b98cea0":"all = pd.concat([train, test], sort = False)\nall.info()","27cae7f1":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","3d080ee6":"all.info()","3d9ae7e0":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","39fa2882":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","50d72bb4":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","73f41980":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","e536f1f2":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","e82e7d1c":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","2459344f":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","6541d237":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","779aa92d":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","5fa9fe58":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","edf96b79":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","0dd1eab9":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","c72d6c8f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","22e000a8":"from sklearn.linear_model import LogisticRegression","d8afb9fe":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","8952289c":"predictions = logmodel.predict(X_test)\npredictions","e358115d":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","74b9437f":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","ee321e94":"all_test.head()","d5fa4657":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","d0ecec83":"TestForPred.info()","43c46ae0":"t_pred = logmodel.predict(TestForPred).astype(int)","b789c450":"PassengerId = all_test['PassengerId']","2643ebfe":"logSub.to_csv(\"1_Logistics_Regression_Submission.csv\", index = False)","2a05dcba":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","dff04e2c":"****Check Accuracy","e4560891":"****Confusion Matrix","9682ebcf":"****Train\/Test Split","d85c1b40":"****Final Predictions","f5c41726":"****Extra Features:","2dfbb20f":"****Build Logistic Model"}}