{"cell_type":{"f0979c8f":"code","b4ea8a3f":"code","f60ee73e":"code","92738e16":"code","bc6e43bd":"code","ee3a9ade":"code","28ac71fa":"code","a444defb":"code","a696bff5":"code","806d9daa":"code","aa843968":"code","ab0e4d76":"code","8ccb738f":"code","01602c97":"code","693b81e6":"code","8409c186":"code","b9af6037":"code","05f84839":"code","8e905c64":"code","a4669a39":"code","6591ecce":"code","ad3b651c":"code","d70d81a1":"code","27b5bcaa":"code","100749cf":"code","6ff93afe":"code","30225927":"code","0aab1895":"code","aeea2fb8":"code","97a15e65":"code","6ab509ba":"code","511352a2":"code","713abe9e":"code","45988af0":"markdown"},"source":{"f0979c8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4ea8a3f":"\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns","f60ee73e":"train =pd.read_csv('..\/input\/ipl-2020-player-performance\/Training.csv')\nhis1 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\nhis2 =pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')","92738e16":"train.sample(5)","bc6e43bd":"train.isnull().sum()","ee3a9ade":"train['batting_pnts'] = train['Runs'] + train['Boundaries'] + 2 * train['Six'] + 8 * train['Fifty'] + 16 * train['Hundred'] - 2 * train['Duck']\ntrain['bowling_pnts'] = 25 * train['Wickets'] + 8 * train['4W_Haul'] + 16 * train['5W_Haul'] + 8 * train['Maidens']\ntrain['total'] = train['batting_pnts'] + train['bowling_pnts']\ntrain","28ac71fa":"his1.sample(5)","a444defb":"his2.sample(2)","a696bff5":"df1 = pd.DataFrame(his1, columns=['match_id','city','date'])\ndf2 = pd.DataFrame(his2, columns=['match_id','city','date'])\n\ndf1.head()\n","806d9daa":"df2.head()","aa843968":"final = pd.merge(df1, df2, on = 'match_id', how = 'outer' )\nfinal","ab0e4d76":"print(np.shape(final))\nfinal.isnull().sum()","8ccb738f":"train[['match_id','Player_name']] = train['Id'].str.split('_',expand = True) \ntrain['match_id'] = train['match_id'].astype(int)\ntrain_df = pd.merge(train, final, on = 'match_id', how = 'inner')\ntrain_df","01602c97":"train_df.isnull().sum()","693b81e6":"train_df.drop(['city_x','city_y','date_y','date_y'],axis =1)","8409c186":"df = pd.DataFrame()\ndf['match_id'] = train_df['match_id']\ndf['Player_name'] = train_df['Player_name']\ndf['total'] = train_df['Total Points']\ndf","b9af6037":"df_f=  pd.merge(df, his1, on = 'match_id', how = 'outer' )","05f84839":"df_f.head()","8e905c64":"df_f.isnull().sum()","a4669a39":"df_f.drop(['umpire3','umpire2','umpire1','player_of_match','winner','win_by_runs','win_by_wickets','toss_winner','toss_decision','result',\n            'dl_applied','date','season','city','team1','team2','venue'],axis=1,inplace=True)","6591ecce":"df_f= df_f[['Player_name','match_id','total']].reset_index(drop=True)\ndf_f","ad3b651c":"len(df_f['Player_name'].unique())","d70d81a1":"dummies=pd.get_dummies(df_f.Player_name)\ndummies","27b5bcaa":"df_f_1=pd.concat([df_f,dummies],axis='columns')\ndf_f_2=df_f_1.drop(['Player_name'],axis='columns')\ndf_f_2","100749cf":"test =df_f_2['total']\ntrain =df_f_2.drop('total',axis='columns')\n\n","6ff93afe":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train, test, test_size = 0.20, random_state = 0)","30225927":"from sklearn.naive_bayes import GaussianNB\nnb_model=GaussianNB()\nnb_model.fit(X_train,y_train)\ny_pred=nb_model.predict(X_test)","0aab1895":"from sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\n\naccuracy=accuracy_score(y_test,y_pred) \nprecision=precision_score(y_test,y_pred,average='weighted')\nrecall=recall_score(y_test,y_pred,average='weighted')\nf1=f1_score(y_test,y_pred,average='weighted')\n\nprint('Accuracy - {}'.format(accuracy))\nprint('Precision - {}'.format(precision))\nprint('Recall - {}'.format(recall))\nprint('F1 - {}'.format(f1))","aeea2fb8":"from sklearn.ensemble import RandomForestClassifier\nmodel=RandomForestClassifier(n_estimators=50)\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)","97a15e65":"\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\n\naccuracy=accuracy_score(y_test,y_pred) \nprecision=precision_score(y_test,y_pred,average='weighted')\nrecall=recall_score(y_test,y_pred,average='weighted')\nf1=f1_score(y_test,y_pred,average='weighted')\n\nprint('Accuracy - {}'.format(accuracy))\nprint('Precision - {}'.format(precision))\nprint('Recall - {}'.format(recall))\nprint('F1 - {}'.format(f1))\nmodel.score(X_test,y_test)","6ab509ba":"\nfrom sklearn.tree import DecisionTreeClassifier\nmodel1=DecisionTreeClassifier(criterion='gini', splitter='best',\n                             max_depth=16, min_samples_split=2,\n                             min_samples_leaf=1, min_weight_fraction_leaf=0.0,\n                             max_features=None, random_state=None,\n                             max_leaf_nodes=None, min_impurity_decrease=0.0, \n                             min_impurity_split=None, class_weight=None, \n                             presort='deprecated', ccp_alpha=0.0)\nmodel1.fit(X_train,y_train)\ny_pred=model1.predict(X_test)","511352a2":"from sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\n\naccuracy=accuracy_score(y_test,y_pred) \nprecision=precision_score(y_test,y_pred,average='weighted')\nrecall=recall_score(y_test,y_pred,average='weighted')\nf1=f1_score(y_test,y_pred,average='weighted')\n\nprint('Accuracy - {}'.format(accuracy))\nprint('Precision - {}'.format(precision))\nprint('Recall - {}'.format(recall))\nprint('F1 - {}'.format(f1))","713abe9e":"pred = model1.predict(his2)","45988af0":"\n# Model Implementation\n\nNaive Bayes\n\nDecision Trees\n\nRandom Forest"}}