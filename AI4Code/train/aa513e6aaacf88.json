{"cell_type":{"85c7831b":"code","1b4858bd":"code","25d68edc":"code","b55da002":"code","09ee8fe5":"code","2efa3e05":"code","59fd8b0c":"code","7b835c81":"code","c335feb2":"code","d6c0f024":"code","dc9bc72a":"code","f8f84598":"code","3309bdb8":"code","166cfbbe":"code","708383e7":"code","3805d660":"markdown","481ab89c":"markdown","3402979d":"markdown","c7d5af0d":"markdown","ec0e7708":"markdown","29c32577":"markdown","df7ed9b3":"markdown","49ecedb1":"markdown","25361d1f":"markdown","1a02a861":"markdown","bef986fa":"markdown","00a4b163":"markdown"},"source":{"85c7831b":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\nfrom sklearn.inspection import permutation_importance\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split, KFold, cross_validate, cross_val_score\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.metrics import confusion_matrix, recall_score, accuracy_score\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\n\nimport seaborn as sns\n\nfrom sklearn.model_selection import GridSearchCV\n\n\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nimport xgboost as xgb","1b4858bd":"df = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')\ndf = df.iloc[:, :-2]\n\n# Setting the index\ndf.set_index('CLIENTNUM', inplace=True)","25d68edc":"# Replacing 'Unknown' values.\ncategorical = ['Education_Level', 'Marital_Status', 'Income_Category']\n\nencoders = {}\n\nfor cat in categorical:\n    encoder = LabelEncoder()\n    encoders[cat] = encoder\n    values = df[cat]\n    known_values = values[values != 'Unknown']\n    df[cat] = pd.Series( encoder.fit_transform(known_values), index=known_values.index)\n\nimp_cat = IterativeImputer(estimator=RandomForestClassifier(),\n                           initial_strategy='most_frequent',\n                           max_iter=10, random_state=0)\n\n\ndf[categorical] = imp_cat.fit_transform(df[categorical])\n\nfor cat in categorical:\n    df[cat] = encoders[cat].inverse_transform(df[cat].astype(int))\n","b55da002":"def make_categorical(data: pd.DataFrame, column: str, categories: list, ordered: bool = False):\n    data[column] = pd.Categorical(df[column],\n                                       categories=categories,\n                                       ordered=ordered)\n\n\ndf['Attrition_Flag'] = df['Attrition_Flag'].map({'Attrited Customer':1, 'Existing Customer':0})\n\nmake_categorical(df, 'Gender', ['F', 'M'])\n\nmake_categorical(df, 'Education_Level', ['Uneducated', 'High School', 'Graduate', 'College', 'Post-Graduate', 'Doctorate'], True)\n\nmake_categorical(df, 'Marital_Status', ['Married', 'Single', 'Divorced'])\n\nmake_categorical(df, 'Income_Category', ['Less than $40K', '$40K - $60K', '$60K - $80K', '$80K - $120K', '$120K +'], True)\n\nmake_categorical(df, 'Card_Category', ['Blue', 'Silver', 'Gold', 'Platinum'], True)","09ee8fe5":"# These columns I added while doing the EDA.\n\nage_bins = [20, 40, 60, 80]\nage_labels = ['20 - 40', '40 - 60', '60 - 80']\ndf['Age_Range'] = pd.cut(df['Customer_Age'], age_bins, labels=age_labels, ordered=True)\n\ndf['No_Revolving_Bal'] = df['Total_Revolving_Bal'] == 0\n\ndf['New_Customer'] = df['Months_on_book'] <= 24\n\ndf['Optimal_Utilization'] = df['Avg_Utilization_Ratio'] <= 0.3\n\n# The next two columns I added after doing some Feature Selection analysis (more on that below).\n\ndf['Avg_Transaction'] = df['Total_Trans_Amt'] \/ df['Total_Trans_Ct']\n\ndef get_avg_q4_q1(row):\n    if row['Total_Ct_Chng_Q4_Q1'] == 0:\n        return 0\n    return row['Total_Amt_Chng_Q4_Q1'] \/ row['Total_Ct_Chng_Q4_Q1']\n\n\ndf['Avg_Q4_Q1'] = df.apply(get_avg_q4_q1, axis=1)","2efa3e05":"label_encoding_columns = ['Education_Level', 'Marital_Status']\n\ndummy_encoding_columns = ['Gender', 'Income_Category', 'Card_Category', 'Age_Range']\n\ndf[label_encoding_columns]= df[label_encoding_columns].apply(LabelEncoder().fit_transform)\ndf = pd.get_dummies(df, columns=dummy_encoding_columns, prefix=dummy_encoding_columns, drop_first=True)","59fd8b0c":"X = df.iloc[:, 1:]\ny = df.iloc[:, 0]","7b835c81":"# forest = ExtraTreesClassifier(n_estimators=250)\n# forest.fit(X, y)\n#\n# feat_importances = pd.Series(forest.feature_importances_, index=X.columns).sort_values(ascending=False)\n#\n# sel = SelectFromModel(forest)\n# sel.fit(X, y)\n# selected_feat= X.columns[sel.get_support()]\n#\n# df_sel = df[selected_feat]","c335feb2":"X = RobustScaler().fit_transform(X)","d6c0f024":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=y)\n","dc9bc72a":"base_models = [\n    (\"LR_model\", LogisticRegression(random_state=42,n_jobs=-1)),\n    (\"KNN_model\", KNeighborsClassifier(n_jobs=-1)),\n    (\"SVM_model\", SVC(random_state=42, kernel = 'rbf')),\n    (\"DT_model\", DecisionTreeClassifier(random_state=42)),\n    (\"RF_model\", RandomForestClassifier(random_state=42,n_jobs=-1)),\n    (\"XGB_model\", XGBClassifier(random_state=42, n_jobs=-1, scale_pos_weight=5)),\n    (\"CXGB_model\", CatBoostClassifier(random_state=42, auto_class_weights='Balanced'))\n]\n\n\nsplit = KFold(n_splits=4, shuffle=True, random_state=42)\n\n# Preprocessing, fitting, making predictions and scoring for every model:\nfor name, model in base_models:\n\n    # get cross validation score for each model:\n    cv_results = cross_val_score(model,\n                                 X, y,\n                                 cv=split,\n                                 scoring=\"recall\",\n                                 n_jobs=-1)\n    # output:\n    min_score = round(min(cv_results), 4)\n    max_score = round(max(cv_results), 4)\n    mean_score = round(np.mean(cv_results), 4)\n    std_dev = round(np.std(cv_results), 4)\n    print(f\"{name} cross validation recall score: {mean_score} +\/- {std_dev} (std) min: {min_score}, max: {max_score}\")","f8f84598":"# grid_params = {\n#     'depth':[4, 5, 6, 7, 8 ,9, 10],\n#     'iterations':[250, 500, 1000],\n#     'learning_rate':[0.001, 0.1, 0.2, 0.3],\n#     'l2_leaf_reg':[3, 5, 10, 100],\n#     'border_count':[10, 20, 50, 100],\n# }\n#\n# gd_sr = GridSearchCV(estimator=CatBoostClassifier(random_state=42, auto_class_weights='Balanced'),\n#                      param_grid=grid_params,\n#                      scoring='recall',\n#                      cv=5,\n#                      n_jobs=-1)\n#\n# gd_sr.fit(X_train, y_train)\n#\n# best_parameters = gd_sr.best_params_\n# print(best_parameters)","3309bdb8":"best_classifier = CatBoostClassifier(\n    random_state=42,\n    border_count=100,\n    depth=6,\n    iterations=140,\n    l2_leaf_reg=100,\n    learning_rate=0.1,\n    auto_class_weights='Balanced',\n    verbose=False\n)\n\nbest_classifier.fit(X_train, y_train)\ny_pred = best_classifier.predict(X_test)","166cfbbe":"cm = confusion_matrix(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\n# labels = ['Survived', 'No Survived']\nax = sns.heatmap(cm, annot=True)\nprint(\"recall: {}\".format(recall))","708383e7":"\nnp.mean(\n    cross_val_score(\n        best_classifier,\n        X,\n        y,\n        cv=split,\n        scoring=\"recall\",\n        n_jobs=-1)\n)\n\n","3805d660":"## Split into train and test sets","481ab89c":"# Customer Churning\n\nIn this notebook I go through the process of evaluating different Classification Models. I end up using `CatBoost`, as\nit yielded the highest `recall` of all.\n\n## Disclaimer\n\nThis notebook doesn't include an EDA nor any other type of analysis, given that I already submitted another\n[notebook](https:\/\/www.kaggle.com\/augusto1982\/credit-card-customers-analysis) for that.\n\n## Loading the data","3402979d":"## K-Fold and CatBoost","c7d5af0d":"## Confusion Matrix","ec0e7708":"As we can see, `CatBoost` seems to be the best option.\n\n## Search for optimal hyperparameters\n\nI commented the code below, given that it takes hours to run. Its execution produced the following combination of parameters:\n\n```\n{\n    'border_count': 100,\n    'depth': 6,\n    'iterations': 250,\n    'l2_leaf_reg': 100,\n    'learning_rate': 0.1\n}\n```\n\nHowever, I ran this before adding the last two columns, so I tweak them manually some more afterwards.","29c32577":"## Feature Selection\n\nHere I don't use Feature Selection for selecting a subset of relevant features, as that didn't improve the score of the model.\nInstead, I use it to determine which of the whole group turn out to be more relevant and see if there's any other column\nI create to reinforce the model.\n\nThe process determined these are the most relevant:\n```\n[\n    'Total_Relationship_Count', 'Months_Inactive_12_mon', 'Contacts_Count_12_mon',\n    'Total_Revolving_Bal', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt', 'Total_Trans_Ct',\n    'Total_Ct_Chng_Q4_Q1', 'No_Revolving_Bal'\n]\n```\n\nAs we can see we have the columns regarding Q4\/Q1, and the two for the total of transactions. Therefore, I decided\nto create two additional columns, as I previously mentioned (`Avg_Transaction` and `Avg_Q4_Q1`).\n","df7ed9b3":"## Encoding the categorical variables","49ecedb1":"## Construction and execution of the optimal? model","25361d1f":"## Evaluate different models with K-Fold","1a02a861":"## Scaling the data","bef986fa":"## Splitting the target and independent variables","00a4b163":"## Adding additional columns"}}