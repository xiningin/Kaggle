{"cell_type":{"ac09d00b":"code","4d32cece":"code","9e44bf3c":"code","1b3f8d62":"code","1508e07a":"code","b47557dd":"code","9362237a":"code","5b4fe580":"code","d194a73b":"code","ad5a5c5e":"code","2b00276d":"code","f6f3ff9b":"code","0dc303a9":"code","75f80270":"code","54834255":"code","f5c2cfb6":"code","54c58fc9":"code","acb3be71":"code","a067e390":"markdown","eafba207":"markdown","c5046ee8":"markdown","f2b6b9ca":"markdown","c6d62a2f":"markdown","8b16fb86":"markdown","4b578c5b":"markdown","fbe3d82d":"markdown","cc0fd3e6":"markdown"},"source":{"ac09d00b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport re\nimport string\n\nfrom tensorflow import keras\nimport tensorflow as tf\n\noriginal_ds = pd.read_csv('..\/input\/steam-reviews\/dataset.csv')\nreviews_ds = original_ds.copy()\nreviews_ds.head()","4d32cece":"reviews_ds.describe()","9e44bf3c":"sns.catplot(x='review_score', kind='count', data=reviews_ds) # plot count of all reviews","1b3f8d62":"reviews_ds = reviews_ds.drop_duplicates(keep='first')\n\ntop_reviews_count = pd.value_counts(reviews_ds.app_name)[:15].to_frame('count').reset_index()\ntop_games = top_reviews_count['index'].values\ntop_games # most reviewed games\n\ntop_reviews = reviews_ds[reviews_ds['app_name'].isin(top_games)] # take only top games reviews from reviews_ds\n\ntop_reviews_count","1508e07a":"x, y = 'app_name', 'review_score'\ndf1 = top_reviews.groupby(x)[y].value_counts(normalize=True)\ndf1 = df1.mul(100)\ndf1 = df1.rename('percent').reset_index()\n\ng = sns.catplot(x=x,y='percent',hue=y,kind='bar',data=df1, height=7.4, aspect=2.4, order=top_reviews['app_name'].value_counts().index)\ng.set(title='Most reviewed games')\ng.ax.set_ylim(0,100)\n\nfor p in g.ax.patches:\n    txt = str(p.get_height().round(2)) + '%'\n    txt_x = p.get_x() \n    txt_y = p.get_height()\n    g.ax.text(txt_x,txt_y,txt)","b47557dd":"reviews_per_game = pd.value_counts(reviews_ds.app_name).to_frame('count').reset_index() # game and number of reviews\n#games_count[games_count['count'] < 20] # 2511 games with less than 20 reviews\n\nselected_games = reviews_per_game[reviews_per_game['count'] > 50] # select only games with more than 50 reviews\nselected_games = selected_games['index'].values\ngames = reviews_ds['app_name'].unique() # list of unique games\n\nprint('selected', len(selected_games), 'out of', len(games))","9362237a":"game_score = pd.concat([reviews_ds.pop(x) for x in ['app_name', 'review_score']], axis=1)\ngame_score = game_score[game_score['app_name'].isin(selected_games)].reset_index(drop=True) # dataframe of selected app_name and review_score","5b4fe580":"# calculate percentage of positive reviews\nx, y = 'app_name', 'review_score'\ndf1 = game_score.groupby(x)[y].value_counts(normalize=True)\ndf1 = df1.mul(100)\ndf1 = df1.rename('percent').reset_index()\n\ngame_score = df1.drop(df1[df1['review_score'] == -1].index) # remove rows with percentage of negative reviews\ngame_score = game_score.drop('review_score', 1)\n\ngame_score.sort_values('percent').reset_index(drop=True) # sort by percent of positive reviews","d194a73b":"best_games = game_score[game_score['percent'] == 100] \n# 202 games have 100% positive reviews with 1 or more reviews\n# 87 games have 100% positive reviews with 20 or more reviews\n# 20 games have 100% positive reviews with 50 or more reviews <-\n\nt = original_ds[original_ds['app_name'].isin(best_games['app_name'].values)]# extract all reviews of the best games\nsns.catplot(y='app_name', kind='count', data=t, height=8, aspect=2, order=t['app_name'].value_counts().index).set(xlabel='number of reviews').set(title='Games with 100% positive reviews')\nplt.show()","ad5a5c5e":"worst_games = game_score[game_score['percent'] < 15].sort_values('percent')\nworst_games","2b00276d":"t = original_ds[original_ds['app_name'].isin(worst_games['app_name'].values)]# extract all reviews of the worst games\nsns.catplot(y='app_name', kind='count', palette='rocket', data=t, height=8, aspect=2, order=t['app_name'].value_counts().index).set(title='Games with more than 85% negative reviews').set(xlabel='number of reviews')\nplt.show()","f6f3ff9b":"raw_ds = tf.data.experimental.make_csv_dataset(\n    '..\/input\/steam-reviews\/dataset.csv',\n    select_columns = ['review_text', 'review_score'],\n    label_name = 'review_score',\n    batch_size = 126\n)\nraw_ds","0dc303a9":"def custom_standardization(input_data):\n    s = tf.strings.lower(input_data)\n    s = tf.strings.regex_replace(s, '[%s]' % re.escape(string.punctuation),'')\n    s = tf.strings.regex_replace(s, '\\W+','')\n    s = tf.strings.regex_replace(s, '\\s+','')\n    return s","75f80270":"max_features = 8000\nsequence_length = 126\n\nvectorize_layer = keras.layers.experimental.preprocessing.TextVectorization(\n    standardize=custom_standardization,\n    max_tokens=max_features,\n    output_mode='int',\n    output_sequence_length=sequence_length)\n\ntext = raw_ds.map(lambda x, y: x)\nvectorize_layer.adapt(next(iter(text))['review_text'])","54834255":"train_ds = raw_ds.take(20000) # train using 20 000 batches * 126 per batch = 2.5 M out of 6.4 M reviews\nval_ds = raw_ds.take(22000).skip(20000)","f5c2cfb6":"embedding_dim = 64\n\nmodel = keras.Sequential([\n    vectorize_layer,\n    keras.layers.Embedding(max_features + 1, embedding_dim),\n    keras.layers.Dropout(0.2),\n    keras.layers.GlobalAveragePooling1D(),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(1, activation='tanh')\n])\n\nmodel.summary()","54c58fc9":"model.compile(loss='mse', optimizer='adam', metrics=['accuracy'])\nhistory = model.fit(train_ds, validation_data=val_ds, epochs=1)","acb3be71":"test_ds = raw_ds.take(21300).skip(21000)\nmodel.evaluate(test_ds)","a067e390":"<a id=\"section-4\"><\/a>\n## Train model","eafba207":"<a id=\"subsection-3\"><\/a>\n### Games with 85%+ negative reviews","c5046ee8":"<a id=\"section-1\"><\/a>\n## Exploratory analysis","f2b6b9ca":"<a id=\"subsection-2\"><\/a>\n### Games with 100% positive reviews","c6d62a2f":"### Steam Reviews - Sentiment Analysis\n\n* [Exploratory analysis](#section-1)\n    - [Most reviewed games](#subsection-1)\n    - [Games with 100% positive reviews](#subsection-2)\n    - [Games with 85%+ negative reviews](#subsection-3)\n* [Load dataset with tf.data](#section-2)\n* [Preprocess with TextVectorization](#section-3)\n* [Train model](#section-4)\n* [Evaluate](#section-5)","8b16fb86":"<a id=\"section-5\"><\/a>\n## Evaluate","4b578c5b":"<a id=\"section-3\"><\/a>\n## Preprocess with TextVectorization","fbe3d82d":"<a id=\"subsection-1\"><\/a>\n### Most reviewed games","cc0fd3e6":"<a id=\"section-2\"><\/a>\n## Load dataset with tf.data"}}