{"cell_type":{"5e46d87f":"code","9d6a1e7a":"code","19c95b33":"code","bf244a82":"code","7353ea50":"code","da87d918":"code","5ed64d24":"code","3a3709f7":"code","a25e5529":"code","5456c262":"code","c8cab7e0":"code","9265ebda":"code","dcdf4592":"code","58bb63c4":"code","719df518":"code","aa755815":"code","538fb469":"markdown","b8de90b4":"markdown","fd400baa":"markdown","649c0619":"markdown","43c81789":"markdown","22ab6596":"markdown","d1de30a3":"markdown","4c9ac50f":"markdown","ed270a3d":"markdown","0dd1d3f9":"markdown","2d2eca61":"markdown","69fa361e":"markdown"},"source":{"5e46d87f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport plotly.graph_objects as go\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9d6a1e7a":"df = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\ndf.drop(['show_id','description'], 'columns',inplace=True)","19c95b33":"df['date_added'] = pd.to_datetime(df['date_added'])\ndf['month'] = df['date_added'].dt.month\ndf['Original year'] = df['release_year']\ndf['release_year'] = df['date_added'].dt.year\n\ndf['season'] = df.apply(lambda x: x['duration'].split()[0]  if \"Season\" in x['duration'] else \"\", axis =1)\ndf['duration'] = df.apply(lambda x: x['duration'].split()[0]  if not \"Season\" in x['duration'] else \"\", axis =1)","bf244a82":"df.head()","7353ea50":"group = df['type'].value_counts().reset_index()\nlabels = group['index']\nsizes = group['type']\nexplode = (0.0,0.1)\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n","da87d918":"plt.figure(figsize=(12, 3))\n#Convert groupby into Dataframe\ngroup = pd.DataFrame({'count' : df.groupby( [ \"type\", \"release_year\"] ).size()}).reset_index()\n#Calcute percent\ngroup['percent'] = group['count'].apply(lambda x: (x*100)\/sum(group['count']))\n\n#plot for movie\nplt.plot(group[group['type']=='Movie']['release_year'],group[group['type']=='Movie']['count'],linestyle='-', marker='o', color='green', label=\"Movie\")\n\n#plot for TV Show\nplt.plot(group[group['type']=='TV Show']['release_year'],group[group['type']=='TV Show']['count'], linestyle='-', marker='o',color='blue', label = \"TV Show\")\nplt.title('Content added over the year')\nplt.legend()","5ed64d24":"plt.figure(figsize=(12, 3))\n#Convert groupby into Dataframe\ngroup = pd.DataFrame({'count' : df.groupby( [ \"type\", \"Original year\"] ).size()}).reset_index()\n#Calcute percent\ngroup['percent'] = group['count'].apply(lambda x: (x*100)\/sum(group['count']))\n\n#plot for movie\nplt.bar(group[group['type']=='Movie']['Original year'],group[group['type']=='Movie']['count'], label=\"Movie\")\n\n#plot for TV Show\nplt.bar(group[group['type']=='TV Show']['Original year'],group[group['type']=='TV Show']['count'], label = \"TV Show\")\nplt.title('Content added over the year')\nplt.legend()","3a3709f7":"group  = pd.DataFrame({'count' : df.groupby( [ \"type\", \"month\"] ).size()}).reset_index()\nplt.bar(group[group['type']=='Movie']['month'],group[group['type']=='Movie']['count'] , color = 'blue', edgecolor = 'black', label='Movie')\n \n# Create cyan bars\nplt.bar(group[group['type']=='TV Show']['month'],group[group['type']=='TV Show']['count'], color = 'cyan', edgecolor = 'black', label='TV Show')\nplt.legend()\nplt.title(\"In which month content added most\")\nplt.show()","a25e5529":"df.sort_values(by=['Original year'])[df['type']=='Movie'].reset_index().loc[:15,['title', 'Original year']]","5456c262":"df.sort_values(by=['Original year'])[df['type']=='TV Show'].reset_index().loc[:10, ['title', 'Original year']]","c8cab7e0":"df['Country'] = df['country'].dropna().str.split(',')\ndf['Country'] = df['Country'].apply(lambda x: next(iter(x)) if isinstance(x, list) else x)\ndata = pd.DataFrame({'Count': df.groupby('Country')['type'].count()}).reset_index()\n\ncolors = [\"#f7fbff\", \"#ebf3fb\", \"#deebf7\", \"#d2e3f3\", \"#c6dbef\", \"#b3d2e9\", \"#9ecae1\",\n    \"#85bcdb\", \"#6baed6\", \"#57a0ce\", \"#4292c6\", \"#3082be\", \"#2171b5\", \"#1361a9\",\n    \"#08519c\", \"#0b4083\", \"#08306b\"\n]\n\n\nfig = go.Figure(data=go.Choropleth(\n    locationmode = \"country names\",\n    locations = data['Country'],\n    z = data['Count'],\n    colorscale = colors,\n    autocolorscale=False,\n    reversescale=False,\n    colorbar_title = 'Countries with most content',\n))\n\nfig.update_layout(\n    title_text='Countries with most content',\n    geo=dict(\n        showcoastlines=True,\n    ),\n)\nfig.show()","9265ebda":"import seaborn as sns\nsns.distplot(df[df['type']=='Movie']['duration'], hist=True, kde=True, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})","dcdf4592":"group  = pd.DataFrame({'Count' : df.groupby( [ \"type\", \"season\"] ).size()}).reset_index()\n# Create cyan bars\nplt.bar(group[group['type']=='TV Show']['season'],group[group['type']=='TV Show']['Count'], color = 'cyan', edgecolor = 'black', label='TV Show',)\nplt.legend()\nplt.title(\"TV Show with most seasons\")\nplt.show()","58bb63c4":"plt.figure(figsize=(9, 4))\ngroup  = pd.DataFrame({'count' : df.groupby( [ \"type\", \"rating\"] ).size()}).reset_index()\nplt.bar(group[group['type']=='Movie']['rating'],group[group['type']=='Movie']['count'] , color = 'blue', edgecolor = 'black', label='Movie')\n \n# Create cyan bars\nplt.bar(group[group['type']=='TV Show']['rating'],group[group['type']=='TV Show']['count'], color = 'cyan', edgecolor = 'black', label='TV Show')\nplt.legend()\nplt.title(\"Content Rating\")\nplt.show()","719df518":"from collections import Counter\ncol = \"listed_in\"\ncategories = \", \".join(df['listed_in']).split(\", \")\ncounter_list = Counter(categories).most_common(50)\nlabels = [_[0] for _ in counter_list][::-1]\nvalues = [_[1] for _ in counter_list][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"TV Shows\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"Listed with\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","aa755815":"categories = \", \".join(df[df['country'] == 'India']['cast'].dropna()).split(',')\nCast = Counter(categories).most_common(20)\ncounterCast = [_[0] for _ in Cast ]\ncounterValue = [_[1] for _ in Cast ]\nplt.bar( counterValue, counterCast, color = 'cyan', edgecolor = 'black', label='TV Show')\nplt.title(\"India\")\n","538fb469":"* 2\/3rd of the content on netflix is movies and remaining 33% of them are TV Shows.","b8de90b4":"* The growth in number of movies on netflix is much higher than that od TV shows. About 1300 new movies were added in both 2018 and 2019. The growth in content started from 2013. Netflix kept on adding different movies and tv shows on its platform over the years. This content was of different variety - content from different countries, content which was released over the years.\n\n## 3. Original Release Year of the movies","fd400baa":"# 9. Top Actors on Netflix with Most Movies","649c0619":"# 4. Content from different Countries","43c81789":"# 5. Distribution of Movie Duration","22ab6596":"# 6. TV Shows with many seasons","d1de30a3":"# 8. What are the top Categories ?","4c9ac50f":"# **1. Content Type on Netflix**","ed270a3d":"# 7. The ratings of the content ?","0dd1d3f9":"Some of the netflix oldest movies","2d2eca61":"# **2. Growth in content over the years**","69fa361e":"Some of the netflix oldest TV Show"}}