{"cell_type":{"fdcdf6df":"code","c675595f":"code","c9b0eb5f":"code","69361eb8":"code","8fe81390":"code","ff986006":"code","4a4a7f53":"code","bb0eb477":"code","30bce42d":"code","18315fba":"markdown"},"source":{"fdcdf6df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c675595f":"train_df = pd.read_csv('\/kaggle\/input\/cassava-leaf-disease-classification\/train.csv')","c9b0eb5f":"tdf_counts = list(train_df.groupby('label').count()['image_id'])","69361eb8":"max_count = max(tdf_counts)\nmax_count","8fe81390":"tdf_copy = [(int(max_count\/x), max_count-x*int(max_count\/x)) for x in tdf_counts]","ff986006":"for i in range(len(tdf_counts)):\n    mul, rem = tdf_copy[i]\n    new_df = train_df[train_df['label']==i]\n    for j in range(mul-1):\n        train_df=pd.concat([train_df,new_df]).reset_index(drop=True)\n    new_df = new_df.sample(n=rem)\n    train_df=pd.concat([train_df,new_df]).reset_index(drop=True)","4a4a7f53":"len(train_df)","bb0eb477":"list(train_df.groupby('label').count()['image_id'])","30bce42d":"# Saving the upsampled data set to csv\ntrain_df.to_csv('train_up.csv', index=None)","18315fba":"# Upsampling the data to balance the dataset\n### Like Jeremy has mentioned in fastai and otherwise also agreed that the simplest way of just duplicating the minority classes as an upsampling strategy works pretty well. On the same lines I am sharing my eda and the upsampled code data as below. "}}