{"cell_type":{"38240058":"code","09c9973f":"code","dcdd9cc7":"code","b129ec96":"code","df58cb2c":"code","74958862":"code","0974a1c2":"code","12754210":"code","14e36bd0":"code","752987ba":"code","8aee7363":"code","09b21cbb":"code","5c5a68be":"code","e122d2a6":"code","e080f38c":"code","d12ef781":"code","abbe54d3":"code","450bee77":"code","702045a6":"code","236fe1d8":"code","99b67bc5":"code","51c5acaf":"markdown"},"source":{"38240058":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","09c9973f":"train = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_train.csv')\ntest = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_test.csv')\nprint(train.shape)\nprint(test.shape)\ntrain.head()","dcdd9cc7":"from IPython.display import Image\nImage(\"..\/input\/sign-language-mnist\/amer_sign3.png\")","b129ec96":"test.tail()","df58cb2c":"Y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"], axis = 1)","74958862":"plt.figure(figsize = (15,7))\ng = sns.countplot(Y_train, palette =\"icefire\")\nplt.title(\"Number of sign classes\")\nY_train.value_counts()","0974a1c2":"# Normalization\n\nX_train = (X_train - np.min(X_train))\/(np.max(X_train)-np.min(X_train))\ntest = ( test - np.max(test))\/(np.max(test)-np.min(test))\nprint(\"X_train Shape : \", X_train.shape)\nprint(\"test shape : \", test.shape)","12754210":"test = test.drop([\"label\"], axis = 1)","14e36bd0":"test.shape","752987ba":"X_train.head()","8aee7363":"# Reshape\n\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"X_train shape : \", X_train.shape)\nprint(\"test shape : \",test.shape)","09b21cbb":"Y_train.value_counts()","5c5a68be":"Y_train = Y_train.values.reshape(-1,1)\nY_train.shape","e122d2a6":"# Label Encoding\nfrom keras.utils.np_utils import to_categorical\nY_train= to_categorical(Y_train)","e080f38c":"from numpy import argmax\ninverted = argmax(Y_train[4])\nprint(inverted)","d12ef781":"from sklearn.model_selection import train_test_split\nX_train,X_val,Y_train,Y_val = train_test_split(X_train,Y_train, random_state = 42, test_size = 0.1)\n\n\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","abbe54d3":"# Create CNN \nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5), padding = 'Same', activation = 'relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 16, kernel_size=(3,3), padding = 'Same', activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides = (2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(25, activation = \"softmax\"))\n\nmodel.summary()","450bee77":"# Optimizer\n\noptimizer = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999)\n\n# Model Compile\n\nmodel.compile(optimizer = optimizer, loss =\"categorical_crossentropy\", metrics =[\"accuracy\"])\n\nepochs = 50\nbatch_size = 255\n\n# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5, # Randomly zoom image 5%\n        width_shift_range=0.5,  # randomly shift images horizontally 5%\n        height_shift_range=0.5,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","702045a6":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","236fe1d8":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","99b67bc5":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(25, 25))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Reds\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")A\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","51c5acaf":"#### OPTIONAL  - Inception \nimport keras \nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D, SeparableConv2D\nfrom keras.regularizers import l2\nfrom keras.optimizers import SGD, RMSprop\nfrom keras.utils import to_categorical\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils.vis_utils import plot_model\nfrom keras.layers import Input, GlobalAveragePooling2D\nfrom keras import models\nfrom keras.models import Model\n\ninput_img = Input(shape=(28, 28, 1))\n\n### 1st layer\nlayer_1 = Conv2D(10, (1,1), padding='same', activation='relu')(input_img)\nlayer_1 = Conv2D(10, (3,3), padding='same', activation='relu')(layer_1)\n\nlayer_2 = Conv2D(10, (1,1), padding='same', activation='relu')(input_img)\nlayer_2 = Conv2D(10, (5,5), padding='same', activation='relu')(layer_2)\n\nlayer_3 = MaxPooling2D((3,3), strides=(1,1), padding='same')(input_img)\nlayer_3 = Conv2D(10, (1,1), padding='same', activation='relu')(layer_3)\n\nmid_1 = tensorflow.keras.layers.concatenate([layer_1, layer_2, layer_3], axis = 3)\n\nflat_1 = Flatten()(mid_1)\n\ndense_1 = Dense(1200, activation='relu')(flat_1)\ndense_2 = Dense(600, activation='relu')(dense_1)\ndense_3 = Dense(150, activation='relu')(dense_2)\noutput = Dense(nClasses, activation='softmax')(dense_3)\n\nmodel = Model([input_img], output)\n\n\nplot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"}}