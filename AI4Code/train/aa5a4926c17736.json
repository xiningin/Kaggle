{"cell_type":{"78a40121":"code","72ebd48c":"code","0a010fe0":"code","56b29107":"code","ffd9bd6c":"code","2d53ec8c":"code","6303b1b6":"code","17339125":"code","1bcbaec9":"markdown","397bf878":"markdown","912906f1":"markdown","34721fa5":"markdown","236a0d73":"markdown","913b01ad":"markdown","cb163b29":"markdown","2cef1f50":"markdown"},"source":{"78a40121":"# This fetches the data displayed on the Google Safe Browsing Transparency Report and outputs it as a CSV\n# that can be imported into a Kaggle dataset.\n# The original visualization can be found here: https:\/\/transparencyreport.google.com\/safe-browsing\/overview\n# Website can be scanned for malware here: https:\/\/secure.wphackedhelp.com\/\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom datetime import datetime, date\nRUN_TIME = int(datetime.utcnow().timestamp() * 1000)\nSTART_TIME = datetime.fromtimestamp(1148194800000 \/\/ 1000)\n\n# Here are the URL requests I found on the page: \nUNSAFE_URL = f\"https:\/\/transparencyreport.google.com\/transparencyreport\/api\/v3\/safebrowsing\/sites?dataset=0&series=malwareDetected,phishingDetected&start=1148194800000&end={RUN_TIME}\"\nNUMBER_URL = f\"https:\/\/transparencyreport.google.com\/transparencyreport\/api\/v3\/safebrowsing\/sites?dataset=1&series=malware,phishing&start=1148194800000&end={RUN_TIME}\"\nSITES_URL = f\"https:\/\/transparencyreport.google.com\/transparencyreport\/api\/v3\/safebrowsing\/sites?start=1148194800000&series=attack,compromised&end={RUN_TIME}\"\nBROWSER_WARNINGS_URL = f\"https:\/\/transparencyreport.google.com\/transparencyreport\/api\/v3\/safebrowsing\/warnings?dataset=users&start=1148194800000&end={RUN_TIME}&series=users\"\nSEARCH_WARNINGS_URL = f\"https:\/\/transparencyreport.google.com\/transparencyreport\/api\/v3\/safebrowsing\/warnings?dataset=search&start=1148194800000&end={RUN_TIME}&series=search\"\nRESPONSE_TIME_URL = f\"https:\/\/transparencyreport.google.com\/transparencyreport\/api\/v3\/safebrowsing\/notify?dataset=1&start=1148194800000&end={RUN_TIME}&series=response\"\nREINFECTION_URL = f\"https:\/\/transparencyreport.google.com\/transparencyreport\/api\/v3\/safebrowsing\/notify?dataset=0&start=1148194800000&end={RUN_TIME}&series=reinfect\"\n\nCOLUMN_NAMES = [\n    \"WeekOf\",\n    \"Malware sites detected\",\n    \"Phishing sites detected\",\n    \"Malware sites number\",\n    \"Phishing sites number\",\n    \"Attack sites\",\n    \"Compromised sites\",\n    \"Browser warnings\",\n    \"Search warnings\",\n    \"Webmaster response time\",\n    \"Reinfection rate\"\n    ]\n\ndef load_dataframe():\n    dates = pd.date_range(start=START_TIME, end=datetime.fromtimestamp(RUN_TIME \/\/ 1000), freq='W', normalize=True)\n    df = pd.DataFrame(columns=COLUMN_NAMES)\n    df[\"WeekOf\"] = dates\n    df = df.set_index(\"WeekOf\")\n    return df\n    \ndf = load_dataframe()\n\nimport requests\nimport json\ndef fetch_as_json(url):\n    r = requests.get(url)\n    c = r.content\n    c = c[5:]\n    j = json.loads(c)\n    return j[0][1]\n\ndef malware_phishing_detected(df):\n    pts = fetch_as_json(UNSAFE_URL)\n    for pt in pts:\n        date = pd.to_datetime(pt[0], unit='ms').normalize()\n        malware = pt[1][0]\n        phishing = pt[1][1]\n        malware = malware[0] if malware else np.NaN\n        phishing = phishing[0] if phishing else np.NaN\n        df[COLUMN_NAMES[1]][date] = malware\n        df[COLUMN_NAMES[2]][date] = phishing\n    return df\n\ndef malware_phishing_number(df):\n    pts = fetch_as_json(NUMBER_URL)\n    for pt in pts:\n        date = pd.to_datetime(pt[0], unit='ms').normalize()\n        malware = pt[1][0]\n        phishing = pt[1][1]\n        malware = malware[0] if malware else np.NaN\n        phishing = phishing[0] if phishing else np.NaN\n        df[COLUMN_NAMES[3]][date] = malware\n        df[COLUMN_NAMES[4]][date] = phishing\n    return df\n        \ndef site_count(df):\n    pts = fetch_as_json(SITES_URL)\n    for pt in pts:\n        date = pd.to_datetime(pt[0], unit='ms').normalize()\n        attack = pt[1][0]\n        comped = pt[1][1]\n        attack = attack[0] if attack else np.NaN\n        comped = comped[0] if comped else np.NaN\n        df[COLUMN_NAMES[5]][date] = attack\n        df[COLUMN_NAMES[6]][date] = comped\n    return df\n    \ndef browser_warnings(df):\n    pts = fetch_as_json(BROWSER_WARNINGS_URL)\n    for pt in pts:\n        date = pd.to_datetime(pt[0], unit='ms').normalize()\n        value = pt[1][0]\n        value = value[0] if value else np.NaN\n        df[COLUMN_NAMES[7]][date] = value\n    return df\n    \ndef search_warnings(df):\n    pts = fetch_as_json(SEARCH_WARNINGS_URL)\n    for pt in pts:\n        date = pd.to_datetime(pt[0], unit='ms').normalize()\n        value = pt[1][0]\n        value = value[0] if value else np.NaN\n        df[COLUMN_NAMES[8]][date] = value\n    return df\n    \ndef response_time(df):\n    pts = fetch_as_json(RESPONSE_TIME_URL)\n    for pt in pts:\n        date = pd.to_datetime(pt[0], unit='ms').normalize()\n        value = pt[1][0]\n        value = value[0] if value else np.NaN\n        df[COLUMN_NAMES[9]][date] = value\n    return df\n    \ndef reinfection_rate(df):\n    pts = fetch_as_json(REINFECTION_URL)\n    for pt in pts:\n        date = pd.to_datetime(pt[0], unit='ms').normalize()\n        value = pt[1][0]\n        # Multiply by 100 and cast to int to save space on import.\n        value = int(value[1] * 100) if value else np.NaN\n        df[COLUMN_NAMES[10]][date] = value\n    return df\n\ndf = malware_phishing_detected(df)\ndf = malware_phishing_number(df)\ndf = site_count(df)\ndf = browser_warnings(df)\ndf = search_warnings(df)\ndf = response_time(df)\ndf = reinfection_rate(df)\ndf.to_csv(\"data.csv\", header=True, index=True, index_label=\"WeekOf\")\n\ndf.tail(3)","72ebd48c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Let's make this notebook reproducible \nnp.random.seed(42)\n\nimport random\nrandom.seed(42)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Make the default figures a bit bigger\nplt.rcParams['figure.figsize'] = (7,4.5) \nplt.rcParams[\"figure.dpi\"] = 140 \n\nsns.set(style=\"ticks\")\nsns.set_context(\"poster\", font_scale = .7, rc={\"grid.linewidth\": 5})\n\ngreek_salad = ['#D0D3C5', '#56B1BF', '#08708A', '#D73A31', '#032B2F']\nsns.set_palette(greek_salad)\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nfrom plotly.graph_objs import *\nimport plotly.graph_objs as go","0a010fe0":"# Unsafe websites detected per week\ntrace0 = go.Scatter(\n    x = df.index,\n    y = df['Malware sites detected'],\n    name = 'Malware sites',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[2]),\n        width = 2),\n    connectgaps=True\n)\ntrace1 = go.Scatter(\n    x = df.index,\n    y = df['Phishing sites detected'],\n    name = 'Phishing sites',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[3]),\n        width = 2),\n    connectgaps=True\n)\n\ndata = [trace0, trace1]\n\nlayout = dict(\n    title = \"Unsafe websites detected per week\",\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=3,\n                     label='3m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=12,\n                     label='1y',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=36,\n                     label='3y',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = False\n        ),\n        type='date',\n        showgrid=False\n    ),\n    yaxis=dict(\n        showgrid=False\n    ),\n    legend=dict(\n        y=0.5,\n        traceorder='reversed',\n        font=dict(\n            size=16\n        )\n    )\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='basic-line')","56b29107":"# Websites deemed dangerous by Safe Browsing\ntrace0 = go.Scatter(\n    x = df.index,\n    y = df['Malware sites number'],\n    name = 'Malware sites',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[2]),\n        width = 2),\n    connectgaps=True\n)\ntrace1 = go.Scatter(\n    x = df.index,\n    y = df['Phishing sites number'],\n    name = 'Phishing sites',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[3]),\n        width = 2),\n    connectgaps=True\n)\n\ndata = [trace0, trace1]\n\nlayout = dict(\n    title = \"Websites deemed dangerous by Safe Browsing\",\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=3,\n                     label='3m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=12,\n                     label='1y',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=36,\n                     label='3y',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = False\n        ),\n        type='date',\n        showgrid=False\n    ),\n    yaxis=dict(\n        showgrid=False\n    ),\n    legend=dict(\n        y=0.5,\n        traceorder='reversed',\n        font=dict(\n            size=16\n        )\n    )\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='basic-line')","ffd9bd6c":"# Websites deemed dangerous by Safe Browsing\ntrace0 = go.Scatter(\n    x = df.index,\n    y = df['Attack sites'],\n    name = 'Attack sites',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[2]),\n        width = 2),\n    connectgaps=True,\n    yaxis='y2'\n)\ntrace1 = go.Scatter(\n    x = df.index,\n    y = df['Compromised sites'],\n    name = 'Compromised sites',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[3]),\n        width = 2),\n    connectgaps=True\n)\n\ndata = [trace0, trace1]\n\nlayout = dict(\n    title = \"Sites hosting malware detected per week\",\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=3,\n                     label='3m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=12,\n                     label='1y',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=36,\n                     label='3y',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = False\n        ),\n        type='date',\n        showgrid=False\n    ),\n    yaxis=dict(\n        title='Compromised sites',\n        titlefont=dict(\n            color=greek_salad[3],\n            size=16\n        ),\n        tickfont=dict(\n            color=greek_salad[3]\n        ),\n        showgrid=False\n    ),\n    yaxis2=dict(\n        title='Attack sites',\n        titlefont=dict(\n            color=greek_salad[2],\n            size=16\n        ),\n        tickfont=dict(\n            color=greek_salad[2]\n        ),\n        overlaying='y',\n        side='right',\n        showgrid=False\n    ),\n    showlegend=False\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='basic-line')","2d53ec8c":"# Websites deemed dangerous by Safe Browsing\ntrace0 = go.Scatter(\n    x = df.index,\n    y = df['Search warnings'],\n    name = 'Search warnings',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[2]),\n        width = 2),\n    connectgaps=True,\n    yaxis='y2'\n)\ntrace1 = go.Scatter(\n    x = df.index,\n    y = df['Browser warnings'],\n    name = 'Browser warnings',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[3]),\n        width = 2),\n    connectgaps=True\n)\n\ndata = [trace0, trace1]\n\nlayout = dict(\n    title = \"Warnings displayed to users\",\n    xaxis=dict(\n        range = ['2011-01-01',df.index.max()],\n        rangeselector=dict(\n            buttons=list([\n                dict(count=3,\n                     label='3m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=12,\n                     label='1y',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=36,\n                     label='3y',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = False\n        ),\n        type='date',\n        showgrid=False\n    ),\n    yaxis=dict(\n        title='Browser warnings',\n        titlefont=dict(\n            color=greek_salad[3],\n            size=16\n        ),\n        tickfont=dict(\n            color=greek_salad[3]\n        ),\n        showgrid=False\n    ),\n    yaxis2=dict(\n        title='Search warnings',\n        titlefont=dict(\n            color=greek_salad[2],\n            size=16\n        ),\n        tickfont=dict(\n            color=greek_salad[2]\n        ),\n        overlaying='y',\n        side='right',\n        showgrid=False\n    ),\n    showlegend=False\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='basic-line')","6303b1b6":"# Websites deemed dangerous by Safe Browsing\ntrace0 = go.Scatter(\n    x = df.index,\n    y = df['Webmaster response time'],\n    name = 'days',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[2]),\n        width = 2),\n    connectgaps=True,\n)\n\ndata = [trace0]\n\nlayout = dict(\n    title = \"Webmaster response time\",\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=3,\n                     label='3m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=12,\n                     label='1y',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=36,\n                     label='3y',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = False\n        ),\n        type='date',\n        showgrid=False\n    ),\n    yaxis=dict(\n        title='Response time in days',\n        titlefont=dict(\n            color=greek_salad[2],\n            size=16\n        ),\n        tickfont=dict(\n            color=greek_salad[2]\n        ),\n        showgrid=False\n    ),\n    showlegend=False\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='basic-line')","17339125":"# Websites deemed dangerous by Safe Browsing\ntrace0 = go.Scatter(\n    x = df.index,\n    y = df['Reinfection rate'],\n    name = 'days',\n    line = dict(\n        shape='spline',\n        color = (greek_salad[3]),\n        width = 2),\n    connectgaps=True,\n)\n\ndata = [trace0]\n\nlayout = dict(\n    title = \"Reinfection rate\",\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=3,\n                     label='3m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=12,\n                     label='1y',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=36,\n                     label='3y',\n                     step='month',\n                     stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = False\n        ),\n        type='date',\n        showgrid=False\n    ),\n    yaxis=dict(\n        title='Reinfection rate in percentage',\n        titlefont=dict(\n            color=greek_salad[3],\n            size=16\n        ),\n        tickfont=dict(\n            color=greek_salad[3]\n        ),\n        showgrid=False\n    ),\n    showlegend=False\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='basic-line')","1bcbaec9":"## Webmaster response time \nHow quickly webmasters clean up their sites after receiving notifications that their sites have been compromised.","397bf878":"# 1. Get Data\n[Source](https:\/\/www.kaggle.com\/robroseknows\/fetch-google-safe-browsing-transparency-report)","912906f1":"## Unsafe websites detected per week","34721fa5":"## Sites hosting malware detected per week\n\n**Attack sites** <br> These are websites that hackers have set up to *intentionally* host and distribute malicious software. <br> These sites directly exploit a browser or contain harmful software that often exhibit malicious behaviors. \n\n**Compromised sites** <br> These are legitimate websites that have been *hacked* to include content from, <br> or to direct users to, sites that may exploit their browsers. \n\n**Hacked sites** <br> Is your site gacked or infected with malware. Find [steps to fix hacked wordpress site](https:\/\/secure.wphackedhelp.com\/fixmysite.html) here<br>\n","236a0d73":"## Websites deemed dangerous by Safe Browsing","913b01ad":"## Warning displayed to users\n\nThese warnings are designed to prevent users from visiting harmful sites and help them stay safe online.","cb163b29":"## Reinfection rate","2cef1f50":"# Insights\n\n**Malware** <br> These websites contain code that installs *malicious software* onto visitors\u2019 computers, <br> either when a user thinks they are downloading legitimate software or without a user\u2019s knowledge. [Guide to remove malware from wordpress](https:\/\/secure.wphackedhelp.com\/blog\/how-to-remove-malware-from-wordpress-site\/)\n\n**Phishing** <br> These websites *pretend to be legitimate* so that they can trick <br> users into typing in their usernames and passwords or sharing other private information."}}