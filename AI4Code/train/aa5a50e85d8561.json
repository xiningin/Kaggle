{"cell_type":{"462295fe":"code","ebf65f58":"code","04e33eba":"code","59482e2f":"code","d3251366":"code","d3960025":"code","7cecbab6":"code","bb80cbf3":"code","46691d3a":"markdown","7bf1fe4b":"markdown","6e30a85a":"markdown","fa453ce0":"markdown","11cdca04":"markdown","674c0e69":"markdown","d0fadb80":"markdown","138d03cc":"markdown"},"source":{"462295fe":"from pathlib import Path\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBClassifier\nimport optuna\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.metrics import classification_report, auc, roc_auc_score","ebf65f58":"TRAIN_PATH = \"..\/input\/titanic\/train.csv\"\nTEST_PATH = \"..\/input\/titanic\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/titanic\/gender_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"PassengerId\"\nTARGET = \"Survived\"\nSEED = 2021\nIS_SHUFFLE = True\nTEST_SIZE = 0.25\n\nOPTUNA_N_TRIALS = 500\nOPTUNA_TIMEOUT = 600\nEARLY_STOPPING_ROUNDS = 10\nEVAL_METRICS = 'auc'\n\nTREE_METHOD = 'gpu_hist'\nOBJECTIVE = \"binary:logistic\"","04e33eba":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","59482e2f":"#1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","d3251366":"X = train.drop(columns=[TARGET]).copy()\ny = train[TARGET].copy()\nX_test = test\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=TEST_SIZE, \n                                    stratify=y,shuffle=IS_SHUFFLE, random_state=SEED)","d3960025":"def objective(trial):\n    \"\"\"\n    Objective function to tune XGBoost classifier\n    \"\"\"\n    params = {\n        'tree_method': 'gpu_hist',\n        'objective': 'binary:logistic',\n        'eval_metric': 'auc',\n        'eta': trial.suggest_float('eta', 1e-8, 1., log=True),\n        'gamma': trial.suggest_float('gamma', 1e-8, 1., log=True),\n        'max_depth': trial.suggest_int('max_depth', 2, 9, step=2),\n        'min_child_weight': trial.suggest_int('min_child_weight', 2, 10),\n        'alpha': trial.suggest_float('alpha', 1e-8, 1., log=True),\n        'subsample': trial.suggest_float('subsample', 0.2, 1.),\n        'colsample_bytree': trial.suggest_float('colsample_bytree',0.2, 1.),\n        'use_label_encoder': False,\n    }\n    \n    booster = XGBClassifier(**params)\n    booster.fit(X_train, y_train, eval_metric=EVAL_METRICS, eval_set=[(X_val, y_val)], \n                verbose=0, early_stopping_rounds=EARLY_STOPPING_ROUNDS)\n    preds = booster.predict_proba(X_val)\n    preds = preds[:, 1]\n\n    return roc_auc_score(y_val, preds)    \n\nstudy = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=OPTUNA_N_TRIALS, timeout=OPTUNA_TIMEOUT)\n\nprint(study.best_trial)\nprint(study.best_params)","7cecbab6":"xgb_model = XGBClassifier(**study.best_params, use_label_encoder=False, tree_method=TREE_METHOD, objective=OBJECTIVE, eval_metric=EVAL_METRICS)\nxgb_model.fit(X_train, y_train)","bb80cbf3":"submission = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsubmission[TARGET] =xgb_model.predict(X_test)\nsubmission.to_csv(SUBMISSION_PATH,index=False)\nsubmission.head()","46691d3a":"# import","7bf1fe4b":"# build best model","6e30a85a":"# predict & submit","fa453ce0":"# load data","11cdca04":"# split data","674c0e69":"# variable","d0fadb80":"# search best model","138d03cc":"# preprocess data"}}