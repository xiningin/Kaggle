{"cell_type":{"1eb07417":"code","a85da2d1":"code","694fadba":"code","d1c72e5f":"code","c55f1fb5":"code","0247f2cc":"code","61ef3c1e":"code","feed1d7d":"code","a8fabaa0":"code","89c87880":"code","2ea6f984":"code","82ea61dc":"code","a4120fa5":"code","fbdf11dc":"code","dcf3efcd":"code","ee42f9d5":"code","2b506600":"code","2ca5fc75":"code","89e22e66":"code","ef10390f":"code","a02c8d80":"code","fce685f5":"code","baadd28a":"code","d1ad5596":"code","91108395":"code","c165947b":"markdown","d6912530":"markdown"},"source":{"1eb07417":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a85da2d1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","694fadba":"train = pd.read_csv('\/kaggle\/input\/berlin-airbnb-prices\/berlin_airbnb_train.csv')\nkek = pd.read_csv('\/kaggle\/input\/berlin-airbnb-prices\/berlin_airbnb_test.csv')\nsam = pd.read_csv('\/kaggle\/input\/berlin-airbnb-prices\/submit.csv')","d1c72e5f":"train.info()","c55f1fb5":"np.unique(train.room_type)","0247f2cc":"room_dict = {'Entire home\/apt': 3, 'Private room': 2, 'Shared room': 1}\ntrain.room_type = train.room_type.replace(to_replace=room_dict)\nkek.room_type = kek.room_type.replace(to_replace=room_dict)","61ef3c1e":"np.unique(train.bed_type)","feed1d7d":"bed_dict = {'Real Bed': 5, 'Pull-out Sofa': 4, 'Couch': 3, 'Airbed': 2, 'Futon': 1}\ntrain.bed_type = train.bed_type.replace(to_replace=bed_dict)\nkek.bed_type = kek.bed_type.replace(to_replace=bed_dict)","a8fabaa0":"np.unique(train.cancellation_policy)","89c87880":"can_dict = {'flexible': 5, 'moderate': 4, 'strict_14_with_grace_period': 3, 'super_strict_30': 2, 'super_strict_60': 1}\ntrain.cancellation_policy = train.cancellation_policy.replace(to_replace=can_dict)\nkek.cancellation_policy = kek.cancellation_policy.replace(to_replace=can_dict)","2ea6f984":"tar = 'price'","82ea61dc":"feature_columns = ['accommodates', 'bathrooms', 'bedrooms', 'price', 'cleaning_fee', 'security_deposit', 'extra_people', 'guests_included', 'distance', 'size', 'room_type', 'bed_type', 'minimum_nights', 'cancellation_policy', 'Laptop_friendly_workspace', 'TV', 'Family_kid_friendly', 'Host_greets_you', 'Smoking_allowed']","a4120fa5":"train = train[feature_columns]\ntrain.head()","fbdf11dc":"train = train.drop('bathrooms', axis=1)\ntrain = train.drop('security_deposit', axis=1)\ntrain = train.drop('extra_people', axis=1)\ntrain = train.drop('distance', axis=1)\ntrain = train.drop('bed_type', axis=1)\ntrain = train.drop('minimum_nights', axis=1)\ntrain = train.drop('cancellation_policy', axis=1)\ntrain = train.drop('Laptop_friendly_workspace', axis=1)\ntrain = train.drop('Family_kid_friendly', axis=1)\ntrain = train.drop('Host_greets_you', axis=1)\ntrain = train.drop('Smoking_allowed', axis=1)\ntrain = train.drop('TV', axis=1)","dcf3efcd":"kek = kek.drop('TV', axis=1)\nkek = kek.drop('bathrooms', axis=1)\nkek = kek.drop('security_deposit', axis=1)\nkek = kek.drop('extra_people', axis=1)\nkek = kek.drop('distance', axis=1)\nkek = kek.drop('bed_type', axis=1)\nkek = kek.drop('minimum_nights', axis=1)\nkek = kek.drop('cancellation_policy', axis=1)\nkek = kek.drop('Laptop_friendly_workspace', axis=1)\nkek = kek.drop('Family_kid_friendly', axis=1)\nkek = kek.drop('Host_greets_you', axis=1)\nkek = kek.drop('Smoking_allowed', axis=1)","ee42f9d5":"train.corr().style.format(\"{:.2}\").background_gradient(cmap='coolwarm', axis=1)","2b506600":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split","2ca5fc75":"Y = train[tar].values\nX = train.drop(tar, axis=1)\nX.shape, Y.shape","89e22e66":"# \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c.\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25)\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u0432\u0435\u0441\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\nmodel = LinearRegression()\n\n# \u041f\u0440\u043e\u0441\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0432\u0435\u0441\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\nmodel.fit(X_train, Y_train)\n\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u0438.\npred_train = model.predict(X_train)\npred_test = model.predict(X_test)","ef10390f":"mean_squared_error(Y_train, pred_train) ** 0.5","a02c8d80":"train = train[train.dtypes[(train.dtypes != object)].index]\nkek = kek[kek.dtypes[(kek.dtypes != object)].index]","fce685f5":"model.fit(train.drop('price', axis=1), train['price'])","baadd28a":"predictions = model.predict(kek)","d1ad5596":"sam.head()","91108395":"sam['price'] = predictions\nsam.to_csv('my_submission.csv', index=False)","c165947b":"\u0422\u043e \u0435\u0441\u0442\u044c, \u043c\u044b \u043e\u0431\u0443\u0447\u0438\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043b\u0438 \u0446\u0435\u043d\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b\u0438 \u044d\u0442\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b.","d6912530":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0432 \u0411\u0435\u0440\u043b\u0438\u043d\u0435\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u0446\u0435\u043d\u0430\u043c\u0438 \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b. \n\n\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n\n\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u043d\u0443 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0443, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043e\u043b\u043b\u0438\u043d\u0435\u0430\u0440\u043d\u043e\u0441\u0442\u0438."}}