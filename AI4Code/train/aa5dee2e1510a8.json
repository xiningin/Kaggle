{"cell_type":{"a56c778b":"code","27cf8390":"code","4921e205":"code","832a15a6":"code","1c3f2a48":"code","d38dfc17":"code","079a70ac":"code","ce688716":"code","308ca9c0":"code","ed566a19":"code","fac7cd87":"markdown","168952f6":"markdown","37758e4b":"markdown","0e43c1d5":"markdown"},"source":{"a56c778b":"from datetime import datetime\nstart_time = datetime.now()\nprint(\"Last run: \", datetime.now())","27cf8390":"import urllib3, json\nimport pandas as pd \nhttp = urllib3.PoolManager() \n\nurl =\"https:\/\/api.nobelprize.org\/2.1\/laureates?offset=0&limit=1500\"\ndftot = pd.DataFrame()\nr = http.request('GET', url)\ndata = json.loads(r.data)\ndftot = dftot.append(pd.DataFrame(data[\"laureates\"]),sort=False)","4921e205":"dftot.info()","832a15a6":"dftot[\"id\"] = dftot[\"id\"].astype(\"int\")\n\ndftot.sort_values(by=['id'], ascending=[True], inplace=True)\n#dftot.tail(10)","1c3f2a48":"listNobel = []\nfor index,row in dftot.iterrows():\n    new_item = dict()\n    new_item['id'] = row['id']\n    try:\n        new_item['name_en'] = row['knownName']['en']\n    except:\n        pass\n    try:\n        new_item['name_se'] = row['knownName']['se']\n    except:\n        pass\n    try:\n        new_item['wikidata'] = row['wikidata']['id']\n    except:\n        pass\n    new_item['link'] = row['links'][0]['href'][0]\n    #print(row['links'][0]['href'])\n    try:\n        new_item['awardYear'] = row['nobelPrizes'][0]['awardYear']\n        new_item['category'] = row['nobelPrizes'][0]['category']['en']\n    except:\n        pass\n    try:\n        new_item['gender'] = row['gender']\n    except:\n        pass\n    listNobel.append(new_item)\nNobelTot = pd.DataFrame(listNobel,\n                  columns=['id','wikidata','name_en','name_se','link','gender','awardYear','category'])\n\nNobelTot.info()","d38dfc17":"!pip install sparqlwrapper\n# https:\/\/rdflib.github.io\/sparqlwrapper\/\n\nimport sys\nfrom SPARQLWrapper import SPARQLWrapper, JSON\n\nendpoint_url = \"https:\/\/query.wikidata.org\/sparql\"\n\nquery = \"\"\"SELECT ?item ?itemLabel ?NobelAPI WHERE {\n  ?item wdt:P8024 ?NobelAPI.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n} order by xsd:integer(?NobelAPI)\"\"\"\n\n\ndef get_sparql_dataframe(endpoint_url, query):\n    \"\"\"\n    Helper function to convert SPARQL results into a Pandas data frame.\n    \"\"\"\n    user_agent = \"salgo60\/%s.%s\" % (sys.version_info[0], sys.version_info[1])\n \n    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)\n    sparql.setQuery(query)\n    sparql.setReturnFormat(JSON)\n    result = sparql.query()\n\n    processed_results = json.load(result.response)\n    cols = processed_results['head']['vars']\n    out = []\n    for row in processed_results['results']['bindings']:\n        item = []\n        for c in cols:\n            item.append(row.get(c, {}).get('value'))\n        out.append(item)\n\n    return pd.DataFrame(out, columns=cols)\n\nWDNobel = get_sparql_dataframe(endpoint_url, query)","079a70ac":"WDNobel[\"NobelAPI\"] = WDNobel[\"NobelAPI\"].astype(\"int\")\nWDNobel.info()","ce688716":"dfmerge = pd.merge(WDNobel, NobelTot,how='outer', left_on=\"NobelAPI\",right_on=\"id\",indicator=True)\ndfmerge['_merge'] = dfmerge['_merge'].str.replace('left_only','WD_only').str.replace('right_only','Nobel_only')\ndfmerge.rename(columns={\"_merge\": \"WD_Nobel\"},inplace = True)    \n#dfmerge[-10:]\ndfmerge[\"WD_Nobel\"].value_counts()","308ca9c0":"Nobelonly = dfmerge[dfmerge[\"WD_Nobel\"]==\"Nobel_only\"].copy() \n\nfrom IPython.display import HTML\nNobelonly[\"Nobel\"] = \"<a href='https:\/\/api.nobelprize.org\/v1\/laureate.json?id=\" + Nobelonly[\"id\"] + \"'>link<\/a>\"\nNobelonly[\"Nobelhtml\"] = \"<a href='https:\/\/www.nobelprize.org\/laureate\/\" + Nobelonly[\"id\"] + \"'>html<\/a>\"\npd.set_option(\"display.max.columns\", None) \nHTML(Nobelonly.to_html(escape=False))","ed566a19":"dfmerge[\"linkjson\"] = \"<a href='https:\/\/api.nobelprize.org\/v1\/laureate.json?id=\" + dfmerge[\"id\"].astype(str) + \"'>json<\/a>\"\ndfmerge[\"linkhtml\"] = \"<a href='https:\/\/www.nobelprize.org\/laureate\/\" + dfmerge[\"id\"].astype(str) + \"'>html<\/a>\"\ndfmerge[\"wd\"] = \"<a href='\" + dfmerge[\"item\"].astype(str) + \"'>Wikidata<\/a>\"\n\npd.set_option(\"display.max.columns\", None) \nHTML(dfmerge[{'wd','name_en','awardYear','category','linkjson','linkhtml'}].tail(15).to_html(escape=False))","fac7cd87":"**Check Wikidata matches**","168952f6":"**Last winners**","37758e4b":"**Compare WD <-> Nobel**","0e43c1d5":"Notebook created as a test of how to use Kaggle....  \n\nThis notebook checks the consistancy between [Wikidata](https:\/\/www.wikidata.org\/wiki\/Wikidata:Main_Page) and the [Nobelprize.org](https:\/\/www.nobelprize.org\/about\/developer-zone-2\/) data regarding Nobelprize winners see also GITHUB [Nobel API.ipynb](https:\/\/github.com\/salgo60\/open-data-examples\/blob\/master\/Nobel%20API.ipynb) \n\n* Swagger version 2.1 \n  * [api.nobelprize.org\/2.1\/laureates](https:\/\/api.nobelprize.org\/2.1\/laureates)\n    * endpoint sorts the output based on Nobel Laureates (persons and\/or organizations). It returns all information about Laureates and Nobel Prizes.\n  * [api.nobelprize.org\/2.1\/NobelPrizes](https:\/\/api.nobelprize.org\/2.1\/NobelPrizes)\n    * endpoint sorts the output based on Nobel Prizes \n"}}