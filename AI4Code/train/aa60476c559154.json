{"cell_type":{"06c1fa09":"code","ed2edceb":"code","44a27577":"code","a63ebd33":"code","effec0d6":"code","e9f4f298":"code","25390a74":"code","644d5d26":"code","84c2ff0b":"code","5f43c6ae":"code","30f8a222":"code","a64da48a":"code","31e9d920":"code","23c48703":"code","81731f97":"code","df46c43e":"code","d0c28334":"code","3574c059":"code","e3aba5c5":"code","cbc60229":"code","4849fa9d":"code","24e9f858":"code","34229e69":"code","8c21e30d":"code","1a9420e5":"code","65b4cce6":"code","f6087ea6":"code","eb16b569":"code","bb67ce87":"markdown","f64ce247":"markdown","c138204b":"markdown"},"source":{"06c1fa09":"import numpy as np \nimport pandas as pd\n\nimport spacy\nfrom spacy.matcher import Matcher\nfrom spacy.tokens import Span\nfrom spacy import displacy","ed2edceb":"nlp=spacy.load(\"en_core_web_sm\")","44a27577":"train=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')","a63ebd33":"train.head()","effec0d6":"from spacy.lang.en.stop_words import STOP_WORDS\nstopwords = list(STOP_WORDS)\nimport string\npunct=string.punctuation\n\ndef text_data_cleaning(sentence):\n    doc = nlp(sentence)\n    \n    tokens = []\n    for token in doc:\n        if token.lemma_ != \"-PRON-\":\n            temp = token.lemma_.lower().strip()\n        else:\n            temp = token.lower_\n        tokens.append(temp)\n    \n    cleaned_tokens = []\n    for token in tokens:\n        if token not in stopwords and token not in punct:\n            cleaned_tokens.append(token)\n    return cleaned_tokens","e9f4f298":"from sklearn.svm import LinearSVC\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix","25390a74":"tfidf = TfidfVectorizer(tokenizer = text_data_cleaning)\nclassifier = LinearSVC()","644d5d26":"x = train['text']\ny = train['target']","84c2ff0b":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)","5f43c6ae":"clf = Pipeline([('tfidf', tfidf), ('clf', classifier)])","30f8a222":"clf.fit(X_train,y_train)","a64da48a":"y_pred = clf.predict(X_test)","31e9d920":"print(classification_report(y_test, y_pred))","23c48703":"y_pred=clf.predict(test['text'])","81731f97":"sub_file=pd.DataFrame({'id':test['id'],'target':y_pred.round().astype(int)})","df46c43e":"# sub_file.to_csv('submission.csv',index=False)","d0c28334":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","3574c059":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n\nimport tokenization","e3aba5c5":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","cbc60229":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=2e-6), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","4849fa9d":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","24e9f858":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","34229e69":"train_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","8c21e30d":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","1a9420e5":"train_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=3,\n    batch_size=16\n)","65b4cce6":"test_pred = model.predict(test_input)","f6087ea6":"submission=pd.DataFrame()\nsubmission['id']=test['id']\nsubmission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","eb16b569":"submission.head()","bb67ce87":">#  Work flow of this notebook\n* Spacy and SVM\n* Bert","f64ce247":"# 2.BERT","c138204b":"# 1. Spacy and SVM"}}