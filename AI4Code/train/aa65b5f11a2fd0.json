{"cell_type":{"e2e029d4":"code","3a1025ed":"code","aa4f17ca":"code","b21db03c":"code","42ddf9dd":"code","f957fddb":"code","0e99000a":"code","060bf875":"code","4f8b4081":"code","f4057e67":"code","96986303":"code","98eaf6dc":"code","8893c858":"code","596bc9f6":"code","e011c5e6":"code","37b163d2":"code","7363f7be":"code","ebe3cdda":"code","03db3755":"code","4420efb7":"code","0a37c255":"code","84d419c5":"code","c77dbe71":"code","8dd31298":"code","2a98c8fc":"code","fee85079":"code","4938ef80":"code","0013e68c":"code","ede7cdd3":"code","91d73137":"code","4a485ebc":"code","2053bd9e":"code","57c6a534":"code","039f28ab":"code","802211ba":"code","07ea52d8":"code","82be2c83":"code","46249f89":"code","af6050c7":"code","6527ac02":"code","5bd3a7cb":"code","d6a8bcf7":"code","3717886e":"code","5ee33a7b":"code","55a40e4d":"code","ea16d291":"code","32fd6b0c":"code","c2e6af30":"code","68dfbd0e":"code","084450b1":"code","10c2dfb2":"code","1ba8111c":"code","ab82f9c7":"code","2f444050":"code","eab7788d":"code","41d4925a":"code","aad0936d":"code","1173baa3":"code","be3fd993":"markdown","40864802":"markdown","1824f0b1":"markdown"},"source":{"e2e029d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3a1025ed":"# Reading data set of \"train.csv\" as `train`.\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\") ","aa4f17ca":"# Have a look \"train\" data set.\ntrain.head(20)","b21db03c":"# (Variation of outputting length of data set)\n# Length of 'traing' data set and # of columns.\ntrain.shape","42ddf9dd":"test.shape","f957fddb":"# Columns vs. Data type\ntrain.info()","0e99000a":"# Basic statistics\ntrain.describe()","060bf875":"# Logalized SalePrice\ntrain[\"SalePrice\"]\ntrain[\"LogalizedSalePrice\"] = np.log(train[\"SalePrice\"])\ntrain[[\"SalePrice\",\"LogalizedSalePrice\"]]","4f8b4081":"# Histogram (SalePrice, LogalizedSalePrice)\nfield_SalePrice = 'SalePrice'\nfield_logSalePrice = 'LogalizedSalePrice'\n\nlabels = [field_SalePrice, field_logSalePrice]\nsalePrice = train[field_SalePrice]\nlogSalePrice = train[field_logSalePrice]\n\nplt.hist(salePrice, range = (0,755000.000000), bins = 50, stacked=False, label=labels)\nplt.title(field_SalePrice)\n#plt.xlabel(field_Parch)\nplt.ylabel(\"count\")\nplt.legend()\nplt.show()","f4057e67":"# Histogram (SalePrice, LogalizedSalePrice)\nfield_SalePrice = 'SalePrice'\nfield_logSalePrice = 'LogalizedSalePrice'\n\nlabels = [field_SalePrice, field_logSalePrice]\nsalePrice = train[field_SalePrice]\nlogSalePrice = train[field_logSalePrice]\n\nplt.hist(logSalePrice, range = (10,15), bins = 50, stacked=False, label=labels)\nplt.title(field_logSalePrice)\n#plt.xlabel(field_Parch)\nplt.ylabel(\"count\")\nplt.legend()\nplt.show()","96986303":"# See the data set condition of \"N\/A\".\n\n# Define the function kesson_table().\n# Usage: kesson_table(dataset)\ndef kesson_table(df): \n        null_val = df.isnull().sum()\n        percent = 100 * df.isnull().sum()\/len(df)\n        kesson_table = pd.concat([null_val, percent], axis=1)\n        kesson_table_ren_columns = kesson_table.rename(\n        columns = {0 : '\u6b20\u640d\u6570', 1 : '%'})\n        return kesson_table_ren_columns","98eaf6dc":"# Run kesson_table().\ntrain_kesson_table = kesson_table(train)","8893c858":"print(train_kesson_table.to_string())","596bc9f6":"# Devide train dataset into train_data and validation_data\n\n### Ref. http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html\nfrom sklearn.model_selection import train_test_split\n\ntrain_data, validation_data = train_test_split(train, test_size=0.3, random_state=42)\nprint(train_data.shape)\nprint(validation_data.shape)","e011c5e6":"# Copy original train dataset \ncleaned_train = train_data\ncleaned_train.head()","37b163d2":"# Data cleansing\n\n## Filling N\/A of numeric values with its median\n# MasVnrArea\ncleaned_train[\"MasVnrArea\"] = cleaned_train[\"MasVnrArea\"].fillna(train[\"MasVnrArea\"].median())\n# LotFrontage\ncleaned_train[\"LotFrontage\"] = cleaned_train[\"LotFrontage\"].fillna(train[\"LotFrontage\"].median())\n# GarageYrBlt\ncleaned_train[\"GarageYrBlt\"] = cleaned_train[\"GarageYrBlt\"].fillna(train[\"GarageYrBlt\"].median())","7363f7be":"## Fillint N\/A of categorical variables with integer according to data_description.txt","ebe3cdda":"#pd.get_dummies(cleaned_train, drop_first=True, dummy_na=True)\ncleaned_train = pd.get_dummies(cleaned_train, drop_first=False, dummy_na=True)\ndisplay(cleaned_train)\n\n## Reference\n# https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.get_dummies.html","03db3755":"# Preparate validation data and test dataset\ncleaned_validation = validation_data\ncleaned_test = test\n\n# Data cleansing\n\n## Filling N\/A of numeric values with its median\n#MasVnrArea\ncleaned_validation[\"MasVnrArea\"] = cleaned_validation[\"MasVnrArea\"].fillna(validation_data[\"MasVnrArea\"].median())\ncleaned_test[\"MasVnrArea\"] = cleaned_test[\"MasVnrArea\"].fillna(test[\"MasVnrArea\"].median())\n# LotFrontage\ncleaned_validation[\"LotFrontage\"] = cleaned_validation[\"LotFrontage\"].fillna(validation_data[\"LotFrontage\"].median())\ncleaned_test[\"LotFrontage\"] = cleaned_test[\"LotFrontage\"].fillna(test[\"LotFrontage\"].median())\n# GarageYrBlt\ncleaned_validation[\"GarageYrBlt\"] = cleaned_validation[\"GarageYrBlt\"].fillna(validation_data[\"GarageYrBlt\"].median())\ncleaned_test[\"GarageYrBlt\"] = cleaned_test[\"GarageYrBlt\"].fillna(test[\"GarageYrBlt\"].median())\n\n#BsmtFinSF1\ncleaned_test[\"BsmtFinSF1\"] = cleaned_test[\"BsmtFinSF1\"].fillna(test[\"BsmtFinSF1\"].median())\n#TotalBsmtSF\ncleaned_test[\"TotalBsmtSF\"] = cleaned_test[\"TotalBsmtSF\"].fillna(test[\"TotalBsmtSF\"].median())\n#GarageCars\ncleaned_test[\"GarageCars\"] = cleaned_test[\"GarageCars\"].fillna(test[\"GarageCars\"].median())\n#GarageArea\ncleaned_test[\"GarageArea\"] = cleaned_test[\"GarageArea\"].fillna(test[\"GarageArea\"].median())\n\n## Filling N\/A of numeric values with zero\n#BsmtUnfSF \ncleaned_test[\"BsmtUnfSF\"] = cleaned_test[\"BsmtUnfSF\"].fillna(0)\n#BsmtFullBath\ncleaned_test[\"BsmtFullBath\"] = cleaned_test[\"BsmtFullBath\"].fillna(0)","4420efb7":"#pd.get_dummies(cleaned_train, drop_first=True, dummy_na=True)\ncleaned_validation = pd.get_dummies(cleaned_validation, drop_first=False, dummy_na=True)\ncleaned_test = pd.get_dummies(cleaned_test, drop_first=False, dummy_na=True)","0a37c255":"display(cleaned_validation)","84d419c5":"# Calculating\/visualising correlations of attributions.\n\n# Calculating\ncorrelations = cleaned_train.astype(float).corr()\ndisplay(correlations)","c77dbe71":"correlations[\"SalePrice\"]","8dd31298":"# Pick up features; value over ABS(0.5)\ncorrelations_over_abs05 = correlations[abs(correlations) >= 0.5] \ncorrelations_over_abs05 = correlations_over_abs05.fillna(0)","2a98c8fc":"# Importing libraries\nimport seaborn as sns\n\n# Visualising\ncolormap = plt.cm.magma\nplt.figure(figsize=(50,50))\nplt.title('House Price: Correlation (> 0.5, <-0.5) of Features', y=1.05, size=40)\nsns.heatmap(correlations_over_abs05,linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=False)","fee85079":"corr_vs_SalePrice = correlations_over_abs05[\"SalePrice\"][abs(correlations_over_abs05[\"SalePrice\"]) > 0]\ncorr_vs_SalePrice = corr_vs_SalePrice.drop(index=\"SalePrice\")\ncorr_vs_SalePrice = corr_vs_SalePrice.drop(index=\"LogalizedSalePrice\")\ncorr_vs_SalePrice","4938ef80":"display(cleaned_validation)","0013e68c":"display(cleaned_test)","ede7cdd3":"cleaned_train","91d73137":"from sklearn import tree","4a485ebc":"# Defining target, explanatory variables, train dataset\ntarget = cleaned_train[\"SalePrice\"].values\nfeature_names = corr_vs_SalePrice.index\nfeatures = cleaned_train[feature_names].values\n\n# Create decision tree and setarguments\nmax_depth = 9\nmin_samples_split = 2\nmy_tree = tree.DecisionTreeClassifier(criterion=\"entropy\", max_depth = max_depth, min_samples_split = min_samples_split, random_state = 1)\nmy_tree = my_tree.fit(features, target)\n\n# \u300ccleaned_train\u300d\u306e\u8aac\u660e\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\ncleaned_validation[\"PoolQC_Ex\"]=0\nvalidation_features = cleaned_validation[feature_names].values\n\n# \u300ccleaned_train\u300d\u306e\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\u300cmy_tree\u300d\u306e\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\nvalidation_prediction = my_tree.predict(validation_features)","2053bd9e":"validation_prediction","57c6a534":"validateion_Ids = np.array(cleaned_validation[\"Id\"]).astype(int)\n \n# cleaned_validation(\u691c\u8a3c\u30c7\u30fc\u30bf\uff09\u3068Id\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3078\u843d\u3068\u3057\u8fbc\u3080\nvalidation_solution = pd.DataFrame(validation_prediction, validateion_Ids, columns = [\"PredictedSalePrice\"])","039f28ab":"validated_dataset = cleaned_validation\nvalidated_dataset[\"PredictedSalePrice\"] = validation_prediction\nvalidated_dataset[[\"SalePrice\",\"PredictedSalePrice\"]]\ntrue_SalePrice = validated_dataset[\"SalePrice\"]\npredicted_SalePrice = validated_dataset[\"PredictedSalePrice\"]","802211ba":"true_SalePrice.describe()","07ea52d8":"# Histogram (SalePrice, PredictedSalePrice)\nfield_SalePrice = 'SalePrice'\nfield_PredictedSalePrice = 'PredictedSalePrice'\n\nlabels = [field_SalePrice, field_PredictedSalePrice]\nvalidate_true = validated_dataset[field_SalePrice]\nvalidate_pred = validated_dataset[field_PredictedSalePrice]\n\nplt.hist([validate_true, validate_pred], range = (0,755000), bins = 50, stacked=False, label=labels)\nplt.title(field_SalePrice + ' and ' + field_PredictedSalePrice)\n#plt.xlabel(field_Parch)\nplt.ylabel(\"count\")\nplt.legend()\nplt.show()","82be2c83":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(true_SalePrice, predicted_SalePrice))","46249f89":"# \u6c7a\u5b9a\u6728\u69cb\u9020\u306e\u53ef\u8996\u5316\nimport graphviz\nfrom IPython.display import Image\nfrom graphviz import Digraph\nfrom sklearn.externals.six import StringIO\n\nfrom IPython.display import Image as PImage\nfrom subprocess import check_call\nfrom PIL import Image, ImageDraw, ImageFont\n\n# Export our trained model as a .dot file\nwith open(\"tree1.dot\", 'w') as f:\n  f = tree.export_graphviz(my_tree, out_file=f,feature_names=feature_names, max_depth=10)\n\n#Convert .dot to .png to allow display in web notebook\ncheck_call(['dot','-Tpng','tree1.dot','-o','tree_depth15_split2.png'])\n\n# Annotating chart with PIL\nimg = Image.open(\"tree_depth15_split2.png\")\ndraw = ImageDraw.Draw(img)\nfont = ImageFont.truetype('\/usr\/share\/fonts\/truetype\/liberation\/LiberationSerif-Bold.ttf', 26)\nimg.save('sample-out.png')\nPImage(\"sample-out.png\")","af6050c7":"cleaned_train.shape","6527ac02":"corr_vs_SalePrice.index","5bd3a7cb":"target = cleaned_train[\"LogalizedSalePrice\"].values\ncleaned_train[\"LogalizedSalePrice\"].describe()","d6a8bcf7":"target = cleaned_train[\"LogalizedSalePrice\"].values * 10e6\ntarget = target.astype(int)","3717886e":"# Defining target, explanatory variables, train dataset\n# target = cleaned_train[\"LogalizedSalePrice\"].values\nfeature_names = corr_vs_SalePrice.index\nfeatures = cleaned_train[feature_names].values\n\n# Create decision tree and setarguments\nmax_depth = 9\nmin_samples_split = 2\nmy_tree_log = tree.DecisionTreeClassifier(criterion=\"entropy\", max_depth = max_depth, min_samples_split = min_samples_split, random_state = 1)\nmy_tree_log = my_tree_log.fit(features, target)\n\n# \u300ccleaned_train\u300d\u306e\u8aac\u660e\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\ncleaned_validation[\"PoolQC_Ex\"]=0\nvalidation_features = cleaned_validation[feature_names].values\n\n# \u300ccleaned_train\u300d\u306e\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\u300cmy_tree\u300d\u306e\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\nvalidation_prediction = my_tree_log.predict(validation_features)","5ee33a7b":"validation_prediction","55a40e4d":"validation_prediction = validation_prediction*10e-8","ea16d291":"validateion_Ids = np.array(cleaned_validation[\"Id\"]).astype(int)\n \n# cleaned_validation(\u691c\u8a3c\u30c7\u30fc\u30bf\uff09\u3068Id\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3078\u843d\u3068\u3057\u8fbc\u3080\nvalidation_solution = pd.DataFrame(validation_prediction, validateion_Ids, columns = [\"PredictedLogSalePrice\"])","32fd6b0c":"validated_dataset = cleaned_validation\nvalidated_dataset[\"PredictedLogSalePrice\"] = validation_prediction\nvalidated_dataset[[\"LogalizedSalePrice\",\"PredictedLogSalePrice\"]]\ntrue_SalePrice = validated_dataset[\"LogalizedSalePrice\"]\npredicted_SalePrice = validated_dataset[\"PredictedLogSalePrice\"]","c2e6af30":"true_SalePrice.describe()","68dfbd0e":"# Histogram (SalePrice, PredictedSalePrice)\nfield_SalePrice = 'LogalizedSalePrice'\nfield_PredictedSalePrice = 'PredictedLogSalePrice'\n\nlabels = [field_SalePrice, field_PredictedSalePrice]\nvalidate_true = validated_dataset[field_SalePrice]\nvalidate_pred = validated_dataset[field_PredictedSalePrice]\n\nplt.hist([validate_true, validate_pred], range = (10,14), bins = 50, stacked=False, label=labels)\nplt.title(field_SalePrice + ' and ' + field_PredictedSalePrice)\n#plt.xlabel(field_Parch)\nplt.ylabel(\"count\")\nplt.legend()\nplt.show()","084450b1":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(true_SalePrice, predicted_SalePrice))","10c2dfb2":"np.exp(true_SalePrice)","1ba8111c":"validated_dataset[\"SalePrice\"]","ab82f9c7":"np.sqrt(mean_squared_error(np.exp(true_SalePrice),np.exp(predicted_SalePrice)))","2f444050":"# Histogram (SalePrice, PredictedSalePrice)\nfield_SalePrice = 'SalePrice'\nfield_PredictedSalePrice = 'PredictedLogSalePrice'\n\nlabels = [field_SalePrice, field_PredictedSalePrice]\nvalidate_true = validated_dataset[field_SalePrice]\nvalidate_pred = np.exp(validated_dataset[field_PredictedSalePrice])\n\nplt.hist([validate_true, validate_pred], range = (0,755000), bins = 50, stacked=False, label=labels)\nplt.title(field_SalePrice + ' and ' + field_PredictedSalePrice)\n#plt.xlabel(field_Parch)\nplt.ylabel(\"count\")\nplt.legend()\nplt.show()","eab7788d":"kesson = kesson_table(cleaned_test[feature_names])\nkesson[\"\u6b20\u640d\u6570\"][kesson[\"\u6b20\u640d\u6570\"] > 0]","41d4925a":"# Predit with Test data\n# \u300ccleaned_train\u300d\u306e\u8aac\u660e\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\ntest_features = cleaned_test[feature_names].values\n\n# \u300ccleaned_train\u300d\u306e\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\u300cmy_tree\u300d\u306e\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\ntest_prediction = my_tree_log.predict(test_features)","aad0936d":"test_prediction = np.exp(test_prediction*10e-8)","1173baa3":"# Id\u3092\u53d6\u5f97\nId = np.array(test[\"Id\"]).astype(int)\n \n# test_prediction(\u4e88\u6e2c\u30c7\u30fc\u30bf\uff09\u3068Id\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3078\u843d\u3068\u3057\u8fbc\u3080\nmy_solution = pd.DataFrame(test_prediction, Id, columns = [\"SalePrice\"])\n \n# my_tree_one.csv\u3068\u3057\u3066\u66f8\u304d\u51fa\u3057\nmy_solution.to_csv(\"my_tree_one.csv\", index_label = [\"Id\"])","be3fd993":"    Depth  RMSE\n                   0.3                     0.1                 0.5   \n    7      62769.30777878148       64929.151995352724  63360.04913217763  \n    8      58394.644627512855      58085.16792021553   47766.45729331286  \n    9      56468.03535637779       56649.87869041971   **41405.00193353985**  \n    10     **46825.341912976175**  50840.80078090213   42579.63254381383    \n    11     56694.370172493385      52106.68043036903   46280.03691204134  \n    12     51687.515726897385  \n    13     48346.71600528245       55583.86027787573  \n    14     47436.54586904807  \n    15     47436.54586904807       55583.86027787573  47166.56048806159  \n    30     47436.54586904807  ","40864802":"\u4e0d\u52d5\u7523\u4fa1\u683c\u306e\u9ad8\u3044\u7269\u4ef6\u306e\u8aa4\u5dee\u304c\u5927\u304d\u3044\u305f\u3081\u305d\u306e\u52b9\u679c\u304c\u5927\u304d\u304f\u51fa\u3066\u3057\u307e\u3046\u3002\nSalePrice\u306eLog\u3067\u4e88\u6e2c\u3059\u308b\u3002","1824f0b1":"### \u30c7\u30fc\u30bf\u30d5\u30a3\u30fc\u30eb\u30c9\n\nSalePrice - \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u58f2\u5374\u4fa1\u683c\uff08\u30c9\u30eb\uff09\u3002\u3053\u308c\u306f\u3001\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u3067\u3059\u3002  \nMSSubClass\uff1a\u30d3\u30eb\u30c7\u30a3\u30f3\u30b0\u30af\u30e9\u30b9  \nMSZoning\uff1a\u4e00\u822c\u7684\u306a\u30be\u30fc\u30cb\u30f3\u30b0\u5206\u985e    \nLotFrontage\uff1a\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u63a5\u7d9a\u3055\u308c\u305f\u901a\u308a\u306e\u30ea\u30cb\u30a2\u30d5\u30a3\u30fc\u30c8  \nLotArea\uff1a\u30ed\u30c3\u30c8\u30b5\u30a4\u30ba\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09  \nStreet\uff1a\u9053\u8def\u30a2\u30af\u30bb\u30b9\u306e\u30bf\u30a4\u30d7  \nAlley(\u8def\u5730)\uff1a\u8def\u5730\u306e\u7a2e\u985e  \nLotShape\uff1a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u4e00\u822c\u7684\u306a\u5f62\u72b6  \nLandContour\uff1a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5e73\u5766\u5ea6  \nUtilities\uff1a\u5229\u7528\u53ef\u80fd\u306a\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u30bf\u30a4\u30d7  \nLotConfig\uff1a\u30ed\u30c3\u30c8\u69cb\u6210    \nLandSlope\uff1a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u52fe\u914d  \nNeighborhood\uff1a\u30a8\u30a4\u30e0\u30b9\u306e\u90fd\u5e02\u5185(Ames city)\u306e\u7269\u7406\u7684\u306a\u5834\u6240  \nCondition1\uff1a\u4e3b\u8981\u9053\u8def\u307e\u305f\u306f\u9244\u9053\u3068\u306e\u8fd1\u63a5\u6027  \nCondition2\uff1a\u4e3b\u8981\u9053\u8def\u307e\u305f\u306f\u9244\u9053\u307e\u3067\u306e\u8ddd\u96e2\uff08\u79d2\u304c\u3042\u308b\u5834\u5408\uff09  \nBldgType\uff1a\u4f4f\u5c45\u306e\u30bf\u30a4\u30d7  \nHouseStyle\uff1a\u4f4f\u5c45\u306e\u30b9\u30bf\u30a4\u30eb  \nOverallQual\uff1a\u5168\u4f53\u7684\u306a\u7d20\u6750\u3068\u4ed5\u4e0a\u3052\u306e\u54c1\u8cea  \nOverallCond\uff1a\u5168\u4f53\u7684\u306a\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u8a55\u4fa1  \nYearBuilt\uff1a\u5143\u306e\u5efa\u8a2d\u65e5  \nYearRemodAdd\uff1a\u6539\u9020\u65e5  \nRoofStyle\uff1a\u5c4b\u6839\u306e\u30bf\u30a4\u30d7  \nRoofMatl\uff1a\u5c4b\u6839\u6750  \nExterior1st\uff1a\u5bb6\u306e\u5916\u88c5\u30ab\u30d0\u30fc  \nExterior2nd\uff1a\u5bb6\u306e\u5916\u88c5\u30ab\u30d0\u30fc\uff08\u8907\u6570\u306e\u6750\u6599\u306e\u5834\u5408\uff09  \nMasVnrType\uff1a\u77f3\u5de5\u5358\u677f\u30bf\u30a4\u30d7  \nMasVnrArea\uff1a\u77f3\u7a4d\u6a21\u69d8\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09  \nExterQual\uff1a\u5916\u88c5\u6750\u8cea  \nExterCond\uff1a\u5916\u90e8\u306e\u6750\u6599\u306e\u73fe\u5728\u306e\u72b6\u614b  \nFoundation\uff1a\u57fa\u790e\u306e\u7a2e\u985e  \nBsmtQual\uff1a\u5730\u4e0b\u5ba4\u306e\u9ad8\u3055  \nBsmtCond\uff1a\u5730\u4e0b\u5ba4\u306e\u4e00\u822c\u7684\u306a\u72b6\u614b  \nBsmtExposure\uff1a\u30a6\u30a9\u30fc\u30af\u30a2\u30a6\u30c8\u307e\u305f\u306f\u30ac\u30fc\u30c7\u30f3\u30ec\u30d9\u30eb\u306e\u5730\u4e0b\u306e\u58c1  \nBsmtFinType1\uff1a\u57fa\u76e4\u5b8c\u6210\u54c1\u306e\u54c1\u8cea  \nBsmtFinSF1\uff1a\u5b8c\u6210\u3057\u305f1\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\u306e\u30bf\u30a4\u30d71  \nBsmtFinType2\uff1a2\u756a\u76ee\u306e\u5b8c\u6210\u3057\u305f\u9818\u57df\u306e\u54c1\u8cea\uff08\u5b58\u5728\u3059\u308b\u5834\u5408\uff09  \nBsmtFinSF2\uff1a\u30bf\u30a4\u30d72\u306e\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8  \nBsmtUnfSF\uff1a\u5730\u4e0b\u306e\u672a\u5b8c\u6210\u306e\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8  \nTotalBsmtSF\uff1a\u5730\u4e0b1\u968e\u306e\u7dcf\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8   \nHeating\uff1a\u6696\u623f\u306e\u30bf\u30a4\u30d7  \nHeatingQC\uff1a\u52a0\u71b1\u54c1\u8cea\u3068\u72b6\u614b  \nCentralAir\uff1a\u30bb\u30f3\u30c8\u30e9\u30eb\u7a7a\u8abf  \nElectrical\uff1a\u96fb\u6c17\u30b7\u30b9\u30c6\u30e0  \n1stFlrSF\uff1a1\u968e\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8  \n2ndFlrSF\uff1a2\u968e\u5efa\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8  \nLowQualFinSF\uff1a\u5b8c\u6210\u3057\u305f\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\u306e\u4f4e\u54c1\u8cea\uff08\u5168\u30d5\u30ed\u30a2\uff09  \nGrLivArea\uff1a\u4e0a\u7d1a\uff08\u5730\u4e0a\uff09\u306e\u30ea\u30d3\u30f3\u30b0\u30a8\u30ea\u30a2\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8  \nBsmtFullBath\uff1a\u5730\u4e0b\u5ba4\u306e\u30d5\u30eb\u30d0\u30b9\u30eb\u30fc\u30e0  \nBsmtHalfBath\uff1a\u5730\u4e0b\u5ba4\u306e\u30d0\u30b9\u30eb\u30fc\u30e0  \nFullBath\uff1a\u30b0\u30ec\u30fc\u30c9\u4e0a\u306e\u30d5\u30eb\u30d0\u30b9\u30eb\u30fc\u30e0  \nHalfBath\uff1a\u30b0\u30ec\u30fc\u30c9\u3092\u4e0a\u56de\u308b\u30d0\u30b9\u306e\u534a\u5206  \nBedroom\uff1a\u5730\u4e0b1\u968e\u4ee5\u4e0a\u306e\u5bdd\u5ba4\u6570  \nKitchen\uff1a\u30ad\u30c3\u30c1\u30f3\u306e\u6570  \nKitchenQual\uff1a\u30ad\u30c3\u30c1\u30f3\u54c1\u8cea  \nTotRmsAbvGrd\uff1a\u30b0\u30ec\u30fc\u30c9\u4ee5\u4e0a\u306e\u5ba2\u5ba4\u306e\u5408\u8a08\uff08\u30d0\u30b9\u30eb\u30fc\u30e0\u306f\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\uff09  \nFunctional\uff1a\u30db\u30fc\u30e0\u6a5f\u80fd\u8a55\u4fa1  \nFireplaces\uff1a\u6696\u7089\u306e\u6570  \nFireplaceQu\uff1a\u6696\u7089\u306e\u8cea  \nGarageType\uff1a\u30ac\u30ec\u30fc\u30b8\u306e\u5834\u6240  \nGarageYrBlt\uff1a\u5e74\u306e\u30ac\u30ec\u30fc\u30b8\u304c\u5efa\u8a2d\u3055\u308c\u305f  \nGarageFinish\uff1a\u30ac\u30ec\u30fc\u30b8\u306e\u5185\u90e8\u4ed5\u4e0a\u3052  \nGarageCars\uff1a\u8eca\u306e\u5bb9\u91cf\u306b\u304a\u3051\u308b\u30ac\u30ec\u30fc\u30b8\u306e\u30b5\u30a4\u30ba  \nGarageArea\uff1a\u30ac\u30ec\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09  \nGarageQual\uff1a\u30ac\u30ec\u30fc\u30b8\u306e\u54c1\u8cea  \nGarageCond\uff1a\u30ac\u30ec\u30fc\u30b8\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3  \nPavedDrive\uff1a\u8217\u88c5\u3055\u308c\u305f\u30c9\u30e9\u30a4\u30d6\u30a6\u30a7\u30a4  \nWoodDeckSF\uff1a\u6728\u88fd\u30c7\u30c3\u30ad\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09  \nOpenPorchSF\uff1a\u30aa\u30fc\u30d7\u30f3\u30dd\u30fc\u30c1\u30a8\u30ea\u30a2\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09  \nEnclosedPorch\uff1a\u9589\u9396\u578b\u306e\u30dd\u30fc\u30c1\u30a8\u30ea\u30a2\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09  \n3SsnPorch\uff1a3\u3064\u306e\u30b7\u30fc\u30ba\u30f3\u306e\u30dd\u30fc\u30c1\u30a8\u30ea\u30a2\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09  \nScreenPorch\uff1a\u30b9\u30af\u30ea\u30fc\u30f3\u30dd\u30fc\u30c1\u306e\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09  \nPoolArea\uff1a\u30d7\u30fc\u30eb\u9762\u7a4d\uff08\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\uff09  \nPoolQC\uff1a\u30d7\u30fc\u30eb\u306e\u54c1\u8cea  \nFence\uff1a\u30d5\u30a7\u30f3\u30b9\u306e\u54c1\u8cea  \nMiscFeature\uff1a\u4ed6\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u306f\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u305d\u306e\u4ed6\u306e\u6a5f\u80fd  \nMiscVal\uff1a$\u305d\u306e\u4ed6\u306e\u6a5f\u80fd\u306e\u5024  \nMoSold\uff1a\u58f2\u5374\u6708  \nYrSold\uff1a\u58f2\u5374\u5e74  \nSaleType\uff1a\u8ca9\u58f2\u306e\u30bf\u30a4\u30d7  \nSaleCondition\uff1a\u8ca9\u58f2\u6761\u4ef6  "}}