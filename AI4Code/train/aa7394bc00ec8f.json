{"cell_type":{"89e24180":"code","b1d971ca":"code","7ec5759c":"code","b047987c":"code","a13a643a":"code","ec45beea":"code","a4709014":"code","a1d9f56e":"code","9b46555a":"markdown","b84a79f5":"markdown","052574f1":"markdown","368a2298":"markdown","aa9aa508":"markdown","6a3c9930":"markdown","814a7748":"markdown","ff9dafaf":"markdown","285d6bce":"markdown","f7458323":"markdown","f7897d2f":"markdown","b056f7f9":"markdown"},"source":{"89e24180":"\nimport pandas as pd\nreviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\npd.set_option('max_rows', 5)","b1d971ca":"reviews.price.dtype","7ec5759c":"reviews.dtypes","b047987c":"reviews.points.astype('float64')","a13a643a":"reviews.index.dtype","ec45beea":"reviews[pd.isnull(reviews.country)]","a4709014":"reviews.region_2.fillna(\"Unknown\")","a1d9f56e":"reviews.taster_twitter_handle.replace(\"@kerinokeefe\", \"@kerino\")","9b46555a":"Or we could fill each missing value with the first non-null value that appears sometime after the given record in the database. This is known as the backfill strategy.","b84a79f5":"**[Pandas Home Page](https:\/\/www.kaggle.com\/learn\/pandas)**\n\n---\n","052574f1":"A DataFrame or Series index has its own `dtype`, too:","368a2298":"# Missing data\n\nEntries missing values are given the value `NaN`, short for \"Not a Number\". For technical reasons these `NaN` values are always of the `float64` dtype.\n\nPandas provides some methods specific to missing data. To select `NaN` entries you can use `pd.isnull()` (or its companion `pd.notnull()`). This is meant to be used thusly:","aa9aa508":"Replacing missing values is a common operation.  Pandas provides a really handy method for this problem: `fillna()`. `fillna()` provides a few different strategies for mitigating such data. For example, we can simply replace each `NaN` with an `\"Unknown\"`:","6a3c9930":"The `replace()` method is worth mentioning here because it's handy for replacing missing data which is given some kind of sentinel value in the dataset: things like `\"Unknown\"`, `\"Undisclosed\"`, `\"Invalid\"`, and so on.\n\n# Your turn\n\nIf you haven't started the exercise, you can **[get started here](https:\/\/www.kaggle.com\/kernels\/fork\/598827)**.","814a7748":"# Introduction\n\nIn this tutorial, you'll learn how to investigate data types within a DataFrame or Series.  You'll also learn how to find and replace entries.\n\n**To start the exercise for this topic, please click [here](https:\/\/www.kaggle.com\/kernels\/fork\/598827).**\n\n# Dtypes\n\nThe data type for a column in a DataFrame or a Series is known as the **dtype**.\n\nYou can use the `dtype` property to grab the type of a specific column.  For instance, we can get the dtype of the `price` column in the `reviews` DataFrame:","ff9dafaf":"Alternatively, we may have a non-null value that we would like to replace. For example, suppose that since this dataset was published, reviewer Kerin O'Keefe has changed her Twitter handle from `@kerinokeefe` to `@kerino`. One way to reflect this in the dataset is using the `replace()` method:","285d6bce":"Alternatively, the `dtypes` property returns the `dtype` of _every_ column in the DataFrame:","f7458323":"Data types tell us something about how pandas is storing the data internally. `float64` means that it's using a 64-bit floating point number; `int64` means a similarly sized integer instead, and so on.\n\nOne peculiarity to keep in mind (and on display very clearly here) is that columns consisting entirely of strings do not get their own type; they are instead given the `object` type.\n\nIt's possible to convert a column of one type into another wherever such a conversion makes sense by using the `astype()` function. For example, we may transform the `points` column from its existing `int64` data type into a `float64` data type:","f7897d2f":"---\n**[Pandas Home Page](https:\/\/www.kaggle.com\/learn\/pandas)**\n\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum) to chat with other Learners.*","b056f7f9":"Pandas also supports more exotic data types, such as categorical data and timeseries data. Because these data types are more rarely used, we will omit them until a much later section of this tutorial."}}