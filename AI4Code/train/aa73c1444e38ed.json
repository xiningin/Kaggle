{"cell_type":{"40911731":"code","6ad30f26":"code","4a21a4f9":"code","4e9c1066":"code","acce06ba":"code","08653337":"code","ea3942bc":"code","6ae5d2f6":"code","d52ae059":"code","42e96dfe":"code","4a4d6178":"code","46323bbf":"code","1ee6c055":"code","c7224a79":"code","d8715a38":"code","2d71155c":"code","4dd4c601":"markdown"},"source":{"40911731":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ad30f26":"# Reading files from directory\nimport os\nimport pickle\n \n# Data manipulation & analysis\nimport pandas as pd\npd.set_option('display.max_columns',100)\npd.set_option('display.max_rows', 500)\nimport datetime as dt\n \nimport numpy as np\nimport scipy\n\n# Visualisation\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n \n # \u5b9f\u884c\u306b\u95a2\u4fc2\u306a\u3044\u8b66\u544a\u3092\u7121\u8996\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom tqdm import tqdm\nimport gc\nimport json\nimport math\n\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.metrics import accuracy_score,roc_auc_score,log_loss\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\n\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nimport category_encoders as ce\n\nfrom catboost import CatBoostClassifier","4a21a4f9":"train = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")","4e9c1066":"display(train.head())\ndisplay(train.describe())\ndisplay(train.info())","acce06ba":"display(test.head())\ndisplay(test.describe())\ndisplay(test.info())","08653337":"#--------------------------------\n#\u6570\u5024\u306e\u7279\u5fb4\u91cf\u3000\u203b\u4e0a\u7d1a\u8005\u306f\u3001\u7279\u5fb4\u91cf\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3002\n#------------------------------\nfeatures_num = ['feature_0', 'feature_1', 'feature_2', 'feature_3', 'feature_4',\n       'feature_5', 'feature_6', 'feature_7', 'feature_8', 'feature_9',\n       'feature_10', 'feature_11', 'feature_12', 'feature_13', 'feature_14',\n       'feature_15', 'feature_16', 'feature_17', 'feature_18', 'feature_19',\n       'feature_20', 'feature_21', 'feature_22', 'feature_23', 'feature_24',\n       'feature_25', 'feature_26', 'feature_27', 'feature_28', 'feature_29',\n       'feature_30', 'feature_31', 'feature_32', 'feature_33', 'feature_34',\n       'feature_35', 'feature_36', 'feature_37', 'feature_38', 'feature_39',\n       'feature_40', 'feature_41', 'feature_42', 'feature_43', 'feature_44',\n       'feature_45', 'feature_46', 'feature_47', 'feature_48', 'feature_49', ]\nfeatures_cat = ['target'] ","ea3942bc":"# Categorical features distribution \n\n# Params\nn_col = 1\nn_row = round(len(features_num) )\nsize = (n_col * 10, n_row * 4.5)\n\n#Create figure\nplt.subplots(n_row,n_col,figsize=size)\n\n# enumerate\u95a2\u6570\u3000for - loop \u30b3\u30fc\u30c9\u306e\u4ee3\u7528 \nfor  i ,feature  in enumerate(features_num , 1):\n    plt.subplot(n_row, n_col , i)\n    sns.countplot(x = feature, hue = 'target', data = train)\n    plt.xlabel(feature, fontsize=9); plt.legend()\nplt.show()","6ae5d2f6":"##--------------------------------------------\n#\u30ab\u30c6\u30b4\u30eafeature  \u3000\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n#---------------------------------------------\nfor feature in features_cat :\n    le = LabelEncoder()\n    le.fit(train[feature])\n    train[feature] = le.transform(train[feature])","d52ae059":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b  \u6b63\u89e3\u30e9\u3079\u30eb\u3092\u8a18\u5165\ntrain_x = train.drop(['target'], axis=1)\ntrain_y = train['target']","42e96dfe":"# \u5909\u6570Id\u3092\u9664\u5916\u3059\u308b\ntrain_x = train_x.drop(['id'], axis=1)\ntest_x = test.drop(['id'], axis=1)","4a4d6178":"train_y","46323bbf":"## Trial \u95a2\u6570\u3067\u6700\u9069\u5316\u3092\u63a2\u7d22\n##\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001Hold-out\u6cd5\u30672:8\u306b\u5206\u5272\n##\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\u306f\u91cd\u8981\u30d1\u30e9\u30e1\u30fc\u30bf\u3092suggest_int(\u6574\u6570\u3067\u5168\u90e8\u63a2\u7d22) , \u305d\u306e\u4ed6\u3092suggest_categorical\uff08\u30ea\u30b9\u30c8\u5185\u3092\u9078\u629e\uff09\n\ndef objective(trial,data=train_x,target=train_y):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=71)\n    params = {#'iterations':trial.suggest_int(\"iterations\", 4000, 10000),\n             'iterations':trial.suggest_int(\"iterations\", 17000, 17000),\n             'od_type':'Iter',\n              'od_wait':trial.suggest_int('od_wait', 1000, 1000),\n              #'od_wait':trial.suggest_int('od_wait', 500, 2300),\n             'loss_function':'MultiClass',\n              'eval_metric':'MultiClass',\n              #'leaf_estimation_method':'Newton',\n              #'bootstrap_type': 'Bernoulli',\n              #'learning_rate' : trial.suggest_uniform('learning_rate',0.02,0.3),\n              'learning_rate' : trial.suggest_uniform('learning_rate',0.01,0.01),\n              #'reg_lambda': trial.suggest_uniform('reg_lambda',1e-5,100),\n              #'subsample': trial.suggest_uniform('subsample',0,1),\n              #'random_strength': trial.suggest_uniform('random_strength',10,30),\n              #'depth': trial.suggest_int('depth',1,6),\n              'depth': trial.suggest_int('depth',4,4), #FIX\n              'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,3),\n              'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,3),\n              'max_ctr_complexity': trial.suggest_int('max_ctr_complexity',15,15),\n               }\n    model = CatBoostClassifier(**params)  \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n        \n    preds_opt = model.predict_proba(test_x)\n\n\n    log_loss_multi = log_loss(test_y, preds_opt)\n    \n    return log_loss_multi","1ee6c055":"import optuna\nfrom sklearn.model_selection import train_test_split\n\nfrom catboost import CatBoostClassifier\nOPTUNA_OPTIMIZATION = True\n\nstudy = optuna.create_study(direction='minimize')  #'maximize''minimize\nstudy.optimize(objective, n_trials=35)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","c7224a79":"if OPTUNA_OPTIMIZATION:\n    display(optuna.visualization.plot_optimization_history(study))\n    display(optuna.visualization.plot_slice(study))","d8715a38":"################################\n#######   Catboost \n################################\n\ntrain_oof_cat_0 = np.zeros((len(train_x), 4))\ntemp_test = np.zeros((len(test_x), 4))\n\ncat_params = study.best_trial.params\ncat_params['loss_function'] = 'MultiClass'\n#cat_params['eval_metric'] = 'MultiClass'\n#cat_params['bootstrap_type']= 'Bernoulli'\n#cat_params['leaf_estimation_method'] = 'Newton'\ncat_params['random_state'] = 42\n\n\nNUM_FOLDS = 5\nkf =  StratifiedKFold(n_splits=NUM_FOLDS, shuffle=True, random_state=137)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train_x, train_y))):\n        print(f'Fold {f+1}')\n        train_df = train_x.iloc[train_ind].reset_index(drop=True)\n        val_df = train_x.iloc[val_ind].reset_index(drop=True)\n        train_target = train_y.iloc[train_ind].reset_index(drop=True)\n        val_target = train_y.iloc[val_ind].reset_index(drop=True)\n\n        model =CatBoostClassifier(**cat_params)\n        \n        model =  model.fit(train_df, train_target,eval_set=[(val_df,val_target)],\n                           early_stopping_rounds=30,verbose=False)\n        \n        temp_oof = model.predict_proba(val_df)\n        print(log_loss(val_target, temp_oof))\n        train_oof_cat_0[val_ind] = temp_oof\n\n        temp_test += model.predict_proba(test_x)\n        test_preds_cat_0 = temp_test\/NUM_FOLDS\n        test_preds_cat_0 = np.clip(test_preds_cat_0, 0.08, 0.95)\n        \nprint('All_logloss',log_loss(train_y, train_oof_cat_0))\nnp.save('train_oof_cat_0', train_oof_cat_0 ) #for validation\nnp.save('test_preds_cat_0',test_preds_cat_0 ) #for submission","2d71155c":"##### \u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210 \u30d8\u30c3\u30c0\u30fc\u7121\u8a2d\u306e\u8a2d\u5b9a\nsubmission = pd.DataFrame( test_preds_cat_0)\nsubmission.columns = ['Class_1', 'Class_2', 'Class_3', 'Class_4']\nsubmission['id'] = test['id']\nsubmission = submission[['id', 'Class_1', 'Class_2', 'Class_3', 'Class_4']]\n\nsubmission.to_csv(\"submission_cat.csv\", index=False)\ndisplay(submission.head(), submission.tail())","4dd4c601":"The first step in kaggle is to get better results in an easy way.\n\nKaggle\u306e\u7b2c\u4e00\u6b69\u306f\u697d\u306f\u65b9\u6cd5\u3067\u3088\u308a\u826f\u3044\u7d50\u679c\u3092\u3048\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\n\nLightGBM+ optuna\u3000is a very good tool for first trail.Then acheived SCORE 1.08633!!!\n\nLightGBM+ optuna \u306f\u521d\u3081\u306e\u624b\u306b\u306f\u3068\u3066\u3082\u826f\u3044\u30c4\u30fc\u30eb\u3067\u3001SCORE 1.08633\u3067\u3057\u305f\u3002\nhttps:\/\/www.kaggle.com\/hayahiko\/tps-may-easy-way-lgbm-optuna-step-by-step\n    \nThis nootbook is second step exsample.\n\n\u3053\u306e\u65b9\u6cd5\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u3075\u305f\u3064\u3081\u306e\u4e8b\u4f8b\u3067\u3059\u3002\n\nDon't forget to vote !!"}}