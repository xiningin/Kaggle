{"cell_type":{"7aa55b8e":"code","0229ebd7":"code","9437c50c":"code","18d116a8":"code","e83bfebb":"code","1d582288":"code","ed36f890":"code","598547ed":"code","a13557a2":"code","9a98e589":"code","241255b2":"code","8090d7a0":"code","77fea6a3":"code","44925c54":"code","cc3c01d1":"code","2fffee3e":"code","8d557aef":"markdown","2c7d6437":"markdown"},"source":{"7aa55b8e":"import numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nimport warnings\nwarnings.filterwarnings('ignore')","0229ebd7":"# import datasets\ntrain_df = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\n\n# \"Date-time\" as time series data\ntrain_df['date_time'] = pd.to_datetime(train_df['date_time'])\ntest_df['date_time'] = pd.to_datetime(test_df['date_time'])\n","9437c50c":"train_df.info()","18d116a8":"features_list = [\n    'deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1', \n    'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5'\n    ]\n\ntargets_list = [\n    'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'\n    ]","e83bfebb":"# Create data sets for training (80%) and validation (20%)\nX_train, X_valid, y_train, y_valid = train_test_split(\n    train_df, train_df[targets_list], test_size = 0.2, \n    random_state = 123, shuffle = False)","1d582288":"# The basic model (lightGBM)\n\n# custom objective RMSE -> RMSLE\n# y -> t (=np.log1p(y))\n\n# LightGBM Dataset\ntrain_CO = lgb.Dataset(\n    X_train[features_list], \n    np.log1p(y_train.loc[:, 'target_carbon_monoxide'])\n    )\nvalied_CO = lgb.Dataset(\n    X_valid[features_list], \n    np.log1p(y_valid.loc[:, 'target_carbon_monoxide'])\n    )\ntrain_C6H6 = lgb.Dataset(\n    X_train[features_list], \n    np.log1p(y_train.loc[:, 'target_benzene'])\n    )\nvalied_C6H6 = lgb.Dataset(\n    X_valid[features_list], \n    np.log1p(y_valid.loc[:, 'target_benzene'])\n    )\ntrain_NOx = lgb.Dataset(\n    X_train[features_list], \n    np.log1p(y_train.loc[:, 'target_nitrogen_oxides'])\n    )\nvalied_NOx = lgb.Dataset(\n    X_valid[features_list], \n    np.log1p(y_valid.loc[:, 'target_nitrogen_oxides'])\n    )\n\nparams = {\n    'objective': 'regression',\n    'metric': 'rmse',\n#    'learning_rate': 0.01\n    }","ed36f890":"# Model learning('target_carbon_monoxide')\nresult_data = {}\nmodel_CO = lgb.train(\n    params = params,\n    train_set = train_CO,\n    valid_sets = [train_CO, valied_CO],\n    num_boost_round = 300,\n    early_stopping_rounds = 5,\n    verbose_eval= 20,\n    evals_result = result_data\n)","598547ed":"plt.plot(result_data['training']['rmse'], color = 'Orange', label = 'train')\nplt.plot(result_data['valid_1']['rmse'], color = 'blue', label = 'valid')\nplt.legend()\nplt.title('target_carbon_monoxide')\nplt.show()","a13557a2":"# Model learning('target_benzene')\nresult_data = {}\nmodel_C6H6 = lgb.train(\n    params = params,\n    train_set = train_C6H6,\n    valid_sets = [train_C6H6, valied_C6H6],\n    num_boost_round = 300,\n    early_stopping_rounds = 5,\n    verbose_eval= 20,\n    evals_result = result_data\n)","9a98e589":"plt.plot(result_data['training']['rmse'], color = 'Orange', label = 'train')\nplt.plot(result_data['valid_1']['rmse'], color = 'blue', label = 'valid')\nplt.legend()\nplt.title('target_benzene')\nplt.show()","241255b2":"# Model learning('target_nitrogen_oxides')\nresult_data = {}\nmodel_NOx = lgb.train(\n    params = params,\n    train_set = train_NOx,\n    valid_sets = [train_NOx, valied_NOx],\n    num_boost_round = 300,\n    early_stopping_rounds = 5,\n    verbose_eval= 20,\n    evals_result = result_data\n)\n","8090d7a0":"plt.plot(result_data['training']['rmse'], color = 'Orange', label = 'train')\nplt.plot(result_data['valid_1']['rmse'], color = 'blue', label = 'valid')\nplt.legend()\nplt.title('target_nitrogen_oxides')\nplt.show()","77fea6a3":"# test_data predict\nt_pred_CO = model_CO.predict(test_df[features_list])\nt_pred_C6H6 = model_C6H6.predict(test_df[features_list])\nt_pred_NOx = model_NOx.predict(test_df[features_list])","44925c54":"# Predicted value conversion\n# t -> y (=np.expm1(y))\n\n# submisson_file predict\nsubmission['target_carbon_monoxide'] = np.expm1(t_pred_CO)\nsubmission['target_benzene'] = np.expm1(t_pred_C6H6)\nsubmission['target_nitrogen_oxides'] = np.expm1(t_pred_NOx)\n\nsubmission.head()","cc3c01d1":"# Prediction visualization(submisson_file)\ntest_date = pd.to_datetime(test_df.reset_index().date_time).apply(\n    lambda x: x.strftime('%Y\/%m\/%d'))\n\ntest_preds = pd.DataFrame({'date': test_date,\n                            'test_carbon_monoxide': submission['target_carbon_monoxide'],\n                            'test_benzene': submission['target_benzene'],\n                            'test_nitrogen_oxides': submission['target_nitrogen_oxides']})\ntest_preds = test_preds.groupby('date').mean()\n\ntest_preds.plot(color = ['red', 'darkblue', 'green'], subplots = True, figsize = (15, 10))\nplt.xlabel('')\nplt.show()","2fffee3e":"submission.to_csv('submission_LGBM_baseline.csv', index = False)","8d557aef":"Please refer to the notebook below for the \"xgboost\" version.\n- https:\/\/www.kaggle.com\/hirazawahiroshi\/jul-2021-simple-baseline-xgboost","2c7d6437":"I quoted from the notebook below.\nThanks to the author for sharing it.\n\n- https:\/\/www.kaggle.com\/maksymshkliarevskyi\/tps-july-eda-baseline-analysis-xgbregressor\n- https:\/\/www.kaggle.com\/dwin183287\/tps-july-2021-eda\n- https:\/\/www.kaggle.com\/tetsuya777\/tps-july-first-model-lightgbm-ipynb\n"}}