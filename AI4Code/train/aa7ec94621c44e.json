{"cell_type":{"6b6e6fe3":"code","954a68e3":"code","54050620":"code","06c5cb15":"code","0098f3b0":"code","10472064":"code","101eae02":"code","4526a381":"code","28c5b80c":"code","e5dfb522":"code","3d39aa49":"code","f06daa9e":"code","c9df3cab":"code","32e650a3":"code","91cce107":"code","01eb8740":"code","84af8e6f":"code","daa2ade1":"code","4d1cfbc5":"code","0af8896f":"code","096df39e":"code","c7696ead":"code","94c4edc2":"code","9c66558a":"code","0d314b75":"code","f3f68a0a":"code","44535072":"code","d85868e8":"code","3f93b004":"code","7ab7e6f3":"code","661a7cf7":"code","ae514035":"code","28afc346":"code","9e3c37fb":"code","fa4ec3fb":"code","8f757e8a":"code","8b74fcf3":"code","4ab0c7b2":"code","14e2a996":"code","3efbe29a":"code","4ac21666":"code","38325e64":"code","989be412":"code","1325f868":"code","0dc642de":"code","b9bebcf5":"code","fe7c23aa":"code","8c697484":"code","89639b22":"code","07ea22e7":"code","efa06ab5":"code","c9e04cbe":"code","129c84b8":"code","5e299f78":"code","8d6bcbc6":"code","4aaa29ac":"code","f1528733":"code","e338f558":"code","47375d4e":"code","d1ef9ba7":"code","7fd5b814":"code","9e997449":"code","13787c28":"code","fb5e4b2e":"code","42481419":"code","12348ac0":"code","ecb66853":"code","5df720ec":"code","72fa8a33":"code","7866b025":"code","405417a3":"code","5d3dba79":"code","5b731bb8":"code","c6511f5d":"code","206f01d7":"code","b70a7313":"code","a040b3f0":"code","0ea31b5c":"code","47cd9a04":"code","a1e31cda":"code","c4a9a683":"code","a9bf74bc":"code","c2e0e212":"code","b332553a":"code","31008c46":"code","87b13de3":"code","06ade8bf":"code","90eb9daf":"code","c5fa20de":"code","2962d97d":"code","b640c212":"code","9968b83e":"code","daf21335":"code","04f19bc8":"code","12f437aa":"code","78d4bf3f":"code","599b92ee":"code","a8dda3c9":"code","fba046d9":"code","b13b2442":"code","cb6c9339":"code","0845124e":"code","af359763":"code","688169d8":"code","cf5c96cc":"code","c23d6ab1":"code","b42015ee":"code","14297997":"code","a4168b77":"code","6ba33251":"code","d5d97060":"code","da20a97d":"code","486d1cce":"code","1f2af5be":"code","44caea9c":"code","4bb5d25c":"code","e96ece78":"code","2782698b":"code","f2c710ff":"code","fd407d7a":"code","0d840a40":"code","b74d024f":"code","0d65f817":"code","490e1fa9":"code","6c08f286":"markdown","266d6e8e":"markdown","ccc038f3":"markdown","5ae1198f":"markdown","591a66de":"markdown","eade4729":"markdown","50f1ffdd":"markdown","a03ededc":"markdown","faa577d1":"markdown","2ce58519":"markdown","1287d8b8":"markdown","d82f25f3":"markdown","df5e7b38":"markdown","fcbcd021":"markdown","70049feb":"markdown","3dd03672":"markdown","474e0f4b":"markdown","0307264d":"markdown","fdc5410e":"markdown","5016eec9":"markdown","695e55b8":"markdown","31c83ded":"markdown","ade1098f":"markdown","d3557b8d":"markdown","d6b1ccb7":"markdown","5963b724":"markdown","f987dfd7":"markdown","7bf98c91":"markdown","9134f212":"markdown","0acb8a3b":"markdown","f2fad4e9":"markdown","2c39539d":"markdown","7f546183":"markdown","400d0a99":"markdown","0474d83e":"markdown","eb829852":"markdown","5ffe8e8f":"markdown","4144323d":"markdown","8f64903b":"markdown","14b1cf5e":"markdown","11e75590":"markdown","75bf1ad3":"markdown","d25e113d":"markdown","ad3bc794":"markdown","ec816b76":"markdown","753cc6aa":"markdown","3352338b":"markdown","c6cbe7a8":"markdown"},"source":{"6b6e6fe3":"import os\nimport csv\nimport urllib.request\nimport sklearn\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns\n\n#ML\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_validate, cross_val_score\n\n#For the plots\n%matplotlib inline\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\nwarnings.filterwarnings('ignore')\n","954a68e3":"song = pd.read_csv('..\/input\/song-popularity-prediction\/train.csv')","54050620":"song_test = pd.read_csv('..\/input\/song-popularity-prediction\/test.csv')","06c5cb15":"song.head()","0098f3b0":"song.info()","10472064":"song.describe()","101eae02":"nans = song.isnull().sum().sort_values(ascending=False)","4526a381":"nans = nans[nans > 0]","28c5b80c":"print(nans)","e5dfb522":"nans.plot(kind='bar')","3d39aa49":"percent_nans = round((nans\/40000), ndigits=4)","f06daa9e":"nans_table = pd.concat([nans, percent_nans], axis=1, keys=['Total', 'Percentage'])\nnans_table","c9df3cab":"song_copy = song.copy() #Creating copy of the data","32e650a3":"song_copy = song_copy.drop(['id', 'song_popularity'], axis=1) #Dropping id and target columns","91cce107":"song_copy.hist(figsize=(30,15)) #Plotting histograms to the check distribution","01eb8740":"#Checking out unique values in discrete variables\nnum_categorical = ['audio_mode', 'time_signature', 'key']\nfor i in num_categorical:\n  print(i, song[i].unique())","84af8e6f":"#Plotting discrete variables\nfig, ax = plt.subplots(1,3, figsize=(25, 10))\nsns.countplot(song['audio_mode'], ax=ax[0])\nsns.countplot(song['time_signature'], ax=ax[1])\nsns.countplot(song['key'], ax=ax[2])\n\n","daa2ade1":"cont_cols = ['song_duration_ms',\t'acousticness',\t'danceability',\t'energy',\t'instrumentalness',\t'liveness',\t'loudness',\t'speechiness',\t'tempo', 'audio_valence']","4d1cfbc5":"#Converting df from wide to long-form\ndata = pd.melt(song, value_vars=cont_cols)","0af8896f":"data.head()","096df39e":"#Using col_wrap - we have one row. Plotting all continous numerical cols\nsns.set_style('ticks', {'axes.grid': True})\nplots = sns.FacetGrid(data, col='variable', col_wrap=4, sharex=False, sharey=False, hue='variable')\nplots = plots.map(sns.distplot,'value')\nfor axes in plots.axes.flat:\n  _ = axes.set_xticklabels(axes.get_xticklabels(), rotation=30)\nplt.gcf().set_size_inches(20,15)\n\n","c7696ead":"fig, ax = plt.subplots(figsize=(15,10))\nsns.countplot(data=song, x='song_popularity')","94c4edc2":"corr_matrix = song.corr()","9c66558a":"corr_matrix","0d314b75":"fig, ax = plt.subplots(figsize=(20, 15))\nsns.heatmap(corr_matrix, cmap='RdBu', linewidth=1)","f3f68a0a":"for i in cont_cols:\n  sns.jointplot(data=song, y=i, x='song_duration_ms', hue='song_popularity')\n  plt.gcf().set_size_inches(20,15)\n","44535072":"fig, ax = plt.subplots(1,3, figsize=(25, 10))\nsns.countplot(data=song, x='key', hue='song_popularity', ax=ax[0])\nsns.countplot(data=song, x='audio_mode', hue='song_popularity', ax=ax[1])\nsns.countplot(data=song, x='time_signature', hue='song_popularity', ax=ax[2])","d85868e8":"boxes = num_categorical","3f93b004":"num_categorical","7ab7e6f3":"boxes.append('instrumentalness')","661a7cf7":"boxes.append('song_popularity')","ae514035":"boxes\n","28afc346":"boxes = pd.melt(song, value_vars=boxes)","9e3c37fb":"p = sns.FacetGrid(boxes, col='variable', sharex=False, sharey=False, col_wrap=3, size=6)\np = p.map(sns.boxplot, 'value')","fa4ec3fb":"from sklearn.impute import SimpleImputer","8f757e8a":"imputer_median = SimpleImputer(strategy='median')","8b74fcf3":"imputer_mode = SimpleImputer(strategy='most_frequent')","4ab0c7b2":"impute_median = song[['song_duration_ms',\t'acousticness',\t'danceability',\t'energy',\t'liveness',\t'loudness']]","14e2a996":"impute_mode = song[['key', 'instrumentalness']]","3efbe29a":"impute_median_test = song_test[['song_duration_ms',\t'acousticness',\t'danceability',\t'energy',\t'liveness',\t'loudness']]","4ac21666":"impute_mode_test = song_test[['key', 'instrumentalness']]","38325e64":"impute_median_list = ['song_duration_ms',\t'acousticness',\t'danceability',\t'energy',\t'liveness',\t'loudness']","989be412":"impute_mode_list = ['key', 'instrumentalness']","1325f868":"imputer_median.fit(impute_median)","0dc642de":"imputer_median.statistics_","b9bebcf5":"np.median(song['song_duration_ms'].dropna())","fe7c23aa":"median_transformed = imputer_median.transform(impute_median)","8c697484":"median_transformed = pd.DataFrame(median_transformed, columns=impute_median.columns,\n                                  index=impute_median.index)","89639b22":"median_transformed.isnull().sum()","07ea22e7":"median_transformed_test = imputer_median.transform(impute_median_test)","efa06ab5":"median_transformed_test = pd.DataFrame(median_transformed_test, columns=impute_median_test.columns,\n                                  index=impute_median_test.index)","c9e04cbe":"median_transformed_test.isnull().sum()","129c84b8":"imputer_mode.fit(impute_mode)","5e299f78":"imputer_mode.statistics_","8d6bcbc6":"transformed_mode = imputer_mode.transform(impute_mode)","4aaa29ac":"transformed_mode = pd.DataFrame(transformed_mode, columns=impute_mode.columns,\n                                index=impute_mode.index)","f1528733":"#Checking for null values\ntransformed_mode.isnull().sum()","e338f558":"transformed_mode_test = imputer_mode.transform(impute_mode_test)","47375d4e":"transformed_mode_test = pd.DataFrame(transformed_mode_test, columns=impute_mode_test.columns,\n                                index=impute_mode_test.index)","d1ef9ba7":"#Checking for null values\ntransformed_mode_test.isnull().sum()","7fd5b814":"X = song.copy()","9e997449":"X = X.drop(impute_median.columns, axis=1)","13787c28":"X = X.drop(impute_mode.columns, axis=1)","fb5e4b2e":"X = pd.concat([X, transformed_mode, median_transformed], axis=1)","42481419":"X.isnull().sum()","12348ac0":"X_test = song_test.copy()","ecb66853":"X_test = X_test.drop(impute_median_test.columns, axis=1)","5df720ec":"X_test = X_test.drop(impute_mode_test.columns, axis=1)","72fa8a33":"X_test = pd.concat([X_test, transformed_mode_test, median_transformed_test], axis=1)","7866b025":"X_test.isnull().sum()","405417a3":"from sklearn.compose import ColumnTransformer","5d3dba79":"pipeline = ColumnTransformer([\n                              ('mode', SimpleImputer(strategy='most_frequent'), impute_mode_list),\n                              ('median', SimpleImputer(strategy='median'), impute_median_list),\n])\n","5b731bb8":"pipeline.fit(song)","c6511f5d":"#song.","206f01d7":"y = X['song_popularity']\nX = X.drop('song_popularity', axis=1)\n","b70a7313":"#Some data sample creation\nsome_data = X.iloc[:5]\nsome_labels = y.iloc[:5]","a040b3f0":"from sklearn.linear_model import LogisticRegression","0ea31b5c":"log_reg = LogisticRegression(random_state=0)","47cd9a04":"log_reg.fit(X,y)","a1e31cda":"#Precting on random some data from training set\nprint('Predictions on some data: ', log_reg.predict(some_data))","c4a9a683":"#Comparing with labels\nprint('Original labels: ', list(some_labels))","a9bf74bc":"song_predictions = log_reg.predict(X)","c2e0e212":"print('AUC scores on the training set: ', cross_val_score(log_reg, X,y, cv=10, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(log_reg, X,y, cv=10, scoring='roc_auc')))","b332553a":"from sklearn.naive_bayes import GaussianNB","31008c46":"nai_bay = GaussianNB()","87b13de3":"nai_bay.fit(X,y)","06ade8bf":"#Precting on random some data from training set\nprint('Predictions on some data: ', nai_bay.predict(some_data))","90eb9daf":"#Comparing with labels\nprint('Original labels: ', list(some_labels))","c5fa20de":"song_predict_nb = nai_bay.predict(X)","2962d97d":"print('AUC scores on the training set: ', cross_val_score(nai_bay, X,y, cv=10, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(nai_bay, X,y, cv=10, scoring='roc_auc')))","b640c212":"from sklearn.neighbors import KNeighborsClassifier","9968b83e":"knn = KNeighborsClassifier(n_neighbors=5)","daf21335":"knn.fit(X,y)","04f19bc8":"#Precting on random some data from training set\nprint('Predictions on some data: ', knn.predict(some_data))","12f437aa":"#Comparing with labels\nprint('Original labels: ', list(some_labels))","78d4bf3f":"song_predict_nb = knn.predict(X)","599b92ee":"print('AUC scores on the training set: ', cross_val_score(knn, X,y, cv=10, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(knn, X,y, cv=10, scoring='roc_auc')))","a8dda3c9":"from sklearn import svm","fba046d9":"svm_clf = svm.SVC()","b13b2442":"#svm_clf.fit(X,y)","cb6c9339":"#Precting on random some data from training set\n#print('Predictions on some data: ', svm_clf.predict(some_data))","0845124e":"#Comparing with labels\nprint('Original labels: ', list(some_labels))","af359763":"#song_predict_nb = svm_clf.predict(X)","688169d8":"#print('AUC scores on the training set: ', cross_val_score(svm_clf, X,y, cv=10, scoring='roc_auc'),\n#     'Mean of AUC scores: ', np.mean(cross_val_score(svm_clf, X,y, cv=10, scoring='roc_auc')))","cf5c96cc":"from sklearn.tree import DecisionTreeClassifier","c23d6ab1":"dtree = DecisionTreeClassifier(max_depth=10, random_state=0, max_features=None, min_samples_leaf=15)","b42015ee":"dtree.fit(X,y)","14297997":"#Precting on random some data from training set\nprint('Predictions on some data: ', dtree.predict(some_data))","a4168b77":"#Comparing with labels\nprint('Original labels: ', list(some_labels))","6ba33251":"song_predict_nb = dtree.predict(X)","d5d97060":"print('AUC scores on the training set: ', cross_val_score(dtree, X,y, cv=10, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(dtree, X,y, cv=10, scoring='roc_auc')))","da20a97d":"from sklearn.ensemble import RandomForestClassifier","486d1cce":"rfm = RandomForestClassifier(n_estimators=70, oob_score=True, n_jobs=-1, random_state=0, max_features=None, min_samples_leaf= 30)","1f2af5be":"rfm.fit(X,y)","44caea9c":"#Precting on random some data from training set\nprint('Predictions on some data: ', rfm.predict(some_data))","4bb5d25c":"#Comparing with labels\nprint('Original labels: ', list(some_labels))","e96ece78":"song_predict_rfm = rfm.predict(X)","2782698b":"print('AUC scores on the training set: ', cross_val_score(rfm, X,y, cv=5, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(rfm, X,y, cv=5, scoring='roc_auc')))","f2c710ff":"test_song_rfm_preds = rfm.predict(X_test)","fd407d7a":"print('AUC scores on the test set: ', cross_val_score(rfm, X_test,test_song_rfm_preds, cv=5, scoring='roc_auc'),\n      'Mean of AUC scores: ', np.mean(cross_val_score(rfm, X_test,test_song_rfm_preds, cv=5, scoring='roc_auc')))","0d840a40":"sample_submission = pd.read_csv('..\/input\/song-popularity-prediction\/sample_submission.csv')","b74d024f":"sample_submission","0d65f817":"output = pd.DataFrame({'id': sample_submission.index,\n                       'song_popularity': test_song_rfm_preds})","490e1fa9":"output.to_csv('submission.csv', index=False)","6c08f286":"## Generating submission\n\nThe best scores for now is with RandomForest ~.56\n\n2nd best scores are from ~.53 with:\n* DecisionTree\n* Naive Bayes","266d6e8e":"#### SVM evaluations with AUC","ccc038f3":"#### Mode fitting, trasnforming","5ae1198f":"### Missing values\n\nNumber of nans values in the data are pretty much the same. Percentage of the missing data is around 10% per feature with missing values. \n\n---\n**Replacing or dropping then?**\n\nReplace with median\n* acoustiness, loudness, liveness, song_duration_ms, danceability, energy\n\nReplace with mode\/median\n* instrumentalness, key, ","591a66de":"#### Discrete variables plots","eade4729":"Things to take into consideration:\n* different scales\n* missing values\n* log transformations needed for skewed\n\nCandidates for transformations: spechiness, tempo, loudness, acoustiness, liveness, energry, danceability?\n\nNormal ditibuted: song_duration\n\n","50f1ffdd":"#### KNN evaluations with AUC","a03ededc":"#### Test mode transformation","faa577d1":"### Contionus variables","2ce58519":"#### Median fitting, transforming","1287d8b8":"Seems good, we can proceed. ","d82f25f3":"#### DecisionTree evaluaations with AUC","df5e7b38":"#### Test replacing old columns with the new imputed ones","fcbcd021":"#### For test transformations","70049feb":"#### Evaluations with AUC ","3dd03672":"### Naive Bayes","474e0f4b":"### Missing values","0307264d":"Don't mind the x-tick labels in the range 0-1.5. For variables with data in this range, the x-tick labels should be 0-1.0 (like in the histograms plots).  ","fdc5410e":"### Logistic Regression","5016eec9":"## EDA","695e55b8":"Seems good. One last step is to concat new imputed columns to the old dataset. ","31c83ded":"### DecisionTree","ade1098f":"#### Replacing old columns with the imputed ones","d3557b8d":"Yyyy. Ok. Something definetly went wrong :D \n\nSubmitting regardless. We'll see what'll happen. ","d6b1ccb7":"### RandomForest","5963b724":"!add percentages to the plot","f987dfd7":"## Loading data and imports","7bf98c91":"## On the hunt for outliers","9134f212":"#### Test median transfromation","0acb8a3b":"### Feature manipulations\n\n1. Transforming instrumentalness into discrete var upon clusters. \n2. Dealing with outliers\n2. Balance target variables.\n3. Scaling. \n4. Feature transformations using logs, box-cox, yeo-johnson, recipricoal transformations - [tests](https:\/\/www.kaggle.com\/dextermojo\/song-popularity-eda-heads-or-tails-python-ver)\n  * [Types Of Transformations For Better Normal Distribution](https:\/\/towardsdatascience.com\/types-of-transformations-for-better-normal-distribution-61c22668d3b9)","f2fad4e9":"#### Target variable plot\n\nIt seems that we'are dealing with imbalanced, maybe some balancing should be in order. ","2c39539d":"###Data descrption\n\nSource - Spotify: \"In Spotify's API is something called Valence, that describes the musical positiveness conveyed by a track. Tracks with high valence sound more positive (happy, cheerful, euphoric), while tracks with low valence sound more negative (sad, depressed, angry).\"\n\n**From very good article explaining Spotify API What Makes a Song Likeable**?- https:\/\/towardsdatascience.com\/what-makes-a-song-likeable-dbfdb7abe404 we can read that:\n\n---\n\nSpotify Audio Features\nFor every track on their platform, Spotify provides data for thirteen Audio Features.The Spotify Web API developer guide defines them as follows:\n\n* **Danceability:** Describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.\n\n* **Valence**: Describes the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\n* **Energy**: Represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale.\n\n* **Tempo**: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece, and derives directly from the average beat duration.\n\n* **Loudness**: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks.\n\n* **Speechiness**: This detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.\nInstrumentalness: Predicts whether a track contains no vocals. \u201cOoh\u201d and \u201caah\u201d sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \u201cvocal\u201d.\n\n* **Liveness**: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live.\n\n* **Acousticness**: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.\n\n* **Key**: The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C\u266f\/D\u266d, 2 = D, and so on.\n\n* **Mode**: Indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\n\n* **Duration**: The duration of the track in milliseconds.\n\n* **Time Signature**: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).\n\nData Provided by Remek Kinas [SOURCE](https:\/\/www.kaggle.com\/c\/song-popularity-prediction\/discussion\/301616)\n\n---\n\nResources for EDA:\n* [Song Popularity Prediction EDA with Martin Henze (Heads or Tails)](https:\/\/www.youtube.com\/watch?v=JXF-7rCcR1c)\n* [Song Popularity Prediction: EDA with Martin Henze (Part-2)](https:\/\/www.youtube.com\/watch?v=2aE6SvCVOis&ab_channel=AbhishekThakur)\n* [Song Popularity EDA - Live Coding Fun - Martin Notebook](https:\/\/www.kaggle.com\/headsortails\/song-popularity-eda-live-coding-fun)","7f546183":"#### RandomForest evaluation with AUC","400d0a99":"### Discrete variables","0474d83e":"### Correlations","eb829852":"### Continous variable plots","5ffe8e8f":"## Feature interactions","4144323d":"#### Imports, creating objects, list of columns","8f64903b":"Maybe instrumentalness should be tansformed into discrete variables? Or categorical variable?","14b1cf5e":"### X,y split","11e75590":"#### Pipeline\nnot working - dont' know why","75bf1ad3":"### KNN","d25e113d":"Ready for to be plugged into a model. (only missing values imputed).","ad3bc794":"#### Evaluations with AUC on training data","ec816b76":"### SVM","753cc6aa":"## Feature engineering\n\nResources: \n* [Python | Box-Cox Transformation](https:\/\/www.geeksforgeeks.org\/box-cox-transformation-using-python\/)\n\n* [Song Popularity EDA - Heads or Tails Python Ver](https:\/\/www.kaggle.com\/dextermojo\/song-popularity-eda-heads-or-tails-python-ver) - with implementation of various transformations on contionus variables\n\n* [3 methods to treat outliers in machine learning](https:\/\/www.neuraldesigner.com\/blog\/3_methods_to_deal_with_outliers)\n\n\nyeo-johnson? ","3352338b":"### Data visualization","c6cbe7a8":"## Trainning model and testing"}}