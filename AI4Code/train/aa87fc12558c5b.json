{"cell_type":{"bc0d78e3":"code","06c7473e":"code","db838863":"code","92366577":"code","e3f3059e":"code","25a3109b":"code","311b6edf":"code","d420e52e":"code","0eff0ea4":"code","c711b67a":"code","0ceb738d":"code","e93b3817":"code","6a167ec5":"code","dd14c2a1":"code","a06f4cd7":"code","c1133292":"code","2ad49b00":"code","5f445329":"code","1a6376cb":"code","d647c5b4":"code","82611876":"code","caca92bd":"code","fa129a5a":"code","53845c8d":"code","3f2f80af":"code","54e2badd":"code","9db1032e":"code","3cf7c7a2":"code","588cfcff":"code","5acc13a9":"code","dfdd4c69":"code","7b578dc9":"code","9c8e6f3e":"markdown","960fa371":"markdown","b6d4714a":"markdown","e412dccd":"markdown","7be2eb93":"markdown","a6c51e69":"markdown","e4755fba":"markdown","f5b20318":"markdown","449c4ab4":"markdown","08bd060c":"markdown","463aa738":"markdown","3daa74f5":"markdown","903d3658":"markdown","408418ae":"markdown"},"source":{"bc0d78e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n\ninput_dir=\"..\/input\/titanic\"\nprint(os.listdir(input_dir))\n\n# Any results you write to the current directory are saved as output.","06c7473e":"data=pd.read_csv(input_dir+'\/train.csv',header=0)\n#data=data.dropna()\ndata.head()","db838863":"data.isna().sum()","92366577":"def fix_nan(data_df):\n    #Age\n    for name_string in data_df['Name']:\n        data_df['Title']=data_df['Name'].str.extract('([A-Za-z]+)\\.',expand=True)\n    \n    #replacing the rare title with more common one.\n    mapping = {'Mlle': 'Miss', 'Major': 'Mr', 'Col': 'Mr', 'Rev':'Mr','Sir': 'Mr', 'Don': 'Mr', 'Mme': 'Miss',\n              'Jonkheer': 'Mr', 'Lady': 'Mrs', 'Capt': 'Mr', 'Countess': 'Mrs', 'Ms': 'Miss', 'Dona': 'Mrs'}\n    data_df.replace({'Title': mapping}, inplace=True)\n\n    titles=['Mr','Miss','Mrs','Master','Dr']\n    for title in titles:\n        age_to_impute = data_df.groupby('Title')['Age'].median()[titles.index(title)]\n        #print(age_to_impute)\n        data_df.loc[(data_df['Age'].isnull()) & (data_df['Title'] == title), 'Age'] = age_to_impute\n    \n    #fix any remaining nan Age with median\n    data_df.loc[(data_df['Age'].isnull()) , 'Age']= data_df['Age'].median()\n    \n    #Fare, if inneed\n    Pclasss=data_df['Pclass'].unique()\n    Pclasss=Pclasss.tolist();\n    for pc in Pclasss:\n        Fare_to_impute = data_df.groupby('Pclass')['Fare'].median()[pc]\n        #print(age_to_impute)\n        data_df.loc[(data_df['Fare'].isnull()) & (data_df['Pclass'] == pc), 'Fare'] = Fare_to_impute\n    \n    #Embark, with \"S\"\n    data.loc[(data['Embarked'].isnull()) , 'Embarked']= \"S\"\n    \n    \n    return data_df","e3f3059e":"data=fix_nan(data)","25a3109b":"sexMap={'female':0,'male':1}\ndata=data.replace({'Sex':sexMap})","311b6edf":"data['Embarked'].unique()","d420e52e":"embarkMap={'S':1,'C':2,'Q':3}\ndata=data.replace({'Embarked':embarkMap})","0eff0ea4":"# from: A Data Science Framework: To Achieve 99% Accuracy\ndef correlationMapPlot(data):\n    \n    import seaborn as sns\n\n    plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    sns.heatmap(\n        data.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=15)\n\n","c711b67a":"correlationMapPlot(data)","0ceb738d":"plt.hist(x=data.loc[(data['Survived']==1) , 'Age'], bins='auto', color='#0504aa',alpha=0.7, rwidth=0.85)","e93b3817":"#collection of some common feature engineering practices founded\ndef featureEngineering(data):    \n    data['isInfant'] = data ['Age']<5;\n    \n    data['FamilySize'] = data['SibSp'] + data['Parch'] + 1\n    \n    data['isAlone'] = 0\n    data.loc[data['FamilySize'] == 1, 'isAlone'] = 1\n    #IndividualFare can be dependent to FamilySize\n    data['IndividualFare']=(data['Fare'])\/(data ['SibSp'] +data['Parch']+1);\n\n    \n    return data","6a167ec5":"data=featureEngineering(data)","dd14c2a1":"correlationMapPlot(data)","a06f4cd7":"X = np.asarray(data[['Sex','Pclass','Fare','SibSp','Parch','Embarked','isInfant','isAlone','FamilySize','IndividualFare']])\ny = np.asarray(data[['Survived']])\n\nfrom sklearn import preprocessing\nX = preprocessing.StandardScaler().fit(X).transform(X)\n","c1133292":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\n","2ad49b00":"import tensorflow as tf\nfrom tensorflow import keras","5f445329":"model = keras.Sequential([\n  keras.layers.Dense(16, activation='relu', input_shape=(10,)),\n  keras.layers.Dense(32, activation='relu'),\n  keras.layers.Dense(16, activation='relu'),\n  keras.layers.Dense(1, activation='sigmoid'),\n])\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","1a6376cb":"model.fit(X_train, y_train, epochs=5)","d647c5b4":"yhat=model.predict(X_test)","82611876":"yhat=model.predict(X_test)\nfor i in range(0,len(yhat)):\n    if yhat[i]>=0.6:\n        yhat[i]=1;\n    else:\n        yhat[i]=0;   \n        ","caca92bd":"\nfrom sklearn.metrics import jaccard_similarity_score\njaccard_similarity_score(y_test, yhat)","fa129a5a":"data_fin.isna().sum()","53845c8d":"data_fin=pd.read_csv(input_dir+'\/test.csv',header=0)\ndata_fin_1=data_fin.replace({'Sex':sexMap})\ndata_fin_1=data_fin_1.replace({'Embarked':embarkMap})\ndata_fin_1=fix_nan(data_fin_1);\ndata_fin_1=featureEngineering(data_fin_1);\nX_fin = np.asarray(data_fin_1[['Sex','Pclass','Fare','SibSp','Parch','Embarked','isInfant','isAlone','FamilySize','IndividualFare']])\nX_fin = preprocessing.StandardScaler().fit(X_fin).transform(X_fin)\n","3f2f80af":"data_fin_1","54e2badd":"yhat_fin = model.predict(X_fin)\nfor i in range(0,len(yhat_fin)):\n    if yhat_fin[i]>=0.6:\n        yhat_fin[i]=1;\n    else:\n        yhat_fin[i]=0;  ","9db1032e":"yhat_fin=yhat_fin.astype(int)","3cf7c7a2":"yhat_fin = yhat_fin.flatten()","588cfcff":"yhat_fin.shape","5acc13a9":"submission_dat=pd.DataFrame()\nsubmission_dat.loc[:,'PassengerId']=data_fin['PassengerId']\nsubmission_dat.loc[:,'Survived']=pd.Series(yhat_fin, index=submission_dat.index)","dfdd4c69":"submission_dat['Survived'].unique()","7b578dc9":"submission_dat.to_csv('sampleSubmission.csv',index=False)","9c8e6f3e":"#Master--officers\/young boy\n#Don--Mr\n#Rev--Reverend, Christian clergy and ministers\n#Dr--...\n#Mme--madam,only one, 24.0\n#Ms--only one,28.0\n#Lady--only one,48.0, probably married\n#Sir\n#Mlle--miss\n#Major,Col,Capt--military related\n#Countess--noble class wife\n#Jonkheer--male, lowest noble\n","960fa371":"<font size=5>**Replace embark with number**","b6d4714a":"<font size=5>**generate gender_submission.csv**","e412dccd":"<font size=5>**Processing testing set**","7be2eb93":"<font size=5>**Try to replace nans, use medians. \n    For Age nan, Guess from name Initial; \n    For Fare nan, Guess from Pclass\n    **<\/font>","a6c51e69":"<font size=5>**DFF network**","e4755fba":"<font size=5>**Evalution**","f5b20318":"<font size=5>**Training and test set**","449c4ab4":"<font size=5>**explore cross correlation**","08bd060c":"<Font size=5>**Some other explorations**","463aa738":"<font size=5>**Replace sex with number**","3daa74f5":"<font size=\"5\">**Check how many nans in each column**<\/font>","903d3658":"<Font size=5>**Feature engineering**","408418ae":"<font size=\"5\">**Read data**<\/font>"}}