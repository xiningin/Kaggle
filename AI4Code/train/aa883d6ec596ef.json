{"cell_type":{"44cb40f7":"code","99d8f2d7":"code","339cb5a8":"code","173ca9a2":"code","15811282":"code","22602e41":"code","df422185":"code","86c6a31c":"code","2126d6fc":"code","7e411059":"code","cb03f83b":"code","803177de":"code","30eea8f6":"code","5bc18612":"code","62d43d81":"code","ec767e1e":"code","1a3838fb":"code","5b7a6bc6":"code","06f88c11":"code","d8905b28":"code","8e073571":"code","4ec0802c":"markdown"},"source":{"44cb40f7":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\nfrom pathlib import Path\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)","99d8f2d7":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\ntraining_tasks = sorted(os.listdir(training_path))\neval_tasks = sorted(os.listdir(evaluation_path))","339cb5a8":"T = training_tasks\nTrains = []\nfor i in range(400):\n    task_file = str(training_path \/ T[i])\n    task = json.load(open(task_file, 'r'))\n    Trains.append(task)\n    \nE = eval_tasks\nEvals= []\nfor i in range(400):\n    task_file = str(evaluation_path \/ E[i])\n    task = json.load(open(task_file, 'r'))\n    Evals.append(task)","173ca9a2":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()","15811282":"def plot_picture(x):\n    plt.imshow(np.array(x), cmap = cmap, norm = norm)\n    plt.show()","22602e41":"#Transformations\ndef Vert(M):\n    n = len(M)\n    k = len(M[0])\n    ans = np.zeros((n,k), dtype = int)\n    for i in range(n):\n        for j in range(k):\n            ans[i][j] = 0+M[n-1-i][j]\n    return ans.tolist()\n\ndef Hor(M):\n    n = len(M)\n    k = len(M[0])\n    ans = np.zeros((n,k), dtype = int)\n    for i in range(n):\n        for j in range(k):\n            ans[i][j] = 0+M[i][k-1-j]\n    return ans.tolist()\n\ndef Rot1(M):\n    n = len(M)\n    k = len(M[0])\n    ans = np.zeros((k,n), dtype = int)\n    for i in range(n):\n        for j in range(k):\n            ans[j][i] = 0 + M[i][k-1-j]\n    return ans.tolist()\n            \ndef Rot2(M):\n    n = len(M)\n    k = len(M[0])\n    ans = np.zeros((k,n), dtype = int)\n    for i in range(n):\n        for j in range(k):\n            ans[j][i] = 0 + M[n-1-i][j]\n    return ans.tolist()\n","df422185":"Geometric = [[Hor, Hor], [Rot2], [Rot1, Rot1], [Rot1], [Vert], [Hor, Rot2], [Hor], [Vert, Rot2]]","86c6a31c":"def Defensive_Copy(A): \n    n = len(A)\n    k = len(A[0])\n    L = np.zeros((n,k), dtype = int)\n    for i in range(n):\n        for j in range(k):\n            L[i,j] = 0 + A[i][j]\n    return L.tolist()","2126d6fc":"def Apply(S, x):\n    if S in Geometric:\n        x1 = Defensive_Copy(x)\n        for t in S:\n            x1 = t(x1)\n    return x1","7e411059":"def Cut(M, r1, r2): #Cut a region into tiles\n    List = []\n    n = len(M)\n    n1 = n\/\/r1\n    k = len(M[0])\n    k1 = k\/\/r2\n    for i in range(r1):\n        for j in range(r2):\n            R = np.zeros((n1,k1), dtype = int)\n            for t1 in range(n1):\n                for t2 in range(k1):\n                    R[t1,t2] = 0+M[i*n1+t1][j*k1+t2]\n            List.append(R.tolist())\n    return List","cb03f83b":"def Glue(List, r1, r2): #Combine tiles to one picture\n    n1 = len(List[0])\n    k1 = len(List[0][0])\n    ans = np.zeros((n1*r1, k1*r2), dtype = int)\n    counter = 0\n    for i in range(r1):\n        for j in range(r2):\n            R = List[counter]\n            counter +=1\n            for t1 in range(n1):\n                for t2 in range(k1):\n                    ans[i*n1+t1, j*k1+t2] = 0 + R[t1][t2]\n    return ans.tolist()","803177de":"A = np.array([[0,0,0,0,0], [0,1,2,3,0], [0,4,5,6,0], [0,7,8,9,0], [0,0,0,0,0]])\nplot_picture(A)","30eea8f6":"List = [Apply(S,A) for S in Geometric]\nB = Glue(List, 2, 4)\nplot_picture(B)","5bc18612":"List2 = Cut(B, 2, 1)\nfor x in List2:\n    plot_picture(x)","62d43d81":"def Match(basic_task): \n    #returns -1 if no match is found\n    #returns  Transformed_Test_Case  if the mathching rule is found\n    Input = [Defensive_Copy(x) for x in basic_task[0]]\n    Output = [Defensive_Copy(y) for y in basic_task[1]]\n    Test_Case = Input[-1]\n    Input = Input[:-1]\n    for i in range(len(Geometric)):\n        S = Geometric[i]\n        solved = True\n        for x, y in zip(Input,Output):\n            transformed_x = Apply(S,x)\n            if transformed_x != y:\n                solved = False\n                break\n        if solved == True:\n            Transformed_Test_Case = Apply(S, Test_Case)\n            return Transformed_Test_Case\n    return -1","ec767e1e":"def Solve(basic_task): \n    # returns -1 if no match is found\n    # returns Transformed_Test_Case  if the mathching rule is found\n    # for this notebook we only look at mosaics\n    Input = [Defensive_Copy(x) for x in basic_task[0]]\n    Output = [Defensive_Copy(y) for y in basic_task[1]]\n    same_ratio = True\n    R_x = []\n    R_y = []\n    for x, y in zip(Input[:-1],Output):\n        n1 = len(x)\n        n2 = len(y)\n        k1 = len(x[0])\n        k2 = len(y[0])\n        if n2%n1 != 0 or k2%k1 != 0:\n            same_ratio = False\n            break\n        else :\n            R_y.append(n2\/\/n1)\n            R_x.append(k2\/\/k1)\n       \n    if same_ratio and min(R_x) == max(R_x) and min(R_y) == max(R_y): \n        r1 = min(R_y)\n        r2 = min(R_x)\n        Fractured_Output = [Cut(x, r1, r2) for x in Output]\n        \n        Partial_Solutions = []\n        for panel in range(r1*r2):\n            List = [Fractured_Output[i][panel] for i in range(len(Output))]\n            \n            proposed_solution = Match([Input, List])\n            \n            if proposed_solution == -1:\n                return -1\n            else: \n                Partial_Solutions.append(proposed_solution)\n        Transformed_Test_Case = Glue(Partial_Solutions, r1, r2)\n        return Transformed_Test_Case    \n        \n    return -1","1a3838fb":"def Create(task, task_id = 0):\n    n = len(task['train'])\n    Input = [Defensive_Copy(task['train'][i]['input']) for i in range(n)]\n    Output = [Defensive_Copy(task['train'][i]['output']) for i in range(n)]\n    Input.append(Defensive_Copy(task['test'][task_id]['input']))\n    return Input, Output\n    ","5b7a6bc6":"solved_train = []\nfor i in range(400):\n    task = Trains[i]\n    k = len(task['test'])\n    for j in range(k):\n        basic_task = Create(task, j)\n        proposed_solution = Solve(basic_task)\n        if proposed_solution != -1:\n            print(i,j)\n            solved_train.append((i,j))\n            plot_task(task)\n            plot_picture(proposed_solution)","06f88c11":"print(len(solved_train))\nfor x in solved_train:\n    print(x)","d8905b28":"solved_eval = []\nfor i in range(400):\n    task = Evals[i]\n    k = len(task['test'])\n    for j in range(k):\n        basic_task = Create(task, j)\n        proposed_solution = Solve(basic_task)\n        if proposed_solution != -1:\n            print(i,j)\n            solved_eval.append((i,j))\n            plot_task(task)\n            plot_picture(proposed_solution)","8e073571":"print(len(solved_eval))\nfor x in solved_eval:\n    print(x)","4ec0802c":"# A starter on how to find transformations"}}