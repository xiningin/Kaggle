{"cell_type":{"1282815b":"code","95ac2f52":"code","eb6c5335":"code","36eb54a6":"code","5f78c505":"code","10eae173":"code","ce12326f":"code","3ace89db":"code","10798ae2":"code","bb109b87":"code","41a6c0a9":"code","db78a1b8":"code","4aa74e44":"code","a99dcdf6":"code","04c72d7e":"code","77bb17bc":"code","7cc35a6a":"code","06737941":"code","d263b116":"code","370239f1":"code","3d4f6da0":"code","19958894":"code","78cdac89":"code","e4e1a1a0":"code","6a9be0cf":"markdown","ece111fe":"markdown","7ae2f964":"markdown"},"source":{"1282815b":"import os\nimport torch\nimport torchvision\nimport torch.nn as nn\nfrom tqdm.notebook import tqdm\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import make_grid\nfrom torchvision.utils import save_image","95ac2f52":"DATA_DIR = \"..\/input\/abstract-art-gallery\"","eb6c5335":"stats = (.5, .5, .5), (.5, .5, .5)","36eb54a6":"transform_ds = T.Compose([\n    T.Resize((128, 128)),\n    T.CenterCrop(128),\n    T.RandomHorizontalFlip(),\n    T.RandomVerticalFlip(),\n    T.ToTensor(),\n    T.Normalize(*stats)\n])\nds = torchvision.datasets.ImageFolder(root=DATA_DIR, transform=transform_ds)","5f78c505":"def denorm(img_tensor):\n    return img_tensor * stats[1][0] + stats[0][0]","10eae173":"batch_size=128","ce12326f":"train_dl = DataLoader(ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)","3ace89db":"def show_image(train_dl):\n    for images,_ in train_dl:\n        fig, ax = plt.subplots(figsize=(8,8))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(denorm(images.detach()[:32]), nrow=8).permute(1,2,0))\n        break\n        \nshow_image(train_dl)","10798ae2":"def get_device():\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for x in self.dl:\n            yield to_device(x, self.device)\n            \n    def __len__(self):\n        return len(self.dl)\n    \ndevice = get_device()\ndevice","bb109b87":"train_dl = DeviceDataLoader(train_dl, device)","41a6c0a9":"discriminator = nn.Sequential(\n    #in: 128 x 3 x 128 x 128\n    \n    nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(64),\n    nn.LeakyReLU(0.2, inplace=True),\n    #128 x 64 x 64 x 64\n    \n    nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(128),\n    nn.LeakyReLU(0.2, inplace=True),\n    #128 x 128 x 32 x 32\n    \n    nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(256),\n    nn.LeakyReLU(0.2, inplace=True),\n    #128 x 256 x 16 x 16\n    \n    nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(512),\n    nn.LeakyReLU(0.2, inplace=True),\n    #128 x 512 x 8 x 8\n    \n    nn.Conv2d(512, 1024, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(1024),\n    nn.LeakyReLU(0.2, inplace=True),\n    #128 x 1024 x 4 x 4\n    \n    nn.Conv2d(1024, 1, kernel_size=4, stride=1, padding=0, bias=False),\n    #128 x 1 x 1 x 1\n    \n    nn.Flatten(),\n    nn.Sigmoid()\n\n)","db78a1b8":"discriminator = to_device(discriminator, device)","4aa74e44":"latent_size=128","a99dcdf6":"generator = nn.Sequential(\n    #in: 128 x 1 x 1\n    \n    nn.ConvTranspose2d(latent_size, 1024, kernel_size=4, stride=1, padding=0, bias=False),\n    nn.BatchNorm2d(1024),\n    nn.ReLU(True),\n    #128 x 1024 x 4 x 4\n    \n    nn.ConvTranspose2d(1024, 512, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(512),\n    nn.ReLU(True),\n    #128 x 512 x 8 x 8\n    \n    nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(256),\n    nn.ReLU(True),\n    #128 x 256 x 16 x 16\n    \n    nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(128),\n    nn.ReLU(True),\n    #128 x 128 x 32 x 32\n    \n    nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.BatchNorm2d(64),\n    nn.ReLU(True),\n    #128 x 64 x 64 x 64\n    \n    nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1, bias=False),\n    #128 x 3 x 128 x 128\n    nn.Tanh()\n    \n    \n)","04c72d7e":"generator = to_device(generator, device)","77bb17bc":"def train_discriminator(real_images, opt_d):\n    opt_d.zero_grad()\n    \n    real_preds= discriminator(real_images)\n    real_targets = torch.ones(real_images.size(0), 1, device=device)\n    real_loss = F.binary_cross_entropy(real_preds, real_targets)\n    real_score = torch.mean(real_preds).item()\n    \n    latent = torch.randn(latent_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n    \n    fake_preds= discriminator(fake_images)\n    fake_targets = torch.zeros(fake_images.size(0), 1, device=device)\n    fake_loss = F.binary_cross_entropy(fake_preds, fake_targets)\n    fake_score = torch.mean(fake_preds).item()\n    \n    loss = real_loss + fake_loss\n    loss.backward(),\n    opt_d.step()\n    \n    return loss.item(), real_score, fake_score","7cc35a6a":"def train_generator(opt_g):\n    opt_g.zero_grad()\n    \n    latent = torch.randn(latent_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n    \n    preds = discriminator(fake_images)\n    targets = torch.ones(fake_images.size(0), 1, device=device)\n    loss = F.binary_cross_entropy(preds, targets)\n    \n    loss.backward(),\n    opt_g.step()\n    \n    return loss.item()","06737941":"sample_dir = \"generated\"\nos.makedirs(sample_dir, exist_ok=True)","d263b116":"def save_sample(index, fixed_latent, show=True):\n    fake_images = generator(fixed_latent)\n    fake_fname = \"generated-images-{0:0=4d}.png\".format(index)\n    save_image(denorm(fake_images), os.path.join(sample_dir, fake_fname), nrow=8)\n    if show:\n        fig, ax = plt.subplots(figsize=(8,8))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(fake_images.cpu().detach()[:32], nrow=8).permute(1,2,0))","370239f1":"fixed_latent = torch.randn(128, latent_size, 1, 1, device=device)\nsave_sample(0, fixed_latent, show=True)","3d4f6da0":"def fit(epochs, lr_d, lr_g, start_idx=1):\n    torch.cuda.empty_cache()\n    \n    losses_d = []\n    losses_g = []\n    real_scores = []\n    fake_scores = []\n    \n    opt_d = torch.optim.Adam(discriminator.parameters(), lr=lr_d, betas=(0.5, 0.999))\n    opt_g = torch.optim.Adam(generator.parameters(), lr=lr_g, betas=(0.5, 0.999))\n    \n    for epoch in range(epochs):\n        for real_images,_ in tqdm(train_dl):\n            loss_d, real_score, fake_score = train_discriminator(real_images, opt_d)\n            loss_g = train_generator(opt_g)\n            \n        losses_d.append(loss_d)\n        losses_g.append(loss_g)\n        real_scores.append(real_score)\n        fake_scores.append(fake_score)\n        \n        print(\"Epoch: [{}\/{}], loss_d: {:.4f}, loss_g: {:.4f}, real_score: {:.4f}, fake_score: {:.4f}\".format(\n        epoch+1, epochs, loss_d, loss_g, real_score, fake_score))\n        \n        save_sample(epoch+start_idx, fixed_latent, show=False)\n        \n    return losses_d, losses_g, real_scores, fake_scores","19958894":"epochs = 200\nlr_d = 10e-5\nlr_g = 10e-4","78cdac89":"history = [fit(epochs, lr_d, lr_g, start_idx=1)]","e4e1a1a0":"Image(\".\/generated\/generated-images-0200.png\")","6a9be0cf":"## Moving to the GPU","ece111fe":"## Preparing the data","7ae2f964":"## Importing the modules"}}