{"cell_type":{"f0a6ea1b":"code","a91d002e":"code","aba3643e":"code","08ff0c8c":"code","aaf8445c":"code","99598097":"code","c7adcac1":"code","3e778710":"code","5e714314":"code","9beff2ff":"code","46a4df45":"code","464105bd":"code","e2a11474":"code","5a630d38":"code","ff53e7bc":"code","55818d1e":"code","2c1b23ae":"code","28ace08d":"code","938eccf9":"code","48a8e379":"code","741259dd":"code","2ae56d10":"code","ddde9fd1":"code","781db22e":"code","5412725b":"code","9faa7d49":"code","cbe87200":"code","5531daa7":"code","4a7b90b5":"code","e955ef7f":"code","b1e9c32e":"code","ea048767":"code","07f365ae":"code","0a2f54d1":"code","2c283ace":"code","df71505a":"code","51b198d8":"code","aa6e7191":"code","9767a21a":"code","166775e2":"code","07a5a176":"code","b207eb8a":"code","d4acd36e":"code","020c1649":"code","5597512c":"code","bbe2af25":"code","7c7dfdfb":"code","13feb897":"code","55b04858":"code","42a5f7a9":"code","4a33888c":"code","0435f00b":"code","1dc00563":"code","071bc0bd":"code","8d6e100f":"code","f387b8db":"code","b0370f12":"code","d74108b2":"code","728323f7":"code","e37d2a40":"code","9e466fe4":"code","d2234a7b":"code","222b129c":"code","b75251ae":"code","9c3aeb6d":"markdown","8316d49f":"markdown","181844bd":"markdown"},"source":{"f0a6ea1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a91d002e":"data=pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nstore=pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\ntest=pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')\nprint(data.shape)\nprint(store.shape)\nprint(test.shape)\n","aba3643e":"data.head()","08ff0c8c":"store.head()","aaf8445c":"test.head()","99598097":"data.dtypes","c7adcac1":"data.describe()[['Sales','Customers']].loc['mean']","3e778710":"print(data.describe()[['Sales','Customers']].loc['min'])\ndata.describe()[['Sales','Customers']].loc['max']","5e714314":"print(data.Store.nunique())\ndata.Store.value_counts().head(50).plot.bar() #top 50 stores have 942 records","9beff2ff":"data.Store.value_counts().tail(50).plot.bar() # bottom 50 only have 758 records","46a4df45":"data.DayOfWeek.value_counts()","464105bd":"data.Open.value_counts()","e2a11474":"data.Promo.value_counts()","5a630d38":"data.StateHoliday.value_counts()","ff53e7bc":"data.SchoolHoliday.value_counts()","55818d1e":"store.isna().sum() #there are so many missing values","2c1b23ae":"data['Date']=pd.to_datetime(data['Date'],format='%Y-%m-%d')\nstore_id=data.Store.unique()[0] #6th store. we change the position to see each store data\nprint(store_id)\nstore_rows=data[data['Store']==store_id] #copying the data whose store ID is 6\nprint(store_rows.shape)\nstore_rows.resample('1D',on='Date')['Sales'].sum().plot.line(figsize=(14,4))","28ace08d":"test['Date']=pd.to_datetime(test['Date'],format='%Y-%m-%d')\nstore_test_rows=test[test['Store']==store_id]\nstore_test_rows['Date'].min(),store_test_rows['Date'].max()","938eccf9":"store_test_rows['Open'].value_counts()","48a8e379":"store_rows['Sales'].plot.hist()","741259dd":"store[store['Store']==store_id].T","2ae56d10":"store[~store['Promo2SinceYear'].isna()].iloc[0] ","ddde9fd1":"store.isna().sum()","781db22e":"store['Promo2SinceWeek']=store['Promo2SinceWeek'].fillna(0)","5412725b":"store['Promo2SinceYear']=store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])\nstore['PromoInterval']=store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0])\nstore['CompetitionOpenSinceMonth']=store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear']=store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])\nstore['CompetitionDistance']=store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())","9faa7d49":"store.isna().sum()","cbe87200":"store['Promo2SinceYear'].mode()","5531daa7":"data_merged=data.merge(store,on='Store',how='left')","4a7b90b5":"print(data.shape)\nprint(data_merged.shape)\nprint(data_merged.isna().sum().sum()) #cross checking if there are any missing values","e955ef7f":"data_merged","b1e9c32e":"data_merged.dtypes # 3 categorical column, 1 date column, rest all numerical","ea048767":"data_merged['day']=data_merged['Date'].dt.day\ndata_merged['month']=data_merged['Date'].dt.month\ndata_merged['year']=data_merged['Date'].dt.year\n#data_merged['Date'].dt.strftime('%a') - This is already in the data","07f365ae":"data_merged.dtypes\n#StateHoliday, StoreType,Assortment,PromoInterval","0a2f54d1":"data_merged['StateHoliday'].unique()\ndata_merged['StateHoliday']=data_merged['StateHoliday'].map({'0':0,0:0,'a':1,'b':2,'c':3})\ndata_merged['StateHoliday']=data_merged['StateHoliday'].astype(int)","2c283ace":"data_merged.dtypes","df71505a":"data_merged['Assortment'].unique()\ndata_merged['Assortment']=data_merged['Assortment'].map({'a':1,'b':2,'c':3})\ndata_merged['Assortment']=data_merged['Assortment'].astype(int)","51b198d8":"data_merged.PromoInterval.unique()","aa6e7191":"map_promo={'Jan,Apr,Jul,Oct':1, 'Feb,May,Aug,Nov':2, 'Mar,Jun,Sept,Dec':3}\ndata_merged['PromoInterval']=data_merged['PromoInterval'].map(map_promo)\ndata_merged","9767a21a":"# Train and validate Split\nfeatures= data_merged.columns.drop(['Sales','Date','Customers'])\nfrom sklearn.model_selection import train_test_split\ntrain_x,validate_x,train_y,validate_y = train_test_split(data_merged[features],np.log(data_merged['Sales']+1),test_size=0.2,random_state=1)\ntrain_x.shape,validate_x.shape,train_y.shape,validate_y.shape","166775e2":"from sklearn.tree import DecisionTreeRegressor\nmodel_dt=DecisionTreeRegressor(max_depth=11,random_state=1).fit(train_x,train_y)\nvalidate_y_pred=model_dt.predict(validate_x)","07a5a176":"def draw_tree(model, columns):\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    from IPython.display import Image\n    import os\n    from sklearn import tree\n    \n    graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n    os.environ[\"PATH\"] += os.pathsep + graphviz_path\n\n    dot_data = StringIO()\n    tree.export_graphviz(model,\n                         out_file=dot_data,\n                         feature_names=columns)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n    return Image(graph.create_png())","b207eb8a":"!pip install pydotplus","d4acd36e":"draw_tree(model_dt,features)","020c1649":"pd.Series(np.log(data_merged['Sales']+1)).plot.hist()","5597512c":"validate_y_pred = model_dt.predict(validate_x)\nfrom sklearn.metrics import mean_squared_error\nvalidate_y_inv=np.exp(validate_y)-1 #becaused we added +1 while log transformation\nvalidate_y_pred_inv=np.exp(validate_y_pred)-1\nnp.sqrt(mean_squared_error(validate_y_inv,validate_y_pred_inv))","bbe2af25":"model_dt.feature_importances_","7c7dfdfb":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nyvalues=model_dt.feature_importances_\nxvalues=features\nplt.bar(yvalues,xvalues)","13feb897":"data_merged.corr().loc['Sales'].sort_values(ascending=False)","55b04858":"plt.figure(figsize=(10,5))\n#plt.bar(features,model_dt.feature_importances_)\npd.Series(model_dt.feature_importances_,index=features)","42a5f7a9":"#Hyperparameter tuning\n\n# from sklearn.model_selection import GridSearchCV\n\n# parameters={'max_depth':list(range(5,20))}\n# base_model=DecisionTreeRegressor()\n# cv_model=GridSearchCV(base_model,param_grid=parameters,cv=5,return_train_score=True).fit(train_x,train_y)\n# parameters","4a33888c":"# cv_model.best_params_ \n# #few times, this will overfit. so instead of directly going with best params, \n# #plot the graph and decide optimal parameters","0435f00b":"# pd.DataFrame(cv_model.cv_results_).sort_values(by='mean_test_score',ascending=False)#[['param_max_depth','mean_test_score']]\n# #differnt types tried with different max depth","1dc00563":"# df_cv_results=pd.DataFrame(cv_model.cv_results_).sort_values(by='mean_test_score',ascending=False)\n# df_cv_results.set_index('param_max_depth')['mean_test_score'].plot.line()\n# df_cv_results.set_index('param_max_depth')['mean_train_score'].plot.line()\n","071bc0bd":"stores_avg_custs=data.groupby(['Store'])[['Customers']].mean().reset_index().astype(int)\ntest_1=test.merge(stores_avg_custs,on='Store',how='left')\ntest.shape,test_1.shape","8d6e100f":"test_merged=test_1.merge(store,on='Store',how='left')\ntest_merged.isna().sum()","f387b8db":"test_merged['Open']=test_merged['Open'].fillna(1)\ntest_merged['Date']=pd.to_datetime(test_merged['Date'],format='%Y-%m-%d')\ntest_merged['day']=test_merged['Date'].dt.day\ntest_merged['month']=test_merged['Date'].dt.month\ntest_merged['year']=test_merged['Date'].dt.year\ntest_merged['StateHoliday']=test_merged['StateHoliday'].map({'0':0,'a':1})\ntest_merged['StateHoliday']=test_merged['StateHoliday'].astype(int)\ntest_merged['Assortment']=test_merged['Assortment'].map({'a':1,'b':2,'c':3})\ntest_merged['Assortment']=test_merged['Assortment'].astype(int)\ntest_merged['StoreType']=test_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ntest_merged['StoreType']=test_merged['StoreType'].astype(int)\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ntest_merged['PromoInterval']=test_merged['PromoInterval'].map(map_promo)","b0370f12":"test_pred=model_dt.predict(test_merged[features])\ntest_pred_inv=np.exp(test_pred)-1","d74108b2":"submission=pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/sample_submission.csv')","728323f7":"submission.head()","e37d2a40":"submission_predicted=pd.DataFrame({'Id': test['Id'],'Sales':test_pred_inv})","9e466fe4":"submission_predicted.head()","d2234a7b":"submission_predicted.to_csv('submission.csv',index=False)","222b129c":"# Credit: kaggle.com\ndef ToWeight(y):\n    w = np.zeros(y.shape, dtype=float)\n    ind = y != 0\n    w[ind] = 1.\/(y[ind]**2)\n    return w\n\ndef rmspe(y, yhat):\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean( w * (y - yhat)**2 ))\n    return rmspe\n\n\nvalidate_y_inv=np.exp(validate_y)-1\nvalidate_y_pred_inv=np.exp(validate_y_pred)-1\nrmse_val=np.sqrt(mean_squared_error(validate_y_inv,validate_y_pred_inv))\nrmspe_val=rmspe(validate_y_inv,validate_y_pred_inv)\n","b75251ae":"print(rmse_val,rmspe_val)","9c3aeb6d":"##### Understanding the Data","8316d49f":"Doesn't always work. It may overfit","181844bd":"#### Missing value treatment"}}