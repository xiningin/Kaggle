{"cell_type":{"2b664c8e":"code","4b491688":"code","97c62bfc":"code","ce2172a2":"code","c4a67329":"code","d6ecdc4f":"code","2c47f0bd":"code","b904a8a2":"code","94f19318":"code","1cdaa596":"code","9ec9301a":"code","0d5ef17b":"code","e3a3750e":"code","bb795205":"code","87b679ff":"code","290a3f50":"code","25034c12":"code","93cb83fc":"code","cfef7e5a":"code","b877ecc0":"code","fb1aa18b":"code","950485cc":"code","357060a3":"code","6ba9bd49":"code","6d668b60":"code","7161559d":"code","52dc6876":"code","77d21ba6":"code","8f0b5aec":"code","5723cf48":"code","f08c1763":"code","1411efb3":"code","a3a55990":"code","dd96972a":"code","c4ce2142":"code","114c523d":"code","b98e92a4":"code","215af679":"code","175b85e1":"code","0dd25e8b":"code","f43e4cbc":"code","ef94b177":"code","40ee8d7b":"code","0149d39c":"code","24bf6607":"code","0237e68a":"code","d58be513":"code","f5ae05fa":"code","d93e7b3b":"code","9b6b4645":"code","87f69f88":"code","f9b09ef3":"code","a83cfb21":"code","d93d9695":"code","987c7b80":"code","ce0084a2":"code","1e83c93b":"code","58f84858":"code","daac3220":"code","fad9142b":"code","29190f56":"code","c28b843e":"code","049a8ac2":"markdown","6364cc21":"markdown","50f0ead7":"markdown","821fba60":"markdown","abaefba3":"markdown","9c05a6df":"markdown","ee151a69":"markdown","f3d54e3d":"markdown","5e22dbda":"markdown","52996b5a":"markdown","96122d05":"markdown","48c241ed":"markdown","218eb160":"markdown","63de2f97":"markdown","d7be322e":"markdown","61578c43":"markdown","d81a98df":"markdown","302915a0":"markdown","473d6ce7":"markdown","18bd2492":"markdown","6028df42":"markdown","978e4e2a":"markdown","a5f4654a":"markdown","0b3bcab0":"markdown","4b6d1360":"markdown","8ae48b53":"markdown","96fc7198":"markdown","b7758a14":"markdown","539873cb":"markdown","ae9e2ca9":"markdown","cfad0e15":"markdown","95f12618":"markdown","2a4c61c7":"markdown","827fc8ad":"markdown","f2ea5a88":"markdown"},"source":{"2b664c8e":"!pip install pycountry_convert \n!pip install calmap","4b491688":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pycountry_convert as pc\nimport matplotlib.pyplot as plt\nimport calmap\nfrom datetime import datetime, timedelta,date\nfrom matplotlib import ticker \nfrom scipy.interpolate import make_interp_spline, BSpline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","97c62bfc":"confirmed = pd.read_csv(\"\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv\", error_bad_lines=False)\nrecover = pd.read_csv(\"\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_recovered_global.csv\", error_bad_lines=False)\ndeath = pd.read_csv(\"\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_deaths_global.csv\", error_bad_lines=False)","ce2172a2":"confirmed.columns","c4a67329":"confirmed['Confirmed']= confirmed[confirmed.columns[4:-2]].sum(axis=1)\ndeath['Deaths']= death[death.columns[4:-2]].sum(axis=1)\nrecover['Recovered']= recover[recover.columns[4:-2]].sum(axis=1)\n\n\n","d6ecdc4f":"# confirmed.head()\ndf_covid19 = confirmed\ncols_to_use = death.columns.difference(confirmed.columns)\nprint(cols_to_use)\ndf_covid19 = pd.merge(df_covid19, death[cols_to_use], left_index=True, right_index=True, how='outer')\ncols_to_use = recover.columns.difference(confirmed.columns)\nprint(cols_to_use)\ndf_covid19 = pd.merge(df_covid19, recover[cols_to_use], left_index=True, right_index=True, how='outer')\n\n\n\n","2c47f0bd":"df_covid19 = df_covid19[['Province\/State', 'Country\/Region', 'Lat', 'Long',\n            'Confirmed', 'Deaths', 'Recovered']]\ndf_covid19['Active'] = df_covid19['Confirmed']-df_covid19['Deaths']-df_covid19['Recovered']\n","b904a8a2":"df_covid19['Last_Update']= [pd.to_datetime('4\/17\/20', format='%m\/%d\/%y')]*len(df_covid19)","94f19318":"df_covid19.head()","1cdaa596":"covid19 = pd.DataFrame(columns=['Country_Region','Last_Update','Deaths','Active','Confirmed', 'Lat','Long'])\ncovid19['Confirmed']=df_covid19[['Country\/Region','Confirmed']].groupby('Country\/Region').sum()['Confirmed']\ncovid19['Deaths']=df_covid19[['Country\/Region','Deaths']].groupby('Country\/Region').sum()['Deaths']\ncovid19['Recovered']=df_covid19[['Country\/Region','Recovered']].groupby('Country\/Region').sum()['Recovered']\ncovid19['Country_Region']=df_covid19[['Country\/Region','Confirmed','Deaths','Recovered']].groupby('Country\/Region').sum().index\ncovid19['Active']=df_covid19[['Country\/Region','Active']].groupby('Country\/Region').sum()['Active']\n# covid19['Lat']=df_covid[['Country\/Region','Lat','Confirmed','Deaths','Recovered']].groupby('Lat').sum().index\n# covid19['Long']=df_covid[['Country\/Region','Long','Confirmed','Deaths','Recovered']].groupby('Long').sum().index\n\ncovid19['Last_Update']= [pd.to_datetime('4\/17\/20', format='%m\/%d\/%y')]*len(covid19)\n","9ec9301a":"covid19.head()","0d5ef17b":"df_covid19 = covid19\ndf_confirmed = confirmed\ndf_deaths = death\ndf_recovered = recover\ndf_confirmed = df_confirmed.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_deaths = df_deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_recovered = df_recovered.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\n\n\ndf_covid19 = df_covid19.rename(columns={\"Country_Region\": \"country\"})\n\n","e3a3750e":"# Changing the conuntry names as required by pycountry_convert Lib\ndf_confirmed.loc[df_confirmed['country'] == \"US\", \"country\"] = \"USA\"\ndf_deaths.loc[df_deaths['country'] == \"US\", \"country\"] = \"USA\"\ndf_covid19.loc[df_covid19['country'] == \"US\", \"country\"] = \"USA\"\n# df_recovered.loc[df_recovered['country'] == \"US\", \"country\"] = \"USA\"\n\n\ndf_confirmed.loc[df_confirmed['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_deaths.loc[df_deaths['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_covid19.loc[df_covid19['country'] == \"Korea, South\", \"country\"] = \"South Korea\"\n# df_recovered.loc[df_recovered['country'] == 'Korea, South', \"country\"] = 'South Korea'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_deaths.loc[df_deaths['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_covid19.loc[df_covid19['country'] == \"Taiwan*\", \"country\"] = \"Taiwan\"\n# df_recovered.loc[df_recovered['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Kinshasa)\", \"country\"] = \"Democratic Republic of the Congo\"\n# df_recovered.loc[df_recovered['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\n\ndf_confirmed.loc[df_confirmed['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_deaths.loc[df_deaths['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_covid19.loc[df_covid19['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\n# df_recovered.loc[df_recovered['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\n\ndf_confirmed.loc[df_confirmed['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_deaths.loc[df_deaths['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_covid19.loc[df_covid19['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\n# df_recovered.loc[df_recovered['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Brazzaville)\", \"country\"] = \"Republic of the Congo\"\n# df_recovered.loc[df_recovered['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_deaths.loc[df_deaths['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_covid19.loc[df_covid19['country'] == \"Bahamas, The\", \"country\"] = \"Bahamas\"\n# df_recovered.loc[df_recovered['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_deaths.loc[df_deaths['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_covid19.loc[df_covid19['country'] == \"Gambia, The\", \"country\"] = \"Gambia\"\n# df_recovered.loc[df_recovered['country'] == 'Gambia, The', \"country\"] = 'Gambia'\n\n# getting all countries\ncountries = np.asarray(df_confirmed[\"country\"])\ncountries1 = np.asarray(df_covid19[\"country\"])\n# Continent_code to Continent_names\ncontinents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU' : 'Europe',\n    'na' : 'Others'\n}\n\n# Defininng Function for getting continent code for country.\ndef country_to_continent_code(country):\n    try:\n        return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n    except :\n        return 'na'\n\n#Collecting Continent Information\ndf_confirmed.insert(2,\"continent\", [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_deaths.insert(2,\"continent\",  [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_covid19.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in countries1[:]])\n# df_recovered.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in countries[:]] )   ","bb795205":"df_covid19.head()","87b679ff":"# fix region names\nconfirmed['Country\/Region']= confirmed['Country\/Region'].str.replace(\"Mainland China\", \"China\")\nconfirmed['Country\/Region']= confirmed['Country\/Region'].str.replace(\"US\", \"Unites States\")\ndeath['Country\/Region']= death['Country\/Region'].str.replace(\"Mainland China\", \"China\")\ndeath['Country\/Region']= death['Country\/Region'].str.replace(\"US\", \"Unites States\")\nrecover['Country\/Region']= recover['Country\/Region'].str.replace(\"Mainland China\", \"China\")\nrecover['Country\/Region']= recover['Country\/Region'].str.replace(\"US\", \"Unites States\")\n","290a3f50":"df_confirmed = df_confirmed.replace(np.nan, '', regex=True)\ndf_deaths = df_deaths.replace(np.nan, '', regex=True)","25034c12":"def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = 'linear' ):\n    # Tick-Parameters\n    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.tick_params(which='both', width=1,labelsize=label_size)\n    ax.tick_params(which='major', length=6)\n    ax.tick_params(which='minor', length=3, color='0.8')\n    \n    # Grid\n    plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n    plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n    # Plot Title\n    plt.title( plt_title,{'fontsize':title_fsize})\n    \n    # Yaxis sacle\n    plt.yscale(scale)\n    plt.minorticks_on()\n    # Plot Axes Labels\n    xl = plt.xlabel(axis_label[0],fontsize = axis_fsize)\n    yl = plt.ylabel(axis_label[1],fontsize = axis_fsize)\n    \ndef visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = \"linear\"):\n    x = 0\n    if figure == None:\n        f = plt.figure(figsize=(10,10))\n        # Sub plot\n        ax = f.add_subplot(111)\n    else :\n        f = figure[0]\n        # Sub plot\n        ax = f.add_subplot(figure[1],figure[2],figure[3])\n    ax.set_axisbelow(True)\n    plt.tight_layout(pad=10, w_pad=5, h_pad=5)\n    \n    stats = [confirmed, deaths]\n    label = [\"Confirmed\", \"Deaths\"]\n    \n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else: \n        params = [\"All\", \"All\"]\n    color = [\"darkcyan\",\"crimson\"]\n    marker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=4, markerfacecolor='#ffffff')\n    for i,stat in enumerate(stats):\n        if params[1] == \"All\" :\n            cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:]\n        else :\n            cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        date = np.arange(1,cases.shape[0]+1)[x:]\n        plt.plot(date,cases,label = label[i]+\" (Total : \"+str(cases[-1])+\")\",color=color[i],**marker_style)\n        plt.fill_between(date,cases,color=color[i],alpha=0.3)\n\n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:]\n    else :\n        Total_confirmed =  np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        \n    text = \"From \"+stats[0].columns[5]+\" to \"+stats[0].columns[-1]+\"\\n\"\n    text += \"Mortality rate : \"+ str(int(Total_deaths[-1]\/(Total_confirmed[-1])*10000)\/100)+\"\\n\"\n    text += \"Last 5 Days:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-6])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-6])+\"\\n\"\n    text += \"Last 24 Hours:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-2])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-2])+\"\\n\"\n    \n    plt.text(0.02, 0.78, text, fontsize=15, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n    \n    # Plot Axes Labels\n    axis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"No of Cases\"]\n    \n    # Plot Parameters\n    plot_params(ax,axis_label,scale = scale)\n    \n    # Plot Title\n    if params[1] == \"All\" :\n        plt.title(\"COVID-19 Cases World\",{'fontsize':25})\n    else:   \n        plt.title(\"COVID-19 Cases for \"+params[1] ,{'fontsize':25})\n        \n    # Legend Location\n    l = plt.legend(loc= \"best\",fontsize = 15)\n    \n    if figure == None:\n        plt.show()\n        \ndef get_total_cases(cases, country = \"All\"):\n    if(country == \"All\") :\n        return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1]\n    else :\n        return np.sum(np.asarray(cases[cases[\"country\"] == country].iloc[:,5:]),axis = 0)[-1]\n    \ndef get_mortality_rate(confirmed,deaths, continent = None, country = None):\n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else :\n        params = [\"All\", \"All\"]\n    \n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    else :\n        Total_confirmed =  np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    \n    return np.nan_to_num(mortality_rate)\ndef dd(date1,date2):\n    return (datetime.strptime(date1,'%m\/%d\/%y') - datetime.strptime(date2,'%m\/%d\/%y')).days\n\n\n\n","93cb83fc":"df_countries_cases = df_covid19.copy().drop(['continent','Last_Update'],axis =1)\ndf_countries_cases.index = df_countries_cases[\"country\"]\ndf_countries_cases = df_countries_cases.drop(['country'],axis=1)\n\ndf_continents_cases = df_covid19.copy().drop(['country','Last_Update'],axis =1)\ndf_continents_cases = df_continents_cases.groupby([\"continent\"]).sum()\n\ndf_countries_cases.fillna(0,inplace=True)\ndf_continents_cases.fillna(0,inplace=True)","cfef7e5a":"df_t = pd.DataFrame(pd.to_numeric(df_countries_cases.sum()),dtype=np.float64).transpose()\ndf_t[\"Mortality Rate (per 100)\"] = np.round(100*df_t[\"Deaths\"]\/df_t[\"Confirmed\"],2)\ndf_t.style.background_gradient(cmap='Wistia',axis=1).format(\"{:.0f}\",subset=[\"Confirmed\"])","b877ecc0":"df_continents_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_continents_cases[\"Deaths\"]\/df_continents_cases[\"Confirmed\"],2)\ndf_continents_cases.style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])","fb1aa18b":"# df_countries_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Wistia')\ndf_countries_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_countries_cases[\"Deaths\"]\/df_countries_cases[\"Confirmed\"],2)\ndf_countries_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])","950485cc":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].index[-10:],df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].values[-10:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\n","357060a3":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Deaths')[\"Deaths\"].index[-10:],df_countries_cases.sort_values('Deaths')[\"Deaths\"].values[-10:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Deaths Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\n","6ba9bd49":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Recovered')[\"Recovered\"].index[-10:],df_countries_cases.sort_values('Recovered')[\"Recovered\"].values[-10:],color=\"limegreen\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Recovered Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Recovered Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\n","6d668b60":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Active')[\"Active\"].index[-10:],df_countries_cases.sort_values('Active')[\"Active\"].values[-10:],color=\"darkorange\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Active Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Active Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\n","7161559d":"df_countries_cases[['Confirmed','Deaths','Recovered','Active','Mortality Rate (per 100)']].iloc[:,:].corr().style.background_gradient(cmap='Reds')","52dc6876":"df_continents_cases[['Confirmed','Deaths','Recovered','Active','Mortality Rate (per 100)']].iloc[:,:].corr().style.background_gradient(cmap='Reds')","77d21ba6":"case_nums_country = df_confirmed.drop('Confirmed',axis=1).groupby(\"country\").sum().drop(['Lat','Long'],axis =1).apply(lambda x: x[x > 0].count(), axis =0)\n# print(case_nums_country.index.values)\nd = [datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in case_nums_country.index]\n\nf = plt.figure(figsize=(15,8))\nf.add_subplot(111)\nmarker_style = dict(c=\"crimson\",linewidth=6, linestyle='-', marker='o',markersize=8, markerfacecolor='#ffffff')\nplt.plot(d, case_nums_country,**marker_style)\nplt.tick_params(labelsize = 14)\nplt.xticks(list(np.arange(0,len(d),int(len(d)\/5))),d[:-1:int(len(d)\/5)]+[d[-1]])\n\n#labels\nplt.xlabel(\"Dates\",fontsize=18)\nplt.ylabel(\"Number of Countries\/Regions\",fontsize=1)\nplt.grid(alpha = 0.3)\n\nplt.show()\nplt.close()","8f0b5aec":"cols = 1\nrows = 1\nf = plt.figure(figsize=(10,10*rows))\n\nvisualize_covid_cases(df_confirmed.drop('Confirmed',axis=1), df_deaths.drop('Deaths',axis=1),continent = \"All\",figure = [f,rows,cols, 1])\n\nplt.show()","5723cf48":"df_continents= df_confirmed.groupby([\"continent\"]).sum()\ncontinents = df_continents.sort_values(df_continents.columns[-1],ascending = False).index\n\ncols =2\nrows = int(np.ceil(continents.shape[0]\/cols))\nf = plt.figure(figsize=(20,9*rows))\nfor i,continent in enumerate(continents):\n    visualize_covid_cases(df_confirmed.drop('Confirmed',axis=1), df_deaths.drop('Deaths',axis=1), continent = continent,figure = [f,rows,cols, i+1])\n\nplt.show()","f08c1763":"temp = df_confirmed.groupby('country').sum().sort_values(df_confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 9:\n        if country != \"India\" and country != \"Japan\" :\n            continue\n    days = 45\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    if country != \"India\":\n        plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n    else:\n        marker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n        plt.plot(date,t,\"-.\",label = country,**marker_style)\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-12))\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-4))\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-4))\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n# India is following trend similar to doulbe the cases in 4 days but it may increase the rate \nx = np.arange(0,int(days-5))\ny = 2**(x\/4+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. every 4 days\",(x[-3],y[-1]),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries\\n and India (confirmed) \",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.show()","1411efb3":"confirmed.head()","a3a55990":"country='Canada'\ndf = confirmed[confirmed['Country\/Region'] == country]","dd96972a":"df.head()","c4ce2142":"# df =df.drop(['Population'], axis=1)\ndf[df.columns[4:-2]]","114c523d":"df[df.columns[4:-2]].sum()\n","b98e92a4":"df1 = pd.DataFrame(df[df.columns[4:-2]].sum(),columns=['confirmed'])\ndf1.index=pd.to_datetime(df1.index,format='%m\/%d\/%y')\ndf1['confirmed'] = df1['confirmed'].diff().fillna(df1['confirmed'][0]).astype(np.int64)\ndf1.tail()","215af679":"import matplotlib.pyplot as plt\nplt.plot(df1)","175b85e1":"df1.shape","0dd25e8b":"df1","f43e4cbc":"test_data_size = 10\n\ntrain_data = df1.iloc[:-test_data_size]\ntest_data = df1.iloc[-test_data_size:]\n\ntrain_data.shape","ef94b177":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()","40ee8d7b":"scaler.fit(train_data)","0149d39c":"scaled_train=scaler.transform(train_data)\nscaled_test=scaler.transform(test_data)\nprint(scaled_train[-5:])","24bf6607":"def create_sequences(data, seq_length):\n    xs = []\n    ys = []\n\n    for i in range(len(data)-seq_length-1):\n        x = data[i:(i+seq_length)]\n        y = data[i+seq_length]\n        xs.append(x)\n        ys.append(y)\n\n    return np.array(xs), np.array(ys)","0237e68a":"import torch\nseq_length = 5\nX_train, y_train = create_sequences(scaled_train, seq_length)\nX_test, y_test = create_sequences(scaled_test, seq_length)\n\nX_train = torch.from_numpy(X_train).float()\ny_train = torch.from_numpy(y_train).float()\n\nX_test = torch.from_numpy(X_test).float()\ny_test = torch.from_numpy(y_test).float()","d58be513":"X_train.shape","f5ae05fa":"from torch import nn, optim","d93e7b3b":"class CoronaVirusPredictor(nn.Module):\n\n  def __init__(self, n_features, n_hidden, seq_len, n_layers=2):\n    super(CoronaVirusPredictor, self).__init__()\n\n    self.n_hidden = n_hidden\n    self.seq_len = seq_len\n    self.n_layers = n_layers\n\n    self.lstm = nn.LSTM(\n      input_size=n_features,\n      hidden_size=n_hidden,\n      num_layers=n_layers,\n      dropout=0.5\n    )\n\n    self.linear = nn.Linear(in_features=n_hidden, out_features=1)\n\n  def reset_hidden_state(self):\n    self.hidden = (\n        torch.zeros(self.n_layers, self.seq_len, self.n_hidden),\n        torch.zeros(self.n_layers, self.seq_len, self.n_hidden)\n    )\n\n  def forward(self, sequences):\n    lstm_out, self.hidden = self.lstm(\n      sequences.view(len(sequences), self.seq_len, -1),\n      self.hidden\n    )\n    last_time_step = \\\n      lstm_out.view(self.seq_len, len(sequences), self.n_hidden)[-1]\n    y_pred = self.linear(last_time_step)\n    return y_pred","9b6b4645":"def train_model(\n  model, \n  train_data, \n  train_labels, \n  test_data=None, \n  test_labels=None\n):\n  loss_fn = torch.nn.MSELoss(reduction='sum')\n\n  optimiser = torch.optim.Adam(model.parameters(), lr=1e-3)\n  num_epochs = 1000\n\n  train_hist = np.zeros(num_epochs)\n  test_hist = np.zeros(num_epochs)\n\n  for t in range(num_epochs):\n    model.reset_hidden_state()\n\n    y_pred = model(X_train)\n\n    loss = loss_fn(y_pred.float(), y_train)\n\n    if test_data is not None:\n      with torch.no_grad():\n        y_test_pred = model(X_test)\n        test_loss = loss_fn(y_test_pred.float(), y_test)\n      test_hist[t] = test_loss.item()\n\n      if t % 10 == 0:  \n        print(f'Epoch {t} train loss: {loss.item()} test loss: {test_loss.item()}')\n    elif t % 10 == 0:\n      print(f'Epoch {t} train loss: {loss.item()}')\n\n    train_hist[t] = loss.item()\n    \n    optimiser.zero_grad()\n\n    loss.backward()\n\n    optimiser.step()\n  \n  return model.eval(), train_hist, test_hist","87f69f88":"model = CoronaVirusPredictor(\n  n_features=1, \n  n_hidden=512, \n  seq_len=seq_length, \n  n_layers=2\n)\nmodel, train_hist, test_hist = train_model(\n  model, \n  X_train, \n  y_train, \n  X_test, \n  y_test\n)","f9b09ef3":"fig = plt.figure(figsize=(10,7))\nax = fig.add_subplot(111)\n\nlns1 = ax.plot(train_hist, label=\"Training loss\", color='orange')\nax2 = ax.twinx()\n\nlns2 = ax2.plot(test_hist, label=\"Test loss\", color='blue')\n# plt.ylim((0, 5))\n\n# added these three lines\nlns = lns1+lns2\nlabs = [l.get_label() for l in lns]\nax.legend(lns, labs, loc=0, fontsize=20)\nax.set_xlabel('Iterations', fontsize=20)\nax.set_ylabel('Loss', fontsize=20)\nax2.set_ylabel('Loss', fontsize=20)\n\n\n\n\n","a83cfb21":"with torch.no_grad():\n  test_seq = X_test[:1]\n  preds = []\n  for _ in range(len(X_test)):\n    y_test_pred = model(test_seq)\n    pred = torch.flatten(y_test_pred).item()\n    preds.append(pred)\n    new_seq = test_seq.numpy().flatten()\n    new_seq = np.append(new_seq, [pred])\n    new_seq = new_seq[1:]\n    test_seq = torch.as_tensor(new_seq).view(1, seq_length, 1).float()","d93d9695":"true_cases = scaler.inverse_transform(\n    np.expand_dims(y_test.flatten().numpy(), axis=0)\n).flatten()\n\npredicted_cases = scaler.inverse_transform(\n  np.expand_dims(preds, axis=0)\n).flatten()","987c7b80":"plt.figure(figsize=(10,7))\n# plt.plot(\n#   df1.index[:len(train_data)], \n#   scaler.inverse_transform(train_data).flatten(),\n#   label='Historical Daily Cases'\n# )\n\nplt.plot(\n  df1.index[len(train_data):len(train_data) + len(true_cases)], \n  true_cases,\n  label='Real Daily Cases'\n)\n\nplt.plot(\n  df1.index[len(train_data):len(train_data) + len(true_cases)], \n  predicted_cases, \n  label='Predicted Daily Cases'\n)\n\nplt.legend(fontsize=20);","ce0084a2":"scaler = MinMaxScaler()\n\nscaler = scaler.fit(df1.values)\n\nall_data = scaler.transform(df1.values)\n\nall_data.shape","1e83c93b":"X_all, y_all = create_sequences(all_data, seq_length)\n\nX_all = torch.from_numpy(X_all).float()\ny_all = torch.from_numpy(y_all).float()\n\nmodel = CoronaVirusPredictor(\n  n_features=1, \n  n_hidden=512, \n  seq_len=seq_length, \n  n_layers=2\n)\nmodel, train_hist, _ = train_model(model, X_all, y_all)","58f84858":"DAYS_TO_PREDICT = 12\n\nwith torch.no_grad():\n  test_seq = X_all[:1]\n  preds = []\n  for _ in range(DAYS_TO_PREDICT):\n    y_test_pred = model(test_seq)\n    pred = torch.flatten(y_test_pred).item()\n    preds.append(pred)\n    new_seq = test_seq.numpy().flatten()\n    new_seq = np.append(new_seq, [pred])\n    new_seq = new_seq[1:]\n    test_seq = torch.as_tensor(new_seq).view(1, seq_length, 1).float()","daac3220":"predicted_cases = scaler.inverse_transform(\n  np.expand_dims(preds, axis=0)\n).flatten()","fad9142b":"predicted_index = pd.date_range(\n  start=df1.index[-1],\n  periods=DAYS_TO_PREDICT + 1,\n  closed='right'\n)\n\npredicted_cases = pd.Series(\n  data=predicted_cases,\n  index=predicted_index\n)\nplt.figure(figsize=(10,7))\nplt.plot(predicted_cases, label='Predicted Daily Cases')\nplt.legend(fontsize=20);","29190f56":"predicted_cases","c28b843e":"plt.figure(figsize=(10,7))\nplt.plot(df1, label='Historical Daily Cases')\nplt.plot(predicted_cases, label='Predicted Daily Cases')\nplt.legend(fontsize=20);","049a8ac2":"# Use all data for training","6364cc21":"## Predict","50f0ead7":"### Coninent Wise Reported Cases \nConinent Wise reported confirmed cases, recovered cases, deaths, active cases","821fba60":"# Predicting future cases\n\n### We train the model with full dataset and use the trained model to predict the confirmed cases for next 12 days","abaefba3":"### Country Wise Reported Cases\nCountry Wise reported confirmed cases, recovered cases, deaths, active cases","9c05a6df":"### COVID-19 Spread Trends in Different Continents","ee151a69":"### The trained model thinks that the number of confirmed cases will rise in the future. However, the more you go into the future, the more you should not trust the model prediction","f3d54e3d":"### COVID-19 Spread Comparison of few most affected countries and INDIA****","5e22dbda":"## Merge confirmed, recovered, death cases into one dataframe","52996b5a":"## Dataframe with countrywise cases","96122d05":"## Scale the dataset in the range (0,1)","48c241ed":"\n### Let\u2019s create an instance of our model and train it:","218eb160":"## Next, we use all the data to plot the results","63de2f97":"## Import libraries","d7be322e":"## Add continent information","61578c43":"### Continent Wise Correlation","d81a98df":"# Time-series forecasting using RNN model\n<hr>\n## Preparing training and test data for predicting daily confirmed cases based on country","302915a0":"### Global Reported Cases till Date\nTotal number of confirmed cases, deaths reported, revoveries and active cases all across the world","473d6ce7":"## Split confirmed daily cases into train and test splits","18bd2492":"## Create sequences of length 5 for LSTM training","6028df42":"### Top 10 countries (Confirmed Cases and Deaths)","978e4e2a":"# Correlation Analysis\n<hr>\nPlotting Heat map of correlation of confirmed cases, recovered cases, deaths and active cases.\n\n### Country wise Correlation","a5f4654a":"# Training\n","0b3bcab0":"## Training and Test Loss ","4b6d1360":"# Building an RNN (a type of LSTM) model","8ae48b53":"## Preprocessing for analysis","96fc7198":"## Predicted daily cases","b7758a14":"### Daily confirmed cases reported for Canada","539873cb":"## Installing libraries","ae9e2ca9":"## Read the COVID19 time-series dataset","cfad0e15":"## Spread Across Globe \n<hr> \n### Number of countries affected over the time","95f12618":"# General Analysis of Data\n<hr>\nGetting country wise and continent wise data.","2a4c61c7":"### COVID-19 Spread Trends in Different Continents","827fc8ad":"## Our CoronaVirusPredictor contains 3 methods:\n<hr>\n- __constructor__ - initialize all helper data and create the layers\n- __reset_hidden_state__ - we\u2019ll use a stateless LSTM, so we need to reset the state after each example\n- __forward__ - get the sequences, pass all of them through the LSTM layer, at once. We take the output of the last time step and pass it through our linear layer to get the prediction.\n","f2ea5a88":"# Defining Functions\n <hr>\n* plot_params()\n* visualize_covid_cases()\n* get_mortality_rate()"}}