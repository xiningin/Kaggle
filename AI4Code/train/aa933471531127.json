{"cell_type":{"6ae5ebe5":"code","172b8197":"code","512e4bca":"code","950c3d65":"code","8e7a0193":"code","ab6c8027":"code","d8e48474":"code","fe466851":"code","c4f10ee6":"code","0b39f40a":"code","47c15646":"code","1390c956":"code","5de8984c":"code","7530f89b":"code","068caa17":"code","2c750347":"code","6aad20ed":"code","8f591f01":"code","7e29bd44":"code","babb571b":"code","9ead27ee":"code","00447040":"code","b7b5bab3":"code","e5f2f7e9":"code","2996a2ed":"code","d357eed0":"code","7abe2700":"code","23417fd1":"code","a5181340":"code","bcd55c32":"code","4c114c7f":"code","1b9f9f54":"code","06246d21":"code","ef404356":"code","462f288b":"code","2ce944a4":"code","d096b6e4":"code","47564142":"code","e33f14d7":"code","6938a3c6":"code","ede7236f":"code","ce686601":"code","cb6beacc":"code","a3d7c637":"code","5fa9a5be":"code","84bb8ee4":"code","8797a235":"code","9cba0fa7":"code","84458af9":"code","d545460b":"code","72bb32c7":"code","a9ace405":"code","9f272480":"code","9133abc2":"code","972155b3":"code","bb68f94f":"code","a7523999":"code","093d687c":"code","2ff90142":"code","2259c14e":"code","83b35151":"code","723b76f5":"code","43efdc5d":"code","2563cf25":"code","dd60a00d":"code","4789672f":"code","71341445":"code","8e359f4f":"code","0002f567":"code","113fba01":"code","b9385996":"code","57bb9047":"code","2154daf4":"code","71ffbad7":"code","0ce74104":"code","187e861f":"code","073da282":"code","74fa4c3b":"code","d0a8e985":"code","e1f16227":"code","29712ddc":"code","98ecdc4a":"code","6b953d9d":"code","708f86cb":"code","ae0f571f":"code","c1d215a9":"code","a024f9e8":"code","56856598":"code","2731e1d8":"code","2ae6f241":"code","70ca3390":"code","ac6c1ea2":"code","f9996377":"code","20d57cff":"code","22526a54":"code","4c6c5827":"code","458c8249":"code","1e8d4b7a":"code","73bfdcc6":"code","bff8a515":"code","73cbd37b":"markdown","40ab78f0":"markdown","e19fd8a9":"markdown","f0b4a178":"markdown","e84c3392":"markdown","a6ce57fd":"markdown","0c5e0a1f":"markdown","16a59990":"markdown","0382b90c":"markdown","cfa4b038":"markdown","38ca019c":"markdown","14da8115":"markdown","348cd7e6":"markdown","6ab89d71":"markdown","f7f04faa":"markdown","5e81f449":"markdown","bdca9f34":"markdown","15e1ef03":"markdown","164936d9":"markdown","aa20f4d0":"markdown","a2aa0e53":"markdown","8332d05a":"markdown","9f6b8d7a":"markdown","37b979d3":"markdown","8b41dab3":"markdown","f808dc12":"markdown","fa38f3e1":"markdown","f4ba30f3":"markdown","e986510f":"markdown","313322b6":"markdown","56f848ea":"markdown","340fd7f9":"markdown","a4765e78":"markdown","f36ece78":"markdown","29ec7c24":"markdown","41bac72a":"markdown","45c81bc2":"markdown","1301eab1":"markdown","f6aaf8e8":"markdown","428f8016":"markdown","2e3e32e6":"markdown","ce697d5e":"markdown","6ccb91cd":"markdown","ee69d67c":"markdown","cf5217d2":"markdown","7dfcb8e9":"markdown","28e37331":"markdown","2e69bd69":"markdown","71ee1d8b":"markdown","84a5fd78":"markdown","c98dc56b":"markdown","4008992a":"markdown"},"source":{"6ae5ebe5":"# Import our visual libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# Import text clearning libraries\nimport re\nfrom bs4 import BeautifulSoup\nimport nltk\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","172b8197":"# Input full file path for True news dataset\nreal = pd.read_csv(\"\/kaggle\/input\/fake-and-real-news-dataset\/True.csv\")\nreal.head()","512e4bca":"# Input full file path for Fake news dataset\nfake = pd.read_csv(\"\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv\")\nfake.head()","950c3d65":"print(\"Real news count: \" + str(len(real)))\nprint(\"Fake news count: \" + str(len(fake)))\nprint(\"Total available entries: \" + str(len(real) + len(fake)))","8e7a0193":"# Merge the datasets\nreal[\"label\"] = 1\nfake[\"label\"] = 0\n\nframe = [real, fake]\ndf = pd.concat(frame)\n\ndf.head()","ab6c8027":"df.tail()","d8e48474":"# Check to see if any columns have missing values\ndf.isnull().sum()","fe466851":"# Get basic information on dataset\ndf.info()","c4f10ee6":"# Run this cell to avoid indexes of previous datasets from overlapping\ndf.reset_index(inplace = True)\ndf.drop(\"index\", axis=1, inplace = True)","0b39f40a":"df.columns","47c15646":"df[\"text\"][40000]","1390c956":"df[\"text\"][10000]","5de8984c":"# 0 for fake\n# 1 for true\nsns.set(style=\"darkgrid\")\nsns.countplot(df[\"label\"])","7530f89b":"df[\"subject\"].value_counts()","068caa17":"# Chart to show count of subject by label\nplt.figure(figsize=(12,9))\nsns.set(style=\"darkgrid\")\nsns.countplot(df[\"subject\"], hue=df[\"label\"])","2c750347":"set(df[\"date\"])","6aad20ed":"# Filter out dates with http links\nhttpremove = \"http\"\nfilter1 = df[\"date\"].str.contains(httpremove)\ndf_ = df[filter1]\ndf_","8f591f01":"df_[\"text\"][30775]","7e29bd44":"# Dataset with wrong dates and meanliness text\ndf_ = df[df[\"date\"].apply(lambda x: len(x) > 20)]\ndf_","babb571b":"# Want to remove entries which are not dates\ndf = df[df[\"date\"].apply(lambda x: len(x) < 20)]\ndf.head()","9ead27ee":"# 44888 entries after removing non-dates\ndf[\"title\"].count()","00447040":"df_ = df.copy()","b7b5bab3":"df_[\"date\"]","e5f2f7e9":"# Transform dates to datetime\n# Use to_period('M') to get datetime to month\ndf_['date'] = pd.to_datetime(df_['date']).dt.to_period('M')\ndf_.head()","2996a2ed":"# Check count of articles by Year\n# Over half of the articles are from 2017\ndf_[\"date\"].apply(lambda x: (str(x)[:4])).value_counts()","d357eed0":"# Get number of articles by Year-Month\n# Change date type to string from datetime format\ndf_[\"date\"] = df_[\"date\"].apply(lambda x: (str(x)[:7]))\ndf_.head()","7abe2700":"# DataFrame of year of count by Year-Month\nyear_month = pd.DataFrame(df_[\"date\"].value_counts()).sort_index()\nyear_month.reset_index(inplace=True)\nyear_month[\"index\"] = year_month[\"index\"].astype(str)\nyear_month","23417fd1":"# Count of articles by Month\nplt.figure(figsize=(12,9))\nplt.bar(year_month[\"index\"], year_month[\"date\"])\nplt.xticks(rotation=45)\nplt.xlabel(\"Year and Month\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of articles by Month\/Year\")\nplt.show","a5181340":"# Plot count of articles by Month-Year\ndf_1 = df_[df_[\"label\"]==1]\ndf_0 = df_[df_[\"label\"]==0]\ndf_1 = pd.DataFrame(df_1[\"date\"].value_counts()).sort_index()\ndf_1.rename(columns={\"date\": \"true\"}, inplace=True)\ndf_0 = pd.DataFrame(df_0[\"date\"].value_counts()).sort_index()\ndf_0.rename(columns={\"date\": \"false\"}, inplace=True)\n\nnew_df = df_1.join(df_0, how='outer')\nnew_df.reset_index(inplace=True)\nnew_df","bcd55c32":"# Plot Count of articles by Month\nplt.figure(figsize=(15,7))\nplt.plot(new_df[\"index\"], new_df[\"true\"], label=\"True\")\nplt.plot(new_df[\"index\"], new_df[\"false\"], color=\"red\", label=\"Fake\")\nplt.xticks(rotation=45)\nplt.legend(facecolor='white')\nplt.xlabel(\"Year and Month\")\nplt.ylabel(\"Count\")\nplt.title(\"Count of articles by Month\/Year\")\nplt.show","4c114c7f":"# Create side-by-side histograms of True and Fake news text\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(14,9))\n\ntrue_length = df[df[\"label\"]==1][\"text\"].str.len()\nax1.set_title(\"True text\")\nax1.hist(true_length, color=\"blue\")\n\nfake_length = df[df[\"label\"]==0][\"text\"].str.len()\nax2.set_title(\"Fake text\")\nax2.hist(fake_length, color=\"red\")\n\nfig.suptitle(\"Length of text (by characters)\")\nplt.show()","1b9f9f54":"df[\"title\"].count()","06246d21":"# Create side-by-side histograms of True and Fake news text\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(14,9))\n\ntrue_length = df[df[\"label\"]==1][\"title\"].str.len()\nax1.set_title(\"True titles\")\nax1.hist(true_length, color=\"blue\")\n\nfake_length = df[df[\"label\"]==0][\"title\"].str.len()\nax2.set_title(\"Fake titles\")\nax2.hist(fake_length, color=\"red\")\n\nfig.suptitle(\"Length of title (by characters)\")\nplt.show()","ef404356":"# Merge text and title columns, remove title, subject and date.\ndf['text'] = df['title'] + \" \" + df['text']\ndel df['title']\ndel df['subject']\ndel df['date']","462f288b":"# Check if anything missing after cleaning\ndf.isna().sum()","2ce944a4":"df.head()","d096b6e4":"# Stopwords to remove from text will have little effect on the context of the text\n# Stopwords in list already in lower case\nfrom nltk.corpus import stopwords\nstop_words = stopwords.words('english')\nprint(stop_words)","47564142":"# Use this to deal with apostophes and abbreviation\n# df_[\"news\"] = df_['news'].str.replace('[^\\w\\s]','')\ndef remove_apostrophe_abbrev(text):\n    return re.sub('[^\\w\\s]','', text)\n\n# Function to remove stopwords\ndef remove_stop_words(text):\n    clean_text = []\n    for word in text.split():\n        if word.strip().lower() not in stop_words:\n            clean_text.append(word)\n            \n    return \" \".join(clean_text)\n","e33f14d7":"# Text example of stop words removed\nremove_stop_words(df[\"text\"][0])","6938a3c6":"# Functions for cleaning text\n\n# Remove html tags, using regex is bad idea\ndef remove_html_tags(text):\n    soup = BeautifulSoup(text, \"html.parser\")\n    return soup.get_text()\n\n# Remove links in text, http and https\n# s? in regex means or s (case sensitive)\ndef remove_links(text):\n    return re.sub('https?:\\\/\\\/\\S+', '', text)\n\n# Remove 's (possessive pronouns) from text\n# Two kinds of apostophes found\ndef remove_possessive_pronoun(text):\n    return re.sub(\"\u2019s|'s\", '', text)\n\n# Remove between brackets and their contents\ndef remove_between_brackets(text):\n    return re.sub('\\([^]]*\\)', '', text)\n\n# Remove square brackets and their contents\ndef remove_between_square_brackets(text):\n    return re.sub('\\[[^]]*\\]', '', text)\n\n# Remove curly brackets and their contents\n# Useful to remove any JavaScript scripts, though removed\n# through html as above\ndef remove_between_curly_brackets(text):\n    return re.sub('\\{[^]]*\\}', '', text)\n\ndef remove_n_space(text):\n    return re.sub('\\n', '', text)\n\ndef text_cleaner(text):\n    text = remove_html_tags(text)\n    text = remove_links(text)\n    text = remove_possessive_pronoun(text)\n    text = remove_apostrophe_abbrev(text)\n    text = remove_between_brackets(text)\n    text = remove_between_square_brackets(text)\n    text = remove_between_curly_brackets(text)\n    text = remove_n_space(text)\n    text = remove_stop_words(text)\n    \n    return text","ede7236f":"# Apply cleaning functions to text\ndf[\"text\"] = df[\"text\"].apply(text_cleaner)","ce686601":"from wordcloud import WordCloud, STOPWORDS ","cb6beacc":"# True news wordcloud\nplt.figure(figsize=(15,15))\nwordcloud = WordCloud(max_words = 1000 , width = 1600 , \n                      height = 800 , stopwords = STOPWORDS).generate(\" \".join(df[df[\"label\"] == 1].text))\n\nplt.axis(\"off\")\nplt.imshow(wordcloud)","a3d7c637":"# Fake news wordcloud\nplt.figure(figsize=(15,15))\nwordcloud = WordCloud(max_words = 1000 , width = 1600 , \n                      height = 800 , stopwords = STOPWORDS).generate(\" \".join(df[df[\"label\"] == 0].text))\n\nplt.axis(\"off\")\nplt.imshow(wordcloud)","5fa9a5be":"from collections import Counter","84bb8ee4":"# Get 25 most common words in True news\ntrue_corpus = pd.Series(\" \".join(df[df[\"label\"] == 1].text))[0].split()\n\ncounter = Counter(true_corpus)\ntrue_common = counter.most_common(25)\ntrue_common = dict(true_common)\ntrue_common","8797a235":"# as a dataframe\ntrue_common_df = pd.DataFrame(true_common.items(), columns = [\"words\", \"count\"])\ntrue_common_df.set_index(\"words\")","9cba0fa7":"# Histogram of 25 true common words\nplt.figure(figsize=(12,9))\nplt.bar(true_common.keys(), true_common.values())\nplt.xticks(rotation=45)\nplt.xlabel(\"Common words\")\nplt.ylabel(\"Count\")\nplt.title(\"25 Most common words (True)\")\nplt.show","84458af9":"# Get 25 most common words in Fake news\nfake_corpus = pd.Series(\" \".join(df[df[\"label\"] == 0].text))[0].split()\n\ncounter = Counter(fake_corpus)\nfake_common = counter.most_common(25)\nfake_common = dict(fake_common)\nfake_common","d545460b":"# as a dataframe\nfake_common_df = pd.DataFrame(fake_common.items(), columns = [\"words\", \"count\"])\nfake_common_df.set_index(\"words\")","72bb32c7":"# Histogram of 25 fake common words\nplt.figure(figsize=(12,9))\nplt.bar(fake_common.keys(), fake_common.values(), color=\"red\")\nplt.xticks(rotation=45)\nplt.xlabel(\"Common words\")\nplt.ylabel(\"Count\")\nplt.title(\"25 Most common words (Fake)\")\nplt.show","a9ace405":"from nltk.util import ngrams","9f272480":"# Find most common bigrams in True news\ntext = pd.Series(\" \".join(df[df[\"label\"] == 1].text))[0]\ntokenizer = nltk.RegexpTokenizer(r\"\\w+\")\ntoken = tokenizer.tokenize(text)\n\n# ngrams set to 2\ncounter = Counter(ngrams(token,2))\nmost_common = counter.most_common(25)\nmost_common = dict(most_common)\nmost_common","9133abc2":"# as a dataframe\ntrue_common_bi = pd.DataFrame(most_common.items(), columns = [\"bigram\", \"count\"])\ntrue_common_bi[\"bigram\"] = true_common_bi[\"bigram\"].apply(lambda x: \" \".join(x))\ntrue_common_bi","972155b3":"# Histogram of 25 common bigrams for True news\nplt.figure(figsize=(12,9))\nplt.bar(true_common_bi[\"bigram\"], true_common_bi[\"count\"]) # can do tuples\nplt.xticks(rotation=90)\nplt.xlabel(\"Common bigram\")\nplt.ylabel(\"Count\")\nplt.title(\"25 Most common bigram (True)\")\nplt.show","bb68f94f":"# Find most common bigrams in Fake news\ntext = pd.Series(\" \".join(df[df[\"label\"] == 0].text))[0]\ntokenizer = nltk.RegexpTokenizer(r\"\\w+\")\ntoken = tokenizer.tokenize(text)\n\n# ngrams set to 2\ncounter = Counter(ngrams(token,2))\nmost_common = counter.most_common(25)\nmost_common = dict(most_common)\nmost_common","a7523999":"# as a dataframe\nfake_common_bi = pd.DataFrame(most_common.items(), columns = [\"bigram\", \"count\"])\nfake_common_bi[\"bigram\"] = fake_common_bi[\"bigram\"].apply(lambda x: \" \".join(x))\nfake_common_bi","093d687c":"# Histogram of 25 common bigrams for Fakefake news\nplt.figure(figsize=(12,9))\nplt.bar(fake_common_bi[\"bigram\"], fake_common_bi[\"count\"], color=\"red\") # can do tuples\nplt.xticks(rotation=90)\nplt.xlabel(\"Common bigram\")\nplt.ylabel(\"Count\")\nplt.title(\"25 Most common bigram (Fake)\")\nplt.show","2ff90142":"# Find most common trigrams in True news\ntext = pd.Series(\" \".join(df[df[\"label\"] == 1].text))[0]\ntokenizer = nltk.RegexpTokenizer(r\"\\w+\")\ntoken = tokenizer.tokenize(text)\n\n# ngrams set to 3\ncounter = Counter(ngrams(token,3))\nmost_common = counter.most_common(25)\nmost_common = dict(most_common)\nmost_common","2259c14e":"# as a dataframe\ntrue_common_tri = pd.DataFrame(most_common.items(), columns = [\"trigram\", \"count\"])\ntrue_common_tri[\"trigram\"] = true_common_tri[\"trigram\"].apply(lambda x: \" \".join(x))\ntrue_common_tri","83b35151":"# Histogram of 25 common trigrams for True news\nplt.figure(figsize=(12,9))\nplt.bar(true_common_tri[\"trigram\"], true_common_tri[\"count\"])\nplt.xticks(rotation=90)\nplt.xlabel(\"Common trigram\")\nplt.ylabel(\"Count\")\nplt.title(\"25 Most common trigram (True)\")\nplt.show","723b76f5":"# Find most common trigrams in Fake news\ntext = pd.Series(\" \".join(df[df[\"label\"] == 0].text))[0]\ntokenizer = nltk.RegexpTokenizer(r\"\\w+\")\ntoken = tokenizer.tokenize(text)\n\n# ngrams set to 3\ncounter = Counter(ngrams(token,3))\nmost_common = counter.most_common(25)\nmost_common = dict(most_common)\nmost_common","43efdc5d":"# as a dataframe\nfake_common_tri = pd.DataFrame(most_common.items(), columns = [\"trigram\", \"count\"])\nfake_common_tri[\"trigram\"] = fake_common_tri[\"trigram\"].apply(lambda x: \" \".join(x))\nfake_common_tri","2563cf25":"# Histogram of 25 common trigrams for True news\nplt.figure(figsize=(12,9))\nplt.bar(fake_common_tri[\"trigram\"], fake_common_tri[\"count\"], color=\"red\")\nplt.xticks(rotation=90)\nplt.xlabel(\"Common trigram\")\nplt.ylabel(\"Count\")\nplt.title(\"25 Most common trigram (Fake)\")\nplt.show","dd60a00d":"from nltk.stem import WordNetLemmatizer\n\n\nlemma = WordNetLemmatizer()","4789672f":"# Lemmatizer example\nprint(lemma.lemmatize(\"boys\"))","71341445":"# Function to perform lemmatization on text\ndef lemmatize_text(text):\n    tokenize_text = nltk.word_tokenize(text)\n    lemmatize_words = [lemma.lemmatize(word) for word in tokenize_text]\n    join_text = ' '.join(lemmatize_words)\n    \n    return join_text\n\n# Example sentence on function\nlemmatize_text(\"There once was a boy named Naruto who was possessed by a Nine-Tailed Demon Fox\")","8e359f4f":"# Copy main df dataset and lemmatize the text\nlemmatized_df = df.copy()\nlemmatized_df[\"text\"] = lemmatized_df[\"text\"].apply(lemmatize_text)\nlemmatized_df.head()","0002f567":"lemmatized_df[\"text\"][0]","113fba01":"# Machine Learning models to import\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix, classification_report","b9385996":"# Random state at 42 for reproducibility\n# Go for 80:20 train:test set\ntest_size = 0.20\nX_train, X_test, y_train, y_test = train_test_split(lemmatized_df[\"text\"], lemmatized_df[\"label\"], test_size=test_size, random_state=42)","57bb9047":"# Fit CountVectorizer to X_train and X_test datasets\ncv_train = CountVectorizer(max_features=10000).fit(X_train)\nX_vec_train = cv_train.transform(X_train)\nX_vec_test = cv_train.transform(X_test)","2154daf4":"X_vec_train","71ffbad7":"# Training on Logistic Regression model\n# set LR parameter max_iter = 4000 to avoid error\nlr = LogisticRegression(max_iter = 4000)\nlr.fit(X_vec_train, y_train)\npredicted_value = lr.predict(X_vec_test)\nlr_accuracy_value = roc_auc_score(y_test, predicted_value)","0ce74104":"# Logistic Regression Test ROC 99.68% on just lemmatized text\nprint(\"ROC: \" + str(lr_accuracy_value*100) + \"%\")","187e861f":"conmat = confusion_matrix(y_test, predicted_value)\nprint(conmat)\nprint(classification_report(y_test, predicted_value))","073da282":"# Visual of confusion matrix of Logistic Regression\nfig = plt.subplot()\nsns.heatmap(conmat, annot=True, ax=fig)\nfig.set_ylabel('y_test')\nfig.set_xlabel('predicted values')","74fa4c3b":"# Training on Naive Bayes model\n# Quick at training\nnb = MultinomialNB()\nnb.fit(X_vec_train, y_train)\npredicted_value = nb.predict(X_vec_test)\nnb_accuracy_value = roc_auc_score(y_test, predicted_value)","d0a8e985":"# Naive Bayes Training ROC 95.21% lemmatized text\nprint(\"ROC: \" + str(roc_auc_score(y_train, nb.predict(X_vec_train))*100) + \"%\")","e1f16227":"# Naive Bayes Test ROC 95.22% lemmatized text\nprint(\"ROC: \" + str(nb_accuracy_value*100) + \"%\")","29712ddc":"conmat = confusion_matrix(y_test, predicted_value)\nprint(conmat)\nprint(classification_report(y_test, predicted_value))","98ecdc4a":"# Visual of confusion matrix of Naive Bayes\nfig = plt.subplot()\nsns.heatmap(conmat, annot=True, ax=fig)\nfig.set_ylabel('y_test')\nfig.set_xlabel('predicted values')","6b953d9d":"# Training on Support Vector Machine\n# Very slow at training\n# time complexity O(no.features * no.of samples**2)\nsvm = SVC()\nsvm.fit(X_vec_train, y_train)\npredicted_value = svm.predict(X_vec_test)\nsvm_accuracy_value = roc_auc_score(y_test, predicted_value)","708f86cb":"# SVM Training ROC 99.9% lemmatized text\n# svm predict on training set took very long time\nprint(\"ROC: \" + str(roc_auc_score(y_train, svm.predict(X_vec_train))*100) + \"%\")","ae0f571f":"# SVM Test ROC 99.53% lemmatized text\nprint(\"ROC: \" + str(svm_accuracy_value*100) + \"%\")","c1d215a9":"conmat = confusion_matrix(y_test, predicted_value)\nprint(conmat)\nprint(classification_report(y_test, predicted_value))","a024f9e8":"# Visual of confusion matrix of SVM\nfig = plt.subplot()\nsns.heatmap(conmat, annot=True, ax=fig)\nfig.set_ylabel('y_test')\nfig.set_xlabel('predicted values')","56856598":"# Training on Random Forest\nrf = RandomForestClassifier()\nrf.fit(X_vec_train, y_train)\npredicted_value = rf.predict(X_vec_test)\nrf_accuracy_value = roc_auc_score(y_test, predicted_value)","2731e1d8":"# Random Forest Training ROC 100% lemmatized text\nprint(\"ROC: \" + str(roc_auc_score(y_train, rf.predict(X_vec_train))*100) + \"%\")","2ae6f241":"# Random Forest Test ROC 99.67% lemmatized text\nprint(\"ROC: \" + str(rf_accuracy_value*100) + \"%\")","70ca3390":"conmat = confusion_matrix(y_test, predicted_value)\nprint(conmat)\nprint(classification_report(y_test, predicted_value))","ac6c1ea2":"# Visual of confusion matrix of Random Forest\nfig = plt.subplot()\nsns.heatmap(conmat, annot=True, ax=fig)\nfig.set_ylabel('y_test')\nfig.set_xlabel('predicted values')","f9996377":"# Training on Gradient Boosting \ngbc = GradientBoostingClassifier()\ngbc.fit(X_vec_train, y_train)\npredicted_value = gbc.predict(X_vec_test)\ngbc_accuracy_value = roc_auc_score(y_test, predicted_value)","20d57cff":"# Gradient Boost Training ROC 99.64% lemmatized text\nprint(\"ROC: \" + str(roc_auc_score(y_train, gbc.predict(X_vec_train))*100) + \"%\")","22526a54":"# Gradient Boost Test ROC 99.5% lemmatized text\nprint(\"ROC: \" + str(gbc_accuracy_value*100) + \"%\")","4c6c5827":"conmat = confusion_matrix(y_test, predicted_value)\nprint(conmat)\nprint(classification_report(y_test, predicted_value))","458c8249":"# Visual of confusion matrix of Gradient Boosting\nfig = plt.subplot()\nsns.heatmap(conmat, annot=True, ax=fig)\nfig.set_ylabel('y_test')\nfig.set_xlabel('predicted values')","1e8d4b7a":"import pickle","73bfdcc6":"# Save model\nmodel_file = \"gbc.pkl\"\nwith open(model_file,mode='wb') as model_f:\n    pickle.dump(gbc,model_f)","bff8a515":"# Open the model, print result for sanity check\nwith open(\"gbc.pkl\",mode='rb') as model_f:\n    model = pickle.load(model_f)\n    predict = model.predict(X_vec_test)\n    result = roc_auc_score(y_test, predict)\n    print(\"result:\",result*100, \"%\")","73cbd37b":"Here we can see the piece is well written by a professional writer, and the subject is on politics. What I have mentioned may be naive assumptions from just reading only two brief text. In the next section, we will be diving deep into the data to help better understand what differentiates genuine and fake news.","40ab78f0":"**Frequent words**","e19fd8a9":"**Gradient Boosting (CountVectorizer)**","f0b4a178":"So from these list of common words, the distribution of news leans towards U.S. politics and that there is no telling what is true news and what is fake news. This makes fake news all the more dangerous and harmful if taken at face value.","e84c3392":"Looking at the distribution of news articles by Month-Year, we can see that fake news was published between 2015-03 to 2018-02, and true news published from 2016-01 to 2017-12. The majority of the real news articles were from August to November of 2017 with at least 2500-3000 each month, making up over half of the total real news dataset.\n\nThe bulk of fake news articles were collected between January 2016 to August 2017, with around 700-1000 each month.","a6ce57fd":"## Machine Learning","0c5e0a1f":"We need to perform data cleaning in order to use the wordcloud to the best possible usage. This involves reducing down words to lower case, removing stopwords such as \"a\" or \"as\", and removing hyperlinks to other sites. Let's merge the text and title columns together. Remove the other columns becasue we will only be concentrating on the text itself and not the subject matter or date released.","16a59990":"**Random Forest (CountVectorizer)**","0382b90c":"**Length of text (by characters)**","cfa4b038":"**CountVectorizer**","38ca019c":"Check an example of a fake news text:","14da8115":"So it looks like most of the models did fairly well. On comparing training accuracy and test acccuracy difference, it seems the **Gradient Boosting** did pretty well. When training accuracy is 100%, then there may be a problem of the model overfitting, and this could lead to new news data being predicted incorrectly.\n\nNow lets save the Gradient Boosting file.","348cd7e6":"Again the distributions for true and fake news are different. Going by the news titles, true news have mostly 60-80 characters in their titles, while fake news tend to be longer with 75-125 characters.","6ab89d71":"**Multinomial Naive Bayes (CountVectorizer)**","f7f04faa":"Let's look further into the text with bigrams and trigrams, and find common pair words and three-words.","5e81f449":"## Saving the model","bdca9f34":"Bigram: True news","15e1ef03":"You can probably tell from reading this article that the writing style is a sensationalist piece designed to prey of the fears of the reader. Examples being the mention of graphic imagery and not written by a professional.","164936d9":"From these fake news bigrams, it's interesting to see news sources Fox News, realDonaldTrump and 21st Century appear. For real news, Reuters more frequent as a news source.","aa20f4d0":"Bigram: Fake news","a2aa0e53":"### Word Cloud","8332d05a":"Fake news is rife. It is misinformation with the aim to misinform and to spread false imformation to either harm or influence with little to no evidence. In this notebook, we will explore datasets from genuine news articles and from fake news articles through graphs and examples such as word frequencies, bi-grams\/tri-grams and word clouds. Then apply a classify to these datasets to see how well a machine can distinguish the difference between the two classes. Finally, we will evaluate these models using statistical evaluations such as precision, recall, F1 score and ROC.\n\nAfterwards, the best model will be used to create a web application for users to input news articles and let the model predict whether to article is real or fake.\n\nDataset for this project from Kaggle. Click [Here](https:\/\/www.kaggle.com\/clmentbisaillon\/fake-and-real-news-dataset\/notebooks)","9f6b8d7a":"Trigrams: True news","37b979d3":"You can tell from both word clouds there is no distint words which can determine whether the text is more likely to be true or fake. Both seem include words associates with U.S. politics and U.S. Politicians.\n\nOkay, let's explore frequency of words in text.","8b41dab3":"**Length of title (by characters)**","f808dc12":"**What have we learnt**\n* How to clean dataset by removing tags, punctuation, stopwords\n* How to use lemmatization to remove duplicated word meanings\n* Play with data to produce visualizations like countplots and wordcloud\n* Look for frequent words, sequence of words (bi-grams, tri-grams)\n* Train machine learning models by using CountVectorizer on text dataset\n* Evaluate model's training and test accuracy, classification report and confusion matrix\n* Save model as pkl file for reuse.","fa38f3e1":"**Publish data analysis**","f4ba30f3":"**Support Vector Machines (CountVectorizer)**","e986510f":"We will begin training models and experiment with different vector methods, CountVectorizer and TF-IDF, with lemmatized text. We will use the following models:\n* Logistic Regression\n* Naive Bayes\n* Support Vector Machine\n* Random Forest\n* Gradient Boosting","313322b6":"**Count by Month-Year**","56f848ea":"Both true and fake news text have different distributions: true news text will have mostly around 2500 characters, fake news text will have mostly 5000 characters in their pieces.","340fd7f9":"**Word Cloud for fake news**","a4765e78":"Let's check the number of entries there are for each dataset.","f36ece78":"## Data preparation","29ec7c24":"Example of geniune news text:","41bac72a":"# Real or Fake? Detecting Fake news.","45c81bc2":"Looking at the chart above, genuine news have the subjecst **politicsNews** and **worldnews**. Fake news will have the subjects **News, politics, Government News, left-news, US_News** and **Middle-east**.","1301eab1":"### Bigrams and Trigrams","f6aaf8e8":"## Lemmatization","428f8016":"**Word Cloud for true news**","2e3e32e6":"Date contains http links and news article titles. Months may be shortened or only month.","ce697d5e":"**Label Count**","6ccb91cd":"Trigrams","ee69d67c":"### Training models","cf5217d2":"After must needed data cleaning and extensive exploratory analysis, let's move on to training the dataset on machine learning models to see how well it could predict whether the text is real or fake.","7dfcb8e9":"**Bigrams**","28e37331":"**Logistic Regression (CountVectorizer)**","2e69bd69":"It's okay to remove entries that are not considered news: all the text in this dataset contains http links and left-behind code.","71ee1d8b":"## Exploratory Data Analysis","84a5fd78":"Trigram: Fake News","c98dc56b":"## Import the data","4008992a":"**Subject count by Label**"}}