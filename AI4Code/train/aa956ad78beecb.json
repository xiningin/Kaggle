{"cell_type":{"ecc63f0e":"code","f5156313":"code","2aeeb326":"code","beb33431":"code","af0c8e2d":"code","991bed84":"code","183df5b7":"code","9d8d8cc6":"code","e85b3a25":"code","fd770d0f":"code","63f7d1ce":"code","df44eba5":"code","a16290f4":"code","f7a75fbd":"code","559fcdb1":"code","1d98275b":"code","afb365f2":"code","334a2a35":"code","c2c504e4":"code","1766768b":"code","805e6c46":"code","bc3c0b04":"code","8dececac":"code","3fc05fc1":"code","004f4976":"code","68b76029":"code","013e6307":"code","821e1962":"code","de2c05b6":"code","1758ecc5":"code","837016a1":"code","5849c158":"code","edd7b885":"code","bd04c07a":"code","e1a59942":"code","8f4fc027":"code","7ad14cf0":"code","694f16e4":"code","b011e583":"code","a67d2e30":"code","1f7ca11f":"code","0441c658":"code","ca4e5451":"code","ed0cfa66":"code","a468f509":"code","ca93ae11":"code","656da066":"code","2805b7f8":"code","a12ac581":"code","0b34c658":"code","d5e86b69":"code","814774cd":"code","738efce9":"code","0df8bbb0":"code","841ee750":"code","2b750564":"code","d85d3093":"code","1a494032":"code","d9f92dc8":"code","588aa7a7":"code","a46ee76c":"code","ac6b46f9":"code","d70adb77":"code","3f60bfba":"code","cffc0c07":"code","f74e3f04":"code","a6f2560b":"code","42f0505c":"code","b2fd6668":"code","87243d1a":"code","be1a02cb":"code","befd7b5c":"code","929c356b":"code","f5a5af39":"code","02cf3af7":"code","ce880c0b":"code","74de1ca4":"code","719c51e7":"code","dc9fb8b7":"code","e037c488":"code","7beaf5e7":"code","fc37e94e":"code","caae6da7":"code","98a44ebd":"code","db04059a":"code","df7bff9d":"code","496bc166":"code","06225b2c":"code","f4ee79a6":"code","e82ac5eb":"code","53e21d28":"code","5e3386a7":"code","95da4a68":"code","14e01e2d":"code","e38f087b":"code","225bbca5":"code","d163fdd5":"code","4ba17675":"code","5b0f0d40":"code","4151d40c":"code","47597a02":"markdown","c5e67429":"markdown","5066acc0":"markdown","12b9f445":"markdown","345a0280":"markdown","d7e3d908":"markdown","4cd60896":"markdown","33c24d6c":"markdown","92049604":"markdown","4d5539de":"markdown","6f341072":"markdown","ec872357":"markdown","478d9ac8":"markdown","5030ca52":"markdown","1d959ba4":"markdown","20057822":"markdown","5c0d486c":"markdown","98dfa8ff":"markdown","b67b6723":"markdown","a5cc0e79":"markdown","c02aed8d":"markdown","5e87996e":"markdown","ef1b4d2f":"markdown","ecf764f5":"markdown","5d4896cb":"markdown","3583b908":"markdown","e7395c4b":"markdown","a29a7c46":"markdown","6b752238":"markdown","9ba0df8d":"markdown","a9d9c17b":"markdown","437e5edd":"markdown","4b99c6c3":"markdown","8e6019d8":"markdown","36346139":"markdown","12fe89cb":"markdown","131c804c":"markdown","eeaa2a8d":"markdown","12e01464":"markdown","ca5948c5":"markdown","9731dff4":"markdown","7b7b89d9":"markdown","68a18475":"markdown","0a8f42ca":"markdown","37777997":"markdown","093f3f3a":"markdown","359dc511":"markdown","c6e76970":"markdown","f92e02be":"markdown","7a0270ee":"markdown","f677a3e8":"markdown","da08a566":"markdown","a5cc4f39":"markdown","8da4d4b4":"markdown","b5db6130":"markdown","5809636d":"markdown","7a1c6e04":"markdown"},"source":{"ecc63f0e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","f5156313":"import warnings\nwarnings.filterwarnings('ignore')","2aeeb326":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nIDtest = test[\"PassengerId\"]","beb33431":"# concat all data to analyze\ndataset = pd.concat(objs=[train, test], axis=0).reset_index(drop=True)\nlen(dataset)","af0c8e2d":"print(f'Length of Train data  {len(train)}')\nprint(f'Length of Test  data  {len(test)}')\nprint(f'Length of whole data {len(dataset)}')","991bed84":"train_len = len(train)","183df5b7":"dataset.head()","9d8d8cc6":"dataset.info()","e85b3a25":"plt.figure(figsize=(12, 8))\nsns.heatmap(dataset.corr(), cmap=plt.cm.RdBu, annot=True)","fd770d0f":"dataset.isnull().sum()","63f7d1ce":"fig, ax = plt.subplots(1, 2, figsize=(16, 8))\nsns.barplot(x='Sex', y='Survived', data=train, ax=ax[0])\nax[0].set_title('Survived Ratio with Sex')\nsns.countplot(x='Sex', hue='Survived', data=train, ax=ax[1])\nax[1].set_title('Survived Ratio with Sex')","df44eba5":"sex_survived = pd.DataFrame(columns=['Total', 'Survived', 'Survived Ratio'])\nsex_survived['Total'] = train['Sex'].value_counts()\nsex_survived['Survived'] = train[train['Survived']==1].groupby(['Sex']).apply(lambda x: x.shape[0])\nsex_survived['Survived Ratio'] = sex_survived['Survived'] \/ sex_survived['Total']\nsex_survived","a16290f4":"# map string value to be integer\ndataset['Sex'] = dataset['Sex'].map(lambda s: 1 if s == 'male' else 0)","f7a75fbd":"fig, ax = plt.subplots(1, 2, figsize=(24, 8))\nsns.violinplot(x='Survived', y='Age', data=train, orient='v', ax=ax[0])\nsns.boxenplot(x='Survived', y='Age', data=train, orient='v', ax=ax[1])","559fcdb1":"g = sns.FacetGrid(train, col='Survived')\ng = g.map(sns.distplot, \"Age\")","1d98275b":"# Explore Age distibution \ng = sns.kdeplot(train[\"Age\"][(train[\"Survived\"] == 0) & (train[\"Age\"].notnull())], color=\"Red\", shade = True)\ng = sns.kdeplot(train[\"Age\"][(train[\"Survived\"] == 1) & (train[\"Age\"].notnull())], ax=g, color=\"Blue\", shade= True)\ng.set_xlabel(\"Age\")\ng.set_ylabel(\"Frequency\")\ng = g.legend([\"Not Survived\",\"Survived\"])","afb365f2":"dataset['Age'][dataset['Age'].isnull() == True] = dataset[dataset['Age'].isnull() == False].median()[0]","334a2a35":"plt.figure(figsize=(12, 24))\nsns.countplot(y='Age', hue='Survived', data=train, orient='h')","c2c504e4":"dataset['AgeGroup'] = None\ndataset.loc[((dataset['Sex'] == 1) & (dataset['Age'] <= 15)), 'AgeGroup'] = 'boy'\ndataset.loc[((dataset['Sex'] == 0) & (dataset['Age'] <= 15)), 'AgeGroup'] = 'girl'\ndataset.loc[((dataset['Sex'] == 1) & (dataset['Age'] > 15)), 'AgeGroup'] = 'adult male'\ndataset.loc[((dataset['Sex'] == 0) & (dataset['Age'] > 15)), 'AgeGroup'] = 'adult female'\ndataset['AgeGroup'].value_counts()","1766768b":"fig, ax = plt.subplots(1, 2, figsize=(16, 7))\nsns.pointplot(x='AgeGroup', y='Survived', data=dataset[:train_len], ax=ax[0])\nax[0].set_title('Survived Ratio with AgeGroup')\nsns.countplot(x='AgeGroup', hue='Survived', data=dataset[:train_len], ax=ax[1])\nax[1].set_title('Survived Count with AgeGroup')","805e6c46":"pd.DataFrame(dataset[['AgeGroup', 'Survived']]\n                 .groupby(['AgeGroup', 'Survived'])\n                 .apply(lambda x: x.shape[0]), \n             columns=['Count'])","bc3c0b04":"# mapping AgeGroup value to be integer\ndataset['AgeGroup'] = dataset['AgeGroup'].map({'boy': 0, 'girl': 1, 'adult male': 2, 'adult female': 3})\ndataset['AgeGroup'] = dataset['AgeGroup'].astype(int)","8dececac":"fig, ax = plt.subplots(1, 2, figsize=(16, 7))\nsns.pointplot(x='Pclass', y='Survived', data=dataset[:train_len], ax=ax[0])\nax[0].set_title('Survived Ratio with Pclass')\nsns.countplot(x='Pclass', hue='Survived', data=dataset[:train_len], ax=ax[1])\nax[1].set_title('Survived Count with Pclass')","3fc05fc1":"sns.pointplot(x='Pclass', y='Survived', hue='Sex', data=dataset[:train_len])","004f4976":"pd.DataFrame(dataset[['Pclass', 'Survived', 'Sex']]\n                 .groupby(['Pclass', 'Sex', 'Survived'])\n                 .apply(lambda x: x.shape[0]), \n             columns=['Count'])","68b76029":"dataset[dataset['Embarked'].isnull()]","013e6307":"embarked_survived = pd.DataFrame(dataset[['Embarked', 'Survived']]\n                                 .groupby(['Embarked', 'Survived'])\n                                 .apply(lambda x: x.shape[0]), columns=['count']).reset_index()\nembarked_survived_pivot = embarked_survived.pivot(index='Embarked', columns='Survived', values='count')\nembarked_survived_pivot","821e1962":"fig, ax = plt.subplots(1, 2, figsize=(20, 8))\nsns.barplot(x='Embarked', y='Survived', data=train, ax=ax[0])\nax[0].set_title('Survived Ratio')\nembarked_survived_pivot.plot(kind='bar', stacked=True, ax=ax[1])\nax[1].set_title('Survived Count')\n# plt.show()","de2c05b6":"train['Embarked'].value_counts()","1758ecc5":"dataset['Embarked'] = dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})","837016a1":"sns.distplot(dataset[dataset['Embarked'].isnull() == False]['Embarked'], kde=False)","5849c158":"dataset['Embarked'].mode()","edd7b885":"dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace=True)","bd04c07a":"dataset['Embarked'] = dataset['Embarked'].astype('int')","e1a59942":"dataset['Embarked'].isnull().sum()","8f4fc027":"dataset['Embarked'].value_counts()","7ad14cf0":"dataset[dataset['Fare'].isnull()]","694f16e4":"old_man_nan_fare_idx = dataset[dataset['Fare'].isnull()].index\nold_man_nan_fare_idx","b011e583":"sns.boxplot(x='Pclass', y='Fare', data=dataset)","a67d2e30":"plt.figure(figsize=(12, 24))\nsns.barplot(x='Fare', y='Age', data=dataset[dataset['Pclass'] == 3], orient='h')","1f7ca11f":"# mean Fare price of all Pclass 3\ndataset[dataset['Pclass'] == 3]['Fare'].mean()","0441c658":"# mean Fare price for the young and child with age less than 20, with Pclass 3\ndataset[dataset['Pclass'] == 3][dataset['Cabin'].isnull()][dataset['Age'] < 20]['Fare'].mean()","ca4e5451":"# mean Fare price for the old with age larger than 50, with Pclass 3\nmean_old_pclass3 = dataset[dataset['Pclass'] == 3][dataset['Cabin'].isnull()][dataset['Age'] > 50]['Fare'].mean()\nmean_old_pclass3","ed0cfa66":"dataset.loc[old_man_nan_fare_idx, 'Fare'] = mean_old_pclass3","a468f509":"# Fare with missing value is filled in with mean Fare of Age > 50, Pclass = 3\ndataset.iloc[old_man_nan_fare_idx]","ca93ae11":"fig, ax = plt.subplots(1, 2, figsize=(24, 8))\nsns.distplot(dataset['Fare'], ax=ax[0])\nax[0].set_title('Distribution of Fare')\nsns.distplot(dataset['Fare'].apply(lambda x: np.log1p(x)), ax=ax[1])\nax[1].set_title('Distribution of Fare with Log Transform')","656da066":"# Cut the Fare to be 4 partition with it's value after Log Transform\nnp.exp(2.3), np.exp(2.9), np.exp(3.5)","2805b7f8":"# Mapping Fare\ndataset.loc[ dataset['Fare'] < 9.974, 'FareBin'] = 0\ndataset.loc[(dataset['Fare'] >= 9.974) & (dataset['Fare'] <= 18.174), 'FareBin'] = 1\ndataset.loc[(dataset['Fare'] > 18.174) & (dataset['Fare'] <= 33.115), 'FareBin']   = 2\ndataset.loc[ dataset['Fare'] > 33.115, 'FareBin'] = 3\ndataset['FareBin'] = dataset['FareBin'].astype(int)","a12ac581":"fig, ax = plt.subplots(1, 2, figsize=(24, 8))\nplt.subplot(121, title='Survived Ratio with Fare')\nsns.pointplot(x='FareBin', y='Survived', data=dataset.sort_values(['FareBin']))\nplt.subplot(122, title='Survived Count with Fare')\nsns.countplot(x='FareBin', hue='Survived', data=dataset.sort_values(['FareBin']))","0b34c658":"dataset['Cabin'].value_counts()","d5e86b69":"dataset['CabinType'] = dataset['Cabin'].apply(lambda x: str(x)[0].upper() if type(x) == str else 'None')","814774cd":"sns.boxplot(x='CabinType', y='Fare', data=dataset)","738efce9":"dataset[dataset['CabinType'] == 'T']","0df8bbb0":"# T got only one data, and its value `Survived` is 0, set `CabinType` to be None\nt_idx = dataset[dataset['CabinType'] == 'T'].index\ndataset.loc[t_idx, 'CabinType'] = 'None'","841ee750":"dataset.iloc[t_idx]","2b750564":"fig, ax = plt.subplots(1, 2, figsize=(24, 8))\nsns.boxplot(x='CabinType', y='Fare', data=dataset.sort_values(['CabinType']), ax=ax[0])\nax[0].set_title('Fare with Cabin Type')\nsns.violinplot(x='CabinType', y='Pclass', data=dataset.sort_values(['CabinType']), ax=ax[1])\nax[1].set_title('Fare with Pclass')\nplt.show()","d85d3093":"fig, ax = plt.subplots(1, 2, figsize=(24, 8))\nsns.pointplot(x='CabinType', y='Survived', data=dataset[:train_len].sort_values(['CabinType']), ax=ax[0])\nax[0].set_title('Survived Ratio with Cabin Type')\nsns.countplot(x='CabinType', hue='Survived', data=dataset[:train_len].sort_values(['CabinType']), ax=ax[1])\nax[1].set_title('Survived Count with Cabin Type')","1a494032":"# passager with a seat have `Cabin` have a much higher survival rate in the Train Set\nsurvival_rate_with_cabin = 100 * train[train['Cabin'].isnull() == False]['Survived'].value_counts()[1] \/ \\\n                           train[train['Cabin'].isnull() == False]['Survived'].shape[0]\nsurvival_rate_without_cabin = 100 * train[train['Cabin'].isnull() == True]['Survived'].value_counts()[1] \/ \\\n                           train[train['Cabin'].isnull() == True]['Survived'].shape[0]\n\nprint(f'Survival rate with cabin: {survival_rate_with_cabin:.1f}%')\nprint(f'Survival rate without cabin: {survival_rate_without_cabin:.1f}%')","d9f92dc8":"# Mapping CabinType\ncabin_mapping = {\"None\": 0, \"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7}\ndataset['CabinType'] = dataset['CabinType'].map(cabin_mapping)","588aa7a7":"dataset['CabinType'].value_counts()","a46ee76c":"dataset['Name']","ac6b46f9":"import re\ndef get_title(name):\n    title_search = re.search(r'([A-Za-z]+)\\.', name)\n    if title_search:\n        return title_search.group(1)\n    \n    return ''\n\ndataset['Title'] = dataset['Name'].apply(get_title)","d70adb77":"dataset['Title'].value_counts()","3f60bfba":"#replacing all titles with mr, mrs, miss, master, rare\ndef replace_titles(title):\n    if title in ['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona']:\n        return 'Rare'\n    elif title in ['Countess', 'Mme']:\n        return 'Mrs'\n    elif title in ['Mlle', 'Ms']:\n        return 'Miss'\n    elif title =='Dr':\n        if x['Sex']=='Male':\n            return 'Mr'\n        else:\n            return 'Mrs'\n    else:\n        return title\n\ndataset['Title'] = dataset['Title'].apply(replace_titles)","cffc0c07":"sns.barplot(x='Title', y='Survived', data=dataset[:train_len])","f74e3f04":"sns.countplot(x='Title', hue='Survived', data=dataset[:train_len])","a6f2560b":"# Mapping titles\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\ndataset['Title'] = dataset['Title'].map(title_mapping)","42f0505c":"dataset['Noble'] = dataset['Name'].apply(lambda x: 1 if re.search(r'\\(.*?\\)', x) else 0)","b2fd6668":"dataset[:train_len][['Noble', 'Survived']].groupby(['Noble']).sum()","87243d1a":"sns.barplot(x='Noble', y='Survived', data=dataset[:train_len])","be1a02cb":"dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1","befd7b5c":"sns.factorplot(x='FamilySize', y='Survived', data=dataset[:train_len])","929c356b":"# mapping FamilySize\ndataset.loc[ dataset['FamilySize'] == 1, 'FamilySizeBin'] = 0\ndataset.loc[(dataset['FamilySize'] >= 2) & (dataset['FamilySize'] <= 3), 'FamilySizeBin'] = 1\ndataset.loc[(dataset['FamilySize'] == 4), 'FamilySizeBin'] = 2\ndataset.loc[(dataset['FamilySize'] >= 5) & (dataset['FamilySize'] <= 7), 'FamilySizeBin'] = 3\ndataset.loc[(dataset['FamilySize'] >=8), 'FamilySizeBin'] = 4","f5a5af39":"dataset['FamilySizeBin'] = dataset['FamilySizeBin'].astype('int')","02cf3af7":"dataset['IsAlone'] = dataset['FamilySize'].map(lambda s: 1 if s == 1 else 0)","ce880c0b":"sns.countplot(x='IsAlone', hue='Survived', data=dataset)","74de1ca4":"dataset['LastName'] = dataset.Name.str.split(',').str[0]","719c51e7":"plt.figure(figsize=(6, 32))\nsns.countplot(y='LastName', hue='Survived', data=dataset[dataset['FamilySize'] > 1], orient='h')","dc9fb8b7":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndataset['LastName'] = le.fit_transform(dataset['LastName'])\ndataset['LastName'] = dataset['LastName'].astype(int)","e037c488":"plt.figure(figsize=(12, 8))\nsns.heatmap(dataset.corr(), cmap=plt.cm.RdBu, annot=True)","7beaf5e7":"dataset.drop(labels=['Fare', 'Cabin', 'FamilySize', 'PassengerId', 'Ticket', 'Age', 'Name'], \n             axis=1, inplace=True)","fc37e94e":"dataset.columns","caae6da7":"# one-hot values\ndataset = pd.get_dummies(dataset, columns = [\"Embarked\"])\ndataset = pd.get_dummies(dataset, columns = [\"Parch\"])\ndataset = pd.get_dummies(dataset, columns = [\"Pclass\"])\ndataset = pd.get_dummies(dataset, columns = [\"CabinType\"])\ndataset = pd.get_dummies(dataset, columns = [\"Title\"])\ndataset = pd.get_dummies(dataset, columns = [\"FamilySizeBin\"])\ndataset = pd.get_dummies(dataset, columns = [\"FareBin\"])\ndataset = pd.get_dummies(dataset, columns = [\"AgeGroup\"])","98a44ebd":"dataset.head(5)","db04059a":"## Separate train dataset and test dataset\ntrain = dataset[:len(train)]\ntest = dataset[len(train):]\ntest.drop(labels=[\"Survived\"],axis = 1,inplace=True)","df7bff9d":"## Separate train features and label \nX_train = train.drop(labels = [\"Survived\"],axis = 1)\ny_train = train[\"Survived\"].astype(int)","496bc166":"X_train.info()","06225b2c":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score","f4ee79a6":"gbdt = GradientBoostingClassifier(learning_rate=0.02, min_samples_split=6, min_samples_leaf=4)\ncross_val_score(gbdt, X_train, y_train, cv=10).mean()","e82ac5eb":"model = GradientBoostingClassifier(learning_rate=0.02, min_samples_split=6, min_samples_leaf=4)","53e21d28":"model.fit(X_train, y_train)","5e3386a7":"test_Survived = pd.Series(model.predict(test), name=\"Survived\")\n\nresults = pd.concat([IDtest, test_Survived], axis=1)\n\nresults.to_csv(\"titanic_with_ensemble.csv\",index=False)","95da4a68":"dataset.iloc[old_man_nan_fare_idx]","14e01e2d":"model.predict(dataset.iloc[old_man_nan_fare_idx].drop(['Survived'], axis=1))","e38f087b":"dataset.loc[train_len:, 'Survived'] = model.predict(dataset[train_len:].drop(['Survived'], axis=1))","225bbca5":"survived_corr = pd.DataFrame(dataset.corr()['Survived'].drop('Survived'))\nsurvived_corr_most = survived_corr[\n    (survived_corr['Survived'] > 0.1) | (survived_corr['Survived'] < -0.1)]\\\n    .sort_values(['Survived'], ascending=True)","d163fdd5":"survived_corr_most.plot(kind='barh', figsize=(8, 10))","4ba17675":"fig, ax = plt.subplots(7, 4, figsize=(16, 30))\nfor idx, feature in enumerate(survived_corr_most.sort_values(['Survived'], ascending=False).index):\n    plt.subplot(7,4,idx+1)\n    sns.pointplot(x=feature, y='Survived', data=dataset)","5b0f0d40":"feature_dict = {}\nfor feature, importance in zip(X_train.columns, model.feature_importances_):\n    feature_dict[feature] = importance\nfeature_importances_df = pd.Series(feature_dict)\nfeature_importances_most = feature_importances_df.sort_values(ascending=False)[:20]\nfeature_importances_most","4151d40c":"fig, ax = plt.subplots(5, 4, figsize=(16, 20))\nfor idx, feature in enumerate(feature_importances_most.index):\n    plt.subplot(5,4,idx+1)\n    sns.pointplot(x=feature, y='Survived', data=dataset)","47597a02":"- `Female` in `Pclass` 1 are almost all survived. (91\/94=96.8%)\n- `Male` in `Pclass` 3 have very low survived rate. (17\/108=15.7%)\n- `Male` in `Pclass` 3 have lowest survived rate. (47\/347=13.5%)","c5e67429":"Same `LastName` doesn't make the same family, but same family usually have same `LastName`.\n\nWe could speculate that some family have a better change to escape.","5066acc0":"`Pclass` 1 get the highest `Survived` ratio. And `Pclass` 3 get the lowest `Survived` rate about 25% only with `Male` passengers mainly.","12b9f445":"This is the ending for the old man, he is dead finally, does your prediction right?","345a0280":"## AgeGroup\n\n\nWe mentioned that a new feature could be created with value of yound\/mid\/old in `Age` part. We will use `Age` and `Sex` to split the data into groups.","d7e3d908":"Young passengers get a higher `Survival` ratio and old passengers get a lower `Survival` ratio. `Female` get a higher `Survival` ratio that `Male`. So we split the passengers to be 4 partition:\n- boy\n- girl\n- adult male\n- adult female","4cd60896":"Passengers not alone on the ship have a higher `Survived` rate","33c24d6c":"# Explore the Features\n\n- Data Visualization\n- Feature Correlation Exploration\n- Fill NA","92049604":"## Model Feature Importance","4d5539de":"Age distribution is close to normal distribution.\n\n- The old passengers older than 60 have less survival rate\n- The young passengers have a higher survival rate \n- The other passengers survival rate in less related to Age\n\nMaybe we could ceate a new feature here with value of yound\/mid\/old.","6f341072":"## Cabin\n\nList the value of `Cabin`, we could find it has too many categories. We could use the 1st letter of the `Cabin` name as a superset to verify if it is related to any other features or `Survived`. e.g. simplify `G6` to be `G`.","ec872357":"Feature Engineering is usually the most significant part for machine learning. There are so many tools and methods of Feature Engineering, and it is a huge project as well. Those tools are usually integrated in `sklearn` library to be used directly, but they are very abstract and lack of explanation. I usually want to explore the explanation of the feature itself, but they were not show their actual face often.\n\nThus in this kernel, I'm going to:\n- Explore the data distribution\n- Analyze the relation between the features and the result `Survived`\n- Try to explain the Feature relation","478d9ac8":"PS: The old man with nan fare, what's his ending?","5030ca52":"Categorical variables which classified to less categories could improve the correlation. Thus we could see `FareBin` get is better than `Fare`, `FamilySizeBin` is better than `FamilySize`.\n\nNow drop some less correlated features.","1d959ba4":"We got 3 features with null data. \n- The feature `Fare` and `Embarked` have very small amount of data with null value.\n- The feature `Age` got about 20.1% null values.\n- The feature `Cabin` got 77.5% null values. That's a large scale.","20057822":"# Load Data","5c0d486c":"Is there any discount for the old man? Possibly not.","98dfa8ff":"### Noble\n\nThe name with a parenthesis like *Cumings, Mrs. John Bradley (Florence Briggs Thayer)* are usally from `Noble` family. Who are invited to the great sail.","b67b6723":"We could conclude that:\n- `Cabin` B\/C are all belong to `Pclass 1` with a higher `Fare` price\n- `Cabin` D\/E belongs to `Pclass 1\/2\/3` with a medium `Fare` price\n- `Cabin` A belongs to `Pcalss 1` but got a lower `Fare` price and got a lowest survival rate\n- `Cabin` F\/G got a lower `Fare` price and belong to `Pclass 2\/3`.","a5cc0e79":"`Embarked` with value of \"S\" have the most count of data, set the null of `Embarked` to be \"S\"(0 after mapping) ","c02aed8d":"## Pclass","5e87996e":"# Model","ef1b4d2f":"### FamilySize","ecf764f5":"With a large family size may lead to a big burden in unexpected situation. Family with children and women maybe board a lifeboat first. Passenger without any family may stand at the tail of the line.","5d4896cb":"## Name\n\nEvery passenger has a different name. But does there any categorical factor in the `Name`, like a title, or family name, etc","3583b908":"### IsAlone","e7395c4b":"From the Pearson Correlation matrix, the correlation of continuous variables with `Survived` is in the order below, we can guess how are the fetures related to the result `Sruvived`.\n\n**Positive correlation**\n- Fare: higher `Fare` price lead to a safer place on the ship\n- Parch: Parent and Children, no idea\n\n**Negetive correlation**\n- Sex: lady first in the abnormal situation as well\n- Pclass: 1st pclass got a better place on the ship, which must highly related to `Fare`\n- Age: children first?\n- SibSp: Siblings and Spouses, no idea\n- PassengerId, It is a random number and useless feature","a29a7c46":"# Prepare Training","6b752238":"## Age","9ba0df8d":"Variable |\tDefinition |Key\n--| -- | --\nsurvival| \tSurvival|\t0 = No, 1 = Yes\npclass\t|Ticket class|\t1 = 1st, 2 = 2nd, 3 = 3rd\nsex\t|Sex|\t\nAge\t|Age in years\t|\nsibsp\t|# of siblings \/ spouses aboard the Titanic\t|\nparch\t|# of parents \/ children aboard the Titanic\t|\nticket\t|Ticket number\t|\nfare\t|Passenger fare\t|\ncabin\t|Cabin number\t|\nembarked|\tPort of Embarkation|","a9d9c17b":"* With the values above, we could conclude that the only one null data leads to an old man(age of 60.5) without any families(Parch=0 parent and children, SibSp=0 siblings and spouses), the ticket class is 3, do not have a cabin. Maybe the mean value of `Fare` with `Pclass=3` is a good choice for the NA.\n\nWe could find value `Survived` of the data is NaN, it mean the data point belong to Test Set (with out the result `Survived` given).\n\n*Here we could ask a question, Will he Survive?*\n\nAn old man without any families aside, his ticket is in the Pclass 3, and he is falling into a disaster. You may get a conclusion now, And we can compare it with our model prediction later.","437e5edd":"`Survived` ratio of female is much higher than male\n- Male Survived: 18.9%\n- Female Survived: 74.2%","4b99c6c3":"# Feature Importance","8e6019d8":"Does the `Fare` related to the `Survived`?\n\nYes, the higher the `Fare` price, the higher ratio of `Survived`.","36346139":"`Cabin` name is highly related to the `Survived`. We could conclude that `Cabin` is orderly arranged, it means the location in the ship. While in the disaster, if your position is near the life boat or far away from the danger zone, your survive rate will be much higher.","12fe89cb":"## Family\n\n`SibSp`\n\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n`Parch`\n\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson","131c804c":"**Fill NA**\n\n`Age` have 20.1% null values. That is a high raito of the whole dataset.\n\nI find that `Survived` does not have an strong relation with `Age`. And any potential realtion could be explained by following new feature `AgeGroup`.\n\nWe can set the null to be median value as `Age` is a continuous variable.","eeaa2a8d":"## Most Correlation","12e01464":"In the speculation when we explore the feature `Sex`, we think that the dead ratio of `Adult Male` will be much higher than `Adult Female` and `Children`.\n\nWith the analysis above, we can get that `Adult Male` get a much lower survival rate indeed.\n\nThe `boy` and `girl` get a survival rate about 0.6.\n\nBut the `Adult Female` got the highest `Survived` rate, higher than `boy` and `girl`, that is unexpected.\n\nMaybe children didn't survived with the cold weather even after board on a life boat.","ca5948c5":"# Feature Correlation","9731dff4":"The `Fare` for the old is much cheaper compare to the children and young actually.","7b7b89d9":"As you see, that is the whole story of Titanic Disaster. Thanks for your reading, any advice is welcome!","68a18475":"# Submit","0a8f42ca":"## Fare","37777997":"Distribution of `Survived` passengers on `Embarked` in Train Set","093f3f3a":"## Sex\n\nWhen we recall the film plot of escaping to safer boat, rule of \"Women and children first\" is obeyed. \n\nWe could speculate that the dead ratio of `Adult male` will be much higher than `Adult Female` and `Children`. Dose it true? We will verify it later.","359dc511":"# List Features","c6e76970":"Like the income of resident, the distribution is usually left bias, compress it with a Log Transform could be more normally distributed.","f92e02be":"The `feature_importance_` from model is somehow different with the `Pearson Correlation` between features and `Survived`. I don't know why currently, I'll dig deeper to find the reason. ","7a0270ee":"Now we can find the most related(positive\/negative) feature values with the result `Survived`\n\n**Most Positive Correlation**\n- AgeGroup_2, `Sex Female` and `Age [15, 60]`\n- Title_3, Title_2, Title `Mrs` and `Ms` are all `Sex Female`\n- Noble, passengers from noble family\n- FamilySizeBin_1, passengers with 2 or 3 family member\n- Pclass_1, passengers from `Pclass 1`\n- FareBin_3, passengers with `Fare` price higher than 33.115\n- Parch_1, passengers with 1 Parent or child, with 1 child probably, they are on the life boat in prior\n\n**Most Negative Correlation**\n- Title_1, Sex 0, `Title 1` and `Sex Male` \n- AgeGroup_1, `Sex Male` and `Age [15, 60]`\n- CabinType_0, without cabin\n- FareBin_0, with lowest `Fare` price less than 9.974\n- Pclass_3, passengers from `Pclass 3`\n- IsAlone, FamiliySizeM_0, Parch_0, passengers who are alone\n\nThese are all reasonable feature values highly related to `Survived`","f677a3e8":"The `Survived` ratio is mostly definded by these important feature values.","da08a566":"### LastName","a5cc4f39":"Passenger with `Title` Mr have a very small survival rate, Rule of \"Women and Children first\" is obeyed.\n\nThe `Title` Mrs\/Miss are women. The `Title` Master\/Rare are usually noble. ","8da4d4b4":"### Title\n\nParse the `Title` from `Name` and we can get a new categorical variable.","b5db6130":"## Embarked\n\n`Embark` means the port of embarkation, got no idea it has any relation with any other features. Fill it with the mode of `Embark` might be a good choice.","5809636d":"`Cabin` type is related to the `Fare` price, some cabins like C\/B\/E\/D have a higher price than others.","7a1c6e04":"Passenger with a `Noble` name have a much higher survival rate."}}