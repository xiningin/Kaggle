{"cell_type":{"a411a1e9":"code","ce59f6b9":"code","7efd3d90":"code","cfcaa1cb":"code","1298b948":"code","a8a6ccd3":"code","63a543ef":"code","79dd90f8":"code","6aa70263":"code","df9dee07":"code","5e1f1f9d":"code","111112fc":"code","541b4e79":"code","1834e893":"code","14678ce4":"code","68c12d71":"code","9a41591b":"code","34907fa2":"code","5acb5e64":"code","06dadb1b":"code","3bd07854":"code","446cf1a4":"code","26754735":"code","6847d018":"code","1199ec53":"code","78041a42":"code","ac73fd1c":"code","344f082f":"code","434aeced":"code","2f125a0c":"code","3389ff48":"code","3700b6af":"code","65cb1a87":"markdown","040b3a1b":"markdown","66be8b37":"markdown","e89918e9":"markdown","eb7cdc41":"markdown","8cd2bfc6":"markdown","7555ab91":"markdown"},"source":{"a411a1e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce59f6b9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","7efd3d90":"\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.preprocessing import StandardScaler #Scale the model\nfrom sklearn.metrics import classification_report #Report on the classification\nfrom sklearn.preprocessing import LabelEncoder\n","cfcaa1cb":"df_train = pd.read_csv(\"\/kaggle\/input\/int247-ca1-lpu\/train_data.csv\",index_col=0)\ndf_train.head()","1298b948":"df_test = pd.read_csv(\"\/kaggle\/input\/int247-ca1-lpu\/test_data.csv\",index_col=0)\ndf_test.head()\n","a8a6ccd3":"sns.countplot(df_train['Salary'])","63a543ef":"df_train.describe()\n","79dd90f8":"df_train.shape","6aa70263":"df_train.isnull().any()","df9dee07":"df_test.isnull().any()","5e1f1f9d":"df_train.corr()","111112fc":"df_train.head(20)","541b4e79":"df_train.replace(' ?', np.nan, inplace=True) #Change training ? into null\ndf_test.replace(' ?', np.nan, inplace=True) #Change testing ? into null\ndf_test.head()","1834e893":"\n\nprint(\"Training Set Nulls:\\n\", df_train.isnull().any()) #Check the train set for nulls\nprint(\"\\nTesting Set Nulls:\\n\", df_test.isnull().any()) #Check the test set for nulls\n\n","14678ce4":"df_train[\"Native_country\"] = df_train[\"Native_country\"].fillna(\"Unknown\") #Fill NativeCountry with \"Unknown\"\ndf_train = df_train.fillna(\"None\") #Fill the other nulls with \"None\"\ndf_test[\"Native_country\"] = df_test[\"Native_country\"].fillna(\"Unknown\") #Fill NativeCountry with \"Unknown\"\ndf_test = df_test.fillna(\"None\") #Fill the other nulls with \"None\"\ndf_test.head() #Take a peek at the test data to make sure it applied","68c12d71":"print(\"Training Set Nulls:\\n\", df_train.isnull().any()) #Check the train set for nulls\nprint(\"\\nTesting Set Nulls:\\n\", df_test.isnull().any()) #Check the test set for nulls\n","9a41591b":"\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16,6)) #Set the figures\ndf_train.hist(column = \"Age\", bins = 25, ax = axes[0], edgecolor = \"white\") #Load a histogram for the train ages\ndf_test.hist(column = \"Age\", bins = 25, ax = axes[1], edgecolor = \"white\") #Load a histogram for the test ages\naxes[1].set_title(\"Age Test\") #Set the Test title to identify it\nplt.show() #Show the plot\n\n","34907fa2":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16,6)) #Set the figures\ndf_train[\"Workclass\"].value_counts().plot.bar(ax = axes[0]) #Load a bar graph for the train WorkClass\ndf_test[\"Workclass\"].value_counts().plot.bar(ax = axes[1]) #Load a bar graph for the test WorkClass\naxes[0].set_title(\"Workclass\") #Set the Train title to identify it\naxes[1].set_title(\"Workclass Test\") #Set the Test title to identify it\nplt.show() #Show the plot\n\n","5acb5e64":"#Replace Never-worked and Without-pay with None\ndf_train[\"Workclass\"].replace(\" Without-pay\", \"None\", inplace=True)\ndf_test[\"Workclass\"].replace(\" Without-pay\", \"None\" , inplace=True)\ndf_train[\"Workclass\"].replace(\" Never-worked\", \"None\", inplace=True)\ndf_test[\"Workclass\"].replace(\" Never-worked\", \"None\" , inplace=True)","06dadb1b":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16,6)) #Set the figures\ndf_train[\"Workclass\"].value_counts().plot.bar(ax = axes[0]) #Load a bar graph for the train WorkClass\ndf_test[\"Workclass\"].value_counts().plot.bar(ax = axes[1]) #Load a bar graph for the test WorkClass\naxes[0].set_title(\"WorkClass\") #Set the Train title to identify it\naxes[1].set_title(\"WorkClass Test\") #Set the Test title to identify it\nplt.show() #Show the plot\n\n","3bd07854":"\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16,6)) #Set the figures\ndf_train[\"Education\"].value_counts().plot.bar(ax = axes[0]) #Load a bar graph for the train Education\ndf_test[\"Education\"].value_counts().plot.bar(ax = axes[1]) #Load a bar graph for the test Education\naxes[0].set_title(\"Education\") #Set the Train title to identify it\naxes[1].set_title(\"Education Test\") #Set the Test title to identify it\nplt.show() #Show the plot\n\n","446cf1a4":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16,6)) #Set the figures\ndf_train[\"Marital_status\"].value_counts().plot.bar(ax = axes[0]) #Load a bar graph for the train Marital Status\ndf_test[\"Marital_status\"].value_counts().plot.bar(ax = axes[1]) #Load a bar graph for the test Marital Status\naxes[0].set_title(\"MaritalStatus\") #Set the Train title to identify it\naxes[1].set_title(\"MaritalStatus Test\") #Set the Test title to identify it\nplt.show() #Show the plot","26754735":"lis=\"Workclass Education Marital_status Occupation Relationship Race Sex Native_country\".split()\nle =LabelEncoder()\n\ndf_train[lis]=df_train[lis].apply(le.fit_transform)\ndf_test[lis]=df_test[lis].apply(le.fit_transform)\n\n","6847d018":"df_train.columns\n","1199ec53":"df_train_var=df_train.drop(\"Salary\",axis=1)\ndf_train_target=df_train.Salary\n","78041a42":"classifier=RandomForestClassifier(500)","ac73fd1c":"classifier.fit(df_train_var,df_train_target)","344f082f":"print(\"Random forest: \",classifier.score(df_train_var,df_train_target))","434aeced":"y=classifier.predict(df_test)","2f125a0c":"sub=pd.DataFrame(list(zip(list(range(2001,3001)),y)),columns=[\"Serial_no\",\"Salary\"])","3389ff48":"sub.to_csv(\"KM032-11804996-MdShazib.csv\", index =False)","3700b6af":"%ls ","65cb1a87":"correlation check","040b3a1b":"\n\nWithout pay and never worked are almost nothing. I think I will lump them in with None, as that is already a lump in with null.\n> ","66be8b37":"# Data exploratiom","e89918e9":"\nFix null\/? values\n","eb7cdc41":"Age","8cd2bfc6":"**work class**","7555ab91":"checking for null values"}}