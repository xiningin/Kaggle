{"cell_type":{"f8261a4f":"code","65c4a1be":"code","6202621c":"code","1e2010fb":"code","6fd9de3c":"code","5e26efc6":"code","1ece26f2":"code","16b65082":"code","544a2bff":"code","9c5fc23d":"code","0e9bf406":"code","8ce2e2e7":"code","4d2d07a9":"code","24ea5abe":"code","60454613":"code","f78853c6":"code","c1a5f704":"code","d38a270e":"code","19b3f336":"code","91a83f65":"code","b9548729":"code","9303c9eb":"code","4db874a1":"code","c51c8de7":"code","05bc18a1":"code","11457b76":"code","f58a1ff3":"code","9a0cfd17":"markdown","2b06d787":"markdown","900389e4":"markdown","39285617":"markdown","2614ff31":"markdown","b458b1f0":"markdown","1099a618":"markdown"},"source":{"f8261a4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65c4a1be":"import matplotlib.pyplot as plt\nimport math\nfrom matplotlib import style\nstyle.use('fivethirtyeight')","6202621c":"water = pd.read_csv('\/kaggle\/input\/indian-school-education-statistics\/percentage-of-schools-with-water-facility-2013-2016.csv')\ntoilet_girls = pd.read_csv('\/kaggle\/input\/indian-school-education-statistics\/schools-with-girls-toilet-2013-2016.csv')\nger = pd.read_csv('\/kaggle\/input\/indian-school-education-statistics\/gross-enrollment-ratio-2013-2016.csv')\ncomputer = pd.read_csv('\/kaggle\/input\/indian-school-education-statistics\/percentage-of-schools-with-comps-2013-2016.csv')\ntoilet_boys = pd.read_csv('\/kaggle\/input\/indian-school-education-statistics\/schools-with-boys-toilet-2013-2016.csv')\nelectricity = pd.read_csv('\/kaggle\/input\/indian-school-education-statistics\/percentage-of-schools-with-electricity-2013-2016.csv')\ndropout = pd.read_csv('\/kaggle\/input\/indian-school-education-statistics\/dropout-ratio-2012-2015.csv')","1e2010fb":"ger.head()","6fd9de3c":"electricity.head()","5e26efc6":"ger['State_UT'].value_counts()","1ece26f2":"electricity['State_UT'].value_counts().sort_index()","16b65082":"ger.set_index('State_UT', inplace = True)\nger.rename({'MADHYA PRADESH' : 'Madhya Pradesh', 'Pondicherry' : 'Puducherry', 'Uttaranchal' : 'Uttarakhand'}, inplace = True)\nger.reset_index(inplace = True)","544a2bff":"x = electricity[electricity['year'] == '2013-14']['Primary_Only'].values\ny = ger[ger['Year'] == '2013-14']['Primary_Total'].values","9c5fc23d":"df1 = ger.sort_values(by = ['State_UT'])['Primary_Total']\ndf2 = electricity.sort_values(by = ['State_UT'])['Primary_Only']","0e9bf406":"plt.scatter(df2, df1)","8ce2e2e7":"def de_mean(x):\n    x_bar = np.mean(x)\n    return [x_i - x_bar for x_i in x]\n\ndef covariance(x, y):\n    n = len(x)\n    return np.dot(de_mean(x), de_mean(y)) \/ (n - 1)","4d2d07a9":"def correlation(x, y):\n    std_x = np.std(x)\n    std_y = np.std(y)\n    if std_x > 0 and std_y > 0:\n        return covariance(x, y) \/ (std_x * std_y)\n        # we can also return covariance(x, y) \/ std_x \/ std_y\n    else:\n        return 0","24ea5abe":"correlation(df1, df2)","60454613":"def SpearmanCorrelation(x, y):\n    xranks = pd.Series(x).rank()\n    yranks = pd.Series(y).rank()\n    print(xranks)\n    print(yranks)\n    return correlation(xranks, yranks)","f78853c6":"SpearmanCorrelation(df1, df2)","c1a5f704":"df1","d38a270e":"def EvalCdf(sample, x):\n    count = 0\n    for i in sample:\n        if i <= x:\n            count += 1\n    prob = count \/ len(sample)\n    return prob","19b3f336":"sample = [1, 2, 3, 4]\nx = 4\n\nEvalCdf(sample, x)","91a83f65":"cdf1 = [EvalCdf(df1, x) for x in sorted(df1)]\ncdf2 = [EvalCdf(df2, x) for x in sorted(df2)]","b9548729":"len(cdf1)","9303c9eb":"plt.plot(cdf1)","4db874a1":"plt.plot(cdf2)","c51c8de7":"def PearsonMedianCoeff(sample, xbar, median):\n    gp = 3 * (xbar - median) \/ len(sample)\n    return gp","05bc18a1":"print(PearsonMedianCoeff(df1, np.mean(df1), np.median(df1)))\nprint(PearsonMedianCoeff(df2, np.mean(df2), np.median(df2)))","11457b76":"log_ordered_df1 = [math.log(x) for x in df1]\nlog_ordered_df2 = [math.log(x) for x in df2]","f58a1ff3":"correlation(log_ordered_df1, log_ordered_df2)","9a0cfd17":"# Skewness","2b06d787":"# Pearson's correlation method","900389e4":"# Log ordered values","39285617":"# Spearman's rank correlation method","2614ff31":"# Scatter Plot","b458b1f0":"***-- The notebook is under construction and is primarily made for my teaching purpose though I might make a good tutorial notebook of it for the Kaggle community --***","1099a618":"# Changing the name of some states"}}