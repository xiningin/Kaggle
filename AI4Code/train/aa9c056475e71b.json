{"cell_type":{"74e76732":"code","becd2964":"code","db90bb47":"code","31fa19ff":"code","4a5057da":"code","d8cc6fbd":"code","94b0f19b":"code","b33efc4b":"code","06e37146":"code","146bf23f":"code","f10275a8":"code","8ad9343d":"code","a0ad7926":"code","e55af848":"code","d398cc09":"code","7a84f7ac":"code","07e589aa":"code","051db41d":"code","b57bb923":"code","6f9c1a26":"code","e70d6575":"markdown","25d17d3d":"markdown","15d48d11":"markdown","d34a7ba4":"markdown","92484345":"markdown","81e46a56":"markdown","9326d4f2":"markdown","50ca2e7e":"markdown","ec27756e":"markdown","5b9a94a9":"markdown","26087cb1":"markdown","bab60b94":"markdown"},"source":{"74e76732":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, f1_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split, cross_val_score, RepeatedStratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.svm import SVC\nimport math\n\nplt.style.use('seaborn')\nseed = 6467\nnp.random.seed(seed)\n\n%matplotlib inline","becd2964":"df = pd.read_csv('..\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')","db90bb47":"df.head()","31fa19ff":"df.drop(columns = ['PassengerId','Firstname','Lastname'], inplace=True)\nlen(df)","4a5057da":"df.isnull().sum()","d8cc6fbd":"df.nunique()","94b0f19b":"fig = px.histogram(df, x=\"Age\", color=\"Sex\", marginal=\"box\",\n                   hover_data=df.columns, title=\"Age Distribution accross gender\")\nfig.show()","b33efc4b":"fig = go.Figure(data=[\n    go.Bar(name='Survived', y=df[df['Survived']==1]['Country'].value_counts().values, x=df[df['Survived']==1]['Country'].value_counts().index),\n    go.Bar(name='Not Survived', y=df[df['Survived']==0]['Country'].value_counts().values, x=df[df['Survived']==0]['Country'].value_counts().index)\n])\n# Change the bar mode\nfig.update_layout(barmode='group', title_text = 'Survival count accross countries')\nfig.show()","06e37146":"fig = px.sunburst(df, path=['Category', 'Survived'], title='Survival count accross category')\nfig.show()","146bf23f":"fig = go.Figure(data=[\n    go.Bar(name='Survived', y=df[df['Survived']==1]['Sex'].value_counts().values, x=df[df['Survived']==1]['Sex'].value_counts().index),\n    go.Bar(name='Not Survived', y=df[df['Survived']==0]['Sex'].value_counts().values, x=df[df['Survived']==0]['Sex'].value_counts().index)\n])\n# Change the bar mode\nfig.update_layout(barmode='group', title_text='Survival count accross gender')\nfig.show()","f10275a8":"fig = px.pie(df, names='Survived', title='Survival class distribution')\nfig.show()","8ad9343d":"features = ['Country','Sex','Category']\ndf[features] = df[features].apply(preprocessing.LabelEncoder().fit_transform)","a0ad7926":"df.head()","e55af848":"corr = df.corr()\nfig = px.imshow(corr)\nfig.show()","d398cc09":"X = df.drop(columns=['Survived'])\ny = df['Survived']\ntrain_x, test_x, train_y, test_y = train_test_split(X, y, test_size=0.3, random_state=seed)","7a84f7ac":"rf_model = RandomForestClassifier(n_estimators=10, class_weight={0:1, 1:5})\ngb_model = GradientBoostingClassifier(n_estimators=10)\nsvm_model = SVC(class_weight={0:1, 1:6},probability=True)\nlogreg_model = LogisticRegression(class_weight={0:1, 1:5})\nensemble = VotingClassifier([('rf',rf_model),('gb',gb_model),('svc',svm_model),('lg',logreg_model)], voting='soft')\n\nmodels = {'Random Forest':rf_model, 'Gradient Boosting' :gb_model, 'SVC' :svm_model, 'Logistic Regression': logreg_model, 'Ensemble': ensemble}\nnames = ['Random Forest','Gradient Boosting','SVC','Logistic Regression','Ensemble']\n","07e589aa":"n_repeats = 10\nrskf = RepeatedStratifiedKFold(n_splits=4, n_repeats=n_repeats, random_state=seed)","051db41d":"i=0\nroc_auc_scores = np.zeros(5)\nfor train_index, val_index in rskf.split(train_x, train_y):\n    \n    x_train, x_val = train_x.iloc[train_index], train_x.iloc[val_index]\n    y_train, y_val = train_y.iloc[train_index], train_y.iloc[val_index]\n    \n    models[names[i]].fit(x_train, y_train)\n    y_pred = models[names[i]].predict_proba(x_val)   \n    y_proba = [p[1] for p in y_pred]\n    roc_auc_scores[i] += roc_auc_score(y_val, y_proba)\n  \n    i += 1\n    \n    if i == 5:\n        i=0\n\nroc_auc_scores = roc_auc_scores\/(n_repeats-2)\nfor i in range(len(names)):\n    print(f\"Validation ROC AUC score for {names[i]}: {roc_auc_scores[i]}\")","b57bb923":"for i in names:\n    y_pred = models[i].predict_proba(test_x)\n    fpr1, tpr1, thresh1 = roc_curve(test_y, y_pred[:,1], pos_label=1)\n    plt.plot(fpr1, tpr1, linestyle='--', label=i)\n\nplt.plot([0,1],[0,1], linestyle='--', color='blue')\nplt.title('ROC curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()\n    ","6f9c1a26":"pred_y = ensemble.predict_proba(test_x)\nprob_y = [p[1] for p in pred_y]\nprint(\"ROC AUC score: \",roc_auc_score(test_y, prob_y))\n\npred_y = ensemble.predict(test_x)\nprint(\"Confusion matrix: \\n\", confusion_matrix(test_y, pred_y))\nprint(\"Accuracy :\", accuracy_score(test_y, pred_y))\n","e70d6575":"Looks like except Age other columns are categorical.\n\nLet's plot the data.","25d17d3d":"## Prediction\n\nLet's start with dividing data into train and test sets.","15d48d11":"## EDA\n\nLet's check for null values and unique values count for each feature.","d34a7ba4":"Survival count for male is clearly higher than that of females.","92484345":"We can clearly see the class imbalance.\n\nLet's prepare data for prediction by LabelEncoding the values.","81e46a56":"PassengerId, Firstname and Lastname are not going to help in prediction, let's drop them.","9326d4f2":"# Estonia Survival Prediction\n\nIn this notebook I have performed EDA using plotly and survival prediction using ensemble model.\n\n### Survival Prediction:\n\nThere is a class imbalance problem in data, I have used ensembled stack of RandomForestClassifier, SVC, GradientBoostingClassifier and LogisticRegressionClassifier with class weights to solve the problem.\n\n","50ca2e7e":"We can see that passengers from country Estonia have high survival count.","ec27756e":"Looks like Crew members have high survival_count\/total value than Passengers.","5b9a94a9":"Let's define the models that we are going to use for prediction. On top of base classifiers, I am using VotingClassifier to get final prediction.","26087cb1":"Let's apply the trained models on test data to see how it performs on unseen data.","bab60b94":"We can see from above distribution plot that average age range for female is 32-59 and for male is 29-58. \n\nLet's plot the bar plots for categorical features values against their counts."}}