{"cell_type":{"b4893c35":"code","62f8ac7c":"code","71b1c52a":"code","5a849529":"code","922383f5":"code","916c4971":"code","f2246c14":"code","6d419b5a":"code","5928052a":"code","8a336215":"code","9d19702b":"code","c59efa9d":"code","08dd935c":"code","b88ae08d":"code","be5fbdcb":"code","dcfc4c3a":"code","a6eee0e7":"code","aa78af63":"code","71682050":"code","13e0e98b":"code","aae8d168":"code","9eb4e198":"code","94e9d749":"code","89f9e830":"code","8bdf6c52":"markdown","15461d63":"markdown","85da78fd":"markdown","a77a3d8a":"markdown","030fa8cb":"markdown","53a85565":"markdown","c6cef71a":"markdown","f9b6f152":"markdown","ae261c64":"markdown","d040029c":"markdown","44f1a3d2":"markdown","834ff0ea":"markdown","17657722":"markdown","061c2a71":"markdown"},"source":{"b4893c35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","62f8ac7c":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport os\nimport cv2\nfrom glob import glob\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import RMSprop,Adam\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nprint(tf.__version__)","71b1c52a":"BASE_DIR=('..\/input\/state-farm-distracted-driver-detection\/imgs\/')\ntrain_dir=os.path.join(BASE_DIR,'train\/')\ntest_dir=os.path.join(BASE_DIR,'test\/')\n\nprint('Number of images in training set = ',str(len(glob(train_dir+'*\/*'))))\nprint('Number of images in testing set = ',str(len(glob(test_dir+'*'))))","5a849529":"class_labels=['safe driving','texting - right','talking on the phone - right','texting - left','talking on the phone - left','operating the radio','drinking','reaching behind','hair and makeup','talking to passenger']\n\n#training directories\nfor label in class_labels:\n    tf.io.gfile.makedirs('\/kaggle\/working\/train_dataset\/'+label+'\/')\n    \n#validation directories\nfor label in class_labels:\n    tf.io.gfile.makedirs('\/kaggle\/working\/val_dataset\/'+label+'\/')\n    \n#test directories\nfor label in class_labels:\n    tf.io.gfile.makedirs('\/kaggle\/working\/test_dataset\/'+label+'\/')\n\n    \n","922383f5":"os.listdir(\"\/kaggle\/working\/train_dataset\/\")","916c4971":"SAFE_DRIVING=os.path.join(train_dir,'c0\/')\nTEXTING_RIGHT=os.path.join(train_dir,'c1\/')\nTALKING_ON_PHONE_RIGHT=os.path.join(train_dir,'c2\/')\nTEXTING_LEFT=os.path.join(train_dir,'c3\/')\nTALKING_ON_PHONE_LEFT=os.path.join(train_dir,'c4\/')\nOPERATING_THE_RADIO=os.path.join(train_dir,'c5\/')\nDRINKING=os.path.join(train_dir,'c6\/')\nREACHING_BEHIND=os.path.join(train_dir,'c7\/')\nHAIR_MAKEUP=os.path.join(train_dir,'c8\/')\nTALKING_TO_PASSENGER=os.path.join(train_dir,'c9\/')\n\nprint(\"Safe driving = \",len(os.listdir(SAFE_DRIVING)))\nprint(\"Texting right = \",len(os.listdir(TEXTING_RIGHT)))\nprint(\"Talking on phone right = \",len(os.listdir(TALKING_ON_PHONE_RIGHT)))\nprint(\"Texting left = \",len(os.listdir(TEXTING_LEFT)))\nprint(\"Talking on phone left = \",len(os.listdir(TALKING_ON_PHONE_LEFT)))\nprint(\"Operating the radio = \",len(os.listdir(OPERATING_THE_RADIO)))\nprint(\"Drinking = \",len(os.listdir(DRINKING)))\nprint(\"Reaching behind = \",len(os.listdir(REACHING_BEHIND)))\nprint(\"Hair makeup = \",len(os.listdir(HAIR_MAKEUP)))\nprint(\"Talking to passenger = \",len(os.listdir(TALKING_TO_PASSENGER)))","f2246c14":"# Distribution of images in respective directories\n\nimport pathlib \nimport cv2\nimport shutil\n\ndef distribution(param1, param2, param3):\n\n#     data_dir = pathlib.Path(param2)\n#     data_dir\n\n    a=os.listdir(param3)\n\n    test = a[:200]\n    val = a[201:401]\n    train = a[402:]\n\n\n    for images in test:\n#         print(f\"..\/input\/state-farm-distracted-driver-detection\/imgs\/train\/{param1}\/\"+images, f\"\/kaggle\/working\/test_dataset\/{param2}\/\")\n        shutil.copy(f\"..\/input\/state-farm-distracted-driver-detection\/imgs\/train\/{param1}\/\"+images, f\"\/kaggle\/working\/test_dataset\/{param2}\/\")\n    for images in val:\n        shutil.copy(f\"..\/input\/state-farm-distracted-driver-detection\/imgs\/train\/{param1}\/\"+images, f\"\/kaggle\/working\/val_dataset\/{param2}\/\")\n\n    for images in train:\n        shutil.copy(f\"..\/input\/state-farm-distracted-driver-detection\/imgs\/train\/{param1}\/\"+images, f\"\/kaggle\/working\/train_dataset\/{param2}\/\")\n\n\n    print(f\"The count of images for test_dataset > {param2} \",len(os.listdir(f\"\/kaggle\/working\/test_dataset\/{param2}\")))\n    print(f\"The count of images for val_dataset > {param2} \",len(os.listdir(f\"\/kaggle\/working\/val_dataset\/{param2}\")))\n    print(f\"The count of images for train_dataset > {param2} \",len(os.listdir(f\"\/kaggle\/working\/train_dataset\/{param2}\")))\n    \n    \n","6d419b5a":"dir_list = [SAFE_DRIVING, TEXTING_RIGHT, TALKING_ON_PHONE_RIGHT, TEXTING_LEFT, TALKING_ON_PHONE_LEFT, OPERATING_THE_RADIO, DRINKING, REACHING_BEHIND, HAIR_MAKEUP, TALKING_TO_PASSENGER]\ni=0\nfor class_label in class_labels:\n    print(f\"c{i}\")\n    distribution(f\"c{i}\", class_label, dir_list[i]) \n    i+=1\n","5928052a":"import PIL\nimport pathlib\n\ndata_dir = \"\/kaggle\/working\/train_dataset\/\"\n\ndata_dir = pathlib.Path(data_dir)\n\n\nprint(\"The count of total images for training set \",len(list(data_dir.glob('*\/*.jpg'))))\n","8a336215":"driving = list(data_dir.glob('safe driving\/*'))\ndriving[:5]","9d19702b":"import PIL\n\nPIL.Image.open(str(driving[0]))","c59efa9d":"all_training_images = {\n    'safe driving' :  list(data_dir.glob('safe driving\/*')),\n    'texting - right' :  list(data_dir.glob('texting - right\/*')),\n    'talking on the phone - right' :  list(data_dir.glob('talking on the phone - right\/*')),\n    'texting - left' :  list(data_dir.glob('texting - left\/*')),\n    'talking on the phone - left' :  list(data_dir.glob('talking on the phone - left\/*')),\n    'operating the radio' :  list(data_dir.glob('operating the radio\/*')),\n    'drinking' :  list(data_dir.glob('drinking\/*')),\n    'reaching behind' :  list(data_dir.glob('reaching behind\/*')),\n    'hair and makeup' :  list(data_dir.glob('hair and makeup\/*')),\n    'talking to passenger' :  list(data_dir.glob('talking to passenger\/*')),\n    \n}","08dd935c":"PIL.Image.open(all_training_images['safe driving'][1])","b88ae08d":"# Gives all the count of images in all the directories of training dataset\n\n\nfor class_label, img_count in all_training_images.items():\n    print(class_label)\n    print(len(img_count))","be5fbdcb":"updated_train_dir=\"\/kaggle\/working\/train_dataset\/\"\nupdated_val_dir=\"\/kaggle\/working\/val_dataset\/\"\nupdated_test_dir=\"\/kaggle\/working\/test_dataset\/\"\nprint(os.listdir(updated_train_dir))\nprint(os.listdir(updated_val_dir))\nprint(os.listdir(updated_test_dir))","dcfc4c3a":"train_datagen=ImageDataGenerator(rescale=1.0\/255,\n                                 rotation_range=30,\n                                 width_shift_range=0.2,\n                                 height_shift_range=0.2,\n                                 zoom_range=0.2,\n                                 )\n\nval_datagen=ImageDataGenerator(rescale=1.0\/255)\n\ntest_datagen=ImageDataGenerator(rescale=1.0\/255)\n\ntrain_generator=train_datagen.flow_from_directory(updated_train_dir,color_mode=\"grayscale\",target_size=(180,180),batch_size=128,class_mode='categorical')\n\nval_generator=val_datagen.flow_from_directory(updated_val_dir,color_mode=\"grayscale\",target_size=(180,180),batch_size=128,class_mode='categorical')\n\ntest_generator=test_datagen.flow_from_directory(updated_test_dir,color_mode=\"grayscale\",target_size=(180,180),batch_size=128,class_mode='categorical')","a6eee0e7":"model=tf.keras.models.Sequential([\n    # This is the first convolution\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu',padding='same', input_shape=(180, 180, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    # The second convolution\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu',padding='same'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The third convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu',padding='same'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The fourth convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu',padding='same'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The fifth convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu',padding='same'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # Flatten the results to feed into a DNN\n    tf.keras.layers.Flatten(),\n    # 512 neuron hidden layer\n    tf.keras.layers.Dense(512, activation='relu'),\n    # Only 1 output neuron. It will contain a value from 0-1 \n    tf.keras.layers.Dense(10)\n])","aa78af63":"model.compile(optimizer=RMSprop(lr=0.001),\n              metrics=['accuracy','Precision','Recall'])","71682050":"model.summary()","13e0e98b":"Ylabels=['drinking', 'safe driving', 'talking to passenger', 'reaching behind', 'operating the radio', 'talking on the phone - right', 'texting - left', 'hair and makeup', 'talking on the phone - left', 'texting - right']","aae8d168":"history=model.fit(train_generator,Ylabels,validation_data=val_generator,epochs=30,verbose=2)","9eb4e198":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\ntrain_precision=history.history['precision']\nval_precision=history.history['val_precision']\n\ntrain_recall=history.history['recall']\nval_recall=history.history['val_recall']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, train_precision, 'r', label='Training precision')\nplt.plot(epochs, val_precision, 'b', label='Validation precision')\nplt.title('Training and validation precision')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, train_recall, 'r', label='Training recall')\nplt.plot(epochs, val_recall, 'b', label='Validation recall')\nplt.title('Training and validation recall')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()\n","94e9d749":"# import cv2\n\n# # Resizing the images\n# X, Y = [], []\n\n\n# for class_label, img_count in all_training_images.items():\n#     print(class_label)\n#     for image in img_count:\n#         img = cv2.imread(str(image))\n#         resized_img = cv2.resize(img,(180,180))\n#         X.append(resized_img)\n#         Y.append(class_label)","89f9e830":"# X = np.array(X)\n# Y = np.array(Y)","8bdf6c52":"### Plotting","15461d63":"**Starting with Image Preprocessing**","85da78fd":"# Importing Modules","a77a3d8a":"### Creating model\n","030fa8cb":"## Making Train, validation and test directories","53a85565":"### Training a model","c6cef71a":"### Mapping","f9b6f152":"### Creating Image data generator ","ae261c64":"### Creating models\n","d040029c":"### The predicted 10 classes\n* c0: safe driving\n* c1: texting - right\n* c2: talking on the phone - right\n* c3: texting - left\n* c4: talking on the phone - left\n* c5: operating the radio\n* c6: drinking\n* c7: reaching behind\n* c8: hair and makeup\n* c9: talking to passenger","44f1a3d2":"### View safe driving image","834ff0ea":"### Setting variable of path of all three directories","17657722":"# Loading Data","061c2a71":"### Getting count of each directory"}}