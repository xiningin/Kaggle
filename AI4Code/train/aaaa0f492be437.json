{"cell_type":{"afbad523":"code","45c85be7":"code","48d4ed0e":"code","f640987c":"code","e5b81d1c":"code","9d6958ca":"code","564a7a38":"code","a1179dab":"code","b9cc292d":"code","8f4d9c2c":"code","e5f393ec":"code","730b7a96":"code","866a817d":"code","7c7e0237":"code","6868dd4e":"markdown","97434acb":"markdown","e1936831":"markdown","f847228f":"markdown","1bd6fbc7":"markdown","bf73bbf3":"markdown","b25d97ad":"markdown"},"source":{"afbad523":"import matplotlib.pyplot as plt\nimport numpy as np \nimport pandas as pd","45c85be7":"#result y_i =0 or 1\nfig,axes =plt.subplots(1,2,figsize=(16,5))\ngraph_title = [\"evaluation score(y is 0)\",\"evaluation score(y is 1)\"]\nfor i in range(0,2):\n    y = np.tile(i,98)\n    y_hat = np.linspace(0.01,0.99,98)\n    log_loss = -(y*np.log(y_hat)+ (1-y)*(np.log(1-y_hat)))\n    axes[i].set_title(graph_title[i])\n    axes[i].plot(y_hat,log_loss)\n#\u7e26\u8ef8\u304c\u8a55\u4fa1\u6307\u6a19\u306e\u30b9\u30b3\u30a2\u3001\u6a2a\u8ef8\u304c\u81ea\u5206\u304c\u4e88\u6e2c\u3057\u305fy\u306e\u5024","48d4ed0e":"import os\nimport re\nimport sklearn\nfrom sklearn.linear_model import *\nimport seaborn as sns","f640987c":"DATA_PATH = '..\/input\/ncaaw-march-mania-2021\/'\ndf_seeds = pd.read_csv(DATA_PATH + \"WNCAATourneySeeds.csv\")\ndf_season_results = pd.read_csv(DATA_PATH + \"WRegularSeasonCompactResults.csv\")\ndf_season_results.drop(['NumOT', 'WLoc'], axis=1, inplace=True)","e5b81d1c":"#\u5404\u30b7\u30fc\u30ba\u30f3,\u30c1\u30fc\u30e0\u306e\u52dd\u5229\u6570\nnum_win = df_season_results.groupby(['Season', 'WTeamID']).count()\nnum_win = num_win.reset_index()[['Season', 'WTeamID', 'DayNum']].rename(columns={\"DayNum\": \"NumWins\", \"WTeamID\": \"TeamID\"})\n#\u5404\u30b7\u30fc\u30ba\u30f3,\u30c1\u30fc\u30e0\u306e\u6557\u5317\u6570\nnum_loss = df_season_results.groupby(['Season', 'LTeamID']).count()\nnum_loss = num_loss.reset_index()[['Season', 'LTeamID', 'DayNum']].rename(columns={\"DayNum\": \"NumLosses\", \"LTeamID\": \"TeamID\"})","9d6958ca":"df_features_season_w = df_season_results.groupby(['Season', 'WTeamID']).count().reset_index()[['Season', 'WTeamID']].rename(columns={\"WTeamID\": \"TeamID\"})\ndf_features_season_l = df_season_results.groupby(['Season', 'LTeamID']).count().reset_index()[['Season', 'LTeamID']].rename(columns={\"LTeamID\": \"TeamID\"})\ndf_features_season = pd.concat([df_features_season_w, df_features_season_l], 0).drop_duplicates().sort_values(['Season', 'TeamID']).reset_index(drop=True)\ndf_features_season = df_features_season.merge(num_win, on=['Season', 'TeamID'], how='left')\ndf_features_season = df_features_season.merge(num_loss, on=['Season', 'TeamID'], how='left')\ndf_features_season.fillna(0, inplace=True)\ndf_features_season['WinRatio'] = df_features_season['NumWins'] \/ (df_features_season['NumWins'] + df_features_season['NumLosses'])\ndf_features_season.isnull().sum()","564a7a38":"def get_round(day):\n    round_dic = {134: 0, 135: 0, 136: 1, 137: 1, 138: 2, 139: 2, 143: 3, 144: 3, 145: 4, 146: 4, 152: 5, 154: 6}\n    try:\n        return round_dic[day]\n    except:\n        print(f'Unknow day : {day}')\n        return 0\ndef add_loosing_matches(win_df):\n    win_rename = {\n        \"WTeamID\": \"TeamIdA\", \n        \"WScore\" : \"ScoreA\", \n        \"LTeamID\" : \"TeamIdB\",\n        \"LScore\": \"ScoreB\",\n        'WinRatioW' : 'WinRatioA',\n        'WinRatioL' : 'WinRatioB',\n     }\n    \n    lose_rename = {\n        \"WTeamID\": \"TeamIdB\", \n        \"WScore\" : \"ScoreB\", \n        \"LTeamID\" : \"TeamIdA\",\n        \"LScore\": \"ScoreA\",\n        'WinRatioW' : 'WinRatioB',\n        'WinRatioL' : 'WinRatioA',\n    }\n    \n    win_df = win_df.copy()\n    lose_df = win_df.copy()\n    \n    win_df = win_df.rename(columns=win_rename)\n    lose_df = lose_df.rename(columns=lose_rename)\n    \n    return pd.concat([win_df, lose_df], 0, sort=False)","a1179dab":"df_tourney_results = pd.read_csv(DATA_PATH + \"WNCAATourneyCompactResults.csv\")\ndf_tourney_results.drop(['NumOT', 'WLoc'], axis=1, inplace=True)\ndf_tourney_results\ndf_tourney_results['Round'] = df_tourney_results['DayNum'].apply(get_round)","b9cc292d":"df = df_tourney_results.copy()\ndf = df[df['Season'] >= 2003].reset_index(drop=True)\n\ndf.head()\ndf = pd.merge(\n    df, \n    df_seeds, \n    how='left', \n    left_on=['Season', 'WTeamID'], \n    right_on=['Season', 'TeamID']\n).drop('TeamID', axis=1)\ndf = pd.merge(\n    df, \n    df_seeds, \n    how='left', \n    left_on=['Season', 'LTeamID'], \n    right_on=['Season', 'TeamID']\n).drop('TeamID', axis=1)\ndf = df.drop(['Seed_x','Seed_y'], axis=1)\ndf.isnull().sum()","8f4d9c2c":"df = pd.merge(\n    df,\n    df_features_season,\n    how='left',\n    left_on=['Season', 'WTeamID'],\n    right_on=['Season', 'TeamID']\n).rename(columns={\n    'NumWins': 'NumWinsW',\n    'NumLosses': 'NumLossesW',\n    'WinRatio': 'WinRatioW',\n}).drop(columns='TeamID', axis=1)\ndf = pd.merge(\n    df,\n    df_features_season,\n    how='left',\n    left_on=['Season', 'LTeamID'],\n    right_on=['Season', 'TeamID']\n).rename(columns={\n    'NumWins': 'NumWinsL',\n    'NumLosses': 'NumLossesL',\n    'WinRatio': 'WinRatioL',\n}).drop(columns='TeamID', axis=1)\ndf = add_loosing_matches(df)\ndf = df.drop([\"NumWinsW\",\"NumLossesW\",\"NumWinsL\",\"NumLossesL\"],axis=1)\n\ndf['WinRatioDiff'] = df['WinRatioA'] - df['WinRatioB']\ndf['ScoreDiff'] = df['ScoreA'] - df['ScoreB']\ndf['WinA'] = (df['ScoreDiff'] > 0).astype(int)","e5f393ec":"df_test = pd.read_csv(DATA_PATH + \"WSampleSubmissionStage1.csv\")\ndf_test['Season'] = df_test['ID'].apply(lambda x: int(x.split('_')[0]))\ndf_test['TeamIdA'] = df_test['ID'].apply(lambda x: int(x.split('_')[1]))\ndf_test['TeamIdB'] = df_test['ID'].apply(lambda x: int(x.split('_')[2]))\ndf_test = pd.merge(\n    df_test,\n    df_seeds,\n    how='left',\n    left_on=['Season', 'TeamIdA'],\n    right_on=['Season', 'TeamID']\n).drop('TeamID', axis=1)\ndf_test = pd.merge(\n    df_test, \n    df_seeds, \n    how='left', \n    left_on=['Season', 'TeamIdB'], \n    right_on=['Season', 'TeamID']\n).drop('TeamID', axis=1)\ndf_test = df_test.drop(['Seed_x','Seed_y'], axis=1)","730b7a96":"df_test = pd.merge(\n    df_test,\n    df_features_season,\n    how='left',\n    left_on=['Season', 'TeamIdA'],\n    right_on=['Season', 'TeamID']\n).rename(columns={\n    'NumWins': 'NumWinsA',\n    'NumLosses': 'NumLossesA',\n    'WinRatio': 'WinRatioA',\n}).drop(columns='TeamID', axis=1)\ndf_test = pd.merge(\n    df_test,\n    df_features_season,\n    how='left',\n    left_on=['Season', 'TeamIdB'],\n    right_on=['Season', 'TeamID']\n).rename(columns={\n    'NumWins': 'NumWinsB',\n    'NumLosses': 'NumLossesB',\n    'WinRatio': 'WinRatioB',\n}).drop(columns='TeamID', axis=1)\ndf_test=df_test.drop([\"NumWinsA\",\"NumLossesA\",\"NumWinsB\",\"NumLossesB\"],axis=1)\ndf_test['WinRatioDiff'] = df_test['WinRatioA'] - df_test['WinRatioB']\ndf_test","866a817d":"features = [\n    'WinRatioA',\n    'WinRatioB',\n    'WinRatioDiff',\n]\n\ndef logistic_reg(df, df_test_=None, plot=False, verbose=0):\n    seasons = df['Season'].unique()\n    cvs = []\n    pred_tests = []\n    target = \"WinA\"\n\n    for season in range(2015,2020):\n        print(f'\\nValidating on season {season}')\n        \n        df_train = df[df['Season'] == season-1].reset_index(drop=True).copy()\n        df_test = df_test_[df_test_[\"Season\"]==season].copy()        \n        \n        model = LogisticRegression(C=10)\n        model.fit(df_train[features], df_train[target])\n        if df_test is not None:\n            pred_test = model.predict_proba(df_test[features])[:, 1]               \n            pred_tests.append(pred_test)\n            print(pred_test.shape)\n        \n    \n    return np.array(pred_tests).reshape(2016*5,1)\npred_test = logistic_reg(df, df_test, plot=False)","7c7e0237":"sub = df_test[['ID', 'Pred']].copy()\nsub['Pred'] = pred_test\nsub.to_csv('submission.csv', index=False)","6868dd4e":"## \u30e2\u30c7\u30eb\u4f5c\u6210 Model creation\n\n\u30b7\u30fc\u30ba\u30f3\u306e\u52dd\u7387\u3092\u8aac\u660e\u5909\u6570\u3068\u3057\u305f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30e2\u30c7\u30eb\u306e\u4f5c\u6210<br>\nI created a logistic model with the season's winning percentage as the explanatory variable.\n\n\n* 2014-2019\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u7528 Use data from 2014-2019\n* \u53bb\u5e74\u306e\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u7d50\u679c\u304b\u3089\u305d\u306e\u5e74\u306e\u7d50\u679c\u3092\u4e88\u6e2c Predict the year's results based on the previous year's tournament results.","97434acb":"## \u307e\u3068\u30811 conclusion1\n\n* 1st stage\u306e\u4e88\u6e2c\u30670.7\u8d85\u3048\u305f\u3089\u305d\u306e\u30e2\u30c7\u30eb\u306f\u3061\u3087\u3063\u3068\u304a\u304b\u3057\u3044\u304b\u3082<br>If the 1st stage prediction exceeds 0.7, that model may have a problem\n* \u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3057\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u884c\u3048\u3070\u305d\u3053\u305d\u3053\u3044\u3044\u4e88\u6e2c\u306f\u51fa\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u63a8\u6e2c<br>I'm guessing that if you extract the data properly and do a logistic regression, you can get a good prediction.","e1936831":"## 2.\u30e2\u30c7\u30eb\u4f5c\u6210 model establishing\n\n\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\u7b49\u306f\u4ee5\u4e0b\u306enotebook\u3092\u771f\u4f3c\u3057\u307e\u3057\u305f<br>\n\nhttps:\/\/www.kaggle.com\/theoviel\/ncaa-starter-the-simpler-the-better\n\nData processing and more was based on the above NOTEBOOK.\nThanks!!","f847228f":"## 1. \u7c21\u5358\u306a\u30b0\u30e9\u30d5\u4f5c\u6210 (Simple graphing)\n\u4eca\u56de\u7528\u3044\u3089\u308c\u308b\u8a55\u4fa1\u6307\u6a19\u306f\"logloss\"\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u5f0f\u306f\u4ee5\u4e0b(The equation called logloss is as follows)\uff1a\n$$\nLogloss = - \\frac{1}{n}\\sum_{i=1}^{n}[y_i\\log({\\hat y_i})+(1-y_i)\\log((1-{\\hat y_i}))]\n$$\n\nwhere\n\n\u30fb n is the number of games played<br>\n\u30fb $y\u0302$ i is the predicted probability of team 1 beating team 2<br>\n\u30fb $y_i$ is 1 if team 1 wins, 0 if team 2 wins<br>\n\u30fb log is the natural logarithm<br>\n\n$n=1$\u3068\u3057\u305f\u6642\u306e$y\u0302$\u3068$y_i$\u3092\u7528\u3044\u305f\u8a55\u4fa1\u6307\u6a19\u306e\u5dee\u304c\u3069\u308c\u3060\u3051\u306b\u306a\u308b\u306e\u304b\u3092\u30b0\u30e9\u30d5\u3092\u7528\u3044\u3066\u8868\u3059\n\nLet's use a graph to show how much the difference between the evaluation indices using $\u0177$ and $y_i$ will be when $n=1$.","1bd6fbc7":"## \u307e\u3068\u30812 Conclusion2\n\n* \u3053\u306e\u30e2\u30c7\u30eb\u306e\u7d50\u679c\u306f0.62\u304f\u3089\u3044 The result for this model is about 0.62\n* \u7279\u5fb4\u91cf\u5c11\u306a\u3044\u304b\u3089\u3082\u3063\u3068\u5897\u3084\u3057\u3066\u3042\u3052\u305f\u308a\u3001\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3084\u308b\u3068\u6027\u80fd\u304c\u4e0a\u304c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093","bf73bbf3":"# About Evaluation, simple model(\u8a55\u4fa1\u6307\u6a19\u3068\u30b7\u30f3\u30d7\u30eb\u30e2\u30c7\u30eb)\n\n\n\nThis notebook is my notebook for boys at the following URL\n\nhttps:\/\/www.kaggle.com\/santohide\/about-evaluation-simple-model\n","b25d97ad":"# \u307e\u3068\u3081\n\n\u96d1\u306a\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\n\u30c7\u30fc\u30bf\u5206\u6790\u306f\u96e3\u3057\u3044\u3067\u3059...\n\u5411\u4e0a\u5fc3\u3092\u6301\u3063\u3066\u30c7\u30fc\u30bf\u5206\u6790\u306b\u52b1\u3093\u3067\u304f\u3060\u3055\u3044!\n\nData analysis is difficult...\nBe ambitious and work hard on your data analysis!"}}