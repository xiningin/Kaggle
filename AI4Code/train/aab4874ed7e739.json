{"cell_type":{"5f7b7458":"code","0f8f5e65":"code","cd47b4d0":"code","66daf41f":"code","b2c19beb":"code","780835e0":"code","47a0437f":"code","d4331976":"code","40cb4a2c":"code","54e167fe":"code","c79d8394":"code","d18d2f9b":"code","af7eb880":"code","f660776b":"code","c6589f1f":"code","4235816f":"code","a284bb98":"code","f9c1ab9a":"code","dbb0e42d":"code","86b23e51":"markdown","a5bfdfd0":"markdown","0880f0e8":"markdown","240cee2b":"markdown","7be53ba0":"markdown","83e6ed4e":"markdown","8b6d00b8":"markdown"},"source":{"5f7b7458":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0f8f5e65":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier","cd47b4d0":"train = pd.read_csv('..\/input\/train.csv')\ntrain.head()","66daf41f":"y = train['Survived'].copy()","b2c19beb":"features = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']  #All the features we might need in the model","780835e0":"X = train[features].copy()","47a0437f":"X = pd.get_dummies(X) #one hot code encoding\nX.head()","d4331976":"first_imputer = SimpleImputer(missing_values=np.nan,strategy='mean')\nX = pd.DataFrame(first_imputer.fit_transform(X))","40cb4a2c":"Xtrain, Xtest, ytrain, ytest = train_test_split(X,y,random_state=1,test_size=0.33)","54e167fe":"def AccuracyTracker(Xtrain,Xtest,ytrain,ytest,n):\n    model = DecisionTreeClassifier(max_leaf_nodes=n,random_state=1)\n    model.fit(Xtrain,ytrain)\n    print(n,accuracy_score(ytest,model.predict(Xtest)))\nfor i in range(2,50):\n    AccuracyTracker(Xtrain,Xtest,ytrain,ytest,i)","c79d8394":"model = RandomForestClassifier(n_estimators=100)\nmodel.fit(Xtrain,ytrain)\naccuracy_score(ytest,model.predict(Xtest))","d18d2f9b":"modeltree = DecisionTreeClassifier(max_leaf_nodes=12,random_state=1)  #hollow tree created now let's put the data\nmodeltree.fit(X,y)","af7eb880":"test = pd.read_csv(\"..\/input\/test.csv\")","f660776b":"pretest = test[features].copy()\npretest = pd.get_dummies(pretest)","c6589f1f":"imputedpretest = pd.DataFrame(first_imputer.fit_transform(pretest))","4235816f":"imputedpretest","a284bb98":"res = modeltree.predict(imputedpretest)","f9c1ab9a":"ansdic = {'PassengerId':test['PassengerId'],'Survived':res}\nans = pd.DataFrame(ansdic)\nans.head()","dbb0e42d":"ans.to_csv(\"answer.csv\",index=False)","86b23e51":"# This is even less than the last time, so we will use DT","a5bfdfd0":"# Now we have all the features(X) and correspoding output (y) to create a trained Model","0880f0e8":"# Including all the Required Libraries ","240cee2b":"# In this version I'll be using imputing which I've never used before","7be53ba0":"## We have all set testdata now let's predict using this data","83e6ed4e":"# Now we will process the test data in the same way","8b6d00b8":"## accuracy is maximum for n=12 which is 0.7864406779661017"}}