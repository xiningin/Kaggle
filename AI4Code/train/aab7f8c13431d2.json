{"cell_type":{"2d807ffd":"code","a18cb66c":"code","d3b29a3e":"code","152b2847":"code","76990999":"code","2788faa9":"code","1db8eb7c":"code","d69e6d13":"code","9780bba6":"code","e14ba2ba":"code","2719d0a8":"code","8afb464d":"code","f3ec4485":"code","ce3cff48":"code","587b3ff5":"code","534f330d":"code","3fcedb10":"code","6715642b":"code","6ed204a3":"code","52fd59b7":"code","496be742":"code","f3882e98":"code","97e700ed":"code","58d4b637":"code","b57ca066":"code","ae5cb1e1":"code","9d30e409":"code","3e5b4478":"markdown","b7b3dbf6":"markdown","6e1143af":"markdown","14078296":"markdown","c8cd6ed4":"markdown","8f6ed3a5":"markdown","86874492":"markdown","4323318d":"markdown","5dd6cfb3":"markdown","5fdde7d0":"markdown","c652ecfb":"markdown","d548965d":"markdown"},"source":{"2d807ffd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a18cb66c":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport warnings\n\nfrom sklearn.utils import shuffle\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\n\npd.options.mode.chained_assignment = None\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n%matplotlib inline","d3b29a3e":"fish_data = pd.read_csv(\"..\/input\/fish-market\/Fish.csv\")\nfish_data.sort_values(\"Species\",ascending=False,inplace=True)\nfish_data.reset_index(drop=True,inplace=True)\nfish_data.head()","152b2847":"fish_data.info()","76990999":"fish_data.describe()","2788faa9":"fish_data.describe(include=['O'])","1db8eb7c":"weight_by_species = fish_data[[\"Weight\",\"Species\"]].groupby(by=\"Species\", as_index=False).mean().sort_values(\"Weight\", ascending=False)\nweight_by_species","d69e6d13":"by_species = fish_data.drop(\"Weight\", axis=1).groupby(by=\"Species\", as_index=False).mean().sort_values(\"Length1\", ascending=False)\nby_species","9780bba6":"msno.matrix(fish_data, figsize=(12,5));","e14ba2ba":"fig, axs = plt.subplots()\nfig.set_size_inches(6,5)\nsns.boxplot(data=fish_data, y=\"Weight\")\nplt.show()","2719d0a8":"fig, ax = plt.subplots()\nfig.set_size_inches(8,6)\nsns.boxplot(data=fish_data, x=\"Species\", y=\"Weight\")\nplt.show()","8afb464d":"outliers = np.abs(fish_data[\"Weight\"]-fish_data[\"Weight\"].mean())<=(3*fish_data[\"Weight\"].std())\noutliers.value_counts()","f3ec4485":"outlier_df = outliers.to_frame()\nfish_data.iloc[outlier_df[outlier_df[\"Weight\"]==False].index,:]","ce3cff48":"fish_data_wout_outliers = fish_data[outliers]\nprint(\"Shape of before outliers: {}\".format(fish_data.shape))\nprint(\"Shape of after outliers: {}\".format(fish_data_wout_outliers.shape))","587b3ff5":"fig, axs = plt.subplots()\nfig.set_size_inches(6,5)\nsns.boxplot(data=fish_data_wout_outliers, y=\"Weight\")\nplt.show()","534f330d":"corrMat = fish_data_wout_outliers[fish_data_wout_outliers.drop(\"Species\",axis=1).columns].corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corrMat, annot=True)\nplt.show()","3fcedb10":"fig, (ax1, ax2, ax3) = plt.subplots(1,3)\nfig.set_size_inches(14,8)\nsns.regplot(x=\"Length3\", y=\"Weight\", data = fish_data_wout_outliers, ax=ax1);\nsns.regplot(x=\"Height\", y=\"Weight\", data = fish_data_wout_outliers, ax=ax2, color='r');\nsns.regplot(x=\"Width\", y=\"Weight\", data = fish_data_wout_outliers, ax=ax3, color='y');","6715642b":"fig, (ax1, ax2, ax3) = plt.subplots(1,3)\nfig.set_size_inches(14,8)\nsns.regplot(x=\"Length3\", y=\"Weight\", data = fish_data_wout_outliers, ax=ax1,order=3);\nsns.regplot(x=\"Height\", y=\"Weight\", data = fish_data_wout_outliers, ax=ax2, color='r');\nsns.regplot(x=\"Width\", y=\"Weight\", data = fish_data_wout_outliers, ax=ax3, color='y',order=2);","6ed204a3":"df_shuffled = shuffle(fish_data_wout_outliers)\ndf_shuffled","52fd59b7":"categ = df_shuffled[\"Species\"]\ndf_dummy = pd.get_dummies(categ, drop_first=True)\ndf_dummy.reset_index(drop=True,inplace=True)\ndf_dummy","496be742":"target = df_shuffled[\"Weight\"]\ntarget.reset_index(drop=True, inplace=True)\ntarget","f3882e98":"numerical = df_shuffled.drop([\"Species\",\"Weight\"], axis=1)\nscaler = StandardScaler()\nnum_norm = scaler.fit_transform(numerical)\nnum_norm\ndf_num = pd.DataFrame(num_norm,columns=numerical.columns)\ndf_num.describe()","97e700ed":"merged_df = pd.concat([df_num,df_dummy,target],axis=1)\nmerged_df","58d4b637":"def get_reg_model_metrics(model,actual,predicted):\n    \n    reg_metrics = {\n                        \"MSE\": mean_squared_error(actual,predicted),\n                        \"RMSE\": pow(mean_squared_error(actual,predicted),0.5),\n                        \"R\\u00b2 Score\" : r2_score(actual,predicted)\n                  }\n    \n    df_reg_metrics = pd.DataFrame.from_dict(reg_metrics, orient='index')\n    df_reg_metrics.columns = [model]\n    \n    return df_reg_metrics","b57ca066":"def fit_model(model, data):\n    metrics = pd.DataFrame()\n    X = data.drop([\"Weight\"],axis=1)\n    y = data[\"Weight\"]\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n    \n    i = 0\n    \n    for name, reg in model.items():\n        print(\"Fitting model: \" + name)\n        reg.fit(X_train, y_train)\n        y_pred = reg.predict(X_test)\n        \n        if i == 0:\n            metrics = get_reg_model_metrics(name, y_test, y_pred)\n            print(metrics)\n            \n        elif i != 0:\n            new_metric = get_reg_model_metrics(name, y_test, y_pred)\n            print(new_metric)\n            metrics = pd.concat([metrics, new_metric],axis=1)\n\n        i= i+1\n\n        print(\"====================\")\n        print(\"\\n\")\n        \n    return metrics.sort_values(by=\"R\\u00b2 Score\", axis=1)","ae5cb1e1":"model1 = {\n    \"Linear Reg\": LinearRegression(),\n    \"Ridge\": Ridge(),\n    \"Lasso\": Lasso(),\n    \"Random Forest\": RandomForestRegressor(n_estimators=100),\n    \"Gradient Boosting\": GradientBoostingRegressor(n_estimators=100),\n    \"AdaBoost Regressor\": AdaBoostRegressor(DecisionTreeRegressor(max_depth=2),random_state=42)\n}","9d30e409":"fit_model(model1, merged_df)","3e5b4478":"According to correlation table, there is high collinearity between Length1, Length2 and Length3 and it causes multicollinearity problem for Linear Regression models. Thus, we are going to drop Length1 and Length2 columns. This problem is not important for tree based algorithms. ","b7b3dbf6":"Pike species are the heaviest fish and Smelt species are the lightest fish among our dataset.","6e1143af":"# Exploratory Data Analysis","14078296":"1. Meaning of Column Names\n * Species: Species name of fish\n * Weight:  Weights of fish in gram (g)\n * Length1: Vertical length in cm\n * Length2: Diagonal length in cm\n * Length3: Cross length in cm\n * Height:  Height in cm\n * Width:   Diagonal width in cm","c8cd6ed4":"# Data Preprocessing","8f6ed3a5":"There are some outliers inside fish dataset. To clean ourliers, we are going to find the values whom the z values bigger than 3.","86874492":"There 3 outlier values so we are going to drop these outliers.","4323318d":"# Understanding the Dataset","5dd6cfb3":"Mean and standard deviation of numerical features are not in similar intervals. It can be effective to use StandardScaler to prevent feature dominance.","5fdde7d0":"# Model Training and Metric Comparison ","c652ecfb":"Gradient Boosting Regressor is the winning algorithm for our model. Its $R^2$ Score %97. It can be developed by hyperparameter tuning.","d548965d":"There is no null value inside Fish dataset."}}