{"cell_type":{"121e53eb":"code","b8f1f724":"code","7acf0f6b":"code","92176089":"code","8411b762":"code","dbc3f064":"code","cc1632b9":"code","177dc3ca":"code","7f3ad1e6":"code","d8910f4a":"code","79a13085":"code","965ff5c8":"code","787d445e":"code","7d86962f":"code","e1f8dce7":"code","1164cf80":"code","54af29f0":"code","a750523d":"code","fce2e4e9":"code","a4e63752":"code","4b53a9cc":"code","9ab240bf":"code","116d9f58":"code","71012052":"code","6bed92e5":"code","8d1982b7":"code","19bf54ef":"code","d6fb643b":"code","46ed3f41":"code","99793a29":"code","70f7df18":"code","dc9ac31f":"code","cb00a102":"code","96057218":"code","5fc1ecde":"code","726cd558":"code","c0ecb1a8":"code","9e5ac0be":"code","4fc945f7":"code","9a61ede1":"code","64f0e480":"code","b091fa70":"code","867ef61b":"code","2f7f33cb":"code","3714b2f2":"code","edc5eb6b":"code","3d68e349":"code","8a5905a1":"code","50b0e023":"code","4ac04a2e":"code","96b9d9bf":"code","b23f9719":"markdown","e162ea54":"markdown","ed15fe38":"markdown","24c44fc5":"markdown","e3b60c5e":"markdown","4f393c5f":"markdown","8d7e9009":"markdown","b96e6150":"markdown","6aac4e3b":"markdown","1e5b76b7":"markdown","293845c5":"markdown","25f668ee":"markdown","b6828fcb":"markdown","2776f157":"markdown","e57f5990":"markdown","18e54df3":"markdown","50f9eda9":"markdown","bb359d70":"markdown","444210ba":"markdown","83df407f":"markdown","505126c4":"markdown","6b64a64c":"markdown","132435de":"markdown","974f0f97":"markdown"},"source":{"121e53eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8f1f724":"data = pd.read_csv('..\/input\/housedata\/data.csv')\ndata.head()","7acf0f6b":"#It gives us the no of rows and columns\ndata.shape","92176089":"data.info()","8411b762":"data.columns","dbc3f064":"data.isnull().sum()","cc1632b9":"np.round(data.describe(), 2)","177dc3ca":"data['date'].unique()","7f3ad1e6":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d8910f4a":"data.head(2)","79a13085":"sns.boxplot(x=data['price'], data=data)","965ff5c8":"sns.displot(x=data['price'])","787d445e":"def remove_outliers(data, x):\n    ##lets set the limits\n    q25 = np.percentile(data[x], 25)\n    q75 = np.percentile(data[x], 75)\n    iqr = q75 - q25\n    cut_off = iqr * 1.5\n    lower, upper = 1, (q75 + cut_off)\n    data = data[(data[x] < upper) & (data[x] > lower)]\n    print(f\"Outliers of {x} are removed\\n\")\n    return data","7d86962f":"data = remove_outliers(data, 'price')","e1f8dce7":"data.shape","1164cf80":"data.describe().T","54af29f0":"sns.displot(x=data['price'])","a750523d":"#converting the date type into datetime\ndata['date'] = pd.to_datetime(data['date'])\ndata['date'].dtype","fce2e4e9":"data['year'] = data['date'].dt.year\ndata['month'] = data['date'].dt.month","a4e63752":"data.drop(['year', 'date'], axis=1, inplace=True)","4b53a9cc":"sns.displot(x=data['bedrooms'])","9ab240bf":"data['bedrooms'].value_counts()","116d9f58":"data = data[(data['bedrooms'] > 0) & (data['bedrooms'] < 8)]\ndata['bedrooms'] = data['bedrooms'].astype('int')\ndata['bedrooms'].value_counts()\n","71012052":"sns.displot(x=data['bathrooms'])","6bed92e5":"data['bathrooms'] = data['bathrooms'].astype('int')","8d1982b7":"data['floors'].value_counts()","19bf54ef":"data['floors'] = data['floors'].astype('int')","d6fb643b":"data['waterfront'].value_counts()","46ed3f41":"data['condition'].value_counts()","99793a29":"sns.heatmap(data[['price', 'condition', 'waterfront', 'floors', 'view']].corr(), annot=True, cmap=\"Blues\")","70f7df18":"fig, axes = plt.subplots(2, 2, figsize=(18, 10))\nsns.histplot(ax=axes[0,0],x=\"sqft_living\", data=data);\nsns.histplot(ax=axes[0, 1],x=\"sqft_lot\", data=data);\nsns.histplot(ax=axes[1,0],x=\"sqft_above\", data=data);\nsns.histplot(ax=axes[1, 1],x=\"sqft_basement\", data=data);","dc9ac31f":"sns.heatmap(data[[\"price\", \"sqft_living\", \"sqft_lot\", \"sqft_above\", \"sqft_basement\"]].corr(), annot=True);","cb00a102":"sns.histplot(x=data['yr_built'],data=data)","96057218":"sns.scatterplot(x=data['yr_built'], y=data['price'], color='red')","5fc1ecde":"sns.histplot(x=data['yr_renovated'], data=data)","726cd558":"data['yr_renovated'] = data['yr_renovated'].apply(lambda x: x if x == 0 else 1)","c0ecb1a8":"data['yr_renovated'].value_counts()","9e5ac0be":"data.head()","4fc945f7":"data['country'].value_counts()","9a61ede1":"data['city'].value_counts()","64f0e480":"top_10_cities = data['city'].value_counts().head(10)\nsns.barplot(x = top_10_cities, y=top_10_cities.index)","b091fa70":"data['statezip'].value_counts()","867ef61b":"data.drop(['country', 'statezip', 'street'], axis=1, inplace=True)","2f7f33cb":"data.head(2)","3714b2f2":"data = pd.get_dummies(data, drop_first=True)\ndata.head()\n","edc5eb6b":"X = data.drop('price',axis=1)\ny = data['price']","3d68e349":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","8a5905a1":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()","50b0e023":"X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","4ac04a2e":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint(f\"Accuracy of training set:\", lr.score(X_train, y_train))\nprint(f\"Accuracy of testing set: \", lr.score(X_test, y_test))","96b9d9bf":"from sklearn.model_selection import cross_val_score\n\nlr = LinearRegression()\ncv = cross_val_score(lr, X, y, cv=10)\nprint(np.mean(cv))","b23f9719":"### Exploratory Data Analysis","e162ea54":"### \"Sqrt_living\", \"sqft_lot\", \"sqrt_above\", \"sqrt_basement\"","ed15fe38":"Here, we can see that all the year are of same year.So it is not useful for our dataset.\nSo, lets drop the 'year' and 'date' column from our dataset.","24c44fc5":"### Data visualization and Data Preprocessing","e3b60c5e":"### Splitting the dataset into training and testing","4f393c5f":"### Bedrooms","8d7e9009":"### Year Renovated","b96e6150":"Lets make this as renovated or not. Either 0 or 1.","6aac4e3b":"Here, we can see that majority of the houses are present  in the city \"Seattle\".","1e5b76b7":"### Splitting the Dataset into X and Y","293845c5":"### Conditions","25f668ee":"Here, we will remove the bedrooms which are 0 and more than 8 or 9. Because might be outliers for our dataset.","b6828fcb":"### bathrooms","2776f157":"### Data Preprocessing","e57f5990":"We can depend only on \"sqft_living\", as the most effective feature with \"price\" and it is highly correlated with \"sqft_above\".","18e54df3":"### Handling the Categorical data ","50f9eda9":"### Floors","bb359d70":"So, here we will drop the 'country' column, as all the houses are present in the USA only.\nAnd the \"Zip code\" column.","444210ba":"### Year Built","83df407f":"### WaterFront","505126c4":"### Country","6b64a64c":"### Creating Our ML model","132435de":"As we can see that there are lot of outliers present in the dataset.\nSo we, will try to remove the outliers.","974f0f97":"Now, we will extract the year and month from date time column"}}