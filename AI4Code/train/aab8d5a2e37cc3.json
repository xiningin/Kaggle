{"cell_type":{"8a590233":"code","18055b1c":"code","28076466":"code","307a44b2":"code","4bc219a3":"code","3b2fb692":"code","a9a664ee":"code","8fc84df8":"code","e3249c08":"code","9ba2b8b9":"code","d2837fe7":"code","86b7080c":"code","9cc6a0e5":"code","82464933":"code","12971279":"code","d8ecbacb":"code","3a8211d2":"code","4b01a567":"code","a8473f43":"code","bf71e401":"code","8b587102":"code","7da82ae0":"code","d7c8eb6f":"code","4842c63e":"code","f449fc7b":"code","7487dc37":"code","f758dd6e":"code","51f87cf2":"markdown","74e7b2f1":"markdown","1ac73a27":"markdown","44404e19":"markdown","d0d6a6dc":"markdown","7ad03895":"markdown","3505e824":"markdown","e2c7319d":"markdown","fb44b780":"markdown","be966bc6":"markdown","0559d318":"markdown","dbb5db18":"markdown","fd1ef05d":"markdown","9f7b22eb":"markdown","557af305":"markdown","4edaffce":"markdown"},"source":{"8a590233":"from pathlib import Path\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib_venn import venn2\nfrom matplotlib import pyplot\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","18055b1c":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv',index_col=0)\ntest  = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv', index_col=0)\n","28076466":"display(train.head())\n\ndisplay(test.head())","307a44b2":"train['train_test'] = 'train'\ntest['train_test'] = 'test'\nfull = pd.concat([train, test], axis=0)","4bc219a3":"column = 'breath_id'\nplt.figure(figsize=(3,3))\nvenn2(subsets=(set(train[column].unique()), set(test[column].unique())),\n      set_labels=('Train', 'Test'))\nplt.title(column)","3b2fb692":"display(train['breath_id'].value_counts())\nprint('***')\ndisplay(train['breath_id'].value_counts().unique())","a9a664ee":"display(test['breath_id'].value_counts())\nprint('***')\ndisplay(test['breath_id'].value_counts().unique())","8fc84df8":"print('train')\ndisplay(train['R'].value_counts().sort_index())\n\nprint('test')\ndisplay(test['R'].value_counts().sort_index())","e3249c08":"sns.countplot(data=full, x='R', hue='train_test')","9ba2b8b9":"print('train')\ndisplay(train['C'].value_counts().sort_index())\n\nprint('test')\ndisplay(test['C'].value_counts().sort_index())","d2837fe7":"sns.countplot(data=full, x='C', hue='train_test')","86b7080c":"train['R_C'] = [f'{r}_{c}' for r, c in zip(train['R'], train['C'])]\ntest['R_C'] = [f'{r}_{c}' for r, c in zip(test['R'], test['C'])]\nfull['R_C'] = [f'{r}_{c}' for r, c in zip(full['R'], full['C'])]","9cc6a0e5":"sns.countplot(data=full, x='R_C', hue='train_test')","82464933":"plt.figure(figsize=(16, 4))\nplt.subplot(121)\nplt.hist(train['time_step'], bins=100) \nplt.title('train')\n\nplt.subplot(122)\nplt.hist(test['time_step'], bins=100);\nplt.title('test')\n\nplt.tight_layout()","12971279":"plt.figure(figsize=(16, 4))\nplt.subplot(121)\nplt.hist(train['u_in'], bins=100) \nplt.title('train')\n\nplt.subplot(122)\nplt.hist(test['u_in'], bins=100);\nplt.title('test')\n\nplt.tight_layout()","d8ecbacb":"plt.figure(figsize=(16, 4))\nplt.subplot(121)\nplt.hist(train['u_out'], bins=100) \nplt.title('train')\n\nplt.subplot(122)\nplt.hist(test['u_out'], bins=100);\nplt.title('test')\n\nplt.tight_layout()","3a8211d2":"train.groupby('breath_id')['u_out'].count()","4b01a567":"tmp = train.groupby('breath_id')['u_out'].value_counts().to_frame().unstack()\ntmp.columns = [f'{i[0]}_{i[1]}' for i in tmp.columns]\ndisplay(tmp.head())","a8473f43":"display(tmp['u_out_0'].value_counts().sort_index())\ndisplay(tmp['u_out_1'].value_counts().sort_index(ascending=False))","bf71e401":"tmp['u_out_0'].mean()","8b587102":"plt.hist(train['pressure']);","7da82ae0":"plt.figure(figsize=(16, 16))\ni = 1\nfor r_c in train['R_C'].unique():\n    tmp = train.query('R_C == @r_c')\n    plt.subplot(5, 2, i)\n    plt.hist(tmp['pressure'], bins=50, range=(0, 70))\n    r, c = r_c.split('_')\n    plt.title(f'R: {r}, C: {c}')\n    i += 1\n    \nplt.tight_layout()\nplt.show()","d7c8eb6f":"plt.figure(figsize=(16, 16))\ni = 1\nfor r_c in train['R_C'].unique():\n    tmp = train.query('R_C == @r_c')\n    plt.subplot(5, 2, i)\n    tmp_u_out_0 = tmp.query('u_out == 0')\n    plt.hist(tmp['pressure'], bins=50, range=(0, 70), label='u_out = 0', alpha=0.5)\n    tmp_u_out_1 = tmp.query('u_out == 1')\n    plt.hist(tmp_u_out_1['pressure'], bins=50, range=(0, 70), label='u_out = 1', alpha=0.5)\n    r, c = r_c.split('_')\n    plt.title(f'R: {r}, C: {c}')\n    i += 1\n    plt.legend()\n    \n    \nplt.tight_layout()\nplt.show()","4842c63e":"!pip install ipyplot","f449fc7b":"tmp_dir = Path('..\/tmp')\ntmp_dir.mkdir(exist_ok=True)","7487dc37":"image_paths = []\nlabels = []\n\nfor r_c in train['R_C'].unique():\n    df = train.query('R_C == @r_c')\n    for breath_id in df['breath_id'].unique()[:12]:\n        tmp_df = train.query('breath_id == @breath_id')\n        tmp_u_out_0_df = tmp_df.query('u_out == 0')\n        tmp_u_out_1_df = tmp_df.query('u_out == 1')\n        R = tmp_df.iloc[0, 1]\n        C = tmp_df.iloc[0, 2]\n        plt.scatter(tmp_u_out_0_df['time_step'], tmp_u_out_0_df['pressure'], label='pressure: u_out=0', s=3, color='r')\n        plt.scatter(tmp_u_out_1_df['time_step'], tmp_u_out_1_df['pressure'], label='pressure: u_out=1', s=3)\n        plt.scatter(tmp_u_out_0_df['time_step'], tmp_u_out_0_df['u_in'], label='u_in: u_out=0', s=3, color='y')\n        plt.scatter(tmp_u_out_1_df['time_step'], tmp_u_out_1_df['u_in'], label='u_in: u_out=1', s=3)\n        # plt.scatter(tmp_df['time_step'], tmp_df['u_out'], label='u_out')\n        plt.title(f'R: {R}, C: {C}, breath_id: {breath_id}')\n        plt.legend()\n        plt.savefig(tmp_dir \/ f'{breath_id}.jpg')\n        image_paths.append(str(tmp_dir \/ f'{breath_id}.jpg'))\n        labels.append(f'R: {R}, C: {C}')\n        plt.close()","f758dd6e":"import ipyplot\nipyplot.plot_class_tabs(image_paths, labels, force_b64=True, img_width=350)","51f87cf2":"<a id=\"10\"><\/a>\n<h2>pressure<\/h2>\n\n> pressure - the airway pressure measured in the respiratory circuit, measured in cmH2O.\n","74e7b2f1":"<a id=\"4\"><\/a>\n<h2>R<\/h2>","1ac73a27":"<a id=\"6\"><\/a>\n<h2>R and C<\/h2>","44404e19":"<a id=\"1\"><\/a>\n<h1 style='background:deeppink; border:0; color:white'><center>1.Data loading and overview<\/center><\/h1>","d0d6a6dc":">The competition will be scored as the mean absolute error between the predicted and actual pressures during the inspiratory phase of each breath. The expiratory phase is not scored. The score is given by:\n\nOnly where u_out is zero is it used to calculate the score. [[ref: What is the \"expiratory phase\" ?]](https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/273906#1522267) Let's separate them by u_out and visualize them.\n","7ad03895":"<a id=\"9\"><\/a>\n<h2>u_out<\/h2>\n\n> u_out - the control input for the exploratory solenoid valve. Either 0 or 1.","3505e824":"<a id=\"5\"><\/a>\n<h2>C<\/h2>\n\n> C - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.","e2c7319d":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\">\n<h1 class=\"list-group-item\" style='color:white; background:deeppink; border:0'><center>Quick Navigation<\/center><\/h1>\n\n* [1. Data loading and overview](#1)\n\n    \n* [2. Feature Exploration](#2)\n  * [a. breath_id](#3)\n  * [b. R](#4)\n  * [c. C](#5)\n  * [d. R and C](#6)\n  * [e. time_step](#7)\n  * [f. u_in](#8)\n  * [g. u_out](#9)\n  * [h. pressure](#10)\n    \n    \n* [3. Visualize for each breahth id and R_C](#200)\n","fb44b780":"<a id=\"200\"><\/a>\n\n<h1 style='background:deeppink; border:0; color:white'><center>3.Visualize for each breahth id and R_C<\/center><\/h1>","be966bc6":"> R - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.","0559d318":"There are no duplicates in breath_id, and there are 80 data in each.","dbb5db18":"<a id=\"7\"><\/a>\n<h2>time_step<\/h2>\n\n> time_step - the actual time stamp.","fd1ef05d":"<div class=\"list-group\">\n<a id=\"2\"><\/a>\n<h1 style='background:deeppink; border:0; color:white'><center>2.Feature Exploration<\/center><\/h1>\n\n<a id=\"3\"><\/a>\n<h2>breath_id<\/h2>","9f7b22eb":"There are 80 pieces of data in one breath_id, but on average, only about 30.3 pieces are included in the score calculation.","557af305":"> breath_id - globally-unique time step for breaths","4edaffce":"<a id=\"8\"><\/a>\n<h2>u_in<\/h2>\n\n> the control input for the inspiratory solenoid valve. Ranges from 0 to 100."}}