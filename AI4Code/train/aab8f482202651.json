{"cell_type":{"23d9cd19":"code","bd4f59d3":"code","714928b2":"code","2394c352":"code","53416e4e":"code","177a732a":"code","31684a32":"code","7e6c2ee9":"code","e3ad28a6":"code","1f7c2bc3":"code","832cf0f0":"code","2d98d3f7":"code","ab3a58b3":"code","a9af3a68":"code","6c8989ba":"code","28f69805":"code","4319f6fd":"code","ad09d5c0":"code","5b8e94c3":"code","83877cd3":"code","945e3db9":"code","93c01a31":"code","dcd04392":"code","bedb124c":"code","5b21b913":"code","edd9fc43":"code","34a8c88a":"code","a731cdc1":"code","7f1f0349":"code","f6384a7f":"code","656931b3":"code","ba828988":"code","bb9cf5c4":"code","c66d7f54":"code","129e5ff4":"code","a5022c94":"code","32cf476f":"code","b96dda12":"code","43e6886c":"code","1a84cd9f":"markdown","7dfebb77":"markdown","4a2d025e":"markdown","82140f6d":"markdown","758c2cd6":"markdown","9532b246":"markdown","fff36475":"markdown","242c1b1f":"markdown"},"source":{"23d9cd19":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n%matplotlib inline","bd4f59d3":"ks = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\nks.head()","714928b2":"count_category = ks.groupby('main_category')\nsize = count_category['main_category'].value_counts()\n\n\ncategory = [category for category, df in ks.groupby('main_category')]\n\n\nplt.figure(figsize=(5,3), dpi=200)\npie_chart = plt.pie(size,labels=category, textprops={'fontsize': 6}, autopct='%.f%%', pctdistance=0.8)\n\n\nplt.title('Percentage of Kickstart Projects Grouped By Categories', fontsize=8)\nplt.show()","2394c352":"ks.isna().sum()","53416e4e":"ks.drop(['name', 'deadline', 'launched', 'usd pledged', 'goal', 'currency', 'pledged', 'ID'], axis='columns', inplace=True)","177a732a":"ks.head()","31684a32":"ks['country'].unique()","7e6c2ee9":"ks['main_category'].unique()","e3ad28a6":"ks['state'].unique()","1f7c2bc3":"ks['backers'].describe()","832cf0f0":"ks.head()","2d98d3f7":"ks['state'].value_counts()","ab3a58b3":"ks['state'].replace({'canceled': 'failed', 'live': 'successful', 'suspended': 'failed'}, inplace=True)","a9af3a68":"ks.drop(ks[ks['state'] == 'undefined'].index, axis='rows', inplace=True)","6c8989ba":"ks['country'].value_counts()","28f69805":"# 'N,0\"' is referencing Null Island so we can drop\n\nks.drop(ks[ks['country'] == 'N,0\"'].index, axis='rows', inplace=True)","4319f6fd":"data = ks","ad09d5c0":"data.head()","5b8e94c3":"df = ks.groupby(['country'])","83877cd3":"# Getting the total $ pledged for each country and without scientific notation\n\ntotal_amount = df['usd_pledged_real'].sum().apply(lambda x: '%.0f' % x)\n\ntotal_amount = [int(i)\/1000000 for i in total_amount] \n\nprint(total_amount)","945e3db9":"countries = [country for country, df in ks.groupby('country')]\n\nplt.bar(countries, total_amount)\nplt.xticks(rotation='vertical', size=8)\nplt.ylabel('Amount Spent by Country(in millions $)', size = 13)\nplt.xlabel('Country Abbreviated', size = 13)\n\nplt.show()\n\n#","93c01a31":"data.head()","dcd04392":"data = ks","bedb124c":"state_dummies = pd.get_dummies(data['state']).iloc[: , 1:]","5b21b913":"main_cat_dummies = pd.get_dummies(data['main_category']).iloc[: , 1:]","edd9fc43":"category_dummies = pd.get_dummies(data['category']).iloc[: , 1:]","34a8c88a":"country_dummies = pd.get_dummies(data['country']).iloc[: , 1:]","a731cdc1":"numerical_data = ks.drop(columns = ['category', 'main_category', 'state', 'country'], axis='columns')","7f1f0349":"num_data = pd.concat([numerical_data], axis='columns', sort=False)","f6384a7f":"cat_data = pd.concat([state_dummies, main_cat_dummies, category_dummies, country_dummies], axis='columns', sort=False)","656931b3":"final_data = pd.concat([num_data, cat_data], axis='columns', sort=False)","ba828988":"final_data.head()","bb9cf5c4":"sns.heatmap(data.corr(), center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","c66d7f54":"X = final_data.drop(['successful'], axis='columns')","129e5ff4":"y = final_data['successful']","a5022c94":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state = 42)","32cf476f":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\n\nclf = lr.fit(X_train, y_train)\ny_pred = clf.predict(X_test)","b96dda12":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nacc_score = accuracy_score(y_test, y_pred)\nprint(acc_score*100)\n\n# Score of 87.819%","43e6886c":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree \n\nclf_entropy = DecisionTreeClassifier(criterion='entropy', random_state=42)\nclf_entropy.fit(X_train, y_train)\n\nDTC_y_pred = clf_entropy.predict(X_test)\n\nDTC_acc_score = accuracy_score(y_test, DTC_y_pred)\nprint(DTC_acc_score * 100)\n\n#Score of 98 % (BEST MODEL SO FAR)","1a84cd9f":"# Exploring the Data","7dfebb77":"# Cleaning The Data","4a2d025e":"# Getting Rid of Unnecessary Columns","82140f6d":"# Decision Tree Model","758c2cd6":"# Building the model","9532b246":"# Analyzing Columns","fff36475":"In this notebook, we will look to process the data of some KickStarter companies and will build models predicting if these companies will be successful and we will choose the best one. In the end, we end up with a model with an accuracy of 98%.","242c1b1f":"### LOGISTIC REGRESSION MODEL"}}