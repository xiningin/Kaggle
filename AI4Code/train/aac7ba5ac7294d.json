{"cell_type":{"342e88af":"code","4a365864":"code","d82dce27":"code","e4fe9093":"code","d5af6a07":"code","59542620":"code","1e9ac289":"code","2e1c7d2c":"code","e67af1f7":"code","275f43b1":"code","046dac1c":"code","d9644ded":"code","beda1ed9":"code","3cdf8598":"code","359b965a":"code","ab8f98fd":"code","b972857a":"code","719dc899":"code","06c3de39":"code","6d2328af":"code","762107a4":"code","f2f90741":"code","bb42d79e":"code","83bf341a":"code","ccfe9499":"code","47502d6f":"code","0d21bf8c":"code","def50551":"code","2ef7c987":"code","fdb5d26e":"code","fa1a83c9":"code","dcae14be":"code","00a9b7b7":"code","67cf75f5":"code","a8c4bd7d":"code","7c6a478e":"code","ee6afe17":"code","e6368795":"code","54930df6":"code","d4b7a1a4":"code","46f7f5ba":"code","f7f71dfd":"code","7ff66c4e":"code","bda04471":"code","8e6d8242":"code","0af8c621":"code","fde14357":"code","adc9b62a":"code","c9db0c14":"code","333e7725":"code","69891584":"code","a5a63981":"code","68aacdce":"code","1013f651":"code","690cc500":"code","c8b46f3f":"code","4cdc7ca3":"code","33878798":"code","bce0e369":"code","53088a76":"code","abe95eff":"markdown","f27820c4":"markdown","fd758eef":"markdown","ac191f98":"markdown","579e241c":"markdown","53aa1104":"markdown","c57ce073":"markdown"},"source":{"342e88af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a365864":"import pandas as pd\nimport numpy as np\n\nimport calendar\nimport xgboost\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV, LeaveOneOut, LeaveOneGroupOut, StratifiedKFold\nfrom sklearn.ensemble import AdaBoostRegressor, RandomForestRegressor\n\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\n\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.linear_model import LinearRegression, MultiTaskElasticNetCV, MultiTaskLassoCV\nfrom sklearn.metrics import mean_squared_log_error\n\npd.set_option('display.max_colwidth', None)\n\nimport warnings \nwarnings.filterwarnings('ignore')","d82dce27":"!pip install catboost\nfrom catboost import CatBoostRegressor","e4fe9093":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\n\nprint('Shape of train: ', train.shape)\nprint('Shape of test: ', test.shape)","d5af6a07":"#Making a copy of train and test data\n\ntrain_copy = train.copy()\ntest_copy = test.copy()","59542620":"# Divide 'relative_humidity' column by 100, to convert from percentage \n\ntrain['relative_humidity'] = train['relative_humidity']\/100\ntest['relative_humidity'] = test['relative_humidity']\/100","1e9ac289":"# Check for outliers \n\nplt.figure(figsize=(25,20))\nplt.subplot(4,4,1)\nsns.boxplot(train['sensor_1'])\n\nplt.subplot(4,4,2)\nsns.boxplot(train['sensor_2'])\n\nplt.subplot(4,4,3)\nsns.boxplot(train['sensor_3'])\n\nplt.subplot(4,4,4)\nsns.boxplot(train['sensor_4'])\n\nplt.subplot(4,4,5)\nsns.boxplot(train['sensor_5'])\n\nplt.subplot(4,4,6)\nsns.boxplot(train['relative_humidity'])\n\nplt.subplot(4,4,7)\nsns.boxplot(train['absolute_humidity'])\n\nplt.subplot(4,4,8)\nsns.boxplot(train['deg_C'])","2e1c7d2c":"# Lets look at the records in detail \n\ndisplay(train[train['sensor_2']>2250])\nprint()\ndisplay(train[train['sensor_3']>2400])\nprint()\ndisplay(train[train['sensor_4']>2800])\nprint()\ndisplay(train[train['absolute_humidity']>2.2])","e67af1f7":"# Drop indexes 6160, 5520, 4462, 6586, 6587, 6589, 6590, 6592\n\nindex = [6160, 5520, 4462, 6586, 6587, 6589, 6590, 6592]\ntrain = train.drop(labels = index, axis = 0)","275f43b1":"# Check distribution of target variables \n\nplt.figure(figsize=(13,10))\nplt.subplot(2,2,1)\nsns.histplot(train['target_benzene'], kde = True)\n\nplt.subplot(2,2,2)\nsns.histplot(train['target_carbon_monoxide'], kde = True)\n\nplt.subplot(2,2,3)\nsns.histplot(train['target_nitrogen_oxides'], kde = True)","046dac1c":"# Convert distribution\n\nplt.figure(figsize=(13,10))\nplt.subplot(2,2,1)\nsns.histplot(np.sqrt(train['target_benzene']), kde = True, color = 'Green')\n\nplt.subplot(2,2,2)\nsns.histplot(np.sqrt(train['target_carbon_monoxide']), kde = True, color = 'Green')\n\nplt.subplot(2,2,3)\nsns.histplot(np.log(train['target_nitrogen_oxides']), kde = True, color = 'Green')","d9644ded":"train['target_benzene'] = np.sqrt(train['target_benzene'])\ntrain['target_carbon_monoxide'] = np.sqrt(train['target_carbon_monoxide'])\ntrain['target_nitrogen_oxides'] = np.log(train['target_nitrogen_oxides'])","beda1ed9":"# Assign target variable\n\ntarget = pd.DataFrame(train[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']])","3cdf8598":"train = train.drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], axis = 1)","359b965a":"print('Shape of train: ', train.shape)\nprint('Shape of test: ', test.shape)","ab8f98fd":"data = pd.concat([train, test])\ndata.shape","b972857a":"# Work with date column\n\ndata['date_time'] = pd.to_datetime(data['date_time'], format = '%Y-%m-%d %H:%M:%S')\ndata['hour'] = data['date_time'].dt.hour\ndata['working_hours'] = data['hour'].isin(np.arange(8,21,1)).astype('int')\ndata['is_weekend'] = (data['date_time'].dt.dayofweek>=5).astype('int')\n#data['hr'] = data.date_time.dt.hour*60 +data.date_time.dt.minute\n#data['satday'] = (data.date_time.dt.weekday == 5).astype('int')\ndata['Day_of_Week'] = data['date_time'].apply(lambda x:calendar.day_name[x.weekday()])\ndata['SMC'] = (data['absolute_humidity']*100)\/data['relative_humidity']","719dc899":"data.head(3)","06c3de39":"data = data.drop(['date_time', 'hour'], axis = 1)","6d2328af":"data_num_cols = data._get_numeric_data().columns \ndata_num_cols","762107a4":"data_cat_cols = data.columns.difference(data_num_cols)\ndata_cat_cols","f2f90741":"#Separating both numeric and categorical data from set\n\ndata_num_data = data.loc[:, data_num_cols]\ndata_cat_data = data.loc[:, data_cat_cols]\n\nprint(\"Shape of num data:\", data_num_data.shape)\nprint(\"Shape of cat data:\", data_cat_data.shape)","bb42d79e":"s_scaler = RobustScaler()\ndata_num_data_s = s_scaler.fit_transform(data_num_data)\n\ndata_num_data_s = pd.DataFrame(data_num_data_s, columns = data_num_cols )","83bf341a":"data_cat_data = pd.get_dummies(data_cat_data )\ndata_cat_data.head()","ccfe9499":"\ndata_num_data_s.reset_index(drop=True, inplace=True)\ndata_cat_data.reset_index(drop=True, inplace=True)\n\ndata_new = pd.concat([data_num_data_s, data_cat_data], axis = 1)","47502d6f":"train_new = data_new.loc[:7102,]\ntest_new = data_new.loc[7103:,]\n\nprint(\"Shape of train data:\", train_new.shape)\nprint(\"Shape of test data:\", test_new.shape)","0d21bf8c":"from sklearn.model_selection import train_test_split \n\ntrainx,valx,trainy,valy = train_test_split(train_new,target,test_size=0.25,random_state=1234)\n#print(cust_data.shape)\nprint(trainx.shape)\nprint(valx.shape)","def50551":"xgb = xgboost.XGBRFRegressor()\nxgb_m = MultiOutputRegressor(xgb)\nxgb_m.fit(trainx, trainy)","2ef7c987":"#Predecting values on train and validation sets\n\npred_train_xgb = xgb_m.predict(trainx)\npred_val_xgb = xgb_m.predict(valx)","fdb5d26e":"RMSLE_train_xgb = np.sqrt(mean_squared_log_error(trainy, abs(pred_train_xgb)))\nRMSLE_val_xgb = np.sqrt(mean_squared_log_error(valy, abs(pred_val_xgb)))\n\nRMSLE_val_xgb","fa1a83c9":"pred_test_xgb = xgb_m.predict(test_new)","dcae14be":"pred_test_xgb = pd.DataFrame(pred_test_xgb, columns=['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\npred_test_xgb.head()","00a9b7b7":"submission_xgb = pd.DataFrame(test_copy[['date_time']])\nsubmission_xgb['target_carbon_monoxide'] = np.square(pred_test_xgb['target_carbon_monoxide'])\nsubmission_xgb['target_benzene'] = np.square(pred_test_xgb['target_benzene'])\nsubmission_xgb['target_nitrogen_oxides'] = (pred_test_xgb['target_nitrogen_oxides']*pred_test_xgb['target_nitrogen_oxides']*pred_test_xgb['target_nitrogen_oxides'])\nsubmission_xgb.head()","67cf75f5":"cat = CatBoostRegressor()\ncat_m = MultiOutputRegressor(cat)\ncat_m.fit(trainx, trainy)","a8c4bd7d":"#Predecting values on train and validation sets\n\npred_train_cat = cat_m.predict(trainx)\npred_val_cat = cat_m.predict(valx)","7c6a478e":"RMSLE_train_cat = np.sqrt(mean_squared_log_error(trainy, abs(pred_train_cat)))\nRMSLE_val_cat = np.sqrt(mean_squared_log_error(valy, abs(pred_val_cat)))\n\nRMSLE_val_cat","ee6afe17":"pred_test_cat = cat_m.predict(test_new)","e6368795":"pred_test_cat = pd.DataFrame(pred_test_cat, columns=['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\npred_test_cat.head()","54930df6":"submission_cat = pd.DataFrame(test_copy[['date_time']])\nsubmission_cat['target_carbon_monoxide'] = np.square(pred_test_cat['target_carbon_monoxide'])\nsubmission_cat['target_benzene'] = np.square(pred_test_cat['target_benzene'])\nsubmission_cat['target_nitrogen_oxides'] = np.exp(pred_test_cat['target_nitrogen_oxides'])\nsubmission_cat.head()","d4b7a1a4":"ada = AdaBoostRegressor()\nada_m = MultiOutputRegressor(cat)\nada_m.fit(trainx, trainy)","46f7f5ba":"#Predecting values on train and validation sets\n\npred_train_ada = ada_m.predict(trainx)\npred_val_ada = ada_m.predict(valx)","f7f71dfd":"RMSLE_train_ada = np.sqrt(mean_squared_log_error(trainy, abs(pred_train_ada)))\nRMSLE_val_ada = np.sqrt(mean_squared_log_error(valy, abs(pred_val_ada)))\n\nRMSLE_val_ada","7ff66c4e":"pred_test_ada = ada_m.predict(test_new)","bda04471":"pred_test_ada = pd.DataFrame(pred_test_ada, columns=['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\npred_test_ada.head()","8e6d8242":"submission_ada = pd.DataFrame(test_copy[['date_time']])\nsubmission_ada['target_carbon_monoxide'] = np.square(pred_test_ada['target_carbon_monoxide'])\nsubmission_ada['target_benzene'] = np.square(pred_test_ada['target_benzene'])\nsubmission_ada['target_nitrogen_oxides'] = np.exp(pred_test_ada['target_nitrogen_oxides'])\nsubmission_ada.head()","0af8c621":"rfr = RandomForestRegressor()\nrfr.fit(X = trainx,y = trainy)","fde14357":"#Predecting values on train and validation sets\n\npred_train_rfr = rfr.predict(trainx)\npred_val_rfr = rfr.predict(valx)","adc9b62a":"RMSLE_train_rfr = np.sqrt(mean_squared_log_error(trainy, abs(pred_train_rfr)))\nRMSLE_val_rfr = np.sqrt(mean_squared_log_error(valy, abs(pred_val_rfr)))\n\nRMSLE_val_rfr","c9db0c14":"pred_test_rfr = rfr.predict(test_new)","333e7725":"pred_test_rfr = pd.DataFrame(pred_test_rfr, columns=['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\npred_test_rfr.head()","69891584":"submission_rfr = pd.DataFrame(test_copy[['date_time']])\nsubmission_rfr['target_carbon_monoxide'] = np.square(pred_test_rfr['target_carbon_monoxide'])\nsubmission_rfr['target_benzene'] = np.square(pred_test_rfr['target_benzene'])\nsubmission_rfr['target_nitrogen_oxides'] = np.exp(pred_test_rfr['target_nitrogen_oxides'])\nsubmission_rfr.head()","a5a63981":"lasso_model = MultiTaskLassoCV()\n\nlasso_model.fit(trainx, trainy)","68aacdce":"pred_train_lso = lasso_model.predict(trainx)\npred_val_lso = lasso_model.predict(valx)","1013f651":"RMSLE_train_lso = np.sqrt(mean_squared_log_error(trainy, abs(pred_train_lso)))\nRMSLE_val_lso = np.sqrt(mean_squared_log_error(valy, abs(pred_val_lso)))\n\nRMSLE_val_lso","690cc500":"pred_test_lso = lasso_model.predict(test_new)","c8b46f3f":"pred_test_lso = pd.DataFrame(pred_test_rfr, columns=['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\npred_test_lso.head()","4cdc7ca3":"submission_lso = pd.DataFrame(test_copy[['date_time']])\nsubmission_lso['target_carbon_monoxide'] = np.square(pred_test_lso['target_carbon_monoxide'])\nsubmission_lso['target_benzene'] = np.square(pred_test_lso['target_benzene'])\nsubmission_lso['target_nitrogen_oxides'] = np.exp(pred_test_lso['target_nitrogen_oxides'])\nsubmission_lso.head()","33878798":"Submission = pd.DataFrame(test_copy[['date_time']])\nSubmission['target_carbon_monoxide'] = (submission_ada['target_carbon_monoxide']+submission_cat['target_carbon_monoxide']+submission_lso['target_carbon_monoxide']\n                                       +submission_rfr['target_carbon_monoxide']+submission_xgb['target_carbon_monoxide'])\/5\nSubmission['target_benzene'] = (submission_ada['target_benzene']+submission_cat['target_benzene']+submission_lso['target_benzene']\n                               +submission_rfr['target_benzene']+submission_xgb['target_benzene'])\/5\nSubmission['target_nitrogen_oxides'] = (submission_ada['target_nitrogen_oxides']+submission_cat['target_nitrogen_oxides']+submission_lso['target_nitrogen_oxides']\n                                       +submission_rfr['target_nitrogen_oxides']+submission_xgb['target_nitrogen_oxides'])\/5\nSubmission.head()","bce0e369":"Submission.head()","53088a76":"Submission.to_csv('Sub.csv', index = False)","abe95eff":"## LassoCV","f27820c4":"## CatBoost","fd758eef":"## AdaBoost Regressor","ac191f98":"## XGBoost","579e241c":"Lets understand the terminology first:\n\n- Humidity: Is the amount of water or moisture present in the air in form of water vapour\n- Relative Humidity: Is the percentage of moisture against the highest possible level of moisture in the air at specific temperature\n- Absolute Humidity: Is the measure of moisture in the air regardless of temperature and expressed as grams of moisture per cubic meter of air(g\/m3)","53aa1104":"## Submission","c57ce073":"## RandomForest Regressor"}}