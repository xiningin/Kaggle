{"cell_type":{"f5838c66":"code","8b65e263":"code","6ba79d1b":"code","9310853c":"code","1d419e26":"code","d8f668bd":"code","8254f50d":"code","92b32805":"code","abadc505":"code","6a04693e":"code","74cb90da":"code","09d41361":"code","707d68d2":"code","e189d786":"code","565358fa":"code","ad5b432c":"code","8c971e80":"code","9f6c729f":"code","507ccdb0":"code","06aa2eac":"markdown","855afe09":"markdown","203bec46":"markdown","6075e3d9":"markdown","a9e536a4":"markdown","c836d6db":"markdown","e3b02796":"markdown","3ebdd2db":"markdown","2fa39cac":"markdown","55651950":"markdown","20981990":"markdown","3b866af6":"markdown","04aecf17":"markdown","8503d8da":"markdown","955bb542":"markdown"},"source":{"f5838c66":"import pandas as pd\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\n%matplotlib inline\n\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.figure_factory as ff\nfrom plotly import subplots\nfrom plotly.subplots import make_subplots\ninit_notebook_mode(connected=True)\n\nfrom datetime import date, datetime, timedelta\nimport time, re, os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","8b65e263":"def resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes, columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n\n    return summary\n\ndf = pd.read_csv('\/kaggle\/input\/2020-democratic-primary-endorsements\/endorsements-2020.csv')\ndf.head(10)","6ba79d1b":"df.rename(columns={'endorser party': 'party'}, inplace=True)\nresumetable(df)","9310853c":"percent_missing = np.round(df.isnull().sum() * 100 \/ len(df),2)\nmissing_value_df = pd.DataFrame({'column_name': df.columns,\n                                 'percent_missing': percent_missing}).sort_values('percent_missing', ascending=False)\n\n\nfig = go.Figure()\nfig.add_trace(\n        go.Bar(x=missing_value_df['column_name'],\n               y=missing_value_df['percent_missing'],\n               opacity=0.9,\n               text=missing_value_df['percent_missing'],\n               textposition='inside',\n               marker={'color':'indianred'}\n                   ))\nfig.update_layout(\n      title={'text': 'Percentage Missing by Column',\n             'y':0.95, 'x':0.5,\n            'xanchor': 'center', 'yanchor': 'top'},\n      showlegend=False,\n      xaxis_title_text='Columns',\n      yaxis_title_text='Percentage',\n      bargap=0.1\n    )\n\nfig.show()","1d419e26":"fig = go.Figure(\n        go.Heatmap(\n            z=df.isnull().astype(int),\n            x=df.columns,\n            y=df.index.values,\n            colorscale='Greys',\n            reversescale=True,\n            showscale=False))\n\nfig.update_layout(\n    title={'text': 'Missing values Matrix',\n             'y':0.95, 'x':0.5,\n            'xanchor': 'center', 'yanchor': 'top'},\n    xaxis=dict(tickangle=45, title='Columns'),\n    yaxis=dict(range=[np.max(df.index.values), np.min(df.index.values)], title='Row Index'),\n    )\nfig.show()\n\n","d8f668bd":"df.drop(['city', 'body', 'order', 'district'], axis=1, inplace=True)\n((df[['source', 'date', 'endorsee']].isnull()).astype(int).sum(axis=1)).value_counts()","8254f50d":"df.rename(columns={'source': 'raw_source'}, inplace=True)\ndf['raw_source'] = df.loc[:,'raw_source'].fillna('other')\ndf['source'] = 'other'\n\nkeys=['twitter', 'politico', 'youtube', '4president', 'cnn', 'apnews']\n\nfor k in keys:\n    df['source'] =  np.where(df['raw_source'].str.contains(k), k,  df['source'])\n    \ndf.drop('raw_source', axis=1, inplace=True)\ndf['endorsee'] = df.loc[:,'endorsee'].fillna('no_endorsee')\ndf['party'] = df.loc[:, 'party'].fillna('None')\nresumetable(df)","92b32805":"state_to_s = {\n 'Alabama': 'AL',\n 'Alaska':'AK',\n 'Arizona':'AZ',\n 'Arkansas':'AR',\n 'California':'CA',\n 'Colorado':'CO',\n 'Connecticut':'CT',\n 'Delaware':'DE',\n 'Florida':'FL',\n 'Georgia':'GA',\n 'Hawaii':'HI',\n 'Idaho':'ID',\n 'Illinois':'IL',\n 'Indiana':'IN',\n 'Iowa':'IA',\n 'Kansas':'KS',\n 'Kentucky':'KY',\n 'Louisiana':'LA',\n 'Maine':'ME',\n 'Maryland':'MD',\n 'Massachusetts':'MA',\n 'Michigan':'MI',\n 'Minnesota':'MN',\n 'Mississippi':'MS',\n 'Missouri':'MO',\n 'Montana':'MT',\n 'Nebraska':'NE',\n 'Nevada':'NV',\n 'New Hampshire':'NH',\n 'New Jersey':'NJ',\n 'New Mexico':'NM',\n 'New York':'NY',\n 'North Carolina' :'NC',\n 'North Dakota':'ND',\n 'Ohio':'OH',\n 'Oklahoma':'OK',\n 'Oregon':'OR',\n 'Pennsylvania':'PA',\n 'Rhode Island':'RI',\n 'South Carolina':'SC',\n 'South Dakota':'SD',\n 'Tennessee':'TN',\n 'Texas':'TX',\n 'Utah':'UT',\n 'Vermont':'VT',\n 'Virginia':'VA',\n 'Washington':'WA',\n 'West Virginia':'WV',\n 'Wisconsin':'WI',\n 'Wyoming':'WY',\n 'District of Columbia':'DC',\n 'Marshall Islands':'MH'}\n\ns_to_state = {}\n\nfor k,v in state_to_s.items():\n    s_to_state[v]=k\n    \ndf['full_state'] = df['state'].map(s_to_state)","abadc505":"endorsee_df = df[df['endorsee']!='no_endorsee']\nendorsee_df['endorsee'] = endorsee_df['endorsee'].str.split(' ').apply(lambda r: r[-1])\nendorsee_df.head(10)","6a04693e":"end_df = endorsee_df.groupby('endorsee').agg({'endorser': 'count', 'points': 'sum'})\n\nend_df.rename(columns={'endorser': 'n_endorsements',\n                       'points': 'tot_points'},\n              inplace=True)\n\nend_df['points_endorser_ratio'] = np.round(np.divide(end_df['tot_points'].to_numpy(), end_df['n_endorsements'].to_numpy()), 2)\nend_df.reset_index(inplace=True)","74cb90da":"fig = go.Figure()\n\nfig.add_trace( \n        go.Scatter(\n            x=end_df['n_endorsements'], \n            y=end_df['tot_points'],\n            mode='markers+text',\n            marker=dict(\n                size=(end_df['points_endorser_ratio']+3)**2,\n                color=end_df[\"points_endorser_ratio\"],\n                colorscale='geyser',\n                opacity = 0.7),\n            text=end_df['endorsee'],\n            textposition='bottom right'\n    ))\n\nfig.update_layout(\n        xaxis_type=\"log\",\n        yaxis_type=\"log\",\n        title={'text': 'Total Points per Number of Endorsers',\n               'y':0.95, 'x':0.5,\n               'xanchor': 'center', 'yanchor': 'top'},\n        showlegend=False,\n        xaxis_title_text='Number of Endorsers',\n        yaxis_title_text='Total Points',\n        updatemenus = list([\n            dict(active=0,\n                 buttons=list([\n                    dict(label='Log Scale',\n                         method='update',\n                         args=[{'visible': True},\n                               {'title': 'Log scale',\n                                'xaxis': {'type': 'log'},\n                                'yaxis': {'type': 'log'}}]),\n                    dict(label='Log X',\n                         method='update',\n                         args=[{'visible': True},\n                               {'title': 'Linear scale',\n                                'xaxis': {'type': 'log'},\n                                'yaxis': {'type': 'linear'}}]),\n                    dict(label='Log Y',\n                        method='update',\n                       args=[{'visible': True},\n                              {'title': 'Linear scale',\n                               'xaxis': {'type': 'linear'},\n                               'yaxis': {'type': 'log'}}]),\n                    dict(label='Linear Scale',\n                        method='update',\n                       args=[{'visible': True},\n                              {'title': 'Linear scale',\n                               'xaxis': {'type': 'linear'},\n                               'yaxis': {'type': 'linear'}}]),\n                            ]),\n                direction=\"down\",\n                pad={\"r\": 10, \"t\": 10},\n                showactive=True,\n                x=-0.2,\n                xanchor=\"left\",\n                y=1.1,\n                yanchor=\"top\"\n                )]),\n        annotations=[\n            go.layout.Annotation(text=\"Select Axis Scale\", \n                                 x=-0.2, xref=\"paper\", \n                                 y=1.13, yref=\"paper\",\n                                 align=\"left\", showarrow=False),\n        ])\n\nfig.show()","09d41361":"cols = ['category', 'source', 'position', 'party', 'state']\nlc = len(cols)\n\nd={}\n\nfor c in cols:\n    tmp = endorsee_df.groupby(['endorsee', c]).agg({'points':'sum', 'endorser':'count'}).reset_index()\n    tmp.rename(columns={'points': f'pt_by_{c}', 'endorser': f'votes_by_{c}'}, inplace=True)\n    d[c] = tmp\n\ncat_df = d['category']\nsource_df = d['source']\nposition_df = d['position']\nparty_df = d['party']\nstate_df = d['state']\nstate_df['full_state'] = state_df['state'].map(s_to_state)\n\nbuttons=[]\nl=endorsee_df['endorsee'].nunique()\nn_plots=5\ncolors = ['cadetblue', 'indianred',  'goldenrod']\npie_colors = [ 'mediumpurple', 'beige']","707d68d2":"fig = make_subplots(\n    rows=3, cols=2,\n    specs=[[{'colspan':2}, None],\n           [{}, {\"type\": \"pie\"}],\n           [{}, {\"type\": 'pie'}]],\n    subplot_titles=('Points by Endorser Category', \n                    'Points by Endorser Position', '% of Points by Endorser Party', \n                    'Number of Votes by Endorser Source', '% of Votes by Endorser State')\n)\n\n\nfor i,e in enumerate(endorsee_df['endorsee'].unique()):\n        \n    visible = [False]*l*n_plots\n    \n    visible[i*lc:(i+1)*lc] = [True]*lc\n        \n    fig.add_trace(\n            go.Bar(\n                x=cat_df.loc[cat_df['endorsee']==e, 'category'],\n                y=cat_df.loc[cat_df['endorsee']==e, 'pt_by_category'],\n                text=cat_df.loc[cat_df['endorsee']==e, 'pt_by_category'],\n                textposition='outside',\n                opacity=0.9,\n                marker={'color':colors[0],\n                       'opacity':0.9},\n                visible=False if i!=1 else True,\n                showlegend=False),\n        row=1, col=1)\n\n\n    \n    fig.add_trace(\n            go.Bar(\n                x=position_df.loc[position_df['endorsee']==e, 'position'],\n                y=position_df.loc[position_df['endorsee']==e,'pt_by_position'],\n                text=position_df.loc[position_df['endorsee']==e,'pt_by_position'],\n                textposition='outside',\n                opacity=0.9,\n                marker={'color':colors[1],\n                       'opacity':0.9},\n                visible=False if i!=1 else True,\n                showlegend=False),\n        row=2, col=1)\n    \n    fig.add_trace(\n            go.Pie(\n                values=party_df.loc[party_df['endorsee']==e, 'pt_by_party'].to_numpy(),\n                labels=party_df.loc[party_df['endorsee']==e, 'party'].to_numpy(),\n                hole=0.4,\n                visible=False if i!=1 else True,\n                text=party_df.loc[party_df['endorsee']==e, 'party'],\n                hoverinfo='label+percent+name',\n                textinfo= 'percent+label',\n                textposition = 'inside',\n                showlegend=False,\n                marker = dict(colors = plotly.colors.diverging.Geyser)),\n        row=2, col=2)\n    \n    fig.add_trace(\n            go.Bar(\n                x=source_df.loc[source_df['endorsee']==e, 'source'],\n                y=source_df.loc[source_df['endorsee']==e,'votes_by_source'],\n                text=source_df.loc[source_df['endorsee']==e,'votes_by_source'],\n                textposition='outside',\n                opacity=0.9,\n                marker={'color':colors[2],\n                       'opacity':0.9},\n                visible=False if i!=1 else True,\n                showlegend=False\n                       ),\n        row=3, col=1)\n    \n    fig.add_trace(\n            go.Pie(\n                values=state_df.loc[state_df['endorsee']==e, 'votes_by_state'].to_numpy(),\n                labels=state_df.loc[state_df['endorsee']==e, 'state'].to_numpy(),\n                hole=0.4,\n                visible=False if i!=1 else True,\n                text=state_df.loc[state_df['endorsee']==e, 'full_state'],\n                hoverinfo='label+percent+name',\n                textinfo= 'percent+label',\n                textposition = 'inside',\n                showlegend=False,\n                marker = dict(colors = plotly.colors.diverging.Geyser)),\n        row=3, col=2)\n    \n\n    buttons.append(\n        dict(label=e,\n             method='update',\n             args=[{'visible': visible},\n                   #{'title': e}\n                  ]))\n    \n\nfig.update_layout(\n    title={'text': '<b> Endorsee Summary <b>', 'font':{'size':22},\n            'y':0.95, 'x':0.5, 'xanchor': 'center', 'yanchor': 'top'},\n    margin=dict(t=150),\n    height=1350,\n    xaxis1=dict(tickangle=45, tickvals=cat_df['category'].unique(), ticktext=cat_df['category'].unique()),\n    yaxis1=dict(range=[0, np.max(cat_df['pt_by_category']+15)]),\n    \n    xaxis2=dict(tickangle=45, tickvals=position_df['position'].unique(), ticktext=position_df['position'].unique()),\n    yaxis2=dict(range=[0, np.max(position_df['pt_by_position']+15)]),\n    \n    xaxis3=dict(tickangle=45, tickvals=source_df['source'].unique(), ticktext=source_df['source'].unique()), \n    yaxis3=dict(range=[0, np.max(source_df['votes_by_source']+15)]), \n    \n    bargap=0.1,\n    showlegend=True,\n    updatemenus = list([\n        dict(active=1,\n             buttons=buttons,\n             direction=\"down\",\n             pad={\"r\": 10, \"t\": 10},\n             showactive=True,\n             x=-0.15,\n             xanchor=\"left\",\n             y=1.04,\n             yanchor=\"top\"\n         )\n     ]))\n\nfig['layout']['annotations'] += go.layout.Annotation(text=\"Select Endorsee\", \n                                                     x=-0.15, xref=\"paper\", \n                                                     y=1.05, yref=\"paper\",\n                                                     align=\"left\", showarrow=False),\n    \n    \n\nfig.show()","e189d786":"endorsee_df['date'] = pd.to_datetime(endorsee_df['date'])\ne = endorsee_df.set_index('date')\npt_over_time = e.groupby(\"endorsee\").resample('15D').agg({\"endorser\": np.size, \"points\": np.sum})\npt_over_time.reset_index(inplace=True)\npt_over_time['cum_points'] = pt_over_time.sort_values('date').groupby(by=['endorsee'])['points'].transform(lambda x: x.cumsum())\npt_over_time['cum_votes'] = pt_over_time.sort_values('date').groupby(by=['endorsee'])['endorser'].transform(lambda x: x.cumsum())","565358fa":"fig = go.Figure()\n\nfor i,e in enumerate(endorsee_df['endorsee'].unique()):\n    \n    fig.add_trace(\n        go.Scatter(\n            x=pt_over_time.loc[pt_over_time['endorsee']==e, 'date'],\n            y=pt_over_time.loc[pt_over_time['endorsee']==e, 'cum_points'],\n            name=e,\n            mode ='markers+lines',\n            showlegend=True)\n        )\n    \nfig.update_layout(\n    height=550,\n    #width=800,\n    title={'text': 'Total Points per over Time',\n           'y':0.95, 'x':0.5,\n           'xanchor': 'center', 'yanchor': 'top'},\n    xaxis=dict(range=[date(2019,1,1), np.max(pt_over_time['date'])]),\n    yaxis=dict(title='Points')\n    )\n\nfig.show()","ad5b432c":"cols = ['category', 'party', 'state']\nd={}\n\nfor c in cols:\n    tmp = endorsee_df.groupby(['endorsee', c]).agg({'points':'sum', 'endorser':'count'}).reset_index()\n    tmp.rename(columns={'points': f'pt_by_{c}', 'endorser': f'votes_by_{c}'}, inplace=True)\n    d[c] = tmp\n    \n    \nn_plots=2\nl=len(cols)\nbuttons=[]\n\nfig = make_subplots(\n    rows=2, cols=1,\n    specs=[[{}],\n           [{}]],\n    row_heights=[0.65, 0.35]\n)\n\n\nfor i,c in enumerate(cols):\n\n    visible = [False]*l*n_plots\n    visible[i*n_plots:(i+1)*n_plots] = [True]*n_plots\n\n    tmp = d[c]\n    \n    fig.add_trace( \n        go.Scatter(\n            y=tmp[c],\n            x=tmp['endorsee'],\n            mode='markers+text',\n            marker=dict(\n                size=np.where(tmp[f'pt_by_{c}']<50, tmp[f'pt_by_{c}']+20, 60),\n                color=tmp[f'votes_by_{c}'],\n                colorscale='geyser',\n                showscale=False,\n                opacity = 0.7),\n            text=tmp[f'pt_by_{c}'],\n            visible=True if i==0 else False,\n            textposition='middle center'),\n        row=1, col=1)\n\n    fig.add_trace(\n        go.Bar(\n            x=tmp['endorsee'],\n            y=tmp[f'pt_by_{c}'],\n            text=tmp[f'pt_by_{c}'],\n            hoverinfo='all',\n            textposition='inside',\n            visible=True if i==0 else False,\n            marker=dict(\n                color=tmp[f'pt_by_{c}'],\n                colorscale='geyser')),\n        row=2, col=1)\n\n    buttons.append(\n        dict(label= ' '.join([s.capitalize() for s in c.split('_')]),\n             method='update',\n             args=[{'visible': visible},\n                   {'title': {'text': 'Points by ' + [s.capitalize() for s in c.split(\"_\")][-1],\n                              'y':0.95, 'x':0.5, 'xanchor': 'center', 'yanchor': 'top'},\n                   #'yaxis1': {'title': f'Endorser {c.capitalize()}'},\n                   #'yaxis2': {'title': f'Points by Endorser {c.capitalize()}'}\n                   }]\n            )\n        )\n\n    \nfig.update_layout(\n      height=1350,\n      showlegend=False,\n      xaxis1=dict(tickangle=45, title='Endorsee'),\n      #yaxis1=dict(title='Endorsee Category'),\n      xaxis2=dict(tickangle=45, title='Endorsee'),\n      yaxis2=dict(title='Points', type='log'),\n      updatemenus = list([\n          dict(active=0,\n             buttons=buttons,\n             direction=\"right\",\n             pad={\"r\": 10, \"t\": 10},\n             #showactive=True,\n             x=0.15,\n             xanchor=\"left\",\n             y=1.08,\n             yanchor=\"top\"\n         )\n     ]),\n    annotations=[\n        go.layout.Annotation(text=\"Select Aggregation\", x=-0.12, xref=\"paper\", y=1.06, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n    ])\n    \n\nfig.show()","8c971e80":"noend = df.loc[df['endorsee']=='no_endorsee']\nnoend.head(10)","9f6c729f":"from itertools import product \ncols = ['category', 'party', 'position', 'state']\ncol_pairs=[]\nd={}\nfor i,c1 in enumerate(cols):\n    for c2 in cols[i+1:]:\n        col_pair=c1.capitalize() + '-' + c2.capitalize()\n        tmp = noend.groupby([c1,c2]).agg({'points':'sum', 'endorser':'count'}).reset_index()\n        tmp.rename(columns={'points': f'pt_by_{col_pair}', 'endorser': f'votes_by_{col_pair}'}, inplace=True)\n        d[col_pair] = tmp\n        col_pairs.append((c1,c2))\n","507ccdb0":"l=len(col_pairs)\nbuttons=[]\n\nfig = go.Figure()\n\nfor j, (c1,c2) in enumerate(col_pairs):\n    \n    col_pair = c1.capitalize() + '-' + c2.capitalize()\n    visible = [False]*l\n    visible[j] = True\n\n    tmp = d[col_pair]\n    \n    fig.add_trace( \n        go.Scatter(\n            x=tmp[c1],\n            y=tmp[c2],\n            mode='markers+text',\n            marker=dict(\n                size=np.where(tmp[f'pt_by_{col_pair}']<50, tmp[f'pt_by_{col_pair}']+20, 60),\n                color=tmp[f'votes_by_{col_pair}'],\n                colorscale='geyser',\n                showscale=False,\n                opacity = 0.7),\n            text=tmp[f'pt_by_{col_pair}'],\n            visible=True if j==0 else False,\n            textposition='middle center'))\n\n    buttons.append(\n        dict(label=col_pair,\n             method='update',\n             args=[{'visible': visible},\n                   {'title': {'text': f'Votes by <b>{c1.capitalize()}<b> &  <b>{c2.capitalize()}<b>',\n                              'y':0.95, 'x':0.5, 'xanchor': 'center', 'yanchor': 'top'},\n                   'xaxis': {'title': c1.capitalize(), 'tickangle': 45},\n                   'yaxis': {'title': c2.capitalize()}\n                   }]\n            )\n        )\n  \n\n    \nfig.update_layout(\n      margin=dict(l=120, t=200),\n      height=1150,\n      showlegend=False,\n      title = {'text': f'Votes by <b>{col_pairs[0][0].capitalize()}<b> &  <b>{col_pairs[0][1].capitalize()}<b>',\n                              'y':0.95, 'x':0.5, 'xanchor': 'center', 'yanchor': 'top'},\n      xaxis={'title': col_pairs[0][0].capitalize(), 'tickangle':45},\n      yaxis={'title': col_pairs[0][1].capitalize()},\n      updatemenus = [\n          go.layout.Updatemenu(\n             active=0,\n             buttons=buttons,\n             direction=\"down\",\n             pad={\"r\": 10, \"t\": 10},\n             #showactive=True,\n             x=0,\n             xanchor=\"left\",\n             y=1.1,\n             yanchor=\"top\"\n         )\n     ],\n    annotations=[\n        go.layout.Annotation(text=\"Select Columns\", x=0.02, xref=\"paper\", y=1.12, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n    ])\n    \n\nfig.show()","06aa2eac":"Now let's compare candidates using the *category*, *party*, *state* columns as source of points. \n\nThe first plot shows each candidate points split among one of the possible column to select - this makes it easy to compare candidates points over the same value of the selected column.\n\nOn the other hand the bar plot quantifies the total amount of points, split by the above aggregation selected above. ","855afe09":"<a id=\"summarytable\"><\/a>\n### Endorsee Table Summary\n\nLet's create a chart summarizing, for each endorsee, the points received by *category*, *party*, *position*, *source* and *state*.","203bec46":"Both the size and the color of each Endorsee is proportional to his by his Points-to-Votes ratio.\n\nWe can see that Biden is quite far from the rest, having almost 3 times the number of votes and number of points of the \"second\" in the list.\nUsing a linear scale is more clear that we have kind of 2 clusters, plus Biden on his own.\n\nFinally, let's remark that Klobuchar has the highest Points-to-Votes ratio, followed by Bennet.","6075e3d9":"<a id=\"endorsee\"><\/a>\n# Endorsee Analysis\n\nLet's start to analyze and confront endorsees.","a9e536a4":"Let's rename *endorser party* column which is spaced and check some initial statistics.","c836d6db":"Let's do some preprocess for filling and\/or mapping *source*, *endorsee* and *state* columns.","e3b02796":"Checking this numerically we get what we espected:","3ebdd2db":"<a id=\"noend\"><\/a>\n# Endorsers with no Endorsee Analysis\n\nLet's plot what's the \"bivariate distribution\" of Endorsers which did not endorse any candidate.","2fa39cac":"# 2020 Democratic Primary Endorsements\n\n**Remark** I have no domain knowledge, thus let me know if I am missing something useful or misusing\/misunderstanding the data.\n\nThe goal of the notebook is to first analyze various statistics of endorsers which endorsed a candidate, and later do a less in depth analysis for the rest of endorsers in the list with no endorsee.\n\nJust to recap how points are computed:\n* 10 points: *Former presidents*, *vice presidents* and *current national party leaders*\n* 8 points: *Governors*\n* 6 points: *U.S. senators*\n* 5 points: *Former presidential*, *vice-presidential nominees*, *former national party leaders* and *presidential candidates who have dropped out*\n* 3 points: *U.S. representatives* and *Mayors of large cities*\n* 2 points: *Officials in statewide elected offices* and *State legislative leaders*\n* 1 point: *Other Democratic National Committee members*\n    \n### Table of Content\n* [Data Cleaning](#cleaning)\n* [Endorsee Analysis](#endorsee)\n    - [Endorsee Summary Table](#summarytable)\n    - [Endorsees Comparision](#comparison)\n* [Endorsers with no Endorsee](#noend)\n* [What's Next](#next)","55651950":"Takeaways:\n 1. Category:\n     * Bloomberg has the highest points by majors endorsers.\n     * Warren has the highest points from statewide officeholders.\n     * Klobuchar is the only one with points coming from endorsement of past president or vicepresident.\n     * For every other category, Biden gets the highest score.\n 2. Party:\n     * All endorsers except 3 are Democrats.\n     * Booker is the only one endorsed by a Republican.\n 3. State:\n     * California is split between Biden and Harris\n     * Booker is strong in New Jersey, Harris is California, Klobuchar in Minnesota, Warren in Massachusetts.\n     * Biden has votes from 29 states, followed by Warren from 14, Sanders and Buttigieg from 13.","20981990":"We can already see that each *Endorser* is unique in the dataframe, however most of them (~75%) do not have an *Endorsee*.\nOther columns with a high number of missing values are *city*, *body*, *order*, *district*, *date* and *source*.","3b866af6":"<a id=\"cleaning\"><\/a>\n# Data Cleaning\n\nLet's start by loading libraries and the dataset, deal with its missing values and clean columns.","04aecf17":"<a id=\"comparison\"><\/a>\n\n### Endorsees Comparison\n\nFirst and foremost, let's plot each Endosee cumulative points over time.","8503d8da":"<a id=\"next\"><\/a>\n### Where to go from here?\n\nAs I mentioned at the beginning I have no domain knowledge, I think it is possible to cluster values in the *position* columns, and maybe also *state* based on some understanding of their political situation.\n\nAnother interesting analysis would be to confront *endorsers* behaviour with respect to 2016 Democratic Primary Endorsements data.\n\nAs always, any feedback is more than welcomed :)","955bb542":"Let's drop the *city*, *body*, *order* and *district* column due to their high number of missing values - which I don't know how to fill.\n\nRemark that only 24.75% of *endorsers* actually endorsed a candidate, those are the ones which has the triplets *date*, *endorsee* and *source*  columns populated. Otherwise all 3 columns are missing, in fact when plotting the missing values matrix, they correspond in the missing values index location. In the following plot, white corresponds to a missing value."}}