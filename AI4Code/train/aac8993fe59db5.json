{"cell_type":{"0071adb2":"code","2b147d07":"code","4f6c934f":"code","ec58fc9e":"code","aebb3d2f":"code","f9bd6704":"code","0d029476":"code","afe1b16c":"code","4b0e9c82":"code","955d2ccc":"code","f3f6bb67":"code","fd76aac4":"markdown","a407bded":"markdown","5523f1d7":"markdown","f76a9e54":"markdown","c9fba5fb":"markdown","559f689a":"markdown"},"source":{"0071adb2":"from __future__ import print_function\n\nimport pandas as pd\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, BatchNormalization\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.optimizers import RMSprop\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n#%matplotlib inline","2b147d07":"import seaborn as sns\nsns.set(style='white', context='notebook', palette='deep')","4f6c934f":"# Download the data\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","ec58fc9e":"y_train = train[\"label\"].to_numpy()\nx_train = train.drop(columns = [\"label\"]).to_numpy()","aebb3d2f":"x_test = test.to_numpy()","f9bd6704":"# Let's preview the labels\npreview = sns.countplot(y_train)","0d029476":"# use one-hot enconding\ny_train = keras.utils.to_categorical(y_train, 10)\n\nprint(\"The cateragories of these image are now encoded as : \\n\",y_train[0][:],\"\\n\",y_train[1][:],\"\\n\",y_train[2][:],\"\\n\",y_train[3][:],\"\\n\" )","afe1b16c":"img_rows, img_cols = 28, 28\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\nx_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\ninput_shape = (img_rows, img_cols, 1)\n\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train \/= 255\nx_test \/= 255\n\nx_train.shape","4b0e9c82":"model = Sequential()\nmodel.add(Conv2D(128, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=input_shape))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.35))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.35))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\n\nmodel.summary()\n\nmodel.compile(loss=\"categorical_crossentropy\",\n              optimizer=keras.optimizers.adam(),\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n          batch_size=256,\n          epochs=15,\n          verbose=1)","955d2ccc":"# Predict classes for the test set\npred = model.predict(x_test)\n\n# select the indix with the maximum probability\npred = np.argmax(pred,axis = 1)","f3f6bb67":"# Submit\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(pred)+1)),\n                         \"Label\": pred})\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)","fd76aac4":"# Data Pre-Processing","a407bded":"# Submission","5523f1d7":"## Reshaping data for CNNs","f76a9e54":"## Using one-hot encoding","c9fba5fb":"# The model","559f689a":"# Imports"}}