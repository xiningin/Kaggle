{"cell_type":{"d1679b69":"code","6854eba8":"code","9883fc39":"code","014bee37":"code","e3e2a8b8":"code","e74afd18":"code","f3afb08e":"code","bb209352":"code","c9d01a0d":"markdown","ec641d32":"markdown","d19da3eb":"markdown","0eb1bed4":"markdown","451a1bc5":"markdown","02b1a15b":"markdown","8948aca2":"markdown","ea3c5f10":"markdown"},"source":{"d1679b69":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\npd.set_option('max_columns', 100)\n\ntrain = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","6854eba8":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\ncreate_football_field()\nplt.show()","9883fc39":"fig, ax = create_football_field()\ntrain.query(\"PlayId == 20170907000118 and Team == 'away'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=30, legend='Away')\ntrain.query(\"PlayId == 20170907000118 and Team == 'home'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=30, legend='Home')\nplt.title('Play # 20170907000118')\nplt.legend()\nplt.show()","014bee37":"train['PossessionTeam'].replace(to_replace = \"ARZ\", value = \"ARI\", inplace=True)\ntrain['PossessionTeam'].replace(to_replace = \"BLT\", value = \"BAL\", inplace=True)\ntrain['PossessionTeam'].replace(to_replace = \"CLV\", value = \"CLE\", inplace=True)\ntrain['PossessionTeam'].replace(to_replace = \"HST\", value = \"HOU\", inplace=True)","e3e2a8b8":"train['TeamIdentifier'] = np.where(train['Team'] == 'home', train['HomeTeamAbbr'], train['VisitorTeamAbbr'])\ntrain['PossessionTeamAvgXPos'] = train.query('TeamIdentifier == PossessionTeam').groupby(['PlayId', 'Team'])['X'].transform('mean')\ntrain.sort_values(by=['GameId','PlayId','PossessionTeamAvgXPos'])\ntrain['PossessionTeamAvgXPos'].fillna(method='backfill', inplace=True)","e74afd18":"train['ScrimmageLine'] = np.where(train['PossessionTeamAvgXPos'] > 60, (train['YardLine'] + (2 * (50 - train['YardLine']))), train['YardLine'])","f3afb08e":"testdata = train[train['GameId'] == 2017090700]\nplays = testdata.PlayId.unique()","bb209352":"def get_play_visualisation(play):\n    playid = play\n    \n    hometeam = train.query(\"PlayId == @playid\")['HomeTeamAbbr'].tolist()[0]\n    visitorteam = train.query(\"PlayId == @playid\")['VisitorTeamAbbr'].tolist()[0]\n    \n    yl = train.query(\"PlayId == @playid\")['YardLine'].tolist()[0]\n    fig, ax = create_football_field(highlight_line=True,\n                                    highlight_line_number=train.query('PlayId == @playid')['ScrimmageLine'].values[0])\n    train.query(\"PlayId == @playid and Team == 'away'\") \\\n        .plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=50, legend='Away')\n    train.query(\"PlayId == @playid and Team == 'home'\") \\\n        .plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=50, legend='Home')\n    plt.title(f'Play # {playid}, {visitorteam} at {hometeam}')\n    plt.legend()\n    plt.show()\n\nfor p in plays:\n    get_play_visualisation(p)","c9d01a0d":"# Adding Players For a Play","ec641d32":"## Function to Create The Football Field","d19da3eb":"I then created a TeamIdentifier column and use this to compare against PossessionTeam, calculate the average X position for the team in possession on the play before sorting the data so that for each GameId and PlayId the NaN's are listed first and backfilled with the PossessionTeamAvgXPos.","0eb1bed4":"To show that this moves the line of scrimmage to the correct yard marker on the visualised field I'll take a game between Kansas City Chiefs and New England Patriots from the dataset and visualise each running play for that game.","451a1bc5":"Finally I add a column holding the scrimmage line value for each play. As the field visualisation has an X length of 120 due to the endzones the 50 yard line is X = 60 so when the team in possession has an average position greater than 60 I calculate the X position of the scrimmage line as being YardLine + (2 * (50 - YardLine)).","02b1a15b":"# NFL Big Data Bowl\n## Programmatically Highlighting The Line of Scrimmage\n\nThis notebook expands on the work done by [Rob Mulla](https:\/\/www.kaggle.com\/robikscube) in his [NFL Big Data Bowl  Plotting Player Position](https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position) notebook. \n\nMy aim is to programmatically calculate the line of scrimmage and highlight it. In the original notebook it was marked by the code \"highlight_line_number=yl+54\" which adds the required 54 yards to move the scrimmage line from the left side of the field to the right as was needed for the selected play.\n\nThe only section of this notebook that I will edit therefore is the \"Highlight the line of scrimmage\" section.\n","8948aca2":"First I have to amend the data so that the abbreviations used in PossessionTeam match those used in HomeTeamAbbbr and VisitorTeamAbbr.","ea3c5f10":"# Highlight the line of scrimmage"}}