{"cell_type":{"3a7b4753":"code","22eb9b20":"code","cb7de769":"code","abdcd9b4":"code","d16b7b18":"code","194719fa":"code","f8fca9df":"code","8f6de563":"code","7376cfaa":"code","d1574497":"code","a4bc1324":"code","cdac4c87":"code","538c1605":"code","ebefad26":"code","80402c65":"code","37101070":"code","27172484":"code","77b53744":"code","66fa4cde":"code","eadc02c1":"code","49bb67e8":"code","c6796dcb":"code","779a937b":"code","d1d6921e":"code","14e25e24":"code","aeff76aa":"code","e1bf7b4e":"code","e67a8884":"code","dcedfa95":"code","a51bb955":"code","21069c9b":"code","15ae8645":"code","d304d412":"code","d79c7e9c":"code","a3fd7758":"code","8ed00005":"code","f62be460":"code","4915dc6b":"code","7398c190":"code","3326952d":"code","9b4bb9a7":"code","6a780fb3":"code","393731e8":"code","076e95ff":"code","a7bafd85":"code","5583d801":"code","ae3a371e":"code","eff03299":"code","5600bc57":"code","7be9f294":"code","a6503e4a":"code","47cd2157":"markdown","c7789ace":"markdown","fdd6969d":"markdown","23d720a7":"markdown","310090d0":"markdown","b5f42af9":"markdown","4236d98a":"markdown","3b1a5086":"markdown","61f33890":"markdown","a4a7616a":"markdown"},"source":{"3a7b4753":"#Importing the dataset\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n%matplotlib inline\n\nimport seaborn as sns\n\nfrom scipy import stats\n\nDS = '..\/input\/bike-demand-dataset\/Bike.csv'","22eb9b20":"df = pd.read_csv(DS)","cb7de769":"df.head()","abdcd9b4":"df.tail()","d16b7b18":"#Information of the dataset\ndf.info()","194719fa":"#To check the type of data \ndf.dtypes","f8fca9df":"#For a statistical summary\ndf.describe()","8f6de563":"#checking for null values\ndf.isnull().sum()","7376cfaa":"#Sanity checks \n#1 registered + casuals = cnt \nsum_columns = df['casual'] + df['registered']\ndf['cnt'] = sum_columns\nprint(df)","d1574497":"#Month values should be 1 - 12 only \ndf.mnth.unique()","a4bc1324":"#Hours should be between 0 - 23 only\ndf.hr.unique()","cdac4c87":"df.holiday.value_counts()","538c1605":"df.weathersit.value_counts()","ebefad26":"#Creating a new dataframe inp1\ninp1 = pd.DataFrame(df)","80402c65":"inp1.head()","37101070":"#Drop Registered, casual, instant, date column\ninp1.drop(labels = ['casual','dteday','instant'], axis = 1, inplace = True)","27172484":"inp1.head(5)","77b53744":"df['cnt'].max()","66fa4cde":"df['cnt'].min()","eadc02c1":"#Describe the numerical fields\ninp1.describe()","49bb67e8":"#Make a density plot for temp\ninp1.temp.plot.density(color = 'green')\nplt.title('Density plot for spreading')\nplt.show()","c6796dcb":"#Boxplot for atemp.\n#Look for outliers\nstyle.use('ggplot')\nplt.boxplot(inp1['atemp']*100)\n\nplt.title('Boxplot for atemp in celsius')\nplt.xlabel('atemp')\nplt.ylabel('Count')\n\nplt.show()\n\n\n'''The below boxplot shows that there are no ouliers'''","779a937b":"#Histogram for hum \n#Do you detect any abnormally high values?\nstyle.use('ggplot')\nplt.figure(figsize = (7,7))\n\nplt.hist(inp1['hum']*100, bins = 100)\n\nplt.title('Normalized humidity')\nplt.xlabel('HUM')\nplt.ylabel('Count')\n\nplt.show()","d1d6921e":"#Make a density plot for windspeed\ninp1.windspeed.plot.density(color = 'blue')\nplt.title('Density plot for spreading of windspeed')\nplt.show()","14e25e24":"#Make a density plot for cnt\ninp1.cnt.plot.density(color = 'cyan')\nplt.title('Density plot for spreading')\nplt.show()","aeff76aa":"#Boxplot for cnt.\n#Look for outliers\nstyle.use('ggplot')\nplt.boxplot(inp1['cnt'])\n\n#plt.axis([0,1000,0,1000])\nplt.title('Boxplot for cnt')\nplt.xlabel('cnt')\nplt.ylabel('Hour')\n\nplt.show()\n\n","e1bf7b4e":"min_threshold, max_threshold = inp1.cnt.quantile([0.001,0.775])\nmin_threshold, max_threshold","e67a8884":"inp1[inp1['cnt'] > max_threshold]","dcedfa95":"inp1[inp1['cnt'] < min_threshold]","a51bb955":"inp1.shape","21069c9b":"inp2 = inp1[(inp1.cnt < max_threshold) & (inp1.cnt > min_threshold)]\ninp2.shape","15ae8645":"#Boxplot for cnt.\n#Look for outliers\nstyle.use('ggplot')\nplt.boxplot(inp2['cnt'])\n\n#plt.axis([0,1000,0,1000])\nplt.title('Boxplot for cnt')\nplt.xlabel('cnt')\nplt.ylabel('Hour')\n\nplt.show()\n\n","d304d412":"#1 Make a boxplot for cnt VS Hour \nsns.boxplot(x = 'hr', y = 'cnt', data = inp2)\n\n","d79c7e9c":"#2 Make a boxplot for cnt VS weekday\nsns.boxplot(x = 'weekday', y = 'cnt', data = inp2)","a3fd7758":"#3 Make a boxplot for cnt VS month\nsns.boxplot(x = 'mnth', y = 'cnt', data = inp2)","8ed00005":"#4 Make a boxplot for cnt VS season\n#1 Clear, few clouds, partly cloud\n#2 Mist + Cloudy, mist + broken clouds, Miist + few clouds, mist\n#3 Light snow, Light rain + thunderstorm + Scattered clouds\n#4 Heavy rain + ice pellets + thunderstorm + mist, Snow + fog \nsns.boxplot(x = 'weathersit', y = 'cnt', data = inp2)","f62be460":"#Pearson correlation\nPearson_coef_atemp, p_value = stats.pearsonr(inp2['atemp'], inp2['cnt'])\nPearson_coef_atemp, p_value","4915dc6b":"Pearson_coef_temp, p_value = stats.pearsonr(inp2['temp'], inp2['cnt'])\nPearson_coef_temp, p_value","7398c190":"Pearson_coef_hum, p_value = stats.pearsonr(inp2['hum'], inp2['cnt'])\nPearson_coef_hum, p_value","3326952d":"Pearson_coef_windspeed, p_value = stats.pearsonr(inp2['windspeed'], inp2['cnt'])\nPearson_coef_windspeed, p_value","9b4bb9a7":"#Correlation matrix\n# Calculating correlation matrix\nContinuousCols=['temp','atemp','hum','windspeed']\n\n# Creating the correlation matrix\nCorrelationData = inp2[ContinuousCols].corr()\nCorrelationData","6a780fb3":"'''\nPearson coefficient \n\ncorrelation coefficient:\n    close to +1 = Large positive relationship\n    close to -1 = Large negative relationship\n    close to 0 = No relationship\n    \nP-value:\n    P-value < 0.001 strong certainity in the result\n            < 0.05 Moderate certainity in the result\n            < 0.1 weak certainity in the result\n            > 0.1 No certainity in the result\n'''","393731e8":"inp2.head()","076e95ff":"Selectedcolumns = ['registered', 'season', 'mnth', 'hr', 'holiday', 'weekday', 'workingday', \n                  'weathersit']\n\nDataforML = inp2[Selectedcolumns]\nDataforML.head()","a7bafd85":"#Saving the above file for ref during deployment\nDataforML.to_pickle('DataforML.pkl')","5583d801":"#Creating dummies\ninp3 = pd.get_dummies(DataforML)\n\n#Adding target variable(cnt) to the data\ninp3['cnt'] = inp2['cnt']\n\ninp3.head()","ae3a371e":"inp3.columns","eff03299":"#Separate target variables and predictor variables\nTargetvariables = 'cnt'\nPredictors = ['registered', 'season', 'mnth', 'hr', 'holiday', 'weekday',\n             'workingday', 'weathersit']\n\nX = inp3[Predictors].values\nY = inp3[Targetvariables].values\n\n#Spilit the data into training and testing set\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3,\n                                                   random_state = 428)","5600bc57":"from sklearn.linear_model import LinearRegression\nLR = LinearRegression()\n\nprint(LR)\n\n#Creating a model on training data\nLRM = LR.fit(X_train, Y_train)\nprediction = LRM.predict(X_test)","7be9f294":"LRM.predict([[42,1,1,13,0,1,0,4]])","a6503e4a":"from sklearn import metrics\nimport numpy as np\n\n# Measuring Goodness of fit in Training data\nprint('R2 Value:',metrics.r2_score(Y_train, LRM.predict(X_train)))\n\nprint('\\n##### Model Validation and Accuracy Calculations ##########')\n\n# Printing some sample values of prediction\nTestingDataResults=pd.DataFrame(data=X_test, columns=Predictors)\nTestingDataResults[Targetvariables]=Y_test\nTestingDataResults[('Predicted'+Targetvariables)]=np.round(prediction)\n\n# Printing sample prediction values\nprint(TestingDataResults[[Targetvariables,'Predicted'+Targetvariables]].head())","47cd2157":"# Multiple Linear Regression","c7789ace":"Treat the higher values in cnt column and drop the higher values from the desired cut-off.","fdd6969d":"Maximum count of total rental bikes is 300 more than that can be removed\/dropped \nMinimum count of total rental bikes is 1 and there is nothing less ","23d720a7":"# Data Pre-processing for Machine Learning\nList of steps performed on predictor variables before data can be used for machine learning\n\n1. Converting each Ordinal Categorical columns to numeric\n\n2. Converting Binary nominal Categorical columns to numeric using 1\/0 mapping\n\n3. Converting all other nominal categorical columns to numeric using pd.get_dummies()\n\n4. Data Transformation (Optional): Standardization\/Normalization\/log\/sqrt. Important if you are using distance based algorithms like KNN, or Neural Networks","310090d0":"# DATA WRANGLING ","b5f42af9":"# Data preprocessing ","4236d98a":"# ANOVA: Analysis of Variance\nThe Analysis of Variance (ANOVA) is a statistical method used to test whether there are significant differences between the means of two or more groups. ANOVA returns two parameters:\n\nF-test score: ANOVA assumes the means of all groups are the same, calculates how much the actual means deviate from the assumption, and reports it as the F-test score. A larger score means there is a larger difference between the means.\n\nP-value: P-value tells how statistically significant is our calculated score value.\nIf our price variable is strongly correlated with the variable we are analyzing, expect ANOVA to return a sizeable F-test score and a small p-value.","3b1a5086":"# UNIVARIATE ANALYSIS","61f33890":"# Bivariate analysis","a4a7616a":"# Outlier Treatment"}}