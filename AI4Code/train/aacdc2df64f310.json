{"cell_type":{"c5687337":"code","5faea378":"code","81fadf01":"code","7650a586":"code","d9c57cc3":"code","e52fee77":"code","fbee1096":"code","2ce7a678":"code","36068d18":"code","549510f7":"code","3787b73e":"code","f88db065":"code","0ca5b0eb":"code","55d98d97":"markdown","a3af4983":"markdown","62516ecc":"markdown"},"source":{"c5687337":"import numpy as np \nimport pandas as pd \nimport os\nimport joblib\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, RepeatedStratifiedKFold, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\nfrom catboost import CatBoostClassifier\n","5faea378":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","81fadf01":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/sample_submission.csv')\ntrain.head()","7650a586":"test.head()","d9c57cc3":"cat_cols = ['cat'+str(i) for i in range(19)]\nnumeric_cols = ['cont'+str(i) for i in range(11)]\ntarget = 'target'","e52fee77":"train[target].value_counts()","fbee1096":"train.isna().mean() * 100","2ce7a678":"le  = LabelEncoder()\nfor c in cat_cols:\n    train[c] = le.fit_transform( train[c].values.reshape((-1,1)))\n    test[c] = le.fit_transform( test[c].values.reshape((-1,1)))","36068d18":"scores = []\nmodels = []\nout = []\nX = train[ cat_cols+numeric_cols ]\ny = train[ target ].values\nskf = StratifiedKFold(shuffle=True, random_state=123, n_splits=3)\nfor fold,  (train_idx, val_idx) in enumerate( skf.split( X , y ) ):\n    print('fold#', fold)\n    x_train, y_train = X.iloc[ train_idx, :], y[ train_idx ]\n    x_val, y_val = X.iloc[ val_idx, :], y[ val_idx ]\n    cat = CatBoostClassifier(\n                        random_seed=123,\n                        cat_features= cat_cols,\n                        n_estimators=20000,\n                        eval_metric= 'AUC',\n                        verbose=1000,\n                       task_type=\"GPU\",\n                           devices='0:1',\n                        early_stopping_rounds=300\n                        )\n    try:\n        cat.fit( x_train, y_train )\n        preds = cat.predict_proba( x_val )[:, 1]\n        score = roc_auc_score( y_true= y_val, y_score= preds )\n        scores.append( score )\n        models.append( cat )\n        joblib.dump( cat, f'catboost_{score}.joblib')\n        out.append( cat.predict_proba( test[ cat_cols+numeric_cols ] )[:, 1] )\n        print(f' >>> {score} <<<')\n    except Exception as e:\n        print(f'exception: { e }')","549510f7":"np.save(  'output.npy', out )\nnp.save( 'scores.npy', scores )","3787b73e":"for i,model in enumerate( models ):\n    joblib.dump(model, f'model_{str(i)}.joblib')","f88db065":"sub.id = test.id.values\nsub.target = np.sum( out , axis=0) \/ len( out )\nsub.head()","0ca5b0eb":"sub.to_csv('submission2.csv', index=False)","55d98d97":"# Submission","a3af4983":"# Save model","62516ecc":"# Model "}}