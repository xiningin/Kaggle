{"cell_type":{"94ca7fa6":"code","1e1e71f9":"code","ec45dfbd":"code","f4ca9e89":"code","6316cfb6":"code","d6c6a00e":"code","9177cc27":"code","947b3c8c":"code","6b7f8f72":"code","7bb8024f":"code","de740581":"code","ff43be93":"code","60214314":"code","ae570c5c":"code","339c3ef9":"code","6ab659df":"code","4ed30371":"code","d564e395":"code","8da69c4a":"code","e59741c3":"code","fbd29b44":"code","913f3853":"code","c45f628d":"code","997844cd":"code","a42d5154":"code","efc167ab":"code","762c209d":"code","2fd30315":"code","02305a32":"code","f3173d34":"code","4e8bca55":"code","f08d1278":"code","2204b57e":"code","b42c4e73":"code","8ef9608d":"code","0040cdab":"code","d0c85b86":"code","65c0709d":"code","c13dbd10":"code","19c4e333":"code","4b7a4512":"code","3434ed9a":"code","4b4c7d12":"code","faa318ec":"code","1854fbc8":"code","d8e6e0cc":"code","d85fcc4a":"code","5e1f4182":"code","87ee32d4":"code","3306daea":"code","2fe695a2":"code","0c0f404a":"markdown","6438a571":"markdown","47ba2891":"markdown","5544574f":"markdown","4928d192":"markdown","2d5b496c":"markdown","7eda0bc0":"markdown","2a821005":"markdown","afb6b56f":"markdown","efefa7d2":"markdown","792bdfaa":"markdown","0e07d2da":"markdown","3e25dd60":"markdown","bc144393":"markdown","105296b8":"markdown","341f1cc1":"markdown","1c49000e":"markdown","e58b01b1":"markdown","12007252":"markdown","710a29e4":"markdown","a2d53877":"markdown","c42dbebc":"markdown","5965e007":"markdown","8e8ba151":"markdown","df872a37":"markdown","fc63d5a6":"markdown","18a4594d":"markdown","9944f59e":"markdown","e5454ed2":"markdown","f6144b2c":"markdown","f0ea116e":"markdown","49d58e6c":"markdown","b244d230":"markdown","1592ed58":"markdown","d81dfd4a":"markdown"},"source":{"94ca7fa6":"#Importing Necessary Libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nimport nltk\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix\n","1e1e71f9":"#Reading data frame\ndf_app=pd.read_csv('..\/input\/googleplaystore.csv')\ndf_app.head(5)","ec45dfbd":"print(\"The Google play store dataset contains %d rows and %d columns.\" %(df_app.shape[0],df_app.shape[1]))","f4ca9e89":"#Dropping Data frame which has NAN values\ndf_app=df_app.dropna()\nprint(\"The Google play store dataset contains %d rows and %d columns after dropping NAN.\" %(df_app.shape[0],df_app.shape[1]))","6316cfb6":"#Checking if there are any duplicates rows present in dataset that has same App\n# False= No duplicate\n# True=Duplicate\ndf_app.duplicated(subset='App').value_counts()","d6c6a00e":"#Dropping the duplicates\ndf_app=df_app.drop_duplicates(subset='App')","9177cc27":"print(\"The Google play store dataset contains %d rows and %d columns after dropping NAN and duplicates.\" %(df_app.shape[0],df_app.shape[1]))","947b3c8c":"#Checking the data types of dataset\ndf_app.dtypes","6b7f8f72":"#Converting the Installs column into integer\ndf_app['Installs']=df_app['Installs'].apply(lambda a:a.split('+')[0])   #Removes '+' from Installs\nse=df_app['Installs'].apply(lambda a:a.split(','))                      #Removes ',' from Installs \n\ndef add_list(x):\n    sum=' '\n    for i in range(0,len(x)):\n        sum+=x[i]\n    return int(sum)  \n\ndf_app['Installs']=se.apply(lambda a:add_list(a))                      #Convert str to int values \ndf_app.head(5)","7bb8024f":"#Removing Currency symbol from the Price and making it float\ndef remove_curr(x):\n    if x !='0':\n        x=x.split('$')[1]\n    return float(x)   \n\ndf_app['Price']=df_app['Price'].apply(lambda a:remove_curr(a))  #Removes '$' from Price\ndf_app.head(5)","de740581":"#Checking the number of apps that available based on type: Free v\/s Paid\ndf_app['Type'].value_counts()","ff43be93":"#Number of free and paid Apps available\nplt.figure(figsize=(10,10))\nplt.subplot(1,2,1)\nsns.countplot(x='Type',data=df_app)\nplt.title(\"Number of Apps Available: Free v\/s Paid\")\n\n#Most installed apps based on Category\nplt.subplot(1,2,2)\nsns.barplot(x='Type',y='Installs',data=df_app,ci=None)\nplt.title(\"Number of Apps installed: Free v\/s Paid\")\nplt.tight_layout()","60214314":"#Checking the number of Apps available on playstore based on category\nplt.figure(figsize=(12,12))\nsns.countplot(y='Category',data=df_app)\nplt.title(\"Number of Apps available based on Category\")","ae570c5c":"#Most installed apps based on Category\nplt.figure(figsize=(12,12))\nsns.barplot(x='Installs',y='Category',data=df_app,ci=None)\nplt.title(\"Number of Apps installed based on Category\")","339c3ef9":"#Apps available based on Content rating\nplt.figure(figsize=(10,10))\nsns.countplot(x='Content Rating',data=df_app,)\nplt.xticks(rotation=45)\nplt.title(\"Number of Apps available based on Content rating\")","6ab659df":"#Apps installed based on Content rating\nplt.figure(figsize=(10,10))\nsns.barplot(x='Content Rating',y='Installs',data=df_app,ci=None)\nplt.xticks(rotation=45)\nplt.title(\"Number of Apps installed based on Content rating\")","4ed30371":"#Android Version of the most available apps\nplt.figure(figsize=(15,15))\nsns.countplot(y='Android Ver',data=df_app)\nplt.title(\"Android Version's available\")","d564e395":"#Android  version of most installed apps\nplt.figure(figsize=(15,15))\nsns.barplot(x='Installs',y='Android Ver',data=df_app,ci=None)\nplt.title(\"Android Versions of installed Apps\")","8da69c4a":"#Ratings of Apps and the number of installed\nplt.figure(figsize=(15,15))\nsns.barplot(y='Installs',x='Rating',data=df_app,ci=None)\nplt.xticks(rotation=45)\nplt.title(\"Number of Apps and ratings \")","e59741c3":"#Most download  Paid apps\ndf_type=df_app[df_app['Type']=='Paid']\ndf_type.sort_values(by='Installs',ascending=False)['App'].head(20)","fbd29b44":"#Top 20 apps that are installed most in Category Communication\ndf_com=df_app[df_app['Category']=='COMMUNICATION']\ndf_com.sort_values(by='Installs',ascending=False)['App'].head(20)","913f3853":"#Top 20 apps that are installed most in Category Social\ndf_soc=df_app[df_app['Category']=='SOCIAL']\ndf_soc.sort_values(by='Installs',ascending=False)['App'].head(20)","c45f628d":"#Top 20 apps that are installed most in Category Video Player\ndf_vp=df_app[df_app['Category']=='VIDEO_PLAYERS']\ndf_vp.sort_values(by='Installs',ascending=False)['App'].head(20)","997844cd":"#Reading CSV file that contains reviews for Apps\ndf=pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')\ndf.head(10)","a42d5154":"#Size of data frame\ndf.shape","efc167ab":"#Class labels available\ndf['Sentiment'].value_counts()","762c209d":"#Checking if there are any missing values\nsns.heatmap(df.isna())","2fd30315":"#Dropping the missing values from the data frame\ndf=df.dropna()\ndf.shape","02305a32":"#Reviews and Labels\nreviews=df['Translated_Review']\nlabels=df['Sentiment']","f3173d34":"# User-defined function\ndef cleanhtml(sentence): #function to clean the word of any html-tags\n    cleanr = re.compile('<.*?>')\n    cleantext = re.sub(cleanr, ' ', sentence)\n    return cleantext\ndef cleanpunc(sentence): #function to clean the word of any punctuation or special characters\n    cleaned = re.sub(r'[?|!|\\'|\"|#]',r'',sentence)\n    cleaned = re.sub(r'[.|,|)|(|\\|\/]',r' ',cleaned)\n    return cleaned\n","4e8bca55":"#Stop words and Lemmatizer\nStop=set(stopwords.words('english'))\nWrdLem=WordNetLemmatizer()\nprint(Stop)","f08d1278":"#Cleaning the reviews(removing html tags,punctuation,Lemmatizations)\nCleaned_sent=[]\nfor sent in reviews:\n    r1=[]\n    sent=cleanhtml(sent)\n    sent=cleanpunc(sent)\n    sent=sent.lower()\n    for  word in sent.split():\n        if ((word.isalpha()) & (len(word)>2)):\n            if word not in Stop:\n                w=WrdLem.lemmatize(word)\n                r1.append(w)\n            else:\n                continue\n        else:\n            continue\n    str1 = (\" \".join(r1))        \n     \n    Cleaned_sent.append(str1)\n\ndf['Cleaned_text']=Cleaned_sent\ndf.head(5)    ","2204b57e":"#Defining some user defined function\n\ndef plot_cm_rates(y_test, Y_pred):\n\n    #Plotting Confusion matrix\n    x=confusion_matrix(y_test,Y_pred)\n    cm_df=pd.DataFrame(x,index=['Negative','Neutral','Positive'],columns=['Negative','Neutral','Positive'])\n\n    sns.set(font_scale=1,color_codes=True,palette='deep')\n    sns.heatmap(cm_df,annot=True,annot_kws={\"size\":16},fmt='d',cmap=\"YlGnBu\")\n    plt.xlabel(\"Predicted Label\")\n    plt.ylabel(\"True Label\")\n    plt.title(\"Confusion Matrix \")\n\n\ndef plot_miss_error(cv_scores,hyperparam):\n    \n    # changing to misclassification error\n    MSE = [1 - x for x in cv_scores]\n\n    # determining best k\n    optimal_k = hyperparam[MSE.index(min(MSE))]\n    print('\\nThe optimal value of hyper parameter is %f.' % optimal_k)\n    \n    # plot misclassification error vs K \n    plt.figure(figsize=(8,8))\n    plt.plot(hyperparam, MSE)\n\n    for xy in zip(hyperparam, np.round(MSE,3)):\n        plt.annotate('(%s, %s)' % xy, xy=xy, textcoords='data')\n\n    plt.xlabel('Values of Hyperparameter')\n    plt.ylabel('Misclassification Error')\n    plt.title(\"Missclassification error v\/s Hyperparameter\")\n    plt.show()\n    \n    return optimal_k\n\n\ndef train_test_accuracy(Classifier,X_train,y_train,X_test,y_test):\n    \n    #Train Model Fitting\n    Classifier.fit(X_train,y_train)\n    pred_train = Classifier.predict(X_train)\n    \n    #Train Accuracy\n    train_acc = accuracy_score(y_train, pred_train, normalize=True) * float(100)\n    \n    #Test Accuracy\n    pred_test = Classifier.predict(X_test)\n    test_acc = accuracy_score(y_test, pred_test, normalize=True) * float(100)\n    \n    #Printing train and test accuracy\n    print('\\n****Train accuracy = %f%%' % (train_acc))\n    print('\\n****Test accuracy =  %f%%' % (test_acc))\n    \n    #plotting Confusion matrix\n    plot_cm_rates(y_test,pred_test)","b42c4e73":"#Splitting the data into train and test\nX_train,X_test,y_train,y_test=train_test_split(df['Cleaned_text'].values,labels,test_size=0.3,random_state=0)","8ef9608d":"#Size of training and test data\nprint(\"The number of data points used in  training model is %d \"%(X_train.shape[0]))\nprint(\"The number of data points used in testing model is %d\" %(X_test.shape[0]))","0040cdab":"#Train Vector\nbow=CountVectorizer()\nX_train_bow=bow.fit_transform(X_train)\n\n#Test vector\nX_test_bow=bow.transform(X_test)","d0c85b86":"#Hyper-Parameter \nC=[10**-4,10**-2,10**0,10**2,10**4]","65c0709d":"#Hyper Parameter tunning\ncv_scores=[]\nfor c in C:\n    LR=LogisticRegression(C=c,solver='newton-cg',multi_class='ovr')\n    scores=cross_val_score(LR,X_train_bow,y_train,cv=3,scoring='accuracy')\n    cv_scores.append(scores.mean())\n    ","c13dbd10":"#Plotting Misclassification error\noptimal=plot_miss_error(cv_scores,C)","19c4e333":"#Model Fitting based on  optimal value and Plotting Confusion Matrix\nclassifier1=LogisticRegression(C=optimal,solver='newton-cg',multi_class='ovr')\n\ntrain_test_accuracy(classifier1,X_train_bow,y_train,X_test_bow,y_test)","4b7a4512":"#Hyper parameter \nlr=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]","3434ed9a":"#Hyper paramete tunning\ncv_scores=[]\nfor l in lr:\n    XGB=XGBClassifier(learning_rate=l)\n    scores=cross_val_score(XGB,X_train_bow,y_train,cv=3,scoring='accuracy')\n    cv_scores.append(scores.mean())\n    ","4b4c7d12":"#Plotting misclassification error\noptimal=plot_miss_error(cv_scores,lr)","faa318ec":"#Model Fitting based on  optimal value and plotting the confusion matrix\nclassifier1=XGBClassifier(learning_rate=optimal)\ntrain_test_accuracy(classifier1,X_train_bow,y_train,X_test_bow,y_test)","1854fbc8":"#Train vector\ntfidf=TfidfVectorizer()\nX_train_tfidf=tfidf.fit_transform(X_train)\n\n#Test Vector\nX_test_tfidf=tfidf.transform(X_test)","d8e6e0cc":"#Hyper Parameter tunning\ncv_scores=[]\nfor c in C:\n    LR=LogisticRegression(C=c,multi_class='ovr',solver='newton-cg')\n    scores=cross_val_score(LR,X_train_tfidf,y_train,cv=3,scoring='accuracy')\n    cv_scores.append(scores.mean())\n    ","d85fcc4a":"#Plotting misclassification error\noptimal=plot_miss_error(cv_scores,C)","5e1f4182":"#Model Fitting based on  optimal value and Confusion matrix\nclassifier1=LogisticRegression(C=optimal,multi_class='ovr',solver='newton-cg')\n\ntrain_test_accuracy(classifier1,X_train_tfidf,y_train,X_test_tfidf,y_test)","87ee32d4":"#Hyper parameter\ncv_scores=[]\nfor l in lr:\n    XGB=XGBClassifier(learning_rate=l)\n    scores=cross_val_score(XGB,X_train_tfidf,y_train,cv=3,scoring='accuracy')\n    cv_scores.append(scores.mean())\n    ","3306daea":"#Plotting misclassification error\noptimal=plot_miss_error(cv_scores,lr)","2fe695a2":"#Model Fitting based on  optimal value and Confusion Matrix\nclassifier1=XGBClassifier(learning_rate=optimal)\n\ntrain_test_accuracy(classifier1,X_train_tfidf,y_train,X_test_tfidf,y_test)","0c0f404a":"<h3> 2.3.7 Android Versions of installed Apps <\/h3>","6438a571":"<h3> 4.1 Reviews Pre-Processing <\/h3>","47ba2891":"<h3> 2.3.3 Number of Apps installed based on Category <\/h3>","5544574f":"<h3> 2.3.2 Number of Apps available based on Catgeory <\/h3>","4928d192":"<h3> With TF-IDF representation <\/h3>","2d5b496c":"<h3>3.3 Top 20 Apps that are most installed based on category Video player <\/h3>","7eda0bc0":"<h3> 4.4.1 Logistic Regression <\/h3>","2a821005":"<h3> 2.3.5 Number of Apps installed based on Content rating <\/h3>","afb6b56f":"<h3>3.2 Top 20 Apps that are most installed based on category Social <\/h3>","efefa7d2":"<h2> 2.3.0 Plotting <\/h2>","792bdfaa":"<h3> 4.5.2 XGB Classifier <\/h3>","0e07d2da":"<h3> 2.3.1 Total Number of Apps available and are installed <\/h3> ","3e25dd60":"<h2> 3.0 Top 3 most common category of Apps that are installed <\/h2> <br>\n        1. Communication  \n        2. Social  \n        3. Video Players ","bc144393":"<h3> 4.5.1 Logistic Regression <\/h3>","105296b8":"<h2> 4.0 Machine Learning Modelling <\/h2>","341f1cc1":"* Exploratory data analyis of the Google play store data was done.\n* Top Apps that are most downloaded is found out.\n* Machine Learning models are applied to the reviews of the App's to predict whether given review is Positive,Neutral or Negative.\n* Also hyper parameter tuning of the model was also done to find the best parameter. The details of it is shown below.","1c49000e":"<h2> 5.0 Conclusion: <\/h2>","e58b01b1":"<h3>2.3.9 Top 20 Most downloaded Paid Apps <\/h3>","12007252":"<b> Link-: <\/b> https:\/\/www.kaggle.com\/lava18\/google-play-store-apps\/home","710a29e4":"<table style=\"width:75%\">\n  <tr>\n    <th>Model<\/th>\n    <th>Hyperparameter<\/th> \n    <th>Train Accuracy(%)<\/th> \n    <th>Test Accuracy(%)<\/th>\n  <\/tr>\n  <tr>\n    <td>Logistic Regression<\/td>\n    <td>C=100<\/td> \n    <td>98.74<\/td> \n    <td>89.14<\/td>\n  <\/tr>\n  <tr>\n    <td>XGB Classifier<\/td>\n    <td>learning_rate=1<\/td> \n    <td>93.88<\/td>\n    <td>90.79<\/td>\n  <\/tr>\n<\/table>","a2d53877":"<h3> 4.3 Splitting the data into train and test split <\/h3>","c42dbebc":"<h2>2.1 Dropping Missing Values and Duplicates from data <\/h2>","5965e007":"<h3> 4.5.0 TF-IDF (Converting text to vectors) <\/h3>","8e8ba151":"<h3> 2.3.8 Ratings of Apps v\/s Number of installed <\/h3>","df872a37":"<h2> 2.2 Data Pre-processing <\/h2>","fc63d5a6":"<table style=\"width:75%\">\n  <tr>\n    <th>Model<\/th>\n    <th>Hyperparameter<\/th> \n    <th>Train Accuracy(%)<\/th> \n    <th>Test Accuracy(%)<\/th>\n  <\/tr>\n  <tr>\n    <td>Logistic Regression<\/td>\n    <td>C=1<\/td> \n    <td>96.77<\/td> \n    <td>91.82<\/td>\n  <\/tr>\n  <tr>\n    <td>XGB Classifier<\/td>\n    <td>learning_rate=1<\/td> \n    <td>93.11<\/td>\n    <td>91.09<\/td>\n  <\/tr>\n<\/table>","18a4594d":"<h3> 3.1 Top 20 apps that are most installed bases on category Communication <\/h3>","9944f59e":"<h3>4.4.0 Bag of Words (Converting text into vectors) <\/h3>","e5454ed2":"<h3> 2.3.4 Number of Apps available based on Content rating <\/h3>","f6144b2c":"<h2>2.0 Exploratory Data Analysis <\/h2>","f0ea116e":"<h1><center><u>Google Play Store Exploratory Data analysis and Modelling<\/u><\/center><\/h1> ","49d58e6c":"<h3>2.3.6 Android Versions available for most apps <\/h3>","b244d230":"> <h3> 4.4.2 XGB Classifier <\/h3>","1592ed58":"Since the columns 'Installs','Price' are string we convert them into integer and float format respectively.","d81dfd4a":"<h3> With Bag of Words represetation <\/h3>"}}