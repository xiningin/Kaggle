{"cell_type":{"ae2a5cfc":"code","a065fa33":"code","46edad0d":"code","4cc8c4a3":"code","e37761cc":"code","008806e3":"code","148b6beb":"code","3d41a526":"code","272a7020":"code","9e79a85d":"code","74f6ccca":"code","6323c929":"code","7a7bdc9a":"code","157f2623":"code","9e5ac41f":"code","ac4d57fb":"code","930b6348":"code","c3a8060c":"code","5b577732":"code","32d1cf4c":"code","9a2d2e53":"code","39e65092":"code","86529482":"code","1ac5ce2a":"code","22d2b994":"code","d86f369b":"code","3be1b146":"code","113990c4":"code","9847575f":"code","c31ebd62":"code","cf526c72":"code","486fe2be":"code","7d8fdf50":"code","15866271":"code","14d14229":"code","35f5cf94":"code","74aba363":"code","ce15ed65":"code","ee4bb49d":"code","0869aaf2":"code","8c776b8f":"markdown","352f0bc1":"markdown","e386e15a":"markdown","5b04f6d4":"markdown","44fc18ad":"markdown","af224dbf":"markdown","0ad8c3e1":"markdown","13c23c86":"markdown","a6bae86e":"markdown","4cfb46f9":"markdown","9898e462":"markdown","736d8f17":"markdown","355eb3a5":"markdown","4ed8695e":"markdown","fdbdb8fe":"markdown","ce3cb6c4":"markdown","b46e369c":"markdown","7beec316":"markdown","f3401f0d":"markdown","d4dc29dc":"markdown","d7096b65":"markdown","1b868ded":"markdown"},"source":{"ae2a5cfc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a065fa33":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport pyarrow.parquet as pq\nimport gc","46edad0d":"train_meta_df = pd.read_csv(\"..\/input\/metadata_train.csv\")\ntest_meta_df = pd.read_csv(\"..\/input\/metadata_test.csv\")","4cc8c4a3":"print(\"metadata_train shape is {}\".format(train_meta_df.shape))\nprint(\"metadata_test shape is {}\".format(test_meta_df.shape))","e37761cc":"train_meta_df.head(6)","008806e3":"test_meta_df.head()","148b6beb":"train_meta_df.isnull().sum()","3d41a526":"test_meta_df.isnull().sum()","272a7020":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 4))\nsns.countplot(x=\"target\", data=train_meta_df, ax=ax1)\nsns.countplot(x=\"target\", data=train_meta_df, hue=\"phase\", ax=ax2)","9e79a85d":"target_count = train_meta_df.target.value_counts()\nprint(\"negative(target=0) target: {}\".format(target_count[0]))\nprint(\"positive(target=1) target: {}\".format(target_count[1]))\nprint(\"positive data {:.3}\".format((target_count[1]\/(target_count[0]+target_count[1]))*100))","74f6ccca":"miss = train_meta_df.groupby([\"id_measurement\"]).sum().query(\"target != 3 & target != 0\")\nprint(\"not all postive or negative num: {}\".format(miss.shape[0]))\nmiss","6323c929":"print(\"id_measurement have {} uniques in train\".format(train_meta_df.id_measurement.nunique()))\nprint(\"id_measurement have {} uniques in test\".format(test_meta_df.id_measurement.nunique()))","7a7bdc9a":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 4))\ng = sns.catplot(x=\"id_measurement\", data=train_meta_df, ax=ax1, kind=\"count\")\nlabel = list(range(train_meta_df.id_measurement.min(), train_meta_df.id_measurement.max(), 1000))\nax1.set_xticks(label, [str(i) for i in label])\nax1.patch.set_facecolor('green')\nax1.patch.set_alpha(0.2)\nplt.close(g.fig)\ng = sns.catplot(x=\"id_measurement\", data=test_meta_df, ax=ax2, kind=\"count\")\nlabel = list(range(test_meta_df.id_measurement.min(), test_meta_df.id_measurement.max(), 1000))\nax2.set_xticks(label, [str(i) for i in label])\nax2.patch.set_facecolor('yellow')\nax2.patch.set_alpha(0.2)\nplt.close(g.fig)","157f2623":"train_meta_df.id_measurement.value_counts().describe()","9e5ac41f":"test_meta_df.id_measurement.value_counts().describe()","ac4d57fb":"print(\"phase have {} uniques in train\".format(train_meta_df.phase.unique()))\nprint(\"phase have {} uniques in test\".format(test_meta_df.phase.unique()))\nprint(\"they are phase numbering\")","930b6348":"gc.collect()\nsubset_train_df = pq.read_pandas('..\/input\/train.parquet').to_pandas()","c3a8060c":"nan = 0\nfor col in range(len(subset_train_df.columns)):\n    nan += np.count_nonzero(subset_train_df.loc[col, :].isnull())\nprint(\"train.parquet have {} nulls\".format(nan))\nprint(\"train.parquet shape is {}\".format(subset_train_df.shape))","5b577732":"subset_train_df.head()","32d1cf4c":"subset_train_df = subset_train_df.T","9a2d2e53":"print(\"train shape is {}\".format(subset_train_df.shape))","39e65092":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 5), sharey=True)\nfor i in range(3):\n    sns.lineplot(x=subset_train_df.columns, y=subset_train_df.iloc[i, :], ax=ax1, label=[\"phase:\"+str(train_meta_df.iloc[i, :].phase)])\nax1.set_xlabel(\"example of undamaged signal\", fontsize=18)\nax1.set_ylabel(\"amp\", fontsize=18)\nax1.patch.set_facecolor('blue')\nax1.patch.set_alpha(0.2)\nfor i in range(3, 6):\n    sns.lineplot(x=subset_train_df.columns, y=subset_train_df.iloc[i, :], ax=ax2, label=[\"phase:\"+str(train_meta_df.iloc[i, :].phase)])\nax2.set_xlabel(\"example of damaged signal\", fontsize=18)\nax2.set_ylabel(\"amp\", fontsize=18)\nax2.patch.set_facecolor('red')\nax2.patch.set_alpha(0.2)","86529482":"neg_index = train_meta_df.query(\"target == 0 & phase == 0\").head(9).index.values\npos_index = train_meta_df.query(\"target == 1 & phase == 0\").head(9).index.values","1ac5ce2a":"fig, axes = plt.subplots(3, 3, figsize=(20, 12), sharex=True, sharey=True)\nfig.suptitle(\"Undamaged examples\", size=18)\nfor x, index in enumerate(neg_index):\n    for phase in range(3):\n        sns.lineplot(x=subset_train_df.columns, y=subset_train_df.iloc[index+phase, :], ax=axes[x\/\/3, x%3])\n    axes[x\/\/3, x%3].patch.set_facecolor('blue')\n    axes[x\/\/3, x%3].patch.set_alpha(0.2)","22d2b994":"fig, axes = plt.subplots(3, 3, figsize=(20, 12), sharex=True, sharey=True)\nfig.suptitle(\"Damaged examples\", size=18)\nfor x, index in enumerate(pos_index):\n    for phase in range(3):\n        sns.lineplot(x=subset_train_df.columns, y=subset_train_df.iloc[index+phase, :], ax=axes[x\/\/3, x%3])\n        axes[x\/\/3, x%3].patch.set_facecolor('red')\n        axes[x\/\/3, x%3].patch.set_alpha(0.2)","d86f369b":"del subset_train_df, fig, axes\ngc.collect()","3be1b146":"INPUT_NUM = 3390\nTRAIN_NUM = 8712\nshapes = []\nnulls = 0","113990c4":"subset_test_df = pq.read_pandas('..\/input\/test.parquet', columns=[str(i) for i in range(TRAIN_NUM + INPUT_NUM)]).to_pandas()\nnan = 0\nfor col in range(len(subset_test_df.columns)):\n    nan += np.count_nonzero(subset_test_df.loc[col, :].isnull())\nshapes.append(subset_test_df.shape)\nnulls += nan\nprint(\"1st of the six test.parquet shape is {}\".format(subset_test_df.shape))\nprint(\"1st of the six test.parquet have {} nulls\".format(nan))","9847575f":"del subset_test_df\ngc.collect()","c31ebd62":"subset_test_df = pq.read_pandas('..\/input\/test.parquet', columns=[str(i) for i in range(TRAIN_NUM + INPUT_NUM, TRAIN_NUM + INPUT_NUM*2)]).to_pandas()\nnan = 0\nfor col in range(len(subset_test_df.columns)):\n    nan += np.count_nonzero(subset_test_df.loc[col, :].isnull())\nshapes.append(subset_test_df.shape)\nnulls += nan\nprint(\"2nd of the six test.parquet shape is {}\".format(subset_test_df.shape))\nprint(\"2nd of the six test.parquet have {} nulls\".format(nan))\n","cf526c72":"del subset_test_df\ngc.collect()","486fe2be":"subset_test_df = pq.read_pandas('..\/input\/test.parquet', columns=[str(i) for i in range(TRAIN_NUM + INPUT_NUM*2, TRAIN_NUM + INPUT_NUM*3)]).to_pandas()\nnan = 0\nfor col in range(len(subset_test_df.columns)):\n    nan += np.count_nonzero(subset_test_df.loc[col, :].isnull())\nshapes.append(subset_test_df.shape)\nnulls += nan\nprint(\"3rd of the six test.parquet shape is {}\".format(subset_test_df.shape))\nprint(\"3rd of the six test.parquet have {} nulls\".format(nan))\n","7d8fdf50":"del subset_test_df\ngc.collect()","15866271":"subset_test_df = pq.read_pandas('..\/input\/test.parquet', columns=[str(i) for i in range(TRAIN_NUM + INPUT_NUM*3, TRAIN_NUM + INPUT_NUM*4)]).to_pandas()\nnan = 0\nfor col in range(len(subset_test_df.columns)):\n    nan += np.count_nonzero(subset_test_df.loc[col, :].isnull())\nshapes.append(subset_test_df.shape)\nnulls += nan\nprint(\"4th of the six test.parquet shape is {}\".format(subset_test_df.shape))\nprint(\"4th of the six test.parquet have {} nulls\".format(nan))\n","14d14229":"del subset_test_df\ngc.collect()","35f5cf94":"subset_test_df = pq.read_pandas('..\/input\/test.parquet', columns=[str(i) for i in range(TRAIN_NUM + INPUT_NUM*4, TRAIN_NUM + INPUT_NUM*5)]).to_pandas()\nnan = 0\nfor col in range(len(subset_test_df.columns)):\n    nan += np.count_nonzero(subset_test_df.loc[col, :].isnull())\nshapes.append(subset_test_df.shape)\nnulls += nan\nprint(\"5th of the six test.parquet shape is {}\".format(subset_test_df.shape))\nprint(\"5th of the six test.parquet have {} nulls\".format(nan))\n","74aba363":"del subset_test_df\ngc.collect()","ce15ed65":"subset_test_df = pq.read_pandas('..\/input\/test.parquet', columns=[str(i) for i in range(TRAIN_NUM + INPUT_NUM*5, TRAIN_NUM + 20337)]).to_pandas()\nnan = 0\nfor col in range(len(subset_test_df.columns)):\n    nan += np.count_nonzero(subset_test_df.loc[col, :].isnull())\nshapes.append(subset_test_df.shape)\nnulls += nan\nprint(\"6th of the six test.parquet shape is {}\".format(subset_test_df.shape))\nprint(\"6th of the six test.parquet have {} nulls\".format(nan))","ee4bb49d":"print(\"train.parquet have {} nulls\".format(nulls))\nindex = 0\nfor shape in shapes:\n    index += shape[1]\nprint(\"train.parquet shape is ({}, {})\".format(index, shapes[0][0]))","0869aaf2":"print(\"test\")","8c776b8f":"<a name=\"[train\/test].parquet\"><\/a>\n# [train\/test].parquet\nThe signal data. Each **<font color=\"red\">column<\/font>** contains one signal; 800,000 int8 measurements as exported with pyarrow.parquet version 0.11.  \n<font color=\"red\">Please note that this is different than our usual data orientation of one row per observation; <\/font>  \nthe switch makes it possible loading a subset of the signals efficiently.   \nIf you haven't worked with Apache Parquet before, please refer to either the Python data loading starter kernel.  \n\n<a name=\"train.parquet\"><\/a>\n# train.parquet\n<a name=\"p-Overview\"><\/a>\n## Overview","352f0bc1":"they have **no** nulls","e386e15a":"<a name=\"checknull\"><\/a>\n## check null","5b04f6d4":"**Thank you for watching!**  \n## In Progress\n* Make simple model\n* serch more effective feature","44fc18ad":"<font color=\"red\">  fault data is too small <\/font>  \nTarget is almost uniformly distributed in all phases  ","af224dbf":"<a name=\"checktarget\"><\/a>\n## check target\ntarget: 0 if the power line is undamaged, 1 if there is a fault.","0ad8c3e1":"<a name=\"checkwaves\"><\/a>\n## check waves","13c23c86":"### 2\/6 (3390\uff5e6779 columns)","a6bae86e":"<a name=\"checkmetadata\"><\/a>\n## check metadata\n### id_measurement","4cfb46f9":"<a name=\"metadata_[train\/test].csv\"><\/a>\n# metadata_[train\/test].csv\n* id_measurement: the ID code for a trio of signals recorded at the same time.\n* signal_id: the foreign key for the signal data.\n* phase: the phase ID code within the signal trio. The phases may or may not all be impacted by a fault on the line.\n* target: 0 if the power line is undamaged, 1 if there is a fault.  (only train)\n<a name=\"Overview\"><\/a>\n## Overview","9898e462":"# my first eda \nPlease tell me if I make mistake  \n## Contents\n* [metadata_train\/test.csv](#metadata_[train\/test].csv)  \n    * [Overview](#Overview)\n    * [check null](#checknull)\n    * [check target](#checktarget)\n    * [check metadata](#checkmetadata)\n* [train\/test.parquet](#[train\/test].parquet)\n    * [train.parquet](#train.parquet)\n        * [Overview](#p-Overview)\n        * [check waves](#checkwaves)\n    * [test.parquet](#test.parquet)\n","736d8f17":"we can see three-phase and some noise  \nI don't see big difference  \nIs this difference is big noise?  \nso let's look more data  ","355eb3a5":"I cannot tell them apart.  \nIs this noise or dameged?  \nDid I maked a mistake in plot.....?  ","4ed8695e":"please care Each **<font color=\"red\">column<\/font>**  contains one signal !  \nso I do transpose this data  ","fdbdb8fe":"**Data with the same id is not always all positive or negative.**","ce3cb6c4":"### 6\/6 (16950\uff5e20336 columns)","b46e369c":"id_measurement:  3 data per one unique id  \nbecause  electric transmission lines have three-phase alternating current(maybe)  \n### phase","7beec316":"### 5\/6 (13560\uff5e16949 columns)","f3401f0d":"### 3\/6 (6780\uff5e10169 columns)","d4dc29dc":"### 4\/6 (10169\uff5e13559 columns)","d7096b65":"<a name=\"test.parquet\"><\/a>\n## test.parquet\ntest.parquet is too big (20337, 800000)  \nso I will read test data in 6 parts  \n### 1\/6 (0\uff5e3389 columns)","1b868ded":"# Let's look parquet data\nhow to read parquet files  \nref: https:\/\/www.kaggle.com\/sohier\/reading-the-data-with-python"}}