{"cell_type":{"dabfd02b":"code","ac6ef29a":"code","c33eda73":"code","664a8e4d":"code","1b105456":"code","a9d207ad":"code","61acca51":"code","35be7d00":"code","3151ce21":"code","f59cd80e":"code","cd004c17":"code","634e4293":"code","8a38cdb4":"code","0d3594ef":"code","fec15b9d":"code","4f621738":"code","4b111620":"code","d214ccd3":"code","1f99421e":"code","bab5cc5e":"code","75e7697f":"code","267c6c83":"markdown","3bd6bce8":"markdown"},"source":{"dabfd02b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ac6ef29a":"from scipy.stats import randint\nimport seaborn as sns # used for plot interactive graph. \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom io import StringIO\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import chi2\nfrom IPython.display import display\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","c33eda73":"df=pd.read_csv('\/kaggle\/input\/mbti-personality-types-500-dataset\/MBTI 500.csv')","664a8e4d":"print(df.head())\nprint(df.shape)","1b105456":"df1 = df.copy()","a9d207ad":"df1 = df1[pd.notnull(df1['posts'])]","61acca51":"df1.shape","35be7d00":"total = df1['posts'].notnull().sum()\nround((total\/len(df)*100),1)","3151ce21":"pd.DataFrame(df.type.unique()).values","f59cd80e":"df2 = df1.sample(5000, random_state=1).copy()","cd004c17":"df2['category_id'] = df2['type'].factorize()[0]\ncategory_id_df = df2[['type', 'category_id']].drop_duplicates()\n\n\ncategory_to_id = dict(category_id_df.values)\nid_to_category = dict(category_id_df[['category_id', 'type']].values)\n\ndf1.head()","634e4293":"fig = plt.figure(figsize=(8,6))\ncolors = ['grey','grey','grey','grey','grey','grey','grey','grey','darkblue','darkblue','darkblue','darkblue','darkblue','darkblue','darkblue','darkblue']\ndf2.groupby('type').posts.count().sort_values().plot.barh(ylim=0, color=colors, title= 'COUNT OF EACH CATEGRIES')\nplt.xlabel('Number of Posts', fontsize = 10)","8a38cdb4":"tfidf = TfidfVectorizer(sublinear_tf=True, min_df=5,\n                        ngram_range=(1, 2), \n                        stop_words='english')\n\n\nfeatures = tfidf.fit_transform(df2.posts).toarray()\n\nlabels = df2.category_id\n\nprint(\"Each of the %d posts is represented by %d features (TF-IDF score of unigrams and bigrams)\" %(features.shape))","0d3594ef":"N = 3\nfor type, category_id in sorted(category_to_id.items()):\n  features_chi2 = chi2(features, labels == category_id)\n  indices = np.argsort(features_chi2[0])\n  feature_names = np.array(tfidf.get_feature_names())[indices]\n  unigrams = [v for v in feature_names if len(v.split(' ')) == 1]\n  bigrams = [v for v in feature_names if len(v.split(' ')) == 2]\n  print(\"\\n==> %s:\" %(type))\n  print(\"  * Most Correlated Unigrams are: %s\" %(', '.join(unigrams[-N:])))\n  print(\"  * Most Correlated Bigrams are: %s\" %(', '.join(bigrams[-N:])))","fec15b9d":"X = df2['posts']\ny = df2['type']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.25,\n                                                    random_state = 0)","4f621738":"models = [\n    RandomForestClassifier(n_estimators=100, max_depth=5, random_state=0),\n    LinearSVC(),\n    MultinomialNB(),\n    LogisticRegression(random_state=0),\n]\n\nCV = 5\ncv_df = pd.DataFrame(index=range(CV * len(models)))\n\nentries = []\nfor model in models:\n  model_name = model.__class__.__name__\n  accuracies = cross_val_score(model, features, labels, scoring='accuracy', cv=CV)\n  for fold_idx, accuracy in enumerate(accuracies):\n    entries.append((model_name, fold_idx, accuracy))\n    \ncv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', 'accuracy'])","4b111620":"mean_accuracy = cv_df.groupby('model_name').accuracy.mean()\nstd_accuracy = cv_df.groupby('model_name').accuracy.std()\n\nacc = pd.concat([mean_accuracy, std_accuracy], axis= 1, \n          ignore_index=True)\nacc.columns = ['Mean Accuracy', 'Standard deviation']\nacc","d214ccd3":"plt.figure(figsize=(8,5))\nsns.boxplot(x='model_name', y='accuracy', \n            data=cv_df, \n            color='lightblue', \n            showmeans=True)\nplt.title(\"MEAN ACCURACY (cv = 5)\\n\", size=14)","1f99421e":"X_train, X_test, y_train, y_test,indices_train,indices_test = train_test_split(features, \n                                                               labels, \n                                                               df2.index, test_size=0.25, \n                                                               random_state=1)\nmodel = LinearSVC(random_state=0)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","bab5cc5e":"print('\\t\\t\\t\\tCLASSIFICATIION METRICS\\n')\nprint(metrics.classification_report(y_test, y_pred, \n                                    target_names= df2['type'].unique()))","75e7697f":"conf_mat = confusion_matrix(y_test, y_pred)\nfig, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(conf_mat, annot=True, cmap=\"Blues\", fmt='d',\n            xticklabels=category_id_df.type.values, \n            yticklabels=category_id_df.type.values)\nplt.ylabel('Actual')\nplt.xlabel('Predicted')\nplt.title(\"CONFUSION MATRIX - LinearSVC\\n\", size=16);","267c6c83":"# I refered to below notebook to try TFIDF and ML classification model https:\/\/www.kaggle.com\/selener\/multi-class-text-classification-tfidf. Thank you very much for sharing !","3bd6bce8":"![MyersBriggsTypes.png](attachment:527d04a5-b7db-47e2-90dc-80fdf05211a4.png)\n\nimage from https:\/\/ja.wikipedia.org\/wiki\/MBTI"}}