{"cell_type":{"32617180":"code","6b9af6a6":"code","81543ae0":"code","780387cb":"code","b59e198d":"markdown","2b7a36ca":"markdown","cabbbb21":"markdown","a128a7e3":"markdown","599a1125":"markdown","fa352dd0":"markdown","6ed77511":"markdown","156990f0":"markdown"},"source":{"32617180":"import numpy as np\n\n# implement our activation function (Sigmoid function)\n\ndef sigmoid(x):\n    return 1 \/ (1+np.exp(-x))","6b9af6a6":"\ndef segmoid_derivative(x):\n    return x * (1 - x)","81543ae0":"training_inputs = np.array([\n                [0,0,1], \n                [1,1,1],\n                [1,0,1],\n                [0,1,1]\n            ])\n\ntraining_outputs = np.array([[0, 1, 1, 0]]).T\n\nnp.random.seed(1)\n\n\nsynaptic_weights = 2 * np.random.random((3, 1)) - 1\n\nprint('Random Synaptic Weights are: \\n', synaptic_weights)","780387cb":"# Note: try to increase the number of iterations to get best results\nfor iteration in range(20000):\n   \n    input_layer = training_inputs\n    \n    outputs = sigmoid(np.dot(input_layer, synaptic_weights))\n    \n    error = (training_outputs - outputs)\n    \n    adjustents = error * segmoid_derivative(outputs)\n    \n    synaptic_weights += np.dot(input_layer.T, adjustents)\n    \n    \n    \nprint('Outputs after training: \\n', outputs)\n","b59e198d":"![sigmod_drevitave.png](attachment:b381cd01-e9ab-4d7d-bb84-390787dd232f.png)","2b7a36ca":"\n\n## Our loop for calculate the answer","cabbbb21":"## as you could see our predict is pretty close to the correct answer","a128a7e3":"![training_process.png](attachment:e392a339-6f15-430b-81fd-126ce673bb61.png)","599a1125":"1. Create The Input Training Samples\n2. Create Output Training Samples\n3. Init Random Weights","fa352dd0":"Implement Sigmoid","6ed77511":"## As you noticed from the above image we need to calculate the drivative for the sigmoid function","156990f0":"![problemset.png](attachment:50de8f25-10b8-4330-b981-4790b74d56c7.png)\n\n\n# NN structure\n\n![preceptron.png](attachment:048cbebc-3c84-4e89-823f-2064c4298ec2.png)\n\n\n# Activation Function We are going to use\n\n![activation_function.png](attachment:2bff38c6-b581-462d-a6f1-27b08a38d838.png)\n\n"}}