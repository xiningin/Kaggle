{"cell_type":{"14fb714b":"code","b10d9d7d":"code","86d577e7":"code","ca10e30b":"code","a3f21ca5":"code","6dc0e040":"code","cf801521":"code","23041e4a":"code","b25e2cd0":"code","3046de31":"code","674faf5b":"code","aced28ff":"code","2ebfe271":"code","c8d39530":"code","799c2745":"code","bd6b98c0":"code","31cbfe11":"code","8f24d83b":"code","2286b7dc":"code","e3116241":"code","b2c4958b":"code","3b17b71e":"code","42fda7eb":"code","f20528f5":"code","4000f6d1":"code","db376195":"code","298d489e":"code","70ae14c6":"code","7db7168e":"code","540a2b55":"code","f4db3a32":"code","c7793948":"code","a7198b10":"code","dcd2e440":"code","d5a93d96":"code","3d9f1cb9":"code","f973d8c4":"code","84e17441":"code","c751f465":"code","316fa8b4":"code","aa8e047c":"code","164fcf09":"code","1937cabc":"code","9a710442":"code","95b3b13c":"code","9ceadeb2":"code","4923aaad":"code","7e1b2078":"code","3fb6a4d3":"code","e65453c4":"code","4f71c9b6":"code","03e3c469":"code","b485e138":"code","deab55bf":"code","ba6b0d96":"code","275c52a2":"markdown","1d855ae8":"markdown","880be3bb":"markdown","ba66d88d":"markdown","ed0e0fd4":"markdown","88524861":"markdown","b0558029":"markdown","b2a5ea83":"markdown","244565dd":"markdown","fd50de6b":"markdown","f48a4339":"markdown"},"source":{"14fb714b":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","b10d9d7d":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           \nTEST_DIR = DATA_DIR + '\/test'                             \n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       \nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv' ","86d577e7":"data_df = pd.read_csv(TRAIN_CSV)\ndata_df.head()","ca10e30b":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","a3f21ca5":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)","6dc0e040":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","cf801521":"imagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n\ntrain_tfms = T.Compose([\n    T.RandomCrop(512, padding=8, padding_mode='reflect'),\n#     T.RandomResizedCrop(256, scale=(0.5,0.9), ratio=(1, 1)), \n#     T.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),\n    T.RandomHorizontalFlip(), \n    T.RandomRotation(10),\n    T.ToTensor(), \n#     T.Normalize(*imagenet_stats,inplace=True), \n    T.RandomErasing(inplace=True)\n])\n\nvalid_tfms = T.Compose([\n#     T.Resize(256), \n    T.ToTensor(), \n#     T.Normalize(*imagenet_stats)\n])","23041e4a":"np.random.seed(42)\nmsk = np.random.rand(len(data_df)) < 0.9\n\ntrain_df = data_df[msk].reset_index()\nval_df = data_df[~msk].reset_index()","b25e2cd0":"train_ds = HumanProteinDataset(train_df, TRAIN_DIR, transform=train_tfms)\nval_ds = HumanProteinDataset(val_df, TRAIN_DIR, transform=valid_tfms)\nlen(train_ds), len(val_ds)","3046de31":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))","674faf5b":"show_sample(*train_ds[1541])","aced28ff":"batch_size = 64","2ebfe271":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, \n                      num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, \n                    num_workers=2, pin_memory=True)","c8d39530":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","799c2745":"show_batch(train_dl, invert=True)","bd6b98c0":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","31cbfe11":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.4f}, train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_score']))","8f24d83b":"resnet18 = models.resnet50()\nresnet18","2286b7dc":"class ProteinResnet(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","e3116241":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","b2c4958b":"device = get_default_device()\ndevice","3b17b71e":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","42fda7eb":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","f20528f5":"model = to_device(ProteinResnet(), device)","4000f6d1":"history = [evaluate(model, val_dl)]\nhistory","db376195":"model.freeze()","298d489e":"epochs = 13\nmax_lr = 0.001\ngrad_clip = 0.1\nweight_decay = 1e-6\nopt_func = torch.optim.Adam","70ae14c6":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","7db7168e":"model.unfreeze()","540a2b55":"%%time\nhistory += fit_one_cycle(epochs, 0.001, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","f4db3a32":"train_time='22:00'","c7793948":"def plot_scores(history):\n    scores = [x['val_score'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('score')\n    plt.title('F1 score vs. No. of epochs');","a7198b10":"plot_scores(history)","dcd2e440":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","d5a93d96":"plot_losses(history)","3d9f1cb9":"def plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","f973d8c4":"plot_lrs(history)","84e17441":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","c751f465":"test_df = pd.read_csv(TEST_CSV)\ntest_dataset = HumanProteinDataset(test_df, TEST_DIR, transform=valid_tfms)","316fa8b4":"img, target = test_dataset[0]\nimg.shape","aa8e047c":"predict_single(test_dataset[100][0])","164fcf09":"predict_single(test_dataset[74][0])","1937cabc":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=3, pin_memory=True), device)","9a710442":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","95b3b13c":"test_preds = predict_dl(test_dl, model)","9ceadeb2":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.sample(20)","4923aaad":"sub_fname = 'submission.csv'","7e1b2078":"submission_df.to_csv(sub_fname, index=False)","3fb6a4d3":"weights_fname = 'protein-resnet.pth'\ntorch.save(model.state_dict(), weights_fname)","e65453c4":"!pip install jovian --upgrade --quiet","4f71c9b6":"import jovian","03e3c469":"jovian.reset()\njovian.log_hyperparams(arch='resnet34', \n                       epochs=2*epochs, \n                       lr=max_lr, \n                       scheduler='one-cycle', \n                       weight_decay=weight_decay, \n                       grad_clip=grad_clip,\n                       opt=opt_func.__name__)","b485e138":"jovian.log_metrics(val_loss=history[-1]['val_loss'], \n                   val_score=history[-1]['val_score'],\n                   train_loss=history[-1]['train_loss'],\n                   time=train_time)","deab55bf":"project_name='protein-advanced'","ba6b0d96":"jovian.commit(project=project_name, environment=None, outputs=[weights_fname])","275c52a2":"Now, unfreeze and train some more.","1d855ae8":"First, freeze the ResNet layers and train some epochs. This only trains the final layer to start classifying the images.","880be3bb":"## Preparing the Data","ba66d88d":"[Learn about ResNets.](https:\/\/towardsdatascience.com\/an-overview-of-resnet-and-its-variants-5281e2f56035)\n\nCheck out torchvision models: https:\/\/pytorch.org\/docs\/stable\/torchvision\/models.html","ed0e0fd4":"## Making predictions and submission","88524861":"## Save and Commit","b0558029":"## Model - Transfer Learning","b2a5ea83":"### Data augmentations","244565dd":"### DataLoaders","fd50de6b":"# Human Protein Multi Label Image Classification - Transfer Learning & Regularization\n\n\nHow a CNN learns ([source](https:\/\/developer.nvidia.com\/discover\/convolutional-neural-network)):\n\n![cnn-learning](https:\/\/developer.nvidia.com\/sites\/default\/files\/pictures\/2018\/convolutional_neural_network.png)\n\nLayer visualization ([source](https:\/\/medium.com\/analytics-vidhya\/deep-learning-visualization-and-interpretation-of-neural-networks-2f3f82f501c5)):\n\n![cnn-learning](https:\/\/miro.medium.com\/max\/1610\/1*WysCJ6Ynecvviwctt6WDlQ.png)\n\n\nTransfer learning ([source](https:\/\/mc.ai\/transfer-learning-with-deep-learning-machine-learning-techniques\/)):\n![transfer-learning](https:\/\/miro.medium.com\/max\/1000\/1*LUFUl_8fqS97nUzpcFjgWw.png)\n\nThis is a starter notebook for the competition [Zero to GANs - Human Protein Classification](https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g). It incorporates transfer learning, and other techniques from https:\/\/jovian.ml\/aakashns\/05b-cifar10-resnet","f48a4339":"## Training"}}