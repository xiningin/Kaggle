{"cell_type":{"5ac14ada":"code","b4cc4ae7":"code","1deb5473":"code","793bfb36":"code","84790c5c":"code","aa215521":"code","13287580":"code","c40ef7df":"code","055be79e":"code","6061c1ec":"code","89bddff9":"code","6bf71dbe":"code","8e2396de":"code","62d02b7f":"code","27dddc9b":"code","9313835e":"code","64dc99ac":"code","13bb8abb":"code","d56302b1":"code","b86d6858":"code","8476c762":"code","c3e4caf9":"code","e7d92e35":"markdown","f663b84a":"markdown","cb2ee8d5":"markdown","57f377bf":"markdown","6ea0eaf0":"markdown","bc18495e":"markdown"},"source":{"5ac14ada":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\ncolor_pallete = ['#5893d4', '#f7b633']\nsns.set_palette(color_pallete, 2)\nsns.set_style(\"whitegrid\")\n\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, mean_absolute_error, mean_squared_error","b4cc4ae7":"df = pd.read_csv('..\/input\/diabetes.csv')\ndf.head()","1deb5473":"df.info()","793bfb36":"df.describe()","84790c5c":"df.isnull().sum()","aa215521":"plt.figure(figsize=(10,8))\nsns.heatmap(df.corr(), annot=True, cmap='RdBu', vmin=-1, vmax=1)\nplt.show()","13287580":"sns.pairplot(df, hue='Outcome')\nplt.show()","c40ef7df":"for i in ['Pregnancies', 'Glucose', 'BloodPressure', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Insulin']:\n    sns.catplot(x=\"Outcome\", y=i, kind=\"box\", data=df, )\n    plt.plot()","055be79e":"for i in ['Pregnancies', 'Glucose', 'BloodPressure', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Insulin']:\n    plt.figure(figsize=(15, 5))\n    ax = sns.kdeplot(df[df['Outcome']==0][i], shade=True)\n    ax = sns.kdeplot(df[df['Outcome']==1][i], shade=True)\n    ax.set_xlabel(i)\n    plt.legend(['Absence', 'Presence'])\n    plt.show()","6061c1ec":"print('number of entries with value 0')\nfor i in ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']:\n    print(i, ':', df[df[i]==0].shape[0])","89bddff9":"df = df.drop(df[(df.Glucose == 0) | (df.BloodPressure == 0) | (df.BMI == 0)].index)","6bf71dbe":"for i in ['SkinThickness']:\n    df = df.drop([i], axis=1)\ndf.head()","8e2396de":"'''df['insulin_taking'] = ['no' if i==0 else 'yes' for i in df['Insulin']]\nprint(df.head())\nsns.countplot(x='Outcome', hue='insulin_taking', data=df)'''","62d02b7f":"# df.columns","27dddc9b":"mms = MinMaxScaler()\n\nfor i in ['Pregnancies', 'Glucose', 'BloodPressure', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Insulin']:\n    df[i] = df[i].astype('float64')\n    df[i] = mms.fit_transform(df[i].values.reshape(-1,1))\n    \ndf.head()","9313835e":"X = df.drop(['Outcome'], axis=1)\ny = df['Outcome']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","64dc99ac":"nbc = GaussianNB()\nnbc.fit(X_train, y_train)\nnbc_pred = nbc.predict(X_test)\n\nscores = cross_val_score(nbc, X, y, cv=10)\naccuracy = np.mean(scores)\n\nprint(scores)\nprint(accuracy)\nprint(confusion_matrix(nbc_pred, y_test))","13bb8abb":"lr = LogisticRegression(solver='lbfgs')\nlr.fit(X_train, y_train)\nlr_pred = lr.predict(X_test)\n\nscores = cross_val_score(lr, X, y, cv=10)\naccuracy = np.mean(scores)\n\nprint(scores)\nprint(accuracy)\nprint(confusion_matrix(nbc_pred, y_test))","d56302b1":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ndt_pred = dt.predict(X_test)\n\nscores = cross_val_score(dt, X, y, cv=10)\naccuracy = np.mean(scores)\n\nprint(scores)\nprint(accuracy)\nprint(confusion_matrix(nbc_pred, y_test))","b86d6858":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier()\n\nhyperparameters = {\n    \"n_neighbors\": range(1,50,2)\n}\n\ngrid = GridSearchCV(model, param_grid=hyperparameters, cv=10)\ngrid.fit(X, y)\n\nbest_params = grid.best_params_\nbest_score = grid.best_score_\n\nbest_model = grid.best_estimator_\npred = best_model.predict(X_test)\n\nprint(grid.best_params_)\nprint(grid.best_score_)\nprint(confusion_matrix(pred, y_test))","8476c762":"model = RandomForestClassifier(random_state=1)\n\nhyperparameters = {\"criterion\": [\"entropy\", \"gini\"],\n                   \"max_depth\": [5, 10],\n                   \"max_features\": [\"log2\", \"sqrt\"],\n                   \"min_samples_leaf\": [1, 5],\n                   \"min_samples_split\": [3, 5],\n                   \"n_estimators\": [6, 9]\n}\n\ngrid = GridSearchCV(model, param_grid=hyperparameters, cv=10)\ngrid.fit(X, y)\n\nbest_params = grid.best_params_\nbest_score = grid.best_score_\n\nbest_model = grid.best_estimator_\npred = best_model.predict(X_test)\n\nprint(grid.best_params_)\nprint(grid.best_score_)\nprint(confusion_matrix(pred, y_test))","c3e4caf9":"import eli5\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(nbc, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","e7d92e35":"# Visualization","f663b84a":"# Train Test Split","cb2ee8d5":"# Import libraries","57f377bf":"# Model","6ea0eaf0":"# Preprocessing","bc18495e":"# Import Dataset"}}