{"cell_type":{"3a240094":"code","e42879e5":"code","a3e90acf":"code","0d57429a":"code","db9f15c1":"code","b97be16a":"code","b5f520f8":"code","b1330f6f":"code","c88a5e55":"code","14145d51":"code","4f86a318":"code","4b879576":"code","13ca84fe":"code","d043c730":"code","ef2c2be2":"code","a280383a":"code","0fe45fb1":"code","1caf14aa":"code","3b8c1d52":"code","b54523ca":"code","1461558a":"code","77aa5b5a":"code","276543ea":"code","ec3588d8":"code","6649c7f2":"code","b1726870":"code","5b33c2b0":"code","e14d94b3":"markdown","3d4a73ce":"markdown","4e91099d":"markdown","eb94373a":"markdown","b9d99985":"markdown","c2d540e5":"markdown","9f233e48":"markdown","b6cf5256":"markdown","4793927a":"markdown","80903acc":"markdown","87ccb42c":"markdown"},"source":{"3a240094":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e42879e5":"directory = \"\/kaggle\/input\/pokemonclassification\/PokemonData\"\nlabels = os.listdir(directory)\nnb = len(labels)\nprint(labels)","a3e90acf":"print(nb)","0d57429a":"import random\nimport tensorflow as tf\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D, Conv2D, MaxPooling2D\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.python.keras.callbacks import ModelCheckpoint, EarlyStopping","db9f15c1":"stored = {}\ndef input_target_split(train_dir,labels):\n    dataset = []\n    count = 0\n    for label in labels:\n        folder = os.path.join(train_dir,label)\n        for image in os.listdir(folder):\n            \n#             print(os.path.join(folder,image))\n            try:\n                img=load_img(os.path.join(folder,image), target_size=(150,150))\n                img=img_to_array(img)\n                img=img\/255.0\n                dataset.append((img,count))\n            except:\n                pass\n\n        print(f'\\rCompleted: {label}',end='')\n        stored[label] = count\n        count+=1\n    random.shuffle(dataset)\n    X, y = zip(*dataset)\n    \n    return np.array(X),np.array(y)","b97be16a":"X, y = input_target_split(directory,labels)","b5f520f8":"len(stored)","b1330f6f":"import matplotlib.pyplot as plt\n\nplt.figure(figsize = (15 , 9))\nn = 0\nfor i in range(15):\n    n+=1\n    plt.subplot(5 , 5, n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.3)\n    plt.imshow(X[i])\n    plt.title(f'Label: {labels[y[i]]}')","c88a5e55":"np.unique(y)","14145d51":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.22, random_state=42)\nprint(np.unique(y_train,return_counts=True),np.unique(y_test,return_counts=True))","4f86a318":"datagen = ImageDataGenerator(horizontal_flip=True,\n                             vertical_flip=True,\n                             rotation_range=20,\n                             zoom_range=0.2,\n                             width_shift_range = 0.2,\n                             height_shift_range = 0.2,\n                             shear_range=0.1,\n                             fill_mode=\"nearest\")\n\ntestgen = ImageDataGenerator()\n\ndatagen.fit(X_train)\ntestgen.fit(X_test)","4b879576":"y_train = np.eye(nb)[y_train]\ny_test = np.eye(nb)[y_test]","13ca84fe":"from tensorflow.keras.applications import DenseNet201\n\nimg_size = 150\nbase_model = DenseNet201(include_top = False,\n                         weights = 'imagenet',\n                         input_shape = (img_size,img_size,3))\n\nfor layer in base_model.layers[:675]:\n    layer.trainable = False\n\nfor layer in base_model.layers[675:]:\n    layer.trainable = True","d043c730":"model = Sequential()\nmodel.add(base_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(nb, activation=tf.nn.softmax))\nmodel.compile(optimizer = tf.keras.optimizers.Adam(lr = 0.001), loss = 'categorical_crossentropy', metrics=['accuracy'])","ef2c2be2":"filepath= \"model_pokemon.h5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max', save_weights_only=False)\n\nearly_stopping = EarlyStopping(monitor='val_loss',min_delta = 0, patience = 5, verbose = 1, restore_best_weights=True)\n\nlearning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.2, \n                                            min_lr=0.00001)\n\ncallbacks_list = [\n        checkpoint,\n        early_stopping,\n        learning_rate_reduction\n    ]","a280383a":"hist = model.fit_generator(datagen.flow(X_train,y_train,batch_size=32),\n                                        validation_data=testgen.flow(X_test,y_test,batch_size=32),\n                                        epochs=50,\n                                        callbacks=callbacks_list)","0fe45fb1":"y_pred = model.predict(X_test)\npred = np.argmax(y_pred,axis=1)\nprint(pred)","1caf14aa":"ground = np.argmax(y_test,axis=1)","3b8c1d52":"from sklearn.metrics import classification_report\n\nprint(classification_report(ground,pred,target_names = labels))","b54523ca":"y_pred","1461558a":"y_pred = np.argmax(y_pred,axis=1)\ny_pred","77aa5b5a":"y_true = np.argmax(y_test,axis=1)\ny_true","276543ea":"plt.figure(figsize = (15 , 9))\nn = 0\nfor i in range(len(X_test)):\n    if y_pred[i] != y_true[i]:\n        n+=1\n        if n <= 25:\n            plt.subplot(5 , 5, n)\n            plt.subplots_adjust(hspace = 0.8 , wspace = 0.3)\n            plt.imshow(X_test[i])\n            plt.title(f'Actual: {labels[y_true[i]]}\\nPredicted: {labels[y_pred[i]]}')","ec3588d8":"import cv2\n\nimage = cv2.imread('\/kaggle\/input\/snorlaximage\/2143-Shiny-Snorlax.png')\nimg = cv2.resize(image, (150, 150))\nimg=img\/255.0\nimg = np.expand_dims(img, axis=0)\npred = model.predict(img)\nlabel = np.argmax(pred,axis=1)\nprint(labels[label[0]])","6649c7f2":"import requests","b1726870":"pokemon = labels[label[0]].lower()\nurl = f'https:\/\/pokeapi.co\/api\/v2\/pokemon\/{pokemon}'\nr = requests.get(url)","5b33c2b0":"print(\"Name: \",r.json()['name'])\nprint(\"Base Experience: \",r.json()['base_experience'])\nprint(\"Height: \",r.json()['height'],'m')\nprint(\"Weight: \",r.json()['weight'],'kg')","e14d94b3":"# Converting images to Numpy arrays","3d4a73ce":"# Creating Labels","4e91099d":"# Classification Report","eb94373a":"# Freezing the DenseNet201 model upto layer 675","b9d99985":"# Early stopping conditions in case model accuracy does not improve ","c2d540e5":"* Changed their dimensions to 150 x 150\n* Normalized the pixel values","9f233e48":"# Visualizing the images and their True labels","b6cf5256":"# Visualizing the wrongly classified images","4793927a":"# Train Test Split and encoding of labels","80903acc":"# Feedforward network for classifying 150 pokemon","87ccb42c":"# Pipelining the classification results to the Pokemon API"}}