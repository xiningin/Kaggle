{"cell_type":{"da79c7de":"code","13c1b248":"code","571be6d0":"code","b592be12":"code","3cd99889":"code","f189aa3c":"code","7e7d595f":"code","fcc4b397":"code","cad07fa1":"code","14e88848":"code","cc8d6736":"code","59213abb":"code","303f62ad":"code","42ef7dc2":"code","999a1121":"code","dc446221":"code","461d64de":"code","32ca4539":"code","b81ca0d4":"code","a5da5e26":"code","4c11d299":"code","12fa976d":"code","f27e5de7":"code","2f0ec1dc":"code","1d94d85b":"code","2f4b9389":"code","f50760ea":"code","2d89ee5d":"code","6ce69332":"code","21e77901":"code","433d7136":"code","c51cb223":"code","1c1f0802":"code","fdcbe37e":"code","425dea1d":"code","cd781b03":"code","8e013409":"code","d537267f":"code","c74190db":"code","11a822df":"markdown","4b7c1ae1":"markdown","9227d5e6":"markdown","a78ab0d5":"markdown","1662e767":"markdown","c30f5f57":"markdown","63ab9d5c":"markdown","96867975":"markdown"},"source":{"da79c7de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy as sp\nfrom sklearn.cluster import KMeans\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13c1b248":"# Assign sets important according to segmentations preparation. \n# Consuquently segmentation sets has to be controlled by experts\n\n\ndf = pd.read_csv(\"\/kaggle\/input\/violent-crime-rates-by-us-state\/US_violent_crime.csv\").copy()\ndf.head()","571be6d0":"# firstly lets do it index 'Unnamed: 0' value in observation units\n\ndf.index = df.iloc[:,0]\ndf.index","b592be12":"df.head()","3cd99889":"# stil during 'Unnamed: 0' let's get out of the list\n\ndf = df.iloc[:,1:5]\ndf.head()","f189aa3c":"df.index.name = \"Index\"\ndf.head()","7e7d595f":"# Let's see if I have any missing observations\n\ndf.isnull().sum()","fcc4b397":"# here all of them have to be numerical values. Here we have made it this too\n\ndf.info()","cad07fa1":"df.describe().T","14e88848":"# here it is appropriate to visualize the data to try to understand it.\n# For example, 3 Assault (Assault) histogram looks like 3 peaks or accumulation.\n\ndf.hist(figsize = (10,10));","cc8d6736":"# The number of part sand (n_cluster) we need to determine per work can be the same as the number of variables we need to concentrate on.\n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters = 4)\nkmeans","59213abb":"# lets look model properties\n\n#?kmeans","303f62ad":"k_fit = kmeans.fit(df)","42ef7dc2":"# Let's create the chunks of the model to be fit\n\nk_fit.n_clusters","999a1121":"# create the centers of these sets\n\nk_fit.cluster_centers_","dc446221":"# If I want to visualize, now let's reduce the set numbers to 2\nkmeans = KMeans(n_clusters = 2)\nk_fit = kmeans.fit(df)              ","461d64de":"sets = k_fit.labels_","32ca4539":"# Let's visualize the data we reduced to 2 sets.\n\nplt.scatter(df.iloc[:,0], df.iloc[:,1], c = sets, s = 50, cmap = \"viridis\")\n\ncenters = k_fit.cluster_centers_                                 # We want to create 2 centers and show them on the visual.\n\nplt.scatter(centers[:,0], centers[:,1], c = \"black\", s = 200, alpha = 0.5);","b81ca0d4":"# Let us import 3D visualization. Otherwise it is necessary to download\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\n# Let's create our sets again, this time it will be 3 dimensional variable\n\nkmeans = KMeans(n_clusters = 3)\nk_fit = kmeans.fit(df)\nsets = k_fit.labels_\ncenters = kmeans.cluster_centers_","a5da5e26":"plt.rcParams['figure.figsize'] = (16, 9)\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2]);","4c11d299":"# Let's look at the visualization of these sets and centers on the plot.\n\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], c=sets)\nax.scatter(centers[:, 0], centers[:, 1], centers[:, 2], \n           marker='*', \n           c='#050505', \n           s=1000);","12fa976d":"# To provide cluster numbers and information about which states (observations) these numbers belong to\n# If we want, we can take the model with 2 variables or 3 variables above, let's take the 3 ones\n\nkmeans = KMeans(n_clusters = 3)\nk_fit = kmeans.fit(df)\nsets = k_fit.labels_","f27e5de7":"# to see which set and index you have for the top 10 states\n\npd.DataFrame({\"Provinces\" : df.index, \"Sets\": sets})[0:15]","2f0ec1dc":"# to look at the set number that each belongs to\n\ndf[\"set_no\"] = sets\n\ndf.head()","1d94d85b":"# eger kume no 0 dan basliyorsa biz 1 den baslamasini istiyorsak soyle yapabiliriz\n\ndf[\"set_no\"] = df[\"set_no\"] + 1\n\ndf.head()","2f4b9389":"# It is called one from 2 to 50. The number of sets should decrease, because we should approach zero, because we reduce the sands.\n# When you have 10 thousand customers, you are not interested in 100 people. It is necessary to put the customers with high degrees or features into a segment(sets).\n#!pip install yellowbrick\nfrom yellowbrick.cluster import KElbowVisualizer\nkmeans = KMeans()\nvisualizer = KElbowVisualizer(kmeans, k=(2,50))\nvisualizer.fit(df) \nvisualizer.poof()  \n\n# We understand the presentation from gorsel each point segment (set), ie, the set of elements with similar properties in it\n# For example, when the customer enters our site, a presentation can be made about what the monthly income it brings to us.","f50760ea":"# Let's take our model above again\n# To provide cluster numbers and information about which states (observations) these numbers belong to\n# If we want we can take the model with 2 variables or 3 variables above, let's take the 4 normal ones\n\nkmeans = KMeans(n_clusters = 4)\nk_fit = kmeans.fit(df)\nsets = k_fit.labels_","2d89ee5d":"# to see which set and index you have for the top 10 states\n\npd.DataFrame({\"Provinces\" : df.index, \"Sets\": sets})[0:10]","6ce69332":"df = pd.read_csv(\"\/kaggle\/input\/violent-crime-rates-by-us-state\/US_violent_crime.csv\").copy()\ndf.index = df.iloc[:,0]\ndf = df.iloc[:,1:5]\n#del df.index.name\ndf.index.name = \"Index\"\ndf.head()","21e77901":"from scipy.cluster.hierarchy import linkage\n\nhc_complete = linkage(df, \"complete\")\nhc_average = linkage(df, \"average\")\nhc_single = linkage(df, \"single\")","433d7136":"# We can watch its features and see what it does\n\ndir(hc_complete)","c51cb223":"# We need to create Dendogram\n\nfrom scipy.cluster.hierarchy import dendrogram\n\nplt.figure(figsize=(15, 10))\nplt.title('Hierarchical Clustering - Dendogram')\nplt.xlabel('Indexs')\nplt.ylabel('Distance')\ndendrogram(\n    hc_complete,\n    leaf_font_size=10\n);","1c1f0802":"# another form of representation and the number of elements below it\n\nfrom scipy.cluster.hierarchy import dendrogram\n\nplt.figure(figsize=(15, 10))\nplt.title('Hierarchical Clustering - Dendogram')\nplt.xlabel('Indexs')\nplt.ylabel('Distance')\ndendrogram(\n    hc_complete,\n    truncate_mode = \"lastp\",\n    p = 4,\n    show_contracted = True\n);","fdcbe37e":"from scipy.cluster.hierarchy import dendrogram\n\nplt.figure(figsize=(15, 10))\nplt.title('Hierarchical Clustering - Dendogram')\nplt.xlabel('Indexs')\nplt.ylabel('Distance')\nden = dendrogram(\n    hc_complete,\n    leaf_font_size=10\n);","425dea1d":"#?den","cd781b03":"#?dendrogram","8e013409":"# When we look at the dendogram, it will be logical to divide it into 4 large clusters. Then we say n_cluster = 4.\n\nfrom sklearn.cluster import AgglomerativeClustering\ncluster = AgglomerativeClustering(n_clusters = 4, \n                                  affinity = \"euclidean\", \n                                  linkage = \"ward\")\n\ncluster.fit_predict(df)","d537267f":"# if we want to see which state is in which bank\n\npd.DataFrame({\"Provinces\" : df.index, \"Sets\": cluster.fit_predict(df)})[0:10]","c74190db":"df[\"set_no\"] = cluster.fit_predict(df)\ndf.head()","11a822df":"# Exploratory Data Analysis","4b7c1ae1":"## Visualizations","9227d5e6":"# Conclusion\n\n\n\n    1. If this tutorial is not enough you can check also https:\/\/www.picostat.com\/dataset\/r-dataset-package-datasets-usarrests\n\n    2. I used here K_Means and Hierarchical Clustering Model but you can try also PCA Model. Results of both models:\n\n    3. After this tutorial, my aim is to prepare 'kernel' which is connected to Deep Learning 'not clear' data set.\n   \n If you have any suggestions, please could you write for me? I wil be happy for comment and critics!\n \n \n Thank you for your suggestion and votes ;)\n\n","a78ab0d5":"## Determination of Optimum Set Number","1662e767":"# K-MEANS Model and Visualizations","c30f5f57":"# Hierarchical Clustering","63ab9d5c":"## Optimum Set Number","96867975":"## Sets and observation units"}}