{"cell_type":{"53d6704b":"code","d59d9ff8":"code","aeec6801":"code","c119d97b":"code","8ba924e3":"code","a4e2610f":"code","bb0da5da":"code","950be80f":"code","5af86ed9":"code","ca705dfc":"code","40e9a6b3":"code","a5a39300":"code","5de7fbe5":"code","abc82287":"code","46ca7733":"code","97409ca2":"code","2feb5ac2":"code","577840eb":"code","f187d41e":"code","f23862e3":"code","49f21568":"code","5e1814ce":"code","ad05a550":"code","3e551231":"code","8f8e4776":"code","816002b0":"code","7911f6ee":"code","d46a57c2":"code","e90b76c8":"code","f8b749ab":"code","b607ef9d":"code","6cdc1c57":"code","8edf71ad":"code","8e7aecc3":"code","adf5ca5f":"code","263d8973":"code","f02e669a":"code","f15e37ba":"code","6eaf816c":"code","603cc013":"code","73fe01ed":"code","489588f8":"code","670b33bf":"code","eabfadc4":"code","12b29ba6":"code","94eded16":"code","bee67c31":"code","7bac0076":"code","2439439a":"code","405ff1f9":"code","292d82e5":"code","509ea920":"code","a844032e":"code","7e1c5562":"code","f43b8bf4":"code","62135636":"code","6a2e5ffa":"code","0e25abb6":"code","e8092de4":"code","5f5bd5fd":"code","7b6c5bb8":"code","1e7e4d98":"code","e9a87cd5":"code","84b377af":"code","87ac9ccc":"code","eb25f790":"code","7986f3ce":"code","a70c4de9":"code","80c4ab11":"code","f03eaeef":"code","9b752c5b":"code","da90a61e":"code","3ef5d358":"code","b545d52a":"code","ec5a5592":"code","a1725524":"code","ed4de5f0":"code","8fb65d2d":"code","2d9dab61":"code","f6b2a3b3":"code","f7d7e533":"code","40d205b8":"code","b1bd0a02":"code","19e7bd59":"code","30ae0ad1":"code","a238c815":"code","b3b96f41":"code","9606ebe4":"code","f64454a4":"code","7fddaac1":"code","686428eb":"code","f75c75b4":"code","2b75ad8c":"code","dfbaa7eb":"code","7befb222":"code","b43cf419":"code","912c06ec":"code","0f5f1b01":"code","7e77889c":"code","06869684":"code","258c23b2":"code","85b59b6c":"code","7780fdbc":"code","6374cfde":"code","09306c24":"code","84b952d7":"code","370c5064":"code","d7d15e23":"code","a16e6d06":"code","9e5bb60b":"code","32c42cb3":"code","83ae7544":"code","b05ef96e":"code","e456b64f":"code","08e82402":"code","54deb40e":"code","ec4fd8e5":"code","82d9b828":"code","75f57a28":"code","a9d277c0":"code","c04f4290":"code","3c258962":"code","8d860a4e":"code","ad4870f1":"code","8256f31c":"code","e09bd0bf":"code","ce9888db":"code","dbf8cb7d":"markdown","be4ddb19":"markdown","35f42ee2":"markdown","627f2d6b":"markdown","60a4740d":"markdown","7d698052":"markdown","8d8c2c44":"markdown","6c5e65a9":"markdown","27742ac1":"markdown","15a5461f":"markdown","a9b579aa":"markdown","60880b2a":"markdown"},"source":{"53d6704b":"import pandas as pd\nimport numpy as np","d59d9ff8":"pd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 500)","aeec6801":"train=pd.read_csv('..\/input\/costa-rican-household-poverty-prediction\/train.csv')\ntrain","c119d97b":"train['Target'].value_counts()","8ba924e3":"train.shape","a4e2610f":"work=train","bb0da5da":"#code for number of null values in a column\nfor i in list(work.columns):\n    count=0\n    for j in  list(work[i].isnull()):\n        if j is True:\n            count=count+1\n    if count != 0:\n        print(i,'-',count)","950be80f":"work.loc[((work['v2a1'].isnull()) & (work['Target']==1) ),'v2a1']=work['v2a1'].where(work['Target']==1).dropna().median()\nwork.loc[((work['v2a1'].isnull()) & (work['Target']==2) ),'v2a1']=work['v2a1'].where(work['Target']==2).dropna().median()\nwork.loc[((work['v2a1'].isnull()) & (work['Target']==3) ),'v2a1']=work['v2a1'].where(work['Target']==3).dropna().median()\nwork.loc[((work['v2a1'].isnull()) & (work['Target']==4) ),'v2a1']=work['v2a1'].where(work['Target']==4).dropna().median()","5af86ed9":"work.loc[((work['v18q1'].isnull()) & (work['v18q']==0)),'v18q1']=0","ca705dfc":"ID=work['Id']\n","40e9a6b3":"monthly_rent_payment=work['v2a1']\n","a5a39300":"bathrooms=work['rooms']-work['bedrooms']\nbedrooms=work['bedrooms']\n","5de7fbe5":"refrigerator=work['refrig']\n","abc82287":"no_of_tablets=work['v18q1']\n","46ca7733":"males_younger_12=work['r4h1']\nmales_older_12=work['r4h2']\nfemale_younger_12=work['r4m1']\nfemale_older_12=work['r4m2']\n","97409ca2":"household_size=work['hhsize']\n","2feb5ac2":"years_of_schooling=work['escolari']\n","577840eb":"material_outside_wall=work['paredblolad']+2*work['paredzocalo']+3*work['paredpreb']+4*work['pareddes']+5*work['paredmad']+6*work['paredzinc']+7*work['paredfibras']+8*work['paredother']\n","f187d41e":"floor_material=work['pisomoscer']+2*work['pisocemento']+3*work['pisoother']+4*work['pisonatur']+5*work['pisonotiene']+6*work['pisomadera']\n","f23862e3":"roof_material=work['techozinc']+2*work['techoentrepiso']+3*work['techocane']+4*work['techootro']\n","49f21568":"water_provision=work['abastaguano']+2*work['abastaguadentro']+3*work['abastaguafuera']\n","5e1814ce":"electricity=work['public']+2*work['planpri']+3*work['noelec']+4*work['coopele']\n","ad05a550":"toilet=work['sanitario1']+2*work['sanitario2']+3*work['sanitario3']+4*work['sanitario5']+5*work['sanitario6']\n","3e551231":"cooking_energy=work['energcocinar1']+2*work['energcocinar2']+3*work['energcocinar3']+4*work['energcocinar4']\n","8f8e4776":"rubbish_disposal=work['elimbasu1']+2*work['elimbasu2']+3*work['elimbasu3']+4*work['elimbasu4']+5*work['elimbasu5']+6*work['elimbasu6']\n","816002b0":"condition_walls=work['epared1']+2*work['epared2']+3*work['epared3']\ncondition_floor=work['etecho1']+2*work['etecho2']+3*work['etecho3']\ncondition_roof=work['eviv1']+2*work['eviv2']+3*work['eviv3']","7911f6ee":"disable_person=work['dis']\n","d46a57c2":"gender=work['male']+2*work['female']\n","e90b76c8":"marital_status=work['estadocivil1']+2*work['estadocivil2']+3*work['estadocivil3']+4*work['estadocivil4']+5*work['estadocivil5']+6*work['estadocivil6']+7*work['estadocivil7']\nin_house_position=work['parentesco1']+2*work['parentesco2']+3*work['parentesco3']+4*work['parentesco4']+5*work['parentesco5']+6*work['parentesco6']+7*work['parentesco7']+8*work['parentesco8']+9*work['parentesco9']+10*work['parentesco10']+11*work['parentesco11']+12*work['parentesco12']\n","f8b749ab":"Household_level_identifier=work['idhogar']\n","b607ef9d":"children_0_to_19=work['hogar_nin']\nadult_below_65=work['hogar_adul']-work['hogar_mayor']\nadult_above_65=work['hogar_mayor']","6cdc1c57":"work.loc[(work['dependency']=='yes'), 'dependency']=1\nwork.loc[(work['dependency']=='no'), 'dependency']=0\ndependency=work['dependency']\n","8edf71ad":"work.loc[(work['edjefe']=='no'),'edjefe']=0\nwork.loc[(work['edjefe']=='yes'),'edjefe']=1\nwork.loc[(work['edjefa']=='no'),'edjefa']=0\nwork.loc[(work['edjefa']=='yes'),'edjefa']=1\n\nedu_male_head_years=work['edjefe']\nedu_female_head_years=work['edjefa']\n","8e7aecc3":"edu_avg_above_18=work['meaneduc']\n","adf5ca5f":"education_level=work['instlevel1']+2*work['instlevel2']+3*work['instlevel3']+4*work['instlevel4']+5*work['instlevel6']+6*work['instlevel7']+7*work['instlevel7']+8*work['instlevel8']+9*work['instlevel9']","263d8973":"overcrowding=work['overcrowding']","f02e669a":"house_owned_status=work['tipovivi1']+2*work['tipovivi2']+3*work['tipovivi3']+4*work['tipovivi4']+5*work['tipovivi5']","f15e37ba":"computer=work['computer']","6eaf816c":"television=work['television']","603cc013":"mobilephone=work['mobilephone']","73fe01ed":"no_of_mobile_phone=work['qmobilephone']","489588f8":"region=work['lugar1']+2*work['lugar2']+3*work['lugar3']+4*work['lugar4']+5*work['lugar5']+6*work['lugar6']","670b33bf":"area=work['area1']+2*work['area2']\n","eabfadc4":"age=work['age']","12b29ba6":"about_person=['ID','age','years_of_schooling','disable_person','gender','marital_status','in_house_position','education_level']\nabout_household=['region','area','house_owned_status','monthly_rent_payment','bedrooms','bathrooms','condition_roof','condition_floor','condition_walls','material_outside_wall','floor_material','roof_material','water_provision','electricity','toilet','cooking_energy','rubbish_disposal']\ngadget_in_household=['refrigerator','no_of_tablets','computer','television','mobilephone','no_of_mobile_phone']\nhousehold_composition=['Household_level_identifier','household_size','males_younger_12','males_older_12','female_younger_12','female_older_12','children_0_to_19','adult_below_65','adult_above_65']\neducation_level_in_house=['edu_male_head_years','edu_female_head_years','edu_avg_above_18']\nhousehold_stats=['overcrowding','dependency']","94eded16":"final=pd.DataFrame({ 'ID':ID, 'age':age, 'years_of_schooling':years_of_schooling, 'disable_person':disable_person, 'gender':gender, 'marital_status':marital_status, 'in_house_position':in_house_position, 'education_level':education_level, 'region':region, 'area':area, 'house_owned_status':house_owned_status, 'monthly_rent_payment':monthly_rent_payment, 'bedrooms':bedrooms, 'bathrooms':bathrooms, 'condition_roof':condition_roof, 'condition_floor':condition_floor, 'condition_walls':condition_walls, 'material_outside_wall':material_outside_wall, 'floor_material':floor_material, 'roof_material':roof_material, 'water_provision':water_provision, 'electricity':electricity, 'toilet':toilet, 'cooking_energy':cooking_energy, 'rubbish_disposal':rubbish_disposal, 'Household_level_identifier':Household_level_identifier, 'household_size':household_size, 'males_younger_12':males_younger_12, 'males_older_12':males_older_12, 'female_younger_12':female_younger_12, 'female_older_12':female_older_12, 'children_0_to_19':children_0_to_19, 'adult_below_65':adult_below_65, 'adult_above_65':adult_above_65, 'edu_male_head_years':edu_male_head_years, 'edu_female_head_years':edu_female_head_years, 'edu_avg_above_18':edu_avg_above_18, 'refrigerator':refrigerator, 'no_of_tablets':no_of_tablets, 'computer':computer, 'television':television, 'mobilephone':mobilephone, 'no_of_mobile_phone':no_of_mobile_phone, 'overcrowding':overcrowding, 'dependency':dependency})","bee67c31":"final['Target']=work['Target']","7bac0076":"final","2439439a":"final.shape","405ff1f9":"#code for number of null values in a column\nfor i in list(final.columns):\n    count=0\n    for j in  list(final[i].isnull()):\n        if j is True:\n            count=count+1\n    if count != 0:\n        print(i,'-',count)","292d82e5":"final.loc[(final['edu_avg_above_18'].isnull() ),['ID','age','gender','household_size','Household_level_identifier','education_level','edu_male_head_years','edu_female_head_years','edu_avg_above_18','Target']]","509ea920":"final.loc[(final['ID']=='ID_bd8e11b0f' )]=final.loc[((final['household_size']==1) & (final['Target']==4)),'edu_avg_above_18'].median()\nfinal.loc[(final['ID']=='ID_46ff87316' )]=final.loc[((final['household_size']==2) & (final['Target']==4)),'edu_avg_above_18'].median()\nfinal.loc[(final['ID']=='ID_69f50bf3e' )]=final.loc[((final['household_size']==2) & (final['Target']==4)),'edu_avg_above_18'].median()\nfinal.loc[(final['ID']=='ID_db3168f9f' )]=final.loc[((final['household_size']==2) & (final['Target']==4)),'edu_avg_above_18'].median()\nfinal.loc[(final['ID']=='ID_2a7615902' )]=final.loc[((final['household_size']==2) & (final['Target']==4)),'edu_avg_above_18'].median()\n","a844032e":"final.loc[[1291,1840,1841,2049,2050],'edu_avg_above_18']","7e1c5562":"#code for number of null values in a column\nfor i in list(final.columns):\n    count=0\n    for j in  list(final[i].isnull()):\n        if j is True:\n            count=count+1\n    if count != 0:\n        print(i,'-',count)","f43b8bf4":"final.to_csv('final.csv',index=False)","62135636":"final.info()","6a2e5ffa":"for i in range(0,len(final['Target'])):\n    if final.loc[i,'Target']==10:\n        final.loc[i,'Target']=4\nfinal['Target'].value_counts()   \nfinal.to_csv('final.csv',index=False)","0e25abb6":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats","e8092de4":"sns.set(color_codes=True)","5f5bd5fd":"final['age'].describe()","7b6c5bb8":"sns.distplot(final['age'], bins=5, kde=False, rug=True);\n","1e7e4d98":"sns.kdeplot(final['age'], shade=True);","e9a87cd5":"sns.set(style=\"whitegrid\")\nax = sns.boxplot(x=final['age'])","84b377af":"final['years_of_schooling'].describe()","87ac9ccc":"sns.distplot(final['years_of_schooling'], bins=5, kde=False, rug=True);","eb25f790":"sns.set(style=\"whitegrid\")\nax = sns.boxplot(x=final['years_of_schooling'])","7986f3ce":"sns.distplot(final['disable_person'],bins=2, kde=False, rug=True,color='blue');","a70c4de9":"final['disable_person'].value_counts()","80c4ab11":"sns.distplot(final['gender'], kde=False, rug=True,color='red');\nfinal['gender'].value_counts()","f03eaeef":"plt.hist(final['marital_status'])\nplt.xlabel('marital_status')\nlegends=['1-less than 10 years old','2-free or coupled uunion','3-married','4-divorced','5-seperated','6-widower','7-single']\nplt.show()\nlegends\n","9b752c5b":"plt.hist(final['in_house_position'])\nplt.xlabel('in_house_position')\nlegends=['1-household head','2-spouse\/partner','3-son\/doughter','4-stepson\/doughter','5-son\/doughter in law','6-grandson\/doughter','7-mother\/father','8-father\/mother in law','9-brother\/sister','10-brother\/sister in law','11-other family member','10-other non family member']\nplt.show()\nlegends","da90a61e":"plt.hist(final['education_level'])\nplt.xlabel('education_level')\nlegends=['1-no level of education','2-incomplete primary','3-complete primary','4-incomplete academic secondary level','5-complete academic secondary level','6-incomplete technical secondary level','7-complete technical secondary level','8-undergraduate and higher education','9-postgraduate higher education']\nplt.show()\nlegends","3ef5d358":"plt.hist(final['region'])\nplt.xlabel('region')\nlegends=['1-region Central','2-region Chorotega','3-region Pac\u00c3\u0192\u00c2\u00adfico central','4-region Brunca','5-region Huetar Atl\u00c3\u0192\u00c2\u00a1ntica','6-region Huetar Norte']\nplt.show()\nlegends","b545d52a":"plt.hist(final['area'])\nplt.xlabel('area')\nlegends=['1-zona urbana','2-zona rural']\nplt.show()\nlegends","ec5a5592":"plt.hist(final['house_owned_status'])\nplt.xlabel('house_owned_status')\nlegends=['1-own and fully paid house','2-own,  paying in installments','3-rented','4-precarious','5-other(assigned,  borrowed)']\nplt.show()\nlegends","a1725524":"final['monthly_rent_payment'].describe()","ed4de5f0":"sns.kdeplot(final['monthly_rent_payment'], shade=True);","8fb65d2d":"sns.set(style=\"whitegrid\")\nax = sns.boxplot(x=final['monthly_rent_payment'])","2d9dab61":"final['monthly_rent_payment']=final['monthly_rent_payment']\/(np.max(final['monthly_rent_payment'])-np.min(final['monthly_rent_payment']))","f6b2a3b3":"whisker_max_limit=np.percentile(final['monthly_rent_payment'],75)+1.5*(np.percentile(final['monthly_rent_payment'],75)-np.percentile(final['monthly_rent_payment'],25))\nwhisker_max_limit","f7d7e533":"final['monthly_rent_payment'].where(final['monthly_rent_payment']<=whisker_max_limit).describe()","40d205b8":"sns.distplot( final['monthly_rent_payment'].where(final['monthly_rent_payment']<=whisker_max_limit).dropna(),bins=6,kde=False, rug=True);","b1bd0a02":"sns.kdeplot(final['monthly_rent_payment'].where(final['monthly_rent_payment']<=whisker_max_limit).dropna(), shade=True);","19e7bd59":"sns.distplot(final['bathrooms'],bins=4,kde=False, rug=True);","30ae0ad1":"sns.distplot(final['bedrooms'],bins=4,kde=False, rug=True);","a238c815":"plt.hist(final['condition_walls'])\nplt.xlabel('condition_walls')\nlegends=['1-walls are bad','2-walls are regular','3-walls are good']\nplt.show()\nlegends","b3b96f41":"plt.hist(final['condition_floor'])\nplt.xlabel('condition_floor')\nlegends=['1-floor are bad','2-floor are regular','3-floor are good']\nplt.show()\nlegends","9606ebe4":"plt.hist(final['condition_roof'])\nplt.xlabel('condition_roof')\nlegends=['1-roof are bad','2-roof are regular','3-roof are good']\nplt.show()\nlegends","f64454a4":"plt.hist(final['electricity'])\nplt.xlabel('electricity')\nlegends=['1-electricity from CNFL,  ICE,  ESPH\/JASEC','2-electricity from private plant','3-no electricity in the dwelling','4-electricity from cooperative']\nplt.show()\nlegends","7fddaac1":"final['electricity'].value_counts()","686428eb":"final['household_size'].describe()","f75c75b4":"plt.hist(final['household_size'])\nplt.xlabel('no_of_persons_in_household')\nplt.show()\n","2b75ad8c":"sns.set(style=\"whitegrid\")\nax = sns.boxplot(x=final['household_size'])","dfbaa7eb":"plt.hist(final['males_younger_12'])\nplt.xlabel('males_younger_12')\nplt.ylabel(\"no_of_families\")\nplt.show()\nfinal['males_younger_12'].value_counts()","7befb222":"plt.hist(final['males_older_12'])\nplt.xlabel('males_older_12')\nplt.ylabel(\"no_of_families\")\nplt.show()\nfinal['males_older_12'].value_counts()","b43cf419":"plt.hist(final['female_younger_12'])\nplt.xlabel('female_younger_12')\nplt.ylabel(\"no_of_families\")\nplt.show()\nfinal['female_younger_12'].value_counts()","912c06ec":"plt.hist(final['female_older_12'])\nplt.xlabel('female_older_12')\nplt.ylabel(\"no_of_families\")\nplt.show()\nfinal['female_older_12'].value_counts()","0f5f1b01":"final['female_older_12'].value_counts()","7e77889c":"plt.hist(final['children_0_to_19'])\nplt.xlabel('children_0_to_19')\nplt.ylabel(\"no_of_families\")\nplt.show()\nfinal['children_0_to_19'].value_counts()","06869684":"plt.hist(final['adult_below_65'])\nplt.xlabel('adult_below_65')\nplt.ylabel(\"no_of_families\")\nplt.show()\nfinal['adult_below_65'].value_counts()","258c23b2":"plt.hist(final['adult_above_65'])\nplt.xlabel('adult_above_65')\nplt.ylabel(\"no_of_families\")\nplt.show()\nfinal['adult_above_65'].value_counts()","85b59b6c":"plt.hist([final['refrigerator'],final['computer'],final['television'],final['mobilephone']],bins=2)\nplt.ylabel(\"no_of_families\")\nlegends=['refrigerator','computer','television','mobilephone']\nplt.legend(legends)\nplt.show()\n","7780fdbc":"plt.hist(final['overcrowding'])\nplt.ylabel(\"no_of_families\")\nplt.show()","6374cfde":"corr_matrix=final.corr()","09306c24":"corr_matrix['adult_above_65'].sort_values(ascending=False)","84b952d7":"corr = final.corr()\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\n\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);\n","370c5064":"final['condition_walls'].corr(final['roof_material'])","d7d15e23":"from sklearn.metrics import confusion_matrix \nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\nfrom sklearn.tree import DecisionTreeRegressor\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.optimizers import SGD\nimport numpy as np\nimport pandas as pd\nimport tensorflow\nfrom keras.utils import to_categorical\nfrom sklearn.datasets import fetch_mldata\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression","a16e6d06":"pd.set_option('display.max_columns', None)\nfinal=pd.read_csv('..\/input\/final-data\/final.csv')\nwork=final.copy(deep=True)\nwork","9e5bb60b":"def plot_confusion_matrix(cm, names, title='Confusion matrix', cmap=plt.cm.Blues):\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(names))\n    plt.xticks(tick_marks, names, rotation=45)\n    plt.yticks(tick_marks, names)\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\ndef cal_accuracy(y_test, y_pred): \n      \n    print(\"Confusion Matrix: \\n\", confusion_matrix(y_test, y_pred)) \n    \n    products=[1,2,3,4]\n    cm = confusion_matrix(y_test, result)\n    np.set_printoptions(precision=2)\n    plt.figure()\n    plot_confusion_matrix(cm, products)\n    plt.show()\n      \n    print (\"Accuracy : \", \n    accuracy_score(y_test,y_pred)*100)\n    \n    print (\"Sensitivity for 1 : \", (cm[0,0]\/sum(cm[0]))*100)\n    print (\"Sensitivity for 2 : \", (cm[1,1]\/sum(cm[1]))*100)\n    print (\"Sensitivity for 3 : \", (cm[2,2]\/sum(cm[2]))*100)\n    print (\"Sensitivity for 4 : \", (cm[3,3]\/sum(cm[3]))*100)","32c42cb3":"data = work[['age', 'years_of_schooling', 'disable_person', 'gender',\n       'marital_status', 'in_house_position', 'education_level', 'region',\n       'area', 'house_owned_status', 'monthly_rent_payment', 'bedrooms',\n       'bathrooms', 'condition_roof', 'condition_floor', 'condition_walls',\n       'material_outside_wall', 'floor_material', 'roof_material',\n       'water_provision', 'electricity', 'toilet', 'cooking_energy',\n       'rubbish_disposal', 'household_size',\n       'males_younger_12', 'males_older_12', 'female_younger_12',\n       'female_older_12', 'children_0_to_19', 'adult_below_65',\n       'adult_above_65', 'edu_male_head_years', 'edu_female_head_years',\n       'edu_avg_above_18', 'refrigerator', 'no_of_tablets', 'computer',\n       'television', 'mobilephone', 'no_of_mobile_phone', 'overcrowding',\n       'dependency']].copy(deep=True)\n\nx_train=data.loc[1:8557,].values\nx_test=data.loc[8557:9556,].values\ny_train=work.loc[1:8557,'Target'].values.astype(int)\ny_test=work.loc[8557:9556,'Target'].values.astype(int)\n","83ae7544":"clf_gini = DecisionTreeClassifier( criterion = \"gini\", max_depth = None)\nclf_gini.fit(x_train, y_train)\nresult=clf_gini.predict(x_test)\ncal_accuracy(y_test, result)\n","b05ef96e":"clf_entropy = DecisionTreeClassifier( criterion = \"entropy\", max_depth = None)\nclf_entropy.fit(x_train, y_train)\nresult=clf_entropy.predict(x_test)\ncal_accuracy(y_test, result)","e456b64f":"data = work[['age', 'disable_person', 'gender',\n       'marital_status', 'education_level', 'region',\n       'area', 'house_owned_status', 'monthly_rent_payment', \n       'condition_roof', 'condition_floor', 'condition_walls',\n        'water_provision', 'electricity', 'toilet', 'cooking_energy',\n       'rubbish_disposal', 'household_size',\n        'refrigerator', 'no_of_tablets', 'computer',\n       'television', 'no_of_mobile_phone', 'overcrowding',\n       'dependency']].copy(deep=True)\n\n\nx_train=data.loc[1:8557,].values\nx_test=data.loc[8557:9556,].values\ny_train=work.loc[1:8557,'Target'].values.astype(int)\ny_test=work.loc[8557:9556,'Target'].values.astype(int)","08e82402":"clf_gini = DecisionTreeClassifier( criterion = \"gini\", max_depth = None)\nclf_gini.fit(x_train, y_train)\nresult=clf_gini.predict(x_test)\ncal_accuracy(y_test, result)","54deb40e":"clf_entropy = DecisionTreeClassifier( criterion = \"entropy\", max_depth = None)\nclf_entropy.fit(x_train, y_train)\nresult=clf_entropy.predict(x_test)\ncal_accuracy(y_test, result)","ec4fd8e5":"data = work[['age', 'years_of_schooling', 'disable_person', 'gender',\n       'marital_status', 'in_house_position', 'education_level', 'region',\n       'area', 'house_owned_status', 'monthly_rent_payment', 'bedrooms',\n       'bathrooms', 'condition_roof', 'condition_floor', 'condition_walls',\n       'material_outside_wall', 'floor_material', 'roof_material',\n       'water_provision', 'electricity', 'toilet', 'cooking_energy',\n       'rubbish_disposal', 'household_size',\n       'males_younger_12', 'males_older_12', 'female_younger_12',\n       'female_older_12', 'children_0_to_19', 'adult_below_65',\n       'adult_above_65', 'edu_male_head_years', 'edu_female_head_years',\n       'edu_avg_above_18', 'refrigerator', 'no_of_tablets', 'computer',\n       'television', 'mobilephone', 'no_of_mobile_phone', 'overcrowding',\n       'dependency']].copy(deep=True)\n\n\nx_train=data.loc[1:8557,].values\nx_test=data.loc[8557:9556,].values\ny_train=work.loc[1:8557,'Target'].values.astype(int)\ny_test=work.loc[8557:9556,'Target'].values.astype(int)\n\nscaler = StandardScaler()\nscaler.fit(x_train)\n\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)\n\nmodel = LogisticRegression(solver = 'lbfgs',multi_class='multinomial')\nmodel.fit(x_train, y_train)\n\nresult = model.predict(x_test)\n\ncal_accuracy(y_test, result)\n","82d9b828":"data = work[['age', 'disable_person', 'gender',\n       'marital_status', 'education_level', 'region',\n       'area', 'house_owned_status', 'monthly_rent_payment', \n       'condition_roof', 'condition_floor', 'condition_walls',\n        'water_provision', 'electricity', 'toilet', 'cooking_energy',\n       'rubbish_disposal', 'household_size',\n        'refrigerator', 'no_of_tablets', 'computer',\n       'television', 'no_of_mobile_phone', 'overcrowding',\n       'dependency']].copy(deep=True)\n\nx_train=data.loc[1:8557,].values\nx_test=data.loc[8557:9556,].values\ny_train=work.loc[1:8557,'Target'].values.astype(int)\ny_test=work.loc[8557:9556,'Target'].values.astype(int)\n\nscaler = StandardScaler()\nscaler.fit(x_train)\n\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)\n\nmodel = LogisticRegression(solver = 'lbfgs',multi_class='multinomial')\nmodel.fit(x_train, y_train)\n\nresult = model.predict(x_test)\n\ncal_accuracy(y_test, result)","75f57a28":"data = work[['age', 'years_of_schooling', 'disable_person', 'gender',\n       'marital_status', 'in_house_position', 'education_level', 'region',\n       'area', 'house_owned_status', 'monthly_rent_payment', 'bedrooms',\n       'bathrooms', 'condition_roof', 'condition_floor', 'condition_walls',\n       'material_outside_wall', 'floor_material', 'roof_material',\n       'water_provision', 'electricity', 'toilet', 'cooking_energy',\n       'rubbish_disposal', 'household_size',\n       'males_younger_12', 'males_older_12', 'female_younger_12',\n       'female_older_12', 'children_0_to_19', 'adult_below_65',\n       'adult_above_65', 'edu_male_head_years', 'edu_female_head_years',\n       'edu_avg_above_18', 'refrigerator', 'no_of_tablets', 'computer',\n       'television', 'mobilephone', 'no_of_mobile_phone', 'overcrowding',\n       'dependency']].copy(deep=True)\n\n\nx_train=data.loc[1:8557,].values\nx_test=data.loc[8557:9556,].values\ny_train=work.loc[1:8557,'Target'].values.astype(int)\ny_test=work.loc[8557:9556,'Target'].values.astype(int)\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test= sc.fit_transform(x_test)\n\ny1_train=np.zeros((y_train.shape[0],4), dtype=np.int)\nfor i in range(0,y_train.shape[0]):\n    if y_train[i]==1:\n        y1_train[i][0]=1\n    if y_train[i]==2:\n        y1_train[i][1]=1\n    if y_train[i]==3:\n        y1_train[i][2]=1\n    if y_train[i]==4:\n        y1_train[i][3]=1\n\ny1_test=np.zeros((y_test.shape[0],4), dtype=np.int)\nfor i in range(0,y_test.shape[0]):\n    if y_test[i]==1:\n        y1_test[i][0]=1\n    if y_test[i]==2:\n        y1_test[i][1]=1\n    if y_test[i]==3:\n        y1_test[i][2]=1\n    if y_test[i]==4:\n        y1_test[i][3]=1\n\nmodel=Sequential()\n\nmodel.add(Dense(int((data.shape[1]+1)\/2), kernel_initializer=\"uniform\", activation = 'relu', input_dim = data.shape[1]))\nmodel.add(Dense(int((data.shape[1]+1)\/2), kernel_initializer=\"uniform\", activation = 'relu'))\nmodel.add(Dense(4, kernel_initializer=\"uniform\", activation = 'softmax'))\n\nsgd=SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n\nmodel.compile(loss='categorical_crossentropy',\n             optimizer=sgd,\n             metrics=['accuracy'])\n\nmodel.fit(x_train,y1_train,epochs=1000, batch_size=128)","a9d277c0":"result = model.predict(x_test)\nresult=np.argmax(result, axis = 1)+1\ncal_accuracy(y_test, result)","c04f4290":"data = work[[ 'monthly_rent_payment',\n       'area','household_size',\n         'no_of_tablets', \n        'no_of_mobile_phone', 'overcrowding',\n       'dependency']].copy(deep=True)\n\n\nx_train=data.loc[1:8557,].values\nx_test=data.loc[8557:9556,].values\ny_train=work.loc[1:8557,'Target'].values.astype(int)\ny_test=work.loc[8557:9556,'Target'].values.astype(int)\n\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test= sc.fit_transform(x_test)\n\ny1_train=np.zeros((y_train.shape[0],4), dtype=np.int)\nfor i in range(0,y_train.shape[0]):\n    if y_train[i]==1:\n        y1_train[i][0]=1\n    if y_train[i]==2:\n        y1_train[i][1]=1\n    if y_train[i]==3:\n        y1_train[i][2]=1\n    if y_train[i]==4:\n        y1_train[i][3]=1\n\ny1_test=np.zeros((y_test.shape[0],4), dtype=np.int)\nfor i in range(0,y_test.shape[0]):\n    if y_test[i]==1:\n        y1_test[i][0]=1\n    if y_test[i]==2:\n        y1_test[i][1]=1\n    if y_test[i]==3:\n        y1_test[i][2]=1\n    if y_test[i]==4:\n        y1_test[i][3]=1\n\nmodel=Sequential()\n\nmodel.add(Dense(output_dim = int((data.shape[1]+1)\/2), init = 'uniform', activation = 'relu', input_dim = data.shape[1]))\nmodel.add(Dense(output_dim = int((data.shape[1]+1)\/2), init = 'uniform', activation = 'relu'))\nmodel.add(Dense(output_dim = 4, init = 'uniform', activation = 'softmax'))\n\n\nsgd=SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n\nmodel.compile(loss='categorical_crossentropy',\n             optimizer=sgd,\n             metrics=['accuracy'])\n\nmodel.fit(x_train,y1_train,epochs=1000, batch_size=128)","3c258962":"res = model.predict(x_test)\nresult=np.argmax(res, axis = 1)+1\ncal_accuracy(y_test, result)","8d860a4e":"Decesion_gini=pd.DataFrame([\n [ 78,   2,   1,   1],\n [  9, 126,  89,   7],\n [  6,  56,  73,  16],\n [ 18,  33,  16, 469]], columns=['1','2','3','4'])","ad4870f1":"Decesion_entropy=pd.DataFrame([\n [ 75,   5,   2,   0],\n [  8, 125,  96,   2],\n [  3,  82,  49,  17],\n [  6,  28,  24, 478]], columns=['1','2','3','4'])","8256f31c":"Logistic=pd.DataFrame([\n[ 28,  38,   8,   8],\n [ 62, 104,  39,  26],\n [ 10,  79,  49,  13],\n [ 20,  38,  24, 454]], columns=['1','2','3','4'])","e09bd0bf":"Nural=pd.DataFrame([\n[ 49,  17,  15,   1],\n [ 12,  94,  71,  54],\n [ 15,  28,  56,  52],\n [ 19,  21,  11, 485]], columns=['1','2','3','4'])","ce9888db":"print(\"Confusion Matrix: \")\nprint(\"\")\nprint(\"Decision Tree with GINI\")\ndisplay(Decesion_gini)\nprint(\"Accuracy :  74.6\")\nprint()\nprint()\nprint(\"Decision Tree with Entropy\")\ndisplay(Decesion_entropy)\nprint(\"Accuracy :  72.7\")\nprint()\nprint()\nprint(\"Logistic Regression with Multi class Classfication\")\ndisplay(Logistic)\nprint(\"Accuracy :  63.5\")\nprint()\nprint()\nprint(\"Nural Network with Multi Class Classfication\")\ndisplay(Nural)\nprint(\"Accuracy :  68.4\")","dbf8cb7d":"**Neural Network**: In this case, our prediction accuracy was varying after observing this model for 1000 times. The accuracy that we observe is 68.4%. \n","be4ddb19":"**Preprocessing**","35f42ee2":"Classification Method - We used two classification method Gini and entropy to predict poverty on a household level. \n","627f2d6b":"**Data Modelling** \nNow that we have a good set of features, it's time to get into the modelling.\n","60a4740d":"Entropy: In this case, our accuracy is 72.7%, Which is not good as compare to Gini. ","7d698052":"Read in Data and Look at Summary Information","8d8c2c44":"**Gini-** In this case, our accuracy is 72.7%. \n","6c5e65a9":"final","27742ac1":"**Problem and Data Explanation**\n\nThe data for this competition is provided in two files: ** train.csv** and** test.csv**. The training set has 9557 rows and 143 columns while the testing set has 23856 rows and 142 columns. Each row represents one individual and each column is a **feature, either unique to the individual, or for the household of the individual**. The training set has one additional column, Target, which represents the poverty level on a 1-4 scale and is the label for the competition. A value of 1 is the most extreme poverty.\nThis is a supervised multi-class classification machine learning problem:\n* Supervised: provided with the labels for the training data\n* Multi-class classification: Labels are discrete values with 4 classes\n\n**Objective**\nThe objective is to predict poverty on a **household level**. We are given data on the individual level with each individual having unique features but also information about their household. In order to create a dataset for the task, we'll have to perform some aggregations of the individual data for each household. Moreover, we have to make a prediction for every individual in the test set, but \"ONLY the heads of household are used in scoring\" which means we want to predict poverty on a household basis.\n\n**Core Data fields**\n* **Id:** a unique identifier for each individual, this should not be a feature that we use!\n* **idhogar:** a unique identifier for each household. This variable is not a feature but will be used to group individuals by the household as all individuals in a household will have the same identifier.\n* **parentesco1:** indicates if this person is the head of the household.\n* **Target:** the label, which should be equal for all members in a household\n\nWhen we make a model, we'll train on a household basis with the label for each household the poverty level of the head of household. The raw data contains a mix of both household and individual characteristics and for the individual data, we will have to find a way to aggregate this for each household. Some of the individuals belong to a household with no head of the household which means that unfortunately, we can't use this data for training. These issues with the data are completely typical of real-world data and hence this problem is great preparation for the datasets you'll encounter in a data science job!\n\n\n","15a5461f":"**Missing Variables**\nOne of the most important steps of exploratory data analysis is finding missing values in the data and determining how to handle them. Missing values have to be filled in before we use a machine learning model and we need to think of the best strategy for filling them in based on the feature: this is where we'll have to start digging into the data definitions.\n\nFirst, we can look at the percentage of missing values in each column.","a9b579aa":"**Logistic Regression:** In this case, our prediction accuracy came down to 63.5% then the classification methods we used above.  We applied this method twice and observe a drop in the accuracy level. ","60880b2a":"Although I observe the accuracy level in the case of the neural network sometimes come more than Gini method. But I would recommend using Gini method for predicting the poverty of households. As currently, according to me this method is way better than the other three with an accuracy of 74.6%. "}}