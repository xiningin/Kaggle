{"cell_type":{"30b70baf":"code","40f0a90a":"code","d8f7995b":"code","d77b682d":"code","32100e6a":"code","ea4c8fd6":"code","3708b9ea":"code","cfbf2f83":"code","640144d9":"code","7c3c3c12":"code","802137a3":"code","59b2b01e":"code","6f004e75":"code","5b92d331":"code","c4ccaf2a":"code","21c9560d":"code","56b738a4":"code","f7019ac3":"code","9a1bb664":"code","3af59c90":"code","84b882f1":"code","98e90f32":"code","7bcc816a":"code","072676e4":"code","90ce4532":"code","e6010415":"code","18543f18":"code","6af9ba83":"code","e2eb3712":"code","c389d38e":"code","6e31b568":"code","a077ed8e":"code","512d7351":"markdown","adafb1b3":"markdown","8822e31f":"markdown","2b9ed337":"markdown","69ee5a53":"markdown","617bd720":"markdown","8f415f91":"markdown","ee2ba8c7":"markdown","9ac6a0f0":"markdown","ecc4bec2":"markdown","579c9e67":"markdown","d81df69b":"markdown","6e2e54e5":"markdown","7283b6ea":"markdown","41b03312":"markdown","341b9673":"markdown","a27b1b61":"markdown","5e6d63b4":"markdown","a1fd1b08":"markdown","1d4692e7":"markdown","f657e138":"markdown"},"source":{"30b70baf":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","40f0a90a":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","d8f7995b":"df_train.head()","d77b682d":"df_train.info()\ndf_test.info()","32100e6a":"df_train.describe()","ea4c8fd6":"df_train.describe(include ='O')","3708b9ea":"df_survived = df_train.drop(df_train[df_train['Survived'] == 0].index)","cfbf2f83":"sns.histplot(data = df_survived, x = 'Sex', shrink=.8)\nsns.histplot(data = df_train, x = 'Sex', shrink=.8)","640144d9":"df_train[['Pclass', 'Survived']].groupby('Pclass').sum()","7c3c3c12":"df_train['Pclass'].value_counts()\nprint(f\"percentage of First class passangers surviving: {136\/216}\")\nprint(f\"percentage of Second class passangers surviving: {87\/184}\")\nprint(f\"percentage of Third class passangers surviving: {119\/491}\")","802137a3":"sns.histplot(data = df_survived, x = 'Age', bins = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], color='green').set_title('Total people(Blue) vs people surviving(Green)')\nsns.histplot(data = df_train, x = 'Age', bins = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100])","59b2b01e":"g = sns.catplot(x='SibSp', y='Survived', kind='bar', data=df_train)","6f004e75":"g = sns.catplot(x='Parch', y='Survived', kind='bar', data=df_train)","5b92d331":"df_train['Family'] = df_train['SibSp'] + df_train['Parch']\ndf_test['Family'] = df_test['SibSp'] + df_test['Parch']","c4ccaf2a":"g = sns.catplot(x='Family', y='Survived', kind='bar', data=df_train)","21c9560d":"sns.histplot(data = df_survived, x = 'Fare', bins = 20, color='green')\nsns.histplot(data = df_train, x = 'Fare', bins = 20)","56b738a4":"df_sur = df_survived[['Embarked', 'Survived']].groupby('Embarked').sum()","f7019ac3":"print(\"Percentage of people survived embarked from:\")\nprint(f\"S: {df_sur.iloc[2]['Survived']\/df_train['Embarked'].value_counts()['S']}\")\nprint(f\"C: {df_sur.iloc[0]['Survived']\/df_train['Embarked'].value_counts()['C']}\")\nprint(f\"Q: {df_sur.iloc[1]['Survived']\/df_train['Embarked'].value_counts()['Q']}\")","9a1bb664":"sns.boxplot(x='Pclass', y='Age', data=df_train, showmeans=True)","3af59c90":"def getmean(cols):\n    if pd.isna(cols[0]):\n        if(cols[1] == 1):\n            return 37\n        elif(cols[1] == 2):\n            return 29\n        else:\n            return 24\n    return cols[0]","84b882f1":"df_train['Age'] = df_train[['Age', 'Pclass']].apply(getmean, axis=1)\ndf_test['Age'] = df_test[['Age', 'Pclass']].apply(getmean, axis=1)","98e90f32":"df_train.info()\ndf_test.info()","7bcc816a":"df_train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Parch', 'SibSp'],axis=1, inplace=True)\npid = df_test['PassengerId']\ndf_test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Parch', 'SibSp'],axis=1, inplace=True)","072676e4":"df_train['Embarked'] = df_train['Embarked'].fillna(df_train['Embarked'].mode()[0])\ndf_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].mode()[0])","90ce4532":"df_train.info()\ndf_test.info()","e6010415":"df_train.head()","18543f18":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(df_train['Sex'])\ndf_train['Sex'] = le.transform(df_train['Sex'])\nle.fit(df_test['Sex'])\ndf_test['Sex'] = le.transform(df_test['Sex'])\nle.fit(df_train['Embarked'])\ndf_train['Embarked'] = le.transform(df_train['Embarked'])\ndf_test['Embarked'] = le.transform(df_test['Embarked'])\ndf_test.head()","6af9ba83":"X_train = df_train.drop(['Survived'], axis=1)\ny_train = df_train['Survived']","e2eb3712":"clf = RandomForestClassifier(criterion='entropy', max_depth=2, max_features='sqrt',\n                       min_samples_leaf=10, min_samples_split=9,\n                       n_estimators=1200, random_state=42)\nclf.fit(X_train, y_train)","c389d38e":"clf.score(X_train, y_train)","6e31b568":"y_pred = clf.predict(df_test)","a077ed8e":"df_out = pd.DataFrame({'PassengerId': pid, 'Survived': y_pred})\ndf_out.to_csv('titanic_out.csv', index = False)","512d7351":"# Sex","adafb1b3":"### We can see that older people tend to buy tickets of higher class, so we can use Pclass to fill in missing age variables (mean age of each Pclass)","8822e31f":"# Filling in missing data","2b9ed337":"### Filling missing Embarked and Fare data using most common entries i.e. mode","69ee5a53":"## Inference from the dataframes:\n1. Age, Cabin, Embarked have missing values in training set\n2. Age, Cabin, Fare have missing values in test set\n3. DF contains Data of multiple type, so will have to convert to use based on model we decide to use.\n4. PassengerId, name, Cabin does not have any significance for our prediction objective\n5. Most of the people are male and embarked at S i.e. Southampton","617bd720":"##### **It is apparent that passangers paying more fare have better survival rates.**","8f415f91":"# Passenger Class","ee2ba8c7":"# Fare","9ac6a0f0":"# Converting labelled data to numeric data for model processing","ecc4bec2":"##### **Passengers having relatively less number of family members have better survival rates, we may drop SibSp and Parch and keep Family as a feature**","579c9e67":"# Using Random Forest to fit our data and prediction","d81df69b":"# Basic Data Inference","6e2e54e5":"##### **Embarkment still has some effect on survival rates but they are not clearly apparent**","7283b6ea":"# Embarked","41b03312":"# Age","341b9673":"##### **Majority of the females survived while majority of males did not survive.**\n* sex must be included in classification","a27b1b61":"##### **Passengers having age in mid-range have relatively lower survival rates as compared to relatively younger and older passengers**","5e6d63b4":"### Dropping the non-useful features","a1fd1b08":"# Siblings and Parents","1d4692e7":"##### **Higher the class -> Higher chances of surviving**\n* Passenger Class must be included in classification","f657e138":"# Exploratory Data Analysis"}}