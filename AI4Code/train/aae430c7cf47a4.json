{"cell_type":{"a2e0dfa6":"code","0d82cb36":"code","81df3cf9":"code","758e66f0":"code","03241b0f":"code","e35dd653":"code","6d031f3b":"code","19b5a35a":"code","dd5f92d2":"code","afb191b5":"code","dd6fe62c":"code","ffb6f633":"code","f6bec3ab":"code","2308fc78":"code","385d017f":"code","4d3c67e2":"code","b2b2a29d":"code","9a08a6fe":"code","08202dd6":"code","ef8d4760":"code","06e2cd81":"code","4d34f96a":"code","75eb1b12":"code","7034bae5":"code","f657a41b":"code","50b6a8c2":"code","929326bc":"code","0ec5fd7a":"code","5204407f":"code","bb542da0":"code","94427dfe":"code","84b23880":"code","f4d76398":"code","607c3b15":"code","506a2fa3":"code","6a94a446":"code","78b192cc":"code","9c8c245e":"code","11aa9ce8":"code","3ef9258f":"code","c6b0bf0c":"code","8a0ac1d3":"markdown","62207f49":"markdown","1eabd2cc":"markdown","a1185296":"markdown"},"source":{"a2e0dfa6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d82cb36":"#Importing the necessary libraries\n\nimport matplotlib.pyplot as plt\nimport math\nimport random\n\n\n","81df3cf9":"# Loading the dataset\ndb = pd.read_csv('..\/input\/forest-fires-data-set\/forestfires.csv')","758e66f0":"#Printing the first 5  rows of the loaded Dataset\ndb.head()","03241b0f":"# Extracting the dataset information\ndb.info()","e35dd653":"# Libraries and configurations for figure plotting\nplt.style.use('seaborn')\ndb.hist(bins=30, figsize=(20,15)) # plotting the histogram","6d031f3b":"# Coverting the days and months into the integers\ndb.month.replace(('jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'),(1,2,3,4,5,6,7,8,9,10,11,12), inplace=True)\ndb.day.replace(('mon','tue','wed','thu','fri','sat','sun'),(1,2,3,4,5,6,7), inplace=True)","19b5a35a":"#Printing after replacement\ndb.head(10)","dd5f92d2":"# Correlation analysis of the dataset\ndb.corr()","afb191b5":"db.describe() # Generate descriptive statistics that summarize the central tendency,dispersion and shape of a dataset's distribution","dd6fe62c":"from sklearn.model_selection import train_test_split\n# dividing the data into test and training sets\ntrain_set, test_set = train_test_split(db, test_size=0.2, random_state=42)\nwork_set = train_set.copy() # assigning a copy of train set to work_set","ffb6f633":"train_set.head()","f6bec3ab":"test_set.head()","2308fc78":"work_set.plot(kind='scatter', x='X', y='Y', alpha=0.1, s=300) # scatter plot for the dataset","385d017f":"work_set.plot(kind='scatter', x='X', y='Y', alpha=0.2, s=20*work_set['area']) # plotting the graphs by increasing the size to see the affect of area over the datapoints","4d3c67e2":"# Extracting featuresfrom the dataset\n\n# converting to list\nx_values = list(work_set['X'])\ny_values = list(work_set['Y'])\n\nloc_values = []\n\nfor index in range(0, len(x_values)):\n    temp_value = []\n    temp_value.append(x_values[index])\n    temp_value.append(y_values[index])\n    loc_values.append(temp_value)","b2b2a29d":"# counting the instances location in the dataset\n\ndef count_points(x_points, y_points, scaling_factor):\n    count_array = []\n    \n    for index in range(0, len(x_points)):\n        temp_value = [x_points[index], y_points[index]]\n        count = 0\n        \n        for value in loc_values:\n            if(temp_value == value):\n                count = count + 1\n        count_array.append(count * scaling_factor )\n\n    return count_array","9a08a6fe":"work_set.head()\n","08202dd6":"# Plotting the histogram for the RH attribute\nfrom pandas.plotting import scatter_matrix\n\nattributes = ['RH']\nscatter_matrix(work_set[attributes], figsize=(15,10))\n","ef8d4760":"# Plotting the histogram for the temp attribute\nfrom pandas.plotting import scatter_matrix\n\nattributes = ['temp']\nscatter_matrix(work_set[attributes], figsize=(15,10))","06e2cd81":"# Plotting the histogram for the DMC attribute\nfrom pandas.plotting import scatter_matrix\n\nattributes = ['DMC']\nscatter_matrix(work_set[attributes], figsize=(15,10))","4d34f96a":"# Plotting the histogram for the area attribute\nfrom pandas.plotting import scatter_matrix\n\nattributes = ['area']\nscatter_matrix(work_set[attributes], figsize=(15,10))","75eb1b12":"db['month'].unique()","7034bae5":"db['day'].unique()","f657a41b":"db['area'].unique()","50b6a8c2":"# defining the method for plotting the histogram\ndef histogram_plot(db, title):\n    plt.figure(figsize=(8, 6))    \n    \n    ax = plt.subplot()    \n    ax.spines[\"top\"].set_visible(False)    \n    ax.spines[\"bottom\"].set_visible(False)    \n    ax.spines[\"right\"].set_visible(False)    \n    ax.spines[\"left\"].set_visible(False)\n    \n    ax.get_xaxis().tick_bottom()\n    ax.get_yaxis().tick_left() \n    \n    plt.title(title, fontsize = 22)\n    plt.hist(db, edgecolor='black', linewidth=1.2)\n    plt.show()","929326bc":"# Scattering the plot with the help of the location\n\nplt.figure(figsize=(8, 6))    \n    \nax = plt.subplot()    \nax.spines[\"top\"].set_visible(False)    \nax.spines[\"bottom\"].set_visible(False)    \nax.spines[\"right\"].set_visible(False)    \nax.spines[\"left\"].set_visible(False)\n    \nax.get_xaxis().tick_bottom()\nax.get_yaxis().tick_left() \n    \nplt.title(\"Fire location plot\", fontsize = 22)\nplt.scatter(x_values, y_values, s = count_points(x_values, y_values, 25), alpha = 0.3)\nplt.show()","0ec5fd7a":"#Encoding the data using the Label Encoder\n\nfrom sklearn.preprocessing import LabelEncoder\n\nmonth_encoder = LabelEncoder()\nday_encoder = LabelEncoder()\n\nmonths = db['month']\ndays = db['day']\n\nmonth_1hot = month_encoder.fit_transform(months) # label encoding month\nday_1hot = day_encoder.fit_transform(days) # label encoding day","5204407f":"month_1hot\n","bb542da0":"day_1hot\n","94427dfe":"# Standardizing the data (Feature Scaling) so that all the features are of the same scale\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nnumerical_features = db.drop(['month', 'day'], axis=1)\nscaled_features = scaler.fit_transform(numerical_features)","84b23880":"scaled_features","f4d76398":"from sklearn.base import BaseEstimator, TransformerMixin\n\n# defining the methods  for the AttributeSelector\nclass AttributeSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X):\n        return X[self.attribute_names].values","607c3b15":"from sklearn.preprocessing import MultiLabelBinarizer\n# defining the methods  for the CustomBinarizer\nclass CustomBinarizer(BaseEstimator, TransformerMixin):\n    def __init__(self, class_labels):\n        self.class_labels = class_labels\n    def fit(self, X, y=None,**fit_params):\n        return self\n    def transform(self, X):\n        return MultiLabelBinarizer(classes=self.class_labels).fit_transform(X)","506a2fa3":"from sklearn.pipeline import Pipeline\n\n\nnumerical_attributes = ['X', 'Y', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain'] # Selecting the numerical columns\ncategorical_attributes = ['month', 'day'] # # Selecting the categorical columns\ncategorical_classes = np.concatenate((db['month'].unique(), db['day'].unique()), axis=0)\n\n# creating the separate numerical and categorical pipelines\nnumerical_pipeline = Pipeline([\n    ('selector', AttributeSelector(numerical_attributes)),\n    ('standardize', StandardScaler()),\n])\ncategorical_pipeline = Pipeline([\n    ('selector', AttributeSelector(categorical_attributes)),\n    ('encode', CustomBinarizer(categorical_classes)),\n])","6a94a446":"#FFMC distrubution\n#  Creating Histogram based on FFMC attribute\nhistogram_plot(db['FFMC'], title = \"FFMC distribution\")\nplt.show()","78b192cc":"#DC distrubution\n#  Creating Histogram based on DC attribute \nhistogram_plot(db['DC'], title = \"DC distribution\")\nplt.show()","9c8c245e":"#  Separating the features and labels into X and Y\nX = db.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11]].values\nY = db.iloc[:, 11].values","11aa9ce8":"# Separating the test and training set\ntrain_x, test_x, train_y, test_y = train_test_split(X,Y, test_size=0.3, random_state = 9)\nmse_values = []\nvariance_score = []\n","3ef9258f":"train_x","c6b0bf0c":"train_y","8a0ac1d3":"# Finding the unique values in month , day and area ( the values could be repetitive)","62207f49":"# forest Fire\n ![title](https:\/\/cdn.downtoearth.org.in\/library\/large\/2019-05-10\/0.05258500_1557487635_fire2.jpg)\n","1eabd2cc":"Thanku for reading this notebook please upvote this notebook","a1185296":" After all the data cleaning and modifications, we have our training and test sets ready. They can be easily consumed by the algorithm of our choice"}}