{"cell_type":{"140ef2c8":"code","0b703aa6":"code","7272ee7a":"code","a0278c4d":"code","1c5c797d":"code","da189ebc":"code","84b07390":"code","3112dc69":"code","44c1876e":"code","9786236f":"code","a453ba92":"code","3502e563":"code","6a7709e1":"code","4dab06fb":"code","7b86ed48":"code","6750f4e1":"code","f295cad4":"code","b4c88930":"code","9466f5b2":"code","93f12748":"code","960102b2":"code","b84634a7":"code","3daaa251":"code","af0daea4":"code","eb316a5d":"code","1ea28136":"code","fd00d3ce":"code","6610b9ac":"code","8588a915":"code","90bac0a0":"code","78c677a5":"code","e6a574bd":"code","822ff93b":"code","1e789245":"code","7d4700ab":"code","4e12b8c0":"code","c6acf7eb":"code","e46e886c":"markdown","fe3fca95":"markdown","1bbb4a07":"markdown","db40daea":"markdown","ae7e55c1":"markdown","0bff1e6e":"markdown","f5227490":"markdown","3296b072":"markdown","979178e0":"markdown","f333d957":"markdown","e05fb7dc":"markdown","2b30e1d5":"markdown","15cf77f1":"markdown","99d2ca21":"markdown","4c84ed49":"markdown","0edb3b39":"markdown","f79e583d":"markdown","f5219ace":"markdown","8b85a94b":"markdown","49ea114d":"markdown"},"source":{"140ef2c8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0b703aa6":"train = pd.read_csv('\/kaggle\/input\/us-adult-income-update\/train.csv')\ncleaned_census = pd.read_csv('\/kaggle\/input\/us-adult-income-update\/census.csv')\ncensus = pd.read_csv('\/kaggle\/input\/us-adult-income-update\/census.csv')\ntest = pd.read_csv('\/kaggle\/input\/us-adult-income-update\/test.csv')\n","7272ee7a":"#census.profile_report()","a0278c4d":"train.head()","1c5c797d":"census.head()","da189ebc":"test.head()","84b07390":"print(train.shape)\nprint(test.shape)\nprint(census.shape)","3112dc69":"print(train.shape[0]+test.shape[0])\nprint(test.shape[0]\/census.shape[0])","44c1876e":"census['income_above_50K']=census['income'].map({'<=50K':0, '>50K':1})","9786236f":"census.head()","a453ba92":"def plot(column):\n    if census[column].dtype != 'int64':\n        f, axes = plt.subplots(1,1,figsize=(15,5))\n        sns.countplot(x=column, hue='income_above_50K', data = census)\n        plt.xticks(rotation=90)\n        plt.suptitle(column,fontsize=20)\n        plt.show()\n    else:\n        g = sns.FacetGrid(census, row=\"income_above_50K\", margin_titles=True, aspect=4, height=3)\n        g.map(plt.hist,column,bins=100)\n        plt.show()\n    plt.show()","3502e563":"plot('age')","6a7709e1":"plot('workclass')","4dab06fb":"plot('fnlwgt')","7b86ed48":"plot('education')","6750f4e1":"plot('education-num')","f295cad4":"plot('marital-status')","b4c88930":"plot('occupation')","9466f5b2":"over_50k_count_by_occ=pd.DataFrame(census[census['income_above_50K']==1]['occupation'].value_counts())\ncount_by_occ=pd.DataFrame(census['occupation'].value_counts())\nmerged=pd.merge(over_50k_count_by_occ,count_by_occ,left_index=True,right_index=True)\nmerged.rename(columns={'occupation_x':'income_over_50K','occupation_y':'Total pop'}, inplace=True)\nmerged['percent_of_above_50K']=merged['income_over_50K']\/(merged['Total pop'])\nmerged=merged.sort_values(by='percent_of_above_50K',axis=0,ascending=False)\nmerged","93f12748":"plot('relationship')","960102b2":"f, axes = plt.subplots(1,1,figsize=(15,5))\nsns.countplot(data=census,x='relationship',hue='marital-status')\nplt.show()","b84634a7":"plot('race')","3daaa251":"plot('sex')","af0daea4":"plot('native-country')","eb316a5d":"plot('capital-gain')","1ea28136":"plot('capital-loss')","fd00d3ce":"plot('hours-per-week')","6610b9ac":"def data_cleaner(data):\n    data['is_female']=data['sex'].map({'Male':0, 'Female':1})\n    \n    data['is_private']=data['workclass'].map({'Private':1})\n    \n    data['is_private'].fillna(0, inplace=True)\n    \n    data['education'] = data['education'].map(\n        {'Preschool':'level_1_ed','1st-4th':'level_1_ed','5th-6th':'level_1_ed','7th-8th':'level_1_ed','9th':'level_1_ed','10th':'level_1_ed','11th':'level_1_ed','12th':'level_1_ed','HS-grad':'level_1_ed',\n        'Prof-school':'level_2_ed','Assoc-acdm':'level_2_ed','Assoc-voc':'level_2_ed','Some-college':'level_2_ed',\n        'Bachelors':'level_3_ed','Masters':'level_3_ed','Doctorate':'level_3_ed'})\n    \n    data['is_couple']=data['marital-status'].map({'Married-civ-spouse':1,'Never-married':0,'Divorced':0,'Separated':0,'Widowed':0,'Married-spouse-absent':0,'Married-AF-spouse':1})\n    \n    occupation_level_map={\n    'Exec-managerial':'level_3_occ',\n    'Prof-specialty':'level_3_occ',\n    'Armed-Forces':'level_3_occ',\n    'Protective-serv':'level_3_occ',\n    'Tech-support':'level_2_occ',\n    'Sales':'level_2_occ',\n    'Craft-repair':'level_2_occ',\n    'Transport-moving':'level_2_occ',\n    'Adm-clerical':'level_1_occ',\n    'Machine-op-inspct':'level_1_occ',\n    'Farming-fishing':'level_1_occ',\n    '?':'level_1_occ',\n    'Handlers-cleaners':'level_1_occ',\n    'Other-service':'level_1_occ',\n    'Priv-house-serv':'level_1_occ'}\n    data['occupation']=data['occupation'].map(occupation_level_map)\n    \n    race_map={'Black':0, 'White':1, 'Asian-Pac-Islander':0, 'Other':0,'Amer-Indian-Eskimo':0}\n    data['is_white']=data['race'].map(race_map)\n    \n    native_country_map=pd.DataFrame(data=census['native-country'].unique(),columns=['Country'])\n    native_country_map['map']=native_country_map['Country'].apply(lambda x:1 if x=='United-States' else 0)\n    native_country_map=dict(zip(native_country_map['Country'],native_country_map['map']))\n    data['is_US_native']=data['native-country'].map(native_country_map)\n    \n    data = pd.get_dummies(data,columns =['education','occupation'], dtype = int, drop_first=True)\n    \n    data['income_above_50K']=data['income'].map({'<=50K':0, '>50K':1})\n    \n    data.drop(labels=['income','sex','workclass','marital-status','relationship','race','native-country'],axis=1,inplace=True)\n    \n    return data","8588a915":"data_cleaner(cleaned_census).head()","90bac0a0":"cleaned_train=data_cleaner(train)","78c677a5":"cleaned_train.info()","e6a574bd":"cleaned_test=data_cleaner(test)","822ff93b":"cleaned_test.info()","1e789245":"X=cleaned_train.drop(labels=['income_above_50K'],axis=1)\ny=cleaned_train['income_above_50K']\n\ntest_X=cleaned_test.drop(labels=['income_above_50K'],axis=1)\ntest_y=cleaned_test['income_above_50K']","7d4700ab":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodels = []\nmodels.append(('LogisticRegression', LogisticRegression()))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier()))\nmodels.append(('XGBClassifier', XGBClassifier()))\nmodels.append(('GradientBoostingClassifier', GradientBoostingClassifier()))\n#models.append(('MLPClassifier', MLPClassifier()))\nmodels.append(('KNeighborsClassifier', KNeighborsClassifier()))\nmodels.append(('RandomForestClassifier', RandomForestClassifier()))\n\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=0)\n    cv_results = cross_val_score(model, X, y, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","4e12b8c0":"model=GradientBoostingClassifier(random_state=0,learning_rate=0.2,n_estimators=200)\nmodel.fit(X,y)\npred_y=model.predict(test_X)\n\nfrom sklearn import metrics\n\ncm = metrics.confusion_matrix(test_y, pred_y)\nplt.figure(figsize=(9,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Confusion Matrix - score:'+str(metrics.accuracy_score(test_y,pred_y))\nplt.title(all_sample_title, size = 15);\nplt.show()\nprint(metrics.classification_report(test_y,pred_y))","c6acf7eb":"print(census['income_above_50K'].value_counts())\nprint(census['income_above_50K'].value_counts()[0]\/sum(census['income_above_50K'].value_counts()))","e46e886c":"Note sure on what to do with these two column, but going to keep them since they are numerical anyway.","fe3fca95":"I will also leave this as it it","1bbb4a07":"## Importing the data and first look","db40daea":"I don't think I am going to use column in my final model, but will still test whether it affects the model, positively or negatively. For data cleaning purpose, I am going to keep the **Private** column and convert the rest to **Others**","ae7e55c1":"## Data cleaning function","0bff1e6e":"A very low proportion of females have income above 50K. I am going to change the values to **is_female** column with 1's and 0's","f5227490":"Again, a simple transformation of **is_US-native** should be sufficient here.","3296b072":"## Train and test data cleaning","979178e0":"However, it is still working well than just guessing that everyone is below 50K by 13%","f333d957":"Not sure how to interpret the above plot, but I will keep it as it is.","e05fb7dc":"## Census data EDA","2b30e1d5":"I am going to group this into 3 parts:\n1. All above 30% as level_3_occ\n2. Between 20% and 30% as level_2_occ\n3. Below 20% as level_1_occ\n","15cf77f1":"This column looks like it gives the same information as the marital status. I am going to drop this column for my initial model. Maybe I will try adding it or replacing it with the marital-status for any test run to see how it affects the model.","99d2ca21":"I will assume the data cleaner function is working as expected as it didn't return any null values.","4c84ed49":"TO DO:\n1. Experiment with removing some columns - Capital gain\/loss.\n2. Adjust the train data such that it has balanced split between above and below 50K.","0edb3b39":"I am going to transform this column by changing **Married-civ-spouse** and **Married-AF-spuse** to **is_couple**.","f79e583d":"## Building the model","f5219ace":"The graph is as expected in terms of distribution of those earning above 50K have a normal distribution and majority at eraly age are earning below 50K. A look at education levels should further support this as those who have taken a higher education will start full time work at a later age but will get a hiigher salary.","8b85a94b":"For this column, I am going to do a simple **is_white** transformation","49ea114d":"I will group the above labels as below and perform a one hot encoding.\n\n1. Preschool < 1st-4th < 5th-6th < 7th-8th < 9th < 10th < 11th < 12th < HS-grad as **'level_1_ed'**\n2. Prof-school < Assoc-acdm < Assoc-voc < Some-college as **'level_2_ed'**\n3. Bachelors < Masters < Doctorate as **'level_3_ed'**"}}