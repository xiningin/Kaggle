{"cell_type":{"83190015":"code","fdf56301":"code","05edffc9":"code","3d2c8f0d":"code","9704d685":"code","88e1ea7c":"code","1cca7da1":"code","29d4f90e":"code","31efc8e1":"code","5dccaf26":"code","2428e8f8":"code","9d6dd3d3":"code","2cb4e8b3":"code","290c85b4":"code","1eb9c46a":"code","14bbb931":"code","cbce6ae3":"code","e465035a":"code","9704127f":"markdown","997dbef4":"markdown","6d730744":"markdown","1a506a56":"markdown","7cfbaa2c":"markdown"},"source":{"83190015":"# Importing the libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom scipy.cluster.hierarchy import linkage, dendrogram, cut_tree","fdf56301":"# Load the iris dataset\ndf = datasets.load_iris()\ndf = pd.DataFrame(df.data, columns = df.feature_names)\ndf.head() # See the first 5 rows","05edffc9":"# To know number of rows and collumns\ndf.shape","3d2c8f0d":"# To find if any null value is present\ndf.isnull().sum()","9704d685":"# To see summary statistics\ndf.describe().T","88e1ea7c":"# To find outliers\ncols = df.columns\nfor i in cols:\n    sns.boxplot(y=df[i])\n    plt.show()","1cca7da1":"# To remove outliers from 'sepal width (cm)'\nq1 = df['sepal width (cm)'].quantile(0.25)\nq3 = df['sepal width (cm)'].quantile(0.75)\niqr = q3 - q1\ndf = df[(df['sepal width (cm)'] >= q1-1.5*iqr) & (df['sepal width (cm)'] <= q3+1.5*iqr)]\ndf.shape # To find out the number of rows and column after outlier treatment","29d4f90e":"# Blocplot for sepal width (cm) after outlier treatment\nsns.boxplot(y=df['sepal width (cm)'])\nplt.show()","31efc8e1":"# Standardizing to avoid bias\nstandard_scaler = StandardScaler()\ndf_norm = standard_scaler.fit_transform(df)","5dccaf26":"#To find the optimal no. of cluster\ncluster_range = range(1,20)\ncluster_errors = []\n\nfor num_cluster in cluster_range:\n    clusters = KMeans(num_cluster, n_init = 10)\n    clusters.fit(df_norm)\n    labels = clusters.labels_\n    centroids = clusters.cluster_centers_\n    cluster_errors.append(clusters.inertia_)\n    \nclusters_df = pd.DataFrame({'num_cluster': cluster_range, 'cluster_errors': cluster_errors})\nclusters_df[0:20]","2428e8f8":"#Ploting elbow curve or sree to find the no. of cluster\nplt.figure(figsize=(12,6))\nplt.plot(clusters_df.num_cluster, clusters_df.cluster_errors, marker = 'o') \nplt.xlabel('Values of K') \nplt.ylabel('Error') \nplt.title('The Elbow Method using Distortion') \nplt.show() ","9d6dd3d3":"# Creating object of the model and fitting it\nmodel = KMeans(n_clusters=3, max_iter=50)\nmodel.fit(df)","2cb4e8b3":"#analysis of cluster found\ndf.index = pd.RangeIndex(len(df.index))\ndf_km = pd.concat([df, pd.Series(model.labels_)], axis=1)\ndf_km.columns = ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)', 'ClusterID']\n\nkm_clusters_Slength = pd.DataFrame(df_km.groupby(['ClusterID']).agg({'sepal length (cm)':'mean'}))\nkm_clusters_Swidth = pd.DataFrame(df_km.groupby(['ClusterID']).agg({'sepal width (cm)':'mean'}))\nkm_clusters_Plength = pd.DataFrame(df_km.groupby(['ClusterID']).agg({'petal length (cm)':'mean'}))\nkm_clusters_Pwidth = pd.DataFrame(df_km.groupby(['ClusterID']).agg({'petal width (cm)':'mean'}))","290c85b4":"df2 = pd.concat([pd.Series([0,1,2]), km_clusters_Slength, km_clusters_Swidth, km_clusters_Plength, km_clusters_Pwidth\n                ], axis=1)\ndf2.columns = ['ClusterID','sepal length (cm)_mean','sepal width (cm)_mean','petal length (cm)_mean',\n               'petal width (cm)_mean']\ndf2.head()","1eb9c46a":"sns.countplot(x=df_km.ClusterID)\nplt.title('Count plot for ClusterID column')\nplt.show()","14bbb931":"#heirarchical clustering with full dendrogram\nplt.figure(figsize=(15,7))\nmergings = linkage(df_km, method = 'ward', metric='euclidean')\n\n# set cut-off to 50\nmax_d = 7.08                # max_d as in max_distance\ndendrogram(mergings,\n           truncate_mode='lastp',  # show only the last p merged clusters\n           p=150,                  # Try changing values of p\n           leaf_rotation=90.,      # rotates the x axis labels\n           leaf_font_size=8.,      # font size for the x axis labels\n          )\n\nplt.axhline(y=max_d, c='k')\nplt.show()","cbce6ae3":"#heirarchical clustering with full dendrogram for 50\nplt.figure(figsize=(15,7))\nmergings = linkage(df_km, method = 'ward', metric='euclidean')\n\n# set cut-off to 50\nmax_d = 7.08                # max_d as in max_distance\ndendrogram(mergings,\n           truncate_mode='lastp',  # show only the last p merged clusters\n           p=50,                  # Try changing values of p\n           leaf_rotation=90.,      # rotates the x axis labels\n           leaf_font_size=8.,      # font size for the x axis labels\n          )\n\nplt.axhline(y=max_d, c='k')\nplt.show()\n\n","e465035a":"# Scatter plot to visualize the clusters\nplt.figure(figsize=(10,7))\nsns.scatterplot(x='sepal length (cm)',y='sepal width (cm)', data=df_km, hue='ClusterID', palette=['green','blue','red'])\n\n# Plotting the centroids of the clusters\nplt.scatter(model.cluster_centers_[:, 0], model.cluster_centers_[:,1], \n            s = 100, c = 'yellow', label = 'Centroids')\nplt.show()","9704127f":"## Unsupervised Machine Learning - Clustering(Iris DataSet):\nTo predict the optimum number of clusters and represent it visually for the given Iris data set.","997dbef4":"- From the above two dendrogram we can say that there are three cluster","6d730744":"- From the above boxplot we can say that there are outliers in the column 'sepal width (cm)'","1a506a56":"- From the above elbow curve we can say that '3' is the optimal number of cluster ","7cfbaa2c":"- We can see that after outlier treatment the number of roes are reduced to 146 from 150"}}