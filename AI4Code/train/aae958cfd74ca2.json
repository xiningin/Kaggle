{"cell_type":{"338cc3cb":"code","70ba7551":"code","6ee570f1":"code","0cddcbb6":"code","38fcfc81":"code","69fbda43":"code","04899260":"code","5a76554c":"code","64524510":"code","7176ec0f":"code","0faf5ac0":"code","b72d24a6":"code","7af76a19":"code","abc01b87":"code","4a1aaa10":"code","e2f70e37":"code","ed899c66":"code","b4cb455e":"code","653c2b99":"code","3ea5583a":"code","6d8b94c8":"code","47b932e0":"code","67ccbfec":"code","71491f0d":"code","37e68f17":"code","7757df57":"code","6a53b60a":"code","360f66af":"code","893a13cb":"code","7449953d":"code","4d465c87":"code","266b690e":"markdown","96364fed":"markdown","e321184a":"markdown","5a93d1fb":"markdown","bc4fb617":"markdown","b8da3bed":"markdown","45cb0935":"markdown","b2a8a3ba":"markdown","67f12f9d":"markdown","690d8475":"markdown","04e862da":"markdown","0cdba748":"markdown","16254e37":"markdown","bb1001ad":"markdown","7020ff23":"markdown","c9d957cc":"markdown","6e927b36":"markdown","d91b3cbf":"markdown"},"source":{"338cc3cb":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss\nfrom catboost import CatBoostClassifier\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nimport time\nimport random\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.decomposition import PCA\nfrom sklearn.neighbors import LocalOutlierFactor\n\n# Pandas setting to display more dataset rows and columns\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', None)\npd.set_option('display.float_format', lambda x: '%.5f' % x)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70ba7551":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv\", low_memory=False)#, nrows=10000)\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv\", low_memory=False)\ntrain.info(memory_usage=\"deep\")","6ee570f1":"test.info(memory_usage=\"deep\")","0cddcbb6":"# Colors to be used for plots\ncolors = [\"lightcoral\", \"sandybrown\", \"darkorange\", \"mediumseagreen\",\n          \"lightseagreen\", \"cornflowerblue\", \"mediumpurple\", \"palevioletred\",\n          \"lightskyblue\", \"sandybrown\", \"yellowgreen\", \"indianred\",\n          \"lightsteelblue\", \"mediumorchid\", \"deepskyblue\"]","38fcfc81":"fig, axs = plt.subplots(ncols=2, nrows=1, figsize=(18, 8), gridspec_kw={'width_ratios': [2, 1]})\n\nbars = axs[0].bar(train[\"target\"].value_counts().sort_index().index,\n                  train[\"target\"].value_counts().sort_index().values,\n                  color=colors,\n                  edgecolor=\"black\")\naxs[0].set_title(\"Target distribution\", fontsize=20, pad=15)\naxs[0].set_ylabel(\"Count\", fontsize=14, labelpad=15)\naxs[0].set_xlabel(\"Target label\", fontsize=14, labelpad=10)\naxs[0].bar_label(bars, train[\"target\"].value_counts().sort_index().values,\n                 padding=3, fontsize=12)\naxs[0].bar_label(bars, [f\"{x:2.1f}%\" for x in train[\"target\"].value_counts().sort_index().values\/2000],\n                 padding=-20, fontsize=12)\naxs[0].margins(0.025, 0.06)\naxs[0].grid(axis=\"y\")\n\npie = axs[1].pie(train[\"target\"].value_counts(sort=False).sort_index().values,\n                 labels=train[\"target\"].value_counts(sort=False).sort_index().index,\n                 colors=colors,\n                 rotatelabels=True,\n                 textprops={\"fontsize\": 14})\naxs[1].axis(\"equal\")\nplt.show();","69fbda43":"df = pd.DataFrame()\ndf[\"id\"] = train[\"id\"]\ndf[\"target\"] = train[\"target\"]\ndf[\"id\"] = pd.cut(df[\"id\"], np.arange(0, 201000, 1000), right=False)\nvalues = df.groupby(\"id\")[\"target\"].value_counts(sort=False).values\nclasses = [\"Class_\" + str(x) for x in np.arange(9)]\n\ncols = 3\nrows = 3\nfig, axs = plt.subplots(ncols=cols, nrows=rows, figsize=(16,rows*4), sharey=False)\n\nplt.subplots_adjust(hspace = 0.35)\n\ni=0\nfor r in np.arange(0, rows, 1):\n    for c in np.arange(0, cols, 1):\n        axs[r, c].plot(np.arange(0, 200, 1),\n                       [values[x] for x in np.arange(i, 1800, 9)],\n                       color=colors[i])\n        axs[r, c].set_title(classes[i], fontsize=12, pad=5)\n        axs[r, c].set_xticks(np.arange(0, 250, 50))\n        axs[r, c].set_xticklabels([str(int(x))+\"k\" for x in axs[r, c].get_xticks()])\n        axs[r, c].set_xlabel(\"Dataframe id\")\n        axs[r, c].set_ylabel(\"Class labels qty per 1k rows\")\n        axs[r, c].set_ylim(0, 320)\n        i+=1\nfig.suptitle(\"Class labels distribution in the train dataset\", fontsize=20)\nplt.show();","04899260":"def make_data_plots(df, i=0):\n    \"\"\"\n    Makes value distribution histogram plots for a given dataframe features\n    \"\"\"\n    columns = df.drop([\"target\", \"id\"], axis=1).columns.values\n\n    cols = 3\n    rows = (len(columns) - i) \/\/ cols + 1\n\n    fig, axs = plt.subplots(ncols=cols, nrows=rows, figsize=(16,rows*4), sharey=True)\n    plt.subplots_adjust(hspace = 0.2)\n    for r in np.arange(0, rows, 1):\n        for c in np.arange(0, cols, 1):\n            if i >= len(columns):\n                axs[r, c].set_visible(False)\n            else:\n                axs[r, c].hist(df[columns[i]].values, bins = 30,\n                               color=random.choice(colors),\n                               edgecolor=\"black\")\n                axs[r, c].set_title(columns[i], fontsize=12, pad=5)\n            i+=1","5a76554c":"make_data_plots(train)","64524510":"def make_nonzero_data_plots(df, i=0):\n    \"\"\"\n    Makes nonzero value distribution histogram plots for a given dataframe features\n    \"\"\"    \n    \n    columns = df.drop([\"target\", \"id\"], axis=1).columns.values\n\n    cols = 3\n    rows = (len(columns) - i) \/\/ cols + 1\n\n    fig, axs = plt.subplots(ncols=cols, nrows=rows, figsize=(16,rows*4), sharey=False)\n    plt.subplots_adjust(hspace = 0.2)\n    for r in np.arange(0, rows, 1):\n        for c in np.arange(0, cols, 1):\n            if i >= len(columns):\n                axs[r, c].set_visible(False)\n            else:\n                axs[r, c].hist(df[df[columns[i]] > 0][columns[i]].values, bins = 30,\n                               color=random.choice(colors),\n                               edgecolor=\"black\")\n                axs[r, c].set_title(columns[i], fontsize=12, pad=5)\n            i+=1","7176ec0f":"make_nonzero_data_plots(train)","0faf5ac0":"x = -1*np.arange(len(test.drop([\"id\"], axis=1).columns))\n\nfig, ax = plt.subplots(figsize=(16, 30))\nbars = ax.barh(x+0.2, train.drop([\"id\", \"target\"], axis=1).astype(bool).sum(axis=0).values \/ train.shape[0],\n               height=0.4, color=\"cornflowerblue\", label=\"Train dataset\", edgecolor=\"black\")\nbars2 = ax.barh(x-0.2, test.drop([\"id\"], axis=1).astype(bool).sum(axis=0).values \/ test.shape[0],\n                height=0.4, color=\"palevioletred\", label=\"Test dataset\", edgecolor=\"black\")\nax.set_title(\"Fraction of nonzero values in the both datasets\", fontsize=30, pad=15)\nax.set_ylabel(\"Feature names\", fontsize=20, labelpad=15)\nax.set_xlabel(\"Fraction of nonzero values\", fontsize=20, labelpad=15)\nax.set_xticks(np.arange(0, 0.8, 0.05))\nax.set_yticks(x)\nax.set_yticklabels(list(test.drop([\"id\"], axis=1).columns.values))\nax.tick_params(axis=\"x\", labelsize=15)\nax.tick_params(axis=\"y\", labelsize=14)\nax.grid(axis=\"x\")\nax.legend(fontsize=15)\nax2 = ax.secondary_xaxis('top')\nax2.set_xticks(np.arange(0, 0.8, 0.05))\nax2.set_xlabel(\"Fraction of nonzero values\", fontsize=20, labelpad=15)\nax2.tick_params(axis=\"x\", labelsize=15)\nplt.margins(0.05, 0.01)","b72d24a6":"pca = PCA(n_components=2)\nX_reduced = pd.DataFrame(pca.fit_transform(train.drop([\"id\", \"target\"], axis=1)))\n\nfig, ax = plt.subplots(figsize=(16, 9))\nax.scatter(X_reduced[0], X_reduced[1], c=LabelEncoder().fit_transform(train[\"target\"]), cmap=\"tab10\")\nax.set_title(\"Scatter plot of the original train set reduced to 2 dimensions\", fontsize=20, pad=15)\nplt.show();","7af76a19":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(train.drop([\"id\", \"target\"], axis=1))\n\npca = PCA(n_components=2)\nX_reduced = pd.DataFrame(pca.fit_transform(X_scaled))\n\nfig, ax = plt.subplots(figsize=(16, 9))\nax.scatter(X_reduced[0], X_reduced[1], c=LabelEncoder().fit_transform(train[\"target\"]), cmap=\"tab10\")\nax.set_title(\"Scatter plot of the scaled train set reduced to 2 dimensions\", fontsize=20, pad=15)\nplt.show();","abc01b87":"# iso_forest = IsolationForest(n_jobs=-1, random_state=42, n_estimators=3000)\n# iso_forest.fit(train.drop([\"id\", \"target\"], axis=1))\n# scores = iso_forest.decision_function(train.drop([\"id\", \"target\"], axis=1))\n# print(f\"Anomalies found in the train dataset: {(scores < 0).sum()}\")\n# to_drop = train.loc[scores < 0].index","4a1aaa10":"# # Target distribution in detected anomalies\n# train.loc[(scores < 0), \"target\"].value_counts()","e2f70e37":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(train.drop([\"id\", \"target\"], axis=1))\nlof = LocalOutlierFactor(n_jobs=-1)\nlof.fit(X_scaled)\nscores = lof.negative_outlier_factor_\nscore_threshold = -1.93\nto_drop = train.loc[scores < score_threshold].index\nprint(f\"Anomalies found in the train dataset: {(scores < score_threshold).sum()}\")","ed899c66":"# Target distribution in detected anomalies\ntrain.loc[(scores < score_threshold), \"target\"].value_counts()","b4cb455e":"# Dropping anomaly rows detected with Isolation Forest\ntrain.drop(axis=0, index=set(to_drop), inplace=True)\ntrain.shape","653c2b99":"train.drop([\"id\", \"target\"], axis=1).duplicated(keep=False).sum()","3ea5583a":"def delete_duplicates(df):\n    \"\"\"\n    Finds duplicates in a given DataFrame and deletes rows with identical features values but different target. \n    \"\"\"\n    \n    # Copying duplicate rows in a new dataset and getting their indices\n    idx = df.drop([\"id\", \"target\"], axis=1).duplicated(keep=False)\n    duplicates = df.loc[idx == True].copy()\n    features = [x for x in duplicates.columns if \"feature\" in x]\n    idx = duplicates[\"id\"]\n    \n    # Checking if which rows with equal feature values have different target\n    indx_to_drop = []\n    for index in idx:\n        for row in idx:\n            if (row != index) and (row not in indx_to_drop):\n                if duplicates.loc[index, features].equals(duplicates.loc[row, features]):\n                    if duplicates.loc[index, \"target\"] != duplicates.loc[row, \"target\"]:\n    #                     print(f\"Found duplicates with different targets: {index} - {duplicates.loc[index, 'target']} and {row} - {duplicates.loc[row, 'target']}\")\n                        indx_to_drop.append(index)\n                        indx_to_drop.append(row)\n    #                 else:\n    #                     print(f\"Found duplicates with the same target: {index} and {row}\")\n    \n    # Reporting results\n    print(f\"There are {len(duplicates['id'])} duplicated rows in the dataset.\")\n    print(f\"{len(set(indx_to_drop))} of them have different target. They will be deleted from the dataset.\")\n    print(f\"The datatframe has {len(df['id'])} rows.\")\n    df.drop(axis=0, index=set(indx_to_drop), inplace=True)\n    print(f\"After duplicated deletion there are {len(df['id'])} rows.\")\n    \n    return df","6d8b94c8":"train = delete_duplicates(train)","47b932e0":"# Target feature encoding\nencoder = LabelEncoder()\ntrain[\"target\"] = encoder.fit_transform(train[\"target\"])\ntrain[\"target\"].value_counts(sort=False)","67ccbfec":"def transform_dataset(data):\n    \"\"\"\n    Adds new custom features and transforms original features into custom categories\n    \"\"\"\n    \n    # Copying features in a temporary dataset which will be transformed with MinMaxScaler\n    df = data[[x for x in data.columns if \"feature_\" in x]].copy()\n    \n    # Adding custom features\n    data[\"feature_75\"] = df.max(axis=1)\n    data[\"feature_76\"] = df.mean(axis=1)\n    data[\"feature_77\"] = df.median(axis=1)\n    data[\"feature_78\"] = df.nunique(axis=1)\n    data[\"feature_79\"] = (df == 0).astype(int).sum(axis=1)\n    data[\"feature_80\"] = (df != 0).sum(axis=1)\n    data[\"feature_81\"] = (df == 0).astype(int).sum(axis=1) \/ 75\n    data[\"feature_82\"] = (df != 0).sum(axis=1) \/ 75\n    \n    \n    # Scaling original features and adding new features basing on them\n    scaled_df = pd.DataFrame(index = data.index.values, columns = df.columns.values)\n    for col in df.columns.values:\n        scaler = MinMaxScaler()\n        scaled_df[col] = scaler.fit_transform(np.array(df[col]).reshape(-1, 1))\n    data[\"feature_83\"] = scaled_df.mean(axis=1)\n    data[\"feature_84\"] = (scaled_df == 1).sum(axis=1)\n    \n    # Cutting original features into custom intevals [0, 1), [1, 15), [15, 30) ...\n    intervals = np.insert(np.arange(15, 370, 15), 0, [0, 1])\n    intervals_text = pd.cut(train[\"feature_0\"], intervals, right=False).value_counts().sort_index().index.astype(\"string\")\n    map_dict = dict(zip(intervals_text, list(np.arange(len(intervals_text)))))\n    for i, column in enumerate(data.drop([\"id\"], axis=1).columns):\n        if ((i < 75) and (column!=\"target\")):\n            data[column] = pd.cut(data[column], intervals, right=False).astype(\"string\")\n            data[column].replace(map_dict, inplace=True)\n    \n    return data","71491f0d":"# Transforming the train dataset and making value distribution plots for new custom features\ntrain = transform_dataset(train)\nmake_data_plots(train, i=75)","37e68f17":"X_train = train.drop([\"id\", \"target\"], axis=1)\ny_train = train[\"target\"]\nX_test = transform_dataset(test).drop(\"id\", axis=1)","7757df57":"# def train_model_cb(trial, X=X_train, y=y_train):\n#     \"\"\"\n#     A function to train a model using different hyperparamerters combinations provided by Optuna. \n#     Log loss of validation data predictions is returned to estimate hyperparameters effectiveness.\n#     \"\"\"\n#     cat_features = [x for x in X.columns[:75]]\n#     preds = 0\n#     split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n#     for train_idx, valid_idx in split.split(X, y):\n#         X_train, X_valid = X.iloc[train_idx], X.iloc[valid_idx]\n#         y_train, y_valid = y.iloc[train_idx], y.iloc[valid_idx]\n        \n#         # A set of hyperparameters to optimize by optuna\n#         cb_params = {\n#                  \"iterations\": trial.suggest_int('iterations', 1000, 10000),\n#                  \"learning_rate\": trial.suggest_float('learning_rate', 0.001, 1.0),\n#                  \"depth\": trial.suggest_int('depth', 1, 6),\n#                  \"loss_function\": 'MultiClass',\n#                  \"eval_metric\": 'MultiClass',\n#                  \"leaf_estimation_method\": trial.suggest_categorical(\"leaf_estimation_method\", [\"Newton\", \"Gradient\"]),#, \"Exact\"]),\n#                  \"od_type\": \"Iter\",\n#                  \"early_stopping_rounds\": 500,\n#                  \"l2_leaf_reg\": trial.suggest_float('l2_leaf_reg', 0.00001, 10),\n#                  \"random_strength\": trial.suggest_float('random_strength', 1.0, 2.0),\n#                  \"bagging_temperature\": trial.suggest_float('bagging_temperature', 0.0, 10.0),\n#                  \"border_count\": 254,\n#                  \"use_best_model\": trial.suggest_categorical(\"use_best_model\", [False, True]),\n#                  \"grow_policy\": \"SymmetricTree\",#trial.suggest_categorical(\"grow_policy\", [\"SymmetricTree\", \"Depthwise\", \"Lossguide\"]),\n# #                  \"max_leaves\": trial.suggest_int('max_leaves', 1, 64),\n#                  \"task_type\": \"GPU\",\n#                     }\n            \n#         model = CatBoostClassifier(**cb_params)\n#         model.fit(\n#                     X_train, y_train,\n#                     eval_set=(X_valid, y_valid),\n#                     verbose=False,\n#                     cat_features=cat_features\n#                 )\n\n#         oof = model.predict_proba(X_valid)\n    \n#     return log_loss(y_valid, oof)","6a53b60a":"# %%time\n# Creating Optuna object and defining its parameters\n# study = optuna.create_study(direction='minimize')\n# study.optimize(train_model_cb, n_trials = 200)\n\n# Showing optimization results\n# print('Number of finished trials:', len(study.trials))\n# print('Best trial parameters:', study.best_trial.params)\n# print('Best score:', study.best_value)","360f66af":"def train_with_folds(X, y, X_test, model, splits=10):\n    \"\"\"\n    Splits a train dataset into folds to train a given model and make test data predictions \n    \"\"\"\n    cat_features = [x for x in X.columns[:75]]\n    skf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n    oof_preds = np.zeros((train.shape[0], y.nunique()))\n    preds = 0\n    feature_importances = 0\n    \n    for num, (train_idx, valid_idx) in enumerate(skf.split(X, y)):\n        X_train, X_valid = X.iloc[train_idx], X.iloc[valid_idx]\n        y_train, y_valid = y.iloc[train_idx], y.iloc[valid_idx]\n        \n        model.fit(X_train, y_train,\n                  eval_set=(X_valid, y_valid),\n                  verbose=False,\n                  cat_features=cat_features)\n        \n        oof_preds[valid_idx] = model.predict_proba(X_valid)\n        preds += model.predict_proba(X_test) \/ splits\n        print(f\"\\nFold {num} logloss: {log_loss(y_valid, oof_preds[valid_idx])}\")\n        feature_importances += model.feature_importances_ \/ splits\n    print(f\"Overall logloss: {log_loss(y, oof_preds)}\")\n    \n    return preds, feature_importances","893a13cb":"%%time\n\n# The hyperparameters below were given by Optuna\nmodel = CatBoostClassifier(random_state=42,\n                           thread_count=4,\n                           verbose=False,\n                           iterations=5300,\n                           learning_rate=0.004996686623648068,\n                           grow_policy=\"SymmetricTree\",\n                           loss_function=\"MultiClass\",\n                           eval_metric=\"MultiClass\",\n                           classes_count=9,\n                           od_type=\"Iter\",\n                           depth=6,\n                           l2_leaf_reg=3.994384171429022,\n                           random_strength=1.8493809581160419,\n                           bagging_temperature=0.6721279933587145,\n                           early_stopping_rounds=400,\n                           task_type=\"GPU\")\n\npreds, feature_importances = train_with_folds(X_train, y_train, X_test, model)","7449953d":"df = pd.DataFrame(columns=[\"Feature\", \"Importance\"])\ndf[\"Feature\"] = X_test.columns\ndf[\"Importance\"] = feature_importances\/100\ndf.loc[:74, \"Color\"] = \"cornflowerblue\"\ndf.loc[75:, \"Color\"] = \"palevioletred\"\ndf.sort_values(\"Importance\", axis=0, ascending=False, inplace=True)\n\nlegend_lines = [Line2D([0], [0], color=\"cornflowerblue\", lw=10),\n                Line2D([0], [0], color=\"palevioletred\", lw=10)]\n\nx = np.arange(0, len(df[\"Feature\"]))\nheight = 0.4\n\nfig, ax = plt.subplots(figsize=(16, 30))\nbars1 = ax.barh(x, df[\"Importance\"], height=height,\n                color=df[\"Color\"], edgecolor=\"black\")\nax.set_title(\"Feature importances\", fontsize=30, pad=15)\nax.set_ylabel(\"Feature names\", fontsize=20, labelpad=15)\nax.set_xlabel(\"Feature importance\", fontsize=20, labelpad=15)\nax.set_yticks(x)\nax.set_yticklabels(df[\"Feature\"], fontsize=15)\n# ax.set_xlim(0, 0.25)\n# ax.set_xticks(np.arange(0, 0.275, 0.025))\nax.tick_params(axis=\"x\", labelsize=15)\nax.grid(axis=\"x\")\nax2 = ax.secondary_xaxis('top')\nax2.set_xlabel(\"Feature importance\", fontsize=20, labelpad=15)\n# ax2.set_xlim(0, 0.25)\n# ax2.set_xticks(np.arange(0, 0.275, 0.025))\nax2.tick_params(axis=\"x\", labelsize=15)\nax.legend(legend_lines, [\"Original features\", \"Custom features\"], fontsize=15, loc=1, bbox_to_anchor=(0, 0, 1, 0.97))\nplt.margins(0.04, 0.01)\nplt.gca().invert_yaxis()","4d465c87":"predictions = pd.DataFrame()\npredictions[\"id\"] = test[\"id\"]\npredictions = pd.concat([predictions, pd.DataFrame(preds, columns=[\"Class_\" + str(x) for x in np.arange(1, 10, 1)])], axis=1)\npredictions.to_csv('submission.csv', index=False, header=predictions.columns)\npredictions.head()","266b690e":"# **Machine Learning**","96364fed":"## Original features value distribution in the train dataset","e321184a":"So it looks like class labels are distributed pretty evenly across the dataset.","5a93d1fb":"# **Data analysis**","bc4fb617":"## Original features nonzero value distribution in the train dataset","b8da3bed":"## Fraction of nonzero values in the both datasets","45cb0935":"There are some duplicates in the dataset. If they have identical feature but different target values it may decrease machine learning performance.","b2a8a3ba":"# **Feature importances**","67f12f9d":"# **Data import**","690d8475":"# **Predictions submission**","04e862da":"As you can see, the data does not have distinct clusters after reducing dimensions.","0cdba748":"## PCA","16254e37":"## Detecting anomalies with LocalOutlierFactor","bb1001ad":"# **Data preparation**","7020ff23":"## Detecting anomalies with IsolationForest","c9d957cc":"CatBoost Hyperparameters were optimized using Optuna (see two cells below which are commented in order to save run time).","6e927b36":"## Target distribution","d91b3cbf":"Let's check if these classes are evenly distributed in the dataset."}}