{"cell_type":{"6dbc6871":"code","78872a35":"code","9dbd510a":"code","c1b235e3":"code","8b8f6d91":"code","4b6753be":"code","f1b7f387":"code","59537481":"code","435fd2dc":"code","9a72375d":"code","0332ceeb":"code","9709e440":"code","9d63d9f6":"code","95e64c50":"code","8c94ebc5":"code","0281465b":"code","5a292d61":"code","6b98e38f":"code","0f62aadf":"code","ce08f338":"code","aecc16e2":"code","4ae63b84":"code","cd74efa4":"code","7f3e72d2":"code","dceb4c68":"code","b732518f":"code","1681179a":"code","8a3ed253":"code","636e4101":"code","1815cf0f":"code","7d2e13e2":"code","e9df8671":"code","6efffa98":"markdown","1b007427":"markdown","1d89f8ac":"markdown"},"source":{"6dbc6871":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport seaborn as sns\n\nimport datetime as datetime\nimport matplotlib.dates as dates\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\n\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","78872a35":"data0 = pd.read_csv(\"..\/input\/covid19-osaka\/osaka_summary - 0718.csv\")\ndata0[-5:].T","9dbd510a":"print(data0.shape)","c1b235e3":"data0['% positive rate 7-day']=(data0['examined positives']*100\/data0['examined']).rolling(window=7).mean()\ndata0['examined positives 7-day']=data0['examined positives'].rolling(window=7).mean()\ndata0['current positives 7-day']=data0['current positives'].rolling(window=7).mean()\ndata0['deaths 7-day']=data0['deaths'].rolling(window=7).mean()\ndata0[-5:].T","8b8f6d91":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=data0['date'],y=data0['examined positives 7-day'],name='examined positives 7-day'),secondary_y=False,)\nfig.update_layout(autosize=False,width=700,height=500,title_text=\"Examined Positives (rolling 7-day) in Osaka\")\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=\"Cases\",secondary_y=False)\nfig.show()","4b6753be":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=data0['date'],y=data0['% positive rate 7-day'],name='% positive rate 7-day'),secondary_y=False,)\nfig.update_layout(autosize=False,width=700,height=500,title_text=\"% Positive Rate (rolling 7-day) in Osaka\")\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=\"% rate\",secondary_y=False)\nfig.show()","f1b7f387":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=data0['date'],y=data0['current positives 7-day'],name=\"current positives 7-day\"),secondary_y=False,)\nfig.update_layout(autosize=False,width=700,height=500,title_text=\"Current Positive Cases (rolling 7-day) in Osaka\")\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=\"Cases\",secondary_y=False)\nfig.show()","59537481":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=data0['date'],y=data0['deaths 7-day'],name=\"deaths 7-day\"),secondary_y=False,)\nfig.update_layout(autosize=False,width=700,height=500,title_text=\"Death Cases (rolling 7-day) in Osaka\")\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=\"Cases\",secondary_y=False)\nfig.show()","435fd2dc":"list(data0.columns)","9a72375d":"col1=[]\nfor j in range(1,41): \n    col1+=['ep-'+str(j)]\n    col1+=['cp-'+str(j)]\n    col1+=['ap-'+str(j)]\nprint(col1)","0332ceeb":"col0= list(data0.columns) + col1\nprint(col0)","9709e440":"data2=pd.DataFrame(columns=col0)\ndata3=pd.concat([data0,data2])\ndata3[-5:].T","9d63d9f6":"n=len(data0)\nprint(n)","95e64c50":"for  i in range(n):    \n    cpi=data3['current positives'][i]\n    for j in range(1,41): \n        data3.loc[i+j,'cp-'+str(j)]=cpi","8c94ebc5":"for  i in range(n):    \n    epi=data3['examined positives'][i]\n    for j in range(1,41): \n        data3.loc[i+j,'ep-'+str(j)]=epi","0281465b":"for  i in range(n):    \n    api=data3['accumulated positives'][i]\n    for j in range(1,41): \n        data3.loc[i+j,'ap-'+str(j)]=api","5a292d61":"data3[0:n][-5:].T","6b98e38f":"datay=data3[0:n]['deaths']\ndatax=data3[0:n].drop(['deaths','deaths 7-day','date'],axis=1)\ndatax[-5:].T","0f62aadf":"datax.columns","ce08f338":"datax=np.array(datax)\ndatay=np.array(datay)","aecc16e2":"df_columns = ['examined', 'examined positives', 'acumulated positives',\n       'current positives', 'left hospital', 'acumulated left hospital',\n       'left hospital found', 'accumulated left hospital found',\n       'link unkonwn', '% positive rate 7-day', 'examined positives 7-day',\n       'current positives 7-day'] + col1\n","4ae63b84":"data_df=pd.DataFrame(datax)\ndata_df.columns=df_columns","cd74efa4":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","7f3e72d2":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","dceb4c68":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","b732518f":"train_feat_df = to_feature(data_df[7:])\ny = datay[7:]","1681179a":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X,y,cv,params:dict=None,verbose:int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","8a3ed253":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n}","636e4101":"from sklearn.model_selection import KFold\n\nfold = KFold(n_splits=10, shuffle=True, random_state=71)\ncv = list(fold.split(train_feat_df, y))\noof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)","1815cf0f":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('oof',fontsize=20)\nax.set_ylabel('train_y',fontsize=20)\nax.scatter(oof,y)","7d2e13e2":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig,ax\n\nfig, ax = visualize_importance(models, train_feat_df)","e9df8671":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('cp-11',fontsize=20)\nax.set_ylabel('deaths',fontsize=20)\nax.scatter(data_df.loc[7:,'cp-11'],y)","6efffa98":"### Add candidates of current positives, examined positives and accumulated positives 1-30 days before","1b007427":"### What is the most related factor for number of current deaths?","1d89f8ac":"## Conclusion\n#### 'cp-12'(current positives 12 days before) is the most related parameters for 'deaths'. \n#### Among ep-s, 'ep-20' (examined positive 20 days before) is the most."}}