{"cell_type":{"455d664d":"code","f7f9a811":"code","8a52e289":"code","e37f9bd7":"code","e132de77":"code","e619119b":"code","30f88f49":"code","ee37b7c2":"code","80850375":"code","e693cb3a":"code","14b48d2f":"code","3e3fa112":"markdown","1aa03e36":"markdown","c181cc03":"markdown","84caeec3":"markdown","6379ef01":"markdown","0e6f8c8a":"markdown","b0723491":"markdown","cb4e1912":"markdown","84f2ce3e":"markdown","3fc03ad0":"markdown"},"source":{"455d664d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n\nimport tensorflow as tf\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nimport sklearn.model_selection as sk\n\nimport re\n\n# Input data files are available in the \"..\/input\/\" directory.\nimport os\nprint(\"Input files:\")\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n# For neural nets with my GPU, RNN doesn't work without this in TF 2.0\nfrom tensorflow.compat.v1 import ConfigProto\nfrom tensorflow.compat.v1 import InteractiveSession\nconfig = ConfigProto()\nconfig.gpu_options.allow_growth = True\nsession = InteractiveSession(config=config)\n\nprint()\nprint(\"TF Version: \", tf.__version__)\nprint(\"Eager mode: \", tf.executing_eagerly())\nprint(\"GPU is\", \"available\" if tf.config.experimental.list_physical_devices(\"GPU\") else \"NOT AVAILABLE\")\n\nif tf.test.gpu_device_name():\n    print('GPU found')\nelse:\n    print(\"No GPU found\")","f7f9a811":"path_to_file = '\/kaggle\/input\/wine-reviews\/winemag-data-130k-v2.csv'\n\ndfWine = pd.read_csv(path_to_file, index_col=0)","8a52e289":"dfWine.info()\nprint()\nprint(dfWine.shape)\nprint(dfWine.columns)","e37f9bd7":"dfWine.head(5)","e132de77":"dfWine.describe()","e619119b":"# # Removes the Twitter handles, that doesn't matter here\ndfWine = dfWine.drop(['taster_twitter_handle'], axis=1)\ndfWine.head(5)","30f88f49":"# Read title and find vintage\nyearSearch = []    \nfor value in dfWine['title']:\n    regexresult = re.search(r'19\\d{2}|20\\d{2}', value)\n    if regexresult:\n        yearSearch.append(regexresult.group())\n    else: yearSearch.append(None)\n\ndfWine['year'] = yearSearch\n\n#Tell me which ones don't have a year listed\nprint(\"We extracted %d years from the wine titles and %d did not have a year.\" %(len(dfWine[dfWine['year'].notna()]), len(dfWine[dfWine['year'].isna()].index)))\ndfWine['year'].describe()","ee37b7c2":"#If we're missing year values, remove the row\ndfWine_goodyears=dfWine\ndfWine_goodyears=dfWine_goodyears.dropna(subset=['year'])\nprint('Removed ' + str(dfWine.shape[0]-dfWine_goodyears.shape[0]) + ' rows with empty year values.' + \"\\n\")\n\ndfWine_goodyears['year']=dfWine_goodyears['year'].astype(int)\n# dfWine_goodyears['year']=pd.to_numeric(dfWine_goodyears['year'], downcast='integer', errors='coerce')\n\nprint(dfWine_goodyears['year'].describe())\n\ndfWineYear = dfWine_goodyears.groupby(['year']).mean()\ndfWineYear = pd.DataFrame(data=dfWineYear).reset_index()","80850375":"# Bar plot\nstyle.use(\"seaborn-white\")\nplt.figure(figsize=(14,10))\nax = sns.barplot(y=dfWineYear['points'], x=dfWineYear['year'])\nplt.title(\"Average Points vs. Year\", fontsize=14)\nplt.xlabel(\"\")\nax.set(\n    xlim=(0, len(dfWineYear)), \n    ylim=(85, 100)\n)\nax.set_xticklabels(\n    ax.get_xticklabels(), \n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='medium'\n)\n\nplt.show()","e693cb3a":"dfWine = dfWine.replace({'country': r'USA?'}, {'country': 'United States of America'}, regex=True)\n\n# #For ISO-3 codes of countries, for mapping\ndfcountry = pd.read_csv('\/kaggle\/input\/country-names-mapping-to-iso3\/countryMap.txt',sep='\\t')\ndfWine = dfWine.merge(dfcountry, on='country')\n\n# #For ISO-3 codes of states, if needed\nstate_codes = {\n    'District of Columbia' : 'DC','Mississippi': 'MS', 'Oklahoma': 'OK', \n    'Delaware': 'DE', 'Minnesota': 'MN', 'Illinois': 'IL', 'Arkansas': 'AR', \n    'New Mexico': 'NM', 'Indiana': 'IN', 'Maryland': 'MD', 'Louisiana': 'LA', \n    'Idaho': 'ID', 'Wyoming': 'WY', 'Tennessee': 'TN', 'Arizona': 'AZ', \n    'Iowa': 'IA', 'Michigan': 'MI', 'Kansas': 'KS', 'Utah': 'UT', \n    'Virginia': 'VA', 'Oregon': 'OR', 'Connecticut': 'CT', 'Montana': 'MT', \n    'California': 'CA', 'Massachusetts': 'MA', 'West Virginia': 'WV', \n    'South Carolina': 'SC', 'New Hampshire': 'NH', 'Wisconsin': 'WI',\n    'Vermont': 'VT', 'Georgia': 'GA', 'North Dakota': 'ND', \n    'Pennsylvania': 'PA', 'Florida': 'FL', 'Alaska': 'AK', 'Kentucky': 'KY', \n    'Hawaii': 'HI', 'Nebraska': 'NE', 'Missouri': 'MO', 'Ohio': 'OH', \n    'Alabama': 'AL', 'Rhode Island': 'RI', 'South Dakota': 'SD', \n    'Colorado': 'CO', 'New Jersey': 'NJ', 'Washington': 'WA', \n    'North Carolina': 'NC', 'New York': 'NY', 'Texas': 'TX', \n    'Nevada': 'NV', 'Maine': 'ME'}\n\ndfWine['state_code'] = dfWine['province'].apply(lambda x : state_codes[x] if x in state_codes.keys() else None)","14b48d2f":"# dfWine['country-3let'].value_counts()\n# dfWine[dfWine.country==\"United States of America\"][dfWine['state_code'].isna()]\n\nprint(\"%d did not get a country code and %d US wines did not get a state code.\" \n      %((len(dfWine[dfWine.country==\"\"])), \n        len(dfWine[dfWine.country==\"United States of America\"][dfWine['state_code'].isna()])))","3e3fa112":"### What do we have?\n#### Exploratory analysis and descriptors of the raw dataset","1aa03e36":"## Geography\n\n### Country Data\n\nLet's deal with country data now\n\nhttps:\/\/github.com\/gsnaveen\/plotly-worldmap-mapping-2letter-CountryCode-to-3letter-country-code","c181cc03":"## Feature Extraction and Engineering","84caeec3":"See if we missed any or had missing data.","6379ef01":"## Background Analysis","0e6f8c8a":"### Load the Data","b0723491":"### Drop missing years, convert year to a number type","cb4e1912":"### Looks at the title of the wine and extracts the vintages out of there.\n#### Creates a new column for the Vintages","84f2ce3e":"#### See how this went by making an example graph","3fc03ad0":"## Data Cleaning"}}