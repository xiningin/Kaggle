{"cell_type":{"46cbd2dd":"code","7622cba4":"code","e1a52c40":"code","db3d34a9":"code","34f4b21b":"code","ff9988c7":"code","53f8d035":"code","eae48a75":"code","23762cd6":"code","726068c8":"code","acec6ccd":"code","e0d9fb63":"code","23e8582d":"code","a19d05f0":"code","20a457cf":"code","265b8372":"code","104a6a80":"code","6354300e":"code","c0db1a91":"code","0ffe66e9":"code","e1b83616":"code","ccaa492a":"code","1d7650f9":"code","b7c6ffdf":"code","280b92ec":"code","02c4fb93":"code","686f0d89":"code","df08fd4e":"code","7acd0d4b":"code","8360bd26":"code","53cb6774":"code","5e36f566":"code","a7dfcd67":"code","8d69574e":"code","6f2f4873":"code","7cbe6e4f":"code","3f5604a9":"code","5b312559":"code","c81e6e51":"code","69280c62":"code","c1de13c7":"code","c23e82d7":"code","92f03d24":"code","682896da":"code","9ecc2a3f":"code","d8d4320b":"code","30b4805c":"code","0fd8e195":"code","41b85a16":"code","d66f6078":"code","ce7a828c":"code","3d732789":"code","3e9c8a3f":"code","ffad2dd6":"code","3b014151":"code","6f2fe2e6":"code","51816819":"code","ce3c6677":"code","eeeca7fc":"code","897d138f":"markdown","0aa7808b":"markdown","a3e97c52":"markdown","48dd5654":"markdown","13d0d683":"markdown","394afe97":"markdown","3197af23":"markdown","75d4806a":"markdown","093f6a62":"markdown"},"source":{"46cbd2dd":"!pip install bs4","7622cba4":"!pip install ktrain","e1a52c40":"!pip install pytorch-nlp","db3d34a9":"import random\nimport copy\nimport time\nimport pandas as pd\nimport numpy as np\nimport gc\nimport re\nimport torch\n\n#import spacy\nfrom tqdm import tqdm_notebook, tnrange\nfrom tqdm.auto import tqdm\n\ntqdm.pandas(desc='Progress')\nfrom collections import Counter\n\nfrom nltk import word_tokenize\n\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.nn.utils.rnn import pack_padded_sequence, pad_packed_sequence\nfrom torch.autograd import Variable\nfrom sklearn.metrics import f1_score\nimport os \n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\n# cross validation and metrics\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import f1_score\nfrom torch.optim.optimizer import Optimizer\n\nfrom sklearn.preprocessing import StandardScaler\nfrom multiprocessing import  Pool\nfrom functools import partial\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport torch as t\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nimport matplotlib.pyplot as plt\n\nfrom string import punctuation\nimport string\nfrom collections import Counter\nimport torch\nfrom torch.utils.data import TensorDataset, DataLoader\nimport torch.optim as optim\nimport torch.nn as nn\nfrom tqdm.notebook import tqdm\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import *\nimport bs4\nfrom bs4 import BeautifulSoup\nimport re\nfrom torch.autograd import Variable\n\nimport matplotlib.pyplot as plt\nimport pickle\nfrom datetime import datetime","34f4b21b":"embed_size = 300 # how big is each word vector\nmax_features = 120000 # how many unique words to use (i.e num rows in embedding vector)\nmaxlen = 46 # max number of words in a question to use 750\nbatch_size = 46 # how many samples to process at once\nn_epochs = 5 # how many times to iterate over all samples\nn_splits = 5 # Number of K-fold Splits\nSEED = 10\ndebug = 0","ff9988c7":"# new dataframe\ntrain_df=pd.read_csv(\"..\/input\/sentiment-analysis-for-financial-news\/all-data.csv\", sep=',', encoding='latin-1',names = [\"category\",\"comment\"])\ntrain_df['comment'].fillna('',inplace=True)\ntrain_df['comment'] = train_df['comment'].apply(lambda x: x.strip())\ntrain_df['category']=train_df['category'].replace(to_replace=\"neutral\",value=0)\ntrain_df['category']=train_df['category'].replace(to_replace=\"negative\",value=1)\ntrain_df['category']=train_df['category'].replace(to_replace=\"positive\",value=2)\n\nprint(\"neutral:\", (train_df ['category']== 0).astype(int).sum(axis=0))\nprint(\"negative:\",(train_df ['category']== 1).astype(int).sum(axis=0))\nprint(\"positive:\",(train_df ['category']== 2).astype(int).sum(axis=0))","53f8d035":"class CleanText:\n    def __init__(self,review):\n        self.review=review.lower()\n    \n    def remove_URL(self):\n        url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    \n        return url.sub('', self.review)\n    \n    def remove_html(self):\n        html = re.compile(r'<.*?>')\n    \n        return html.sub('', self.review)\n    \n    def remove_not_ASCII(self):\n        \n        review = ''.join([word for word in self.review if word in string.printable])\n        return review\n    \n    def remove_emoji(self):\n        emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    \n        return emoji_pattern.sub(r'', self.review)\n    \n    \n    def remove_punct(self):\n        table = str.maketrans('', '', string.punctuation)\n    \n        return self.review.translate(table)\n    \n    def remove_numbers(self):\n\n#         t = ''.join([i for i in self.review if not i.isdigit()])\n        num = re.compile(r'[-+]?[.\\d]*[\\d]+[:,.\\d]*')\n        return num.sub(r'NUMBER', self.review)\n\n#         return t\n    \n    \n    def review_to_words(self):\n        nltk.download(\"stopwords\", quiet=True)\n        stemmer = PorterStemmer()\n        \n        words = BeautifulSoup(self.review, \"html.parser\").get_text() # Remove HTML tags\n#         words = re.sub(r\"[^a-zA-Z0-9]\", \" \", self.review.lower()) # Convert to lower case\n        \n#         words=self.review.lower()\n        words=self.review.split() # Split string into words\n        words = [w for w in words if w not in stopwords.words(\"english\")] # Remove stopwords\n        words = [PorterStemmer().stem(w) for w in words] # stem\n        \n        return words\n    \n    def all_func(self):\n        self.review=self.remove_URL()\n        self.review=self.remove_html()\n        self.review=self.remove_not_ASCII()\n        self.review=self.remove_emoji()\n        self.review=self.remove_punct()\n        self.review=self.remove_numbers()\n        self.review=self.review_to_words()\n        \n        return self.review","eae48a75":"train_df['comment']=train_df['comment'].apply(lambda x: CleanText(x).all_func())","23762cd6":"train_df['len'] = train_df['comment'].apply(lambda s : len(s))","726068c8":"train_df['len'].plot.hist(bins=100)","acec6ccd":"count_df1 = train_df[['category','comment']].groupby('category').aggregate({'comment':'count'}).reset_index().sort_values('comment',ascending=False)\ncount_df1.head()","e0d9fb63":"target_conditions1 = count_df1[count_df1['comment']>1]['category'].values\ntarget_conditions1 ","23e8582d":"# import re\n\n# def clean_text(x):\n#     pattern = r'[^a-zA-z0-9\\s]'\n#     text = re.sub(pattern, '', x)\n#     return x\n\n# def clean_numbers(x):\n#     if bool(re.search(r'\\d', x)):\n#         x = re.sub('[0-9]{5,}', '#####', x)\n#         x = re.sub('[0-9]{4}', '####', x)\n#         x = re.sub('[0-9]{3}', '###', x)\n#         x = re.sub('[0-9]{2}', '##', x)\n#     return x","a19d05f0":"# contraction_dict = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\"}\n# def _get_contractions(contraction_dict):\n#     contraction_re = re.compile('(%s)' % '|'.join(contraction_dict.keys()))\n#     return contraction_dict, contraction_re\n# contractions, contractions_re = _get_contractions(contraction_dict)\n# def replace_contractions(text):\n#     def replace(match):\n#         return contractions[match.group(0)]\n#     return contractions_re.sub(replace, text)\n# # Usage\n# replace_contractions(\"this's a text with contraction\")","20a457cf":"train_df['category'].unique()","265b8372":"def drop_empty_space(df,column_name):\n    for ind,el in enumerate(df[column_name]):\n        \n        if not el:\n            df.drop(ind,inplace=True)\n            \n    return df","104a6a80":"train_df=drop_empty_space(train_df,'comment')","6354300e":"train_df","c0db1a91":"len(train_df)","0ffe66e9":"# my data\nfrom sklearn.model_selection import train_test_split\ntrain_X, test_X, train_y, test_y = train_test_split(train_df['comment'], train_df['category'],\n                                                    stratify=train_df['category'], \n                                                    test_size=0.25)","e1b83616":"# train_X.to_csv('.\/trainx.csv',index=False)\n# len(train_X)","ccaa492a":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain_y = le.fit_transform(train_y.values)\ntest_y = le.transform(test_y.values)\nprint(len(train_y))\nprint(len(test_y))","1d7650f9":"def convert_and_pad(word_dict, sentence, pad=46):\n    NOWORD = 0 # We will use 0 to represent the 'no word' category\n    INFREQ = 1 # and we use 1 to represent the infrequent words, i.e., words not appearing in word_dict\n    \n    working_sentence = [NOWORD] * pad\n\n    \n    for word_index, word in enumerate(sentence[:pad]):\n        if word in word_dict:      \n            working_sentence[word_index+pad-len(sentence)] = word_dict[word]                      \n        else:\n            working_sentence[word_index] = INFREQ\n            \n    return working_sentence, min(len(sentence), pad)\n\ndef convert_and_pad_data(word_dict, data, pad=46):\n    result = []\n    lengths = []\n    \n    for sentence in data:\n        converted, leng = convert_and_pad(word_dict, sentence, pad)\n        result.append(converted)\n        lengths.append(leng)\n        \n    return np.array(result), np.array(lengths)\n\n\ndef words_to_numbers(x_train):\n    words=[w for s in x_train for w in s]\n    counts=Counter(words)\n    vocab = sorted(counts, key=counts.get, reverse=True)\n    vocab_to_int = {word:ii for ii,word in enumerate(vocab,1)}\n    \n    return vocab_to_int\n\ndef words_as_int(vocab_to_int,x_train):\n    news_int = []\n    x=0\n    for review in x_train:\n        x+=1\n        news_int.append([vocab_to_int[word] for word in review])\n        \n    return news_int","b7c6ffdf":"vocab_to_int_train_x=words_to_numbers(train_X)\n","280b92ec":"len(vocab_to_int_train_x)","02c4fb93":"words_as_int_train_x=words_as_int(vocab_to_int_train_x,train_X)\nlen(words_as_int_train_x)","686f0d89":"# Before we pad our review text, we should check for reviews of extremely short or long lengths; outliers that may mess with our training.\nnews_len_train = Counter([len(x) for x in words_as_int_train_x])\nprint(\"Zero-length reviews: {}\".format(news_len_train[0]))\nprint(\"Maximum review length: {}\".format(max(news_len_train)))","df08fd4e":"padded_train_X,_=convert_and_pad_data(vocab_to_int_train_x, train_X, pad=46)","7acd0d4b":"padded_train_X.shape","8360bd26":"padded_train_X=padded_train_X.astype('int32')","53cb6774":"padded_test_X,_=convert_and_pad_data(vocab_to_int_train_x, test_X, pad=46)\npadded_test_X=padded_test_X.astype('int32')","5e36f566":"# These lines can be used instead of convert_and_pad and convert_and_pad_data functions under from keras.preprocessing.text import Tokenizer from keras.preprocessing.sequence import pad_sequences\n# but I had to write my own function because of problems for deployment (conflict of libaries)\n# # Tokenize the sentences\n# tokenizer = Tokenizer(num_words=max_features)\n# tokenizer.fit_on_texts(list(train_X))\n\n# train_X = tokenizer.texts_to_sequences(train_X)\n# test_X = tokenizer.texts_to_sequences(test_X)\n\n# ## Pad the sentences \n# train_X = pad_sequences(train_X, maxlen=maxlen)\n# test_X = pad_sequences(test_X, maxlen=maxlen)","a7dfcd67":"## FUNCTIONS TAKEN FROM https:\/\/www.kaggle.com\/gmhost\/gru-capsule\n\ndef load_glove(word_index):\n    EMBEDDING_FILE = '..\/input\/glove840b300d\/glove.840B.300d.txt'    \n    def get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')[:300]\n    embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE))\n    \n    all_embs = np.stack(embeddings_index.values())\n    emb_mean,emb_std = -0.005838499,0.48782197\n    embed_size = all_embs.shape[1]\n\n    nb_words = min(max_features, len(word_index)+1)\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\n    for word, i in word_index.items():\n        if i >= max_features: continue\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None: \n            embedding_matrix[i] = embedding_vector\n        else:\n            embedding_vector = embeddings_index.get(word.capitalize())\n            if embedding_vector is not None: \n                embedding_matrix[i] = embedding_vector\n    return embedding_matrix","8d69574e":"# missing entries in the embedding are set using np.random.normal so we have to seed here too\n\nif debug:\n    embedding_matrix = np.random.randn(120000,300)\nelse:\n    embedding_matrix = load_glove(vocab_to_int_train_x) #tokenizer.word_index","6f2f4873":"np.savetxt('test1.txt', embedding_matrix)\nb = np.loadtxt('test1.txt', dtype='float64')\nb==embedding_matrix\n# array([ True,  True,  True,  True], dtype=bool)","7cbe6e4f":"class CNN_Text(nn.Module):\n    \n    def __init__(self):\n        super(CNN_Text, self).__init__()\n        filter_sizes = [1,2,3,5]\n        num_filters = 36\n        n_classes = len(le.classes_) \n        self.embedding = nn.Embedding(max_features, embed_size)\n        self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32))\n        self.embedding.weight.requires_grad = False\n        self.convs1 = nn.ModuleList([nn.Conv2d(1, num_filters, (K, embed_size)) for K in filter_sizes])\n        self.dropout = nn.Dropout(0.1)\n        self.fc1 = nn.Linear(len(filter_sizes)*num_filters, n_classes)\n\n\n    def forward(self, x):\n        x = self.embedding(x)  \n        x = x.unsqueeze(1)  \n        x = [F.relu(conv(x)).squeeze(3) for conv in self.convs1] \n        x = [F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]  \n        x = torch.cat(x, 1)\n        x = self.dropout(x)  \n        logit = self.fc1(x) \n        return logit","3f5604a9":"embedding_matrix.shape","5b312559":"n_epochs = 50 #6\nmodel = CNN_Text()\nloss_fn = nn.CrossEntropyLoss(reduction='sum')\noptimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=0.001) #lr=0.001\nmodel.cuda()\n\n# Load train and test in CUDA Memory\nx_train = torch.tensor(padded_train_X, dtype=torch.long).cuda()\ny_train = torch.tensor(train_y, dtype=torch.long).cuda()\nx_cv = torch.tensor(padded_test_X, dtype=torch.long).cuda()\ny_cv = torch.tensor(test_y, dtype=torch.long).cuda()\n\n# Create Torch datasets\ntrain = torch.utils.data.TensorDataset(x_train, y_train)\nvalid = torch.utils.data.TensorDataset(x_cv, y_cv)\n\n# Create Data Loaders\ntrain_loader = torch.utils.data.DataLoader(train, batch_size=batch_size, shuffle=True)\nvalid_loader = torch.utils.data.DataLoader(valid, batch_size=batch_size, shuffle=False)\n\ntrain_loss = []\nvalid_loss = []\n\nfor epoch in range(n_epochs):\n    start_time = time.time()\n    # Set model to train configuration\n    model.train()\n    avg_loss = 0.  \n    for i, (x_batch, y_batch) in enumerate(train_loader):\n        # Predict\/Forward Pass\n        y_pred = model(x_batch)\n        # Compute loss\n        loss = loss_fn(y_pred, y_batch)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        avg_loss += loss.item() \/ len(train_loader)\n    \n    # Set model to validation configuration -Doesn't get trained here\n    model.eval()        \n    avg_val_loss = 0.\n    val_preds = np.zeros((len(x_cv),len(le.classes_)))\n    \n    for i, (x_batch, y_batch) in enumerate(valid_loader):\n        y_pred = model(x_batch).detach()\n        avg_val_loss += loss_fn(y_pred, y_batch).item() \/ len(valid_loader)\n        # keep\/store predictions\n        val_preds[i * batch_size:(i+1) * batch_size] =F.softmax(y_pred).cpu().numpy()\n    \n    # Check Accuracy\n    val_accuracy = sum(val_preds.argmax(axis=1)==test_y)\/len(test_y)\n    train_loss.append(avg_loss)\n    valid_loss.append(avg_val_loss)\n    elapsed_time = time.time() - start_time \n    print('Epoch {}\/{} \\t loss={:.4f} \\t val_loss={:.4f}  \\t val_acc={:.4f}  \\t time={:.2f}s'.format(\n                epoch + 1, n_epochs, avg_loss, avg_val_loss, val_accuracy, elapsed_time))","c81e6e51":"PATH=\".\/textcnn_model1.pt\"","69280c62":"torch.save(model.state_dict(), PATH)","c1de13c7":"model = CNN_Text()\nmodel.load_state_dict(torch.load(PATH))\nmodel.eval()","c23e82d7":"device = \"cuda:0\"\nmodel = model.to(device)","92f03d24":"def predict_single(df):  \n    \n    sentiment={0: 'neutral',1: 'negative', 2: 'positive'}\n    \n    df=df.apply(lambda x: CleanText(x).all_func())\n    \n#     words_as_int_train_x=words_as_int(vocab_to_int_train_x,df)\n\n    x,_=convert_and_pad_data(vocab_to_int_train_x, df, pad=46)\n\n    x = torch.tensor(x, dtype=torch.long).cuda()\n\n    pred = model(x).detach()\n    print(pred)\n\n    pred = F.softmax(pred).cpu().numpy()\n    print(pred)\n\n    pred = pred.argmax(axis=1)\n\n    pred = le.classes_[pred]\n    \n\n    return sentiment[pred[0]]","682896da":"x=\"U.S. GDP growth in fourth quarter raised slightly to 4.3% \u2014 and all signs point to economy speeding up\"\ndf_test=pd.DataFrame([x])\ndf_test[0]","9ecc2a3f":"# Sentiment prediction with CNN_Text model\npredict_single(df_test[0])","d8d4320b":"def plot_graph(epochs):\n    fig = plt.figure(figsize=(12,12))\n    plt.title(\"Train\/Validation Loss\")\n    plt.plot(list(np.arange(epochs) + 1) , train_loss, label='train')\n    plt.plot(list(np.arange(epochs) + 1), valid_loss, label='validation')\n    plt.xlabel('num_epochs', fontsize=12)\n    plt.ylabel('loss', fontsize=12)\n    plt.legend(loc='best')","30b4805c":"plot_graph(n_epochs)","0fd8e195":"import scikitplot as skplt\ny_true = [le.classes_[x] for x in test_y]\ny_pred = [le.classes_[x] for x in val_preds.argmax(axis=1)]\nskplt.metrics.plot_confusion_matrix(\n    y_true, \n    y_pred,\n    figsize=(12,12),x_tick_rotation=90)","41b85a16":"class BiLSTM(nn.Module):\n    \n    def __init__(self):\n        super(BiLSTM, self).__init__()\n        self.hidden_size = 64\n        drp = 0.1\n        n_classes = len(le.classes_)\n        self.embedding = nn.Embedding(max_features, embed_size)\n        self.embedding.weight = nn.Parameter(torch.tensor(embedding_matrix, dtype=torch.float32))\n        self.embedding.weight.requires_grad = False\n        self.lstm = nn.LSTM(embed_size, self.hidden_size, bidirectional=True, batch_first=True)\n        self.linear = nn.Linear(self.hidden_size*4 , 64)\n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(drp)\n        self.out = nn.Linear(64, n_classes)\n\n\n    def forward(self, x):\n        #rint(x.size())\n        h_embedding = self.embedding(x)\n        #_embedding = torch.squeeze(torch.unsqueeze(h_embedding, 0))\n        h_lstm, _ = self.lstm(h_embedding)\n        avg_pool = torch.mean(h_lstm, 1)\n        max_pool, _ = torch.max(h_lstm, 1)\n        conc = torch.cat(( avg_pool, max_pool), 1)\n        conc = self.relu(self.linear(conc))\n        conc = self.dropout(conc)\n        out = self.out(conc)\n        return out","d66f6078":"n_epochs = 20\nmodel = BiLSTM()\nloss_fn = nn.CrossEntropyLoss(reduction='sum')\noptimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=0.001)\nmodel.cuda()\n\n# Load train and test in CUDA Memory\nx_train = torch.tensor(padded_train_X, dtype=torch.long).cuda()\ny_train = torch.tensor(train_y, dtype=torch.long).cuda()\nx_cv = torch.tensor(padded_test_X, dtype=torch.long).cuda()\ny_cv = torch.tensor(test_y, dtype=torch.long).cuda()\n\n# Create Torch datasets\ntrain = torch.utils.data.TensorDataset(x_train, y_train)\nvalid = torch.utils.data.TensorDataset(x_cv, y_cv)\n\n# Create Data Loaders\ntrain_loader = torch.utils.data.DataLoader(train, batch_size=batch_size, shuffle=True)\nvalid_loader = torch.utils.data.DataLoader(valid, batch_size=batch_size, shuffle=False)\n\ntrain_loss = []\nvalid_loss = []\n\nfor epoch in range(n_epochs):\n    start_time = time.time()\n    # Set model to train configuration\n    model.train()\n    avg_loss = 0.  \n    for i, (x_batch, y_batch) in enumerate(train_loader):\n        # Predict\/Forward Pass\n        y_pred = model(x_batch)\n        # Compute loss\n        loss = loss_fn(y_pred, y_batch)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        avg_loss += loss.item() \/ len(train_loader)\n    \n    # Set model to validation configuration -Doesn't get trained here\n    model.eval()        \n    avg_val_loss = 0.\n    val_preds = np.zeros((len(x_cv),len(le.classes_)))\n    \n    for i, (x_batch, y_batch) in enumerate(valid_loader):\n        y_pred = model(x_batch).detach()\n        avg_val_loss += loss_fn(y_pred, y_batch).item() \/ len(valid_loader)\n        # keep\/store predictions\n        val_preds[i * batch_size:(i+1) * batch_size] =F.softmax(y_pred).cpu().numpy()\n    \n    # Check Accuracy\n    val_accuracy = sum(val_preds.argmax(axis=1)==test_y)\/len(test_y)\n    train_loss.append(avg_loss)\n    valid_loss.append(avg_val_loss)\n    elapsed_time = time.time() - start_time \n    print('Epoch {}\/{} \\t loss={:.4f} \\t val_loss={:.4f}  \\t val_acc={:.4f}  \\t time={:.2f}s'.format(\n                epoch + 1, n_epochs, avg_loss, avg_val_loss, val_accuracy, elapsed_time))","ce7a828c":"PATH1=\".\/BiLSTM.pt\"","3d732789":"torch.save(model.state_dict(), PATH1)","3e9c8a3f":"# model = BiLSTM()\nmodel.load_state_dict(torch.load(PATH1))\nmodel.eval()","ffad2dd6":"plot_graph(n_epochs)","3b014151":"# torch.save(model,'bilstm_model')","6f2fe2e6":"import scikitplot as skplt\ny_true = [le.classes_[x] for x in test_y]\ny_pred = [le.classes_[x] for x in val_preds.argmax(axis=1)]\nskplt.metrics.plot_confusion_matrix(\n    y_true, \n    y_pred,\n    figsize=(12,12),x_tick_rotation=90)","51816819":"x=\"Dow Jones Futures Signals Modest Market Rally Retreat Amid Hedge Fund Fallout; Tesla, Nio Story Time Over\"\ndf_test=pd.DataFrame([x])\ndf_test[0]","ce3c6677":"device = \"cuda:0\"\nmodel = model.to(device)","eeeca7fc":"# Sentiment prediction with BiLSTM model\npredict_single(df_test[0])","897d138f":"## Pytorch Model - TextCNN","0aa7808b":"## Train TextCNN Model","a3e97c52":"### Basic Parameters","48dd5654":"## Finding the maxlen","13d0d683":"## Pytorch Model - BiLSTM","394afe97":"## Deploy : Predict A Single Example","3197af23":"## Preprocessing Y Column\nWe are only going to be classifying conditions for which the count of reviews are more than 3000.","75d4806a":"## IMPORTS ","093f6a62":"### Load Embeddings\n"}}