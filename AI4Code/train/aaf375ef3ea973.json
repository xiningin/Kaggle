{"cell_type":{"d47b5622":"code","7d818d3c":"code","3437680e":"code","7aeb3bfa":"code","b29008c0":"code","66898e25":"code","9cc05f14":"code","84b6a9a7":"code","64ab0c6c":"code","c436946d":"code","fb2bc00e":"code","09c20e62":"code","219f7f82":"code","fb52ba4b":"code","8e6f0dee":"code","d6fcdfd2":"code","3619ddf1":"code","9defd81d":"code","46f015f5":"code","bce803b8":"markdown","54147150":"markdown","e3ccbfb1":"markdown","ef8b720f":"markdown","5f8f88bb":"markdown","057631a9":"markdown","23a07bc5":"markdown","f29b23c3":"markdown","481636b5":"markdown","3cbb3139":"markdown","11636d68":"markdown","45e5cab0":"markdown","57d7c9ea":"markdown","f6c51c49":"markdown","d496ed42":"markdown","0fd576eb":"markdown","cf0bda51":"markdown","98fc209c":"markdown","432a97bc":"markdown"},"source":{"d47b5622":"# \u5bfc\u5165\u5fc5\u8981\u7684python \u62d3\u5c55\u5e93\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# \u8bfb\u53d6\u6570\u636e\u96c6\u6587\u4ef6\ndf = pd.read_csv(\"..\/input\/bitcoin-historical-data\/coinbaseUSD_1-min_data_2014-12-01_to_2019-01-09.csv\")\n\n# \u628atimstamp\u683c\u5f0f\u8f6c\u6362\u6210date\u683c\u5f0f\ndf['Date'] = pd.to_datetime(df['Timestamp'],unit='s').dt.date\n\n# \u6309Date\u5206\u7ec4\u5e76\u53d6\u5747\u503c\ndf= df.groupby(df['Date']).mean()\n\nprint(\"length of data set:\", len(df))\ndf.head()","7d818d3c":"# \u4f7f\u7528\u52a0\u6743\u5e73\u5747\u4ef7\u8868\u793a\u5f53\u65e5\u4ef7\u683c\ndf.rename(columns={'Weighted_Price':'cur_price'}, inplace = True)\n\n# \u628a\u5f53\u65e5\u4ef7\u683c\u4e0a\u79fb\u4e00\u884c\uff0c\u4f5c\u4e3a\u660e\u5929\u7684\u4ef7\u683c\u52a0\u5165\u6570\u636e\u96c6\u4e2d\ndf[['next_price']] = df[['cur_price']].shift(-1)\n# \u8ba1\u7b97\u4ef7\u683c\u8d8b\u52bf\uff0c1\u4ee3\u8868\u4e0a\u6da8\uff0c0\u4ee3\u8868\u4e0b\u964d\ndf.loc[(df['cur_price']<df['next_price']), 'price_trend'] = 1\ndf.loc[(df['cur_price']>df['next_price']), 'price_trend'] = 0\n\ndf.drop(df.index[-1], axis=0, inplace=True) # \u5220\u9664\u6700\u540e\u4e00\u884c\n\ndf[['price_trend']] = df[['price_trend']].astype(int) # \u4fee\u6539\u6570\u636e\u7c7b\u578b\u4e3aint\n\nprint(\"length:\", len(df))\ndf.head()","3437680e":"# \u751f\u6210\u753b\u70ed\u529b\u56fe\u7528\u6570\u636e\u96c6\ndata_heatmap = df[['Open', 'High', 'Low', 'Close', 'Volume_(BTC)','Volume_(Currency)','next_price']]\n\n# \u7ed8\u5236\u70ed\u529b\u56fe\nimport seaborn as sns\nplt.figure(figsize=(10,10))\nsns.heatmap(data_heatmap.corr(), vmin=0.5,annot=True, fmt=\".3\")\nplt.show()","7aeb3bfa":"# \u53bb\u9664\u65e0\u5173\u5c5e\u6027\uff0c\u751f\u6210\u6570\u636e\u96c6\ndata_base_model = df[['Open','High', 'Low', 'Close', 'price_trend']]\n\ndata_base_model.head()","b29008c0":"# \u62c6\u5206\u6570\u636e\nfrom sklearn.model_selection import train_test_split\ny = data_base_model['price_trend']\nx = data_base_model.iloc[:,:4]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)\n\nlen(x_train),len(x_test), len(y_train), len(y_test)","66898e25":"# \u4f7f\u7528lbgfs\u5373\u9ed8\u8ba4\u53c2\u6570\uff0c\u5efa\u7acb\u6a21\u578b\nfrom sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(solver='lbfgs')\nclf.fit(x_train, y_train)","9cc05f14":"# \u6d4b\u8bd5\u5e76\u8bc4\u5206\ny_pred=clf.predict(x_test)\nscore = clf.score(x_test, y_test)\nprint(\"Accurancy of model:\",score)","84b6a9a7":"from sklearn.metrics import confusion_matrix\n\nM = confusion_matrix(y_test, y_pred)\nsns.heatmap(M, annot=True, fmt='d')\nplt.show()","64ab0c6c":"# \u8ba1\u7b97OHLCW\u4e94\u4e2a\u4ef7\u683c\u7684\u8d8b\u52bf\ndf['Weight'] = df['cur_price']\nOHLCW = ['Open', 'High', 'Low', 'Close','Weight']\n# \u628a\u6628\u65e5\u7684OHLCW\u4ef7\u683c\u4e0b\u79fb\u4e00\u884c\uff0c\u4f5c\u4e3a\u6628\u65e5\u4ef7\u683c\u52a0\u5165\u6570\u636e\u96c6\u4e2d\ndf[['last_Open', 'last_High', 'last_Low', 'last_Close', 'last_Weight']] = df[OHLCW].shift(1)\n# \u6bd4\u8f83\u4ef7\u683c\u5f97\u5230\u8d8b\u52bf\uff0c1\u4ee3\u8868\u4e0a\u6da8\uff0c0\u4ee3\u8868\u4e0b\u964d\nfor price in OHLCW:\n    df.loc[(df['last_'+price]<df[price]), price+'_trend'] = 1\n    df.loc[(df['last_'+price]>df[price]), price+'_trend'] = 0\n\ndf.drop(df.index[0], axis=0, inplace=True) # \u5220\u9664\u7b2c\u4e00\u884c\n\n# \u8c03\u6574\u5217\u7684\u987a\u5e8f\u4fbf\u4e8e\u89c2\u5bdf\nnew_order = ['Volume_(BTC)','Volume_(Currency)']\nfor price in OHLCW:\n    new_order.extend([price, 'last_'+price, price+'_trend'])\nnew_order.extend(['cur_price', 'next_price', 'price_trend'])\ndf = df[new_order]\n\n# \u4fee\u6539\u6570\u636e\u7c7b\u578b\u4e3aint\ndf[['Open_trend']] = df[['Open_trend']].astype(int)\ndf[['High_trend']] = df[['High_trend']].astype(int)\ndf[['Low_trend']] = df[['Low_trend']].astype(int) \ndf[['Close_trend']] = df[['Close_trend']].astype(int) \ndf[['Weight_trend']] = df[['Weight_trend']].astype(int) \n\n# \u79bb\u6563\u6cd5\u4f18\u5316\u7528\u6570\u636e\u96c6\ndata_label = df[['Open_trend', 'High_trend', 'Low_trend', 'Close_trend','Weight_trend', 'price_trend']]\n\ndata_label","c436946d":"# \u4f7f\u7528\u79bb\u6563\u5316\u7684\u7279\u5f81\u5efa\u7acb\u6a21\u578b\ny = data_label['price_trend']\nx = data_label.iloc[:,:-1]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)\nclf = LogisticRegression(solver='lbfgs')\nclf.fit(x_train, y_train)\n\ny_pred=clf.predict(x_test)\nscore = clf.score(x_test, y_test)\nscore","fb2bc00e":"# \u62c6\u5206\u6570\u636e\nfrom sklearn.model_selection import train_test_split\ny = data_base_model['price_trend']\nx = data_base_model.iloc[:,:-1]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)\n\n# \u4f7f\u7528\u5750\u6807\u8f74\u4e0b\u964d\u6cd5\uff0c\u5efa\u7acb\u6a21\u578b\nfrom sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(solver='liblinear')\nclf.fit(x_train, y_train)\n\n# \u6d4b\u8bd5\u5e76\u8bc4\u5206\ny_pred=clf.predict(x_test)\nscore = clf.score(x_test, y_test)\nscore","09c20e62":"# \u62c6\u5206\u6570\u636e\nfrom sklearn.model_selection import train_test_split\ny = data_base_model['price_trend']\nx = data_base_model.iloc[:,:-1]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)\n\n# \u4f7f\u7528\u5750\u6807\u8f74\u4e0b\u964d\u6cd5\u52a0\u7cbe\u5ea6\uff0c\u5efa\u7acb\u6a21\u578b\nfrom sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(solver='liblinear', tol=4e-6)\nclf.fit(x_train, y_train)\n\n# \u6d4b\u8bd5\u5e76\u8bc4\u5206\ny_pred=clf.predict(x_test)\nscore = clf.score(x_test, y_test)\nscore","219f7f82":"# \u8bfb\u53d6\u6570\u636e\nBitcoin = data_base_model[['Open', 'Close', 'High', 'Low', 'price_trend']]\nVibration=Bitcoin.High-Bitcoin.Low\nBitcoin['vibration'] = Vibration\n#Bitcoin.drop(['High','Low'], inplace=True, axis = 1)\nBitcoin.head(5)","fb52ba4b":"# application module sklearn \nfrom sklearn import model_selection\n# Sortir tous les attributs Variable ind\u00e9pendante\u53d6\u51fa\u6240\u6709\u81ea\u53d8\u91cf\n# \u65e5\u671f\u672c\u8eab\u4e0d\u4f5c\u4e3a\u81ea\u53d8\u91cf\npredictors = ['Open','Close','High', 'Low']\n#predictors = ['Open','Close','vibration']\n# Divisez le jeu en jeu d'apprentissage 75 pourcents et jeu de test 25 pourcents \nX_train, X_test, y_train, y_test = model_selection.train_test_split(Bitcoin[predictors], Bitcoin.price_trend, \n                                                                    test_size = 0.25, random_state = 1234)","8e6f0dee":"# SVM Linaire\nfrom sklearn import svm\nimport numpy as np\n\nclf=svm.LinearSVC(C=0.1)\nclf.fit(X_train,y_train)\nfrom sklearn import metrics\n\n# Classification sur le jeu de test\npred_linear_svc = clf.predict(X_test)\n# Accuracy\nmetrics.accuracy_score(y_test, pred_linear_svc)","d6fcdfd2":"# \u4f7f\u7528 sklearn \nfrom sklearn import model_selection\n# \u53d6\u51fa\u6240\u6709\u81ea\u53d8\u91cf\n# \u65e5\u671f\u672c\u8eab\u4e0d\u4f5c\u4e3a\u81ea\u53d8\u91cf\npredictors = Bitcoin.columns[:4]\n# \u4ee53\u6bd41\u7684\u6bd4\u4f8b\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nX_train, X_test, y_train, y_test = model_selection.train_test_split(Bitcoin[predictors], Bitcoin.price_trend, \n                                                                    test_size = 0.25, random_state = 1234)","3619ddf1":"# \u4f7f\u7528 GridSearchCV \u521b\u5efa\u6700\u4f18\u51b3\u7b56\u6811\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import tree\n# \u521d\u59cb\u5316\u53c2\u6570\nmax_depth = [2,3,4,5,6]\nmin_samples_split = [2,4,6,8]\nmin_samples_leaf = [2,4,8,10,12]\n\nparameters = {'max_depth':max_depth, 'min_samples_split':min_samples_split, 'min_samples_leaf':min_samples_leaf}\n# \u6d4b\u8bd5\u4e0d\u540c\u53c2\u6570\u4e0b\u7684\u7ed3\u679c\ngrid_dtcateg = GridSearchCV(estimator = tree.DecisionTreeClassifier(), param_grid = parameters, cv=10)\n# \u62df\u5408\u51b3\u7b56\u6811\u6a21\u578b\ngrid_dtcateg.fit(X_train, y_train)\n# \u786e\u5b9a\u6700\u4f18\u53c2\u6570\ngrid_dtcateg.best_params_","9defd81d":"# metrics est la m\u00e9thode d'estimation du mod\u00e8le sklearn\nfrom sklearn import metrics\n# Construire l'arbre avec les param\u00e8tres optimis\u00e9s\nCART_Class = tree.DecisionTreeClassifier(max_depth=2, min_samples_leaf = 8, min_samples_split=2)\n# cr\u00e9ation du mod\u00e8le sur le jeu d'apprentissage\ndecision_tree = CART_Class.fit(X_train, y_train)\n# Application du mod\u00e8le sur le jeu de test et classfication\npred = CART_Class.predict(X_test)\n# Accuracy\nprint('Accuracy\uff1a',metrics.accuracy_score(y_test, pred))","46f015f5":"from sklearn import ensemble\n# Construction du For\u00eat al\u00e9atoire\nRF_class = ensemble.RandomForestClassifier(n_estimators=200, random_state=1234)\n# R\u00e9alisation du for\u00eat avec jeu d'apprentissage\nRF_class.fit(X_train, y_train)\n# Classification sur le jeu de test\nRFclass_pred = RF_class.predict(X_test)\n# Pr\u00e9cision\nprint('Accuracy \uff1a',metrics.accuracy_score(y_test, RFclass_pred))","bce803b8":"Open, Close, High, Low\u76f8\u5173\u7cfb\u6570\u8fbe0.998\uff0c\u5177\u6709\u5f88\u9ad8\u7684\u76f8\u5173\u7a0b\u5ea6\uff0c\u56e0\u6b64\u672c\u6b21\u5b9e\u9a8c\u9009\u53d6\u8fd9\u56db\u4e2a\u5c5e\u6027\u4f5c\u4e3a\u8d8b\u52bf\u9884\u6d4b\u6a21\u578b\u7684\u7279\u5f81","54147150":"## \u7814\u7a76\u76ee\u6807\n\u4f7f\u7528\u903b\u8f91\u56de\u5f52\u7b97\u6cd5\u9884\u6d4b\u6bd4\u7279\u5e01\u4ef7\u683c\u8d8b\u52bf\n\n## \u5b9e\u73b0\u65b9\u5f0f\n\u4ef7\u683c\u6da8\u8dcc => \u6b63\u4f8b\u4e0e\u8d1f\u4f8b\n\n\u5c06\u9884\u6d4b\u6bd4\u7279\u5e01\u4ef7\u683c\u6da8\u8dcc\u8f6c\u6362\u4e3a\u4e8c\u5206\u7c7b\u4efb\u52a1\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u903b\u8f91\u56de\u5f52\u6a21\u578b\u53bb\u505a\u5206\u7c7b\u4e3a\u6bd4\u7279\u5e01\u7684\u4ef7\u683c\u5206\u7c7b\uff0c\u6b63\u4f8b\u4e3a\u6da8\uff0c\u8d1f\u4f8b\u4e3a\u8dcc","e3ccbfb1":"## \u4e09\u3001\u521d\u6b65\u5efa\u7acb\u6a21\u578b\n*(\u8bba\u65874.5\u8282)*\n### 3.1 \u4f7f\u7528\u7559\u51fa\u6cd5\u5212\u5206\u6570\u636e\u96c6\uff0c\u5212\u5206\u6bd4\u4f8b\u662f3\uff1a1\n\u8bba\u65874.5.1\u8282","ef8b720f":"### 3.2 \u5efa\u7acb\u6a21\u578b\n\u8bba\u65874.5.2\u8282","5f8f88bb":"### 5.2 \u8c03\u53c2\u4f18\u5316\n*(\u8bba\u65874.7.2\u8282)*  \n\u5728\u5efa\u7acb\u6a21\u578b\u65f6\uff0c\u4f7f\u7528\u5750\u6807\u8f74\u4e0b\u964d\u6cd5\u4f5c\u4e3a\u6c42\u89e3\u6210\u672c\u51fd\u6570\u4f7f\u7528\u7684\u6570\u503c\u6c42\u89e3\u7b97\u6cd5\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684\u7b97\u6cd5\n\n\u76f8\u8f83\u539f\u59cb\u6a21\u578b\uff0c\u7cbe\u5ea6\u4e0a\u53477.65%\u3002","057631a9":"### 6.3\u968f\u673a\u68ee\u6797\n*(\u8bba\u65874.8.2\u8282)*\n\n\u4f7f\u7528\u524d\u6587\u751f\u6210\u7684\u51b3\u7b56\u6811","23a07bc5":"## \u5b9e\u9a8c\u4e3b\u6d41\u7a0b\n## \u4e00\u3001 \u6570\u636e\u9884\u5904\u7406\n*(\u8bba\u65874.3\u8282)*\n### 1.1\u65f6\u95f4\u7c92\u5ea6\u4e0e\u7a7a\u503c\u95ee\u9898\n*\uff08\u8bba\u65874.3.1\u8282\uff09*\n","f29b23c3":"## \u4e8c\u3001\u7279\u5f81\u9009\u62e9\n*(\u8bba\u65874.4\u8282)*","481636b5":"\u57fa\u4e8e\u903b\u8f91\u56de\u5f52\u7684\u6bd4\u7279\u5e01\u4ef7\u683c\u8d8b\u52bf\u9884\u6d4b\n======\n\u675c\u6587\u53ef  \n\u6307\u5bfc\u8001\u5e08 \u5218\u6e90\n","3cbb3139":"## \u56db\u3001\u8bc4\u4f30\u6a21\u578b\n*(\u8bba\u65874.6\u8282)*\n### 4.1 \u51c6\u786e\u7387\n*(\u8bba\u65874.6.1)*","11636d68":"### 1.2 \u751f\u6210\u4ef7\u683c\u8d8b\u52bf\u6570\u636e\n*\uff08\u8bba\u65874.3.2\u8282\uff09*","45e5cab0":"## \u516d\u3001\u5bf9\u7167\u5b9e\u9a8c\n*(\u8bba\u65874.8\u8282)*\n### 6.1\u652f\u6301\u5411\u91cf\u673a\n*(\u8bba\u65874.8.2\u8282)*","57d7c9ea":"### 6.2\u51b3\u7b56\u6811\n*(\u8bba\u65874.8.1\u8282)*","f6c51c49":"\u76f8\u6bd4\u539f\u59cb\u6a21\u578b\uff0c\u51c6\u786e\u5ea6\u4e0a\u53472.73%\u3002","d496ed42":"### \u5c5e\u6027\u7684\u542b\u4e49\n1. \u672c\u6761\u6570\u636e\u7684\u65f6\u95f4\u8bb0\u5f55 (Timestamp)\uff0c\u683c\u5f0f\u4e3aUnix timestamp;\n1. \u6bcf\u65e5\u5f00\u76d8\u4ef7\u683c (Open) \uff1b\n1. \u6536\u76d8\u4ef7\u683c (Close)\uff1b\n1. \u5f53\u65e5\u6700\u9ad8\u4ef7\u683c (High)\uff1b\n1. \u5f53\u65e5\u6700\u4f4e\u4ef7\u683c (Low)\uff1b\n1. \u5f53\u65e5\u6bd4\u7279\u5e01\u7684\u4ea4\u6613\u91cf (Volume_(BTC))\uff0c\u4f7f\u7528\u6bd4\u7279\u5e01\u4f5c\u4e3a\u5355\u4f4d\u8ba1\u4ef7\uff1b\n1. \u5f53\u65e5\u7684\u6bd4\u7279\u5e01\u7684\u4ea4\u6613\u91cf(Volume_(Currency)) \uff0c\u4f7f\u7528\u7f8e\u5143\u4f5c\u4e3a\u5355\u4f4d\u8ba1\u4ef7;\n1. \u5f53\u65e5\u7684\u6210\u4ea4\u91cf\u52a0\u6743\u5e73\u5747\u4ef7(VWAP)\n","0fd576eb":"### 5.1\u79bb\u6563\u5316\u7279\u5f81\n*(\u8bba\u65874.7.1)*  \n\u4f18\u5316\u65b9\u5f0f\u4e00\uff1a\u79bb\u6563\u5316\u7279\u5f81\uff0c\u89c2\u5bdf\u5386\u53f2\u4ef7\u683c\u6570\u636e\u7684\u8d70\u52bf\uff0c\u800c\u4e0d\u662f\u6570\u503c\u672c\u8eab","cf0bda51":"## \u4e94\u3001\u4f18\u5316\u6a21\u578b","98fc209c":"\u5728\u5c1d\u8bd5\u5269\u4e0b\u7684\u6a21\u578b\u4e2d\u7684\u53c2\u6570\u540e\uff0c\u901a\u8fc7\u8c03\u6574\u6c42\u89e3\u6807\u51c6\uff0c\u51c6\u786e\u7387\u4e0a\u5347\u81f364.2%\u3002","432a97bc":"### 4.2 \u6df7\u6dc6\u77e9\u9635\n*(\u8bba\u65874.6.2)*"}}