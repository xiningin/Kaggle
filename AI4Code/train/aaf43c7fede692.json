{"cell_type":{"a6e16f15":"code","699a0157":"code","fbc7abd0":"code","da98932c":"code","50465558":"code","d9d4aef0":"code","9bd3c181":"code","644fd02c":"code","caec68d1":"code","b2ca7ead":"code","f2f394f4":"code","9f4f0b74":"code","90c8d71f":"code","641026ff":"code","2bcb1748":"code","91c95659":"code","9f3e7008":"code","529b3f86":"code","9a5ef1db":"code","54a9520a":"code","4f497446":"code","6ca5ea72":"code","2966bb8f":"code","59bb64cf":"markdown","8e534e22":"markdown","1a902cd9":"markdown","e2d1765d":"markdown","58b4ed97":"markdown","56d23364":"markdown","9f502ee2":"markdown","8203b2e2":"markdown","7865cd6e":"markdown","7bf99efd":"markdown","ee673073":"markdown","53debdfa":"markdown","5eeab218":"markdown","d20d252d":"markdown","dac8c924":"markdown","8e93a84b":"markdown","9dc3d3d9":"markdown","b9fc6bbd":"markdown","2013d3a3":"markdown","767625af":"markdown","cd62e88a":"markdown","2f3b3bab":"markdown","a72693fe":"markdown"},"source":{"a6e16f15":"import numpy as np\nfrom scipy import stats\n\nimport pandas as pd\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\n%matplotlib inline","699a0157":"# Initialize dictionary and lists to be used in scraper\n\nplayer_data = {'team_id':[],'pos':[],'player':[],'mp_per_g':[],'efg_pct':[],\n               'pts_per_g':[],'trb_per_g':[],'ast_per_g':[],'ws':[],'bpm':[]}   # Columns for DataFrame\n\nindex_array = [[],[]]  # Used for MultiIndex\n\npositions = [\"Point Guard\",\"Shooting Guard\",\"Small Forward\",\"Power Forward\",\"Center\"] # Used to scrape Positions","fbc7abd0":"def get_doc(url):   # return BeautifulSoup parsed document\n    response = requests.get(url)\n    response.close()\n    soup = BeautifulSoup(response.text,'html.parser')\n    return soup\n\n\ndef scrape_draft(doc,year): # Scrape players' data for single draft\n    tr_tags = doc.findAll('tr')\n    for pick in range(2,12,1):\n        get_advanced_stats(tr_tags, pick)  # Scrape certain stats from main draft page\n        player_url = \"https:\/\/www.basketball-reference.com\" + tr_tags[pick].find('td',{'data-stat':'player'}).a['href']\n        get_player_data(get_doc(player_url))  # Scrape stats from individual player pages\n        index_array[0].append(year)\n        index_array[1].append(pick - 1)\n        \n        \ndef get_advanced_stats(tags, pick):  # Scrape player's career advanced stats from the draft page\n    for key in ['ws','bpm','player']:\n        field = tags[pick].find('td',{'data-stat': key})\n        if field is not None:\n            player_data[key].append(field.text)\n        else:\n            player_data[key].append(np.NaN)\n\n    \ndef get_player_data(doc):  # Scraper player's rookie season data off of individual page\n    rookie_stats = doc.findAll('tr',{'class':'full_table'})[0]\n    for key in player_data:\n        if key not in ['pos','ws','bpm','player']:\n            field = rookie_stats.find('td',{'data-stat': key})\n            if field is not None:\n                player_data[key].append(field.text) # Append values to dictionary\n            else:\n                player_data[key].append(np.NaN)   # Appends missing values dictionary if no data to scrape\n    get_player_pos(doc)\n    \n        \ndef get_player_pos(doc):  # Scrape player positions\n    test_sections = [doc.findAll('p')[i].text.strip() for i in range(1,5,1)]  # Possible lines with position titles\n    test_string = \"\"\n    for section in test_sections:\n        test_string += section  \n    pos = [pos for pos in positions if pos in test_string]  \n    player_data['pos'].append(pos) # Appends list of positions on website to dictionary\n    \n    \ndef draft_scraper(start_year,end_year):   # Entire web scraper function\n    for year in range(start_year, end_year + 1, 1):  # Iterates through all draft years\n        draft_url = 'https:\/\/www.basketball-reference.com\/draft\/NBA_' + str(year) + '.html'\n        scrape_draft(get_doc(draft_url),year)\n \n    # Form MultiIndex\n    index_tuples = list(zip(*index_array))   \n    index = pd.MultiIndex.from_tuples(index_tuples, names=[\"year\", \"pick\"])  # Create a Pandas MultiIndex\n\n    return pd.DataFrame(player_data,index=index)  # Returns DataFrame version of player_data dictionary","da98932c":"draft_data = draft_scraper(2001,2020)","50465558":"draft_data # Check the DataFrame","d9d4aef0":"#Convert 'numeric' objects into numeric types\n\nplayer_data = {'team_id':[],'pos':[],'player':[],'mp_per_g':[],'efg_pct':[],\n               'pts_per_g':[],'trb_per_g':[],'ast_per_g':[],'ws':[],'bpm':[]}  #For use in following processing\n\ndraft_data.replace('',np.NaN,inplace=True)\nfor key in player_data:\n    if key not in ['team_id','pos','player','g']:\n        draft_data[key] = draft_data[key].astype(float)","9bd3c181":"#New Positions: guard, guard\/forward, forward, forward\/center, center\n\ndef parse_pos(row):  #Function to parse scraped positions into 1 position\n    if len(row) == 1:\n        if row[0] == 'Point Guard' or row[0] == 'Shooting Guard':\n            return 'Guard'\n        elif row[0] == 'Small Forward' or row[0] == 'Power Forward':\n            return 'Forward'\n        elif row[0] == 'Center':\n            return 'Center'\n    elif row == ['Power Forward','Center']:\n        return 'Forward\/Center'\n    elif row == ['Small Forward','Power Forward']:\n        return 'Forward'\n    elif row == ['Point Guard','Shooting Guard']:\n        return 'Guard'\n    elif row == ['Shooting Guard','Small Forward']:\n        return 'Guard\/Forward'\n    elif len(row) == 3 and row[0] == 'Point Guard':\n        return 'Guard'\n    else:\n        return 'Forward'\n\ndraft_data['pos'] = draft_data['pos'].apply(lambda x: parse_pos(x))   #\"Resets\" row to single position instead of list of positions","644fd02c":"# Replace TOT with Multiple (For players with multiple teams their rookie season)\n\ndraft_data.replace('TOT','Multiple',inplace=True)","caec68d1":"draft_data","b2ca7ead":"most_top10_picks = draft_data.team_id.value_counts().sort_values(ascending=False).head(6)\n\nmost_top10_picks","f2f394f4":"reset = draft_data.reset_index()\nmost_top5_picks = reset[reset.pick < 6].team_id.value_counts().sort_values(ascending=False).head(6)\n\nmost_top5_picks","9f4f0b74":"top_pick_teams = most_top10_picks.index.tolist()\ntop_team_ws = draft_data.groupby('team_id').median().ws[top_pick_teams].sort_values(ascending=True)\n\ntop_team_ws","90c8d71f":"plt.figure(figsize=(8,5))\nsns.barplot(x=top_team_ws.index,y=top_team_ws.values,palette='Blues')\n\nplt.title('Median Career Win Shares of Players Drafted by Teams with Most Top-10 Picks',fontdict={'fontsize':15})\nplt.ylabel('ws')\n\nplt.tight_layout()\n\nplt.savefig('barplot.png')","641026ff":"guards = draft_data[draft_data.pos == 'Guard'].reset_index()\nguards\n\nplot = sns.jointplot(x='year',y='efg_pct',data=guards,kind='scatter',color='red')\nplot.fig.suptitle('Rookie EFG% for Guards drafted from 2001 - 2020 NBA Drafts', x=0.5, y=1, fontsize=15)\nplt.tight_layout()\n\n\nplt.savefig('jointplot.png')","2bcb1748":"# Let us regroup the positions into 3 categories: Guards, Wings, Big-Men \n# First, we need to see the best way to group these categories:\n\ndraft_data['pos'].value_counts()","91c95659":"\"\"\"\nLet's map:\n    Guard --> Guards\n    Guard\/Forward , Forward --> Wings\n    Forward\/Center , Center --> Big-Men\n\"\"\"\n\ntemp = draft_data\n\ntemp['new_pos'] = temp.pos.map({'Guard':'Guard','Guard\/Forward':'Wing','Forward':'Wing',\n                                'Forward\/Center':'Big Man','Center':'Big Man'})\n\n#Graph a 3D plot\nimport plotly.express as pex\n\nplot = pex.scatter_3d(data_frame = temp,x='pts_per_g',y='ast_per_g',z='trb_per_g',color='new_pos')\nplot.show()","9f3e7008":"plot.write_html(\"3dscatter.html\")","529b3f86":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as lda\n\nX = temp.reset_index().drop(['year','pick','team_id','pos','player','new_pos',\n                             'efg_pct','mp_per_g','bpm','ws'],axis=1)   #LDA with PPG, RPG, APG as only input factors\ny = temp.new_pos\n\nlda_model = lda(n_components=2)\nnewX = lda_model.fit_transform(X.values,y)","9a5ef1db":"lda_model.explained_variance_ratio_","54a9520a":"plt.title('LDA graph with Position Groupings',fontdict={'fontsize':15})\nsns.scatterplot(x=newX[:,0],y=newX[:,1],hue=y)\nplt.savefig('ldascatter.png')","4f497446":"by_pick = draft_data.reset_index().groupby('pick').mean().reset_index()\n\nfig, axs = plt.subplots(1, 2, figsize=(15, 5))\n\nws_stats = stats.pearsonr(by_pick.pick,by_pick.ws)\nsns.regplot(ax = axs[0], x='pick',y='ws',data=by_pick,color='red')\naxs[0].set_title('Average Career Win Shares vs. Pick # (2001 - 2020 drafts)',fontsize=15)\naxs[0].text(7,50,'R^2: ' + str((ws_stats[0]**2).round(2)) + ', p-val: ' + str(ws_stats[1].round(3)), fontsize=12)\n\nbpm_stats = stats.pearsonr(by_pick.pick,by_pick.bpm)\nsns.regplot(ax = axs[1], x='pick',y='bpm',data=by_pick, color = 'blue')\naxs[1].set_title('Average Career Box Plus-Minus vs. Pick # (2001 - 2020 drafts)',fontsize=15)\naxs[1].text(7,1.4,'R^2: ' + str((bpm_stats[0]**2).round(2)) + ', p-val: ' + str(bpm_stats[1].round(3)), fontsize=12)\n\nplt.tight_layout()\n\nplt.savefig('scatterplots.png')","6ca5ea72":"fig, axs = plt.subplots(2, 1, figsize=(20, 10))\n\nsns.boxplot(ax = axs[0], x='pick',y='ws',data=draft_data.reset_index(),palette='Reds')\naxs[0].set_ylim(-5,150)\naxs[0].set_title('Career Win Shares vs. Pick # (2001 - 2020 drafts)',fontsize=15)\n\nsns.boxplot(ax = axs[1], x='pick',y='bpm',data=draft_data.reset_index(),palette='Blues')\naxs[1].set_ylim(-8,10)\naxs[1].set_title('Career Box Plus-Minus vs. Pick # (2001 - 2020 drafts)',fontsize=15)\n\nplt.savefig('boxplots.png')","2966bb8f":"most_picks_teams = np.array(most_top10_picks.index)\n\nfig, axs = plt.subplots(3, 2, figsize=(15, 10))\nfig.suptitle('Median Rookie MPG Distribution among Positions Drafted by Top Drafting Teams', x=0.5, y=1, fontsize=15)\n\nax_list = [axs[0,0],axs[0,1],axs[1,0],axs[1,1],axs[2,0],axs[2,1]]\n\nfor i in range(6):\n    \n    data = draft_data[draft_data.team_id == most_picks_teams[i]].groupby('pos').median().mp_per_g\n    sns.barplot(ax = ax_list[i], x = data.index, y = data.values, palette='RdBu_r')\n    ax_list[i].set_title(most_picks_teams[i],fontsize=15)\n   \nplt.tight_layout()\nplt.setp(axs[:,0],ylabel = 'MPG')\n\nplt.savefig('barplot_grid.png')","59bb64cf":"As we can see from this plot, we see that the Golden State Warriors and the Chicago Bulls typically chose the rookies with the most career win shares in the past 20 years. This could partly be attributed to the teams' player developmental and training staff, and\/or their position in the drafts, being able to choose a clear star talent. However, these numbers may not always reflect well on these teams as certain players could have possibly gotten traded earlier on in their careers.","8e534e22":"To view this interactive plot, please download the raw plot file [here](https:\/\/github.com\/asattiraju13\/NBA-Draft-Scraper-Visualization\/blob\/main\/plots\/3dscatter.html) as an HTML file, which you can select to display in your browser.\n\nThis interactive plot illustrates some of the differences between the the three main basketball position categories - guards, wings, and big-men - as it is it relatively easy to see three different groupings. The grouping of Big-Men has is located higher up on the trb_per_g axis than the others because they logically average more rebounds per game than other positions due to their height. The grouping of Guards is located farther out on the ast_per_g axis than the others because they are more responsible for distributing the ball to others, generating more assists than other positions. Notice that there is no clear grouping along the pts_per_g axis, as all three positions can score the ball depending on which position a certain team and offense emphasizes.","1a902cd9":"### Data Cleaning \/ Processing","e2d1765d":"From the explained variance ratio, the X axis of the below plot explains 0.96% of the variance in the data; we could expect that the RPG and APG features are included in this axis as these features relatively clearly separated the position groupings on the interactive plot above.","58b4ed97":"### Analysis 1: Which teams had the most top-10 picks play for them their entire rookie season? Top-5 picks?","56d23364":"## Analysis Questions (For Selected 2001 - 2020 NBA Drafts):\n\nThe select questions are addressed below in sequential fashion.","9f502ee2":"### Analysis 4: Can we visualize clear groupings by position based on players' points, assists, and rebounding averages?","8203b2e2":"### Analysis 5: Is there a clear relationship between career box score plus minus or win shares with pick number?","7865cd6e":"These boxplot graphs corroborate some support for the conclusion established from the scatterplot graphs, as the median win shares and box-plus minus of the top picks (smaller number picks) are on mostly higher than the median win shares and box-plus minus of the lower picks (higher number picks). However, these graphs best illustrate moderate correlation, since there are some aberrations in the trend. This is illustrated by median win shares and box-plus minus of the number two pick in particular, which are much lower than expected. Such an aberration with a top pick could possibly indicate a greater likelihood of number 2 picks not living up to star potential, becoming \"busts\" in their career.","7bf99efd":"# NBA BasketballReference Draft Scraper + Analysis & Visualizations","ee673073":"## Scraper Code and Processing","53debdfa":"### Analysis 6: Are there differences in the rookie median minutes per game between positions among the top 6 drafting teams?","5eeab218":"This plot of Linear Discriminant Analysis with respect to the three position groupings listed on the graph attempt to plot the data points - which incorporated the features of PPG, RPG, and APG - along 2 axes to maximize separation between the position labels. As we can see, there are clear groupings of the Guard and Big Men categories and a less clear grouping of the Wing category, as it overlaps both of the others.","d20d252d":"This visualization is quite interesting, as it offers some insight into how different top-drafting teams value the players they drafted differently based on position. This could be due to a number of factors, such as the growth of another \"veteran\" player on the team, thus limiting a rookie's minutes, or the need to fill a void left by a star player's departure from the team, thus increasing a rookie's minutes. There are several reasons, each unique to the drafting team's circumstances. Of course, this could also depend upon the rookie's success throughout the season, which translates to the number of minutes played. \n\nFrom this barplot grid, we can see that Chicago, Cleveland, and Golden State have favored rookie guards and forwards in terms of minutes in the past 20 draft years. This makes sense, as Chicago drafted former MVP Derrick Rose, Cleveland drafted star Kyrie Irving, and Golden State drafted former MVP Stephen Curry. We also see that the minute distribution per position for Phoenix and Sacramento are fairly uniform, with rookie guards \/ forwards and centers having the most minutes in both cities. Minnesota seems to have favored centers more, drafting big-men such as star Karl Anthony-Towns. We could also propose explanations for the lack of minutes of some positions, making this visualization extremely versatile.","dac8c924":"##### Let's explore this further ... using Linear Discriminant Analysis with all numeric data as our input and  new_pos as our class label.","8e93a84b":"## Imports","9dc3d3d9":"## Project Overview:\n\n### Objective:\n\nI wish to collect the career stats of top picks from the past 20 NBA drafts. I will compare numerical stats among players in drafts using graphs and visualization techniques and will also explore interesting relationships among the scraped data with different visualization techniques.\n\n### Tasks:\n\n1. From www.basketball-reference.com\/draft, scrape the rookie stats of the top 10 overall picks of last 20 NBA drafts (2001 - 2020)\n2. Scrape data into a single Pandas MultiIndexDataFrame with outer index of draft year and inner index of pick number\n3. Run DataFrame manipulations and various visualization techniques to gain insight into questions regarding drafting teams, picks, and player stats.\n\n*** In this analysis, \"Drafting teams\" includes teams that trade for a pick. Drafting teams are teams that a rookie plays for for the entire season. Therefore, teams that trade or receive picks midway through the season will not be counted in this analysis.","b9fc6bbd":"### Analysis 3: Have guards had increasing 3PT% in years closer to 2020 than 2001 due to the transition to a distance shooting era?","2013d3a3":"### Analysis 2: Of the top 5 teams with the most top-10 picks play for them their rookie season, which typically chose the rookies with the most career win shares?","767625af":"These two graphs above both show that there is a negative correlation both for average career win shares vs pick number and average career box plus minus vs pick number. The correlation coefficient for both graphs is roughly $\\sqrt{0.55}$ = 0.74, which illustrates a moderate correlation as supported by the graphs. One would expect these relationships, as lower pick numbers are typically the better players and will have more success during their entire career. Let's look more closely at the ranges of win shares and Box Plus-Minus vs pick number below using boxplots in Seaborn.","cd62e88a":"Let's visualize this list of teams with their win share numbers in a barplot using Seaborn.","2f3b3bab":"### Scrape Data into DataFrame","a72693fe":"This scatterplot shows no clear correlation at all between the draft year and the guards' rookie 3-point percentage. One would think that there would be a positive correlation between these two variables since that in recent years, the league has transitioned to an era dominated by the 3-point shot. Therefore, it follows that incoming point guards may have focused more on their outside jumper and thus had an overall better 3-point percentage than rookie guards several years before. \n\nHowever, as displayed here, this is not the case. Possibly, a more clear positive correlation could be between year and the number of attempts per game. This would better echo the transition to a 3-point era, as guards would be taking more shots, but not necessarily shooting a better percentage."}}