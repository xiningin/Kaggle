{"cell_type":{"c47205c0":"code","939d9219":"code","51842b20":"code","17851646":"code","c5219aa1":"code","f4034ff0":"code","c2af90d3":"markdown","ca32664a":"markdown","760ddedd":"markdown","220665f4":"markdown","1b6f7706":"markdown","62ad69b0":"markdown"},"source":{"c47205c0":"# import the usual packages\nimport time\nimport gc\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport timeit\nimport category_encoders\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom tpot import TPOTClassifier\n\npd.options.display.max_columns = 200\npd.options.display.width = 200\n\n%matplotlib inline\nsns.set(font_scale=1.5, palette=\"colorblind\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))","939d9219":"df = pd.read_csv('..\/input\/agaricus-lepiota.csv')\n\nX = df.reindex(columns=[x for x in df.columns.values if x != 'class'])        # separate out X\nX = X.apply(LabelEncoder().fit_transform)  # encode the x columns string values as integers\n\ny = df.reindex(columns=['class'])   # separate out y\nprint(y['class'].value_counts())\ny = np.ravel(y)                     # flatten the y array\ny = LabelEncoder().fit_transform(y) # encode y column strings as integer\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, test_size=0.25, random_state=10) ","51842b20":"print(X_train.describe())\nprint(X_train.info())","17851646":"tpot = TPOTClassifier(verbosity=3, \n                      scoring=\"accuracy\", \n                      random_state=10, \n                      periodic_checkpoint_folder=\"tpot_mushroom_results\", \n                      n_jobs=-1, \n                      generations=2, \n                      population_size=10)\ntimes = []\nscores = []\nwinning_pipes = []\n\n# run several fits \nfor x in range(10):\n    start_time = timeit.default_timer()\n    tpot.fit(X_train, y_train)\n    elapsed = timeit.default_timer() - start_time\n    times.append(elapsed)\n    winning_pipes.append(tpot.fitted_pipeline_)\n    scores.append(tpot.score(X_test, y_test))\n    tpot.export('tpot_mushroom.py')\n\n# output results\ntimes = [time\/60 for time in times]\nprint('Times:', times)\nprint('Scores:', scores)   \nprint('Winning pipelines:', winning_pipes)","c5219aa1":"# timeo = [1.6234928817333032, 1.162914126116084, 0.6119730584498029, 0.9018127734161681, \n#          2.0324099983001362, 0.45596561313335165, 0.4123572280164808, 1.9914514322998003, \n#          0.31134609155027043, 2.268216603050435]  # previous times\ntimeo = np.array(times)\ndf = pd.DataFrame(np.reshape(timeo, (len(timeo))))\ndf= df.rename(columns={0: \"Times\"})\ndf = df.reset_index()\ndf = df.rename(columns = {\"index\": \"Runs\"})\nprint(df)","f4034ff0":"ax = sns.barplot(x= np.arange(1, 11), y = \"Times\", data = df)\nax.set(xlabel='Run # for Set of 30 Pipelines', ylabel='Time in Minutes')\nplt.title(\"TPOT Run Times for Mushroom Dataset\")\nplt.show()","c2af90d3":"Make a seaborn barplot of the TPOT fit times for 10 pipelines.","ca32664a":"Make a data frame of the time to fit thirty pipelines ten times  are from a previous uncommitted run. All scores on the test set were 1.0.","760ddedd":"# TPOT Automated ML Exploration with Mushroom Classification \n## By Jeff Hale\n\nThis is my experimentation with the TPOT automated machine learning algorithm with the Mushroom classification task. For more information see [this Medium article](https:\/\/medium.com\/p\/4c063b3e5de9\/) I wrote discussing TPOT. ","220665f4":"Check out the data ","1b6f7706":"Instantiate TPOTclassifier object - the generation and population_size determine how many populations are made.","62ad69b0":"Read in the data, encode it, and split it into training and test sets."}}