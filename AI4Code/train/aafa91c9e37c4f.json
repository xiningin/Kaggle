{"cell_type":{"136d1426":"code","7ab2647b":"code","d285a703":"code","9fce2dc7":"code","09c4d8ee":"code","39e8080c":"code","b98380aa":"code","8076f3e3":"code","07680d66":"code","f7521371":"code","161287cc":"code","62636d62":"code","85ba88f2":"code","83676357":"code","99d50aaa":"code","fd731ae8":"code","932ee6dd":"code","1f9617b1":"code","c2a0a328":"code","08a14226":"code","e9543999":"code","9cdc3d0a":"code","d412de2f":"code","68de198c":"code","975e701e":"code","016c51cb":"code","44af49e3":"code","409fee1d":"code","a4ba7c77":"code","fc924efe":"code","f262b1df":"code","3fd4b526":"code","a7a03342":"markdown","32e18592":"markdown","5271b2f8":"markdown","247e2346":"markdown","480131a5":"markdown","22a34ec1":"markdown","5440804a":"markdown","700d24bc":"markdown","c6d67b51":"markdown","48574c40":"markdown","eceaea25":"markdown","d9744e3f":"markdown","28c5baca":"markdown","a25bbd9a":"markdown","ac4c9f89":"markdown","1147b58a":"markdown","801749c0":"markdown","b134fb1d":"markdown","18fa357b":"markdown","b91e031d":"markdown","719505c5":"markdown"},"source":{"136d1426":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.patches as mpatches\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.lines as mlines\nimport os\n%matplotlib inline\n\nfrom pylab import rcParams\ndef figure(b,l):\n    rcParams['figure.figsize']=(b,l)","7ab2647b":"data = pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\nregions = pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv')\ndata = pd.merge(data, regions, on=\"NOC\", how=\"left\")","d285a703":"gender_map={'M':0,'F':1}\ndata['IsFemale']=data['Sex'].map(gender_map)\n\ndef extract_male_female_count(data):\n    gender_data=list(data.groupby(['ID','IsFemale'])['Name'].aggregate('count').reset_index()['IsFemale'].values)\n    males=gender_data.count(0)\n    females=gender_data.count(1)\n    return males,females\ndef extract_year(val):\n    year=val[:val.index(' ')]\n    year=int(year)\n    return year\n\ndef extract_season(val):\n    season=val[val.index(' ')+1:]\n    return season\n\ndata['Year']=data['Games'].apply(extract_year)\ndata['Season']=data['Games'].apply(extract_season)\n# data['Medal']=data['Medal'].fillna('None')\nmedal_dummies=pd.get_dummies(data['Medal'],prefix='Medal')\ndata=pd.concat([data,medal_dummies],axis=1)\n\ncity_map={\n(1896,'Athina'):'GRE',\n(1900,'Paris'):'FRA',\n(1904,'St. Louis'):'USA',\n(1906,'Athina'):'GRE',\n(1908,'London'):'GBR',\n(1912,'Stockholm'):'SWE',\n(1920,'Antwerpen'):'BEL',\n(1924,'Chamonix'):'FRA',\n(1924,'Paris'):'FRA',\n(1928,'Amsterdam'):'NED',\n(1928,'Sankt Moritz'):'SUI',\n(1932,'Lake Placid'):'USA',\n(1932,'Los Angeles'):'USA',\n(1936,'Berlin'):'GER',\n(1936,'Garmisch-Partenkirchen'):'GER',\n(1948,'London'):'GBR',\n(1948,'Sankt Moritz'):'SUI',\n(1952,'Helsinki'):'FIN',\n(1952,'Oslo'):'NOR',\n(1956,\"Cortina d'Ampezzo\"):'ITA',\n(1956,'Melbourne'):'AUS',\n(1956,'Stockholm'):'SWE',\n(1960,'Roma'):'ITA',\n(1960,'Squaw Valley'):'USA',\n(1964,'Innsbruck'):'AUT',\n(1964,'Tokyo'):'JPN',\n(1968,'Grenoble'):'FRA',\n(1968,'Mexico City'):'MEX',\n(1972,'Munich'):'FRG',\n(1972,'Sapporo'):'JPN',\n(1976,'Innsbruck'):'AUT',\n(1976,'Montreal'):'CAN',\n(1980,'Lake Placid'):'USA',\n(1980,'Moskva'):'URS',\n(1984,'Los Angeles'):'USA',\n(1984,'Sarajevo'):'YUG',\n(1988,'Calgary'):'CAN',\n(1988,'Seoul'):'KOR',\n(1992,'Albertville'):'FRA',\n(1992,'Barcelona'):'ESP',\n(1994,'Lillehammer'):'NOR',\n(1996,'Atlanta'):'USA',\n(1998,'Nagano'):'JPN',\n(2000,'Sydney'):'AUS',\n(2002,'Salt Lake City'):'USA',\n(2004,'Athina'):'GRE',\n(2006,'Torino'):'ITA',\n(2008,'Beijing'):'CHN',\n(2010,'Vancouver'):'CAN',\n(2012,'London'):'GBR',\n(2014,'Sochi'):'RUS',\n(2016,'Rio de Janeiro'):'BRA'\n}\n\nhost_years=[];host_city=[];host_NOC=[]\nfor key in city_map:\n    host_years.append(key[0])\n    host_city.append(key[1])\n    host_NOC.append(city_map[key])\nhost_NOC=pd.DataFrame.from_dict({'Year':host_years,'City':host_city,'Host_NOC':host_NOC})\ndata=data.join(host_NOC.set_index(['Year','City']),on=['Year','City'])\ndata['Is_Host']=pd.Series(data['NOC']==data['Host_NOC'],index=data.index)\ndata['Is_Host']=data['Is_Host'].map({True:1,False:0})\n\n# data.head(10)","9fce2dc7":"# data.describe()","09c4d8ee":"# data.info()","39e8080c":"# regions.head(10)","b98380aa":"## Joining the dataframes\nmerged = pd.merge(data, regions, on=\"NOC\", how=\"left\")","8076f3e3":"# merged.head()","07680d66":"fig, plot = plt.subplots(figsize = (15,8))\nax = sns.violinplot(y=merged['Season'], x=merged['Age'])\nax.set_title('Age distribution at the different Olympic seasons.', fontsize = 18)\nplt.show()","f7521371":"sns.set(style = \"darkgrid\")\nfig, plot = plt.subplots(figsize = (15,15))\nax = sns.boxplot(y=\"Age\", x=\"Sex\", hue=\"Sex\", data=merged, palette=\"Set2\")\n\nax.set_title('The range of ages, by gender, at the different Olympic seasons.', fontsize = 18)\nax.yaxis.set_major_locator(ticker.MultipleLocator(10))\nax.xaxis.set_major_formatter(ticker.ScalarFormatter())\nax.set_xlabel('Seasons', fontsize = 15);\nax.set_ylabel('Age groups', fontsize = 15);\nax.legend(loc='upper right', fontsize = 35);\nplt.show()","161287cc":"season_year_data=data.groupby(['Year','Season'])['ID'].aggregate('count').reset_index()\n\nsummer_years=season_year_data[season_year_data['Season']=='Summer'][['Year','ID']]\nwinter_years=season_year_data[season_year_data['Season']=='Winter'][['Year','ID']]\n\nmin_year=min(season_year_data['Year'])\nmax_year=max(season_year_data['Year'])\nyears=np.arange(min_year,max_year+1)\nsome_years=[x for x in enumerate(years) if x[1]%10==0]\n\n\nmales,females=extract_male_female_count(data)\nsummer_data=data[data['Season']=='Summer']\nwinter_data=data[data['Season']=='Winter']\nsummer_males,summer_females=extract_male_female_count(summer_data)\nwinter_males,winter_females=extract_male_female_count(winter_data)\n\nsummer_women_repr=[]\nsummer_years=[]\nwinter_women_repr=[]\nwinter_years=[]\nfor ind,yr in enumerate(years):\n    summer_year_data=summer_data[summer_data['Year']==yr]\n    if(summer_year_data.shape[0]!=0):\n        summer_yearly_gender_males,summer_yearly_gender_females=extract_male_female_count(summer_year_data)\n        summer_women_repr.append(summer_yearly_gender_females\/summer_yearly_gender_males)\n        summer_years.append(yr)\n    winter_year_data=winter_data[winter_data['Year']==yr]\n    if(winter_year_data.shape[0]!=0):\n        winter_yearly_gender_males,winter_yearly_gender_females=extract_male_female_count(winter_year_data)\n        winter_women_repr.append(winter_yearly_gender_females\/winter_yearly_gender_males)\n        winter_years.append(yr)\n        \nfigure(12,8)\nfig=plt.figure(constrained_layout=True)\ngs=fig.add_gridspec(2,2)\nax=[0,0,0]\nax[0]=fig.add_subplot(gs[0,0])\nax[1]=fig.add_subplot(gs[0,1])\n# ax[2]=fig.add_subplot(gs[1,:])\n\ncircle=plt.Circle((0,0),radius=0.5,color='white')\nax[0].pie([males,females],startangle=90,colors=['red','darkblue'],counterclock=False)\nax[0].set_title(\"Male vs. Female Representation\\nin Olympics\",fontsize=15)\nax[0].legend(['Male','Female'],loc=(0.05,0.25),facecolor='w',edgecolor='black',framealpha=1,frameon=True,fontsize=13)\nax[0].add_artist(circle)\n\nblue=['darkblue','dodgerblue']\nblue_labels=['Winter - Male','Winter - Female']\nred=['red','orange']\nred_labels=['Summer - Male','Summer - Female']\nblue_handles=[mpatches.Patch(color=blue[i],label=blue_labels[i]) for i in [0,1]]\nred_handles=[mpatches.Patch(color=red[i],label=red_labels[i]) for i in [0,1]]\ncircle=plt.Circle((0,0),radius=0.4,color='white')\nax[1].pie([summer_males,summer_females],radius=1,counterclock=False,colors=red,startangle=90)\nax[1].pie([winter_males,winter_females],radius=0.68,counterclock=False,colors=blue,startangle=90)\nax[1].set_title(\"Male vs. Female Representation\\nin Summer and Winter Games\",fontsize=15)\nlegend1=ax[1].legend(handles=red_handles,loc=(0.7,0.7),facecolor='w',framealpha=1,edgecolor='black',frameon=True)\nlegend2=ax[1].legend(handles=blue_handles,loc=(0,0.25),facecolor='w',framealpha=1,edgecolor='black',frameon=True)\nax[1].add_artist(legend1)\nax[1].add_artist(legend2)\nax[1].add_artist(circle)\n\n","62636d62":"summerOlympics = merged[merged.Season == 'Summer']","85ba88f2":"sns.set(style = \"darkgrid\")\n# sns.set_style('whitegrid')\nfig, plot = plt.subplots(figsize = (15,15))\nax = sns.boxplot(y=\"Age\", x=\"Sex\", hue=\"Sex\", data=summerOlympics[summerOlympics['Season'] == 'Summer'], palette=\"Set2\")\n\nax.set_title('The range of ages, by gender, at the different summer olympic seasons.', fontsize = 18)\nax.yaxis.set_major_locator(ticker.MultipleLocator(10))\nax.xaxis.set_major_formatter(ticker.ScalarFormatter())\nax.set_xlabel('summer olympic seasons', fontsize = 15);\nax.set_ylabel ('Age groups', fontsize = 15);\nax.legend(loc='upper right', fontsize = 35);\nplt.show()","83676357":"print(sorted(summerOlympics['Year'].unique()))\nprint(\"\"\"\n    We can see that, no olympic games had been conducted in the year 1940 and 1944.\n\"\"\")","99d50aaa":"yearRange = summerOlympics.loc[summerOlympics['Year'] > 1952]\npart = yearRange.groupby('Year')['Sex'].value_counts()\nplt.subplots(figsize=(20, 10))\npart.loc[:,'M'].plot(marker = 'o',label = 'Male')\npart.loc[:,'F'].plot(marker = 'o',label = 'Female')\nplt.ylabel='Gender Count'\nplt.legend()\nplt.title('The difference in the genders since 1952 and any trends', fontsize=\"18\")\nplt.show()","fd731ae8":"sns.set(style = \"darkgrid\")\n# sns.set_style('whitegrid')\nfig, plot = plt.subplots(figsize = (20,15))\nax = sns.boxplot(x=\"Sport\", y=\"Weight\", \n                 data=merged, palette=\"Set2\")\n\nax.set_title('The range of weights, by sport', fontsize = 18)\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, horizontalalignment='right')\nax.set_ylabel ('Weights', fontsize = 15);\nplt.show()","932ee6dd":"sport = merged.groupby('Sport')['Weight'].median()\ndf = sport.to_frame().reset_index()\nsportByMedianWeight = df.sort_values(by='Weight', ascending=False)\nprint(f'The Sport {sportByMedianWeight.iloc[0].Sport} has the highest median weight of {sportByMedianWeight.iloc[0].Weight}')","1f9617b1":"sportPlayedYear = merged[(merged['Sport'] == sportByMedianWeight.iloc[0].Sport)]\nprint(f'The Sport was played in {sportPlayedYear[\"Year\"].unique()} years')","c2a0a328":"# heavistPlayer = merged.sort_values(by='Weight', ascending=False)\n# heavistPlayer.iloc[0]\nheavistPlayer = merged.loc[merged['Weight'][::-1].idxmax()]\nprint(f'Details about Heavist player')\nheavistPlayer","08a14226":"# weightliftingNotNullMedals = merged[(merged['Sport'] == 'Weightlifting')\n#                                     & (merged['Height'].notnull()) \n#                                     & (merged['Weight'].notnull())]\nweightliftingNotNullMedals = merged[(merged['Sport'] == 'Weightlifting') & (merged['Medal'].notnull())]\nweightliftingNotNullMedals.head()\n# weightliftingNotNullMedals.info()","e9543999":"plt.figure(figsize=(12, 10))\n# weightliftingNotNullMedals.plot(kind='scatter', x='Weight', y='Height', alpha=0.5, color='darkblue', figsize = (15,9))\nsns.scatterplot(x=\"Height\", y=\"Weight\", data=weightliftingNotNullMedals, hue=\"Medal\", \n                     style=\"Medal\", palette=\"deep\", legend=\"full\")\nplt.xlabel='Weight'\nplt.ylabel='Height'\nplt.title('Weightlifters height vs weight', fontsize=18)\nplt.show()\n","9cdc3d0a":"plt.figure(figsize=(12, 10))\nsize_order = [\"Gold\", 'Silver', 'Bronze']\nsizes = {\"Gold\": 100, 'Silver': 20, 'Bronze': 10}\nax = sns.relplot(x=\"Height\", y=\"Weight\", hue=\"Medal\", size=\"Medal\", \n                 size_order=size_order,\n                 sizes=sizes, \n                 alpha=.5,height=6, \n                 data=weightliftingNotNullMedals[(weightliftingNotNullMedals['Medal'].notnull())], col=\"Sex\")\n# ax.legend(loc='upper left', fontsize = 15);\n# plt.title('Height vs Weight of Olympic Medalists by Gender')\nplt.show()","d412de2f":"import math\nrow = 0\ncol = 0\nsportsList = ['Weightlifting', 'Basketball', 'Judo', 'Rhythmic Gymnastics', 'Tug-Of-War', 'Athletics']\ntotal_subplot_row = math.floor(len(sportsList)\/3) # math.floor(len(merged[\"Sport\"].unique())\/3)\nNotNullMedals = merged[(merged['Medal'].notnull()) & (merged['Medal'] == 'Gold') & (merged['Height'].notnull()) \n                                        & (merged['Weight'].notnull())]\nfigure(20,7)\nfig,ax = plt.subplots(total_subplot_row,3,constrained_layout=True,sharex=True)\nfig.suptitle(\"Gold Medal in each sport vs gold medal in any other sport\",fontsize=20,va='bottom')\n\n# def plot_each_sport(sport):\nfor sport in sportsList:\n    \n    if row > total_subplot_row:\n        break\n        \n    ax[row,col].scatter( x=\"Height\", y=\"Weight\", data=NotNullMedals[(NotNullMedals['Sport'] != sport)])\n    ax[row,col].scatter( x=\"Height\", y=\"Weight\", data=NotNullMedals[(NotNullMedals['Sport'] == sport)])\n    ax[row,col].xlabel='Weight'\n    ax[row,col].ylabel='Height'\n    ax[row,col].spines['top'].set_visible(False)\n    ax[row,col].spines['right'].set_visible(False)\n    ax[row,col].tick_params(bottom=False,left=False)\n    ax[row,col].set_title(f'Gold medal in {sport} vs  gold medal in any other sport',fontsize=13)\n    ax[row,col].yaxis.grid(False)\n    if col == 2:\n        col = 0\n        row = row + 1\n    else:\n        col = col + 1\n        \nplt.show()","68de198c":"gold_medal = merged[merged['Medal']=='Gold']","975e701e":"sports = gold_medal.groupby(['Sport']).size()\ntop_gold_medal_sports = pd.DataFrame({'Sports':sports.index, 'Count':sports.values})\n#Ranking the count of medalled sport branches in descending order.\ntop_gold_medal_sports.sort_values(['Count', 'Sports'], ascending=[False, True], inplace=True)","016c51cb":"plt.figure(figsize=(18,9))\nsns.barplot(x=top_gold_medal_sports['Sports'][:20], y=top_gold_medal_sports['Count'][:20])\nplt.xticks(rotation= 60)\nplt.title('Top 20 Gold Medalled Sports')\n\nplt.show()","44af49e3":"merged['BMI'] = merged['Weight']\/(merged['Height']\/100)**2\n# gold_medal['BMI'] = gold_medal['Weight']\/(gold_medal['Height']\/100)**2","409fee1d":"# gold_medal.loc[:,['Name','Weight', 'Height', 'BMI', 'Sport', 'Medal']].sort_values(by='BMI', ascending=False).head(10)\nmerged[(merged.Medal == 'Gold') ].loc[:,['Name','Weight', 'Height', 'BMI', 'Sport', 'Medal']].sort_values(by='BMI', ascending=False).head(10)","a4ba7c77":"data.head()","fc924efe":"def extract_medal_tally(data):\n    medal_data=data.groupby(['Year','City','Host_NOC','NOC'])[['Medal_Gold','Medal_Silver','Medal_Bronze']].aggregate('sum').reset_index()\n    total_data=medal_data.groupby(['Year'])[['Medal_Gold','Medal_Silver','Medal_Bronze']].aggregate('sum').reset_index()\n    host_data=medal_data[medal_data['Host_NOC']==medal_data['NOC']]\n    host_data=host_data.groupby(['Year'])[['Medal_Gold','Medal_Silver','Medal_Bronze']].aggregate('sum').reset_index()\n    host_data['Total_Medals']=host_data.apply(lambda x:x['Medal_Gold']+x['Medal_Silver']+x['Medal_Bronze'],axis=1)\n    total_data['Total_Medals']=total_data.apply(lambda x:x['Medal_Gold']+x['Medal_Silver']+x['Medal_Bronze'],axis=1)\n    return total_data,host_data\n\nsummer_data=data[data['Season']=='Summer'].reset_index(drop=True)\nsummer_total_data,summer_host_data=extract_medal_tally(summer_data)\n\nwinter_data=data[data['Season']=='Winter'].reset_index(drop=True)\nwinter_total_data,winter_host_data=extract_medal_tally(winter_data)\n\nfigure(12,7)\nfig,ax=plt.subplots(2,2,constrained_layout=True,sharex=True)\nfig.suptitle(\"Host Nation - Medal Share\",fontsize=20,va='bottom')\n\ndatas=[\n    (summer_total_data['Total_Medals'],summer_host_data['Total_Medals']),\n    (summer_total_data['Medal_Gold'],summer_host_data['Medal_Gold']),\n    (winter_total_data['Total_Medals'],winter_host_data['Total_Medals']),\n    (winter_total_data['Medal_Gold'],winter_host_data['Medal_Gold'])\n]\n\ntitles=[\n    'Total Medals - Summer Games',\n    'Gold Medals - Summer Games',\n    'Total Medals - Winter Games',\n    'Gold Medals - Winter Games'\n]\n\nticks=[2000,700,600,200]\n\nsummer_years=summer_total_data['Year']\nwinter_years=winter_total_data['Year']\nyears=[summer_years,summer_years,winter_years,winter_years]\n\nfor index in np.arange(4):\n    row=int(index\/2);col=int(index%2)\n    ax[row,col].plot(years[index],datas[index][0],color='red',label='Total Medals')\n    ax[row,col].plot(years[index],datas[index][1],color='blue',label=\"Host Nation's Medals\")\n    perc=np.divide(datas[index][1],datas[index][0])*100\n    perc=np.mean(perc)\n    ax[row,col].fill_between(x=years[index],y1=datas[index][0],color='gray',alpha=0.5)\n    ax[row,col].fill_between(x=years[index],y1=datas[index][1],color='pink',alpha=0.5)\n    ax[row,col].spines['top'].set_visible(False)\n    ax[row,col].spines['right'].set_visible(False)\n    ax[row,col].tick_params(bottom=False,left=False)\n    ax[row,col].set_title(titles[index]+\"\\nShare - {perc:.2f}%\".format(perc=perc),fontsize=13)\n    ax[row,col].yaxis.set_major_locator(ticker.MultipleLocator(ticks[index]))\n    ax[row,col].yaxis.grid(False)\n    if(index==0):\n        ax[row,col].legend(loc='best')\n\nplt.show()","f262b1df":"def extract_performance(data,country,thresh=20):\n    country_data=data.groupby(['Year','Host_NOC','NOC'])[['Medal_Gold','Medal_Silver','Medal_Bronze']].aggregate('sum').reset_index()\n    country_data=country_data[country_data['NOC']==country]\n    if(country_data.shape[0]<thresh):\n        return []\n    \n    home_data=country_data[country_data['Host_NOC']==country]\n    home_data=home_data.assign(Total_Medals=home_data.apply(lambda x:x['Medal_Gold']+x['Medal_Silver']+x['Medal_Bronze'],axis=1))\n    other_data=country_data[country_data['Host_NOC']!=country]\n    other_data=other_data.assign(Total_Medals=other_data.apply(lambda x:x['Medal_Gold']+x['Medal_Silver']+x['Medal_Bronze'],axis=1))\n    \n    home_stats=home_data['Total_Medals'].mean()\n    other_stats=other_data['Total_Medals'].values.tolist()\n    return list(zip([country]*len(other_stats),[home_stats]*len(other_stats),other_stats))\n\ndef extract_country_performance(data,season,thresh=20):\n    host_countries=data.groupby(['Host_NOC','Season'])['Name'].aggregate('count').reset_index().drop('Name',axis=1)\n    season_data=data[data['Season']==season]\n    host_country_stats=[]\n    for index,row in host_countries.iterrows():\n        if(row['Season']==season):\n            host_country_stats.extend(extract_performance(season_data,row['Host_NOC'],thresh))\n    return host_country_stats\n\nhost_nation_summer=extract_country_performance(data,'Summer',25)\nhost_nation_summer=pd.DataFrame(host_nation_summer,columns=['Host_NOC','Home_Stat','Other_Stats'])\n\nhost_nation_winter=extract_country_performance(data,'Winter',15)\nhost_nation_winter=pd.DataFrame(host_nation_winter,columns=['Host_NOC','Home_Stat','Other_Stats'])\n\nhost_nation_summer_performance=host_nation_summer.groupby(['Host_NOC','Home_Stat'])['Other_Stats'].aggregate('count').reset_index().drop('Other_Stats',axis=1)\nhost_nation_winter_performance=host_nation_winter.groupby(['Host_NOC','Home_Stat'])['Other_Stats'].aggregate('count').reset_index().drop('Other_Stats',axis=1)\n\nfig,ax=plt.subplots(2,1,constrained_layout=True, figsize = (12, 10))\nfig.suptitle(\"Home Performance vs. Away Performance\",fontsize=20,va='bottom')\n\nsns.pointplot(x='Home_Stat',y='Host_NOC',data=host_nation_summer_performance,ax=ax[0])\nsns.boxplot(x='Other_Stats',y='Host_NOC',color='lightcoral',data=host_nation_summer,showfliers=False,orient='h',ax=ax[0])\nax[0].spines['top'].set_visible(False)\nax[0].spines['right'].set_visible(False)\nax[0].spines['left'].set_visible(False)\nax[0].spines['bottom'].set_visible(False)\nax[0].tick_params(bottom=False,left=False)\nax[0].set_ylabel('')\nax[0].set_xlabel('')\nax[0].set_title(\"Summer Olympics\",fontsize=15)\nax[0].yaxis.grid(True)\nax[0].xaxis.grid(False)\ncatplot_patch=mpatches.Patch(color='lightcoral',label='Away Performances')\npoint_patch=mlines.Line2D([],[],color='red',marker='o',label='Home Performances',linestyle='None')\nax[0].legend(handles=[catplot_patch,point_patch],loc='best')\n\nsns.boxplot(x='Other_Stats',y='Host_NOC',color='mediumslateblue',\n            data=host_nation_winter,showfliers=False,orient='h',ax=ax[1])\nsns.pointplot(x='Home_Stat',y='Host_NOC',data=host_nation_winter_performance,\n              color='blue',markers='o',fontsize=10,join=False,ax=ax[1])\nax[1].spines['top'].set_visible(False)\nax[1].spines['right'].set_visible(False)\nax[1].spines['left'].set_visible(False)\nax[1].spines['bottom'].set_visible(False)\nax[1].tick_params(bottom=False,left=False)\nax[1].set_ylabel('')\nax[1].set_xlabel('')\nax[1].set_title(\"Winter Olympics\",fontsize=15)\nax[1].yaxis.grid(True)\nax[1].xaxis.grid(False)\n\ncatplot_patch=mpatches.Patch(color='mediumslateblue',label='Away Performances')\npoint_patch=mlines.Line2D([],[],color='blue',marker='o',label='Home Performances',linestyle='None')\nax[1].legend(handles=[catplot_patch,point_patch],loc='best')\n\n\nplt.close(3)\nplt.close(2)\nplt.show()","3fd4b526":"noOfLatestYear = 5\ntopCountries = 5\nlatestYears = sorted(gold_medal['Year'].unique())[-noOfLatestYear:]\nsports = gold_medal[gold_medal['Year'].isin( latestYears)].groupby(['region_x']).size()\ntop_gold_medal_regions = pd.DataFrame({'Region':sports.index, 'Count':sports.values})\ntop_gold_medal_regions.sort_values(['Count', 'Region'], ascending=[False, True], inplace=True)\n\nplt.figure(figsize=(9,9))\nsns.barplot(x=top_gold_medal_regions['Region'][:topCountries], y=top_gold_medal_regions['Count'][:topCountries])\nplt.xticks(rotation= 60)\nplt.xlabel=f'Top {noOfLatestYear} countries'\nplt.ylabel=\"Number of Medals\"\nplt.title(f'The top {topCountries} countries, in terms of Gold medals won at the Winter Olympics at the last {noOfLatestYear} Winter Olympics',\n          fontsize = 18)\nplt.show()","a7a03342":"**NOTE**: For the above two plots, we have considered the countries which have participated in atleast 25 Summer Games and 15 Winter Games respectively\n\nThe following boxplots give us a very good idea of a host nation's performance in the following way -\n* If the dot is within the corresponding box, then the home performances are comparable to the away performances\n* If the dot is outside the box but within the whiskers, then the home performances are slightly better than the away performances\n* If the dot is outside the whiskers, then the home performances are much better than the away performances\n\nThus, we realize that in case of the Summer Games, there are a few nations which have performed incredibly well at home like Belgium, France, Sweden & Great Britain while Canada seems to have no difference in their home & away performances.\n\nOn the other hand, there seems to be lesser improvement in performances for nations hosting the Winter Games, with only Japan having benefitted well. However, one important aspect that is common for both Summer & Winter Games is that almost all hosting countries have improved their performances in their respective hosted competitions.","32e18592":"# 2. The range of ages, by gender, for the different summer Olympics","5271b2f8":"### We can observe that \n    1. Rythemic Gymnastic and Synchronized swimming has most of the perticipants winning golds are having lower height and weights.\n    2. Weightlifting has an exponential curve for gold medal and players having higher weight\/heights seems to be winning more golds.\n    3. Volleyball and Basketball gold medals curves shows that height is more prominent then weights.","247e2346":"# 5. The top 5 countries, in terms of Gold medals won at the Winter Olympics at the last 5 Winter Olympics","480131a5":"# 3c. What do you know about the heaviest ever competitor?","22a34ec1":"# 3a. Which sport has the highest median weight?","5440804a":"##### We can observe that Men with higher weight and height has acheived more Gold Medals then women.","700d24bc":"# 1. The range of ages, by gender, at the different Olympic seasons.","c6d67b51":"# 2b. Describe the difference in the genders since 1952 and any trends.","48574c40":"### We can see that the higher the BMI is the higher the chances to win gold in Weightlifting or Judo.","eceaea25":"# 3. The range of weights, by sport.","d9744e3f":"# 4b. What should we consider here?\n\n#### BMI Calculation\n\nBody mass index (BMI) is a measure of body fat.The formula for BMI is : weight (kg) \/ (height (m))2 As you remember, we have NaN values at Weight and Height. We can assign them mean values but i prefer to ignore them. I calculate bmi column below.\n","28c5baca":"\n# 4a. Do the \"biggest\" win gold?","a25bbd9a":"**Note**\n1. Judo has players with haviest weight among all the events.\n2. Rhythmic Gymnastic has lowest median weight. ","ac4c9f89":"# 3b. Which years was it held?","1147b58a":"# 2a. Which are two anomolus years?","801749c0":"### We can see that, no olympic game had been conducted in the year 1940 and 1944.","b134fb1d":"#### Nations hosting the Winter Olympics seem to have a much lesser medal share than those hosting the Summer Games. Also in these graphs, the vertical distance between the red and blue lineplots indicates the host nation's medal share. More the distance, lesser the host nation's medal share. Therefore, we can also conclude that the medal share of the host nation has steadily been decreasing over the years.","18fa357b":"# 4. Height vs Weight of Weightlifters","b91e031d":"### Here we can observe the trend that women perticipation is increasing gradually and it is closing the gap with men","719505c5":"#### USA has won most golds in recent 5 winter olympics"}}