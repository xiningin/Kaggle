{"cell_type":{"fa1c393f":"code","deeba14f":"code","59015280":"code","bc24fe0a":"code","0b70e551":"code","c9c44fb6":"code","64439953":"code","85e6dde6":"code","7aaa13dc":"code","5f5fa99b":"code","4c9597b0":"code","f0481d03":"code","03df4b46":"code","d9a496c2":"code","7460754d":"code","a6565220":"code","bc9cae14":"code","5c735569":"code","05734342":"code","955c0da2":"code","c2df2dd1":"code","753617f5":"code","b1b36ea8":"code","818378a6":"code","26e98633":"code","27b25cb0":"code","5e8a8b3a":"code","ed6cd63a":"code","7852ec9f":"code","7e2f10d7":"code","557dea0b":"code","bc070686":"code","6ddae261":"code","7bcff54e":"code","09694315":"code","1f97cf3b":"code","7ac393c2":"markdown","ded3d450":"markdown","14027c63":"markdown","916c68eb":"markdown","121781c6":"markdown","2a7dbaac":"markdown","fdbb695e":"markdown","dcc67db2":"markdown","93cdacfa":"markdown","212245e5":"markdown","fb0c1586":"markdown"},"source":{"fa1c393f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","deeba14f":"df = pd.read_csv('..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv', index_col='customerID')","59015280":"df.columns","bc24fe0a":"df.info()","0b70e551":"for col in df.select_dtypes(include='object').columns:\n    print(col)\n    print(df[col].value_counts())","c9c44fb6":"df.gender = df.gender.replace({'Male': 1, 'Female':0})\ndf.Partner = df.Partner.replace({'Yes': 1, 'No': 0})\ndf.Dependents = df.Dependents.replace({'Yes': 1, 'No': 0})\ndf.PhoneService = df.PhoneService.replace({'Yes': 1, 'No': 0})\ndf.PaperlessBilling = df.PaperlessBilling.replace({'Yes': 1, 'No': 0})\ndf.Churn = df.Churn.replace({'Yes': 1, 'No': 0})","64439953":"yesno_cols = ['MultipleLines', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies',  ]\nfor col in yesno_cols:\n    df[col] = [1 if x  == 'Yes' else 0 for x in df[col]]","85e6dde6":"dum_columns = ['InternetService', 'Contract', 'PaymentMethod']\nfor col in dum_columns:\n    dum = pd.get_dummies(df[col], prefix=col)\n    df[dum.columns] = dum\ndf = df.drop(dum_columns, axis = 1)","7aaa13dc":"df.TotalCharges = df.TotalCharges.str.replace(' ', '0').astype('float64')","5f5fa99b":"df.head()","4c9597b0":"import h2o\nimport time\nimport itertools\nimport matplotlib.pyplot as plt\nfrom h2o.estimators.glm import H2OGeneralizedLinearEstimator\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator\nfrom h2o.estimators.random_forest import H2ORandomForestEstimator","f0481d03":"h2o.init()","03df4b46":"df = h2o.H2OFrame(df)","d9a496c2":"df.describe()","7460754d":"for col in df.columns:\n    df[col].hist()","a6565220":"plt.figure(figsize=(20,20))\ncorr = df.cor().as_data_frame()\ncorr.index = df.columns\nsns.heatmap(corr, annot = True, cmap='RdYlGn', vmin=-1, vmax=1)\nplt.title(\"Correlation Heatmap\", fontsize=16)\nplt.show()","bc9cae14":"train, valid, test = df.split_frame(ratios=[0.6,0.2], seed=1234)","5c735569":"response = \"Churn\"\ntrain[response] = train[response].asfactor()\nvalid[response] = valid[response].asfactor()\ntest[response] = test[response].asfactor()\nprint(\"Number of rows in train, valid and test set : \", train.shape[0], valid.shape[0], test.shape[0])","05734342":"predictors = df.drop('Churn', axis=1).columns","955c0da2":"predictors","c2df2dd1":"gbm = H2OGradientBoostingEstimator()\ngbm.train(x=predictors, y=response, training_frame=train)","753617f5":"print(gbm)","b1b36ea8":"perf = gbm.model_performance(valid)\nprint(perf)","818378a6":"gbm_tune = H2OGradientBoostingEstimator(\n    ntrees = 3000,\n    learn_rate = 0.01,\n    stopping_rounds = 20,\n    stopping_metric = \"AUC\",\n    col_sample_rate = 0.7,\n    sample_rate = 0.7,\n    seed = 42\n)      \ngbm_tune.train(x=predictors, y=response, training_frame=train, validation_frame=valid)","26e98633":"gbm_tune.model_performance(valid).auc()","27b25cb0":"gbm_tune.varimp_plot()","5e8a8b3a":"from h2o.grid.grid_search import H2OGridSearch\n\ngbm_grid = H2OGradientBoostingEstimator(\n    ntrees = 3000,\n    learn_rate = 0.01,\n    stopping_rounds = 20,\n    stopping_metric = \"AUC\",\n    col_sample_rate = 0.7,\n    sample_rate = 0.7,\n    seed = 1234\n) \n\nhyper_params = {'max_depth':[4,6,8,10,12]}\ngrid = H2OGridSearch(gbm_grid, hyper_params,\n                         grid_id='depth_grid',\n                         search_criteria={'strategy': \"Cartesian\"})\n#Train grid search\ngrid.train(x=predictors, \n           y=response,\n           training_frame=train,\n           validation_frame=valid)","ed6cd63a":"print(grid)","7852ec9f":"sorted_grid = grid.get_grid(sort_by='auc',decreasing=True)\nprint(sorted_grid)","7e2f10d7":"cv_gbm = H2OGradientBoostingEstimator(\n    ntrees = 3000,\n    learn_rate = 0.05,\n    stopping_rounds = 20,\n    stopping_metric = \"AUC\",\n    nfolds=4, \n    seed=2018)\ncv_gbm.train(x = predictors, y = response, training_frame = train, validation_frame=valid)\ncv_summary = cv_gbm.cross_validation_metrics_summary().as_data_frame()\ncv_summary","557dea0b":"cv_gbm.model_performance(valid).auc()","bc070686":"from h2o.estimators import H2OXGBoostEstimator\n\ncv_xgb = H2OXGBoostEstimator(\n    ntrees = 3000,\n    learn_rate = 0.05,\n    stopping_rounds = 20,\n    stopping_metric = \"AUC\",\n    nfolds=4, \n    seed=2018)\ncv_xgb.train(x = predictors, y = response, training_frame = train, validation_frame=valid)\ncv_xgb.model_performance(valid).auc()","6ddae261":"cv_xgb.varimp_plot()","7bcff54e":"from h2o.automl import H2OAutoML\n\naml = H2OAutoML(max_models = 10, max_runtime_secs=600, seed = 1)\naml.train(x=predictors, y=response, training_frame=train, validation_frame=valid)","09694315":"lb = aml.leaderboard\nlb","1f97cf3b":"aml.predict(test)","7ac393c2":"**Data Exploration:**","ded3d450":"**K-Fold cross validation***","14027c63":"**XGBoost**","916c68eb":"This notebook is my try to use this tutorial \nhttps:\/\/www.kaggle.com\/sudalairajkumar\/getting-started-with-h2o?utm_medium=email&utm_source=mailchimp&utm_campaign=datanotes-20180823\nfor this dataset","121781c6":"Convert binary fields to digits","2a7dbaac":"**Model Tuning**","fdbb695e":"**Grid Search**","dcc67db2":"Split dataset to train. valid and test - 60\\20\\20","93cdacfa":"WE can convert to H2Oframe. Mmmmmm...","212245e5":"It was surprise, that TotalCharges contains spaces. Replace them and convert to float","fb0c1586":"**H2O begins!**"}}