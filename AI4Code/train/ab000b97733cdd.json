{"cell_type":{"dc0a6ac6":"code","b56f14f1":"code","cc7d3812":"code","fc1a492b":"code","aea3484e":"code","92e2f8ca":"code","a438f215":"code","c4f813ad":"code","82d9a499":"code","cd23c93b":"code","4b4dd3f4":"code","5424e253":"code","ef119820":"code","1dc810f1":"code","2153e52c":"code","c54796a9":"code","884f0506":"markdown","051d5ffb":"markdown","7d5fce87":"markdown","1bfec683":"markdown","e856983a":"markdown","9fa9eb4b":"markdown","827c4be9":"markdown","54857439":"markdown","e4567fce":"markdown"},"source":{"dc0a6ac6":"# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.time_series.ex3 import *\n\n# Setup notebook\nfrom pathlib import Path\nfrom learntools.time_series.style import *  # plot style settings\nfrom learntools.time_series.utils import plot_periodogram, seasonal_plot\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\n\n\ncomp_dir = Path('..\/input\/store-sales-time-series-forecasting')\n\nholidays_events = pd.read_csv(\n    comp_dir \/ \"holidays_events.csv\",\n    dtype={\n        'type': 'category',\n        'locale': 'category',\n        'locale_name': 'category',\n        'description': 'category',\n        'transferred': 'bool',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nholidays_events = holidays_events.set_index('date').to_period('D')\n\nstore_sales = pd.read_csv(\n    comp_dir \/ 'train.csv',\n    usecols=['store_nbr', 'family', 'date', 'sales'],\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'sales': 'float32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nstore_sales['date'] = store_sales.date.dt.to_period('D')\nstore_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()\naverage_sales = (\n    store_sales\n    .groupby('date').mean()\n    .squeeze()\n    .loc['2017']\n)","b56f14f1":"type(average_sales)","cc7d3812":"X = average_sales.to_frame()\nX[\"week\"] = X.index.week\nX[\"day\"] = X.index.dayofweek\nseasonal_plot(X, y='sales', period='week', freq='day');","fc1a492b":"plot_periodogram(average_sales);","aea3484e":"y = average_sales.copy()\n\n\nfourier = CalendarFourier(freq = \"M\",order = 4)\ndp = DeterministicProcess(\n    index=y.index,\n    constant=True,\n    order=1,\n    additional_terms = [fourier],\n    seasonal = True,\n    drop=True,\n)\nX = dp.in_sample()\nX.head()","92e2f8ca":"model = LinearRegression().fit(X, y)\ny_pred = pd.Series(\n    model.predict(X),\n    index=X.index,\n    name='Fitted',\n)\n\ny_pred = pd.Series(model.predict(X), index=X.index)\nax = y.plot(**plot_params, alpha=0.5, title=\"Average Sales\", ylabel=\"items sold\")\nax = y_pred.plot(ax=ax, label=\"Seasonal\")\nax.legend();\nmodel.score(X, y)","a438f215":"y_deseason = y - y_pred\n\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, sharey=True, figsize=(10, 7))\nax1 = plot_periodogram(y, ax=ax1)\nax1.set_title(\"Product Sales Frequency Components\")\nax2 = plot_periodogram(y_deseason, ax=ax2);\nax2.set_title(\"Deseasonalized\");","c4f813ad":"# National and regional holidays in the training set\nholidays = (\n    holidays_events\n    .query(\"locale in ['National', 'Regional']\")\n    .loc['2017':'2017-08-15', ['description']]\n    .assign(description=lambda x: x.description.cat.remove_unused_categories())\n)\n\ndisplay(holidays)","82d9a499":"ax = y_deseason.plot(**plot_params)\nplt.plot_date(holidays.index, y_deseason[holidays.index], color='C3')\nax.set_title('National and Regional Holidays');","cd23c93b":"average_sales.head()","4b4dd3f4":"from sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder(sparse=False)\nX_holidays = pd.DataFrame(\n    ohe.fit_transform(holidays),\n    index=holidays.index,\n    columns=holidays.description.unique()  # optional,  but nice to have\n)\n\nX2 = X.join(X_holidays, on = 'date').fillna(0.0)\nX2.head()","5424e253":"X_holidays.head()","ef119820":"model = LinearRegression().fit(X2, y)\ny_pred = pd.Series(\n    model.predict(X2),\n    index=X2.index,\n    name='Fitted',\n)\n\ny_pred = pd.Series(model.predict(X2), index=X2.index)\nax = y.plot(**plot_params, alpha=0.5, title=\"Average Sales\", ylabel=\"items sold\")\nax = y_pred.plot(ax=ax, label=\"Seasonal\")\nax.legend();\nmodel.score(X2, y)","1dc810f1":"y = store_sales.unstack(['store_nbr', 'family']).loc[\"2017\"]\n\n# Create training data\nfourier = CalendarFourier(freq='M', order=4)\ndp = DeterministicProcess(\n    index=y.index,\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\nX = dp.in_sample()\nX['NewYear'] = (X.index.dayofyear == 1)\n\nmodel = LinearRegression(fit_intercept=False)\nmodel.fit(X, y)\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)","2153e52c":"STORE_NBR = '1'  # 1 - 54\nFAMILY = 'PRODUCE'\n\n\nax = y.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(**plot_params)\nax = y_pred.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(ax=ax)\nax.set_title(f'{FAMILY} Sales at Store {STORE_NBR}');","c54796a9":"df_test = pd.read_csv(\n    comp_dir \/ 'test.csv',\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'onpromotion': 'uint32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\ndf_test['date'] = df_test.date.dt.to_period('D')\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()\n\n# Create features for test set\nX_test = dp.out_of_sample(steps=16)\nX_test.index.name = 'date'\nX_test['NewYear'] = (X_test.index.dayofyear == 1)\n\n\ny_submit = pd.DataFrame(model.predict(X_test), index=X_test.index, columns=y.columns)\ny_submit = y_submit.stack(['store_nbr', 'family'])\ny_submit = y_submit.join(df_test.id).reindex(columns=['id', 'sales'])\ny_submit.to_csv('submission.csv', index=False)","884f0506":"-------------------------------------------------------------------------------\n","051d5ffb":"# Check for remaining seasonality\n\n","7d5fce87":"-------------------------------------------------------------------------------\n\nThe *Store Sales* dataset includes a table of Ecuadorian holidays.","1bfec683":"Finally, this cell loads the test data, creates a feature set for the forecast period, and then creates the submission file `submission.csv`.","e856983a":"Removing from a series its trend or seasons \" **detrending** or **deseasonalizing** \"the series.\n","9fa9eb4b":"From a plot of the deseasonalized *Average Sales*, it appears these holidays could have some predictive power.","827c4be9":"#  Create holiday features","54857439":"-------------------------------------------------------------------------------\n\n# Create seasonal features\n","e4567fce":"# Introduction #"}}