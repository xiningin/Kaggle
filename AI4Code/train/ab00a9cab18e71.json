{"cell_type":{"074d5849":"code","f360e0aa":"code","e529a302":"code","bd2b7bbf":"code","bfdb71e9":"code","ed906724":"code","b15b527d":"code","2c487d9e":"code","73cc9456":"code","da35e575":"code","d898a497":"code","f0d85180":"code","52951322":"code","e8d6194a":"code","66f54d35":"code","cea46609":"code","46334213":"code","b3cd9c78":"code","5688f21f":"code","1d103930":"code","a0fbb22b":"code","7cab6420":"code","b0666735":"markdown","78a1eb73":"markdown","b4891be1":"markdown","b0e3b206":"markdown","d3a2398f":"markdown","05d36351":"markdown"},"source":{"074d5849":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#Data visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f360e0aa":"# Reading data from file.\ndata=pd.read_csv('..\/input\/data.csv',encoding=\"windows-1252\")\n#print(data)","e529a302":"col=data.columns\nprint(col)","bd2b7bbf":"# Data have 33 columns and 569 entries\ndata.info()\n","bfdb71e9":"data.head(10)","ed906724":"# y includes our labels and x includes our features\ny=data.diagnosis # M or B\nlist=['Unnamed: 32','id','diagnosis']\nx=data.drop(list,axis=1)\nx.head()","b15b527d":"ax=sns.countplot(y,label=\"Count\")   \nB,M=y.value_counts()\nprint('Number of Benign: ', B)\nprint('Number of Malignant: ',M)","2c487d9e":"x.describe()","73cc9456":"data_dia=y # data diagnosis\ndata=x     # dropped data  \ndata_n_2=(data-data.mean())\/(data.std())\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",var_name=\"features\",value_name='value') # melt can run without var_name and value_name\nprint(data)\n\n#loc gets rows (or columns) with particular labels from the index. \n#iloc gets rows (or columns) at particular positions in the index (so it only takes integers).","da35e575":"# first ten features\ndata_dia=y # data diagnosis\ndata=x     # dropped data  \ndata_n_2=(data-data.mean())\/(data.std())\n\n# standardization\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",var_name=\"features\",value_name='value')\n\n# violin plot\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=90)\n","d898a497":"# box plot\nplt.figure(figsize=(10,10))\nsns.boxplot(x='features',y='value',hue='diagnosis',data=data)\nplt.xticks(rotation=90)","f0d85180":"# swarm plot\nplt.figure(figsize=(10,10))\nsns.swarmplot(x='features',y='value',hue='diagnosis',data=data)\nplt.xticks(rotation=90)","52951322":"# correlation map\nf,ax = plt.subplots(figsize=(10, 10))\na=x.iloc[:,:10]\nsns.heatmap(a.corr(), annot=True, linewidths=0.1,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","e8d6194a":"# Second ten features\ndata = pd.concat([y,data_n_2.iloc[:,10:20]],axis=1)\ndata = pd.melt(data, id_vars=\"diagnosis\", var_name=\"features\", value_name=\"value\")\n\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\",y='value',hue='diagnosis',data=data,split=True,inner=\"quart\")\nplt.xticks(rotation=90)\nplt.show()\n","66f54d35":"# boxplot\nf,ax = plt.subplots(figsize=(10, 10))\nsns.boxplot(x='features',y='value',hue='diagnosis',data=data)\nplt.xticks(rotation=90)\nplt.show()","cea46609":"# swarm plot\nplt.figure(figsize=(15,15))\nsns.swarmplot(x='features',y='value',hue='diagnosis',data=data)\nplt.xticks(rotation=90)","46334213":"# correlation map\nf,ax = plt.subplots(figsize=(10, 10))\na=x.iloc[:,10:20]\nsns.heatmap(a.corr(), annot=True, linewidths=0.1,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","b3cd9c78":"# Rest of features\ndata = pd.concat([y,data_n_2.iloc[:,20:31]],axis=1)\ndata = pd.melt(data, id_vars=\"diagnosis\", var_name=\"features\", value_name=\"value\")\n\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\",y='value',hue='diagnosis',data=data,split=True,inner=\"quart\")\nplt.xticks(rotation=90)\nplt.show()","5688f21f":"plt.figure(figsize=(10,10))\nsns.boxplot(x='features',y='value',hue='diagnosis',data=data)\nplt.xticks(rotation=90)","1d103930":"# swarm plot\nplt.figure(figsize=(15,15))\nsns.swarmplot(x='features',y='value',hue='diagnosis',data=data)\nplt.xticks(rotation=90)","a0fbb22b":"# correlation map\nf,ax = plt.subplots(figsize=(10, 10))\na=x.iloc[:,20:31]\nsns.heatmap(a.corr(), annot=True, linewidths=0.1,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","7cab6420":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(x.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\n","b0666735":"Before visualization, we need to normalization or standardization processes. Because differences between values of features are very high to observe on plot. Features plotted in 3 groups and each group includes 10 features to observe better.","78a1eb73":"We use **diagnosis** as class label and drop **Unnamed: 32** from data.\n\n","b4891be1":"When we analyze plot, in  **radius_worst**,**concavity_worst** feature, median of the Malignant and Benign looks like separated so it can be good for classification. ","b0e3b206":"When we analyze plot, in  **radius_mean** feature, median of the Malignant and Benign looks like separated so it can be good for classification. However, in **fractal_dimension_mean** feature, median of Malignant and Benign does not looks like separated so it does not gives good information for classification.  ","d3a2398f":"When we analyze plot, in  **perimeter_se** feature, median of the Malignant and Benign looks like separated so it can be good for classification. However, in **texture_se** feature, median of Malignant and Benign does not looks like separated so it does not gives good information for classification.  ","05d36351":"In this kernel, I try to visualize Breast Cancer Wisconsin (Diagnostic) Data Set. \nI learn data visualization from  (https:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners).\nSpecial thanks for him."}}