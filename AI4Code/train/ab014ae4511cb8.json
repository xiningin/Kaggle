{"cell_type":{"e18a4bed":"code","a81ca5d2":"code","a5155080":"code","1e7aa7bf":"code","20ee242e":"code","8c63a3cb":"code","89cf232d":"code","9db6e3ee":"code","2d40b3a0":"code","fdbcd00b":"code","b1c9c8dc":"code","a9d32674":"code","62f26e9f":"code","fd31d72c":"code","c194ba25":"code","d837d065":"code","8aae369a":"code","f8881aa2":"markdown","4bb0ad51":"markdown","6e49e862":"markdown","fa38d677":"markdown","375a366c":"markdown","ad3a734f":"markdown","30740ac6":"markdown","5e7cf6db":"markdown","5cce0f7d":"markdown","07a2961d":"markdown"},"source":{"e18a4bed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a81ca5d2":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom imblearn.over_sampling import SMOTE\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report, roc_auc_score, confusion_matrix, plot_confusion_matrix, roc_curve\nimport scikitplot as skplt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('seaborn-muted')\n%matplotlib inline","a5155080":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadswinecsv\/wine.csv', delimiter=';', encoding = \"utf8\", nrows = nRowsRead)\ndf.dataframeName = 'wine.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head(3)","1e7aa7bf":"#Save for another work\n\n# Dropping the last two columns and the client number column\n\n#df = df.iloc[:,1:-2]","20ee242e":"#Code by Vivek Chowdhury https:\/\/www.kaggle.com\/vivek468\/will-the-customer-churn\/notebook\n\n# Checking the Descriptive statistics of the numerical columns (Hidden Input)\n\ndf.describe().T.style.bar(\n    subset=['mean'],\n    color='lightsalmon').background_gradient(\n    subset=['std'], cmap='plasma').background_gradient(subset=['75%'], cmap='plasma').background_gradient(\n    subset=['max'], cmap='plasma')","8c63a3cb":"#The original is object binary: Existing customer\/attrited customer\n\n# Changing the Attrition_Flag to 0 and 1 (Hidden Input\/Output)\n\n#df[\"Attrition_Flag\"] = df[\"Attrition_Flag\"].map({\"Existing Customer\":0, \"Attrited Customer\":1})","89cf232d":"#Code by Vivek Chowdhury https:\/\/www.kaggle.com\/vivek468\/will-the-customer-churn\/notebook\n# Performing EDA on the Categorical columns (Hidden Input)\n\nnum_cols = list(df.select_dtypes([\"int64\",\"float64\"]))\ncat_cols = list(df.select_dtypes(\"object\"))\n\nfig, ax = plt.subplots(ncols=1, nrows=5, figsize=(16, 28))\n                \ni = 0 #counter\n\nfor cols in cat_cols:\n    \n    sns.barplot(x=df[cols], y=df['quality'], fill=True, alpha=1, ci=None, ax=ax[i], palette=('#05386b', '#379683','#5cdb59'))\n                \n    ax[i].set_xlabel(' ')\n    ax[i].set_xlabel(' ')\n    ax[i].set_ylabel(' ')\n    ax[i].xaxis.set_tick_params(labelsize=14)\n    ax[i].tick_params(left=False, labelleft=False)\n    ax[i].set_ylabel(cols, fontsize=16)    \n    i=i+1\n    \n      \nplt.show()\n#plt.xticks(rotation=45)#it didn't work","9db6e3ee":"df['quality'].value_counts()","2d40b3a0":"#Code by Vivek Chowdhury https:\/\/www.kaggle.com\/vivek468\/will-the-customer-churn\/notebook\n# Visualizing the Numerical Columns (Hidden Input) and treating outliers\n\n# Visualizing the Numerical Columns (Hidden Input) and treating outliers\n\nfig, ax = plt.subplots(ncols=2, nrows=14, figsize=(16, 40))\n                \ni = 0 #counter\nfor cols in num_cols[1:]:\n    \n    # Removing Outliers     \n    Q3 = df[cols].quantile(0.99)\n    df = df[df[cols] <= Q3]\n    Q1 = df[cols].quantile(0.01)\n    df = df[df[cols] >= Q1]\n    \n    sns.kdeplot(df[cols], fill=True, alpha=1, hue = df['quality'], \n                palette=('#1f2833','#66fcf1'), multiple='stack', ax=ax[i,0])\n    \n    sns.boxplot(data= df, y=cols, x='quality', ax=ax[i, 1],\n               palette=('#1f2833','#45a29e'), color='white')\n    ax[i,0].set_xlabel(' ')\n    ax[i,1].set_xlabel(' ')\n    ax[i,1].set_ylabel(' ')\n    ax[i,1].xaxis.set_tick_params(labelsize=14)\n    ax[i,0].tick_params(left=False, labelleft=False)\n    ax[i,0].set_ylabel(cols, fontsize=12)\n    i=i+1\n      \nplt.show()\n","fdbcd00b":"#Code by Vivek Chowdhury https:\/\/www.kaggle.com\/vivek468\/will-the-customer-churn\/notebook\n# Creating a heatmap of the numerical column (Hidden Input)\n\nheat = df.corr()\nplt.figure(figsize=[16,8])\nplt.title(\"Correlation between all the Numerical Features\", size=25, pad=20, color='Indigo')\nsns.heatmap(heat, cmap=['#0b0c10', '#1f2833','#c5c6c7','#45a29e','#66fcf1'], annot=True)\nplt.show()","b1c9c8dc":"# Checking the imbalance in the target variable: Quality (Hidden Input)\n\nfig = px.pie(df, values=df[\"quality\"].value_counts(), color=df[\"quality\"].unique() ,\n             color_discrete_map={0:\"#1f2833\", 1:\"#66fcf1\"},\n             title='Imbalance in Target Feature', names=df[\"quality\"].unique())\nfig.show()","a9d32674":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","62f26e9f":"df.head(2)","fd31d72c":"# Splitting the data into train and test\n\ny = df.pop(\"quality\")\nX = df\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=69)","c194ba25":"# Normalizing the data\nreq_cols = ['fixed_acidity', 'volatile_acidity', 'citric_acid', 'residual_sugar',\n            'chlorides', 'free_sulfur_dioxide', 'total_sulfur_dioxide', 'density',\n            'pH', 'sulphates', 'alcohol']\n\nscaler = MinMaxScaler()\n\nX_train = scaler.fit_transform(X_train[req_cols])\n\nX_test = scaler.transform(X_test[req_cols])","d837d065":"# Applying SMOTE to handle imbalance in target variable\n\nsampling_strategy = {3:1, 4:18 ,5:235, 6:372, 7:140, 8:21, 9:1} #build a dictionary\n#sampling_strategy = [4, 5, 6, 7, 8] #cannot be a list for samplers which are not cleaning methods.\n#sm = SMOTE(random_state = 69, sampling_strategy =1.0)#original code with binary target\nsm = SMOTE(random_state = 69, sampling_strategy = sampling_strategy )\n\nX_train, y_train = sm.fit_resample(X_train, y_train)","8aae369a":"# XGBoost model\n\nxgb_model = xgb.XGBClassifier(random_state=69, n_jobs=-1)\n\nxgb_model.fit(X_train, y_train)","f8881aa2":"I chose feature alcohol, the only object dtype. I got=TypeError: Neither the `x` nor `y` variable appears to be numeric.\n\nThen I changed to quality which's the target. In fact, I intended just to make this 2 charts below.","4bb0ad51":"#The charts above should be great. I'll find another Dataset to plot them. \n\nSince they are the initial goal in this \"Removing outliers\" Notebook.","6e49e862":"Error below: \"sampling_strategy\" can be a float only when the type of target is binary. For multi-class, use a dict.\"\n\nOriginal code: sampling_strategy = 1.0\n\n3, 4, 5, 6, 7, 8, 9 are the number of the class showed in the Pie chart \"Imbalance in Target Feature\" ","fa38d677":"#I didn't include the target. ","375a366c":"#The original code has binary target (and many objects e.g. male\/female)","ad3a734f":"#since I have only 1 object. The subplots charts below, coulnd't express\/show much.\n\nIt will perform great when I have categorical features.","30740ac6":"#How did I arrived to that Dictionary numbers: Pure Luck!\n\nFirstly, I choose the percents that are in the Piechart above  e.g  3:0.2\n\nThe dictionary was suppose to be: See the numbers and colors of the Pie\n\nsampling_strategy = {3:0.2, 4:3 ,5:16, 6:47, 7:30, 8:2, 9:0.2}\n\nThen the errors started and the programm replying \"it was suppose to be 1 sample you got 0.2\n\nIt was suppose to be 18, you got 3.\n\nAnd I begun to write the numbers that the programm tells to avoid oversampling or whatever. \n\nThat's how I arrive at that dict below:\nsampling_strategy = {3:1, 4:18 ,5:235, 6:372, 7:140, 8:21, 9:1}","5e7cf6db":"The original code was binary. So the values above were 0 (86%) and 1 (14%).\n\nhttps:\/\/www.kaggle.com\/vivek468\/will-the-customer-churn\/notebook","5cce0f7d":"#After that luck above with SMOTE, I got failed to save the draft. \n\nThe last output was the same that the author got: \n\n#Thank you Vivek Chowdhury https:\/\/www.kaggle.com\/vivek468\/will-the-customer-churn\/notebook","07a2961d":"#Code by Vivek Chowdhury https:\/\/www.kaggle.com\/vivek468\/will-the-customer-churn\/notebook"}}