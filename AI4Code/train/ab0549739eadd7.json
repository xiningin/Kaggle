{"cell_type":{"b90bd1e9":"code","19ce9443":"code","bbeb5ace":"code","1a7ffb24":"code","6e15de66":"code","99f5b8f4":"code","83268f0f":"code","5942471e":"code","6cb5a7c1":"code","a2319a71":"code","e3217224":"markdown","d7ebd136":"markdown","5698e30f":"markdown","b8844f7b":"markdown","0bcd790f":"markdown","d33c3c57":"markdown","87ec1f8e":"markdown","9aeedf3a":"markdown","a02bc614":"markdown","b54e5501":"markdown","3156087d":"markdown"},"source":{"b90bd1e9":"import pandas as pd\ntrain_data=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","19ce9443":"train_data.head()","bbeb5ace":"import matplotlib.pyplot as plt\nplt.figure(figsize=(30,30))\nfor i in range(10):\n    plt.subplot(20, 20, i+1)\n    plt.title(\"No.\" + str(i))\n    plt.imshow(train_data.iloc[:,1:].iloc[i].values.reshape(28,28),cmap='Greys')","1a7ffb24":"from sklearn.model_selection import train_test_split\nimport numpy as np\nx=np.array(train_data.iloc[:,1:785])\ny=np.array(train_data[\"label\"])\nx_train, x_valid, y_train, y_valid = train_test_split(x,y,test_size=0.3, random_state=42)","6e15de66":"from sklearn.neural_network import MLPClassifier\ndeep_learning = MLPClassifier(random_state=123,verbose=True)\ndeep_learning.fit(x_train, y_train)","99f5b8f4":"plt.plot(deep_learning.loss_curve_)","83268f0f":"valid_test=deep_learning.predict(x_valid)","5942471e":"valid_test_result=pd.concat([pd.DataFrame(valid_test),pd.DataFrame(y_valid)], axis=1)\nvalid_test_result.columns=[\"prediction\",\"correct label\"]\nvalid_test_result","6cb5a7c1":"x_test=np.array(test_data)\nplt.imshow(x_test[[0]].reshape(28,28),cmap='Greys')","a2319a71":"y_pred_sample= deep_learning.predict(x_test[[0]])\nprint(\"The answer is\",int(y_pred_sample),\".\")","e3217224":"<pre>\nWow! the model guessed right! \n<HR>\nSklearn.neural_network MLPClassifer doesn't support GPU, doesn't support convolution layers .etc.<BR>\nBut it's quite simple and allows us to program shorter. \nThanks for reading this notebook. Feel free to comment and compare Tensorflow.keras one, Pytorch one, \nR Language one,written by me, if u want.\n<\/pre>","d7ebd136":"<pre>\nOkay, let's split train_data into x_train, y_train, x_valid, y_valid.\n<\/pre>","5698e30f":"<pre>\nLet's show the model's loss curve.\n<\/pre>","b8844f7b":"<pre>\nOkay, well done!\n\nNow is the time for prediction.\n<\/pre>","0bcd790f":"<pre>\nLet's show train_data.\n<\/pre>","d33c3c57":"<pre>\nLet's start sklearn.neural_network MLPClassifier.\n<\/pre>","87ec1f8e":"<pre>\nThat means the first column is \"label\", columns from the 2nd to the last is \"28 x 28 = 784 pixcels\".\n<\/pre>","9aeedf3a":"<pre>\nLet's test the model with validation data.\n<\/pre>","a02bc614":"<pre>\nTry the following sample.\n<\/pre>\n","b54e5501":"<pre>\nWhen we enjoy MNIST by using deep learning models, we do usually with \nTensorflow.keras, Pytorch, from scratch .etc...\nBut, have u ever considered \"Sklearn MLP Classifier\"?\n\nAnyway, let's load datasets.\n<\/pre>","3156087d":"<pre>\nIt's 2.\n<\/pre>"}}