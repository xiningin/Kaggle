{"cell_type":{"c3f8c2be":"code","f26c885a":"code","2c653170":"code","70824a70":"code","a8ab2403":"code","138219a5":"code","a240fe58":"code","157afd91":"code","e4ea0dd7":"code","f14bb681":"code","538f1739":"code","41c86918":"code","cb2b9210":"code","6c5258ae":"code","f9c8e106":"code","ece8c709":"code","2fe03ef4":"code","848d93fa":"code","474d1472":"code","24c1f543":"code","5bdf0cf9":"code","feb1941f":"code","06eb7db1":"code","ec59fde6":"code","1305a7bd":"code","962c1225":"code","61ee9174":"markdown","53badd17":"markdown","3a758750":"markdown","138fabf9":"markdown","71eaa115":"markdown","e81fd668":"markdown","2d7ae6e8":"markdown","a225ea10":"markdown","3cceb114":"markdown","66452b0f":"markdown","de67a3a6":"markdown","d7bc189d":"markdown","348ca7d1":"markdown","66d315cf":"markdown","16046a95":"markdown"},"source":{"c3f8c2be":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n#import libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn import metrics\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.optimizers import SGD,Adam\nimport keras\n# Conv1D + LSTM\nfrom keras.layers.convolutional import Conv1D,MaxPooling1D,Conv2D,MaxPooling2D\nfrom keras.layers import LSTM\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\n\nfrom tensorflow.keras import models, layers\n\nfrom tensorflow.keras.applications import EfficientNetB0\nfrom tensorflow.keras.applications import EfficientNetB6\nfrom tensorflow.keras.applications import InceptionV3\n\nfrom tensorflow.keras.applications import ResNet50","f26c885a":"df_dk=pd.read_csv('..\/input\/keylogger-detection\/Keylogger_Detection.csv')\ndf_dk.head(5)","2c653170":"df_dk.dtypes","70824a70":"Class_df = df_dk[\"Class\"]\ndf_num = df_dk.select_dtypes(include=[np.number])\ndf_num = df_num.join(Class_df)","a8ab2403":"df_num.drop('Unnamed: 0', axis=1, inplace=True)","138219a5":"print(df_num.isna().sum().sum())\ndf_num=df_num.dropna()","a240fe58":"df_num[\"label\"]=df_num[\"Class\"]\ndf_num.loc[df_num.label == \"Benign\", 'label'] = 0\ndf_num.loc[df_num.label == \"Keylogger\", 'label'] = 1\ndf_num.drop('Class', axis=1, inplace=True)\ndf_num.sample(5)","157afd91":"df_num=df_num.sample(n=200000)","e4ea0dd7":"df_num.groupby('label').size()","f14bb681":"for col in (df_num.iloc[:,:-1].columns):\n    if(df_num[col].min()==df_num[col].max()):\n            df_num.drop(col, axis=1, inplace=True)","538f1739":"# Normalization OR Standardization\ndef standardize(df,col):\n    #df[col]= (df[col]-df[col].mean())\/(df[col].std()) # Standardization\n    df[col]= 255*(df[col]-df[col].min())\/(df[col].max()-df[col].min()) #Normalization\n\nfor i in (df_num.iloc[:,:-1].columns):\n    standardize (df_num,i)\n\ndf_num.head()","41c86918":"for i in range(957):\n    col=\"A\"+str(i)\n    df_num[col]=0\n\ndf_num.shape\n","cb2b9210":"target=['label']\nfeatures = [c for c in df_num.columns if c!=\"label\"]","6c5258ae":"row_1=df_num[features].iloc[0].to_numpy()\nrow_1.shape\nrow_2=row_1.reshape(32, 32)\nrow_2=row_2.astype(int)\nprint(type(row_2))\nfrom matplotlib import pyplot as plt\nplt.imshow(row_2,cmap='gray')\nplt.show()","f9c8e106":"X = df_num[features].values # Features\ny = df_num[target].values # Target\n\nX=X.astype(np.float32)\ny=y.astype(np.float32)\n\nX.shape,y.shape,","ece8c709":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=12)","2fe03ef4":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","848d93fa":"X_train_cnn = np.reshape(X_train, (X_train.shape[0], 32,32,1))\nX_test_cnn = np.reshape(X_test, (X_test.shape[0], 32,32,1))\nprint(X_train_cnn.shape)\nprint(X_test_cnn.shape)\n","474d1472":"learning_rate=0.0001\nbatch_size=1024\nepochs = 50\n\nmodel_save = ModelCheckpoint('.\/Keylogging.h5', \n                             save_best_only = True, \n                             save_weights_only = True,\n                             monitor = 'val_loss', \n                             mode = 'min', verbose = 1)\nearly_stop = EarlyStopping(monitor = 'val_loss', min_delta = 0.0001, \n                           patience = 10, mode = 'min', verbose = 1,\n                           restore_best_weights = True)\nreduce_lr = ReduceLROnPlateau(monitor = 'val_loss', factor = 0.75, \n                              patience = 10, min_delta = 0.0001, \n                              mode = 'min', verbose = 1)","24c1f543":"def create_model(): \n    inputs = layers.Input(shape=(32,32,1))\n    efficientnet_layers = EfficientNetB0(include_top=False,input_shape=(),weights='imagenet',pooling='avg')\n    model = Sequential()\n    \n    model.add(inputs)\n    model.add(keras.layers.Conv2D(3,3,activation='relu',padding='same'))\n    model.add(efficientnet_layers)\n    #model.add(Dropout(0.3))\n    model.add(Dense(1, activation=\"sigmoid\"))\n    \n    optimizer = Adam(learning_rate=learning_rate)\n    model.compile(loss='binary_crossentropy', optimizer=optimizer,metrics=[keras.metrics.AUC(name='auc')])\n\n    return model\n\nmodel = create_model()\nmodel.summary()","5bdf0cf9":"history = model.fit(X_train_cnn,\n                    y_train,\n                    batch_size=batch_size,\n                    steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                    epochs=epochs,\n                    validation_data=(X_test_cnn,y_test),\n                    callbacks = [model_save, early_stop, reduce_lr],)","feb1941f":"y_pred = model.predict(X_test_cnn, batch_size=512)\nAUC = metrics.roc_auc_score(y_test,y_pred)\nprint(\"AUC: {:.3f}\".format(AUC))","06eb7db1":"hist_df = pd.DataFrame(history.history)\nhist_df.to_csv('history.csv')","ec59fde6":"plt.figure(figsize=(15,5))\nplt.plot(range(history.epoch[-1]+1),history.history['val_auc'],label='val_auc')\nplt.plot(range(history.epoch[-1]+1),history.history['auc'],label='auc')\nplt.title('auc'); plt.xlabel('Epoch'); plt.ylabel('auc');plt.legend(); \nplt.show()","1305a7bd":"plt.figure(figsize=(15,5))\nplt.plot(range(history.epoch[-1]+1),history.history['val_loss'],label='Val_loss')\nplt.plot(range(history.epoch[-1]+1),history.history['loss'],label='loss')\nplt.title('loss'); plt.xlabel('Epoch'); plt.ylabel('loss');plt.legend(); \nplt.show()","962c1225":"def generate_results(y_test, y_score):\n    # print(y_score)\n    fpr, tpr, _ = roc_curve(y_test, y_score)\n    roc_auc = auc(fpr, tpr)\n    plt.figure()\n    plt.plot(fpr, tpr, color='darkorange',\n             lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC Curve')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n    \ngenerate_results(y_test, y_pred)","61ee9174":"### Training Curves","53badd17":"1. https:\/\/medium.com\/analytics-vidhya\/cnn-based-malware-detection-python-and-tensorflow-717f8de84ee\n1. https:\/\/medium.com\/analytics-vidhya\/malware-detection-with-deep-learning-state-of-the-art-177c81aa83ea\n","3a758750":"### ROC Curve","138fabf9":"### Removing Columns","71eaa115":"# Reading Data","e81fd668":"# IoT Intrusion Detection [Keylogging] CNN-img","2d7ae6e8":"# Build CNN Model","a225ea10":"### Removing nan values","3cceb114":"# Importing Libraries","66452b0f":"# Evaluation","de67a3a6":"# Split DataSet","d7bc189d":"# Remove Useless Features","348ca7d1":"# Feature Scaling","66d315cf":"# Data Preparation","16046a95":"# Distribution Classes"}}