{"cell_type":{"391a5d4e":"code","da04fd47":"code","79f2fdd7":"code","29e7e81f":"code","e4ec1943":"code","b2f455f0":"code","0ef2737b":"code","97e662e1":"code","94653d69":"code","723f954a":"code","31be2544":"code","d8fa2935":"code","06c0c1e2":"code","453dbc34":"code","61bf786d":"code","25f0f6c9":"code","a24a8962":"code","4a436bb0":"code","2218da4b":"code","1b8b92e3":"code","4e8457cb":"code","54ce9a51":"code","5609b75a":"code","6751ace8":"code","3ef03650":"code","d3508d74":"code","7603d789":"code","8d7902f6":"code","e1a6f50b":"code","ba7050a8":"code","5550d437":"code","f9ab661e":"code","a4fd08af":"code","e9ce4df1":"code","e053762e":"code","1980d3af":"code","c260bc3a":"code","f7cdc378":"code","8b83dabf":"code","eaaa73d7":"code","5717ac9b":"code","9b7580c9":"code","a93971d6":"code","8ad47fb7":"code","8ca8a98b":"code","7a8c2481":"code","9454c2e6":"code","64ccf9ac":"code","8de33766":"code","4ac6dc0c":"code","49235d34":"code","d44364c4":"code","3ee18938":"code","2a5de41e":"code","abf81d2b":"code","291c8079":"code","d0147f4f":"markdown","24fef5bf":"markdown","e0344e59":"markdown","6f53cd0f":"markdown","aa9d09bb":"markdown","d9376e34":"markdown","eea67992":"markdown","c1976e6a":"markdown","c4b0027e":"markdown","abf83498":"markdown","81d4f440":"markdown","9b192be1":"markdown","454d1d49":"markdown","31cca1fd":"markdown","05c5e6f4":"markdown","25b0b268":"markdown","5da89f17":"markdown","b30898e8":"markdown","f4161e67":"markdown","bafed815":"markdown","330f2e1a":"markdown","b8458d27":"markdown","804a2617":"markdown","37826ac2":"markdown","db7d00c9":"markdown","aabc9827":"markdown","6c703aae":"markdown","ad9bd2f1":"markdown","4a0e5fe6":"markdown","12b620f2":"markdown","0fda2e4b":"markdown","341e9047":"markdown","049820af":"markdown","bfcb2795":"markdown"},"source":{"391a5d4e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"ticks\", color_codes=True)","da04fd47":"df = pd.read_csv('..\/input\/hospital_data.csv')\ndf.head()","79f2fdd7":"df = df.drop('Unnamed: 0', axis=1)\ndf.shape","29e7e81f":"df.dtypes","e4ec1943":"def missing_values(df):\n    missing_val = df.isnull().sum()\n    missing_val_percent = missing_val * 100 \/ len(df)\n    missing_val_table = pd.concat([missing_val, missing_val_percent], axis=1)\n    missing_val_table = missing_val_table.rename(columns={0 : 'Missing Values', 1 : '% of Total Values'})\n    return missing_val_table","b2f455f0":"missing_vals = missing_values(df)\nmissing_vals.sort_values(by=['% of Total Values'], ascending=False).head()","0ef2737b":"df = df.rename(columns={\"Mortality Y \/ N\": \"Mortality\"})","97e662e1":"plt.figure(figsize=(8,6))\nsns.countplot(x='Mortality', data=df, order= df['Mortality'].value_counts().index)\nplt.title('Mortality count')\nplt.show()","94653d69":"df.loc[df['Mortality'] == 'NO', 'Mortality'] = 0\ndf.loc[df['Mortality'] == 'YES', 'Mortality'] = 1\ndf['Mortality'] = df['Mortality'].astype('int64')","723f954a":"# no. of unique vals in object type cols\ndf.select_dtypes('object').apply(pd.Series.nunique, axis=0)","31be2544":"df.loc[(df['SEX'] == 'MALE') , 'SEX'] = 'Male'\ndf.loc[(df['SEX'] == 'FEMALE'), 'SEX'] = 'Female'\ndf.loc[(df['SEX'] == 'Male(Child)'), 'SEX'] = 'Boy'\ndf.loc[(df['SEX'] == 'Female(Child)'), 'SEX'] = 'Girl'","d8fa2935":"sns.catplot(x=\"SEX\", y=\"AGE\", hue=\"Mortality\", kind=\"box\", data=df)\nplt.title('Age plot wrt Sex & Mortality')\nplt.show()","06c0c1e2":"# Using AGE col for plotting purpose since it will have the range of ages, the col will be dropped during training\ndf['Age'] = df['AGE']\n\ndf.loc[df['Age'] == 0, 'Age'] = 5\ndf.loc[(df['Age'] > 100), 'AGE'] = 100","453dbc34":"df.loc[df['AGE'] <= 10, 'AGE'] = 10\ndf.loc[(df['AGE'] > 10) & (df['AGE'] <= 20), 'AGE'] = 20\ndf.loc[(df['AGE'] > 20) & (df['AGE'] <= 30), 'AGE'] = 30\ndf.loc[(df['AGE'] > 30) & (df['AGE'] <= 40), 'AGE'] = 40\ndf.loc[(df['AGE'] > 40) & (df['AGE'] <= 50), 'AGE'] = 50\ndf.loc[(df['AGE'] > 50) & (df['AGE'] <= 60), 'AGE'] = 60\ndf.loc[(df['AGE'] > 60) & (df['AGE'] <= 70), 'AGE'] = 70\ndf.loc[(df['AGE'] > 70) & (df['AGE'] <= 80), 'AGE'] = 80\ndf.loc[(df['AGE'] > 80) & (df['AGE'] <= 90), 'AGE'] = 90\ndf.loc[(df['AGE'] > 90), 'AGE'] = 100","61bf786d":"plt.figure(figsize=(12, 6))\nsns.countplot(x=\"AGE\", data=df, order=df['AGE'].value_counts().index)\nplt.title(\"AGE count\")","25f0f6c9":"temp_df = df.groupby(['Mortality', 'AGE'])['AGE'].count().unstack(['AGE'])\ntemp_df.head()","a24a8962":"sns.catplot(x='AGE', col='Mortality', hue='SEX', data=df,order=df['AGE'].value_counts().index, kind='count', height=8, aspect=.7)","4a436bb0":"plt.figure(figsize=(12, 6))\nsns.catplot(x=\"SEX\", kind=\"count\", data=df, order=df['SEX'].value_counts().index)\nplt.title(\"SEX count\")","2218da4b":"temp_df = df.groupby(['Mortality', 'SEX'])['SEX'].count().unstack('Mortality')\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(12,8))\nplt.title('SEX vs Mortality plot')\nplt.show()","1b8b92e3":"temp_df = df.groupby(['Mortality', 'AGE', 'SEX'])['SEX'].count().unstack(['Mortality']).reset_index()\ntemp_df.columns = ['AGE', 'SEX', '0', '1']\ntemp_df.sort_values(by='0', ascending=False).head()","4e8457cb":"sns.catplot(x='SEX', col='Mortality', hue='AGE', data=df, kind='count', height=8, aspect=.7)","54ce9a51":"plt.figure(figsize=(6,4))\nplt.scatter(range(df.shape[0]), np.sort(df['PREAUTH_AMT']))\nplt.xlabel('Index')\nplt.ylabel('PREAUTH_AMT')\nplt.show()","5609b75a":"upper_limit = np.percentile(df['PREAUTH_AMT'], 99)\ndf.loc[(df['PREAUTH_AMT'] > upper_limit), 'PREAUTH_AMT'] = upper_limit","6751ace8":"plt.figure(figsize=(12, 8))\nsns.catplot(x=\"SEX\", y=\"PREAUTH_AMT\", hue=\"Mortality\", kind=\"box\", data=df)\nplt.title('PREAUTH_AMT plot wrt Sex & Mortality')\nplt.show()","3ef03650":"plt.figure(figsize=(6,4))\nplt.scatter(range(df.shape[0]), np.sort(df['CLAIM_AMOUNT']))\nplt.xlabel('Index')\nplt.ylabel('CLAIM_AMOUNT')\nplt.show()","d3508d74":"upper_limit = np.percentile(df['CLAIM_AMOUNT'], 99)\ndf.loc[(df['CLAIM_AMOUNT'] > upper_limit), 'CLAIM_AMOUNT'] = upper_limit","7603d789":"sns.catplot(x=\"SEX\", y=\"CLAIM_AMOUNT\", hue=\"Mortality\", kind=\"box\", data=df)\nplt.title('CLAIM_AMOUNT plot wrt Sex & Mortality')\nplt.show()","8d7902f6":"temp_df = df.groupby(['Mortality', 'CASTE_NAME'])['CASTE_NAME'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(8, 8))\nplt.title('CASTE_NAME vs Mortality plot')\nplt.show()","e1a6f50b":"sns.catplot(x='CASTE_NAME', col='Mortality', hue='AGE', data=df, kind='count', height=8, aspect=.7)","ba7050a8":"temp_df = df.groupby(['CASTE_NAME', 'AGE'])['CASTE_NAME'].count().unstack(['AGE'])\ntemp_df.plot.bar(rot=0, figsize=(25, 8))\nplt.title('Ages with respect to diff caste groups')\nplt.show()","5550d437":"temp_df = df.groupby(['CATEGORY_CODE', 'Mortality'])['CATEGORY_CODE'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(25, 12))\nplt.title('CATEGORY_CODE vs Mortality plot')\nplt.show()","f9ab661e":"temp_df = df.groupby(['CATEGORY_NAME', 'Mortality'])['CATEGORY_NAME'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=90, figsize=(25, 12))\nplt.title('CATEGORY_NAME vs Mortality plot')\nplt.show()","a4fd08af":"temp_df = df.groupby(['DISTRICT_NAME', 'Mortality'])['DISTRICT_NAME'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(25, 12))\nplt.title('DISTRICT_NAME vs Mortality plot')\nplt.show()","e9ce4df1":"df = df.drop(['DISTRICT_NAME'], axis=1)","e053762e":"temp_df = df.groupby(['HOSP_TYPE', 'Mortality'])['HOSP_TYPE'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(8, 6))\nplt.title('HOSP_TYPE vs Mortality plot')\nplt.show()","1980d3af":"temp_df = df.groupby(['HOSP_DISTRICT', 'Mortality'])['HOSP_DISTRICT'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=30, figsize=(12, 8))\nplt.title('HOSP_DISTRICT vs Mortality plot')\nplt.show()","c260bc3a":"temp_df = df.groupby(['SRC_REGISTRATION', 'Mortality'])['SRC_REGISTRATION'].count().unstack(['Mortality'])\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(8, 6))\nplt.title('SRC_REGISTRATION vs Mortality plot')\nplt.show()","f7cdc378":"df = df.drop(['MORTALITY_DATE'], axis=1)","8b83dabf":"df.loc[(df['DISCHARGE_DATE'].isnull()) , 'DISCHARGE_DATE'] = '0\/0\/0000 0:00'","eaaa73d7":"df['PREAUTH_DATE'] = pd.to_datetime(df['PREAUTH_DATE'])\ndf['CLAIM_DATE'] = pd.to_datetime(df['CLAIM_DATE'])\ndf['SURGERY_DATE'] = pd.to_datetime(df['SURGERY_DATE'])\ndf['DISCHARGE_DATE'] = pd.to_datetime(df['DISCHARGE_DATE'], errors = 'coerce')\n\ndf['PREAUTH_Month'] = df['PREAUTH_DATE'].dt.month\ndf['PREAUTH_Year'] = df['PREAUTH_DATE'].dt.year\n\ndf['CLAIM_Month'] = df['CLAIM_DATE'].dt.month\ndf['CLAIM_Year'] = df['CLAIM_DATE'].dt.year\n\ndf['SURGERY_Month'] = df['SURGERY_DATE'].dt.month\ndf['SURGERY_YEAR'] = df['SURGERY_DATE'].dt.year\n\ndf['DISCHARGE_Month'] = df['DISCHARGE_DATE'].dt.month\ndf['DISCHARGE_YEAR'] = df['DISCHARGE_DATE'].dt.year","5717ac9b":"df.loc[(df['DISCHARGE_YEAR'].isnull()) , 'DISCHARGE_YEAR'] = round(df['DISCHARGE_YEAR'].mean(), 0)\ndf.loc[(df['DISCHARGE_Month'].isnull()) , 'DISCHARGE_Month'] = round(df['DISCHARGE_Month'].mean(), 0)","9b7580c9":"df = df.drop(['PREAUTH_DATE', 'CLAIM_DATE', 'SURGERY_DATE', 'DISCHARGE_DATE'], axis=1)","a93971d6":"pd.crosstab(df['SURGERY_YEAR'], df['Mortality']).T","8ad47fb7":"temp_df = df.groupby(['Mortality', 'SURGERY_YEAR'])['SURGERY_YEAR'].count().unstack('SURGERY_YEAR')\ntemp_df = temp_df.T\ntemp_df.columns = ['0', '1']\ntemp_df = temp_df.sort_values(by='0', ascending=False)\ntemp_df.plot.bar(rot=0, figsize=(8,6))","8ca8a98b":"plt.figure(figsize=(12, 6))\nsns.countplot(x=\"SURGERY_Month\", hue='Mortality', data=df, order= df['SURGERY_Month'].value_counts().index)\nplt.title(\"Months of Surgery\")","7a8c2481":"df = df.drop(['SURGERY_Month', 'CLAIM_Month', 'PREAUTH_Month', 'DISCHARGE_Month', 'AGE'], axis=1)","9454c2e6":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ncat_cols = [col for col in df.columns if df[col].dtype == 'object']\nfor col in cat_cols:\n    df[col] = le.fit_transform(df[col])","64ccf9ac":"X = df.drop('Mortality', axis=1)\ny = df['Mortality']","8de33766":"from sklearn.preprocessing import StandardScaler\n\nX = StandardScaler().fit_transform(X)","4ac6dc0c":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=42)","49235d34":"sns.countplot(y_train)","d44364c4":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE(random_state=9)\nX_train, y_train = smote.fit_sample(X_train, y_train)\n\nsns.countplot(y_train)","3ee18938":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\n\nlog_reg = LogisticRegression(C=1, random_state=17, solver='liblinear')\n\nc_values = np.logspace(-2, 2, 20)\n\nclf = GridSearchCV(estimator=log_reg, param_grid={'C': c_values}, scoring='roc_auc', n_jobs=1, cv=5, verbose=1)\n\nclf.fit(X_train, y_train)\n# clf.best_params_\n\ny_pred = clf.predict(X_test)\n\nprint(accuracy_score(y_test, y_pred))","2a5de41e":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report \n\nconf_mat = confusion_matrix(y_test, y_pred)\nreport = classification_report(y_test, y_pred)\n\nprint('Confusion Matrix ==>')\nprint(conf_mat)\nprint('----------------------------------------------------------------------------------------')\nprint('Classification Report ==>')\nprint(report)","abf81d2b":"from sklearn.metrics import roc_curve, roc_auc_score\n\ny_pred_proba = clf.predict_proba(X_test)[:, 1]\n\nfpr, tpr, _ = roc_curve(y_test, y_pred_proba)\nauc = roc_auc_score(y_test, y_pred_proba)\n\nplt.plot(fpr, tpr, label=\"auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","291c8079":"map_class = {0: 'NO', 1: 'YES'}\ntemp_df = pd.DataFrame({'prediction': y_pred, 'original': y_test})\ntemp_df['prediction'] = temp_df['prediction'].map(map_class)\ntemp_df['original'] = temp_df['original'].map(map_class)\ntemp_df.head()","d0147f4f":"D SRC_REGISTRATION has excessively greater amount of deaths than any class","24fef5bf":"HOSP_TYPE","e0344e59":"Fix that outlier","6f53cd0f":"Exploring datetime cols","aa9d09bb":"Caste BC with ages between 41 and 60 has more deaths","d9376e34":"Class imbalance fixed!","eea67992":"Most of the surgeries are done in 2017 and 2016, the deaths in these years are also greater than other years","c1976e6a":"In each month almost same no. of surgeries takes place","c4b0027e":"So a lot of ages has its value 0 for boy & girl and a Female has an age > 100, so we have to format the age.","abf83498":"So preauthorization amount of female is maximum & also preauthorization amount of alive people are greater than dead ones ","81d4f440":"Now exploring each columns","9b192be1":"The sample data contains the following attributes:\n\na) AGE: Age of the patient\n\nb) SEX: Sex of the patient\n\nc) CASTE NAME: Caste of the patient.\n\nd) CATEGORY _CODE: Administrative data\n\ne) CATEGORY NAME: Administrative data\n\nf) SURGERY CODE: Administrative data\n\ng) SURGERY: Name of the surgery operated.\n\nh) DISTRICT_NAME: District of the patient\n\ni) PREAUTH_DATE: Date of pre-authorization of the treatment\n\nj) PREAUTH_AMT: Amount pre-authorized\n\nk) CLAIM_DATE: Date of claim\n\nl) CLAIM_AMOUNT: Amount claimed (post-treatment)\n\nm) HOSP_NAME: Hospital Name\n\nn) HOSP_TYPE: Type of hospital (Government or Private)\n\no) HOSP_DISTRICT: District where the hospital is located\n\np) SURGERY _ DATE: Date of surgery\n\nq) DISCHARGE DATE: Date of discharge from the hospital post surgery\n\nt) Mortality Y \/ N: If the patient died in the process\n\ns) MORTALITY DATE: Date if dead\n\nt) SRC_REGISTRATION: Administrative data\n\nThe target column is => 'Mortality Y \/ N'","454d1d49":"AGE & Sex","31cca1fd":"District 3 & 1 has higher deaths than others","05c5e6f4":"Replace null vals with mean","25b0b268":"Death rate of male is greater than female","5da89f17":"AGE in range of [ages > 30 and ages <= 70] mortality with class 0 is more ","b30898e8":"AUC score 1 represent perfect classifier and 0.5 represents bad classifier","f4161e67":"HOSP_DISTRICT 1, 2, 3 has almost same amount of deaths","bafed815":"CASTE_NAME","330f2e1a":"So there is a problem of class imbalance we have to fix that later","b8458d27":"NEPHROLOGY, MEDICAL ONCOLOGY & POLY TRAUMA categories have higher deaths","804a2617":"Males within age 31 and 60 have high deaths & Females with ages between 41 and 60 have high deaths","37826ac2":"PREAUTH_AMT","db7d00c9":"Claimed amount of Boy with Mortality 1 or alive is maximum","aabc9827":"Now we will have to fix the class imbalance on the training set[](http:\/\/)","6c703aae":"HOSP_DISTRICT","ad9bd2f1":"Hospital type C has greater deaths","4a0e5fe6":"CLAIM_AMOUNT","12b620f2":"CATEGORY_CODE","0fda2e4b":"M6, S12 & S15 category codes have higher deaths than others","341e9047":"SRC_REGISTRATION","049820af":"DISTRICT_NAME","bfcb2795":"CATEGORY_NAME"}}