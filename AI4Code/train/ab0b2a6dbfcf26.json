{"cell_type":{"25dde918":"code","f95556a5":"code","5f647b87":"code","59e45f69":"code","c41d02a2":"code","4ecd4303":"code","eed2632c":"code","8feab7b8":"code","489e3260":"code","6a36332e":"code","bed9208d":"code","bd8bb65a":"code","d63bc275":"code","e46d0c33":"code","d0611a46":"code","86e1bfc6":"code","204c659f":"code","797193d1":"code","5fa1359f":"markdown","b0203258":"markdown","e6ef1438":"markdown","2f462474":"markdown","63607d2f":"markdown","88986aee":"markdown","1c90326f":"markdown","c02ea589":"markdown","2b86d300":"markdown","f1cd219b":"markdown","dffcd35d":"markdown"},"source":{"25dde918":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f95556a5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","5f647b87":"waterpotability = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")\n\n# Check the data load\nwaterpotability.head()","59e45f69":"# Check the data structure\nwaterpotability.info()","c41d02a2":"# Check for missing value\nwaterpotability.isna().sum()","4ecd4303":"# Explore the target variable\nsns.countplot(waterpotability['Potability'])\nwaterpotability['Potability'].value_counts()","eed2632c":"# We will revist the correlation heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(waterpotability.corr(), annot=True)","8feab7b8":"# Let us check the distribution of the attributes\n\nfig = plt.figure(figsize=(22, 11))\nfig.subplots_adjust(hspace=0.4, wspace=0.4)\nax = fig.add_subplot(3, 3, 1)\nsns.distplot(waterpotability['ph'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 2)\nsns.distplot(waterpotability['Hardness'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 3)\nsns.distplot(waterpotability['Solids'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 4)\nsns.distplot(waterpotability['Chloramines'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 5)\nsns.distplot(waterpotability['Sulfate'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 6)\nsns.distplot(waterpotability['Conductivity'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 7)\nsns.distplot(waterpotability['Organic_carbon'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 8)\nsns.distplot(waterpotability['Trihalomethanes'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nax = fig.add_subplot(3, 3, 9)\nsns.distplot(waterpotability['Turbidity'], hist_kws=dict(edgecolor='k', linewidth=1), bins=10)\nplt.show()","489e3260":"# View the mean by the response variable\n\nwaterpotability.groupby('Potability').mean()","6a36332e":"# View the stdDev by the response variable\nwaterpotability.groupby('Potability').std()","bed9208d":"# Check the pair plots\nsns.pairplot(data=waterpotability, hue='Potability')","bd8bb65a":"waterpotability['ph'] = waterpotability['ph'].fillna(waterpotability.groupby('Potability')['ph'].transform('mean'))\nwaterpotability['Sulfate'] = waterpotability['Sulfate'].fillna(waterpotability.groupby('Potability')['Sulfate'].transform('mean'))\nwaterpotability['Trihalomethanes'] = waterpotability['Trihalomethanes'].fillna(waterpotability.groupby('Potability')['Trihalomethanes'].transform('mean'))\nwaterpotability.isna().sum()","d63bc275":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfeatures = waterpotability.drop(labels=['Potability'], axis=1)\ntarget = waterpotability['Potability']\n\nfeatures_train, features_test, target_train, target_test = train_test_split(features, \n                                                                            target, \n                                                                            test_size=0.3, random_state=101,\n                                                                           stratify = target)","e46d0c33":"sc = StandardScaler()\nfeatures_train = sc.fit_transform(features_train)\nfeatures_test = sc.transform(features_test)","d0611a46":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report, f1_score, accuracy_score","86e1bfc6":"param_grid = {'n_estimators': [100, 200, 300], 'max_features': ['auto', 'sqrt'], 'bootstrap': [True, False], 'criterion':['entropy', 'gini']}\nrfcgrid = GridSearchCV(RandomForestClassifier(random_state=101), param_grid, verbose=100, cv=10, n_jobs=-2)\nrfcgrid.fit(features_train, target_train)","204c659f":"# Best params of Random Forest\nrfcgrid.best_params_","797193d1":"rfcpredictions = rfcgrid.predict(features_test)\n\nprint(\"Confusion Matrix - Random Forest Using Entropy Index\")\nprint(confusion_matrix(target_test,rfcpredictions))\nprint(\"\\n\")\nprint(\"Accuracy Score - Random Forest\")\nprint(accuracy_score(target_test, rfcpredictions))\nprint(\"\\n\")\nprint(\"Classification Report - Random Forest\")\nprint(classification_report(target_test,rfcpredictions))\nprint(\"\\n\")\nprint(\"F1 Score - Random Forest\")\nprint(f1_score(target_test, rfcpredictions))","5fa1359f":"The mean and standard deviations are also fairly close to each other against the response variable","b0203258":"## Impute Missing Values\nThe approach is to substitue mean of the bmi by the target variable - Potability","e6ef1438":"All the distributions are fairly normal and distributed around the mean","2f462474":"## Model Building","63607d2f":"## Load the dataset and validate the data load","88986aee":"There are missing values in ph, sulfate and Trihalomethanes","1c90326f":"## Train Test Split and Scaling of Data","c02ea589":"## Library Imports","2b86d300":"The correlation between the attributes are fairly low and this suggests the attributes are independent","f1cd219b":"### Random Forest Classifier","dffcd35d":"## Exploratory Data Analysis"}}