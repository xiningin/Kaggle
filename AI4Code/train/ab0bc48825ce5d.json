{"cell_type":{"d76865e3":"code","d429ca9a":"code","4ad73960":"code","8d829c8c":"code","9811522d":"code","eeff21e5":"code","4a50d99d":"code","7ca0ac49":"code","857564e5":"code","f26b65bd":"code","6a164137":"code","da364fcd":"code","3fb3ebab":"code","71256199":"code","8c33a030":"code","752955e4":"code","4d291555":"code","34d01ee8":"code","4569e860":"code","bc5eaad4":"code","06c3a3a4":"code","8e58add7":"code","e12b2299":"code","821b57b5":"code","bb775fc6":"code","ff7773f1":"code","7f53fc73":"code","a82905dd":"code","f29bcfe4":"code","15e110e1":"code","04afe7ae":"code","6eddadaa":"code","f9254639":"code","8b0c7850":"code","0295f771":"code","9bae4c8a":"code","da60effa":"code","c451e59d":"code","66d7415e":"code","7bac10dd":"code","11e03e01":"code","4d7a1d2e":"code","bd1e68bb":"code","58f76c56":"code","0c30a2ad":"code","6c379c5e":"code","784aa44a":"code","f2db063c":"code","297ad411":"code","4b39849b":"code","d4471cf7":"code","9774b6fa":"code","a306e20d":"code","da81226a":"code","6c8e4e43":"code","d4f1bfe4":"code","5d7cbae7":"markdown","814d5a5d":"markdown","e8c60dbe":"markdown","8345d283":"markdown","1db1dd7f":"markdown","6b63024e":"markdown","bb3aff6f":"markdown","d1f8392c":"markdown","e95b3bfd":"markdown","57c9e086":"markdown"},"source":{"d76865e3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom time import time\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import LinearSVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import Ridge, RidgeCV, LinearRegression, SGDRegressor, Lasso, ElasticNet, Lars, LassoLars, HuberRegressor, BayesianRidge, PassiveAggressiveRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import max_error, mean_absolute_error, explained_variance_score, mean_squared_error, r2_score\nimport xgboost as xgb\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","d429ca9a":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","4ad73960":"train.head(2)","8d829c8c":"test.head(2)","9811522d":"sub.head(2)","eeff21e5":"train.shape","4a50d99d":"test.shape","7ca0ac49":"# Verificar nulos base de treino\ntrain.isna().sum().sort_values(ascending=False)\/train.shape[0]","857564e5":"# Verificar nulos base de treino\ntest.isna().sum().sort_values(ascending=False)\/test.shape[0]","f26b65bd":"# Juntar os dataset de treino e teste\ndf = train.append(test)\ndf.shape","6a164137":"df.isna().sum()","da364fcd":"df['Fence'].fillna('NA', inplace=True)","3fb3ebab":"colunas_nulas_perc = (df.isna().sum()\/df.shape[0]*100) > 50.0 \ncolunas_nulas_perc = colunas_nulas_perc[colunas_nulas_perc.isin([True])]\nlen(list(colunas_nulas_perc.index))\nlista_colunas_nulas_perc = list(colunas_nulas_perc.index)\nqtd_lista_colunas_nulas_perc = len(list(colunas_nulas_perc.index))\nprint('Existem', qtd_lista_colunas_nulas_perc, 'S\u00e3o elas', lista_colunas_nulas_perc)","71256199":"df['Fence'].value_counts()","8c33a030":"df['Fence'].fillna('NA', inplace=True)\ndf.drop(columns=['Alley', 'PoolQC', 'MiscFeature'], inplace=True)\ndf.shape","752955e4":"colunas_nulas_perc = (df.isna().sum()\/df.shape[0]*100) > 20.0 \ncolunas_nulas_perc = colunas_nulas_perc[colunas_nulas_perc.isin([True])]\nlen(list(colunas_nulas_perc.index))\nlista_colunas_nulas_perc = list(colunas_nulas_perc.index)\nqtd_lista_colunas_nulas_perc = len(list(colunas_nulas_perc.index))\nprint('Existem', qtd_lista_colunas_nulas_perc, 'S\u00e3o elas', lista_colunas_nulas_perc)","4d291555":"df['FireplaceQu'].value_counts()","34d01ee8":"df['FireplaceQu'].fillna('NA', inplace=True)","4569e860":"colunas_nulas_perc = (df.isna().sum()\/df.shape[0]*100) > 5.0 \ncolunas_nulas_perc = colunas_nulas_perc[colunas_nulas_perc.isin([True])]\nlen(list(colunas_nulas_perc.index))\nlista_colunas_nulas_perc = list(colunas_nulas_perc.index)\nqtd_lista_colunas_nulas_perc = len(list(colunas_nulas_perc.index))\nprint('Existem', qtd_lista_colunas_nulas_perc, 'S\u00e3o elas', lista_colunas_nulas_perc)","bc5eaad4":"columns_fill = {'GarageType': 'NA', \n                'GarageYrBlt': 'NA', \n                'GarageFinish': 'NA', \n                'GarageQual': 'NA', \n                'GarageCond': 'NA', \n                'LotFrontage': 0}\ndf.fillna(columns_fill, inplace=True)","06c3a3a4":"colunas_nulas_perc = (df.isna().sum()\/df.shape[0]*100) > 2.0 \ncolunas_nulas_perc = colunas_nulas_perc[colunas_nulas_perc.isin([True])]\nlen(list(colunas_nulas_perc.index))\nlista_colunas_nulas_perc = list(colunas_nulas_perc.index)\nqtd_lista_colunas_nulas_perc = len(list(colunas_nulas_perc.index))\nprint('Existem', qtd_lista_colunas_nulas_perc, 'S\u00e3o elas', lista_colunas_nulas_perc)","8e58add7":"columns_fill = {'BsmtQual': 'NA', \n                'BsmtCond': 'NA', \n                'BsmtExposure': 'NA', \n                'BsmtFinType1': 'NA', \n                'BsmtFinType2': 'NA'}\ndf.fillna(columns_fill, inplace=True)","e12b2299":"colunas_nulas_perc = (df.isna().sum()\/df.shape[0]*100) > 0.0 \ncolunas_nulas_perc = colunas_nulas_perc[colunas_nulas_perc.isin([True])]\nlen(list(colunas_nulas_perc.index))\nlista_colunas_nulas_perc = list(colunas_nulas_perc.index)\nqtd_lista_colunas_nulas_perc = len(list(colunas_nulas_perc.index))\nprint('Existem', qtd_lista_colunas_nulas_perc, 'S\u00e3o elas', lista_colunas_nulas_perc)","821b57b5":"columns_fill = {'MSZoning': 'NA', \n                'Utilities': 'NA', \n                'Exterior1st': 'NA', \n                'Exterior2nd': 'NA', \n                'MasVnrType': 'None', \n                'MasVnrArea': 0, \n                'BsmtFinSF1': 0, \n                'BsmtFinSF2': 0, \n                'BsmtUnfSF': 0, \n                'TotalBsmtSF': 0, \n                'Electrical': 'SBrkr', \n                'BsmtFullBath': 0, \n                'BsmtHalfBath': 0, \n                'KitchenQual': 'NA', \n                'Functional': 'NA', \n                'GarageCars': 0, \n                'GarageArea': 0, \n                'SaleType': 'WD'}\ndf.fillna(columns_fill, inplace=True)","bb775fc6":"df.info()","ff7773f1":"#Ajustando algumas vari\u00e1veis categoricas\ndf['MSSubClass'] = df['MSSubClass'].apply(str)\ndf['OverallCond'] = df['OverallCond'].astype(str)\ndf['YrSold'] = df['YrSold'].astype(str)\ndf['MoSold'] = df['MoSold'].astype(str)\ndf['GarageYrBlt'] = df['GarageYrBlt'].astype(str)","7f53fc73":"df = pd.get_dummies(df)","a82905dd":"# Transformando as colunas com o LabelEncoder\ncolunas_transform = list(df.select_dtypes(include=['object']).columns)\n\nencoder = LabelEncoder()\nfor label in colunas_transform:\n    df[label] = encoder.fit_transform(df[label])","f29bcfe4":"# Adicionando um feature\ndf['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']","15e110e1":"df.shape","04afe7ae":"df_train = df.dropna()\ndf_train.shape","6eddadaa":"X = df_train.drop(columns=['Id','SalePrice'])\ny = df_train.SalePrice","f9254639":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)","8b0c7850":"# Fun\u00e7\u00e3o criada para aplica\u00e7\u00e3o do modelo e medi\u00e7\u00e3o da performance\ndef benchmark(reg):\n    print('_' * 80)\n    print(\"Training: \")\n    print(reg)\n    t0 = time()\n    reg.fit(X_train, y_train)\n    train_time = time() - t0\n    print(\"train time: %0.3fs\" % train_time)\n\n    t0 = time()\n    pred = reg.predict(X_test)\n    y_true = list(y_test)\n    test_time = time() - t0\n    print(\"test time:  %0.3fs\" % test_time)\n\n    score = reg.score(X_test, y_test)\n    if score < 0 or score > 1:\n        print(\"score: FAIL\")\n        score = 0\n    else:\n        print(\"score:   %0.3f\" % score)\n        \n    if hasattr(reg, 'coef_'):\n        print(\"intercept_: \", reg.intercept_)\n        evs = explained_variance_score(y_test, pred)\n        print('EVS (Explained Variance Score): {0:.2f}'.format(evs), ' [Best value is 1.0]')\n        mre = max_error(y_test, pred)\n        print('MRE (Max Residual Error): {0:.2f}'.format(mre), ' [Best value is 0.0]')\n        mae = mean_absolute_error(y_test, pred)\n        print('MAE (Mean Absolute Error): {0:.2f}'.format(mae), ' [Best value is 0.0]')\n        mse = mean_squared_error(y_test, pred)\n        print('MSE (Mean Squared Error): {0:.2f}'.format(mse), ' [Best value is 0.0]')\n        r_2 = r2_score(y_test, pred)\n        print('R^2 (Coefficient of Determination): {0:.2f}'.format(r_2), ' [Best value is 1.0]')\n        print()\n\n    print()\n    reg_descr = str(reg).split('(')[0]\n    return reg_descr, score, train_time, test_time, reg","0295f771":"# Lista que vai armazennar as m\u00e9tricas de cada modelo\nresults = []","9bae4c8a":"\nprint('=' * 80)\nprint('LinearSVR')\nresults.append(benchmark((LinearSVR())))","da60effa":"print('=' * 80)\nprint('DecisionTreeRegressor')\nresults.append(benchmark((DecisionTreeRegressor())))","c451e59d":"print('=' * 80)\nprint('KNeighborsRegressor')\nresults.append(benchmark((KNeighborsRegressor())))","66d7415e":"print('=' * 80)\nprint('Ridge')\nresults.append(benchmark((Ridge(alpha=1.0))))","7bac10dd":"print('=' * 80)\nprint('RidgeCV')\nresults.append(benchmark((RidgeCV())))","11e03e01":"print('=' * 80)\nprint('LinearRegression')\nresults.append(benchmark((LinearRegression())))","4d7a1d2e":"print('=' * 80)\nprint('Lasso')\nresults.append(benchmark((Lasso(max_iter=4000))))","bd1e68bb":"print('=' * 80)\nprint('ElasticNet')\nresults.append(benchmark((ElasticNet())))","58f76c56":"print('=' * 80)\nprint('Lars')\nresults.append(benchmark((Lars())))","0c30a2ad":"print('=' * 80)\nprint('LassoLars')\nresults.append(benchmark((LassoLars(max_iter=100))))","6c379c5e":"print('=' * 80)\nprint('HuberRegressor')\nresults.append(benchmark((HuberRegressor(max_iter=100))))","784aa44a":"print('=' * 80)\nprint('BayesianRidge')\nresults.append(benchmark((BayesianRidge())))","f2db063c":"print('=' * 80)\nprint('PassiveAggressiveRegressor')\nresults.append(benchmark((PassiveAggressiveRegressor())))","297ad411":"print('=' * 80)\nprint('RandomForestRegressor')\nresults.append(benchmark((RandomForestRegressor(1000))))","4b39849b":"print('=' * 80)\nprint('MLPRegressor')\nresults.append(benchmark((MLPRegressor())))","d4471cf7":"# Gr\u00e1fico de avaliza\u00e7\u00e3o dos modelos\nindices = np.arange(len(results))\n\nresults = [[x[i] for x in results] for i in range(4)]\n\nreg_names, score, training_time, test_time = results\ntraining_time = np.array(training_time) \/ np.max(training_time)\ntest_time = np.array(test_time) \/ np.max(test_time)\n\nplt.figure(figsize=(12, 8))\nplt.title(\"Score\")\nplt.barh(indices, score, .2, label=\"score\", color='navy')\nplt.barh(indices + .3, training_time, .2, label=\"training time\", color='c')\nplt.barh(indices + .6, test_time, .2, label=\"test time\", color='darkorange')\nplt.yticks(())\nplt.legend(loc='best')\nplt.subplots_adjust(left=.25)\nplt.subplots_adjust(top=.95)\nplt.subplots_adjust(bottom=.05)\n\nfor i, c in zip(indices, reg_names):\n    plt.text(-.3, i, c)\n\nplt.show()","9774b6fa":"model = benchmark(LassoLars(max_iter=100))[4]","a306e20d":"# Preparando base de teste\ndf_test = df.loc[(df.SalePrice.isnull())].copy()\n\nX_test = df_test.drop(columns=['Id','SalePrice'])\n\n# Realizando a predi\u00e7\u00e3o\ndf_test['SalePrice'] = model.predict(X_test)\n\n# Preparando df para exporta\u00e7\u00e3o\ndf_test = df_test[['Id', 'SalePrice']]\n\n# Exporta\u00e7\u00e3o da predi\u00e7\u00e3o para csv\ndf_test.to_csv('submission.csv', index=False)\n\ndf_test.head()","da81226a":"X = X.values\ny = y.values","6c8e4e43":"print(\"Boston Housing: regression\")\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\nfor train_index, test_index in kf.split(X):\n    xgb_model = xgb.XGBRegressor().fit(X[train_index], y[train_index])\n    predictions = xgb_model.predict(X[test_index])\n    actuals = y[test_index]\n    print('MSE:', mean_squared_error(actuals, predictions))\n\nprint(\"Parameter optimization\")\nxgb_model = xgb.XGBRegressor()\nreg = GridSearchCV(xgb_model,\n                   {'max_depth': [2, 4, 6],\n                    'n_estimators': [200, 400, 800]}, verbose=1)\nreg.fit(X, y)\nprint('Best Score', reg.best_score_)\nprint('Best Params', reg.best_params_)","d4f1bfe4":"# Preparando base de teste\ndf_test = df.loc[(df.SalePrice.isnull())].copy()\n\nX_test = df_test.drop(columns=['Id','SalePrice']).values\n\n# Realizando a predi\u00e7\u00e3o\ndf_test['SalePrice'] = reg.predict(X_test)\n\n# Preparando df para exporta\u00e7\u00e3o\ndf_test = df_test[['Id', 'SalePrice']]\n\n# Exporta\u00e7\u00e3o da predi\u00e7\u00e3o para csv\ndf_test.to_csv('submission_xgb.csv', index=False)\n\ndf_test.head()","5d7cbae7":"## XGBoost","814d5a5d":"## **Carregando dados**","e8c60dbe":"## **Importando bibliotecas**","8345d283":"## **Verificando melhor modelo**","1db1dd7f":"## **Pr\u00e9-Processamento do dados**","6b63024e":"## **Predi\u00e7\u00e3o modelo**","bb3aff6f":"## **Predi\u00e7\u00e3o XGBoost**","d1f8392c":"## **Modelo**","e95b3bfd":"## **Explorando dados**","57c9e086":"## **Definindo vari\u00e1veis**"}}