{"cell_type":{"4a24ddd1":"code","fea89df5":"code","e8ac963d":"code","efca0a62":"code","b213a675":"code","4c171325":"code","6cad9a5c":"code","94eaed65":"code","e5a3d8a0":"code","a7694bda":"code","f0001d4a":"code","dc73d1d9":"code","1d449c27":"code","6d26a00b":"markdown","6b6c7521":"markdown","94a1e83f":"markdown","b311ec08":"markdown","d095e79e":"markdown","f001466b":"markdown","b4a3e1cf":"markdown"},"source":{"4a24ddd1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport requests\nimport io\nfrom scipy.optimize import curve_fit\nfrom scipy.special import expit","fea89df5":"# Extract the update data\n\nBASE_URL = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/'\nCONFIRMED = 'time_series_covid19_confirmed_global.csv'\nDEATH = 'time_series_covid19_deaths_global.csv'\nRECOVERED = 'time_series_covid19_recovered_global.csv'\nCONFIRMED_US = 'time_series_covid19_confirmed_US.csv'\nDEATH_US = 'time_series_covid19_deaths_US.csv'\n\ndef get_covid_data(subset = 'CONFIRMED'):\n    \"\"\"This function returns the latest available data subset of COVID-19. \n        The returned value is in pandas DataFrame type.\n    Args:\n        subset (:obj:`str`, optional): Any value out of 5 subsets of 'CONFIRMED',\n        'DEATH', 'RECOVERED', 'CONFIRMED_US' and 'DEATH_US' is a valid input. If the value\n        is not chosen or typed wrongly, CONFIRMED subet will be returned.\n    \"\"\"    \n    switcher =  {\n                'CONFIRMED'     : BASE_URL + CONFIRMED,\n                'DEATH'         : BASE_URL + DEATH,\n                'RECOVERED'     : BASE_URL + RECOVERED,\n                'CONFIRMED_US'  : BASE_URL + CONFIRMED_US,\n                'DEATH_US'      : BASE_URL + DEATH_US,\n                }\n\n    CSV_URL = switcher.get(subset, BASE_URL + CONFIRMED)\n\n    with requests.Session() as s:\n        download        = s.get(CSV_URL)\n        decoded_content = download.content.decode('utf-8')\n        data            = pd.read_csv(io.StringIO(decoded_content))\n\n    return data","e8ac963d":"# Get US confirmed, death, and recovered data\nconfirmed = get_covid_data(subset = 'CONFIRMED')\ndeath = get_covid_data(subset = 'DEATH')\nrecovered = get_covid_data(subset = 'RECOVERED')\n\nconfirmed_US = confirmed[confirmed['Country\/Region']=='US']\ndeath_US = death[death['Country\/Region']=='US']\nrecovered_US = recovered[recovered['Country\/Region']=='US']","efca0a62":"print(confirmed_US.shape)\nprint(death_US.shape)\nprint(recovered_US.shape)","b213a675":"confirmed_US.head()","4c171325":"# Visualization Data\nplt.plot(range(len(confirmed_US.columns)-4), confirmed_US.iloc[0,4:])\nplt.plot(range(len(death_US.columns)-4), death_US.iloc[0,4:])\nplt.plot(range(len(recovered_US.columns)-4), recovered_US.iloc[0,4:])\n\nUS =['confirmed_US', 'death_US', 'recovered_US']\nplt.legend(US)\nplt.title('Total Number of COVID-19 Cases in the United State')\nplt.xlabel('Day')\nplt.ylabel('Number of Cases')","6cad9a5c":"# dates -- Can be changed free\nd=2\n\ndf_confirmed_train = pd.DataFrame(confirmed_US.iloc[0,4:-d])\nprint('train', df_confirmed_train.shape)\nprint('train', type(df_confirmed_train))\n\ndf_confirmed_test = pd.DataFrame(confirmed_US.iloc[0,-d:])\nprint('test', df_confirmed_test.shape)\nprint('test', type(df_confirmed_test))\n","94eaed65":"x_data = range(len(df_confirmed_train))\nx_data","e5a3d8a0":"y_data = df_confirmed_train[225].values\ny_data","a7694bda":"All = pd.DataFrame(confirmed_US.iloc[0,4:])\nAll_x_data = range(len(All))\nAll_y_data = All[225].values","f0001d4a":"def log_curve(x, k, x_0, ymax):\n    return ymax \/ (1 + np.exp(-k*(x-x_0)))\n\n# Fit the curve\npopt, pcov = curve_fit(log_curve, x_data, y_data, bounds=([0,0,0],np.inf), maxfev=10000000)\nestimated_k, estimated_x_0, ymax= popt\n\n\n# Plot the fitted curve\nk = estimated_k\nx_0 = estimated_x_0\ny_fitted = log_curve(All_x_data, k, x_0, ymax)\nprint(k, x_0, ymax)\n#print(y_fitted)","dc73d1d9":"fig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(All_x_data, y_fitted, '--', label='fitted')\nax.plot(All_x_data, All_y_data, 'o', label='Confirmed Data')\nplt.legend()\nplt.title('Total Number of Confimed COVID-19 Cases in the United State')\nplt.xlabel('Day')\nplt.ylabel('Number of Cases')","1d449c27":"#For predict the next two-day's confirmed case in US\npredict_set = range(len(All)+2)\ny_predict = log_curve(predict_set, k, x_0, ymax)\nprint('In next two days, we predict the total Confirmed Cases in US are: ',y_predict[-2:])","6d26a00b":"![covid19%20Fit.PNG](attachment:covid19%20Fit.PNG)","6b6c7521":"**We run the dataset in both Jupyter notebook and Kaggle, but they gave us different prediction. In Kaggle, the implementation always gives us 'overflow warning', but in Jupyter notebook it is fine. Therefore, we suggest using Jupyter note to run our code, and it will provide us good prediction. The following picture is the fitting graph we got in Jupyter notebook**","94a1e83f":"# Preprocess data","b311ec08":"# Explain","d095e79e":"# Logistic Cureve Fitting","f001466b":"**Our model is based on the logistic curve to predict the Confirmed Cases of COVID-19 in the United Stated.**\n\n**Thank you Mehdi Afshari for extracting the updated data.**\n\n**Hope you enjoy our model.**","b4a3e1cf":"# Extract Data"}}