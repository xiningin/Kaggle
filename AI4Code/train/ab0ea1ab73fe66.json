{"cell_type":{"7d43700c":"code","9ec03719":"code","f763c239":"code","4de10508":"code","b9c2b287":"code","2764fb86":"code","2ad733d7":"code","8a37273b":"code","220363bf":"code","27b165e8":"code","39c8156f":"code","3e931beb":"code","4b531012":"code","9e440521":"code","11175e83":"markdown","2802e71e":"markdown","dc0c33b8":"markdown","54851335":"markdown","d27e0325":"markdown","0ab2dc51":"markdown","f9911cc0":"markdown","89212b9e":"markdown","a44fdc12":"markdown","c0798447":"markdown","97987ca6":"markdown","d2dbf872":"markdown","6fece184":"markdown","b7bd098b":"markdown","acde32a1":"markdown","58adbb36":"markdown","ad54aec0":"markdown"},"source":{"7d43700c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ec03719":"library(tidyverse)\nlibrary(lubridate)","f763c239":"# Load data in data frames \ndaily_activity <- read_csv(file= \"..\/input\/fitbit\/dailyActivity_merged.csv\")\ndaily_sleep <- read_csv(file= \"..\/input\/fitbit\/sleepDay_merged.csv\")\nhourly_steps <- read_csv(\"..\/input\/fitbit\/hourlySteps_merged.csv\")\ndaily_steps <- read.csv(\"..\/input\/fitbit\/dailySteps_merged.csv\")\nhourly_intensity <- read_csv(\"..\/input\/fitbit\/hourlyIntensities_merged.csv\")","4de10508":"# View and get familiar with datasets\nhead(daily_activity)\nstr(daily_activity) \n\nhead(daily_sleep)\nstr(daily_sleep) \n\nhead(hourly_steps)\nstr(hourly_steps) \n\nhead(daily_steps)\nstr(daily_steps) ","b9c2b287":"###\n# Prepare daily_activity\n# Remove duplicates and confirm \ndaily_activity <- daily_activity %>% distinct()\nsum(duplicated(daily_activity))\n\n# Convert ActivityDate from chr to date\ndaily_activity$ActivityDate <- as.Date(daily_activity$ActivityDate, format=\"%m\/%d\/%Y\")\n\n# Add day of the week column from the ActivityDate\ndaily_activity$DayOfWeek <-weekdays(daily_activity$ActivityDate)\n\n# Add total minutes of activity column from the sum of various activity intensity columns\ndaily_activity$TotalActiveMinutes <- daily_activity$VeryActiveMinutes  + daily_activity$FairlyActiveMinutes + daily_activity$LightlyActiveMinutes\n\n###\n# Prepare daily_sleep\n# Remove duplicates and confirm\ndaily_sleep <- daily_sleep %>% distinct()\nsum(duplicated(daily_sleep))\n\n# Rename totalTimeInBed to totalMinutesInBed\ndaily_sleep <- rename(daily_sleep, TotalMinutesInBed = TotalTimeInBed)\n\n# Remove time stamp from SleepDay column as all entries are for 12:00 pm and convert from chr to date\ndaily_sleep$SleepDay <- as.Date(daily_sleep$SleepDay, format=\"%m\/%d\/%Y\")\n\n# Add day of the week column from SleepDay\ndaily_sleep$DayOfWeek <-weekdays(daily_sleep$SleepDay)\n\n# Add time in bed not sleeping column from TotalMinutesAsleep and TotalTimeInBed columns\ndaily_sleep$TotalMinutesNotAsleep <- daily_sleep$TotalMinutesInBed - daily_sleep$TotalMinutesAsleep\n\n###\n# Prepare hourly_steps\n# Remove duplicates and confirm\nhourly_steps <- hourly_steps %>% distinct()\nsum(duplicated(hourly_steps))\n\n# Rename ActivityHour to ActivityDate\nhourly_steps <- rename(hourly_steps, ActivityDate = ActivityHour)\n\n# Convert ActivityDate to date time\nhourly_steps$ActivityDate <- as.POSIXct(hourly_steps$ActivityDate,format =\"%m\/%d\/%Y %I:%M:%S %p\")\n\n# Split Date and Time into different columns \nhourly_steps$ActivityHour <- word(hourly_steps$ActivityDate, 2, -1)\n\n# Convert ActivityDate to date\nhourly_steps$ActivityDate <- as.Date(hourly_steps$ActivityDate, format=\"%m\/%d\/%Y\")\n\n# Add day of the week column from ActivityDate\nhourly_steps$DayOfWeek <-weekdays(hourly_steps$ActivityDate)\n\n###\n# Prepare daily_steps\n# Remove duplicates and confirm \ndaily_steps <- daily_steps %>% distinct()\nsum(duplicated(daily_steps))\n\n# Convert ActivityDay to date\ndaily_steps$ActivityDay <- as.Date(daily_steps$ActivityDay, format=\"%m\/%d\/%Y\")\n\n# Rename ActivityDay to ActivityDate\ndaily_steps <- rename(daily_steps, ActivityDate = ActivityDay)\n\n# Add day of the week column from ActivityDate\ndaily_steps$DayOfWeek <-weekdays(daily_steps$ActivityDate)","2764fb86":"# Create new data frame to organize daily step averages: group data by Id and calculate the average steps per Id \ndaily_steps_average <- daily_steps %>% group_by(Id) %>% summarise(AvgDailySteps = mean(StepTotal))\n\n# Add activity type collumn to daily_steps_average to categorize each Id\ndaily_steps_average$ActivityLevel <- case_when(daily_steps_average$AvgDailySteps > 10000 ~ \"Very Active\",\n                                    daily_steps_average$AvgDailySteps >= 7500 & daily_steps_average$AvgDailySteps <= 10000 ~ \"Fairly Active\",\n                                    daily_steps_average$AvgDailySteps >= 5000 & daily_steps_average$AvgDailySteps <= 7499 ~ \"Lightly Active\",\n                                    daily_steps_average$AvgDailySteps < 5000 ~ \"Sedentary\")\n\n# Create new data frame to organize activity level dispersion: group data by ActivityLevel and calculate the total number of users per activity \n#  level and total percentage per activity level overall\nactivity_disperse <- daily_steps_average %>% group_by(ActivityLevel) %>% summarise(TotalUsersPerLevel = n()) \n                        %>% mutate(TotalPercent = TotalUsersPerLevel \/ sum(TotalUsersPerLevel)) \n                        %>% mutate(PercentLabel = scales::percent(TotalPercent))\n\n# Create pie chart to show distribution of users in study by their activity levels\nggplot(activity_disperse, aes(x=\"\", y=TotalPercent, fill=ActivityLevel)) + geom_bar(stat=\"identity\", width=1, color=\"white\") + \n                        coord_polar(\"y\", start=0) + theme_void() + \n                        geom_text(aes(label = PercentLabel),position = position_stack(vjust = 0.5), color = \"white\", size =6) +\n                        labs(title = \"Users By Activity Level\", x=\"\", y=\"\")","2ad733d7":"# Create new data frame to organize daily sleep averages: group by Id and calculate the average sleep values per Id\ndaily_sleep_average <- daily_sleep %>% group_by(Id) %>% summarise(AvgDailyAsleep = mean(TotalMinutesAsleep), AvgDailyInBed = mean(TotalMinutesInBed), AvgDailyNotAsleep = mean(TotalMinutesNotAsleep))\n\n# Add Sleep type column to daily_sleep_average to categorize each Id\ndaily_sleep_average$SleepType <- case_when(daily_sleep_average$AvgDailyAsleep > 540 ~ \"Extra Amount of Sleep\",\n                                    daily_sleep_average$AvgDailyAsleep >= 420 & daily_sleep_average$AvgDailyAsleep <= 540 ~ \"Recomended Amount of Sleep\",\n                                    daily_sleep_average$AvgDailyAsleep >= 300 & daily_sleep_average$AvgDailyAsleep <= 419 ~ \"Low Amount of Sleep\",\n                                    daily_sleep_average$AvgDailyAsleep < 300 ~ \"Extremely Low Amount of Sleep\")\n\n# Create new data frame to organize sleep average dispersion: group data by Sleep type and calculate the total number of users per Sleep type \n#  type and total percentage per sleep type overall\nsleep_disperse <- daily_sleep_average %>% group_by(SleepType) %>% summarise(TotalUsersPerType = n()) %>% \n                                mutate(TotalPercent = TotalUsersPerType \/ sum(TotalUsersPerType)) %>% \n                                mutate(PercentLabel = scales::percent(TotalPercent))\n\n# Create pie chart to show distribution of users in study by their sleep type\nggplot(sleep_disperse, aes(x=\"\", y=TotalPercent, fill=SleepType)) + geom_bar(stat=\"identity\", width=1, color=\"white\") + \n                        coord_polar(\"y\", start=0) + theme_void() + \n                        geom_text(aes(label = PercentLabel),position = position_stack(vjust = 0.5), color = \"white\", size =5) +\n                        labs(title = \"Users By Sleep Type\", x=\"\", y=\"\")","8a37273b":"# Rename SleepDay to ActivityDate\ndaily_sleep <- rename(daily_sleep, ActivityDate = SleepDay)\n\n# Join together all entries of daily_sleep and daily_activity \ndaily_sleep_activity <- merge(x=daily_sleep, y=daily_activity,by=c(\"Id\", \"ActivityDate\",\"DayOfWeek\"), all=TRUE)\n\n# Create data frame to organize how many days in the study each Id used their device: group by Id and calculate number of days\ntotal_usage_per_id <- daily_sleep_activity %>% group_by(Id) %>% summarise(TotalDayUsage = n())\n\n# Add usage type column to to total_usage_per_id to categorize each id\ntotal_usage_per_id$UsageType <- case_when(total_usage_per_id$TotalDayUsage > 42 ~ \"High Usage\",\n                                    total_usage_per_id$TotalDayUsage >= 20 & total_usage_per_id$TotalDayUsage <= 42 ~ \"Moderate Usage\",\n                                    total_usage_per_id$TotalDayUsage < 20 ~ \"Low Usage\")\n\n# Create new data frame to organize total usage per id dispersion: group data by usage type and calculate the total number of users per usage type \n#  type and total percentage per usage type overall\nusage_per_id_disperse <- total_usage_per_id %>% group_by(UsageType) %>% summarise(TotalUsersPerType = n()) %>% \n                                mutate(TotalPercent = TotalUsersPerType \/ sum(TotalUsersPerType)) %>% \n                                mutate(PercentLabel = scales::percent(TotalPercent))\n\n# Create pie chart to show distribution of users by their usage type\nggplot(usage_per_id_disperse, aes(x=\"\", y=TotalPercent, fill=UsageType)) + geom_bar(stat=\"identity\", width=1, color=\"white\") + \n                        coord_polar(\"y\", start=0) + theme_void() + \n                        geom_text(aes(label = PercentLabel),position = position_stack(vjust = 0.5), color = \"white\", size =6) +\n                        labs(title = \"Users By Total Usage\", x=\"\", y=\"\")","220363bf":"# Create new dataframe to organize the number of users per date: group by date and calculate the number of users\ntotal_usage_per_date <- daily_sleep_activity %>% group_by(ActivityDate) %>% summarise(IdsPerDate = n())\n\n# Create scatterplot to show number users per date in the study period\nggplot(total_usage_per_date) + geom_point(mapping = aes(x=ActivityDate, y=IdsPerDate)) + geom_smooth(mapping = aes(x=ActivityDate, y=IdsPerDate)) + labs(title =\"Number of Users Per Day of Study\", x=\"Date\", y=\"Total Number of Users\") + theme_minimal()\n","27b165e8":"# Add day of the week to total_usage_per_date\ntotal_usage_per_date$DayOfWeek <-weekdays(total_usage_per_date$ActivityDate)\n\n# Create new dataframe to organize the number of users per each day of the week\ntotal_usage_per_weekdate <- total_usage_per_date %>% group_by(DayOfWeek) %>% summarise(IdsPerWeekDate = sum(IdsPerDate))\n\n# Rearrange total_usage_per_weekdate dataframe according to the days of the week\nOrderDay <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\",\"Sunday\")order\ntotal_usage_per_weekdate$DayOfWeek <- factor(total_usage_per_weekdate$DayOfWeek, levels = OrderDay)\n\n# Create bar graph to show device usage across the days of the week\nggplot(total_usage_per_weekdate, aes(x=DayOfWeek, y=IdsPerWeekDate, color=DayOfWeek)) + geom_bar(stat=\"identity\", fill = \"gray\") + \n                            labs(title =\"Number of Users Per Day of Week\",x=\"Day Of The Week\", y=\"Total Number of Users\") + \n                            theme_minimal() + geom_text(aes(label=IdsPerWeekDate), vjust=1.6, color=\"black\", size=3.5)","39c8156f":"# Create new dataframe to organize the number of activity levels and get the steps first: \n#  group by day of week and get the total of steps per week day\nactivity_steps_per_weekdate <- daily_steps %>% group_by(DayOfWeek) %>% summarise(StepTotal = sum(StepTotal))\n\n# Create new dataframe to organize the number of activity minutes per day of week: \n#  group by day of week and get the total of activity minutes per week day\nactivity_per_weekdate <- daily_activity %>% group_by(DayOfWeek) %>% summarise(TotalActiveMinutes = sum(TotalActiveMinutes))\n\n# Merge activity_per_weekdate data frame to activity_steps_per_weekdate\nactivity_steps_per_weekdate <- merge(x=activity_steps_per_weekdate, y=activity_per_weekdate,by=\"DayOfWeek\",all=TRUE)\n\n# Rearrange activity_steps_per_weekdate dataframe according to the days of the week\nactivity_steps_per_weekdate$DayOfWeek <- factor(activity_steps_per_weekdate$DayOfWeek, levels = OrderDay)\n\n# Create bar graph to show daily steps across the days of the week\nggplot(activity_steps_per_weekdate, aes(x=DayOfWeek, y=StepTotal, color=DayOfWeek)) + geom_bar(stat=\"identity\", fill = \"gray\") + labs(title =\"Number of Steps Per Day of Week\",x=\"Day Of The Week\", y=\"Number of Steps\") + theme_minimal() + geom_text(aes(label=StepTotal), vjust=1.6, color=\"black\", size=3.5)\n\n# Create bar graph to show minutes active across the days of the week\nggplot(activity_steps_per_weekdate, aes(x=DayOfWeek, y=TotalActiveMinutes, color=DayOfWeek)) + geom_bar(stat=\"identity\", fill = \"gray\") + labs(title =\"Number of Active Minutes Per Day of Week\",x=\"Day Of The Week\", y=\"Number of Active Minutes\") + theme_minimal() + geom_text(aes(label=TotalActiveMinutes), vjust=1.6, color=\"black\", size=3.5)\n","3e931beb":"# Remove seconds and minutes from hour time since they are all 0\nhourly_steps$ActivityHour <- substr(hourly_steps$ActivityHour,1,nchar(hourly_steps$ActivityHour)-6)\n\n# Create new dataframe to organize the number of steps at the different hours: \n#  group by the hour time and calculate step total\nsteps_per_hour <- hourly_steps %>% group_by(ActivityHour) %>% summarise(StepTotal = sum(StepTotal))\n\n# Create bar graph to display hour activity dispersion\nggplot(steps_per_hour, aes(x=ActivityHour, y=StepTotal)) + geom_bar(stat=\"identity\", fill = \"gray\") + labs(title =\"Number of Steps Per Hour\",x=\"Time of Day(24Hr)\", y=\"Number of Steps\") + theme_minimal() \n","4b531012":"# Create new dataframe to organize information on users sleep and bed resting times: group by day of week and total the minutes\nsleep_per_weekdate <- daily_sleep %>% group_by(DayOfWeek) %>% summarise(TotalMinutesAsleep = sum(TotalMinutesAsleep), TotalMinutesInBed = sum(TotalMinutesInBed), TotalMinutesNotAsleep = sum(TotalMinutesNotAsleep))\n\n# Rearrange sleep_per_weekdate dataframe according to the days of the week\nsleep_per_weekdate$DayOfWeek <- factor(sleep_per_weekdate$DayOfWeek, levels = OrderDay)\n\n# Create bar graph to display time spent asleep\nggplot(sleep_per_weekdate, aes(x=DayOfWeek, y=TotalMinutesAsleep, color=DayOfWeek)) + geom_bar(stat=\"identity\", fill = \"gray\") + labs(title =\"Number of Minutes Sleeping Per Day of Week\",x=\"Day Of The Week\", y=\"Number of Minutes\") + theme_minimal() + geom_text(aes(label=TotalMinutesAsleep), vjust=1.6, color=\"black\", size=3.5)","9e440521":"# Create scatterplot to see trends between amount of time asleep and amount of steps\nggplot(daily_sleep_activity) + geom_point(mapping = aes(x=TotalMinutesAsleep, y=TotalSteps, color=DayOfWeek)) + labs(title =\"Sleep vs Steps\", x=\"Minutes Asleep\", y=\"Total Steps\") + theme_minimal()\n\n# Create scatterplot to see trends between amount of time asleep and minutes of activity during the day\nggplot(daily_sleep_activity) + geom_point(mapping = aes(x=TotalMinutesAsleep, y=TotalActiveMinutes, color=DayOfWeek)) + labs(title =\"Sleep vs Minutes Active\", x=\"Minutes Asleep\", y=\"Minutes Active\") + theme_minimal()\n\n# Create scatterplot to see trends between amount of time asleep and calories burned\nggplot(daily_sleep_activity) + geom_point(mapping = aes(x=TotalMinutesAsleep, y=Calories, color=DayOfWeek)) + labs(title =\"Sleep vs Caloris Burned\", x=\"Minutes Asleep\", y=\"Calories Burned\") + theme_minimal()\n\n# Create scatterplot to see trends between time spent sleeping and time spent in bed not sleeping\nggplot(sleep_per_weekdate) + geom_point(mapping = aes(x=TotalMinutesAsleep, y=TotalMinutesNotAsleep, color=DayOfWeek)) + labs(title =\"Sleep vs Time In Bed\", x=\"Minutes Asleep\", y=\"Total Minutes in Bed\") + theme_minimal()\n\n# Create scatterplot to see trends between amount of time active and calories burned\nggplot(daily_sleep_activity) + geom_point(mapping = aes(x=TotalActiveMinutes, y=Calories, color=DayOfWeek)) + labs(title =\"Active Minutes vs Caloris Burned\", x=\"Minuts Active\", y=\"Calories Burned\") + theme_minimal()\n\n# Create scatterplot to see trends between amount of steps and calories burned\nggplot(daily_sleep_activity) + geom_point(mapping = aes(x=TotalSteps, y=Calories, color=DayOfWeek)) + labs(title =\"Steps vs Calories Burned\", x=\"Total Steps\", y=\"Calories Burned\") + theme_minimal()\n\n# Create scatterplot to see trends between amount of sedentary time and total steps\nggplot(daily_sleep_activity) + geom_point(mapping = aes(x=SedentaryMinutes, y=TotalSteps, color=DayOfWeek)) + labs(title =\"Sedentary Minutes vs Steps\", x=\"Sedentary Minutes\", y=\"Total Steps\") + theme_minimal()\n\n# Create scatterplot to see trends between amount of sedentary time and calories burned\nggplot(daily_sleep_activity) + geom_point(mapping = aes(x=SedentaryMinutes, y=Calories, color=DayOfWeek)) + labs(title =\"Sedentary Minutes vs Calories Burned\", x=\"Sedentary Minutes\", y=\"Calories Burned\") + theme_minimal()\n","11175e83":"***\n### Activity and sleep during the day and the week\n* What day of the weekday are users more active or less active? \n* What time of the day are users more active or less active?\n* What days of the weekdays are users sleeping more or less?\n* What days of the weekdays are users spending time more time in bed overall?\n\n### Findings\n* Users are most active during the weekdays,Tuesday through Thursday. Users are also active on Saturday.\n* Users are least active during Sunday.\n* Users are most active during the day a few hours before and after 3:00 PM. Users are least active from Midnight to 5:00 AM.\n* Users are sleeping the most minutes on during the middle of the week(Tuesday through Thursday).\n\nWe can see the activity trends for days of the week by analyzing their daily step counts and daily minutes of activity.","2802e71e":"***\n### Device usage during the day and the course of the study\n* How often are users using the device during the course of the study? (are people participating alot in the study)\n* How consistant is the device usage throughout the study?(is there a portion of the study where the device is used the most)\n* Are there days where there is more or less usage? (trends per weekday)\n\n### Findings\n* No users used their device for more than 2\/3 of the study period. \n* Study started with high device usage. Device usage started decreasing at the end of the study period.\n* Device is used more often during the middle of the week, Tuesday through Thursday, than on Monday, Friday, and the weekend.\n\nWe can see how often within the course of the study users are using the devices by looking at their daily activity and sleep. The course of the study occured over a 62 period so we can categorize user's usage through the following classification:\n* High Usage: More than 42 days \n* Moderate Usage: Between 20 and 42 days \n* Low Usage: Less than 20 days\n","dc0c33b8":"We can see how the device usage is split between the different days of the week.","54851335":"**Import Datasets**","d27e0325":"We can see sleep trends throughout the week by looking at users daily sleep data.","0ab2dc51":"**Preview Datasets** ","f9911cc0":"We can see if there is a time of the day where users are more active by looking at their hourly step counts.","89212b9e":"***\n## Summary of Findings and Insights\n* Device is used by users of all varying activity levels.\n* Most users are not getting the recommended 7-9 hours of sleep everyday.\n* Device usage was inconsistent and started decreasing as the study period was nearing its end.\n* Device is not being worn as often during the weekends.\n* Users are most active during the middle of the week and most rest on Sundays.\n* There is no correlation between the amount of activity during the day and sleep at night.\n* Calories burned and activity in the day have a positive correlation.\n\n## Insights\n1. Conduct further analysis into other datasets\n\n    I would recommend further analysis on other datasets as this sample set is small and may be biased as we do not have any demographic information regarding the participants. The data is also inconsisten as many users did not use the device throughout the entire study period or throughout the entire day.\n\n2. Expand the features available to the user\n\n    Based on the results we can see that a large amount of users are not getting the recommended daily hours of sleep. A notification feature can be set up to remind users to go to bed at a desired time that they preset. \n    \n    Based on the results we can see that users are most active during the middle of the week. A notification feature can be set up to remind users to try to reach the daily recommended steps and to notify them when they have.\n    \n3. Encourage regular usage of device\n\n    Based on the data the usage of the device was inconsistent and began decreasing near the end of the study. This could be cause by many reasons like the physical design, lack of desired features, user interface. I would recommend further analysis on what users enjoy about the device and what factors may have had them stop usage. \n\n","a44fdc12":"***\n### Exploring relationships\n* Are there any correlations between the different data collected? \n### Findings\n* There is no direct correlation between users sleep and activity during the day \n* Users spend more time in bed not sleeping on Sundays than other days.\n* More calories are burned the more minutes spent active and the more steps taken","c0798447":"## Prepare Data ##\n**Dataset Used:**\n* The data source used for this case study is the FitBit Fitness Tracker Data which is a dataset stored in Kaggle from M\u00f6bius.\n* Information in dataset was collected from 30 eligible and consenting Fitbit users from 03.12.2016 - 05.12.2016.\n* Various data was collected regarding the users including their activity, sleep, weight, and calories.\n\n**Data Files Used:**\n","97987ca6":"We can see on what days during the 62 day study the users were using their devices.","d2dbf872":"## Analyze and Share Findings ##\n***\n### Type of users by activity level and sleep level\n\n* What type of users use this device according to their activity level?\n* What type of users use this device according to their sleep levels?\n\n### Findings\n* Relatively even distribution of users according to their activity levels. This device is used by people of all varying activity levels.\n* More than half the users are not getting the recommended daily amount of sleep. \n\n\nWe can see the distribution of users of this device according to their activity levels. We can categorize activity levels by their daily step counts using the following classification:\nClassification was derived from the following article: https:\/\/www.medicalnewstoday.com\/articles\/how-many-steps-should-you-take-a-day#by-age\n* Very Active - More than 10,000 steps a day\n* Fairly Active - Between 7,500 and 10,000 steps a day\n* Lightly Active - Between 5,000 and 7,499 steps a day\n* Sedentary - Less than 5,000 steps in a day","6fece184":"## Process Data ##\n\n**Install and Loading Packages**","b7bd098b":"We can can see the distributions of users of the device according to their sleep activity. We can categorize sleep levels by their daily sleep minutes using the following classification:\n\nClassification was derived from the following article: https:\/\/www.sleepfoundation.org\/how-sleep-works\/how-much-sleep-do-we-really-need\n\n* Extra Amount of Sleep - More than 540 minutes a day\n* Recommened Amount of Sleep - Between 420 and 540 minutes a day\n* Low Amount of Sleep - Between 300 and 419 minutes a day\n* Extremely Low Amount of Sleep - Less than 300 minutes a day","acde32a1":"**Cleaning and Formating**","58adbb36":"## **Business Task\/Goal**\nAnalyze third-party data of non-Bellabeat smart device usage to gain insight and identify trends on how consumers are using the devices. Apply these insights into Bellabeat\u2019s marketing strategy.\n\n**Stakeholders:**\n* Ur\u0161ka Sr\u0161en: Bellabeat\u2019s cofounder and Chief Creative Officer \n* Sando Mur: Mathematician and Bellabeat\u2019s cofounder; key member of the Bellabeat executive team \n* Bellabeat marketing analytics team: A team of data analysts responsible for collecting, analyzing, and reporting data that helps guide Bellabeat\u2019s marketing strategy.\n\n","ad54aec0":"## **Introduction**\n\nBellabeat is a high-tech company that manufactures health-focused smart products for women. They have a range of smart device products that help monitor and provide data regarding the user's activity, sleep, stress, menstrual cycle, and mindfulness habits. This data can help the user better understand their current habits and make healthy decisions. Here we aim to analyze smart device usage data of non-Bellabeat smart device consumers to gain insights and learn trends that can help influence Bellabeat marketing strategy.\n"}}