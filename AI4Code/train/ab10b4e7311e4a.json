{"cell_type":{"978ca6e2":"code","b0151e17":"code","b30d1609":"code","a28c2671":"code","76bb71cc":"code","74a9a480":"code","73b1452c":"code","fe01e426":"code","0a1b618d":"code","8f7b2b56":"code","e33e8b83":"code","9a4baeeb":"code","9f72fbbd":"code","29336961":"markdown","4ce7cb45":"markdown","fe7abf5c":"markdown"},"source":{"978ca6e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b0151e17":"from sklearn.model_selection import train_test_split\nimport numpy as np\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.metrics import accuracy_score","b30d1609":"df = pd.read_csv('\/kaggle\/input\/voicegender\/voice.csv')\ndf['label'].replace('male', 1, inplace = True)\ndf['label'].replace('female', 0, inplace = True)\nX = np.array(df.drop(['label'], axis = 1))\nY = df['label']\n# mylabel = LabelEncoder()\n# y = mylabel.fit_transform(Y)\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size = 0.8, test_size = 0.2, random_state = 42)\n\nprint('X-Train Size : ', X_train.shape)\nprint('Y-Train Size : ', y_train.shape)\nprint('X-test Size : ', X_test.shape)\nprint('y-test Size : ', y_test.shape)","a28c2671":"def modelfit(clf, X_train, y_train, X_test, y_test):\n    clf.fit(X_train, y_train)\n    predection = clf.predict(X_test)\n    accuracy = accuracy_score(y_test, predection)\n    print(accuracy)","76bb71cc":"base_clf = XGBClassifier()\nmodelfit(base_clf, X_train, y_train, X_test, y_test)","74a9a480":"from sklearn.model_selection import RandomizedSearchCV\nclf = XGBClassifier()\n\nn_estimators =range(100,1000, 100)\nmax_depth = range(3,10,2),\nmin_child_weight = range(1,6,2)\nparam_grid = {'n_estimators': n_estimators,\n              'learning_rate' : [0.025, 0.05, 0.1],\n              'max_depth' : max_depth,\n              'min_child_weight' : min_child_weight,\n              'max_depth':[4,5,6],\n              'min_child_weight':[6,8,10,12],\n              'gamma':[i\/10.0 for i in range(0,5)]}\n\nrandom_grid = RandomizedSearchCV(estimator = clf, param_distributions = param_grid, n_jobs= -1, verbose=0)\nprint(random_grid)\n\nrandom_grid.fit(X_train, y_train)","73b1452c":"random_grid.best_params_","fe01e426":"from sklearn.model_selection import GridSearchCV\n\nclf = XGBClassifier()\nparam_grid = {'n_estimators': [60,100,160, 200, 230],\n              'learning_rate': [0.025, 0.05],\n              'min_child_weight': [7,8,9], \n              'max_depth': [3,4,5,6,7], \n              'gamma': [0.3, 0.4, 0.2]\n             }\ngrid_search = GridSearchCV(estimator = clf, param_grid = param_grid, n_jobs=-1)\n\ngrid_search.fit(X_train, y_train)\ngrid_search.best_params_","0a1b618d":"best_model = modelfit(grid_search.best_estimator_, X_train, y_train, X_test, y_test)","8f7b2b56":"from sklearn.model_selection import cross_val_score\ncfl = XGBClassifier()\n\nK_score = cross_val_score(cfl, X, Y, cv=10, n_jobs=-1)\nK_score","e33e8b83":"K_score.mean()","9a4baeeb":"import numpy as np  # linear algebra\nimport pandas as pd  # read and wrangle dataframes\nimport matplotlib.pyplot as plt # visualization\nimport seaborn as sns # statistical visualizations and aesthetics\nfrom sklearn.base import TransformerMixin # To create new classes for transformations\nfrom sklearn.preprocessing import (FunctionTransformer, StandardScaler) # preprocessing \nfrom sklearn.decomposition import PCA # dimensionality reduction\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom scipy.stats import boxcox # data transform\nfrom sklearn.model_selection import (train_test_split, KFold , StratifiedKFold, \n                                     cross_val_score, GridSearchCV, \n                                     learning_curve, validation_curve) # model selection modules\nfrom sklearn.pipeline import Pipeline # streaming pipelines\nfrom sklearn.base import BaseEstimator, TransformerMixin # To create a box-cox transformation class\nfrom collections import Counter\nimport warnings\n# load models\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import (XGBClassifier, plot_importance)\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import (RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier, GradientBoostingClassifier)\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom time import time\n\n%matplotlib inline \nwarnings.filterwarnings('ignore')\nsns.set_style('whitegrid')","9f72fbbd":"model_importances = XGBClassifier()\nstart = time()\nmodel_importances.fit(X_train, y_train)\nprint('Elapsed time to train XGBoost  %.3f seconds' %(time()-start))\nplot_importance(model_importances)\nplt.show()","29336961":"Lets try to incerease the accuracy by fine tuning the parameters","4ce7cb45":"Using this best params from Random serach we will again fine tune the parameters using Grid Search","fe7abf5c":"Using K fold CV - we can find the min, max and mean accuracy of the model"}}