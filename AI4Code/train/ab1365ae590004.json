{"cell_type":{"333b97b5":"code","02f382a3":"code","ffa84e2b":"code","1c5e85d9":"code","a7fefbf7":"code","381f1907":"code","a881e1f1":"code","1d5a5292":"code","037f9cc5":"code","a8bb0bb2":"code","3e2c1d55":"code","f2d61d06":"code","c984473f":"code","4deb6b66":"code","3d70bc2b":"code","8762ea07":"code","16f419ec":"code","fdf2b566":"code","f384c853":"code","2ed77539":"code","d7eeb069":"code","8f9d43a8":"code","7d1e9fca":"code","debf6090":"code","b3660222":"code","6c30cc61":"code","a1490623":"code","52e770eb":"code","75ad9546":"code","f70be236":"code","359a0265":"code","505ca5bf":"code","0fef3b6e":"code","562e9693":"code","d3b2abd3":"code","918b63dd":"code","603e188d":"code","068c90e8":"code","e7e04ec9":"code","8dbfce0b":"code","1af8c6ce":"code","cbf59b70":"code","fc1125b1":"code","c4917fe3":"code","770ac874":"code","329c51bb":"code","4a9b74ec":"code","772c7d2d":"code","bc50cf36":"code","68290577":"code","27efe64d":"markdown","f7f04545":"markdown","827530a1":"markdown","20743a84":"markdown","8edd1a5b":"markdown","8d7b63b3":"markdown","665d1651":"markdown","ed6c8efd":"markdown","56ddd393":"markdown","2867be57":"markdown","1465ab02":"markdown","c5915815":"markdown","80a680b3":"markdown","68f08415":"markdown","f59039c6":"markdown","e38f6c13":"markdown","f12cfad6":"markdown","12bf2e8a":"markdown","8d17ec48":"markdown","05fe23bb":"markdown"},"source":{"333b97b5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","02f382a3":"train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/test.csv\")\ntrain.info()","ffa84e2b":"train.drop([889,890],inplace=True)","1c5e85d9":"train.isnull().tail() # obtenemos una matrix boleana donde se muestra datos nulos ","a7fefbf7":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis') # eliminamos eje Y , leyenda de las barras","381f1907":"sns.set_style('whitegrid') # Estilo de la grilla \nsns.countplot(x='Survived',data=train,palette='viridis') ","a881e1f1":"sns.countplot(x='Survived',hue='Sex',data=train,palette='viridis') # si deseamos hacer un matizado con el genero ","1d5a5292":"# Ahora hagamos el mismo analisis pero con la clase social","037f9cc5":"sns.countplot(x='Survived',hue='Pclass',data=train)","a8bb0bb2":"train['Pclass'].value_counts() # Para evaluar el numero de pasajeros de la muestra ","3e2c1d55":"sns.countplot(x='Pclass',data=train)","f2d61d06":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","c984473f":"# Creamos la funcion de imputacion de datos para la edad\n\ndef impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","4deb6b66":"train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)","3d70bc2b":"# Aplicamos nuevamente el heatmap para verificar si los datos fueron limpiados correctamente","8762ea07":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis') # de esta manera se observa los missing Data","16f419ec":"# como podemos analizar hay muchos datos faltantes en las cabinas y quizas no sea un informacion importante\n# entonces lo que hacemos es suprimir esta columna ","fdf2b566":"train.drop('Cabin',axis=1,inplace=True) # recordar que el implace es para hacer un guardado definitivo","f384c853":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis') # de esta manera se observa los missing Data","2ed77539":"train.drop(['Name','Embarked','SibSp','Ticket','Parch','Fare','Age'],axis=1,inplace=True)","d7eeb069":"train.head()","8f9d43a8":"sex = pd.get_dummies(train['Sex'],drop_first=True) # con pandas caracterizamos las variables categoricas\n#clase = pd.get_dummies(train['Pclass'],drop_first=True) # con pandas caracterizamos las variables categoricas","7d1e9fca":"train = pd.concat([train,sex],axis=1)  # Realizamos concatenaci\u00f3n para ingresar las variables convertidas","debf6090":"train.head()","b3660222":"train.drop(['Sex'],axis=1,inplace=True)","6c30cc61":"train.head()","a1490623":"train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","52e770eb":"X=train.drop('Survived',axis=1)\ny=train['Survived'] \nX_test  = df_test.drop(\"PassengerId\",axis=1).copy()\n","75ad9546":"from sklearn.model_selection import train_test_split","f70be236":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.47, random_state=101)","359a0265":"from sklearn.linear_model import LogisticRegression ","505ca5bf":"lrmodel = LogisticRegression() # Creamos la instancia\nlrmodel.fit(X_train,y_train)   # Ajustamos el modelo con los datos de entrenamiento","0fef3b6e":"prediccion=lrmodel.predict(X_test) # Prediccion de los datos ","562e9693":"lrmodel.score(X_train, y_train)\nlogistic_score = round(lrmodel.score(X_train, y_train)*100,2)\nlogistic_score","d3b2abd3":"from sklearn.ensemble import RandomForestClassifier\nranfor = RandomForestClassifier()\nranfor.fit(X_train, y_train)\npred_rf = ranfor.predict(X_test)\n\nranfor.score(X_train, y_train)\n\nranfor_score = round(ranfor.score(X_train, y_train)*100,2)\nranfor_score","918b63dd":"df_final = pd.DataFrame({\"Models\": [ 'Logistic Regression',  'Random Forest'], \n                       \"Score\": [logistic_score, ranfor_score]})","603e188d":"df_final.sort_values(by= \"Score\", ascending=False)","068c90e8":"from sklearn.metrics import classification_report # Nos indicara la precision de nuestro modelo\nfrom sklearn.metrics import confusion_matrix","e7e04ec9":"print (classification_report(y_test,prediccion))","8dbfce0b":"confusion_matrix(y_test,prediccion)","1af8c6ce":"\nprint (classification_report(y_test,pred_rf))","cbf59b70":"confusion_matrix(y_test,pred_rf)","fc1125b1":"df_test.drop(['Name','Embarked','SibSp','Ticket','Parch','Fare','Age','Cabin','Sex','Pclass'],axis=1,inplace=True)","c4917fe3":"df_test.head()","770ac874":"final_report_LogR = pd.DataFrame({\"PassengerId\": df_test[\"PassengerId\"], \n                       \"Survived\" : prediccion})\n","329c51bb":"final_report_LogR.head()","4a9b74ec":"final_report_LogR.to_csv('final_Pred_LogR.csv', index=False)","772c7d2d":"final_report_RanFor = pd.DataFrame({\"PassengerId\": df_test[\"PassengerId\"], \n                       \"Survived\" : pred_rf})\n","bc50cf36":"final_report_RanFor.head()","68290577":"final_report_RanFor.to_csv('final_Pred_RanFor', index=False)","27efe64d":"#               MODELO DE PREDICCION SOBREVIVIENTES DEL TITANIC\n\nEl siguiente ejercicio busca analizar de manera general el naufragio del titanic en las siguientes fases:\n\n* Creacion de los Dataframe's\n* Analisis preliminar por medio de visualizacion de datos\n* Limpieza y preparacion de datos\n* Retiro de columnas de poca importancia \n* Creacion del modelo ML\n* Entrenamiento del modelo \n* Zona de evaluacion de la prediccion \n* Zona de metricas y resultados finales (Regresion logistica y bosques aleatorios)\n\n","f7f04545":"# Vamos a cargar los datos en un DF llamado Train","827530a1":"# Numero de pasajeros por clase ","20743a84":"# Limpiando nuestros datos \n\nEn esta fase vamos a preparar nuestros datos para los algoritmos de machine learning , como primer paso vamos a realizar un diagrama de cajas para la edad y de esa manera observar el promedio de la edad por clase social","8edd1a5b":"# Ahora vamos a preparar los datos buscando los datos faltantes","8d7b63b3":"# Como ya tenemos los datos nulos vamos a hacer un mapa de calor para tener una mejor visualizacion ","665d1651":"# Conversion de las variables categoricas\n\nTendremos que convertir caracter\u00edsticas categ\u00f3ricas a variables ficticias utilizando pandas! De lo contrario, nuestro algoritmo de aprendizaje autom\u00e1tico no podr\u00e1 tomar directamente esas caracter\u00edsticas como entradas","ed6c8efd":"# Analisis :\n\nPodemos observar que la edad promedio por clase social es :\n\n* 1ra clase la edad promedio es 37 a\u00f1os aprox.\n* 2da clase la edad promedio es 29 a\u00f1os aprox.\n* 3ra clase la edad promedio es 24 a\u00f1os aprox.","56ddd393":"# Archivo con prediccion por Regresion Logistica\n","2867be57":"# Sobrevivientes por clases ( porcentaje %)","1465ab02":"# Archivo con prediccion por Random Forest","c5915815":"# Evaluaciones de los modelos","80a680b3":"# Aplicamos la funcion para limpiar datos de edad y actualizarlos","68f08415":"# ANALISIS GENERO:\nEs muy facil observar que la mayoria de personas que no sobrevivieron eran hombres y a su vez las personas que sobrevivieron en su mayoria (casi el doble ) eran mujeres","f59039c6":"# Prediccion del modelo","e38f6c13":"# # Construyendo el modelo de regresion :\n\nUna vez ya tengamos nuestros datos caracterizados y limpios , procedemos  a dividir nuestros datos en un conjunto de entrenamiento y un conjunto de prueba ","f12cfad6":"# Importamos librerias necesarias","12bf2e8a":"# Visualizamos rapidamente cuantos sobrevientes hubieron","8d17ec48":"# Retiro de las variables que no tienen importancia para nuestra prediccion\n\nRealizamos el retiro de las variables que no tienen importancia dentro del estudio o no son numericos","05fe23bb":"# ANALISIS CLASE SOCIAL:\nEn este grafico podemos observar que la mayoria de personas que perdieron la vida pertenecian a la 3ra clase, a su vez las personas que sobrevivieron estuvo mas equilibrado pero con una tendencia superior hacia los de 1ra clase seguido de los sobrevivientes de 3ra clase"}}