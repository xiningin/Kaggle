{"cell_type":{"f10c1532":"code","5880eec2":"code","9bc807ef":"code","ed53ddfd":"code","9ddbae94":"code","c6f5fdf0":"code","dba33971":"code","d8d3adda":"code","962bac0d":"code","7354c3e8":"code","a5b03035":"code","686a0370":"code","7ee7dee2":"code","eb63d5c4":"code","c1121248":"code","b2938c3f":"code","f630a4f5":"code","538b1086":"code","7a033b6f":"code","ed0a617c":"code","f2284df8":"code","355e0c6f":"code","6434d3d6":"code","07589891":"code","705cddfe":"code","e048cdb3":"markdown","57ea1f6b":"markdown","317a35bc":"markdown","cb79c51d":"markdown","3fef6298":"markdown","ff17c456":"markdown","889748b2":"markdown","f78727ad":"markdown","22168b63":"markdown","338f5061":"markdown","d17abef0":"markdown","a310df81":"markdown","2a759dfd":"markdown","fc5e0b32":"markdown","b421222c":"markdown","745b128c":"markdown","afe01775":"markdown","341343ac":"markdown"},"source":{"f10c1532":"import numpy as np\nimport pandas as pd\nimport difflib\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","5880eec2":"movies_data = pd.read_csv('..\/input\/movie-dataset\/movie_dataset.csv')","9bc807ef":"movies_data.head()","ed53ddfd":"movies_data.tail()","9ddbae94":"movies_data.shape","c6f5fdf0":"# selecting the relevant features for recommendation\nselected_features = ['genres','keywords','tagline','cast','director']\nselected_features","dba33971":"#replacing the null values with null string\n\nfor feature in selected_features:\n    movies_data[feature] = movies_data[feature].fillna('')","d8d3adda":"#combining all the 5 selected features\n\ncombined_feature = movies_data['genres']+' '+ movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']","962bac0d":"combined_feature","7354c3e8":"vectorizer = TfidfVectorizer()","a5b03035":"feature_vectors = vectorizer.fit_transform(combined_feature)","686a0370":"print(feature_vectors)","7ee7dee2":"# getting the similarity score using cosine similarty\n\nsimilarity = cosine_similarity(feature_vectors)","eb63d5c4":"print(similarity)","c1121248":"similarity.shape","b2938c3f":"movie_name = input(' Enter your favourite movie name : ')","f630a4f5":"list_of_all_titles = movies_data['title'].tolist()\nlist_of_all_titles","538b1086":"find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)\nfind_close_match","7a033b6f":"close_match = find_close_match[0]\nclose_match","ed0a617c":"index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]\nindex_of_the_movie","f2284df8":"similarity_score = list(enumerate(similarity[index_of_the_movie]))\nprint(similarity_score)","355e0c6f":"len(similarity_score)","6434d3d6":"sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) \nprint(sorted_similar_movies)","07589891":"print('Movies suggested for you :  \\n')\n\ni = 1\nfor movie in sorted_similar_movies:\n    index = movie[0]\n    title_from_index = movies_data[movies_data.index==index]['title'].values[0]\n    if (i<30):\n        print(i,'.',title_from_index)\n        i+=1","705cddfe":"movie_name = input(' Write the name of the movie you liked : ')\n\nlist_of_all_titles = movies_data['title'].tolist()\n\nfind_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)\n\nclose_match = find_close_match[0]\n\nindex_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]\n\nsimilarity_score = list(enumerate(similarity[index_of_the_movie]))\n\nsorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) \n\nprint('Movies suggested for you :  \\n')\n\ni = 1\nfor movie in sorted_similar_movies:\n    index = movie[0]\n    title_from_index = movies_data[movies_data.index==index]['title'].values[0]\n    if (i<30):\n        print(i,'.',title_from_index)\n        i+=1\n\n","e048cdb3":"# **Movie Recommendation System**\n1. **Content Based Recommendation System**\n2. **Popularity Based Recommendation System**\n3. **Collaborative Recommendation System**\n-\n![image.png](attachment:a4129b55-8c43-4008-8d7b-e7488697ce8b.png)\n![image.png](attachment:1ed229cf-7330-4543-912e-fca3863542fc.png)","57ea1f6b":"# **References**","317a35bc":"**Getting the movie name from the user**","cb79c51d":"**Creating a list with all the movie names given in the dataset**","3fef6298":"**Cosine Similarity**","ff17c456":"**Sorting the movies based on their similarity score**","889748b2":"**Finding the best match for the movie from by user**","f78727ad":"**Converting the text data to feature vectors**","22168b63":"**Getting a list of similar movies**","338f5061":"**Print the name of similar movies based on the index**","d17abef0":"> **Before the beginning I want to say that I hope you find this notebook helpful and some UPVOTES would be very much appreciated. Thanks a lot.**","a310df81":"**Finding the index of the movie based on title**","2a759dfd":"> textual data contains a lot of missing values called as null values and we need to replace this with null string ","fc5e0b32":"1. https:\/\/youtu.be\/7rEagFH9tQg","b421222c":"**Data Collection and Pre-Processing**","745b128c":"# **Work Flow**\n> 1. **Data**\n> 2. **Data Preprocessing**\n> 3. **Feature Extraction**\n> 4. **User input**\n> 5. **Cosine Similarity Algorithm**\n> 6. **List of Movies**","afe01775":" **Importings**","341343ac":"> # **Movie Recommendation System**"}}