{"cell_type":{"f46e6f95":"code","d7058ab9":"code","38463591":"code","2cec3052":"code","2e6e1a03":"code","b5baf3b8":"code","ed1246b6":"code","a4f90a50":"code","e8b0de7d":"code","b1e3b474":"code","7d008a07":"code","9bfde599":"code","2fc25de0":"code","6c50e34c":"code","3acba215":"markdown","c7f091ba":"markdown","f3ba9bdd":"markdown","aa084025":"markdown","e3c848f0":"markdown"},"source":{"f46e6f95":"# from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","d7058ab9":"print(os.listdir('..\/input'))","38463591":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","2cec3052":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","2e6e1a03":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","b5baf3b8":"# nRowsRead = 1000 # specify 'None' if want to read whole file\n# subreddit_info.csv has 3394 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('..\/input\/subreddit_info.csv', delimiter=',',usecols=['subreddit','category_1', 'category_2']).set_index(\"subreddit\")\ndf1.dataframeName = 'subreddit_info.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","ed1246b6":"df1.columns","a4f90a50":"df2 = pd.read_csv('..\/input\/rspct.tsv', delimiter='\\t').set_index(\"subreddit\")\ndf2.shape","e8b0de7d":"df2 = df2.join(df1).drop([\"id\"],axis=1)\ndf2.shape","b1e3b474":"df2.head()","7d008a07":"# df2[\"counts\"] = df2.groupby(\"category_1\")[\"category_2\"].transform(\"count\")\n# df2[\"counts\"].describe()","9bfde599":"df2.category_2.nunique()","2fc25de0":"df2.to_csv(\"reddit_selfText_1m.csv.gz\",index=False,compression=\"gzip\")","6c50e34c":"plotPerColumnDistribution(df1, 10, 5)","3acba215":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","c7f091ba":"### Let's check 1st file: ..\/input\/subreddit_info.csv","f3ba9bdd":"Now you're ready to read in the data and use the plotting functions to visualize the data.","aa084025":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","e3c848f0":"There is 1 csv file in the current version of the dataset:\n"}}