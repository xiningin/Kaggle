{"cell_type":{"a2f88ffb":"code","9ac1bbbe":"code","62a30ccb":"code","4eb7fc29":"code","e0769994":"code","15019581":"code","d577ca4b":"code","0ca94c2e":"code","f35a141d":"code","2580dcdf":"code","3c7cfaf2":"markdown","e6487520":"markdown","6685a370":"markdown","d7f198f2":"markdown","f0fc3c86":"markdown","c364001e":"markdown","44c6f1ac":"markdown","478ffc62":"markdown","754b3dea":"markdown","8977c88a":"markdown","b6a9e9dd":"markdown","c9018f0f":"markdown"},"source":{"a2f88ffb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom scipy.stats import lognorm\n\nimport matplotlib\nimport datetime as dt\nfrom tabulate import tabulate             \nimport seaborn as sns\nimport matplotlib.animation as animation\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.linear_model import LinearRegression\n\nimport datetime as dt\nfrom datetime import datetime\nimport dateutil.parser\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9ac1bbbe":"green_list =pd.read_csv('..\/input\/green_tripdata_2015-09.csv')","62a30ccb":"v = green_list.Trip_distance # create a vector to contain Trip Distance\n\nv[~((v-v.median()).abs()>3*v.std())].hist(bins=30) # removing outliers \nplt.xlabel('Trip Distance (miles)')\nplt.ylabel('Frequency')\nplt.title('Histogram of Trip Distance')\n\nscatter,loc,mean = lognorm.fit(green_list.Trip_distance.values,scale=green_list.Trip_distance.mean(), loc=0)    # applying lognorm fit\npdf_fitted = lognorm.pdf(np.arange(0,12,.1),scatter,loc,mean)\nplt.plot(np.arange(0,12,0.1),600000*pdf_fitted,'r')     # limits from 0 to 12 with a step size of 0.1\nplt.legend(['Lognormal Fit','Data'])\n\nplt.show()","4eb7fc29":"green_list['Pickup_dt'] = green_list.lpep_pickup_datetime.apply(lambda x:dt.datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\"))\ngreen_list['Pickup_hour'] = green_list.Pickup_dt.apply(lambda x:x.hour)\n#green_list['Dropoff_dt'] = green_list.Lpep_dropoff_datetime.apply(lambda x:dt.datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\"))\n\nfig,ax = plt.subplots(1,1,figsize=(10,5)) #plotting the mean and median on a single graph\ntable_list =green_list.pivot_table(index='Pickup_hour', values='Trip_distance',aggfunc=('mean','median')).reset_index()     # pivot table to aggregate the trip distance by hour\n\ntable_list.columns = ['Hour','Mean Trip Distance','Median Trip Distance']\ntable_list[['Mean Trip Distance','Median Trip Distance']].plot(ax=ax)\nprint(tabulate(table_list.values.tolist(),[\"Hour\",\"Mean Trip distance\",\"Median Trip Distance\"]))  #printing tabular version of graph\n    \nplt.title('Trip distance by pickup hour')\nplt.xlabel('Hours (24 hour format)')\nplt.ylabel('Distance (miles)')\nplt.xlim([0,23])       # 24 hour format\nplt.show()","e0769994":"trips =green_list[(green_list.RateCodeID==2) | (green_list.RateCodeID==3)]    # 2 represents JFK while 3 represnts Newark airports\nprint(\"Number of trips that originate or terminate at NYC are:\", len(trips.index))\n\nfare_amount =trips.Fare_amount.mean()\nprint(\"Average fare amount for tips to and fro the airports are: $\",fare_amount)\n\namt =trips.mean()\n#print(amt[16])  # mean comes out to be approximately 1.68\nprint(\"Average mode of payment while going to and fro airports is cash.\")  # 2 refers to credit card mode of payment\n\nv_air =trips.Trip_distance\nv_nonair =green_list.loc[~green_list.index.isin(v_air), \"Trip_distance\"]  # taking the complement of v_air\n\n\ntrips.Pickup_hour.value_counts(normalize=True).sort_index().plot()  # plotting hourly distribution\ngreen_list.loc[~green_list.index.isin(v_air.index),'Pickup_hour'].value_counts(normalize=True).sort_index().plot()\nplt.xlabel('Hours (24 hours)')\nplt.ylabel('Trip count')\nplt.title('Hourly distribution of Trips')\nplt.legend(['Airport trips','Non-airport trips'],bbox_to_anchor=(.05, 1), loc=2, borderaxespad=0.)\nplt.show()\n\nclean_RCID =green_list[~((green_list.RateCodeID>=1) & (green_list.RateCodeID<=6))].index                                    # cleaning RateCodeID since 99 is an outlier \ngreen_list.loc[clean_RCID, 'RateCodeID'] =2    # 2 was seen as the most common cash method\n\ndf = green_list.pivot_table(index='Pickup_hour', columns='RateCodeID', values='Fare_amount', aggfunc=np.median)             # plotting heat map (changing values =Distance we can\n        # get another heatmap which provides extra information)\nsns.heatmap(df, annot=True, fmt=\".1f\")\nplt.title(\"Distribution of RateID's with Pickup Hour\")\nplt.show()","15019581":"green_list =pd.read_csv('..\/input\/green_tripdata_2015-09.csv')\nclean_RCID =green_list[~((green_list.RateCodeID>=1) & (green_list.RateCodeID<=6))].index                                    \t# cleaning RateCodeID since 99 is an outlier \ngreen_list.loc[clean_RCID, 'RateCodeID'] =2\ngreen_list.Fare_amount = green_list.Fare_amount.abs()\ngreen_list.MTA_tax = green_list.MTA_tax.abs()\ngreen_list.Tolls_amount = green_list.Tolls_amount.abs()\ngreen_list.improvement_surcharge = green_list.improvement_surcharge.abs()\ngreen_list.Total_amount = green_list.Total_amount.abs()\n\ngreen_list['Trip_type '] = green_list['Trip_type '].replace(np.NaN,1)\n\ngreen_list =green_list.drop(['VendorID','lpep_pickup_datetime','Lpep_dropoff_datetime','Store_and_fwd_flag','Pickup_longitude','Pickup_latitude','Dropoff_longitude','Dropoff_latitude','Extra','Tolls_amount','Ehail_fee', 'Trip_type '],axis =1)\n\ntip =green_list[(green_list['Total_amount']>=2.5)]\ngreen_list =green_list[(green_list['Total_amount']>=2.5)]\ntip['Tip_percentage'] = (tip.Tip_amount\/tip.Total_amount) * 100\ntips =pd.DataFrame()\ntips =tip['Tip_percentage']\ntips =tips.values.reshape((1490167,1))\n\nlm =LinearRegression()\nmodel = lm.fit(green_list,tips)\npredictions = lm.predict(green_list)\nprint(predictions)[0:5]       #predicting the next 5 values of tip percentage\nprint(\"The accuracy is: \", lm.score(green_list,tips))","d577ca4b":"green_list =pd.read_csv('..\/input\/green_tripdata_2015-09.csv')\nd= datetime.now()\n\ngreen_list['Dropoff_dt'] = green_list.Lpep_dropoff_datetime.apply(lambda x:dt.datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\"))\ngreen_list['Pickup_dt'] = green_list.lpep_pickup_datetime.apply(lambda x:dt.datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\"))\ngreen_list['Pickup_hour'] = green_list.Pickup_dt.apply(lambda x:x.hour)\n\ngreen_list['Trip_duration'] =((green_list.Dropoff_dt - green_list.Pickup_dt).apply(lambda x:x.total_seconds()\/60.))\ngreen_list['Speed'] =green_list.Trip_distance \/ (green_list.Trip_duration\/60)    #to get the speed in mph\nprint(green_list[\"Speed\"].median())    #printing average of speeds\n\nnew_speed = green_list[(~(green_list.Speed.isnull())) | (green_list.Speed<100)]    #removing outliers","0ca94c2e":"green_list['Date'] =[d.day for d in green_list[\"Pickup_dt\"]]               #getting just the date\none =pd.DataFrame()            #creating empty data frames\none =green_list.loc[(green_list['Date']>=1) & (green_list[\"Date\"]<8)]      #getting data frame for days 1-7\ntwo =pd.DataFrame()\ntwo =green_list.loc[(green_list['Date']>=8) & (green_list[\"Date\"]<15)]\nthree =pd.DataFrame()\nthree =green_list.loc[(green_list['Date']>=15) & (green_list[\"Date\"]<22)]\nfour =pd.DataFrame()\nfour =green_list.loc[(green_list['Date']>=22) & (green_list[\"Date\"]<=30)]","f35a141d":"s1 =new_speed.loc[0:341474]\ns2 =new_speed.loc[341475:702674]\ns3 =new_speed.loc[702675:1065953]\ns4 =new_speed.loc[1065954:1494926]\n\nm1 =s1[\"Speed\"].median()\nm2 =s2[\"Speed\"].median()\nm3 =s3[\"Speed\"].median()\nm4 =s4[\"Speed\"].median()\n\ny =[m1,m2,m3,m4]\nx =[1,2,3,4]\nplt.scatter(x,y, label='skitscat', color='red', s=25, marker=\"o\")      #plotting speed as a function of hours\nplt.xlabel('Weeks')\nplt.ylabel('Speed (mph)')\nplt.title('Speed per Week')\nplt.show()","2580dcdf":"plt.plot(green_list[\"Speed\"])            #plotting speed as a function of hours\nplt.xlabel('Hours (24 hours)')\nplt.ylabel('Speed (mph)')\nplt.title('Hourly distribution of Speed')\nplt.ylim([0,40])\nplt.xlim([0,23])\nplt.show()","3c7cfaf2":"**Plotting the distribution**","e6487520":"**Simple Linear Regression to predict tips**","6685a370":"**Distribution of Speed per week**","d7f198f2":"**This part of code is used to find index of weeks ranging from 1-7, 8-14 and so on.**","f0fc3c86":"**More Exploratory Analysis**","c364001e":"We can see that the hours 5:00am to 7:00pm seem to be the time where the majority of people travel longer distances. This could indicate that people might be traveling to their work place in the morning. The distance travelled reduces towards noon time and again picks up at night time around 11:00pm-12:00am.\n","44c6f1ac":"We can clearly see that the speed of taxis does not exceed 25 mph and the highest speed reached was at around 11:00 am and 9:00 pm. The average speed starts to dip at around 9:00 am which is understandable considering that a lot of taxis would be in service increasing the amount of traffic, thus decreasing the speed.","478ffc62":"**Get Trip Distance by the Hour**","754b3dea":"The resulting plot is similar to a normal probability distribution which has a positive skewness. Also if we had gotten a symmetric Gaussian that would mean total randomness, but since we have got a positive skewness that could mean that there is some sort of patter like majority of people take taxis in the morning or at night while going to the office and going back home respectively.","8977c88a":"**Getting the data set**","b6a9e9dd":"**Show Distribution of Trip Distance**","c9018f0f":"For airport trips, using the RateCodeID field, I could see that values 2 and 3 refer to the JFK and Newark Airports respectively. Using this information, we can see the difference between airport and non-airport trips. As seen in Figure 4, for airport trips, at 3:00pm the peak is reached and the lowest point is at around 3:00am which is understandable since not many people catch flights early in the morning.\n\nA few extra stuff which I discovered is that for airport trips the main mode of payment was by cash since the mean of all payments for airport trips was around 1.68 which approximates to 2 and this value refers to cash mode of pay- ment.\nI also created heat maps based on the Fare amount and Trip distance.\nFor the Trip distance heat map we can see that the longest distances are to the JFK and Newark airports. From Figure 5 we can see that group rides (RateCodeID =6) seems to have the least distance travelled, which could sug- gest that group rides are done for only nearby areas. Also for the JFK airport, most travels seem to take place between 4:00 am and 6:00 pm, since the other times report almost 0.0 miles traveled."}}