{"cell_type":{"60584a56":"code","8008bdff":"code","bce3cffc":"code","378e6590":"code","58cbf3f4":"code","c7a44d07":"code","e99509cc":"code","c23d106a":"code","f8bfd365":"code","d35667c7":"code","3f8603f8":"code","b18ea40d":"code","143bb99f":"code","b558aad8":"code","34fce9e4":"code","7ac0fa48":"code","ae1e6820":"code","24ababf4":"markdown","502f62c4":"markdown","eb2f4b2f":"markdown","6a51b79f":"markdown","47082818":"markdown","349d0772":"markdown"},"source":{"60584a56":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error\nfrom matplotlib.cbook import boxplot_stats\nimport statsmodels.api as sm\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.statespace.sarimax import SARIMAXResults\nfrom matplotlib.animation import FuncAnimation\nfrom math import sqrt\nimport itertools","8008bdff":"parser = (lambda x:datetime.datetime.strptime(x, '%Y.%m.%d')) \ndf = pd.read_csv('..\/input\/sp-beaches-update\/sp_beaches_update.csv', parse_dates=['Date'])\ndf = df.sort_values(by=['Date'])\ndf=df.loc[~df['Enterococcus'].isnull()]\n#remover a praia do Leste, da cidade de iguape, pois esta praia sumiu por eros\u00e3o em 2012\n#remover a Lagoa Prumirim, da cidade de Ubatuba, pois esta praia possui somente 3 medi\u00e7\u00f5es\ndf = df.loc[df['Beach']!='DO LESTE'].loc[df['Beach']!='LAGOA PRUMIRIM']\ndf.info()","bce3cffc":"cidade=\"UBATUBA\"\npraia=\"GRANDE\"\ntest_size=10\n\ndf_beach = df.loc[df['City']==cidade].loc[df['Beach']==praia][['Date','Enterococcus']]\ndf_beach.columns = ['ds', 'y']\ndf_beach.set_index('ds', inplace=True)\n\ntreino = df_beach.iloc[:-test_size,0:1].copy()\nteste = df_beach.iloc[-test_size:,0:1].copy()\n\nprint(treino)\nprint(teste)\nplt.figure(figsize=(18,5))\nplt.title('Enterococcus na praia \"'+praia+'\" de '+cidade)\nplt.plot(treino, color='teal')\nplt.plot(teste, color='orangered')\nplt.legend(['Treino','Teste'])\nplt.xlabel('Data')\nplt.ylabel('Enterococcus UFC\/100ML')\nplt.show()","378e6590":"future=df_beach.loc[df_beach.index[-test_size:]].index\nfuture","58cbf3f4":"def checar_estacionariedade(y, lags_plots=48, figsize=(22,8)):\n    \"Use Series como par\u00e2metro\"\n    \n    # Criando plots do DF\n    #y = pd.Series(y)\n    fig = plt.figure()\n    ax1 = plt.subplot2grid((3, 3), (0, 0), colspan=2)\n    ax2 = plt.subplot2grid((3, 3), (1, 0))\n    ax3 = plt.subplot2grid((3, 3), (1, 1))\n    ax4 = plt.subplot2grid((3, 3), (2, 0), colspan=2)\n    y.plot(ax=ax1, figsize=figsize, color='teal')\n    ax1.set_title('S\u00e9rie de medi\u00e7\u00f5es')\n    plot_acf(y, lags=lags_plots, zero=False, ax=ax2, color='teal');\n    plot_pacf(y, lags=lags_plots, zero=False, ax=ax3, method='ols', color='teal');\n    sns.distplot(y, bins=int(sqrt(len(y))), ax=ax4, color='teal')\n    ax4.set_title('Distribui\u00e7\u00e3o dos medi\u00e7\u00f5es')\n    plt.tight_layout()\n    \n    print('Resultados do teste de Dickey-Fuller:')\n    adfinput = adfuller(y)\n    adftest = pd.Series(adfinput[0:4], index=['Teste Statistico','Valor-P','Lags Usados','N\u00fameros de Observa\u00e7\u00f5es'])\n    adftest = round(adftest,4)\n    \n    for key, value in adfinput[4].items():\n        adftest[\"Valores Cr\u00edticos (%s)\"%key] = value.round(4)\n        \n    print(adftest)","c7a44d07":"checar_estacionariedade(treino, lags_plots=160)","e99509cc":"treinoLogDiff = np.log(treino).diff().dropna()\nchecar_estacionariedade(treinoLogDiff, lags_plots=160)","c23d106a":"\ndecomposition = sm.tsa.seasonal_decompose(treino, model='additive', freq=1)\nfig = decomposition.plot()\nplt.show()\n","f8bfd365":"p = range(0, 6)\nd = range(0, 2)\nq = range(0, 1)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 52) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter for SARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","d35667c7":"import warnings\nwarnings.filterwarnings(\"ignore\")\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(treinoLogDiff,order=param,seasonal_order=param_seasonal,enforce_stationarity=False,enforce_invertibility=False)\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param,param_seasonal,results.aic))\n        except: \n            continue","3f8603f8":"mod = sm.tsa.statespace.SARIMAX(treino,\n            order=(5, 0, 0),\n            seasonal_order=(5, 1, 0, 52),\n            enforce_stationarity=False,\n            enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","b18ea40d":"results.plot_diagnostics(figsize=(18, 8))\nplt.show()","143bb99f":"import datetime as dt\npred_uc = results.get_forecast(steps=84)\nindex_date = pd.date_range(treino.index[-10], periods = 84, freq = 'W')\nforecast_series = pd.Series(list(pred_uc.predicted_mean), index = index_date)\npred_ci = pred_uc.conf_int()\nax = treino['2019':].plot(label='treino', figsize=(14, 4))\n#print(pred_uc.predicted_mean)\nforecast_series.plot(ax=ax, label='predito')\nteste.plot(ax=ax, label='teste')\nax.fill_between(forecast_series.index,\n pred_ci.iloc[:, 0],\n pred_ci.iloc[:, 1], color='k', alpha=.1)\nax.set_xlabel('Data')\nax.set_ylabel('Enterococos')\nplt.legend()\nplt.show()","b558aad8":"results.summary()\n","34fce9e4":"from sklearn.metrics import mean_squared_error\n#pred = results.predict('2020-08-24','2020-09-28',exog = teste)[1:]\n#forecast_series\nprint(forecast_series['2020-07-20':'2020-09-28'])\nprint(df_beach['2020-07-27':'2020-09-28'])\nprint('ARIMAX model MSE:{}'.format(mean_squared_error(df_beach['2020-07-27':'2020-09-28'],forecast_series['2020-07-20':'2020-09-28'])))","7ac0fa48":"print(df_beach['2020-07-20':'2020-09-28'].to_numpy().reshape((10)))\nprint(forecast_series['2020-07-20':'2020-09-28'].to_numpy())\npd.DataFrame({'test':df_beach['2020-07-20':'2020-09-28'].to_numpy().reshape((10)),'pred':forecast_series['2020-07-20':'2020-09-28'].to_numpy()}).plot();plt.show()","ae1e6820":"results.save('my_model.pkl')","24ababf4":"Transformar a s\u00e9rie em estacion\u00e1ria","502f62c4":"* Dividir s\u00e9rie em treino e teste\n* Transformar a s\u00e9rie em estacion\u00e1ria\n* Procurar lags correlacionados\n* Criar o modelo\n* Plotar o gr\u00e1fico comparativo na base de treino\n* Avaliar o modelo e o erro na base de testes\n* Sugerir poss\u00edveis melhorias do modelo.","eb2f4b2f":"Definir as datas que ser\u00e3o previstas","6a51b79f":"checar estacionariedade","47082818":"Selecionar os dados de uma praia especifica e separa treino e teste","349d0772":"Ler os dados, ordenar por data, remover os nulos e as praias com poucos dados"}}