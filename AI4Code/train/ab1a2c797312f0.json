{"cell_type":{"a263241c":"code","6376bd40":"code","4dd5b383":"code","a3a384e5":"code","a593327d":"code","61e679fe":"code","a0357261":"code","d540745b":"code","3c06c4d6":"code","611f30c5":"code","01cb2968":"code","aec24bc3":"code","aa8dab64":"code","5d831575":"code","550fbf07":"code","0f59b3b8":"code","1c887464":"code","4d861761":"code","a2cc2c4d":"code","0e83afae":"code","d61a6e40":"code","08b4f945":"code","ec75db8e":"code","362d67f3":"code","6243a1a0":"code","b9e75c24":"code","bdedae0d":"code","1914c894":"code","b01b67ce":"markdown","4ed37cee":"markdown","3854fa4a":"markdown","f6ccc88a":"markdown","50d09c11":"markdown","2199c129":"markdown","bf72f542":"markdown","7f85866c":"markdown"},"source":{"a263241c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport h2o\nfrom h2o.automl import H2OAutoML","6376bd40":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')","4dd5b383":"df_train['IsTrain'] = 1\ndf_test['IsTrain'] = 0\ndf = pd.concat([df_train, df_test], sort=False,axis=0)\n\ndf['date_time'] = pd.to_datetime(df['date_time'])\n\ndf['day_of_week'] = df['date_time'].dt.dayofweek\ndf['hour'] = df['date_time'].dt.hour\ndf['working_hours'] =  df.hour.isin(np.arange(8, 21, 1)).astype(\"int\")\ndf.loc[(df['date_time'].dt.month >= 3) & (df['date_time'].dt.month <= 5), 'season'] = 1\ndf.loc[(df['date_time'].dt.month >= 6) & (df['date_time'].dt.month <= 8), 'season'] = 2\ndf.loc[(df['date_time'].dt.month >= 9) & (df['date_time'].dt.month <= 11), 'season'] = 3\ndf.loc[(df['date_time'].dt.month == 12) | (df['date_time'].dt.month <= 2), 'season'] = 4\n\ntrain = df.query('IsTrain == 1').drop(['IsTrain'], axis=1)\ntest =  df.query('IsTrain == 0').drop(['IsTrain','target_carbon_monoxide','target_benzene','target_nitrogen_oxides'], axis=1)","a3a384e5":"h2o.init()","a593327d":"\ndef do_h2o(target, train, test):\n    features = [x for x in train.columns if x not in [target]]\n    h2oaml = H2OAutoML(max_runtime_secs=360, stopping_metric='RMSLE', sort_metric='RMSLE')\n    h2oaml.train(x=features, y=target, training_frame=train)\n    h2oaml.leaderboard\n    pred = h2oaml.leader.predict(test).as_data_frame().predict\n    return(pred)","61e679fe":"train1 = h2o.H2OFrame(train.query('absolute_humidity >= 0.24').loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_5', 'season', 'working_hours', 'target_carbon_monoxide']])\ntest1 = h2o.H2OFrame(test.loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_1', 'sensor_2', 'sensor_5', 'season', 'working_hours']])","a0357261":"train1","d540745b":"test1","3c06c4d6":"pred1 = do_h2o('target_carbon_monoxide', train1, test1)\npred1","611f30c5":"train2 = h2o.H2OFrame(train.loc[:,['sensor_2','target_benzene']])\ntest2 = h2o.H2OFrame(test.loc[:,['sensor_2']])","01cb2968":"train2","aec24bc3":"test2","aa8dab64":"pred2 = do_h2o('target_benzene', train2, test2)\npred2","5d831575":"train3 = h2o.H2OFrame(train.query('absolute_humidity >= 0.24 & season >= 3').loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'working_hours', 'target_nitrogen_oxides']])\ntest3 = h2o.H2OFrame(test.loc[:,['deg_C', 'relative_humidity','absolute_humidity', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'working_hours']])","550fbf07":"train3","0f59b3b8":"test3","1c887464":"pred3 = do_h2o('target_nitrogen_oxides', train3, test3)\npred3","4d861761":"sub1 = pd.DataFrame({\n    'date_time': test.date_time,\n    'target_carbon_monoxide': pred1,\n    'target_benzene': pred2,\n    'target_nitrogen_oxides': pred3\n})\n\nsub1","a2cc2c4d":"train4 = h2o.H2OFrame(train.query('season >= 3').loc[:,['day_of_week', 'hour', 'season', 'working_hours', 'target_carbon_monoxide']])\ntest4 = h2o.H2OFrame(test.loc[:,['day_of_week', 'hour', 'season', 'working_hours']])","0e83afae":"train4","d61a6e40":"test4","08b4f945":"pred4 = do_h2o('target_carbon_monoxide', train4, test4)\npred4","ec75db8e":"train5 = h2o.H2OFrame(train.query('season >= 3').loc[:,['day_of_week', 'hour', 'season', 'working_hours', 'target_nitrogen_oxides']])\ntest5 = h2o.H2OFrame(test.loc[:,['day_of_week', 'hour', 'season', 'working_hours']])","362d67f3":"pred5 = do_h2o('target_nitrogen_oxides', train5, test5)\npred5","6243a1a0":"sub2 = pd.DataFrame({\n    'date_time': test.date_time,\n    'target_carbon_monoxide': pred4,\n    'target_benzene': pred2,\n    'target_nitrogen_oxides': pred5\n})\n\nsub2","b9e75c24":"sub_temp1 = sub1.query(\"date_time < '2011-01-02 21:00:00'\")\nsub_temp2 = sub2.query(\"date_time >= '2011-01-02 21:00:00' & date_time <= '2011-01-05 00:00:00'\")\nsub_temp3 = sub1.query(\"date_time > '2011-01-05 00:00:00' & date_time < '2011-01-28 17:00:00'\")\nsub_temp4 = sub1.query(\"date_time >= '2011-01-28 17:00:00' & date_time <= '2011-01-29 01:00:00'\")\nsub_temp5 = sub1.query(\"date_time > '2011-01-29 01:00:00' & date_time < '2011-02-08 17:00:00'\")\nsub_temp6 = sub2.query(\"date_time >= '2011-02-08 17:00:00' & date_time <= '2011-02-11 20:00:00'\")\nsub_temp7 = sub1.query(\"date_time > '2011-02-11 20:00:00'\")\n\nsubmission = pd.concat([sub_temp1, sub_temp2, sub_temp3, sub_temp4, sub_temp5, sub_temp6, sub_temp7], sort=False,axis=0)","bdedae0d":"submission","1914c894":"submission.to_csv('autml_h2o_submission.csv',index=False)","b01b67ce":"#### Benzene","4ed37cee":"# Tabular Playground Series - Jul 2021\n## H20(AutoML)\n\nI have been using **Pycaret** to try predictions with various features. The one with the best score is [this notebook](https:\/\/www.kaggle.com\/astashiro\/tps-jul2021-06rethink-features). <\/br> \n**Score(Pycaret) : 0.20696**\n\nNext, I also tried predicting with **LightAutoML** under the same conditions as the features that worked well with Pycaret. This is  [the notebook](https:\/\/www.kaggle.com\/astashiro\/tps-jul2021-07lightautoml\/output?select=LightAutoML_submission.csv). <\/br>\n**Score(LightAutoML) : 0.20509**\n\nBoth of these AutoMLs were very nice and gave similar results for the same features, but I decided to try a third AutoML, **H20**.  \n\nI guess it depends on the tuning, but the results are still the same. It seems that it is better to choose the AutoML you prefer for its execution speed and visualization of the results.","3854fa4a":"### Predict with H20(AutoML)","f6ccc88a":"#### Nitrogen oxides","50d09c11":"### Prediction when the sensor is off\n#### Carbon monoxide","2199c129":"#### Nitrogen oxides","bf72f542":"### Prediction when the sensor is on\n#### Carbon monoxide","7f85866c":"### Merge predictions"}}