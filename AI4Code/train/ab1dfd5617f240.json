{"cell_type":{"454b952c":"code","a6c7ad5b":"code","25fb487b":"code","863a420a":"code","18082f96":"code","9d3960b5":"code","3f28c933":"code","aa3f0ada":"code","0b6cada4":"code","e4e1332b":"code","013611c0":"code","d60b5ca4":"code","2d37fe0a":"code","a70c5729":"code","fdc18e3d":"code","c20d5d31":"code","fcd95405":"code","2d2c478f":"code","05360fd6":"code","1cdf58dd":"code","2c21da66":"code","eeeba953":"code","f706854d":"code","579efffe":"code","3ed57a95":"markdown","da99366d":"markdown","523ebec3":"markdown","a6947e05":"markdown","c0d3dc59":"markdown","c055a5c7":"markdown","532ffc41":"markdown"},"source":{"454b952c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport nltk\n\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn import neighbors\nfrom scipy.spatial.distance import cosine\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\n\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n\nimport re\nimport string\nfrom wordcloud import WordCloud, STOPWORDS","a6c7ad5b":"#import data\ndf = pd.read_csv(\"..\/input\/Reviews.csv\")","25fb487b":"#Basic Information shape and columns\nprint(df.columns)\nprint(df.shape)\ndf","863a420a":"\ncount = df.groupby(\"ProductId\", as_index=False).count()\nmean = df.groupby(\"ProductId\", as_index=False).mean()\n\n\ndf1 = pd.merge(df, count, how='right', on=['ProductId'])\n\ndf1[\"Count\"] = df1[\"UserId_y\"]\ndf1[\"Score\"] = df1[\"Score_x\"]\ndf1[\"Summary\"] = df1[\"Summary_x\"]\n\n\ndf1 = df1[['ProductId','Summary','Score',\"Count\"]]","18082f96":"\ndf1 = df1.sort_values(by=['Count'], ascending=False)\ndf2 = df1[df1.Count >= 100]\ndf2","9d3960b5":"\ndf4 = df.groupby(\"ProductId\", as_index=False).mean()\ncombine_summary = df2.groupby(\"ProductId\")[\"Summary\"].apply(list)\ncombine_summary = pd.DataFrame(combine_summary)\ncombine_summary.to_csv(\"combine_summary.csv\")","3f28c933":"\ndf3 = pd.read_csv(\"combine_summary.csv\")\ndf3 = pd.merge(df3, df4, on=\"ProductId\", how='inner')\ndf3 = df3[['ProductId','Summary','Score']]","aa3f0ada":"\ncleanup_re = re.compile('[^a-z]+')\ndef cleanup(sentence):\n    sentence = sentence.lower()\n    sentence = cleanup_re.sub(' ', sentence).strip()\n    sentence = \" \".join(nltk.word_tokenize(sentence))\n    return sentence","0b6cada4":"\ndf3[\"Summary_Clean\"] = df3[\"Summary\"].apply(cleanup)\ndf3 = df3.drop_duplicates(['Score'], keep='last')\ndf3 = df3.reset_index()","e4e1332b":"from pandas import DataFrame \n\ndocs = df3[\"Summary_Clean\"] \nvect = CountVectorizer(max_features = 100, stop_words='english') \nX = vect.fit_transform(docs) \n\ndf5 = DataFrame(X.A, columns=vect.get_feature_names())\ndf5 = df5.astype(int)","013611c0":"#save \ndf5.to_csv(\"df5.csv\")","d60b5ca4":"# First let's create a dataset called X\nX = np.array(df5)\n # create train and test\ntpercent = 0.9\ntsize = int(np.floor(tpercent * len(df5)))\ndf5_train = X[:tsize]\ndf5_test = X[tsize:]\n#len of train and test\nlentrain = len(df5_train)\nlentest = len(df5_test)","2d37fe0a":"# Next we will instantiate a nearest neighbor object, and call it nbrs. Then we will fit it to dataset X.\nnbrs = NearestNeighbors(n_neighbors=3, algorithm='ball_tree').fit(df5_train)\n\n# Let's find the k-neighbors of each point in object X. To do that we call the kneighbors() function on object X.\ndistances, indices = nbrs.kneighbors(df5_train)","a70c5729":"#find most related products\nfor i in range(lentest):\n    a = nbrs.kneighbors([df5_test[i]])\n    related_product_list = a[1]\n    \n    first_related_product = [item[0] for item in related_product_list]\n    first_related_product = str(first_related_product).strip('[]')\n    first_related_product = int(first_related_product)\n    second_related_product = [item[1] for item in related_product_list]\n    second_related_product = str(second_related_product).strip('[]')\n    second_related_product = int(second_related_product)\n    \n    print (\"Based on product reviews, for \", df3[\"ProductId\"][lentrain + i] ,\" and this average Score is \",df3[\"Score\"][lentrain + i])\n    print (\"The first similar product is \", df3[\"ProductId\"][first_related_product] ,\" and this average Score is \",df3[\"Score\"][first_related_product])\n    print (\"The second similar product is \", df3[\"ProductId\"][second_related_product] ,\" and this average Score is \",df3[\"Score\"][second_related_product])\n    print (\"-----------------------------------------------------------\")","fdc18e3d":"df5_train_target = df3[\"Score\"][:lentrain]\ndf5_test_target = df3[\"Score\"][lentrain:lentrain+lentest]\ndf5_train_target = df5_train_target.astype(int)\ndf5_test_target = df5_test_target.astype(int)\n\nn_neighbors = 3\nknnclf = neighbors.KNeighborsClassifier(n_neighbors, weights='distance')\nknnclf.fit(df5_train, df5_train_target)\nknnpreds_test = knnclf.predict(df5_test)\nprint (knnpreds_test)\n\nprint(classification_report(df5_test_target, knnpreds_test))\nprint (accuracy_score(df5_test_target, knnpreds_test))","c20d5d31":"cluster = df.groupby(\"Score\")[\"Summary\"].apply(list)","fcd95405":"cluster = pd.DataFrame(cluster)\ncluster.to_csv(\"cluster.csv\")\ncluster1 = pd.read_csv(\"cluster.csv\")","2d2c478f":"cluster1[\"Summary_Clean\"] = cluster1[\"Summary\"].apply(cleanup)","05360fd6":"stopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=500,\n        max_font_size=30, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n    ).generate(str(data))\n    \n    fig = plt.figure(1, figsize=(8, 8))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","1cdf58dd":"show_wordcloud(cluster1[\"Summary_Clean\"][0], title = \"Review Score One\")","2c21da66":"show_wordcloud(cluster1[\"Summary_Clean\"][1] , title = \"Review Score Two\")","eeeba953":"show_wordcloud(cluster1[\"Summary_Clean\"][2], title = \"Review Score Three\")","f706854d":"show_wordcloud(cluster1[\"Summary_Clean\"][3], title = \"Review Score Four\")","579efffe":"show_wordcloud(cluster1[\"Summary_Clean\"][4], title = \"Review Score Five\")","3ed57a95":" Review Score","da99366d":"# 3. Word correltation based on cluster ","523ebec3":" KNN classifier to find similar products","a6947e05":"## 3.a World Clouding for Each Score Group","c0d3dc59":" Product based collaborative filtering","c055a5c7":"### 1.c Predicting Review Score","532ffc41":" Clean process"}}