{"cell_type":{"1476bb14":"code","81b5921d":"code","287911b6":"code","bb929481":"code","424476a9":"code","3a0cf61e":"code","f1441145":"code","e2eec90e":"code","f4bc08c1":"code","20d44f38":"code","75c4560b":"code","972e852c":"code","c464483a":"code","94dbc298":"markdown","3f4334bc":"markdown","1f7fe2ed":"markdown","9de083cc":"markdown","9ea4e894":"markdown","cacab479":"markdown"},"source":{"1476bb14":"import numpy as np\nimport sklearn as sk\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n","81b5921d":"#=====================\n# L\u00ea os dados\n#=====================\ndata = pd.read_csv(\"..\/input\/adult-pmr3508\/train_data.csv\",\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"NaN\",index_col=0)\ndatatest = pd.read_csv(\"..\/input\/adult-pmr3508\/test_data.csv\",\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"NaN\", index_col=0)\n","287911b6":"data.describe()\n","bb929481":"data.head()","424476a9":"#==================================================\n# Imprime a quantidade de dados faltantes nas colunas\n#==================================================\nfor col_name, col_val in data.iteritems():\n    missing_sum = sum(1 if val == \"?\" else 0 for val in col_val)\n    print(col_name, missing_sum, \"\\n\", data[col_name].unique())","3a0cf61e":"#==================================================\n# Substitui os dados faltantes por moda da coluna\n#==================================================\nfor col in data:\n    data[col] = data[col].fillna(data[col].mode())\nfor col in datatest:\n    datatest[col] = datatest[col].fillna(datatest[col].mode())\ndata = data\ndatatest = datatest","f1441145":"#=================================================\n# Encoda os dados STRING em classifica\u00e7\u00e3o ordinal\n#=================================================\nstringfeatures = [\"marital.status\",\"education\",\"occupation\", \"relationship\", \"race\", \"sex\", \"workclass\", \"native.country\"]\n\nnumdata = data\nnumdata[stringfeatures] = numdata[stringfeatures].apply(preprocessing.LabelEncoder().fit_transform) \nnumdatatest = datatest\nnumdatatest[stringfeatures] = numdatatest[stringfeatures].apply(preprocessing.LabelEncoder().fit_transform) \n\n#============================\n# Normaliza\u00e7\u00e3o\n#============================\nnormalizar = [\"age\", \"education.num\", \"marital.status\",\"occupation\",\"relationship\",\n           \"race\", \"sex\", \"native.country\", \"workclass\"]\n\nfor col in normalizar:\n    numdata[col] = (numdata[col] - numdata[col].min()) \/ (numdata[col].max() - numdata[col].min())\n    numdatatest[col] = (numdatatest[col] - numdatatest[col].min()) \/ (numdatatest[col].max() - numdatatest[col].min())\n\n","e2eec90e":"numdata.head()","f4bc08c1":"#==================================\n# Sele\u00e7\u00e3o das Features Relevantes\n#==================================\nclasses = [\"age\", \"education.num\", \"marital.status\",\"relationship\",\"occupation\",\n           \"sex\", \"capital.gain\", \"capital.loss\"]\nX = numdata.filter(items=classes)\nY = numdata.income","20d44f38":"#=================================================\n# Encontra o melhor K para KNN\n#=================================================\nmaxk = 0\nmaxscore = 0\nknn = None\nmaxknn = None\nfor k in range(26,27):\n    knn = KNeighborsClassifier(k,n_jobs=-1)\n    scores = cross_val_score(knn, X, Y, cv=10)\n    print(f\"{k} {scores.mean():.6f} {scores.max():.6f}\")\n    if scores.mean() > maxscore:\n        maxscore = scores.mean()\n        maxk = k\n        maxknn = knn","75c4560b":"#==========\n# Fit\n#==========\nXtest = numdatatest.filter(items=classes)\nmaxknn.fit(X,Y)","972e852c":"#=================================================\n# Predict com a rede treinada\n#=================================================\nYpred = maxknn.predict(Xtest)\nYpred = np.where(Ypred==0, \"<=50K\", Ypred) \nYpred = np.where(Ypred=='1', \">50K\", Ypred) ","c464483a":"#=================================================\n# Gera o arquivo de sa\u00edda\n#=================================================\ns = \"Id,income\\n\"\nfor k,income in enumerate(Ypred):\n    s += f\"{k},{income}\\n\"\n\nwith open(f\"submission.csv\", \"w+\") as f:\n    f.write(s)","94dbc298":"## Leitura dos Dados\n","3f4334bc":"## Treinamento\n\nPara o treinamento, escolhemos o valor de K em fun\u00e7\u00e3o do score de cross validation\ndo classificador treinado. Salva-se o melhor resultado, e ele \u00e9 usado no fit mais\na frente.\n\nCom a rede treinado \u00e9 feito o predict da s\u00e9rie de Teste e por fim gerado o arquivo de sa\u00edda.","1f7fe2ed":"## Resolvendo NA\nComo apenas 3 colunas (occupation, workclass e native.country) possuem dados faltantes,\ne sua quantidade \u00e9 muito inferior ao n\u00famero de amostras. Decidi por substitu\u00ed-los pela\nmoda da coluna.","9de083cc":"## Selecionando as features relevantes\nAgora selecionando as features que ser\u00e3o utilizadas na constru\u00e7\u00e3o do modelo\n\nCom alguns testes feitos previamentes, os resultados que foram geraram melhores\nresultados foram excluindo as colunas \"native.country, workclass e race\"\n\nAl\u00e9m destes resultados, fnlwgt e education tamb\u00e9m s\u00e3o exclu\u00eddos por serem redundantes\ncom outras features.","9ea4e894":"## Resolvendo os dados n\u00e3o num\u00e9ricos\nPara conseguir treinar o classificador \u00e9 necess\u00e1rio que os atributos\ntenham valores num\u00e9ricos, o que pode ser feito de v\u00e1rias maneiras, entre elas:\n- Scalar Encoding\n- One-Hot Encoding\n\nDevido a simplicidade da solu\u00e7\u00e3o, optei por ordinal encoding para testar um\nmodelo simples.","cacab479":"## Breve descri\u00e7\u00e3o\n\nPrimeiramente, vamos analisar o dataset e descobrir: Quais dados est\u00e3o faltando e o que fazer com eles"}}