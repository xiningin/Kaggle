{"cell_type":{"6acc9760":"code","d6471a66":"code","6e67d998":"code","bb14af78":"code","ba149a61":"code","2e7cf5b2":"code","9c62953f":"code","85dd4063":"code","9aca314c":"code","37cbd3e2":"code","c20ad5d7":"code","d956af37":"code","f838c6ac":"code","80226066":"code","c725f85a":"code","ba1aaffd":"code","dbd8e773":"code","22358e57":"code","454b6443":"code","689bdc37":"code","90dc3b9a":"code","e8ab9ae8":"code","604ccb6a":"code","673825f6":"code","5af24d02":"code","ffb54ac4":"code","69226e88":"code","b2e8990a":"code","d5e3e21e":"code","68410d67":"code","75a56741":"code","11f8af92":"code","004b3d7a":"code","73371cfb":"code","00b91430":"code","b1d61d11":"code","51348cd4":"code","d6a5e182":"code","a7e4ebfe":"code","0978f3e9":"code","707e915f":"code","b63a7a34":"code","0bf60009":"code","7b2638ea":"code","ca59f676":"code","9ae45c9a":"code","587a931d":"code","0b2eb6a4":"code","d82cb68c":"code","82cfc0f4":"code","3b18c81c":"code","aee4d0df":"code","d7ecf15b":"code","3e8ca5ae":"code","fbf54b85":"code","a73c0ed1":"code","174e6546":"code","390326e9":"code","39d5ea7b":"code","f2a18f3b":"code","c9cfaa3c":"code","245de8be":"code","58bd8ff0":"code","bb05833d":"code","2ff31b59":"code","3e2f3108":"code","bdad9050":"code","b78cab41":"code","08a7d324":"code","af046fe8":"code","06a6089c":"code","a79db24e":"code","bf20715a":"code","34c44a74":"code","1ad62ea5":"code","53a22370":"code","fcdf77bc":"code","602720d0":"code","c01fdca8":"code","319e4893":"code","81e9b921":"markdown","965630d3":"markdown","84503349":"markdown","95d99059":"markdown","51d9911d":"markdown","8655674b":"markdown","f9ab9f20":"markdown","f4371b5d":"markdown","ecd49c8e":"markdown","86b308f0":"markdown","7636383f":"markdown","65431f9d":"markdown","0ace0e06":"markdown","28fca0c7":"markdown","4e8cc628":"markdown","2f56b85e":"markdown","dbe01a72":"markdown","bbf8202e":"markdown","5f59fd02":"markdown","0e69a5f8":"markdown","b46477c1":"markdown","ea28de2d":"markdown","3c5d97d4":"markdown","4d4e1837":"markdown","7e18e336":"markdown","d8f62100":"markdown","60db09f9":"markdown","a9d0f318":"markdown","0db10226":"markdown","878a4918":"markdown","04c97697":"markdown","14a19df3":"markdown","fda92fd2":"markdown","466cc9dc":"markdown"},"source":{"6acc9760":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d6471a66":"#Importing the required libraries and data set \nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt","6e67d998":"dataset_train=pd.read_csv(\"..\/input\/learn-together\/train.csv\")","bb14af78":"#Checking first few rows\ndataset_train.head()","ba149a61":"#Total number of records\ndataset_train.shape","2e7cf5b2":"#Column Details\ndataset_train.columns","9c62953f":"#Create feature matrix , will keep all columns except 'Id'\nX=dataset_train.drop(columns=['Id'])\nX.head()","85dd4063":"sns.scatterplot(X['Elevation'],X['Aspect'],hue=X['Cover_Type'],palette='rainbow')","9aca314c":"#Boxplot between elevation and Cover type\nsns.boxplot(y=X['Elevation'],x=X['Cover_Type'],palette='rainbow')","37cbd3e2":"#Boxplot between Aspect and Cover type\nsns.boxplot(y=X['Aspect'],x=X['Cover_Type'],palette='rainbow')","c20ad5d7":"#Boxplot between Slope and Cover type\nsns.boxplot(y=X['Slope'],x=X['Cover_Type'],palette='rainbow')","d956af37":"#Boxplot between Horizontal_Distance_To_Hydrology and Cover type\nsns.boxplot(y=X['Horizontal_Distance_To_Hydrology'],x=X['Cover_Type'],palette='rainbow')\n","f838c6ac":"#Boxplot between Vertical_Distance_To_Hydrology and Cover type\nsns.boxplot(y=X['Vertical_Distance_To_Hydrology'],x=X['Cover_Type'],palette='rainbow')","80226066":"#Boxplot between Horizontal_Distance_To_Roadways and Cover type\nsns.boxplot(y=X['Horizontal_Distance_To_Roadways'],x=X['Cover_Type'],palette='rainbow')","c725f85a":"#Boxplot between Hillshade_9am and Cover type\nsns.boxplot(y=X['Hillshade_9am'],x=X['Cover_Type'],palette='rainbow')","ba1aaffd":"#Boxplot between Hillshade_Noon and Cover type\nsns.boxplot(y=X['Hillshade_Noon'],x=X['Cover_Type'],palette='rainbow')","dbd8e773":"#Boxplot between Hillshade_3pm and Cover type\nsns.boxplot(y=X['Hillshade_3pm'],x=X['Cover_Type'],palette='rainbow')","22358e57":"#Boxplot between Horizontal_Distance_To_Fire_Points and Cover type\nsns.boxplot(y=X['Horizontal_Distance_To_Fire_Points'],x=X['Cover_Type'],palette='rainbow')","454b6443":"#Creating data frame for Degree Variables \nX_deg=X[['Elevation','Aspect','Slope','Cover_Type']]","689bdc37":"#Creating pairplot for Degree Variables\nsns.pairplot(X_deg,hue='Cover_Type')","90dc3b9a":"#Creating data frame for Distance Variables \nX_dist=X[['Horizontal_Distance_To_Hydrology','Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Horizontal_Distance_To_Fire_Points','Cover_Type']]","e8ab9ae8":"#Creating pairplot for Degree Variables\nsns.pairplot(X_dist,hue='Cover_Type')","604ccb6a":"#Creating data frame for Hillshade Variables \nX_hs=X[['Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Cover_Type']]","673825f6":"#Creating pairplot for Hillshade Variables\nsns.pairplot(X_hs,hue='Cover_Type')","5af24d02":"#Creating data frame for Hillshade Variables \nX_wild=X[['Wilderness_Area1','Wilderness_Area2','Wilderness_Area3','Wilderness_Area4','Cover_Type']]","ffb54ac4":"#Creating pairplot for Hillshade Variables\nsns.pairplot(X_wild,hue='Cover_Type')","69226e88":"#Checking missing values \ntotal_missing_values_X=X.isnull().sum().sort_values(ascending=False)\ntotal_missing_values_X","b2e8990a":"#Taking independent variable out of X and assigning to y\ny=X[['Cover_Type']]\nX=X.drop(columns=['Cover_Type'])","d5e3e21e":"#**Commenting data scaling as scores are improved without data scaling ***\n# Feature Scaling training set for better predictions \n#from sklearn.preprocessing import StandardScaler\n#sc = StandardScaler()\n#X = sc.fit_transform(X)","68410d67":"# Fitting Logistic Regression to the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier_lr = LogisticRegression(random_state=0)\nclassifier_lr.fit(X,y)","75a56741":"# Predicting the Train set results\ny_pred_lr=classifier_lr.predict(X)","11f8af92":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm_lr=confusion_matrix(y,y_pred_lr)\ncm_lr","004b3d7a":"#Converting y from series to array , to generate a graph for comparision with y_pred_\ny=y.values","73371cfb":"#Converting 2 dimensional y and y_pred array into single dimension \ny=y.ravel()\ny_pred_lr=y_pred_lr.ravel()","00b91430":"#Creating data frame for y and y_pred_ to create line plot\ndf_lr=pd.DataFrame({\"y\":y,\"y_pred_lr\":y_pred_lr})","b1d61d11":"#Creating scatter plot for both values to see comparision between y and y_pred\nplt.figure(figsize=(25,10))\nax=sns.scatterplot(x=range(1,15121),y=df_lr['y'],color='red')\nax=sns.scatterplot(x=range(1,15121),y=df_lr['y_pred_lr'],color='blue')\nax.set_xscale('log')","51348cd4":"# Fitting KNN classifier to the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier_knn=KNeighborsClassifier(n_neighbors=5, metric = 'minkowski', p = 2)\nclassifier_knn.fit(X, y)","d6a5e182":"# Predicting the Train set results\ny_pred_knn=classifier_lr.predict(X)","a7e4ebfe":"#Converting 2 dimensional  y_pred array into single dimension \ny_pred_knn=y_pred_knn.ravel()","0978f3e9":"#Creating data frame for y and y_pred_ to create line plot\ndf_knn=pd.DataFrame({\"y\":y,\"y_pred_knn\":y_pred_knn})","707e915f":"#Creating scatter plot for both values to see comparision between y and y_pred\nplt.figure(figsize=(25,10))\nax=sns.scatterplot(x=range(1,15121),y=df_knn['y'],color='red')\nax=sns.scatterplot(x=range(1,15121),y=df_knn['y_pred_knn'],color='blue')\nax.set_xscale('log')","b63a7a34":"# Fitting Random Forest Classification to the Training set\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier_rf = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier_rf.fit(X, y)","0bf60009":"# Predicting the Train set results\ny_pred_rf=classifier_rf.predict(X)","7b2638ea":"#Converting 2 dimensional  y_pred array into single dimension \ny_pred_rf=y_pred_rf.ravel()","ca59f676":"#Creating data frame for y and y_pred_ to create line plot\ndf_rf=pd.DataFrame({\"y\":y,\"y_pred_rf\":y_pred_rf})\n","9ae45c9a":"#Creating scatter plot for both values to see comparision between y and y_pred\nplt.figure(figsize=(25,10))\nax=sns.scatterplot(x=range(1,15121),y=df_rf['y'],color='red')\nax=sns.scatterplot(x=range(1,15121),y=df_rf['y_pred_rf'],color='blue')\nax.set_xscale('log')","587a931d":"# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies_rf = cross_val_score(estimator = classifier_rf, X = X, y = y, cv = 10)\naccuracies_rf","0b2eb6a4":"#Calculating mean and standard deviation for random forest model\naccuracies_rf.mean()\naccuracies_rf.std()","d82cb68c":"# Fitting Random Forest Classification to the Training set\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier_rf_new = RandomForestClassifier(n_estimators = 719,\n                                           bootstrap=False,\n                                           max_depth=464,\n                                           max_features=0.3,\n                                           min_samples_leaf=1,\n                                           min_samples_split=2,\n                                           random_state=42)\nclassifier_rf_new.fit(X, y)","82cfc0f4":"# Predicting the Train set results\ny_pred_rf_new=classifier_rf_new.predict(X)","3b18c81c":"#Converting 2 dimensional  y_pred array into single dimension \ny_pred_rf_new=y_pred_rf_new.ravel()","aee4d0df":"#Creating data frame for y and y_pred_ to create line plot\ndf_rf_new=pd.DataFrame({\"y\":y,\"y_pred_rf_new\":y_pred_rf_new})","d7ecf15b":"#Creating scatter plot for both values to see comparision between y and y_pred\nplt.figure(figsize=(25,10))\nax=sns.scatterplot(x=range(1,15121),y=df_rf_new['y'],color='red')\nax=sns.scatterplot(x=range(1,15121),y=df_rf_new['y_pred_rf_new'],color='blue')\nax.set_xscale('log')","3e8ca5ae":"# Applying k-Fold Cross Validation\naccuracies_rf_new = cross_val_score(estimator = classifier_rf_new, X = X, y = y, cv = 10)\naccuracies_rf_new","fbf54b85":"#Calculating mean and standard deviation for random forest model\naccuracies_rf_new.mean()\naccuracies_rf_new.std()","a73c0ed1":"#importing required library and creating XGboost classifier model\n#Refered above mentioned kernels for fine tuning XGB classifier model\nfrom xgboost import XGBClassifier\nclassifier_xgb=XGBClassifier(n_estimators = 719,\n                             max_depth = 10)\nclassifier_xgb.fit(X,y)","174e6546":"# Predicting the Train set results\ny_pred_xgb=classifier_xgb.predict(X)","390326e9":"#Converting 2 dimensional  y_pred array into single dimension \ny_pred_xgb=y_pred_xgb.ravel()","39d5ea7b":"#Creating data frame for y and y_pred_ to create line plot\ndf_xgb=pd.DataFrame({\"y\":y,\"y_pred_xgb\":y_pred_xgb})","f2a18f3b":"#Creating scatter plot for both values to see comparision between y and y_pred\nplt.figure(figsize=(25,10))\nax=sns.scatterplot(x=range(1,15121),y=df_xgb['y'],color='red')\nax=sns.scatterplot(x=range(1,15121),y=df_xgb['y_pred_xgb'],color='blue')\nax.set_xscale('log')","c9cfaa3c":"accuracies_xgb = cross_val_score(estimator = classifier_xgb, X = X, y = y, cv = 10)\naccuracies_xgb","245de8be":"#Calculating mean and standard deviation for random forest model\naccuracies_xgb.std()\naccuracies_xgb.mean()","58bd8ff0":"#Get test data \ndataset_test = pd.read_csv(\"..\/input\/learn-together\/test.csv\")","bb05833d":"#Create X_test and fetching id in different frame\nX_test=dataset_test.drop(columns=['Id'])\ny_test_id=dataset_test[['Id']]","2ff31b59":"#Converting Id into array\ny_test_id=y_test_id.values","3e2f3108":"#Converting 2 dimensional y_test_id into single dimension \ny_test_id=y_test_id.ravel()","bdad9050":"#Checking missing value in test data set\ntotal_missing_values_X_test=X_test.isnull().sum().sort_values(ascending=False)\ntotal_missing_values_X_test","b78cab41":"#**Commenting data scaling as scores are improved without data scaling ***\n#Scaling and Transforming test set also as train set is already scaled and transformed\n#X_test = sc.fit_transform(X_test)","08a7d324":"#Creating predictions from random forest model without fine tuned parameters\ny_test_pred_rf=classifier_rf.predict(X_test)","af046fe8":"#Converting 2 dimensional y_test_pred into single dimension \ny_test_pred_rf=y_test_pred_rf.ravel()","06a6089c":"#Creating Submission dataframe from id and predecited Sale price\nsubmission_df_rf=pd.DataFrame({\"Id\":y_test_id,\"Cover_Type\":y_test_pred_rf})\n#Setting index as Id Column\nsubmission_df_rf.set_index(\"Id\")","a79db24e":"#Converting into CSV file for submission\nsubmission_df_rf.to_csv(\"submission_rf.csv\",index=False)","bf20715a":"#Creating predictions from random forest model with fine tuned parameters\ny_test_pred_rf_new=classifier_rf_new.predict(X_test)","34c44a74":"#Converting 2 dimensional y_test_pred into single dimension \ny_test_pred_rf_new=y_test_pred_rf_new.ravel()","1ad62ea5":"#Creating Submission dataframe from id and predecited Sale price\nsubmission_df_rf_new=pd.DataFrame({\"Id\":y_test_id,\"Cover_Type\":y_test_pred_rf_new})\n#Setting index as Id Column\nsubmission_df_rf_new.set_index(\"Id\")","53a22370":"#Converting into CSV file for submission\nsubmission_df_rf_new.to_csv(\"submission_rf_new.csv\",index=False)","fcdf77bc":"#Creating predictions from XGB model\ny_test_pred_xgb=classifier_xgb.predict(X_test)","602720d0":"#Converting 2 dimensional y_test_pred into single dimension \ny_test_pred_xgb=y_test_pred_xgb.ravel()","c01fdca8":"#Creating Submission dataframe from id and predecited Sale price\nsubmission_df_xgb=pd.DataFrame({\"Id\":y_test_id,\"Cover_Type\":y_test_pred_xgb})\n#Setting index as Id Column\nsubmission_df_xgb.set_index(\"Id\")","319e4893":"#Converting into CSV file for submission\nsubmission_df_xgb.to_csv(\"submission_xgb.csv\",index=False)","81e9b921":"**Conclusion** For our model training we will be considering all variables present in data set . I do have feeling that we can skip either 'Aspect' or 'Slope' variables based on the pairplot which we have plotted in previous section but let's keep them both for now , we can see our results and then decide regarding this.","965630d3":"Let's focus on pairplots between variables 'Horizaontal\/Vertical_Distance_To_Hydrology' and Cover Type. \n\nFor cover type *'3','4' and '6*'   distances are not going to upper values and for * '1','2' ,'5' and '7'*   it's going to higher range.\n\nLet's check 'Horizontal_Distance_To_Rodways\/Fire_Points'. Here also, for cover type  *'3','4' and '6' *  distances are not going to upper values and for  *'1','2' ,'5' and '7'*   it's going to higher range\n\nIt's  quiet evident that these distances are playing role in classification of forest cover type","84503349":"# 6. K-Fold Cross Validation\n","95d99059":"Here also red dots are becoming negligible , let's evaluate the model with K-Cross fold validation","51d9911d":"#Getting the best params\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nbest_accuracy\nbest_parameters","8655674b":"# 5. Different Classifier Models and Predictions","f9ab9f20":"# 4. Missing Data","f4371b5d":"Mean Accuracy is coming close to 75% and standard Devaition is also not that much (~5%) , still we can improve this model.\n\nLet's try grid search to hypertune the parameters","ecd49c8e":"With latest fine tuning of random forest classifier model red dots are negligible , let's check K-Fold Cross Validation for this model","86b308f0":"****How to read above graph : ** Red points represents actual values i.e 'y' and blue dots represents predicted one i.e. 'y_pred_lr'. We are seeing only few red dots because most of the points are overlapped which means correct predictions(y=y_pred_lr) but the one which are not are not overlapped are seeing seprately means incorrect predictions . In other words **All visible red dots are incorrect predictions**.\n\nIf we zoom this graph *(which we can do by increasing values in **plt.figure(figsize=(25,10)**)* we can see more red dots\n\n**Note:** Since 'x' axis range is big as compare to 'y' axis we have converted it into log values to see maximum values in small scale\n\nSo this model is giving us few incorrect predictions .Let's try other model","7636383f":"Mean Accuracy is coming close to 80% and standard Devaition is also not that much (~4%) , it's improved a lot after finetuning .\n\n> **Note**: As if now best score i.e. '0.77' is coming with this model only and with these parameters\n\n Let's try another algorithm called **XG-boost**","65431f9d":"There is no missing values in our independent and dependent variables","0ace0e06":"As confusion matrix is not giving as clear picture , let's try with scatter plot to compare between 'y' and 'y_pred_lr'","28fca0c7":"> *Changing below two cells to markdown to prevent execution at the time of commit because this particular code is taking long time to execute . So I have executed this seprately to get best parameters and commenting this part to avoid long execution time during commit and generating output.*","4e8cc628":"Scatterplot is not give us any clear picture , let's try box plot","2f56b85e":"In this Kernel we will be exploring data set provided for Forest Cover type classification in Beginner's playground competition and apply different classifier algorithm ,will evaluate each algorithm.\n\nTo get more on EDA refer my another [kernel](https:\/\/www.kaggle.com\/kushbhatnagar\/first-competition-kernel-house-pricing-prediction) on House Sale Price Prediction Competition \n\nIf you like the kernel please upvote :)","dbe01a72":"There is no missing value in test data","bbf8202e":"Let's check missing values in our independent and dependent variables","5f59fd02":"#Getting the best params\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nbest_accuracy\nbest_parameters","0e69a5f8":"From above pairplots we can say that for forest cover types '1' and '7' elevation value lies between '2500' and 4000' and for forest cover type '2' elevation value lies between '2000' and '3500'.\n\nFor 'Aspect' and 'Slope' each forest cover type has almost equal distribution. So, we can say 'Elevation' can play a role in classification.","b46477c1":"From above graphs it's evident that 'Hillshade_9am' and 'Hillshade_Noon' have differnt ranges of start index for all forest cover types . Where as , 'Hillshade_3pm' gives almost same ranges for all forest cover type. We can consider them in our analysis","ea28de2d":"#Applying Grid Search to find the best model and the best parameters\nfrom sklearn.model_selection import GridSearchCV\n#Create the parameter grid based on the results of random search \nparam_grid = {\n    'bootstrap': [True],\n    'max_depth': [80, 90, 100, 110],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'n_estimators': [100, 300, 500, 1000]\n}\ngrid_search = GridSearchCV(estimator = classifier_rf, param_grid = param_grid,cv = 3, n_jobs = -1)\ngrid_search = grid_search.fit(X, y)","3c5d97d4":"# 1. About the Kernel","4d4e1837":"# 3. Data Analysis","7e18e336":"# 8. Cover Type Prediction from Test Set","d8f62100":"We can see that Cover Type '2' are spread across all four wilderness area , cover types '1' , '7' are in three wilderness area while , '5' , '6' are in two and '4' , '3' are in one wilderness area\n\nIt's clear that  Wilderness areas variables are important in forest cover type classifications\n\nFor 'Soil Type' variables , we will consider them all because as per the data description it looks like they can play role in forest cover type classification.","60db09f9":"Let's examin relationship between differnet variables and cover type","a9d0f318":"Checking data set details like number of records , number of columns , column data type","0db10226":"Let's create a new classifier model with above parameters . In addition to above grid search results I have refererd following kernels for fine tunning \n*  https:\/\/www.kaggle.com\/arateris\/2-layer-k-fold-learning-forest-cover#Feature-removal\n*  https:\/\/www.kaggle.com\/joshofg\/pure-random-forest-hyperparameter-tuning","878a4918":"# 7. Grid Search","04c97697":"# 2. Get the Dataset","14a19df3":"We can see that above graph is with very less number of red dots , as compare to previous graphs this is very accurate predictions , so let's focus on this algorithm i.e. on ** Random Forest Classifier **.\n\nNow , let's evaluate the accuracies of this model with the help of K-Fold Corss Validation","fda92fd2":"Mean Accuracy is coming close to 79% and standard Devaition is also not that much (~4%).\n\nFor predictions from Test set let's take last three models which are random forest without tuned parameters, random forest with tuned parameters and XGboost","466cc9dc":"Above box plots gives us fair understanding that for each forest cover type there are entries in every variables so for now we will consider all these variables in our analysis . Remaining variables are binary variables , which means they are already label encoded (*this makes our work little Simpler)*\n\nFor now we will group similar varaibles and try to understand relationship across  differnt forest cover types. We can divide variables in follwoing categories \n* **Degree Variables** : We can consider variables *'Elevation,'Aspect' and 'Slope'* under this category , as these three variable are about  measurments either in angular or numerical form\n* **Distance Variables** : We can consider following variables as they are about different distances from varoius points *'Horizontal_Distance_To_Hydrology','Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways','Horizontal_Distance_To_Fire_Points*\n* **Hillsahde Variables** : Three hillshade variables comes under this cateogry\n* **Wilderness Variables** : All four wilderness variables comes under this category\n"}}