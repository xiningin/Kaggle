{"cell_type":{"5e5e67dd":"code","2bf20f1f":"code","1028504c":"code","a5f76a1d":"code","d28ebbae":"code","a3249b62":"code","fe215e2c":"code","ae61c6af":"code","e4b459dd":"code","38107cf2":"code","6841e4da":"code","8c01a349":"code","d0e3a224":"code","f4cfed0e":"code","e3186954":"code","481265a6":"code","eeaa62e5":"code","5a4a78e2":"code","c5d17a1f":"code","37f0490b":"code","049392ae":"code","84750d94":"code","1d42f34b":"code","0b840e1a":"code","2d8c57af":"code","3172c054":"code","1b409f46":"code","b950e96c":"code","bfdd557e":"code","436f0a7f":"code","48bcbdfb":"code","0431c35d":"code","95bf9df7":"code","f664acad":"code","d9b7b677":"code","fb8d74b9":"code","894dae50":"code","7bf27074":"code","593832f5":"code","51c09527":"code","01b451c1":"code","e76c34fc":"code","d07a3977":"code","05ec2857":"code","3c22706f":"code","ce1f225a":"code","409749db":"code","6dece390":"code","b0aefdf0":"code","5635ae44":"code","ea6b9dbc":"code","ce85a4ab":"code","e98df3f3":"code","e197f588":"code","1fc53fa3":"code","848f23d6":"code","a545fa7f":"code","3fb48595":"code","2cf58e41":"code","df9d8b12":"code","0e16a537":"code","2d68b3b6":"code","5f8089e9":"code","50940c9b":"code","11034fd7":"code","c5254202":"code","5cc1b68f":"markdown","6377d8ae":"markdown","f24a8e76":"markdown","5aa9afb7":"markdown","f1876036":"markdown","8fe852c6":"markdown","c575a267":"markdown","6a6884f1":"markdown","c7b9016a":"markdown"},"source":{"5e5e67dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bf20f1f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sb\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")","1028504c":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","a5f76a1d":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","d28ebbae":"print('Train data size',train_data.shape)\nprint('Test data size',test_data.shape)","a3249b62":"train_data.info()","fe215e2c":"train_data.describe()","ae61c6af":"train_data['Pclass'].value_counts()","e4b459dd":"train_data['Survived'].value_counts()","38107cf2":"train_data['SibSp'].value_counts()","6841e4da":"train_data['Parch'].value_counts()","8c01a349":"train_data['Embarked'].value_counts()","d0e3a224":"df = pd.DataFrame(train_data)\ndf.head()","f4cfed0e":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Survived'].value_counts().index, y = df['Survived'].value_counts().values)\nplt.title('Survival counts')\nplt.xlabel('Survived')\nplt.ylabel('No of passengers')\nplt.show()","e3186954":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Pclass'].value_counts().index, y = df['Pclass'].value_counts().values)\nplt.title('Types of passenger class')\nplt.xlabel('Class')\nplt.ylabel('No of passengers')\nplt.show()","481265a6":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Sex'].value_counts().index, y = df['Sex'].value_counts().values)\nplt.title('Male and Female counts')\nplt.xlabel('Counts')\nplt.ylabel('No of passengers')\nplt.show()","eeaa62e5":"gender = pd.crosstab(df['Survived'],df['Sex'])\ngender","5a4a78e2":"gender.plot(kind=\"bar\",title='No of passengers survived')\nplt.show()","c5d17a1f":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Embarked'].value_counts().index, y = df['Embarked'].value_counts().values)\nplt.title('port')\nplt.xlabel('count')\nplt.ylabel('No of passengers')\nplt.show()","37f0490b":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['SibSp'].value_counts().index, y = df['SibSp'].value_counts().values)\nplt.title('Number of siblings\/spouses aboard')\nplt.xlabel('count')\nplt.ylabel('No of passengers')\nplt.show()","049392ae":"rcParams['figure.figsize'] = 10,5\nsb.barplot(x = df['Parch'].value_counts().index, y = df['Parch'].value_counts().values)\nplt.title('Number of parents\/childrens aboard')\nplt.xlabel('count')\nplt.ylabel('No of passengers')\nplt.show()","84750d94":"delete = ['Ticket','Cabin','Name','Fare','Embarked']","1d42f34b":"train = train_data.drop(delete,axis = 1)","0b840e1a":"train.head()","2d8c57af":"test = test_data.drop(delete,axis =1)","3172c054":"test.head()","1b409f46":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()","b950e96c":"train['Sex'] = enc.fit_transform(train['Sex'])","bfdd557e":"train.head(2)","436f0a7f":"test['Sex'] = enc.fit_transform(test['Sex'])","48bcbdfb":"test.head(2)","0431c35d":"train.dtypes","95bf9df7":"train.isnull().sum()","f664acad":"train.fillna(train['Age'].median(),inplace = True)","d9b7b677":"train.isnull().sum()","fb8d74b9":"test.fillna(train['Age'].median(),inplace = True)","894dae50":"test.isnull().sum()","7bf27074":"test.set_index(['PassengerId'],inplace = True)","593832f5":"test.head(2)","51c09527":"train.set_index(['PassengerId'],inplace = True)","01b451c1":"train.head()","e76c34fc":"X = train[['Pclass','Sex','Age','SibSp','Parch']]\ny = train.Survived","d07a3977":"X.head(2)","05ec2857":"y.head(2)","3c22706f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB,MultinomialNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier","ce1f225a":"from sklearn import model_selection\nfrom sklearn.model_selection import train_test_split,cross_val_score,validation_curve,KFold","409749db":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 10,test_size=0.25)","6dece390":"models = []\nmodels.append(('LG', LogisticRegression()))\nmodels.append(('SVC', SVC()))\nmodels.append(('DTC', DecisionTreeClassifier()))\nmodels.append(('RFC', RandomForestClassifier()))\nmodels.append(('KNC', KNeighborsClassifier()))\nmodels.append(('MLP', MLPClassifier()))\nmodels.append(('XGB-TREE', XGBClassifier(booster='gbtree')))\nmodels.append(('XGB-DART', XGBClassifier(booster='dart')))\nmodels.append(('GNB', GaussianNB()))","b0aefdf0":"seed = 10\nresults = []\nnames = []\noutput = []\nscore = 'accuracy'\nfor name,model in models:\n    kfold = model_selection.KFold(n_splits = 5,random_state = seed)\n    result = model_selection.cross_val_score(model,np.array(X_train),np.array(y_train),cv=kfold,scoring=score)\n    results.append(result)\n    names.append(name)\n    values = name,result.mean()\n    output.append(values)\nprint(output)","5635ae44":"rcParams['figure.figsize'] = 10,5\nfig = plt.figure()\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","ea6b9dbc":"from xgboost import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(X_train,y_train)","ce85a4ab":"y_predict = model.predict(X_test)","e98df3f3":"from sklearn.metrics import accuracy_score,classification_report,roc_auc_score,roc_curve","e197f588":"accuracy_score(y_test,y_predict).round(4)*100","1fc53fa3":"pd.crosstab(y_test,y_predict)","848f23d6":"print(classification_report(y_test,y_predict))","a545fa7f":"auc = roc_auc_score(y_test,y_predict)\nprint('XGB AUC : %.2f'%auc)","3fb48595":"rf_fpr,rf_tpr,_ = roc_curve(y_test,y_predict)\nplt.plot(rf_fpr,rf_tpr,marker='_',label = 'XGB')\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nplt.legend()\nplt.show()","2cf58e41":"test_predict = model.predict(test)","df9d8b12":"test_predict = pd.Series(test_predict)","0e16a537":"test.reset_index(inplace = True)","2d68b3b6":"predict = test['PassengerId']","5f8089e9":"predict = pd.concat([predict,test_predict], axis=1)","50940c9b":"predict.rename(columns={0: \"Survived\"},inplace=True)","11034fd7":"predict.to_csv(\"submission_titanicsurvival.csv\",index=False)","c5254202":"sb.countplot(predict.Survived)","5cc1b68f":"# **EDA**","6377d8ae":"1. Here we can see survival rate for female is more than male.\n2. And not survived counts are mostly men.","f24a8e76":"# **Knowing about the each variables**","5aa9afb7":"# Data Preparation","f1876036":"* Among total no of passengers male counts are larger than the female. ","8fe852c6":"# **Importing Necessary Packages**","c575a267":"* XGB performs well.","6a6884f1":"* 0 --> Not Survived\n* 1 --> Survived","c7b9016a":"# Modelling"}}