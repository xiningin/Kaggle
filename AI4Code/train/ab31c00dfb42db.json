{"cell_type":{"ce33fb44":"code","56736a48":"code","88c1f73c":"code","a2a6f258":"code","41cb6ee0":"code","898e24ab":"code","f0bd1931":"code","35989b6b":"code","cbae9a32":"code","e10d626d":"code","e40d5e9c":"code","dbf6e0c9":"code","3d28b850":"code","0a4f50bf":"code","bea4db91":"code","4ee4c4ed":"code","b953c6fa":"code","1d434ab2":"code","570d2b7e":"code","9e6fb4cd":"code","c9ac10ee":"code","967f398a":"code","ea731187":"code","7928348c":"code","9183a6fb":"code","dbdd7636":"code","0316b121":"code","7dc8ba9d":"code","35ce6c7a":"code","f88adbea":"code","b1ce95a5":"code","eb723208":"markdown"},"source":{"ce33fb44":"import pandas as pd\n#from google.colab.patches import cv2_imshow\nimport matplotlib.pyplot as plt\nimport tensorflow.keras.backend as K\nimport tensorflow as tf\nimport numpy as np\nimport cv2\n\nfrom tensorflow.keras.applications import EfficientNetB0\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense,Input,Lambda\n\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow_datasets as tfds\nfrom functools import partial\nfrom albumentations import (\n    Compose, RandomBrightness, JpegCompression, HueSaturationValue, RandomContrast, HorizontalFlip,Normalize,RandomBrightnessContrast,\n    VerticalFlip,\n    Rotate\n)\nimport pandas as pd\n#from google.colab.patches import cv2_imshow\nimport matplotlib.pyplot as plt\nimport tensorflow.keras.backend as K\nimport tensorflow as tf\nimport numpy as np\nimport cv2\n\nfrom tensorflow.keras.applications import EfficientNetB0\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense,Input,Lambda\n\n#from albumentations import *\nAUTOTUNE = tf.data.experimental.AUTOTUNE","56736a48":"pictureCsv = pd.read_csv(\"..\/input\/mnist-zeroshot-learning\/trainPictureArray.csv\")\nsigmoidTrain = pd.read_csv(\"..\/input\/mnist-zeroshot-learning\/pictureIndexData.csv\")","88c1f73c":"train = pd.read_csv(\"..\/input\/trainvalsplit\/trainSplit.csv\")\nvalidation = pd.read_csv(\"..\/input\/trainvalsplit\/validationSplit.csv\")","a2a6f258":"pictureCsvNoLabel = pictureCsv.iloc[:,:-1]\npictureCsvNoLabel = tf.convert_to_tensor(pictureCsvNoLabel.to_numpy())","41cb6ee0":"firstPictureIndex = train[\"firstPictureIndex\"].values\nsecondPictureIndex = train[\"secondPictureIndex\"].values\n\nfirstPictureIndexValidation = validation[\"firstPictureIndex\"].values\nsecondPictureIndexValidation = validation[\"secondPictureIndex\"].values","898e24ab":"image = pictureCsv.iloc[0][:-1].to_numpy()\nimageV2 = np.stack([image,image,image])","f0bd1931":"pictureCsv","35989b6b":"pixels = image.reshape((28, 28))\n\n        # Plot\nplt.title('Label is {label}'.format(label=2))\nplt.imshow(pixels, cmap='gray')\nplt.show()","cbae9a32":"transforms = Compose([\n            HorizontalFlip(),\n            VerticalFlip(),\n            #Normalize(),\n            #RandomBrightnessContrast(),\n           Normalize()\n        ])","e10d626d":"def preprocess_image(index,process_type = \"train\",target_shape = (224,224)):\n    \"\"\"\n    Load the specified file as a JPEG image, preprocess it and\n    resize it to the target shape.\n    \"\"\"\n    image = tf.reshape(pictureCsvNoLabel[index],(28,28))\n    image = tf.stack([image, image, image],axis=2)\n    #image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.reshape(image,(28,28,3))*255\n\n    image = tf.image.convert_image_dtype(image, tf.float32)\n    image = tf.image.resize(image, target_shape)\n    \n    if process_type == \"train\":\n        image = process_Augment_data(image,img_size = target_shape[0])\n        \n    return image\n\ndef aug_fn(image, img_size):\n    data = {\"image\":image}\n    aug_data = transforms(image=image)\n    aug_img = aug_data[\"image\"]\n    aug_img = tf.image.resize(aug_img, size=[img_size, img_size])\n    return aug_img\n\ndef process_Augment_data(image, img_size):\n    aug_img = tf.numpy_function(func=aug_fn, inp=[image, img_size], Tout=tf.float64)\n    return aug_img\n\ndef preprocess_siamese(positive, negative):\n    \"\"\"\n    Given the filenames corresponding to the three images, load and\n    preprocess them.\n    \"\"\"\n\n    return (\n        preprocess_image(positive),\n        preprocess_image(negative),\n    )","e40d5e9c":"imageFinalize = preprocess_image(0)","dbf6e0c9":"image = pictureCsv.iloc[0][:-1].to_numpy().reshape((28,28))\nimageV2 = np.stack([image,image,image],axis=2)\n#imageV2 = imageV2.reshape((28,28,3))\n#imageV2 = np.swapaxes(imageV2,0,2)\nresized = cv2.resize(imageV2, (224,224), interpolation = cv2.INTER_AREA)\nresized = resized*255","3d28b850":"import cv2","0a4f50bf":"for i in range(1):  \n  plt.subplot(330 + 1 + i)\n  plt.imshow(imageV2 , cmap=plt.get_cmap('gray'))\n  plt.show()","bea4db91":"transforms = Compose([\n            HorizontalFlip(),\n            VerticalFlip(),\n           Normalize()\n        ])\n\nval_transforms = Compose([\n           Normalize()\n        ])","4ee4c4ed":"def preprocess_image(index,process_type = \"train\",target_shape = (224,224)):\n    \"\"\"\n    Load the specified file as a JPEG image, preprocess it and\n    resize it to the target shape.\n    \"\"\"\n    image = tf.reshape(pictureCsvNoLabel[index],(28,28))\n    image = tf.stack([image, image, image],axis=2)\n    #image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.reshape(image,(28,28,3))*255\n\n    image = tf.image.convert_image_dtype(image, tf.float32)\n    image = tf.image.resize(image, target_shape)\n    \n    if process_type == \"train\":\n        image = process_Augment_data(image,img_size = target_shape[0])\n    elif process_type == \"validation\":\n        image = process_Augment_data_validation(image,img_size = target_shape[0])\n    return image\n\ndef aug_fn(image, img_size):\n    data = {\"image\":image}\n    aug_data = transforms(image=image)\n    aug_img = aug_data[\"image\"]\n    aug_img = tf.image.resize(aug_img, size=[img_size, img_size])\n    return aug_img\n\ndef aug_fn_test(image, img_size):\n    data = {\"image\":image}\n    aug_data = val_transforms(image=image)\n    aug_img = aug_data[\"image\"]\n    aug_img = tf.image.resize(aug_img, size=[img_size, img_size])\n    return aug_img\n\ndef process_Augment_data(image, img_size):\n    aug_img = tf.numpy_function(func=aug_fn, inp=[image, img_size], Tout=tf.float32)\n    return aug_img\n\ndef process_Augment_data_validation(image, img_size):\n    aug_img = tf.numpy_function(func=aug_fn_test, inp=[image, img_size], Tout=tf.float32)\n    return aug_img\n\ndef preprocess_siamese(positive, negative,mode=\"train\"):\n    \"\"\"\n    Given the filenames corresponding to the three images, load and\n    preprocess them.\n    \"\"\"\n\n    return (\n        preprocess_image(positive,mode),\n        preprocess_image(negative,mode),\n    )","b953c6fa":"def contrastive_loss(y, preds, margin=1):\n\t# explicitly cast the true class label data type to the predicted\n\t# class label data type (otherwise we run the risk of having two\n\t# separate data types, causing TensorFlow to error out)\n\ty = tf.cast(y, preds.dtype)\n\t# calculate the contrastive loss between the true labels and\n\t# the predicted labels\n\tsquaredPreds = K.square(preds)\n\tsquaredMargin = K.square(K.maximum(margin - preds, 0))\n\tloss = K.mean(y * squaredPreds + (1 - y) * squaredMargin)\n\t# return the computed contrastive loss to the calling function\n\treturn loss","1d434ab2":"sigmoidTrain[\"symmetrylabel\"].values","570d2b7e":"def create_dataset(listFirstPictureIndex,listSecondPictureIndex,batchsize,labels,useType=\"train\"):\n    FirstIndex = listFirstPictureIndex\n    SecondIndex = listSecondPictureIndex\n    dataset1 = tf.data.Dataset.from_tensor_slices(FirstIndex)\n    dataset2 = tf.data.Dataset.from_tensor_slices(SecondIndex)\n    labelDatasets = tf.data.Dataset.from_tensor_slices(labels)\n    \n    dataset = tf.data.Dataset.zip((dataset1, dataset2))\n    dataset = dataset.map(lambda x,y:preprocess_siamese(x,y,useType))\n    \n    dataset = tf.data.Dataset.zip((dataset,labelDatasets))\n    dataset = dataset.batch(batchsize, drop_remainder=False).prefetch(8)\n    \n    return dataset","9e6fb4cd":"train[\"symmetrylabel\"].values","c9ac10ee":"train_ds = create_dataset(firstPictureIndex,secondPictureIndex,64,train[\"symmetrylabel\"].values,\"train\")\nval_ds = create_dataset(firstPictureIndexValidation,secondPictureIndexValidation,64,validation[\"symmetrylabel\"].values,\"validation\")","967f398a":"\"\"\"positive_images = firstPictureIndex \nnegative_images = secondPictureIndex\n\nimage_count = len(positive_images )\n\npositive_dataset = tf.data.Dataset.from_tensor_slices(positive_images)\nnegative_dataset = tf.data.Dataset.from_tensor_slices(negative_images)\nlabel_dataset = tf.data.Dataset.from_tensor_slices(sigmoidTrain[\"symmetrylabel\"].values)\n# To generate the list of negative images, let's randomize the list of\n# available images and concatenate them together.\n\n#negative_images = triplettrain[\"Negative\"].values\n#np.random.RandomState(seed=32).shuffle(negative_images)\n\n#negative_dataset = tf.data.Dataset.from_tensor_slices(negative_images)\n#negative_dataset = negative_dataset.shuffle(buffer_size=4096)\n\ndataset = tf.data.Dataset.zip((positive_dataset, negative_dataset))\n#dataset = dataset.shuffle(buffer_size=1024)\ndataset = dataset.map(preprocess_siamese)\n\ndataset = tf.data.Dataset.zip((dataset,label_dataset))\ndataset = dataset.shuffle(buffer_size=1024)\n\n# Let's now split our dataset in train and validation.\ntrain_dataset = dataset.take(round(image_count * 0.8))\nval_dataset = dataset.skip(round(image_count * 0.8))\n\ntrain_dataset = train_dataset.batch(32, drop_remainder=False)\ntrain_dataset = train_dataset.prefetch(8)\n\nval_dataset = val_dataset.batch(32, drop_remainder=False)\nval_dataset = val_dataset.prefetch(8)\"\"\"","ea731187":"for data in train_ds.take(3):\n  break","7928348c":"for data in val_ds.take(3):\n  break","9183a6fb":"def euclidean_distance(vectors):\n\t# unpack the vectors into separate lists\n\t(featsA, featsB) = vectors\n\t# compute the sum of squared distances between the vectors\n\tsumSquared = K.sum(K.square(featsA - featsB), axis=1,keepdims=True)\n\t# return the euclidean distance between the vectors\n\treturn K.sqrt(K.maximum(sumSquared, K.epsilon()))","dbdd7636":"input1 = tf.keras.Input(shape=(224,224,3))\ninput2 = tf.keras.Input(shape=(224,224,3))\neffinetB0 = EfficientNetB0(include_top=False,weights=\"imagenet\")(input1)\neffinetB0_siamese = EfficientNetB0(include_top=False,weights=\"imagenet\")(input2)\npooling1= tf.keras.layers.GlobalAveragePooling2D()(effinetB0)\npooling2 = tf.keras.layers.GlobalAveragePooling2D()(effinetB0_siamese)\ndistance = Lambda(euclidean_distance)([pooling1, pooling2])\n\nfirstEffinet = tf.keras.Model(\n    inputs=input1, outputs=pooling1,name = \"effinetB0\"\n)\ntwinEffinet = tf.keras.Model(\n    inputs = input2,outputs= pooling2,name=\"effinetB0_siamese\"\n)\n\ninputA = tf.keras.Input(shape=(224,224,3))\ninputB = tf.keras.Input(shape=(224,224,3))\nfeatureFirst = firstEffinet(inputA)\nfeatureSecond = twinEffinet(inputB)\n\ndistance = Lambda(euclidean_distance)([featureFirst , featureSecond ])\nsiamese_network = Model(inputs=[inputA,inputB], outputs=distance)","0316b121":"def contrastive_loss(y, preds, margin=1):\n\t# explicitly cast the true class label data type to the predicted\n\t# class label data type (otherwise we run the risk of having two\n\t# separate data types, causing TensorFlow to error out)\n\ty = tf.cast(y, preds.dtype)\n\t# calculate the contrastive loss between the true labels and\n\t# the predicted labels\n\tsquaredPreds = K.square(preds)\n\tsquaredMargin = K.square(K.maximum(margin - preds, 0))\n\tloss = K.mean(y * squaredPreds + (1 - y) * squaredMargin)\n\t# return the computed contrastive loss to the calling function\n\treturn loss","7dc8ba9d":"siamese_network.summary()","35ce6c7a":"siamese_network.compile(loss=contrastive_loss, optimizer=\"adam\")","f88adbea":"checkpoint_filepath = \".\/siamesemodel{epoch:02d}-validationloss{val_loss:.2f}.h5\"\nmodel_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n    filepath=checkpoint_filepath,\n    save_freq = \"epoch\",\n    save_weights_only=True,\n    monitor='val_loss',\n    save_best_only=False,\n    verbose = 1\n    )","b1ce95a5":"siamese_network.fit(train_ds, epochs=10, validation_data=val_ds,callbacks=[model_checkpoint_callback])","eb723208":"Add Data Augmentation"}}