{"cell_type":{"d258c65b":"code","166382e4":"code","13542e7f":"code","3837b59d":"code","ddb2c722":"code","4fd8fd0d":"code","5747d591":"code","bd2ca2a5":"code","95e90440":"code","9cd0d583":"code","9bf4b328":"code","bc682a6f":"code","13ca88d9":"code","d05c0c3f":"code","ebda93d7":"code","4738dbe7":"code","e93bf306":"code","354a40d7":"code","18fab706":"code","b5566073":"code","bd0b9899":"code","3de9c29c":"code","e658f89c":"code","116ebeca":"code","c8a570ec":"code","4e5a010d":"code","a3878c6d":"code","3e82f38f":"code","1f14ccb7":"code","3ffbef03":"code","6bc14b69":"code","dc1f0f4c":"code","fa6ba5be":"code","0969b965":"code","79018cbb":"code","db971a5f":"code","59667d98":"code","73f7c9a4":"code","996be068":"code","bb85d18d":"code","6fe123ff":"code","847a7d19":"code","581c5944":"code","889ab609":"code","97b15aa5":"code","09a3b608":"code","72c7118e":"code","0cbd0326":"code","81aaae02":"code","224ad1c7":"code","820a6582":"code","e2122040":"code","10949d9f":"code","c56b315e":"code","0d0db41a":"code","2a7a3ada":"code","c6a54d9f":"code","b2c2cb00":"code","491d6d74":"code","85ac415c":"code","2397e429":"code","2e015a49":"code","8451234e":"code","c2c72d3c":"code","a92a538b":"code","5b48fbc1":"code","8b750b0f":"code","c0b039ac":"code","06325770":"code","67309b65":"code","1e59e7d4":"code","91cd959d":"code","13643dfd":"code","58aeed2d":"code","80d7883b":"code","75cef7f1":"code","65cb9ee3":"code","90d9c801":"code","0f60d496":"code","1b90d303":"code","c16c84ea":"code","74f182f4":"code","b10e0e16":"code","4536d88e":"code","82afaf02":"code","ebb7aa95":"code","90ede61f":"code","8c9cc7ad":"code","4a0daf83":"code","46651aa6":"code","559f2ed4":"code","9d6b74fd":"code","91d2c940":"code","d41d9074":"code","65b3d0ea":"code","2e50ce9c":"code","1f29cd02":"code","2ce9c936":"code","7fa34b8a":"code","181ee89b":"code","f21c053f":"code","bba4d3c6":"code","ab86e12d":"code","ad92fc1c":"code","e05e3f16":"markdown","f4959f9c":"markdown","0b93abb9":"markdown","5aa4b40f":"markdown","b217276b":"markdown","8128fb7b":"markdown","58fba587":"markdown","e0461df5":"markdown","aa5afff4":"markdown"},"source":{"d258c65b":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt \n%matplotlib inline\n\nimport seaborn as sns","166382e4":"x = np.zeros((3, 3))","13542e7f":"import os\nprint(os.listdir(\"..\/input\"))","3837b59d":"data = pd.read_csv('..\/input\/PS_20174392719_1491204439457_log.csv')","ddb2c722":"data.type.value_counts()","4fd8fd0d":"import seaborn as sns ","5747d591":"data.isFraud.value_counts().plot.bar()","bd2ca2a5":"plt.ylabel('Amount')\nplt.xlabel('Type')\ndata.type.value_counts().plot.bar()","95e90440":"x = np.linspace(-10, 10, 1000)\ny = np.cos(x)","9cd0d583":"plt.plot(x, y)","9bf4b328":"data.isFraud.value_counts()","bc682a6f":"data[data.type == 'PAYMENT'].newbalanceOrig.head()","13ca88d9":"data[data.type == 'PAYMENT'].newbalanceOrig.mean()","d05c0c3f":"data.columns","ebda93d7":"data.describe()","4738dbe7":"data.head()","e93bf306":"data_frauded = data[data.isFraud == 1]","354a40d7":"data_fair = data[data.isFraud == 0]","18fab706":"data_frauded.newbalanceDest.median()","b5566073":"data_fair.newbalanceDest.median()","bd0b9899":"data.head()","3de9c29c":"(data_frauded.oldbalanceOrg - data_frauded.newbalanceOrig).mean()","e658f89c":"(data_fair.oldbalanceOrg - data_fair.newbalanceOrig).mean()","116ebeca":"import seaborn as sns","c8a570ec":"import matplotlib.pyplot as plt","4e5a010d":"plt.style.use('ggplot')","a3878c6d":"data.type.value_counts()","3e82f38f":"plt.ylabel('Amount')\nplt.xlabel('Type')\ndata_fraud.type.value_counts().plot.bar()\ndata.type.value_counts().plot.bar()","1f14ccb7":"data_fraud = data[data.isFraud == 1] ","3ffbef03":"# dustribution of types in fraud \ndata_fraud.type.value_counts().plot.bar()","6bc14b69":"data_fair = data[data.isFraud == 0] ","dc1f0f4c":"plt.ylabel('type')\ndata_fair.type.value_counts().plot.pie()","fa6ba5be":"data.isFraud.value_counts()","0969b965":"n_fraud = data.isFraud.value_counts()[1]\nn_fair = data.isFraud.value_counts()[0]\nn_fraud \/ (n_fraud + n_fair)","79018cbb":"data.columns","db971a5f":"data.oldbalanceOrg.min()","59667d98":"data.oldbalanceOrg.max()","73f7c9a4":"data.oldbalanceOrg.mean()","996be068":"data_frauded.oldbalanceOrg.isna().value_counts()","bb85d18d":"sns.distplot((data_fair.oldbalanceOrg), kde=False, bins=200)","6fe123ff":"f,ax=plt.subplots(1,2,figsize=(14,6))\nsns.distplot((data_frauded.oldbalanceOrg), kde=False, bins=200, ax=ax[0])\nsns.distplot((data_fair.oldbalanceOrg), kde=False, bins=200, ax=ax[1])\nax[0].set_title('Dist oldBalancOrig with Frauded person')\nax[1].set_title('Dist oldBalancOrig with Fair person')","847a7d19":"f,ax=plt.subplots(1,2,figsize=(14,6))\nsns.distplot((data_frauded.newbalanceOrig), kde=False, bins=200, ax=ax[0])\nsns.distplot((data_fair.newbalanceOrig), kde=False, bins=200, ax=ax[1])\nax[0].set_title('Dist newBalancOrig with Frauded person')\nax[1].set_title('Dist newBalancOrig with Fair person')\nplt.savefig('plot1')","581c5944":"sns.distplot((data_fair.newbalanceOrig[data_fair.newbalanceOrig < 1000000]), kde=False, bins=200, ax=ax[1])\nplt.show()","889ab609":"data_fair.newbalanceOrig[data_fair.newbalanceOrig < 1000000][data_fair.newbalanceOrig > 100000].head()","97b15aa5":"f,ax=plt.subplots(1,2,figsize=(14,6))\nsns.distplot((data_fraud.newbalanceOrig[data_fraud.newbalanceOrig < 1000000]), kde=False, bins=200, ax=ax[0])\nsns.distplot((data_fair.newbalanceOrig[data_fair.newbalanceOrig < 700000][data_fair.newbalanceOrig > 10000]), kde=False, bins=200, ax=ax[1])\nax[0].set_title('Dist oldBalancOrig with Frauded person')\nax[1].set_title('Dist oldBalancOrig with Fair person')","09a3b608":"data.head()","72c7118e":"from  sklearn.neighbors import KNeighborsClassifier\n\nclf = KNeighborsClassifier(n_neighbors=10, ) #metric='manhattan')","0cbd0326":"y = data.isFraud.values","81aaae02":"X = data.drop(labels=['type', 'nameOrig', 'nameDest', 'isFraud'], axis=1)","224ad1c7":"X.head()","820a6582":"y","e2122040":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score","10949d9f":"X_train, X_test, y_train, y_test = train_test_split(X[:300000], y[:300000], test_size=0.3)\nclf = KNeighborsClassifier(n_neighbors=10,) #metric='manhattan')\nclf.fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)\nroc_auc_score(y_test, y_pred[:, 1])","c56b315e":"payment : 1\ntransfer: 2\npayment !< transfer\n1 < 2\n\nonehot encoding \npayment : (1, 0, 0, 0, 0)\ntransfer : (0, 1, 0, 0, 0)","0d0db41a":"data.columns","2a7a3ada":"data.shape","c6a54d9f":"data.nameOrig.nunique()","b2c2cb00":"data = pd.concat([pd.get_dummies(data.type, ), data], axis=1)","491d6d74":"data.head()","85ac415c":"X = data.drop(labels=['type', 'nameOrig', 'nameDest', 'isFraud'], axis=1)","2397e429":"X_train, X_test, y_train, y_test = train_test_split(X[:300000], y[:300000],\n                                                    test_size=0.3, \n                                                    random_state=42,)","2e015a49":"clf = KNeighborsClassifier(n_neighbors=19, metric='manhattan')\nclf.fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_pred[:, 1]))","8451234e":"res = []\nfor i in range(1, 25, 1):\n    clf = KNeighborsClassifier(n_neighbors=i, metric='manhattan')\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict_proba(X_test)\n    score = roc_auc_score(y_test, y_pred[:, 1])\n    res.append(score)\n    print(score)","c2c72d3c":"plt.xticks(range(1, 25, 2))\nplt.xlabel('N neighborhoods')\nplt.ylabel('auc roc score')\nplt.legend()\nplt.plot(res)","a92a538b":"clf = KNeighborsClassifier(n_neighbors=19, metric='manhattan')\nclf.fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_pred[:, 1]))","5b48fbc1":"from sklearn import metrics","8b750b0f":"fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred[:, 1])\nauc = metrics.roc_auc_score(y_test, y_pred[:, 1])\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","c0b039ac":"from sklearn.ensemble import RandomForestClassifier","06325770":"clf = RandomForestClassifier(n_estimators=50)\nclf.fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_pred[:, 1]))\n\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred[:, 1])\nauc = metrics.roc_auc_score(y_test, y_pred[:, 1])\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","67309b65":"from sklearn.preprocessing import scale, StandardScaler","1e59e7d4":"# yet another normalization\n#X_norm = scale(X)\n#\nscl = StandardScaler()\nX_norm = scl.fit_transform(X)","91cd959d":"X_train, X_test, y_train, y_test = train_test_split(X_norm[:300000], y[:300000],\n                                                    test_size=0.3, \n                                                    random_state=42,)","13643dfd":"clf = RandomForestClassifier(n_estimators=50)\nclf.fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_pred[:, 1]))\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred[:, 1])\nauc = metrics.roc_auc_score(y_test, y_pred[:, 1])\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","58aeed2d":"from sklearn.decomposition import PCA","80d7883b":"X.head()","75cef7f1":"X.shape","65cb9ee3":"pca = PCA(n_components=7)","90d9c801":"X_pca = pca.fit_transform(X)","0f60d496":"X_pca.shape","1b90d303":"X_train, X_test, y_train, y_test = train_test_split(X_pca[:300000], y[:300000],\n                                                    test_size=0.3, \n                                                    random_state=42,)\n\nclf = RandomForestClassifier(n_estimators=50)\nclf.fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_pred[:, 1]))\n\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred[:, 1])\nauc = metrics.roc_auc_score(y_test, y_pred[:, 1])\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","c16c84ea":"del X_pca","74f182f4":"from sklearn.cluster import KMeans","b10e0e16":"X_train, X_test, y_train, y_test = train_test_split(X_pca[:300000], y[:300000],\n                                                    test_size=0.3, \n                                                    random_state=42,)","4536d88e":"kmeans = KMeans(n_clusters=2)","82afaf02":"kmeans.fit(X_train)","ebb7aa95":"y_pred = kmeans.transform(X_test)\nnorm_c = 1 \/ y_pred.sum(axis=1)\ny_pred[:, 1] *= norm_c\ny_pred[:, 0] *= norm_c","90ede61f":"print(roc_auc_score(y_test, y_pred[:, 0]))\n\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred[:, 0])\nauc = metrics.roc_auc_score(y_test, y_pred[:, 0])\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","8c9cc7ad":"import xgboost","4a0daf83":"clf = xgboost.XGBClassifier(max_depth=3,\n                            n_estimators=50,)","46651aa6":"X_train, X_test, y_train, y_test = train_test_split(X.values[:300000], y[:300000],\n                                                    test_size=0.3, \n                                                    random_state=42,)\n\nclf = xgboost.XGBClassifier(max_depth=5, \n                            n_estimators=100, n_jobs=-1, )\nclf.fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)\nprint(roc_auc_score(y_test, y_pred[:, 1]))\n\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred[:, 1])\nauc = metrics.roc_auc_score(y_test, y_pred[:, 1])\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","559f2ed4":"X_pca[:50, :2].shape","9d6b74fd":"sizes = y[:5000]\nsizes[sizes == 1] = 4\nsizes[sizes == 0] = 1","91d2c940":"plt.scatter(x= X_pca[:5000, 6], y=X_pca[:5000, 3], c=y[:5000], cmap='viridis', s=sizes)","d41d9074":"plt.scatter(x= X_pca[:5000, 0][y[:5000] == 1], y=X_pca[:5000, 1][y[:5000] == 1], cmap='viridis')","65b3d0ea":"#T-NSE","2e50ce9c":"from sklearn.manifold import TSNE","1f29cd02":"X_tnse = TSNE(n_components=2).fit_transform(X[:5000])","2ce9c936":"sizes = y[:5000]\nsizes[sizes == 1] = 4\nsizes[sizes == 0] = 1","7fa34b8a":"X.head()","181ee89b":"X.shape","f21c053f":"12 -> 2","bba4d3c6":"plt.scatter(x= X_tnse[:1000, 0], y=X_tnse[:1000, 1], c=y[:1000], cmap='viridis', s=sizes[:500]*20)","ab86e12d":"X[:2].values","ad92fc1c":"X_tnse[:10]","e05e3f16":"## Unsupervised learning (PCA)","f4959f9c":"## Unsuperviesed learning (KMeans)","0b93abb9":"## Types Matter!","5aa4b40f":"## Let's use types ","b217276b":"## Plotting graph of sin","8128fb7b":"## EDA (Explaratory data analysis)","58fba587":"## Plot class balance ","e0461df5":"## Normalisation tricks","aa5afff4":"## Turn on custom styles "}}