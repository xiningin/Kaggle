{"cell_type":{"3f534d52":"code","715c3699":"code","82bb3468":"code","2f08f21e":"code","f8febccd":"code","720375b0":"code","f8cbba2f":"code","4da1a9e6":"code","7e2a80ba":"code","7459e59a":"code","6f58ad5e":"code","984c3933":"code","2900f1d3":"code","4d248de6":"code","7b39ecb1":"code","163f29bc":"code","27c9765a":"code","4ade1eeb":"markdown","5789f211":"markdown","89649a8b":"markdown","407ec666":"markdown","72bbef8d":"markdown","d9252336":"markdown","d3641876":"markdown","c78696e1":"markdown","7201c9af":"markdown","9c9bcf9f":"markdown","4ce9bcf9":"markdown","23abfb0f":"markdown","e9397261":"markdown","8bee5771":"markdown"},"source":{"3f534d52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","715c3699":"# input dataset\ndata = pd.read_csv(\"\/kaggle\/input\/salary-data-simple-linear-regression\/Salary_Data.csv\")\ndata.head()      #shows first 5 rows of the dataset","82bb3468":"import matplotlib.pyplot as plt\nplt.scatter(data[\"YearsExperience\"], data[\"Salary\"])","2f08f21e":"#Plotting the Correlation Matrix\nimport seaborn as sn\nprint(data.corr())\nsn.heatmap(data.corr(), annot=True)","f8febccd":"# MSE\ndef MSE(actual, predicted):\n    return  (((actual - predicted) ** 2).mean())\n\n#RMSE\ndef RMSE(MSE):\n    return np.sqrt(MSE)\n","720375b0":"x = data.iloc[:, :-1]   # YearsExperience = x\ny = data.iloc[:, [-1]]  # Salary = y\n\n#splitting in 50% train set and 50%test set\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,train_size = 0.50,test_size = 0.50) \n\n#training\nfrom sklearn import linear_model\nregression = linear_model.LinearRegression()\nregression.fit(x_train,y_train)\ny_predicted = regression.predict(x_test)\n\n","f8cbba2f":"print(\"Using my own functions:\")\nprint(\"mse= \" , MSE(y_test,y_predicted))\nprint(\"rmse= \" , RMSE(MSE(y_test, y_predicted)))","4da1a9e6":"from sklearn.metrics import mean_squared_error\nmse_sk= mean_squared_error(y_test, y_predicted)\nprint(\"Using sklearn matrices:\")\nprint(\"mse= \", mse_sk)\nprint(\"rmse= \", RMSE(mse_sk))","7e2a80ba":"plt.scatter(x_test, y_test,  color='red')\nplt.plot(x_test, regression.predict(x_test))","7459e59a":"x = data.iloc[:, :-1]   # YearsExperience = x\ny = data.iloc[:, [-1]]  # Salary = y\n\n#splitting in 70% train set and 30%test set\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,train_size = 0.70,test_size = 0.30) \n\n#training\nfrom sklearn import linear_model\nregression = linear_model.LinearRegression()\nregression.fit(x_train,y_train)\ny_predicted = regression.predict(x_test)\n","6f58ad5e":"print(\"Using my own functions:\")\nprint(\"mse= \" , MSE(y_test,y_predicted))\nprint(\"rmse= \" , RMSE(MSE(y_test, y_predicted)))","984c3933":"from sklearn.metrics import mean_squared_error\nmse_sk= mean_squared_error(y_test, y_predicted)\nprint(\"Using sklearn matrices:\")\nprint(\"mse= \", mse_sk)\nprint(\"rmse= \", RMSE(mse_sk))","2900f1d3":"plt.scatter(x_test, y_test,  color='red')\nplt.plot(x_test, regression.predict(x_test))","4d248de6":"x = data.iloc[:, :-1]   # YearsExperience = x\ny = data.iloc[:, [-1]]  # Salary = y\n\n#splitting in 80% train set and 20%test set\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,train_size = 0.80,test_size = 0.20) \n\n#training\nfrom sklearn import linear_model\nregression = linear_model.LinearRegression()\nregression.fit(x_train,y_train)\ny_predicted = regression.predict(x_test)","7b39ecb1":"print(\"Using my own functions:\")\nprint(\"mse= \" , MSE(y_test,y_predicted))\nprint(\"rmse= \" , RMSE(MSE(y_test, y_predicted)))","163f29bc":"from sklearn.metrics import mean_squared_error\nmse_sk= mean_squared_error(y_test, y_predicted)\nprint(\"Using sklearn matrices:\")\nprint(\"mse= \", mse_sk)\nprint(\"rmse= \", RMSE(mse_sk))","27c9765a":"plt.scatter(x_test, y_test,  color='red')\nplt.plot(x_test, regression.predict(x_test))","4ade1eeb":"**Plotting Graph**","5789f211":"**Applying my own MSE and RMSE functions**","89649a8b":"**Applying my own MSE and RMSE functions**","407ec666":"**Plotting Graph**","72bbef8d":"# ****MSE and RMSE Functions****","d9252336":"**Applying my own MSE and RMSE functions**","d3641876":"# # **(b) 70% train, 30% test**","c78696e1":"# ****DATA VISUALIZATION****","7201c9af":"# # **(a) 50% train, 50% test**","9c9bcf9f":"**Crosschecking using sklearm matrices**","4ce9bcf9":"# # **(c) 80% train, 20% test**","23abfb0f":"**Crosschecking using sklearm matrices**","e9397261":"**Crosschecking using sklearm matrices**","8bee5771":"**Plotting Graph**"}}