{"cell_type":{"1b8de61a":"code","668dc759":"code","32b18d8a":"code","2147b83e":"code","a1ab2fa7":"code","f95fe95f":"code","127ae61b":"code","8d51833f":"code","973b7392":"code","e3b12957":"code","1d32fe9d":"code","1bf2db44":"code","8b039848":"code","604fb43c":"code","7c162584":"code","2b726166":"code","3ecd4819":"code","4fd52c39":"code","efb9b716":"code","a8df9153":"code","fe2d90fc":"code","92253883":"code","1d951681":"code","3b919c1e":"code","6b4ffee5":"code","2b3c9fb0":"code","7e4dd2b6":"code","96d5cccb":"code","060ac5c7":"code","131aa953":"markdown","7eba2641":"markdown","3a04efe4":"markdown","90824762":"markdown","d8b0a8ee":"markdown","211b292f":"markdown","98c394b7":"markdown","4fd72df9":"markdown","b825f69e":"markdown","5e6464b7":"markdown","9b3e811a":"markdown","2eeb7329":"markdown"},"source":{"1b8de61a":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nstyle.use('fivethirtyeight')\nsns.set_style('whitegrid')\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","668dc759":"train1 = pd.read_csv(\"\/kaggle\/input\/web-traffic-time-series-forecasting\/train_1.csv.zip\", parse_dates=True)","32b18d8a":"train1.head()","2147b83e":"train1.isna().sum()","a1ab2fa7":"train_pivot = train1.melt(id_vars='Page', var_name='Date', value_name='Visits')","f95fe95f":"train_pivot['Date'] = pd.to_datetime(train_pivot['Date'])","127ae61b":"\ntrain_pivot['Year'] = train_pivot['Date'].dt.year\ntrain_pivot['Month'] = train_pivot['Date'].dt.month\ntrain_pivot['Day'] = train_pivot['Date'].dt.day","8d51833f":"def visualize_visits(df, groupby, figsize, title, **kwargs):\n    plt.figure(figsize=figsize)\n    group_by = df[[groupby, 'Visits', 'Page']].groupby([groupby])['Visits'].mean()\n    plt.plot(group_by, **kwargs)\n    plt.title(title)\n    plt.show()","973b7392":"visualize_visits(train_pivot, 'Date', (50, 10), 'Visits by Date')","e3b12957":"visualize_visits(train_pivot, 'Month', (20, 6), title='Visits by Month')","1d32fe9d":"visualize_visits(train_pivot, 'Day', (20, 6), 'Visits by Day')","1bf2db44":"page_visits = train_pivot[['Page', 'Visits']].groupby('Page')['Visits'].sum().sort_values(ascending=False)\npage_visit = pd.DataFrame({'Page':page_visits.index, 'Visits':list(page_visits)})","8b039848":"name = []\nfor page in page_visit['Page']:\n    split = page.split('.')\n    name.append(split[-3])","604fb43c":"page_visit['Name'] = name\npage_visit['Language'] = page_visit['Name'].str[-2:]","7c162584":"plt.figure(figsize=(10, 7))\ntop=20\ntop_visit = page_visit.iloc[:top]\nsns.barplot(data=top_visit, y='Page', x='Visits');","2b726166":"name = []\nproject = []\naccess_agent = []\n\nfor page in train1['Page']:\n    split = page.split('.')\n    name.append(split[-3])\n    project.append(split[-2])\n    access_agent.append(split[-1])","3ecd4819":"train1['Name'] = name\ntrain1['Project'] = project\ntrain1['access_agent'] = access_agent\ntrain1['Language'] = train1['Name'].str[-2:]","4fd52c39":"sns.countplot(train1['Project']);","efb9b716":"plt.figure(figsize=(10, 5))\nsns.countplot(train1['access_agent']);","a8df9153":"sns.countplot(train1['Language']);","fe2d90fc":"remove_col = ['Language', 'Name', 'Project', 'access_agent']\n\n# List of languages \nlanguages = ['es', 'zh', 'fr', 'en', 'ns', 'ru', 'ww', 'de', 'ja']\n\ncolor = ['b', 'r', 'c', 'g', 'm', 'y', 'k', 'teal', 'lime']\nc = 0\n\nfor lang in languages:\n    \n    # create df\n    df = train1[train1['Language'] == lang]\n    \n    # Drop the columns which are not required\n    pv = df.drop(remove_col, axis=1)\n    \n    # Pivot the data for visualization\n    pivot = pv.melt(id_vars='Page', var_name='Date', value_name='Visits')\n    pivot['Date'] = pd.to_datetime(pivot['Date'])\n    \n    # Call the function for visualization\n    visualize_visits(pivot, 'Date', (50, 8), title=f'Visits by Date, Language: {lang}', color=color[c])\n    c += 1","92253883":"# Plot the 10 most visited pages according to languages\nplt.figure(figsize=(10, 45))\n\n# Top pages to show\ntop = 10\nc = 1\n\nfor lang in languages:\n    \n    # create df\n    df_lang = train1[train1['Language'] == lang]\n    \n    # Drop the columns which are not required\n    pv = df_lang.drop(remove_col, axis=1)\n    \n    # Pivot the data for visualization\n    pivot = pv.melt(id_vars='Page', var_name='Date', value_name='Visits')\n    pivot['Date'] = pd.to_datetime(pivot['Date'])\n    \n    # Group the page and sum their visits\n    visit_lang = pivot[['Page', 'Visits']].groupby('Page')['Visits'].sum().sort_values(ascending=False)\n    visit_lang_df = pd.DataFrame({'Page':visit_lang.index, 'Visits':list(visit_lang)})\n    \n    # Plot the top visits\n    top_visit = visit_lang_df.iloc[:top]\n    plt.subplot(9, 1, c)\n    title = f'Top {top} visits, Language: {lang}'\n    sns.barplot(data=top_visit, y='Page', x='Visits').set_title(title);\n    c += 1","1d951681":"plt.figure(figsize=(10, 20))\ntop = 20\nc = 1\n\nfor lang in ['en', 'ru']:\n    \n    df = train1[train1['Language'] == lang]\n    \n    # Drop the columns which are not required\n    pv = df.drop(remove_col, axis=1)\n    \n    # Pivot the data for visualization\n    pivot = pv.melt(id_vars='Page', var_name='Date', value_name='Visits')\n    pivot = pivot[(pivot['Date'] > '2016-07-01') & (pivot['Date'] < '2016-09-01')]\n    pivot['Date'] = pd.to_datetime(pivot['Date'])\n    \n    visualize_visits(pivot, 'Date', (50, 8), title=f'Visits by Date, Language: {lang}')","3b919c1e":"# Plot the 10 most visited pages according to languages\nplt.figure(figsize=(10, 15))\n\n# Top pages to show\ntop = 20\nc = 1\n\nfor lang in ['en', 'ru']:\n    \n    # create df\n    df_lang = train1[train1['Language'] == lang]\n    \n    # Drop the columns which are not required\n    pv = df_lang.drop(remove_col, axis=1)\n    \n    # Pivot the data for visualization\n    pivot = pv.melt(id_vars='Page', var_name='Date', value_name='Visits')\n    pivot = pivot[(pivot['Date'] > '2016-07-15') & (pivot['Date'] < '2016-08-15')]\n    pivot['Date'] = pd.to_datetime(pivot['Date'])\n    \n    # Group the page and sum their visits\n    visit_lang = pivot[['Page', 'Visits']].groupby('Page')['Visits'].sum().sort_values(ascending=False)\n    visit_lang_df = pd.DataFrame({'Page':visit_lang.index, 'Visits':list(visit_lang)})\n    \n    # Plot the top visits\n    top_visit = visit_lang_df.iloc[:top]\n    plt.subplot(2, 1, c)\n    title = f'Top {top} visits, Language: {lang}'\n    sns.barplot(data=top_visit, y='Page', x='Visits').set_title(title);\n    c += 1","6b4ffee5":"from statsmodels.graphics.tsaplots import plot_acf","2b3c9fb0":"acf = train_pivot[['Date', 'Visits']].groupby('Date')['Visits'].mean()","7e4dd2b6":"plot_acf(acf, lags=20)","96d5cccb":"from statsmodels.graphics.tsaplots import plot_pacf","060ac5c7":"plot_pacf(acf, lags=20)","131aa953":"## Partial Correlation","7eba2641":"# Web traffic time series forecast","3a04efe4":"## Visualize the visits by language","90824762":"* From the first figure we can see that, there was sudden increase in number of visits from the date 2016-07 to 2016-09 and the similar increase in visits was also found in figure where the language was *en* and *ru*. \n","d8b0a8ee":"Observations:\n* ACF plot - There is a geometric decrease in lags.\n* PACF plot - There is a drop in correlation after 2 lags.","211b292f":"## Data Visualization","98c394b7":"* For exactly 1 month from the date 2016-07-15 to 2016-08-15 the visits were high, visualizing the top visited pages during this interval","4fd72df9":"## Auto correlation","b825f69e":"## Visualize the sudden increase in visits","5e6464b7":"## Visualize Access agent, Language and project","9b3e811a":"## Page with most Visits","2eeb7329":"* After converting the russian webpage to english, we get that the visits were high due to summer olympics and suicide squad movie. Apart from the visits of homepage these two were common pages for both the language and therefore, this is the reason for sudden increase in visits."}}