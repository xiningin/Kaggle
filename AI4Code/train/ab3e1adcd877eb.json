{"cell_type":{"6f2c0445":"code","6a3d00ea":"code","3b9fdf32":"code","095b07b6":"code","ff1bf425":"code","b2700d98":"code","dfac0ab8":"code","3bcf447f":"code","19cfb825":"code","015bbcc0":"code","a1a95bf5":"code","87a5ddc8":"code","294d5ff4":"code","34545de2":"code","fda0846b":"code","cf914357":"code","7d272697":"code","419074b3":"code","dc0929b7":"code","b4f4aff5":"code","43d807fa":"code","9c50fab4":"code","d24f1ead":"code","74c74510":"code","f7705a90":"code","042dfe26":"code","c35a3215":"code","c6f54a36":"code","6ccb170d":"code","cc0b60b0":"code","9b779aa3":"code","9ab68749":"code","6b6a913e":"code","f88be443":"markdown","d50dc456":"markdown","f35544df":"markdown","791bd02f":"markdown","93dff4d8":"markdown","97706dbb":"markdown"},"source":{"6f2c0445":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a3d00ea":"import seaborn as sns\nimport matplotlib.pyplot as pt\n","3b9fdf32":"data = pd.read_csv(\"\/kaggle\/input\/mushrooms\/mushrooms.csv\")","095b07b6":"data.head()","ff1bf425":"data.info()","b2700d98":"data.isnull().sum()","dfac0ab8":"print(\"Number of Unique values in each columns :- \")\nfor col in data.columns:\n    print(col ,\": \", len(data[col].unique()))","3bcf447f":"for col in data.columns:\n    print(col, \": \", data[col].value_counts())","19cfb825":"data.shape","015bbcc0":"encoded = pd.get_dummies(data, columns = data.columns[1:], drop_first = True)","a1a95bf5":"encoded.head()","87a5ddc8":"encoded['class'] = encoded['class'].map({'p':1, 'e':0})","294d5ff4":"sns.heatmap(encoded.corr())","34545de2":"def count_plot(col_name):\n    color = np.array(['#808080',\n    '#000000', \n    '#FF0000',\n    '#800000', \n    '#FFFF00',\n    '#808000', \n    '#00FF00', \n    '#008000',\n    '#00FFFF', \n    '#008080',\n    '#0000FF',\n    '#000080', \n    '#FF00FF', \n    '#800080'])\n    length_col_counts = len(data[col_name].value_counts())\n    rand_index = np.random.randint(0, len(color), length_col_counts)\n    col_counts = data[col_name].value_counts()\n    x_label = col_counts.index\n    pt.title(str(col_name)+\" Size counts\")\n    pt.xlabel(\"Types of \"+str(col_name))\n    pt.ylabel(\"Counts\")\n    pt.bar(x_label, col_counts, color = color[rand_index])\n    pt.show()\n    return","fda0846b":"for col in data.columns:\n    count_plot(col)","cf914357":"def compare_plot(x, hue = 'class'):\n    ax = sns.countplot(data = data, x = x, hue = hue)\n    return ax\n    \nfor col in data.columns[1:]:\n    ax = compare_plot(col)\n    pt.show(ax)","7d272697":"x = encoded.iloc[:, 1:].values\ny = encoded.iloc[:, 0].values","419074b3":"from sklearn.model_selection import train_test_split\nx_train, x_valid, y_train, y_valid = train_test_split(x, y, \n                                                     test_size = 0.33, \n                                                     random_state = 0)","dc0929b7":"def score(model, y_pred):\n    from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score\n    cm = confusion_matrix(y_valid, y_pred)\n    ac = accuracy_score(y_valid, y_pred)\n    prec = precision_score(y_valid, y_pred)\n    rec = recall_score(y_valid, y_pred)\n    f1 = f1_score(y_valid, y_pred)\n    \n    return cm, ac, prec, rec, f1","b4f4aff5":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(C = 1.0, \n                                solver = 'lbfgs', \n                                random_state=0, penalty = 'l2')\nclassifier.fit(x_train, y_train)","43d807fa":"y_pred = classifier.predict(x_valid)","9c50fab4":"score(classifier, y_pred)","d24f1ead":"from sklearn.ensemble import RandomForestClassifier\nclassifier_forest = RandomForestClassifier(n_estimators = 100, \n                                          criterion = 'gini' , \n                                          n_jobs = -1, \n                                          random_state = 0)","74c74510":"classifier_forest.fit(x_train, y_train)","f7705a90":"y_pred2 = classifier_forest.predict(x_valid)","042dfe26":"score(classifier_forest, y_pred2)","c35a3215":"import pickle\nfile_name = 'model_IDEAL.sav'\nsaved_model = pickle.dump(classifier_forest, open(file_name, 'wb'))","c6f54a36":"probs = classifier_forest.predict_proba(x_valid)\nprobs = probs[:, 1]\nns_probs = [0 for _ in range(len(y_valid))]\n\n","6ccb170d":"from sklearn.metrics import roc_curve\nns_fpr, ns_tpr, _ = roc_curve(y_valid, ns_probs)\nlr_fpr, lr_tpr, _ = roc_curve(y_valid, probs)\n","cc0b60b0":"pt.plot(ns_fpr, ns_tpr, linestyle = '--', c = 'blue', label = 'mid_mark')\npt.plot(lr_fpr, lr_tpr, c = 'orange', label = 'random_forest')\npt.xlabel(\"False Positive Rate\")\npt.ylabel(\"True Positive Rate\")\npt.title('Roc_Auc Curve')\npt.legend()\npt.show()","9b779aa3":"log_probs = classifier.predict_proba(x_valid)\nlog_probs = log_probs[:, 1]\n\nns_probs2 = [0 for _ in range(len(x_valid))]\n\n","9ab68749":"ns_fpr_log, ns_tpr_log, _ = roc_curve(y_valid, ns_probs2)\nlr_fpr_log, lr_tpr_log, _ = roc_curve(y_valid, log_probs)","6b6a913e":"pt.plot(ns_fpr_log, ns_tpr_log, linestyle = '--', c = 'violet', label = 'mid_mark')\npt.plot(lr_fpr_log, lr_tpr_log, c = 'indigo', label = 'logistic')\npt.xlabel(\"False Positive Rate\")\npt.ylabel(\"True Positive Rate\")\npt.title('Roc_Auc Curve for Logistic Regression')\npt.legend()\npt.show()","f88be443":"Above Metrics are state of art model evaluation. Amazing Predicitons","d50dc456":"Creating ROC_AUC Curve","f35544df":"Both have same benchmark curve in case of Mushroom Classification","791bd02f":"Amazing CurvE I got to see here with the random forest classifier","93dff4d8":"You can use my model to make a flask or django based web app to predict mushroom category\n1:- as Poisonous\n0:- Edible\n    \n    \nEarlier the Mortality Rate because of Posioning was 60-70% but it has now reduced to 20%.\nBut still OUT OF 100,  20 people die because of EATING Posionous Mushrooms which we can overcome \nby using this Mushroom classifier.\n\nThank You..\n\nDo Share and Like this Notebook.\n\n\nAnd Please do visit Github for many other models and guides.\n\nLink :- https:\/\/www.github.com\/hitechgaurav","97706dbb":"Lets check this out with logistics regression classifier how it behaves"}}