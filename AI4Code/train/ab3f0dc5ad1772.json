{"cell_type":{"09b3121c":"code","bf9b8f79":"code","5e73e92d":"code","aeb4cb3f":"code","079dc13f":"code","a5becb0f":"code","40271018":"code","2f191641":"code","3dc6f720":"code","448e75f2":"code","d2025199":"code","e4ec5e5c":"code","47e6fad6":"code","c4fe781a":"code","201d70d2":"code","6787b65d":"code","4ca07cf4":"code","304952ef":"code","77b883dc":"code","b4f3e615":"code","5c213690":"code","4a234cbe":"markdown","e55ab0fc":"markdown","b716af2c":"markdown"},"source":{"09b3121c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf9b8f79":"df=pd.read_csv('\/kaggle\/input\/tv-shows-on-netflix-prime-video-hulu-and-disney\/tv_shows.csv')\n#Exploratory data analysis\nprint(df.shape)","5e73e92d":"print(df.head())","aeb4cb3f":"print(df.columns)\n","079dc13f":"print(df.info())","a5becb0f":"#Age contains a lot of missing values , replacing those values by 'all'\ndf.Age.unique()\ndf.Age.value_counts(dropna=False)\ndf.Age=df.Age.replace(np.nan,\"all\")","40271018":"df.Age.value_counts(dropna=False)","2f191641":"#Again now for the imdb ratings in the dataset\ndf.IMDb.unique()\ndf.IMDb.value_counts(dropna=False)\ndf.IMDb=df.IMDb.replace(np.nan,\"0\")","3dc6f720":"df.IMDb.isna().sum()\n#This implies there are no null values present in the column of the dataset.","448e75f2":"df[\"Rotten Tomatoes\"].unique()\n#Since the rotten tomatoes ratings contain a lot of missing values so remove this column from the dataset\ndf=df.drop(\"Rotten Tomatoes\",axis=1)\ndf.columns\ndf=df.drop(\"Unnamed: 0\",axis=1)\n#As type also contains all the rows containing ones , so removing type from the data\ndf=df.drop(\"type\",axis=1)","d2025199":"#Now checking the data types of the columns , we get\ndf.dtypes","e4ec5e5c":"#Here IMDb ratings are object type but they should be numeric\ndf.IMDb=pd.to_numeric(df.IMDb)","47e6fad6":"df2=pd.melt(df,id_vars=[ 'Title', 'Year', 'Age', 'IMDb'],var_name=\"All platforms\")\ndf2=df2[df2[\"value\"]==1]\ndf2=df2.drop(\"value\",axis=1)","c4fe781a":"df2[\"All platforms\"].value_counts()\nfig = plt.figure(figsize=(12, 12))\nsns.countplot(x='All platforms',data=df2)\nplt.title(\"Number of shows on each platform\")\nplt.show()","201d70d2":"#This tells us the show is available on which platforms\nstr=input(\"Enter the name of the show: \").lower()\nindex=[]\nfor i in range(df2.shape[0]):\n    if df2.iloc[i,0].lower()==str:\n        index.append(i)\nif len(index)==0:\n    print(\"The show is not available on Netfix, Prime Video ,Hulu and Disney+.\")\nelse:\n    for i in range(len(index)):    \n        print(\"The show is available on {}\".format(df2.iloc[index[i],4]))","6787b65d":"#IMDb rating ,year of the show\nstr=input(\"Enter the name of the show: \").lower()\nindex=[]\nfor i in range(df2.shape[0]):\n    if df2.iloc[i,0].lower()==str:\n        index.append(i)\nif len(index)==0:\n    print(\"The show is not available on Netfix, Prime Video ,Hulu and Disney+.\")\nelse:  \n        print(\"The IMDb rating of {} is {}. The show was released in the year {}.\".format(str,df2.iloc[index[0],3],df2.iloc[index[0],1]))","4ca07cf4":"#Analysis of age groups vs streaming platform\nsns.set_style(\"darkgrid\")\nfig = plt.figure(figsize=(12, 12))\nsns.countplot(x=\"All platforms\",hue=\"Age\",data=df2)\nplt.title(\"Analysis of age groups vs streaming platform\")\nplt.ylabel(\"Number of shows\")\nplt.xlabel(\"Platforms\")\nplt.show()","304952ef":"#Comparing the ratings of the shows\nfig = plt.figure(figsize=(12, 12))\ny=sns.countplot(x=\"IMDb\",data=df2)\nplt.xticks(rotation=-45,fontsize=6)\nplt.xlabel(\"Ratings\")\nplt.ylabel(\"Number of shows\")\nplt.title(\"Comparing the ratings of the shows\")\nplt.show()","77b883dc":"#Number of platforms a show is present on\nfrequency_of_shows=df2.Title.value_counts()\nfrequency_of_shows=pd.DataFrame(frequency_of_shows)\nfig = plt.figure(figsize=(12, 12))\nsns.countplot(x=\"Title\",data=frequency_of_shows)\nplt.title(\"Number of platforms a show is present on\")\nplt.xlabel(\"Number of platforms\")\nplt.ylabel(\"Number of shows\")\nplt.show()","b4f3e615":"#Number of shows in a various years\nfor i in range(frequency_of_shows.shape[0]):\n    frequency_of_shows.loc[frequency_of_shows.index[i],\"Years\"]=df2.loc[df2[df2.Title==frequency_of_shows.index[i]].index[0],\"Year\"]\nfrequency_of_shows.Years=frequency_of_shows.Years.astype(np.int64)\nfig = plt.figure(figsize=(12, 12))\nsns.countplot(x=\"Years\",data=frequency_of_shows)\nplt.xticks(rotation=-45,fontsize=6)\nplt.title(\"Number of shows in a previous years\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of shows\")\nplt.show()","5c213690":"#Thank You","4a234cbe":"#Tidying the data\n#Now melting the rows making it easier for data analysis\n#These are the total shows on each platform\n#df.Netflix.value_counts() 1931\n#df.Hulu.value_counts()  1754\n#df[\"Prime Video\"].value_counts() 2144\n#df[\"Disney+\"].value_counts()   180\n#Total - 6009","e55ab0fc":"#Three columns containing the missing values are : Age, IMDb and Rotten Tomatoes","b716af2c":"This is the number of shows according to this dataset on various platforms"}}