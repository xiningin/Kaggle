{"cell_type":{"5ac68e91":"code","5e063c12":"code","e543a691":"code","3ae4f306":"code","94dc3fa4":"code","d2447a52":"code","10692bc4":"code","d3862c35":"code","e5c2e71e":"code","47808b8b":"code","fac81291":"code","27414273":"code","5e8e4c70":"code","b4db45b2":"code","4d7b0f96":"code","1e9babe8":"code","1458a9c6":"code","31825ccc":"code","e1d7a155":"code","23cd43d7":"code","6e0715ab":"code","b5631d19":"code","42b2b61e":"code","8c265ae4":"markdown","01c8c6e1":"markdown","c0270ca9":"markdown","7715e6d4":"markdown","6ed9aa31":"markdown","d0ea9a89":"markdown","e69658fa":"markdown","8641fed1":"markdown","6052d013":"markdown","65160160":"markdown","cabb22ef":"markdown","6d065146":"markdown"},"source":{"5ac68e91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e063c12":"#import pandas\nimport pandas as pd","e543a691":"#Az adatb\u00e1zisokat panda dataframe-k\u00e9nt olvassuk be\ntitles = pd.read_csv('\/kaggle\/input\/imdb-dataset\/title.basics.tsv.gz', compression='gzip', header=0, sep='\\t', quotechar='\"',\n                      dtype={'tconst': 'string', 'titleType': 'string', 'primaryTitle': 'string', 'originalTitle': 'string', 'isAdult': 'int', 'startYear': 'string', 'endYear': 'string', 'runtimeMinutes': 'string', 'genres': 'string'})\ndel titles['isAdult']\n\nratings = pd.read_csv('\/kaggle\/input\/imdb-dataset\/title.ratings.tsv.gz', compression='gzip', header=0, sep='\\t', quotechar='\"',\n                      dtype={'tconst': 'string', 'averageRating': 'double', 'numVotes': 'int'})\ndel ratings['averageRating']\n\nshows = pd.read_csv('\/kaggle\/input\/tv-shows-on-netflix-prime-video-hulu-and-disney\/tv_shows.csv')\ndel shows['Unnamed: 0']\ndel shows['Rotten Tomatoes']\ndel shows['type']","3ae4f306":"#1. l\u00e9p\u00e9s a StreamPlatform oszlop l\u00e9trehoz\u00e1s\u00e1hoz, hogy \u00e9rdekesebb plotokat tudjunk csin\u00e1lni ggplottal\n#shows.loc[shows['Netflix'] == 1, 'Netflix'] = 'Netflix'\n#shows.loc[shows['Hulu'] == 1, 'Hulu'] = 'Hulu'\n#shows.loc[shows['Prime Video'] == 1, 'Prime Video'] = 'Prime Video'\n#shows.loc[shows['Disney+'] == 1, 'Disney+'] = 'Disney+'\n#merge then into 1 column -> streamPlatform\n#shows.head(50)","94dc3fa4":"title_ratings = pd.merge(titles, ratings)\ntitle_ratings.head()","d2447a52":"title_ratings_filtered = title_ratings.drop(title_ratings[\n                  (title_ratings.titleType == 'tvEpisode') |\n                  (title_ratings.titleType == 'tvShort') |\n                  (title_ratings.titleType == 'tvSpecial') |\n                  (title_ratings.titleType == 'short') |\n                  (title_ratings.titleType == 'video') |\n                  (title_ratings.titleType == 'videoGame')].index)\n#display\ntitle_ratings_filtered.tail()","10692bc4":"title_ratings_filtered = title_ratings_filtered.replace('\\\\N',np.NaN)\ntitle_ratings_filtered.head()","d3862c35":"#imdb titles egyes\u00edt\u00e9se a streamingel a c\u00edmeik alapj\u00e1n\n#merge titles from imdb (title_ratings_filtered) with titles on streaming services (shows) based on their title\nfiltered_df = pd.merge(title_ratings_filtered, shows, left_on='primaryTitle', right_on='Title')\n\n#felesleges oszlopok t\u00f6rl\u00e9se\n#drop unwatned columns\nfiltered_df = filtered_df.drop(columns=['Title', 'Year'])\n\n#minden sor kit\u00f6rl\u00e9se ami nem sorozat\n#drop media that isn't tvSeries\nfiltered_df = filtered_df.drop(filtered_df[filtered_df.titleType != 'tvSeries'].index, axis=0)\n\n#imdb \u00e9rt\u00e9kel\u00e9s n\u00e9lk\u00fcli sorok t\u00f6rl\u00e9se\n#drop titles without imdb rating\n#filtered_df = filtered_df.drop(filtered_df[filtered_df.IMDb.isnull()].index, axis=0)\n\n#ism\u00e9tl\u00f6d\u0151 sorok t\u00f6rl\u00e9se imdb azonos\u00edt\u00f3 alapj\u00e1n\n#drop duplicated titles based on tconst\nfiltered_df = filtered_df.drop_duplicates(subset=['tconst'], keep='last')\n\n#c\u00edmek t\u00f6rl\u00e9se 100-n\u00e1l kevesebb \u00e9rt\u00e9kel\u00e9ssel\n#drop titles with less than x imdb ratings\n#filtered_df = filtered_df.drop(filtered_df[filtered_df.numVotes <= 100].index, axis=0)\n\n#c\u00edmek t\u00f6rl\u00e9se amik 1960 el\u0151tt jelentek m\u00e9g \u00e9s 10000-n\u00e9l kevesebb \u00e9rt\u00e9kel\u00e9s\u00fck van\n#drop titles released before 1960 and has less than 10000 votes\nfiltered_df = filtered_df.drop(filtered_df[(filtered_df.startYear.astype(int) <= 1960) & (filtered_df.numVotes <= 10000)].index, axis=0)\n\n#display\nfiltered_df","e5c2e71e":"#shows adatkeret (sorai, olszopai)\nshows.shape","47808b8b":"filtered_df[(filtered_df.primaryTitle == 'Oliver Twist')]","fac81291":"filtered_df[(filtered_df.IMDb.isnull()) & (filtered_df.numVotes >= 3000)]","27414273":"#correlation matrix\nplt.figure(figsize=(16,12))\nplt.title(\"correlation matrix\",size=30)\nsns.heatmap(filtered_df.corr(),cmap=\"YlOrRd\",square=True,annot=True)","5e8e4c70":"#Colors representing the streaming services main colors in hex code\ncolors = ['#ed2f39','#62c462','#ffb84d','#4687fa']","b4db45b2":"piedata = filtered_df.sum()['Netflix':\"Disney+\"]\nplt.figure(figsize=(12,8))\nplt.title(\"Sorozatok sz\u00e1m\u00e1nak %-os eloszl\u00e1sa\",size=30)\nplt.pie(piedata,labels=piedata.index,colors=colors, autopct='%1.1f%%')\nplt.legend(title='Streamer', bbox_to_anchor=(1, 0, 0.7, 1),loc='center right',)","4d7b0f96":"#Who is the platform with the most highly rated shows?\n#top_shows = shows['IMDb'] > 8\n#top_shows.head(100)\n#top_rated_shows = shows\n#top_rated_shows.insert(9, \"IMDB 8+\", top_shows)\n\n#indexNames = top_rated_shows[ top_rated_shows['IMDB 8+'] == 'False' ].index\n# Delete these row indexes from dataFrame\n#top_rated_shows.drop(indexNames , inplace=True)\n#top_rated_shows.head(100)\n#piedata = top_shows.sum()['Netflix':\"Disney+\"]\n#plt.figure(figsize=(12,8))\n#plt.pie(piedata,labels=piedata.index,autopct='%1.1f%%')\n#plt.legend(title='Streamer', bbox_to_anchor=(1, 0, 0.7, 1),loc='center right',)\n#top_shows = top_shows.set_index('Netflix':\"Disney+\")\n#display(top_shows)","1e9babe8":"#filtered_df.groupby(by=' IMDb').sum()[['Netflix','Hulu',\"Disney+\",'Prime Video']].plot(kind='bar',figsize=(12,8),style='bmh' ).title(\"correlation matrix\",size=30)","1458a9c6":"filtered_df.groupby(by='IMDb').sum()[['Netflix']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Netflix tartalmak imdb pontsz\u00e1m szerinti eloszl\u00e1sa\"))\nfiltered_df.groupby(by='IMDb').sum()[['Hulu']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Hulu tartalmak imdb pontsz\u00e1m szerinti eloszl\u00e1sa\"))\nfiltered_df.groupby(by='IMDb').sum()[['Disney+']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Disney+ tartalmak imdb pontsz\u00e1m szerinti eloszl\u00e1sa\"))\nfiltered_df.groupby(by='IMDb').sum()[['Prime Video']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Prime Video tartalmak imdb pontsz\u00e1m szerinti eloszl\u00e1sa\"))","31825ccc":"filtered_df.groupby(by='IMDb').sum()[['Netflix','Hulu','Disney+','Prime Video']].plot(kind='bar',figsize=(14,10),style='g',title=(\"Minden tartalom imdb pontsz\u00e1m szerinti eloszl\u00e1sa\"))","e1d7a155":"filtered_df.groupby(by='startYear').sum()[['Netflix']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Netflix tartalmak \u00e9v szerinti eloszl\u00e1sa\"))\nfiltered_df.groupby(by='startYear').sum()[['Hulu']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Hulu tartalmak \u00e9v szerinti eloszl\u00e1sa\"))\nfiltered_df.groupby(by='startYear').sum()[['Disney+']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Disney+ tartalmak \u00e9v szerinti eloszl\u00e1sa\"))\nfiltered_df.groupby(by='startYear').sum()[['Prime Video']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Prime Video tartalmak \u00e9v szerinti eloszl\u00e1sa\"))","23cd43d7":"filtered_df.groupby(by='startYear').sum()[['Netflix','Hulu','Disney+','Prime Video']].plot(kind='bar',figsize=(14,10),style='g',title=(\"Minden tartalom \u00e9v szerinti eloszl\u00e1sa\"))","6e0715ab":"filtered_df.groupby(by='Age').sum()[['Netflix']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Netflix tartalmak koroszt\u00e1ly szerinti eloszl\u00e1sa\"))\nfiltered_df.groupby(by='Age').sum()[['Hulu']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Hulu tartalmak koroszt\u00e1ly szerinti eloszl\u00e1sa\"))\nfiltered_df.groupby(by='Age').sum()[['Disney+']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Disney+ tartalmak koroszt\u00e1ly szerinti eloszl\u00e1sa\"))\nfiltered_df.groupby(by='Age').sum()[['Prime Video']].plot(kind='bar',figsize=(14,4),style='bmh',title=(\"Prime Video tartalmak koroszt\u00e1ly szerinti eloszl\u00e1sa\"))","b5631d19":"filtered_df.groupby(by='Age').sum()[['Netflix','Hulu',\"Disney+\",'Prime Video']].plot(kind='bar',figsize=(12,10),style='bmh',title=(\"Minden tartalom koroszt\u00e1ly szerinti eloszl\u00e1sa\"))","42b2b61e":"#sns.regplot(x='startYear',y='IMDb',data=filtered_df)","8c265ae4":"Netflix (8.99 dollars\/month)\n<br>\nDisney Plus (6.99 dollars\/month)\n<br>\nHulu (5.99 dollars\/month)\n<br>\nAmazon Prime Video (12.99 dollars\/month)","01c8c6e1":"K\u00e9sz\u00edtette:\n<br>\nFrey Ferenc G\u00e1bor\n<br>\nVarga D\u00e1niel Istv\u00e1n\n<br>\nBudai S\u00e1ndor","c0270ca9":"**C\u00edmek (titles) egyes\u00edt\u00e9se az \u00e9rt\u00e9kel\u00e9sekkel (ratings) a 'tconst' oszlop alapj\u00e1n**\n\nA .merge met\u00f3dus alap\u00e9rtelmezetten egy k\u00f6z\u00f6s oszlop alapj\u00e1n egyes\u00edti az adatokat","7715e6d4":"# **Adatb\u00e1zisok bet\u00f6lt\u00e9se \u00e9s felesleges oszlopok t\u00f6rl\u00e9se**\n\nAz adatb\u00e1zisokat panda dataframe-k\u00e9nt (adatkeretk\u00e9nt) olvassuk be \u00e9s k\u00e9s\u0151bb egyes\u00edtj\u00fck \u0151ket\n\n\nA **titles** az IMDb-n l\u00e9v\u0151 c\u00edmeket tartalmazza\n<br>\nA **ratings** a **titles** kieg\u00e9sz\u00edt\u00e9se \u00e9rt\u00e9kel\u00e9sekkel\n<br>\nA **shows** tartalmazza a streaming szolg\u00e1ltat\u00e1sokon l\u00e9v\u0151 sorozatokat","6ed9aa31":"**Kombin\u00e1ljuk az imdb adatkeretet a streaming szolg\u00e1ltat\u00e1sok adatait tartalmaz\u00f3val \u00e9s megtiszt\u00edtjuk a v\u00e9gs\u0151 adatkeretet**","d0ea9a89":"**Cser\u00e9lj\u00fck az \u00f6sszes \\N \u00e9rt\u00e9ket NaN \u00e9rt\u00e9kekkel**","e69658fa":"# **Vizualiz\u00e1l\u00e1s**","8641fed1":"Ismert hiba: Az anal\u00edzis alapj\u00e1ul szolg\u00e1l\u00f3 adatb\u00e1zis (imdb-database) nem tartalmazza a m\u00e1sik adatb\u00e1zis (tv-shows-on-netflix-prime...) \u00f6sszes elem\u00e9t, ez\u00e9rt lehet olyan sorozat ami nem ker\u00fcl be a v\u00e9gs\u0151 adatkeretbe.\n\nEmellett t\u00f6bb n\u00e9pszer\u0171tlen sorozatot is droppoltunk a v\u00e9gs\u0151 adatkeretb\u0151l, \u00edgy lett 10 h\u00edj\u00e1n 1500-zal kevesebb (4121) rekordunk a tiszt\u00edt\u00e1s v\u00e9g\u00e9n.","6052d013":"# Streaming platformokon l\u00e9v\u0151 sorozatok adatait vetett\u00fck \u00f6ssze az IMDb \u00e9rt\u00e9kel\u00e9seikkel, majd sz\u00e1m, \u00e9rt\u00e9kel\u00e9s, \u00e9s kor alapj\u00e1n vizsg\u00e1ltuk \u0151ket.","65160160":"Sorozatok IMDb \u00e9rt\u00e9kel\u00e9s n\u00e9lk\u00fcl, t\u00f6bb ezer szavazattal","cabb22ef":"**Az \u00f6sszes olyan rekord t\u00f6rl\u00e9se aminek a t\u00edpusa NEM movie, tvMovie, tvSeries vagy tvMiniSeries**","6d065146":"**??**"}}