{"cell_type":{"c3fd9e81":"code","0006c3a7":"code","ddac70d0":"code","6b24acb9":"code","868dc331":"code","46b52345":"code","2294339a":"code","bf18f0c5":"code","ccc40b53":"code","99e21308":"code","239606a1":"code","b3cd62f7":"markdown","c60062eb":"markdown","eacaf154":"markdown","02282c06":"markdown","30106388":"markdown","ea366352":"markdown","4a724429":"markdown","e099fa94":"markdown","d0e96b57":"markdown","c3e0b55a":"markdown","0080408c":"markdown"},"source":{"c3fd9e81":"import pandas as pd","0006c3a7":"# if you want to print all the avariables\nfrom IPython.core.interactiveshell import InteractiveShell \nInteractiveShell.ast_node_interactivity = \"all\"","ddac70d0":"def add_10(df):\n    df['number'] = df['number'].apply(lambda x: x+10)\n    return df\n\ndef is_greater_than_20(df):\n    df['greater_then_20'] = df['number'].apply(lambda x: True if x>20 else False)\n    return df\n\n\ndf = pd.DataFrame({'number': [1,2,3,4], \"dummy\": [11,112,332,33]})\ndf\nprint(\"Dataframe after changing\")\ndf = df.pipe(add_10).pipe(is_greater_than_20)\ndf","6b24acb9":"df = pd.DataFrame({'number': [1,2,3,4], \"dummy\": [11,112,332,33]})\ndf\n\nchange_dict = {1:'a', 2:'b'}\ndf['number'] = df['number'].map(change_dict)\ndf","868dc331":"df = pd.DataFrame({'number': [1,2,3,4], \"dummy\": [11,112,332,33]})\ndf\n\n# change the specific column name \ndf2 = df.rename(columns={\"dummy\": 'number2'})\ndf2\n\n#if you wanna change in the same dataframe without creating a copy.\ndf.rename(columns={\"dummy\": 'number_two'}, inplace=True)\ndf","46b52345":"query,pivot,pd.pivot_table,","2294339a":"df = pd.DataFrame({'col1': [1,2,3,4], \"col2\": [11,112,332,33]})\ndf\n\n# we can create a single new column like below.\ndf['col3'] = df['col1'] + 10\ndf\n\n# create multiple new columns at a single line.\ndf2 = df.assign(col3 = lambda df: df['col1'] * 10 + df['col2'] + 12).assign(col4 = lambda df: df['col3'] + 100)\ndf2","bf18f0c5":"df = pd.DataFrame({\"a\": [[1, 2], [4, 5]], \"b\": [11, 13]})\ndf\n\ndf = df.explode(\"a\")\ndf\n\n# reset the index\ndf.reset_index(drop=True)","ccc40b53":"df = pd.DataFrame({\"a\" : range(1,5), 'b': [5,3,6,2], 'sum total': [6,5,9,6]})\ndf","99e21308":"# to get the values using a query\nquery = 'a > b'\ndf.query(query)\n\nprint(\"Equalent way\")\n# that is equal to ==\ndf[df['a'] > df['b']]","239606a1":"# other queries.\n# for the column name with space use the `` to mention those things.\nquery = 'a < `sum total`'\ndf.query(query)","b3cd62f7":"# 4. Creat multiple new columns","c60062eb":"# 3. Change Dataframe column name","eacaf154":"- when our dataframe has a iterable object and we want to convert it to each single row.","02282c06":"- If you want to create new columns based on the available columns we can use the assign function.\n- we can directly assign the value to the df, but it gives more readability when creating number of columns.","30106388":"# Apply multiple function to a row","ea366352":"- Query the dataframe with a boolean expression - True rows will be displayed.\n","4a724429":"# 6. Pandas query ","e099fa94":"- When you want apply multiple function to a dataframe we can use the df.pipe() method.\n- Apply all the function at the single line.\n- Increase the readability of the code.","d0e96b57":"# 2. Change Series values using dict","c3e0b55a":"# 5. pandas.DataFrame.explode","0080408c":"# This notebook is to track the important pandas function i am comming across. \n\n# will gonna keep on adding the new useful ways.............\n\n# Keep learning :)"}}