{"cell_type":{"568d407b":"code","0920ae3f":"code","7ff89946":"code","90bf6ea7":"code","48c00df1":"code","d8a8cca6":"code","1469aca5":"code","24d2d163":"code","47115b9b":"code","37198828":"code","ebcae22d":"code","19d112a0":"code","f3342b65":"code","ea0b2b6f":"code","3dc2cfe1":"code","b98792ac":"code","e9685a82":"code","c26a4bca":"code","41311d90":"code","b378c951":"markdown","e828a62c":"markdown","2a13fbb0":"markdown","0df4b582":"markdown","ef6951df":"markdown","907acbbe":"markdown","fd5f2e05":"markdown","8a1b50d8":"markdown","ad5ddf14":"markdown","7a067dff":"markdown","c270b939":"markdown","2b41bf23":"markdown","95faf784":"markdown","31ab45ab":"markdown","29cc9a8b":"markdown","8c1c4ade":"markdown","4c0d867b":"markdown","b4aa455e":"markdown","d02a1edc":"markdown","534f6a3d":"markdown","28d9334a":"markdown"},"source":{"568d407b":"from tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Model                                                                       \nfrom tensorflow.keras.layers import Input, Dense, concatenate, Conv2D, MaxPooling2D, Embedding, LSTM, Flatten\nfrom keras.models import Sequential, Model\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3","0920ae3f":"# creating object of Sequential class\nmodel = Sequential()\n\nmodel.add(Conv2D(128, (3,3), activation = 'relu', input_shape = (28,28,1)))\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(Conv2D(128, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dense(10, activation = 'softmax'))","7ff89946":"plot_model(model, show_shapes=True, show_dtype=True, show_layer_names=True)","90bf6ea7":"# Defining layers of Model\ninput_layer = Input(shape = (28, 28))\n\nhidden_layer_1 = Dense(64, activation = 'relu')(input_layer)\nhidden_layer_2 = Dense(28, activation = 'relu', input_dim = 64)(hidden_layer_1)\nhidden_layer_3 = Dense(28, activation = 'relu', input_dim = 28)(hidden_layer_2)\n\noutput_layer = Dense(10, activation='softmax', input_dim = 28)(hidden_layer_3)","48c00df1":"# Creating Model\nmodel = Model(input_layer , output_layer)","d8a8cca6":"plot_model(model, show_shapes=True, show_dtype=True, show_layer_names=True)","1469aca5":"image = Input(shape=(32,32,3), name = \"Image\")\n\nx_1 = Conv2D(64, (3,3), activation = 'relu')(image)\nx_1 = MaxPooling2D(pool_size=(2,2))(x_1)\n\nx_1 = Conv2D(32, (3,3), activation = 'relu')(x_1)\nx_1 = MaxPooling2D(pool_size=(2,2))(x_1)\n\nx_1 = Flatten()(x_1)\n\nfield = Input(shape=(1,), name = \"Field\")\n\nx_2 = Dense(64, activation = 'relu')(field)\nx_2 = Dense(82, activation = 'relu')(x_2)\nx_2 = Dense(16, activation = 'relu')(x_2)\n\nexperience = Input(shape = (1,), name = \"Experience level\")\nx_3 = Dense(82, activation = 'relu')(experience)\nx_3 = Dense(32, activation = 'relu')(x_3)\n\nconcatenated = concatenate([x_1, x_2, x_3], axis = -1)\n\nage = Dense(32, activation = 'relu', name=\"Age\")(concatenated)\nage = Dense(64, activation = 'relu')(age)\nage = Dense(1)(age)\n\ngender = Dense(28, activation = 'relu', name = \"Gender\")(concatenated)\ngender = Dense(1, activation = 'sigmoid')(gender)\n\nsalary = Dense(64, activation = 'relu', name = \"Salary\")(concatenated)\nsalary = Dense(28, activation = 'relu')(salary)\nsalary = Dense(84, activation = 'relu')(salary)\nsalary = Dense(1)(salary)\n","24d2d163":"# creating model\nmodel = Model(inputs = [image, field, experience], outputs = [age, gender, salary])","47115b9b":"plot_model(model,\n           show_shapes = True,\n           show_dtype = True,\n           show_layer_names = True)","37198828":"input_1 = Input(shape=(32,32,3), name = \"First_Input\")\n\nx_1 = Conv2D(64,(3,3), activation = 'relu')(input_1)\nx_1 = MaxPooling2D(pool_size=(2,2))(x_1)\nx_1 = Conv2D(32, (3,3), activation = 'relu')(x_1)\nx_1 = MaxPooling2D()(x_1)\n\ninput_2 = Input(shape = (32,32,3), name = 'Second_Input')\nx_2 = Conv2D(64, (3,3), activation='relu')(input_2)\nx_2 = MaxPooling2D()(x_2)\nx_2 = Conv2D(32, (3,3), activation = 'relu')(x_2)\nx_2 = MaxPooling2D()(x_2)\n\n# Combining both layers\nconcatenated = concatenate([x_1, x_2], axis = -1)\n\nconcatenated = Dense(32, activation = 'relu')(concatenated)\nconcatenated = Dense(36, activation = 'relu')(concatenated)\nconcatenated = Dense(64, activation = 'relu')(concatenated)\nconcatenated = Dense(16, activation = 'relu')(concatenated)\n\noutput = Dense(43, activation = 'softmax')(concatenated)","ebcae22d":"# Creating Model\nmodel = Model(inputs = [input_1, input_2], outputs = output)","19d112a0":"plot_model(model, show_dtype=True, show_layer_names=True, show_shapes=True)","f3342b65":"model.summary()","ea0b2b6f":"image_input = Input(shape = (32,32,3), name = \"Image\")\n\nimage = Conv2D(64, (3,3), activation = 'relu')(image_input)\nimage = MaxPooling2D(pool_size=(2,2))(image)\n\nimage = Conv2D(32, (3,3), activation = 'relu')(image)\nimage = MaxPooling2D(pool_size=(2,2))(image)\n\nflattened_image = Flatten()(image)\n\nage = Dense(32, activation = 'relu', name = \"Age\")(flattened_image)\nage = Dense(64, activation = 'relu')(age)\nage = Dense(1)(age)\n\ngender = Dense(28, activation = 'relu', name = \"Gender\")(flattened_image)\ngender = Dense(32, activation = 'relu')(gender)\ngender = Dense(1, activation = 'sigmoid')(gender)\n\n# Creating Model\nmodel = Model(inputs = image_input,\n              outputs = [age, gender])","3dc2cfe1":"model.summary()","b98792ac":"plot_model(model, show_dtype=True, show_layer_names=True, show_shapes=True)","e9685a82":"class MnistModel(Model):\n    def __init__(self, **kwagrs):\n        # calling the parent constructor\n        super(MnistModel, self).__init__()\n        self.layer_1 = Flatten()\n        self.layer_2 = Dense(128, 'relu')\n        self.layer_3 = Dense(256, 'relu')\n        self.layer_4 = Dense(64, 'relu')\n        self.layer_5 = Dense(10, 'softmax')\n  \n    def call(self, inputs):\n        x = self.layer_1(inputs)\n        x = self.layer_2(x)\n        x = self.layer_3(x)\n        x = self.layer_4(x)\n        x = self.layer_5(x)\n        return x\n      \n    def build_graph(self):\n        x = Input(shape = (dim))\n        return Model(inputs = [x], outputs = self.call(x))","c26a4bca":"dim = (28,28,1)\n\n# creating an object of MnistModel class\nmodel = MnistModel(name = \"mnist_model\", dim = dim)\n\nmodel.build((None, *dim))","41311d90":"plot_model(model.build_graph(),\n           show_dtype = True,\n           show_layer_names = True,\n           show_shapes = True)","b378c951":"<h3 style=\"color:#47b7ed;font-size:44px;font-family:newtimeroman;text-align:center;\"><strong>Table of Content<\/strong><\/h3>","e828a62c":"<a id=\"5\"><\/a>\n<h3 style=\"color:#47b7ed;font-size:44px;font-family:newtimeroman;text-align:center;\"><strong>Comparison<\/strong><\/h3>","2a13fbb0":"<p style= \"font-family:Georgia;color:#000000;font-size:110%;text-align:center;\">\n<b style=\"color:black;font-size:17px;font-family:Georgia;\">PROBLEM:<\/b> Predict the person's age, gender and salary from image, field and experience level\n<\/p>","0df4b582":"<a id=\"1\"><\/a>\n<h3 style=\"color:#47b7ed;font-size:44px;font-family:newtimeroman;text-align:center;\"><strong>Importing Libraries<\/strong><\/h3>","ef6951df":"<p style= \"font-family:Georgia;color:#000000;font-size:110%;text-align:center;\">\n<b style=\"color:black;font-size:17px;font-family:Georgia;\">PROBLEM:<\/b> Creating model for MNIST handwritten digit classification problem using model subclassing\n<\/p>","907acbbe":"<a id=\"3.2\"><\/a>\n<h3 style=\"color:#47b7ed;font-size:35px;font-family:newtimeroman;text-align:center;\"><strong>Multi Input<strong style=\"color:black;font-size:45px;font-family:Georgia;\">&<strong style=\"color:#47b7ed;font-size:35px;font-family:newtimeroman;\">Multi Output<\/strong><\/strong><\/strong><\/h3>\n\n","fd5f2e05":"<a id=\"4\"><\/a>\n<h3 style=\"color:#47b7ed;font-size:44px;font-family:newtimeroman;text-align:center;\"><strong>Model Subclassing<\/strong><\/h3>\n\n","8a1b50d8":"<table style=\"width:60%\">\n  <tr>\n    <td bgcolor='#ccd9e3' style=\"text-align:center\"><b>Features<\/b><\/td>\n    <td bgcolor='#ccd9e3' style=\"text-align:center\"><b>Sequential<\/b><\/td>\n    <td bgcolor='#ccd9e3' style=\"text-align:center\"><b>Functional API<\/b><\/td>\n    <td bgcolor='#ccd9e3' style=\"text-align:center\"><b>Model Subclassing<\/b><\/td>\n  <\/tr>\n    \n  <tr>\n    <td style=\"text-align:center\"><b>Customization<\/b><\/td>\n    <td style=\"text-align:center\">Low<\/td>\n    <td style=\"text-align:center\">Medium<\/td>\n    <td style=\"text-align:center\">High<\/td>\n  <\/tr>\n    \n  <tr>\n    <td style=\"text-align:center\"><b>Difficulty to Build<\/b><\/td>\n    <td style=\"text-align:center\">Easy<\/td>\n    <td style=\"text-align:center\">Medium<\/td>\n    <td style=\"text-align:center\">Difficult<\/td>\n  <\/tr>\n    \n  <tr>\n    <td style=\"text-align:center\"><b>Layer Sharing<\/b><\/td>\n    <td style=\"text-align:center\">No<\/td>\n    <td style=\"text-align:center\">Yes<\/td>\n    <td style=\"text-align:center\">Yes<\/td>\n  <\/tr>\n    \n  <tr>\n    <td style=\"text-align:center\"><b>Multiple Branch<\/b><\/td>\n    <td style=\"text-align:center\">No<\/td>\n    <td style=\"text-align:center\">Yes<\/td>\n    <td style=\"text-align:center\">Yes<\/td>\n  <\/tr>\n    \n  <tr>\n    <td style=\"text-align:center\"><b>Multiple Input<\/b><\/td>\n    <td style=\"text-align:center\">No<\/td>\n    <td style=\"text-align:center\">Yes<\/td>\n    <td style=\"text-align:center\">Yes<\/td>\n  <\/tr>\n        \n  <tr>\n    <td style=\"text-align:center\"><b>Multiple Output<\/b><\/td>\n    <td style=\"text-align:center\">No<\/td>\n    <td style=\"text-align:center\">Yes<\/td>\n    <td style=\"text-align:center\">Yes<\/td>\n  <\/tr>\n        \n  <tr>\n    <td style=\"text-align:center\"><b>Best Suited For<\/b><\/td>\n    <td style=\"text-align:center\">Beginners<\/td>\n    <td style=\"text-align:center\">Professionals<\/td>\n    <td style=\"text-align:center\">Resarchers<\/td>\n  <\/tr>\n    \n<\/table>","ad5ddf14":"<p style= \"font-family:Georgia;color:#000000;font-size:110%;text-align:center;\">\nCreating model for MNIST handwritten digit classification problem\n<\/p>","7a067dff":"<a id=\"3.3\"><\/a>\n<h3 style=\"color:#47b7ed;font-size:35px;font-family:newtimeroman;text-align:center;\"><strong>Multiple Inputs<strong style=\"color:black;font-size:45px;font-family:Georgia;\">&<strong style=\"color:#47b7ed;font-size:35px;font-family:newtimeroman;\">Single Output<\/strong><\/strong><\/strong><\/h3>\n\n","c270b939":"    \n* [1. Importing Libraries](#1)\n    \n* [2. Sequential Model](#2)\n    \n* [3. Functional API](#3)  \n    \n    * [3.1. Single Input & Single Output](#3.1)\n    \n    * [3.2. Multi Input & Multi Output](#3.2)\n    \n    * [3.3. Multi Input & Single Output](#3.3)\n    \n    * [3.4. Single Input & Multi Output](#3.4)\n    \n* [4. Model Subclassing](#4)\n\n* [5. Comparison](#5)\n","2b41bf23":"<a id=\"3.1\"><\/a>\n<h3 style=\"color:#47b7ed;font-size:35px;font-family:newtimeroman;text-align:center;\"><strong>Single Input<strong style=\"color:black;font-size:45px;font-family:Georgia;\">&<strong style=\"color:#47b7ed;font-size:35px;font-family:newtimeroman;\">Single Output<\/strong><\/strong><\/strong><\/h3>\n\n","95faf784":"---","31ab45ab":"<a id=\"2\"><\/a>\n<h3 style=\"color:#47b7ed;font-size:44px;font-family:newtimeroman;text-align:center;\"><strong>Sequential API<\/strong><\/h3>","29cc9a8b":"<a id=\"3\"><\/a>\n<h3 style=\"color:#47b7ed;font-size:44px;font-family:newtimeroman;text-align:center;\"><strong>Functional API<\/strong><\/h3>","8c1c4ade":"<p style= \"font-family:Georgia;color:#000000;font-size:110%;text-align:center;\">\n<b style=\"color:black;font-size:17px;font-family:Georgia;\">PROBLEM:<\/b> If we have only <b>image<\/b> of a person and based on that we want to predict a person's <b>age<\/b> and <b>gender<\/b>. Then in that situation, we also use Functional API.\n<\/p>","4c0d867b":"<a id=\"3.4\"><\/a>\n<h3 style=\"color:#47b7ed;font-size:35px;font-family:newtimeroman;text-align:center;\"><strong>Single Input<strong style=\"color:black;font-size:45px;font-family:Georgia;\">&<strong style=\"color:#47b7ed;font-size:35px;font-family:newtimeroman;\">Multi Output<\/strong><\/strong><\/strong><\/h3>\n","b4aa455e":"<p style= \"font-family:Georgia;color:#000000;font-size:110%;text-align:center;\">\nCreating model for MNIST handwritten digit classification problem\n<\/p>","d02a1edc":"In this notebook, I am going to discuss the different ways to build a deep learning model.\n\nThere are **three** ways to build model in Tensorflow 2.0\n1. Sequential Model\n2. Functional API\n3. Model Subclassing\n\n\n<h3 style=\"color:#47b7ed;font-size:44px;font-family:newtimeroman;text-align:center;\"><strong>Sequential API<\/strong><\/h3>\n\n<p style= \"font-family:Georgia;color:#000000;font-size:110%;text-align:center;\">\nThe sequential model allows us to create models layer-by-layer. It is the best way to build a simple model which has a single input and a single output.<\/p>\n\n<center><img src=\"https:\/\/i.stack.imgur.com\/iHW2o.jpg\" width=600 height=500><\/center>\n\n<br>\n\n<h3 style=\"color:#47b7ed;font-size:44px;font-family:newtimeroman;text-align:center;\"><strong>Functional API<\/strong><\/h3>\n\n<p style= \"font-family:Georgia;color:#000000;font-size:110%;text-align:center;\">\nWith functional API, we can create flexible models. It allows us to share model layers. It can have multiple inputs and outputs. We can create a complex network with function API. As the real-life deep learning problem is not linear, so this increases the importance of functional API<\/p>\n\n<center><img src=\"https:\/\/editor.analyticsvidhya.com\/uploads\/41982branched%20network.png\" width=600 height=500><\/center>\n\n\n<h3 style=\"color:#47b7ed;font-size:44px;font-family:newtimeroman;text-align:center;\"><strong>Model Subclassing<\/strong><\/h3>\n\n<p style= \"font-family:Georgia;color:#000000;font-size:110%;text-align:center;\">\nIt is a more flexible and customizable way to implement the feed-forward mechanism in an object-oriented fashion. With model subclassing, we have full control over the creation of the model. It is designed for those who need complete control over models, layers, and training processes<\/p>\n<br>\n<center><img src=\"https:\/\/raw.githubusercontent.com\/Shahrayar123\/Kaggle\/main\/Model%20Subclassing.png\" width=450 height=350><\/center>\n\n","534f6a3d":"# <p style=\"background-color:#47b7ed;font-family:newtimeroman;color:#FFF9ED;font-size:130%;text-align:center;border-radius:10px 10px;\">I Hope my Kernel will be helpful for you. If you like my work, Don't forget to Upvote Thank You! \ud83d\ude42<\/p>\n","28d9334a":"<p style= \"font-family:Georgia;color:#000000;font-size:110%;text-align:center;\">There are two important methods in Model subclassing<br>\n1.<b> __init__<\/b> method.<br>\n2.<b> call<\/b> method.<br>\n    \n<\/p>"}}