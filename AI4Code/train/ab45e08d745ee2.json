{"cell_type":{"c23d7d8a":"code","c5d9b772":"code","d55c7150":"code","0483df70":"code","0200ebf2":"code","ada87689":"code","ca48fcca":"code","65e3fd20":"code","bb278195":"code","e8fc8990":"code","7706c16d":"code","07a36114":"code","e5308a95":"code","1bcf6972":"code","d59187bb":"code","b1eedc74":"code","66023d85":"code","c37c07f4":"code","18c7a241":"code","6a3c849c":"code","c51963a1":"code","9ae68b38":"code","0ceb5f83":"code","1a6399e3":"code","debb26e3":"code","4459a2d7":"code","0507f65b":"code","10f96d5a":"code","29384ea9":"code","93706266":"code","b5625d4a":"code","c4af2b67":"code","9cfa21f2":"code","bfee595a":"code","65fb6e82":"code","4b9cd511":"code","994c3b9e":"code","e3a84af9":"code","ac2977a1":"code","8bf4a8b8":"code","b77eb8b1":"code","e822d42f":"code","dbadf1b1":"code","7bc32f4d":"code","bb798bf5":"code","435758ac":"code","723cbd59":"code","53d1ff3e":"code","5793d700":"code","33bf5b89":"code","94a45876":"markdown","42c413df":"markdown","9851e5f0":"markdown","d3095b1f":"markdown","8619f13b":"markdown","026607a9":"markdown","86041e19":"markdown","5305edcc":"markdown","de94e82d":"markdown","1368219b":"markdown","d1d65690":"markdown","aa572f13":"markdown","3b5fc832":"markdown","80f04385":"markdown","d4b3a535":"markdown","8214c3ef":"markdown","d9c3bf93":"markdown","7e52e9ce":"markdown","5dde1cb0":"markdown","a171e073":"markdown","dd3e5ea5":"markdown","90f56373":"markdown","b6b3dfca":"markdown","1f20d325":"markdown","5fe38a29":"markdown","4bef6246":"markdown","85317c10":"markdown","eefe87b4":"markdown","9b188060":"markdown","79357b7a":"markdown","8eee309f":"markdown","cb949304":"markdown","97f3fc83":"markdown","59dac767":"markdown","9d15df16":"markdown","e792901d":"markdown","8bf93735":"markdown","253b8149":"markdown","12c5f227":"markdown","845303a5":"markdown","ad20a8f9":"markdown"},"source":{"c23d7d8a":"!pip install -U -q fancyimpute","c5d9b772":"# import library\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nimport os\nimport fancyimpute\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d55c7150":"df = pd.read_csv('..\/input\/telcocustchurniykra\/data.csv')\ndf.head()","0483df70":"# df = pd.read_csv(\"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\n# df.head()","0200ebf2":"df.describe()","ada87689":"df.info()","ca48fcca":"df.isnull().sum()","65e3fd20":"for col in df.columns:\n    print(\"%s unique count: %d\" % (col, df[col].nunique()))\n    print(df[col].unique(), '\\n')","bb278195":"# drop customerID\ndf = df.drop(['customerID'], axis=1)","e8fc8990":"# replace 'No phone service' menjadi 'No' pada MultipleLines\ndf['MultipleLines'] = df['MultipleLines'].replace({'No phone service': 'No'})\n\n# replace 'No internet service' menjadi 'No'\ncols_redundant = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection', \n                  'TechSupport', 'StreamingTV', 'StreamingMovies']\nfor col in cols_redundant:\n    df[col] = df[col].replace({'No internet service': 'No'})","7706c16d":"cols_cat = ['Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'OnlineSecurity',\n            'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies',\n            'PaperlessBilling', 'Churn']\n\n# replace 'Yes' menjadi 1 dan 'No' menjadi 0\nfor col in cols_cat:\n    df[col] = df[col].replace({'Yes': 1, 'No': 0})","07a36114":"# replace 'female' menjadi 1 dan 'male' menjadi 0\ndf['gender'] = df['gender'].replace({'Male': 1, 'Female': 0})","e5308a95":"# Pada atribut InternetService\n## Replace 'DSL' menjadi 1\n## Replace 'Fiber optic' menjadi 2\n## Replace 'No' menjadi 3\ndf['InternetService'] = df['InternetService'].replace({'DSL': 1,\n                                                       'Fiber optic': 2,\n                                                       'No': 3})","1bcf6972":"# Pada atribut Contract\n##abs Replace 'Month-to-month' menjadi 1\n## Replace 'One year' menjadi 2\n## Replace 'Two year' menjadi 3\ndf['Contract'] = df['Contract'].replace({'Month-to-month': 1,\n                                         'One year': 2,\n                                         'Two year': 3})","d59187bb":"# Pada atribut PaymentMethod\n## Replace 'Electronic check' menjadi 1\n## Replace 'Mailed check' menjadi 2\n## Replace 'Bank transfer (automatic)' menjadi 3\n## Replace 'Credit card (automatic)' menjadi 4\ndf['PaymentMethod'] = df['PaymentMethod'].replace({'Electronic check': 1,\n                                                   'Mailed check': 2,\n                                                   'Bank transfer (automatic)': 3,\n                                                   'Credit card (automatic)': 4})","b1eedc74":"# df['TotalCharges'] = df['TotalCharges'].astype('float64')","66023d85":"df.TotalCharges.isnull().sum()","c37c07f4":"# cek data berisi spasi pada TotalCharges\ntemp = df.sort_values('TotalCharges') \ntcharges = temp.TotalCharges[temp['TotalCharges'] == ' ']\nprint(\"Jumlah data kosong: \", len(tcharges))\ntcharges","18c7a241":"# terdapat karakter spasi pada data\ntemp = df.sort_values('TotalCharges')['TotalCharges'][:15][936] \ntemp, len(temp)","6a3c849c":"# convert space menjadi NaN\ndf['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')\n# setelah dirubah ke NaN, data kosong bisa diketahui dengan fungsi isnull()\nprint(\"Data kosong pada TotalCharges:\", df.TotalCharges.isnull().sum())\n\n# isi data kosong pada TotalCharges dengan formula di atas\ndf['TotalCharges'].fillna(value=df['tenure'] * df['MonthlyCharges'], inplace=True)\nprint(\"Data kosong pada TotalCharges:\", df.TotalCharges.isnull().sum()) # cek lagi data kosong","c51963a1":"df.info()","9ae68b38":"# initialize\nimputer = fancyimpute.KNN()\n\n# impute data and convert \nencode_data = pd.DataFrame(np.round(imputer.fit_transform(df)),columns = df.columns)","0ceb5f83":"cols_impute = ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'MultipleLines', \n               'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', \n               'StreamingTV', 'StreamingMovies']\n\nfor col in cols_impute:\n    data_before = df[col].value_counts(normalize=True)\n    data_after = encode_data[col].value_counts(normalize=True)\n    \n    combine_data = pd.DataFrame()\n    combine_data['percentage_before'] = data_before\n    combine_data['percentage_after'] = data_after\n    print(col)\n    print(combine_data)\n    print()","1a6399e3":"# cek lagi null data\nencode_data.isnull().any().sum()","debb26e3":"cols_float = ['MonthlyCharges', 'TotalCharges']\ncols_int = [x for x in list(encode_data.columns) if not x in cols_float]\n\nencode_data[cols_float] = encode_data[cols_float].astype('float64')\nencode_data[cols_int] = encode_data[cols_int].astype('int64')\nencode_data.info()","4459a2d7":"df_viz = encode_data.copy()","0507f65b":"cols_cat = ['SeniorCitizen','Partner', 'Dependents', 'PhoneService', 'MultipleLines', \n            'OnlineSecurity','OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', \n            'StreamingMovies','PaperlessBilling', 'Churn']\n\nfor col in cols_cat:\n    df_viz[col] = df_viz[col].replace({1:'Yes', 0:'No'})\n\n# gender\ndf_viz['gender'] = df_viz['gender'].replace({1:'Male', 0:'Female'})\n\n# InternetService\ndf_viz['InternetService'] = df_viz['InternetService'].replace({1:'DSL',\n                                                               2:'Fiber optic',\n                                                               3:'No'})\n# Contract\ndf_viz['Contract'] = df_viz['Contract'].replace({1:'Month-to-month',\n                                                 2:'One year',\n                                                 3:'Two year'})\n# PaymentMethod\ndf_viz['PaymentMethod'] = df_viz['PaymentMethod'].replace({1:'Electronic check',\n                                                           2:'Mailed check',\n                                                           3:'Bank transfer (automatic)',\n                                                           4:'Credit card (automatic)'})","10f96d5a":"df_viz.head()","29384ea9":"# statistical summary\ndf_viz.describe().round(3)","93706266":"df_viz[df_viz['Churn'] == 'Yes']['MonthlyCharges'].mean()","b5625d4a":"df_viz[df_viz['Churn'] == 'No']['TotalCharges'].mean()","c4af2b67":"df_num = df_viz[['tenure', 'MonthlyCharges', 'TotalCharges', 'Churn']]","9cfa21f2":"plt.figure(figsize=(12,8))\nsns.lmplot(x='tenure', y='TotalCharges', col='Churn', hue='Churn', data=df_num)\n# plt.title('tenure vs TotalCharges')","bfee595a":"plt.figure(figsize=(12,8))\nsns.lmplot(x='MonthlyCharges', y='TotalCharges', col='Churn', hue='Churn', data=df_num)\n# plt.title('MonthlyCharges vs TotalCharges')","65fb6e82":"plt.figure(figsize=(12,8))\nsns.lmplot(x='tenure', y='MonthlyCharges', col='Churn', hue='Churn', data=df_num)\n# plt.title('MonthlyCharges vs TotalCharges')","4b9cd511":"plt.figure(figsize = (15,10))\nsns.pairplot(df_num, hue='Churn')","994c3b9e":"plt.figure(figsize=(17,10))\n\nsns.boxplot(x='tenure', y='TotalCharges', data=df_num)\n\nplt.title('Box Plot of Tenure X TotalCharges')","e3a84af9":"plt.figure(figsize = (17,10))\nsns.countplot(df_viz['tenure'])","ac2977a1":"df_viz.describe(include='object')","8bf4a8b8":"# pie chart\ncols_cat = df_viz.describe(include='object').columns\n\nfig = plt.figure(figsize=(16,35), dpi=80)\nplt.subplots_adjust(hspace=.35)\n\nfor idx, item in enumerate(cols_cat, 1):\n    data = df_viz[item].value_counts().to_frame().T\n    labels = data.columns\n    title = df_viz[item].name\n    \n    fig.add_subplot(6,3,idx)\n    plt.title(title, fontsize=14)\n    plt.pie(data, labels=labels, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 14})\n    plt.axis('equal')","b77eb8b1":"cat_services = ['PhoneService','MultipleLines','InternetService',\n                'OnlineSecurity', 'OnlineBackup','DeviceProtection',\n                'TechSupport','StreamingTV','StreamingMovies']\n\nfig = plt.figure(figsize=(18,18), dpi=80)\nplt.subplots_adjust(hspace=.35)\n\nfor idx, col in enumerate(cat_services, 1):\n    fig.add_subplot(3,3,idx)\n    plt.title(f'{col} Counts', fontsize=16)\n    countplot_sc = sns.countplot(df_viz[col], hue=df_viz.Churn)\n    \n    # text annotation\n    for p in countplot_sc.patches:\n        x=p.get_bbox().get_points()[:,0]\n        y=p.get_bbox().get_points()[1,1]\n        countplot_sc.annotate('{:.2f}%'.format(100.*y\/len(df_viz[col])), \n                              (x.mean(), y),\n                              ha='center',\n                              va='bottom') # set the alignment of the text","e822d42f":"cat_custinfo = ['gender', 'SeniorCitizen', 'Partner', 'Dependents']\n\nfig = plt.figure(figsize=(12,10), dpi=80)\nplt.subplots_adjust(hspace=.35)\n\nfor idx, col in enumerate(cat_custinfo, 1):\n    fig.add_subplot(2,2,idx)\n    plt.title(f'{col} Counts', fontsize=16)\n    countplot_sc = sns.countplot(df_viz[col], hue=df_viz.Churn)\n    \n    # text annotation\n    for p in countplot_sc.patches:\n        x=p.get_bbox().get_points()[:,0]\n        y=p.get_bbox().get_points()[1,1]\n        countplot_sc.annotate('{:.2f}%'.format(100.*y\/len(df_viz[col])), \n                              (x.mean(), y),\n                              ha='center',\n                              va='bottom') # set the alignment of the text","dbadf1b1":"cat_other = ['Contract', 'PaperlessBilling', 'PaymentMethod']\n\nfig = plt.figure(figsize=(12,10), dpi=80)\nplt.subplots_adjust(hspace=.35)\n\nfor idx, col in enumerate(cat_other, 1):\n    fig.add_subplot(2,2,idx)\n    plt.title(f'{col} Counts', fontsize=16)\n    countplot_sc = sns.countplot(df_viz[col], hue=df_viz.Churn)\n    \n    if idx == 3:\n        countplot_sc.set_xticklabels(countplot_sc.get_xticklabels(), rotation=20)\n    \n    # text annotation\n    for p in countplot_sc.patches:\n        x=p.get_bbox().get_points()[:,0]\n        y=p.get_bbox().get_points()[1,1]\n        countplot_sc.annotate('{:.2f}%'.format(100.*y\/len(df_viz[col])), \n                              (x.mean(), y),\n                              ha='center',\n                              va='bottom') # set the alignment of the text","7bc32f4d":"data = df_viz.copy()\ndata.head()","bb798bf5":"# binary encoding\ngender_map = {\"Female\" : 0, \"Male\": 1}\nyes_no_map = {\"Yes\" : 1, \"No\" : 0}\n\ndata[\"gender\"] = data[\"gender\"].map(gender_map)\n\nbinary_encode_cols = ['SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', \n                      'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', \n                      'StreamingMovies', 'PaperlessBilling', 'Churn']\n\nfor col in binary_encode_cols:\n    data[col] = data[col].map(yes_no_map)","435758ac":"data.head()","723cbd59":"# one hot encoding\nonehot_encode_cols = ['InternetService', 'Contract', 'PaymentMethod']\ndata_onehot_encode = pd.get_dummies(data[onehot_encode_cols])\n\n# join\ndata = data.drop(onehot_encode_cols, axis=1)\ndata = pd.concat([data, data_onehot_encode], axis=1)","53d1ff3e":"# change data type from category to uint8\nfor col in data.columns:\n    if str(data[col].dtypes) == 'category':\n        data[col] = data[col].astype('uint8')","5793d700":"plt.figure(figsize = (15, 15))\nsns.heatmap(data.corr(), cmap=\"RdYlBu\", annot=True, fmt=\".1f\")\nplt.show()","33bf5b89":"data.corr()['Churn'].sort_values(ascending=False)","94a45876":"### Assign tipe data\nSelanjutnya, assign tipe data yang benar untuk tiap atribut menjadi:\n- int64\n    * `gender`, `SeniorCitizen`, `Partner`, `Dependents`, `tenure`, `PhoneService`, `MultipleLines`, `InternetService`, `OnlineSecurity`, `OnlineBackup`, `DeviceProtection`, `TechSupport`, `StreamingTV`, `StreamingMovies`, `Contract`, `PaperlessBilling`, `PaymentMethod`, `Churn`\n- float64\n    * `MonthlyCharges`, `TotalCharges`","42c413df":"Terdapat dua jenis data disini:\n\n- **Categorical data**: Data berupa kategori, misalkan pada atribut `gender`\n\n- **Numerical data**: Data berupa angka, misalkan pada atribut `MonthlyCharges`\n\nJika diperhatikan, masih terdapat kesalahan jenis tipe data seperti atribut `TotalCharges` yang bertipe object, padahal seharusnya bertipe numerik `float`. Maka harus dibenarkan terlebih dahulu.","9851e5f0":"Sedangkan untuk atribut `customerID` tidak kita gunakan dalam analisis data karena tidak berisi informasi penting untuk menjawab pertanyaan bisnis.","d3095b1f":"## Data Exploratory Analysis\nSetelah kita melakukan validasi data, kita dapat melakukan *explore* dan analisis untuk mendapatkan insight.\n\n> Untuk kepentingan visualisasi, maka replace kembali data numerik menjadi string.","8619f13b":"Berdasarkan info data unik tersebut kita bisa tentukan tipe data yang benar, berikut pembagian tipe data:\n- **Categorical data**\n\n|   | Attribute       |    | Attribute          |    | Attribute          |    | Attribute       |\n|---|-----------------|----|--------------------|----|--------------------|----|-----------------|\n| 1 | `gender`        | 6  | `MultipleLines`    | 11 | `TechSupport`      | 16 | `PaymentMethod` |\n| 2 | `SeniorCitizen` | 7  | `InternetService`  | 12 | `StreamingTV`      | 17 | `Churn`         |\n| 3 | `Partner`       | 8  | `Online Security`  | 13 | `StreamingMovies`  |    |                 |\n| 4 | `Dependents`    | 9  | `Online Backup`    | 14 | `Contract`         |    |                 |\n| 5 | `PhoneService`  | 10 | `DeviceProtection` | 15 | `PaperlessBilling` |    |                 |\n\n- **Numerical data**\n\n|   | Attribute                |\n|---|--------------------------|\n| 1 | `tenure` (int)           |\n| 2 | `MonthlyCharges` (float) |\n| 3 | `TotalCharges` (float)   |","026607a9":"### Mapping data (Encoding)\nSebelum melakukan impute data kosong, kita coba lakukan mapping data string menjadi numerik.\n\nStrategi:\n- Replace redundan nilai seperti 'No phone service' dan 'No internet service' menjadi 'No'\n- Replace categorical data yang memiliki nilai 'Yes' menjadi 1 dan 'No' menjadi 0\n- Replace 'Male' menjadi 1 dan 'Female' menjadi 0\n- Pada atribut `InternetService`\n    * Replace 'DSL' menjadi 1 \n    * Replace 'Fiber optic' menjadi 2\n    * Replace 'No' menjadi 3\n- Pada atribut `Contract`\n    * Replace 'Month-to-month' menjadi 1\n    * Replace 'One year' menjadi 2\n    * Replace 'Two year' menjadi 3\n- Pada atribut `PaymentMethod`\n    * Replace 'Electronic check' menjadi 1\n    * Replace 'Mailed check' menjadi 2\n    * Replace 'Bank transfer (automatic)' menjadi 3\n    * Replace 'Credit card (automatic)' menjadi 4\n    \n> Note: Tidak menggunakan One Hot Encoding pada kategori lebih dari 2, karena untuk kepentingan impute data menggunakan KNN. Alternatif lain selain manual mapping, bisa menggunakan OrdinalEncoder dari scikit-learn.","86041e19":"## Data Cleansing\nKita terlebih dahulu cek apakah data terdapat nilai kosong, jenis tipe data, jumlah data, atribut data.","5305edcc":"Terdapat beberapa insight yang kita ketahui:\n- Berdasarkan median `tenure`, kita mengetahui bahwa 50% dari customer tetap di perusahaan selama 29 bulan\n- Rata-rata tagihan bulanan customer adalah \\$65\n- Rata-rata pendapatan yang didapatkan perusahaan dari tiap customer adalah \\$2280\n\nSelanjutnya, kita coba lihat hubungan antar variabel dengan melakukan plotting","de94e82d":"Kita dapat melihat beberapa atribut statistik, seperti:\n- Customer didominasi oleh bukan senior pada `SeniorCitizen`\n- Layanan fiber optic yang paling populer pada `InternetService`\n- Sebagian besar `Contract` customer adalah Month-to-month\n- `PaymentMethod` customer sebagian besar menggunakan Electronic check\n\nUntuk dapat melihat perbandingan kategori, dapat kita plotting menggunakan pie chart.","1368219b":"### Churn terhadap kelompok Customer info","d1d65690":"# Task 1 - Exploratory Data Analysis","aa572f13":"Ketika merubah tipe data pada `TotalCharges` mengalami error. Sebabnya adalah terdapat nilai kosong, yang tidak terdeteksi ketika melakukan pengecekan menggunakan `isnull()`.","3b5fc832":"### Impute categorical data\nData yang berisi kosong:\n-  `gender`, `SeniorCitizen`, `Partner`, `Dependents`, `MultipleLines`, `InternetService`, `OnlineSecurity`, `OnlineBackup`, `DeviceProtection`, `TechSupport`, `StreamingTV`, `StreamingMovies`\n\nStrategi:\n- Karena data yang NULL adalah categorical data, maka dilakukan impute data kosong menggunakan KNN","80f04385":"### MonthlyCharges vs TotalCharges","d4b3a535":"Walaupun data yang kosong berjumlah 11 data, kita boleh saja menghilangkannya karena hanya 0.15% dari data.\nTetapi, kita bisa mengisinya dengan mengalikan `tenure` dengan `MonthlyCharges`. Karena atribut `tenure` adalah jumlah bulan ketika customer tetap menggunakan layanan perusahaan, sedangkan atribute `MonthlyCharges` adalah jumlah yang harus dibayar tiap bulan.\n\nSehingga formula untuk mengisi data kosong pada `TotalCharges` adalah\n\n$TotalCharges = tenure * MonthlyCharges$","8214c3ef":"### Pairplot data numeric","d9c3bf93":"### Boxplot tenure vs TotalCharges","7e52e9ce":"> `InternetService` menggunakan Fiber Optic berdampak Churn dibandingkan yang lain.","5dde1cb0":"### Analisis data numeric\n- Pada plot `tenure vs TotalCharges`, sesuai dengan dugaan kita, bahwa semakin lama customer berada di perusahaan (tenure makin besar), maka semakin besar juga total tagihan customer.\n- Pada plot `MonthlyCharges vs TotalCharges`, dapat terlihat juga semakin besar tagihan bulanan customer, maka semakin besar juga total tagihannya.\n- Pada plot `tenure vs MonthlyCharges`, tidak terdapat korelasi keduanya. Artinya, terdapat customer yang menggunakan service yang sama tagihan bulanannya dalam jangka panjang dan terdapat customer yang langsung menggunakan service dengan tagihan yang langsung mahal.\n- Pada `Box Plot`, dapat kita lihat tidak terdapat data outlier.\n- Pada `barchart tenure count`, dapat kita ketahui bahwa banyak customer yang hanya menggunakan service selama 1 bulan. Tetapi, pada peringkat terbanyak ke-2 dapat kita lihat bahwa banyak customer yang masih bertahan menggunakan service dari perusahaan selama 72 bulan.  ","a171e073":"### Pengelompokkan data categorical\nBerdasarkan atribut yang tersedia, dapat kita kelompokkan menjadi sebagai berikut:\n- Services (9 atribut)\n    * `PhoneService`,`MultipleLines`,`InternetService`,`OnlineSecurity`, `OnlineBackup`,      `DeviceProtection`,`TechSupport`,`StreamingTV`,`StreamingMovies`\n- Customer info (4 atribut)\n    * `gender`, `SeniorCitizen`, `Partner`, `Dependents`\n- Other (3 atribut)\n    * `Contract`, `PaperlessBilling`, `PaymentMethod`\n\n\nSedangkan `Churn` adalah target yang akan kita bandingkan dengan atribut lainnya.","dd3e5ea5":"Hasil dari imputasi dengan KNN, coba kita cek komposisi data dengan data sebelumnya. Seharusnya tidak jauh berbeda.","90f56373":"> Sebelum melakukan imputasi untuk mengisi data kosong, kita coba lihat value unik pada tiap atribut.","b6b3dfca":"### tenure vs MonthlyCharges","1f20d325":"Jumlah data lengkap: **7043 data**\n\nData yang tersedia terdapat NULL sejumlah **1009** pada atribut:\n- `gender`, `SeniorCitizen`, `Partner`, `Dependents`, `MultipleLines`, `InternetService`, `OnlineSecurity`, `OnlineBackup`, `DeviceProtection`, `TechSupport`, `StreamingTV`, `StreamingMovies`","5fe38a29":"### Explore numerical variable\nKita lakukan observasi dari statistik data pada atribut:\n- `tenure`: Number of months the customer has stayed with the company\n- `MonthlyCharge`: The amount charged to the customer monthly\n- `TotalCharges`: The total amount charged to the customer","4bef6246":"> `SeniorCitizen` berdampak pada Churn dibandingkan yang lain","85317c10":"> `Contract` dengan Month-to-month berdampak pada Churn\n\n> `PaymentMethod` dengan Electronic check berdampak pada Churn ","eefe87b4":"## Statistical Summary\nHanya 3 data yang bertipe numerik pada DataFrame. Perlu dilakukan cek tipe data pada tiap atribut apakah sudah tepat tipe datanya.","9b188060":"## Collect and load data\nLoad dataset, data yang disediakan Iykra banyak terdapat kolom kosong dibandingkan dengan data source asli.","79357b7a":"### Explore categorical variable","8eee309f":"> Top 3 fitur yang berkorelasi positif terhadap `Churn` adalah `Contract_Month-to-month`, `InternetService_Fiber optic`, dan `PaymentMethod_Electronic check`\n\n> Top 3 fitur yang berkorelasi negative terhadap `Churn` adalah `tenure`, `Contract_Two year`, dan `InternetService_No`","cb949304":"## Dataset Description\nDataset memiliki jumlah `7043` observations dengan `21` features dan 1 label (`Churn`)\n\n| __Feature Name__ | __Description__ |\n| - | - |\n| customerID | Contains customer ID |  \n| gender | whether the customer female or male | \n| SeniorCitizen | Whether the customer is a senior citizen or not (1, 0) | \n| Partner | Whether the customer has a partner or not (Yes, No) | \n| Dependents | Whether the customer has dependents or not (Yes, No) |  \n| tenure | Number of months the customer has stayed with the company | \n| PhoneService | Whether the customer has a phone service or not (Yes, No) | \n| MultipleLines | Whether the customer has multiple lines r not (Yes, No, No phone service) |\n| InternetService | Customer\u2019s internet service provider (DSL, Fiber optic, No) | \n| OnlineSecurity | Whether the customer has online security or not (Yes, No, No internet service) | \n| OnlineBackup |  Whether the customer has online backup or not (Yes, No, No internet service) | \n| DeviceProtection | Whether the customer has device protection or not (Yes, No, No internet service) | \n| TechSupport | Whether the customer has tech support or not (Yes, No, No internet service) | \n| streamingTV | Whether the customer has streaming TV or not (Yes, No, No internet service) | \n| streamingMovies | Whether the customer has streaming movies or not (Yes, No, No internet service) | \n| Contract | The contract term of the customer (Month-to-month, One year, Two year) | \n| PaperlessBilling | Whether the customer has paperless billing or not (Yes, No) | \n| PaymentMethod | The customer\u2019s payment method (Electronic check, Mailed check, Bank transfer, Credit card) | \n| MonthlyCharges | The amount charged to the customer monthly\u200a | \u200a\n| TotalCharges | The total amount charged to the customer\u200a | \n| Churn | Whether the customer churned or not (Yes or No) |","97f3fc83":"### Churn terhadap kelompok Services","59dac767":"### Encoding\n- Binary encoding pada atribut yang memiliki 2 kategori\n- One Hot Encoding pada atribut yang memiliki lebih dari 2 kategori","9d15df16":"## Finding Correlation","e792901d":"### tenure vs TotalCharges","8bf93735":"## Problem and Task\nYou\u2019ve landed a great job with the Ritz-Jager telecommunication operator, as a data scientist.\n<u>This telecommunication operator wants to improve their business efficiency and know their\ncustomers better by utilizing their customer data and they want to find out about several business\nquestions from the company\u2019s stakeholder<\/u>. Your team of engineer have to analyze the data that\nthey have based on the pre-defined questions that your CEO gave.\n\n## Student workflow:\n- Collecting the data\n- Transforming the data\n- Analyzing the data\n- Answering the business questions by creating the data\n- Visualization\n","253b8149":"### Churn terhadap kelompok Other","12c5f227":"Karena kita berfokus pada churn customer, maka coba kita explore atribute apa yang berperan besar dalam churn.","845303a5":"### Countplot tenure","ad20a8f9":"### Fixing atribut TotalCharges\n"}}