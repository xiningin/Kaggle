{"cell_type":{"6b470e1e":"code","4c5a07d8":"code","2f9f0e91":"code","187d872b":"code","623906ab":"code","674c2de6":"code","7a576f96":"code","b5706896":"code","f24a11ac":"code","d3c50ffb":"code","5487ee00":"code","194fcd0c":"code","25522988":"code","41f61441":"code","da1d10a4":"code","d4b72151":"code","d5ee5afb":"code","641f7159":"markdown","c576435f":"markdown","b6847b68":"markdown"},"source":{"6b470e1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c5a07d8":"from sklearn.datasets import load_iris\niris = load_iris()\nprint(iris.data)\n","2f9f0e91":"print(iris.target)","187d872b":"print(iris.target_names)","623906ab":"print(type(iris.target))","674c2de6":"print(iris.target.shape)\nprint(iris.data.shape)","7a576f96":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=1)","b5706896":"X = iris.data\ny = iris.target","f24a11ac":"knn.fit(X,y)","d3c50ffb":"print(knn.predict( [ [5.1,3.5,1.4,0.2] ] ))","5487ee00":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.50, random_state=42)","194fcd0c":"print(X_train.shape)","25522988":"knn.fit(X_train, y_train)\npredictions = knn.predict(X_test)\nprint(predictions)","41f61441":"print(y_test)","da1d10a4":"from sklearn import metrics\nperformance = metrics.accuracy_score(y_test, predictions)\nprint(performance)","d4b72151":"k_values = {}\nk = 1\n\n\nwhile k <= 25:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train)\n    predictions = knn.predict(X_test)\n    performance = metrics.accuracy_score(y_test, predictions)\n    k_values[k] = round(performance, 4)\n    k += 1\nprint(k_values)","d5ee5afb":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot(list(k_values.keys()),list(k_values.values()) )\nplt.xlabel(\"Values of K\")\nplt.ylabel(performance)\nplt.show()","641f7159":"**Importing KNN**","c576435f":"Seperate Data Into Train and Test Group","b6847b68":"Find the best valuse of K"}}