{"cell_type":{"209520da":"code","60f04d8e":"code","7924fe81":"code","14dde2e5":"code","eb725e16":"code","395a87df":"code","b952f66b":"code","d73bd1d6":"code","c8067af9":"code","e629f486":"code","33f64a98":"code","18cd8b05":"code","38bbc423":"code","b6040f1b":"code","af4e47d0":"code","e241df52":"code","cbd86c70":"code","1c908fec":"code","16e0a55a":"code","5c9657a5":"code","511b0ce1":"code","1088ff84":"code","88c3b476":"code","f8a8e795":"code","8990f95d":"code","29f225bf":"code","3392406a":"code","49c8d321":"code","7965321a":"code","18a08e8d":"code","495e6975":"code","6f32d4ce":"code","1b210766":"code","c5d988c2":"code","a8636eea":"code","6d068980":"code","59b98ba3":"code","16a1df7f":"code","a6ebe0c0":"code","efb62099":"code","fb32bc46":"code","2f0e205b":"code","7d85b0dd":"code","47498182":"code","33753568":"code","55f0966b":"code","9519e6d8":"code","ecf2de3b":"code","bb0da8b5":"markdown","81bb08ac":"markdown","c2de536d":"markdown","8d69671e":"markdown","8e51453d":"markdown","ffb2aa6b":"markdown","cc3d7dd1":"markdown","9422da50":"markdown","7cffd0eb":"markdown","7896f73c":"markdown","4dab6756":"markdown","aec19633":"markdown","8b05322b":"markdown","380509ec":"markdown","32cc4058":"markdown","b337e649":"markdown","2a864b05":"markdown","db5ec56c":"markdown","3d726b11":"markdown","0126e2e1":"markdown","9bc95bf7":"markdown","3e66561c":"markdown","a1963b51":"markdown","4a5a18ea":"markdown","9762afff":"markdown","3c2d14be":"markdown","eeb7e8a0":"markdown","23ca7f5e":"markdown","35c4cb90":"markdown"},"source":{"209520da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60f04d8e":"import matplotlib.pyplot as plt\nimport seaborn as sns","7924fe81":"train=pd.read_csv(r'\/kaggle\/input\/Train.csv')\ntest=pd.read_csv(r'\/kaggle\/input\/Test.csv')\nsample=pd.read_csv(r'\/kaggle\/input\/sample_submission.csv')","14dde2e5":"train.head()","eb725e16":"sample.head()","395a87df":"train.shape","b952f66b":"# Just done this to  keep original data for further analysis.\ntraindf=train.copy()\ntestdf=test.copy()","d73bd1d6":"# Droped Employee id,as it is unique for all the entries.\ntraindf.drop('Employee_ID',axis=1,inplace=True)\ntestdf.drop('Employee_ID',axis=1,inplace=True)","c8067af9":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ncat_features=traindf.columns[traindf.dtypes==object]\nfor col in cat_features:\n    le.fit(traindf[col])\n    testdf[col]=le.transform(testdf[col])\n    traindf[col]=le.transform(traindf[col])","e629f486":"feature=traindf.drop('Attrition_rate',axis=1)\nlabel=traindf.Attrition_rate","33f64a98":"from lightgbm import LGBMRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nlgb=LGBMRegressor(max_depth=5,learning_rate=.01,n_estimators=100,subsample_for_bin=3000,subsample=.6,colsample_bytree=.6,num_leaves=20)\ncv=KFold(n_splits=5,shuffle=True)\nerror=np.array([])\nfor trainind,testind in cv.split(feature,label):\n    X_train,X_test,y_train,y_test=feature.loc[trainind],feature.loc[testind],label[trainind],label[testind]\n    lgb.fit(X_train,y_train)\n    y_pred=lgb.predict(X_test)\n    error=np.append(error,np.sqrt(mean_squared_error(y_test,y_pred)))\nerror.mean()  ","18cd8b05":"import xgboost as xgb\ndmatrix=xgb.DMatrix(feature,label)\nparams={'objective':'reg:squarederror','max_depth':5,'colsample_bytree':.8,'eta':.02,'alpha':1}\nresult=xgb.cv(params,dmatrix,num_boost_round=1000,early_stopping_rounds=20,as_pandas=True,nfold=3)\nresult","38bbc423":"lgb.fit(feature,label)\ny_pred=lgb.predict(testdf)","b6040f1b":"y_pred=lgb.predict(testdf)\nt=pd.read_csv(r'\/kaggle\/input\/Test.csv')\nsave=t[['Employee_ID']]\nsave['Attrition_rate']=y_pred\nsave.to_csv('absolut_baseline.csv',index=False)","af4e47d0":"test.isnull().sum()","e241df52":"test.Age.fillna(train.Age.median(),inplace=True)\ntest.Time_of_service.fillna(1,inplace=True)\ntest.Education_Level.fillna(1,inplace=True)\ntest.Work_Life_balance.fillna(1,inplace=True)\ntest.VAR2.fillna(train.VAR2.median(),inplace=True)\ntest.VAR4.fillna(train.VAR4.median(),inplace=True)","cbd86c70":"train.Age.fillna(train.Age.median(),inplace=True)\ntrain.Time_of_service.fillna(1,inplace=True)\ntrain.Education_Level.fillna(1,inplace=True)\ntrain.Work_Life_balance.fillna(1,inplace=True)\ntrain.VAR2.fillna(train.VAR2.median(),inplace=True)\ntrain.VAR4.fillna(train.VAR4.median(),inplace=True)","1c908fec":"test.isnull().sum()","16e0a55a":"test.Pay_Scale.fillna(1,inplace=True)","5c9657a5":"cat_features=['Education_Level','Post_Level','Pay_Scale','Work_Life_balance']\nfor col in cat_features:\n    train[col]=train[col].astype(str)\n    test[col]=test[col].astype(str)","511b0ce1":"train.drop('Employee_ID',axis=1,inplace=True)\ntest.drop('Employee_ID',axis=1,inplace=True)","1088ff84":"train.describe(exclude='number')","88c3b476":"train.describe()","f8a8e795":"train['isloyal']=(train.Time_of_service>=10).astype(int)\ntrain['isrecentpromoted']=(train.Time_since_promotion<=2).astype(int)\ntrain['isloyalnotpromoted']=((train.Time_of_service>=10)&(train.Time_since_promotion>=2))\ntrain['istopnotpromotes']=((train.Post_Level.astype(int)>=3)&(train.Time_since_promotion>=2)).astype(int)\ntrain['islowernotpromotes']=((train.Post_Level.astype(int)<=3)&(train.Time_since_promotion>=2)).astype(int)","8990f95d":"test['isloyal']=(test.Time_of_service>=10).astype(int)\ntest['isrecentpromoted']=(test.Time_since_promotion<=2).astype(int)\ntest['isloyalnotpromoted']=((test.Time_of_service>=10)&(test.Time_since_promotion>=2))\ntest['istopnotpromotes']=((test.Post_Level.astype(int)>=3)&(test.Time_since_promotion>=2)).astype(int)\ntest['islowernotpromotes']=((test.Post_Level.astype(int)<=3)&(test.Time_since_promotion>=2)).astype(int)","29f225bf":"train['Agecat']=train.Age.apply(lambda x:1 if x<27 else 2 if x<37 else 3 if x<52 else 4)\ntest['Agecat']=test.Age.apply(lambda x:1 if x<27 else 2 if x<37 else 3 if x<52 else 4)","3392406a":"import itertools\ncat_features=train.columns[train.dtypes==object]\nnew=pd.DataFrame(index=train.index)\nfor col1,col2 in itertools.combinations(cat_features,2):\n    new[col1+col2]=train[col1]+train[col2]","49c8d321":"new.head()","7965321a":"newt=pd.DataFrame(index=test.index)\nfor col1,col2 in itertools.combinations(cat_features,2):\n    newt[col1+col2]=test[col1]+test[col2]\n    ","18a08e8d":"train.groupby('Compensation_and_Benefits')['Attrition_rate'].plot(kind='hist',bins=100)\nplt.legend()","495e6975":"train.groupby('Hometown')['Attrition_rate'].plot(kind='hist',bins=100)\nplt.legend()","6f32d4ce":"train.groupby('Relationship_Status')['Attrition_rate'].plot(kind='hist',bins=100)\nplt.legend()","1b210766":"train.groupby('Agecat')['Attrition_rate'].plot(kind='hist',bins=100)\nplt.legend()","c5d988c2":"train.groupby('Time_since_promotion')['Attrition_rate'].plot(kind='hist',bins=100)\nplt.legend()","a8636eea":"train.groupby('Unit')['Attrition_rate'].plot(kind='hist',bins=100)\nplt.legend()","6d068980":"train=train.join(new)\ntest=test.join(newt)","59b98ba3":"cat_features=train.columns[train.dtypes==object]\nfor col in cat_features:\n    le.fit(train[col])\n    test[col]=le.transform(test[col])\n    train[col]=le.transform(train[col])","16a1df7f":"_=train.copy()\n_.dropna(inplace=True)","a6ebe0c0":"feature=_.drop('Attrition_rate',axis=1)\nlabel=_.Attrition_rate","efb62099":"feature.shape","fb32bc46":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.feature_selection import RFE\ndt=DecisionTreeRegressor()\nrfe=RFE(dt,n_features_to_select=15,step=1).fit(feature,label)","2f0e205b":"selected_fea=feature.columns[rfe.support_]","7d85b0dd":"import xgboost as xgb\ndmatrix=xgb.DMatrix(feature[selected_fea],label)\nparams={'objective':'reg:squarederror','max_depth':5,'colsample_bytree':.5,'eta':.02,'alpha':8}\nresult=xgb.cv(params,dmatrix,num_boost_round=1000,early_stopping_rounds=20,as_pandas=True,nfold=3)\nresult","47498182":"xgb_cl=xgb.train(params,dmatrix,num_boost_round=231)\nxgb.plot_importance(xgb_cl)","33753568":"selected_col=['Compensation_and_BenefitsWork_Life_balance','Post_LevelPay_Scale','Pay_ScaleWork_Life_balance','Time_of_service','UnitWork_Life_balance','growth_rate','Age','Education_LevelPay_Scale','Decision_skill_possessWork_Life_balance','UnitPay_Scale','HometownPost_Level','HometownPay_Scale','Decision_skill_possessPay_Scale','VAR6']","55f0966b":"lgb=LGBMRegressor(max_depth=3,learning_rate=.01,n_estimators=50,subsample_for_bin=5000,subsample=.8,colsample_bytree=.6,num_leaves=20)\ncv=KFold(n_splits=5,shuffle=True)\nerror=np.array([])\nfor trainind,testind in cv.split(feature[selected_fea],label):\n    X_train,X_test,y_train,y_test=feature.loc[trainind],feature.loc[testind],label[trainind],label[testind]\n    lgb.fit(X_train,y_train)\n    y_pred=lgb.predict(X_test)\n    error=np.append(error,np.sqrt(mean_squared_error(y_test,y_pred)))\nerror.mean()  ","9519e6d8":"lgb.fit(feature[selected_fea],label)\ny_pred=lgb.predict(test[selected_fea])","ecf2de3b":"#y_pred=xgb_cl.predict(xgb.DMatrix(test[selected_fea]))\nt=pd.read_csv(r'\/kaggle\/input\/Test.csv')\nsave=t[['Employee_ID']]\nsave['Attrition_rate']=y_pred\nsave.to_csv('finalsubmissionlgb.csv',index=False)","bb0da8b5":"# Training lightbm.\nNote: All the hyperparameters have been taken from the GridSearchcv, Which is now in markdown cell you can run to see the best parameters.","81bb08ac":"gs.best_params_","c2de536d":"# Loading datasets.","8d69671e":"# Feature generation","8e51453d":"# Personel comments\ud83e\udd23","ffb2aa6b":"## EDA (plots)","cc3d7dd1":"# Bird's eye view.\nThis notebook majorly divided into two parts, In 1st one i have just leveraged the classifier and trained them without any feature engineering. In 2nd i have done some preliminary EDA, handled missing data, gemerated some new feature and finally trained a more robust model.","9422da50":"# Feature selection\nAs we have huge number of features (73), If we train a model on all these features there is a high chance of model overfitting, So need to select some important features.","7cffd0eb":"### Label encoding of categorical features.","7896f73c":"from sklearn.model_selection import GridSearchCV\nparams={'num_leaves':[20,30,40],'max_depth':[3,5,8],'learning_rate':[.1,.01],'n_estimators':[50,100,300],'subsample_for_bin':[3000,5000],'subsample':[.8],'colsample_bytree':[.6]}\ngs=GridSearchCV(LGBMRegressor(),params,scoring='neg_mean_squared_error',n_jobs=-1).fit(feature[selected_fea],label)","4dab6756":"### Filling missing values","aec19633":"from sklearn.model_selection import GridSearchCV\nparams={'max_depth':[3,5,8],'learning_rate':[.1,.01],'n_estimators':[100,300,500],'subsample_for_bin':[3000,5000,7000],'subsample':[.6,.8],'colsample_bytree':[.6,.8,1]}\ngs=GridSearchCV(LGBMRegressor(),params,scoring='neg_mean_squared_error').fit(feature,label)","8b05322b":"# Absolute base model( Part-I)\nHere we will do nothing like feature engineering, just leverage xgboostclassifier and lightgmclassifier and train them and see how they are performing.\nNote: these classifiers can handle missing(Null) values internally, not need to handle. But requirs all the attributes in integer formate like sckitlearn, So first we'll do LabelEncoder and then move forwards towards training a model.","380509ec":"# Grid search","32cc4058":"best fea10 depth3 reg1","b337e649":"# Final model.\nNow we are ready to train a final model(Lightgbm as it performing better)","2a864b05":"# Eda + feature engineering","db5ec56c":"# Label encoding","3d726b11":"# Training a final model followed by prediction on test dataset for submission","0126e2e1":"# Final model validation","9bc95bf7":" on old 10 feature lgb got 81.216","3e66561c":"### We can see the performance of both the model,Lightgbm is performing somewhat more better tha xgbbost.","a1963b51":"#### XGboost","4a5a18ea":"# Part-II\nMove towards a robust model.","9762afff":"gs.best_params_","3c2d14be":"# Training xgboost.","eeb7e8a0":"# Gridsearchcv","23ca7f5e":"# More robust model","35c4cb90":"best(81.316) v2 fea15 lgb max_depth=5,learning_rate=.01,n_estimators=100,subsample_for_bin=3000,subsample=.6,colsample_bytree=.6"}}