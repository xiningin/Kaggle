{"cell_type":{"c4835039":"code","7f17ec11":"code","6d55f2e4":"code","7f2d63b6":"code","cff530ab":"code","fc22bec4":"code","1eb13bf7":"markdown","26820a7e":"markdown","d05dd512":"markdown","2fe57cd0":"markdown"},"source":{"c4835039":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f17ec11":"df = pd.read_csv(\"..\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv\")","6d55f2e4":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndf['Married\/Single'] = le.fit_transform(df['Married\/Single'])\ndf['House_Ownership'] = le.fit_transform(df['House_Ownership'])\ndf['Car_Ownership'] = le.fit_transform(df['Car_Ownership'])\ndf['Profession'] = le.fit_transform(df['Profession'])\ndf['STATE'] = le.fit_transform(df['STATE'])\ndf['CITY'] = le.fit_transform(df['CITY'])","7f2d63b6":"from sklearn.model_selection import train_test_split\n\nX = df.drop('Risk_Flag', axis=1)\ny = df['Risk_Flag']\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)","cff530ab":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=55, random_state=2021)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_val)\n\n\nprint(\"Accuracy Score:\", round(accuracy_score(y_val, y_pred)*100,2))","fc22bec4":"df_sample = X_val[['Id']].copy()\ndf_sample['risk_flag'] = y_pred\ndf_sample = df_sample.sort_values(\"Id\").reset_index().drop(\"index\", axis=1)\ndf_sample.head()","1eb13bf7":"**Train\/Test Split**","26820a7e":"**Random Forest Classifier**","d05dd512":"**Label Encoder**","2fe57cd0":"**Output**"}}