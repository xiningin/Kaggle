{"cell_type":{"5f14421a":"code","9530e090":"code","61745e5e":"code","e93a4dfa":"code","f17fdaaf":"code","ed8c91e0":"code","b0dbf92f":"code","134c96ec":"code","b3f92f94":"code","9195092f":"code","9d38177f":"code","9a73c0e2":"code","1c9d3af2":"code","03b0e61e":"code","3bbf459c":"code","322892e4":"code","c4b007a3":"code","646e6e53":"code","6a0f6a1f":"code","cf0321ad":"code","856537fb":"markdown","1587663c":"markdown"},"source":{"5f14421a":"import matplotlib.pyplot as plt\nimport numpy as np\nimport cv2\nimport tensorflow as tf\nfrom sklearn.metrics import f1_score \nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Flatten, MaxPooling2D, Dropout, Conv2D","9530e090":"# Loads the data required for detecting the license plates from cascade classifier.\nplate_cascade = cv2.CascadeClassifier('..\/input\/ai-indian-license-plate-recognition-data\/indian_license_plate.xml')\n# add the path to 'india_license_plate.xml' file.","61745e5e":"def detect_plate(img, text=''): # the function detects and perfors blurring on the number plate.\n    plate_img = img.copy()\n    roi = img.copy()\n    plate_rect = plate_cascade.detectMultiScale(plate_img, scaleFactor = 1.2, minNeighbors = 7) # detects numberplates and returns the coordinates and dimensions of detected license plate's contours.\n    for (x,y,w,h) in plate_rect:\n        roi_ = roi[y:y+h, x:x+w, :] # extracting the Region of Interest of license plate for blurring.\n        plate = roi[y:y+h, x:x+w, :]\n        cv2.rectangle(plate_img, (x+2,y), (x+w-3, y+h-5), (51,181,155), 3) # finally representing the detected contours by drawing rectangles around the edges.\n    if text!='':\n        plate_img = cv2.putText(plate_img, text, (x-w\/\/2,y-h\/\/2), \n                                cv2.FONT_HERSHEY_COMPLEX_SMALL , 0.5, (51,181,155), 1, cv2.LINE_AA)\n        \n    return plate_img, plate # returning the processed image.","e93a4dfa":"# Testing the above function\ndef display(img_, title=''):\n    img = cv2.cvtColor(img_, cv2.COLOR_BGR2RGB)\n    fig = plt.figure(figsize=(10,6))\n    ax = plt.subplot(111)\n    ax.imshow(img)\n    plt.axis('off')\n    plt.title(title)\n    plt.show()\n\nimg = cv2.imread('..\/input\/ai-indian-license-plate-recognition-data\/car.jpg')\ndisplay(img, 'input image')","f17fdaaf":"# Getting plate prom the processed image\noutput_img, plate = detect_plate(img)","ed8c91e0":"display(output_img, 'detected license plate in the input image')","b0dbf92f":"display(plate, 'extracted license plate from the image')","134c96ec":"# Match contours to license plate or character template\ndef find_contours(dimensions, img) :\n\n    # Find all contours in the image\n    cntrs, _ = cv2.findContours(img.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n    # Retrieve potential dimensions\n    lower_width = dimensions[0]\n    upper_width = dimensions[1]\n    lower_height = dimensions[2]\n    upper_height = dimensions[3]\n    \n    # Check largest 5 or  15 contours for license plate or character respectively\n    cntrs = sorted(cntrs, key=cv2.contourArea, reverse=True)[:15]\n    \n    ii = cv2.imread('contour.jpg')\n    \n    x_cntr_list = []\n    target_contours = []\n    img_res = []\n    for cntr in cntrs :\n        # detects contour in binary image and returns the coordinates of rectangle enclosing it\n        intX, intY, intWidth, intHeight = cv2.boundingRect(cntr)\n        \n        # checking the dimensions of the contour to filter out the characters by contour's size\n        if intWidth > lower_width and intWidth < upper_width and intHeight > lower_height and intHeight < upper_height :\n            x_cntr_list.append(intX) #stores the x coordinate of the character's contour, to used later for indexing the contours\n\n            char_copy = np.zeros((44,24))\n            # extracting each character using the enclosing rectangle's coordinates.\n            char = img[intY:intY+intHeight, intX:intX+intWidth]\n            char = cv2.resize(char, (20, 40))\n            \n            cv2.rectangle(ii, (intX,intY), (intWidth+intX, intY+intHeight), (50,21,200), 2)\n            plt.imshow(ii, cmap='gray')\n\n            # Make result formatted for classification: invert colors\n            char = cv2.subtract(255, char)\n\n            # Resize the image to 24x44 with black border\n            char_copy[2:42, 2:22] = char\n            char_copy[0:2, :] = 0\n            char_copy[:, 0:2] = 0\n            char_copy[42:44, :] = 0\n            char_copy[:, 22:24] = 0\n\n            img_res.append(char_copy) # List that stores the character's binary image (unsorted)\n            \n    # Return characters on ascending order with respect to the x-coordinate (most-left character first)\n            \n    plt.show()\n    # arbitrary function that stores sorted list of character indeces\n    indices = sorted(range(len(x_cntr_list)), key=lambda k: x_cntr_list[k])\n    img_res_copy = []\n    for idx in indices:\n        img_res_copy.append(img_res[idx])# stores character images according to their index\n    img_res = np.array(img_res_copy)\n\n    return img_res","b3f92f94":"# Find characters in the resulting images\ndef segment_characters(image) :\n\n    # Preprocess cropped license plate image\n    img_lp = cv2.resize(image, (333, 75))\n    img_gray_lp = cv2.cvtColor(img_lp, cv2.COLOR_BGR2GRAY)\n    _, img_binary_lp = cv2.threshold(img_gray_lp, 200, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n    img_binary_lp = cv2.erode(img_binary_lp, (3,3))\n    img_binary_lp = cv2.dilate(img_binary_lp, (3,3))\n\n    LP_WIDTH = img_binary_lp.shape[0]\n    LP_HEIGHT = img_binary_lp.shape[1]\n\n    # Make borders white\n    img_binary_lp[0:3,:] = 255\n    img_binary_lp[:,0:3] = 255\n    img_binary_lp[72:75,:] = 255\n    img_binary_lp[:,330:333] = 255\n\n    # Estimations of character contours sizes of cropped license plates\n    dimensions = [LP_WIDTH\/6,\n                       LP_WIDTH\/2,\n                       LP_HEIGHT\/10,\n                       2*LP_HEIGHT\/3]\n    plt.imshow(img_binary_lp, cmap='gray')\n    plt.show()\n    cv2.imwrite('contour.jpg',img_binary_lp)\n\n    # Get contours within cropped license plate\n    char_list = find_contours(dimensions, img_binary_lp)\n\n    return char_list","9195092f":"# Let's see the segmented characters\nchar = segment_characters(plate)","9d38177f":"for i in range(10):\n    plt.subplot(1, 10, i+1)\n    plt.imshow(char[i], cmap='gray')\n    plt.axis('off')","9a73c0e2":"import tensorflow.keras.backend as K\ntrain_datagen = ImageDataGenerator(rescale=1.\/255, width_shift_range=0.1, height_shift_range=0.1)\npath = '..\/input\/ai-indian-license-plate-recognition-data\/data\/data'\ntrain_generator = train_datagen.flow_from_directory(\n        path+'\/train',  # this is the target directory\n        target_size=(28,28),  # all images will be resized to 28x28\n        batch_size=1,\n        class_mode='sparse')\n\nvalidation_generator = train_datagen.flow_from_directory(\n        path+'\/val',  # this is the target directory\n        target_size=(28,28),  # all images will be resized to 28x28 batch_size=1,\n        class_mode='sparse')","1c9d3af2":"# Metrics for checking the model performance while training\ndef f1score(y, y_pred):\n  return f1_score(y, tf.math.argmax(y_pred, axis=1), average='micro') \n\ndef custom_f1score(y, y_pred):\n  return tf.py_function(f1score, (y, y_pred), tf.double)","03b0e61e":"K.clear_session()\nmodel = Sequential()\nmodel.add(Conv2D(16, (22,22), input_shape=(28, 28, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(32, (16,16), input_shape=(28, 28, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(64, (8,8), input_shape=(28, 28, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(64, (4,4), input_shape=(28, 28, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(4, 4)))\nmodel.add(Dropout(0.4))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(36, activation='softmax'))\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer=optimizers.Adam(lr=0.0001), metrics=[custom_f1score])","3bbf459c":"model.summary()","322892e4":"class stop_training_callback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('val_custom_f1score') > 0.99):\n      self.model.stop_training = True","c4b007a3":"batch_size = 1\ncallbacks = [stop_training_callback()]\nmodel.fit_generator(\n      train_generator,\n      steps_per_epoch = train_generator.samples \/\/ batch_size,\n      validation_data = validation_generator, \n      epochs = 80, verbose=1, callbacks=callbacks)","646e6e53":"# Predicting the output\ndef fix_dimension(img): \n  new_img = np.zeros((28,28,3))\n  for i in range(3):\n    new_img[:,:,i] = img\n  return new_img\n  \ndef show_results():\n    dic = {}\n    characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for i,c in enumerate(characters):\n        dic[i] = c\n\n    output = []\n    for i,ch in enumerate(char): #iterating over the characters\n        img_ = cv2.resize(ch, (28,28), interpolation=cv2.INTER_AREA)\n        img = fix_dimension(img_)\n        img = img.reshape(1,28,28,3) #preparing image for the model\n        y_ = model.predict_classes(img)[0] #predicting the class\n        character = dic[y_] #\n        output.append(character) #storing the result in a list\n        \n    plate_number = ''.join(output)\n    \n    return plate_number\n\nprint(show_results())","6a0f6a1f":"# Segmented characters and their predicted value.\nplt.figure(figsize=(10,6))\nfor i,ch in enumerate(char):\n    img = cv2.resize(ch, (28,28), interpolation=cv2.INTER_AREA)\n    plt.subplot(3,4,i+1)\n    plt.imshow(img,cmap='gray')\n    plt.title(f'predicted: {show_results()[i]}')\n    plt.axis('off')\nplt.show()","cf0321ad":"plate_number = show_results()\noutput_img, plate = detect_plate(img, plate_number)\ndisplay(output_img, 'detected license plate number in the input image')","856537fb":"## In this tutorial, I will show how to code a license plate recognizer for Indian license plates using deep learning and some image processing.\n### Find the detailed explanation of the project in this blog: https:\/\/towardsdatascience.com\/ai-based-indian-license-plate-detector-de9d48ca8951?source=friends_link&sk=a2cbd70e630f6dc3d030e3bae34d98ef","1587663c":"### Model for characters"}}