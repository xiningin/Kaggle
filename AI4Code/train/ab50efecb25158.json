{"cell_type":{"2a9e7805":"code","85765f57":"code","3cf2a018":"code","455a2d1c":"code","905dd100":"code","9da1d24f":"code","838f61be":"code","fe7b1ebf":"code","b5a11a37":"code","592e3a0a":"code","919638ca":"code","4dc4616d":"code","29dfb7d9":"code","77e3cb83":"code","4015198d":"code","a21fdf48":"code","6a8141f4":"code","5fbe40ac":"code","d05dd241":"code","1c4a6dc3":"code","9b6c86d4":"code","84304a50":"code","156c0afb":"code","1e0786d4":"code","5c293758":"code","915ddbc8":"code","1b69cc6e":"code","2c895ee3":"code","5349f038":"code","39b24525":"code","d8bf69d6":"markdown","ef492fbd":"markdown","51cedb28":"markdown","1f74a249":"markdown","990691b5":"markdown","3e32590f":"markdown","1a1483c4":"markdown","e4480580":"markdown","891f0f91":"markdown","987713e4":"markdown","abda36bb":"markdown","6a5a34ad":"markdown","8d5149b6":"markdown","c45dd4e6":"markdown","92b65823":"markdown","52b917a9":"markdown","485840c5":"markdown","37c184b1":"markdown","06fc77e4":"markdown","9f0966e3":"markdown","baeee118":"markdown","5d4b44db":"markdown"},"source":{"2a9e7805":"%%writefile submission.py\n\n# Imports helper functions\nfrom kaggle_environments.envs.halite.helpers import *\nfrom random import choice, randint\nimport numpy as np\nimport pandas as pd\nimport scipy.ndimage\nimport scipy.optimize\n\n# Directions a ship can move\ndirections = [ShipAction.NORTH, ShipAction.EAST, ShipAction.SOUTH, ShipAction.WEST]\ninit_Controller = False\ncontroller = None","85765f57":"%%writefile -a submission.py\n\nclass Controller():\n        \n    def __init__(self, obs, config):\n        \n        #Initialise Instance Variables\n        self.size = config.size\n        self.board = Board(obs, config)  \n        self.me = self.board.current_player\n        self.episode_steps = self.board.configuration.episode_steps\n        self.convert_cost = self.board.configuration.convert_cost\n        self.spawn_cost = self.board.configuration.spawn_cost\n        self.HALITE_THRESHOLD = 50\n        self.HALITE_THRESHOLD_MIN = 50\n        self.REUSE_TARGET_LIMIT = 1\n        self.MIN_SHIPS = 5\n        #self.RECURSION_LIMIT = 2\n        #self.STATIONARY_SHIPS_LIMIT = 2\n        \n        #Lookup Table\n        self.reference_distance = {}\n        self.create_distance_lookup()        \n\n        #self.generate_farming_map()","3cf2a018":"%%writefile -a submission.py\n\n    def next_actions(self, obs, config):\n    \n        #Initialise Context Variables\n        self.board = Board(obs, config)\n        self.me = self.board.current_player\n        self.ships = self.me.ships\n        self.shipyards = self.me.shipyards\n        self.ship_ids = self.me.ship_ids\n        self.shipyard_ids = self.me.shipyard_ids\n\n        self.enemy_ships = []\n        self.enemy_shipyards = []\n        \n        self.max_enemy_ships = 0\n        self.max_enemy_halite = 0\n\n        #Initialise Loop Variables\n        self.remaining_ship_count = len(self.ships)\n        self.remaining_shipyard_count = len(self.shipyards)\n        self.remaining_halite = self.me.halite\n        self.halite_in_ships = 0\n        self.overwhelming_ship_spawn = False\n        #self.too_many_ships_onboard = False\n        #if self.remaining_ship_count <= len(self.board.ships) \/\/ 5 :\n        #    self.too_many_ships_onboard = True\n        \n        for ship in self.ships:\n            self.halite_in_ships += ship.halite\n        \n        zero_ships = 0\n        \n        for player in self.board.opponents:\n            enemy_halite = player.halite\n            self.enemy_ships.extend(player.ships)\n            self.enemy_shipyards.extend(player.shipyards)\n            for ship in player.ships:\n                enemy_halite += ship.halite\n                if ship.halite <= 0.0 :\n                    zero_ships += 1\n            if enemy_halite >= (self.remaining_halite + self.halite_in_ships) :\n                self.max_enemy_ships = max(self.max_enemy_ships, len(player.ships))\n            self.max_enemy_halite = max(self.max_enemy_halite, enemy_halite)\n            #if len(player.ships) >= len(self.board.ships) \/\/ 2 :\n            #    self.too_many_ships_onboard = True\n            #if len(player.ships) >= 2 * self.remaining_ship_count : \n            #    self.too_many_ships_onboard = True  \n            #if len(player.ships) >= 1.5 * self.remaining_ship_count : \n            #    self.too_many_ships_onboard = True                \n      \n        if zero_ships >= len(self.board.ships) \/\/ 2 :\n            self.overwhelming_ship_spawn = True\n        if zero_ships >= 2 * self.remaining_ship_count : \n            self.overwhelming_ship_spawn = True   \n        #if zero_ships >= self.remaining_ship_count : \n        #    self.too_many_ships_onboard = True             \n        #self.recursion_level = 0\n        #self.stationary_ships = 0           \n        self.assigned_mining_targets = {}        \n    \n        self.update_swarm_info()\n        \n        self.update_halite_map()\n        self.minimum_ships = 5\n        if self.board.step <= self.episode_steps \/\/ 4:\n            self.minimum_ships = 13\n        elif self.board.step <= self.episode_steps * 5 \/\/ 8 and self.board.step > self.episode_steps \/\/ 4:\n            self.minimum_ships = 9\n        elif self.board.step <= self.episode_steps * 3 \/\/ 4 and self.board.step > self.episode_steps * 5 \/\/ 8:\n            self.minimum_ships = 9\n        elif self.board.step <= self.episode_steps * 7 \/\/ 8 and self.board.step > self.episode_steps * 3 \/\/ 4:\n            self.minimum_ships = 9\n        \n        self.MIN_SHIPS = self.minimum_ships\n        #self.MIN_SHIPS = max(self.minimum_ships, self.max_enemy_ships + 1)#, self.remaining_ship_count)\n        #self.MIN_SHIPS = max(9, self.remaining_ship_count)\n        self.ship_next_actions()\n        self.shipyard_next_actions()\n        #print(self.board.step, self.me.id, self.me.next_actions)\n        return self.me.next_actions","455a2d1c":"%%writefile -a submission.py\n\n    def ship_next_actions(self):\n\n        # no ships left return\n        if self.remaining_ship_count == 0:\n            return\n\n        # try to find allowed actions for each ship\n        # self ships are not taken in to consideration\n        # must be considered in iteration\n        self.optimize_ship_action_matrix()\n\n        if self.start_end_move:\n            self.ship_action_end_move()  \n            \n        # allow only single convert in steps other than towards game end\n        # to have shipyards atleast 10 steps or so apart to have good board coverage\n        self.allow_convert = True\n        \n        #else:\n        #    self.convert_candidates = sorted(self.convert_candidates, key=self.convert_candidates.get, reverse = True)            \n        #    if self.allow_convert :                \n        #        for ship in self.convert_candidates:\n                    #if ship.halite >= 2 * self.convert_cost:\n        #            if self.ship_action_convert(ship):\n        #                self.allow_convert = False\n        #                break                     \n        \n        # if all ships were converted no need to proceed further in this function\n        #if self.remaining_ship_count == 0:\n        #    return\n        \n        ship_list = self.find_best_ship_to_convert()\n        # 100 to 150 to see if my ships can offload halite to shipyard\n        # i have a shipyard but i am not allowed to go near it\n        # try one ship at a time\n        if self.allow_convert and self.board.step >= 150 and\\\n           self.halite_in_ships >= self.remaining_ship_count * self.convert_cost:\n            # i am not being allowed to offload to shipyard\n            # sacrifice my ship and enemy ship for one additional ship\n            # ideally one with max halite            \n            for ship in ship_list:\n                if self.is_not_none(ship) and ship.halite >= 2 * self.convert_cost:\n                    if self.ship_action_convert(ship):\n                        self.allow_convert = False\n                        break\n                        \n        # no shipyards left and i may have multiple ships to choose from               \n        if self.allow_convert and self.remaining_shipyard_count == 0 and \\\n           (self.should_i_spawn() or self.board.step >= (self.episode_steps - self.size - 2)  or\\\n            self.halite_in_ships >= max(20 * self.HALITE_THRESHOLD, self.remaining_halite\/\/10)):\n            for ship in ship_list:\n                if self.is_not_none(ship):\n                    if self.ship_action_convert(ship):\n                        self.allow_convert = False\n                        break\n                        \n        # end of game is near\n        if self.board.step == (self.episode_steps - 2) or self.convert_now():\n            for ship in self.ships:\n                if ship.halite > self.convert_cost:\n                    # check here for conversion status so that if any adjacent ship wants to drop halite they can do so\n                    if self.ship_action_convert(ship):\n                        continue\n        \n        ","905dd100":"%%writefile -a submission.py\n\n    def shipyard_next_actions(self):\n            \n        # do not spawn new ships towards competition end\n        if (self.convert_now() or self.board.step > self.episode_steps - self.size):\n            return\n            \n        for shipyard in self.shipyards:\n            \n            # there is a ship in shipyard and it is staying\n            if self.is_not_none(shipyard.cell.ship) and self.is_none(shipyard.cell.ship.next_action):\n                continue\n            \n            #protect shipyard by spawning ship and sacrificing if required\n            if (self.is_none(shipyard.cell.ship) and \\\n               len(self.get_enemy_ships(self.get_adjacent_ships(shipyard.cell))) != 0):\n                #if self.remaining_halite >= self.spawn_cost * (self.remaining_ship_count + self.remaining_shipyard_count) and self.remaining_halite >= halite_in_ships:\n                if self.shipyard_action_spawn(shipyard):\n                    continue\n                    \n            # if concentration of ships around this shipyard is high go to other shipyards for spawning\n            if self.remaining_shipyard_count > 1:\n                count = 0\n                limit = self.remaining_ship_count \/\/ self.remaining_shipyard_count + 1\n                for my_ship in self.ships:\n                    if self.get_nearest_entity(my_ship.position, self.shipyard_ids) == shipyard:\n                        count += 1\n                    if count > limit:\n                        break\n                if count > limit:\n                    continue            \n            \n            #if self.board.step < 11:\n            if self.should_i_spawn():\n                if self.shipyard_action_spawn(shipyard):\n                    continue      ","9da1d24f":"%%writefile -a submission.py\n\n    def shipyard_action_spawn(self, shipyard):\n        \n        protect_spawn = True\n        adjacent_ships = self.get_adjacent_ships(shipyard.cell)\n        \n        for my_ship in self.get_my_ships(adjacent_ships):\n            if my_ship.next_action == self.get_dir_to(my_ship.position, shipyard.position):\n                protect_spawn = False\n                break\n\n        for enemy_ship in self.get_enemy_ships(adjacent_ships):\n            if enemy_ship.halite <= 0.0:\n                protect_spawn = False\n                break\n                \n        if protect_spawn :        \n            if self.remaining_halite >= self.spawn_cost:\n                shipyard.next_action = ShipyardAction.SPAWN\n                self.remaining_ship_count += 1\n                self.remaining_halite -= self.spawn_cost    \n                return True  \n            \n        return False ","838f61be":"%%writefile -a submission.py\n\n    def ship_action_convert(self, ship):\n        # I should not convert a ship if I am in a shipyard\n        if self.is_not_none(ship.cell.shipyard):\n            return False\n        if (self.remaining_halite + ship.halite) >= self.convert_cost:\n            ship.next_action = ShipAction.CONVERT\n            self.remaining_ship_count -= 1\n            self.remaining_shipyard_count += 1\n            self.remaining_halite += ship.halite\n            self.remaining_halite -= self.convert_cost    \n            return True\n        return False","fe7b1ebf":"%%writefile -a submission.py\n\n    def find_best_ship_to_convert(self):\n\n        first_choice = {}\n        second_choice = {}\n        ship_list = []\n        \n        if len(self.convert_candidates) != 0:\n            self.convert_candidates = sorted(self.convert_candidates, key = self.convert_candidates.get,\\\n                                             reverse = True)\n            ship_list.extend(self.convert_candidates)\n        \n        for ship in self.ships:\n            if ship not in ship_list:\n                if not self.ship_actions_bitfield[ship]['pirate']:\n                    first_choice[ship] = ship.halite\n                else:\n                    second_choice[ship] = ship.halite\n                                \n        if len(first_choice) != 0:\n            first_choice = sorted(first_choice, key = first_choice.get, reverse = True)\n            ship_list.extend(first_choice)\n        \n        if len(second_choice) != 0:\n            second_choice = sorted(second_choice, key = second_choice.get, reverse = True)\n            ship_list.extend(second_choice)\n        \n        return ship_list","b5a11a37":"%%writefile -a submission.py\n    \n    def should_i_spawn(self):\n        \n        if (self.convert_now() or self.board.step > self.episode_steps - 2 * self.size):\n                # do not spawn new ships towards competition end\n                return False\n        \n        #if self.reached_base:\n        if self.board.step > 11:\n            if self.remaining_ship_count > self.MIN_SHIPS:\n                if self.remaining_ship_count > len(self.board.ships) \/\/ 2 + 2 and self.remaining_halite <= self.max_enemy_halite:\n                    return False\n                if self.remaining_halite < 2 * self.convert_cost:\n                    return False\n                if self.remaining_ship_count < len(self.board.ships) \/\/ 5 and self.board.step <= self.episode_steps*3\/\/4:\n                    return True    \n                if self.board.step <= self.episode_steps\/\/4 and ((self.remaining_halite + self.halite_in_ships) <= (self.max_enemy_halite + self.convert_cost)):# or\\\n               #self.remaining_ship_count > (len(self.board.ships) \/\/ 2) or\\\n               #self.remaining_ship_count > self.max_enemy_ships):\n                    return False\n                elif self.board.step <= self.episode_steps\/\/2 and ((self.remaining_halite + self.halite_in_ships) <= (self.max_enemy_halite + 1.5 * self.convert_cost)):# or\\\n                    return False\n                elif self.board.step <= self.episode_steps*3\/\/4 and ((self.remaining_halite + self.halite_in_ships) <= (self.max_enemy_halite + 2 * self.convert_cost)):# or\\\n                    return False\n                elif self.board.step <= self.episode_steps*7\/\/8 and ((self.remaining_halite + self.halite_in_ships) <= (self.max_enemy_halite + 3 * self.convert_cost)):# or\\\n                    return False\n                elif self.board.step > self.episode_steps*7\/\/8 and (self.remaining_halite <= (self.max_enemy_halite + self.convert_cost)):# or\\\n                    return False\n\n            #elif self.board.step >= 200 and self.board.step <= 350 and self.remaining_ship_count > max(3 * (self.MIN_SHIPS - 1), len(self.shipyards) * self.MIN_SHIPS):\n            #    return False        \n            #if self.remaining_ship_count <= 3 * (self.MIN_SHIPS * len(self.shipyards) - 1) or\\\n             #  (self.remaining_ship_count <= min(4 * self.MIN_SHIPS * len(self.shipyards), self.max_enemy_ships) and\\\n              #  self.HALITE_THRESHOLD >= 2 * self.HALITE_THRESHOLD_MIN) :\n               # self.remaining_ship_count <= self.max_enemy_ships and\\\n               # self.HALITE_THRESHOLD >= self.HALITE_THRESHOLD_MIN) or\\\n               #(self.remaining_ship_count <= 4 * self.MIN_SHIPS and\\\n               # self.remaining_ship_count <= self.max_enemy_ships and\\\n               # self.HALITE_THRESHOLD >= 2 * self.HALITE_THRESHOLD_MIN) or\\\n               #(self.remaining_ship_count <= 5 * self.MIN_SHIPS * len(self.shipyards) - 1 and\\\n               # self.HALITE_THRESHOLD >=  3 * self.HALITE_THRESHOLD_MIN):\n                #return True\n        #else:\n        #    return False\n        return True","592e3a0a":"%%writefile -a submission.py\n    \n    def should_i_move_towards_shipyard(self, ship):\n        #if self.should_i_spawn and self.remaining_halite <= self.convert_cost:\n         #   if ship.halite >= 2 * self.convert_cost:\n          #      return True \n        #else:\n        if self.remaining_shipyard_count == 0:\n            return False        \n        level = 0\n        if (self.HALITE_THRESHOLD <=  self.HALITE_THRESHOLD_MIN):\n            level = 1\n        elif (self.HALITE_THRESHOLD > self.HALITE_THRESHOLD_MIN and\\\n            self.HALITE_THRESHOLD <= 2 * self.HALITE_THRESHOLD_MIN):\n            level = 2\n        elif (self.HALITE_THRESHOLD > 2 * self.HALITE_THRESHOLD_MIN and\\\n            self.HALITE_THRESHOLD <= 3 * self.HALITE_THRESHOLD_MIN):\n            level = 3\n        elif (self.HALITE_THRESHOLD > 3 * self.HALITE_THRESHOLD_MIN and\\\n            self.HALITE_THRESHOLD <= 4 * self.HALITE_THRESHOLD_MIN):\n            level = 4\n        elif (self.HALITE_THRESHOLD > 4 * self.HALITE_THRESHOLD_MIN and\\\n            self.HALITE_THRESHOLD <= 5 * self.HALITE_THRESHOLD_MIN):\n            level = 5\n        elif (self.HALITE_THRESHOLD > 5 * self.HALITE_THRESHOLD_MIN and\\\n            self.HALITE_THRESHOLD <= 6 * self.HALITE_THRESHOLD_MIN):\n            level = 6\n        elif  (self.HALITE_THRESHOLD > 6 * self.HALITE_THRESHOLD_MIN):    \n            level = 7\n\n        if self.overwhelming_ship_spawn:\n            level = -1\n        elif self.episode_steps - self.board.step <= self.size + 2:\n            level = 0\n        #elif self.too_many_ships_onboard:\n        #    level = 0\n        elif self.remaining_halite < 2 * self.convert_cost and\\\n             ((self.board.step >= self.episode_steps \/\/ 5 and ship.halite >= 2 * self.convert_cost \/\/ self.remaining_ship_count) or\\\n              (self.board.step < self.episode_steps \/\/ 5 and ship.halite >= 1.5 * self.convert_cost)):\n            return True\n        elif self.board.step < self.episode_steps \/\/ 5:\n            level = 7\n        elif len(self.board.ships) < 4 * self.MIN_SHIPS:\n        #    factor = (400 - self.board.step) \/\/ self.size\n            level = 6\n        #elif self.should_i_spawn():\n        #    level -= 1\n    #ship.halite >= min(self.HALITE_THRESHOLD, self.HALITE_THRESHOLD_MIN) and level <= 0\n        if (ship.halite > 0.0 and level < 0) or\\\n           (ship.halite >= min(self.HALITE_THRESHOLD, self.HALITE_THRESHOLD_MIN) and level == 0) or\\\n           (ship.halite >= 1 * self.HALITE_THRESHOLD_MIN and level == 1) or\\\n           (ship.halite >= 2 * self.HALITE_THRESHOLD_MIN and level == 2) or\\\n           (ship.halite >= 4 * self.HALITE_THRESHOLD_MIN and level == 3) or\\\n           (ship.halite >= 8 * self.HALITE_THRESHOLD_MIN and level == 4) or\\\n           (ship.halite >= 16 * self.HALITE_THRESHOLD_MIN and level == 5) or\\\n           (ship.halite >= 32 * self.HALITE_THRESHOLD_MIN and level == 6) or\\\n           (ship.halite >= 64 * self.convert_cost and level >= 7):\n            return True\n        return False","919638ca":"%%writefile -a submission.py\n    \n    def am_i_powerful(self, ship, list_of_ships, consider_neighbours = True, skip_conflict = False):\n        i_am_powerful = True\n        strongest_ship = ship\n        conflict = False\n        for enemy_ship in self.get_enemy_ships(list_of_ships):\n            if enemy_ship.halite < ship.halite:\n                strongest_ship = enemy_ship\n                i_am_powerful = False\n                break\n            elif enemy_ship.halite == ship.halite:\n                i_am_powerful = False\n                conflict = True\n        if consider_neighbours:\n            if not i_am_powerful and len(self.get_my_ships(list_of_ships)) != 0:\n                # if i have an adjancent self ship which is the strongest of the lot,\n                # i am still powerful\n                # initialise with weaker ship ie me\n                for other_ship in list_of_ships:\n                    if other_ship.halite < strongest_ship.halite:\n                        strongest_ship = other_ship\n                        conflict = False\n                    elif other_ship.halite == strongest_ship.halite:\n                        if other_ship.player != strongest_ship.player:\n                            conflict = True\n                        if other_ship.player == ship.player:\n                            strongest_ship = other_ship\n        if strongest_ship.player == ship.player and (not conflict or skip_conflict):\n            i_am_powerful = True\n        return i_am_powerful","4dc4616d":"%%writefile -a submission.py\n    \n    def optimize_ship_action_matrix(self):\n        \n        if self.remaining_ship_count == 0:\n            return\n        \n        self.start_end_move = False\n        \n        self.position_entries = []\n        self.ship_actions_bitfield = {}\n        self.convert_candidates = {}\n        should_i_spawn = self.should_i_spawn()\n        \n        for ship in self.ships: \n            \n            self.ship_actions_bitfield[ship] = {}\n            self.ship_actions_bitfield[ship]['actions'] = {}\n            self.ship_actions_bitfield[ship]['actions'][ship.position] = {}\n            self.ship_actions_bitfield[ship]['actions'][ship.position]['action'] = None            \n            self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] = 0\n            self.ship_actions_bitfield[ship]['pirate'] = False\n            self.ship_actions_bitfield[ship]['convert_candidate'] = True\n            self.ship_actions_bitfield[ship]['assigned'] = True\n            \n            should_i_move_towards_shipyard = self.should_i_move_towards_shipyard(ship)\n\n            nearest_shipyard, distance_nearest_shipyard, direction1_nearest_shipyard, \\\n            direction2_nearest_shipyard = self.get_nearest_shipyard_details(ship, self.shipyard_ids)\n            \n            self.ship_actions_bitfield[ship]['nearest_shipyard'] = {}\n            self.ship_actions_bitfield[ship]['nearest_shipyard']['shipyard'] = nearest_shipyard\n            self.ship_actions_bitfield[ship]['nearest_shipyard']['distance'] = distance_nearest_shipyard\n            self.ship_actions_bitfield[ship]['nearest_shipyard']['direction1'] = direction1_nearest_shipyard\n            self.ship_actions_bitfield[ship]['nearest_shipyard']['direction2'] = direction2_nearest_shipyard\n            \n            swarm_shipyard, ship_index, am_i_guard = self.get_swarm_shipyard_details(ship, nearest_shipyard)\n\n            if self.am_i_powerful(ship, self.get_adjacent_ships(ship.cell)):\n                self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] = 500\n            else:\n                self.ship_actions_bitfield[ship]['convert_candidate'] = False\n\n            for other_ship in self.get_enemy_ships(self.get_adjacent_ships(ship.cell)):\n                if other_ship.halite < ship.halite:\n                    self.ship_actions_bitfield[ship]['pirate'] = True\n                    break\n\n            box_in_possibility_count = 0        \n            \n            for direction in directions:\n                \n                dict_direction = {}\n                dict_direction['action'] = direction\n                dict_direction['cost'] = 0\n                \n                adjacent_ship_in_direction =  self.get_adjacent_ship_in_direction(ship.cell, direction)\n                nearby_ships_in_direction = self.get_nearby_ships_in_direction(ship.cell, direction)\n                approaching_ships_in_direction = self.get_approaching_ships_in_direction(ship.cell, direction)\n                adjacent_shipyard_in_direction = self.get_adjacent_shipyard_in_direction(ship.cell, direction)\n                halite_adjacent_cell_in_direction = self.get_adjacent_halite_in_direction(ship.cell, direction)\n\n                adjacent_nearby_ships = list(nearby_ships_in_direction)\n                if self.is_not_none(adjacent_ship_in_direction):\n                    adjacent_nearby_ships.append(adjacent_ship_in_direction)\n                    \n                adjacent_nearby_approaching_ships = self.union_of_lists(adjacent_nearby_ships, \\\n                                                                        self.get_enemy_ships(approaching_ships_in_direction))\n                \n                i_am_powerful = self.am_i_powerful(ship, adjacent_nearby_approaching_ships)\n                if i_am_powerful:\n                    dict_direction['cost'] = 500\n                else:\n                    self.ship_actions_bitfield[ship]['convert_candidate'] = False\n                    i_am_powerful = self.am_i_powerful(ship, adjacent_nearby_ships)\n                    if i_am_powerful:\n                        dict_direction['cost'] = 500                \n                for other_ship in self.get_enemy_ships(approaching_ships_in_direction):\n                    if other_ship.halite < ship.halite:\n                        dict_direction['cost'] -= 50\n                        \n                if dict_direction['cost'] < 400:\n                    box_in_possibility_count += 1\n                    \n                if self.am_i_powerful(ship, nearby_ships_in_direction, False):\n                    # weak attack on enemy ships\n                    if self.is_not_none(adjacent_ship_in_direction) and\\\n                       self.is_enemy_ship(adjacent_ship_in_direction):\n                        if adjacent_ship_in_direction.halite > ship.halite:\n                            dict_direction['cost'] += adjacent_ship_in_direction.halite \/\/ 50\n                            if self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] >= 500:\n                                self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += adjacent_ship_in_direction.halite \/\/ 50\n                        #elif adjacent_ship_in_direction.halite == ship.halite and\\\n                        #     len(adjacent_ship_in_direction.player.ships) >= self.remaining_ship_count:        \n                        #    if self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] >= 500:\n                        #        self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += adjacent_ship_in_direction.halite \/\/ 50                            \n                    # 1\/5 since it is 1 out of 5 options, 1\/2 because it can be a nearby ship\n                    # 1\/5 since boxin is 1 out of 5 options of my other ship\n                  #  self.stationary_ships += 1\n                    \n                # may add up to 500\/4\/2 = 62.5 in this step\n                if i_am_powerful and not self.ship_actions_bitfield[ship]['pirate'] and\\\n                   not am_i_guard and\\\n                   halite_adjacent_cell_in_direction >= self.HALITE_THRESHOLD \/\/ 2:\n                    #if not should_i_spawn:\n                    #assign = False\n                    # maintain quadrants\n                    #if halite_adjacent_cell_in_direction >= min(2 * self.HALITE_THRESHOLD_MIN, self.HALITE_THRESHOLD):\n                    #    assign = True\n                    #elif self.is_not_none(ship_index) and self.is_not_none(swarm_shipyard):\n\n                    #    direction1_check = self.get_dir_to(swarm_shipyard.position,\\\n                    #                                           (ship.position + direction.to_point())%self.size)\n                    #    direction2_check = self.get_dir_to_alt(swarm_shipyard.position,\\\n                    #                                           (ship.position + direction.to_point())%self.size)\n\n                    #    if (ship_index % 2 == 0):\n                    #        if directions[ship_index % len(directions)] == direction1_check and\\\n                    #               (directions[(ship_index +1) % len(directions)] == direction2_check or\\\n                    #                directions[ship_index % len(directions)] == direction2_check):\n                    #            assign = True\n                    #    else:\n                    #        if directions[ship_index % len(directions)] == direction2_check and\\\n                    #               (directions[(ship_index +1) % len(directions)] == direction1_check or\\\n                    #                directions[ship_index % len(directions)] == direction1_check):\n                    #            assign = True\n                    #else:\n                    #    assign = True \n                    #if assign:\n                    dict_direction['cost'] += (halite_adjacent_cell_in_direction \/\/ 4 \/\/ 2)\n                        # \/\/4 since I can mine only 25% in a turn\n                        # \/\/2 since I can mine in next step only possibly   \n\n                elif not i_am_powerful :\n                    if halite_adjacent_cell_in_direction <= 0.0 and not am_i_guard:\n                        dict_direction['cost'] += 10\n                    else:\n                        dict_direction['cost'] -= halite_adjacent_cell_in_direction\n\n                #if ship.halite <= 0.0 and not self.ship_actions_bitfield[ship]['pirate']:\n                #    if self.stationary_ships <= self.STATIONARY_SHIPS_LIMIT and ship.position in self.farming_targets:\n                #        self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 100\n                #        self.stationary_ships += 1\n                        \n                if self.is_not_none(adjacent_ship_in_direction) and not am_i_guard:\n                    if self.is_enemy_ship(adjacent_ship_in_direction):   \n                        # in a shipyard or not\n                        if (len(self.get_my_shipyards(self.get_nearby_shipyards(adjacent_ship_in_direction.cell))) != 0 or\\\n                            len(self.get_my_shipyards(self.get_adjacent_shipyards(adjacent_ship_in_direction.cell))) != 0):\n                            if self.am_i_powerful(ship, nearby_ships_in_direction, False) and\\\n                               adjacent_ship_in_direction.halite <= ship.halite :\n                                dict_direction['cost'] += 500\n\n                #don't waste my ship for collision with enemy shipyard\n                #can be modified for an offensive version of bot\n                if self.is_not_none(adjacent_shipyard_in_direction):\n                    if self.is_enemy_shipyard(adjacent_shipyard_in_direction):                        \n                        if (len(self.get_my_shipyards(self.get_nearby_shipyards(adjacent_shipyard_in_direction.cell))) != 0 or\\\n                            len(self.get_my_shipyards(self.get_adjacent_shipyards(adjacent_shipyard_in_direction.cell))) != 0):\n                            if (self.is_none(adjacent_shipyard_in_direction.cell.ship) and\\\n                                (adjacent_shipyard_in_direction.player.halite < self.convert_cost or\\\n                                self.halite_in_ships >= max(20 * self.HALITE_THRESHOLD, self.remaining_halite\/\/10)) and\\\n                                self.am_i_powerful(ship, nearby_ships_in_direction, False)):\n                                dict_direction['cost'] += 500\n                        elif not am_i_guard and ship.halite <= 0.0 and ship.cell.halite <= 0.0 and\\\n                           len(adjacent_shipyard_in_direction.player.ships) >= self.remaining_ship_count :#check for active player\n                            self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 1000\n                        #elif ship.halite <= self.HALITE_THRESHOLD and (self.should_i_spawn() or\\\n                        #     self.remaining_ship_count >= len(self.board.ships) \/\/ 2) and\\\n                        #     len(adjacent_shipyard_in_direction.player.ships) != 0 and\\\n                        #     adjacent_shipyard_in_direction.player.halite < self.spawn_cost and dict_direction['cost'] > 400:\n                        #    dict_direction['cost'] += 500\n                        else:\n                            dict_direction['cost'] -= (500 + ship.halite)\n                        #and not self.ship_actions_bitfield[ship]['pirate']:\n                        #    if self.stationary_ships <= self.STATIONARY_SHIPS_LIMIT :\n                        #        self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 100\n                        #        self.stationary_ships += 1\n                    else:\n                        # my shipyard\n                        #if self.episode_steps  - self.board.step <= self.size and ship.halite > 0.0 and dict_direction['cost'] >= 400:\n                        #        dict_direction['cost'] += 500 + ship.halite\n                                #if self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] >= 500:\n                                #    self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 100 + ship.cell.halite \/\/ 4\n                        #else:\n                        if should_i_spawn and self.remaining_halite >= self.spawn_cost:\n                            dict_direction['cost'] -= 500\n                            if am_i_guard and self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] >= 400:\n                                self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 500\n                        else:\n                            if dict_direction['cost'] >= 400 :\n                                if len(self.get_enemy_ships(self.get_adjacent_ships(adjacent_shipyard_in_direction.cell))) != 0 and\\\n                                    self.is_none(adjacent_shipyard_in_direction.cell.ship):\n                                    dict_direction['cost'] += 500 - ship.halite\n                                elif len(self.get_enemy_ships(self.get_nearby_ships(adjacent_shipyard_in_direction.cell))) != 0 :\n                                    dict_direction['cost'] += 500 + ship.halite                                       \n                                elif len(self.get_enemy_ships(self.get_approaching_ships(adjacent_shipyard_in_direction.cell))) != 0 :\n                                    dict_direction['cost'] += 500 + ship.halite\n                                elif ship.halite > 0:\n                                    dict_direction['cost'] += 500 + ship.halite\n                                elif am_i_guard and len(self.get_my_ships(nearby_ships_in_direction)) == 0:\n                                     dict_direction['cost'] += 500 + ship.halite\n                            elif self.board.step >= self.episode_steps * 7 \/\/ 8:\n                                # I have to save my shipyard since I dont have enough to make new one\n                                if self.is_none(adjacent_shipyard_in_direction.cell.ship) and\\\n                                   len(self.get_enemy_ships(self.get_adjacent_ships(adjacent_shipyard_in_direction.cell))) != 0 and\\\n                                   self.am_i_powerful(ship, nearby_ships_in_direction, False, True):\n                                    dict_direction['cost'] += (500 - ship.halite)\n                            if am_i_guard and\\\n                               self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] >= 400 and\\\n                               len(self.get_my_ships(nearby_ships_in_direction)) != 0 and\\\n                               len(self.get_enemy_ships(self.get_adjacent_ships(adjacent_shipyard_in_direction.cell))) == 0:\n                                self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 500\n                                \n                self.ship_actions_bitfield[ship]['actions'][(ship.position + direction.to_point())%self.size] = dict(dict_direction)\n            \n            if box_in_possibility_count >= 3:\n                self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] -= 100\n                \n            if self.ship_actions_bitfield[ship]['convert_candidate']:\n                # conditions for multiple shipyard\n                #if ship.cell.halite < min(2 * self.HALITE_THRESHOLD, self.HALITE_THRESHOLD_MIN) :\n                #if self.is_not_none(nearest_shipyard) and self.remaining_ship_count > self.MIN_SHIPS * len(self.shipyards):\n                    #if distance_nearest_shipyard >= self.size - 1: #\/\/ 2:\n                if len(self.get_enemy_shipyards(self.get_adjacent_shipyards(ship.cell))) == 0 and len(self.get_enemy_shipyards(self.get_nearby_shipyards(ship.cell))) == 0:\n                    self.convert_candidates[ship] = ship.halite\n            \n            # adjacent enemy ship -500 already accounted for in case I have any adjacent ship  -->\n            # self.ship_actions_bitfield[ship][ship.position]['cost'] = -(500 + ship.halite)\n            # add incentive if in shipyard and adjacent or nearby enemy ship\n            if self.is_not_none(ship.cell.shipyard):\n                # i am guard\n                # i have zero halite\n                if (should_i_spawn and self.remaining_halite >= self.spawn_cost):\n                    self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] -= 500\n                    \n                    if self.is_not_none(ship_index) and self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[ship_index%len(directions)].to_point())%self.size]['cost'] >= 400:\n                        self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[ship_index%len(directions)].to_point())%self.size]['cost'] += 500\n                \n                else:\n                    if self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] >= 400:\n                        if len(self.get_enemy_ships(self.get_adjacent_ships(ship.cell))) != 0 :                        \n                            self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 500                                \n                        elif len(self.get_enemy_ships(self.get_nearby_ships(ship.cell))) != 0 and\\\n                             len(self.get_my_ships(self.get_adjacent_ships(ship.cell))) == 0:\n                            self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 500\n                        elif len(self.get_enemy_ships(self.get_approaching_ships(ship.cell))) != 0 and\\\n                             len(self.get_my_ships(self.get_adjacent_ships(ship.cell))) == 0:\n                            self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 500  \n                        elif len(self.get_my_ships(self.get_adjacent_ships(ship.cell))) == 0:\n                            self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 500\n                    elif self.board.step >= self.episode_steps * 7 \/\/ 8:\n                        if len(self.get_enemy_ships(self.get_adjacent_ships(ship.cell))) != 0 and\\\n                           self.am_i_powerful(ship, self.get_enemy_ships(self.get_adjacent_ships(ship.cell)), False, True):                        \n                            self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 500\n                    #elif self.am_i_powerful(ship, self.get_enemy_ships(self.get_adjacent_ships(ship.cell)), False, True):                        \n                        # otherwise it will be suicide as I will sacrifice my guard ships one by one\n                    #    self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 500\n                            \n            if self.is_not_none(nearest_shipyard) and self.is_not_none(direction1_nearest_shipyard) and\\\n               self.is_not_none(direction2_nearest_shipyard) :\n                if distance_nearest_shipyard > 1:\n                    if distance_nearest_shipyard >= self.episode_steps - self.board.step - 5:            \n                        self.start_end_move = True\n                        if ship.halite > 0.0:\n                            if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] >= 400:\n                                self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] += 500 + ship.halite\n\n                            if direction1_nearest_shipyard != direction2_nearest_shipyard: \n                                if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] >= 400:\n                                    self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] += 500 + ship.halite\n                            elif self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] < 400:\n                                self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[(directions.index(direction1_nearest_shipyard) + 1)%len(directions)].to_point())%self.size]['cost'] += 10\n                                self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[(directions.index(direction1_nearest_shipyard) + 1)%len(directions)].to_point())%self.size]['cost'] += 10\n                        #else:\n                        #    self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] -= 500\n\n                        #    if direction1_nearest_shipyard != direction2_nearest_shipyard: \n                        #        self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] -= 500\n\n                        #if self.episode_steps - self.board.step <= self.size + 2 and\\\n                        #   distance_nearest_shipyard < self.episode_steps - self.board.step - 2 and\\\n                        #   ship.halite <= 0.0 and\\\n                        #   ship.cell.halite >= min(self.HALITE_THRESHOLD_MIN, self.HALITE_THRESHOLD):\n                        #    if self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] >= 500:\n                        #        self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += (ship.cell.halite \/\/ 4)\n                                # \/\/4 since I can mine only 25% in a turn\n\n                    elif am_i_guard:                    \n                        #guard_cost = 0\n\n                        #if len(self.get_enemy_ships(self.get_adjacent_ships(nearest_shipyard.cell))) != 0 or\\\n                        #   len(self.get_enemy_ships(self.get_nearby_ships(nearest_shipyard.cell))) != 0 or\\\n                        #   len(self.get_enemy_ships(self.get_approaching_ships(nearest_shipyard.cell))) != 0 :\n                        #    guard_cost = 500\n                        guard_cost = 500\n                        #if not (should_i_spawn and self.remaining_halite >= self.spawn_cost):# and guard_cost == 500:\n                        if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] > 0:\n                            self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] += (guard_cost + ship.halite) #+ guard_cost\n\n                        if direction1_nearest_shipyard != direction2_nearest_shipyard: \n                            if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] > 0:\n                                self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] += (guard_cost + ship.halite)# + guard_cost\n                        elif self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] <= 0:\n                            self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[(directions.index(direction1_nearest_shipyard) + 1)%len(directions)].to_point())%self.size]['cost'] += 10\n                            self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[(directions.index(direction1_nearest_shipyard) - 1)%len(directions)].to_point())%self.size]['cost'] += 10\n\n                        #elif guard_cost == 0:\n\n                        #    if distance_nearest_shipyard > 1:\n                         #       if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] >= 400:\n                          #          self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] += (500 + ship.halite) #+ guard_cost\n\n                           #     if direction1_nearest_shipyard != direction2_nearest_shipyard: \n                            #        if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] >= 400:\n                             #           self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] += (500 + ship.halite)# + guard_cost\n                              #  elif self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] < 400:\n                               #     self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[(directions.index(direction1_nearest_shipyard) + 1)%len(directions)].to_point())%self.size]['cost'] += 10\n                                #    self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[(directions.index(direction1_nearest_shipyard) - 1)%len(directions)].to_point())%self.size]['cost'] += 10\n\n                    elif self.board.step > 11:   \n\n                        if should_i_move_towards_shipyard or self.ship_actions_bitfield[ship]['pirate']:\n                            if self.ship_actions_bitfield[ship]['pirate'] or not(self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] >= 500 and ship.cell.halite >= min(2 * self.HALITE_THRESHOLD_MIN, self.HALITE_THRESHOLD)):\n                                if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] >= 400:\n                                    self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] += 50 + ship.halite \/\/ distance_nearest_shipyard\n\n                                if direction1_nearest_shipyard != direction2_nearest_shipyard: \n                                    if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] >= 400:\n                                        self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] += 50 + ship.halite \/\/ distance_nearest_shipyard\n                                elif self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] < 400:\n                                    self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[(directions.index(direction1_nearest_shipyard) + 1)%len(directions)].to_point())%self.size]['cost'] += 10\n                                    self.ship_actions_bitfield[ship]['actions'][(ship.position + directions[(directions.index(direction1_nearest_shipyard) - 1)%len(directions)].to_point())%self.size]['cost'] += 10\n\n            if not am_i_guard:\n                if self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] >= 400 and\\\n                   ship.cell.halite >= self.HALITE_THRESHOLD\/\/2:\n                    self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += ship.cell.halite\/\/4\n                    # \/\/4 since I can mine only 25% in a turn\n                elif self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] < 400 :\n                    if ship.cell.halite <= 0.0:\n                        self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] += 10\n                    else:\n                        self.ship_actions_bitfield[ship]['actions'][ship.position]['cost'] -= ship.cell.halite\n\n            if should_i_move_towards_shipyard or self.overwhelming_ship_spawn or\\\n               self.is_none(ship_index) or (ship_index \/\/ len(directions)) != 0 :\n                ordered_halite_positions = self.get_ordered_halite_positions(ship.position)\n            else:\n                ordered_halite_positions = self.get_ordered_halite_positions(ship.position, True)\n                \n            checked_directions = []\n            #if self.is_not_none(nearest_shipyard) and self.is_not_none(direction1_nearest_shipyard) and\\\n            #   self.is_not_none(direction2_nearest_shipyard):\n            #    if direction1_nearest_shipyard == direction2_nearest_shipyard:\n            #        checked_directions.append(directions[(directions.index(direction1_nearest_shipyard) - 1) % len(directions)])\n            #        if distance_nearest_shipyard == 1:\n            #            checked_directions.append(direction1_nearest_shipyard)\n                    \n            for halite_cell in ordered_halite_positions:\n                \n                if am_i_guard:\n                    break\n                    \n                if self.ship_actions_bitfield[ship]['pirate']:\n                    break\n                \n                if len(checked_directions) == len(directions):\n                    break\n                    \n                if halite_cell in self.assigned_mining_targets and\\\n                   self.assigned_mining_targets[halite_cell] > self.REUSE_TARGET_LIMIT:\n                    continue\n\n                direction1_target = self.get_dir_to(ship.position,\\\n                                                    Point(halite_cell[0], halite_cell[1]))\n                direction2_target = self.get_dir_to_alt(ship.position,\\\n                                                        Point(halite_cell[0], halite_cell[1]))            \n\n                #if not should_i_spawn:\n                    # maintain quadrants\n                if self.is_not_none(ship_index) and self.is_not_none(swarm_shipyard):\n\n                    direction1_check = self.get_dir_to(swarm_shipyard.position,\\\n                                                       Point(halite_cell[0], halite_cell[1]))\n                    direction2_check = self.get_dir_to_alt(swarm_shipyard.position,\\\n                                                           Point(halite_cell[0], halite_cell[1]))\n\n                    if (ship_index % 2 == 0):\n                        if directions[ship_index % len(directions)] != direction1_check or\\\n                           (directions[(ship_index +1) % len(directions)] != direction2_check and\\\n                            directions[ship_index % len(directions)] != direction2_check):\n                            continue\n                    else:\n                        if directions[ship_index % len(directions)] != direction2_check or\\\n                           (directions[(ship_index +1) % len(directions)] != direction1_check and\\\n                            directions[ship_index % len(directions)] != direction1_check):\n                            continue\n                \n                if should_i_move_towards_shipyard or self.overwhelming_ship_spawn or\\\n                   self.is_none(ship_index) or (ship_index \/\/ len(directions)) != 0 :\n                    distance, halite = self.cell_halite[halite_cell]\n                else:\n                    halite, distance = self.cell_halite[halite_cell]\n                assigned = False\n                if self.is_not_none(direction1_target):\n                    if direction1_target not in checked_directions:\n                        if self.ship_actions_bitfield[ship]['actions'][(ship.position +\\\n                                                          direction1_target.to_point())%self.size]['cost'] >= 500:\n                            self.ship_actions_bitfield[ship]['actions'][(ship.position +\\\n                                                              direction1_target.to_point())%self.size]['cost'] += (500 - halite)\/\/distance\/\/4\n                            assigned = True\n                        checked_directions.append(direction1_target)\n                        \n                if direction1_target != direction2_target:\n                    if self.is_not_none(direction2_target):\n                        if direction2_target not in checked_directions:   \n                            if self.ship_actions_bitfield[ship]['actions'][(ship.position +\\\n                                                              direction2_target.to_point())%self.size]['cost'] >= 500:\n                                self.ship_actions_bitfield[ship]['actions'][(ship.position +\\\n                                                                  direction2_target.to_point())%self.size]['cost'] += (500 - halite)\/\/distance\/\/4\n                                assigned = True\n                            checked_directions.append(direction2_target)\n                \n                if assigned:\n                    if halite_cell in self.assigned_mining_targets:\n                        self.assigned_mining_targets[halite_cell] += 1\n                    else:\n                        self.assigned_mining_targets[halite_cell] = 0\n\n        \n            self.position_entries = self.union_of_lists(self.position_entries, \\\n                                                        self.ship_actions_bitfield[ship]['actions'])\n            #print(self.position_entries)\n        \n        self.ship_action_matrix = np.ones([len(self.ships),len(self.position_entries)], dtype = int) * -50000\n\n        for index, ship in enumerate(self.ships):\n            for position in self.ship_actions_bitfield[ship]['actions']:\n                self.ship_action_matrix[index, self.position_entries.index(position)] = self.ship_actions_bitfield[ship]['actions'][position]['cost'] \n                    \n        #print(self.ship_action_matrix) \n        self.halite_positions_in_new_assignment = {}\n        rows, cols = scipy.optimize.linear_sum_assignment(self.ship_action_matrix, maximize = True)\n        for row, col in zip(rows,cols):\n            if self.position_entries[col] in self.ship_actions_bitfield[self.ships[row]]['actions']:\n                self.ships[row].next_action = self.ship_actions_bitfield[self.ships[row]]['actions'][self.position_entries[col]]['action']\n                self.halite_positions_in_new_assignment[self.position_entries[col]] = [self.ships[row].halite]\n            else:\n                self.ship_actions_bitfield[self.ships[row]]['assigned'] = False\n                #print(\"Unassigned\")","29dfb7d9":"%%writefile -a submission.py\n\n    def ship_action_end_move(self):\n        \n        if self.remaining_shipyard_count == 0:\n            return\n        \n        for ship in self.ships:\n            if ship.halite > 0.0:\n                nearest_shipyard = self.ship_actions_bitfield[ship]['nearest_shipyard']['shipyard']\n                distance_nearest_shipyard = self.ship_actions_bitfield[ship]['nearest_shipyard']['distance']\n                direction1_nearest_shipyard = self.ship_actions_bitfield[ship]['nearest_shipyard']['direction1']\n                direction2_nearest_shipyard = self.ship_actions_bitfield[ship]['nearest_shipyard']['direction2']\n                if self.is_not_none(nearest_shipyard) and\\\n                   self.is_not_none(direction1_nearest_shipyard) and\\\n                   self.is_not_none(direction2_nearest_shipyard) :\n                    if (distance_nearest_shipyard >= self.episode_steps - self.board.step - 5 and\\\n                        ship.next_action not in [None, direction1_nearest_shipyard, direction2_nearest_shipyard]) or\\\n                       (self.episode_steps - self.board.step <= self.size + 2 and\\\n                        distance_nearest_shipyard >= self.episode_steps - self.board.step - 2 and\\\n                        ship.next_action not in [direction1_nearest_shipyard, direction2_nearest_shipyard]): \n                        if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction1_nearest_shipyard.to_point())%self.size]['cost'] >= 400:    \n                            if (ship.position + direction1_nearest_shipyard.to_point())%self.size in self.halite_positions_in_new_assignment:\n                                if ship.halite not in self.halite_positions_in_new_assignment[(ship.position + direction1_nearest_shipyard.to_point())%self.size]:\n                                    temp = ship.next_action\n                                    ship.next_action = direction1_nearest_shipyard\n                                    self.halite_positions_in_new_assignment[(ship.position + direction1_nearest_shipyard.to_point())%self.size].append(ship.halite)\n                                    if self.is_none(temp):\n                                        self.halite_positions_in_new_assignment[ship.position].remove(ship.halite)\n                                    else:\n                                        self.halite_positions_in_new_assignment[(ship.position + temp.to_point())%self.size].remove(ship.halite)\n                                    continue\n                            else:\n                                temp = ship.next_action\n                                ship.next_action = direction1_nearest_shipyard\n                                self.halite_positions_in_new_assignment[(ship.position + direction1_nearest_shipyard.to_point())%self.size] = [ship.halite]\n                                if self.is_none(temp):\n                                    self.halite_positions_in_new_assignment[ship.position].remove(ship.halite)\n                                else:\n                                    self.halite_positions_in_new_assignment[(ship.position + temp.to_point())%self.size].remove(ship.halite)\n                                continue\n                        if self.ship_actions_bitfield[ship]['actions'][(ship.position + direction2_nearest_shipyard.to_point())%self.size]['cost'] >= 400:    \n                            if direction1_nearest_shipyard != direction2_nearest_shipyard:\n                                if (ship.position + direction2_nearest_shipyard.to_point())%self.size in self.halite_positions_in_new_assignment:\n                                    if ship.halite not in self.halite_positions_in_new_assignment[(ship.position + direction2_nearest_shipyard.to_point())%self.size]:\n                                        temp = ship.next_action\n                                        ship.next_action = direction2_nearest_shipyard\n                                        self.halite_positions_in_new_assignment[(ship.position + direction2_nearest_shipyard.to_point())%self.size].append(ship.halite)\n                                        if self.is_none(temp):\n                                            self.halite_positions_in_new_assignment[ship.position].remove(ship.halite)\n                                        else:\n                                            self.halite_positions_in_new_assignment[(ship.position + temp.to_point())%self.size].remove(ship.halite)\n                                        continue    \n                                else:\n                                    temp = ship.next_action\n                                    ship.next_action = direction2_nearest_shipyard\n                                    self.halite_positions_in_new_assignment[(ship.position + direction2_nearest_shipyard.to_point())%self.size] = [ship.halite]\n                                    if self.is_none(temp):\n                                        self.halite_positions_in_new_assignment[ship.position].remove(ship.halite)\n                                    else:\n                                        self.halite_positions_in_new_assignment[(ship.position + temp.to_point())%self.size].remove(ship.halite)\n                                    continue  ","77e3cb83":"%%writefile -a submission.py\n\n    def get_swarm_shipyard_details(self, ship, shipyard):\n        \n        swarm_shipyard = None\n        ship_index = None\n        am_i_guard = False     \n        \n        if self.is_not_none(shipyard):\n            if ship.id in self.my_ships_in_swarm[shipyard.id]:\n                swarm_shipyard = shipyard\n                ship_index = self.my_ships_in_swarm[shipyard.id].index(ship.id)\n                #if ship_index == (len(self.my_ships_in_swarm[shipyard.id]) - 1):\n                #    am_i_guard = True\n                #ship_index %= len(directions)\n                \n        return swarm_shipyard, ship_index, am_i_guard","4015198d":"%%writefile -a submission.py\n\n    def get_nearest_shipyard_details(self, ship, shipyard_id_list):\n        \n        nearest_shipyard = None\n        distance_nearest_shipyard = self.size * 2\n        direction1_nearest_shipyard = None\n        direction2_nearest_shipyard = None\n        \n        nearest_shipyard = self.get_nearest_entity(ship.position, shipyard_id_list)\n\n        if self.is_not_none(nearest_shipyard):\n            \n            distance_nearest_shipyard = self.get_step_distance(ship.position, nearest_shipyard.position)\n            direction1_nearest_shipyard = self.get_dir_to(ship.position, nearest_shipyard.position)\n            direction2_nearest_shipyard = self.get_dir_to_alt(ship.position, nearest_shipyard.position)\n\n        return nearest_shipyard, distance_nearest_shipyard, direction1_nearest_shipyard, direction2_nearest_shipyard","a21fdf48":"%%writefile -a submission.py\n\n    def update_swarm_info(self):\n               \n        self.my_ships_in_swarm = {}\n        \n        if len(self.shipyards) == 0 or len(self.ships) == 0:\n            return\n        \n        tmp_shipyards = {}\n        for shipyard_id in self.shipyard_ids:\n            tmp_shipyards[shipyard_id] = {}\n            for direction in directions:\n                tmp_shipyards[shipyard_id][direction] = {}  \n                tmp_shipyards[shipyard_id]['Guard'] = None\n                \n        #if self.me.id == 0 :print(self.my_ships_in_swarm)\n        for ship in self.ships:\n            nearest_shipyard = None\n            distance_nearest_shipyard = self.size * 2\n            direction1_nearest_shipyard = None\n            direction2_nearest_shipyard = None             \n            \n            nearest_shipyard, distance_nearest_shipyard, direction1_nearest_shipyard, \\\n            direction2_nearest_shipyard = self.get_nearest_shipyard_details(ship, self.shipyard_ids)\n            \n            if self.is_not_none(nearest_shipyard):                \n                if directions[0] == direction1_nearest_shipyard and\\\n                   (directions[1] == direction2_nearest_shipyard or\\\n                    directions[0] == direction2_nearest_shipyard):\n                    #if self.me.id == 0 :print(self.board.step, ship.position, distance_nearest_shipyard, directions[2])\n                    tmp_shipyards[nearest_shipyard.id][directions[2]][ship.id] = distance_nearest_shipyard \n                elif directions[1] == direction2_nearest_shipyard and\\\n                     (directions[2] == direction1_nearest_shipyard or\\\n                      directions[1] == direction1_nearest_shipyard):\n                    #if self.me.id == 0 :print(self.board.step, ship.position, distance_nearest_shipyard, directions[3])\n                    tmp_shipyards[nearest_shipyard.id][directions[3]][ship.id] = distance_nearest_shipyard \n                elif directions[2] == direction1_nearest_shipyard and\\\n                     (directions[3] == direction2_nearest_shipyard or\\\n                      directions[2] == direction2_nearest_shipyard):\n                    #if self.me.id == 0 :print(self.board.step, ship.position, distance_nearest_shipyard, directions[0])\n                    tmp_shipyards[nearest_shipyard.id][directions[0]][ship.id] = distance_nearest_shipyard \n                elif directions[3] == direction2_nearest_shipyard and\\\n                     (directions[0] == direction1_nearest_shipyard or\\\n                      directions[3] == direction1_nearest_shipyard):\n                    #if self.me.id == 0 :print(self.board.step, ship.position, distance_nearest_shipyard, directions[1])\n                    tmp_shipyards[nearest_shipyard.id][directions[1]][ship.id] = distance_nearest_shipyard \n                else:\n                    tmp_shipyards[nearest_shipyard.id]['Guard'] = ship.id\n        \n        for shipyard_id in tmp_shipyards:\n            guard_index = False\n            if self.is_none(tmp_shipyards[shipyard_id]['Guard']):\n                distance = self.size ** 2\n                tmp_directions = []\n                min_len = 0\n                for direction in directions:\n                    if len(tmp_shipyards[shipyard_id][direction]) > min_len:\n                        tmp_directions = [direction]\n                        min_len = len(tmp_shipyards[shipyard_id][direction])\n                    elif len(tmp_shipyards[shipyard_id][direction]) == min_len:\n                        tmp_directions.append(direction)\n                        \n                for direction in tmp_directions :\n                    for ship_id in tmp_shipyards[shipyard_id][direction]:\n                        dist = tmp_shipyards[shipyard_id][direction][ship_id]\n                        if dist < distance:\n                            guard_index = True\n                            guard_direction = direction\n                            distance = dist\n                            guard_ship_id = ship_id\n            if guard_index:\n                tmp_shipyards[shipyard_id][guard_direction].pop(guard_ship_id)\n                tmp_shipyards[shipyard_id]['Guard'] = guard_ship_id\n            elif self.is_not_none(tmp_shipyards[shipyard_id]['Guard']):\n                # set guard ship direction to one having least no of ships\n                length = self.remaining_ship_count + 1\n                check = []\n                for direction in directions:\n                    temp = len(tmp_shipyards[shipyard_id][direction])\n                    if temp == length:\n                        check.append(direction)\n                    elif temp < length:\n                        check = [direction]\n                        guard_index = True\n                        guard_direction = direction\n                        length = temp\n                #if self.me.id == 0 :print(self.board.step, check, length, tmp_shipyards[shipyard_id][guard_direction])\n                if len(check) > 1:\n                    # same no of ships in all directions\n                    guard_ship = self.ships[self.ship_ids.index(tmp_shipyards[shipyard_id]['Guard'])]\n                    ordered_halite_positions = self.get_ordered_halite_positions(guard_ship.position, True)\n                    for halite_cell in ordered_halite_positions:\n                        direction1_target = self.get_dir_to(guard_ship.position,\\\n                                                Point(halite_cell[0], halite_cell[1]))\n                        direction2_target = self.get_dir_to_alt(guard_ship.position,\\\n                                                    Point(halite_cell[0], halite_cell[1])) \n                        if directions[0] == direction1_target and\\\n                           (directions[1] == direction2_target or\\\n                            directions[0] == direction2_target):\n                            if directions[0] in check:\n                                guard_direction = directions[0]\n                                break\n                        elif directions[1] == direction2_target and\\\n                             (directions[2] == direction1_target or\\\n                              directions[1] == direction1_target):\n                            if directions[1] in check:\n                                guard_direction = directions[1]\n                                break\n                        elif directions[2] == direction1_target and\\\n                             (directions[3] == direction2_target or\\\n                              directions[2] == direction2_target):\n                            if directions[2] in check:\n                                guard_direction = directions[2]\n                                break\n                        elif directions[3] == direction2_target and\\\n                             (directions[0] == direction1_target or\\\n                             directions[3] == direction1_target):\n                            if directions[3] in check:\n                                guard_direction = directions[3]\n                                break\n                            \n            self.my_ships_in_swarm[shipyard_id] = []\n            for direction in directions:\n                tmp_shipyards[shipyard_id][direction] = sorted(tmp_shipyards[shipyard_id][direction],\\\n                                                               key = tmp_shipyards[shipyard_id][direction].get,\\\n                                                               reverse = True)\n            \n            while True:\n                finished = True\n                for direction in directions:                    \n                    if len(tmp_shipyards[shipyard_id][direction]) != 0:\n                        if len(tmp_shipyards[shipyard_id][direction]) != 1:\n                            finished = False\n                        while len(self.my_ships_in_swarm[shipyard_id])%len(directions) != directions.index(direction):\n                            self.my_ships_in_swarm[shipyard_id].append(\"DUMMY\")\n                        ship_id = tmp_shipyards[shipyard_id][direction][0]\n                        self.my_ships_in_swarm[shipyard_id].append(ship_id)\n                        tmp_shipyards[shipyard_id][direction].remove(ship_id)\n                        continue\n                if finished:\n                    if self.is_not_none(tmp_shipyards[shipyard_id]['Guard']):\n                        if guard_index:\n                            while len(self.my_ships_in_swarm[shipyard_id])%len(directions) != directions.index(guard_direction):\n                                self.my_ships_in_swarm[shipyard_id].append(\"DUMMY\")\n                        self.my_ships_in_swarm[shipyard_id].append(tmp_shipyards[shipyard_id]['Guard'])    \n                    break\n                    \n        #if self.me.id == 0 :\n            #print(self.my_ships_in_swarm)          ","6a8141f4":"%%writefile -a submission.py\n    \n    def convert_now(self):\n        convert_now_count = 0\n        play_over_count = 0\n        for opponent in self.board.opponents:\n            shipyard_count = 0\n            ship_count = 0\n            for shipyard in opponent.shipyards:\n                shipyard_count += 1\n            for ship in opponent.ships:\n                ship_count += 1\n            if opponent.halite < self.convert_cost and ship_count ==0:    \n                play_over_count += 1\n            elif opponent.halite < self.convert_cost and (shipyard_count == 0 or ship_count <= 1):#assuming he will not be able to get enough halite 500+ to convert and spawn with any remaining ships, though it is a valid possibility\n                convert_now_count += 1\n        return (play_over_count == 2 and convert_now_count == 1)","5fbe40ac":"%%writefile -a submission.py\n\n    def generate_farming_map(self):\n        halite = np.array(self.board.observation['halite']).reshape(self.size, self.size).astype(int)\n        halite[halite.nonzero()] = 1\n        farm_filter = np.array([[0,0,1,0,0],[0,1,1,1,0],[1,1,0,1,1],[0,1,1,1,0],[0,0,1,0,0]])\n        farm_array = scipy.ndimage.convolve(halite, farm_filter, mode='wrap', cval=0.0)\n        self.farming_targets = []\n        for i in range(0,6):\n            if np.where(farm_array >= 12 - i, 1, 0).nonzero()[0].size == 0:\n                continue\n            if self.me.id == 0: print(np.where(farm_array >= 12 - i, 1, 0).nonzero())\n            targets = np.logical_and(np.where(farm_array >= 12 - i, 1, 0),np.logical_not(halite)).astype(int).nonzero()\n            for index in range(targets[0].size):\n                self.farming_targets.append(Point(targets[1][index], self.size -1 - targets[0][index]))\n            if len(self.farming_targets) != 0:\n                break\n        if self.me.id == 0: print(self.farming_targets)\n        #targets = np.logical_and(np.where(farm_array == 3, 1, 0),np.logical_not(halite)).astype(int).nonzero()\n        #for index in range(targets[0].size):\n        #    self.farming_targets.append(Point(targets[1][index], self.size -1 - targets[0][index]))\n        #if self.me.id == 0: print(self.farming_targets)\n        \n    def update_halite_map(self):\n        self.halite = np.array(self.board.observation['halite']).reshape(self.size, self.size)\n        a = self.halite.nonzero()\n        # Global Halite Threshold\n        self.HALITE_THRESHOLD = np.median(pd.Series(self.halite[a]))\n        #if self.board.step <= self.episode_steps \/\/ 8:\n        #    self.halite[self.halite < min(2 * self.HALITE_THRESHOLD_MIN, 2 * self.HALITE_THRESHOLD)] = 0.0\n        #else:\n        self.halite[self.halite < min(self.HALITE_THRESHOLD_MIN, self.HALITE_THRESHOLD)] = 0.0\n        a = self.halite.nonzero()\n        # Local Halite Threshold\n        self.HALITE_THRESHOLD_LOCAL = np.median(pd.Series(self.halite[a]))  \n        #if self.board.step <= self.episode_steps * 3 \/\/ 4 :\n        self.halite[self.halite < self.HALITE_THRESHOLD_LOCAL] = 0.0\n        self.mining_targets = self.halite.nonzero()\n        \n    def get_ordered_halite_positions(self, position, max_ordering = False):\n        \n        # decide seed ship actions\n        self.cell_halite = {}\n        for index in range(self.mining_targets[0].size):\n            distance = self.get_step_distance(Point(self.mining_targets[1][index],self.size -1 - self.mining_targets[0][index]), position)\n            if distance < 2:\n                continue\n            #if not max_ordering:\n            #    nearest_shipyard = self.get_nearest_entity(Point(self.mining_targets[1][index], \\\n            #                                                     self.size -1 - self.mining_targets[0][index]), \\\n            #                                               self.shipyard_ids)\n            #    if self.is_not_none(nearest_shipyard):\n            #        distance_nearest_shipyard = self.get_step_distance(Point(self.mining_targets[1][index], \\\n            #                                                                self.size -1 - self.mining_targets[0][index]), \\\n            #                                                           nearest_shipyard.position)\n            #        distance += distance_nearest_shipyard\n            #if distance > self.size\/\/2 or distance < 2:\n                #continue\n            if max_ordering :\n                self.cell_halite[self.mining_targets[1][index], self.size -1 - self.mining_targets[0][index]] = \\\n                round(500.0-self.halite[self.mining_targets[0][index],self.mining_targets[1][index]]), distance\n            else:\n                self.cell_halite[self.mining_targets[1][index], self.size -1 - self.mining_targets[0][index]] = \\\n                distance, round(500.0-self.halite[self.mining_targets[0][index],self.mining_targets[1][index]])\n                \n        #print(cell_halite)    \n        return sorted(self.cell_halite, key = self.cell_halite.get)#, reverse=True)","d05dd241":"%%writefile -a submission.py\n\n    def create_distance_lookup(self):\n        for index1 in range(self.size):\n            for index2 in range(self.size):\n                self.reference_distance[(index1, index2)] = {}\n        for reference in self.reference_distance:\n            for index1 in range(self.size):\n                for index2 in range(self.size):\n                    if (index1, index2) in self.reference_distance:\n                        if reference not in self.reference_distance[(index1, index2)]:\n                            self.reference_distance[reference][(index1, index2)] = self.get_step_distance_init(Point(reference[0], reference[1]),Point(index1, index2))\n                    else:\n                        self.reference_distance[reference][(index1, index2)] = self.get_step_distance_init(Point(reference[0], reference[1]), Point(index1, index2))\n\n    def get_step_distance(self, A, B):\n        if (B.x,B.y) in self.reference_distance[(A.x,A.y)]:\n            return self.reference_distance[(A.x,A.y)][(B.x,B.y)]\n        else:\n            return self.reference_distance[(B.x,B.y)][(A.x,A.y)]\n\n    def get_step_distance_init(self, A, B):\n        a = abs(A.x - B.x)\n        b = abs(A.y - B.y)\n        if a > self.size\/\/2:\n            a = (self.size - abs(A.x - B.x))\n        if b > self.size\/\/2:\n            b = (self.size - abs(A.y - B.y))\n        return a + b","1c4a6dc3":"%%writefile -a submission.py\n    \n    # Returns best direction to move from one position (fromPos) to another (toPos)\n    # Example: If I'm at pos 0 and want to get to pos 55, which direction should I choose?\n    def get_dir_to(self, fromPos, toPos):\n        fromPos = fromPos % self.size\n        toPos = toPos % self.size\n        if (fromPos.y < toPos.y and toPos.y - fromPos.y <= self.size\/\/2) or (fromPos.y > toPos.y and fromPos.y - toPos.y > self.size\/\/2): \n            return ShipAction.NORTH\n        if (fromPos.y > toPos.y and fromPos.y - toPos.y <= self.size\/\/2) or (fromPos.y < toPos.y and toPos.y - fromPos.y > self.size\/\/2): \n            return ShipAction.SOUTH\n        if (fromPos.x < toPos.x and toPos.x - fromPos.x <= self.size\/\/2) or (fromPos.x > toPos.x and fromPos.x - toPos.x > self.size\/\/2): \n            return ShipAction.EAST        \n        if (fromPos.x > toPos.x and fromPos.x - toPos.x <= self.size\/\/2) or (fromPos.x < toPos.x and toPos.x - fromPos.x > self.size\/\/2): \n            return ShipAction.WEST\n        return None\n\n    # Returns best direction to move from one position (fromPos) to another (toPos)\n    # Example: If I'm at pos 0 and want to get to pos 55, which direction should I choose?\n    def get_dir_to_alt(self, fromPos, toPos):\n        fromPos = fromPos % self.size\n        toPos = toPos % self.size\n        if (fromPos.x < toPos.x and toPos.x - fromPos.x <= self.size\/\/2) or (fromPos.x > toPos.x and fromPos.x - toPos.x > self.size\/\/2): \n            return ShipAction.EAST        \n        if (fromPos.x > toPos.x and fromPos.x - toPos.x <= self.size\/\/2) or (fromPos.x < toPos.x and toPos.x - fromPos.x > self.size\/\/2): \n            return ShipAction.WEST\n        if (fromPos.y < toPos.y and toPos.y - fromPos.y <= self.size\/\/2) or (fromPos.y > toPos.y and fromPos.y - toPos.y > self.size\/\/2): \n            return ShipAction.NORTH\n        if (fromPos.y > toPos.y and fromPos.y - toPos.y <= self.size\/\/2) or (fromPos.y < toPos.y and toPos.y - fromPos.y > self.size\/\/2): \n            return ShipAction.SOUTH\n        return None","9b6c86d4":"%%writefile -a submission.py\n    \n    def is_not_none(self, entity_id):\n        if entity_id is not None:\n            return True\n        return False                          \n    \n    def is_none(self, entity_id):\n        return not self.is_not_none(entity_id) ","84304a50":"%%writefile -a submission.py\n    \n    def intersection_of_lists(self, list1, list2):\n        return list(set(list1).intersection(list2))\n\n    def union_of_lists(self, list1, list2):\n        return list(set(list1).union(list2))","156c0afb":"%%writefile -a submission.py\n    \n    def get_nearest_entity(self, from_entity_position, to_entity_id_list):\n        dist = self.size * 2\n        selected_entity = None\n        for entity_id in to_entity_id_list:\n            entity = self.find_entity_by_id(entity_id)\n            if self.is_not_none(entity):\n                temp = self.get_step_distance(from_entity_position, entity.position)\n                if temp < dist:\n                    dist = temp\n                    selected_entity = entity\n        # if two shipyards are at same distance, it will select the first one,\n        # this may not always be an optimal solution\n        return selected_entity \n    \n    def find_entity_by_id(self, entity_id):\n        if entity_id in self.ship_ids:\n            return self.ships[self.ship_ids.index(entity_id)]\n        elif entity_id in self.shipyard_ids:\n            return self.shipyards[self.shipyard_ids.index(entity_id)]\n        return None","1e0786d4":"%%writefile -a submission.py\n    \n    def get_my_ships(self, list_of_ships):\n        return self.intersection_of_lists(list_of_ships, self.ships)    \n\n    def get_my_shipyards(self, list_of_shipyards):\n        return self.intersection_of_lists(list_of_shipyards, self.shipyards)  \n    \n    def is_my_ship(self, ship):\n        if ship in self.ships:\n            return True\n        return False   \n\n    def is_my_shipyard(self, shipyard):\n        if shipyard in self.shipyards:\n            return True\n        return False","5c293758":"%%writefile -a submission.py    \n    \n    def get_my_ships_by_id(self, list_of_ship_ids):\n        my_ship_ids = []\n        for ship_id in list_of_ship_ids:\n            if self.is_my_ship_by_id(ship_id):\n                my_ship_ids.append(ship_id)\n        return my_ship_ids  \n\n    def is_my_ship_by_id(self, ship_id):\n        if ship_id in self.ship_ids:\n            return True\n        return False     ","915ddbc8":"%%writefile -a submission.py\n    \n    def get_my_shipyards_by_id(self, list_of_shipyard_ids):\n        my_shipyard_ids = []\n        for shipyard_id in list_of_shipyard_ids:\n            if self.is_my_shipyard_by_id(shipyard_id):\n                my_shipyard_ids.append(shipyard_id)\n        return my_shipyard_ids  \n    \n    def is_my_shipyard_by_id(self, shipyard_id):\n        if shipyard_id in self.shipyard_ids:\n            return True\n        return False       ","1b69cc6e":"%%writefile -a submission.py    \n\n    def get_enemy_ships(self, list_of_ships):\n        return self.intersection_of_lists(list_of_ships, self.enemy_ships)  \n\n    def get_enemy_shipyards(self, list_of_shipyards):\n        return self.intersection_of_lists(list_of_shipyards, self.enemy_shipyards)\n    \n    def is_enemy_ship(self, ship):\n        if ship in self.enemy_ships:\n            return True\n        return False \n    \n    def is_enemy_shipyard(self, shipyard):\n        if shipyard in self.enemy_shipyards:\n            return True\n        return False     ","2c895ee3":"%%writefile -a submission.py\n\n    def get_adjacent_cell_in_direction(self, cell, direction):\n        ret = None\n        if direction == ShipAction.NORTH:\n            ret = cell.north\n        elif direction == ShipAction.EAST:\n            ret = cell.east\n        elif direction == ShipAction.WEST:\n            ret = cell.west\n        elif direction == ShipAction.SOUTH:\n            ret = cell.south \n        return ret \n    \n    def get_adjacent_halite_in_direction(self, cell, direction):\n        cell_ret = self.get_adjacent_cell_in_direction(cell, direction)\n        if self.is_not_none(cell_ret):\n            return cell_ret.halite\n        return 0.0 \n\n    def get_adjacent_ship_in_direction(self, cell, direction):\n        cell_ret = self.get_adjacent_cell_in_direction(cell, direction)\n        if self.is_not_none(cell_ret):\n            return cell_ret.ship\n        return None   \n    \n    def get_adjacent_shipyard_in_direction(self, cell, direction):\n        cell_ret = self.get_adjacent_cell_in_direction(cell, direction)\n        if self.is_not_none(cell_ret):\n            return cell_ret.shipyard\n        return None     \n\n    def get_nearby_ships_in_direction(self, cell, direction):\n        adj_cell = self.get_adjacent_cell_in_direction(cell, direction)\n        adj = []\n        if self.is_not_none(adj_cell):\n            adj = self.get_adjacent_ships(adj_cell)\n        if cell.ship in adj:\n            adj.remove(cell.ship) \n        return list(set(adj))\n    \n    def get_nearby_shipyards_in_direction(self, cell, direction):\n        adj_cell = self.get_adjacent_cell_in_direction(cell, direction)\n        adj = []\n        if self.is_not_none(adj_cell):\n            adj = self.get_adjacent_shipyards(adj_cell)\n        if cell.shipyard in adj:\n            adj.remove(cell.shipyard) \n        return list(set(adj))\n    \n    def get_approaching_ships_in_direction(self, cell, direction):    \n        adj = []\n        adj_cell = self.get_adjacent_cell_in_direction(cell, direction)\n        if self.is_not_none(adj_cell):\n            adj.extend(self.get_nearby_ships(adj_cell)) \n        for direction in directions:\n            adj_cell = self.get_adjacent_cell_in_direction(cell, direction)\n            if adj_cell.ship in adj:\n                adj.remove(adj_cell.ship) \n        return list(set(adj))","5349f038":"%%writefile -a submission.py\n\n    def get_adjacent_ships(self, cell):\n        adj = []\n        for direction in directions:    \n            adj_ship = self.get_adjacent_ship_in_direction(cell, direction)        \n            if self.is_not_none(adj_ship):\n                adj.append(adj_ship)\n        return adj\n \n    def get_adjacent_shipyards(self, cell):\n        adj = []\n        for direction in directions:    \n            adj_shipyard = self.get_adjacent_shipyard_in_direction(cell, direction)        \n            if self.is_not_none(adj_shipyard):\n                adj.append(adj_shipyard)\n        return adj\n    \n    def get_nearby_ships(self, cell):\n        adj = []\n        for direction in directions:\n            adj_cell = self.get_adjacent_cell_in_direction(cell, direction)\n            if self.is_not_none(adj_cell):\n                adj.extend(self.get_adjacent_ships(adj_cell))\n        if cell.ship in adj:\n            adj.remove(cell.ship) \n        return list(set(adj))\n\n    def get_nearby_shipyards(self, cell):\n        adj = []\n        for direction in directions:\n            adj_cell = self.get_adjacent_cell_in_direction(cell, direction)\n            if self.is_not_none(adj_cell):\n                adj.extend(self.get_adjacent_shipyards(adj_cell))\n        if cell.shipyard in adj:\n            adj.remove(cell.shipyard) \n        return list(set(adj))\n    \n    def get_approaching_ships(self, cell):    \n        adj = []\n        for direction in directions:\n            adj_cell = self.get_adjacent_cell_in_direction(cell, direction)\n            if self.is_not_none(adj_cell):\n                adj.extend(self.get_nearby_ships(adj_cell))\n        if cell.ship in adj:\n            adj.remove(cell.ship) \n        for direction in directions:\n            adj_cell = self.get_adjacent_cell_in_direction(cell, direction)\n            if adj_cell.ship in adj:\n                adj.remove(adj_cell.ship) \n        return list(set(adj))","39b24525":"%%writefile -a submission.py\n\ndef agent(obs, config):\n    global init_Controller\n    global controller\n    if not init_Controller:\n        controller = Controller(obs, config) \n        init_Controller = True\n    return controller.next_actions(obs, config)","d8bf69d6":"### How I met Halite?\n\nTitanic was my starting point as it is the place where most Kagglers start their journey. And these diamonds used to pop up in my homepage as simulation competition Halite (I didn't realise they were spaceships at first) and I ignored them for a month thinking the competition is all about Reinforcement Learning. \n\nAnd I was thinking like Simulation Competitions can wait till I complete some course in Reinforcement Learning. Then one fine morning, I decided to explore all currently active competitions in Kaggle and to my surprise found that Halite is very much similar to the maze solving robots that we used to develop while in college. And then I started mining Halite....\n\nI decided Halite is my Python hands-on and being my first competition, I decided to go ahead with rule based programming and my target was a code that will be as good as the code I write in C++\/Java. And definitely I am not satisfied in this aspect as my code still has many bugs\/leakages\/inefficient loops which prompts me to update my Python skills and I have shortlisted a few next level courses for perusal.","ef492fbd":"### Import Environment for submission file and setup context","51cedb28":"## Submission File","1f74a249":"### Shipyard Next Actions","990691b5":"submission.py is the output file that is to contain the definition of the agent that will be deployed by the halite engine hosted in kaggle. The code is kept as it is in the final submission and no clean up is done and commented portions\/bugs are retained as it is.","3e32590f":"### Helper Functions","1a1483c4":"### Strategy : Tends to None\n\nBe optimistic when you are winning and be pessimistic when you are losing. Do the best that you can. Get as much halite as you can, spawn as many ships as you can if you are winning, make ships lightweight in the blitz and hope for the best. \n\nThis particular \"strategy of having no strategy\" evolved from my Evolutionary game theory based Bourgeoisie strategy (major versions 100-131) submissions scoring well below my old submission 47. So I went back to my submission 47 with two weeks left in the competition and started applying bux fixes and improvements. Finally with 21 minor versions in submission 47, my best bots were 47.0 (1196 bot), 47.12 (1208 bot) and 47.20 (1189 bot). In the last two days, I submitted multiple copies of these three bots which was a good move from the results as I can see.","e4480580":"## Introduction\n\n### How I came to Kaggle?\n\nI have programming experience in C++, Java, etc through my B.Tech \/ Masters of Computer Applications courses and as part of my job at VSSC\/ISRO. \n\nOn a quest to acquire new skills, I started doing online courses in Machine Learning and Python during the CoViD '19 Lockdown period. And I earned quite a number of [IBM Digital Credentials](https:\/\/www.youracclaim.com\/users\/arun-p-r\/badges) and specializations\/certificates. \n\nI was eager to get some hands-on experience and my colleague Kishan Kumar Mishra suggested Kaggle to me. It was an excellent suggestion as with each day since I joined Kaggle, I am learning new things that I couldn't find in any course. The exposure to ideas is mindblowing and I am overwhelmed with new techniques and models. \n\nCurrently I am working on implementing a Transformer based model for Stanford OpenVaccine Challenge in Kaggle and it is driving me nuts by each passing day ... (Since I prefer build from scratch method, not because there are not enough resources available, but that way I will learn more -- Though I copy baselines in competitions I am not serious about like I did for Cornell Birdcall Competition that ended last week).","891f0f91":"## Decisions that will decide whether you win\/lose","987713e4":"## Define the Controller Class","abda36bb":"### Exploration Functions","6a5a34ad":"# Halite IV - Swarm of Bots (Silver Submission)\n\nDeveloped towards Halite IV Competition in Kaggle.\n\nDevelopment Started : 2020-07-19 14:52:19 IST\n\nCompetition End date: 2020-09-22 11:59 UST\n\nAuthor : [ARUN P. R.](mailto:arunprathap@gmail.com)\n\nI am sharing my experience and code submitted to Halite IV Competition sponsored by Two Sigma hosted in Kaggle platform. This is the first Featured competition in Kaggle in which I am participating and I am very glad to reach the silver line. There were many ups and downs in the journey, but the end is sweet as always.\n\n### Snapshots\n\n[One of my favourite episodes where I beat opponents with skill level above me.](https:\/\/www.kaggle.com\/c\/halite\/leaderboard?dialog=episodes-episode-3485447)\n\n[Another one where I beat higher level submissions of opponents in Top 15](https:\/\/www.kaggle.com\/c\/halite\/leaderboard?dialog=episodes-episode-3476886)","8d5149b6":"### Ship Next Actions","c45dd4e6":"### Progression in Halite\n\nI started with the Starter code provided for the competition and with each improvement(?) that I did, my score came down by around 50 per submission consistently till my score reached around 300. Then I started getting the hang of things and score started improving by 100 per day till 800. Then it took me a week to cross 900, 2 days to cross 1000, 2 weeks to cross 1100 and another week to cross 1200. 1230 (for 1 week approx with rank 35) was my best score in Halite IV. \n\nI did a total of about 190 submissions with 131 major versions and others being minor versions for changes. At the end of submission deadline, my best score was around 1190 (ranked 42) and I had multiple copies of my 3 best submission (around 3 each of them) fighting among each other for becoming my best score in the final week. \n\nWith two days to go, my best submission is at rank 40 with the three best submissions scoring 1208, 1196 and 1189 and with current ratings my final rank will be in 38-43 range.","92b65823":"The starter code used is from my own [baseline](https:\/\/www.kaggle.com\/arunprathap\/getting-started-with-halite-bot-in-a-class-boile). I wanted the code to be less than 1k lines, but final SLOC is ~1.5k.","52b917a9":"### EOF","485840c5":"### Shipyard and Ship Actions","37c184b1":"### Routines for Swarm Update and Assignment","06fc77e4":"### Define Next Actions for the controller","9f0966e3":"### Detect Termination Conditions","baeee118":"### Start by initializing class variables and constants","5d4b44db":"## Define Agent"}}