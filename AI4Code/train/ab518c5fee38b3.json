{"cell_type":{"eafd60c0":"code","6c40038c":"code","a193709d":"code","51d6406c":"code","2e7cba97":"code","9ead11e1":"code","979c7bc8":"code","d5d22c37":"code","774be8c3":"code","8757d644":"code","974b8057":"code","045b3c2b":"code","9e0a66d8":"code","e9a361aa":"code","03a24605":"code","ec9add97":"code","71b07aeb":"code","aa62b97c":"code","fb6b9960":"code","8247f007":"markdown","c517c120":"markdown","76c68e7a":"markdown","ac681e31":"markdown","3bb0a330":"markdown","01c7de29":"markdown","773beca2":"markdown","f78aa683":"markdown","afc3bfa9":"markdown","1e48d2e7":"markdown","e9ea3024":"markdown","e798c4c2":"markdown","0cea501d":"markdown","5da8f77f":"markdown"},"source":{"eafd60c0":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","6c40038c":"#Reading Data\ndata=pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv' ,parse_dates=['Last Update'])\ndata.rename(columns={'ObservationDate':'Date', 'Country\/Region':'Country'}, inplace=True)\n\n#Earliest Cases\ndata.head()","a193709d":"data.shape","51d6406c":"#Missing Values\ndata.isnull().sum().to_frame('nulls')","2e7cba97":"df = data.groupby([\"Date\", \"Country\"])[['Date', 'Country', 'Confirmed', 'Deaths', 'Recovered']].sum().reset_index()\nsorted_By_Confirmed=df.sort_values('Confirmed',ascending=False)\nsorted_By_Confirmed=sorted_By_Confirmed.drop_duplicates('Country')\n\nworld_Confirmed_Total=sorted_By_Confirmed['Confirmed'].sum()\nworld_Deaths_Total=sorted_By_Confirmed['Deaths'].sum()\nworld_Recovered_Total=sorted_By_Confirmed['Recovered'].sum()\n\nActive=world_Confirmed_Total-world_Deaths_Total-world_Recovered_Total\n\nworld_Deaths_rate=(world_Deaths_Total*100)\/world_Confirmed_Total\nworld_Recovered_rate=(world_Recovered_Total*100)\/world_Confirmed_Total\n\nChina=sorted_By_Confirmed[sorted_By_Confirmed['Country']=='Mainland China']\nChina_Recovered_rate=(int(China['Recovered'].values)*100)\/int(China['Confirmed'].values)\n\n\nveri={'Total Confirmed cases  in the world':world_Confirmed_Total,'Total Deaths cases in the world':world_Deaths_Total,'Total Recovered cases in the world':world_Recovered_Total,'Total Active Cases':Active,'Rate of Recovered Cases %':world_Recovered_rate,'Rate of Deaths Cases %':world_Deaths_rate,'Rate of Recovered China cases %':China_Recovered_rate}\nveri=pd.DataFrame.from_dict(veri, orient='index' ,columns=['Total'])\nprint(\"04\/08\/2020\") \nveri.style.background_gradient(cmap='Greens')","9ead11e1":"Recovered_rate=(sorted_By_Confirmed['Recovered']*100)\/sorted_By_Confirmed['Confirmed']\nDeaths_rate=(sorted_By_Confirmed['Deaths']*100)\/sorted_By_Confirmed['Confirmed']\ncases_rate=(sorted_By_Confirmed.Confirmed*100)\/world_Confirmed_Total\n\nsorted_By_Confirmed['Active']=sorted_By_Confirmed['Confirmed']-sorted_By_Confirmed['Deaths']-sorted_By_Confirmed['Recovered']\nsorted_By_Confirmed['Recovered Cases Rate %']=pd.DataFrame(Recovered_rate)\nsorted_By_Confirmed['Deaths Cases Rate %']=pd.DataFrame(Deaths_rate)\nsorted_By_Confirmed['Total Cases Rate %']=pd.DataFrame(cases_rate)\n\n\nprint(\"Sorted By Confirmed Cases\")\nsorted_By_Confirmed.style.background_gradient(cmap='Reds')\n","979c7bc8":"sns.set(style=\"whitegrid\")\n\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(15,15 ))\n\nsns.barplot(x=\"Confirmed\", y=\"Country\", data=sorted_By_Confirmed.head(20),\n            label=\"Confirmed\", color=\"b\")\n\n# Plot the crashes where alcohol was involved\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Recovered\", y=\"Country\", data=sorted_By_Confirmed.head(20),\n            label=\"Recovered\", color=\"g\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Deaths\", y=\"Country\", data=sorted_By_Confirmed.head(20),\n            label=\"Deaths\", color=\"r\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\n","d5d22c37":"df_Difference = data.groupby([\"Date\", \"Country\"])[['Date', 'Country', 'Confirmed','Deaths']].sum().reset_index()\nsorted_By_Confirmed_Difference=df_Difference.sort_values('Country',ascending=False)\n\nx1=sorted_By_Confirmed_Difference[sorted_By_Confirmed_Difference.Date=='04\/08\/2020'].reset_index().drop('index',axis=1)\nx2=sorted_By_Confirmed_Difference[sorted_By_Confirmed_Difference.Date=='04\/07\/2020'].reset_index().drop('index',axis=1)\n\nh=pd.merge(x2,x1,on='Country')\nh['New Confirmed Cases']=h['Confirmed_y']-h['Confirmed_x']\nh['New Deaths ']=h['Deaths_y']-h['Deaths_x']\n\nh1=h.sort_values('New Confirmed Cases',ascending=False).head(50)\nh1=h1.drop(['Confirmed_x','Deaths_x','Date_x','Confirmed_y','Deaths_y'],axis=1).style.background_gradient(cmap='Greens')\nprint(\"The New Cases in 08\/04\")\nh1","774be8c3":"sorted_By_Confirmed1=sorted_By_Confirmed.head(10)\nx=sorted_By_Confirmed1.Country\ny=sorted_By_Confirmed1.Confirmed\nplt.rcParams['figure.figsize'] = (12, 10)\nsns.barplot(x,y,order=x ,palette=\"rocket\").set_title('Total Cases \/ Deaths \/ Recovered')  #graf \u00e7izdir (Most popular)","8757d644":"Top7=sorted_By_Confirmed.iloc[0:9,-1].values\nothers=sorted_By_Confirmed.iloc[9:,-1].sum()\nx=np.array(Top7)\nx2=np.array(others)\nrates=np.concatenate((x, x2), axis=None)\n\nrate_perCountry=pd.DataFrame(data=rates,index=[sorted_By_Confirmed['Country'].head(10)] ,columns=['rate'])\nrate_perCountry.rename(index={'Belgium': \"other Countries\"},inplace=True)\n\n\nlabels=rate_perCountry.index\nsizes=rate_perCountry['rate'].values\n\nexplode = None  # explode 1st slice\nplt.subplots(figsize=(8,8))\nplt.pie(sizes, explode=explode, labels=labels,autopct='%1.1f%%', shadow=False, startangle=0)\nplt.axis('equal')\nprint(\"cases rate per country of total cases in the world \")\nplt.show()","974b8057":"cases_per_Day = data.groupby([\"Date\"])['Confirmed','Deaths', 'Recovered'].sum().reset_index()\nsorted_By_Confirmed1=cases_per_Day.sort_values('Date',ascending=False)\n\nx=cases_per_Day.index\n\ny=cases_per_Day.Confirmed\ny1=cases_per_Day.Deaths\ny2=cases_per_Day.Recovered\n\nsns.set(style=\"whitegrid\")\n\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(12,10 ))\n\nplt.scatter(x,y,color='blue' , label='Confirmed Cases')\nplt.scatter(x,y1,color='red' ,label=\"Deaths Cases\")\nplt.scatter(x,y2,color='green',label=\"Recovered Cases\")\nplt.title(\"Increasing infections cases in the world per day .\")\nax.legend(ncol=2, loc='upper left', frameon=True)\nplt.show()","045b3c2b":"sorted_By_Confirmed1.style.background_gradient(cmap='Reds')","9e0a66d8":"#Train & Test Data \nx_data=pd.DataFrame(cases_per_Day.index)\ny_data=pd.DataFrame(cases_per_Day.Confirmed)\n","e9a361aa":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x_data,y_data,test_size=0.1,random_state=0)","03a24605":"#Polynomal Regression (degree=5)\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\npoly_reg=PolynomialFeatures(degree=5)\nx_poly=poly_reg.fit_transform(x_train)\nlin_reg2=LinearRegression()\nlin_reg2.fit(x_poly,y_train)","ec9add97":"cases_per_Day = data.groupby([\"Date\"])['Confirmed','Deaths', 'Recovered'].sum().reset_index()\nsorted_By_Confirmed1=cases_per_Day.sort_values('Date',ascending=False)\n\nx=cases_per_Day.index\n\ny=cases_per_Day.Confirmed\n\nplt.scatter(x,y,color='red')\nplt.plot(x_test,lin_reg2.predict(poly_reg.fit_transform(x_test)),color='blue')\nplt.title(\"Polynomial Regression Model \")\nplt.show()","71b07aeb":"y_pred=lin_reg2.predict(poly_reg.fit_transform(x_test))\n\nresult=pd.DataFrame(y_pred)\nresult['Real Value']=y_test.iloc[:,:].values\nresult['Predicted Value']=pd.DataFrame(y_pred)\nresult=result[['Real Value','Predicted Value']]\nresult","aa62b97c":"\nfrom sklearn.metrics import r2_score\n\nprint('Polynomial Regession  R2 Score   : ',r2_score(y_test, y_pred))","fb6b9960":"#today is 03\/29\/2020\nprint(\"After {0} day will be {1} case in the world\".format((88-len(cases_per_Day)),lin_reg2.predict(poly_reg.fit_transform([[88]]))))\nprint(\"After {0} day will be {1} case in the world\".format((98-len(cases_per_Day)),lin_reg2.predict(poly_reg.fit_transform([[98]]))))\nprint(\"After {0} day will be {1} case in the world\".format((108-len(cases_per_Day)),lin_reg2.predict(poly_reg.fit_transform([[108]]))))","8247f007":" # COVID-19 Analysis ,visualization & Prediction","c517c120":"# Make Predict For Future Days","76c68e7a":"# Total Confirmed , Deaths and Recovered cases in the world 04\/08\/2020","ac681e31":"# Polynomial Regression to predict future cases .","3bb0a330":"# Coron Virus With Numbers\n\nConfirmed --              Cumulative number of confirmed cases till that date <br>\nDeaths --               Cumulative number of of deaths till that date <br>\nRecovered --              Cumulative number of recovered cases till that date <br>\nActive -- Active Cases<br>\nRecovered Cases Rate % -- rate of Recovered Cases from total of Confirmed cases in same Country <br>\nDeaths Cases Rate % --    rate of death Cases from total of Confirmed cases in same Country <br>\nTotal Cases Rate % --     rate of total cases from Total cases in the world <br>","01c7de29":" If you like my Kernel,vote it please ... Thanks","773beca2":"# Prediction Future cases","f78aa683":"## What happened in one day ?  (New cases | New Deaths ) - 04\/08\/2020\ndifference between 04\/08\/2020 and 04\/07\/2020","afc3bfa9":"## Table that illustrates Increasing infections cases in the world per day .","1e48d2e7":"### Cases Rate per country of total cases in the world \n","e9ea3024":"# Top 10  infected Countries","e798c4c2":"## Graphic that illustrates Increasing infections cases per day","0cea501d":"### Model Graphic  ","5da8f77f":"## Test algorithm"}}