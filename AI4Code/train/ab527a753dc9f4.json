{"cell_type":{"d49a90ad":"code","dccce8b8":"code","cfb259f8":"code","bb9c916d":"code","c4a9f3e2":"code","fa605f3f":"code","190b880e":"code","9c29c994":"code","7e60cca7":"code","49d2be89":"code","c4d523f5":"code","f90e4e99":"code","9c0bf460":"code","49507cbd":"code","5d7461b1":"code","7e0214f0":"code","e55d5e4a":"code","c557ec50":"code","11e382c3":"code","30360089":"code","00f45fc0":"code","8ff9f52d":"code","35d2f1e9":"code","b45b06ec":"code","29ce154d":"markdown","8846318e":"markdown","9976a0f3":"markdown","f8ba320a":"markdown","f7a83725":"markdown","af6b1ffc":"markdown","a728a266":"markdown","4bf4395e":"markdown","ca34bec5":"markdown","da6b8a91":"markdown","4237b23d":"markdown","84e455df":"markdown","d1677cf0":"markdown","877dabb3":"markdown","b36de04c":"markdown","12b83220":"markdown","ed96d37a":"markdown","bac687ef":"markdown","5c71fcb2":"markdown","70bdf182":"markdown","95368e9a":"markdown","a5369d29":"markdown","5b3fe70c":"markdown","b4a591fd":"markdown","8494b457":"markdown","5250580b":"markdown","6c8c6827":"markdown","571e1915":"markdown","3fd4c4b4":"markdown"},"source":{"d49a90ad":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n","dccce8b8":"\nmonth = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nMLY_PRCP_NORMAL_AU = [2.20, 2.31, 2.78, 2.27, 4.05, 4.63, 2.44, 2.03, 2.54, 4.24, 2.94, 2.21]\nMLY_PRCP_NORMAL_SEA = [4.81, 3.31, 3.51, 2.77, 2.16, 1.63, 0.79, 0.97, 1.52, 3.41, 5.84, 5.43]\n\nfig, ax = plt.subplots()\n\n## Plot MLY-PRCP-NORMAL from seattle_weather against the MONTH\nax.plot(month, MLY_PRCP_NORMAL_SEA, color = 'r', marker = 'o', linestyle = '--', alpha = 0.5)\n\n# Plot MLY-PRCP-NORMAL from austin_weather against MONTH\nax.plot(month, MLY_PRCP_NORMAL_AU, color = 'b', marker = 'v', alpha = 0.5)\n# Call the show function\nplt.show()","cfb259f8":"\nmonth = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nMLY_PRCP_NORMAL_AU = [2.20, 2.31, 2.78, 2.27, 4.05, 4.63, 2.44, 2.03, 2.54, 4.24, 2.94, 2.21]\nMLY_PRCP_NORMAL_SEA = [4.81, 3.31, 3.51, 2.77, 2.16, 1.63, 0.79, 0.97, 1.52, 3.41, 5.84, 5.43]\n\n\nfig, ax = plt.subplots()\n\n## Plot MLY-PRCP-NORMAL from seattle_weather against the MONTH\nax.plot(month, MLY_PRCP_NORMAL_SEA, color = 'r', marker = 'o', linestyle = '--', alpha = 0.5)\n\n# Plot MLY-PRCP-NORMAL from austin_weather against MONTH\nax.plot(month, MLY_PRCP_NORMAL_AU, color = 'b', marker = 'v', alpha = 0.5)\n\nax.set_xlabel(\"Time (months)\")\n# Customize the y-axis label\nax.set_ylabel(\"Precipitation (inches)\")\n# Add the title\nax.set_title(\"Weather patterns in Austin and Seattle\")\n\n# Call the show function\nplt.show()","bb9c916d":"\nmonth = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nMLY_PRCP_NORMAL_AU = [2.20, 2.31, 2.78, 2.27, 4.05, 4.63, 2.44, 2.03, 2.54, 4.24, 2.94, 2.21]\nMLY_TAVG_NORMAL_AU = [49.2, 52.1, 59.2, 67.3, 75.2, 81.0, 83.4, 83.7, 77.8, 69.0, 58.4, 50.4]\n\n\nMLY_PRCP_NORMAL_SEA = [4.81, 3.31, 3.51, 2.77, 2.16, 1.63, 0.79, 0.97, 1.52, 3.41, 5.84, 5.43]\nMLY_TAVG_NORMAL_SEA = [42.1, 43.4, 46.6, 50.5, 56.0, 61.0, 65.9, 66.5, 61.6, 53.3, 46.2, 41.1]\n\n\n# Create a Figure and an array of subplots with 2 rows and 2 columns\nfig, ax = plt.subplots(2, 2)\n\n# Addressing the top left Axes as index 0, 0, plot month and Seattle precipitation\nax[0, 0].plot(month, MLY_PRCP_NORMAL_SEA, color = 'r', marker = 'o', linestyle = '--', alpha = 0.5)\n\n# In the top right (index 0,1), plot month and Seattle temperatures\nax[0, 1].plot(month, MLY_TAVG_NORMAL_SEA, color = 'r', marker = 'o', linestyle = '--', alpha = 0.5)\n\n# In the bottom left (1, 0) plot month and Austin precipitations\nax[1, 0].plot(month, MLY_PRCP_NORMAL_AU, color = 'b', marker = 'v', alpha = 0.5)\n\n# In the bottom right (1, 1) plot month and Austin temperatures\nax[1, 1].plot(month, MLY_TAVG_NORMAL_AU, color = 'b', marker = 'v', alpha = 0.5)\n\nplt.show()","c4a9f3e2":"\nfig, ax = plt.subplots(2, 1, sharey=True)\n\n\nmonth = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nMLY_PRCP_NORMAL_AU = [2.20, 2.31, 2.78, 2.27, 4.05, 4.63, 2.44, 2.03, 2.54, 4.24, 2.94, 2.21]\nMLY_PRCP_25PCTL_AU = [1.20, 1.31, 2.0, 1.57, 3.0, 4.0, 2.0, 1.63, 2.04, 4.0, 2.34, 2.1]\nMLY_PRCP_75PCTL_AU = [2.80, 2.91, 2.98, 2.57, 4.65, 4.95, 2.94, 2.63, 2.84, 4.64, 3.3, 2.61]\n\n\nMLY_PRCP_NORMAL_SEA = [4.81, 3.31, 3.51, 2.77, 2.16, 1.63, 0.79, 0.97, 1.52, 3.41, 5.84, 5.43]\nMLY_PRCP_25PCTL_SEA = [4.01, 3.01, 3.01, 2.27, 2.0, 1.33, 0.19, 0.37, 1.32, 3.0, 5.34, 5.33]\nMLY_PRCP_75PCTL_SEA = [6.01, 4.01, 3.91, 3.35, 2.66, 2.55, 1.39, 1.53, 1.92, 3.91, 6.44, 5.73]\n# Plot Austin precipitation in the bottom axes\n\nax[0].plot(month, MLY_PRCP_NORMAL_AU, color='b', alpha = 0.5)\nax[0].plot(month, MLY_PRCP_25PCTL_AU, color='b', linestyle='--', alpha = 0.5)\nax[0].plot(month, MLY_PRCP_75PCTL_AU, color='b', linestyle='--', alpha = 0.5)\n\n\n# Plot Seattle precipitation in the top axes\nax[1].plot(month, MLY_PRCP_NORMAL_SEA, color='r')\nax[1].plot(month, MLY_PRCP_25PCTL_SEA, color='r', linestyle='--', alpha = 0.5)\nax[1].plot(month, MLY_PRCP_75PCTL_SEA, color='r', linestyle='--',  alpha = 0.5)\nplt.show()","fa605f3f":"# Read the data from file using read_csv\n#To designate the index as a DateTimeIndex, you will use the parse_dates and index_col key-word arguments both \n#to parse this column as a variable that contains dates and also to designate it as the index for this DataFrame\n\nclimate_change = pd.read_csv('..\/input\/visualization-dataset\/climate_change.csv', parse_dates = [\"date\"], \n                             index_col = \"date\")\nclimate_change.head()","190b880e":"fig, ax = plt.subplots()\n\n# Add the time-series for \"relative_temp\" to the plot\nax.plot(climate_change.index, climate_change['relative_temp'])\n\n# Set the x-axis label\nax.set_xlabel('Time')\n\n# Set the y-axis label \nax.set_ylabel('Relative temperature (Celsius)')\n\n# Show the figure\nplt.show()","9c29c994":"# Use plt.subplots to create fig and ax\nfig, ax = plt.subplots()\n\n# Create variable seventies with data from \"1970-01-01\" to \"1979-12-31\"\nseventies = climate_change[\"1970-01-01\":\"1979-12-31\"]\n\n# Add the time-series for \"co2\" data from seventies to the plot\nax.plot(seventies.index, seventies[\"co2\"])\n\n# Show the figure\nplt.show()","7e60cca7":"fig, ax = plt.subplots()\n\n# Plot the CO2 variable in blue\nax.plot(climate_change.index, climate_change[\"co2\"], color='blue', alpha = 0.5)\n\n# Create a twin Axes that shares the x-axis\nax2 = ax.twinx()\n\n# Plot the relative temperature in red\nax2.plot(climate_change.index, climate_change[\"relative_temp\"], color='red', alpha = 0.5)\n\nplt.show()","49d2be89":"# Define a function called plot_timeseries\ndef plot_timeseries(axes, x, y, color, xlabel, ylabel):\n\n  # Plot the inputs x,y in the provided color\n  axes.plot(x, y, color=color)\n\n  # Set the x-axis label\n  axes.set_xlabel(xlabel)\n\n  # Set the y-axis label\n  axes.set_ylabel(ylabel, color=color)\n\n  # Set the colors tick params for y-axis\n  axes.tick_params('y', colors=color)\n    \n    \nfig, ax = plt.subplots()\n# Plot the CO2 levels time-series in blue\nplot_timeseries(ax, climate_change.index, climate_change[\"co2\"], 'blue', \"Time (years)\", \"CO2 levels\")\n# Create a twin Axes object that shares the x-axis\nax2 = ax.twinx()\n# Plot the relative temperature data in red\nplot_timeseries(ax2, climate_change.index, climate_change['relative_temp'], 'red', \"Time (years)\", \"Relative temperature (Celsius)\")\nplt.show()","c4d523f5":"fig, ax = plt.subplots()\n\n# Plot the relative temperature data\nax.plot(climate_change.index, climate_change['relative_temp'])\n\n# Annotate the date at which temperatures exceeded 1 degree\nax.annotate(\">1 degree\", xy=(pd.Timestamp('2015-10-06'), 1))\n\nplt.show()","f90e4e99":"fig, ax = plt.subplots()\n# Plot the CO2 levels time-series in blue\nplot_timeseries(ax, climate_change.index, climate_change[\"co2\"], 'blue', \"Time (years)\", \"CO2 levels\")\n# Create an Axes object that shares the x-axis\nax2 = ax.twinx()\n\n# Plot the relative temperature data in red\nplot_timeseries(ax2, climate_change.index, climate_change['relative_temp'], 'red', \"Time (years)\", \"Relative temp (Celsius)\")\n\n# Annotate the point with relative temperature >1 degree\nax2.annotate(\">1 degree\", xy=(pd.Timestamp('2015-10-06'), 1), xytext=(pd.Timestamp('2008-10-06'), -0.2), arrowprops={'arrowstyle':'->', 'color':'gray'})\n\nplt.show()","9c0bf460":"medals = pd.read_csv('..\/input\/visualization-dataset\/medals_by_country_2016.csv', index_col=0)\n\nfig, ax = plt.subplots()\n\n# Plot a bar-chart of gold medals as a function of country\nax.bar(medals.index, medals[\"Gold\"])\nax.bar(medals.index, medals[\"Silver\"], bottom=medals[\"Gold\"])\nax.bar(medals.index, medals[\"Bronze\"], bottom=medals[\"Gold\"] + medals[\"Silver\"])\n# Set the x-axis tick labels to the country names\nax.set_xticklabels(medals.index, rotation=90)\n\n# Set the y-axis label\nax.set_ylabel(\"Number of medals\")\n\nplt.show()","49507cbd":"olympics_2016 = pd.read_csv('..\/input\/visualization-dataset\/summer2016.csv', index_col=0)\n\n#Filter males particioated in Rowing  \nmens_rowing = olympics_2016[np.logical_and(olympics_2016['Sport'] == \"Rowing\", olympics_2016['Sex'] == \"M\")]\n\n\n#Filter males particioated in Gymnastics\nmens_gymnastics = olympics_2016[np.logical_and(olympics_2016['Sport'] == \"Gymnastics\", olympics_2016['Sex'] == \"M\")]\n\nfig, ax = plt.subplots()\n# Plot a histogram of \"Weight\" for mens_rowing\nax.hist(mens_rowing[\"Weight\"])\n\n# Compare to histogram of \"Weight\" for mens_gymnastics\nax.hist(mens_gymnastics[\"Weight\"])\n\n# Set the x-axis label to \"Weight (kg)\"\nax.set_xlabel(\"Weight (kg)\")\n\n# Set the y-axis label to \"# of observations\"\nax.set_ylabel(\"# of observations\")\n\nplt.show()","5d7461b1":"fig, ax = plt.subplots()\n\n# Plot a histogram of \"Weight\" for mens_rowing\nax.hist(mens_rowing[\"Weight\"], histtype='step', label=\"Rowing\", bins=5)\n\n# Compare to histogram of \"Weight\" for mens_gymnastics\nax.hist(mens_gymnastics[\"Weight\"], histtype='step', label=\"Gymnastics\", bins=5)\n\nax.set_xlabel(\"Weight (kg)\")\nax.set_ylabel(\"# of observations\")\n\n# Add the legend and show the Figure\nax.legend()\nplt.show()","7e0214f0":"fig, ax = plt.subplots()\n\n# Add a bar for the rowing \"Height\" column mean\/std\nax.bar(\"Rowing\", mens_rowing[\"Height\"].mean(), yerr=mens_rowing[\"Height\"].std())\n\n# Add a bar for the gymnastics \"Height\" column mean\/std\nax.bar(\"Gymnastics\", mens_gymnastics[\"Height\"].mean(), yerr=mens_gymnastics[\"Height\"].std())\n\n# Label the y-axis\nax.set_ylabel(\"Height (cm)\")\n\nplt.show()","e55d5e4a":"month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nMLY_TAVG_NORMAL_AU = [49.2, 52.1, 59.2, 67.3, 75.2, 81.0, 83.4, 83.7, 77.8, 69.0, 58.4, 50.4]\nMLY_TAVG_STDDEV_AU = [ 3.0, 3.4, 3.1, 2.9, 2.4, 2.2, 1.9, 1.6, 2.0, 1.9, 2.9, 3.5]\n\nMLY_TAVG_NORMAL_SEA = [42.1, 43.4, 46.6, 50.5, 56.0, 61.0, 65.9, 66.5, 61.6, 53.3, 46.2, 41.1]\nMLY_TAVG_STDDEV_SEA = [ 2.2, 2.3, 2.0, 1.6, 2.2, 1.8, 1.8, 1.4, 1.7, 1.8, 2.9, 2.2]\n\nfig, ax = plt.subplots()\n\n# Add the Seattle temperature data in each month with standard deviation error bars\nax.errorbar(month, MLY_TAVG_NORMAL_SEA, yerr=MLY_TAVG_STDDEV_SEA)\n\n# Add the Austin temperature data in each month with standard deviation error bars\nax.errorbar(month, MLY_TAVG_NORMAL_AU , yerr=MLY_TAVG_STDDEV_AU)\n\n# Set the y-axis label\nax.set_ylabel(\"Temperature (Fahrenheit)\")\n\nplt.show()\n\n\n","c557ec50":"fig, ax = plt.subplots()\n\n# Add a boxplot for the \"Height\" column in the DataFrames\nax.boxplot([mens_rowing[\"Height\"], mens_gymnastics[\"Height\"]])\n\n# Add x-axis tick labels:\nax.set_xticklabels([\"Rowing\", \"Gymnastics\"])\n\n# Add a y-axis label\nax.set_ylabel(\"Height (cm)\")\n\nplt.show()\n","11e382c3":"fig, ax = plt.subplots()\n# Add data: \"co2\" on x-axis, \"relative_temp\" on y-axis\nax.scatter(climate_change[\"co2\"], climate_change[\"relative_temp\"])\n# Set the x-axis label to \"CO2 (ppm)\"\nax.set_xlabel(\"CO2 (ppm)\")\nax.set_ylabel(\"Relative temperature (C)\")\n\nplt.show()","30360089":"fig, ax = plt.subplots()\n\n# Add data: \"co2\", \"relative_temp\" as x-y, index as color\nax.scatter(climate_change[\"co2\"], climate_change[\"relative_temp\"], c=climate_change.index)\n\n# Set the x-axis label to \"CO2 (ppm)\"\nax.set_xlabel(\"CO2 (ppm)\")\n\n# Set the y-axis label to \"Relative temperature (C)\"\nax.set_ylabel(\"Relative temperature (C)\")\n\nplt.show()","00f45fc0":"month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nMLY_TAVG_NORMAL_SEA = [42.1, 43.4, 46.6, 50.5, 56.0, 61.0, 65.9, 66.5, 61.6, 53.3, 46.2, 41.1]\n\n# Use the \"ggplot\" style and create new Figure\/Axes\nplt.style.use(\"ggplot\")\nfig, ax = plt.subplots()\nax.plot(month, MLY_TAVG_NORMAL_SEA)\nplt.show()\n\n\n","8ff9f52d":"month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nMLY_TAVG_NORMAL_SEA = [42.1, 43.4, 46.6, 50.5, 56.0, 61.0, 65.9, 66.5, 61.6, 53.3, 46.2, 41.1]\n\n# Use the \"ggplot\" style and create new Figure\/Axes\nplt.style.use(\"ggplot\")\nfig, ax = plt.subplots()\nax.plot(month, MLY_TAVG_NORMAL_SEA)\n# Set figure dimensions and save as a PNG\nfig.set_size_inches([5, 3])\nfig.savefig('figure_3_5.png')","35d2f1e9":"#olympics_2016 = pd.read_csv('..\/input\/visualization-dataset\/summer2016.csv', index_col=0)\n\nsports_column = olympics_2016[\"Sport\"]\n\n# Find the unique values of the \"Sport\" column\nsports = sports_column.unique()\n\n# Print out the unique sports values\nprint(sports)\n","b45b06ec":"fig, ax = plt.subplots()\n# Loop over the different sports branches\nfor sport in sports:\n  # Extract the rows only for this sport\n  sport_df = olympics_2016[olympics_2016[\"Sport\"] == sport] \n  # Add a bar for the \"Weight\" mean with std y error bar\n  ax.bar(sport, sport_df[\"Weight\"].mean(), yerr=sport_df[\"Weight\"].std())\nax.set_ylabel(\"Weight\")\nax.set_xticklabels(sports, rotation=90)\n\nfig.set_size_inches([10, 6])\nplt.show()\n\n# Save the figure to file\n\n#fig.savefig(\"sports_weights.png\")","29ce154d":"# Unique values of a column","8846318e":"# *1- Introduction to Matplotlib*","9976a0f3":"# 3- *Quantitative comparisons and statistical visualizations*","f8ba320a":"# Automating figures from data","f7a83725":"# Automate visualization: Bar chart for each sport category w\/o knowing total no. of categories","af6b1ffc":"# Switching between styles (ggplot)","a728a266":"# Simple scatter plot","4bf4395e":"**This notebook is based on the content presented in Datacamp course 'Intorduction to Visualization using Matplotlib'**","ca34bec5":"# \"Step\" histogram","da6b8a91":"# Stacked bar chart: Olympic medals per country (Gold, Silver and Bronze) in single chart ","4237b23d":"# Save a figure with different sizes\n\n\n**Differentfileformats**\nfig.savefig(\"gold_medals.jpg\")\nfig.savefig(\"gold_medals.jpg\", quality=50)\nfig.savefig(\"gold_medals.svg\")\n\n**Resolution**\nfig.savefig(\"gold_medals.png\", dpi=300)\n\n\n**Size**\nfig.set_size_inches([5, 3])\n","84e455df":"# Creating small multiples\/subplots with plt.subplots","d1677cf0":"# Annotating a plot of time-series data","877dabb3":"# Adding error-bars to a plot (using wweather data)","b36de04c":"# Plotting two variables","12b83220":"# Defining a function that plots time-series data (two variables)","ed96d37a":"# Customonzing: adding title and axes label","bac687ef":"# Using a time index to zoom in","5c71fcb2":"# Adding error-bars to a bar chart\n","70bdf182":"# Read climate data with a time index","95368e9a":"# *2- Time Series Data*","a5369d29":"# Creating histograms","5b3fe70c":"# Line plots showing weather for two different cities","b4a591fd":"# Small multiples\/sub-plots with shared y axis","8494b457":"# *4-Preparing your figures to share with others*","5250580b":"# Plot time-series data","6c8c6827":"# Encoding time by color in scatter plot","571e1915":"# Creating boxplots (using Oylmpics data)","3fd4c4b4":"# Plotting time-series: putting it all together (with annotation)"}}