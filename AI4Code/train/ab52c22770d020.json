{"cell_type":{"f9fcb5e6":"code","a804fd21":"code","bbb76d56":"code","51037cdd":"code","1901af9a":"code","6a11f992":"code","2087a6fc":"code","23e4f840":"code","ae49729a":"code","a1c15b8f":"code","44eb8753":"code","8c4dfebf":"code","364e69ba":"code","15d5ce03":"code","8ed78de9":"code","53e5ed47":"code","96065a9d":"code","bd917137":"code","346b0780":"code","9c6e4c32":"code","892c54c2":"code","81614f9e":"code","32852ae7":"code","92db7301":"code","3f3e23b5":"code","cbe1b3ae":"code","250774b8":"code","ff616c92":"code","f7354f28":"code","b7208e5c":"code","cb284806":"code","d703fcc2":"code","d755d9d4":"code","f31b8d5f":"code","5dfb112d":"code","67b41a98":"code","d406742c":"markdown","96bfb25f":"markdown","f296886e":"markdown","6ab2c434":"markdown","fb57f022":"markdown","f4639f4a":"markdown","c1c57b34":"markdown","32fc7ac3":"markdown"},"source":{"f9fcb5e6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.preprocessing import *\nfrom sklearn.model_selection import *\nfrom sklearn.metrics import *\n\nimport gc\nfrom tqdm import tqdm, tqdm_notebook\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nimport xgboost as xgb","a804fd21":"pwd","bbb76d56":"path = '..\/input\/healthcare-ananlytics\/'","51037cdd":"train = pd.read_csv(path+'Train.csv')\ntest = pd.read_csv(path+'test_l0Auv8Q.csv')\nhealth_camp = pd.read_csv(path+'Health_Camp_Detail.csv')\ncamp_1 = pd.read_csv(path+'First_Health_Camp_Attended.csv')\ncamp_2 = pd.read_csv(path+'Second_Health_Camp_Attended.csv')\ncamp_3 = pd.read_csv(path+'Third_Health_Camp_Attended.csv')\npatient_profile = pd.read_csv(path+'Patient_Profile.csv')\nss = pd.read_csv(path+'sample_submmission.csv')\ndata_dict = pd.read_excel(path+'Data_Dictionary.xlsx')","1901af9a":"train.head()","6a11f992":"train.columns","2087a6fc":"patient_profile.columns","23e4f840":"test['Patient_ID'].describe()","ae49729a":"np.intersect1d(train['Patient_ID'], test['Patient_ID']).shape[0]\/train['Patient_ID'].nunique()","a1c15b8f":"patient_profile[['Income', 'Education_Score', 'Age']] = patient_profile[['Income', 'Education_Score', 'Age']].apply(lambda x: x.str.replace('None', 'NaN').astype('float'))\npatient_profile[['City_Type',\t'Employer_Category']] = patient_profile[['City_Type',\t'Employer_Category']].apply(lambda x: pd.factorize(x)[0])","44eb8753":"for df_tmp in [train, test]:\n  for c in ['Health_Camp_ID']:\n    # mapper = train\n    df_tmp[c + '_freq'] = df_tmp[c].map(df_tmp[c].value_counts(normalize=True))\n","8c4dfebf":"train = pd.merge(train, patient_profile, on = 'Patient_ID', how = 'left')\ntest = pd.merge(test, patient_profile, on = 'Patient_ID', how = 'left')","364e69ba":"#### Getting the target\n\nfor c in [camp_1, camp_2, camp_3, train]:\n  c['id'] = c['Patient_ID'].astype('str') + c['Health_Camp_ID'].astype('str')\ncamp_3 = camp_3[camp_3['Number_of_stall_visited'] > 0]\n\nall_patients_in_camp = pd.Series(camp_1['id'].tolist() + camp_2['id'].tolist() + camp_3['id'].tolist()).unique()\n\ntrain['target'] = 0\ntrain.loc[train['id'].isin(all_patients_in_camp), 'target'] = 1","15d5ce03":"train['target'].value_counts(normalize=True)","8ed78de9":"health_camp['Category1'] = health_camp['Category1'].map({'First': 1, 'Second': 2, 'Third': 3})\nhealth_camp['Category2'] = pd.factorize(health_camp['Category2'])[0]\n\nhealth_camp['Camp_Start_Date'] = pd.to_datetime(health_camp['Camp_Start_Date'])\nhealth_camp['Camp_End_Date'] = pd.to_datetime(health_camp['Camp_End_Date'])\nhealth_camp['total_days_of_campaign'] = (health_camp['Camp_End_Date'] - health_camp['Camp_Start_Date']).dt.days\n\nhealth_camp['starting_day'] = pd.to_datetime(health_camp['Camp_Start_Date']).dt.day\nhealth_camp['ending_day'] = pd.to_datetime(health_camp['Camp_End_Date']).dt.day\nhealth_camp['starting_week'] = pd.to_datetime(health_camp['Camp_Start_Date']).dt.week\nhealth_camp['ending_week'] = pd.to_datetime(health_camp['Camp_End_Date']).dt.week\nhealth_camp['starting_month'] = pd.to_datetime(health_camp['Camp_Start_Date']).dt.month\nhealth_camp['ending_month'] = pd.to_datetime(health_camp['Camp_End_Date']).dt.month\nhealth_camp['Is_weekend_start'] = np.where(health_camp['Camp_Start_Date'].isin([5,6]),1,0)\nhealth_camp['Is_weekday_start'] = np.where(health_camp['Camp_Start_Date'].isin([0,1,2,3,4]),1,0)\nhealth_camp['Dayofweek_start'] = pd.to_datetime(health_camp['Camp_Start_Date']).dt.dayofweek\nhealth_camp['Dayofweek_end'] = pd.to_datetime(health_camp['Camp_End_Date']).dt.dayofweek\n\n# health_camp['difference_to_next_campaign'] = (health_camp['Camp_End_Date'] - health_camp['Camp_Start_Date'].shift(-1)).dt.days\n# health_camp['difference_to_prev_campaign'] = (health_camp['Camp_Start_Date'] - health_camp['Camp_End_Date'].shift(1)).dt.days","53e5ed47":"train = pd.merge(train, health_camp, on = 'Health_Camp_ID', how = 'left')\ntest = pd.merge(test, health_camp, on = 'Health_Camp_ID', how = 'left')","96065a9d":"D_COL = 'Registration_Date'\nfor df_tmp in [train, test]:\n  df_tmp[D_COL] = pd.to_datetime(df_tmp[D_COL])\ntest_min_date = test[D_COL].min()","bd917137":"np.intersect1d(train['Patient_ID'], test['Patient_ID']).shape","346b0780":"train.columns","9c6e4c32":"train.head(1)","892c54c2":"var_names = ['Var'+str(i) for i in range(1,6)]\nsums_tr = [] \nsubs_tr = [] \nmul_tr = [] \ndiv_tr = []\nsums_ts = []\nsubs_ts = []\nmul_ts = []\ndiv_ts = []\nfor row in train[var_names].itertuples():\n    sums_tr.append(row[1]+row[2]+row[3]+row[4]+row[5])\n    subs_tr.append(row[1]-row[2]-row[3]-row[4]-row[5])\n    mul_tr.append(row[1]*row[2]*row[3]*row[4]*row[5])\n    #div_tr.append(row[1]\/row[2]\/row[3]\/row[4]\/row[5])\n    \nfor row2 in test[var_names].itertuples():\n    sums_ts.append(row[1]+row[2]+row[3]+row[4]+row[5])\n    subs_ts.append(row[1]-row[2]-row[3]-row[4]-row[5])\n    mul_ts.append(row[1]*row[2]*row[3]*row[4]*row[5])\n    #div_ts.append(row[1]\/row[2]\/row[3]\/row[4]\/row[5])\n    \n    \ntrain['sum_VARS'] = sums_tr\ntrain['sub_VARS'] = subs_tr\ntrain['mul_VARS'] = mul_tr\n#train['div_VARS'] = div_tr\ntest['sum_VARS'] = sums_ts\ntest['sub_VARS'] = subs_ts\ntest['mul_VARS'] = mul_ts\n#test['div_VARS'] = div_ts\n","81614f9e":"### Getting a train and validation split, similar to test data\n\ntrn = train[train[D_COL] < test_min_date]\nval = train[train[D_COL] >= test_min_date]","32852ae7":"trn['target']","92db7301":"TARGET_COL = 'target'\nfeatures = [c for c in trn.columns if c not in ['Health_Camp_ID', 'Registration_Date', TARGET_COL, 'id', 'Camp_Start_Date', 'Camp_End_Date', 'First_Interaction']]\nprint(len(features))\nprint(features)","3f3e23b5":"trn[features].dtypes","cbe1b3ae":"from sklearn.model_selection import RandomizedSearchCV\ngridParams = {\n    'learning_rate': np.arange(0.01,0.05,0.01),\n    'n_estimators': np.arange(200,1400,100),\n    'num_leaves': np.arange(50,150,10),\n    'max_depth' : np.arange(4,15),\n    'colsample_bytree' : np.arange(0.4,0.8,0.1),\n    'subsample' : np.arange(0.4,0.8,0.1),\n    'min_split_gain' :  np.arange(0.1,0.8,0.1),\n    'min_data_in_leaf':np.arange(4,15),\n    'metric':['auc']\n    }\nclf = LGBMClassifier()\ngrid = RandomizedSearchCV(clf,gridParams,verbose=10,cv=5,n_jobs = -1,n_iter=10)\ngrid.fit(train[features],train['target'])\nprint(grid.best_params_)","250774b8":"clf = LGBMClassifier(n_estimators=1100, learning_rate=0.01, verbose=1,\n                     random_state=1, colsample_bytree=0.7, reg_alpha=0, reg_lambda=0,\n                     min_data_in_leaf=7,min_split_gain=0.2,max_depth=10,num_leaves=130,subsample=0.4)\n\nclf.fit(trn[features], trn[TARGET_COL], eval_set=[(val[features], val[TARGET_COL])], verbose=50,\n        eval_metric = 'auc', early_stopping_rounds = 50)\n\npreds = clf.predict_proba(test[features])[:, 1]","ff616c92":"trn[features].columns","f7354f28":"fi = pd.Series(index = features, data = clf.feature_importances_)\nfi.sort_values(ascending=False)[-20:][::-1].plot(kind = 'barh')","b7208e5c":"ss['Outcome'] = preds\nSUB_FILE_NAME = 'submission.csv'\nss.to_csv(SUB_FILE_NAME, index=False)","cb284806":"xgb1 = xgb.XGBClassifier(\n learning_rate =0.1,\n n_estimators=1000,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n objective= 'binary:logistic',\n nthread=4,\n scale_pos_weight=1,\n seed=27)\nxgb1.fit(trn[features], trn[TARGET_COL], eval_set=[(val[features], val[TARGET_COL])], verbose=50,\n        eval_metric = 'auc',early_stopping_rounds=50)","d703fcc2":"pre = xgb1.predict_proba(test[features])[:, 1]\nss['Outcome'] = pre\nSUB_FILE_NAME = 'sub.csv'\nss.to_csv(SUB_FILE_NAME, index=False)","d755d9d4":"model = CatBoostClassifier(iterations=1000,verbose=1, eval_metric='AUC',)\nmodel.fit(train[features],train['target'],verbose=True)","f31b8d5f":"cat = model.predict_proba(test[features])[:, 1]\nss['Outcome'] = cat\nSUB_FILE_NAME = 'submission_jantahack_healthcare3.csv'\nss.to_csv(SUB_FILE_NAME, index=False)","5dfb112d":"reds = 0\nfor seed_val in [1,3,10,15,20,33,333,1997,2020,2021]:\n    print (seed_val)\n    m=LGBMClassifier(n_estimators=450,learning_rate=0.03,random_state=seed_val,colsample_bytree=0.5,reg_alpha=2,reg_lambda=2)\n    m.fit(train[features],train['target'])\n    predict=m.predict_proba(test[features])[:,1]\n    preds += predict\npreds = preds\/10","67b41a98":"ss['Outcome'] = preds\nSUB_FILE_NAME = 'submission_jantahack.csv'\nss.to_csv(SUB_FILE_NAME, index=False)","d406742c":"# Blending with seed value","96bfb25f":"MedCamp organizes health camps in several cities with low work life balance. They reach out to working people and ask them to register for these health camps. For those who attend, MedCamp provides them facility to undergo health checks or increase awareness by visiting various stalls (depending on the format of camp). \n\nMedCamp has conducted 65 such events over a period of 4 years and they see a high drop off between \u201cRegistration\u201d and Number of people taking tests at the Camps. In last 4 years, they have stored data of ~110,000 registrations they have done.\n\nOne of the huge costs in arranging these camps is the amount of inventory you need to carry. If you carry more than required inventory, you incur unnecessarily high costs. On the other hand, if you carry less than required inventory for conducting these medical checks, people end up having bad experience.\n\n**The Process:**\nMedCamp employees \/ volunteers reach out to people and drive registrations.\nDuring the camp, People who \u201cShowUp\u201d either undergo the medical tests or visit stalls depending on the format of health camp.\n \n\n**Other things to note:**\nSince this is a completely voluntary activity for the working professionals, MedCamp usually has little profile information about these people.\nFor a few camps, there was hardware failure, so some information about date and time of registration is lost.\nMedCamp runs 3 formats of these camps. The first and second format provides people with an instantaneous health score. The third format provides information about several health issues through various awareness stalls.\n**Favorable outcome:**\nFor the first 2 formats, a favourable outcome is defined as getting a health_score, while in the third format it is defined as visiting at least a stall.\nYou need to predict the chances (probability) of having a favourable outcome.","f296886e":"# RandomizedSearchCV on LightGBMClassifier","6ab2c434":"# taking data as input","fb57f022":"# Data preprocessing","f4639f4a":"# Loading Liberaries","c1c57b34":"# At last CatBoostClassifier","32fc7ac3":"# Now trying XGboost"}}