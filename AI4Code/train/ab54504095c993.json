{"cell_type":{"80acac1e":"code","f07b195e":"code","843bee52":"code","935d24bc":"code","00cda2de":"code","6b56ebfc":"code","5bf78974":"code","664f4392":"code","0ce7f158":"code","30d649e1":"code","16270720":"code","de276368":"code","86035a86":"code","fae2dade":"code","dbfb6694":"code","fd043549":"code","3b41b1f3":"code","1af7daf5":"code","7361c95d":"code","699cdb8a":"code","0c38c053":"code","05708b34":"markdown","411143f1":"markdown","faa56771":"markdown","62f81ad8":"markdown","b58d9338":"markdown","3e13a29e":"markdown"},"source":{"80acac1e":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","f07b195e":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\nfull = train.append(test,ignore_index = True)\ntitanic = full[:891]\n\nprint(f'Full Shape: {full.shape}\\n Titanic shape: {titanic.shape}')","843bee52":"titanic.head()","935d24bc":"titanic.describe()","00cda2de":"#Plotting the Correlation amongst the features\nsns.heatmap(titanic.corr(),annot=True,cmap='Pastel2')\nplt.tight_layout()","6b56ebfc":"facet = sns.FacetGrid(titanic,hue='Survived',aspect=4,row='Sex')\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0,titanic['Age'].max()))\nfacet.add_legend()","5bf78974":"facet = sns.FacetGrid(titanic,hue='Survived',aspect=4,row='Sex')\nfacet.map(sns.kdeplot,'Fare',shade=True)\nfacet.set(xlim = (0,titanic['Fare'].max()))\nfacet.add_legend()","664f4392":"sns.barplot(x='Embarked',y='Survived',data=titanic,palette='Pastel2')","0ce7f158":"sns.barplot(x='Sex',y='Survived',data=titanic,palette='Pastel2')","30d649e1":"sns.barplot(x='Pclass',y='Survived',data=titanic,palette='Pastel2')","16270720":"sns.barplot(x='SibSp',y='Survived',data=titanic,palette='Pastel2')","de276368":"sns.barplot(x='Parch',y='Survived',data=titanic,palette='Pastel2')","86035a86":"full.info()","fae2dade":"imputed = pd.DataFrame()\n\nimputed['Age'] = full['Age'].fillna(full['Age'].mean())\n\nimputed['Fare'] = full['Fare'].fillna(full['Fare'].mean())\n\nimputed.head()","dbfb6694":"sex = pd.Series(np.where(full.Sex == 'male',0,1),name = 'Sex')\nembarked = pd.get_dummies(full.Embarked,prefix='Embarked')\npclass = pd.get_dummies(full.Pclass,prefix = 'Pclass')\n\nprint(f'{sex.head()}\\n')\nprint(f'{embarked.head()}\\n')\nprint(pclass.head())","fd043549":"#Extracting title out of the Name\n\ntitle = pd.DataFrame()\ntitle['Title'] = [full.Name[i].split(',')[1].split('.')[0].strip() for i in range(len(full.Name))]\n# a map of more aggregated titles\nTitle_Dictionary = {\n                    \"Capt\":       \"Officer\",\n                    \"Col\":        \"Officer\",\n                    \"Major\":      \"Officer\",\n                    \"Jonkheer\":   \"Royalty\",\n                    \"Don\":        \"Royalty\",\n                    \"Sir\" :       \"Royalty\",\n                    \"Dr\":         \"Officer\",\n                    \"Rev\":        \"Officer\",\n                    \"the Countess\":\"Royalty\",\n                    \"Dona\":       \"Royalty\",\n                    \"Mme\":        \"Mrs\",\n                    \"Mlle\":       \"Miss\",\n                    \"Ms\":         \"Mrs\",\n                    \"Mr\" :        \"Mr\",\n                    \"Mrs\" :       \"Mrs\",\n                    \"Miss\" :      \"Miss\",\n                    \"Master\" :    \"Master\",\n                    \"Lady\" :      \"Royalty\"\n                }\ntitle['Title'] = title['Title'].map(Title_Dictionary) \ntitle = pd.get_dummies(title.Title)\n\n#print the change \ntitle.head()","3b41b1f3":"#Extracting Cabin's from Cabin\ncabin = pd.DataFrame()\n\n#filling null values\ncabin['Cabin'] = full.Cabin.astype('object').fillna('U')\n\n#Creating the categorical variables\ncabin['Cabin'] = [cabin['Cabin'][i][0] for i in range(len(cabin['Cabin']))]\ncabin = pd.get_dummies(cabin['Cabin'],prefix='Cabin')\n\n#print the result\ncabin.head()","1af7daf5":"full['Ticket'] = full['Ticket'].astype('object')","7361c95d":"def cleanticket(ticket):\n    ticket = ticket.replace('.','')\n    ticket = ticket.replace('\/','')\n    ticket = ticket.split()\n    ticket = map(lambda t: t.strip(),ticket)\n    ticket = list(filter(lambda t:not t.isdigit(),ticket))\n    if len(ticket) > 0:\n        return ticket[0]\n    else:\n        return 'XXX'\nticket = pd.DataFrame()\n\nticket['Ticket'] = full['Ticket'].map(cleanticket)\nticket = pd.get_dummies(ticket['Ticket'])\n\nticket.head()","699cdb8a":"family = pd.DataFrame()\nfamily['FamilySize'] = full.Parch + full.SibSp + 1\n\nfamily['Family_Single'] = family['FamilySize'].map(lambda s:1 if s==0 else 0)\nfamily['Family_Small'] = family['FamilySize'].map(lambda s:1 if 2<=s<=4 else 0)\nfamily['Family_Large'] = family['FamilySize'].map(lambda s:1 if 5<=s else 0)\n\nfamily.head()","0c38c053":"full_X = pd.concat([imputed,sex,embarked,pclass,title,cabin,family],axis=1)\nfull_X.head()","05708b34":"### 3.2 Handling Categorical Variables","411143f1":"### 3.3 Feature Engineering","faa56771":"## 3.Data Preperation ","62f81ad8":"## 2.Data Loading and Exploration","b58d9338":"### 3.1 Filling Null Values","3e13a29e":"## 1.Importing the Libraries"}}