{"cell_type":{"17282500":"code","d721777e":"code","834dd792":"code","722a0c4b":"code","6ffa6a28":"code","f3cd0ef2":"code","c0b8acb1":"code","e37d2d15":"markdown","a9e7c7ca":"markdown","16b8f6d1":"markdown","2e9b310b":"markdown","d25eb5c3":"markdown","f11d1620":"markdown"},"source":{"17282500":"#packages\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.optimizers import RMSprop\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n#data processing\nmnist_train = pd.read_csv('..\/input\/mnist_train.csv')\nmnist_test = pd.read_csv('..\/input\/mnist_test.csv')\n\ntrain_images = mnist_train.iloc[:, 1:].values\ntrain_labels = mnist_train.iloc[:, :1].values\ntest_images = mnist_test.iloc[:, 1:].values\ntest_labels = mnist_test.iloc[:, :1].values\n\n#normalize the data\ntrain_images = train_images.astype('float32')\ntest_images = test_images.astype('float32')\ntrain_images \/= 255   \ntest_images \/= 255\n\n#one hot encoding\ntrain_labels = keras.utils.to_categorical(train_labels, 10)\ntest_labels = keras.utils.to_categorical(test_labels, 10)","d721777e":"#network topography\nmodel = Sequential()\nmodel.add(Dense(512, activation = 'relu', input_shape=(784,)))\nmodel.add(Dense(10, activation = 'softmax'))\nmodel.summary()","834dd792":"#compiling model and training\nmodel.compile(loss='categorical_crossentropy', optimizer=RMSprop(), metrics=['accuracy'])\nz = model.fit(train_images, train_labels, \n                   batch_size=100,\n                   epochs=10,\n                   verbose=2,\n                   validation_data=(test_images, test_labels))","722a0c4b":"score = model.evaluate(test_images, test_labels, verbose=0)\nprint(\"Test Accuracy: \", score[1]*100, \"%\")","6ffa6a28":"#visualize the model working\ndef predict_test_sample(x):\n    label = test_labels[x].argmax(axis=0)\n    image = test_images[x].reshape([28,28])\n    test_image = test_images[x,:].reshape(1,784)\n    prediction = model.predict(test_image).argmax()\n    plt.title(\"Sample %d  Prediction: %d Label: %d\" % (x, prediction, label))\n    plt.imshow(image, cmap=plt.get_cmap('gray_r'))\n    plt.show()","f3cd0ef2":"#test the model using the function defined above\n","c0b8acb1":"for x in range(500):\n    image = test_images[x,:].reshape(1,784)\n    prediction = model.predict(image).argmax()\n    label = test_labels[x].argmax()\n    if (prediction != label):\n        plt.title(\"Sample %d  Prediction: %d Label: %d\" % (x, prediction, label))\n        plt.imshow(image.reshape([28,28]), cmap=plt.get_cmap('gray_r') )\n        plt.show()","e37d2d15":"Pretty neat\u2013getting to see your model learning and getting better at identifying handwritten digits. This model on its 10th epoch is 99% accurate on its training data. Now click the following code block to see the accuracy of the network on the testing set.","a9e7c7ca":"We see that the model is pretty accurate in its predictions. But we should try to look at samples  that the model mistakenly identified. Run the next code block to see the inaccurate predictions made by our neural network for the first 500 test samples.","16b8f6d1":"Use the fuction defined above and specify the parameter as a number of test sample (0-9999) to test the model and visulize the results.","2e9b310b":"As you can see some people have horrible handwriting, it is no wonder that the neural network has problems with several of the samples. The network also has few loopholes in which it got something wrong even if the handwriting wasn't half bad. Overall this is a pretty good artificial neural network, especially considering that it is pretty basic.\n\nMade by rae385, for Coppell High School AI Club\n\nNote: this model is based off of a [tutorial](https:\/\/sundog-education.com\/deep-learning\/) I found online by Frank Kane.","d25eb5c3":"The code above was just for setting up the data in a way that it can be fed into the model. The following couple of blocks are the outlines of the network. As you can see, coding the network in this case only takes 5 lines of code (excluding the summary function and the additional spaces from indents). \n\nWarning: the code block following this next one is the one that trains the model. Training is a computationally expensive step and might take a while depending on your computer's specs. Of course, this example is a pretty basic one and everything will most likely be fine.","f11d1620":"**Handwriting Recognition using Keras**\n\nThis kernal will focus on trying to build a neural network that can correctly identify handwritten digits. The [MNIST](http:\/\/http:\/\/yann.lecun.com\/exdb\/mnist\/) database of handwritten digits is a widely used dataset for tutorials into deep learning. The image data is in the form of 28 x 28 grayscale pixels (784 pixels overall) along with labels for the correct identification of that image. The training set has 60K samples while the test set had 10K samples. Here are some examples of the data we are working with:\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/27\/MnistExamples.png)\n\nLearning how to code artificial neural networks is hard, especially if you are a curious high school student with limited resources and experience. But we can utilize specialized packages such as Keras to make our lives much easier. With its high level framework, programming neural networks have never been easier with Keras! Unlike Tensorflow (another package used by Google) you don't have to manually code the linear algebra and the required activation functions and optimizers.\n\nThis specific neural network will take in an input of 784 pixels of the image into the hidden layer of 512 neurons that will output into 10 neurons (one for each digit). Note that the layout of the network is not exactly specific, but rather random, as you can have as many hidden layers as you want with varied amount of neurons in each layer.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1200\/1*RGV6Bb3ChmVWsA8Q6Qth6Q.png)\n\nSidenote: make sure to run all the previous code blocks (shift + enter) before progressing into another code block. Also don't let the code scare you!"}}