{"cell_type":{"cba4d7d8":"code","4163137a":"code","d1cb320b":"code","5f2d350f":"code","3cce0a31":"code","e9c1182e":"code","946bff9e":"code","af87c1a4":"code","f3d12833":"code","6823c57e":"code","9c6c9a3d":"code","d7119fab":"code","ade82151":"markdown","008425f2":"markdown","3cca8813":"markdown"},"source":{"cba4d7d8":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nfrom tensorflow.keras.datasets import imdb\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences","4163137a":"(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words = 20000)","d1cb320b":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)\n\nprint(X_train[:2])","5f2d350f":"X_train = pad_sequences(X_train, maxlen = 100)\nX_test = pad_sequences(X_test, maxlen=100)","3cce0a31":"vocab_size = 20000\nembed_size = 128","e9c1182e":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import LSTM, Dropout, Dense, Embedding","946bff9e":"model = Sequential()\nmodel.add(Embedding(vocab_size, embed_size, input_shape = (X_train.shape[1],)))\nmodel.add(LSTM(units=60, activation='tanh'))\nmodel.add(Dense(units=1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics = ['accuracy'])","af87c1a4":"model.summary()","f3d12833":"history = model.fit(X_train, y_train, epochs=5, batch_size=128, validation_data=(X_test, y_test))","6823c57e":"history.history","9c6c9a3d":"def plot_learningCurve(history, epochs):\n  # Plot training & validation accuracy values\n  epoch_range = range(1, epochs+1)\n  plt.plot(epoch_range, history.history['accuracy'])\n  plt.plot(epoch_range, history.history['val_accuracy'])\n  plt.title('Model accuracy')\n  plt.ylabel('Accuracy')\n  plt.xlabel('Epoch')\n  plt.legend(['Train', 'Val'], loc='upper left')\n  plt.show()\n\n  # Plot training & validation loss values\n  plt.plot(epoch_range, history.history['loss'])\n  plt.plot(epoch_range, history.history['val_loss'])\n  plt.title('Model loss')\n  plt.ylabel('Loss')\n  plt.xlabel('Epoch')\n  plt.legend(['Train', 'Val'], loc='upper left')\n  plt.show()","d7119fab":"plot_learningCurve(history, 5)","ade82151":"### IMDB Review Sentiment Classification using RNN LSTM","008425f2":"### Dataset preprocessing ","3cca8813":"**Build LSTM Network**"}}