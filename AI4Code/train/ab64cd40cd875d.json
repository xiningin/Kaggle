{"cell_type":{"e197a210":"code","705a3ae8":"code","45677e2c":"code","554479d3":"code","1c17102b":"code","03e34f1d":"code","9691bff4":"code","b3327af3":"code","96acac96":"code","e5407337":"markdown","c74f4ad0":"markdown","5039e7d1":"markdown","415d1e19":"markdown","8947220a":"markdown","0523eef8":"markdown","a5e50f6e":"markdown","5ffbda1d":"markdown"},"source":{"e197a210":"#get datasets\nfrom sklearn import datasets\nimport numpy as np\n\n#visualize decision regions\nfrom mlxtend.plotting import plot_decision_regions\nimport matplotlib.pyplot as plt\n\n#scoring\nfrom sklearn.metrics import accuracy_score as acc\n\n#color to print\nBOLD = '\\033[1m'\n\n#ignore warnings\nimport warnings\nwarnings.simplefilter('ignore')","705a3ae8":"#generatos availabel in sklearn\ngenerator_dict = {\n    'make_biclusters': datasets.make_biclusters,\n    'make_blobs': datasets.make_blobs,\n    'make_checkerboard': datasets.make_checkerboard,\n    'make_circles': datasets.make_circles,\n    'make_classification': datasets.make_classification,\n    'make_friedman1': datasets.make_friedman1,\n    'make_friedman2': datasets.make_friedman2,\n    'make_friedman3': datasets.make_friedman3,\n    'make_gaussian_quantiles': datasets.make_gaussian_quantiles,\n    'make_hastie_10_2': datasets.make_hastie_10_2,\n    'make_low_rank_matrix': datasets.make_low_rank_matrix,\n    'make_moons': datasets.make_moons,\n    'make_multilabel_classification': datasets.make_multilabel_classification,\n    'make_regression': datasets.make_regression,\n    'make_s_curve': datasets.make_s_curve,\n    'make_sparse_coded_signal': datasets.make_sparse_coded_signal,\n    'make_sparse_spd_matrix': datasets.make_sparse_spd_matrix,\n    'make_sparse_uncorrelated': datasets.make_sparse_uncorrelated,\n    'make_spd_matrix': datasets.make_spd_matrix,\n    'make_swiss_roll': datasets.make_swiss_roll\n}\n\n#generators selected for classification and their parameters\ngenerators = [\n    'make_blobs',\n    'make_moons',\n    'make_circles',\n    'make_gaussian_quantiles',\n    'make_classification'\n]\ngenerator_params = {\n    'make_blobs':{'n_features':2, 'center_box':(-1,1),\n                  'cluster_std':0.25},\n    'make_moons':{},\n    'make_circles': {},\n    'make_gaussian_quantiles':{'n_features':2},\n    'make_classification':{'n_features':2, 'n_redundant':0}\n}\n\ndef decision_region(algos, generator, model_type='', noises = [0,0.25,0.5],\n                    n=250, labels=None):\n        \n    shape = [len(algos), len(noises)]\n    figsize= [shape[1]*5, shape[0]*5]\n    fig, ax = plt.subplots(*shape, figsize=figsize)\n    font_factor = 15\n    fig.suptitle(model_type+': '+generator+' data', fontsize=font_factor*shape[1])\n    \n    if not labels:\n        labels = [\"\"]*shape[0]\n\n    for j in range(len(noises)):\n\n        try:\n            x, y = generator_dict[generator](**generator_params[generator], n_samples=n,\n                                             noise = noises[j], random_state=42)\n        except:\n            x, y = generator_dict[generator](**generator_params[generator], \n                                             n_samples=n, random_state=42)\n            x = x + np.random.normal(0,noises[j],(n,2))\n    \n        for i in range(len(algos)):\n            ax[i,0].set_ylabel(str(algos[i]).split('(')[0]+str(labels[i]), \n                                         fontsize= font_factor,\n                                         rotation=0, labelpad=font_factor*7)\n                \n            model = algos[i].fit(x,y)\n            \n            plot_decision_regions(x,y,clf=model, ax=ax[i,j])\n            ax[i,j].set_title('Score: '+str(acc(y, model.predict(x))), \n                              fontsize=font_factor, pad=0.5*font_factor)\n    plt.show()","45677e2c":"#linear models\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier, \\\n                                 SGDClassifier, Perceptron, \\\n                                 PassiveAggressiveClassifier\n                                 \n\nalgos = [LogisticRegression(), RidgeClassifier(),\n         SGDClassifier(), Perceptron(),\n         PassiveAggressiveClassifier()]\n\n\nfor generator in generators:\n    decision_region(algos=algos, generator=generator, model_type='Linear Models')","554479d3":"#support vector machines\nfrom sklearn.svm import LinearSVC, NuSVC, SVC\n\nalgos = [LinearSVC(), NuSVC(), SVC()]\n\nfor generator in generators:\n    decision_region(algos=algos, generator=generator, model_type='SVM Models')","1c17102b":"#neighbors models\nfrom sklearn.neighbors import KNeighborsClassifier, NearestCentroid\n\nalgos = [KNeighborsClassifier(), NearestCentroid()]\n\nfor generator in generators:\n    decision_region(algos=algos, generator=generator, model_type='Neighbors Models')","03e34f1d":"#naive_bayes models\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB\n\nalgos = [GaussianNB(), BernoulliNB()]\n\nfor generator in generators:\n    decision_region(algos=algos, generator=generator, model_type='Naive-Bayes Models')","9691bff4":"#tree models\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, \\\n                             BaggingClassifier, AdaBoostClassifier, \\\n                             GradientBoostingClassifier\n\nalgos = [DecisionTreeClassifier(), RandomForestClassifier(),\n         ExtraTreesClassifier(), BaggingClassifier(),\n         AdaBoostClassifier(), GradientBoostingClassifier()]\n\nfor generator in generators:\n    decision_region(algos=algos, generator=generator, model_type='Tree Models')","b3327af3":"#neural networks\nfrom sklearn.neural_network import MLPClassifier\n\nalgos = [MLPClassifier(hidden_layer_sizes=(12)), \n         MLPClassifier(hidden_layer_sizes=(6,6)),\n         MLPClassifier(hidden_layer_sizes=(4,4,4)),\n         MLPClassifier(hidden_layer_sizes=(3,3,3,3))]\n\nlabels = [\": shape(12)\",\": shape(6,6)\",\": shape(4,4,4)\",\": shape(3,3,3,3)\"]\n\nfor generator in generators:\n    decision_region(algos=algos, generator=generator, \n                    model_type='Neural-Net Models',\n                    labels=labels)","96acac96":"#other models\nfrom sklearn.ensemble import VotingClassifier, StackingClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\n\n#voting and stacking classifier are ensembles, they use multiple models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nclf1 = LogisticRegression()\nclf2 = SVC()\nclf3 = GaussianNB()\nclf4 = RandomForestClassifier()\nclf5 = MLPClassifier(hidden_layer_sizes=(4,4,4))\n\nalgos = [VotingClassifier(estimators=[('lr', clf1), ('sv', clf2), ('gnb', clf3),\n                                      ('rf', clf4), ('mlp', clf5)]),\n         StackingClassifier(estimators=[('lr', clf1), ('sv', clf2), ('gnb', clf3),\n                                      ('rf', clf4), ('mlp', clf5)]),\n         GaussianProcessClassifier()]\n\nfor generator in generators:\n    decision_region(algos=algos, generator=generator, model_type='Other Models')","e5407337":"## Classification and Decision Regions\n\nScikit-learn (sklearn) is one of the most used libraries for machine learning. It has good implementations of many machine learning algorithms, many of them are classifiers.\n\n\n![](https:\/\/scikit-learn.org\/stable\/_static\/ml_map.png)\n\n\nA classification problem wants to classify something to belong to a class. A decision region is a graphic that shows which regions of the space belong to which class according to a classifier. Different types of classifiers split the space differently and their effectiveness and complexity varies according to the space.\n\n\n![](https:\/\/scikit-learn.org\/stable\/_images\/sphx_glr_plot_classifier_comparison_001.png)\n\n","c74f4ad0":"## Neural networks","5039e7d1":"## Linear models","415d1e19":"## Naive-Bayes models","8947220a":"## Neighbor-based models","0523eef8":"## Tree-based models","a5e50f6e":"## Support Vector Machines","5ffbda1d":"## Other models"}}