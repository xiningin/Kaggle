{"cell_type":{"b3d71426":"code","f7c9ee81":"code","20417898":"code","c1af5be3":"code","afd41f79":"code","b1ab8d27":"code","71f0bdd0":"code","5c95e94d":"code","c891e125":"code","c4e2f432":"code","7ee56cbe":"markdown","b7c30768":"markdown","6f5cb055":"markdown","cc2f6313":"markdown","18b33ab7":"markdown","35b399fb":"markdown","e4610a97":"markdown"},"source":{"b3d71426":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7c9ee81":"GDP = pd.read_csv(\"\/kaggle\/input\/gdp-annual-growth-for-each-country-1960-2020\/GDP_annual_growth.csv\")","20417898":"import pycountry # country locales for filtering non-countries\n\ncountries_code = [x.alpha_3 for x in pycountry.countries]\nresult = GDP['Country Code'].isin(countries_code)\nn = []\nfor i in range(len(result)):\n    if(result[i] == False):\n        n.append(i)\n\nGDP=GDP.drop(n, axis=0)","c1af5be3":"import plotly.express as px\nimport numpy as np\n\nfig = px.treemap(GDP, path=['Country Name'], values='1960')\nfig.show()","afd41f79":"import plotly.express as px\nimport numpy as np\n\nfig = px.treemap(GDP, path=['Country Name'], values='1970')\nfig.show()","b1ab8d27":"import plotly.express as px\nimport numpy as np\n\nfig = px.treemap(GDP, path=['Country Name'], values='1980')\nfig.show()","71f0bdd0":"import plotly.express as px\nimport numpy as np\n\nfig = px.treemap(GDP, path=['Country Name'], values='1990')\nfig.show()","5c95e94d":"import plotly.express as px\nimport numpy as np\n\nfig = px.treemap(GDP, path=['Country Name'], values='2000')\nfig.show()","c891e125":"import plotly.express as px\nimport numpy as np\n\nfig = px.treemap(GDP, path=['Country Name'], values='2010')\nfig.show()","c4e2f432":"import plotly.express as px\nimport numpy as np\n\nfig = px.treemap(GDP, path=['Country Name'], values='2019')\nfig.show()","7ee56cbe":"# Year 2000","b7c30768":"# Year 1990","6f5cb055":"# Year 1980","cc2f6313":"# Year 1960","18b33ab7":"# Year 1970","35b399fb":"# Year 2010","e4610a97":"# Year 2019"}}