{"cell_type":{"ba4baf4f":"code","e0620d65":"code","92bd96d6":"code","a3c01654":"code","e75a2ac8":"code","73324f65":"code","950cc695":"code","a5fc4df0":"code","985915cc":"code","e588835d":"code","ebd35be9":"code","91e82810":"code","d6631f39":"code","3efcc4bc":"code","81cf0e50":"code","5c85a03f":"code","ef3ab935":"code","a3043bff":"code","2cc197d4":"code","6c6696d1":"code","e4fac8ca":"code","86542426":"code","e3ec4e07":"code","62d75c4a":"code","20c2770d":"code","a6eade15":"code","6c837864":"code","be35c0c1":"code","bc391f2e":"code","0fb35ae3":"code","fae279c0":"code","05baa9cb":"code","d70f8a10":"code","6a137659":"markdown","a16bb968":"markdown","8da933ba":"markdown","b881e747":"markdown","2c0f29d1":"markdown","7de2a66e":"markdown","8728a55d":"markdown"},"source":{"ba4baf4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0620d65":"import gc\nimport random\nfrom tqdm.notebook import tqdm\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.utils.rnn as rnn_utils\nfrom torch.autograd import Variable\nfrom torch.utils.data import Dataset, DataLoader\nfrom pathlib import Path\nimport datatable as dt","92bd96d6":"path = Path('\/kaggle\/input')\nassert path.exists()","a3c01654":"%%time\n\ndata_types_dict = {\n    'content_type_id': 'bool',\n    'timestamp': 'int64',\n    'user_id': 'int32', \n    'content_id': 'int16', \n    'answered_correctly': 'int8', \n    'prior_question_elapsed_time': 'float32', \n    'prior_question_had_explanation': 'bool'\n}\ntarget = 'answered_correctly'\ntrain_df = dt.fread(path\/'riiid-test-answer-prediction\/train.csv', columns=set(data_types_dict.keys())).to_pandas()","e75a2ac8":"train_df.info()","73324f65":"%%time\n\ntrain_df = train_df[train_df.content_type_id == False]\n\n#arrange by timestamp\ntrain_df = train_df.sort_values(['timestamp'], ascending=True).reset_index(drop = True)","950cc695":"del train_df['timestamp']\ndel train_df['content_type_id']","a5fc4df0":"n_skill = train_df[\"content_id\"].nunique()\nprint(\"number skills\", n_skill)","985915cc":"%%time\n\ngroup = train_df[['user_id', 'content_id', 'answered_correctly']].groupby('user_id').apply(lambda r: (r['content_id'].values, r['answered_correctly'].values))\n\ndel train_df","e588835d":"MAX_SEQ = 180\nACCEPTED_USER_CONTENT_SIZE = 4\nEMBED_SIZE = 128\nBATCH_SIZE = 64\nDROPOUT = 0.1","ebd35be9":"class SAKTDataset(Dataset):\n    def __init__(self, group, n_skill, max_seq=100):\n        super(SAKTDataset, self).__init__()\n        self.samples, self.n_skill, self.max_seq = {}, n_skill, max_seq\n        \n        self.user_ids = []\n        for i, user_id in enumerate(group.index):\n            if(i % 10000 == 0):\n                print(f'Processed {i} users')\n            content_id, answered_correctly = group[user_id]\n            if len(content_id) >= ACCEPTED_USER_CONTENT_SIZE:\n                if len(content_id) > self.max_seq:\n                    total_questions = len(content_id)\n                    last_pos = total_questions \/\/ self.max_seq\n                    for seq in range(last_pos):\n                        index = f\"{user_id}_{seq}\"\n                        self.user_ids.append(index)\n                        start = seq * self.max_seq\n                        end = (seq + 1) * self.max_seq\n                        self.samples[index] = (content_id[start:end], answered_correctly[start:end])\n                    if len(content_id[end:]) >= ACCEPTED_USER_CONTENT_SIZE:\n                        index = f\"{user_id}_{last_pos + 1}\"\n                        self.user_ids.append(index)\n                        self.samples[index] = (content_id[end:], answered_correctly[end:])\n                else:\n                    index = f'{user_id}'\n                    self.user_ids.append(index)\n                    self.samples[index] = (content_id, answered_correctly)\n                \n                \n    def __len__(self):\n        return len(self.user_ids)\n\n    def __getitem__(self, index):\n        user_id = self.user_ids[index]\n        content_id, answered_correctly = self.samples[user_id]\n        seq_len = len(content_id)\n        \n        content_id_seq = np.zeros(self.max_seq, dtype=int)\n        answered_correctly_seq = np.zeros(self.max_seq, dtype=int)\n        if seq_len >= self.max_seq:\n            content_id_seq[:] = content_id[-self.max_seq:]\n            answered_correctly_seq[:] = answered_correctly[-self.max_seq:]\n        else:\n            content_id_seq[-seq_len:] = content_id\n            answered_correctly_seq[-seq_len:] = answered_correctly\n            \n        target_id = content_id_seq[1:]\n        label = answered_correctly_seq[1:]\n        \n        x = content_id_seq[:-1].copy()\n        x += (answered_correctly_seq[:-1] == 1) * self.n_skill\n        \n        return x, target_id, label","91e82810":"TEST_SIZE = 0.1\n\ntrain, val = train_test_split(group, test_size = TEST_SIZE)","d6631f39":"train_dataset = SAKTDataset(train, n_skill, max_seq=MAX_SEQ)\ntrain_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=8)\ndel train","3efcc4bc":"val_dataset = SAKTDataset(val, n_skill, max_seq=MAX_SEQ)\nval_dataloader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=8)\ndel val","81cf0e50":"sample_batch = next(iter(train_dataloader))\nsample_batch[0].shape, sample_batch[1].shape, sample_batch[2].shape","5c85a03f":"class FFN(nn.Module):\n    def __init__(self, state_size = 200, forward_expansion = 1, bn_size=MAX_SEQ - 1, dropout=0.2):\n        super(FFN, self).__init__()\n        self.state_size = state_size\n        \n        self.lr1 = nn.Linear(state_size, forward_expansion * state_size)\n        self.relu = nn.ReLU()\n        self.bn = nn.BatchNorm1d(bn_size)\n        self.lr2 = nn.Linear(forward_expansion * state_size, state_size)\n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, x):\n        x = self.relu(self.lr1(x))\n        x = self.bn(x)\n        x = self.lr2(x)\n        return self.dropout(x)\n\nFFN()","ef3ab935":"def future_mask(seq_length):\n    future_mask = (np.triu(np.ones([seq_length, seq_length]), k = 1)).astype('bool')\n    return torch.from_numpy(future_mask)\n\nfuture_mask(5)","a3043bff":"class TransformerBlock(nn.Module):\n    def __init__(self, embed_dim, heads = 8, dropout = DROPOUT, forward_expansion = 1):\n        super(TransformerBlock, self).__init__()\n        self.multi_att = nn.MultiheadAttention(embed_dim=embed_dim, num_heads=heads, dropout=dropout)\n        self.dropout = nn.Dropout(dropout)\n        self.layer_normal = nn.LayerNorm(embed_dim)\n        self.ffn = FFN(embed_dim, forward_expansion = forward_expansion, dropout=dropout)\n        self.layer_normal_2 = nn.LayerNorm(embed_dim)\n        \n\n    def forward(self, value, key, query, att_mask):\n        att_output, att_weight = self.multi_att(value, key, query, attn_mask=att_mask)\n        att_output = self.dropout(self.layer_normal(att_output + value))\n        att_output = att_output.permute(1, 0, 2) # att_output: [s_len, bs, embed] => [bs, s_len, embed]\n        x = self.ffn(att_output)\n        x = self.dropout(self.layer_normal_2(x + att_output))\n        return x.squeeze(-1), att_weight\n    \nclass Encoder(nn.Module):\n    def __init__(self, n_skill, max_seq=100, embed_dim=128, dropout = DROPOUT, forward_expansion = 1, num_layers=1, heads = 8):\n        super(Encoder, self).__init__()\n        self.n_skill, self.embed_dim = n_skill, embed_dim\n        self.embedding = nn.Embedding(2 * n_skill + 1, embed_dim)\n        self.pos_embedding = nn.Embedding(max_seq - 1, embed_dim)\n        self.e_embedding = nn.Embedding(n_skill+1, embed_dim)\n        self.layers = nn.ModuleList([TransformerBlock(embed_dim, forward_expansion = forward_expansion) for _ in range(num_layers)])\n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, x, question_ids):\n        device = x.device\n        x = self.embedding(x)\n        pos_id = torch.arange(x.size(1)).unsqueeze(0).to(device)\n        pos_x = self.pos_embedding(pos_id)\n        x = self.dropout(x + pos_x)\n        x = x.permute(1, 0, 2) # x: [bs, s_len, embed] => [s_len, bs, embed]\n        e = self.e_embedding(question_ids)\n        e = e.permute(1, 0, 2)\n        for layer in self.layers:\n            att_mask = future_mask(e.size(0)).to(device)\n            x, att_weight = layer(e, x, x, att_mask=att_mask)\n            x = x.permute(1, 0, 2)\n        x = x.permute(1, 0, 2)\n        return x, att_weight\n\nclass SAKTModel(nn.Module):\n    def __init__(self, n_skill, max_seq=100, embed_dim=128, dropout = DROPOUT, forward_expansion = 1, enc_layers=1, heads = 8):\n        super(SAKTModel, self).__init__()\n        self.encoder = Encoder(n_skill, max_seq, embed_dim, dropout, forward_expansion, num_layers=enc_layers)\n        self.pred = nn.Linear(embed_dim, 1)\n        \n    def forward(self, x, question_ids):\n        x, att_weight = self.encoder(x, question_ids)\n        x = self.pred(x)\n        return x.squeeze(-1), att_weight","2cc197d4":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","6c6696d1":"# Main changes are possibility of forward expansion and stacking of encoding layers\ndef create_model():\n    return SAKTModel(n_skill, max_seq=MAX_SEQ, embed_dim=EMBED_SIZE, forward_expansion=1, enc_layers=1, heads=8, dropout=0.1)\nmodel = create_model()\nmodel","e4fac8ca":"model(sample_batch[0], sample_batch[1])[0]","86542426":"LR = 2e-3\nEPOCHS = 10\nMODEL_PATH = '\/kaggle\/working\/sakt.pth'","e3ec4e07":"def load_from_item(item):\n    x = item[0].to(device).long()\n    target_id = item[1].to(device).long()\n    label = item[2].to(device).float()\n    target_mask = (target_id != 0)\n    return x, target_id, label, target_mask\n\ndef update_stats(tbar, train_loss, loss, output, label, num_corrects, num_total, labels, outs):\n    train_loss.append(loss.item())\n    pred = (torch.sigmoid(output) >= 0.5).long()\n    num_corrects += (pred == label).sum().item()\n    num_total += len(label)\n    labels.extend(label.view(-1).data.cpu().numpy())\n    outs.extend(output.view(-1).data.cpu().numpy())\n    tbar.set_description('loss - {:.4f}'.format(loss))\n    return num_corrects, num_total\n\ndef train_epoch(model, dataloader, optim, criterion, scheduler, device=\"cpu\"):\n    model.train()\n    \n    train_loss = []\n    num_corrects = 0\n    num_total = 0\n    labels = []\n    outs = []\n    \n    tbar = tqdm(dataloader)\n    for item in tbar:\n        x, target_id, label, target_mask = load_from_item(item)\n        \n        optim.zero_grad()\n        output, _ = model(x, target_id)\n        \n        output = torch.masked_select(output, target_mask)\n        label = torch.masked_select(label, target_mask)\n        \n        loss = criterion(output, label)\n        loss.backward()\n        optim.step()\n        scheduler.step()\n        \n        tbar.set_description('loss - {:.4f}'.format(loss))\n\ndef val_epoch(model, val_iterator, criterion, device=\"cpu\"):\n    model.eval()\n\n    train_loss = []\n    num_corrects = 0\n    num_total = 0\n    labels = []\n    outs = []\n\n    tbar = tqdm(val_iterator)\n    for item in tbar:\n        x, target_id, label, target_mask = load_from_item(item)\n\n        with torch.no_grad():\n            output, atten_weight = model(x, target_id)\n        \n        output = torch.masked_select(output, target_mask)\n        label = torch.masked_select(label, target_mask)\n\n        loss = criterion(output, label)\n        \n        num_corrects, num_total = update_stats(tbar, train_loss, loss, output, label, num_corrects, num_total, labels, outs)\n\n    acc = num_corrects \/ num_total\n    auc = roc_auc_score(labels, outs)\n    loss = np.average(train_loss)\n\n    return loss, acc, auc\n","62d75c4a":"def do_train():\n    optimizer = torch.optim.Adam(model.parameters(), lr=LR)\n    criterion = nn.BCEWithLogitsLoss()\n    scheduler = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr=LR, \n                                                    steps_per_epoch=len(train_dataloader), epochs=EPOCHS)\n    model.to(device)\n    criterion.to(device)\n    best_auc = 0.0\n    for epoch in range(EPOCHS):\n        train_epoch(model, train_dataloader, optimizer, criterion, scheduler, device)\n        val_loss, avl_acc, val_auc = val_epoch(model, val_dataloader, criterion, device)\n        print(f\"epoch - {epoch + 1} val_loss - {val_loss:.3f} acc - {avl_acc:.3f} auc - {val_auc:.3f}\")\n        if best_auc < val_auc:\n            print(f'epoch - {epoch + 1} best model with val auc: {val_auc}')\n            best_auc = val_auc\n        torch.save(model.state_dict(), MODEL_PATH)","20c2770d":"do_train()","a6eade15":"LR = 2e-4\nEPOCHS = 3\n\ndo_train()","6c837864":"model = create_model()\nmodel.load_state_dict(torch.load(MODEL_PATH))\nmodel.to(device)","be35c0c1":"class TestDataset(Dataset):\n    def __init__(self, samples, test_df, n_skill, max_seq=100):\n        super(TestDataset, self).__init__()\n        self.samples, self.user_ids, self.test_df = samples, [x for x in test_df[\"user_id\"].unique()], test_df\n        self.n_skill, self.max_seq = n_skill, max_seq\n\n    def __len__(self):\n        return self.test_df.shape[0]\n    \n    def __getitem__(self, index):\n        test_info = self.test_df.iloc[index]\n        \n        user_id = test_info['user_id']\n        target_id = test_info['content_id']\n        \n        content_id_seq = np.zeros(self.max_seq, dtype=int)\n        answered_correctly_seq = np.zeros(self.max_seq, dtype=int)\n        \n        if user_id in self.samples.index:\n            content_id, answered_correctly = self.samples[user_id]\n            \n            seq_len = len(content_id)\n            \n            if seq_len >= self.max_seq:\n                content_id_seq = content_id[-self.max_seq:]\n                answered_correctly_seq = answered_correctly[-self.max_seq:]\n            else:\n                content_id_seq[-seq_len:] = content_id\n                answered_correctly_seq[-seq_len:] = answered_correctly\n                \n        x = content_id_seq[1:].copy()\n        x += (answered_correctly_seq[1:] == 1) * self.n_skill\n        \n        questions = np.append(content_id_seq[2:], [target_id])\n        \n        return x, questions","bc391f2e":"import riiideducation\n\nenv = riiideducation.make_env()\niter_test = env.iter_test()","0fb35ae3":"import psutil\n\nmodel.eval()\n\nprev_test_df = None\n\nfor (test_df, sample_prediction_df) in tqdm(iter_test):\n    \n    if (prev_test_df is not None) & (psutil.virtual_memory().percent<90):\n        print(psutil.virtual_memory().percent)\n        prev_test_df['answered_correctly'] = eval(test_df['prior_group_answers_correct'].iloc[0])\n        prev_test_df = prev_test_df[prev_test_df.content_type_id == False]\n        prev_group = prev_test_df[['user_id', 'content_id', 'answered_correctly']].groupby('user_id').apply(lambda r: (\n            r['content_id'].values,\n            r['answered_correctly'].values))\n        for prev_user_id in prev_group.index:\n            prev_group_content = prev_group[prev_user_id][0]\n            prev_group_answered_correctly = prev_group[prev_user_id][1]\n            if prev_user_id in group.index:\n                group[prev_user_id] = (np.append(group[prev_user_id][0], prev_group_content), \n                                       np.append(group[prev_user_id][1], prev_group_answered_correctly))\n            else:\n                group[prev_user_id] = (prev_group_content, prev_group_answered_correctly)\n            \n            if len(group[prev_user_id][0]) > MAX_SEQ:\n                new_group_content = group[prev_user_id][0][-MAX_SEQ:]\n                new_group_answered_correctly = group[prev_user_id][1][-MAX_SEQ:]\n                group[prev_user_id] = (new_group_content, new_group_answered_correctly)\n                \n    prev_test_df = test_df.copy()\n    test_df = test_df[test_df.content_type_id == False]\n    \n    test_dataset = TestDataset(group, test_df, n_skill, max_seq=MAX_SEQ)\n    test_dataloader = DataLoader(test_dataset, batch_size=len(test_df), shuffle=False)\n    \n    item = next(iter(test_dataloader))\n    x = item[0].to(device).long()\n    target_id = item[1].to(device).long()\n    \n    with torch.no_grad():\n        output, _ = model(x, target_id)\n        \n    output = torch.sigmoid(output)\n    output = output[:, -1]\n    test_df['answered_correctly'] = output.cpu().numpy()\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","fae279c0":"test_df","05baa9cb":"test_dataset = TestDataset(group, test_df, n_skill, max_seq=MAX_SEQ)","d70f8a10":"# Save to pickle to usage in other notebooks\ngroup.to_pickle('\/kaggle\/working\/group.pkl')","6a137659":"### Pre-process","a16bb968":"### Load Data","8da933ba":"### Data Loaders","b881e747":"### Predict","2c0f29d1":"### Define model","7de2a66e":"Slightly re-structured version of this kernel: https:\/\/www.kaggle.com\/manikanthr5\/riiid-sakt-model-inference-public\n\nI have used it to improve the score to 0.775","8728a55d":"### Training"}}