{"cell_type":{"14c75a8a":"code","d55f3853":"code","bcb5d128":"code","1a450f91":"code","e32722b9":"code","a51e3786":"code","5584cb0c":"code","ea4177cd":"code","d5761e8d":"code","e77a2afc":"code","c8b80029":"code","9a521913":"code","8c855a68":"code","fec70f90":"code","5ec1dcc8":"code","223762a3":"markdown","02bf5c3b":"markdown","81bcdca5":"markdown","9a35da5f":"markdown","2e6881ff":"markdown","d1a213fb":"markdown","e0cd48bc":"markdown","df66db52":"markdown","d272ffc8":"markdown"},"source":{"14c75a8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d55f3853":"import random","bcb5d128":"def binarize(num):\n\t#binarize function for the three doors\n\tif num == 1:\n\t\treturn [0,0,1]\n\telif num == 2:\n\t\treturn [0,1,0]\n\telse:\n\t\treturn [1,0,0]","1a450f91":"def rand_outcome():\n\t# Randomize the door in which the prize is present\n\t#random.seed(random.randint(1,1e12))\n  \toutcome = random.sample([1,2,4],1)[0]\n\t#print (\"Outcome = %d\"%(outcome))\n  \treturn binarize(outcome)","e32722b9":"def user_selection():\n\t# Randomize the door that the user picks the first time\n\t#seed = random.randint(1,1e12)\n\tsel = random.sample([0,1,2],1)[0]\n\t#print (\"User selection = %d\"%(sel))\n\treturn sel","a51e3786":"def MontyHallNoSwitch():\n\t# This returns the outcome (win or loss for the user under No-switch strategy)\n\tuser_pick_int = user_selection()\n\toutcome = rand_outcome()\n\treturn outcome[user_pick_int]","5584cb0c":"def MontyHallSwitch():\n\t# This returns the outcome (win or loss for the user under Switch strategy)\n\tuser_pick_int = user_selection()\n\toutcome = rand_outcome()\n\t# The host is going to open one of the doors other than what the guest picked\n\tchoices = [0,1,2]\n\tchoices.pop(user_pick_int)\n\t# print (choices)\n\t# Since the host always opens the door without the prize, the guest loses\n\t# the game by switching if their original choice was the correct door\n\tif (outcome[choices[0]] == 0 and outcome[choices[1]] == 0):\n\t\treturn 0\n\telse:\n\t\treturn 1","ea4177cd":"def MontyHallSimulation(iter=10000):\n\twinsNoSwitch, winsSwitch = 0.0 , 0.0\n\tfor i in range(0,iter):\n\t\twinsNoSwitch = winsNoSwitch + MontyHallNoSwitch()\n\t\twinsSwitch = winsSwitch + MontyHallSwitch()\n\t\tif i == 0:\n\t\t\tprint (\"Probability of winning after N iterations  NoSwitch Stategy  Switch Strategy\")\n\t\telif i%100000 == 0:\n\t\t\tprint (\"Prob. of winning after {0} iterations  {1}  {2}\".format(i,winsNoSwitch\/i, winsSwitch\/i))\n\treturn (winsNoSwitch\/iter, winsSwitch\/iter)","d5761e8d":"winProbNoSwitch, winProbSwitch = MontyHallSimulation(1000000)\nprint (\"Probability of winning without switching is {}\".format(float(winProbNoSwitch)))\nprint (\"Probability of winning with switching is {}\".format(float(winProbSwitch)))","e77a2afc":"def MontyHallSimulationData(iter=10000):\n    winsNoSwitch, winsSwitch = 0.0 , 0.0\n    switchWinsProb = []\n    noswitchWinsProb = []\n    for i in range(0,iter):\n        winsNoSwitch = winsNoSwitch + MontyHallNoSwitch()\n        noswitchWinsProb.append(winsNoSwitch\/(i+1))\n        winsSwitch = winsSwitch + MontyHallSwitch()\n        switchWinsProb.append(winsSwitch\/(i+1))\n    return (noswitchWinsProb, switchWinsProb)","c8b80029":"noswitchWinsProb, switchWinsProb = MontyHallSimulationData(10000)","9a521913":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","8c855a68":"df1 = pd.DataFrame({'iter':range(10000),'winProb':noswitchWinsProb})\ndf2 = pd.DataFrame({'iter':range(10000),'winProb':switchWinsProb})","fec70f90":"df1.tail()","5ec1dcc8":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.lineplot(x='iter',y='winProb',data=df1)\nplt.subplot(1,2,2)\nsns.lineplot(x='iter',y='winProb',data=df2)","223762a3":"Driver program below","02bf5c3b":"Suppose you're on a game show, and you're given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what's behind the doors, opens another door, say No. 3, which has a goat. He then says to you, \"Do you want to pick door No. 2?\" Is it to your advantage to switch your choice?\n\nSource: Wikipedia","81bcdca5":"### Let's plot the win probability after each iteration to see at what it settles down to an equilibrium","9a35da5f":"At the outset, the probability of opening the door containing the prize behind is 1\/3 since there is only one prize and it's random (assumed no bias). Does the odd change once the host shows open one of the two other doors.","2e6881ff":"In this notebook, I am going to simulate the Monty Hall problem over a million runs to programmatically prove that the \"switch\" strategy is better than the \"No switch\" strategy. We will also visually explore the probabilities as the number of times the game is played increases","d1a213fb":"As we can see, the probability of winning if you don't switch remains at 33.3% - unchanged even after the host opens one of the doors. Whereas by switching no matter what, the long run probability shoots up to 66.7%","e0cd48bc":"## The Monty Hall Problem\n\nTo learn more about, please visit: https:\/\/en.wikipedia.org\/wiki\/Monty_Hall_problem","df66db52":"## We see that by the time we play the game 2000 times or more, the probability has almost settled","d272ffc8":"**Standard assumptions:**\n1. The host knows what is behind which door and does not randomly open the door\n2. The host does not open the door containing the prize\n3. The host doesn't open the same door picked by the guest"}}