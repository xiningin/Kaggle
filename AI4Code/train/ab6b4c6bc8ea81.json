{"cell_type":{"4aceb009":"code","f7239542":"code","36dfc7ad":"code","09bc0038":"code","a45bdde7":"code","c4e92253":"code","de5f099e":"code","76349c5b":"code","ad51e782":"code","b0b6e489":"code","ef3bf58c":"code","72638a67":"code","17c56e8e":"code","d9732dc6":"code","f3eafa99":"code","6b480fc3":"code","601bcc8e":"code","753652d0":"code","e3285c93":"code","b1794aee":"code","422a7100":"code","ae4ccb81":"code","5c5cb740":"code","770538bf":"code","dcf8638a":"code","de7a3e3b":"code","4a210f72":"code","89858774":"code","26cce349":"code","52d75cad":"code","744a586f":"code","5be668aa":"code","9827058f":"code","96b62f55":"code","250f784b":"code","1ff53504":"code","ab51a0fd":"markdown","3496aa92":"markdown","ac6c501d":"markdown","934db918":"markdown","79bf9fc6":"markdown","030d51b6":"markdown","2cd3410d":"markdown","fd689d20":"markdown","3f06650d":"markdown","c11e2fed":"markdown","1e73b5c8":"markdown","d567a761":"markdown","23a454bc":"markdown","3a4d944b":"markdown","f10f8290":"markdown","4e5a7305":"markdown","33411dda":"markdown","ac8fd0b4":"markdown","76c53d31":"markdown","411ae8f2":"markdown","f15bffb7":"markdown","62cb3b86":"markdown","1a266686":"markdown","8842edb6":"markdown","061c33be":"markdown","69bb7406":"markdown","e4d80af3":"markdown","2dc9372e":"markdown","d78dfe3b":"markdown","f1e5bcbe":"markdown","1515b512":"markdown","3897ee16":"markdown","91dc86ae":"markdown","1a7e688d":"markdown","290aa9ae":"markdown","b1cecc6c":"markdown","98f60e70":"markdown","bdc6965d":"markdown"},"source":{"4aceb009":"# Import packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as rc\n\n# Import data\ndf = pd.read_csv(\"..\/input\/english-premier-league-results\/EPL.csv\")\ndf.head()","f7239542":"df.shape","36dfc7ad":"# Let's drop columns we won't use\ndf = df.drop(['FTR','HTR','Referee', 'HS', 'AS', 'HST', 'AST', 'HC' ,'AC', 'HF' ,'AF', 'HY', 'AY', 'HR' ,'AR'], axis = 1)\n\n# Let's modify data type in 'Date' column\n\ndf['month'] = [x.strip()[3:5] for x in df['Date']]\ndf['year'] = [x.strip()[-2:] for x in df['Date']]\ndf['month'] = pd.to_numeric(df['month'])\ndf['year'] = pd.to_numeric(df['year'])\n\n\n# Let's create a column for 'Score'\ndf['Score'] = df['FTHG'] + df['FTAG']\n\n# Let's create columns 'Final Winner' and 'Final Loser'\nconditions = [(df['FTHG'] > df['FTAG']),(df['FTHG'] < df['FTAG'])]\nvalues = [df['HomeTeam'],df['AwayTeam']]\nvalues1 = [df['AwayTeam'],df['HomeTeam']]\ndf['Final Winner'] = np.select(conditions, values, default='Draw')\ndf['Final Loser'] = np.select(conditions, values1, default='Draw')\n\n# Let's create columns 'Halftime Winner' and 'Halftime Loser'\nconditions1 = [(df['HTHG'] > df['HTAG']),(df['HTHG'] < df['HTAG'])]\nvalues2 = [df['HomeTeam'],df['AwayTeam']]\nvalues3 = [df['AwayTeam'],df['HomeTeam']]\ndf['Halftime Winner'] = np.select(conditions1, values2, default='Draw')\ndf['Halftime Loser'] = np.select(conditions1, values3, default='Draw')\n\n# Let's create column for comebacks\ndf['Comeback'] = np.where((df['Final Winner'] != df['Halftime Winner'])&(df['Final Winner']!='Draw')&(df['Halftime Winner']!='Draw'),\n                          1, 0)\n\n# Let's create a column for season\nconditions2 = [(df['year'] == 0)&(df['month'] > 7),(df['year'] == 1)&(df['month'] < 7),\n             (df['year'] == 1)&(df['month'] > 7),(df['year'] == 2)&(df['month'] < 7),\n             (df['year'] == 2)&(df['month'] > 7),(df['year'] == 3)&(df['month'] < 7),\n             (df['year'] == 3)&(df['month'] > 7),(df['year'] == 4)&(df['month'] < 7),\n             (df['year'] == 4)&(df['month'] > 7),(df['year'] == 5)&(df['month'] < 7),\n             (df['year'] == 5)&(df['month'] > 7),(df['year'] == 6)&(df['month'] < 7),\n             (df['year'] == 6)&(df['month'] > 7),(df['year'] == 7)&(df['month'] < 7), \n             (df['year'] == 7)&(df['month'] > 7),(df['year'] == 8)&(df['month'] < 7),\n             (df['year'] == 8)&(df['month'] > 7),(df['year'] == 9)&(df['month'] < 7),\n             (df['year'] == 9)&(df['month'] > 7),(df['year'] == 10)&(df['month'] < 7),\n             (df['year'] == 10)&(df['month'] > 7),(df['year'] == 11)&(df['month'] < 7),\n             (df['year'] == 11)&(df['month'] > 7),(df['year'] == 12)&(df['month'] < 7),\n             (df['year'] == 12)&(df['month'] > 7),(df['year'] == 13)&(df['month'] < 7),\n             (df['year'] == 13)&(df['month'] > 7),(df['year'] == 14)&(df['month'] < 7),  \n             (df['year'] == 14)&(df['month'] > 7),(df['year'] == 15)&(df['month'] < 7),\n             (df['year'] == 15)&(df['month'] > 7),(df['year'] == 16)&(df['month'] < 7),\n             (df['year'] == 16)&(df['month'] > 7),(df['year'] == 17)&(df['month'] < 7),\n             (df['year'] == 17)&(df['month'] > 7),(df['year'] == 18)&(df['month'] < 7),\n             (df['year'] == 18)&(df['month'] > 7),(df['year'] == 19)&(df['month'] < 7),\n             (df['year'] == 19)&(df['month'] > 7),(df['year'] == 20)&(df['month'] < 7)]\n\nvalues4 = ['2000\/01','2000\/01','2001\/02','2001\/02','2002\/03','2002\/03','2003\/04','2003\/04','2004\/05','2004\/05','2005\/06',\n           '2005\/06','2006\/07','2006\/07','2007\/08','2007\/08','2008\/09','2008\/09','2009\/10','2009\/10','2010\/11','2010\/11',\n           '2011\/12','2011\/12','2012\/13','2012\/13','2013\/14','2013\/14','2014\/15','2014\/15','2015\/16','2015\/16','2016\/17',\n           '2016\/17','2017\/18','2017\/18','2018\/19','2018\/19','2019\/20','2019\/20']\n\ndf['Season'] = np.select(conditions2, values4,default='X')\n\n# Let's drop columns\ndf = df.drop(['month','year'], axis = 1)\n\n# Let's drop every game from 2019\/20 season\ndf = df.drop(df[(df['Season'] == '2019\/20')].index)\ndf = df.drop(df[(df['Season'] == 'X')].index)","09bc0038":"# Games per season\nseason = df.groupby('Season')['Season'].count()\nseason = pd.DataFrame(season)\nseason.columns = ['Games']\nseason.reset_index(level=0, inplace=True)\n\n# Goals per season\nseason1 = df.groupby('Season')['Score'].sum()\nseason1 = pd.DataFrame(season1)\nseason1.columns = ['Total Goals']\nseason1.reset_index(level=0, inplace=True)\n\n# Home goals by season\nseason2 = df.groupby('Season')['FTHG'].sum()\nseason2 = pd.DataFrame(season2)\nseason2.columns = ['Home Goals']\nseason2.reset_index(level=0, inplace=True)\n\n# Away goals by season\nseason3 = df.groupby('Season')['FTAG'].sum()\nseason3 = pd.DataFrame(season3)\nseason3.columns = ['Away Goals']\nseason3.reset_index(level=0, inplace=True)\n\n# Comebacks per season\nseason4 = df.groupby('Season')['Comeback'].sum()\nseason4 = pd.DataFrame(season4)\nseason4.columns = ['Comeback']\nseason4.reset_index(level=0, inplace=True)\n\n# Merging dataframes\nseason = season.merge(season1, how='left', on='Season')\nseason = season.merge(season2, how='left', on='Season')\nseason = season.merge(season3, how='left', on='Season')\nseason = season.merge(season4, how='left', on='Season')\n\n# Goals per game\nseason['Goals per game'] = round(season['Total Goals']\/season['Games'],2)","a45bdde7":"print(season)","c4e92253":"r = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n\nnames = ('2000\/01','2001\/02','2002\/03','2003\/04','2004\/05','2005\/06','2006\/07','2007\/08','2008\/09',\n         '2009\/10','2010\/11','2011\/12','2012\/13','2013\/14','2014\/15','2015\/16','2016\/17','2017\/18','2018\/19')\n\ncolumn1 = season['Total Goals']\n\n# bar width\nbarWidth = 0.9\n\n# Goals bar\nplt.bar(r, column1, color='indigo', width=barWidth)\n\n# Axis\nplt.xticks(r, names)\nplt.xlabel(\"Seasons\")\nplt.ylabel(\"Goals\")\nplt.title(\"Goals by Season\")\nplt.ylim(600, 1100)\n\n# Horizontal gridlines\naxes = plt.gca()\naxes.yaxis.grid()\n\n# Chart size\nplt.rcParams[\"figure.figsize\"] = [24,8]\n \n# Show Chart\nplt.show()","de5f099e":"column1 = season['Goals per game']\n\n# bar width\nbarWidth = 0.9\n\n# Goals bar\nplt.bar(r, column1, color='indigo', width=barWidth)\n\n# Axis\nplt.xticks(r, names)\nplt.xlabel(\"Seasons\")\nplt.ylabel(\"Goals\")\nplt.title(\"Goals per game\")\nplt.ylim(2.4, 2.9)\n\n# Horizontal gridlines\naxes = plt.gca()\naxes.yaxis.grid()\n\n# Chart size\nplt.rcParams[\"figure.figsize\"] = [24,8]\n \n# Show Chart\nplt.show()","76349c5b":"column1 = season['Home Goals']\/season['Total Goals']\ncolumn2 = season['Away Goals']\/season['Total Goals']\n\n# Bars width\nbarWidth = 0.9\n\n# Home Goals bar\nplt.bar(r, column1, color='indigo', edgecolor='white', width=barWidth,label='Home Goals')\n# Away Goals bar\nplt.bar(r, column2, bottom=column1, color='darkorange', edgecolor='white', width=barWidth,label='Away Goals')\n\n# Axis\nplt.xticks(r, names)\nplt.xlabel(\"Seasons\")\nplt.ylabel(\"Proportion\")\nplt.title(\"Proportion of Home and Away Teams Goals\")\n\n# Horizontal gridlines\naxes = plt.gca()\naxes.yaxis.grid()\n\n# Char Size\nplt.rcParams[\"figure.figsize\"] = [24,8]\n \n# Show chart\nplt.legend()\nplt.show()","ad51e782":"column1 = season['Comeback']\n\n# bar width\nbarWidth = 0.9\n\n# Goals bar\nplt.bar(r, column1, color='indigo', width=barWidth)\n\n# Axis\nplt.xticks(r, names)\nplt.xlabel(\"Seasons\")\nplt.ylabel(\"Games\")\nplt.title(\"Comebacks\")\nplt.ylim(5, 25)\n\n# Horizontal gridlines\naxes = plt.gca()\naxes.yaxis.grid()\n\n# Chart size\nplt.rcParams[\"figure.figsize\"] = [24,8]\n \n# Show Chart\nplt.show()","b0b6e489":"### AT HOME\nhome = df.copy()\n\n# Games by team\nhome_games = df.groupby('HomeTeam')['HomeTeam'].count()\nhome_games = pd.DataFrame(home_games)\nhome_games.columns = ['Games']\nhome_games.reset_index(level=0, inplace=True)\n\n# Goals scored by team\nhome_games1 = df.groupby('HomeTeam')['FTHG'].sum()\nhome_games1 = pd.DataFrame(home_games1)\nhome_games1.columns = ['Goals Scored']\nhome_games1.reset_index(level=0, inplace=True)\n\n# Goals against by team\nhome_games2 = df.groupby('HomeTeam')['FTAG'].sum()\nhome_games2 = pd.DataFrame(home_games2)\nhome_games2.columns = ['Goals Against']\nhome_games2.reset_index(level=0, inplace=True)\n\n# Comebacks by team\nhome['trailer'] = np.where((home['HomeTeam'] == home['Final Winner'])&(home['Comeback']== 1),1, 0)\nhome_games3 = home.groupby('HomeTeam')['trailer'].sum()\nhome_games3 = pd.DataFrame(home_games3)\nhome_games3.columns = ['Comeback']\nhome_games3.reset_index(level=0, inplace=True)\n\n# Wins by team\nhome['HomeTeam'] = home['HomeTeam'].astype('category')\nhome_games4 = home[home['Final Winner'] == home['HomeTeam']].groupby(['HomeTeam']).size().reset_index(name='Wins')\n\n# Loss by team\nhome_games5 = home[home['Final Winner'] == home['AwayTeam']].groupby(['HomeTeam']).size().reset_index(name='Loss')\n\n# Draws by team\nhome_games6 = home[home['Final Winner'] == 'Draw'].groupby(['HomeTeam']).size().reset_index(name='Draws')\n\n# Merging dataframes\nhome_games = home_games.merge(home_games1, how='left', on='HomeTeam')\nhome_games = home_games.merge(home_games2, how='left', on='HomeTeam')\nhome_games = home_games.merge(home_games3, how='left', on='HomeTeam')\nhome_games = home_games.merge(home_games4, how='left', on='HomeTeam')\nhome_games = home_games.merge(home_games5, how='left', on='HomeTeam')\nhome_games = home_games.merge(home_games6, how='left', on='HomeTeam')\n\n# Goals scored per game\nhome_games['Goals scored per game'] = round(home_games['Goals Scored']\/home_games['Games'],2)\n\n# Goals against per game\nhome_games['Goals against per game'] = round(home_games['Goals Against']\/home_games['Games'],2)\n\n# Create 'Proportion Wins' column\nhome_games['% Wins'] = 100*round(home_games['Wins']\/home_games['Games'],3)\n\n# Create 'Proportion Loss' column\nhome_games['% Loss'] = 100*round(home_games['Loss']\/home_games['Games'],3)\n\n# Create 'Proportion Draws' column\nhome_games['% Draws'] = 100*round(home_games['Draws']\/home_games['Games'],3)\n\n# Create 'Aprov' column\nhome_games['% Points Performance'] = 100*round((3*home_games['Wins']+home_games['Draws'])\/(3*home_games['Games']),3)\n\nhome_games.head()","ef3bf58c":"home_games.sort_values(by=['Goals Scored'], inplace=True, ascending=False)\nax = home_games.plot.barh(x='HomeTeam', y='Goals Scored',color ='darkorange',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","72638a67":"home_games.sort_values(by=['Goals scored per game'], inplace=True, ascending=False)\nax = home_games.plot.barh(x='HomeTeam', y='Goals scored per game',color ='darkorange',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","17c56e8e":"home_games.sort_values(by=['% Wins'], inplace=True, ascending=False)\nax = home_games.plot.barh(x='HomeTeam', y='% Wins',color ='darkorange',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","d9732dc6":"home_games.sort_values(by=['% Points Performance'], inplace=True, ascending=False)\nax = home_games.plot.barh(x='HomeTeam', y='% Points Performance',color ='darkorange',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","f3eafa99":"home_games.sort_values(by=['Comeback'], inplace=True, ascending=False)\nax = home_games.plot.barh(x='HomeTeam', y='Comeback',color ='darkorange',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","6b480fc3":"### AWAY\naway = df.copy()\n\n# Games by team\naway_games = df.groupby('AwayTeam')['AwayTeam'].count()\naway_games = pd.DataFrame(away_games)\naway_games.columns = ['Games']\naway_games.reset_index(level=0, inplace=True)\n\n# Goals scored by team\naway_games1 = df.groupby('AwayTeam')['FTAG'].sum()\naway_games1 = pd.DataFrame(away_games1)\naway_games1.columns = ['Goals Scored']\naway_games1.reset_index(level=0, inplace=True)\n\n# Goals against by team\naway_games2 = df.groupby('AwayTeam')['FTHG'].sum()\naway_games2 = pd.DataFrame(away_games2)\naway_games2.columns = ['Goals Against']\naway_games2.reset_index(level=0, inplace=True)\n\n# Comebacks by team\naway['trailer'] = np.where((away['AwayTeam'] == away['Final Winner'])&(away['Comeback']== 1),1, 0)\naway_games3 = away.groupby('AwayTeam')['trailer'].sum()\naway_games3 = pd.DataFrame(away_games3)\naway_games3.columns = ['Comeback']\naway_games3.reset_index(level=0, inplace=True)\n\n# Wins by team\naway['AwayTeam'] = away['AwayTeam'].astype('category')\naway_games4 = away[away['Final Winner'] == away['AwayTeam']].groupby(['AwayTeam']).size().reset_index(name='Wins')\n\n# Loss by team\naway_games5 = away[away['Final Winner'] == away['HomeTeam']].groupby(['AwayTeam']).size().reset_index(name='Loss')\n\n# Draws by team\naway_games6 = away[away['Final Winner'] == 'Draw'].groupby(['AwayTeam']).size().reset_index(name='Draws')\n\n# Merging dataframes\naway_games = away_games.merge(away_games1, how='left', on='AwayTeam')\naway_games = away_games.merge(away_games2, how='left', on='AwayTeam')\naway_games = away_games.merge(away_games3, how='left', on='AwayTeam')\naway_games = away_games.merge(away_games4, how='left', on='AwayTeam')\naway_games = away_games.merge(away_games5, how='left', on='AwayTeam')\naway_games = away_games.merge(away_games6, how='left', on='AwayTeam')\n\n# Goals scored per game\naway_games['Goals scored per game'] = round(away_games['Goals Scored']\/away_games['Games'],2)\n\n# Goals against per game\naway_games['Goals against per game'] = round(away_games['Goals Against']\/away_games['Games'],2)\n\n# Create 'Proportion Wins' column\naway_games['% Wins'] = 100*round(away_games['Wins']\/away_games['Games'],3)\n\n# Create 'Proportion Loss' column\naway_games['% Loss'] = 100*round(away_games['Loss']\/away_games['Games'],3)\n\n# Create 'Proportion Draws' column\naway_games['% Draws'] = 100*round(away_games['Draws']\/away_games['Games'],3)\n\n# Create 'Aprov' column\naway_games['% Points Performance'] = 100*round((3*away_games['Wins']+away_games['Draws'])\/(3*away_games['Games']),3)\n\naway_games.head()","601bcc8e":"away_games.sort_values(by=['Goals Scored'], inplace=True, ascending=False)\nax = away_games.plot.barh(x='AwayTeam', y='Goals Scored',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","753652d0":"away_games.sort_values(by=['Goals scored per game'], inplace=True, ascending=False)\nax = away_games.plot.barh(x='AwayTeam', y='Goals scored per game',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","e3285c93":"away_games.sort_values(by=['% Wins'], inplace=True, ascending=False)\nax = away_games.plot.barh(x='AwayTeam', y='% Wins',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","b1794aee":"away_games.sort_values(by=['% Points Performance'], inplace=True, ascending=False)\nax = away_games.plot.barh(x='AwayTeam', y='% Points Performance',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","422a7100":"away_games.sort_values(by=['Comeback'], inplace=True, ascending=False)\nax = away_games.plot.barh(x='AwayTeam', y='Comeback',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","ae4ccb81":"# Adjust for home games\nhome_results = home_games.copy()\nhome_results = home_results.drop(['Goals Scored','Goals Against','Goals scored per game','Goals against per game',\n                                  '% Wins','% Loss','% Draws','% Points Performance'], axis = 1)\nhome_results.columns = ['Team','Home Games','Home Comebacks','Home Wins','Home Losses','Home Draws']\n\n# Adjusts for away games\naway_results = away_games.copy()\naway_results = away_results.drop(['Goals Scored','Goals Against','Goals scored per game','Goals against per game',\n                                  '% Wins','% Loss','% Draws','% Points Performance'], axis = 1)\n\naway_results.columns = ['Team','Away Games','Away Comebacks','Away Wins','Away Losses','Away Draws']\n\n# Merge dataframes\ngames_results = home_results.merge(away_results, how='left', on='Team')\n\n#Create Columns\ngames_results['Games'] = games_results['Home Games'] + games_results['Away Games']\ngames_results['Comebacks'] = games_results['Home Comebacks'] + games_results['Away Comebacks']\ngames_results['Wins'] = games_results['Home Wins'] + games_results['Away Wins']\ngames_results['Losses'] = games_results['Home Losses'] + games_results['Away Losses']\ngames_results['Draws'] = games_results['Home Draws'] + games_results['Away Draws']\ngames_results['% Wins'] = 100*round(games_results['Wins']\/games_results['Games'],3)\ngames_results['% Wins home'] = 100*round(games_results['Home Wins']\/games_results['Wins'],3)\ngames_results['% Wins away'] = 100*round(games_results['Away Wins']\/games_results['Wins'],3)\ngames_results['Points Performance'] = 100*round((3*games_results['Wins']+games_results['Draws'])\/\n                                                (3*games_results['Games']),3)\ngames_results['% Points home'] = 100*round((3*games_results['Home Wins']+games_results['Home Draws'])\/\n                                           (3*games_results['Wins']+games_results['Draws']),3)\ngames_results['% Points away'] = 100*round((3*games_results['Away Wins']+games_results['Away Draws'])\/\n                                           (3*games_results['Wins']+games_results['Draws']),3)\ngames_results['% home comebacks'] = 100*round(games_results['Home Comebacks']\/games_results['Comebacks'],3)\ngames_results['% away comebacks'] = 100*round(games_results['Away Comebacks']\/games_results['Comebacks'],3)\n\n# Drop some columns\ngames_results = games_results.drop(['Home Games','Home Comebacks','Home Wins','Home Losses','Home Draws',\n                                 'Away Games','Away Comebacks','Away Wins','Away Losses','Away Draws'], axis = 1)\n\ngames_results.head()","5c5cb740":"# Sort dataframe\ngames_results.sort_values(by=['% Wins home'], inplace=True, ascending=False)\n\n# Create column for team\nteam = games_results['Team'].tolist()\n\n# Create columns for wins at home and wins away\nwin_home = games_results['% Wins home'].to_numpy()\nwin_away = games_results['% Wins away'].to_numpy()\nvalues = np.vstack((win_home, win_away)).T\n\n# Create new dataframe\nprop_win = pd.DataFrame(values, team)\n\n# Define color\ncolor = ['darkorange','indigo']\n\n# Define legend\nlabels = ['% Wins Home','% Wins Away']\n\n# Plot chart\nprop_win.plot.barh(color = color,stacked=True,figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()\nplt.legend(labels,loc=1)","770538bf":"# Sort dataframe\ngames_results.sort_values(by=['% Points home'], inplace=True, ascending=False)\n\n# Create column for team\nteam = games_results['Team'].tolist()\n\n# Create columns for wins at home and wins away\npoint_home = games_results['% Points home'].to_numpy()\npoint_away = games_results['% Points away'].to_numpy()\nvalues = np.vstack((point_home, point_away)).T\n\n# Create new dataframe\nprop_point = pd.DataFrame(values, team)\n\n# Define color\ncolor = ['darkorange','indigo']\n\n# Define legend\nlabels = ['% Points Home','% Points Away']\n\n# Plot chart\nprop_point.plot.barh(color = color,stacked=True,figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()\nplt.legend(labels,loc=1)","dcf8638a":"games_results.sort_values(by=['% Wins'], inplace=True, ascending=False)\nax = games_results.plot.barh(x='Team', y='% Wins',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","de7a3e3b":"games_results.sort_values(by=['Points Performance'], inplace=True, ascending=False)\nax = games_results.plot.barh(x='Team', y='Points Performance',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","4a210f72":"games_results.sort_values(by=['Comebacks'], inplace=True, ascending=False)\nax = games_results.plot.barh(x='Team', y='Comebacks',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","89858774":"# Sort dataframe\ngames_results.sort_values(by=['% home comebacks'], inplace=True, ascending=False)\n\n# Create column for team\nteam = games_results['Team'].tolist()\n\n# Create columns for wins at home and wins away\ncomeback_home = games_results['% home comebacks'].to_numpy()\ncomeback_away = games_results['% away comebacks'].to_numpy()\nvalues = np.vstack((comeback_home, comeback_away)).T\n\n# Create new dataframe\nprop_comeback = pd.DataFrame(values, team)\n\n# Define color\ncolor = ['darkorange','indigo']\n\n# Define legend\nlabels = ['% home comebacks','% away comebacks']\n\n# Plot chart\nprop_comeback.plot.barh(color = color,stacked=True,figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()\nplt.legend(labels,loc=1)","26cce349":"# Adjust for home games\nhome_goals = home_games.copy()\nhome_goals = home_goals.drop(['Comeback','Wins','Loss','Draws','Goals scored per game','Goals against per game',\n                              '% Wins','% Loss','% Draws','% Points Performance'], axis = 1)\nhome_goals.columns = ['Team','Home games','Home Goals Scored','Home Goals Against']\n\n# Adjust for away games\naway_goals = away_games.copy()\naway_goals = away_goals.drop(['Comeback','Wins','Loss','Draws','Goals scored per game','Goals against per game',\n                              '% Wins','% Loss','% Draws','% Points Performance'], axis = 1)\naway_goals.columns = ['Team','Away games','Away Goals Scored','Away Goals Against']\n\n# Merge dataframes\ngames_goals = home_goals.merge(away_goals, how='left', on='Team')\n\n# Create Columns\ngames_goals['Games'] = games_goals['Home games'] + games_goals['Away games']\ngames_goals['Goals scored'] = games_goals['Home Goals Scored'] + games_goals['Away Goals Scored']\ngames_goals['Goals scored per game'] = round(games_goals['Goals scored']\/games_goals['Games'],3)\ngames_goals['Goals against'] = games_goals['Home Goals Against'] + games_goals['Away Goals Against']\ngames_goals['Goals against per game'] = round(games_goals['Goals against']\/games_goals['Games'],3)\ngames_goals['% Goals scored home'] = round(games_goals['Home Goals Scored']\/games_goals['Goals scored'],3)\ngames_goals['% Goals scored away'] = round(games_goals['Away Goals Scored']\/games_goals['Goals scored'],3)\ngames_goals['% Goals against home'] = round(games_goals['Home Goals Against']\/games_goals['Goals against'],3)\ngames_goals['% Goals against away'] = round(games_goals['Away Goals Against']\/games_goals['Goals against'],3)\n\n# Drop some columns\ngames_goals = games_goals.drop(['Home games','Home Goals Scored','Home Goals Against','Away games','Away Goals Scored',\n                                 'Away Goals Against'], axis = 1)\n\ngames_goals.head()","52d75cad":"games_goals.sort_values(by=['Goals scored'], inplace=True, ascending=False)\nax = games_goals.plot.barh(x='Team', y='Goals scored',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","744a586f":"games_goals.sort_values(by=['Goals scored per game'], inplace=True, ascending=False)\nax = games_goals.plot.barh(x='Team', y='Goals scored per game',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","5be668aa":"# Sort dataframe\ngames_goals.sort_values(by=['% Goals scored home'], inplace=True, ascending=False)\n\n# Create column for team\nteam = games_goals['Team'].tolist()\n\n# Create columns for wins at home and wins away\ngoal_home = games_goals['% Goals scored home'].to_numpy()\ngoal_away = games_goals['% Goals scored away'].to_numpy()\nvalues = np.vstack((goal_home, goal_away)).T\n\n# Create new dataframe\nprop_goal = pd.DataFrame(values, team)\n\n# Define color\ncolor = ['darkorange','indigo']\n\n# Define legend\nlabels = ['% Goals scored home','% Goals scored away']\n\n# Plot chart\nprop_point.plot.barh(color = color,stacked=True,figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()\nplt.legend(labels,loc=1)","9827058f":"games_goals.sort_values(by=['Goals against'], inplace=True, ascending=False)\nax = games_goals.plot.barh(x='Team', y='Goals against',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","96b62f55":"games_goals.sort_values(by=['Goals against per game'], inplace=True, ascending=False)\nax = games_goals.plot.barh(x='Team', y='Goals against per game',color ='indigo',figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()","250f784b":"# Sort dataframe\ngames_goals.sort_values(by=['% Goals against home'], inplace=True, ascending=False)\n\n# Create column for team\nteam = games_goals['Team'].tolist()\n\n# Create columns for wins at home and wins away\ngoal_home = games_goals['% Goals against home'].to_numpy()\ngoal_away = games_goals['% Goals against away'].to_numpy()\nvalues = np.vstack((goal_home, goal_away)).T\n\n# Create new dataframe\nprop_goal = pd.DataFrame(values, team)\n\n# Define color\ncolor = ['darkorange','indigo']\n\n# Define legend\nlabels = ['% Goals against home','% Goals against away']\n\n# Plot chart\nprop_point.plot.barh(color = color,stacked=True,figsize=(10,10))\naxes = plt.gca()\naxes.xaxis.grid()\nplt.legend(labels,loc=1)","1ff53504":"# Goals scored\ngoals = games_goals['Goals scored'].sum()\nprint(\"Goals scored in the last 19 seasons: \"+str(goals))\n\n# Goals per game\ngames = games_goals['Games'].sum()\ngoals_per_game = round(goals\/games,2)\nprint(\"Goals scored per game: \"+str(goals_per_game))\n\n# Team with most wins\nt_winner = games_results.nlargest(1, 'Wins')\nwinner = t_winner.iloc[0][0]\nwins = t_winner.iloc[0][3]\nprint(\"Most wins: \"+str(winner)+ \" with \" + str(wins)+ \" wins.\")\n\n# Team with most goals\nt_goals = games_goals.nlargest(1, 'Goals scored')\nteam = t_goals.iloc[0][0]\ngoals = t_goals.iloc[0][2]\nprint(\"Most goals: \"+str(team)+ \" with \" + str(goals)+ \" goals.\")\n\n# Team with most goals per game\nt_goals_per_game = games_goals.nlargest(1, 'Goals scored per game')\nteam = t_goals_per_game.iloc[0][0]\ngpg = t_goals_per_game.iloc[0][3]\nprint(\"Most goals per game: \"+str(team)+ \" with \" + str(round(gpg,2))+ \" goals.\")\n\n# Team with best points performance\nt_points = games_results.nlargest(1, 'Points Performance')\nteam = t_points.iloc[0][0]\npoints = t_points.iloc[0][9]\nprint(\"Best point performance: \"+str(team)+ \" with \" + str(round(points,2))+ \"%.\")","ab51a0fd":"### Highest Percentage of home games won","3496aa92":"### Goals per game","ac6c501d":"## Away Games","934db918":"### Comebacks away","79bf9fc6":"### Distribution of goals against at home and away","030d51b6":"# Teams","2cd3410d":"# 19 years of Premier League\n\nIn this kernel I'll check how it was Premier League in the last 19 seasons.\nThis kernel is divided in the following sections:\n\n### Preparing Data\n\n### Season\n* Total goals per season\n* Goals per game\n* Distribution of goals by home teams and away teams\n* Comebacks per season\n\n### Teams\n#### Home Games\n* Goals scored at home\n* Goals scored per home game\n* Highest Percentage of home games won\n* Points performance at home\n* Comebacks at home\n\n#### Away games\n* Goals scored away\n* Goals scored per away game\n* Highest Percentage of away games won\n* Points performance\n* Comebacks\n\n#### All Games\n* Distribution of wins at home and away\n* Distribution of points earned at home and away\n* Highest Percentage of games won\n* Points Performance\n* Comebacks\n* Distribution of comebacks\n* Total goals scored\n* Goals scored per game\n* Distribution of goals scored at home and away\n* Total Goals against\n* Goals against per game\n* Distribution of goals against at home and away\n\n### Conclusion\n* Goals scored in the last 19 seasons\n* Goals scored per game\n* Team with most wins\n* Team with most goals\n* Team with most goals per game\n* Team with most points earned\n\nI'll not consider 2019\/20 season as it was interrupted due to covid-19.\n\nIf you find any mistake or have any suggestion on something I can do better, please let me know.","fd689d20":"### Goals against per game","3f06650d":"### Comebacks per season","c11e2fed":"122 games are missing. Further, we will know in which season the games missed are from.","1e73b5c8":"## Home Games","d567a761":"### Highest Percentage of away games won","23a454bc":"# Season","3a4d944b":"# Conclusion","f10f8290":"### Total Goals against","4e5a7305":"### Distribution of points earned at home and away","33411dda":"### Comebacks","ac8fd0b4":"### Highest Percentage of games won","76c53d31":"### Points Performance","411ae8f2":"### Distribution of Comebacks at home and away","f15bffb7":"### Comebacks at home","62cb3b86":"## All Games","1a266686":"### Goals scored away","8842edb6":"### Total goals scored","061c33be":"### Total goals per season","69bb7406":"### Goals Scored at home","e4d80af3":"### Distribution of wins at home and away","2dc9372e":"### Goals scored per game","d78dfe3b":"### Distribution of goals scored at home and away","f1e5bcbe":"from 2000\/01 to 2019\/20, 7508 games were played in Premier League. Let's check our dataframe shape to verify it.","1515b512":"### Goals scored per away game","3897ee16":"### Goals Scored per home game","91dc86ae":"## Preparing Data","1a7e688d":"### Points performance at home","290aa9ae":"### Points Performance","b1cecc6c":"From the print below it's possible to see some games from 2003\/04 and 2004\/05 seasons are missing. It's awful, because 2003\/04 was a historic season for Arsenal as they won the title without any losses. I'll keep these seasons.","98f60e70":"### Distribution of goals by home teams and away teams","bdc6965d":"Let's make some adjusts in our dataframe."}}