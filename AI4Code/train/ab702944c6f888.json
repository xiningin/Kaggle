{"cell_type":{"5b1588de":"code","dc0665c5":"code","3e887530":"code","5d0d11d0":"code","b6bb3a1c":"code","ca8addb4":"code","fd4187b6":"code","8c10d3c8":"code","60d9a0dc":"code","e42a2502":"code","b092b9a9":"code","4bc2518e":"code","6aae5ef5":"code","dd314d18":"code","9295a760":"code","660cc7f5":"code","d6d3b98c":"code","b7e64b90":"code","7e8fde4d":"code","bb9ab208":"code","c04a4561":"code","6864c907":"code","63fab5ad":"code","ed0f1178":"code","9d36ced2":"code","697e4e15":"code","82aa3b08":"code","8fad5919":"code","8583a09c":"code","f2f598e7":"code","1d3b95bc":"code","e6647b7d":"markdown","555b7086":"markdown","f10915e4":"markdown","231ea63a":"markdown","06da99af":"markdown","8407e778":"markdown","825466a1":"markdown","4a5837e7":"markdown","51584621":"markdown","2d1e3fbb":"markdown","e673e782":"markdown","00d10198":"markdown","441880e3":"markdown","acb964d6":"markdown","e39c63a8":"markdown","ec8c45e0":"markdown","817cc39e":"markdown","367bb52e":"markdown","469eb6ed":"markdown","3926926b":"markdown","6856cd21":"markdown","235fdd06":"markdown","863fac93":"markdown"},"source":{"5b1588de":"# importar bibliotecas\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\n%matplotlib inline\nplt.style.use('seaborn')","dc0665c5":"# importar dados de treino\ndf_train = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\")\ndf_train.replace('?', np.nan, inplace = True)\ndf_train.set_index('Id', inplace = True)\ndf_train.head()","3e887530":"# formato do DataFrame\nprint('O data frame de teste tem ' , df_train.shape[0], \" linhas e \", df_train.shape[1], \" colunas.\")","5d0d11d0":"# dados faltantes\n# S\u00e9rie com o n\u00famero de dados faltantes em cada coluna\ntotal = df_train.isna().sum().sort_values(ascending = False)\n# S\u00e9rie com a porcentagem de dados faltantes sobre o total de dados\npercent = ((df_train.isna().sum()\/df_train.shape[0])*100).sort_values(ascending = False)\n# Criando tabela que mostra dados faltantes e a porcentagem\nmissing_data = pd.concat([total, percent], axis = 1, keys = ['Total', '%'])\nmissing_data.head()","b6bb3a1c":"df_train['workclass'] = df_train['workclass'].fillna(df_train['workclass'].describe().top)\ndf_train['native.country'] = df_train['native.country'].fillna(df_train['native.country'].describe().top)\ndf_train['occupation'] = df_train['occupation'].fillna(df_train['occupation'].describe().top)\ntotal = df_train.isna().sum().sort_values(ascending = False)\ntotal","ca8addb4":"#Plotando uma matriz de dispers\u00e3o\n\ncols = ['age', 'fnlwgt', 'education.num', 'hours.per.week']\nsns.set()\nsns.pairplot(df_train, vars = cols, hue = 'income')","fd4187b6":"df_train['age'].plot(kind='hist', bins = 80)\nplt.xlabel('Age', size = 20)\nplt.ylabel('Frequency' ,size = 20)\nplt.title('Age distribution', size = 25)","8c10d3c8":"df_train['sex'].value_counts().plot(kind='pie')\nplt.title('Sex', size = 25)\nplt.ylabel('')","60d9a0dc":"df_train['race'].value_counts().plot(kind='pie')\nplt.title('Race', size = 25)\nplt.ylabel('')","e42a2502":"df_train['marital.status'].value_counts().plot(kind='bar')\nplt.ylabel('Frequency' ,size = 20)\nplt.title('Marital Status', size = 25)","b092b9a9":"#Criar uma tabela com a propor\u00e7\u00e3o entre homens e mulheres em rela\u00e7\u00e3o \u00e0 renda\nincome_sex = pd.crosstab(df_train['income'], df_train['sex'], margins = True)\nincome_sex.drop('All', inplace = True)\nincome_sex =  round(income_sex*100\/income_sex.sum(),2)\nincome_sex","4bc2518e":"# criar o gr\u00e1fico para vizualizar os dados\nincome_sex.plot(kind='bar')\nplt.xlabel('Income', size = 15)\nplt.ylabel('Rate (%)', size = 15)\nplt.title('Male vs. Female Income', size =20)","6aae5ef5":"income_race = pd.crosstab(df_train['income'], df_train['race'], margins = True)\nincome_race.drop('All', inplace = True)\nincome_race =  round(income_race*100\/income_race.sum(),2)\nincome_race","dd314d18":"# criar o gr\u00e1fico para vizualizar os dados\nincome_race.plot(kind='bar')\nplt.xlabel('Income', size = 15)\nplt.ylabel('Rate (%)', size = 15)\nplt.title('Income for each race', size =20)","9295a760":"income_marital_status = pd.crosstab(df_train['income'], df_train['marital.status'], margins = True)\nincome_marital_status.drop('All', inplace = True)\nincome_marital_status =  round(income_marital_status*100\/income_marital_status.sum(),2)\nincome_marital_status","660cc7f5":"# criar o gr\u00e1fico para vizualizar os dados\nincome_marital_status.plot(kind='bar')\nplt.xlabel('Income', size = 15)\nplt.ylabel('Rate (%)', size = 15)\nplt.title('Income for marital status', size =20)","d6d3b98c":"income_education = pd.crosstab(df_train['income'], df_train['education'], margins = True)\nincome_education.drop('All', inplace = True)\nincome_education =  round(income_education*100\/income_education.sum(),2)\nincome_education = income_education[['HS-grad','Some-college','Bachelors', 'Masters', 'Doctorate']]\nincome_education","b7e64b90":"# criar o gr\u00e1fico para vizualizar os dados\nincome_education.plot(kind='bar')\nplt.xlabel('Income', size = 15)\nplt.ylabel('Rate (%)', size = 15)\nplt.title('Income for education', size =20)","7e8fde4d":"Xtrain = df_train[[\"age\",\"workclass\",\"education.num\",\"marital.status\", \"occupation\",\"relationship\",\"race\",\"sex\",\"capital.gain\", \"capital.loss\", \"hours.per.week\"]]\npreproc = preprocessing.LabelEncoder()\nXtrain = Xtrain.apply(preproc.fit_transform)","bb9ab208":"Ytrain = df_train.income","c04a4561":"scores_k =[]\nfor k in [1,3,7,15,30,50]:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn, Xtrain, Ytrain, cv=4)\n    scores_k.append([k,np.mean(scores)])\nscores_k","6864c907":"scores_k =[]\nfor k in range(25,35):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn, Xtrain, Ytrain, cv=4)\n    scores_k.append([k,np.mean(scores)])\nscores_k","63fab5ad":"# importar dados de teste\ndf_test = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/test_data.csv\")\ndf_test.replace('?', np.nan, inplace = True)\ndf_test.set_index('Id', inplace = True)\ndf_test.head()","ed0f1178":"df_test['workclass'] = df_test['workclass'].fillna(df_test['workclass'].describe().top)\ndf_test['native.country'] = df_test['native.country'].fillna(df_test['native.country'].describe().top)\ndf_test['occupation'] = df_test['occupation'].fillna(df_test['occupation'].describe().top)\nXtest = df_test[[\"age\",\"workclass\",\"education.num\",\"marital.status\", \"occupation\",\"relationship\",\"race\",\"sex\",\"capital.gain\", \"capital.loss\", \"hours.per.week\"]]\npreproc = preprocessing.LabelEncoder()\nXtestproc = Xtest.apply(preproc.fit_transform)","9d36ced2":"knn = KNeighborsClassifier(n_neighbors = 30)\nknn.fit(Xtrain, Ytrain)","697e4e15":"Ypred = knn.predict(Xtestproc)","82aa3b08":"Ypred.shape","8fad5919":"df_test['Income'] = Ypred\ndf_test","8583a09c":"sub = pd.DataFrame()\nsub[0] = df_test.index\nsub[1] = Ypred\nsub.columns = ['Id', 'income']","f2f598e7":"sub","1d3b95bc":"sub.to_csv('submission.csv', index=False)","e6647b7d":"## 3 Agrupamento por kNN","555b7086":"# PMR3508 - Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es","f10915e4":"Preenchendo os dados faltantes com a moda, como fiz com a base de treino. \nEm seguida, fa\u00e7o o pr\u00e9 processamento para converter string em n\u00famero, normalizando.","231ea63a":"Prevendo qual a renda das pessoas na base de dados de teste (<=50k ou >50k)","06da99af":"### 1.1 Bibliotecas","8407e778":"Fazendo uma valida\u00e7\u00e3o cruzada de 4 folds para verificar qual o valor de k que d\u00e1 a maior taxa de acerto. ","825466a1":"## An\u00e1lise e aplica\u00e7\u00e3o do kNN","4a5837e7":"Agora para aprofundar mais na an\u00e1lise, temos a compara\u00e7\u00e3o de sal\u00e1rio entre homens e mulheres, entre ra\u00e7as, status e n\u00edvel de educa\u00e7\u00e3o.","51584621":"## 4 Submiss\u00e3o","2d1e3fbb":"Submeter um DataFrame apenas com o Id e a renda prevista","e673e782":"### Usar o kNN na base de teste","00d10198":"## 2 An\u00e1lise dos dados","441880e3":"### 1.3 Identificar e tratar os dados faltantes","acb964d6":"Pr\u00e9 selecionei as colunas que ser\u00e3o usadas na compara\u00e7\u00e3o, excluindo apenas education, que \u00e9 o mesmo de education.num, e o pa\u00eds, visto que 91% s\u00e3o americanos e n\u00e3o h\u00e1 dados suficientes para fazer predi\u00e7\u00f5es com base em outras nacionalidades.\n\nAl\u00e9m disso, \u00e9 preciso pr\u00e9 processar os dados, convertendo strings em n\u00fameros e normalizando para que n\u00e3o haja influ\u00eancia de escala no processamento.","e39c63a8":"Exportar a submiss\u00e3o em um arquivo .csv:","ec8c45e0":"> Como se pode ver, o melhor k encontrado \u00e9 30, apresentando uma taxa de acerto m\u00e9dia de 83,95%. Ou seja, a taxa de erro \u00e9 de 16,05%.","817cc39e":"Dados de teste:","367bb52e":"Como podemos ver, apenas algumas colunas apresentam dados faltantes. Em seguida, irei substitu\u00edlos pela moda de cada um deles.","469eb6ed":"## 1 Inicializa\u00e7\u00e3o","3926926b":"Agora podemos analisar a distribui\u00e7\u00e3o de idade, sexo, etnia e status das pessoas analisadas.","6856cd21":"Autor: Maur\u00edcio Pir\u00e2mides Teixeira Soares","235fdd06":"### 1.2 Leitura dos dados","863fac93":"Formato do data frame (n\u00famero de linhas e de colunas)"}}