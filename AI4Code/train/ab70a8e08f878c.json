{"cell_type":{"62a50044":"code","2fc22aa8":"code","b1fcfbbe":"code","20538266":"code","2c1ea650":"code","c0d74ae4":"code","e96cbfb2":"code","baeb878f":"code","25d5281a":"code","b3fcc624":"code","0bbe5b8e":"code","c6f62dbe":"code","e357aa0c":"code","9947bb74":"code","e3401a2a":"code","74c41d44":"code","e78e6612":"code","139fbb40":"code","064c24b5":"code","b5e70d66":"code","fdf7b932":"code","1e0161e7":"code","5a5e4a37":"code","a044aef6":"code","dc4835ea":"code","f969fbf5":"code","c489dd3f":"code","225983bb":"code","92fd607a":"code","b0229d3a":"code","26a3018d":"code","40fc13e3":"code","bf466e12":"code","027d84cb":"code","2aa3d133":"code","75c4563d":"code","fa4c607b":"code","39e74cca":"code","69ffdb58":"markdown","b3c32c73":"markdown","fedf84cd":"markdown","3e5ca0e5":"markdown","b36448c8":"markdown","5b9fc242":"markdown","394b37ab":"markdown","d82721bc":"markdown","eedb9d0f":"markdown"},"source":{"62a50044":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2fc22aa8":"def plot_series(time, series, format=\"-\", start=0, end=None, label=None):\n    plt.plot(time[start:end], series[start:end], format, label=label)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    if label:\n        plt.legend(fontsize=14)\n    plt.grid(True)","b1fcfbbe":"def trend(time, slope=0):\n    return slope * time","20538266":"time = np.arange(4 * 365 + 1)\nbaseline = 10\nseries = trend(time, 0.1)\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)\nplt.show()","2c1ea650":"def seasonal_pattern(season_time):\n    \"\"\"Just an arbitrary pattern, you can change it if you wish\"\"\"\n    return np.where(season_time < 0.4,\n                    np.cos(season_time * 2 * np.pi),\n                    1 \/ np.exp(3 * season_time))\n\ndef seasonality(time, period, amplitude=1, phase=0):\n    \"\"\"Repeats the same pattern at each period\"\"\"\n    season_time = ((time + phase) % period) \/ period\n    return amplitude * seasonal_pattern(season_time)","c0d74ae4":"baseline = 10\namplitude = 40\nseries = seasonality(time, period=365, amplitude=amplitude)\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)\nplt.show()","e96cbfb2":"slope = 0.05\nseries = baseline + trend(time, slope) + seasonality(time, period=365, amplitude=amplitude)\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)\nplt.show()","baeb878f":"def white_noise(time, noise_level=1, seed=None):\n    rnd = np.random.RandomState(seed)\n    return rnd.randn(len(time)) * noise_level","25d5281a":"noise_level = 5\nnoise = white_noise(time, noise_level, seed=42)\n\nplt.figure(figsize=(10, 6))\nplot_series(time, noise)\nplt.show()","b3fcc624":"series += noise\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)\nplt.show()","0bbe5b8e":"split_time = 1000\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]","c6f62dbe":"def autocorrelation(time, amplitude, seed=None):\n    rnd = np.random.RandomState(seed)\n    \u03c61 = 0.5\n    \u03c62 = -0.1\n    ar = rnd.randn(len(time) + 50)\n    ar[:50] = 100\n    for step in range(50, len(time) + 50):\n        ar[step] += \u03c61 * ar[step - 50]\n        ar[step] += \u03c62 * ar[step - 33]\n    return ar[50:] * amplitude","e357aa0c":"def autocorrelation(time, amplitude, seed=None):\n    rnd = np.random.RandomState(seed)\n    \u03c6 = 0.8\n    ar = rnd.randn(len(time) + 1)\n    for step in range(1, len(time) + 1):\n        ar[step] += \u03c6 * ar[step - 1]\n    return ar[1:] * amplitude","9947bb74":"series = autocorrelation(time, 10, seed=42)\nplot_series(time[:200], series[:200])\nplt.show()","e3401a2a":"series = autocorrelation(time, 10, seed=42) + trend(time, 2)\nplot_series(time[:200], series[:200])\nplt.show()","74c41d44":"series = autocorrelation(time, 10, seed=42) + seasonality(time, period=50, amplitude=150) + trend(time, 2)\nplot_series(time[:200], series[:200])\nplt.show()","e78e6612":"series = autocorrelation(time, 10, seed=42) + seasonality(time, period=50, amplitude=150) + trend(time, 2)\nseries2 = autocorrelation(time, 5, seed=42) + seasonality(time, period=50, amplitude=2) + trend(time, -1) + 550\nseries[200:] = series2[200:]\n#series += noise(time, 30)\nplot_series(time[:300], series[:300])\nplt.show()","139fbb40":"def impulses(time, num_impulses, amplitude=1, seed=None):\n    rnd = np.random.RandomState(seed)\n    impulse_indices = rnd.randint(len(time), size=10)\n    series = np.zeros(len(time))\n    for index in impulse_indices:\n        series[index] += rnd.rand() * amplitude\n    return series","064c24b5":"series = impulses(time, 10, seed=42)\nplot_series(time, series)\nplt.show()","b5e70d66":"def autocorrelation(source, \u03c6s):\n    ar = source.copy()\n    max_lag = len(\u03c6s)\n    for step, value in enumerate(source):\n        for lag, \u03c6 in \u03c6s.items():\n            if step - lag > 0:\n              ar[step] += \u03c6 * ar[step - lag]\n    return ar","fdf7b932":"signal = impulses(time, 10, seed=42)\nseries = autocorrelation(signal, {1: 0.99})\nplot_series(time, series)\nplt.plot(time, signal, \"k-\")\nplt.show()","1e0161e7":"signal = impulses(time, 10, seed=42)\nseries = autocorrelation(signal, {1: 0.70, 50: 0.2})\nplot_series(time, series)\nplt.plot(time, signal, \"k-\")\nplt.show()","5a5e4a37":"series_diff1 = series[1:] - series[:-1]\nplot_series(time[1:], series_diff1)","a044aef6":"from pandas.plotting import autocorrelation_plot\n\nautocorrelation_plot(series)","dc4835ea":"from statsmodels.tsa.arima_model import ARIMA\n\nmodel = ARIMA(series, order=(5, 1, 0))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","f969fbf5":"import pandas as pd\n\ndf = pd.read_csv('..\/input\/minimum-daily-temperatures-in-melbourne-10-years\/Sunspots.csv', parse_dates=[\"Date\"], index_col=\"Date\")\nseries = df[\"Monthly Mean Total Sunspot Number\"].asfreq(\"1M\")\nseries.head()","c489dd3f":"series.plot(figsize=(12, 5))","225983bb":"series[\"1995-01-01\":].plot()","92fd607a":"series.diff(1).plot()\nplt.axis([0, 100, -50, 50])","b0229d3a":"from pandas.plotting import autocorrelation_plot\n\nautocorrelation_plot(series)","26a3018d":"autocorrelation_plot(series.diff(1)[1:])","40fc13e3":"autocorrelation_plot(series.diff(1)[1:].diff(11 * 12)[11*12+1:])\nplt.axis([0, 500, -0.1, 0.1])","bf466e12":"autocorrelation_plot(series.diff(1)[1:])\nplt.axis([0, 50, -0.1, 0.1])","027d84cb":"116.7 - 104.3","2aa3d133":"[series.autocorr(lag) for lag in range(1, 50)]","75c4563d":"#Read a comma-separated values (csv) file into DataFrame.\npd.read_csv('..\/input\/minimum-daily-temperatures-in-melbourne-10-years\/Sunspots.csv', sep=',', delimiter=None, header='infer', names=None, \n            index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, \n            dtype=None, engine=None, converters=None, true_values=None, false_values=None, \n            skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, \n            keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, \n            infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, iterator=False, \n            chunksize=None, compression='infer', thousands=None, decimal=b'.', lineterminator=None, quotechar='\"', \n            quoting=0, doublequote=True, escapechar=None, comment=None, encoding=None, dialect=None, \n            error_bad_lines=True, warn_bad_lines=True, delim_whitespace=False, \n            low_memory=True, memory_map=False, float_precision=None)","fa4c607b":"from pandas.plotting import autocorrelation_plot\n\nseries_diff = series\nfor lag in range(50):\n  series_diff = series_diff[1:] - series_diff[:-1]\n\nautocorrelation_plot(series_diff)","39e74cca":"series_diff1 = pd.Series(series[1:] - series[:-1])\nautocorrs = [series_diff1.autocorr(lag) for lag in range(1, 60)]\nplt.plot(autocorrs)\nplt.show()","69ffdb58":"Now let's create a time series with both trend and seasonality:","b3c32c73":"You can get more detail about this in [here](https:\/\/github.com\/https-deeplearning-ai\/tensorflow-1-public\/blob\/main\/C4\/W1\/ungraded_labs\/C4_W1_Lab_2_forecasting.ipynb)","fedf84cd":"# Noise","3e5ca0e5":"Let's create a time series that just trends upward:","b36448c8":"# Trend and Seasonality","5b9fc242":"All right, this looks realistic enough for now. Let's try to forecast it. We will split it into two periods: the training period and the validation period (in many cases, you would also want to have a test period). The split will be at time step 1000.","394b37ab":"Now let's generate a time series with a seasonal pattern:","d82721bc":"Now let's add this white noise to the time series:","eedb9d0f":"In practice few real-life time series have such a smooth signal. They usually have some noise, and the signal-to-noise ratio can sometimes be very low. Let's generate some white noise:"}}