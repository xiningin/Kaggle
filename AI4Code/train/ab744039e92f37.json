{"cell_type":{"db2a5c49":"code","c0a3abcd":"code","8e2e16b4":"code","35248745":"code","7f0a68b9":"code","513294b8":"code","bb53446e":"code","a20d9a8a":"code","aa45eee8":"code","35ff495e":"code","92b42b5c":"code","43b91532":"code","bd59a0ee":"code","0d72257d":"code","fd79a115":"code","928d7a47":"code","a35829ee":"code","2e134e67":"code","fb1770f6":"code","82c47569":"code","defd85a1":"code","78a41d43":"code","9beca5fe":"code","7f68fca6":"code","7fc0de00":"code","81ff8f29":"code","083d7dca":"code","205b4af2":"code","0d2e64f5":"code","7d309740":"code","19e62fbb":"code","7f62a20c":"code","e439619f":"code","dccfc51b":"code","86099dcb":"markdown","50d0f711":"markdown","332275ea":"markdown","162086fb":"markdown","6bfa0057":"markdown","20320c4b":"markdown","75f3096a":"markdown","5b0d9aac":"markdown","1e441c82":"markdown","615f201b":"markdown","bca1b4c9":"markdown","2eafab05":"markdown","dba4b1e5":"markdown","afc2aeb5":"markdown","1dc2a7cf":"markdown","9c012691":"markdown","ba75560e":"markdown"},"source":{"db2a5c49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0a3abcd":"from matplotlib import pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\n%matplotlib inline \n\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import  metrics \nfrom sklearn.metrics import confusion_matrix, accuracy_score, make_scorer\n\n","8e2e16b4":"#loading data\n\ndata=pd.read_csv(\"..\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndata.head()","35248745":"data.info()","7f0a68b9":"data.describe()","513294b8":"import pandas_profiling as pp\npp.ProfileReport(data)","bb53446e":"# taking categorical features only\ndf_cat=data.loc[:,data.dtypes==np.object]","a20d9a8a":"#Droping 'Over18'\n#Attrition is target variable so will drop it too\ndf_cat=df_cat.drop(['Attrition','Over18'], axis=1)\ndf_cat","aa45eee8":"#taking numerical fetures only\ndf_num=data.loc[:,data.dtypes==np.int64]\ndf_num","35ff495e":"#droping numeric features which are constant\ndf_num=df_num.drop(['EmployeeCount','StandardHours'], axis=1)\ndf_num","92b42b5c":"corr = df_num.corr()\nplt.figure(figsize=(10, 10))\nax = sns.heatmap(\n    corr, \n    vmin=-0, vmax=1,\n    cmap=sns.diverging_palette(40, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","43b91532":"sns.countplot(x=\"BusinessTravel\",data=df_cat)","bd59a0ee":"sns.countplot(x=\"Department\",data=df_cat)\n","0d72257d":"sns.countplot(x=\"EducationField\",data=df_cat)","fd79a115":"sns.countplot(x=\"Gender\",data=df_cat)","928d7a47":"sns.countplot(x=\"JobRole\",data=df_cat)","a35829ee":"sns.countplot(x=\"MaritalStatus\",data=df_cat)","2e134e67":"sns.countplot(x=\"OverTime\",data=df_cat)","fb1770f6":"#conveting categorical variable into numeric \ndf_cat = pd.get_dummies(df_cat)\ndf_cat.head()","82c47569":"#transforming target\/Attrition variable\ntarget_map = {'Yes':1, 'No':0}\n# Use the pandas apply method to numerically encode our attrition target variable\nY= data[\"Attrition\"].apply(lambda x: target_map[x])\nY","defd85a1":"#merging categorical and numerical data\nnew_df= pd.concat([df_cat, df_num], axis=1)\nnew_df","78a41d43":"corr =new_df.corr()\nplt.figure(figsize=(10, 10))\nax = sns.heatmap(\n    corr, \n    vmin=-0, vmax=1,\n    cmap=sns.diverging_palette(40, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","9beca5fe":"#analysing target variable\nsns.countplot(x=\"Attrition\",data=data)\ndata.Attrition.value_counts()","7f68fca6":"from sklearn.preprocessing import RobustScaler\n\nX=new_df\nscaler=RobustScaler()\nscaled_df=scaler.fit_transform(X)\nX=scaled_df\n","7fc0de00":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test= train_test_split(X,Y,test_size=0.3,random_state=42)","81ff8f29":"from sklearn.neighbors import KNeighborsClassifier\nmodel= KNeighborsClassifier(n_neighbors=3,n_jobs=-1)\nmodel.fit(X_train,Y_train)\nY_predict=model.predict(X_test)","083d7dca":"def plot_roc_curve(fpr, tpr):\n    plt.plot(fpr, tpr, color='orange', label='ROC')\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","205b4af2":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(Y_test,Y_predict))\nprint(confusion_matrix(Y_test,Y_predict))\n\n\nprobs=model.predict_proba(X_test)\npreds = probs[:,1]\n\nauc = roc_auc_score(Y_test, preds)\nprint('AUC: %.2f' % auc)\nfpr, tpr, threshold = metrics.roc_curve(Y_test, preds)\nroc_auc = metrics.auc(fpr, tpr)\nplot_roc_curve(fpr, tpr)","0d2e64f5":"from imblearn.over_sampling import SMOTE\nsmote=SMOTE()","7d309740":"from imblearn.over_sampling import SMOTE\nsmote=SMOTE()\nX_train_smote,Y_train_smote=smote.fit_sample(X_train,Y_train)","19e62fbb":"\nfrom collections import Counter\nprint(\"Before smote\",Counter(Y_train))\nprint(\"after smote\",Counter(Y_train_smote))\n","7f62a20c":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nmodel = KNeighborsClassifier(n_jobs=-1)\nparams = {'n_neighbors':[3,5,7,9],\n          'leaf_size':[1,2,3,5],\n          'weights':['uniform', 'distance'],\n          'algorithm':['auto', 'ball_tree','kd_tree','brute'],\n          'n_jobs':[-1]}\n#Making models with hyper parameters sets\nmodel1 = GridSearchCV(model, param_grid=params, n_jobs=1)\n#Learning\nmodel1.fit(X_train_smote,Y_train_smote)\n#The best hyper parameters set\nprint(\"Best Hyper Parameters:\\n\",model1.best_params_)\n#Prediction\nprediction=model1.predict(X_test)\n#importing the metrics module\nfrom sklearn import metrics\n#evaluation(Accuracy)\nprint(\"Accuracy:\",metrics.accuracy_score(prediction,Y_test))\n#evaluation(Confusion Metrix)\nprint(\"Confusion Metrix:\\n\",metrics.confusion_matrix(prediction,Y_test))\n#evaluation(ROC_AUC)\nprobs=model1.predict_proba(X_test)\npreds = probs[:,1]\nauc = roc_auc_score(Y_test, preds)\nprint('ROC_AUC: %.2f' % auc)\n\nfpr, tpr, threshold = metrics.roc_curve(Y_test, preds)\nroc_auc = metrics.auc(fpr, tpr)\nplot_roc_curve(fpr, tpr)","e439619f":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import make_scorer\n\n# Choose the type of classifier. \nclf = RandomForestClassifier()\n\n# Choose some parameter combinations to try\nparameters = {'n_estimators': [4, 6, 9], \n              'max_features': ['log2', 'sqrt','auto'], \n              'criterion': ['entropy', 'gini'],\n              'max_depth': [2, 3, 5, 10], \n              'min_samples_split': [2, 3, 5],\n              'min_samples_leaf': [1,5,8]\n             }\n\n# Type of scoring used to compare parameter combinations\nacc_scorer = make_scorer(accuracy_score)\n\n# Run the grid search\ngrid_obj = GridSearchCV(clf, parameters, scoring=acc_scorer)\ngrid_obj = grid_obj.fit(X_train_smote,Y_train_smote)\n\n# Set the clf to the best combination of parameters\nclf = grid_obj.best_estimator_\n\n# Fit the best algorithm to the data. \nclf.fit(X_train_smote,Y_train_smote)\n\npredictions = clf.predict(X_test)\nprint(accuracy_score(Y_test, predictions))\nprint(confusion_matrix(Y_test,predictions))\n#evaluation(ROC_AUC)\nprobs=model1.predict_proba(X_test)\npreds = probs[:,1]\nauc = roc_auc_score(Y_test, preds)\nprint('ROC_AUC: %.2f' % auc)\n\nfpr, tpr, threshold = metrics.roc_curve(Y_test, preds)\nroc_auc = metrics.auc(fpr, tpr)\nplot_roc_curve(fpr, tpr)","dccfc51b":"from sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\n#making the instance\nmodel=svm.SVC(probability=True)\n#Hyper Parameters Set\nparams = {'C': [6,7,8,9,10,11,12], \n          'kernel': ['linear','rbf']}\n#Making models with hyper parameters sets\nmodel1 = GridSearchCV(model, param_grid=params, n_jobs=-1)\n#Learning\nmodel1.fit(X_train_smote,Y_train_smote)\n#The best hyper parameters set\nprint(\"Best Hyper Parameters:\\n\",model1.best_params_)\n#Prediction\nprediction=model1.predict(X_test)\n#importing the metrics module\nfrom sklearn import metrics\n#evaluation(Accuracy)\nprint(\"Accuracy:\",metrics.accuracy_score(prediction,Y_test))\n#evaluation(Confusion Metrix)\nprint(\"Confusion Metrix:\\n\",metrics.confusion_matrix(prediction,Y_test))\n#evaluation(ROC_AUC)\nprobs=model1.predict_proba(X_test)\npreds = probs[:,1]\nauc = roc_auc_score(Y_test, preds)\nprint('ROC_AUC: %.2f' % auc)\n\nfpr, tpr, threshold = metrics.roc_curve(Y_test, preds)\nroc_auc = metrics.auc(fpr, tpr)\nplot_roc_curve(fpr, tpr)\n","86099dcb":"Analysing categorical variable and covert them into dummy variable","50d0f711":"Following are some useful insights from pandas profiling:-\n\n  --MonthlyIncome and JobLevel are higly correlated with each other, people with higher job level tends of high salary.\n  \n  --JobRole and Department;some department have more core values like Research & Development so it has more and important JobRole.\n  \n  --EmployeeCount,Over18 and StandardHours have constant value and standard deviation of zero we can drop them\n ","332275ea":"KNN was not very promising with  this data but random forest and svm performed better.","162086fb":"Rescaling the data using robust scaler","6bfa0057":"## Data exploration","20320c4b":"84% accuracy and .67 auc_roc is good but this could be misleading and caused by overfitting as data is imbalanced ","75f3096a":"### Dividing numerical and categorical data","5b0d9aac":"**Please UPVOTE this kernel if you like it. looking for your valuable suggestion. \nThanks,**","1e441c82":"# SVM with Smote data","615f201b":"# Random Forest with SMOTE data","bca1b4c9":"**pandas profiling is great way of looking at data**","2eafab05":"#  Model building\n### KNN- k nearest neighbour","dba4b1e5":"# KNN with SMOTE data","afc2aeb5":"**Random forest with optimization**","1dc2a7cf":"After smote KNN is giving accuracy of 62 and auc_roc 64 which is drastic drop from before smote","9c012691":"***Data is imbalanced and 'yes' in attrition is minority class***\n**we need to over sample the minority class and for this we will be using smote (synthetic minority oversampling technique)**","ba75560e":"### SMOTE"}}