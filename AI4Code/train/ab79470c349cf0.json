{"cell_type":{"7f6974a2":"code","96956593":"code","9422d6ca":"code","ce861e0d":"code","19b48370":"code","43035824":"code","589f26df":"code","5c50c863":"code","b231669a":"markdown","30e19246":"markdown","0e7cd07c":"markdown","f0a0f06c":"markdown","513a97f1":"markdown","2d0ac539":"markdown"},"source":{"7f6974a2":"import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","96956593":"# SRC: https:\/\/www.kaggle.com\/lifa08\/run-length-encode-and-decode\ndef rle_encode(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = img.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n\ndef rle_decode(mask_rle, shape):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0] * shape[1], dtype=np.uint8)\n\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape)","9422d6ca":"# New version\ndef rle_encode_less_memory(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    This simplified method requires first and last pixel to be zero\n    '''\n    pixels = img.T.flatten()\n    \n    # This simplified method requires first and last pixel to be zero\n    pixels[0] = 0\n    pixels[-1] = 0\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 2\n    runs[1::2] -= runs[::2]\n    \n    return ' '.join(str(x) for x in runs)","ce861e0d":"im = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (64, 64))\nplt.imshow(im)","19b48370":"rle = rle_encode(im)\nrle2 = rle_encode_less_memory(im)\n\nassert rle == rle2","43035824":"im[0] = 1\nim[-1] = 1\nim[:, 0] = 1\nim[:, -1] = 1\nplt.imshow(im)","589f26df":"rle = rle_encode(im)\nrle2 = rle_encode_less_memory(im)\n\nassert rle != rle2","5c50c863":"im1 = rle_decode(rle, im.shape)\nim2 = rle_decode(rle2, im.shape)\n\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.title('Exact method')\nplt.imshow(im1)\n\nplt.subplot(122)\nplt.title('Skipping first and last pixel method')\nplt.imshow(im2)","b231669a":"Decode and plot results. Note the missing pixels on top-left and bottom-right of second image.","30e19246":"Create a sample image.","0e7cd07c":"First we test for equal values.","f0a0f06c":"Add border on image.","513a97f1":"Re-encode with each method.","2d0ac539":"Did you finally train your model and predicted that huge images? Now that you have a HUGE (30k+, 40k+) pixel mask image you have to RLE encode it... and get a OOM exception!\n\nYour problems are solved (at least I hope so). The following function is a modification of [this one](https:\/\/www.kaggle.com\/lifa08\/run-length-encode-and-decode).\n\nBUT there is a trade-off: **the first and the last pixels are not encoded**. This save one `np.concatenate` that duplicates memory and may cause OOM."}}