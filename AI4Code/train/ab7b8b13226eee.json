{"cell_type":{"4628dc14":"code","b117054c":"code","0c4d5bf6":"code","1fe980af":"code","b8d847c9":"code","ae207b7d":"code","2c4f4dbc":"code","1a3f12ac":"code","afac1ac0":"code","cd0425bc":"code","7cafe115":"code","b5c473db":"code","ced8d1de":"code","b60b1ee8":"code","4a6b2ee3":"code","08ff05f8":"code","4332652b":"code","8d5623d8":"code","50e050e6":"code","4a28eb00":"code","2792e3d6":"code","7daff5ae":"code","76e4b3a2":"code","69981656":"code","c4a54fab":"code","64f7f486":"markdown","cc22f146":"markdown","6de1cb76":"markdown","765c08c5":"markdown","84fa1ed2":"markdown","94f4ae97":"markdown","a6c66716":"markdown"},"source":{"4628dc14":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%config InlineBackend.figure_format = 'retina'\nplt.rcParams['figure.dpi'] = 100","b117054c":"train = pd.read_csv('\/kaggle\/input\/used-cars-price-prediction\/train-data.csv')\ntest = pd.read_csv('\/kaggle\/input\/used-cars-price-prediction\/test-data.csv')\n\nprint('Train shape : ', train.shape)\nprint('Test shape : ', test.shape)","0c4d5bf6":"# train.info()","1fe980af":"import missingno as msns\n\nmsns.bar(train, figsize = (10, 4), fontsize = 12)","b8d847c9":"train['Brand'] = train['Name'].map(lambda x : x.split(' ')[0])\ntrain['Model'] = train['Name'].map(lambda x : x.split(' ')[1])\ntrain['Mileage(km\/l)'] = train['Mileage'].astype(str).map(lambda x : x.split(' ')[0]).replace('nan' , np.nan).astype(np.float)\ntrain['New_Price(Lakhs)'] = train['New_Price'].astype(str).map(lambda x : x.split(' ')[0]).replace('nan' , np.nan).astype(np.float)\ntrain['Engine(cc)'] = train['Engine'].astype(str).map(lambda x : x.split(' ')[0]).replace('nan' , np.nan).astype(np.float)\ntrain['Power(bph)'] = train['Power'].astype(str).map(lambda x : x.split(' ')[0]).replace('null' , np.nan).astype(np.float)","ae207b7d":"# drop unnecessary features\n'''\n- 'Unnamed: 0'\n- New_Price\n- Mileage\n- Engine\n- Power\n'''\ntrain = train.drop(['Unnamed: 0','New_Price', 'Mileage', 'Engine', 'Power'], axis = 1)","2c4f4dbc":"brand = train['Brand'].value_counts()\n\nbrand_name = brand.index[np.where(brand>10)]\n\ntrain['Brand'] = train['Brand'].map(lambda x : x if x in brand_name else 'Others')","1a3f12ac":"brand = train['Brand'].value_counts()\nbrand_ratio = train['Brand'].value_counts(normalize = True)\n\n\nfig, ax = plt.subplots(figsize = (12, 4))\n\nax.bar(brand.index, brand, width = 0.7,\n       color = sns.light_palette('purple', n_colors = len(brand))[::-1], edgecolor = 'k')\n\nax.plot(brand.index, brand, 'purple', alpha = 0.5, lw = 0.7, ls = '--')\n\n# Annotation\nfor i in brand.index:\n    ax.annotate(f\"{brand_ratio[i] * 100:.1f}%\", \n               xy = (i, brand[i] + 30),\n               va = 'center',\n               ha = 'center',\n               color = 'black',\n               fontsize = 8)\n\n# Design graph\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n\nax.grid(axis = 'y', ls ='--', lw = 0.5)\nax.set_xticklabels(brand.index, rotation = 60)\n\nax.set_xlabel('Brand', fontweight = 'bold', fontsize = 12)\nax.set_ylabel('Stocks', fontweight = 'bold', fontsize = 12)\nfig.text(0.1,1, 'Used car stocks by Brands',fontweight = 'bold', fontsize = 14)\nplt.show()","afac1ac0":"# Transmission type\nbrand_trans = train.groupby(['Brand', 'Transmission'])['Transmission'].count().unstack(fill_value = 0).reindex(brand.index)\n\nfig, ax = plt.subplots(figsize = (12, 5))\n\nax.bar(brand_trans.index, +brand_trans['Manual'], label = 'Manual', edgecolor = 'k',color = '#61b3de')\nax.bar(brand_trans.index, -brand_trans['Automatic'], label = 'Automatic', edgecolor = 'k', color = '#f57d00')\n\n# annotation\n\nfor b in brand_trans.index:\n    \n    # for manual\n    manual_val = brand_trans['Manual'].fillna(0)[b]\n    \n    # filter except for 0 value\n    if manual_val != 0:\n        ax.annotate(f\"{int(manual_val)}\",\n                    xy = (b, manual_val + 30),\n                   ha = 'center',\n                   va = 'center', \n                   fontsize = 8)\n                    \n   # for auto\n    auto_val = brand_trans['Automatic'].fillna(0)[b]\n    \n    if auto_val != 0:\n        ax.annotate(f\"{int(auto_val)}\",\n                    xy = (b, -auto_val - 30),\n                   ha = 'center',\n                   va = 'center', \n                   fontsize = 8)\n\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n\n    \nax.set_xticklabels(brand.index, rotation = 60)\nax.set_yticks([])\nax.set_xlabel('Brand', fontweight = 'bold', fontsize = 12)\nfig.text(0.15,0.96, 'Transmission type',fontweight = 'bold', fontsize = 14)\nax.legend(loc = 'upper right', ncol = 2)\nplt.show()","cd0425bc":"# Fuel_Type\n# rename\ntrain['Fuel_Type'] = train['Fuel_Type'].map(lambda x : x if x in ['Diesel', 'Petrol'] else 'Others')\n\nbrand_fuel = train.groupby(['Brand', 'Fuel_Type'])['Fuel_Type'].count().unstack(fill_value =0).reindex(brand.index)[::-1]\nbrand_fuel_ratio = (brand_fuel.T \/ brand_fuel.sum(axis = 1)).T\n\nfig ,ax = plt.subplots(figsize= (10, 8))\n\n\ni = pd.Series(index = brand_fuel_ratio.index, data = [0 for _ in range(len(brand_fuel_ratio.index))])\ncolors = ['#56c1ab', '#ed6856', '#fdb94e']\nc_idx = 0\nfor fuel in ['Diesel','Petrol', 'Others']:\n    ax.barh(brand_fuel_ratio.index, brand_fuel_ratio[fuel], left = i, height = 0.7, \n            edgecolor = 'k', label = fuel, color = colors[c_idx])\n\n    \n    for b in brand_fuel_ratio.index:   \n#     if vals[j] * 100 > 5: # annotation filter \n        vals = brand_fuel_ratio[fuel][b]\n        if vals > 0.05:\n\n            ax.annotate(f\"{vals * 100:.1f} %\",\n                        xy = (i[b] + vals\/2 , b),\n                       va = 'center', ha = 'center',\n                       color = 'white',\n                       fontsize = 9)\n    \n    i += brand_fuel_ratio[fuel]\n    c_idx += 1\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n    \n    \nax.set_xticks([])\nax.legend(loc = 'lower center', ncol = 3, bbox_to_anchor = (0.5, -0.05))\nfig.text(0.1,0.9, 'Fuel type',fontweight = 'bold', fontsize = 14)\nplt.show()","7cafe115":"year = train['Year'].value_counts().sort_index()\n\nfig, ax = plt.subplots(figsize = (10, 4))\nax.bar(year.index, year, edgecolor = 'k', color = sns.light_palette('purple', n_colors = len(year)))\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n\nax.grid(axis = 'y', ls ='--', lw = 0.5)\nax.set_xlabel('Year', fontweight = 'bold', fontsize = 12)\nax.set_ylabel('Stocks', fontweight = 'bold', fontsize = 12)\nfig.text(0.1,1, 'Used car model year',fontweight = 'bold', fontsize = 14)\nplt.show()","b5c473db":"# Distribution of engine cc by brand\nfig, ax = plt.subplots(figsize = (12 ,4))\n\nsns.boxplot(data = train, x = 'Brand', y = 'Engine(cc)', order= brand.index, ax = ax)\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n\n\nax.set_xticklabels(brand.index, rotation = 60)\nax.set_xlabel('')\nax.set_ylim(0, 6000)\nax.grid(axis = 'y', ls = '--', lw = 0.7) \n    \nfig.text(0.08, 0.95, 'Boxplot : Distribution of engine cc', fontsize = 14, fontweight = 'bold')\nplt.show()","ced8d1de":"train['Mileage(km\/l)'] = train['Mileage(km\/l)'].astype(np.float).replace(0, np.nan)\n\nfig, ax = plt.subplots(figsize = (12 ,4))\nsns.boxplot(data = train, y = 'Mileage(km\/l)', x = 'Brand', ax = ax)\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n    \nax.set_xticklabels(brand.index, rotation = 60)\nax.set_ylim(5, 35)\nax.grid(axis = 'y', ls = '--', lw = 0.7)\nax.set_ylabel('')\n\nfig.text(0.09, 0.95, 'Boxplot : Distribution of mileage(km\/l)', fontsize = 14, fontweight = 'bold')\nplt.show()","b60b1ee8":"fig, ax = plt.subplots(figsize = (12 ,4))\nsns.boxplot(data = train, x = 'Brand', y = 'Price', order= brand.index, ax = ax)\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n    \nax.set_xticklabels(brand.index, rotation = 60)\nax.set_ylim(-4, 100)\nax.grid(axis = 'y', ls = '--', lw = 0.7)\nax.set_ylabel('')\n\nfig.text(0.09, 0.95, 'Boxplot : Distribution of price(Lakhs)', fontsize = 14, fontweight = 'bold')\n\nplt.show()","4a6b2ee3":"diesel_mileage_top10 = train[train['Fuel_Type'] == 'Diesel'].sort_values('Mileage(km\/l)', ascending = False).drop_duplicates('Model').head(10).reset_index(drop = True)\npetrol_mileage_top10 = train[train['Fuel_Type'] == 'Petrol'].sort_values('Mileage(km\/l)', ascending = False).drop_duplicates('Model').head(10).reset_index(drop = True)","08ff05f8":"fig, axes = plt.subplots(1, 2, figsize = (10, 4))\n\ncolors = sns.color_palette('hls', 10)\naxes[0].barh(diesel_mileage_top10['Name'][::-1], diesel_mileage_top10['Mileage(km\/l)'][::-1], edgecolor = 'k', color = colors)\naxes[1].barh(petrol_mileage_top10['Name'][::-1], petrol_mileage_top10['Mileage(km\/l)'][::-1], edgecolor = 'k', color = colors)\n\ni = 1\nfor idx in range(len(diesel_mileage_top10)):\n    name = diesel_mileage_top10.loc[idx, 'Name']\n    mil = diesel_mileage_top10.loc[idx, 'Mileage(km\/l)']\n    \n    \n    axes[0].annotate(\"{}. {}\".format(i, name),\n               xy = (1, name),\n               va = 'center',\n               ha = 'left',\n               color = 'white', \n                    fontsize = 9)\n    \n    axes[0].annotate(f\"{mil} km\/l\",\n                     xy = (mil+0.5, name),\n                     va = 'center',\n                     ha = 'left', \n                     color = 'gray',\n                    fontsize= 9)\n    i += 1\n\ni = 1\nfor idx in range(len(petrol_mileage_top10)):\n    name = petrol_mileage_top10.loc[idx, 'Name']\n    mil = petrol_mileage_top10.loc[idx, 'Mileage(km\/l)']\n    \n    axes[1].annotate(\"{}. {}\".format(i, name),\n               xy = (1, name),\n               va = 'center',\n               ha = 'left',\n               color = 'white',\n                fontsize = 9)\n    \n    axes[1].annotate(f\"{mil} km\/l\",\n                     xy = (mil+0.5, name),\n                     va = 'center',\n                     ha = 'left', \n                     color = 'gray',\n                    fontsize = 9)\n\n    i += 1\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    axes[0].spines[s].set_visible(False)    \n    axes[1].spines[s].set_visible(False)    \n\naxes[0].set_xticks([])    \naxes[0].set_yticks([])\naxes[1].set_xticks([])\naxes[1].set_yticks([])\n\nfig.text(0.02,1, 'Diesel vehicel mileage', fontweight = 'bold', fontsize = 14)\nfig.text(0.52,1, 'Petrol vehicel mileage', fontweight = 'bold', fontsize = 14)\n\nplt.tight_layout()\nplt.show()","4332652b":"location = train['Location'].value_counts()\n\nfig, ax = plt.subplots(figsize = (12, 4))\nax.bar(location.index, location, width = 0.5, edgecolor = 'k',\n       color = sns.light_palette('purple', n_colors = len(location) + 3)[::-1])\n# Design graph\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n\nax.grid(axis = 'y', ls ='--', lw = 0.5)\n\nax.set_xlabel('Brand', fontweight = 'bold', fontsize = 12)\nax.set_ylabel('Stocks', fontweight = 'bold', fontsize = 12)\nfig.text(0.1,1, 'Used car stocks by location',fontweight = 'bold', fontsize = 14)\nplt.show()","8d5623d8":"'''\nSubcompact < 1000cc\ncompact < 1600cc\nMid-Size Car < 2000cc\nFull Size car > 2000cc\n'''\nsize_labels = ['Subcompact', 'Compact', 'Mid-size', 'Full-size']\ntrain['Size'] = pd.cut(train['Engine(cc)'], bins=[0, 1000, 1600, 2000, 9999], right= False, labels = size_labels).astype(object)","50e050e6":"size = train['Size'].value_counts()[size_labels]\n\nfig, ax = plt.subplots()\n\nax.pie(size, labels = size_labels, autopct = '%d%%',\n       explode = [0, 0.1, 0, 0],\n       labeldistance  = 1.43, pctdistance = 0.6,\n       textprops = {'fontsize' : 10 , 'ha' : 'center', 'va' : 'center'},\n      wedgeprops = {'edgecolor' : 'black'})\n\nax.set_title('Pie chart for Vihecle size', fontsize= 14, fontweight = 'bold')\nax.legend(loc = 'lower center', ncol = 4, bbox_to_anchor = (0.6,-0.3))\nplt.show()","4a28eb00":"brand_size = train.groupby(['Brand', 'Size'])['Size'].count().unstack(fill_value = 0)\nbrand_size_ratio = brand_size.T \/ brand_size.sum(axis = 1)\nbrand_size_ratio = brand_size_ratio.T[size_labels].reindex(brand.index)[::-1]\n\nfig, ax = plt.subplots(figsize = (10, 8))\n\n# i = 0\ni = pd.Series(index = brand_size_ratio.index, data = [0 for _ in range(len(brand.index))])\nfor s in brand_size_ratio.columns:\n    names = brand_size_ratio.index\n    vals = brand_size_ratio[s]\n    ax.barh(names , vals, left = i, label = s, edgecolor = 'k', height = 0.7)\n    \n    for j in range(len(names)):\n        if vals[j] * 100 > 5: # annotation filter   \n            ax.annotate(f\"{vals[j] * 100:.1f} %\",\n                        xy = (i[j] + vals[j]\/2 , names[j]),\n                       va = 'center', ha = 'center',\n                       color = 'white',\n                       fontsize = 8)\n        \n    i += vals\n    \nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n\nax.set_xticks([])\nax.legend(loc = 'upper right', bbox_to_anchor = (1.01, 1.02), ncol = 4)\nfig.text(0.35,0.92, 'Size ratio for brand', fontsize = 14, fontweight = 'bold')\nplt.show()","2792e3d6":"new_price = train.dropna(subset = ['New_Price(Lakhs)'])\ngb_new_price = new_price.groupby(['Brand', 'Year', 'Size'])[['New_Price(Lakhs)', 'Price']].mean().dropna()\ngb_new_price['Residual car value'] = gb_new_price['Price'] \/ gb_new_price['New_Price(Lakhs)'] * 100\n\ntop5 = brand.index[:5].tolist()","7daff5ae":"size_year = gb_new_price.loc[top5].groupby(['Size', 'Year'])['Residual car value'].mean().dropna().reset_index()\n\nfig, ax = plt.subplots(figsize = (12, 4))\n\nsns.barplot(data = size_year, x = 'Size', y = 'Residual car value', hue = 'Year', ax = ax, hue_order = [2015, 2016, 2017, 2018][::-1],\n           edgecolor = 'k')\n\nfor s in ['top', 'bottom', 'right', 'left']:\n    ax.spines[s].set_visible(False)\n\n_, lg = ax.get_legend_handles_labels()\n    \nax.grid(axis = 'y', ls ='--', lw = 0.5)\n\nax.set_xlabel('')\nax.set_ylabel('')\nax.set_ylim(0, 100)\nlc, lg = ax.get_legend_handles_labels()\nax.legend(lc[::-1], lg[::-1], loc = 'upper right', bbox_to_anchor = (1.10, 1.02))\nfig.text(0.1,1, 'Residual car value by year-by-year',fontweight = 'bold', fontsize = 14)\nplt.show()","76e4b3a2":"size_model_diesel = train[train['Fuel_Type'] == 'Diesel'].groupby(['Size', 'Model'])['Model'].count()\nmodel_top5_diesel = size_model_diesel['Compact'].sort_values(ascending = False)[:5]\nsize_model_petrol = train[train['Fuel_Type'] == 'Petrol'].groupby(['Size', 'Model'])['Model'].count()\nmodel_top5_petrol = size_model_petrol['Compact'].sort_values(ascending = False)[:5]","69981656":"fig, axes = plt.subplots(1, 2)\n\naxes[0].bar(model_top5_diesel.index, model_top5_diesel)\naxes[1].bar(model_top5_petrol.index, model_top5_petrol)\n\n# annotate\n\nplt.show()","c4a54fab":"size_po_mil = train.groupby('Size')[['Power(bph)', 'Mileage(km\/l)']].mean().reindex(size_labels)\n\nfig, ax = plt.subplots()\n\nax.scatter(size_po_mil.index, size_po_mil['Power(bph)'], s = (size_po_mil['Mileage(km\/l)'] + 4)*20, c = sns.light_palette('purple', 4)[::-1])\nax.set_ylim(0, 200)","64f7f486":"# EDA","cc22f146":"I'd like to define vehicle size by engine cc.\n### Criterion\nSubcompact < 1000cc  \ncompact < 1600cc  \nMid-Size Car < 2000cc  \nFull Size car > 2000cc  \n\n","6de1cb76":"# 1. Data cleaning & transformation\nI need to preprocess features for data cleaning and transformation to facilitate analysis.\n\n- Unit standardization\n- Separating from name to brand and model\n","765c08c5":"- Except for as known as premium brand like Benz, BMW, Audi and so on, most vehicels are manual trassmission.  \n  \n- Fuel type of primium brand's vehicies have high proportion of diesel.  ","84fa1ed2":"- Most of used car have small engine size(1000~2000cc).  \n- Primium brand and Toyota have over 2000cc engine.\n- Vehicels wiht small engine have good mileage.\n\nIn used car market of India, you can easily find vehicels with good mileage and small, manual trasmission.  \nThese car are popular car brands and can be bought for under 20 Lakhs","94f4ae97":"In used car market of India, Maruti and Hyundai account for about 40% of all stock.\n- Maruti : Maruti Suzuki is subsidiary of the Japanese automotive manufacturer.\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBwgHBgkIBwgKCgkLDRYPDQwMDRsUFRAWIB0iIiAdHx8kKDQsJCYxJx8fLT0tMTU3Ojo6Iys\/RD84QzQ5OjcBCgoKDQwNGg8PGjclHyU3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3N\/\/AABEIADsAlwMBEQACEQEDEQH\/xAAcAAEAAgIDAQAAAAAAAAAAAAAABQYDBwECBAj\/xAA2EAABAwMCAwYEBAYDAAAAAAABAgMEAAURITEGElEHExRBYXEVIoGRIzKhwRZCUlOisSQzQ\/\/EABoBAQACAwEAAAAAAAAAAAAAAAABAgMEBQb\/xAAtEQACAQMDAwIFBAMAAAAAAAAAAQIDERIEITETQVFhcQUUIpGxgbLR8BUkUv\/aAAwDAQACEQMRAD8A3jQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQGATYpkeHElkv\/wBvvBzddt6jJXtcthLHK2wZmxZCyhiQy6pO4QsEj7UyQlCUVdqwZmxXwssyWXAjVZQ4Dy++NqJp8BwlHlGNN0t6iAmdGJOgAeTr+tRnHyWdGot3F\/Yyplx1LcQl9srb1WkLGU+48qm6K4SSTtyYvilvwD46Lg7Hvk6\/rUZR8lujU\/5f2OU3KCrHLNjHmPKMOp1PTemS8h0qi5i\/sRTPE8X+KpPD8r8GSlCXI6lHR9JTkgeo106exrO6Mumqi4NZVVngySu90iWe3vTp7oaYaGSfMnyAHmT0qkISm8Y8l5SUVdnks99ZncPR7zL5YjLyC5+IoAITk4yfbFKyVKTTfBaipVrKCu2VqT2kxWbq0hMR1dsUCPFYwVEHBKU+aR5+f76UtWlLjbyduHwSrKk3ks12\/l9mXWFNjTozcmI8h1lwZStByDW0pKSujj1KcqcnGas0YG71anZHh2rlDW\/nHdJfSVZ6YzmruEkrtGLOLdrnoRLjLccbRIaUtrVxIWCUe48qiz5JujEbrbghKzPihKs8qi8nBxvjWpwl4Iyj5AutuIyJ8UjITkPJ3Ow3phLwMo+TK5NitOlp2SyhwJ5yhTgBCeuOmh1qLO17E3R1VcISGEyFTI6WVnCXC6kJUfQ5x5GmLvawyXk7MzIz7im2ZDTi0DKkoWCU+4FGmhdGqb5HmxeLbxeYcd1TsKQ0tvDajzpUgoVjTXcVzZxkqsppcHq9NUpVNHS085K0k\/G1ndGC1Ny+GUXtLcaR4hUFlpCktqJLiwkqI01xzKP0qIKVLKy7IvqJ09a6N5K2Unz2XB24eZmWG4Bpdtmx486Apl0uN5Bc5SQoY2GcAZ\/qNKSdOVrPdEa2dPVU3JVItxlde3jchjaJ3wKH3tqZRHfdKTLTGWp9BBIIXj+XGo08qxdOWC2\/k3vmqXzE8ajbS4usX7evncs8ec1w\/f8AiBU5uSW5sdKYzqGVKDvy6HI65\/3WwnhUnfucqVKWq01FU2rxburpW3POLAEdmQkP20\/EEufhEtHvEoLvkNxpn71Xpf6+63M3zt\/iuMZ\/R332vY9d5s7MSPwgYEDkUt9pyR3bZ\/N+Hkq6edWnTSwxRr6bVSqS1PUnfZpXfvwQXawt1riZ1xQUeUNmLIaVhTCwASgn\/IdCQRurPo9Ek4flHitVdSuRfFPEcy9SLQm5hclpuI2sR29A68QdTjqcba4yBjNZaVGMFLHbfn0KVarm438Gx+eKz2cQ1X+C5OQlvDqI6QS0rJ2IICeXbI0GMbVxdY4XldXR3vhSrSqxVKajL1\/Hr7Gu8tMpddgZl28qCnY0kYUjyyrlO\/RaT742rj7JXjuj2e8mo1fpn2a4ftf9rNmcOJtUvg6Z8Kt0uI0+ysOtoBLiyU4yhStFnGxz9q6mlcbJxVvc8j8VjXVZxrTyfpb8djVBaTFYajW+OLi4h4hMOVaFNvJ9SpByRnTHNn0Fegyyd5O3s9jztnFbK\/6FubuQ4c4q4ncvEOU0biwnuORorC1cuwP1xn0Najj1KUFFrYzp4TldckK4lVv4Gt0F\/h5Ui5vF5bbz8Yq8M2pW+MfmOMj7+hzXyrykpWXvyYt40ksdztNtcKNwlEVZYk+Q5FntvT3XIqkKV8qsFKT\/ACjb6671EaknVebW623LOCUFj53JK6yxxNxXcrnao0lyG1Y32lOLYUkc3dr01G+VDT3qkF0qSjJ75Imbzm3FdiM4VhOwptkk8UQJUi1cixDHdqKIy+8OStGOuTr1B1xpkrTUlJU3Z9\/UpRi4yTmti7cHMuo7Q+KnlNLDThQULKSEq9j51q1mnQgjZpp9WTL9itM2RigsMUAxQDFBYYoBigKRxZ2dRuI7qu4G4vxluJSHG0oCkqKRgHceRrao6uVKONrmtV0yqO9yNk9kzD62Fi8vtqZaS2kpZGfl896yR10lf6VuUekTtuXqyWpiz2eLbGCpbMdsNgrxlXUn3rTnNzk5PubUY4pJEL\/Adk+NfEe4PJv4XTuuf+rH7bela3y9PPKx1P8ALarodG\/697eP7uWhKQkAAYA2FZzmnOKAYoBigGKA5oDjFAc0AoBQCgFAKAwzJCIkR+S6FFDLanFBIySAMnA60BVj2j8PBouF2Ryi3C4\/9X\/iVBP3ydqAsbVzhuIB8Q0hXdh1Ta1gKQkjOVDOm9AZ2pDLpUGnULKcc3KoHGds0BF3fie02mE3LkSQ405ITGR3GHCpxR0TpQGd+9w2L9Fsqy54ySyt5sBPy8qd8mgI9rjK1OXCHAxJRJmPvMstrZIyWvzqPRPQ+dAeu48SWyAiCtx8OpmzEQ2lMYWO9VnAJB02qLgl6kCgFAKAUAoBQCgFAKAUB1dQl1tbaxlKgUkehoD5lbt0lcViKWXOZcz4EpRG6A4hQPtvUAnZkRu79ocuI3FTFS9JusV1ISorP\/GGHFrUToo6pSMJSE6b5oC1dnSH5vZnfbg2hZkz23QgJHzEoYS0APXmQaAoljiRpDEZTEVKoonWRpeGiE98EKDw2\/NnIV760BsrjO8wrB2lWO4XNbjcVNufQpaGlOYJUMaJBNSChuQlvyUFiOVyVL4gDZSn5ioI+TH1Jx71AMvBEO3uNwnPEuhAu9tILcMtsl5LK8oTgnKhnClEDUetQDftWAoBQCgFAKAUAoBQCgFAKA4xQGOTGZlxnY0ltLrDyC242sZC0kYII6EUB0gQYtuiNw4EdqPGaGENNJCUp9gKAz4oBigGKAYFAc0AoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUB\/9k=)\n- Hyundai : Hyundai is Korean automotive manufacturer.\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAJcAAAA7CAMAAABBn+jeAAAAe1BMVEX\/\/\/8AMWwAKGgALmpha48AHWMAJGYAK2m2u8oABVzu8PMAGWIAIWXm6O0AFWAAAFppcZMoQnb19vgUL2vBw9COlK2bnrQzRXfL0dvc3+YACl0wQHQ4S3wAAEoAAFKqssRLWoSAiqZCU4ChqLtyfJwmPHNXYYgdNm8AEF+0GjM3AAADR0lEQVRoge2W25KbOBBAdReIizAjMDAeMOZi\/\/8XbgsBcSWMN0ltbSZVOg+YFpZ06BYChDwej8fj8Xg8Hs9\/gkoqEwSmqlX+p1V2qpKdiX7oD0v4du3NF3BL+khH7EJxWuQoV7UZxrtuWPVnrersYypqlJ9o3H9rVUXUXMxTfGXZclLNrEA9Y6Nrn9lcoozNtQ1yxphajo6shMZk3sNgGSDb4hnufJjn4FCrbKdl+hvBQj3ZniF9LdurmWgyLSdBE2eoCmXT2aiPSKPQJJoluTkhXNmjJA4NYrWWLpREGxuuV6UMISx4VB5pZeHg9Dgm496a9yHFcVkLsqkmmr4vJyYikLg+xilcqlOcgt+JRs6LUri3\/I1SaRGYnuA\/IcZLSJYZyhiTJYT7tl5CHHn12q2immPMt7IlhYgxxDDF+X7shQgV8HOT8oZ+9MJhopJEBRE9Wy96WcJS2J5lTEalEqWY\/NyratfiXgl4OEXDYmuFhU2faopjLxPiR9VBuuojL73UH4xWL7cCuPMSbshXXpnrgUwDIvRiqm5sUokX9FLCQuarF8aZ5SoXL5QJepY4Xub4La\/shde0PoHv1JrQ9MEJdVYuXTajye7llit2XopjiilBv+4l56Esy+FGP\/c6ucm7aJWRMRdkqSKOnY8Jdy8qYoCsXgiKiBvzG14wi+XVuu9dlVy6sHhcyypHgbWM13U1ntHqRd8TQHV89YJFv539ohdJLfKFl2ptIYPUFpGnRe1aKRSIo7WM3Tcvl8B0s+kFH77zwq+8DN+ex8oYU80v1hcKWsjLBOniU7e15eFeoEoz9L1XdOQlig6AXBx6nezFjsmffh5hlbQMFgp93nQDvi36ss22xn\/xwoIDsJHe8x+9IPsWiUX\/016oetOUTslTy4Xa0eHVJds9hyhpozdnrR9rDvtGr0PeI76iwTTnvHVebXS3x+1i9IBpSt24TWBO7WupaMJjL0jZ1ExDvb8JBw6bpQpYm\/ZP3zp5F7gtOAmC9UOjCoJ1QQY7tQvd\/ailj+25Ysert\/7wrZc8D3KAGR8f5DYWXWBMz+Ghmtp27tSn\/\/8fqYfxkmrgEYtTZreLL0RuX69fysjj8Xg8Ho\/H4\/H8tfwDNctD8n2eVWUAAAAASUVORK5CYII=)\n","a6c66716":"- There a few null value in some features. But in this caes, it doesn't matter to analysis used car data."}}