{"cell_type":{"69297c67":"code","440c3be3":"code","c0ffbe7f":"code","6c2e3a44":"code","f3660f7f":"code","8de6a14a":"code","822997d5":"code","5550e93d":"code","7cc298c7":"code","1f510b72":"code","2312e071":"code","4e592233":"code","42b76516":"code","6b8ba7a7":"code","090b0b17":"code","46d483dd":"markdown","f697df1e":"markdown","6b9b76c1":"markdown","c7cd2726":"markdown","481f4560":"markdown","664affe0":"markdown","dbd049eb":"markdown","e55b83f0":"markdown"},"source":{"69297c67":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames[0:10]: # only ten samples\n        print(os.path.join(dirname, filename))\n","440c3be3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nfrom tqdm import tqdm\nfrom keras.preprocessing import image","c0ffbe7f":"train_image = []\nlabels = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in tqdm (filenames):\n        img = image.load_img(os.path.join(dirname, filename), target_size = (160, 240 , 3), grayscale = False)\n        img = image.img_to_array(img)\n        img = img\/255\n        train_image.append(img)\n        # append score\n        score = int(filename[:2])\n        \n        score = score - 1 # this is because To categorical works from 0 to number of classes\n\n        labels.append(score)","6c2e3a44":"    \nX = np.array(train_image)\ny = np.array(labels)","f3660f7f":"import random\nfig = plt.figure(figsize = (20,10))\nfor i in range(4):\n    fig.add_subplot(1, 4, i + 1)\n    plt.imshow(X[random.randint(0,2400)])\n    \n    fig.add_subplot(3, 4, i + 1)\n    plt.imshow(X[random.randint(0,2400)])","8de6a14a":"print (X.shape)\nprint (y.shape)","822997d5":"from keras.utils import to_categorical\ny_cat= to_categorical(y, num_classes = 10)\n","5550e93d":"y_cat.shape","7cc298c7":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=(160,240,3)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.summary()","1f510b72":"model.compile(loss='categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])","2312e071":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y_cat, random_state=42, test_size=0.1)","4e592233":"model.fit(X_train, y_train, epochs=20, validation_data=(X_test, y_test))","42b76516":"predictions =  model.predict(X_test)","6b8ba7a7":"y_pred = []\nfor pred in predictions:\n    y_pred.append(np.argmax(pred))\ny_true = []\nfor y in y_test:\n    y_true.append(np.argmax(y))","090b0b17":"from sklearn.metrics import classification_report\nprint(classification_report(y_true, y_pred, labels=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))","46d483dd":"# Predictions","f697df1e":"### Simple classification","6b9b76c1":"# Define the model structure","c7cd2726":"# Training the model","481f4560":"#### Read all the training images, store them in a list, and finally convert that list into a numpy array. Store the score into a label list.","664affe0":"### check shapes","dbd049eb":"### Compile the model","e55b83f0":"# Training Test Split"}}