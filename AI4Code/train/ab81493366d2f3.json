{"cell_type":{"d2c2d733":"code","9ad490b1":"code","e194bbf7":"code","37bbff34":"code","a115f766":"code","4e062853":"code","65ed2f49":"code","365db68e":"code","ecfebbf5":"code","1b86ddae":"code","dc2e26d4":"code","be8a2545":"code","62da115f":"code","3650d26c":"code","d1fdec41":"code","6332e5ec":"code","bcea47aa":"code","963b7e3d":"code","6f014838":"code","4d7e2384":"code","cbb83f49":"code","00211375":"code","9a0b2bce":"code","35c8bcbf":"code","4159ec8a":"code","99244bb2":"code","9c92454c":"code","5da71299":"code","db6a2f80":"code","8b87a5bf":"code","b2a10f5b":"code","b81bdbea":"code","fc6a630e":"code","d1c1a992":"code","e427b494":"code","78aa028d":"code","cde87a81":"code","4abe0b46":"code","71b233da":"code","f269a565":"code","a985a35a":"code","f2467006":"code","229b5554":"code","a023e5c3":"code","76f2e340":"code","bba07540":"code","236daf6a":"code","11d968bb":"code","16a2899b":"code","903348ec":"code","4c495075":"code","ec8c9f5b":"code","70e70500":"code","f4290633":"code","f88c6b6c":"code","a768c167":"code","a8356982":"code","9fd4816c":"code","955a18d9":"code","829acc60":"code","2165fd76":"code","5a5f0077":"code","efaeb2c2":"code","b9fa5fa2":"code","e04bac9f":"code","84397b5a":"code","cd7c981d":"code","61ca6660":"code","71fae585":"code","5eb2becd":"code","dd903e67":"code","4930f287":"code","d7ca5f02":"code","0f7eb7cb":"code","af68b491":"code","60ea7137":"code","f92dbbc7":"code","1efc25b9":"code","cf6bd46c":"code","e2e3a8e4":"code","206cb8ec":"code","234d4ae7":"code","374e6294":"code","58e9e4e7":"code","295b22c9":"code","1da2ffd1":"code","bb7961e8":"code","28f9c704":"code","e14808dd":"code","a06ff098":"code","a6a3eb61":"code","89e8aea9":"code","bee4a2af":"code","504968a4":"code","f95f2317":"code","0c4451c7":"code","6d4a6e92":"code","f433fb93":"code","548cecf2":"code","33b6bae1":"code","599f3587":"code","e8c87c5e":"code","ca9e2c61":"code","ab37ea17":"code","012c9bfd":"code","3ca4af6e":"markdown","4d6ac66a":"markdown","91d19924":"markdown","5fd54235":"markdown","d8db3685":"markdown","3cd4950e":"markdown","21a90765":"markdown","c2ea9c0b":"markdown","6b4b56b9":"markdown","c84a5785":"markdown","1f6f8f26":"markdown","5d8eec82":"markdown","54514cc4":"markdown","1b6e1e7a":"markdown","04cd8ab2":"markdown","b6af50c8":"markdown","978c7c54":"markdown","088b11b5":"markdown","4c661ac5":"markdown","7464add5":"markdown","fb540f90":"markdown","82ba1a42":"markdown","8c348863":"markdown"},"source":{"d2c2d733":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as st","9ad490b1":"train=pd.read_csv('..\/input\/big-mart-sales-regression\/Trainsales.csv')\ntrain.head(5)","e194bbf7":"test=pd.read_csv('..\/input\/big-mart-sales-regression\/Testsales.csv')\ntest.head(5)","37bbff34":"train['Data']='train'","a115f766":"test['Data']='test'","4e062853":"test['Item_Outlet_Sales']=np.nan","65ed2f49":"# Combining train and test data","365db68e":"combined=pd.concat([train,test],ignore_index=True,sort=False)\ncombined.head()","ecfebbf5":"# Target variable: Item_outlet_sales\nsns.distplot(train['Item_Outlet_Sales'],color='hotpink')\nplt.xlabel='Sales'\nplt.ylabel('Frequency')\nplt.title('Histogram-Item_Outlet_Sales')\nplt.show()","1b86ddae":"#Inference\n#1.Sales appears to be skewed\n#2.In +ve skew-mean>median>mode and vice-versa","dc2e26d4":"#seaborn library cannot use missing values\nsns.distplot(combined['Item_Weight'].dropna(),color='hotpink')\n#Item_weight is uniform,neither +ve,-ve skewed,so we cant use mean,median or mode for missing values","be8a2545":"#Item_visibility\nsns.distplot(combined['Item_Visibility'],color='hotpink')\n#positively skewed","62da115f":"#Item_mrp\nsns.distplot(combined['Item_MRP'],color='hotpink')","3650d26c":"# It clearly shows that there is a cluster and 4 different groups are created\nplt.scatter(combined.Item_MRP,combined.Item_Outlet_Sales,color='red')","d1fdec41":"combined.Item_Type.value_counts().plot(kind='bar',color='red')","6332e5ec":"combined.Outlet_Identifier.value_counts().plot(kind='bar',color='red')","bcea47aa":"combined.Outlet_Location_Type.value_counts().plot(kind='bar',color='red')","963b7e3d":"combined.Outlet_Type.value_counts().plot(kind='bar',color='red')","6f014838":"combined.Outlet_Size.value_counts().plot(kind='bar',color='red')","4d7e2384":"#Item wt vs Sales:\nplt.scatter(combined.Item_Weight,combined.Item_Outlet_Sales,color='coral')\n#No pattern","cbb83f49":"#Item visibility vs Item Outlet sales:\nplt.scatter(combined.Item_Visibility,combined.Item_Outlet_Sales,color='coral')","00211375":"# Item MRP vs Item outlet sales:\nplt.scatter(combined.Item_MRP,combined.Item_Outlet_Sales,color='coral')\nplt.figure(figsize=[5,5]) #Modifying the dimensions","9a0b2bce":"#Bivariate: Categorical vs Numerical : Item_Fat_Content vs sales:\nsns.boxplot(x='Item_Fat_Content',y='Item_Outlet_Sales',data=combined)\n#IQR=Q3-Q1\n#min=q1-1.5*iqr\n#max=q3+1.5*iqr","35c8bcbf":"# Item type vs Item outlet sales:\nplt.figure(figsize=[10,5])\nsns.boxplot(x='Item_Type',y='Item_Outlet_Sales',data=combined)\nplt.xticks(rotation=90)","4159ec8a":"combined.isnull().sum()[combined.isnull().sum()!=0]","99244bb2":"combined.groupby('Item_Identifier')['Item_Weight'].mean()","9c92454c":"combined['Item_Weight']=combined.groupby('Item_Identifier')['Item_Weight'].transform(lambda x:x.fillna(x.mean()))","5da71299":"combined.groupby('Item_Identifier')['Item_Weight'].mean()","db6a2f80":"combined.isnull().sum()[combined.isnull().sum()!=0]","8b87a5bf":"pd.DataFrame(combined.groupby(['Outlet_Location_Type','Outlet_Type'])['Outlet_Size'].value_counts())","b2a10f5b":"a=combined[combined['Outlet_Size'].isnull()]\na","b81bdbea":"pd.DataFrame(a.groupby(['Outlet_Location_Type','Outlet_Type'])['Outlet_Identifier'].value_counts())","fc6a630e":"combined.loc[(combined.Outlet_Location_Type=='Tier 2')&(combined.Outlet_Type=='Supermarket Type1'),'Outlet_Size']='Small'","d1c1a992":"combined.loc[(combined.Outlet_Location_Type=='Tier 3')&(combined.Outlet_Type=='Grocery Store'),'Outlet_Size']='Small'","e427b494":"combined.isnull().sum()[combined.isnull().sum()!=0]","78aa028d":"combined.head()","cde87a81":"combined['Item_Fat_Content'].value_counts()","4abe0b46":"combined['Item_Fat_Content']=combined['Item_Fat_Content'].replace(['low fat'],['Low Fat'])","71b233da":"combined['Item_Fat_Content']=combined['Item_Fat_Content'].replace(['LF'],['Low Fat'])","f269a565":"combined['Item_Fat_Content']=combined['Item_Fat_Content'].replace(['reg'],['Regular'])","a985a35a":"combined['Item_Fat_Content'].value_counts()","f2467006":"combined.Item_Type.value_counts()","229b5554":"combined.Item_Type.value_counts()","a023e5c3":"combined.head()","76f2e340":"combined['Years']=2013-combined.Outlet_Establishment_Year","bba07540":"def size(x):\n    if x=='Small':\n        x=0\n    elif x=='Medium':\n        x=1\n    elif x=='High':\n        x=2\n    return x\ncombined['Outlet_Size']=combined['Outlet_Size'].apply(size)","236daf6a":"combined.Item_Visibility=combined.groupby('Item_Identifier')['Item_Visibility'].transform(lambda x:x.replace(0,x.median()))","11d968bb":"combined.head()","16a2899b":"combined['Price_Per_Unit']=combined.Item_MRP\/combined.Item_Weight","903348ec":"combined.Item_Identifier[0][:2]","4c495075":"ids=[]\nfor i in combined.Item_Identifier:\n    ids.append(i[:2])","ec8c9f5b":"combined['ID_Cat']=pd.Series(ids)","70e70500":"combined.head()","f4290633":"combined.Item_Type.value_counts()","f88c6b6c":"combined.Item_Fat_Content.value_counts()","a768c167":"combined.ID_Cat.value_counts()","a8356982":"pd.DataFrame(combined.groupby('ID_Cat')['Item_Type'].value_counts())","9fd4816c":"combined.loc[combined.ID_Cat=='NC','Item_Type']='Non Eatables'","955a18d9":"pd.DataFrame(combined.groupby('ID_Cat')['Item_Type'].value_counts())","829acc60":"combined.loc[combined.ID_Cat=='FD','Item_Type']='Food'","2165fd76":"combined.loc[combined.ID_Cat=='DR','Item_Type']='Drinks'","5a5f0077":"pd.DataFrame(combined.groupby('ID_Cat')['Item_Type'].value_counts())","efaeb2c2":"combined.loc[combined.ID_Cat=='NC','Item_Fat_Content']='Non Edible'","b9fa5fa2":"pd.DataFrame(combined.groupby('ID_Cat')['Item_Fat_Content'].value_counts())","e04bac9f":"combined.head()","84397b5a":"df=combined.copy()","cd7c981d":"df.drop(['Outlet_Establishment_Year','Item_Identifier','Outlet_Identifier'],axis=1,inplace=True)","61ca6660":"df.head()","71fae585":"df=pd.get_dummies(df,columns=['Item_Fat_Content','Item_Type','Outlet_Location_Type','Outlet_Type','ID_Cat'],drop_first=True)","5eb2becd":"df.head()","dd903e67":"df.columns","4930f287":"df.skew()","d7ca5f02":"train=df.loc[df['Data']=='train']","0f7eb7cb":"train.shape","af68b491":"test=df.loc[df['Data']=='test']\ntest.shape","60ea7137":"train=train.drop('Data',axis=1)\ntest=test.drop(['Data','Item_Outlet_Sales'],axis=1)","f92dbbc7":"train.head()","1efc25b9":"test.head()","cf6bd46c":"train.shape,test.shape","e2e3a8e4":"X=train.drop('Item_Outlet_Sales',axis=1)\ny=train['Item_Outlet_Sales']","206cb8ec":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor as KNNR\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import SGDRegressor\nimport lightgbm as lgb\nfrom tpot import TPOTRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import r2_score","234d4ae7":"X_train,X_test,y_train,y_test=train_test_split(X,y, test_size=0.3, random_state=0)\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\ntest_data = sc.transform(test.copy().values)","374e6294":"pipeline_lr=Pipeline([('scalar1',StandardScaler()),\n                     ('lr',LinearRegression())])","58e9e4e7":"pipeline_dtr=Pipeline([('scalar2',StandardScaler()),\n                     ('dtr',DecisionTreeRegressor())])","295b22c9":"pipeline_rfr=Pipeline([('scalar3',StandardScaler()),\n                     ('rfr',RandomForestRegressor())])","1da2ffd1":"pipeline_knn=Pipeline([('scalar4',StandardScaler()),\n                     ('knn',KNNR())])","bb7961e8":"pipeline_svm=Pipeline([('scalar5',StandardScaler()),\n                     ('svm',SVR())])","28f9c704":"pipeline_ada=Pipeline([('scalar6',StandardScaler()),\n                     ('ada',AdaBoostRegressor())])","e14808dd":"pipeline_gbr=Pipeline([('scalar7',StandardScaler()),\n                     ('gbr',GradientBoostingRegressor())])","a06ff098":"pipeline_sgd=Pipeline([('scalar8',StandardScaler()),\n                     ('sgd',SGDRegressor())])","a6a3eb61":"pipelines=[pipeline_lr,pipeline_dtr,pipeline_rfr,pipeline_knn,pipeline_svm,pipeline_ada,pipeline_gbr,pipeline_sgd]","89e8aea9":"best_accuracy=0.0\nbest_regressor=0\nbest_pipeline=\"\"","bee4a2af":"pipe_dict={0:'Linear Regression',1:'Decision Tree Regressor',2:'Random Forest Regressor',3:'KNN',4:'SVM',5:'ADA',6:'GBR',7:'SGD'}","504968a4":"for i in pipelines:\n    i.fit(X_train,y_train)\n    predictions=i.predict(X_test)","f95f2317":"for i,model in enumerate(pipelines):\n    print('{} Test Accuracy {}'.format(pipe_dict[i],model.score(X_test,y_test)))","0c4451c7":"for i,model in enumerate(pipelines):\n    if model.score(X_test,y_test)>best_accuracy:\n        best_accuracy=model.score(X_test,y_test)\n        best_regressor=i\n        best_pipeline=model\nprint(\"Regressor with best accuracy:{}\".format(pipe_dict[best_regressor]))","6d4a6e92":"# Create a pipeline\npipe = Pipeline([(\"regressor\",LinearRegression())])\n# Create dictionary with candidate learning algorithms and their hyperparameters\nr_param = [{\"regressor\": [DecisionTreeRegressor()],\n            \"regressor__criterion\":['mse','mae'],\n            \"regressor__max_depth\":[5,8,15,25,30,None],\n            \"regressor__min_samples_leaf\":[1,2,5,10,15,100],\n            \"regressor__max_leaf_nodes\": [2, 5,10]},\n               \n           {\"regressor\": [RandomForestRegressor()],\n            \"regressor__criterion\":['mse','mae'],\n             \"regressor__min_samples_leaf\":[1,2,5,10,15,100],\n             \"regressor__max_leaf_nodes\": [2, 5,10]},\n           \n           {'regressor':[lgb.LGBMRegressor()],\n            'regressor__n_estimators':np.arange(50,250,5),\n            'regressor__max_depth':np.arange(2,15,5),\n            'regressor__num_leaves':np.arange(2,60,5)},\n           \n            {'regressor':[XGBRegressor()],\n              \"regressor__learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n            \"regressor__max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n            \"regressor__min_child_weight\" : [ 1, 3, 5, 7 ],\n            \"regressor__gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n            \"regressor__colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]},\n           \n           {'regressor':[SGDRegressor()],\n            \"regressor__alpha\":np.arange(0.0001,0.005,10),\n            \"regressor__penalty\": ['l2']},\n           \n           {'regressor':[KNNR()],\n            \"regressor__weights\":['uniform','distance'],\n            'regressor__n_neighbors':np.arange(1,40)\n          }]\n           \n          ","f433fb93":"rsearch = RandomizedSearchCV(pipe, r_param, cv=5, verbose=0,n_jobs=-1)","548cecf2":"best_model_r = rsearch.fit(X_train,y_train)","33b6bae1":"print(best_model_r.best_estimator_)\nprint(\"The mean accuracy of the model through randomized search is :\",best_model_r.score(X_test,y_test))","599f3587":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nrfr=RandomForestRegressor(n_estimators=20,criterion='mse',max_depth=50,min_samples_split=20,min_samples_leaf=10)\nabs(cross_val_score(rfr,X,y,cv=10,scoring='neg_root_mean_squared_error').mean())","e8c87c5e":"rfr=RandomForestRegressor(n_estimators=20,criterion='mse',max_depth=50,min_samples_split=20,min_samples_leaf=10)\nmodel=rfr.fit(X_train,y_train)\npredictions=model.predict(X_test)\npredictions.shape","ca9e2c61":"output=model.predict(test)\noutput.shape","ab37ea17":"Submission_bms=pd.DataFrame(output)","012c9bfd":"Submission_bms.to_csv('Submission_bms.csv',index=False)","3ca4af6e":"### Dropping unnecessary columns:","4d6ac66a":"### Hyperparameter Tuning using RandomizedSearchCV","91d19924":"The data scientists at BigMart have collected 2013 sales data for 1559 products across 10 stores in different cities. Also, certain attributes of each product and store have been defined. The aim is to build a predictive model and find out the sales of each product at a particular store.\n\nUsing this model, BigMart will try to understand the properties of products and stores which play a key role in increasing sales.\n\nPlease note that the data may have missing values as some stores might not report all the data due to technical glitches. Hence, it will be required to treat them accordingly.","5fd54235":"1.Sales is skewed because of outliers.\n\n2.Item wt has missing values and shows no pattern in histogram.\n\n3.Item Mrp shows 4 data distributions,need to expolre more.\n\n4There are two types of prod sold-reg and low fat.\n\n5.Item visbility has lots of 0 values-need to treat this and it is skewed which means that there are prod which have higher visibilty in comp to others.\n\n6.Outlet size is mostly medium wherein the types of outlets is s1 and most of the cities where these store are tier 3 cities.\n\n7.Top 5 prod that sell in these stores are fruits and veggies,snack foods,dairy,frozen food followed by household items.","d8db3685":"### Feature Engineering:","3cd4950e":"### Splitting train and test:","21a90765":"### Model output for new input data:","c2ea9c0b":"### Problem Statement:","6b4b56b9":"### Data Visualisation:","c84a5785":"### Bivariate Analysis:","1f6f8f26":"### Reading necessary libraries","5d8eec82":"### Train data","54514cc4":"### Pipelines:","1b6e1e7a":"### Standard Scaling:","04cd8ab2":"### Accuracy with best params:","b6af50c8":"### Univariate Analysis:","978c7c54":"### Test Data","088b11b5":"### X,y split:","4c661ac5":"### Imputing null values:","7464add5":"### Creating dummies for categorical columns:","fb540f90":"### Checking for null values:","82ba1a42":"### Summary:","8c348863":"### RMSE:"}}