{"cell_type":{"fab9f506":"code","44bb2638":"code","764b7efe":"code","ae9821fd":"code","857c2340":"code","9691a255":"code","3a07edf7":"code","160d862c":"code","9e950501":"code","16edd737":"code","675df2c7":"code","14310c5d":"code","2d6ffaa0":"code","3e0f039c":"code","b4755c1e":"code","c2b59438":"code","7bf586d8":"code","6fcc116e":"code","af36852e":"code","5cb12f3d":"code","e98032a0":"code","dee7d430":"code","41f86181":"code","429b70c3":"code","87a6d97e":"code","e02baf31":"code","622d529b":"code","87e16665":"code","e2f0ea24":"code","f17c6a1e":"code","5056c105":"code","250c28ac":"code","f0016fe7":"code","453d5eb1":"code","9d69e4d8":"code","4240eb7e":"code","d7483319":"code","6c554e34":"code","dc93ae9a":"code","c5d68a6b":"code","95acdd53":"code","abc4df79":"code","62fd1cac":"code","4a5d29af":"code","94e4b8a4":"code","d6f4e9ee":"code","68a8f143":"code","29ce47a4":"code","19c5ae1b":"code","09c3e567":"code","247f4dbc":"code","a0a7a39e":"code","6d17901b":"code","ac2f4288":"code","15273de6":"code","b0e5aebb":"code","d8b62cc8":"code","ea7475ac":"code","d1570c72":"code","d6ed377e":"code","7d9d8f20":"code","51cf2b0a":"code","90a27b78":"code","e124ed40":"code","cc27cae9":"code","b906c0e6":"code","5caf0313":"code","0df346f6":"code","7f7d3984":"code","69d8272d":"code","959855f3":"code","e4ec11d6":"code","9640d872":"code","bdabf6b4":"code","536148f4":"code","25fa6955":"code","10d8b154":"code","8408dba7":"code","a0dd891e":"markdown","0d24d7ac":"markdown","ddb77f58":"markdown","2be6f606":"markdown","151666f4":"markdown","9d32b269":"markdown","9f41b6aa":"markdown","d5f328fe":"markdown","3ec5d84b":"markdown","57b2529d":"markdown","cb9a6e69":"markdown","dc0e22e6":"markdown","5b4e23e6":"markdown","ee7f151c":"markdown","075682b6":"markdown","09a74c33":"markdown","eaf21dff":"markdown","1a27a6bd":"markdown","746d4e83":"markdown","c103133a":"markdown","30e64412":"markdown","35a01ab1":"markdown","08c051bf":"markdown","2b7968e4":"markdown","821c78f3":"markdown","3eef7c1b":"markdown","71e54a46":"markdown","514552d0":"markdown","64d1e197":"markdown","86504a76":"markdown","fd5f6a04":"markdown","f5b4e106":"markdown","17a716f0":"markdown","c7797797":"markdown","9ac957da":"markdown","f7c11727":"markdown","2f8e5c89":"markdown"},"source":{"fab9f506":"# importing the needed libraries \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","44bb2638":"df = pd.read_csv('..\/input\/anz-synthesised-transaction-dataset\/anz.csv')\ndf.head()","764b7efe":"# Checking the shape of the dataframe\ndf.shape","ae9821fd":"# Getting the info of the dataframe\ndf.info()","857c2340":"# Checking how many missing values are there\ndf.isna().sum()\n","9691a255":"# Converting the date column to pandas Timestap since this is an Time Series data \ndf['date'] = pd.to_datetime(df['date'])","3a07edf7":"# Checking \ntype(df['date'][0])","160d862c":"df['date'].head(7)","9e950501":"# By using the date we acquired converting them to days of that particular date\ndf['day_name'] = df['date'].dt.day_name()\ndf['day_name'].head()","16edd737":"# Creating Month by using the date gives so can be useful for EDA \ndf['month_name'] = df['date'].dt.month_name()\ndf['month_name'].head()","675df2c7":"# Checking out available months generated from the date give\ndf['month_name'].value_counts()","14310c5d":"# Plotting the correlation heatmap \ncor_mat = df[['card_present_flag' , 'amount' , 'balance' ,'date' , 'status', \n             'bpay_biller_code' , 'account' , 'txn_description',\n             'gender' , 'age' , 'extraction']].corr()\n# Custom cmap pallete\ncmap = sns.diverging_palette(220 , 10 , as_cmap=True)\n\n# Building heatmap\nsns.heatmap(cor_mat ,vmax=.3 , center=0 , cmap=cmap , square=True , linewidths=.5 , cbar_kws={'shrink': .5})","2d6ffaa0":"# Correlation matrix in Tabular form\ncor_mat","3e0f039c":"# Checking amount transacted in October month\nfilt = (df['month_name'] == 'October')\ndf.loc[filt , 'amount']","b4755c1e":"# Average amount in october month\ndf.loc[filt , 'amount'].mean()","c2b59438":"# Maximum Value transacted in October month \ndf.loc[filt , 'amount'].max()","7bf586d8":"# Minimum Value transacted in October month \ndf.loc[filt , 'amount'].min()","6fcc116e":"# Checking amount transacted in September month\nfilt = (df['month_name'] == 'September')\ndf.loc[filt , 'amount']","af36852e":"# Average amount in september month\ndf.loc[filt , 'amount'].mean()","5cb12f3d":"# Maximum amount in september month\ndf.loc[filt , 'amount'].max()","e98032a0":"# Minimum Value transacted in september month \ndf.loc[filt , 'amount'].min()","dee7d430":"# Checking amount transacted in August month\nfilt = (df['month_name'] == 'August')\ndf.loc[filt , 'amount']","41f86181":"# Average amount in august month\ndf.loc[filt , 'amount'].mean()","429b70c3":"# Maximum amount in september month\ndf.loc[filt , 'amount'].max()","87a6d97e":"# Minimum amount in september month\ndf.loc[filt , 'amount'].min()","e02baf31":"print(df['gender'].value_counts())\nplt.figure(figsize=(8,6))\nsns.set(style=\"darkgrid\")\nsns.countplot(df['gender'])\nplt.show()","622d529b":"# Month where highest number of transaction took place\nsns.countplot(x='month_name' , data=df)","87e16665":"# Month where highest number of transaction took place based on gender\nplt.figure(figsize=(10,8))\nsns.countplot(x='month_name' ,hue='gender', data=df)\nplt.title('Month where highest number of\\n'+'transaction took place based on gender',bbox={'facecolor':'0.9', 'pad':5})","e2f0ea24":"plt.figure(figsize=(10,7))\nsns.countplot(x='day_name' , data=df)","f17c6a1e":"plt.figure(figsize=(10,7))\nax = sns.countplot(x=\"day_name\", hue=\"gender\", data=df) # for Seaborn version 0.7 and more\ntotal = float(len(df))\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:.2%}'.format(height\/total),\n            ha=\"center\") \n\nplt.title('Number of transaction made on each day of\\n'+'a week with gender comparison',bbox={'facecolor':'0.9', 'pad':5})\nplt.show()","5056c105":"plt.figure(figsize=(10,7))\nprint(df['card_present_flag'].value_counts())\nax = sns.countplot(x='card_present_flag' , data=df)\ntotal = float(len(df['card_present_flag']))\nplt.title('Number of customers made transaction\\n'+'through a physical card while making purchase\\n'+'1.0-Yes 0.0-No',bbox={'facecolor':'0.9', 'pad':5} )\nplt.show()","250c28ac":"print(df['merchant_state'].value_counts())\nplt.figure(figsize=(10,7))\nsns.countplot(df['merchant_state'])\nplt.title('Number of transaction\\n' 'done on each state',bbox={'facecolor':'0.9', 'pad':5})\nplt.show()\n","f0016fe7":"print(df['txn_description'].value_counts())\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(10,7))\nax = sns.countplot(df['txn_description'])\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:.2%}'.format(height\/total),\n            ha=\"center\") \nplt.title('Percentage of Source by where transaction took place')\nplt.ylabel('Number of Transaction')\nplt.xlabel('Transaction Description')\nplt.show()\n","453d5eb1":"# Distribution of Age of the customers.\nplt.figure(figsize=(10,7))\nsns.distplot(df['age']);\nplt.title('Distribution of customers based on age group' , )","9d69e4d8":"# Figuring out which age group has more balance.\nplt.figure(figsize=(10,7))\nsns.lineplot(x='age' , y='balance' , data=df)","4240eb7e":"# Figuring out which age group has transacted more\nplt.figure(figsize=(10,7))\nsns.lineplot(x='age' , y='amount' , data=df)","d7483319":"# Checking the mean for numerical data in dataframe\ndf.mean()","6c554e34":"# making a group with merchant_state dataframe\nmer_state_grp = df.groupby(['merchant_state'])","dc93ae9a":"# Number of Male and Female made transaction in the particular merchant state's\nprint(mer_state_grp['gender'].value_counts(normalize=True))\ngen_mer_state = mer_state_grp['gender'].value_counts()\nfig,ax = plt.subplots(figsize=(10,10)) # (height,width)\ngen_mer_state.plot.barh()\nax.set(xlabel=\"Number of transaction made\",\n      ylabel=\"State and Gender\")\nplt.title('Number of Male and Female\\n'+'made transaction in particular state',bbox={'facecolor':'0.9', 'pad':5})\n\n\n","c5d68a6b":"# Number of debit and credit transaction\nplt.figure(figsize=(10,7))\nprint(df['movement'].value_counts())\nsns.countplot(df['movement'])","95acdd53":"# Which gender made most debit and credit transaction \nplt.figure(figsize=(10,7))\nax = sns.countplot(df['movement'] , hue=df['gender'])\ntotal = float(len(df))\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:.2%}'.format(height\/total),\n            ha=\"center\") \nplt.title('Percentage of Male and Female who made\\n'+'Debit and Credit Transaction',bbox={'facecolor':'0.8', 'pad':5})","abc4df79":"# Percentage of contribution of months\npie_color = ['orange' , 'salmon', 'lightblue']\nfig,ax = plt.subplots(figsize=(7,8)) # (height,width)\n\ndf['month_name'].value_counts(sort=True).plot.pie(labeldistance=0.2 ,\n                                         colors=pie_color,\n                                        autopct='%.2f', shadow=True, startangle=140,pctdistance=0.8 , radius=1)\nplt.title(\"Percentage of contribution\\n\" + \"of months\", bbox={'facecolor':'0.8', 'pad':5})\n\n","62fd1cac":"# Percentage of contribution of gender \nplt.figure(figsize=(10,7))\ndf['gender'].value_counts(normalize=True).plot.pie(autopct='%.2f',labels=['Male',\n                                                                         'Female'], labeldistance=0.5 ,\n                                                   shadow=True, startangle=140,pctdistance=0.2 , radius=1)\nplt.title('Percentage of contribution\\n'+'of Male and Female' , bbox={'facecolor':'0.8', 'pad':5})\n","4a5d29af":"# Top 10 customers \ntop_cust = df['first_name'].value_counts(sort=True).nlargest(10)\ntop_cust","94e4b8a4":"fig,ax = plt.subplots(figsize=(10,10)) # (height,width)\ntop_cust.plot.barh(color=my_colors)\nax.set(title=\"Top 10 Customer\",\n      xlabel=\"Number of transaction made\",\n      ylabel=\"Name\")\n","d6f4e9ee":"tail_cust = df['first_name'].value_counts(sort=True).nsmallest(10)\ntail_cust\n\n#Colors for the bar of the graph\nmy_colors = ['r','b','k','y','m','c','#16A085','salmon' , '#32e0c4']","68a8f143":"fig,ax = plt.subplots(figsize=(10,10)) # (height,width)\ntail_cust.plot.barh(color=my_colors)\nax.set(title=\"Least 10 Customer\",\n      xlabel=\"Number of transaction made\",\n      ylabel=\"Name\")\n","29ce47a4":"gender_grp = df.groupby(['gender'])","19c5ae1b":"# Average transaction amount made by Male and Female \ngen_trans_amt = gender_grp['amount'].mean()\ngen_trans_amt","09c3e567":"fig,ax = plt.subplots(figsize=(10,8)) # (height,width)\ngen_trans_amt.plot.barh(color=my_colors)\nax.set(title=\"Average amount transacted by Male and Female\",\n      xlabel=\"Average amount\",\n      ylabel=\"Gender\")\n","247f4dbc":"agg_amt_state = mer_state_grp['amount'].agg(['min' , 'mean' , 'max'])","a0a7a39e":"agg_amt_state.columns","6d17901b":"agg_amt_state","ac2f4288":"# Minimum ammount transacted in each state\nfig,ax = plt.subplots(figsize=(10,8)) # (height,width)\nprint(agg_amt_state['min'])\nagg_amt_state['min'].plot.barh(color=my_colors)\nax.set(title=\"Minimum amount transacted in each state\",\n      xlabel=\"Amount\",\n      ylabel=\"Merchant State\")","15273de6":"# Maximum amount transacted in each state\nfig,ax = plt.subplots(figsize=(10,8)) # (height,width)\nprint(agg_amt_state['max'])\nagg_amt_state['max'].plot.barh(color=my_colors)\nax.set(title=\"Maximum amount transacted in each state\",\n      xlabel=\"Amount\",\n      ylabel=\"Merchant State\")","b0e5aebb":"trans_desc_grp = df.groupby(['txn_description'])","d8b62cc8":"df['txn_description'].unique()","ea7475ac":"trans_desc_grp['first_name'].value_counts().loc['SALES-POS'].nlargest(10)","d1570c72":"# Printing out Top 5 Customer \ntop_cust[:5]","d6ed377e":"michael_tran_each_state = mer_state_grp['first_name'].apply(lambda x: x.str.contains('Michael').sum())\ndiana_tran_each_state = mer_state_grp['first_name'].apply(lambda x: x.str.contains('Diana').sum())\njess_tran_each_state = mer_state_grp['first_name'].apply(lambda x: x.str.contains('Jessica').sum())\njose_tran_each_state = mer_state_grp['first_name'].apply(lambda x: x.str.contains('Joseph').sum())\njeff_tran_each_state = mer_state_grp['first_name'].apply(lambda x: x.str.contains('Jeffrey').sum())","7d9d8f20":"fig,ax = plt.subplots(figsize=(10,8))\nprint(michael_tran_each_state);\nmichael_tran_each_state.plot.barh(color=my_colors)\nax.set(\n    title='Number of transaction made by Michael in each state',\n    xlabel='Number of transaction',\n    ylabel='Merchant State'\n)","51cf2b0a":"fig,ax = plt.subplots(figsize=(10,8))\nprint(diana_tran_each_state);\ndiana_tran_each_state.plot.barh(color=my_colors)\nax.set(\n    title='Number of transaction made by Diana in each state',\n    xlabel='Number of transaction',\n    ylabel='Merchant State'\n)","90a27b78":"fig,ax = plt.subplots(figsize=(10,8))\nprint(jess_tran_each_state);\njess_tran_each_state.plot.barh(color=my_colors)\nax.set(\n    title='Number of transaction made by Jessica in each state',\n    xlabel='Number of transaction',\n    ylabel='Merchant State'\n)","e124ed40":"fig,ax = plt.subplots(figsize=(10,8))\nprint(jose_tran_each_state);\njose_tran_each_state.plot.barh(color=my_colors)\nax.set(\n    title='Number of transaction made by Joseph in each state',\n    xlabel='Number of transaction',\n    ylabel='Merchant State'\n)","cc27cae9":"fig,ax = plt.subplots(figsize=(10,8))\nprint(jeff_tran_each_state);\njeff_tran_each_state.plot.barh(color=my_colors)\nax.set(\n    title='Number of transaction made by Jeffrey in each state',\n    xlabel='Number of transaction',\n    ylabel='Merchant State'\n)","b906c0e6":"month_grp = df.groupby(['month_name'])","5caf0313":"avg_amt_tran_month = month_grp['amount'].mean()\noct_amt_tran_month = month_grp['amount'].value_counts().loc['October']","0df346f6":"fig,ax = plt.subplots(figsize=(10,8)) # (height,width)\nprint(avg_amt_tran_month);\navg_amt_tran_month.plot.barh(color=my_colors)\nax.set(\n    title='Average transaction made my customer on average each month',\n    xlabel='Average amount',\n    ylabel='Month Name '\n)","7f7d3984":"oct_amt_tran_month = month_grp['amount'].value_counts().loc['October']\noct_amt_tran_month","69d8272d":"oct_date = month_grp['date'].value_counts().loc['October']","959855f3":"day_name_grp = df.groupby(['day_name'])","e4ec11d6":"day_name_grp['amount'].mean().loc['Monday']","9640d872":"day_name_grp['amount'].mean().loc['Tuesday']","bdabf6b4":"day_name_grp['amount'].mean().loc['Wednesday']","536148f4":"day_name_grp['amount'].mean().loc['Thursday']","25fa6955":"day_name_grp['amount'].mean().loc['Friday']","10d8b154":"day_name_grp['amount'].mean().loc['Saturday']","8408dba7":"day_name_grp['amount'].mean().loc['Sunday']","a0dd891e":"### On Satuday ","0d24d7ac":"* We can clearly infer Male has made more transaction than Female on all three months","ddb77f58":"### Filtering things out of Months and analyzing","2be6f606":"### Percentage of Male and Female who made Debit and Credit Transaction :\n* **Over `48.34%` Male and `44.33%` Female have made Debit Transaction.**\n* **Over `3.85%` Male and `3.48%` Female have made Credit Transaction.**\n\n**To sum up approx 92% people have done debited transaction and 8% done credited transaction**\n","151666f4":"Things we can infer from the heatmap : \n\n\n**Considerable Correlation**\n* The amount and balance have a pretty good correlation together\n* The amount and age have a decent correlation which we can consider.\n* The balance and age have a strong correlation.\n\n**Non-Considerable Correlation**\n* The age and card_present_flag has negative correlation.\n* The amount and car-present_flag has negative correlation.\n","9d32b269":"## Average amount transacted on particualr Days","9f41b6aa":"**We can infer that there were large number of Debit transaction made than Credit transaction**\n* Debit Transaction `11160`\n* Credit Transaction `883`\n","d5f328fe":"**Jonathan has made fewer transaction of 31**","3ec5d84b":"## Percentage of Male and Female made transaction in the particular merchant state\n### Below are made taking account of Top 5 states in Australia by population\n* **At Tasmania `76.4%` Male made transaction and `23.5%` Female made transaction which shows Male contributed alot to Tasmania.**\n\n* **At Western Australia Female have made `59.8%` of transaction and Male made `40.2%` of transaction which shows Female contribution is more in WA.**\n\n* **At Queensland Female have made `51.14%` of transaction and Male made `48.96%` of transaction which shows Female contribution is more in QLD.**\n\n* **At South Australia Female have made `59.03%` of transaction and Male made `40.96%` of transaction which shows Female contribution is more in SA.**\n\n* **At New South Wales Male have made `54.82%` of transaction and Male made `45.18%` of transaction which shows Female contribution is more in NSW.**\n\n* **At Victoria Male have made `56.92%` of transaction and Male made `43.08%` of transaction which shows Female contribution is more in Victoria**\n","57b2529d":"## Number of transaction made in each state by the Top 5 Customer's","cb9a6e69":"In September Month : \n* The average amount transacted was `182.04590331422853`\n* The maximum amount transacted was `8835.98`\n* The minimum amount transacted was `0.1`","dc0e22e6":"**In the 3 months of transaction data:**\n* The average age group of customers who made the transactions are 30 years of age.\n* The average balance a customer have in their account is 14704.195 AUD.\n* The average transaction made by the customer is 187.93 AUD.","5b4e23e6":"### Top 10 Customers who made transaction ","ee7f151c":"In October Month : \n* The average amount transacted was `196.42732321996542`\n* The maximum amount transacted was `8835.98`\n* The minimum amount transacted was `0.1`","075682b6":"wa_avg_age = mer_state_grp['age'].value_counts().loc['WA'].mean()\nvic_avg_age = mer_state_grp['age'].value_counts().loc['VIC'].mean()\nqs_avg_age = mer_state_grp['age'].value_counts().loc['QLD'].mean()\nsa_avg_age = mer_state_grp['age'].value_counts().loc['SA'].mean()\nnsw_avg_age = mer_state_grp['age'].value_counts().loc['NSW'].mean()","09a74c33":"Now the object are turned to pandas Timestamp object.","eaf21dff":"### Number of transaction made by Michael in each state. ","1a27a6bd":"### Number of transaction made by Joseph in each state ","746d4e83":"* October is the month where 4087 transaction took place by all those customers which was highest comparing rest of the months.\n* August has low transaction comparing other months of 3943.","c103133a":"### On Thursday ","30e64412":"In September Month : \n* The average amount transacted was `185.12186659903654`\n* The maximum amount transacted was `8835.98`\n* The minimum amount transacted was `1.52`","35a01ab1":"### Number of transaction made by Jessica in each state","08c051bf":"### On Tuesday","2b7968e4":"### On Sunday","821c78f3":"### Least 10 Customers who made transaction","3eef7c1b":"### Number of transaction made by Diana  in each state","71e54a46":"### On Monday ","514552d0":"* There are more Male customers than Female customers","64d1e197":"**Michael has made more transaction of 746**","86504a76":"### On Wednesday ","fd5f6a04":"### Getting the Maximum , Minimum and Average amount transacted in each merchant state","f5b4e106":"### On Friday","17a716f0":"# ANZ Customer Transaction Exploratory Data Analysis ","c7797797":"Successfully converted those dates to respective day.","9ac957da":"Merchant Code and Bpay biller code columns has almost 90% missing values either dropping the columns or ignoring is the best to do. ","f7c11727":"##  How many transactions do customers make each month, on average?","2f8e5c89":"### Number of transaction made by Jeffrey in each state "}}