{"cell_type":{"7d505383":"code","ea2760bc":"code","e855ba4d":"code","eef9ad8c":"code","c5501a02":"code","f1e3c0d4":"code","cb55d4f5":"code","63050384":"code","51050aa5":"code","2fead80d":"code","fb9ec3c0":"code","9d1c7e4f":"code","d3bad3a6":"code","83108a81":"code","d59bb4c9":"code","4c6bd2b9":"code","cd7a1551":"code","0a7ed14c":"code","b075f78b":"code","23bbdf17":"code","28e173ec":"code","6c9a3b97":"code","d3f90994":"code","cbb210c5":"code","e82d79dd":"code","d8044b55":"code","0003d12f":"code","24e3816e":"code","ca9dea5a":"code","4c75f78c":"markdown","f07e3a8c":"markdown","69640931":"markdown","ff804968":"markdown","2a43c32e":"markdown","23f392a3":"markdown","3895bc0d":"markdown","6c631a36":"markdown","4e7a2647":"markdown","9102a49c":"markdown","579049c9":"markdown","fab875f9":"markdown","aa158adb":"markdown","ce06a9b2":"markdown","3e47056d":"markdown","2d586b55":"markdown","a425e3c3":"markdown","b5626c26":"markdown","d3527282":"markdown","73c77ba2":"markdown","b39e9659":"markdown","7d772ade":"markdown","a52baeed":"markdown","18748699":"markdown","8de4f918":"markdown","4e084971":"markdown","ca535026":"markdown","dda34473":"markdown"},"source":{"7d505383":"import tensorflow\nfrom tensorflow.keras.datasets.fashion_mnist import load_data\n#fashion_mnist = tf.keras.datasets.fashion_mnist\n\n(train_images, train_labels), (test_images, test_labels) = load_data()","ea2760bc":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","e855ba4d":"print(train_images.shape)\nlen(train_labels)","eef9ad8c":"train_labels","c5501a02":"test_images.shape","f1e3c0d4":"import matplotlib.pyplot as plt\nplt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()","cb55d4f5":"train_images = train_images \/ 255.0\n\ntest_images = test_images \/ 255.0","63050384":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","51050aa5":"from tensorflow import keras\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(10)\n])","2fead80d":"import tensorflow as tf\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","fb9ec3c0":"model.fit(train_images, train_labels, epochs=10)","9d1c7e4f":"test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)\n\nprint('\\nTest accuracy:', test_acc)","d3bad3a6":"from tensorflow.keras import regularizers\nmodel_l2 = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.001)),\n    keras.layers.Dense(10)\n])\nmodel_l2.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\nmodel_l2.fit(train_images, train_labels, epochs=10)","83108a81":"test_loss_l2, test_acc_l2 = model_l2.evaluate(test_images,  test_labels, verbose=2)\n\nprint('\\nTest accuracy:', test_acc_l2)","d59bb4c9":"from tensorflow.keras import layers\nmodel_dropout = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.001)),\n    layers.Dropout(0.3),\n    keras.layers.Dense(10)\n])\nmodel_dropout.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\nmodel_dropout.fit(train_images, train_labels, epochs=10)","4c6bd2b9":"test_loss_dropout, test_acc_dropout = model_dropout.evaluate(test_images,  test_labels, verbose=2)\n\nprint('\\nTest accuracy:', test_acc_dropout)","cd7a1551":"from tensorflow.keras import regularizers\nmodel_l2_dropout = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.001)),\n    layers.Dropout(0.5),\n    keras.layers.Dense(10)\n])\nmodel_l2_dropout.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\nmodel_l2_dropout.fit(train_images, train_labels, epochs=10)","0a7ed14c":"test_loss_l2_dropout, test_acc_l2_dropout = model_l2_dropout.evaluate(test_images,  test_labels, verbose=2)\n\nprint('\\nTest accuracy:', test_acc_l2_dropout)","b075f78b":"probability_model = tf.keras.Sequential([model, \n                                         tf.keras.layers.Softmax()])\npredictions = probability_model.predict(test_images)","23bbdf17":"predictions[0]","28e173ec":"test_labels[0]","6c9a3b97":"import numpy as np\ndef plot_image(i, predictions_array, true_label, img):\n  true_label, img = true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n\n  plt.imshow(img, cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n\n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  true_label = true_label[i]\n  plt.grid(False)\n  plt.xticks(range(10))\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1])\n  predicted_label = np.argmax(predictions_array)\n\n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')","d3f90994":"i = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","cbb210c5":"i = 12\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","e82d79dd":"# Plot the first X test images, their predicted labels, and the true labels.\n# Color correct predictions in blue and incorrect predictions in red.\nprint(class_names)\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()","d8044b55":"# Grab an image from the test dataset.\nimg = test_images[1]\n\nprint(img.shape)","0003d12f":"# Add the image to a batch where it's the only member.\nimg = (np.expand_dims(img,0))\n\nprint(img.shape)","24e3816e":"predictions_single = probability_model.predict(img)\n\nprint(predictions_single)","ca9dea5a":"plot_value_array(1, predictions_single[0], test_labels)\n_ = plt.xticks(range(10), class_names, rotation=45)","4c75f78c":"As can be seen above overfitting is removed to some extent from the model but at the cost of performance.","f07e3a8c":"Let's look at the 0th image, predictions, and prediction array. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percentage (out of 100) for the predicted label.","69640931":"## Build the model\n\nBuilding the neural network requires configuring the layers of the model, then compiling the model.","ff804968":"Let's plot several images with their predictions. Note that the model can be wrong even when very confident.","2a43c32e":"It turns out that the accuracy on the test dataset is a little less than the accuracy on the training dataset. This gap between training accuracy and test accuracy represents *overfitting*. Overfitting happens when a machine learning model performs worse on new, previously unseen inputs than it does on the training data. An overfitted model \"memorizes\" the noise and details in the training dataset to a point where it negatively impacts the performance of the model on the new data. For more information, see the following:\n*   [Demonstrate overfitting](https:\/\/www.tensorflow.org\/tutorials\/keras\/overfit_and_underfit#demonstrate_overfitting)\n*   [Strategies to prevent overfitting](https:\/\/www.tensorflow.org\/tutorials\/keras\/overfit_and_underfit#strategies_to_prevent_overfitting)","23f392a3":"### Feed the model\n\nTo start training,  call the `model.fit` method\u2014so called because it \"fits\" the model to the training data:","3895bc0d":"### Set up the layers\n\nThe basic building block of a neural network is the *layer*. Layers extract representations from the data fed into them. Hopefully, these representations are meaningful for the problem at hand.\n\nMost of deep learning consists of chaining together simple layers. Most layers, such as `tf.keras.layers.Dense`, have parameters that are learned during training.","6c631a36":"## Explore the data\n\nLet's explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels:","4e7a2647":"### Verify predictions\n\nWith the model trained, you can use it to make predictions about some images.","9102a49c":"Graph this to look at the full set of 10 class predictions.","579049c9":"### I hope with this you can start your journey into the world of Deep Learning","fab875f9":"##Add weight regularization\nYou may be familiar with Occam's Razor principle: given two explanations for something, the explanation most likely to be correct is the \"simplest\" one, the one that makes the least amount of assumptions. This also applies to the models learned by neural networks: given some training data and a network architecture, there are multiple sets of weights values (multiple models) that could explain the data, and simpler models are less likely to overfit than complex ones.\n\nA \"simple model\" in this context is a model where the distribution of parameter values has less entropy (or a model with fewer parameters altogether, as we saw in the section above). Thus a common way to mitigate overfitting is to put constraints on the complexity of a network by forcing its weights only to take small values, which makes the distribution of weight values more \"regular\". This is called \"weight regularization\", and it is done by adding to the loss function of the network a cost associated with having large weights. This cost comes in two flavors:\n\n* ----L1 regularization, where the cost added is proportional to the absolute value of the weights coefficients (i.e. to what is called the \"L1 norm\" of the weights).\n* ----L2 regularization, where the cost added is proportional to the square of the value of the weights coefficients (i.e. to what is called the squared \"L2 norm\" of the weights). L2 regularization is also called weight decay in the context of neural networks. Don't let the different name confuse you: weight decay is mathematically the exact same as L2 regularization.\n\nL1 regularization pushes weights towards exactly zero encouraging a sparse model. L2 regularization will penalize the weights parameters without making them sparse since the penalty goes to zero for small weights. one reason why L2 is more common.\n\nIn tf.keras, weight regularization is added by passing weight regularizer instances to layers as keyword arguments. Let's add L2 weight regularization now.\n\n","aa158adb":"### Add dropouts\nDropout is one of the most effective and most commonly used regularization techniques for neural networks, developed by Hinton and his students at the University of Toronto.\n\nThe intuitive explanation for dropout is that because individual nodes in the network cannot rely on the output of the others, each node must output features that are useful on their own.\n\nDropout, applied to a layer, consists of randomly \"dropping out\" (i.e. set to zero) a number of output features of the layer during training. Let's say a given layer would normally have returned a vector [0.2, 0.5, 1.3, 0.8, 1.1] for a given input sample during training; after applying dropout, this vector will have a few zero entries distributed at random, e.g. [0, 0.5, 1.3, 0, 1.1].\n\nThe \"dropout rate\" is the fraction of the features that are being zeroed-out; it is usually set between 0.2 and 0.5. At test time, no units are dropped out, and instead the layer's output values are scaled down by a factor equal to the dropout rate, so as to balance for the fact that more units are active than at training time.\n\nIn tf.keras you can introduce dropout in a network via the Dropout layer, which gets applied to the output of layer right before.\n\nLet's add two Dropout layers in our network to see how well they do at reducing overfitting:\n\n","ce06a9b2":"This guide uses the [Fashion MNIST](https:\/\/github.com\/zalandoresearch\/fashion-mnist) dataset which contains 70,000 grayscale images in 10 categories. The images show individual articles of clothing at low resolution (28 by 28 pixels), as seen here:\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/tensorflow.org\/images\/fashion-mnist-sprite.png\"\n         alt=\"Fashion MNIST sprite\"  width=\"600\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 1.<\/b> <a href=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\">Fashion-MNIST samples<\/a> (by Zalando, MIT License).<br\/>&nbsp;\n  <\/td><\/tr>\n<\/table>\n\nFashion MNIST is intended as a drop-in replacement for the classic [MNIST](http:\/\/yann.lecun.com\/exdb\/mnist\/) dataset\u2014often used as the \"Hello, World\" of machine learning programs for computer vision. The MNIST dataset contains images of handwritten digits (0, 1, 2, etc.) in a format identical to that of the articles of clothing you'll use here.\n\nThis guide uses Fashion MNIST for variety, and because it's a slightly more challenging problem than regular MNIST. Both datasets are relatively small and are used to verify that an algorithm works as expected. They're good starting points to test and debug code.\n\nHere, 60,000 images are used to train the network and 10,000 images to evaluate how accurately the network learned to classify images. You can access the Fashion MNIST directly from TensorFlow. Import and load the Fashion MNIST data directly from TensorFlow:","3e47056d":"## Preprocess the data\n\nThe data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:","2d586b55":"### Make predictions\n\nWith the model trained, you can use it to make predictions about some images.\nThe model's linear outputs, [logits](https:\/\/developers.google.com\/machine-learning\/glossary#logits). Attach a softmax layer to convert the logits to probabilities, which are easier to interpret. ","a425e3c3":"Here, the model has predicted the label for each image in the testing set. Let's take a look at the first prediction:","b5626c26":"To verify that the data is in the correct format and that you're ready to build and train the network, let's display the first 25 images from the *training set* and display the class name below each image.","d3527282":"### Applying L2 regularization","73c77ba2":"We applied dropouts on the single layer of 128 nodes by making the output of 30% nodes as zeroes, we were able to reduce overfitting to more extent than l2 regularization","b39e9659":"Loading the dataset returns four NumPy arrays:\n\n* The `train_images` and `train_labels` arrays are the *training set*\u2014the data the model uses to learn.\n* The model is tested against the *test set*, the `test_images`, and `test_labels` arrays.\n\nThe images are 28x28 NumPy arrays, with pixel values ranging from 0 to 255. The *labels* are an array of integers, ranging from 0 to 9. These correspond to the *class* of clothing the image represents:\n\n<table>\n  <tr>\n    <th>Label<\/th>\n    <th>Class<\/th>\n  <\/tr>\n  <tr>\n    <td>0<\/td>\n    <td>T-shirt\/top<\/td>\n  <\/tr>\n  <tr>\n    <td>1<\/td>\n    <td>Trouser<\/td>\n  <\/tr>\n    <tr>\n    <td>2<\/td>\n    <td>Pullover<\/td>\n  <\/tr>\n    <tr>\n    <td>3<\/td>\n    <td>Dress<\/td>\n  <\/tr>\n    <tr>\n    <td>4<\/td>\n    <td>Coat<\/td>\n  <\/tr>\n    <tr>\n    <td>5<\/td>\n    <td>Sandal<\/td>\n  <\/tr>\n    <tr>\n    <td>6<\/td>\n    <td>Shirt<\/td>\n  <\/tr>\n    <tr>\n    <td>7<\/td>\n    <td>Sneaker<\/td>\n  <\/tr>\n    <tr>\n    <td>8<\/td>\n    <td>Bag<\/td>\n  <\/tr>\n    <tr>\n    <td>9<\/td>\n    <td>Ankle boot<\/td>\n  <\/tr>\n<\/table>\n\nEach image is mapped to a single label. Since the *class names* are not included with the dataset, store them here to use later when plotting the images:","7d772ade":"### Combined L2 + dropout","a52baeed":"## Use the trained model\n\nFinally, use the trained model to make a prediction about a single image.","18748699":"## Train the model\n\nTraining the neural network model requires the following steps:\n\n1. Feed the training data to the model. In this example, the training data is in the `train_images` and `train_labels` arrays.\n2. The model learns to associate images and labels.\n3. You ask the model to make predictions about a test set\u2014in this example, the `test_images` array.\n4. Verify that the predictions match the labels from the `test_labels` array.\n","8de4f918":"## Use the trained model\n\nFinally, use the trained model to make a prediction about a single image.","4e084971":"**The** first layer in this network, `tf.keras.layers.Flatten`, transforms the format of the images from a two-dimensional array (of 28 by 28 pixels) to a one-dimensional array (of 28 * 28 = 784 pixels). Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data.\n\nAfter the pixels are flattened, the network consists of a sequence of two `tf.keras.layers.Dense` layers. These are densely connected, or fully connected, neural layers. The first `Dense` layer has 128 nodes (or neurons). The second (and last) layer returns a logits array with length of 10. Each node contains a score that indicates the current image belongs to one of the 10 classes.\n\n### Compile the model\n\nBefore the model is ready for training, it needs a few more settings. These are added during the model's *compile* step:\n\n* *Loss function* \u2014This measures how accurate the model is during training. You want to minimize this function to \"steer\" the model in the right direction.\n* *Optimizer* \u2014This is how the model is updated based on the data it sees and its loss function.\n* *Metrics* \u2014Used to monitor the training and testing steps. The following example uses *accuracy*, the fraction of the images that are correctly classified.","ca535026":"### Evaluate accuracy\n\nNext, compare how the model performs on the test dataset:","dda34473":"Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, divide the values by 255. It's important that the *training set* and the *testing set* be preprocessed in the same way:"}}