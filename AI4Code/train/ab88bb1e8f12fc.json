{"cell_type":{"ed927214":"code","f4175006":"code","53821eb5":"code","8e588544":"code","2086c101":"code","f6ee6c1c":"code","09aa13c7":"code","e865b9dd":"code","0e5f8309":"code","3cd88f2b":"code","a8ccc802":"code","4b4f4be4":"code","fbeb14d0":"code","92774a5a":"code","e8f3e05a":"code","e6d48828":"code","9be1330a":"code","ab65e880":"code","c9a5d195":"code","eba4443b":"code","9b84850a":"code","906ba1e1":"code","5c89857a":"code","64cc5821":"code","764cf307":"code","afa8eb25":"code","2cae10b9":"code","7e0e8a99":"markdown","18d68913":"markdown","b8dc3a29":"markdown","52cb9484":"markdown","8ae08d85":"markdown","c0f66172":"markdown","56831ea3":"markdown"},"source":{"ed927214":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f4175006":"# tuble\n\ndef tuble_ex():\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","53821eb5":"# scope\n\nx = 2 # global, main body\ndef f():\n    x = 3 # local, fonk. i\u00e7inde\n    return x\n\nprint(x)  # X=2","8e588544":"print(f()) # x=2","2086c101":"x = 5\ndef f():\n    y = 2*x\n    return y\nprint(f())   # no local, so uses global","f6ee6c1c":"# built-in\nimport builtins\ndir(builtins)","09aa13c7":"# nested function\ndef square():\n    def add():\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\n\nprint(square())","e865b9dd":"# default arguments:\n\ndef f(a, b=1, c=2):\n    y = a+b+c\n    return y\nprint(f(5))\n\n# 5+1+2","0e5f8309":"# flexible args-1\ndef f(*args):\n    for i in args:\n        print(i)\n        \nf(1)","3cd88f2b":"# flexible args-2,  for lists\ndef f(*args):\n    for i in args:\n        print(i)\n        \nf(1,2,3,4)","a8ccc802":"# flexible args-3, for dictionary (kwargs)\ndef f(**kwargs):\n    for k, v in kwargs.items():\n        print(\"key is:\", k, \", values is: \", v)\n        \nf(country=\"spain\", capital=\"madrid\", population=1234)","4b4f4be4":"# long way - write a fuction:\n#karesini alan fonk.\ndef square(x):\n    return x**2\nprint(square(5))","fbeb14d0":"# short way- lambda func:\n\nsquare = lambda x: x**2\nprint(square(4))","92774a5a":"tot = lambda x,y,z: x+y+z\nprint(tot(1,2,3))","e8f3e05a":"# for lists:\n\nmlist = [1,2,3]\ny = map(lambda x: x**2, mlist)\nprint(list(y))","e6d48828":"#example\nname = \"samuel\"\nit = iter(name)\nprint(*it)","9be1330a":"#example2\nname2 = \"samuel\"\nit2 = iter(name2)\nprint(next(it2))\n#remaining:","ab65e880":"#remaining:\nprint(*it2)","c9a5d195":"# zip\nlista = [1,2,3]\nlistb = [4,5,6]\n\n#merge:\nz = zip(lista, listb) # z objesi yarat\u0131ld\u0131. listeye \u00e7evir:\nz_list = list(z)\nprint(z_list)","eba4443b":"# unzip:\nun_z = zip(*z_list) #un_z objedir, listeye \u00e7evir:\nun_lista,un_listb = list(un_z)  #returns tuple\n\nprint(un_lista)\nprint(un_listb)","9b84850a":"print(type(un_listb)) #tuple dir. L\u0130steye \u00e7evirmek gerekir:\nprint(type(list(un_listb)))","906ba1e1":"# list, comprehension\n\nn1 = [1,2,3]  #list, iterable object\nn2 = [i+1 for i in n1]  #i+1: list comprehension; for i in n1: for loop\n\n# 1+1, 2+1, 3+1\nprint(n2)\n","5c89857a":"# conditional, iterab\u015fe\n\nn1 = [5,10,15]\n#n1 elemanlar\u0131na bak(for i in n1), \n#de\u011fer=10 ise karesini al, \n#de\u011fer<7 ise de\u011fer-5, \n#harici ise de\u011fer+5\n# 5-5, 10*10, 15+5\nn2 = [i**2 if i==10 else i-5 if i<7 else i+5 for i in n1]\nprint(n2)","64cc5821":"# pokempon database ine geri d\u00f6nelim\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n#ilk 10 kayd\u0131 inceleyelim, genel bak\u0131\u015f:\ndatapok = pd.read_csv(\"..\/input\/pokemon-challenge\/pokemon.csv\")\n","764cf307":"datapok.head(4)","afa8eb25":"# Speed leri, ort.Speed(threshold) e g\u00f6re s\u0131n\u0131fland\u0131r,low veya high\n# ort = toplam \/ say\u0131\nthold = sum(datapok.Speed) \/ len(datapok.Speed)\nprint(thold)","2cae10b9":"# yeni kolon(feature) a\u00e7\u0131p, s\u0131n\u0131f\u0131n\u0131 doldur:\n#datapok Speed elemanlar\u0131na bak: for i in datapok.Speed\n# de\u011fer>ort ise high, harici ise low\n# if i>thold high, else high\n\ndatapok[\"speed_level\"] = [\"high\" if i>thold else \"low\" for i in datapok.Speed]\n\n#istedi\u011fin kolonlar\u0131 listele, ilk 8 kay\u0131t gelsin:\ndatapok.loc[:8, [\"speed_level\", \"Speed\"]]","7e0e8a99":"**LIST COMPREHENSION** \n\nloop yazmak yerine","18d68913":"**LAMBDA Function**\n\nfaster way of writing function","b8dc3a29":"*\u00d6DEV2 has finished.*","52cb9484":"**DEFAULT and FLEXIBLE ARGUMENTS:**","8ae08d85":"NESTED FUNCTION\n\n(i\u00e7 i\u00e7e fonksiyonlar)","c0f66172":"2. PYTHON DATA SCIENCE TOOLBOX","56831ea3":"**ITERATORS**"}}