{"cell_type":{"5e39a730":"code","9eceb13b":"code","c8e94f7b":"code","1be62355":"code","7099001d":"code","719710f6":"code","076fafd6":"code","657abdbe":"code","231c02df":"code","3d5c7441":"code","85af1cfc":"code","39144236":"code","ad1ef19b":"code","636651f6":"code","d85f7e53":"code","02c3fa41":"code","dc94f987":"code","bc361350":"code","24a179a2":"code","fb83904a":"code","662517bb":"code","1926a16d":"code","c4c68f4e":"code","7fcc4e6e":"code","d7ce7f95":"code","67755885":"code","e80e7d14":"code","0ee879e4":"code","70a352a4":"code","fe02c292":"code","06b4f945":"code","a26e976f":"code","6c1c64de":"code","4de62315":"code","762c4bc6":"code","b56d35fe":"code","cd35b23e":"code","aa7c0c93":"code","40c83656":"code","5be5d7fd":"code","fb68e889":"code","64cacccd":"markdown","86a86fa4":"markdown","9f756536":"markdown","f7b27d70":"markdown","3b7e4b89":"markdown","14b09ded":"markdown","3d9d01a2":"markdown","dcd465e9":"markdown","30db9967":"markdown","a7586a09":"markdown","b96186ff":"markdown","9c4fc977":"markdown","ff788b77":"markdown"},"source":{"5e39a730":"# The following code expresses the main libraries that we will use on this notebook\nimport numpy as np \nimport pandas as pd \nimport sklearn as sk\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom matplotlib import rc\nfrom matplotlib.colors import ListedColormap\nfrom sklearn import preprocessing\n\n%matplotlib inline","9eceb13b":"pd.set_option('display.max_columns', None)","c8e94f7b":"# In the code below we are creating a dataframe from the pokemon database\n\ndf_pokemon = pd.read_csv(\"..\/input\/pokemon\/pokemon_alopez247.csv\")","1be62355":"# Dataframe dimension\ndf_pokemon.shape\n# 721 Rows and 23 Columns","7099001d":"# Columns of dataframe\ndf_pokemon.columns","719710f6":"# Columns Types\ndf_pokemon.dtypes","076fafd6":"# Viewing the 3 first rows\ndf_pokemon.head(3)","657abdbe":"# Viewing the 3 last rows\ndf_pokemon.tail(3)","231c02df":"# The column 'Number' on the dataframe is like the pokemon ID, so we can consider it the index of the dataframe\ndf_pokemon.set_index(['Number'], \n                     inplace = True)","3d5c7441":"# Verifying if exists NAN values on dataset\nnull_columns = df_pokemon.columns[df_pokemon.isnull().any()]\ndf_pokemon[null_columns].isnull().sum()","85af1cfc":"# Percentage of Null\/ Nan Values per column in dataframe\ndf_pokemon[null_columns].isnull().sum() * 100\/ len(df_pokemon)","39144236":"# Creating a HeatMap plot to show the null of all values in the entire dataframe\nplt.figure(figsize=(20,10))\n\npl = sns.heatmap(df_pokemon.isnull(), \n                 cmap = 'Greens', \n                 cbar = False)\npl.set_xticklabels(pl.get_xticklabels(), \n                   rotation = 30)\nplt.show()\n","ad1ef19b":"# Veifying types of data in column Type_2\ndf_pokemon['Type_2'].value_counts(dropna = False)","636651f6":"# Veifying types of data in column Pr_Male\ndf_pokemon['Pr_Male'].value_counts(dropna = False)","d85f7e53":"# Veifying types of data in column Egg_Group_2\ndf_pokemon['Egg_Group_2'].value_counts(dropna = False)","02c3fa41":"# According to website bulbapedia (https:\/\/bulbapedia.bulbagarden.net\/wiki\/Egg_Group):\n## Egg Groups are categories which determine which Pok\u00e9mon are able to interbreed. \n## The concept was introduced in Generation II, along with breeding. Similar to types, \n## a Pok\u00e9mon may belong to either one or two Egg Groups\n\n# Replacing null values\ndf_pokemon['Egg_Group_2'].fillna('Undiscovered', inplace = True)","dc94f987":"# According to website bulbapedia (https:\/\/bulbapedia.bulbagarden.net\/wiki\/%3F%3F%3F_(type):\n## The ??? type is a type that exists only in Generations II, III, and IV. \n## It was removed in the Generation V games and has not returned. \n\n# Replacing null values\ndf_pokemon['Type_2'].fillna(\"???\" , inplace = True)","bc361350":"# Checking more about the column 'Pr_Male'\n# Pr_Male = Probability of a pokemon being male\ndf_pokemon[df_pokemon['Pr_Male'].isnull()].loc[:, ['Name', 'Type_1', 'Type_2', 'isLegendary', 'hasGender']]","24a179a2":"# The pokemons that hasn't gender are the same pokemons who doesn't have probability of being male\ndf_pokemon[df_pokemon['hasGender'] == False & \\\n           df_pokemon['Pr_Male'].isnull()] \\\n                .loc[:, ['Name', 'Type_1', 'Type_2', 'isLegendary', 'hasGender']]\n","fb83904a":"df_pokemon.columns","662517bb":"# As the variable 'Pr_Male' is totally dependent on the variable 'Has_Gender', \n# and until that moment there is no reason to consider it in the analysis, \n# that the variable will be disregarded in a new dataframe.\n\n# Creating the new Dataframe\ndf_pokemon_an_01 = df_pokemon.drop(['Pr_Male'], \n                                      axis = 1)\ndf_pokemon_an_01.head(3)","1926a16d":"df_pokemon_eda = df_pokemon_an_01.drop(['Name'], \n                                       axis = 1)","c4c68f4e":"# Show the main dataframe statiscs \ndf_pokemon_eda.describe()\n\n# The variables 'Name' and describes only categorical pokemon characteristics, \n# as well as the number of football player's shirts","7fcc4e6e":"# The previous code showed the boxplot of all variables \/ columns.\nplt.figure(figsize = (20,15))\nsns.boxplot(data = df_pokemon_eda)\n\nplt.show()\n","d7ce7f95":"# Generating a table with the correlation of all variables\ndf_pokemon_eda[['Total', 'HP', 'Attack', 'Defense', 'Sp_Atk', 'Sp_Def', \\\n               'Speed', 'Generation', 'Height_m', 'Weight_kg', 'Catch_Rate']].corr()","67755885":"# As we saw earlier, the correlation between some variables is significantly weak, however, \n# there are some columns with a relatively high correlation, such as 'Total' and 'Attack.'\nsns.lmplot(x = 'Attack', \n           y = 'Total',\n           data = df_pokemon_eda)\nplt.show()","e80e7d14":"# Detecting the outliers\n# In this section, we will create a function that returns the main data related to outliers\n\ndef fn_validate_catching_outliers_values(p_df_dataframe, p_column):\n    \"\"\"\n    Description:\n        Validates information related to the \n        dataframe and its column, before proceeding \n        with the function 'fn_catching_outliers'.\n\n    Keyword arguments:\n        p_df_dataframe -- the dataframe \n        p_column -- the dataframe column\n\n    Return:\n        None\n    \n    Exception:\n        Validates that the dataframe is empty;\n        Validates whether the column exists on the dataframe;\n        Validates whether the column is a numeric type\n    \"\"\"\n    if p_df_dataframe.empty:\n        raise Exception(\"The dataframe is empty\")\n    \n    if p_column not in p_df_dataframe.columns:\n        raise Exception(\"The column does not exist in the dataframe\")\n    \n    if not np.issubdtype(p_df_dataframe[p_column].dtype, np.number):\n        raise Exception(\"The informed column doesn't have the numeric type.\")\n    \n\ndef fn_catching_outliers(p_df_dataframe, p_column):\n    \"\"\"\n    Description:\n        Function that locates outliers in an informed dataframe.\n\n    Keyword arguments:\n        p_df_dataframe -- the dataframe \n        p_column -- the dataframe column\n\n    Return:\n        df_with_outliers -- Dataframe with the outliers located\n        df_without_outliers -- Dataframe without the outilers\n    \n    Exception:\n        None\n    \"\"\"\n    # Check if the information passed is valid.\n    fn_validate_catching_outliers_values(p_df_dataframe, p_column)\n    \n    # Calculate the first and the third qurtile of the dataframe    \n    quartile_1, quartile_3 = np.percentile(p_df_dataframe[p_column],[25,75])\n    \n    # Calculate the interquartile value\n    iqr = quartile_1 - quartile_3\n    \n    # Generating the fence hig and low values\n    fence_high = quartile_3 + (1.5 * iqr)\n    fence_low = quartile_1 - (1.5 * iqr)\n    \n    # And Finally we are generating two dataframes, onde with the outliers values and the second with the values within values\n    df_without_outliers = p_df_dataframe[(p_df_dataframe[p_column] < fence_low) & (p_df_dataframe[p_column] > fence_high)]\n    df_with_outliers = p_df_dataframe[~p_df_dataframe.isin(df_without_outliers)].dropna()\n    \n    if df_with_outliers.empty:\n        print(\"No outliers were detected.\")\n    \n    return df_with_outliers, df_without_outliers\n    \n ","0ee879e4":"df_pokemon_out, _ = fn_catching_outliers(df_pokemon_eda, 'Attack')\ndf_pokemon_out.head(3)","70a352a4":"# To provide greater accuracy to the model, it will be necessary to apply some statistical methods to \n# the categorical variables, such as 'dummies', 'label enconding', etc ...\n\n# Identify the amount of unique data per non-numeric column.\ndf_pokemon_eda[df_pokemon_eda.select_dtypes(exclude=np.number).columns].nunique()","fe02c292":"# Given that categorical variables \/ columns have more than 10 different types of values, \n# it will be necessary to apply the scikit-leran method \/ function, label encondig.\n\nencoder = preprocessing.LabelEncoder()\n\ncategorical_columns = ['Type_1', 'Type_2', 'Color', 'Egg_Group_1', 'Egg_Group_2', 'Body_Style']\nfor col in categorical_columns:\n    df_pokemon_lb_encoding = encoder.fit_transform(df_pokemon_eda[col])\n    df_pokemon_eda['encoder_' + col] = pd.DataFrame(df_pokemon_lb_encoding, columns=['encoder_' + col])","06b4f945":"df_pokemon_eda.head(3)","a26e976f":"# An interesting point to highlight is Catch_Rate, which corresponds to the chances of capturing a pokemon, \n# which varies from 3 to 245 and it is often not clear whether the pokemon is really \n# difficult or not to be captured. For this reason, it will be necessary to convert this data into a percentage\ndf_pokemon_eda['Catch_Rate'] = (df_pokemon_eda['Catch_Rate'] *100)\/ 245","6c1c64de":"# Generating a table with the correlation of all variables\ndf_pokemon_correlation = df_pokemon_eda[df_pokemon_eda.select_dtypes(exclude=['object']).columns].corr()","4de62315":"df_pokemon_correlation.columns","762c4bc6":"df_pokemon_correlation","b56d35fe":"# The table above contains information on the variables that most correlate.\n# Next, a heatmap will be created so that we can see this correlation in a more interesting way.\n\nmask_pk = np.zeros_like(df_pokemon_correlation, \n                     dtype = np.bool)\n\nmask_pk[np.triu_indices_from(mask_pk)] = True\n\nplt.figure(figsize = (22, 18))\n\nheat_map = sns.heatmap(df_pokemon_correlation, \n                       vmin = -1, \n                       cmap = 'coolwarm',\n                       annot = True,\n                       mask = mask_pk)\n\nheat_map.set_xticklabels(heat_map.get_xticklabels(), \n                         rotation = 35)\nplt.show()","cd35b23e":"# Creating a regression plot to analyze the Height_m and Weight_km variables\nsns.lmplot(x = \"Height_m\", \n            y = \"Weight_kg\", \n            data = df_pokemon_eda)\n\nplt.show()","aa7c0c93":"df_pokemon_top_10_total = df_pokemon.sort_values(by = 'Total',\n                                                 ascending=False).head(10)\n\ndf_pokemon_top_10_total.set_index(['Name'], \n                                  inplace = True)\n\ndf_pokemon_top_10_total.drop(columns = ['Type_1', 'Type_2', 'Generation', 'isLegendary', 'Color', 'hasGender', 'Pr_Male', \n                                        'Egg_Group_1', 'Egg_Group_2', 'hasMegaEvolution', 'Height_m', 'Weight_kg', 'Catch_Rate', \n                                        'Body_Style', 'HP', 'Speed'], \n                             inplace = True)\ndf_pokemon_top_10_total.transpose()","40c83656":"# With the table above, it is already possible to answer which are the \n# 10 most powerful pokemons according to the sum of their stats.\n# Below is a code that gives us the same view of the table, but using bar graphs.\n\n# List with thw pokwmons names\nlst_pokemons_names = df_pokemon_top_10_total.index.values.tolist()\n\n# Array for each studied stats\nnp_top10_pokemons_attack = np.array(df_pokemon_top_10_total['Attack'].values.tolist())\nnp_top10_pokemons_defense = np.array(df_pokemon_top_10_total['Defense'].values.tolist())\nnp_top10_pokemons_sp_atk = np.array(df_pokemon_top_10_total['Sp_Atk'].values.tolist())\nnp_top10_pokemons_sp_def = np.array(df_pokemon_top_10_total['Sp_Def'].values.tolist())\n\n# Array Sums\nsnum = np_top10_pokemons_attack + np_top10_pokemons_defense + np_top10_pokemons_sp_atk + np_top10_pokemons_sp_def\n\n# Normalizing the data of arrays\nnp_top10_pokemons_attack = np_top10_pokemons_attack \/ snum * 100.\nnp_top10_pokemons_defense = np_top10_pokemons_defense \/ snum * 100.\nnp_top10_pokemons_sp_atk = np_top10_pokemons_sp_atk \/ snum * 100.\nnp_top10_pokemons_sp_def = np_top10_pokemons_sp_def \/ snum * 100.\n\n# Figure \/ graph size\nplt.figure(figsize=(20,20))\nplt.title(\"Distribution of the stats of the 10 most powerful pokemons\", \n          fontdict = {'fontsize' : 36})\n\n# Setting fonts and sizes\nfont = {'weight' : 'bold',\n        'size'   : 20}\nplt.rc('font', **font)\n\n# Generating the bar graph of each stats\nplt.bar(lst_pokemons_names, \n        np_top10_pokemons_attack, \n        label='Attack')\n\nplt.bar(lst_pokemons_names, \n        np_top10_pokemons_defense,\n        bottom = np_top10_pokemons_attack,\n        label = 'Defense')\n\nplt.bar(lst_pokemons_names, \n        np_top10_pokemons_sp_atk ,\n        bottom = np_top10_pokemons_attack + np_top10_pokemons_defense, \n        label = 'Special Attack')\n\nplt.bar(lst_pokemons_names, \n        np_top10_pokemons_sp_def ,\n        bottom = np_top10_pokemons_attack + np_top10_pokemons_defense + np_top10_pokemons_sp_atk, \n        label = 'Special Defense')\n\n# Adding a text with the percentage of each status in relation to the total amount\nfor xpos, ypos, yval in zip(lst_pokemons_names, np_top10_pokemons_attack\/2, np_top10_pokemons_attack):\n    plt.text(xpos, ypos, \"%.1f\"%yval + \"%\", ha=\"center\", va=\"center\")\n\nfor xpos, ypos, yval in zip(lst_pokemons_names, \n                            np_top10_pokemons_attack + np_top10_pokemons_defense\/2, \n                            np_top10_pokemons_defense):\n    plt.text(xpos, ypos, \"%.1f\"%yval + \"%\", ha=\"center\", va=\"center\")\n    \nfor xpos, ypos, yval in zip(lst_pokemons_names, \n                            np_top10_pokemons_sp_atk + np_top10_pokemons_attack + np_top10_pokemons_defense\/2, \n                            np_top10_pokemons_sp_atk):\n    plt.text(xpos, ypos, \"%.1f\"%yval + \"%\", ha=\"center\", va=\"center\")\n\nfor xpos, ypos, yval in zip(lst_pokemons_names, \n                            np_top10_pokemons_sp_def + np_top10_pokemons_sp_atk + np_top10_pokemons_attack + np_top10_pokemons_defense\/2, \n                            np_top10_pokemons_sp_def):\n    plt.text(xpos, ypos, \"%.1f\"%yval + \"%\", ha=\"center\", va=\"center\")\n\n\nplt.ylim(0,110)\nplt.legend(bbox_to_anchor = (1.01,0.5), \n           loc = 'center left')\nplt.show()\n","5be5d7fd":"# Finding my favorite Pok\u00e9mon\ndf_pokemon_favorite = df_pokemon.set_index(['Name']).loc[['Charizard'], ['Total', 'HP', 'Attack', 'Defense', \n                                                                         'Sp_Atk', 'Sp_Def', 'Speed', 'Catch_Rate']] \n\ndf_pokemon_favorite['Catch_Rate'] = (df_pokemon_favorite['Catch_Rate']*100) \/ 245\n\ndf_pokemon_favorite","fb68e889":"# Next we will compare the attributes of my favorite pokemon with the average of all other pokemon.\n\nbar_width = 0.25\nbars_pokemon = df_pokemon_favorite.values.tolist()[0]\nbars_mean_pokemon = np.array(df_pokemon_eda.loc[:, ['Total', 'HP', 'Attack', \n                                                    'Defense', 'Sp_Atk', 'Sp_Def', \n                                                    'Speed', 'Catch_Rate']].mean().values.tolist())\n\nstr_pokemon_favorite_name = ''.join(df_pokemon_favorite.index.format())\n\nr1 = np.arange(len(bars_pokemon))\nr2 = [x + bar_width for x in r1]\n\nplt.figure(figsize=(20,20))\nplt.title(\"Comparison of the stats of the favorite pokemon with the average of all pokemon.\", \n          fontdict = {'fontsize' : 36})\n\nplt.bar(r1, bars_pokemon,  color = 'red', width = bar_width, edgecolor = 'white', label = str_pokemon_favorite_name)\n\nplt.bar(r2, bars_mean_pokemon,  color = '#557f2d', width = bar_width, edgecolor = 'white', label = 'Mean of All Pokemons')\n\nplt.xticks([r + bar_width for r in range(len(bars_pokemon))], df_pokemon_favorite.columns.values.tolist())\n\nplt.legend(bbox_to_anchor = (1.01,0.5), \n           loc = 'center left')\nplt.show()","64cacccd":"<h2>Dataframe Operations\/ Analysis<\/h2>","86a86fa4":"<p>First of all I must emphasize that I like dragons a lot and since I was a child I've always loved pokemons with this style, so my favorite pokemon has always been the Charizard<\/p>","9f756536":"**Well ..... We reached the end of my analysis, I hope you enjoyed it.**\n\n**Any doubts, suggestions and criticisms use the comments, thank you in advance **","f7b27d70":"Regarding the correlation, we can highlight:\n- Given that the Total is the result of the sum of the variables, Attack, Defense, Sp_Atk and Sp_Def, the relatively high correlation between both is normal;\n\n- There is a somewhat strong and negative correlation between Total and Catch_Rate, after all, most of the time, more powerful pokemons are more difficult to be captured;\n\n- Strangely the correlation between Height_m and Weight_kg is not very strong, but just as there are tall people but with little weight, there are also pokemon with these characteristics, like Rayquasa","3b7e4b89":"<h2>Handling Null\/ Nan Values<\/h2>","14b09ded":"<h1>Let's Go<\/h1>","3d9d01a2":"<h2>Exploratory Data Analysis (EDA)<\/h2>","dcd465e9":"<h2>Libraries Import<\/h2>","30db9967":"<h3>Which attributes stands out most in my favorite pokemon?<\/h3>","a7586a09":"<h3>What are the ten most powerful pokemons? And how is the distribution of their stats?<\/h3>","b96186ff":"<h2>Database Import<\/h2>","9c4fc977":"<h1>Analysis of Pok\u00e9mon Database<\/h1><br>\n<p><b>Creator:<\/b> alopez247<br>\n    <b>Notebook Author:<\/b> Jo\u00e3o Paulo Ribeiro dos Santos <b>(joaopauloribsantos)<\/b><br>\n    <br>This notebook is intended to apply some concepts and methods that I am learning. For this reason, that it will be updated frequently, until I can answer two questions that have always puzzled me about pokemons:<br><br>\n    <ol>\n        <li>What are the ten most powerful pokemons? And how is the distribution of their stats?<\/li>\n        <li>Which attributes stands out most in my favorite pokemon?<\/li>\n    <\/ol>\n<\/ol>  \n<\/p>","ff788b77":"<h2>Notebook Configurations<\/h2>"}}