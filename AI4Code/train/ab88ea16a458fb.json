{"cell_type":{"e028dcd9":"code","78ed9dd1":"code","199551c9":"code","bd8d1988":"code","689cba96":"code","2f35042e":"code","3e232876":"code","e5cdad8f":"code","6ec09734":"code","7160d1ca":"code","5cb8de2a":"code","e5d66736":"code","41efc77a":"code","1598cadc":"code","5919ce6d":"code","4a2cfcf5":"code","7ab88d51":"code","fd86c903":"code","e5221b65":"code","3c1d8d97":"code","f5e53d3c":"code","62699b87":"code","e61e0d69":"code","c6092c21":"code","25ffa6dd":"markdown","62f20d47":"markdown","08391b72":"markdown","a8070093":"markdown","bb3d53d9":"markdown","e446f050":"markdown","c35b2191":"markdown","2891a86c":"markdown","288b08d7":"markdown","11c26a96":"markdown","2456d504":"markdown","96ba192b":"markdown","c032d2d3":"markdown","c93a556f":"markdown","67f57849":"markdown","ee029f7d":"markdown"},"source":{"e028dcd9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.cm as cm\n%matplotlib inline\n","78ed9dd1":"from tensorflow.keras.datasets import mnist\n(x_train, y_train), (x_test,y_test) = mnist.load_data()\nprint(\"length of training dataset is %d\"  % len(x_train))\nprint(\"length of testing dataset is %d\" % len(x_test))","199551c9":"fig = plt.figure(figsize=(20,20))\nfor i in range(6):\n  ax = fig.add_subplot(1,6, i+1, xticks=[], yticks=[])\n  ax.imshow(x_train[i], cmap='gray')\n  ax.set_title(str(y_train[i]))","bd8d1988":"def visualize_input(img, ax):\n  ax.imshow(img, cmap='gray')\n  width, height = img.shape\n  thresh = img.max()\/2.5\n  for x in range(width):\n    for y in range(height):\n      ax.annotate(str(round(img[x][y])), xy=(y,x),\n                  horizontalalignment='center',\n                  verticalalignment='center',\n                  color='white' if img[x][y]<thresh else 'black')\n      \n\nfig= plt.figure(figsize=(15,15))\nax= fig.add_subplot(111)\nvisualize_input(x_train[2], ax)","689cba96":"x_train = x_train.astype('float32')\/255 \nx_test = x_test.astype('float32')\/255 \n\nprint(\"x_train shape is\" ,x_train.shape)\nprint(\"x_test shape is \" , x_test.shape)","2f35042e":"from keras.utils import np_utils\nnum_classes = 10\nprint('Integer values labelled are :')\nprint(y_train[:10])\n\ny_train = np_utils.to_categorical(y_train, num_classes)\ny_test = np_utils.to_categorical(y_test, num_classes)\n\nprint('ONE-HOT labelled are :')\nprint(y_train[:10])","3e232876":"img_rows, img_cols = 28,28\n\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1) \nx_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1) \ninput_shape = (img_rows, img_cols, 1)\n\nprint(\"input_shape   \", input_shape)\nprint(\"x_test shape  \", x_test.shape)\nprint(\"x_train shape \", x_train.shape)\n\n","e5cdad8f":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, GlobalAveragePooling2D\nmodel1 = Sequential()\n\n# layer 1\nmodel1.add(Conv2D(32, kernel_size=(3, 3), padding='same',activation='relu',input_shape=(28,28,1))) # 28*28*1\nmodel1.add(MaxPooling2D(pool_size=(2,2))) # 14*14*1\n\n# layer 2\nmodel1.add(Conv2D(64, kernel_size=(3, 3), padding='same',activation='relu')) # 14*14*1\nmodel1.add(MaxPooling2D(pool_size=(2,2))) # 7*7*1\n\n# layer 3\nmodel1.add(Flatten())\n\n# layer 4\nmodel1.add(Dense(64, activation='relu'))\nmodel1.add(Dense(10, activation='softmax'))\n\nmodel1.summary()","6ec09734":"model1.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","7160d1ca":"from tensorflow.keras.callbacks import ModelCheckpoint\npath = 'model1.weights.best.hdf5'\ncheckpointer = ModelCheckpoint(filepath= path, verbose=1, save_best_only=True)\n\nhist = model1.fit(x_train, y_train,\n                 batch_size=64, epochs=10, \n                 validation_data=(x_test, y_test), callbacks=[checkpointer], \n                 verbose=2, shuffle=True)","5cb8de2a":"model1.load_weights(path)","e5d66736":"score = model1.evaluate(x_test, y_test, verbose=0)\naccuracy = 100*score[1]\n\nprint('Test accuracy = %.4f%% ' % accuracy)","41efc77a":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, GlobalAveragePooling2D\nmodel2 = Sequential()\n# layer 1\nmodel2.add(Conv2D(32, kernel_size=(3, 3), padding='same',activation='relu',input_shape=(28,28,1)))  # 28*28*1 as padding is same\nmodel2.add(Conv2D(32, kernel_size=(3, 3), padding='same',activation='relu'))    # 28*28*1 as padding is same \nmodel2.add(Conv2D(32, kernel_size=(3, 3), padding='same',activation='relu'))    # 28*28*1 as padding is same \nmodel2.add(MaxPooling2D(pool_size=(2,2) ))   # 14*14*1\n\n# layer 2\nmodel2.add(Conv2D(64, kernel_size=(3, 3), padding='same',activation='relu'))    # 14*14*1 as padding is same\nmodel2.add(Conv2D(64, kernel_size=(3, 3), padding='same',activation='relu'))    # 14*14*1 as padding is same \nmodel2.add(Conv2D(64, kernel_size=(3, 3), padding='same',activation='relu'))    # 14*14*1 as padding is same \nmodel2.add(MaxPooling2D(pool_size=(2,2)))   # 7*7*1\n\n# layer 3\nmodel2.add(Flatten())\n\n# layer 4\nmodel2.add(Dense(64, activation='relu'))\nmodel2.add(Dense(10, activation='softmax'))\n\nmodel2.summary()","1598cadc":"model2.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nfrom tensorflow.keras.callbacks import ModelCheckpoint\npath = 'model2.weights.best.hdf5'\ncheckpointer = ModelCheckpoint(filepath= path, \n                               verbose=1, \n                               save_best_only=True)\n\nhist = model2.fit(x_train, y_train,\n                 batch_size=64, epochs=10, \n                 validation_data=(x_test, y_test), callbacks=[checkpointer], \n                 verbose=2, shuffle=True)\n\nmodel2.load_weights(path)","5919ce6d":"score = model2.evaluate(x_test, y_test, verbose=0)\naccuracy = 100*score[1]\n\nprint('Test accuracy = %.4f%% ' % accuracy)","4a2cfcf5":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, GlobalAveragePooling2D\nmodel3 = Sequential()\n# layer 1\nmodel3.add(Conv2D(32, kernel_size=(3, 3), padding='valid',activation='selu',input_shape=(28,28,1)))  # 26*26*1 as padding is same \nmodel3.add(Conv2D(32, kernel_size=(3, 3), padding='valid',activation='selu'))    # 24*24*1 as padding is same \nmodel3.add(Conv2D(32, kernel_size=(3, 3), padding='valid',activation='selu'))    # 22*22*1 as padding is same \nmodel3.add(MaxPooling2D(pool_size=(2,2) ))   # 11*11*1\n\n# layer 2\nmodel3.add(Conv2D(64, kernel_size=(3, 3), padding='valid',activation='selu'))    # 9*9*1 as padding is same\nmodel3.add(Conv2D(64, kernel_size=(3, 3), padding='valid',activation='selu'))    # 7*7*1 as padding is same \nmodel3.add(Conv2D(64, kernel_size=(3, 3), padding='valid',activation='selu'))    # 5*5*1 as padding is same \nmodel3.add(MaxPooling2D(pool_size=(2,2)))   # 2*2*1\n\n# layer 3\nmodel3.add(Flatten())\n\n# layer 4\nmodel3.add(Dense(64, activation='selu'))\nmodel3.add(Dense(10, activation='softmax'))\n\nmodel3.summary()","7ab88d51":"model3.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nfrom tensorflow.keras.callbacks import ModelCheckpoint\npath = 'model3.weights.best.hdf5'\ncheckpointer = ModelCheckpoint(filepath= path, \n                               verbose=1, \n                               save_best_only=True)\n\nhist = model3.fit(x_train, y_train,\n                 batch_size=64, epochs=10, \n                 validation_data=(x_test, y_test), callbacks=[checkpointer], \n                 verbose=2, shuffle=True)\n\nmodel3.load_weights(path)\n","fd86c903":"score = model3.evaluate(x_test, y_test, verbose=0)\naccuracy = 100*score[1]\n\nprint('Test accuracy = %.4f%% ' % accuracy)","e5221b65":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, GlobalAveragePooling2D\nmodel4 = Sequential()\n# layer 1\nmodel4.add(Conv2D(32, kernel_size=(3, 3), padding='same',activation='tanh',input_shape=(28,28,1))) # 28*28*1 as padding is same \nmodel4.add(Conv2D(32, kernel_size=(3, 3), padding='same',activation='tanh'))    # 28*28*1 as padding is same \nmodel4.add(MaxPooling2D(pool_size=(2,2) ))                                      # 14*14*1\n\n# layer 2\nmodel4.add(Conv2D(64, kernel_size=(3, 3), padding='same',activation='relu'))    # 14*14*1 as padding is same \nmodel4.add(Conv2D(64, kernel_size=(3, 3), padding='same',activation='relu'))    # 14*14*1 as padding is same\nmodel4.add(MaxPooling2D(pool_size=(2,2)))                                       # 7*7*1\n# layer 2\n\nmodel4.add(Conv2D(128, kernel_size=(3, 3), padding='same',activation='selu'))   # 7*7*1 as padding is same \nmodel4.add(Conv2D(128, kernel_size=(3, 3), padding='same',activation='selu'))   # 7*7*1 as padding is same \nmodel4.add(MaxPooling2D(pool_size=(2,2)))                                       # 3*3*1\n\n# layer 3\nmodel4.add(Flatten())\n\n# layer 4\nmodel4.add(Dense(128, activation='relu'))\nmodel4.add(Dense(10, activation='softmax'))\n\nmodel4.summary()","3c1d8d97":"model4.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nfrom tensorflow.keras.callbacks import ModelCheckpoint\npath = 'model4.weights.best.hdf5'\ncheckpointer = ModelCheckpoint(filepath= path, \n                               verbose=1, \n                               save_best_only=True)\n\nhist = model4.fit(x_train, y_train,\n                 batch_size=64, epochs=10, \n                 validation_data=(x_test, y_test), callbacks=[checkpointer], \n                 verbose=2, shuffle=True)\n\nmodel4.load_weights(path)\n","f5e53d3c":"score = model4.evaluate(x_test, y_test, verbose=0)\naccuracy = 100*score[1]\n\nprint('Test accuracy = %.4f%% ' % accuracy)","62699b87":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, GlobalAveragePooling2D\nmodel5 = Sequential()\n# layer 1\nmodel5.add(Conv2D(16, kernel_size=(3, 3), padding='valid',activation='relu',input_shape=(28,28,1))) # 28*28*1 as padding is same\nmodel5.add(Conv2D(32, kernel_size=(3, 3), padding='valid',activation='relu'))    # 28*28*1 as padding is same \nmodel5.add(Conv2D(64, kernel_size=(3, 3), padding='valid',activation='relu'))    # 28*28*1 as padding is same \nmodel5.add(MaxPooling2D(pool_size=(2,2) ))   # 14*14*1\n\n# layer 2\nmodel5.add(Conv2D(64, kernel_size=(3, 3), padding='valid',activation='selu'))    # 12*12*1\nmodel5.add(Conv2D(128, kernel_size=(3, 3), padding='valid',activation='selu'))    # 10*10*1 as padding is same \nmodel5.add(Conv2D(256, kernel_size=(3, 3), padding='valid',activation='selu'))    # 8*8*1 as padding is same \nmodel5.add(MaxPooling2D(pool_size=(2,2)))   # 4*4*1\n\n# layer 3\nmodel5.add(Flatten())\n\n# layer 4\nmodel5.add(Dense(64, activation='relu'))\nmodel5.add(Dense(10, activation='softmax'))\n\nmodel5.summary()","e61e0d69":"model5.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nfrom tensorflow.keras.callbacks import ModelCheckpoint\npath = 'model5.weights.best.hdf5'\ncheckpointer = ModelCheckpoint(filepath= path, \n                               verbose=1, \n                               save_best_only=True)\n\nhist = model5.fit(x_train, y_train,\n                 batch_size=64, epochs=10, \n                 validation_data=(x_test, y_test), callbacks=[checkpointer], \n                 verbose=2, shuffle=True)\n\nmodel5.load_weights(path)\n","c6092c21":"score = model5.evaluate(x_test, y_test, verbose=0)\naccuracy = 100*score[1]\n\nprint('Test accuracy = %.4f%% ' % accuracy)","25ffa6dd":"# Use GPU for better experience","62f20d47":"\n# MNIST DATASET IMPLEMENTATION IN CNN ","08391b72":"#MODEL 2","a8070093":"#MODEL 4","bb3d53d9":"#7. TRAINING THE MODEL\n\n","e446f050":"**1. IMPORTING THE  MNIST DATASET**","c35b2191":"#8. Loading the Model with the Best Classification Accuracy on the Validation Set","2891a86c":"#MODEL 1","288b08d7":"#MODEL 5","11c26a96":"#3. USING ONE HOT ENCODING TO LABEL THE DATA","2456d504":"#**5. CREATING THE MODEL**","96ba192b":"#MODEL 3","c032d2d3":"#4. RESHAPING INPUT SHAPE ","c93a556f":"#9. Calculating the model accuracy on test data","67f57849":"#6. COMPILING THE MODEL\n\n","ee029f7d":"#2. PREPROCESSING THE IMAGE"}}