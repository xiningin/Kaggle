{"cell_type":{"774bf508":"code","1fb50963":"code","e1e41f78":"code","8f8ca46d":"code","e481c74f":"code","5e7e71fd":"code","afbe34e6":"code","3809121b":"code","9f579a93":"code","e7d1dcd2":"code","7d2088bd":"code","fe5d8f96":"code","751e7ba5":"code","d4201750":"code","c2238f4d":"code","65186a1b":"code","d1a7e4f3":"code","70c99c53":"code","7ba49509":"code","0772e44a":"code","8cd4c6d6":"code","fc1eb883":"code","286e9dda":"code","596297fb":"code","ded22819":"code","844b42dd":"code","efec319b":"code","b072299f":"markdown","751b0413":"markdown","463cd744":"markdown","74ad58a6":"markdown","c9e63923":"markdown","8e627a8d":"markdown","52e92617":"markdown","6964409c":"markdown","b7a175dc":"markdown","e27e2968":"markdown","f0d21bc3":"markdown","c3527e4f":"markdown"},"source":{"774bf508":"import numpy as np \nimport pandas as pd \nimport seaborn as sns #visualisation\nimport matplotlib.pyplot as plt #visualisation\n%matplotlib inline \nsns.set(color_codes=True)\n","1fb50963":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e1e41f78":"#load dataset\nsample = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\n","8f8ca46d":"sample.head(5)","e481c74f":"sample\n#image id is gonna be our index","5e7e71fd":"train","afbe34e6":"test","3809121b":"train.info()","9f579a93":"test.info(0)","e7d1dcd2":"train.isnull().sum().sum(), test.isnull().sum().sum()","7d2088bd":"ImageId = test.index\n\nx = train.iloc[::,1:]\ny = train.iloc[:,0] \nx_test = test","fe5d8f96":"y","751e7ba5":"x","d4201750":"x_test","c2238f4d":"\n# Plotting a Histogram\nimport seaborn as sns\nsns.countplot(x=y_train)","65186a1b":"#range of image is [0,255]\nx = x\/255\nx_test = x_test\/225","d1a7e4f3":"x","70c99c53":"x_test","7ba49509":"from sklearn.model_selection import train_test_split\n\nx_train, x_val, y_train, y_val = train_test_split(x,y, test_size=0.1, random_state = 1)\nx_train.shape, x_val.shape, y_train.shape, y_val.shape, x_test.shape","0772e44a":"from sklearn.neural_network import MLPClassifier\n\nmodel = MLPClassifier(hidden_layer_sizes=(50, ),max_iter=50,alpha=1e-4,solver='sgd',verbose=10, random_state=0).fit(x_train, y_train)\nprint(model.score(x_train, y_train))\n\n","8cd4c6d6":"y_pred = model.predict(x_val)\nprint(model.score(x_val, y_val))","fc1eb883":"df_val = pd.DataFrame({'actual_value': y_val, 'predicted_value': y_pred})\ndf_val.reset_index(drop=True, inplace=True)\ndf_val","286e9dda":"#predict on test set\nprediction = model.predict(x_test)\nprediction","596297fb":"prediction.shape","ded22819":"ImageId","844b42dd":"output = pd.DataFrame({'ImageId' :ImageId, 'Lable':prediction})\noutput.to_csv('submission.csv', index = False)\nprint(\"Successfully Submitted!!\")\n","efec319b":"submission = pd.read_csv(\"submission.csv\")\nsubmission","b072299f":"# Why we use the below one?\nSyntax for os.walk is: os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]]) it is always accepts 4 parameters\ntop represents that Every directory rooted at directory, with 3-tuples, they are dirpath, dirnames, filenames\ntopdown represents if optional argument topdown is True or not specified, directories are scanned from top-down. If topdown is set to False, directories are scanned from bottom-up. Onerror  representsThis can show error to continue with the walk, or raise the exception to abort the walk. followlinks represents this visits directories pointed to by symlinks, if set to true.\n\nos.walk() function returns a list of every file in an entire file tree.\nfor dirname, _, filenames in os.walk('\/kaggle\/input'): from those 4 parameter we use only path\nour program uses os.path.join() to join together the root folder of each file ('\/kaggle\/input')and the name of the file (kaggle). The root folder refers to the directory path in which a file exists.\n\n","751b0413":"# Prepare on subimmiting doc","463cd744":"# predict value\n","74ad58a6":"# Train and Test the data splits","c9e63923":"# Define a model","8e627a8d":"# > ***info about train and test***","52e92617":"# Just for displaying all the datas","6964409c":"# scalar\n","b7a175dc":"# Check for missing or null nan values\n\nIn our dataset where we will get in unstructured manner in order make it proper and clean means that in a structured way we have to clean our dataset that is nothing but preprocssing","e27e2968":"# Hello all here not only code present even you can find explanation for each and everything\n# The goal in this competition is to take an image of a handwritten single digit, and determine what that digit is. As the competition progresses, we will release tutorials which explain different machine learning algorithms and help you to get started.","f0d21bc3":"# Find and tell what is x and y then go for xtest","c3527e4f":"# submission process"}}