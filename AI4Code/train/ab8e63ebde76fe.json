{"cell_type":{"91382a5a":"code","e59ecffe":"code","a27c3f31":"code","9f89ecb1":"code","99043bf9":"code","bd895157":"code","9c26456f":"code","76907c27":"code","8998bafe":"code","c6f9ed0b":"code","44410ec2":"code","7327ba05":"code","a1fee546":"code","d93233ff":"code","22d122dd":"code","79d2ba20":"code","451efc28":"code","16bf71df":"code","c6ecc0b5":"code","fc8bcbd7":"code","5e4fe195":"markdown","6afb94c1":"markdown","360290c1":"markdown","662e5a15":"markdown","1c637151":"markdown","68fddf0c":"markdown","5053127f":"markdown","b551a432":"markdown","f2b44016":"markdown"},"source":{"91382a5a":"#Import the necessary stuff\nimport pandas as pd;\nimport numpy as np;\nimport matplotlib.pyplot as plt;\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML #for embedding html tags for navigation etc.\n\n#below are required for using plotly\nimport plotly as py\nimport plotly.graph_objects as go\n# import plotly.offline as pyo\nfrom plotly.offline import init_notebook_mode,iplot,plot\n# init_notebook_mode(connected = True)\nimport plotly.express as px\n# import plotly.io as pio\n\n%matplotlib inline\n\n#Read the files directly from source. Uncomment the below cell if working offline on your system\n#url1 =\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Deaths.csv\";\n#url2 = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv\"\n#url3 =\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv\"\n\n#new urls since 24th March:\n\nurl1 = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\nurl2 = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\nurl3 = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"\n\n#Create dataframes from urls\ndfRawConfirmed = pd.read_csv(url1, index_col = None);\ndfRawDeaths = pd.read_csv(url2,index_col=None);\n\ndfRawRecovered = pd.read_csv(url3, index_col = None);\n\n#Replace \"Province\/State\" column with \"State\" and \"Country\/Region\" with Country\n\ndfRawDeaths.rename(columns = {\"Country\/Region\":\"Country\",\"Province\/State\":\"State\"},inplace= True)\ndfRawConfirmed.rename(columns ={\"Country\/Region\":\"Country\",\"Province\/State\":\"State\"},inplace= True)\ndfRawRecovered.rename(columns = {\"Country\/Region\":\"Country\",\"Province\/State\":\"State\"},inplace= True)\n\n#Convert from Wide to long format\ndfCovDeaths= dfRawDeaths.melt(id_vars=dfRawDeaths.columns[:4],value_vars=dfRawDeaths.columns[4:],\n                              value_name= \"Count\", var_name=\"Date\")\ndfCovConfirmed = dfRawConfirmed.melt(id_vars=dfRawConfirmed.columns[:4],value_vars=dfRawConfirmed.columns[4:],\n                              value_name= \"Count\", var_name=\"Date\")\ndfCovRecovered = dfRawRecovered.melt(id_vars=dfRawRecovered.columns[:4],value_vars=dfRawRecovered.columns[4:],\n                              value_name= \"Count\", var_name=\"Date\")\n\n#Add a Category Column\ndfCovDeaths[\"Category\"] = \"Deaths\"\ndfCovConfirmed[\"Category\"]=\"Confirmed_Cases\"\ndfCovRecovered[\"Category\"] = \"Recovered\"\n\n#Convert Date field to date type\ndfCovDeaths.Date = pd.to_datetime(dfCovDeaths[\"Date\"])\ndfCovConfirmed.Date =pd.to_datetime(dfCovConfirmed[\"Date\"])\ndfCovRecovered.Date = pd.to_datetime(dfCovRecovered[\"Date\"])\n\n#Save to .csv file for offline use\ndfCovDeaths.to_csv(\"DFCovidDeaths.csv\",index = False,index_label=False)\ndfCovConfirmed.to_csv(\"DFCovidConfirmedCases.csv\",index_label=False,index = False)\ndfCovRecovered.to_csv(\"DFCovidRecoveredCases.csv\",index_label=False,index = False)\n\n#create a dataframe for list of countries and state\ndfStateCountryList =dfCovDeaths.drop_duplicates([\"State\",\"Country\"])[[\"State\",\"Country\"]]\ndfStateCountryList =dfStateCountryList.astype(str)\n\n#Join three dataframes to get one combined dataframe\ndf_temp = pd.merge(dfCovDeaths,dfCovConfirmed,on=['State','Country','Date'])\ndfMain = pd.merge(df_temp,dfCovRecovered, on =['State','Country','Date'])\n#Rename Columns\ndfMain.rename(columns={\"Count_x\":\"Deaths\",\"Count_y\":\"Confirmed\",\"Count\":\"Recovered\"},inplace = True)\ndfMain = dfMain[['State','Country','Date','Deaths','Confirmed','Recovered']]","e59ecffe":"#Process the dataframe to add deltas for deaths, confirmed cases and recoveries. delta is increase over previous value\ntemp=dfMain.copy()\ntemp['DeltaDeaths']=0\ntemp['DeltaConfirmed']=0\ntemp['DeltaRecovered']=0\ntemp['DeathsDeltaPercent']=0\ntemp['MortalityPercent']=0\ntemp['RecoveryPercent']=0\n# temp['ConfirmedDeltaPercent']=0\n# temp['RecoveredDeltaPercent']=0\nvarState = \"\"\nvarCountry=\"\"\n\n#for j in [16,155]:\n\nfor j in range(len(dfStateCountryList)):\n    varState = dfStateCountryList.loc[j,'State']\n    varCountry = dfStateCountryList.loc[j,'Country']\n# Handle cases like Cote d'Ivore   \n    if \"'\" in varState:\n        varState.replace(\"'\",\"\\'\")\n    if \"'\" in varCountry:\n        varCountry.replace(\"'\",\"\\'\")\n        \n#If the data row does not have a province\/state\n    if (varState =='nan'):\n        varStr = \"Country == \\\"\"+ varCountry+\"\\\"\"\n    else:\n        varStr = \"(Country == \\\"\" +  varCountry+\"\\\")\" + \" & \" +\" (State ==\"+ \"\\\"\"+ varState +\"\\\")\"\n#     print(str(j)+'\/'+str(len(dfStateCountryList)))\n    y1=temp.query(varStr).copy()\n    y2 = y1.shift(1)\n    for i in y2.index:\n        temp.loc[i,'DeltaDeaths']=temp.loc[i,'Deaths'] - y2.loc[i,'Deaths']\n        temp.loc[i,'DeltaConfirmed']=temp.loc[i,'Confirmed'] - y2.loc[i,'Confirmed']\n        temp.loc[i,'DeltaRecovered']=temp.loc[i,'Recovered'] - y2.loc[i,'Recovered']\n        if (temp.loc[i,'Deaths']!=0):\n            temp.loc[i,'DeathsDeltaPercent'] =round(temp.loc[i,'DeltaDeaths']\/temp.loc[i,'Deaths']*100,1)\n        if (temp.loc[i,'Confirmed']!=0):\n            temp.loc[i,'MortalityPercent'] =round(temp.loc[i,'Deaths']\/temp.loc[i,'Confirmed']*100,1)\n            temp.loc[i,'RecoveryPercent'] =round(temp.loc[i,'Recovered']\/temp.loc[i,'Confirmed']*100,1)\n            \n        \ndfMain = temp.copy()    \n#print('Done')  \n\n\n#Countrywise consolidated figures\n#dfMain[dfMain['Date']==dfMain['Date'].max()].groupby('Country').sum().sort_values('Deaths',ascending=False)[['Deaths','Confirmed','Recovered']]\n\n#Separate dataframes for China and others(excluding China)\ndfNChina=dfMain[dfMain['Country']!='China']#Excluding China\ndfChina = dfMain[dfMain['Country']=='China']#China only","a27c3f31":"#Put the various styles used here:\n\nstyles = [\n    dict(selector=\"caption\",props=[('font-size','10pt'),('text-align','left'),('color','#0000ff'),('font-weight','bold')]),\n    dict(selector=\"th\",props=[('color','teal'),('border','1px solid #000000')]),\n    dict(selector=\"td\",props=[('font-size','10pt'),('border','1px solid #000000')])\n]\n\n#Style for small tables\nstyles2 = [\n    dict(selector=\"caption\",props=[('font-size','9pt'),('text-align','left'),('color','#0000ff'),('font-weight','bold')]),\n    dict(selector=\"th\",props=[('color','teal'),('border','1px solid #000000'),('width','100px')]),\n    dict(selector=\"td\",props=[('font-size','10pt'),('border','1px solid #000000')]),\n    dict(selector=\"col\",props=[('width','100px')]),\n#   dict(selector=\"table\",props=[('align','center'),('margin-left','auto'),('margin-right','auto')])\n]","9f89ecb1":"strDate = dfMain.Date.max().strftime(\"%d-%b-%Y\")#Get the last date in dataset\nstrToday = pd.datetime.now().strftime(\"%d-%b-%Y %H:%M\")\ndisplay(HTML(\"<h5> Updated at \" + strToday + \" UTC <\/h5>\"))","99043bf9":"t1 = pd.DataFrame(dfMain[dfMain.Date==dfMain.Date.max()].sum()[['Deaths','Confirmed','Recovered']]).transpose()\nt1.Confirmed = t1.Confirmed.astype(int)\nt1.style.background_gradient(cmap='RdPu').hide_index().set_caption(\"<a id='BasicNumbers'><\/a>Overall Numbers as on :\" + strDate).set_table_styles(styles2)","bd895157":"dfPlot = dfMain[dfMain.Date==dfMain.Date.max()].groupby('Country').sum().reset_index()\ncountries = dfPlot.Country.drop_duplicates()\n\ndata = dict(type='choropleth', locationmode ='country names',\n           locations=countries,\n            #np.array(dfPlot.Country.drop_duplicates()),\n           z=np.arange(0,len(countries)),\n           autocolorscale = True,\n           #colorscale ='',\n           text =\"Country: \" + dfPlot.Country+'<br> Confirmed: ' + dfPlot.Confirmed.astype(str),\n           colorbar ={'title':'Country Colors','len':200,'lenmode':'pixels'})\nlayout=dict(geo ={'scope':'world'})\n\n\ncol_map = go.Figure(dict(data=data,layout=layout))\ncol_map.update_layout(title={\n    'text':\"Global Spread of Covid19\",\n    'x':0.5,'y':0.85\n})\niplot(col_map)","9c26456f":"dfTop20 = dfMain[dfMain.Date==dfMain.Date.max()].groupby('Country').sum().\\\nsort_values('Deaths',ascending=False).head(20).reset_index()\ncountry = dfTop20.Country\nif (\"India\" in country) ==False :\n    country=np.append(country,'India')\ndfPlot = dfMain[(dfMain.Country.isin(country))&(dfMain.Date==dfMain.Date.max())].groupby('Country').sum().sort_values('Deaths', ascending =False)\ndfPlot = dfPlot.reset_index()\n\ndata = dict(type='choropleth', locationmode ='country names',\n           locations=country,\n            #np.array(dfPlot.Country.drop_duplicates()),\n           z=dfPlot.Deaths.astype(int),\n           autocolorscale = False,\n           colorscale ='Reds',\n           text =\"Country: \" + dfPlot.Country+'<br> Confirmed: ' + dfPlot.Confirmed.astype(str),\n           colorbar ={'title':'Country Colors','len':200,'lenmode':'pixels'})\nlayout=dict(geo ={'scope':'world'})\n\n\ncol_map = go.Figure(dict(data=data,layout=layout))\ncol_map.update_layout(title={\n    'text':\"Reported Deaths: Top 20 countries and India\",\n    'x':0.5,'y':0.85\n})\niplot(col_map)","76907c27":"#Top 20 countries in terms of loss of lives\ndfMain[dfMain['Date']==dfMain['Date'].max()].groupby('Country').sum().sort_values('Deaths',ascending=False)[['Deaths','Confirmed','Recovered','MortalityPercent']].head(20)\\\n.style.set_caption(\"<a id='TableTopTwenty'><\/a>20 Countries with maximum deaths as on:\" + strDate).set_table_styles(styles).\\\nbackground_gradient(cmap=\"Reds\").set_properties(**{'font-size': '9pt', 'font-family': 'Calibri'})","8998bafe":"dfTop20 = dfMain[dfMain.Date==dfMain.Date.max()].groupby('Country').sum().\\\nsort_values('Deaths',ascending=False).head(20).reset_index()\ncountry = dfTop20.Country\nif (\"India\" in country) ==False :\n    country=np.append(country,'India')\n#for i in range(0,len(country)):\nfig =go.Figure()\nfor i in range(0,len(country)):\n    dfPlot = dfMain[(dfMain.Country == country[i])&(dfMain.Deaths<5000)&(dfMain.Confirmed <50000)].groupby(['Country','Date']).sum().reset_index()\n# plot_data = go.Scatter(x=dfTop20.Confirmed,y=dfTop20.Deaths,mode = 'lines+markers')\n# go.Figure(data=plot_data,layout=dict(title=\"test\"))\n    fig.add_trace(go.Scatter(x=dfPlot.Confirmed,y=dfPlot.Deaths,text=country[i],mode='markers+lines', name=country[i]))\n    fig.update_layout(title=dict(text =\"Comparision of Confirmed cases vs deaths\",xref=\"paper\",font=dict(size=12)),\n                      xaxis_title=\"Confirmed Cases upto 50000\",yaxis_title='No of Deaths upto 5000')\nfig.show()\n","c6f9ed0b":"plt.plot('Deaths',data=dfMain.groupby(['Date']).sum().reset_index(),label='Deaths');\nplt.plot('Confirmed',data=dfMain.groupby(['Date']).sum().reset_index(),label='Confirmed Cases');\nplt.plot('Recovered',data=dfMain.groupby(['Date']).sum().reset_index(),label='Recovered Cases');\nplt.legend();\nplt.title(\"Global change of deaths, confirmed and recovered cases\");\nplt.xlabel(\"Days since 22-Jan-2020\");\nplt.ylabel(\"No. of Cases\");\nplt.grid(True)\ndisplay(HTML(\"<a id='GlobalGraph'><\/a>\"));\ndisplay(HTML(\"<a href=#top>Back to Top<\/a>\"))","44410ec2":"colors = sns.color_palette('colorblind')\nplt.figure(figsize=(15,9))\nLatestByCountry =dfMain[dfMain['Date']==dfMain.Date.max()].groupby('Country').sum().sort_values('Deaths',ascending = False).reset_index()\ntemp = LatestByCountry.sort_values('Deaths',ascending=False).head(20)\nsns.set_style('whitegrid')\nax=sns.barplot(x='Deaths',y='Country',data=temp);\nfor p in ax.patches:\n    ax.text(p.get_x()+p.get_width(),p.get_y()+0.6,int(p.get_width()),fontsize=12,color='black')\n    #print(p.get_width())\nplt.title(\"Top 20 Countries in loss of lives updated on: \" + strDate,{'color':'blue'});\nplt.xticks(ticks= np.arange(0,temp.Deaths.max(),500),fontsize=8);\n#ax=plt.gca()\n\n#plt.gca().invert_yaxis()\nplt.show()\ndisplay(HTML('<a id=\"barTop20\"><\/a>'))","7327ba05":"pd.plotting.register_matplotlib_converters()\ncountries = dfMain[dfMain.Date == dfMain.Date.max()].groupby('Country').sum().sort_values('Deaths',ascending=False).\\\nhead(5).reset_index() #top 5 countries\ncountries_arr = np.array(countries.Country)#Get the list of countries as array\ndfSelectedCountries = pd.DataFrame(np.append(countries_arr,'India'))#Add India and convert to Dataframe\ndfSelectedCountries.rename(columns={0:'Country'},inplace = True)#rename column\ndfMerged = pd.merge(dfSelectedCountries,dfMain,on=('Country'), how= 'left')#merge to get other data from dfMain\nplt.figure(figsize = (15,9))\nvarCutOffDate = (dfMerged.Date.max() -pd.to_timedelta(30,'d'))\nsns.lineplot(x ='Date', y='Confirmed',\n             data=dfMerged[dfMerged.Date >= varCutOffDate],\n             hue ='Country',marker=True,legend='brief');\nplt.title('Confirmed Cases last one month',fontsize=16);\nplt.figure(figsize = (15,9))\nsns.lineplot(x ='Date', y='Deaths',\n             data=dfMerged[dfMerged.Date >= varCutOffDate],\n             hue ='Country',marker=True,legend='brief');\nplt.title('Deaths last one month',fontsize=16);","a1fee546":"LatestChina = dfChina[dfChina['Date']==dfChina.Date.max()]\nplt.figure(figsize=(9,12))\nax=LatestChina.groupby('State')['Deaths'].sum().plot(kind='barh')\na = ax.set_title('All China', fontsize=20)","d93233ff":"dfNHubei = LatestChina[LatestChina['State']!='Hubei']#Excluding Hubei which has very large number of deaths\nplt.figure(figsize=(12,9))\ndfNHubei.groupby('State').sum()['Deaths'].plot(kind='barh')\na =plt.title(\"No of deaths in China excluding Hubei\")","22d122dd":"plt.figure(figsize=(15,10));\nax=dfNChina.groupby(\"Date\").sum()['Deaths'].plot(marker='x',markersize=5,label=\"World excluding China\");\nax=dfChina.groupby(\"Date\").sum()['Deaths'].plot(marker=\"o\",markersize=5,label=\"China\")\na = ax.set_title(\"No of Deaths China and World\",fontsize=25)\nplt.legend();","79d2ba20":"plt.figure(figsize=(20,10))\nplt.subplots_adjust(hspace = 1.0)\nplt.subplot(3,2,1)\ndf = dfMain[dfMain['Country']=='Spain']\nx_val = np.linspace(0,len(df),len(df),True)\nplt.plot(x_val,'DeathsDeltaPercent', data= df,marker='o',linewidth=3,label=\"% increase in mortality\")\ny_mean = dfMain[dfMain['Country']=='Spain']['DeathsDeltaPercent'].mean()\nplt.axhline(y_mean)\nplt.legend()\nplt.xlabel(\"No of days from 22nd Jan 2020\")\nplt.title(\"Spain\")\nplt.subplot(3,2,2)\n#plt.figure(figsize=(20,6))\nplt.plot(x_val,'DeathsDeltaPercent', data= dfMain[dfMain['Country']=='Italy'],marker='o',label = \"% increase in mortality\",color='red')\ny_mean = dfMain[dfMain['Country']=='Italy']['DeathsDeltaPercent'].mean()\ntempvar = (dfMain[dfMain['Country']=='Italy']['Deaths']\/dfMain[dfMain['Country']=='Italy']['Confirmed'])*100\n#plt.plot('Date',dfMain[dfMain['Country']=='Italy']['Deaths']\/dfMain[dfMain['Country']=='Italy']['Confirmed']),data= dfMain[dfMain['Country']=='Italy'])\n\nplt.axhline(y_mean,color='red')\nplt.legend()\nplt.xlabel(\"No of days from 22nd Jan 2020\")\nplt.title(\"Italy\")\nplt.subplot(3,2,3)\n#plt.figure(figsize=(20,6))\nplt.plot(x_val,'DeathsDeltaPercent', data= dfMain[dfMain['Country']=='Germany'],marker='o',label=\"% increase in mortality\",color='green')\ny_mean = dfMain[dfMain['Country']=='Germany']['DeathsDeltaPercent'].mean()\n\nplt.axhline(y_mean,color='black',label=\"mean\")\nplt.legend()\nplt.xlabel(\"No of days from 22nd Jan 2020\")\nplt.title(\"Germany\")\nplt.subplot(3,2,4)\nplt.plot(x_val,'DeathsDeltaPercent', data= dfMain[dfMain['Country']=='Iran'],marker='o',label=\"% increase in mortality\",color='brown')\n\ny_mean = dfMain[dfMain['Country']=='Iran']['DeathsDeltaPercent'].mean()\n\nplt.axhline(y_mean,color='teal')\nplt.legend()\nplt.xlabel(\"No of days from 22nd Jan 2020\")\nplt.title(\"Iran\")\n\nplt.subplot(3,2,5)\nplt.plot(x_val,'DeathsDeltaPercent', data= dfMain[dfMain['Country']=='India'],marker='o',label=\"% increase in mortality\",\n         color='purple')\n\ny_mean = dfMain[dfMain['Country']=='India']['DeathsDeltaPercent'].mean()\n\nplt.axhline(y_mean,color='purple')\nplt.legend()\nplt.xlabel(\"No of days from 22nd Jan 2020\")\nplt.title(\"India\")\n\nplt.subplot(3,2,6)\n\n#dfGrouped = dfMain[dfMain.Country == 'USA']\nplt.plot(x_val,'DeathsDeltaPercent', data= dfMain[dfMain['Country']=='US'].groupby('Date').sum(),\n         marker='o',label=\"% increase in mortality\",color='orange')\n\ny_mean = dfMain[dfMain['Country']=='US']['DeathsDeltaPercent'].mean()\n\nplt.axhline(y_mean,color='teal')\nplt.legend()\nplt.xlabel(\"No of days from 22nd Jan 2020\")\na=plt.title(\"US combined\")\nplt.suptitle(\"Daily change in percent mortality\", fontsize = 20,color='#068b81');\n\n\n# plt.plot('Date','DeathsDeltaPercent', data= dfMain[dfMain['Country']=='United Kingdom'],marker='o')\n#plt.plot('Date','DeathsDeltaPercent', data= dfMain[dfMain['Country']=='US'],marker='o')\n#plt.plot('Date','DeathsDeltaPercent', data= dfMain[dfMain['Country']=='France'],marker='o')","451efc28":"from scipy.optimize import curve_fit\ndef linfit(x,a,b):\n    return a*x+b\n\ndef deg2fit(x,a,b,c):\n    return (a*x**2)+(b*x)+c\n\ndef deg3fit (x,a,b,c,d):\n    return(a*x**3)+(b*x**2) +(c*x)+ d\n\ndef expfit(x,a,b):\n    return np.exp(a*x)+b","16bf71df":"display(HTML(\"<a id='ConfirmedProjections'><\/a>\"))\ndfcountries = dfNChina[dfNChina.Date == dfNChina.Date.max()].groupby('Country').sum().sort_values('Deaths',ascending=False).head(9)\ncountries = np.array(dfcountries.index)\nif not('India'in countries):\n    countries = np.append(countries,'India')\nplt.figure(figsize = (10,100));\nplt.subplots_adjust(hspace = 1.0)\nfor i in range(1,11):\n    ax = plt.subplot(10,1,i)\n    \n    #myfig.set_facecolor('#ffffff')\n    df = dfMain[(dfMain.Country == countries[i-1])& (dfMain.Confirmed >100)].groupby(['Country','Date']).sum().reset_index()\n    #plt.xticks(ticks=np.arange(0,len(df),1))\n    ax.plot(np.arange(0,len(df)),df.Confirmed,marker='o', label = \"Actual\",color='black')\n    no_of_days = len(df)\n    \n    x= np.arange(0,len(df))\n    y = df.Confirmed\n    varDate = df.Date.min().strftime(\"%d-%m-%Y\")\n    \n    #linear fit coeff:\n    popt1,pcov1 = curve_fit(linfit,x,y,[1,1])\n    popt2,pcov2 =curve_fit(deg2fit,x,y,[1,1,1])\n    popt3,pcov3 =curve_fit(deg3fit,x,y,[1,1,1,1])\n    popte,pcove = curve_fit(expfit,x,y)\n    poly_coeff = np.polyfit(x,y,2)\n    popt7,pcov7 = curve_fit(linfit,x[-7:],y[-7:],[1,1])#7 days\n    \n#     y2 = np.poly1d(poly_coeff)\n    #ax.plot(x,y2(x),label=\"Projected\",linestyle= ':',color='red')\n\n    #projected for 15 days since 100 confirmations\n    x= np.arange(0,len(df)+15,1)\n    #for exponential take only 5 days:\n    xe =np.arange(0,len(df)+5,1)\n    #for 7 days  moving consider from the last point for 7 days\n    x7 = np.arange(len(df)-6,len(df)+15,1)\n    y1 = linfit(x,*popt1) # projected y for x\n    y2 = deg2fit(x,*popt2)\n    y3 =deg3fit(x,*popt3)\n    ye = expfit(xe,*popte)\n    y7 = linfit(x7,*popt7)\n    \n    lim = [y1.max(),y2.max(),y3.max(),ye.max()]# get the limits of the graph\n#   \n    ax.plot(x,y1,linestyle ='-.',label='linear')\n    ax.plot(x,y2,linestyle = '--',label = 'deg2')\n    ax.plot(x,y3,label ='deg3')\n    ax.plot(xe,ye,label ='exp')\n    ax.plot(x7,y7,linestyle=\"-\",label='7days')\n    \n    lim = plt.axis()# get the limits of the graph\n    d7 = no_of_days+7 #get the day 7 days from the last update\n    date7 = df.Date.max()+pd.DateOffset(days = 7)\n    strDate7 = date7.strftime(\"%d-%m-%Y\")\n    lastUpdate = df.Date.max().strftime(\"%d-%m-%Y\")\n\n    \n    #plot a vertical line 7 days from the date of last update\n    ax.axvline(x=d7,color='red',linestyle='dotted')\n    \n    #plot a marker at intersection of the 7 day line\n    y7lin = linfit(d7,*popt1)\n    y7deg2 = deg2fit(d7,*popt2)\n    y7deg3 = deg3fit(d7,*popt3)\n    y7exp = expfit(d7,*popte)\n    y7mov = linfit(d7,*popt7)\n    ax.plot(d7,y7lin,marker='o',color='red')\n    ax.plot(d7,y7deg2,marker='o',color='red')\n    ax.plot(d7,y7deg3,marker='o',color='red')\n    ax.plot(d7,y7mov,marker = 'o', color= 'red')\n    \n       \n    ax.set_title(countries[i-1]+ \": Reported and Projected cases since first 100\", fontsize =18)\n    \n    strPlotComments = 'Last updated on: '+ lastUpdate\n    strPlotComments += '\\n'+ 'Projected 7 days \\n  linear: '+ str(int(y7lin))+'\\n  deg2: '+ str(int(y7deg2))+\\\n           \"\\n  deg3: \" + str(int(y7deg3))+ \"\\n  7 days linear:  \" + str(int(y7mov))\n    ax.text(0,lim[3]*0.6, strPlotComments,fontsize = 10)\n    #ax.text(0,lim[3]*0.8,'First 100 Cases:' + varDate, fontsize = 10)\n    \n    \n#     ax.text(no_of_days+8,plt.axis()[3]*0.50,str(round(y7lin,0)))\n    #ax.text(0,y.max()*.55, \"y = \" + str(round(poly_coeff[0],2))+\"*t^2 + \" + str(round(poly_coeff[1],2))+\"*t + \" +  str(round(poly_coeff[2])))\n    bb_box = dict(boxstyle='square',fc='w',alpha=1.0)\n    \n    myArrowProp1 = dict(arrowstyle='->',color='black') #define arrow style and colour = black\n    myArrowProp2 = dict(arrowstyle='->',color='blue')#define arrow style and colour = blue\n    myArrowProp3 = dict(arrowstyle='->',color='red')#define arrow style and colour = blue\n    ax.annotate(str(df.loc[len(df)-1,'Confirmed']),  \n                xy=(len(df)*.98,df.loc[len(df)-1,'Confirmed']), \n                xytext =(len(df)-10,df.loc[len(df)-1,'Confirmed']*1.5),  \n                arrowprops= myArrowProp1)\n    \n    #check if exponential curve intersects within the limit of y\n    if (int(y7exp) > int(lim[3])):\n        projected_values = np.array([int(y7lin),int(y7deg2),int(y7deg3)])\n    else:\n        projected_values = [int(y7lin),int(y7deg2),int(y7deg3),int(y7exp)]\n    projected_max = projected_values.max()\n    projected_min = projected_values.min()\n    \n    ax.annotate(strDate7,xy=(d7,0),xytext = (d7-8,lim[3]*0.02),arrowprops = myArrowProp3)\n    ax.annotate(projected_min,xy=(d7,projected_min),xytext=(d7-7,projected_min*0.5),arrowprops= myArrowProp1)\n    ax.annotate(projected_max,xy=(d7,projected_max),xytext=(d7+4,projected_max*1.5),arrowprops= myArrowProp2)\n\n    \n    #txtbox = \n    ax.legend(loc='upper center', ncol = 5)\n    ax.grid(True)\n    ax.set_xlabel(\"No of Days\")\n    ax.set_ylabel(\"Cases\")\n    \n\n# plt.title(\"Actual and Projected Confirmed Cases\", fontsize = 20, color='#068b81');","c6ecc0b5":"display(HTML(\"<a href=#top>Top<\/a>\"))","fc8bcbd7":"display(HTML(\"<a id='DeathsProjections'><\/a>\"))\ndfcountries = dfNChina[dfNChina.Date == dfNChina.Date.max()].groupby('Country').sum().sort_values('Deaths',ascending=False).head(9)\ncountries = np.array(dfcountries.index)\nif not('India'in countries):\n    countries = np.append(countries,'India')\nfig = plt.figure(figsize=(10,100));\n#plt.subplots_adjust(hspace = 1.0)\nfor i in range(1,11):\n    ax = plt.subplot(10,1,i)\n    df = dfMain[(dfMain.Country == countries[i-1])& (dfMain.Deaths >=1)].groupby(['Country','Date']).sum().reset_index()\n    #plt.xticks(ticks=np.arange(0,len(df),1))\n    ax.plot(np.arange(0,len(df)),df.Deaths,marker='o', label = \"Actual\",color='k')\n    no_of_days = len(df)\n    x= np.arange(0,len(df))\n    y = df.Deaths\n    \n    \n\n    varDate = df.Date.min().strftime(\"%d-%m-%Y\")\n    \n    \n    #linear fit coeff:\n    popt1,pcov1 = curve_fit(linfit,x,y,[1,1])\n    popt2,pcov2 =curve_fit(deg2fit,x,y,[1,1,1])\n    popt3,pcov3 =curve_fit(deg3fit,x,y,[1,1,1,1])\n    popte,pcove = curve_fit(expfit,x,y)\n    popt7,pcov7 = curve_fit(linfit,x[-7:],y[-7:],[1,1])#7 days\n    #print(popt2[0])\n#     poly_coeff = np.polyfit(x,y,2)\n#     y2 = np.poly1d(poly_coeff)\n    #ax.plot(x,y2(x),label=\"Projected\",linestyle= ':',color='red')\n\n    #projected for 15 days since 100 confirmations\n    x= np.arange(0,len(df)+15,1)\n    #for exponential take only5 days:\n    xe =np.arange(0,len(df)+5,1)\n    \n    x7 = np.arange(len(df)-6,len(df)+15,1)\n\n    y1 = linfit(x,*popt1) # projected y for x\n    y2 = deg2fit(x,*popt2)\n    y3 =deg3fit(x,*popt3)\n    ye = expfit(xe,*popte)\n    y7 = linfit(x7,*popt7)\n    \n\n    lim = [y1.max(),y2.max(),y3.max(),ye.max()]# get the limits of the graph\n    #print(lim)\n    d7 = no_of_days+7 #get the day 7 days from the last update\n    date7 = df.Date.max()+pd.DateOffset(days = 7)\n    strDate7 = date7.strftime(\"%d-%m-%Y\")\n    lastUpdate = df.Date.max().strftime(\"%d-%m-%Y\")\n\n    \n    #plot a vertical line 7 days from the date of last update\n    ax.axvline(x=d7,color='red',linestyle='dotted')\n    \n    #plot a parallel line from last data point to d7 vertical line\n    #ax.axhline(y=df.Deaths.max())\n    \n    #plot a marker at intersection of the 7 day line\n    y7lin = linfit(d7,*popt1)\n    y7deg2 = deg2fit(d7,*popt2)\n    y7deg3 = deg3fit(d7,*popt3)\n    y7exp = expfit(d7,*popte)\n    y7mov = linfit(d7,*popt7)\n    \n    #check if exponential curve intersects within the limit of y\n    if (int(y7exp) > int(lim[3])):\n        projected_values = np.array([int(y7lin),int(y7mov),int(y7deg2),int(y7deg3)])\n    else:\n        projected_values = ndarray.sort([int(y7lin),int(y7mov),int(y7deg2),int(y7deg3),int(y7exp)])\n    projected_max = projected_values.max()\n    projected_min = projected_values.min()\n    if (projected_min <=y.max()):\n        projected_min=projected_values[projected_values>y.max()][0]\n        print(countries[i-1],y.max(),projected_min)\n    \n    ax.plot(d7,projected_max,marker='o',color='red')\n    ax.plot(d7,projected_min,marker='o',color='red')\n    #ax.plot(d7,y7deg3,marker='o',color='red')\n#   \n    ax.plot(x,y1,linestyle ='-.',label='linear')\n    ax.plot(x,y2,linestyle = '--',label = 'deg2')\n    ax.plot(x,y3,label ='deg3')\n    ax.plot(xe,ye,label ='exp')\n    ax.plot(x7,y7,linestyle=\"-\",label='7days')\n\n    y = (poly_coeff[0]*x**2) +(poly_coeff[1]*x)+poly_coeff[2]\n#     ax.plot(x,y,linestyle= ':',label =\"Projected_deg2\",color='purple')\n    ax.set_title(countries[i-1]+ \": Deaths-Reported and Trends\")\n    strPlotComments= 'Last updated on: '+ lastUpdate\n    strPlotComments += '\\n'+ 'Projected 7 days: '+ str(int(projected_min))+' to '+ str(int(projected_max))\n    ax.text(0,lim[3]*0.9,strPlotComments,fontsize = 10)\n    \n\n    bb_box = dict(boxstyle='square',fc='w',alpha=1.0)\n    \n    myArrowProp1 = dict(arrowstyle='->',color='black') #define arrow style and colour = black\n    myArrowProp2 = dict(arrowstyle='->',color='blue')#define arrow style and colour = blue\n    myArrowProp3 = dict(arrowstyle='->',color='red')#define arrow style and colour = blue    \n    \n    ax.annotate(str(df.loc[len(df)-1,'Deaths']),  \n                xy=(len(df)*.98,df.loc[len(df)-1,'Deaths']), \n                xytext =(len(df)-10,df.loc[len(df)-1,'Deaths']*1.5),  \n                arrowprops=dict(arrowstyle='->',color='b'))\n    \n    \n    ax.annotate(strDate7,xy=(d7,0),xytext = (d7-8,lim[3]*0.05),arrowprops = myArrowProp3)\n    ax.annotate(projected_min,xy=(d7,projected_min),xytext=(d7+4,projected_min*0.75),arrowprops= myArrowProp1)\n    ax.annotate(projected_max,xy=(d7,projected_max),xytext=(d7+4,projected_max*1.5),arrowprops= myArrowProp2)\n\n    \n    ax.legend(loc='upper center',ncol=5)\n    plt.xticks(ticks=np.arange(0,len(x),2))\n    ax.grid(True)\n    ax.ticklabel_format(useOffset = False)\n#plt.title(\"Actual and Projected Loss of lives\", fontsize=20, color='#068b81');\ndisplay(HTML(\"<a href=#top>Top<\/a>\"))","5e4fe195":"[Back to Top](#top)","6afb94c1":"<a id=\"top\"><\/a>\n<h4> Hello,this is my effort at Data Visualisation using the Covid-19 dataset maintained by the John Hopkins Medical College<\/h4>\n\n#### Table of Contents\n\n1. [Basic Numbers](#BasicNumbers)\n2. [Top Twenty Countries with Loss of Lives](#TableTopTwenty)\n3. [Global increase in Cases,Deaths and Recoveries](#GlobalGraph)\n4. [Loss of life Top 20](#barTop20)\n5. [Confirmed Cases: Reported and Trends](#ConfirmedProjections)\n6. [Deaths: Reported and Trends](#DeathsProjections)","360290c1":"[Back to Top](#top)","662e5a15":"[Top](#top)","1c637151":"[Back to Top](#top)","68fddf0c":"No of Deaths in China - All provinces","5053127f":"#### The figures below show the reported deaths over time and projections based on a linear, polynomial and exponential growth. Polynomial growth rates are of second deg (marked as deg2) and third degree (marked as deg3) while the linear and exponential growths are marked as 'linear' and 'exp' respectively.","b551a432":"#### The graphs below plot the reported cases and projections based on linear, polynomial and exponential curve fit.The curves are drawn using the acutal data. Polynomial curves are two types - deg2 which is of the form of at^2+bt+c and deg3 which is of the form at^3+bt^2+ct+d","f2b44016":"[Back to Top](#top)"}}