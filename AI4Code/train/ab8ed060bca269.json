{"cell_type":{"cfb777e5":"code","e9e9c899":"code","954b701d":"code","d609030d":"code","f7300070":"code","2bb8a9d8":"code","5d09df0c":"code","237a2471":"code","7ec731c0":"code","b4a43de4":"code","cdff02da":"code","028287b2":"code","fe6d446c":"code","4fb30f93":"code","f5504877":"markdown","326f6e36":"markdown","706de7c1":"markdown","3d687d8d":"markdown","0699b888":"markdown","8c27e23a":"markdown","f0d22bd9":"markdown","459c1741":"markdown","51b8e3fc":"markdown","cd6f6c14":"markdown","94aa4962":"markdown","3ccd9fe0":"markdown","20c37096":"markdown","ab21e926":"markdown","f29e9a6a":"markdown","0018d728":"markdown","6be16c7a":"markdown","db53644c":"markdown","4c86500f":"markdown","40ed52fa":"markdown","88b37d37":"markdown"},"source":{"cfb777e5":"import numpy as np\nimport pandas as pd\nimport scipy as sp\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport operator\n%matplotlib inline","e9e9c899":"dataset = pd.read_csv(\"..\/input\/restaurantrecommendationdata\/train_100k.csv\")\ndataset.head()","954b701d":"dataset.isnull().sum()","d609030d":"dataset.shape","f7300070":"def generate_id(df, column_name, id_column):\n    \n    value_list = df[column_name].unique().tolist()\n    int_value_list = [i for i in range(len(value_list))]\n    id_list = []\n    \n    for i in df[column_name]:\n        id_list.append(int_value_list[ value_list.index(i) ])\n    \n    df[id_column] = id_list\n\ndef similar_user_recs(user, interaction_mat, user_sim):\n\n    if user not in interaction_mat.columns:\n        return('No data available on user {}'.format(user))\n\n    sim_users = user_sim.sort_values(by=user, ascending=False).index[1:11]\n    best = []\n    most_common = {}\n\n    for i in sim_users:\n        max_score = interaction_mat.loc[:, i].max()\n        best.append(interaction_mat[interaction_mat.loc[:, i]==max_score].index.tolist())\n    for i in range(len(best)):\n        for j in best[i]:\n            if j in most_common:\n                most_common[j] += 1\n            else:\n                most_common[j] = 1\n    sorted_list = sorted(most_common.items(), key=operator.itemgetter(1), reverse=True)\n    return sorted_list[:5]   ","2bb8a9d8":"generate_id(dataset, 'customer_id', 'id_customer')\ndataset.head()","5d09df0c":"restaurant_id_list = list(dataset['restaurant_id'].unique())\nrestaurant_id_list[:10]","237a2471":"customer_list = list(dataset['id_customer'].unique())\ncustomer_list[:10]","7ec731c0":"interaction_dict = dict()\nfor id_name in restaurant_id_list:\n    temp_user_order = []\n    for customer in customer_list:\n        temp_user_order.append( dataset[ (dataset['id_customer']==customer) & (dataset['restaurant_id']==id_name) ].shape[0] )\n    interaction_dict[str(id_name)] = temp_user_order\n#interaction_dict","b4a43de4":"interaction_dataset = pd.DataFrame(interaction_dict)\ninteraction_dataset","cdff02da":"interaction_dataset = interaction_dataset.T\ninteraction_dataset","028287b2":"inter_sparse_data = sp.sparse.csr_matrix(interaction_dataset.values)\ninter_sparse_data","fe6d446c":"user_similarity = cosine_similarity(inter_sparse_data.T)\nuser_sim = pd.DataFrame(user_similarity, index = interaction_dataset.columns, columns = interaction_dataset.columns)\nuser_sim","4fb30f93":"similar_user_recs(0, interaction_dataset, user_sim)","f5504877":"## Transpose Dataset to fit the interaction matrix","326f6e36":"# Making Recommendations","706de7c1":"### In this section we will build an interaction matrix that will be used to train our collaborative filetering recommendation. As, collaborative filtering works with the interaction between item and user we can't use the dataset as it is","3d687d8d":"## Importing the dataset","0699b888":" # Conclusion\n ### This is a test on the recommendation system on the restaurant dataset. It can be enhanced through applying various conditions and improving weight on the interaction matrix. The location also has a huge impact on the interaction system. However, for simplified learning I have ignored it for now. Kindly comment if you have any suggestions or advice regarding this notebook","8c27e23a":"# Collaborative Filtering Recommendation","f0d22bd9":"### Also the unique customer id that we generated will also be used later. I put it here just to have a glimpse of what we are expecting","459c1741":"# Importing Important Libraries","51b8e3fc":"### Let's see the unique restaurant id's that is present in our dataset. We will need this later in our process.","cd6f6c14":"### So our restaurant dataset has a total of 17 columns and 100000 rows. However, the customer id is of object type and our model is not able to handle object type data. So, we need to do something about it. In the next section we will preprocess our data and generate unique id number for customers. Since, there is no missing value we don't need to do any imputation for this dataset","94aa4962":"### Now, we have a dataset that has number of total restaurant as columns and number of total customer id's as rows. This represents our interaction matrix where each row represents how many the user has made order from that particular restaurant. This will be used to make weight for user\/item interaction in out interaction matrix.","3ccd9fe0":"## Important Functions","20c37096":"## Let's check the number of columns or rows for our restaurant dataset","ab21e926":"### Here the first value the tuple represents the restaurant id and the second value represents the user that is most similar in terms of interactions.","f29e9a6a":"# Dataset Import and Preparations","0018d728":"## Unique id generation for customer_id column","6be16c7a":"## Interaction Matrix Creation","db53644c":"## Here we will convert our dataset to sparse array as it will be helpful for our system to work on interaction matrix efficiently","4c86500f":"### In this section we will generate an interaction matrix that will be used for our recommendation system. First we will generate a dictionary then we will parse that dictionary to our pandas dataset.","40ed52fa":"## Finding Cosine Similarity Between User\/Item","88b37d37":"## Checking whether any columns has missing value"}}