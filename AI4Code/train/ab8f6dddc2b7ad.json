{"cell_type":{"ed5929a9":"code","52aa3aaa":"code","a45070c5":"code","ca3d7c19":"code","d698ff9d":"markdown","6b88cf67":"markdown","cf31060c":"markdown","ad2bb07e":"markdown"},"source":{"ed5929a9":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.cluster.util import cosine_distance\nimport numpy as np\nimport networkx as nx # NetworkX is a package for the Python programming language that's used to create, manipulate, and study the structure, dynamics, and functions of complex graph networks","52aa3aaa":"def read_article(file_name):\n    sentences = []\n    file = open(file_name, 'r') \n    f_data = file.readlines()\n    f_data = [x for x in f_data if x != '\\n'] # it should remove any break present\n    f_data = [x.replace('\\n',' ') for x in f_data] #this would remove that end of line\n    f_data = ''.join(f_data) \n    article = f_data.split('. ') \n    for sentence in article:\n        sentences.append(sentence.replace(\"^[a-zA-Z0-9!@#$&()-`+,\/\\\"]\", \" \").split(\" \"))\n    return sentences","a45070c5":"def build_similarity_matrix(sentences, stop_words):\n    similarity_matrix = np.zeros((len(sentences), len(sentences)))  # Create an empty similarity matrix\n    \n    for idx1 in range(len(sentences)):\n        for idx2 in range(len(sentences)):\n            if idx1 == idx2: # ignore if both are same sentences\n                continue \n                similarity_matrix[idx1][idx2] = sentence_similarity(sentences[idx1], sentences[idx2], stop_words)\n    return similarity_matrix","ca3d7c19":"def generate_summary(file_name, top_n=5):\n    \n    # nltk.download(\"stopwords\")    ### if not already installed, delete the # and run the code one time\n    stop_words = stopwords.words('english')\n    summarize_text = []\n\n    # Step 1 - Input Article and split it into Sentences\n    sentences =  read_article(file_name)\n\n    # Step 2 - Build a Similary Martix across sentences & remove Stop Words\n    sentence_similarity_martix = build_similarity_matrix(sentences, stop_words)\n\n    # Step 3 - Generate rank based on Matrix\n    sentence_similarity_graph = nx.from_numpy_array(sentence_similarity_martix)\n    scores = nx.pagerank(sentence_similarity_graph)\n\n    # Step 4 - Sort the rank and pick top sentences\n    ranked_sentence = sorted(((scores[i],s) for i,s in enumerate(sentences)), reverse=True)    \n    print(\"Indexes of top ranked_sentence order are \", ranked_sentence)    \n\n    for i in range(top_n):\n      summarize_text.append(\" \".join(ranked_sentence[i][1]))\n\n    # Step 5 - output the summarized text\n    print(\"Summarize Text: \\n\", \". \".join(summarize_text))\n\n\ngenerate_summary(\"Readme_test.txt\",3) # we choose randomly 3 to have the top 3 sentences as output. you can choose more or less also","d698ff9d":"### We start our Algo step by step","6b88cf67":"### Import our essential Librairies","cf31060c":"### Define a Cosine Similarity matrix","ad2bb07e":"### Create our function 'Sentences' for a later use"}}