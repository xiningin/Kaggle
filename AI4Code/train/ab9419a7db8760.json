{"cell_type":{"c07d4c7e":"code","4d6b5a7b":"code","ec7dac29":"code","b9874f64":"code","61f64341":"code","724825f5":"code","59c1cbae":"code","a67dde0b":"code","d6f8ece1":"code","8bf18fc0":"code","fc72bfcc":"code","a8eec5cd":"code","445459f3":"code","f81d193a":"code","fec85e86":"code","0ce656db":"code","fe2f889e":"code","90d774a1":"code","dfb74c06":"code","29adf141":"code","cfa9aeee":"code","91c1afd0":"code","7e99c355":"code","f37b822e":"code","17f55760":"code","0a645b6f":"code","5eb40744":"code","13baac25":"code","a9498a3d":"code","c059f1e5":"code","35ccfd71":"code","9319e901":"code","64cd7380":"code","7ca8b9e6":"code","60ea3770":"code","33d98213":"code","2db80c38":"code","797f56be":"markdown","101ea903":"markdown","01fce32d":"markdown","2b86a8b0":"markdown","857f604e":"markdown","cc7e08c6":"markdown","58a5d2d1":"markdown","a7d9abe9":"markdown","7a503919":"markdown","625125a2":"markdown","aeb5d2c0":"markdown","85bf18ee":"markdown","3712563d":"markdown","1112d3f8":"markdown","4f9a60e6":"markdown","78a0b1d0":"markdown","18fbfff9":"markdown","9a87e888":"markdown"},"source":{"c07d4c7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4d6b5a7b":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","ec7dac29":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","b9874f64":"train.head()","61f64341":"train.describe(include=\"all\")","724825f5":"train.info()","59c1cbae":"round(100*(train.isnull().sum()\/len(train.index)),2)","a67dde0b":"train.isnull().sum()","d6f8ece1":"print(\"Female\", train[\"Survived\"][train[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)\nprint(\"Male\", train[\"Survived\"][train[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)\nsns.barplot(x='Sex', y='Survived', data=train) ## Analysing the Male survived versus Female","8bf18fc0":"print(\"1 - Upper Class\", train['Survived'][train['Pclass'] == 1].value_counts(normalize = True)[1]*100)\nprint(\"2 - Middle Class\", train['Survived'][train['Pclass'] == 2].value_counts(normalize = True)[1]*100)\nprint(\"3 - Lower Class\", train['Survived'][train['Pclass'] == 3].value_counts(normalize = True)[1]*100)\nsns.barplot(x='Pclass',y='Survived',data=train) # Checking class wise survived.","fc72bfcc":"sns.barplot(x='SibSp',y='Survived',data=train)\nprint(\"SibSp=0\", train['Survived'][train['SibSp']==0].value_counts(normalize=True)[1]*100)\nprint(\"SibSp=1\", train['Survived'][train['SibSp']==1].value_counts(normalize=True)[1]*100)\nprint(\"SibSp=2\", train['Survived'][train['SibSp']==2].value_counts(normalize=True)[1]*100)\nprint(\"SibSp=3\", train['Survived'][train['SibSp']==3].value_counts(normalize=True)[1]*100)\nprint(\"SibSp=4\", train['Survived'][train['SibSp']==4].value_counts(normalize=True)[1]*100)","a8eec5cd":"sns.barplot(x='Parch',y='Survived',data=train)\nprint(\"Parch = 0\", round(train['Survived'][train['Parch']==0].value_counts(normalize=True)[1]*100,2), \"%\")\nprint(\"Parch = 1\", round(train['Survived'][train['Parch']==1].value_counts(normalize=True)[1]*100,2), \"%\")\nprint(\"Parch = 2\", round(train['Survived'][train['Parch']==2].value_counts(normalize=True)[1]*100,2), \"%\")\nprint(\"Parch = 3\", round(train['Survived'][train['Parch']==3].value_counts(normalize=True)[1]*100,2), \"%\")\n#print(\"Parch = 4\", round(train['Survived'][train['Parch']==4].value_counts(normalize=True)[1]*100,2), \"%\")\nprint(\"Parch = 5\", round(train['Survived'][train['Parch']==5].value_counts(normalize=True)[1]*100,2), \"%\")","445459f3":"#sort the ages into logical categories\ntrain[\"Age\"] = train[\"Age\"].fillna(-0.5)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.5)\nbins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\n\n#draw a bar plot of Age vs. survival\nsns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train)\nplt.show()","f81d193a":"train['cabinbool']=train['Cabin'].notnull().astype(int)\ntest['cabinbool']=test['Cabin'].notnull().astype(int)","fec85e86":"print(\"Cabin alloted = \", round(train['Survived'][train['cabinbool']==1].value_counts(normalize=True)[1]*100,2), \"%\")\nprint(\"Cabin not alloted= \", round(train['Survived'][train['cabinbool']==0].value_counts(normalize=True)[1]*100,2), \"%\")","0ce656db":"sns.barplot(x='cabinbool',y='Survived',data=train)","fe2f889e":"# Dropping this because it has 77% null data\ntrain=train.drop(['Cabin'],axis=1)\ntest=test.drop(['Cabin'],axis=1)","90d774a1":"#we can also drop the Ticket feature since it's unlikely to yield any useful information\ntrain = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)","dfb74c06":"print ('Numer of People embarked from Southampton: ', train[train['Embarked']=='S'].shape[0])\nprint ('Numer of People embarked from Cherbourg: ', train[train['Embarked']=='C'].shape[0])\nprint ('Numer of People embarked from Queenstown: ', train[train['Embarked']=='Q'].shape[0])","29adf141":"#0.22% values are miising. So imputing it with popular one \"S\"\ntrain['Embarked']=train['Embarked'].fillna(value='S')","cfa9aeee":"#create a combined group of both datasets\ncombine = [train, test]\n\n#extract a title for each Name in the train and test datasets\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train['Title'], train['Sex'])","91c1afd0":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Capt', 'Col',\n    'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Don'], 'Rare')    \n    dataset['Title'] = dataset['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","7e99c355":"#map each of the title groups to a numerical value\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Royal\": 5, \"Rare\": 6}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain.head()","f37b822e":"# fill missing age with mode age group for each title\nmr_age = train[train[\"Title\"] == 1][\"AgeGroup\"].mode() #Young Adult\nmiss_age = train[train[\"Title\"] == 2][\"AgeGroup\"].mode() #Student\nmrs_age = train[train[\"Title\"] == 3][\"AgeGroup\"].mode() #Adult\nmaster_age = train[train[\"Title\"] == 4][\"AgeGroup\"].mode() #Baby\nroyal_age = train[train[\"Title\"] == 5][\"AgeGroup\"].mode() #Adult\nrare_age = train[train[\"Title\"] == 6][\"AgeGroup\"].mode() #Adult\n\nage_title_mapping = {1: \"Young Adult\", 2: \"Student\", 3: \"Adult\", 4: \"Baby\", 5: \"Adult\", 6: \"Adult\"}\n\nfor x in range(len(train[\"AgeGroup\"])):\n    if train[\"AgeGroup\"][x] == \"Unknown\":\n        train[\"AgeGroup\"][x] = age_title_mapping[train[\"Title\"][x]]\n        \nfor x in range(len(test[\"AgeGroup\"])):\n    if test[\"AgeGroup\"][x] == \"Unknown\":\n        test[\"AgeGroup\"][x] = age_title_mapping[test[\"Title\"][x]]","17f55760":"#map each Age value to a numerical value\nage_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)\n\ntrain.head()","0a645b6f":"train= train.drop(['Age'], axis=1)\ntest= test.drop(['Age'], axis=1)","5eb40744":"age_map={\"male\":0, \"female\":1}\ntrain['Sex']=train['Sex'].map(age_map)\ntest['Sex']=test['Sex'].map(age_map)","13baac25":"embarked_map={\"S\":0, \"C\":1,\"Q\":2}\ntrain['Embarked']=train['Embarked'].map(embarked_map)\ntest['Embarked']=test['Embarked'].map(embarked_map)","a9498a3d":"#fill in missing Fare value in test set based on mean fare for that Pclass \nfor x in range(len(test[\"Fare\"])):\n    if pd.isnull(test[\"Fare\"][x]):\n        pclass = test[\"Pclass\"][x] #Pclass = 3\n        test[\"Fare\"][x] = round(train[train[\"Pclass\"] == pclass][\"Fare\"].mean(), 4)\n\n#map Fare values into groups of numerical values\ntrain['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])","c059f1e5":"train = train.drop(['Fare'], axis = 1)\ntest = test.drop(['Fare'], axis = 1)\n\ntrain = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","35ccfd71":"train.head(10)","9319e901":"test.head(10)","64cd7380":"train.info()","7ca8b9e6":"from sklearn.model_selection import train_test_split\n\npredictors = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train[\"Survived\"]\nx_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.22, random_state = 0)","60ea3770":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)","33d98213":"y_pred = logreg.predict(x_val)\nacc_logreg = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_logreg)","2db80c38":"#set ids as PassengerId and predict survival \nids = test['PassengerId']\npredictions = logreg.predict(test.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","797f56be":"###  PClass Feature","101ea903":"### Embarked Feature Imputing","01fce32d":"## Data Visualizations","2b86a8b0":"## Cleaning data","857f604e":"### Age Feature Cleaning\/Imputing","cc7e08c6":"### Splitting the Training Data","58a5d2d1":"### Importing required Libraries","a7d9abe9":"##### Fare","7a503919":"###  SibSp Feature","625125a2":"### Age Feature","aeb5d2c0":"## Sources:\n* [Titanic Survival Predictions (Beginner)](https:\/\/www.kaggle.com\/nadintamer\/titanic-survival-predictions-beginner)","85bf18ee":"### Cabin Feature","3712563d":"### Parch Feature  ","1112d3f8":"###### Embarked","4f9a60e6":"##### Sex","78a0b1d0":"### Sex Feature","18fbfff9":"### Inspecting the Data","9a87e888":"### Creating Submission File"}}