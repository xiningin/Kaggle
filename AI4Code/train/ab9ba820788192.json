{"cell_type":{"6728b63a":"code","56a4c601":"code","0bc93cb0":"code","411ceac8":"code","6825dc24":"code","2e8667ac":"code","b39147c9":"code","22316436":"markdown","fb1661bf":"markdown","8ca7ef35":"markdown","00e9d8f4":"markdown","725ef5d6":"markdown","42a2977a":"markdown","708e11cc":"markdown"},"source":{"6728b63a":"%matplotlib inline\nimport os\nimport pandas as pd\nimport pycountry\nfrom plotly import tools\nimport plotly.graph_objs as go \nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.neighbors import KernelDensity\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True) \n\n\ndef clean_usa_city_and_country(c):\n    if len(c['Country']) == 2:\n        c['City'] = c['City'] + ', ' + c['Country']\n        c['Country'] = 'United States'\n    return c['City'], c['Country']\n","56a4c601":"df = pd.read_csv('..\/input\/cost-of-living-2016.csv')\ndf.head(3)","0bc93cb0":"rename_rules = {\n    'Cost.of.Living.Index' : 'CLI',\n    'Rent.Index': 'RI',\n    'Cost.of.Living.Plus.Rent.Index': 'CLRI',\n    'Groceries.Index' : 'GI',\n    'Restaurant.Price.Index': 'RPI',\n    'Local.Purchasing.Power.Index': 'LPPI'\n}\ndf.rename(columns=rename_rules, inplace=True)\ndf['City'], df['Country'] = zip(*df.apply(clean_usa_city_and_country, axis=1).values)\ndf[df['Country'] == 'Germany'].head(3)","411ceac8":"df_groupby_country = df.groupby(['Country']).mean().round(2)\ndata = dict(type=\"choropleth\",\n           locations = df_groupby_country.index.values,\n            locationmode = \"country names\",\n           z = df_groupby_country['CLI'],\n           text = df_groupby_country.index.values,\n           colorbar = {'title':'CLI'})\n\nlayout = dict(title=\"World AVG Cost of Living Index 2016\",\n             geo = dict(showframe=False,\n                      projection = {'type':'mercator'}))\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","6825dc24":"df_sort_by_cli = df.sort_values(['CLRI'], ascending=False)\ndf_cli_top10 = df_sort_by_cli.head(10)\n\nindices = ['CLRI','CLI','RI','GI', 'RPI']\ndata = []\nfor idx in indices:\n    bar = go.Bar(\n        x=df_cli_top10['City'] + ', ' + df_cli_top10['Country'],\n        y=df_cli_top10[idx] - 100,\n        name=idx,\n        opacity=0.6\n    )\n    data.append(bar)\n\nlayout = go.Layout(\n    barmode='group',\n    title='Top 10 most expensive cities in comparision to New York',\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='grouped-bar')","2e8667ac":"indices = ['CLI','RI','GI','RPI']\n\nfig = tools.make_subplots(rows=2, cols=2, subplot_titles=('Cost of Living Index', 'Rent Index',\n                                                          'Groceries Index', 'Restaurant Prices Index'))\nfor i,idx in enumerate(indices):\n    row = i \/\/ 2 + 1\n    col = i % 2 + 1\n    fig.append_trace(go.Histogram(x=df[idx], histnorm='probability', opacity=0.6), row, col)\n    \nfig['layout'].update(title='Histograms', showlegend=False)\n\niplot(fig)","b39147c9":"from bokeh.plotting import figure, output_notebook, show, save, output_file\nfrom bokeh.layouts import row\nfrom bokeh.core.properties import value\nfrom bokeh import palettes\nfrom bokeh.plotting import figure\nfrom bokeh.transform import dodge\nfrom bokeh.models import CheckboxGroup, CustomJS, ColumnDataSource, FactorRange\nimport numpy as np\n\noutput_notebook()\ndf_top_5 = df.sort_values(['CLI'], ascending = False).head(5)\n\nto_select_cols = ['Cappuccino(regular)','Milk(regular)(1 liter)', 'Water(0.33 liter bottle)', 'Eggs(12)','Water(1.5 liter bottle)',\n               'Domestic Beer (0.5 liter bottle)','Apples (1kg)', 'Cinema, International Release, 1 Seat', 'One-way Ticket (Local Transport)']\n\ncols_selection = CheckboxGroup(labels=to_select_cols, \n                                  active = [0, 1,2,3,4], width=200)\n\n\ndata = {'cities': df_top_5['City'].values}\nplot = {}\nmax = 0;\nfor col in to_select_cols:\n    data[col] = df_top_5[col].values\n    local_max = df_top_5[col].values.max()\n    if local_max > max:\n        max = local_max\nsource = ColumnDataSource(data=data)\n\np = figure(x_range=data['cities'], y_range=[0,int(max*1.7)],\n           toolbar_location=None, tools=\"\", sizing_mode='stretch_both')\ncolors = palettes.Category20[len(to_select_cols)]\n\nfor idx,col in enumerate(to_select_cols):\n    w = 0.8 \/ len(to_select_cols)\n    x = p.vbar(x=dodge('cities', - (len(to_select_cols)*w\/2) + idx*w , range=p.x_range), top=col, width=w, source=source,\n       color=colors[idx], legend=value(col), fill_alpha = 0.5)\n    plot[col] = x\np.legend.location = \"top_left\"\n#p.legend.click_policy=\"mute\"\np.legend.visible = True\np.legend.border_line_alpha = 0.1\np.legend.background_fill_alpha = 0.1\ncallback = CustomJS(args=dict(plot = plot, cols = to_select_cols, src=source, fig = p), code=\"\"\"\n        for (var i = 0; i < cols.length; i++){\n            var col = cols[i];\n            plot[col].visible = cb_obj.active.indexOf(i) > -1;\n        }\n        var max = 0;\n        var data = src.data\n        for (var i = 0; i < cols.length; i++){\n            if (cb_obj.active.indexOf(i) < 0) continue;\n            for (var j = 0; j < data[cols[i]].length; j++){\n                max = max > data[cols[i]][j] ? max :  data[cols[i]][j];\n            }\n        }\n        if (cb_obj.active.length == 0) max = 10;\n        fig.y_range.end = max*1.7;\n        fig.y_range.start = 0;\n    \"\"\")\ncols_selection.callback = callback\nshow(row(cols_selection, p, sizing_mode = \"fixed\"))","22316436":"## Imports","fb1661bf":"# EDA Cost of Living 2016","8ca7ef35":"## Histograms","00e9d8f4":"## Top 10 most expensive cities","725ef5d6":"## Cost of Living Index on World Map","42a2977a":"## Rename some columns","708e11cc":"## Interactive chart of goods and services"}}