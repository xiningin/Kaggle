{"cell_type":{"7a879ad1":"code","b988e4e6":"code","71c49156":"code","8948c323":"code","2fde18b3":"code","575d6804":"code","5e74f4dc":"code","124ec021":"code","19492d2a":"code","45c027a3":"code","5c610138":"code","fbb2d1f4":"code","c7894566":"code","a6ca8285":"markdown","5d8d8bbc":"markdown","ec06ea60":"markdown","1a5f73ae":"markdown"},"source":{"7a879ad1":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import feature_selection\nfrom sklearn import tree","b988e4e6":"#read data\ndata = pd.read_csv(\"..\/input\/brasilian-houses-to-rent\/houses_to_rent.csv\")","71c49156":"#primary selection of parameters\n#parameters 'hoa', 'rent amount', 'property tax' and 'fire insurance' at sum give parameter 'total', so they are not nesessary\n\ndata = data[\n    [ \"area\", \"rooms\", \"bathroom\", \"parking spaces\", \"floor\", \"animal\", \"furniture\", \"total\"]\n]\n\nprint(data)","8948c323":"#converting data into needed form\n\ni = 0\nfor i in data.index:\n    if( data[\"floor\"][i]==\"-\" ):\n        data[\"floor\"][i]=0\n    else:\n        data[\"floor\"][i]=int(data[\"floor\"][i])\n    \n    if( data[\"animal\"][i]==\"acept\" ):\n        data[\"animal\"][i]=1\n    else:\n        data[\"animal\"][i]=0\n    \n    if( data[\"furniture\"][i]==\"furnished\" ):\n        data[\"furniture\"][i]=1\n    else:\n        data[\"furniture\"][i]=0\n    \n    data[\"total\"][i] = int(data[\"total\"][i].split(\"$\")[1].replace(\",\", \"\"))\n\nprint(data)","2fde18b3":"#the most interesting parameter is parameter 'total'\n#firstry we shall calculate mean and standart deviation for this parameter\n\nfrom math import sqrt\n\nprint( \"Mean: \"+str(data[\"total\"].mean()) )\nprint( \"Standart deviation: \"+str(sqrt(data[\"total\"].std())) )","575d6804":"#Parameter 'area' is interesting too\n\nprint( \"Mean: \"+str(data[\"area\"].mean()) )\nprint( \"Standart deviation: \"+str(sqrt(data[\"area\"].std())) )","5e74f4dc":"#here we shall start to build linear regression model\n\nreg_model = LinearRegression()\nX = []\nX_data = data[\n    [\"area\", \"rooms\", \"bathroom\", \"parking spaces\", \"floor\", \"animal\", \"furniture\"]\n]\ny = data[\"total\"]\n\nfor i in data.index:\n    X.append( X_data.loc[i].to_list() )\n\nreg_model.fit(X, y)\nprint(reg_model.coef_)","124ec021":"print( \"R^2=\"+str(reg_model.score(X, y)) )","19492d2a":"#lets see a value of correlation parameter between parameters 'rooms' and 'bathroom'\n\nprint( data[\"rooms\"].corr(data[\"bathroom\"]) )","45c027a3":"#we see good corrrelation\n#so lets to try to build refression model without parameter 'bathroom' and see, is new model better or no\n\ntest_reg_model1 = LinearRegression()\nX_for_test1 = []\nX_data_for_test1 = data[\n    [\"area\", \"rooms\", \"parking spaces\", \"floor\", \"animal\", \"furniture\"]\n]\n\nfor i in data.index:\n    X_for_test1.append( X_data_for_test1.loc[i].to_list() )\n\ntest_reg_model1.fit(X_for_test1, y)\nprint( \"Coeffitients: \"+str(reg_model.coef_) )\nprint( \"R^2=\"+str(test_reg_model1.score(X_for_test1, y)) )","5c610138":"#so without parameter 'bathroom' linear model is worse\n#now lets to add new parameters to build quadratic regression model\n#lets next things: x1 is 'area' variable, x2 is 'rooms' variable, x3 is 'bathroom' variable, x4 is 'parking spaces' variable,\n# x5 is 'floor' varible, x6 is 'animal' variable, x7 is 'furniture' variable, x8 is x1^2, x9 is x2^2, x10 is x3^2, x11 is x4^2\n# x11 is x5^2\n\nquadr_reg_model = LinearRegression()\nX_quadr = []\nX_quadr_data = X_data\nX_add = []\n\nfor i in data.index:\n    X_add = [ pow(X_quadr_data.loc[i][\"area\"], 2) ]\n    X_add+=[ pow(X_quadr_data.loc[i][\"rooms\"], 2), pow(X_quadr_data.loc[i][\"bathroom\"], 2) ]\n    X_add+=[ pow(X_quadr_data.loc[i][\"parking spaces\"], 2), pow(X_quadr_data.loc[i][\"floor\"], 2) ]\n    X_quadr.append( X_quadr_data.loc[i].to_list()+X_add )\n\nquadr_reg_model.fit(X_quadr, y)\nprint( \"Coeffitients: \"+str(quadr_reg_model.coef_) )\nprint( \"R^2=\"+str(quadr_reg_model.score(X_quadr, y)) )","fbb2d1f4":"#now lets try to build cubic regression model\n#lets next things: x1 is 'area' variable, x2 is 'rooms' variable, x3 is 'bathroom' variable, x4 is 'parking spaces' variable,\n# x5 is 'floor' varible, x6 is 'animal' variable, x7 is 'furniture' variable, x8 is x1^2, x9 is x2^2, x10 is x3^2, x11 is x4^2\n# x11 is x5^2, x12 is x2^3, x13 is x3^3, x14 is x4^3, x15 is x5^3\n\ncubic_reg_model = LinearRegression()\nX_cubic = []\nX_cubic_data = X_data\nX_add = []\n\nfor i in data.index:\n    X_add = [ pow(X_cubic_data.loc[i][\"area\"], 2) ]\n    X_add+=[ pow(X_cubic_data.loc[i][\"rooms\"], 2), pow(X_cubic_data.loc[i][\"bathroom\"], 2) ]\n    X_add+=[ pow(X_cubic_data.loc[i][\"parking spaces\"], 2), pow(X_cubic_data.loc[i][\"floor\"], 2) ]\n    X_add+=[ pow(X_cubic_data.loc[i][\"rooms\"], 3), pow(X_cubic_data.loc[i][\"bathroom\"], 3) ]\n    X_add+=[ pow(X_cubic_data.loc[i][\"parking spaces\"], 3), pow(X_cubic_data.loc[i][\"floor\"], 3) ]\n    X_cubic.append( X_cubic_data.loc[i].to_list()+X_add )\n\ncubic_reg_model.fit( X_cubic, y )\nprint( \"Coeffitients: \"+str(cubic_reg_model.coef_) )\nprint( \"R^2=\"+str(cubic_reg_model.score(X_cubic, y)) )","c7894566":"#now try to build non-polynomial regression model\n#and see will oue models better or no\n\nX = []\nX_data = data[\n    [\"area\", \"rooms\", \"bathroom\", \"parking spaces\", \"floor\", \"animal\", \"furniture\"]\n]\n\nfor i in data.index:\n    X.append( np.cbrt(X_data.loc[i].to_list()) )\n\nreg_model.fit(X, y)\nprint(reg_model.coef_)\nprint( \"R^2=\"+str(reg_model.score(X, y)) )","a6ca8285":"As we see building of non-full polynomial regression models without any other actions is not very good idea.","5d8d8bbc":"As we see, linear model is bad.","ec06ea60":"We see, that non-polynomial regression models are better than polynomial but these models can be bad too.","1a5f73ae":"As we see quadratic regression model is better than linear, but it's very bad too."}}