{"cell_type":{"66b97e09":"code","ff672229":"code","dc51aa7a":"code","77b74095":"code","a57bf945":"code","fd9d1b90":"code","e1e33302":"code","b42b95fe":"code","6ac7b02e":"code","be5848a8":"code","902aafef":"code","3d8cbbfd":"code","1cf1c3e8":"code","68357acf":"code","ec8f0b94":"code","dd4952b0":"code","7973c475":"code","58b103ab":"code","3dbab08b":"code","acf74c9b":"code","92509250":"code","286d38c6":"code","38ea8707":"code","fe96db1e":"code","c40b6f33":"code","3b68f5b5":"code","55fea076":"code","80da3de6":"code","f086ff58":"markdown","6b42bc87":"markdown","ed0082b9":"markdown","ea5333dd":"markdown","4e0faef4":"markdown","b037aacd":"markdown","8fb58659":"markdown","63bb9fe0":"markdown","b1251395":"markdown","6da9429e":"markdown","bb33d9e0":"markdown","d77283bd":"markdown","11632183":"markdown","c266fcb4":"markdown","c55ba526":"markdown","876dc860":"markdown","ab2e30b9":"markdown","1abf6d42":"markdown","ff0bb2e3":"markdown","02e643c1":"markdown"},"source":{"66b97e09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ff672229":"data=pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","dc51aa7a":"data.info()","77b74095":"data.head()","a57bf945":"A = data[data[\"class\"]==\"Abnormal\"]\nN = data[data[\"class\"]==\"Normal\"]","fd9d1b90":"labels=data[\"class\"].value_counts().index\nsizes=data[\"class\"].value_counts().values\nplt.figure(figsize=(11,11))\nplt.pie(sizes,labels=(\"Abnormal\",\"Normal\"),autopct=\"%1.f%%\")\nplt.title(\"Value counts of class\",size=25)\nplt.legend()\nplt.show()\nprint(\"Numbers of Value counts\\n\",data.loc[:,'class'].value_counts())","e1e33302":"plt.scatter(A.degree_spondylolisthesis,A.pelvic_incidence,color=\"red\",label=\"Abnormal\")\nplt.scatter(N.degree_spondylolisthesis,N.pelvic_incidence,color=\"green\",label=\"Normal\")\nplt.xlabel(\"degree_spondylolisthesis\")\nplt.ylabel(\"pelvic_incidence\")\nplt.legend()\nplt.show()","b42b95fe":"data[\"class\"]= [1 if i ==\"Abnormal\" else 0 for i in data[\"class\"]]\ny = data[\"class\"].values\nx=data.drop([\"class\"],axis=1)","6ac7b02e":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=1)","be5848a8":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(x_train,y_train)","902aafef":"print(\" {}  knn score: {}\".format(5,knn.score(x_test,y_test)))","3d8cbbfd":"score_list=[]\nfor i in range(1,25):\n    knn2=KNeighborsClassifier(n_neighbors=i)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n\nplt.figure(figsize=(12,8))\nplt.plot(range(1,25),score_list)\nplt.xlabel(\"K values\")\nplt.ylabel(\"Acuuracy\")\nplt.show()","1cf1c3e8":"y_pred = knn.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confision Matrix\")\nplt.show()\n","68357acf":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression(solver='lbfgs')\nlr.fit(x_train,y_train)\nprint()","ec8f0b94":"print(\"Accuracy score: \",lr.score(x_test,y_test))","dd4952b0":"y_pred = lr.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confision Matrix\")\nplt.show()\n","7973c475":"from sklearn.svm import SVC\n\nsvm = SVC(random_state = 1,gamma='auto' )\nsvm.fit(x_train,y_train)\n\nprint(\"Accuracy score: \",svm.score(x_test,y_test))","58b103ab":"y_pred = svm.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","3dbab08b":"from sklearn.naive_bayes import GaussianNB \n\nnb = GaussianNB()\nnb.fit(x_train,y_train)\n\nprint(\"Accuracy score: \",nb.score(x_test,y_test)) ","acf74c9b":"y_pred = nb.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","92509250":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n\nprint(\"Accuracy score: \",dt.score(x_test,y_test)) ","286d38c6":"y_pred = dt.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","38ea8707":"from sklearn.ensemble import RandomForestClassifier\nrt=RandomForestClassifier(n_estimators=35,random_state=1)\nrt.fit(x_train,y_train)\n\nprint(\"score: \",rt.score(x_test,y_test)) ","fe96db1e":"score_list2=[]\nfor i in range(1,50):\n    rt2=RandomForestClassifier(n_estimators=i,random_state=1)\n    rt2.fit(x_train,y_train)\n    score_list2.append(rt2.score(x_test,y_test))\n\nplt.figure(figsize=(12,8))\nplt.plot(range(1,50),score_list2)\nplt.xlabel(\"Esimator values\")\nplt.ylabel(\"Acuuracy\")\nplt.show()","c40b6f33":"y_pred = rt.predict(x_test)\ny_true = y_test\n\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_true,y_pred)\n\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","3b68f5b5":"df = pd.DataFrame(\n{\"classification_models\" : [\"Random Forrest\",\"KNN\",\"Logistic Regression\",\"Naive Bayes\" ,\"Decision Tree\",\"SVM\"],\n\"accuracy_score\" : [0.8709677419354839,0.8548387096774194,0.8548387096774194,0.8225806451612904,0.7903225806451613,0.6774193548387096]},\nindex = [1,2,3,4,5,6])","55fea076":"df.head()","80da3de6":"import plotly.express as px\nfig = px.bar(df, x='classification_models', y='accuracy_score')\nfig.show()","f086ff58":"Accuracy score with Decision Tree: 0.7903225806451613","6b42bc87":"Best accuracy (esimator: 35) with Random Forrest: 0.8709677419354839","ed0082b9":"* K Nearest Neighborhood (KNN)","ea5333dd":"Random Forest is the best choice for this dataset.","4e0faef4":"* Random Forrest","b037aacd":"### Data Analysis","8fb58659":"Accuracy score with Naive Bayes: 0.8225806451612904","63bb9fe0":"### Import dataset","b1251395":"* Naive Bayes","6da9429e":"### Compare","bb33d9e0":"### Data Visualization","d77283bd":"* Logistic Regression","11632183":"I think there's something wrong here","c266fcb4":"* Decision Tree","c55ba526":"Accuracy score with Logistic Regression: 0.8548387096774194","876dc860":"Best accuracy with KNN: 0.8548387096774194","ab2e30b9":"* Support Vector Machine (SVM)","1abf6d42":"Accuracy score with Support Vector Machine:  0.6774193548387096","ff0bb2e3":"# Contents of the kernel\n### Import dataset\n### Data Analysis\n### Data Visualization\n### Machine learning classification models\n* K Nearest Neighborhood (KNN)\n* Logistic Regression\n* Support Vector Machine (SVM)\n* Naive Bayes\n* Decision Tree\n* Random Forrest\n\n### Compare","02e643c1":"### Machine learning classification models"}}