{"cell_type":{"3bd8b6a5":"code","fdcbf915":"code","19be4ef0":"code","ce6fe6a2":"code","cc0487b6":"code","52eafb22":"code","47963e9d":"code","4e84da6e":"code","c36fb501":"code","da5f52f8":"code","0b666e6a":"code","b17c0d43":"code","3a98fe0c":"code","46c2dff3":"code","4b00fb6a":"code","1482ed87":"code","329d0865":"code","f47f5327":"code","93fab769":"code","bffbe0d6":"code","b5c33657":"code","e496eac7":"code","1c34971a":"code","737994a5":"code","f35e00cd":"code","e6e593af":"code","a10db5b9":"code","ebb23f24":"code","b67012dc":"code","2623cc29":"code","80333b81":"code","6530cb60":"code","4695cde8":"code","734dfbaa":"code","6ce60446":"code","42cd2c77":"code","acc6004c":"code","2d1bef4a":"code","8b42d2ec":"code","02e27bf3":"code","3b3f09a2":"code","4f4ca54c":"code","710f31b8":"code","c13d2852":"code","21959868":"code","afafdae5":"code","cd5b15dc":"code","2637d8c8":"code","9ab67e91":"code","809b1612":"code","5b3e7694":"code","57108d81":"code","87473fcf":"code","c70c6166":"code","c766568d":"code","1bf18eda":"code","dedf598f":"code","b10a91a2":"code","81a87e82":"code","27cd2e56":"code","2f952c45":"code","e903240d":"code","8c63d763":"code","10765770":"code","9c5196af":"code","87d75671":"code","099eed87":"code","da9de115":"code","263a4211":"code","f5df8bca":"code","4b68b796":"code","8ec2e35c":"code","7dd4fb32":"code","8996cdea":"code","85e80fdc":"code","d9499a11":"code","fe5cc760":"code","5cdafa41":"code","ff12abc1":"code","97486d92":"markdown","3a7200e7":"markdown","b9b72eb9":"markdown","ce444e01":"markdown","12a9b4c1":"markdown","cbc7b669":"markdown","9d9132da":"markdown","1d21690f":"markdown","7b6f01d7":"markdown","2d3ee301":"markdown","04e1373c":"markdown","bde4b56b":"markdown","767dad24":"markdown","9761427a":"markdown","b506ece2":"markdown","d7371f9d":"markdown","992e8847":"markdown"},"source":{"3bd8b6a5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go","fdcbf915":"import missingno as msno","19be4ef0":"df = pd.read_csv('\/kaggle\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv')","ce6fe6a2":"df.shape","cc0487b6":"df.sample(50)","52eafb22":"\n\ndf['Invoice ID'].is_unique","47963e9d":"df['Invoice ID']","4e84da6e":"\n\ncategorical_features = ['Invoice ID']\n","c36fb501":"numerical_features = []","da5f52f8":"df['Branch'].value_counts()","0b666e6a":"categorical_features.append('Branch')","b17c0d43":"#city","3a98fe0c":"df['City'].value_counts()","46c2dff3":"\ncategorical_features.append('City')","4b00fb6a":"df.columns","1482ed87":"#customer type\ndf['Customer type'].value_counts()","329d0865":"categorical_features.append('Customer type')","f47f5327":"df.Gender.value_counts()","93fab769":"categorical_features.append('Gender')","bffbe0d6":"df.columns","b5c33657":"df['Product line'].value_counts()","e496eac7":"categorical_features.append('Product line')","1c34971a":"#unit Price\ndf['Unit price'].dtype","737994a5":"numerical_features.append('Unit price')","f35e00cd":"\ndf['Quantity'].dtype","e6e593af":"numerical_features.append('Quantity')","a10db5b9":"\nnumerical_features.append('Tax 5%')","ebb23f24":"\nnumerical_features.append('Total')","b67012dc":"df.columns","2623cc29":"df.Payment.value_counts()","80333b81":"categorical_features.append('Payment')","6530cb60":"#Date , time are categorical data \ncategorical_features.append('Date')\ncategorical_features.append('Time')","4695cde8":"#cogs feature","734dfbaa":"# the cogs here is the net selling of goods => unite price * quanitity without taking the tax in considration","6ce60446":"df.cogs.dtype","42cd2c77":"#gross income is the difference between total and cost of these goods which means => the net benifit.\n#gross income is caluclated by the => gross income pecentage \/ 100 * tatal ","acc6004c":"numerical_features.append('cogs')","2d1bef4a":"#'gross margin percentage', 'gross income' are both numerical \nnumerical_features.append('gross margin percentage')\nnumerical_features.append('gross income')","8b42d2ec":"#Rating is numeric float dtype\nprint(df.Rating.max() )\nprint(df.Rating.min())\nprint(df.Rating.unique()) # its not a District Valeu\n\n\nnumerical_features.append('Rating')\n\n","02e27bf3":"#so the rating is a 10 pointes ranges from 4 - 10 =\nnumerical_features.append('Rating')","3b3f09a2":"numerical_features , categorical_features","4f4ca54c":"# now after we make ourself friends with the data lets start or cleaning journy\n# for that we can use the missingno for it \n","710f31b8":"msno.matrix(df)","c13d2852":"#sounds great there is no missing data .. no nead delete or calculating mean and median or anything -- :)","21959868":"#lets the Exploration begines","afafdae5":"df['Customer type'].value_counts().index","cd5b15dc":"#cateforical features \nfor feature in categorical_features:\n    cat = df[feature].value_counts()[:30] # this hould make the adjust the scoop of to the vie\n#     if len(cat) > 6:\n#         plt.rcParams[\"figure.figsize\"] = (20,3)\n#     else:\n#         plt.rcParams[\"figure.figsize\"] = (6,3)\n    fig = go.Figure(go.Bar(x = cat.index, y = cat.values, marker = {'color' : '#2888A7'}))\n    #chart.set_xticklabels(chart.get_xticklabels() , rotation = 90)\n   \n    fig.update_layout(title_text= feature)\n    fig.show()","2637d8c8":"#ideas worth exploring > \n\"\"\"\n#categorical\nwhich hour is the rush hour in the branchs\nwhich product line that is sold the most\nwhich product line that is sold the most foreach branch\nwhat is the distribution of gender among each bransh\nwhat is the distribution of customer type for each branch\nwhat is the prefered payment type of each branch\n\n\n#numerical\nwhat is the rating that each branch get\nwhat is the rating of the brand over all\nwhat is the relation between quantity and gender\nwhich the order of branches with regard of the profit - gross income\n\n\"\"\"","9ab67e91":"# 1.which hour is the rush hour in the branchs","809b1612":"df[categorical_features]","5b3e7694":"import plotly.express as px","57108d81":"df['hour'] = df['Time'].apply(lambda x: x.split(':')[0].strip())","87473fcf":"df.head()","c70c6166":"df.hour.value_counts().values","c766568d":"fig = go.Figure(go.Bar(x = df.hour.value_counts().index, y = df.hour.value_counts().values, marker = {'color' : '#2888A7'}))\nfig.show()","1bf18eda":"pd.pivot_table(df , columns = 'hour' , aggfunc='count' , values = 'Invoice ID')","dedf598f":"#all hours seems to be rush but the noticible ones are 10 , 13, 15  and 19","b10a91a2":"#which product line that is sold the most","81a87e82":"df2 = pd.pivot_table(df , values = 'Invoice ID' ,index = 'Product line' , aggfunc='count')\ndf2","27cd2e56":"sns.countplot(data = df  ,  x = 'Product line' , palette = 'magma')","2f952c45":"#which product line that is sold the most foreach branch\npd.pivot_table(df , values = 'Invoice ID' , index = 'Branch' , columns = 'Product line' , aggfunc = 'count')","e903240d":"sns.countplot(data = df , x = 'Product line' , hue = 'Branch',palette = 'magma')","8c63d763":"df.columns","10765770":"#what is the distribution of gender among each bransh\npd.pivot_table(df , index = 'Gender' , values = 'Invoice ID' , columns = 'Branch' , aggfunc = 'count')","9c5196af":"sns.countplot(data = df , x = 'Branch' , hue = 'Gender' , palette = 'magma')","87d75671":"#what is the distribution of customer type for each branch\npd.pivot_table(df , index = 'Customer type' , values = 'Invoice ID' , columns = 'Branch' , aggfunc = 'count')","099eed87":"sns.countplot(data = df , x = 'Branch' , hue = 'Customer type' ,palette = 'magma')","da9de115":"\"\"\"\n\nwhat is the prefered payment type of each branch\n\n\n#numerical\nwhat is the rating that each branch get\nwhat is the rating of the brand over all\nwhat is the relation between quantity and gender\nwhat the order of branches with regard of the profit - gross income\n\n\"\"\"","263a4211":"df.columns","f5df8bca":"#what is the prefered payment type of each branch\npd.pivot_table(df ,index = 'Payment', values = 'Invoice ID'   , columns = 'Branch' , aggfunc = 'count')","4b68b796":"sns.countplot(data = df , x = 'Branch' , hue = 'Payment'  , palette = 'magma')","8ec2e35c":"#what is the rating that each branch get\n#pd.pivot_table(df , columns = 'Branch' , values = 'Invoice ID' , index = 'Branch' , aggfunc = 'mean' )\nbranch_rating = df[['Branch' ,'Rating']].groupby(by = 'Branch').mean().reset_index()","7dd4fb32":"sns.barplot( data = branch_rating , x = 'Branch' ,y =  'Rating' , palette = 'magma')","8996cdea":"#what is the rating of the brand over all\n\ndf.Rating.mean()","85e80fdc":"#what is the relation between quantity and gender\ndf[['Quantity' , 'Gender']].groupby(by = 'Gender').mean()","d9499a11":"quantity_grouped = df[['Quantity' , 'Gender']].groupby(by = 'Gender').mean().reset_index()\nsns.barplot(data = quantity_grouped , x = 'Gender' , y ='Quantity' )","fe5cc760":"df.columns","5cdafa41":"# what the order of branches with regard of the profit - gross income\ndf[['Branch'  , 'gross margin percentage']].groupby(by = 'Branch').mean()","ff12abc1":"#I have finsished now the exploration but after looking in depth for all of this you can easly notice that the data is balanced in a suspicous way ..\n# I was putting in consideration to make modeling to predict cout of vouchers that a branch will issue but it realy non-logic to do so that we have a \n# blanced - non-logic data .. simpy this data I think its artificial.","97486d92":"# Tax 5% > float > dtype > numerical","3a7200e7":"# categorical - string - unique\n# Now am going to make new vars to include the list of features that are numerical and the other categorical","b9b72eb9":"# its always a good practice to keep the columns names infront of your eyes","ce444e01":"# product line","12a9b4c1":"# payement is a categoryical => string dtype ","cbc7b669":"# city feature is again a categorical feaute - string datatype","9d9132da":"# as we expected its a unique value for every and each record","1d21690f":"# gender is categorical of string datatype ","7b6f01d7":"# product line is categorical > string datatype","2d3ee301":"# get to know data well \n# invice id is nothing more a random generated number \n# ---Invoice ID--","04e1373c":"# customer type > categorical > string datatype","bde4b56b":"# Gender","767dad24":"# Total > fload > numerical","9761427a":"#Branch -> Categoical string datatype","b506ece2":"# we have balanced numbers of customers in Gender","d7371f9d":"# Quantity > numerical > int datatype","992e8847":"# there is a big change here that every city has only one branch of this supermarket"}}