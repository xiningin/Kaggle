{"cell_type":{"e035d6bc":"code","69d06f72":"code","747a760e":"code","98522c88":"code","3a6a447b":"code","d7f0e67d":"code","dc2b7c96":"code","7e37643c":"code","f99e35ad":"code","75ee7316":"code","163a93c5":"code","a8bce4df":"code","cbe178b9":"code","e4bd6f1f":"code","a75d2f7a":"code","da1b4c29":"code","589bf434":"code","fa2a22de":"code","17f0abf4":"code","26859615":"code","7735f4a9":"code","b5ad5913":"code","4324a0ec":"code","311a9c7d":"code","4e7d9ed3":"code","76f636f9":"code","62b22513":"code","7bfbe2ad":"code","24445118":"code","9c72e488":"code","498201ef":"code","bffcae7e":"code","a17580bf":"code","c3d17507":"markdown","487d4b4a":"markdown","a8b26084":"markdown","00dc7bd3":"markdown","d9385bca":"markdown","402ffae6":"markdown"},"source":{"e035d6bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport re\n\nimport numpy as np # linear algebra\nfrom scipy.sparse import csr_matrix\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import MultipleLocator\n\nfrom sklearn.preprocessing import LabelBinarizer, MultiLabelBinarizer, MinMaxScaler\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.neighbors import NearestNeighbors\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","69d06f72":"anime =  pd.read_csv('..\/input\/anime-recommendation-database-2020\/anime.csv')","747a760e":"usecols = ['MAL_ID', 'Name', 'sypnopsis']\nanime_with_synopsis = pd.read_csv('..\/input\/anime-recommendation-database-2020\/anime_with_synopsis.csv', usecols=usecols)","98522c88":"rating_complete = pd.read_csv('..\/input\/anime-recommendation-database-2020\/rating_complete.csv')","3a6a447b":"anime.info()","d7f0e67d":"pd.set_option(\"display.max_columns\", 50)\nanime.head()","dc2b7c96":"def split_labels(series):\n    series = series.split(\",\")\n    if \"Unknown\" in series:\n        series.remove(\"Unknown\")\n    return series\n\nanime[\"Genres\"] = anime[\"Genres\"].map(split_labels)\nanime[\"Studios\"] = anime[\"Studios\"].map(split_labels)","7e37643c":"anime.head()","f99e35ad":"# replace Unknown\nanime['Score'] = anime['Score'].replace('Unknown', 0).astype(float)","75ee7316":"anime_with_synopsis.info()","163a93c5":"anime_with_synopsis.head()","a8bce4df":"rating_complete.info()","cbe178b9":"rating_complete.head()","e4bd6f1f":"def search_anime(keyword):\n    query1 = anime['Japanese name'].str.contains(keyword, case=False)\n    query2 = anime['English name'].str.contains(keyword, case=False)\n    print(anime[query1 | query2][['Name', 'Japanese name']].head(20))\n    return anime[query1 | query2].head(1).index","a75d2f7a":"search_anime('STEINS')","da1b4c29":"anime100 = anime.sort_values('Score', ascending=False).head(100)\nanime100.head(5)","589bf434":"def to_category(df, column, is_multilabel=False):\n    lb = LabelBinarizer()\n    if is_multilabel:\n        lb = MultiLabelBinarizer()\n        \n    expandedLabelData = lb.fit_transform(df[column])\n    labelClasses = lb.classes_\n\n    category_df = pd.DataFrame(expandedLabelData, columns=labelClasses)\n    del df[column]\n    return pd.concat([df, category_df], axis=1)","fa2a22de":"anime_metadata = anime[['MAL_ID', 'Name', 'Genres', 'Japanese name', 'Type', 'Studios', 'Source', 'Rating']].copy()\n\nanime_metadata = to_category(anime_metadata, 'Type')\nanime_metadata = to_category(anime_metadata, 'Source')\nanime_metadata = to_category(anime_metadata, 'Rating')\nanime_metadata = to_category(anime_metadata, 'Genres', is_multilabel=True)\nanime_metadata = to_category(anime_metadata, 'Studios', is_multilabel=True)\n\nanime_id = anime_metadata[['MAL_ID', 'Name', 'Japanese name']]\n\ndel anime_metadata['Unknown']\ndel anime_metadata['MAL_ID']\ndel anime_metadata['Name']\ndel anime_metadata['Japanese name']\n\nprint(anime_metadata.shape)\nanime_metadata.head()","17f0abf4":"anime_id = anime['MAL_ID'].copy()\nanime_metadata2 = pd.merge(anime_id, anime_with_synopsis, on='MAL_ID', how='left').fillna('').astype(str)\nanime_metadata2.head()","26859615":"tfv = TfidfVectorizer(min_df=3, max_features=None,\n                      strip_accents='unicode', analyzer='word', token_pattern=r'\\w{1,}',\n                      ngram_range=(1, 3),\n                      stop_words = 'english')\n\nsynopsis_original = anime_metadata2['sypnopsis']\nsynopsis_vector_tf_idf = tfv.fit_transform(synopsis_original)\nsynopsis_vector_tf_idf.shape","7735f4a9":"all_meta_data = np.concatenate((anime_metadata.values, synopsis_vector_tf_idf.todense()), axis=1)\nall_meta_data.shape","b5ad5913":"cb_model_knn = NearestNeighbors(metric='cosine', n_neighbors=9)\ncb_model_knn.fit(csr_matrix(all_meta_data))","4324a0ec":"def cb_recommend_anime(query_index):\n    distances, indices = cb_model_knn.kneighbors(all_meta_data[query_index,:].reshape(1, -1), n_neighbors=11)\n    result = []\n    for i in range(0, len(distances.flatten())):\n        index = indices.flatten()[i]\n        if index == query_index:\n            continue\n        result.append(anime.iloc[index])\n        \n    return pd.DataFrame(result)","311a9c7d":"cb_recommend_anime(search_anime('\u3053\u306e\u97f3'))","4e7d9ed3":"user_anime = rating_complete.groupby('user_id').size().reset_index()\nuser_anime.columns = ['user_id', 'anime_count']\nuser_anime.head()","76f636f9":"print(user_anime['anime_count'].quantile(0.8))\nuser_anime.describe()","62b22513":"cdf = user_anime['anime_count'].value_counts().sort_index().cumsum()\n\nplt.plot(list(cdf.index), cdf\/cdf.max())\nplt.xlabel('Value')\nplt.ylabel('ECDF')\nplt.ylim([-0.05,1.05])\nplt.show()","7bfbe2ad":"filtered_users = user_anime[user_anime['anime_count'] > 280]\nusers = set(filtered_users['user_id'])\nlen(users)","24445118":"rating_data = rating_complete[rating_complete['user_id'].isin(users)]\nrating_data.shape","9c72e488":"unique_users = {int(x): i for i,x in enumerate(rating_data['user_id'].unique())}\nunique_items = {int(x): i for i,x in enumerate(anime['MAL_ID'].unique())}\n\nprint(len(unique_items), len(unique_users))\nanime_collabolative_filter = np.zeros((len(unique_items), len(unique_users)))\n\nfor user_id, anime_id, rating in rating_data.values:\n    anime_collabolative_filter[unique_items[anime_id], unique_users[user_id]] = rating\n    \nanime_collabolative_filter.shape","498201ef":"cf_model_knn = NearestNeighbors(metric='cosine', n_neighbors=9)\ncf_model_knn.fit(csr_matrix(anime_collabolative_filter))","bffcae7e":"def cf_recommend_anime(query_index):\n    distances, indices = cf_model_knn.kneighbors(anime_collabolative_filter[query_index,:].reshape(1, -1), n_neighbors=11)\n    result = []\n    for i in range(0, len(distances.flatten())):\n        index = indices.flatten()[i]\n        if index == query_index:\n            continue\n        result.append(anime.iloc[index])\n        \n    return pd.DataFrame(result)","a17580bf":"cf_recommend_anime(search_anime('\u3053\u306e\u97f3'))","c3d17507":"# Collaborative Filtering","487d4b4a":"## meta data","a8b26084":"# Search Anime by Name","00dc7bd3":"# pre-processing","d9385bca":"# TOP 100 anime","402ffae6":"# Content based filtering"}}