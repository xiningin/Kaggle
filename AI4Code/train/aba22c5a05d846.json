{"cell_type":{"8d5d1f7f":"code","afd2f295":"code","5897451e":"code","7a7ade23":"code","e9fe9be0":"code","6a448808":"code","bf948fc3":"code","bf4d7188":"code","79e6c1d6":"code","a545734b":"code","2309087a":"code","bfaaaa02":"code","3e16f376":"code","9e573bf3":"code","2c264694":"code","2c1c5700":"code","2c278888":"code","55f9b19b":"code","95372df3":"code","a71b4fc5":"code","1b68543c":"code","03d462f5":"code","da0a8310":"code","249bd7d2":"code","51814bcf":"code","bc77ae16":"code","6fc471d2":"code","2565f66e":"code","615dbdfc":"code","524ff4ac":"code","c75db2e4":"code","ecff2b1d":"code","13403b76":"code","1999a529":"code","a0012d97":"code","ea6cbb29":"code","67ced7e3":"markdown","c4ea680e":"markdown","7f73fad7":"markdown","6b914e9f":"markdown","b19beb31":"markdown","38225b9c":"markdown","c64b65ee":"markdown","e62a7c44":"markdown","e4c02e24":"markdown","2847f282":"markdown","ef2e554e":"markdown","fba3cb48":"markdown","42f4f35f":"markdown","8e152f9b":"markdown"},"source":{"8d5d1f7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/jamalon-arabic-books-dataset\"))\n\n# Any results you write to the current directory are saved as output.","afd2f295":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5897451e":"jamalon = pd.read_csv('..\/input\/jamalon-arabic-books-dataset\/jamalon dataset.csv')\njamalon.head()","7a7ade23":"df1 = jamalon = pd.read_csv('..\/input\/jamalon-arabic-books-dataset\/jamalon dataset.csv')\ndf1.dataframeName = 'jamalon1.csv'","e9fe9be0":"df1.shape","6a448808":"jamalon.shape","bf948fc3":"jamalon['Publication year'] = jamalon['Publication year'].replace(0,jamalon['Publication year'].median())","bf4d7188":"jamalon.head()","79e6c1d6":"jamalon.isnull().sum()","a545734b":"# Delete Unwanted Columns Description , Unnamed : 0\njamalon1=jamalon.drop(columns = {'Unnamed: 0' , 'Description'})","2309087a":"jamalon1","bfaaaa02":"jamalon1.describe().transpose()","3e16f376":"# Calculate column count on Categorical Data\n# Calculate column count - Title\njamalon1['Title'].value_counts()","9e573bf3":"# Calculate column count - Author\njamalon1['Author'].value_counts()","2c264694":"# Calculate column count - Publisher\njamalon1['Publisher'].value_counts()","2c1c5700":"# Calculate column count - Publication year\njamalon1['Publication year'].value_counts()","2c278888":"# Calculate column count - Cover\njamalon1['Cover'].value_counts()","55f9b19b":"# Calculate column count - Category\njamalon1['Category'].value_counts()","95372df3":"# Calculate column count - Subcategory\njamalon1['Subcategory'].value_counts()","a71b4fc5":"# Import Libraries\nfrom scipy.stats import skew , kurtosis","1b68543c":"# Skewness & Kurtosis for Pages\nprint(\"Skewness for Pages\" , skew(jamalon1['Pages']))\nprint(\"Kurtosis for Pages\" , kurtosis(jamalon1['Pages']))","03d462f5":"# Skewness & Kurtosis for Price\nprint(\"Skewness for Price\" , skew(jamalon1['Price']))\nprint(\"Kurtosis for Price\" , kurtosis(jamalon1['Price']))","da0a8310":"# Histogram\njamalon1['Publication year'].hist()","249bd7d2":"# Histogram\njamalon1['Price'].hist()","51814bcf":"# Histogram\njamalon1['Pages'].hist()","bc77ae16":"sns.distplot(jamalon1['Price'])","6fc471d2":"sns.distplot(jamalon1['Pages'])","2565f66e":"sns.distplot(jamalon1['Publication year'])","615dbdfc":"plt.figure(figsize=(14,10))\nsns.heatmap(jamalon.corr(),annot=True,cmap='hsv',fmt='.3f',linewidths=2)\nplt.show()","524ff4ac":"sns.pairplot(data=jamalon)","c75db2e4":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","ecff2b1d":"plotPerColumnDistribution(df1, 5, 5)","13403b76":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","1999a529":"plotCorrelationMatrix(df1, 8)","a0012d97":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","ea6cbb29":"plotScatterMatrix(df1, 10,5)","67ced7e3":"# Correlation","c4ea680e":"# Skewness and Kurtosis","7f73fad7":"# Pair Plot","6b914e9f":"# Check if any null values in the data","b19beb31":"# 3 . Pages","38225b9c":"# Distribution plot","c64b65ee":"# IMPORT NECESSARY LIBRARIES TO READING THE DATA","e62a7c44":"# 2. Price","e4c02e24":"# Data Cleaning","2847f282":"# Graphical Visualtions","ef2e554e":"# 1. Publication Year","fba3cb48":"# Replace 0 with median in Publication Year","42f4f35f":"# Graphical Visualtions","8e152f9b":"# Exploratory Data Analysis (EDA)"}}