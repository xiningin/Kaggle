{"cell_type":{"e9a657b1":"code","f8dcefbc":"code","a5628f4c":"code","dbe6f7a7":"code","5dc82948":"code","b7211a67":"code","c386b59a":"code","44d2a63a":"code","d1727b4d":"code","d9b3df8b":"code","77c5de61":"code","7b5ca335":"code","af2dc0dc":"code","47e76f6f":"code","a1b10d28":"code","70ba44b3":"code","ed8a3f9d":"code","8af9fa83":"code","eec50688":"code","f7550684":"code","d734f17b":"code","10e51521":"code","ed978a4e":"code","21572bde":"code","74099e03":"code","2580992f":"code","2c6105e6":"code","b114b446":"code","135b3f7e":"code","ea447a14":"code","9834960e":"code","35ddfaef":"code","012e781d":"code","87695b9a":"code","7b0e39ff":"code","c1f8d881":"markdown","41506b3f":"markdown","f10ab02c":"markdown","b375b794":"markdown","6322fd32":"markdown","56e7e588":"markdown","a00ca786":"markdown","4ef254a4":"markdown","01a3d08b":"markdown"},"source":{"e9a657b1":"!pip install wordcloud # quizas no lo teneis instalado.","f8dcefbc":"import numpy as np \nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\n\nfrom string import punctuation\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nfrom sklearn.preprocessing import LabelEncoder\n\nimport warnings\nwarnings.filterwarnings(\"ignore\") # specify to ignore warning messages","a5628f4c":"PATH_DATA = \"..\/input\/nuclio05-dsc-0221\"\n\nshops_df = pd.read_csv(os.path.join(PATH_DATA, \"shops.csv\"))\nitems_df = pd.read_csv(os.path.join(PATH_DATA, \"items.csv\"))\nitems_category_df = pd.read_csv(os.path.join(PATH_DATA, \"item_categories.csv\"))\nsales_df = pd.read_csv(os.path.join(PATH_DATA, \"sales_train.csv\"))","dbe6f7a7":"items_category_df.head(3)","5dc82948":"items_category_df.shape[0] == len(items_category_df[\"item_category_name\"].unique())","b7211a67":"pd.options.display.max_rows = items_category_df.shape[0]","c386b59a":"items_category_df[\"item_category_name\"]","44d2a63a":"def extract_flags(string, flag_words, stop_words):\n    words = string.split()\n    for word in words:\n        is_number = False\n        try:\n            int(word) # si falla pasa al except\n            is_number = True\n        except:\n            pass\n        \n        if word not in punctuation and word not in stop_words and is_number==False: \n            word = word.translate(str.maketrans('', '', punctuation))\n            if word in flag_words:\n                flag_words[word] += 1\n            else:\n                flag_words[word] = 1\n                \n    return flag_words","d1727b4d":"flag_words = {}\nstop_words = ['un']\n\ntest = 'Soy un Data Scientist. - Soy un M\u00e1ster en Kaggle,. Tengo 3 lapices'\nextract_flags(test, flag_words, stop_words)","d9b3df8b":"# Se detectan palabras con parentesis, queremos eliminarlos\n# https:\/\/stackoverflow.com\/questions\/265960\/best-way-to-strip-punctuation-from-a-string\nstring = '?(abc) esto no. '\nstring.translate(str.maketrans('', '', punctuation))","77c5de61":"flag_words = {}\nstop_words = ['de','la','La','y','Las','las','en','el','El','los','Los','Otras','Para','para']\n\nitems_category_df[\"item_category_name\"].apply( lambda x : extract_flags(x, flag_words, stop_words) )\n\nflag_words","7b5ca335":"# let's correct the shops df and also generate a few more features\ndef fix_shops(shops):\n    '''\n    This function modifies the shops df inplace.\n    It correct's 3 shops that we have found to be 'duplicates'\n    and also creates a few more features: extracts the city and encodes it using LabelEncoder\n    '''\n    shops = shops[~shops[\"shop_id\"].isin([0, 1, 10, 23])]\n\n    # replace all the punctuation in the shop_name columns\n    shops[\"shop_name_cleaned\"] = shops[\"shop_name\"].apply(lambda s: \"\".join([x for x in s if x not in punctuation]))\n    \n    # extract the city name\n    shops[\"city\"] = shops[\"shop_name_cleaned\"].apply(lambda s: s.split()[0])\n    \n    # encode it using a simple LabelEncoder\n    shops[\"city_code\"] = LabelEncoder().fit_transform(shops['city'])\n    \n    return shops","af2dc0dc":"# a simple function that creates a global df with all joins and also shops corrections\ndef create_df(path):\n    '''\n    This is a helper function that creates the train df.\n    '''\n    # import all df\n    shops = pd.read_csv(os.path.join(path, \"shops.csv\"))                    \n    items_category = pd.read_csv(os.path.join(path, \"item_categories.csv\"))\n    items = pd.read_csv(os.path.join(path, \"items.csv\"))\n    sales = pd.read_csv(os.path.join(path, \"sales_train.csv\"))\n    \n    # fix shop_id in sales so that we can leater merge the df\n    \n    d = {0:57, 1:58, 10:11, 23:24}\n    sales[\"shop_id\"] = sales[\"shop_id\"].map(lambda x: d[x] if x in d.keys() else x)\n    sales_shape_start = sales.shape[0]\n    shops = fix_shops(shops) # fix the shops as we have seen before\n    \n    # create df by merging the previous dataframes\n    df = pd.merge(items, items_category, left_on = \"item_category_id\", right_on = \"item_category_id\")\n    df = pd.merge(sales, df, left_on = \"item_id\", right_on = \"item_id\")\n    df = pd.merge(df, shops, left_on = \"shop_id\", right_on = \"shop_id\")\n    \n    # sort the values\n    df.sort_values(by = [\"shop_id\", \"date\"], ascending = True, inplace = True)\n    df_shape_end = df.shape[0]\n    \n    assert sales_shape_start == df_shape_end, \"You have created a cartessian!\"\n    \n    return df","47e76f6f":"df = create_df(path = PATH_DATA)","a1b10d28":"df.shape","70ba44b3":"df.head()","ed8a3f9d":"# quitamos palabras que no tienen significado\nstop_words = ['de','la','La','y','Las','las','en','el','El','los','Los','Otras','Para','para']\ncategory_flag_words = {}\n\ndf[\"item_category_name\"].apply( lambda x : extract_flags(x, category_flag_words, stop_words) )\n\ncat_words_df = pd.DataFrame(category_flag_words, index=['word'])","8af9fa83":"cat_words = cat_words_df.T.sort_values(by='word', ascending=False)\ncat_words.head(20)","eec50688":"text =\" \".join(cat_words.T)\n\n# Create and generate a word cloud image:\nwordcloud = WordCloud().generate(text)\n\ntext\nplt.figure(figsize=(20,10))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","f7550684":"items_category_df[\"PS_flag\"] = items_category_df[\"item_category_name\"].apply(lambda x: True if \"PS\" in x else False)\nitems_category_df[items_category_df[\"PS_flag\"] == True]","d734f17b":"df[\"PS_flag\"] = df[\"item_category_name\"].apply(lambda x: True if \"PS\" in x else False)\ndf['revenue'] = df['item_cnt_day']*df['item_price']\nflag_gb = df[df[\"PS_flag\"] == True].groupby('item_category_name')['item_cnt_day','item_price','revenue'].agg(['sum','mean','count'])","10e51521":"new = ['item_cnt_day','item_price','revenue']\nagg = ['sum','mean','count']\nnew_cols = []\nfor x in new:\n    for y in agg:\n        new_cols.append( x+'_'+y)\n    \nflag_gb.columns = new_cols","ed978a4e":"flag_gb","21572bde":"fig, ax = plt.subplots(2,1,figsize=(21,8))\nsns.barplot(ax=ax[0], x = flag_gb.index, y = flag_gb['item_cnt_day_sum'])\nsns.barplot(ax=ax[1], x = flag_gb.index, y = flag_gb['revenue_sum'])\nfig.show()","74099e03":"def obtener_flag(data, column_name, keyword):\n    data[keyword+\"_flag\"] = data[column_name].apply(lambda x: True if keyword in x else False)\n    data['revenue'] = data['item_cnt_day']*df['item_price']\n    flag_gb = df[df[keyword+\"_flag\"] == True].groupby(column_name)['item_cnt_day','item_price','revenue'].agg(['sum','mean','count'])\n    \n    new = ['item_cnt_day','item_price','revenue']\n    agg = ['sum','mean','count']\n    new_cols = []\n    for x in new:\n        for y in agg:\n            new_cols.append( x+'_'+y)\n\n    flag_gb.columns = new_cols\n    \n    plot_cats(flag_gb)\n    \n    # Falta ponerle return (return data) \n    # Tan solo se utiliza para visualizar\n\ndef plot_cats(flag_gb):\n    fig, ax = plt.subplots(2,1,figsize=(21,8))\n    sns.barplot(ax=ax[0], x = flag_gb.index, y = flag_gb['item_cnt_day_sum'])\n    if len(flag_gb.index) > 5:\n        ax[0].set(xticklabels=[]) \n    sns.barplot(ax=ax[1], x = flag_gb.index, y = flag_gb['revenue_sum'])\n    fig.show()","2580992f":"obtener_flag(df, 'item_category_name', 'Libros')","2c6105e6":"obtener_flag(df, 'item_category_name', 'XBOX')","b114b446":"obtener_flag(df, 'item_category_name', 'Juegos')\nplt.xticks(rotation=30)\nplt.show()","135b3f7e":"# quitamos palabras que no aportan significado\nstop_words = ['de','la','La','y','Las','las','en','el','El','los','Los','Otras','Para',\\\n              'para','PS3','PS4','PC','Xbox','Playstation','PlayStation','of','The','con','m','del','juego',\\\n             '1C','Juego','versi\u00f3n','pago','Pago','a\u00f1o','V','Edici\u00f3n','Edition','rublos','meses','edici\u00f3n', 'PS',\\\n             'rusa','ruso','negro','NEGRO','Ingl\u00e9s','Call','Auto'] \n            # Call y negro : COD Black Ops (duplicado con Duty)\n            # Grand Theft Auto: quitamos Auto \n            # y muchas m\u00e1s!\n    \nnumeros = ['34','360','42','1000','3']\nstop_words = stop_words + numeros ","ea447a14":"item_name_flag_words = {}\n\ndf[\"item_name\"].apply( lambda x : extract_flags(x, item_name_flag_words, stop_words) )\n\nitem_words_df = pd.DataFrame(item_name_flag_words, index=['word'])","9834960e":"item_words = item_words_df.T.sort_values(by='word', ascending=False)\nitem_words.head(10)","35ddfaef":"item_words = item_words[~item_words.index.isin(stop_words)]\nitem_words.head(40)","012e781d":"text =\" \".join(item_words.T)\n\n# Create and generate a word cloud image:\nwordcloud = WordCloud().generate(text)\n\ntext\nplt.figure(figsize=(20,10))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","87695b9a":"obtener_flag(df, 'item_name', 'Theft')\nplt.xticks(rotation=90)\nplt.show()","7b0e39ff":"obtener_flag(df, 'item_name', 'Duty')\nplt.xticks(rotation=90)\nplt.show()","c1f8d881":"Hacemos los join de sales, shops y items_category. Previamente tambi\u00e9n se limpian las shops. (C\u00f3digo importado del EDA de Nico)","41506b3f":"Hacemos un wordcloud como vimos con Joseph. ","f10ab02c":"## item_name\n\nIgual que hemos hecho un flag_words de los item_category, tambi\u00e9n podemos hacerlo de los item_name. Aunque en este caso tendremos una larga lista de elementos y la lista de stop words ser\u00e1 bastante m\u00e1s larga; le a\u00f1adimos las categor\u00edas de PC, PS3, etc. porque ya se incluyen en categor\u00eda y es ser\u00eda redundante.","b375b794":"Se puede observar bien de la tabla o de la imagen que Juegos es la palabra m\u00e1s repetida. Seguidamente, utilizamos alguna de estas palabras como flag para la generaci\u00f3n de nuevos features. ","6322fd32":"# **Nuclio DS - Time Series EDA 2**\n\nEn este notebook se pretende identificar qu\u00e9 flags ser\u00edan interesantes para introducir en el modelo. El procedimiento es similar al que se hizo en clase con el flag \"PS\".\n\nEn **cat_words** pueden observar las palabras m\u00e1s repetidas en el campo *item_category_name*. Y adem\u00e1s se realiza un wordcloud. Para las palabras que m\u00e1s se repiten ser\u00eda interesante introducir el flag como atributo al modelo. \n\nTambi\u00e9n, como se plante\u00f3 en clase, se intenta resolver la pregunta: \u00bfnos quedamos con el flag PS o lo dividimos en PS3, PS4, Juegos y\/o Accesorios? (funci\u00f3n **obtener_flag(data, column_name, keyword)**) Se puede observar que hay categor\u00edas con el flag PS tienen pocos registros, as\u00ed que un flag m\u00e1s espec\u00edfico que agrupe las categor\u00edas m\u00e1s repetidas ser\u00e1 id\u00f3neo. \n\nY en **item_words** pueden observar las palabras m\u00e1s repetidas en el campo *item_name*. \u00c9ste necesita algo m\u00e1s de trabajo dado que la lista de stop_words (palabras que no aportan significado) es mucho m\u00e1s larga, pero se empiezan a reconocer algunos juegos famosos (FIFA, GTA, Call of Duty, Minecraft...)\n","56e7e588":"Se pueden empezar a identificar videojuegos muy famosos: Sims, FIFA, Grand Theft Auto o Minecraft. ","a00ca786":"~Al parecer no evita las stopwords PS3, PS4 o Xbox, pues las eliminamos a posteriori.","4ef254a4":"Se observa que si queremos crear un nuevo atributo relacionado con la PlayStation para introducir al modelo quiz\u00e1s crear una categor\u00eda que agrupe Juegos - PS3 y Juegos - PS4 ser\u00eda recomendable dado que suponen una gran parte de los registros en el mundo Play Station y adem\u00e1s los ingresos son con diferencia los m\u00e1s altos.\n\nHacer un Flag de PS quiz\u00e1s no ser\u00eda lo indicado ya que hay categor\u00edas como Juegos PSP o PSVITA que apenas tienen registros y a\u00f1adir\u00edan \"ruido\" a un atributo bastante indicativo.","01a3d08b":"## item_category_name\n\nObtenci\u00f3n de subcategor\u00edas del campo item_category_name."}}