{"cell_type":{"b45d25fd":"code","3acc6e7b":"code","ffc88d09":"code","a31a23bf":"code","5fd2aaf2":"code","998493e9":"code","b7ad3e4e":"code","da491966":"code","d201b2ff":"code","d617415c":"code","65442eda":"code","a7d6aa7f":"code","b43fea68":"code","6b246a93":"code","bb878a47":"code","650f2363":"code","aeb0dfb0":"code","72bce186":"code","0888cc7f":"code","83b586c6":"code","956294af":"code","10c67d92":"code","4fba4a26":"code","89269ead":"code","ef606c64":"code","54e3b6be":"code","a134463a":"code","57d155d6":"code","9b5ce847":"code","c3866b79":"code","4bf20059":"code","d39d9c88":"code","31876ab2":"code","331d3da1":"code","0d34e7c6":"code","5f551532":"code","cb59c1e4":"code","f4a4a895":"code","e75cd2e0":"code","07986cf6":"markdown","f3263633":"markdown","bbe5bc8f":"markdown","dfe6cf6e":"markdown","3716665e":"markdown","86f7027c":"markdown","91b2561a":"markdown","ea02d3d9":"markdown","55a44789":"markdown"},"source":{"b45d25fd":"import pandas as pd\nimport numpy as np","3acc6e7b":"titanic_train = pd.read_csv(r'..\/input\/titanic\/train.csv')\ntitanic_train.head()","ffc88d09":"titanic_train.info()","a31a23bf":"titanic_train['Sex'].value_counts()","5fd2aaf2":"titanic_train['Ticket'].value_counts()","998493e9":"titanic_train['Cabin'].value_counts()","b7ad3e4e":"titanic_train['Embarked'].value_counts()\n# sample size is heavily skewed in the favour of Southampton","da491966":"titanic_train['Pclass'].value_counts()","d201b2ff":"titanic_train['Survived'].value_counts(normalize=True)","d617415c":"titanic_train['SibSp'].value_counts()","65442eda":"titanic_train['Parch'].value_counts()","a7d6aa7f":"titanic_train['Fare'].value_counts()","b43fea68":"titanic_train.describe()","6b246a93":"%matplotlib inline\nimport matplotlib.pyplot as plt\ntitanic_train.hist(bins=50, figsize=(20,15))","bb878a47":"# create a copy of the training dataset for performing exploratory data analysis\ntitanic = titanic_train.copy()\ntitanic.head()","650f2363":"import seaborn as sns","aeb0dfb0":"sns.countplot(x='Sex', hue ='Survived', data = titanic)\ncross_tab = pd.crosstab(titanic.Sex, titanic.Survived).apply(lambda r:r*100\/r.sum(), axis = 1)\nprint(cross_tab)\n\n## very strong correlation between sex and survival rate.","72bce186":"sns.countplot(x='SibSp',hue='Survived',data=titanic)\ncross_tab = pd.crosstab(titanic['SibSp'],titanic['Survived']).apply(lambda r: r*100\/r.sum(), axis=1)\nprint(cross_tab)","0888cc7f":"sns.countplot(x='Parch',hue='Survived',data=titanic)\ncross_tab = pd.crosstab(titanic['Parch'],titanic['Survived']).apply(lambda r: r*100\/r.sum(), axis=1)\nprint(cross_tab)","83b586c6":"# create a new column for passenger's travelling alone\ntitanic['is_alone'] = titanic['SibSp'] + titanic['Parch']\ntitanic['is_alone'] = titanic['is_alone'].apply(lambda x: 1 if x>0 else 0)\n\nsns.countplot(x='is_alone',hue='Survived',data=titanic)\ncross_tab = pd.crosstab(titanic['is_alone'],titanic['Survived']).apply(lambda r: r*100\/r.sum(), axis=1)\nprint(cross_tab)\n\n# passenger's travelling with family has a slightly better chance of survival","956294af":"sns.countplot(x='Embarked',hue='Survived',data=titanic)\ncross_tab = pd.crosstab(titanic['Embarked'],titanic['Survived']).apply(lambda r: r*100\/r.sum(), axis=1)\nprint(cross_tab)\n\n# people who embarked from Cherbourg has slightly better survival rate","10c67d92":"sns.countplot(x='Pclass',hue='Survived',data=titanic)\ncross_tab = pd.crosstab(titanic['Pclass'],titanic['Survived']).apply(lambda r: r*100\/r.sum(), axis=1)\nprint(cross_tab)\n\n# survival rate tends to decrease with the class in which a person is travelling 1> 2>3","4fba4a26":"graph = sns.FacetGrid(titanic, hue=\"Survived\", palette=\"Set1\", )\ngraph = graph.map(plt.hist,\"Age\", alpha=0.5)\ngraph.add_legend()\n#passenger's less than 20(children), higher survival, 20-60 : poor survival (adults)","89269ead":"graph = sns.FacetGrid(titanic, hue=\"Survived\", palette=\"Set1\", )\ngraph = graph.map(plt.hist,\"Fare\", alpha=0.5)\ngraph.add_legend()\n# higher the fare, better the survival rate","ef606c64":"titanic['Cabin'] = titanic['Cabin'].fillna('NA')\ntitanic['Cabin'] = titanic.Cabin.apply(lambda x : 'No' if x == 'NA' else 'Yes')\ntitanic['Cabin'].value_counts()","54e3b6be":"sns.countplot(x='Cabin',hue='Survived',data=titanic)\ncross_tab = pd.crosstab(titanic['Cabin'],titanic['Survived']).apply(lambda r: r*100\/r.sum(), axis=1)\nprint(cross_tab)","a134463a":"#seperate predicators and labels\ntitanic = titanic_train.drop(columns='Survived')\ntitanic_labels = titanic_train['Survived'].copy()","57d155d6":"titanic.head()","9b5ce847":"titanic['Cabin'] = titanic['Cabin'].fillna('NA')\ntitanic['Cabin'] = titanic.Cabin.apply(lambda x : 'No' if x == 'NA' else 'Yes')\n\ntitanic['is_alone'] = titanic['SibSp'] + titanic['Parch']\ntitanic['is_alone'] = titanic['is_alone'].apply(lambda x: 1 if x>0 else 0)\n\ntitanic.head()","c3866b79":"titanic = titanic.drop(columns=['PassengerId','Name','Ticket','SibSp', 'Parch'], axis=1)\ntitanic","4bf20059":"# custom DataFrameSelector class for column transformation \nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nclass DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self, X, y=None):\n        return self\n    def transform(self,X):\n        return X[self.attribute_names].values","d39d9c88":"# Create a pipeline for data cleaning \nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\nfrom sklearn.impute import SimpleImputer\n\nnum_attrib = list(titanic[['Age','Fare','is_alone']])\ncat_attrib = list(titanic[['Sex','Pclass','Cabin','Embarked']])\n\n# the selector will select a column attributes from the given list\n# imputer will fill missing numerical fields . in this case for age with median value i.e 28\n# std_scalar for scaling numerical attributes\n\nnum_pipeline = Pipeline([\n    ('selector', DataFrameSelector(num_attrib)),\n    ('imputer',SimpleImputer(strategy='median')),\n    ('std_scaler',StandardScaler())\n])\n\n# SimpleImputer fills missing values in the categorical fields with mode\/ most frequent value\n# Onehotencoding is performed for transforming categorical values as numerical\n\ncat_pipeline = Pipeline([\n    ('selector', DataFrameSelector(cat_attrib)),\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('one_hot_encoder', OneHotEncoder())\n])\n\n# create a full pipeline by combining results of subpipelines(num_pipeline, cat_pipeline)\n\nfull_pipeline = FeatureUnion(transformer_list=[\n    ('num_pipepline',num_pipeline),\n    ('cat_pipeline',cat_pipeline)\n])\n\ntitanic_prepared = full_pipeline.fit_transform(titanic)\ntitanic_prepared","31876ab2":"# LOGISTIC REGRESSION\nfrom sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression()\nlog_reg.fit(titanic_prepared,titanic_labels)","331d3da1":"some_data = titanic.iloc[:5]\nsome_labels = titanic_labels.iloc[:5]\nsome_data_prepared = full_pipeline.transform(some_data)\nprint('Predictions:\\t', log_reg.predict(some_data_prepared))\nprint('Labels:\\t',list(some_labels))","0d34e7c6":"# evaluate model\nfrom sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(log_reg, titanic_prepared, titanic_labels, scoring='accuracy')\n# report performance\nprint('Accuracy: %.3f (%.3f)' % (np.mean(scores), np.std(scores)))","5f551532":"# final_model with best possible hyperparamters\nfinal_model = log_reg\n\ntest = pd.read_csv(r'..\/input\/titanic\/test.csv')\nresult = pd.read_csv(r'..\/input\/titanic\/gender_submission.csv')\n\nX_test = test\n\nX_test['Cabin'] = X_test.Cabin.fillna('NA')\nX_test['Cabin'] = X_test.Cabin.apply(lambda x : 'NA' if x == 'No' else 'Yes')\nX_test['is_alone'] = X_test['SibSp'] + X_test['Parch']\nX_test['is_alone'] = X_test['is_alone'].apply(lambda x: 1 if x>0 else 0)\n\nX_test = X_test.drop(columns=['PassengerId','Name','Ticket', 'SibSp','Parch'])\n\ny_test = result['Survived'].copy()\n\nX_test_prepared = full_pipeline.transform(X_test)\nfinal_predictions = final_model.predict(X_test_prepared)\n\n# evaluate model\nfrom sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(log_reg, X_test_prepared, y_test, scoring='accuracy')\n# report performance\nprint('Accuracy: %.3f (%.3f)' % (np.mean(scores), np.std(scores)))","cb59c1e4":"predictions = np.abs(np.around(final_predictions))\npredictions = predictions.astype(int)","f4a4a895":"passenger_id = list(test['PassengerId'])\nprediction_submission = list(zip(passenger_id,predictions))\nprediction_submission = pd.DataFrame(prediction_submission, columns = ('PassengerId','Survived'))\nprediction_submission","e75cd2e0":"prediction_submission=prediction_submission.to_csv(\"final_result.csv\",index=False)\nprediction_submission","07986cf6":"## EDA","f3263633":"## DATA CLEANING","bbe5bc8f":"There are 3 types of attributes in the dataset which we will be using for our analysis:\n* **Categorical** : Survived, Sex, Cabin and Embarked\n* **Ordinal** : Pclass, SibSp, Parch\n* **Continous\/Numerical** : Fare, Age\n\nI am ignoring 'PassengerId','Name' and 'Ticket' fields, because they seem a bit uninformative. In such cases, a complex model may detect patterns like the fact that all names in the training data with 'A' or 'S' etc. in their name has higher survival rate. Doesn't seem reasonal. Same goes for the other two attributes.","dfe6cf6e":"## MODEL TRAINING","3716665e":"## DATA UNDERSTANDING","86f7027c":"With the help of a few visualization charts, we will try to find relationship between each predictor(attribute) and our label. \nThis type of analysis is usually known as **Bivariate Analysis**.","91b2561a":"## DATA PIPELINE","ea02d3d9":"## EVALUATING THE MODEL ON TEST SET","55a44789":"**INSIGHTS :**\n1. Females are more likely to survive\n2. Passenger's in first_class has higher chances of survival, followed by second_class and thrid_class respectively\n3. Passenger's who embarked from Cherbourg has slightly better survival rate\n4. Passenger's less than 20(children), higher survival, 20-60 : poor survival (adults)\n5. People with cabin's have better survival chances than those without\n6. Passenger's travelling with family has higher survival rate"}}