{"cell_type":{"bc44ee50":"code","9c7d173f":"code","0a0cf00b":"code","e395e918":"code","07b2287d":"code","ca642c3a":"code","0857d7b0":"code","c7ba5f29":"code","04d59fb4":"code","817205be":"code","c84d2e32":"code","4b37b381":"code","572cae33":"code","e6e91882":"code","70506039":"code","9c0c50e0":"code","e666e795":"code","0a97fec1":"code","18d60dc6":"code","ae86337b":"code","9f79e49c":"code","3e659121":"code","b610e567":"code","9325cfff":"code","b3de7eb6":"code","2aabfe86":"code","a20edea5":"code","a2e62751":"code","665aa949":"code","3892a3df":"code","e9620fe9":"code","2a3d790a":"code","59511a58":"code","47fe8f66":"code","f09e75ef":"code","f25b94e5":"code","d62bfc1e":"code","fb5f85fb":"code","0577c9b3":"code","de809cf0":"code","27d231a2":"code","a9ad7251":"code","99074554":"code","38ce44f6":"code","833b5f38":"code","ff3c2403":"code","7bbc3ad6":"code","6b6bfc51":"code","93a5a3f0":"code","50cbe1ed":"code","568e6b51":"code","e399e69b":"code","9829b160":"code","0359dc25":"code","7b999f97":"code","cd007aa2":"code","9949e843":"code","994b89f0":"code","028987b6":"markdown","63f9f2b5":"markdown","88a61f28":"markdown","5679655f":"markdown","2762d24b":"markdown","48eef2d3":"markdown","9a103114":"markdown","c6319358":"markdown","8f14eae7":"markdown","3d8df7a1":"markdown","693681b5":"markdown","37f29bbc":"markdown","e7922fa3":"markdown","19252ee7":"markdown","67ade7f5":"markdown","e87f2c72":"markdown","b5d6f9f7":"markdown","114d0814":"markdown","1518ddf2":"markdown","4d4c58a1":"markdown","f849aa2a":"markdown"},"source":{"bc44ee50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c7d173f":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nsns.set_context('notebook')\nsns.set_style('white')\nsns.set_palette('dark')\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.options.mode.chained_assignment = None  # default='warn'","0a0cf00b":"data = pd.read_csv('\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv',sep ='\\t')\ndata.head()","e395e918":"data.info()","07b2287d":"data.nunique()","ca642c3a":"data.dtypes","0857d7b0":"data.drop(['AcceptedCmp1','AcceptedCmp2','AcceptedCmp3','AcceptedCmp4','AcceptedCmp5','Response','Z_CostContact','Z_Revenue'],axis=1,inplace=True)\ndata.dropna(axis=0,inplace=True)","c7ba5f29":"from datetime import datetime\ndata['Dt_Customer'] = (pd.to_datetime('2017-01-01') - pd.to_datetime(data['Dt_Customer'])).dt.days \n# assuming data set available on 2017","04d59fb4":"data.rename(columns={'Dt_Customer':'Enrolled','Recency':'LastPurchase'},inplace=True)","817205be":"data.head()","c84d2e32":"data['Marital_Status'].value_counts()","4b37b381":"#Replacing categories\ndata['Marital_Status'].replace({'Alone':'Single','Absurd':'Single','YOLO':'Single'},inplace=True)","572cae33":"data['Education'].value_counts()","e6e91882":"#Replacing categories\ndata['Education'].replace({'Basic' : 'Undergrad','2n Cycle': 'Undergrad', 'Graduation':'Graduate'},inplace=True)","70506039":"data['age'] = 2017 - data['Year_Birth'] \n#assuming the data set is obtained in 2017. ","9c0c50e0":"#Combining kids and teens as children\ndata['Children'] = data['Kidhome'] + data['Teenhome']\ndata.drop(['Kidhome','Teenhome'], axis=1, inplace=True)","e666e795":"data.head()","0a97fec1":"cols = ['age', 'Education', 'Marital_Status', 'Income', 'Children',\n       'Enrolled', 'LastPurchase', 'MntWines', 'MntFruits', 'MntMeatProducts',\n       'MntFishProducts', 'MntSweetProducts', 'MntGoldProds',\n       'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases',\n       'NumStorePurchases', 'NumWebVisitsMonth', 'Complain']","18d60dc6":"df = data[cols]","ae86337b":"sns.pairplot(df , hue='Children')","9f79e49c":"idx = df.loc[df['age']>80].index.tolist()\ndf.drop(axis=0, index=idx, inplace=True)","3e659121":"idx = df.loc[df['Income']> 200000].index.tolist()\ndf.drop(axis=0, index=idx, inplace=True)","b610e567":"corr= df.corr()\nfor i in range(len(corr)):\n    corr.iloc[i,i] = 0.0\n    \nplt.figure(figsize=(13, 6))\nsns.heatmap(corr, vmax=1, vmin=-1, annot=True, linewidths=.5, cmap='bwr')\n","9325cfff":"cols = corr.columns.tolist()\nfor i in range(0,len(corr)):\n    for j in range(0,len(corr)):\n        if( (j> i) & (abs(corr.iloc[i,j])>0.7)):\n            print(\"{} - {} : HIGHLY {} CORRELATED , r={}\".format(cols[i], cols[j], (\"+ly\" if (corr.iloc[i,j] >0) else \"-ly\"), corr.iloc[i,j]))\n        elif((j> i) & (abs(corr.iloc[i,j])>0.5)):\n            print(\"{} - {} : moderately {} correlated , r={}\".format(cols[i], cols[j], (\"+ly\" if (corr.iloc[i,j] >0) else \"-ly\"), corr.iloc[i,j]))\n\n            ","b3de7eb6":"skew_columns = df.skew().sort_values(ascending=False)\nskew_columns = skew_columns.loc[skew_columns > 0.75]\nskew_columns","2aabfe86":"plt.figure(1, figsize= (15,10))\nn=0\nfor x in ['age','Education', 'Marital_Status', 'Income', 'Children']:\n    n+=1\n    plt.subplot(2,3,n)\n    if(x in ['age','Income','Children']):\n        sns.histplot(df[x], bins =20, kde=True, stat=\"density\")\n    else:\n        sns.countplot(x = x, data=df )\n    plt.title('Variation of {}'.format(x))\nplt.show()","a20edea5":"# Convert to log scale due to skew\n\nplt.figure(1, figsize= (15,10))\nn=0\nfor x in ['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds' ]:\n    n+=1\n    df[x] = df[x].apply(lambda x: x+1).apply(np.log1p)\n    plt.subplot(2,3,n)\n    sns.histplot(df[x], bins =20, kde=True, stat=\"density\")\n    plt.title('Variation of {}'.format(x))\n                 \nplt.show()","a2e62751":"# Convert to log scale\n\nplt.figure(1, figsize= (15,10))\nn=0\nfor x in ['Enrolled', 'LastPurchase','NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth',  'Complain' ]:\n    n+=1\n#    df[x] = df[x].apply(lambda x: x+1).apply(np.log1p)\n    plt.subplot(2,4,n)\n    if(x =='Complain'):\n        sns.countplot(x = x, data=df )\n        continue\n    sns.histplot(df[x], bins =20, kde=True, stat=\"density\")\n    \n\n    plt.title('Variation of {}'.format(x))\n                 \nplt.show()","665aa949":"df.Complain.value_counts()","3892a3df":"df.head()","e9620fe9":"cols = ['age','Income','Enrolled','LastPurchase','MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth']","2a3d790a":"from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\nle = LabelEncoder()\nsc= StandardScaler()\n\ndf = pd.get_dummies(df, columns=['Education','Marital_Status'],drop_first=True)\ndf['Children'] = df[['Children']].apply(le.fit_transform)\ndf[cols] = sc.fit_transform(df[cols])\n\ndf.head()","59511a58":"# Determine Cluster Size\nkm_list = list()\nfor clust in range(1,20):\n    km = KMeans(n_clusters=clust, random_state=42)\n    km = km.fit(df)\n    km_list.append(pd.Series({'clusters': clust, 'inertia': km.inertia_, 'model': km}))\n\nplot_data = (pd.concat(km_list, axis=1).T[['clusters','inertia']].set_index('clusters'))\nax = plot_data.plot(marker='o',ls='-')\nax.set(xlabel='Cluster', ylabel='Inertia');","47fe8f66":"num_clusters = 3\nkm = KMeans(n_clusters=num_clusters)\ndf['Kmeans'] = km.fit_predict(df)","f09e75ef":"plt.figure(1, figsize= (10,6))\nsns.scatterplot( data = df, x ='age', y='Income', hue = 'Kmeans')\nplt.title('Scatter plot of age compared with Income')","f25b94e5":"plt.figure(1, figsize= (15,10))\nn=0\nfor x in ['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds' ]:\n    n+=1\n    plt.subplot(2,3,n)\n    sns.scatterplot( data = df, x =x, y='Income', hue = 'Kmeans')\n    plt.title('Scatter plot of {} with Income'.format(x))\n                 \nplt.show()","d62bfc1e":"plt.figure(1, figsize= (15,10))\nn=0\nfor x in ['Enrolled', 'LastPurchase','NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth',  'Complain' ]:\n    n+=1\n    plt.subplot(2,4,n)\n    sns.scatterplot( data = df, x =x, y='Income', hue = 'Kmeans')\n    plt.title('Scatter plot of {} with Income'.format(x))\n                 \nplt.show()","fb5f85fb":"from sklearn.cluster import AgglomerativeClustering\nag = AgglomerativeClustering(n_clusters=3, linkage='ward', compute_full_tree=True)\ndf['Agglom'] = ag.fit_predict(df)\ndf.head()","0577c9b3":"plt.figure(1, figsize= (10,6))\nsns.scatterplot( data = df, x ='age', y='Income', hue = 'Agglom')\nplt.title('Scatter plot of age compared with Income')","de809cf0":"plt.figure(1, figsize= (15,10))\nn=0\nfor x in ['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds' ]:\n    n+=1\n    plt.subplot(2,3,n)\n    sns.scatterplot( data = df, x =x, y='Income', hue = 'Agglom')\n    plt.title('Scatter plot of {} with Income'.format(x))\n                 \nplt.show()","27d231a2":"plt.figure(1, figsize= (15,10))\nn=0\nfor x in ['Enrolled', 'LastPurchase','NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth',  'Complain' ]:\n    n+=1\n    plt.subplot(2,4,n)\n    sns.scatterplot( data = df, x =x, y='Income', hue = 'Agglom')\n    plt.title('Scatter plot of {} with Income'.format(x))\n                 \nplt.show()","a9ad7251":"df1 = df.copy()","99074554":"df[cols] = sc.inverse_transform(df[cols])\ndf.head()","38ce44f6":"#df['dummy_Master', 'dummy_PhD', 'dummy_Undergrad','dummy_Married', 'dummy_Single', 'dummy_Together','dummy_Widow']\ndf['Education'] = df[['Education_Master', 'Education_PhD', 'Education_Undergrad']].idxmax(axis=1)\ndf['Marital_Status'] = df[['Marital_Status_Married', 'Marital_Status_Single', 'Marital_Status_Together','Marital_Status_Widow']].idxmax(axis=1)\n","833b5f38":"df.drop(['Education_Master', 'Education_PhD', 'Education_Undergrad'], axis=1,inplace=True)\ndf.drop(['Marital_Status_Married', 'Marital_Status_Single', 'Marital_Status_Together','Marital_Status_Widow'], axis=1,inplace=True)","ff3c2403":"df.head()","7bbc3ad6":"dft = df.groupby(['Kmeans','Agglom']).agg({'age':'count'}).reset_index()\ndft","6b6bfc51":"cluster1 = df.loc[(df['Kmeans'] ==0) & (df['Agglom'] == (dft.iloc[dft.loc[(dft['Kmeans'] ==0)]['age'].idxmax()][1]))]\ncluster2 = df.loc[(df['Kmeans'] ==1) & (df['Agglom'] == (dft.iloc[dft.loc[(dft['Kmeans'] ==1)]['age'].idxmax()][1]))]\ncluster3 = df.loc[(df['Kmeans'] ==2) & (df['Agglom'] == (dft.iloc[dft.loc[(dft['Kmeans'] ==2)]['age'].idxmax()][1]))]","93a5a3f0":"df[\"Cluster\"] = \"Other\"\ndf.loc[(df['Kmeans'] ==0) & (df['Agglom'] ==(dft.iloc[dft.loc[(dft['Kmeans'] ==0)]['age'].idxmax()][1])),\"Cluster\"] = \"Cluster 1\"\ndf.loc[(df['Kmeans'] ==1) & (df['Agglom'] ==(dft.iloc[dft.loc[(dft['Kmeans'] ==1)]['age'].idxmax()][1])),\"Cluster\"] = \"Cluster 2\"\ndf.loc[(df['Kmeans'] ==2) & (df['Agglom'] ==(dft.iloc[dft.loc[(dft['Kmeans'] ==2)]['age'].idxmax()][1])),\"Cluster\"] = \"Cluster 3\"","50cbe1ed":"df.Cluster.value_counts()","568e6b51":"#Analyze Age of customers according to clusters\n\nsns.stripplot(x='Cluster', y='age', data=df)\nsns.boxplot(x='Cluster', y='age', data=df)\nplt.title('Swarm plot of age with Clusters')","e399e69b":"#Analyze income of customers according to clusters\nsns.stripplot(x='Cluster', y='Income', data=df)\nsns.boxplot(x='Cluster', y='Income', data=df)\nplt.title('Swarm plot of Income with Clusters')","9829b160":"# df['totSpent'] = df[['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds']].sum(axis=1)\n# sns.stripplot(x='Cluster', y='totSpent', data=df)\n# sns.boxplot(x='Cluster', y='totSpent', data=df)\n# plt.title('Swarm plot of total spent with Clusters')","0359dc25":"#Analyze Purchases of customers based on clusters \n\nplt.figure(1, figsize= (15,10))\nn=0\nfor x in ['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds']:\n    n+=1\n    plt.subplot(2,3,n)\n    sns.stripplot(x='Cluster', y=x, data=df)\n    sns.boxplot(x='Cluster', y=x, data=df)\n    plt.title('Swarm plot of {} with Clusters'.format(x))                 \nplt.show()","7b999f97":"\ndf1 = df[['Cluster','age','Children']]\ndf1 = df1.groupby(['Cluster','Children']).agg('count').reset_index()\ndf1.rename(columns={'age':'counts'},inplace=True)\ndf1\nsns.catplot(data= df1, x='Cluster',y='counts', hue='Children', kind ='bar')\nplt.title('Bar plot of Clusters with Children Info')","cd007aa2":"#df1 = df[['Kmeans','age','Children','Marital_Status','Education']]\ndf1 = df[['Kmeans','age','Marital_Status']]\ndf1 = df1.groupby(['Kmeans','Marital_Status']).agg('count').reset_index()\ndf1.rename(columns={'age':'counts'},inplace=True)\ndf1\nsns.catplot(data= df1, x='Kmeans',y='counts', hue='Marital_Status', kind ='bar')\nplt.title('Bar plot of Clusters with Marital_Status Info') ","9949e843":"#df1 = df[['Kmeans','age','Children','Marital_Status','Education']]\ndf1 = df[['Kmeans','age','Education']]\ndf1 = df1.groupby(['Kmeans','Education']).agg('count').reset_index()\ndf1.rename(columns={'age':'counts'},inplace=True)\ndf1\nsns.catplot(data= df1, x='Kmeans',y='counts', hue='Education', kind ='bar')\nplt.title('Bar plot of Clusters with Education Info') ","994b89f0":"plt.figure(1, figsize= (15,10))\nn=0\nfor x in ['Enrolled', 'LastPurchase','NumDealsPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'NumWebVisitsMonth',  'Complain' ]:\n    n+=1\n    plt.subplot(2,4,n)\n    sns.stripplot(x='Cluster', y=x, data=df)\n    sns.boxplot(x='Cluster', y=x, data=df)\n    plt.title('{} with Clusters'.format(x))                 \nplt.show()","028987b6":"Visualize the data distributions and any outliers","63f9f2b5":"Cleaning the data","88a61f28":"### (1) K-means Clustering","5679655f":"## Positioning the clusters and conclusions","2762d24b":"From the plots, there can be seen some extream outliers. Hence They are removed","48eef2d3":"#### Inverse scaling","9a103114":"From these results, it can be seen that the three clusters created have the following featuers. \n\n| Cluster         | Behaviour |\n| -------- | ----------|\n| cluster 1| Higherst earners and spenders.  Average age, and the cluster with the least number of children. Highest Number of Catalogue and Instore Purchases, while lowerst cluster to conduct web visits|\n| cluster 2 | Lowest age group among the clusters, and lowerst earners and spenders. Have more childeren compared to other clusters. Looks like regular shoppers as the days since last purchase day is low|\n| cluster 3 | Cluster with the olderst demography. Shows the heighst amount of deal users.|\n","c6319358":"### Visualize based on Clusters","8f14eae7":"#### Customer use of delas and formats of purchase ","3d8df7a1":"#### Customer spending patterns","693681b5":"### Comparing the Clustering Methods to find unique features among the customers within the clusters","37f29bbc":"The project aims to identify customer types and create a customer segmentation. The data set contains several key demographical information of a registered customer base of a retail store, that also depicts their spending habits, purchases made in-store and online as well as using a catalogue, use of promotions, days since last activity as well as any complaints by them.  \n\nData obtained from : https:\/\/www.kaggle.com\/imakash3011\/customer-personality-analysis","e7922fa3":"# Customer Segmentation","19252ee7":"### (2) Heirarchical Agglomerative Clustering","67ade7f5":"From these observations, considering the counts, we can see that Kemans and Agglom can be mapped as follows : ","e87f2c72":"## Examin Correlations between features","b5d6f9f7":"#### Visualize Customer Demographics","114d0814":"## Apply clustering methods to segment the data","1518ddf2":"Data reading and wrangling","4d4c58a1":"Drop unwanted columns and  rows with missing values for income","f849aa2a":"### Examin skew"}}