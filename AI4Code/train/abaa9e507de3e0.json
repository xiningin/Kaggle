{"cell_type":{"1ecbb0a8":"code","898da6ad":"code","7dbf07b5":"code","0defb50e":"code","2f1c7e7d":"code","9ac2d3c6":"code","4de8f82c":"code","82ccd20e":"code","9ad9e3b6":"code","2bb924f8":"code","0b30eacc":"code","c2fca671":"code","5edddb84":"code","9b39705d":"code","4bc7a3e4":"code","92134e56":"code","c9ceda34":"code","6b7986a8":"code","46e9472b":"code","ed420eff":"code","00853bfc":"code","9f1aa3dc":"code","a084c472":"code","ece44e39":"code","d94ee385":"code","14844fcd":"code","b2b7b1eb":"code","82d2bc7a":"code","57d9f4db":"code","de9c5114":"code","27f65697":"code","543a177f":"code","f586889d":"code","e1e31314":"code","fdc4927a":"code","daaaa745":"code","39f2d665":"code","8d70ebb2":"code","2de77ac7":"code","5bf2ac68":"code","e0db660e":"code","0ea5307d":"code","46bd3960":"code","06b20e5f":"code","7efeca53":"code","8c07351d":"code","1ffff66b":"code","4e7e8efe":"code","c172c537":"code","09f08b7b":"code","047f65e8":"code","4d32aa81":"code","e7a4afde":"code","6e0f2433":"code","242e7a76":"code","6a67bcbe":"code","5926182f":"code","9ff163eb":"code","d31dce85":"code","1a8b0aa4":"code","3915ff86":"code","5671ab62":"code","49cb0482":"code","535d079e":"code","07a5803d":"code","bd4ccd76":"code","1300ac35":"code","47d72a06":"code","a9c1c252":"code","0d64fe98":"code","6db4bfd9":"code","be11b40a":"code","6103baf2":"code","6742abc1":"code","62571bb9":"code","52c2662b":"code","806ba90e":"code","0b478840":"code","254651ae":"code","dd4c1ae8":"code","8e7a1fc7":"code","e4a61bc7":"code","d78172ee":"code","f1ed17f6":"code","73b9720f":"code","eb8799a9":"code","0c802732":"code","820762f0":"code","e939c970":"code","226df20f":"code","b28a3c8b":"code","0a4b6639":"code","d4ddfc8f":"code","badcf7ff":"code","07af977a":"code","58a29445":"code","aa4f9303":"code","08662db8":"markdown","820c794e":"markdown","651996fa":"markdown","46727c83":"markdown","46e6f58d":"markdown","6e61c230":"markdown","3c2a2a9e":"markdown","757cf36b":"markdown","19f17413":"markdown","5fc77465":"markdown","3a6552fd":"markdown","5a143e42":"markdown","7b42b244":"markdown","b8808c7b":"markdown","b9631509":"markdown","7bf246ce":"markdown","620debe4":"markdown","58d8cba3":"markdown","0268dd15":"markdown","ed8127e1":"markdown","e79252d6":"markdown","7c7483e7":"markdown","64c57e6c":"markdown","7c0acb08":"markdown","99d5f02f":"markdown","274fcc0b":"markdown","9f1240f9":"markdown","f8dfa700":"markdown","d7b67d7b":"markdown","09895eb8":"markdown","a37b1651":"markdown","9dcce4b5":"markdown","5f7c7f78":"markdown"},"source":{"1ecbb0a8":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nconsumption=pd.read_csv('..\/input\/car-consume\/measurements.csv')\nconsumption['distance']=consumption['distance'].str.replace(',','.').astype(float)\nconsumption['consume']=consumption['consume'].str.replace(',','.').astype(float)\nconsumption['temp_inside']=consumption['temp_inside'].str.replace(',','.').astype(float)\nconsumption","898da6ad":"consumption.info()","7dbf07b5":"data=consumption.drop(['specials','temp_outside','refill liters','refill gas'],axis=1)\ndata","0defb50e":"data.info()","2f1c7e7d":"data['temp_inside']=data['temp_inside'].fillna(16.0)\n","9ac2d3c6":"data.describe()","4de8f82c":"data['speed'].plot.hist()\nplt.show()","82ccd20e":"data['distance'].plot.hist()\nplt.show()","9ad9e3b6":"sns.countplot(data['AC'])\nplt.show()","2bb924f8":"consmin=data.query('distance==1.300000')\nconsmin","0b30eacc":"consmax=data.query('distance==216.100000')\nconsmax    ","c2fca671":"sns.lmplot('distance','consume',consmin)\nplt.show()","5edddb84":"sns.lmplot('distance','consume',consmax)\nplt.show()","9b39705d":"consmin=data.query('speed==14.000000')\nconsmin","4bc7a3e4":"consmax=data.query('speed==90.000000')\nconsmax","92134e56":"sns.lmplot('distance','speed',consmin)\nplt.show()","c9ceda34":"sns.lmplot('distance','speed',consmax)\nplt.show()","6b7986a8":"minrn=data.query('rain==0.000000')\nminrn","46e9472b":"sns.lmplot('distance','consume',data=minrn)\nplt.show()","ed420eff":"maxrn=data.query('rain==1.000000')\nmaxrn","00853bfc":"sns.lmplot('distance','consume',data=maxrn)\nplt.show()","9f1aa3dc":"minsun=data.query('sun==0.000000')\nminsun","a084c472":"sns.lmplot('distance','consume',data=minsun)\nplt.show()","ece44e39":"maxsun=data.query('sun==1.000000')\nmaxsun","d94ee385":"sns.lmplot('distance','speed',data=maxsun)\nplt.show()","14844fcd":"minac=data.query('AC==0.000000')\nminac","b2b7b1eb":"sns.lmplot('distance','consume',data=minac)\nplt.show()","82d2bc7a":"maxac=data.query('AC==1.000000')\nmaxac","57d9f4db":"sns.lmplot('distance','consume',data=maxac)\nplt.show()","de9c5114":"sns.countplot(data['gas_type'])\nplt.show()","27f65697":"gas1=data[data['gas_type']=='E10']\ngas1","543a177f":"gas1.describe()","f586889d":"mingas1=data.query('distance==1.700000')\nmingas1","e1e31314":"sns.lmplot('distance','consume',data=mingas1)\nplt.show()","fdc4927a":"maxgas1=data.query('distance==130.300000')\nmaxgas1","daaaa745":"sns.lmplot('distance','consume',data=maxgas1)\nplt.show()","39f2d665":"mingas1=data.query('speed==14.000000')\nmingas1","8d70ebb2":"sns.lmplot('distance','consume',data=mingas1)\nplt.show()","2de77ac7":"maxgas1=data.query('speed==88.000000')\nmaxgas1","5bf2ac68":"sns.lmplot('distance','consume',data=maxgas1)\nplt.show()","e0db660e":"gas2=data[data['gas_type']=='SP98']\ngas2","0ea5307d":"gas2.describe()","46bd3960":"mingas2=data.query('distance==1.300000')\nmingas2","06b20e5f":"sns.lmplot('distance','consume',data=mingas2)\nplt.show()","7efeca53":"maxgas2=data.query('distance==216.100000')\nmaxgas2","8c07351d":"sns.lmplot('distance','consume',data=maxgas2)\nplt.show()","1ffff66b":"mingas2=data.query('speed==16.000000')\nmingas2","4e7e8efe":"sns.lmplot('distance','consume',data=mingas2)\nplt.show()","c172c537":"maxgas2=data.query('speed==90.000000')\nmaxgas2","09f08b7b":"sns.lmplot('distance','consume',data=maxgas2)\nplt.show()","047f65e8":"from sklearn.preprocessing import LabelEncoder\nlr=LabelEncoder()\ndata['gas_type']=lr.fit_transform(data['gas_type'])","4d32aa81":"data['distance']=data['distance'].astype(int)\ndata['consume']=data['consume'].astype(int)\ndata['temp_inside']=data['temp_inside'].astype(int)\ndata","e7a4afde":"x=data.drop('consume',axis=1)\n#print(x)\n\ny=data.iloc[:,1]\ny","6e0f2433":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.20,random_state=0)\nx_train","242e7a76":"from sklearn.preprocessing import MinMaxScaler\nmms=MinMaxScaler()\nx_trainmn=mms.fit_transform(x_train)\nx_testmn=mms.transform(x_test)","6a67bcbe":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()\nx_trainstd=ss.fit_transform(x_train)\nx_teststd=ss.transform(x_test)","5926182f":"from sklearn.decomposition import PCA\npc=PCA(n_components=5)\nx_trainpca=pc.fit_transform(x_train)\nx_testpca=pc.transform(x_test)","9ff163eb":"from sklearn.tree import DecisionTreeRegressor\ndt1=DecisionTreeRegressor(criterion='mse',splitter='best',max_depth=3,random_state=56)\ndt1.fit(x_train,y_train)\npred1=dt1.predict(x_test)\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nprint('Root Mean Squared Error(RMSE):', np.sqrt(metrics.mean_squared_error(y_test, pred1)))\nprint('Mean Absolute Error(MAE):', metrics.mean_absolute_error(y_test,pred1))\nprint('Mean Squared Error(MSE):', metrics.mean_squared_error(y_test, pred1))\n","d31dce85":"fet=['distance','speed','temp_inside','gas_type','AC','rain','sun']\n#distance\tspeed\ttemp_inside\tgas_type\tAC\train\tsun\nfrom sklearn.tree import export_graphviz\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG\nfrom IPython.display import display\n\ngraph = Source(tree.export_graphviz(dt1, out_file=None, feature_names=fet, filled = True,rounded=True))\n\n\ndisplay(SVG(graph.pipe(format='svg')))","1a8b0aa4":"plt.scatter(y_test,pred1)\nplt.xlabel('Values')\nplt.ylabel('pred1')\nplt.show()","3915ff86":"from sklearn.tree import DecisionTreeRegressor\ndt2=DecisionTreeRegressor(criterion='mse',splitter='best',max_depth=3,random_state=56)\ndt2.fit(x_trainmn,y_train)\npred2=dt2.predict(x_testmn)\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nprint('Root Mean Squared Error(RMSE):', np.sqrt(metrics.mean_squared_error(y_test, pred2)))\nprint('Mean Absolute Error(MAE):', metrics.mean_absolute_error(y_test,pred2))\nprint('Mean Squared Error(MSE):', metrics.mean_squared_error(y_test, pred2))\n","5671ab62":"fet=['distance','speed','temp_inside','gas_type','AC','rain','sun']\n#distance\tspeed\ttemp_inside\tgas_type\tAC\train\tsun\nfrom sklearn.tree import export_graphviz\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG\nfrom IPython.display import display\n\ngraph = Source(tree.export_graphviz(dt2, out_file=None, feature_names=fet, filled = True,rounded=True))\n\n\ndisplay(SVG(graph.pipe(format='svg')))","49cb0482":"plt.scatter(y_test,pred2)\nplt.xlabel(' Values')\nplt.ylabel('pred2')\nplt.show()","535d079e":"from sklearn.tree import DecisionTreeRegressor\ndt3=DecisionTreeRegressor(criterion='mse',splitter='best',max_depth=3,random_state=56)\ndt3.fit(x_trainstd,y_train)\npred3=dt3.predict(x_teststd)\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nprint('Root Mean Squared Error(RMSE):', np.sqrt(metrics.mean_squared_error(y_test, pred3)))\nprint('Mean Absolute Error(MAE):', metrics.mean_absolute_error(y_test,pred3))\nprint('Mean Squared Error(MSE):', metrics.mean_squared_error(y_test, pred3))\n","07a5803d":"fet=['distance','speed','temp_inside','gas_type','AC','rain','sun']\n#distance\tspeed\ttemp_inside\tgas_type\tAC\train\tsun\nfrom sklearn.tree import export_graphviz\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG\nfrom IPython.display import display\n\ngraph = Source(tree.export_graphviz(dt3, out_file=None, feature_names=fet, filled = True,rounded=True))\n\n\ndisplay(SVG(graph.pipe(format='svg')))","bd4ccd76":"plt.scatter(y_test,pred3)\nplt.xlabel(' Values')\nplt.ylabel('pred3')\nplt.show()","1300ac35":"from sklearn.tree import DecisionTreeRegressor\ndt4=DecisionTreeRegressor(criterion='mse',splitter='best',max_depth=3,random_state=56)\ndt4.fit(x_trainpca,y_train)\npred4=dt4.predict(x_testpca)\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nprint('Root Mean Squared Error(RMSE):', np.sqrt(metrics.mean_squared_error(y_test, pred4)))\nprint('Mean Absolute Error(MAE):', metrics.mean_absolute_error(y_test,pred4))\nprint('Mean Squared Error(MSE):', metrics.mean_squared_error(y_test, pred4))\n","47d72a06":"fetpca=['distance','speed','temp_inside','gas_type','AC']\n#distance\tspeed\ttemp_inside\tgas_type\tAC\train\tsun\nfrom sklearn.tree import export_graphviz\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG\nfrom IPython.display import display\n\ngraph = Source(tree.export_graphviz(dt4, out_file=None, feature_names=fetpca, filled = True,rounded=True))\n\n\ndisplay(SVG(graph.pipe(format='svg')))","a9c1c252":"plt.scatter(y_test,pred4)\nplt.xlabel(' Values')\nplt.ylabel('pred4')\nplt.show()","0d64fe98":"from sklearn.ensemble import RandomForestClassifier\nmodel1 = RandomForestClassifier(n_estimators=5, random_state=50,criterion='entropy',max_depth=4)\n\nmodel1.fit(x_train, y_train)\npred1=model1.predict(x_test)\npred1\n\n","6db4bfd9":"estimators=model1.estimators_[3]\nlabels=['distance','speed','temp_inside','gas_type','AC','rain','sun']\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG\nfrom IPython.display import display\n\ngraph = Source(tree.export_graphviz(estimators, out_file=None\n   , feature_names=labels\n   , filled = True))\ndisplay(SVG(graph.pipe(format='svg')))\n","be11b40a":"sns.distplot((y_test-pred1),bins=50)\nplt.show()","6103baf2":"from sklearn.ensemble import RandomForestClassifier\nmodel2= RandomForestClassifier(n_estimators=5, random_state=50,criterion='entropy',max_depth=4)\n\nmodel2.fit(x_trainmn, y_train)\npred2=model2.predict(x_testmn)\npred2\n\n","6742abc1":"estimators=model2.estimators_[3]\nlabels=['distance','speed','temp_inside','gas_type','AC','rain','sun']\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG\nfrom IPython.display import display\n\ngraph = Source(tree.export_graphviz(estimators, out_file=None\n   , feature_names=labels\n   , filled = True))\ndisplay(SVG(graph.pipe(format='svg')))\n","62571bb9":"sns.distplot((y_test-pred2),bins=20)\nplt.show()","52c2662b":"from sklearn.ensemble import RandomForestClassifier\nmodel3= RandomForestClassifier(n_estimators=5, random_state=50,criterion='entropy',max_depth=4)\n\nmodel3.fit(x_trainstd, y_train)\npred3=model3.predict(x_teststd)\npred3\n\n","806ba90e":"estimators=model3.estimators_[3]\nlabels=['distance','speed','temp_inside','gas_type','AC','rain','sun']\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG\nfrom IPython.display import display\n\ngraph = Source(tree.export_graphviz(estimators, out_file=None\n   , feature_names=labels\n   , filled = True))\ndisplay(SVG(graph.pipe(format='svg')))\n","0b478840":"sns.distplot((y_test-pred3),bins=50)\nplt.show()","254651ae":"from sklearn.ensemble import RandomForestClassifier\nmodel4= RandomForestClassifier(n_estimators=5, random_state=50,criterion='entropy',max_depth=4)\n\nmodel4.fit(x_trainpca, y_train)\npred4=model4.predict(x_testpca)\npred4\n\n","dd4c1ae8":"estimators=model4.estimators_[3]\nlabels=['distance','speed','temp_inside','gas_type','AC']\nfrom sklearn import tree\nfrom graphviz import Source\nfrom IPython.display import SVG\nfrom IPython.display import display\n\ngraph = Source(tree.export_graphviz(estimators, out_file=None\n   , feature_names=labels\n   , filled = True))\ndisplay(SVG(graph.pipe(format='svg')))\n","8e7a1fc7":"sns.distplot((y_test-pred4),bins=50)\nplt.show()","e4a61bc7":"from sklearn.linear_model import LinearRegression\nlnr=LinearRegression() \nlnr.fit(x_train,y_train)\npd=lnr.predict(x_test)\n","d78172ee":"print('Root Mean Squared Error(RMSE):', np.sqrt(metrics.mean_squared_error(y_test, pd)))\nprint('Mean Absolute Error(MAE):', metrics.mean_absolute_error(y_test, pd))\nprint('Mean Squared Error(MSE):', metrics.mean_squared_error(y_test, pd))","f1ed17f6":"import matplotlib.pyplot as plt\nplt.scatter(y_test,pd)\nplt.xlabel('y_test(True Values)')\nplt.ylabel('pd')\nplt.show()","73b9720f":"sns.distplot((y_test-pd),bins=50)\nplt.show()","eb8799a9":"from sklearn.linear_model import LinearRegression\nlnr1=LinearRegression()\nlnr1.fit(x_trainmn,y_train)\npd1=lnr.predict(x_testmn)\n","0c802732":"print('Root Mean Squared Error(RMSE):', np.sqrt(metrics.mean_squared_error(y_test, pd1)))\nprint('Mean Absolute Error(MAE):', metrics.mean_absolute_error(y_test, pd1))\nprint('Mean Squared Error(MSE):', metrics.mean_squared_error(y_test, pd1))","820762f0":"plt.scatter(y_test,pd1)\nplt.xlabel('Values')\nplt.ylabel('pd1')\nplt.show()","e939c970":"sns.distplot((y_test-pd1),bins=50)\nplt.show()","226df20f":"from sklearn.linear_model import LinearRegression\nlnr2=LinearRegression()\nlnr2.fit(x_trainstd,y_train)\npd2=lnr2.predict(x_teststd)\n","b28a3c8b":"print('Root Mean Squared Error(RMSE):', np.sqrt(metrics.mean_squared_error(y_test, pd2)))\nprint('Mean Absolute Error(MAE):', metrics.mean_absolute_error(y_test, pd2))\nprint('Mean Squared Error(MSE):', metrics.mean_squared_error(y_test, pd2))","0a4b6639":"plt.scatter(y_test,pd2)\nplt.xlabel('Values')\nplt.ylabel('pd2')\nplt.show()","d4ddfc8f":"sns.distplot((y_test-pd2),bins=50)\nplt.show()","badcf7ff":"from sklearn.linear_model import LinearRegression\nlnr3=LinearRegression()\nlnr3.fit(x_trainpca,y_train)\npd3=lnr3.predict(x_testpca)\n","07af977a":"print('Root Mean Squared Error(RMSE):', np.sqrt(metrics.mean_squared_error(y_test, pd3)))\nprint('Mean Absolute Error(MAE):', metrics.mean_absolute_error(y_test, pd3))\nprint('Mean Squared Error(MSE):', metrics.mean_squared_error(y_test, pd3))","58a29445":"plt.scatter(y_test,pd3)\nplt.xlabel('Values')\nplt.ylabel('pd3')\nplt.show()","aa4f9303":"sns.distplot((y_test-pd3),bins=50)\nplt.show()","08662db8":"## RANDOM FOREST ACC TO PCA:-","820c794e":"## MAXIMUM SPEED CONSUME BY GAS2:-","651996fa":"## MINIMUM FUEL CONSUMPTION IN SUNNY DAYS:-","46727c83":"## MAXIMUM SPEED CONSUME BY GAS1:-","46e6f58d":"## LINEAR REGRESSIION ACC TO PCA:-","6e61c230":"## VISULIZATION OF MIN. AND MAX. FUEL CONSUMPTION OF TRAVELLED DISTANCE :-","3c2a2a9e":"## MINIMUN FUEL CONSUME WITH AC:-","757cf36b":"## LINEAR REGRESSION ACC TO MINMAX SCALAR:-","19f17413":"## MAXIMUM DISTANCE TRAVEL BY GAS1:-","5fc77465":"## DECISION MAKING:-","3a6552fd":"## LINEAR REGRESSION ACC TO TRAIN TEST DATA:-","5a143e42":"## RANDOM FOREST CLASSIFIER ACC TO MINMAX SCALAR:-","7b42b244":"## MAXIMUM FUEL CONSUME WITH AC:-","b8808c7b":"## MIN. AND MAX. FUEL CONSUMPTION ACC TO SPEED :-","b9631509":"## MINIMUM SPEED CONSUME BY GAS2 :-","7bf246ce":"## MIN. FUEL CONSUMPTION IN RAINY DAYS:-","620debe4":"## MAXIMUM FUEL CONSUMPTION IN SUNNY DAYS:-","58d8cba3":"## RANDOM FOREST ACC TO STANDARD SACALAR:-","0268dd15":"## MAXIMUM DISTANCE TRAVEL BY GAS2:-","ed8127e1":"## MAXIMUM FUEL CONSUMPTION IN RAINY DAYS:-","e79252d6":"## DECISION TREE ACC TO PCA:-","7c7483e7":"## MINIMUM DISTANCE TRAVEL BY GAS2:-","64c57e6c":"## LINEAR REGRESSION ACC TO STANDARD SCALAR:-","7c0acb08":"## VISULIZATION OF MAX. AND MAX. FUEL CONSUMPTION ACC TO SPEED :-","99d5f02f":"## DECISION TREE ACC TO STANDARD SCALAR:-","274fcc0b":"## minimum speed consume by gas1:-","9f1240f9":"## MIN. AND MAX. FUEL CONSUMPTION OF TRAVELLED DISTANCE :-","f8dfa700":"## THE DIFFERENT GAS TYPE USED BY USER:-","d7b67d7b":"## RANDOM FOREST CLASSIFIER BY TRAIN TEST:-","09895eb8":"## DECISION TREE ACC TO TRAIN TEST DATA:-","a37b1651":"## MINIMUM DISTANCE TRAVEL BY GAS1:-","9dcce4b5":"## FUEL CONSUMPTION ACCORDING TO AC :-","5f7c7f78":"## DECISION TREE ACC TO MINMAX SCALAR:-"}}