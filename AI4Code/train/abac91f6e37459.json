{"cell_type":{"d199237f":"code","abae56b8":"code","3576ece8":"code","c6655dfc":"code","113660b2":"code","6be824ee":"code","97c3e52e":"code","db9d4896":"code","99519934":"code","8c5f9753":"code","b7b73c5d":"code","501dd2d5":"code","da3b02b5":"code","95bda204":"code","5bdd5598":"code","c475400a":"code","dc46e948":"code","1387d438":"code","3d8232ce":"code","f778cf35":"code","edaefd58":"code","546d3032":"code","df158bda":"code","ce25645f":"code","fb25d62f":"code","19d0055f":"code","248ca0ec":"code","ffe98190":"code","d6b03706":"code","5af7ef2a":"markdown","8ea2a0a9":"markdown","0595f1c9":"markdown","bcd591cf":"markdown"},"source":{"d199237f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import VotingClassifier\nimport time\nfrom contextlib import contextmanager","abae56b8":"churn_data = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')","3576ece8":"churn_data.info() # NAN value bulunmamaktadir.","c6655dfc":"churn_data.head()","113660b2":"churn_data.drop(labels=['RowNumber','CustomerId','Surname'],\n                axis=1,\n                inplace=True)","6be824ee":"churn_data.head()","97c3e52e":"categorical_features = [\"Geography\",\"Gender\",\"NumOfProducts\",\"HasCrCard\",\"IsActiveMember\"]\n\nnumerical_features = [\"CreditScore\",\"Age\",\"Tenure\",\"Balance\",\"EstimatedSalary\"]\n\ntarget = \"Exited\"","db9d4896":"churn_data[numerical_features].describe()","99519934":"churn_data[numerical_features].hist(bins=30, figsize=(10, 10));","8c5f9753":"fig, ax = plt.subplots(1, 5, figsize=(30, 5))\nchurn_data[churn_data.Exited == 0][numerical_features].hist(bins=30, color=\"blue\", alpha=0.5, ax=ax);\nchurn_data[churn_data.Exited == 1][numerical_features].hist(bins=30, color=\"red\", alpha=0.5, ax=ax);","b7b73c5d":"g = sns.pairplot(churn_data,hue = 'Exited')","501dd2d5":"churn_data_cleaned = pd.get_dummies(churn_data,\n                                    prefix_sep='_', \n                                    columns=categorical_features,\n                                    drop_first=True,\n                                    dtype=int)","da3b02b5":"churn_data_cleaned.head()","95bda204":"churn_data_cleaned[numerical_features].describe()","5bdd5598":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler() \ndata_scaled = scaler.fit_transform(churn_data_cleaned[numerical_features])","c475400a":"churn_data_cleaned[numerical_features] = data_scaled","dc46e948":"churn_data_cleaned.head()","1387d438":"df = churn_data_cleaned\nX = df.drop(['Exited'], axis=1)\ny = df[\"Exited\"]\n    \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","3d8232ce":"names = [\"LogisticRegression\",\"GaussianNB\",\"KNeighborsClassifier\",\"LinearSVC\",\"SVC\",\n         \"DecisionTreeClassifier\",\"RandomForestClassifier\",\"GradientBoostingClassifier\",\n         \"XGBClassifier\",\"LGBMClassifier\",\"CatBoostClassifier\"]\n    \n    \nclassifiers = [LogisticRegression(), GaussianNB(), KNeighborsClassifier(), LinearSVC(), SVC(),\n               DecisionTreeClassifier(),RandomForestClassifier(), GradientBoostingClassifier(),\n               XGBClassifier(), LGBMClassifier(), CatBoostClassifier(verbose = False)]","f778cf35":"for name, clf in zip(names, classifiers):\n    \n    model = clf.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    msg = \"%s: %f\" % (name, acc)\n    print(msg)","edaefd58":"results = []\nA = []\n\nfor name, clf in zip(names, classifiers):\n        \n    kfold = KFold(n_splits=10, random_state=1001)\n    cv_results = cross_val_score(clf, X, y, cv = kfold, scoring = \"accuracy\")\n    results.append(cv_results)\n    A.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean() , cv_results.std())\n    print(msg)","546d3032":"cv_result = {}\nbest_estimators = {}\nbest_params = {}\n    \nclf = GridSearchCV(RandomForestClassifier(), \n                   param_grid = {\"max_features\": [\"log2\",\"Auto\",\"None\"],\n                 \"min_samples_split\":[2,3,5],\n                 \"min_samples_leaf\":[1,3,5],\n                 \"bootstrap\":[True,False],\n                 \"n_estimators\":[50,100,150],\n                 \"criterion\":[\"gini\",\"entropy\"]},\n                   cv =10, scoring = \"accuracy\", \n                   n_jobs = -1, \n                   verbose = False)\n\nclf.fit(X_train,y_train)\ncv_result = clf.best_score_\nbest_estimators = clf.best_estimator_\nbest_params = clf.best_params_","df158bda":"print('cross validation accuracy : %.3f'%cv_result)\nprint(best_estimators)\nprint(best_params)","ce25645f":"y_pred =  best_estimators.fit(X_train,y_train).predict(X_test)\n\naccuracy=accuracy_score(y_pred, y_test)\n\nprint('accuracy score :', \"%.3f\" %accuracy)","fb25d62f":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_pred, y_test)","19d0055f":"from sklearn.metrics import precision_score\nprecision_score(y_pred, y_test)","248ca0ec":"from sklearn.metrics import f1_score\nf1_score(y_pred, y_test)","ffe98190":"from sklearn.metrics import roc_auc_score\nauc_RF = roc_auc_score(y_pred, y_test)\nauc_LR = roc_auc_score(y_pred, y_test)\nprint('AUC RF:%.3f'% auc_RF)\nprint('AUC LR:%.3f'% auc_LR)","d6b03706":"from sklearn.metrics import precision_recall_fscore_support as score\n\nprecision, recall, fscore, support = score(y_pred, y_test)\n\nprint('precision: {}'.format(precision))\nprint('recall: {}'.format(recall))\nprint('fscore: {}'.format(fscore))\nprint('support: {}'.format(support))","5af7ef2a":"Kategorik degiskenlere one hot encoding uyguluyoruz","8ea2a0a9":"****Input all the neccessay packages****","0595f1c9":"RowNumber, Customer ID and Surname degiskenlerini drop ediyoruz, bu degiskenlerin isimize yaramayacagini dusunduk","bcd591cf":"**MACHINE LEARNING**"}}