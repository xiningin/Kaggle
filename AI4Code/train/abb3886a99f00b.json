{"cell_type":{"7ed7664d":"code","5f398df9":"code","ad155fe3":"code","68b34c7a":"code","3228f063":"code","08f5c882":"code","9892ebbb":"code","e1f7f2f4":"code","8ae9dcfe":"code","bbb5771a":"code","a916cf20":"markdown","97c5a685":"markdown","5a866098":"markdown","a0a947f3":"markdown","96ee4adb":"markdown","6882d0e5":"markdown","2d795b26":"markdown","fa0de7a4":"markdown","55fd67e1":"markdown","565ff63d":"markdown"},"source":{"7ed7664d":"# Here we import standard libraries and our environment\n# You must first add the data for the task in the settings column\nimport random\nimport numpy as np\nfrom kaggle_environments import make, evaluate\n\n# Create the game environment\nenv = make(\"connectx\", debug=True)\n\n#Run to random agents against one another\nenv.run([\"random\", \"random\"])\n\n# To render using iPython, we have to use a notebook as the Kaggle editor can't show HTML objects\n# Rendering allows us to observe the game\nenv.render(mode=\"ipython\")","5f398df9":"# Helper function for minimax: checks if agent or opponent has four in a row in the window\n# A window is a group of four slots in our game\n# If all 4 slots in the window contain either a 1 or a 2 then one of the players has won and True is returned\ndef is_terminal_window(window, config):\n    return window.count(1) == config.inarow or window.count(2) == config.inarow\n\n\n# Helper function for minimax: checks if game has ended\ndef is_terminal_node(grid, config):\n\n    # Check for draw\n    # The following line looks for remaining empty slots in the top row\n    # If none are found, there can be no more moves so the game ends and we return True\n    if list(grid[0, :]).count(0) == 0:\n        return True\n    \n    # Check for win: horizontal, vertical, or diagonal\n    # Horizontal\n    # The grid is shown below. We loop through all slots with an x\n    # Next, we create a window with our slot and the 3 slots to the right\n    # Then we call is_terminal_window() with our window as a parameter\n    # If a player has won then is_terminal_window() returns True and we return True\n    # [[x, x, x, x, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0]]\n    # For all following loops, we will show only the grid as the explanation remains the same\n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[row, col:col+config.inarow])\n            if is_terminal_window(window, config):\n                return True\n            \n    # Vertical\n\t# [[x, x, x, x, x, x, x],\n\t#  [x, x, x, x, x, x, x]\n\t#  [x, x, x, x, x, x, x],\n\t#  [0, 0, 0, 0, 0, 0, 0],\n\t#  [0, 0, 0, 0, 0, 0, 0],\n\t#  [0, 0, 0, 0, 0, 0, 0]]\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(grid[row:row+config.inarow, col])\n            if is_terminal_window(window, config):\n                return True\n            \n    # Positive diagonal\n\t# [[x, x, x, x, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0],\n\t#  [0, 0, 0, 0, 0, 0, 0],\n\t#  [0, 0, 0, 0, 0, 0, 0],\n\t#  [0, 0, 0, 0, 0, 0, 0]]\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            if is_terminal_window(window, config):\n                return True\n            \n    # Negative diagonal\n\t# [[0, 0, 0, 0, 0, 0, 0],\n\t#  [0, 0, 0, 0, 0, 0, 0],\n\t#  [0, 0, 0, 0, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0],\n\t#  [x, x, x, x, 0, 0, 0]]\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            if is_terminal_window(window, config):\n                return True\n            \n    return False","ad155fe3":"# For a given grouping of 4 slots (window), count the number of pieces (either piece 1 or piece 2)\n# Note zero is returned if the window is entirely full i.e [1,1,1,2] -> 0\n# This lets us only consider groupings that could turn into 4-in-a-row\ndef check_window(window, num_discs, piece, config):\n    return (window.count(piece) == num_discs and window.count(0) == config.inarow-num_discs)\n\n# This function is so similar to is_terminal_node, I believe this should be self-explanatory\n# The difference here is that we tot up the total number of windows with x-in-a-row in num_windows\ndef count_windows(grid, num_discs, piece, config):\n    num_windows = 0\n    \n    # Horizontal\n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[row, col:col+config.inarow])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n                \n    # Vertical\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(grid[row:row+config.inarow, col])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n                \n    # Positive diagonal\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n                \n    # Negative diagonal\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n                \n    return num_windows","68b34c7a":"# Gets board at next step if agent drops piece in selected column\ndef drop_piece(grid, col, piece, config):\n    next_grid = grid.copy()\n    for row in range(config.rows-1, -1, -1): # Loop from the bottom to the top\n        if next_grid[row][col] == 0: # When an empty slot is found, place a piece\n            break\n    next_grid[row][col] = piece\n    return next_grid","3228f063":"def get_heuristic(grid, mark, config):\n    num_threes = count_windows(grid, 3, mark, config)\n    num_fours = count_windows(grid, 4, mark, config)\n    num_threes_opp = count_windows(grid, 3, mark%2+1, config)\n    num_fours_opp = count_windows(grid, 4, mark%2+1, config)\n    score = num_threes - 1e2*num_threes_opp - 1e4*num_fours_opp + 1e6*num_fours\n    return score","08f5c882":"def minimax(node, depth, maximizingPlayer, mark, config):\n    is_terminal = is_terminal_node(node, config) # This asks is the game finished\n    valid_moves = [c for c in range(config.columns) if node[0][c] == 0] # This asks if there are any columns that aren't completely filled\n    \n    # If we're at the end of our tree (the leaf) or if the game is finished, return just the heuristic score\n    if depth == 0 or is_terminal:\n        return get_heuristic(node, mark, config)\n    \n    # Maximise the score on our turn\n    if maximizingPlayer:\n        value = -np.Inf\n        for col in valid_moves:\n            child = drop_piece(node, col, mark, config) # Returns new grid if valid move played\n            value = max(value, minimax(child, depth-1, False, mark, config))\n        return value\n    \n    # Minimise the score on our opponent's turn\n    else:\n        value = np.Inf\n        for col in valid_moves:\n            child = drop_piece(node, col, mark%2+1, config)\n            value = min(value, minimax(child, depth-1, True, mark, config)) # Aww jeez, recursion alert\n        return value","9892ebbb":"# Uses minimax to calculate value of dropping piece in selected column\ndef score_move(grid, col, mark, config, nsteps):\n    next_grid = drop_piece(grid, col, mark, config)\n    score = minimax(next_grid, nsteps-1, False, mark, config)\n    return score","e1f7f2f4":"def agent_minimax(obs, config):\n    # How deep to make the game tree: higher values take longer to run!\n    N_STEPS = 3\n    \n    # Get list of valid moves\n    valid_moves = [c for c in range(config.columns) if obs.board[c] == 0]\n    \n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    \n    # Use the heuristic to assign a score to each possible board in the next step\n    scores = dict(zip(valid_moves, [score_move(grid, col, obs.mark, config, N_STEPS) for col in valid_moves]))\n    \n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    \n    # Select at random from the maximizing columns\n    return random.choice(max_cols)","8ae9dcfe":"# Run once to observe the procedure is implemented correctly\nenv.run([agent_minimax, \"random\"])\nenv.render(mode=\"ipython\")\n\ndef get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))\n\n# Determine the winning percentages with\n# get_win_percentages(agent1=agent_blocker, agent2=agent_random)","bbb5771a":"import inspect\nimport os\n\nf = open(\"submission.py\", \"w\")\nf.write(\"import random \\n\")\nf.write(\"import numpy as np \\n\")\nf.write(inspect.getsource(drop_piece))\nf.write(inspect.getsource(count_windows))\nf.write(inspect.getsource(is_terminal_window))\nf.write(inspect.getsource(is_terminal_node))\nf.write(inspect.getsource(check_window))\nf.write(inspect.getsource(get_heuristic))\nf.write(inspect.getsource(minimax))\nf.write(inspect.getsource(score_move))\nf.write(inspect.getsource(agent_minimax))\nf.close()\n\nprint(\"agent_minimax\", \"written to\", \"submission.py\")","a916cf20":"<h3>Generate the <i>submission.py<\/i> file<\/h3>\n\n<p>\n    As shown in other notebooks, we use an intuitive one-by-one procedure to include our functions into our submission file. Note that we must also include the libraries used in the script for completeness.\n<\/p>","97c5a685":"<h3>Possible improvements:<\/h3>\n<p>\n<ol>\n    <li>Remove confusion by checking for a draw in a separate function.<\/li>\n    <li>Re-name the functions. The functions stand-alone and should be understandable without the broader context of the minimax function<\/li>\n    <li>Consider combining functionality with <i>count_windows()<\/i>. They seem to have a very similar function, we could reduce the length of our script by combining them.<\/li>\n<\/ol>\n\nIMPORTANT: Both of these functions could be removed and replaced with\n<code>\ndef is_terminal_node(grid, config):\n    if list(grid[0, :]).count(0) == 0:\n        return True\n    return bool(count_windows(grid, 4, 1, config)+count_windows(grid, 4, 2, config))\n<\/code>\n\nThat was painful and took a long time to figure out. I am less happy than when I started :(\n<\/p>\n\n<h2>The confusing repetition in <i>check_window()<\/i> and <i>count_windows()<\/i><\/h2>\n<p>\n    The functions <i>check_window()<\/i> and <i>count_windows()<\/i> have very similar functionality to <i>is_terminal_window()<\/i> and <i>is_terminal_node()<\/i>, respectively. Now, instead of returning True if we find 4-in-a-row and False otherwise, we look in every grouping of 4 adjacent slots (called a window here) and return the number of times we found 3-in-a-row or 4-in-a-row. The number-in-a-row we search for is determined by the parameter <i>num_discs<\/i>. Hence if we set <i>num_discs=4<\/i>, we determine if the game has finished - this makes the previous functions redundant.\n<\/p>\n\n<table style=\"width:50%\", align=\"left\">\n  <tr>\n    <th>Parameter<\/th>\n    <th>Values<\/th>\n    <th>Explanation<\/th>\n  <\/tr>\n\n  <tr>\n    <td><i>num_discs<\/i><\/td>\n    <td>[1,2,3,4]<\/td>\n      <td>Count number of times we find <i>num_discs<\/i>-in-a-row<\/td>\n  <\/tr>\n    \n  <tr>\n    <td><i>piece<\/i><\/td>\n    <td>[1,2]<\/td>\n    <td>The piece of the player being considered<\/td>\n  <\/tr>\n<\/table>","5a866098":"<h1>ConnectX - Functions Explained<\/h1>\n\n<p>\nThe following notebook follows the third step of the tutorial. It explains each function in depth so the reader can understand the function of the minimax agent. This notebook is self-contained and can be submitted but its value is in the explanations as no changes (other than comments) have been made. For similar notebooks, see my other notebook on ConnectX or the Intro to Game AI and Reinforcement Learning course.\n<\/p>\n\n<h3>General issues<\/h3>\n<p>\n    Some of you may just skim this to look for quick tips on how to debug your program so I've attached these first. If these do not make sense, I recommend continuing reading.\n    <ul>\n        <li>The environment variable <i>config<\/i> is not a dictionary. You can access values through dot notation i.e. config.rows.<\/li>\n        <li>Some functions are redundant. This is pointed out below and alternatives and adjustments are suggested.\n            <ul>\n                <li>Replace <i>is_terminal_window()<\/i> and <i>is_terminal_node()<\/i><\/li>\n                <li>Include the first node in our <i>minimax()<\/i> function rather than considering the first node in <i>agent_minimax()<\/i><\/li>\n            <\/ul>\n        <li>Requiring the grid size to be 6x7 and that we are playing Connect4 will simplify your program to help debugging.<\/li>\n    <\/ul>\n<\/p>\n\n<h2>Implement the game environment<\/h2>\n<p>\nLet's setup our environment as shown in the course notebook. This allows us to:\n    <ol>\n        <li>Test and edit our agents<\/li>\n        <li>Submit our solution<\/li>\n    <\/ol>\nTo show this is running, we pit two random agents against one another.\n<\/p>","a0a947f3":"<h3><i>get_heuristic()<\/i><\/h3>\n<p>\n    Another intuitive function :) Here, we search through all windows (these are the groupings of four slots we mentioned earlier) and count the number of times we find 3 of our pieces, 3 of the opposing player's pieces, 4 of our pieces or 4 of the opposing player's pieces. We use an arbritrary weighting to assign a score. This is an important topic in Reinforcement Learning and the course explains this well. I'll make a new notebook shortly to further explain it.\n<\/p>\n\n<table style=\"width:50%\", align=\"left\">\n  <tr>\n    <th>Number of windows where<\/th>\n    <th>Weight<\/th>\n  <\/tr>\n\n  <tr>\n    <td><i>Player has 3<\/i><\/td>\n    <td>1<\/td>\n  <\/tr>\n    \n  <tr>\n    <td><i>Opposing player has 3<\/i><\/td>\n    <td>-100<\/td>\n  <\/tr>\n    \n  <tr>\n    <td><i>Player has 4<\/i><\/td>\n    <td>1000000<\/td>\n  <\/tr>\n    \n  <tr>\n    <td><i>Opposing player has 4<\/i><\/td>\n    <td>-10000<\/td>\n  <\/tr>\n<\/table>","96ee4adb":"<h2>Let's talk about some useful functions now<\/h2>\n\n<h3><i>drop_piece()<\/i><\/h3>\n<p>\n    Given a column and a piece, we return a new grid with a piece placed in that column. Within our column, we scan up from the bottom to find a free slot and place our piece there. The following function may be a more intuitive version for beginners.\n<\/p>\n<code>\ndef drop_piece(grid, col, piece, config):\n    next_grid = grid.copy()\n    for row in range(config.rows-1, -1, -1):\n        if next_grid[row][col] == 0:\n            next_grid[row][col] = piece\n            break\n    return next_grid\n<\/code>","6882d0e5":"<h2>Functions to show if the game is over: <i>is_terminal_window()<\/i> and <i>is_terminal_node()<\/i><\/h2>\n\n<p>\n    <i>is_terminal_node()<\/i> returns only True or False to indicate whether the game has been won by either player (True) or not yet won (False). We can think of this function as telling us whether the game is finished or not hence <i>is_finished()<\/i> may have been a better name. The function has a few distinct parts:\n    <ol>\n        <li>Check if all moves have been played. If so, return False to indicate the game has not been won<\/li>\n        <li>Check all possible groupings (called windows) of \"4 in a row\" by considering groupings with orientations:\n            <ul>\n                <li>Horizontal<\/li>\n                <li>Vertical<\/li>\n                <li>Positive diagonal (i.e. groupings running from the top-left to the bottom-right)<\/li>\n                <li>Negative diagonal (i.e. groupings running from the top-right to the bottom-left)<\/li>\n            <\/ul>\n        <\/li>\n    <\/ol>\n<\/p>\n\n<p>\n    <i>is_terminal_window()<\/i> is a function used by the <i>is_terminal_node()<\/i> function. It returns True if any grouping (called window in the script) contains all 1 values or all 2 values to indicate either player has won.\n<\/p>\n\n<p>\n    These functions are quite large and can be hard to understand but their use is simple - to determine whether either player has won.\n<\/p>","2d795b26":"<p>\nTo check this has worked, look in the tab to the right. Under data, find the \"output\" folder. Find your \"submission.py\" file and download it to observe the contents. We should have a self-contained script with all necessary functions for our agent. Now, we are ready to submit this solution!\n<\/p>\n\n<h3>Submitting to the competition<\/h3>\n\n<p>\nI want to refer back to the course here as it offers a very good explanation of how to make our final submission.\n<ol>\n    <li>Begin by clicking on the blue Save Version button in the top right corner of the window. This will generate a pop-up window.<\/li>\n    <li>Ensure that the Save and Run All option is selected, and then click on the blue Save button.<\/li>\n    <li>This generates a window in the bottom left corner of the notebook. After it has finished running, click on the number to the right of the Save Version button. This pulls up a list of versions on the right of the screen. Click on the ellipsis (...) to the right of the most recent version, and select Open in Viewer. This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.<\/li>\n    <li>Click on the Output tab on the right of the screen. Then, click on the blue Submit button to submit your results to the leaderboard.<\/li>\n<\/ol>\n<\/p>\n<p>\nAnd you've submitted!!! :)\n<\/p>\n<p>\nI hope you all found success with this notebook. If you're still having difficulties submitting, feel free to comment on this notebook and I'll reply as soon as I can.\n<\/p>","fa0de7a4":"<h2>The minimax agent<\/h2>\n\n<h3>The truth<\/h3>\n<p>\n    Ok, so, you've made it this far. Whoop whoop! But here's where it gets trickier. You don't need to understand all of the following so don't be too disheartened if it seems overwhelming.\n<\/p>\n\n<h3>The confusion<\/h3>\n\n<p>\n    I think the confusion here comes from how the function is called making it difficult to analyse as a standalone function. Later, when we call the function, we call it on each possible move for our player. This means that we don't really start at the top of the tree but rather at the second branch. Looking forward in the <i>score_move()<\/i> function, you'll see <i>minimax()<\/i> is called with the parameter <i>maximisingPlayer=False<\/i> which shows us that the first branch of the tree actually involves minimising the score of the opposing player.\n<\/p>\n<p>\n    If you are willing to change this to simiplify your code, note that the <i>valid_moves<\/i> expression is the same in both our <i>minimax()<\/i> and <i>agent_minimax()<\/i>. \n<\/p>\n\n<h3>Three at once<\/h3>\n\n<p>\n    Because these functions are so interdependent, we unfortunately have to tackle them together. First, <i>agent_minimax()<\/i> finds all valid moves and calls <i>minimax()<\/i> on each possible option. Now, <i>maximisingPlayer=False<\/i> so within our <i>minimax()<\/i> function, we consider all possible opponent moves. The function is recursive and calls itself but with <i>maximisingPlayer=True<\/i> so that we now consider the player's move. This process repeats until we have done it <i>N_STEPS=3<\/i> times. At this point, we find <i>minimax()<\/i> is called with <i>depth=0<\/i> so our function returns the heuristic score for the current setup including all the hypothetical moves that our tree has assumed.\n<\/p>\n<p>\n    At this point, we can return to the explanation in the course. We calculate the value of each branch of our tree by maximising the score (if it is our turn) or minimising the score (if it is our opponent's turn). Finally, when we have summed the value of all the branches, we should have an optimal choice. The function <i>agent_minimax()<\/i> has a dictionary called <i>scores<\/i> which stores all the possible moves (by their column) with the heuristic score of the tree of that move. We then pick the best scoring move (or randomly pick out of the top scoring ones if there is a tie).\n<\/p>","55fd67e1":"<h3> ","565ff63d":"<h2>Test the Agent<\/h2>\n\n<h3>Determine the winning percentages<\/h3>\n<p>\nA contrast to prior functions, the course explains <i>get_win_percentages()<\/i> well and there is no need to edit it to improve your agent. As such, I shall just leave this here. Uncomment the last line to evaluate your agent. If it takes to long, lower <i>n_rounds<\/i>.\n<\/p>"}}