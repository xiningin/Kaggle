{"cell_type":{"ef2e63cc":"code","795f911f":"code","8bf021f1":"code","606f1743":"code","70eca928":"code","60fe0d50":"code","9fc208a7":"code","1034eada":"code","7a402f31":"code","42fdeea1":"code","083549a9":"code","d36bb1bb":"code","a9fd0383":"code","7cef5c20":"code","811e3747":"code","4f94d846":"code","ad1407f3":"code","0a52753e":"code","ad830f05":"code","7ec5e8fb":"code","b662280e":"code","b00cd780":"code","558f1264":"code","34c221ae":"code","418fb73f":"code","f153cd69":"code","a03dbfe1":"code","21a9c9ac":"code","c36ade5e":"code","def612ee":"code","c0a0c41d":"code","898c10e3":"code","61fb9a88":"code","85dd0f40":"code","20722307":"markdown","2f100541":"markdown","53e668a7":"markdown","dd8df487":"markdown","e261a16d":"markdown","f7ca571b":"markdown","f573141f":"markdown","951cb5e7":"markdown","4f11d62e":"markdown","1b49f50b":"markdown","ddf71c37":"markdown","c69db3f5":"markdown","687bc1f6":"markdown","8f2c47d1":"markdown","3decaa38":"markdown","5e5fea89":"markdown","a6b88597":"markdown","aca6e23d":"markdown","264d5c74":"markdown","5b8d28bf":"markdown","0f45f811":"markdown","0b7a161e":"markdown","ee00ba12":"markdown","cf37455e":"markdown","2f2ec562":"markdown"},"source":{"ef2e63cc":"import datetime\nimport os\nimport pickle\nimport shap\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport xgboost as xgb\nimport lightgbm as lgbm\n\nimport sklearn\nimport catboost as ctb\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report, precision_score, f1_score\nfrom sklearn import metrics\n\nfrom catboost import Pool, cv\nfrom catboost.utils import get_roc_curve\nfrom catboost.utils import get_fpr_curve\nfrom catboost.utils import get_fnr_curve\nfrom catboost.utils import select_threshold","795f911f":"matplotlib.rcParams.update({'font.size': 14})\npd.set_option('max_columns', 100)\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 10000)\npd.set_option('max_colwidth', 300)","8bf021f1":"def metamorphosis(raw_df):\n    \n    # Make a copy of DataFrame\n    df = raw_df.copy()\n    \n    \n    # Some constants\n    cred_score_median = df['Credit Score'].median()\n    ann_inc_median = df['Annual Income'].median()\n    wired_loan_amount = np.percentile(raw_train_df['Current Loan Amount'], 85)\n    wired_open_credit = np.percentile(raw_train_df['Maximum Open Credit'], 99)\n    \n    \n    # Converts types\n    object_cols = df.select_dtypes(include='object').columns.tolist()\n    float_cols = df.select_dtypes(include='float64').columns.tolist()\n\n    df[object_cols] = df[object_cols].astype('category')\n    df[float_cols] = df[float_cols].astype('float32')\n\n\n    # Fill NaN section\n    df['Annual Income'] = df['Annual Income'].fillna(ann_inc_median)\n    df['Credit Score'] = df['Credit Score'].fillna(cred_score_median)\n    df['Bankruptcies'] = df['Bankruptcies'].fillna(0)\n    df['Years in current job'] = df['Years in current job'].fillna('< 1 year')\n    \n    df = df.drop(columns=['Months since last delinquent'])\n        \n    # Maximum Open Credit\n    df.loc[df['Maximum Open Credit'] > wired_open_credit * 2, 'Maximum Open Credit'] = wired_open_credit\n    # Current Loan Amount (to del NaNs)\n    df.loc[df['Current Loan Amount'] > wired_loan_amount * 2, 'Current Loan Amount'] = None\n    \n    if TARGET in df.columns.tolist():\n        df.dropna(inplace=True)\n        df[TARGET] = df[TARGET].astype('int8')        \n        \n    df['Current Loan Amount'].fillna(wired_loan_amount, inplace=True)\n        \n    df['Term'] = pd.Series(df['Term'].map({'Short Term': 0, 'Long Term': 1}), dtype=np.int8)\n    # Years in current job\n    job_years_dict = {'< 1 year': 0,\n                      '1 year': 1,\n                      '2 years': 2,\n                      '3 years': 3,\n                      '4 years': 4,\n                      '5 years': 5,\n                      '6 years': 6,\n                      '7 years': 7,\n                      '8 years': 8,\n                      '9 years': 9,\n                      '10+ years': 10}\n    df['Years in current job'] = pd.Series(df['Years in current job'].map(job_years_dict), dtype=np.int8)\n    \n    df['No Tax Liens'] = (df['Tax Liens'] == 0)\n    df['No Credit Problems'] = (df['Number of Credit Problems'] == 0)\n    df['No Bankruptcies'] = (df['Bankruptcies'] == 0)\n\n    df['Credit Score Cat'] = 0\n    df.loc[(df['Credit Score'] >= 580) & (df['Credit Score'] < 670), 'Credit Score Cat'] = 1\n    df.loc[(df['Credit Score'] >= 670) & (df['Credit Score'] < 730), 'Credit Score Cat'] = 2\n    df.loc[(df['Credit Score'] >= 730) & (df['Credit Score'] < 735), 'Credit Score Cat'] = 3\n    df.loc[(df['Credit Score'] >= 735) & (df['Credit Score'] < 755), 'Credit Score Cat'] = 4\n    df.loc[df['Credit Score'] > 755, 'Credit Score Cat'] = -1\n    \n    \n    # Makes dummies\n    df = pd.get_dummies(df, drop_first=True)\n    \n    renew_prop = 'Purpose_renewable energy'\n    if renew_prop not in df.columns.tolist():\n        df[renew_prop] = 0\n    \n    int_columns = [\n               'Annual Income',\n               'Tax Liens',\n               'Number of Open Accounts',\n               'Maximum Open Credit',\n               'Number of Credit Problems',\n               'Bankruptcies',\n               'Current Credit Balance',\n               'Monthly Debt',\n               'Credit Score']\n    \n    df[int_columns] = df[int_columns].astype('int32')\n\n    \n    return df","606f1743":"def heatmap(df):\n    corr = df.corr()\n\n    plt.figure(figsize=(10, 10))\n\n    ax = sns.heatmap(\n        corr, \n        vmin=-1, vmax=1, center=0,\n        cmap=sns.diverging_palette(10, 240, n=200),\n        square=True\n    )\n\n    ax.set_xticklabels(\n        ax.get_xticklabels(),\n        rotation=45,\n        horizontalalignment='right'\n    )\n    plt.show()","70eca928":"def get_cat_features(df):\n    \n    cat_features_list = []\n    object_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()\n       \n    for cf in object_cols:\n        cat_features_list.append(df.columns.get_loc(cf))\n    \n    return cat_features_list","60fe0d50":"def get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred):\n    f1_test = f1_score(y_test_true, y_test_pred)\n    precision_test = precision_score(y_test_true, y_test_pred)\n    \n    print('F1-score: ', f1_test)\n    print('Precision: ', precision_test)\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('TEST\\n\\n' + classification_report(y_test_true, y_test_pred))\n    print('Confusion Matrix\\n')\n    print(pd.crosstab(y_test_true, y_test_pred))\n    \n    return f1_test, precision_test","9fc208a7":"def show_feature_importances(feature_names, feature_importances, get_top=None):\n    feature_importances = pd.DataFrame({'feature': feature_names, 'importance': feature_importances})\n    feature_importances = feature_importances.sort_values('importance', ascending=False)\n       \n    plt.figure(figsize = (10, len(feature_importances) * 0.5))\n    \n    sns.barplot(feature_importances['importance'], feature_importances['feature'])\n    \n    plt.xlabel('Importance')\n    plt.title('Importance of features')\n    plt.show()\n    \n    if get_top is not None:\n        return feature_importances['feature'][:get_top].tolist()","1034eada":"TRAIN_FILEPATH = '\/kaggle\/input\/credit-default-prediction-ai-big-data\/train.csv'\nTEST_FILEPATH = '\/kaggle\/input\/credit-default-prediction-ai-big-data\/test.csv'\nMETRICS_FILEPATH = 'metrics.pkl'\nTARGET = 'Credit Default'","7a402f31":"raw_train_df = pd.read_csv(TRAIN_FILEPATH)\nraw_test_df = pd.read_csv(TEST_FILEPATH)\nraw_train_df.head().T","42fdeea1":"raw_train_df.describe().T","083549a9":"plt.figure(figsize=(12, 12))\ncolours = ['darkblue', 'white'] \nsns.heatmap(raw_train_df.isnull(), cmap=sns.color_palette(colours))","d36bb1bb":"for col in raw_train_df.columns:\n    pct_missing = np.mean(raw_train_df[col].isna())\n    if pct_missing:\n        print('{} - {}%'.format(col, round(pct_missing*100)))","a9fd0383":"raw_train_df.shape, raw_test_df.shape","7cef5c20":"raw_train_df[TARGET].value_counts()","811e3747":"train_df = metamorphosis(raw_train_df)\ntest_df = metamorphosis(raw_test_df)\n\nheatmap(train_df.select_dtypes(exclude='uint8'))","4f94d846":"sns.set(font_scale=1)\ncorr_with_TARGET = train_df.corr().iloc[:-1, -1].sort_values(ascending=False)\nplt.figure(figsize=(9, 9))\nsns.barplot(x=corr_with_TARGET.values, y=corr_with_TARGET.index)\nplt.title('Correlation with TARGET variable')","ad1407f3":"plt.figure(figsize=(12,12))\ntrain_df.plot(kind=\"scatter\", x=\"Annual Income\", y=\"Current Loan Amount\", alpha=0.4,\n    c=\"Credit Default\", cmap=plt.get_cmap(\"jet\"), colorbar=True, figsize=(12,12),\n    sharex=False)\nplt.grid(True)\nplt.show()","0a52753e":"plt.style.use('seaborn-bright')\nplt.figure(figsize=(12,12))\nsns.distplot(train_df['Current Loan Amount'])\nplt.title('Distribution of Current Loan Amount')\nplt.grid(True)","ad830f05":"pd.crosstab(train_df['Credit Default'], train_df['Credit Score Cat'])","7ec5e8fb":"X = train_df.drop(TARGET, axis=1)\ny = train_df[TARGET]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, shuffle=True, random_state=42)\n\ncat_features = get_cat_features(X)\ncat_features","b662280e":"y.value_counts()[0] \/ y.value_counts()[1]","b00cd780":"y.value_counts()","558f1264":"frozen_params = {'silent': True,\n                 'random_state': 42,\n                 'n_estimators': 1200,\n                 'eval_metric': 'F1',\n                 'custom_metric': 'Precision',\n                 'learning_rate': 0.01,\n                 'class_weights': [1, 2.2],\n                 'early_stopping_rounds': 800\n                }","34c221ae":"cat_model = ctb.CatBoostClassifier(**frozen_params)\n\ncat_model.fit(X_train, y_train, cat_features, eval_set=(X_test, y_test), plot=True)","418fb73f":"if os.path.exists(METRICS_FILEPATH):\n\n    with open(METRICS_FILEPATH, 'rb') as file:\n        pre_metrics = pickle.load(file)\n\nelse: pre_metrics = 'Previous metrics is not defined'\n\ny_train_pred = cat_model.predict(X_train)\ny_test_pred = cat_model.predict(X_test)\n\nmetrics = get_classification_report(y_train, y_train_pred, y_test, y_test_pred)\n\nwith open(METRICS_FILEPATH, 'wb') as file:\n    pickle.dump(metrics, file)\n\nprint('\\n', (pre_metrics, \"We've been here before, haven't we?\")[pre_metrics == metrics])","f153cd69":"important_features_top = show_feature_importances(X.columns, cat_model.feature_importances_, get_top=15)","a03dbfe1":"final_params = {'silent': True,\n                 'random_state': 42,\n                 'n_estimators': 800,\n                 'eval_metric': 'F1',\n                 'custom_metric': 'Precision',\n                 'learning_rate': 0.01,\n                 'class_weights': [1, 2.6],\n                }","21a9c9ac":"model = ctb.CatBoostClassifier(**final_params)\n\nmodel.fit(X, y, cat_features)","c36ade5e":"test_predictions = model.predict(test_df)\n\nsubmit = pd.read_csv('\/kaggle\/input\/credit-default-prediction-ai-big-data\/sampleSubmission.csv')\nsubmit['Credit Default'] = test_predictions\nsubmit.to_csv('submission.csv', index=False)\nsubmit.head()","def612ee":"pool1 = Pool(data=X_train, label=y_train, cat_features=cat_features)\neval_pool = Pool(X_test, y_test, cat_features=cat_features)\ncurve = get_roc_curve(cat_model, eval_pool)\n(fpr, tpr, thresholds) = curve\nroc_auc = sklearn.metrics.auc(fpr, tpr)","c0a0c41d":"(thresholds, fpr) = get_fpr_curve(curve=curve)\n(thresholds, fnr) = get_fnr_curve(curve=curve)\n\nplt.figure(figsize=(16, 8))\nlw = 2\n\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc, alpha=0.5)\n\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--', alpha=0.5)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nplt.grid(True)\nplt.xlabel('False Positive Rate', fontsize=16)\nplt.ylabel('True Positive Rate', fontsize=16)\nplt.title('Receiver operating characteristic', fontsize=20)\nplt.legend(loc=\"lower right\", fontsize=16)","898c10e3":"plt.figure(figsize=(16, 8))\nlw = 2\n\nplt.plot(thresholds, fpr, color='blue', lw=lw, label='FPR', alpha=0.5)\nplt.plot(thresholds, fnr, color='green', lw=lw, label='FNR', alpha=0.5)\n\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xticks(fontsize=16)\nplt.yticks(fontsize=16)\nplt.grid(True)\nplt.xlabel('Threshold', fontsize=16)\nplt.ylabel('Error Rate', fontsize=16)\nplt.title('FPR-FNR curves', fontsize=20)\nplt.legend(loc=\"lower left\", fontsize=16)","61fb9a88":"shap_values = cat_model.get_feature_importance(pool1, type='ShapValues')\n\nexpected_value = shap_values[0,-1]\nshap_values = shap_values[:,:-1]\n\nprint(shap_values.shape)\n\nshap.initjs()\nshap.force_plot(expected_value, shap_values[1,:], X_train.iloc[1,:])","85dd0f40":"shap.summary_plot(shap_values, X_train)","20722307":"**\u0417\u0430\u0434\u0430\u0447\u0430**\n\n\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0431\u0430\u043d\u043a\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0433\u043e\u0432\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043a\u0440\u0435\u0434\u0438\u0442\u0443. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.\n\n**\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438**\n\ntrain.csv - \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442<br>\ntest.csv - \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n\n**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f**\n\nCredit Default - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\n\n**\u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430**\n\nF1-score (sklearn.metrics.f1_score)\n\n**\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e**\n\n*\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430*\n* F1 > 0.5\n* \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 (1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443)\n\n**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n* **Home Ownership** - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n* **Annual Income** - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n* **Years in current job** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n* **Tax Liens** - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n* **Number of Open Accounts** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n* **Years of Credit History** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n* **Maximum Open Credit** - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\n* **Number of Credit Problems** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n* **Months since last delinquent** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n* **Bankruptcies** - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n* **Purpose** - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Term** - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Current Loan Amount** - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Current Credit Balance** - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\n* **Monthly Debt** - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n* **Credit Default** - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)","2f100541":"### \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","53e668a7":"### \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u0430","dd8df487":"### \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","e261a16d":"### \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","f7ca571b":"### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 - \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","f573141f":"## \u0412\u044b\u0432\u043e\u0434\u044b:\n\u0412 \u0446\u0435\u043b\u043e\u043c, \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 Precision, Recall \u0438 F1. \u0411\u043e\u0440\u044c\u0431\u0430 \u0441 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0437\u0430 \u0441\u0447\u0435\u0442 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0445\u0443\u0434\u0448\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u0438, \u043d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f. \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435 \u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0437\u0430 \u0441\u0447\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432\u0435\u0441\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0435.","951cb5e7":"### \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","4f11d62e":"## \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","1b49f50b":"## \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430","ddf71c37":"## \u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438","c69db3f5":"### \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","687bc1f6":"### \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","8f2c47d1":"## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","3decaa38":"### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441","5e5fea89":"### \u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","a6b88597":"### \u0412\u044b\u0431\u043e\u0440 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","aca6e23d":"## \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 CatBoost","264d5c74":"### \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438","5b8d28bf":"### \u0414\u0435\u0434\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","0f45f811":"<div class=\"alert alert-block alert-info\"><h1>\u041f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u043a\u0443\u0440\u0441\u0443:<br>\"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python \u0434\u043b\u044f Data Science: \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435\"<\/h1><\/div>","0b7a161e":"### \u0413\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043e\u0442 \u0433\u043e\u0434\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u0445\u043e\u0434\u0430 \u0441 \u043d\u0430\u043d\u0435\u0441\u0435\u043d\u0438\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430","ee00ba12":"### \u0420\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u043c\u0435\u0440\u0435 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438","cf37455e":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","2f2ec562":"## \u041f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"}}