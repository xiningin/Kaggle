{"cell_type":{"9028e681":"code","93360572":"code","f3b739b1":"code","bfeb87ac":"code","06b1f0f9":"code","bec5c44e":"code","4545e86d":"code","790ddf03":"code","4438e3b3":"code","182c6b12":"code","65d3f00a":"code","ecc5cd32":"code","b8281d09":"code","4c3f218b":"code","0c59a9bc":"code","db8a30f8":"code","03d0a4f2":"code","de1364da":"code","d99e7eff":"code","04dee121":"code","1edf0647":"markdown","69da75b4":"markdown","13b5a2d7":"markdown","3894ce85":"markdown","b06530b0":"markdown"},"source":{"9028e681":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","93360572":"# Import the dataset\ndata = pd.read_csv('..\/input\/adult.csv')\ndata.head()\n\n","f3b739b1":"\nmy_columns = ['Age', 'Workclass', 'Fnlwgt', 'Education', 'Education_num', 'Martial_status', 'Occupation', 'Relationship', 'Race', 'Gender', 'Capital_gain','Capital_loss', 'hours_per_week', 'Native_country','Target']\ndata.columns = my_columns\ndata.head()","bfeb87ac":"# Check the data type of each column and number of rows and columns present in the dataset\nprint(data.info())\nprint(data.shape)","06b1f0f9":"# Check whether there are any missing values\ncol_names = data.columns\nnum_data = data.shape[0]\nfor c in col_names:\n    num_non = data[c].isin([\"?\"]).sum()\n    if num_non > 0:\n        print (c)\n        print (num_non)\n        print (\"{0:.2f}%\".format(float(num_non) \/ num_data * 100))\n        print (\"\\n\")","bec5c44e":"new_data = data\nnew_data.head()","4545e86d":"from scipy.stats import mode\nvar = new_data.Workclass.mode()[0]\nnew_data.loc[new_data['Workclass'] == '?', 'Workclass'] = var\n\nvar1 = new_data.Occupation.mode()[0]\nnew_data.loc[new_data['Occupation'] == '?', 'Occupation'] = var1\n\nvar2 = new_data.Native_country.mode()[0]\nnew_data.loc[new_data['Native_country'] == '?', 'Native_country'] = var2\nnew_data.head()","790ddf03":"my_tab = pd.crosstab(index = data.Education,  # Make a crosstab\n                              columns= data.Target)      # Name the count column\n\nmy_tab.plot.bar()\n","4438e3b3":"my_tab = pd.crosstab(index = data.Race,  # Make a crosstab\n                              columns= data.Target)      # Name the count column\n\nmy_tab.plot.bar()\n","182c6b12":"my_tab = pd.crosstab(index = data.Martial_status,  # Make a crosstab\n                              columns= data.Target)      # Name the count column\n\nmy_tab.plot.bar()\n","65d3f00a":"my_tab = pd.crosstab(index = data.Native_country,  # Make a crosstab\n                              columns= data.Target)      # Name the count column\n\nmy_tab.plot.bar()\n","ecc5cd32":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Imputer\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nWorkclass_cat = le.fit_transform(new_data.Workclass)\nEducation_cat = le.fit_transform(new_data.Education)\nMarital_cat   = le.fit_transform(new_data.Martial_status)\nOccupation_cat = le.fit_transform(new_data.Occupation)\nRelationship_cat = le.fit_transform(new_data.Relationship)\nRace_cat = le.fit_transform(new_data.Race)\nSex_cat = le.fit_transform(new_data.Gender)\nNative_country_cat = le.fit_transform(new_data.Native_country)\nTarget_cat = le.fit_transform(new_data.Target)\n\n","b8281d09":"# Initialize the transformed values\nnew_data['Workclass'] = Workclass_cat\nnew_data['Education'] = Education_cat\nnew_data['Martial_status'] = Marital_cat\nnew_data['Occupation'] = Occupation_cat\nnew_data['Race'] = Race_cat\nnew_data['Gender'] = Sex_cat\nnew_data['Native_country'] = Native_country_cat","4c3f218b":"#dummy_fields = ['Workclass', 'Education', 'Martial_status', 'Occupation', 'Race','Sex', 'Native_country']\nnew_data.head()","0c59a9bc":"# split the target and predictor variables\nX = new_data.iloc[:,[0,1,2,3,4,5,6,8,9,10,11,12,13]]\nY = new_data.iloc[:,14]\nX.head()","db8a30f8":"# Split the dataset into train and test dataset\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 5)","03d0a4f2":"# Pipe line for multimodeling \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score \n\nlr = LogisticRegression()\nLr_model = lr.fit(X_train, Y_train)\nY_pred = lr.predict(X_test)\nacc_score_lr = accuracy_score(Y_test, Y_pred) \nprint(acc_score_lr)","de1364da":"DTC = DecisionTreeClassifier()\nDTC_model = DTC.fit(X_train, Y_train)\nY_pred = DTC.predict(X_test)\nacc_score_DTC = accuracy_score(Y_test, Y_pred)\nprint(acc_score_DTC)\n","d99e7eff":"RF = RandomForestClassifier(n_estimators=1000, n_jobs= 2, random_state= 5)\nRF_model = RF.fit(X_train, Y_train)\nY_pred = RF.predict(X_test)\nacc_score_RF = accuracy_score(Y_test, Y_pred)\nprint(acc_score_RF)","04dee121":"SVM = SVC()\nSVM_model = SVM.fit(X_train, Y_train)\nY_pred = SVM.predict(X_test)\nacc_score_SVM = accuracy_score(Y_test, Y_pred)\nprint(acc_score_SVM)","1edf0647":"EDA","69da75b4":"Now all the missing values are replaced by mode of the column","13b5a2d7":"We modify column names ","3894ce85":"**Feature Encoding**","b06530b0":"We can see there are 48842 rows and 15 columns. Some of the variables are continous and while others are categorical."}}