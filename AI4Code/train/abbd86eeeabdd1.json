{"cell_type":{"4367dc13":"code","d0124364":"code","f186fb0c":"code","ac3f4597":"code","d11b5149":"code","03f00353":"code","cbfa9bb1":"code","33828678":"code","448c0299":"code","2a55c716":"code","0c55f1be":"code","9ff3f484":"code","c1abaf07":"code","f4171efb":"code","9876872b":"code","80a022ed":"code","568cc0c8":"code","eb026677":"code","d2e1c225":"code","b4953009":"code","a11a4ad6":"code","24aae3d0":"code","da8d5f94":"code","039df5e8":"code","5fc789e4":"code","85136f2e":"code","a06ed1ac":"code","4c250aa4":"code","4855f3cc":"code","ce9d06df":"code","5f6dcde5":"code","0c013b47":"code","284879d5":"code","b2b834ea":"code","f3e97e72":"code","ba595fdf":"code","ff29f9e1":"code","a27b3f27":"code","be1d15f8":"code","c3111731":"code","b5b7481f":"code","1bf3d92a":"code","8f360d92":"code","6529cabc":"code","7277cd35":"code","935d5ba3":"code","ed2248fb":"code","e2bf36a3":"code","fdae4253":"code","0d2f7d1d":"code","8021a136":"code","e6915c53":"code","a484a5ed":"code","704a51f9":"code","2988d2c7":"code","0e9cc7f3":"code","0eba7221":"code","02281f39":"markdown","12ac9747":"markdown","429e5b67":"markdown","313952f4":"markdown","c28abca9":"markdown","d81f7b7d":"markdown","f9415a03":"markdown","6045f8de":"markdown","03628148":"markdown","2ebd9f45":"markdown","f642c79c":"markdown","3aef4785":"markdown","3ba5be73":"markdown","8239f277":"markdown","97630ee1":"markdown"},"source":{"4367dc13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d0124364":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px","f186fb0c":"df=pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","ac3f4597":"df.head()","d11b5149":"print(df.head())","03f00353":"df.describe()","cbfa9bb1":"df['diagnosis'].unique()","33828678":"print(df['diagnosis'].value_counts())","448c0299":"df.info()","2a55c716":"df.columns","0c55f1be":"df.isnull().sum().sum()","9ff3f484":"df = df.drop(['Unnamed: 32'], axis=1)","c1abaf07":"df.isnull().sum().sum()","f4171efb":"df['diagnosis'].unique()","9876872b":"px.histogram(df, df['diagnosis'])","80a022ed":"df['diagnosis'].value_counts().plot.bar(legend=True)","568cc0c8":"radius = df[['radius_mean','radius_se','radius_worst', 'diagnosis' ]]\nsns.pairplot(radius,hue='diagnosis')","eb026677":"texture=df[['texture_mean', 'texture_se', 'texture_worst', 'diagnosis']]\nsns.pairplot(texture,hue='diagnosis')","d2e1c225":"perimeter = df[['perimeter_mean', 'perimeter_se','perimeter_worst','diagnosis']]\nsns.pairplot(perimeter,hue='diagnosis')","b4953009":"area = df[['area_mean', 'area_se','area_worst','diagnosis']]\nsns.pairplot(area,hue='diagnosis')","a11a4ad6":"smoothness = df[['smoothness_mean', 'smoothness_se','smoothness_worst','diagnosis']]\nsns.pairplot(smoothness,hue='diagnosis')","24aae3d0":"compactness=df[['compactness_mean', 'compactness_se', 'compactness_worst', 'diagnosis']]\nsns.pairplot(compactness,hue='diagnosis')","da8d5f94":"concavity=df[['concavity_mean', 'concavity_se', 'concavity_worst', 'diagnosis']]\nsns.pairplot(concavity,hue='diagnosis')","039df5e8":"concave_points=df[['concave points_mean', 'concave points_se', 'concave points_worst', 'diagnosis']]\nsns.pairplot(concave_points,hue='diagnosis')","5fc789e4":"symmetry=df[['symmetry_mean', 'symmetry_se', 'symmetry_worst', 'diagnosis']]\nsns.pairplot(symmetry,hue='diagnosis')","85136f2e":"fractal_dimension=df[['fractal_dimension_mean', 'fractal_dimension_se', 'fractal_dimension_worst', 'diagnosis']]\nsns.pairplot(fractal_dimension,hue='diagnosis')","a06ed1ac":"plt.figure(figsize=(30,30))\nsns.heatmap(df.corr(),annot=True, cmap='ocean')","4c250aa4":"#Getting mean columns\nm_col=['diagnosis','radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']\n\nse_col = ['diagnosis','radius_se', 'texture_se', 'perimeter_se',\n       'area_se', 'smoothness_se', 'compactness_se', 'concavity_se',\n       'concave points_se', 'symmetry_se', 'fractal_dimension_se']\n\nw_col = ['diagnosis','radius_worst', 'texture_worst', 'perimeter_worst',\n       'area_worst', 'smoothness_worst', 'compactness_worst', 'concavity_worst',\n       'concave points_worst', 'symmetry_worst', 'fractal_dimension_worst']\n\n","4855f3cc":"plt.figure(figsize=(17,17))\nsns.heatmap(df[m_col].corr(),annot=True, cmap='Greens')","ce9d06df":"sns.pairplot(df[m_col],hue='diagnosis',palette='Greens')","5f6dcde5":"plt.figure(figsize=(17,17))\nsns.heatmap(df[se_col].corr(),annot=True, cmap='Blues')","0c013b47":"sns.pairplot(df[se_col],hue='diagnosis',palette='Blues')","284879d5":"plt.figure(figsize=(17,17))\nsns.heatmap(df[w_col].corr(),annot=True, cmap='Oranges')","b2b834ea":"sns.pairplot(df[w_col],hue='diagnosis',palette='Oranges')","f3e97e72":"df.groupby('diagnosis').mean()","ba595fdf":"from sklearn.model_selection import train_test_split","ff29f9e1":"X=df.drop('diagnosis',axis=1)\nY=df['diagnosis']","a27b3f27":"X_train,X_test, Y_train, Y_test= train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=1)\n","be1d15f8":"print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)","c3111731":"plt.plot(X_train,'*')\nplt.show()","b5b7481f":"plt.plot(X_train.T,'*')\nplt.xticks(rotation='vertical')\nplt.show()","1bf3d92a":"X_binarised_train = X_train.apply(pd.cut, bins=2, labels=[0,1])\nplt.plot(X_binarised_train.T,'*')\nplt.xticks(rotation='vertical')\nplt.show()\n","8f360d92":"X_binarised_test = X_test.apply(pd.cut, bins=2, labels=[0,1])\nplt.plot(X_binarised_test.T,'*')\nplt.xticks(rotation='vertical')\nplt.show()","6529cabc":"X_binarised_test = X_binarised_test.values\nX_binarised_train = X_binarised_train.values","7277cd35":"from random import randint","935d5ba3":"b=3\ni=randint(0, X_binarised_train.shape[0])\n\nprint('for row', i)\n\nif(np.sum(X_binarised_train[100,:])>=b):\n    print(\"mp neuron inference is malignant\")\nelse:\n    print(\"mp neuron inference is benign\")\n    \nif(Y_train[i]==1):\n    print(\"ground truth  is malignant\")\nelse:\n    print(\"ground truth is benign\")\n    ","ed2248fb":"Y_train=Y_train.map(lambda x: 0 if x=='B' else 1)","e2bf36a3":"print(Y_train)\n","fdae4253":"Y_test=Y_test.map(lambda x: 0 if x=='B' else 1)","0d2f7d1d":"print(Y_test)","8021a136":"b=0\n\nY_pred_train=[]\naccurate_rows=0\n\nfor x,y in zip(X_binarised_train, Y_train):\n    Y_pred=(np.sum(x)>=b)\n    Y_pred_train.append(Y_pred)\n    accurate_rows +=(Y_pred==y)\nprint(accurate_rows)\n\nprint(\"accuracy = \", accurate_rows\/X_binarised_train.shape[1])","e6915c53":"for b in range(X_binarised_train.shape[1]+1):\n    Y_pred_train=[]\n    accurate_rows=0\n\n\n    for x,y in zip(X_binarised_train, Y_train):\n        Y_pred = (np.sum(x)>=b)\n        Y_pred_train.append(Y_pred)\n        accurate_rows +=(Y_pred==y)\n    print(b, accurate_rows\/X_binarised_train.shape[0])","a484a5ed":"from sklearn.metrics import accuracy_score","704a51f9":"\nb=4\nY_pred_test=[]\n\nfor x in X_binarised_test:\n    Y_pred=(np.sum(x)>=b)\n    Y_pred_test.append(Y_pred)\n    \naccuracy=accuracy_score(Y_pred_test,Y_test)\nprint(b, accuracy)    \n\n","2988d2c7":"class MPNeuron:\n    def __init__(self):\n        self.b=None\n        \n    def model(self,x):\n        return (np.sum(x)>=self.b)\n    \n    def predict(self, X):\n        Y=[]\n        for x in X:\n            result=self.model(x)\n            Y.append(result)\n        return(np.array(Y))\n      \n        \n    def fit(self,X,Y):\n        accuracy={}\n        for b in range(X.shape[1]+1):\n            self.b=b\n            Y_pred=self.predict(X)\n            accuracy[b]=accuracy_score(Y_pred,Y)\n            \n        best_b=max(accuracy,key=accuracy.get)\n        self.b=best_b\n        \n        print(\"optimal value of b = \", best_b)\n        print(\"highest accuracy = \", accuracy[best_b])","0e9cc7f3":"mpneuron=MPNeuron()\nmpneuron.fit(X_binarised_train, Y_train)","0eba7221":"mpneuron.fit(X_binarised_test, Y_test)","02281f39":"**Plotting area of cell(mean, se, worst)**","12ac9747":"**Plotting symmetry of cell(mean, se, worst)**","429e5b67":"**As we can see highest accuracy is when b=4\n   This is for the train data.\n   When we will use b=4 for the test data we will get the highest accuracy.**","313952f4":"**Splitting of dataset**","c28abca9":"**Plotting compactness of cell(mean, se, worst)**","d81f7b7d":"#### MP NEURON FUNCTION ","f9415a03":"**Plotting concave points of cell(mean, se, worst)**","6045f8de":"**Data Modelling**","03628148":"**Plotting fractal_dimension of cell(mean, se, worst)**","2ebd9f45":"**Plotting smoothness of cell(mean, se, worst)**","f642c79c":" **Plotting concavity of cell(mean, se, worst)**","3aef4785":"**Plotting Radius of Cell ( mean , standard error, worst)**","3ba5be73":"**Plotting perimeter of cell(mean, se, worst)**","8239f277":"**Binarisation of input**","97630ee1":"**Plotting texture of Cell ( mean , standard error, worst)**"}}