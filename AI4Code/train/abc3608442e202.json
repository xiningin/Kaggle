{"cell_type":{"30e43124":"code","106fd630":"code","422abc4b":"code","9bbe33ee":"code","ac1b692d":"code","e1c98c29":"code","408b8d73":"code","38c049fc":"code","b355787b":"code","bc1327c6":"code","290ea669":"code","e89ae3f0":"code","c50a48d1":"code","965585f7":"code","dc9fb8b7":"code","4c78b21d":"code","50eb0112":"code","927cd912":"code","c97c0b61":"markdown","e860eb90":"markdown"},"source":{"30e43124":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nimport tensorflow as tf\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\nwarnings.filterwarnings('ignore')\ndf=pd.read_csv('..\/input\/nyse\/prices.csv')\ndf.head()","106fd630":"df['symbol'].unique()","422abc4b":"data=df[df['symbol']=='AAPL'].reset_index()['close']\ndata.head()","9bbe33ee":"import matplotlib.pyplot as plt\nplt.plot(data)\nplt.xlabel('Days')\nplt.ylabel('Prices ($)')","ac1b692d":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndata=scaler.fit_transform(np.array(data).reshape(-1,1))","e1c98c29":"# Splitting data inro train,test and validation set\ntraining_data=data[0:int(len(data)*0.65),:]\ntest_data=data[int(len(data)*0.65):int(len(data)*0.85),:]\nval_data=data[int(len(data)*0.85):,:]\ntraining_data.shape,test_data.shape,val_data.shape","408b8d73":"def create_dataset(dataset, time_step=1):\n\tX, Y = [], []\n\tfor i in range(len(dataset)-time_step-1):\n\t\tx = dataset[i:(i+time_step), 0]   \n\t\tX.append(x)\n\t\tY.append(dataset[i + time_step, 0])\n\treturn np.array(X), np.array(Y)","38c049fc":"time_step = 100\nX_train, y_train = create_dataset(training_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)\nX_val, y_val = create_dataset(val_data, time_step)","b355787b":"X_train.shape","bc1327c6":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)\nX_val = X_val.reshape(X_val.shape[0],X_val.shape[1] , 1)","290ea669":"### Create the Stacked LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","e89ae3f0":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(125,return_sequences=True))\nmodel.add(LSTM(75))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',metrics=[tf.keras.metrics.RootMeanSquaredError()],optimizer='adam')","c50a48d1":"model.summary()","965585f7":"model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=100,batch_size=64,verbose=1)","dc9fb8b7":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)\nval_predict=model.predict(X_val)","4c78b21d":"train_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)\nval_predict=scaler.inverse_transform(val_predict)","50eb0112":"data_from=data_to=0\n### Plotting \n# shift train predictions for plotting\nlook_back=100\ntrainPredictPlot = np.empty_like(data)\ntrainPredictPlot[:, :] = np.nan\ndata_from=look_back\ndata_to=len(train_predict)+look_back\ntrainPredictPlot[data_from:data_to, :] = train_predict\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(data)\ntestPredictPlot[:, :] = np.nan\ndata_from=data_to+100\ndata_to=data_from+len(test_predict)\ntestPredictPlot[data_from:data_to, :] = test_predict\n\n# shift val predictions for plotting\nvalPredictPlot = np.empty_like(data)\nvalPredictPlot[:, :] = np.nan\ndata_from=data_to+100\ndata_to=data_from+len(val_predict)\nvalPredictPlot[data_from:data_to, :] = val_predict\n\n# plot baseline and predictions\nplt.rcParams.update({'font.size': 18})\nplt.figure(figsize=(10,10))\nplt.plot(scaler.inverse_transform(data),label='Real values',alpha=0.5)\nplt.plot(trainPredictPlot,label='Train Predicted')\nplt.plot(testPredictPlot,label='Test Predicted',color='#FF0000')\nplt.plot(valPredictPlot,label='Val Predicted',color='#420303')\nplt.xlabel('Days')\nplt.ylabel('Price ($)')\nplt.legend()\nplt.show()","927cd912":"plt.rcParams.update({'font.size': 15})\nplt.plot(val_predict,color='#420303',label='Val Predicted')\nplt.plot(scaler.inverse_transform(data[-164:]),label='Real Values')\nplt.legend()\nplt.show()","c97c0b61":"## I am considering Apple, all of you are free to select any company from above","e860eb90":"# 6 years stock market values are shared with us from below companies"}}