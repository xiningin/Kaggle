{"cell_type":{"1cdb5259":"code","ea59052b":"code","605a824e":"code","c9bc7db2":"code","0276cefe":"code","5919f0d9":"code","ac5cc18f":"code","e2a7cef0":"code","2db5b719":"code","dd9f7a82":"code","b0491bac":"code","d543a3a4":"code","48a0abac":"code","40880b51":"code","948c5ee5":"code","c68bef20":"code","c0230043":"code","ed1d74fb":"code","93779195":"code","b1372249":"code","0048bcd4":"code","d8482189":"code","3ab35bd4":"code","162fe714":"code","b3805f03":"code","c8c9dcc1":"code","e181e7f6":"code","7b704c4e":"code","5b558386":"code","2f061dfb":"code","40c962fd":"code","83ad4aa5":"code","34e9a3ae":"code","11fec8f3":"code","9475c7a8":"code","9e6052db":"code","5548dbf6":"code","16b07256":"code","b621812c":"code","03bcceb4":"code","b80d6ae6":"code","67e685d6":"markdown","34a68a9a":"markdown","83ab0df2":"markdown","034d15dd":"markdown","031f4495":"markdown","d7f4cd05":"markdown","f6ef5a6a":"markdown","e17be1b5":"markdown","611149cc":"markdown","5f8dc231":"markdown","53518752":"markdown","5f5eab43":"markdown","db4f7522":"markdown","fe1b0862":"markdown","69db21c1":"markdown","5757373b":"markdown","b3c04eb9":"markdown","a5d245c4":"markdown","915e2f89":"markdown","1b7b3f45":"markdown","c7ee290a":"markdown","53c79123":"markdown","05514387":"markdown","17c604de":"markdown","eadf6da8":"markdown","e02786f4":"markdown","b7f68ab8":"markdown","947d10b7":"markdown"},"source":{"1cdb5259":"\"\"\"Importing required libraries\"\"\"\nimport numpy as np\nimport pandas as pd\nfrom pandas import Series,DataFrame\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","ea59052b":"plt.rcParams['figure.figsize'] = (10,10)\nplt.style.use('ggplot')","605a824e":"data = pd.read_csv('\/kaggle\/input\/population-time-series-data\/POP.csv')\ndata","c9bc7db2":"data = data.drop(['realtime_start','realtime_end'],axis=1)","0276cefe":"\"\"\"Converting the date column into datetime object and setting it as index\"\"\"\ndata['date'] = pd.to_datetime(data['date'])\ndata.set_index('date',inplace=True)\ndata.head()","5919f0d9":"data.describe()","ac5cc18f":"data.plot()","e2a7cef0":"pd.plotting.autocorrelation_plot(data['value'])","2db5b719":"data['value'].corr(data['value'].shift(300))","dd9f7a82":"from statsmodels.tsa.seasonal import seasonal_decompose","b0491bac":"decomposed = seasonal_decompose(data['value'])\nx = decomposed.plot()","d543a3a4":"from statsmodels.tsa.stattools import adfuller","48a0abac":"print('Significance level : 0.05')\nadf = adfuller(data['value'])\nprint(f'ADF test static is {adf[1]}')","40880b51":"data['stationary'] = data['value'].diff()","948c5ee5":"data['stationary'].plot()","c68bef20":"print('Significance level : 0.05')\nadf = adfuller(data['stationary'].dropna())\nprint(f'ADF test static is {adf[1]}')","c0230043":"data['stationary2'] = data['stationary'].diff()","ed1d74fb":"data['stationary2'].plot()","93779195":"print('Significance level : 0.05')\nadf = adfuller(data['stationary2'].dropna())\nprint(f'ADF test static is {adf[1]}')","b1372249":"t = seasonal_decompose(data['stationary2'].dropna())\nx = t.plot()","0048bcd4":"from statsmodels.tsa.ar_model import AR","d8482189":"\"\"\"Creating train & Test dataset\"\"\"\n\nX = data['stationary2'].dropna()\n\ntrain_df,test_df = X[1:(len(X)-280)],X[(len(X)-280):]","3ab35bd4":"\"\"\"Training the model\"\"\"\n\nmodel = AR(train_df)\nmodel_fitted = model.fit()","162fe714":"print(f'The chosen lag value is {model_fitted.k_ar}',end='\\n \\n')\n\nprint(f'The coefficents are {model_fitted.params}')","b3805f03":"\"\"\"Make predictions\"\"\"\n\npredictions = model_fitted.predict(start=len(train_df),\n                                   end=len(train_df)+len(test_df)-1,\n                                   dynamic=False)","c8c9dcc1":"\"\"\"Comparing with actual data\"\"\"\n\ncompare_df = pd.concat([test_df,predictions],axis=1).rename(columns={'stationary2': 'actual', 0:'predicted'})","e181e7f6":"compare_df.plot()","7b704c4e":"from statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf","5b558386":"data = pd.read_csv('\/kaggle\/input\/population-time-series-data\/POP.csv')\ndata = data.drop(['realtime_start','realtime_end'],axis=1)\ndata","2f061dfb":"fig,axes = plt.subplots(3,2)\n\nx = axes[0,0].plot(data['value']); axes[0,0].set_title('Original Series')\na = plot_acf(data['value'].values,ax=axes[0,1])\n\ny = axes[1,0].plot(data['value'].diff()); axes[1,0].set_title('1st Difference')\nb = plot_acf(data['value'].diff().dropna(),ax=axes[1,1])\n\nz = axes[2,0].plot(data['value'].diff().diff()); axes[2,0].set_title('2nd Difference')\nc = plot_acf(data['value'].diff().diff().dropna(),ax=axes[2,1])","40c962fd":"plt.rcParams.update({'figure.figsize':(9,3),'figure.dpi':120})\n\nfig,axes = plt.subplots(1,2)\n\na = axes[0].plot(data['value'].diff()); axes[0].set_title('1st Difference')\nb = plot_pacf(data['value'].diff().dropna(),ax=axes[1])\n\nplt.show()","83ad4aa5":"fig,axes = plt.subplots(1,2)\n\na = axes[0].plot(data['value'].diff()); axes[0].set_title('1st Difference')\nb = plot_acf(data['value'].diff().dropna(),ax=axes[1])","34e9a3ae":"from statsmodels.tsa.arima_model import ARIMA","11fec8f3":"model = ARIMA(data['value'].diff().dropna(),(1,1,2))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","9475c7a8":"residuals = pd.DataFrame(model_fit.resid)\n\nfig,axes = plt.subplots(1,2)\n\nresiduals.plot(title='Residuals',ax= axes[0])\nresiduals.plot(kind= 'kde', title='Density',ax= axes[1])","9e6052db":"plt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':100})\n\nx = model_fit.plot_predict(dynamic=False)\nplt.show()","5548dbf6":"#Train & Test Data\ntrain_data = data['value'][:500]\ntest_data = data['value'][500:]","16b07256":"model1 = ARIMA(train_data,order=(1,1,2))\nmodel_fitted1 = model1.fit(disp= -1)","b621812c":"fc,se,conf = model_fitted1.forecast(316)","03bcceb4":"fc_series = Series(fc,index=test_data.index)\nlower_series = Series(conf[:,0],index=test_data.index)\nupper_series = Series(conf[:,1],index=test_data.index)","b80d6ae6":"plt.figure(figsize=(12,5), dpi=100)\n\nplt.plot(train_data,label='Training')\nplt.plot(test_data,label='Actual')\nplt.plot(fc_series,label='Forcast',color='green')\n\nplt.fill_between(lower_series.index,lower_series,upper_series,color='k',alpha=.15)\n\nplt.title('Actual Vs Forcast')\nplt.legend(loc='upper left')","67e685d6":"# Forcasting","34a68a9a":"The test ststic is far above critical level, implies, data is non-stationary","83ab0df2":"Here MA2 have a p-value which is way below the significant level. And AR value is also good.Hence we may move along with that.","034d15dd":"All the values are above the significance level. And I am tentatively going along with a value of 2 for q.","031f4495":"## Out of Time Cross-Validation","d7f4cd05":"# Data","f6ef5a6a":"## 1st Difference","e17be1b5":"## Building ARIMA model","611149cc":"# Seasonality?????","5f8dc231":"There is a positive trend from 1952 to 2019.","53518752":"ADF ststic implies, the data become stationary. We can now proceed to modelling the forcast.","5f5eab43":"## 2nd Difference","db4f7522":"Making the data stationary","fe1b0862":"Let's ignore the real-time data as we are concentratting only on the date range which the population varies.","69db21c1":"Autocorrelation hits a 99% confidence level almost at 280 lag points.","5757373b":"# Data Visualisation","b3c04eb9":"## Identifying AR term (p)","a5d245c4":"## ADF Test","915e2f89":"From the figure it can conlude that 2nd difference made the data stationary. But, ACF tends to go towards negative values implies it is over differenced. Hence, We will go along with 1st difference eventhough it is a little non-stationary.","1b7b3f45":"There are residual values which requires our consideration.\n\nLet's plot the predicted values.","c7ee290a":"The graphs is self-explanatory, that the model we implemented has predicted with pretty much accuracy.","53c79123":"Conclusion : Implemented time-series forcasting model with AutoRegression and ARIMA with much accuracy.","05514387":"## Auto-Regression","17c604de":"## Identifying the MA term (q)","eadf6da8":"## ARIMA","e02786f4":"\"\"If your series is slightly under differenced, adding one or more additional AR terms usually makes it up. Likewise, if it is slightly over-differenced, try adding an additional MA term.\"\"","b7f68ab8":"Lag difference 1 has fairly significant value compared to others lags. Hence I am going along with taking the p term as 1.","947d10b7":"## Identifiying differencing term (d)"}}