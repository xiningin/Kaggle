{"cell_type":{"627af889":"code","ce00a0a5":"code","e6fe91a9":"code","6b766859":"code","6cd59c07":"code","b6ae9869":"code","cb4ca187":"code","14c38417":"code","2ef537e6":"code","7adf7c8b":"markdown","a8d21943":"markdown","689be2d3":"markdown","0222c4c9":"markdown","1dd30b95":"markdown","ba82d89f":"markdown","37e2ff8d":"markdown","3dae01ec":"markdown","8bed026d":"markdown","d708bdf9":"markdown","f450759d":"markdown"},"source":{"627af889":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ce00a0a5":"n = np.array([1, 2, 3])\nprint(n, type(n), n.shape, n.dtype)","e6fe91a9":"n= np.arange(1,11)  # range: [stat, end)\nprint(n, type(n), n.shape, n.dtype)","6b766859":"n2 = n.reshape(2, 5)\nprint(n2, type(n2), n2.shape, n.dtype) #  ","6cd59c07":"\nn2 = np.array([[1, 2, 3], [2, 3, 4], [2, 3, 4]])\nprint(n2, type(n2), n2.shape, n.dtype )","b6ae9869":"array1 = np.array([[1, 2], [4, 5]])\narray2 = np.array([[3],[6]])\nmergedArray = np.hstack((array1, array2)) # note double brackets\nprint(mergedArray)","cb4ca187":"array1 = np.array([[1, 2]])\narray2 = np.array([[3, 4]])\nmergedArray = np.vstack((array1, array2)) # note double brackets\nprint(mergedArray)","14c38417":"array = np.array([[1, 2],[3, 4]])\nprint('before Transport:')\nprint(array)\nprint('after Transport:')\nprint(array.T)","2ef537e6":"# square of each number\n\n# First define a operation spec: \noperation = np.vectorize(lambda x: x ** 2)\n\narray = np.array([1, 2, 3])\noperation(array)","7adf7c8b":"### 2D Array Creation\nJust use 2D List","a8d21943":"## Merging Array","689be2d3":"### Reshaping into multidimension\nmethod spec   \n`dimension :: 2D: (row, col) | 3d: (x, y, z) ..`","0222c4c9":"### Vertically\nnumber of columns should be the same between two arrays","1dd30b95":"### Natural Sequence Creation","ba82d89f":"# Numpy Lesson","37e2ff8d":"## Apply operation on each value\n`vectorize` is used to apply operation on each value of np.array","3dae01ec":"### Horizontally\nnumber of rows should be the same between two arrays","8bed026d":"## Transpot of 2D Array ","d708bdf9":"### Creation from List","f450759d":"## Creation of Numpy Array"}}