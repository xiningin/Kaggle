{"cell_type":{"b8c7813d":"code","093d8d6c":"code","62cf4121":"code","61e5f26d":"code","a72a23f8":"code","bdb9e5ec":"markdown","51caf2b0":"markdown","74921440":"markdown","27618f82":"markdown","574434ff":"markdown","037b2802":"markdown","03d9d1b6":"markdown","9874003d":"markdown","15469936":"markdown","bb6807f4":"markdown","33c2350a":"markdown"},"source":{"b8c7813d":"# import numerical libraries\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom scipy.signal import argrelextrema\n\n# import image reading libraries\nfrom PIL import Image\n\n# import plotting libraries\nfrom bokeh.resources import INLINE\nimport bokeh.io\nbokeh.io.output_notebook(INLINE)\n#from bokeh.layouts import column, row\n#from bokeh.models import CustomJS, Slider, Button, Label\nfrom bokeh.plotting import figure, show\nfrom bokeh.palettes import d3","093d8d6c":"# Open image, and make sure it's RGB*A*\npngimg = Image.open('\/kaggle\/input\/galileanmoonobs\/May29_10pm.png').convert('RGBA')\nxdim, ydim = pngimg.size\n\n# Create an array representation for the image `img`, and an 8-bit \"4\n# layer\/RGBA\" version of it `view`.\nimg = np.empty((ydim, xdim), dtype=np.uint32)\nview = img.view(dtype=np.uint8).reshape((ydim, xdim, 4))\n# Copy the RGBA image into view, flipping it so it comes right-side up\n# with a lower-left origin\nview[:,:,:] = np.flipud(np.asarray(pngimg))\n\n# Display the 32-bit RGBA image\naspectratio = ydim\/xdim\np = figure(x_range=(0,xdim), y_range=(0,ydim), plot_width=640, \n           plot_height=int(640 * aspectratio), \n           title=\"May 29 10:00pm\", max_width=640, sizing_mode='scale_width', \n           tooltips=[('x', '$x{int}'), ('y', '$y{int}')])\np.image_rgba(image=[img], x=0, y=0, dw=xdim, dh=ydim)\n\nbokeh.io.show(p)","62cf4121":"# Open image, and make sure it's RGB*A*\npngimg = Image.open('\/kaggle\/input\/galileanmoonobs\/May30_10pm.png').convert('RGBA')\nxdim, ydim = pngimg.size\n\n# Create an array representation for the image `img`, and an 8-bit \"4\n# layer\/RGBA\" version of it `view`.\nimg = np.empty((ydim, xdim), dtype=np.uint32)\nview = img.view(dtype=np.uint8).reshape((ydim, xdim, 4))\n# Copy the RGBA image into view, flipping it so it comes right-side up\n# with a lower-left origin\nview[:,:,:] = np.flipud(np.asarray(pngimg))\n\n# Display the 32-bit RGBA image\naspectratio = ydim\/xdim\np = figure(x_range=(0,xdim), y_range=(0,ydim), plot_width=640, \n           plot_height=int(640 * aspectratio),\n           title=\"May 30 10:00pm\", max_width=640, sizing_mode='scale_width', \n           tooltips=[('x', '$x{int}'), ('y', '$y{int}')])\np.image_rgba(image=[img], x=0, y=0, dw=xdim, dh=ydim)\n\nbokeh.io.show(p)","61e5f26d":"# load data. pos1 refers to the left-most moon, pos4 the right-most\ntime, pos1, pos2, pos3, pos4 = np.loadtxt(\"\/kaggle\/input\/galileanmoonobs\/MoonPositionData.txt\", \n                                          usecols=(1, 3, 4, 5, 6), unpack=True)\n# make figure\nfig = figure(max_width=640, sizing_mode='scale_width')\nfig.xaxis.axis_label = \"Time [Days]\"\nfig.yaxis.axis_label = \"Distance [pix]\"\nfig.axis.axis_label_text_font_size = \"12pt\"\nfig.axis.axis_label_text_font_style = 'bold'\n\nfor p in [pos1, pos2, pos3, pos4]:\n    fig.circle(time - time[0], p, size=10)\n\nbokeh.io.show(fig)","a72a23f8":"def fitOrbits(time, pos1, pos2, pos3, pos4, pixErr=0.5):\n    \"\"\"Fit sine functions to 4 Jovian moons.\n\n    Args:\n    time -- arrayLike -- time in units of days\n    pos1 -- arrayLike -- position of left-most moon as function of time in pixels.\n    pos2 -- arrayLike -- position of second left-most moon as function of time in pixels.\n    pos3 -- arrayLike -- position of third left-most moon as function of time in pixels.\n    pos4 -- arrayLike -- position of fourth left-most moon as function of time in pixels.\n    pixErr -- float -- Uncertainty in pixel positions of moons. Default is 0.5\n        pixels.\n\n    Returns:\n    periods -- arrayLike -- Numpy array of the four periods in units of days\n    pErr -- arrayLike -- Numpy array of 1-sigma uncertainty in periods\n    amplitudes -- arrayLike -- Numpy array of the four amplitudes in pixels\n    ampErr -- arayLike -- Numpy array of 1-sigma uncertainty in amplitude\n    phase -- arrayLike -- Numpy array of the four phases in radians\n    \"\"\"\n    # add the positioons of the moons together creating one function that will\n    # be the sum of four sinusoidal functions\n    moonSum = pos1 + pos2 + pos3 + pos4\n    # Assuming each pixel position has the same uncorrelated uncertainty, error\n    # in sum will be sum of squares\n    sigma = np.sqrt(4 * pixErr**2) * np.ones(moonSum.size)\n\n    # use a real discrete fast Fourier transform to convert to frequency domain\n    N = time.size\n    yf = np.fft.rfft(moonSum)\n    xf = np.fft.rfftfreq(N, d=0.5)\n    amp = np.abs(yf)\n\n    # select peaks as initial guesses of orbits' frequencies and amplitudes\n    peakIndex = argrelextrema(amp, np.greater)[0]\n    xinit = [amp[peakIndex[0]], xf[peakIndex[0]], 0,\n             amp[peakIndex[1]], xf[peakIndex[1]], 0,\n             amp[peakIndex[2]], xf[peakIndex[2]], 0,\n             amp[peakIndex[3]], xf[peakIndex[3]], 0]\n\n    # Use least-squares fitting (specifically Levenberg-Marquardt algorithm) to\n    # get more accurate parameters\n    param, pcov = curve_fit(model, time, moonSum, p0=xinit, sigma=sigma)\n    err = np.sqrt(np.diag(pcov))  # standard deviation of param\n\n    # convert frequencies to periods\n    periods = 1 \/ param[[1, 4, 7, 10]]\n    pErr = err[[1, 4, 7, 10]] \/ param[[1, 4, 7, 10]]**2\n    amps = param[[0, 3, 6, 9]]\n    aErr = err[[0, 3, 6, 9]]\n    phase = param[[2, 5, 8, 11]]\n\n    return periods, pErr, amps, aErr, phase\n\n\ndef model(t, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):\n    \"\"\"Create time series sum of 4 sinusoids.\"\"\"\n    twopit = t * 2 * np.pi\n    return (p0 * np.sin(p1 * twopit + p2) +\n            p3 * np.sin(p4 * twopit + p5) +\n            p6 * np.sin(p7 * twopit + p8) +\n            p9 * np.sin(p10 * twopit + p11))\n\nperiods, pErr, amps, ampErr, phase  = fitOrbits(time - time[0], pos1, pos2, pos3, pos4)\n\n# plot fits\nfig = figure(max_width=640, sizing_mode='scale_width')\nfig.xaxis.axis_label = \"Time [Days]\"\nfig.yaxis.axis_label = \"Distance [pix]\"\nfig.axis.axis_label_text_font_size = \"12pt\"\nfig.axis.axis_label_text_font_style = 'bold'\n\ni = 0\nt = np.arange(0, np.max(time - time[0]) + 0.01, 0.01)\nfor i in range(4):\n    fig.line(t, amps[i] * np.sin(2 * np.pi * t \/ periods[i] + phase[i]),\n            color=d3['Category10'][5][i + 1], line_width=4, alpha=0.75)\n    \nfor p in [pos1, pos2, pos3, pos4]:\n    fig.circle(time - time[0], p, size=10)\n\nbokeh.io.show(fig)\n\n#print results:\nprint(\"Results\\n\")\nprint(\"Periods [days]: \", periods)\nprint(\"Uncertainty [days]: \", pErr)\nprint(\"\\n\")\nprint(\"Amplitudes [pix]: \", np.abs(amps))\nprint(\"Uncertainty [pix]: \", ampErr)","bdb9e5ec":"## Part 2: Plotting Positions Over Time\n\nRun the cell below to display an observation from the night following the image we looked at above. Use it to answer the question below. ","51caf2b0":"<div style=\"border-style:solid; border-width:3px; border-style:solid; border-color:black; border-radius:10px; text-align:left; padding:10px; background-color:lightblue;\">\n    <br>\n    <p><b><i>Question 7: (2 marks)<\/i><\/b> Explain how you might use the data and plot above to find the period and amplitude of at least one of the moons' orbits (you do not need to actually calculate anything, just describe the method).<\/p>\n    <p><b><i>Question 8: (2 marks)<\/i><\/b> Would your method work for finding the period and amplitude of all four moons' orbits?<\/p>\n    <br>\n<\/div>","74921440":"## Part 4: Mass of Jupiter\n\nIn order to use the simplified version of Kepler's Third Law:\n\n\\begin{equation}\na^3 = \\frac{GM}{4\\pi^2}T^2\n\\end{equation}\n\nwe need to convert the semi-major axes we found (i.e. the amplitudes from above) from pixels into physical units. The following questions will guide you through this process.","27618f82":"## Part 3: Fitting Orbital Periods and Radii\n\nIn this section, we will use an advanced technique to find the periods of all four moons. Here we assume the orbits are roughly circular, and thus can be fit by pure sinusoids. In general, the procudure adds the positions of all four moons together and then takes a Fourier Transform to find the frequency components of the sum. The strongest frequencies should correspond to the four moons. These frequencies are used as initial guesses in a least-squared fitting routine to get an even more precise answer. Run the cell below to find the best-fitting frequencies and display the results.","574434ff":"It would be tedious to have you record position data for all twenty nights of observations. Instead, we have used a peak-finding algorithm and provided the data for the rest of the nights for you. Run the cell below to plot the positions of the moons over the roughly twenty nights of observations and use it to answer the questions below. As discussed above, it is non-trivial to separate exactly which moon is at any individual position.","037b2802":"<div style=\"border-style:solid; border-width:3px; border-style:solid; border-color:black; border-radius:10px; text-align:left; padding:10px; background-color:lightblue;\">\n    <br>\n    <p><b><i>Question 9: (1 mark)<\/i><\/b> The code above assumed an uncertainty of 0.5 pixels for each position measurement. How does this compare with your estimated uncertainty from Part 1?<\/p>\n    <p><b><i>Question 10: (3 marks)<\/i><\/b> Look up a reliable measurement of the periods of each of the four Galilean moons. Do the output periods from above match those to within uncertainty? Do you think the assumption of $\\pm\\ 0.5$ pix was therefore reasonable? Or should it be higher\/lower?<\/p>\n    <p><b><i>Question 11: (1 mark)<\/i><\/b> Based on the plotted fits, does it look like the assumption of circular orbits was justified? Why or why not?<\/p>\n    <br>\n<\/div>","03d9d1b6":"# Phys 3001: Kepler's Third Law\n\nWelcome burgeoning astrophysicists! This activity is presented to you in an interactive notebook, where you can play with variables, make figures, and even write your own code. If you are coming into this course from Phys 1031 last semester, all of the code that made the labs run was hidden from you, but now it will be more visible. You will be able to edit the code directly by clicking the big black \"Copy and Edit\" button in the top right of the screen. You will need a free Kaggle account if you want to spend more than fifteen minutes editing.\n\nYou are not expected to know how to program for this course. Most of the heavy-duty coding has been done for you, and the only tasks you will be expected to do will be similar in level to entering formulas into a spreadsheet.\n\nNotebooks are divided into cells. To run a cell, either press the \"Run Current Cell\" button at the top (looks like a play triangle), or press <code>Shift + Enter<\/code>. To begin run the next cell to load the necessary libraries for this lab.","9874003d":"## Part 1: The Galilean Moons\n\nJupiter has 67 known moons. The four most massive moons are known as the \"Galilean Moons\" and were independently discovered in 1610 by Galileo Galilei and Simon Marius. They were the first objects found to orbit a body that was neither the Sun nor the Earth, providing further evidence against a geocentric universe. The Galilean Moons are named after four mythological lovers of Jupiter: Io, Europa, Ganymede, and Callisto. In this lab, you will use mock observations of the four Galilean Moons taken over 20 nights to calculate the mass of Jupiter using Kepler's Third Law.\n\nRecall that Kepler's third law relates the period of an orbit ($T$) with its semi-major axis ($a$) via the relation\n\n\\begin{equation}\na^3 = \\frac{G(M + m)}{4\\pi^2}T^2\n\\end{equation}\n\nwhere $M$ and $m$ are the masses of the orbiting bodies, and $G$ is Newton's constant. In cases where $M >> m$, this law enables us to determine the mass of the larger central body by observing the period and radius of orbiting moons.\n\nWe will start by looking at just one night's observations. Run the cell below to display an image captured of Jupiter and the four Galilean moons (Jupiter is the brightest and largest object). You do not need to modify the code in any way, just run it. Use the image to answer the questions below. You can get the X and Y pixel coordinates by hovering over the image (or clicking on the pixel on mobile). You may find it useful to use the Zoom tool (magnifying glass icon) to the side of the image. You can return to the original view by pressing the \"Reset\" tool at the side (arrows in a circle).","15469936":"<div style=\"border-style:solid; border-width:3px; border-style:solid; border-color:black; border-radius:10px; text-align:left; padding:10px; background-color:lightblue;\">\n    <br>\n    <p><b><i>Question 5: (2 marks)<\/i><\/b> It is difficult to track the position of any one individual moon over nightly snapshots. Based on this image compared to the previous one, explain why.<\/p>\n    <p><b><i>Question 6: (2 marks)<\/i><\/b> Explain why we are recording pixel distance away from Jupiter, rather than simply the X and Y corrrdinates of each moon in each image. (Hint: What is the center of Jupiter in this image?)<\/p>\n    <br>\n<\/div>","bb6807f4":"<div style=\"border-style:solid; border-width:3px; border-style:solid; border-color:black; border-radius:10px; text-align:left; padding:10px; background-color:lightblue;\">    \n    <h3><center>Answer all questions in the associated Moodle Quiz<\/center><\/h3>\n    <p><b><i>Question 1: (1 mark)<\/i><\/b> Record the XY pixel position of the center of Jupiter.<\/p>\n    <p><b><i>Question 2: (4 marks)<\/i><\/b> Starting with the left-most moon, record the XY position of the center of each moon.<\/p>\n    <p><b><i>Question 3: (4 marks)<\/i><\/b> For each moon, what is the distance from the center of Jupiter in pixels? Use negative distances for moons to the left of Jupiter, and positive distances for those to the right. Recall that the formula for length given two points is $\\ell = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}$<\/p>\n    <p><b><i>Question 4: (2 marks)<\/i><\/b> What is your best estimate for the uncertainty of your distances in pixels? Explain how you came to this estimate.<\/p>\n    <br>\n<\/div>","33c2350a":"<div style=\"border-style:solid; border-width:3px; border-style:solid; border-color:black; border-radius:10px; text-align:left; padding:10px; background-color:lightblue;\">\n    <br>\n    <p><b><i>Question 12: (2 marks)<\/i><\/b> Scroll up to one of the images of Jupiter and measure its diameter in pixels once in the vertical direction and once in the horizontal direction. Use only the brightest \"flat-white\" part since the halo is caused by light scattering through the optics and atmosphere. State your measurements and calculate the average of the two values.<\/p>\n    <p><b><i>Question 13: (1 mark)<\/i><\/b> Given that the radius of Jupiter is $6.991\\times10^7$ m (coincidentally also found using Kepler's laws), use your answer from above to determine how many km per pixel there are. (Hint: don't mix up radius and diameter.)<\/p>\n    <p><b><i>Question 14: (1 mark)<\/i><\/b> Convert the amplitudes given in Part 3 from pixels to m. If you would like to use the blank coding cell below, the amplitudes are stored in the variable <code>amps<\/code>.<\/p>\n    <p><b><i>Question 15: (1 mark)<\/i><\/b> Convert the periods given in Part 3 from days to seconds. If you would like to use the blank coding cell below, the periods are stored in the variable <code>periods<\/code>.<\/p>\n    <p><b><i>Question 16: (5 marks)<\/i><\/b> Rearrange Kepler's Third Law to find the mass given the period and amplitude of an orbiting body. Determine four estimates of the mass (one for each moon) and then average them. What is your averaged mass?<\/p>\n    <p><b><i>Question 17: (2 marks)<\/i><\/b> How does it compare to the accepted value? What might improve your results\/reduce the uncertainty if you were to perform a similar experiment in the future?<\/p>\n    <br>\n<\/div>"}}