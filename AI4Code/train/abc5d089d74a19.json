{"cell_type":{"eee93ec1":"code","aa02e3a1":"code","d825e8b2":"code","393a3bdd":"code","fcffd2c4":"code","5d1cc99a":"code","e5b15452":"code","3f288bff":"code","3747d521":"code","0eae0048":"code","00266312":"code","3ddf8514":"code","4a021f27":"code","80fcb5c7":"code","ef600375":"code","22c581ab":"code","930cb422":"code","8534c008":"code","c8cbdf1c":"code","46173878":"code","4ea2a6cc":"code","462b283f":"code","6742583a":"code","cc470a77":"code","957b9eb2":"code","a3094f32":"code","0b43b5e7":"code","97a2a118":"markdown","09ff6b16":"markdown"},"source":{"eee93ec1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aa02e3a1":"train =pd.read_csv('..\/input\/train_label.csv')","d825e8b2":"train.head() # to check the head of the dataset","393a3bdd":"train.tail()","fcffd2c4":"train.info()","5d1cc99a":"train.describe()","e5b15452":"train.isnull().sum() # found one nan value in the dataset ","3f288bff":"train[train['label']==1].count()","3747d521":"train[train['label']==0].count()","0eae0048":"from datetime import datetime\ndata = [go.Scatter(x=train.date, y=train['label'])]\n\npy.iplot(data, filename = 'time-series-simple')","00266312":"train.fillna(0,inplace=True) #by using fillna we can replace nan with 0","3ddf8514":"train.info()","4a021f27":"X=train.drop('label',axis=1)\ny=train.label","80fcb5c7":"X.shape","ef600375":"y.shape","22c581ab":"import datetime as dt\nX['date'] = pd.to_datetime(X['date'])\nX['date']=X['date'].map(dt.datetime.toordinal)\n\nX['date'].head()","930cb422":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,random_state=60,test_size=0.20) ","8534c008":"from sklearn.tree import DecisionTreeClassifier\ndecision=DecisionTreeClassifier()\ndecision.fit(X_train,y_train)","c8cbdf1c":"y_predict=decision.predict(X_test)","46173878":"from sklearn.metrics import roc_auc_score\nroc_auc = roc_auc_score(y_test, y_predict)\nroc_auc","4ea2a6cc":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_predict)\ncm","462b283f":"from sklearn.metrics import roc_curve\nimport matplotlib.pyplot as plt \nfpr, tpr, thresholds = roc_curve(y_test, decision.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', label='Decision Tree (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","6742583a":"from sklearn.ensemble import RandomForestClassifier\nrandom=RandomForestClassifier()\nrandom.fit(X_train,y_train)","cc470a77":"pre=random.predict(X_test)","957b9eb2":"from sklearn.metrics import roc_auc_score\nroc_auc = roc_auc_score(y_test, pre)\nroc_auc","a3094f32":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, pre)\ncm","0b43b5e7":"from sklearn.metrics import roc_curve\nimport matplotlib.pyplot as plt \nfpr, tpr, thresholds = roc_curve(y_test, random.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', label='random forest (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","97a2a118":"Check Out the confusion matrix to find out the true positive and true negative ","09ff6b16":"** Using train test split function because test data showing some error to read it **"}}