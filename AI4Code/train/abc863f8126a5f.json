{"cell_type":{"b788819e":"code","4218a565":"code","c2f08678":"code","6148b2c7":"code","9fd20be2":"code","dba6dab1":"code","2b5c6df7":"code","5a4577d3":"markdown","eec17d28":"markdown","7a6d1b15":"markdown","50600b7a":"markdown","923e2025":"markdown","ad70fcb3":"markdown","5cfa95d7":"markdown","d423858e":"markdown"},"source":{"b788819e":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix","4218a565":"train_augmentation = ImageDataGenerator(\n                                        shear_range = 0.1,\n                                        zoom_range = 0.1,\n                                        rescale = 1.\/255)\n\nval_augmentation = ImageDataGenerator(\n                                        rescale = 1.\/255, \n                                        zoom_range = 0.01)\n\ntest_augmentation = ImageDataGenerator(\n                                        rescale = 1.\/255,\n                                        zoom_range = 0.01)\n\ntrain_set = train_augmentation.flow_from_directory(\n                                        \"..\/input\/pneumonia-xray-images\/train\", \n                                        target_size=(500,500), \n                                        color_mode=\"grayscale\", \n                                        class_mode=\"binary\", \n                                        batch_size=32)\n\nval_set = val_augmentation.flow_from_directory(\n                                        \"..\/input\/pneumonia-xray-images\/val\", \n                                        target_size=(500,500), \n                                        color_mode=\"grayscale\", \n                                        class_mode=\"binary\", \n                                        batch_size=16)\n\ntest_set = test_augmentation.flow_from_directory(\n                                        \"..\/input\/pneumonia-xray-images\/test\", \n                                        target_size=(500,500), \n                                        color_mode=\"grayscale\", \n                                        class_mode=\"binary\", \n                                        batch_size=1)","c2f08678":"model = Sequential([\n                    Conv2D(filters=64, kernel_size=(3,3), padding=\"valid\", activation=\"relu\", use_bias=True, input_shape=(500, 500, 1)),\n                    MaxPooling2D(pool_size=(2,2), padding=\"valid\"),\n                    Dropout(rate=0.2),\n                    Conv2D(filters=32, kernel_size=(3,3), padding=\"valid\", activation=\"relu\", use_bias=True),\n                    MaxPooling2D(pool_size=(2,2), padding=\"valid\"),\n                    Conv2D(filters=16, kernel_size=(3,3), padding=\"valid\", activation=\"relu\", use_bias=True),\n                    MaxPooling2D(pool_size=(2,2), padding=\"valid\"),\n                    Flatten(),\n                    Dense(units=16, activation=\"relu\"),\n                    Dense(units=1, activation=\"sigmoid\")\n])\n\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])","6148b2c7":"model.summary()","9fd20be2":"model_history = model.fit(x=train_set, epochs=12, verbose=1, validation_data=val_set, validation_steps=len(val_set))","dba6dab1":"plt.plot(model_history.history[\"accuracy\"])\nplt.plot(model_history.history[\"val_accuracy\"])\nplt.title(\"Modellgenauigkeit\")\nplt.xlabel(\"Epoche\")\nplt.ylabel(\"Genauigkeit\")\nplt.legend([\"Training\", \"Validierung\"], loc=\"lower right\")\nplt.show()","2b5c6df7":"evaluation = model.evaluate(x=test_set, steps=len(test_set))\nprint(\"Die Genauigkeit der KI betr\u00e4gt \", evaluation[1]*100,\" % !\")","5a4577d3":"# Das Modell bauen\nBei dem Modell handelt es sich um ein sogenanntes Sequential-Modell, welches aus mehreren Convolutional- und Pooling-Schichten besteht. Hierbei wird das Bild Schicht f\u00fcr Schicht codiert und verkleinert. Die Dropout-Schicht dient dabei zur Generalisierung des Modells und soll Overfitting verhindern. Die codierten R\u00f6ntgenaufnahmen werden anschlie\u00dfend an ein Neuronales Netzwerk \u00fcbergeben, hier findet letztendlich die Klassifizierung statt. Die einzelnen Schichten besitzen die Relu-Funktion als Aktivierungsfunktion.","eec17d28":"# Das Modell tranieren\nDas Modell wird insgesamt 12 Epochen trainiert. Dabei wird ein Validierungsset \u00fcbergeben, die in diesem Ordner enthaltenen Aufnahmen flie\u00dfen nicht in den Trainingsprozess mit ein, sondern dienen lediglich der \u00dcberpr\u00fcfung der Effizienz des Modells bei unbekannten Aufnahmen.","7a6d1b15":"# KI zur Diagnose von Pneumonie\nAutor: Stian A.    \/    3.12.2020 - 15:46 Uhr","50600b7a":"# Aufbereitung der Daten\nDiese werden zun\u00e4chst in sogennate Batches eingeteilt und vorbereitet (Festlegung der Bildgr\u00f6\u00dfe, usw..), anschlie\u00dfend mithilfe der ImageDataGenerator-Funktion erweitert (-> \"Data Augmentation\")","923e2025":"# \u00dcbersicht des Modells (insg. 945361 Gewichte [=\"params\"] )","ad70fcb3":"# Auswertung des Modells","5cfa95d7":"# Importierte Bibiotheken","d423858e":"# Die KI ist in der Lage knapp 89% aller R\u00f6ntgenaufnahmen richtig zu klassifizieren"}}