{"cell_type":{"b74fde11":"code","578579a8":"code","5dc88778":"code","51e2a7c1":"code","d0e6e2e2":"code","22edf072":"code","25523db1":"code","c8fdf8e4":"code","8d2d6450":"code","8f818b1e":"code","9490839e":"code","1a346106":"code","07bf0303":"code","eb909f9b":"code","6425a87f":"code","c37cbe96":"code","fa859cf3":"code","309f404e":"markdown","2622690c":"markdown","ea915389":"markdown","a8179a86":"markdown","76574f45":"markdown","c6924817":"markdown","dc91edbb":"markdown","a5068615":"markdown","12c3aa75":"markdown","00480082":"markdown","2dcc3404":"markdown","3969eb27":"markdown","0e482021":"markdown"},"source":{"b74fde11":"# Dataset manipulation modules\nimport numpy as np\nimport pandas as pd\n\n# Iteration and naming tools\nimport re\nfrom itertools import compress, product\n\n# Plot tools\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# P-values, Z-scores calculation tools\nimport scipy\n\n# Linear Regression tools\nimport statsmodels.api as sm\n\n# Error calculation\nimport tensorflow as tf\n\n# Ignoring warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split","578579a8":"# Reading CSV\ndf = pd.read_csv(\"..\/input\/calculated-aqi-caaqm-central-university-hyd\/Raw_DATA.csv\")\n\n# Removing the columns that are not useful\ndf.drop([\"To Date\"], axis=1, inplace=True)\n\n# Renaming Date column\ndf.rename({\"From Date\":\"Date\"}, axis=1, inplace=True)\n\n# Changing date column into datetime object\ndf['Date'] = pd.to_datetime(df['Date'], dayfirst= True)\n\n# changing columns to numeric values\nfor element in df.columns[1:]:\n    df[element]= pd.to_numeric(df[element], errors='coerce')\n\ndf.head(5)","5dc88778":"# Sub-Index calculation functions (as per Indian Air Quality Standards)\n\n# PM2.5\ndef SI_PM_25(x):\n    SI = 0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=30: \n        SI = x*50\/30 \n    elif x>30 and x<=60:\n        SI = 50+((x-30)*50\/30) \n    elif x>60 and x<=90:\n        SI = 100+((x-60)*100\/30) \n    elif x>90 and x<=120:\n        SI = 200+((x-90)*100\/30)\n    elif x>120 and x<=250:\n        SI = 300+((x-120)*100\/130)\n    elif x>250:\n        SI = 400+((x-250)*100\/130)\n    else:\n        SI = x\n    \n    return SI\n\n# PM10\ndef SI_PM_10(x):\n    SI =0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=50 :\n        SI = x\n    elif x>50 and x<=100:\n        SI= x\n    elif x>100 and x<=250:\n        SI = 100+((x-100)*100\/150)\n    elif x>250 and x<=350:\n        SI = 200+(x-250)\n    elif x>350 and x<=430:\n        SI = 300+((x-350)*100\/80)\n    elif x>430:\n        SI = 400+((x-430)*100\/80)\n    else:\n        SI = x\n    \n    return SI\n\n# NO2\ndef SI_NO2(x):\n    SI =0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=40:\n        SI = x*50\/40\n    elif x>40 and x<=80:\n        SI = 50+((x-40)*50\/40)\n    elif x>80 and x<=180:\n        SI = 100+((x-80)*100\/100)\n    elif x>180 and x<=280:\n        SI = 200+((x-180)*100\/100)\n    elif x>280 and x<=400:\n        SI = 300+((x-280)*100\/120)\n    elif x>400:\n        SI = 400+((x-400)*100\/120)\n    else:\n        SI = x\n    \n    return SI\n\n# NH3\ndef SI_NH3(x):\n    SI=0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=200:\n        SI = x*50\/200\n    elif x>200 and x<=400:\n        SI = 50+((x-200)*50\/200)\n    elif x>400 and x<=800:\n        SI = 100+((x-400)*100\/400)\n    elif x>800 and x<=1200:\n        SI = 200+((x-800)*100\/400)\n    elif x>1200 and x<=1800:\n        SI = 300+((x-1200)*100\/600)\n    elif x>1800:\n        SI = 400+((x-1800)*100\/600)\n    else:\n        SI = x\n    \n    return SI\n\n# SO2\ndef SI_SO2(x):\n    SI=0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=40:\n        SI = x*50\/40\n    elif x>40 and x<=80:\n        SI = 50+((x-40)*50\/40)\n    elif x>80 and x<=380:\n        SI = 100+((x-80)*100\/300)\n    elif x>380 and x<=800:\n        SI = 200+((x-380)*100\/420)\n    elif x>800 and x<=1600:\n        SI = 300+((x-800)*100\/800)\n    elif x>1600:\n        SI =400+((x-1600)*100\/800)\n    else:\n        SI = x\n    \n    return SI\n\n# CO\ndef SI_CO(x):\n    SI=0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=1:\n        SI = x*50\/1\n    elif x>1 and x<=2:\n        SI = 50+((x-1)*50\/1) \n    elif x>2 and x<=10:\n        SI = 100+((x-2)*100\/8) \n    elif x>10 and x<=17:\n        SI = 200+((x-10)*100\/7)\n    elif x>17 and x<=34:\n        SI = 300+((x-17)*100\/17)\n    elif x>34:\n        SI = 400+((x-34)*100\/17)\n    else:\n        SI = x\n    \n    return SI\n\n# OZONE\ndef SI_OZONE(x):\n    SI=0\n    \n    if pd.isna(x):\n        SI = x\n    elif x<=50:\n        SI = x*50\/50 \n    elif x>50 and x<=100:\n        SI = 50+((x-50)*50\/50)\n    elif x>100 and x<=168:\n        SI = 100+((x-100)*100\/68)\n    elif x>168 and x<=208:\n        SI = 200+((x-168)*100\/40)\n    elif x>208 and x<=748:\n        SI = 300+((x-208)*100\/539)\n    elif x>748:\n        SI = 400+((x-400)*100\/539)\n    else:\n        SI = x\n    \n    return SI","51e2a7c1":"# Initiating a Dataframe with dates\nsubIndex = pd.DataFrame(df['Date'])\n\n# Calculating Sub-Indices using functions defined in above code block.\nsubIndex['PM2.5 SI'] = df[\"PM2.5\"].apply(SI_PM_25)\nsubIndex['PM10 SI'] = df[\"PM10\"].apply(SI_PM_10)\nsubIndex['NO2 SI'] = df[\"NO2\"].apply(SI_NO2)\nsubIndex['NH3 SI'] = df[\"NH3\"].apply(SI_NH3)\nsubIndex['SO2 SI'] = df[\"SO2\"].apply(SI_SO2)\nsubIndex['CO SI'] = df[\"CO\"].apply(SI_CO)\nsubIndex['Ozone SI'] = df[\"Ozone\"].apply(SI_OZONE)\n\nsubIndex.head(5)","d0e6e2e2":"# AQI is calculated as per Indian AQI calculation standards\n\n# Initiating Dataframe with Dates\naqi = pd.DataFrame(df['Date'])\n\n# creating an empty AQI row to fill in\nNan = np.nan\naqi['AQI']=Nan\n\n# iterating through rows # calculating AQI\nfor ind in subIndex.index:\n\n    # checking either one of PM2.5 or PM10 is available\n    while pd.notna(subIndex['PM2.5 SI'][ind]) or pd.notna(subIndex['PM10 SI'][ind]):\n\n        p_list = [subIndex['PM2.5 SI'][ind], subIndex['PM10 SI'][ind], subIndex['NO2 SI'][ind], subIndex['NH3 SI'][ind], subIndex['SO2 SI'][ind], subIndex['CO SI'][ind],subIndex['Ozone SI'][ind]]\n\n        # Check_list of bool of available pollutant values in each index or date\n        Check_list = list(pd.notna(p_list))\n\n        # checksum of available Pollutant values is used in if statement\n        if sum(Check_list) >=3:\n            \n            # compresSub-Indexng the list of pollutants to remove Nan to remove uncertainities \n            aqi['AQI'][ind]= max(list(compress(p_list, Check_list)))\n\n        break\n\naqi.head(5)","22edf072":"# converting subIndex to set freq of days for resampling\ndf = df.set_index('Date').asfreq('D', method=\"ffill\")\n\n# converting subIndex to set freq of days for resampling\nsubIndex = subIndex.set_index('Date').asfreq('D', method=\"ffill\")\n\n# converting AQI to set freq of days for resampling\naqi = aqi.set_index('Date').asfreq('D', method=\"ffill\")\n\ndf_list = [df, subIndex, aqi]\n\n# Dropping year 2017 Data as it is inconsistent with other years.\nfor itr in df_list:\n    index = itr.loc[\"2017\"].index\n    itr.drop(index, inplace=True)","25523db1":"# removing outliers in AQI data to perform regression\naqi = aqi.dropna()\nz_scores = scipy.stats.zscore(aqi)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores<3).all(axis=1)\naqi = aqi[filtered_entries]","c8fdf8e4":"# Splitting to train and test\ntrain, test = train_test_split(aqi, test_size=0.1, shuffle=False)\n\ntrain = train.asfreq('D')\ntest= test.asfreq('D')","8d2d6450":"# daily , weekly, semi-monthly, monthly, quaterly, yearly .\nplt.figure(figsize=[15,7],)\nplt.suptitle(\"Finding pattern using visual Inspection for Seasonality\")\n\n# daily\naqi.plot(ax=plt.subplot(321), legend=False)\nplt.title(\"daily Plot\")\nplt.ylabel(\"AQI VALUE\")\n\n# weekly\nax=plt.subplot(322)\naqi[:30].resample('W').plot(ax=ax)\nplt.title(\"Weekly Plot\")\nplt.ylabel(\"AQI VALUE\")\n\n# semi-monthly\nax=plt.subplot(323)\nax = aqi[:90].resample('sm').plot()\nplt.title(\"Semi-monthly Plot\")\nplt.ylabel(\"AQI VALUE\")\n\n# monthly\nax=plt.subplot(324)\nax = aqi[:90].resample('m').plot()\nplt.title(\"Monthly Plot\")\nplt.ylabel(\"AQI VALUE\")\n\n# quaterly\nax=plt.subplot(325)\nax = aqi[:356].resample('Q').plot()\nplt.title(\"Quaterly Plot\")\nplt.ylabel(\"AQI VALUE\")\n\n# yearly\nax=plt.subplot(326)\nax = aqi.resample('Y').plot()\nplt.title(\"Yearly Plot\")\nplt.ylabel(\"AQI VALUE\")\n\nplt.tight_layout()\nplt.show()","8f818b1e":"plt.figure(figsize=[15,7])\nsm.tsa.seasonal_decompose(aqi,period=356).plot()\nprint(\"Dickey\u2013Fuller test: p=%f\" % sm.tsa.stattools.adfuller(aqi)[1])\nplt.show()","9490839e":"# Initial approximation of parameters using Autocorrelation and Partial Autocorrelation Plots\nplt.figure(figsize=(15,7))\nax = plt.subplot(211)\nsm.graphics.tsa.plot_acf(aqi, lags=48, ax=ax)\nax = plt.subplot(212)\nsm.graphics.tsa.plot_pacf(aqi, lags=48, ax=ax)\nplt.tight_layout()\nplt.show()","1a346106":"# Initial approximation of parameters\nq = range(0, 5)\np = range(0, 5)\nd=0\n\nparameters = product(p, q)\nparameters_list = list(parameters)\nlen(parameters_list)\n\n# Model Selection\nresults = []\nbest_aic = float(\"inf\")\nwarnings.filterwarnings('ignore')\nfor param in parameters_list:\n    try:\n        model=sm.tsa.statespace.SARIMAX(train, order=(param[0], d, param[1])).fit(disp=-1)\n    except ValueError:\n        print('wrong parameters:', param)\n        continue\n    aic = model.aic\n    if aic < best_aic:\n        best_model = model\n        best_aic = aic\n        best_param = param\n    results.append([param, model.aic])","07bf0303":"# Best Models\nresult_table = pd.DataFrame(results)\nresult_table.columns = ['parameters (p,q)', 'aic']\nprint(result_table.sort_values(by = 'aic', ascending=True).head())\nprint(best_model.summary())","eb909f9b":"plt.figure(figsize=(15,7))\nplt.plot(train[:100])\nplt.plot(best_model.predict()[:100])\nplt.legend([\"True value\", \"Predicted value from best model\"])","6425a87f":"best_model.plot_diagnostics(figsize=(18, 8))\nplt.show()","c37cbe96":"fig, ax = plt.subplots(figsize=(15, 5))\n\n# Plot the data (here we are subsetting it to get a better look at the forecasts)\naqi[1000:].plot(ax=ax)\n\n# Construct the forecasts\nfcast = best_model.get_forecast(\"2021-05-26\").summary_frame()\nfcast['mean'].plot(ax=ax, style='k--')\nax.fill_between(fcast.index, fcast['mean_ci_lower'], fcast['mean_ci_upper'], color='k', alpha=0.1)","fa859cf3":"mae = tf.keras.metrics.mean_absolute_error(y_pred=fcast['mean'].values, y_true=test.AQI.values).numpy()\nrmse = tf.sqrt(tf.losses.mean_squared_error(y_pred=fcast['mean'].values, y_true=test.AQI.values)).numpy()\nprint(\"MAE: \",mae)\nprint(\"RMSE: \",rmse)","309f404e":"## Parameters for modeling","2622690c":"## Prediction and Diagnostics of Residuals","ea915389":"# Exploring AQI Data","a8179a86":"## Error","76574f45":"## Seasonality","c6924817":"**We can't see any possible evidence for seasonality in daily, weekly, semi-monthly, monthly and quaterly plots. but, there is a slight evidence in yearly plot. But it can't hold out in stationarity test as data contains only 3 years of data; we can say that data has some seasonality but it can't be detected with itself as there is no enough evidence.**","dc91edbb":"# Data Prep","a5068615":"## Stationarity","12c3aa75":"# ARIMA","00480082":"## Forecast","2dcc3404":"**As per the p-value from Dickey-fuller test by rejecting null hypothesis(i.e. Non-stationary) by significance value (= 0.05), we can say that the time series is stationary.**","3969eb27":"## BEST MODEL","0e482021":"# Importing libraries"}}