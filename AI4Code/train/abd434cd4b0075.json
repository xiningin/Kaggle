{"cell_type":{"7ae7e2a0":"code","6bb5e67b":"code","620657fa":"code","3d327faa":"code","b62409c1":"code","4bbb1950":"code","10783f50":"code","a78e14a0":"code","f8243304":"code","f113b63a":"code","59935487":"code","89fb1598":"code","9e4ef594":"code","8b69ddb0":"code","98686690":"code","2bba4f90":"code","ac4adda6":"code","95031616":"code","fb37de52":"code","ed66449a":"code","74e67f29":"code","797d44af":"code","5bc6dae3":"markdown","430cd520":"markdown","8d8e5557":"markdown","844fdc54":"markdown","1a62b6fb":"markdown","ccbe0ad9":"markdown","6b134275":"markdown","3445106a":"markdown","aca0a0be":"markdown","777a73ab":"markdown","642baf22":"markdown","0deb19e4":"markdown","65d77f7b":"markdown","6607a187":"markdown","c801326d":"markdown","c4ee88e1":"markdown"},"source":{"7ae7e2a0":"import numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Layer, BatchNormalization, GlobalAveragePooling2D \nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import Model, Input \nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\npyo.init_notebook_mode()\nimport os\n\nimport imgaug.augmenters as iaa\nimport tensorflow as tf\nnp.random.seed(1)\ntf.random.set_seed(1) ","6bb5e67b":"DIR = '..\/input\/captcha-version-2-images\/samples\/samples'\ncaptcha_list = []\ncharacters = {}\nfor captcha in os.listdir(DIR):\n    captcha_list.append(captcha)\n\n    captcha_code = captcha.split(\".\")[0]\n    for i in captcha_code:\n        characters[i] = characters.get(i, 0) +1\nsymbols = list(characters.keys())\nlen_symbols = len(symbols)\nprint(f'Only {len_symbols} symbols have been used in images')\n\nplt.bar(*zip(*characters.items()))\nplt.title('Frequency of symbols')\nplt.show()","620657fa":"channels = 1\nimg_shape = (50, 200, channels)\n\nnSamples = len(captcha_list) # the number of samples 'captchas'\nlen_captcha = 5\n\nX = np.zeros((nSamples, 50, 200, channels)) # 1070 * 50 * 200\ny = np.zeros((5, nSamples, len_symbols)) # 5 * 1070 * 19","3d327faa":"\nfor i, captcha in enumerate(captcha_list):\n    captcha_code = captcha.split('.')[0]\n    captcha_cv2 = cv2.imread(os.path.join(DIR, captcha),cv2.IMREAD_GRAYSCALE)\n    captcha_cv2 = captcha_cv2 \/ 255.0\n    \n    captcha_cv2 = np.reshape(captcha_cv2, img_shape)\n    targs = np.zeros((len_captcha, len_symbols))\n    \n    for a, b in enumerate(captcha_code):\n        targs[a, symbols.index(b)] = 1\n    X[i] = captcha_cv2\n    y[:, i] = targs","b62409c1":"print(\"shape of X:\", X.shape)\nprint(\"shape of y:\", y.shape)","4bbb1950":"from numpy.random import default_rng\n\nrng = default_rng(seed=1)\ntest_numbers = rng.choice(1070, size=int(1070*0.3), replace=False)\n\nX_test = X[test_numbers]\nX_full = np.delete(X, test_numbers,0)\ny_test = y[:,test_numbers]\ny_full = np.delete(y, test_numbers,1)\n\nval_numbers = rng.choice(int(1070*0.7), size=int(1070*0.3), replace=False)\n\nX_val = X_full[val_numbers]\nX_train = np.delete(X_full, val_numbers,0)\ny_val = y_full[:,val_numbers]\ny_train = np.delete(y_full, val_numbers,1)","10783f50":"print('Samples in train set:',X_train.shape[0])\nprint('Samples in test set:',X_test.shape[0])\nprint('Samples in validation set:',X_val.shape[0])","a78e14a0":"aug =iaa.Sequential([iaa.CropAndPad(\n    px=((0, 10), (0, 35), (0, 10), (0, 35)),\n    pad_mode=['edge'],\n    pad_cval=1\n),iaa.Rotate(rotate=(-8,8))])\n\n\n\nX_aug_train = None\ny_aug_train = y_train\nfor i in range(40):\n    X_aug = aug(images = X_train)\n    if X_aug_train is not None:\n        X_aug_train = np.concatenate([X_aug_train, X_aug], axis = 0)\n        y_aug_train = np.concatenate([y_aug_train, y_train], axis = 1)\n    else:\n        X_aug_train = X_aug\n        \n        \n    ","f8243304":"fig, ax = plt.subplots(nrows=5, ncols =4, figsize = (16,16))\nfor i in range(20):\n    index = np.random.randint(X_aug_train.shape[0])\n    ax[i\/\/4][i%4].imshow(X_aug_train[index],cmap='gray')\n    ","f113b63a":"captcha = Input(shape=(50,200,channels))\nx = Conv2D(32, (5,5),padding='valid',activation='relu')(captcha)\nx = MaxPooling2D((2,2),padding='same')(x)\nx = Conv2D(64, (3,3),padding='same',activation='relu')(x)\nx = MaxPooling2D((2,2),padding='same')(x)\nx = Conv2D(128, (3,3),padding='same',activation='relu')(x)\nmaxpool = MaxPooling2D((2,2),padding='same')(x)\noutputs = []\nfor i in range(5):\n    x = Conv2D(256, (3,3),padding='same',activation='relu')(maxpool)\n    x = MaxPooling2D((2,2),padding='same')(x)\n    x = Flatten()(x)\n    x = Dropout(0.5)(x)\n    x = BatchNormalization()(x)\n    x = Dense(64, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    x = BatchNormalization()(x)\n    x = Dense(len_symbols , activation='softmax' , name=f'char_{i+1}')(x)\n    outputs.append(x)\n    \nmodel = Model(inputs = captcha , outputs=outputs)","59935487":"model.summary()","89fb1598":"reduce_lr = ReduceLROnPlateau(patience =3, factor = 0.5,verbose = 1)\nmodel.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.0005), metrics=[\"accuracy\"])\nearlystopping = EarlyStopping(monitor =\"val_loss\",  \n                             mode =\"min\", patience = 10,\n                              min_delta = 1e-4,\n                             restore_best_weights = True) \n\nhistory = model.fit(X_aug_train, [y_aug_train[i] for i in range(5)], batch_size=32, epochs=400, verbose=1, validation_data = (X_val, [y_val[i] for i in range(5)]), callbacks =[earlystopping,reduce_lr])","9e4ef594":"score = model.evaluate(X_test,[y_test[0], y_test[1], y_test[2], y_test[3], y_test[4]],verbose=1)\nmetrics = ['loss','char_1_loss', 'char_2_loss', 'char_3_loss', 'char_4_loss', 'char_5_loss', 'char_1_acc', 'char_2_acc', 'char_3_acc', 'char_4_acc', 'char_5_acc']\n\nfor i,j in zip(metrics, score):\n    print(f'{i}: {j}')\n","8b69ddb0":"metrics_df = pd.DataFrame(history.history)\n\ncolumns = [col for col in metrics_df.columns if 'loss' in col and len(col)>8]\n\nfig = px.line(metrics_df, y = columns)\nfig.show()","98686690":"plt.figure(figsize=(15,8))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper right',prop={'size': 10})\nplt.show()","2bba4f90":"def makePredict(captcha):\n    captcha = np.reshape(captcha , (1, 50,200,channels))\n    result = model.predict(captcha)\n    result = np.reshape(result ,(5,len_symbols))\n    \n    label = ''.join([symbols[np.argmax(i)] for i in result])\n    \n    return label\n\n","ac4adda6":"actual_pred = []\n\nfor i in range(X_test.shape[0]):\n    actual = ''.join([symbols[i] for i in (np.argmax(y_test[:, i],axis=1))])\n    pred =  makePredict(X_test[i])\n    actual_pred.append((actual, pred))","95031616":"sameCount = 0\ndiffCount = 0\nletterDiff = {i:0 for i in range(5)}\nincorrectness = {i:0 for i in range(1,6)}\nfor real, pred in actual_pred:\n    if real == pred:\n        sameCount += 1\n    else:\n        diffCount += 1\n        incorrectnessPoint = 0\n        for i in range(5):\n            if real[i] != pred[i]:\n                letterDiff[i] += 1\n                incorrectnessPoint += 1\n        incorrectness[incorrectnessPoint] += 1","fb37de52":"x = ['True predicted', 'False predicted']\ny = [sameCount, diffCount]\n\nfig = go.Figure(data=[go.Bar(x = x, y = y)])\nfig.show()","ed66449a":"x1 = [\"Character \" + str(x) for x in range(1, 6)]\n    \nfig = go.Figure(data=[go.Bar(x = x1, y = list(letterDiff.values()))])\nfig.show()","74e67f29":"x2 = [str(x) + \" incorrect\" for x in incorrectness.keys()]\ny2 = list(incorrectness.values())\n\nfig = go.Figure(data=[go.Bar(x = x2, y = y2)])\nfig.show()","797d44af":"fig, ax = plt.subplots(nrows = 8, ncols=4,figsize = (16,20))\ncount = 0\nfor i, (actual , pred) in enumerate(actual_pred):\n    if actual != pred:\n        img = X_test[i]\n        ax[count\/\/4][count%4].imshow(img, cmap = 'gray')\n        ax[count\/\/4][count%4].title.set_text(pred + ' - ' + actual)\n        count += 1\n\n","5bc6dae3":"# Table of contents:\n\n* [1. Import libraries](#1)\n* [2. Preprocess data](#2)\n* [3. Create model](#3)\n* [4. Results](#4)","430cd520":"I used help of [imgaug](https:\/\/github.com\/aleju\/imgaug) library for image augmentation. I increased train set size 5 times, even though this leads to overfitting, in this particular case, it turned out well","8d8e5557":"Since this is a multioutput problem, our data can't be splitted with `train_test_split` api of `sklearn`. So I splitted it with the help of numpy ","844fdc54":"Let's look at some augmented images to see if everything is okay","1a62b6fb":"<a id=\"4\"><\/a>\n# Results","ccbe0ad9":"Here I got the number of perfectly predicted captchas and incorrectly predicted ones.","6b134275":"According to the results of our model 289 captchas are completely correct while we have 32 incorrectly identified captchas.","3445106a":"[Here](https:\/\/www.kaggle.com\/fournierp\/captcha-version-2-images\/discussion\/82470), it is noted that captcha images doesn't contain all the letters, let's see which letters are present","aca0a0be":"<a id=\"1\"><\/a>\n# Import libraries","777a73ab":"# This notebook has been created from [Yasin Ughur's notebook](https:\/\/www.kaggle.com\/yasinughur\/captcha-recognition-with-tensorflow), if you like this notebook, please go check out his notebook.","642baf22":"We will train our model for only 19 characters","0deb19e4":"<a id=\"2\"><\/a>\n# Preprocess data","65d77f7b":"<a id=\"3\"><\/a>\n# Create Model","6607a187":"As you know we have 32 false predicted captchas. In order to get count of incorrectness in each word, I plotted this bar chart. ","c801326d":"It looks like model makes mistakes with letters \"m\" and \"n\", especially when there are chains of these letters. Overall, model got 90.0% accuracy from the test set which is good, in my opinion. If you like this notebook, please upvote it and if you have suggestions, please write them in comments.\n\n\n","c4ee88e1":"Here we can see how much we have incorrectness in each index."}}