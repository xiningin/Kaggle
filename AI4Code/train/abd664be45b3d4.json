{"cell_type":{"0653ef04":"code","f9023a31":"code","2232b037":"code","e8ae3b72":"code","d1591726":"code","51c7fb0f":"code","63ad64c0":"code","ae8ca1cf":"code","f49342c1":"code","59012316":"code","dff8dfed":"code","454fd8d1":"code","dbefdb33":"code","802bb262":"code","6aad88bd":"code","f14a42e4":"code","c90d44f7":"code","d837ec92":"code","ca8fcbc2":"code","c407357e":"code","4d26d2e7":"code","4adc485f":"code","8544154d":"code","d7726032":"code","3f249e6c":"code","aed4ff5f":"code","18468225":"code","1fb949f8":"code","653b97ca":"code","4299f9be":"code","00cb4c0f":"code","287e017b":"code","2817bb02":"code","06cf6549":"code","951eb212":"code","c655edc8":"code","1720e857":"code","4450c57c":"code","eaf2558d":"code","3d17dde7":"code","0f420a5a":"code","498c87b9":"code","c8c39a44":"markdown","57eef0e9":"markdown","bc49fe13":"markdown","2a0e9145":"markdown","899a33ec":"markdown","4ac5d121":"markdown","2b480bf5":"markdown","13c2783d":"markdown","34e225ff":"markdown","c382c850":"markdown","4f65906d":"markdown","bf4318b8":"markdown","fce98505":"markdown","797c6984":"markdown","c4df2a19":"markdown"},"source":{"0653ef04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport cufflinks as cf\ncf.go_offline(True)\nfrom numpy import mean\nfrom numpy import std\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom xgboost import XGBRFRegressor\n\nfrom sklearn.model_selection import train_test_split\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9023a31":"h_train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nh_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","2232b037":"h_train.head()","e8ae3b72":"h_train.shape","d1591726":"Numerical_data=h_train.drop('Id',axis=1).dtypes[h_train.dtypes != 'object'].index","51c7fb0f":"h_train[Numerical_data].describe()","63ad64c0":"h_train['SalePrice'].iplot(kind='hist')","ae8ca1cf":"plt.scatter(h_train['LotArea'],h_train['SalePrice'])","f49342c1":"plt.scatter(h_train['LotFrontage'],h_train['SalePrice'])","59012316":"h_train['LotArea'].iplot(kind='hist')","dff8dfed":"h_train['LotFrontage'].iplot(kind='hist')","454fd8d1":"data_mean, data_std = np.mean(h_train['LotArea']), np.std(h_train['LotArea'])\ncut_off = data_std*3\nlower, upper = data_mean - cut_off, data_mean + cut_off\nh_train=h_train[(h_train['LotArea'] >= lower) & (h_train['LotArea'] <= upper)]\nh_train.shape","dbefdb33":"data_mean, data_std = np.mean(h_train['SalePrice']), np.std(h_train['SalePrice'])\ncut_off = data_std *2\nlower, upper = data_mean - cut_off, data_mean + cut_off\nh_train=h_train[(h_train['SalePrice'] >= lower) & (h_train['SalePrice'] <= upper)]\nh_train.shape","802bb262":"data_mean, data_std = np.mean(h_train['LotFrontage']), np.std(h_train['LotFrontage'])\ncut_off = data_std *3\nlower, upper = data_mean - cut_off, data_mean + cut_off\nh_train=h_train[(h_train['LotFrontage'] >= lower) & (h_train['LotFrontage'] <= upper)]\nh_train.shape","6aad88bd":"((h_train.isnull().sum()\/len(h_train)) *100).sort_values(ascending=False)[:10]","f14a42e4":"h_train.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis=1,inplace=True)\nh_test.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis=1,inplace=True)","c90d44f7":"h_train.shape","d837ec92":"h_test.shape","ca8fcbc2":"h_train.dropna(inplace=True)\nh_train.reset_index(drop=True,inplace=True)\nh_train.shape","c407357e":"h_test.dropna(inplace=True)\nh_test.reset_index(drop=True,inplace=True)","4d26d2e7":"((h_train.isnull().sum()\/len(h_train)) *100).sort_values(ascending=False)[:10]","4adc485f":"categorical=list(h_train.dtypes[h_train.dtypes == 'object'].index)","8544154d":"h_train=pd.get_dummies(h_train,columns=categorical,drop_first=True)\nh_test=pd.get_dummies(h_test,columns=categorical,drop_first=True)","d7726032":"h_train.shape","3f249e6c":"h_test.shape","aed4ff5f":"h_train_columns=list(h_train.columns)\nh_test_columns=list(h_test.columns)","18468225":"y=h_train['SalePrice']","1fb949f8":"extra_columns=[i for i in h_train_columns if i not in h_test_columns]\nh_train.drop(extra_columns,axis=1,inplace=True)\nextra_columns1=[i for i in h_test_columns if i not in h_train_columns]\nh_test.drop(extra_columns1,axis=1,inplace=True)","653b97ca":"xgbrf=XGBRFRegressor(n_estimators=500,learning_rate=0.9,reg_lambda=0.1,max_depth=5,subsample=0.9)","4299f9be":"X=h_train.drop(['Id'],axis=1).values\n","00cb4c0f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","287e017b":"X_train","2817bb02":"y_test=list(y_test)","06cf6549":"xgbrf.fit(X_train,y_train)","951eb212":"y_pred=xgbrf.predict(X_test[0].reshape(-1,X_test.shape[1]))","c655edc8":"y_pred=[]\nfor x,num in enumerate(X_test):\n    y_pred.append(xgbrf.predict(X_test[x].reshape(-1,X_test.shape[1]))[0])","1720e857":"print('SalesPrice   PredictedResult')\nfor x in range(len(y_pred)):\n    print(x,' ',y_test[x],' ',y_pred[x])\n    print('\\n')","4450c57c":"plt.scatter(y_pred,y_test,color='r')","eaf2558d":"print('Id      SalesPrice')\nfor x in range(len(h_test)):\n    print(h_test['Id'][x],'  ',xgbrf.predict(h_test.drop('Id',axis=1).iloc[x].values.reshape(-1,h_test.shape[1]-1))[0])","3d17dde7":"List=[]\nfor x in range(len(h_test)):\n    List.append(xgbrf.predict(h_test.drop('Id',axis=1).iloc[x].values.reshape(-1,h_test.shape[1]-1))[0])","0f420a5a":"Predicted_Sales_Price=pd.Series(List,name='Predicted_Sales_Price')\nsubmission = pd.concat([h_test['Id'], Predicted_Sales_Price], axis=1)","498c87b9":"submission.to_csv('submission.csv',index=False)","c8c39a44":"From the above plot, it is visible that the actual and predicted price align with each other. It has the shape of the REGRESSION plot, with very few outliers.","57eef0e9":"Visualisation:","bc49fe13":"The null values are dropped, for the better prediction and the indices are reset.","2a0e9145":"The results are then exported to a CSV file","899a33ec":"To make sure the train and test data has same features, the extra features are removed:","4ac5d121":"To find the categorical data:","2b480bf5":"splitting the data using train_test_split:","13c2783d":"One-hot encoding:(To convert the categorical data into numerical data)","34e225ff":"creating the XGBOOST REGRESSOR object and the parameters are set:","c382c850":"Once the outliers are removed, next step is to analyse the data and remove the null values.","4f65906d":"The predicted results are then converted into a dataframe:","bf4318b8":"Numerical data are seggregated for analysis:","fce98505":"From the visualisation it is clear, that there are lot of outliers, which may influence our prediction. So the outliers are removed for better results. The outliers are removed as follows:","797c6984":"On the basis of above calculation, features with more than 50% null values are dropped.","c4df2a19":"To get the idea of null values in the data:"}}