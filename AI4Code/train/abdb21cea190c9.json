{"cell_type":{"b44ce9ab":"code","151b9e67":"code","881eb07b":"code","3844319e":"code","ad3bf9ba":"code","59be46ae":"code","ff4f924a":"code","1c575195":"code","c1d5c291":"code","adcdc069":"code","190a710e":"code","35043cb9":"code","132896ae":"code","fd0e6546":"code","735a36ad":"code","d624d5af":"code","613cc7e3":"code","90adadb3":"code","0f2e3457":"code","2678748d":"code","ba8478c6":"code","d89a5e8a":"code","e14a36b4":"code","841eceb5":"code","37b86655":"code","b08a5f61":"code","06931817":"code","be9ae20a":"code","f9c6ff7f":"code","a3dbb17b":"code","8d0cae35":"code","3fa44cc0":"code","85a9247b":"code","6a414569":"code","e89642a0":"code","2bd7281a":"code","755ce9b8":"code","f3cec82a":"code","c6e0c90c":"markdown","55cf8195":"markdown","2f18af58":"markdown","e1c862df":"markdown","c51e0c9e":"markdown","5172a783":"markdown","faed4f21":"markdown","4d26ecf6":"markdown","6dd94a01":"markdown","77bb521e":"markdown"},"source":{"b44ce9ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","151b9e67":"import torch\nimport torch.nn as nn\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# import dask.dataframe as dd","881eb07b":"data = pd.read_csv('\/kaggle\/input\/nyctaxifares\/NYCTaxiFares.csv')","3844319e":"data.head()","ad3bf9ba":"data['fare_class'].value_counts()","59be46ae":"def haversine_distance(df, lat1, long1, lat2, long2):\n    \"\"\"\n    Calculates the haversine distance between 2 sets of GPS coordinates in df\n    \"\"\"\n    r = 6371  # average radius of Earth in kilometers\n       \n    phi1 = np.radians(df[lat1])\n    phi2 = np.radians(df[lat2])\n    \n    delta_phi = np.radians(df[lat2]-df[lat1])\n    delta_lambda = np.radians(df[long2]-df[long1])\n     \n    a = np.sin(delta_phi\/2)**2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda\/2)**2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    d = (r * c) # in kilometers\n\n    return d","ff4f924a":"data['dist_km'] = haversine_distance(data,'pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude')\ndata.head()","1c575195":"data['EDTdate'] = pd.to_datetime(data['pickup_datetime'].str[:19]) - pd.Timedelta(hours=4)\ndata['Hour'] = data['EDTdate'].dt.hour\ndata['AMorPM'] = np.where(data['Hour']<12,'am','pm')\ndata['Weekday'] = data['EDTdate'].dt.strftime(\"%a\")\ndata.head()","c1d5c291":"data['EDTdate'].min()","adcdc069":"data['EDTdate'].max()","190a710e":"data.columns","35043cb9":"cat_cols = ['Hour', 'AMorPM', 'Weekday']\ncont_cols = ['pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude', 'passenger_count', 'dist_km']\ny_col = ['fare_class']  # this column contains the labels","132896ae":"# Convert our three categorical columns to category dtypes.\nfor cat in cat_cols:\n    data[cat] = data[cat].astype('category')","fd0e6546":"data.dtypes","735a36ad":"data['Hour'].head()","d624d5af":"hr = data['Hour'].cat.codes.values\nampm = data['AMorPM'].cat.codes.values\nwkdy = data['Weekday'].cat.codes.values\n\ncats = np.stack([hr, ampm, wkdy], 1)\n\ncats[:5]","613cc7e3":"# Convert categorical variables to a tensor\ncats = torch.tensor(cats, dtype=torch.int64)\n# this syntax is ok, since the source data is an array, not an existing tensor\n\ncats[:5]","90adadb3":"# Convert continuous variables to a tensor\nconts = np.stack([data[col].values for col in cont_cols], 1)\nconts = torch.tensor(conts, dtype=torch.float)\nconts[:5]","0f2e3457":"conts.type()","2678748d":"# Convert labels to a tensor\ny = torch.tensor(data[y_col].values).flatten()\n\ny[:5]","ba8478c6":"print(f' Shape for categorical variables: {cats.shape},\\n Shape for continious variables: {conts.shape},\\n Shape for dependant variable: {y.shape}')","d89a5e8a":"# This will set embedding sizes for Hours, AMvsPM and Weekdays\ncat_szs = [len(data[col].cat.categories) for col in cat_cols]\nemb_szs = [(size, min(50, (size+1)\/\/2)) for size in cat_szs]\nemb_szs","e14a36b4":"# This is assigned inside the __init__() method\nselfembeds = nn.ModuleList([nn.Embedding(ni, nf) for ni,nf in emb_szs])\nselfembeds\n\nlist(enumerate(selfembeds))\n\n# This happens inside the forward() method\nembeddingz = []\nfor i,e in enumerate(selfembeds):\n    embeddingz.append(e(cats[:,i]))\nembeddingz\n\n# We concatenate the embedding sections (12,1,4) into one (17)\nz = torch.cat(embeddingz, 1)\nz\n\n# This was assigned under the __init__() method\nselfembdrop = nn.Dropout(.4)\n\nz = selfembdrop(z)\nz","841eceb5":"class TabularModel(nn.Module):\n\n    def __init__(self, emb_szs, n_cont, out_sz, layers, p=0.5):\n        super().__init__()\n        self.embeds = nn.ModuleList([nn.Embedding(ni, nf) for ni,nf in emb_szs])\n        self.emb_drop = nn.Dropout(p)\n        self.bn_cont = nn.BatchNorm1d(n_cont)\n        \n        layerlist = []\n        n_emb = sum((nf for ni,nf in emb_szs))\n        n_in = n_emb + n_cont\n        \n        for i in layers:\n            layerlist.append(nn.Linear(n_in,i)) \n            layerlist.append(nn.ReLU(inplace=True))\n            layerlist.append(nn.BatchNorm1d(i))\n            layerlist.append(nn.Dropout(p))\n            n_in = i\n        layerlist.append(nn.Linear(layers[-1],out_sz))\n            \n        self.layers = nn.Sequential(*layerlist)\n    \n    def forward(self, x_cat, x_cont):\n        embeddings = []\n        for i,e in enumerate(self.embeds):\n            embeddings.append(e(x_cat[:,i]))\n        x = torch.cat(embeddings, 1)\n        x = self.emb_drop(x)\n        \n        x_cont = self.bn_cont(x_cont)\n        x = torch.cat([x, x_cont], 1)\n        x = self.layers(x)\n        return x","37b86655":"torch.manual_seed(33)\nmodel = TabularModel(emb_szs,conts.shape[1],2,[200,100],p=0.4)","b08a5f61":"model","06931817":"criterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)","be9ae20a":"data.shape","f9c6ff7f":"batch_size = 60000\ntest_size = 12000\n\ncat_train = cats[:batch_size-test_size]\ncat_test = cats[batch_size-test_size:batch_size]\ncon_train = conts[:batch_size-test_size]\ncon_test = conts[batch_size-test_size:batch_size]\ny_train = y[:batch_size-test_size]\ny_test = y[batch_size-test_size:batch_size]","a3dbb17b":"print(f'{len(cat_train)},{len(cat_test)}')","8d0cae35":"import time\nstart_time = time.time()\n\nepochs = 200\nlosses = []\n\nfor i in range(epochs):\n    i+=1\n    y_pred = model(cat_train, con_train)\n    loss = criterion(y_pred, y_train)\n    losses.append(loss)\n    \n    # a neat trick to save screen space:\n    if i%25 == 1:\n        print(f'epoch: {i:3}  loss: {loss.item():10.8f}')\n\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n\nprint(f'epoch: {i:3}  loss: {loss.item():10.8f}') # print the last line\nprint(f'\\nDuration: {time.time() - start_time:.0f} seconds') # print the time elapsed","3fa44cc0":"plt.plot(range(epochs), losses)\nplt.ylabel('Cross Entropy Loss')\nplt.xlabel('epoch')","85a9247b":"# TO EVALUATE THE ENTIRE TEST SET\nwith torch.no_grad():\n    y_val = model(cat_test, con_test)\n    loss = criterion(y_val, y_test)\nprint(f'CE Loss: {loss:.8f}')","6a414569":"# have a look at the first 100 predicted values\n\nrows = 100\ncorrect = 0\nprint(f'{\"MODEL OUTPUT\":26} ARGMAX  Y_TEST')\nfor i in range(rows):\n    print(f'{str(y_val[i]):26} {y_val[i].argmax():^7}{y_test[i]:^7}')\n    if y_val[i].argmax().item() == y_test[i]:\n        correct += 1\nprint(f'\\n{correct} out of {rows} = {100*correct\/rows:.2f}% correct')","e89642a0":"# Make sure to save the model only after the training has happened!\nif len(losses) == epochs:\n    torch.save(model.state_dict(), 'TaxiFareClssModel.pt')\nelse:\n    print('Model has not been trained. Consider loading a trained model instead.')","2bd7281a":"import torch\nimport torch.nn as nn\nimport numpy as np\nimport pandas as pd\n\ndef haversine_distance(df, lat1, long1, lat2, long2):\n    r = 6371\n    phi1 = np.radians(df[lat1])\n    phi2 = np.radians(df[lat2])\n    delta_phi = np.radians(df[lat2]-df[lat1])\n    delta_lambda = np.radians(df[long2]-df[long1])\n    a = np.sin(delta_phi\/2)**2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda\/2)**2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    return r * c\n\nclass TabularModel(nn.Module):\n    def __init__(self, emb_szs, n_cont, out_sz, layers, p=0.5):\n        super().__init__()\n        self.embeds = nn.ModuleList([nn.Embedding(ni, nf) for ni,nf in emb_szs])\n        self.emb_drop = nn.Dropout(p)\n        self.bn_cont = nn.BatchNorm1d(n_cont)\n        layerlist = []\n        n_emb = sum((nf for ni,nf in emb_szs))\n        n_in = n_emb + n_cont\n        for i in layers:\n            layerlist.append(nn.Linear(n_in,i)) \n            layerlist.append(nn.ReLU(inplace=True))\n            layerlist.append(nn.BatchNorm1d(i))\n            layerlist.append(nn.Dropout(p))\n            n_in = i\n        layerlist.append(nn.Linear(layers[-1],out_sz))\n        self.layers = nn.Sequential(*layerlist)\n    def forward(self, x_cat, x_cont):\n        embeddings = []\n        for i,e in enumerate(self.embeds):\n            embeddings.append(e(x_cat[:,i]))\n        x = torch.cat(embeddings, 1)\n        x = self.emb_drop(x)\n        x_cont = self.bn_cont(x_cont)\n        x = torch.cat([x, x_cont], 1)\n        return self.layers(x)","755ce9b8":"emb_szs = [(24, 12), (2, 1), (7, 4)]\nmodel2 = TabularModel(emb_szs, 6, 2, [200,100], p=0.4)","f3cec82a":"# loading the saved model in the easiest possible manner \nmodel2.load_state_dict(torch.load('TaxiFareClssModel.pt'));\nmodel2.eval() # be sure to run this step!","c6e0c90c":"Now define the model. Before we can load the saved settings, we need to setup our TabularModel with the parameters we used before (embedding sizes, number of continuous columns, output size, layer sizes, and dropout layer p-value).","55cf8195":"use \"model2\" for generating predictions on new unseen data.","2f18af58":"## Validate the model","e1c862df":"# Building, Training, Validating, Saving, Loading PyTorch ANN Classification Model.","c51e0c9e":"## Set an embedding size","5172a783":"## Plot the loss function","faed4f21":"## Save the model","4d26ecf6":"# Train the model","6dd94a01":"## Feature Engineering ","77bb521e":"## Loading a saved model (starting from scratch)\nWe can load the trained weights and biases from a saved model. If we've just opened the notebook, we'll have to run standard imports and function definitions. To demonstrate, restart the kernel before proceeding."}}