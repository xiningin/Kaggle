{"cell_type":{"8a544a66":"code","16384363":"code","b9d4f24b":"code","dfc7885c":"code","663ae3c1":"code","7f96d75c":"code","d322540b":"code","f9332521":"code","1b8d8739":"code","4cd59e02":"code","5b2f7361":"code","60521d08":"code","78d3886b":"code","d018a252":"code","f05a1667":"code","58aacc37":"code","60e90a7e":"markdown"},"source":{"8a544a66":"import pandas as pd\nimport numpy as np\nimport seaborn as sns \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom umap import UMAP\n\n","16384363":"#Creating dataframe for data.\ndata = pd.read_csv('\/kaggle\/input\/data.csv', delimiter=',',index_col=0)\nnRow, nCol = data.shape\nprint(f'There are {nRow} rows and {nCol} columns in data.')","b9d4f24b":"#Inspect first 5 rows of data.\ndata.head(5)","dfc7885c":"#Creating dataframe for labels.\nlabels = pd.read_csv('\/kaggle\/input\/labels.csv', delimiter=',')\nnRow, nCol = labels.shape\nprint(f'There are {nRow} rows and {nCol} columns in labels dataframe.')","663ae3c1":"#Inspect first 5 rows of labels.\nlabels.head(5)","7f96d75c":"#Find unique classes of cancer subtypes.\nlabels['Class'].unique()","d322540b":"#Create a 2D numpy array of values in data.\nX = data.values\nX[0:5]","f9332521":"#Standardize the features before performing dimensionality reduction, (mean=0,standard deviation =1)\nX_std = StandardScaler().fit_transform(X)","1b8d8739":"#Visualize data using Principal Component Analysis.\nprint(\"Performing Principal Component Analysis (PCA) ...\")\npca = PCA(n_components = 2).fit_transform(X_std)\npca_df = pd.DataFrame(data=pca, columns=['PC1','PC2']).join(labels)\npca_df.head(5)\npalette = sns.color_palette(\"muted\", n_colors=5)\nsns.set_style(\"white\")\nsns.scatterplot(x='PC1',y='PC2',hue='Class',data=pca_df, palette=palette, linewidth=0.2, s=30, alpha=1).set_title('PCA')","4cd59e02":"#Fitting PCA on Data\npca_std = PCA().fit(X_std)\npercent_variance=pca_std.explained_variance_ratio_*100\n\n#Plotting Cumulative Summation of the Explained Variance\nplt.figure()\nplt.plot(np.cumsum(pca_std.explained_variance_ratio_))\nplt.xlabel('Number of Components')\nplt.ylabel('Variance (%)') #for each component\nplt.title('Cancer Dataset - Cumulative Explained Variance')\nplt.show()","5b2f7361":"#Visualize data using t-SNE.\nprint(\"Performing T-Distributed Stochastic Neighbor Embedding (tSNE) ...\")\nmodel = TSNE(learning_rate = 10, n_components = 2, random_state = 123, perplexity = 30)\ntsne = model.fit_transform(X_std)\ntsne_df = pd.DataFrame(data=tsne, columns=['t-SNE1','t-SNE2']).join(labels)\npalette = sns.color_palette(\"muted\", n_colors=5)\nsns.set_style(\"white\")\nsns.scatterplot(x='t-SNE1',y='t-SNE2',hue='Class',data=tsne_df, palette=palette, linewidth=0.2, s=30, alpha=1).set_title('t-SNE')","60521d08":"#Measure execution time for t-SNE\ndef tsne_model(X):\n    model = TSNE(learning_rate = 10, n_components = 2, random_state = 123, perplexity = 30)\n    tsne = model.fit_transform(X)\n    return tsne\nfrom timeit import Timer\n  \nt = Timer(lambda: tsne_model(X_std))\nprint(t.timeit(number=1))\n","78d3886b":"#Visualize data using t-SNE after PCA.\nprint(\"Performing T-Distributed Stochastic Neighbor Embedding (tSNE) on PCA ...\")\nX_reduced = PCA(n_components =50 ).fit_transform(X_std)\nmodel = TSNE(learning_rate = 10, n_components = 2, random_state = 123, perplexity = 30)\ntsne_pca = model.fit_transform(X_reduced)\ntsne_pca_df = pd.DataFrame(data=tsne_pca, columns=['t-SNE1','t-SNE2']).join(labels)\npalette = sns.color_palette(\"muted\", n_colors=5)\nsns.set_style(\"white\")\nsns.scatterplot(x='t-SNE1',y='t-SNE2',hue='Class',data=tsne_pca_df, palette=palette, linewidth=0.2, s=30, alpha=1).set_title('t-SNE after PCA')\n","d018a252":"#Measure execution time for t-SNE after PCA\ndef tsne_model_pca(X):\n    X_reduced = PCA(n_components =50 ).fit_transform(X)\n    model = TSNE(learning_rate = 10, n_components = 2, random_state = 123, perplexity = 30)\n    tsne_pca = model.fit_transform(X_reduced)\n    return tsne_pca\nfrom timeit import Timer\n  \nt = Timer(lambda: tsne_model_pca(X_std))\nprint(t.timeit(number=1))\n\n","f05a1667":"#Visualize data using UMAP.\nprint(\"Performing Uniform Manifold Approximation and Projection (UMAP) ...\")\nmodel = UMAP(n_neighbors = 30, min_dist = 0.4, n_components = 2)\numap = model.fit_transform(X_std)\numap_df = pd.DataFrame(data=umap, columns=['UMAP1','UMAP2']).join(labels)\npalette = sns.color_palette(\"muted\", n_colors=5)\nsns.set_style(\"white\")\nsns.scatterplot(x='UMAP1',y='UMAP2',hue='Class',data=umap_df, palette=palette, linewidth=0.2, s=30, alpha=1).set_title('UMAP')\n","58aacc37":"#Measure execution time for UMAP\ndef umap(X):\n    X_reduced = PCA(n_components =50 ).fit_transform(X)\n    model = TSNE(learning_rate = 10, n_components = 2, random_state = 123, perplexity = 30)\n    tsne_pca = model.fit_transform(X)\n    return tsne_pca\nfrom timeit import Timer\n  \nt = Timer(lambda: tsne_model_pca(X_std))\nprint(t.timeit(number=1))","60e90a7e":"## Introduction\nThis kernel performs the cancer RNA-Seq data visualizations using Dimensionality Reduction techniques.  "}}