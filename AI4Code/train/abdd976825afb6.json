{"cell_type":{"f40c4632":"code","cc7c89f0":"code","ec874cdd":"code","0fc8cbbc":"code","ed1b28d5":"code","77557914":"code","23979f79":"code","a3dc889e":"code","6e7ecfd9":"code","4af8505c":"code","f929fe92":"code","d06aa20b":"code","c384a85f":"code","54843136":"code","16a4b5f2":"code","85168389":"code","2b237b77":"code","bff5d797":"code","86dc2ee0":"code","c4b354dd":"code","6b0b25b4":"code","e69d8452":"code","34a65d22":"code","73490dab":"code","00954392":"code","ab2d2df3":"code","41090908":"code","ab835f3c":"code","b6bc6e1c":"code","03a1f596":"code","e5995d28":"code","725ab29b":"code","44016043":"code","a782ade6":"code","b8b38553":"code","51513fcb":"code","1717614a":"code","4bf15a9d":"code","117b8453":"code","4df03533":"code","ae46ec6b":"code","f8060f38":"code","095a3cb9":"markdown","6c840c2b":"markdown","79efa242":"markdown","3fe95783":"markdown","4f197e58":"markdown","5bcf4614":"markdown","3a0e5eb3":"markdown","5bc9d4f0":"markdown","76cc605c":"markdown","ee854081":"markdown","f65e4fa6":"markdown","a14adcc1":"markdown","6f07b6ab":"markdown","faf305e4":"markdown","dcf2b1bd":"markdown","0a8c4ff3":"markdown","2f15f0b6":"markdown","34834235":"markdown","6b8dc318":"markdown","bac67c51":"markdown","e8e22bc1":"markdown"},"source":{"f40c4632":"from shutil import copyfile\ncopyfile(src = \"..\/input\/attention\/attention.py\", dst = \"..\/working\/attention.py\")","cc7c89f0":"from attention import AttentionLayer","ec874cdd":"import numpy as np\nimport pandas as pd \nimport re\nimport os\nimport json\nimport pickle\nfrom tqdm import tqdm\nimport glob\nimport matplotlib.pyplot as plt\nfrom bs4 import BeautifulSoup\nfrom keras.preprocessing.text import Tokenizer \nfrom keras.preprocessing.sequence import pad_sequences\nfrom nltk.corpus import stopwords\nfrom tensorflow.keras.layers import Input, LSTM, Embedding, Dense, Concatenate, TimeDistributed,Bidirectional\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport warnings\npd.set_option(\"display.max_colwidth\", 200)\nwarnings.filterwarnings(\"ignore\")","0fc8cbbc":"os.listdir('\/kaggle\/input\/cbc-news-coronavirus-articles-march-26\/')\n","ed1b28d5":"df_news = pd.read_csv('\/kaggle\/input\/cbc-news-coronavirus-articles-march-26\/news.csv',usecols=[2,5])\n","77557914":"df_news.head()","23979f79":"df_news.info()","a3dc889e":"df_news.isna().sum()","6e7ecfd9":"data = df_news[['title','text']]","4af8505c":"data.head()","f929fe92":"data.info()","d06aa20b":"from wordcloud import WordCloud, STOPWORDS\n\n# Thanks : https:\/\/www.kaggle.com\/aashita\/word-clouds-of-various-shapes ##\ndef plot_wordcloud(text, mask=None, max_words=200, max_font_size=50, figure_size=(15.0,15.0), \n                   title = None, title_size=20, image_color=False,color = None):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color=color,\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    width=800, \n                    height=400,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'black', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n    \nplot_wordcloud(data['title'].values, title=\"Word Cloud of News Title\",color = 'black')\nplot_wordcloud(data['text'].values, title=\"Word Cloud of News Text\",color = 'black')","c384a85f":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\",\n                           \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\",\n                           \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",\n                           \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\",\n                           \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n                           \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\",\n                           \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\",\n                           \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\",\n                           \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\",\n                           \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n                           \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\",\n                           \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\",\n                           \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\",\n                           \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\",\n                           \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\",\n                           \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",\n                           \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\",\n                           \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n                           \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\",\n                           \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\",\n                           \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\n                           \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\",\n                           \"you're\": \"you are\", \"you've\": \"you have\"}","54843136":"stop_words = set(stopwords.words('english')) \n\ndef text_cleaner(text,num):\n    newString = text.lower()\n    newString = BeautifulSoup(newString, \"lxml\").text\n    newString = re.sub(r'\\([^)]*\\)', '', newString)\n    newString = re.sub('\"','', newString)\n    newString = ' '.join([contraction_mapping[t] if t in contraction_mapping else t for t in newString.split(\" \")])    \n    newString = re.sub(r\"'s\\b\",\"\",newString)\n    newString = re.sub(\"[^a-zA-Z]\", \" \", newString) \n    newString = re.sub('[m]{2,}', 'mm', newString)\n    if(num==0):\n        tokens = [w for w in newString.split() if not w in stop_words]\n    else:\n        tokens=newString.split()\n    long_words=[]\n    for i in tokens:\n        if len(i)>1:                                                 #removing short word\n            long_words.append(i)   \n    return (\" \".join(long_words)).strip()","16a4b5f2":"#call the function\ncleaned_text = []\nfor t in data['text']:\n    cleaned_text.append(text_cleaner(t,0)) ","85168389":"cleaned_text[:5]  ","2b237b77":"#call the function\ncleaned_summary = []\nfor t in data['title']:\n    cleaned_summary.append(text_cleaner(t,0))","bff5d797":"cleaned_summary[:10]","86dc2ee0":"data['cleaned_text']=cleaned_text\ndata['cleaned_summary']=cleaned_summary","c4b354dd":"text_word_count = []\nsummary_word_count = []\n\n# populate the lists with sentence lengths\nfor i in data['cleaned_text']:\n      text_word_count.append(len(i.split()))\n\nfor i in data['cleaned_summary']:\n      summary_word_count.append(len(i.split()))\n\nlength_df = pd.DataFrame({'text':text_word_count, 'summary':summary_word_count})\n\nlength_df.hist(bins = 30)\nplt.show()","6b0b25b4":"data['cleaned_summary'] = data['cleaned_summary'].apply(lambda x : 'sostok '+ x + ' eostok')","e69d8452":"max_text_len=30\nmax_summary_len=8","34a65d22":"from sklearn.model_selection import train_test_split\nx_tr,x_val,y_tr,y_val=train_test_split(np.array(data['cleaned_text']),np.array(data['cleaned_summary']),test_size=0.1,random_state=0,shuffle=True) ","73490dab":"from keras.preprocessing.text import Tokenizer \nfrom keras.preprocessing.sequence import pad_sequences\n\n#prepare a tokenizer for reviews on training data\nx_tokenizer = Tokenizer() \nx_tokenizer.fit_on_texts(list(x_tr))","00954392":"thresh=4\n\ncnt=0\ntot_cnt=0\nfreq=0\ntot_freq=0\n\nfor key,value in x_tokenizer.word_counts.items():\n    tot_cnt=tot_cnt+1\n    tot_freq=tot_freq+value\n    if(value<thresh):\n        cnt=cnt+1\n        freq=freq+value\n    \nprint(\"% of rare words in vocabulary:\",(cnt\/tot_cnt)*100)\nprint(\"Total Coverage of rare words:\",(freq\/tot_freq)*100)","ab2d2df3":"#prepare a tokenizer for reviews on training data\nx_tokenizer = Tokenizer(num_words=tot_cnt-cnt) \nx_tokenizer.fit_on_texts(list(x_tr))\n\n#convert text sequences into integer sequences\nx_tr_seq    =   x_tokenizer.texts_to_sequences(x_tr) \nx_val_seq   =   x_tokenizer.texts_to_sequences(x_val)\n\n#padding zero upto maximum lengath\nx_tr    =   pad_sequences(x_tr_seq,maxlen=max_text_len, padding='post')\nx_val   =   pad_sequences(x_val_seq,maxlen=max_text_len, padding='post')\n\n#size of vocabulary ( +1 for padding token)\nx_voc   =  x_tokenizer.num_words + 1","41090908":"#prepare a tokenizer for reviews on training data\ny_tokenizer = Tokenizer()   \ny_tokenizer.fit_on_texts(list(y_tr))","ab835f3c":"thresh=6\n\ncnt=0\ntot_cnt=0\nfreq=0\ntot_freq=0\n\nfor key,value in y_tokenizer.word_counts.items():\n    tot_cnt=tot_cnt+1\n    tot_freq=tot_freq+value\n    if(value<thresh):\n        cnt=cnt+1\n        freq=freq+value\n    \nprint(\"% of rare words in vocabulary:\",(cnt\/tot_cnt)*100)\nprint(\"Total Coverage of rare words:\",(freq\/tot_freq)*100)","b6bc6e1c":"#prepare a tokenizer for reviews on training data\ny_tokenizer = Tokenizer(num_words=tot_cnt-cnt) \ny_tokenizer.fit_on_texts(list(y_tr))\n\n#convert text sequences into integer sequences\ny_tr_seq    =   y_tokenizer.texts_to_sequences(y_tr) \ny_val_seq   =   y_tokenizer.texts_to_sequences(y_val) \n\n#padding zero upto maximum length\ny_tr    =   pad_sequences(y_tr_seq, maxlen=max_summary_len, padding='post')\ny_val   =   pad_sequences(y_val_seq, maxlen=max_summary_len, padding='post')\n\n#size of vocabulary\ny_voc  =   y_tokenizer.num_words +1","03a1f596":"y_tokenizer.word_counts['sostok'],len(y_tr)","e5995d28":"ind=[]\nfor i in range(len(y_tr)):\n    cnt=0\n    for j in y_tr[i]:\n        if j!=0:\n            cnt=cnt+1\n    if(cnt==2):\n        ind.append(i)\n\ny_tr=np.delete(y_tr,ind, axis=0)\nx_tr=np.delete(x_tr,ind, axis=0)","725ab29b":"ind=[]\nfor i in range(len(y_val)):\n    cnt=0\n    for j in y_val[i]:\n        if j!=0:\n            cnt=cnt+1\n    if(cnt==2):\n        ind.append(i)\n\ny_val=np.delete(y_val,ind, axis=0)\nx_val=np.delete(x_val,ind, axis=0)","44016043":"from keras import backend as K \nK.clear_session()\n\nlatent_dim = 300\nembedding_dim=100\n\n# Encoder\nencoder_inputs = Input(shape=(max_text_len,))\n\n#embedding layer\nenc_emb =  Embedding(x_voc, embedding_dim,trainable=True)(encoder_inputs)\n\n#encoder lstm 1\nencoder_lstm1 = LSTM(latent_dim,return_sequences=True,return_state=True,dropout=0.4,recurrent_dropout=0.4)\nencoder_output1, state_h1, state_c1 = encoder_lstm1(enc_emb)\n\n#encoder lstm 2\nencoder_lstm2 = LSTM(latent_dim,return_sequences=True,return_state=True,dropout=0.4,recurrent_dropout=0.4)\nencoder_output2, state_h2, state_c2 = encoder_lstm2(encoder_output1)\n\n#encoder lstm 3\nencoder_lstm3=LSTM(latent_dim, return_state=True, return_sequences=True,dropout=0.4,recurrent_dropout=0.4)\nencoder_outputs, state_h, state_c= encoder_lstm3(encoder_output2)\n\n# Set up the decoder, using `encoder_states` as initial state.\ndecoder_inputs = Input(shape=(None,))\n\n#embedding layer\ndec_emb_layer = Embedding(y_voc, embedding_dim,trainable=True)\ndec_emb = dec_emb_layer(decoder_inputs)\n\ndecoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True,dropout=0.4,recurrent_dropout=0.2)\ndecoder_outputs,decoder_fwd_state, decoder_back_state = decoder_lstm(dec_emb,initial_state=[state_h, state_c])\n\n# Attention layer\nattn_layer = AttentionLayer(name='attention_layer')\nattn_out, attn_states = attn_layer([encoder_outputs, decoder_outputs])\n\n# Concat attention input and decoder LSTM output\ndecoder_concat_input = Concatenate(axis=-1, name='concat_layer')([decoder_outputs, attn_out])\n\n#dense layer\ndecoder_dense =  TimeDistributed(Dense(y_voc, activation='softmax'))\ndecoder_outputs = decoder_dense(decoder_concat_input)\n\n# Define the model \nmodel = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n\nmodel.summary() ","a782ade6":"#converts the integer sequence to a one-hot vector using sparse_categorical_crossentropy\nmodel.compile(optimizer='rmsprop', loss='sparse_categorical_crossentropy')","b8b38553":"es = EarlyStopping(monitor='val_loss', mode='min', verbose=1,patience=2)","51513fcb":"history=model.fit([x_tr,y_tr[:,:-1]], y_tr.reshape(y_tr.shape[0],y_tr.shape[1], 1)[:,1:] ,epochs=50,callbacks=[es],batch_size=128, validation_data=([x_val,y_val[:,:-1]], y_val.reshape(y_val.shape[0],y_val.shape[1], 1)[:,1:]))","1717614a":"from matplotlib import pyplot\npyplot.plot(history.history['loss'], label='train')\npyplot.plot(history.history['val_loss'], label='test')\npyplot.legend()\npyplot.show()","4bf15a9d":"reverse_target_word_index=y_tokenizer.index_word\nreverse_source_word_index=x_tokenizer.index_word\ntarget_word_index=y_tokenizer.word_index","117b8453":"# Encode the input sequence to get the feature vector\nencoder_model = Model(inputs=encoder_inputs,outputs=[encoder_outputs, state_h, state_c])\n\n# Decoder setup\n# Below tensors will hold the states of the previous time step\ndecoder_state_input_h = Input(shape=(latent_dim,))\ndecoder_state_input_c = Input(shape=(latent_dim,))\ndecoder_hidden_state_input = Input(shape=(max_text_len,latent_dim))\n\n# Get the embeddings of the decoder sequence\ndec_emb2= dec_emb_layer(decoder_inputs) \n# To predict the next word in the sequence, set the initial states to the states from the previous time step\ndecoder_outputs2, state_h2, state_c2 = decoder_lstm(dec_emb2, initial_state=[decoder_state_input_h, decoder_state_input_c])\n\n#attention inference\nattn_out_inf, attn_states_inf = attn_layer([decoder_hidden_state_input, decoder_outputs2])\ndecoder_inf_concat = Concatenate(axis=-1, name='concat')([decoder_outputs2, attn_out_inf])\n\n# A dense softmax layer to generate prob dist. over the target vocabulary\ndecoder_outputs2 = decoder_dense(decoder_inf_concat) \n\n# Final decoder model\ndecoder_model = Model(\n    [decoder_inputs] + [decoder_hidden_state_input,decoder_state_input_h, decoder_state_input_c],\n    [decoder_outputs2] + [state_h2, state_c2])","4df03533":"def decode_sequence(input_seq):\n    # Encode the input as state vectors.\n    e_out, e_h, e_c = encoder_model.predict(input_seq)\n    \n    # Generate empty target sequence of length 1.\n    target_seq = np.zeros((1,1))\n    \n    # Populate the first word of target sequence with the start word.\n    target_seq[0, 0] = target_word_index['sostok']\n\n    stop_condition = False\n    decoded_sentence = ''\n    while not stop_condition:\n      \n        output_tokens, h, c = decoder_model.predict([target_seq] + [e_out, e_h, e_c])\n\n        # Sample a token\n        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n        sampled_token = reverse_target_word_index[sampled_token_index]\n        \n        if(sampled_token!='eostok'):\n            decoded_sentence += ' '+sampled_token\n\n        # Exit condition: either hit max length or find stop word.\n        if (sampled_token == 'eostok'  or len(decoded_sentence.split()) >= (max_summary_len-1)):\n            stop_condition = True\n\n        # Update the target sequence (of length 1).\n        target_seq = np.zeros((1,1))\n        target_seq[0, 0] = sampled_token_index\n\n        # Update internal states\n        e_h, e_c = h, c\n\n    return decoded_sentence","ae46ec6b":"def seq2summary(input_seq):\n    newString=''\n    for i in input_seq:\n        if((i!=0 and i!=target_word_index['sostok']) and i!=target_word_index['eostok']):\n            newString=newString+reverse_target_word_index[i]+' '\n    return newString\n\ndef seq2text(input_seq):\n    newString=''\n    for i in input_seq:\n        if(i!=0):\n            newString=newString+reverse_source_word_index[i]+' '\n    return newString","f8060f38":"for i in range(0,100):\n    print(\"News Text:\",seq2text(x_tr[i]))\n    print(\"Original News summary:\",seq2summary(y_tr[i]))\n    print(\"Predicted News summary:\",decode_sequence(x_tr[i].reshape(1,max_text_len)))\n    print(\"\\n\")","095a3cb9":"# CBC News Coronavirus\/COVID-19 Articles (NLP)\n\n#### Dataset Description\n> <b> It contains the authors, the title, the publish date, the description about the story, the main story, and the url.<\/b>","6c840c2b":"<img src=\"https:\/\/global.unitednations.entermediadb.net\/assets\/mediadb\/services\/module\/asset\/downloads\/preset\/Libraries\/Graphics+Library\/29-01-2020-WHO-CoronaVirus-anim-public-advice.gif\/image1170x530cropped.jpg\" width=\"500\" height=\"500\" align=\"center\"\/>","79efa242":"# Text Data Preprocessing\n\nPerforming basic preprocessing steps is very important before we get to the model building part. Using messy and uncleaned text data is a potentially disastrous move","3fe95783":"## Building  an Abstractive News summarizer with Seq2Seq Model.","4f197e58":"Early Stopping - Our model will stop training once the validation loss increases:","5bcf4614":"Result for Inference is shown below with News Text,original summary and predicted summary","3a0e5eb3":"### References\n - [comprehensive-guide-text-summarization-using-deep-learning](https:\/\/www.analyticsvidhya.com\/blog\/2019\/06\/comprehensive-guide-text-summarization-using-deep-learning-python\/)\n - [a-quick-introduction-to-text-summarization-in-machine-learning](https:\/\/towardsdatascience.com\/a-quick-introduction-to-text-summarization-in-machine-learning-3d27ccf18a9f)\n - [Keras Text Summarizer](https:\/\/github.com\/chen0040\/keras-text-summarization)","5bc9d4f0":"Delete start and end tokens","76cc605c":"Let us look at the first five preprocessed text","ee854081":"Let us check whether word count of start token is equal to length of the training data","f65e4fa6":"We will perform the below preprocessing tasks for our data:\n\n - Convert everything to lowercase\n\n - Remove HTML tags\n\n - Contraction mapping\n\n - Remove (\u2018s)\n\n - Remove any text inside the parenthesis ( )\n\n - Eliminate punctuations and special characters\n\n -  Remove stopwords\n\n - Remove short words\n","a14adcc1":"Let us define the tokenizer with top most common words for summary.","6f07b6ab":"Let us look at the first 10 preprocessed news titles","faf305e4":"We are getting closer to the model building part. Before that, we need to split our dataset into a training and validation set. We\u2019ll use 90% of the dataset as the training data and evaluate the performance on the remaining 10% (holdout set):","dcf2b1bd":"<font color='blue'>If you find this kernel awesome and useful please hit upvote \ud83d\ude0a .<\/font> <br>\n<font color='blue'>Cheers!!!! <\/font>","0a8c4ff3":"## NLP Model Building","2f15f0b6":"Add the **START** and **END** special tokens at the beginning and end of the summary.Add tokens at begining and end of news title  \n","34834235":"## Model Inference\n\nInferencing Encoder and Decoder for getting predicted summary for title","6b8dc318":"<h1 style=\"text-align:center;font-size:200%;;\">Let's Go<\/h1>\n<img src=\"https:\/\/media.giphy.com\/media\/k75ngU7xpje0M\/source.gif\" width=\"500\" height=\"500\" align=\"center\"\/>","bac67c51":"###### Import the Libraries","e8e22bc1":"# Information about dataset\n\nLet us look at datatypes and shape of the dataset"}}