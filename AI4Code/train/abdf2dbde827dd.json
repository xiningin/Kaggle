{"cell_type":{"0f93e46c":"code","4b2bfda3":"code","6015bfaf":"code","9c8cf79a":"code","f833a33e":"code","01c4cc64":"code","eeabc85a":"code","ee87185b":"code","36beb78e":"markdown","620aab1b":"markdown","e24dc1cd":"markdown","994e1a37":"markdown","91bdde31":"markdown","59717c20":"markdown","af2e7856":"markdown","eded7e63":"markdown","23e52a74":"markdown"},"source":{"0f93e46c":"def prime_number(number):\n    if not isinstance(number, int):\n        return 'invalid argument'\n    if number < 0:\n        return \"invalid argument\"\n    if number > 5.5 * (10**7):\n        return \"argument out of range\"\n    \n    if number > 1:\n        for i in range(2,number):\n            if number % i == 0:\n                return \"not a prime number\"\n        \n        return \"prime number\"\n    else:\n        return \"not a prime number\"","4b2bfda3":"print(prime_number(409))\nprint(prime_number((5.5 * (10**7)) + 1))\nprint(prime_number(407))\nprint(prime_number('abc'))","6015bfaf":"def sum_of_products(list1, list2):\n    def check_is_number(list):\n        for i in list:\n            if not isinstance(i, int) and not isinstance(i, float):\n                return False\n        return True\n    \n    def products_elements(biggerList, smallerList):\n        for i in range(0, len(biggerList)):\n            try:\n                productsSum.append(biggerList[i] * smallerList[i])\n            except:\n                productsSum.append(biggerList[i])\n        return productsSum\n    \n    if len(list1) == 0 and len(list2) == 0:\n        return -1\n    \n    if check_is_number(list1) and check_is_number(list2):\n        productsSum = []\n        \n        if len(list1) > len(list2):\n            productsSum = products_elements(list1, list2)\n        else:\n            productsSum = products_elements(list2, list1)\n        \n        return sum(productsSum)\n    else:\n        return \"wrong number\"\n    ","9c8cf79a":"print(sum_of_products([10,20,30,40], [2,3,4]))\nprint(sum_of_products([1,2,3,4,5,6], [7,8,9,10,11,12]))\nprint(sum_of_products([], []))\nprint(sum_of_products([1,2,3], [2,3,'']))","f833a33e":"def growth_rate(population_a, population_b):\n    if not isinstance(population_a, int) or not isinstance(population_b, int):\n        return \"invalid argument\"\n    elif population_a <= 0 or population_b <= 0:\n        return \"invalid argument\"\n    \n    years = 0\n    \n    while population_a < population_b:\n        years += 1\n        population_a += population_a * 0.03\n        population_b += population_b * 0.015\n        \n    return years","01c4cc64":"print(growth_rate(90000.123, 200000))\nprint(growth_rate(90000, -20))\nprint(growth_rate(90000, 200000))","eeabc85a":"import numpy as np\n\ndef count_list(numberList):\n    d = {}\n    \n    d['max'] = max(numberList)\n    d['sum'] = sum(numberList)\n    d['occurs'] = numberList.count(numberList[0])\n    d['mean'] = np.mean(numberList)\n    \n    nearestList = []\n    for i in numberList:\n        nearestList.append(i - d['mean'])\n        \n    d['near-mean'] = nearestList.index(min(nearestList))\n    d['minus'] = sum(i for i in numberList if i < 0)\n    \n    return d","ee87185b":"print(count_list([1, 2, 7, 20, -10, 15, -20, 1, 30, 1]))","36beb78e":"## Exerc\u00edcio 3\n\n### Supondo que a popula\u00e7\u00e3o de um pa\u00eds A seja da ordem de 90.000.000 habitantes com uma taxa anual de crescimento de 3% ao ano e que a popula\u00e7\u00e3o de um pa\u00eds B seja aproximadamente de 200.000.000 habitantes com uma taxa anual de cresciemento de 1,5% ao ano\n\n### Crie uma fun\u00e7\u00e3o de nome *growth_rate* que calcule e retorne o n\u00famero de anos necess\u00e1rios para que a popula\u00e7\u00e3o do pa\u00eds A ultrapasse ou iguale a popula\u00e7\u00e3o do pa\u00eds B, mantidas essas taxas de crescimento.\n\n### Regras:\n* A fun\u00e7\u00e3o dever\u00e1 receber 2 argumentos, population_a e population_b e verificar se s\u00e3o num\u00e9ricos inteiros e maiores que zero\n* Caso um dos argumentos n\u00e3o obede\u00e7a a condi\u00e7\u00e3o acima, a fun\u00e7\u00e3o dever\u00e1 retornar a mensagem \"invalid argument\"","620aab1b":"<hr>","e24dc1cd":"## Exerc\u00edcio 2\n\n### Crie uma func\u0327a\u0303o com o nome *sum_of_products* que receba duas listas nume\u0301ricas como argumento.\n\n### Regras:\n* Verificar todo o conte\u00fado das duas listas e retornar a mensagem de erro \"wrong number\" caso algum elemento n\u00e3o seja um n\u00famero\n* A fun\u00e7\u00e3o dever\u00e1 retornar a soma dos produtos de elementos de mesmo indice de cada lista\n* Caso uma das listas tenha mais elementos que a outra, considere o valor 1 para o produto com cada elemento da lista com maior nu\u0301mero de elementos\n* Caso as duas listas estejam vazias, retornar -1.","994e1a37":"<hr>","91bdde31":"# Lista de Exerc\u00edcios 1\n\n### Esta e\u0301 a lista de exerci\u0301cios pra\u0301ticos onde sera\u0303o trabalhados conceitos apresentados e exercitados em sala de aula\n\n### Aspectos como clareza e organizac\u0327a\u0303o do co\u0301digo, comenta\u0301rios, racioci\u0301nio lo\u0301gico, coere\u0302ncia no nome de varia\u0301veis, classes e func\u0327o\u0303es, utilizac\u0327a\u0303o das estruturas mais adequadas para a soluc\u0327a\u0303o dos problemas e o funcionamento adequado sera\u0303o analisados.\n\n### Procure entender exatamente o que se pede antes de iniciar a codificac\u0327a\u0303o. Quando se sabe o que e\u0301 necessa\u0301rio fazer a codificac\u0327a\u0303o fica mais fa\u0301cil, mais eficiente e mais divertida ;-)\n\n### Fa\u00e7a o upload do notebook Jupyter completo nomeado da seguinte forma: nome_sobrenome_RA.ipynb.\n\n### Por fim, boa sorte e enjoy!","59717c20":"## Exerc\u00edcio 1\n\n### Crie uma func\u0327a\u0303o com o nome *prime_number* que recebera\u0301 um n\u00famero como argumento. \n### Regras:\n* O argumento recebido pela fun\u00e7\u00e3o dever\u00e1 ser inteiro e positivo e maior que zero, caso negativo dever\u00e1 retornar a mensagem \"invalid argument\"\n* Caso o argumento recebido seja v\u00e1lido, a fun\u00e7\u00e3o dever\u00e1 verificar se trata-se de um n\u00famero primo e caso positivo, retornar a mensagem \"prime number\", caso contr\u00e1rio \"not a prime number\"\n* O valor ma\u0301ximo que a func\u0327a\u0303o calculara\u0301 e\u0301 de 5,5 * 10^7. Caso o nu\u0301mero passado como argumento seja maior, retornar a mensagem \"argument out of range\"","af2e7856":"## Exerc\u00edcio 4\n\n### Crie uma fun\u00e7\u00e3o chamada *count_list* que receber\u00e1 uma lista de n\u00fameros como argumento.\n\n### A fun\u00e7\u00e3o dever\u00e1 retornar um *dictionary* com as seguintes informa\u00e7\u00f5es a respeito dos elementos da lista:\n* **max** - o maior elemento\n* **sum** - a soma dos elementos\n* **occurs** - o n\u00famero de ocorr\u00eancias do primeiro elemento da lista\n* **mean** - a m\u00e9dia dos elementos\n* **near-mean** - o valor mais pr\u00f3ximo da m\u00e9dia dos elementos\n* **minus** - a soma dos elementos com valor negativo","eded7e63":"<hr>","23e52a74":"<hr>"}}