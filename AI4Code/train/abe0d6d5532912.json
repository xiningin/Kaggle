{"cell_type":{"72ba3d8d":"code","5038b70d":"code","f2711199":"code","3a2d2cf6":"code","2e46dd6d":"code","2c0a6410":"code","2af7c4e7":"code","8bb14f15":"code","7c06e2cc":"code","232b20ad":"code","82b6780e":"code","c231cf71":"code","4f9782a5":"code","a19b895a":"markdown","de41dd63":"markdown","dc9e4951":"markdown","b3f40eac":"markdown","e67ce519":"markdown","757a43de":"markdown","6ba9be1d":"markdown","4f21214f":"markdown","e94f0d49":"markdown"},"source":{"72ba3d8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5038b70d":"import matplotlib.pyplot as plt\nimport PIL\nimport os\nimport tensorflow as tf","f2711199":"train_loc = \"..\/input\/alzheimers-dataset-4-class-of-images\/Alzheimer_s Dataset\/train\"\ntrain_dataset = tf.keras.preprocessing.image_dataset_from_directory(\n    train_loc,\n    validation_split = 0.3,\n    subset=\"training\",\n    image_size=(200, 200),\n    batch_size=32,\n    seed=42\n)\n\nvalid_dataset = tf.keras.preprocessing.image_dataset_from_directory(\n    train_loc, \n    validation_split = 0.3,\n    subset=\"validation\",\n    image_size=(200, 200),\n    batch_size=32,\n    seed=42\n)","3a2d2cf6":"# ND: No Dementia\n# VMID: Very Mild Dementia\n# MID: Mild Dementia\n# MOD: Moderate Dementia\n\nclasses = [\"ND\", \"VMID\", \"MID\", \"MOD\"]\n\ntrain_dataset.class_names = classes\nvalid_dataset.class_names = classes","2e46dd6d":"plt.figure(figsize=(16, 16))\nfor images, labels in train_dataset.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(train_dataset.class_names[labels[i]])\n        plt.axis(\"off\")","2c0a6410":"AUTOTUNE = tf.data.experimental.AUTOTUNE\ntrain_dataset = train_dataset.cache().prefetch(buffer_size=AUTOTUNE)\nvalid_dataset = valid_dataset.cache().prefetch(buffer_size=AUTOTUNE)","2af7c4e7":"moss = tf.keras.Sequential()\n\nmoss.add(tf.keras.applications.InceptionResNetV2(weights = 'imagenet', input_shape=(200, 200, 3), include_top=False))\n\nmoss.add(tf.keras.layers.Flatten())\n\nmoss.add(tf.keras.layers.Dense(128, activation=\"relu\"))\n\nmoss.add(tf.keras.layers.Dropout(0.5))\n\nmoss.add(tf.keras.layers.Dense(4, activation=\"softmax\"))","8bb14f15":"# Using Accuracy as my metric because I want to measure how accurately the model predicts a particular class\n# AUC is also good since this is a skewed dataset\n\nmoss.compile(optimizer = tf.keras.optimizers.Adam(1e-4), loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])","7c06e2cc":"# Making certian Layers not trainable\nfor layer in moss.layers[:-6]:\n    layer.trainable = False","232b20ad":"history = moss.fit(train_dataset, validation_data=valid_dataset, epochs=10)","82b6780e":"import pandas as pd\n\npd.DataFrame(history.history).plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0, 1)\nplt.show()","c231cf71":"test_loc = \"..\/input\/alzheimers-dataset-4-class-of-images\/Alzheimer_s Dataset\/test\"\ntest_dataset = tf.keras.preprocessing.image_dataset_from_directory(\n    test_loc,\n    image_size=(200, 200),\n    batch_size=32\n)\n\ntest_dataset = test_dataset.cache().prefetch(buffer_size=AUTOTUNE)","4f9782a5":"val = moss.evaluate(test_dataset)\nprint(val)","a19b895a":"# Optimizing Data Input","de41dd63":"# Visualizing Data","dc9e4951":"# Loading Images","b3f40eac":"# Modelling","e67ce519":"# Imports","757a43de":"# Visualizing Loss\/Accuracy","6ba9be1d":"# Testing Data","4f21214f":"Using InceptionResNetV2 as my model of choice","e94f0d49":"## Fit Data"}}