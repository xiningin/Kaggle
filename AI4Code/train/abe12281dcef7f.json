{"cell_type":{"e37759f1":"code","fc72878f":"code","e20be5d0":"code","aa77c099":"code","ee72dd79":"code","08e930c8":"markdown","923cb762":"markdown","c018f677":"markdown","ffecf541":"markdown","174aa6f2":"markdown","d48b81c1":"markdown","4b31f156":"markdown","3de2e11a":"markdown"},"source":{"e37759f1":"! pip install -q --no-deps imagededup","fc72878f":"import imagededup\nfrom imagededup.methods import PHash, CNN, DHash, WHash, AHash\nfrom imagededup.utils import plot_duplicates\n\nimport warnings\nimport pandas as pd\nimport numpy as np\nimport cv2\nimport os\nimport shutil\nfrom tqdm import tqdm\nwarnings.simplefilter(\"ignore\")","e20be5d0":"test = pd.read_csv(\"..\/input\/shopee-product-matching\/test.csv\")\nsub = pd.read_csv(\"..\/input\/shopee-product-matching\/sample_submission.csv\")\ntrain = pd.read_csv(\"..\/input\/shopee-product-matching\/train.csv\")\n\ntrain.head()","aa77c099":"%%time\ncnn = CNN()\nencodings = cnn.encode_images(image_dir=\"..\/input\/shopee-product-matching\/train_images\")\nduplicates = cnn.find_duplicates(encoding_map=encodings)","ee72dd79":"plot_duplicates(image_dir='..\/input\/shopee-product-matching\/train_images',\n                duplicate_map=duplicates,\n                filename='0cca4afba97e106abd0843ce72881ca4.jpg')","08e930c8":"That's it for now!\nAll the credits go to [Imagededup's Github repo](https:\/\/github.com\/idealo\/imagededup) for this is where I learned to do all this.\n\n**Also, I will be adding more stuff to this notebook in the future!**","923cb762":"Now here's a brief summary of what we are doing in the below cell:\n\n* We initialize a `CNN` object.\n* Generate the encodings by specifying the image directory.\n* Find the duplicates using the above encodings.\n\nNow I may-be wrong but what I understand from the below code does is that it generates encoded representations by passing every image through a pre-trained CNN (possibly Mobilenet) and then uses some sort of similarity function (like cosine similarity, etc) to find duplicates between the images.\n\nIt takes >20 minutes to do this computation since the training images are over 34,000+ in count.","c018f677":"We can also use **Perceptual Hashing (PHash), Difference Hashing (DHash), Wavelet Hashing (WHash), Average Hashing (AHash)**.\n\nBelow is the pseudo-code for above mentioned methods (it's markdown, don't try to execute it!):\n\n```python\n%%time\n\nhashing_method = PHash() or DHash() or WHash() or AHash()\n\nencodings = hashing_method.encode_images(image_dir=\"..\/input\/shopee-product-matching\/train_images\")\n\nduplicates = hashing_method.find_duplicates(encoding_map=encodings)\n```","ffecf541":"First we install the framework using the cell down below;","174aa6f2":"# Finding Similar Images using Imagededup!\n\nI found this nice framework called [`imagededup`](https:\/\/github.com\/idealo\/imagededup) which is a python package that simplifies the task of finding exact and near duplicates in an image collection which is more or less what we need to do in this competition so I decided to give it a try!\n\n* If you want, you can modify this a little and use it for submission.\n\n**You can always comment any suggestions you have down below and *upvote* the notebook if you found it helpful!**\n\n<br>\n<p style=\"color:green;\">Edit: This Notebook now uses a CNN instead of a Perceptual Hasher to do similarity matching.<\/p>","d48b81c1":"Then we run the package. It's really this simple!","4b31f156":"Then we import the package along with some other libraries (I make use of them in future commits).","3de2e11a":"After we generate the encodings and find the duplicates in the dataset, we can plot all duplicates of any given image using the below function;"}}