{"cell_type":{"5915749c":"code","a92d7ce6":"code","49a14ec9":"code","b0d2af67":"code","0d9cd4b1":"code","409cd9c3":"code","e88995c4":"code","86991d18":"code","cc050acc":"code","84cd7010":"code","97d31d56":"code","ee1be62a":"code","978f9060":"code","32ae1877":"code","8f545d14":"code","f78af693":"code","abd98fed":"code","d5e27b16":"code","f2764f8e":"code","7b889bde":"code","ad7c242a":"code","7fd907de":"code","1ac52ec2":"code","bab327df":"code","db55df74":"markdown","1c64f3d1":"markdown","10720042":"markdown","48ff45d1":"markdown","795a94d8":"markdown","629bee06":"markdown","f6a026e3":"markdown","457ec4bd":"markdown","ec64f01a":"markdown","020e80ba":"markdown","87bbb7f0":"markdown","fc62ef40":"markdown","0516a05e":"markdown","98c0f600":"markdown","7147dfad":"markdown","e573db2f":"markdown","892ee634":"markdown","cf2d0fa1":"markdown","2c356c59":"markdown","78fc9fb9":"markdown","852867c5":"markdown","dcbcab68":"markdown","68a96157":"markdown","396ca8e4":"markdown","1033a92e":"markdown","75aceee0":"markdown","8307279a":"markdown","6b8f8d5a":"markdown","34fe5a42":"markdown","0246ef11":"markdown","279e5925":"markdown"},"source":{"5915749c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a92d7ce6":"%matplotlib inline\nimport matplotlib.pyplot as plt\ndf_train = pd.read_json('..\/input\/train.json')\ndf_train.head()","49a14ec9":"plt.style.use('ggplot')\ndf_train['cuisine'].value_counts().plot(kind='bar')","b0d2af67":"from collections import Counter\ncounters = {}\nfor cuisine in df_train['cuisine'].unique():\n    counters[cuisine] = Counter()\n    indices = (df_train['cuisine'] == cuisine)\n    for ingredients in df_train[indices]['ingredients']:\n        counters[cuisine].update(ingredients)","0d9cd4b1":"counters['italian'].most_common(10)","409cd9c3":"top10 = pd.DataFrame([[items[0] for items in counters[cuisine].most_common(10)] for cuisine in counters],\n            index=[cuisine for cuisine in counters],\n            columns=['top{}'.format(i) for i in range(1, 11)])\ntop10","e88995c4":"df_train['every_ingredients'] = df_train['ingredients'].map(\";\".join)\ndf_train.head()","86991d18":"df_train['every_ingredients'].str.contains('pepper')","cc050acc":"indices = df_train['every_ingredients'].str.contains('pepper')\ndf_train[indices]['cuisine'].value_counts().plot(kind='bar',\n                                                 title='pepper as found per cuisine')","84cd7010":"import numpy as np\nunique = np.unique(top10.values.ravel())\nunique","97d31d56":"fig, axes = plt.subplots(8, 8, figsize=(20, 20))\nfor ingredient, ax_index in zip(unique, range(64)):\n    indices = df_train['every_ingredients'].str.contains(ingredient)\n    relative_freq = (df_train[indices]['cuisine'].value_counts() \/ df_train['cuisine'].value_counts())\n    relative_freq.plot(kind='bar', ax=axes.ravel()[ax_index], fontsize=7, title=ingredient)","ee1be62a":"from sklearn.feature_extraction.text import CountVectorizer","978f9060":"cv = CountVectorizer()\nX = cv.fit_transform(df_train['every_ingredients'].values)\nX.shape","32ae1877":"print(list(cv.vocabulary_.keys())[:100])","8f545d14":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()\ny = enc.fit_transform(df_train.cuisine)\ny[:100]","f78af693":"#We can check the result by inspecting the encoders classes\nenc.classes_","abd98fed":"from sklearn.cross_validation import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nfrom sklearn.linear_model import LogisticRegression\nlogistic = LogisticRegression()\nlogistic.fit(X_train, y_train)","d5e27b16":"logistic.score(X_test, y_test)","f2764f8e":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\ntree.fit(X_train, y_train)","7b889bde":"tree.score(X_test, y_test)","ad7c242a":"from sklearn.neighbors import KNeighborsClassifier\nneighbor=KNeighborsClassifier()\nneighbor.fit(X_train,y_train)","7fd907de":"neighbor.score(X_test, y_test)","1ac52ec2":"#Inspecting the classification results using a confusion matrix\nfrom sklearn.metrics import confusion_matrix\n\nplt.figure(figsize=(10, 10))\n\ncm = confusion_matrix(y_test, logistic.predict(X_test))\ncm_normalized = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\nplt.imshow(cm_normalized, interpolation='nearest')\nplt.title(\"confusion matrix\")\nplt.colorbar(shrink=0.3)\ncuisines = df_train['cuisine'].value_counts().index\ntick_marks = np.arange(len(cuisines))\nplt.xticks(tick_marks, cuisines, rotation=90)\nplt.yticks(tick_marks, cuisines)\nplt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label')","bab327df":"from sklearn.metrics import classification_report\ny_pred = logistic.predict(X_test)\nprint(classification_report(y_test, y_pred, target_names=cuisines))","db55df74":"The vectorizer has retained 3,010 ingredients and processed the 39,774 recipes in the training dataset.","1c64f3d1":"These are the first 5 ingredients found in the dataset. It seems each cuisine has different types of ingredients.","10720042":"From the graph, we see that Italian is the top most cuisine, next comes Mexican, Southern US, a little less of the other recipes.","48ff45d1":"**Objective:**\nThis project is all about predicting which country a recipe is from, given a list of its ingredient. The dataset consists of cuisine and ingredients.","795a94d8":"**Let's look at the most common ingredients for every cuisine:**","629bee06":"![](http:\/\/)**Let's train a Decision Tree Classifier on the dataset: **","f6a026e3":"This shows the different precision measurements accuracy, recall, f1 score. From the result, moroccan, thai, Vietnamese, Spanish, and Korean has higher range of prediction.   ","457ec4bd":"From the matrix, the cuisines which are really well predicted are Moroccan, Thai, greek and Indian.","ec64f01a":"**Let's plot a graph for a ingredient \"pepper\" as per cuisine.**","020e80ba":"From the result, pepper is being used mostly in Italian, Mexican, Southern_US cuisines.","87bbb7f0":"**To get a little insight into the data, we can look at a couple of recipes. In particular, we can count the most frequent ingredients for each cuisine. To do that, I am going to use Python counter objects. \n**","fc62ef40":"**Training the Models:**\nWe are going to train the data usin three different models:\n1. Logistic Regression\n2. Decision Tree classifier\n3. KNeighborsClassifier","0516a05e":"**We can do this sort of plot for all the ingredients. First let's determine the unique ingredients:**","98c0f600":"It's performance is quiet nice with the accuracy of 78%","7147dfad":"**Let\u2019s see which ingredients among the top 10 ingredients are highly specific for a certain cuisine:\n**\nA way to do this is to simply count the number of times an ingredient appears in a given cuisine and divide by the total number of recipes.\nTo do this, I first created a new column(every_ingredients) in our dataframe by simply concatenating the ingredients to a single string.\n","e573db2f":"We are going to use scikit learn to perform classification. Using count vectorizer, we need to econde our features to a matrix. Let the machine learning algorithms build the matrix with 1s and 0s when the ingredients are present.","892ee634":"**Let's find out the top cuisines:**\nHere, I am going to use value_counts to find the top cuisines. Value_counts help us to find how many and how much of these cuisines do we have.","cf2d0fa1":"Since Italian is the top most cuisine,  I have taken italian and found the most common ingredients in that particular cuisine. From the result, salt, olive oil, garlic cloves, grated parmesan cheese, garlic, ground black pepper, extra-virgin olive oil, onions, water and butter are the most common ingredients that have been used in Italian cuisine.","2c356c59":"The result shows the presence of the ingredient \"pepper\".  This can be used to analyse and group the recipes by the presence of that particular ingredient.","78fc9fb9":"These are the most common ingredients used in different cuisines.","852867c5":"**We can now check for the  presence of an ingredient in a recipe:\n**Let\u2019s take a pepper for example. This can be used to group our recipes by the presence of that ingredient.\n","dcbcab68":"It's performance is good with the accuracy of 63%.","68a96157":"**Let's train a logistic regression on the dataset: \n**We'll split the dataset so that we can also test our classifier on data.","396ca8e4":"**Continue with our best model (Logistic Regression), we are going to look at the confusion matrix, and show the similarity between predicted and True labels.**\n","1033a92e":"It's performace is not bad with the accuracy of 63%.","75aceee0":"**Data Loading and Prepocessing:**\nFirst we have to load the train dataset. The dataset has the rich variety of cuisines and ingredients. Let's have a look at the data.","8307279a":"**Let's train a KNeighborsClassifier on the dataset:**","6b8f8d5a":"Each feature gets assigned by a column number 1 or 0 depending on the presence of the ingredient.","34fe5a42":"We have our feature matrix, we still need to encode the labels that represent the cuisine of each recipe.","0246ef11":"**Let's plot for all the ingredients as per the cuisine:**","279e5925":"The figure represent the ingredients which have a high amount of uniqueness. Those are listed below:\n1. soy sauce (asian cuisine)\n2. sake (Japanese)\n3. sesame oil (asian cuisine)\n4. feta cheese crumbs (Greek)\n5. garam masala (Indian)\n6. ground ginger (Moroccan)\n7. avocado (Mexican)\n"}}