{"cell_type":{"e65f77db":"code","14294d9d":"code","1bebe60a":"code","1d76244b":"code","b703082e":"code","c3f8f611":"code","4e31cf3c":"code","f7ac5b4d":"code","45d3c021":"code","4a0cef7f":"code","5f6c43c4":"code","6a8fdac1":"markdown","59fd97f2":"markdown","7e2d860d":"markdown","cab02c84":"markdown","47f42cdd":"markdown","d674fb85":"markdown","2b1a1e24":"markdown","c66a8463":"markdown","8bf19a44":"markdown","178681dd":"markdown","e796a942":"markdown","6a9a284b":"markdown","ea6976ef":"markdown"},"source":{"e65f77db":"# Create 2 new lists height and weight\nheight = [1.87,  1.87, 1.82, 1.91, 1.90, 1.85]\nweight = [81.65, 97.52, 95.25, 92.98, 86.18, 88.45]\n#Test\n# Import the numpy package as np\nimport numpy as np\n\n# Create 2 numpy arrays from height and weight\nnp_height = np.array(height)\nnp_weight = np.array(weight)","14294d9d":"print(type(np_height))","1bebe60a":"# Calculate bmi\nbmi = np_weight \/ np_height ** 2\n\n# Print the result\nprint(bmi)","1d76244b":"# For a boolean response\nbmi > 23\n\n# Print only those observations above 23\nbmi[bmi > 23]","b703082e":"weight_kg = [81.65, 97.52, 95.25, 92.98, 86.18, 88.45]\n\nimport numpy as np\n\n# Create a numpy array np_weight_kg from weight_kg\n    \n\n# Create np_weight_lbs from np_weight_kg\n\n# Print out np_weight_lbs","c3f8f611":"dict = {\"country\": [\"Brazil\", \"Russia\", \"India\", \"China\", \"South Africa\"],\n       \"capital\": [\"Brasilia\", \"Moscow\", \"New Dehli\", \"Beijing\", \"Pretoria\"],\n       \"area\": [8.516, 17.10, 3.286, 9.597, 1.221],\n       \"population\": [200.4, 143.5, 1252, 1357, 52.98] }\n\nimport pandas as pd\nbrics = pd.DataFrame(dict)\nprint(brics)","4e31cf3c":"# Set the index for brics\nbrics.index = [\"BR\", \"RU\", \"IN\", \"CH\", \"SA\"]\n\n# Print out brics with new index values\nprint(brics)","f7ac5b4d":"# Import pandas as pd\nimport pandas as pd\n\n# Import the cars.csv data: cars\ncars = pd.read_csv(\"..\/input\/cars.csv\")\n\n# Print out cars\nprint(cars)","45d3c021":"# Import pandas and cars.csv\nimport pandas as pd\ncars = pd.read_csv(\"..\/input\/cars.csv\", index_col = 0)\n\n# Print out country column as Pandas Series\nprint(cars['cars_per_cap'])\n\n# Print out country column as Pandas DataFrame\nprint(cars[['cars_per_cap']])\n\n# Print out DataFrame with country and drives_right columns\nprint(cars[['cars_per_cap', 'country']])","4a0cef7f":"# Import cars data\nimport pandas as pd\ncars = pd.read_csv(\"..\/input\/cars.csv\", index_col = 0)\n\n# Print out first 4 observations\nprint(cars[0:4])\n\n# Print out fifth, sixth, and seventh observation\nprint(cars[4:6])","5f6c43c4":"# Import cars data\nimport pandas as pd\ncars = pd.read_csv(\"..\/input\/cars.csv\", index_col = 0)\n\n# Print out observation for Japan\nprint(cars.iloc[2])\n\n# Print out observations for Australia and Egypt\nprint(cars.loc[['AUS', 'EG']])","6a8fdac1":"## **Getting started**\n\nNumpy arrays are great alternatives to Python Lists. Some of the key advantages of Numpy arrays are that they are fast, easy to work with, and give users the opportunity to perform calculations across entire arrays.\n\nIn the following example, you will first create two Python lists. Then, you will import the numpy package and create numpy arrays out of the newly created lists.","59fd97f2":"## **Pandas DataFrames**\n\nPandas is a high-level data manipulation tool developed by Wes McKinney. It is built on the Numpy package and its key data structure is called the DataFrame. DataFrames allow you to store and manipulate tabular data in rows of observations and columns of variables.\n\nThere are several ways to create a DataFrame. One way way is to use a dictionary. For example:","7e2d860d":"Another way to create a DataFrame is by importing a csv file using Pandas. Now, the csv cars.csv is stored and can be imported using pd.read_csv:","cab02c84":"You can also use loc and iloc to perform just about any data selection operation. loc is label-based, which means that you have to specify rows and columns based on their row and column labels. iloc is integer index based, so you have to specify rows and columns by their integer index like you did in the previous exercise.","47f42cdd":"# **Numpy Arrays**","d674fb85":"Square brackets can also be used to access observations (rows) from a DataFrame. For example:","2b1a1e24":"## **Element-wise calculations**\n\nNow we can perform element-wise calculations on height and weight. For example, you could take all 6 of the height and weight observations above, and calculate the BMI for each observation with a single equation. These operations are very fast and computationally efficient. They are particularly helpful when you have 1000s of observations in your data.","c66a8463":"## **Subsetting**\n\nAnother great feature of Numpy arrays is the ability to subset. For instance, if you wanted to know which observations in our BMI array are above 23, we could quickly subset it to find out.","8bf19a44":"## **Print out the type of np_height**","178681dd":"# **Pandas Basics**","e796a942":"# **Exercise**\n\nFirst, convert the list of weights from a list to a Numpy array. Then, convert all of the weights from kilograms to pounds. Use the scalar conversion of 2.2 lbs per kilogram to make your conversion. Lastly, print the resulting array of weights in pounds.","6a9a284b":"## **Indexing DataFrames**\n\nThere are several ways to index a Pandas DataFrame. One of the easiest ways to do this is by using square bracket notation.\n\nIn the example below, you can use square brackets to select one column of the cars DataFrame. You can either use a single bracket or a double bracket. The single bracket with output a Pandas Series, while a double bracket will output a Pandas DataFrame.","ea6976ef":"As you can see with the new brics DataFrame, Pandas has assigned a key for each country as the numerical values 0 through 4. If you would like to have different index values, say, the two letter country code, you can do that easily as well."}}