{"cell_type":{"30e0fc8d":"code","6b8d1e47":"code","4f0a9628":"code","3909d761":"code","01a20ecb":"code","2b1c609a":"code","ab3aa301":"code","73efae76":"code","ad1a80cc":"code","f9388bbd":"code","c2a5f424":"code","043cbfa3":"code","36a9f703":"code","2ed50780":"code","7bd88b3c":"code","bf5ab772":"code","68ad521f":"code","4859446e":"code","38d68415":"code","4977d6f4":"code","d24b64ff":"code","55439479":"code","095df6b4":"code","524e69ea":"code","8a7aeec3":"markdown","2e22d35d":"markdown","3c087c34":"markdown","394fe912":"markdown","b6054083":"markdown","2b05eea7":"markdown"},"source":{"30e0fc8d":"import torch\nimport torchvision\nimport torch.nn as nn\nfrom tqdm.notebook import tqdm\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as T\nimport torchvision.models as models\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import make_grid\nfrom torchvision.datasets import ImageFolder","6b8d1e47":"TRAIN_DIR = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\"\nVAL_DIR = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation\"","4f0a9628":"transform_train= T.Compose([\n    T.Resize((64, 64)),\n    T.CenterCrop(64),\n    T.ToTensor()\n])\ntrain_ds = ImageFolder(root=TRAIN_DIR, transform=transform_train)","3909d761":"transform_val = T.Compose([\n    T.Resize((64,64)),\n    T.ToTensor()\n])\n\nval_ds = ImageFolder(root=VAL_DIR, transform=transform_val)","01a20ecb":"batch_size=128","2b1c609a":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size, num_workers=3, pin_memory=True)","ab3aa301":"def show_batch(train_dl):\n    for images, labels in train_dl:\n        fig, ax = plt.subplots(figsize=(8,8))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:32], nrow=8).permute(1,2,0))\n        break\n        \nshow_batch(train_dl)","73efae76":"def get_device():\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance(data, (list, tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\n\nclass DeviceDataLoader():\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for x in self.dl:\n            yield to_device(x, self.device)\n            \n    def __len__(self):\n        return len(self.dl)\n    \ndevice = get_device()\ndevice","ad1a80cc":"def accuracy(out, labels):\n    _, preds = torch.max(out, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        acc = accuracy(out, labels)\n        return {\"val_loss\": loss.detach(), \"val_acc\": acc}\n    \n    def validation_epoch_end(self,outputs):\n        batch_loss = [x[\"val_loss\"] for x in outputs]\n        epoch_loss = torch.stack(batch_loss).mean()\n        batch_acc = [x[\"val_acc\"] for x in outputs]\n        epoch_acc = torch.stack(batch_acc).mean()\n        return {\"val_loss\": epoch_loss.item(), \"val_acc\": epoch_acc.item()}\n    \n    def epoch_end(self, epoch, epochs, result):\n        print(\"Epoch: [{}\/{}], last_lr: {:.6f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n        epoch+1, epochs, result[\"lrs\"][-1], result[\"train_loss\"], result[\"val_loss\"], result[\"val_acc\"]))","f9388bbd":"class resnet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = models.resnet18(pretrained=True)\n        number_of_features = self.network.fc.in_features\n        self.network.fc = nn.Linear(number_of_features, 2)\n        \n    def forward(self, xb):\n        return self.network(xb)\n    \n    def freeze(self):\n        for param in self.network.parameters():\n            param.requires_grad=False\n        for param in self.network.fc.parameters():\n            param.requires_grad=True\n        \n    def unfreeze(self):\n        for param in self.network.parameters():\n            param.requires_grad=True","c2a5f424":"model = to_device(resnet(), device)","043cbfa3":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","36a9f703":"@torch.no_grad()\ndef evaluate(model, val_dl):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_dl]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group[\"lr\"]\n    \ndef fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, weight_decay=0,\n       grad_clip=None, opt_func=torch.optim.Adam):\n    history = []\n    \n    opt = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    sched = torch.optim.lr_scheduler.OneCycleLR(opt, max_lr, epochs=epochs,\n                                               steps_per_epoch=len(train_dl))\n    \n    for epoch in range(epochs):\n        for batch in tqdm(train_dl):\n            model.train()\n            train_loss = []\n            lrs = []\n            loss = model.training_step(batch)\n            train_loss.append(loss)\n            loss.backward()\n            \n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            \n            \n            opt.step()\n            opt.zero_grad()\n            lrs.append(get_lr(opt))\n            \n            sched.step()\n        result = evaluate(model, val_dl)\n        result[\"train_loss\"] = torch.stack(train_loss).mean().item()\n        result[\"lrs\"] = lrs\n        model.epoch_end(epoch, epochs, result)\n        history.append(result)\n    return history","2ed50780":"history = [evaluate(model, val_dl)]\nhistory","7bd88b3c":"model.freeze()","bf5ab772":"epochs = 5\nmax_lr = 10e-4\ngrad_clip = 0.1\nweight_decay = 10e-4\nopt_func = torch.optim.Adam","68ad521f":"%%time\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         weight_decay=weight_decay, grad_clip=grad_clip, \n                         opt_func=opt_func)","4859446e":"model.unfreeze()","38d68415":"%%time\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         weight_decay=weight_decay, grad_clip=grad_clip, \n                         opt_func=opt_func)","4977d6f4":"TEST_DIR = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\"","d24b64ff":"transform_test = T.Compose([\n    T.Resize((128, 128)),\n    T.ToTensor()\n])\n\ntest_ds = ImageFolder(root=TEST_DIR, transform=transform_test)","55439479":"def img_prediction(images):\n    xb = to_device(images.unsqueeze(0), device)\n    out = model(xb)\n    _, preds = torch.max(out, dim=1)\n    prediction = preds[0].item()\n    return prediction","095df6b4":"images, labels = test_ds[10]\nprint(\"Label:\", labels)\nprint(\"Predictions:\", img_prediction(images))\nplt.imshow(images.permute(1,2,0))","524e69ea":"images, labels = test_ds[50]\nprint(\"Label:\", labels)\nprint(\"Predictions:\", img_prediction(images))\nplt.imshow(images.permute(1,2,0))","8a7aeec3":"## Importing the modules","2e22d35d":"## Moving the data to the GPU","3c087c34":"# Mask detector","394fe912":"## The model","b6054083":"## Preparing the data","2b05eea7":"## Predictions"}}