{"cell_type":{"27d32b7c":"code","a5a5a140":"code","a255fd53":"code","9f852487":"code","81fa5e05":"code","ac1e265b":"code","0effcf03":"code","dd205105":"code","e3d53838":"markdown"},"source":{"27d32b7c":"import numpy as np\nimport pandas as pd\n\nimport optuna\nimport catboost as cb\nimport sklearn\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score","a5a5a140":"def get_cat_features(df):\n    cat_features_list = []\n    object_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()\n    for cf in object_cols:\n        cat_features_list.append(df.columns.get_loc(cf))\n    return cat_features_list","a255fd53":"path = '\/kaggle\/input\/geekbrains-competitive-data-analysis\/'\n\ntrain = pd.read_csv(path + \"train.csv\")\ntest = pd.read_csv(path + \"test.csv\")\ncp = pd.read_csv(path + \"client_profile.csv\")\n\nID_COLUMN = 'APPLICATION_NUMBER'\nTARGET = 'TARGET'\n\ntrain_df = train.merge(cp, on=ID_COLUMN, how='left')\ntest_df = test.merge(cp, on=ID_COLUMN, how='left')\n\nX = train_df.drop(TARGET, axis=1).fillna(-1)\ny = train_df[TARGET]\n\ncat_features = get_cat_features(X)","9f852487":"def objective(trial):\n    train_x, valid_x, train_y, valid_y = train_test_split(X, y, test_size=0.3, random_state=42)\n    \n    param = {\n        \"n_estimators\": 1000,\n        \"eval_metric\": \"AUC\",\n        \"silent\": True,\n        #Tuning\n        \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.01, 0.1),\n        \"depth\": trial.suggest_int(\"depth\", 3, 3),\n    }\n\n    gbm = cb.CatBoostClassifier(**param)\n\n    gbm.fit(train_x,\n            train_y,\n            cat_features,\n            eval_set=[(valid_x, valid_y)],\n            verbose=0,\n            early_stopping_rounds=None,\n            )\n\n    preds = gbm.predict_proba(valid_x.fillna(-1))[:, 1]\n    roc_auc = roc_auc_score(valid_y, preds)\n    return roc_auc","81fa5e05":"study = optuna.create_study(direction=\"maximize\")\nstudy.optimize(objective, n_trials=10, timeout=600)\n\nprint(\"Number of finished trials: {}\".format(len(study.trials)))\n\nprint(\"Best trial:\")\ntrial = study.best_trial\n\nprint(\"  Value: {}\".format(trial.value))\n\nprint(\"  Params: \")\nfor key, value in trial.params.items():\n    print(\"    {}: {}\".format(key, value))","ac1e265b":"cb_params = {\n        \"n_estimators\": 1000,\n        \"eval_metric\": \"AUC\",\n        \"silent\": True,\n}\n\ncb_params = {**cb_params, **trial.params}\n\n\nmodel = cb.CatBoostClassifier(**cb_params)\nmodel.fit(X, y, cat_features, plot=True)","0effcf03":"probabilities = model.predict_proba(test_df.fillna(-1))\nsubmission = pd.DataFrame({\n    ID_COLUMN: test[ID_COLUMN],\n    TARGET:     [row[1] for row in probabilities]\n})\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","dd205105":"cb_params","e3d53838":"## https:\/\/github.com\/optuna\/optuna"}}