{"cell_type":{"7daaebd3":"code","ec0805b7":"code","48f7329c":"code","1481af2a":"code","312f0ac0":"code","dbaed2fa":"code","e81ce735":"code","09febbfd":"code","a0dbfca1":"code","124f00bc":"code","26033c5d":"code","288bb3d7":"code","8e1ea8bb":"code","d359470a":"code","94a639ec":"code","1d998b34":"markdown","436a6dc8":"markdown","7608dac4":"markdown","77729c2d":"markdown","c37d0c0a":"markdown"},"source":{"7daaebd3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.layers.core import Flatten, Dense\nfrom keras.optimizers import SGD, Adam","ec0805b7":"x_train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nx_val = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\ny_train = x_train.iloc[:,0]\nx_train = x_train.iloc[:,1:]\nx_val = x_val.iloc[:,:]","48f7329c":"x_train = np.asarray(x_train)\/255.\ny_train = np.asarray(y_train)\nx_val = np.asarray(x_val)\/255.\n\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.1, random_state=42)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)\nprint(x_val.shape)","1481af2a":"num = int(np.random.rand() * (len(x_train)))\nplt.imshow(x_train[num].reshape(28,28))\ny_ = y_train[num]\nplt.title(y_)\nplt.show()","312f0ac0":"x_train = np.reshape(x_train, (len(x_train), 28, 28, 1))\nx_test = np.reshape(x_test, (len(x_test), 28, 28, 1))\nx_val = np.reshape(x_val, (len(x_val), 28, 28, 1))\n\ny_train = np_utils.to_categorical(y_train,10)\ny_test = np_utils.to_categorical(y_test,10)\n\nprint(x_train.shape)\nprint(x_test.shape)","dbaed2fa":"model = Sequential()\n\n# CONV1 Y MAX-POOLING1\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n# CONV2 Y MAX-POOLING2\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n# CONV3 Y MAX-POOLING3\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n# Aplanar, FC1, FC2 y salida\nmodel.add(Flatten())\nmodel.add(Dense(96,activation='relu'))\nmodel.add(Dense(96,activation='relu'))\nmodel.add(Dense(10,activation='softmax'))","e81ce735":"model.summary()","09febbfd":"sgd = SGD(learning_rate=0.01)\nmodel.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n\nnepochs = 30\ntam_lote = 32\nhistory = model.fit(x_train, y_train, epochs=nepochs, batch_size=tam_lote, verbose=1, shuffle=True, validation_data=(x_test, y_test))","a0dbfca1":"plt.subplots(figsize=(12,4))\nplt.subplot(121)\nplt.plot(history.history['accuracy'], c='m')\nplt.plot(history.history['val_accuracy'], c='c')\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\n\nplt.subplot(122)\nplt.plot(history.history['loss'], c='m')\nplt.plot(history.history['val_loss'], c='c')\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper right')\nplt.show()","124f00bc":"y_pred = model.predict(x_test)\ny_pred_class = np.argmax(y_pred, axis=1)\n\ny_val = model.predict(x_val)\ny_pred_val_class = np.argmax(y_val, axis=1)","26033c5d":"# test data\nnum = int(np.random.rand() * (len(x_test)))\nplt.imshow(x_test[num])\ntitle = y_pred_class[num]\nplt.title(title)\nplt.show()","288bb3d7":"# Val data\nnum = int(np.random.rand() * (len(x_val)))\nplt.imshow(x_val[num])\ntitle = y_pred_val_class[num]\nplt.title(title)\nplt.show()","8e1ea8bb":"model.evaluate(x_val, y_val)","d359470a":"# Confusion matrix\ny_test = np.argmax(y_test, axis=1)\nconfusion_matrix(y_test, y_pred_class)","94a639ec":"sample = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nimage_id = range(1, y_pred_val_class.shape[0] + 1)\n\nsubmission = pd.DataFrame({'ImageId': image_id, 'Label': y_pred_val_class})\nsubmission.to_csv('submission', index=False)","1d998b34":"View Data","436a6dc8":"Submission","7608dac4":"Load Data and Pre-processig","77729c2d":"Model","c37d0c0a":"Predict: test data and validation data"}}