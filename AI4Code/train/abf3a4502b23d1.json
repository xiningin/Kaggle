{"cell_type":{"dfe0ca46":"code","71c6df5e":"code","d1f408a4":"code","a565530e":"code","a5f1642e":"code","4dfdaf6f":"code","e7fede44":"code","4f8f5f6e":"code","7eb1d71a":"code","91cac4ee":"code","402eab8f":"code","7c9e178a":"code","13cad227":"code","7b2bf273":"code","6dde1fba":"code","113ec230":"code","75797c03":"code","6b72ac61":"code","431e72e7":"code","1b3bd990":"markdown","2fd735e5":"markdown","5ec15ff4":"markdown"},"source":{"dfe0ca46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","71c6df5e":"crime = pd.read_csv('..\/input\/crime.csv', encoding='latin-1')","d1f408a4":"crime.shape","a565530e":"crime.columns","a5f1642e":"crime.head(5)","4dfdaf6f":" #crime = crime.fillna('Unknown')\n#crime[crime[\"DISTRICT\"].str.contains(\"D14\")]","e7fede44":"# Count nulls\ncrime.isnull().sum()","4f8f5f6e":"# Remove nulls\/NANs (empty values)\ncrime = crime.drop(columns='SHOOTING')\ncrime = crime.dropna(axis=0)","7eb1d71a":"sns.countplot(data=crime, x='YEAR')","91cac4ee":"# Keep only data from complete years (2016, 2017)\ncrime = crime.loc[crime['YEAR'].isin([2016,2017])]","402eab8f":"sns.countplot(data=crime, x='MONTH')","7c9e178a":"sns.countplot(data=crime, x='DAY_OF_WEEK')","13cad227":"sns.countplot(data=crime, x='HOUR')","7b2bf273":"# Countplot for crime types\nsns.catplot(y='OFFENSE_CODE_GROUP',\n           kind='count',\n            height=8, \n            aspect=1.5,\n            order=crime.OFFENSE_CODE_GROUP.value_counts().index,\n           data=crime)","6dde1fba":"# Top 10\ncrime.OFFENSE_CODE_GROUP.value_counts().head(10)","113ec230":"# Last 5\ncrime.OFFENSE_CODE_GROUP.value_counts().tail(5)","75797c03":"from wordcloud import WordCloud\n\ntext = []\nfor i in crime.OFFENSE_CODE_GROUP:\n    text.append(i)#here we are adding word to text array but it's looking like this ['Larency','Homicide','Robbery']\ntext = ''.join(map(str, text)) #Now we make all of them like this [LarencyHomicideRobbery]\n\nwordcloud = WordCloud(width=1600, height=800, max_font_size=300).generate(text)\nplt.figure(figsize=(20,17))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","6b72ac61":"import folium\nfrom folium.plugins import HeatMap\n\nmap_hooray = folium.Map(location=[42.361145,-71.057083],\n                    zoom_start = 12, min_zoom=12) #Giving the location just write boston coordinat to google\n\nheat_df = crime[crime['YEAR']==2017] # I take 2017 cause there is more crime against to other years\nheat_df = heat_df[heat_df['OFFENSE_CODE_GROUP']=='Ballistics'] \nheat_df = heat_df[['Lat', 'Long']] #giving only latitude and longitude now in heat_df just latitude and longitude\n                                        #from 2017 larceny responde\n\nfolium.CircleMarker([42.356145,-71.064083],\n                    radius=50,\n                    popup='Homicide',\n                    color='red',\n                    ).add_to(map_hooray) #Adding mark on the map but it's hard to find correct place. \n                                         #it's take to muhc time\n    \n    \nheat_data = [[row['Lat'],row['Long']] for index, row in heat_df.iterrows()]\n#We have to give latitude and longitude like this [[lat, lon],[lat, lon],[lat, lon],[lat, lon],[lat, lon]]\n\nHeatMap(heat_data, radius=10).add_to(map_hooray) #Adding map_hooray to HeatMap\nmap_hooray #Plotting","431e72e7":"crime[['OFFENSE_CODE_GROUP', 'DISTRICT']].groupby(['DISTRICT'], as_index=False).count().sort_values(by='OFFENSE_CODE_GROUP')","1b3bd990":"# Code","2fd735e5":"This is very simple EDA we developed with my 13 yo brother.\nThe most interesting thing to do would be Poisson distribution of criminal activity by districts and determination of increased probability of criminal incidence at given time.","5ec15ff4":"# Introduction"}}