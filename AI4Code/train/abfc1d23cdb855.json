{"cell_type":{"151bbc54":"code","b53ba082":"code","3b40e4f1":"code","47b3c793":"code","16d28d5f":"code","f5b1db75":"code","54525394":"code","ca5f0fa6":"code","4f1f69c2":"code","48a3dfcc":"code","35526945":"code","723d8c8f":"code","5c8e70d8":"code","6643ff5b":"code","fca7a2da":"code","ed8b7aad":"code","3e963ada":"code","a4c9bbaa":"code","8002b7cf":"code","eb62f0e8":"code","52d85764":"code","804d17e8":"code","af46bb6c":"code","f069ea70":"code","15ecd1d7":"code","33095300":"code","d8cf300f":"code","bde37ef1":"code","d7b86b74":"code","ee174f23":"code","fca68d54":"code","01cb1109":"code","6e0763ae":"code","96d7a3e0":"code","a36966ed":"code","a7514319":"code","6a02007e":"code","376cd688":"code","f65fe019":"code","a3aaa58b":"code","d136665a":"code","7cd4a6d3":"code","d2d960bb":"code","d68576ce":"code","e825b0d1":"markdown","a5e0ef65":"markdown"},"source":{"151bbc54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b53ba082":"def plot_conf(ax, xlbl='', ylbl='', t='', back_color='#ffffff',\n              text_color='#616161', grid_color='#e9e9e9', \n              tick_color='', ticklbl_size=9, lbl_size=11, lang='en'):\n    \"\"\"\n    This function perform operations to produce better-looking \n    visualizations\n    \"\"\"\n    # changing the background color of the plot\n    ax.set_facecolor(back_color)\n    # modifying the ticks on plot axes\n    ax.tick_params(axis='both', labelcolor=text_color, color=back_color)\n    if tick_color != '':\n        ax.tick_params(axis='both', color=tick_color)\n    ax.tick_params(axis='both', which='major', labelsize=ticklbl_size)\n    # adding a grid and specifying its color\n    ax.grid(True, color=grid_color)\n    # making the grid appear behind the graph elements\n    ax.set_axisbelow(True)\n    # hiding axes\n    ax.spines['bottom'].set_color(back_color)\n    ax.spines['top'].set_color(back_color) \n    ax.spines['right'].set_color(back_color)\n    ax.spines['left'].set_color(back_color)\n    # setting the title, x label, and y label of the plot\n    if lang == 'ar':\n        ax.set_title(get_display(reshaper.reshape(t)), fontweight='bold', family='Amiri',\n                     fontsize=14, color=text_color, loc='right', pad=24);\n        ax.set_xlabel(get_display(reshaper.reshape(xlbl)), fontweight='bold', family='Amiri',\n                      labelpad=16, fontsize=lbl_size, color=text_color, fontstyle='italic');\n        ax.set_ylabel(get_display(reshaper.reshape(ylbl)), fontweight='bold', family='Amiri',\n                      color=text_color, labelpad=16, fontsize=lbl_size, fontstyle='italic');\n    else:\n        ax.set_title(t, fontsize=14, color='#616161', loc='left', pad=24, fontweight='bold');\n        ax.set_xlabel(xlbl, labelpad=16, fontsize=lbl_size, color='#616161', fontstyle='italic');\n        ax.set_ylabel(ylbl, color='#616161', labelpad=16, fontsize=lbl_size, fontstyle='italic');\n        \n        \ndef change_width(ax, new_value) :\n    for patch in ax.patches :\n        current_width = patch.get_width()\n        diff = current_width - new_value\n\n        # we change the bar width\n        patch.set_width(new_value)\n\n        # we recenter the bar\n        patch.set_x(patch.get_x() + diff * .5)\n        \ndef change_height(ax, new_value) :\n    for patch in ax.patches :\n        current_height = patch.get_height()\n        diff = current_height - new_value\n\n        # we change the bar width\n        patch.set_height(new_value)\n\n        # we recenter the bar\n        patch.set_y(patch.get_y() + diff * .5)\n        \n        \n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\npd.set_option('display.max_colwidth', None)\n\ndef highlight_max(s):\n    return ['background-color: rgba(255, 69, 00, {})'.format(x\/s.max()) if (x\/s.max()) > 0.1 else 'background-color: rgba(255, 69, 00, 0.1)' for x in s]\n\nstyles = [\n    dict(selector=\"td, th\", props=[(\"border\", \"0px solid #333\"), (\"padding\", \"6px\"), (\"max-width\", \"200px\")]),\n#     dict(selector=\"th.col_heading\", props=[(\"background\", \"#ff0000\"), (\"color\", \"#b58900\"), (\"padding\", \"10px 16px\")]),\n    dict(selector=\"th.row_heading\", props=[(\"background\", \"#E32400\"), (\"color\", \"white\"), (\"text-align\", \"left\")]),\n    dict(selector=\"tr:nth-child(even)\", props=[(\"background\", \"#EFEFEF\")]),\n    dict(selector=\"tr:nth-child(odd)\", props=[(\"background\", \"#ffffff\")]),\n    dict(selector=\".col_heading\", props=[(\"display\", \"none\")]),\n    dict(selector=\".blank.level0\", props=[(\"display\", \"none\")]),\n\n]\n\n# For word clouds\nWC_MAX_FZ = 400 \nWC_RS = 0.5\n\nTHEME_COL = '#e03531'\n\ndef rgb2lab ( inputColor ) :\n    \n    num = 0\n    RGB = [0, 0, 0]\n\n    for value in inputColor :\n        value = float(value) \/ 255\n\n        if value > 0.04045 :\n            value = ( ( value + 0.055 ) \/ 1.055 ) ** 2.4\n        else :\n            value = value \/ 12.92\n\n        RGB[num] = value * 100\n        num = num + 1\n\n    XYZ = [0, 0, 0,]\n\n    X = RGB [0] * 0.4124 + RGB [1] * 0.3576 + RGB [2] * 0.1805\n    Y = RGB [0] * 0.2126 + RGB [1] * 0.7152 + RGB [2] * 0.0722\n    Z = RGB [0] * 0.0193 + RGB [1] * 0.1192 + RGB [2] * 0.9505\n    XYZ[ 0 ] = round( X, 4 )\n    XYZ[ 1 ] = round( Y, 4 )\n    XYZ[ 2 ] = round( Z, 4 )\n\n    XYZ[ 0 ] = float( XYZ[ 0 ] ) \/ 95.047         # ref_X =  95.047   Observer= 2\u00b0, Illuminant= D65\n    XYZ[ 1 ] = float( XYZ[ 1 ] ) \/ 100.0          # ref_Y = 100.000\n    XYZ[ 2 ] = float( XYZ[ 2 ] ) \/ 108.883        # ref_Z = 108.883\n\n    num = 0\n    for value in XYZ :\n\n        if value > 0.008856 :\n            value = value ** ( 0.3333333333333333 )\n        else :\n            value = ( 7.787 * value ) + ( 16 \/ 116 )\n\n        XYZ[num] = value\n        num = num + 1\n\n    Lab = [0, 0, 0]\n\n    L = ( 116 * XYZ[ 1 ] ) - 16\n    a = 500 * ( XYZ[ 0 ] - XYZ[ 1 ] )\n    b = 200 * ( XYZ[ 1 ] - XYZ[ 2 ] )\n\n    Lab [ 0 ] = round( L, 4 )\n    Lab [ 1 ] = round( a, 4 )\n    Lab [ 2 ] = round( b, 4 )\n\n    return Lab","3b40e4f1":"import requests","47b3c793":"from matplotlib import pyplot as plt\nfrom matplotlib import ticker\nimport matplotlib.colors as mc\nimport seaborn as sns","16d28d5f":"# Data for each video\ndf_in = pd.read_csv(\"..\/input\/youtube-trending-video-dataset\/IN_youtube_trending_data.csv\")\ndf_in.info()","f5b1db75":"df_in.head(1).transpose()","54525394":"df_in.columns","ca5f0fa6":"# Total No. of videos\ndf_in.shape[0]","4f1f69c2":"# Unique trending video list\ndf_in['video_id'].unique().shape[0]","48a3dfcc":"# Null values\ndf_in.isnull().sum()","35526945":"df_in[df_in['channelTitle'].isna()].transpose()","723d8c8f":"region_code = 'IN'\nres = requests.get('https:\/\/www.googleapis.com\/youtube\/v3\/videoCategories?part=snippet'\n                   '&hl=en_US&regionCode={}&key=AIzaSyB5q7V0vH_PARhH9BhaO63fuGh6Xk-kzrM'\n                   .format('US'))\ncategories = res.json()[\"items\"]\ncat_dict = {}\nfor cat in categories:\n    cat_dict[int(cat[\"id\"])] = cat[\"snippet\"][\"title\"]\ndf_in['category'] = df_in['categoryId'].map(cat_dict)\ndf_in.drop('categoryId', axis=1, inplace=True)","5c8e70d8":"df_in.head(1).transpose()","6643ff5b":"# Min. views recorded in trending videos\n\ndf_in['view_count'].min()","fca7a2da":"# Max. views recorded in trending videos\n\ndf_in['view_count'].max()","ed8b7aad":"# No. of videos with 0 views\n\ndf_in[df_in['view_count'] == 0].shape[0]","3e963ada":"# No. of unique videos with 0 views\n\ndf_in[df_in['view_count'] == 0]['video_id'].unique().shape[0]","a4c9bbaa":"# List of videos with 0 views\n\ndf_temp = df_in[df_in['view_count'] == 0]\ndf_temp.drop_duplicates(subset='title', keep=\"last\")","8002b7cf":"# trending video with max. views\n\ndf_in[df_in['view_count'] == df_in['view_count'].max()].transpose()","eb62f0e8":"# Avg. views of trending videos \n\ndf_in[\"view_count\"].mean()","52d85764":"fig, ax = plt.subplots(figsize=(14,8))\nsns.stripplot(df_in['view_count'], alpha=0.1,color= '#000000',ax=ax);\nplot_conf(ax, xlbl='Number of views', ticklbl_size=11, lbl_size=12)\nformatter = ticker.FuncFormatter(func=lambda x,y: '{:.0f}M'.format(x\/1e6))\nax.xaxis.set_major_formatter(formatter)","804d17e8":"\nax = df_in['view_count'].plot(kind='hist', bins=np.arange(0, 280e6, 10e6)-0.5, figsize=(16,8), \n                           logy=True, lw=1, ec='lightgray', color=THEME_COL);\nplot_conf(ax, xlbl='Number of views', ylbl='Number of videos', ticklbl_size=11, lbl_size=12)\nformatter = ticker.FuncFormatter(func=lambda x,y: '{:.0f}M'.format(x\/1e6))\nax.xaxis.set_major_locator(ticker.MultipleLocator(20000000))\nax.xaxis.set_major_formatter(ticker.FuncFormatter(formatter));\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter(fmt='{x:,.0f}'))\nplt.tight_layout()","af46bb6c":"# Percentage of videos with less than 10M views\n\ndf_in[df_in['view_count'] < 10_000_000].shape[0] \/ df_in.shape[0] * 100","f069ea70":"# Percentage of videos with less than 100M views\n\ndf_in[df_in['view_count'] < 100_000_000].shape[0] \/ df_in.shape[0] * 100","15ecd1d7":"# Trending videos with most views\n\ndf_in.sort_values(by='view_count', ascending=False).drop_duplicates(subset=['video_id']).head()","33095300":"# Trending videos with most views\n\ndf_temp = (df_in[df_in['view_count'] >= 0].sort_values(by='view_count', ascending=True).drop_duplicates(subset=['video_id']).head(5))\n#df_temp.drop('description',inplace=True)\ndf_temp.drop('description',axis='columns', inplace=True)\ndf_temp.drop('tags',axis='columns', inplace=True)\ndf_temp","d8cf300f":"# Views of trending videos when entering the trending list\n\ndf_entry = df_in.drop_duplicates(subset=['video_id'])\n\nax = df_entry['view_count'].plot(kind='hist', figsize=(14,8), bins=40, logy=True, color=THEME_COL,\n                            lw=1, ec='lightgray')\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'));\ndef millions(x, pos):\n    return '{}M'.format(int(x \/ 1000000))\nax.xaxis.set_major_locator(ticker.MultipleLocator(10000000))\nax.xaxis.set_major_formatter(ticker.FuncFormatter(millions));\n\nplot_conf(ax, xlbl='Number of views', ylbl='Number of videos', ticklbl_size=11, lbl_size=12)\nplt.tight_layout()","bde37ef1":"#Top Categories of Trending Videos\nfig, ax = plt.subplots(figsize=(14,8))\ntdf = df_in['category'].value_counts(sort=True, ascending=False)\nsns.barplot(tdf.values, tdf.index.values, hue=tdf.values, orient='h', \n            palette=reversed(sns.color_palette('autumn', n_colors=15)[:]), \n            dodge=False, ax=ax)\nax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\nplot_conf(ax, xlbl='Number of videos', ylbl='Category', ticklbl_size=11, lbl_size=12)\nax.get_legend().remove()\nplt.tight_layout()\n","d7b86b74":"tdf","ee174f23":"#Channels with Most Trending Videos\ntdf = df_in.groupby(\"channelTitle\").size().reset_index(name=\"video_count\") \\\n    .sort_values(\"video_count\", ascending=False).head(19)\nfig, ax = plt.subplots(figsize=(14,10))\nsns.barplot(x=\"video_count\", y=\"channelTitle\", data=tdf,\n            palette=sns.color_palette('gist_heat', n_colors=25)[3:], ax=ax);\nplot_conf(ax, xlbl='Number of videos', ylbl='Channel', ticklbl_size=11, lbl_size=12)\nplt.tight_layout()\n","fca68d54":"#Trending Videos and Likes... and Dislikes\nax = df_in['likes'].plot(kind='hist', bins=np.arange(0, 9e6, 2.5e5)-0.5, figsize=(16,8), \n                           logy=True, lw=1, ec='lightgray', color=THEME_COL);\nplot_conf(ax, xlbl='Number of likes', ylbl='Number of videos', ticklbl_size=11, lbl_size=12)\nformatter = ticker.FuncFormatter(func=lambda x,y: '{:.1f}M'.format(x\/1e6))\nax.xaxis.set_major_locator(ticker.MultipleLocator(500000))\nax.xaxis.set_major_formatter(ticker.FuncFormatter(formatter));\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter(fmt='{x:,.0f}'))\nplt.tight_layout()\n","01cb1109":"#total percentage of trending video likes which are less than 500K\ndf_in[df_in['likes'] < 500_000].shape[0] \/ df_in.shape[0] * 100","6e0763ae":"# total percentage of trending video likes which are less than 100k\ndf_in[df_in['likes'] < 100_000].shape[0] \/ df_in.shape[0] * 100","96d7a3e0":"df_in.sort_values(by='likes', ascending=False).drop_duplicates(subset=['video_id']).head()","a36966ed":"#Dislikes distribution\nax = df_in['dislikes'].plot(kind='hist', bins=np.arange(0, 8.5e6, 2.5e5)-0.5, figsize=(16,8), \n                           logy=True, lw=1, ec='lightgray', color=THEME_COL);\nplot_conf(ax, xlbl='Number of dislikes', ylbl='Number of videos', ticklbl_size=11, lbl_size=12)\nformatter = ticker.FuncFormatter(func=lambda x,y: '{:.1f}M'.format(x\/1e6))\nax.xaxis.set_major_locator(ticker.MultipleLocator(500000))\nax.xaxis.set_major_formatter(ticker.FuncFormatter(formatter));\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter(fmt='{x:,.0f}'))\nplt.tight_layout()\n","a7514319":"# total percentage of trending video dislikes which are less than 100k\ndf_in[df_in['dislikes'] < 100_000].shape[0] \/ df_in.shape[0] * 100","6a02007e":"#total percentage of trending video likes which are less than 10k\ndf_in[df_in['dislikes'] < 10_000].shape[0] \/ df_in.shape[0] * 100","376cd688":"df_in.sort_values(by='dislikes', ascending=False).drop_duplicates(subset=['video_id']).head()","f65fe019":"#Trending Videos Descriptions\n#Distribution of description lengths\ndesc_lengths = df_in[\"description\"].apply(lambda x: 0 if pd.isnull(x) else len(x))\nfig, ax = plt.subplots(figsize=(14,8))\nsns.boxplot(desc_lengths, color=THEME_COL, medianprops={'color': '#FBA91A'}, ax=ax)\nplot_conf(ax, xlbl='Description length (in characters)', ticklbl_size=11, lbl_size=12)\nax.xaxis.set_major_locator(ticker.MultipleLocator(500))\nplt.tight_layout()","a3aaa58b":"desc_lengths.describe()","d136665a":"# treading videos with no discription\ndesc_lengths[desc_lengths == 0].shape[0]","7cd4a6d3":"# percentage of treading videos with greater than 3000 char discription\ndesc_lengths[desc_lengths > 3000].shape[0] \/ df_in.shape[0] * 100","d2d960bb":"desc_lengths.quantile(q=0.95)","d68576ce":"desc_lengths.quantile(q=0.9)","e825b0d1":"**Views and Trending videos**","a5e0ef65":"**Distribution of Trending Videos Views**"}}