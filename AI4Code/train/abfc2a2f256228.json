{"cell_type":{"d5f35425":"code","4bbbab12":"code","d411c077":"code","7e221b99":"code","dfa28b64":"code","abdfbd41":"code","b13947d8":"code","5ff3cb12":"code","9add5c1e":"code","82d2475b":"code","2bd974e1":"code","03f351a2":"code","6b4156ce":"code","42cdfdf0":"code","c1cac415":"code","a40e552e":"code","6349af76":"code","a671fce1":"code","7c304635":"code","43f389e6":"code","3649ade2":"code","3146e8b6":"code","f7463344":"code","c703d185":"code","6021e1ae":"code","3ff2d049":"code","7e3c0957":"code","3e7df492":"code","a8b76349":"code","71999382":"code","f4bb90bc":"code","0ea0a698":"code","028edcd1":"code","484998d8":"code","f78d0cfb":"code","577c6395":"code","b457ad97":"code","5d1a7119":"code","950e3d71":"code","e937763f":"code","73994065":"code","96a9082b":"code","02f96259":"code","cf255b89":"code","e134c339":"code","21528a44":"code","2dcbbebc":"markdown","54b38c68":"markdown","99ed8db6":"markdown","22e2f9c3":"markdown","b6aa6070":"markdown","930a70c1":"markdown","1c0922dd":"markdown","0641a764":"markdown","40cfdb48":"markdown","0d2effba":"markdown","eb4fd21f":"markdown","9e5d7153":"markdown","acea9111":"markdown","863a2ae8":"markdown","f100ea24":"markdown","b796cb2f":"markdown","1a308e81":"markdown","853d2097":"markdown","babdd986":"markdown"},"source":{"d5f35425":"# Things to use\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","4bbbab12":"# Some constants\ndata_dir = \"..\/input\/santa-workshop-tour-2019\/\"\nfamily_file = \"family_data.csv\"\n\nNDAYS = 100\nNFAMS = 5000\nMAX_PPL = 300\nMIN_PPL = 125\n\n# The family preference cost parameters\nPENALTY_CONST = [0, 50, 50, 100, 200, 200, 300, 300, 400, 500, 500]\nPENALTY_PPL = [0, 0, 9, 9, 9, 18, 18, 36, 36, 199+36, 398+36]\n\n# The seed is set once here at beginning of notebook.\nRANDOM_SEED = 127\nnp.random.seed(RANDOM_SEED)","d411c077":"# Define the family_cost function\ndef family_cost(ichoice, nppl):\n    global PENALTY_CONST, PENALTY_PPL\n    return PENALTY_CONST[ichoice] + nppl*PENALTY_PPL[ichoice]","7e221b99":"# Show the cost-per-person in matrix form\n# Note that higher choice values can give lower per-person cost.\n# Also created a dictionary mapping the choice-nppl tuple to cost_pp.\ncost_pp_dict = {}\nprint(\"    Cost per Person\")\nprint(\"\\n       nppl= 2       3       4       5       6       7       8\\nichoice\")\n# choices are 0 to 10\nfor ichoice in range(11):\n    # numbers of people in a family are 2 to 8:\n    choice_str = str(ichoice).rjust(5)+\":\"\n    for nppl in range(2,9):\n        cost_pp = family_cost(ichoice, nppl)\/nppl\n        cost_pp_dict[(ichoice,nppl)] = cost_pp\n        choice_str = choice_str + str(int(cost_pp)).rjust(8)\n    print(choice_str)","dfa28b64":"# Can use the cost_pp_dict to go through the ichoice, nppl combinations,\n# in order from least to greatest cost-per-person, if that's useful.\n# (Didn't use this, put values in by hand below.)\nif False:\n    sorted_cost_pp = sorted(cost_pp_dict.items(), key = \n             lambda kv:(kv[1], kv[0]))\n    for ich_nppl in sorted_cost_pp:\n        ichoice = ich_nppl[0][0]\n        nppl = ich_nppl[0][1]\n        print(ichoice,nppl)","abdfbd41":"# Define the accounting cost function\ndef accounting_cost(people_count):\n    # people_count[iday] is an array of the number of people each day,\n    # valid for iday=1 to NDAYS (iday=0 not used).\n    day_costs = np.zeros(NDAYS+1)\n    total_cost = 0.0\n    ppl_yester = people_count[NDAYS]\n    for iday in range(NDAYS,0,-1):\n        ppl_today = people_count[iday]\n        ppl_delta = np.abs(ppl_today - ppl_yester)\n        day_cost = (ppl_today - 125)*(ppl_today**(0.5+ppl_delta\/50.0))\/400.0\n        day_costs[iday] = day_cost\n        total_cost += day_cost\n        ##print(\"Day {}: delta = {}, $ {}\".format(iday, ppl_delta, int(day_cost)))\n        # save for tomorrow\n        ppl_yester = people_count[iday]\n    print(\"Total accounting cost: {:.2f}.  Ave costs:  {:.2f}\/day,  {:.2f}\/family\".format(\n        total_cost,total_cost\/NDAYS,total_cost\/NFAMS))\n    return total_cost, day_costs\n\n# Test it with several test cases\n# Constant 210, cost should be 3.08\/day\n##people_count = 210 + np.zeros(101)\n# Alternate 210 +\/-25 = 185, 235. Should be ~ 674\/day\n##people_count = (210 + 25*np.cos(np.pi*np.arange(0,102))).astype(int)\n# Alternate 210 +\/-50 = 160, 260. Should be ~ 194,000\/day\n##people_count = (210 + 50*np.cos(np.pi*np.arange(0,102))).astype(int)\n#\n##accounting = accounting_cost(people_count)","b13947d8":"# Define the Gift Shop Metric and Profit Factor\ngsp_profit_factor = 25.0\ndef gsp_metric(diff_value):\n    return 126.0\/(diff_value**3 + 125.0)","5ff3cb12":"# Read in the data\ndf_family = pd.read_csv(data_dir+family_file)\n# The \"choice_\" column headings use a lot of room, change to \"ch_\"\nthe_columns = df_family.columns.values\nfor ich in range(10):\n    the_columns[ich+1] = \"ch_\"+str(ich)\ndf_family.columns = the_columns","9add5c1e":"df_family.head(5)","82d2475b":"# Total number of people\ntotal_people  = df_family['n_people'].sum()\n# and average per day:\nave_ppl_day = int(total_people \/ NDAYS)\nprint(\"Total number of people visiting is {}, about {} per day\".format(total_people, ave_ppl_day))","2bd974e1":"# Add an assigned day column, inititalize it to -1 (not assigned)\ndf_family['assigned_day'] = -1\n# \ndf_family.tail(5)","03f351a2":"# As the results of v1-v3 showed, there are certain days that are less subscribed than others.\n\n# Show the distribution of each choice's days\n##for ichoice in range(10):\ndf_family[['ch_0','ch_1','ch_2','ch_3',\n           'ch_4','ch_5','ch_6','ch_7','ch_8','ch_9']].hist(bins=100,figsize=(12,8),\n                                sharex=True,sharey=True)\nplt.show()\n\n# Yes, all choices have similar behavior and 6 low regions above day 60 will be hardest to fill.","6b4156ce":"# Create a buddy_id column to record any buddy family pairs,\n# also save the day that the buddies share.\ndf_family['buddy_id'] = -1\ndf_family['buddy_day'] = -1\n\n# Go through the days, look for buddies pairs.\n# Criteria for being a buddy (besides on the same day)\n#   family_ids within:\nmax_buddy_diff = 3     # using 3,  or 0 for no buddies\n#   and the same choice value.\n\nfor iday in range(1,NDAYS+1):\n    # Select families to consider buddying-up\n    select_fams = df_family[(df_family['buddy_day'] < 0) & \n                (  ((df_family['ch_1'] == iday) & (df_family['n_people'] >= 2)) |\n                ((df_family['ch_2'] == iday) & (df_family['n_people'] >= 3)) |\n             ((df_family['ch_3'] == iday) & (df_family['n_people'] >= 6))  ) ]\n    \n    num_fams = len(select_fams)\n    ##print(\"Day {}: {} families\".format(iday,num_fams))\n    # Look for ones that are close in family_id:\n    fam_ids = select_fams['family_id'].values\n    # the differences between ids:\n    diff_ids = -1 + 0*fam_ids\n    diff_ids[1:] = fam_ids[1:] - fam_ids[0:-1]\n    diff_ids[0] = fam_ids[0] + NFAMS - fam_ids[-1]\n    ##print(fam_ids, \"\\n\", diff_ids)\n    # Find ones that have the desired difference:\n    for idiff, diff in enumerate(diff_ids):\n        if diff <= max_buddy_diff:\n            ##print(diff, fam_ids[idiff], fam_ids[idiff]-diff)\n            # Assign these as each others buddy\n            # watch for wrap-around of the lower buddy id\n            buddy_low = fam_ids[idiff]-diff\n            if buddy_low < 0:\n                buddy_low += NFAMS\n            df_family.loc[fam_ids[idiff],'buddy_id'] = buddy_low\n            df_family.loc[buddy_low,'buddy_id'] = fam_ids[idiff]\n            # and the day\n            df_family.loc[fam_ids[idiff],'buddy_day'] = iday\n            df_family.loc[buddy_low,'buddy_day'] = iday","42cdfdf0":"print(\"Total familes that are buddied-up: {}\".format(sum(df_family['buddy_id'] >= 0)))","c1cac415":"# (v1) Random scheduling\nif False:\n    sched_method = \"Random\"\n    # Select a random day, 1 to 100, for each family\n    df_family['assigned_day'] = np.random.choice(1+np.arange(NDAYS), size=NFAMS, replace=True)\n    ","a40e552e":"# (v7) As v6 but assign (any) buddy familes together.\nif True:\n    sched_method = 'MsClausBuddies'\n    \n    # Reset the assignements and the people_count_m1 array:\n    df_family['assigned_day'] = -1\n    people_count_m1 = np.zeros(NDAYS)\n    \n    # Output columns when printing buddy information\n    buddy_cols = ['family_id','ch_0','ch_1','ch_2','n_people','assigned_day','buddy_id','buddy_day']","6349af76":"if True:    \n    print(\"\\n\\nFilling the above-55 low-request ('mid-week') days ...\\n\")\n    # First, assign the lower-requested days.\n    # The low-people days are every 4 out of 7.\n    # The 6 low regions above day 60 are:\n    lower_days = [55,56,57,58, 62,63,64,65, 69,70,71,72, 76,77,78,79, 83,84,85,86, 90,91,92,93, 97,98,99,100]\n    \n    max_ppl_day = 126\n    \n    # Set the desired cost-per-person limit by specifying:\n    # i) specific choice to use, and ii) a minimum number of people (inclusive)\n    ichs =      [0,1,2,1,2,3,2,3,3,1,2,4,3,4] #,5,4,5,6, 5,4,3,6,5,7,4,6,7] #,8,7,4,8,5,6,7,8,6,7,8,8,9,9]\n    nppl_mins = [0,4,7,3,4,7,3,6,4,0,0,7,3,6] #,7,5,6,8, 5,4,0,6,4,8,3,5,7] #,7,5,0,6,0,3,3,4,0,0,3,0,7,0]\n    # for printing out info\n    for icost in range(len(ichs)):\n        ich = ichs[icost]\n        ich_str = 'ch_'+str(ich)\n        nppl_min = nppl_mins[icost]\n        \n        print(\" - - - - - - - Doing \",ich_str,\"  nppl >=\",nppl_min,\" - - - - - - -\")\n        # Go though the families and assign ones that meet the criteria\n        for ifam in df_family.index:\n            day_ich = df_family.loc[ifam,ich_str]\n            nppl = df_family.loc[ifam,'n_people']\n            if ((df_family.loc[ifam,'assigned_day'] < 0) and\n                    (day_ich in lower_days) and (nppl >= nppl_min) and\n                    (people_count_m1[day_ich-1] < max_ppl_day)):\n                ##print(ifam,day_ich,nppl,sum(people_count_m1))\n                # OK, got one. Assign it:\n                df_family.loc[ifam,'assigned_day'] = day_ich\n                # and keep track of the people count:\n                people_count_m1[day_ich-1]  += df_family.loc[ifam,'n_people']\n                #\n                # - Does this family have a Buddy family? and\n                # - Is this day the buddy day? and\n                # - Is the buddy family not already assigned?\n                # That's a lot of ands ;-)\n                if ((df_family.loc[ifam,'buddy_id'] >= 0) and\n                        (df_family.loc[ifam,'buddy_day'] == day_ich)):\n                    # assign the buddy family here if not already assigned\n                    buddy_fam = df_family.loc[ifam,'buddy_id']\n                    if (df_family.loc[buddy_fam,'assigned_day'] < 0):\n                        ##print(\"\\nAssigning Buddy!\")                    \n                        df_family.loc[buddy_fam,'assigned_day'] = day_ich\n                        people_count_m1[day_ich-1]  += df_family.loc[buddy_fam,'n_people']\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                    else:\n                        pass\n                        ##print(\"\\nBuddy, but not assigned.\")\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                        \n        print(\"Total assigned families = \",sum(df_family['assigned_day'] > 0),\n             \" and people =\",sum(people_count_m1),\"\\n\")","a671fce1":"if True:\n    print(\"\\n\\nFilling the above-55 TRANSITION low-request days ...\\n\")\n    # The \"transition\" days are the beginning and end of the 4-day low-demand regions\n    lower_days = [55,58, 62,65, 69,72, 76,79, 83,86, 90,93, 97,100]\n    # Fill these to a higher level:\n    \n    max_ppl_day = 126 + 32\n    \n    # Set the desired cost-per-person limit by specifying:\n    # i) specific choice to use, and ii) a minimum number of people (inclusive)\n    ichs =      [0,1,2,1,2,3,2,3,3,1,2,4,3,4] #,5,4,5,6, 5,4,3,6,5,7,4,6,7] #,8,7,4,8,5,6,7,8,6,7,8,8,9,9]\n    nppl_mins = [0,4,7,3,4,7,3,6,4,0,0,7,3,6] #,7,5,6,8, 5,4,0,6,4,8,3,5,7] #,7,5,0,6,0,3,3,4,0,0,3,0,7,0]\n    for icost in range(len(ichs)):\n        ich = ichs[icost]\n        ich_str = 'ch_'+str(ich)\n        nppl_min = nppl_mins[icost]\n        \n        print(\" - - - - - - - Doing \",ich_str,\"  nppl >=\",nppl_min,\" - - - - - - -\")\n        # Go though the families and assign ones that meet the criteria\n        for ifam in df_family.index:\n            day_ich = df_family.loc[ifam,ich_str]\n            nppl = df_family.loc[ifam,'n_people']\n            if ((df_family.loc[ifam,'assigned_day'] < 0) and\n                    (day_ich in lower_days) and (nppl >= nppl_min) and\n                    (people_count_m1[day_ich-1] < max_ppl_day)):\n                ##print(ifam,day_ich,nppl,sum(people_count_m1))\n                # OK, got one. Assign it:\n                df_family.loc[ifam,'assigned_day'] = day_ich\n                # and keep track of the people count:\n                people_count_m1[day_ich-1]  += df_family.loc[ifam,'n_people']\n                #\n                # - Does this family have a Buddy family? and\n                # - Is this day the buddy day? and\n                # - Is the buddy family not already assigned?\n                # That's a lot of ands ;-)\n                if ((df_family.loc[ifam,'buddy_id'] >= 0) and\n                        (df_family.loc[ifam,'buddy_day'] == day_ich)):\n                    # assign the buddy family here if not already assigned\n                    buddy_fam = df_family.loc[ifam,'buddy_id']\n                    if (df_family.loc[buddy_fam,'assigned_day'] < 0):\n                        ##print(\"\\nAssigning Buddy!\")                    \n                        df_family.loc[buddy_fam,'assigned_day'] = day_ich\n                        people_count_m1[day_ich-1]  += df_family.loc[buddy_fam,'n_people']\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                    else:\n                        pass\n                        ##print(\"\\nBuddy, but not assigned.\")\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                \n        print(\"Total assigned families = \",sum(df_family['assigned_day'] > 0),\n             \" and people =\",sum(people_count_m1),\"\\n\")","7c304635":"if True:    \n    print(\"\\n\\nFilling the below-59 low-request ('mid-week') days ...\\n\")\n    # First, assign the lower-requested days.\n    # The low-people days are every 4 out of 7.\n    # The below-51 low-request days:\n    lower_days = [2, 6,7,8,9, 13,14,15,16, 20,21,22,23, 27,28,29,30, \n                               34,35,36,37, 41,42,43,44, 48,49,50,51, 55,56,57,58]\n    # will fill these to some minimum:\n    \n    max_ppl_day = 210 - 15\n    \n    # Set the desired cost-per-person limit by specifying:\n    # i) specific choice to use, and ii) a minimum number of people (inclusive)\n    ichs =      [0,1,2,1,2,3,2,3,3,1,2,4,3,4] #,5,4,5,6, 5,4,3,6,5,7,4,6,7] #,8,7,4,8,5,6,7,8,6,7,8,8,9,9]\n    nppl_mins = [0,4,7,3,4,7,3,6,4,0,0,7,3,6] #,7,5,6,8, 5,4,0,6,4,8,3,5,7] #,7,5,0,6,0,3,3,4,0,0,3,0,7,0]\n    for icost in range(len(ichs)):\n        ich = ichs[icost]\n        ich_str = 'ch_'+str(ich)\n        nppl_min = nppl_mins[icost]\n        \n        print(\" - - - - - - - Doing \",ich_str,\"  nppl >=\",nppl_min,\" - - - - - - -\")\n        # Go though the families and assign ones that meet the criteria\n        for ifam in df_family.index:\n            day_ich = df_family.loc[ifam,ich_str]\n            nppl = df_family.loc[ifam,'n_people']\n            if ((df_family.loc[ifam,'assigned_day'] < 0) and\n                    (day_ich in lower_days) and (nppl >= nppl_min) and\n                    (people_count_m1[day_ich-1] < max_ppl_day)):\n                ##print(ifam,day_ich,nppl,sum(people_count_m1))\n                # OK, got one. Assign it:\n                df_family.loc[ifam,'assigned_day'] = day_ich\n                # and keep track of the people count:\n                people_count_m1[day_ich-1]  += df_family.loc[ifam,'n_people']\n                #\n                # - Does this family have a Buddy family? and\n                # - Is this day the buddy day? and\n                # - Is the buddy family not already assigned?\n                # That's a lot of ands ;-)\n                if ((df_family.loc[ifam,'buddy_id'] >= 0) and\n                        (df_family.loc[ifam,'buddy_day'] == day_ich)):\n                    # assign the buddy family here if not already assigned\n                    buddy_fam = df_family.loc[ifam,'buddy_id']\n                    if (df_family.loc[buddy_fam,'assigned_day'] < 0):\n                        ##print(\"\\nAssigning Buddy!\")                    \n                        df_family.loc[buddy_fam,'assigned_day'] = day_ich\n                        people_count_m1[day_ich-1]  += df_family.loc[buddy_fam,'n_people']\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                    else:\n                        pass\n                        ##print(\"\\nBuddy, but not assigned.\")\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])    \n            \n        print(\"Total assigned families = \",sum(df_family['assigned_day'] > 0),\n             \" and people =\",sum(people_count_m1),\"\\n\")","43f389e6":"if True:\n    print(\"\\n\\nFilling the below-51 TRANSITION low-request days ...\\n\")\n    # The \"transition\" days are the beginning and end of the 4-day low-demand regions\n    lower_days = [2, 6,9, 13,16, 20,23, 27,30, 34,37, 41,44, 48,51, 55,58]   #, 55,58]\n    # Fill these to a higher level than the middle 2 days:\n    \n    max_ppl_day = 210 + 20\n    # Special case for day 2 since day 1 and 3 are always large\n    max_ppl_day2 = 210 + 35\n    \n    # Set the desired cost-per-person limit by specifying:\n    # i) specific choice to use, and ii) a minimum number of people (inclusive)\n    ichs =      [0,1,2,1,2,3,2,3,3,1,2,4,3,4] #,5,4,5,6, 5,4,3,6,5,7,4,6,7] #,8,7,4,8,5,6,7,8,6,7,8,8,9,9]\n    nppl_mins = [0,4,7,3,4,7,3,6,4,0,0,7,3,6] #,7,5,6,8, 5,4,0,6,4,8,3,5,7] #,7,5,0,6,0,3,3,4,0,0,3,0,7,0]\n    for icost in range(len(ichs)):\n        ich = ichs[icost]\n        ich_str = 'ch_'+str(ich)\n        nppl_min = nppl_mins[icost]\n        \n        print(\" - - - - - - - Doing \",ich_str,\"  nppl >=\",nppl_min,\" - - - - - - -\")\n        # Go though the families and assign ones that meet the criteria\n        for ifam in df_family.index:\n            day_ich = df_family.loc[ifam,ich_str]\n            nppl = df_family.loc[ifam,'n_people']\n            if day_ich == 2:\n                ppl_limit = max_ppl_day2\n            else:\n                ppl_limit = max_ppl_day\n            if ((df_family.loc[ifam,'assigned_day'] < 0) and\n                    (day_ich in lower_days) and (nppl >= nppl_min) and\n                    (people_count_m1[day_ich-1] < ppl_limit)):\n                ##print(ifam,day_ich,nppl,sum(people_count_m1))\n                # OK, got one. Assign it:\n                df_family.loc[ifam,'assigned_day'] = day_ich\n                # and keep track of the people count:\n                people_count_m1[day_ich-1]  += df_family.loc[ifam,'n_people']\n                #\n                # - Does this family have a Buddy family? and\n                # - Is this day the buddy day? and\n                # - Is the buddy family not already assigned?\n                # That's a lot of ands ;-)\n                if ((df_family.loc[ifam,'buddy_id'] >= 0) and\n                        (df_family.loc[ifam,'buddy_day'] == day_ich)):\n                    # assign the buddy family here if not already assigned\n                    buddy_fam = df_family.loc[ifam,'buddy_id']\n                    if (df_family.loc[buddy_fam,'assigned_day'] < 0):\n                        ##print(\"\\nAssigning Buddy!\")                    \n                        df_family.loc[buddy_fam,'assigned_day'] = day_ich\n                        people_count_m1[day_ich-1]  += df_family.loc[buddy_fam,'n_people']\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                    else:\n                        pass\n                        ##print(\"\\nBuddy, but not assigned.\")\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                \n        print(\"Total assigned families = \",sum(df_family['assigned_day'] > 0),\n             \" and people =\",sum(people_count_m1),\"\\n\")","3649ade2":"if True:    \n    print(\"\\n\\nFilling the High-Demand days ...\\n\")\n    # Now fill in the \"high-demand\" days to different amount above\/beow day 59:\n    \n    max_ppl_day = 215\n    max_ppl_above = 165\n    \n    # don't add to the low-demand days (but adding to 2 is OK):\n    lower_days = [6,7,8,9, 13,14,15,16, 20,21,22,23, 27,28,29,30, \n                               34,35,36,37, 41,42,43,44, 48,49,50,51]\n    lower_days += [55,56,57,58, 62,63,64,65, 69,70,71,72, 76,77,78,79, 83,84,85,86, 90,91,92,93, 97,98,99,100]\n    # Set the desired cost-per-person limit by specifying:\n    # i) specific choice to use, and ii) a minimum number of people (inclusive)\n    # These look like enough to get 125 in each of the low\n    ichs =      [0,1,2,1,2,3,2,3,3,1,2,4,3,4] #,5,4,5,6, 5,4,3,6,5,7,4,6,7] #,8,7,4,8,5,6,7,8,6,7,8,8,9,9]\n    nppl_mins = [0,4,7,3,4,7,3,6,4,0,0,7,3,6] #,7,5,6,8, 5,4,0,6,4,8,3,5,7] #,7,5,0,6,0,3,3,4,0,0,3,0,7,0]\n    for icost in range(len(ichs)):\n        ich = ichs[icost]\n        ich_str = 'ch_'+str(ich)\n        nppl_min = nppl_mins[icost]\n        \n        print(\" - - - - - - - Doing \",ich_str,\"  nppl >=\",nppl_min,\" - - - - - - -\")\n        # Go though the families and assign ones that meet the criteria\n        for ifam in df_family.index:\n            day_ich = df_family.loc[ifam,ich_str]\n            nppl = df_family.loc[ifam,'n_people']\n            if day_ich < 59:\n                ppl_limit = max_ppl_day\n            else:\n                ppl_limit = max_ppl_above\n            if ((df_family.loc[ifam,'assigned_day'] < 0) and\n                    not(day_ich in lower_days) and (nppl >= nppl_min) and\n                    (people_count_m1[day_ich-1] < ppl_limit)):\n                ##print(ifam,day_ich,nppl,sum(people_count_m1))\n                # OK, got one. Assign it:\n                df_family.loc[ifam,'assigned_day'] = day_ich\n                # and keep track of the people count:\n                people_count_m1[day_ich-1]  += df_family.loc[ifam,'n_people']\n                #\n                # - Does this family have a Buddy family? and\n                # - Is this day the buddy day? and\n                # - Is the buddy family not already assigned?\n                # That's a lot of ands ;-)\n                if ((df_family.loc[ifam,'buddy_id'] >= 0) and\n                        (df_family.loc[ifam,'buddy_day'] == day_ich)):\n                    # assign the buddy family here if not already assigned\n                    buddy_fam = df_family.loc[ifam,'buddy_id']\n                    if (df_family.loc[buddy_fam,'assigned_day'] < 0):\n                        ##print(\"\\nAssigning Buddy!\")                    \n                        df_family.loc[buddy_fam,'assigned_day'] = day_ich\n                        people_count_m1[day_ich-1]  += df_family.loc[buddy_fam,'n_people']\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                    else:\n                        pass\n                        ##print(\"\\nBuddy, but not assigned.\")\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n\n        print(\"Total assigned families = \",sum(df_family['assigned_day'] > 0),\n             \" and people =\",sum(people_count_m1),\"\\n\")\n","3146e8b6":"if True:\n    # Finally, the remaining families can go anywhere their choice allows,\n    # this adds to both low and high-demand days, with different limits above\/below day 59.\n    print(\"\\n\\nPut these last few anywhere ...\\n\")\n    \n    max_ppl_day = 270\n    max_ppl_above = 200\n    \n    # Set the desired cost-per-person limit by specifying:\n    # i) specific choice to use, and ii) a minimum number of people (inclusive)\n    # These look like enough to get 125 in each of the low\n    ichs =      [0,1,2,1,2,3,2,3,3,1,2,4,3,4] #,5,4,5,6, 5,4,3,6,5,7,4,6,7] #,8,7,4,8,5,6,7,8,6,7,8,8,9,9]\n    nppl_mins = [0,4,7,3,4,7,3,6,4,0,0,7,3,6] #,7,5,6,8, 5,4,0,6,4,8,3,5,7] #,7,5,0,6,0,3,3,4,0,0,3,0,7,0]\n    for icost in range(len(ichs)):\n        ich = ichs[icost]\n        ich_str = 'ch_'+str(ich)\n        nppl_min = nppl_mins[icost]\n        \n        print(\" - - - - - - - Doing \",ich_str,\"  nppl >=\",nppl_min,\" - - - - - - -\")\n        # Go though the families and assign ones that meet the criteria\n        for ifam in df_family.index:\n            day_ich = df_family.loc[ifam,ich_str]\n            nppl = df_family.loc[ifam,'n_people']\n            if day_ich < 59:\n                ppl_limit = max_ppl_day\n            else:\n                ppl_limit = max_ppl_above\n            if ((df_family.loc[ifam,'assigned_day'] < 0) and\n                    (nppl >= nppl_min) and\n                    (people_count_m1[day_ich-1] < ppl_limit)):\n                ##print(ifam,day_ich,nppl,sum(people_count_m1))\n                # OK, got one. Assign it:\n                df_family.loc[ifam,'assigned_day'] = day_ich\n                # and keep track of the people count:\n                people_count_m1[day_ich-1]  += df_family.loc[ifam,'n_people']\n                #\n                # - Does this family have a Buddy family? and\n                # - Is this day the buddy day? and\n                # - Is the buddy family not already assigned?\n                # That's a lot of ands ;-)\n                if ((df_family.loc[ifam,'buddy_id'] >= 0) and\n                        (df_family.loc[ifam,'buddy_day'] == day_ich)):\n                    # assign the buddy family here if not already assigned\n                    buddy_fam = df_family.loc[ifam,'buddy_id']\n                    if (df_family.loc[buddy_fam,'assigned_day'] < 0):\n                        ##print(\"\\nAssigning Buddy!\")                    \n                        df_family.loc[buddy_fam,'assigned_day'] = day_ich\n                        people_count_m1[day_ich-1]  += df_family.loc[buddy_fam,'n_people']\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                    else:\n                        pass\n                        ##print(\"\\nBuddy, but not assigned.\")\n                        ##print(df_family.loc[[ifam, buddy_fam],buddy_cols])\n                \n        num_assigned = sum(df_family['assigned_day'] > 0)\n        print(\"Total assigned families = \",num_assigned,\n             \" and people =\",sum(people_count_m1),\"\\n\")\n        # If all NFAMS are assigned then we're done:\n        if num_assigned >= NFAMS:\n            break\n","f7463344":"# And really finally, if there are some families left, just put them at their 2nd choices.\nif True:\n    # Did we assign them all?\n    # If not, put the (few?) remaining ones at their 2nd choices, ignoring people count\n    if (num_assigned < NFAMS):\n        print(\"Putting the remaining {} families at their 2nd choice.\".format(NFAMS-num_assigned))\n        not_assigned = (df_family['assigned_day'] < 0)\n        df_family.loc[not_assigned, 'assigned_day'] = df_family.loc[not_assigned, 'ch_2']","c703d185":"# Show the dataframe\ndf_family.head(10)","6021e1ae":"# Check for any not-assigned families\nif df_family['assigned_day'].min() < 0:\n    print(\"Ooops!  Some families did not get days assigned!\")\n    print(\"Number assigned = {}\".format(sum(df_family['assigned_day'] > 0)))\n    # show the not-assigned families:\n    print(df_family[df_family['assigned_day'] < 0].head(20))\n    halt_on_this_routine()\nelse:\n    print(\"\\nAll Families have an assigned day.\")","3ff2d049":"# Show the distribution of Families assigned per day\ndf_family['assigned_day'].plot.hist(bins=100,figsize=(10,5))\nplt.title(\"Histogram of Number of Families each day\")\nplt.show()","7e3c0957":"# Create the people count for each day from the family assignements\npeople_count = np.zeros(NDAYS+1)\nfor ifam in df_family.index:\n    their_day = df_family.loc[ifam,'assigned_day']\n    # add their number to this days people:\n    if their_day > 0:\n        people_count[their_day] += df_family.loc[ifam,'n_people']\n    \nppl_max_count = max(people_count)\nppl_min_count = min(people_count[1:])\n\nprint(\"\\nPeople_count has min = {}, and a max = {}\".format(ppl_min_count, ppl_max_count))","3e7df492":"# Calculate the Accounting Cost for this people count\naccount_cost, day_costs = accounting_cost(people_count)\n\n# Check if the people limits are exceeded\nif (ppl_max_count >= MAX_PPL) or (ppl_min_count <= MIN_PPL):\n    print(\"\\n       \"+10*\"*\"+\" W A R N I N G - People limits exceeded \"+15*\"*\")\n    ppl_color = 'red'\nelse:\n    ppl_color = 'blue'\n\nplt.figure(figsize=(10,5))\nplt.plot(1+np.arange(1,NDAYS+1), people_count[1:],marker='o',color=ppl_color)\n# show the average and max min levels too\nplt.plot([1,NDAYS],[MIN_PPL,MIN_PPL],color='gray')\nplt.plot([1,NDAYS],[ave_ppl_day,ave_ppl_day],color='gray')\nplt.plot([1,NDAYS],[MAX_PPL,MAX_PPL],color='gray')\nplt.title(\"Number of People each day\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Number of People\")\nplt.show()\n\n# Show the Accounting Cost contribution for each day:\nplt.figure(figsize=(10,5))\nplt.plot(np.arange(1,NDAYS+1), day_costs[1:] ,marker='o',color=ppl_color)\n# show the average and max min levels too\nplt.plot([1,NDAYS],[MIN_PPL,MIN_PPL],color='gray')\nplt.plot([1,NDAYS],[ave_ppl_day,ave_ppl_day],color='gray')\nplt.plot([1,NDAYS],[MAX_PPL,MAX_PPL],color='gray')\nplt.title(\"Accounting Cost for each day\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Accounting Cost\")\nplt.show()","a8b76349":"# Determine the \"ichoice\" value, 0-10, for each family\n# (do this more efficiently with an apply() ?)\ndf_family['ichoice'] = -1   # not defined\nfor ifam in df_family.index:\n    # default: didn't get any of the 0-9 specified\n    ichoice = 10\n    # see if the assigned day is any of the preferences\n    assigned_day = df_family.loc[ifam,'assigned_day']\n    for ipref in range(10):\n        if (df_family.loc[ifam,'ch_'+str(ipref)] == assigned_day):\n            ichoice = ipref\n            break;\n    df_family.loc[ifam,'ichoice'] = ichoice\n            ","71999382":"# Show the distribution of the ichoice values\ndf_family['ichoice'].plot.hist(bins=21,figsize=(10,5))\nplt.title(\"Histogram of the Number of Families vs their assigned choice\")\nplt.show()","f4bb90bc":"# Now get the cost for each family\n# (do this more efficiently with an apply() ?)\ndf_family['cost'] = -1   # not calculated\nfor ifam in df_family.index:\n    df_family.loc[ifam,'cost'] = family_cost(\n        df_family.loc[ifam,'ichoice'], df_family.loc[ifam,'n_people'])","0ea0a698":"df_family.head(10)","028edcd1":"# Scatter plot of the cost per family vs assigned_day\n##hist_vs = 'ichoice'\nhist_vs = 'assigned_day'\n\ndf_family.plot.scatter(hist_vs,'cost',figsize=(10,5),alpha=0.3)\nplt.title(\"Scatter plot of the  Cost-per-family vs their \"+hist_vs)\nplt.show()","484998d8":"# Scatter plot of the Cost per Person vs assigned_day\nhist_vs = 'assigned_day'\n\n# add the cost-per-person\ndf_family['cost_pp'] = df_family['cost']\/df_family['n_people']\ndf_family.plot.scatter(hist_vs,'cost_pp',figsize=(10,5),alpha=0.3)\nplt.title(\"Scatter plot of the  Cost-per-Person vs their \"+hist_vs)\nplt.show()","f78d0cfb":"# Show the histogram of family costs\n# This is a \"y-axis projection\" of the previous scatter plot.\nfig, ax = plt.subplots(figsize=(10,5))\ndf_family['cost'].hist(ax=ax, bins=100, bottom=1.0)\nax.set_yscale('log')\nplt.title(\"Histogram of the Number of Families vs their Cost\")\nplt.show()","577c6395":"if True:\n    # Ghostskipper has a data dataframe, so\n    data = df_family\n    \n    # From Ghostskipper:\n    \n    import seaborn as sns\n    \n    # Now lets make columns that contain the number of people for each choice\n    for c in range(10):\n        data[f'n_people_{c}'] = np.where(data[f'ch_{c}'] == data['assigned_day'], data['n_people'], 0)\n    # dd: I have an ichoice column, so add the choice = 10 ones too:\n    data['n_people_10'] = np.where(data['ichoice'] == 10, data['n_people'], 0)\n    \n    # This is a trick to make a stacked bar plot in seaborn\n    for c in range(1, 11):   # dd: to 11\n        d = c -1\n        data[f'n_people_{c}'] = data[f'n_people_{d}'] + data[f'n_people_{c}']\n    \n    # We need to aggregate the data into number of people per choice per day.\n    # Luckily pandas can do this for us using groupby.\n    agg_data = data.groupby(by=['assigned_day'])['n_people', 'n_people_0', 'n_people_1', 'n_people_2', \n                        'n_people_3', 'n_people_4', 'n_people_5', 'n_people_6', 'n_people_7', \n                        'n_people_8', 'n_people_9', 'n_people_10'].sum().reset_index()\n    \n    # Now for the plot!\n    f, ax = plt.subplots(figsize=(12, 20))\n    sns.set_color_codes(\"pastel\")\n    sns.barplot(x='n_people_10', y='assigned_day', data=agg_data, label='choice_10', orient='h', color='red')\n    sns.barplot(x='n_people_9', y='assigned_day', data=agg_data, label='choice_9', orient='h', color='k')\n    sns.barplot(x='n_people_8', y='assigned_day', data=agg_data, label='choice_8', orient='h', color='k')\n    sns.barplot(x='n_people_7', y='assigned_day', data=agg_data, label='choice_7', orient='h', color='k')\n    sns.barplot(x='n_people_6', y='assigned_day', data=agg_data, label='choice_6', orient='h', color='k')\n    sns.barplot(x='n_people_5', y='assigned_day', data=agg_data, label='choice_5', orient='h', color='k')\n    sns.barplot(x='n_people_4', y='assigned_day', data=agg_data, label='choice_4', orient='h', color='r')\n    sns.barplot(x='n_people_3', y='assigned_day', data=agg_data, label='choice_3', orient='h', color='y')\n    sns.barplot(x='n_people_2', y='assigned_day', data=agg_data, label='choice_2', orient='h', color='g')\n    sns.barplot(x='n_people_1', y='assigned_day', data=agg_data, label='choice_1', orient='h', color='c')\n    sns.barplot(x='n_people_0', y='assigned_day', data=agg_data, label='choice_0', orient='h', color='b')\n    ax.axvline(125, color=\"k\", clip_on=False)\n    ax.axvline(300, color=\"k\", clip_on=False)\n    ax.legend(ncol=2, loc=\"lower right\", frameon=True)\n    ax.set(xlabel=\"Occupancy\")\n    ","b457ad97":"# The GSP metric function and the gsp_profit_factor were defined at the beginning of this file.\nif True:\n    # Plot the metric value vs family_id gap size\n    gap_vals = np.arange(1,11)\n    plt.plot(gap_vals, gsp_metric(gap_vals), marker='o')\n    plt.ylim(0,)\n    plt.show()","5d1a7119":"# Try this metric as the basis for a Gift Shop Profit\n# Assumes dataframe df_family has columns of: assigned_day, family_id\n# (see stand-alone version below)\nif True:\n    # Will evaluate\/save a cluster metric for each day\n    cluster_metrics = []\n    # Show detailed output for some select days\n    show_days = [1]\n    for iday in range(1,NDAYS+1):\n        # Get the family_ids for guests on this day - the ids will be in order\n        fam_vals = df_family[df_family['assigned_day'] == iday]['family_id'].values\n        num_fams_today = len(fam_vals)\n        #\n        if iday in show_days:\n            print(\"Day \"+str(iday)+\":\\n\",fam_vals)\n        \n        # calculate the adjacent differences between family ids, i.e., size of the gaps\n        diff_vals = np.zeros(len(fam_vals))\n        diff_vals[1:] = fam_vals[1:] - fam_vals[0:-1]\n        # and calculate the difference for the first one by wrapping it around and subtracting the last\n        diff_vals[0] = fam_vals[0]+NFAMS - fam_vals[-1]\n        #\n        if iday in show_days:\n            plt.plot(diff_vals,marker='.')\n            plt.plot([0.0,num_fams_today-1],[0.0,0.0],color='gray')\n            plt.title(\"Day \"+str(iday)+\" - Difference values for each Family\")\n            plt.show()\n            \n        # Use something like 1\/gap_length as the main variable to measure the clustering.\n        # Use 3rd power plus an offset to limit profit to close family_ids\n        cluster_metric = gsp_metric(diff_vals)\n        #\n        if iday in show_days:\n            plt.plot(cluster_metric,marker=\".\")\n            plt.plot([0.0,num_fams_today-1],[0.0,0.0],color='gray')\n            plt.title(\"Day \"+str(iday)+\" - cluster metric values for each Family\"\n                 +\"  Total = {:.2f}\".format(sum(cluster_metric)))\n            plt.show()\n        # save this day's metric\n        cluster_metrics.append(sum(cluster_metric))        \n","950e3d71":"if True: \n    # Define the Gift Shop profits, each day, as\n    gift_profits = gsp_profit_factor * np.array(cluster_metrics)\n    total_profits = sum(gift_profits)\n\n    print(\"\\nTotal Gift Shop Profit: $ {:.2f}\\n\".format(total_profits))\n\n    # Look at the histogram of cluster_metric for the days\n    plt.hist(gift_profits,bins=50)\n    plt.title(\"Histogram of the daily Gift Shop Profits\")\n    plt.xlabel(\"Day's Profits (\\$)\")\n    plt.ylabel(\"Number of Days\")\n    plt.show()\n    \n    # Plot the cluster_metrics values for the days\n    plt.plot(1.0+np.arange(NDAYS),gift_profits,marker=\".\")\n    plt.ylim(0,)\n    plt.title(\"Gift Shop Profits vs Day   Total = {:.2f}\".format(sum(gift_profits)))\n    plt.show()","e937763f":"# Show the two contributions and the Total Cost:\nprint(\"   Families cost: $ {:>10}\".format(int(df_family['cost'].sum())))\nprint(\" Accounting cost: $ {:>10}\".format(int(account_cost)))\nprint(\"      TOTAL cost: $ {:>10}\".format(int(account_cost + df_family['cost'].sum())))\n\nprint(\"\\n   less:\")\nprint(\"Gift Shop Profit: $ {:>10}\".format(int(sum(gift_profits))))\nprint(\"   gives:\")\nprint(\"        NET cost: $ {:>10}\".format(int(account_cost + df_family['cost'].sum() -\n                                              sum(gift_profits))))\n\n# Note if the people limits are exceeded\nif (ppl_max_count >= MAX_PPL) or (ppl_min_count <= MIN_PPL):\n    print(\"\\n       \"+10*\"*\"+\" W A R N I N G - People limits exceeded \"+15*\"*\")","73994065":"# Notes on version 7\n\n# Evaluating GSP using:  \"25, 5^3\" , i.e.:\n#   def gsp_metric(diff_value):\n#       return 126.0\/(diff_value**3 + 125.0)\n# with Profit Factor:\n#      gsp_profit_factor = 25.0\n\n\n# Results with no Buddies:  (Same as v6 except GSP is changed.)\n\n#   Families cost: $      88418\n# Accounting cost: $       8725\n#      TOTAL cost: $      97143\n#\n#   less:\n#Gift Shop Profit: $       7734\n#   gives:\n#        NET cost: $      89409\n\n\n# Using some Buddies, With max_buddy_diff = 3\n# and finding buddies by doing:\n#    # Select families to consider buddying-up\n#    select_fams = df_family[(df_family['buddy_day'] < 0) & \n#                (  ((df_family['ch_1'] == iday) & (df_family['n_people'] >= 2)) |\n#                ((df_family['ch_2'] == iday) & (df_family['n_people'] >= 3)) |\n#             ((df_family['ch_3'] == iday) & (df_family['n_people'] >= 6))  ) ]\n\n# Results with Buddies:\n\n#   Families cost: $      88852   +434\n# Accounting cost: $       8082   -643\n#      TOTAL cost: $      96934        -209\n#\n#   less:\n#Gift Shop Profit: $       8058   +324\n#   gives:\n#        NET cost: $      88875\n\n# Hmmm... A very slight effect on the gift shop profit\n# which does not quite balance the increase in the Families cost. \n# The decrease in Accounting cost (why?) saves the day.\n\n# It's possible that since I'm going through the families in family order,\n# that I've already built-in a reasonable amount of buddying up.\n# Will 'shelve' this for now ;-)\n","96a9082b":"# Write out the submission file:\ndf_family[['family_id','assigned_day']].to_csv(\"submission.csv\", index=False)","02f96259":"# Look at the head, tail of the file:\n\n!head -10 submission.csv","cf255b89":"!tail -10 submission.csv","e134c339":"# Gift Shop Profit calculated from the submission file\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# The submission file that was just created above:\nsub_name = \"submission.csv\"\ndf_submit = pd.read_csv(\"submission.csv\")\n\n# Read some other submission files grabbed from notebooks:\n##sub_name = \"hengzheng_santa-s-seed-seeker_72150\"\n##sub_name = \"vipito_santa-ip_72398\"\n##sub_name = \"jazivxt_using-a-baseline_76101\"\n##sub_name = \"xhlulu_santa-s-2019-stochastic-product-search_76114\"\n##sub_name = \"ilu000_greedy-dual-and-tripple-shuffle-with-fast-scoring_78350\"\n##sub_name = \"ghostskipper_visualising-results_79913\"\n##sub_name = \"pulkitmehtawork1985_fast-jonker-volgenant-algorithm_84433\"\n##sub_name = \"dan3dewey_santa-s-simple-scheduler_96934\"\n##sub_name = \"pavelvod_pytorch-starter-solution_117334\"\n##sub_name = \"zzy990106_better-initialization_127711\"\n##sub_name = \"kaushal2896_random-assignment-benchmark_10552936\"\n#\n##df_submit = pd.read_csv(\"..\/input\/\"+sub_name+\".csv\")\n\nNDAYS = 100\nNFAMS = 5000\n\n# Define the metric as a function of the difference in family id values\n# Use something like 1\/gap_length as the main variable to measure the clustering.\n# Use 3rd power plus an offset to limit profit to near-by family_ids\ndef gsp_metric(diff_value):\n    return 126.0\/(diff_value**3 + 125.0)\n\n# And the Profit Factor:\ngsp_profit_factor = 25.0\n\nif True:\n    # Plot the metric value vs family_id gap size\n    gap_vals = np.arange(1,11)\n    plt.plot(gap_vals, gsp_metric(gap_vals), marker='o')\n    plt.ylim(0,)\n    plt.show()\n    \n# Will evaluate\/save a cluster metric for each day\ncluster_metrics = []\n# Show detailed output for some select days\nshow_days = [1]\nfor iday in range(1,NDAYS+1):\n    # Get the family_ids for guests on this day - the ids will be in order\n    fam_vals = df_submit[df_submit['assigned_day'] == iday]['family_id'].values\n    num_fams_today = len(fam_vals)\n    if iday in show_days:\n        print(\"Day \"+str(iday)+\"  Family IDs:\\n\",fam_vals)\n        \n    # calculate the adjacent differences between family ids, i.e., size of the gaps\n    diff_vals = np.zeros(len(fam_vals))\n    diff_vals[1:] = fam_vals[1:] - fam_vals[0:-1]\n    # and calculate the difference for the first one by wrapping it around and subtracting the last\n    diff_vals[0] = fam_vals[0]+NFAMS - fam_vals[-1]\n    if iday in show_days:\n        plt.plot(diff_vals,marker='.')\n        plt.plot([0.0,num_fams_today-1],[0.0,0.0],color='gray')\n        plt.title(\"Day \"+str(iday)+\" - Differences of successive Family IDs\")\n        plt.show()\n            \n    # The metric is defined with a simple function (above)\n    cluster_metric = gsp_metric(diff_vals)\n    if iday in show_days:\n        plt.plot(cluster_metric,marker=\".\")\n        plt.plot([0.0,num_fams_today-1],[0.0,0.0],color='gray')\n        plt.title(\"Day \"+str(iday)+\" - cluster metric values for each Family\"\n                 +\"  Total = {:.2f}\".format(sum(cluster_metric)))\n        plt.show()\n    # save this day's metric\n    cluster_metrics.append(sum(cluster_metric))   \n        \n# Define the Gift Shop profits, each day, as\ngift_profits = gsp_profit_factor * np.array(cluster_metrics)\ntotal_profits = sum(gift_profits)\n\n# Look at the histogram of cluster_metric for the days\nplt.hist(gift_profits,bins=50)\nplt.title(\"Histogram of the daily Gift Shop Profits\")\nplt.xlabel(\"Day's Profits (\\$)\")\nplt.ylabel(\"Number of Days\")\nplt.show()\n    \n# Plot the cluster_metrics values for the days\nplt.plot(1.0+np.arange(NDAYS),gift_profits,marker=\".\")\nplt.ylim(0,)\nplt.title(\"Gift Shop Profits vs Day   Total = {:.2f}\".format(sum(gift_profits)))\nplt.show()\n\nprint(\"\\nTotal Gift Shop Profit: $ {:.2f} for {}\\n\".format(total_profits,sub_name))\n","21528a44":"# Total Gift Shop Profit for some public submissions:  (v7)\n#\n#  $ 7617.87 for hengzheng_santa-s-seed-seeker_72150\n#  $ 7571.1 for vipito_santa-ip_72398\n#  $ 7603.67 for jazivxt_using-a-baseline_76101\n#  $ 7613.56 for xhlulu_santa-s-2019-stochastic-product-search_76114\n#  $ 7467.86 for ilu000_greedy-dual-and-tripple-shuffle-with-fast-scoring_78350\n#  $ 7510.47 for ghostskipper_visualising-results_79913\n#  $ 7512.49 for pulkitmehtawork1985_fast-jonker-volgenant-algorithm_84433\n#  $ 8058.83 for dan3dewey_santa-s-simple-scheduler_96934 (v7)\n#  $ 6813.30 for pavelvod_pytorch-starter-solution_117334\n#  $ 7363.77 for zzy990106_better-initialization_127711\n#  $ 6497.01 for kaushal2896_random-assignment-benchmark_10552936\n","2dcbbebc":"### Evaluate the Gift Shop profit","54b38c68":"### Nice visualization from www.kaggle.com\/ghostskipper\/visualising-results","99ed8db6":"## Preliminaries and Setup","22e2f9c3":"### \"First-come, first serve\" assignment\nSee this cell in (v2), (v3).","b6aa6070":"## Santa 2019 Simple Scheduler\n\nThis notebook takes some \"simple\" approaches to the 2019 Santa problem. <br>\nThese are all heuristic algorithms to assign days to the families; <br>\nthey only evaluate the Total Cost once after scheduling is complete;<br>\nsome parameters of the scheduling are tuned, however.<br>\n\n### Why do this?\n\nSanta's Data Elves pointed out to Santa that they are getting optimized costs less than $ 100,000, <br>\nwhich is a lot less than the millions of dollars a random schedule would cost. <br>\nSo they feel they should share in these considerable savings. <br>\nSanta agrees, but thinks they are overstating the savings of their extreme optimizations. <br>\nSo here several of  Ms Claus' previous, simpler algorithms are used <br>\nto see how much more the Data Elves efforts are really saving Santa.  ;-)\n\n\n### Diary\nSetup basic framework and implemented \"Random\" scheduling.<br>\n(v1) **15,246,819** Random assignment (value will vary with random seed)<br>\nImplemented first-come-first-serve with a limit on the people-per-day, gave 1,082,000 with very low accounting costs.<br>\nGet lower total costs by slightly increasing the people-per-day limit (by 1.5\\*ich, e.g. up to 15 higher) when larger choices are being assigned.<br>\n(v2) **756,432** First-come-first-serve with slight people-per-day limit adjust. <br>\nDo the FCFS but in the order from largest to smallest family sizes - this didn't really help. Continue to do FCFS in 0-4999 order, but set a different people limit above day 59 to reduce the large accounting cost at the transition. The 6 under-subscribed day-ranges are very clear in the plot(s) and the lower limit (125) is requiring people get put into those days even though they are not a remaining choice. <br>\n(v3) **570,746** FCFS with split people-limit above day 59. <br>\nMade a matrix output to view the cost-per-person depending on the choice and the number of people: often a higher choice with more people is preferred to the lower choice. With this in mind do the scheduling in order of cost-per-person, first filling the low-request gaps and then the rest and finally putting whatever is left where it will go. Yup, kind of a mess ;-)<br>\n(v4) **132,621** Lowest to highest cost-per-person, fill low regions first. <br>\nLet's include the nice stacked plot from https:\/\/www.kaggle.com\/ghostskipper\/visualising-results <br>\nFill the \"transition\" days of the low-demand regions to a higher level than the middle 2 of the 4 days: this reduces the accounting cost; do this for above 55 and below 51 separately. Restrict to only using choices with no more than 78 for the cost-per-person (e.g, up to choice 7 for a family of 7). Finally, if there are some families left over (9 here) give them their 2nd choice.<br>\n(v5) **97,732** Ms Claus' usual algorithm developed over the years ;-) <br>\nTry implementing a Gift Shop Profit (GSP) term which is larger when `family_id`s are clustered, see the back story among posts in the discussion [the optimal solution has been found, right?](https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/120211)  The profit term is larger when `family_id`s are closer together, going as $1\/(\\Delta id^3+8)$ .<br>\n(v6) **97,143** As in v5, but restricted choices to 4 or less. Gift Shop Profits are 2,468.<br>\nSeparate the big cell of code into its sections, easier to see what's going on? (A lot of retetition,\ncould define a routine to clean it up.)<br>\nTry to increase the GSP by identifying buddy families: ones that share the same day in their low choices AND that are close-together in their `family_id` values. Was hoping to see that assigning buddies to the same day would i) increase the GSP ii) without messing up the costs too much. Hard to increase GSP over what I have without more severely affecting the costs. Did change the calculation of GSP to go as $126\/(\\Delta id^3+125)$ to make it more relevant. Enough messing around with this for now ;-)<br>\n(v7) **96,934** Same as v6, with some attempt to assign \"buddy\" family ids to the same day to increase GSP.\n<hr>\n","930a70c1":"### Assign by least cost-per-person\n\nOK, this is a big mess, which is no doubt one reason why Santa though Ms Claus could use some help with the scheduling.\n- (v4) Fill using lowest to higher cost-per-person choices. Also fill the lower-demand days above day 60 first...\n- (v5) Only use cost-per-days up to 78 (7,7) and then put any\/few remaining days at their second choice. Make the \"transition days\" somewhat higher than the mid-week days. Separate above-55 and below-51 low-request days, with their own limits.\n- (v6) Only use cost-per-day up to 42 (4,6).\n- (v7) As v6 but assign any buddy families that are indicated.","1c0922dd":"### Look for potential \"Buddy Familes\"\nMaximizing the GSP happens when some families on the same day have close family_id values.\nGo through and identify \"buddy pairs\" of families that share one of their chosen days\nand are close to each other in their family id value.\nThen these buddies will be assigned together.","0641a764":"## Look at the Schedule and its Costs\n\nNow the days have been assigned, show the results and calculate the costs to Santa.","40cfdb48":"## Stand-alone Gift Shop Profits calculation","0d2effba":"## Read in the Family preference data","eb4fd21f":"### Output the assigned days to the submission file","9e5d7153":"## Gift Shop Profit\n\nThe following defines and calculates a Gift Shop Profit (GSP) term; for its motivation look among the posts in the discussion topic: [the optimal solution has been found, right?](https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/120211)  \n\nIn short, an additional term, the GSP, is proposed to be included in the optimization. The GSP *reduces* the cost to Santa.","acea9111":"\n** = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = **\n\n** = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = **\n\n** = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = **\n","863a2ae8":"### Done with assignments","f100ea24":"\n** = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = **\n\n** = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = **\n\n** = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = **\n","b796cb2f":"## Do something clever\/kludgy to assign days...","1a308e81":"## The Bottom Line:","853d2097":"### Random assignment","babdd986":"### Look at how the GSP metric depends on the separation of family id values\n\nThe GSP is based on a metric that measures the closeness of `family_id` s within each day, it is large when families have ids within 5 or less of each other."}}