{"cell_type":{"27758365":"code","b3019c1e":"code","b78befd9":"code","59c0f6b8":"code","09cc3063":"code","7b78d648":"code","c1aaa6db":"code","3bc24db7":"code","11a8ca0c":"code","c02f6779":"code","2eada42c":"code","d493aebe":"code","623b87c0":"code","4c782f50":"code","f66feb14":"code","0d66b337":"code","8e42a7a5":"code","cc076187":"code","bb33ec42":"code","3352d92d":"markdown"},"source":{"27758365":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3019c1e":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.layers import Dropout","b78befd9":"data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndata.head(3)","59c0f6b8":"labels = data['label']\npixels = data.drop('label', axis=1)","09cc3063":"pixels.shape","7b78d648":"pixels = np.array(pixels)\npixels = pixels.reshape(42000, 28, 28, 1)\npixels.shape","c1aaa6db":"plt.imshow(pixels[1])","3bc24db7":"X_train, X_test, y_train, y_test = train_test_split(pixels, labels, test_size=0.2)","11a8ca0c":"def plot_accuracy(history):\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.title('model accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'val'], loc='upper left')\n    plt.show()","c02f6779":"datagen = ImageDataGenerator(rotation_range=20, rescale=1.0\/255.0, width_shift_range=0.1, height_shift_range=0.1)\ndatagen.fit(X_train)","2eada42c":"def define_model():\n    model = Sequential()\n    model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(28, 28, 1)))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n    model.add(MaxPooling2D((2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\n    model.add(Dropout(0.5))\n    model.add(Dense(10, activation='sigmoid'))\n    # compile model\n    loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n    model.compile(optimizer='adam', loss=loss_fn, metrics=['accuracy'])\n    return model\nmodel = define_model()","d493aebe":"callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=6)\n\nhistory = model.fit(datagen.flow(X_train, y_train, batch_size=32),\n                    validation_data=datagen.flow(X_test, y_test, batch_size=8),\n                    steps_per_epoch=len(X_train) \/ 32, epochs=40, callbacks=[callback])","623b87c0":"plot_accuracy(history)","4c782f50":"test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntest.shape","f66feb14":"test = np.array(test)\/255.0\ntest = test.reshape(28000, 28, 28, 1)\ntest.shape","0d66b337":"prediction = model(test)\nprediction = tf.nn.softmax(prediction).numpy() #Shows probabilities\nprediction[0]","8e42a7a5":"prediction = [np.argmax(predict) for predict in prediction]\nprint(prediction[0])\nplt.imshow(test[0])  #The prediction correspond to the image","cc076187":"submission_df = {'ImageId' : range(1, len(prediction)+1), 'Label' : prediction}\nsubmission_df = pd.DataFrame(data=submission_df)\nsubmission_df.head(3)","bb33ec42":"submission_df.to_csv('.\/submission.csv', index=False)","3352d92d":"## We reshape the data to have a 28x28 matrix instead of a 784 vector "}}