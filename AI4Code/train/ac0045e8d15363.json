{"cell_type":{"a4e94998":"code","19f331ab":"code","dde01482":"code","d89f17d9":"code","ba346a41":"code","7220e791":"code","225f026c":"code","dd01e2e8":"code","77dc32b4":"code","68dd6397":"code","47ef8933":"code","29e2a163":"markdown"},"source":{"a4e94998":"import pandas as pd\nimport numpy as np\nimport keras\nfrom keras.layers import Input, Dense, Dropout, Flatten\nfrom keras.models import Model","19f331ab":"from keras.datasets import mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()","dde01482":"x_train[0]","d89f17d9":"x_train = x_train \/ np.max(x_train)\nx_test = x_test \/ np.max(x_test)\ny_train = keras.utils.to_categorical(y_train, 10)\ny_test = keras.utils.to_categorical(y_test, 10)","ba346a41":"x_train.shape , y_train.shape","7220e791":"import matplotlib.pyplot as plt\n%matplotlib inline","225f026c":"plt.imshow(x_train[4], cmap='binary')","dd01e2e8":"from sklearn.model_selection import GridSearchCV\nfrom keras.wrappers.scikit_learn import KerasClassifier\nimport time\nfrom keras import Sequential\nfrom sklearn.metrics import classification_report","77dc32b4":"import tensorflow as tf\ntf.device('GPU:0')","68dd6397":"def dense_model(units, dropout):\n    model = Sequential()\n    model.add(Dense(units, activation='relu', input_shape=(28,28,)))\n    model.add(Dropout(dropout))\n    model.add(Dense(units, activation='relu'))\n    model.add(Dropout(dropout))\n    model.add(Flatten())\n    model.add(Dense(10, activation='softmax'))\n    model.compile(loss='categorical_crossentropy',\n                 optimizer='adam',\n                 metrics=['accuracy'])\n    return model\n\nhyperparameters = {\n    'epochs': [2],\n    'batch_size': [64],\n    'units': [32, 64, 128],\n    'dropout': [0.1, 0.2, 0.4]\n}\n\nmodel = KerasClassifier(build_fn=dense_model, verbose=0)\nstart = time.clock()\ngrid = GridSearchCV(estimator=model, param_grid=hyperparameters, cv=6, verbose=4)\ngrid_result = grid.fit(x_train, y_train)\n\nprint(\"Best : %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n\n# the KerasClassifier comes back with the labels 0-9, so we use argmax to \n# turn our one-hot encoding into 0-9 digit labels\ny_true, y_pred = np.argmax(y_test, axis=1), grid.predict(x_test)\nprint()\nprint(classification_report(y_true, y_pred))\nprint()\nprint(time.clock() - start)","47ef8933":"print(y_pred[5])\nplt.imshow(x_test[5], cmap='binary')","29e2a163":"# grid search cross-validation"}}