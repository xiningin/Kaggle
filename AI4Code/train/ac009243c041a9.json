{"cell_type":{"5d994898":"code","45f9e3c1":"code","9c51888d":"code","547387ca":"code","a6c31b6f":"code","241e8cc0":"code","e7ff2026":"code","03f7305d":"code","8fbca044":"code","216590c2":"code","0376d532":"code","32c4c873":"code","f80fba28":"code","f6eaaf74":"code","bd3bebe8":"code","7b6a2a79":"code","e0c93931":"code","3cf7199a":"code","ef531d98":"code","69ac3276":"code","2d0f72b4":"code","96eb75bc":"code","3938e9d6":"code","50c73cfa":"code","244de3c7":"code","c4636b9f":"markdown","0f877f78":"markdown","f6136b21":"markdown","53d7ef2a":"markdown","1439c739":"markdown","38f14bba":"markdown","c12c0cbf":"markdown","0135a6a8":"markdown","51e6900c":"markdown","55bf50f2":"markdown","d49128ea":"markdown","89ffc0f2":"markdown","42d6f59b":"markdown","3495adf3":"markdown","7c03b46d":"markdown","a2a0eec7":"markdown","dd42775a":"markdown","264ed2a7":"markdown","7f07b30c":"markdown","e2d8c30f":"markdown","5774b8fd":"markdown"},"source":{"5d994898":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf","45f9e3c1":"import PIL.Image as pilimg\nimport cv2\nfrom tqdm import tqdm\nimport os","9c51888d":"train_data = np.array(pilimg.open(\"..\/input\/handwritten-characters\/Train\/#\/__0_1004356.png\"))\ntrain_data = cv2.resize(train_data,(32,32))\ntrain_data = train_data.reshape(1,32,32)\ntrain_label = \"#\"\nvalid_data = np.array(pilimg.open(\"..\/input\/handwritten-characters\/Validation\/#\/__0_1118489.png\"))\nvalid_data = cv2.resize(valid_data,(32,32))\nvalid_data = valid_data.reshape(1,32,32)\nvalid_label = \"#\"","547387ca":"train_data.shape","a6c31b6f":"def load_data(path,data,label,h):\n    filepath = os.listdir(path+\"\/\"+h)\n    filepath.sort()\n    if len(filepath)>=10000:\n        limit=filepath[:10001]\n    else:\n        limit=filepath\n    for i in limit:\n        im = pilimg.open(path+\"\/\"+h+\"\/{}\".format(i))#).convert(\"L\")\n        pix = np.array(im)\n        if pix.shape==(28,28):\n            pix = cv2.resize(pix,(32,32))\n        pix = pix.reshape(1,32,32)\n        data = np.vstack([data,pix])\n        label = np.append(label,h) \n    return data,label","241e8cc0":"path = \"..\/input\/handwritten-characters\/\"","e7ff2026":"a = os.listdir(path+\"Train\") \na.sort()\nfor i in tqdm(a):\n    train_data, train_label = load_data(str(path+\"Train\"),train_data,train_label,i)","03f7305d":"import matplotlib.pyplot as plt\n\nplt.imshow(pilimg.fromarray(train_data[1]))","8fbca044":"train_data.shape","216590c2":"a = os.listdir(path+\"Validation\")\na.sort()\nfor i in tqdm(a):\n    valid_data, valid_label = load_data(str(path+\"Validation\"),valid_data,valid_label,i)","0376d532":"valid_data.shape","32c4c873":"train_data = train_data \/ 255\nvalid_data = valid_data \/ 255\ntrain_data = train_data.reshape(train_data.shape[0], 32, 32, 1)\nvalid_data = valid_data.reshape(valid_data.shape[0], 32, 32, 1)","f80fba28":"valid_label.shape","f6eaaf74":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(train_label)","bd3bebe8":"le_list = list(le.classes_)","7b6a2a79":"train_label_le = np.array(le.transform(train_label))","e0c93931":"valid_label_le = np.array(le.transform(valid_label))","3cf7199a":"np.array(le.inverse_transform(train_label_le))","ef531d98":"train_label = tf.keras.utils.to_categorical(train_label_le, 39)\nvalid_label = tf.keras.utils.to_categorical(valid_label_le, 39)","69ac3276":"learning_rate = 0.00062","2d0f72b4":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 3), input_shape=(32,32,1),activation='relu',kernel_initializer='glorot_uniform',padding=\"same\"))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(3, 3)))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 3), activation='relu',kernel_initializer='glorot_uniform',padding=\"same\"))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(3, 3)))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Conv2D(filters=212, kernel_size=(3, 3), activation='relu',kernel_initializer='glorot_uniform',padding=\"same\"))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(3, 3)))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(units=256, kernel_initializer='glorot_normal', activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=39, kernel_initializer='glorot_normal', activation='softmax'))\nmodel.summary()\n#\uc5ec\ub7ec \uc2dc\ub3c4\ub97c \ud1b5\ud574 \uc5bb\uc740 \uac12\uc744 \ubc14\ud0d5\uc73c\ub85c \ubaa8\ub378\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n#conv2D layer\ub294 Convolution\ud558\uac8c \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud574\uc90d\ub2c8\ub2e4.\n#relu\ub294 \uc74c\uc218 \uac12\uc5d0\ub294 0\uc758 \uac00\uc911\uce58\ub97c \uc591\uc218 \uac12\uc5d0\ub294 1\uc758 \uac00\uc911\uce58\ub97c \uacf1\ud558\uc5ec \uac12\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4.\n#kernel_initializer='glorot_uniform'\ub294 Xavier Initialization\uc774\ub77c\uace0\ub3c4 \ubd88\ub9ac\uba70 \uc774\uc804 \ub178\ub4dc\uc640 \ub2e4\uc74c \ub178\ub4dc\uc758 \uac1c\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uac00\uc911\uce58\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4.\n#padding=\"same\"\uc740 \ud14c\ub450\ub9ac\uc5d0 0\uc758 \uac12\uc744 \ucd94\uac00\uc2dc\ucf1c \uc5b4\ub514\uac00 \ubaa8\uc11c\ub9ac\uc778\uc9c0 \uc54c\uac8c \ud558\uace0 output\uc758 \ud06c\uae30\ub97c \uac19\uac8c \ud574\uc90d\ub2c8\ub2e4 padding=\"valid\"\ub77c\uba74 \uc544\ubb34\ub7f0 \uac12\ub3c4 \ucd94\uac00\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n#Dropout\uc740 \ud2b9\uc815 layer\uc5d0 \ub108\ubb34 \ub9ce\uc740 \uac00\uc911\uce58\uac00 \uc3e0\ub9ac\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uc5ec \ub79c\ub364\ud558\uac8c layer\uac04\uc758 \uc5f0\uacb0\uc744 \ud574\uc81c\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n#MaxPooling2D layer\ub294 n,n\uc0ac\uc774\uc988\uc758 \uc0ac\uac01\ud615\uc548\uc5d0 \uc788\ub294 \uac12 \uc911 \uac00\uc7a5 \ud070 \uac12\ub9cc\uc744 \uc774\uc6a9\ud558\uc5ec \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n#Flatten layer\ub294 conv2d\ub97c \uac70\uce58\uace0 \ub098\uc628 2\ucc28\uc6d0\uc758 \ub370\uc774\ud130\ub97c 1\ucc28\uc6d0\uc758 \ub370\uc774\ud130\ub85c \ud3b4\uc8fc\uc5b4 dense layer\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4.\n#\ub9c8\uc9c0\ub9c9\uc73c\ub85c softmax\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 units\uac1c\uc218\uc758 target\uc774 \uc788\uc744 \ub54c 1\ubc88\uc9f8, 3\ubc88\uc9f8 \ub4f1 \uc5b4\ub514\uc758 \uac12\uc77c \ud655\ub960\uc774 \ub192\uc740\uc9c0\uc5d0 \ub530\ub77c [0,0,0,1,0,0,0,0,0,0]\uc640 \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4.","96eb75bc":"model.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(lr=learning_rate), metrics=['accuracy'])","3938e9d6":"callbacks = tf.keras.callbacks.ModelCheckpoint(filepath='model.h5', monitor='val_loss', save_best_only=True)\n#\ucc98\uc74c\uc5d0\ub294 EarlyStopping\uc744 \uc0ac\uc6a9\ud558\uc600\uc9c0\ub9cc \ub370\uc774\ud130\uac00 \uc801\uc5b4 overfitting\uc774 \ub418\uae30 \uc5b4\ub824\uc6b4 \ud658\uacbd\uc774\ub77c\uace0 \uc0dd\uac01\ub418\uc5b4 ModelCheckpoint\ub97c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4.\n#ModelCheckpoint\ub294 val_loss\ub97c \ubaa8\ub2c8\ud130 \ud558\uba70 \uac00\uc7a5 \ucd5c\uc0c1\uc758 \uac12\uc744 \uac00\uc9c4 \ubaa8\ub378\uc744 model.h5\ud30c\uc77c\uc5d0 \uc5c5\ub370\uc774\ud2b8\ud569\ub2c8\ub2e4.","50c73cfa":"history = model.fit(train_data, train_label, batch_size=100, epochs=15,validation_data =(valid_data,valid_label),callbacks=callbacks,verbose=1)\n#\uc2e4\ud589 \uacb0\uacfc\ub97c \ubcf4\uace0 \uc2f6\uae30 \ub54c\ubb38\uc5d0 epochs\ub97c \uc801\ub2f9\ud788 15\uc815\ub3c4\ub85c \uc124\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4.\n#verbose\ub97c 0\uc73c\ub85c \ud558\uba74 \uae30\ub85d\uc774 \uc548\ubcf4\uc785\ub2c8\ub2e4.\n#verbose\ub97c 1\ub85c \ud558\uba74 \ud559\uc2b5\uc774 \uc5bc\ub9c8\uc815\ub3c4 \ub418\uc5c8\ub294\uc9c0, loss, val_loss, accuracy, val_accuracy\ub4f1\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4.\n#verbose\ub97c 2\ub85c \ud558\uba74 loss, val_loss, accuracy, val_accuracy\ub4f1\ub9cc \ud45c\uc2dc\ub429\ub2c8\ub2e4.","244de3c7":"history_frame = pd.DataFrame(history.history)\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['accuracy', 'val_accuracy']].plot()\n#\uac01 \uac12\ub4e4\uc774 \uc5b4\ub5bb\uac8c \ubcc0\ud558\uc600\ub294\uc9c0\ub97c \uc0b4\ud3b4\ubcf4\uace0 \ud639\uc2dc\ub098 \uc624\ubc84\ud53c\ud305\uc774 \ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.","c4636b9f":"**\uc778\uacf5\uc9c0\ub2a5 \ubaa8\ub378\uc740 \uc5ec\ub7ec \uc2e4\ud5d8\uc744 \ud1b5\ud574 \uc131\ub2a5\uc774 \uc88b\uc740 \ubaa8\ub378\uc744 \uc801\uc6a9\uc2dc\ud0b5\ub2c8\ub2e4.**","0f877f78":"**\uc774\ubbf8\uc9c0 \ub85c\ub4dc \uacbd\ud5d8\uc774 \uc801\uc5b4\uc11c \ud55c \ub370\uc774\ud130\uc5d0 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \uac12\uc744 \ucd94\uac00\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud559\uc2b5 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.**\n\n**\ud2b9\uc218\ubb38\uc790\ub294 shape\uc774 28,28 \ud615\ud0dc\uc774\uae30 \ub54c\ubb38\uc5d0 32,32 \uc774\ubbf8\uc9c0\ub85c \ubcc0\ud658\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.**","f6136b21":"**\ub370\uc774\ud130\uc758 \ubd88\uade0\ud615\uc774 \uc870\uae08 \uc788\ub294 \uac83 \uac19\uace0 \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud558\ub294 \ubc95\uc744 \ub354 \uacf5\ubd80\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.**\n\n**overfitting\uc744 \uc218\uc815\ud558\uc600\ub354\ub2c8 \uc131\ub2a5\uc774 \ub5a8\uc5b4\uc84c\ub124\uc694... \uace0\ubbfc\ud574\ubd10\uc57c\uaca0\uc2b5\ub2c8\ub2e4.**","53d7ef2a":"**shape\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubcc0\ud658\uc774 \uc798 \ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.**","1439c739":"**\ub370\uc774\ud130\uc758 \uacbd\ub85c\ub97c \uc124\uc815\ud558\uace0 \ud568\uc218\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4.**","38f14bba":"**crossentropy loss\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud558\uc5ec \ub370\uc774\ud130\ub97c \uc791\uc740 \uac12\uc73c\ub85c \uc815\uaddc\ud654\ud569\ub2c8\ub2e4.**","c12c0cbf":"# **\ub290\ub080\uc810**","0135a6a8":"**listdir\ub85c \ud30c\uc77c\uba85\ub4e4\uc744 \ubd88\ub7ec\uc628 \ub4a4 \uadf8 \uacbd\ub85c\uc5d0 \ub9de\ub294 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\uc5ec numpy \ubc30\uc5f4\uc5d0 \ucd94\uac00\ud574\uc90d\ub2c8\ub2e4.**\n\n**\uc774 \uacfc\uc815\uc5d0\uc11c \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\uba74 kaggle \ub7f0\ud0c0\uc784\uc5d0 \uc81c\ud55c\uc744 \ubc1b\uae30 \ub54c\ubb38\uc5d0 \ud55c \ubb38\uc790\ub2f9 \ucd5c\ub300 10000\uac1c\uc758 \ub370\uc774\ud130\ub97c \ubc1b\uc544\uc624\uae30\ub85c \ud558\uc600\uc2b5\ub2c8\ub2e4.**\n\n**\uc774\ubbf8\uc9c0\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \ub85c\ub4dc\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uace0 \uacc4\uc2e0\ubd84\uc740 \ub313\uae00\ub85c \ub0a8\uaca8\uc8fc\uc2dc\uba74 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.**","51e6900c":"**\uac19\uc740 \ubc29\ubc95\uc73c\ub85c valid dataset\ub3c4 \ub85c\ub4dc\ud558\uac8c \ub418\uba74 \ub370\uc774\ud130 \ub85c\ub4dc \ubd80\ubd84\uc740 \ub05d\uc785\ub2c8\ub2e4.**","55bf50f2":"**\uc774 \ub370\uc774\ud130 \uc14b\uc740 \ud2b9\uc218\ubb38\uc790\uc640 \uc22b\uc790, \uc54c\ud30c\ubcb3\uc744 \uc190\uc73c\ub85c \uc4f4 \uc190\uae00\uc528 \ub370\uc774\ud130\uc14b\uc785\ub2c8\ub2e4.**\n\n**\uadf8\ub9ac\uace0 \uc774 \ub178\ud2b8\ubd81\uc740 \uadf8 \uc774\ubbf8\uc9c0\ub4e4\uc744 \ubd84\ub958\ud558\uae30 \uc704\ud55c cnn \ubaa8\ub378\uc744 \uc791\uc131\ud55c \ub178\ud2b8\ubd81\uc785\ub2c8\ub2e4.**\n\n**\uc6a9\ub7c9\uc774 \uc870\uae08\uc774\ub77c\ub3c4 \ud070 \ub370\uc774\ud130\uc758 \uc774\ubbf8\uc9c0 \ub85c\ub4dc \uacbd\ud5d8\uc774 \uc801\uc5b4\uc11c \ubd80\uc871\ud569\ub2c8\ub2e4... \uadf8\ub7ec\ub098 \uc870\uc5b8\uc740 \ub9ce\uc740 \ub3c4\uc6c0\uc774 \ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4.**\n\n**+\ub370\uc774\ud130\uc5d0 \uc601\uc5b4 o\uac00 \uc5c6\uc2b5\ub2c8\ub2e4 \uc544\ub9c8 \uc22b\uc790 0\uacfc \ud5f7\uac08\ub824\uc11c \uadf8\ub7f0 \uac83 \uac19\uc2b5\ub2c8\ub2e4.**\n\n---------------------------","d49128ea":"**\ubaa8\ub378\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc774\uc678\uc5d0\ub3c4 \uc774\ubbf8\uc9c0\ub97c \ub85c\ub4dc\ud558\uac70\ub098 \ucc98\ub9ac\ud558\uae30 \uc27d\uac8c \ud574\uc8fc\ub294 PIL\uc640 cv\ub97c import \ud574\uc90d\ub2c8\ub2e4**\n\n**\uc9c4\ud589\uc0c1\ud669\uc744 \ubcf4\uae30 \uc704\ud55c tqdm \ub77c\uc774\ube0c\ub7ec\ub9ac\ub3c4 import \ud574\uc90d\ub2c8\ub2e4**\n\n**\ud30c\uc77c \ub514\ub809\ud1a0\ub9ac \ub4f1\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c os\ub3c4 import \ud574\uc90d\ub2c8\ub2e4**","89ffc0f2":"# **\ub77c\uc774\ube0c\ub7ec\ub9ac import**","42d6f59b":"**3,5,9\ucc98\ub7fc \uc22b\uc790\uc758 \ud615\ud0dc\ub85c \uc788\ub294 y\ub97c [0,0,0,1,0,0,0,0,0,0]\uc640 \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ubcc0\uacbd\ud574\uc90d\ub2c8\ub2e4.**\n\n**#one hot encoding**","3495adf3":"# **\ub370\uc774\ud130 \uc804\ucc98\ub9ac**","7c03b46d":"# **\uc778\uacf5\uc9c0\ub2a5 \ubaa8\ub378 \uc801\uc6a9**","a2a0eec7":"**\ub370\uc774\ud130\uac00 \uc798 \ub85c\ub4dc\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.**","dd42775a":"# **\ub370\uc774\ud130 \ub85c\ub4dc**","264ed2a7":"**\uacb0\uacfc\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.**","7f07b30c":"# **\ub4e4\uc5b4\uac00\uae30\uc5d0 \uc55e\uc11c**","e2d8c30f":"**\uadf8\ub9ac\uace0 \ud2b9\uc218 \ubb38\uc790\ub098 \uc54c\ud30c\ubcb3\uc740 \ud559\uc2b5\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 label encoder\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc22b\uc790\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.**\n\n**+ \ub098\uc911\uc5d0 \uc22b\uc790\ub97c \uc6d0\uc0c1\ubcf5\uadc0 \uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4.**","5774b8fd":"**\uc0ac\uc6a9\ud558\uac8c \ub420 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c import \ud558\ub294 \uacfc\uc815\uc785\ub2c8\ub2e4.**\n\n**\uc218\ud559\uc801 \uc5f0\uc0b0\uc744 \ub3c4\uc640\uc8fc\ub294 numpy,**\n\n**\ub370\uc774\ud130 \ucc98\ub9ac\ub97c \ub3c4\uc640\uc8fc\ub294 pandas\ub97c \uae30\ubcf8\uc801\uc73c\ub85c import \ud574\uc90d\ub2c8\ub2e4.**\n\n**\uadf8\ub9ac\uace0 \uac15\ub825\ud55c \ub525\ub7ec\ub2dd \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 tensorflow\ub97c import \ud574\uc90d\ub2c8\ub2e4.**"}}