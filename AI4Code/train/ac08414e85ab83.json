{"cell_type":{"6d54acad":"code","bc6e344c":"code","c2b3e6c3":"code","ce74817c":"code","715a7973":"code","cd0915f3":"code","5e61f677":"code","efeacc40":"code","619ff608":"code","cd985090":"code","52491436":"code","a3ac7123":"code","8b0fdae3":"code","ea33878a":"markdown","c99e382b":"markdown","d12ca46a":"markdown","ac46faeb":"markdown","22b10da6":"markdown","852ff5d5":"markdown","6e74a78d":"markdown","d5d85237":"markdown","a165f75e":"markdown","f3ef6c7e":"markdown","f40d6a21":"markdown","a27c2594":"markdown"},"source":{"6d54acad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc6e344c":"# Loading Packages\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Check both train and test datasets\n\ntrain_df = pd.read_csv(\"\/kaggle\/input\/diamonds-ds-ft-2109\/diamonds_train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/diamonds-ds-ft-2109\/diamonds_test.csv\")\n\ndisplay(train_df, test_df)","c2b3e6c3":"# Merge the dataset\n\ndiamond_united = pd.concat([train_df, test_df])\n\n# Rename columns, x, y, and z, to proper names: length_mm, width_mm, and depth_mm\n\ndiamond_united = diamond_united.rename(columns = {'x': 'length_mm', 'y': 'width_mm', 'z': 'depth_mm'}, inplace = False)\n\n# Drop Unnamed: 0 column\n\ndiamond_united = diamond_united.drop(columns = [\"Unnamed: 0\"])\n\ndiamond_united\n","ce74817c":"# Create Length - Width (LW) Ratio column \n\ndiamond_united[\"LW_Ratio\"] = diamond_united[\"length_mm\"]\/diamond_united[\"width_mm\"]\n","715a7973":"# Remove unnecessary column for now, but will be used later\n\ndiamond_united2 = diamond_united.drop(columns = [\"price\"])\n\ndiamond_united2","cd0915f3":"# Change object column values to integer\n\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nobject_col = diamond_united2.columns[diamond_united2.dtypes == \"object\"]\n\nfor c in object_col:\n    diamond_united2[c] = le.fit_transform(list(diamond_united2[c]))\n    \ndiamond_united2","5e61f677":"# train_df2\n\ntrain_df2 = diamond_united2[:len(train_df)]\n\ntrain_df2","efeacc40":"# test_df2\n\ntest_df2 = diamond_united2[len(train_df):]\n\ntest_df2","619ff608":"fig, axes = plt.subplots(2, 2, sharey = True, figsize = (16,10))\nfig.suptitle(\"4Cs VS. Price\", weight = \"bold\")\n\n# Caret vs. Price\n\nax1 = sns.regplot(ax = axes[0,0], x = train_df[\"carat\"], y = train_df[\"price\"])\nax1.set_title(\"Caret vs. Price\", fontsize = 10)\n\n# Color vs. Price\n\nax2 = sns.boxplot(ax = axes[0,1], x = train_df[\"color\"], y = train_df[\"price\"])\nax2.set_title(\"Color vs. Price\", fontsize = 10)\n\n# Clarity vs. Price\n\nax3 = sns.boxplot(ax = axes[1,0], x = train_df[\"clarity\"], y = train_df[\"price\"])\nax3.set_title(\"Clarity vs. Price\", fontsize = 10)\n\n# Cut vs. Price\n\nax4 = sns.boxplot(ax = axes[1,1], x = train_df[\"cut\"], y = train_df[\"price\"])\nax4.set_title(\"Cut vs. Price\", fontsize = 10)","cd985090":"fig, axes = plt.subplots(2, 2, sharey = True, figsize = (16,10))\nfig.suptitle(\"4 Factors VS. Price\", weight = \"bold\")\n\n# Length vs. Price\n\nax5 = sns.regplot(ax = axes[0,0], x = train_df2[\"length_mm\"], y = train_df[\"price\"])\nax5.set_title(\"Length vs. Price\", fontsize = 10)\nax5.set(ylim=(0, None))\n\n# Width vs. Price\n\nax6 = sns.regplot(ax = axes[0,1], x = train_df2[\"width_mm\"], y = train_df[\"price\"])\nax6.set_title(\"Width vs. Price\", fontsize = 10)\nax6.set(ylim=(0, None))\n\n# Depth vs. Price\n\nax7 = sns.regplot(ax = axes[1,0], x = train_df2[\"depth_mm\"], y = train_df[\"price\"])\nax7.set_title(\"Depth vs. Price\", fontsize = 10)\n\n# LW Ratio vs. Price\n\nax8 = sns.regplot(ax = axes[1,1], x = train_df2[\"LW_Ratio\"], y = train_df[\"price\"])\nax8.set_title(\"LW Ratio vs. Price\", fontsize = 10)","52491436":"# Building a model: catboost\n\nfrom catboost import CatBoostRegressor\n\ncb = CatBoostRegressor(verbose = 100)\n\ncb.fit(train_df2, np.log(train_df[\"price\"]))","a3ac7123":"result = np.exp(cb.predict(test_df2))\n\nresult","8b0fdae3":"submission = pd.read_csv(\"\/kaggle\/input\/diamonds-ds-ft-2109\/sample_submission.csv\")\n\nsubmission[\"price\"] = result\n\nsubmission.to_csv(\"submission_diamond3.csv\", index = 0)","ea33878a":"Tada! Here's my prediction! \n\nIt's my first attempt with using Python for machine learning - please feel free to leave feedbacks, so I can improve.\n\n**Thanks for checking out! :)**","c99e382b":"## Data Unification and Cleaning","d12ca46a":"Based on Catboost model, let's make prediction!","ac46faeb":"## Data Visualization","22b10da6":"## Dividing Dataset Back to Train and Test Datasets","852ff5d5":"Findings so far:\n1. Every factor has positive relationship, even though LW Ratio plot shows that most LW Ratio is in the approximate range of 0.95 - 1.05.\n2. However, regarding LW ratio, it is somewhat uncertain whether it really correlates to price. Still, it somehow has positive relationship, so it will still be included as an additional information.","6e74a78d":"#### What about Length, Width, Depth, and LW Ratio?","d5d85237":"Findings so far:\n1. The relationship between Caret and Price is positive, which means the price goes up if caret is increased.\n2. Based on outliers, those boxplot charts show that the price range is similar regardless of grades. \n3. This means that every 4C plays crucial role on diamond price range.","a165f75e":"#### Create additional information that might help model to predict price more accurately","f3ef6c7e":"#### Relationship between 4Cs (Carat weight, Color, Clarity, and Cut) and Price from train_df","f40d6a21":"## Prediction","a27c2594":"## Building a model: Catboost"}}