{"cell_type":{"40f319e4":"code","b8fa098f":"code","9a62b0c4":"code","31db697b":"code","88b4c616":"code","219ccb9a":"code","ac961de9":"code","f1e4d8c2":"code","8e30732b":"code","0f517ece":"code","8a3274ee":"code","b9ad70d1":"code","b4752044":"code","e1c26d63":"code","789d5ec1":"code","a464e95b":"code","cb7e8a20":"code","89d6630a":"code","516575ca":"code","e47992f4":"code","ae02a9a6":"code","39b2dac2":"code","628ef088":"code","7e2ed506":"code","39915f79":"code","7a8ae6f0":"code","d1eacac9":"code","a9ed6039":"code","559b6659":"code","c3ad2cac":"code","40a4c699":"code","39b9b95c":"code","b633c5be":"code","dbc9317e":"code","ee07333f":"code","95cc0228":"code","d4a63336":"markdown","52a4b55e":"markdown","bc615afe":"markdown","1d23f19a":"markdown","20b9ed3f":"markdown","f35a110b":"markdown","5468c0f1":"markdown","6694077b":"markdown","e1b6e3e6":"markdown","730da193":"markdown","69c07eed":"markdown","de0f4114":"markdown","43c0c87a":"markdown","dfd1873e":"markdown","efb585cf":"markdown","fc370aba":"markdown","807359a6":"markdown","6ec966aa":"markdown","e1b08188":"markdown","9e5e8044":"markdown"},"source":{"40f319e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8fa098f":"import seaborn as sb\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","9a62b0c4":"df_train=pd.read_csv(\"\/kaggle\/input\/glass-identification-database\/glassm-data.csv\")\ndf_train.head()","31db697b":"df_train.info()","88b4c616":"df_train[\"Ca\"]=pd.to_numeric(df_train[\"Ca\"],errors=\"coerce\")","219ccb9a":"df_train[\"Ca\"].dtypes","ac961de9":"df_train=df_train.drop([\"Id\"],axis=1)","f1e4d8c2":"df_train.describe()","8e30732b":"df_train.isnull().sum()","0f517ece":"for column in df_train.columns:\n    df_train[column] = df_train[column].fillna(df_train[column].mean())","8a3274ee":"df_train.isnull().sum()","b9ad70d1":"def lowerupper(col):\n    q1=np.quantile(col,.25)\n    q3=np.quantile(col,.75)\n    inter=q3-q1\n    lowerbound=q1-(inter*3.0)\n    upperbound=q3+(inter*3.0)\n    outlier=[]\n    for x in col:\n        if((x>upperbound)or(x<lowerbound)):\n            outlier.append(x)\n    if outlier==[]:\n        print(\"No outlier present\")\n    else:\n        return outlier","b4752044":"ri_ot=lowerupper(df_train[\"RI\"])\nprint(\"Outlier Count in column RI:\",ri_ot)\n\nna_ot=lowerupper(df_train[\"Na\"])\nprint(\"Outlier Count in column Na:\",na_ot)\n\nmg_ot=lowerupper(df_train[\"Mg\"])\nprint(\"Outlier Count in column Mg:\",mg_ot)\n\nal_ot=lowerupper(df_train[\"Al\"])\nprint(\"Outlier Count in column Al:\",al_ot)\n\nsi_ot=lowerupper(df_train[\"Si\"])\nprint(\"Outlier Count in column Si:\",si_ot)\n\nka_ot=lowerupper(df_train[\"Ka\"])\nprint(\"Outlier Count in column Ka:\",ka_ot)\n\nca_ot=lowerupper(df_train[\"Ca\"])\nprint(\"Outlier Count in column Ca:\",ca_ot)\n\nba_ot=lowerupper(df_train[\"Ba\"])\nprint(\"Outlier Count in column Ba:\",ba_ot)\n\nfe_ot=lowerupper(df_train[\"Fe\"])\nprint(\"Outlier Count in column Fe:\",fe_ot)","e1c26d63":"def loweruppervalue(col):\n    q1=np.quantile(col,.25)\n    q3=np.quantile(col,.75)\n    inter=q3-q1\n    lowerbound=q1-(inter*3.0)\n    upperbound=q3+(inter*3.0)\n    return lowerbound,upperbound","789d5ec1":"rilp,riup=loweruppervalue(df_train[\"RI\"])\nprint(\"Lowerbound: \",rilp,\"Upperbound :\",riup)\ndf_train[\"RI\"] = np.where(df_train[\"RI\"] < rilp,rilp, df_train[\"RI\"])\ndf_train[\"RI\"] = np.where(df_train[\"RI\"] > riup,riup ,df_train[\"RI\"])\n\nnalp,naup=loweruppervalue(df_train[\"Na\"])\nprint(\"Lowerbound: \",nalp,\"Upperbound :\",naup)\ndf_train[\"Na\"] = np.where(df_train[\"Na\"] < nalp,nalp, df_train[\"Na\"])\ndf_train[\"Na\"] = np.where(df_train[\"Na\"] > naup,naup ,df_train[\"Na\"])\n\nallp,alup=loweruppervalue(df_train[\"Al\"])\nprint(\"Lowerbound: \",allp,\"Upperbound :\",alup)\ndf_train[\"Al\"] = np.where(df_train[\"Al\"] < allp,allp, df_train[\"Al\"])\ndf_train[\"Al\"] = np.where(df_train[\"Al\"] > alup,alup ,df_train[\"Al\"])\n\nsilp,siup=loweruppervalue(df_train[\"Si\"])\nprint(\"Lowerbound: \",silp,\"Upperbound :\",siup)\ndf_train[\"Si\"] = np.where(df_train[\"Si\"] < silp,silp, df_train[\"Si\"])\ndf_train[\"Si\"] = np.where(df_train[\"Si\"] > siup,siup ,df_train[\"Si\"])\n\nkalp,kaup=loweruppervalue(df_train[\"Ka\"])\nprint(\"Lowerbound: \",kalp,\"Upperbound :\",kaup)\ndf_train[\"Ka\"] = np.where(df_train[\"Ka\"] < kalp,kalp, df_train[\"Ka\"])\ndf_train[\"Ka\"] = np.where(df_train[\"Ka\"] > kaup,kaup ,df_train[\"Ka\"])\n\ncalp,caup=loweruppervalue(df_train[\"Ca\"])\nprint(\"Lowerbound: \",calp,\"Upperbound :\",caup)\ndf_train[\"Ca\"] = np.where(df_train[\"Ca\"] < calp,calp, df_train[\"Ca\"])\ndf_train[\"Ca\"] = np.where(df_train[\"Ca\"] > caup,caup ,df_train[\"Ca\"])\n\nbalp,baup=loweruppervalue(df_train[\"Ba\"])\nprint(\"Lowerbound: \",balp,\"Upperbound :\",baup)\ndf_train[\"Ba\"] = np.where(df_train[\"Ba\"] < balp,balp, df_train[\"Ba\"])\ndf_train[\"Ba\"] = np.where(df_train[\"Ba\"] > balp,balp ,df_train[\"Ba\"])\n\nfelp,feup=loweruppervalue(df_train[\"Fe\"])\nprint(\"Lowerbound: \",felp,\"Upperbound :\",feup)\ndf_train[\"Fe\"] = np.where(df_train[\"Fe\"] < felp,felp, df_train[\"Fe\"])\ndf_train[\"Fe\"] = np.where(df_train[\"Fe\"] > feup,feup ,df_train[\"Fe\"])","a464e95b":"ri_ot=lowerupper(df_train[\"RI\"])\nprint(\"Outlier Count in column RI:\",ri_ot)\n\nna_ot=lowerupper(df_train[\"Na\"])\nprint(\"Outlier Count in column Na:\",na_ot)\n\nmg_ot=lowerupper(df_train[\"Mg\"])\nprint(\"Outlier Count in column Mg:\",mg_ot)\n\nal_ot=lowerupper(df_train[\"Al\"])\nprint(\"Outlier Count in column Al:\",al_ot)\n\nsi_ot=lowerupper(df_train[\"Si\"])\nprint(\"Outlier Count in column Si:\",si_ot)\n\nka_ot=lowerupper(df_train[\"Ka\"])\nprint(\"Outlier Count in column Ka:\",ka_ot)\n\nca_ot=lowerupper(df_train[\"Ca\"])\nprint(\"Outlier Count in column Ca:\",ca_ot)\n\nba_ot=lowerupper(df_train[\"Ba\"])\nprint(\"Outlier Count in column Ba:\",ba_ot)\n\nfe_ot=lowerupper(df_train[\"Fe\"])\nprint(\"Outlier Count in column Fe:\",fe_ot)","cb7e8a20":"plt.subplot(1,2,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"RI\")\nplt.hist(df_train[\"RI\"])\n\nplt.subplot(1,2,2)\nplt.title(\"Na\")\nplt.hist(df_train[\"Na\"])\n","89d6630a":"plt.subplot(1,2,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Mg\")\nplt.hist(df_train[\"Mg\"])\n\nplt.subplot(1,2,2)\nplt.title(\"Al\")\nplt.hist(df_train[\"Al\"])\n","516575ca":"plt.subplot(1,2,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Si\")\nplt.hist(df_train[\"Si\"])\n\nplt.subplot(1,2,2)\nplt.title(\"Ka\")\nplt.hist(df_train[\"Ka\"])\n","e47992f4":"plt.subplot(1,2,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Ca\")\nplt.hist(df_train[\"Ca\"])\n\nplt.subplot(1,2,2)\nplt.title(\"Ba\")\nplt.hist(df_train[\"Ba\"])\n","ae02a9a6":"plt.subplot(1,2,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Fe\")\nplt.hist(df_train[\"Fe\"])\n\nplt.subplot(1,2,2)\nplt.title(\"Type\")\nplt.hist(df_train[\"Type\"])\n","39b2dac2":"plt.subplot(1,3,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"RI\")\nsb.barplot(data=df_train,x=\"Type\",y=\"RI\")\n\nplt.subplot(1,3,2)\nplt.title(\"Na\")\nsb.barplot(data=df_train,x=\"Type\",y=\"Na\")\n\nplt.subplot(1,3,3)\nplt.title(\"Mg\")\nsb.barplot(data=df_train,x=\"Type\",y=\"Mg\")\n","628ef088":"plt.subplot(1,3,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"RI\")\nsb.barplot(data=df_train,x=\"Type\",y=\"Al\")\n\nplt.subplot(1,3,2)\nplt.title(\"Na\")\nsb.barplot(data=df_train,x=\"Type\",y=\"Si\")\n\nplt.subplot(1,3,3)\nplt.title(\"Mg\")\nsb.barplot(data=df_train,x=\"Type\",y=\"Ka\")\n","7e2ed506":"plt.subplot(1,3,1)\nplt.subplots_adjust(left=0,right=2,bottom=1,top=2,wspace=0.2,hspace=0.4)\nplt.title(\"Ca\")\nsb.barplot(data=df_train,x=\"Type\",y=\"Ca\")\n\nplt.subplot(1,3,2)\nplt.title(\"Ba\")\nsb.barplot(data=df_train,x=\"Type\",y=\"Ba\")\n\nplt.subplot(1,3,3)\nplt.title(\"Fe\")\nsb.barplot(data=df_train,x=\"Type\",y=\"Fe\")\n","39915f79":"llables=[1,2,3,5,6,7]\nplt.figure()\nplt.pie(df_train.groupby([\"Type\"]).size(),labels=llables)\nplt.legend()\nplt.show()","7a8ae6f0":"X=df_train[['RI', 'Na', 'Mg', 'Al', 'Si', 'Ka', 'Ca', 'Ba', 'Fe']]\ny=df_train['Type']","d1eacac9":"X.shape,y.shape","a9ed6039":"os=RandomOverSampler()\nX_train_new,y_train_new=os.fit_resample(X, y)","559b6659":"X_train_new.shape,y_train_new.shape","c3ad2cac":"X_train,X_test,y_train,y_test=train_test_split(X_train_new,y_train_new,test_size=0.30,random_state=707)","40a4c699":"X_train.shape,X_test.shape","39b9b95c":"y_train.shape,y_test.shape","b633c5be":"model=RandomForestClassifier().fit(X_train,y_train)\npred_ram=model.predict(X_test)","dbc9317e":"print(\"The accuracy score is :\",accuracy_score(y_test,pred_ram))","ee07333f":"confusion_matrix(y_test, pred_ram)","95cc0228":"print(classification_report(y_test, pred_ram))","d4a63336":"### Classification Report","52a4b55e":"### Pie Chart\n-  Column \"Type\"","bc615afe":"### Splitting into x and y","1d23f19a":"### Importing Libraries\n- Seaborn\n- Matplotlib\n- train_test_split \n- Random Forest Classifier (sklearn)\n- accuracy_score\n- confusion_matrix\n- classification_report","20b9ed3f":"### Reading data","f35a110b":"### Replacing null vlaues\n - Replacing null values with mean of that column","5468c0f1":"### Oversampling of data","6694077b":"### Histogram","e1b6e3e6":"### Checking outliers and replacing them by upper limit and lower limit of that particular column","730da193":"### Null values check","69c07eed":"### Splitting data again\n- train and test","de0f4114":"###  Descriptive statistics\n- Count\n- Mean\n- Standard deviation\n- Minimum\n- 25% ,50%,75%\n- Maximum","43c0c87a":"### Drop Column\n- Id column","dfd1873e":"### Column conversion\n- Convert Column \"Ca\" to float data type\n- errors=\"coerce\" : If \u2018coerce\u2019, then invalid parsing will be set as NaN.","efb585cf":"### Accuracy score","fc370aba":"### Barplot","807359a6":"### Check Null values again\n- No null values present","6ec966aa":"### Confusion Matrix","e1b08188":"### Information of train data\n- As we can see Column \"Ca\" has digits but data type is Object.","9e5e8044":"### RandomForestClassifier"}}