{"cell_type":{"921f8b6f":"code","d3178cd5":"code","d3966244":"code","43f6828a":"code","b3f4ca36":"code","24f772a7":"code","a0e75457":"code","254ec70c":"code","7abc4a5e":"code","f7eb1fc3":"code","313b2cfd":"code","17f1aadf":"code","b9e338d7":"code","9f46ecbb":"code","aa7f72e8":"code","a1b32214":"code","d95dd93b":"code","8b000c90":"code","dcaecc29":"code","05858eab":"code","990efdca":"code","200b50e8":"code","5892ebd8":"code","70cade13":"code","1d6bf5bf":"code","9781d30b":"code","9ff7bd2f":"code","60cdbc34":"code","414f7c0f":"code","865023b1":"code","b8e50e4d":"code","9030aefa":"code","7b7d363a":"code","20a3d90f":"code","0e575584":"code","a9cd3e8d":"code","2a3f67f3":"code","e7eb0e09":"code","222a19c4":"code","463ed05e":"code","c09221d3":"code","f8b31c10":"code","383b2372":"code","65efb92d":"code","b4714997":"code","ef593df0":"code","6b206000":"code","35f5b491":"markdown","10feb13d":"markdown","430d20bc":"markdown","cd656fb6":"markdown","59edd952":"markdown","a9742bbd":"markdown","9c5120be":"markdown","6e0fb7cd":"markdown","e6ea106f":"markdown","f65bf4b4":"markdown","c6ba60f7":"markdown","b50d9e0b":"markdown","02c0248e":"markdown","0f8a070f":"markdown","10867248":"markdown","e306be1a":"markdown","f9c75cc5":"markdown","a2713bce":"markdown","5790d205":"markdown","f13ba036":"markdown","fb50e204":"markdown","aec62e0e":"markdown","2676994b":"markdown","dee9cab0":"markdown","18217332":"markdown","81a004e9":"markdown","cef2f9bd":"markdown","1e6698d0":"markdown","c0d7450a":"markdown","07ad9fae":"markdown","023cd79d":"markdown","af68dbad":"markdown","52009b09":"markdown","bd55b0af":"markdown","d2df2a56":"markdown","813a5a7e":"markdown","38bf1127":"markdown","55ea10c3":"markdown","e804c20c":"markdown","fa20b3ec":"markdown","8594dd1f":"markdown","7abfdfba":"markdown","8b7fa8f3":"markdown","83a7b4ae":"markdown","66f5fabb":"markdown","5087621c":"markdown","cbfbc90d":"markdown","d1a9fe6a":"markdown","a4eb5b89":"markdown","af1ebc47":"markdown","c955d993":"markdown","8677b480":"markdown","f087184e":"markdown","3ea5cdca":"markdown","2ba287f6":"markdown","93b5184f":"markdown","20c8a346":"markdown","aa7d3219":"markdown","cc852e8f":"markdown","69c0ae30":"markdown","205f23d3":"markdown"},"source":{"921f8b6f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statistics\nfrom scipy import stats\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom scipy.stats import kde","d3178cd5":"df = pd.read_csv(\"..\/input\/murder-rates-by-states\/state.csv\")\ndf.head(10)","d3966244":"np.mean(df[\"Population\"])","43f6828a":"round(stats.trim_mean(df[\"Population\"], 0.1), 2)","b3f4ca36":"np.median(df[\"Population\"])","24f772a7":"round(np.average(df[\"Murder.Rate\"], weights = df[\"Population\"]),2 )","a0e75457":"# l = []\n\n# for i in range(len(df.Population)):\n#     l.extend([df[\"Murder.Rate\"][i]]*df.Population[i])\n    \n# wm = np.median(l)\n# wm\n# Result: 4,\n# Code execution time: 34 seconds.","254ec70c":"loc_pop = stats.trim_mean(df[\"Population\"], 0.1)\ndev_pop = []\nfor i in range(len(df.Population)):\n    dev_pop.append(df[\"Population\"][i]-loc_pop)\nprint(\"Location: \", loc_pop)\nprint(\"***************** \\n\")\ndev_pop[:10]","7abc4a5e":"loc_mrd = stats.trim_mean(df[\"Murder.Rate\"], 0.1)\ndev_mrd = []\nfor i in range(len(df[\"Murder.Rate\"])):\n    dev_mrd.append(round(df[\"Murder.Rate\"][i]-loc_mrd, 2))\nprint(\"Location: \", round(loc_mrd,2))\nprint(\"***************** \\n\")\ndev_mrd[:10]","f7eb1fc3":"var_pop = np.var(df[\"Population\"])\nvar_pop","313b2cfd":"var_mrd = np.var(df[\"Murder.Rate\"])\nround(var_mrd, 2)","17f1aadf":"std_pop = np.std(df[\"Population\"])\nprint(\"Standard Devation of Population: \", round(std_pop, 2))","b9e338d7":"std_mrd = np.std(df[\"Murder.Rate\"])\nprint(\"Standard Devation of Murder Rates: \", round(std_mrd, 2))","9f46ecbb":"mad_pop = df[\"Population\"].mad()\nround(mad_pop, 2)","aa7f72e8":"mad_mrd = df[\"Murder.Rate\"].mad()\nround(mad_mrd, 2)","a1b32214":"def mad(l):\n    ml =[]\n    med = statistics.median(l)\n    for i in l:\n        ml.append(abs(i - med))\n    return statistics.median(ml)\n\nMAD_pop = mad(df[\"Population\"])\nMAD_pop","d95dd93b":"MAD_mrd = mad(df[\"Murder.Rate\"])\nround(MAD_mrd, 2)","8b000c90":"rng_pop = max(df[\"Population\"]) - min(df[\"Population\"])\nrng_pop","dcaecc29":"from statistics import median\n\nsize = len(df[\"Population\"])\nnums = sorted(df[\"Population\"])\n\nq2 = median(nums)\nif len(nums) % 2 == 1:\n    q1 = median(nums[:size\/\/2])\n    q3 = median(nums[(size\/\/2)+1:])\nelse:\n    q1 = median(nums[:(size\/\/2)+1])\n    q3 = median(nums[size\/\/2:])\n\nprint(\"Q1: \", q1)\nprint(\"Q2: \", q2)\nprint(\"Q3: \", q3)\nprint(\"IQR: \", q3-q1)\n","05858eab":"from statistics import median\n\nsize = len(df[\"Murder.Rate\"])\nnums = sorted(df[\"Murder.Rate\"])\n\nq2 = median(nums)\nif len(nums) % 2 == 1:\n    q1 = median(nums[:size\/\/2])\n    q3 = median(nums[(size\/\/2)+1:])\nelse:\n    q1 = median(nums[:(size\/\/2)+1])\n    q3 = median(nums[size\/\/2:])\n\nprint(\"Q1: \", q1)\nprint(\"Q2: \", q2)\nprint(\"Q3: \", q3)\nprint(\"IQR: \", round(q3-q1, 2))","990efdca":"plt.figure(figsize = (5,5), dpi = 150)\nplt.boxplot(df[\"Population\"])\nplt.ylabel(\"Population (millions)\")","200b50e8":"intervals = pd.cut(df[\"Population\"], 10)\ndf[\"Interval\"] = intervals\ndf.head(3)","5892ebd8":"n_of_states_in_interv = df[\"Interval\"].value_counts()\n\nranges = np.array(n_of_states_in_interv.index.values)\ncount = np.array(n_of_states_in_interv.values)\n\nstates_in_interv = {}\nfor i in ranges:\n    states_in_interv[i] = []\nfor i in range(50):\n    states_in_interv[df.iloc[i, 4]].append(df.iloc[i, 3])\n    \nstates_in_interv = list(states_in_interv.values())\nstates_in_interv = [\",\".join(l) for l in states_in_interv]","70cade13":"pop_freq = pd.DataFrame({\"Range\": ranges, \n                         \"Count\": count, \n                         \"States\": states_in_interv}).sort_values(\"Range\").set_index(np.arange(1, 11))\npop_freq","1d6bf5bf":"plt.figure(figsize = (5, 5), dpi = 150)\nplt.hist(df[\"Population\"], edgecolor = \"k\")\nplt.xlabel(\"Population (millions)\")\nplt.ylabel(\"Frequency\")","9781d30b":"plt.figure(figsize = (5, 5), dpi = 150)\nsns.distplot(df[\"Murder.Rate\"], hist=True, kde=True, \n             color = 'darkblue', bins = 10,\n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\n\nplt.ylabel(\"Density\")","9ff7bd2f":"dfw = pd.read_csv(\"..\/input\/percentage-of-delays-by-cause-at-dfw\/dfw_airline.csv\")\ndfw","60cdbc34":"plt.figure(dpi = 150)\nplt.bar(dfw.columns, dfw.iloc[0])\nplt.grid()","414f7c0f":"plt.figure(dpi = 150)\nplt.pie(dfw.iloc[0], labels = dfw.columns, autopct='%1.0f%%', explode=[0.02,0.03,0,0,0.04], colors = [\"gold\", \"cyan\", \"magenta\"])","865023b1":"spdata = pd.read_csv(\"..\/input\/stock-price\/sp500_data.csv\")\nspdata.head(3)","b8e50e4d":"spsec = pd.read_csv(\"..\/input\/stock-price\/sp500_sectors.csv\")\nspsec.head(3)","9030aefa":"telecom = list(spsec[spsec[\"sector\"] == \"telecommunications_services\"][\"symbol\"].values)\ntelecom","7b7d363a":"latest_spdata = spdata[spdata[\"Unnamed: 0\"]>\"2012-07-01\"]\ntelecom = latest_spdata[['T', 'CTL', 'FTR', 'VZ', 'LVLT']]\ntelecom.head(5)","20a3d90f":"telecom.corr()","0e575584":"plt.figure(dpi=150)\nplt.matshow(telecom.corr(), fignum=1)\nplt.colorbar()","a9cd3e8d":"plt.figure(dpi = 150)\nplt.scatter(telecom[\"T\"], telecom[\"VZ\"], marker = \".\")\nplt.xlabel(\"ATT stock\")\nplt.ylabel(\"Verizon stock\")","2a3f67f3":"lcl = pd.read_csv(\"..\/input\/letterofcredit-loans\/lc_loans.csv\")\nlcl.head(5)","e7eb0e09":"pd.crosstab(lcl[\"grade\"], lcl[\"status\"], margins = True)","222a19c4":"tax = pd.read_csv(\"..\/input\/houses-tax-data\/kc_tax.csv\")\ntax.describe()","463ed05e":"# def rmv_outliers(lst1, lst2):\n#     \"\"\"This Function is removing outliers and \n#     returning two lists with the same length.\n#     \"\"\"\n#     lst1, lst2 = lst1.dropna(), lst2.dropna()\n#     d = {key: value for key, value in zip(lst1, lst2)}\n    \n#     l1_q1, l1_q3 = np.percentile(lst1, [25, 75])\n#     l2_q1, l2_q3 = np.percentile(lst2, [25, 75])\n    \n#     l1_iqr = l1_q3 - l1_q1\n#     l2_iqr = l2_q3 - l2_q1\n    \n#     l1_lower_bound = l1_q1 - (1.5 * l1_iqr)\n#     l1_upper_bound = l1_q3 + (1.5 * l1_iqr)\n    \n#     l2_lower_bound = l2_q1 - (1.5 * l2_iqr)\n#     l2_upper_bound = l2_q3 + (1.5 * l2_iqr)\n  \n#     for key in d.copy().keys():\n#         if key < l1_lower_bound or key > l1_upper_bound:\n#             del d[key]\n#     for key, value in d.copy().items():\n#         if value < l2_lower_bound or value > l2_upper_bound:\n#             del d[key] \n#     return list(d.keys()), list(d.values())\n    \n# SqFtTotLiving, TaxAssessedValue = rmv_outliers(tax[\"SqFtTotLiving\"], tax[\"TaxAssessedValue\"])\n# SqFtTotLiving, TaxAssessedValue = pd.Series(SqFtTotLiving), pd.Series(TaxAssessedValue)","c09221d3":"SqFtTotLiving = tax[(tax[\"TaxAssessedValue\"]<=600000) & (tax[\"SqFtTotLiving\"] <= 4000)][\"SqFtTotLiving\"] \nTaxAssessedValue = tax[(tax[\"TaxAssessedValue\"]<=600000) & (tax[\"SqFtTotLiving\"] <= 4000)][\"TaxAssessedValue\"]\nSqFtTotLiving, TaxAssessedValue = pd.Series(SqFtTotLiving), pd.Series(TaxAssessedValue)\n\nplt.figure(dpi = 300)\nplt.hexbin(SqFtTotLiving, TaxAssessedValue, edgecolor = \"k\", gridsize = 40)\nplt.colorbar()\n\nplt.title(\"Hexagonal binning for tax-assesed value versus square feet.\\n\")\nplt.xlabel(\"Square Feet\")\nplt.ylabel(\"Tax-Assessed Value\")","f8b31c10":"x, y = SqFtTotLiving, TaxAssessedValue\nnbins = 40\n\nk = kde.gaussian_kde((SqFtTotLiving, TaxAssessedValue))\nxi, yi = np.mgrid[x.min():x.max():nbins*1j, y.min():y.max():nbins*1j]\nzi = k(np.vstack([xi.flatten(), yi.flatten()]))\n\nplt.figure(dpi = 300)\nplt.pcolormesh(xi, yi, zi.reshape(xi.shape), shading='gouraud', cmap=\"binary\")\n\nplt.contour(xi, yi, zi.reshape(xi.shape))","383b2372":"airline_stats = pd.read_csv(\"..\/input\/airline-delays\/airline_stats.csv\")\nairline_stats.head()","65efb92d":"plt.figure(dpi = 500)\nplt.ylim(-2, 50)\n\nsns.boxplot(x = \"airline\", y = \"pct_carrier_delay\", data = airline_stats)\n\nplt.title(\"Boxplot of percent of airline delays by carrier\")\nplt.xlabel(\"Airline\")\nplt.ylabel(\"Daily % of Delayed Flights\")","b4714997":"plt.figure(dpi = 500)\nplt.ylim(-2, 50)\n\nsns.violinplot(x = \"airline\", y = \"pct_carrier_delay\", data = airline_stats)\n\nplt.title(\"Violin plot of percent of airline delays by carrier\")\nplt.xlabel(\"Airline\")\nplt.ylabel(\"Daily % of Delayed Flights\")","ef593df0":"tax = tax[(tax[\"TaxAssessedValue\"]<=600000) & (tax[\"SqFtTotLiving\"] <= 4000)]","6b206000":"fig, axs = plt.subplots(2,2, dpi = 150, figsize = (12,12))\naxs[0][0].hexbin(tax[tax[\"ZipCode\"] == 98105][\"SqFtTotLiving\"], tax[tax[\"ZipCode\"] == 98105][\"TaxAssessedValue\"], label = \"98105\", edgecolor = \"k\", gridsize = 40)\naxs[0][1].hexbin(tax[tax[\"ZipCode\"] == 98108][\"SqFtTotLiving\"], tax[tax[\"ZipCode\"] == 98108][\"TaxAssessedValue\"], edgecolor = \"k\", gridsize = 40)\naxs[1][0].hexbin(tax[tax[\"ZipCode\"] == 98126][\"SqFtTotLiving\"], tax[tax[\"ZipCode\"] == 98126][\"TaxAssessedValue\"], edgecolor = \"k\", gridsize = 40)\naxs[1][1].hexbin(tax[tax[\"ZipCode\"] == 98188][\"SqFtTotLiving\"], tax[tax[\"ZipCode\"] == 98188][\"TaxAssessedValue\"], edgecolor = \"k\", gridsize = 40)\n\nfig.suptitle(\"Tax-assessed value versus finished square feet by zip code\", fontsize = 20)\n\naxs[0][0].set_title(\"98105\")\naxs[0][1].set_title(\"98108\")\naxs[1][0].set_title(\"98126\")\naxs[1][1].set_title(\"98188\")\n\nfig.text(0.5, 0.04, \"Tax Assessed Value\", ha='center', fontsize = 16)\nfig.text(0.04, 0.5, \"Finished Square Feet\", va='center', rotation='vertical', fontsize = 16)\n","35f5b491":"## Correlation Matrix\n","10feb13d":"A *violin plot* is an enhancement to the boxplot and plots density estimate with the density on the y-axis. The density is mirrored and flipped over and the resulting shape is filled in, creating an image resembling a violin. The advantage of a violin plot is that it can show nuances in the distributin that aren't perceptible in a boxplot.","430d20bc":"## Contour Plot","cd656fb6":"## Trimmed Mean","59edd952":"## Visualising Multiple Variables","a9742bbd":"## Scatterplot","9c5120be":"With the development of exploratory data analysis (EDA), pioneered by John Tukey, statistics set a\nfoundation that was a precursor to the field of data science. The key idea of EDA is that the first and most\nimportant step in any project based on data is to look at the data. By summarizing and visualizing the\ndata, you can gain valuable intuition and understanding of the project.\n.\n\nThis kernel has reviewed concepts ranging from simple metrics, such as estimates of location and\nvariability, to rich visual displays to explore the relationships between multiple variables. The diverse set of tools and techniques being developed by the open source community, combined\nwith the expressiveness of the R and Python languages, has created a plethora of ways to explore and\nanalyze data. Exploratory analysis should be a cornerstone of any data science project.","6e0fb7cd":"(Correltion between telecommunication stock returns)","e6ea106f":"## Median Absolute Deviation","f65bf4b4":"Getting companies from telecommunication service industry.","c6ba60f7":"## Mode","b50d9e0b":"And finally, the **correlation matrix**.\n","02c0248e":"### Histogram","0f8a070f":"## Density Estimates","10867248":"*Source*: Book - Practical Statistics for Data Scientists. Code samples were translated from R to Python by me.","e306be1a":"## Mean","f9c75cc5":"Relared to the histogram is a density plot, which shows the distribution of data vales as a continuous line.","a2713bce":"# Summary","5790d205":"## Frequency tables and hisograms","f13ba036":"## Deviation","fb50e204":"## Weighted Median","aec62e0e":"# Exploring Two or More Variables","2676994b":"### Boxplots","dee9cab0":"Here the **mode** of the cause of flight delays at Dallas\/Fort Worth airport is \"Inbound\"","18217332":"## Contingency Table","81a004e9":"## Weighted Mean","cef2f9bd":"## Standard Deviation","1e6698d0":"The returns have a strong positive relationship: on most days, both stocks go up or go down in tandem. There are few days where one stock goes downs significantly while the other stock goes up (and vice versa).","c0d7450a":"A useful way to summarize two categorical variables is a contingency table-table of counts by category.","07ad9fae":"# Exploring the Data Distributions","023cd79d":"### Violin Plots","af68dbad":"As we can see the max of SqFtTotLiving and TaxAssessedValue have significant difference from others so we need to remove outliers (by limiting the acceptable values).","52009b09":"## Hexagonal Binning","bd55b0af":"Filtering data (getting values newer than 2012-07-01)","d2df2a56":"Other types of charts are used to show the relationship between two numeric variables, including *heat maps*. Heat maps, hexagonal binning, and contour plots all give a visual representation of a two-dimensional density. In this way, they are natural analogs to histograms and density plots.","813a5a7e":"Contingency table of loan grade and status.","38bf1127":"Alaska stands out as having the fewest delays, while American has the most delays: the lower quartile for American is higher than te upper quartile for Alaska. ","55ea10c3":"# Table of Contents\n1. [Estimation of Location](#Estimation-of-Location)\n>* [Mean](#Mean)\n>* [Trimmed Mean](#Trimmed-Mean)\n>* [Median](#Median)\n>* [Weighted Mean](#Weighted-Mean)\n>* [Weighted Median](#Weighted-Median)\n2. [Estimation of Variability](#Estimation-of-Variability)\n>* [Deviation](#Deviation)\n>* [Variance](#Variance)\n>* [Standard Deviation](#Standard-Deviation)\n>* [Mean Absolute Deviation](#Mean-Absolute-Deviation)\n>* [Median Absolute Deviation](#Median-Absolute-Deviation)\n>* [Range](#Range)\n>* [Quartiles and InterQuartile Range](#Quartiles-and-InterQuartile Range)\n3. [Exploring the Data Distributions](#Exploring-the-Data-Distributions)\n>* [Percentiles and Boxplots(whisker plots)](#Percentiles-and-boxplot)\n>* [Frequency tables and hisograms](#Frequency-tables-and-hisograms)\n>>* [Frequency Table](#Frequency-Table)\n>>* [Hisogram](#Hisograms)\n4. [Exploring Categorical Data](#Exploring-Categorical-Data)\n>* [Mode](#Mode)\n5. [Correlation](#Correlation)\n>* [Correlation Matrix](#Correlation-Matrix)\n>* [Scatterplot](#Frequency-tables-and-hisograms)\n6. [Exploring Two or More variables](#Exploring-Two-or-More-variables)\n>* [Contingency Table](#Contingency-Table)\n>* [Hexagonal Binning](#Hexagonal-Binning)\n>* [Contour Plot](#Contour-Plot)\n>* [Categorical and Numeric Data](#Categorical-and-Numeric-Data)\n>>* [Boxplots (multiple)](#Boxplots)\n>>* [Violin Plots](#Violin-Plots)\n>* [Visualising Multiple Variables](#Visualising-Multiple-Variables)\n7. [Summary](#Summary)","e804c20c":"The percentage of flights in a mont that were **delayed** where the delay was **within the carrier's control**.","fa20b3ec":"## Median","8594dd1f":"*Source*: Book - Practical Statistics for Data Scientists. Code samples were translated from R to Python by me.","7abfdfba":"## Percentiles and boxplot","8b7fa8f3":"### Frequency Table","83a7b4ae":"## Quartiles and InterQuartile Range","66f5fabb":"## Variance","5087621c":"Scatter plot between stock returns for *ATT* and *Verizon*","cbfbc90d":"# Estimation of Variability","d1a9fe6a":"Getting information about companies.","a4eb5b89":"Plotting of the same matrix.","af1ebc47":"# Exploring Categorical Data","c955d993":"# Correlation","8677b480":"## Categorical and Numeric Data","f087184e":"## Mean Absolute Deviation","3ea5cdca":"We are not using scatter plot here, because there are a lot of \"dots\"(data points) to display. It will not be understandable. Instead we can use alternatives, such as: hexagonal binning, contour plots, etc. You'll see them here.","2ba287f6":"## Range","93b5184f":"Plotting","20c8a346":"Boxplots are a simple way to visually compare the distributions of a numeric variable grouped according to a categorical variable.","aa7d3219":"# Estimation of Location","cc852e8f":"Getting the data.","69c0ae30":"Removing outliers","205f23d3":"Another way of visualizing a **categorical data**."}}