{"cell_type":{"97d7f1f9":"code","a4df31de":"code","9fc8e02f":"code","f162d67c":"code","0ccfad87":"code","c9744239":"code","3fd42b62":"code","7223d87e":"code","0d081a27":"code","65cab286":"code","0e3ed339":"code","969ac745":"code","5a9c82a1":"code","25086443":"code","f3703947":"code","2316fccb":"code","fd9bca65":"code","39fc1de3":"code","a2396632":"code","e60c4614":"code","9000c821":"code","326fae24":"code","5b72bd34":"code","158aa614":"code","3561dfc4":"code","325c8298":"markdown","8ccecc4d":"markdown","aa1ba9a5":"markdown"},"source":{"97d7f1f9":"import os\nfrom datetime import datetime, date\nimport numpy as np \nimport pandas as pd \npd.options.mode.chained_assignment = None\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a4df31de":"!pip install livelossplot\n!pip install neuralprophet","9fc8e02f":"# NeuralProphet\nfrom neuralprophet import NeuralProphet","f162d67c":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")","0ccfad87":"submission = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv\")\nsubmission.head(2)","c9744239":"train.date = train.date.apply(lambda x: datetime.strptime(x, \"%Y-%m-%d\").date())\ntest.date = test.date.apply(lambda x: datetime.strptime(x, \"%Y-%m-%d\").date())","3fd42b62":"train.shape, test.shape","7223d87e":"train.head()","0d081a27":"tr1 = train[(train.country == \"Finland\") & (train.store == \"KaggleMart\") & (train[\"product\"] == \"Kaggle Mug\")]\ntr1.head()","65cab286":"fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(12, 4))\nsns.lineplot(x=\"date\", y=\"num_sold\", data=tr1[tr1.date < date(2015, 3, 1)], ax=ax);","0e3ed339":"# Week level seasonality present","969ac745":"plt.figure(figsize=(12, 4))\nsns.lineplot(x=\"date\", y=\"num_sold\", data=tr1[tr1.date < date(2019, 3, 1)]);","5a9c82a1":"# Within a month trend is visible.\n# There is also end of the year effect on the number of sales","25086443":"data = tr1[[\"date\", \"num_sold\"]]\ndata = data.rename(columns={\"date\": \"ds\", \"num_sold\": \"y\"}).reset_index(drop=True)\ndata.head()","f3703947":"model = NeuralProphet(\n                        growth=\"linear\",\n                        daily_seasonality=False,\n                        weekly_seasonality=7,\n                        yearly_seasonality=364,\n                        trend_reg=0.0,\n                        seasonality_reg=0.0,\n                        learning_rate=0.03,\n                        batch_size=64,\n                        epochs=200,\n                    )\n\ndf_train, df_val = model.split_df(data, freq='D', valid_p = 0.05)\nmetrics = model.fit(df_train, freq='D', validation_df=df_val, plot_live_loss=True)","2316fccb":"forcast = model.predict(data)\nfig = model.plot(forcast)","fd9bca65":"# getting testing data ready\ntdata = test[(test.country == \"Finland\") & (test.store == \"KaggleMart\") & (test[\"product\"] == \"Kaggle Mug\")]\ntdata[\"num_sold\"] = [np.nan for _ in range(tdata.shape[0])]\ntdata = tdata[[\"date\", \"num_sold\"]]\ntdata = tdata.rename(columns={\"date\": \"ds\", \"num_sold\": \"y\"}).reset_index(drop=True)\ntdata.head()","39fc1de3":"# plotting acutal+prediction on training data + test (predicted num_sold) data\ncombined_data = pd.concat([data, tdata], sort=False).reset_index(drop=True)\nforcast = model.predict(combined_data)\nfig = model.plot(forcast)","a2396632":"# Plotting train data based on Country, Store and Product types:\n# Similar behavior is observed in general\nfig, ax = plt.subplots(nrows=18, ncols=1, figsize=(12, 84))\ni = 0\nfor c in train.country.unique():\n    for s in train.store.unique():\n        for p in train[\"product\"].unique():\n            data = train[(train.country == c) & (train.store == s) & (train[\"product\"] == p)]\n            sns.lineplot(x=\"date\", y=\"num_sold\", data=tr1[tr1.date < date(2019, 3, 1)], ax=ax[i])\n            ax[i].set_title(f\"{c}-{s}-{p}\")\n            ax[i].set_xlabel(\"\")\n            i += 1","e60c4614":"result = pd.DataFrame(data={\"row_id\": [], \"num_sold\": []})\nresult","9000c821":"models_dict = {}\nfor c in train.country.unique():\n    for s in train.store.unique():\n        for p in train[\"product\"].unique():\n            data = train[(train.country == c) & (train.store == s) & (train[\"product\"] == p)]\n            data = data[[\"date\", \"num_sold\"]]\n            data = data.rename(columns={\"date\": \"ds\", \"num_sold\": \"y\"})\n            \n            model_name = f\"model_{c}_{s}_{p}\"\n            print(\"Training model: \", model_name)\n            \n            model = NeuralProphet(\n                                    growth=\"linear\",\n                                    daily_seasonality=False,\n                                    weekly_seasonality=7,\n                                    yearly_seasonality=364,\n                                    trend_reg=0.0,\n                                    seasonality_reg=0.0,\n                                    learning_rate=0.03,\n                                    batch_size=64,\n                                    epochs=200,\n                    )\n\n            df_train, df_val = model.split_df(data, freq='D', valid_p = 1.0\/12)\n            metrics = model.fit(df_train, freq='D', validation_df=df_val, plot_live_loss=False)\n            models_dict[model_name] = model\n            \n            # forecast on the test data\n            df_test = test[(test.country == c) & (test.store == s) & (test[\"product\"] == p)]\n            df_test = df_test.rename(columns={\"date\": \"ds\"})\n            row_id_list = df_test.row_id.values\n            df_test = df_test[[\"ds\"]]\n            df_test[\"y\"] = [np.nan for _ in range(df_test.shape[0])]\n            \n            forecast = model.predict(df_test)\n            forecast = forecast[[\"ds\", \"yhat1\"]]\n            forecast[\"row_id\"] = row_id_list\n            forecast = forecast.rename(columns={\"yhat1\": \"num_sold\"})\n            forecast = forecast[[\"row_id\", \"num_sold\"]]\n            \n            result = pd.concat([result, forecast], sort=False)","326fae24":"result.row_id = result.row_id.astype(int)\nresult = result.sort_values(by=[\"row_id\"])\nresult = result.reset_index(drop=True)","5b72bd34":"result.head()","158aa614":"result.to_csv(\"submission.csv\", index=False)","3561dfc4":"# TODO: NeuralProphet model tuning with suitable params: there should be a singnificant improvement.\n# Still, it might not be competitive to other models like gradient boosting on this problem. ","325c8298":"## Model training and predictions on test data\n\n- A separate model is trained for each time-series based on the (country, store, product) combinations.\n- Corresponding model is used for prediction on test data - based on (country, store, product) of the row_id.","8ccecc4d":"## Time-Series Prediction with NeuralProphet\n\n- Facebook recently upgraded Prophet to NeuralProphet\n- Let us try how does it fair in this competition\n- Just a first try with default settings, can be definitely improved.","aa1ba9a5":"### NeuralProphet: Model testing and tuning for one time-series"}}