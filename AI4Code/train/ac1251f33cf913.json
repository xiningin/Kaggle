{"cell_type":{"897ff552":"code","e8dddf22":"code","6da7bbcc":"code","64da2cb0":"code","153e2ca0":"code","8fe30646":"markdown"},"source":{"897ff552":"import pandas as pd\nimport itertools\nfrom datetime import datetime","e8dddf22":"df = pd.read_csv('..\/input\/order-brushing-dataset-shopee-code-league-week-1\/order_brush_order.csv')\ndf.sort_values(['shopid', 'event_time'], ascending=[True, True], inplace=True)\nshopid_grouped = df.groupby('shopid')","6da7bbcc":"#transform time\nfmt = '%Y-%m-%d %H:%M:%S'\n\ndef transform_time(ts):\n    return datetime.strptime(str(ts), fmt)\n\n# Returns time difference in minutes\ndef time_difference(ts1, ts2):\n    time_diff = transform_time(ts2)-transform_time(ts1)\n    return int(round(time_diff.total_seconds()\/60))","64da2cb0":"# Takes in dataframe and returns array of suspicious user ids\ndef filter_suspicious_users(df):\n    if len(df) <= 2:\n        return []\n    \n    df = df.reset_index(drop=True)\n\n    # Find row where the difference from the last row is 60 mins or less\n    stop_row_index = 0\n    last_row = df.iloc[-1]\n    for index, row in df.iterrows():\n        if time_difference(row['event_time'], last_row['event_time']) <= 60:\n            stop_row_index = index\n            break\n\n    limit = stop_row_index + 1\n    last_row_index = df.last_valid_index()\n    \n    # Interate through rows looking for suspicious users in 6o min window\n    results = []\n    for index, row in itertools.islice(df.iterrows(), limit):\n        user_count = {}\n        order_count = 1\n        ts1 = row['event_time']\n        if index < last_row_index:\n                index+=1\n        else:\n            break\n        user_count[row['userid']] = 1\n        \n        # Add all user ids and order counts within 60 mins window to user_count\n        while (time_difference(ts1, df.iloc[index, 3]) <= 60 and index <= last_row_index):\n            userid = df.iloc[index, 2]\n            order_count+=1\n            if userid in user_count:\n                user_count[userid] = user_count[userid] + 1\n            else:\n                user_count[userid] = 1\n            if index < last_row_index:\n                index+=1\n            else:\n                break\n        \n        conc_rate = order_count\/len(user_count)\n\n        if conc_rate >= 3:\n            highest = max(user_count.values())\n            users = [k for k, v in user_count.items() if v == highest]\n            results.append(users)\n    results = [item for sublist in results for item in sublist]\n    return results","153e2ca0":"results = []\nfor name, group in shopid_grouped:\n    # Call filter_suspicious_users which returns array of users\n    # Append shopid (name) and userids to results\n    user_id_arr = filter_suspicious_users(group)\n    if len(user_id_arr) > 1:\n        user_id_arr.sort()\n        userids = '&'.join(map(str, user_id_arr))\n        results.append([name, userids])\n    elif len(user_id_arr) == 1:\n        results.append([name, user_id_arr[0]])\n    else:\n        results.append([name, 0])\n\nresults_df = pd.DataFrame(results, columns=['shopid', 'userid'])\nresults_df.head()","8fe30646":"My solution for order brushing. Score is 0.788, there's room to improve!"}}