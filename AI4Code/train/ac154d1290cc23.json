{"cell_type":{"cc235c4e":"code","3c4d1ddc":"code","a190f44d":"code","ec11d175":"code","2dccab72":"code","aab955f8":"code","ad35b784":"code","b8fec2fa":"code","2f7b0c6c":"code","f21733f4":"code","d76c30ea":"code","6a8020b9":"code","b49e9424":"code","8e22bbbe":"code","8a18c03c":"code","a685db6d":"code","5b9b6985":"code","e68163ca":"code","c630f612":"markdown","0b5d44d9":"markdown","7af8c478":"markdown","c8676d95":"markdown","33a42925":"markdown","d1e21901":"markdown","8636d189":"markdown","a03c1ef0":"markdown","c8880d3a":"markdown","b0fe1be0":"markdown","fd92f4c9":"markdown","51791b4a":"markdown","ee1d0675":"markdown"},"source":{"cc235c4e":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\n\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score, f1_score, plot_roc_curve\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3c4d1ddc":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf.head()","a190f44d":"df['Species'].value_counts()","ec11d175":"df.hist(figsize=(15,15))\nplt.show()","2dccab72":"pl=sns.relplot(x='SepalLengthCm',y='SepalWidthCm',data=df,hue='Species',style='Species')\npl.fig.set_size_inches(10,5)\nplt.show()","aab955f8":"pl2=sns.relplot(x='PetalLengthCm',y='PetalWidthCm',data=df,hue='Species',style='Species')\npl2.fig.set_size_inches(10,5)\nplt.show()","ad35b784":"sns.pairplot(df,hue=\"Species\")\nplt.show()","b8fec2fa":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.boxplot(x='Species',y='PetalLengthCm',data=df)\nplt.subplot(2,2,2)\nsns.boxplot(x='Species',y='PetalWidthCm',data=df)\nplt.subplot(2,2,3)\nsns.boxplot(x='Species',y='SepalLengthCm',data=df)\nplt.subplot(2,2,4)\nsns.boxplot(x='Species',y='SepalWidthCm',data=df)\nplt.show()","2f7b0c6c":"plt.subplots(figsize=(10,7))\nsns.boxplot(data=df[['SepalWidthCm','SepalLengthCm','PetalWidthCm','PetalLengthCm']]).set_title(\"Distribution of Sepal_length, Sepal_width, petal_length and petal_width of 3 flowers\")\nplt.show()","f21733f4":"df.plot.area(y=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm'],alpha=0.4,figsize=(12, 6));","d76c30ea":"plt.subplots(figsize = (8,8))\nsns.heatmap(df.corr(),annot=True,fmt=\"f\").set_title(\"Corelation of attributes (petal length,width and sepal length,width) among Iris species\")\nplt.show()","6a8020b9":"label = LabelEncoder()\ndf['Species_cat'] = label.fit_transform(df['Species'])\ndf","b49e9424":"df['Species_cat'].value_counts()","8e22bbbe":"x = df.drop(['Species','Species_cat','Id'],axis = 1)\ny = df['Species_cat']","8a18c03c":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)","a685db6d":"#define dictionary to store values\nresult = {'name':[],'accuracy':[],'cross_val':[],'Recall Score':[],'Percision Score':[],'F1 Score':[]}\n\ndef models(name,mod,x_t,y_t,x_tes,y_tes,x_source,y_source):\n    \n    #Fit model\n    mod.fit(x_t,y_t)\n    \n    #Predict Model\n    pred = mod.predict(x_tes)\n    \n    #Accuracy Score\n    accuracy = accuracy_score(y_tes,pred)\n    \n    #Cross Validation Score\n    cross_validation = cross_val_score(mod,x_source,y_source,cv=5)\n    print(\"Accuracy Is : \",round(accuracy*100,4),\"%\")\n    \n    print(\"-------------------------------------------\")   \n    \n    print('Cross validations mean score ',round(np.mean(cross_validation)*100,4))\n    \n    print(\"-------------------------------------------\")\n    \n    #Confusion Metrix\n    print(confusion_matrix(y_tes, pred))\n    \n    print(\"-------------------------------------------\")    \n    \n    #Recall Score , Percision Score, F1 Score\n    print(\"Recall Score :\",recall_score(y_tes, pred, average='weighted'))\n    print(\"Percision Score :\",precision_score(y_tes, pred, average='weighted'))\n    print(\"F1 Score :\",f1_score(y_tes, pred, average='weighted'))\n    \n    #store values to dictionary\n    result['name'].append(name)\n    result['accuracy'].append(round(accuracy*100,4))\n    result['cross_val'].append(round(np.mean(cross_validation)*100,4))\n    result['Recall Score'].append(recall_score(y_tes, pred, average='weighted'))\n    result['Percision Score'].append(precision_score(y_tes, pred, average='weighted'))\n    result['F1 Score'].append(f1_score(y_tes, pred, average='weighted'))\n    \n    \n#define models\nm1 = LogisticRegression()\nm2 = DecisionTreeClassifier()\nm3 = RandomForestClassifier()\nm4 = ExtraTreesClassifier()\nm5 = XGBClassifier()\n\n#define the models dictionary\nmodels_dict = {'Logistic Regressor':m1,'Decision Tree Classifier':m2,'Random Forest Classifier':m3,'Extra Tree Classifier':m4,'XG Boost Classifier':m5}\n\n#train & test each models by passing data to the models function\nfor i in models_dict.keys():\n  print(i,\"----------------------------------------------------------\") #print model name\n  print(' ')\n  models(i,models_dict[i],x_train,y_train,x_test,y_test,x,y) #pass data to models function\n  print(' \\n')\n\n#store result into pandas dataframe & sort by cross validation\nresult_df = pd.DataFrame(result)\noutput_df = result_df.sort_values(by='accuracy',ascending=False)","5b9b6985":"#display result of all the models\noutput_df","e68163ca":"# Define plot space\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define x and y axes\nax.plot(output_df.name, \n        output_df.cross_val,\n        marker = 'o',\n        color = 'red')\n\n# Set plot title and axes labels\nax.set(title = \"Models Cross Validation Accuracy\",\n       #xlabel = \"Models\",\n       ylabel = \"Cross Validation Mean Score\")\nplt.xticks(rotation='vertical',size=12)\nplt.show()","c630f612":"# Import Libraries","0b5d44d9":"# Box Plot","7af8c478":"## Models with Classification Reports as a Data Frame","c8676d95":"# Exploratory Data Analysis","33a42925":"## Correlation Between Each Features","d1e21901":"# Area Plot","8636d189":"# Pair Plot","a03c1ef0":"## Model Bulding with Pipeline","c8880d3a":"## *Logistic Regression model gives higher accuracy & cross validation menas score so we can consider that model the best matching model for this dataset*","b0fe1be0":"# How Values Distributed In Each Features","fd92f4c9":"## Pre Processing","51791b4a":"# Scatter Plot","ee1d0675":"## Visualiza the Each Model Cross Validation Mean Score"}}