{"cell_type":{"dcad397f":"code","19124756":"code","4a23fe07":"code","e6ffab3f":"code","a482869e":"code","c29e5f1c":"code","4c7e6364":"code","6cba4743":"code","115fbf02":"code","d569f929":"code","ed1794c0":"code","12f6e59e":"code","0dc5c0ab":"code","e8e3f428":"code","32827a79":"code","76c10d9d":"code","a6d5e9f4":"code","3b2a5bdf":"code","b0687514":"code","9e183cef":"code","21b23e3d":"code","cac4cd2b":"code","2073b18a":"code","23558519":"code","e6752bad":"code","de562b5e":"code","f7bc7cfd":"code","3fb26f3c":"code","55363f5c":"code","4d370eb4":"code","050bc67e":"code","3ddfd7b4":"code","c6ffd261":"code","b5f5abae":"code","19501c5f":"code","2254918e":"code","3cea70a7":"code","7507324f":"code","ac726222":"code","08a2d910":"code","66b78442":"code","098f3b2c":"code","92084599":"code","715a291b":"code","50e35fed":"code","4556ef89":"code","fdd005db":"code","0be38a81":"code","d0c6b26f":"code","6b053104":"markdown","887d7e10":"markdown","11b543aa":"markdown","69256b20":"markdown"},"source":{"dcad397f":"import numpy\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom numpy import nan, inf\n\n\n","19124756":" !pip install xgboost","4a23fe07":"df_mean_train = pd.read_csv(\"..\/input\/d\/mohammednamory\/latest-gp\/train_3_10.csv\")\ndf_mean_test = pd.read_csv(\"..\/input\/d\/mohammednamory\/latest-gp\/test_3_10.csv\")\ndf_maxmin_train = pd.read_csv(\"..\/input\/d\/mohammednamory\/latest-gp\/train_mean_3_10_.csv\")\ndf_maxmin_test = pd.read_csv(\"..\/input\/d\/mohammednamory\/latest-gp\/test_mean_3_10_.csv\")","e6ffab3f":"df_mean_test.shape","a482869e":"Field_ID = df_mean_test[\"Field_ID\"]","c29e5f1c":"df_mean_train.shape","4c7e6364":"df_mean_train.head()","6cba4743":"df_mean_train.shape","115fbf02":"df_mean_test.shape","d569f929":"df_mean_test.head()","ed1794c0":"df_mean_train.drop(columns={'Unnamed: 0', \"Field_ID\"}, inplace= True)\ndf_mean_test.drop(columns={'Unnamed: 0',\"Field_ID\"}, inplace= True)\n","12f6e59e":"df_maxmin_train.drop(columns={'Unnamed: 0', \"Field_ID\"}, inplace= True)\ndf_maxmin_test.drop(columns={'Unnamed: 0',\"Field_ID\"}, inplace= True)","0dc5c0ab":"df_mean_train.hist(figsize=(20,20));","e8e3f428":"df_maxmin_train['GDVI_mean']=df_mean_train[['GDVI_3','GDVI_4','GDVI_5','GDVI_6','GDVI_7','GDVI_8','GDVI_9',\"GDVI_10\"]].mean(axis=1)\ndf_maxmin_test['GDVI_mean']=df_mean_test[['GDVI_3','GDVI_4','GDVI_5','GDVI_6','GDVI_7','GDVI_8','GDVI_9',\"GDVI_10\"]].mean(axis=1)\n\ndf_maxmin_train['GNDVI_mean']=df_mean_train[['GNDVI_3','GNDVI_4','GNDVI_5','GNDVI_6','GNDVI_7','GNDVI_8','GNDVI_9',\"GNDVI_10\"]].mean(axis=1)\ndf_maxmin_test['GNDVI_mean']=df_mean_test[['GNDVI_3','GNDVI_4','GNDVI_5','GNDVI_6','GNDVI_7','GNDVI_8','GNDVI_9',\"GNDVI_10\"]].mean(axis=1)\n\ndf_maxmin_train['GOSAVI_mean']=df_mean_train[['GOSAVI_3','GOSAVI_4','GOSAVI_5','GOSAVI_6','GOSAVI_7','GOSAVI_8','GOSAVI_9',\"GOSAVI_10\"]].mean(axis=1)\ndf_maxmin_test['GOSAVI_mean']=df_mean_test[['GOSAVI_3','GOSAVI_4','GOSAVI_5','GOSAVI_6','GOSAVI_7','GOSAVI_8','GOSAVI_9',\"GOSAVI_10\"]].mean(axis=1)\n\ndf_maxmin_train['EVI_mean']=df_mean_train[['EVI_3','EVI_4','EVI_5','EVI_6','EVI_7','EVI_8','EVI_9',\"EVI_10\"]].mean(axis=1)\ndf_maxmin_test['EVI_mean']=df_mean_test[['EVI_3','EVI_4','EVI_5','EVI_6','EVI_7','EVI_8','EVI_9',\"EVI_10\"]].mean(axis=1)\n\ndf_maxmin_train['AVI_mean']=df_mean_train[['AVI_3','AVI_4','AVI_5','AVI_6','AVI_7','AVI_8','AVI_9',\"AVI_10\"]].mean(axis=1)\ndf_maxmin_test['AVI_mean']=df_mean_test[['AVI_3','AVI_4','AVI_5','AVI_6','AVI_7','AVI_8','AVI_9',\"AVI_10\"]].mean(axis=1)\n\ndf_maxmin_train['EVI2_mean']=df_mean_train[['EVI2_3','EVI2_4','EVI2_5','EVI2_6','EVI2_7','EVI2_8','EVI2_9',\"EVI2_10\"]].mean(axis=1)\ndf_maxmin_test['EVI2_mean']=df_mean_test[['EVI2_3','EVI2_4','EVI2_5','EVI2_6','EVI2_7','EVI2_8','EVI2_9',\"EVI2_10\"]].mean(axis=1)\n\ndf_maxmin_train['NDVI_mean']=df_mean_train[['NDVI_3','NDVI_4','NDVI_5','NDVI_6','NDVI_7','NDVI_8','NDVI_9',\"NDVI_10\"]].mean(axis=1)\ndf_maxmin_test['NDVI_mean']=df_mean_test[['NDVI_3','NDVI_4','NDVI_5','NDVI_6','NDVI_7','NDVI_8','NDVI_9',\"NDVI_10\"]].mean(axis=1)","32827a79":"df_maxmin_train['GDVI_std']=df_mean_train[['GDVI_3','GDVI_4','GDVI_5','GDVI_6','GDVI_7','GDVI_8','GDVI_9',\"GDVI_10\"]].std(axis=1)\ndf_maxmin_test['GDVI_std']=df_mean_test[['GDVI_3','GDVI_4','GDVI_5','GDVI_6','GDVI_7','GDVI_8','GDVI_9',\"GDVI_10\"]].std(axis=1)\n\ndf_maxmin_train['GNDVI_std']=df_mean_train[['GNDVI_3','GNDVI_4','GNDVI_5','GNDVI_6','GNDVI_7','GNDVI_8','GNDVI_9',\"GNDVI_10\"]].std(axis=1)\ndf_maxmin_test['GNDVI_std']=df_mean_test[['GNDVI_3','GNDVI_4','GNDVI_5','GNDVI_6','GNDVI_7','GNDVI_8','GNDVI_9',\"GNDVI_10\"]].std(axis=1)\n\ndf_maxmin_train['GOSAVI_std']=df_mean_train[['GOSAVI_3','GOSAVI_4','GOSAVI_5','GOSAVI_6','GOSAVI_7','GOSAVI_8','GOSAVI_9',\"GOSAVI_10\"]].std(axis=1)\ndf_maxmin_test['GOSAVI_std']=df_mean_test[['GOSAVI_3','GOSAVI_4','GOSAVI_5','GOSAVI_6','GOSAVI_7','GOSAVI_8','GOSAVI_9',\"GOSAVI_10\"]].std(axis=1)\n\ndf_maxmin_train['EVI_std']=df_mean_train[['EVI_3','EVI_4','EVI_5','EVI_6','EVI_7','EVI_8','EVI_9',\"EVI_10\"]].std(axis=1)\ndf_maxmin_test['EVI_std']=df_mean_test[['EVI_3','EVI_4','EVI_5','EVI_6','EVI_7','EVI_8','EVI_9',\"EVI_10\"]].std(axis=1)\n\ndf_maxmin_train['AVI_std']=df_mean_train[['AVI_3','AVI_4','AVI_5','AVI_6','AVI_7','AVI_8','AVI_9',\"AVI_10\"]].std(axis=1)\ndf_maxmin_test['AVI_std']=df_mean_test[['AVI_3','AVI_4','AVI_5','AVI_6','AVI_7','AVI_8','AVI_9',\"AVI_10\"]].std(axis=1)\n\n\ndf_maxmin_train['EVI2_std']=df_mean_train[['EVI2_3','EVI2_4','EVI2_5','EVI2_6','EVI2_7','EVI2_8','EVI2_9',\"EVI2_10\"]].std(axis=1)\ndf_maxmin_test['EVI2_std']=df_mean_test[['EVI2_3','EVI2_4','EVI2_5','EVI2_6','EVI2_7','EVI2_8','EVI2_9',\"EVI2_10\"]].std(axis=1)\n\ndf_maxmin_train['NDVI_std']=df_mean_train[['NDVI_3','NDVI_4','NDVI_5','NDVI_6','NDVI_7','NDVI_8','NDVI_9',\"NDVI_10\"]].std(axis=1)\ndf_maxmin_test['NDVI_std']=df_mean_test[['NDVI_3','NDVI_4','NDVI_5','NDVI_6','NDVI_7','NDVI_8','NDVI_9',\"NDVI_10\"]].std(axis=1)","76c10d9d":"df_maxmin_train['GDVI_median']=df_mean_train[['GDVI_3','GDVI_4','GDVI_5','GDVI_6','GDVI_7','GDVI_8','GDVI_9',\"GDVI_10\"]].median(axis=1)\ndf_maxmin_test['GDVI_median']=df_mean_test[['GDVI_3','GDVI_4','GDVI_5','GDVI_6','GDVI_7','GDVI_8','GDVI_9',\"GDVI_10\"]].median(axis=1)\n\ndf_maxmin_train['GNDVI_median']=df_mean_train[['GNDVI_3','GNDVI_4','GNDVI_5','GNDVI_6','GNDVI_7','GNDVI_8','GNDVI_9',\"GNDVI_10\"]].median(axis=1)\ndf_maxmin_test['GNDVI_median']=df_mean_test[['GNDVI_3','GNDVI_4','GNDVI_5','GNDVI_6','GNDVI_7','GNDVI_8','GNDVI_9',\"GNDVI_10\"]].median(axis=1)\n\ndf_maxmin_train['GOSAVI_median']=df_mean_train[['GOSAVI_3','GOSAVI_4','GOSAVI_5','GOSAVI_6','GOSAVI_7','GOSAVI_8','GOSAVI_9',\"GOSAVI_10\"]].median(axis=1)\ndf_maxmin_test['GOSAVI_median']=df_mean_test[['GOSAVI_3','GOSAVI_4','GOSAVI_5','GOSAVI_6','GOSAVI_7','GOSAVI_8','GOSAVI_9',\"GOSAVI_10\"]].median(axis=1)\n\ndf_maxmin_train['EVI_median']=df_mean_train[['EVI_3','EVI_4','EVI_5','EVI_6','EVI_7','EVI_8','EVI_9',\"EVI_10\"]].median(axis=1)\ndf_maxmin_test['EVI_median']=df_mean_test[['EVI_3','EVI_4','EVI_5','EVI_6','EVI_7','EVI_8','EVI_9',\"EVI_10\"]].median(axis=1)\n\ndf_maxmin_train['AVI_median']=df_mean_train[['AVI_3','AVI_4','AVI_5','AVI_6','AVI_7','AVI_8','AVI_9',\"AVI_10\"]].median(axis=1)\ndf_maxmin_test['AVI_median']=df_mean_test[['AVI_3','AVI_4','AVI_5','AVI_6','AVI_7','AVI_8','AVI_9',\"AVI_10\"]].median(axis=1)\n\ndf_maxmin_train['EVI2_median']=df_mean_train[['EVI2_3','EVI2_4','EVI2_5','EVI2_6','EVI2_7','EVI2_8','EVI2_9',\"EVI2_10\"]].median(axis=1)\ndf_maxmin_test['EVI2_median']=df_mean_test[['EVI2_3','EVI2_4','EVI2_5','EVI2_6','EVI2_7','EVI2_8','EVI2_9',\"EVI2_10\"]].median(axis=1)\n\ndf_maxmin_train['NDVI_median']=df_mean_train[['NDVI_3','NDVI_4','NDVI_5','NDVI_6','NDVI_7','NDVI_8','NDVI_9',\"NDVI_10\"]].median(axis=1)\ndf_maxmin_test['NDVI_median']=df_mean_test[['NDVI_3','NDVI_4','NDVI_5','NDVI_6','NDVI_7','NDVI_8','NDVI_9',\"NDVI_10\"]].median(axis=1)","a6d5e9f4":"df_maxmin_train.head()","3b2a5bdf":"df_maxmin_test.head()","b0687514":"X_train = df_maxmin_train.drop(columns={\"Yield\",\"Year\",\"Quality\"}, axis = 0)\ny = df_maxmin_train[\"Yield\"]\nX_test = df_maxmin_test.drop(columns=[\"Year\"])","9e183cef":"X_train.head()","21b23e3d":"X_test.head()","cac4cd2b":"cols = X_train.columns","2073b18a":"def initial_eda(df):\n    if isinstance(df, pd.DataFrame):\n        total_na = df.isna().sum().sum()\n        print(\"Dimensions : %d rows, %d columns\" % (df.shape[0], df.shape[1]))\n        print(\"Total NA Values : %d \" % (total_na))\n        print(\"%38s %10s     %10s %10s\" % (\"Column Name\", \"Data Type\", \"#Distinct\", \"NA Values\"))\n        col_name = df.columns\n        dtyp = df.dtypes\n        uniq = df.nunique()\n        na_val = df.isna().sum()\n        for i in range(len(df.columns)):\n            print(\"%38s %10s   %10s %10s\" % (col_name[i], dtyp[i], uniq[i], na_val[i]))\n        \n    else:\n        print(\"Expect a DataFrame but got a %15s\" % (type(df)))","23558519":"initial_eda(X_train)","e6752bad":"initial_eda(X_test)","de562b5e":"X_train.drop(columns={'NPCRI_max', \"NPCRI_min\",\"NPCRI_10\",\"NPCRI_9\",\"NPCRI_8\",\"NPCRI_7\",\"NPCRI_6\",\"NPCRI_5\",\"NPCRI_4\",\"NPCRI_3\"}, inplace= True)\nX_test.drop(columns={'NPCRI_max', \"NPCRI_min\",\"NPCRI_10\",\"NPCRI_9\",\"NPCRI_8\",\"NPCRI_7\",\"NPCRI_6\",\"NPCRI_5\",\"NPCRI_4\",\"NPCRI_3\"}, inplace= True)","f7bc7cfd":"X_train.fillna(X_train.mean(),inplace = True)\nX_test.fillna(X_test.mean(),inplace = True)","3fb26f3c":"df_mean_train[\"Yield\"].mean()","55363f5c":"f,ax=plt.subplots(1,2,figsize=(18,8))\n\nax[0] = df_maxmin_train['Year'].value_counts().plot.pie(ax=ax[0],shadow=True)\nax[0].set_title('years')\n\n\n#f, ax = plt.subplots(figsize=(6, 8))\nax[1] = sns.histplot(x=\"Yield\", data=df_maxmin_train, palette=\"Set1\")\nax[1].set_title(\"Yield distribution over years\")\n\nplt.show()","4d370eb4":"df_maxmin_train[\"Yield>3.16\"] = df_maxmin_train[\"Yield\"] >= 3.168022495755512\n","050bc67e":"f, ax = plt.subplots(figsize=(8, 6))\nax = sns.countplot(y=\"Yield>3.16\", data=df_maxmin_train, palette=\"Set1\")\nax.set_title(\"Yield distribution of given years\")\nplt.show()","3ddfd7b4":"f, ax = plt.subplots(figsize=(10, 8))\nax = sns.countplot(x=\"Yield>3.16\", hue=\"Quality\", data=df_maxmin_train, palette=\"Set1\")\nax.set_title(\"Frequency distribution of Yield vs Field Quality\")\nplt.show()","c6ffd261":"f, ax = plt.subplots(figsize=(12, 8))\nax = sns.countplot(x=\"Quality\", data=df_maxmin_train, palette=\"Set1\")\nax.set_title(\"Frequency distribution of occupation variable\")\nax.set_xticklabels(df_mean_train.Quality.value_counts().index)\nplt.show()","b5f5abae":"for col in cols:\n    f, ax = plt.subplots(figsize=(10,8))\n    x = df_maxmin_train[col]\n    ax = sns.distplot(x, bins=10, color='blue')\n    ax.set_title(\"Distribution of \"+ col)\n    plt.show()","19501c5f":"for col in cols:\n    \n    f, ax = plt.subplots(figsize=(10,8))\n    x = df_maxmin_train[col]\n    ax = sns.boxplot(x)\n    ax.set_title('Visualize outliers in'+col +'variable')\n    plt.show()","2254918e":"X_train.corr().style.format(\"{:.4}\").background_gradient(cmap=plt.get_cmap('coolwarm'), axis=1)","3cea70a7":"X_train.head()","7507324f":"X_test.head()","ac726222":"from sklearn.preprocessing import RobustScaler\nscaler = RobustScaler().fit(X_train)","08a2d910":"train_scaled = scaler.transform(X_train)\ntest_scaled = scaler.transform(X_test)","66b78442":"X_train_scaled = pd.DataFrame(train_scaled, index = X_train.index, columns=X_train.columns)\nX_test_scaled = pd.DataFrame(test_scaled, index= X_test.index, columns=X_test.columns)\n","098f3b2c":"import xgboost as xgb\n\nclf = xgb.XGBRegressor(n_estimators=100, random_state=0)\nclf.fit(X_train_scaled, y)\nprint(clf.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(clf.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(20).plot(kind='barh')\nplt.show()","92084599":"feat_importances.nlargest(20)","715a291b":"Selected_features = ['tmmn','tmmx',\"EVI2_mean\",\"NDVI_6\",\"EVI2_10\",\"pr\",\"EVI2_7\",\"GOSAVI_mean\",\"EVI2_9\",\"vpd\",\"EVI2_min\"\n                     ,\"GOSAVI_std\",\"EVI_mean\",\"EVI2_6\",\"GNDVI_min\",\"soil_clay_5-15cm_mean\",\"soil_silt_5-15cm_mean\",\"EVI2_4\",\"AVI_median\",\"EVI_std\"]\nX_train_selected = X_train_scaled[Selected_features].copy()\nX_test_selected = X_test_scaled[Selected_features].copy()","50e35fed":"X_train_selected.head()","4556ef89":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error as MSE\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error","fdd005db":"best_regressor = xgb.XGBRegressor(base_score=0.5, booster='gblinear', colsample_bylevel=None,\n             colsample_bynode=None, eta=0.5,\n             eval_metric='rmse', gpu_id=-1, importance_type='gain',\n             interaction_constraints=None, learning_rate=0.5,\n             max_delta_step=None, missing=nan,\n             monotone_constraints=None, n_estimators=500, n_jobs=4, nthread=-1,\n             num_parallel_tree=None, random_state=162, reg_alpha=0, reg_lambda=0,\n             scale_pos_weight=1, tree_method=None,\n             validate_parameters=1, verbosity=None)","0be38a81":"kf = KFold(n_splits =9,shuffle=True,random_state=160)\nfeats = pd.DataFrame({'features': X_train_selected.columns}) \ngbm_predictions = []\ncv_score_ = 0\noof_preds = np.zeros((df_mean_train.shape[0],))\n\n\nfor i,(tr_index,test_index) in enumerate(kf.split(X_train_selected,y)):\n  \n    print()\n    print(f'######### FOLD {i+1} \/ {kf.n_splits} ')\n    X_train,y_train = X_train_selected.iloc[tr_index,:],y[tr_index]\n    X_test,y_test = X_train_selected.iloc[test_index,:],y[test_index]\n  \n  \n    gbm = best_regressor\n \n    gbm.fit(X_train,y_train,eval_set = [(X_test, y_test)],early_stopping_rounds  = 200,verbose=100)\n  \n    cv_score_ += mean_squared_error(y_test, gbm.predict(X_test), squared=False) \/ kf.n_splits\n    oof_preds[test_index] = gbm.predict(X_test)\n  \n    preds = gbm.predict(X_test_selected[X_train_selected.columns])\n    print(X_test_selected[X_train_selected.columns].shape)\n    gbm_predictions.append(preds)\n\n#     feats[f'Fold {i}'] = gbm.feature_importances_\n\nfeats['Importances'] = feats.mean(axis=1)\nprint( ' CV RMSE : ',cv_score_)\npreds_xgb = np.average(gbm_predictions, axis=0)\nprint(preds_xgb.shape)","d0c6b26f":"predictionsdf = pd.DataFrame()\n\npredictionsdf[\"id\"] = Field_ID\npredictionsdf[\"Yield\"] = preds_xgb\n\n\n\npredictionsdf.to_csv('submission_gb.csv', index=False, header=predictionsdf.columns)","6b053104":"# XGBoost","887d7e10":"# Feature Engineering And Selection","11b543aa":"# Exploratory Data Analysis","69256b20":"# Data Preparation"}}