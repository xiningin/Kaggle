{"cell_type":{"c0f36616":"code","522f894b":"code","96f1fb88":"code","eb805897":"code","32c3eee1":"code","d588b689":"code","388e68d3":"code","1682c70a":"code","c2e9080f":"code","9388cbf1":"code","6152aa08":"code","e846dc7a":"code","7eef7228":"code","72a30ce1":"code","8478c84b":"code","1893db88":"markdown","ba98a6cd":"markdown","4e7c495a":"markdown","d4a7e8ae":"markdown","1628c940":"markdown","c431041c":"markdown","c8721352":"markdown","b1a71a4f":"markdown"},"source":{"c0f36616":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","522f894b":"#Importing Modules and Cleaning Data\nfrom sklearn.model_selection import train_test_split,GridSearchCV,RandomizedSearchCV\nfrom sklearn.metrics import confusion_matrix,accuracy_score,roc_auc_score,f1_score\nfrom sklearn.neighbors import KNeighborsClassifier,kneighbors_graph\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport xgboost as xgb\n\ncam = pd.read_csv('\/kaggle\/input\/credit-card-data\/binaryclassifier.csv')\ncam.info()\n","96f1fb88":"#Finding if any customers were targeted by multiple campaigns\nrepeat_customers = cam.customer_id.value_counts()\nrepeat_customers = repeat_customers[repeat_customers > 1]\nlen(repeat_customers)","eb805897":"# Plotting number of customers contacted by campaign\nplot1data = cam.pivot_table(columns = 'branch',index = 'campaign',values = 'customer_id',aggfunc='count')\nplot1 = sns.heatmap(plot1data,annot=True,cmap='Greens', fmt='g').set_title(\"Number of customers contacted by branch per campaign\")","32c3eee1":"plot2data = cam.pivot_table(columns = 'branch',index = 'campaign',values = 'response',aggfunc='sum')\nplot2 = sns.heatmap(plot2data,annot=True,cmap='Greens', fmt='g').set_title(\"Number of customer responses by branch per campaign\")","d588b689":"#Cleaning Data and setting Response variables\ncode_dict = {'M':1,'F':0}\ncam.gender = cam.gender.map(code_dict)\nX = cam.iloc[:,[0,1,8,9,12,13,14,16,17,18,20,21,22,23,24,25,26,27,28]]\ny = cam.response\nX = X.set_index(['customer_id','campaign'])\n\n#Splitting Data into training sets and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n","388e68d3":"#Hyperparameter Tuning for XGBoost Classification\n\nxgparam_grid = {'max_depth':[3,4,5],'learning_rate':[.1,.2],'n_estimators':[50,100]}\nbc = xgb.XGBClassifier(objective=\"binary:logistic\")\nsearcher = GridSearchCV(estimator = bc,param_grid=xgparam_grid,cv=3,scoring = 'f1')\nsearcher.fit(X_train,y_train)\nsearcher.best_params_","1682c70a":"searcher.best_score_","c2e9080f":"#Plotting a confusion matrix for the tuned Classifier\n\nbc = xgb.XGBClassifier(max_depth=5,n_estimators=100,learning_rate=0.1,objective=\"binary:logistic\",scale_pos_weight = 2)\nbc.fit(X_train,y_train)\ny_pred = bc.predict(X_test)\nconfusion_matrix(y_test,y_pred)\n","9388cbf1":"#Examining ROC-AUC score for goodness of model fit\n\nroc_auc_score(y_test,y_pred)","6152aa08":"#Now we take a look at the decision trees the XGBoost model factored in the analysis\nxgb.plot_tree(bc)","e846dc7a":"#Plotting Feature Importances with XGBoost\nxgb.plot_importance(bc)","7eef7228":"#Setting up a result matrix\nXfinal = X_test.copy()\nXfinal['prediction'] = bc.predict(X_test)\nXfinal = Xfinal.reset_index()\n\n\n#Plotting Income Distribution of those targeted by Campaigns\nplot3=sns.distplot(Xfinal[Xfinal.prediction == 1]['income'],color = 'g',kde_kws = {\"label\" : 'Responded'})\np1ot3=sns.distplot(Xfinal[Xfinal.prediction == 0]['income'],color = 'r',kde_kws = {\"label\" : 'Didnt Respond'})\nplot3.set_title(\"Income Distribution of those targeted by Campaigns\")","72a30ce1":"plot4=sns.distplot(Xfinal[Xfinal.prediction == 1]['months_current_account'],color = 'g',kde_kws = {\"label\" : 'Responded'})\np1ot4=sns.distplot(Xfinal[Xfinal.prediction == 0]['months_current_account'],color = 'r',kde_kws = {\"label\" : 'Didnt Respond'})\nplot4.set_title(\"Account Distribution of those targeted by Campaigns\")","8478c84b":"# Number of customers contacted more than once\nset1 = set(repeat_customers.index)\n\n#Number of customers who are predicted to respond as per the model\nset2 = set(Xfinal[Xfinal.prediction == 1]['customer_id'])\n\n#the customers both sets have in common as a proportion of the 275 respondents the model predicted.\n\nlen(set1.intersection(set2))\/275\n","1893db88":"We observe that a customers income and months the current account were held are key factors in determining their positive response to the advertising campaign. But some EDA will clarify just by how much.","ba98a6cd":"We can see that there is a threshold for customer responses at $55,000 approximately, the higher income clients of the bank are more responsive to ad targeting campaigns. Let's see if length of time the account was held has any effect on responses.","4e7c495a":"It seems that variablity Account Balances didn't have as much of an effect on whether customers would respond to campaigns. Lets see if persistence pays off by taking a look at how many positive responses came from customers contacted more than once.","d4a7e8ae":"In conclusion the model indicates that customers making at or above $55,000 are likely to respond and an 8 percent response rate for customers contacted more than once.","1628c940":"The data shows that there are several thousand customers who were contacted during multiple campaigns.So a composite index is in order to work with the data. Now for EDA we take a look at how many customers contacted by branch and campaign and what the response was.","c431041c":"As identified by the OP the response variable is **purchase** , our first step is to check if the customer ID's are unique, the code to do this is below:","c8721352":"The data shows little to no variance between branches in outreach and responses although it shows that Campaigns 3 and 4 were either unsuccessful or unrecorded. Now we move to fitting an XGBoost Logistic regression model to the data for further insights:","b1a71a4f":"We will perform 3 fold cross validation and take a look at the f1 score that factors in precision and recall to garner the best results."}}