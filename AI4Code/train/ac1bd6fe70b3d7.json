{"cell_type":{"40993a9e":"code","1211d741":"code","0b947697":"code","3d0a5a7f":"code","9f9e1bb8":"code","ad676c64":"code","aa3f4a01":"code","c1db8964":"code","441dc434":"code","d6e46dec":"code","803b2590":"code","c57457dd":"code","3a317300":"code","762de3ab":"code","7ab5fb80":"code","ff23fc80":"code","9aca7140":"code","9dad50e0":"code","cb89addb":"code","f656e642":"code","5fdc67d6":"code","45c441ce":"code","15bb16c5":"code","58e5fbe6":"markdown","981799fc":"markdown","059236a0":"markdown","3f79c1a8":"markdown","6f45e267":"markdown","17ebde01":"markdown","8ee0d0fd":"markdown","0d78646b":"markdown"},"source":{"40993a9e":"import pandas as pd \nimport numpy as np\nimport nltk\n\n# CountVectorizer will help calculate word counts\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Import the string dictionary that we'll use to remove punctuation\nimport string","1211d741":"# Import datasets\n\ntrain = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv')","0b947697":"# The row with index 13133 has NaN text, so remove it from the dataset\n\ntrain[train['text'].isna()]","3d0a5a7f":"train = train.dropna()\ntrain[train['text'].isna()]","9f9e1bb8":"# Make all the text lowercase - casing doesn't matter when \n# we choose our selected text.\ntrain['text'] = train['text'].apply(lambda x: x.lower())\ntest['text'] = test['text'].apply(lambda x: x.lower())\n\nimport re\nimport time\nstart_time=time.time()\n# remove '\\\\n'\ntrain['text'] = train['text'].map(lambda x: re.sub('\\\\n',' ',str(x)))\n    \n# remove any text starting with User... \ntrain['text'] = train['text'].map(lambda x: re.sub(\"\\[\\[User.*\",'',str(x)))\n    \n# remove IP addresses or user IDs\ntrain['text'] = train['text'].map(lambda x: re.sub(\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\",'',str(x)))\n    \n#remove http links in the text\ntrain['text'] = train['text'].map(lambda x: re.sub(\"(http:\/\/.*?\\s)|(http:\/\/.*)\",'',str(x)))\n\nend_time=time.time()\nprint(\"total time\",end_time-start_time)\n","ad676c64":"# Make training\/test split\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val = train_test_split(\n    train, train_size = 0.9, random_state = 0)","aa3f4a01":"import re\nfrom nltk.stem import WordNetLemmatizer \n\nwords = nltk.corpus.stopwords.words('english')\nwords.remove('no')\nwords.remove('not')\nwn = WordNetLemmatizer() \n\na = ['i','to','the','a','my','you','and','it','is','in','for','im','of','me','on','so','have','that','be','its','with','day','at','was']\n\ni=1\n\n\ndef clean_txt(txt):\n    new = ' '.join([w for w in txt.split() if len(w)>2])\n    dup = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', new)\n    unw = \" \".join([u for u in dup.split() if u.lower() not in a])\n    txt = \" \".join([wn.lemmatize(word) for word in unw.split()])\n    alp = \" \".join([d for d in txt.split() if d.lower() in words or not d.isalpha()])\n    return alp\n\nX_train['selected_text'] = X_train['selected_text'].apply(lambda x: clean_txt(x))","c1db8964":"X_train[:10]","441dc434":"pos_train = X_train[X_train['sentiment'] == 'positive']\nneutral_train = X_train[X_train['sentiment'] == 'neutral']\nneg_train = X_train[X_train['sentiment'] == 'negative']","d6e46dec":"# Use CountVectorizer to get the word counts within each dataset\n\ncv = CountVectorizer(analyzer='word',max_df=0.90, min_df=0.00,stop_words='english')\n\nX_train_cv = cv.fit_transform(X_train['text'])\n\nX_pos = cv.transform(pos_train['text'])\nX_neutral = cv.transform(neutral_train['text'])\nX_neg = cv.transform(neg_train['text'])\n\n\npos_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())","803b2590":"\n# Create dictionaries of the words within each sentiment group, where the values are the proportions of tweets that \n# contain those words\n\npos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_count_df[k].sum()\n    neutral = neutral_count_df[k].sum()\n    neg = neg_count_df[k].sum()\n    pos_words[k] = pos\/pos_train.shape[0]\n    neutral_words[k] = neutral\/neutral_train.shape[0]\n    neg_words[k] = neg\/neg_train.shape[0]\n    \n# We need to account for the fact that there will be a lot of words used in tweets of every sentiment.  \n# Therefore, we reassign the values in the dictionary by subtracting the proportion of tweets in the other \n# sentiments that use that word.\nneg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key]) \n        \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key]) \n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key]) ","c57457dd":"def calculate_selected_text(df_row, alpha = 0):\n    #LaPlace Vars\n    a = 1\n    v_a = a * 100\n    \n    tweet = df_row['text']\n    words = tweet.split()\n    sentiment = df_row['sentiment']\n    max_len = -1\n    if(sentiment == 'neutral'):\n        if(len(words) < 6):\n            return tweet\n        dict_to_use = neutral_words_adj\n    elif(sentiment == 'positive'):\n        dict_to_use = pos_words_adj # Calculate word weights using the pos_words dictionary\n        max_len = 1\n    elif(sentiment == 'negative'):\n        dict_to_use = neg_words_adj # Calculate word weights using the neg_words dictionary\n        \n    words_len = len(words)\n    #if(max_len == 1 and (words_len < 12 or words_len > 20)):\n    #    subsets = [words[i-1:i] for i in range(words_len+1)]\n    #else:\n    subsets = [words[i:j+1] for i in range(words_len) for j in range(i,words_len)]\n        \n    score = 0\n    selection_str = '' # This will be our choice\n    lst = sorted(subsets, key = len) # Sort candidates by length\n    \n    \n    for i in range(len(subsets)):\n        \n        new_sum = 0 # Sum for the current substring\n        \n        # Calculate the sum of weights for each word in the substring\n        for p in range(len(lst[i])):\n            if(lst[i][p].translate(str.maketrans('','',string.punctuation)) in dict_to_use.keys()):\n                new_sum += dict_to_use[lst[i][p].translate(str.maketrans('','',string.punctuation))]\n  \n            \n        # If the sum is greater than the score, update our current selection\n        if(new_sum > score + alpha):\n            score = new_sum\n            selection_str = lst[i]\n            alpha += 0.001\n\n    # If we didn't find good substrings, return the whole text\n    if(len(selection_str) == 0):\n        selection_str = words   \n        #if(max_len == 1):\n        #    selection_str = words[0:1]\n        \n    return ' '.join(selection_str)","3a317300":"pd.options.mode.chained_assignment = None","762de3ab":"alpha = 0.0015\n\nX_val['predicted_selection'] = ''\n\nfor index, row in X_val.iterrows():\n    \n    selected_text = calculate_selected_text(row, alpha)\n    \n    X_val.loc[X_val['textID'] == row['textID'], ['predicted_selection']] = selected_text","7ab5fb80":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","ff23fc80":"X_val['jaccard'] = X_val.apply(lambda x: jaccard(x['selected_text'], x['predicted_selection']), axis = 1)\n\nprint('The jaccard score for the validation set is:', np.mean(X_val['jaccard']))","9aca7140":"X_val","9dad50e0":"pos_tr = train[train['sentiment'] == 'positive']\nneutral_tr = train[train['sentiment'] == 'neutral']\nneg_tr = train[train['sentiment'] == 'negative']","cb89addb":"cv = CountVectorizer(analyzer='word',max_df=0.95, min_df=2,stop_words='english')\n\nfinal_cv = cv.fit_transform(train['text'])\n\nX_pos = cv.transform(pos_tr['text'])\nX_neutral = cv.transform(neutral_tr['text'])\nX_neg = cv.transform(neg_tr['text'])\n\npos_final_count_df = pd.DataFrame(X_pos.toarray(), columns=cv.get_feature_names())\nneutral_final_count_df = pd.DataFrame(X_neutral.toarray(), columns=cv.get_feature_names())\nneg_final_count_df = pd.DataFrame(X_neg.toarray(), columns=cv.get_feature_names())","f656e642":"pos_words = {}\nneutral_words = {}\nneg_words = {}\n\nfor k in cv.get_feature_names():\n    pos = pos_final_count_df[k].sum()\n    neutral = neutral_final_count_df[k].sum()\n    neg = neg_final_count_df[k].sum()\n    \n    pos_words[k] = pos\/(pos_tr.shape[0])\n    neutral_words[k] = neutral\/(neutral_tr.shape[0])\n    neg_words[k] = neg\/(neg_tr.shape[0])","5fdc67d6":"neg_words_adj = {}\npos_words_adj = {}\nneutral_words_adj = {}\n\nfor key, value in neg_words.items():\n    neg_words_adj[key] = neg_words[key] - (neutral_words[key] + pos_words[key])\n    \nfor key, value in pos_words.items():\n    pos_words_adj[key] = pos_words[key] - (neutral_words[key] + neg_words[key])\n    \nfor key, value in neutral_words.items():\n    neutral_words_adj[key] = neutral_words[key] - (neg_words[key] + pos_words[key])","45c441ce":"tol = 0.001\n\nfor index, row in test.iterrows():\n    \n    selected_text = calculate_selected_text(row, tol)\n    \n    sample.loc[sample['textID'] == row['textID'], ['selected_text']] = selected_text\n    ","15bb16c5":"sample.to_csv('submission.csv', index = False)","58e5fbe6":"Create a training set and a validation set.","981799fc":"Break up the training data into datasets where the sentiment is positive, neutral, or negative","059236a0":"Create and submit the submission file.","3f79c1a8":"Calculate the selected text and score for the validation set.","6f45e267":"### This is a simple solution using only word counts with CountVectorizer to make predictions.\n\n#### Here's the idea:\n- Find and weight words that are used most often in only certain kinds of tweets.\n- Search all subsets of the tweet and calculate a score based on these weights.\n- For positive or negative tweets, the selected text is the most highly weighted subset, within some threshold.\n- Always return the entire text for neutral tweets.","17ebde01":"### Algorithm for weight calculation:\n\n1. For each class $j \\in \\{positive, neutral, negative\\}$\n\n    a. Find all the words $i$ in the tweets belonging to class $j$.\n\n    b. Calculate $n_{i, j} =$ the number of tweets in class $j$ containing word $i$. \n\n    c. Let $d_j$ be the number of tweets in class $j$.  Calculate $p_{i, j} = \\frac{n_{i, j}}{d_j}$, the proportion of tweets in class $j$ that conain word $i$.\n\n    d. Let $w_{i, j} = p_{i, j} - \\sum\\limits_{k \\neq j}p_{i, k}$ be the weights assigned to each word within each class. \n    ","8ee0d0fd":"Recalculate word weights using the entire training set.","0d78646b":"### Generate Submission"}}