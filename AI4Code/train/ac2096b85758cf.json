{"cell_type":{"1e2739e4":"code","b27aab5b":"code","cdf9785d":"code","293f6641":"code","e7163a58":"code","02322108":"code","7ac9f18f":"code","95bb0c40":"code","66150133":"code","d9d3745d":"code","dfcc6a85":"code","505d2563":"code","0e81584f":"code","78e8bc65":"code","b8488c8d":"code","4d3deee3":"code","d2f405d4":"code","606a15bf":"code","d16df453":"code","3945c7ea":"markdown","fe980685":"markdown","a9bad970":"markdown","013e1aa8":"markdown","f46c71ab":"markdown","c437bd0c":"markdown","ea44f49c":"markdown","dce2228a":"markdown","2e14e6ea":"markdown","6c47333c":"markdown","100bce8e":"markdown","1cc90901":"markdown","f8b14536":"markdown","9046cef1":"markdown","5ece8697":"markdown"},"source":{"1e2739e4":"# libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os\nimport numpy as np\nimport time\nimport lightgbm as lgb\n\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn import metrics","b27aab5b":"path = '..\/input\/ventilator-pressure-prediction'\ntrain = pd.read_csv(os.path.join(path, 'train.csv'))\ntest = pd.read_csv(os.path.join(path, 'test.csv'))\nsub = pd.read_csv(os.path.join(path, 'sample_submission.csv'))","cdf9785d":"train.head()","293f6641":"train.describe()","e7163a58":"train","02322108":"print(\"test\u3068train\u306ebreath_id\u306e\u91cd\u8907:\",set(test['breath_id'].unique()).intersection(set(train['breath_id'].unique())))","7ac9f18f":"fig, ax = plt.subplots(figsize = (12, 8))\nplt.subplot(2, 2, 1)\nsns.countplot(x='R', data=train)\nplt.title('Counts of R in train');\nplt.subplot(2, 2, 2)\nsns.countplot(x='R', data=test)\nplt.title('Counts of R in test');\nplt.subplot(2, 2, 3)\nsns.countplot(x='C', data=train)\nplt.title('Counts of C in train');\nplt.subplot(2, 2, 4)\nsns.countplot(x='C', data=test)\nplt.title('Counts of C in test');\nplt.tight_layout()","95bb0c40":"# 4\u547c\u5438\u5206\u306e\u30c7\u30fc\u30bf\u3092\u898b\u3066\u307f\u308b\nfig = plt.figure(figsize = (16, 12))\nfor i in range(4):\n    ax1=plt.subplot(2,2,i+1)\n    breath_1 = train.loc[train['breath_id'] == i+1]\n    ax2 = ax1.twinx()\n\n    ax1.plot(breath_1['time_step'], breath_1['pressure'], 'r-', label='pressure')\n    ax1.plot(breath_1['time_step'], breath_1['u_in'], 'g-', label='u_in')\n    ax2.plot(breath_1['time_step'], breath_1['u_out'], 'b-', label='u_out')\n\n    ax1.set_xlabel('Timestep')\n\n    ax1.legend(bbox_to_anchor=(0.95, 0.95), loc=\"upper right\")\n    ax1.set_ylabel(\"pressure, u_in\")\n    ax2.legend(bbox_to_anchor=(0.95, 0.8), loc=\"upper right\")\n    ax2.set_ylabel(\"u_out\")\n    ax1.set_title(f\"R:{breath_1['R'].unique()} C:{breath_1['C'].unique()}\")\nplt.show()","66150133":"# rewritten calculation of lag features from this notebook: https:\/\/www.kaggle.com\/patrick0302\/add-lag-u-in-as-new-feat\n# some of ideas from this notebook: https:\/\/www.kaggle.com\/mst8823\/google-brain-lightgbm-baseline\ntrain['last_value_u_in'] = train.groupby('breath_id')['u_in'].transform('last')\ntrain['u_in_lag1'] = train.groupby('breath_id')['u_in'].shift(1)\ntrain['u_out_lag1'] = train.groupby('breath_id')['u_out'].shift(1)\ntrain['u_in_lag_back1'] = train.groupby('breath_id')['u_in'].shift(-1)\ntrain['u_out_lag_back1'] = train.groupby('breath_id')['u_out'].shift(-1)\ntrain['u_in_lag2'] = train.groupby('breath_id')['u_in'].shift(2)\ntrain['u_out_lag2'] = train.groupby('breath_id')['u_out'].shift(2)\ntrain['u_in_lag_back2'] = train.groupby('breath_id')['u_in'].shift(-2)\ntrain['u_out_lag_back2'] = train.groupby('breath_id')['u_out'].shift(-2)\ntrain['u_in_lag3'] = train.groupby('breath_id')['u_in'].shift(3)\ntrain['u_out_lag3'] = train.groupby('breath_id')['u_out'].shift(3)\ntrain['u_in_lag_back3'] = train.groupby('breath_id')['u_in'].shift(-3)\ntrain['u_out_lag_back3'] = train.groupby('breath_id')['u_out'].shift(-3)\ntrain = train.fillna(0)\n\n\ntrain['R__C'] = train[\"R\"].astype(str) + '__' + train[\"C\"].astype(str)\n\n# max value of u_in and u_out for each breath\ntrain['breath_id__u_in__max'] = train.groupby(['breath_id'])['u_in'].transform('max')\ntrain['breath_id__u_out__max'] = train.groupby(['breath_id'])['u_out'].transform('max')\n\n# difference between consequitive values\ntrain['u_in_diff1'] = train['u_in'] - train['u_in_lag1']\ntrain['u_out_diff1'] = train['u_out'] - train['u_out_lag1']\ntrain['u_in_diff2'] = train['u_in'] - train['u_in_lag2']\ntrain['u_out_diff2'] = train['u_out'] - train['u_out_lag2']\n# from here: https:\/\/www.kaggle.com\/yasufuminakama\/ventilator-pressure-lstm-starter\ntrain.loc[train['time_step'] == 0, 'u_in_diff'] = 0\ntrain.loc[train['time_step'] == 0, 'u_out_diff'] = 0\n\n# difference between the current value of u_in and the max value within the breath\ntrain['breath_id__u_in__diffmax'] = train.groupby(['breath_id'])['u_in'].transform('max') - train['u_in']\ntrain['breath_id__u_in__diffmean'] = train.groupby(['breath_id'])['u_in'].transform('mean') - train['u_in']\n\n# OHE\ntrain = train.merge(pd.get_dummies(train['R'], prefix='R'), left_index=True, right_index=True).drop(['R'], axis=1)\ntrain = train.merge(pd.get_dummies(train['C'], prefix='C'), left_index=True, right_index=True).drop(['C'], axis=1)\ntrain = train.merge(pd.get_dummies(train['R__C'], prefix='R__C'), left_index=True, right_index=True).drop(['R__C'], axis=1)\n\n# https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/273974\ntrain['u_in_cumsum'] = train.groupby(['breath_id'])['u_in'].cumsum()\ntrain['time_step_cumsum'] = train.groupby(['breath_id'])['time_step'].cumsum()","d9d3745d":"train","dfcc6a85":"# all the same for the test data\ntest['last_value_u_in'] = test.groupby('breath_id')['u_in'].transform('last')\ntest['u_in_lag1'] = test.groupby('breath_id')['u_in'].shift(1)\ntest['u_out_lag1'] = test.groupby('breath_id')['u_out'].shift(1)\ntest['u_in_lag_back1'] = test.groupby('breath_id')['u_in'].shift(-1)\ntest['u_out_lag_back1'] = test.groupby('breath_id')['u_out'].shift(-1)\ntest['u_in_lag2'] = test.groupby('breath_id')['u_in'].shift(2)\ntest['u_out_lag2'] = test.groupby('breath_id')['u_out'].shift(2)\ntest['u_in_lag_back2'] = test.groupby('breath_id')['u_in'].shift(-2)\ntest['u_out_lag_back2'] = test.groupby('breath_id')['u_out'].shift(-2)\ntest['u_in_lag3'] = test.groupby('breath_id')['u_in'].shift(3)\ntest['u_out_lag3'] = test.groupby('breath_id')['u_out'].shift(3)\ntest['u_in_lag_back3'] = test.groupby('breath_id')['u_in'].shift(-3)\ntest['u_out_lag_back3'] = test.groupby('breath_id')['u_out'].shift(-3)\ntest = test.fillna(0)\ntest['R__C'] = test[\"R\"].astype(str) + '__' + test[\"C\"].astype(str)\n\ntest['breath_id__u_in__max'] = test.groupby(['breath_id'])['u_in'].transform('max')\ntest['breath_id__u_out__max'] = test.groupby(['breath_id'])['u_out'].transform('max')\n\ntest['u_in_diff1'] = test['u_in'] - test['u_in_lag1']\ntest['u_out_diff1'] = test['u_out'] - test['u_out_lag1']\ntest['u_in_diff2'] = test['u_in'] - test['u_in_lag2']\ntest['u_out_diff2'] = test['u_out'] - test['u_out_lag2']\ntest.loc[test['time_step'] == 0, 'u_in_diff'] = 0\ntest.loc[test['time_step'] == 0, 'u_out_diff'] = 0\n\ntest['breath_id__u_in__diffmax'] = test.groupby(['breath_id'])['u_in'].transform('max') - test['u_in']\ntest['breath_id__u_in__diffmean'] = test.groupby(['breath_id'])['u_in'].transform('mean') - test['u_in']\n\ntest = test.merge(pd.get_dummies(test['R'], prefix='R'), left_index=True, right_index=True).drop(['R'], axis=1)\ntest = test.merge(pd.get_dummies(test['C'], prefix='C'), left_index=True, right_index=True).drop(['C'], axis=1)\ntest = test.merge(pd.get_dummies(test['R__C'], prefix='R__C'), left_index=True, right_index=True).drop(['R__C'], axis=1)\n\ntest['u_in_cumsum'] = test.groupby(['breath_id'])['u_in'].cumsum()\ntest['time_step_cumsum'] = test.groupby(['breath_id'])['time_step'].cumsum()","505d2563":"scores = []\nfeature_importance = pd.DataFrame()\nmodels = []\ncolumns = [col for col in train.columns if col not in ['id', 'breath_id', 'pressure']]\nX = train[columns]\ny = train['pressure']","0e81584f":"params = {'objective': 'regression',\n          'learning_rate': 0.3,\n          \"boosting_type\": \"gbdt\",\n          \"metric\": 'mae',\n          'n_jobs': -1,\n          'min_data_in_leaf':32,\n          'num_leaves':1024,\n         }","78e8bc65":"folds = GroupKFold(n_splits=5)\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(train, y, groups=train['breath_id'])):\n    print(f'Fold {fold_n} started at {time.ctime()}')\n    X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    model = lgb.LGBMRegressor(**params, n_estimators=10000)\n    model.fit(X_train, y_train, \n            eval_set=[(X_train, y_train), (X_valid, y_valid)],\n            verbose=1000, early_stopping_rounds=15)\n    score = metrics.mean_absolute_error(y_valid, model.predict(X_valid))\n    \n    models.append(model)\n    scores.append(score)\n\n    fold_importance = pd.DataFrame()\n    fold_importance[\"feature\"] = columns\n    fold_importance[\"importance\"] = model.feature_importances_\n    fold_importance[\"fold\"] = fold_n + 1\n    feature_importance = pd.concat([feature_importance, fold_importance], axis=0)","b8488c8d":"print('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))","4d3deee3":"feature_importance[\"importance\"] \/= 5\ncols = feature_importance[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n    by=\"importance\", ascending=False)[:50].index\n\nbest_features = feature_importance.loc[feature_importance.feature.isin(cols)]\n\nplt.figure(figsize=(16, 12));\nsns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False));\nplt.title('LGB Features (avg over folds)');","d2f405d4":"for model in models:\n    sub['pressure'] += model.predict(test[columns])\nsub['pressure'] \/= 5","606a15bf":"sub.to_csv('first_sub.csv', index=False)","d16df453":"sub","3945c7ea":"**\u7b54\u3048\u307e\u3067\u3067\u304d\u3061\u3083\u3044\u307e\u3059<(_ _)>**","fe980685":"# Model Training","a9bad970":"**\u4eba\u5de5\u547c\u5438\u5668\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3001\u6c17\u9053\u5185\u5727(pressure)\u3092\u4e88\u6e2c\u3059\u308b\u3002**","013e1aa8":"\u3053\u306e\u30b3\u30f3\u30da\u306e\u4eba\u5de5\u547c\u5438\u5668\u30c7\u30fc\u30bf\u306f\u3001\u547c\u5438\u56de\u8def\u3092\u4ecb\u3057\u3066\u4eba\u5de5\u30d9\u30ed\u30fc\u30ba\u30c6\u30b9\u30c8\u80ba\u306b\u63a5\u7d9a\u3055\u308c\u305f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u4eba\u5de5\u547c\u5438\u5668\u3092\u8abf\u6574\u3057\u3066\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002\u6b21\u306e\u56f3\u306f\u3001\u69cb\u9020\u56f3\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002  \n2\u3064\u306e\u5236\u5fa1\u5165\u529b\u304c\u7dd1\u8272\u3067\u5f37\u8abf\u8868\u793a\u3055\u308c\u3001\u72b6\u614b\u5909\u6570\uff08\u6c17\u9053\u5185\u5727\uff09\u304c\u9752\u8272\u3067\u4e88\u6e2c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306e\u5236\u5fa1\u5165\u529b\u306f\u3001\u80ba\u306b\u7a7a\u6c17\u3092\u5165\u308c\u308b\u305f\u3081\u306b\u5438\u6c17\u96fb\u78c1\u5f01\u304c\u958b\u3044\u3066\u3044\u308b\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8\u3092\u8868\u30590\u304b\u3089100\u307e\u3067\u306e\u9023\u7d9a\u5909\u6570\u3067\u3059\uff08\u3064\u307e\u308a\u30010\u306f\u5b8c\u5168\u306b\u9589\u3058\u3066\u304a\u308a\u3001\u7a7a\u6c17\u306f\u5165\u308c\u305a\u3001100\u306f\u5b8c\u5168\u306b\u958b\u3044\u3066\u3044\u307e\u3059\uff09\u30022\u756a\u76ee\u306e\u5236\u5fa1\u5165\u529b\u306f\u3001\u7a7a\u6c17\u3092\u6392\u51fa\u3059\u308b\u305f\u3081\u306b\u63a2\u7d22\u30d0\u30eb\u30d6\u304c\u958b\u3044\u3066\u3044\u308b\uff081\uff09\u304b\u9589\u3058\u3066\u3044\u308b\uff080\uff09\u304b\u3092\u8868\u3059\u30d0\u30a4\u30ca\u30ea\u5909\u6570\u3067\u3059\u3002\n\n\u3053\u306e\u30b3\u30f3\u30da\u3067\u306f\u3001\u53c2\u52a0\u8005\u306f\u591a\u6570\u306e\u547c\u5438\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u3089\u308c\u3001\u5236\u5fa1\u5165\u529b\u306e\u6642\u7cfb\u5217\u3092\u524d\u63d0\u3068\u3057\u3066\u3001\u547c\u5438\u4e2d\u306e\u547c\u5438\u56de\u8def\u306e\u6c17\u9053\u5185\u5727\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3092\u5b66\u3073\u307e\u3059\u3002\n\n\u4eba\u5de5\u547c\u5438\u5668\u306e\u56f3\n\n![\u4ee3\u66ff\u30c6\u30ad\u30b9\u30c8](https:\/\/raw.githubusercontent.com\/google\/deluca-lung\/main\/assets\/2020-10-02%20Ventilator%20diagram.svg)\n\n\n\n\n\u5404\u6642\u7cfb\u5217\u306f\u3001\u7d043\u79d2\u306e\u547c\u5438\u3092\u8868\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u5404\u884c\u304c\u547c\u5438\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u3067\u3042\u308a\u30012\u3064\u306e\u5236\u5fa1\u4fe1\u53f7\u3001\u7d50\u679c\u3068\u3057\u3066\u751f\u3058\u308b\u6c17\u9053\u5185\u5727\u3001\u304a\u3088\u3073\u4ee5\u4e0b\u306b\u8aac\u660e\u3059\u308b\u80ba\u306e\u95a2\u9023\u5c5e\u6027\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306b\u7de8\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002","f46c71ab":"**\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u6982\u8ad6**\n\n\u60a3\u8005\u304c\u547c\u5438\u306b\u554f\u984c\u304c\u3042\u308b\u5834\u5408\u3001\u533b\u5e2b\u306f\u4eba\u5de5\u547c\u5438\u5668\u3092\u4f7f\u7528\u3057\u3066\u3001\u6c17\u7ba1\u5185\u306e\u30c1\u30e5\u30fc\u30d6\u3092\u4ecb\u3057\u3066\u93ae\u9759\u72b6\u614b\u306e\u60a3\u8005\u306e\u80ba\u306b\u9178\u7d20\u3092\u9001\u308a\u8fbc\u307f\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u6a5f\u68b0\u7684\u4eba\u5de5\u547c\u5438\u306f\u81e8\u5e8a\u533b\u306b\u3088\u308b\u96c6\u4e2d\u6cbb\u7642\u3067\u3042\u308a\u3001COVID-19\u30d1\u30f3\u30c7\u30df\u30c3\u30af\u306e\u521d\u671f\u306b\u9855\u8457\u306b\u884c\u308f\u308c\u307e\u3057\u305f\u3002\u4eba\u5de5\u547c\u5438\u5668\u306e\u5236\u5fa1\u65b9\u6cd5\u306e\u958b\u767a\u306f\u3001\u81e8\u5e8a\u8a66\u9a13\u306b\u5230\u9054\u3059\u308b\u524d\u306b\u3055\u3048\u3001\u6cd5\u5916\u306b\u8cbb\u7528\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u9ad8\u54c1\u8cea\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u306f\u3001\u3053\u306e\u969c\u58c1\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u73fe\u5728\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u306f\u3001\u5404\u30e2\u30c7\u30eb\u304c\u4e00\u3064\u306e\u80ba\u3092\u6a21\u5023\u3059\u308b\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3068\u3057\u3066\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u80ba\u3068\u80ba\u306b\u95a2\u9023\u3059\u308b\u81d3\u5668\u306f\u9023\u7d9a\u3057\u305f\u7a7a\u9593\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u3001\u60a3\u8005\u306e\u80ba\u306e\u9055\u3044\u3092\u8003\u616e\u3057\u305f\u30d1\u30e9\u30e1\u30c8\u30ea\u30c3\u30af\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u691c\u8a0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30d7\u30ea\u30f3\u30b9\u30c8\u30f3\u5927\u5b66\u3068\u63d0\u643a\u3057\u3066\u3001Google Brain\u306e\u30c1\u30fc\u30e0\u306f\u3001\u6a5f\u68b0\u7684\u4eba\u5de5\u547c\u5438\u5236\u5fa1\u306e\u305f\u3081\u306e\u6a5f\u68b0\u5b66\u7fd2\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u6210\u9577\u3092\u76ee\u6307\u3057\u3066\u3044\u307e\u3059\u3002\u5f7c\u3089\u306f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306b\u3088\u308a\u3001PID\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u73fe\u5728\u306e\u696d\u754c\u6a19\u6e96\u3088\u308a\u3082\u80ba\u306e\u4e00\u822c\u5316\u304c\u3067\u304d\u308b\u3068\u4fe1\u3058\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u30b3\u30f3\u30da\u3067\u306f\u3001\u93ae\u9759\u5316\u3057\u305f\u60a3\u8005\u306e\u80ba\u306b\u63a5\u7d9a\u3055\u308c\u305f\u4eba\u5de5\u547c\u5438\u5668\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u307e\u3059\u3002\u6700\u826f\u306e\u63d0\u51fa\u306f\u3001\u80ba\u306e\u5c5e\u6027\u306e\u8ffd\u968f\u6027\u3068\u62b5\u6297\u3092\u8003\u616e\u306b\u5165\u308c\u307e\u3059\u3002\n\n\u6210\u529f\u3059\u308c\u3070\u3001\u4eba\u5de5\u547c\u5438\u5668\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u65b0\u3057\u3044\u65b9\u6cd5\u3092\u958b\u767a\u3059\u308b\u3053\u3068\u306e\u30b3\u30b9\u30c8\u969c\u58c1\u3092\u514b\u670d\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u60a3\u8005\u306b\u9069\u5fdc\u3057\u3001\u3053\u308c\u3089\u306e\u65b0\u3057\u3044\u6642\u4ee3\u4ee5\u964d\u306e\u81e8\u5e8a\u533b\u306e\u8ca0\u62c5\u3092\u8efd\u6e1b\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3078\u306e\u9053\u304c\u958b\u304b\u308c\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001\u4eba\u5de5\u547c\u5438\u5668\u6cbb\u7642\u306f\u3001\u60a3\u8005\u306e\u547c\u5438\u3092\u52a9\u3051\u308b\u305f\u3081\u306b\u3088\u308a\u5e83\u304f\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002","c437bd0c":"**\u307e\u305a\u306f\u3001\u30c7\u30fc\u30bf\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002**","ea44f49c":"- u-in\u304c\u5927\u304d\u304f\u306a\u3063\u305f\u5f8c\u3001\u9045\u308c\u3066pressure\u304c\u5927\u304d\u304f\u306a\u308b \n- R\u3068C\u306b\u3088\u3063\u3066u_in\u3068pressure\u306e\u95a2\u4fc2\u6027\u306f\u5909\u308f\u3063\u3066\u304d\u305d\u3046\n- u_out\u304c1\u306b\u306a\u3063\u3066\u3044\u3066\u3082u_in\u304c0\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3068\u3053\u308d\u304c\u3042\u308b","dce2228a":"\u30d5\u30a1\u30a4\u30eb\n- train.csv-\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\n- test.csv-\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\n- sample_submission.csv-\u6b63\u3057\u3044\u5f62\u5f0f\u306e\u30b5\u30f3\u30d7\u30eb\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\n\n\u5217\n- id\uff1a\u30c7\u30fc\u30bf\u306eID  \n    \u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u3067\u4e00\u610f\u306e\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u8b58\u5225\u5b50\n    \n- breath_id\uff1a\u547c\u5438\u6bce\u306eID  \n    \u547c\u5438\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u4e00\u610f\u306e\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\n    \n- R\uff1a\u6d41\u91cf\u5909\u5316\u306b\u5bfe\u3059\u308b\u5727\u529b\u5909\u5316 (5,20,50)  \n    \u6c17\u9053\u306e\u62b5\u6297\u5ea6\u5408\u3044\u3092\u793a\u3059\u80ba\u306e\u5c5e\u6027\uff08cmH2O \/ L \/ S\uff09\u3002  \n    \u7269\u7406\u7684\u306b\u306f\u3001\u3053\u308c\u306f\u6d41\u91cf\u306e\u5909\u5316\u3042\u305f\u308a\u306e\u5727\u529b\u306e\u5909\u5316\uff08\u6642\u9593\u3042\u305f\u308a\u306e\u7a7a\u6c17\u91cf\uff09\u3067\u3059\u3002  \n    \u76f4\u611f\u7684\u306b\u306f\u3001\u30b9\u30c8\u30ed\u30fc\u3067\u98a8\u8239\u3092\u81a8\u3089\u307e\u305b\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\u30b9\u30c8\u30ed\u30fc\u306e\u76f4\u5f84\u3092\u5909\u3048\u308b\u3053\u3068\u3067R\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001R\u304c\u5927\u304d\u3044\u307b\u3069\u81a8\u3089\u307e\u305b\u308b\u306e\u304c\u5927\u5909\u306b\u306a\u308a\u307e\u3059\u3002\n    \n- C\uff1a\u5727\u529b\u5909\u5316\u306b\u5bfe\u3059\u308b\u4f53\u7a4d\u5909\u5316 (10,20,50)\u3000  \n    \u80ba\u306e\u8ffd\u968f\u5ea6\u5408\u3044\u3092\u793a\u3059\u80ba\u306e\u5c5e\u6027\uff08mL \/ cmH2O\uff09\u3002  \n    \u7269\u7406\u7684\u306b\u306f\u3001\u3053\u308c\u306f\u5727\u529b\u306e\u5909\u5316\u3054\u3068\u306e\u4f53\u7a4d\u306e\u5909\u5316\u3067\u3059\u3002  \n    \u76f4\u611f\u7684\u306b\u306f\u3001\u98a8\u8239\u306e\u30b4\u30e0\u306e\u539a\u3055\u306b\u4f3c\u305f\u6982\u5ff5\u304cC\u3060\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\u3002  \n    C\u304c\u9ad8\u3044\u307b\u3069\u3001\u30b4\u30e0\u306e\u539a\u3055\u306f\u8584\u304f\u306a\u308a\u3001\u81a8\u3089\u307f\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\n    \n- time_step\uff1a\u30c7\u30fc\u30bf\u8a08\u6e2c\u306e\u6642\u9593  \n    \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\n- u_in\uff1a\u5438\u6c17\u5f01\u306e\u958b\u304d\u5177\u5408\uff080\uff5e100\u306e\u9023\u6e2c\u5024\uff09   \n    \u5438\u6c17\u96fb\u78c1\u5f01\u306e\u5236\u5fa1\u5165\u529b\u3002\u7bc4\u56f2\u306f0\u301c100\u306e\u9023\u7d9a\u5024\u3002\n\n- u_out\uff1a\u547c\u6c17\u5f01\u306e\u958b\u9589\uff080, 1\u306e2\u5024\uff09  \n    \u547c\u6c17\u96fb\u78c1\u5f01\u306e\u5236\u5fa1\u5165\u529b\u3002  open (1) or closed (0)\u306e\u3044\u305a\u308c\u304b\u3002\n\n- pressure:\u6c17\u9053\u5185\u5727  \n    \u547c\u5438\u56de\u8def\u3067\u6e2c\u5b9a\u3055\u308c\u305f\u6c17\u9053\u5185\u5727\u3002cmH2O\u3067\u6e2c\u5b9a\u3055\u308c\u307e\u3059\u3002","2e14e6ea":"**600\u4e07\u884c\u3042\u308b**","6c47333c":"**R\u3068C\u306f\u9023\u7d9a\u5024\u3068\u8a00\u3044\u306a\u304c\u3089\u3082\u30013\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u306b\u5206\u304b\u308c\u3066\u3044\u3066\u307b\u307c\u5747\u7b49\u306b\u5206\u3051\u3089\u308c\u3066\u3044\u308b\u3002**","100bce8e":"**\u30c6\u30b9\u30c8\u3082\u540c\u3058**","1cc90901":"**Andrew Lukyanenko\u69d8\u306e\u30b3\u30fc\u30c9\u62dd\u898b\uff08\u62dd\u501f\uff09\u3057\u307e\u3059\u3002**\n\n[https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models](https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models)","f8b14536":"\"google brain EDA Japanese and start\"\u306e\u30b3\u30d4\u30fc\u3067\u3059\u3002  \n\u65e5\u672c\u8a9e\u8a33\u306e\u4fee\u6b63\u3084EDA\u306e\u8ffd\u52a0\u3092\u3057\u305f\u7269\u3067\u3059\u3002","9046cef1":"**A\u6c0f\u306f\u7279\u5fb4\u91cf\u3092\u5897\u3084\u3057\u305f\u307f\u305f\u3044\u3002**","5ece8697":"**\u307f\u3093\u306a\u5927\u597d\u304d\u30e2\u30c7\u30eb\u3092\u3084\u3063\u3066\u307f\u3088\u3046**"}}