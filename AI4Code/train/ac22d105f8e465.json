{"cell_type":{"14300d4b":"code","a5cf8b60":"code","c550ff8b":"code","7ff439f1":"code","74df737f":"code","f44b99e8":"code","0b3ca735":"markdown","740076c4":"markdown","f18c90fb":"markdown","c10c6e41":"markdown","4029c9c5":"markdown","9014c0ed":"markdown"},"source":{"14300d4b":"from numpy import arange\nfrom numpy.random import rand\nfrom matplotlib import pyplot","a5cf8b60":"def objective(x):\n\treturn x**2.0","c550ff8b":"# define range for input\nr_min, r_max = -5.0, 5.0\n# generate a random sample from the domain\nsample = r_min + rand(100) * (r_max - r_min)\n# evaluate the sample\nsample_eval = objective(sample)","7ff439f1":"best_ix = 0\nfor i in range(len(sample)):\n\tif sample_eval[i] < sample_eval[best_ix]:\n\t\tbest_ix = i\n\nprint('Best: f(%.5f) = %.5f' % (sample[best_ix], sample_eval[best_ix]))","74df737f":"# sample input range uniformly at 0.1 increments\ninputs = arange(r_min, r_max, 0.1)\n# compute targets\nresults = objective(inputs)","f44b99e8":"# create a line plot of input vs result\npyplot.plot(inputs, results)\n# plot the sample\npyplot.scatter(sample, sample_eval)\n# draw a vertical line at the best input\npyplot.axvline(x=sample[best_ix], ls='--', color='red')\n# show the plot\npyplot.show()","0b3ca735":"# Results","740076c4":"# Parameteres","f18c90fb":"# Locate the best solution","c10c6e41":"# Compute Targets","4029c9c5":"# Random Search + Grid Search Optimization","9014c0ed":"# Objective"}}