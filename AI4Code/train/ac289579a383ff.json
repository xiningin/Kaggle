{"cell_type":{"46a70d33":"code","a27920a7":"code","632ffbb6":"code","2f2e70b9":"code","42973644":"code","eeb5c510":"code","617b078c":"code","a398b260":"code","0478e0e5":"code","b70a415e":"code","737f3b00":"code","8fbe4c61":"code","16c058e7":"code","1485e228":"code","097ff483":"code","4606df4b":"code","3413733a":"code","4a267451":"code","a98d7707":"code","5fd426d3":"code","db90414a":"code","c914f1eb":"code","543d5b7b":"code","66fea7c7":"code","5bfe4832":"code","ac2cb4b8":"code","c8141ef9":"code","3971668d":"code","7626a596":"code","28d49b69":"code","12a0ab8a":"code","9981e5a8":"code","b37d43ed":"code","983163ff":"code","ba037461":"code","53444011":"code","d08f5492":"code","7df627f2":"code","aff7e656":"code","dee375b5":"code","cc047829":"code","2abc3d8b":"code","5c343451":"markdown","09500b35":"markdown","4be1c1ef":"markdown","26fbef7a":"markdown","d651b51d":"markdown","5900020f":"markdown","6e39a98c":"markdown","8c93c696":"markdown","b6553096":"markdown","e51baa72":"markdown","9b7f19ec":"markdown","37503868":"markdown","652b8d16":"markdown","fd731440":"markdown","0652f236":"markdown","f325c2e1":"markdown","6a543034":"markdown","40579ae9":"markdown","fe6560b3":"markdown","fb539ff8":"markdown","c4e20a8b":"markdown","2c6d1405":"markdown","f29952bb":"markdown","25dc1dae":"markdown","b25eb2be":"markdown","b47bb209":"markdown","f97143a2":"markdown","303447b7":"markdown","944c2039":"markdown","ef4bb183":"markdown","d706ed18":"markdown","302a4892":"markdown","59471425":"markdown","08c3d536":"markdown","d1b09234":"markdown","51ae7a1b":"markdown","b3690f05":"markdown","83d10e8b":"markdown","e48b11c7":"markdown","f5dedfd6":"markdown"},"source":{"46a70d33":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.model_selection import GridSearchCV\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import svm\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import RepeatedStratifiedKFold, cross_val_score, RandomizedSearchCV\nfrom sklearn.metrics import balanced_accuracy_score\nimport traceback\nimport re\nfrom pandas import Series\nimport pandas.core.algorithms as algos","a27920a7":"data_train = pd.read_csv(\"..\/input\/task-03\/train_full.csv\")\ndata_test = pd.read_csv(\"..\/input\/task-03\/test_without_label.csv\")","632ffbb6":"data_train","2f2e70b9":"print(\"Valores ausentes data de treinamento: \", data_train.isnull().values.any())\nprint(\"Valores ausentes data de teste: \", data_test.isnull().values.any())","42973644":"# Verificando se h\u00e1 desbalanceamento das classes da vari\u00e1vel resposta\nsns.countplot(x = 'WinOrLose', data=data_train)\nplt.show()","eeb5c510":"def getData(df):\n    \"\"\"\n    Pega dia da semana e mes que ocorreu o jogo\n    \"\"\"\n    \n    df[\"WeekDay\"] = df[\"Data \"].apply(lambda x : x.split(\" \")[0].strip(\",\"))\n    df[\"Month\"] = df[\"Data \"].apply(lambda x : x.split(\" \")[1])\n    \n    weekdays = {'Mon':1 ,'Tue':2, 'Wed':3,'Thu':4, 'Fri':5,'Sat':6,'Sun':7}\n    df[\"WeekDay\"] = df[\"WeekDay\"].replace(weekdays)\n    \n    months = {\"January\":1, \"February\":2, \"March\":3, \"April\":4, \"May\":5, \"June\":6, \"July\":7,\n             \"August\":8, \"September\":9, \"October\":10, \"November\":11, \"December\":12}\n    \n    df[\"Month\"] = df[\"Month\"].replace(months)\n    df[\"Month\"] = df[\"Month\"].replace({8:4, 9:5, 10:6}) # Playoffs de 2020 atrasaram...\n    \n    \n    columns_to_drop = [\"Data \"]\n    df.drop(columns_to_drop, axis = 1, inplace = True)\n    \n    return df","617b078c":"def getAno(train, test):\n    \n    qnt_anos_train = [89, 79, 86, 85, 82, 81, 84, 85, 89, 81, 86, 79]\n    qnt_anos_test = [82, 83]\n    \n    train_ano = np.repeat(list(range(2006, 2018)), qnt_anos_train)\n    test_ano = np.repeat([2018,2019], qnt_anos_test)\n    \n    train[\"Year\"] = train_ano\n    test[\"Year\"] = test_ano\n\n    return train, test","a398b260":"#o resultado do paulino foi sem usar essa fun\u00e7\u00e3o\n#def transform_variables(data, isTRAIN = True):\n    \n    # sub = pd.DataFrame(data.iloc[: ,np.arange(3,68)].values-\n    #                    data.iloc[:,np.arange(69,134)].values, columns=data_train.columns[np.arange(3,68)])\n    # add = pd.DataFrame(data.iloc[: ,np.arange(3,68)].values+\n    #                    data.iloc[:,np.arange(69,134)].values, columns=data_train.columns[np.arange(3,68)])\n    \n    # #print(sub.shape)\n    # #print(add.shape)\n    \n    # matrix_div = sub.div(add)\n   \n    # matrix_div.loc[:, \"Game\"] = data.loc[:, \"Game\"]\n    # matrix_div.loc[:, \"Data \"] = data.loc[:, \"Data \"]\n    # matrix_div.loc[:, \"H_Team \"] = data.loc[:, \"H_Team \"]\n    # matrix_div.loc[:, \"A_Team \"] = data.loc[:, \"A_Team \"]\n    \n    # if isTRAIN:\n    #     matrix_div.loc[:, \"WinOrLose\"] = data.loc[:, \"WinOrLose\"]\n    \n    # return matrix_div","0478e0e5":"def new_data(data):\n    data.loc[:, \"Home_Game\"] = np.zeros(data.shape[0])\n    data.loc[:, \"Away_Game\"] = np.zeros(data.shape[0])\n    \n    previousTeams = [data.loc[0, \"H_Team \"], data.loc[0, \"A_Team \"]]\n    first = 0\n    \n    for i in np.arange(1, (data.shape[0])):\n        if not(data.loc[i, \"H_Team \"]  in previousTeams) or not((data.loc[i, \"A_Team \"]  in previousTeams)):\n            previousTeams = [data.loc[i, \"H_Team \"], data.loc[i, \"A_Team \"]]\n\n            timeA = data.loc[i - 1, \"H_Team \"]  \n\n            Ngame = 0\n            for j in np.arange(first, i):\n                Ngame +=1\n                if data.loc[j, \"H_Team \"] == timeA:\n                    data.loc[j, \"Home_Game\"] = Ngame\n                else:\n                    data.loc[j, \"Away_Game\"] = Ngame\n            first = i\n\n    timeA = data.loc[i - 1, \"H_Team \"]\n\n    Ngame = 0\n    for j in np.arange(first, i + 1):\n        Ngame += 1\n        if data.loc[j, \"H_Team \"] == timeA:\n            data.loc[j, \"Home_Game\"] = Ngame\n        else:\n            data.loc[j, \"Away_Game\"] = Ngame\n    \n    return data","b70a415e":"data_train_ = new_data(data_train)\ndata_test_ = new_data(data_test)","737f3b00":"data_train_.drop(\"H_SOS \", axis=1, inplace=True)\ndata_train_.drop(\"A_SOS \", axis=1, inplace=True)\ndata_test_.drop(\"H_SOS \", axis=1, inplace=True)\ndata_test_.drop(\"A_SOS \", axis=1, inplace=True)","8fbe4c61":"data_train = data_train_.copy()\ndata_test = data_test_.copy()","16c058e7":"data_train = getData(data_train)\ndata_test = getData(data_test)","1485e228":"data_train, data_test = getAno(data_train, data_test)","097ff483":"data_train.shape","4606df4b":"for aux in data_train.columns:\n    if data_train.loc[:, aux].dtypes == 'int64' or data_train.loc[:, aux].dtypes == 'float64':\n        print(aux, \":\",round(np.std(data_train.loc[:, aux]), 4))","3413733a":"for aux in data_train.columns:\n    if data_train.loc[:, aux].dtypes == 'int64' or data_train.loc[:, aux].dtypes == 'float64':\n        sns.displot(data=data_train, x=aux, hue='WinOrLose', kind = \"kde\", fill = True)\n        plt.show()","4a267451":"features_to_drop = []\nall_coluns = data_train.columns\nfor ind1 in range(len(all_coluns)-1):\n    aux1 = all_coluns[ind1]\n    for ind2 in np.arange(ind1 + 1, len(all_coluns)):\n        aux2 = all_coluns[ind2]\n        if (data_train.loc[:, aux1].dtypes == 'int64' or data_train.loc[:, aux1].dtypes == 'float64') and (data_train.loc[:, aux2].dtypes == 'int64' or data_train.loc[:, aux2].dtypes == 'float64'):\n            coef_spearman = abs(stats.spearmanr(data_train.loc[:, aux1],data_train.loc[:, aux2])[0])\n            coef_pearson = abs(stats.pearsonr(data_train.loc[:, aux1],data_train.loc[:, aux2])[0])\n            if coef_spearman > 0.95 and aux1 != aux2:\n                features_to_drop.append(aux2)\n                print(aux1, aux2, coef_spearman, coef_pearson)","a98d7707":"features_to_drop.append(\"H_Games \")\nfeatures_to_drop.append(\"A_Games \")\nfeatures_to_drop.append(\"Game\")\nfeatures_to_drop.append(\"H_Team \")\nfeatures_to_drop.append(\"A_Team \")","5fd426d3":"features_to_drop","db90414a":"#Fun\u00e7\u00f5es para calculo do IV e do WOE\nmax_bin = 20\nforce_bin = 3\n\n# define a binning function\ndef mono_bin(Y, X, n = max_bin):\n    \n    df1 = pd.DataFrame({\"X\": X, \"Y\": Y})\n    justmiss = df1[['X','Y']][df1.X.isnull()]\n    notmiss = df1[['X','Y']][df1.X.notnull()]\n    r = 0\n    while np.abs(r) < 1:\n        try:\n            d1 = pd.DataFrame({\"X\": notmiss.X, \"Y\": notmiss.Y, \"Bucket\": pd.qcut(notmiss.X, n)})\n            d2 = d1.groupby('Bucket', as_index=True)\n            r, p = stats.spearmanr(d2.mean().X, d2.mean().Y)\n            n = n - 1 \n        except Exception as e:\n            n = n - 1\n\n    if len(d2) == 1:\n        n = force_bin         \n        bins = algos.quantile(notmiss.X, np.linspace(0, 1, n))\n        if len(np.unique(bins)) == 2:\n            bins = np.insert(bins, 0, 1)\n            bins[1] = bins[1]-(bins[1]\/2)\n        d1 = pd.DataFrame({\"X\": notmiss.X, \"Y\": notmiss.Y, \"Bucket\": pd.cut(notmiss.X, np.unique(bins),include_lowest=True)}) \n        d2 = d1.groupby('Bucket', as_index=True)\n    \n    d3 = pd.DataFrame({},index=[])\n    d3[\"MIN_VALUE\"] = d2.min().X\n    d3[\"MAX_VALUE\"] = d2.max().X\n    d3[\"COUNT\"] = d2.count().Y\n    d3[\"EVENT\"] = d2.sum().Y\n    d3[\"NONEVENT\"] = d2.count().Y - d2.sum().Y\n    d3=d3.reset_index(drop=True)\n    \n    if len(justmiss.index) > 0:\n        d4 = pd.DataFrame({'MIN_VALUE':np.nan},index=[0])\n        d4[\"MAX_VALUE\"] = np.nan\n        d4[\"COUNT\"] = justmiss.count().Y\n        d4[\"EVENT\"] = justmiss.sum().Y\n        d4[\"NONEVENT\"] = justmiss.count().Y - justmiss.sum().Y\n        d3 = d3.append(d4,ignore_index=True)\n    \n    d3[\"EVENT_RATE\"] = d3.EVENT\/d3.COUNT\n    d3[\"NON_EVENT_RATE\"] = d3.NONEVENT\/d3.COUNT\n    d3[\"DIST_EVENT\"] = d3.EVENT\/d3.sum().EVENT\n    d3[\"DIST_NON_EVENT\"] = d3.NONEVENT\/d3.sum().NONEVENT\n    d3[\"WOE\"] = np.log(d3.DIST_EVENT\/d3.DIST_NON_EVENT)\n    d3[\"IV\"] = (d3.DIST_EVENT-d3.DIST_NON_EVENT)*np.log(d3.DIST_EVENT\/d3.DIST_NON_EVENT)\n    d3[\"VAR_NAME\"] = \"VAR\"\n    d3 = d3[['VAR_NAME','MIN_VALUE', 'MAX_VALUE', 'COUNT', 'EVENT', 'EVENT_RATE', 'NONEVENT', 'NON_EVENT_RATE', 'DIST_EVENT','DIST_NON_EVENT','WOE', 'IV']]       \n    d3 = d3.replace([np.inf, -np.inf], 0)\n    d3.IV = d3.IV.sum()\n    \n    return(d3)\n\ndef char_bin(Y, X):\n        \n    df1 = pd.DataFrame({\"X\": X, \"Y\": Y})\n    justmiss = df1[['X','Y']][df1.X.isnull()]\n    notmiss = df1[['X','Y']][df1.X.notnull()]    \n    df2 = notmiss.groupby('X',as_index=True)\n    \n    d3 = pd.DataFrame({},index=[])\n    d3[\"COUNT\"] = df2.count().Y\n    d3[\"MIN_VALUE\"] = df2.sum().Y.index\n    d3[\"MAX_VALUE\"] = d3[\"MIN_VALUE\"]\n    d3[\"EVENT\"] = df2.sum().Y\n    d3[\"NONEVENT\"] = df2.count().Y - df2.sum().Y\n    \n    if len(justmiss.index) > 0:\n        d4 = pd.DataFrame({'MIN_VALUE':np.nan},index=[0])\n        d4[\"MAX_VALUE\"] = np.nan\n        d4[\"COUNT\"] = justmiss.count().Y\n        d4[\"EVENT\"] = justmiss.sum().Y\n        d4[\"NONEVENT\"] = justmiss.count().Y - justmiss.sum().Y\n        d3 = d3.append(d4,ignore_index=True)\n    \n    d3[\"EVENT_RATE\"] = d3.EVENT\/d3.COUNT\n    d3[\"NON_EVENT_RATE\"] = d3.NONEVENT\/d3.COUNT\n    d3[\"DIST_EVENT\"] = d3.EVENT\/d3.sum().EVENT\n    d3[\"DIST_NON_EVENT\"] = d3.NONEVENT\/d3.sum().NONEVENT\n    d3[\"WOE\"] = np.log(d3.DIST_EVENT\/d3.DIST_NON_EVENT)\n    d3[\"IV\"] = (d3.DIST_EVENT-d3.DIST_NON_EVENT)*np.log(d3.DIST_EVENT\/d3.DIST_NON_EVENT)\n    d3[\"VAR_NAME\"] = \"VAR\"\n    d3 = d3[['VAR_NAME','MIN_VALUE', 'MAX_VALUE', 'COUNT', 'EVENT', 'EVENT_RATE', 'NONEVENT', 'NON_EVENT_RATE', 'DIST_EVENT','DIST_NON_EVENT','WOE', 'IV']]      \n    d3 = d3.replace([np.inf, -np.inf], 0)\n    d3.IV = d3.IV.sum()\n    d3 = d3.reset_index(drop=True)\n    \n    return(d3)\n\ndef data_vars(df1, target):\n    \n    stack = traceback.extract_stack()\n    filename, lineno, function_name, code = stack[-2]\n    vars_name = re.compile(r'\\((.*?)\\).*$').search(code).groups()[0]\n    final = (re.findall(r\"[\\w']+\", vars_name))[-1]\n    \n    x = df1.dtypes.index\n    count = -1\n    \n    for i in x:\n        if i.upper() not in (final.upper()):\n            if np.issubdtype(df1[i], np.number) and len(Series.unique(df1[i])) > 2:\n                conv = mono_bin(target, df1[i])\n                conv[\"VAR_NAME\"] = i\n                count = count + 1\n            else:\n                conv = char_bin(target, df1[i])\n                conv[\"VAR_NAME\"] = i            \n                count = count + 1\n                \n            if count == 0:\n                iv_df = conv\n            else:\n                iv_df = iv_df.append(conv,ignore_index=True)\n    \n    iv = pd.DataFrame({'IV':iv_df.groupby('VAR_NAME').IV.max()})\n    iv = iv.reset_index()\n    return(iv_df,iv)","c914f1eb":"data_train = data_train.replace(['W', 'L'], [1, 0])","543d5b7b":"final_iv, IV = data_vars(data_train,data_train.WinOrLose)","66fea7c7":"#Features mais importantes para predi\u00e7\u00e3o de acordo com IV\nIV.sort_values('IV',ascending = False)\nIV = IV.sort_values('IV',ascending = False)\npd.set_option('display.max_rows', 1000)\nIV\n","5bfe4832":"# Lista de colunas no conjunto de treino\nfor col in data_train.columns:\n    print(col)","ac2cb4b8":"# Pegando as features mais importantes e realizando testes com diferentes combina\u00e7\u00f5es delas.\nvariables_used = ['H_W\/D % ', 'H_FG% ', 'H_FT% ',\n                  'A_W\/D % ',\n                  'WeekDay'] # Esta foi a que tivemos um melhores resultado nos testes feitos abaixo.\n\nX = data_train[variables_used].values\ny = data_train.loc[:, \"WinOrLose\"]\nX_test = data_test[variables_used].values","c8141ef9":"model = GaussianNB()\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=100, random_state=7)\nscores = cross_val_score(model, X, y, scoring = 'balanced_accuracy', cv = cv, n_jobs=-1)","3971668d":"print(np.mean(scores), np.std(scores))","7626a596":"model.fit(X, y)\npredict = model.predict(X_test)\n\nsub = pd.DataFrame(data = {'Game':data_test.loc[:, \"Game\"], 'WinOrLose':predict})\nsub.loc[:, \"WinOrLose\"].replace([0, 1],[\"L\", \"W\"], inplace = True)\nsub.to_csv('submission_naives.csv',index=False)\nsub","28d49b69":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier","12a0ab8a":"from sklearn.model_selection import GridSearchCV\n\n# hiperparametros para ajustar\nparam_grid = {\n    'n_estimators': [100,200,300,400,500,600],\n    'learning_rate': [0.01,0.1,1,10]\n}\n\ngs_ab = GridSearchCV(AdaBoostClassifier(), param_grid = param_grid, n_jobs=20, scoring = \"balanced_accuracy\")\ngs_ab.fit(X,y)","9981e5a8":"gs_ab.best_params_","b37d43ed":"model = AdaBoostClassifier(n_estimators=gs_ab.best_params_[\"n_estimators\"], learning_rate = gs_ab.best_params_[\"learning_rate\"], algorithm='SAMME')\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=20, random_state=7)\nscores = cross_val_score(model, X, y, scoring='balanced_accuracy', cv=cv, n_jobs=20)","983163ff":"print(np.mean(scores),np.std(scores))","ba037461":"model.fit(X,y)\npredict = model.predict(X_test)\n\nsub = pd.DataFrame(data = {'Game':data_test.loc[:, \"Game\"], 'WinOrLose':predict})\nsub.loc[:, \"WinOrLose\"].replace([0, 1],[\"L\", \"W\"], inplace = True)\nsub.to_csv('submission.csv',index=False)\n\nsub","53444011":"grid_params = {\n    'C': [int(x) for x in np.linspace(1, 100, num = 5)], \n    'kernel': ['linear', 'rbf', 'poly', 'sigmoid'],  \n    'gamma': ['auto', 'scale'] \n}\n\ngs = GridSearchCV(\n  svm.SVC(),\n  grid_params,\n  verbose = 0, #don't print progress\n  cv = 5, #cross validation\n  n_jobs = -1, #to use all processors\n  scoring = \"balanced_accuracy\"\n)\n\ngs_results = gs.fit(X, y)\n\nprint('       Melhores par\u00e2metros:', gs_results.best_params_)","d08f5492":"model = svm.SVC(kernel = gs_results.best_params_['kernel'], C = gs_results.best_params_['C'], \n                gamma = gs_results.best_params_['gamma'])\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=10, random_state=7)\nscores = cross_val_score(model, X, y, scoring = \"balanced_accuracy\", cv=cv, n_jobs=-1)\n\nprint(np.mean(scores), np.std(scores))","7df627f2":"model.fit(X,y)\npredict = model.predict(X_test)\n\nsub = pd.DataFrame(data = {'Game':data_test.loc[:, \"Game\"], 'WinOrLose':predict})\nsub.loc[:, \"WinOrLose\"].replace([0, 1],[\"L\", \"W\"], inplace = True)\nsub.to_csv('submission.csv',index=False)\n\nsub","aff7e656":"# values = []\n# for i in np.arange(1,50):\nparameters = {'bootstrap': [True, False],\n 'max_features': ['auto', 'sqrt'],\n 'min_samples_leaf': [1, 2, 4],\n 'min_samples_split': [2, 5, 10],\n 'n_estimators': np.arange(1, 25,2)}\n\nmodel = RandomForestClassifier()\nbest_model = GridSearchCV(model, param_grid = parameters, cv = 5, scoring=\"balanced_accuracy\")\nbest_model.fit(X, y)\ny_pred = best_model.predict(X) \nprint('Melhores par\u00e2metros:', best_model.best_params_, \"\\n\")\nn_estimators = best_model.best_params_.values()","dee375b5":"#Realizando a valida\u00e7\u00e3o do modelo e obtendo a acur\u00e1cia m\u00e9dia com os par\u00e2metros encontrados acima pelo GridSearch\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=10, random_state=7)\nvacc = []\n\nfor train_index, test_index in cv.split(X, y):\n    x_train, x_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    model = RandomForestClassifier(bootstrap= True, max_features= 'auto', min_samples_leaf= 1, min_samples_split= 2, n_estimators= 9)\n    model.fit(x_train,y_train)\n    y_pred = model.predict(x_test) \n    score = balanced_accuracy_score(y_test, y_pred)\n    vacc.append(score)","cc047829":"print('\\n M\u00e9dia Acur\u00e1cia:',np.mean(vacc),'| Dsv.Padr Acur\u00e1cia :', np.std(vacc,ddof=1 ))","2abc3d8b":"model.fit(X,y)\npredict = model.predict(X_test)\n\nsub = pd.DataFrame(data = {'Game':data_test.loc[:, \"Game\"], 'WinOrLose':predict})\nsub.loc[:, \"WinOrLose\"].replace([0, 1],[\"L\", \"W\"], inplace = True)\nsub.to_csv('submission.csv',index=False)\n\nsub","5c343451":"**Verifica a correla\u00e7\u00e3o entre as vari\u00e1veis**\n\nAbaixo \u00e9 calculado todas as correla\u00e7\u00f5es 2 a 2 dos atributos e as correla\u00e7\u00f5es maiores do 0,95 s\u00e3o mostradas. Para isso \u00e9 utilizado o coeficiente de correla\u00e7\u00e3o de Spearman, por esse ser mais robusto do que o coeficiente de correla\u00e7\u00e3o de Pearson.","09500b35":"Abaixo tem-se o ajuste do modelo ajustado com os melhores par\u00e2metros e a predi\u00e7\u00e3o.","4be1c1ef":"# 2) Transforma\u00e7\u00f5es e Feature engineering","26fbef7a":"Temos que em m\u00e9dia a nossa acur\u00e1cia \u00e9 de $60,1\\%$.","d651b51d":"Abaixo utilizamos o grid search.","5900020f":"Verifica a variabilidade das vari\u00e1veis","6e39a98c":"Podemos ver que a media de acur\u00e1cia do modelo Random Forest foi de <b>0.55","8c93c696":"Em seguida temos a valida\u00e7\u00e3o cruzada.","b6553096":"Essa sele\u00e7\u00e3o de atributos manual se pautou, basicamente, nos testes feitos com o modelo de classifica\u00e7\u00e3o Naive Bayes, para tal \u00e9 interessante que se tenha \"poucos\" atributos na classifica\u00e7\u00e3o e por isso, resolvemos fazer essa sela\u00e7\u00e3o manual. Ainda, a estimativa n\u00e3o param\u00e9trica de kernel para a fun\u00e7\u00e3o densidade de probabilidade tamb\u00e9m teve uma forte influ\u00eancia para a escolha dos atributos.\n\nEles ser\u00e3o utilizados na classifica\u00e7\u00e3o via Naive Bayes abaixo.","e51baa72":"## GridSearch Random Forest","9b7f19ec":"Abaixo temos o cross validation.","37503868":"Cross Validation para o Naive Bayes.","652b8d16":"Abaixo fazemos uso do Support Vector Machine para a classifica\u00e7\u00e3o.","fd731440":"**Obtem n\u00famero de jogos em casa e fora por playoff**\n\nPode ser \u00fatil para diferenciar os jogos que acontecem dentro e fora de casa para cada playoff\n\n","0652f236":"# 9) Conclus\u00e3o","f325c2e1":"O valor da informa\u00e7\u00e3o e o peso de evid\u00eancia s\u00e3o medidas que, especificamente, quando se trata de problemas de classifica\u00e7\u00e3o igual ao que temos neste projeto, podem nos mostrar rela\u00e7\u00f5es de import\u00e2ncia entre uma vari\u00e1vel independente (atributo) e uma vari\u00e1vel dependente (Win or Lose no nosso caso).\n\nS\u00e3o medidas que independem de um modelo ou algo a ser feito antes, basta termos os nossos dados prontos para uso (limpos), que j\u00e1 conseguimos calcul\u00e1-las, diferente das outras t\u00e9cnicas de feature importance, em que s\u00e3o obtidas essas informa\u00e7\u00f5es de import\u00e2ncia a partir de um modelo definido. E para isso \u00e9 utilizado o valor da informa\u00e7\u00e3o (IV), sendo este calculado utilizando o peso de evid\u00eancia (WOE), mostrando numericamente a 'import\u00e2ncia' de um determinado atributo em rela\u00e7\u00e3o \u00e0 vari\u00e1vel resposta.\n\nAbaixo segue a tabela que iremos utilizar para classificarmos os atributos de acordo com sua ordem de import\u00e2ncia.\n\nMais sobre em: https:\/\/www.listendata.com\/2015\/03\/weight-of-evidence-woe-and-information.html\n\n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAp0AAAC2CAYAAACbITbiAAAgAElEQVR4Ae29569dRZb+73+AN36BxIsRb4ZhkMWgboRAIAsQCJCxwCCi2uTU5OQm2WQM9mByMCbTgMlucAfC4CaajIAhNjQ5w3hoGBhomp766VPf33N7nbpV++x9wr3n3LtKunfvs3eFVU9VrXpqVdhTgjtHwBFwBBwBR8ARcAQcAUegzwhM6XP8Hr0j4Ag4Ao6AI+AIOAKOgCMQnHR6JXAEHAFHwBFwBBwBR8AR6DsCTjr7DrEn4Ag4Ao6AI+AIOAKOgCPgpNPrgCPgCDgCjoAj4Ag4Ao5A3xFw0tl3iD0BR8ARcAQcAUfAEXAEHAEnnV4HHAFHwBFwBBwBR8ARcAT6joCTzr5D7Ak4Ao6AI+AIOAKOgCPgCDjp9DrgCDgCjoAj4Ag4Ao6AI9B3BCpJ52effRb8zzHwOuB1wOuA1wGvA14HvA54HeiWlRZJ55\/+9Kfw85\/\/PGyyySb+5xh4HfA6MFIHXC+4TvR+weuA14HJVwfQ\/XDDblyRdC5ZsiT8+7\/\/ezdxe1hHwBGYgAj8y7\/8S\/j73\/8+AXPmWXIEHAFHwBEoIQAnhBt245x0doOeh3UEJiECTjonYaF7lh0BR2DSI+Ckc9JXgd4A8O2334a\/\/e1vvYnMY2mLwBdffBGOOOKI8Nprr7X12wsPpEN6pNsL56SzFyh6HI6AI+AIDBcCA0k6f\/e734UFCxaM+nvyySdb0P3rX\/8ali5d2uJv8eLF4X\/+539a\/OV+vPnmm2HvvfcOW221Vdhll13C22+\/nfM25s8+\/fTTMGfOnCgXsj333HNjLkPdBP\/v\/\/4vrFixIsycOTNce+21Yddddw333HNP3eDur0MEIPhHH310ePjhh2MMuXag9kN7ePHFF1vaiN7RdghrHW1M73WlreBIj3RJv1vXKeks6QbJyvWWW24Jn3\/+ebcijgq\/bNmyMGvWrNg2582bF77\/\/vtRfsb6wSDK1A8MhkkvdpL\/iZ6\/Opi88cYbYfr06eHyyy+v470jPytXrgy77bZbbMP7779\/+O\/\/\/u+O4vFAnSMwkKST7Pzwww\/hjDPOCFOmTAm77757+PLLL7O5xB\/rA9Zcc82wfPnyRtY2wkLw1ltvvUCFHxTHWrdLLrkk5v3xxx\/vqVgQiA033DBsttlm4b333usq7meffTZMmzYtPPLIIwGystpqq4VDDjlkIDrjrjJWIzBldMcdd4S111477LDDDgEssPRCiiB6\/VqvCNG\/8MIL41rpn376qUVS1WfazLHHHhv+93\/\/d+Q94f7jP\/4jrLHGGmGttdYKTz\/9dOBZ6nj21FNPxTZx6qmnhq+\/\/nrEi9Im\/VzYEY81bjolnUQNzgsXLoztAxmtLHQi4E8+Fy1a1IJBDbHaeqHN0DEedNBBPY+7beIFD4MoU0HUrh6X9CLWd9ogbbGTQfp4teUUjFL+Un\/D9BsdBcmgb6BPs23V5kNlSF\/8xBNP2Fc9v0dHwCm23nrr8F\/\/9V89j98jrEZgYEknYr\/00kuxg9x4440rCdIDDzwQzjvvvGKFroIAYjtopBN5b7rppr6QzldffTXml12D7777bhU0bd+dffbZIw0XhYm12JKUthEMsYc777wzXHPNNdHq9+CDD0Ycpk6dGokO5K9fjjax7bbbFstO9YZ6nbpvvvkm7LHHHrFeVVmkP\/7443DooYdmrQAffvhhtGwjRzeuG9JJulX5pGNDH0C+UXApOe9GbjopOqtBIp2DKFM3GFeFVbnbwThH8GyzzTbR8MDgr6kbr7ackzOXv5y\/YXlG2zv99NNjWywNVhlEMkPBwKFbQ0gdXBiM036ddNZBq\/d+Bpp0Mo3HFDidx1133ZXNPR08Vp1ORrhEONlIJ3mm0VkrWBbYNg+ZWsSq6Q23DVA9fI0CP\/nkk+NfiUip08qRTkS5+uqrY3tifWaJHNPWzj\/\/\/KzkdWTIBkwe9pN0khTWd\/RGuwFrIlbbn4NI8AZRprZAduhB9duSTqJimUidZVUdJjtmwUr5GzMB+pAQBom\/\/OUvxdkfZoxOOumkwKB4LJyTzrFAuZzGQJNOxKYDpPMoWRaYFqcD7XSd2WQkneXqUP+NN9z6WPXKJxZIlkVAqEpOnVaJdL7zzjtxeUXJuk+5sm7zlVdeKSURmFlADuTp1PWbdEJK0BulfHYq9yASvEGUqVN824VT\/U5JZ7tww\/J+oudvEMrB+67xLYWBJ53qJNdZZ51sR4jlhoZqHeb6Z555Jlx22WXhoosuCg899FDRqlNFOtmMcN1118U1dKTz0Ucf2WQi0SUd4md3L5YjpnceffTRRmtFGAkyrUA8hCXdkvJh6hCifcUVV8S8sYawLuHGGvDCCy\/EdFiDKUsX4ZUP3oPfBx98EP0hE\/d2LQ6NFiz22WefsMUWW4S33nor5pfnctzff\/\/90WJ28cUXR0s0+ZSzspDmjz\/+GJdTkB5xW0x4xppe4pScXJWefc6mGeRPXZM6QViVPdM+lH2KAfJR5ldeeWXMY7tyaIdHKm\/uN2SvneVO9aZEOilzBmkQMvKVOsgmpFPYpu\/5TXmvv\/76kXzm3td51m\/SyfIB8siUnd0sQD2AsFxwwQXxj7qldpCT27YN6hZTuaXpdeoEMy6XXnppoM7buG19fuyxx6JVh3qOH5Yq8L6u65VMVelZedX+aBPoJ36jg2w7s\/7b5Q+\/JZysTDbOkl5EBmRBJqVr4+B+ENsyctXJn\/LCsiV0DOsiWbNMnq1Olr\/SFSswgxP90SZUfrT19Dnv0LFVfaith7n+D\/nYIKU6k06dt0uDPkJy6Sq9RFjykD6v0z8Sh0+vl2pK\/58PPOnUdB4dSDrlh8n+wAMPDBBTORrCcccdFzsWGjUdCmsPS+tFcqSTCn399dfHqX3WsOG4MtXPzjre42hEkD82MR1zzDHhzDPPjIqB9ZLs5K6zvpFGud9++8VpfvzTIFgriCWJPNsRPe9Igzyz8Jr83XjjjXFjA0qonYO4sbMX64+dFicfek4e2ZiFgoMIsjudBfps0pLDP4SSnbxsSuIdSl9K5fnnnw\/bbbddVDbIiNys5yGfyI2zspDmOeecE3e+77TTTmHTTTeNxIa8Q4DA4de\/\/nX088knn8QO++CDDw6\/+MUv4qJzppz1nB2JpGOxb1InkPfmm2+OX85B6aLEmPah7vGc35T\/ueeeG9g5zL0tB\/Keujp4pGFyv5EBfKj3JdeOdBKONags7M\/FRRqlpSxKk\/QJm7ZHva9z7SfppLwPOOCA2C61wx+ZqJ\/sXL3ttttiuVF23JMX7dCX7JQp034zZsyIG6vQQzrxgvaezrysWrUqLjdhYxPpS+\/svPPOkajym86XDQy0PzpzdAkboigL2ls712uZqtKTvLQn2h8DTDoL2hm6EHytTpX\/dvlrh5NkqqsXaZu\/\/\/3v427k1Ko9yG25bv7AQ8eVaWaBwQrY0xegW+s44lBfhQHn9ttvH5nOfvnllyN+6HlILQOrOn0o7Ulx5vo\/SCGDC+lwaxyqo5PpIxg8cooLdZC+Wn3MV199FWWk7Rx22GGxv6jbP+LPSWedWtMfPwNPOsm2OsnUasEOXAiHXd+mXdQQGSo2TtOSqV\/e5UgnBAyLkiWz+OU3z0U+ePbdd98FFDOVHyLGyOvwww+PjVHkFH85px17rElFactBbLQRQqSTZxC31OJLHslrGofiSq+lBqfnq6++eiSypIfT5hPySF7l5N+SV95pd3xKXMgfFjbWgapcSINOGoWCxZDnKFLKRH7IP+8pexS1HFY\/PbeWrFtvvTWWBfVArkmdoAzBgKscipPd0GzgIS1Z+rbccsvYCeNPONl6x\/MmeCi93JU6fuKJJ44iO6nfOqQT4oDs5Ik2JEfe2ECkzk3P06vKHnls20v9Vf3uFemE\/DDg0R9EkU0le+65ZwuRVFtLNxyqrW2\/\/faxs5XM6AB2+acbUzTzYkkndZv2Z+sD8Qhnu4FCa02Rj4ERnSp1JiW9ksNe+yWTTSO9V\/ujXVp9RlukPdAuNZAkbFX+6uKkskp1msqKdi+9KHlzenxQ23LT\/GE0Ic92ZgL9R59D31jXSQdjKEj7NgZA0nlN9GWd\/k91yJLOJmloiV3apzBDxiYl6iV1o27\/KP2V9l11cXR\/3SEwFKSTzhDlZhsZnd0pp5wyqtExDYoSZ8SmDlENg527kAPrUmWljiIlWYTR5hnbuagC88wqX5tG6R4lgjJBgaRO5EHK9f33348WwFwesDi1m3ZV\/JI3bXB6nsaj5yX\/9jl4Q+zXXXfd8PrrryvJkasIoVWU4F\/yT0AprNSqpueMtK3Tc9KSq1snIAFYqNP1ioyqsf7KQoa\/o446Ki5+Bx+cCLQN2wkekjm9qhzSI4JSf6o34FpytvO2AzHKhTaldlMKz7QX1gtLvEp+S897RTrZgKApNl1VJjZttbXcelh1gOrUpQNybY00qPM273R+WD9TEi6crEVZ9fOGG26w4rW976dMVYlLXksY5J+2h\/6yZED+c\/mri5PKqo5elCypHh\/kttw0f+DArJI9Sgj9it5M9Z\/wKF1lwFFdxx\/9K+0ZyyKurr7Er\/RSVf+nOmHrUJM0VPftgB4dRp9A3Lgm\/aNktn1XjMT\/jQkCQ0E6QYIKhoJTJ0lFxHJGg8k5Rj8cCcS0FVOhm2++ecuUssKkykodUKlzxz\/kF384VeAcSVUauasIbIlwiTyoUanhMn2F4pBlhyuyplNLuTStvGmDUz66eU5ZYP0oKSDlgZG7HHiW\/ONHYazC6uQ5YdrVCZYogGPdsmT6Dqsg5cEaPgZGthw6wUO4pFeVD3hVOdWbdv5kvQV72hJEkzDW8lmVDn4t8arym3vXK9LZLp+k3a6tqdx1xmyVDsiRTmHOQMS2S+6xxNo2pfqcI785nPSsnzIpjdxV8qbtD796B2GBYNtnufzVwYn2RDnU1YuSmXpg257KdNDacru6KIzANnXoAIg7M230gwx06tR\/Gw86CT3Fn\/pO0qJ\/hchZ105f4ld6qQpn1ZNcHaqThgbJdmYGgky9s3mAH9TpHyWzbZc2337fXwSGhnSywYGpZU0NMLpOp8qACiLAGkMsdjQkKmVVJUuVlRpIqTHznMrN2W44xd20A9a6OKsobVGnyqedXDZs1b3kTRtcL56rQ07jljzKA8sPmOrBgWfJP+8VJlVYTZ7XrROyxLQrS5QgJIBp3OOPPz5ufOJZWpc6wUNYpVeVT6leyr\/qTTt\/WpYhSxXTbRAkKXHFV7oSfzucSmF5PpakU9iV2poIClPs5F+bkHIYqkxt3oV5Wkdz+Ve95drE9VOmKjkkby5vemex0LNc\/urg1FQvSnbKypbvoLblTvLH7Bxr3unTmAKH4KvO5uqoMCldsXJiOKGMGGxiBLCnVdTVl8SvtmXrQJqu6oStQ03SID71\/yzzQNcy0OcreHJKow4ekrmq31G8fu09AkNDOlVR6CQZ6TGVZRuKoGHdE2vy7LpLhaWSMUKiEVPpcamykgVIVg\/Fy5UGSrqMuPCHU9xVjc7GoXtNvbFuLHfQthS0lDd+8Ns0HaWnq+RNG1wvnkuhsrOZdY+pY5qI8mMwIAf+qSx6x1XKxCqsps\/r1gmt2bXToVYW3SMTVgZ2tjNSl7N1CVIHQSGuJngorvQqC0m78le9qaN85ZcZA9qLnXJL07e\/VVeshcu+r3M\/lqRTbc3OUFgZ1baUH+mAdLqcMDnSqXpdB3PVZ7VrK0fVfT9lqkpX8qbtjzDKt2afeCb\/ufzJfxVOKqu6elGy27bHMzacQNIGrS03zR9tjY0yGFvYDCRnSSc6SGvg9b7qqnXJlBtriZkpkxGAcHX1JX2odEGVXlKdsHWoSRrIpPWozMwwg4nMdl2q2nCVHMJEMlf1O\/Lr194jMDSkk6xrQfE\/\/dM\/xR3KaUMT6bHr6giH9YJpXyoZOy9RUHQeuFRZ4Zcdp3b6IXoMIe4aRonxXhYhVeA6lV3x6Kr8YMVInQiBlLcsU5oOtf4hwxCGOt+Pl7xpg+vFc0agLOa20yBWTsgmZM1uzgD\/VBYbJqeweF\/3eZM6oSUb6WYt0hPGKHvISdopihTK2kJeWXfVFA+b9\/Qei0RunaH1p3oDru2cOh++pLTBBhtkB3G5OLRpyi6TyPmrejaWpBM57r777mjdsesPJR\/tD0KKHxxtm\/afIyw50plbc6a4aVcczyR9oXqrdi1\/7a79lKkqbclrCQP+aQ+QFtq6nUqX\/1z+6uLURC9K9lSPi6QMYltukr\/SYEPLLcg3OskO5IVJ6aqyg8iyWQuroVwTfUlbUL9R1f+pTqgONU1DsiEn7ZTBILqHfMg16R8lc1W\/o3j92nsEhop0ahe6pgRTOFTxNAWv96xTQzlSyVhwTENVJ5AqK8JwzAqkgtGYdUxt8Nwew6JNSlVrWmwc9h55sahqJ6vecWQFU33k0ypvRrrkjWOSIHhyPD\/ttNNaRqt6l15LDa5XzyU7o3PilOOYD9bVWusgeWDE2ss1nXSA4CYF17ROCON0ty7P582bF796os7Wrn8UgRPpZOkH1t4meAir0hVylA6oUr90PuSfet3OobRR4PjH2mmtHVVh1Q5zg6WqcPZdt6STjSrITf2xbcGmYe\/V1iCTdsMfG05of7RD\/MhJB2hHL89JB4swHV\/ayeJ\/2rRp8YgxxcGVI8c4t1Myqn5aomb9V933S6aqNEUYUnxoD9R1256Jp13+6uCksqqrF0k3p8cHtS03yZ+mlW37pC7pdBPyzeCW86ibOPWJqXEF2diwU7cPrdP\/qQ51qpOVLw28SkYNlXe7\/rHU1ykdv\/YXgaEinRqhpTusLUQ0QBoSC4pZ18NGIjLJon46hb322ivQYf3pT38Kc+bMiZY3Oq+ZM2dGMsf0B46wu+yyS1xLQ1g6c8Wp9Bht0vlgKeIPKxQH9zb5HBtWI0gM5+ARH6M55GKtIHLR+NkIpTjJHxYYwuCXo4YgnJx\/185Zeek4yQ\/Pcs\/Breq5sCMedlbSsUpGZGFXMXliSo1jbCgTSLymo5nWSeNAkepYJOJCkU6fPj3iwMYCiCDh6jzHcscZiMRXt06IGGAxpuyxaIIxZ9r96le\/GiErxMn6R9Z00snyx9EdnOsJKWQH\/KJFi0ZIXB082pUd77FobLTRRiNLOxSGOrt06dLA2aVYkqk3XPndrj7KetCEQGJ9QQ7k6dR1SjqplxAgzhS0+ST\/arslmehssDzTfsgvcc2ePTs+swMkwlMXVq5cGWdImEWg86d+0slTJ9XeaSPWP2cKoivQGegd6ipxp\/WZdj137tzYxkryps97LVMaf+63CANtGT3DNCa4MVCEgGugUjd\/ykMJJ8lQVy9yYL\/0iPS4rcuD2pbr5o9BEZbRn\/3sZ5Hg029xMstvfvObuHmR5+giyqWJk7Uxt6Smrr5kN31V\/5fWCXS4+rK6aUgnK2+0LbuLXc91bdc\/lvo0hfdr\/xEYKtIJHFiOIITWtJ7CREWlUWH+p+LL0SmlnYvela6EJx7iSxtAKUwnz5GNdBjNaa1MKr+NV3LZ\/Nn3g3Bv8ySyOV5ydVIn\/vjHP8ZdtHRsOacysHWjan1Vt3hoyhDF2ytHe4As0wnWdaRvLS91w1l\/nZJOG0en95QR7Yz2RZlUOVtvwIq2SVj+cnU69V8Vd6fv0jT6KZNIJ1Yq4VbKe5P8pHkohbVtpo5eLMUzaG1ZctbNn7BP6yyWyVw9VPxVV\/RXqf7b8rF9DP6b9qElGTpJg\/StPKW4pZvr+C3F4c\/7g8DQkc7+wOCxOgKjEaDDZSoHqzJf7aDTG2+HZRJLHR3\/eDjSxZLbyfSwlXc8SaeVw++rEbCks9rnYL8dxLY82Ii5dI5AfxBw0tkfXD3WCYIAJIv1uiwjgPCNt8PKwHrZ3IaYsZANi1f6pZhO0nXS2QlqYx9mopBOkBu0tjz2pekpOgLjj4CTzvEvA5dgwBDQ1AzLOFiHyoaJLbbYInsM1HiIzrrWHXfcMR4dMpbpc1QJVk6u3Tonnd0i2N\/wtAHWA7Nem7WSXNmFrzXX\/U29d7EPelvuXU49JkdgOBBw0jkc5eRSjiEC6qhYP8WfXbM5hmJUJsVmHtZV2p3YlQG6fEk6pMcyg144J529QLF\/cWidqNoAVyyFna4f7J+k1TEPQ1uuzoG\/dQQmFgJOOidWeXpuJhECbKrjbyxcr9Ny0jkWpeZpOAKOgCMwWAg46Rys8nBpHIFJgYCTzklRzJ5JR8ARcARaEOg76eSQ84svvtj\/HAOvA14HRurAjBkz4hmWrhtcN3od8DrgdWDy1AE44ZIlS1qIaNMfU0oBiNhJ5+SpTK44vKzr1gEnnV5X6tYV9+d1xevAxKkDfSedmFLdOQKOgCNgEfDpdYuG3zsCjoAjMDkQ6Pv0upPOyVGRPJeOQBMEnHQ2Qcv9OgKOgCMwMRCYFKRTnxrj2I\/SZ7\/aFSeHctc5NsR+rmwQj9ppl09\/7wiMBQKdkE7aLt9YX7BgwcjfbbfdNuoYH86S5ExJ62+Qzpj8+OOPA98e5zvwfAqwU8eJAkxVocSrPgtcN37Of+W71si2yy67BL5b7s4RcAQcgV4iMKFJJwSQToovyrz00kvxj3ue1T1vDrLJt6bnzJkTDwfn83+\/+MUvwooVK1o6DDqPlStXxnd33HFH4G+zzTYLO+ywQ\/xWfC8LzeNyBIYdgU5Ip\/JMWzvvvPPioeV8Ker+++\/Xq5Er7Xv58uXxYP977rmnZbDJGZS0z7XXXju2z2effTbqg9\/97nfxQPR+fu6Ub2UfcsghUa4nnnhiRN6mN4qHPJQ+SUo+vvnmmxY9pXQ4dxXdRHjOfJX74Ycfoq7jgwhvvPGGHvt1ABBgYEGHTZ2\/5JJLsuVaJebrr78eZs6cGdZdd91w8803x2+oM7A4\/vjjw6pVq6qC+jtHoGcITGjSeffdd4dNN9205QsqH330Udhyyy3jl2baoUjnhjVi5513bvnWNQR2ww03DHwiTo6O6+ijjw50BnJYXLbddtvo97XXXtNjvzoCkx6Bbkgn4PE5znnz5oU111wzbLLJJi1tXOAyM3HQQQfFGQo943rnnXeGa665JrZVPm269dZbh6lTp4ZFixYFSFe\/HEQY6ytk77333us4GcWDRRIiUXIQy9NOOy2Si9QPVtJtttkm4ofusu6MM86IpNhJp0Vl\/O8hnaeffnocbDW1kv\/5z38OJ5xwQvj888+jBZtP6UJeMaDQJ7pzBMYKgQlDOj\/55JNw4403jnQwfD0D5X7iiSe2TD1BJE899dRIPAlT5d55551IGK+44ooWb9999120njIVBclEGZDOZZddFr9eYz0Tls\/InXzyyS1yWD9+7whMNgR6QTqx8KHAaF+578GXSOd4YX3vvfeGk046KVofu5GBwe6RRx7Z1jrF4Pioo47Kkk7SZ7kCX+xJnZPOFJHB+Y31mmVb\/bTGD05uXZKJiMBQk04IJN+BZnpg8803jxYMWSqYMlpjjTXCDTfcMKrcsJIwynvyySdHvbMPmJajQ8tNX6GY119\/\/TjljuLea6+9ot+zzz7bRhGtocSx0047jSKkLR79hyMwiRDoBemEfGmamPbMzIZ1g0Y6rWz9vtcSBCy9LBFq4px0NkHL\/ToCjkATBIaSdKJQma7eZ5994hQRU2TpGk2IJWSPa+r0LkdIrV+UL3HYaXS91zsIKZbO66+\/PhLLdKqK98Sxxx57dG3hUNp+dQSGHYFekU5woH0yzc6SFzbDyJVIJ1Yi9MeVV14Z12uzltMui1F4XSFtrBtlbTfnBTKgbWppQmcxXc3Mx0UXXRTapam0uSLbM888Ex566KE4UNbAuuo5sz5ggo5k+hQsmP1BbnQlshDfY489NkovNSGdWEtfeOGFEdnASnE\/+uijgSVG5D11X3\/9dcSAtYmLFy+OYVJ\/Nn+UF\/lGvxIv+ZEjP+DDTBPYki9hJD9V16Z5sP7J+48\/\/hj3C5BuOlWNnLfccktcg8mSDvs+\/S68\/bY9OBJW5UYaYEneSSddnkG89EHXXnttnPFDrmXLlrWsZWZqnY13YH711Ve3yJLi04s6n8bpvx0BEBgq0onCfP7558Puu+8ep85RmCXlj8WxRDpvvfXW+A7lWnLff\/99XPBfIp1V8StOlKg2PHBNlar8+dURmGwI9JJ00q5Y40ZbZa0aHSaODjtd0wlBOffcc2OHzD36A4I2ffr0qFvSckDfbLfddrGzxy9xk9Z+++0Xrayp\/9xvwpx55pnhwAMPjGFsmnXWTUIwIC5s7mH9KfnC8RzysM4664w8ZwAM4WATFSR81qxZkTBDVJjZgYyxuej3v\/993KWe2zDUhHR++eWX4fbbb4\/raolr3333jWl\/9dVXgY1SG220Ucy7ygS5IZBHHHFEYBc\/DsLEUigwsv7IHyQd8nzMMcfE95B11vDuuuuuAeIKMT3uuOPiwANcyR+6ucm62aZ5wL\/KgyVW55xzTmBWjNks9hC8\/\/77UdeznIL9AxBi6ujLL78cZScsv8FB+aMMwZGyweGXNbts9IIkgieDHfYNpP0aZU29V1hhYK3cDz\/8cFwDDWaKHxwhqrQD63pR5218fu8IWASGgnTSKLBmsvCdkTsNEgVT5WSJzFk6sYzQcKtIJ8qPRlsinbKW5uKXXChTpv051oSF++4cAUfg\/yHQS9JJjFiJ2PDHNDs7c+nUc6TzrbfeistiIANa001nzUyE1mirjLCaQtzuuusuPYpXOnVIE7vQIT1VToQYUvHKK6+MeCUc6eXWoo54MjfSR5Z08rr0nLzj1xIPE128LZHL0vM0vP1NGJYzcaqHdfzmOR0NhBinATuEWe6BBx6IZYeet07r5ylXrM3k6\/DDD49kjX4BIs07W3aQWU4OabqOvkkeKFf2BtA\/YDGnPCHNxME9FlnIss0j+eK33fimukQ9Yw+BdZdffvmokxnUd6nfUd39wx\/+YINGy+uNx5IAACAASURBVPGvfvWrWD9kQAEniy+EN62XvajzLYL4D0cgQWCgSScKlZEto0dGchzvQGOv42j86YhQ4epYOqXMS6RTilONX3HrikJECaFMGNG6cwQcgX8g0GvSScxsnKETVZvLkU4sPWyuYUMPbRwnAgFRkfUNggRp4XiZ3A5xdEjaif8jd\/+4w+qF\/sotr2G6fuONNx41VfqP0P+4kz4aZNKZs5qKFFlSBcHEAmuPjAJjsIYIWad8M0hg\/W7qPvjgg0g4sQaK1Iqo5jBPw9vf9Bl180A4\/OfqB9PvWF\/XWmutWCdtGtprgGVUDiJIXbIElUEUVk2sqtaVSCenpEAY1T8ydU\/fiSw80\/IvBl1yWvpFeeB6VecVv18dgRwCA0s6USZbbLFFnLLo5JDiKtIpKyV+Sk7KrkQ6q+KnkWNtYcquzvRZSQZ\/7ghMVAT6QTppd1idaLNYISF86fS68GSmBIJJh886TaZjLeGg06cjL5Eddf4MPquc\/LEkiLSY5tYfljKbZlU80kfDRjrJk3SlJVo8J08sBUBXQvCxDKY6WfnmfGXIZMkxyGdTKUSL5RPMMKVYlcLqOWmXyiOXB57l6oeszBBSpsxV3lzpeyCj1lhBXaP+8cc9jnrDoEQkUjKqPtnwTJ2DHfWe6XisvjzLzQay853pfggullDCKK5e1XnJ6ldHIIfAwJJOGhtkEwsnlgKUCVMRdR0NyTYoG07v0lG19cO9FA0NPXV6p1GifU+D33HHHWtZMGw4v3cEJgsC\/SCdYMfU5gEHHBDbPuSDe0iAHHqFKVmW6nDqBUtgeEZ7toRDxKFEXNT5M9VbpZfkj\/i7cSJfqTyl55J\/LKfXLX42r9KVIjdYP1kHiZWXKXOscQzOCZ\/ipPyV8gGxYk0jcUHSIE4Kk2JlZcrdp3XA+knzwDue5dIQ9rl3Nk57DwnE2kl9weLIYMYux5Bf1SdhqefUY\/ozviQlAsqZsJBxHJuQsPCzPhnSyfM0rnZyy3+7Oi+Z\/OoI5BAYWNJphcViQQeBYmFUTMfSzmnqIEcs2bUOIc0RRhtvyR+dFFaK3PQJ6TLStGs4mdKjA0TZunMEHIEQ+kU6wZblLBAY2nja8dNx0inbDpkwlnCgX+iA2RiiY9HSMkN3ED9Ep8ox5Y+eKJGmqrD2XYlIlZ6LQNh0OVKK6V05m2c941p6bv2k96UwECjOMNZSBOTFkKAlEIrHkk4IkXS88mfzoTBc2ZSz+uqrj6zj5ZnCUPZMT6N3c1Y\/Gw\/3dfOgcPhP6xfvtKSgRMIV3l51JjQWX6bJ6V9ygxkRP5FOptH5uhZ5luOezW7Uc8pbx4qlewtsXBB\/+qxe1HnJ4VdHIIfAUJBOCc6RD3w1hI7g0ksvjbsX9S69skmAqY\/S4fDpWioUHaNkjQyJj5Ema8RS4qo1Q+nZm9qVma49QqGecsopLcdXpPL6b0dgMiHQLelkQEinmXMMCtmRnpJOOlbWyaWDRW20EEmASLLGkI6bTTBPP\/30qGTwQ6eeHpGWeoQ8MQhFF2njkvxAyLBw1Vk+ZIkUhFIOUoXVNiU\/TKOinyxZQ2aLWYlklZ4rzdy1FEZ6GAsb+ltrGlO9rA1BxIO+FJlXvm0+lL7yaNfi8k7TxGDy4YcfRjJpMVP49Fo3DwqH\/xR3vZPl0m7c0TvWsv72t7\/Vz3jVekrIOJvLcuHwaIkiv8nXbrvtNmoZF30QdQ7\/Om867ce0twECiz\/aTC\/qfEvG\/IcjkCAwVKRTsmM5hHRCPiGhOYVCx8P6Ltb2MPUgJyVI48IPTg2eTsrueISAsuFgzz33bCG4kFHW69jDqDVKRGFgRdHf\/Pnz4\/dupUQlh18dgcmMQDekk3bJRg06SbXhFEvIHus6LSlQO0+JpKxMIp0cb8aGC9o01iEsc9aSpFMpUmtpKoN+MxiFTKTy8pzPVOYsWgprr+iQlGBpd7jNJ2FEsLXmkLyj7O35jiWSVXpuZUnvCYM1UycH8F7kH3LOkiOcBvLs\/le+8aej5YgHws95mzgN8HNrOkXo7SYlwjBIoIzBhFky4oSItnN180A8yIw1Uvimcav+sbyDeznu6VNYf5o6yW3XdqZ+cqSTfFK2lLEcdZrNWlwhsJSNPbYP7CkD+jxIJzN0kNBe1XnJ4VdHIEVgKEmnMkFHwEJtrJZMv6NgrKOB833mQw89NE4xoHj4\/iyN3ioCFAi7H5mmYbrGOkaMnMmHQiIMI2dIKP5lFeU51gwacOkvXURv0\/B7R2CyIdAJ6YRIXXXVVXGNN+2MjhQrHwdm5xykbvbs2S2DUta2QQQIR0fLH9+zZp0bhI7zH+032FetWhX1BUe1MaXOVCakAD2h9p9LO30GkcLyyKAWEsCAGMJJ\/HUdhIBjoebOnRvJI+vcFy5cGHUPWEAyrJ7BYsjxPOiuX\/\/611FnQUyYvp0zZ87I2r+ZM2fGcLnnEGVwb+dIAwsyBB0r35\/+9KdIhJCJcx\/RsTimuTmC6mc\/+1kcmOMPXfqb3\/wmbujiOeXDsgSsn1g4p06dGv\/Yjc5B8kwpy4Er5cFGLTYlgQmdGpt2pk2bFr8Uh1Vc6Stc7lo3DxYn4Q6ho25ZxzQ75Y0lErkoGz5fipw5J8st+KWOPEPE2ZxK3cfowZIt+jwGRqzXJN+QTMgruN13330x3xBMjl8iDAfU0y44WYW6T39IvWedJpt3cb2q82ke\/LcjAAJDTTpVhDQqGjXELx1BomxoTNpByH0dBaS4uaIoUeDEQQfHNJE7R8AR6ByBTkhn56mNDkknzgwJHb30ASTSDkZtKIgX\/tMlONZPnXula4lTnXDyg6zIjCzEYX\/nyCF5QmabT8XVyyuETZZijAEptmlakgt\/Vm7wb0LmiddiYHElXmuhTmVIfzfNQxq+9NvWnXZrS5Hf4lGKU8+JD3ILBsKd8s6lY+UQxoQrrXnN+Ve6fnUEOkVgQpDOTjPv4RwBR2B8EBhv0jk+uZ64qVrCNqy5nAh5GFbsXe7Jg4CTzslT1p5TR2BgEHDSOTBF0RNBJgJhmwh56ElheiSOQB8RcNLZR3A9akfAEcgj4KQzj8uwPWV9I2timVpnfSNrFpcuXdpoini88zwR8jDeGHr6jkBdBJx01kXK\/TkCjkDPEHDS2TMoxzUirftjbab++r1+tNcZngh56DUmHp8j0C8EnHT2C1mP1xFwBIoIOOksQuMvHAFHwBGYsAg46ZywResZcwQGFwEnnYNbNi6ZI+AIOAL9QsBJZ7+Q9XgdAUegiICTziI0\/sIRcAQcgQmLQF9JJwf\/\/vznP48HFHNIsf85Bl4HvA5QB1wveD1wXeB1wOvA5KsD6H64YTduSinwkiVL4jfH+ZKG\/zkGXge8DqgO\/Ou\/\/mv8Frl++9XrhtcBrwNeByZ+HTjllFMC3LAbV0k6MaW6cwQcAUfAIuDT6xYNv3cEHAFHYHIg0Nfpddisk87JUZE8l45AEwScdDZBy\/2OJwL2U5PjKYen7QhMBAQGnnTa7+p2ev6bPYeN+5KzaXX7jeVSGu2e15W1XTwoSvDKfYO3XVh\/7wj0G4FOSefvfve7sGDBgsq\/W265JXz++ec9z8KyZcvCrFmzwlZbbRXmzZsXvv\/++56nMQwR8n3w+fPnRxzA4u677x4GsRvLyLfMzz\/\/\/LDPPvuEK664Iuy8887h7bffbhyPB3AEHIF\/IDDQpPODDz4IBxxwQLjmmmvChx9+GK\/85nkd97e\/\/S1+HWP\/\/fcPL730Uvzjni9m8M66Tz\/9NBx22GFRyTzwwAPh4IMPDuuuu26gA0v92nC9um8ia1WakEy+sLHnnnuGrbfeOh7YXOXf3zkC44FAp6QTWWkrCxcuDFOmTAmnnnpqYLAox2Bx8eLFYY011giLFi0KEIdeuvfeey9Mnz49HHTQQT2Pu5dy9jsuMGcAQBncdNNNLcmhM\/k60QknnBB++OGHlncMqktlgt7acMMNw2abbRbAeTwd+bvwwgvDdtttFwcwZ599dszrrbfeOp5iedqOwNAjMLCkk86DkSUNX50K1yuvvDLssMMO4YsvvmgLPiPwTTfdNLz77rsjfj\/66KOw5ZZbRjKph6T1y1\/+Mrz22mt6FDu2M888MyrPm2++eUSGEQ89vqkraylZrC5YXw455JDY6aK8nXSW0PLn441AN6QT2SE6EB6+l5069MR5550X36Pgfvrpp9RLx7\/56g7tarKTTgB8\/PHHs6Tz+uuvj3rz2GOPHUU6H3nkkVEkVYXx6quvxs9psqPZ6my9H8srfcK22247Ur8gypDisTBAjGU+PS1HYKwRGFjSedddd4W11lorWictKK+\/\/nq0QF599dX28ah7lAbk9MQTT2zpdOiQsI5APD\/55JMYDsvmvvvuG\/785z+3xIN1FBms3xYPPfrRRNY6SapjdNJZBy33Mx4I9JN0kh\/IDaR044037qnVTG3LSWeZdKJjv\/nmmyxBY5o6tYza+ge5K1lCrb9+37\/11lth\/fXXHyGd\/U7P43cEJgsCA0k6mYI5+uijI9lLLZpS+lj0qtZUPffcc3GK7YYbbhhVlig9pn+efPLJ+A4CSwfFyBYCKKe0mKojvn65JrLWkUFyO+msg5b7GQ8E+k06ZYVbb731whtvvNGzLKptOeksk84S2BpcV5HOUtixfk6doe7kLOljLYun5whMJAQGknRKsedIk95hfUwJqS0YTb\/lFJzeiZA+\/\/zzYbfddgtXXXVVi1WU+EknZ3G1aXV7L3nqyFonLWGUw69OePfjCPQbgX6TznvuuScOJJntsANJpkchpBdccEH8e+ihh0ZNAdu8f\/vtt+GZZ54J+HvxxRfjecO0qxzpZD01A8hLL700XHzxxTGM1jTyjnWKxPPYY49FSyBLffjNjEq7DX9WjhdeeCHKjDyEJz82j8hv\/bNsCDmeffbZ8Oijj7as88YqCcHCAnnRRRfFdZqETR3+WPdOeNJkXb2IvdVbyMFz\/Gi5EmHJ65w5c2KZsEQKHcUfm5JwGBrIF+EwBiAv4dgMKb9ciV9YEVbv7POmZWzzqjQpc9b0n3TSSTEN4v\/uu+9GZETWH3\/8MZYdMpM\/OdIn\/GWXXRYx5b3qgfzYK5verrvuurg5DgMI2CKHdd3kycbj947AeCMwkKRTUxs50kTjxyLZzoKhhd9WIQpsFoOX1oPJD9enn346WkvTjsv66cV9L2S1cqCIwS6Hn\/Xn947AeCHQT9IJaWLD4ZprrhkefvjhkSxC+hhc3nbbbXHql46c+5122imu1xvxGEIkNnfccUeYMWNGeOqpp+JglDV9e++9d4w3JZ2rVq2K66lZukP6kAzaNevSOfCa3xC23XffPeouCMnll18eN0Qx68KmnCqH7BCSddZZJ2y++eYxfywhYBobgr322msH1lKSJxz+IZJgcMwxxwTWp5MG6yV33XXX8PXXX8dpbJ4feOCBcQAPmbvxxhvjRilrHSYNyNehhx4alySRBnFts802UY9aHQvRPOuss+JMkqyEhIdok1\/0LhhBxPgTMf3yyy\/jOnv0uvQWa3Ehd4qPfN93330jBI7w+N9ggw1iWDBuUsY5vJUmecLYQD0iHeRnnSmbpEiTenDOOedE7Kk\/7B14\/\/33Y9kfd9xxkXiDp+oBfQiyWcd79gtQJpBUiCZYsWPe7iPoNk82Tb93BMYbgYEknZrakPKxILHeB4XfjnSi8FBwViEqHo3QpRT13F5RrCjatOOyfnp1362sqRxOOlNE\/PegIdAr0ilSIBIDUYQMcXoDJFGOWQs6fjYYWSsS9zzbfvvtIzmUf8gFpAProHXvvPNO3GFtSSfEgk0z6dpv1ozzzG6G1FpT5IP4QRghMFZWm569t7pPZI335AGyCHlFbjksc5zWwfP7778\/WuwOP\/zwSEax0iEXJPaVV15RkEiakEebgEiTUz0gzwz4rWPdfU7HSn+n+lV6N6eTiVf5S\/U+6VJ26eAfHX3aaaeNrPtvWsY2L+l9KQ9gDWkm31hsGWBA3Mkr91hpwRsM+Y37+OOP4478k08+uWUmjTJZffXVY9kofS210lKvXuZJafjVERhPBIaOdNa1dFYRuTqWzhUrVkTCaUec\/SqobmVN5XLSmSLivwcNgV6RTk1\/apqVK+QldVq3DelLnYgCfnAii3vssUe0PFn\/aluWdGKNY3CablrU2nQsYUwT40S8tLTHxt3uvkTKCCdiY4mZ\/OeWImGVwzqXyyOWNm3AevDBByOJwmqaOuUlJZElwlbyr3glb0o6eU\/ZQOaQR44BAMcyqbyblLHiKF1LecA\/+pqpdza1po6pcQjnJZdcMkIwRf4t1gw4sDhzPBRlJ\/fVV1\/FTwTKGt\/LPCkNvzoC44nA0JFOKf1uLJ0oSUaqKI+cw4rAlAdWA2sVyfnVMxSf7fh0rzVL8pe7VpHOdrLm4hNGOeWd8+\/PHIGxRqBXpLPUhm1+2HDIxsMSURDB0OZEkVAsWmn7V9uypFNt9KijjhqZNpblFUusbYciXjnya2XO3VeRMr2zmx71DGsnxMc6ycF0P0RO8nIl39KvWvqTk1dxjAXplIX5iCOOGJleJ12srbimZWyxyN2rTuTqF89yRN7GgxWW6XiWIZx77rlxSYStB4o\/VzaKp9d5Urx+dQTGE4GBJJ1S7LaRCiS9S0eIeq+rOoJUIfJe73Kjd9ZfMQL9wx\/+MKrDUdy5q+KEzNq\/nNJKwytsU1nTePRbGOXwkx+\/OgLjicBYkk6RLxGpNN8iAEyxM5OiTUi5tqu2lSOdufabpiWixrWpUz5y7Vrv0D2KW8+srEpTcuTyKD+y1No49Y6r4kjzLTzTuEv+FafkzeWPtZZMT6sMmbrGyq1j7xRW7xWnrpJJZaznpav8p3nAP89yMvKOdZrLly+PlmIsxtQnyWbDyDqeKxvJpHC9ypPi9asjMJ4IDCTp1HREjlhqR7mdqsgBqLVTOWLJ1BaKlPM5rYNwMjWSjurZWfjyyy9brz2970TWKgHUMVolV+Xf3zkCY43AWJJOkSemZ7Fipk7n8XJMG361ri6dLiec2pYlC+gR9EmOoKRpiXhxbepEQnLtmg0o6ES7RlP+raxKU3nOvZMfrhCnnK7knfLSKenEkscuf4gZTvLm8sd7bexkypl7dtvLEt20jGOCFf86JZ3MjrFO0y7LsvliwxRlheWWJQx26UUqTq\/zlMbvvx2B8UBgIEknQKBYckcV6XB4lKF1TGPbqWyty0o7Di0E15olxcHI+fjjjw9PPPGEHsUrCoMRdbrzsMVTlz+aysrUDYqaa86pYywp71wYf+YIjCUCY0k6yRdf\/IJ0ajrW5hXLJu\/0DXHaFmsjc4RAbcuSNbVfu3lE8aM\/OJ5JxEpErdekk81AEE4rl8iOfSa50HfIm25+4j1WRfQv3xkX0Uv1Lf6Ul7qkU2Re\/lnnCtEHU5zkLektycwmG6bZ7QYowjcp45hgxb9OSCf5oc6kxhLKHpnJF59zZnBCnWGzlh0kSByLfy\/zpPj96giMJwIDSzo594wjMtghqNEsQKEM08+kSeHaBkwYwhKHPUNNHYTdUQp5W7BgQZxW52r\/UNhMt2sjQD8Kq4msmmbC+pDuhpRs6hhLylv+\/OoIjBcC3ZJOzVbk1l3m8gRhYc0mZJLZEjk2dLCTnHf4keOoJQa97DCWo51iwYKgpkQO\/9OmTQtsQLSO35zbKR2mWY10NsWGKd2LlKUnaqC\/2EHNp2\/trnbNGJXWDeKXMOx8l3ykzXN2hbMrX7ox1aPCEz0kEim5S4SNgTuDfZUZG2g4dgiLHk75q9Jb2jFv13YqXclUt4wVLnct5QGckD+3ppP0IfJgiiVTTsSdfLGBC9IJERX+lJ01IPCcTxqDRy\/zJHn86giMJwIDSzoBhakwGjeLsWmUnHPH79QaiTJjdJkqGxosjZfz5ehoaOjsdsRyyTs5iCzKs\/SnaTf578e1rqwoPXZGMoVjj0dBJnBCoXFkDB0jf9zzjHfuHIFBQaBT0kk9hiByLiXtFQJ28MEHh6VLl46Ql1Ie6cQZbGKNwrpJXLNnz47PeGcd7WzlypXRQoV+YGDL0Uq0penTp4epU6fG6WxN18v\/VlttFaek2ZCDcmUKmLiZheGesMgNMZk7d252ut\/KYe+JB7LLGr8jjzwyLFu2LBIXDl2H7NjvlSMXfpFTsi5evLhlNoi4mTkCDwawbChioA7h5NxROcgnZ2ziDz\/EjZVu\/vz5MS+UBeHZuQ2BnTlz5kjZoH85VB4HRugs5Ke8wFIWXysveosNTsJWcnBF12N0sLvY7fsmZWzD6R4CjGykjxyqX9QVjrUCa57xbtasWbFOKH\/EAZ70Q4Rn3SbhqAfUBwYle+21V2DABBY4yoxBD30MeeJkFbC1A6Nu86S8+dURGAQEBpp0AhANTl8E4crvJo7GjTLU7szc1x6axNdPv8Mkaz9x8LgnPgKdks5eIMMAlgEoMwKyspXipU0yy4FfdA8bRQjLn7VOKXzqX897cSV9iKQsgRBZ5LLLijpNp05cwk15BzvSBx\/yXdeRD+FZN4z8kQ5rInPYyw9XyUo67crYhuvFva0DtmyQo9R\/NcF\/PPLUC1w8DkcABAaedHoxOQKOwMRDYDxJ57CimZLOYc2Hy+0IOAKTFwEnnZO37D3njsC4IeCkszn0TjqbY+YhHAFHYLAQcNI5WOXh0jgCkwIBJ53Nipn1jZzEwXpC\/rhnvaA7R8ARcASGCQEnncNUWi6rIzBBEHDS2awgtQ6S9Xz6s+sFm8Xmvh0BR8ARGB8EnHSOD+6eqiMwqRFw0jmpi98z7wg4ApMUASedk7TgPduOwHgi4KRzPNH3tB0BR8ARGB8E+k46f\/nLXwYOTvY\/x8DrgNcB1YFNN900\/PGPf3S94LrR64DXAa8Dk6gOwAmXLFnSFeOdUgrNJ7w4zH2\/\/fbzP8fA64DXgZE6gF7Yd999R367jnAd6XXA64DXgYlfB9D9+uRwiTu2e14knbBZTKnuHAFHwBGwCPj0ukXD7x0BR8ARmBwI9H163Unn5KhInktHoAkCTjqboOV+HQFHwBGYGAg46ZwY5ei5cASGCgEnnUNVXC6sI+AIOAI9QWDgSaf9jm3Tb\/xahOp+s9eG6dW9vtfM+Xqdnq1nz+nj3p0jMMwIdEo6ORB9wYIFlX+33HJL+Pzzz3sOz7Jly8KsWbPCVlttFebNmxe+\/\/77nqcxDBGiw+bPnx9xAItu12cNQ557ISPfgz\/llFPCzjvvHPh+fZXzulaFjr8bZgQGmnR+8MEH4YADDgjXXHNN+PDDD+OV3zyv6yCbH330UTj++OPD+uuvH9544426QXvi74UXXgizZ88Oy5cvD++9915YuHBh\/JrIqlWrasX\/zTffhDPPPDNceOGF4ZVXXonxbLDBBuHkk08OvHPnCAwjAp2STvJK5007mjJlSjj11FMDbVyOznzx4sVhjTXWCIsWLQq9HqDRhqdPnx4OOuignsetPAzDFcwZAFAGN910U4vIkP7VVlstnHDCCeGHH35oeffXv\/61iNubb74ZNtxww7DZZptFXdkScMh\/gNfNN98cVl999XDJJZfEOtwuS6W6NpFxaoeJvx9+BAaWdNJ5MCKEbKlT4XrllVeGHXbYIXzxxRdt0b\/44ovD3nvvHS699NJooVhvvfXGlHS+++67gaNhrCWADvOkk04Khx12WFH5KmM\/\/fRTOP3008MNN9zQorzvuuuuqOwhnvhx5wgMGwLdkE7yCtGB8Jxxxhmjso6eOO+88+J7FFwv2wizFVtvvfWkJ52A\/vjjj2dJ5\/XXXx9J57HHHtuitwjzyCOPjCKpKsBXX301oKM32WSTgO6cSI6jwjAW3HvvvSP9Wbv8leraRMapHSb+fvgRGFjSCbFaa621wksvvdSC8uuvvx7WXXfdcPXVV7c8r\/qBtQPLxFiSTnV8jNo\/\/vjjFvFQvFgCHnzwwZbn6Q8pHTrXW2+9deS1lD2dH37cOQLDhkA\/SSdY0MZoNxtvvHFPrWZqk5Pd0gnG0kOppRPdxywMA+zUXXHFFUXSiV90da+t06kMY\/2bWTqOB6PvauKq6tpExKkJNu53eBEYSNLJFMzRRx8dz\/hMLZpqiIccckjtNVXjQTpZf7rTTjuF\/fffP3z33XctNYQpfgjw2Wef3fI8\/YHSvvbaawOHqTLVIidlT\/yk484RGDYE+k061UZ6PdCU\/nHSWSadpbrI7BWzVClJLfmf7M+9rk32GjAx8z+QpFONLWfJ0zsOGE0JaamIxoN0iljmOie9yxHSUh70XBbU3Foq+fGrIzDoCPSbdN5zzz3R0gnJsZs2GMhBSC+44IL499BDD42aArbYffvtt+GZZ54J+HvxxRfDZ599VpxeZ8Pgc889F5fzsLTHxs07Bo48e+yxx6IlkLXm\/GY2h\/dVzsrBOnHWSiIP4cmPzSPxWP+vvfZa9P\/ss8+GRx99tGV2BH2CPsICedFFF8V1moRNHf4+\/fTTGJ40WVcvYm9JJHLwHD+kiyMseZ0zZ04sE5ZIocf508ZKDA3ki3BPPvlklJdwDKrllyvxCyvC6p193rSMbV7TfFJmxGex\/vrrr2MQ+5w6UrLQIiPrXFnLyf4EsMg5W2alupbDycaF\/CxNYF0zdZx0Sd+dIzAoCAwk6Xzrrbfipp8c6US5bLvtto2myseDdKI4mULPkc6q\/LWrGC+\/\/HLYaKON4kaKdJF+u7D+3hEYFAT6STrpvNlwuOaaa8bP6ynPEIjddtst3HbbbZFIQBq4Z8aAzRnWQWzuuOOOMGPGjPDUU0\/FdaH4YY048abtmo2BzL6wsYn0aZvMZLAuHaLKbwjf7rvvHnXXZZddFi6\/\/PLYjtETbMqpcsjOkqJ11lknbL755jF\/LCFgGhuCvfbaawfWUpInHP4hksh6zDHHxM2IpMF6yV133TVAnNCLbFI88MAD4wCePN94441xF324kAAAIABJREFUoxREVI40WId+6KGHhk8++SSmQVzbbLPNqDWdEM2zzjor6j6ttyU8RJv8MlgGI8ilJaZffvllJEhYpqX3WYsLEVV85Pu+++6LWCIb4fHPWknIFRg3KWPlz17TNM8\/\/\/xwzjnnxPqhMmXJFPodTKgTPCev7OS3S6kggKzhxEACKeU3+psyQF5+45rUtRxOkl\/liVz0k8TP+s8dd9wxsBte6cm\/Xx2B8UBgIEmnLIFSPhaYTghkJ2Fsmp3cywqQdk7ExciTvOXyl0sLpcaoFcsoCpYOizy5cwSGFYFekU7IpQgMV4giZGjPPfdsIZLMimD1ZIOR7Xy559n2228fyaHwhBSwphzroHXvvPNO3GFt2zXtk00zkAtImRz3PLObIbXWFPkgfhBGiGxKehWHvVo9Jisi78kDZBHyitxyLOtBZ\/D8\/vvvj3rn8MMPj2T0xx9\/jHJBYjkVQw7CjDzaBESabHrMHfOjDY3W0kk80t8inYpbOjH1r\/fKX6oXIVCUXc5qfdppp42s+29axko3d1UeGOBbrLFKUy\/YZU9dkJORwa69p+5A+tP9B\/y2m6Wa1DXSy+EEWaYzTzHC\/9NPPx2mTZvWMgCT3H51BMYagaEjncNi6ZSCtZ2TCrcbSycKhzMCIZ8oOneOwDAi0CvSiVVHU6y60kZSR0ePlQ3SlzoRBpEDkcU99thj1LFkGjDado01DnJx4okntuyU19p0u\/ZaeoETKZq6HNlQHFjYsMBZ0iH\/uaVI77\/\/fjxZI5dHrHvagMVmR0grVtPUKS8piRRh6xXpJF3KBjns5ktIH8cyqbyblHGal\/S38sDeAspRTs\/TstZzrdMnzHHHHZfdDMsSDI70YsDRtK4hh8rVknMGDgwg0iPE8K8+k8EEgwp3jsB4IjB0pFNKv8kGATXSJmEoFBSHOjJ7rXNIvRSy7ZxU0FJQVmnoXZ2rwtvRcp1w7scRGBQEekU6U2KTyx+HuDP1zakXuR3Eak\/anCgSmuvApX9su4Z0QWiPOuqoFqsrllcssbadSy\/kyG9OdvtMeszGp\/d6B5mB1OD0LLd2XHIw3Q+Rs9Zi8i1dCYkqkXXFMRakUxbmI444YmR6nXSxtuKalnEMVPFPdSKtX3Wfq55Q526\/\/fYWfJEbaynXpnUNkVWuth5gYaWccoMZ+eecagwe7hyB8URgIEmnGqxtVAJJ73JHEclPelWjkyJN35d+S6nSmO2f7XBKYaWccn71LmdlSONjZKp1WnonDJApVfjy41dHYJARGEvS2a79qz0yxY5VSJuQUsIBnmp7tl3TBuu2RekUrk2d8pHTi3qHHIpbz6ysSlNy5PIoP7LU2jj1jqviSHWQ8EzjLvlXnJI3lz+mjzmXWDocvYiVW8sZFFbvFaeukkllrOelq\/yneaj7XPUklxebZtO6Rljl1cZdVQflf+rUqXGq3abv947AWCMwkKRTa5FyxJJ1O0wX1SFsAlONrqSQ5K+X1yo5ddZoOkWTps9ifaaU0vVUX331VTzsns5A0zlpWP\/tCAwyAmNJOkWeaEu5JSlap6epVE1\/5tqnyIQlcg888EAknSlByeEv4sW1qZMes2RDcbBZB51o12jKv5VV\/pXn3Dv54cpUO3qGPKZOeemUdGKdZJc\/RB8neXP54z1rE7HkMo3OPbvttT63aRmneUl\/1yWXCpf6V3m063Oa1jXSy+Ek8prrDySLlkxIZr86AuOBwECSToBAsVQdDo8ytI7jM3T8hn3OvRppOwWQhuvmt0bmOeKszQQoCjl2MKJ8UZ5yTJWg8NMNCiK0vLNxKJxfHYFBR2AsSSdY8FUwSKemYy0+tCHe6cthtEPWRtq1mPKfI51al5dbM4fuYROgiJWIWq9Jp9b0WRIpvWefKR\/aMJTqFt6ju9C\/b7\/99gjRS\/Ut\/pSXuqRTBEv+WaYE0QdTnOQtkU7JzOklTLPbDVCEb1LGMcGKfymJlNcmz8GQemXXoSqeJ554Ivz2t7+N9aJJXSN8DieOSWK5lV1+oLTY0Q\/h1OYwPferIzAeCAws6eQsM47I4Ew3jWYBiIacrmWUwrWjfAumGulYkk7Sx5rAmh52jsqJjKbWS\/IFibQdFwpun332aTmGg3g04k\/jUBp+dQQGHYFuSacGZLl1l7m8Q1hYs0kHz6BNjh3k7CTnHX7k+Gwhg17bdtFDfD8bIpESOfyzQ3jFihWKIl75zWd4pcM04OxmTSeblkhPjuU3HH3Ejmq701ozRrk1nYTFL2HY+S759Jxd4ezKJ+4FCxZEXWzPlxSe6CyRSMlTImYiPyozNj9xHJEG2tLTJdJJ\/NoxnyNXkqluGUve3LWUh9JzzV5Za7fkYV2vrVvcszRAn\/psWtdyOKluUmftgIbn9KFp3cjl2Z85AmOBwMCSTjLPVBgjcaaZUX6cc8dvRonWocy0c9N2KISfP39+nJ5mPQsKkm+hz507NyxdunRE2dm4enlPg+d8NM764\/gMjinhXEDWFaVHpCxfvjwgIwUCMcURfuXKlWGvvfaKo2XyBuHkPDg+q8Zhze4cgWFEoFPSiS6AIHIuJe0ZAnbwwQfXas901hxfhAUT6yZxzZ49Oz7jnXVqe1jVGBAysOVoJUjF9OnTY1tlOlvT9fJP28QqyMYc2jJTwMTNLAz3hEVuSAB6SOFt2qV7kQ0Gz0ceeWTULRBHDl1nsCoSQ3jihRijU\/hDVg4MT2eDIEvgwXpJLHIQFAgn547KQT45YxN\/+CFurGboVvJCWRCeA+MhsDNnzhwpG07akJ4CI44HQn70L1iKIFl5IfVscMphg67H6JCzHiJvkzJW\/uwVApzmAXwp\/zrPwQJCKf3O1DbYcD4s9Y16R9lx4oGc6k6dulaFE\/EwyCEeThsAIwj+fvvtF8tG6fnVERhPBAaadAIMSkRfBKn66sN4gtgubawpKFc6Ir40kW4Mahce\/\/oiBnGgeJmOd+cIDCsCnZLOXuSX9sR0N9O6srKV4qUj11dx0EVaBkP4XDtO\/Zfi7eS5SKcsgRBI8pASyU7irhOXcFPewY7065zmYWUiH4Tj2tSBL0Quh72NS7LWKWMbrl\/3wgrsSro7rTvt6lpJVhtPL+pGKR1\/7gh0gsDAk85OMuVhHAFHYLARGE\/SOdjIlKVLSWfZp79xBBwBR2AwEXDSOZjl4lI5AhMaASedzYvXSWdzzDyEI+AIDBYCTjoHqzxcGkdgUiDgpLNZMbOWjyOcWMOqrx+xRtCdI+AIOALDhICTzmEqLZfVEZggCDjpbFaQWgfJGkX9+Xq9Zhi6b0fAERh\/BJx0jn8ZuASOwKRDwEnnpCtyz7Aj4Ag4AvFUjyVLlnSFxJRSaCKG1bpzBBwBR8Ai4KTTouH3joAj4AhMDgT6aum8\/fbb45mSnKPnf46B1wGvA6oDnGf5y1\/+0vWC60avA14HvA5MojqA7ocbduMqLZ18jYHv9vqfY+B1wOuA6gBfG+NrP\/rtV68bXge8DngdmPh1AE7o0+vdUG4P6wg4Ao0R8On1xpB5AEfAEXAEhh6Bvk6v+5rOoa8fngFHoC8IOOnsC6weaR8Q4MtAfAWJL\/24cwQcge4QGHjSaT\/p1fRza4LGHjfC\/Vg7fc6Mo06aHnPC59NyYUrPxzpvnp4j0AkCnZJOzqZcsGBB5R\/f9\/788887EasyzLJly8KsWbPiOnW+Kf79999X+p+oL9FHfHedtVn83X333RMyq\/QV559\/fthnn33it8x33nnn8Pbbb0\/IvHqmHIGxQmCgSecHH3wQmP+\/5pprwocffhiv\/OZ5Hcfo9MwzzwwXXnhheOWVV8Ly5cvDBhtsEE4++eQ4cq0TR7d+XnjhhTB79uyYNt9MX7hwYTzkedWqVbWi5pvtU6ZMCZtuummYO3duVPYov3XXXTd+z71WJO7JERgwBDolnWSD72rTjmgXp556aosFim9bL168OKyxxhph0aJFHX3fuwoq2vD06dPDQQcd1PO4q9IdtHcYAxgAUAY33XRTi3iQ\/tVWWy2ccMIJ4Ycffmh5x2C5NPB\/8803w4Ybbhg222yzAM7j6cgf\/cZ2220XBzBnn312zOutt97aU7FIh36q9D32nibmkTkCA4DAwJJOOg\/IFQ2fhonjeuWVV4YddtghfPHFF5Xw\/fTTT+H0008PN9xwQ4viu+uuu6LygHjip5\/u3XffjWTRWgLoME866aRw2GGHFZWvlUmkE+XOH8qckTdxu3MEhhWBbkgneYbo0B7OOOOMURCgJ84777z4HgXXy3bObMXWW2896UknoEs3paTz+uuvj3rq2GOPbdG9hHnkkUdGkVQV4KuvvhrWW2+9sMkmm4y7fqP\/2XbbbUfqF0QZUoz+7qX77rvv4sCJeuXOEZgMCAws6YQcrrXWWuGll15qKYfXX389WvmuvvrqlufpD3UOdEx2dCpFScfRz4aujo9R+8cff9wiHooX8vjggw+2PM\/9QF46Vqa0kBdLgTtHYNgR6CfpBBvaGG1\/44037qnVTHplsls6wVi6NCWd6D6sdzmCdsUVVxRJJ3FC7kqW0LGs82+99VZYf\/31R0hnv9Kmb9h333372hf1S3aP1xHoBIGBJJ0Qq6OPPjpsueWWoyyaUvqHHHJI5ZoqFN61114bzwK0UzVSlDvttFNgjWi\/HHGTxv777x8YzVr3xhtvxBE9UzbtnEhnO3\/+3hEYJgT6TTrVzrGc0d565aR\/nHSWSWcJa6yHzFKlJLXkfzyfS0fnLOm9lAvjSr8NIL2U1+NyBLpFYCBJpxR7rjHqXY6QtgND1kcsIP1WfFJauc5J73KENM2Dk84UEf89ERDoN+m85557oqUTkgPZkWMwSpu64IIL4t9DDz00agpYfrl+++234Zlnngn4e\/HFF8Nnn31WnF5nXd5zzz0XLr300nDxxRfHMFrTyDsGv8Tz2GOPRUvgRx99FH8zm9NuTZ+Vg3XixIs8xEd+bB5TuV977bXo\/9lnnw2PPvpoi1UNnYg+wgJ50UUXxXWapJU6\/H366acxPGmyrl7E3upS5OA5fkgXR1jyOmfOnFgmLJFCj\/OnTZIYGsgX4Z588skoL+EYvMsvV+IXVpr9SZ83LWObV6VJmbNunqVQit9abtmodt1118XlX8y6kT\/rbHnl8Ce\/9957bzQ+bLHFFgHLai4d4iQu1s9SPpQT5YWc7hyBYURgIEmnpjZypBOlw1qbTiwYL7\/8cthoo43iJgR1Bv0qNBQnU+g50lmVv1QeFDhfbjnnnHPiTspzzz037LHHHuH55593xZOC5b+HBoF+kk46aTYcrrnmmuHhhx8ewQTSt9tuu4XbbrstTv1CIrhnRoL1etZBbO64444wY8aM8NRTT8V1ofjZe++9Y7xpu2ZjILMvbGwiffQLMxmsS4eo8hvCt\/vuu0fdddlll4XLL7886iL0BKSiyiE75GadddYJHKxP\/lhCwDQ2BHvttdcOrKUUMcI\/BAUMjjnmmLihkjRYL7nrrruGr7\/+Ok5js9HywAMPjDNK5PnGG2+MG6UgNnKkAfk69NBDwyeffBLTIK5tttkmkkhLOiFYZ511VtR9shISHqJNfhnwgxHk0hLTL7\/8MrABCb0uvc9aXIio4iPf9913X8QS2QiPfzaHEhaMm5Sx8mevSpM8sbwLnElHAwXwBWfqAZtbcVz5Tf7q4g+p5eMInIbA5ik2udp0JBN6HgMLeFM+kFsGUnTcSkt+\/eoIDAMCA0k6ZQmU8rFAst4HhV+XdKKIsGpgVUQ5oezHYs2QrABp50ReGNGSt1z+bF65J57tt98+dlx6t2LFijBt2rSWDlXv\/OoIDAMCvSKdIgV02PxBFCFDe+65ZwuRZOMhnTUbjKyViHuepW0MEgPpwDpo3TvvvBNJgm3X6Bg2zUAOIGVy3PPMbobUWlPkg\/hBGCEsKelVHPZqdZ+siLwnD5BFyCtyy7GsB73HcwgOeufwww+PZPTHH3+MckFiOdlDDsKMPNoERJpseoQ8p9ZUbcq0pJN4pL9FOhW3dGLqX++Vv1Qvki5ll7Nan3baaSPr\/puWsdLNXUt5AF\/WCVMPrOM3z2+++eaR+lWFP4SxlF\/Fy2ZRBgnpplf2AuTqpsL51REYZASGjnR2Y+mkkXO+HuQTS2Q\/nRSs7ZyUXhNLJ8opPQ9Q60VTJaz4\/eoIDDoCvSKdmv6EUOmPdp46rIRY2SB9qdOshDYniiwyo4CVzjoNGG27xhqHRfHEE09s2Smvtel2\/bj0AqdqNHVVJIUNKWxatDpB\/nNLkd5\/\/\/14skYuj5xNqQ1YEBxIK1bT1CkvKYksEbaSf8UreVPSyXvKBjns5kuIHscyqbyblLHSLF1zeVC9yC2LQkdj6bYDD+Unhz\/p6n0uv7y\/5JJLYp3l05DWYc2lfCgnd47AsCEwdKRTSr+upTMtECmTOsdy0GmoI7NXSJ+1lqRp8FsK1nZO8icZSspG\/kpXKSuUcL\/Jc0kGf+4IdINAr0hnak3LySRCwBo9Tr9IndqjNieKhKZngBJO+se2a0gXhPaoo46K1lZZXbliibXtXHohR35TudLfavc2PvnRO84nZV0pTs9yJElyMN0PkbMyk2\/pV51PmZNXcYwF6ZSF+YgjjhiZXiddrK24pmUcA1X8U52w9auqXhAVfq1OrsIf\/3pfVZ6rr756JNy2fJiKZ0reylaRFX\/lCAwUAgNJOqXYc41R73JHEaXIMlWUrntR+DqbiaRU8Wv\/bIeTpqnfUlo5v3qXszIoPFfWiWFhYC2YJblSVshkj4OyYf3eERhkBMaSdKq9iEiluKg9MsXOTIo2IeU6dekP265FOlPylabDb+kUrk2d8pHTi3qHTlDcemZlVZqSI5dH+ZGl1sapd1wVR5pv4ZnGXfKvOCVvLn+stWSaWWWIbsfKreUMCqv3ilNXyaQy1vPSVf5tHiS\/fWbD8xys7rzzzvhYMuXwx4Pe5\/Krd6X82HT93hEYJgQGknRqLUyOWLJuh+mKdoSNhdeMOtO1SF999VVcvI1yqHNkUaeFWSWnzhpNp+PStLBAIGeqlKSQeJdOvaRx+G9HYBARGEvSKfJkrVAWE3aPs0aOY9rwi6UQi2GufeZIJ22QtlgiIzYtEReuTZ3afaoPiIdlAOhEu0ZT\/nOkR3nOvbNyMYVb0jPKS6ekE+sku\/y1VlTy5vKHTE8\/\/XQsF6bRuWc3twbjTcvY5jF3nyOdqheyiNtwkGLqS87SXMI4l1\/S4GMiig\/sO6krVja\/dwQGCYGBJJ0AhGKhIygdDp+uZ+H4DB2\/QXjWTNFg7RobnosM8g6LRr+cRuY54qzNBDZ9diaifFGeciigXXbZZdROda3p5NOYrM1y5wgMGwJjSTrBho4c0qnpWIsX7ZB3+nIY7ZC1kXYtpvznSKfW+rEBBwucdRALNjKKWImodUIkciRFabEZCMJpCY7822fyrw1DqX7kPboL\/ct3xkX0Un2LP+WlLukUaZN\/9BhEH0xxkrdEOiUzp5cwzW43QBG+SRnHBCv+5UgnZYgRw66bVRTSydbIofzk8CeciLLNL3VR+Gg9LWWROvYFXHXVVelj\/+0IDDwCA0s6ORqCIzI4002jWdCkAabrMaVw7SgfpcHnItOvAUmJWuXQr1KCMLOOjJ2jciKjafrkCyJsOy6ULErZ7lQlHnavs3HB7pRU\/H51BIYBgW5JpwaVuXWXufzTlrBQQRgYeMqxg5yd5LzDjxxHLTHotW0XPUSbg6CmRAL\/nChB27SO35zbKR2mAWdujaQNl7sXiUmPgmIJEUcfsc7P6grNGOXWdBI\/fgnDznfJp+fsCmdXPnEvWLAg6mJ7FqXwRGeJJEnmHGHjnTbAqMzQzRwFp4G28mdJmOLUVTvm7dpOvZNMdctY4XLXUh5UL+wpAYSnnlBf7BFd7fAnHGTerjWmH4Cc44Q9JJszUuV4vnDhwlEnK+i9Xx2BQUZgYEknoLFwm5E4U+U0NNY28vuJJ55owRRlpp2b6lBQoitXrgx77bVXXCjPcwjnVlttFT87ZhtxS2Q9\/IEMy5Yti2f9cfQKx5RwLiDritIjUlgcPnXq1Hj+GsRUjrztt99+I0eecKAwu+\/tmXzy61dHYFgQ6JR0ogsgiJxLCeGBgB188MFh6dKlI+SlhAGkhuOLsGBiUSKu2bNnx2e8s076gw4fIsDAlqOVmEKfPn16bKtMZ2sjn\/yjXyASbPxAuTIFTNzMwnBPWOSG7M2dO3ckvE27dC9Sxjq\/I488MuoWiCOHrjNY5YgdOeSCGKNT+EPWxYsXt8wG4ZelPuDBekksawzyIZysJ5eDfHIGJf7wQ9wcqTR\/\/vyYF8qC8BwYD4GdOXPmSNlwWoh0LRhB1pCf8gJLWXytvJB6NjgJW8nBFX2I0QE5cq5JGefCQ4CRjfSRQ\/WLuiLHaQXMQEGYKWfKG\/88l7P5qcKfM1wxQHAs1e233x5OP\/30WF8Uj7DnGDCOA2MpB2XPYAY83TkCw4bAQJNOwESJ6IsgXPndxEFW9eUOFARKi6nssXRYU1CupI8syNTE2TwQj6bqmsThfh2BQUKgU9LZizzQnmhDTOvKylaKl46dqVP8onu0DIbwuXac+i\/F28lz0odIyhKoL\/LYZUWdxEuYOnEJN+Ud7MAFfJoQIPIhPJvKSzqsX81hb+OSrHXK2IZrci\/MmuY\/TcPWqVLfpPwI+zQO\/+0IDAsCA086hwVIl9MRcATqIzCepLO+lIPlMyWdgyWdS+MIOAKOQHsEnHS2x8h9OAKOQI8RcNLZHFAnnc0x8xCOgCMwWAg46Rys8nBpHIFJgYCTzmbFzBpBjuRhjSF\/3Nt1hs1ic9+OgCPgCIwPAk46xwd3T9URmNQIOOlsVvxaB8kaRf31Yi1nMynctyPgCDgC3SHgpLM7\/Dy0I+AIdICAk84OQPMgjoAj4AgMOQJOOoe8AF18R2AYEXDSOYyl5jI7Ao6AI9AdAn0nnZw7xjEP\/ucYeB3wOqA68M\/\/\/M9xmli\/\/ep1w+uA1wGvAxO\/DsAJlyxZ0hVznVIK\/c4774R\/+7d\/i4eZc6C5\/zkGXge8DlAHXC94PXBd4HXA68DkqwPofrhhN65IOmGzmFLdOQKOgCNgEfDpdYuG3zsCjoAjMDkQ6Pv0upPOyVGRPJeOQBMEnHQ2Qcv9OgKOgCMwMRBw0jkxytFz4QgMFQJOOoequFzYSYjAt99+2\/Zzo8MAC59Oveuuu8L5558\/IfIz1pjzCVawA8Mmn7styTkpSKe+EdzJd3g5H4+\/1JWep\/78tyPgCIxGoFPSyYHoCxYsqPy75ZZbwueffz460S6fLFu2LMyaNStstdVWYd68eeH777\/vMsbhDM75oPPnz484gMXdd989nBlxqUchAKlYsWJFmDlzZrj22mvDrrvuGu65555R\/obpwcMPPxyOPvroAIl21xkCYAeGYNmtm9CkE4a+dOnSsP\/++4eXXnop\/nHPM97VcTfddFNYbbXVwjbbbBPOOOOM+Mf99OnTw1tvvVUnCvfjCDgCCQKdkk6ioe0uXLgwTJkyJZx66qkto292vy5evDisscYaYdGiRdkBYyJKo5\/vvfdebPsHHXRQz+NuJMg4e4acMACgDNCR1kH60ZknnHBC+OGHH+yrgAEgN4jH05tvvhk23HDDsNlmmwVwnmyuU9x6idOzzz4bpk2bFh555JHAV7Aox0MOOaTnA6yqetDL\/Lz77rthxx13jHWrl\/EOUlxV7ebvf\/97+Oabb1p0ZKeygyWDEK7duAlNOhmBb7rppi0gffTRR2HLLbcMNPA6DoWKYtXf1KlTw0knnRS++OKLOsHdjyPgCGQQ6IZ0Ep3aJQPB1EGIzjvvvNhmUXA\/\/fRT6qXj38yWbL311mGyk04AfPzxx7Ok8\/rrr49k5dhjjx1FOiEzKUlVYbz66qthvfXWC5tsskmLztb7iX7tFLde4nL22WfH+k09h7C8\/fbb4euvv+5lEjGuqnrQq8QYnNJXX3jhhT0hXb2Sq9fxVLUbeMppp51WHOg1kQW9evnll0dM6xrtcvEPLOmk0t94443hk08+ycnd9hkWjx122CF+o9h2OgCHdQTiWSduFCRy\/OUvf4lnjXYDdluh3YMjMEkQ6CfpBEI6NQaKG2+8cU+tZk46\/1FBS6QTHYt1Jacrr7jiiiLpJObJvGypG9z+USqd37FcBKsmgyrqeT9du3rQi7RfeeWVOCvBdaK7Urthhveoo47qCekEw15gOrCkk2mZO++8M2y++ebh+OOPjyNfGmVd99xzz8UpthtuuGFUEIgk0wZMH7Rz+C2NzNuF9feOgCOQR6DfpFOECMvZG2+8kReig6dOOv8BmjCuqx9lCKjr\/x8pTe67scIN4oIFv9+kc6zyA7FlOd133303KSsQfIkZn17OyjCY3GOPPQLYduoGlnQqQ4yWH3zwwbimcp999gmvvfZaLVM5ii233oh49S5HSJWurvh1JSk0\/OoI9AaBfpNONj\/Q\/pntoJOTQ59Ali644IL499BDD42aApZfriygf+aZZwL+XnzxxfDZZ58Vp9eZjmSwe+mll4aLL744htGaRt6xTpF4HnvssWgJZKkPv7FG8L7KWTleeOGFKDPyEJ782DymcqMzkYP1eo8++miLFYuOCVJOJ3LRRRfFdZq5DRf4+\/TTT2N40vzggw+y0+vIgTz4IV0cYcnrnDlzYplceeWVUQYIPJuScKzxI1+EwxiAvIRjhgl\/+iN+YUXY3POmZRwF+P\/\/pfmkzIjPYq3pZvucOmLXqtryUn5IovS8U9ys7Gyeu+666+J08tVXXx0xt++r7pGdMqKP3WKLLeJ+BbC1eeL+\/vvvjzuZqd\/UdZUFcdsypCx\/\/PHHWLcpU+KuUw8kI\/GW2pL8VF1Fjth1nXPUL+S66qqrwjXXXBPvf\/vb38a1n6SttoofrS8uPVf85JElEmzAYnYUDNh8CC623Ou0X8XJlXKNlZGnAAAQY0lEQVRgOeAll1wSZSUdOYt5Ws+QYc0114xlShjise1HcTStNyzBgHiCcSdu4EmnMkWBo6zpRHbffffwxBNPtFR4+dMVYEqk89Zbb43vcuvBFF5XCCf+WBty2WWXxfsDDjhgUq45EiZ+dQS6RaCfpBMFTxtF4drdlnQeu+22W7jtttsikYA0cL\/TTjuN2miAvrnjjjvCjBkzwlNPPRXXhbJgf++9947xptaDVatWxalJlu6QPp0aOmjnnXeORJXfED50F9ZXdAnro9gQxawLm3KqHLJDJNZZZ504+0P+WEKA4odgr7322rHDI084\/EMkweCYY44JZ555ZkyD9ZJsBoA4QSJ4fuCBB8Y16uSZjopNktY6TBrov0MPPTQuSSIN5GVDZapjIZpnnXVWzJP0K+HR3eQX\/2BEZ86fiOmXX34ZO1awkaWNZVF00IqPWa\/77rsvYkseCY9\/vmpDpwzGTco4h3eaJqTlnHPOifVDZcpGJzp4MKFO8Jy8spP\/448\/HsEfmWx+VC4qR+WT553iRljKA7JD3fzwww9j+lz5DeaqE\/FF4R+4QSg5nYHNXMuXL4\/48hz3\/PPPh+222y7WYeoJdYe1kvvtt9\/I\/gZbhqQNbtRN2hd7K8hju3pAWu3aUiELLY+Rm6U1uZ33EK9999037tKHCONefvnlmG8GTJQnV3Zr2\/rNc9ow1lP7nPDgddhhh40QMdUV6QnkUblTj9u1X+JEtnvvvTcuBWRQw2\/kpA1Tt\/htMVd9Uh1GJsqSMqVsaS+WmHZab8C0m2VLQ0M6Y80IIRJNgGdEhtLDCpprVCiBtGIoDioU76QU9Tx3hXSyzoWOBEdBo5gpTCnMXDh\/5gg4AmUEekU6Ud4iMFwhiuiFPffcs4VIsqCeASvTTbRhOe55tv3220dyqOco9bXWWitaB\/WMK59vo+2rM+EZHQybZtJ14qwZ55ndyKC1psgH8UOB00FDXto5OnrShchY3SOdBHlFbjmmFekgeU6ng6Xj8MMPj2QUKxRyQWLtmjf0HPJoExBp0plCnumsrePcvpyOhbAiY6pfpXdLM0fKnzpPpUW6lF3Oas0mCSzFuKZlrPhzV+Vho402asGatKgX1AH7KT86c3DGoCFXyk\/pudJsihtlDgmw8iADv3l+8803t9R5yZdeS3JpdzTlbR31\/ogjjhjVPzKooF5g0aY+MbAhT+pDq+pBk7ZkZUnvVU6klboHHnggDj5lseY9bQg5rf+SnOlzBlVY\/v7whz+0JEV5\/upXvxqxFgvfuu2XmQkGjZBV6\/htN9sp3rTd0N55ZnWVjafTekP+aQNqdzbOOvdDRzqVKSoJO+tQiIyiGHkDvhyVPKcQed\/E0on5mj\/rNIqiwdFI3DkCjkAzBHpFOrE2oVztn9UDkgpFjT6A9KVOhEHKXWQxN4WUU+RY4+gcTjzxxJad8ugNrCVYepgmxqnDqrO0J5Wz1LngDwsbFjhLzOQf4gshs+7999+PejOXR6x7smQwqIdM5dZwKS8pieyUPEnetPNEbsoGOZBHDlLFsUwq7yZlrDhKV+WB8rP6X8\/TstZzrNtypfyUniuOJqRTdTW3dlEbg9LBkORLrzm5sJqdfPLJYd111w2vv\/56GiT2pWm5IH\/JPxGU6g3vmrSlUcKYB6RRkgHSicyQYtUdgqIH7OCvJGf6XKRz2223jeHhJjiWf8BLVH9y+ErktP0S5rjjjsuSO+1XkRW3FG9OVym9buqN0geHTtzQkk6bWcgnip21KKw1wlWRTpQkHVDauG2cVfcqzPXXX9\/P6qwCyt85AgUEekU667Rhdb6lTkidvc4jFAnFYqMORNlQ27fWA+kTdolaqyv3WGItiVKHlSO\/SqN0LXUu+Nc7zielU7DPcoREcjDdD5GzcpNvrDHgomVKOXkVx1iQTggm1kU70CddWd+alnEJYz1XnUjrV5PnKhNb\/rZc0ueluEs4E1dVXeU98kOw8NfO5eTFygyZyg1ciE+yWbJNmiX\/Nkxab3jXpC1V5Qe5VIdTf1hcaetwALCBN3CmbzowU95SOXPPWcbDwJM4WerCbAHPWIogl8M3faf2Kz2Dzrr99ttb2ifyYGmUXKV4FYfVVUqvm3qjegoOnbihJp1YGRlJYOnE4gn5VCehyquCseDoXW70bv1BYFkw\/Z\/\/+Z\/2cbSqoDDqNuaWwP7DEXAEwliSTinlUickJcoUO50sFoTSoDSnyKVPcromLWp1WJ0obOUjJSukoXfIrbj1LNfpSI6UVFl5Zam1cdr3iiPNt\/BM4y75V5ySN5c\/WdxUhhAHrNxYbHAKq\/eKU1fJpDLW89JV\/tM8NHkumdL8lJ6X4q7CTe9SOZUvnlN+nATTzuXkUn1P86C4lD7LNjTrR5ol\/4RTmLTe8K5JW5IMuStplOoC\/pGVgRYWa5ZQgFG6ZK4kZ+k5m3XgFLvssssIAeXraVr+l8NXsuud2lo73BWOq8KmmCuOTtp\/Vb1RPQWHTtxQkk5Ahv0zBcRxSkwVpU5rp3LEkqktChcze5XTdE1aaCrMbtY1VKXr7xyBiY7AWJJOkafSIFHrvzSVqumjdAqVMlHbtzoBPYI+KXX8tizVYXWisEudC\/Fris+u0ZR\/K6tkUZ5z7+SHK1PtJV2pvKTkQZ1SikfqH+skg3qtFZW8aecpeZ5++ul4DB56mXt228vI0LSMFWfpWspDk+el\/JSel+Kuwk11VVZ6mx+IOnVY1jP7Lnefk4tlIcwilmb1VPftLvGmpNPWA8WX1p2cvFXPZMnLtTPecRqBHHWIA9bZCCYdwLsUd\/lPnzONzlpy8JPjnjXTWD\/TmYdc\/U7br35XEWebFu04jTenq\/hgDvJ0U2\/If906JRntdahIJwt\/OY6EBoA5vOr7ylqzkHYcVDCmj7RmSWAwGkH5aVTCcyweFKZd58FzrenULlDF4VdHwBGoh8BYkk4kQtlCOjUda6WknfMOPzj0AGsj7VpM+c8pcukaptS0WUL+6Xw4nknESh0W16YuRwoUB5uBIJyWRMq\/fSb\/yIm8ufV+kBWIHTNHInqWVCgO5aUu6VRHJ\/8QGjp5MMVJ3rTzVHqSmeleptntBij8NCljxVm6lghgk+el\/LDjmM1uaT5LcVfhRr1ik5ddy6s8iTDmNoHJj73m5KW\/hDxBMqgLqaNeQKzY9CLXjnRW5adJW1J6uSufqIYn5AxL1D82DWnAovAYo2xbKdVvwjMQUz2m\/nIqBuVnHdP1tC+19Ry+8p9rv7RB9JJdxyz\/nN7DEU+4Urwqf5snygt5uqk3YFoahEi+qutQkE4KFZJJRiGddtdZKXNUKBYKczyBPddKldruKNXUDRWJRdP8xuGXaXvO5pMjXp1\/ZY9j0Xu\/OgKOQHsEuiWdmq3IrbvMpQ5hwRpE52zXbqFL2EnOO0sYadvMZLDrW462z05gOgKryHmPf75ZvWLFCnmPV36js9TBaQYmt0ayJWDmhzoXOnmrexgo04mm04PavZ5b00n07IAnDPpM8uk5u8KZgiRupghTPSo8becrkUvkSYN1lRmbJzhWByslTvlLyZji5aod83Ztp95LprplrHC5aykPpedssmH9XWqho5Nng5eOUiIt6gQkLs1nKe52uKmu2pMLSIe6Sx22dSWXVz0r4U\/\/x7IE+kL8yNGvUi\/sFDL1iPKtWtNZJz912pLkyF1FuHIznZBF6r01JiE3p1jY0y0kp42DOsY6bVvvNRCFTIk7IBPrkDmuiCtO+NZtv6rPpMe9HPcsLdE30BVvWp9k\/VdZIBsyki9cp\/UGPHIDcsnX7jrQpJNpc6bPdeyDBb5dxniP\/3nz5sXz5ehoYPfsdqTAbFxUOA5eXX311VuOHCEOzifjLDJGecSBguZcOM7Psoq6jjzuxxFwBP4fAp2STtZwQxBZrI\/iR4EffPDBYenSpSPkpYQxypnBJgoT6yZxzZ49Oz6znSnhadsrV66MmyiwOGCJoEOCVHCO5dSpU+MxKdqgIf9M0UE0WC+GcmUKmLiZguOesMhNpzd37txaGzyUH3UuTLkdeeSR8eBpiCOHrmO1VCeEf+SCGCOnZF28ePHIYeyKE7IEHgy2sagwUIdwclaiHOST8x7xhx\/i5kil+fPnx7xQFoRnDTz6cebMmSNlg\/7lUHkcGEGMkJ\/yAktZgay8kHo2OAlbycGVDpPjYnLWH943KWMbr+7pqNM8gC\/lX+c5WNC\/iNBA2LA0UtbITp3jbFbKi3xCSiDSadx1cZPc7PpmLSEknrpHHQRDntdxYE0+aU+Si8ES9RZHfSBfHFWIpYvpZMg95anZQfKcxkGbUflLjqp6gJ92bUnxVF2Jg4GYnS6Xf0gnZUIboh5RLrRxZLf1XnJS3xgoYD0lTkgXbVj1njYIKWcjIW0ekglfoP1xrizx4Jq0X8nKNDttC0sqdQe9hdwq13bthoEM8tPWfv3rX0eeY4lx03ojIpuzFEvmdteBJZ0oUBomQGuBcrvM5N5T4ChD7c7kXpUg5z\/3jMqir5JwtYQ159+fOQKOQDUCnZLO6ljrvaWTZACKhUJWtlJIdAVWE\/yiB9iNSlj+1NnasKl\/+67be3VasmhACJBLxKCb+OvEJdyUd7AjffBpolPJh\/BsKjPp0BHnsLdxSVbSaVfGNlw\/7m2dAGf7u4lsdXBTOTYtk7r5VpmrDtQNl\/PXLj8WJ\/w2dRA\/LLGy7Ck8cZEPteV2dTHNs34LY+KhTiKv8gQ+duc6afMOItpJ+1WauXiVr9JVbUHy5vzVrTdgCaa5pRa5eHPPBpZ05oT1Z46AIzAxEBhP0jmsCKad1rDmw+V2BMYCAYxDGK5y67jHIv00jYnQfsEyXVqU5rPdbyed7RDy946AI9BzBJx0Nod0InRazXPtIRyBzhFg+QbLDLAQjrcb9vbLxm2WJdhNY51g6qSzE9Q8jCPgCHSFgJPOZvCxdouTOFhzxx\/3LD1y5wg4AmUEtHnGbhwu++7fm2FvvywdAMNe4Oiks3\/1zGN2BByBAgJOOgvAFB5jJWHtmf1jHZY7R8ARqEaAtsMXk5gahjyNhxvm9gtmYMcJQt3srxHuTjqFhF8dAUdgzBBw0jlmUHtCjsCkR4DNNOzkbrcBbdIDlQGg19g56cyA7I8cAUegvwg46ewvvh67I+AIOAKDiEDfSeeOO+4YOB\/O\/xwDrwNeB1QHZsyYEc9+1G+\/et3wOuB1wOvAxK8DcMIlS5Z0xYenVIVmHYD\/OQZeB7wOeB3wOuB1wOuA1wGvA1Wcsc67StJZJwL34wg4Ao6AI+AIOAKOgCPgCLRDwElnO4T8vSPgCDgCjoAj4Ag4Ao5A1wg46ewaQo\/AEXAEHAFHwBFwBBwBR6AdAk462yHk7x0BR8ARcAQcAUfAEXAEukbASWfXEHoEjoAj4Ag4Ao6AI+AIOALtEHDS2Q4hf+8IOAKOgCPgCDgCjoAj0DUCTjq7htAjcAQcAUfAEXAEHAFHwBFoh4CTznYI+XtHwBFwBBwBR8ARcAQcga4RcNLZNYQegSPgCDgCjoAj4Ag4Ao5AOwScdLZDyN87Ao6AI+AIOAKOgCPgCHSNgJPOriH0CBwBR8ARcAQcAUfAEXAE2iHw\/wG66jpQC+GeoQAAAABJRU5ErkJggg==)","6a543034":"# 7) Support Vector Machine","40579ae9":"Adiciona os jogos de dentro e fora de casa","fe6560b3":"Verifica as distribui\u00e7\u00f5es das vari\u00e1veis (\u00fatil para sele\u00e7\u00e3o manual, principalmente para o classificador Naive Bayes). Distribui\u00e7\u00f5es diferentes entre \"L\" e \"W\" s\u00e3o \u00fateis para o Naive Bayes, como por exemplo as vari\u00e1veis H_W\/D % e A_W\/D % que s\u00e3o as propor\u00e7\u00f5es de vit\u00f3rias do time da casa e do time de fora em cada jogo.","fb539ff8":"Abaixo tem-se o ajuste do modelo ajustado com os melhores par\u00e2metros e a predi\u00e7\u00e3o.","c4e20a8b":"# 3) Valor da informa\u00e7\u00e3o (IV) e peso de evid\u00eancia (WOE)","2c6d1405":"# 6) Ada Boosting","f29952bb":"Como podemos ver, o modelo que obteve maior acur\u00e1cia balanceada foi o Naive Bayes, portanto submetemos no Kaggle os resultados desse modelo e obtivemos nossa maior acur\u00e1cia.##","25dc1dae":"**Transforma as vari\u00e1veis dos times**\n\nPode ser \u00fatil para reduzir o n\u00famero de vari\u00e1veis, considerando apenas a rela\u00e7\u00e3o entre as vari\u00e1veis do time da casa e as do time de fora","b25eb2be":"**Transforma\u00e7\u00e3o dos dados**","b47bb209":"Acima nota-se que nenhum dos atributos possui variabilidade zero.","f97143a2":"# 1) An\u00e1lise dos dados brutos. \n\n","303447b7":"Nota-se que os dados n\u00e3o apresentam valores ausentes. ","944c2039":"Fazemos a classifica\u00e7\u00e3o usando o Ada Boosting.","ef4bb183":"Os melhores par\u00e2metros s\u00e3o mostrados abaixo.","d706ed18":"**Pega o ano dos jogos (fonte: notebook NBA - 71% public)**\n\nPode indicar para o classificador que alguma tend\u00eancia est\u00e1 mudando com o passar dos anos","302a4892":"**Pega o m\u00eas e o dia da semana da \"Data\" (adaptada do notebook NBA - 71% public)**\n\nPode indicar alguma tend\u00eancia dos times perderem em casa ou fora conforme o dia da semana ou m\u00eas","59471425":"# 4) Sele\u00e7\u00e3o de atributos manual","08c3d536":"Ajuste do modelo e prepara\u00e7\u00e3o para a submiss\u00e3o.","d1b09234":"As colunas que possuem alta correla\u00e7\u00e3o com as demais podem ser n\u00e3o utilizadas pelos modelos de classifica\u00e7\u00e3o, em outras palavras, isso pode ser um m\u00e9todo de sele\u00e7\u00e3o de vari\u00e1veis.","51ae7a1b":"# 5) Naive Bayes","b3690f05":"# Task 03 - NBA Matches Winner Prediction\n\nD\u00e9bora Mayumi Rissato - 5288223\n\nDouglas Decicino de Andrade - 10883512\n\nPaulino Ribeiro Villas Boas - 2950178\n\nRenan Silva Chun - 10691817\n\nRenan de Oliveira da Cruz - 10801090","83d10e8b":"Verificando valores ausentes nos dados.","e48b11c7":"# 8) Random Forest","f5dedfd6":"Adiciona m\u00eas, dia da semana e ano nos dataframes"}}