{"cell_type":{"bf972156":"code","16c40c38":"code","727c4883":"code","a6f537e6":"code","95d4856f":"code","aef07a71":"code","fd423f09":"code","d0b4cac3":"code","463f31fc":"code","da556005":"code","17b0e62e":"code","f9cd4e3d":"code","697fa6d4":"code","0ba24f70":"code","f0a9ff10":"code","78e18a5a":"code","95c58384":"code","6a8118e3":"code","78f76d14":"code","dd30f8f7":"code","bd658719":"code","555c0efb":"code","4c80ec8e":"code","4a3dd0e6":"code","e2a68509":"code","cde9069b":"code","d2d88764":"code","76c39666":"code","691c3e44":"code","c798ecef":"code","c28a8dfc":"code","b6f2abf6":"code","2c04b607":"code","1d8c9033":"code","859b9d5d":"code","ee7731a2":"code","7ce4d308":"markdown","68d4d6bc":"markdown","b38db424":"markdown","611b15a6":"markdown","8c13ac39":"markdown","5d23bf56":"markdown"},"source":{"bf972156":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16c40c38":"import numpy as np\nimport pandas as pd\n\n%matplotlib notebook\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\nimport category_encoders as ce\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import RFE\nimport lightgbm\nimport xgboost as xgb","727c4883":"train = pd.read_csv(\"\/kaggle\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv\")","a6f537e6":"train.head()","95d4856f":"train.info()","aef07a71":"train.describe()","fd423f09":"profile = ProfileReport(train)","d0b4cac3":"profile","463f31fc":"def treat_data(df):\n    \n    #df = df.loc[:, df.columns[~ df.columns.str.contains(\"_id\")]]\n    df.dropna(axis=0, inplace=True)\n\n    df.reset_index(inplace=True)\n    df.drop(\"index\", axis=1, inplace=True)\n\n    mapping = df.city.value_counts()\n    df.city = df.city.map(mapping)\n    df = pd.get_dummies(df, columns=[\"gender\"], drop_first=True)\n\n    rev_exp_ord_encoder = ce.OrdinalEncoder(\n    mapping=[\n        {\n            \"col\":\"relevent_experience\",\n            \"mapping\":{\n                \"No relevent experience\" : 0,\n                \"Has relevent experience\" : 1\n            }\n        }\n    ]\n    )\n    df = rev_exp_ord_encoder.fit_transform(df)\n\n\n\n    univ_ord_encoder = ce.OrdinalEncoder(\n    mapping=[\n        {\n            \"col\":\"enrolled_university\",\n            \"mapping\":{\n                \"no_enrollment\" : 0,\n                \"Part time course\" : 1,\n                \"Full time course\" : 2\n            }\n        }\n    ]\n    )\n\n    df = univ_ord_encoder.fit_transform(df)\n\n    ed_ord_encoder = ce.OrdinalEncoder(\n    mapping=[\n        {\n            \"col\":\"education_level\",\n            \"mapping\":{\n                \"Graduate\" : 1,\n                \"Masters\" : 2,\n                \"Phd\" : 3\n            }\n        }\n    ]\n    )\n    df = ed_ord_encoder.fit_transform(df)\n\n\n    df = pd.get_dummies(df, columns=[\"major_discipline\"], drop_first=True)\n\n\n    ex_ord_encoder = ce.OrdinalEncoder(\n    mapping=[\n        {\n            \"col\":\"experience\",\n            \"mapping\":{\n                \"<1\" : 0,\n                \"1\" : 1,\n                \"2\" : 2,\n                \"4\" : 4,\n                \"5\" : 5,\n                \"6\" : 6,\n                \"7\" : 7,\n                \"8\" : 8,\n                \"9\" : 9,\n                \"10\" : 10,\n                \"11\" : 11,\n                \"12\" : 12,\n                \"13\" : 13,\n                \"14\" : 14,\n                \"15\" : 15,\n                \"16\" : 16,\n                \"17\" : 17,\n                \"18\" : 18,\n                \"19\" : 19,\n                \"20\" : 20,\n                \">20\": 21\n            }\n        }\n    ]\n    )\n    df = ex_ord_encoder.fit_transform(df)\n\n\n    comp_size_ord_encoder = ce.OrdinalEncoder(\n    mapping=[\n        {\n            \"col\":\"company_size\",\n            \"mapping\":{\n                \"<10\" : 0,\n                \"10\/49\" : 1,\n                \"50-99\" : 2,\n                \"100-500\" : 3,\n                \"500-999\" : 4,\n                \"1000-4999\" : 5,\n                \"5000-9999\" : 6,\n                \"10000+\" : 7,\n            }\n        }\n    ]\n    )\n\n    df = comp_size_ord_encoder.fit_transform(df)\n\n    df = pd.get_dummies(df, columns = [\"company_type\"], drop_first=True)\n\n\n    last_n_j_ord_encoder = ce.OrdinalEncoder(\n    mapping=[\n        {\n            \"col\":\"last_new_job\",\n            \"mapping\":{\n                \"never\" : 0,\n                \"1\" : 1,\n                \"2\" : 2,\n                \"3\" : 3,\n                \"4\" : 4,\n                \">4\" : 5\n            }\n        }\n    ]\n    )\n\n    df = last_n_j_ord_encoder.fit_transform(df)\n\n    df[\"experience\"] = df[\"experience\"].astype(\"int32\")\n\n    #df[\"target\"] = df[\"target\"].astype(\"uint8\")\n\n    sca = StandardScaler()\n\n    df.loc[:, [\"city_development_index\", \"training_hours\"]] = sca.fit_transform(df.loc[:, [\"city_development_index\", \"training_hours\"]])\n    \n    return df","da556005":"def run_kfold(X, y, model, folds=10):\n    skf = StratifiedKFold(n_splits=folds)\n    skf.get_n_splits(X, y)\n    roc_auc_avg = 0\n    k = 0\n    for train_index, test_index in skf.split(X, y):\n        k+=1\n        #print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n        X_train, X_test = X.iloc[train_index, :], X.iloc[test_index, :]\n        y_train, y_test = y[train_index], y[test_index]\n\n\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n\n        \n        roc_auc_avg += roc_auc_score(y_pred, y_test)\n\n      \n        print(\"\\nfold \" + str(k) + \" \" + str(roc_auc_score(y_pred, y_test)))\n        print('Accuracy: %f, \\nRecall: %f \\nPrecision: %f'\n          % (accuracy_score(y_test, y_pred), recall_score(y_test, y_pred), precision_score(y_test, y_pred)))\n\n\n\n    print(\"avg roc_auc score is \" + str(roc_auc_avg\/k))\n    ","17b0e62e":"from sklearn.model_selection import StratifiedKFold, train_test_split\nfrom sklearn import linear_model\nfrom sklearn.metrics import roc_auc_score, accuracy_score, recall_score, precision_score","f9cd4e3d":"train = treat_data(train)","697fa6d4":"X = train.drop([\"target\", \"enrollee_id\"], axis=1)\ny = train.target","0ba24f70":"X.dtypes","f0a9ff10":"lg = linear_model.LogisticRegression(max_iter=3000)\nrun_kfold(X, y, lg, folds=10)","78e18a5a":"rfc = RandomForestClassifier(random_state=0)\nrun_kfold(X, y, rfc, folds=10)","95c58384":"rfe = RFE(rfc)\nrfe.fit(X, y)","6a8118e3":"rfe.ranking_","78f76d14":"rfe.estimator_.n_features_","dd30f8f7":"rfe.support_","bd658719":"rfe_cols = X.columns[rfe.support_]","555c0efb":"X_rfe = X.loc[:, rfe_cols]","4c80ec8e":"from sklearn.utils import resample","4a3dd0e6":"len(train[train.target==0])","e2a68509":"# Separate majority and minority classes\ntrain_majority = train[train.target==0]\ntrain_minority = train[train.target==1]\n \n# Upsample minority class\ntrain_minority_upsampled = resample(train_minority, \n                                 replace=True,     # sample with replacement\n                                 n_samples=7472,    # to match majority class\n                                 random_state=0) # reproducible results\n \n# Combine majority class with upsampled minority class\ntrain_upsampled = pd.concat([train_majority, train_minority_upsampled])\n \n# Display new class counts\ntrain_upsampled.target.value_counts()\n# 1    576\n# 0    576\n# Name: balance, dtype: int64","cde9069b":"train_upsampled.reset_index(inplace=True)\ntrain_upsampled.drop(\"index\", axis=1, inplace=True)\nX_up_rfe = train_upsampled[X_rfe.columns]\ny_up_rfe = train_upsampled.target","d2d88764":"lg = linear_model.LogisticRegression(random_state=0, max_iter=3000)\nrun_kfold(X_up_rfe, y_up_rfe, lg, folds=10)","76c39666":"rfc = RandomForestClassifier(random_state=0)\nrun_kfold(X_up_rfe, y_up_rfe, rfc, folds=10)","691c3e44":"xgbc = xgb.XGBClassifier()\nrun_kfold(X_up_rfe, y_up_rfe, xgbc, folds=10)","c798ecef":"lgbm = lightgbm.LGBMClassifier(random_state=0)\nrun_kfold(X_up_rfe, y_up_rfe, lgbm, folds=10)","c28a8dfc":"test = pd.read_csv(\"\/kaggle\/input\/hr-analytics-job-change-of-data-scientists\/\/aug_test.csv\")","b6f2abf6":"test = treat_data(test)","2c04b607":"test_prob = rfc.predict_proba(test[X_rfe.columns])","1d8c9033":"test_prob = [ i[1] for i in test_prob]","859b9d5d":"result = pd.DataFrame({\n    \"enrollee_id\" : test[\"enrollee_id\"],\n    \"targer\" : test_prob\n})","ee7731a2":"result.to_csv(\"submission.csv\", index=False)","7ce4d308":"# random forest","68d4d6bc":"# light gbm","b38db424":"# test data","611b15a6":"# logistic reg","8c13ac39":"# RFE","5d23bf56":"# xgboost"}}