{"cell_type":{"2a879259":"code","d06e3c2b":"code","fbf09aaa":"code","8d8f6004":"code","8f339682":"code","c23e5549":"code","9fd4948a":"code","19828dcd":"code","93483fc8":"code","dc7ab2b4":"code","958eaeed":"code","694d412e":"code","b21d443f":"code","5d8b1297":"code","cef59204":"code","a1268a66":"code","db8cd096":"code","bca634ca":"code","5affd0c3":"code","a2f4283c":"code","20cb967e":"code","860e0f50":"code","c3dd597f":"code","19532938":"code","3e97920b":"code","0c8f7bb2":"markdown","790768f8":"markdown","8ac8df25":"markdown","1a53dbbc":"markdown","07a4318d":"markdown"},"source":{"2a879259":"import numpy as np\nimport re\nimport pandas as pd","d06e3c2b":"np.random.seed(0)","fbf09aaa":"submissionColumn = 'SalePrice'","8d8f6004":"best = open('..\/input\/sga-files\/best.txt')\nbestFileName, globalBest =  best.read().split('\\t')\nbest.close()\nbestFile = pd.read_csv('..\/input\/sga-files\/'+bestFileName)\nglobalBest = float(globalBest)","8f339682":"globalBest","c23e5549":"bestFileName","9fd4948a":"i,j = re.findall('IMPROVE_(\\d+)_(\\d+).csv', bestFileName)[0]\n# print(i,j)\ni, j = int(i), int(j)","19828dcd":"globalBest","93483fc8":"lr = 0.005 # 5% deviation allowed\ni=9\nj=3\nsubmissions_for_the_day = 10 # Limit on the number of submissions imposed by kaggle.\nwhile True:\n    print(f'Running Phase {i} @ {lr*100}% deviation')\n    print(f'Current best - {bestFileName}')\n    deviation = lr * bestFile[submissionColumn].mean()\n    x = np.random.normal(0, deviation, bestFile.shape[0])    \n#     print(np.min(x), np.max(x)) \n    new_file = bestFile.copy()\n    new_file[submissionColumn] = bestFile[submissionColumn] + x\n    new_file.to_csv(f'IMPROVE_{i}_{j}.csv', index=False)\n    !kaggle competitions submit -c house-prices-advanced-regression-techniques -f \"IMPROVE_{i}_{j}.csv\" -m \"SGA\" > statusFile.txt\n    statusFile = open('statusFile.txt')\n    status = statusFile.read()\n    if status == 'Successfully submitted to House Prices: Advanced Regression Techniques':\n        print(status)\n    else:\n        print(f'Error - {status}')\n        if not int(input('Want to continue inspite of error?0 for No: ')):\n            break\n    statusFile.close()\n    !kaggle competitions submissions -c house-prices-advanced-regression-techniques > submission_scores.txt\n    scoreLine = open('submission_scores.txt', mode='r').readlines()[3] #First line for error\n    score = float(re.findall('.*(\\d+\\.\\d+).*',scoreLine)[0])\n    print(f'Obtained Score - {score}')\n    \n    if not int(input('Want to continue submissions?0 for No: ')):\n        break\n    if score < globalBest:\n        bestFileName = f'IMPROVE_{i}_{j}.csv'\n        bestFile = pd.read_csv(bestFileName)\n        globalBest = score\n        i+=1\n        print(f'Improved. Current phase ended. Entering into Phase - {i}')\n        j=0\n        best = open('best.txt',mode='w')\n        best.write(f'{bestFileName}\\t{score}')\n        best.close()\n    else:\n        j+=1\n        print(f'Did not improve. Entering to Trial - {j} of Phase - {i}')\n    \n    if not int(input('Want to continue submissions?0 for No: ')):\n        break\n    \n    submissions_for_the_day -=1\n    print(f'Submissions left: {submissions_for_the_day}')\n#     if int(input('Want to change LR?')):\n#         lr = float(input(f'Enter the new LR. Current lr - {lr}'))  \n#         print(f'LR changed to {lr}')","dc7ab2b4":"scoreLine = open('..\/input\/sga-files\/submission_scores.txt', mode='r').readlines()[3]\nscoreLine","958eaeed":"import os","694d412e":"# Browser code\n# a= [];\n# for(var i =2;i<82;i++){a.push($(\"div:nth-child(\"+i+\") > div > div.competition-submissions__score\").innerText);}\n\na = [\"0.09916\", \"0.09878\", \"0.09818\", \"0.09913\", \"0.09847\", \"0.09860\", \"0.09895\", \"0.09840\",\n     \"0.09884\", \"0.09866\", \"0.09877\", \"0.09914\", \"0.09883\", \"0.09870\", \"0.09904\", \"0.09892\",\n     \"0.10068\", \"0.10004\", \"0.09971\", \"0.10110\", \"0.10086\", \"0.10122\", \"0.10138\", \"0.10071\",\n     \"0.10189\", \"0.10077\", \"0.10101\", \"0.10107\", \"0.10088\", \"0.10094\", \"0.10117\", \"0.10117\",\n     \"0.10065\", \"0.10175\", \"0.10103\", \"0.10130\", \"0.10136\", \"0.10096\", \"0.10207\", \"0.10157\",\n     \"0.10147\", \"0.10258\", \"0.10161\", \"0.10203\", \"0.10156\", \"0.10273\", \"0.10161\", \"0.10157\",\n     \"0.10169\", \"0.10145\", \"0.10141\", \"0.10172\", \"0.10285\", \"0.10191\", \"0.10228\", \"0.10184\",\n     \"0.10297\", \"0.10183\", \"0.10180\", \"0.10198\", \"0.10172\", \"0.10285\", \"0.10167\", \"0.10244\",\n     \"0.10184\", \"0.10330\", \"0.10217\", \"0.10219\", \"0.10203\"]","b21d443f":"scores = list(map(float, a))[::-1]","5d8b1297":"from matplotlib import pyplot as plt","cef59204":"plt.plot(scores)\nplt.title(\"Scores\")\nplt.xlabel(\"Submission number\")\nplt.ylabel(\"Submission score\")","a1268a66":"def matched(x):\n    if re.search(\"IMPROVE.*\\.csv\",x):\n        return True\n    return False\nfiles = list(filter(matched, os.listdir('..\/input\/sga-files\/')))","db8cd096":"files = sorted(files, key = lambda x: int(x.split('_')[1])*10000 + int(x.split('_')[2].split('.')[0]))","bca634ca":"scores_files = []\nfor score, file in zip(scores, files):\n    scores_files.append(file[:-4]+'_'+str(score)+'.csv')\n# scores_files","5affd0c3":"phase = 0\nprev = ''\nselected = []\nfor file in files:\n    if int(file.split('_')[1])!=phase:\n        selected.append(prev)\n        phase = int(file.split('_')[1])\n    else:\n        prev = file\nselected","a2f4283c":"all_best  = pd.DataFrame()\nfor file in files:\n    all_best[file] = pd.read_csv('..\/input\/sga-files\/'+file)['SalePrice']\nall_best.describe().loc['min',:].plot()\nplt.xticks(rotation=90)","20cb967e":"all_best  = pd.DataFrame()\nfor file in scores_files:\n    filename = '_'.join(file.split('_')[:-1])+'.csv'\n    score = float('.'.join(file.split('_')[-1].split('.')[:-1])) \n    all_best[filename] = pd.read_csv('..\/input\/sga-files\/'+filename)['SalePrice']\n# all_best.describe()\n# scores","860e0f50":"selected_index = [i for i,x in enumerate(files) if x in selected]","c3dd597f":"selected_file_scores = np.array(scores)[selected_index].tolist()","19532938":"plt.figure(figsize=(10,6))\nplt.plot(scores)\nplt.plot(pd.Series(selected_file_scores, index=selected_index), marker='x')\nplt.title(\"Plot showing the improved as x\")\nplt.xlabel(\"'Improved' submission numbers\")\nplt.ylabel(\"Submission score\")\n_ = plt.xticks(ticks = selected_index)","3e97920b":"np.array(files)[selected_index].tolist()","0c8f7bb2":"#### The code below is where all the \"tricks\" happen. \n\nTo give a rough idea:\n1. Make sure your base submission has a **mean** roughly equal to the **mean of the test data**. What? Yes there's a way to find the same. Check [this](https:\/\/arxiv.org\/pdf\/1802.04947.pdf) out for more info. \n2. Improve your base submission using the code snippet below. How? \n    * **Generate a noise with 0 mean and `lr*mean` standard deviation**. Where the `lr` is the deviation in % that you wish to allow and the `mean` is the mean of the best submission.\n    \n    * **Add the generated noise to the base submission**. Based on my run, there's a 1\/6 chance that you will obtain a score better than your previous one.\n   \nHow much did I improve my score? Well keep scrolling!","790768f8":"### Score analysis","8ac8df25":"And to answer the earlier question how much did I improve my score? \n\n**0.102 to 0.09818 on the public leaderboard in just 70 submissions** that too automated. ","1a53dbbc":"Just going through the notebook? Cool.\n\nWant to test the code? Make sure that you could use kaggle apis - https:\/\/www.kaggle.com\/docs\/api.\nWhy do I need to do so? The notebook submits automatically to the contest using the apis, to make things easier.","07a4318d":"#### This notebook displays the use of a trick to climb the leaderboard by manipulating the best scores over and over for a span of few days. "}}