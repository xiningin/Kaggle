{"cell_type":{"f05f991f":"code","84b905b0":"code","c470505b":"code","375b8633":"code","f23bb3d2":"code","ebddf920":"code","9e6f7c3a":"code","d12b6d6a":"code","91093819":"code","e69e3f01":"code","804ff502":"code","623a5b82":"code","17f81446":"markdown","4e25790b":"markdown","249d4130":"markdown","1d30b9a6":"markdown","87cf0449":"markdown","f60cc9dd":"markdown","061f7cba":"markdown","8ab50cdb":"markdown","3a0afe5c":"markdown","801a13bb":"markdown","756fcd3f":"markdown","1d9095e4":"markdown","57f5be08":"markdown","47277d51":"markdown","11f9bca8":"markdown"},"source":{"f05f991f":"!cp ..\/input\/pe-models\/gdcm.tar .\n!tar -xvzf gdcm.tar\n!conda install --offline .\/gdcm\/gdcm-2.8.9-py37h71b2a6d_0.tar.bz2\nprint(\"done\")","84b905b0":"from fastai.torch_core import set_seed\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nfrom torchvision.utils import save_image\n\nimport gdcm\nmatplotlib.rcParams['image.cmap'] = 'bone'","c470505b":"!cp -r ..\/input\/fmipackage\/fmi-master\/* .\/","375b8633":"from fmi.explore import *\nfrom fmi.preprocessing import *\nfrom fmi.pipeline import *","f23bb3d2":"source = '..\/input\/osic-pulmonary-fibrosis-progression'\nos_items = get_dicom_files(source, folders='train')","ebddf920":"sort_w5 = pd.read_csv('..\/input\/pct-5\/sort_w5.csv')\nt_source = '..\/input\/pct-5\/test_5'\nt_files = get_dicom_files(t_source)\nt_files","9e6f7c3a":"def random_(items, value=10):\n    randomList = []\n    for i in range(0,value):\n        randomList.append(random.randint(0,len(items)))\n    return items[randomList]","d12b6d6a":"t_files30 = random_(t_files, 30)\nt_files30","91093819":"set_seed(7)\ncheck_duplicate(t_files30, seed=7)","e69e3f01":"set_seed(77)\ncheck_duplicate(t_files30, seed=77)","804ff502":"set_seed(77)\nget_x1 = lambda x:f'{t_source}\/{x.PatientID}\/{str(x.InstanceNumber)}.dcm'\nget_y1 = ColReader('img_pct_window')\n\nblocks = (ImageBlock(cls=PEWindow), CategoryBlock)\ndb = DataBlock(blocks=blocks,\n                   get_x=get_x1,\n                   splitter=dicom_splitter(t_files, seed=77),\n                   item_tfms=Resize(512),\n                   get_y=get_y1,\n                   batch_tfms=[Resize(256), IntToFloatTensor(div=255)])","623a5b82":"dls = db.dataloaders(sort_w5, bs=16, n_workers=0)\ndls.show_batch(figsize=(20,20))","17f81446":"> Note: For convenience we can use the `pct-5` dataset which was created using this [tutorial](https:\/\/www.kaggle.com\/avirdee\/dicom-dataframe-tutorial\/)","4e25790b":"Currently the `fmi` package is still under construction and not pip installable. Instead install via the `fmipackage` dataset","249d4130":"The goal of this tutorial is to display how `dicom_splitter` works in minimizing the occurence of having the same patient represented in both the train and validation sets","1d30b9a6":"## Dependancies","87cf0449":"## Goal","f60cc9dd":"![splitter.PNG](attachment:splitter.PNG)","061f7cba":"import libraries","8ab50cdb":"This tutorial refers to using the `fmi` library which can be found [here](https:\/\/github.com\/asvcode\/fmi) and the [fastai](https:\/\/github.com\/fastai) medical imaging module","3a0afe5c":"## Splitter","801a13bb":"The files and csv file used in this section was created from this [tutorial](https:\/\/www.kaggle.com\/avirdee\/dicom-dataframe-tutorial\/) where we reduced the initial database of over 33000 images to 880.","756fcd3f":"Load `gdcm` library - use `pe-models` database to access gdcm.tar file","1d9095e4":"Create a `random_` function that will create a random index for our testing, in this case 10 numbers choosen randomly between 0 and the len of the dataset","57f5be08":"For more about the `fmi` library: [view on Github](https:\/\/github.com\/asvcode\/fmi)","47277d51":"To see how `dicom_splitter` works we need to create a smaller random dataset of 30 images","11f9bca8":"### How Does it work?"}}