{"cell_type":{"7e0b2478":"code","48a14083":"code","d805dfd9":"code","9a52dd38":"code","cb71c320":"code","c69d9a36":"code","a161548d":"code","c021d013":"code","90a803af":"code","4f25b56b":"code","dcec57c2":"code","217f7ab4":"code","fbfe904d":"code","f96fcc26":"code","019011f6":"code","72aec357":"code","57eda61f":"code","52a3f3d7":"code","2831288b":"code","8a81306b":"code","0175d30a":"code","51da317b":"code","e9c12cef":"code","dde23990":"code","53627c99":"code","5991094b":"code","4b72ccf1":"code","a16debd8":"code","d8362c77":"code","61a6b899":"code","108e3d2a":"code","92a01992":"code","e37eae5a":"code","97b4da07":"code","467e670b":"code","38ac0be9":"code","37d5f28a":"code","d6de59a8":"markdown","7b199739":"markdown","53fbbef6":"markdown","72b8b5fc":"markdown","82a9c9ef":"markdown"},"source":{"7e0b2478":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48a14083":"import cv2\nfrom PIL import Image\nimport torch\nimport numpy as np\nfrom torch import nn\nfrom torchvision import transforms\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nfrom tqdm.notebook import tqdm\nimport torchvision.models as models\nfrom torch.utils.data import random_split\nfrom sklearn.neighbors import NearestNeighbors","d805dfd9":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint('Device available now:', device)","9a52dd38":"df_train = pd.read_csv(\"..\/input\/shopee-product-matching\/train.csv\")\ndf_train.head(3)","cb71c320":"tmp = df_train.groupby('label_group').posting_id.agg('unique').to_dict()\ndf_train['target'] = df_train.label_group.map(tmp)\ndf_train.head(3)","c69d9a36":"d = dict(zip(df_train.label_group.unique(), range(len(df_train.label_group))))\ndf_train.label_group.replace(d, inplace=True)","a161548d":"df_train.head(2)","c021d013":"class ShopeeDataset(Dataset):\n    \n    def __init__(self, csv, train=True):\n        self.csv = csv.reset_index()\n        self.train = train\n        self.transform = transforms.Compose([\n                                             transforms.Resize((256, 256)),\n                                             transforms.ToTensor()\n                                            ])\n        \n    def __len__(self):\n        return len(self.csv)\n    \n    def __getitem__(self, index):\n        if self.train:\n            image = Image.open('..\/input\/shopee-product-matching\/train_images\/' +\n                               self.csv.image[index])\n        else:\n            image = Image.open('..\/input\/shopee-product-matching\/test_images\/' +\n                               self.csv.image[index])\n\n        image = self.transform(image)\n        \n        if self.train:\n            label = torch.tensor(self.csv.label_group[index])\n            return image, label\n        \n        else:\n            return image","90a803af":"batch_size = 16","4f25b56b":"train_dataset = ShopeeDataset(csv=df_train)\ntrain_dataloader = DataLoader(train_dataset, batch_size=batch_size, num_workers=4)\n\nprint(\"Dataset length: {}\".format(len(train_dataset)), \"\\n\" +\n      \"Shape of images: {}\".format(train_dataset[0][0].shape))","dcec57c2":"resnet18 = models.resnet18(pretrained=True)","217f7ab4":"def extract_embeddings(model, dataloader):\n    embeddings = []\n\n    with torch.no_grad():\n        for image, label in tqdm(dataloader):\n            if torch.cuda.is_available():\n                image = image.to('cuda')\n                model.to('cuda')\n\n            img_emd = model(image)\n            img_emd = img_emd.detach().cpu().numpy()\n            embeddings.append(img_emd)\n\n    embeddings = np.concatenate(embeddings)\n    print(\"Shape of embeddings: {}\".format(embeddings.shape))\n    \n    return embeddings","fbfe904d":"#embeddings = extract_embeddings(resnet18, train_dataloader)","f96fcc26":"#np.save(\"image_embeddings\", embeddings)","019011f6":"def get_f1_score(y, y_pred):\n    intr_sect = np.array([len(set(x1).intersection(x2)) for x1, x2 in zip(y, y_pred)])\n    len_y = y.apply(lambda x: len(x)).values\n    len_y_pred = y_pred.apply(lambda x: len(x)).values\n    f1 = 2 * intr_sect \/ (len_y + len_y_pred)\n    \n    return f1","72aec357":"def predict(model, train_emd, val_emd, \n            train_df, val_df, threshold, get_score=False):\n    predictions = []\n    \n    knn_model = NearestNeighbors(n_neighbors=50, algorithm='brute', metric='cosine')\n    knn_model.fit(train_emd)\n    dists, idx = knn_model.kneighbors(val_emd)\n    \n    for i in range(val_emd.shape[0]):\n        mask = dists[i] < threshold\n        pred = train_df.loc[idx[i][mask]].posting_id.values\n        predictions.append(pred)\n        \n    val_df['matches'] = predictions\n    \n    if get_score:\n        val_df['f1_score'] = get_f1_score(val_df['target'], val_df['matches'])","57eda61f":"\"\"\"\nnum_imgs = len(train_dataset)\nnum_train_imgs = int(num_imgs*.8)\nidx = np.array(range(num_imgs))\nnp.random.shuffle(idx)\nidx_train, idx_val = idx[:num_train_imgs], idx[num_train_imgs:]\n\"\"\"","52a3f3d7":"\"\"\"\ntrain_df = df_train.loc[idx_train].reset_index(drop=True)\nval_df = df_train.loc[idx_val].reset_index(drop=True)\n\"\"\"","2831288b":"\"\"\"\ntrain_set = ShopeeDataset(csv=train_df)\ntrain_loader = DataLoader(train_set, batch_size=batch_size, num_workers=4)\n\nval_set = ShopeeDataset(csv=val_df)\nval_loader = DataLoader(val_set, batch_size=batch_size, num_workers=4)\n\"\"\"","8a81306b":"\"\"\"\ntrain_embd = extract_embeddings(resnet18, train_loader)\n\nval_embd = extract_embeddings(resnet18, val_loader)\n\"\"\"","0175d30a":"#predict(resnet18, train_embd, val_embd, train_df, val_df, threshold=.3, get_score=True)","51da317b":"#print(\"F1 score: {}\".format(val_df['f1_score'].mean()))","e9c12cef":"#predict(resnet18, embeddings, embeddings, df_train, df_train, threshold=.2, get_score=True)","dde23990":"#print(\"F1 score: {}\".format(df_train['f1_score'].mean()))","53627c99":"\"\"\"\ndf_test = pd.read_csv(\"..\/input\/shopee-product-matching\/test.csv\")\ndf_test.head(3)\n\"\"\"","5991094b":"#test_set = ShopeeDataset(csv=df_test, train=False)\n#test_loader = DataLoader(test_set, batch_size=batch_size, num_workers=4)","4b72ccf1":"def extract_test_embeddings(model, dataloader):\n    embeddings = []\n    \n    with torch.no_grad():\n        for image in tqdm(dataloader):\n            if torch.cuda.is_available():\n                image = image.to('cuda')\n                model.to('cuda')\n                \n            img_emd = model(image)\n            img_emd = img_emd.detach().cpu().numpy()\n            embeddings.append(img_emd)\n            \n    embeddings = np.concatenate(embeddings)\n    print(\"Shape of embeddings: {}\".format(embeddings.shape))\n\n    return embeddings","a16debd8":"#test_embd = extract_test_embeddings(resnet18, test_loader)","d8362c77":"#predict(resnet18, embeddings, test_embd, df_train, df_test, threshold=.5)","61a6b899":"#df_test['matches'] = df_test['matches'].apply(lambda x: \" \".join(x))","108e3d2a":"#df_test[['posting_id', 'matches']].to_csv('submission.csv', index=False)","92a01992":"class ArcFace(nn.Module):\n    \n    def __init__(self, in_feat, out_feat, s=30.0, m=0.30, margin=False):\n        super(ArcFace, self).__init__()\n        self.in_feat = in_feat\n        self.out_feat = out_feat\n        self.s = torch.tensor(m)\n        self.m = torch.tensor(m)\n        \n        with torch.no_grad():\n            weights = nn.Parameter(torch.FloatTensor(out_feat, in_feat))\n            nn.init.xavier_uniform_(weights)\n        \n        if torch.cuda.is_available():\n            self.weights = weights.to('cuda')\n\n        self.margin = margin\n        self.cos_m = torch.cos(self.m)\n        self.sin_m = torch.sin(self.m)\n        \n        tmp = torch.tensor(np.pi - m)\n        self.theta = torch.cos(tmp)\n        self.mm = torch.sin(tmp) * m\n\n    def forward(self, x, label):\n        cos = F.linear(F.normalize(x), F.normalize(self.weights))\n        sin = (1. - cos**2).clamp(0, 1)**.5\n        phi = cos * self.cos_m - sin * self.sin_m\n        if self.margin:\n            phi = torch.where(cos > 0, phi, cos)\n        else:\n            phi = torch.where(cos > self.theta, phi, cos - self.mm)\n\n        one_hot = torch.zeros(cos.size(), device=device)\n        one_hot.scatter_(1, label.view(-1, 1).long(), 1)\n        output = (one_hot * phi) + ((1. - one_hot) * cos)\n        output *= self.s\n        del cos, sin, phi, one_hot\n        \n        return output","e37eae5a":"class ResNetWithArcFaceNet(nn.Module):\n\n    def __init__(self, num_classes, model, s=30.0, margin=0.50):\n        super(ResNetWithArcFaceNet, self).__init__()\n\n        self.model = nn.Sequential(*list(resnet18.children())[:-1]).cuda()\n        self.num_classes = num_classes\n        self.s = s\n        self.margin = margin\n        #self.fc = nn.Linear(1000, 512)\n        self.flatten = nn.Sequential(nn.Flatten())\n        self.arcface = ArcFace(512, self.num_classes, s=self.s, m=self.margin)\n        #self.softmax = nn.Softmax(dim=1)\n\n    def forward(self, x, label):\n        out = self.model(x)\n        out = self.flatten(out)\n        #out = self.fc(out)\n        out = self.arcface(out, label)\n        #out = self.softmax(out)\n\n        return out","97b4da07":"learning_rate = 1e-3\nnum_classes = df_train.label_group.unique().shape[0]\nmodel = ResNetWithArcFaceNet(num_classes, resnet18)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\nloss = nn.CrossEntropyLoss()","467e670b":"def train(model, optimizer, num_classes, train_loader, criterion, n_epoch=5):\n    \n    #model.eval()\n    loss_train = []\n    if torch.cuda.is_available():\n        model = model.to('cuda')\n    \n    \n    for epoch in range(n_epoch): \n        for images, labels in tqdm(train_loader):\n            if torch.cuda.is_available():\n                images = images.to('cuda')\n                labels = labels.to('cuda')\n            \n            optimizer.zero_grad()\n            outputs = model(images, labels)\n\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n            \n            loss_train.append(loss.item())\n\n        if epoch % 1 == 0:\n            print(\"Epoch {}\".format(epoch))\n            print(\"Loss: {}\".format(loss.item()))\n    \n        torch.save({\n                    'epoch': epoch,\n                    'model_state_dict': model.state_dict(),\n                    'optimizer_state_dict': optimizer.state_dict(),\n                    'loss': loss_train[-1],\n                    }, 'model_arcface_epoch' + str(epoch) + '.pt')\n            \n    print('Finished Training')","38ac0be9":"train(model, optimizer, num_classes, train_dataloader, loss, n_epoch=50)","37d5f28a":"torch.save({\n            'epoch': 50,\n            'model_state_dict': model.state_dict(),\n            'optimizer_state_dict': optimizer.state_dict(),\n            }, 'model_arcface_epoch50.pt')","d6de59a8":"## Creating shopee dataset","7b199739":"## Making predictions","53fbbef6":"## ResNet18 with ArcFace","72b8b5fc":"## Extracting embeddings from train images using ResNet18","82a9c9ef":"## Importing model ResNet18"}}