{"cell_type":{"d817ac96":"code","b1172680":"code","89d93baa":"code","8095cbef":"code","fd19839d":"code","0ae18da4":"code","b22b5587":"code","007233e0":"code","4d1c0922":"code","e272f7c8":"code","ecf552e9":"code","a9b6ce71":"code","b4c55c87":"code","cc9433c2":"code","e95174a2":"code","c9cc3e60":"code","d2516aa7":"code","735d824c":"code","e6ec30a7":"markdown","b3bd15e2":"markdown","a8f11a41":"markdown","55252eaf":"markdown","87b60d9a":"markdown","1767c20b":"markdown","814d9615":"markdown","aa48a6b7":"markdown","a4098ea0":"markdown"},"source":{"d817ac96":"import os\nimport cv2\nimport numpy as np \nimport pandas as pd \nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout\nfrom keras.optimizers import SGD, Adam\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.utils import shuffle\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","b1172680":"#load the dataset\ndata = pd.read_csv(\"\/kaggle\/input\/az-handwritten-alphabets-in-csv-format\/A_Z Handwritten Data\/A_Z Handwritten Data.csv\").astype('float32')\n#show its head\ndata.head()","89d93baa":"#rename the class column\ndata.rename(columns={'0':'label'}, inplace=True)\n#show the top 5 rows \ndata.head()","8095cbef":"# how many labels do we have \ndata.label.nunique()","fd19839d":"# Split data to Features X and labels y\nX = data.drop('label',axis = 1)\ny = data.label\n#get the shape of labels and features \nprint(f'Features SHAPE :{X.shape}')\nprint(f'Class Column SHAPE :{y.shape}')\n#split into train and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","0ae18da4":"# scale data\nscaler = MinMaxScaler()\nscaler.fit(X_train)\n#scaling data \nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","b22b5587":"X_train[1:10]","007233e0":"X_train = np.reshape(X_train, (X_train.shape[0], 28,28,1)).astype('float32')\nX_test = np.reshape(X_test, (X_test.shape[0], 28,28,1)).astype('float32')\nprint(\"Train data shape: \", X_train.shape)\nprint(\"Test data shape: \", X_test.shape)","4d1c0922":"y_train = np_utils.to_categorical(y_train,num_classes=26,dtype=int)\ny_test = np_utils.to_categorical(y_test,num_classes=26,dtype=int)\ny_train.shape,y_test.shape","e272f7c8":"#define a mapping dict \nletters_dict = {0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',\n             7:'H',8:'I',9:'J',10:'K',11:'L',12:'M',13:'N',\n             14:'O',15:'P',16:'Q',17:'R',18:'S',19:'T',20:'U',\n             21:'V',22:'W',23:'X', 24:'Y',25:'Z'}\n#show \nfig, axis = plt.subplots(3, 3, figsize=(20, 20))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_train[i].reshape(28,28))\n    ax.axis('off')\n    ax.set(title = f\"Alphabet : {letters_dict[y_train[i].argmax()]}\")","ecf552e9":"# count by label\nsb.set_style('whitegrid')\ndf=data.copy()\ndf['label'] = df['label'].map(letters_dict)\n\nlabels_count = df.groupby('label').size()\nlabels_count.plot.bar(figsize=(15,10))\nplt.ylabel(\"Count\")\nplt.xlabel(\"Alphabets\")\nplt.show()\n","a9b6ce71":"model = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=2))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu', padding = 'same'))\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=2))\n\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu', padding = 'valid'))\nmodel.add(MaxPool2D(pool_size=(2, 2), strides=2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(64,activation =\"relu\"))\nmodel.add(Dense(128,activation =\"relu\"))\n#output layer \nmodel.add(Dense(26,activation =\"softmax\"))\n#compile \nmodel.compile(optimizer = Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])\n#model summary\nmodel.summary()","b4c55c87":"import time \nstart=time.time()\nhistory = model.fit(X_train, y_train, epochs=10,batch_size=128,verbose=2,validation_data = (X_test,y_test))\nend=time.time()\nprint('\\n')\nprint(f'Execution Time :{round((end-start)\/60,3)} minutes')","cc9433c2":"## show loss and accuracy scores \nscores =model.evaluate(X_test,y_test,verbose=0)\nprint('Validation Loss : {:.2f}'.format(scores[0]))\nprint('Validation Accuracy: {:.2f}'.format(scores[1]))","e95174a2":"# Plot training loss vs validation loss \nplt.figure()\nfig,(ax1, ax2)=plt.subplots(1,2,figsize=(19,7))\nax1.plot(history.history['loss'])\nax1.plot(history.history['val_loss'])\nax1.legend(['training','validation'])\nax1.set_title('Loss')\nax1.set_xlabel('epochs')\n## plot training accuracy vs validation accuracy \nax2.plot(history.history['accuracy'])\nax2.plot(history.history['val_accuracy'])\nax2.legend(['training','validation'])\nax2.set_title('Acurracy')\nax2.set_xlabel('epochs')","c9cc3e60":"# Plot the predictions \npreds = model.predict(X_test)\nX_test_ = X_test.reshape(X_test.shape[0], 28, 28)\nfig, axis = plt.subplots(3, 3, figsize=(20, 20))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_test_[i])\n    ax.axis('off')\n    ax.set(title = f\"Real Alphabet : {letters_dict[y_test[i].argmax()]}\\nPredicted Alphabet : {letters_dict[preds[i].argmax()]}\");","d2516aa7":"#get the predicted alphabets \npredicted_values = [np.argmax(y, axis=None, out=None) for y in preds]\n#get the alphabets using letters dictionnary \npredicted_alphabets =[letters_dict[i] for i in predicted_values]\n#Reverse y_test from one hot encoder to an array \ntest_labels = [np.argmax(y, axis=None, out=None) for y in y_test]\n#same for real alphabets \ntest_alphabets = [letters_dict[i] for i in test_labels]\n# create a submission dataframe \nsubmission = pd.DataFrame({'Real Alphabet':test_alphabets,'Predicted Aplhabet':predicted_alphabets })\n# save to a csv file \nsubmission.to_csv('submission.csv', index=False)\nprint(\" Submission  successfully saved!\")","735d824c":"submission.sample(10)","e6ec30a7":"### if You Find This Notebook Useful Please UpVote !!!","b3bd15e2":"### Build the Model ","a8f11a41":"### Scaling Data","55252eaf":"### Submit Results ","87b60d9a":"### Predicted Images vs Real Images Visualization","1767c20b":"### Show some Images from Training data","814d9615":"### Splitting Data into Train and Test set ","aa48a6b7":"### Count by Label and visualize","a4098ea0":"### Convert Labels to Categorical "}}