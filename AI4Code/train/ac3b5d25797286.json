{"cell_type":{"81c3608f":"code","070cdd40":"code","d7af4560":"code","f2a2e3df":"code","d4ced6b8":"code","8a771633":"code","33715357":"code","3b1ba81e":"code","b6d59606":"code","d61a0aa6":"code","c0df920a":"code","18833637":"code","609e3da4":"code","70debb22":"code","2e781bac":"code","b5eaaf24":"code","60c2639e":"code","972e7ac9":"code","f8723b8d":"code","fefc1106":"code","0b69c1dd":"code","71ad2345":"code","5e3a5c32":"code","07325a31":"code","934930c4":"code","533a5d27":"code","58b24482":"code","57726525":"code","546a1a35":"code","dfcc2267":"code","072ed61c":"code","d10075e9":"code","072b0504":"code","ccb567e7":"code","e61a1183":"code","8dd67606":"code","2f9f01e9":"code","5de85745":"code","7c130f6b":"code","b4db5234":"code","4949cdae":"code","e8df407d":"code","05133d43":"code","8ffd5e44":"code","b65ae24e":"code","aad8dbd2":"code","5b4793f5":"code","364ee830":"code","be1330a4":"code","45faaf2c":"code","8fca8ef4":"code","5205c5b7":"code","af2d9c78":"code","2e9bde33":"code","e2ada8ff":"code","50b582f9":"code","d71b0f9e":"code","2aae37bc":"code","a1f97b0a":"code","57f7da87":"code","4125279e":"markdown","229f7adc":"markdown","1cf95a5e":"markdown","8d390fc8":"markdown","291741e4":"markdown","16340d64":"markdown","21d9f264":"markdown","5fdbd33b":"markdown","bb15ef3d":"markdown","7f6a818a":"markdown","e7689574":"markdown","6a223b96":"markdown","c41d86c2":"markdown","f6ae13ee":"markdown","8ae46467":"markdown","25cadf0a":"markdown","5099886c":"markdown","921e1b21":"markdown","29121ba9":"markdown","e09ecf03":"markdown","26feda9d":"markdown","0fbf4a1b":"markdown","60e7f8bb":"markdown","8577ff23":"markdown","eb2eb963":"markdown","c076ff21":"markdown","f8a80f62":"markdown"},"source":{"81c3608f":"from IPython.display import Image\nImage('\/kaggle\/input\/pictures\/snipaste_20200330_183005.png')","070cdd40":"%%javascript\n$.getScript('https:\/\/kmahelona.github.io\/ipython_notebook_goodies\/ipython_notebook_toc.js')","d7af4560":"!pip install country_converter","f2a2e3df":"import numpy as np\nimport pandas as pd\n# for Visualization\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns\n# country name and country code convert\nimport country_converter as coco\nimport functools\n# prediction\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn import preprocessing\n# for copy\nimport copy","d4ced6b8":"latest_date = '5\/11\/20'\ndiff_date = '3\/21\/20'","8a771633":"confirm = pd.read_csv('\/kaggle\/input\/coronavirus-analysis\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeath = pd.read_csv('\/kaggle\/input\/coronavirus-analysis\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered = pd.read_csv('\/kaggle\/input\/coronavirus-analysis\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')","33715357":"# show data\nconfirm.head(5)","3b1ba81e":"# preprocess data--Statistics for the entire country\ndict_groupby = {i:'sum' for i in confirm.columns.values[4:]}\ndict_groupby['Lat'] = 'mean'\ndict_groupby['Long'] = 'mean'","b6d59606":"# confirmed cases\nconfirmCountry = confirm.groupby('Country\/Region').agg(dict_groupby)\n# confirmCountry.drop('Cruise Ship', inplace=True)\nconfirmCountry.head()","d61a0aa6":"deathCountry = death.groupby('Country\/Region').agg(dict_groupby)\n# deathCountry.drop('Cruise Ship', inplace=True)\ndeathCountry.head()","c0df920a":"recoveredCountry = recovered.groupby('Country\/Region').agg(dict_groupby)\n# recoveredCountry.drop('Cruise Ship',inplace=True)\nrecoveredCountry.head()","18833637":"# add active case: confirm-death-recovery\nactiveCountry = (confirmCountry - deathCountry - recoveredCountry)\nactiveCountry['Lat'] = -activeCountry.loc[:,'Lat'].values \nactiveCountry['Long'] = -activeCountry.loc[:,'Long'].values \nactiveCountry.head()","609e3da4":"# add continent\ncontinent_name = coco.convert(names = list(confirmCountry.index.values), to='continent')\ncontinent_name[:5]","70debb22":"confirmCountry['continent'] = continent_name\ndeathCountry['continent'] = continent_name\nrecoveredCountry['continent'] = continent_name\nactiveCountry['continent'] = continent_name","2e781bac":"confirmCountry.head()","b5eaaf24":"# add country name\ncountry_name = confirmCountry.index.values","60c2639e":"confirmCountry['Country\/Region'] = country_name\ndeathCountry['Country\/Region'] = country_name\nrecoveredCountry['Country\/Region'] = country_name\nactiveCountry['Country\/Region'] = country_name","972e7ac9":"# add country code\nconfirmCountry['ISO3'] = confirmCountry.apply(lambda x : coco.convert(x['Country\/Region'], to='ISO3', not_found=None), axis=1)\ndeathCountry['ISO3'] = deathCountry.apply(lambda x : coco.convert(x['Country\/Region'], to='ISO3', not_found=None), axis=1)\nrecoveredCountry['ISO3'] = recoveredCountry.apply(lambda x : coco.convert(x['Country\/Region'], to='ISO3', not_found=None), axis=1)\nactiveCountry['ISO3'] = activeCountry.apply(lambda x : coco.convert(x['Country\/Region'], to='ISO3', not_found=None), axis=1)","f8723b8d":"# check the head data in confirm table\nconfirmCountry.head()","fefc1106":"# combine with GDP\nGDP_data = pd.read_csv('\/kaggle\/input\/coronavirus-analysis\/GDP\/GDP.csv')\nGDP_data.head(3)","0b69c1dd":"# create new table\nGDP_2018 = GDP_data.loc[:,['Country Code', '2018']]\nGDP_2018.rename(columns={'Country Code':'ISO3', '2018':'GDP_2018'}, inplace=True)\nGDP_2018.dropna(subset=['GDP_2018'], inplace=True)\nGDP_2018.head()","71ad2345":"confirmCountry = pd.merge(confirmCountry, GDP_2018, on=['ISO3'])\ndeathCountry = pd.merge(deathCountry, GDP_2018, on=['ISO3'])\nrecoveredCountry = pd.merge(recoveredCountry, GDP_2018, on=['ISO3'])\nactiveCountry = pd.merge(activeCountry, GDP_2018, on=['ISO3'])","5e3a5c32":"# ensure the shape of every table\n(confirmCountry.shape, deathCountry.shape, recoveredCountry.shape, activeCountry.shape)","07325a31":"Pop_data = pd.read_csv('\/kaggle\/input\/coronavirus-analysis\/Pop\/Pop.csv')\nPop_data.head(3)","934930c4":"Pop_2018 = Pop_data.loc[:,['Country Code', '2018']]\nPop_2018.rename(columns={'Country Code':'ISO3', '2018':'Pop_2018'}, inplace=True)\nPop_2018.dropna(subset=['Pop_2018'], inplace=True)\nPop_2018.head()","533a5d27":"confirmCountry = pd.merge(confirmCountry, Pop_2018, on=['ISO3'])\ndeathCountry = pd.merge(deathCountry, Pop_2018, on=['ISO3'])\nrecoveredCountry = pd.merge(recoveredCountry, Pop_2018, on=['ISO3'])\nactiveCountry = pd.merge(activeCountry, Pop_2018, on=['ISO3'])","58b24482":"(confirmCountry.shape, deathCountry.shape, recoveredCountry.shape, activeCountry.shape)","57726525":"Aging_data = pd.read_csv('\/kaggle\/input\/coronavirus-analysis\/Aging\/Aging.csv')\nAging_data.head(3)","546a1a35":"Aging_2018 = Aging_data.loc[:,['Country Code', '2018']]\nAging_2018.rename(columns={'Country Code':'ISO3', '2018':'Aging_2018'}, inplace=True)\nAging_2018.dropna(subset=['Aging_2018'], inplace=True)\nAging_2018.head()","dfcc2267":"confirmCountry = pd.merge(confirmCountry, Aging_2018, on=['ISO3'])\ndeathCountry = pd.merge(deathCountry, Aging_2018, on=['ISO3'])\nrecoveredCountry = pd.merge(recoveredCountry,Aging_2018, on=['ISO3'])\nactiveCountry = pd.merge(activeCountry, Aging_2018, on=['ISO3'])","072ed61c":"(confirmCountry.shape, deathCountry.shape, recoveredCountry.shape, activeCountry.shape)","d10075e9":"activeCountry.head()","072b0504":"# Check the situation in a certain country\nconfirmCountry[confirmCountry['Country\/Region']=='China']","ccb567e7":"matplotlib.style.use('default')\n# Start\nfig, ax1 = plt.subplots()\nfig.set_size_inches(16, 8)\nplt.set_cmap('RdBu')\n# plt.xkcd()\n\n# multiple line plot\npos = np.where(confirmCountry.columns.values==latest_date)[0][0]+1 # \u627e\u51fa\u60f3\u753b\u56fe\u753b\u5230\u7684\u65e5\u671f\nx = confirmCountry.columns.values[:pos] \nlw = 4 \na, = ax1.plot(x, confirmCountry.sum().values[:pos], linewidth=lw, label='Confirmed Cases', marker='o') # confirm\nb, = ax1.plot(x, activeCountry.sum().values[:pos], linewidth=lw, label='Active Cases', marker='o') # active\nplt.legend(handles = [a,b], fontsize=15)\n\n# add Vertical line\nax1.plot(['2\/12\/20', '2\/12\/20'], [0, 10000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot(['3\/12\/20', '3\/12\/20'], [0, 10000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot([latest_date, latest_date], [0, 10000000], lw=3, linestyle='--', alpha=0.7)\n\n\nax1.yaxis.set_tick_params(labelsize=15) \n# ax1.set_xticks(x) \nxticks = [i if i in ['1\/22\/20' ,'2\/12\/20', '3\/12\/20', latest_date] else '' for i in x] # x\u8f74\u51e0\u4e2a\u6807\u8bb0\u70b9\nax1.set_xticklabels(xticks, rotation=0, fontsize=15) # x\u8f74\u8bbe\u7f6etrick\n\n\n\nax1.set_ylabel(\"Number of Cases (log)\", fontsize='x-large')\nax1.set_xlabel('Date',  fontsize='x-large')\n\nax1.set_title('Worldwide Corona Virus Cases - Confirmed, Active (Line Chart)', fontsize='x-large')\n\nplt.yscale('log')\n# plt.ylabel('logy')\n\nplt.show()","e61a1183":"plotCountry = confirmCountry[confirmCountry[latest_date]>200000]\n\n\nmatplotlib.style.use('default')\nfig, ax1 = plt.subplots()\nfig.set_size_inches(16, 8)\nplt.set_cmap('RdBu')\n# plt.xkcd()\n\n# multiple line plot\nx = confirmCountry.columns.values[:-8]\nlw = 1\nfor name in plotCountry.index.values:\n    ax1.plot(x, plotCountry.loc[name].values[:-8], linewidth=lw, label=name, marker='o', markersize=2.5) # plot confirmed data in different countries\n\nplt.legend(plotCountry.loc[:,'Country\/Region'])\n\n\nax1.plot(['2\/12\/20', '2\/12\/20'], [0, 2000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot(['3\/12\/20', '3\/12\/20'], [0, 2000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot([latest_date, latest_date], [0, 2000000], lw=3, linestyle='--', alpha=0.7)\n\nax1.yaxis.set_tick_params(labelsize=15)\nxticks = [i if i in ['1\/22\/20', '2\/12\/20', '3\/12\/20', latest_date] else '' for i in x] # \u53ea\u663e\u793a\u7279\u5b9a\u65e5\u671f\u7684\u5750\u6807\nax1.set_xticklabels(xticks, rotation=0, fontsize=15) \n\n\nax1.set_ylabel(\"Number of Cases (log)\", fontsize='x-large')\nax1.set_xlabel('Date',  fontsize='x-large')\n\n# set y scale\nplt.yscale('log')\n\nax1.set_title('Confirmed Corona Virus Cases in Each Country - (Line Chart)', fontsize='x-large')\nplt.show()","8dd67606":"# plot the same country\ncountryList = plotCountry['Country\/Region'].values\ncountryList = np.append(countryList, np.array(['India', 'Turkey', 'China']))\nplotCountry = activeCountry[[True if i in countryList else False for i in activeCountry['Country\/Region']]]\n\n\nmatplotlib.style.use('default')\nfig, ax1 = plt.subplots()\nfig.set_size_inches(16, 8)\nplt.set_cmap('RdBu')\n# plt.xkcd()\n\n# multiple line plot\nx = confirmCountry.columns.values[:-8]\nlw = 2 \nfor name in plotCountry.index.values:\n    ax1.plot(x, plotCountry.loc[name].values[:-8], linewidth=lw, label=name, marker='o', markersize=2.5) # confirm\n    \nplt.legend(plotCountry.loc[:,'Country\/Region'])\n\nplt.text(x[-26], 1.05*(plotCountry[plotCountry['Country\/Region']=='China'].values[0,-8-26]), 'China', fontsize=13)\nplt.text(x[-10], 0.56*plotCountry[plotCountry['Country\/Region']=='US'].values[0,-8-10], 'US', fontsize=13)\nplt.text(x[-20], 0.56*plotCountry[plotCountry['Country\/Region']=='India'].values[0,-8-20], 'India', fontsize=13)\nplt.text(x[-70], 0.56*plotCountry[plotCountry['Country\/Region']=='Italy'].values[0,-8-70], 'Italy', fontsize=13)\n\n\nax1.plot(['2\/12\/20', '2\/12\/20'], [0, 1000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot(['3\/12\/20', '3\/12\/20'], [0, 1000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot([latest_date, latest_date], [0, 1000000], lw=3, linestyle='--', alpha=0.7)\n\nax1.yaxis.set_tick_params(labelsize=15) \n# ax1.set_xticks(x)\nxticks = [i if i in ['1\/22\/20', '2\/12\/20', '3\/12\/20', latest_date] else '' for i in x] \nax1.set_xticklabels(xticks, rotation=0, fontsize=15) \n\nax1.set_ylabel(\"Number of Cases (log)\", fontsize='x-large')\nax1.set_xlabel('Date',  fontsize='x-large')\n\nax1.set_title('Active Corona Virus Cases in Each Country - (Line Chart)', fontsize='x-large')\n\n# set y scale\nplt.yscale('log')\n\nplt.show()","2f9f01e9":"plotCountry = confirmCountry.groupby('continent').sum()\nplotCountry.drop(['Lat', 'Long', 'GDP_2018', 'Pop_2018', 'Aging_2018'], axis=1, inplace=True)\nplotCountry['continent'] = plotCountry.index.values\nplotCountry","5de85745":"matplotlib.style.use('default')\nfig, ax1 = plt.subplots()\nfig.set_size_inches(16, 8)\nplt.set_cmap('RdBu')\n\n\nx = plotCountry.columns.values[:-1] # \u8bbe\u7f6e\u65e5\u671f\nlw = 2 \nfor name in plotCountry.index.values:\n    ax1.plot(x, plotCountry.loc[name].values[:-1], linewidth=lw, label=name, marker='o', markersize=2.5) # confirm\n    \nplt.legend(plotCountry.loc[:,'continent'])\n\n\nax1.plot(['2\/12\/20', '2\/12\/20'], [0, 1000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot(['3\/12\/20', '3\/12\/20'], [0, 1000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot([latest_date, latest_date], [0, 1000000], lw=3, linestyle='--', alpha=0.7)\n\nax1.yaxis.set_tick_params(labelsize=15) \n# ax1.set_xticks(x)\nxticks = [i if i in ['1\/22\/20', '2\/12\/20', '3\/12\/20', latest_date] else '' for i in x] \nax1.set_xticklabels(xticks, rotation=0, fontsize=15) \n\nax1.set_ylabel(\"Number of Cases (log)\", fontsize='x-large')\nax1.set_xlabel('Date',  fontsize='x-large')\n\nax1.set_title('Confirmed Corona Virus Cases in Each Continent - (Line Chart)', fontsize='x-large')\n\n# set y scale\nplt.yscale('log')\n\nplt.show()","7c130f6b":"plotCountry = activeCountry.groupby('continent').sum()\nplotCountry.drop(['Lat', 'Long', 'GDP_2018', 'Pop_2018', 'Aging_2018'], axis=1, inplace=True)\nplotCountry['continent'] = plotCountry.index.values\n\nmatplotlib.style.use('default')\nfig, ax1 = plt.subplots()\nfig.set_size_inches(16, 8)\nplt.set_cmap('RdBu')\n\n\nx = plotCountry.columns.values[:-1] # \u8bbe\u7f6e\u65e5\u671f\nlw = 2 \nfor name in plotCountry.index.values:\n    ax1.plot(x, plotCountry.loc[name].values[:-1], linewidth=lw, label=name, marker='o', markersize=2.5) # confirm\n    \nplt.legend(plotCountry.loc[:,'continent'])\n\n\nax1.plot(['2\/12\/20', '2\/12\/20'], [0, 1000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot(['3\/12\/20', '3\/12\/20'], [0, 1000000], lw=3, linestyle='--', alpha=0.7)\nax1.plot([latest_date, latest_date], [0, 1000000], lw=3, linestyle='--', alpha=0.7)\n\nax1.yaxis.set_tick_params(labelsize=15) \n# ax1.set_xticks(x)\nxticks = [i if i in ['1\/22\/20', '2\/12\/20', '3\/12\/20', latest_date] else '' for i in x] \nax1.set_xticklabels(xticks, rotation=0, fontsize=15) \n\nax1.set_ylabel(\"Number of Cases (log)\", fontsize='x-large')\nax1.set_xlabel('Date',  fontsize='x-large')\n\nax1.set_title('Active Corona Virus Cases in Each Continent - (Line Chart)', fontsize='x-large')\n\n# set y scale\nplt.yscale('log')\n\nplt.show()","b4db5234":"# first plot the worldwide population\nfig = px.sunburst(activeCountry, path=['continent', 'Country\/Region'], values='Pop_2018',\n                  color='continent',\n                  color_continuous_scale='OrRd')\n\nfig.update_layout(title='Worldwide Population Analysis',\n                  font=dict(family=\"Courier New, monospace\",\n                            size=13)\n                 )\n\nfig.update_layout(margin={\"r\":0,\"t\":50,\"l\":0,\"b\":0})\n\nfig.show()","4949cdae":"# then plot the active case in world wide\nfig = px.sunburst(activeCountry, path=['continent', 'Country\/Region'], values=latest_date,\n                  color='continent',\n                  color_continuous_scale='OrRd')\n\nfig.update_layout(title='Worldwide Corona Virus Cases in Each Country and Continent - Active Cases',\n                  font=dict(family=\"Courier New, monospace\",\n                            size=13)\n                 )\n\nfig.update_layout(margin={\"r\":0,\"t\":50,\"l\":0,\"b\":0})\n\nfig.show()","e8df407d":"# plot the confirmed case in world wide (plot the latest data)\nfig = px.sunburst(confirmCountry, path=['continent', 'Country\/Region'], values=latest_date,\n                  color='continent',\n                  color_continuous_scale='OrRd')\n\nfig.update_layout(title='Worldwide Corona Virus Cases in Each Country and Continent - Confirmed Cases',\n                  font=dict(family=\"Courier New, monospace\",\n                            size=13)\n                 )\n\nfig.update_layout(margin={\"r\":0,\"t\":50,\"l\":0,\"b\":0})\n\nfig.show()","05133d43":"# 1. confirmed cases\nanimationCountry = confirmCountry.copy()\nanimationCountry.reset_index(drop=True, inplace=True)\npd1 = pd.melt(animationCountry, id_vars=['Lat', 'Long', 'continent', 'Country\/Region', 'ISO3', 'GDP_2018', 'Pop_2018', 'Aging_2018'], var_name = 'date', value_name='Confirmed')\n\n# 2. death cases\nanimationCountry = deathCountry.copy()\nanimationCountry.reset_index(drop=True, inplace=True)\npd2 = pd.melt(animationCountry, id_vars=['Lat', 'Long', 'continent', 'Country\/Region', 'ISO3', 'GDP_2018', 'Pop_2018', 'Aging_2018'], var_name = 'date', value_name='Death')\n\n# 3. recovered cases\nanimationCountry = recoveredCountry.copy()\nanimationCountry.reset_index(drop=True, inplace=True)\npd3 = pd.melt(animationCountry, id_vars=['Lat', 'Long', 'continent', 'Country\/Region', 'ISO3', 'GDP_2018', 'Pop_2018', 'Aging_2018'], var_name = 'date', value_name='Recovered')\n\n# 4. active cases\nanimationCountry = activeCountry.copy()\nanimationCountry.reset_index(drop=True, inplace=True)\npd4 = pd.melt(animationCountry, id_vars=['Lat', 'Long', 'continent', 'Country\/Region', 'ISO3', 'GDP_2018', 'Pop_2018', 'Aging_2018'], var_name = 'date', value_name='Active')","8ffd5e44":"# product new dataset\ndata_frames = [pd1, pd2, pd3, pd4]\ndf_merged = functools.reduce(lambda left, right: pd.merge(left, right,on=['Lat', 'Long', 'continent', 'Country\/Region', 'ISO3', 'GDP_2018', 'Pop_2018', 'Aging_2018', 'date']), data_frames)\ndf_merged.head()","b65ae24e":"# add two new variables\ndf_merged['deathRate'] = df_merged['Death']\/df_merged['Confirmed']\ndf_merged['SickRate'] = df_merged['Confirmed']\/df_merged['Pop_2018']\ndf_merged.head(10)","aad8dbd2":"fig = px.bar(df_merged, x=\"continent\", y=\"Active\", color=\"continent\",\n             animation_frame=\"date\", animation_group=\"Country\/Region\", range_y=[0,2000000])\n\n\nfig.update_layout(margin={\"r\":0,\"t\":50,\"l\":0,\"b\":0})\n\nfig.update_layout(title='Worldwide Corona Virus Cases in Each Continent - Active Cases',\n                  font=dict(family=\"Courier New, monospace\",\n                            size=13)\n                 )\n\nfig.show()","5b4793f5":"fig = px.scatter_geo(df_merged[df_merged['date']=='5\/11\/20'],\n                    locations = 'ISO3',\n                    size='Active', size_max = 55, color=\"continent\")\n\nfig.update_layout(margin={\"r\":0,\"t\":50,\"l\":0,\"b\":0})\n\nfig.update_layout(title='Worldwide Corona Virus Cases Time Lapse - Active',\n                  font=dict(family=\"Courier New, monospace\",size=13)\n                 )\n                  \nfig.show()","364ee830":"fig = px.scatter_geo(df_merged,\n                    locations = 'ISO3',\n                    size='Active', size_max = 55,\n                    animation_frame=\"date\", animation_group='Country\/Region',color=\"continent\")\n\nfig.update_layout(margin={\"r\":0,\"t\":50,\"l\":0,\"b\":0})\n\nfig.update_layout(title='Worldwide Corona Virus Cases Time Lapse - Active',\n                  font=dict(family=\"Courier New, monospace\",size=13)\n                 )\n                  \nfig.show()","be1330a4":"confirmCountry.head()","45faaf2c":"# Correlations for Dataset\ncorrelationM = df_merged[df_merged['date']==latest_date][['GDP_2018','Pop_2018','Aging_2018','Confirmed', 'Death', 'Recovered', 'Active', 'deathRate', 'SickRate']]\ncorrelationM.reset_index(drop=True, inplace=True)\ncorrelationM.head()","8fca8ef4":"# \u7ed8\u5236\u76f8\u5173\u7cfb\u6570\u77e9\u9635\nplt.figure(figsize = (10,10))\nax = sns.heatmap(correlationM.corr(), annot=True, fmt='.1f', cmap=\"BuPu\") # fmt\u8868\u793a\u4fdd\u7559\u7684\u5c0f\u6570\u70b9\n# \u8bbe\u7f6ey\u8f74\u7684\u5b57\u4f53\u7684\u5927\u5c0f\nplt.yticks(rotation=0) # \u8ba9y\u8f74\u7684\u5b57\u8fdb\u884c\u65cb\u8f6c\n# ax.yaxis.set_tick_params(labelsize=15)\nplt.title('Correlations for Dataset', fontsize='xx-large')","5205c5b7":"px.scatter(confirmCountry, x='GDP_2018', y='Aging_2018', \n           color='continent', size=latest_date, size_max=60, \n           hover_name=\"Country\/Region\", log_x=True)","af2d9c78":"px.scatter(df_merged[df_merged['date']==latest_date].dropna(subset=['deathRate','SickRate']), \n           x='GDP_2018', y='SickRate', \n           color='continent', size='Pop_2018', size_max=60, \n           hover_name=\"Country\/Region\", log_x=True, log_y=True)","2e9bde33":"x = df_merged[df_merged['date']==latest_date].dropna(subset=['deathRate','SickRate'])['GDP_2018'].values.reshape(-1,1)\ny = df_merged[df_merged['date']==latest_date].dropna(subset=['deathRate','SickRate'])['SickRate'].values\nweight = df_merged[df_merged['date']==latest_date].dropna(subset=['deathRate','SickRate'])['Pop_2018'].values\n\nreg = LinearRegression().fit(np.log(x), np.log(y))\ny_pre = reg.predict(np.log(x))\n# get prediction\npred_dataframe = pd.DataFrame(x, columns=['x'])\npred_dataframe['y_pred'] = np.e**y_pre","e2ada8ff":"r2_score(y_true=np.log(y), y_pred=y_pre)","50b582f9":"fig = go.Figure()\n\nfig = px.scatter(df_merged[df_merged['date']==latest_date].dropna(subset=['deathRate','SickRate']), \n           x='GDP_2018', y='SickRate', \n           color='continent', size='Pop_2018', size_max=60, \n           hover_name=\"Country\/Region\", log_x=True, log_y=True)\n\nfig.add_trace(go.Scatter(x=pred_dataframe['x'], \n                         y=pred_dataframe['y_pred'],\n                         mode='lines',\n                         marker_color='rgba(152, 0, 0, .8)',\n                         name='Regression'))\n\nfig.update_layout(xaxis_type=\"log\")\n\nfig.show()","d71b0f9e":"US_Active = df_merged[df_merged['Country\/Region']=='US'][['date','Active']]\nUS_Active.rename(columns={'date':'date', 'Active':'Active Cases'}, inplace=True)\nUS_Active.reset_index(drop=True, inplace=True)\nUS_Active.head(-10)","2aae37bc":"days_since_5_11 = np.array([i for i in range(len(US_Active))]).reshape(-1, 1)\ndays_since_5_28 = np.array([i for i in range(len(US_Active)+14)]).reshape(-1, 1)","a1f97b0a":"svm_confirmed = SVR(shrinking=True, kernel='poly',gamma=0.1, degree=3, C=0.1)\nsvm_confirmed.fit(days_since_5_11, US_Active['Active Cases'].values)\nsvm_test_pred = svm_confirmed.predict(days_since_5_28)","57f7da87":"plotCountry = confirmCountry[confirmCountry[latest_date]>1700]\n\nChina_ID = plotCountry[plotCountry['Country\/Region']=='China'].index.values[0]\nplotCountry = plotCountry.drop(China_ID, inplace=False)\n\nmatplotlib.style.use('default')\n\nfig, ax1 = plt.subplots()\nfig.set_size_inches(16, 8)\nplt.set_cmap('RdBu')\n\n\n# multiple line plot\nx = confirmCountry.columns.values[:-8] # get date\nx_pred = copy.deepcopy(x)\nx_pred = np.concatenate([x_pred, (['5\/{}\/20'.format(date) for date in range(12, 26)])]) # the dates for prediction\nlw = 2 \n\nfor name in plotCountry.index.values:\n    if name==158: # keep U.S\n        ax1.plot(x, plotCountry.loc[name].values[:-8], linewidth=lw, label=name, marker='o', markersize=2)\n\n# plot predict\n# ax1.plot(x_pred, np.exp(svm_test_pred), linewidth=lw, linestyle='dashed', label='Prediction', marker='o')\nax1.plot(x_pred, svm_test_pred, linewidth=lw, linestyle='dashed', label='Prediction', marker='o', markersize=2)\n\nplt.legend(['US','Prediction'], fontsize=15)\n\n# \u52a0\u4e0a\u7ad6\u7ebf\nax1.plot(['2\/12\/20', '2\/12\/20'], [0, 1600000], lw=3, linestyle='--', alpha=0.7)\nax1.plot(['3\/12\/20', '3\/12\/20'], [0, 1600000], lw=3, linestyle='--', alpha=0.7)\nax1.plot([latest_date, latest_date], [0, 1600000], lw=3, linestyle='--', alpha=0.7)\nax1.plot([x_pred[-1], x_pred[-1]], [0, 1600000], lw=3, linestyle='--', alpha=0.7)\n\n\nax1.yaxis.set_tick_params(labelsize=15) \n# ax1.set_xticks(x) \nxticks = [i if i in ['2\/12\/20', '3\/12\/20', latest_date, x_pred[-1]] else '' for i in x_pred] \nax1.set_xticklabels(xticks, rotation=0, fontsize=20) \n\nax1.set_ylabel(\"Number of Cases\", fontsize='xx-large')\nax1.set_xlabel('Date',  fontsize='xx-large')\n\nax1.set_title('U.S. Active Cases Predictions - (Line Chart)', fontsize='xx-large')\nplt.show()","4125279e":"**Then we use regression to make prediction and plot the line**","229f7adc":"First we plot the confirmed data","1cf95a5e":"#### Combine with Aging dataset","8d390fc8":"then we plot the actived data","291741e4":"<h2>Make the predictions<\/h2>\n\n- Here, we want to use regression to predict the number of cases in Italy and US.\n- But there are many factors that affect the spread of the virus, we only consider our existing dataset here, and use the simplest regression to make predictions.\n- So the results of predictions may not be very accurate.","16340d64":"<h1 id=\"tocheading\">Data analysis on Coronavirus<\/h1>","21d9f264":"<h2>What we should do now<\/h2>\n\n### Learn from China\n\nChina government lockdowns the city from 1\/22. Within 2 weeks, the country was starting to get back to work. Within ~5 weeks it was completely under control. And within 7 weeks the new diagnostics was just a trickle.\n\n- Turn some hospitals into specialized Coronavirus hospitals and bring all the cases to those hospitals.\n- Working and studying from home if possible.\n- Ban Transportation for at least 2 weeks.\n\n\n### Learn from South Korea\n\nAnd we can also learn something from South Korea. South Korea is the second country after China to start a large-scale case, but he is now well controlled overall. The way they take is very simple:\n\n- efficient testing\n- efficient tracing\n- travel bans\n- efficient isolating\n- efficient quarantining\n","5fdbd33b":"## Overview of the Coronavirus","bb15ef3d":"### Add New Variables\n\n- add \"ISO3\"\n- add continent\n- add GDP, Pop, and Aging","7f6a818a":"### Analysis each continent","e7689574":"### Analyze the situation on every continent\n\n- First, we analyze the population on each continent \n- Then we analyze the confirmed and active cases on each continent\n- Finally, we analyze the changing trends of all continents\n\n**We have the following findings: **\n\n- We can see that the population in Europe is smallest, but currently Europe has the largest number of confirmed and active cases.\n- We can also find that there are very few cases have been found in Africa.","6a223b96":"## Table of Contents","c41d86c2":"### The trends in each country\n\n- We can see that from 2\/12, cases in China started to rise rapidly and reached a peak within a week. Then the number of cases begans to decline.\n- From 3\/12, the number of cases in Europe and America starts to rise rapidly.","f6ae13ee":"### Combine with other datasets\n\n- combine with GDP dataset, https:\/\/data.worldbank.org\/indicator\/NY.GDP.PCAP.CD?locations=MC&name_desc=false\n- combine with population dataset, https:\/\/data.worldbank.org\/indicator\/sp.pop.totl?end=2018&start=2018\n- combine with aging dataset, https:\/\/data.worldbank.org\/indicator\/SP.POP.65UP.TO.ZS?end=2018&locations=LK&most_recent_value_desc=true&start=2018&view=map&year=2018","8ae46467":"Finally, let's look at the relationship between prevalence and aging. We plot the following chart:\n\n- Each circle represent one country.\n- The x-axis represents the \"Sick Rate\"\n    - Sick Rate = confirmed\/population\n- The y-axis represents the \"Population ages 65 and above (% of total population)\"\n- The size of the circle represents the number of confirmed cases.\n- The color represent the continent.\n\n**We can find out that: **\n\n- As aging increases, so does the rate of illness.\n- You can see that most African countries (green) are less aging, and their prevalence is lower.\n- European countries (red) are more aging, and their prevalence is higher.","25cadf0a":"### Import data","5099886c":"### Show the trend of active cases in the Map","921e1b21":"<h2>Comprehensive analysis with other dataset<\/h2>\n\nIn this part, we will try to find some clues between coronavirus and aging or GDP.","29121ba9":"We change the size to the \"number of confirmed cases\", and plot the following chart:\n\n- We can still find the countries with higher GDP and with higher ageing have more cases.","e09ecf03":"#### Combine with Population dataset","26feda9d":"<h2>Team Members & Team Number<\/h2>\n\n**Group 12**\n\n- Abdelrhman Adel Zaher\n- LUO Dan\n- Maonan WANG\n- Mohamed Yahya Jabokji","0fbf4a1b":"## Import Data and Data Preprocess\n\n- combine different regions into the country, we only analysis on countries.\n- delete \"Cruise Ship\" data\n- add active case: confirm-death-recovery\n- add new variables, combine with other datasets\n    - add \"ISO3\"\n    - add continent\n    - add GDP, Pop, and Aging","60e7f8bb":"Firstly, we plot the following chart: \n\n- Each circle represent one country.\n- The x-axis represents the \"GDP per capita (current US$)\"\n- The y-axis represents the \"Population ages 65 and above (% of total population)\"\n- The size of the circle represents the number of confirmed cases.\n- The color represent the continent.\n\n**We found that the size of the circle in the upper right corner is relatively large, which means that the virus has a higher incidence in countries with higher GDP and countries with higher ageing.**\n\nBased on charts, so we can see that countries with higher GDP and aging have more confirmed cases than other countries, that means Europe and USA.","8577ff23":"### The Global Trend of the Cases \n\n- We can see that there are three time periods in the following chart,\n- 1\/12 to 2\/12: the confirmed\/active cases increase rapidly\n- 2\/12 to 3\/12: slow growth in confirmed cases, and active cases decreases.\n- 3\/12 to - : the confirmed\/active cases increase rapidly","eb2eb963":"## Preparation","c076ff21":"#### Combine with GDP dataset","f8a80f62":"### Changes in every continent every day\n\n- We reorganize the dataset.\n- And add two new variables (we will use these in the next part):\n    - Death Rate = death\/confirmed\n    - Sick Rate = confirmed\/population"}}