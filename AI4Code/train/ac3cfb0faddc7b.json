{"cell_type":{"74c93e1d":"code","daf57a9a":"code","f9a9be12":"code","eafda407":"code","01a78a4d":"code","fd39939c":"code","73b688d7":"code","5347bc12":"code","5149c7ef":"code","205de495":"code","1628e6b3":"code","15670865":"code","765c97ae":"code","e12e1b4b":"code","0df4839d":"code","a2f37e5d":"code","71c2ee3e":"code","3ce96cb1":"code","517f1fea":"code","807078a1":"code","6155d58b":"code","2266b88b":"code","6554c227":"code","265058b7":"code","1c75181b":"code","34456a67":"code","b742cef7":"code","b6a07e11":"code","e8ef6558":"code","ff2f1eef":"code","508a4f7b":"code","b24b11a6":"code","c02e5744":"code","29ade296":"code","c32a2e1e":"code","d23515e1":"code","1d960608":"code","5ab17dac":"code","3257132e":"markdown","501e4f8e":"markdown","a069c28e":"markdown","0303e0b4":"markdown","57697b35":"markdown","dc778bfe":"markdown","47ef4ca0":"markdown","0d867b5c":"markdown","c8e50fdf":"markdown","944eac45":"markdown","83f6e441":"markdown","75a0dd40":"markdown","c6bd8e2e":"markdown","94460d3b":"markdown","d5117983":"markdown","58e5afe6":"markdown","c8195163":"markdown","2f0fd99f":"markdown","a5c25ef0":"markdown","d34387e2":"markdown","f0ea7598":"markdown"},"source":{"74c93e1d":"! wget https:\/\/repo.anaconda.com\/miniconda\/Miniconda3-py37_4.8.2-Linux-x86_64.sh\n! chmod +x Miniconda3-py37_4.8.2-Linux-x86_64.sh\n! bash .\/Miniconda3-py37_4.8.2-Linux-x86_64.sh -b -f -p \/usr\/local\n! conda install -c rdkit rdkit -y\nimport sys \nsys.path.append('\/usr\/local\/lib\/python3.7\/site-packages\/')\nimport warnings\nwarnings.filterwarnings('ignore')","daf57a9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style(\"darkgrid\")\nplt.style.use(\"fivethirtyeight\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9a9be12":"chem_01 = pd.read_csv(\"\/kaggle\/input\/carcinogen-data\/carcinogen_all_data.csv\")\nchem_02 = pd.read_csv(\"\/kaggle\/input\/carcinogen-data\/carcinogen_data_1.csv\")\nchem_03 = pd.read_csv(\"\/kaggle\/input\/carcinogen-data\/carcinogen_binary.csv\")","eafda407":"chem_02.info()","01a78a4d":"chem_03.info()","fd39939c":"chem_02_copy = chem_02.STRUCTURE_SMILES","73b688d7":"chem_new = pd.concat([chem_03, chem_02_copy], axis = 1)","5347bc12":"chem_new.shape","5149c7ef":"chem_new.info()","205de495":"chem_new.drop([263],axis = 0, inplace = True)","1628e6b3":"from rdkit import Chem\nmol_lst=[]\nfor i in chem_new.STRUCTURE_SMILES:\n    mol=Chem.MolFromSmiles(i)\n    mol_lst.append(mol)","15670865":"from rdkit.Chem import Descriptors\nfrom rdkit.ML.Descriptors import MoleculeDescriptors\n\n\n\ndesc_lst=[i[0] for i in Descriptors._descList]\ndescriptor=MoleculeDescriptors.MolecularDescriptorCalculator(desc_lst)\ndescrs = []\nfor i in range(len(mol_lst)):\n    descrs.append(descriptor.CalcDescriptors(mol_lst[i]))\n\n\n\n\nmolDes=pd.DataFrame(descrs,columns=desc_lst)\nmolDes.head(20)","765c97ae":"cor_mat = molDes.corr()\nsns.heatmap(cor_mat);","e12e1b4b":"corr_feature = []\nfor i in range(len(cor_mat.columns)):\n    for j in range(i):\n        if abs(cor_mat.iloc[i,j] > 0.85): #abs is absolute\n            corr_feature.append(cor_mat.columns[i])\ncorr_feature = list(set(corr_feature))\nprint(corr_feature)\nlen(corr_feature)","0df4839d":"molDes.drop(columns = corr_feature, axis =1, inplace = True)\nprint(molDes.shape)\nmolDes.head()","a2f37e5d":"print(chem_new['Carcinogenic Potency Expressed as P or NP'].value_counts())\nprint(chem_new['Carcinogenic Potency Expressed as P or NP'].unique())","71c2ee3e":"from sklearn import preprocessing\n\nlabel_encoder = preprocessing.LabelEncoder()\nchem_new['Carcinogenic Potency Expressed as P or NP'] = label_encoder.fit_transform(chem_new['Carcinogenic Potency Expressed as P or NP'])\nprint(chem_new['Carcinogenic Potency Expressed as P or NP'].unique())","3ce96cb1":"print(chem_new['Carcinogenic Potency Expressed as P or NP'].value_counts())","517f1fea":"chem_new","807078a1":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import ExtraTreeRegressor\nfrom sklearn.metrics import roc_auc_score, mean_squared_error","6155d58b":"x = molDes\ny = chem_new['Carcinogenic Potency Expressed as P or NP'] # target value\n\n## feature selection with Extra Tree Regressor\nmodel = ExtraTreeRegressor()\nmodel.fit(x,y)\n","2266b88b":"feat_importance = pd.Series(model.feature_importances_, index=x.columns)\nfeat_importance = feat_importance.sort_values(ascending = False)\nimp_feat = feat_importance.head(20)\nprint(type(imp_feat))\nimp_feat","6554c227":"molDes_feat = pd.DataFrame(imp_feat)\nprint(molDes_feat.index)\nprint(molDes_feat.shape)","265058b7":"mol_feature = molDes[['EState_VSA7', 'qed', 'PEOE_VSA1', 'MinAbsEStateIndex', 'EState_VSA6',\n       'MinEStateIndex', 'EState_VSA2', 'BCUT2D_MRHI', 'EState_VSA1',\n       'BalabanJ', 'PEOE_VSA2', 'EState_VSA10', 'VSA_EState9', 'SlogP_VSA1',\n       'NumAromaticRings', 'MinPartialCharge', 'SMR_VSA5', 'BCUT2D_CHGLO',\n       'PEOE_VSA3', 'SlogP_VSA2']]\nmol_feature.shape","1c75181b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nlog_reg=LogisticRegression()","34456a67":"X=mol_feature\nY=chem_new['Carcinogenic Potency Expressed as P or NP']\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)\nlog_reg=log_reg.fit(X_train,Y_train)\nprint(\"Training score: {} \\nValidation score: {} \".format(round(log_reg.score(X_train, Y_train),3),\n                                                          round(log_reg.score(X_test,Y_test),3)))","b742cef7":"from sklearn.model_selection import cross_val_score, GridSearchCV\nGridSearchCV.get_params(log_reg)","b6a07e11":"log_para = {'fit_intercept':[True],'max_iter': [100,150,200,250,300],\n            'multi_class': ['auto', 'ovr', 'multinomial'],\n            'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n            'penalty': ['l2','l1','elasticnet','none']}\nlog=GridSearchCV(LogisticRegression(),param_grid=log_para).fit(X_train, Y_train).best_estimator_","e8ef6558":"log","ff2f1eef":"log_reg_1 = log.fit(X_train,Y_train)\nprint(\"Training score: {} \\nValidation score: {} \".format(round(log_reg_1.score(X_train, Y_train),3),round(log_reg_1.score(X_test,Y_test),3)))","508a4f7b":"Y_pred = log_reg_1.predict(X_test)\nprint('Mean squared error (MSE): %.2f'% mean_squared_error(Y_test, Y_pred))","b24b11a6":"ax = sns.regplot(Y_test, Y_pred, scatter_kws={'alpha':0.5})\nax.set_xlabel('experimental CAT: RandomFor')\nax.set_ylabel('predicted CAT: RandomFor')\nax.set_xlim(0, 2)\nax.set_ylim(0, 2)\nplt.show()","c02e5744":"Y_pred","29ade296":"print(classification_report(Y_test,Y_pred))","c32a2e1e":"from sklearn.feature_selection import RFECV\nfrom sklearn.ensemble import RandomForestRegressor\nRFECV.get_params(RandomForestRegressor)","d23515e1":"rf_params={'n_estimators':[90,100,200],'max_depth':[80,100,200],\n           'max_features':['auto', 'sqrt', 'log2'],'oob_score':[True],'min_samples_split':[2,8,32],\n            'criterion':['mse', 'mae']}\nrf=GridSearchCV(RandomForestRegressor(),param_grid=rf_params).fit(X_train, Y_train).best_estimator_\nrf","1d960608":"rf.fit(X_train,Y_train)","5ab17dac":"print(\"Training score: {} \\nValidation score: {} \".format(round(rf.score(X_train, Y_train),3),round(rf.score(X_test,Y_test),3)))","3257132e":"## Calculate molecular descriptor","501e4f8e":"## parameter tuning for Random Forest","a069c28e":"## Removing the top correlated values and dropping from the dataframe","0303e0b4":"## Parameter tuning and model building","57697b35":"### here we can see that the score is very less, or  non acceptable so we have to a different feature selection for random forest","dc778bfe":"## fir in the RF model","47ef4ca0":"## Dataset Defined","0d867b5c":"### 1st use deafult logistic reg as we have to classify the cancer and noncancer molecules","c8e50fdf":"## Heatmap regarding the correlation among the molecular descriptors","944eac45":"#### as highly correlated values don't gove us good result.","83f6e441":"## To do the chemical calculation, SMILES notations are converted to object with RDkit ","75a0dd40":"## Encoding for numerical analysis","c6bd8e2e":"### taking top 20 molecular descriptor for better prediction","94460d3b":"## Please upvote it if you like :) :) ","d5117983":"## Feature Extraction\n\n##### using EXTRA TREE REGRESSOR","58e5afe6":"## Find unique, incancers and non cancers molecules catagory","c8195163":"## Install RDKIT","2f0fd99f":"## Parameter tuning with GRID SEARCH","a5c25ef0":"## Loading the libraries","d34387e2":"## classification_report for LOG_REG","f0ea7598":"## Concat chem_02 and chem_03 dataset for better understanding and future data wrangling"}}