{"cell_type":{"6ab0b434":"code","18052564":"code","eb260fd5":"code","f05df4e1":"code","1a8f872a":"code","256772ed":"code","00b0c6d8":"code","ab95c335":"code","8b4c2044":"code","bf261798":"code","866212f7":"code","d4ccc192":"code","a15bc43a":"code","2edc08be":"code","05fa4ec6":"code","d8903ac5":"code","eb2b9b7b":"code","5913221e":"code","256ac64b":"code","09c290e9":"code","98fa2f7e":"code","1f4fae6d":"code","341966fb":"code","cf021a1c":"code","268b5b7e":"code","c5bc242a":"code","f7c57e01":"code","4d42b257":"code","2a2c88ca":"code","b2e2abfd":"code","1923bd5b":"code","6b9ceb1c":"code","aed64976":"code","7089f875":"code","ece30018":"code","7c2c451c":"code","a5267acc":"code","353597db":"markdown","b58933e4":"markdown","8dde918c":"markdown","56d38ae7":"markdown","eaa6927a":"markdown","cf25d6f2":"markdown","a518ea0e":"markdown","16bba338":"markdown","13af5e8f":"markdown"},"source":{"6ab0b434":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom collections import Counter\nfrom sklearn.metrics import roc_curve\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import GridSearchCV\nfrom google.colab import files\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom joblib import dump, load\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression","18052564":"from google.colab import drive\ndrive.mount('\/content\/drive')","eb260fd5":"train_data=pd.read_csv('\/content\/drive\/MyDrive\/Colab Notebooks\/Univ AI hackathon\/Training Data.csv')\ntest_data=pd.read_csv('\/content\/drive\/MyDrive\/Colab Notebooks\/Univ AI hackathon\/Test Data.csv')\ntest_data_bck=test_data\nprint(train_data.head(2))\nprint(test_data.head(2))","f05df4e1":"X=train_data.drop(columns=['Id','risk_flag'])\ny=train_data['risk_flag']\ntest_data=test_data.drop(columns='id')\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=32)","1a8f872a":"X_train,X_val,y_train,y_val=train_test_split(X_train,y_train,test_size=0.20,random_state=22)","256772ed":"numeric_features = ['income','experience','age','current_job_years','current_house_years']\nnumeric_transformer = StandardScaler()\n\ncategorical_features = ['married','house_ownership','car_ownership','profession','city','state']\ncategorical_transformer = OneHotEncoder()\n\nct = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)])","00b0c6d8":"encoded_X_train=ct.fit_transform(X_train).toarray()\nencoded_X_val=ct.fit_transform(X_val).toarray()\nencoded_X_test=ct.fit_transform(test_data).toarray()\nX_test=ct.fit_transform(X_test).toarray()","ab95c335":"type(encoded_X_train)","8b4c2044":"import tensorflow as tf\nfrom tensorflow import keras","bf261798":"# model=keras.models.Sequential()\n# model.add(keras.layers.Dense(500,activation=\"relu\",input_dim=409))\n# model.add(keras.layers.Dense(300,activation='relu'))\n# model.add(keras.layers.Dense(400,activation='relu'))\n# model.add(keras.layers.Dense(1,activation='sigmoid'))","866212f7":"# model.summary()","d4ccc192":"# model.compile(optimizer='adamax',loss='binary_crossentropy',metrics=[tf.keras.metrics.AUC()])","a15bc43a":"# checkpoint_pt = keras.callbacks.ModelCheckpoint(\"NN_univ.h5\",save_best_only=True)","2edc08be":"# model.fit(encoded_X_train,y_train,batch_size=15,epochs=20,validation_data=(encoded_X_val,y_val),workers=-1,callbacks=[checkpoint_pt])","05fa4ec6":"model = keras.models.load_model(\"\/content\/drive\/MyDrive\/Colab Notebooks\/NN_univ.h5\")","d8903ac5":"predictions=model.predict(encoded_X_val)\npredictions=predictions>0.5\nprediction_nn=np.where(predictions==False,0,1)\nnn_pred_df=pd.DataFrame(prediction_nn,columns=['prediction'])","eb2b9b7b":"def scoring(y_test,predictions):\n  print(f'roc auc score \\n{roc_auc_score(y_test,predictions)}')\n  print(f'confusion_matrix \\n{confusion_matrix(y_test,predictions)}')\n  print(f'value counts \\n{pd.DataFrame(predictions).value_counts()}')\n  fpr, tpr, thresholds=roc_curve(y_test,predictions)\n  print(f\"fpr = {fpr} , tpr = {tpr}\")\n  plt.figure(figsize=(7,7))\n  plt.plot([0, 1], [0, 1], 'k--',label='Thresold')\n  plt.plot(fpr, tpr, linewidth=2,color='green',label='RF')\n  plt.ylabel('True positive rate(Recall)')\n  plt.xlabel('False positive rate')\n  plt.title('ROC')\n  plt.legend()\n  plt.show()","5913221e":"# Scoring data for neural network\nscoring(y_val,prediction_nn)","256ac64b":"# rf_model=RandomForestClassifier()\n# rf_model.fit(encoded_X_train,y_train)\nrf_model=load('\/content\/drive\/MyDrive\/Colab Notebooks\/rf.joblib')","09c290e9":"prediction_rf=rf_model.predict(encoded_X_val)\nscoring(y_val,prediction_rf)","98fa2f7e":"# dt_model=DecisionTreeClassifier()\n# dt_model.fit(encoded_X_train,y_train)\ndt_model=load('\/content\/drive\/MyDrive\/Colab Notebooks\/dt.joblib')","1f4fae6d":"# prediction_dt=dt_model.predict(encoded_X_val)\n# scoring(y_val,prediction_dt)","341966fb":"clf_xg=xgb.XGBClassifier(objective='binary:logistic',seed=60,max_depth=9,learning_rate=0.1,gamma=0.25,reg_lambda=10,scale_pos_weight=7)\n# clf_xg.fit(encoded_X_train,y_train,verbose=True,early_stopping_rounds=10,eval_metric='auc',eval_set=[(encoded_X_val,y_val)])\nclf_xg=load('\/content\/drive\/MyDrive\/Colab Notebooks\/xg.joblib')\npredictions_xg=clf_xg.predict(encoded_X_val)\nscoring(y_val,predictions_xg)","cf021a1c":"# dump(rf_model,'rf.joblib')\n# dump(dt_model,'dt.joblib')\n# dump(clf_xg,'xg.joblib')","268b5b7e":"# files.download(\"rf.joblib\")\n# files.download(\"dt.joblib\")\n# files.download('xg.joblib')\n","c5bc242a":"predictions_xg.shape","f7c57e01":"data={\n    'pred_nn':nn_pred_df['prediction'],\n    'pred_rf':prediction_rf,\n    'pred_xg':predictions_xg\n}\ndf_blend=pd.DataFrame(data=data)\ndf_blend['target']=list(y_val)\ndf_blend","4d42b257":"blend_X=df_blend.drop(columns=['target'])\nblend_y=df_blend['target']\nblend_model=LogisticRegression(C=3,class_weight={0:1,1:8})\nblend_model.fit(blend_X,blend_y)","2a2c88ca":"#The base model training\n#NN\npredictions=model.predict(X_test)\npredictions=predictions>0.5\nblend_nn_pred=np.where(predictions==False,0,1)\n\n#RF\nblend_rf_pred=rf_model.predict(X_test)\n\n#XG\nblend_xg_pred=clf_xg.predict(X_test)\n\n\n#Blended_pred\ndata={\n    'pred_nn':list(blend_nn_pred),\n    'pred_rf':blend_rf_pred,\n    'pred_xg':blend_xg_pred\n}\nX=pd.DataFrame(data=data)\nblend_predictions=blend_model.predict(X)\nscoring(y_test,blend_predictions)","b2e2abfd":"###########Xg boost not included\n# itr=y_test.shape[0]\n# voting_pred=[]\n# for i in range(itr):\n#   if (nn_pred_df['prediction'][i]==1 and prediction_rf[i]==1) or (nn_pred_df['prediction'][i]==1 and prediction_dt[i]==1) :\n#     voting_pred.append(1)\n#   else:\n#     voting_pred.append(0)","1923bd5b":"# scoring(y_test,voting_pred)","6b9ceb1c":"# itr=X_test.shape[0]\n# weighted_pred=[]\n# for i in range(itr):\n#   weighted_avg=(2*predictions_xg[i]+(3*nn_pred_df['prediction'][i])+(3*prediction_rf[i])+prediction_dt[i])\/9\n#   if weighted_avg>=0.4:\n#     weighted_pred.append(1)\n#   else:\n#     weighted_pred.append(0)\n","aed64976":"# scoring(y_test,weighted_pred)","7089f875":"###########################################################\n##USing Weighted Avg\n\n#NN\npredictions=model.predict(encoded_X_test)\npredictions=predictions>0.5\nprediction_nn=np.where(predictions==False,0,1)\nnn_pred_df=pd.DataFrame(prediction_nn,columns=['prediction'])\n\n# RF\nprediction_rf=rf_model.predict(encoded_X_test)\n\n#DT\nprediction_dt=dt_model.predict(encoded_X_test)\n\n#xg boost\nprediction_xg=clf_xg.predict(encoded_X_test)\n\n## voting clf without xg\n\n# itr=encoded_X_test.shape[0]\n# voting_pred=[]\n# for i in range(itr):\n#   if (nn_pred_df['prediction'][i]==1 and prediction_rf[i]==1) or (nn_pred_df['prediction'][i]==1 and prediction_dt[i]==1) :\n#     voting_pred.append(1)\n#   else:\n#     voting_pred.append(0)\n\n\n# Weighted Average\n\n# itr=encoded_X_test.shape[0]\n# weighted_pred=[]\n# for i in range(itr):\n#   weighted_avg=(2*predictions_xg[i]+(3*nn_pred_df['prediction'][i])+(3*prediction_rf[i])+prediction_dt[i])\/9\n#   if weighted_avg>=0.4:\n#     weighted_pred.append(1)\n#   else:\n#     weighted_pred.append(0)\n\n\n############################################################################\n##USing Stacked model\n\n#The base model training\n#NN\npredictions=model.predict(encoded_X_test)\npredictions=predictions>0.5\nblend_nn_pred=np.where(predictions==False,0,1)\n\n#RF\nblend_rf_pred=rf_model.predict(encoded_X_test)\n\n#XG\nblend_xg_pred=clf_xg.predict(encoded_X_test)\n\n\n#Blended_pred\ndata={\n    'pred_nn':list(blend_nn_pred),\n    'pred_rf':blend_rf_pred,\n    'pred_xg':blend_xg_pred\n}\nX=pd.DataFrame(data=data)\nblend_predictions=blend_model.predict(X)","ece30018":"final_data={'id':test_data_bck['id'],'risk_flag':blend_predictions}\ndf_final=pd.DataFrame(final_data)","7c2c451c":"df_final['risk_flag'].value_counts()","a5267acc":"df_final.to_csv('final_submission.csv',index=False)\nfiles.download(\"final_submission.csv\")","353597db":"**Dumping model**","b58933e4":"**Random forest**","8dde918c":"**NN**","56d38ae7":"**weighted average**","eaa6927a":"**Decsion tree**","cf25d6f2":"**Final predictions**","a518ea0e":"**Xgboost**","16bba338":"**voting clf**","13af5e8f":"**Blending models**"}}