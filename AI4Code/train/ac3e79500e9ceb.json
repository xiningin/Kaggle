{"cell_type":{"ebf234bf":"code","e343628a":"code","3209e3cd":"code","f1f53504":"code","50707078":"code","a20c43bd":"code","228e578e":"code","1a3e8e3b":"code","e17dad82":"code","53ae56d6":"code","ccc334b4":"code","f5fbf214":"code","427dfce0":"code","e1a0d098":"code","fab399b2":"code","80d4f3a0":"code","17dfd07c":"code","3bdb3643":"code","19af4f5f":"code","e08c613a":"code","61caffee":"code","1562b53e":"markdown","5927c656":"markdown"},"source":{"ebf234bf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n","e343628a":"train = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ntrain.head(10)","3209e3cd":"train.columns","f1f53504":"train.Electrical","50707078":"train.shape","a20c43bd":"train.describe()","228e578e":"train.SalePrice.hist()","1a3e8e3b":"train.LotShape.unique()","e17dad82":"train.OverallCond.unique()","53ae56d6":"x=0*train.OverallCond.values\nfor i in range(1,10):\n    s=0\n    for j in range(len(train)):\n        if train.OverallCond.loc[j]==i:\n            s=s+1\n            x[j]=train.OverallCond[j]+s","ccc334b4":"x","f5fbf214":"counts=pd.crosstab(index=train.OverallCond,  columns=\"count\").count\ncounts","427dfce0":"fig, ax = plt.subplots()\nax.scatter(train.OverallCond,x)","e1a0d098":"counts=pd.crosstab(index=train.LotShape,  columns=\"count\").count\ncounts","fab399b2":"labels = train.LotShape.unique()\nsizes = [925, 484, 41, 10]\nexplode = (0,0, 0.1, 0)  \n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  \nplt.show()","80d4f3a0":"outliers = train.isnull().sum()\nprint(\"Missing values: \")\nprint(outliers[outliers>0])","17dfd07c":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.datasets import make_regression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\ny = train.SalePrice.values\nfeatures = ['OverallQual', 'YearBuilt', 'YearRemodAdd', '1stFlrSF', 'FullBath', 'GrLivArea' ,'TotRmsAbvGrd','BedroomAbvGr']\nX = train[features]\n\n# define and fit the model\nmodel = Sequential()\nmodel.add(Dense(64, kernel_initializer='normal', input_dim=8, activation='relu'))\nmodel.add(Dense(128, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(128, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(128, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(1, kernel_initializer='normal'))\nmodel.compile(loss='mean_absolute_error', optimizer='adam')\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel.fit(X_train, y_train, epochs=500, batch_size=32, verbose=0)\ny_new = model.predict(X_test)","3bdb3643":"rms = sqrt(mean_squared_error(y_test,y_new))\nrms","19af4f5f":"test = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\ny_pred = model.predict(test[features])","e08c613a":"y_pred","61caffee":"sub = pd.read_csv('..\/input\/home-data-for-ml-course\/sample_submission.csv')\nsub.SalePrice = y_pred\nsub.to_csv('submission.csv', index=False)","1562b53e":"# Modeling ","5927c656":"# Libraries"}}