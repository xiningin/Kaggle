{"cell_type":{"a1ef7840":"code","03434cd5":"code","8fc4724c":"code","b21cbe22":"code","55365a77":"code","19b129b4":"code","2fee1dfe":"code","7a5c230d":"code","beca4c46":"code","f69a5c01":"code","72fd6e95":"code","e66d8882":"code","5c15e50f":"code","e7a82fb6":"code","fabb0865":"code","81d6a17b":"code","422f41a2":"markdown","6be063ea":"markdown","0c1fe017":"markdown","3f32b5c8":"markdown","d825a369":"markdown","5be7473f":"markdown","7e8efe1f":"markdown","d97a57cc":"markdown","e0c53687":"markdown","326521e4":"markdown","c02f2546":"markdown","c499d60f":"markdown","7bfecb40":"markdown","d50f9f75":"markdown","ca33e56d":"markdown"},"source":{"a1ef7840":"import json \nimport pandas as pd \nfrom pandas.io.json import json_normalize\n\nwith open('..\/input\/dataset.json') as f:\n    d = json.load(f)\ndf = json_normalize(data=d, record_path='dataA', meta=['linkTitle'], errors='ignore')","03434cd5":"df= df.replace('', 'Unknown')\ndf.head()","8fc4724c":"import re\ndef extract_first_number(value):\n    result = re.search('\\d+', value)\n    if result == None:\n        return 0\n    return int(result.group())\n\ndef remove_suspected(value):\n    return value.replace(' (suspected)', '')","b21cbe22":"df['dead'] = pd.Series(df['dead']).apply(extract_first_number)\ndf['injured'] = pd.Series(df['injured']).apply(extract_first_number)\ndf['perpetrator'] = pd.Series(df['perpetrator']).apply(remove_suspected)\ndf['date'] = pd.Series(df['date']).apply(extract_first_number)\nframes = df['linkTitle'].str.split(\" \", n = 1, expand = True)\ndf['month']= frames[0]\ndf['year']= frames[1]\ndf = df.drop('linkTitle', axis=1)\ndf = df.rename(index=str, columns={'dead': 'min_dead', 'injured': 'min_injured', 'partOf':'conflict', 'date': 'start_date' })\ndf['min_affected'] = df['min_injured'] + df['min_dead']\ndf.head()","55365a77":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-dark-palette')","19b129b4":"plt.figure(figsize=(14, 5))\nplt.subplot(1, 2, 1)\ndeaths_per_year = [sum(df[df['year'] == '2015']['min_dead']),sum(df[df['year'] == '2016']['min_dead']), sum(df[df['year'] == '2017']['min_dead']), sum(df[df['year'] == '2018']['min_dead'])]\nlabels = [2015, 2016, 2017, 2018]\ncolors = ['yellowgreen', 'lightblue', 'gold', 'lightgreen']\nexplode = (0.05, 0.05, 0.05, 0.05)\nplt.pie(deaths_per_year, explode=explode, labels=labels, \n        colors=colors, autopct='%4.2f%%',shadow=True, startangle=20)\nplt.title('Deaths by year')\nplt.axis('equal')\nplt.subplot(1, 2, 2)\ninjured_per_year = [sum(df[df['year'] == '2015']['min_injured']),sum(df[df['year'] == '2016']['min_injured']), sum(df[df['year'] == '2017']['min_injured']), sum(df[df['year'] == '2018']['min_injured'])]\nlabels = [2015, 2016, 2017, 2018]\ncolors = ['yellowgreen', 'lightblue', 'gold', 'lightgreen']\nexplode = (0.05, 0.05, 0.05, 0.05)\nplt.pie(injured_per_year, explode=explode, labels=labels, \n        colors=colors, autopct='%4.2f%%',shadow=True, startangle=20)\nplt.title('Injuries by year')\nplt.axis('equal')\nplt.show()","2fee1dfe":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(8, 6))\nsns.barplot(x=list(df.groupby('year').groups.keys()), y=df.groupby('year').sum()['min_affected'])\nplt.title('Persons affected by terrorist attacks per year')\nplt.ylabel('People affected')\nplt.xlabel('Year')\nplt.show()","7a5c230d":"ax = df[df.perpetrator != 'Unknown']['perpetrator'].value_counts().head(10).plot.bar(figsize=(8, 6))\nax.set_title('Top 10 perpetrators')\nplt.show()","beca4c46":"ax = df['type'].value_counts().head(10).plot.bar(figsize=(8, 6))\nax.set_title('Top 10 types of attack')\nax.set_ylabel('Number of attacks')\nplt.show()","f69a5c01":"ax = df[df.location != 'Unknown']['location'].value_counts().head(10).plot.bar(figsize=(8, 6))\nax.set_title('Most critical areas of conflict')\nax.set_ylabel('Number of attacks')\nplt.show()","72fd6e95":"plt.figure(figsize=(8, 6))\nsns.lineplot(x=list(df.groupby('start_date').groups.keys()), y=df.groupby('start_date').sum()['min_affected'])\nplt.xlabel('Day in month')\nplt.ylabel('Persons affected by attack')\nplt.show()","e66d8882":"deadliest_types = list(df['type'].value_counts().head(10).keys())\ndata = df[df.type.isin(deadliest_types)]\ndata = data.drop(['min_affected', 'start_date'], axis=1)\nax = data.groupby('type').sum().plot.bar(figsize=(10, 6))\nax.set_xlabel('Attack type')\nplt.show()","5c15e50f":"from sklearn.cluster import KMeans\ninertia = []\nX = df[['min_dead', 'min_injured']].values\nfor n_clusters in range(1, 100, 5): \n    model = KMeans(n_clusters=n_clusters)\n    model.fit(X)\n    inertia.append(model.inertia_)","e7a82fb6":"plt.figure(figsize=(8, 6))\nplt.plot(range(1, 100, 5), inertia, label='Number of clusters')\nplt.title('Elbow method')\nplt.legend()\nplt.show()","fabb0865":"model = KMeans(n_clusters=5)\nmodel.fit(X)\ny = model.predict(X)\nplt.figure(figsize=(15, 15))\nfor i in range(5):\n    plt.scatter(X[y == i, 0], X[y == i, 1])\nplt.show()","81d6a17b":"print(f\"There were at least {df['min_dead'].sum()} deaths caused by terrorist attacks between January 2015 - December 2018.\")","422f41a2":"Please **upvote** or **comment** this kernel.\n","6be063ea":"## **0. Before we begin**","0c1fe017":"# **Overview of terrorist incidents 2015. - 2018.** ","3f32b5c8":"Kernel goals:\n* Data preprocessing\n* Data exploration\n* Clustering","d825a369":"### Most critical areas of conflict","5be7473f":"## **1. Data preprocessing**","7e8efe1f":"## 3. **Clustering with K-means**","d97a57cc":"#### ***Thanks for reading!***","e0c53687":"We can see that bombing attacks cause more injuries than deaths while shooting causes more deaths than injuries.","326521e4":"### Elbow method","c02f2546":"Looks like deadliest attacks start between 5th and 10th in the month.","c499d60f":"### Top 10 types of attack","7bfecb40":"## **2. Data exploration**","d50f9f75":"### Processed dataset","ca33e56d":"### Top 10 perpetrators"}}