{"cell_type":{"e0c638e7":"code","ce3fc602":"code","c8519bc5":"code","8b009b3f":"code","c64effb7":"code","9dcc2533":"code","bc8be1da":"code","71ad60c3":"code","c8833835":"code","81b81d0c":"code","947bb91e":"code","215f4c52":"code","fe8518fb":"code","a47a9ede":"code","6f07a40f":"code","a428f640":"code","14476665":"code","5fb04f91":"code","b1c0a06b":"code","199287f8":"code","52068537":"code","b4fb11e5":"code","6138be05":"code","1db9ce9d":"code","e2fa69c2":"code","09e04c85":"code","20856a68":"code","30210739":"code","c1d2441d":"code","5849175a":"code","c88848af":"code","ce37fb95":"code","2575e6ce":"markdown","2502fe7b":"markdown","37e5b343":"markdown","525137b2":"markdown","bf573da5":"markdown","3a02a6bf":"markdown","a18ca9d5":"markdown","25bd8c0b":"markdown","e9b6c280":"markdown","2a1a22a9":"markdown","146249a6":"markdown","8e686a3a":"markdown","ff51ea26":"markdown","7cbe0584":"markdown","e0f39e16":"markdown","303c4448":"markdown","88e90d4b":"markdown","60a82c6c":"markdown","65a4f73b":"markdown","9faa0476":"markdown","37c37aff":"markdown","f093f1e6":"markdown"},"source":{"e0c638e7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom sklearn.preprocessing import StandardScaler , MinMaxScaler , RobustScaler\n\nfrom sklearn.model_selection import  train_test_split , cross_val_score\n\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.svm import SVC\n\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ce3fc602":"train = pd.read_csv('..\/input\/train.csv' , index_col = 'PassengerId')\nlabel = train['Survived']\n\ntest = pd.read_csv('..\/input\/test.csv', index_col = 'PassengerId')\nindex = test.index","c8519bc5":"train.head(3)","8b009b3f":"train.info()","c64effb7":"sns.countplot(label)","9dcc2533":"fig, ax =plt.subplots(1,3 , figsize=(10, 6) , sharex='col', sharey='row')\na = sns.countplot(x = 'Sex' , data=train , ax = ax[0] , order=['male' , 'female'])\nb = sns.countplot(x = 'Sex' , data= train[label == 1] , ax = ax[1] , order=['male' , 'female'])\nc = sns.countplot(x = 'Sex' , data= train[ ((train['Age'] < 21) & (label == 1)) ] , order=['male' , 'female'])\nax[0].set_title('All passenger')\nax[1].set_title('Survived passenger')\nax[2].set_title('Survived passenger under age 21')\n","bc8be1da":"fig, ax =plt.subplots(1,3 , figsize=(10, 6) , sharex='col', sharey='row')\na = sns.countplot(x = 'Pclass' , data=train , ax = ax[0] , order=[1 ,2,3])\nb = sns.countplot(x = 'Pclass' , data= train[label == 1] , ax = ax[1] , order=[1 ,2,3])\nc = sns.countplot(x = 'Pclass' , data= train[ ((train['Age'] < 21) & (label == 1)) ] , order=[1,2,3])\nax[0].set_title('All passanger')\nax[1].set_title('Survived passanger')\nax[2].set_title('Survived passanger under age 21')\n","71ad60c3":"fig, ax =plt.subplots(1,3 , figsize=(10, 6) , sharex='col', sharey='row')\na = sns.countplot(x = 'Embarked' , data=train , ax = ax[0] , order=['S' ,'Q','C'])\nb = sns.countplot(x = 'Embarked' , data= train[label == 1] , ax = ax[1] , order=['S' ,'Q','C'])\nc = sns.countplot(x = 'Embarked' , data= train[ ((train['Age'] < 21) & (label == 1)) ] , order=['S' ,'Q','C'])\nax[0].set_title('All passanger')\nax[1].set_title('Survived passanger')\nax[2].set_title('Survived passanger under age 21')","c8833835":"train['Deck'] = train.Cabin.str.get(0)\ntest['Deck'] = test.Cabin.str.get(0)\ntrain['Deck'] = train['Deck'].fillna('NOTAVL')\ntest['Deck'] = test['Deck'].fillna('NOTAVL')\n#Replacing T deck with closest deck G because there is only one instance of T\ntrain.Deck.replace('T' , 'G' , inplace = True)\ntrain.drop('Cabin' , axis = 1 , inplace =True)\ntest.drop('Cabin' , axis = 1 , inplace =True)","81b81d0c":"train.isna().sum()","947bb91e":"test.isna().sum()","215f4c52":"train.loc[train.Embarked.isna() , 'Embarked'] = 'S'","fe8518fb":"age_to_fill = train.groupby(['Pclass' , 'Sex' , 'Embarked'])[['Age']].median()\nage_to_fill","a47a9ede":"for cl in range(1,4):\n    for sex in ['male' , 'female']:\n        for E in ['C' , 'Q' , 'S']:\n            filll = pd.to_numeric(age_to_fill.xs(cl).xs(sex).xs(E).Age)\n            train.loc[(train.Age.isna() & (train.Pclass == cl) & (train.Sex == sex) \n                    &(train.Embarked == E)) , 'Age'] =filll\n            test.loc[(test.Age.isna() & (test.Pclass == cl) & (test.Sex == sex) \n                    &(test.Embarked == E)) , 'Age'] =filll","6f07a40f":"train.groupby(['Pclass' , 'Sex' , 'Embarked'])[['Age']].median()","a428f640":"train.Ticket = pd.to_numeric(train.Ticket.str.split().str[-1] , errors='coerce')\ntest.Ticket = pd.to_numeric(test.Ticket.str.split().str[-1] , errors='coerce')","14476665":"Ticket_median = train.Ticket.median()\ntrain.Ticket.fillna(Ticket_median , inplace =True)\ntest.Fare.fillna(train.Fare.median() , inplace =True)","5fb04f91":"train.isna().sum()","b1c0a06b":"test.isna().sum()","199287f8":"train['Status'] = train['Name'].str.split(',').str.get(1).str.split('.').str.get(0).str.strip()\ntest['Status'] = test['Name'].str.split(',').str.get(1).str.split('.').str.get(0).str.strip()\nimportan_person = ['Dr' , 'Rev' , 'Col' , 'Major' , 'Mlle' , 'Don' , 'Sir' , 'Ms' , 'Capt' , 'Lady' , 'Mme' , 'the Countess' , 'Jonkheer' , 'Dona'] \nfor person in importan_person:\n    train.Status.replace(person, 'IMP' , inplace =True)\n    test.Status.replace(person, 'IMP' , inplace =True)","52068537":"train.Status.unique()","b4fb11e5":"test.Status.unique()","6138be05":"train.head()","1db9ce9d":"test.head()","e2fa69c2":"test.drop(['Name' , 'Ticket' ] ,axis = 1, inplace = True)\ntrain.drop(['Survived','Ticket' ,'Name' ], inplace =True , axis =1)","09e04c85":"cat_col = ['Pclass' , 'Sex' , 'Embarked' , 'Status' , 'Deck']\ntrain.Pclass.replace({\n    1 :'A' , 2:'B' , 3:'C'\n} , inplace =True)\ntest.Pclass.replace({\n    1 :'A' , 2:'B' , 3:'C'\n} , inplace =True)\ntrain = pd.get_dummies(train , columns=cat_col)\ntest = pd.get_dummies(test , columns=cat_col)\nprint(train.shape , test.shape)","20856a68":"scaler = MinMaxScaler()\n\ntrain= scaler.fit_transform(train)\ntest = scaler.transform(test)","30210739":"model = RandomForestClassifier(bootstrap= True , min_samples_leaf= 3, n_estimators = 500 ,\n                               min_samples_split = 10, max_features = \"sqrt\", max_depth= 6)\ncross_val_score(model , train , label , cv=5)","c1d2441d":"model = LogisticRegression()\ncross_val_score(model , train , label , cv=5)","5849175a":"from sklearn.svm import SVC\nmodel = SVC(C=4)\ncross_val_score(model , train , label , cv=5)","c88848af":"model.fit(train , label)\npre = model.predict(test)","ce37fb95":"ans = pd.DataFrame({'PassengerId' : index , 'Survived': pre})\nans.to_csv('submit.csv', index = False)\nans.head()","2575e6ce":"<h4>Deck <\/h4>\nA deck is a permanent covering over a compartment or a hull of a ship. On a boat or ship, the primary or upper deck is the horizontal structure that forms the \"roof\" of the hull, strengthening it and serving as the primary working surface.<br>\nIt also gives information in which part of the ship a particular passenger might be when the ship was shinking. \nMore information can be found here [here](https:\/\/en.wikipedia.org\/wiki\/RMS_Titanic) in Dimensions and layout section<br>\nWe can get this information from the first letter of Cabin name if it not NaN","2502fe7b":"<h4>In the above bar graph we saw that Pclass ,sex , Embarked were the determing factor for the servival of a passenger we will group them using these features and fill the median age in the corresponding missing values in the group<\/h4>","37e5b343":"<h3> Male and Female<\/h3>","525137b2":"Lets scale the data","bf573da5":"> <h3>Embarked<\/h3>","3a02a6bf":"<h3>Machine Learning<\/h3>","a18ca9d5":"1. Most of the poor people died (ie From passenger class 3) .\n2. Most poor people who survived were under age 21","25bd8c0b":"> <h3>Survived<\/h3>\nTarget variable for this dataset is Survived . So let us do some analysis on this field first.","e9b6c280":"<h3>Passanger Class<\/h3>","2a1a22a9":"1. Majority of passengers were male on Titanic.<br>\n2. Most of the female survived.<br>","146249a6":"More than half (around 60%) of the passengers died. ","8e686a3a":"<h3> Feature Engineering<\/h3>","ff51ea26":"1. Most people boarded from Southampton since it the starting port of Titanic.\n2. Most of the people who boarded from Southampton died.","7cbe0584":"In training set there is missing value in **Embarked** and **Age**<br>\nIn training set there is missing value in **Fare** and **Age**","e0f39e16":"Lets fill the missing Ticket value in train data with median Ticket value and one missing fare value in test data with median fare in train","303c4448":"YAY ! There isn't any difference ","88e90d4b":"<h4>Let's fill the missing values in Embarked with the most frequent value in train set<\/h4>","60a82c6c":"Lets check if the above for loop is correct or not.<br>\nThere shouldn't be any difference between the previous median of groups and after filling its median in place of NaN","65a4f73b":"Fare is string with number at the end , Two consecutive ticket number means they are bougth from same place or they got same deck on the ship...","9faa0476":"Lets create one feature variable **Status** in the society . This features can be derive from the name features like 'Dr' , 'Rev' , 'Col' , 'Major' etc","37c37aff":"<h3>If you liked this kernel please consider upvoting it.<h3>","f093f1e6":"<h4>Lets count the missing values in train and test<\/h4>"}}