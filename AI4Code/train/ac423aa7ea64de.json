{"cell_type":{"ee41750b":"code","e4c3937c":"code","ab898d88":"code","8743b0a0":"code","456f9f49":"code","69eec738":"code","d1698c26":"code","c735eacc":"code","79932e76":"code","89e4ca95":"code","095eed3d":"code","f55551d4":"code","28803f81":"code","c5f3945b":"code","c9c62e9b":"code","f5cef232":"code","2cadf0b6":"code","1c279f86":"code","105eca2c":"code","f2b66a8f":"code","5d23e6e0":"code","c9258039":"code","c0a4e598":"code","621e89bf":"code","957b2d5d":"code","c558db76":"code","d486f110":"code","f61f29b9":"code","7f980f90":"code","5675589c":"code","c9273c8c":"code","44899c18":"code","c25f1825":"code","b96502ad":"code","41e1e11a":"code","b2ab980b":"code","feb19df4":"code","8feb4d74":"code","0681597b":"code","8293f0fd":"code","8f637943":"code","dc5114d0":"code","27f9ff28":"code","116bcb45":"code","5602a302":"code","9367fb98":"code","b51b4503":"code","cd732a53":"code","ed641a92":"code","b42ab2ec":"code","07e94a00":"code","98e84478":"code","95b69836":"markdown","9a7c4b86":"markdown","b94f6c8f":"markdown","953536f9":"markdown","8f19f341":"markdown","7e140f67":"markdown","a7fa9b44":"markdown","ebe5d485":"markdown","71534d54":"markdown","465ac178":"markdown","614dcbfa":"markdown","f4f941f1":"markdown","e285eb34":"markdown","74db09ff":"markdown","e701c8c4":"markdown","c2123f5b":"markdown","bdad99d2":"markdown","c4e40a55":"markdown","9d9bfd79":"markdown","f9a0bd6b":"markdown","95f2ab0e":"markdown","53831adc":"markdown","93329722":"markdown"},"source":{"ee41750b":"! pip uninstall -y networkx-neo4j #remove the old installation","e4c3937c":"! pip install git+https:\/\/github.com\/ybaktir\/networkx-neo4j","ab898d88":"import datetime, time\nprint ('Last run on: ' + datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\") + ' ' + repr(time.tzname))","8743b0a0":"user = 'neo4j'\npassword = 'span-moneys-mail' #YOUR OWN SANDBOX PASSWORD\nuri = 'bolt:\/\/34.232.72.6:32988' #YOUR OWN SANDBOX URL","456f9f49":"from neo4j import GraphDatabase","69eec738":"driver = GraphDatabase.driver(uri=uri,auth=(user,password))\n                              #OR \"bolt:\/\/localhost:7673\" for Neo4j Desktop\n                              #OR the cloud url","d1698c26":"import nxneo4j as nx","c735eacc":"G = nx.Graph(driver)","79932e76":"G.delete_all()  #This will delete all the data, be careful\n                #Just making sure that the results are reprodusible.","89e4ca95":"#Add a node\nG.add_node(\"Yusuf\")","095eed3d":"#Add node with features\nG.add_node(\"Nurgul\",gender='F')","f55551d4":"#Add multiple properties at once\nG.add_node(\"Betul\",age=4,gender='F')","28803f81":"#Check nodes\nfor node in G.nodes():   #Unlike networkX, nxneo4j returns a generator\n    print(node)","c5f3945b":"#Or simply\nlist(G.nodes())","c9c62e9b":"#Get the data associated with each node\nlist(G.nodes(data=True))","f5cef232":"#number of nodes\nlen(G)","2cadf0b6":"#Display\nnx.draw(G) #It is interactive, drag the nodes!","1c279f86":"#Check a particular node feature\nG.nodes['Betul']","105eca2c":"#You can be more specific\nG.nodes['Betul']['age']","f2b66a8f":"G.add_nodes_from([1,2,3,4])","5d23e6e0":"list(G.nodes())","c9258039":"#Add one edge\nG.add_edge('Yusuf','Betul')","c0a4e598":"nx.draw(G) #default relationship label is \"CONNECTED\"","621e89bf":"#You can change the default connection label like the following\nG.relationship_type = 'LOVES'","957b2d5d":"G.add_edge('Yusuf','Nurgul')\nG.add_edge('Nurgul','Yusuf')","c558db76":"nx.draw(G)","d486f110":"#You can add properties as well\nG.add_edge('Betul','Nurgul',how_much='More than Dad')","f61f29b9":"#display the values\nlist(G.edges(data=True))","7f980f90":"G.relationship_type = 'CONNECTED'","5675589c":"G.add_edges_from([(1,2),(3,4)])","c9273c8c":"nx.draw(G)","44899c18":"G.remove_node('Yusuf')","c25f1825":"list(G.nodes())","b96502ad":"G.delete_all()\nG.load_got()","41e1e11a":"#You can change the default parameters like the following:\nG.identifier_property = 'name'\nG.relationship_type = '*'\nG.node_label = 'Character'","b2ab980b":"nx.draw(G) #Zoom in to see the names :)","feb19df4":"len(G) #796 nodes","8feb4d74":"nx.pagerank(G) #RAW OUTPUT","0681597b":"# the most influential characters\nresponse = nx.pagerank(G)\nsorted_pagerank = sorted(response.items(), key=lambda x: x[1], reverse=True)\nfor character, score in sorted_pagerank[:10]:\n    print(character, score)","8293f0fd":"# Betweenness centrality\nnx.betweenness_centrality(G) #RAW OUTPUT","8f637943":"# RANKED OUTPUT\nresponse = nx.betweenness_centrality(G)\n\nsorted_bw = sorted(response.items(), key=lambda x: x[1], reverse=True)\nfor character, score in sorted_bw[:10]:\n    print(character, score)","dc5114d0":"# Closeness centrality\nnx.closeness_centrality(G) #RAW OUTPUT","27f9ff28":"# RANKED\nresponse = nx.closeness_centrality(G)\n\nsorted_cc = sorted(response.items(), key=lambda x: x[1], reverse=True)\nfor character, score in sorted_cc[:10]:\n    print(character, score)","116bcb45":"# Label propagation\nnx.label_propagation_communities(G) #RAW OUPUT is a generator","5602a302":"communities = nx.label_propagation_communities(G)\nsorted_communities = sorted(communities, key=lambda x: len(x), reverse=True)\nfor community in sorted_communities[:10]:\n    print(list(community)[:10])","9367fb98":"# Clustering\nnx.clustering(G) #RAW OUTPUT","b51b4503":"response = nx.clustering(G)\n\nbiggest_coefficient = sorted(response.items(), key=lambda x: x[1], reverse=True)\nfor character in biggest_coefficient[:10]:\n    print(list(character)[:10])","cd732a53":"list(nx.connected_components(G))","ed641a92":"nx.number_connected_components(G)","b42ab2ec":"nx.triangles(G) #RAW OUTPUT","07e94a00":"# Shortest path\nnx.shortest_path(G, source=\"Tyrion-Lannister\", target=\"Hodor\")","98e84478":"# Shortest weighted path\nnx.shortest_weighted_path(G, source=\"Tyrion-Lannister\", target=\"Hodor\",weight='weight')","95b69836":"There are several builtin graph algorithms in Neo4j. nxneo4j will expand to cover all of them in the future versions. For now, the following networkX algorithms are supported:\u00a0\n- pagerank\n- betweenness_centrality\n- closeness_centrality\n- label_propagation\n- connected_components\n- clustering\u00a0\n- triangles\n- shortest_path\n- shortest_weighted_path\n\nLet's delete all data and load GOT data:","9a7c4b86":"### _Latest version is 0.0.3_\nIf not already installed, install the latest version like this:","b94f6c8f":"Check out the following Mediumn article before you begin:\n\nhttps:\/\/medium.com\/neo4j\/nxneo4j-networkx-api-for-neo4j-a-new-chapter-9fc65ddab222","953536f9":"Characters are in the same community as those other characters with whom they frequently interact. The idea is that characters have closer ties to those in their community than to those outside.\n\n","8f19f341":"### Clustering\nWe can calculate the clustering coefficient for each character. A clustering coefficient of '1' means that all characters that interact with that character also interact with each other:","7e140f67":"## 2. Community Detection Algoritms","a7fa9b44":"## 3. Path Finding Algorithms","ebe5d485":"We\u2019ll start with the famous PageRank algorithm. Let\u2019s find out who the most influential characters in Game of Thrones are:","71534d54":"## Add Nodes","465ac178":"## Add Edges","614dcbfa":"# Welcome to nxneo4j!\n#### nxneo4j is a library that enables you to use networkX type of commands to interact with Neo4j. ","f4f941f1":"We can also run betweenness centrality over the dataset. This algorithm will tell us which nodes are the most 'pivotal' i.e. how many of the shortest paths between pairs of characters must pass through them","e285eb34":"We\u2019ll start with the famous PageRank algorithm. Let\u2019s find out who the most influential characters in Game of Thrones are:","74db09ff":"### Pagerank","e701c8c4":"Let's find the distance between two characters","c2123f5b":"Open a free Sandbox session at sandbox.neo4j.com:\n\nhttps:\/\/sandbox.neo4j.com\/\n\nGet the connections details like the following","bdad99d2":"### Closeness centrality\n\nCloseness centrality tells us on average how many hops away each character is from every other character.","c4e40a55":"## Graph Data Science","9d9bfd79":"## Connect to Neo4j","f9a0bd6b":"### Betweenness centrality","95f2ab0e":"### Label Propagation\nWe can also partition the characters into communities using the label propagation algorithm","53831adc":"## 1. Centrality Algorithms","93329722":"## Remove Nodes"}}