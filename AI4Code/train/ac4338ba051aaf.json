{"cell_type":{"127e4e08":"code","c605124a":"code","a557f305":"code","10ab42b0":"code","e77fb0a6":"code","1ccda97b":"code","d2f75734":"code","fb7ed102":"code","18d3d36a":"code","6d69e970":"code","c390c3a0":"code","b6f71134":"code","42df48c6":"code","5e00ed37":"code","e59cce1d":"code","d792782d":"code","f5646c3b":"code","4d7e6805":"code","c0819209":"code","e6d9686a":"code","8cc69b37":"code","9ef6f311":"code","58cc98c8":"code","d29373e7":"code","f4cedfdf":"code","afb8351b":"code","05b09d90":"markdown","73a1ae90":"markdown"},"source":{"127e4e08":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c605124a":"from numpy import *\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder","a557f305":"# \u83b7\u53d6\u5019\u90091\u9879\u96c6\uff0cdataSet\u4e3a\u4e8b\u52a1\u96c6\u3002\u8fd4\u56de\u4e00\u4e2alist\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662fset\u96c6\u5408\ndef createC1(dataSet):\n    C1 = []   # \u5143\u7d20\u4e2a\u6570\u4e3a1\u7684\u9879\u96c6\uff08\u975e\u9891\u7e41\u9879\u96c6\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u540c\u6700\u5c0f\u652f\u6301\u5ea6\u6bd4\u8f83\uff09\n    for transaction in dataSet:\n        for item in transaction:\n            if not [item] in C1:\n                C1.append([item])\n    C1.sort()  # \u8fd9\u91cc\u6392\u5e8f\u662f\u4e3a\u4e86\uff0c\u751f\u6210\u65b0\u7684\u5019\u9009\u96c6\u65f6\u53ef\u4ee5\u76f4\u63a5\u8ba4\u4e3a\u4e24\u4e2an\u9879\u5019\u9009\u96c6\u524d\u9762\u7684\u90e8\u5206\u76f8\u540c\n    # \u56e0\u4e3a\u9664\u4e86\u5019\u90091\u9879\u96c6\u5916\u5176\u4ed6\u7684\u5019\u9009n\u9879\u96c6\u90fd\u662f\u4ee5\u4e8c\u7ef4\u5217\u8868\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u6240\u4ee5\u8981\u5c06\u5019\u90091\u9879\u96c6\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u96c6\u5408\u3002\n    return list(map(frozenset, C1))   #map(frozenset, C1)\u7684\u8bed\u4e49\u662f\u5c06C1\u7531Python\u5217\u8868\u8f6c\u6362\u4e3a\u4e0d\u53d8\u96c6\u5408\uff08frozenset\uff0cPython\u4e2d\u7684\u6570\u636e\u7ed3\u6784\uff09","10ab42b0":"# \u627e\u51fa\u5019\u9009\u96c6\u4e2d\u7684\u9891\u7e41\u9879\u96c6\n# dataSet\u4e3a\u5168\u90e8\u6570\u636e\u96c6\uff0cCk\u4e3a\u5927\u5c0f\u4e3ak\uff08\u5305\u542bk\u4e2a\u5143\u7d20\uff09\u7684\u5019\u9009\u9879\u96c6\uff0cminSupport\u4e3a\u8bbe\u5b9a\u7684\u6700\u5c0f\u652f\u6301\u5ea6\ndef scanD(dataSet, Ck, minSupport):\n    ssCnt = {}   # \u8bb0\u5f55\u6bcf\u4e2a\u5019\u9009\u9879\u7684\u4e2a\u6570\n    for tid in dataSet:\n        for can in Ck:\n            if can.issubset(tid):\n                ssCnt[can] = ssCnt.get(can, 0) + 1   # \u8ba1\u7b97\u6bcf\u4e00\u4e2a\u9879\u96c6\u51fa\u73b0\u7684\u9891\u7387\n    numItems = float(len(dataSet))\n    retList = []\n    supportData = {}\n    for key in ssCnt:\n        support = ssCnt[key] \/ numItems\n        if support >= minSupport:\n            retList.insert(0, key)  #\u5c06\u9891\u7e41\u9879\u96c6\u63d2\u5165\u8fd4\u56de\u5217\u8868\u7684\u9996\u90e8\n        supportData[key] = support\n    return retList, supportData   #retList\u4e3a\u5728Ck\u4e2d\u627e\u51fa\u7684\u9891\u7e41\u9879\u96c6\uff08\u652f\u6301\u5ea6\u5927\u4e8eminSupport\u7684\uff09\uff0csupportData\u8bb0\u5f55\u5404\u9891\u7e41\u9879\u96c6\u7684\u652f\u6301\u5ea6","e77fb0a6":"# \u901a\u8fc7\u9891\u7e41\u9879\u96c6\u5217\u8868Lk\u548c\u9879\u96c6\u4e2a\u6570k\u751f\u6210\u5019\u9009\u9879\u96c6C(k+1)\u3002\ndef aprioriGen(Lk, k):\n    retList = []\n    lenLk = len(Lk)\n    for i in range(lenLk):\n        for j in range(i + 1, lenLk):\n            # \u524dk-1\u9879\u76f8\u540c\u65f6\uff0c\u624d\u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\uff0c\u5408\u5e76\u540e\u624d\u80fd\u751f\u6210k+1\u9879\n            L1 = list(Lk[i])[:k-2]; L2 = list(Lk[j])[:k-2]   # \u53d6\u51fa\u4e24\u4e2a\u96c6\u5408\u7684\u524dk-1\u4e2a\u5143\u7d20\n            L1.sort(); L2.sort()\n            if L1 == L2:\n                retList.append(Lk[i] | Lk[j])\n    return retList","1ccda97b":"# \u83b7\u53d6\u4e8b\u52a1\u96c6\u4e2d\u7684\u6240\u6709\u7684\u9891\u7e41\u9879\u96c6\n# Ck\u8868\u793a\u9879\u6570\u4e3ak\u7684\u5019\u9009\u9879\u96c6\uff0c\u6700\u521d\u7684C1\u901a\u8fc7createC1()\u51fd\u6570\u751f\u6210\u3002Lk\u8868\u793a\u9879\u6570\u4e3ak\u7684\u9891\u7e41\u9879\u96c6\uff0csupK\u4e3a\u5176\u652f\u6301\u5ea6\uff0cLk\u548csupK\u7531scanD()\u51fd\u6570\u901a\u8fc7Ck\u8ba1\u7b97\u800c\u6765\u3002\ndef apriori(dataSet, minSupport):\n    C1 = createC1(dataSet)  # \u4ece\u4e8b\u52a1\u96c6\u4e2d\u83b7\u53d6\u5019\u90091\u9879\u96c6\n    D = list(map(set, dataSet))  # \u5c06\u4e8b\u52a1\u96c6\u7684\u6bcf\u4e2a\u5143\u7d20\u8f6c\u5316\u4e3a\u96c6\u5408\n    L1, supportData = scanD(D, C1, minSupport)  # \u83b7\u53d6\u9891\u7e411\u9879\u96c6\u548c\u5bf9\u5e94\u7684\u652f\u6301\u5ea6\n    L = [L1]  # L\u7528\u6765\u5b58\u50a8\u6240\u6709\u7684\u9891\u7e41\u9879\u96c6\n    k = 2\n    while (len(L[k-2]) > 0): # \u4e00\u76f4\u8fed\u4ee3\u5230\u9879\u96c6\u6570\u76ee\u8fc7\u5927\u800c\u5728\u4e8b\u52a1\u96c6\u4e2d\u4e0d\u5b58\u5728\u8fd9\u79cdn\u9879\u96c6\n        Ck = aprioriGen(L[k-2], k)   # \u6839\u636e\u9891\u7e41\u9879\u96c6\u751f\u6210\u65b0\u7684\u5019\u9009\u9879\u96c6\u3002Ck\u8868\u793a\u9879\u6570\u4e3ak\u7684\u5019\u9009\u9879\u96c6\n        Lk, supK = scanD(D, Ck, minSupport)  # Lk\u8868\u793a\u9879\u6570\u4e3ak\u7684\u9891\u7e41\u9879\u96c6\uff0csupK\u4e3a\u5176\u652f\u6301\u5ea6\n        L.append(Lk);supportData.update(supK)  # \u6dfb\u52a0\u65b0\u9891\u7e41\u9879\u96c6\u548c\u4ed6\u4eec\u7684\u652f\u6301\u5ea6\n        k += 1\n    return L, supportData","d2f75734":"df = pd.read_csv(\"..\/input\/weathernominal\/weather.nominal.csv\")\ndf.head()","fb7ed102":"# df['outlook'].unique()","18d3d36a":"# df['temperature'].unique()","6d69e970":"# df['humidity'].unique()","c390c3a0":"# df['windy'].unique()","b6f71134":"# df['play'].unique()","42df48c6":"outlook_mapping = {\n           'sunny': 10,\n           'overcast': 11,\n           'rainy': 12}\ndf['outlook'] = df['outlook'].map(outlook_mapping)","5e00ed37":"# df.head()","e59cce1d":"temperature_mapping = {\n           'hot': 20,\n           'mild': 21,\n           'cool': 22}\ndf['temperature'] = df['temperature'].map(temperature_mapping)","d792782d":"# df.head()","f5646c3b":"humidity_mapping = {\n           'high': 30,\n           'normal': 31}\ndf['humidity'] = df['humidity'].map(humidity_mapping)","4d7e6805":"# df.head()","c0819209":"list1 = ['windy','play']\nfor i in list1:\n    df[i]=LabelEncoder().fit_transform(df[i]).astype(np.int8)\n    df[i]=df[i].astype('category')","e6d9686a":"df.head()","8cc69b37":"dataSet = df.values.tolist()  # \u83b7\u53d6\u4e8b\u52a1\u96c6\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5217\u8868\n# C1 = createC1(dataSet)  # \u83b7\u53d6\u5019\u90091\u9879\u96c6\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u96c6\u5408\n# D = list(map(set, dataSet))  # \u8f6c\u5316\u4e8b\u52a1\u96c6\u7684\u5f62\u5f0f\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u8f6c\u5316\u4e3a\u96c6\u5408\u3002\n# L1, suppDat = scanD(D, C1, 0.5)\n# print(L1,suppDat)\n\nL, suppData = apriori(dataSet,minSupport=0.5)\nprint(L)","9ef6f311":"print(suppData)","58cc98c8":"df = pd.read_csv(\"..\/input\/apriori\/Transactions.csv\")\ndf.head()","d29373e7":"df.info()","f4cedfdf":"dataSet = df.values.tolist()\n\nL, suppData = apriori(dataSet,minSupport=0.5)\nprint(L)","afb8351b":"print(suppData)","05b09d90":"# \u7b2c1\u30012\u9898\u7ed3\u679c","73a1ae90":"# \u7b2c3\u9898"}}