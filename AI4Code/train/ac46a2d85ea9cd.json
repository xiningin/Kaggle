{"cell_type":{"3175637c":"code","1035571f":"code","b0530dd4":"code","c2b59e93":"code","e287cb50":"code","62197312":"code","d2836120":"code","af057812":"code","460fafe5":"code","8dcb10ad":"code","164230e3":"code","787a1f92":"code","f97d8a16":"code","344d54e6":"code","3cb2a106":"code","fed86f2d":"code","58a3e12f":"code","ed0d944b":"code","ec37dcc0":"code","718be069":"code","bae0865c":"markdown","a499c8ce":"markdown","83d48b8e":"markdown","7817cf71":"markdown","beb24cea":"markdown","6841beac":"markdown","2a868de6":"markdown","2cf4f3fe":"markdown","be9e700e":"markdown","60311b2d":"markdown","b567ed49":"markdown","aa80697a":"markdown","6a7f76f5":"markdown","4a4c3381":"markdown","76f86cd2":"markdown"},"source":{"3175637c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1035571f":"from sklearn import preprocessing\n#np.random.seed(10)","b0530dd4":"all_df = pd.read_csv('..\/input\/train.csv')","c2b59e93":"all_df[:10]","e287cb50":"col = ['Survived','Name','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\nall_df = all_df[col]","62197312":"Gender_df = all_df[['Survived','Sex']]\nGender_num=Gender_df.groupby(\"Sex\").count()\nGender_num","d2836120":"Gender_Survived = Gender_df.groupby(\"Survived\").count()\nGender_Survived","af057812":"Gender_male = Gender_df.groupby(\"Sex\").get_group(\"male\")\nGender_male_survived = Gender_male[Gender_male['Survived']==1].shape[0]\nGender_female = Gender_df.groupby(\"Sex\").get_group(\"female\")\nGender_female_survived = Gender_female[Gender_female['Survived']==1].shape[0]\nGender_Survived_df = pd.DataFrame({'Male':[Gender_male_survived],'Female':[Gender_female_survived]})\nGender_Survived","460fafe5":"import seaborn as sns\nsns.countplot(all_df['Sex'],hue=all_df[\"Survived\"])\nall_df[['Sex','Survived']].groupby('Sex').mean().round(3)","8dcb10ad":"sns.countplot(all_df['Pclass'],hue=all_df['Survived'])\nall_df[['Pclass','Survived']].groupby('Pclass').mean().round(3)","164230e3":"def PreprocessData(all_df):\n    df = all_df.drop(['Name'],axis=1) #\u540d\u5b57\u4e0d\u5f71\u97ff\u5b58\u6d3b\u7387\n    age_mean = df['Age'].mean() \n    df['Age'] = df['Age'].fillna(age_mean) #\u5e74\u7d00\u7576\u4e2d\u6709NaNull\u503c\uff08\u4e0d\u8a73\uff09\uff0c\u5c07\u5e73\u5747\u503c\u5e36\u5165\n    fare_mean = df['Fare'].mean()\n    df['Fare'] = df['Fare'].fillna(fare_mean) #\u7968\u50f9\u540c\u7406\n    df['Sex'] = df['Sex'].map({'female':0,'male':1}).astype(int)\n    X_OneHot_df = pd.get_dummies(data=df,columns=['Embarked']) #\u503c\u4e4b\u9593\u6c92\u6709\u5927\u5c0f\u610f\u7fa9\uff0c\u53ef\u4ee5\u4f7f\u7528One-Hot\n    print(X_OneHot_df)\n    ndarray = X_OneHot_df.values\n    Features = ndarray[:,1:]\n    Label = ndarray[:,0]\n    \n    #\u5c07\u6578\u64da\u6b63\u898f\u5316\uff08Range : 0~1\uff09\n    minmax_sacle = preprocessing.MinMaxScaler(feature_range=(0,1))\n    scaledFeatures = minmax_sacle.fit_transform(Features)\n    #\n    return scaledFeatures, Label\nPreprocessData(all_df)\n    ","787a1f92":"np.random.seed(10)\nmsk = np.random.rand(len(all_df)) < 0.8\ntrain_df = all_df[msk]\ntest_df = all_df[~msk]\ntrain_Features, train_Label = PreprocessData(train_df)\ntest_Features, test_Label = PreprocessData(test_df)","f97d8a16":"from keras.models import Sequential\nfrom keras.layers import Dense,Dropout\nmodel = Sequential()\nmodel.add(Dense(units=40,input_dim=9,kernel_initializer='uniform',activation='relu'))\nmodel.add(Dense(units=30,kernel_initializer='uniform',activation='relu'))\nmodel.add(Dense(units=1,kernel_initializer='uniform',activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\ntrain_history = model.fit(x=train_Features,y=train_Label,validation_split=0.1,epochs=50,batch_size=30,verbose=2)","344d54e6":"import matplotlib.pyplot as plt\ndef show_train_history(train_history, train, validation):\n    plt.plot(train_history.history[train])\n    plt.plot(train_history.history[validation])\n    plt.title('Trian History')\n    plt.ylabel(train)\n    plt.xlabel(\"Epochs\")\n    plt.legend(['train','validation'],loc='lower right')\n    plt.show()\nshow_train_history(train_history,'acc','val_acc')\nshow_train_history(train_history,'loss','val_loss')","3cb2a106":"scores = model.evaluate(x=test_Features,y=test_Label)\npd.DataFrame(scores,index=model.metrics_names,columns=[''])","fed86f2d":"all_f, all_label = PreprocessData(all_df)\nall_probability = model.predict(all_f)\nall_df['Probability']=all_probability\nall_df","58a3e12f":"predict_data = pd.read_csv('..\/input\/test.csv')\npredict_data = predict_data.sort_values(by = 'PassengerId')\ncol = ['Name','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked'] #\u4e26\u6c92\u6709Survived\u9019\u500b\u6b04\u4f4d\uff08\u672a\u77e5\uff09\npredict_data = predict_data[col]\n# \u7531\u65bc\u4e26\u6c92\u6709Survived\u9019\u500b\u6b04\u4f4d\uff0cPreprocessData\u51fd\u5f0f\u5df2\u4e0d\u53ef\u7528\ndef predict_data_preprocess(all_df):\n    df = all_df.drop(['Name'],axis=1) #\u540d\u5b57\u4e0d\u5f71\u97ff\u5b58\u6d3b\u7387\n    age_mean = df['Age'].mean() \n    df['Age'] = df['Age'].fillna(age_mean) #\u5e74\u7d00\u7576\u4e2d\u6709NaNull\u503c\uff08\u4e0d\u8a73\uff09\uff0c\u5c07\u5e73\u5747\u503c\u5e36\u5165\n    fare_mean = df['Fare'].mean()\n    df['Fare'] = df['Fare'].fillna(fare_mean) #\u7968\u50f9\u540c\u7406\n    df['Sex'] = df['Sex'].map({'female':0,'male':1}).astype(int)\n    X_OneHot_df = pd.get_dummies(data=df,columns=['Embarked']) #\u503c\u4e4b\u9593\u6c92\u6709\u5927\u5c0f\u610f\u7fa9\uff0c\u53ef\u4ee5\u4f7f\u7528One-Hot\n    print(X_OneHot_df)\n    ndarray = X_OneHot_df.values\n    Features = ndarray\n    \n    #\u5c07\u6578\u64da\u6b63\u898f\u5316\uff08Range : 0~1\uff09\n    minmax_sacle = preprocessing.MinMaxScaler(feature_range=(0,1))\n    scaledFeatures = minmax_sacle.fit_transform(Features)\n    #\n    return scaledFeatures\npredict_data = predict_data_preprocess(predict_data)","ed0d944b":"test = model.predict(predict_data)\ntest","ec37dcc0":"fliter = np.around(test).astype(int)\nsubmit = pd.read_csv('..\/input\/gender_submission.csv')\nsubmit['Survived'] = fliter\nsubmit","718be069":"submit.to_csv('.\/submit.csv', index=False)","bae0865c":"> \u53ef\u77e5\u5728\u6240\u6709\u4e58\u5ba2\u540d\u55ae\u4e2d \uff1a\n> \u7537\u6027\u4e58\u5ba2\u4f54577\u4f4d \u5973\u6027\u4e58\u5ba2\u4f54314\u4f4d","a499c8ce":">Pclass : \u982d\u7b49\uff0c\u5546\u52d9\uff0c\u7d93\u6fdf","83d48b8e":"> \u53ef\u77e5\u5973\u6027\u65c5\u5ba2\u5b58\u6d3b\u7387\u7d0474% \u7537\u6027\u65c5\u5ba2\u7d0419%","7817cf71":"# \u5206\u6790\u5b58\u6d3b\u7387\u4e4b\u5f71\u97ff","beb24cea":"## \u6027\u5225","6841beac":"> \u7537\u6027\u4e58\u5ba2\u5b58\u6d3b\u4eba\u6578 \u53ca \u5973\u6027\u4e58\u5ba2\u5b58\u6d3b\u4eba\u6578","2a868de6":"## ------------------------------------------------------------------------","2cf4f3fe":"# \u6e96\u78ba\u7387\uff06\u8aa4\u5dee\u7387\n### \u7528\u6e2c\u8a66\u8cc7\u6599\u4f86\u8a55\u4f30\u8a72\u6a21\u578b\u7684\u6e96\u78ba\u7a0b\u5ea6","be9e700e":"## \u8259\u7b49","60311b2d":"# Models","b567ed49":"> \u6ce8\u610f\uff1a \u9019\u662f\u5b58\u6d3b\u4e0b\u4f86\u7684\u4e58\u5ba2\u6709549\u500b \u6b7b\u4ea1\u4e58\u5ba2\u6709342\u500b","aa80697a":"# Data Procressing","6a7f76f5":"# \u9810\u6e2c","4a4c3381":"## ------------\u7df4\u7fd2---------------------------------------------------------","76f86cd2":"# \u7e6a\u88fd\u6e96\u78ba\u7387\u53ca\u8aa4\u5dee\u7387\u5716"}}