{"cell_type":{"bd081155":"code","b93cefbf":"code","1a11b9ed":"code","25dbfef4":"code","e19d4754":"code","a56c9cf6":"code","b7c8c857":"code","df270c0b":"code","1c37712b":"code","dd7738a1":"code","12a4e598":"code","c5216b3c":"code","e550ee7f":"code","ed77f2db":"code","04cc95bd":"code","43c80020":"code","25ee6e8d":"code","54f968e4":"code","277bff77":"code","f34a07f8":"code","89e25956":"code","5a6cb670":"code","3f59ba82":"code","c0aa9e2a":"code","5d381db7":"code","6e857b1e":"markdown","4be8e849":"markdown","aaee9a70":"markdown","0d197b1f":"markdown","57241e57":"markdown","5a329080":"markdown"},"source":{"bd081155":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b93cefbf":"data = pd.read_csv('..\/input\/world-population-by-year\/WorldPopulation.csv')","1a11b9ed":"data.sample(10)","25dbfef4":"data.shape","e19d4754":"data.info()","a56c9cf6":"data.isnull().sum()\n#No null values","b7c8c857":"data.describe()","df270c0b":"import matplotlib.pyplot as plt\nimport seaborn as sns","1c37712b":"data_without_year = data.drop('Year',axis = 1)","dd7738a1":"plt.figure(figsize = (15,15))\nfor i,feature in enumerate(data_without_year.columns):\n    ax = plt.subplot(3,3,i+1)\n    sns.histplot(data_without_year[feature],kde = True)\n    ax.set_title(feature + \" Histogram\")","12a4e598":"plt.figure(figsize = (15,15))\nfor i, feature in enumerate(data_without_year.columns):\n    ax = plt.subplot(3,3,i+1)\n    sns.lineplot(x = data['Year'], y = data_without_year[feature])\n    ax.set_title(feature)","c5216b3c":"sns.heatmap(data.corr(),annot = True)","e550ee7f":"sns.pairplot(data_without_year)","ed77f2db":"plt.figure(figsize = (15,15))\nfor i,feature in enumerate(data_without_year.columns):\n    ax = plt.subplot(3,3,i+1)\n    sns.boxplot(x = data_without_year[feature], data = data_without_year)\n    ax.set_title(feature)","04cc95bd":"x = np.array(data.drop(['Population','NetChange','Urban'],axis = 1))\ny = np.array(data['Population'])","43c80020":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx = scaler.fit_transform(x)\ny = scaler.fit_transform(y.reshape(-1, 1))","25ee6e8d":"x = pd.DataFrame(x)\ny = pd.DataFrame(y)","54f968e4":"x.head()","277bff77":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state = 42)","f34a07f8":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()","89e25956":"lr_model = lr.fit(x_train,y_train)\ny_pred = lr_model.predict(x_test)","5a6cb670":"y_pred","3f59ba82":"print(\"Score \", lr_model.score(x_test,y_test)*100)","c0aa9e2a":"x_test.shape","5d381db7":"y_test.shape","6e857b1e":"### LINEAR REGRESSION  MODEL","4be8e849":"### Variables:\n* Year: 1951 to 2020\n* Population: World Population\n* ChangePerc: Yearly Change in Percentage\n* NetChange: Total Yearly Change\n* Density: Density in P\/Km\u00b2\n* Urban: Urban Population\n* UrbanPerc: Urban Population Percentage","aaee9a70":"World Population is directly related to Urban Population, Urban Percentage and Density and almost inversely related to Change in Percent","0d197b1f":"From box-plot, Net change in population has outliers. So, we will remove it for model building.\nSince, feature Urban is highly correlated to Population which can lead to overfitting we will remove it too.","57241e57":"### DATA DESCRIPTION","5a329080":"### DATA VISUALIZATION"}}