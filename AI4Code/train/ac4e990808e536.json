{"cell_type":{"e2b45fa6":"code","f7004ec9":"code","9dc0fe2a":"code","9cc381b6":"code","f735a4ee":"code","dcc49b0e":"code","4dd5eba0":"code","6be1b732":"code","33ed3a88":"code","9804f7ce":"code","0d48736b":"code","f1b6c4c8":"code","c920a3d0":"code","eac68d2b":"code","895972fd":"code","6d606a3e":"code","f126bda2":"code","66ad839b":"code","ed9eb9b7":"code","10ebe9ec":"code","9f52b0b4":"code","ffc42d4a":"code","664fae19":"code","e0b1136c":"code","65a72f47":"code","eb3c95ea":"code","b83863b4":"code","b1bfc5e8":"code","a60c9fb7":"code","d171af44":"code","b4c9b2f2":"code","2aa88cdc":"code","60f1e4e6":"code","4878e170":"code","be463b9b":"code","247ac02d":"code","480cc9df":"code","a1cef7ca":"code","e8240f35":"code","b927ad5d":"code","b271501e":"code","2396b04c":"code","f99f2089":"code","2f28ef3a":"code","590ffc22":"code","b30933b0":"code","c02ae960":"code","79fcf1d1":"code","f9c36fdf":"code","ca7f51e8":"code","335a44e0":"code","f862c3b3":"markdown","9f929811":"markdown","bb997ab4":"markdown","42baf951":"markdown","adda0c47":"markdown","ee26c717":"markdown","210a4809":"markdown","ff2b5c62":"markdown","045eca77":"markdown","ee16d15a":"markdown","54fd64f6":"markdown","7ed55d37":"markdown","c92b6ad5":"markdown","e5253808":"markdown","f9ae63df":"markdown","6b21b6a4":"markdown","be74d1fb":"markdown","d971b46f":"markdown","1546bc2d":"markdown","bfe14bda":"markdown","7d2cbe05":"markdown","297df400":"markdown","0e26f21d":"markdown","5b8d9803":"markdown","611e0df8":"markdown"},"source":{"e2b45fa6":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f7004ec9":"train_df = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv')","9dc0fe2a":"train_df.head()","9cc381b6":"train_df.info()","f735a4ee":"test_df.head()","dcc49b0e":"test_df.info()","4dd5eba0":"# NANs check\ntrain_df.isnull().sum()","6be1b732":"test_df.isnull().sum()","33ed3a88":"# Duplicates check\ntrain_df.duplicated().sum()","9804f7ce":"test_df.duplicated().sum()","0d48736b":"# Datasets statistics\ntrain_df.describe()","f1b6c4c8":"# box plotting casual, registed and count\nplt.figure(figsize=(8, 6))\nplt.boxplot([train_df['casual'], train_df['registered'], train_df['count']]);","c920a3d0":"plt.boxplot([np.log1p(train_df['casual']), np.log1p(train_df['registered']), np.log1p(train_df['count'])]);","eac68d2b":"# Extracting year, month, day, hour from datetime feature\n\ntrain_df['datetime'] = pd.to_datetime(train_df['datetime'], format='%Y-%m-%d %H')\ntest_df['datetime'] = pd.to_datetime(test_df['datetime'], format='%Y-%m-%d %H')\n\ntrain_df['year'] = train_df['datetime'].dt.year\ntest_df['year'] = test_df['datetime'].dt.year\n\ntrain_df['month'] = train_df['datetime'].dt.month\ntest_df['month'] = test_df['datetime'].dt.month\n\ntrain_df['day'] = train_df['datetime'].dt.day\ntest_df['day'] = test_df['datetime'].dt.day\n\ntrain_df['hour'] = train_df['datetime'].dt.hour\ntest_df['hour'] = test_df['datetime'].dt.hour\n\ntrain_df['day-of-week'] = train_df['datetime'].dt.day_name()\ntest_df['day-of-week'] = test_df['datetime'].dt.day_name()","895972fd":"# feature correlation\nplt.figure(figsize=(14, 12))\nsns.heatmap(train_df.corr());","6d606a3e":"train_df.corr()","f126bda2":"# Check mean of bike rented per days of week\nplt.figure(figsize=(8,6))\ntrain_df.groupby('day-of-week')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('day-of-week')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Week Days');","66ad839b":"# Check mean of bike rented per months\nplt.figure(figsize=(8,6))\ntrain_df.groupby('month')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('month')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Months');","ed9eb9b7":"# Check mean of bike rented per year\ntrain_df.groupby('year')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('year')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Years');","10ebe9ec":"# Check mean of bike rented Over times\nplt.figure(figsize=(8,6))\ntrain_df.groupby(['year', 'month'])['casual'].mean().plot(color='crimson');\ntrain_df.groupby(['year', 'month'])['registered'].mean().plot(color='cornflowerblue');\nplt.title('Mean of Bikes Rented over Times');","9f52b0b4":"# Check mean of bike rented per hour\nplt.figure(figsize=(10, 8))\ntrain_df.groupby('hour')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('hour')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Hours');","ffc42d4a":"# Check mean of bike rented over seasons\ntrain_df.groupby('season')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('season')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Seasons');","664fae19":"# Check mean of bike rented over workingday\ntrain_df.groupby('workingday')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('workingday')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Seasons');","e0b1136c":"# Check mean of bike rented over weather condition\ntrain_df.groupby('weather')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('weather')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Weather Condition');","65a72f47":"# Check mean of bike rented over temperature\nplt.figure(figsize=(12, 10))\ntrain_df.groupby('temp')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('temp')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Temperature');","eb3c95ea":"# Check mean of bike rented over windspeed\nplt.figure(figsize=(8, 10))\ntrain_df.groupby('windspeed')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('windspeed')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Windspeed');","b83863b4":"# Check mean of bike rented over humidity range\ntrain_df['humidity_range'] = train_df['humidity']\/10\ntrain_df['humidity_range'] = train_df['humidity_range'].astype(int)\n\nplt.figure(figsize=(10, 8))\ntrain_df.groupby('humidity_range')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('humidity_range')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Humidity Range');\n\ntrain_df.drop('humidity_range', axis=1, inplace=True)","b1bfc5e8":"# Extracting weekends\ntrain_df['week_end'] = train_df['day-of-week'].apply(lambda x: 1 if x=='Saturday' or x=='Sunday' else 0)\ntest_df['week_end'] = test_df['day-of-week'].apply(lambda x: 1 if x=='Saturday' or x=='Sunday' else 0)","a60c9fb7":"# Check mean of bike rented over weekend\ntrain_df.groupby('week_end')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('week_end')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Weekend');","d171af44":"# Extracting rush_hour\ntrain_df['rush_hour'] = train_df['hour'].apply(lambda x: 1 if x == 8 or x == 17 or x == 18 else 0)\ntest_df['rush_hour'] = test_df['hour'].apply(lambda x: 1 if x == 8 or x == 17 or x == 18 else 0)","b4c9b2f2":"# Check mean of bike rented over rush hours\ntrain_df.groupby('rush_hour')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('rush_hour')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Rush Hours');","2aa88cdc":"# Extracting sleepy hours\ntrain_df['sleepy_hour'] = train_df['hour'].apply(lambda x: 1 if x in [0, 1, 2, 3, 4, 5] else 0)\ntest_df['sleepy_hour'] = test_df['hour'].apply(lambda x: 1 if x in [0, 1, 2, 3, 4, 5] else 0)","60f1e4e6":"# Check mean of bike rented over sleepy hours\ntrain_df.groupby('sleepy_hour')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('sleepy_hour')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Sleepy Hours');","4878e170":"# Extracting improper humidity\ntrain_df['improper_humidity'] = train_df['humidity'].apply(lambda x: 1 if x < 10 or x > 70 else 0)\ntest_df['improper_humidity'] = test_df['humidity'].apply(lambda x: 1 if x < 10 or x > 70 else 0)","be463b9b":"# Check mean of bike rented over improper humidity\ntrain_df.groupby('improper_humidity')['casual'].mean().plot(kind='barh', color='crimson', width=0.3,  position=0);\ntrain_df.groupby('improper_humidity')['registered'].mean().plot(kind='barh', color='cornflowerblue', width=0.3, position=1);\nplt.title('Mean of Bikes Rented over Improper Humidity');","247ac02d":"# Drop high collinearity features\ntrain_df.drop(['atemp', 'season'], axis=1, inplace=True)\ntest_df.drop(['atemp', 'season'], axis=1, inplace=True)","480cc9df":"# Setting datetime as index\ntrain_df = train_df.set_index('datetime')\ntest_df = test_df.set_index('datetime')","a1cef7ca":"# Label Encoding Day featue\n\nfor col in ['day-of-week']:\n    train_df[col] = pd.factorize(train_df[col])[0].reshape(-1,1)\n    test_df[col] = pd.factorize(test_df[col])[0].reshape(-1,1)","e8240f35":"def model_outcome(x, y, model):\n    \n    # spliiting train and validation data\n    x_train, x_valid, y_train, y_valid = train_test_split(x, y , test_size = 0.2, stratify=train_df['month'], random_state = 0)\n    \n    # fitting model\n    model.fit(x_train, y_train)\n    \n    # prediction train and validation datasets\n    train_pred = model.predict(x_train)\n    valid_pred = model.predict(x_valid)\n\n    #calulation errors\n    print('Training R2 score: {}'.format(r2_score(y_train, train_pred)))\n    print('Validation R2 score: {}'.format(r2_score(y_valid, valid_pred)))\n\n    print('Training RMSLE: {}'.format(np.sqrt(np.square(y_train - train_pred).mean())))\n    print('Training RMSLE: {}'.format(np.sqrt(np.square(y_valid - valid_pred).mean())))","b927ad5d":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score","b271501e":"x = train_df.drop(['casual', 'registered', 'count'], axis=1)\ny_casual = np.log1p(train_df['casual'])\ny_registered = np.log1p(train_df['casual'])","2396b04c":"# Linear Regression\nfrom sklearn.linear_model import LinearRegression\nlr_model = LinearRegression()\n\nprint('Casual Rents Prediction Model')\nmodel_outcome(x, y_casual, lr_model)\nprint('\\nRegistered Rents Prediction Model')\nmodel_outcome(x, y_registered, lr_model)","f99f2089":"# SVR\nfrom sklearn.svm import SVR\nsvr_model = SVR(kernel='sigmoid')\n    \nprint('Casual Rents Prediction Model')\nmodel_outcome(x, y_casual, svr_model)\nprint('\\nRegistered Rents Prediction Model')\nmodel_outcome(x, y_registered, svr_model)","2f28ef3a":"# KNN\nfrom sklearn.neighbors import KNeighborsRegressor\nknn_model = KNeighborsRegressor(n_neighbors=5)\n    \nprint('Casual Rents Prediction Model')\nmodel_outcome(x, y_casual, knn_model)\nprint('\\nRegistered Rents Prediction Model')\nmodel_outcome(x, y_registered, knn_model)","590ffc22":"# Decision Tree Regressor\nfrom sklearn.tree import DecisionTreeRegressor\ndt_model = DecisionTreeRegressor(max_depth=8)\n    \nprint('Casual Rents Prediction Model')\nmodel_outcome(x, y_casual, dt_model)\nprint('\\nRegistered Rents Prediction Model')\nmodel_outcome(x, y_registered, dt_model)","b30933b0":"# Random Forest Regressor\nfrom sklearn.ensemble import RandomForestRegressor\nrf_model = RandomForestRegressor(n_estimators=40, max_depth=10, random_state=0)\n    \nprint('Casual Rents Prediction Model')\nmodel_outcome(x, y_casual, rf_model)\nprint('\\nRegistered Rents Prediction Model')\nmodel_outcome(x, y_registered, rf_model)","c02ae960":"# Extra Trees Regressor\nfrom sklearn.ensemble import ExtraTreesRegressor\net_model = ExtraTreesRegressor(n_estimators=45, max_depth=11, random_state=0)\n    \nprint('Casual Rents Prediction Model')\nmodel_outcome(x, y_casual, et_model)\nprint('\\nRegistered Rents Prediction Model')\nmodel_outcome(x, y_registered, et_model)","79fcf1d1":"# Extra Trees Regressor\nfrom sklearn.ensemble import GradientBoostingRegressor\n\nparams = {'n_estimators': 45, 'max_depth': 9, 'random_state': 0,\n          'min_samples_leaf' : 10, 'learning_rate': 0.1, 'subsample': 0.7, 'loss': 'ls'}\ngbm_model = GradientBoostingRegressor(**params) \n\nprint('Casual Rents Prediction Model')\nmodel_outcome(x, y_casual, gbm_model)\nprint('\\nRegistered Rents Prediction Model')\nmodel_outcome(x, y_registered, gbm_model)","f9c36fdf":"test_casual_predict = gbm_model.fit(x, y_casual).predict(test_df)\ntest_registered_predict = gbm_model.fit(x, y_registered).predict(test_df)","ca7f51e8":"test_casual_predict = np.expm1(test_casual_predict)\ntest_registered_predict = np.expm1(test_registered_predict)\n\ntest_count_predict = test_casual_predict + test_registered_predict","335a44e0":"# Saving test predictions to file\noutput = pd.DataFrame({\"datetime\": test_df.index, \"count\" : test_count_predict.astype(int)})\noutput.to_csv('sampleSubmission.csv', index=False)","f862c3b3":"- Mean rents `decreases` when the `humidity increases`, except below 10%","9f929811":"### Feature Engineering & Extra EDA","bb997ab4":"- Mean rents `increases` when the `tempeature increases`","42baf951":"- Mean rents significantly `decreases in January and February`, and `highly increases between May to October`.","adda0c47":"-  `Casual` rents increases in `No workingdays` when `Registed` rents increases in `workingdays`\n\n","ee26c717":"- The feature will affect well in model ","210a4809":"Mean rents `increases` in season `Summer and Fall` rather than Winter and Spring","ff2b5c62":"- The feature will affect very `well` in prediction the `registered` rents `not` the `casual`.","045eca77":"- We notice that over time during year the mean rents differs, so the feature of year and month will affect well in model.","ee16d15a":"### EDA & Visuals","54fd64f6":"- Mean of rents significantly `decreases at midnight till the dawn`\n- Registed rents`highly increases at 8 AM and 17, 18 PM`.","7ed55d37":"- There's `no NaNs`","c92b6ad5":"- Mean rents increases in Clear, Few clouds, Partly cloudy, Partly cloudy weather","e5253808":"- The feature will affect very well in model prediction.","f9ae63df":"- The feature will affect in model prediction.","6b21b6a4":"- We can notice that `weekend (Saturday and Monday)` has significant difference in mean rents even in casual or registerd ones.","be74d1fb":"### Pre-Processing","d971b46f":"### Result","1546bc2d":"### Imports & Load Data","bfe14bda":"- There's `no duplicates`","7d2cbe05":"- Using log 1 positive with casual and registed columns will affect well in modeling as almost no outliers.","297df400":"### Modeling","0e26f21d":"- Mean rents in `2012 is higher than 2011`","5b8d9803":"- this feature won't affect well in modeling as almost all windspeeds has ths same mean rents","611e0df8":"- Theres `high collinearity` between:\n    - `temp` and `atemp`, so we can drop one of them\n    - `season` and `month`, so we can drop one of them"}}