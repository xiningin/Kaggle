{"cell_type":{"ae633aef":"code","2ca74973":"code","ab6cae38":"code","8d783643":"code","36c5d2c0":"code","facf3760":"code","4e3e5245":"markdown","116f5a75":"markdown","53a15707":"markdown","8c4208c9":"markdown","90fb63e0":"markdown","bc1e4d5f":"markdown"},"source":{"ae633aef":"def Read_file(FileName):\n    with open(FileName,'r') as file:\n        for line in file: #The delimiter for a file is \\n by default\n            for word in line.replace('\\n','').split(' '): #Splits according to space and replaces '\\n' by nothing\n                yield word #Returns a sequnce\/ series of words","2ca74973":"Words = Read_file('..\/input\/Title_Data.txt')","ab6cae38":"from collections import defaultdict\ndef assemble_chain(Words):\n    chain = defaultdict(list) #create a dictionary which maps word to list\n    try:\n        word,next_word = next(Words),next(Words) #from iterables\n        while True:\n            chain[word].append(next_word)\n            word,next_word = next_word, next(Words)\n    except StopIteration:  #Error which arises when no words left\n        return chain","8d783643":"Chain = assemble_chain(Words)\n#print(Chain)","36c5d2c0":"#Create the random word generator\nfrom random import choice\n\ndef random_word(sample): #Could be any list of words cos Im using it only for beginning\n    return choice(list(sample)) #Converting the dictionary to a list and then passing to choice\n    \n#Create a chain based on the first state\n\ndef random_title(Sample):\n    word = random_word(['I','My'])#random_word(Sample)\n    i = 0.0\n    while True:\n        yield word\n        if word in Sample:\n            word = random_word(Sample[word]) #Cos we only need the words which have a chance of coming after the given word\n            \n        else:\n            i = i+1\n            word = random_word(Sample)\n        if(word[-1] =='.' or word[-1]=='!' or word[-1]=='?'):\n            yield word\n            #print(i)\n            break","facf3760":"Title = random_title(Chain)\nT_l = list(Title)\nprint(*T_l, sep=' ')","4e3e5245":"## 1. Read the file","116f5a75":"So my basic approach is to divide the the text generation into 4 parts : \n\n* Read the file(Various titles)\n* Assemble the Chain\n* Generate the New Title\n* Output","53a15707":"## 3. Generate a Random Chain\nYou can also use the random_word() with the Chain too, but all titles of my data set began with I or My so I have used them as the first word.The chain is continued by a word from the list of words that has been linked the present word.","8c4208c9":"## 2. Assemble the Chain\nSo in order to assemble the chain, we create a dictionary which basically keeps track of what the present \"state\" (word) is and what the next \"state\" is.","90fb63e0":"## About the data\nSo the data basically consists of YouTube titles from a certain channel which (imo) has very very weird titles. The data has been cleaned and I've made a few changes to the raw data, like replacing a few characters which were not utf-8 etc. Any sort of feedback is highly welcomed and appreciated. \nI got this idea from [Jarvis Johnson's video](https:\/\/www.youtube.com\/watch?v=KWqaUHFhE8M)\nEnjoy the titles generated. They did make me laugh :)\nYou could contact me for the dataset any time!","bc1e4d5f":"## 4. Generating Output\nI chose to add the full stop at the end because it would help the algorithm identify the end instead of ending at random words."}}