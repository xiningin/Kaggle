{"cell_type":{"3d1ebb17":"code","7a68b91e":"code","3fef07c0":"code","7c035c4e":"code","07ed2917":"code","a29ba047":"code","80be96b3":"code","436a45ad":"code","0d50262e":"code","eff2d5c5":"code","f3a2465a":"code","4f8e4429":"code","8c0061ae":"code","cf8e9855":"code","2bf8f26c":"code","680f6a95":"code","1593c832":"code","0aa49e47":"code","75c82eb1":"code","77216007":"code","a305da87":"code","ad0e3465":"code","f6dd1c6d":"code","32ba319e":"code","1cb1ecf1":"code","2968c104":"code","31a05e10":"code","adf7b4e0":"code","4fb9a4ab":"code","af0e58b2":"code","5a429e27":"code","41568c03":"code","8abf12f5":"code","7e69688d":"code","1e63b573":"code","52fa58ce":"code","3ceb49bf":"code","2fdc0a9a":"code","4eb224c3":"code","ccdcbc3a":"code","5432091b":"code","3b051981":"code","2c0e7bd6":"code","d58c49e7":"code","82971d0a":"code","074d1f2e":"code","e5b0a5f0":"code","714c303b":"code","7dd64e40":"code","38f196a5":"code","029c3a51":"code","2568d525":"code","8f02843b":"code","ae9ea7a1":"code","c8077c05":"code","e69c619d":"code","a8277852":"code","b78955e1":"code","a307d352":"code","d6abcec1":"code","8f7c1f20":"code","af1c6249":"code","36beaeaf":"code","34705c3c":"code","efcd1019":"code","5c678336":"code","6695a593":"code","3a8c5b33":"code","59434d6a":"code","a29a65d3":"code","293f985e":"code","84e4bc65":"code","1f9d4456":"code","545cba93":"code","b57e703a":"markdown","79318b45":"markdown","05c1d6be":"markdown","441b9d46":"markdown","65aee76e":"markdown","49f4ecae":"markdown","2d4b7835":"markdown","a39e88af":"markdown","98691cf3":"markdown","8a05dab5":"markdown","307b19dd":"markdown","a4a061ba":"markdown","c7e5c780":"markdown","86b08d2d":"markdown","a8ca2afe":"markdown","cdfe6cea":"markdown","38b26b3d":"markdown","b958ad52":"markdown","1b804c02":"markdown","1e61d6a9":"markdown","17cb1ba3":"markdown","eb638f16":"markdown","d11af605":"markdown","0e838cac":"markdown","a2c541e3":"markdown","5c8fdff7":"markdown","bb1c45bf":"markdown","3895597e":"markdown","48dc55da":"markdown","ac7c7eec":"markdown","2226b628":"markdown","bddbc2f6":"markdown","200fcd37":"markdown","522ed2d4":"markdown","2be1ca42":"markdown","98b6c19a":"markdown","c30d72a7":"markdown","2772b2f9":"markdown","bf2230f9":"markdown","7b91c111":"markdown","89487564":"markdown","8bd41fa2":"markdown"},"source":{"3d1ebb17":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nimport catboost as catb\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import (roc_auc_score, roc_curve, auc, confusion_matrix, \\\n                             accuracy_score, classification_report, plot_confusion_matrix, \\\n                             plot_precision_recall_curve, precision_recall_curve, recall_score,\n                             plot_roc_curve, f1_score)\n\nimport warnings\nwarnings.filterwarnings('ignore')","7a68b91e":"def evaluate_preds(model, X_train, X_valid, y_train, y_valid):\n    y_train_pred = model.predict(X_train)\n    y_valid_pred = model.predict(X_valid)\n    print(\"TRAIN\\n\", round(f1_score(y_train, y_train_pred), 3))\n    print(\"TEST\\n\", round(f1_score(y_valid, y_valid_pred), 3))\n    get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)","3fef07c0":"def get_classification_report(y_train_true, y_train_pred, y_valid_true, y_valid_pred):\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('VALID\\n\\n' + classification_report(y_valid_true, y_valid_pred))\n    print('CONFUSION MATRIX\\n')\n    print(pd.crosstab(y_valid_true, y_valid_pred))","7c035c4e":"TRAIN_DATASET_PATH = '..\/input\/gb-credit-default\/train.csv'\nTEST_DATASET_PATH = '..\/input\/gb-credit-default\/test.csv'\nSAMPLE_SUBMIT_PATH = '..\/input\/gb-credit-default\/sample_submission.csv'","07ed2917":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_train.head()","a29ba047":"df_test = pd.read_csv(TEST_DATASET_PATH)\ndf_test.head()","80be96b3":"df_test.shape","436a45ad":"df_train.info()","0d50262e":"df_train['Credit Default'].value_counts()","eff2d5c5":"df_train.describe()","f3a2465a":"df_train.hist(bins = 20, figsize = (16, 16))\nplt.show()","4f8e4429":"for cat_colname in df_train.select_dtypes(include='object').columns:\n    print(str(cat_colname) + '\\n\\n' + str(df_train[cat_colname].value_counts()) + '\\n' + '*' * 100 + '\\n')","8c0061ae":"plt.figure(figsize=(12, 7))\n\n# sns.set(font_scale=1.4)\n\ncorr_matrix = df_train.corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.3] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='coolwarm')\n\nplt.title('Correlation matrix')\nplt.show()","cf8e9855":"df_train[df_train['Credit Score'] <= 850]['Credit Score'].count()","2bf8f26c":"df_train[df_train['Credit Score'] > 1000]['Credit Score'].count()","680f6a95":"df_train['Credit Score Outlier'] = 0\ndf_train.loc[df_train['Credit Score'] > 1000, 'Credit Score Outlier'] = 1\ndf_train.loc[df_train['Credit Score'] > 1000, 'Credit Score'] = df_train.loc[df_train['Credit Score'] > 1000, 'Credit Score'] \/ 10","1593c832":"df_train['Credit Score'].hist(bins = 20, figsize = (4, 4))\nplt.show()","0aa49e47":"df_train.loc[df_train['Credit Score Outlier'] == 1, 'Credit Score'].hist(bins = 20, figsize = (4, 4))\nplt.show()","75c82eb1":"df_train['Current Loan Amount'].value_counts()","77216007":"df_train['Current Loan Amount Outlier'] = 0\ndf_train.loc[df_train['Current Loan Amount'] == 99999999.0, 'Current Loan Amount Outlier'] = 1\ndf_train.loc[df_train['Current Loan Amount'] == 99999999.0, 'Current Loan Amount'] = df_train['Current Loan Amount'].median()","a305da87":"df_train[df_train['Current Loan Amount'] == 99999999.0]['Current Loan Amount'].count()","ad0e3465":"df_train['Maximum Open Credit'].hist(bins = 20, figsize = (4, 4))\nplt.show()","f6dd1c6d":"max_credit = 99999999.0","32ba319e":"df_train[df_train['Maximum Open Credit'] > max_credit]['Maximum Open Credit'].value_counts()","1cb1ecf1":"df_train['Maximum Open Credit Outlier'] = 0\ndf_train.loc[df_train['Maximum Open Credit'] > max_credit, 'Maximum Open Credit Outlier'] = 1\ndf_train.loc[df_train['Maximum Open Credit'] > max_credit, 'Maximum Open Credit'] = max_credit","2968c104":"df_train[df_train['Maximum Open Credit Outlier'] == 1]","31a05e10":"df_train['Months since last delinquent'].describe()","adf7b4e0":"NaN_percentage = df_train['Months since last delinquent'].isna().sum() \/ df_train.shape[0]\nNaN_percentage","4fb9a4ab":"df_train.isna().sum()","af0e58b2":"df_train['Annual Income'].median()","5a429e27":"df_train['Annual Income NaN'] = 0\ndf_train.loc[df_train['Annual Income'].isna(), 'Annual Income NaN'] = 1\ndf_train[df_train['Annual Income NaN']==1].count()\n#df_train.head()","41568c03":"df_train['Annual Income'].fillna(df_train['Annual Income'].median(), inplace = True)","8abf12f5":"df_train['Annual Income'].isna().sum()","7e69688d":"df_train['Annual Income'].hist(bins = 20, figsize = (4, 4))\nplt.show()","1e63b573":"mode = df_train['Years in current job'].mode().values[0]\nmode","52fa58ce":"df_train['Years in current job NaN'] = 0\ndf_train.loc[df_train['Years in current job'].isna(), 'Years in current job NaN'] = 1\ndf_train['Years in current job'].fillna(mode, inplace = True)","3ceb49bf":"df_train['Years in current job'].isna().sum()","2fdc0a9a":"df_train.drop('Months since last delinquent', axis=1, inplace=True)","4eb224c3":"df_train['Bankruptcies'].median()","ccdcbc3a":"df_train['Bankruptcies NaN'] = 0\ndf_train.loc[df_train['Bankruptcies'].isna(), 'Bankruptcies NaN'] = 1\ndf_train['Bankruptcies'].fillna(df_train['Bankruptcies'].median(), inplace = True)\ndf_train['Bankruptcies'].isna().sum()","5432091b":"df_train['Credit Score'].median()","3b051981":"df_train['Credit Score NaN'] = 0\ndf_train.loc[df_train['Credit Score'].isna(), 'Credit Score NaN'] = 1\ndf_train['Credit Score'].fillna(df_train['Credit Score'].median(), inplace = True)\ndf_train['Credit Score'].isna().sum()","2c0e7bd6":"df_train['Credit Score'].hist(bins=20, figsize = (4, 4))","d58c49e7":"df_train.isna().sum()","82971d0a":"df_train['Long Term'] = df_train['Term'].map({'Long Term': 1, 'Short Term': 0})","074d1f2e":"df_train['Years in current job'] = df_train['Years in current job'].map({'< 1 year':0, \n                                                                       '1 year':0, \n                                                                       '2 years':0, \n                                                                       '3 years':0, \n                                                                       '4 years':1, \n                                                                       '5 years':1, \n                                                                       '6 years':1, \n                                                                       '7 years':2,\n                                                                       '8 years':2,\n                                                                       '9 years':2,\n                                                                       '10+ years':3})","e5b0a5f0":"df_train = pd.concat([df_train, pd.get_dummies(df_train['Home Ownership'])], axis=1)","714c303b":"def credit_score_to_cat(X):\n    bins = [300, 579, 669, 739, 799, 850]\n    X['Credit Score Cat'] = pd.cut(X['Credit Score'], bins=bins, labels=False)\n    \n    X['Credit Score Cat'].fillna(-1, inplace=True)\n    return X","7dd64e40":"df_train = credit_score_to_cat(df_train)","38f196a5":"class DataPreprocessing:\n    \n    def __init__(self):\n        self.medians=None\n        self.modes = None\n        self.max_score = 850\n        self.max_credit = 99999999.0\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\" \n        X = X.copy()\n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d \u0438 \u043c\u043e\u0434\n        self.medians = X.median()\n        self.modes = X.mode().loc[0]\n                \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Credit score\n        X['Credit Score Outlier'] = 0\n        X['Credit Score NaN'] = 0\n        X.loc[X['Credit Score'] > self.max_score, 'Credit Score Outlier'] = 1\n        X.loc[X['Credit Score'].isna(), 'Credit Score NaN'] = 1\n\n        X.loc[X['Credit Score'] > self.max_score, 'Credit Score'] = \\\n                                X.loc[df_train['Credit Score'] > self.max_score, 'Credit Score'] \/ 10\n        X['Credit Score'].fillna(self.medians['Credit Score'], inplace = True)\n        \n        # Current Loan Amount\n        X['Current Loan Amount Outlier'] = 0\n        X.loc[X['Current Loan Amount'] == self.max_credit, 'Current Loan Amount Outlier'] = 1\n        X.loc[X['Current Loan Amount'] == self.max_credit, 'Current Loan Amount'] = self.medians['Current Loan Amount']\n        \n        # Maximum Open Credit\n        X['Maximum Open Credit Outlier'] = 0\n        X.loc[X['Maximum Open Credit'] > max_credit, 'Maximum Open Credit Outlier'] = 1\n        X.loc[X['Maximum Open Credit'] > max_credit, 'Maximum Open Credit'] = max_credit\n               \n        # Annual Income\n        X['Annual Income NaN'] = 0\n        X.loc[X['Annual Income'].isna(), 'Annual Income NaN'] = 1\n        X['Annual Income'].fillna(self.medians['Annual Income'], inplace = True)\n        \n        # Years in current job\n        X['Years in current job NaN'] = 0\n        X.loc[X['Years in current job'].isna(), 'Years in current job NaN'] = 1\n        X['Years in current job'].fillna(self.modes['Years in current job'], inplace = True)\n        \n        # Months since last delinquent\n        X.drop('Months since last delinquent', axis=1, inplace=True)\n        \n        # Bankruptcies\n        X['Bankruptcies NaN'] = 0\n        X.loc[X['Bankruptcies'].isna(), 'Bankruptcies NaN'] = 1\n        X['Bankruptcies'].fillna(self.medians['Bankruptcies'], inplace = True)\n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","029c3a51":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n      \n    def fit(self, X, y=None):\n        X = X.copy()\n                \n    def transform(self, X):\n        \n        # Term\n        X['Long Term'] = X['Term'].map({'Long Term': 1, 'Short Term': 0})\n                \n        # Years in current job\n        X['Years in current job'] = X['Years in current job'].map({'< 1 year':0, \n                                                                       '1 year':0, \n                                                                       '2 years':0, \n                                                                       '3 years':0, \n                                                                       '4 years':1, \n                                                                       '5 years':1, \n                                                                       '6 years':1, \n                                                                       '7 years':2,\n                                                                       '8 years':2,\n                                                                       '9 years':2,\n                                                                       '10+ years':3})\n        # Home Ownership\n        X = pd.concat([X, pd.get_dummies(X['Home Ownership'])], axis=1)\n        \n        # Credit Score\n        X = self.credit_score_to_cat(X)\n        \n        return X\n    \n    def credit_score_to_cat(self, X):\n        bins = [300, 579, 669, 739, 799, 850]\n        X['Credit Score Cat'] = pd.cut(X['Credit Score'], bins=bins, labels=False)\n\n        X['Credit Score Cat'].fillna(-1, inplace=True)\n        return X","2568d525":"feature_names = ['Annual Income', \n                 'Tax Liens', \n                 'Number of Open Accounts', \n                 'Years of Credit History', \n                 'Maximum Open Credit', \n                 'Number of Credit Problems', \n#                  'Months since last delinquent', \n                 'Bankruptcies',\n                 'Current Loan Amount', \n                 'Current Credit Balance', \n                 'Monthly Debt', \n                 'Credit Score', \n                 'Years in current job', \n#                  'Purpose'\n                ]\n\nnew_feature_names = [\n#                          'Home Ownership',\n#                          'Term',\n#                          'Credit Score Outlier',\n#                          'Current Loan Amount Outlier',\n#                          'Maximum Open Credit Outlier',\n#                          'Annual Income NaN',\n#                          'Years in current job NaN',\n#                          'Bankruptcies NaN',\n#                          'Credit Score NaN',\n                         'Long Term',\n                         'Have Mortgage',\n                         'Home Mortgage',\n                         'Own Home',\n                         'Rent',\n                         'Credit Score Cat'\n                    ]\n\ntarget_name = 'Credit Default'","8f02843b":"len(feature_names)+len(new_feature_names)","ae9ea7a1":"df_train = pd.read_csv(TRAIN_DATASET_PATH)\ndf_test = pd.read_csv(TEST_DATASET_PATH)","c8077c05":"X = df_train.drop(columns=target_name)\ny = df_train[target_name]","e69c619d":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","a8277852":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)  #  fit \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a X_train\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ndf_test = preprocessor.transform(df_test)","b78955e1":"X_train.shape, X_valid.shape, df_test.shape","a307d352":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)  #  fit \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a X_train, y_train\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ndf_test = features_gen.transform(df_test)","d6abcec1":"X_train.shape, X_valid.shape, df_test.shape","8f7c1f20":"\"\"\" \u0432\u043e \u0432\u0441\u0435\u0445 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\u0445 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 5 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \"\"\"\nX_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ndf_test = df_test[feature_names + new_feature_names]","af1c6249":"X_train.shape, X_valid.shape, df_test.shape","36beaeaf":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), df_test.isna().sum().sum()","34705c3c":"X_train.isna().sum()","efcd1019":"disbalance = y_train.value_counts()[0] \/ y_train.value_counts()[1]\ndisbalance","5c678336":"model_catb = catb.CatBoostClassifier(\n                                     silent=True, \n                                     random_state=21,\n                                     class_weights=[1, disbalance],\n                                     eval_metric='F1',\n                                     early_stopping_rounds=20,\n                                     use_best_model=True,\n                                     custom_metric=['Precision', 'Recall'],\n                                     iterations=50,\n                                     max_depth=5,\n                                     min_data_in_leaf=5\n                                    )\n\nmodel_catb.fit(X_train, y_train, plot=True, eval_set=(X_valid, y_valid))","6695a593":"evaluate_preds(model_catb, X_train, X_valid, y_train, y_valid)","3a8c5b33":"feature_importances = pd.DataFrame(zip(X_train.columns, model_catb.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","59434d6a":"df_test.shape","a29a65d3":"submit = pd.read_csv(SAMPLE_SUBMIT_PATH)\nsubmit.head()","293f985e":"predictions = model_catb.predict(df_test)\npredictions","84e4bc65":"len(predictions)","1f9d4456":"submit['Credit Default'] = predictions","545cba93":"submit.to_csv('submit.csv', index=False)","b57e703a":"## **\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432**","79318b45":"## **\u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test**","05c1d6be":"## **\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**","441b9d46":"**\u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c**","65aee76e":"**\u041e\u0431\u0437\u043e\u0440 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","49f4ecae":"\u0415\u0441\u0442\u044c 400 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 [6000, 8000], \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 5543 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 [500, 750].\n\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 FICO\nA credit score is a number between 300\u2013850 that depicts a consumer's creditworthiness. https:\/\/www.investopedia.com\/terms\/c\/credit_score.asp\n\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 850 \u043d\u0430 10.","2d4b7835":"\u0435\u0441\u0442\u044c 870 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c.  \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443","a39e88af":"Home ownership","98691cf3":"**\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","8a05dab5":"* Credit Score\n* Current Loan Amount \n* Maximum Open Credit\n* Months since last delinquent","307b19dd":"**\u041e\u0431\u0437\u043e\u0440 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","a4a061ba":"\u0442.\u043a. \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 50+% \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u043c \u0438 \u0434\u0440\u043e\u043f\u043d\u0435\u043c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.","c7e5c780":"\u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f Current Loan Amount = 99 999 999.00.  \u043f\u0440\u0438\u043c\u0435\u043c \u0435\u0433\u043e \u0437\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442","86b08d2d":"## **\u043e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","a8ca2afe":"### **\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432**","cdfe6cea":"**\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","38b26b3d":"**Annual Income**","b958ad52":"* Annual Income\n* Years in current job\n* Months since last delinquent\n* Bankruptcies\n* Credit Score","1b804c02":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","1e61d6a9":"Credit Score- \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438:\n    * Excellent: 800 to 850\n    * Very Good: 740 to 799\n    * Good: 670 to 739\n    * Fair: 580 to 669\n    * Poor: 300 to 579","17cb1ba3":"**Maximum Open Credit - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0431\u044b\u043b\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 (\u0435\u0441\u0442\u044c 1 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1.3 \u043c\u043b\u0440\u0434)**","eb638f16":"## **\u041a\u043b\u0430\u0441\u0441\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445**","d11af605":"fill with mode","0e838cac":"### **\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","a2c541e3":"**Credit Score**","5c8fdff7":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n* **Home Ownership** - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n* **Annual Income** - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n* **Years in current job** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n* **Tax Liens** - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n* **Number of Open Accounts** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n* **Years of Credit History** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n* **Maximum Open Credit** - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0431\u044b\u043b\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n* **Number of Credit Problems** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n* **Months since last delinquent** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n* **Bankruptcies** - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n* **Purpose** - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Term** - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* **Current Loan Amount** - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n* **Current Credit Balance** - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442 \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430)\n* **Monthly Debt** - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n* **Credit Score** - \u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\n* **Credit Default** - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)","bb1c45bf":"## **\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438**","3895597e":"### \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","48dc55da":"**Bankruptcies**","ac7c7eec":"**Months since last delinquent**","2226b628":"## **\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438**","bddbc2f6":"Term - \u0437\u0430\u043c\u0435\u043d\u0430 \u043d\u0430 Long Term: 1-\u0434\u0430, 0-\u043d\u0435\u0442","200fcd37":"**Months since last delinquent**","522ed2d4":"**1. \u041e\u0431\u0437\u043e\u0440 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**","2be1ca42":"**Credit Score**","98b6c19a":"### **\u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435**","c30d72a7":"\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439","2772b2f9":"**\u041e\u0431\u0437\u043e\u0440 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439**","bf2230f9":"**Current Loan Amount**","7b91c111":"### **\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**","89487564":"Years in current job - \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0443 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438:<3, 4-6, 7-9, 10+ \u043b\u0435\u0442","8bd41fa2":"**Years in current job**"}}