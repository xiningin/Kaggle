{"cell_type":{"4072698a":"code","61683b58":"code","8b32f22a":"code","46296dba":"code","140f292f":"code","f74e8e4b":"code","00e4c910":"code","2b951d18":"code","48f68351":"code","a7b9f0f5":"code","47c93e06":"code","b56b78ad":"code","4fb7bc85":"code","5f6a065b":"code","95d6e5c3":"code","db45958a":"code","e57ab808":"markdown"},"source":{"4072698a":"import itertools\n\nimport pickle\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder, LabelBinarizer, StandardScaler\n\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split, cross_validate","61683b58":"np.random.seed(42)","8b32f22a":"df = pd.read_csv('..\/input\/online_shoppers_intention.csv')\ndf.head()","46296dba":"df.shape","140f292f":"label_encoder = LabelEncoder()\nlabel_binarizer = LabelBinarizer()\n\ndf['VisitorType'] = label_encoder.fit_transform(df['VisitorType'].values)\ndf['Weekend'] = label_binarizer.fit_transform(df['Weekend'].values)\ndf['Revenue'] = label_binarizer.fit_transform(df['Revenue'].values)\n\ndf = pd.concat([\n    df[df.columns[:-1]],\n    pd.get_dummies(df['Month'], prefix='Month_'),\n    df['Revenue']],\n    axis=1)\n\ndf = df.drop('Month', 1)","f74e8e4b":"df.head()","00e4c910":"df.describe()","2b951d18":"missing_val_count_by_column = (df.isnull().sum())\nmissing_vals_columns = missing_val_count_by_column[\n    missing_val_count_by_column > 0].keys()\n\nsimple_imputer = SimpleImputer(strategy = 'mean')\ndf[missing_vals_columns] = simple_imputer.fit_transform(\n    df[missing_vals_columns])","48f68351":"features = df.columns[:-1]\n\nX = df[features]\ny = df['Revenue']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y)","a7b9f0f5":"dummy_classifier = DummyClassifier()\ndummy_classifier.fit(X_train, y_train)\ndummy_classifier.score(X_test, y_test)","47c93e06":"scaler = StandardScaler()\nmodel = DecisionTreeClassifier(max_depth = 5)\n\npipeline = Pipeline(steps=[('preprocessor', scaler),('estimator', model)])","b56b78ad":"cv = StratifiedKFold(n_splits=10, shuffle = True)\nscores = cross_validate(pipeline, X, y, cv=cv, n_jobs=-1, return_train_score=True, return_estimator=True)","4fb7bc85":"scoresdf = pd.DataFrame(scores)\nscoresdf = scoresdf.rename({\n    'test_score': 'test score',\n    'train_score': 'train score'\n}, axis=1)\n\nscoresdf.head()","5f6a065b":"mean = scoresdf['test score'].mean()\nstd = scoresdf['test score'].std()\n\n(mean - 2 * std, mean + 2 * std)","95d6e5c3":"fig, ax = plt.subplots(figsize=(15,5))\n\nscore_plot = sns.lineplot(data=scoresdf[['test score', 'train score']], marker='o', ax=ax)\nscore_plot.set_title('Scores')\n\nax.set(xticks=scoresdf.index, xlim=(scoresdf.index[0], scoresdf.index[-1]))\nfig.show()","db45958a":"scoresdf['distance'] = abs(scoresdf['test score'] - scoresdf['train score'])\nindex = scoresdf[scoresdf['distance'].min() == scoresdf['distance']].index[0]\n\nclassifier = scores['estimator'][index]\npickle.dump(classifier, open('model.h5', 'wb'))","e57ab808":"$$\\text{confidence interval (CI)} = [\\mu - \\sigma, \\mu + \\sigma]$$"}}