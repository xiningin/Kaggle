{"cell_type":{"ff5d1edb":"code","93f4be21":"code","1bee64c8":"code","b3ec0d30":"code","2845636e":"code","6865a1fa":"code","a91d536a":"code","59177fca":"code","ecb5e804":"code","32883b7e":"code","ab18dd96":"code","48fe32df":"code","36753727":"code","5d432227":"code","29d2bd42":"code","67d88349":"code","2c4df86f":"code","beb90d5d":"code","148a5228":"code","1cfea1a8":"code","ce058ded":"markdown","f8f089a8":"markdown","422a16c2":"markdown"},"source":{"ff5d1edb":"# ==================\n# \u30e9\u30a4\u30d6\u30e9\u30ea\n# ==================\nimport pandas as pd\nimport numpy as np\nimport torch\nimport transformers\nfrom transformers import BertTokenizer\nfrom tqdm import tqdm\nfrom sklearn.decomposition import TruncatedSVD\ntqdm.pandas()","93f4be21":"df_wiki = pd.read_csv(\"..\/input\/data-science-autumn-2021\/train.csv\") \ndf_wiki2 = pd.read_csv(\"..\/input\/data-science-autumn-2021\/test.csv\") ","1bee64c8":"df_wiki.head()","b3ec0d30":"df_wiki2.head()","2845636e":"class BertSequenceVectorizer:\n    def __init__(self):\n        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'\n        self.model_name = 'bert-base-uncased'\n        self.tokenizer = BertTokenizer.from_pretrained(self.model_name)\n        self.bert_model = transformers.BertModel.from_pretrained(self.model_name)\n        self.bert_model = self.bert_model.to(self.device)\n        self.max_len = 128\n\n\n    def vectorize(self, sentence : str) -> np.array:\n        inp = self.tokenizer.encode(sentence)\n        len_inp = len(inp)\n\n        if len_inp >= self.max_len:\n            inputs = inp[:self.max_len]\n            masks = [1] * self.max_len\n        else:\n            inputs = inp + [0] * (self.max_len - len_inp)\n            masks = [1] * len_inp + [0] * (self.max_len - len_inp)\n\n        inputs_tensor = torch.tensor([inputs], dtype=torch.long).to(self.device)\n        masks_tensor = torch.tensor([masks], dtype=torch.long).to(self.device)\n\n        bert_out = self.bert_model(inputs_tensor, masks_tensor)\n        seq_out, pooled_out = bert_out['last_hidden_state'], bert_out['pooler_output']\n\n        if torch.cuda.is_available():    \n            return seq_out[0][0].cpu().detach().numpy() # 0\u756a\u76ee\u306f [CLS] token, 768 dim \u306e\u6587\u7ae0\u7279\u5fb4\u91cf\n        else:\n            return seq_out[0][0].detach().numpy()","6865a1fa":"BSV = BertSequenceVectorizer() # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\ndf_wiki['description'] = df_wiki['description'].fillna(\"NaN\") # null \u306f\u4ee3\u308f\u308a\u306e\u3082\u306e\u3067\u57cb\u3081\u307e\u3059\ndf_wiki['description_feature'] = df_wiki['description'].progress_apply(lambda x: BSV.vectorize(x))\ndf_wiki2['description'] = df_wiki2['description'].fillna(\"NaN\") # null \u306f\u4ee3\u308f\u308a\u306e\u3082\u306e\u3067\u57cb\u3081\u307e\u3059\ndf_wiki2['description_feature'] = df_wiki2['description'].progress_apply(lambda x: BSV.vectorize(x))","a91d536a":"bert_array = np.zeros([len(df_wiki),768])\nfor n,i in enumerate(df_wiki['description_feature']):\n    bert_array[n,:] = i","59177fca":"bert_array2 = np.zeros([len(df_wiki2),768])\nfor n,i in enumerate(df_wiki2['description_feature']):\n    bert_array2[n,:] = i","ecb5e804":"svd = TruncatedSVD(n_components=50)\nX = svd.fit_transform(bert_array)\ndf_train = pd.DataFrame(X, columns=[f\"description_bert_svd_{i}\" for i in range(50)])","32883b7e":"svd2 = TruncatedSVD(n_components=50)\nX2 = svd2.fit_transform(bert_array2)\ndf_test = pd.DataFrame(X2, columns=[f\"description_bert_svd_{i}\" for i in range(50)])","ab18dd96":"df_train.to_csv(\"train_description_bert.csv\",index=False)","48fe32df":"df_test.to_csv(\"test_description_bert.csv\",index=False)","36753727":"df_train2 = pd.concat([df_wiki,df_train],axis=1)","5d432227":"df_test2 = pd.concat([df_wiki2,df_test],axis=1)","29d2bd42":"df_train2.to_csv(\"train2.csv\",index=False)","67d88349":"df_test2.to_csv(\"test2.csv\",index=False)","2c4df86f":"df_train.head()","beb90d5d":"df_test.head()","148a5228":"df_train2.head()","1cfea1a8":"df_test2.head()","ce058ded":"### BERT\u3092\u4f7f\u3063\u3066\u3001text\u30c7\u30fc\u30bf\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3057\u307e\u3059\nhttps:\/\/huggingface.co\/transformers\/model_doc\/bert.html <br>\n\n\u30c7\u30fc\u30bf\u5206\u6790\u306e\u30b3\u30f3\u30da\u3067\u306f\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u306b\u3088\u304fBERT\u306f\u4f7f\u308f\u308c\u307e\u3059 <br>\n\u4e0b\u8a18URL\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059<br>\nhttps:\/\/www.guruguru.science\/competitions\/16\/discussions\/fb792c87-6bad-445d-aa34-b4118fc378c1\/\n\nSettings\u3067\u4e0b\u8a18\u8a2d\u5b9a\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n- Accelerator\u3092GPU\n- Internet\u3092ON","f8f089a8":"# \u4e0a\u624b\u304f\u3067\u304d\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002","422a16c2":"## \u7b2c3\u56de\u306b\u7d39\u4ecb\u3057\u3066\u9802\u3044\u305f\u5185\u5bb9\u306e\u30b3\u30d4\u30fc\n\n\u8a73\u7d30\u306f\u4e0b\u8a18URL\u3078\n\nhttps:\/\/www.kaggle.com\/risatk\/bert-text\n\n\u7b2c2\u56de\u306f\u4e0b\u8a18URL\u3067\u3059\u3002\nhttps:\/\/www.kaggle.com\/takoihiraokazu\/bert-text"}}