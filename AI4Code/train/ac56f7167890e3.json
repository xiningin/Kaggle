{"cell_type":{"58816181":"code","00468a24":"code","595df915":"code","7029f787":"code","117680d2":"code","2fc1fa63":"code","c24bb55e":"code","dd48213d":"code","0f044d63":"code","9c1efa5e":"code","dbfbae4b":"code","660928c9":"code","4cfa4a18":"code","aad2753c":"code","8894be36":"code","65a9c317":"code","eb4b0c6a":"code","47f98f00":"code","a393a5fc":"code","e06dd7b5":"code","68b22563":"code","cdd240f3":"code","8c8333a0":"code","2123ad98":"code","9602c265":"code","e4f9bfa2":"code","0c6647a4":"code","9d5be26e":"code","c09cfeb8":"code","06550e0b":"code","260b94fa":"code","bf2c5e96":"markdown","6be575b3":"markdown","1c65df4b":"markdown","b9b4d94f":"markdown","69d47436":"markdown","661db961":"markdown","5fc505ee":"markdown","552a9a6b":"markdown","8d762ab9":"markdown","4ce4cf86":"markdown","b29b5dc2":"markdown","be826c1c":"markdown","d830b05b":"markdown","8a3c0df3":"markdown","7475426b":"markdown","8dee67e0":"markdown","63490a50":"markdown","9ce2f0de":"markdown","069226af":"markdown"},"source":{"58816181":"!pip install -q scanpy\n\nimport scanpy as sc\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import adjusted_rand_score\nfrom matplotlib import pyplot as plt\n# magic incantation to help matplotlib work with our jupyter notebook\n%matplotlib inline ","00468a24":"adata = sc.read('..\/input\/scrnaseq-analysis-model-outputs\/brain_normalized\/brain_normalized.h5ad')","595df915":"adata.var.head()","7029f787":"adata.obs.head()","117680d2":"adata.X.shape","2fc1fa63":"sc.tl.tsne(adata, perplexity=30, learning_rate=1000, random_state=0)  # add X_tsne in obsm\n\nsc.pl.tsne(adata, color='cell_ontology_class')  # Plots using X_tsne which is tSNE coordinates of data.","c24bb55e":"adata","dd48213d":"sc.pp.neighbors(adata) # UMAP is based on the neighbor graph; we'll compute this first\n# |_ Compute a neighborhood graph of observations\n# Depending on copy, updates or returns adata with the following: connectivities and distances.\nsc.tl.umap(adata, min_dist=0.5, spread=1.0, random_state=1, n_components=2)  # # add X_umap in obsm","0f044d63":"sc.pl.umap(adata, color='cell_ontology_class')","9c1efa5e":"adata","dbfbae4b":"adata.X.shape","660928c9":"adata.write('brain_embeddings.h5ad')","4cfa4a18":"adata = sc.read('brain_embeddings.h5ad')","aad2753c":"import scanpy as sc\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import adjusted_rand_score\nfrom matplotlib import pyplot as plt\n%matplotlib inline","8894be36":"adata","65a9c317":"umap_coordinates = adata.obsm['X_umap'] # extract the UMAP coordinates for each cell\nkmeans = KMeans(n_clusters=4, random_state=0).fit(umap_coordinates) # fix the random state for reproducibility\n\nadata.obs['kmeans'] = kmeans.labels_ # retrieve the labels and add them as a metadata column in our AnnData object\nadata.obs['kmeans'] = adata.obs['kmeans'].astype(str)\n\nsc.pl.umap(adata, color='kmeans') # plot the results, Ploting the umap with the color as the cluster label","eb4b0c6a":"print(kmeans.labels_)\nadata.obs.head()","47f98f00":"adata.obs['cell_ontology_class'].unique()","a393a5fc":"rand_index = adjusted_rand_score(labels_true = adata.obs['cell_ontology_class'], labels_pred = adata.obs['kmeans'])\nprint('The Rand index is', round(rand_index, 2))","e06dd7b5":"# Saving this results with column_name = kmeans_7\n\numap_coordinates = adata.obsm['X_umap'] # extract the UMAP coordinates for each cell\nkmeans = KMeans(n_clusters=7, random_state=0).fit(umap_coordinates) # fix the random state for reproducibility\n\nadata.obs['kmeans_7'] = kmeans.labels_ # retrieve the labels and add them as a metadata column in our AnnData object\nadata.obs['kmeans_7'] = adata.obs['kmeans_7'].astype(str)\n\nsc.pl.umap(adata, color='kmeans_7') # plot the results, Ploting the umap with the color as the cluster label","68b22563":"rand_index = adjusted_rand_score(labels_true = adata.obs['cell_ontology_class'], labels_pred = adata.obs['kmeans_7'])\nprint('The Rand index is', round(rand_index, 2))","cdd240f3":"!pip install louvain","8c8333a0":"from scanpy.tl import louvain\nlouvain(adata)  # Cluster cells into subgroups # adata.obs['louvain']\nsc.pl.umap(adata, color='louvain')","2123ad98":"adata.obs.head()\n# louvain column is added","9602c265":"adata","e4f9bfa2":"rand_index = adjusted_rand_score(adata.obs['cell_ontology_class'], adata.obs['louvain'])\nprint('The rand index is ', round(rand_index, 2))","0c6647a4":"louvain(adata, resolution = 0.1)  # Cluster cells into subgroups # adata.obs['louvain']\nsc.pl.umap(adata, color='louvain')\n\nrand_index = adjusted_rand_score(adata.obs['cell_ontology_class'], adata.obs['louvain'])\nprint('The rand index is ', round(rand_index, 2))","9d5be26e":"cerebellum = adata[adata.obs['subtissue'] == 'Cerebellum']\nsc.pp.neighbors(cerebellum)\nsc.tl.umap(cerebellum)\n\nsc.tl.louvain(cerebellum)\nsc.pl.umap(cerebellum, color='louvain')","c09cfeb8":"cerebellum","06550e0b":"sc.tl.louvain(adata, resolution=0.1)\nadata.write('brain_clusters.h5ad')","260b94fa":"!zip \"brain_clusters.zip\" \".\/brain_clusters.h5ad\"","bf2c5e96":"### Loading the Normalized data","6be575b3":"<br>\n<h1 style = \"font-size:60px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">Dimensionality reduction & Clustering in Single cell RNA-seq data<\/h1>\n<br>\n\n<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Dimensionality Reduction<\/h1>\n\n- Dimensionality reduction methods seek to take a large set of variables and return a smaller set of components that still contain most of the information in the original dataset. \n- This implies an inherent tradeoff between information loss and improved interpretability: all dimensionality reduction methods discard some information, but they also play an important role in helping us make sense of a giant matrix of values.\n\nWe already saw one example of dimensionality reduction in PCA in the <a href=\"https:\/\/www.kaggle.com\/hrishikeshp\/3-normalization-and-pca-in-scrna-seq-data\">previous notebook<\/a> \n\nLet's look at two other common approaches to dimensionality reduction: tSNE and UMAP.\n\n# tSNE \n- tSNE (t-Distributed Stochastic Neighbor Embedding) combines dimensionality reduction (e.g. PCA) with random walks on the nearest-neighbour network to map high dimensional data (i.e. our 18,585 dimensional expression matrix) to a 2-dimensional space. \n- In contrast with PCA, tSNE can capture nonlinear structure in the data, and tries to preserve the local distances between cells. - - Due to the non-linear and stochastic nature of the algorithm, tSNE is more difficult to intuitively interpret: while tSNE faithfully represents local relationships, it doesn't always capture the relatioships between more distant cells correctly.\n-  The method when run multiple times on the same dataset will result in different plots because tSNE is a stochastic algorithm. \n- To ensure reproducibility, we fix the \"seed\" of the random-number generator in the code below so that we always get the same plot.","1c65df4b":"Here, we see that tSNE generally does a good job of grouping similar cell types together (much better than PCA alone), but there are still some neurons that are not grouped together.","b9b4d94f":"- The Rand Index computes a similarity measure between two clusterings by considering all pairs of samples and counting pairs that are assigned in the same or different clusters in the predicted and true clusterings.\n- The adjusted Rand index is thus ensured to have a value close to 0.0 for random labeling independently of the number of clusters and samples and exactly 1.0 when the clusterings are identical (up to a permutation).\n- **Higher the score, better the clustering**","69d47436":"**Try rerunning k-means clustering with several different values of k.**\n- **Lets try with K=7 as the total cell types is also 7**","661db961":"Here, we see that UMAP generally does a a better job of grouping like cells together and achieving clean separation between cell types. \n\nLet's save our anndata object with our new embeddings to file for later use.","5fc505ee":"You can see that adata.obsm is updated with X_tsne which is tSNE coordinates of data.","552a9a6b":"## Evaluating clustering \n\n- Intuitively, **we can see from the plot that our value of k (the number of clusters) is probably too low.**\n- This dataset has **\"ground truth\" cell type labels available (This might not be with every case) We can use these to assess our cluster labels a bit more rigorously using the adjusted Rand index.**  \n- This index is a measure between (0, 1) which indicates the similarity between two sets of categorical labels (e.g., our cell type labels and cluster labels). A value of 1 means the two clusterings are identical, and 0 means the level of similarity expected by random chance.","8d762ab9":"# k-means - Applied on UMAP\n- In k-means clustering, the goal is to partition N cells into k different clusters. This is done in an iterative manner, cluster centers are assigned and each cell is assigned to its nearest cluster:\n- Let's try this out on the umap representation of our dataset. Scanpy doesn't include a method for k-means clustering, so we'll extract the umap coordinates that we calculated earlier and use scikit-learn for this task instead.","4ce4cf86":"\nhttps:\/\/chanzuckerberg.github.io\/scRNA-python-workshop\/preprocessing\/01-basic-qc.html","b29b5dc2":"<br>\n<h1 style = \"font-size:60px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">Summary<\/h1>\n<br>\n\n#### Dimensionality Reduction\n1. tSNE\n2. UMAP\n\n#### Clustering\n- **k-Means Clustering** on tSNE\n- Evaluating the k-means clustering\n- Playing with the No of cluster in k-means\n- **Graph Based Clustering Method** - Louvain \n- Tuning the resolution parameter\n- Observing clusters in cells of a particular subtissue\n- Saving the adata\n","be826c1c":"We see that the score does not improve.","d830b05b":"- **The low rand index with the default resolution parameter is quite low (0.34), but this increases to 0.9 when we set resolution to a lower value of 0.1.**\n- Lower resolution means finding larger and more coarse clusters","8a3c0df3":"### Installations","7475426b":"# UMAP \n- UMAP (Uniform Approximation and Projection) is another nonlinear dimensionality reduction method. \n- Like tSNE, UMAP is nondeterministic and requires that we fix the random seed to ensure reproducibility. \n- While tSNE optimizes for local structure, UMAP tries to balance the preservation of local and global structure. For this reason, we prefer UMAP over tSNE for exploratory analysis and general visualization.","8dee67e0":"# Graph-based methods \n- Graph-based methods attempt to partition a pre-computed neighhbor graph into modules (i.e., groups \/ clusters of cells) based on their connectivity. \n- Currently, the most widely used graph-based methods for single cell data are variants of the louvain algorithm. The intuition behind the louvain algorithm is that it looks for areas of the neighbor graph that are more densely connected than expected (based on the overall connectivity in the graph).\n![image.png](attachment:84023260-87e7-496c-87ee-47c69b93b271.png)","63490a50":"- Sometimes, we may want to look at clusters within a given tissue or cell type designation. This can surface interesting heterogeneity between subpopulations, although it can also make our results more noisy.\n- **Looking into the cells having Cerebellum subtissue.**","9ce2f0de":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Clustering<\/h1>\n\n- Grouping cells based on the similarity of their expression profiles allows us to identify cell types and states, as well as infer differences between groups. This is done either via clustering or community detection.\n\n- Some of the most popular approaches are hierarchical clustering and k-means clustering. These methods compute a **distance metric between cells (often based on a low-dimensional representation, such as PCA, tSNE or UMAP), and then iteratively group cells together based on these distances.**\n\n- **Community detection methods (also referred to as 'graph-based clustering') partition the neighbor graph. The neighbor graph treats each cell as a node, with edges connecting each node to its k nearest neighbors (based on similar distance metrics described above). The graph is then partitioned into modules based on these connectivities. These methods are typically faster than other clustering methods with similar effectiveness.**\n\n- All clustering or community detection methods have is a resolution parameter that controls how fine- or coarse-grained the inferred clusters are. This parameter can have major effects on your results.\n\n- Here, we'll explore k-means clustering and the graph-based louvain clustering method.","069226af":"### Saving the Clustered adata"}}