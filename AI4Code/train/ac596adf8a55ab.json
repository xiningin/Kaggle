{"cell_type":{"f955d972":"code","ec52757c":"code","f2afb0a4":"code","4b169365":"code","41906844":"code","9c3d3cf8":"code","c8137caa":"code","aaf980eb":"code","444e2a23":"code","d2f0c4d3":"code","5e300bd1":"code","ec96c7ca":"code","65beddc1":"code","aaa216e9":"code","a4e88978":"code","f21098f2":"code","987304fb":"code","e9af36fb":"code","9659bb3b":"code","04e0f0f0":"code","420d0c4d":"markdown"},"source":{"f955d972":"import numpy as np\nimport pandas as pd\nimport os","ec52757c":"import matplotlib.pyplot as plt\n%matplotlib inline\nfrom glob import glob\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, BatchNormalization, Dropout\nfrom sklearn.model_selection import train_test_split","f2afb0a4":"path = \"..\/input\/diabetic-retinopathy-resized\/resized_train\/resized_train\"","4b169365":"data = \"..\/input\/diabetic-retinopathy-resized\/resized_train\/resized_train\"\nprint('number of images in total - ',len(os.listdir(data)))","41906844":"index = pd.read_csv(\"..\/input\/diabetic-retinopathy-resized\/trainLabels.csv\") \nprint('number of images in total - ',len(index))","9c3d3cf8":"index.head()","c8137caa":"#format correctly\nindex['image_name'] = [i+\".jpeg\" for i in index['image'].values]\nindex['level_binary'] = [i for i in index['level'].values]\n\n# for i in range(len(index.level)):\n#     if index['level'][i] == 0:\n#         index['level_binary'][i] = 0\n#     else:\n#         index['level_binary'][i] = 1\n    \nindex.head(10)","aaf980eb":"index.info()","444e2a23":"temp = path + '\/10_left' + '.jpeg'\n\nplt.imshow(plt.imread(temp))","d2f0c4d3":"temp = path + '\/10_left' + '.jpeg'\n\nplt.imshow(plt.imread(temp))","5e300bd1":"plt.imread(temp).shape","ec96c7ca":"train, val = train_test_split(index, test_size=0.2,random_state=42,stratify=index[\"level\"])\n","65beddc1":"train.shape, val.shape","aaa216e9":"train_datagen = ImageDataGenerator(rescale            = 1\/255,\n                                   shear_range        = 0.2,\n                                   zoom_range         = 0.2,\n                                   horizontal_flip    = True,\n                                   rotation_range     = 40,\n                                   width_shift_range  = 0.2,\n                                   height_shift_range = 0.2)\n\nval_datagen = ImageDataGenerator(rescale = 1\/255)","a4e88978":"train_set = train_datagen.flow_from_dataframe(\n    train,\n    \"..\/input\/diabetic-retinopathy-resized\/resized_train\/resized_train\",\n    x_col=\"image_name\",\n    y_col=\"level\",\n    class_mode=\"raw\",\n    color_mode=\"rgb\",\n    batch_size=32,\n    target_size=(64, 64))\n\nval_set = val_datagen.flow_from_dataframe(\n    val,\n    \"..\/input\/diabetic-retinopathy-resized\/resized_train\/resized_train\",\n    x_col=\"image_name\",\n    y_col=\"level\",\n    class_mode=\"raw\",\n   color_mode=\"rgb\",\n    batch_size=32,\n    target_size=(64, 64))","f21098f2":"model = Sequential()\n\nmodel.add(Conv2D(128, (3, 3), activation='relu', input_shape=(64, 64, 3), padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(5, activation = 'softmax'))","987304fb":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","e9af36fb":"model.summary()","9659bb3b":"model_train = model.fit(\n    train_set,\n    #steps_per_epoch = 200,\n    epochs = 5,\n    validation_data = val_set,\n    verbose=1\n   # validation_steps = 100\n)","04e0f0f0":"epochs=range(1,len(model_train.history['val_loss'])+1)\n\nplt.title('model accuracy')\nplt.plot(epochs,model_train.history['accuracy'])\nplt.plot(epochs,model_train.history['val_accuracy'])\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='best')\nplt.show()\n\nplt.plot(epochs,model_train.history['loss'])\nplt.plot(epochs,model_train.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='best')\nplt.show()","420d0c4d":"# Data Visualization"}}