{"cell_type":{"a9d4f642":"code","aa0dfd5f":"code","0c61136e":"code","7c49d1a4":"code","13208140":"code","61876d31":"code","33ad8576":"code","bdad4737":"code","4af9c6d8":"code","0c285308":"code","e927d3ee":"code","d60659b0":"code","73f58048":"code","064e5479":"code","179f0c4a":"code","d367df11":"code","349ff2e0":"code","18ed3f1f":"code","490c5f0a":"code","759a3a1f":"code","04089dbd":"code","ce1a84f5":"code","d2777831":"code","e16f73cd":"code","6453706c":"code","f4d295ec":"code","e47e5dbe":"code","f948041c":"code","bebc93bc":"code","76a9c964":"code","178485c0":"code","8ffab144":"code","1d8abd8f":"code","9b8410d3":"code","e2a36baf":"code","b20765ba":"code","088ff356":"markdown","8ef2d030":"markdown","6d9fecc7":"markdown","68ff1591":"markdown","1dda8fdd":"markdown","1e075536":"markdown","5d78a3b1":"markdown","33e3d55b":"markdown","950998eb":"markdown"},"source":{"a9d4f642":"import os\nimport datetime\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","aa0dfd5f":"cwd = os.getcwd()\nos.chdir(r'\/kaggle\/input\/titanic')\nos.listdir()","0c61136e":"df_train = pd.read_csv('train.csv')\ndf_test  = pd.read_csv('test.csv')","7c49d1a4":"# df_train.info()\nprint(f'The training dataset has {df_train.shape[1]} attributes for {df_train.shape[0]} rows' )\nfor i in df_train.columns:\n    print(\"Attribute {:11s} has {:4.3} % records with nulls.\".format(i,(df_train[i].isna().sum()\/df_train.shape[0]) * 100))","13208140":"df_train.describe()","61876d31":"print(df_train['Sex'].unique())\nprint(df_train['Embarked'].unique())","33ad8576":"# There are two passangers with missing Embarked station code. Trying to fill the NaNs in column \"Embarked\"\ndf_train[df_train['Embarked'].isna()]","bdad4737":"# There are only two passangers with cabin code = B28 and none of them have Embarked station code. Hence Cabin code is not useful to find missing \n# values\ndf_train[df_train['Cabin']=='B28']","4af9c6d8":"sns.boxplot(df_train['Embarked'].dropna(), df_train['Fare'])","0c285308":"sns.distplot(df_train['Fare'], bins=50)","e927d3ee":"df_train['Embarked'].fillna(value='C', inplace=True)\ndf_train[df_train['Cabin']=='B28']\ndf_train['Sex'].replace({'male':0,'female':1}, inplace=True)\ndf_train['Embarked'].replace({'S':0,'C':1,'Q':2}, inplace=True)\ndf_train.head()","d60659b0":"sns.set(style=\"darkgrid\")\nsns.countplot('Survived',hue='Sex', data=df_train)\n# Observation:\n# Most of the deceased passengers were males.","73f58048":"sns.catplot(x=\"Pclass\", hue=\"Sex\", col=\"Survived\", data=df_train, kind=\"count\")\n# Observation\n# Lower class passengers lost their lives the most\n# Higher class female passenger survived the most","064e5479":"# df_train.head()\nsns.distplot(df_train['Age'].dropna())\nprint(\"Mean age = \", np.mean(df_train['Age'].dropna()))\nprint(\"Median age = \", np.median(df_train['Age'].dropna()))","179f0c4a":"sns.countplot(x='SibSp', hue='Survived', data=df_train)\n# Observation\n# Most of the victims were Single men\/women.","d367df11":"# Visual analysis of missing values\nsns.heatmap(df_train.isnull(), yticklabels=False, cbar=False, cmap=\"viridis\")\n# Observation\n# All yellow lines indicate missing data point. Cabin attribute has many missing values. Age attibute also has some missing values.","349ff2e0":"# Which age group suffered the most?\nsns.boxplot(x='Pclass', y='Age', data=df_train, hue='Survived')\n# Observation\n# Higher class passengers were older compared to lower class\n# Older people from each class died more in numbers","18ed3f1f":"def impute_age(columns):\n    #print(columns)\n    if not pd.isnull(columns[1]):\n        return columns[1]\n    else:\n        return round(df_train[df_train['Pclass'] == columns[0]]['Age'].mean(),2)\ndf_train['New_Age'] = df_train[['Pclass','Age']].apply(impute_age, axis=1)\ndf_train[df_train['Age'].isnull()].head()","490c5f0a":"df_train.drop(['Name','Age','Ticket','Cabin'], axis=1, inplace=True)\ndf_train.head()","759a3a1f":"# Checking the heatmap of the train dataset again to confirm that there are no more missing values\nsns.heatmap(df_train.isnull(), yticklabels=False, cmap='viridis')","04089dbd":"def impute_age1(columns):\n    #print(columns)\n    if not pd.isnull(columns[1]):\n        return columns[1]\n    else:\n        return round(df_test[df_test['Pclass'] == columns[0]]['Age'].mean(),2)\n\ndf_test  = pd.read_csv('test.csv')\ndf_test['Sex'].replace({'male':0, 'female':1}, inplace=True)\ndf_test['Embarked'].replace({'S':0,'C':1,'Q':2}, inplace=True)\ndf_test['New_Age'] = df_test[['Pclass','Age']].apply(impute_age1, axis=1)\ndf_test.drop(['Name','Age','Ticket','Cabin'], axis=1, inplace=True)\ndf_test.head()","ce1a84f5":"# Confirming that there are no more nulls in the test dataset\nsns.heatmap(df_test.isnull(), yticklabels=False)","d2777831":"print(df_test.info())\nprint(\"Record with nulls : \")\nprint(df_test[df_test.isin([np.nan, np.inf, -np.inf]).any(1)])\n# Shows that there is one row with nulls in the Fare column\n# Dropping this row from the test dataset\n# df_test.dropna(inplace=True)\nprint(df_test.info())","e16f73cd":"df_test[df_test['Pclass']==3]['Fare'].median() #7.8958\ndf_test[df_test['Pclass']==3]['Fare'].mean() #12.459677880184334\npd.DataFrame(df_test[df_test['Pclass']==3]['Fare']).describe()","6453706c":"# df_test.set_value(1044,'Fare', 12.46)\ndf_test.at[152,'Fare']= 12.46","f4d295ec":"df_test.iloc[152]","e47e5dbe":"Y = df_train['Survived']\nX = df_train.drop('Survived', axis=1)","f948041c":"lg_model = LogisticRegression()\nlg_model.fit(X, Y)\n\n# Predicting the Survived class of test dataset\ndf_test['predicted_survived'] = lg_model.predict(df_test)\ndf_test.head()","bebc93bc":"df_submit = df_test[['PassengerId', 'predicted_survived']]","76a9c964":"df_submit.columns=['PassengerId','Survived']","178485c0":"import os\nos.getcwd()\nos.chdir('\/kaggle\/working')\nos.listdir()","8ffab144":"df_submit.to_csv('titanic_submission_Logistic_regression.csv')","1d8abd8f":"os.listdir()","9b8410d3":"lg_model.score(X, Y)\n# This indicates that this model can explaing 80% of the variation in the data","e2a36baf":"sns.set(style=\"darkgrid\")\nsns.countplot('predicted_survived',hue='Sex', data=df_test)\n# Observation:\n# Most of the deceased passengers were males.\n\nsns.catplot(x=\"Pclass\", hue=\"Sex\", col=\"predicted_survived\", data=df_test, kind=\"count\")\n# Observation\n# Lower class passengers lost their lives the most\n# Higher class female passenger survived the most","b20765ba":"df_test.shape","088ff356":"### Validating the predictions with visualizations:\n- These visualizations are in accordance with the observations drawn from the training data set","8ef2d030":"## Performing EDA and Feature Engineering on the training data set","6d9fecc7":"## Applying same data cleanup and formatting steps to \"Test\" data set. \nTechnically we could have concatenated test dataset with training dataset and performed this activity just one. But in practical scenarios we can have a different test dataset in future on which similar analysis is needed. Hence handling test dataset separately.  \n\n- Convert Sex column to a categorical\/numeric column\n- Convert Embarked column to a categorical\/numeric column\n- Impute age \n- Drop columns : 'Name','Age','Ticket','Cabin'","68ff1591":"### Imputing data in Age attribute\n- Using mean age of the price class to impute the age for missing passengers\n- This is to have values in age column without losing the mean of existing age data","1dda8fdd":"### Importing all required Python libraries","1e075536":"## This kernel performs simple logistic regression on the titanic dataset and predicts survival of passengers from test dataset","5d78a3b1":"## Model creation for logistic regression","33e3d55b":"### Further steps :\n- Checking regression metrics\n    - Confusion matrix\n    - Classification report\n- Feature engineering on Name, Ticket attributes\n- Testing different imputation methods\n- Testing pd.get_dummies() function instead of categorical columns","950998eb":"### Dropping all unnecessary attributes from the training dataset\n- Name   : Character values which might not have impact on survival output\n- Age    : Imputed age in new column \"New_Age\"\n- Ticket : Character values without a fixed pattern\n- Cabin  : Many records don't have data in this column. Imputation is feasible."}}