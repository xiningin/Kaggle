{"cell_type":{"318aca1b":"code","830e688e":"code","7389461d":"code","02c47bb1":"code","fdf6abe1":"code","a6acb2ae":"code","3ecb2f63":"code","5f98015b":"code","94e502fd":"code","49f673a6":"code","90545a36":"code","527f2466":"code","e4479c20":"code","2835435c":"code","ea15a53a":"code","282efb6b":"code","b977effb":"code","f9f3ac04":"code","ffa54332":"code","a1bac8be":"code","3733b3e8":"code","43a94c0f":"code","8d468892":"code","e8836844":"code","a221fa43":"code","53c08a2b":"code","7f8263ae":"code","a14e66fd":"code","9b4b9274":"code","7d05d4b3":"code","1f60bde1":"code","e0900d74":"code","5d7a0524":"code","8e5c0a5c":"code","09a8f0ae":"code","d159bb42":"code","0d5ec530":"code","6ece4fee":"code","5fe74439":"code","877d8acb":"code","ada0f0f9":"code","72787d68":"code","7f042620":"code","41477702":"code","cfae6b03":"code","2a019886":"markdown","e8cf877f":"markdown","5a381b11":"markdown","5c3b3838":"markdown","2f5897d4":"markdown","20b0dbf2":"markdown","6ce15e39":"markdown","6714e682":"markdown","1ac9ae9e":"markdown","90c0764e":"markdown","8a15e4ee":"markdown","374545ba":"markdown","e2ad1652":"markdown","6aefa400":"markdown","9d814851":"markdown","836d43c0":"markdown","5066b55d":"markdown","d1ca8793":"markdown","69be6553":"markdown","659751c1":"markdown","be8adee9":"markdown","ef5d67f4":"markdown"},"source":{"318aca1b":"import pandas as pd, numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, LabelEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom catboost import CatBoostRegressor\nimport xgboost as xgb\nfrom sklearn import metrics\nfrom tqdm import tqdm\nfrom sklearn.base import clone\n\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, GridSearchCV, KFold\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.backend import clear_session","830e688e":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_true-y_pred)\/y_true))*100","7389461d":"df = pd.read_csv('..\/input\/house-price-prediction-eda\/data_preproc.csv')","02c47bb1":"df.head(10)","fdf6abe1":"df.shape","a6acb2ae":"df.columns[:]","3ecb2f63":"num_cols = ['year_built', 'lotsize', 'price\/sqm', 'average_school_rating', 'number_of_schools', 'average_distance_to_school', \n            'sqm', 'sqm^2', 'sqm_price\/sqm', 'price\/sqm^2', 'target']\n\n# \u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data_preproc_6\n#num_cols = ['average_school_rating', 'average_distance_to_school', 'sqm', 'target']","5f98015b":"plt.figure(figsize = (12, 7))\nsns.heatmap(df[num_cols].corr().abs(), vmin=0, vmax=1, annot = True)","94e502fd":"for col in num_cols:\n    df[col] = np.log(df[col] + 1)  ","49f673a6":"plt.figure(figsize = (12, 7))\nsns.heatmap(df[num_cols].corr().abs(), vmin=0, vmax=1, annot = True)","90545a36":"bin_cols = ['remodeling', 'fireplace']","527f2466":"label_encoder = LabelEncoder()\n\nfor col in bin_cols:\n    df[col] = label_encoder.fit_transform(df[col])","e4479c20":"cat_cols = ['sale_status', 'propertyType', 'full_baths', 'heating', 'parking', 'city', 'state']\n\n# \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data_preproc_6\n#cat_cols = ['house_age', 'plot_size', 'price\/sqm', 'sale_status', 'propertyType', 'full_baths', 'heating', 'parking', 'city', \n#            'state']","2835435c":"X_cat = pd.get_dummies(df[cat_cols])","ea15a53a":"df = pd.concat([df[num_cols + bin_cols], X_cat], axis = 1)","282efb6b":"df.shape","b977effb":"df.columns","f9f3ac04":"X = df.drop('target', axis = 1)\ny = df['target']","ffa54332":"X_train, X_valid_test, y_train, y_valid_test = train_test_split(X, y, test_size = 0.2, shuffle = True, random_state = 42)\n#X_valid, X_test, y_valid, y_test = train_test_split(X_valid_test, y_valid_test, test_size = 0.5, random_state = 42)","a1bac8be":"'''\n# MinMax \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_valid_test = scaler.transform(X_valid_test)\n'''","3733b3e8":"# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_valid_test = scaler.transform(X_valid_test)","43a94c0f":"y_valid_test = (np.exp(y_valid_test) - 1).values","8d468892":"gb = GradientBoostingRegressor(n_estimators = 1000, min_samples_split = 2, min_samples_leaf = 1, max_depth = 20, \n                               max_features = 20, learning_rate = 0.01, random_state=42)\ngb.fit(X_train, y_train)\ny_pred_gbr = np.exp(gb.predict(X_valid_test)) - 1","e8836844":"MAE = metrics.mean_absolute_error(y_valid_test, y_pred_gbr)\nMAPE = mape(y_valid_test, y_pred_gbr)","a221fa43":"print('MAE = {}'.format(round(MAE)))\nprint('MAPE = {}'.format(round(MAPE)))","53c08a2b":"'''\nxb = xgb.XGBRegressor(objective = 'reg:squarederror', colsample_bytree = 0.5, learning_rate = 0.03, \n                      max_depth = 12, alpha = 1, n_jobs = -1, n_estimators = 1000)\nxb.fit(X_train, y_train)\ny_pred_xgb = np.exp(xb.predict(X_valid_test)) - 1\n'''","7f8263ae":"#MAE = metrics.mean_absolute_error(y_valid_test, y_pred_xgb)\n#MAPE = mape(y_valid_test, y_pred_xgb)","a14e66fd":"#print('MAE = {}'.format(round(MAE)))\n#print('MAPE = {}'.format(round(MAPE)))","9b4b9274":"'''\ndef compute_meta_feature(reg, X_train, X_test, y_train, cv):\n    \"\"\"\n    Computes meta-features using the regressor.\n    \n    :arg reg: scikit-learn regressor\n    :args X_train, y_train: training set\n    :arg X_test: testing set\n    :arg cv: cross-validation folding\n    \"\"\"\n    X_meta_train = np.zeros_like(y_train, dtype=np.float32)\n    for train_fold_index, predict_fold_index in cv.split(X_train):\n        X_fold_train, X_fold_predict = X_train[train_fold_index], X_train[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n        \n        folded_reg = clone(reg)\n        folded_reg.fit(X_fold_train, y_fold_train)\n        X_meta_train[predict_fold_index] = folded_reg.predict(X_fold_predict)\n    \n    meta_reg = clone(reg)\n    meta_reg.fit(X_train, y_train)\n    \n    X_meta_test = meta_reg.predict(X_test)\n    \n    return X_meta_train, X_meta_test\n'''","7d05d4b3":"'''\ndef generate_meta_features(regressors, X_train, X_test, y_train, cv):\n    \"\"\"\n    Generates metafeatures using a list of classifiers.\n    \n    :arg regressors: list of scikit-learn regressors\n    :args X_train, y_train: training set\n    :arg X_test: testing set\n    :arg cv: cross-validation folding\n    \"\"\"\n    features = [\n        compute_meta_feature(reg, X_train, X_test, y_train, cv)\n        for reg in tqdm(regressors)\n    ]\n    \n    stacked_features_train = np.vstack([\n        features_train for features_train, features_test in features\n    ]).T\n\n    stacked_features_test = np.vstack([\n        features_test for features_train, features_test in features\n    ]).T\n    \n    return stacked_features_train, stacked_features_test\n'''","1f60bde1":"'''\ncv = KFold(n_splits = 5, shuffle = True)\n\nstacked_features_train, stacked_features_test = generate_meta_features([\n    RandomForestRegressor(n_estimators = 1500, min_samples_split = 2, min_samples_leaf = 1, max_depth = 20, bootstrap = True, \n                          max_features = 20, n_jobs = -1, random_state = 42),\n    GradientBoostingRegressor(n_estimators = 1000, min_samples_split = 2, min_samples_leaf = 1, max_depth = 20, \n                              max_features = 20, learning_rate = 0.01, random_state = 42),\n    xgb.XGBRegressor(objective = 'reg:squarederror', colsample_bytree = 0.5, learning_rate = 0.03, \n                      max_depth = 12, alpha = 1, n_jobs = -1, n_estimators = 1000)\n], X_train, X_valid_test, y_train.values, cv)\n'''","e0900d74":"#st = LinearRegression()\n#st.fit(stacked_features_train, y_train)\n#y_pred_st = np.exp(st.predict(stacked_features_test)) - 1","5d7a0524":"#MAE = metrics.mean_absolute_error(y_valid_test, y_pred_st)\n#MAPE = mape(y_valid_test, y_pred_st)","8e5c0a5c":"#print('MAE = {}'.format(round(MAE)))\n#print('MAPE = {}'.format(round(MAPE)))","09a8f0ae":"#clear_session()","d159bb42":"'''\nmodel = Sequential()\nmodel.add(Dense(512, activation = 'relu', input_shape = (X_train.shape[1],)))\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dense(256, activation = 'relu'))\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dense(64, activation = 'relu'))\nmodel.add(Dense(1, activation = 'relu'))\n'''","0d5ec530":"#model.summary()","6ece4fee":"'''\nmodel.compile(\n    loss = 'mse',\n    optimizer = 'adam',\n    metrics = [tf.keras.metrics.MeanSquaredError()]\n)\n'''","5fe74439":"'''\nmodel.fit(X_train, \n          y_train, \n          epochs = 10, \n          validation_data = (X_valid_test, y_valid_test)\n         )\ny_pred_nn = np.exp(model.predict(X_valid_test).flatten()) - 1\n'''","877d8acb":"#MAE = metrics.mean_absolute_error(y_valid_test, y_pred_nn)\n#MAPE = mape(y_valid_test, y_pred_nn)","ada0f0f9":"#print('MAE = {}'.format(round(MAE)))\n#print('MAPE = {}'.format(round(MAPE)))","72787d68":"'''\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 Catboost\n\ndf = pd.read_csv('..\/input\/house-price-prediction-eda\/data_preproc.csv')\n\nnum_cols = ['year_built', 'lotsize', 'price\/sqm', 'average_school_rating', 'number_of_schools', 'average_distance_to_school', \n            'sqm', 'sqm^2', 'sqm_price\/sqm', 'price\/sqm^2', 'target']\n\n# \u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data_preproc_6\n#num_cols = ['average_school_rating', 'average_distance_to_school', 'sqm', 'target']\n\nfor col in num_cols:\n    df[col] = np.log(df[col] + 1)\n    \nX = df.drop('target', axis = 1)\ny = df['target']\n\nX_train, X_valid_test, y_train, y_valid_test = train_test_split(X, y, test_size = 0.2, shuffle = True, random_state = 42)\n#X_valid, X_test, y_valid, y_test = train_test_split(X_valid_test, y_valid_test, test_size = 0.5, random_state = 42)\n\n# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nscaler = StandardScaler()\nX_train[list(set(num_cols) - set(['target']))] = scaler.fit_transform(X_train[list(set(num_cols) - set(['target']))])\nX_valid_test[list(set(num_cols) - set(['target']))] = scaler.transform(X_valid_test[list(set(num_cols) - set(['target']))])\n\ny_valid_test = (np.exp(y_valid_test) - 1).values\n'''","7f042620":"'''\ncb = CatBoostRegressor(iterations = 5000,\n                       one_hot_max_size = 2,\n                       random_seed = 42)\ncb.fit(X_train, y_train, \n       cat_features = cat_cols + bin_cols,\n       eval_set = (X_valid_test, y_valid_test), \n       logging_level = 'Silent',\n       plot = False)\ny_pred_cb = np.exp(cb.predict(X_valid_test)) - 1\n'''","41477702":"#MAE = metrics.mean_absolute_error(y_valid_test, y_pred_cb)\n#MAPE = mape(y_valid_test, y_pred_cb)","cfae6b03":"#print('MAE = {}'.format(round(MAE)))\n#print('MAPE = {}'.format(round(MAPE)))","2a019886":"\u041f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u0430\u0441\u044c.","e8cf877f":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c LabelEncoder \u043a\u043e \u0432\u0441\u0435\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","5a381b11":"\u041e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u043c dummy-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","5c3b3838":"## \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","2f5897d4":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","20b0dbf2":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","6ce15e39":"\u0411\u044b\u043b\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043e 3 \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0438, 1 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c, \u0441\u0434\u0435\u043b\u0430\u043d \u0441\u0442\u0435\u043a\u0438\u043d\u0433. \u0412\u0441\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043d\u0435\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u044f\u0445.\n\n\n**GradientBoostingRegressor**\n\nGradientBoostingRegressor(n_estimators = 1000, min_samples_split = 2, min_samples_leaf = 1, max_depth = 20, max_features = 20, learning_rate = 0.01, random_state=42)\n\nMAE = 20177 $,     MAPE = 104 %\n\n**CatBoostRegressor**\n\nCatBoostRegressor(iterations = 5000, one_hot_max_size = 2, random_seed = 42)\n\nMAE = 30085 $,     MAPE = 88 %\n\n**XGBRegressor**\n\nXGBRegressor(objective = 'reg:squarederror', colsample_bytree = 0.5, learning_rate = 0.03, \n                           max_depth = 12, alpha = 1, n_jobs = -1, n_estimators = 1000)\n\nMAE = 24675 $,     MAPE = 87 %\n\n**Stacking**\n\nStacking (RandomForestRegressor, GradientBoostingRegressor, XGBRegressor)\n\nMAE = 26963 $,     MAPE = 99 %\n\n**Neural Network**\n\nMAE = 43189 $,     MAPE = 93 %\n\n\n\n\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043b\u0443\u0447\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c **GradientBoostingRegressor MAE = 20177 $ \u0438 MAPE = 104 %**.\n","6714e682":"## Catboost","1ac9ae9e":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 MAPE.","90c0764e":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u043e\u043c df, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0432 \u0438\u0437 \u043d\u0435\u0433\u043e \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","8a15e4ee":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","374545ba":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","e2ad1652":"\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u043d\u0435\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442.","6aefa400":"\u041e\u0446\u0435\u043d\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","9d814851":"## GradientBoostingRegressor","836d43c0":"## XGBoost","5066b55d":"\u0421\u0430\u043c\u0430\u044f \u0432\u044b\u0441\u043e\u043a\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0435\u0441\u0442\u044c \u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 price\/sqm \u0438 sqm, \u0447\u0442\u043e \u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u043e \u043c\u043d\u043e\u0433\u043e\u043c \u0446\u0435\u043d\u0430 \u0434\u043e\u043c\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u0438 \u0446\u0435\u043d\u043e\u0439 \u0437\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u0440. \u041f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u0433\u043b\u0430\u0434\u0438\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435.","d1ca8793":"## Stacking","69be6553":"\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438.","659751c1":"\u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u043c \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e \u0434\u0432\u0443\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c: MAE, MAPE.","be8adee9":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","ef5d67f4":"## Neural Network"}}