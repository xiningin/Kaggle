{"cell_type":{"aa5e8ca3":"code","7870dab5":"code","12710d94":"code","2efa3bc0":"code","7a186c18":"code","9d483deb":"code","19ed6734":"code","290b58b4":"code","e37f2e65":"code","22e5cf6a":"code","02ca7e5e":"code","c6e8eef2":"code","96131619":"code","0cfb64fd":"code","e7f5a2e6":"code","40e584fa":"code","97bb4110":"code","ded139f3":"code","476a4ec0":"code","f5b18a90":"code","66e76357":"code","c81beefa":"code","0e270da8":"code","d0d23cb8":"code","b0863b1f":"code","07082fe1":"code","3d45c690":"code","1217fd34":"code","8028cbb7":"code","eaa129ed":"code","c63f5fa1":"code","b4fed3d0":"code","cd93b397":"code","8b49a3f4":"code","e834e1f1":"code","476f29d5":"code","1a7eec92":"code","74c3216a":"code","ace40445":"code","f520ab8e":"code","fa0cf6e2":"markdown","32c08a20":"markdown","e4f71d8f":"markdown"},"source":{"aa5e8ca3":"import numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nimport os","7870dab5":"image = cv2.imread('..\/input\/fruits\/fruits-360\/Training\/Apple Braeburn\/0_100.jpg')\ntype(image)","12710d94":"plt.imshow(image)","2efa3bc0":"image = cv2.imread('..\/input\/fruits\/fruits-360\/Training\/Apple Golden 2\/102_100.jpg')\ntype(image)","7a186c18":"plt.imshow(image)","9d483deb":"image.shape","19ed6734":"train_path = '..\/input\/fruits\/fruits-360\/Training\/'\ntest_path = '..\/input\/fruits\/fruits-360\/Test\/'","290b58b4":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dropout\nfrom keras.layers import Dense, Flatten, Activation\nfrom keras.preprocessing.image import ImageDataGenerator","e37f2e65":"model = Sequential()\nmodel.add(Conv2D(input_shape=(100,100,3),filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=4096,activation=\"relu\"))\nmodel.add(Dense(units=131, activation=\"softmax\"))\nmodel.summary()","22e5cf6a":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","02ca7e5e":"train_datagen = ImageDataGenerator(rescale=1.0\/255,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1.0\/255)","c6e8eef2":"train_data = train_datagen.flow_from_directory(train_path,\n                                               target_size=[100,100],\n                                               batch_size=64,\n                                               class_mode='categorical')\ntest_data = train_datagen.flow_from_directory(test_path,\n                                               target_size=[100,100],\n                                               batch_size=64,\n                                               class_mode='categorical')\n","96131619":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=1,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","0cfb64fd":"print(history.history.keys())","e7f5a2e6":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","40e584fa":"from keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\n\nfrom keras.applications import InceptionV3\nfrom keras.applications import ResNet50\nfrom keras.models import Model","97bb4110":"vgg = VGG16(include_top=False, weights='imagenet', input_shape=(100,100,3))\nvgg.summary()","ded139f3":"for layer in vgg.layers:\n    layer.trainable=False","476a4ec0":"x = Flatten()(vgg.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(131,activation='softmax')(x)\nmodel = Model(inputs=vgg.input, outputs=prediction)\nmodel.summary()","f5b18a90":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","66e76357":"train_datagen = ImageDataGenerator(rescale=1.0\/255,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1.0\/255)","c81beefa":"train_data = train_datagen.flow_from_directory(train_path,\n                                               target_size=[100,100],\n                                               batch_size=64,\n                                               class_mode='categorical')\ntest_data = train_datagen.flow_from_directory(test_path,\n                                               target_size=[100,100],\n                                               batch_size=64,\n                                               class_mode='categorical')\n","0e270da8":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","d0d23cb8":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","b0863b1f":"inception = InceptionV3(include_top=False, weights='imagenet', input_shape=(100,100,3))\ninception.summary()","07082fe1":"for layer in inception.layers:\n    layer.trainable=False","3d45c690":"x = Flatten()(inception.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(131,activation='softmax')(x)\nmodel = Model(inputs=inception.input, outputs=prediction)\nmodel.summary()","1217fd34":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","8028cbb7":"train_datagen = ImageDataGenerator(rescale=1.0\/255,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1.0\/255)","eaa129ed":"train_data = train_datagen.flow_from_directory(train_path,\n                                               target_size=[100,100],\n                                               batch_size=64,\n                                               class_mode='categorical')\ntest_data = train_datagen.flow_from_directory(test_path,\n                                               target_size=[100,100],\n                                               batch_size=64,\n                                               class_mode='categorical')\n","c63f5fa1":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","b4fed3d0":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","cd93b397":"resnet = ResNet50(include_top=False, weights='imagenet', input_shape=(100,100,3))\nresnet.summary()","8b49a3f4":"for layer in resnet.layers:\n    layer.trainable=False","e834e1f1":"x = Flatten()(resnet.output)\nx = Dense(512,activation='relu')(x)\nx = Dense(512,activation='relu')(x)\nprediction = Dense(131,activation='softmax')(x)\nmodel = Model(inputs=resnet.input, outputs=prediction)\nmodel.summary()","476f29d5":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","1a7eec92":"train_datagen = ImageDataGenerator(rescale=1.0\/255,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1.0\/255)","74c3216a":"train_data = train_datagen.flow_from_directory(train_path,\n                                               target_size=[100,100],\n                                               batch_size=64,\n                                               class_mode='categorical')\ntest_data = train_datagen.flow_from_directory(test_path,\n                                               target_size=[100,100],\n                                               batch_size=64,\n                                               class_mode='categorical')\n","ace40445":"history=model.fit_generator(train_data,\n                           validation_data=test_data,\n                           epochs=5,\n                           steps_per_epoch=len(train_data),\n                           validation_steps=len(test_data))","f520ab8e":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","fa0cf6e2":"## VGG16 Architecture","32c08a20":"## Resnet Architecture","e4f71d8f":"## Inception Architecture"}}