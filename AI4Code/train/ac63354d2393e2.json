{"cell_type":{"0166ca98":"code","a060285e":"code","bd718219":"code","e4c8c2ac":"code","ffa90e7b":"code","f08c94b5":"code","e30fd31d":"code","69fc40dc":"code","fba0c610":"code","96294c6f":"code","69eff4db":"code","6dd8ba91":"code","29f80bb0":"code","bed5210a":"code","524b0aee":"code","7ca2b825":"code","ec0cd2dd":"code","bf46e70d":"code","93fb1f0f":"code","7b71d4bd":"code","bc2351c5":"code","165f6d7f":"code","fa874a90":"code","90d86f88":"code","e1aad91f":"code","ee282c81":"code","dde889e1":"code","ced200f4":"markdown","00efa8cd":"markdown","756afb61":"markdown","cce857cf":"markdown","3fce20a8":"markdown","85a012bd":"markdown","0e200ba1":"markdown","72fa3d45":"markdown","3cff3fc3":"markdown","70be5d37":"markdown","a04d0973":"markdown","61c8cf9b":"markdown","aeb16b51":"markdown","0c16120e":"markdown","35435f1c":"markdown","b1e45ec8":"markdown","4f22f699":"markdown"},"source":{"0166ca98":"import numpy as np\nimport pandas as pd\nimport re\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nimport string\nfrom wordcloud import WordCloud\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\nfrom sklearn.metrics import confusion_matrix, f1_score","a060285e":"df_train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\nprint (df_train.shape)\ndf_train.head()","bd718219":"df_train.isna().sum().to_frame().rename(columns={0:'NA Counts'}).style.background_gradient(cmap=\"summer\")","e4c8c2ac":"plt.figure(figsize=(8,5))\ntemp = df_train['target'].value_counts()\nsns.barplot(x=temp.index, y=temp.values)\nplt.xlabel(\"Target\", weight='bold', fontsize=15)\nplt.ylabel(\"Number of Tweets\", weight='bold', fontsize=15)\nplt.show()","ffa90e7b":"df_test = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nprint (df_test.shape)\ndf_test.head()","f08c94b5":"df_test.isna().sum().to_frame().rename(columns={0:'NA Counts'}).style.background_gradient(cmap=\"summer\")","e30fd31d":"# Referrence - https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\n\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)","69fc40dc":"set_stopwords = set(stopwords.words('english'))\n\n# remove URLs\ndf_train['text_processed'] = df_train['text'].apply(lambda x: re.compile(r'https?:\/\/\\S+|www\\.\\S+').sub(r'',x))\ndf_test['text_processed'] = df_test['text'].apply(lambda x: re.compile(r'https?:\/\/\\S+|www\\.\\S+').sub(r'',x))\n\n# remove Emojis\ndf_train['text_processed'] = df_train['text_processed'].apply(lambda x: remove_emoji(x))\ndf_test['text_processed'] = df_test['text_processed'].apply(lambda x: remove_emoji(x))\n\n# remove non-ASCII characters\ndf_train['text_processed'] = df_train['text_processed'].apply(lambda x: ''.join([c for c in x if c in string.printable]))\ndf_test['text_processed'] = df_test['text_processed'].apply(lambda x: ''.join([c for c in x if c in string.printable]))\n\n# remove punctuations\ndf_train['text_processed'] = df_train['text_processed'].apply(lambda x : ' '.join([word.translate(str.maketrans('', '', string.punctuation)) for word in x.split(' ')]))\ndf_test['text_processed'] = df_test['text_processed'].apply(lambda x : ' '.join([word.translate(str.maketrans('', '', string.punctuation)) for word in x.split(' ')]))\n\n# remove stopwords\ndf_train['text_processed'] = df_train['text_processed'].apply(lambda x: ' '.join([w for w in word_tokenize(x.lower()) if w not in set_stopwords]))\ndf_test['text_processed'] = df_test['text_processed'].apply(lambda x: ' '.join([w for w in word_tokenize(x.lower()) if w not in set_stopwords]))","fba0c610":"plt.figure(figsize=(16,12))\nwordcloud = WordCloud(max_font_size=50, max_words=100,background_color=\"white\").generate(' '.join(df_train['text_processed']))\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","96294c6f":"plt.figure(figsize=(16,12))\nwordcloud = WordCloud(max_font_size=50, max_words=100,background_color=\"white\").generate(' '.join(df_test['text_processed']))\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","69eff4db":"# Reference - https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\nabbreviations = {\n    \"$\" : \" dollar \",\n    \"\u20ac\" : \" euro \",\n    \"4ao\" : \"for adults only\",\n    \"a.m\" : \"before midday\",\n    \"a3\" : \"anytime anywhere anyplace\",\n    \"aamof\" : \"as a matter of fact\",\n    \"acct\" : \"account\",\n    \"adih\" : \"another day in hell\",\n    \"afaic\" : \"as far as i am concerned\",\n    \"afaict\" : \"as far as i can tell\",\n    \"afaik\" : \"as far as i know\",\n    \"afair\" : \"as far as i remember\",\n    \"afk\" : \"away from keyboard\",\n    \"app\" : \"application\",\n    \"approx\" : \"approximately\",\n    \"apps\" : \"applications\",\n    \"asap\" : \"as soon as possible\",\n    \"asl\" : \"age, sex, location\",\n    \"atk\" : \"at the keyboard\",\n    \"ave.\" : \"avenue\",\n    \"aymm\" : \"are you my mother\",\n    \"ayor\" : \"at your own risk\", \n    \"b&b\" : \"bed and breakfast\",\n    \"b+b\" : \"bed and breakfast\",\n    \"b.c\" : \"before christ\",\n    \"b2b\" : \"business to business\",\n    \"b2c\" : \"business to customer\",\n    \"b4\" : \"before\",\n    \"b4n\" : \"bye for now\",\n    \"b@u\" : \"back at you\",\n    \"bae\" : \"before anyone else\",\n    \"bak\" : \"back at keyboard\",\n    \"bbbg\" : \"bye bye be good\",\n    \"bbc\" : \"british broadcasting corporation\",\n    \"bbias\" : \"be back in a second\",\n    \"bbl\" : \"be back later\",\n    \"bbs\" : \"be back soon\",\n    \"be4\" : \"before\",\n    \"bfn\" : \"bye for now\",\n    \"blvd\" : \"boulevard\",\n    \"bout\" : \"about\",\n    \"brb\" : \"be right back\",\n    \"bros\" : \"brothers\",\n    \"brt\" : \"be right there\",\n    \"bsaaw\" : \"big smile and a wink\",\n    \"btw\" : \"by the way\",\n    \"bwl\" : \"bursting with laughter\",\n    \"c\/o\" : \"care of\",\n    \"cet\" : \"central european time\",\n    \"cf\" : \"compare\",\n    \"cia\" : \"central intelligence agency\",\n    \"csl\" : \"can not stop laughing\",\n    \"cu\" : \"see you\",\n    \"cul8r\" : \"see you later\",\n    \"cv\" : \"curriculum vitae\",\n    \"cwot\" : \"complete waste of time\",\n    \"cya\" : \"see you\",\n    \"cyt\" : \"see you tomorrow\",\n    \"dae\" : \"does anyone else\",\n    \"dbmib\" : \"do not bother me i am busy\",\n    \"diy\" : \"do it yourself\",\n    \"dm\" : \"direct message\",\n    \"dwh\" : \"during work hours\",\n    \"e123\" : \"easy as one two three\",\n    \"eet\" : \"eastern european time\",\n    \"eg\" : \"example\",\n    \"embm\" : \"early morning business meeting\",\n    \"encl\" : \"enclosed\",\n    \"encl.\" : \"enclosed\",\n    \"etc\" : \"and so on\",\n    \"faq\" : \"frequently asked questions\",\n    \"fawc\" : \"for anyone who cares\",\n    \"fb\" : \"facebook\",\n    \"fc\" : \"fingers crossed\",\n    \"fig\" : \"figure\",\n    \"fimh\" : \"forever in my heart\", \n    \"ft.\" : \"feet\",\n    \"ft\" : \"featuring\",\n    \"ftl\" : \"for the loss\",\n    \"ftw\" : \"for the win\",\n    \"fwiw\" : \"for what it is worth\",\n    \"fyi\" : \"for your information\",\n    \"g9\" : \"genius\",\n    \"gahoy\" : \"get a hold of yourself\",\n    \"gal\" : \"get a life\",\n    \"gcse\" : \"general certificate of secondary education\",\n    \"gfn\" : \"gone for now\",\n    \"gg\" : \"good game\",\n    \"gl\" : \"good luck\",\n    \"glhf\" : \"good luck have fun\",\n    \"gmt\" : \"greenwich mean time\",\n    \"gmta\" : \"great minds think alike\",\n    \"gn\" : \"good night\",\n    \"g.o.a.t\" : \"greatest of all time\",\n    \"goat\" : \"greatest of all time\",\n    \"goi\" : \"get over it\",\n    \"gps\" : \"global positioning system\",\n    \"gr8\" : \"great\",\n    \"gratz\" : \"congratulations\",\n    \"gyal\" : \"girl\",\n    \"h&c\" : \"hot and cold\",\n    \"hp\" : \"horsepower\",\n    \"hr\" : \"hour\",\n    \"hrh\" : \"his royal highness\",\n    \"ht\" : \"height\",\n    \"ibrb\" : \"i will be right back\",\n    \"ic\" : \"i see\",\n    \"icq\" : \"i seek you\",\n    \"icymi\" : \"in case you missed it\",\n    \"idc\" : \"i do not care\",\n    \"idgadf\" : \"i do not give a damn fuck\",\n    \"idgaf\" : \"i do not give a fuck\",\n    \"idk\" : \"i do not know\",\n    \"ie\" : \"that is\",\n    \"i.e\" : \"that is\",\n    \"ifyp\" : \"i feel your pain\",\n    \"IG\" : \"instagram\",\n    \"iirc\" : \"if i remember correctly\",\n    \"ilu\" : \"i love you\",\n    \"ily\" : \"i love you\",\n    \"imho\" : \"in my humble opinion\",\n    \"imo\" : \"in my opinion\",\n    \"imu\" : \"i miss you\",\n    \"iow\" : \"in other words\",\n    \"irl\" : \"in real life\",\n    \"j4f\" : \"just for fun\",\n    \"jic\" : \"just in case\",\n    \"jk\" : \"just kidding\",\n    \"jsyk\" : \"just so you know\",\n    \"l8r\" : \"later\",\n    \"lb\" : \"pound\",\n    \"lbs\" : \"pounds\",\n    \"ldr\" : \"long distance relationship\",\n    \"lmao\" : \"laugh my ass off\",\n    \"lmfao\" : \"laugh my fucking ass off\",\n    \"lol\" : \"laughing out loud\",\n    \"ltd\" : \"limited\",\n    \"ltns\" : \"long time no see\",\n    \"m8\" : \"mate\",\n    \"mf\" : \"motherfucker\",\n    \"mfs\" : \"motherfuckers\",\n    \"mfw\" : \"my face when\",\n    \"mofo\" : \"motherfucker\",\n    \"mph\" : \"miles per hour\",\n    \"mr\" : \"mister\",\n    \"mrw\" : \"my reaction when\",\n    \"ms\" : \"miss\",\n    \"mte\" : \"my thoughts exactly\",\n    \"nagi\" : \"not a good idea\",\n    \"nbc\" : \"national broadcasting company\",\n    \"nbd\" : \"not big deal\",\n    \"nfs\" : \"not for sale\",\n    \"ngl\" : \"not going to lie\",\n    \"nhs\" : \"national health service\",\n    \"nrn\" : \"no reply necessary\",\n    \"nsfl\" : \"not safe for life\",\n    \"nsfw\" : \"not safe for work\",\n    \"nth\" : \"nice to have\",\n    \"nvr\" : \"never\",\n    \"nyc\" : \"new york city\",\n    \"oc\" : \"original content\",\n    \"og\" : \"original\",\n    \"ohp\" : \"overhead projector\",\n    \"oic\" : \"oh i see\",\n    \"omdb\" : \"over my dead body\",\n    \"omg\" : \"oh my god\",\n    \"omw\" : \"on my way\",\n    \"p.a\" : \"per annum\",\n    \"p.m\" : \"after midday\",\n    \"pm\" : \"prime minister\",\n    \"poc\" : \"people of color\",\n    \"pov\" : \"point of view\",\n    \"pp\" : \"pages\",\n    \"ppl\" : \"people\",\n    \"prw\" : \"parents are watching\",\n    \"ps\" : \"postscript\",\n    \"pt\" : \"point\",\n    \"ptb\" : \"please text back\",\n    \"pto\" : \"please turn over\",\n    \"qpsa\" : \"what happens\", #\"que pasa\",\n    \"ratchet\" : \"rude\",\n    \"rbtl\" : \"read between the lines\",\n    \"rlrt\" : \"real life retweet\", \n    \"rofl\" : \"rolling on the floor laughing\",\n    \"roflol\" : \"rolling on the floor laughing out loud\",\n    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n    \"rt\" : \"retweet\",\n    \"ruok\" : \"are you ok\",\n    \"sfw\" : \"safe for work\",\n    \"sk8\" : \"skate\",\n    \"smh\" : \"shake my head\",\n    \"sq\" : \"square\",\n    \"srsly\" : \"seriously\", \n    \"ssdd\" : \"same stuff different day\",\n    \"tbh\" : \"to be honest\",\n    \"tbs\" : \"tablespooful\",\n    \"tbsp\" : \"tablespooful\",\n    \"tfw\" : \"that feeling when\",\n    \"thks\" : \"thank you\",\n    \"tho\" : \"though\",\n    \"thx\" : \"thank you\",\n    \"tia\" : \"thanks in advance\",\n    \"til\" : \"today i learned\",\n    \"tl;dr\" : \"too long i did not read\",\n    \"tldr\" : \"too long i did not read\",\n    \"tmb\" : \"tweet me back\",\n    \"tntl\" : \"trying not to laugh\",\n    \"ttyl\" : \"talk to you later\",\n    \"u\" : \"you\",\n    \"u2\" : \"you too\",\n    \"u4e\" : \"yours for ever\",\n    \"utc\" : \"coordinated universal time\",\n    \"w\/\" : \"with\",\n    \"w\/o\" : \"without\",\n    \"w8\" : \"wait\",\n    \"wassup\" : \"what is up\",\n    \"wb\" : \"welcome back\",\n    \"wtf\" : \"what the fuck\",\n    \"wtg\" : \"way to go\",\n    \"wtpa\" : \"where the party at\",\n    \"wuf\" : \"where are you from\",\n    \"wuzup\" : \"what is up\",\n    \"wywh\" : \"wish you were here\",\n    \"yd\" : \"yard\",\n    \"ygtr\" : \"you got that right\",\n    \"ynk\" : \"you never know\",\n    \"zzz\" : \"sleeping bored and tired\"\n}","6dd8ba91":"# convert the abrreviations\n\ndef convert_abbrev(word):\n    return abbreviations[word.lower()] if word.lower() in abbreviations.keys() else word\n\ndf_train['text_processed'] = df_train['text_processed'].apply(lambda x: ' '.join([convert_abbrev(word) for word in word_tokenize(x)]))\ndf_test['text_processed'] = df_test['text_processed'].apply(lambda x: ' '.join([convert_abbrev(word) for word in word_tokenize(x)]))","29f80bb0":"# Reference - https:\/\/www.kaggle.com\/wrrosa\/keras-bert-using-tfhub-modified-train-data\n# Author of this kernel read tweets in training data and figure out that some of them have errors\n\nids_with_target_error = [328,443,513,2619,3640,3900,4342,5781,6552,6554,6570,6701,6702,6729,6861,7226]\ndf_train.loc[df_train['id'].isin(ids_with_target_error),'target'] = 0","bed5210a":"# Reference - https:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-words-tf-idf-glove-bert#NLP:\n\nlearning_rate = 1e-5\nvalid = 0.2\nepochs_num = 3\nbatch_size_num = 16","524b0aee":"# We will use the official tokenization script created by the Google team\n!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","7ca2b825":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n\nimport tokenization","ec0cd2dd":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","bf46e70d":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n\n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=learning_rate), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","93fb1f0f":"# Load BERT from the Tensorflow Hub\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","7b71d4bd":"# Load tokenizer from the bert layer\nvocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","bc2351c5":"# Encode the text into tokens, masks, and segment flags\ntrain_input = bert_encode(df_train['text_processed'].values, tokenizer, max_len=160)\ntest_input = bert_encode(df_test['text_processed'].values, tokenizer, max_len=160)\ntrain_labels = df_train['target'].values","165f6d7f":"# Build BERT model with my tuning\nmodel_BERT = build_model(bert_layer, max_len=160)\nmodel_BERT.summary()","fa874a90":"# Train BERT model with my tuning\ncheckpoint = ModelCheckpoint('model_BERT.h5', monitor='val_loss', save_best_only=True)\n\ntrain_history = model_BERT.fit(\n    train_input, train_labels,\n    validation_split = valid,\n    epochs = epochs_num,\n    callbacks=[checkpoint],\n    batch_size = batch_size_num\n)","90d86f88":"# on TEST data\ntest_pred = model_BERT.predict(test_input)\ntest_pred_int = test_pred.round().astype('int')\n\n# on TRAIN data\ntrain_pred = model_BERT.predict(train_input)\ntrain_pred_int = train_pred.round().astype('int')","e1aad91f":"cf_matrix = confusion_matrix(df_train['target'], train_pred_int)\nplt.figure(figsize=(8,8))\nsns.heatmap(cf_matrix\/np.sum(cf_matrix), annot=True, fmt='.2%', cmap='Blues', square=True)\nplt.show()","ee282c81":"print (\"F1 Score = \" + str(f1_score(df_train['target'], train_pred_int)))","dde889e1":"df_submission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")\ndf_submission['target'] = test_pred_int\ndf_submission.to_csv(\"submission.csv\", index=False, header=True)","ced200f4":"### **Number of NA values in each column**","00efa8cd":"### **Number of Tweets of each type i.e. Real and Fake**","756afb61":"## **Download the data**","cce857cf":"# **BERT using TFHub**\n\nReference - https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub","3fce20a8":"## **Helper Functions**","85a012bd":"## **Test Data**","0e200ba1":"# **Pre-Processing**","72fa3d45":"### **Number of NA values in each column**","3cff3fc3":"## **Confusion Metric and F1 Score**","70be5d37":"## **Build and train BERT model**","a04d0973":"# **Feel free to <span style=\"color:red\"> Upvote <\/span> and give <span style=\"color:blue\"> Feedback <\/span>.**","61c8cf9b":"## **Train Data**","aeb16b51":"# **Load the data**","0c16120e":"# **Prediction**","35435f1c":"## **WordCloud of Test Tweets**","b1e45ec8":"## **WordCloud of Train Tweets**","4f22f699":"# **Submission**"}}