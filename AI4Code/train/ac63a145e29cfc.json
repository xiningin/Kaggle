{"cell_type":{"53021c3d":"code","c32b1be6":"code","19cc15c0":"code","591064c3":"code","f40dcb7c":"code","2a872c62":"code","e59f5641":"code","b74844e6":"code","d283f976":"code","7fc1420c":"code","05bb6980":"code","db2151c6":"code","16ab9b24":"code","d39435b5":"code","5f884113":"code","bf4529b1":"code","62543389":"code","db8f1ab0":"code","e8f5b058":"code","2bd2672c":"code","726a6f52":"code","633e5549":"code","7084642c":"code","2e9d0a59":"code","b13338f3":"code","33e2fad8":"code","e8ebfb22":"code","0c7d13f0":"code","e7db2c23":"code","b12cbbe2":"code","20ae23cb":"code","28575dba":"code","5dc833a6":"code","c73e3af4":"code","ab909f88":"code","ccb46cae":"code","9cfba13a":"code","ec2b2c68":"code","f9241545":"code","fcfcd14d":"code","dd86f5d0":"code","e56335d2":"code","79053659":"code","46a90660":"code","b9816756":"code","6fc18ef3":"code","b686b37c":"markdown","fd7db14a":"markdown","06001a71":"markdown","a74ade21":"markdown","586736e1":"markdown","1d0b1dbb":"markdown","8ec23b02":"markdown"},"source":{"53021c3d":"import matplotlib.pyplot as plt\nimport cufflinks as cf\nimport sklearn\nfrom sklearn import svm, preprocessing \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport seaborn as sns\nimport plotly.figure_factory as ff\nfrom sklearn.preprocessing import OneHotEncoder\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nprint(os.listdir(\"..\/input\"))","c32b1be6":"train_df = pd.read_csv('..\/input\/train.csv')\ntrain_df.info()\ntest_df = pd.read_csv('..\/input\/test.csv')","19cc15c0":"print(train_df.shape)\nprint(test_df.shape)","591064c3":"def rm_null_fare(colnames):\n    fare = colnames[0]\n    pclass = colnames[1]\n    if pd.isnull(fare):\n        if pclass == 1:\n            return 84\n        elif pclass == 2:\n            return 21\n        else:\n            return 14\n    else:\n        return fare\ndef rm_null_age(colnames):\n    age = colnames[0]\n    pclass = colnames[1]\n    if pd.isnull(age):\n        if pclass == 1:\n            return 38\n        elif pclass == 2:\n            return 29\n        else:\n            return 25\n    else:\n        return age\n\ndef univariate_barplots(data, col1, col2='Survived', top=False):\n    # Count number of zeros in dataframe python: https:\/\/stackoverflow.com\/a\/51540521\/4084039\n    temp = pd.DataFrame(data.groupby(col1)[col2].agg(lambda x: x.eq(1).sum())).reset_index().sort_values(by = col1, ascending = True)\n\n    # Pandas dataframe grouby count: https:\/\/stackoverflow.com\/a\/19385591\/4084039\n    temp['total'] = pd.DataFrame(data.groupby(col1)[col2].agg({'total':'count'})).reset_index()['total']\n    temp['Avg Survival Rate']   = pd.DataFrame(data.groupby(col1)[col2].agg({'Avg':'mean'})).reset_index()['Avg']\n    \n    temp.sort_values(by=['Avg Survival Rate'],inplace=True, ascending=False)\n    \n    if top:\n        temp = temp[0:top]\n    \n#     stack_plot(temp, xtick=col1, col2=col2, col3='total')\n    print(temp)\n#     print(\"=\"*50)\n#     print(temp.tail(5))","f40dcb7c":"print(train_df.columns)","2a872c62":"train_df['Age'] = train_df[['Age', 'Pclass']].apply(rm_null_age, axis = 1)\ntest_df['Age']  = test_df[['Age', 'Pclass']].apply(rm_null_age, axis = 1)","e59f5641":"train_df['Fare'] = train_df[['Fare', 'Pclass']].apply(rm_null_fare, axis = 1)\ntest_df['Fare']  = test_df[['Fare', 'Pclass']].apply(rm_null_fare, axis = 1)","b74844e6":"train_df['Name_title'] = train_df['Name'].str.split('[,.]').str.get(1)\ntest_df['Name_title']  = test_df['Name'].str.split('[,.]').str.get(1)","d283f976":"def agg_names(name):\n    name = name.replace(\" \", '')\n\n    if name in ['Mlle', 'Lady', 'Mme', 'Ms', 'theCountess' ]:\n        return 'Lady'    \n    if name in ['Rev', 'Jonkheer', 'Don','Capt' ]:\n        return 'Crew'    \n    if name in ['Col', 'Major']:\n        return 'Major'    \n    if name in ['Mrs', 'Miss']:\n        return 'Mrs'\n    if name in ['Sir', 'Master', 'Dr', 'Mr']:\n        return name    \n    else:\n        return 'Others'","7fc1420c":"train_df['Name_title'] = train_df['Name_title'].apply(agg_names)\ntest_df['Name_title'] = test_df['Name_title'].apply(agg_names)","05bb6980":"univariate_barplots(train_df, 'Name_title')","db2151c6":"test_df['Name_title'].value_counts()","16ab9b24":"train_df.drop('Name', axis = 1, inplace = True)\ntest_df.drop('Name', axis = 1, inplace = True)","d39435b5":"train_df['Cabin'].fillna('Not Available', inplace = True)\ntest_df['Cabin'].fillna('Not Available', inplace = True)","5f884113":"def fix_cabin(cabin):\n    if cabin == 'Not Available':\n        return cabin\n    else:\n        return cabin[0]","bf4529b1":"train_df['Cabin'] = train_df['Cabin'].apply(fix_cabin)\ntest_df['Cabin']  = test_df['Cabin'].apply(fix_cabin)","62543389":"train_df['familynum'] = train_df['SibSp'] + train_df['Parch'] + 1\ntest_df['familynum'] = test_df['SibSp'] + test_df['Parch'] + 1","db8f1ab0":"def countfamily(num):\n    if num == 1:\n        return 1\n    else:\n        return 0","e8f5b058":"train_df['Isalone'] = train_df['familynum'].apply(countfamily)\ntest_df['Isalone'] = test_df['familynum'].apply(countfamily)","2bd2672c":"univariate_barplots(train_df, 'familynum')","726a6f52":"univariate_barplots(train_df, 'Isalone')","633e5549":"train_df.drop(['Ticket'], axis = 1, inplace = True)\ntest_df.drop(['Ticket'], axis = 1, inplace = True)","7084642c":"train_df['Embarked'].fillna('S', inplace=True)\ntest_df['Embarked'].fillna('S', inplace=True)","2e9d0a59":"univariate_barplots(train_df, 'Embarked')","b13338f3":"train_df.head()","33e2fad8":"X_train = train_df.drop(['PassengerId', 'Survived'], axis = 1)\ny_train = train_df['Survived']\nX_test  = test_df.drop(['PassengerId'], axis = 1)\n","e8ebfb22":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)","0c7d13f0":"X_train.head()","e7db2c23":"enc = OneHotEncoder(handle_unknown='ignore')\n  ","b12cbbe2":"# Ref: https:\/\/medium.com\/@vaibhavshukla182\/how-to-solve-mismatch-in-train-and-test-set-after-categorical-encoding-8320ed03552f\nX_train['train'] = 1\nX_test['train'] = 0","20ae23cb":"combined = pd.concat([X_train, X_test])","28575dba":"combined.head()","5dc833a6":"dummies = pd.get_dummies(combined[['Pclass', 'Sex', 'Cabin', 'Embarked', 'Name_title']])","c73e3af4":"dummies.head()","ab909f88":"combined = pd.concat([dummies, combined[['Age', 'SibSp', 'Parch', 'Fare', 'familynum', 'Isalone', 'train']],   ], axis =1)","ccb46cae":"combined.head()","9cfba13a":"X_train = combined[combined['train']== 1]\nX_test  = combined[combined['train']== 0]\nX_train.drop(['train'], axis = 1, inplace = True)\nX_test.drop(['train'], axis = 1, inplace = True)","ec2b2c68":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)","f9241545":"import time\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.ensemble import (RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier, VotingClassifier)\nfrom sklearn.metrics import accuracy_score\n\n","fcfcd14d":"dict_clf = {}","dd86f5d0":"paramgrid = {\n    'n_estimators':      [100, 200, 500, 750, 1000],\n    'criterion':         ['gini', 'entropy'],\n    'max_features':      ['auto', 'log2'],\n    'min_samples_leaf':  list(range(2, 7))\n}\nGS = GridSearchCV(RandomForestClassifier(random_state=77),\n                  paramgrid,\n                  cv=4)\nt0 = time.time()\nGS.fit(X_train, y_train)\nt = time.time() - t0\nbest_clf = GS.best_estimator_\nbest_params = GS.best_params_\nbest_score = GS.best_score_\nname = 'RF'\nbest_clf.fit(X_train, y_train)\nacc_eval = accuracy_score(y_train, best_clf.predict(X_train))\ndict_clf[name] = {\n    'best_par': best_params,\n    'best_clf': best_clf,\n    'best_score': best_score,\n    'score_eval': acc_eval,\n    'fit_time': t,\n}","e56335d2":"# 2. GradientBoosting\nparamgrid = {\n    'n_estimators':      [100, 200, 500, 750, 1000],\n    'max_features':      ['auto', 'log2'],\n    'min_samples_leaf':  list(range(2, 7)),\n    'loss' :             ['deviance', 'exponential'],\n    'learning_rate':     [0.05, 0.1, 0.2],\n}\nGS = GridSearchCV(GradientBoostingClassifier(random_state=77),\n                  paramgrid,\n                  cv=4)\nt0 = time.time()\nGS.fit(X_train, y_train)\nt = time.time() - t0\nbest_clf = GS.best_estimator_\nbest_params = GS.best_params_\nbest_score = GS.best_score_\nname = 'GB'\nbest_clf.fit(X_train, y_train)\nacc_eval = accuracy_score(y_train, best_clf.predict(X_train))\ndict_clf[name] = {\n    'best_par': best_params,\n    'best_clf': best_clf,\n    'best_score': best_score,\n    'score_eval': acc_eval,\n    'fit_time': t,\n}","79053659":"# 3. AdaBoost\nparamgrid = {\n    'n_estimators':  [100, 200, 500, 750, 1000],\n    'learning_rate': [0.05, 0.1, 0.5, 1, 2]\n}\nGS = GridSearchCV(AdaBoostClassifier(random_state=77),\n                  paramgrid,\n                  cv=4)\nt0 = time.time()\nGS.fit(X_train, y_train)\nt = time.time() - t0\nbest_clf = GS.best_estimator_\nbest_params = GS.best_params_\nbest_score = GS.best_score_\nname = 'ADB'\nbest_clf.fit(X_train, y_train)\nacc_eval = accuracy_score(y_train, best_clf.predict(X_train))\ndict_clf[name] = {\n    'best_par': best_params,\n    'best_clf': best_clf,\n    'best_score': best_score,\n    'score_eval': acc_eval,\n    'fit_time': t,\n}","46a90660":"dict_clf","b9816756":"voting_clf = VotingClassifier(estimators = [ ('GB', dict_clf['GB']['best_clf']),\n                                             ('RF', dict_clf['RF']['best_clf']),\n                                             ('ADB',dict_clf['ADB']['best_clf'])], voting = 'soft', n_jobs = -1)\nvoting_clf.fit(X_train, y_train)","6fc18ef3":"nb_pred = voting_clf.predict(X_test)\nres = test_df[['PassengerId']]\nres['Survived'] = nb_pred\nres.to_csv('Prediction_gender.csv', index=False)","b686b37c":"## Embarked","fd7db14a":"## Name_title","06001a71":"## Age","a74ade21":"## Fare","586736e1":"## Cabin","1d0b1dbb":"## is Alone","8ec23b02":"## Family members"}}