{"cell_type":{"8820d092":"code","b733db14":"code","737b0697":"code","0432a263":"code","17d9ff98":"code","9ecfab8e":"code","1b605300":"code","bca8364f":"markdown","40259c83":"markdown","f827b678":"markdown","a2584d15":"markdown","34d3439c":"markdown"},"source":{"8820d092":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX_full = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')\n\nX_full.head()","b733db14":"# print some info\nX_full.info()","737b0697":"# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()\n\nX_train.head()","0432a263":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import mean_absolute_error\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='median') # Your code here\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n]) # Your code here\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Transform the data\nX_t = preprocessor.fit_transform(X_train)\nX_v = preprocessor.transform(X_valid)","17d9ff98":"import xgboost\n\nmodel_xgb = xgboost.XGBRegressor(colsample_bytree=0.4,\n                 gamma=0,                 \n                 learning_rate=0.07,\n                 max_depth=3,\n                 min_child_weight=1.5,\n                 n_estimators=10000,                                                                    \n                 reg_alpha=0.75,\n                 reg_lambda=0.45,\n                 subsample=0.6,\n                 seed=42)\n\n\nimport lightgbm as lgb\n\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","9ecfab8e":"# XGB Model\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline_xgb = Pipeline(steps=[('preprocessor', preprocessor),\n                                ('model', model_xgb)\n                               ])\n\n# Preprocessing of training data, fit model \nmy_pipeline_xgb.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds_xgb = my_pipeline_xgb.predict(X_valid)\n\n\n# LGB Model\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline_lgb = Pipeline(steps=[('preprocessor', preprocessor),\n                                  ('model', model_lgb)\n                                 ])\n\n# Preprocessing of training data, fit model \nmy_pipeline_lgb.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds_lgb = my_pipeline_lgb.predict(X_valid)\n\n# Average the predictions\npreds = (preds_xgb + preds_lgb)\/2\n\n# Evaluate the model\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)","1b605300":"# Preprocessing of test data, fit model\nmy_pipeline_xgb.fit(X_full[my_cols], y)\n\npreds_test_xgb = my_pipeline_xgb.predict(X_test) # Your code here\n\nmy_pipeline_lgb.fit(X_full[my_cols], y)\n\npreds_test_lgb = my_pipeline_lgb.predict(X_test) # Your code here\n\npreds_test = (preds_test_xgb + preds_test_lgb)\/2\n\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","bca8364f":"# Little modifications from Kaggle Exercises (Top 4%)\n\nThis is an improvement of pipelines exercise of Kaggle course: https:\/\/www.kaggle.com\/learn\/intermediate-machine-learning\n\nBy the moment I've only done a little bit modifications in the model stage without any changes in the preprocessing stage. \n\nI've replaced the original RandomForestRegressor with two models:\n\n* xgboost.XGBRegressor: I'm using the hyper-parameters found in this kernel: https:\/\/www.kaggle.com\/pablocastilla\/predict-house-prices-with-xgboost-regression\n* lgb.LGBMRegressor:  I'm using the hyper-parameters found in this kernel: https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard\n\n(Thanks for these kernels! :))\n\nI've trained separately both models over all train set (with no validation set) and average the predictions, the result leads me to the top 4% with an score of 14042.75759","40259c83":"### Processing test data and save the predictions","f827b678":"### Preprocessing","a2584d15":"### Define models","34d3439c":"### Process and validate the pedictions"}}