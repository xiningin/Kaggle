{"cell_type":{"42ef738e":"code","f35dfce6":"code","29bf2c95":"code","4ed9ab71":"code","baaa3afa":"code","9a73afe4":"code","b1d90403":"code","f297de66":"code","9f72b819":"code","6bb0190c":"code","2567f7e6":"code","11daaf94":"code","b41039ae":"code","2c06afbb":"code","5d78cd2b":"markdown","5002a636":"markdown","7b0011ad":"markdown","068fc5ec":"markdown","819ddbe1":"markdown","956936ec":"markdown","3d1c726a":"markdown"},"source":{"42ef738e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport spacy\nimport gensim\nfrom gensim.models.doc2vec import Doc2Vec, TaggedDocument\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\nimport math\nimport time\nimport plotly.express as px\nimport sys\nfrom pandasql import sqldf\npysqldf = lambda q: sqldf(q, globals())\nimport os\nRS = 123","f35dfce6":"data = pd.read_csv(\"..\/input\/bible\/t_asv.csv\")","29bf2c95":"documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(data['t'])]","4ed9ab71":"model = Doc2Vec(documents, vector_size=10, workers=4)","baaa3afa":"vector = [model.infer_vector([i]) for i in list(data['t'])]\nvector = np.array(vector)","9a73afe4":"perplex = math.sqrt(vector.shape[0])\nRS = 123\ntime_start = time.time()\ntsne = TSNE(perplexity = perplex, learning_rate = 100, n_iter = 700, random_state=RS).fit_transform(vector)\nprint('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))","b1d90403":"columns = list(data.columns)\ncolumns.extend(['comp1', 'comp2'])\ndata_filter = np.concatenate((data.to_numpy(),tsne), axis = 1)\ndata_filter = pd.DataFrame(data_filter, columns = columns)\ndata_filter.head(2)","f297de66":"fig = px.scatter(data_filter, x=\"comp1\", y=\"comp2\", hover_data=[\"t\"], color=\"b\")\nfig.show()","9f72b819":"sse = {}\nfor k in range(1, 21):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(vector)\n    clusters = kmeans.labels_\n    #print(data[\"clusters\"])\n    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center\nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.ylabel(\"SSE\")\nplt.show()\n","6bb0190c":"n_components = np.arange(1, 51)\nmodels = [GaussianMixture(n, covariance_type='full', random_state=0).fit(vector) for n in n_components]\nplt.plot(n_components, [m.bic(vector) for m in models], label='BIC')\nplt.plot(n_components, [m.aic(vector) for m in models], label='AIC')\nplt.legend(loc='best')\nplt.xlabel('n_components');","2567f7e6":"gmm = GaussianMixture(n_components=20)\ngmm.fit(vector)\nlabels = gmm.predict(vector)","11daaf94":"perplex = math.sqrt(vector.shape[0])\nRS = 123\ntime_start = time.time()\ntsne = TSNE(perplexity = perplex, learning_rate = 100, n_iter = 700, random_state=RS).fit_transform(vector)\nprint('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))","b41039ae":"columns = list(data.columns)\ncolumns.extend(['comp1', 'comp2', 'labels'])\ndata_filter = np.concatenate((data.to_numpy(),tsne, labels.reshape(31103,1)), axis = 1)\ndata_filter = pd.DataFrame(data_filter, columns = columns)\ndata_filter.head(2)","2c06afbb":"fig = px.scatter(data_filter, x=\"comp1\", y=\"comp2\", hover_data=[\"t\"], color=\"labels\")\nfig.show()","5d78cd2b":"We see a minima at cluster = 20 and hence we divide the data in 20 clusters","5002a636":"### Cluster the bible using ML algorithms","7b0011ad":"According to this, bible apparently has only one theme","068fc5ec":"### Cluster the Bible according to the book","819ddbe1":"There are small, overlapping clusters of themes in bible","956936ec":"Cannot form any significant cluster because no elbow arises. Hence we go for GaussianMixture model","3d1c726a":"## To-do\n1. Cluster the bible according to the book\n2. Cluster the bible using K-Means (Doc2Vec of verses)\n3. Sentiment of each bible chapter\n4. Text completion using Transformers package"}}