{"cell_type":{"fc3633e2":"code","14ff8c70":"code","5ad1b346":"code","668e3f83":"code","b236f2c4":"code","88b8decc":"code","6b3e5dc7":"code","016d84ab":"code","c0710050":"code","f720032f":"code","281105f1":"code","bc17a011":"code","845ff497":"code","736eb8ba":"code","9ac8ca11":"code","fb371715":"code","ecf16fb0":"code","3490dcde":"code","0c9d5f64":"code","e5bb8fbe":"code","8ef0cf7c":"code","10d6b3b1":"code","867de858":"code","db8c4bc1":"code","987f84e7":"code","8e52719b":"code","b29a8bd9":"code","17d1b76f":"code","b27fa5a0":"code","8121abd2":"code","52d1baee":"code","6ad9943a":"code","96bfd104":"code","e3d5507c":"code","7c92da1e":"code","cbe4abfc":"code","b7d26d78":"code","26a40795":"code","13544789":"code","7a9edb2f":"code","daf72d85":"code","887a3a7d":"code","afe0cc39":"code","519d21bf":"code","244eb0e9":"code","6c7efc67":"code","20fb8e12":"code","c8bad144":"code","86a6c6fd":"code","e8173f1c":"code","7b63e8b7":"code","7a68c785":"code","99debcd4":"code","76b0c048":"code","4393e038":"code","15caae42":"code","12b3dff2":"code","f10ab1f6":"code","f8a1a2ac":"code","8b2e725d":"code","ed9cba1e":"code","026b773b":"code","694a35d7":"markdown","07de28d9":"markdown","05861b13":"markdown","a60e1833":"markdown","10900eb7":"markdown","4a91d803":"markdown","de542f63":"markdown","6a1bd50d":"markdown","61e82c33":"markdown","a5514357":"markdown","89611e48":"markdown","9dba5e3c":"markdown","c00db26a":"markdown","0126ce53":"markdown","c8f67e4a":"markdown","d380d196":"markdown","eaf3de40":"markdown","b1e7235e":"markdown","18d43d2a":"markdown","3b557b84":"markdown","27539170":"markdown","d50f66c2":"markdown","d8922b37":"markdown","046d3f09":"markdown","ccdb6a14":"markdown","1f55287f":"markdown","491328d1":"markdown","8aa2d517":"markdown","60cb9692":"markdown","93338614":"markdown","777db9ef":"markdown","21c8316d":"markdown","af74a432":"markdown","92e9cc4b":"markdown","aef526b3":"markdown","a3d0ae94":"markdown","96235548":"markdown","afa54e4c":"markdown","cc1e3535":"markdown","43d2a093":"markdown","a8df9a74":"markdown","d4dc8d52":"markdown","853cabb2":"markdown","865b77af":"markdown","6a179c09":"markdown","ae7afb5f":"markdown"},"source":{"fc3633e2":"!pip install pywaffle","14ff8c70":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport sklearn.metrics as metrics\nimport plotly.offline as py\n\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score, roc_curve,auc, confusion_matrix,precision_recall_curve,precision_recall_curve,plot_precision_recall_curve\nfrom pywaffle import Waffle\nfrom yellowbrick.classifier import classification_report\nfrom plotly.subplots import make_subplots","5ad1b346":"custom_colors = [\"#c8e7ff\",\"#deaaff\", \"#f72585\",\"#d100d1\"]\ncustomPalette = sns.set_palette(sns.color_palette(custom_colors))","668e3f83":"sns.palplot(sns.color_palette(custom_colors),size=1)\nplt.tick_params(axis='both', labelsize=0, length = 0)","b236f2c4":"sns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})","88b8decc":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","6b3e5dc7":"train_data.shape","016d84ab":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","c0710050":"test_data.shape","f720032f":"train_data.describe()","281105f1":"train_data.dtypes","bc17a011":"train_data.isna().sum()","845ff497":"train_data.nunique()","736eb8ba":"profile = pandas_profiling.ProfileReport(train_data)","9ac8ca11":"profile","fb371715":"train_data['Cabin'].unique()","ecf16fb0":"train_data['Cabin'] = train_data['Cabin'].apply(lambda i: i[0] if pd.notnull(i) else 'Z')\ntest_data['Cabin'] = test_data['Cabin'].apply(lambda i: i[0] if pd.notnull(i) else 'Z')","3490dcde":"train_data['Cabin'].unique()","0c9d5f64":"train_data[train_data['Cabin']=='T'].index.values","e5bb8fbe":"test_data[test_data['Cabin']=='T'].index.values","8ef0cf7c":"train_data.iloc[339]","10d6b3b1":"index = train_data[train_data['Cabin'] == 'T'].index\ntrain_data.loc[index, 'Cabin'] = 'A'","867de858":"def plot_bar(df, feat_x, feat_y,s, normalize=True):\n    ct = pd.crosstab(df[feat_x], df[feat_y])\n    return ct.plot(kind='bar', stacked=s)","db8c4bc1":"dpi=80\nplot_bar(train_data, 'Cabin', 'Pclass',False)\nplt.legend(title='Pclass',loc='upper right',bbox_to_anchor=(1.25, 1))\nplt.gcf().set_size_inches(10,8)\nplt.ylim(0,100)\nplt.xticks(rotation=45)\nplt.show()","987f84e7":"train_data['Cabin'] = train_data['Cabin'].replace(['A', 'B', 'C'], 'ABC')\ntrain_data['Cabin'] = train_data['Cabin'].replace(['D', 'E'], 'DE')\ntrain_data['Cabin'] = train_data['Cabin'].replace(['F', 'G'], 'FG')\n\ntest_data['Cabin'] = test_data['Cabin'].replace(['A', 'B', 'C'], 'ABC')\ntest_data['Cabin'] = test_data['Cabin'].replace(['D', 'E'], 'DE')\ntest_data['Cabin'] = test_data['Cabin'].replace(['F', 'G'], 'FG')","8e52719b":"train_data.drop([\"Ticket\", \"Name\", \"PassengerId\"], axis=1, inplace=True)\ntest_data.drop([\"Ticket\", \"Name\", \"PassengerId\"], axis=1, inplace=True)\n\ntrain_data[\"Age\"].fillna(train_data[\"Age\"].median(skipna=True), inplace=True)\ntest_data[\"Age\"].fillna(test_data[\"Age\"].median(skipna=True), inplace=True)\n\n\ntest_data[\"Fare\"].fillna(test_data[\"Fare\"].median(skipna=True), inplace=True)\n\ntrain_data[\"Embarked\"].fillna('S', inplace=True)\ntest_data[\"Embarked\"].fillna('S', inplace=True)","b29a8bd9":"train_data[\"Cabin\"].unique()","17d1b76f":"gender = {'male': 0, 'female': 1}\ntrain_data.Sex = [gender[item] for item in train_data.Sex] \ntest_data.Sex = [gender[item] for item in test_data.Sex] \n\nembarked = {'S': 0, 'C': 1, 'Q':2}\ntrain_data.Embarked = [embarked[item] for item in train_data.Embarked] \ntest_data.Embarked = [embarked[item] for item in test_data.Embarked] \n\n\ntrain_data['Cabin'] = LabelEncoder().fit_transform(train_data['Cabin'])\ntest_data['Cabin'] = LabelEncoder().fit_transform(test_data['Cabin'])","b27fa5a0":"train_data.dtypes","8121abd2":"gender = train_data['Sex'].value_counts()\n\nfig = plt.figure(\n    FigureClass=Waffle, \n    rows=5,\n    columns=10,\n    values=gender,\n    colors = (custom_colors[0], custom_colors[1]),\n    title={'label': 'Gender Distribution', 'loc': 'center'},\n    labels=[\"{}({})\".format(a, b) for a, b in zip(gender.index, gender) ],\n    legend={'loc': 'upper left', 'bbox_to_anchor': (1,1)},\n    font_size=35, \n    icons = ['male','female'],\n    icon_legend=True,\n    figsize=(10, 8)\n)","52d1baee":"def triple_plot(x, title,c):\n    fig, ax = plt.subplots(3,1,figsize=(15,8),sharex=True)\n    sns.distplot(x, ax=ax[0],color=c)\n    ax[0].set(xlabel=None)\n    ax[0].set_title('Histogram + KDE')\n    sns.boxplot(x, ax=ax[1],color=c)\n    ax[1].set(xlabel=None)\n    ax[1].set_title('Boxplot')\n    sns.violinplot(x, ax=ax[2],color=c)\n    ax[2].set(xlabel=None)\n    ax[2].set_title('Violin plot')\n    fig.suptitle(title, fontsize=16)\n    plt.tight_layout(pad=3.0)\n    plt.show()","6ad9943a":"def hist(x,title):\n    plt.figure(figsize = (10,8))\n    ax = sns.distplot(x, \n                 kde=False);\n    values = np.array([rec.get_height() for rec in ax.patches])\n    norm = plt.Normalize(values.min(), values.max())\n    colors = plt.cm.jet(norm(values))\n    for rec, col in zip(ax.patches, colors):\n        rec.set_color(col)\n    plt.title(title)","96bfd104":"hist(train_data['Age'],'Distribution of Age')","e3d5507c":"triple_plot(train_data['Age'],'Distribution of Age',custom_colors[2])","7c92da1e":"hist(train_data['Fare'],'Distribution of Fare')","cbe4abfc":"triple_plot(train_data['Fare'],'Distribution of Fare',custom_colors[1])","b7d26d78":"sns.violinplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", split=True, data=train_data)\nplt.legend(title='Survived',loc='upper right',bbox_to_anchor=(1.25, 1))\nplt.show()","26a40795":"td = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntd[\"Cabin\"]=td.Cabin.str[0]","13544789":"sns.catplot(\"Survived\", col=\"Cabin\", col_wrap=8,data=td[td.Cabin.notnull()],kind=\"count\",height=4,aspect=.6)\nplt.show()","7a9edb2f":"sns.catplot(\"Survived\", col=\"Cabin\", col_wrap=4,data=train_data,kind=\"count\", height=4,aspect=.6)\nplt.show()","daf72d85":"plot_bar(train_data, 'SibSp', 'Survived',False)\nplt.legend(title='Survived',loc='upper right',bbox_to_anchor=(1.25, 1))\nplt.gcf().set_size_inches(10,8)\nplt.xticks(rotation=45)\nplt.show()","887a3a7d":"plot_bar(train_data, 'Parch', 'Survived',True)\nplt.legend(title='Survived',loc='upper right',bbox_to_anchor=(1.25, 1))\nplt.gcf().set_size_inches(10,8)\nplt.xticks(rotation=45)\nplt.show()","afe0cc39":"data = train_data[['Sex','Survived']]\ndata1 = data.loc[data.Sex==0]\ndata2 = data.loc[data.Sex!=0]\n\nplt.figure(figsize=(16,8),dpi=60)\n\nax1 = plt.subplot(121, aspect='equal')\ndata1['Survived'].value_counts().plot.pie(startangle=90,autopct='%1.1f%%', ax=ax1)\nax1.title.set_text('Male')\n\nax2 = plt.subplot(122, aspect='equal')\ndata2['Survived'].value_counts().plot.pie(startangle=90,autopct='%1.1f%%', ax=ax2)\nax2.title.set_text('Female')\n\nplt.show()","519d21bf":"sns.barplot(x = \"Embarked\", y = \"Fare\", hue = \"Survived\", data = train_data)\nplt.show()","244eb0e9":"sns.kdeplot(train_data['Fare'][train_data.Survived == 1], color=custom_colors[2], shade=True)\nsns.kdeplot(train_data['Fare'][train_data.Survived == 0], color=custom_colors[1], shade=True)\nplt.legend(['Survived', 'Not Survived'])\nplt.show()","6c7efc67":"sns.kdeplot(train_data['Age'][train_data.Survived == 1], color=custom_colors[2], shade=True)\nsns.kdeplot(train_data['Age'][train_data.Survived == 0], color=custom_colors[1], shade=True)\nplt.legend(['Survived', 'Not Survived'])\nplt.show()","20fb8e12":"mask = np.triu(np.ones_like(train_data.corr(), dtype=bool))\nfig, ax = plt.subplots(figsize=(16,10),dpi=80, facecolor='w', edgecolor='k')\nsns.heatmap(train_data.corr(), mask=mask, cmap=\"YlGnBu\", vmax=.3, center=0,annot = True,\n            square=True)\nplt.show()","c8bad144":"expected_values = train_data[\"Survived\"]\ntrain_data.drop(\"Survived\", axis=1, inplace=True)","86a6c6fd":"train_data.drop(\"Cabin\", axis=1, inplace=True)\ntest_data.drop(\"Cabin\", axis=1, inplace=True)","e8173f1c":"X = train_data.values\ny = expected_values.values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify=y)","7b63e8b7":"model = RandomForestClassifier(criterion='gini',\n                                           n_estimators=1750,\n                                           max_depth=7,\n                                           min_samples_split=6,\n                                           min_samples_leaf=6,\n                                           max_features='auto',\n                                           oob_score=True,\n                                           random_state=42,\n                                           n_jobs=-1,\n                                           verbose=1) ","7a68c785":"model.fit(X_train, y_train)\n\ny_pred_train = model.predict(X_train)\ny_pred_test = model.predict(X_test)","99debcd4":"print(\"Training accuracy: \", accuracy_score(y_train, y_pred_train))\nprint(\"Testing accuracy: \", accuracy_score(y_test, y_pred_test))","76b0c048":"column_values = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'] \n\nX_train_df = pd.DataFrame(data = X_train,   \n                  columns = column_values) \nX_test_df = pd.DataFrame(data = X_test,   \n                  columns = column_values) ","4393e038":"def feature_importance(model):\n    importances = model.feature_importances_\n    indices = np.argsort(importances)\n    features = X_train_df.columns\n    plt.title('Feature Importance')\n    plt.barh(range(len(indices)), importances[indices], color=custom_colors[2], align='center')\n    plt.yticks(range(len(indices)), [features[i] for i in indices])\n    plt.xlabel('Relative Importance')\n    plt.show()","15caae42":"def visualize_metrics(model, model_name) :  \n    \n    cm = confusion_matrix(y_test, y_pred_test)\n    x =  [\"0 (pred)\",\"1 (pred)\"]\n    y = [\"0 (actual)\",\"1 (actual)\"]\n    \n    trace1 = go.Heatmap(z = cm  ,x = x,\n                        y = y,xgap = 1, ygap = 1, \n                        colorscale = 'purpor', showscale  = False)\n    \n    \n    fpr, tpr, _ = roc_curve(y_test, y_pred_test)\n    roc_auc = auc(fpr, tpr)\n\n    trace2 = go.Scatter(x=fpr, y=tpr,\n                        name = \"ROC : \" ,\n                        line = dict(color = ('rgb(209,0,209)'),width = 2), fill='tozeroy',fillcolor=('rgba(1209,0,209,0.7)'))\n    trace3 = go.Scatter(x = [0,1],y = [0,1],\n                        line = dict(color = ('black'),width = 1.5,\n                        dash = 'dot'))\n\n    precision, recall, _ = precision_recall_curve(y_test, y_pred_test)\n    \n    \n    tp = cm[1,1]\n    fn = cm[1,0]\n    fp = cm[0,1]\n    tn = cm[0,0]\n    Accuracy  =  ((tp+tn)\/(tp+tn+fp+fn))\n    Precision =  (tp\/(tp+fp))\n    Recall    =  (tp\/(tp+fn))\n    F1_score  =  (2*(((tp\/(tp+fp))*(tp\/(tp+fn)))\/((tp\/(tp+fp))+(tp\/(tp+fn)))))\n\n    show_metrics = pd.DataFrame(data=[[F1_score,Recall,Precision,Accuracy]])\n    show_metrics = show_metrics.T\n    trace4 = go.Bar(x = (show_metrics[0].values), \n                    y = ['F1 score ','Recall ','Precision ','Accuracy '], text = np.round_(show_metrics[0].values,4),\n                    textposition = 'auto', textfont=dict(color='black'),\n                    orientation = 'h', opacity = 1, marker=dict(\n            color=custom_colors,\n            line=dict(color='#000000',width=1.5)))\n\n    \n    trace5 = go.Scatter(x = recall, y = precision,\n                        name = \"Precision\" + str(precision),\n                        line = dict(color = ('rgb(222,170,255)'),width = 2), fill='tozeroy',fillcolor=('rgba(222,170,255,0.7)'))\n    \n    fig = make_subplots(rows=2, cols=2, print_grid=False,\n                          specs=[[{}, {}], \n                                 [{}, {}]],\n                          subplot_titles=('Confusion Matrix',\n                                          'ROC curve'+\" \"+ '('+ str(round(roc_auc,3))+')',\n                                          'Metrics',\n                                          'Precision - Recall curve',\n                                          ),\n                        horizontal_spacing = 0.2\n                       )\n        \n    fig.append_trace(trace1,1,1)\n    fig.append_trace(trace2,1,2)\n    fig.append_trace(trace3,1,2)\n    fig.append_trace(trace4,2,1)\n    fig.append_trace(trace5,2,2)\n    \n    fig['layout'].update(showlegend = False, title = '<b>Visualizing Metrics<\/b><br>'+model_name, title_x=0.5,\n                        autosize = False, height = 800, width = 800,\n                        plot_bgcolor = 'white',\n                        paper_bgcolor = 'white',\n                        margin = dict(b = 195), font=dict(color='black'))\n    \n    fig[\"layout\"][\"xaxis1\"].update(showgrid=False, color = 'black',title= \"Predicted value\")\n    fig[\"layout\"][\"yaxis1\"].update(showgrid=False, color = 'black',title= \"Actual value\")\n    fig[\"layout\"][\"xaxis2\"].update(dict(title = \"False Positive Rate\"), color = 'black',showgrid=True, gridwidth=1, gridcolor='black',zeroline=True, zerolinewidth=2, zerolinecolor='black')\n    fig[\"layout\"][\"yaxis2\"].update(dict(title = \"True Positive Rate\"),color = 'black',showgrid=True, gridwidth=1, gridcolor='black',zeroline=True, zerolinewidth=2, zerolinecolor='black')\n    fig[\"layout\"][\"xaxis3\"].update(dict(range=[0, 1], color = 'black'),showgrid=True, gridwidth=1, gridcolor='black')\n    fig[\"layout\"][\"yaxis3\"].update(color = 'black')\n    fig[\"layout\"][\"xaxis4\"].update(dict(title = \"recall\"), range = [0,1.05],color = 'black',showgrid=True, gridwidth=1, gridcolor='black')\n    fig[\"layout\"][\"yaxis4\"].update(dict(title = \"precision\"), range = [0,1.05],color = 'black',showgrid=True, gridwidth=1, gridcolor='black')\n \n    for i in fig['layout']['annotations']:\n        i['font'] = titlefont=dict(color='black', size = 14)\n\n    py.iplot(fig)","12b3dff2":"visualize_metrics(model, 'Random Forest Classifier')","f10ab1f6":"feature_importance(model)","f8a1a2ac":"model.fit(train_data, expected_values)\nprint(\"%.4f\" % model.oob_score_)","8b2e725d":"passenger_IDs = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")[[\"PassengerId\"]].values\npreds = model.predict(test_data.values)\npreds","ed9cba1e":"df = {'PassengerId': passenger_IDs.ravel(), 'Survived': preds}\ndf_predictions = pd.DataFrame(df).set_index(['PassengerId'])\ndf_predictions.head(10)","026b773b":"df_predictions.to_csv('\/kaggle\/working\/Predictions.csv')","694a35d7":"<div class=\"alert alert-info\">  \n<h3><strong>SibSp vs Survived<\/strong><\/h3>\n<\/div>","07de28d9":"<div>\n<img src=\"https:\/\/i.imgur.com\/bvyChJc.jpg\">\n<\/div>","05861b13":"<div class=\"alert alert-info\">  \n<h3><strong>Distrubution of Age<\/strong><\/h3>\n<\/div>","a60e1833":"<div class=\"alert alert-info\">  \n<h3><strong>Number of Unique values per column<\/strong><\/h3>\n<\/div>\n","10900eb7":"Generates profile reports from a pandas DataFrame. \n\nThe pandas df.describe() function is great but a little basic for serious exploratory data analysis. pandas_profiling extends the pandas DataFrame with df.profile_report() for quick data analysis.","4a91d803":"<div class=\"alert alert-info\">  \n<h3><strong>Checking columns for null values<\/strong><\/h3>\n<\/div>\n","de542f63":"<div class=\"alert alert-info\">  \n<h3><strong>Gender vs Survived<\/strong><\/h3>\n<\/div>","6a1bd50d":"<div class=\"alert alert-info\">  \n<h3><strong>Dropping columns and filling NA values using the specified method<\/strong><\/h3>\n<\/div>","61e82c33":"Male: 577\nFemale: 314","a5514357":"<div class=\"alert alert-info\">  \n<h3><strong>Reading the csv files<\/strong><\/h3>\n<\/div>","89611e48":"* A, B and C have only class 1 passengers.\n* D has both class 1 and 2 passengers. E has class 1, 2 and 3 passengers. So these two can be grouped together.\n* F and G both have class 2 and 3 passengers.","9dba5e3c":"<div>\n<img src=\"https:\/\/i.imgur.com\/WEzWTOU.jpg\" width=\"600\" height=\"400\">\n<\/div>","c00db26a":"<div class=\"alert alert-info\">  \n<h3><strong>Generate descriptive statistics<\/strong><\/h3>\n<\/div>","0126ce53":"> All passenger IDs are unique and there are no missing values for this column.","c8f67e4a":"There is no evidence that anyone else occupied the T Boat Deck cabin.\nSince he was a class 1 passenger, we group him with the A deck passengers.","d380d196":"<div class=\"alert alert-info\">  \n<h3><strong>Age vs Survived<\/strong><\/h3>\n<\/div>","eaf3de40":"<div class=\"alert alert-info\">  \n<h3><strong>Data types of attributes<\/strong><\/h3>\n<\/div>\n","b1e7235e":"<div class=\"alert alert-info\">  \n<h3><strong>Distribution of Gender<\/strong><\/h3>\n<\/div>","18d43d2a":"<div>\n<img src=\"https:\/\/i.imgur.com\/FAMeIC7.png\">\n<\/div>","3b557b84":"> After grouping ","27539170":"<div class=\"alert alert-info\">  \n<h3><strong>Creating the submission file<\/strong><\/h3>\n<\/div>","d50f66c2":"<div class=\"alert alert-info\">  \n<h3><strong>Correlation<\/strong><\/h3>\n<\/div>","d8922b37":"Distribution of class","046d3f09":"<div class=\"alert alert-info\">  \n<h3><strong>Precision, Recall, F1 score<\/strong><\/h3>\n<\/div>","ccdb6a14":"<div class=\"alert alert-info\">  \n<h3><strong>Modifying Cabin column<\/strong><\/h3>\n<\/div>","1f55287f":"<div class=\"alert alert-info\">  \n<h3><strong>Imports<\/strong><\/h3>\n<\/div>","491328d1":"<div>\n<img src=\"https:\/\/media1.tenor.com\/images\/36ee59cad8a7e51c9546613e4521dc17\/tenor.gif?itemid=14438682\">\n<\/div>","8aa2d517":"<div class=\"alert alert-info\">  \n<h3><strong>Training and testing<\/strong><\/h3>\n<\/div>","60cb9692":"* Cabin 0: ABC\n* Cabin 1: DE\n* Cabin 2: FG\n* Cabin 3: Z(missing values)","93338614":"> The women and children were allowed to leave the ship first.","777db9ef":"Z indicates those values that are missing.","21c8316d":"<div class=\"alert alert-info\">  \n<h3><strong>ROC Curve<\/strong><\/h3>\n<\/div>\n\n![](https:\/\/glassboxmedicine.files.wordpress.com\/2019\/02\/roc-curve-v2.png?w=576)","af74a432":"<div class=\"alert alert-info\">  \n<h3><strong>EDA<\/strong><\/h3>\n<\/div>","92e9cc4b":"<div class=\"alert alert-info\">  \n<h3><strong>Fare vs Survived<\/strong><\/h3>\n<\/div>","aef526b3":"Decks","a3d0ae94":"> Before grouping","96235548":"<div class=\"alert alert-info\">  \n<h3><strong>Distribution of Fare<\/strong><\/h3>\n<\/div>","afa54e4c":"<div class=\"alert alert-info\">  \n<h3><strong>Pandas profiling<\/strong><\/h3>\n<\/div>","cc1e3535":"<div class=\"alert alert-info\">  \n<h3><strong>Pclass and Age vs Survived<\/strong><\/h3>\n<\/div>","43d2a093":"<div class=\"alert alert-info\">  \n<h3><strong>Parch vs Survived<\/strong><\/h3>\n<\/div>\n","a8df9a74":"* DataFrame.count: \nCount number of non-NA\/null observations.\n\n* DataFrame.max: \nMaximum of the values in the object.\n\n* DataFrame.min:\nMinimum of the values in the object.\n\n* DataFrame.mean:\nMean of the values.\n\n* DataFrame.std:\nStandard deviation of the observations.","d4dc8d52":"<div class=\"alert alert-info\">  \n<h3><strong>Label encoding<\/strong><\/h3>\n<\/div>","853cabb2":"<div class=\"alert alert-info\">  \n<h3><strong>Embarked and Fare vs Survived<\/strong><\/h3>\n<\/div>","865b77af":"<div class=\"alert alert-info\">  \n<h3><strong>Cabin vs Survived<\/strong><\/h3>\n<\/div>","6a179c09":"<div class=\"alert alert-info\">  \n<h3><strong>Confusion Matrix<\/strong><\/h3>\n<\/div>\n\n\n![](https:\/\/miro.medium.com\/max\/2800\/0*9r99oJ2PTRi4gYF_.jpg)","ae7afb5f":"<div class=\"alert alert-block alert-success\">  \n<h1><center><strong>\ud83d\udea2 Break the ice<\/strong><\/center><\/h1>\n    <p>\n    The sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nConsidering this, we have been asked to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (i.e. name, age, gender, socio-economic class, etc).\n\n<\/p>\n<\/div>"}}