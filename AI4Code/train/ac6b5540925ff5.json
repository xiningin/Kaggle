{"cell_type":{"111b64ef":"code","228f61da":"code","cf787020":"code","0714fa26":"code","74f18da2":"code","5e32b9b4":"code","738a6d96":"code","d541a64a":"code","df3033b4":"code","a42de574":"code","15ec9ff9":"code","b3855657":"code","61c83980":"code","3f6b0b74":"code","ebe3381b":"code","05e717a3":"code","e1d8f2a9":"code","de449958":"code","6ce06498":"code","dbf29c2a":"code","55628ad5":"code","e66ab2ef":"code","38fcbaa8":"code","5c8fa2a7":"code","8dba06e5":"code","cc837260":"code","4914b843":"code","6f64a438":"code","a49671ef":"code","387137f4":"code","9efd56d6":"code","67cadd32":"code","38e54fdf":"code","b8b1cdaf":"code","c4a2e7bb":"code","b200afc9":"code","c492041c":"code","2a93c530":"code","d07b6d57":"code","b0f2431c":"code","9d4a4ece":"code","f4a2e15c":"code","6efefc02":"code","87b006be":"code","415a7f27":"code","386658c3":"code","d010dba8":"code","be4ebf0c":"code","1a5f5861":"code","49e6076e":"code","fb1226f0":"code","b31e1e60":"code","5ae5cc82":"code","250bba77":"code","f2fb6c7a":"code","16e322d6":"code","4b8d74d0":"code","6dcd7148":"code","c5111e77":"code","f78d86f4":"code","85335244":"code","21ea3f06":"code","bdd6d2a9":"code","cbfa5c6b":"code","a6e73d98":"code","85bdcf3d":"code","844f5ab3":"code","7e2c66c4":"code","0c5ddff3":"code","0b8f35c6":"code","9817b400":"code","c69fa287":"code","4c54bc0c":"markdown","f1099acd":"markdown","31a4850c":"markdown","9d68560d":"markdown","7f430cb7":"markdown","92846886":"markdown","437cda8f":"markdown","7ee8d219":"markdown","5484a7bc":"markdown","3483965c":"markdown","41ccd217":"markdown","e085629e":"markdown","1bdbad3e":"markdown","82315ebb":"markdown","e8c6acbf":"markdown","913bac69":"markdown"},"source":{"111b64ef":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter # counting instances\nimport re # parsing play descriptions\nimport matplotlib.pyplot as plt # data visualizations\nfrom scipy.stats import ttest_ind # signficance test\nimport os\nprint(os.listdir(\"..\/input\"))","228f61da":"# Punt Play Information\nplay_info_pd = pd.read_csv(\"..\/input\/play_information.csv\")\nplay_info_pd.head()","cf787020":"play_info_pd.Play_Type.unique() # All the plays are punts","0714fa26":"# Concussion (ccus) Information\nccus_review_pd = pd.read_csv(\"..\/input\/video_review.csv\")\nccus_review_pd.head()","74f18da2":"# Other files to consider\nvideo_replay = pd.read_csv(\"..\/input\/video_footage-injury.csv\")","5e32b9b4":"# Count varying activities\nplayer_activity_dict = Counter(ccus_review_pd.Player_Activity_Derived)\npartner_activity_dict = Counter(ccus_review_pd.Primary_Partner_Activity_Derived)\nff_dict = Counter(ccus_review_pd.Friendly_Fire)\nimpact_dict = Counter(ccus_review_pd.Primary_Impact_Type)","738a6d96":"print(\"Concussions occur on\",round(100*ccus_review_pd.shape[0] \/ play_info_pd.shape[0],2),\"% of punt plays\") \nprint(\"\\nConcussed Players Activity:\")\nfor activity in player_activity_dict.keys():\n    print(activity+':',round(100*player_activity_dict[activity]\/ccus_review_pd.shape[0],2), '%')\nprint(\"\\nConcussed Partners Activity:\")\nfor activity in partner_activity_dict.keys():\n    if pd.isnull(activity):\n        continue\n    print(activity+':',round(100*partner_activity_dict[activity]\/ccus_review_pd.shape[0],2), '%')\nprint('\\nFriendly Fire Concussions occur on', round(100*ff_dict['Yes']\/ccus_review_pd.shape[0],2), '% of concussions')\nprint('\\nImpact Area:')\nfor area in impact_dict.keys():\n    print(area+':',round(100*impact_dict[area]\/ccus_review_pd.shape[0],2), '%')","d541a64a":"player_pos_pd = pd.read_csv('..\/input\/player_punt_data.csv').drop(['Number'], axis=1)\nplayer_pos_pd.head()","df3033b4":"punt_pos_pd = pd.read_csv('..\/input\/play_player_role_data.csv')\npunt_pos_pd.head()","a42de574":"video_replay = pd.read_csv(\"..\/input\/video_footage-injury.csv\")","15ec9ff9":"ccus_positions_pd = ccus_review_pd.join(player_pos_pd.set_index('GSISID'), on='GSISID', how='left').drop_duplicates()\nccus_positions_pd.head()","b3855657":"ccus_both_positions_pd = pd.merge(ccus_positions_pd, punt_pos_pd,  how='left', on=['GSISID','GameKey','PlayID','Season_Year'])","61c83980":"ccus_both_positions_pd.head()","3f6b0b74":"# Count concussions per position\nreal_pos_dict = Counter(ccus_both_positions_pd.Position)\npunt_pos_dict = Counter(ccus_both_positions_pd.Role)\ncoverage_pos = ['GL','PLW','PLT','PLG','PLS','PRG','PRT','PRW','PC','PPR','P','GR']\nreturn_pos = ['VR','PDR1','PDR2','PDR3','PDL3','PDL2','PDL1','VL','PLR','PLM','PLL','PFB','PR']\ncoverage_ccus = ccus_both_positions_pd[ccus_both_positions_pd.Role.isin(coverage_pos)].shape[0]\nreturn_ccus = ccus_both_positions_pd[ccus_both_positions_pd.Role.isin(return_pos)].shape[0]\nprint(\"Concussed Players Off\/Def Position:\")\nfor pos in real_pos_dict.keys():\n    print(pos+':',round(100*real_pos_dict[pos]\/ccus_review_pd.shape[0],2), '%')\nprint(\"\\nConcussed Players Punt Position:\")\nfor pos in punt_pos_dict.keys():\n    print(pos+':',round(100*punt_pos_dict[pos]\/ccus_review_pd.shape[0],2), '%')\nprint(round(100*coverage_ccus\/ccus_review_pd.shape[0],2),'% concussions on coverage,',round(100*return_ccus\/ccus_review_pd.shape[0],2),'% concussions on return')","ebe3381b":"video_replay_pd = pd.read_csv(\"..\/input\/video_footage-injury.csv\")[['gamekey','playid','season','PREVIEW LINK (5000K)']]\nvideo_replay_pd.columns = ['GameKey','PlayID','Season_Year','Video']\nvideo_replay_pd.head()","05e717a3":"ccus_videos_pd = pd.merge(ccus_both_positions_pd, video_replay_pd,  how='left', on=['GameKey','PlayID','Season_Year'])\nccus_videos_pd.head()","e1d8f2a9":"#build dic bc I'm lazy\n# count = 0\n# for role in ccus_videos_pd.Role:\n#     print(\"'\"+role+\"':\",count,\",\")\n#     count += 1","de449958":"action_dict = {\n'PLW': 'Tackling PR, foot\/ground to head' ,\n'GL': 'Blindside block right',\n'GR': 'Diving for fumble on muff' ,\n'PRT': 'Group Tackling PR' ,\n'PRT': 'Blindside block right' ,\n'PRW': 'H2H Block on line' ,\n'VR': 'head down block' ,\n'PFB': 'Pair of blockers run into' ,\n'PR': 'tackling during return' ,\n'PLG': 'blocked, head to ground near line',\n'PLG': 'pair of blockers run into during pursuit' ,\n'PRG': 'tackling PR' ,\n'PR': 'big hit during return' ,\n'P': 'tackled' ,\n'PLW': 'chop block knee to head' ,\n'GL': 'blocked into PR' ,\n'PLG': 'missed tackle' ,\n'GL': 'pair of blockers run into',\n'GL': 'head to body tackle' ,\n'PRG': 'blocked at the line' ,\n'PLT': 'blocked chasing PR' ,\n'PLG': 'blocked at the line' ,\n'PPR': 'group tackle' ,\n'PLS': 'blindside block' ,\n'PLT': 'H2H tackle' ,\n'PR': 'PR tackle' ,\n'PLW': 'tackle to ground on line' ,\n'PDR1': 'blocking for PR' ,\n'PRG': 'missed tackle, FF knee to head' ,\n'PR': 'big hit on return' ,\n'PDL2': 'H2H throwing big block' ,\n'PLL': 'H2H throwing big block' ,\n'PR': 'hit on return' ,\n'PRW': 'blocking at line' ,\n'PLS': 'H2H during tackle' ,\n'PLW': 'H2H during block at line' ,\n'PRG': 'ran into pair of blockers during tackle' ,\n}","6ce06498":"# Need Player number so I can follow them on video replay...\n# ... merging causes duplicate rows so quick fix is to work with two tables\nplayer_pos_pd = pd.read_csv('..\/input\/player_punt_data.csv')\nplayer_pos_pd.head()","dbf29c2a":"ccus_videos_pd.head()","55628ad5":"# Manually iterate through each video to check film for actions\n# number = player_pos_pd[player_pos_pd.GSISID == ccus_videos_pd.loc[i].GSISID].Number\n# if number.shape[0] > 1:\n#     number = list(number)[0]\n# else:\n#     number = number.item()\n# print(ccus_videos_pd.loc[i].Video, ccus_videos_pd.loc[i].Role, number)\n\n# i = i + 1","e66ab2ef":"play_info_pd.head()","38fcbaa8":"ccus_videos_pd.head()","5c8fa2a7":"no_return_str_list = ['fair catch','Touchback', 'out of bounds', 'BLOCKED', 'No Play', 'downed by', \n                     'Delay of Game', 'pass', 'False Start', 'Aborted', 'Fake punt']","8dba06e5":"# How often are punts returned\/not returned (return count) and build list of not_returned to compare to ccuss play list\nno_return_play_strings = []\nreturn_count = 0\ni = 0\nwhile i < len(play_info_pd.PlayDescription):\n    play_string = play_info_pd.loc[i].PlayDescription\n    return_flag = True\n    for phrase in no_return_str_list:\n        if phrase in play_string:\n            no_return_play_strings.append(play_string)\n            return_flag = False\n            break\n    if return_flag:\n        if ('Delay of Game' not in play_string) or ('pass' not in play_string):\n            return_count = return_count + 1\n    i = i + 1","cc837260":"# How many concussions happened on no return plays\nno_return_plays_pd = play_info_pd[play_info_pd.PlayDescription.isin(no_return_play_strings)]\nno_return_ccus_pd = pd.merge(ccus_videos_pd,no_return_plays_pd, on=['Season_Year','GameKey','PlayID'], how='inner')\nno_return_ccus_count = no_return_ccus_pd.shape[0]\nreturn_ccus_count = ccus_videos_pd.shape[0] - no_return_ccus_pd.shape[0]","4914b843":"print('Punts are returned', round(100*return_count \/ play_info_pd.shape[0],2), '% of the time')\nprint('Concussions occur on', round(100*return_ccus_count \/ return_count,2), '% of the time on return punts,')\nprint('in comparison to',round(100*no_return_ccus_count \/ no_return_plays_pd.shape[0],2), \"% on no return punts\")\nprint('Players are', round((round(100*return_ccus_count \/ return_count,2)\/round(100*no_return_ccus_count \/ no_return_plays_pd.shape[0],2)),2), 'times more likely to get concussed during a returned punt rather than a non-returned punt')","6f64a438":"# Find Return Yards\nreturn_plays_pd = play_info_pd[~play_info_pd.PlayDescription.isin(no_return_play_strings)]\nreturn_yards_list = []\nfor play_string in return_plays_pd.PlayDescription:\n    try:\n        # These are edge cases to cut out\n        if ('Delay of Game' in play_string) or ('pass' in play_string) or ('False Start' in play_string) or ('Aborted' in play_string):\n            continue\n        # 0 yard returns in natural language\n        elif ('for no gain' in play_string) or ('MUFFS' in play_string):\n            yards = 0\n        else:\n            yards = int(re.findall(r'for (\\-*[0-9]*) yard',play_string)[0])\n        return_yards_list.append(yards)\n    except:\n        print(play_string)\n        continue","a49671ef":"fig, ax = plt.subplots(dpi=150)  \nax.hist(return_yards_list,  color = \"#A8122A\", bins=100,)\nplt.title('Punt Return Yards')\nplt.xlabel('Yards after Catch')\nplt.ylabel('# of Punts')\nplt.ylim(top=450)\nplt.xlim([-20,100])\nplt.show()\nprint('Average (Mean) Punt Return Length:',round(np.mean(return_yards_list),2))\nprint('Median Punt Return Length:', np.median(return_yards_list))","387137f4":"# Find Punt Length\npunt_yards_list = []\nfor play_string in play_info_pd.PlayDescription:\n    try:\n        # These are edge cases to cut out\n        if ('Delay of Game' in play_string) or ('pass' in play_string) or ('False Start' in play_string) or ('Aborted' in play_string):\n            continue\n        # More edge cases for all punt scenarios\n        if ('BLOCKED' in play_string) or ('formation) PENALTY' in play_string):\n            continue\n        else:\n            yards = int(re.findall(r'punts (\\-*[0-9]*) yard',play_string)[0])\n        punt_yards_list.append(yards)\n    except:\n#         print(play_string)\n        continue #There wasn't a punt on this play because it was a fake (language too board to continue statment)","9efd56d6":"# TODO: Why is there a spike at 53 for punt returns?\nfig, ax = plt.subplots(dpi=150)  \nax.hist(punt_yards_list, color = '#ffe599', bins=75,)\nplt.title('Punt Yards')\nplt.xlabel('Length of Punt')\nplt.ylabel('# of Punts')\nplt.xlim([0,100])\nplt.show()\nprint('Average (Mean) Punt Length:',round(np.mean(punt_yards_list),2))\nprint('Median Punt Length:', np.median(punt_yards_list))","67cadd32":"punt_length_pd = play_info_pd\n\n# Find Punt Length\npunt_yards_list = []\n# Run the same as above but flag all non-returns so that I can cut them post merge\nfor play_string in play_info_pd.PlayDescription:\n    try:\n        # These are edge cases to cut out\n        if ('Delay of Game' in play_string) or ('pass' in play_string) or ('False Start' in play_string) or ('Aborted' in play_string):\n            yards = 300\n        # More edge cases for all punt scenarios\n        if ('BLOCKED' in play_string) or ('formation) PENALTY' in play_string):\n            yards = 300\n        else:\n            yards = int(re.findall(r'punts (\\-*[0-9]*) yard',play_string)[0])\n        punt_yards_list.append(yards)\n    except:\n        # There wasn't a punt on this play because it was a fake (language too board to continue statment)\n        punt_yards_list.append(300)\n    \n    \npunt_length_pd['punt_length'] = punt_yards_list\npunt_length_pd.head()","38e54fdf":"ccuss_length_pd = pd.merge(ccus_videos_pd, punt_length_pd, on=['Season_Year','GameKey','PlayID'], how='inner')\nccuss_length_pd.head()","b8b1cdaf":"fortyfive_plus_ccuss_count = ccuss_length_pd[ccuss_length_pd.punt_length <= 45].shape[0]\nfortyfive_minus_ccuss_count = ccuss_length_pd[ccuss_length_pd.punt_length != 300].shape[0] - fortyfive_plus_ccuss_count\nfortyfive_plus_count = punt_length_pd[punt_length_pd.punt_length <= 45].shape[0]\nfortyfive_minus_count = punt_length_pd[punt_length_pd.punt_length != 300].shape[0] - fortyfive_plus_count","c4a2e7bb":"print('Concussions occur on', round(100*fortyfive_plus_ccuss_count \/ fortyfive_plus_count,2), '% of the time on punts longer than 45yrds,')\nprint('in comparison to',round(100*fortyfive_minus_ccuss_count \/ fortyfive_minus_count,2), \"% on punts shorter than 45\")\nprint('Players are', round((round(100*fortyfive_minus_ccuss_count \/ fortyfive_minus_count,2)\/round(100*fortyfive_plus_ccuss_count \/ fortyfive_plus_count,2)),2), 'times more likely to get concussed during a punt longer than 45yrds')","b200afc9":"# Check for significance\nccuss_length_mark_pd = ccuss_length_pd[['Season_Year','GameKey','Week','PlayID','punt_length']]\nccuss_length_mark_pd['marker'] = 1\nccuss_length_mark_pd.head()","c492041c":"joined = pd.merge(punt_length_pd, ccuss_length_mark_pd, on=['Season_Year','GameKey','Week','PlayID','punt_length'], how='left')","2a93c530":"no_ccuss_punts = joined[pd.isnull(joined['marker'])][punt_length_pd.columns]\nccuss_punt_length = ccuss_length_mark_pd.punt_length\nno_ccuss_punt_length = no_ccuss_punts.punt_length","d07b6d57":"stat, pvalue = ttest_ind(ccuss_punt_length,no_ccuss_punt_length)\nprint('The Line of Scrimmage for concussions, averaging around',round(np.mean(ccuss_punt_length),4), ',\\nis statistically distinct from the line for non-concussions, averaging around',round(np.mean(no_ccuss_punt_length),2),':', pvalue < 0.05)","b0f2431c":"play_info_pd.head()","9d4a4ece":"ccus_videos_pd.head()","f4a2e15c":"punt_location = []\nfor i in range(play_info_pd.shape[0]):\n    line_of_scrim = play_info_pd.loc[i].YardLine\n    \n    clean_line = re.findall(r'(\\w+) ([0-9]+)',line_of_scrim)[0]\n    \n    team = clean_line[0]\n    line = int(clean_line[1])\n    \n    if team != play_info_pd.loc[i].Poss_Team:\n        line = 100 - line\n    punt_location.append(line)","6efefc02":"plt.hist(punt_location, bins=60,)\nplt.title('Punt Locations')\nplt.xlabel('Line of Scrimmage')\nplt.ylabel('# of Punts')\nplt.show()\nprint('Average (Mean) Location:',round(np.mean(punt_location),2))\nprint('Median Punt Location:', np.median(punt_location))","87b006be":"punt_loc_pd = play_info_pd\npunt_loc_pd = punt_loc_pd[['Season_Year','GameKey','Week','PlayID']]\npunt_loc_pd['yard_line'] = pd.Series(punt_location)\npunt_loc_pd.head()","415a7f27":"ccuss_line_pd = pd.merge(ccus_videos_pd, punt_loc_pd, on=['Season_Year','GameKey','PlayID'], how='inner')","386658c3":"ccuss_line = list(ccuss_line_pd.yard_line)\nplt.hist(ccuss_line)\nplt.title('Concussed Punt Locations')\nplt.xlabel('Line of Scrimmage')\nplt.ylabel('# of Punts')\nplt.show()\nprint('Average (Mean) Concussed Punt Location:',round(np.mean(ccuss_line),2))\nprint('Median Concussed Punt Location:', np.median(ccuss_line))","d010dba8":"# Run T-Test to see if this is significant\nccuss_line_pd.head()","be4ebf0c":"within_forty_ccuss_count = ccuss_line_pd[ccuss_line_pd.yard_line <= 40].shape[0]\noutside_fourty_ccuss_count = ccuss_line_pd.shape[0] - within_forty_ccuss_count\nwithin_fourty_count = punt_loc_pd[punt_loc_pd.yard_line <= 40].shape[0]\noutside_fourty_count = punt_loc_pd.shape[0] - within_fourty_count","1a5f5861":"print('Concussions occur on', round(100*within_forty_ccuss_count \/ within_fourty_count,2), '% of the time on punts within own 40,')\nprint('in comparison to',round(100*outside_fourty_ccuss_count \/ outside_fourty_count,2), \"% on punts outside your 40\")\nprint('Players are', round((round(100*within_forty_ccuss_count \/ within_fourty_count,2)\/round(100*outside_fourty_ccuss_count \/ outside_fourty_count,2)),2), 'times more likely to get concussed during a punt within your own 40')","49e6076e":"within_forty_ccuss_count = ccuss_line_pd[ccuss_line_pd.yard_line <= 35].shape[0]\noutside_fourty_ccuss_count = ccuss_line_pd.shape[0] - within_forty_ccuss_count\nwithin_fourty_count = punt_loc_pd[punt_loc_pd.yard_line <= 35].shape[0]\noutside_fourty_count = punt_loc_pd.shape[0] - within_fourty_count\n\nprint('Concussions occur on', round(100*within_forty_ccuss_count \/ within_fourty_count,2), '% of the time on punts within own 35,')\nprint('in comparison to',round(100*outside_fourty_ccuss_count \/ outside_fourty_count,2), \"% on punts outside your 35\")\nprint('Players are', round((round(100*within_forty_ccuss_count \/ within_fourty_count,2)\/round(100*outside_fourty_ccuss_count \/ outside_fourty_count,2)),2), 'times more likely to get concussed during a punt within your own 35')","fb1226f0":"# Run t test to prove significance \n\nccuss_line_mark_pd = ccuss_line_pd[['Season_Year','GameKey','Week','PlayID','yard_line']]\nccuss_line_mark_pd['marker'] = 1\nccuss_line_mark_pd.head()","b31e1e60":"punt_loc_pd.head()","5ae5cc82":"joined = pd.merge(punt_loc_pd, ccuss_line_mark_pd, on=['Season_Year','GameKey','Week','PlayID','yard_line'], how='left')","250bba77":"no_ccuss_punts = joined[pd.isnull(joined['marker'])][punt_loc_pd.columns]\nccuss_punt_yards = ccuss_line_mark_pd.yard_line\nno_ccuss_punt_yards = no_ccuss_punts.yard_line","f2fb6c7a":"stat, pvalue = ttest_ind(ccuss_punt_yards,no_ccuss_punt_yards)\nprint('The Line of Scrimmage for concussions, averaging around',round(np.mean(ccuss_punt_yards),4), ',\\nis statistically distinct from the line for non-concussions, averaging around',round(np.mean(no_ccuss_punt_yards),2),':', pvalue < 0.05)","16e322d6":"# http:\/\/www.espn.com\/nfl\/statistics\/team\/_\/stat\/returning\/position\/defense\n# Average Kickoff Return Length: 22.98yrds\n# Kickoff Touchback Length: 25yrds\n# Kickoffs into endzone:\n# Kickoffs taken out of endzone: 163\n# https:\/\/profootballtalk.nbcsports.com\/2017\/10\/17\/kickoff-returners-keep-taking-the-ball-out-of-the-end-zone-costing-their-teams-yards\/; football outsiders\n","4b8d74d0":"# 2017 Season Kickoff Stats\n# Kickoffs are a good yardstick because they have a touchback (25yrds) that is more than the average kickoff return (21.5yrds) \n# (https:\/\/www.teamrankings.com\/nfl\/stat\/touchbacks-per-game?date=2018-02-05) and in 2017 kickoffs have a higher concussion rate (0.6%)\n# the average plays (0.4%)... as do punts (0.5%) (https:\/\/www.youtube.com\/watch?time_continue=449&v=t_SsIKgwvz4)\n\n# By Oct 17, 2017 there were 163 return taken out of the endzone (profootballtalk)\n# By that date 75 games had been played (wiki)\n# There were an average of 4.96 kickoffs per team per game (https:\/\/www.teamrankings.com\/nfl\/stat\/kickoffs-per-game?date=2018-02-05)\n# and touchbacks account for 2.8 of those kickoffs (https:\/\/www.teamrankings.com\/nfl\/stat\/touchbacks-per-game?date=2018-02-05)\n# So with 5.6 touchbacks\/game, there are currently 420 touchbacks\n# Let's build in the assumption that 25% of those touchbacks are unreturnable-- they go out the back of the endzone (420*.75 = 315)\n# % of players opting to touchback when the option is available = 1 - (163\/(163+315)) = 66% \n# Based on data more than half of all punt returns would benefit from a 10yrd touchback, so lets assume 50% have the real option of touchback\n# If 50% of returns have the option and 66% exercise this option, the number of returns would reduce by 33%\n# With returns occuring 33% less, returns reduce from 44% to 29.5%, with no returns occuring on 70.5%\n# Assuming no change in % of concussions occuring the types of punt plays, this will reduce\n\nprint('~New Rule Concussion %:',round(100*((.44*.0105)+(.56*.0016)),2))\nprint('New Rule Concussion %:',round(100*((.295*.0105)+(.705*.0016)),2))\ndelta = round(-100*((((.295*.0105)+(.705*.0016)) - ((.44*.0105)+(.56*.0016))) \/((.44*.0105)+(.56*.0016))),2)\nprint('Rule project to result in ',delta,'% reduction in concussion on punt plays')","6dcd7148":"i = 0","c5111e77":"# Manually iterate through each video to check film for actions\n# number = player_pos_pd[player_pos_pd.GSISID == ccus_videos_pd.loc[i].GSISID].Number\n# if number.shape[0] > 1:\n#     number = list(number)[0]\n# else:\n#     number = number.item()\n# print(action_list[i])\n# print(ccus_videos_pd.loc[i].Video, ccus_videos_pd.loc[i].Role, number)\n\n# i = i + 1","f78d86f4":"return_involved = 29\nreturn_irrelevant = 8","85335244":"print('Concussions directly related to a return occuring:',round(29\/(29+8),2),'%')\nprint('Return Concussions directly related to a return occuring:', round(29\/(29+8-no_return_ccus_count),2),'%')","21ea3f06":"return_plays_pd = play_info_pd[~play_info_pd.PlayDescription.isin(no_return_play_strings)]\nmuff_count = 0\nfor play_string in return_plays_pd.PlayDescription:\n    if 'MUFF' in play_string:\n        muff_count = muff_count + 1\nprint(muff_count,' total muffed punts (',round(100*muff_count\/return_plays_pd.shape[0],2),'%)')","bdd6d2a9":"muff_ccuss_pd = ccus_review_pd\nmuff_ccuss_pd['marker'] = 1\nmuff_joined = pd.merge(return_plays_pd, muff_ccuss_pd, on=['Season_Year','GameKey','PlayID'], how='left')","cbfa5c6b":"muff_ccuss_count = 0\nfor i in range(muff_joined.shape[0]):\n    play_string = muff_joined.loc[i].PlayDescription\n    if ('MUFF' in play_string) and (muff_joined.loc[i].marker == 1):\n        muff_ccuss_count = muff_ccuss_count + 1\nprint(muff_ccuss_count,'concussions occured on muffs,')\nprint(round(100*muff_ccuss_count\/muff_count,2),'% chance of concussion on a muffed punt')\n        ","a6e73d98":"# How often to concussions happen on fumbles?\nfum_ccuss_pd = ccus_review_pd\nfum_ccuss_pd['marker'] = 1\nfumble_joined = pd.merge(play_info_pd, fum_ccuss_pd, on=['Season_Year','GameKey','PlayID'], how='left')\n        ","85bdcf3d":"fumble_count = 0\nfumble_ccuss_count = 0\nfor i in fumble_joined.index:\n    play_string = fumble_joined.loc[i].PlayDescription\n    if ('FUMBLE' in play_string):\n        fumble_count = fumble_count + 1\n        if fumble_joined.loc[i].marker == 1:\n            fumble_ccuss_count = fumble_ccuss_count + 1\nprint(round(100*fumble_count\/fumble_joined.shape[0],2),'% chance of a fumble')\nprint(fumble_ccuss_count,'concussions occured on fumbles,')\nprint(round(100*fumble_ccuss_count\/fumble_count,2),'% chance of concussion on a fumble punt')","844f5ab3":"# How often is a kick returned for a touchdown?\ntd_count = 0\nfor play_string in return_plays_pd.PlayDescription:\n    if 'TOUCHDOWN' in play_string:\n        if 'FUMBLE' in play_string: # Check which team scored on fumble\n            print(play_string)\n            # Both fumbled TDs were for the defense, so don't count\n        else:   \n            td_count = td_count + 1\nprint(\"\\n\",round(100*td_count\/return_plays_pd.shape[0],2),'% chance of returned TD on returned punt')\nprint(round(100*td_count\/play_info_pd.shape[0],2),'% chance of returned TD on all punt')\n\nnew_td_amt = td_count\/return_plays_pd.shape[0]*(0.66)\nprint(\"\\n\",round(100*new_td_amt,2),'% chance of returned TD on returned punt post rule change')\nprint(round(100*(td_count*(0.66))\/play_info_pd.shape[0],2),'% chance of returned TD on all punt post rule change')\n\n# print('Rule reduces chance of TD by', round(((td_count\/play_info_pd.shape[0])-(td_count*(0.66))\/play_info_pd.shape[0]))\/(td_count\/play_info_pd.shape[0])),2))","7e2c66c4":"# How many penalties are there on returned punts?\npenalty_count = 0\nno_return_pen_count = 0\nfor play_string in return_plays_pd.PlayDescription:\n    if 'PENALTY' in play_string:\n        penalty_count = penalty_count + 1\nfor play_string in no_return_play_strings:\n    if 'PENALTY' in play_string:\n        no_return_pen_count = no_return_pen_count + 1\nprint(round(100*penalty_count\/return_plays_pd.shape[0],2),'% chance of penalty on returned punt')\nprint(round(100*no_return_pen_count\/len(no_return_play_strings),2),'% chance of penalty on non-returned punt')","0c5ddff3":"play_info_pd.head()","0b8f35c6":"# How many fair catches occur in the redzone?\nfc_count = 0\nfc_red_count = 0\nfor play_string in play_info_pd.PlayDescription:\n    if 'fair catch' in play_string:\n        fc_count = fc_count + 1\n    else:\n        continue\n    yard_line = int(re.findall(r'yards to\\s*[A-Z]*\\s(-*[0-9]*)',play_string)[0])\n    if yard_line <= 20:\n        fc_red_count = fc_red_count + 1\nprint(round(100*fc_red_count\/fc_count,2),'% of fair catches occur in redzone')\n\n# How often are kicks within the redzone returned? Beyond that, what areas of the field have highest\/lowest return rates?\n\n# Below is the field dict. This will breakdown where punts land on the field, and how often they are fair caught\n# field_fc_dict[key] is the yardline\n# field_fc_dict[key][0] is the number of fair caught balls\n# field_fc_dict[key][1] is the number of punts in that section of field\nfield_fc_dict = {\n    5:[0,0],\n    10:[0,0],\n    15:[0,0],\n    20:[0,0],\n    25:[0,0],\n    30:[0,0],\n    35:[0,0],\n    40:[0,0],\n    45:[0,0],\n    50:[0,0]\n}\n\nfor play_string in play_info_pd.PlayDescription:\n    if ('punt' not in play_string) or ('Touchback' in play_string) or ('BLOCKED' in play_string):\n        continue\n    try:\n        yard_line = int(re.findall(r'yards to\\s*[A-Z]*\\s(-*[0-9]*)',play_string)[0])\n    except:\n        if 'punt' in play_string:\n#             print(play_string)\n            continue\n    for field_section in field_fc_dict.keys():\n        if (yard_line <= int(field_section)) and (yard_line > int(field_section)-5):\n            if 'fair catch' in play_string:\n                field_fc_dict[field_section][0] = field_fc_dict[field_section][0] + 1\n            field_fc_dict[field_section][1] = field_fc_dict[field_section][1] + 1\n            break\n\nprint('\\nTotal Punts and Fair Catch Percentage every 5 yards:')\nfor fs in field_fc_dict.keys():\n    perc = round(100*field_fc_dict[fs][0]\/field_fc_dict[fs][1],2)\n    print(fs,'yards:',field_fc_dict[fs][1],'total punts,',field_fc_dict[fs][0],'fair catches (',perc,'%)' )\n        ","9817b400":"# Graph\nx = list(field_fc_dict.keys())\npunts = [field_fc_dict[fs][1] for fs in x]\nfcs = [field_fc_dict[fs][0] for fs in x]\nfig, ax = plt.subplots(dpi=150)    \nax.bar(x,punts, width = -5, label='punts', color='#ffe599',align='edge')\nax.bar(x,fcs, width = -5, label='fair catches', color='#a8122a',align='edge')\nplt.xlabel('Yard Line')\nplt.ylabel('# of Punts')\nplt.xlim([0,50])\nfor i in range(len(x)):\n    perc = str(round(100*fcs[i]\/punts[i],2)) + '%'\n    ax.text(x[i]-5,fcs[i]+12,perc,color='black',fontweight='bold', size = 8)\nplt.title('The number of punts and the number of fair catches \\nthat occur across the field; bucketed every 5 yards',fontsize=10)\nplt.suptitle('Punt Outcome per Yard Line', y=1.05, fontsize=18)\nax.legend()\nplt.show()","c69fa287":"# What percent of punts are within the 15? This percent will represent a reduction in solution efficacy\ntot_punts = sum([punts - fcs for punts, fcs in zip(punts, fcs)])\nred_punts = sum([punts - fcs for punts, fcs in zip(punts[:3], fcs[:3])])\nprint(round(100*red_punts\/tot_punts,2),'% of returned punts occur within the 15 yard line')","4c54bc0c":"# 1. Plays with no returns ***are safer*** than plays where the PR attempts to gain yards \n### [CONFIRMED]","f1099acd":" # 3. The average Punt is 40 yards\n ### [INCORRECT: Punts averaged 45 yards]","31a4850c":"# Counter: With the increase of fair-catches, there will be an increase in muffed returns, will this increase concussions?","9d68560d":"## 1. How often and what kinds of concussions occur on punt plays? ","7f430cb7":"# Hypothesis Testing","92846886":"# Counter: Will reducing returns actually reduce punt concussions? What if concussions happen on return plays, but not related to the return itself?\n### Test: What % of concussions occur after and directly related to a return attempt?","437cda8f":"## 3. What action led to these concussions? [subjective video review]","7ee8d219":"# 5. Concussions are more likely to occur on punts that are kicked within your own 40yr\n### [CONFIRMED]","5484a7bc":"## 2. Which positions get concussions during punts?","3483965c":"# Counter: How watchable are punts after this rule change?","41ccd217":"# 4. Longer Punts are correlated with more concussions\n### [INCORRECT]","e085629e":"# Will this rule remove the ability for punter to pin teams within their redzone?","1bdbad3e":"# Punt Touchback Impact\n## How effective will this rule be in reducing concussions?","82315ebb":" # 2. The average return is < 10 yards\n ### [CONFIRMED]","e8c6acbf":"#### While PRs get the most concussions and nearly half of all return concussions of all positions, it is only 13.5% of all concussions. The most common scenario for concussion is a punt coverage looking to make a tackle and getting blocked or ","913bac69":"# Data Orientation"}}