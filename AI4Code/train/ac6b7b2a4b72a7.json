{"cell_type":{"b794c9cb":"code","8e6ad320":"code","23f0980d":"code","83174bdc":"code","53ba0133":"code","82f7ccfe":"code","5b93698f":"code","2f3e488d":"code","57793706":"code","5fa03f93":"code","67d50f34":"code","4aee2037":"code","3e0b6337":"code","523617ac":"code","b7512469":"code","d5dae0dd":"code","3196f1e3":"code","26f76c86":"code","6eff5d9c":"markdown","a51764df":"markdown","4414bf40":"markdown","d380dd42":"markdown"},"source":{"b794c9cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e6ad320":"# Importing libraries\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","23f0980d":"df_heart = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf_saturation = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/o2Saturation.csv')","83174bdc":"df_heart.head(10)","53ba0133":"df_heart.shape[0]","82f7ccfe":"# checking df_heart dataset\n\ndf_heart.describe().round(2).T","5b93698f":"df_heart.info()","2f3e488d":"df_heart.nunique()","57793706":"plt.figure(figsize = (14,8))\nsns.heatmap(df_heart.corr().round(2), annot=True)","5fa03f93":"plt.figure(figsize = (8,5))\nax = df_heart.output.value_counts(ascending = True, normalize = True).plot(kind = 'bar', color = ['c', 'crimson'], edgecolor = 'k')\nax.set_title('Distribution of heart attack probabilities', fontsize = 15)\nax.set_xticklabels([0,1], rotation = 0)","67d50f34":"ax = sns.boxplot(x = 'output', y = 'thalachh', data = df_heart, width = 0.5)\nax.figure.set_size_inches(12, 6)\nax.set_title('Relationship between heart attack and maximum heart rate', fontsize = 20)\nax.set_ylabel('heart rate', fontsize = 16)\nax.set_xlabel('output', fontsize = 16)\nax","4aee2037":"ax = sns.boxplot(x = 'output', y = 'oldpeak', data = df_heart, width = 0.5)\nax.figure.set_size_inches(12, 6)\nax.set_title('Relationship between heart attack and heart peak', fontsize = 20)\nax.set_ylabel('heart peak', fontsize = 16)\nax.set_xlabel('output', fontsize = 16)\nax","3e0b6337":"ax = sns.boxplot(x = 'output', y = 'age', data = df_heart, width = 0.5)\nax.figure.set_size_inches(12, 6)\nax.set_title('Relationship between heart attack and age', fontsize = 20)\nax.set_ylabel('age', fontsize = 16)\nax.set_xlabel('output', fontsize = 16)\nax","523617ac":"plt.figure(figsize = (10,6))\nsns.set_style('darkgrid')\nax = sns.distplot(df_heart['age'])\nax.set_title('Age distribution', fontsize = 20)","b7512469":"plt.figure(figsize = (8,5))\nax = sns.countplot(data = df_heart, x = 'exng', palette = ['c', 'crimson'], hue = 'output')\nax.set_title('Heart attack vs exercise induced angina (1 = yes; 0 = no)', fontsize = 15)\nax.set_xlabel('exercise induced angina', fontsize = 15)\nax.set_ylabel('')","d5dae0dd":"# setting a series to output and a dataframe for the significant variables\ny = df_heart['output']\nX = df_heart[['cp', 'thalachh', 'exng', 'oldpeak']]","3196f1e3":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# setting X and y for train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\nlr_model = LogisticRegression().fit(X_train, y_train)\nprint(lr_model.score(X_test, y_test))","26f76c86":"scores = []\nfor i in [0.0001, 0.001, 0.01, 0.1, 1, 2, 5, 10]:\n    lr_model = LogisticRegression(C = i).fit(X_train, y_train)\n    scores.append(lr_model.score(X_test, y_test))\n\nplt.figure(figsize = (12,5))\nplt.plot(scores)\nplt.title('Scores of Logistic Regression Classification - C = 0.0001 to 10', fontsize = '20')\nplt.xlabel('C', fontsize = 15)\nplt.ylabel('Score', fontsize = 15)\nplt.xticks([0.0001, 0.001, 0.01, 0.1, 1, 2, 5, 10])\n\nprint('Max score: {:.4f}'.format(max(scores)))","6eff5d9c":"# Logistic regression with significant variables (>0,4)","a51764df":"unless it seems that young people have more chances of having heart attack, few youger people are part of the sample. So let's check another bivariate analysis","4414bf40":"## outuput vs continuous variables","d380dd42":"# Output distribution visualization"}}