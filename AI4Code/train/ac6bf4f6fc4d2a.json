{"cell_type":{"4a7df0e1":"code","6a3e333b":"code","cb36e8cc":"code","ba1ebe8d":"code","c4c5b73d":"code","d33ce2f9":"code","9e008d09":"code","fbb70e7d":"code","f21c37dc":"code","dd15b354":"code","a591006f":"code","8f09c255":"code","d7bd40d3":"code","da93448b":"code","b9aca925":"code","0ecec284":"code","539d3be7":"code","5430c188":"code","21c59f51":"code","833e911f":"code","101cd4c2":"code","6df97ce2":"code","2a2f57dd":"code","f79103da":"code","d5a43496":"code","280fa047":"code","a4516006":"code","e962cf9d":"code","d8812e52":"code","acfb8467":"code","59cdeb2c":"code","7d7d4d35":"code","e2db99cc":"markdown","6250cbae":"markdown","2c941909":"markdown","7d8d1eb6":"markdown"},"source":{"4a7df0e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for plotting graphs\nimport seaborn as sns # for plotting graphs\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a3e333b":"train = pd.read_csv('\/kaggle\/input\/predicting-employee-attrition\/train_data.csv')","cb36e8cc":"train.head()","ba1ebe8d":"train.info()","c4c5b73d":"train['MMM-YY'].describe()","d33ce2f9":"train['MMM-YY'] = pd.to_datetime(train['MMM-YY'])\ntrain['Dateofjoining'] = pd.to_datetime(train['Dateofjoining'])\ntrain['LastWorkingDate'] = pd.to_datetime(train['LastWorkingDate'])","9e008d09":"uniqueemployeesdata= train[['Emp_ID', 'Age', 'Gender', 'City', 'Education_Level',\n       'Salary', 'Dateofjoining', 'Joining Designation','Designation']].drop_duplicates()","fbb70e7d":"# get the target column set\nemployeeswholeft = train[~train['LastWorkingDate'].isna()]\nemployeeswholeft['Y']=0\nuniqueemployeesdata = uniqueemployeesdata.merge(employeeswholeft[['Emp_ID','Y']],on='Emp_ID',how='left')\nuniqueemployeesdata['Y']=uniqueemployeesdata['Y'].fillna(1)","f21c37dc":"employeeage = train.groupby('Emp_ID').count()['City']\nemployeeage = employeeage.reset_index()\nemployeeage.columns = ['Emp_ID','Periodwithus']\nuniqueemployeesdata=  uniqueemployeesdata.merge(employeeage,on='Emp_ID',how='left')","dd15b354":"uniqueemployeesdata = uniqueemployeesdata.merge(pd.pivot_table(train,index='Emp_ID',values=['Total Business Value','Quarterly Rating'],aggfunc='mean').reset_index(),on='Emp_ID',how='left')","a591006f":"# time business done\nuniqueemployeesdata['timesbusinessdone'] = uniqueemployeesdata['Total Business Value']\/uniqueemployeesdata['Salary']","8f09c255":"# reversal happend for employees\nreversals = train[train['Total Business Value']<0]\nreversals['reversal']=1\nuniqueemployeesdata=uniqueemployeesdata.merge(reversals[['Emp_ID','reversal']].drop_duplicates(),on='Emp_ID',how='left')\nuniqueemployeesdata['reversal']=uniqueemployeesdata['reversal'].fillna(0)","d7bd40d3":"# zero business count\nzeroperformance = train[train['Total Business Value']==0]\nzeroperformance = zeroperformance.groupby('Emp_ID').count()['Age'].reset_index()\nzeroperformance.columns = ['Emp_ID','zeroperformance']\nuniqueemployeesdata = uniqueemployeesdata.merge(zeroperformance.drop_duplicates(),on='Emp_ID',how='left')","da93448b":"# months where coverage less than salary\ntrain['timesbusiness'] = train['Total Business Value']\/train['Salary']\nbusinesslesscoverage = train[train['timesbusiness']<1]\nbusinesslesscoverage=businesslesscoverage.groupby('Emp_ID').count()['Age'].reset_index()\nbusinesslesscoverage.columns=['Emp_ID','Businesslessthansalary']\nuniqueemployeesdata=uniqueemployeesdata.merge(businesslesscoverage[['Emp_ID','Businesslessthansalary']].drop_duplicates(),on='Emp_ID',how='left')\nuniqueemployeesdata['Businesslessthansalary']=uniqueemployeesdata['Businesslessthansalary'].fillna(0)","b9aca925":"# Change in designation\nchangedesignation = train[train['Joining Designation'] != train['Designation']]\nchangedesignation['changedesignation']=1\nchangedesignation = changedesignation[['Emp_ID','changedesignation']].drop_duplicates()\nuniqueemployeesdata = uniqueemployeesdata.merge(changedesignation[['Emp_ID','changedesignation']].drop_duplicates(),on='Emp_ID',how='left')\nuniqueemployeesdata['changedesignation'] = uniqueemployeesdata['changedesignation'].fillna(0)","0ecec284":"# Last rating before leaving\nlastrating = train[['Emp_ID','Quarterly Rating']].drop_duplicates( subset='Emp_ID',keep='last')\nlastrating.columns = ['Emp_ID','Last Rating']\nuniqueemployeesdata = uniqueemployeesdata.merge(lastrating,on='Emp_ID',how='left')","539d3be7":"uniqueemployeesdata.head()","5430c188":"plt.figure(figsize=(15,7.5))\nuniqueemployeesdata=uniqueemployeesdata[['Emp_ID', 'Age', 'City', 'Education_Level', 'Salary', 'Dateofjoining',\n       'Joining Designation', 'Designation', 'Quarterly Rating',\n       'Total Business Value', 'Gender',\n       'timesbusinessdone','reversal','zeroperformance','Businesslessthansalary','changedesignation','Last Rating','Periodwithus','Y']]\ndf4_corr=uniqueemployeesdata.corr()\nsns.heatmap(df4_corr,annot=True)","21c59f51":"!pip install pycaret","833e911f":"from pycaret.classification import *\ns = setup(uniqueemployeesdata, target = 'Y', ignore_features = ['Emp_ID','Dateofjoining'])","101cd4c2":"best_model = compare_models(sort='AUC')","6df97ce2":"best_model","2a2f57dd":"tuned_best_model = tune_model(best_model)","f79103da":"# performance of coverage\nplot_model(tuned_best_model, plot = 'auc')","d5a43496":"# feature importance\nplot_model(tuned_best_model, plot = 'feature')","280fa047":"# confusion matrix\nplot_model(tuned_best_model, plot = 'confusion_matrix')","a4516006":"test = pd.read_csv('\/kaggle\/input\/predicting-employee-attrition\/test_data.csv')","e962cf9d":"testset = uniqueemployeesdata[uniqueemployeesdata['Emp_ID'].isin(test['Emp_ID'])]\ntestset= testset.drop_duplicates()","d8812e52":"et = create_model('et')\ntuned_et = tune_model(et)\npredict_model(tuned_et)","acfb8467":"final_et = finalize_model(tuned_et)\nunseen_predictions = predict_model(final_et, data=testset)\npredictionsfinal= unseen_predictions[['Emp_ID','Label']].drop_duplicates()","59cdeb2c":"predictionsfinal.head()","7d7d4d35":"predictionsfinal = predictionsfinal.drop_duplicates( subset='Emp_ID',keep='last')\npredictionsfinal.to_csv('predictions.csv')","e2db99cc":"Upvote, If you like the work. Thank you.","6250cbae":"# Import Libraries","2c941909":"# Model Evaluation","7d8d1eb6":"# Feature Engineering"}}