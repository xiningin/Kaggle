{"cell_type":{"91ef7202":"code","b590ff87":"code","d5ec2e28":"code","e1e4c877":"code","52272d2a":"code","597a0e30":"code","937435e6":"code","fe7072a7":"code","4c0625fa":"code","83fa49e6":"code","4a1809a3":"code","97dc9f3c":"code","41828aa7":"code","0c62d433":"code","f7f85095":"markdown","9288e523":"markdown","d91fb1df":"markdown","a299f16e":"markdown","99db5c35":"markdown","2c48de51":"markdown"},"source":{"91ef7202":"!pip install pycaret --ignore-installed llvmlite","b590ff87":"# import library \nimport os\nimport pandas as pd\nimport seaborn as sns\n# from pandas_profiling import ProfileReport\nimport numpy as np\nimport matplotlib.pylab as plt\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.inspection import plot_partial_dependence\n# from sklearn_gbmi import *\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.decomposition import PCA\nimport xgboost as xgb\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import RandomizedSearchCV","d5ec2e28":"df = pd.read_csv('..\/input\/prediction-of-music-genre\/music_genre.csv')","e1e4c877":"# split the dataset\ntrain, test = train_test_split(df, test_size=0.2, random_state=52)","52272d2a":"# replace ? as np.nan in tempo\ntrain['tempo'].replace(to_replace = '?', value =np.nan, inplace=True)\ntest['tempo'].replace(to_replace = '?', value =np.nan, inplace=True)\n\n# replace ? as np.nan in duration_ms\ntrain['duration_ms'].replace(to_replace = -1, value =np.nan, inplace=True)\ntest['duration_ms'].replace(to_replace = -1, value =np.nan, inplace=True)","597a0e30":"# encode artist_name\nle= LabelEncoder()\ntrain['artist_code'] = le.fit_transform(train['artist_name'].astype('str'))\n\n#encode music_genre\ntrain['music_genre'] = LabelEncoder().fit_transform(train['music_genre'].astype('str'))\ntest['music_genre'] = LabelEncoder().fit_transform(test['music_genre'].astype('str'))","937435e6":"# get artist fit into genre\ndef art_genre(df):\n    for i in df.index:\n        name = df.loc[i,'artist_code']\n        art_genre = np.unique(df[df['artist_code'] == name]['music_genre'])\n        df.loc[i,'art_genre'] = str(art_genre)\n    return df\nart_genre(train)","fe7072a7":"# get name dict of art_genre\ntrain['art_genre'] = preprocessing.LabelEncoder().fit_transform(train['art_genre'])\n\ndf1 = train[['artist_name','art_genre']]\ndf1 = df1.drop_duplicates()\ndf1 = df1.reset_index()\nname_dict = {}\nfor i in range(df1.shape[0]):\n    name_dict[str(df1.loc[i,'artist_name'])] = df1.loc[i,'art_genre']\ntest['art_genre']=test['artist_name'].map(name_dict)","4c0625fa":"test['art_genre'].isnull().sum()","83fa49e6":"train_df = train[['popularity','art_genre','loudness','music_genre']]","4a1809a3":"from pycaret.classification import *\n\nexperiment = setup(data = train_df, target = 'music_genre',\n                   session_id=52, \n                   categorical_imputation='mode',\n                   numeric_imputation = 'mean')                  \n                   ","97dc9f3c":"knn = create_model('knn')\ntuned_knn = tune_model(knn,optimize = 'Accuracy')","41828aa7":"final = finalize_model(tuned_knn)\npredictions = predict_model(final, data=test[['popularity','art_genre','loudness']])","0c62d433":"from pycaret.utils import check_metric\nACC_score = check_metric(predictions['Label'], test['music_genre'], metric = 'Accuracy')\nACC_score","f7f85095":"#### import library and read files","9288e523":"#### The game changer: feature interation.","d91fb1df":"#### Fill missing values","a299f16e":"#### Modelling","99db5c35":"#### I cannot do the same thing for testset, because we do not know the art_genre in our test dataset(assume). But if the artist_name in the training dataset also appears in the test dataset, the art_genre can be matched. Otherwise, I need to do imputation. ","2c48de51":"#### From the domain knowledge, most of artist has a few genres. Therefore, artist_name is significant to the genre. I created a new column that contains an artist ever played all genres. "}}