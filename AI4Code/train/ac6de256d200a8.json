{"cell_type":{"19151745":"code","a717d268":"code","011a2021":"code","0840e575":"code","c1410892":"code","9f1d3a84":"code","65b8da6c":"code","e421c126":"code","2b31afaf":"code","9da4045e":"code","c384ebfa":"code","f1abb61b":"code","81e1850e":"code","94e07b36":"code","68f5af6e":"code","6fb1b18e":"code","eb87856c":"code","a5cd1ef4":"code","ae164805":"code","63b15ff2":"code","86c0a80e":"code","e750ecad":"code","f112c34e":"code","ca5b1830":"code","3246b476":"code","ee79c397":"code","0a273e40":"code","47766046":"code","f13e0a0a":"code","f4b09d6c":"code","54c32f17":"code","f4aa45ce":"code","216dd500":"code","72ad5b96":"code","4e1e3ced":"code","a58b71a7":"code","d6c97c42":"code","41c7880e":"code","2b0c88f0":"code","a34d89ca":"code","30bab581":"code","c1b3d4ef":"code","0acd973f":"code","ec1f3c8e":"code","43b688df":"code","0a4bfdd3":"code","9833efc3":"code","7db9cd72":"code","3012c9ea":"code","c594341a":"code","986cf7ca":"code","78eb8b49":"code","972edf1b":"code","d5589584":"code","cf8d4ef4":"code","8be135ff":"code","293b0117":"code","6f1a5737":"code","6c5ea651":"code","640c814a":"code","714a6377":"code","b9d3ac2d":"code","6220bcd9":"code","5313cfd6":"code","4ab4e5ac":"code","6d45df0a":"code","3801f3c8":"code","9390f0c5":"code","e0b73852":"code","38caa778":"code","167c3808":"code","32a8e5e1":"code","978a6ec7":"markdown","8c66d1dd":"markdown","228cf2eb":"markdown","20f96981":"markdown","4cb2af68":"markdown","3bcad8da":"markdown","f11d76b2":"markdown","8627018c":"markdown","d7a2b6ed":"markdown","9b0c3f17":"markdown","a69cb4a8":"markdown","cd338398":"markdown","fde1afee":"markdown","99f41fe5":"markdown","bfb5f54c":"markdown","707b99c2":"markdown","3b4e3db3":"markdown","4f3fbcf4":"markdown","f805c485":"markdown","0b144528":"markdown","0360279b":"markdown","a024f519":"markdown","dffbb370":"markdown","b65caa39":"markdown","a36a920d":"markdown","5be11cbd":"markdown","edbc641d":"markdown","a0d9dc68":"markdown","2d244c7c":"markdown","f0982b93":"markdown","214e2baf":"markdown","f0bc45b4":"markdown","0665560b":"markdown","a3935e02":"markdown","5bdff090":"markdown","3026e90a":"markdown","80c9b29f":"markdown","6157af4a":"markdown","46833b89":"markdown","07e0869e":"markdown","1e812fb6":"markdown","54e80d7c":"markdown","4b06d560":"markdown","7b3f7acd":"markdown","e26518fb":"markdown","e79dcac0":"markdown","98903544":"markdown","50dd8bb6":"markdown","96ff3895":"markdown","3b5ef3f5":"markdown","e2e5a524":"markdown","cb19780f":"markdown","5795f7cf":"markdown","b3a75ce4":"markdown","4263b0a6":"markdown","4fe44629":"markdown","5a70e556":"markdown","3f9564b2":"markdown","b7bf331f":"markdown","9aee0d12":"markdown","6c61d49d":"markdown","90ccf068":"markdown","4052e98f":"markdown","54fb472f":"markdown","dc08b528":"markdown","adbc9985":"markdown","949ce4d2":"markdown"},"source":{"19151745":"import os\nimport ast\nfrom collections import namedtuple\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom tqdm import tqdm\nfrom PIL import Image\n\nimport joblib\nfrom joblib import Parallel, delayed\n\nimport cv2\nimport albumentations\nfrom albumentations.pytorch.transforms import ToTensorV2\nfrom albumentations.core.transforms_interface import DualTransform\nfrom albumentations.augmentations.bbox_utils import denormalize_bbox, normalize_bbox\n\nfrom matplotlib import pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib.image import imsave","a717d268":"# Constants\nBASE_DIR = '\/kaggle\/input\/global-wheat-detection'\nWORK_DIR = '\/kaggle\/working'\n\n# Set seed for numpy for reproducibility\nnp.random.seed(1996)","011a2021":"train_df = pd.read_csv(os.path.join(BASE_DIR, 'train.csv'))\n\n# Let's expand the bounding box coordinates and calculate the area of all the bboxes\ntrain_df[['x_min','y_min', 'width', 'height']] = pd.DataFrame([ast.literal_eval(x) for x in train_df.bbox.tolist()], index= train_df.index)\ntrain_df = train_df[['image_id', 'bbox', 'source', 'x_min', 'y_min', 'width', 'height']]\ntrain_df['area'] = train_df['width'] * train_df['height']\ntrain_df['x_max'] = train_df['x_min'] + train_df['width']\ntrain_df['y_max'] = train_df['y_min'] + train_df['height']\ntrain_df = train_df.drop(['bbox', 'source'], axis=1)\ntrain_df = train_df[['image_id', 'x_min', 'y_min', 'x_max', 'y_max', 'width', 'height', 'area']]\n\n# There are some buggy annonations in training images having huge bounding boxes. Let's remove those bboxes\ntrain_df = train_df[train_df['area'] < 100000]\n\ntrain_df.head()","0840e575":"print(train_df.shape)","c1410892":"image_ids = train_df['image_id'].unique()\nprint(f'Total number of training images: {len(image_ids)}')","9f1d3a84":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\nplt.figure(figsize = (10, 10))\nplt.imshow(image)\nplt.show()","65b8da6c":"pascal_voc_boxes = train_df[train_df['image_id'] == image_id][['x_min', 'y_min', 'x_max', 'y_max']].astype(np.int32).values\ncoco_boxes = train_df[train_df['image_id'] == image_id][['x_min', 'y_min', 'width', 'height']].astype(np.int32).values\nassert(len(pascal_voc_boxes) == len(coco_boxes))\nlabels = np.ones((len(pascal_voc_boxes), ))","e421c126":"def get_bbox(bboxes, col, color='white', bbox_format='pascal_voc'):\n    \n    for i in range(len(bboxes)):\n        # Create a Rectangle patch\n        if bbox_format == 'pascal_voc':\n            rect = patches.Rectangle(\n                (bboxes[i][0], bboxes[i][1]),\n                bboxes[i][2] - bboxes[i][0], \n                bboxes[i][3] - bboxes[i][1], \n                linewidth=2, \n                edgecolor=color, \n                facecolor='none')\n        else:\n            rect = patches.Rectangle(\n                (bboxes[i][0], bboxes[i][1]),\n                bboxes[i][2], \n                bboxes[i][3], \n                linewidth=2, \n                edgecolor=color, \n                facecolor='none')\n\n        # Add the patch to the Axes\n        col.add_patch(rect)","2b31afaf":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Blur(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","9da4045e":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.VerticalFlip(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","c384ebfa":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.HorizontalFlip(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","f1abb61b":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Flip(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","81e1850e":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Normalize(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","94e07b36":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Transpose(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","68f5af6e":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomCrop(height=400, width=400, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","6fb1b18e":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomGamma( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","eb87856c":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomRotate90( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","a5cd1ef4":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Rotate(limit=30, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","ae164805":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.ShiftScaleRotate(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","63b15ff2":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.CenterCrop(400, 400, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","86c0a80e":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.HueSaturationValue(hue_shift_limit=0.5, sat_shift_limit= 0.5, val_shift_limit=0.5, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","e750ecad":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.PadIfNeeded(800, 800, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","f112c34e":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RGBShift(r_shift_limit=0.5, g_shift_limit=0.5, b_shift_limit=0.5,p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","ca5b1830":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomBrightness(limit=0.2, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","3246b476":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomContrast(limit=0.2, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","ee79c397":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.MotionBlur(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","0a273e40":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.MedianBlur(blur_limit=3, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","47766046":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.GaussianBlur(blur_limit=3, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","f13e0a0a":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.GaussNoise(var_limit=(0.1, 0.1), p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","f4b09d6c":"aug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.GlassBlur(sigma=0.1, max_delta=4, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","54c32f17":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.CLAHE(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","f4aa45ce":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.ChannelShuffle(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","216dd500":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.InvertImg(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","72ad5b96":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.ToGray(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","4e1e3ced":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.ToSepia(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","a58b71a7":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.JpegCompression(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","d6c97c42":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.ImageCompression(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","41c7880e":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Cutout(num_holes=8, max_h_size=64, max_w_size=64, fill_value=0, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","2b0c88f0":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.CoarseDropout(max_holes=8, max_height=64, max_width=64,p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","a34d89ca":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.CLAHE(p=1),\n        albumentations.ToFloat(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image\/255.0)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","30bab581":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.FromFloat(dtype='uint8', p=1),\n        albumentations.CLAHE(p=1),\n        albumentations.ToFloat(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","c1b3d4ef":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Crop( x_max=400, y_max=400,p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","0acd973f":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomScale(scale_limit=0.3, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","ec1f3c8e":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.LongestMaxSize(400, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","43b688df":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomSizedCrop(min_max_height=(400, 400), height=512, width=512, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","0a4bfdd3":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomResizedCrop(height=512, width=512, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","9833efc3":"class CustomCutout(DualTransform):\n    \"\"\"\n    Custom Cutout augmentation with handling of bounding boxes \n    Note: (only supports square cutout regions)\n    \n    Author: Kaushal28\n    Reference: https:\/\/arxiv.org\/pdf\/1708.04552.pdf\n    \"\"\"\n    \n    def __init__(\n        self,\n        fill_value=0,\n        bbox_removal_threshold=0.50,\n        min_cutout_size=192,\n        max_cutout_size=512,\n        number=1,\n        always_apply=False,\n        p=0.5\n    ):\n        \"\"\"\n        Class construstor\n        :param fill_value: Value to be filled in cutout (default is 0 or black color)\n        :param bbox_removal_threshold: Bboxes having content cut by cutout path more than this threshold will be removed\n        :param min_cutout_size: minimum size of cutout (192 x 192)\n        :param max_cutout_size: maximum size of cutout (512 x 512)\n        \"\"\"\n        super(CustomCutout, self).__init__(always_apply, p)  # Initialize parent class\n        self.fill_value = fill_value\n        self.bbox_removal_threshold = bbox_removal_threshold\n        self.min_cutout_size = min_cutout_size\n        self.max_cutout_size = max_cutout_size\n        self.number = number\n        \n    def _get_cutout_position(self, img_height, img_width, cutout_size):\n        \"\"\"\n        Randomly generates cutout position as a named tuple\n        \n        :param img_height: height of the original image\n        :param img_width: width of the original image\n        :param cutout_size: size of the cutout patch (square)\n        :returns position of cutout patch as a named tuple\n        \"\"\"\n        position = namedtuple('Point', 'x y')\n        return position(\n            np.random.randint(0, img_width - cutout_size + 1),\n            np.random.randint(0, img_height - cutout_size + 1)\n        )\n    def _get_cutout(self, img_height, img_width):\n        \"\"\"\n        Creates a cutout pacth with given fill value and determines the position in the original image\n        \n        :param img_height: height of the original image\n        :param img_width: width of the original image\n        :returns (cutout patch, cutout size, cutout position)\n        \"\"\"\n        cutout_size = np.random.randint(self.min_cutout_size, self.max_cutout_size + 1)\n        cutout_position = self._get_cutout_position(img_height, img_width, cutout_size)\n        return np.full((cutout_size, cutout_size, 3), self.fill_value), cutout_size, cutout_position\n    def apply(self, image, **params):\n        \"\"\"\n        Applies the cutout augmentation on the given image\n        \n        :param image: The image to be augmented\n        :returns augmented image\n        \"\"\"\n        image = image.copy()  # Don't change the original image\n        self.img_height, self.img_width, _ = image.shape\n        for i in range(self.number):\n            cutout_arr, cutout_size, cutout_pos = self._get_cutout(self.img_height, self.img_width)\n            \n            # Set to instance variables to use this later\n            self.image = image\n            self.cutout_pos = cutout_pos\n            self.cutout_size = cutout_size\n            \n            image[cutout_pos.y:cutout_pos.y+cutout_size, cutout_pos.x:cutout_size+cutout_pos.x, :] = cutout_arr\n        return image\n    def apply_to_bbox(self, bbox, **params):\n        \"\"\"\n        Removes the bounding boxes which are covered by the applied cutout\n        \n        :param bbox: A single bounding box coordinates in pascal_voc format\n        :returns transformed bbox's coordinates\n        \"\"\"\n\n        # Denormalize the bbox coordinates\n        bbox = denormalize_bbox(bbox, self.img_height, self.img_width)\n        x_min, y_min, x_max, y_max = tuple(map(int, bbox))\n        if x_min >= x_max or y_min >= y_max:\n            return normalize_bbox((0, 0, 0, 0), self.img_height, self.img_width)\n\n        bbox_size = (x_max - x_min) * (y_max - y_min)  # width * height\n        overlapping_size = np.sum(\n            (self.image[y_min:y_max, x_min:x_max, 0] == self.fill_value) &\n            (self.image[y_min:y_max, x_min:x_max, 1] == self.fill_value) &\n            (self.image[y_min:y_max, x_min:x_max, 2] == self.fill_value)\n        )\n        # Remove the bbox if it has more than some threshold of content is inside the cutout patch\n        if overlapping_size \/ bbox_size > self.bbox_removal_threshold:\n            return normalize_bbox((0, 0, 0, 0), self.img_height, self.img_width)\n\n        return normalize_bbox(bbox, self.img_height, self.img_width)\n\n    def get_transform_init_args_names(self):\n        \"\"\"\n        Fetches the parameter(s) of __init__ method\n        :returns: tuple of parameter(s) of __init__ method\n        \"\"\"\n        return ('fill_value', 'bbox_removal_threshold', 'min_cutout_size', 'max_cutout_size', 'always_apply', 'p')\n        ","7db9cd72":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        CustomCutout(bbox_removal_threshold=0.50,min_cutout_size=32,max_cutout_size=96,number=12,p=1),\n#         albumentations.RandomBrightnessContrast(brightness_limit=0.05, contrast_limit=0.8, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","3012c9ea":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n#         albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n         albumentations.PadIfNeeded(1200, 1200, p=1),\n         albumentations.RandomSizedBBoxSafeCrop(height=1024, width=1024, erosion_rate=4, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","c594341a":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomSnow(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","986cf7ca":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomRain(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","78eb8b49":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomFog(p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","972edf1b":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomSunFlare(flare_roi=(0, 0, 1, 0.5), src_radius=200, src_color=(255, 255, 255), p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","d5589584":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.RandomShadow( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","cf8d4ef4":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.ChannelDropout( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","8be135ff":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n# .astype(np.float32)\n# image \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.ISONoise( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","293b0117":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n# .astype(np.float32)\n# image \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Solarize(threshold=224, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","6f1a5737":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n# .astype(np.float32)\n# image \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Equalize( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","6c5ea651":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n# .astype(np.float32)\n# image \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Posterize( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","640c814a":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.Downscale( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","714a6377":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.MultiplicativeNoise( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","b9d3ac2d":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.DualIAATransform( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","6220bcd9":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.ImageOnlyIAATransform( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","5313cfd6":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.IAAEmboss( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","4ab4e5ac":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.IAASuperpixels( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","6d45df0a":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.IAASharpen( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","3801f3c8":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.IAAAdditiveGaussianNoise( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","9390f0c5":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.IAACropAndPad( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","e0b73852":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.IAAFliplr( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","38caa778":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.IAAFlipud( p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","167c3808":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.IAAAffine(scale=1.0, rotate=10, shear=5., order=1, cval=0, p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","32a8e5e1":"# Read the image on which data augmentaion is to be performed\nimage_id = 'c14c1e300'\nimage = cv2.imread(os.path.join(BASE_DIR, 'train', f'{image_id}.jpg'), cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\nimage \/= 255.0\naug = albumentations.Compose([\n        albumentations.Resize(512, 512),   # Resize the given 1024 x 1024 image to 512 * 512\n#         albumentations.VerticalFlip(1),    # Verticlly flip the image\n        albumentations.IAAPiecewiseAffine(scale=(0.03, 0.05), nb_rows=4, nb_cols=4, order=1, cval=0,  p=1),\n    ], bbox_params={'format': 'pascal_voc', 'label_fields': ['labels']})\naug_result = aug(image=image, bboxes=pascal_voc_boxes, labels=labels)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 16))\nget_bbox(pascal_voc_boxes, ax[0], color='red')\nax[0].title.set_text('Original Image')\nax[0].imshow(image)\n\nget_bbox(aug_result['bboxes'], ax[1], color='red')\nax[1].title.set_text('Augmented Image')\nax[1].imshow(aug_result['image'])\nplt.show()","978a6ec7":"IAAAffine","8c66d1dd":"RandomRain","228cf2eb":"### I've created this notebook as this is my first object detection challenge and thus wanted to explore image augmentation with using albumentations. I tested each function of albumentations. Sharing this publicly as this might be useful to beginners like me.\n\n#### I have no idea which function can make a great improvement on this challenge. Any information you have can share with me!","20f96981":"ChannelDropout","4cb2af68":"RandomSizedCrop","3bcad8da":"RandomContrast","f11d76b2":"CenterCrop","8627018c":"Solarize","d7a2b6ed":"MultiplicativeNoise","9b0c3f17":"CLAHE","a69cb4a8":"MotionBlur","cd338398":"IAASharpen","fde1afee":"GlassBlur","99f41fe5":"ToFloat","bfb5f54c":"Posterize","707b99c2":"RandomSunFlare","3b4e3db3":"VerticalFlip","4f3fbcf4":"IAAEmboss","f805c485":"HueSaturationValue","0b144528":"Crop","0360279b":"Blur","a024f519":"RandomCrop","dffbb370":"We've our image ready, let's create an array of bounding boxes for all the wheat heads in the above image and the array of labels (we've only 2 class here: wheat head and background). As all bounding boxes are of same class, labels array will contain only 1's. ","b65caa39":"ImageCompression","a36a920d":"RandomSizedBBoxSafeCrop","5be11cbd":"InvertImg","edbc641d":"RandomResizedCrop","a0d9dc68":"ChannelShuffle","2d244c7c":"RandomBrightnessContrast","f0982b93":"ToGray","214e2baf":"Rotate","f0bc45b4":"CoarseDropout","0665560b":"IAASuperpixels","a3935e02":"RGBShift","5bdff090":"IAACropAndPad","3026e90a":"Flip","80c9b29f":"RandomBrightness","6157af4a":"IAAFlipud","46833b89":"There are two major formats of bounding boxes:\n\n1. **pascal_voc**, which is [x_min, y_min, x_max, y_max]\n2. **COCO**, which is [x_min, y_min, width, height]\n\nWe'll see how to perform image augmentations for both the formats. Let's first start with **pascal_voc** format.","07e0869e":"Equalize","1e812fb6":"RandomFog","54e80d7c":"HorizontalFlip","4b06d560":"RandomScale","7b3f7acd":"JpegCompression","e26518fb":"Cutout","e79dcac0":"Transpose","98903544":"Let's plot the bounding boxes on the above image","50dd8bb6":"LongestMaxSize","96ff3895":"RandomGamma","3b5ef3f5":"GaussianBlur","e2e5a524":"PadIfNeeded","cb19780f":"Downscale","5795f7cf":"MedianBlur","b3a75ce4":"IAAFliplr","4263b0a6":"IAAPiecewiseAffine","4fe44629":"RandomShadow","5a70e556":"ToSepia","3f9564b2":"ShiftScaleRotate","b7bf331f":"RandomRotate90","9aee0d12":"DualIAATransform","6c61d49d":"GaussNoise","90ccf068":"IAAAdditiveGaussianNoise","4052e98f":"RandomSnow","54fb472f":"Normalize","dc08b528":"Let's define augmentations using albumentations library and test it on the image above","adbc9985":"ISONoise","949ce4d2":"ImageOnlyIAATransform"}}