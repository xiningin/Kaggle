{"cell_type":{"7b116d30":"code","e5aa0603":"code","93195840":"code","5bc36ff3":"code","1eb33c2b":"code","36cc01ba":"code","26a7fdb1":"code","1fe1a1e6":"code","626afa95":"code","7513726a":"code","e7b11b13":"code","ccc06675":"code","5c26db68":"code","d0f3364b":"code","df260821":"code","0674c0bb":"code","4da3bc6b":"code","1ffb5ddf":"code","0cedbc56":"code","fee8528d":"code","1e7d5343":"code","739ef1e3":"code","3439f54c":"code","4c5e03d8":"code","fdd79152":"markdown","e9272f47":"markdown","cfd80fa3":"markdown","0aad05c4":"markdown","5783baa1":"markdown","3784286d":"markdown","0bc4d0d4":"markdown","5d34acd9":"markdown","1d4a3976":"markdown","f95725c9":"markdown","4363f289":"markdown","f12b5e6a":"markdown","d93ddfb5":"markdown","5eb0367c":"markdown","f8e567fc":"markdown"},"source":{"7b116d30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nimport bq_helper\nfrom pandas.io.json import json_normalize\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport plotly.figure_factory as ff\nimport numpy as np\ninit_notebook_mode(connected = True)\nimport datetime\nimport missingno as msno\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e5aa0603":"json_cols = ['device', 'geoNetwork', 'totals', 'trafficSource']\n\nnan_list = [\"not available in demo dataset\",\n            \"unknown.unknown\",\n            \"(not provided)\",\n            \"(not set)\", \n            \"Not Socially Engaged\"] # this last one is borderline\nnan_dict = {nl:np.nan for nl in nan_list}\n\ndef load_data(file):\n    path = '..\/input\/' + file\n    df = pd.read_csv(path, converters = {column: json.loads for column in json_cols},\n                     dtype={'fullVisitorId': str, 'date': str}, \n            parse_dates=['date'])\n    \n    for column in json_cols:\n        dataframe = json_normalize(df[column])\n        dataframe.columns = [f\"{column}_{subcolumn}\" for subcolumn in dataframe.columns]\n        df = df.drop(column, axis = 1).merge(dataframe, right_index = True, left_index = True)\n        df.replace(nan_dict, inplace=True)\n    return df\n\ntrain = load_data(\"train.csv\")\n#test = load_data('test.csv')","93195840":"train.head()","5bc36ff3":"def plotlybar(labels1 = None, values1 = None, name1 = None,labels2 = None, values2 = None, name2 =None, markercolor1 = '#9ECAE1', markercolor2 = '#ff99ff', title= None, mode = 'group', orientation = 'v'):\n    trace1 = go.Bar(\n    x = labels1,\n    y = values1,\n    orientation = orientation, \n    text = values1,\n    name = name1,\n    textposition = 'auto',\n    marker=dict(\n        color=markercolor1#'rgb(58,200,225)',\n        )\n    )    \n    \n    if labels2 is not None:\n        trace2 = go.Bar(\n            x = labels2,\n            y = values2,\n            name = name2,\n            text = values2,\n            textposition = 'auto',\n            marker=dict(\n                color=markercolor2#'rgb(58,200,225)',\n            )\n        )\n        data = [trace1, trace2]\n    \n    else:\n        data = [trace1]\n    layout = go.Layout(title = title,xaxis=dict(tickangle=-25),\n    barmode=mode)\n    fig = go.Figure(data = data, layout = layout)\n    iplot(fig)\n    \ndef scatter_plot(x,y, title):\n    data = [go.Scatter(\n    x = x,\n    y = y,\n    mode = 'lines+markers',\n    name = 'lines+markers'\n    )]\n    layout = go.Layout(title = title,xaxis=dict(tickangle=-25))\n    fig = go.Figure(data = data, layout = layout)\n    iplot(fig)","1eb33c2b":"total = train.isnull().sum().sort_values(ascending = True)\npercent = (train.isnull().sum() \/ train.isnull().count() * 100).sort_values(ascending = True)\nmissing_data = pd.concat([total, percent], axis = 1, keys = ['Total','Percent'])\nmissing_data","36cc01ba":"train.describe()","26a7fdb1":"cols_to_drop = [column for column in train.columns if train[column].nunique()==1]\ntrain = train.drop(cols_to_drop , axis=1)","1fe1a1e6":"train['month'] = train['date'].dt.month\ntrain['year'] = train['date'].dt.year\ntrain['day'] = train['date'].dt.weekday\ntrain['totals_transactionRevenue'] = pd.to_numeric(train['totals_transactionRevenue'])\ntrain['totals_transactionRevenue'] = train['totals_transactionRevenue'].fillna(0)\ntrain['totals_hits'] = pd.to_numeric(train['totals_hits']).fillna(0)\ntrain['totals_pageviews'] = pd.to_numeric(train['totals_pageviews']).fillna(0)","626afa95":"plt.figure(figsize=(12,6))\nsns.distplot(train[train['totals_transactionRevenue'] > 0]['totals_transactionRevenue'],color=\"darkgreen\",bins=50)\nplt.xlabel(\"total transaction revenue\");\nplt.title(\"Distribution of total transaction revenue (non-zeros)\");\nplt.figure(figsize=(12,6))\nsns.distplot(np.log1p(train[train['totals_transactionRevenue'] > 0]['totals_transactionRevenue']),color=\"darkgreen\",bins=50)\nplt.xlabel(\"total transaction revenue\");\nplt.title(\"Lograthemic Distribution of total transaction revenue (non-zeros)\");","7513726a":"train_ = train.loc[train['totals_transactionRevenue'] > 0]\nfig, ax1 = plt.subplots(figsize=(16, 8))\nplt.title(\"Revenue and Non Revenue transactions\");\ntrain.groupby(['date'])['totals_transactionRevenue'].count().plot(color='#E7638B')\nax1.set_ylabel('Transaction count', color='#E7638B')\nplt.legend(['Non-Revenue users'])\nax2 = ax1.twinx()\ntrain_.groupby(['date'])['totals_transactionRevenue'].count().plot(color='#7debca')\nax2.set_ylabel('Transaction count', color='#7debca')\nplt.legend(['Revenue users'], loc=(0.875, 0.9))\nplt.grid(False)","e7b11b13":"group_by_date = train.groupby('date')['fullVisitorId'].size()\nscatter_plot(group_by_date.index, group_by_date.values, 'Visitors by date')","ccc06675":"\nvisit_by_month = train['month'].value_counts()\nvisits_by_day = train['day'].value_counts()\nplotlybar(visit_by_month.index, visit_by_month.values, 'Month', markercolor1 = '#E7638B' , title = 'Visits By Month')\nplotlybar(visits_by_day.index[:10], visits_by_day.values[:10], 'Day', markercolor1 = '#7dd5eb' , title = 'Visits By Day')","5c26db68":"train['time_of_visit'] = train['visitStartTime'].apply(lambda x : x % (24 * 3600) \/\/ 3600)\ntime_of_visit = train['time_of_visit'].value_counts()\n#time_of_visit\nplotlybar(time_of_visit.index, time_of_visit.values, 'Time', markercolor1 = '#7debca' , title = 'Time of Visit')","d0f3364b":"Channels = train['channelGrouping'].value_counts()\nplotlybar(Channels.index, Channels.values, 'Channel Grouping', markercolor1 = '#E7638B' , title = 'Count of Channel Grouping')","df260821":"monthy_chnl_rev = train.groupby(['channelGrouping','month'])['totals_transactionRevenue'].mean().reset_index()\n\nfig = {\n    'data': [\n        {\n            'x' : monthy_chnl_rev[monthy_chnl_rev['channelGrouping']==channel]['month'],\n            'y': monthy_chnl_rev[monthy_chnl_rev['channelGrouping']==channel]['totals_transactionRevenue'],\n            'name': channel\n        } for channel in ['Organic Search', 'Social', 'Direct', 'Referral', 'Paid Search', 'Affiliates', 'Display', '(Other)']\n    ],\n    'layout': {\n        'title' : 'Month wise mean revenue from each Channel Grouping',\n        'xaxis': {'title': 'Month'},\n        'yaxis': {'title': \"Mean Revenue\"}\n    }\n}\niplot(fig)","0674c0bb":"Browsers = train['device_browser'].value_counts()\nplotlybar(Browsers.index[:10], Browsers.values[:10], 'Browsers', markercolor1 = '#7debca' , title = 'Types of browsers used')","4da3bc6b":"#device_deviceCategory\nDevice_category = train['device_deviceCategory'].value_counts()\nplotlybar(Device_category.index, Device_category.values, 'Device category', markercolor1 = '#7dd5eb' , title = 'Category of Devices')","1ffb5ddf":"monthy_dev_rev = train.groupby(['device_deviceCategory','month'])['totals_transactionRevenue'].mean().reset_index()\n\nfig = {\n    'data': [\n        {\n            'x' : monthy_dev_rev[monthy_dev_rev['device_deviceCategory']==device]['month'],\n            'y': monthy_dev_rev[monthy_dev_rev['device_deviceCategory']==device]['totals_transactionRevenue'],\n            'name': device\n        } for device in ['desktop', 'mobile', 'tablet']\n    ],\n    'layout': {\n        'title' : 'Month wise mean revenue from each device category',\n        'xaxis': {'title': 'Month'},\n        'yaxis': {'title': \"Mean Revenue\"}\n    }\n}\niplot(fig)","0cedbc56":"os = train['device_operatingSystem'].value_counts()\nplotlybar(os.index, os.values, 'os', markercolor1 = '#7debca' , title = 'Different OS')","fee8528d":"#device_deviceCategory\ngeo_continent = train['geoNetwork_continent'].value_counts()\nplotlybar(geo_continent.index, geo_continent.values, 'continent', markercolor1 = '#7debca' , title = 'Country wise count')","1e7d5343":"#device_deviceCategory\ngeo_country = train['geoNetwork_country'].value_counts()\nplotlybar(geo_country.index[:10], geo_country.values[:10], 'country', markercolor1 = '#E7638B' , title = 'Top 10 countries')","739ef1e3":"network_country = train[\"geoNetwork_country\"].value_counts()\ncolorscale = [[0, '#14f962'], [0.005, '#15ed11'], \n              [0.01, '#5fe10f'], [0.02, '#a2d50d'], \n              [0.04, '#c9b50b'], [0.05, '#bd6909'], \n              [0.10, '#b12407'], [0.25, '#a50624'], [1.0, '#990557']]\n\ndata = [\n    dict(\n    type = 'choropleth',\n        autocolorscale = False,\n        colorscale = colorscale,\n        showscale = True,\n        locations = network_country.index,\n        z = network_country.values,\n        locationmode = \"country names\",\n        text = network_country.values,\n        marker = dict(\n            line = dict(color = '#fff' , width = 2)\n        )\n        \n    )\n]\n\nlayout = dict(\n    height = 700,\n    title = \"Geo Network countries\",\n    geo =dict(\n        showframe = True,\n        showocean = True,\n        oceancolor = '#0077be',\n        projection = dict(\n            type = 'orthographic',\n            rotation = dict(\n                lon = 60,\n                lat = 10\n            )\n        ),\n        lonaxis = dict(\n            showgrid = False,\n            gridcolor = 'rgb(102, 102, 102)'\n        ),\n        \n        lataxis = dict(\n            showgrid = False,\n            gridcolor = 'rgb(102,102,102)'\n        )\n    )\n)\n\nfig = dict(data= data, layout = layout)\niplot(fig)","3439f54c":"\nmonthy_geo_rev = train.groupby(['geoNetwork_continent','month'])['totals_transactionRevenue'].mean().reset_index()\n\nfig = {\n    'data': [\n        {\n            'x' : monthy_geo_rev[monthy_geo_rev['geoNetwork_continent']==geo]['month'],\n            'y': monthy_geo_rev[monthy_geo_rev['geoNetwork_continent']==geo]['totals_transactionRevenue'],\n            'name': geo\n        } for geo in ['Americas', 'Asia', 'Europe','Oceania','Africa']\n    ],\n    'layout': {\n        'title' : 'Month wise mean revenue from each geography region',\n        'xaxis': {'title': 'Month'},\n        'yaxis': {'title': \"Mean Revenue\"}\n    }\n}\niplot(fig)","4c5e03d8":"plt.figure(figsize = (18,8))\nplt.figure(1)\nsns.set(style=\"darkgrid\")\nplt.subplot(221)\nsns.countplot(x=\"trafficSource_adwordsClickInfo.adNetworkType\", data=train ,color=\"#7dd5eb\")\nplt.subplot(222)\nsns.countplot(x=\"trafficSource_adwordsClickInfo.slot\", data=train ,color=\"#7dd5eb\" )\nplt.subplot(223)\nsns.countplot(x=\"trafficSource_campaign\", data=train ,color=\"#7dd5eb\")\nplt.xticks(rotation = 90)\nplt.subplot(224)\nsns.countplot(x=\"trafficSource_medium\", data=train ,color=\"#7dd5eb\" )\nplt.xticks(rotation = 90)\nplt.show()","fdd79152":"Most of there customers are from english speaking countries. ","e9272f47":"### Statistical overview of data","cfd80fa3":"* Most of there customers use  web browser Chrome to land on the site.","0aad05c4":"### Drop columns\n\nThere are few columns which has constant values. Removing those columns","5783baa1":"**More To Come. Stay Tuned. !!**\nIf there are any suggestions\/changes you would like to see in the Kernel please let me know :). \n\nThis notebook will always be a work in progress. Please leave any comments about further improvements to the notebook! If you like it or it helps you , you can upvote and\/or leave a comment :).","3784286d":"The use of a desktop computer brings the most users which also gives higher revenues, followed by mobile and tablet devices","0bc4d0d4":"### Visitors","5d34acd9":"### Utility functions for plots","1d4a3976":"### Data Exploration\n\n#### Target Variable","f95725c9":"### Data Preparation\n\n#### Checking for missing data","4363f289":"### Read the Data\n\nUtility function whcih is used to flatten json. This function is taken from https:\/\/www.kaggle.com\/julian3833\/1-quick-start-read-csv-and-flatten-json-fields\/data","f12b5e6a":"### Introduction\n\nGoogle Merchandise Store sells Google-branded T-shirts & hoodies as well as gifts like coffee mugs, tote bags & pens. The objective of this competetion is to analyze a Google Merchandise Store (also known as GStore, where Google swag is sold) customer dataset to predict revenue per customer. The outcome can help in doing more actionable operational changes and a better use of marketing budgets for those companies who choose to use data analysis on top of GA data.\n\n\n","d93ddfb5":"### Glimpse of data","5eb0367c":"**Loading Libraries**","f8e567fc":" Organic search had the most sessions, followed by Social , Direct and Referrel Search."}}