{"cell_type":{"08c64c6c":"code","3b3bcf36":"code","43a7e756":"code","b7138942":"code","cac36ecc":"code","b30fc194":"code","63cca911":"code","513e3816":"code","3ba693ee":"code","90a664b4":"code","d5164aa6":"code","ef766163":"code","c353017b":"code","30713328":"code","78b22213":"code","f16453c0":"code","3c15bfcb":"code","e2d464c9":"code","f7ceb17e":"code","a7389d56":"code","785673a6":"code","48a47853":"code","81cf770a":"code","cb67c4b6":"code","369a64a6":"code","62d57abd":"code","462c2a47":"code","7ba9ac08":"code","a801e030":"code","b950b802":"code","76ef1413":"code","46b0c447":"code","2f79c642":"code","9512e2b0":"code","dc1ddf51":"code","63c77b06":"code","dbeacd30":"code","0eca2d52":"code","e2956268":"code","be26c05a":"code","8ce75919":"markdown","b8cded7a":"markdown","ac22a520":"markdown","4112390d":"markdown","9fd18f47":"markdown","0f3d195d":"markdown"},"source":{"08c64c6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b3bcf36":"cancer = pd.read_csv(\"..\/input\/seer-breast-cancer-dataset\/SEER Breast Cancer Dataset .csv\")","43a7e756":"cancer.describe()","b7138942":"\ncancer['Estrogen Status'] = cancer['Estrogen Status'].astype('category')\ncancer['Estrogen Status'].dtypes\ncancer['Estrogen Status'] = cancer['Estrogen Status'].cat.codes\n\ncancer['Progesterone Status'] = cancer['Progesterone Status'].astype('category')\ncancer['Progesterone Status'].dtypes\ncancer['Progesterone Status'] = cancer['Progesterone Status'].cat.codes\n\ncancer['Survival Months'] = cancer['Survival Months'].astype('category')\ncancer['Survival Months'].dtypes\ncancer['Survival Months'] = cancer['Survival Months'].cat.codes\n\ncancer['Tumor Size'] = cancer['Tumor Size'].astype('category')\ncancer['Tumor Size'].dtypes\ncancer['Tumor Size'] = cancer['Tumor Size'].cat.codes\n\ncancer['Age'] = cancer['Age'].astype('category')\ncancer['Age'].dtypes\ncancer['Age'] = cancer['Age'].cat.codes\n\ncancer['Status'] = cancer['Status'].astype('category')\ncancer['Status'].dtypes\ncancer['Status'] = cancer['Status'].cat.codes\n\ncancer.head()","cac36ecc":"from sklearn.model_selection import train_test_split \nX = cancer[['Age','Tumor Size','Estrogen Status','Progesterone Status','Survival Months']]\nY = cancer[['Status']]\nX_train , X_test , y_train , y_test  = train_test_split(X ,Y , test_size=.3 , random_state= 1 )","b30fc194":"X_test_static= X_test","63cca911":"l1=[]\nl2=[]\nl3=[]\nl4=[]","513e3816":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\nclf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl1.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","3ba693ee":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl1.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","90a664b4":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0)\nclf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nl1.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","d5164aa6":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nsvc = SVC()\nsvc.fit(X_train,y_train)\ny_pred = svc.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nl1.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","ef766163":"from imblearn.over_sampling import RandomOverSampler\noversample = RandomOverSampler()\nX_train_RandomOverSampler, y_train_RandomOverSampler = oversample.fit_resample(X_train, y_train)","c353017b":"np.unique(y_train_RandomOverSampler,return_counts=True)\nX_test= X_test_static","30713328":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_RandomOverSampler = scaler.fit_transform(X_train_RandomOverSampler)\nX_test = scaler.fit_transform(X_test)","78b22213":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\nclf.fit(X_train_RandomOverSampler,y_train_RandomOverSampler)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl2.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","f16453c0":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(X_train_RandomOverSampler,y_train_RandomOverSampler)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl2.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","3c15bfcb":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0)\nclf.fit(X_train_RandomOverSampler,y_train_RandomOverSampler)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl2.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","e2d464c9":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nsvc = SVC()\nsvc.fit(X_train_RandomOverSampler,y_train_RandomOverSampler)\ny_pred = svc.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl2.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","f7ceb17e":"from imblearn.over_sampling import ADASYN\noversample = ADASYN()\nX_train_adasyn, y_train_adasyn = oversample.fit_resample(X_train, y_train)","a7389d56":"np.unique(y_train_border_adasyn,return_counts=True)\nX_test= X_test_static","785673a6":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_adasyn = scaler.fit_transform(X_train_adasyn)\nX_test = scaler.fit_transform(X_test)","48a47853":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\nclf.fit(X_train_adasyn,y_train_adasyn)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl3.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","81cf770a":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(X_train_adasyn,y_train_adasyn)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl3.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","cb67c4b6":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0)\nclf.fit(X_train_adasyn,y_train_adasyn)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl3.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","369a64a6":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nsvc = SVC()\nsvc.fit(X_train_adasyn,y_train_adasyn)\ny_pred = svc.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl3.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","62d57abd":"from imblearn.over_sampling import SMOTE\noversample = SMOTE()\nX_train_smote, y_train_smote = oversample.fit_resample(X_train, y_train)","462c2a47":"np.unique(y_train_border_smote,return_counts=True)\nX_test= X_test_static","7ba9ac08":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_smote = scaler.fit_transform(X_train_smote)\nX_test = scaler.fit_transform(X_test)","a801e030":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\nclf.fit(X_train_smote,y_train_smote)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl4.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","b950b802":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(X_train_smote,y_train_smote)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl4.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","76ef1413":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0)\nclf.fit(X_train_smote,y_train_smote)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl4.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","46b0c447":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nsvc = SVC()\nsvc.fit(X_train_smote,y_train_smote)\ny_pred = svc.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl4.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","2f79c642":"from imblearn.over_sampling import BorderlineSMOTE\noversample = BorderlineSMOTE()\nX_train_border_smote, y_train_border_smote = oversample.fit_resample(X_train, y_train)","9512e2b0":"np.unique(y_train_border_smote,return_counts=True)\nX_test= X_test_static\nl5=[]","dc1ddf51":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_border_smote = scaler.fit_transform(X_train_border_smote)\nX_test = scaler.fit_transform(X_test)","63c77b06":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=0)\nclf.fit(X_train_border_smote,y_train_border_smote)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl5.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","dbeacd30":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(X_train_border_smote,y_train_border_smote)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl5.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","0eca2d52":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0)\nclf.fit(X_train_border_smote,y_train_border_smote)\ny_pred = clf.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl5.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","e2956268":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nsvc = SVC()\nsvc.fit(X_train_border_smote,y_train_border_smote)\ny_pred = svc.predict(X_test)\nprint(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred))\nprint()\nprint(\"Classifiction Report :\")\nprint(classification_report(y_test, y_pred))\nl5.append(accuracy_score(y_test, y_pred))\nprint(\"Accuracy Score = {}\".format(accuracy_score(y_test, y_pred)))","be26c05a":"data = [['Without Oversampling', l1[0],l1[1],l1[2],l1[3]], ['RandomOverSampling', l2[0],l2[1],l2[2],l2[3]], ['ADASYN', l3[0],l3[1],l3[2],l3[3]],['SMOTE', l4[0],l4[1],l4[2],l4[3]],['Borderline SMOTE', l5[0],l5[1],l5[2],l5[3]]]\n\ndf = pd.DataFrame(data, columns = ['Method', 'NBC', 'DT', 'LR' ,'SVM'])\nprint(df)","8ce75919":"### SMOTE","b8cded7a":"### ADASYN\n","ac22a520":"### RandomOverSampler","4112390d":"### Without OverSampler","9fd18f47":"### Borderline SMOTE","0f3d195d":"### Project implements Random_Oversampling, ADASYN, SMOTE, Borderline_SMOTE"}}