{"cell_type":{"88bb7a6e":"code","eaaee852":"code","d08cd12b":"code","3dda93c7":"code","e41dd9c4":"code","8dd43586":"code","b4cb061b":"code","82144c8b":"code","286781d0":"code","e98bc4d8":"code","8d22d9a1":"code","e6c3d1ff":"code","e975aca8":"code","1fd9b376":"code","6a19725d":"code","0b31017e":"code","e74f4ac3":"code","48dd1f36":"code","f1304e4f":"code","afa6ae1b":"code","a21bfaff":"code","07a00853":"code","35db4f09":"code","08bd1434":"code","c758c759":"code","7cc4da6b":"code","32736c6c":"code","9d84571c":"code","86e13f00":"code","a8612cd0":"code","3fa484ce":"code","5a28a770":"markdown","9f83a637":"markdown","5a44b9de":"markdown","bf05b7bb":"markdown","8ec29721":"markdown","dbe919b4":"markdown","90bdb37e":"markdown","eb660491":"markdown"},"source":{"88bb7a6e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n%matplotlib inline\nwarnings.simplefilter(action='ignore')\nsns.set(rc={'figure.figsize': [10, 10]}, font_scale=1.3)","eaaee852":"#load the data \ncar_dataset = pd.read_csv(\"..\/input\/vehicle-dataset-from-cardekho\/car data.csv\")","d08cd12b":"#inspecting the first 5 rows \ncar_dataset.head(5)","3dda93c7":"#checking the number of rows and columns\ncar_dataset.shape","e41dd9c4":"#getting some information about the data\ncar_dataset.info()","8dd43586":"# to see total columns\ncar_dataset.columns","b4cb061b":"#to check the numerical columns is numerical( make sure that do not have string value)\nfor col in ['Year','Selling_Price','Selling_Price','Kms_Driven','Owner']:\n    car_dataset[col]=pd.to_numeric(car_dataset[col],errors='coerce')","82144c8b":"#working with missing data \ncar_dataset.isna().sum()","286781d0":"#working with categorical data\nfor col in ['Fuel_Type','Seller_Type','Transmission']:\n    print(f'____{col}____')\n    print(car_dataset[col].unique())\n    print('______________')","e98bc4d8":"car_dataset = pd.get_dummies(car_dataset,columns=['Fuel_Type','Seller_Type','Transmission'],drop_first=True)","8d22d9a1":"car_dataset.head(5)","e6c3d1ff":"#detect and handle outliers\nsns.boxplot( x='Selling_Price',data=car_dataset)\nsns.stripplot( x='Selling_Price',data=car_dataset, color=\"#474646\")","e975aca8":"#Outlier Handling via Replacing with Median\n\noutliers_indices = car_dataset.loc[car_dataset['Selling_Price']>14].index\n\ncol_median = car_dataset['Selling_Price'].median()\ncar_dataset['Selling_Price'].iloc[outliers_indices] = col_median","1fd9b376":"sns.boxplot( x='Selling_Price',data=car_dataset)\nsns.stripplot( x='Selling_Price',data=car_dataset, color=\"#474646\")","6a19725d":"#detect and handle outliers\nsns.boxplot( x='Present_Price',data=car_dataset)\nsns.stripplot( x='Present_Price',data=car_dataset, color=\"#474646\")","0b31017e":"#Outlier Handling via removing\noutliers_indices = car_dataset.loc[car_dataset['Present_Price']>22].index\n    \ncar_dataset.drop(outliers_indices, inplace=True)","e74f4ac3":"sns.boxplot( x='Present_Price',data=car_dataset)\nsns.stripplot( x='Present_Price',data=car_dataset, color=\"#474646\")","48dd1f36":"#detect and handle outliers\nsns.boxplot( x='Kms_Driven',data=car_dataset)\nsns.stripplot( x='Kms_Driven',data=car_dataset, color=\"#474646\")","f1304e4f":"#Outlier Handling via removing\noutliers_indices = car_dataset.loc[car_dataset['Kms_Driven']>100000].index\n    \ncar_dataset.drop(outliers_indices, inplace=True)\n","afa6ae1b":"sns.boxplot( x='Kms_Driven',data=car_dataset)\nsns.stripplot( x='Kms_Driven',data=car_dataset, color=\"#474646\")","a21bfaff":"x = car_dataset.drop(['Selling_Price','Car_Name'],axis = 1)\n\ny = car_dataset['Selling_Price']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, \n                                                    random_state=44, shuffle =True)\nX_train","07a00853":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nX_train =scaler.fit_transform(X_train)\n\nX_test = scaler.transform(X_test)","35db4f09":"from sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error ","08bd1434":"models = {\"LR\":LinearRegression(),\n         \"KNNR\":KNeighborsRegressor(),\n         \"SVR\":SVR(),\n         \"DT\":DecisionTreeRegressor(),\n         \"RF\":RandomForestRegressor(),\n         \"XGBR\":XGBRegressor() \n         }","c758c759":"for name,model in models.items():\n    print(f'using model:{name}')\n    model.fit(X_train,y_train)\n    print(f'training score:{round(model.score(X_train, y_train) * 100, 2)}')\n    print(f'test score:{round(model.score(X_test,y_test)*100,2)}')\n    y_pred =model.predict(X_test)\n    print(f'RMSE:{np.sqrt(mean_squared_error(y_test,y_pred))}')\n    print('___________________________________________________')\n     ","7cc4da6b":"#we will choose SVR as it has best acurcy and low mean square  error\nmodel = SVR()\nfrom sklearn.model_selection import GridSearchCV\nselected_parameters ={'kernel':('rbf','linear','sigmoid')\n                      ,'gamma':('scale', 'auto'), \n                      'tol':[0.001,0.01,0.0001,0.00001],\n                      'C':[1,2,3],'epsilon':[0.1,0.2,0.3]}\nGridSearchModel = GridSearchCV(model,selected_parameters,cv =2,return_train_score=True)\nGridSearchModel.fit(X_train,y_train)\nsorted(GridSearchModel.cv_results_.keys())\nGridSearchResults = pd.DataFrame(GridSearchModel.cv_results_)[['mean_test_score',\n                                                               'std_test_score',\n                                                               'params' ,\n                                                               'rank_test_score',\n                                                               'mean_fit_time']]\n\n# Showing Results\nprint('All Results are :\\n', GridSearchResults )\nprint('Best Score is :', GridSearchModel.best_score_)\nprint('Best Parameters are :', GridSearchModel.best_params_)\nprint('Best Estimator is :', GridSearchModel.best_estimator_)\n","32736c6c":"\nmodel = SVR(C=3, gamma='auto', tol=1e-05)\nmodel.fit(X_train,y_train)\ny_pred =model.predict(X_test)\ny_pred\n","9d84571c":"y_test","86e13f00":"#check mean squared error\nprint(np.sqrt(mean_squared_error(y_test,y_pred)))","a8612cd0":"test_data = [2017,6,4000,1,0,1,0,1]\ntest_data = scaler.transform([test_data])","3fa484ce":"model.predict(test_data)","5a28a770":"# feature scaling ","9f83a637":"# split data to train & test sets","5a44b9de":"# machine learning& model evaluating","bf05b7bb":"# import libraries","8ec29721":"### Hope you find this code useful !","dbe919b4":"# target \n### making  a model to predict the car price","90bdb37e":"# data collection & preprocessing","eb660491":"# testing on real data"}}