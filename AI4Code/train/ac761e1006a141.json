{"cell_type":{"adf00eb5":"code","3d494f4e":"code","6a36314d":"code","7c463a35":"code","f5cced85":"code","1e49ee55":"code","472258ca":"code","4d449a0c":"code","9ecb4f71":"code","3f9d1c75":"code","5c8029b7":"code","5556d53e":"code","fbbf327d":"code","2e56c604":"code","fc26bb82":"code","bf67d017":"code","a5054de1":"code","c0c3b4d2":"code","07a40f9c":"code","3c98529e":"code","0cae2844":"code","2f640b31":"code","4d143b13":"code","d9c36376":"code","0e125ea5":"code","dd029be3":"code","a17ab8c1":"code","316dc885":"code","a1637213":"code","79357610":"code","12d37bd6":"code","eb8f611c":"code","082f305a":"code","1340c78a":"code","032e3882":"code","7ee7223c":"code","bbff475a":"code","5156a47b":"code","d17e464e":"code","61519b17":"code","b4326104":"markdown","bd911650":"markdown","6e09e26f":"markdown","40783b80":"markdown","b84280fb":"markdown","68d7882b":"markdown","ca8df515":"markdown","0d92dc04":"markdown"},"source":{"adf00eb5":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","3d494f4e":"housing_df_train = pd.read_csv(r\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nhousing_df_train.head()","6a36314d":"housing_df_test = pd.read_csv(r\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nhousing_df_test.head()","7c463a35":"housing_df_train.shape","f5cced85":"housing_df_test.shape","1e49ee55":"housing_df = pd.concat((housing_df_train.loc[:,'MSSubClass':'SaleCondition'],\n                      housing_df_test.loc[:,'MSSubClass':'SaleCondition']))","472258ca":"percentage = ((housing_df.isnull().sum() \/ housing_df.shape[0]) *100).sort_values(ascending=False)\nTotal = housing_df.isnull().sum().sort_values(ascending=False)\nmiss_data = pd.concat([Total, percentage], axis=1, keys=[\"Total\", \"Percentage\"])\nmiss_data = miss_data[miss_data.Total >= 1]\nmiss_data","4d449a0c":"col_to_drop = miss_data.index\nfor col in col_to_drop:\n    print(housing_df[col].value_counts(dropna = False))\n    print(\"------------------------------------------------\")","9ecb4f71":"year_build = pd.concat([housing_df.YearBuilt, housing_df.GarageYrBlt], axis=1, keys=[\"House_Build\", \"Gar_Build\"])\nyear_build.describe()","3f9d1c75":"(year_build.House_Build == year_build.Gar_Build).sum() \/ year_build.shape[0] * 100","5c8029b7":"year_build[\"Gar_Build\"] = np.where(year_build.Gar_Build.isnull(), year_build.House_Build, year_build.Gar_Build)","5556d53e":"(year_build.House_Build == year_build.Gar_Build).sum() \/ year_build.shape[0] * 100","fbbf327d":"housing_df.GarageType = np.where(housing_df.GarageType.isnull(), \"No Garage\", housing_df.GarageType)\nhousing_df.GarageFinish = np.where(housing_df.GarageFinish.isnull(), \"No Garage\", housing_df.GarageFinish)\nhousing_df.GarageCond = np.where(housing_df.GarageCond.isnull(), \"No Garage\", housing_df.GarageCond)\nhousing_df.GarageQual = np.where(housing_df.GarageQual.isnull(), \"No Garage\", housing_df.GarageQual)\nhousing_df.GarageYrBlt = np.where(housing_df.GarageYrBlt.isnull(), housing_df.YearBuilt, housing_df.GarageYrBlt)","2e56c604":"housing_df.BsmtFinType2 = np.where(housing_df.BsmtFinType2.isnull(), \"No Basement\", housing_df.BsmtFinType2)\nhousing_df.BsmtExposure = np.where(housing_df.BsmtExposure.isnull(), \"No Basement\", housing_df.BsmtExposure)\nhousing_df.BsmtQual = np.where(housing_df.BsmtQual.isnull(), \"No Basement\", housing_df.BsmtQual)\nhousing_df.BsmtFinType1 = np.where(housing_df.BsmtFinType1.isnull(), \"No Basement\", housing_df.BsmtFinType1)\nhousing_df.BsmtCond = np.where(housing_df.BsmtCond.isnull(), \"No Basement\", housing_df.BsmtCond)","fc26bb82":"percentage = ((housing_df.isnull().sum() \/ housing_df.shape[0]) *100).sort_values(ascending=False)\nTotal = housing_df.isnull().sum().sort_values(ascending=False)\nmiss_data = pd.concat([Total, percentage], axis=1, keys=[\"Total\", \"Percentage\"])\nmiss_data = miss_data[miss_data.Total >= 1]\nmiss_data","bf67d017":"lot_frontage = housing_df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\nlot_frontage.head()","a5054de1":"housing_df[\"LotFrontage\"] = housing_df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","c0c3b4d2":"housing_df[\"PoolQC\"] = housing_df[\"PoolQC\"].fillna(\"No Pool\")\nhousing_df[\"MiscFeature\"] = housing_df[\"MiscFeature\"].fillna(\"no misc feature\")\nhousing_df[\"Alley\"] = housing_df[\"Alley\"].fillna(\"No Alley Access\")\nhousing_df[\"Fence\"] = housing_df[\"Fence\"].fillna(\"No Fence\")","07a40f9c":"housing_df.GarageType = np.where(housing_df.GarageType.isnull(), \"No Garage\", housing_df.GarageType)\nhousing_df.GarageFinish = np.where(housing_df.GarageFinish.isnull(), \"No Garage\", housing_df.GarageFinish)\nhousing_df.GarageCond = np.where(housing_df.GarageCond.isnull(), \"No Garage\", housing_df.GarageCond)\nhousing_df.GarageQual = np.where(housing_df.GarageQual.isnull(), \"No Garage\", housing_df.GarageQual)\nhousing_df.GarageYrBlt = np.where(housing_df.GarageYrBlt.isnull(), housing_df.YearBuilt, housing_df.GarageYrBlt)","3c98529e":"housing_df.BsmtFinType2 = np.where(housing_df.BsmtFinType2.isnull(), \"No Basement\", housing_df.BsmtFinType2)\nhousing_df.BsmtExposure = np.where(housing_df.BsmtExposure.isnull(), \"No Basement\", housing_df.BsmtExposure)\nhousing_df.BsmtQual = np.where(housing_df.BsmtQual.isnull(), \"No Basement\", housing_df.BsmtQual)\nhousing_df.BsmtFinType1 = np.where(housing_df.BsmtFinType1.isnull(), \"No Basement\", housing_df.BsmtFinType1)\nhousing_df.BsmtCond = np.where(housing_df.BsmtCond.isnull(), \"No Basement\", housing_df.BsmtCond)","0cae2844":"housing_df.FireplaceQu = np.where(housing_df.FireplaceQu.isnull(), \"No Fireplace\", housing_df.FireplaceQu)","2f640b31":"percentage = ((housing_df.isnull().sum() \/ housing_df.shape[0]) *100).sort_values(ascending=False)\nTotal = housing_df.isnull().sum().sort_values(ascending=False)\nmiss_data = pd.concat([Total, percentage], axis=1, keys=[\"Total\", \"Percentage\"])\nmiss_data = miss_data[miss_data.Total >= 1]\nmiss_data","4d143b13":"housing_df[\"MasVnrType\"] = housing_df[\"MasVnrType\"].fillna(\"None\")\nhousing_df[\"MasVnrArea\"] = housing_df[\"MasVnrArea\"].fillna(0)","d9c36376":"housing_df['Electrical'] = housing_df['Electrical'].fillna(housing_df['Electrical'].mode()[0])","0e125ea5":"housing_df['MSZoning'] = housing_df['MSZoning'].fillna(housing_df['MSZoning'].mode()[0])\nhousing_df = housing_df.drop(['Utilities'], axis=1)\nhousing_df[\"Functional\"] = housing_df[\"Functional\"].fillna(\"Typ\")\nhousing_df['Electrical'] = housing_df['Electrical'].fillna(housing_df['Electrical'].mode()[0])\nhousing_df['KitchenQual'] = housing_df['KitchenQual'].fillna(housing_df['KitchenQual'].mode()[0])\nhousing_df['Exterior1st'] = housing_df['Exterior1st'].fillna(housing_df['Exterior1st'].mode()[0])\nhousing_df['Exterior2nd'] = housing_df['Exterior2nd'].fillna(housing_df['Exterior2nd'].mode()[0])\nhousing_df['SaleType'] = housing_df['SaleType'].fillna(housing_df['SaleType'].mode()[0])\nhousing_df['MSSubClass'] = housing_df['MSSubClass'].fillna(\"None\")","dd029be3":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    housing_df[col] = housing_df[col].fillna(0)","a17ab8c1":"for col in ('GarageArea', 'GarageCars'):\n    housing_df[col] = housing_df[col].fillna(0)","316dc885":"housing_df.isnull().sum().max()","a1637213":"#housing_df = housing_df.drop(\"Id\",  axis=1)\ncategorical_var = housing_df.loc[:, housing_df.dtypes == np.object].columns\nscal_var = housing_df.loc[:, housing_df.dtypes != np.object].columns","79357610":"housing_df_dummy = pd.get_dummies(housing_df[categorical_var], drop_first=True)\nhousing_df_dummy.head()","12d37bd6":"housing_df_dummy.shape","eb8f611c":"housing_df = pd.concat([housing_df, housing_df_dummy], axis=1)\nhousing_df = housing_df.drop(categorical_var, axis=1)\nhousing_df.head()","082f305a":"X_train = housing_df[:housing_df_train.shape[0]]\nX_test = housing_df[housing_df_test.shape[0]:-1]\ny_train = housing_df_train.SalePrice","1340c78a":"# model coefficients\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\nfrom sklearn import linear_model\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n# grid search cv\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\n\n#Set up cross validation scheme\nfolds = KFold(n_splits=5, shuffle=True, random_state=4)\n\n# specify the hyper parameters\nparam = {'alpha':[1.0, 5.0, 10.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 100.0, 150.0, 200.0, 250.0, 300.0]}\n\nmodel = Lasso()\nmodel_cv = GridSearchCV(estimator=model, param_grid=param, \n                       scoring='r2', cv=folds, \n                        return_train_score=True, verbose=1)\nmodel_cv.fit(X_train, y_train)","032e3882":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results.head()","7ee7223c":"# plot\ncv_results['param_alpha'] = cv_results['param_alpha'].astype('float32')\nplt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\nplt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\nplt.xlabel('alpha')\nplt.ylabel('r2 score')\nplt.vlines(x=15, ymax=1, ymin=0, colors='r', linestyles='--')\nplt.show()","bbff475a":"# model with optimal alpha\n# lasso regression\nlm = Lasso(alpha=15)\nlm.fit(X_train, y_train)\n\n# predict\ny_train_pred = lm.predict(X_train)\nprint(metrics.r2_score(y_true=y_train, y_pred=y_train_pred))","5156a47b":"# lasso model parameters\nmodel_parameters = list(lm.coef_)\nmodel_parameters.insert(0, lm.intercept_)\nmodel_parameters = [round(x, 3) for x in model_parameters]\ncols = X_train.columns\ncols = cols.insert(0, \"constant\")\nlist(zip(cols, model_parameters))","d17e464e":"price_pred = lm.predict(X_test)","61519b17":"solution = pd.DataFrame({\"id\":housing_df_test.Id, \"SalePrice\":price_pred})\nsolution","b4326104":"If we look every unique value into features realted to the Garage there is one feature which describe the Type of the garage but it can not include the value for no garage available so the `NA` value is for the garage is not available so instead of treating this `NA` value as missing we can replace this as `No Garage`","bd911650":"There is Still some columns which has lots of missing value we can replace the `NA` value from the `FireplaceQu` as `No fireplace` as messioned in Data directory. ","6e09e26f":"There is no null value in dataframe","40783b80":"### Model Building","b84280fb":"For `GarageYrBlt` 76% of value are same as `YearBuilt` columns so we can replace NaN value with respective year of build value","68d7882b":"We can Fill the LotFrontage value with median of neighborhood lot frontage cause they almost share the same space between streets","ca8df515":"### Dummy Variable","0d92dc04":"If we look every unique value into features realted to the Garage there is one feature which describe the Type of the garage but it can not include the value for no garage available so the `NA` value is for the garage is not available so instead of treating this `NA` value as missing we can replace this as `No Garage`"}}