{"cell_type":{"d5f611fc":"code","a3ecad69":"code","cdb10918":"code","cd1925d4":"code","a7376d34":"code","5d7c2533":"code","9e039b6f":"code","c9c29f5d":"code","cd76d3a6":"code","f0f18f05":"code","56341a07":"code","34144c1a":"code","91b323e9":"code","b71cb37e":"code","01412894":"code","5f06da35":"code","2d0ec9a4":"code","9228db70":"markdown","2d629a02":"markdown","dcfdba75":"markdown","9ae170e7":"markdown","24c05e80":"markdown","883deae0":"markdown","d55de5c7":"markdown","f3c12add":"markdown","a4973347":"markdown","e4688412":"markdown","d5e0234d":"markdown","2e133cbb":"markdown","362e1563":"markdown"},"source":{"d5f611fc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix, f1_score, recall_score, precision_score, accuracy_score, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n# Import dataset\nfile_path = '\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv'\ndf = pd.read_csv(file_path)\ndf.head(10)","a3ecad69":"# Check for missing values\nif df.isna().sum().sum() == 0:\n    print('No missing values.')\n\n# Check for duplicate customerIDs\nif df['customerID'].duplicated().any() == False:\n    print('No duplicate customers.')","cdb10918":"# Check feature datatypes\ndf.dtypes","cd1925d4":"# Understand number of unique values for each categorical feature\ndf.select_dtypes(object).nunique()","a7376d34":"# Choose a few features to look into with regards to churn\ncols_vis = ['InternetService','PaymentMethod','Contract']\nsns.set()\ncust_pal = ['#157DEC','#4CC552']\nsns.set_palette(cust_pal)\nfor i in range(0,len(cols_vis)):\n    df_plot = pd.DataFrame(df.groupby([cols_vis[i],'Churn'])['Churn'].count())\n    df_plot.rename(columns = {'Churn': 'TotalCustomers'}, inplace=True)\n    df_plot.reset_index(inplace = True)\n    chart = sns.barplot(x=cols_vis[i], y='TotalCustomers', hue=\"Churn\", data=df_plot)\n    plt.ylabel(\"Total Customers\", size=14)\n    plt.xlabel(cols_vis[i], size=14)\n    chart.set_xticklabels(chart.get_xticklabels(), rotation=30)\n    plt.title(\"Customer Churn by \" + cols_vis[i], size=18)\n    plt.show()","5d7c2533":"# Relationship between monthly charges and churn\ndf_charge_churn = df.groupby(['Churn'])['MonthlyCharges'].mean()\ndisplay(df_charge_churn)","9e039b6f":"# Check number of classes\ndf.Churn.unique()\n\n# Change Yes and No to 1 and 0 for columns where only options are Yes and No\ndict = {'Yes': 1, 'No': 0}\ndf.replace({'Churn': dict}, inplace = True)\n\n# Check class balance\ndf.groupby(['Churn'])['Churn'].count()","c9c29f5d":"# Note that TotalCharges it not categorical - it's numeric\n# Likely loaded that way due to bad data so turn those values into nan\ndf['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')\ndf['TotalCharges'].isna().sum()\ndf.dropna(subset=['TotalCharges'], axis = 0, inplace = True)","cd76d3a6":"# Look for outliers in monthly charges and total charges\nsns.boxplot(x=df['MonthlyCharges'])\nplt.show()\nsns.boxplot(x=df['TotalCharges'])\nplt.show()","f0f18f05":"# Looks to be a significant amount of variation in total charges\n# Focus on 5% to 95%\nPerc5 = round(np.percentile(df['TotalCharges'],5),2)\nPerc95 = round(np.percentile(df['TotalCharges'],95),2)\n\nprint('Focus on customers with total charges between ${} and ${}.'.format(Perc5,Perc95))\n    \n# Filter dataset\ndf = df.loc[(df['TotalCharges'] <= Perc95) & (df['TotalCharges'] >= Perc5)]","56341a07":"# Noticing some redundant information in columns for customers without internet service\ncols = ['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\ndf[cols] = df[cols].replace({'No internet service': 'No'})","34144c1a":"# Encode categorical variables\ndf.drop('customerID', axis = 1, inplace = True)\ndf['SeniorCitizen'] = df['SeniorCitizen'].astype(object)\ndf_encoded = pd.get_dummies(df.select_dtypes(object), drop_first = True)\ndf_numeric = df.select_dtypes(include = 'number')\ndf_final = pd.merge(df_encoded, df_numeric, left_index = True, right_index = True)\n\n# Build a Logistic Regression model\nX = df_final.drop(['Churn'], axis = 1)\nY = df_final['Churn']","91b323e9":"# Define Build Models Function\ndef BuildModel(X,Y,Algorithm,imb_class):\n    if imb_class == 1:\n        oversample = SMOTE()\n        X, Y = oversample.fit_resample(X, Y)\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)\n    if Algorithm == 'LogisticRegression':\n        Classifier = LogisticRegression(max_iter=1000)\n    if Algorithm == 'RandomForest':\n        Classifier = RandomForestClassifier(n_estimators = 1000)\n    if Algorithm == 'NaiveBayes':\n        Classifier = GaussianNB()\n    Classifier = Classifier.fit(X_train,Y_train)\n    Y_pred = Classifier.predict(X_test)\n    precision = round(precision_score(Y_test,Y_pred),2)\n    recall = round(recall_score(Y_test,Y_pred),2)\n    fscore = round(f1_score(Y_test,Y_pred),2)\n    accuracy = round(accuracy_score(Y_test,Y_pred),2)\n    return precision, recall, fscore, accuracy;","b71cb37e":"model_efficacy = pd.DataFrame(columns = ['Algorithm','SMOTE','Precision','Recall','FScore','Accuracy'])\n\nfor i in range(0,2):\n    Alg = ['LogisticRegression','RandomForest','NaiveBayes']\n    for j in range(0,len(Alg)):\n        Algorithm = Alg[j]\n        precision, recall, fscore, accuracy = BuildModel(X,Y,Algorithm,i)\n        new_row = {'Algorithm': Algorithm, 'SMOTE': i, 'Precision': precision, 'Recall': recall, 'FScore': fscore, 'Accuracy': accuracy}\n        model_efficacy = model_efficacy.append(new_row, ignore_index = True)\n    \n    i = i+1\n\ndisplay(model_efficacy)","01412894":"# Try building a different model for each group of internet users..\n\nIS_DSL = df.loc[df['InternetService'] == 'DSL']\nIS_FiberOptic = df.loc[df['InternetService'] == 'Fiber optic']\nIS_No = df.loc[df['InternetService'] == 'No']\n\n# Check count of classes\ndsl = IS_DSL.groupby(['Churn'])['Churn'].count()\nfo = IS_FiberOptic.groupby(['Churn'])['Churn'].count()\nno = IS_No.groupby(['Churn'])['Churn'].count()\nclass_compare = \\\npd.DataFrame(columns = ['InternetService','Churn_0','Churn_1'] \\\n             ,data = [['DSL',dsl[0],dsl[1]], \\\n                      ['FiberOptic',fo[0],fo[1]], \\\n                      ['None',no[0],no[1]]])\ndisplay(class_compare)","5f06da35":"# Encode categorical variables\nIS_DSL.drop('InternetService', axis = 1, inplace = True)\nIS_FiberOptic.drop('InternetService', axis = 1, inplace = True)\nIS_No.drop('InternetService', axis = 1, inplace = True)\n\nIS_DSL_encoded = pd.get_dummies(IS_DSL.select_dtypes(object), drop_first = True)\nIS_DSL_numeric = IS_DSL.select_dtypes(include = 'number')\nIS_DSL_final = pd.merge(IS_DSL_encoded, IS_DSL_numeric, left_index = True, right_index = True)\n\nIS_FiberOptic_encoded = pd.get_dummies(IS_FiberOptic.select_dtypes(object), drop_first = True)\nIS_FiberOptic_numeric = IS_FiberOptic.select_dtypes(include = 'number')\nIS_FiberOptic_final = pd.merge(IS_FiberOptic_encoded, IS_FiberOptic_numeric, left_index = True, right_index = True)\n\nIS_No_encoded = pd.get_dummies(IS_No.select_dtypes(object), drop_first = True)\nIS_No_numeric = IS_No.select_dtypes(include = 'number')\nIS_No_final = pd.merge(IS_No_encoded, IS_No_numeric, left_index = True, right_index = True)","2d0ec9a4":"model_efficacy_separate = pd.DataFrame(columns = ['InternetService','Precision','Recall','FScore','Accuracy'])\n\n# DSL\nX = IS_DSL_final.drop(['Churn'], axis = 1)\nY = IS_DSL_final['Churn']\nprecision, recall, fscore, accuracy = BuildModel(X,Y,'LogisticRegression',1)\nnew_row = {'InternetService': 'DSL', 'Precision': precision, 'Recall': recall, 'FScore': fscore, 'Accuracy': accuracy}\nmodel_efficacy_separate = model_efficacy_separate.append(new_row, ignore_index = True)\n\n# Fiber Optic\nX = IS_FiberOptic_final.drop(['Churn'], axis = 1)\nY = IS_FiberOptic_final['Churn']\nprecision, recall, fscore, accuracy = BuildModel(X,Y,'LogisticRegression',0)\nnew_row = {'InternetService': 'Fiber Optic', 'Precision': precision, 'Recall': recall, 'FScore': fscore, 'Accuracy': accuracy}\nmodel_efficacy_separate = model_efficacy_separate.append(new_row, ignore_index = True)\n\n# None\nX = IS_No_final.drop(['Churn'], axis = 1)\nY = IS_No_final['Churn']\nprecision, recall, fscore, accuracy = BuildModel(X,Y,'LogisticRegression',1)\nnew_row = {'InternetService': 'None', 'Precision': precision, 'Recall': recall, 'FScore': fscore, 'Accuracy': accuracy}\nmodel_efficacy_separate = model_efficacy_separate.append(new_row, ignore_index = True)\n\ndisplay(model_efficacy_separate)","9228db70":"The contract vs. customer churn plot seems obvious - those in a two-year contract might face some monetary penalty for leaving, thus leading to very low customer churn.\n\nCustomer churn across payment methods looks pretty stable with the exception of customers who pay by electronic check, of which there are more that churn than the other methods. That could be something to look into in further work.\n\nCustomer churn by internet service was particularly interesting to me. It appears that customer with no internet have the lowest churn, and those with the fastest speed (fiber optic) have the highest rate of churn. Could it be that the speeds aren't as advertised, or perhaps the service is too expensive? It appears that the company's fiber optic internet service just doesn't seem to be worth the money in some way.","2d629a02":"Next, I will encode the categorical variables to prepare for building the models:","dcfdba75":"# Building Models to Predict Teclo Customer Churn\nUsing the Telco Customer Churn dataset, I'll build models to predict customer churn.\n\n### Outline:\n1. Import libraries and data\n2. Get an understanding of the data: relationships between features, check for imbalanced supervisor, remove possible outliers\n3. Build models using original dataset and data sampled using SMOTE to account for imbalanced casses\n4. Build models based on internet service type\n\nWhat I am doing with this notebook is illustrating that building an effective model for the entire dataset can be supplemented with building models for specific subsets of the data.\n\nMore specifically, I'll build a model to predict customer churn given no specifics about the customer. I'll then build models for customers who have DSL internet and those that have no internet. In order to get the best predictions, based on the attributes of a customer, a company could use the general model, or if they know the customer has DSL or no internet, they can use those specific models to generate more accurate predictions.\n","9ae170e7":"Logistic Regression and Random Forest, both with SMOTE, perform the best. It would be my business informed decision to choose Logistic Regression to deploy in this case, as it is easier to explain to internal and external clients.\n\nSince I noticed a distinct difference in churn by the type of internet service a customer has, I'm going to build models based on the subsets of data group by internet service:","24c05e80":"Below, I'll plot three features with customer churn:","883deae0":"Now I'll do a very basic check for outliers by creating a box and whisker chart for customer monthly charges and customer total charges.","d55de5c7":"Ultimately, I was able to get slightly higher performance for DSL and No Internet, and lower performance for Fiber Optic. This is expected given the general dataset performance.\n\nIn this case, I would recommend the business use the DSL or No Internet specific models if the customer falls into those groups. If the customer has Fiber Optic internet, I'd recommend using the general model. If the business is unsure which internet service a customer has for some reason, or they frequently change service, the general model should be used in that case.","f3c12add":"It seems logical that those who are generally paying more per month are more likely to churn. The more expensive a service, the more a customer would consider that when looking at their budget. They're also more likely to be skeptical of any mishaps with that service if they're paying more than they'd like.","a4973347":"I define a function to easily build and evaluate models:","e4688412":"The total charges chart is skewed, so I'll focus my work on the data between the 5th and 95th percentile of charges.","d5e0234d":"There is an imbalance in classes which I'll work with before building the models.","2e133cbb":"There is obviously some class imbalance in DSL and No Internet, but Fiber Optic looks ok. I'll stick with Logistic Regression for simplicity since it performed the best on the general dataset.","362e1563":"Now that I have my BuildModels function define, I am going to loop through a few different algorithms, with and without using SMOTE, to see how well they perform."}}