{"cell_type":{"0002fd5a":"code","10535722":"code","fa7b2859":"code","5d8146b9":"code","e4caab8e":"code","868d17c9":"code","839dbfd2":"code","130be92e":"code","7af78c3e":"code","201ab3cd":"code","1b24be1e":"code","4f02ce24":"code","f4bec7a4":"code","2f3eb0f3":"code","150766a0":"code","d83040d2":"code","2b20ffb8":"code","d08b2873":"code","7fac7930":"markdown","210038f0":"markdown","e5aaec1f":"markdown","720a6c24":"markdown","39538064":"markdown","09d31251":"markdown"},"source":{"0002fd5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10535722":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fa7b2859":"df = pd.read_csv(\"..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")","5d8146b9":"df.head()","e4caab8e":"df.describe()","868d17c9":"df.dtypes","839dbfd2":"df.isnull().sum()","130be92e":"plt.figure(1 , figsize = (15 , 6))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1 , 3 , n)\n    sns.distplot(df[x] , bins = 20)\n    plt.title('Distplot of {}'.format(x))\nplt.show()","7af78c3e":"sns.heatmap(df.corr())","201ab3cd":"x = df[['Age','Annual Income (k$)','Spending Score (1-100)']]","1b24be1e":"wcss = []\nscore = []\nfor n in range(2,10):\n    kmeans = KMeans(n)\n    kmeans.fit(x)\n    wcss.append(kmeans.inertia_)\n    score.append(metrics.silhouette_score(x,kmeans.labels_))","4f02ce24":"import plotly.graph_objects as go\nfig = go.Figure(go.Scatter(x=tuple(range(2,10)), y=wcss,\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig.update_xaxes(title_text=\"Number of clusters\")\nfig.update_yaxes(title_text=\"Within Cluster Sum of Squares\")\nfig.show()","f4bec7a4":"import plotly.graph_objects as go\nfig = go.Figure(go.Scatter(x=tuple(range(2,10)), y=score,\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig.update_yaxes(title_text=\"Silhouette Coefficient\")\nfig.update_xaxes(title_text=\"Number of clusters\")\nfig.show()","2f3eb0f3":"kmeans = KMeans(6)\nkmeans.fit(x)","150766a0":"x_clusters = x.copy()\nx_clusters['Cluster'] = kmeans.labels_","d83040d2":"fig, (axes) = plt.subplots(1,2,figsize=(12,5))\nsns.scatterplot(x=x_clusters['Age'], y=x_clusters['Spending Score (1-100)'],\n                hue=x_clusters['Cluster'],ax=axes[0], palette='Set1', legend='full')\nsns.scatterplot(x=x_clusters['Annual Income (k$)'], y=x_clusters['Spending Score (1-100)'],\n                hue=x_clusters['Cluster'],ax=axes[1], palette='Set1', legend='full')","2b20ffb8":"import plotly.express as px\ndf = px.data.iris()\nfig = px.scatter_3d(x_clusters, x='Age', y='Spending Score (1-100)', z='Annual Income (k$)',\n              color='Cluster')\nfig.show()","d08b2873":"from sklearn.manifold import TSNE\ntsne = TSNE()\npalette = sns.color_palette(\"bright\", 6)\nX_embedded = tsne.fit_transform(x)\nsns.scatterplot(X_embedded[:,0], X_embedded[:,1], hue=kmeans.labels_, legend='full', palette=palette)","7fac7930":"## K Means Clustering","210038f0":"### Get range from Elbow method and finalize number of clusters (k) using Silhouette Coefficient","e5aaec1f":"We can see that the best result is possible at cluster n=6.","720a6c24":"## Visualization","39538064":"No missing values","09d31251":"## EDA"}}