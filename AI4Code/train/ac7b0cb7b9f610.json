{"cell_type":{"357bf1bd":"code","165163b5":"code","5111c0b7":"code","948fca04":"code","cf9201a3":"code","3814f3b0":"code","a5a55128":"code","9e91fb75":"code","2cc980a0":"code","4f2e288b":"code","f8e491eb":"code","d28565e7":"code","475bac87":"code","74e80d4b":"code","32f9edc9":"code","3259b102":"code","870efa2e":"code","abbc917a":"code","32884dec":"code","1e8638d8":"code","acc9e74d":"code","9fe1e8d3":"code","1972f734":"code","41c3219c":"code","938e8251":"code","83272a6a":"code","4a9200fd":"code","7e495538":"code","95d40b52":"code","e196ce4b":"code","88811c3b":"code","acb5074b":"code","a7b490c5":"code","a565f084":"code","bbb5dee3":"code","520fb66b":"code","01ada207":"code","dae825f9":"markdown","07aa649d":"markdown","2c92448a":"markdown","9ca04545":"markdown","f9c7d13f":"markdown","203a5355":"markdown","69c50124":"markdown","d2853b40":"markdown","7ea87d28":"markdown","06ae36be":"markdown","57993767":"markdown","ff83342f":"markdown","1882e523":"markdown","7dfc268a":"markdown","658d7a37":"markdown","1ff3cbe4":"markdown"},"source":{"357bf1bd":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport os\nfrom typing import List, Tuple","165163b5":"# prettify plots\nplt.rcParams['figure.figsize'] = [20.0, 5.0]","5111c0b7":"def create_axes_grid(numplots_x, numplots_y, plotsize_x=6, plotsize_y=3):\n    fig, axes = plt.subplots(numplots_y, numplots_x)\n    fig.set_size_inches(plotsize_x * numplots_x, plotsize_y * numplots_y)\n    return fig, axes\n    \ndef set_axes(axes, use_grid=True, x_val = [0,100,10,5], y_val = [-50,50,10,5]):\n    axes.grid(use_grid)\n    axes.tick_params(which='both', direction='inout', top=True, right=True, labelbottom=True, labelleft=True)\n    axes.set_xlim(x_val[0], x_val[1])\n    axes.set_ylim(y_val[0], y_val[1])\n    axes.set_xticks(np.linspace(x_val[0], x_val[1], np.around((x_val[1] - x_val[0]) \/ x_val[2] + 1).astype(int)))\n    axes.set_xticks(np.linspace(x_val[0], x_val[1], np.around((x_val[1] - x_val[0]) \/ x_val[3] + 1).astype(int)), minor=True)\n    axes.set_yticks(np.linspace(y_val[0], y_val[1], np.around((y_val[1] - y_val[0]) \/ y_val[2] + 1).astype(int)))\n    axes.set_yticks(np.linspace(y_val[0], y_val[1], np.around((y_val[1] - y_val[0]) \/ y_val[3] + 1).astype(int)), minor=True)","948fca04":"def remove_drift_from_data(segm_signal_groups: List,\n                           signal: np.ndarray,\n                           hist_bins: Tuple[np.ndarray, any],\n                           clean_hist: List,\n                           s_window: int = 10):\n    print('len(segm_signal_groups)', len(segm_signal_groups))\n    print('len(signal[n]):', len(signal[0]), f'x {len(segm_signal_groups)- 1}')\n\n    bin_width = np.diff(hist_bins)[0]\n    signal_shift = []\n    for clean_id in range(len(segm_signal_groups)):\n\n        group_id = segm_signal_groups[clean_id]\n        window_shift = []\n        prev_s = 0\n        window_data = signal[clean_id].reshape(-1, window_size)\n\n        print(\n            f'Processing clean_id: {clean_id}, group_id: {group_id}, '\n            f'window_data: {window_data[0][:3]}, len(window_data): {len(window_data)}...'\n        )\n\n        for w in window_data:\n            window_hist = np.histogram(w, bins=hist_bins)[0] \/ window_size\n            window_corr = np.array([np.sum(clean_hist[group_id] * np.roll(window_hist, -s))\n                                    for s in range(prev_s - s_window, prev_s + s_window + 1)])\n            prev_s = prev_s + np.argmax(window_corr) - s_window\n            window_shift.append(-prev_s * bin_width)\n\n        window_shift = np.array(window_shift)\n        signal_shift.append(window_shift)\n\n    return signal_shift","cf9201a3":"# using 4th order polynomial feature\ndef remove_noise_from_data(window_size: int,\n                 signal_shift: List[np.ndarray],\n                 segm_is_shifted: List[np.ndarray],\n                 signal: np.ndarray) -> Tuple[List, List]:\n    signal_shift_clean = []\n    signal_detrend = []\n    for data, use_fit, signal in zip(signal_shift, segm_is_shifted, signal):\n        if use_fit:\n            data_x = np.arange(len(data), dtype=float) * window_size + window_size \/ 2\n            fit = np.flip(np.polyfit(data_x, data, 4))\n            data_x = np.arange(len(data) * window_size, dtype=float)\n            data_2 = np.sum([c * data_x ** i for i, c in enumerate(fit)], axis=0)\n        else:\n            data_2 = np.zeros(len(data) * window_size, dtype=float)\n\n        signal_shift_clean.append(data_2)\n        signal_detrend.append(signal + data_2)\n\n    return signal_shift_clean, signal_detrend\n","3814f3b0":"def create_clean_histogram(signal: np.ndarray, \n                           histogram_chunk_size: int, \n                           model_segments: List) -> List:\n    clean_hist = []\n    for j, i in enumerate(model_segments):\n        clean_hist.append(np.histogram(signal[i], bins=hist_bins)[0])\n        clean_hist[-1] = clean_hist[-1] \/ histogram_chunk_size   # normalize histogram\n\n    return clean_hist","a5a55128":"def save_dataframe(dataframe: pd.DataFrame,\n                   signal_detrend: np.ndarray,\n                   openchannel: np.ndarray,\n                   filename_with_path: str,\n                   force_overwrite=False):\n    dataframe['signal'] = np.concatenate(signal_detrend)\n    if openchannel:\n        dataframe['open_channels'] = np.concatenate(openchannel)\n    print(\"Shape:\", dataframe.shape)\n    print(\"Contents:\\n\", dataframe)\n    print()\n    print(f'force_overwrite = {force_overwrite}')\n    if force_overwrite or (not os.path.exists(filename_with_path)):\n        print(f\"Saving dataframe to {filename_with_path}.\")\n        dataframe.to_csv(filename_with_path, index=False, float_format='%.9f',\n                                       chunksize=100000, compression='gzip', encoding='utf-8')\n    else:\n        print(f\"{filename_with_path} already exists, not overwriting. Remove it and try again.\")","9e91fb75":"window_size = 1000\nNOT_APPLICABLE = None\ns_window = 10  # maximum absolute change in shift from window to window+1\nhist_bins = np.linspace(-4,10,500)\nmodel_segments = [0, 3, 4, 6, 5]","2cc980a0":"df_train = pd.read_csv(\"..\/input\/liverpool-ion-switching\/train.csv\")\ndf_test  = pd.read_csv(\"..\/input\/liverpool-ion-switching\/test.csv\")","4f2e288b":"fig, axes = create_axes_grid(1,2,30,5)\n# training dataset\nset_axes(axes[0], x_val=[0,5000000,500000,100000], y_val=[-5,15,5,1])\naxes[0].plot(df_train['signal'], color='darkblue', linewidth=.1);\naxes[0].set_title('training')\nplt.tick_params(labelsize=14)\n# test dataset\nset_axes(axes[1], x_val=[0,2000000,100000,10000], y_val=[-5,15,5,1])\naxes[1].set_title('test')\naxes[1].plot(df_test['signal'], color='darkgreen', linewidth=.1);\nplt.tick_params(labelsize=14)","f8e491eb":"train_segm_separators = np.concatenate([[0,500000,600000], np.arange(1000000,5000000+1,500000)]) \n## notice [0,500000,600000], to pick up the abbreration in the signals\n\n# [0, 1, 2, 3, 4] = are indices of the signal groups 0 to 4.\ntrain_segm_signal_groups = [0,0,0,1,2,4,3,1,2,3,4] # from visual identification\nprint(\"len(train_segm_signal_groups)\", len(train_segm_signal_groups))\ntrain_segm_is_shifted = [False, True, False, False, False, False, False, True, True, True, True] # from visual identification\nprint(\"len(train_segm_is_shifted)\", len(train_segm_is_shifted))\ntrain_signal = np.split(df_train['signal'].values, train_segm_separators[1:-1])\ntrain_opench = np.split(df_train['open_channels'].values, train_segm_separators[1:-1])","d28565e7":"# create clean signal histograms: training dataset\nfig, axes = create_axes_grid(1,1,30,4)\nset_axes(axes, x_val=[-4,8,1,.1], y_val=[0,0.05,0.01,0.01])\n\ntrain_clean_hist = []\nfor j,i in enumerate(model_segments):\n    train_clean_hist.append(np.histogram(train_signal[i], bins=hist_bins)[0])\n    train_clean_hist[-1] = train_clean_hist[-1] \/ 500_000 # normalize histogram\n    axes.plot(hist_bins[1:], train_clean_hist[-1], label='Data segment (model segment) '+str(i)+', signal group '+str(j));\naxes.legend();\naxes.set_title(\"Clean reference histograms for all 5 signal groups\");\nplt.tick_params(labelsize=16)\nplt.legend(prop={'size': 16})","475bac87":"clean_hist = train_clean_hist","74e80d4b":"segment_starting_points = [0,25000,50000,75000]\naxes.plot(hist_bins[1:], clean_hist[0]);\nfor i in segment_starting_points:\n    window_hist = np.histogram(train_signal[1][i:i+window_size], bins=hist_bins)[0] \/ window_size\n    axes.plot(hist_bins[1:], window_hist);","32f9edc9":"def examine_linear_shift_in_train_segment(segment_index: int = 1):\n    fig, axes = create_axes_grid(1,1,30,4)\n    set_axes(axes, x_val=[-4,2,1,.1], y_val=[0,0.05,0.01,0.01])\n\n    segment_starting_points = [0,25000,50000,75000]\n    axes.plot(hist_bins[1:], clean_hist[0]);\n    for i in segment_starting_points:\n        window_hist = np.histogram(train_signal[segment_index][i:i+window_size], bins=hist_bins)[0] \/ window_size\n        axes.plot(hist_bins[1:], window_hist);\n","3259b102":"#examine_linear_shift_in_train_segment(0) # Data segment (model segment) = 0 (seems fine)\n#examine_linear_shift_in_train_segment(2) # Data segment (model segment) = 2 (seems fine)","870efa2e":"examine_linear_shift_in_train_segment(1) # Data segment (model segment) = 1 (shifted)","abbc917a":"examine_linear_shift_in_train_segment(3) # Data segment (model segment) = 3 (shifted)","32884dec":"examine_linear_shift_in_train_segment(4) # Data segment (model segment) = 4 (shifted)","1e8638d8":"examine_linear_shift_in_train_segment(6) # Data segment (model segment) = 5 (shifted)","acc9e74d":"examine_linear_shift_in_train_segment(5) # Data segment (model segment) = 6 (shifted)","9fe1e8d3":"clean_hist = create_clean_histogram(train_signal, \n                                    500000, \n                                    model_segments)","1972f734":"train_signal_shift = remove_drift_from_data(train_segm_signal_groups,\n                                            train_signal,\n                                            hist_bins,\n                                            clean_hist)","41c3219c":"fig, axes = create_axes_grid(1,1,30,4)\nset_axes(axes, x_val=[0,5000,500,100], y_val=[-5,1,1,.1])\naxes.plot(np.concatenate(train_signal_shift));\naxes.set_title(\"Shift value as determined by histogram matching:\");","938e8251":"train_signal_shift_clean, train_signal_detrend = remove_noise_from_data(\n                                    window_size,\n                                    train_signal_shift,\n                                    train_segm_is_shifted,\n                                    train_signal\n)","83272a6a":"fig, axes = create_axes_grid(1,1,30,4)\nset_axes(axes, x_val=[0,5000000,500000,100000], y_val=[-6,1,1,.1])\naxes.plot(np.concatenate(train_signal_shift_clean));\naxes.set_title(\"Final shift value after polynomial fit\");","4a9200fd":"fig, axes = create_axes_grid(1,1,30,5)\nset_axes(axes, x_val=[0,5000000,500000,100000], y_val=[-5,15,5,1])\naxes.plot(np.concatenate(train_signal_detrend), linewidth=.1);\naxes.set_title(\"Training data without shift\");","7e495538":"save_dataframe(df_train,\n               train_signal_detrend,\n               train_opench,\n               'train_clean_removed_drift.csv.gz')","95d40b52":"df_test  = pd.read_csv(\"..\/input\/liverpool-ion-switching\/test.csv\")","e196ce4b":"test_segm_separators = np.concatenate([np.arange(0,1000000+1,100000), [1500000,2000000]])\n# [0, 1, 2, 3, 4] = are indices of the signal groups 0 to 4.\ntest_segm_signal_groups = [0,2,3,0,1,4,3,4,0,2,0,0] # from visual id\nprint(\"len(test_segm_signal_groups)\", len(test_segm_signal_groups))\ntest_segm_is_shifted = [True, True, False, False, True, False, True, True, True, False, True, False] # from visual id\nprint(\"len(test_segm_is_shifted)\", len(test_segm_is_shifted))\ntest_signal = np.split(df_test['signal'].values, test_segm_separators[1:-1])","88811c3b":"# Just drawing the graphs for the test dataset out of curiosity, \n# since we don't do the same exercise for it as we did for the training dataset above\n# create clean signal histograms: test dataset\nfig, axes = create_axes_grid(1,1,30,4)\nset_axes(axes, x_val=[-4,8,1,.1], y_val=[0,0.05,0.01,0.01])\n\ntest_clean_hist = []\nfor j,i in enumerate(model_segments):\n    test_clean_hist.append(np.histogram(test_signal[i], bins=hist_bins)[0])\n    test_clean_hist[-1] = test_clean_hist[-1] \/ 200_000 # normalize histogram\n    axes.plot(hist_bins[1:], test_clean_hist[-1], label='Data segment (model segment) '+str(i)+', signal group '+str(j));\naxes.legend();\naxes.set_title(\"Clean reference histograms for all 5 signal groups\");\nplt.tick_params(labelsize=16)\nplt.legend(prop={'size': 16})","acb5074b":"test_signal_shift = remove_drift_from_data(test_segm_signal_groups,\n                                           test_signal,\n                                           hist_bins,\n                                           clean_hist)  ","a7b490c5":"fig, axes = create_axes_grid(1,1,30,4)\nset_axes(axes, x_val=[0,2000,100,10], y_val=[-6,1,1,.1])\naxes.plot(np.concatenate(test_signal_shift));\naxes.set_title(\"Shift value as determined by histogram matching:\");","a565f084":"test_remove_shift = [True, True, False, False, True, False, True, True, True, False, True, False]\ntest_signal_shift_clean, test_signal_detrend = remove_noise_from_data(\n                                   window_size,\n                                   test_signal_shift,\n                                   test_segm_is_shifted,\n                                   test_signal\n)","bbb5dee3":"fig, axes = create_axes_grid(1,1,30,4)\nset_axes(axes, x_val=[0,2000000,100000,10000], y_val=[-6,1,1,.1])\naxes.plot(np.concatenate(test_signal_shift_clean));\naxes.set_title(\"Final shift value after polynomial fit\");","520fb66b":"fig, axes = create_axes_grid(1,1,30,5)\nset_axes(axes, x_val=[0,2000000,200000,10000], y_val=[-5,12,5,1])\naxes.plot(np.concatenate(test_signal_detrend), linewidth=.1);\naxes.set_title(\"Test data without shift\");","01ada207":"save_dataframe(df_test,\n           test_signal_detrend,\n           NOT_APPLICABLE,\n           'test_clean_removed_drift.csv.gz')","dae825f9":"Let's take a look at the linear shift in segment 1 and compare the histogram of 4 slices of width 1000 (at 0,25000,50000 and 75000) to the clean histogram of segment 0:","07aa649d":"The data consists of different segments which can be sorted into one of 5 \"signal groups\":","2c92448a":"And the same procedure for the test data:","9ca04545":"Finally, save all info as a csv file:","f9c7d13f":"## Training and test dataset overview","203a5355":"## Full credits to the author [Marcus F](https:\/\/www.kaggle.com\/friedchips) of [the original notebook](https:\/\/www.kaggle.com\/friedchips\/clean-removal-of-data-drift\/).\n\n#### I have just reorganised and refactored the code for my curiosity and learnings. Added console longs, a few additional graphs and also saved the datasets as `.csv` files. \n\n##### I have also posted a couple of questions\/discussion points on the [Comments section](https:\/\/www.kaggle.com\/friedchips\/clean-removal-of-data-drift\/comments#819150). Please feel free to answer there as well as comment below.\n\nAlso recommend have a read of this discussion on [What is drift](https:\/\/www.kaggle.com\/c\/liverpool-ion-switching\/discussion\/133874)?\n\n### Find other such refactored notebooks [here](https:\/\/www.kaggle.com\/c\/liverpool-ion-switching\/discussion\/153653).","69c50124":"## Test dataset","d2853b40":"The training data segments 0,3,4,6,5 are the \"model segments\" for the signal groups 0-5, respectively (clean & no shift):","7ea87d28":"Finally, approximation by a 4th order polynomial:","06ae36be":"This results in an already quite clean shift signal:","57993767":"## Training dataset","ff83342f":"It's visually clear that the shift can be determined by matching the window histograms to the clean histogram. Now we need to do this automatically for all shifted data segments:","1882e523":"Visual identification can easily determine a) the signal group and b) whether there is a drift:","7dfc268a":"This notebook shows how to remove the drift from the training and test data as cleanly as possible. A clean signal is extremely important, since predictions from any ML models depend strongly on the precise value of each data point. The drift is removed by computing the histograms of small signal batches and matching them to an ideal (non-shifted) histogram. The resulting shifts are already much better than those from e.g. a rolling mean. The shifts are then further smoothed by approximating them with 4th degree polynomials. \nThe resulting clean signal retains the original offset.\nFor the pupose of this competition, the \"signal groups\" (see below) are determined by hand. This could also be done in an automated way (e.g. through analysis of the histograms) in the case of real-world data.","658d7a37":"Finally, save all info as a csv file:","1ff3cbe4":"The final shift and the cleaned signal:"}}