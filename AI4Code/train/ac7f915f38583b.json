{"cell_type":{"42032551":"code","4bdbf8f1":"code","d770da69":"code","5b43e35b":"code","440a61de":"code","a4a79e8c":"code","08c0c4da":"code","491bf06d":"code","ef79a6d1":"code","e7928cff":"code","ee8a33ec":"code","032050aa":"code","15a70010":"code","d321ad2e":"code","45b1a818":"code","831dd13b":"code","294a15e2":"code","1bb5b669":"code","3251634d":"code","fa3ca4da":"code","819c22da":"code","c982d9cd":"code","b7e78d41":"code","38c19a06":"code","4a42922d":"code","2989e3ab":"code","057e25a2":"code","9b0f2dc8":"code","8d12268c":"code","9b9b26b1":"code","d9f02983":"code","b7844d7d":"code","24a73357":"code","5cea89df":"code","88bafddd":"code","8af1edf0":"code","968748f9":"code","e2ec3224":"code","1e185005":"code","bc36e998":"code","83c58a0d":"code","b05364f4":"markdown","c7b6b578":"markdown","14e073d3":"markdown","32a74d13":"markdown","e9982217":"markdown","ef56fad6":"markdown","fa5c5ce9":"markdown"},"source":{"42032551":"#%%writefile imports.py\nfrom sklearn.model_selection import train_test_split\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go \nimport os\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom catboost import CatBoostRegressor\nfrom xgboost.sklearn import XGBRegressor\n%matplotlib inline\nimport sklearn.metrics as metrics\nfrom math import sqrt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4bdbf8f1":"df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","d770da69":"df_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","5b43e35b":"df.head()","440a61de":"all_df = pd.concat([df_test.copy(),df.drop('SalePrice',axis=1).copy()])","a4a79e8c":"nan_columns  = all_df.loc[:,all_df.isnull().any()].columns","08c0c4da":"#type of nan_columns\nall_df.loc[:,nan_columns].info()","491bf06d":"all_df.hist(bins=25);\nplt.gcf().set_size_inches(20,30);","ef79a6d1":"#Description of all columns!\ndescription = {'MSSubClass':'The building class',\n'MSZoning':'The general zoning classification',\n'LotFrontage':'Linear feet of street connected to property',\n'LotArea':'Lot size in square feet',\n'Street':'Type of road access',\n'Alley':'Type of alley access',\n'LotShape':'General shape of property',\n'LandContour':'Flatness of the property',\n'Utilities':'Type of utilities available',\n'LotConfig':'Lot configuration',\n'LandSlope':'Slope of property',\n'Neighborhood':'Physical locations within Ames city limits',\n'Condition1':'Proximity to main road or railroad',\n'Condition2':'Proximity to main road or railroad (if a second is present)',\n'BldgType':'Type of dwelling',\n'HouseStyle':'Style of dwelling',\n'OverallQual':'Overall material and finish quality',\n'OverallCond':'Overall condition rating',\n'YearBuilt':'Original construction date',\n'YearRemodAdd':'Remodel date',\n'RoofStyle':'Type of roof',\n'RoofMatl':'Roof material',\n'Exterior1st':'Exterior covering on house',\n'Exterior2nd':'Exterior covering on house (if more than one material)',\n'MasVnrType':'Masonry veneer type',\n'MasVnrArea':'Masonry veneer area in square feet',\n'ExterQual':'Exterior material quality',\n'ExterCond':'Present condition of the material on the exterior',\n'Foundation':'Type of foundation',\n'BsmtQual':'Height of the basement',\n'BsmtCond':'General condition of the basement',\n'BsmtExposure':'Walkout or garden level basement walls',\n'BsmtFinType1':'Quality of basement finished area',\n'BsmtFinSF1':'Type 1 finished square feet',\n'BsmtFinType2':'Quality of second finished area (if present)',\n'BsmtFinSF2':'Type 2 finished square feet',\n'BsmtUnfSF':'Unfinished square feet of basement area',\n'TotalBsmtSF':'Total square feet of basement area',\n'Heating':'Type of heating',\n'HeatingQC':'Heating quality and condition',\n'CentralAir':'Central air conditioning',\n'Electrical':'Electrical system',\n'1stFlrSF':'First Floor square feet',\n'2ndFlrSF':'Second floor square feet',\n'LowQualFinSF':'Low quality finished square feet (all floors)',\n'GrLivArea':'Above grade (ground) living area square feet',\n'BsmtFullBath':'Basement full bathrooms',\n'BsmtHalfBath':'Basement half bathrooms',\n'FullBath':'Full bathrooms above grade',\n'HalfBath':'Half baths above grade',\n'Bedroom':'Number of bedrooms above basement level',\n'Kitchen':'Number of kitchens',\n'KitchenQual':'Kitchen quality',\n'TotRmsAbvGrd':'Total rooms above grade (does not include bathrooms)',\n'Functional':'Home functionality rating',\n'Fireplaces':'Number of fireplaces',\n'FireplaceQu':'Fireplace quality',\n'GarageType':'Garage location',\n'GarageYrBlt':'Year garage was built',\n'GarageFinish':'Interior finish of the garage',\n'GarageCars':'Size of garage in car capacity',\n'GarageArea':'Size of garage in square feet',\n'GarageQual':'Garage quality',\n'GarageCond':'Garage condition',\n'PavedDrive':'Paved driveway',\n'WoodDeckSF':'Wood deck area in square feet',\n'OpenPorchSF':'Open porch area in square feet',\n'EnclosedPorch':'Enclosed porch area in square feet',\n'3SsnPorch':'Three season porch area in square feet',\n'ScreenPorch':'Screen porch area in square feet',\n'PoolArea':'Pool area in square feet',\n'PoolQC':'Pool quality',\n'Fence':'Fence quality',\n'MiscFeature':'Miscellaneous feature not covered in other categories',\n'MiscVal':'$Value of miscellaneous feature',\n'MoSold':'Month Sold',\n'YrSold':'Year Sold',\n'SaleType':'Type of sale',\n'SaleCondition':'Condition of sale'}","e7928cff":"#priting the columns with nan and their description\nprint('\\nColumns with NaN: Description and type:\\n')\nfor i in nan_columns:\n    if i in description.keys():\n        print(i+':'+description[i]+' - type: {}, N: {}'.format(all_df[i].dtype,all_df[i].isnull().sum()))","ee8a33ec":"# Finding numeric features\nnumeric_dtypes = ['int64', 'float64']\nnumeric = []\nfor i in df.columns:\n    if df[i].dtype in numeric_dtypes:\n        if i in ['TotalSF', 'Total_Bathrooms','Total_porch_sf','haspool','hasgarage','hasbsmt','hasfireplace']:\n            pass\n        else:\n            numeric.append(i)     \n# visualising some more outliers in the data values\nfig, axs = plt.subplots(ncols=2, nrows=0, figsize=(12, 120))\nplt.subplots_adjust(right=2)\nplt.subplots_adjust(top=2)\nsns.color_palette(\"Paired\")\nfor i, feature in enumerate(list(df[numeric]), 1):\n    if(feature=='MiscVal'):\n        break\n    plt.subplot(len(list(numeric)), 3, i)\n    sns.scatterplot(x=feature, y='SalePrice', palette=\"deep\", data=df)\n        \n    plt.xlabel('{}'.format(feature), size=15,labelpad=14.5)\n    plt.ylabel('SalePrice', size=15, labelpad=14.5)\n    \n    for j in range(2):\n        plt.tick_params(axis='x', labelsize=12)\n        plt.tick_params(axis='y', labelsize=12)\n    \n        \nplt.show()","032050aa":"all_df.head()","15a70010":"all_df.loc[all_df.Alley.notnull()]","d321ad2e":"#filling NaNs - MSZoning and LotFrontage, based on other features\nall_df['MSZoning'] = all_df.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\nall_df['LotFrontage'] = all_df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))","45b1a818":"#creating more cols!\nall_df['general_qual'] = all_df['OverallQual'] + all_df['OverallCond']\nall_df['build_remodel'] = all_df['YearRemodAdd'] - all_df['YearBuilt']","831dd13b":"#sum of bathrooms\nall_df['baths'] = (all_df.BsmtFullBath) + (all_df.BsmtHalfBath * 0.5)","294a15e2":"#transforming year and month into categorical!\nall_df['MoSold'] = all_df['MoSold'].astype(str) \nall_df['YrSold'] = all_df['YrSold'].astype(str)","1bb5b669":"# Creating a feature with 3SsnPorch based on 0 or non 0\nall_df['3SsnPorch_exist'] =all_df['3SsnPorch'].apply(lambda x: 1 if x!=0 else 0)","3251634d":"#Creating a feature for 2nd floor existence and GrLivArea\nall_df['2ndFlrExist'] = all_df['2ndFlrSF'].apply(lambda x: 1 if x!=0 else 0)\nall_df['GrLivAreaExist'] = all_df['GrLivArea'].apply(lambda x: 1 if x!=0 else 0)","fa3ca4da":"#filling the categorical values with None (str)\nfor i in all_df.select_dtypes(include='object').columns:\n    all_df[i].fillna('None',inplace=True)","819c22da":"#filling the non categorical values with 0\nfor i in all_df.select_dtypes(exclude='object').columns:\n    all_df[i].fillna(0,inplace=True)","c982d9cd":"all_df.head()","b7e78d41":"all_df.iloc[:,1:20]","38c19a06":"all_df.iloc[:,20:40]","4a42922d":"all_df.iloc[:,40:60]","2989e3ab":"all_df.iloc[:,60:80]","057e25a2":"all_df.iloc[:,80:]","9b0f2dc8":"#applying get_dummies!\nall_df = pd.get_dummies(all_df)","8d12268c":"all_df.shape","9b9b26b1":"#Removing duplicated columns if exists\nall_df = all_df.loc[:,~all_df.columns.duplicated()]\nall_df.shape","d9f02983":"#applying RobustScaler into our X\nall_df = pd.DataFrame(RobustScaler().fit_transform(all_df),columns=all_df.columns)","b7844d7d":"#Spliting - Train and Test again!\ntrain_labels = all_df.iloc[:len(df), :].copy()\nX_test = all_df.iloc[len(train_labels):, :].copy()\nall_df.shape, train_labels.shape, X_test.shape","24a73357":"X_train_house, X_test_house, y_train_house, y_test_house =\\\n    train_test_split(train_labels.copy(),np.log1p(df['SalePrice']).copy(),random_state=42,test_size=0.2)\n                     \nxgb = XGBRegressor(random_state=6534).fit(X_train_house,y_train_house)\nrf = RandomForestRegressor(random_state=6534).fit(X_train_house,y_train_house)\ncatboost = CatBoostRegressor(random_state=6534,verbose=0).fit(X_train_house,y_train_house)\n\ny_pred_house_ = (xgb.predict(X_test_house) * 0.34 ) + (rf.predict(X_test_house) * 0.33 ) +\\\n                     (catboost.predict(X_test_house) * 0.33)\n\ny_pred_house = np.floor(np.expm1(y_pred_house_))\ny_test_house = np.floor(np.expm1(y_test_house))\n\n#### TRYING TO MINIMIZE RMSE ###\n#q1 = np.quantile(y_pred_house,0.0045)\n#q2 = np.quantile(y_pred_house,0.99)\n#y_pred_house = pd.Series(y_pred_house).apply(lambda x: x if x > q1 else x*0.77)\n#y_pred_house = y_pred_house.apply(lambda x: x if x < q2 else x*1.1)\n\n#y_pred_house  *= 1.001619\n#----------------------------#\n\nMAE_test = metrics.mean_absolute_error(y_test_house, y_pred_house)\nR2_test = metrics.r2_score(y_test_house, y_pred_house)\nRMSE_test = sqrt(metrics.mean_squared_error(y_test_house, y_pred_house))\n\nprint('--- Test evaluation ---')\nprint('MAE:', round(MAE_test,2))\nprint('R2: ', round(R2_test,2))\nprint('RMSE: ',round(RMSE_test,2))","5cea89df":"#Changing the target scale \ny_train = np.log1p(df['SalePrice'].copy())","88bafddd":"#creating & fitting our models!\nxgb = XGBRegressor(random_state=6534).fit(train_labels,y_train)\nrf = RandomForestRegressor(random_state=6534).fit(train_labels,y_train)\ncatboost = CatBoostRegressor(random_state=6534,verbose=0).fit(train_labels,y_train)","8af1edf0":"#predicting our values!\ny_pred = (xgb.predict(X_test) * 0.34 ) + (rf.predict(X_test) * 0.33 ) + (catboost.predict(X_test) * 0.33)","968748f9":"submission = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nsubmission.shape","e2ec3224":"#Rescaling our target!\nsubmission.iloc[:,1] = np.floor(np.expm1(y_pred))","1e185005":"submission.to_csv(\"submission_regression0.csv\", index=False)","bc36e998":"#Fixing outliers! If the value is too high or too low\nq1 = submission['SalePrice'].quantile(0.0045)\nq2 = submission['SalePrice'].quantile(0.99)\nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x > q1 else x*0.77)\nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x < q2 else x*1.1)\nsubmission.to_csv(\"submission_regression1.csv\", index=False)","83c58a0d":"#fixing some probable scale error\nsubmission['SalePrice'] *= 1.001619\nsubmission.to_csv(\"submission_regression2.csv\", index=False)","b05364f4":"# Looking at the dataset","c7b6b578":"# House Prices: Advanced Regression Techniques\n\n## Competition Description\n\n\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.\n\n## Practice Skills\n- Creative feature engineering \n- Advanced regression techniques like random forest and gradient boosting\n","14e073d3":"# To start lets discover which columns have NaN values!","32a74d13":"[Download the Data]('https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data')","e9982217":"# Okay, we already now the columns that can have missing values!","ef56fad6":"# Features that have non-linear pattern (with SalePrice as y)\n    -PoolArea\n    -ScreenPorch\n    -3SsnPorch\n    -GarageArea (?)\n    -KitchenAbvGr\n    -BsmtHalfBath\n    -BsmtFullBath\n    -LowQualFinSF","fa5c5ce9":"# Some feature engineering"}}