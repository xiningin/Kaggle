{"cell_type":{"c8401865":"code","bbb0e3f5":"code","d9a79f31":"code","68fafb7a":"code","24932176":"code","106eb73e":"code","6ac667c0":"code","840edc78":"code","3296e058":"code","0ec803e8":"code","6277946e":"code","08e955f6":"code","f314802f":"code","885622ff":"code","7d291cf8":"code","ac5c85ba":"code","dd6b3dfd":"code","a1766013":"code","b541db0a":"code","7ae9131d":"code","43bc2b6b":"code","75364427":"code","be49f9ba":"code","0134e26e":"code","6594f65f":"code","534ce37b":"code","4a8ea7b0":"code","ca628288":"code","7152041b":"code","7849d9c8":"code","0f548acf":"code","92d01b55":"code","22801dff":"code","f13a57fd":"code","52b39c23":"code","5045c69f":"code","da06698f":"code","fbe975ca":"code","80578239":"code","33b5e5cd":"markdown","cbb4870d":"markdown","4ca303f7":"markdown","9476ad32":"markdown"},"source":{"c8401865":"import warnings\nwarnings.filterwarnings('ignore')","bbb0e3f5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d9a79f31":"diamond_data = sns.load_dataset('diamonds')\ndiamond_data.head()","68fafb7a":"diamond_data.info()","24932176":"diamond_data.cut.cat.as_ordered()","106eb73e":"diamond_data.clarity.cat.as_ordered()","6ac667c0":"diamond_data.drop(['color','table'],axis=1,inplace=True)","840edc78":"n_rows=2\nn_cols=3\n\nfig, axes = plt.subplots(nrows=n_rows, ncols=n_cols, figsize=(12, 8))\nfor i, column in enumerate(diamond_data.select_dtypes(['float','int'])):\n    sns.distplot(diamond_data[column], ax=axes[i \/\/ n_cols, i % n_cols]).set_ylabel('')\n","3296e058":"sns.catplot(x='cut',y='price',data=diamond_data,kind='bar');","0ec803e8":"sns.catplot(x='clarity',y='price',data=diamond_data,kind='bar');","6277946e":"from sklearn.preprocessing import OrdinalEncoder\n\nfor col in diamond_data.select_dtypes('category'):\n  diamond_data[col+'_OE'] = OrdinalEncoder([list(diamond_data[col].cat.categories)],np.int64).fit_transform(diamond_data[[col]])","08e955f6":"from sklearn.preprocessing import RobustScaler\n\nfor col in diamond_data[['carat','depth','x','y','z']]:\n  diamond_data[col+'_RS'] = RobustScaler().fit_transform(diamond_data[[col]])","f314802f":"diamond_cleaned_data = diamond_data.loc[:,['cut_OE','clarity_OE','carat_RS','depth_RS','x_RS','y_RS','z_RS','price']]\ndiamond_cleaned_data.head()","885622ff":"X = diamond_cleaned_data.drop('price', axis=1)  \nY = diamond_cleaned_data['price']  \n\n# dividing data into training and testing set\nfrom sklearn.model_selection import train_test_split  \nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=10)  \n","7d291cf8":"from sklearn.neighbors import KNeighborsRegressor\n\nKNR=KNeighborsRegressor()\nKNR.fit(X_train,Y_train)\n\nY_pred=KNR.predict(X_test)\n","ac5c85ba":"from sklearn import metrics  \nimport numpy as np\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, Y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, Y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, Y_pred))) ","dd6b3dfd":"diamond_cleaned_data.price.mean()\/10","a1766013":"RMSE = []\n\nfor Neighbors_Val in range(3,11):\n  KNR=KNeighborsRegressor(n_neighbors=Neighbors_Val)\n  KNR.fit(X_train,Y_train)\n  RMSE.append(np.sqrt(metrics.mean_squared_error(Y_test,KNR.predict(X_test))))\n","b541db0a":"fg,ax = plt.subplots()\nplt.plot(range(3,11),RMSE,marker='o',linestyle='dashed',axes=ax)\nax.grid()\nax.set_ylabel('RMSE')\nax.set_xlabel('Neighbors');","7ae9131d":"penguins_data = pd.read_csv('..\/input\/palmer-penguins-datasetalternative-iris-dataset\/penguins.csv')\npenguins_data.head()","43bc2b6b":"penguins_data.info()","75364427":"penguins_data.species.value_counts()","be49f9ba":"penguins_data = penguins_data.sample(frac=1.0).reset_index(drop=True)","0134e26e":"penguins_data.head()","6594f65f":"penguins_data.isnull().sum()","534ce37b":"for column_name in penguins_data.select_dtypes(include='float',exclude='object'):\n  penguins_data.loc[:,column_name].fillna(penguins_data.loc[:,column_name].mean(),axis=0,inplace=True)","4a8ea7b0":"penguins_data.sex.fillna(method ='ffill', inplace = True)","ca628288":"sns.scatterplot(x='bill_length_mm',y='bill_depth_mm',hue='species',data=penguins_data,style='species');","7152041b":"sns.scatterplot(x='bill_length_mm',y='flipper_length_mm',hue='species',data=penguins_data,style='species');","7849d9c8":"sns.catplot(kind='bar',x='island',y='bill_length_mm',data=penguins_data,hue='species');","0f548acf":"sns.catplot(kind='bar',x='sex',y='bill_length_mm',data=penguins_data,hue='species');","92d01b55":"sns.pairplot(penguins_data,hue='species');","22801dff":"from sklearn.preprocessing import LabelEncoder\n\nfor col in penguins_data[['sex','island']]:\n  penguins_data[col] = LabelEncoder().fit_transform(penguins_data[col])","f13a57fd":"from sklearn.preprocessing import StandardScaler\n\nfor col in penguins_data[['bill_length_mm','bill_depth_mm','flipper_length_mm','body_mass_g']]:\n  penguins_data[col] = StandardScaler().fit_transform(penguins_data[[col]])","52b39c23":"from sklearn.model_selection import train_test_split\n\nX = penguins_data.drop('species',axis=1)\nY = penguins_data['species']\n\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=10)","5045c69f":"from sklearn.neighbors import KNeighborsClassifier\n\nKNC = KNeighborsClassifier()\nKNC.fit(X_train,Y_train)\n\nY_pred = KNC.predict(X_test)\n","da06698f":"from sklearn import metrics\n\nprint(metrics.accuracy_score(Y_test,Y_pred))\nprint(metrics.confusion_matrix(Y_test,Y_pred))\nprint(metrics.classification_report(Y_test,Y_pred))","fbe975ca":"ACC_SCORE = []\n\nfor Neighbors_Val in range(3,11):\n  KNC=KNeighborsClassifier(n_neighbors=Neighbors_Val)\n  KNC.fit(X_train,Y_train)\n  ACC_SCORE.append(round(metrics.accuracy_score(Y_test,KNC.predict(X_test))*100,2))\n\n","80578239":"plt.plot(range(3,11),ACC_SCORE,marker='o',linestyle='dashed',markerfacecolor='red')\nplt.xlabel('Accuracy Score')\nplt.ylabel('Neighbors');","33b5e5cd":"This algorithm predict\/classify new set of value by using neighbors data points and require a 'n' value. \n\nThis value should always be odd.\n\n\n![](https:\/\/drive.google.com\/uc?export=view&id=1MfJKzC9JOM-rQmXH5hy1kh7PE_sR1X6F)","cbb4870d":"## KNeighbors Regressor","4ca303f7":"# K Neighbors\n\n","9476ad32":"## KNeighbors Classifier"}}