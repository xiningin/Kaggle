{"cell_type":{"caf1c2fc":"code","68040066":"code","5ad3d617":"code","1c77b56f":"code","7c6126e7":"code","160c9ddd":"code","6723a586":"code","be7f2103":"code","2b0605a7":"code","687fba97":"code","4008ae60":"code","a6dbebdd":"code","3bb07bab":"code","c120c217":"code","e424cba4":"markdown","e080f28f":"markdown","1ddb7e53":"markdown","6ecee5d6":"markdown","fc2ec95e":"markdown","1469014d":"markdown"},"source":{"caf1c2fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68040066":"#importing necessary modules\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","5ad3d617":"#getting the data\ndata = pd.read_csv('\/kaggle\/input\/drug-classification\/drug200.csv')\ndata.head()","1c77b56f":"#barchart visualizing sex \ndata['Sex'].value_counts().plot(kind = 'barh')\n\n#Observations: sex are similar, males are slightly higher than females","7c6126e7":"#Barchart visualizing Cholesterol\ndata['Cholesterol'].value_counts().plot(kind = 'barh')\n\n#Observations: Cholesterol are similar, High Cholesterol are slightly higher than Normal Cholesterol","160c9ddd":"#Barchart visualizing BP\ndata['BP'].value_counts().plot(kind = 'barh')\n\n#Observations: BP are gradually increasing from normal to high","6723a586":"#Barchart visualizing Drug type \ndata['Drug'].value_counts().plot(kind = 'barh')\n\n#Observations: Drug Y and X given the most ","be7f2103":"#scatter plot visualizing relationship of Na to K and drug type \nplt.figure(figsize=(14,7))\nscatter_plot = plt.scatter(data['Na_to_K'],data['Drug'] )\nplt.title(\"Drug type and natri to K relationship \")\nplt.xlabel(\"Na to K\")\nplt.ylabel(\"Drug type\")\nplt.show()\n\n#Observations: Drug Y given to patients have Na to K over 14.8","2b0605a7":"#scatter plot visualizing relationship of Age and drug type \nplt.figure(figsize=(14,7))\nscatter_plot = plt.scatter(data['Age'] ,data['Drug'], color = 'red')\nplt.title(\"Drug type and age relationship \")\nplt.xlabel(\"Drug type\")\nplt.ylabel(\"Age\")\n\n#Observations: Drug B only given to patients over 50\n            #  Drug A only given to patients under 50","687fba97":"from sklearn.preprocessing import LabelEncoder\n\n#function to label\ndef label_encoder (x): \n  le = LabelEncoder()\n  data[x] = le.fit_transform(data[x])\n    \n#create a list of data needed to be labeled\ncategories = ['Sex', 'BP', 'Cholesterol', 'Drug']\n\nfor label in categories: \n  label_encoder(label)","4008ae60":"from sklearn.model_selection import train_test_split\n\nX = data.drop('Drug', axis = 1 )\nY = data['Drug']\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, random_state = 0)\n\n#Display shape of training and testing data\nprint('X_train', X_train.shape)\nprint('X_test', X_test.shape)\nprint('y_train', y_train.shape)\nprint('y_test', y_test.shape)\nprint('data', data.shape)","a6dbebdd":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nfrom graphviz import Source\nfrom sklearn import metrics\n\n#using max_depth 5 \ntree = DecisionTreeClassifier(max_depth=5)\n\ntree.fit(X,Y)\n\n#Accuracy result \nprint(\"training\",  metrics.accuracy_score(y_train, tree.predict(X_train)) * 100)\nprint(\"testing\", metrics.accuracy_score(y_test, tree.predict(X_test))* 100)","3bb07bab":"#Display the decision tree predictions image\n\nfeature_namess = ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']\nDrug = ['Y', 'A', 'B', 'C', 'X' ]\nexport_graphviz(tree, \n                out_file =\"drug_tree.dot\",\n                feature_names = feature_namess[:5],\n                class_names = Drug[:5],\n                rounded = True, \n                filled = True,\n                )\n\nSource.from_file( \"drug_tree.dot\")","c120c217":"from sklearn.neighbors import KNeighborsClassifier\n\nKModel = KNeighborsClassifier()\n\nKModel.fit(X, Y)\n\nprint (\"training\", metrics.accuracy_score (y_train, KModel.predict(X_train)) * 100)\nprint (\"testing\", metrics.accuracy_score (y_test, KModel.predict(X_test)) *100)","e424cba4":"# **Data Visualization**","e080f28f":"# **Train Test Split**","1ddb7e53":"#  **Reading data**","6ecee5d6":"# **Decision Tree Model**","fc2ec95e":"# **Label Encoding**","1469014d":"# **K Nearest Neighbor Model**"}}