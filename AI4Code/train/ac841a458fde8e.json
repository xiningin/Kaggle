{"cell_type":{"1212f5be":"code","7e7092f9":"code","c586b64e":"code","764c535d":"code","e126d8d9":"code","1ef6d820":"code","5202d05f":"code","1efae0f5":"code","409ddce7":"code","a933cb45":"code","de78c225":"code","3936d400":"code","7b5e42a4":"code","0f47f5a8":"markdown","7e73b76a":"markdown","8d752e12":"markdown","2fcb8d44":"markdown","c1673983":"markdown","abd24716":"markdown","002cfb0f":"markdown","fffd4f51":"markdown","fe71eb79":"markdown","f47e191b":"markdown","93d4e800":"markdown","2e19e61d":"markdown","db994981":"markdown","b18cf832":"markdown","6427296b":"markdown"},"source":{"1212f5be":"# importing all the required library\n\nimport numpy as np\nfrom PIL import Image\nimport tensorflow as tf\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.optimizers import SGD\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.constraints import max_norm\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D ","7e7092f9":"# our dataset is present in keras.datasets \n\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.datasets import cifar100\nimport matplotlib.pyplot as plt\n(train_X,train_Y),(test_X,test_Y)=cifar10.load_data()","c586b64e":"# plotting the data to display the images\n\nnumber_of_images=6\nplt.figure(figsize=(15,9))\nfor index in range(number_of_images):\n    plt.subplot(330+1+index)\n    plt.imshow(train_X[index])\nplt.show()","764c535d":"train_x = train_X.astype('float32')\ntrain_y = train_Y.astype('float32')\n\ntrain_x = train_X\/255.0\ntrain_y = train_Y\/255.0","e126d8d9":"train_Y = utils.to_categorical(train_Y)\ntest_Y = utils.to_categorical(test_Y)\n\nnum_classes = test_Y.shape[1]","1ef6d820":"model=Sequential()\nmodel.add(Conv2D(32,(3,3), input_shape=(32,32,3), padding='same', activation='relu', kernel_constraint=max_norm(3)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(32,(3,3), activation='relu', padding='same', kernel_constraint=max_norm(3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu', kernel_constraint=max_norm(3)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))","5202d05f":"sgd = SGD(learning_rate=0.01, momentum=0.9, nesterov=False, decay=(0.01\/25))\nmodel.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])","1efae0f5":"model.summary()","409ddce7":"# uncomment below comment to visualize the mode architecture\n\ntf.keras.utils.plot_model(model, show_shapes=True)","a933cb45":"model.fit(train_x,train_Y,validation_data=(test_X,test_Y),epochs=30,batch_size=32)","de78c225":"_,acc=model.evaluate(test_X,test_Y)\nprint(acc*100)","3936d400":"model.save('cifar-10.h5')","7b5e42a4":"result = {\n    0:'Airplane',\n    1:'Car',\n    2:'Bird',\n    3:'Cat',\n    4:'Deer',\n    5:'Dog',\n    6:'Frog',\n    7:'Horse',\n    8:'Ship',\n    9:'Truck'\n    }\n\n\n# the input image is required to be in the shape of dataset , i.e (32,32,3)\nim = Image.open('..\/input\/cifar10-pngs-in-folders\/cifar10\/test\/dog\/0002.png')\n\n# if our image is on in format of (32,32,3) we need to change it usign \n# im=im.resize((32,32))\n\nplt.imshow(im)\nplt.show()\nim = np.expand_dims(im,axis=0)\nim = np.array(im)\n\n# now that our image is ready we can predict it using our model\nprediction = model.predict(im) \nclasses = np.argmax(prediction,axis=1)[0]\nprint(\"Class Predicted: \",classes,\"\\nLabel Predicted: \",result[classes])","0f47f5a8":"# Create the sequential model and add the layers","7e73b76a":"# Summary:\n- The objective of the image classification project was to enable the beginners to start working with Keras to solve real-time deep learning problems.\n- In this tensorflow-keras deep learning Project, we talked about the image classification paradigm for digital image analysis. We discuss supervised and unsupervised image classifications.\n- Then it explains the CIFAR-10 dataset and its classes. Finally, we saw how to build a convolution neural network for image classification on the CIFAR-10 dataset.","8d752e12":"# Importing required library","2fcb8d44":"# Make dictionary to map to the output classes and make predictions from the model","c1673983":"# Now we will perform one hot encoding for target class","abd24716":"# Training our model","002cfb0f":"# View the model summary for better understanding of model architecture","fffd4f51":"# Loading the dataset","fe71eb79":"# Configure the optimizer and compile the model","f47e191b":"# About Image Classification Dataset\n- CIFAR-10 is a very popular computer vision dataset. This dataset is well studied in many types of deep learning research for object recognition.\n\n- This dataset consists of 60,000 images divided into 10 target classes, with each category containing 6000 images of shape 32*32. This dataset contains images of low resolution (32*32), which allows researchers to try new algorithms. The 10 different classes of this dataset are:\n\n1. Airplane\t\t\t\t\t\t\t\t\t\t\n2. Car\n3. Bird\t\t\t\t\t\t\t\t\t\t\n4. Cat\t\t\t\t\t\t\t\t\t\t\n5. Deer\t\t\t\t\t\t\t\t\t\t\n6. Dog\t\t\t\t\t\t\t\t\t\t\n7. Frog\t\t\t\t\t\t\t\t\t\t\n8. Horse\t\t\t\t\t\t\t\t\t\t\n9. Ship\t\t\t\t\t\t\t\t\t\t\n10. truck\t\t\t\t\t\t\t\t\t\t\n\n- CIFAR-10 dataset is already available in the datasets module of Keras. We do not need to download it; we can directly import it from keras.datasets.\n- Other wise you can download it from [Dataset Link](https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html)\n\n","93d4e800":"# Plotting data","2e19e61d":"# What is Image Classification\n- The classification problem is to categorize all the pixels of a digital image into one of the defined classes.\n- Image classification is the most critical use case in digital image analysis.\n- Image classification is an application of both supervised classification and unsupervised classification.\n- In supervised classification, we select samples for each target class. We train our neural network on these target class samples and then classify new samples.\n- In unsupervised classification, we group the sample images into clusters of images having similar properties. Then, we classify each cluster into our intended classes.","db994981":"# Convert the pixel value of the dataset to float type and then normalize the dataset","b18cf832":"# Save the model and use it later","6427296b":"# Calculate accuracy on test data"}}