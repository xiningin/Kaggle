{"cell_type":{"abb11d3e":"code","da71c64f":"code","b77d1f79":"code","9ac612a4":"code","4018cd47":"code","673a6ac2":"code","53ca45d1":"code","6d8330b9":"code","3c61a6c5":"code","2a957243":"code","00a0785a":"code","5e55390e":"code","88abe556":"code","c4c8c6ba":"code","0fa1be24":"code","f539590d":"code","3524099b":"code","3e77a802":"code","13cb4c9b":"code","686c71b5":"markdown","ced52fe4":"markdown","1a37d875":"markdown","cdf5c9ef":"markdown","47d8eda7":"markdown","fe79c7aa":"markdown","12e83579":"markdown"},"source":{"abb11d3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da71c64f":"# Import packages\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')","b77d1f79":"# reading the dataset\ndf = pd.read_csv('..\/input\/nba2k20-player-dataset\/nba2k20-full.csv')\ndf.head()","9ac612a4":"df.shape","4018cd47":"# Understanding the feature names in the dataset\ndf.columns","673a6ac2":"df.describe()","53ca45d1":"df.info()","6d8330b9":"round((df.isnull().sum()\/len(df.index))*100,2)","3c61a6c5":"df = df[~df.team.isnull()] \ndf = df[~df.college.isnull()]\ndf.shape","2a957243":"# drop column full_name and b_day since they have unique value for all the rows.\ndf = df.drop(['full_name','b_day'], axis=1)\ndf.shape","00a0785a":"# Let's remove the # from jersey column.\ndf['jersey'] = df['jersey'].apply(lambda x : x[1:]).astype('int64')\n\n# Height column has values in meter and foot. Let's keep the meter value.\ndf['height'] = df['height'].apply(lambda x: x.split('\/ ')[1]).astype('float64')\n\n# Weight column - Let's keep the kg values.\ndf['weight'] = df['weight'].apply(lambda x: x.split('\/')[1][:-3]).astype('float64')\n\n# removing $ sign from salary column.\ndf['salary'] = df['salary'].apply(lambda x: x[1:]).astype('float64')\n\n# let's change 'undrafted' value in draft_peak to 0.\ndf['draft_peak'] = df['draft_peak'].apply(lambda x:0 if x == 'Undrafted' else x).astype('int64')\n","5e55390e":"# Checking for duplicate data.\ndf[df.duplicated()]","88abe556":"# Let's split data into numeric and categorical data\ndf_numeric = df.select_dtypes(include=['float64','int64'])\ndf_categorical = df.select_dtypes(include=['object'])","c4c8c6ba":"fig = plt.figure(figsize=(50,40))\nfig.set_size_inches(15,50)\nc = 1\nfor i in df_numeric.columns:\n    plt.subplot(20, 2, c)\n    plt.title(i)\n    plt.xlabel(i)\n    sns.boxplot(df_numeric[i])\n    c= c+1\n    \n    plt.tight_layout()\nplt.show()","0fa1be24":"# Treating Outlier\n\nfor i in df_numeric:\n\n    Q1 = df[i].quantile(0.1)\n    Q3 = df[i].quantile(0.99)\n    IQR = Q3 - Q1\n    df[i] = df[i].map(lambda x:Q1 if x < (Q1 - (1.5*IQR)) else x )\n    df[i] = df[i].map(lambda x:Q3 if x > (Q3 + (1.5*IQR)) else x )\n","f539590d":"df_numeric.hist(figsize=(15, 10), bins=50, xlabelsize=8, ylabelsize=8)\nplt.show()","3524099b":"\nsns.pairplot(df_numeric)\nplt.show()","3e77a802":"# heatmap\nmask = np.array(df_numeric.corr())\nmask[np.tril_indices_from(mask)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(10,10)\nsns.heatmap(df_numeric.corr(), mask=mask,vmax=.8, square=True,annot=True)","13cb4c9b":"# let's compare categorical variable with salary\ndf_cat_plt = pd.concat([df_categorical, df[['salary']]], axis=1)\nfig = plt.figure(figsize=(20,20))\nc=1\nfor i in df_categorical.columns:\n    plt.subplot(3,2,c)\n    plt.title(i)\n    plt.xlabel(i)\n    sns.boxplot(df_cat_plt[i],df_cat_plt['salary'])\n    plt.xticks(rotation=90)\n    c=c+1\n    plt.tight_layout()\n    \nplt.show()\n","686c71b5":"- The team `Golden state warriors` has comparatively higher salary\n- Position `F-G` has comparatively lower salary\n- Players from `USA` and `cameroon` have higher salary\n- Player with draft_round 1 have higher salary\n- There are some colleges that provide higher salary","ced52fe4":"There are 429 rows and 14 columns","1a37d875":"- Salary is positively correlated with rating and negatively related with jersey\n- Height and weight variable is highly correlated","cdf5c9ef":"## Data visulaization","47d8eda7":"## Data Understanding and Exploration","fe79c7aa":"#### Missing value treatment","12e83579":"since the missing data is less than 20% we can remove rows with missing value."}}