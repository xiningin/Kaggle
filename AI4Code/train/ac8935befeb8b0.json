{"cell_type":{"a431313b":"code","abde405c":"code","87fcca71":"code","cf712559":"code","30897416":"code","2f79c076":"code","baaa4b39":"code","b1ed33c1":"code","faef57b0":"code","3d9760be":"code","0cd247f2":"code","8effbddf":"code","b15e2022":"code","093c44bc":"code","2148f485":"code","c4ec2ad9":"code","f0ae260f":"code","27e02b3c":"code","df62c2db":"code","920c61e2":"code","42bd0e27":"code","4eef312c":"code","67d7efff":"code","719046af":"code","bee2005c":"code","3abb20c8":"code","0fef24a7":"code","2f1df416":"code","29a46754":"code","b3a554a1":"code","3041b84f":"code","9a07100e":"code","acd77496":"code","bf56be93":"code","03c2270f":"code","97cb820b":"code","6b4e518c":"code","d28be754":"code","1bf66cb2":"markdown","8a6f6804":"markdown","cd999b20":"markdown","f92f27f7":"markdown","930c530e":"markdown","243275d9":"markdown","94325ec8":"markdown","08b82caa":"markdown","150b337d":"markdown"},"source":{"a431313b":"!pip install kmapper","abde405c":"import pandas as pd\nimport cv2\nfrom glob import glob\ntraining_data_path = \"..\/input\/siic-isic-224x224-images\/train\/\"","87fcca71":"\n\nimages_path = glob(\"..\/input\/siic-isic-224x224-images\/train\/*\")\ndf = pd.read_csv(\"..\/input\/siim-isic-melanoma-classification\/train.csv\")","cf712559":"df.head()","30897416":"benign=df[df['benign_malignant']=='benign'].sample(600)\nbenign.shape","2f79c076":"malignant=df[df['benign_malignant']=='malignant']\nmalignant.shape","baaa4b39":"Testdf=pd.concat([benign,malignant])\nTestdf.shape\n# df.merge(images_df, left_on='image_name')","b1ed33c1":"image_list=Testdf['image_name']\nimage_list[0:5]","faef57b0":"# labels_2 = []\nimages_df=pd.DataFrame()\n\nfor imageName in image_list:\n#column_name=imagePath.split('\/')[-1].split('.')[0]\n  imagePath=training_data_path+imageName+'.png'\n#   print(imagePath)\n  image=cv2.imread(imagePath)\n  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n  image=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n  # image=cv2.resize(image, (300, 300),interpolation=cv2.INTER_AREA)\n#   print(imageName)\n  images_df[imageName]=image.flatten()\n","3d9760be":"images_df=images_df.transpose()\nimages_df.head()\n","0cd247f2":"image_name=images_df.index\nimages_df['image_name']=image_name","8effbddf":"images_df['image_name'].head(10)","b15e2022":"Testdf.head(10)","093c44bc":"Testdf=Testdf.merge(images_df,right_on='image_name',left_on='image_name')","2148f485":"Testdf.head(10)","c4ec2ad9":"import kmapper as km\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sklearn\nfrom sklearn import datasets","f0ae260f":"X=images_df.drop(['image_name'],axis=1)","27e02b3c":"# Initialize to use t-SNE with 2 components (reduces data to 2 dimensions). Also note high overlap_percentage.\nmapper_full = km.KeplerMapper(verbose=2)\n\n# Fit and transform data\nprojected_data_full = mapper_full.fit_transform(X,\n                                      projection=sklearn.manifold.TSNE())","df62c2db":"# Create the graph (we cluster on the projected data and suffer projection loss)\ngraph_full = mapper_full.map(projected_data_full,\n#                    clusterer=sklearn.cluster.DBSCAN(eps=0.3, min_samples=15),\n                   clusterer=sklearn.cluster.KMeans(n_clusters=2,\n                                                    random_state=1618033),          \n                   cover=km.Cover(15, 0.7))","920c61e2":"Y=Testdf['benign_malignant']\n##Tooltips with the target y-labels for every cluster member\nmapper_full.visualize(graph_full,\n                 title=\"Skin Cancer Mapper with  Y Labels \",\n                 path_html=\"\/kaggle\/working\/skin_cancer_tsne_ylabels_only.html\",\n                 custom_tooltips=Y)\n\n# ##Tooltips with the target y-labels for every cluster member\n# mapper_full.visualize(graph_full,\n#                  title=\"Skin Cancer Mapper with  Image NAmes \",\n#                  path_html=\"\/kaggle\/working\/skin_cancer_image_name_tsne_image_names.html\",\n#                  custom_tooltips=Y)","42bd0e27":"# Matplotlib examples\nkm.draw_matplotlib(graph_full)\nplt.show()","4eef312c":"Y=Testdf['image_name']","67d7efff":"##Tooltips with the target y-labels for every cluster member\nmapper_full.visualize(graph_full,\n                 title=\"Skin Cancer Mapper with  Image NAmes \",\n                 path_html=\"\/kaggle\/working\/skin_cancer_image_name_tsne_image_names.html\",\n                 custom_tooltips=Y)","719046af":"Testdf[Testdf['image_name'].isin (['ISIC_6187353', 'ISIC_3593913', 'ISIC_2837876', 'ISIC_4301050', 'ISIC_4378851' ,\n                                   'ISIC_0645454', 'ISIC_0961235', 'ISIC_1116483', 'ISIC_1975042', 'ISIC_3244067', \n                                   'ISIC_3253484', 'ISIC_3408231', 'ISIC_3993924', 'ISIC_4730066' ,'ISIC_7075474', \n                                   'ISIC_7181296', 'ISIC_8417873', 'ISIC_8872158' ,'ISIC_8882374', 'ISIC_9509757' ,\n                                   'ISIC_9910791'])]","bee2005c":"# img=images_df[images_df['image_name']=='ISIC_6187353']\n# plt.imshow(np.array(img.iloc[:,0:50176]).reshape(224,224),cmap='gray')","3abb20c8":"# # plt.imshow(training_data_path+'ISIC_3593913.jpg')\n# img=images_df[images_df['image_name']=='ISIC_3593913']\n# plt.imshow(np.array(img.iloc[:,0:50176]).reshape(224,224),cmap='gray')","0fef24a7":"# # plt.imshow(training_data_path+'ISIC_6187353.png')\n# img=images_df[images_df['image_name']=='ISIC_6187353']\n# plt.imshow(np.array(img.iloc[:,0:50176]).reshape(224,224),cmap='gray')","2f1df416":"# #ISIC_7075474\n# img=images_df[images_df['image_name']=='ISIC_7075474']\n# plt.imshow(np.array(img.iloc[:,0:50176]).reshape(224,224),cmap='gray')","29a46754":"X=images_df.drop(['image_name'],axis=1)","b3a554a1":"from sklearn.manifold import MDS\n\nmapper = km.KeplerMapper(verbose=0)\nlens = mapper.fit_transform(X, projection=MDS())\n","3041b84f":"\n# Create the simplicial complex\ngraph = mapper.map(lens,\n                   X,\n                   cover=km.Cover(n_cubes=15, perc_overlap=0.7),\n                   clusterer=sklearn.cluster.KMeans(n_clusters=2,\n                                                    random_state=1618033))\n\ny=Testdf['benign_malignant']\n# Visualization\nmapper.visualize(graph,\n                 path_html=\"Skin-cancer_MDS.html\",\n                 title=\"Melanoma skin Cancer Dataset\",\n                 custom_tooltips=y)\n\n\n# import matplotlib.pyplot as plt\nkm.draw_matplotlib(graph)\nplt.show()","9a07100e":"X=images_df.drop(['image_name'],axis=1)\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.manifold import MDS\nX1_dist = pairwise_distances(X, metric= 'l2')\n\nmapper = km.KeplerMapper(verbose=0)\nlens2 = mapper.fit_transform(X1_dist, projection=MDS(dissimilarity='precomputed'))\n","acd77496":"# Create the simplicial complex\ngraph = mapper.map(lens2,\n                   X,\n                   cover=km.Cover(n_cubes=15, perc_overlap=0.7),\n                   clusterer=sklearn.cluster.KMeans(n_clusters=2,\n                                                    random_state=1618033))\n\ny=Testdf['benign_malignant']\n# Visualization\nmapper.visualize(graph,\n                 path_html=\"Skin-cancer_MDS_l2_20.html\",\n                 title=\"Melanoma skin Cancer Dataset\",\n                 custom_tooltips=y)\n\n\n# import matplotlib.pyplot as plt\nkm.draw_matplotlib(graph)\nplt.show()","bf56be93":"# Create the simplicial complex\ngraph = mapper.map(lens2,\n                   X,\n                   cover=km.Cover(n_cubes=30, perc_overlap=0.7),\n                   clusterer=sklearn.cluster.KMeans(n_clusters=2,\n                                                    random_state=1618033))\n\ny=Testdf['benign_malignant']\n# Visualization\nmapper.visualize(graph,\n                 path_html=\"Skin-cancer_MDS_l2_30.html\",\n                 title=\"Melanoma skin Cancer Dataset\",\n                 custom_tooltips=y)\n\n\n# import matplotlib.pyplot as plt\nkm.draw_matplotlib(graph)\nplt.show()","03c2270f":"X=images_df.drop(['image_name'],axis=1)\n\n\nfrom sklearn.decomposition import PCA\nmapper = km.KeplerMapper(verbose=0)\nlens = mapper.fit_transform(X, projection=PCA(0.8))\n","97cb820b":"# Create the simplicial complex\ngraph = mapper.map(lens,\n                   X,\n                   cover=km.Cover(n_cubes=15, perc_overlap=0.7),\n                   clusterer=sklearn.cluster.KMeans(n_clusters=2,\n                                                    random_state=1618033))\n\ny=Testdf['benign_malignant']\n# Visualization\nmapper.visualize(graph,\n                 path_html=\"Skin-cancer_PCA.html\",\n                 title=\"Melanoma skin Cancer Dataset\",\n                 custom_tooltips=y)\n\n\n# import matplotlib.pyplot as plt\nkm.draw_matplotlib(graph)\nplt.show()","6b4e518c":"import sklearn\nfrom sklearn import ensemble\n\n# Create a custom 1-D lens with Isolation Forest\nmodel = ensemble.IsolationForest(random_state=1729)\nmodel.fit(X)\nlens1 = model.decision_function(X).reshape((X.shape[0], 1))\n\n# Create another 1-D lens with L2-norm\nmapper = km.KeplerMapper(verbose=0)\nlens2 = mapper.fit_transform(X, projection=\"l2norm\")\n\n# Combine both lenses to get a 2-D [Isolation Forest, L^2-Norm] lens\nlens = np.c_[lens1, lens2]\n\n# Define the simplicial complex\nscomplex = mapper.map(lens,\n                      X,\n                      nr_cubes=15,\n                      overlap_perc=0.7,\n                      clusterer=sklearn.cluster.KMeans(n_clusters=2,\n                                                       random_state=3471))","d28be754":"y=Testdf['benign_malignant']\n# Visualization\nmapper.visualize(graph,\n                 path_html=\"Skin-cancer_IsolationForest.html\",\n                 title=\"Melanoma skin Cancer Dataset\",\n                 custom_tooltips=y)\n\n\n# import matplotlib.pyplot as plt\nkm.draw_matplotlib(graph)\nplt.show()","1bf66cb2":"#  Using Anamoly Detection ","8a6f6804":"# Using TSNE for dimensionality Reduction","cd999b20":"# Using PCA","f92f27f7":"Looking at  this cluster- It contains only malignant images","930c530e":"# Viewing Images from one cluster","243275d9":"Increasing the resolution of the graph","94325ec8":"# Using MDS(Multi-dimensional Scaling)","08b82caa":"# Using a  Mapper algorithm for visualization of high-dimensional data****","150b337d":"[Info on Keppler](http:\/\/https:\/\/github.com\/scikit-tda\/kepler-mapper) along with tutorials\n\n[Kernel](https:\/\/www.kaggle.com\/noelano\/topological-analysis-of-premier-league-players\/notebook) provides good information and uses on premier league dataset"}}