{"cell_type":{"11f98def":"code","75d620c1":"code","e7ea4281":"code","99a635e0":"code","5a578690":"code","8ef3ae27":"code","7a361045":"code","871fcc1f":"code","4088fba7":"code","29f8e85b":"code","1471aec7":"code","5fb62bea":"code","5c9b3075":"code","a3ea6cde":"code","ee6dc3f6":"code","0f0ba360":"code","d4534bbf":"code","b15dbb0e":"code","4e808929":"code","946f21db":"code","40eb3b48":"code","daa7d322":"code","5074f720":"code","d3c6dd22":"code","34e29c6c":"code","2cbc3dec":"code","754f3e86":"code","a0f3fda6":"markdown","eea0dc1f":"markdown","a4b8e792":"markdown","4618d0b1":"markdown","52a59973":"markdown"},"source":{"11f98def":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","75d620c1":"df = pd.read_csv('..\/input\/PJME_hourly.csv', index_col=[0], parse_dates=[0])","e7ea4281":"df.plot(figsize=(15,8));","99a635e0":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.index,\n                    y = df.PJME_MW)\n\ndata = [trace1]\n   \nfig = dict(data = data)\niplot(fig)","5a578690":"splitdate = '2014-01-01'\ndf_train_set = df[df.index < splitdate]\ndf_test_set = df[df.index > splitdate]","8ef3ae27":"df_test_set.head(2)","7a361045":"# Creating trace1\ntrace1 = go.Scatter( x = df_train_set.index, y = df_train_set.PJME_MW)\n\ndata = [trace1]\n   \nfig = dict(data = data)\niplot(fig)","871fcc1f":"trace1 = go.Scatter( x = df_test_set.index, y = df_test_set.PJME_MW)\n\ndata = [trace1]\n   \nfig = dict(data = data)\niplot(fig)","4088fba7":"def AddDateProperties (df) :\n    df['date'] = df.index\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    return df","29f8e85b":"df_test_set = AddDateProperties(df_test_set)\ndf_train_set = AddDateProperties(df_train_set)\n#Remove Date column for creating Regressor Model\ndf_test_set = df_test_set.drop(['date'], axis=1)\ndf_train_set = df_train_set.drop(['date'], axis=1)\ny_test = df_test_set['PJME_MW']\ny_train = df_train_set['PJME_MW']\nX_test = df_test_set.loc[:,df_test_set.columns !='PJME_MW']\nX_train = df_train_set.loc[:,df_train_set.columns !='PJME_MW']","1471aec7":"model = xgb.XGBRegressor( learning_rate= 0.01 , n_estimators=1000 , max_depth=3 , subsample= 0.8 , colsample_bylevel= 1)","5fb62bea":"eval_set = [(X_train, y_train), (X_test, y_test)]\neval_metric = [\"auc\",\"error\"]","5c9b3075":"model.fit(X_train, y_train,\n        eval_set=[(X_train, y_train), (X_test, y_test)],\n        early_stopping_rounds=50,\n       verbose=False) ","a3ea6cde":"plot_importance(model) ;","ee6dc3f6":"df_test_set['MW_Prediction'] = model.predict(X_test)","0f0ba360":"df_all = pd.concat([df_test_set,df_train_set] , sort=False)","d4534bbf":"df_all[['PJME_MW' , 'MW_Prediction']].plot(figsize =(15,5));","b15dbb0e":"start_date ='2014-01-01'\nend_date = '2014-01-31'\nfig,ax = plt.subplots(1)\n\ndf_all[['PJME_MW' , 'MW_Prediction']].plot(ax=ax , figsize = (15,5 ) , style = ['.']);\nax.set_xbound(lower=start_date , upper= end_date)","4e808929":"df_test_set.head()","946f21db":"df_test_set['Error'] = df_test_set['PJME_MW'] - df_test_set['MW_Prediction']","40eb3b48":"df_test_set['AbsError'] = df_test_set.Error.apply(np.abs)","daa7d322":"day_groupby = df_test_set.groupby(['year','month','dayofmonth'])\nerror_by_day = day_groupby['PJME_MW','MW_Prediction','Error','AbsError'].mean()","5074f720":"error_by_day.sort_values(ascending= True , by = 'AbsError').head(15)","d3c6dd22":"error_by_day.sort_values(ascending= False , by = 'AbsError').head(15)","34e29c6c":"start_date ='2015-02-20 00:00:00'\nend_date = '2015-02-20 23:00:00'\n\nfig,ax = plt.subplots(1)\n\ndf_all[['PJME_MW' , 'MW_Prediction']].plot(ax=ax , figsize = (15,5 ) , style = ['.']);\nax.set_xbound(lower=start_date , upper= end_date)","2cbc3dec":"error_by_day.sort_values(ascending= True , by = 'Error').head(15)","754f3e86":"# plot single tree\nplot_tree(model,num_trees=1 ,rankdir= 'LR')\nplt.show()\nplt.rcParams['figure.figsize'] = (100, 70)","a0f3fda6":"# Predictions where prediction was over the consumptions ","eea0dc1f":"# Best Predicted Day","a4b8e792":"# First 1 month trend","4618d0b1":"# Worst Predicted day","52a59973":"**Split the dataset in training and testing set **"}}