{"cell_type":{"ccfb3821":"code","433ca233":"code","ad0bcbaa":"code","082ad264":"code","5d0db5f6":"code","e68dfd45":"code","8ff58fb4":"code","4e4c06e1":"code","94d69f43":"code","a87b3933":"code","b9aa5e67":"code","4a6f072b":"code","8093eadd":"code","b88bf3ef":"code","089c8c36":"code","9835cd59":"code","ddc01343":"code","bfe13d45":"code","691c992b":"code","eba4fa81":"code","7e052f9b":"code","44cafe98":"code","57127726":"code","c5aa5a27":"code","75cecf3f":"code","09e171a0":"code","ce995db1":"markdown","13d26350":"markdown","89e74b39":"markdown","ee487535":"markdown","41840095":"markdown","cf9aefbf":"markdown","1b437b0f":"markdown","f1324974":"markdown","e79eff18":"markdown","a0341ba4":"markdown","9011007b":"markdown"},"source":{"ccfb3821":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","433ca233":"from fbprophet import Prophet \nfrom fbprophet.plot import plot_plotly\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder","ad0bcbaa":"data = pd.read_csv(\"..\/input\/avocado-prices\/avocado.csv\")","082ad264":"data.head()","5d0db5f6":"data.info()","e68dfd45":"le = LabelEncoder()\ndata.iloc[:,11] = le.fit_transform(data.iloc[:,11])\ndata.head()","8ff58fb4":"X= data[['Date','Total Volume','4046','4225','Total Bags','Small Bags','XLarge Bags','type']]\ny= data['AveragePrice']","4e4c06e1":"train = pd.DataFrame()\ntrain['ds'] = pd.to_datetime(X[\"Date\"])\n\ntrain['y'] = data['AveragePrice']","94d69f43":"prophet_basic = Prophet()\nprophet_basic.fit(train)","a87b3933":"future = prophet_basic.make_future_dataframe(periods=300)\nfuture.head()","b9aa5e67":"forcast = prophet_basic.predict(future)","4a6f072b":"fig1 = prophet_basic.plot(forcast)","8093eadd":"fig2 =  prophet_basic.plot_components(forcast)","b88bf3ef":"from fbprophet.plot import add_changepoints_to_plot\nfig = prophet_basic.plot(forcast)\na = add_changepoints_to_plot(fig.gca(),prophet_basic,forcast)","089c8c36":"prophet_basic.changepoints","9835cd59":"prophet_pro = Prophet(changepoint_range=0.9)\nprophet_pro.fit(train)\nnew_forcast = prophet_pro.predict(future)\nfig4 = prophet_pro.plot(new_forcast)\nb = add_changepoints_to_plot(fig4.gca(),prophet_pro,new_forcast)","ddc01343":"pro_change = Prophet(changepoint_prior_scale = 0.08,n_changepoints = 20,yearly_seasonality=True)\npro_change.fit(train)\nmore_flexible_forcast = pro_change.predict(future)\nfig5 = pro_change.plot(more_flexible_forcast)\nb = add_changepoints_to_plot(fig5.gca(),pro_change,more_flexible_forcast)","bfe13d45":"pro_change = Prophet(changepoint_prior_scale = 0.01,n_changepoints = 20,yearly_seasonality=True)\npro_change.fit(train)\nless_flexible_forcast = pro_change.predict(future)\nfig5 = pro_change.plot(less_flexible_forcast)\nb = add_changepoints_to_plot(fig5.gca(),pro_change,less_flexible_forcast)","691c992b":"avocado_season = pd.DataFrame({\n  'holiday': 'avocado season',\n  'ds': pd.to_datetime(['2014-07-31', '2014-09-16', \n                        '2015-07-31', '2015-09-16',\n                        '2016-07-31', '2016-09-16',\n                        '2017-07-31', '2017-09-16',\n                       '2018-07-31', '2018-09-16',\n                        '2019-07-31', '2019-09-16']),\n  'lower_window': -1,\n  'upper_window': 0,\n})\navocado_season.head()","eba4fa81":"pro_holiday = Prophet(holidays=avocado_season)\npro_holiday.fit(train)\nfuture_data = pro_holiday.make_future_dataframe(periods=12,freq = 'm')\n##############\nforcast_data = pro_holiday.predict(future_data)\npro_holiday.plot(forcast_data)","7e052f9b":"X.head()","44cafe98":"train['Total Volume'] = X['Total Volume']\ntrain['4046'] = X['4046']\ntrain['4225'] = X['4225']\ntrain['Total Bags'] = X['Total Bags']\ntrain['Small Bags'] = X['Small Bags']\ntrain['type'] = X['type']","57127726":"train_X= train[:18000]\ntest_X= train[18000:]","c5aa5a27":"pro_regressor = Prophet()\npro_regressor.add_regressor('Total Volume')\npro_regressor.add_regressor('4046')\npro_regressor.add_regressor('4225')\npro_regressor.add_regressor('Total Bags')\npro_regressor.add_regressor('Small Bags')\npro_regressor.add_regressor('type')","75cecf3f":"pro_regressor.fit(train_X)\n","09e171a0":"forcast_data = pro_regressor.predict(test_X)\npro_regressor.plot(forcast_data)","ce995db1":"Predicting the values for the future\nFor predicting the values using Prophet, we need to create a dataframe with ds(datetime stamp) containing the dates for which we want to make the predictions.\nWe use make_future_dataframe() to which we specify the number of days to extend into the future. By default it includes dates from the history","13d26350":"input to Prophet is a data frame with minimum two columns : ds and y","89e74b39":"**Adding Multiple Regressors**","ee487535":"**Adjusting Trend**\n\n* Prophet allow you to adjust the trend in case there is an overfit or underfit. changepoint_prior_scale helps adjust the strength of the trend.\n* Default value for changepoint_prior_scale is 0.05. Decrease the value to make the trend less flexible. Increase the value of changepoint_prior_scale to make the trend more flexible.\n* Increasing the changepoint_prior_scale to 0.08 to make the trend flexible","41840095":"**We can change the inferred changepoint range by setting the changepoint_range**","cf9aefbf":"* lower window and upper window extend holiday to days around the date. If we want to include a day prior to the national avocado day and Guacamole day, we set lower_window: -1 upper_window: 0\n* If we wanted to use the day after the holiday then set lower_window: 0 upper_window: 1","1b437b0f":"**Adding Holidays**\n* Holidays and events can cause changes to a time series. In our example the National Avocado day on July 31 and Guacamole day on September 16 can impact prices of the Avocado.\n* We can create a custom holiday list for Prophet by creating a dataframe with two columns ds and holiday. A row for each occurrence of the holiday","f1324974":"**We can view the dates where the chagepoints occurred**","e79eff18":"**plotting the predicted data**","a0341ba4":"**We can plot the trend and seasonality, components of the forecast**","9011007b":"By default, Prophet adds 25 changepoints to the initial 80% of the data-set.\nLet\u2019s plot the vertical lines where the potential changepoints occurred"}}