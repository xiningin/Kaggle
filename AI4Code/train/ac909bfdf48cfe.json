{"cell_type":{"5786956a":"code","c6926c0e":"code","37c61b47":"code","6f0b2ff4":"code","6dd31854":"code","fb345546":"code","c3735f70":"code","d3b7dcba":"code","94f238dc":"code","28fcefb5":"code","39871621":"code","f9f9b77f":"code","2a084a3d":"markdown","8804c39a":"markdown","9f7466b4":"markdown","769aefcb":"markdown","c6b3ecd4":"markdown","2c9f55ce":"markdown","e0a2d0de":"markdown","a9e2502e":"markdown","fe9a7eb0":"markdown","676cc1d1":"markdown","d6a54dd0":"markdown","40fbfbc6":"markdown","5aa88eea":"markdown"},"source":{"5786956a":"# Imports\nimport numpy as np\nimport pandas as pd\nimport random\n\nfrom glob import glob\nimport pydicom\n\nfrom PIL import Image\n\nfrom matplotlib import pyplot as plt\nimport matplotlib\n\nimport os\nprint(os.listdir(\"..\/input\"))","c6926c0e":"# Load submission file \nsubmission = pd.read_csv(\"..\/input\/pneumothorax-submission\/submission09.csv\")\nsubmission = submission.set_index('ImageId')\n\nsubmission.head()","37c61b47":"# Load test data\ndatafilepath = '..\/input\/siim-train-test\/siim\/'\nfns = sorted(glob(datafilepath + 'dicom-images-test\/*\/*\/*.dcm'))","6f0b2ff4":"# mask functions:\ndef mask2rle(img, width, height):\n    rle = []\n    lastColor = 0;\n    currentPixel = 0;\n    runStart = -1;\n    runLength = 0;\n\n    for x in range(width):\n        for y in range(height):\n            currentColor = img[x][y]\n            if currentColor != lastColor:\n                if currentColor == 255:\n                    runStart = currentPixel;\n                    runLength = 1;\n                else:\n                    rle.append(runStart);\n                    rle.append(runLength);\n                    runStart = -1;\n                    runLength = 0;\n                    currentPixel = 0;\n            elif runStart > -1:\n                runLength += 1\n            lastColor = currentColor;\n            currentPixel+=1;\n\n    if lastColor == 255:\n        rle.append(runStart)\n        rle.append(runLength)\n\n    return \" \".join(str(rle))\n\ndef rle2mask(rle, width, height):\n    mask= np.zeros(width* height)\n    array = np.asarray([int(x) for x in rle.split()])\n    starts = array[0::2]\n    lengths = array[1::2]\n\n    current_position = 0\n    for index, start in enumerate(starts):\n        current_position += start\n        mask[current_position:current_position+lengths[index]] = 255\n        current_position += lengths[index]\n\n    return mask.reshape(width, height)","6dd31854":"# Function to plot single image with mask\ndef get_image_and_pred(idx, fns, submission):\n    '''\n    Function to plot single image with mask\n    INPUT:\n        idx - number of the image to plot\n        fns - test data files\n        submission - submission dataframe\n        \n    OUTPUT:\n        has_pneumo - (True or False) whether the image has pneumothorax (according to the prediction)\n        image - PIL image for the image from the test set\n        rle_mask - rle mask of the mask predicted for thr image\n        mask - PIL image for the predicted mask\n    '''\n    fname = fns[idx]\n    \n    dataset = pydicom.read_file(fname)\n    np_image = np.expand_dims(dataset.pixel_array, axis=2)\n    \n    image = Image.fromarray(np_image.reshape(1024, 1024) , 'L')\n    \n    if '-1' in submission.loc[fname.split('\/')[-1][:-4],'EncodedPixels']:\n        np_mask = np.zeros((1024, 1024, 1), dtype=np.bool)\n        rle_mask = None\n        \n        has_pneumo = False    \n    else:\n        rle_mask = rle2mask(submission.loc[fname.split('\/')[-1][:-4],'EncodedPixels'], 1024, 1024) \n        \n        has_pneumo = True\n    \n    np_mask = np.transpose(rle_mask)\n    mask = Image.fromarray(np_mask)\n    \n    return has_pneumo, image, rle_mask, mask","fb345546":"# get image and prediction\npneumo, image, rle_mask, mask = get_image_and_pred(0, fns, submission)","c3735f70":"# Function to plot the prediction\ndef plot_xray(image, rle_mask):\n    '''\n    Function to plot a single prediction:\n    INPUT:\n        image - PIL image from the test dataset\n        rle_mask -  mask predicted for the image\n    '''\n    fig, axs = plt.subplots(1, 2, figsize=(20,10))\n\n    #plot the original data\n    axs[0].imshow(image, cmap='bone') \n    axs[0].axis('off')\n    axs[0].set_title('Without mask')\n\n    #plot image and add the mask\n    axs[1].imshow(image, cmap='bone')\n    axs[1].axis('off')  \n    axs[1].imshow(np.transpose(rle_mask), alpha=0.3, cmap=\"Reds\")    \n    axs[1].set_title('With mask')\n\n    # set suptitle\n    plt.suptitle('Images with pneumothorax')\n    plt.show()","d3b7dcba":"# try plotting the prediction\nplot_xray(image, rle_mask)","94f238dc":"# plot some more predictions\npneumo, image, rle_mask, mask = get_image_and_pred(7, fns, submission)\nplot_xray(image, rle_mask)","28fcefb5":"images_pneumo = submission[submission['EncodedPixels'] != '-1']","39871621":"# Plot several images with predicted pneumothorax\ndef plot_xray_grid(fns, submission):\n    '''\n    Function to plot several predictions\n    INPUT:\n        fns - files from the test dataset\n        submission - submission file\n    '''\n    fig, axs = plt.subplots(2, 5, figsize=(20,8))\n    idx = 0\n    n = 0\n    \n    while n < 5:\n        \n        try:\n            \n            # get image and prediction\n            pneumo, image, rle_mask, mask = get_image_and_pred(idx, fns, submission)\n\n            if pneumo:\n\n                #plot the original data\n                axs[0, n].imshow(image, cmap='bone') \n                axs[0, n].axis('off')\n                axs[0, n].set_title('Without mask')\n\n                #plot image and add the mask\n                axs[1, n].imshow(image, cmap='bone')\n                axs[1, n].axis('off')  \n                axs[1, n].imshow(np.transpose(rle_mask), alpha=0.3, cmap=\"Reds\")    \n                axs[1, n].set_title('With mask')\n\n                n = n + 1\n            \n        except:\n            pass\n            \n        idx = idx + 1\n        \n    # set suptitle\n    plt.suptitle('Images with pneumothorax and masks', fontsize = 16)\n    plt.show()","f9f9b77f":"plot_xray_grid(fns, images_pneumo)","2a084a3d":"Load the csv with submission:","8804c39a":"I am trying to build a model for the Pneumothorax Segmentation competition and to be honest I am not doing well. That is why I am trying to look at my submission files to get some insights of how I could improve the model.\n\nYou can also use the code below to analyze your submission or just to have fun.","9f7466b4":"Now I would like to plot a grid of images with predicted masks:","769aefcb":"Try to plot single predictions:","c6b3ecd4":"# Submission Sanity Check","2c9f55ce":"## Load data","e0a2d0de":"This doesn't look so bad:\n* Pneumothorax is a small area as it usually is.\n* The model found pneumothorax near the edge of the lung, where I would look for it.","a9e2502e":"## Plot image grid","fe9a7eb0":"Hmmm, It looks that model found something that looked like pneumothorax!","676cc1d1":"Well, the model may have some point :)\nI have to really thank [@agentili](https:\/\/www.kaggle.com\/agentili), who pointed out the errors in my code. The model wasn't so bad after all. My other code was.","d6a54dd0":"Following code helps to plot a single image and predicted mask:","40fbfbc6":"## Plot single images","5aa88eea":"Load images from the test dataset:"}}