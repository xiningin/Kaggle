{"cell_type":{"7bdd3823":"code","f6b75be0":"code","d7d8cfcb":"code","ef106bbf":"code","f62d0399":"code","abcee65b":"code","9f71e03f":"code","9df8bebb":"code","10e0357a":"code","22bc2aa7":"code","b2630784":"code","dadbd99b":"code","de572faf":"code","cc0ca062":"code","9c007a93":"code","f0f591fe":"code","67a3c57e":"code","a75a0363":"code","03c9e8e0":"code","95ac2ae4":"code","be45726c":"code","299b9d7f":"code","4a279490":"code","9ebc2e5b":"code","6371b175":"code","c8e3839b":"code","274db394":"code","f3c19f62":"code","6d4438a6":"code","5c56d7ed":"code","57ed19c6":"code","a1260a23":"code","dbc8644d":"code","df2a7d87":"code","191f480e":"code","c067cc8f":"code","9ed9ca75":"code","f4b23315":"code","827e6149":"code","b31ddf33":"code","9940d581":"code","cac397c9":"code","39f99086":"code","a1d51a52":"code","4b6e186f":"code","12567801":"code","a819140a":"code","1a16c73d":"code","acec2ade":"code","33eb30e0":"code","1ad5b34a":"code","409adb2d":"code","eba7d2bd":"code","1d252743":"markdown","3a95239a":"markdown","11dd528c":"markdown","755a73ba":"markdown","fcde8d16":"markdown","7f24df04":"markdown","14fca9bb":"markdown","841df273":"markdown","8ff36e96":"markdown"},"source":{"7bdd3823":"import numpy as np\nimport pandas as pd \nimport matplotlib\nimport matplotlib.pyplot as plt\n\nimport matplotlib.style as style \nstyle.use('ggplot')\n\nimport seaborn as sns\nsns.set_context(\"paper\")\n\nimport itertools\n\nfrom sklearn.cluster import KMeans","f6b75be0":"original_data = pd.read_csv('\/kaggle\/input\/yellow_tripdata_2016-06.csv', parse_dates=['tpep_pickup_datetime', 'tpep_dropoff_datetime'])","d7d8cfcb":"original_data.head(5)","ef106bbf":"original_data.columns","f62d0399":"original_data.dtypes","abcee65b":"original_data = original_data[(original_data['tpep_pickup_datetime'] > '2016-06-05') & (original_data['tpep_pickup_datetime'] > '2016-06-13')]","9f71e03f":"data = original_data[['passenger_count', 'trip_distance', 'pickup_longitude','pickup_latitude','dropoff_longitude', 'dropoff_latitude', \n                      'tpep_pickup_datetime', 'tpep_dropoff_datetime', ]]","9df8bebb":"#del original_data\ndata.head(5)","10e0357a":"# Compute trip duration\ndata['trip_duration_mins'] = (data.tpep_dropoff_datetime - data.tpep_pickup_datetime).dt.seconds \/60","22bc2aa7":"print('There are {} features and {} examples.'.format(data.shape[1], data.shape[0]))","b2630784":"# find pick up and dropoff longitude and latitude range\nprint('Pickup longitude range: [{},{}]'.format(np.min(data['pickup_longitude']), np.max(data['pickup_longitude'])))\nprint('Pickup latitude range: [{},{}]'.format(np.min(data['pickup_latitude']), np.max(data['pickup_latitude'])))\nprint('Dropoff longitude range: [{},{}]'.format(np.min(data['dropoff_longitude']), np.max(data['dropoff_longitude'])))\nprint('Dropoff latitude range: [{},{}]'.format(np.min(data['dropoff_latitude']), np.max(data['dropoff_latitude'])))","dadbd99b":"sns.distplot(data[(data['pickup_longitude']>-74.05) & (data['pickup_longitude']<-73.75)]['pickup_longitude'])","de572faf":"sns.distplot(data[(data['dropoff_longitude']>-74.05) & (data['dropoff_longitude']<-73.75)]['dropoff_longitude'])","cc0ca062":"sns.distplot(data[(data['pickup_latitude']> 40.6) & (data['pickup_latitude']<40.9)]['pickup_latitude'])","9c007a93":"sns.distplot(data[(data['dropoff_latitude']> 40.6) & (data['dropoff_latitude']<40.9)]['dropoff_latitude'])","f0f591fe":"sns.distplot(data[data['trip_distance'] < 25]['trip_distance'])","67a3c57e":"sns.distplot(data[data['trip_duration_mins']<100]['trip_duration_mins'])","a75a0363":"data.dtypes","03c9e8e0":"data = data[\n    (data['pickup_longitude']>-74.05) & (data['pickup_longitude']<-73.75) &\n    (data['pickup_latitude']> 40.6) & (data['pickup_latitude']<40.9) &\n    (data['dropoff_longitude']>-74.05) & (data['dropoff_longitude']<-73.75) &\n    (data['dropoff_latitude']> 40.6) & (data['dropoff_latitude']<40.9)&\n    (data['trip_distance'] < 25) &\n    (data['trip_duration_mins'] < 100)\n]","95ac2ae4":"NYC = x_range, y_range = ((-74.05, -73.7), (40.6, 40.9))","be45726c":"from bokeh.plotting import figure, output_notebook, show # bokeh plotting library\n\nplot_width = int(750)\nplot_height = int(plot_width\/\/1.2)\n\ndef base_plot(tools='pan, wheel_zoom, reset', plot_width=plot_width, plot_height=plot_height, **plot_args):\n    p = figure(tools=tools, plot_width=plot_width, plot_height=plot_height,\n              x_range=x_range, y_range=y_range, outline_line_color=None,\n              min_border=0, min_border_left=0, min_border_right=0,\n              min_border_top=0, min_border_bottom=0, **plot_args)\n    \n    p.xgrid.grid_line_color = None\n    p.ygrid.grid_line_color = None\n    return p\n\noptions = dict(line_color=None, fill_color='blue', size=5)","299b9d7f":"import datashader as ds\nfrom datashader import transfer_functions as tr_fns\nfrom datashader.colors import Greys9\nGreys9_r = list(reversed(Greys9))[:2]","4a279490":"from datashader.bokeh_ext import InteractiveImage\nfrom functools import partial\nfrom datashader.utils import export_image\nfrom datashader.colors import colormap_select, Greys9, Hot, viridis, inferno\nfrom IPython.core.display import HTML, display\n\nbackground = \"black\"\nexport = partial(export_image, export_path=\"export\", background=background)\ncm = partial(colormap_select, reverse=(background==\"black\"))\n\ndef create_image(x_range, y_range, w=plot_width, h=plot_height):\n    cvs = ds.Canvas(plot_width=w, plot_height=h, x_range=x_range, y_range=y_range)\n    agg = cvs.points(data, 'pickup_longitude', 'pickup_latitude', ds.count('passenger_count'))\n    img = tr_fns.shade(agg, cmap=Hot, how='eq_hist')\n    return tr_fns.dynspread(img, threshold=0.5, max_px=4)\n\np = base_plot(background_fill_color=background)\nexport(create_image(*NYC), \"NYCT_pickups_hot\")\nInteractiveImage(p, create_image)","9ebc2e5b":"from datashader.bokeh_ext import InteractiveImage\nfrom functools import partial\nfrom datashader.utils import export_image\nfrom datashader.colors import colormap_select, Greys9, Hot, viridis, inferno\nfrom IPython.core.display import HTML, display\n\nbackground = \"black\"\nexport = partial(export_image, export_path=\"export\", background=background)\ncm = partial(colormap_select, reverse=(background==\"black\"))\n\ndef create_image(x_range, y_range, w=plot_width, h=plot_height, data=data):\n    cvs = ds.Canvas(plot_width=w, plot_height=h, x_range=x_range, y_range=y_range)\n    agg = cvs.points(data, 'dropoff_longitude', 'dropoff_latitude', ds.count('passenger_count'))\n    img = tr_fns.shade(agg, cmap=Hot, how='eq_hist')\n    return tr_fns.dynspread(img, threshold=0.5, max_px=4)\n\np = base_plot(background_fill_color=background)\nexport(create_image(*NYC), \"NYCT_dropoffs_hot\")\nInteractiveImage(p, create_image)","6371b175":"idx1, idx2 = 0, 6571387","c8e3839b":"X0 = data.iloc[idx1:idx2]","274db394":"X1 = data[['pickup_longitude', 'pickup_latitude']].iloc[idx1:idx2].values","f3c19f62":"no_classes = 12\nest = KMeans(n_clusters=no_classes)\nest.fit(X1)\nlabels = est.labels_","6d4438a6":"X0['pickup_cluster'] = labels","5c56d7ed":"fignum=1\nfig, ax = plt.subplots(fignum, figsize=(8, 6))\n\nax.scatter(X1[:, 0], X1[:, 1], c=labels.astype(np.float), marker='o')\n\n#ax.w_xaxis.set_ticklabels([])\n#ax.w_yaxis.set_ticklabels([])\n#ax.w_zaxis.set_ticklabels([])\nax.set_xlabel('longitude')\nax.set_ylabel('latitude')\nax.legend()","57ed19c6":"del X1","a1260a23":"X2 = data[['dropoff_longitude', 'dropoff_latitude']].iloc[idx1:idx2].values","dbc8644d":"no_classes = 12\nest = KMeans(n_clusters=no_classes)\nest.fit(X2)\nlabels = est.labels_","df2a7d87":"X0['dropoff_cluster'] = labels","191f480e":"fig, ax = plt.subplots(1, figsize=(8, 6))\n\nax.scatter(X2[:, 0], X2[:, 1], c=labels.astype(np.float), marker='o')\n\n#ax.w_xaxis.set_ticklabels([])\n#ax.w_yaxis.set_ticklabels([])\n#ax.w_zaxis.set_ticklabels([])\nax.set_xlabel('longitude')\nax.set_ylabel('latitude')\nax.legend()","c067cc8f":"del X2","9ed9ca75":"dropoff_clusters = X0['dropoff_cluster'].unique()\npickup_clusters = X0['pickup_cluster'].unique()","f4b23315":"dropoff_clusters_dict = {}\nfor d in dropoff_clusters:\n    #print(d, X0[X0['dropoff_cluster'] == d]['dropoff_latitude'].mean())\n    dropoff_clusters_dict[d] = (X0[X0['dropoff_cluster'] == d]['dropoff_longitude'].mean(), X0[X0['dropoff_cluster'] == d]['dropoff_latitude'].mean())\ndropoff_clusters_dict\n#pd.DataFrame(dropoff_clusters_dict)","827e6149":"pickup_clusters_dict = {}\nfor p in pickup_clusters:\n    #print(d, X0[X0['dropoff_cluster'] == d]['dropoff_latitude'].mean())\n    pickup_clusters_dict[p] = (X0[X0['pickup_cluster'] == d]['pickup_longitude'].mean(), X0[X0['pickup_cluster'] == d]['pickup_latitude'].mean())\npickup_clusters_dict\n#pd.DataFrame(dropoff_clusters_dict)","b31ddf33":"dist_dict = {}\nfor d, p in itertools.product(dropoff_clusters, pickup_clusters):\n    #print(d, p, X0[(X0['dropoff_cluster'] == d) & (X0['pickup_cluster'] == p)]['trip_distance'].mean())\n    dist_dict[(d, p)] = X0[(X0['dropoff_cluster'] == d) & (X0['pickup_cluster'] == p)]['trip_distance'].mean()\n#print(dist_dict)","9940d581":"X3 = X0[['tpep_pickup_datetime']]","cac397c9":"X3['time_of_day_mins'] = 60* X3['tpep_pickup_datetime'].dt.hour + X3['tpep_pickup_datetime'].dt.minute","39f99086":"X3.drop(['tpep_pickup_datetime'], axis=1, inplace=True)","a1d51a52":"no_classes = 12\nest = KMeans(n_clusters=no_classes)\nest.fit(X3)\nlabels = est.labels_","4b6e186f":"X0['time_of_day_cluster'] = labels","12567801":"sns.distplot(X0['time_of_day_cluster'], kde=False)","a819140a":"#X0.to_csv('cluster_labels.csv', index=False)","1a16c73d":"X0 = X0[['passenger_count', 'pickup_cluster','dropoff_cluster','time_of_day_cluster']]\nX0.head(5)","acec2ade":"res = []\nfor tau in X0['time_of_day_cluster'].unique():\n    print(tau)\n    for d, p in itertools.product(dropoff_clusters, pickup_clusters):\n        X_dum = X0[(X0['time_of_day_cluster'] == tau) & (X0['pickup_cluster'] == p) & (X0['dropoff_cluster'] == d)]\n        tot_pass = X_dum['passenger_count'].sum()\n        num_trips = X_dum.shape[0]\n        total_miles = tot_pass  * dist_dict[(d, p)]\n        miles_saved = (tot_pass - num_trips) * dist_dict[(d, p)] \n        res.append({'tau':tau,'d':d, 'p':p, 'tot_pass': tot_pass, 'num_trips': num_trips, 'total_miles': total_miles, 'miles_saved': miles_saved})","33eb30e0":"summary_stats = pd.DataFrame(res)\nsummary_stats['tau'] ","1ad5b34a":"summary_stats.to_csv('summary_stats.csv', index=False)","409adb2d":"print('Total miles saved for the yellow taxi dataset: {}'.format(summary_stats['miles_saved'].sum()))","eba7d2bd":"print('Efficiency for the yellow taxi dataset: {}'.format(summary_stats['miles_saved'].sum()\/summary_stats['total_miles'].sum()))","1d252743":"# Clustering ","3a95239a":"# Load original dataset","11dd528c":"### Dropoff location","755a73ba":"### Filter the original dataset","fcde8d16":"### Pickup location","7f24df04":"## Efficiency calculation","14fca9bb":"### Pickup time clustering","841df273":"https:\/\/www1.nyc.gov\/site\/tlc\/about\/tlc-trip-record-data.page\nI used the Yellow Taxi Trip Records from June 2016.","8ff36e96":"## Cluster locations (pick-up and drop-off)"}}