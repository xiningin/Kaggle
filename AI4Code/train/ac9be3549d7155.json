{"cell_type":{"8d5257fb":"code","fffc0799":"code","f116d9f6":"code","1891cfa5":"code","9e26efaf":"code","60d26d6a":"code","b96272ec":"code","35a8abec":"code","d75eedcf":"code","d3cab3bc":"code","22d4ed3c":"code","bfd262c8":"code","964581b6":"code","59a95da4":"code","9c4eebea":"code","2ea54602":"code","77e0527a":"code","4e3ca880":"code","8f6d872c":"code","1fb4b403":"code","56e79a61":"code","18d4ee8f":"code","9ea03e83":"code","246baf50":"code","176a1dd1":"code","ab55e8b1":"code","1baa5cb2":"code","123d0559":"code","2d3b8dbd":"code","7b78ee9a":"code","3b593fc5":"code","4444b279":"code","de0e9d56":"code","dad62b09":"markdown","032587b6":"markdown","18de918c":"markdown","daab3e8f":"markdown","b2c919e4":"markdown","11a1c21c":"markdown","edc6d7ee":"markdown"},"source":{"8d5257fb":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')","fffc0799":"data = pd.read_csv('..\/input\/predict-test-scores-of-students\/test_scores.csv')","f116d9f6":"data.head()","1891cfa5":"data.info()","9e26efaf":"data.describe()","60d26d6a":"%matplotlib inline\ndata.hist(figsize=(10,7))\nplt.show()","b96272ec":"data.school.value_counts()","35a8abec":"data.groupby(\"school\")[[\"posttest\", \"pretest\"]].mean()","d75eedcf":"data.drop(\"student_id\", axis=1, inplace=True)\ndata.drop(\"classroom\", axis=1, inplace=True)","d3cab3bc":"data.head()","22d4ed3c":"data[\"pretest_cat\"] = pd.cut(data[\"pretest\"], bins=[20., 40., 60., 80., np.inf], labels=[1, 2, 3, 4])\ndata[\"pretest_cat\"].hist()\nplt.show()","bfd262c8":"from sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(test_size=0.1, n_splits=1, random_state=40)\n\nfor train_idx, test_idx in split.split(data, data[\"pretest_cat\"]):\n    train_data = data.loc[train_idx]\n    test_data = data.loc[test_idx]\n","964581b6":"train_data[\"pretest_cat\"].value_counts()\/len(train_data[\"pretest_cat\"])","59a95da4":"test_data.drop(\"pretest_cat\", axis=1, inplace=True)\ntrain_data.drop(\"pretest_cat\", axis=1, inplace=True)","9c4eebea":"scores = train_data.copy()","2ea54602":"scores.info()","77e0527a":"scores.corr()","4e3ca880":"scores.groupby(\"teaching_method\")[\"posttest\"].mean()","8f6d872c":"import seaborn as sns\n\nfig, axes = plt.subplots(1,3, figsize=(15,7))\n# fig.subtitle(\"\")\n\n#1\nsns.kdeplot(ax=axes[0], x=scores.posttest, shade=True, hue=scores.teaching_method)\n#2\nsns.kdeplot(ax=axes[1], x=scores.posttest, shade=True, hue=scores.school_type)\n#3\nsns.kdeplot(ax=axes[2], x=scores.posttest, shade=True, hue=scores.school_setting)\n\nplt.tight_layout()\nplt.show()","1fb4b403":"scores_data = scores.drop(\"posttest\", axis=1)\nlabels = scores[\"posttest\"]","56e79a61":"scores_num = scores_data[[\"n_student\", \"pretest\"]]\nscores_cat1 = scores_data.drop([\"n_student\", \"pretest\", \"school\"], axis=1)\nscores_cat2 = scores_data[[\"school\"]]\nscores_cat1.info()","18d4ee8f":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler \nfrom sklearn.pipeline import Pipeline\nnum_pipeline = Pipeline([('imputer', SimpleImputer(strategy=\"median\")),  \n                         ('std_scaler', StandardScaler())])\n","9ea03e83":"from sklearn.compose import ColumnTransformer\nimport category_encoders as ce\nnum_atts = list(scores_num)\ncat_atts = list(scores_cat1)\ncat2_atts = list(scores_cat2)\nfull_pipeline = ColumnTransformer([('num', num_pipeline, num_atts), \n                                   ('cat', OneHotEncoder(), cat_atts), \n                                   ('cat2', ce.BinaryEncoder(), cat2_atts)])\n\ndata_prepared = full_pipeline.fit_transform(scores_data)","246baf50":"data_prepared[1]","176a1dd1":"from sklearn.linear_model import LinearRegression\n\nmodel_lr = LinearRegression()\nmodel_lr.fit(data_prepared, labels)","ab55e8b1":"labels_predicts = model_lr.predict(data_prepared[:5])\n\nprint(\"Predict: \", labels_predicts)\nprint(\"Actual: \", list(labels[:5]))","1baa5cb2":"from sklearn.metrics import mean_squared_error\n\nmse = mean_squared_error(labels, model_lr.predict(data_prepared))\nprint(np.sqrt(mse))","123d0559":"from sklearn.model_selection import cross_val_score\n\ndef display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())\n\nscores = cross_val_score(model_lr, data_prepared, labels, scoring=\"neg_mean_squared_error\", cv=10)\nmse = np.sqrt(-scores)\ndisplay_scores(mse)","2d3b8dbd":"from sklearn.tree import DecisionTreeRegressor\n\nmodel_tree = DecisionTreeRegressor()\nmodel_tree.fit(data_prepared, labels)","7b78ee9a":"mse = mean_squared_error(labels, model_tree.predict(data_prepared))\nprint(np.sqrt(mse))","3b593fc5":"scores = cross_val_score(model_tree, data_prepared, labels, scoring=\"neg_mean_squared_error\", cv=10)\nmse = np.sqrt(-scores)\ndisplay_scores(mse)","4444b279":"from sklearn.ensemble import RandomForestRegressor\n\nmodel_rf = DecisionTreeRegressor()\nmodel_rf.fit(data_prepared, labels)\n\nscores = cross_val_score(model_rf, data_prepared, labels, scoring=\"neg_mean_squared_error\", cv=10)\nmse = np.sqrt(-scores)\ndisplay_scores(mse)","de0e9d56":"X_test = test_data.drop(\"posttest\", axis=1)\ny_test = test_data[\"posttest\"]\nX_test_prepared = full_pipeline.fit_transform(X_test)\n\nmse = mean_squared_error(y_test, model_lr.predict(X_test_prepared))\nprint(np.sqrt(mse))","dad62b09":"### Find a model","032587b6":"---","18de918c":"### Final model and Test","daab3e8f":"### Another Model","b2c919e4":"### Pretest seems to be the number one predictor of posttest","11a1c21c":"### RandomForest","edc6d7ee":"### Prepare Data"}}