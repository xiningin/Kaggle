{"cell_type":{"7da8fe20":"code","8c2fd8de":"code","f872c4d9":"code","ce59165c":"code","e4ef5a0a":"code","6d557f0b":"code","18371261":"code","947d00e4":"code","63b71697":"code","6ccceb47":"code","305d61e9":"code","d52a6064":"code","a0985e04":"code","a692499a":"code","4a560202":"code","60441c9f":"code","beeb8cd9":"code","675840ce":"code","7c95c27f":"code","c6471d36":"code","e36bfb4b":"code","570a085b":"code","76108d2c":"code","3844f9d7":"code","be2a8696":"code","c56d808a":"code","fa0c9af3":"code","11565906":"code","412cce09":"code","d0210806":"code","f7952709":"code","67cbbba8":"code","29118030":"code","e8d95342":"code","cbdde025":"code","e7ad6b15":"code","de3c1eb5":"code","44772695":"code","a38357c0":"code","cacb400d":"code","d25c92f4":"code","2c3eed67":"code","8a38e948":"code","af8f80b7":"code","f018cff4":"code","0032a9c9":"code","d75865e2":"code","2cf4e6c9":"code","50c38e3d":"code","99d14fba":"code","965d87d3":"code","4413a0a8":"code","fe56a132":"code","b4c20c63":"code","8f35e9ee":"code","8dbf0dbe":"code","3d859610":"code","82fc253a":"code","02546037":"code","008f243e":"code","a6a33fca":"code","8a3cf311":"code","84d43f09":"markdown","9b649550":"markdown","6bac45b3":"markdown","b7f2dddb":"markdown","740caecd":"markdown","0a26ceac":"markdown","97d02a8f":"markdown","81004de7":"markdown"},"source":{"7da8fe20":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\npd.set_option('display.max_columns',None)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8c2fd8de":"df_train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","f872c4d9":"df_train.head()","ce59165c":"df_test.head()","e4ef5a0a":"df_train.shape","6d557f0b":"df_test.shape","18371261":"df_train.columns","947d00e4":"df_test.columns","63b71697":"df_train.info()","6ccceb47":"df_train.isnull().sum()","305d61e9":"df_train.corr()","d52a6064":"corr = df_train.corr()\nsns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(36,18))\na = sns.heatmap(corr, annot=True, fmt='.2f')\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation=90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation=30)","a0985e04":"df_train.describe().T","a692499a":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False)","4a560202":"df_train.isnull().sum()","60441c9f":"df_train.info()","beeb8cd9":"df_train[\"LotFrontage\"] = df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean())\ndf_train.drop([\"Alley\"],axis=1,inplace=True) #Aa alley has more than 3\/4 values are null values.so we drop the column","675840ce":"df_train['MasVnrType']=df_train['MasVnrType'].fillna(df_train['MasVnrType'].mode()[0])\ndf_train['MasVnrArea']=df_train['MasVnrArea'].fillna(df_train['MasVnrArea'].mode()[0])\ndf_train['BsmtCond']=df_train['BsmtCond'].fillna(df_train['BsmtCond'].mode()[0])\ndf_train['BsmtQual']=df_train['BsmtQual'].fillna(df_train['BsmtQual'].mode()[0])\ndf_train['FireplaceQu']=df_train['FireplaceQu'].fillna(df_train['FireplaceQu'].mode()[0])\ndf_train['GarageType']=df_train['GarageType'].fillna(df_train['GarageType'].mode()[0])\ndf_train['GarageFinish']=df_train['GarageFinish'].fillna(df_train['GarageFinish'].mode()[0])\ndf_train['GarageQual']=df_train['GarageQual'].fillna(df_train['GarageQual'].mode()[0])\ndf_train['GarageCond']=df_train['GarageCond'].fillna(df_train['GarageCond'].mode()[0])\ndf_train['Electrical']=df_train['Electrical'].fillna(df_train['Electrical'].mode()[0])","7c95c27f":"df_train.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_train.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\n#I'm droping these columns because they contain more null values","c6471d36":"df_train.shape","e36bfb4b":"df_train.drop([\"Id\"],axis=1,inplace=True)\n#As id did'nt affect our target variable i'm going to delete it","570a085b":"df_train.isnull().sum()","76108d2c":"df_train['BsmtExposure']=df_train['BsmtExposure'].fillna(df_train['BsmtExposure'].mode()[0])\ndf_train['BsmtFinType2']=df_train['BsmtFinType2'].fillna(df_train['BsmtFinType2'].mode()[0])","3844f9d7":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","be2a8696":"df_train.isnull().sum()","c56d808a":"df_train.dropna(inplace=True)\ndf_train.shape","fa0c9af3":"#Categorical features handling\ncat_feature = [feature for feature in df_train.columns if df_train[feature].dtype==\"O\"]\nlen(cat_feature)","11565906":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","412cce09":"main_df = df_train.copy()","d0210806":"main_df.head()","f7952709":"df_test.head()","67cbbba8":"sol = df_test[\"Id\"]\ndf_test.shape","29118030":"test_num = [feature for feature in df_test.columns if df_test[feature].isnull().sum()>1]\ntest_num","e8d95342":"df_test['MSZoning']=df_test['MSZoning'].fillna(df_test['MSZoning'].mode()[0])\ndf_test['LotFrontage']=df_test['LotFrontage'].fillna(df_test['LotFrontage'].mean())","cbdde025":"df_test.drop(['Alley'],axis=1,inplace=True)\ndf_test.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_test.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ndf_test.drop(['Id'],axis=1,inplace=True)\n#Dropping columns not present in train data","e7ad6b15":"df_test['Utilities']=df_test['Utilities'].fillna(df_test['Utilities'].mode()[0])\ndf_test['MasVnrType']=df_test['MasVnrType'].fillna(df_test['MasVnrType'].mode()[0])\ndf_test['MasVnrArea']=df_test['MasVnrArea'].fillna(df_test['MasVnrArea'].mode()[0])\ndf_test['BsmtCond']=df_test['BsmtCond'].fillna(df_test['BsmtCond'].mode()[0])\ndf_test['BsmtQual']=df_test['BsmtQual'].fillna(df_test['BsmtQual'].mode()[0])\ndf_test['BsmtExposure']=df_test['BsmtExposure'].fillna(df_test['BsmtExposure'].mode()[0])\ndf_test['BsmtFinType1']=df_test['BsmtFinType1'].fillna(df_test['BsmtFinType1'].mode()[0])\ndf_test['BsmtFinType2']=df_test['BsmtFinType2'].fillna(df_test['BsmtFinType2'].mode()[0])\ndf_test['BsmtFullBath']=df_test['BsmtFullBath'].fillna(df_test['BsmtFullBath'].mode()[0])\ndf_test['BsmtHalfBath']=df_test['BsmtHalfBath'].fillna(df_test['BsmtHalfBath'].mode()[0])\ndf_test['Functional']=df_test['Functional'].fillna(df_test['Functional'].mode()[0])\ndf_test['FireplaceQu']=df_test['FireplaceQu'].fillna(df_test['FireplaceQu'].mode()[0])\ndf_test['GarageType']=df_test['GarageType'].fillna(df_test['GarageType'].mode()[0])\ndf_test['GarageFinish']=df_test['GarageFinish'].fillna(df_test['GarageFinish'].mode()[0])\ndf_test['GarageQual']=df_test['GarageQual'].fillna(df_test['GarageQual'].mode()[0])\ndf_test['GarageCond']=df_test['GarageCond'].fillna(df_test['GarageCond'].mode()[0])","de3c1eb5":"df_test.shape","44772695":"df_test.loc[:, df_test.isnull().any()].head()","a38357c0":"df_test['Exterior1st']=df_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0])\ndf_test['Exterior2nd']=df_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0])\ndf_test['BsmtFinSF1']=df_test['BsmtFinSF1'].fillna(df_test['BsmtFinSF1'].mean())\ndf_test['BsmtFinSF2']=df_test['BsmtFinSF2'].fillna(df_test['BsmtFinSF2'].mean())\ndf_test['BsmtUnfSF']=df_test['BsmtUnfSF'].fillna(df_test['BsmtUnfSF'].mean())\ndf_test['TotalBsmtSF']=df_test['TotalBsmtSF'].fillna(df_test['TotalBsmtSF'].mean())\ndf_test['KitchenQual']=df_test['KitchenQual'].fillna(df_test['KitchenQual'].mode()[0])\ndf_test['GarageCars']=df_test['GarageCars'].fillna(df_test['GarageCars'].mean())\ndf_test['GarageArea']=df_test['GarageArea'].fillna(df_test['GarageArea'].mean())\ndf_test['SaleType']=df_test['SaleType'].fillna(df_test['SaleType'].mode()[0])","cacb400d":"df_test.isnull().sum().any()","d25c92f4":"df_test.shape","2c3eed67":"df_train.shape","8a38e948":"final_df = pd.concat([df_train,df_test],axis=0)","af8f80b7":"final_df.shape","f018cff4":"final_df = category_onehot_multcols(cat_feature)","0032a9c9":"final_df.shape #After one hot encoding categorical data","d75865e2":"final_df =final_df.loc[:,~final_df.columns.duplicated()]","2cf4e6c9":"final_df.shape","50c38e3d":"train_df = final_df.iloc[:1422,:]\ntest_df = final_df.iloc[1422:,:]","99d14fba":"test_df.head()","965d87d3":"train_df.head()","4413a0a8":"test_df.drop([\"SalePrice\"],axis=1,inplace=True)","fe56a132":"train_df[\"SalePrice\"]","b4c20c63":"X_train=train_df.drop(['SalePrice'],axis=1)\ny_train=train_df['SalePrice']","8f35e9ee":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nX_train = scalar.fit_transform(X_train)\ntest_df = scalar.transform(test_df)","8dbf0dbe":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,y_train)","3d859610":"y_tr=lr.predict(X_train)","82fc253a":"lr.coef_","02546037":"lr.intercept_","008f243e":"y_pred = lr.predict(test_df)","a6a33fca":"lst = sol\n  \n# list of int\nlst2 = list(y_pred)\n  \n# Calling DataFrame constructor after zipping\n# both lists, with columns specified\ndf = pd.DataFrame(list(zip(lst, lst2)),\n               columns =['id', 'SalePrice'])","8a3cf311":"df.to_csv('result.csv',index=False)","84d43f09":"Handling missing values","9b649550":"# Handling training data","6bac45b3":"# Handling Test Data","b7f2dddb":"# Imports","740caecd":"COncatinating train and test data to do one hot encoding for categorical data","0a26ceac":"# Reading the files","97d02a8f":"# Finding predictions for Test data and make .csv file(result.csv)","81004de7":"# Multiple Linear Regression"}}