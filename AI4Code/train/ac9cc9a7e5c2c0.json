{"cell_type":{"cd79513e":"code","2e39d388":"code","193c5748":"code","5daeadac":"code","c09f272d":"code","e504c1a3":"code","67204553":"code","2f1ff0d2":"code","c2399f0e":"code","19e4f7b2":"code","02e9c527":"code","8bf7a7a5":"code","9afcaf09":"code","0cb0423d":"code","c9e1bcfc":"code","c618d51c":"code","44f5da4d":"code","78b39d9f":"code","812d35a2":"code","e3a0e031":"code","8f1acf6e":"code","d5deb31b":"code","50524b52":"code","7cc0be3b":"code","993f702b":"code","c7f30561":"code","770742d9":"markdown","cebe6601":"markdown","80bf5ebb":"markdown","d716a299":"markdown","9cc188c5":"markdown","ef259178":"markdown","6d55c194":"markdown","ef114aa5":"markdown","a5aadf92":"markdown","1b32ad38":"markdown","b7100445":"markdown","98fd5839":"markdown","f3e038e4":"markdown","aedfc39f":"markdown","4921825d":"markdown","97a26ff1":"markdown","0a902968":"markdown","cc09a5e2":"markdown","7f864639":"markdown"},"source":{"cd79513e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e39d388":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import OneHotEncoder\nimport matplotlib.pyplot as plt\nimport imageio\n\nfrom fastai import *\nfrom fastai.vision import *\nfrom fastai.vision.all import *","193c5748":"df = pd.read_csv('..\/input\/clothing-single-channel\/fashion-mnist_train.csv')","5daeadac":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","c09f272d":"df.head()","e504c1a3":"df.shape","67204553":"df_x = df.loc[:,'pixel0':'pixel783']","2f1ff0d2":"df_x","c2399f0e":"df_y = df.loc[:,'label']","19e4f7b2":"df_y","02e9c527":"np_x = np.array(df_x)\nnp_x.shape","8bf7a7a5":"X_train = np.array(np_x).reshape(-1,28, 28)\ny_train = np.array(df_y)","9afcaf09":"print(X_train.shape)\nprint(y_train.shape)","0cb0423d":"X_train = np.stack((X_train,)*3, axis=-1)","c9e1bcfc":"print(X_train.shape)","c618d51c":"def save_imgs(path:Path, data, labels):\n    for label in np.unique(labels):\n        (path\/str(label)).mkdir(parents=True,exist_ok=True)\n    for i in range(len(data)):\n        if(len(labels)!=0):\n            imageio.imsave( str( path\/str(labels[i])\/(str(i)+'.jpg') ), data[i])\n        else:\n            imageio.imsave( str( path\/(str(i)+'.jpg') ), data[i])","44f5da4d":"save_imgs(Path('\/data\/digits'),X_train,y_train)","78b39d9f":"print('total classes :', len(os.listdir('\/data\/digits')))\nprint('Images with label 1: ', len(os.listdir('\/data\/digits\/1')))\n\nprint('Image names with label 1')\nprint(os.listdir('\/data\/digits\/1')[:10])","812d35a2":"from keras.applications.resnet50 import preprocess_input\nimport tensorflow as tf\n\ntrain_datagen=tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=preprocess_input, validation_split=0.15)\ntrain_generator = train_datagen.flow_from_directory('\/data\/digits', class_mode='categorical', subset='training')\nvalid_generator = train_datagen.flow_from_directory('\/data\/digits', class_mode='categorical', subset='validation')","e3a0e031":"x, y = train_generator[0]\nprint(x.shape)\nprint(y.shape)","8f1acf6e":"plt.imshow(x[0])","d5deb31b":"resnet_weights_path = '..\/input\/keras-pretrained-models\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'","50524b52":"from tensorflow.keras.applications.resnet50 import ResNet50\nmodel = Sequential()\n\nmodel.add(ResNet50(include_top = False, pooling = 'avg', weights = 'imagenet'))\n\n# 2nd layer as Dense for 2-class classification, i.e., dog or cat using SoftMax activation\nmodel.add(Dense(10, activation = 'softmax'))\n\n# Say not to train first layer (ResNet) model as it is already trained\nmodel.layers[0].trainable = False","7cc0be3b":"model.summary()","993f702b":"model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])","c7f30561":"model.fit_generator(generator=train_generator,epochs=10,validation_data=valid_generator)","770742d9":"<h3>Channel stacking<\/h3>\n\nWe will proceed to stack the data along the last dimension. This will result in an artificially created 3-channeled image (RGB). As most of the pre-trained models work on RGB images, we need to convert ours in the same format as well","cebe6601":"<h3>Shape of x and y<\/h3>\n\nWe iterate over the train generator and retrieve the first element. Here, the first element is the batch of 32 images. We can then proceed to iterate over the batch and display the images. The y dimensions correspond to the labels of the data in one-hot encoding. Each y label has a sparse single dimension vector with a value of 1 corresponding to the index of the label.","80bf5ebb":"<h3>Training data reshape<\/h3>\n\nAs our data is in the format of `28x28` images, we will proceed to reshape them accordingly. This will result in a 3-D array with dimensions:\n\n(Number of training samples, height, width)","d716a299":"Transfer learning is the idea of overcoming the isolated learning paradigm and utilizing knowledge acquired for one task to solve related ones. . In Simpler terms, Transfer learning is the process of using `state-of-the-art` pretrained models such as VGG, Resnet, mobilenet, Inception for our own custom task. These models have already been pre-trained over millions of images and learnt a myriad of features from them. Adding our own dense neural network at the end results in the model fine-tuning for our task and producing much better predictions than if we had only worked with our own data. This method is helpful when we do not have a lot of data, or our task resembles other tasks that these models have been pre-trained for: \n\nThis notebooks serves as a basic rundown\/guide of using transfer learning for tasks such as image recognition. We will be using the RESNET50 model which has been trained over the `imagenet` dataset.\n\nMore information about the RESNET50 model:\n\nhttps:\/\/arxiv.org\/abs\/1512.03385\n\nWe will be using the pre-trained model, the model weights will be imported as well in a `.h5` format:\n\nhttps:\/\/www.kaggle.com\/gaborfodor\/keras-pretrained-models","9cc188c5":"<h3>Division of data and labels<\/h3>\n\nWe will proceed to separate out the data used for training as well as the labels, these will be separately used in our model creation phase","ef259178":"This given notebook can be used on different forms of single-channeled data, the notebook incoporates the clothing channel images and vanilla MNIST for digit recognition. The steps will be the same for any such dataset which consists of single-channel pixel values as rows of a CSV file","6d55c194":"Here, we use the `preprocess_input` function that processes an image into a form acceptable by the RESNET50 model. We also use the `class_mode=categorical` as our labels were numeric. This allows a conversion of those labels into sparse one-hot vectors that can be used in the output neurons of our model.","ef114aa5":"<h2>File imports<\/h2>","a5aadf92":"<h1>Resnet 50 tutorial with MNIST data - Transfer learning<\/h1>","1b32ad38":"<h3>The Vanilla MNIST CSV<\/h3>","b7100445":"<h3>Saving images<\/h3>\n\nWe will be using the keras method of `flow_from_directory`, this will require us to save our images in a directory. We will convert the numpy arrays of the data into `jpg` images and save them in the `\/data\/` directory.","98fd5839":"<h3>Sanity check for data import<\/h3>","f3e038e4":"Our image here has pixels consisting of flat colors as we have artificially synthesized this single-channel image into a 3-channel one. Each layer of our image does not represent the `RGB` byte values but instead the single channel pixel values. This can result in the image showing varied characteristics after its conversion into RGB.","aedfc39f":"<h3>Model creation<\/h3>\n\nWe create our ResNet50 model through the `keras.applications` package. We will add the ResNet50 model and use `include_top=False` to remove the final output layer. As the ResNet model was trained for 1000 classes and we have only 10, we will replace this with our own 10 neuron layer.\n\nAs our weights for ResNet are pretrained, we will proceed to set its training capability to False. This will allow the model to only focus on the weights of the output neurons and give us a fast and efficient implementation.","4921825d":"<h3>Flowing images into the Keras image generator<\/h3>","97a26ff1":"<h3>Sanity check<\/h3>\n\nWe will proceed to check the created directories to cross-verify whether our function has successfully worked:","0a902968":"**Reference**: The corresponding categorical labels for the numeric labels in the clothing dataset:\n\n<ol>\n    <li>T-shirt\/top<\/li>\n    <li>Trouser<\/li>\n    <li>Pullover<\/li>\n    <li>Dress<\/li>\n    <li>Coat<\/li>\n    <li>Sandal<\/li>\n    <li>Shirt<\/li>\n    <li>Sneaker<\/li>\n    <li>Bag<\/li>\n    <li>(0) Ankle boot<\/li>\n<\/ol>","cc09a5e2":"We will define the path of our resnet pretrained model if we have the requirement to do so:","7f864639":"<h3>The Clothing single channel CSV<\/h3>"}}