{"cell_type":{"e1efed8f":"code","fbc8fb47":"code","85be7616":"code","12a3dc4f":"code","087a97e7":"code","c809e530":"code","58390d9e":"code","4bd2a4be":"code","7ad9bf4c":"code","9e5e427e":"code","7ca9684f":"code","cb1f1628":"code","c67a4d36":"code","61b529a9":"code","e535cfc8":"code","4841dfcb":"code","b3957f90":"code","27cd9376":"code","4a9091f7":"code","9e2f663f":"code","24c96895":"code","42cb6db6":"code","5ddfcb3c":"code","6a032c47":"code","6e11faff":"code","a4db3799":"code","041afaa1":"code","6c78ba03":"code","f5f54c38":"code","d25a16b8":"code","24d2a1ae":"code","241443ef":"code","14a2de21":"code","5c606901":"code","ea3df229":"code","bc16ad0a":"code","ee09fb3c":"code","75728aa0":"code","de4b5ee5":"code","d6a6179d":"code","fbd37b96":"code","4a62aac7":"code","4b8997e5":"code","358e9ef6":"code","30a5b730":"code","14cfbf80":"code","17e888e1":"code","7faf2166":"code","ac1cbe4b":"code","1d9bb257":"code","56f83a19":"code","ce999e89":"markdown"},"source":{"e1efed8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npd.options.mode.chained_assignment = None\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","fbc8fb47":"df = pd.read_csv('\/kaggle\/input\/coronavirus-2019ncov\/covid-19-all.csv')","85be7616":"df.head()","12a3dc4f":"df['Date'] = pd.to_datetime(df['Date'])\ndf[['Confirmed','Recovered','Deaths']] = df[['Confirmed','Recovered','Deaths']].fillna(0).astype(int)\ndf['Still Infected'] = df['Confirmed'] - df['Recovered'] - df['Deaths']\ndf[\"Country\/Region\"].replace({\"Mainland China\": \"China\"}, inplace=True)\ncountries_affected = df['Country\/Region'].unique().tolist()\nprint(\"\\nTotal countries effected by Corona virus: \",len(countries_affected))\ndf.head()","087a97e7":"df_list= df['Country\/Region'].unique().tolist()\nprint ('[%s]' % ', '.join(map(str, df_list)))","c809e530":"del df['Province\/State']\ndf.head()","58390d9e":"aggregation_functions = {'Confirmed': 'sum', 'Recovered': 'sum', 'Deaths': 'sum', 'Still Infected': 'sum', }\ndf_new = df.groupby(['Country\/Region', 'Date']).aggregate(aggregation_functions)\ndf_new.reset_index()\ndf_new.head()","4bd2a4be":"del df['Latitude']\ndel df['Longitude']\ndf.head()","7ad9bf4c":"c_df = df[df['Country\/Region'] == 'India']\nc_df.head()","9e5e427e":"del c_df['Country\/Region']\nc_df = c_df.sort_values([\"Date\"], ascending = (True)).reset_index()\nc_df.head()","7ca9684f":"c_df = c_df.groupby(['Date'])[['Confirmed','Recovered','Deaths','Still Infected']].sum().reset_index()\nc_df.head()","cb1f1628":"ax1 = c_df.plot.scatter(x='Date', y='Confirmed', style='b')\nc_df.plot.line(x='Date', y='Confirmed', ax=ax1, style='b')\nc_df.plot.line(x='Date', y='Recovered', ax=ax1, style='g')\nc_df.plot.line(x='Date', y='Deaths', ax=ax1, style='r')","c67a4d36":"df_list= df['Country\/Region'].unique().tolist()\n# country_list = '[%s]' % ', '.join(map(str, df_list))\n# print(country_list)\nfor i in df_list:\n    c_df = df[df['Country\/Region'] == i]\n    del c_df['Country\/Region']\n    c_df = c_df.sort_values([\"Date\"], ascending = (True)).reset_index()\n    c_df = c_df.groupby(['Date'])[['Confirmed','Recovered','Deaths','Still Infected']].sum().reset_index()\n    ax1 = c_df.plot.scatter(x='Date', y='Confirmed', style='b')\n    c_df.plot.line(x='Date', y='Confirmed', ax=ax1, style='b')\n    c_df.plot.line(x='Date', y='Recovered', ax=ax1, style='g')\n    c_df.plot.line(x='Date', y='Deaths', ax=ax1, style='r')\n    \n    ","61b529a9":"recent_date = df['Date'].max()\nlatest_entry = df[df['Date'] >= recent_date]\ndf_stats = df.groupby(['Date','Country\/Region'])[['Confirmed','Recovered','Deaths','Still Infected']].sum().reset_index()\ndf_stats.head()","e535cfc8":"df_all_agg = df.drop('Date',1)\ndf_all_agg.head()","4841dfcb":"df_all_agg = df_all_agg.groupby(['Country\/Region'])[['Confirmed','Recovered','Deaths','Still Infected']].sum().reset_index()\ndf_all_agg.head()","b3957f90":"latest_entry.head()","27cd9376":"latest_entry.shape","4a9091f7":"latest_entry = latest_entry.groupby(['Country\/Region'])[['Confirmed','Recovered','Deaths','Still Infected']].sum().reset_index()\nlatest_entry.head()","9e2f663f":"latest_entry['Death\/Case'] = (latest_entry['Deaths']*100)\/latest_entry['Confirmed']","24c96895":"latest_entry.head()","42cb6db6":"latest_entry.shape","5ddfcb3c":"latest_entry['Recovery\/Case'] = (latest_entry['Recovered']*100)\/latest_entry['Confirmed']\nlatest_entry.head()","6a032c47":"latest_entry['Mortality'] = (latest_entry['Deaths']*100)\/latest_entry['Recovered']\nlatest_entry.head()","6e11faff":"q1 = latest_entry['Confirmed'].quantile(0.25)\nq3 = latest_entry['Confirmed'].quantile(0.75)\niqr = q3 - q1\nfence_low = q1 - 1.5 * iqr\nfence_high = q3 + 1.5 * iqr\ncleaned_data = latest_entry.loc[(latest_entry['Confirmed'] > fence_low) & (latest_entry['Confirmed'] < fence_high)]\ncleaned_data.head()","a4db3799":"latest_entry = latest_entry.sort_values([\"Still Infected\", \"Deaths\", \"Recovery\/Case\", \"Mortality\"], ascending = (True, True, False, True)).reset_index()\n\nlatest_entry.head()","041afaa1":"latest_entry.tail()","6c78ba03":"latest_entry = latest_entry[latest_entry['Mortality'] > 0]\nlatest_entry.tail()","f5f54c38":"latest_entry.head()","d25a16b8":"latest_entry.shape","24d2a1ae":"t = latest_entry[latest_entry['Confirmed'] > 1500]\nt.head()","241443ef":"t.tail()","14a2de21":"import folium","5c606901":"import requests\nimport json\nurl = '\/kaggle\/input\/folium-world-map-data\/general_map_data.json'\nf = open(url,)\ndata = json.load(f)","ea3df229":"map_poly_data = {}\ncountry_list = []\nfor i in data['features']:\n    country = i['properties']['name']\n    polygon = i['geometry']['coordinates']\n    map_poly_data[country] = polygon\n    country_list.append(country)\nprint(len(country_list))","bc16ad0a":"print(country_list)","ee09fb3c":"df_c_l = t['Country\/Region'].tolist()\nsorted(df_c_l)","75728aa0":"sorted(country_list)\ncountry_list","de4b5ee5":"aug_list = df_c_l + country_list\nc_set = set(aug_list)\nc_list = sorted(list(c_set))","d6a6179d":"c_list","fbd37b96":"miss = set(df_c_l) - set(country_list)\nmiss","4a62aac7":"t.replace('Burma', \"Myanmar\", inplace = True)\n\nfields = ['Confirmed','Recovered','Deaths','Still Infected','Death\/Case','Recovery\/Case','Mortality']\nfor i in fields:\n    t[t['Country\/Region']=='Congo (Brazzaville)'][i] = t[t['Country\/Region']=='Congo (Brazzaville)'][i] + t[t['Country\/Region']=='Congo (Kinshasa)'][i]\nt.replace(\"Congo (Brazzaville)\", \"Democratic Republic of the Congo\", inplace = True)\nt = t.drop(t[t['Country\/Region']=='Congo (Kinshasa)'].index)\nt.replace(\"US\",\"United States of America\" , inplace = True)\nt.replace(\"West Bank and Gaza\", \"West Bank\", inplace = True)\nt.replace(\"Serbia\", \"Republic of Serbia\", inplace = True)\nt.replace(\"North Macedonia\", \"Macedonia\", inplace = True)\nt.replace(\"Guinea-Bissau\", \"Guinea Bissau\", inplace = True)\n","4b8997e5":"x = t['Mortality'].nlargest(3).tolist()\nmax_i = x[0]\nmax_val = x[2]\nt.loc[t['Mortality'] == max_i, ['Mortality']] = max_val","358e9ef6":"t.loc[t['Mortality'] > 100, ['Mortality']] = 100","30a5b730":"miss = set(country_list) - set(df_c_l)\nmiss","14cfbf80":"t.tail()","17e888e1":"m = folium.Map()\nfolium.Choropleth(\n    #The GeoJSON data to represent the world country\n    geo_data=data,\n    name='Death\/Case COVID-19',\n    data=t,\n    #The column aceppting list with 2 value; The country name and  the numerical value\n    columns=['Country\/Region', 'Death\/Case'],\n    key_on='feature.properties.name',\n    fill_color='PuRd',\n    nan_fill_color='white'\n).add_to(m)\n\nm","7faf2166":"m = folium.Map()\nfolium.Choropleth(\n    #The GeoJSON data to represent the world country\n    geo_data=data,\n    name='Total Case COVID-19',\n    data=t,\n    #The column aceppting list with 2 value; The country name and  the numerical value\n    columns=['Country\/Region', 'Confirmed'],\n    key_on='feature.properties.name',\n    fill_color='PuRd',\n    nan_fill_color='white'\n).add_to(m)\n\nm","ac1cbe4b":"m = folium.Map()\nfolium.Choropleth(\n    #The GeoJSON data to represent the world country\n    geo_data=data,\n    name='Total Deaths COVID-19',\n    data=t,\n    #The column aceppting list with 2 value; The country name and  the numerical value\n    columns=['Country\/Region', 'Deaths'],\n    key_on='feature.properties.name',\n    fill_color='PuRd',\n    nan_fill_color='white'\n).add_to(m)\n\nm","1d9bb257":"m = folium.Map()\nfolium.Choropleth(\n    #The GeoJSON data to represent the world country\n    geo_data=data,\n    name='Recovery\/Case COVID-19',\n    data=t,\n    #The column aceppting list with 2 value; The country name and  the numerical value\n    columns=['Country\/Region', 'Recovery\/Case'],\n    key_on='feature.properties.name',\n    fill_color='PuRd',\n    nan_fill_color='white'\n).add_to(m)\n\nm","56f83a19":"m = folium.Map()\nfolium.Choropleth(\n    #The GeoJSON data to represent the world country\n    geo_data=data,\n    name='Mortality COVID-19',\n    data=t,\n    #The column aceppting list with 2 value; The country name and  the numerical value\n    columns=['Country\/Region', 'Mortality'],\n    key_on='feature.properties.name',\n    fill_color='PuRd',\n    nan_fill_color='white'\n).add_to(m)\n\nm","ce999e89":"# Visualization\n\n**============================================**"}}