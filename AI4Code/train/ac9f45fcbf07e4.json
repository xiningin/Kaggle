{"cell_type":{"505e850a":"code","706db14a":"code","d35f1c7c":"code","24a09d08":"code","dcc0c67b":"code","8c7630f5":"code","433b9108":"code","802baae0":"code","10fb50de":"code","6b8b1f8f":"code","a47f0e31":"code","e81b8747":"code","fdb0e528":"code","8a2b129c":"code","d5c77d3c":"code","a8000288":"code","6ba670e3":"code","36552356":"code","3d62a5a5":"code","ecea69e6":"code","e8648c72":"code","b8e706ae":"code","6ca1f1c2":"code","777b1a49":"code","af5345e1":"code","959e5039":"code","39535139":"code","48d7005c":"code","f66ae1b5":"code","98347c73":"code","71fd7941":"code","df4f98ba":"code","36736045":"code","3f56f372":"code","45b148f9":"code","257096c5":"code","d6842af2":"code","6df9cedc":"code","4c338afb":"code","cbdca02c":"code","69c85e11":"code","be0616d3":"code","aff674d2":"code","d0d7aae6":"code","8283cf24":"code","b89dbf84":"code","fd7d54c4":"code","0d314901":"code","cf95530a":"code","7752af88":"code","b546acee":"code","22e4863d":"code","0e1bd10d":"code","00452267":"code","267aa222":"code","17ad5a74":"code","d998a302":"code","86bf3e29":"code","228bf8b7":"code","1036a7b0":"code","f2421c44":"code","3798509a":"code","bece8903":"code","d1508e20":"markdown","4a0a5120":"markdown","bffedcfc":"markdown","f3ac1f0e":"markdown","0886c280":"markdown","8c133abb":"markdown","1aaeff1d":"markdown","2e769f4e":"markdown","ad9caf08":"markdown","0d1218e8":"markdown","b2502ec1":"markdown","e5269f55":"markdown","43f09496":"markdown","3a9a6c2c":"markdown","602ab86e":"markdown","4191e818":"markdown","099ed21a":"markdown","3d708a08":"markdown","088849d9":"markdown","7f3f1fdf":"markdown","3a20a28c":"markdown","94ba9c09":"markdown","5e31e439":"markdown","1cafade3":"markdown","fdd8e3c3":"markdown","67d887e5":"markdown","49e2c530":"markdown","5f4d2a50":"markdown","ecccfba8":"markdown","1fe0d5ea":"markdown","40dd4b46":"markdown","02c98515":"markdown","5f48b123":"markdown","37627ced":"markdown","923b1fc1":"markdown","822cba4d":"markdown","4770c494":"markdown","dd92a86d":"markdown","d0d00ecd":"markdown","09b918db":"markdown","fe4568bc":"markdown","7bae67d2":"markdown","2b83cb1e":"markdown","dc4f2708":"markdown","be405c21":"markdown","c157754d":"markdown","290809a8":"markdown","9e9b7cd0":"markdown","f16b03b9":"markdown","5225bd39":"markdown","1e9cb9bd":"markdown","2beede0b":"markdown","10deedb5":"markdown","9509ba29":"markdown","498069bf":"markdown","926710e9":"markdown","6b1def25":"markdown","9642456f":"markdown","823b8114":"markdown","f684bd24":"markdown"},"source":{"505e850a":"import gc\nimport os\nimport logging\nimport datetime\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport lightgbm as lgb\nfrom tqdm import tqdm_notebook\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.model_selection import StratifiedKFold\nfrom scipy import signal\nfrom sklearn.decomposition import FastICA, PCA\nwarnings.filterwarnings('ignore')","706db14a":"IS_LOCAL = False\nif(IS_LOCAL):\n    PATH=\"..\/input\/dont-overfit-2\/\"\nelse:\n    PATH=\"..\/input\/\"\nos.listdir(PATH)","d35f1c7c":"%%time\ntrain_df = pd.read_csv(os.path.join(PATH,\"train.csv\"))\ntest_df = pd.read_csv(os.path.join(PATH,\"test.csv\"))","24a09d08":"train_df.shape, test_df.shape","dcc0c67b":"train_df.head()","8c7630f5":"test_df.head()","433b9108":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","802baae0":"%%time\nmissing_data(train_df)","10fb50de":"%%time\nmissing_data(test_df)","6b8b1f8f":"%%time\ntrain_df.describe()","a47f0e31":"%time\ntest_df.describe()","e81b8747":"sns.countplot(train_df['target'])","fdb0e528":"print(\"There are {}% target values with 1\".format(100 * train_df[\"target\"].value_counts()[1]\/train_df.shape[0]))","8a2b129c":"t0 = train_df.loc[train_df['target'] == 0, train_df.columns.values[2:302]]\nt1 = train_df.loc[train_df['target'] == 1, train_df.columns.values[2:302]]\nplt.subplots(1,1,figsize=(20, 7.2))\nplt.title(\"Values in training set for target = 0\")\nsns.heatmap(t0, cmap=\"Spectral\")\nplt.show()","d5c77d3c":"plt.subplots(1,1,figsize=(20, 12.8))\nplt.title(\"Values in training set for target = 1\")\nsns.heatmap(t1, cmap='Spectral')\nplt.show()","a8000288":"def plot_feature_distribution(df1, df2, label1, label2, features):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    fig, ax = plt.subplots(10,10,figsize=(18,22))\n\n    for feature in features:\n        i += 1\n        plt.subplot(10,10,i)\n        sns.kdeplot(df1[feature], bw=0.5,label=label1)\n        sns.kdeplot(df2[feature], bw=0.5,label=label2)\n        plt.xlabel(feature, fontsize=9)\n        locs, labels = plt.xticks()\n        plt.tick_params(axis='x', which='major', labelsize=6, pad=-6)\n        plt.tick_params(axis='y', which='major', labelsize=6)\n    plt.show();","6ba670e3":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nfeatures = train_df.columns.values[2:102]\nplot_feature_distribution(t0, t1, '0', '1', features)","36552356":"features = train_df.columns.values[102:202]\nplot_feature_distribution(t0, t1, '0', '1', features)","3d62a5a5":"features = train_df.columns.values[202:302]\nplot_feature_distribution(t0, t1, '0', '1', features)","ecea69e6":"features = train_df.columns.values[2:102]\nplot_feature_distribution(train_df, test_df, 'train', 'test', features)","e8648c72":"features = train_df.columns.values[102:202]\nplot_feature_distribution(train_df, test_df, 'train', 'test', features)","b8e706ae":"features = train_df.columns.values[202:302]\nplot_feature_distribution(train_df, test_df, 'train', 'test', features)","6ca1f1c2":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:302]\nplt.title(\"Distribution of mean values per row in the train and test set\")\nsns.distplot(train_df[features].mean(axis=1),color=\"green\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].mean(axis=1),color=\"blue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","777b1a49":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of mean values per column in the train and test set\")\nsns.distplot(train_df[features].mean(axis=0),color=\"magenta\",kde=True,bins=120, label='train')\nsns.distplot(test_df[features].mean(axis=0),color=\"darkblue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","af5345e1":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of std values per row in the train and test set\")\nsns.distplot(train_df[features].std(axis=1),color=\"black\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].std(axis=1),color=\"red\", kde=True,bins=120, label='test')\nplt.legend();plt.show()","959e5039":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of std values per column in the train and test set\")\nsns.distplot(train_df[features].std(axis=0),color=\"blue\",kde=True,bins=120, label='train')\nsns.distplot(test_df[features].std(axis=0),color=\"green\", kde=True,bins=120, label='test')\nplt.legend(); plt.show()","39535139":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of mean values per row in the train set\")\nsns.distplot(t0[features].mean(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].mean(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","48d7005c":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of mean values per column in the train set\")\nsns.distplot(t0[features].mean(axis=0),color=\"green\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].mean(axis=0),color=\"darkblue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","f66ae1b5":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:302]\nplt.title(\"Distribution of min values per row in the train and test set\")\nsns.distplot(train_df[features].min(axis=1),color=\"red\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].min(axis=1),color=\"orange\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","98347c73":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:302]\nplt.title(\"Distribution of min values per column in the train and test set\")\nsns.distplot(train_df[features].min(axis=0),color=\"magenta\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].min(axis=0),color=\"darkblue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","71fd7941":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:302]\nplt.title(\"Distribution of max values per row in the train and test set\")\nsns.distplot(train_df[features].max(axis=1),color=\"brown\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].max(axis=1),color=\"lightblue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","df4f98ba":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:302]\nplt.title(\"Distribution of max values per column in the train and test set\")\nsns.distplot(train_df[features].max(axis=0),color=\"blue\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].max(axis=0),color=\"red\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","36736045":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of min values per row in the train set\")\nsns.distplot(t0[features].min(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].min(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","3f56f372":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of min values per column in the train set\")\nsns.distplot(t0[features].min(axis=0),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].min(axis=0),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","45b148f9":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of max values per row in the train set\")\nsns.distplot(t0[features].max(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].max(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","257096c5":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of max values per column in the train set\")\nsns.distplot(t0[features].max(axis=0),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].max(axis=0),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","d6842af2":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:302]\nplt.title(\"Distribution of skew per row in the train and test set\")\nsns.distplot(train_df[features].skew(axis=1),color=\"red\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].skew(axis=1),color=\"orange\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","6df9cedc":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:302]\nplt.title(\"Distribution of skew per column in the train and test set\")\nsns.distplot(train_df[features].skew(axis=0),color=\"magenta\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].skew(axis=0),color=\"darkblue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","4c338afb":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:302]\nplt.title(\"Distribution of kurtosis per row in the train and test set\")\nsns.distplot(train_df[features].kurtosis(axis=1),color=\"darkblue\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].kurtosis(axis=1),color=\"yellow\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","cbdca02c":"plt.figure(figsize=(16,6))\nfeatures = train_df.columns.values[2:302]\nplt.title(\"Distribution of kurtosis per column in the train and test set\")\nsns.distplot(train_df[features].kurtosis(axis=0),color=\"magenta\", kde=True,bins=120, label='train')\nsns.distplot(test_df[features].kurtosis(axis=0),color=\"green\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","69c85e11":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of skew values per row in the train set\")\nsns.distplot(t0[features].skew(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].skew(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","be0616d3":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of skew values per column in the train set\")\nsns.distplot(t0[features].skew(axis=0),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].skew(axis=0),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","aff674d2":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of kurtosis values per row in the train set\")\nsns.distplot(t0[features].kurtosis(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].kurtosis(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","d0d7aae6":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of kurtosis values per column in the train set\")\nsns.distplot(t0[features].kurtosis(axis=0),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[features].kurtosis(axis=0),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","8283cf24":"%%time\ncorrelations = train_df[features].corr().abs().unstack().sort_values(kind=\"quicksort\").reset_index()\ncorrelations = correlations[correlations['level_0'] != correlations['level_1']]\ncorrelations.head(10)","b89dbf84":"correlations.tail(10)","fd7d54c4":"correlations.head(10)","0d314901":"%%time\nfeatures = [c for c in train_df.columns if c not in ['id', 'target']]\nfor df in [test_df, train_df]:\n    df['sum'] = df[features].sum(axis=1)  \n    df['min'] = df[features].min(axis=1)\n    df['max'] = df[features].max(axis=1)\n    df['mean'] = df[features].mean(axis=1)\n    df['std'] = df[features].std(axis=1)\n    df['skew'] = df[features].skew(axis=1)\n    df['kurt'] = df[features].kurtosis(axis=1)\n    df['med'] = df[features].median(axis=1)","cf95530a":"train_df[train_df.columns[302:]].head()","7752af88":"test_df[test_df.columns[301:]].head()","b546acee":"def plot_new_feature_distribution(df1, df2, label1, label2, features):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    fig, ax = plt.subplots(2,4,figsize=(18,8))\n\n    for feature in features:\n        i += 1\n        plt.subplot(2,4,i)\n        sns.kdeplot(df1[feature], bw=0.5,label=label1)\n        sns.kdeplot(df2[feature], bw=0.5,label=label2)\n        plt.xlabel(feature, fontsize=11)\n        locs, labels = plt.xticks()\n        plt.tick_params(axis='x', which='major', labelsize=8)\n        plt.tick_params(axis='y', which='major', labelsize=8)\n    plt.show();","22e4863d":"t0 = train_df.loc[train_df['target'] == 0]\nt1 = train_df.loc[train_df['target'] == 1]\nfeatures = train_df.columns.values[302:]\nplot_new_feature_distribution(t0, t1, 'target: 0', 'target: 1', features)","0e1bd10d":"features = train_df.columns.values[302:]\nplot_new_feature_distribution(train_df, test_df, 'train', 'test', features)","00452267":"print('Train and test columns: {} {}'.format(len(train_df.columns), len(test_df.columns)))","267aa222":"def apply_noise(data, noise_level):\n    idxt = data[['id', 'target']]\n    features = data.columns.values[2:]\n    appended_data = []\n    for feature in features:\n        signal = data[feature]\n        noise_factor = (np.abs(signal)).mean() * noise_level\n        noise =  np.random.normal(0, noise_level, signal.shape)\n        jittered = signal + noise\n        appended_data.append(pd.DataFrame(jittered))\n    appended_data = pd.concat(appended_data, axis=1)\n    data_jittered = pd.concat([idxt, pd.DataFrame(appended_data)], axis=1)\n    return data_jittered","17ad5a74":"noise_train_df = []\nfor i in tqdm_notebook(range(0,2)):\n    t = apply_noise(train_df, noise_level = i * 0.025)\n    noise_train_df.append(t)\nnoise_train_df = pd.concat(noise_train_df, axis = 0)","d998a302":"print(\"Shape train with additional rows with noise added:\",noise_train_df.shape)\ntrain_df = noise_train_df","86bf3e29":"features = [c for c in train_df.columns if c not in ['id', 'target']]\n#using https:\/\/www.kaggle.com\/alexandregeorges\/glmnet-train-rfe-boruta-cv ?\n#features = ['33', '65', '217', '91', '199', '69', '82', '117', '73', '295',\n#           '130', '108', '258', '18', '189', '194', '43', '145', '80','24', \n#           '56', '214', '268', 'max', 'min', 'std', 'mean', 'skew','kurt' ]\ntarget = train_df['target']","228bf8b7":"len(features)","1036a7b0":"param = {\n    'bagging_freq': 5,\n    'bagging_fraction': 0.83,\n    'boost_from_average':'false',\n    'boost': 'gbdt',\n    'feature_fraction': 0.81,\n    'learning_rate': 0.005,\n    'max_depth': -1,  \n    'metric':'auc',\n    'min_data_in_leaf': 90,\n    'min_sum_hessian_in_leaf': 10.0,\n    'num_leaves': 11,\n    'num_threads': 8,\n    'tree_learner': 'serial',\n    'objective': 'binary', \n    'verbosity': 1\n}","f2421c44":"folds = StratifiedKFold(n_splits=9, shuffle=True, random_state=4422)\noof = np.zeros(len(train_df))\npredictions = np.zeros(len(test_df))\nfeature_importance_df = pd.DataFrame()\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train_df.values, target.values)):\n    print(\"Fold {}\".format(fold_))\n    trn_data = lgb.Dataset(train_df.iloc[trn_idx][features], label=target.iloc[trn_idx])\n    val_data = lgb.Dataset(train_df.iloc[val_idx][features], label=target.iloc[val_idx])\n\n    num_round = 100000\n    clf = lgb.train(param, trn_data, \n                    num_round, \n                    valid_sets = [trn_data, val_data], \n                    verbose_eval=400, \n                    early_stopping_rounds = 400)\n    oof[val_idx] = clf.predict(train_df.iloc[val_idx][features], num_iteration=clf.best_iteration)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = features\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    predictions += clf.predict(test_df[features], num_iteration=clf.best_iteration) \/ folds.n_splits\n\nprint(\"CV score: {:<8.5f}\".format(roc_auc_score(target, oof)))","3798509a":"def plot_feature_importance():\n    cols = (feature_importance_df[[\"Feature\", \"importance\"]]\n            .groupby(\"Feature\")\n            .mean()\n            .sort_values(by=\"importance\", ascending=False)[:50].index)\n    best_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]\n    plt.figure(figsize=(12,10))\n    sns.barplot(x=\"importance\", y=\"Feature\", data=best_features.sort_values(by=\"importance\",ascending=False))\n    plt.title('Features importance (averaged\/folds)')\n    plt.tight_layout()\n    plt.savefig('FI.png')\nplot_feature_importance()","bece8903":"sub_df = pd.DataFrame({\"id\":test_df[\"id\"].values})\nsub_df[\"target\"] = predictions\nsub_df.to_csv(\"submission.csv\", index=False)","d1508e20":"## <a id='42'>Add noise<\/a>  \n\nWe will add more data in the training set by injecting noise in the existing training data. This will account for a data multiplication technique and as well as a regularization technique, aiming to reduce overfitting on the existing training data.","4a0a5120":"Let's plot now the train data (all the data) using a heatmap, separatelly for target values 0 and 1.  \n","bffedcfc":"# <a id='5'>Model<\/a>  \n\nFrom the train columns list, we drop the ID and target to form the features list.","f3ac1f0e":"The correlation between the features is  small (in the range of `no correlation` for the best correlated features. \n\n","0886c280":"We show here the distribution of min values per columns in train set.","8c133abb":"Let's check the distribution of **target** value in train dataset.","1aaeff1d":"We can make few observations here:   \n\n* standard deviation is very close to 1 for all features, in both train and test set;  \n* all features are approximately centered to 0, with mean values close to 0;  \n* min and max absolute values for features in train data looks to be smaller than the ones for the test data;  \n* mean value for target variable is 0.64 which will imply that 64% of target values are 1.\n\n","2e769f4e":"# <a id='3'>Data exploration<\/a>  \n\n## <a id='31'>Check the data<\/a>  \n\nLet's check the train and test set.","ad9caf08":"The next 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","0d1218e8":"Only **id** is an integer, **target** and the 300 features are float64. There are no missing data.\n\nHere we check test dataset.","b2502ec1":"We can observe a relative good separation between the two distributions.\n","e5269f55":"Mean values per row for test data are close to a normal distribution while the mean values per row for train data shows multiple peak values. Most of the values are  between +\/- 0.1.\n\nLet's check the distribution of the mean values per columns in the train and test set.","43f09496":"We can observe that most of features present significant different distribution for the two target values.  \n\nAlso some features, like **77**, **95**, **147** shows a distribution that resambles to a bivariate distribution.\n\n\nLe't s now look to the distribution of the same features in parallel in train and test datasets. \n\nThe first 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","3a9a6c2c":"Both distribution shows a long queue toward larger values, with test extended more, up to 5.5., while train has values as large as 4.5.   \n\nLet's show now the max distribution on columns for train and test set.","602ab86e":"## <a id='34'>Distribution of min and max<\/a>  \n\nLet's check the distribution of min per row in the train and test set.","4191e818":"<h1><center><font size=\"6\">Overfitting the private leaderboard<\/font><\/center><\/h1>\n\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1500\/1*_7OPgojau8hkiPUiHoGK_w.png\" align=\"center\" width=800\/>\n<br>\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Prepare the data analysis<\/a>  \n- <a href='#3'>Data exploration<\/a>   \n - <a href='#31'>Check the data<\/a>   \n - <a href='#32'>Density plots of features<\/a>   \n - <a href='#33'>Distribution of mean and std<\/a>   \n  - <a href='#34'>Distribution of min and max<\/a>   \n - <a href='#35'>Distribution of skew and kurtosis<\/a>     \n - <a href='#36'>Features correlations<\/a>   \n- <a href='#4'>Feature engineering<\/a>  \n - <a href='#41'>Add features by aggregation<\/a>  \n - <a href='#42'>Add noise<\/a>  \n- <a href='#5'>Model<\/a>\n- <a href='#6'>Submission<\/a>  \n- <a href='#7'>References<\/a>","099ed21a":"# <a id='1'>Introduction<\/a>  \n\nIn this challenge, Kagglers are invited to not overfit. \n\nTrain data has 250 rows, test data has 20,000 rows.\n\nThere are 300 features.\n\nThis Kernel will start by exploring the data and check what engineered features will improve the model (well, reduce the overfitting).\n\n","3d708a08":"## <a id='35'>Distribution of skew and kurtosis<\/a>  \n\nLet's see now what is the distribution of skew values per rows and columns.\n\nLet's see first the distribution of skewness calculated per rows in train and test sets.\n\n","088849d9":"We define the hyperparameters for the model.","7f3f1fdf":"Let's show also the distribution of max values per columns in the train set.","3a20a28c":"# <a id='6'>Submission<\/a>  \n\nWe submit the solution.","94ba9c09":"Let's load the train and test data files.","5e31e439":"The next 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","1cafade3":"The two distributions are neatly separated.  \n\n\nLet's  show now the distributions of min values per row in train set, separated on the values of target (0 and 1).","fdd8e3c3":"\nA long queue to the lower values for both, extended as long as to -5.5 for test set, is observed.\n\nLet's now show the distribution of min per column in the train and test set.","67d887e5":"Standard deviation values per columns in train dataset are between 0.9 and 1.1 while in test dataset are much smaller, confined between 0.99 and 1.01.\n\nLet's check now the distribution of the mean value per row in the train dataset, grouped by value of target.","49e2c530":"Let's check the feature importance.","5f4d2a50":"Train contains:  \n\n* **id** (string);  \n* **target**;  \n* **300** numerical variables, named from **0** to **299**;\n\nTest contains:  \n\n* **id* (string);  \n* **300** numerical variables, named from **0** to **299**;\n\n\nLet's check if there are any missing data. We will also chech the type of data.\n\nWe check first train.","ecccfba8":"Let's check how many features we have now.","1fe0d5ea":"\nLet's see first the distribution of kurtosis calculated per columns in train and test sets.","40dd4b46":"Let's show the distribution of new features values for train and test.","02c98515":"## <a id='41'>Add features by aggregation<\/a> \n\nWe define several features obtained by applying aggregation functions.","5f48b123":"The distribution of min values per columns (i.e. per variables) is quite notably different for train and test set.\n\n\nLet's check now the distribution of max values per rows for train and test set.","37627ced":"The next 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","923b1fc1":"Let's see now what is the distribution of kurtosis values per rows and columns.\n\nLet's see first the distribution of kurtosis calculated per rows in train and test sets.","822cba4d":"## Load data   \n\nLet's check what data files are available.","4770c494":"Let's see first the distribution of skewness calculated per columns in train and test set.","dd92a86d":"Let's see now the distribution of kurtosis on rows in train separated for values of target 0 and 1.","d0d00ecd":"Let's see now the distribution of skewness on rows in train separated for values of target 0 and 1.","09b918db":"# <a id='2'>Prepare for data analysis<\/a>  \n\n\n## Load packages\n","fe4568bc":"The next 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","7bae67d2":"We can observe a relative good separation between the two distributions, with the values for **target = 0** with lower peaks and with a longer queue toward larger values (up to close to -1), while the mins for **target = 1** are extended only until -1.5.\n\nLet's show now the distribution of max values per rown in the train set.","2b83cb1e":"Let's see now the distribution of skewness on columns in train separated for values of target 0 and 1.","dc4f2708":"# <a id='7'>References<\/a>    \n\n[1] https:\/\/www.kaggle.com\/gpreda\/elo-world-high-score-without-blending  \n[2] https:\/\/www.kaggle.com\/chocozzz\/santander-lightgbm-baseline-lb-0-897   \n[3] https:\/\/www.kaggle.com\/gpreda\/santander-eda-and-prediction   \n\n","be405c21":"Let's look to the top most correlated features, besides the same feature pairs.","c157754d":"The average standard deviation per rows is 1 and most of values are between 1 +\/- 0.1.\n\nLet's check the distribution of the standard deviation of values per columns in the train and test datasets.","290809a8":"There are no missing data either in test data. The data types are similar with the ones in train.   \n\nLet's see the distribution of train and test numerical data, using `describe`.","9e9b7cd0":"The first 100 values are displayed in the following cell. Press <font color='red'>**Output**<\/font> to display the plots.","f16b03b9":"The train and test seems to be well ballanced with respect of  distribution of the numeric variables for most of the features.   \n\nThere are few features that shows some differences in distribution between train and test, for example: **2**, **8**, **12**, **16**, **37**, **72**, **84**, **100**, **103**, **104**, **123**, **144**, **155**, **181**, **202**, **203**, **204**, **229**, **241**, **264**, **288**.\n\n\n## <a id='33'>Distribution of mean and std<\/a>  \n\nLet's check the distribution of the mean values per row in the train and test set.","5225bd39":"Let's check now the distribution of the mean value per column in the train dataset, grouped by value of target.","1e9cb9bd":"We run the model.","2beede0b":"\n## <a id='32'>Density plots of features<\/a>  \n\nLet's show now the density plot of variables in train dataset. \n\nWe represent with different colors the distribution for values with **target** value **0** and **1**.","10deedb5":"## <a id='36'>Features correlation<\/a>  \n\nWe calculate now the correlations between the features in train set.  \nThe following table shows the first 10 the least correlated features.","9509ba29":"Let's check the distribution of these new, engineered features.  \n\nWe plot first the distribution of new features, grouped by value of corresponding `target` values.","498069bf":"# <a id='4'>Feature engineering<\/a>  \n\n\nLet's calculate for starting few aggregated values for the existing features.","926710e9":"These are the values that we already observed earlier that are mostly centered around 0. We can see that train is actually showing a larger spread of these values, while test values have a smaller deviation and a distribution closer to a normal one.\n\nLet's show the distribution of standard deviation of values per row for train and test datasets.","6b1def25":"Let's check the new created features.","9642456f":"Let's see also the least correlated features.","823b8114":"Let's see now the distribution of kurtosis on columns in train separated for values of target 0 and 1.","f684bd24":"Train has only 250 rows and has also 302 columns, test has 19,750 rows and 301 columns.  \n\nLet's glimpse train and test dataset."}}