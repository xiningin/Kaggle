{"cell_type":{"1a0f8ff6":"code","ce01e600":"code","db718ba6":"code","6dfe979e":"code","619c01d1":"code","4a9cee38":"code","2baaaf3e":"code","e9d585d0":"code","417952f6":"code","ae971811":"code","e41611e0":"code","fe5ce19c":"code","e57cda1e":"code","e91b60db":"code","5ca96205":"code","2d75e446":"code","f1b21405":"code","f96702e3":"code","6a0bdcde":"code","5599e39a":"code","cc8ae645":"code","1a571256":"code","bd4c85f0":"markdown","2ae944da":"markdown","dfac9272":"markdown","399f82ae":"markdown","6f9f5fcb":"markdown","975e8a34":"markdown","68b7229c":"markdown","cd75babb":"markdown"},"source":{"1a0f8ff6":"import numpy as np\nimport pandas as pd \nimport tensorflow as tf\n\nimport matplotlib.pyplot as plt\nimport random\nimport os\nprint(os.listdir(\"..\/input\/dogs-vs-cats\/\"))","ce01e600":"%%time\nimport zipfile\nwith zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/train.zip\",'r') as z:\n    z.extractall(\".\")\nwith zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/test1.zip\",'r') as z:\n    z.extractall(\".\")","db718ba6":"FAST_RUN = True\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","6dfe979e":"from keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split","619c01d1":"filenames = os.listdir(\"\/kaggle\/working\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    categories.append(category)\n\nfiles_df = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","4a9cee38":"train_df, validate_df = train_test_split(files_df, \n                                         test_size=0.20,                                         \n                                         random_state=0)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","2baaaf3e":"total_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]\nbatch_size=15","e9d585d0":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","417952f6":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(validate_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","ae971811":"from keras.models import Sequential\nfrom keras.applications import VGG16\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization, GlobalAveragePooling2D","e41611e0":"def create_model():        \n    \n    model = Sequential()\n    model.add(Conv2D(32, (3, 3), \n                     activation='relu',\n                     input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\n    \n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Conv2D(60, (3, 3), activation='relu',strides=2))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Flatten())\n    \n    model.add(Dense(100, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n    \n    model.add(Dense(2, activation='sigmoid'))\n    \n    model.compile(loss='categorical_crossentropy', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    #model.summary()\n    return model","fe5ce19c":"def createVGG16model():\n    pretrained_model = VGG16(weights='imagenet', include_top=False ,input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS))\n    pretrained_model.trainable = False \n    \n    model = Sequential([pretrained_model,\n                        GlobalAveragePooling2D(),\n                        Dense(2, activation='softmax')])\n\n    model.compile(optimizer='adam',\n                    loss = 'categorical_crossentropy',\n                    metrics=['accuracy'])\n\n    return model","e57cda1e":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau\nearlystop = EarlyStopping(patience=10)\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n\ncallbacks = [earlystop, learning_rate_reduction]","e91b60db":"%%time\nif FAST_RUN :\n    epochs = 3\nelse:\n    epochs = 30\n\n#with strategy.scope():\nwith tf.device(\"\/gpu:0\"):   \n    #model = createVGG16model()\n    model = create_model()\n    history = model.fit(train_generator, \n                        epochs=epochs,\n                        validation_data=validation_generator,\n                        validation_steps=1,\n                        steps_per_epoch=total_train\/\/batch_size,\n                        callbacks=callbacks)\n\nmodel.save_weights(\"model.h5\")","5ca96205":"import seaborn as sns\nhis_dict = history.history\nfig = plt.figure(figsize=(12, 15))\nx_range = range(len(history.history['loss']))\nsns.set_style('darkgrid')\n\nfig.add_subplot(2,1,1)\nsns.lineplot(x=x_range , y=his_dict[\"val_loss\"],label='Validation Loss')\nsns.lineplot(x=x_range , y=his_dict[\"loss\"],label='Training Loss')\n\nfig.add_subplot(2,1,2)\nsns.lineplot(x=x_range , y=his_dict[\"val_accuracy\"],label='Validation Accuracy')\nsns.lineplot(x=x_range , y=his_dict[\"accuracy\"],label='Training Accuracy')","2d75e446":"test_filenames = os.listdir(\"\/kaggle\/working\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nidlist=[]\nfor file in test_df[\"filename\"]:\n    idlist.append(file.split(\".\")[0])\n\n#test_df['ids'] = alist\nnb_samples = test_df.shape[0]","f1b21405":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"\/kaggle\/working\/test1\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=IMAGE_SIZE,\n    batch_size=batch_size,\n    shuffle=False\n)","f96702e3":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","6a0bdcde":"test_df['category'] = np.argmax(predict, axis=-1)","5599e39a":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","cc8ae645":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","1a571256":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","bd4c85f0":"## Preprocessing Data","2ae944da":"## Output Graph","dfac9272":"## Creating CNN Model","399f82ae":"## Predictions","6f9f5fcb":"## Fitting the Model","975e8a34":"### Callbacks","68b7229c":"## Preparing Image Data","cd75babb":"## Submission"}}