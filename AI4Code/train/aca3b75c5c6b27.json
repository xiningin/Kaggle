{"cell_type":{"60351783":"code","cebee5f3":"code","bb862343":"code","18ec8c27":"code","964a7a2b":"code","5bf5c2fc":"code","1d7a6f44":"code","81388c9f":"code","2ad6d915":"code","e66d0788":"code","a0a69cbc":"code","055b6535":"code","bce9152f":"code","2657c9bd":"code","9e88c119":"code","69f1c9b1":"code","d462ddd5":"code","a38c5c59":"code","79eace5c":"code","377a87c1":"code","13a43a1a":"code","d1efdf92":"code","45e804bc":"code","8ced706c":"markdown","2aeb93de":"markdown","2f56c5f5":"markdown","fa82636f":"markdown","03c2cc5a":"markdown","acf55c68":"markdown","337ca963":"markdown","ced8f9b3":"markdown","589db604":"markdown","535359ba":"markdown","8340de4e":"markdown","6d251d33":"markdown","b2156b62":"markdown","9295b028":"markdown","e68c9a91":"markdown","213fba63":"markdown","317cff63":"markdown","d2e80745":"markdown","76e88ca3":"markdown","d9d8942d":"markdown","06ae3b75":"markdown","942ab8c7":"markdown","71e63fed":"markdown","88739671":"markdown","bdeaa95f":"markdown","56f6a82f":"markdown","309fdea9":"markdown","ba663ebb":"markdown","76ffe713":"markdown","b43e4412":"markdown","2dab8376":"markdown"},"source":{"60351783":"import PIL, os, cv2\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import confusion_matrix, classification_report","cebee5f3":"def get_data(dir_path):\n    x, y = [], []\n    category = {\"Non Mask\":0,\"Mask\":1}\n    folders = os.listdir(dir_path)\n    for folder in folders:\n        folder_path = os.path.join(dir_path,folder)\n        files = os.listdir(folder_path)\n        for file in files:\n            file_path = os.path.join(folder_path,file)\n            x.append(cv2.resize(cv2.imread(file_path),(224,224)))\n            y.append(category[folder])\n        print(folder,\"Folder Done\")\n    x = np.array(x)\n    y = np.array(y)\n    x,y = shuffle(x,y)\n    x = x \/ 255\n    print(\"Shuffle and feature scaling Done\")\n    print(\"X Shape :\",x.shape)\n    print('Y Shape :',y.shape)\n    print(\"Unique Categories :\",np.unique(y,return_counts=True)[0])\n    print(\"Unique Categories counts :\",np.unique(y,return_counts=True)[1])\n    return x, y","bb862343":"xtrain, ytrain = get_data('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Train')","18ec8c27":"xvalid, yvalid = get_data('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Validation')","964a7a2b":"xtest, ytest = get_data('..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset\/Test')","5bf5c2fc":"cnn = keras.Sequential(\n    \n                            [\n                                \n                                # Input\n                                keras.layers.Input(shape=(224,224,3)),\n                                \n                                # CNN\n                                keras.layers.Conv2D(200,(3,3),padding='same',activation='relu'),\n                                keras.layers.Dropout(0.75),\n                                keras.layers.MaxPool2D((2,2),padding='valid'),\n                                keras.layers.Conv2D(200,(3,3),padding='same',activation='relu'),\n                                keras.layers.Dropout(0.50),\n                                keras.layers.MaxPool2D((2,2),padding='valid'),\n                                keras.layers.Conv2D(200,(3,3),padding='same',activation='relu'),\n                                keras.layers.Dropout(0.25),\n                                keras.layers.MaxPool2D((2,2),padding='valid'),\n                                keras.layers.Conv2D(200,(3,3),padding='same',activation='relu'),\n                                keras.layers.MaxPool2D((2,2),padding='valid'),\n                                \n                                # Flatten\n                                keras.layers.Flatten(),\n                                \n                                # Dense\n                                keras.layers.Dense(100,activation='relu'),\n                                keras.layers.Dense(50,activation='relu'),\n                                keras.layers.Dense(10,activation='relu'),\n                                \n                                # Output\n                                keras.layers.Dense(1,activation='sigmoid'),\n                                \n                            ]\n    \n                        )\n\ncnn.summary()","1d7a6f44":"keras.utils.plot_model(cnn)","81388c9f":"cnn.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\ntraining = cnn.fit(xtrain,ytrain,batch_size=10,validation_data=(xvalid,yvalid),epochs=10)","2ad6d915":"training_history = pd.DataFrame(training.history)\ntraining_history","e66d0788":"fig = px.line(training_history[['loss','val_loss']],labels={'value':'<-- Loss','index':'Epochs -->'})\nfig.update_layout(title={'text':'Loss Per Epochs','font_size':23,'font_color':'orange','font_family':'Georgia','x':0.5})\nfig.show()\nfig = px.line(training_history[['accuracy','val_accuracy']],labels={'value':'Accuracy -->','index':'Epochs -->'})\nfig.update_layout(title={'text':'Accuracy Per Epochs','font_size':23,'font_color':'orange','font_family':'Georgia','x':0.5})\nfig.show()","a0a69cbc":"ypred = []\nfor pred in cnn.predict(xtest):\n    if pred > 0.5 :\n        ypred.append(1)\n    else : \n        ypred.append(0)\nypred = np.array(ypred)\nprint('\\n\\nConfusion Matrix : \\n\\n',confusion_matrix(ytest,ypred))\nprint('\\n\\nClassification Report : \\n\\n',classification_report(ytest,ypred))","055b6535":"transfer = keras.applications.ResNet152V2()\nfor layer in transfer.layers:\n    layer.trainable = False\ninp = transfer.layers[0].input\nout = transfer.layers[-2].output\nout = keras.layers.Dense(50,activation='relu')(out)\nout = keras.layers.Dense(25,activation='relu')(out)\nout = keras.layers.Dense(10,activation='relu')(out)\nout = keras.layers.Dense(5,activation='relu')(out)\nout = keras.layers.Dense(1,activation='sigmoid')(out)\ntransfer = keras.Model(inputs=inp,outputs=out)\ntransfer.summary()","bce9152f":"keras.utils.plot_model(transfer)","2657c9bd":"transfer.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\ntraining = transfer.fit(xtrain,ytrain,batch_size=10,validation_data=(xvalid,yvalid),epochs=10)","9e88c119":"training_history = pd.DataFrame(training.history)\ntraining_history","69f1c9b1":"fig = px.line(training_history[['loss','val_loss']],labels={'value':'<-- Loss','index':'Epochs -->'})\nfig.update_layout(title={'text':'Loss Per Epochs','font_size':23,'font_color':'orange','font_family':'Georgia','x':0.5})\nfig.show()\nfig = px.line(training_history[['accuracy','val_accuracy']],labels={'value':'Accuracy -->','index':'Epochs -->'})\nfig.update_layout(title={'text':'Accuracy Per Epochs','font_size':23,'font_color':'orange','font_family':'Georgia','x':0.5})\nfig.show()","d462ddd5":"ypred = []\nfor pred in transfer.predict(xtest):\n    if pred > 0.5 :\n        ypred.append(1)\n    else : \n        ypred.append(0)\nypred = np.array(ypred)\nprint('\\n\\nConfusion Matrix : \\n\\n',confusion_matrix(ytest,ypred))\nprint('\\n\\nClassification Report : \\n\\n',classification_report(ytest,ypred))","a38c5c59":"transfer.save('covid_mask_detection_model.h5')","79eace5c":"model = keras.models.load_model('.\/covid_mask_detection_model.h5')","377a87c1":"def predict(img):\n    if type(img) == str:\n        img = cv2.imread(img)\n    img = cv2.resize(img,(224,224))\n    img = img \/ 255\n    if model.predict(np.array([img]))[0] > 0.5:\n        predict = 1 # Mask Recognized\n    else:\n        predict = 0 # Mask not Recognized\n    return predict","13a43a1a":"def view_prediction(img):\n    if type(img) == str:\n        img = cv2.imread(img)\n    img = cv2.resize(img,(480,640))\n    if predict(img) == 1:\n        img = cv2.rectangle(img,(0,0),(640,50),(242,221,203),-1)\n        img = cv2.putText(img,\"Mask Detected\",(30,30),cv2.FONT_HERSHEY_COMPLEX,0.75,(255,61,142),2)\n    else:\n        img = cv2.rectangle(img,(0,0),(640,50),(186,186,245),-1)\n        img = cv2.putText(img,\"Mask not Detected\",(30,30),cv2.FONT_HERSHEY_COMPLEX,0.75,(56,56,255),2)\n    img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    return PIL.Image.fromarray(img)","d1efdf92":"view_prediction('..\/input\/sample-image\/image1.jpeg')","45e804bc":"view_prediction('..\/input\/sample-image\/image2.jpeg')","8ced706c":"#### **Importing all necessary libraries**","2aeb93de":"#### **So by overall analysis, Resnet152V2 model is 100% perfectly able to detect that a person wear face masks or not. So, I concluded this model as the best Model for any face masks detection System in industry.**","2f56c5f5":"#### **Train the Model**","fa82636f":"#### **Define a function that load and preprocess data from directory.**","03c2cc5a":"#### **Sample Prediction 1**","acf55c68":"#### **Define a function that predict and return prediction**","337ca963":"# <center> **Face Mask Detection**","ced8f9b3":"***","589db604":">","535359ba":"#### **Visualizing Training History**","8340de4e":"# <center> **Thank You**","6d251d33":"#### **Save the Model**","b2156b62":"#### **Load and preprocess Validation Dataset**","9295b028":"#### **Define a function that return Image with Prediction**","e68c9a91":"#### **Analysing Model performence on Test Data**","213fba63":"#### **Load and preprocess Test Dataset**","317cff63":"#### **Developing a Convolution Neural Network model**","d2e80745":"#### **Visualize Training History**","76e88ca3":"#### **Load and preprocess Train Dataset**","d9d8942d":"## **AIM : Developing a model that can detect if a person wear face masks or not.**","06ae3b75":"#### **Training History**","942ab8c7":"## **Transfer Learning using ResNet152V2**","71e63fed":"#### **Sample Prediction 2**","88739671":"#### **Visualize the Model**","bdeaa95f":"## **Deep Learning using CNN**","56f6a82f":"#### **Analysing Model performence on Test Data**","309fdea9":"#### **Train the Model**","ba663ebb":"#### **Load and structuring ResNet152V2 Model from Keras applications**","76ffe713":"#### **Visualize the Model**","b43e4412":"#### **Training History**","2dab8376":"#### **Load the Model**"}}