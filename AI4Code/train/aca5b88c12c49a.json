{"cell_type":{"37f45de5":"code","b270350e":"code","bcf68d8a":"code","1e10a719":"code","a978c1b6":"code","a98cfb5e":"code","b80473dd":"code","3e4c9a51":"code","0b6e37b3":"code","7fcfe1d6":"code","5007728a":"code","76929e5a":"code","c18721db":"code","742daa8f":"code","4d32b9b8":"markdown","1c18b2c2":"markdown","8d4c6398":"markdown"},"source":{"37f45de5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b270350e":"import cv2\nimport numpy as np\nfrom matplotlib import pyplot as plt","bcf68d8a":"r = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nr1 = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nr = r.sum(axis=-1)","1e10a719":"def blur(r):\n    for i in range(1,r.shape[0]-1):\n        for j in range(1,r.shape[1]-1):\n            r[i,j] = (30*r[i,j] + r[i-1,j] + r[i+1,j] + r[i,j-1] + r[i,j+1])\/8.0\n    return r","a978c1b6":"%timeit blur(r)","a98cfb5e":"plt.figure(figsize=(7,7))\nplt.imshow(r1, cmap=\"gray\")\nplt.title('Original'), plt.xticks([]), plt.yticks([])\nblur(r)\nblur(r)\nblur(r)\nplt.figure(figsize=(7,7))\nplt.imshow(r, cmap=\"gray\")\nplt.title('Blured'), plt.xticks([]), plt.yticks([])","b80473dd":"import cv2\nimport numpy as np\n# Reading in and displaying our image\nimage = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\n# Create our shapening kernel, it must equal to one eventually\nkernel_sharpening = np.array([[-1,-1,-1], \n                              [-1, 9,-1],\n                              [-1,-1,-1]])\n# applying the sharpening kernel to the input image & displaying it.\nsharpened = cv2.filter2D(image, -1, kernel_sharpening)","3e4c9a51":"plt.figure(figsize=(7,7))\nplt.imshow(image)\nplt.title('Original'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(7,7))\nplt.imshow(sharpened)\nplt.title('Sharpened'), plt.xticks([]), plt.yticks([])","0b6e37b3":"img = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)","7fcfe1d6":"edgeCanny = cv2.Canny(img_gray,100,200)","5007728a":"sobelx = cv2.Sobel(img_gray,cv2.CV_64F,1,0,ksize=5)\nsobely = cv2.Sobel(img_gray,cv2.CV_64F,0,1,ksize=5)","76929e5a":"def filter2d(src, kernel):\n    m, n = kernel.shape\n\n    d = int((m-1)\/2)\n    h, w = src.shape[0], src.shape[1]\n\n    dst = np.zeros((h, w))\n\n    for y in range(d, h - d):\n        for x in range(d, w - d):\n           \n            dst[y][x] = np.sum(src[y-d:y+d+1, x-d:x+d+1]*kernel)\n\n    return dst\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nkernel = np.array([[1, 1,  1],\n                   [1, -8, 1],\n                   [1, 1,  1]])\n\ndst = filter2d(gray, kernel)","c18721db":"plt.subplot(2,2,1),plt.imshow(edgeCanny,cmap = 'gray')\nplt.title('Canny'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,2),plt.imshow(sobelx,cmap = 'gray')\nplt.title('Sobel X'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,3),plt.imshow(sobely,cmap = 'gray')\nplt.title('Sobel Y'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,4),plt.imshow(dst,cmap = 'gray')\nplt.title('Laplacian'), plt.xticks([]), plt.yticks([])\n\nplt.show()","742daa8f":"plt.imshow(gray,cmap = 'gray')\nplt.title('Original'), plt.xticks([]), plt.yticks([])\n\nplt.show()","4d32b9b8":"**======================================================================\nBlurring**","1c18b2c2":"**=====================================================================\nSharpened**","8d4c6398":"**=====================================================================\nEdge Detection**"}}