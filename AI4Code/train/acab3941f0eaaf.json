{"cell_type":{"fb4376d9":"code","8c7c5f91":"code","3db45c8b":"code","6686ab20":"code","941a7150":"code","fdcd5ba8":"code","f0cf8096":"code","decc4b8e":"code","5a41e896":"code","8f448c5a":"code","e6948cd4":"code","2e99d9f3":"code","6e6b158f":"code","b94390a4":"code","a256abee":"code","b67fd68a":"code","72cde1f9":"code","250ca14d":"code","aa10d9a5":"code","6df47ff2":"code","5cbbe6c9":"code","63f72430":"code","97ecccfa":"code","d68a1615":"code","a2a0e9bb":"code","31acdf6f":"code","9cb52e69":"code","961969b0":"code","ec35140f":"code","ccd4a086":"code","912864de":"code","20338c90":"code","a6d7377a":"markdown","1daed063":"markdown","a19ae682":"markdown","687f39d0":"markdown","c3e45763":"markdown","e64ec62e":"markdown","1a90e689":"markdown","ec171ef4":"markdown","d33199a7":"markdown","8d4b3b8a":"markdown","a17772bb":"markdown"},"source":{"fb4376d9":"import numpy as np\nimport pandas as pd\nimport os\nimport random\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import KFold\n\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\n\nfrom tqdm import tqdm\nfrom PIL import Image\nimport pydicom","8c7c5f91":"def seed_everything(seed=2020):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    \nseed_everything(42)","3db45c8b":"ROOT = \"..\/input\/osic-pulmonary-fibrosis-progression\"\nBATCH_SIZE = 128","6686ab20":"tr = pd.read_csv(f\"{ROOT}\/train.csv\")\ntr.drop_duplicates(keep=False, inplace=True, subset=['Patient','Weeks'])\nchunk = pd.read_csv(f\"{ROOT}\/test.csv\")\n\nsub = pd.read_csv(f\"{ROOT}\/sample_submission.csv\")\n\nsub['Patient'] = sub['Patient_Week'].apply(lambda x:x.split('_')[0])\nsub['Weeks'] = sub['Patient_Week'].apply(lambda x: int(x.split('_')[-1]))\n\nsub =  sub[['Patient','Weeks','Confidence','Patient_Week']]\nsub = sub.merge(chunk.drop('Weeks', axis=1), on=\"Patient\")","941a7150":"tr['WHERE'] = 'train'\nchunk['WHERE'] = 'val'\nsub['WHERE'] = 'test'\n\ndata = tr.append([chunk, sub])","fdcd5ba8":"data['min_week'] = data['Weeks']\n\ndata.loc[data.WHERE=='test','min_week'] = np.nan\n\ndata['min_week'] = data.groupby('Patient')['min_week'].transform('min')","f0cf8096":"base = data.loc[data.Weeks == data.min_week]\nbase = base[['Patient','FVC']].copy()\nbase.columns = ['Patient','min_FVC']\n\nbase['nb'] = 1\nbase['nb'] = base.groupby('Patient')['nb'].transform('cumsum')\n\nbase = base[base.nb==1]\nbase.drop('nb', axis=1, inplace=True)","decc4b8e":"data = data.merge(base, on='Patient', how='left')\ndata['base_week'] = data['Weeks'] - data['min_week']\ndel base","5a41e896":"COLS = ['Sex','SmokingStatus']\nFE = []\nfor col in COLS:\n    for mod in data[col].unique():\n        FE.append(mod)\n        data[mod] = (data[col] == mod).astype(int)","8f448c5a":"data['age'] = (data['Age'] - data['Age'].min() ) \/ ( data['Age'].max() - data['Age'].min() )\ndata['BASE'] = (data['min_FVC'] - data['min_FVC'].min() ) \/ ( data['min_FVC'].max() - data['min_FVC'].min() )\ndata['week'] = (data['base_week'] - data['base_week'].min() ) \/ ( data['base_week'].max() - data['base_week'].min() )\ndata['percent'] = (data['Percent'] - data['Percent'].min() ) \/ ( data['Percent'].max() - data['Percent'].min() )\nFE += ['age','percent','week','BASE']","e6948cd4":"tr = data.loc[data.WHERE=='train']\nchunk = data.loc[data.WHERE=='val']\nsub = data.loc[data.WHERE=='test']\ndel data","2e99d9f3":"C1, C2 = tf.constant(70, dtype='float32'), tf.constant(1000, dtype=\"float32\")\n\ndef score(y_true, y_pred):\n    tf.dtypes.cast(y_true, tf.float32)\n    tf.dtypes.cast(y_pred, tf.float32)\n    sigma = y_pred[:, 2] - y_pred[:, 0]\n    fvc_pred = y_pred[:, 1]\n    \n    sigma_clip = tf.maximum(sigma, C1)\n    delta = tf.abs(y_true[:, 0] - fvc_pred)\n    delta = tf.minimum(delta, C2)\n    sq2 = tf.sqrt( tf.dtypes.cast(2, dtype=tf.float32) )\n    metric = (delta \/ sigma_clip)*sq2 + tf.math.log(sigma_clip* sq2)\n    return K.mean(metric)\n\ndef qloss(y_true, y_pred):\n    qs = [0.2, 0.50, 0.8]\n    q = tf.constant(np.array([qs]), dtype=tf.float32)\n    e = y_true - y_pred\n    v = tf.maximum(q*e, (q-1)*e)\n    return K.mean(v)\n\n\ndef mloss(_lambda):\n    def loss(y_true, y_pred):\n        return _lambda * qloss(y_true, y_pred) + (1 - _lambda)*score(y_true, y_pred)\n    return loss","6e6b158f":"LR = 0.1\nBETA_1 = 0.9\nBETA_2 = 0.999\nDECAY = 0.01\nAMSGRAD = False","b94390a4":"# Adam_Optimized = tf.keras.optimizers.Adam(lr = LR, beta_1 = BETA_1, beta_2 = BETA_2, epsilon = None, decay = DECAY, amsgrad = AMSGRAD)","a256abee":"def make_model():\n    z = L.Input((9,), name=\"Patient\")\n    x = L.Dense(100, activation=\"relu\", name=\"d1\")(z)\n    x = L.Dense(100, activation=\"relu\", name=\"d2\")(x)\n    p1 = L.Dense(3, activation=\"linear\", name=\"p1\")(x)\n    p2 = L.Dense(3, activation=\"relu\", name=\"p2\")(x)\n    preds = L.Lambda(lambda x: x[0] + tf.cumsum(x[1], axis=1), \n                     name=\"preds\")([p1, p2])\n    \n    model = M.Model(z, preds, name=\"NN-Optimized\")\n    model.compile(loss=mloss(0.8), optimizer = tf.keras.optimizers.Adam(lr = LR, beta_1 = BETA_1, beta_2 = BETA_2, epsilon = None, decay = DECAY, amsgrad = AMSGRAD), metrics=[score])\n    return model","b67fd68a":"net = make_model()\nprint(net.summary())\nprint(net.count_params())","72cde1f9":"y = tr['FVC'].values\nz = tr[FE].values\nze = sub[FE].values\npe = np.zeros((ze.shape[0], 3))\npred = np.zeros((z.shape[0], 3))","250ca14d":"NFOLD = 10\nkf = KFold(n_splits=NFOLD)","aa10d9a5":"%%time\ncount = 0\nfor train_idx, val_idx in kf.split(z):\n    count += 1\n    print(f\"FOLD {count}:\")\n    \n    # Create and fit model\n    net = make_model()\n    net.fit(z[train_idx], y[train_idx], batch_size=BATCH_SIZE, epochs=850, \n            validation_data=(z[val_idx], y[val_idx]), verbose=0) #\n    \n    # Evaluate\n    print(\"Train:\", net.evaluate(z[train_idx], y[train_idx], verbose=0, batch_size=BATCH_SIZE))\n    print(\"Val:\", net.evaluate(z[val_idx], y[val_idx], verbose=0, batch_size=BATCH_SIZE))\n    \n    # Generate predictions\n    pred[val_idx] = net.predict(z[val_idx], batch_size=BATCH_SIZE, verbose=0)\n    print(\"Predicting Test...\")\n    pe += net.predict(ze, batch_size=BATCH_SIZE, verbose=0) \/ NFOLD","6df47ff2":"sigma_opt = mean_absolute_error(y, pred[:, 1])\nunc = pred[:,2] - pred[:, 0]\nsigma_mean = np.mean(unc)\nprint(sigma_opt, sigma_mean)","5cbbe6c9":"idxs = np.random.randint(0, y.shape[0], 100)\nplt.plot(y[idxs], label=\"ground truth\")\nplt.plot(pred[idxs, 0], label=\"q25\")\nplt.plot(pred[idxs, 1], label=\"q50\")\nplt.plot(pred[idxs, 2], label=\"q75\")\nplt.legend(loc=\"best\")\nplt.show()","63f72430":"print(unc.min(), unc.mean(), unc.max(), (unc>=0).mean())","97ecccfa":"plt.hist(unc)\nplt.title(\"uncertainty in prediction\")\nplt.show()","d68a1615":"sub.head()","a2a0e9bb":"sub['FVC1'] = pe[:, 1]\nsub['Confidence1'] = pe[:, 2] - pe[:, 0]","31acdf6f":"subm = sub[['Patient_Week','FVC','Confidence','FVC1','Confidence1']].copy()","9cb52e69":"subm.loc[~subm.FVC1.isnull()].head(10)","961969b0":"subm.loc[~subm.FVC1.isnull(),'FVC'] = subm.loc[~subm.FVC1.isnull(),'FVC1']\n\nif sigma_mean<70:\n    subm['Confidence'] = sigma_opt\nelse:\n    subm.loc[~subm.FVC1.isnull(),'Confidence'] = subm.loc[~subm.FVC1.isnull(),'Confidence1']","ec35140f":"subm.head()","ccd4a086":"subm.describe().T","912864de":"otest = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\n\nfor i in range(len(otest)):\n    subm.loc[subm['Patient_Week']==otest.Patient[i]+'_'+str(otest.Weeks[i]), 'FVC'] = otest.FVC[i]\n    subm.loc[subm['Patient_Week']==otest.Patient[i]+'_'+str(otest.Weeks[i]), 'Confidence'] = 0.1","20338c90":"subm[[\"Patient_Week\",\"FVC\",\"Confidence\"]].to_csv(\"submission.csv\", index=False)","a6d7377a":"## Feel free to suggest ideas!\n\nDo check out other kernels too! (Link in the comments)","1daed063":"# Building the Model:\n\nLet's proceed to build a basic NN:","a19ae682":"Finally, let's append this to the submission file:","687f39d0":"Let's set a seed:","c3e45763":"# Data Preprocessing:","e64ec62e":"# Creating the Submission file\n\nWe've got our predictions, but there's a whole lot of work to do for bringing it to the valid submission format.\n\nLet's start cleaning!","1a90e689":"Let's create the optimizer with our hand-picked hyperparameters:","ec171ef4":"Let's fit the model and generate predictions:","d33199a7":"Here's where the real magic happens, the hyperparameters:","8d4b3b8a":"This kernel uses 10-fold, you change the number of folds:","a17772bb":"Let's proceed to create the model:"}}