{"cell_type":{"4a6b37a7":"code","0867d88e":"code","a4429d21":"code","349ee0d4":"code","a34b6a84":"code","9d5175ca":"code","3a39f959":"code","21fd01a2":"code","28ef96d1":"code","7ef94f23":"code","f85495ef":"code","f58d0337":"code","05696ee3":"markdown","a034bba1":"markdown","8c9e2b08":"markdown","918ae72e":"markdown","24c809dd":"markdown","6f3a6dd7":"markdown","9ae2ed3b":"markdown","c934639a":"markdown","e68f0306":"markdown","78b2559d":"markdown","2f2400bd":"markdown","2e87611e":"markdown","3fea9d57":"markdown","2537e32e":"markdown"},"source":{"4a6b37a7":"# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport warnings\n\nwarnings.filterwarnings(\"ignore\") # ignore warnings\n\n# Import Kaggle Datasets\nimport os\n\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0867d88e":"# Import csv from kaggle\n# df_a == 'dataframe athletics'\nfn_a = \"..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv\"\ndf_a = pd.read_csv(fn_a)\n\n# df_a == 'dataframe locations'\nfn_l = \"..\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv\"\ndf_l = pd.read_csv(fn_l)\n\n# Combine Dataframes on 'NOC'\ndf = df_a.merge(df_l, on=\"NOC\")\ndf.head(3)\n\ndf_a.head(3)","a4429d21":"# remove na values from df\ndf = df.fillna(\"\")\n\n# extract digits only\ndf[\"Age\"] = df[\"Age\"].astype(str).str.extract(\"([0-9]+)\")\n\n# format year dtype\ndf[\"Year\"] = pd.to_datetime(df[\"Year\"], format=\"%Y\").dt.year\n\ndf.info()","349ee0d4":"# bar chart function setup for plotly\n\n\ndef fig_layout(fig, title):\n    # update plot details\n    fig.update_layout(\n        {\"plot_bgcolor\": \"rgba(255,255,255, 0.9)\"},  # white background\n        yaxis={'categoryorder':'total ascending'},\n        title={\n            \"text\": title,\n            \"y\": 0.98,\n            \"x\": 0.5,\n            \"xanchor\": \"center\",\n            \"yanchor\": \"top\",\n        },\n        xaxis_title=\"\",  # remove axis titles\n        yaxis_title=\"\",  # remove axis titles\n    )\n    return fig\n\ndef bar_chart(df, x, y, location):\n    # create bar chart\n    fig = px.bar(df, x=x, y=y, text=y)\n\n    # update bar markers\n    fig.update_traces(\n        textposition=\"outside\", marker_color=m_color\n    )  # blue color\n\n    # update plot details\n    fig.update_layout(\n        {\"plot_bgcolor\": \"rgba(255,255,255, 0.9)\"},  # white background\n        title={\n            \"text\": f\"Count of Games Hosted by {location}\",\n            \"y\": 0.98,\n            \"x\": 0.5,\n            \"xanchor\": \"center\",\n            \"yanchor\": \"top\",\n        },\n        xaxis_title=\"\",  # remove axis titles\n        yaxis_title=\"\",  # remove axis titles\n    )\n\n    fig.update_yaxes(showticklabels=False)\n\n    return fig.show()","a34b6a84":"# global marker color for plotly plots\nm_color = \"rgb(47,138,196)\"\n\n# Age Counts in Games\ndf_age = df.copy()\ndf_age['Age'] = df_age['Age'].dropna().astype('float')\n\n# df_age.sort_values(by=\"Age\",inplace=True)\n\nfig = px.histogram(df_age, x=\"Age\",color=\"Sex\",barmode=\"overlay\", \n                   color_discrete_map={\"F\": \"rgb(237,100,90)\", \"M\": m_color})\n# update bar markers\n# fig.update_traces(marker_color=m_color)  # blue color\n\nfig.update_layout(\n    {\"plot_bgcolor\": \"rgba(255,255,255, 0.9)\"},  # white background\n    title={\n        \"text\": \"Age Counts by Gender in Games\",\n        \"y\": 0.98,\n        \"x\": 0.5,\n        \"xanchor\": \"center\",\n        \"yanchor\": \"top\",\n    }\n)\n\n\nfig.show()","9d5175ca":"# Number of Olympic Games by Season\ndf_season_city = (\n    df.groupby([\"Season\"])[\"Year\"]\n    .nunique()\n    .to_frame()\n    .reset_index()\n    .rename(columns={\"Year\": \"Count\"})\n)\n\n# highlight season with highest count\nfig = px.pie(\n    df_season_city,\n    values=\"Count\",\n    names=\"Season\",\n    color=\"Season\",\n    title=\"Count of Games by Season\",\n    color_discrete_map={\"Summer\": \"rgb(237,100,90)\", \"Winter\": m_color}\n)\n\n# update plot details\nfig.update_layout(\n    title={\n        #     \"y\": 0.100,\n        \"x\": 0.5,\n        \"xanchor\": \"center\",\n        \"yanchor\": \"top\",\n    },\n)\n\n\nfig.show()","3a39f959":"# filter names by medals: Gold,Silver,Bronze\ndf_cntry_mds = df[df[\"Medal\"].str.contains(\"|\".join([\"Gold\", \"Silver\", \"Bronze\"]))]\n\n# display name by counts of all medals\ndf_cntry_mds2 = (\n    df_cntry_mds.groupby(by=\"Name\")[\"Medal\"].size().reset_index(name=\"counts\")\n)\n\n# sort df by medal count, descending\ndf_cntry_mds3 = (\n    df_cntry_mds2.sort_values(by=\"counts\", ascending=False)\n    .reset_index(drop=True)\n    .head(14)\n)\n\ndf_cntry_mds3.head(10)","21fd01a2":"# Name list of top 10 names with most medals count\ntop_medal_indiv = df_cntry_mds3.Name.to_list()\n\n# df of top top 10 names with most medals count\ndf_top_medal_indiv = df[\n    (df[\"Name\"].str.contains(\"|\".join(top_medal_indiv)))\n    & (df[\"Medal\"].str.contains(\"|\".join([\"Gold\", \"Silver\", \"Bronze\"])))\n]\n\n# groupby Name and Medal counts\nml_ind_gp = (\n    df_top_medal_indiv.groupby(by=[\"Name\", \"Medal\"]).size().reset_index(name=\"counts\")\n)\n\n\n# create df of medal names\ndf_mapping = pd.DataFrame(\n    {\n        \"size\": [\"Bronze\", \"Silver\", \"Gold\"],\n    }\n)\n\n# create index ordered by medal rankings\nsort_mapping = df_mapping.reset_index().set_index(\"size\")\n\n# map medal rankings to medal rankings by individuals\nml_ind_gp[\"medal_rank\"] = ml_ind_gp[\"Medal\"].map(sort_mapping[\"index\"])\n\n# sort df by medal_rank\nml_ind_gp.sort_values(by=\"medal_rank\", inplace=True)\n\n# create bar chart\nfig = px.bar(\n    data_frame=ml_ind_gp,\n    y=\"Name\",\n    x=\"counts\",\n    barmode=\"stack\",\n    color=\"Medal\",\n    text=\"counts\",\n    color_discrete_map={\n        \"Bronze\": \"rgb(175, 100, 88)\",\n        \"Silver\": \"rgb(179,179,179)\",\n        \"Gold\": \"gold\",\n    },\n)\n\n# update layout, white background, remove axis titles, order y-axis\nfig_layout(fig, \"Medal Counts by Individuals\")\n\nfig.update_xaxes(showticklabels=False)\n\nfig.show()","28ef96d1":"# Import olympic data (city, country, continent) from wikipedia\nolympic_cc = pd.read_html(\n    \"https:\/\/en.wikipedia.org\/wiki\/List_of_Olympic_Games_host_cities\"\n)","7ef94f23":"# Count of Olympics Hosted by Cities\noc_city = olympic_cc[2].groupby(\"City.1\")[\"Country\"].size().reset_index(name=\"Counts\")\n\noc_city = (\n    (oc_city.sort_values(by=\"Counts\", ascending=False))\n    .reset_index()\n    .rename(columns={\"City.1\": \"City\"})\n    .head(10)\n)\n\n# create and show figure (bar chart)\nbar_chart(oc_city, \"City\", \"Counts\", \"Counts\")","f85495ef":"# Count of Olympics Hosted by Country\noc_cntry = olympic_cc[5][[\"Country\", \"Total\"]].fillna(\"\").head(15)\n\n# create and show figure (bar chart)\nbar_chart(oc_cntry, \"Country\", \"Total\", \"Country\")","f58d0337":"# Count of Olympic Games Hosted by Continent\n\noc_cont = olympic_cc[2].groupby(\"Continent\")[\"City.1\"].size().reset_index(name=\"Counts\")\n\n# reorder count values\noc_cont = oc_cont.sort_values(by=\"Counts\", ascending=False).reset_index()\n\n# create and show figure (bar chart)\nbar_chart(oc_cont, \"Continent\", \"Counts\", \"Continent\")","05696ee3":"## Data Exploration","a034bba1":"## Clean Dataframe \n\nRemove na and fill with ''","8c9e2b08":"### All Medal Counts by Individuals","918ae72e":"# DATA EXPLORATION OF 120 YEARS OF OLYMPIC HISTORY\n\n[David Rusho](drusho.github.io\/blog) - July 2021\n\n<br>\n\nDataset Source: [120-years-of-olympic-history-athletes-and-results](https:\/\/www.kaggle.com\/heesoo37\/120-years-of-olympic-history-athletes-and-results)","24c809dd":"### Age Counts by Gender in Games","6f3a6dd7":"### Count of Games Hosted by Continent","9ae2ed3b":"### Count of Games by Season","c934639a":"### Count of Games Hosted by Cities","e68f0306":"### Total Medal Counts by Individuals","78b2559d":"## Import and Merge Data\n\n* Import Libraries \n* Import Kaggle Datasets \n* Import csvs and convert to pandas dataframes\n* Merge dataframes on 'NOC' column","2f2400bd":"### Bar Chart Function for Plotly\n\nCreated to help remove duplicate code.","2e87611e":"## Import Olympic data (city, country, continent) from Wikipedia\nDescending order by number of games hosted\n\nData pertaining to Cities, Countries, and Continents was not available in the Olympic dataset.  This information could be useful in creating a better understanding of the data.","3fea9d57":"## Counting Medals","2537e32e":"### Count of Games Hosted by Country"}}