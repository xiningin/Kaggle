{"cell_type":{"98d37fe4":"code","51a79d37":"code","4429148d":"code","1d2089ff":"code","e0c7039f":"code","9907fb58":"code","98b44c58":"code","85fd9b10":"code","95656104":"code","a2621961":"code","0b51bce7":"code","48231555":"code","d1fa0bb5":"code","20f3ae3a":"code","43cbc292":"code","90f05b85":"code","178528c7":"code","1ddac811":"code","4415b7b5":"code","b117a774":"code","e4e1410a":"code","a936be2a":"code","ea2babd9":"code","fda1e90c":"code","dc64c019":"code","13b0c766":"code","e47899a8":"code","862b6093":"code","3db4c4fe":"code","94d32252":"code","dca04028":"code","df0cdba8":"code","567b93e2":"code","ad0340be":"code","c37edf39":"code","eb92f8fe":"code","7cafa5da":"code","2c41d322":"code","27ed3d7b":"code","4b00e320":"code","57365bf3":"code","7c936126":"code","cc4a371a":"code","4a2b37bf":"code","dbb8c051":"code","63200def":"code","167bbdec":"code","b4daf143":"code","c78955f6":"code","b87b368a":"code","4f5abdcd":"code","3afa1156":"code","32a7c751":"code","26023369":"code","fa3db032":"code","6db2e7c9":"code","78e84177":"code","1ca3d83e":"code","62b06a3b":"code","243eae83":"code","1ac6780d":"code","93710197":"code","4cbef4e8":"code","19f7aadb":"code","c086ffd8":"code","020dc1c6":"code","6fecd8d8":"code","198adf2f":"code","3babab63":"code","456a6083":"code","79cdabe7":"code","ff7fb899":"code","4521ca86":"code","8835624c":"code","6f8ba765":"code","7c923e4f":"code","5115bf78":"code","9d498402":"code","070e874f":"code","ea4c54a6":"code","a1948e11":"code","4bda021c":"code","1e81b3fd":"code","e5ebed49":"code","f7c46824":"code","887b993f":"code","a7254443":"code","97186a7b":"code","00fc0b64":"code","c328abf7":"code","46439f96":"code","50443694":"code","4b181a92":"code","8f5cc0fd":"code","df5dd3b9":"code","970c84f6":"code","4659ae7e":"code","98590047":"code","539f79a5":"code","bf1909cd":"code","818ff4f5":"code","ab83b3d4":"code","73367528":"code","acd6a265":"code","d6b4525a":"code","040f3c23":"code","cc3c2524":"code","51d98226":"code","e329e8a3":"code","d384beaf":"code","a2d5b383":"code","e16f17d0":"code","75b5e8d0":"code","54e1899c":"code","b9b3765d":"code","1d33af73":"code","7e70463b":"code","1bc0e31c":"code","eaf4c28e":"code","5e3bcc8d":"code","2355f943":"code","cbf3a438":"code","13d5ad64":"code","f542670e":"code","f17271d6":"code","ef0ae670":"code","42f09573":"code","276f9999":"code","035900e3":"code","87f10c32":"code","b049b0f2":"markdown","a9cdb4df":"markdown","158a67d2":"markdown","e905391f":"markdown","7c4a6fac":"markdown","179b1635":"markdown","4679afde":"markdown","58941673":"markdown","994bd00f":"markdown","45b34f3d":"markdown","86649329":"markdown","379e93b8":"markdown","89e51a41":"markdown","941e8d97":"markdown","6546cdfd":"markdown","bd56d0de":"markdown","007b8ee7":"markdown","c1e7c209":"markdown","b9b5b181":"markdown","42006227":"markdown","5c4e33b8":"markdown","c7dc3901":"markdown","bc71384e":"markdown","5aa6e9d0":"markdown","6ad32787":"markdown","6cda789c":"markdown","8239b1e8":"markdown","6d3fc6d5":"markdown","132f6706":"markdown","f01a29d2":"markdown","15fdefb6":"markdown","03521117":"markdown","fa563979":"markdown","042ccf6b":"markdown","a7c8dd9a":"markdown","2582add6":"markdown","b59aa424":"markdown","5385c715":"markdown","be9deca0":"markdown","70a1dd5a":"markdown","b24a14c6":"markdown","8ba68888":"markdown","652225f2":"markdown","63a5d872":"markdown","7b509b94":"markdown","18aebfc4":"markdown","e9d43dfb":"markdown","bc5a9244":"markdown","5e39f43e":"markdown","336aaf7a":"markdown","33fadcda":"markdown","ec80dbfc":"markdown","9e9a1f4d":"markdown","31d20587":"markdown","cddaed55":"markdown","dd364c1a":"markdown","e438e304":"markdown","e3c3eeaf":"markdown","3a04f96d":"markdown","11b0471d":"markdown","d87649fe":"markdown","ace10025":"markdown","f4dfd3d5":"markdown","32fcdbed":"markdown","2c0b4aed":"markdown","602172de":"markdown","e2c9646d":"markdown","fa24ff87":"markdown","66fbefd5":"markdown","3b0b311b":"markdown","8295f512":"markdown","42a3ea41":"markdown","36885941":"markdown","caf1b90e":"markdown","cc4ab040":"markdown","51466b3e":"markdown","48cc5c25":"markdown","b84a59a1":"markdown"},"source":{"98d37fe4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport sklearn\n\nimport statsmodels.api as sm\n\nimport warnings\nwarnings.filterwarnings('ignore')","51a79d37":"day = pd.read_csv('..\/input\/bike-sharing-dataset\/day.csv')\nday.head()","4429148d":"day.shape","1d2089ff":"day.info()","e0c7039f":"day_desc = day.describe()\nday_desc_cols = day_desc.columns\nday_desc","9907fb58":"day_desc_cols","98b44c58":"plt.figure(figsize = (16, 16))\nsns.pairplot(day[day_desc_cols])\nplt.show()","85fd9b10":"plt.figure(figsize = (16, 10))\nsns.heatmap(day.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","95656104":"g=sns.FacetGrid(day, hue='yr', palette='coolwarm',height=6,aspect=2)\ng=g.map(plt.hist,'cnt',alpha=0.5, edgecolor='black')\nplt.legend()","a2621961":"plt.figure(figsize=(11,5))\nsns.barplot('yr','casual',hue='season', data=day, palette='rainbow', ci=None)\nplt.xlabel('Year')\nplt.ylabel('Total number of bikes rented on Casual basis')\nplt.title('Number of bikes rented per season')","0b51bce7":"df_season_winter=day[day['season']==4]\ndf_season_fall=day[day['season']==3]\ndf_season_summer=day[day['season']==2]\ndf_season_spring=day[day['season']==1]","48231555":"df_season_winter.mnth.nunique()\ndf_season_fall.mnth.nunique()\ndf_season_summer.mnth.nunique()\ndf_season_spring.mnth.nunique()","d1fa0bb5":"sns.factorplot('mnth','cnt',hue='workingday',data = df_season_winter, ci=None, palette='Set1')\nsns.factorplot('mnth','cnt',hue='workingday',data = df_season_fall, ci=None, palette='Set1')\nsns.factorplot('mnth','cnt',hue='workingday',data = df_season_summer, ci=None, palette='Set1')\nsns.factorplot('mnth','cnt',hue='workingday',data = df_season_spring, ci=None, palette='Set1')","20f3ae3a":"sns.factorplot('mnth','cnt',hue='weathersit',data = df_season_winter, ci=None, palette='Set1')\nsns.factorplot('mnth','cnt',hue='weathersit',data = df_season_fall, ci=None, palette='Set1')\nsns.factorplot('mnth','cnt',hue='weathersit',data = df_season_summer, ci=None, palette='Set1')\nsns.factorplot('mnth','cnt',hue='weathersit',data = df_season_spring, ci=None, palette='Set1')","43cbc292":"sns.lmplot('temp','cnt',row='workingday',col='season',data=day,palette='RdBu_r',fit_reg=False)","90f05b85":"plt.figure(figsize=(20,5))\nmask = np.zeros_like(day.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(day.corr(),cmap='RdBu_r',mask=mask, annot=True)","178528c7":"day.plot(x='dteday', y='cnt')","1ddac811":"plt.figure(figsize = (16, 16))\nsns.pairplot(day)\nplt.show()","4415b7b5":"plt.figure(figsize=(20, 12))\nplt.subplot(2,3,1)\nsns.boxplot(x = 'season', y = 'cnt', data = day)\nplt.subplot(2,3,2)\nsns.boxplot(x = 'yr', y = 'cnt', data = day)\nplt.subplot(2,3,3)\nsns.boxplot(x = 'mnth', y = 'cnt', data = day)\nplt.subplot(2,3,4)\nsns.boxplot(x = 'holiday', y = 'cnt', data = day)\nplt.subplot(2,3,5)\nsns.boxplot(x = 'weekday', y = 'cnt', data = day)\nplt.subplot(2,3,6)\nsns.boxplot(x = 'weathersit', y = 'cnt', data = day)\nplt.show()","b117a774":"day.describe()","e4e1410a":"day.isnull().sum()","a936be2a":"day['season'] = day['season'].map({1:\"spring\", 2:\"summer\", 3:\"fall\", 4:\"winter\"})\nseason = pd.get_dummies(day['season'], drop_first = True)","ea2babd9":"day = pd.concat([day, season], axis = 1)","fda1e90c":"day.drop('season',axis=1,inplace=True)","dc64c019":"day.head()","13b0c766":"day['mnth'] = day['mnth'] = day['mnth'].map({1:\"Jan\", 2:\"Feb\", 3:\"Mar\", 4:\"Apr\", 5:\"May\", 6:\"Jun\", 7:\"Jul\", 8:\"Aug\", 9:\"Sep\", 10:\"Oct\", 11:\"Nov\", 12:\"Dec\"})\nmonth = pd.get_dummies(day['mnth'], drop_first = True)","e47899a8":"day = pd.concat([day, month], axis = 1)","862b6093":"day.drop('mnth',axis=1,inplace=True)","3db4c4fe":"day.head()","94d32252":"dmap = {1:'Mon',2:'Tue',3:'Wed',4:'Thu',5:'Fri',6:'Sat',0:'Sun'}\nday['weekday'].astype('object')\nday['weekday'] = day['weekday'].map(dmap)\n\nweekday = pd.get_dummies(day['weekday'], drop_first = True)","dca04028":"day = pd.concat([day, weekday], axis = 1)","df0cdba8":"day.drop('weekday',axis=1,inplace=True)","567b93e2":"day.head()","ad0340be":"day['weathersit'] = day['weathersit'].map({1:\"Clear\", 2:\"Cloudy\", 3:\"Snow\/Rain\", 4:\"Heavy Rain\"})\nweathersit = pd.get_dummies(day['weathersit'], drop_first = True)","c37edf39":"day = pd.concat([day, weathersit], axis = 1)","eb92f8fe":"day.drop('weathersit',axis=1,inplace=True)","7cafa5da":"day.head()","2c41d322":"from sklearn.preprocessing import MinMaxScaler","27ed3d7b":"scaler = MinMaxScaler()\n\nnum_vars = ['temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt']","4b00e320":"day[num_vars] = scaler.fit_transform(day[num_vars])\nday.head()","57365bf3":"day.drop('instant',axis=1,inplace=True)\nday.drop('dteday',axis=1,inplace=True)\nday.drop('casual',axis=1,inplace=True)\nday.drop('registered',axis=1,inplace=True)","7c936126":"# importing libraries for splitting\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split","cc4a371a":"df_train,df_test = train_test_split(day, train_size=0.7, random_state=100)\nprint(df_train.shape)\nprint(df_test.shape)","4a2b37bf":"plt.figure(figsize = (20, 15))\nsns.heatmap(df_train.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","dbb8c051":"y_train = df_train.pop('cnt')\nX_train = df_train","63200def":"X_train_sm = sm.add_constant(X_train['temp'])\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.params","167bbdec":"lr_model.summary()","b4daf143":"#adding another variable\nX_train_sm = X_train[['temp', 'atemp']]\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.summary()","c78955f6":"#adding another variable\nX_train_sm = X_train[['atemp']]\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.summary()","b87b368a":"#adding another variable\nX_train_sm = X_train[['atemp', 'yr']]\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.summary()","4f5abdcd":"#adding another variable\nX_train_sm = X_train[['atemp', 'yr', 'holiday']]\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.summary()","3afa1156":"#adding another variable\nX_train_sm = X_train[['atemp', 'yr', 'holiday', 'windspeed']]\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.summary()","32a7c751":"#adding another variable\nX_train_sm = X_train[['atemp', 'yr', 'holiday', 'windspeed', 'Snow\/Rain']]\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.summary()","26023369":"#adding another variable\nX_train_sm = X_train[['atemp', 'yr', 'holiday', 'windspeed', 'Snow\/Rain', 'summer']]\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.summary()","fa3db032":"#adding another variable\nX_train_sm = X_train[['atemp', 'yr', 'holiday', 'windspeed', 'Snow\/Rain', 'summer', 'spring']]\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.summary()","6db2e7c9":"#adding another variable\nX_train_sm = X_train[['atemp', 'yr', 'holiday', 'windspeed', 'Snow\/Rain', 'summer', 'spring', 'winter', 'Cloudy']]\n\nX_train_sm = sm.add_constant(X_train_sm)\n\nlr = sm.OLS(y_train, X_train_sm)\n\nlr_model = lr.fit()\n\nlr_model.summary()","78e84177":"cols = X_train.columns\n#X_train[cols]","1ca3d83e":"X_train_sm1 = (X_train[cols])\n\nX_train_sm1 = sm.add_constant(X_train_sm1)\n\nlr1 = sm.OLS(y_train, X_train_sm1)\n\nlr_model1 = lr1.fit()\n\nlr_model1.summary()","62b06a3b":"from statsmodels.stats.outliers_influence import variance_inflation_factor","243eae83":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","1ac6780d":"X = X_train.drop('Mar', 1)","93710197":"X_train_lm = sm.add_constant(X)\n\nlr_2 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_2.summary())","4cbef4e8":"X = X.drop('Thu', 1)","19f7aadb":"X_train_lm = sm.add_constant(X)\n\nlr_3 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_3.summary())","c086ffd8":"X = X.drop('Oct', 1)","020dc1c6":"X_train_lm = sm.add_constant(X)\n\nlr_4 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_4.summary())","6fecd8d8":"X = X.drop('Jun', 1)","198adf2f":"X_train_lm = sm.add_constant(X)\n\nlr_5 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_5.summary())","3babab63":"X = X.drop('atemp', 1)","456a6083":"X_train_lm = sm.add_constant(X)\n\nlr_6 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_6.summary())","79cdabe7":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ff7fb899":"X = X.drop('workingday', 1)","4521ca86":"X_train_lm = sm.add_constant(X)\n\nlr_7 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_7.summary())","8835624c":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","6f8ba765":"X = X.drop('Sat', 1)","7c923e4f":"X_train_lm = sm.add_constant(X)\n\nlr_8 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_8.summary())","5115bf78":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","9d498402":"X = X.drop('Sun', 1)","070e874f":"X_train_lm = sm.add_constant(X)\n\nlr_9 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_9.summary())\n\n","ea4c54a6":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","a1948e11":"X = X.drop('hum', 1)","4bda021c":"X_train_lm = sm.add_constant(X)\n\nlr_10 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_10.summary())","1e81b3fd":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","e5ebed49":"X = X.drop('Aug', 1)","f7c46824":"X_train_lm = sm.add_constant(X)\n\nlr_10 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_10.summary())","887b993f":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","a7254443":"X = X.drop('May', 1)","97186a7b":"X_train_lm = sm.add_constant(X)\n\nlr_10 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_10.summary())","00fc0b64":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c328abf7":"X = X.drop('temp', 1)","46439f96":"X_train_lm = sm.add_constant(X)\n\nlr_11 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_11.summary())","50443694":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4b181a92":"X = X.drop('winter', 1)","8f5cc0fd":"X_train_lm = sm.add_constant(X)\n\nlr_12 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_12.summary())","df5dd3b9":"X = X.drop('Jul', 1)","970c84f6":"X_train_lm = sm.add_constant(X)\n\nlr_13 = sm.OLS(y_train, X_train_lm).fit()\n\nprint(lr_13.summary())","4659ae7e":"vif = pd.DataFrame()\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","98590047":"y_train_pred = lr_13.predict(X_train_lm)","539f79a5":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_pred), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)                         # X-label","bf1909cd":"df_test","818ff4f5":"df_test.describe()","ab83b3d4":"cols = df_test.describe().columns","73367528":"cols","acd6a265":"num_vars = ['temp', 'temp', 'hum', 'windspeed', 'cnt']","d6b4525a":"df_test[num_vars] = scaler.fit_transform(df_test[num_vars])","040f3c23":"df_test.describe()","cc3c2524":"y_test = df_test.pop('cnt')\nX_test = df_test","51d98226":"X_test_m10 = sm.add_constant(X_test)","e329e8a3":"X_test_m10 = X_test_m10.drop([\"Mar\", \"Thu\", \"Oct\", \"Jun\", \"atemp\", \"workingday\", \"Sat\", \"Sun\", \"hum\", \"Aug\", \"May\"], axis = 1)","d384beaf":"y_pred_m10 = lr_10.predict(X_test_m10)","a2d5b383":"X_test_m13 = sm.add_constant(X_test)","e16f17d0":"X_test_m13 = X_test_m13.drop([\"Mar\", \"Thu\", \"Oct\", \"Jun\", \"atemp\", \"workingday\", \"Sat\", \"Sun\", \"hum\", \"Aug\", \"May\", \"temp\", \"winter\", \"Jul\"], axis = 1)","75b5e8d0":"y_pred_m13 = lr_13.predict(X_test_m13)","54e1899c":"fig = plt.figure()\nplt.scatter(y_test, y_pred_m10)\nfig.suptitle('y_test vs y_pred', fontsize = 20)              # Plot heading \nplt.xlabel('y_test', fontsize = 18)                          # X-label\nplt.ylabel('y_pred', fontsize = 16)    ","b9b3765d":"fig = plt.figure()\nplt.scatter(y_test, y_pred_m13)\nfig.suptitle('y_test vs y_pred', fontsize = 20)              # Plot heading \nplt.xlabel('y_test', fontsize = 18)                          # X-label\nplt.ylabel('y_pred', fontsize = 16)    ","1d33af73":"from sklearn.metrics import mean_squared_error, r2_score\n\nr_squared = r2_score(y_test, y_pred_m10)\n\nmse = mean_squared_error(y_test, y_pred_m10)","7e70463b":"print('Mean Squared Error :' ,mse)\nprint('R Square Value :',r_squared)","1bc0e31c":"from sklearn.metrics import mean_squared_error, r2_score\n\nr_squared = r2_score(y_test, y_pred_m13)\n\nmse = mean_squared_error(y_test, y_pred_m13)","eaf4c28e":"print('Mean Squared Error :' ,mse)\nprint('R Square Value :',r_squared)","5e3bcc8d":"c = [i for i in range(1,221,1)]\nfig = plt.figure(figsize = (100, 15))\nplt.plot(c,y_test, color=\"#3498DB\", linewidth=5, linestyle=\"-\")\nplt.plot(c,y_pred_m13, color=\"#EC7063\",  linewidth=5, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Count', fontsize=16)                               # Y-label","2355f943":"c = [i for i in range(1,221,1)]\nfig = plt.figure(figsize = (100, 15))\nplt.plot(c,y_test, color=\"#3498DB\", linewidth=5, linestyle=\"-\")\nplt.plot(c,y_pred_m13, color=\"#EC7063\",  linewidth=5, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Count', fontsize=16)                               # Y-label","cbf3a438":"print(lr_10.summary())","13d5ad64":"print(lr_13.summary())","f542670e":"day_disp = pd.read_csv('..\/input\/bike-sharing-dataset\/day.csv')","f17271d6":"plt.figure(figsize=(20, 12))\nplt.subplot(2,3,1)\nsns.boxplot(x = 'weathersit', y = 'cnt', data = day_disp)\nplt.subplot(2,3,2)\nsns.regplot(x = 'temp', y = 'cnt', data = day_disp)\nplt.subplot(2,3,3)\nsns.boxplot(x = 'holiday', y = 'cnt', data = day_disp)\nplt.subplot(2,3,4)\nsns.regplot(x = 'windspeed', y = 'cnt', data = day_disp)\nplt.subplot(2,3,5)\nsns.boxplot(x = 'season', y = 'cnt', data = day_disp)\nplt.subplot(2,3,6)\nsns.boxplot(x = 'mnth', y = 'windspeed', data = day_disp)\nplt.show()","ef0ae670":"day_disp['season'] = day_disp['season'].map({1:\"spring\", 2:\"summer\", 3:\"fall\", 4:\"winter\"})\nseason = pd.get_dummies(day_disp['season'], drop_first = True)","42f09573":"day_disp = pd.concat([day_disp, season], axis = 1)","276f9999":"day_disp.drop('season',axis=1,inplace=True)","035900e3":"day_disp.head()","87f10c32":"plt.figure(figsize=(20, 12))\nplt.subplot(2,3,1)\nsns.boxplot(x = 'spring', y = 'casual', data = day_disp)\nplt.subplot(2,3,2)\nsns.boxplot(x = 'spring', y = 'registered', data = day_disp)\nplt.subplot(2,3,3)\nsns.boxplot(x = 'spring', y = 'cnt', data = day_disp)\nplt.show()","b049b0f2":"### User trends across the seasons for working days and non-working days","a9cdb4df":"#### ii. Month","158a67d2":"We can concur that the dataset has no null values","e905391f":"#### Model 7: Adding variable 'windspeed' to the model","7c4a6fac":"## Step 7: Residual Analysis of the train data","179b1635":"##### The data looks seems to be pre-prepared as there are no null values.","4679afde":"## Step 6: Building a linear model","58941673":"# # Bike Sharing Assignment","994bd00f":"### 1. Adding variables to the model","45b34f3d":"#### Model 3: Using only variable 'atemp' in the model","86649329":"### 2. R2 Score and MSE","379e93b8":"#### Model 1: Adding variable 'temp' to the model","89e51a41":"#### From the above validated model, we can make some generalisations. The insights are as follows:\n1. Users tend not to rent and use bikes during Snow or Rain.\n2. Users generally prefer riding bikes when the temperature is higher.\n3. Bike rentals on Holidays are lesser than working days.\n4. Windspeed has a significant effect on bikes being rented.\n5. Spring season generally sees lesser bike rentals","941e8d97":"##### While 'Cloudy' has a negative coeff, we can see that the R-Squared value of 0.819 and p-value of 0.0 denotes that 'Cloudy' contributes to the model with high significance","6546cdfd":"### 3. Actual vs Predicted","bd56d0de":"#### Since we see low VIF as well as low P-Values, we can conclude that the model - 'lr_13' can be used as our final model","007b8ee7":"### Trend set by number of bikes rented","c1e7c209":"##### We can see that the R-Squared value of 0.699 is high; but hass not significantly changed from the previous model. However, it has low p-values, hence, we can say that it had significance to the model.\n","b9b5b181":"### 2. Adding all variables","42006227":"### Number of bikes rented per season in years 2018 and 2019.","5c4e33b8":"##### We can see that the R-Squared value of 0.715 and p-value of 0.0 denotes that 'windspeed' has a great contribution to the model as well as high significance","c7dc3901":"## Step 8: Making predictions on test data and evaluating","bc71384e":"### 2. Categorical Variables - Dummy\/Binary encoding","5aa6e9d0":"### 1. Finding the number of null values","6ad32787":"For lr_10","6cda789c":"#### ii.  For lr_10","8239b1e8":"#### Model 10: Adding variable 'spring' to the model","6d3fc6d5":"#### Model 2: Adding variable 'atemp' to the model","132f6706":"For lr_13","f01a29d2":"#### 1. Applying the scaling on the test sets","15fdefb6":"#### ii.  For lr_13","03521117":"##### We can see that the R-Squared value of 0.420 is fairly high.\nAnd judging from the p-values, we can say that the variables are significant. Further, we concur that 'atemp' explains how the temperature **feels** to the user. This give us the understanding that bike rentals go up depending on how the temperature feels rather than the temperature itself","fa563979":"##### From the above graph, we can see that the predicted values very closely coincide with the actual values; This is an indicator that our model is sound.","042ccf6b":"### Bike rentals with respect to weather and climate","a7c8dd9a":"##### We can see that the R-Squared value of 0.697 is high.\nThis further goes to show that there is a year on year growth\n","2582add6":"#### i. Foe lr_10","b59aa424":"#### Model 6: Adding variable 'holiday' to the model","5385c715":"## Step 2: Reading and Understanding the Data","be9deca0":"### 5. Splitting data into test and train","70a1dd5a":"#### iv. Weather","b24a14c6":"##### We can see that the R-Squared value of 0.416 is fairly high which tells us that we are moving in the right direction.\nFurther, we concur people are more likely to rent a bike at higher temperatures.","8ba68888":"##### We can see that the R-Squared value of 0.421 is fairly high.\nBut, the p-value for variable - 'temp' is quite high, thereby giving us the undesrtanding that it has a low significance","652225f2":"### 3. Rescaling the features","63a5d872":"Since the variable 'yr' consists of only two values- 0 and 1, to signify the years 2018 and 2019, we can logically assign meaning for the variable - **'yr'** to signify the years that the brand - 'Zoombikes' has existed.","7b509b94":"### 1. Plotting y_test and y_pred to understand the spread","18aebfc4":"##### Inferences:\n- Spring has very low bike rental numbers.\n- 2019 has higher number of rentals than 2018.\n- Jan-Mar has low numbers of bike rentals\n- Bike rentals during holidays are less than non-holidays\n- There are no bike rentals during heavy rain\/thunderstorm and the number significantly reduces during times of light rain\/snow.","e9d43dfb":"## Step 4: Data Preparation","bc5a9244":"## Introduction\n#### A US bike-sharing provider BoomBikes has recently suffered considerable dips in their revenues due to the ongoing Corona pandemic. They want to understand the factors affecting the demand for these shared bikes in the American market. \n#### The company wants to know:\n - Which variables are significant in predicting the demand for shared bikes.\n - How well those variables describe the bike demand\n \n#### Model the demand for shared bikes with the available independent variables. It will be used by the management to understand how exactly the demands vary with different features. They can accordingly manipulate the business strategy to meet the demand levels and meet the customer's expectations.","5e39f43e":"#### Qualitatively, it is centered around 0. Therefore, we can accept this model.","336aaf7a":"## Step 5: Splitting the Data into Training and Testing Sets","33fadcda":"### 3. Checking VIF","ec80dbfc":"### 4. Dropping variables based on p-value and VIF","9e9a1f4d":"#### Model 11: Adding variable 'Cloudy' to the model","31d20587":"#### Mean Squared Error : 0.012460755921949618\n#### R Square Value : 0.7817679605579628","cddaed55":"#### ii. For lr_13","dd364c1a":"### Finding the numerical variables","e438e304":"##### We can clearly see that more bikes were rented in 2019 across all seasons","e3c3eeaf":"For lr_13","3a04f96d":"#### Model 4: Adding variable 'yr' to the model","11b0471d":"#### Model 9: Adding variable 'summer' to the model","d87649fe":"## Step 9: Model Evaluation","ace10025":"### 6. Creating the Correlation Matrix (Pearson's)","f4dfd3d5":"##### While 'summer' has a positive coeff, we can see that the R-Squared value of 0.745 and p-value of 0.01 denotes that 'summer' contributes to the model with high significance","32fcdbed":"#### Suggestions are as follows:\n\n##### 1. Users tend not to rent and use bikes during Snow or Rain.\n- We can reduce the price of bike rentals during times of snow or rain by implementing dynamic pricig\n- We can also implement hand warmers into the bike handlebars\n- At the bike docking station, we can also have thin displosable rain coats\n\n##### 2. Users generally prefer riding bikes when the temperature is higher.\n- We can have different offers and coupons sent to riders when we can see a dip in the temperature to increase interest\n- We can have dynamic pricing to increase rates by 5% for every 5\u00b0C change in temp above the mean of 20\u00b0C\n\n##### 3. Bike rentals on Holidays are lesser than working days.\n- Like in the above suggestion, we can send coupons and offers to riders to increase interest on holidays\n- We can see that bikes are predominantly rented as a means of workplace commuting during workdays. We can have additional marketing to pose bike rides as a lifestyle activity and host events during holidays so that riders can rent bikes and participate in these events\n\n##### 4. Windspeed has a significant (-ve) effect on bikes being rented.\n- Like in the above suggestion, we can send coupons and offers to riders to increase rentals when the windspeed is high\n- During months when the windspeed is high on average, like in the case of April, we can have challenges for the number of miles or calories lost during bike rides, and give them a trophy on the app as well as a voucher if they manage to achieve the targets\n\n##### 5. Spring season generally sees lesser bike rentals.\n- This could be due to the spring breaks and other holidays that are taken during this time\n- We can have marketing to ensure that people realize that spring is the best season to cycle, apart from that, events and challenges need to be concentrated on in this month.\n- Spring might also bring plenty of tourists to Washington, they would be classified as casual riders and not registered riders, in Spring there need to be stronger strategies to ensure and entice more number of casual riders during Spring season.\n- We could include guided bicycle tours of tourist destinations.\n- Placement of bicycles in docking stations near tourist destinations, parks and restaurants","2c0b4aed":"## Step 10: Suggestions and Inferences:\n#### We select lr_10 and lr_13 models","602172de":"## Step 3: Visualizing the data","e2c9646d":"### Action Items:\n- Step 1: Importing required libraries\n- Step 2: Reading and Understanding the Data\n- Step 3: Visualising the Data\n- Step 4: Data Preparation\n- Step 5: Splitting the Data into Training and Testing Sets\n- Step 6: Building a linear model\n- Step 7: Residual Analysis of the train data\n- Step 8: Making predictions on test data and evaluating\n- Step 9: Model Evaluation\n- Step 10: Suggestions and Inferences","fa24ff87":"#### Model 8: Adding variable 'Snow\/Rain' to the model","66fbefd5":"##### While 'spring' has a negative coeff, we can see that the R-Squared value of 0.79 and p-value of 0.0 denotes that 'spring' contributes to the model with high significance","3b0b311b":"#### i. Season","8295f512":"#### Since we need to forecast and predict variables to increase the total number of bike rentals, we can select 'cnt' as our target","42a3ea41":"For lr_10","36885941":"##### The datasource contains columns which are not important to our linear model such as instant","caf1b90e":"## Step 1: Importing required libraries","cc4ab040":"##### While 'Snow\/Rain' has a negative coeff, we can see that the R-Squared value of 0.741 and p-value of 0.0 denotes that 'Snow\/Rain' has a great contribution to the model as well as high significance","51466b3e":"### 4. Dropping unrequired columns","48cc5c25":"#### Mean Squared Error : 0.010664552891617373\n#### R Square Value : 0.8132258474643972","b84a59a1":"#### iii. Weekday"}}