{"cell_type":{"b34ef3d1":"code","63013e29":"code","0de3151b":"code","a4881480":"code","24075b87":"code","e2f89edc":"code","778fd208":"code","366b573d":"code","7369fbd0":"code","482da2a7":"code","79180193":"code","ddecd3aa":"code","9fbf9ee3":"code","e295a243":"code","ba162bf6":"code","a6c79870":"code","7d182218":"code","215ab0e9":"code","70575f24":"code","8c8c1145":"code","cdee2bc7":"code","998773c5":"code","98f506db":"code","7480bff4":"code","fed7b83c":"code","dd1c247f":"code","5e7f5086":"code","89719d37":"code","79bdc79c":"code","7bcb3b8d":"code","8c67f7c5":"code","97c5e10c":"code","dcff5729":"code","28d03042":"code","d2982dc9":"code","d03ac660":"code","8c456c12":"code","d40ea720":"code","9834ff3a":"code","10866424":"code","d5e3de8d":"code","d4a654cc":"code","b8c0f55c":"code","a4169eb3":"code","2e357d25":"code","2fbc6eec":"code","3631bae0":"code","f42a1217":"code","ff43a5fc":"code","e8f434c6":"code","4cdcfa12":"code","cc12a1de":"code","837120c7":"markdown","21af0e2c":"markdown","02c27c36":"markdown","a2c41756":"markdown","d0b49dff":"markdown","0146c501":"markdown","73d1aae3":"markdown","506b24f6":"markdown","442c2850":"markdown","a84b263f":"markdown","bdda9eb3":"markdown","fd92b31d":"markdown","7be6b2f8":"markdown","24efd3f7":"markdown","102bf832":"markdown","9683ce7f":"markdown","9bff5f0d":"markdown","5bd1d26e":"markdown","a267fee1":"markdown","fb94bf27":"markdown","d397b9d9":"markdown","35477660":"markdown","43f9c48f":"markdown","8be8ed82":"markdown"},"source":{"b34ef3d1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","63013e29":"df = pd.read_csv('\/kaggle\/input\/twitchdata\/twitchdata-update.csv')\ndf","0de3151b":"df.dtypes","a4881480":"df.shape","24075b87":"df.size","e2f89edc":"df.columns","778fd208":"df.info()","366b573d":"df.describe()","7369fbd0":"df.corr()","482da2a7":"df.nunique()","79180193":"df.isnull().sum()","ddecd3aa":"import missingno as no\nno.bar(df, color='lightgreen')","9fbf9ee3":"sns.heatmap(df.isnull(), yticklabels='False', cmap='Oranges')","e295a243":"df.plot()","ba162bf6":"plt.figure(figsize=(10,8))\ndf1 = df['Language'].value_counts()\nplt.pie(df1.values, labels=df1.index, autopct='%0.2f%%')\nplt.title('Percentage of Language', fontsize=15)\nplt.show()","a6c79870":"plt.figure(figsize=(20,8))\nsns.barplot(x='Channel',y='Views gained',data=df[:15].sort_values(by='Views gained',ascending=False),palette='Paired')\nplt.title(\"Top views gained Channels are\", fontsize=15)","7d182218":"plt.figure(figsize=(14,7))\nplt.style.use('seaborn-darkgrid')\nsns.lineplot(x=\"Stream time(minutes)\" , y=\"Average viewers\" , hue=\"Language\" , data=df)\nplt.title('Streaming time v\/s Average Viewers', fontsize = 20)\nplt.show()","215ab0e9":"plt.figure(figsize=(12,7)) \nplt.style.use('seaborn-darkgrid')\nsns.lineplot(df['Stream time(minutes)'], df['Followers gained'])\nplt.title('Streaming time v\/s Followers gained', fontsize = 20)\nplt.show()","70575f24":"plt.figure(figsize=(10,8))\nsns.scatterplot(x=df.Followers , y=df['Average viewers'], hue=df.Language )\nplt.show()","8c8c1145":"plt.figure(figsize=(18,6))\nsns.barplot(x=df.Language, y=df.Followers, palette='rainbow')\nplt.title('Followers in Language', fontsize=15)","cdee2bc7":"plt.figure(figsize=(18,8))\nsns.violinplot(x=df.Language, y=df['Average viewers'], palette='Set2')","998773c5":"plt.figure(figsize=(8, 6))\nplot = sns.countplot(x=\"Mature\", data=df, order=df['Mature'].value_counts().index)","98f506db":"plt.figure(figsize=(8, 6))\nplot = sns.countplot(x=\"Partnered\", data=df, palette='magma_r', order=df['Partnered'].value_counts().index)","7480bff4":"plt.figure(figsize=(18,6))\nsns.swarmplot(x=\"Language\" , y = \"Views gained\" ,data=df)\nplt.show()","fed7b83c":"sns.pairplot(df, hue = 'Language', palette='RdYlGn')\nplt.show()","dd1c247f":"plt.figure(figsize=(18,12))\nsns.heatmap(df.corr(), yticklabels='auto', annot=True, cmap='YlGn')\nplt.show()","5e7f5086":"from sklearn.preprocessing import LabelEncoder\nlabelencoding = LabelEncoder()\ncategories=['Partnered',\t'Mature',\t'Language']\ndf[categories]=df[categories].apply(lambda x:labelencoding.fit_transform(x))\ndf","89719d37":"df = df.drop(['Channel'], axis=1)","79bdc79c":"df.dtypes","7bcb3b8d":"plt.figure(figsize=(10,50))\nfor i in range(len(df.columns)):\n  plt.subplot(10, 1, i+1)\n  sns.distplot(df[df.columns[i]], kde_kws={\"color\": \"r\", \"lw\": 3, \"label\": \"KDE\"}, hist_kws={\"color\": \"b\"})\n  plt.title(df.columns[i])\n  \nplt.tight_layout()","8c67f7c5":"x = df.drop(['Followers gained', 'Partnered',\t'Mature',\t'Language'], axis=1)\ny = df['Followers gained']","97c5e10c":"x.shape","dcff5729":"from sklearn.ensemble import ExtraTreesRegressor\nmodel = ExtraTreesRegressor()\nmodel.fit(x,y)\nprint(model.feature_importances_)","28d03042":"feat_imp = pd.Series(model.feature_importances_, index=x.columns)","d2982dc9":"feat_imp.plot(kind='barh')","d03ac660":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=25)","8c456c12":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(xtrain, ytrain)","d40ea720":"ypred_train = lr.predict(xtrain)\nypred_test = lr.predict(xtest)","9834ff3a":"from sklearn import metrics\nprint(\"Accuracy of training data:\", metrics.r2_score(ytrain, ypred_train)*100)\nac1 = metrics.r2_score(ytest, ypred_test)*100\nprint(\"Accuracy of testing data:\", ac1)","10866424":"print('Mean Absolute Error:', metrics.mean_absolute_error(ytest, ypred_test))\nprint('Mean Squared Error:', metrics.mean_squared_error(ytest, ypred_test))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(ytest, ypred_test)))","d5e3de8d":"from sklearn.tree import DecisionTreeRegressor\ndt = DecisionTreeRegressor(max_depth=5)\ndt.fit(xtrain, ytrain)","d4a654cc":"ypred_train = dt.predict(xtrain)\nypred_test = dt.predict(xtest)","b8c0f55c":"from sklearn import metrics\nprint(\"Accuracy of training data:\", metrics.r2_score(ytrain, ypred_train)*100)\nac2 = metrics.r2_score(ytest, ypred_test)*100\nprint(\"Accuracy of testing data:\", ac2)","a4169eb3":"print('Mean Absolute Error:', metrics.mean_absolute_error(ytest, ypred_test))\nprint('Mean Squared Error:', metrics.mean_squared_error(ytest, ypred_test))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(ytest, ypred_test)))","2e357d25":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(max_depth=8, ccp_alpha=0.05)\nrf.fit(xtrain, ytrain)","2fbc6eec":"ypred_train = rf.predict(xtrain)\nypred_test = rf.predict(xtest)","3631bae0":"from sklearn import metrics\nprint(\"Accuracy of training data:\", metrics.r2_score(ytrain, ypred_train)*100)\nac3 = metrics.r2_score(ytest, ypred_test)*100\nprint(\"Accuracy of testing data:\", ac3)","f42a1217":"print('Mean Absolute Error:', metrics.mean_absolute_error(ytest, ypred_test))\nprint('Mean Squared Error:', metrics.mean_squared_error(ytest, ypred_test))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(ytest, ypred_test)))","ff43a5fc":"accuracy =  {ac1: 'Logistic Regression', ac2: 'Decission Tree', ac3:'Random Forest'}","e8f434c6":"sns.set_style('darkgrid')\nplt.figure(figsize=(14, 10))\nmodel_accuracies = list(accuracy.values())\nmodel_names = list(accuracy.keys())\nsns.barplot(x=model_accuracies, y=model_names, palette='rainbow')","4cdcfa12":"import pickle\npickle.dump(rf, open('model.pkl', 'wb'))","cc12a1de":"p = rf.predict([[6196161750,\t215250,\t222720,\t27716,\t3246298,\t93036735\t]])\nprint(\"Followers Gained = \", int(p))","837120c7":"# Sample Prediction","21af0e2c":"## Error","02c27c36":"## Prediction","a2c41756":"## Error","d0b49dff":"# Comparing Accuracy","0146c501":"# Splitting the Data into Dependent and Independent Variables","73d1aae3":"# Decission Tree Regressor","506b24f6":"As accuracy of **Random Forest Regressor** algorithm is more ie. **63.58%** ~ **64%**\n\nHence we will save the model.","442c2850":"# Training and Testing the Data","a84b263f":"# **Twitch Streamer Analysis**","bdda9eb3":"# Importing Libraries","fd92b31d":"## Prediction","7be6b2f8":"## Prediction","24efd3f7":"## Accuracy","102bf832":"# Understanding the Data","9683ce7f":"# Feature Importance","9bff5f0d":"# Random Forest Regressor","5bd1d26e":"# Exploratory Data Analysis","a267fee1":"## Error","fb94bf27":"# Reading the Data","d397b9d9":"# Linear Regression","35477660":"# Saving the Model","43f9c48f":"## Accuracy","8be8ed82":"## Accuracy"}}