{"cell_type":{"4be54fe8":"code","04f65cde":"code","127a61b8":"code","12a09055":"code","ddc098cf":"code","1d4191c0":"code","242bf010":"code","dde7097a":"code","a9876853":"code","6aba7e99":"code","cdd7cfc1":"code","aa53d2ac":"code","0a410bdd":"code","fd9639fc":"code","814e7d53":"code","87c5ffe0":"code","f816e016":"code","6a80c286":"code","36984ae6":"markdown","74775463":"markdown","e5b641b6":"markdown","b8fb7086":"markdown","6e1c3f67":"markdown","ab364f72":"markdown","6c3b3efd":"markdown","2a672e83":"markdown","206f78bd":"markdown","d213a5b0":"markdown","18084736":"markdown","447583e5":"markdown","2bde044f":"markdown","4f7d9683":"markdown","f53b2605":"markdown","f3f0762b":"markdown","335d93f0":"markdown","e2ffec8c":"markdown","af0af2a7":"markdown"},"source":{"4be54fe8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.pyplot import figure\nimport math\n\nfrom datetime import datetime\nfrom matplotlib.ticker import MaxNLocator\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nfigure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\n","04f65cde":"nRowsRead = 1000 \nim = pd.read_csv('..\/input\/ironman-703-taupo-2020\/im-taupo.csv', delimiter=',', nrows = nRowsRead)\nnRow, nCol = im.shape\ndel im['0']\n\n#convert data from h:mm:ss to min\n\nim.drop(im.filter(regex=\"Unname\"),axis=1, inplace=True)\nim['Gender'] = im['Gender'].astype(str).apply(lambda x: 'Male' if x.startswith('Male') else 'Female')    \n\ntime = im['Time'].astype(str).str.split(':')\nim['Time'] = time.apply(lambda x: int(x[0]) * 60 + int(x[1]))\n\nswim = im['Swim'].astype(str).str.split(':')\nim['Swim'] = swim.apply(lambda x: int(x[0]) * 60 + int(x[1]))\n\nt1 = im['T1'].astype(str).str.split(':')\nim['T1'] = t1.apply(lambda x: int(x[0]) * 60 + int(x[1]))\n\nbike = im['Bike'].astype(str).str.split(':')\nim['Bike'] = bike.apply(lambda x: int(x[0]) * 60 + int(x[1]))\n\nt2 = im['T2'].astype(str).str.split(':')\nim['T2'] = t2.apply(lambda x: int(x[0]) * 60 + int(x[1]))\n\nrun = im['Run'].astype(str).str.split(':')\nim['Run'] = run.apply(lambda x: int(x[0]) * 60 + int(x[1]))\n","127a61b8":"#Regex on cat col\nim['Cat'] = im['Cat'].str.extract(r'((([A-Z])\\w+)|([\\d][\\d]-[\\d][\\d]))')\nim.rename(columns={\"Time\": \"Time(min)\", \"Swim\": \"Swim(min)\", \"T1\": \"T1(min)\", \"Bike\": \"Bike(min)\", \"T2\": \"T2(min)\", \"Run\": \"Run(min)\"}, inplace=True)\nim['BikeSpeed'] = [90\/(i\/60) for i in im['Bike(min)']]  \nim['RunPace'] = [i\/21.09 for i in im[\"Run(min)\"]]\nim['SwimPace'] = [(i*100)\/1800 for i in im[\"Swim(min)\"]]\n\nim.head(30)","12a09055":"x = im[(im['Cat'].str.contains('Pro')) & (im['Gender'] == 'Male')]\ny = im[(im['Cat'].str.contains('Pro')) & (im['Gender'] == 'Female')]\n\nplt.figure(figsize=(20,10))\n\nplt.hist(x['Time(min)'], alpha=0.5, color='blue', label=\"Male\", bins=20)\nplt.hist(y['Time(min)'], alpha=0.4, color='pink', label=\"Female\", bins=20)\n\nplt.legend(loc=\"upper right\")\nplt.xlabel('Time (min)')\nplt.ylabel('Occurrences')\nplt.tick_params(axis='both',labelsize=14)\n\nplt.title('Histogram: Pro athlete - men vs woman')\n\nplt.show ","ddc098cf":"x1 = im[(~im['Cat'].str.contains('Pro')) & (im['Gender'] == 'Male')]\ny2 = im[(~im['Cat'].str.contains('Pro')) & (im['Gender'] == 'Female')]","1d4191c0":"plt.figure(figsize=(20,10))\n\nplt.hist(x1['Time(min)'], alpha=0.5, color='blue', label=\"Male\", bins=20)\nplt.hist(y2['Time(min)'], alpha=0.75, color='pink', label=\"Female\", bins=20)\n\nplt.legend(loc=\"upper right\")\nplt.xlabel('Time (min)')\nplt.ylabel('Occurrences')\nplt.tick_params(axis='both',labelsize=14)\n\nplt.title('Histogram: Amateurs athlete - men vs woman')\n\nplt.show ","242bf010":"cats_u =  im['Cat'].unique()\nx = im.groupby(['Cat'])['Gender'].count()\nplt.figure(figsize=(20,10))\nplt.bar(range(len(x)), x, label='Category', color='green')\nplt.legend(loc=\"upper right\")\nplt.xlabel('Category')\nplt.ylabel('Participants number in group')\n\nax = plt.subplot()\nax.set_xticks(range(len(x)))\nax.set_xticklabels(['18-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-64','65-69','70-74','Pro'])\n\nplt.show()\n","dde7097a":"im.groupby(['Cat', 'Gender'])['Gender'].count().unstack('Cat').plot.bar(figsize = (20,10),rot=0)\n","a9876853":"boxplot = im.boxplot(column=['Swim(min)', 'Bike(min)', 'Run(min)'], figsize=(12,8))\n","6aba7e99":"plt.figure(figsize=(20,15))\nsns.set(style=\"whitegrid\")\nax = sns.boxplot(x=\"Cat\", y=\"Swim(min)\", data=im, palette=\"Set3\")\nax = sns.swarmplot(x=\"Cat\", y=\"Swim(min)\", data=im, color=\"0.25\")","cdd7cfc1":"plt.figure(figsize=(20,15))\nsns.set(style=\"whitegrid\")\nax = sns.boxplot(x=\"Cat\", y=\"Bike(min)\", data=im, palette=\"Set3\")\nax = sns.swarmplot(x=\"Cat\", y=\"Bike(min)\", data=im, color=\"0.25\")","aa53d2ac":"plt.figure(figsize=(20,15))\nsns.set(style=\"whitegrid\")\nax = sns.boxplot(x=\"Cat\", y=\"Run(min)\", data=im, palette=\"Set3\")\nax = sns.swarmplot(x=\"Cat\", y=\"Run(min)\", data=im, color=\"0.25\")","0a410bdd":"x = im[im['Cat'] == 'Pro']\nplt.figure(figsize=(20,15))\nax = sns.barplot(x='BikeSpeed', y='Name', data=x)\n# ax.set_xlabel('totalCount')","fd9639fc":"y = im[im['Cat'] != 'Pro'].head(30)\nplt.figure(figsize=(20,15))\nplt.xlim(30, 42)\n\nax = sns.barplot(x='BikeSpeed', y='Name', data=y)\n\n  \n","814e7d53":"plt.figure(figsize=(20,15))\nax = sns.barplot(x='RunPace'  , y='Name', data=x)","87c5ffe0":"plt.figure(figsize=(20,15))\nax = sns.barplot(x='RunPace', y='Name', data=y)","f816e016":"plt.figure(figsize=(20,15))\nax = sns.barplot(x='SwimPace', y='Name', data=x)","6a80c286":"plt.figure(figsize=(20,15))\nax = sns.barplot(x='SwimPace', y='Name', data=y)","36984ae6":"# Avg. bike speed ","74775463":"# Median and quariles per AG","e5b641b6":"Pros","b8fb7086":"Pros ","6e1c3f67":"# Data cleaning:","ab364f72":"# Time distributions ","6c3b3efd":"Bike","2a672e83":"Pros","206f78bd":"Non-pros ","d213a5b0":"# Avg. run pace","18084736":"Swim","447583e5":"# Avg. swim pace ","2bde044f":"# Amateurs: Mens vs Woman ","4f7d9683":"# Pro athletes: Men vs Woman","f53b2605":"Run","f3f0762b":"Non-pros ","335d93f0":"# Ironman Taupo 70.3 2020, data analysis","e2ffec8c":"# Number of participants: Per pro cat. and age-group ","af0af2a7":"Non-pros"}}