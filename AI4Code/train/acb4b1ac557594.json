{"cell_type":{"f339652a":"code","0ca92de1":"code","f78aac06":"code","06862a80":"code","01d88f60":"code","87f3fa5d":"code","2353966c":"code","5b16cfab":"code","8ca78f9a":"code","da655f91":"code","533ad349":"code","7093d90c":"code","4ecf6c46":"code","ec7cbb75":"code","a9202914":"code","5c828cd8":"code","ad3dc1d8":"code","0d678724":"code","5938828f":"code","68fc08f5":"code","3e6b0e06":"code","94a25007":"code","c41ce09d":"code","a9e99f67":"code","84cc86c9":"code","461de2da":"code","54956e79":"code","1dd98f0b":"code","13271c51":"code","e28250ee":"markdown","b29f8800":"markdown","8b1d4eac":"markdown","4d3df0ef":"markdown","035eee7e":"markdown","468aa6e0":"markdown","f99814a1":"markdown","dbc35018":"markdown","788f35c0":"markdown","82e9a6d1":"markdown","194c1df5":"markdown","4806d99a":"markdown","63c4483d":"markdown"},"source":{"f339652a":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\nfrom scipy.interpolate import interp2d\nimport datetime\n\n# For import data\nimport os\nimport json\nimport requests\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport folium\n\n# Modeling and Prediction\nfrom sklearn.metrics import r2_score\n\nimport warnings\nwarnings.simplefilter('ignore')","0ca92de1":"indicator_name = 'PM2.5' # 'PM2.5' or 'PM10'\ntime_interval='H' # 'H' (hour) or D' (day)\ntype_agg='mean' # 'mean' or 'max'","f78aac06":"#datetime_analysis = '2021-11-16 10:00:00'\ndatetime_analysis = '2021-11-27 09:00:00'  # maximum value after 2021-11-16\n#datetime_analysis = '2021-11-12 18:00:00'\n#datetime_analysis = '2021-01-23 18:00:00'  # maximum value","06862a80":"# Data from SaveEcoBot\nstations_about = pd.read_csv('..\/input\/air-quality-monitoring\/saveecobot_city_about_stations.csv', header=0, sep=';')\nstations_about = stations_about[stations_about['locality']=='Vinnytsia city'].reset_index(drop=True)\nstations_about = stations_about.fillna(-1)\nstations_about","01d88f60":"stations_about['id_station'] = \"SaveEcoBot_\" + stations_about['id_saveecobot'].astype('str')\nstations_about['id_ecocity'] = stations_about['id_ecocity'].astype('int')\nstations_about.loc[stations_about['network']=='Eco-City', 'id_station'] = \"EcoCity_\" + stations_about['id_ecocity'].astype('int').astype('str')\nstations_about","87f3fa5d":"stations_about = stations_about[['id_station', 'lat', 'lng']]\nstations_about","2353966c":"# Data from SaveEcoBot\necocity_stations_about = pd.read_csv('..\/input\/air-quality-monitoring-from-ecocity\/ecocity_about_stations_2021.csv', header=0, sep=';')\necocity_stations_about","5b16cfab":"ecocity_stations_about_city = ecocity_stations_about[ecocity_stations_about['locality']=='Vinnytsia city'].reset_index(drop=True)\necocity_stations_about_city['id_ecocity'] = ecocity_stations_about_city['id_ecocity'].astype('int')\necocity_stations_about_city","8ca78f9a":"ecocity_stations_about_city['id_station'] = \"EcoCity_\" + ecocity_stations_about_city['id_ecocity'].astype('str')\necocity_stations_about_city.loc[ecocity_stations_about_city['network']=='Eco-City', 'id_station'] = \"EcoCity_\" + ecocity_stations_about_city['id_ecocity'].astype('str')\necocity_stations_about_city","da655f91":"ecocity_stations_about_city = ecocity_stations_about_city[['id_station', 'lat', 'lng']]\necocity_stations_about_city","533ad349":"ecocity_stations_about_city_list = ecocity_stations_about_city['id_station'].unique().tolist()\necocity_stations_about_city_list","7093d90c":"stations_about = stations_about[~stations_about['id_station'].isin(ecocity_stations_about_city_list)]\nstations_about","4ecf6c46":"stations_about = pd.concat([ecocity_stations_about_city, stations_about], ignore_index=True)\nstations_about","ec7cbb75":"# Add data about stations of the Center for Hydrometeorology in Vinnytsia region (http:\/\/meteo.vn.ua\/api\/api.php)\n# Source: https:\/\/www.vmr.gov.ua\/Branches\/Lists\/Ecology\/ShowContent.aspx?ID=24\nnum = len(stations_about)\nstations_about.loc[num, 'id_station'] = 'VinnCHM_1'\nstations_about.loc[num, 'lat'] = 49.241962 \nstations_about.loc[num, 'lng'] = 28.478482\nstations_about.loc[num+1, 'id_station'] = 'VinnCHM_2'\nstations_about.loc[num+1, 'lat'] = 49.231392\nstations_about.loc[num+1, 'lng'] = 28.518974\nstations_about","a9202914":"stations_about_list = stations_about['id_station'].tolist()\nstations_about_list","5c828cd8":"st_par = pd.read_csv('..\/input\/air-quality-monitoring\/stations_parameters_prediction.csv', header=0, sep=';')\nst_par","ad3dc1d8":"def f(st_par, id_station, indicator_name, t):\n    # Prediction value of th indicator_name for the station with id_station \n    # in the time moment t by parameters from the st_par\n    \n    df = st_par[st_par['id_station']==id_station].reset_index(drop=True)\n    k1 = float(df.loc[0, indicator_name+\"_k1\"])\n    k0 = float(df.loc[0, indicator_name+\"_k0\"])\n    a1 = float(df.loc[0, indicator_name+\"_a1\"])\n    b1 = float(df.loc[0, indicator_name+\"_b1\"])\n        \n    return k0 + k1*t + a1*np.sin(t) + b1*np.cos(t)","0d678724":"res = pd.DataFrame(columns=['id_station', 't', 'y'])\nres.loc[0,'t']=1","5938828f":"res = pd.DataFrame(columns=['id_station', 'indicator_name', 't', 'y'])\nw = 0\nfor id_station in stations_about_list:\n    for indicator_name in ['PM2.5', 'PM10']:\n        for t in range(10):\n            res.loc[w, 'id_station'] = id_station\n            res.loc[w, 'indicator_name'] = indicator_name\n            res.loc[w, 't'] = t\n            res.loc[w, 'y'] = f(st_par, id_station, indicator_name, t) + np.random.normal(0, .1, 1)[0]\n            w += 1","68fc08f5":"res","3e6b0e06":"stations_about","94a25007":"m = folium.Map(location=[49.2355, 28.474], zoom_start=13, tiles=\"Stamen Terrain\")\n\nfor i in range(len(stations_about)):\n    marker = folium.Marker(\n        location=[float(stations_about.loc[i, 'lat']), float(stations_about.loc[i, 'lng'])],\n        popup=folium.Popup(max_width=450)\n    )\n    marker.add_to(m)\n\nm","c41ce09d":"url = (\n    \"https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data\"\n)\ndata = json.loads(requests.get(f\"{url}\/vis1.json\").text)\n\nm = folium.Map(location=[49.2355, 28.474], zoom_start=13)\n\nfor i in range(len(stations_about)):\n    marker = folium.Marker(\n        location=[float(stations_about.loc[i, 'lat']), float(stations_about.loc[i, 'lng'])],\n        popup=folium.Popup(max_width=450).add_child(\n            folium.Vega(data, width=450, height=450)   # Still need to replace data to res for given id_station and indicator \n        ),\n    )\n    marker.add_to(m)\n\nm","a9e99f67":"# def get_AQI():\n    ","84cc86c9":"# def AQI_colors():\n#     # Danger level\n#     if indicator_name == 'PM2.5':\n#         danger_level = 55\n#     elif indicator_name == 'PM10':\n#         danger_level = 254\n#     df[df['value'] >= danger_level]['value'].hist(bins=50)\n    \n#     # Very danger level\n#     if indicator_name == 'PM2.5':\n#         very_danger_level = 150\n#     elif indicator_name == 'PM10':\n#         very_danger_level = 354\n#     df[df['value'] >= very_danger_level]['value'].hist(bins=50)\n    \n#     # Very danger level\n#     pd.set_option('max_rows',100)\n#     df[df['value'] >= very_danger_level]\n\n#     print(df.id_station.unique())\n\n#     # Very danger level\n#     print('Very danger level:')\n#     very_danger_station = df[df['value'] >= very_danger_level]['id_station'].unique()\n#     df[df['value'] >= very_danger_level]['id_station'].value_counts()\n\n#     # Maximum value\n#     print(f\"The maximum value is:\")\n#     display(df.iloc[df['value'].argmax(),:])\n\n#     # Maximum values after the starting station \"VNTU\"\n#     if datetime_analysis != 'all time':\n#         print(f\"Maximum values after the starting station 'VNTU' - {df[(df.ds>=datetime.datetime.fromisoformat(datetime_analysis)) & (df.id_station=='EcoCity_1315')].value.max()}\")\n#     else: print(f\"Maximum values after the starting station 'VNTU' - {df[df.id_station=='EcoCity_1315'].value.max()}\")","461de2da":"#df[['value']].describe()","54956e79":"#data","1dd98f0b":"# # Coordinates of stations - from EcoCity or no\n# xseb = data[data['network']!=\"Eco-City\"]['lng'].values\n# yseb = data[data['network']!=\"Eco-City\"]['lat'].values\n# numseb = data[data['network']!=\"Eco-City\"]['id_station'].astype('str').values\n# xeco = data[data['network']==\"Eco-City\"]['lng'].values\n# yeco = data[data['network']==\"Eco-City\"]['lat'].values\n# numeco = data[data['network']==\"Eco-City\"]['id_station'].astype('str').values","13271c51":"# %%time\n# # Visualization\n# fig = plt.figure(figsize=(12,10))\n# plt.contourf(X, Y, Z)\n\n# plt.scatter(xseb, yseb, c='gray', s=100, label='SaveEcoBot')\n# for i in range(len(xseb)):\n#     plt.annotate(\"  \"+numseb[i], xy=(xseb[i], yseb[i]), textcoords='data')\n    \n# plt.scatter(xeco, yeco, c='k', s=100, label='EcoCity')\n# plt.colorbar()\n# for i in range(len(xeco)):\n#     plt.annotate(\"  \"+numeco[i], xy=(xeco[i], yeco[i]), textcoords='data')\n\n# plt.axis()\n# type_agg_str = 'average' if type_agg=='mean' else 'maximum'\n# time_agg_str = 'hour' if time_interval=='H' else 'D'\n# plt.title(f'Stations in Vinnytsia region with {type_agg_str} data per {time_agg_str} for {indicator_name} in {datetime_analysis} (maximum value = {round(data.value.max(),2)})')\n# plt.legend(loc='best')\n# plt.grid()\n# plt.show()","e28250ee":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","b29f8800":"### 2.2 Download data from EcoCity<a class=\"anchor\" id=\"2.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","8b1d4eac":"## 6. Result visualization<a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","4d3df0ef":"<a class=\"anchor\" id=\"0\"><\/a>\n# Air Quality City - for Vinnytsia city - Prediction by parameters, AQI and Mapping\n\n# Datasets:\n* [Air Quality Monitoring from EcoCity](https:\/\/www.kaggle.com\/vbmokin\/air-quality-monitoring-from-ecocity)\n* [Air Quality Monitoring](https:\/\/www.kaggle.com\/vbmokin\/air-quality-monitoring)","035eee7e":"## 3. Prediction<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","468aa6e0":"## 5. AQI determination<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","f99814a1":"## Acknowledgements\n\n### Notebooks:\n* [Air Quality in City - 2D Analysis](https:\/\/www.kaggle.com\/vbmokin\/air-quality-in-city-2d-analysis)\n* [Air Quality in Region - 2D Analysis](https:\/\/www.kaggle.com\/vbmokin\/air-quality-in-region-2d-analysis)\n* [Air Quality City - Stations data prediction](https:\/\/www.kaggle.com\/vbmokin\/air-quality-city-stations-data-prediction)\n* [Calculating AQI (Air Quality Index) Tutorial](https:\/\/www.kaggle.com\/rohanrao\/calculating-aqi-air-quality-index-tutorial)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [EDA for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/eda-for-tabular-data-advanced-techniques)\n* [COVID in UA: Prophet with 4, Nd seasonality](https:\/\/www.kaggle.com\/vbmokin\/covid-in-ua-prophet-with-4-nd-seasonality)\n\n### Kaggle Datasets:\n* [Air Quality Monitoring from EcoCity](https:\/\/www.kaggle.com\/vbmokin\/air-quality-monitoring-from-ecocity)\n* [Air Quality Monitoring](https:\/\/www.kaggle.com\/vbmokin\/air-quality-monitoring)\n\n### Thanks to: \n* https:\/\/pypi.org\/project\/gmplot\/\n* https:\/\/livecodestream.dev\/post\/how-to-plot-your-data-on-maps-using-python-and-folium\/","dbc35018":"## 4. Mapping<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","788f35c0":"### 2.3 Data aggregation<a class=\"anchor\" id=\"2.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","82e9a6d1":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n   - [Download data from SaveEcoBot](#2.1)\n   - [Download data from EcoCity](#2.2)\n   - [Data aggregation](#2.3)\n1. [Prediction](#3)\n1. [Mapping](#4)\n1. [AQI determination](#5)\n1. [Result visualization](#6)","194c1df5":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","4806d99a":"### 2.1 Download data from SaveEcoBot<a class=\"anchor\" id=\"2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","63c4483d":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)"}}