{"cell_type":{"6579bde6":"code","72c2df48":"code","bb22ead1":"code","1526962e":"code","d373e818":"code","4ddad981":"code","fa15687e":"code","70e5d667":"code","da5901f1":"code","01473d28":"markdown","8f08131a":"markdown","52ee17de":"markdown","0cbd11c8":"markdown","22ae7247":"markdown","3c14b699":"markdown","333becaa":"markdown","6c608632":"markdown","1e482ec4":"markdown","6ca65823":"markdown"},"source":{"6579bde6":"import pandas as pd\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn","72c2df48":"# Preparatory part of the code\ntest = pd.read_csv('..\/input\/titanic\/test.csv') # load test dataset\ntest['Boy'] = (test.Name.str.split().str[1] == 'Master.').astype('int')\ntest['Family'] = test['SibSp'] + test['Parch']\nsubmission = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': pd.Series(dtype='int8')})\n\n# Three lines of code for LB = 0.77990 (not less 85% teams - Titanic Top 15%) \n# Reasoning the statements see below (EDA)\n\n# Statement 1\ntest['Survived'] = [1 if (x == 'female') else 0 for x in test['Sex']]\n\n# Statement 2\ntest.loc[(test.Boy == 1), 'Survived'] = 1\n\n# Statements 3,4\ntest.loc[((test.Pclass == 3) & (test.Embarked == 'S') & ~((test.Boy == 1) & (test.Family > 0) & (test.Family < 4))), 'Survived'] = 0\n\n# Saving the result\nsubmission.Survived = test.Survived\nsubmission.to_csv('submission.csv', index=False)","bb22ead1":"# Reasoning for Statement 1 \n# Thanks for the idea to: https:\/\/www.kaggle.com\/mylesoneill\/tutorial-1-gender-based-model-0-76555 \n# Thanks for the idea of plot to: https:\/\/www.kaggle.com\/pavlofesenko\/simplest-top-10-titanic-0-80861\nimport matplotlib.pyplot as plt\n\ndef highlight(value):\n    if value >= 0.5:\n        style = 'background-color: palegreen'\n    else:\n        style = 'background-color: pink'\n    return style\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv') # load train dataset\npd.pivot_table(train, values='Survived', index=['Sex']).style.applymap(highlight)","1526962e":"# Reasoning for Statement 2\n# Thanks for the plot to: https:\/\/www.kaggle.com\/pavlofesenko\/simplest-top-10-titanic-0-80861\ntrain['Boy'] = (train.Name.str.split().str[1] == 'Master.').astype('int')\npd.pivot_table(train, values='Survived', index='Pclass', columns='Boy').style.applymap(highlight)","d373e818":"# Reasoning for Statement 3\n# Thanks for the plot to: https:\/\/www.kaggle.com\/pavlofesenko\/simplest-top-10-titanic-0-80861\npd.pivot_table(train, values='Survived', index=['Pclass', 'Embarked'], columns='Sex').style.applymap(highlight)","4ddad981":"# Reasoning for Statement 4\ntrain['Family'] = train['SibSp'] + train['Parch']\npd.pivot_table(train, values='Survived', index=['Pclass','Embarked','Boy','Family']).style.applymap(highlight)","fa15687e":"train","70e5d667":"# Statements 1,2,3,4 in 4 lines of code:\ntest['Survived'] = [1 if (x == 'female') else 0 for x in test['Sex']]\ntest.loc[(test.Boy == 1), 'Survived'] = 1\ntest.loc[((test.Pclass == 3) & (test.Embarked == 'S')), 'Survived'] = 0\ntest.loc[((test.Pclass == 3) & (test.Embarked == 'S') & (test.Boy == 1) & (test.Family > 0) & (test.Family < 4)), 'Survived'] = 1","da5901f1":"# Statements 1,2,3,4 in 3 lines of code (see above):\ntest['Survived'] = [1 if (x == 'female') else 0 for x in test['Sex']]\ntest.loc[(test.Boy == 1), 'Survived'] = 1\ntest.loc[((test.Pclass == 3) & (test.Embarked == 'S') & ~((test.Boy == 1) & (test.Family > 0) & (test.Family < 4))), 'Survived'] = 0","01473d28":"Thanks to:\n\n* [Three lines of code for Titanic Top 20%](https:\/\/www.kaggle.com\/vbmokin\/three-lines-of-code-for-titanic-top-20)\n* [Titanic (0.83253) - Comparison 20 popular models](https:\/\/www.kaggle.com\/vbmokin\/titanic-0-83253-comparison-20-popular-models)\n* [Titanic Top 3% : cluster analysis](https:\/\/www.kaggle.com\/vbmokin\/titanic-top-3-cluster-analysis)\n* [Feature importance - xgb, lgbm, logreg, linreg](https:\/\/www.kaggle.com\/vbmokin\/feature-importance-xgb-lgbm-logreg-linreg)\n* [Tutorial 1: Gender Based Model (0.76555)](https:\/\/www.kaggle.com\/mylesoneill\/tutorial-1-gender-based-model-0-76555)\n* [Simplest Top 10% Titanic [0.80861]](https:\/\/www.kaggle.com\/pavlofesenko\/simplest-top-10-titanic-0-80861)\n* https:\/\/nbviewer.jupyter.org\/github\/agconti\/kaggle-titanic\/blob\/master\/Titanic.ipynb","8f08131a":"Before making predictions with complex algorithms, I tried to make it simple. Early I developed a kernel (https:\/\/www.kaggle.com\/vbmokin\/three-lines-of-code-for-titanic-top-20) that had three lines of code based on three statements and provides a LB of at least 80% of teams - Titanic Top 20%. Now I have figured out how to improve it. I added fourth statement and created 4 lines of code and then optimized this kernel again to 3 lines of main code.This provides a LB of at least 86% of teams - Titanic Top 14%, but the leaderboard is constantly changing - Titanic Top 15% will be more reliable. After the code I have justified in the form of graphs (EDA), from which the statements are obvious.\n\nAfter update Rules (Public LB is calculated with all of the test data) this notebook has score 0.7799 = Top 25%.","52ee17de":"### Statement 1. Women all survived and men all died","0cbd11c8":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/6e\/St%C3%B6wer_Titanic.jpg)","22ae7247":"### Statement 2. All boys ('Master') from the 1-2 classes survived","3c14b699":"## Titanic : three lines of code for LB = 0.7799 (earler it was LB = 0.79425 = Top 15%)","333becaa":"### Statement 3. Everybody from the class 3 cabins that were sat in Southampton ('S') were died","6c608632":"# [Titanic: Machine Learning from Disaster](https:\/\/www.kaggle.com\/c\/titanic)","1e482ec4":"# Reasoning (EDA)","6ca65823":"### Statement 4. The boys from the small families ('Family' = 1,2,3) of the third class cabins who were sitting in Southampton all survived"}}