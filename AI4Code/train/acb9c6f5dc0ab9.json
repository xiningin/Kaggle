{"cell_type":{"56ef90a0":"code","e513cba0":"code","23f110c5":"code","afbfcb66":"code","eb4ca60e":"code","c3a685bc":"code","d0fc299b":"code","60d64f10":"code","66a77e52":"code","c8f4b838":"code","dce2d7b5":"code","dae54cf1":"code","9f207076":"code","421503db":"code","d27bbb64":"code","59071757":"code","56794249":"code","78bb8ac4":"code","0958025b":"code","60f11f07":"code","cee405ae":"code","4f9ad09d":"code","bbfc5650":"code","c5928a51":"code","cfe65625":"code","5153e8eb":"code","e2006a69":"code","d32ce3b8":"code","6bd54e9a":"code","0d0b0563":"code","e2468728":"code","4e6b095e":"code","49e80948":"code","2751cbc1":"code","3fdfc42c":"code","3fdbb246":"code","96a8eca8":"code","575d12cb":"code","8944cb6e":"code","cd36f724":"code","e2f53e8f":"code","ecfbca1a":"code","57548a0f":"code","c616e23a":"code","1ee20d65":"code","64597b66":"code","7ef41037":"code","8727398d":"code","947bc66a":"code","45b5b54d":"code","634a82cf":"markdown","b3ebbee1":"markdown","82c02ebf":"markdown","eba7e016":"markdown","8a0052ad":"markdown","e6139fc1":"markdown","52dbc16d":"markdown","d59a3dab":"markdown","83917d6d":"markdown","37afca2c":"markdown","83a175d7":"markdown","8a159f39":"markdown","576b44f9":"markdown","ba0eb7b6":"markdown","0275fae3":"markdown","124e9114":"markdown","edc8381f":"markdown","b6e01290":"markdown","6939931d":"markdown","412564e3":"markdown","48d8c819":"markdown","5a42fcb6":"markdown","d9e1fe8d":"markdown","f3e788d0":"markdown","7ec92730":"markdown","42ec8fb7":"markdown","f3db8b76":"markdown","98ad8506":"markdown","55506c3a":"markdown","ac2e2cf7":"markdown","9caf45c3":"markdown","afe796f6":"markdown","3df82d9a":"markdown","426ea177":"markdown","9542cdb7":"markdown","8f7af1b1":"markdown","b9d590e4":"markdown","70cff30a":"markdown","5d8e8ff7":"markdown","4a203a1a":"markdown","65cd0bd4":"markdown"},"source":{"56ef90a0":"import numpy as np \nimport pandas as pd\n\n# Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\n\n# Models\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\n# Pipelines\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.compose import ColumnTransformer\n\n# Helpers\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.metrics import accuracy_score, mean_squared_error, make_scorer, mean_absolute_error\n\n\nsns.set_theme()","e513cba0":"df_train = pd.read_csv('..\/input\/raifhackds2021fall\/data\/train.csv')","23f110c5":"df_train","afbfcb66":"df_train.describe()","eb4ca60e":"def print_missing_values(df):\n    missing_values_df = pd.DataFrame(columns=['dtype','Feature', 'Number Of Missing Values', 'Percentage of Missing values'])\n\n    for i in df:\n        if df[i].isnull().sum() != 0:\n            dtype = df[i].dtype\n            feature                      = i\n            number_of_missing_values     = df[i].isnull().sum()\n            percentage_of_missing_values = round(number_of_missing_values \/ len(df.index) * 100, 2)\n            missing_values_df = missing_values_df.append({\n                                      'dtype': dtype,\n                                      'Feature': i,\n                                      'Number Of Missing Values': number_of_missing_values,\n                                      'Percentage of Missing values': percentage_of_missing_values\n            }, ignore_index=True)\n\n    return missing_values_df","c3a685bc":"print_missing_values(df_train)","d0fc299b":"def print_unique_values(df):\n    unique_values_df = pd.DataFrame(columns=['Feature', 'Number of values', 'Values'])\n\n    for col in df:\n        unique_values_df = unique_values_df.append({\n                                      'Feature': col,\n                                      'Number of values': df[col].unique().shape[0],\n                                      'Values': df[col].unique()\n            }, ignore_index=True)\n    \n    pd.set_option('display.max_rows', len(unique_values_df))\n    return unique_values_df","60d64f10":"print_unique_values(df_train)","66a77e52":"ID = df_train['id']\ndf_train.drop(['id', 'lat', 'lng', 'osm_city_nearest_name', 'date', 'street', 'floor', 'osm_city_closest_dist'], axis=1, inplace=True)","c8f4b838":"print_unique_values(df_train)","dce2d7b5":"def location(df):\n    is_moscow = []\n    is_moscow_oblast = []\n    is_region = []\n\n    for row in df['region']:\n        if row == '\u041c\u043e\u0441\u043a\u0432\u0430':\n            is_moscow.append(1)\n            is_moscow_oblast.append(0)\n            is_region.append(0)\n        elif row == '\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c':\n            is_moscow.append(0)\n            is_moscow_oblast.append(1)\n            is_region.append(0)\n        else:\n            is_moscow.append(0)\n            is_moscow_oblast.append(0)\n            is_region.append(1)\n\n    df['is_moscow'] = is_moscow\n    df['is_moscow_oblast'] = is_moscow_oblast\n    df['is_region'] = is_region\n\n    df.drop(['region'], axis=1, inplace=True)\n    \n    print('Moscow: ' + str((len(df[df['is_moscow'] == 1]))))\n    print('Moscow oblast: ' + str((len(df[df['is_moscow_oblast'] == 1]))))\n    print('Region: ' + str((len(df[df['is_region'] == 1]))))\n\nlocation(df_train)","dae54cf1":"def cities_1m(df):\n    cities_1m_people = ['\u041c\u043e\u0441\u043a\u0432\u0430', '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433', '\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a', '\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0431\u0443\u0440\u0433', '\u041a\u0430\u0437\u0430\u043d\u044c', '\u041d\u0438\u0436\u043d\u0438\u0439 \u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434', '\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a', '\u0421\u0430\u043c\u0430\u0440\u0430', '\u041e\u043c\u0441\u043a',\n                       '\u0420\u043e\u0441\u0442\u043e\u0432-\u043d\u0430-\u0414\u043e\u043d\u0443', '\u0423\u0444\u0430', '\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a', '\u0412\u043e\u0440\u043e\u043d\u0435\u0436', '\u041f\u0435\u0440\u043c\u044c', '\u0412\u043e\u043b\u0433\u043e\u0433\u0440\u0430\u0434']\n\n    is_million = []\n    is_not_million = []\n\n    for row in df['city']:\n        if row in cities_1m_people:\n            is_million.append(1)\n            is_not_million.append(0)\n        else:\n            is_million.append(0)\n            is_not_million.append(1)\n\n    df['is_million'] = is_million\n    df['is_not_million'] = is_not_million\n\n    df.drop(['city'], axis=1, inplace=True)\n    \n    print('is_million: ' + str((len(df[df['is_million'] == 1]))))\n    print('is_not_million: ' + str((len(df[df['is_not_million'] == 1]))))\n    \ncities_1m(df_train)","9f207076":"def make_district(df):\n    district_rate = []\n\n    for row in df['realty_type']:\n        if row == 110:\n            district_rate.append(1)\n        elif row == 100:\n            district_rate.append(10)\n        elif row == 10:\n            district_rate.append(0)\n\n    df['district_rate'] = district_rate\n\n    df.drop(['realty_type'], axis=1, inplace=True)\n    \nmake_district(df_train)","421503db":"def offices(df):\n    many_offices = []\n\n    for i in range(len(df['osm_offices_points_in_0.001'])):\n        if df['osm_offices_points_in_0.001'][i] > 2 or df['osm_offices_points_in_0.005'][i] > 10 or df['osm_offices_points_in_0.0075'][i] > 15 or df['osm_offices_points_in_0.01'][i] > 20:\n            many_offices.append(1)\n        else:\n            many_offices.append(0)\n\n    df['many_offices'] = many_offices\n\n    df.drop(['osm_offices_points_in_0.001', 'osm_offices_points_in_0.005', 'osm_offices_points_in_0.0075', 'osm_offices_points_in_0.01'], axis=1, inplace=True)\n    \noffices(df_train)","d27bbb64":"def food(df):\n    many_food = []\n\n    for i in range(len(df['osm_catering_points_in_0.001'])):\n        if df['osm_catering_points_in_0.001'][i] > 2 or df['osm_catering_points_in_0.005'][i] > 10 or df['osm_catering_points_in_0.0075'][i] > 15 or df['osm_catering_points_in_0.01'][i] > 20:\n            many_food.append(1)\n        else:\n            many_food.append(0)\n\n    df['many_food'] = many_food\n\n    df.drop(['osm_catering_points_in_0.001', 'osm_catering_points_in_0.005', 'osm_catering_points_in_0.0075', 'osm_catering_points_in_0.01'], axis=1, inplace=True)\n    \nfood(df_train)","59071757":"def shops(df):\n    many_shops = []\n\n    for i in range(len(df['osm_shops_points_in_0.001'])):\n        if df['osm_shops_points_in_0.001'][i] > 2 or df['osm_shops_points_in_0.005'][i] > 10 or df['osm_shops_points_in_0.0075'][i] > 15 or df['osm_shops_points_in_0.01'][i] > 20:\n            many_shops.append(1)\n        else:\n            many_shops.append(0)\n\n    df['many_shops'] = many_shops\n\n    df.drop(['osm_shops_points_in_0.001', 'osm_shops_points_in_0.005', 'osm_shops_points_in_0.0075', 'osm_shops_points_in_0.01'], axis=1, inplace=True)\n    \nshops(df_train)","56794249":"def financial_organizations(df):\n    many_financial_organizations = []\n\n    for i in range(len(df['osm_finance_points_in_0.001'])):\n        if df['osm_finance_points_in_0.001'][i] > 2 or df['osm_finance_points_in_0.005'][i] > 10 or df['osm_finance_points_in_0.0075'][i] > 15 or df['osm_finance_points_in_0.01'][i] > 20:\n            many_financial_organizations.append(1)\n        else:\n            many_financial_organizations.append(0)\n\n    df['many_financial_organizations'] = many_financial_organizations\n\n    df.drop(['osm_finance_points_in_0.001', 'osm_finance_points_in_0.005', 'osm_finance_points_in_0.0075', 'osm_finance_points_in_0.01'], axis=1, inplace=True)\n    \nfinancial_organizations(df_train)","78bb8ac4":"def medecine(df):\n    many_medicine = []\n\n    for i in range(len(df['osm_healthcare_points_in_0.005'])):\n        if df['osm_healthcare_points_in_0.005'][i] > 1 or df['osm_healthcare_points_in_0.0075'][i] > 1 or df['osm_healthcare_points_in_0.01'][i] > 1:\n            many_medicine.append(1)\n        else:\n            many_medicine.append(0)\n\n    df['many_medicine'] = many_medicine\n\n    df.drop(['osm_healthcare_points_in_0.005', 'osm_healthcare_points_in_0.0075', 'osm_healthcare_points_in_0.01'], axis=1, inplace=True)\n    \nmedecine(df_train)","0958025b":"def entertainment(df):\n    many_entertainment = []\n\n    for i in range(len(df['osm_leisure_points_in_0.005'])):\n        if df['osm_leisure_points_in_0.005'][i] > 1 or df['osm_leisure_points_in_0.0075'][i] > 3 or df['osm_leisure_points_in_0.01'][i] > 1:\n            many_entertainment.append(1)\n        else:\n            many_entertainment.append(0)\n\n    df['many_entertainment'] = many_entertainment\n\n    df.drop(['osm_leisure_points_in_0.005', 'osm_leisure_points_in_0.0075', 'osm_leisure_points_in_0.01'], axis=1, inplace=True)\n    \nentertainment(df_train)","60f11f07":"def hist_obj(df):\n    many_historical_objects = []\n\n    for i in range(len(df['osm_historic_points_in_0.005'])):\n        if df['osm_historic_points_in_0.005'][i] > 1 or df['osm_historic_points_in_0.0075'][i] > 3 or df['osm_historic_points_in_0.01'][i] > 1:\n            many_historical_objects.append(1)\n        else:\n            many_historical_objects.append(0)\n\n    df['many_historical_objects'] = many_historical_objects\n\n    df.drop(['osm_historic_points_in_0.005', 'osm_historic_points_in_0.0075', 'osm_historic_points_in_0.01'], axis=1, inplace=True)\n    \nhist_obj(df_train)","cee405ae":"def buildings(df):\n    many_buildings = []\n\n    for i in range(len(df['osm_building_points_in_0.001'])):\n        if df['osm_building_points_in_0.001'][i] > 2 or df['osm_building_points_in_0.005'][i] > 5:\n            many_buildings.append(1)\n        else:\n            many_buildings.append(0)\n\n    df['many_buildings'] = many_buildings\n\n    df.drop(['osm_building_points_in_0.001', 'osm_building_points_in_0.005'], axis=1, inplace=True)\n    \nbuildings(df_train)","4f9ad09d":"print_unique_values(df_train)","bbfc5650":"def hotels(df):\n    many_hotels = []\n\n    for i in range(len(df['osm_hotels_points_in_0.005'])):\n        if df['osm_hotels_points_in_0.005'][i] > 1 or df['osm_hotels_points_in_0.0075'][i] > 1 or df['osm_hotels_points_in_0.01'][i] > 1:\n            many_hotels.append(1)\n        else:\n            many_hotels.append(0)\n\n    df['many_hotels'] = many_hotels\n\n    df.drop(['osm_hotels_points_in_0.005', 'osm_hotels_points_in_0.0075', 'osm_hotels_points_in_0.01'], axis=1, inplace=True)\n    \nhotels(df_train)","c5928a51":"def stations_score(df):\n    station_rate = []\n\n    for row in df['osm_train_stop_closest_dist']:\n        if row > 4:\n            station_rate.append(0)\n        elif row <= 4 and row > 1:\n            station_rate.append(5)\n        else:\n            station_rate.append(1)\n\n    df['station_rate'] = station_rate\n\n    df.drop(['osm_train_stop_closest_dist'], axis=1, inplace=True)\n    \nstations_score(df_train)","cfe65625":"def stations(df):\n    many_stations = []\n\n    for i in range(len(df['osm_train_stop_points_in_0.005'])):\n        if df['osm_train_stop_points_in_0.005'][i] > 1 or df['osm_train_stop_points_in_0.0075'][i] > 1 or df['osm_train_stop_points_in_0.01'][i] > 1:\n            many_stations.append(1)\n        else:\n            many_stations.append(0)\n\n    df['many_stations'] = many_stations\n\n    df.drop(['osm_train_stop_points_in_0.005', 'osm_train_stop_points_in_0.0075', 'osm_train_stop_points_in_0.01'], axis=1, inplace=True)\n    \nstations(df_train)","5153e8eb":"def land_transport(df):\n    many_land_transport = []\n\n    for i in range(len(df['osm_transport_stop_points_in_0.005'])):\n        if df['osm_transport_stop_points_in_0.005'][i] > 1 or df['osm_transport_stop_points_in_0.0075'][i] > 1 or df['osm_transport_stop_points_in_0.01'][i] > 1:\n            many_land_transport.append(1)\n        else:\n            many_land_transport.append(0)\n\n    df['many_land_transport'] = many_land_transport\n\n    df.drop(['osm_transport_stop_points_in_0.005', 'osm_transport_stop_points_in_0.0075', 'osm_transport_stop_points_in_0.01',\n             'osm_transport_stop_closest_dist', 'osm_subway_closest_dist'], axis=1, inplace=True)\n    \nland_transport(df_train)","e2006a69":"def pedestrian_crossings(df):\n    many_pedestrian_crossings = []\n\n    for i in range(len(df['osm_crossing_points_in_0.001'])):\n        if df['osm_crossing_points_in_0.001'][i] > 1 or df['osm_crossing_points_in_0.005'][i] > 1 or df['osm_crossing_points_in_0.0075'][i] > 1 or df['osm_crossing_points_in_0.01'][i]:\n            many_pedestrian_crossings.append(1)\n        else:\n            many_pedestrian_crossings.append(0)\n\n    df['many_pedestrian_crossings'] = many_pedestrian_crossings\n\n    df.drop(['osm_crossing_points_in_0.001', 'osm_crossing_points_in_0.005', 'osm_crossing_points_in_0.0075', 'osm_crossing_points_in_0.01', \n            'osm_crossing_closest_dist'], axis=1, inplace=True)\n    \npedestrian_crossings(df_train)","d32ce3b8":"def culture_objects(df):\n    many_culture_objects = []\n\n    for i in range(len(df['osm_culture_points_in_0.001'])):\n        if df['osm_culture_points_in_0.001'][i] > 1 or df['osm_culture_points_in_0.005'][i] > 1 or df['osm_culture_points_in_0.0075'][i] > 1  or df['osm_culture_points_in_0.01'][i] > 1:\n            many_culture_objects.append(1)\n        else:\n            many_culture_objects.append(0)\n\n    df['many_culture_objects'] = many_culture_objects\n\n    df.drop(['osm_culture_points_in_0.001', 'osm_culture_points_in_0.005', 'osm_culture_points_in_0.0075', 'osm_culture_points_in_0.01'], axis=1, inplace=True)\n    \nculture_objects(df_train)","6bd54e9a":"def comfort_objects(df):\n    many_comfort_objects = []\n\n    for i in range(len(df['osm_amenity_points_in_0.001'])):\n        if df['osm_amenity_points_in_0.001'][i] > 1 or df['osm_amenity_points_in_0.005'][i] > 1 or df['osm_amenity_points_in_0.0075'][i] > 1  or df['osm_amenity_points_in_0.01'][i] > 1:\n            many_comfort_objects.append(1)\n        else:\n            many_comfort_objects.append(0)\n\n    df['many_comfort_objects'] = many_comfort_objects\n\n    df.drop(['osm_amenity_points_in_0.001', 'osm_amenity_points_in_0.005', 'osm_amenity_points_in_0.0075', 'osm_amenity_points_in_0.01'], axis=1, inplace=True)\n    \ncomfort_objects(df_train)","0d0b0563":"print_unique_values(df_train)","e2468728":"print_missing_values(df_train)","4e6b095e":"df_train['reform_house_population_500'] = df_train['reform_house_population_500'].fillna(df_train['reform_house_population_500'].median())\ndf_train['reform_house_population_1000'] = df_train['reform_house_population_1000'].fillna(df_train['reform_house_population_1000'].median())\ndf_train['reform_mean_floor_count_1000'] = df_train['reform_mean_floor_count_1000'].fillna(df_train['reform_mean_floor_count_1000'].median())\n# df['reform_mean_floor_count_1000'] = df['reform_mean_floor_count_1000'].apply(lambda x: np.log(x+1))\ndf_train['reform_mean_floor_count_500'] = df_train['reform_mean_floor_count_500'].fillna(df_train['reform_mean_floor_count_500'].median())\ndf_train['reform_mean_year_building_1000'] = df_train['reform_mean_year_building_1000'].fillna(df_train['reform_mean_year_building_1000'].median())\ndf_train['reform_mean_year_building_500'] = df_train['reform_mean_year_building_500'].fillna(df_train['reform_mean_year_building_500'].median())","49e80948":"print_missing_values(df_train[df_train['osm_city_nearest_population'].isnull()])","2751cbc1":"df_train = df_train[df_train['osm_city_nearest_population'].notna()]","3fdfc42c":"print_missing_values(df_train[df_train['reform_mean_floor_count_500'].isnull()])","3fdbb246":"print_missing_values(df_train[df_train['reform_mean_year_building_1000'].isnull()])","96a8eca8":"print_missing_values(df_train[df_train['reform_mean_year_building_500'].isnull()])","575d12cb":"print_missing_values(df_train)","8944cb6e":"print_missing_values(df_train)","cd36f724":"# df['floor'] = df['floor'].replace({'\u043f\u043e\u0434\u0432\u0430\u043b': -1,'\u0446\u043e\u043a\u043e\u043b\u044c': 0,'\u0430\u043d\u0442\u0440\u0435\u0441\u043e\u043b\u044c' : 1.5,\n#                                    '\u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 1 \u044d\u0442\u0430\u0436\u0430':1,'\u0442\u0435\u0445.\u044d\u0442\u0430\u0436 (6)':6,\n#                                     '\u043f\u043e\u0434\u0432\u0430\u043b': 1,'\u0446\u043e\u043a\u043e\u043b\u044c, 1': 1,\n#                                    '1,2,\u0430\u043d\u0442\u0440\u0435\u0441\u043e\u043b\u044c':1.5,'\u041f\u043e\u0434\u0432\u0430\u043b':-1,\n#                                    '\u0426\u043e\u043a\u043e\u043b\u044c':0.6 ,'1,2,3':'1', '\u043f\u043e\u0434\u0432\u0430\u043b':'1'})\n\n\n# flors = ['-1','1', '2', '1', '4', '5', '3',\n#        '0.6', '10', '6', '1', '1', '1', '1',\n#        '5', '1', '12', '15', '13',\n#        '1, ', '2', '1', '8', '7',\n#        '0', '3', '1',\n#        '1', '1', '4', '1,', '9',\n#        '1 ', '1', '1', '1',\n#        '4', '2', '4', '1', '18', '1',\n#        '0', '-1', '1', '3', '1',\n#        '1', '3', '1',\n#        '1', '3', '-1', '3', '11', '36', '7',\n#        '1', '1', '3', '4', '5', '1',\n#        '29', '-1, ', '3']\n# old_flors = ['\u043f\u043e\u0434\u0432\u0430\u043b', '1', '2', '1.5', '4', '5', '3',\n#        '0.6', '10', '6', '1, \u043f\u043e\u0434\u0432\u0430\u043b', '1,2,3,4', '1,2', '1,2,3,4,5',\n#        '5, \u043c\u0430\u043d\u0441\u0430\u0440\u0434\u0430', '1-\u0439, \u043f\u043e\u0434\u0432\u0430\u043b', '12', '15', '13',\n#        '1, \u043f\u043e\u0434\u0432\u0430\u043b, \u0430\u043d\u0442\u0440\u0435\u0441\u043e\u043b\u044c', '\u043c\u0435\u0437\u043e\u043d\u0438\u043d', '\u043f\u043e\u0434\u0432\u0430\u043b, 1-3', '8', '7',\n#        '1 (\u0426\u043e\u043a\u043e\u043b\u044c\u043d\u044b\u0439 \u044d\u0442\u0430\u0436)', '3, \u041c\u0430\u043d\u0441\u0430\u0440\u0434\u0430 (4 \u044d\u0442)', '\u043f\u043e\u0434\u0432\u0430\u043b,1',\n#        '1, \u0430\u043d\u0442\u0440\u0435\u0441\u043e\u043b\u044c', '1-3', '\u043c\u0430\u043d\u0441\u0430\u0440\u0434\u0430 (4\u044d\u0442)', '1, 2.', '9',\n#        '\u043f\u043e\u0434\u0432\u0430\u043b , 1 ', '1, 2', '\u043f\u043e\u0434\u0432\u0430\u043b, 1,2,3', '1 + \u043f\u043e\u0434\u0432\u0430\u043b (\u0431\u0435\u0437 \u043e\u0442\u0434\u0435\u043b\u043a\u0438)',\n#        '\u043c\u0430\u043d\u0441\u0430\u0440\u0434\u0430', '2,3', '4, 5', '1-\u0439, 2-\u0439', '18', '1',\n#        '1, \u0446\u043e\u043a\u043e\u043b\u044c', '\u043f\u043e\u0434\u0432\u0430\u043b', '3 (\u0430\u043d\u0442\u0440\u0435\u0441\u043e\u043b\u044c)', '1, 2, 3',\n#        '\u0426\u043e\u043a\u043e\u043b\u044c, 1,2(\u043c\u0430\u043d\u0441\u0430\u0440\u0434\u0430)', '\u043f\u043e\u0434\u0432\u0430\u043b, 3. 4 \u044d\u0442\u0430\u0436', '\u043f\u043e\u0434\u0432\u0430\u043b, 1-4 \u044d\u0442\u0430\u0436',\n#        '\u043f\u043e\u0434\u0432\u0430, 1.2 \u044d\u0442\u0430\u0436', '2, 3', '-1', '1.2', '11', '36', '7,8',\n#        '1 \u044d\u0442\u0430\u0436', '1-\u0439', '3 \u044d\u0442\u0430\u0436', '4 \u044d\u0442\u0430\u0436', '5 \u044d\u0442\u0430\u0436', '\u043f\u043e\u0434\u0432\u0430\u043b,1,2,3,4,5',\n#        '29', '\u043f\u043e\u0434\u0432\u0430\u043b, \u0446\u043e\u043a\u043e\u043b\u044c, 1 \u044d\u0442\u0430\u0436', '3, \u043c\u0430\u043d\u0441\u0430\u0440\u0434\u0430']\n\n# res = dict(zip (old_flors,flors))\n\n# df['floor'] = df['floor'].replace(res)\n\n# df['floor'] = df['floor'].replace({'\u043f\u043e\u0434\u0432\u0430\u043b, 1':'0',np.nan:0})\n\n# df['floor'] = df['floor'].replace({'1 \u044d\u0442\u0430\u0436, \u043f\u043e\u0434\u0432\u0430\u043b': '0', np.nan: 0})\n\n# df['floor'].unique()","e2f53e8f":"X, y = df_train.loc[:, df_train.columns != 'per_square_meter_price'], df_train['per_square_meter_price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","ecfbca1a":"lg = LinearRegression()\n\nlg.fit(X_train, y_train)\n\nmean_squared_error(y_test, lg.predict(X_test))","57548a0f":"tree = DecisionTreeRegressor(random_state=3)\n\ntree.fit(X_train, y_train)\n\nmean_squared_error(y_test, tree.predict(X_test))","c616e23a":"random_tree = RandomForestRegressor(random_state=3)\n\nrandom_tree.fit(X_train, y_train)\n\nmean_squared_error(y_test, random_tree.predict(X_test))","1ee20d65":"# gb = GradientBoostingRegressor(random_state=3)\n\n# gb.fit(X_train, y_train)\n\n# mean_squared_error(y_test, gb.predict(X_test))","64597b66":"df_test = pd.read_csv('..\/input\/raifhackds2021fall\/data\/test.csv')","7ef41037":"ID = df_test['id']\ndf_test.drop(['id', 'lat', 'lng', 'osm_city_nearest_name', 'date', 'street', 'floor', 'osm_city_closest_dist'], axis=1, inplace=True)\n\ndf_test['reform_house_population_500'] = df_test['reform_house_population_500'].fillna(df_test['reform_house_population_500'].median())\ndf_test['reform_house_population_1000'] = df_test['reform_house_population_1000'].fillna(df_test['reform_house_population_1000'].median())\ndf_test['reform_mean_floor_count_1000'] = df_test['reform_mean_floor_count_1000'].fillna(df_test['reform_mean_floor_count_1000'].median())\n# df['reform_mean_floor_count_1000'] = df['reform_mean_floor_count_1000'].apply(lambda x: np.log(x+1))\ndf_test['reform_mean_floor_count_500'] = df_test['reform_mean_floor_count_500'].fillna(df_test['reform_mean_floor_count_500'].median())\ndf_test['reform_mean_year_building_1000'] = df_test['reform_mean_year_building_1000'].fillna(df_test['reform_mean_year_building_1000'].median())\ndf_test['reform_mean_year_building_500'] = df_test['reform_mean_year_building_500'].fillna(df_test['reform_mean_year_building_500'].median())","8727398d":"location(df_test)\ncities_1m(df_test)\nmake_district(df_test)\noffices(df_test)\nfood(df_test)\nshops(df_test)\nfinancial_organizations(df_test)\nmedecine(df_test)\nentertainment(df_test)\nhist_obj(df_test)\nbuildings(df_test)\nhotels(df_test)\nstations_score(df_test)\nstations(df_test)\nland_transport(df_test)\npedestrian_crossings(df_test)\nculture_objects(df_test)\ncomfort_objects(df_test)","947bc66a":"random_tree.predict(df_test)","45b5b54d":"output = pd.DataFrame({'id': ID, 'per_square_meter_price': random_tree.predict(df_test)})\noutput.to_csv('my_submission.csv', index=False)\n\nprint(\"Your submission was successfully saved!\")","634a82cf":"<h1 style='background-color: #fecfffcd; border: 1px solid #d194cf; padding: 10px; font-weight: 400; text-align:center'>Filling NA's<\/h1>","b3ebbee1":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Quick view<\/h1>","82c02ebf":"<h1 style='background-color: #fecfffcd; border: 1px solid #d194cf; padding: 10px; font-weight: 400; text-align:center'>'reform_mean_year_building_500' missing values = 100%<\/h1>","eba7e016":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Comfort objects [Feature engineering]<\/h1>","8a0052ad":"<div style='text-align: center'>\n    <img src='https:\/\/i.postimg.cc\/HLF8SsJK\/B041-Bank-of-the-West.jpg' width='700' \/>\n<\/div>","e6139fc1":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Gradient Boosting Regressor<\/h1>","52dbc16d":"<h1 style='background-color: #fecfffcd; border: 1px solid #d194cf; padding: 10px; font-weight: 400; text-align:center'>Fill 'floor' NA's<\/h1>","d59a3dab":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Historical objects [Feature engineering]<\/h1>","83917d6d":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Shops [Feature engineering]<\/h1>","37afca2c":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Missing values<\/h1>","83a175d7":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>>Financial Organizations [Feature engineering]<\/h1>","8a159f39":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Decision Tree Regressor<\/h1>","576b44f9":"<h1 style='background-color: #fecfffcd; border: 1px solid #d194cf; padding: 10px; font-weight: 400; text-align:center'>Summary<\/h1>","ba0eb7b6":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Describe data<\/h1>","0275fae3":"<h1 style='background-color: #fecfffcd; border: 1px solid #d194cf; padding: 10px; font-weight: 400; text-align:center'>'reform_mean_floor_count_500' missing values = 100%<\/h1>","124e9114":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Submission<\/h1>","edc8381f":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Pedestrian crossings [Feature engineering]<\/h1>","b6e01290":"#### Summary\nAll other features contain many missing values, so we will delete all this rows","6939931d":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Culture objects [Feature engineering]<\/h1>","412564e3":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Random Forest Regressor<\/h1>","48d8c819":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>CIies with > 1M people [Feature engineering]<\/h1>","5a42fcb6":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Unique values<\/h1>","d9e1fe8d":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Hotels [Feature engineering]<\/h1>","f3e788d0":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Split Data<\/h1>","7ec92730":"<h1 style='background-color: #fecfffcd; border: 1px solid #d194cf; padding: 10px; font-weight: 400; text-align:center'>Fill 'reform_mean_floor_count_500' NA's by medians<\/h1>","42ec8fb7":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Medicine [Feature engineering]<\/h1>","f3db8b76":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Stations [Feature engineering]<\/h1>","98ad8506":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Station score [Feature engineering]<\/h1>","55506c3a":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>District rate [Feature engineering]<\/h1>","ac2e2cf7":"<h1 style='background-color: #fecfffcd; border: 1px solid #d194cf; padding: 10px; font-weight: 400; text-align:center'>'reform_mean_year_building_1000' missing values = 100%<\/h1>","9caf45c3":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Location [Feature engineering]<\/h1>","afe796f6":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Land transport [Feature engineering]<\/h1>","3df82d9a":"<h1 style='text-align: center'>Raifhack-DS-2021-Fall \ud83d\udc7d<\/h1>\n\n<p  style='text-align: center'>\nThis notebook is in <span style='color: green; font-weight: 700'>Active<\/span> state of development! Check out this notebook to see some updates as I update new stuff as oftern as I learn it!\n<a style='font-weight:700' href='https:\/\/github.com\/LilDataScientist\/Raifhack-DS-2021-Fall'> Code on GitHub! <\/a><\/p>","426ea177":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Quick Summary<\/h1>","9542cdb7":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Entertainment [Feature engineering]<\/h1>","8f7af1b1":"<h1 style='background-color: #dae8fc; border: 1px solid #94add0; padding: 10px; font-weight: 400; text-align:center'>Linear Regression<\/h1>","b9d590e4":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Offices [Feature engineering]<\/h1>","70cff30a":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Food [Feature engineering]<\/h1>","5d8e8ff7":"<h1 style='background-color: #defcdc; border: 1px solid #a1d194; padding: 10px; font-weight: 400; text-align:center'>Buildings [Feature engineering]<\/h1>","4a203a1a":"<h1 style='background-color: #fecfffcd; border: 1px solid #d194cf; padding: 10px; font-weight: 400; text-align:center'>Analys<\/h1>","65cd0bd4":"<h1 style='background-color: #fecfffcd; border: 1px solid #d194cf; padding: 10px; font-weight: 400; text-align:center'>'osm_city_nearest_population' missing values = 100%<\/h1>"}}