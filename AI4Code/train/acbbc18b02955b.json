{"cell_type":{"10cee816":"code","8be3074e":"code","a3a9a873":"code","c95e3626":"code","5d25a5e7":"code","e13ab375":"code","d451ea92":"code","b70a87af":"code","37597567":"code","c56532bf":"code","c1c98061":"code","9ba8e17d":"code","371f70e2":"code","0ceb9423":"code","0bbe0fd7":"code","1a572627":"code","82990ee1":"code","a99c2e7e":"code","b8ee1076":"code","85e7c34e":"code","d6923b67":"code","b923663f":"code","e777d00c":"code","611b47ab":"code","46ef3a1d":"code","87b8aa2b":"code","e126e8b6":"markdown","3490ad20":"markdown","bea001aa":"markdown","0dda0830":"markdown","2243c995":"markdown","3b95ed74":"markdown","3de75b1b":"markdown","191c8b29":"markdown","eb5742db":"markdown","b0d95bbe":"markdown","438f1472":"markdown","3f26ed86":"markdown","c636fc46":"markdown","ad683884":"markdown","109e2efb":"markdown","80b2585d":"markdown","17a79902":"markdown","deec9036":"markdown","80173dcf":"markdown"},"source":{"10cee816":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet, LassoLars, BayesianRidge, SGDRegressor\nfrom sklearn.preprocessing import StandardScaler\nwarnings.filterwarnings(\"ignore\")","8be3074e":"df = pd.read_csv('..\/input\/bucharest-house-price-dataset\/Bucharest_HousePriceDataset.csv')\nprint(df.shape)\ndf.head()","a3a9a873":"# Translate columns in english\ndf.rename(columns={'Nr Camere':'Rooms', 'Suprafata':'Surface', 'Etaj':'Floor',\n                   'Total Etaje': 'NumberOfFloors', 'Sector':'AreaLocation',\n                   'Scor':'Rank', 'Pret':'Price'}, inplace = True)","c95e3626":"df.info()","5d25a5e7":"df['AreaLocation'] = df['AreaLocation'].astype('category')","e13ab375":"df.describe()","d451ea92":"houses = df[df['NumberOfFloors']==0]\nhouses","b70a87af":"df[df['Floor'] > df['NumberOfFloors']]","37597567":"sns.pairplot(df)\nplt.show()","c56532bf":"inspect = ['NumberOfFloors', 'Surface']\nfor c in inspect:\n    plt.scatter(df[c], df['Price'], color='salmon')\n    plt.xlabel(c)\n    plt.ylabel('Price')\n    plt.grid()\n    plt.show()","c1c98061":"plt.figure(figsize=(15,12))\nsns.heatmap(df.corr(), annot=True, cmap='YlGnBu')\nplt.show()","9ba8e17d":"\nfor c in df.columns[[0,1,2,3,5,6]]: # except 'category' dtype\n    df[c].plot(kind='box', color = 'salmon')\n    plt.ylabel('count')\n    plt.grid()\n    plt.show()","371f70e2":"plt.figure(figsize=(8,5))\ndf['AreaLocation'].value_counts().sort_index().plot(kind='bar', color='salmon')\nplt.xlabel('AreaLocation')\nplt.ylabel('count')\nplt.title('# of listings by AreaLocation')\nplt.grid()\nplt.show()","0ceb9423":"def area_info(feature, aggregation):\n\n    plt.figure(figsize=(8,5))\n    if aggregation == 'sum':\n        x = df.groupby('AreaLocation')[feature].sum()\n        x.plot(kind='bar', color='salmon')\n        plt.title('Sum of {} per AreaLocation'.format(feature))\n        plt.ylabel('sum')\n        plt.grid()\n        plt.show()\n\n    elif aggregation == 'mean':\n        x = df.groupby('AreaLocation')[feature].mean()\n        x.plot(kind='bar', color='salmon')\n        plt.title('Mean {} per AreaLocation'.format(feature))\n        plt.ylabel('mean')\n        plt.grid()\n        plt.show()\n\n    elif aggregation == 'min':\n        x = df.groupby('AreaLocation')[feature].min()\n        x.plot(kind='bar', color='salmon')\n        plt.title('Min {} per AreaLocation'.format(feature))\n        plt.ylabel('min')\n        plt.grid()\n        plt.show()\n\n    elif aggregation == 'max':\n        x = df.groupby('AreaLocation')[feature].max()\n        x.plot(kind='bar', color='salmon')\n        plt.title('Sum of {} per AreaLocation'.format(feature))\n        plt.ylabel('max')\n        plt.grid()\n        plt.show()\n\n    else:\n        print('You chose an incorrect feature or your aggregation is not correct')\n        print('Please chose from the following features: Rooms, Surface, Floor, NumberOfFloors, Rank, Price.')\n        print('Please choose from the following list of aggregations: sum, mean, min, max')\n","0bbe0fd7":"area_info('Rooms', 'mean')","1a572627":"area_info('Surface', 'mean')","82990ee1":"area_info('Floor', 'mean')","a99c2e7e":"area_info('NumberOfFloors', 'mean')","b8ee1076":"area_info('Rank', 'mean')","85e7c34e":"area_info('Price', 'mean')","d6923b67":"encoded = pd.get_dummies(df['AreaLocation'], prefix='Area')\nnew_data = pd.concat([df, encoded], axis=1)\nnew_data.drop('AreaLocation', axis = 1, inplace = True)\nprint(new_data.shape)\nnew_data.head()","b923663f":"change = ['Area_1','Area_2','Area_3','Area_4','Area_5','Area_6']\n\nfor c in change:\n    new_data[c] = new_data[c].astype('int64')\nnew_data.info()","e777d00c":"target = new_data['Price'].values.reshape(-1,1)\nfeatures = new_data.drop('Price', axis = 1).values\n\nprint(features.shape, target.shape)","611b47ab":"scaler = StandardScaler()\nscaled_features = scaler.fit_transform(features)","46ef3a1d":"class Model:\n  \n  def __init__(self, model, test_size, features, target):\n    self.model = model\n    self.test_size = test_size\n    self.features = features\n    self.target = target\n\n  \n\n  def Fit(self):\n    X_train, X_test, y_train, y_test = train_test_split(self.features, self.target, test_size = self.test_size, random_state = 123, shuffle = True)\n    self.model.fit(X_train, y_train)\n    preds = self.model.predict(X_test)\n    rmse = np.sqrt(mean_squared_error(y_test, preds))\n    acc = self.model.score(X_train, y_train)\n    print(\"Root Mean Squared Error: {}\".format(rmse))\n    print('Model Accuracy: {}'.format(acc))  ","87b8aa2b":"regressors = [LinearRegression(), Ridge(), Lasso(), ElasticNet(), LassoLars(), BayesianRidge(), SGDRegressor()]\n\nfor r in regressors:\n    print(r)\n    selected = Model(r, 0.2, scaled_features, target)\n    selected.Fit()\n    print('\\n')","e126e8b6":"# Data reading and checking","3490ad20":"Let's create a function to easily explore the relation between the categorical 'AreaLocation' and numerical features.","bea001aa":"# Exploration","0dda0830":"As can be observed, the discrepancy is not that high. We will keep these values.","2243c995":"Considering the columns 'Floor' and 'NumberOfFloors', let's make sure that there are no error entries in the data, like: 'Floor' values higher than 'NumberOfFloors'.","3b95ed74":"Lets have a look at the distribution of the columns.\n\nWe will use boxplot method for numerical features, and barplot for the categorical one.","3de75b1b":"Standardize our features and target","191c8b29":"As can be observed, the model with the best performance is <b>SGDRegressor<\/b> with an RMSE = 30691.773, and an accuracy score around 76%.","eb5742db":"'NumberOfFloors' and 'Surface' columns seem to have few extreme values (outliers).\n\nLet's have a closer look.","b0d95bbe":"As can be observed, the data does not have missing values.\n\nLet's change the 'AreaLocation' into a 'category' datatype.","438f1472":"# Libraries","3f26ed86":"# Modelling & Evaluation","c636fc46":"Encode the categorical variable 'AreaLocation'","ad683884":"## <B>Bucharest: House prices prediction ","109e2efb":"# Dataset description\n\nThe file contains data related to the sale price of real estates in Bucharest, Romania in March 2019.\n\nThe data set is composed of 7 variables: \n- number of rooms\n- surface \n- floor \n- total number of floors in the building\n- area location of the dwelling\n- score of the location\n- price \n\nThe main source of the database is represented by www.imobiliare.ro, which is the most popular real estate website in Romania.","80b2585d":"# Data preparation","17a79902":"![](https:\/\/resources.stuff.co.nz\/content\/dam\/images\/1\/k\/f\/w\/7\/n\/image.related.StuffLandscapeSixteenByNine.710x400.1oq9kk.png\/1520294653850.jpg?format=pjpg&optimize=medium)","deec9036":"There are no houses, all values have at least 1 floor. Considering that, all listing are treated as flats.","80173dcf":"As can be observed, most of the houses are actually flats, considering 'Floor' and NumberOfFloors' features.\n\nFurthermore, the negative value of -1 for 'min' of 'Floor', suggest that we deal with basement flats also.\n\nLet's see if we can find values with 'NumberOfFloors' = 0. Those will be treated as actually houses instead of flats."}}