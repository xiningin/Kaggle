{"cell_type":{"d7918400":"code","6ea4e679":"code","ddbacf42":"code","21ceb45a":"code","cf582dad":"code","3b592393":"code","e07dad78":"markdown","d33ec228":"markdown","18dda25b":"markdown"},"source":{"d7918400":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ea4e679":"#Reading one file as text\n\nfrom pathlib import Path\ntxt = Path('..\/input\/feedback-prize-2021\/train\/0000D23A521A.txt').read_text()\nprint(txt)\nprint(\"\\n\")\n","ddbacf42":"# Let us look at the equivalent data frame\ntrain_df = pd.read_csv('..\/input\/feedback-prize-2021\/train.csv')\n\nprint(train_df.loc[train_df['id']=='0000D23A521A', 'discourse_text'].values[0])\nprint(\"\\n\")\nprint(train_df.loc[train_df['id']=='0000D23A521A', 'predictionstring'].values[0])\nprint(\"\\n\")\n# We can see the corresponding label\nprint(train_df.loc[train_df['id']=='0000D23A521A', 'discourse_type'].values[0])\nprint(\"\\n\")\n\nprint(train_df.loc[train_df['id']=='0000D23A521A', 'discourse_text'].values[1])\nprint(\"\\n\")\nprint(train_df.loc[train_df['id']=='0000D23A521A', 'predictionstring'].values[1])\nprint(\"\\n\")\nprint(train_df.loc[train_df['id']=='0000D23A521A', 'discourse_type'].values[0])","21ceb45a":"import pandas_profiling as pp\nprofile = pp.ProfileReport(train_df, title = \"Feedback-Prize\")\nprofile.to_notebook_iframe()","cf582dad":"# Credits for this part of visualisation _> https:\/\/www.kaggle.com\/thedrcat\nimport spacy\nfrom spacy import displacy\nfrom pylab import cm, matplotlib\ntrain_text_path = \"..\/input\/feedback-prize-2021\/train\"\ncolors = {\n            'Lead': '#8000ff',\n            'Position': '#2b7ff6',\n            'Evidence': '#2adddd',\n            'Claim': '#80ffb4',\n            'Concluding Statement': 'd4dd80',\n            'Counterclaim': '#ff8042',\n            'Rebuttal': '#ff0000'\n         }\n\ndef visualize(example, df):\n    ents = []\n    for i, row in train_df[train_df['id'] == example].iterrows():\n        ents.append({\n                        'start': int(row['discourse_start']), \n                         'end': int(row['discourse_end']), \n                         'label': row['discourse_type']\n                    })\n        \n    with open(f'{train_text_path}\/{example}.txt', 'r') as file: data = file.read()\n    doc2 = {\n                \"text\": data,\n                \"ents\": ents,\n                \"title\": example\n            }\n\n    options = {\"ents\": df.discourse_type.unique().tolist(), \"colors\": colors}\n    displacy.render(doc2, style=\"ent\", options=options, manual=True, jupyter=True)","3b592393":"examples = train_df['id'].sample(n=3, random_state=42).values.tolist()\nfor ex in examples:\n    visualize(ex,train_df)\n    print('\\n')","e07dad78":"### Understanding one file and its equivalent records","d33ec228":"### We will then visualise the entity in the text file","18dda25b":"### Now we will profile the data"}}