{"cell_type":{"d08624d1":"code","21eecced":"code","890f27a2":"code","b8b62d30":"code","7ef2468e":"code","b2cba984":"code","e7992f1e":"code","a194b8b7":"code","74948e5d":"code","016b5741":"code","935600fe":"code","ca0f1cdf":"code","a8c04a8d":"code","6ecf0842":"code","1c34d0e8":"code","e8aec7f0":"code","a85eb08e":"code","3c6d39cc":"code","e355053c":"code","f0f52f17":"code","7308ef76":"code","430ca0d4":"code","f4ab5274":"code","9b0c16cd":"code","f73e975d":"code","fc47303f":"code","25252752":"code","f81d65c7":"code","d3f141bc":"code","18533afd":"code","9269f3f5":"code","1b0e174c":"code","24394f9d":"code","bdd5ba6f":"code","1500a7df":"code","d138f009":"code","f6e0c15d":"code","f252dc32":"code","bc335f60":"code","95754184":"code","b99af5d3":"markdown","f4c63e23":"markdown","7fc38d4f":"markdown"},"source":{"d08624d1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom math import sqrt\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree   import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\n\n\n\nfrom sklearn.svm import SVC","21eecced":"data_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_len=len(data_train)\n#train_data.append(eval_data,ignore_index = True)\ndata_train.info()","890f27a2":"data_train.head(5)","b8b62d30":"data_train.describe()","7ef2468e":"data_train.isnull().sum()","b2cba984":"data_train[\"Age\"] = data_train[\"Age\"].fillna(data_train.describe()[\n                                            \"Age\"][\"mean\"])\ndata_test[\"Age\"] = data_test[\"Age\"].fillna(data_test.describe()[\n                                            \"Age\"][\"mean\"])\ndata_train['Age']=data_train['Age'].astype(np.float64)\ndata_train[\"Fare\"] = data_train[\"Fare\"].fillna(data_train.describe()[\n                                            \"Fare\"][\"mean\"])\ndata_test[\"Fare\"] = data_test[\"Fare\"].fillna(data_test.describe()[\n                                            \"Fare\"][\"mean\"])\ndata_train['Fare']=data_train['Fare'].astype(int)\ndata_train.head(5)","e7992f1e":"data = data_train\ndata['Died'] = 1 - data['Survived']","a194b8b7":"fig = go.Figure(data=[\n    go.Bar(name='Survived',\n           x=data['Sex'],\n           y=[data[data.Sex==data['Sex'][0]]['Survived'].agg(sum),\n           data[data.Sex==data['Sex'][1]]['Survived'].agg(sum)],\n           marker_color='#EB89B5', opacity=0.75),\n    go.Bar(name='Died',\n           x=data['Sex'],\n           y=[data[data.Sex==data['Sex'][0]]['Died'].agg(sum),\n           data[data.Sex==data['Sex'][1]]['Died'].agg(sum)],\n           marker_color='#330C73', opacity=0.75)\n])\nfig.update_layout(barmode='stack',\n                  width=600,\n                  title_text='Survivors categorized as Male\/Female',\n                  xaxis_title_text='Sex',\n                  yaxis_title_text='Number of passangers')\nfig.show()\n#women survival \nwomen = data_train[data_train.Sex == 'female'][\"Survived\"]\n#men survival \nmen = data_train[data_train.Sex == 'male'][\"Survived\"]\n\nprint(\"Survival rate for women is {:.2f} and for men is {:.2f}\".format(\n      (sum(women)\/len(women))*100,\n      (sum(men)\/len(men))*100))","74948e5d":"data_train[\"Embarked\"].value_counts().plot.pie(figsize=(12,8),explode=(0.1,0.1,0.1),autopct=\"%1.2f%%\")\nplt.title(\"Embarked\",fontsize=15)\nplt.show()","016b5741":"facet_data = data[['Sex',\n                   'Survived',\n                   'Embarked',\n                   'Pclass',\n                   'Fare']].groupby(['Sex',\n                                     'Survived',\n                                     'Embarked',\n                                     'Pclass']).agg('sum').reset_index()\nfig  = px.bar(facet_data,\n              x='Sex',\n              y='Fare',\n              facet_row='Survived',\n              facet_col='Pclass',\n              color='Embarked',\n              barmode='group')\nfig.update_layout(title_text='Different view of'+ \n                  ' Passenger survival with respect to Fare,'+\n                  'Embarked and Pclass')\nfig.show()","935600fe":"data['Survived'] = data['Survived'].astype(str)\nfig_scatter = px.scatter(data,\n                         x='Fare',\n                         y='Age',\n                         color='Survived',\n                         facet_col='Sex')\nfig_scatter.update_layout(width=800,\n                          title_text='Survivors categorized as Male\/Female',\n                          yaxis_title_text='Age of passangers')\nfig_scatter.show()\n\ndata['Survived'] = data['Survived'].astype(int)","ca0f1cdf":"fig_hist = go.Figure()\nfig_hist.add_trace(go.Histogram(x=data[data['Survived']==1]['Fare'],\n                                name='Survived',\n                                marker_color='#EB89B5',\n                                opacity=0.75))\nfig_hist.add_trace(go.Histogram(x=data[data['Died']==1]['Fare'],\n                                name='Died',\n                                marker_color='#330C73',\n                                opacity=0.75))\nfig_hist.update_layout(barmode='stack',\n                       title_text='Histogram representing'+\n                       'relation between Survivor\/Dead with Fare',\n                       xaxis_title_text='Fare',\n                       yaxis_title_text='Number of Passangers',\n                       bargap=0.2)\nfig_hist.show()","a8c04a8d":"fig_scatter_plane = go.Figure()\nfig_scatter_plane.add_trace(go.Scatter(x=data[data['Survived']==1]['Age'],\n                                       y=data[data['Survived']==1]['Fare'],\n                                       mode='markers', \n                                       name='Survived',\n                                       marker=dict(\n                                       size=data[data[\n                                                'Survived']==1]['Fare']\/8)))\nfig_scatter_plane.add_trace(go.Scatter(x=data[data['Died']==1]['Age'],\n                                       y=data[data['Died']==1]['Fare'],\n                                       mode='markers',\n                                       name='Died',\n                                       marker=dict(\n                                       size=data[data['Died']==1]['Fare']\/8)))\nfig_scatter_plane.update_layout(title_text='Scatter representing'+\n                                'relation between Fare and Age of passangers',\n                                xaxis_title_text='Age',\n                                yaxis_title_text='Fare')\nfig_scatter_plane.show()","6ecf0842":"#mengubah desimal menjadi integer\ndata_train['Age'] = data_train['Age'].astype(int)\n#mengkategorikan umur\ndata_train['AgeBand'] = pd.cut(data_train['Age'], 5)\ndata_train[['AgeBand', 'Survived']].groupby(['AgeBand'],\n                                          as_index=False).mean().sort_values(by='AgeBand',\n                                          ascending=True)","1c34d0e8":"corr_matrix = data_train.corr()\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr_matrix, annot=None ,cmap=cmap)","e8aec7f0":"#pembagian data\nx_train = data_train.drop(['Survived','AgeBand', 'Died'], axis=1)\nlabel = data_train['Survived']\nx_test = data_test\n#kombinasi dataframe\ndf_combined = x_train.append(x_test)\ndf_combined.shape","a85eb08e":"#kategori berdasarkan besar keluarga\ndef family_size():\n    global df_combined\n    df_combined['FamilySize'] = df_combined['Parch'] + df_combined['SibSp'] + 1\n    #pembagian keluarga\n    df_combined['Singleton'] = df_combined[\n                               'FamilySize'].map(\n                               lambda s: 1 if s == 1 else 0)\n    df_combined['SmallFamily'] = df_combined[\n                               'FamilySize'].map(\n                               lambda s: 1 if 2 <= s <= 4 else 0)\n    df_combined['LargeFamily'] = df_combined[\n                               'FamilySize'].map(\n                               lambda s: 1 if 5 <= s <= 8 else 0)\n    return df_combined","3c6d39cc":"df_combined = family_size()\ndf_combined.head()","e355053c":"def embarked():\n    global df_combined\n    df_combined['Embarked'].fillna('S', inplace=True)\n    df_dummies = pd.get_dummies(df_combined['Embarked'], prefix='Embarked')\n    df_combined = pd.concat([df_combined, df_dummies], axis=1)\n    df_combined.drop('Embarked', axis=1, inplace=True)\n    return df_combined","f0f52f17":"df_combined = embarked()\ndf_combined.head()","7308ef76":"#kategori berdasarkan kabin\ndef cabin():\n    global df_combined\n    #membersihkan data pada kabin\n    df_combined['Cabin'].fillna('U', inplace=True)\n    \n    df_combined['Cabin'] = df_combined['Cabin'].map(lambda ca: ca[0])\n    #dummy encoding\n    cabin_dummies = pd.get_dummies(df_combined['Cabin'], prefix='Cabin')\n    df_combined = pd.concat([df_combined, cabin_dummies], axis=1)\n    df_combined.drop('Cabin', inplace=True, axis=1)\n    return df_combined","430ca0d4":"df_combined = cabin()\ndf_combined.head()","f4ab5274":"#mengubah desimal menjadi integer\ndf_combined['Age'] = df_combined['Age'].astype(int)\ndf_combined.loc[ df_combined['Age'] <= 16, 'Age'] = 0\ndf_combined.loc[(df_combined['Age'] > 16) & (df_combined['Age'] <= 32),\n                'Age'] = 1\ndf_combined.loc[(df_combined['Age'] > 32) & (df_combined['Age'] <= 48),\n                'Age'] = 2\ndf_combined.loc[(df_combined['Age'] > 48) & (df_combined['Age'] <= 64),\n                'Age'] = 3\ndf_combined.loc[df_combined['Age'] > 64,\n                'Age'] = 4\ndf_combined['Age'].value_counts()\ndf_combined.head()","9b0c16cd":"sns.boxplot('Pclass', 'Fare', data=data).set(title='Pclass by Fare',\n                                         xlabel='Pclass',\n                                         ylabel='Fare')","f73e975d":"#mengkategorikan fare\ndf_combined.loc[df_combined['Fare'] <= 7,\n                'Fare'] = 0\ndf_combined.loc[(df_combined['Fare'] > 7) & (df_combined['Fare'] <= 14),\n                'Fare'] = 1\ndf_combined.loc[(df_combined['Fare'] > 14) & (df_combined['Fare'] <= 31),\n                'Fare'] = 2\ndf_combined.loc[(df_combined['Fare'] > 31),\n                'Fare'] = 3\ndf_combined['Fare'] = df_combined['Fare'].astype(int)\n#distribution\ndf_combined['Fare'].value_counts()","fc47303f":"#title berdasar nama\ncommon_titles = [\"Mr\", \"Mrs\", \"Miss\", \"Master\"]\ntitles = []\nfor name in df_combined['Name']:\n    title = name.split(',')[1].split('.')[0].strip()\n    if title in common_titles:\n        titles.append(title)\n    elif title==\"Mlle\":\n        titles.append(\"Miss\")\n    elif title==\"Mme\":\n        titles.append(\"Mrs\")\n    else:\n        titles.append(\"Special\")\ndf_titles = pd.DataFrame(titles, columns=['Titles'])\ntitle_dummies = pd.get_dummies(df_titles['Titles'], prefix='Title')\ntitle_dummies = title_dummies.reset_index(drop=True)\ndf_combined = df_combined.reset_index(drop=True)\ndf_combined = pd.concat([df_combined, title_dummies], axis=1)","25252752":"df_combined.head()","f81d65c7":"gender_dummies = pd.get_dummies(df_combined['Sex'])\ndf_combined = pd.concat([df_combined, gender_dummies], axis=1)\ndf_combined.drop('Sex', axis=1, inplace=True)","d3f141bc":"#menghilangkan Name and ticket columns, and passengerId cloumn\ndf_combined.drop(['PassengerId',\"Name\",\"Ticket\"], axis=1, inplace=True)","18533afd":"x_train = df_combined[:train_len]\nx_eval = df_combined[train_len:]\nx_train.shape, x_eval.shape","9269f3f5":"x, y = x_train, label.values","1b0e174c":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state = 0) ","24394f9d":"random_state = 0\nkfold = StratifiedKFold(n_splits=10)\n\nestimators = []\nestimators.append(DecisionTreeClassifier(random_state=random_state))\nestimators.append(RandomForestClassifier(random_state=random_state))\nestimators.append(GradientBoostingClassifier(random_state=random_state))\nestimators.append(AdaBoostClassifier(random_state=random_state))\nestimators.append(SVC(random_state=random_state))\n\ncv_results = []\nfor estimator in estimators :\n    cv_results.append(cross_val_score(estimator, x_train, y = y_train, scoring = \"accuracy\", cv = kfold))\n\ncv_means = []\ncv_std = []\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n\ncv_res = pd.DataFrame({\"Algorithm\":[\n    \"Decision Tree\",\n    \"Random Forest\",\n    \"Gradient Boosting\",\n    \"Ada Boost\",\n    \"SVC\"],\"Score\":cv_means,\"Std Desv\": cv_std})\n\ncv_res","bdd5ba6f":"rf = RandomForestClassifier(random_state=random_state)\nclf = GridSearchCV(estimator=rf, param_grid={'max_depth':[4, 5, 6], \n                                          'criterion':['gini','entropy'],\n                                          'min_samples_split':[2, 3, 10], \n                                          'min_samples_leaf':[1, 2, 3, 10], \n                                          'n_estimators':[100, 200]}\n                                          ,cv = kfold \n                                          )\n\nclf.fit(x_train, y_train)\nclf.score(x_test, y_test)\nRandomFlorest_best = clf.best_estimator_\n\nprint(clf.best_params_)\nprint(clf.best_score_)\ndf = pd.DataFrame(clf.cv_results_)\nsorted_df = df.sort_values(by = \"rank_test_score\",ascending = True).head(10)\nsorted_df[[\n    'param_criterion', \n    'param_max_depth', \n    'param_min_samples_split', \n    'param_min_samples_leaf', \n    'param_n_estimators', \n    'mean_test_score',\n    'rank_test_score']]","1500a7df":"rf = GradientBoostingClassifier()\nclf = GridSearchCV(estimator=rf, param_grid={\n                                          'n_estimators':[100, 200, 300], \n                                          'learning_rate': [0.1, 0.05, 0.01],\n                                          'max_depth': [4, 8], \n                                          'min_samples_leaf': [100,150], \n                                          'max_features': [0.3, 0.1] }\n                                          ,cv=kfold \n                                          )\n\nclf.fit(x_train, y_train)\nclf.score(x_test, y_test)\nGradientBooster_best = clf.best_estimator_\n\nprint(clf.best_params_)\nprint(clf.best_score_)\ndf = pd.DataFrame(clf.cv_results_)\nsorted_df = df.sort_values(by = \"rank_test_score\",ascending = True).head(10)\nsorted_df[[\n    'param_n_estimators',\n    'param_learning_rate',\n    'param_max_depth',\n    'param_min_samples_leaf',\n    'param_max_features',\n    'mean_test_score',\n    'rank_test_score']]","d138f009":"rf = SVC(random_state=random_state, probability = True)\nclf = GridSearchCV(estimator=rf, param_grid={\n                                            'kernel': ['rbf'],\n                                            'gamma': [ 0.001, 0.01, 0.1, 1],\n                                            'C': [1, 10, 50, 100,200,300, 1000]\n                                            })\n\nclf.fit(x_train, y_train)\nclf.score(x_test, y_test)\nSVC_best = clf.best_estimator_\n\nprint(clf.best_params_)\nprint(clf.best_score_)\ndf = pd.DataFrame(clf.cv_results_)\nsorted_df = df.sort_values(by = \"rank_test_score\",ascending = True).head(10)\nsorted_df[[\n    'param_kernel',\n    'param_gamma',\n    'param_C',\n    'mean_test_score','rank_test_score']]","f6e0c15d":"dtc = DecisionTreeClassifier()\nrf = AdaBoostClassifier(dtc,random_state=random_state)\nclf = GridSearchCV(estimator=rf, param_grid={\n                                            'base_estimator__criterion': [\"gini\", \"entropy\"],\n                                            'base_estimator__splitter': [\"best\", \"random\"],\n                                            'algorithm': [\"SAMME\",\"SAMME.R\"],\n                                            \"n_estimators\" :[1,2],\n                                            \"learning_rate\":  [0.0001, 0.001, 0.01, 0.1, 0.2, 0.3,1.5]\n                                            })\n\nclf.fit(x_train, y_train)\nclf.score(x_test, y_test)\nAdaBooste_best = clf.best_estimator_\n\nprint(clf.best_params_)\nprint(clf.best_score_)\ndf = pd.DataFrame(clf.cv_results_)\nsorted_df = df.sort_values(by = \"rank_test_score\",ascending = True).head(10)\nsorted_df[[\n    'param_base_estimator__criterion',\n    'param_base_estimator__splitter',\n    'param_algorithm',\n    'param_n_estimators',\n    'param_n_estimators',\n    'mean_test_score','rank_test_score']]","f252dc32":"v1 = RandomFlorest_best\nv2 = GradientBooster_best\nv3 = SVC_best\n\n#ensemble model\nemodel = VotingClassifier(estimators=[('rf', v1), ('gb', v2),('svc', v3)],voting='hard')\n\nfor clf, label in zip([v1, v2, v3, emodel], [ 'Random Forest','Gradient Boster', 'SVC', 'Ensemble']): \n    scores = cross_val_score(clf, x, y, cv=kfold, scoring='accuracy')\n    print(\"Accuracy: %0.2f [%s]\" % (scores.mean(), label))\n    \nfmodel = emodel ","bc335f60":"#final model fit\nfmodel.fit(x_train, y_train)\n\n#Score\npredictions_train = fmodel.predict(x_train)\npredictions_test = fmodel.predict(x_test)\nprint('train score :',accuracy_score(y_train ,predictions_train))\nprint('test score :',accuracy_score(y_test , predictions_test))\nprint(classification_report(y_test, predictions_test ))\n\n#------------------------------------------------------------------------------------------\n# Submit\n#------------------------------------------------------------------------------------------\n\npredictions = fmodel.predict(x_eval)\n\noutput = pd.DataFrame({'PassengerID': data_test.PassengerId,\n                       'Name': data_test.Name,\n                       'Pclass': data_test.Pclass,\n                       'Parch': data_test.Parch,\n                       'Age': data_test.Age,\n                       'Sex': data_test.Sex,\n                       'Ticket': data_test.Ticket,\n                       'Cabin': data_test.Cabin,\n                       'Embarked': data_test.Embarked,\n                       'Fare': data_test.Fare,\n                       'SibSp':data_test.SibSp,\n                       'Survived':predictions})\noutput.to_csv(\"Titanic_survival.csv\", index=False)\nprint(\"selesai\")\n\noutput.head()","95754184":"hasil= pd.read_csv('Titanic_survival.csv')\nhasil","b99af5d3":"Melihat dari pengelompokan umur terlihat bahwasannya penumpang dengan range umur 0-16 tahun memiliki tingkat keselamatan yang tinggi dibanding kelompok berdasarkan umur lain","f4c63e23":"Dari grafik tersebut kita bisa melihat bahwa tingkat keselamatan female(wanita) lebih tinggi dibanding male(pria). Dari sini menunjukkan bahwa prioritas penyelamatan adalah wanita.","7fc38d4f":"**Kesimpulan**\nFokus utama dari penyelamatan penumpang kapal titanic adalah wanita dan penumpang pada kelompok umur 0-16 tahun karena memiliki tingkat keselamatan yang tinggi."}}