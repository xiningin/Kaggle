{"cell_type":{"87535659":"code","d17cece4":"code","99a5508d":"code","a058d4e9":"code","ab127d00":"code","8be2a228":"code","6707889c":"code","d21a8bce":"code","952e127a":"code","14718323":"code","f4dc273d":"code","08923e1f":"code","fb2a44db":"code","dabff012":"code","6de0b87a":"code","a9f84333":"code","7ca1c059":"code","12a28a8f":"code","071aef9e":"markdown","214cd204":"markdown","cf2c5972":"markdown"},"source":{"87535659":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d17cece4":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n%config InlineBackend.figure_format ='retina'\n%matplotlib inline","99a5508d":"# read data\ndf = pd.read_csv('\/kaggle\/input\/gtd\/globalterrorismdb_0718dist.csv',encoding='ISO-8859-1')","a058d4e9":"# check for missing values\npercent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_value_df = pd.DataFrame({'column_name': df.columns,'percent_missing': percent_missing})\nmissing_value_df.sort_values('percent_missing', inplace=True, ascending = False)\nmissing_value_df_40 = missing_value_df[missing_value_df['percent_missing']>40]\nmissing_value_df_40.index","ab127d00":"# drop columns based on amount of missing data\ndf = df.drop(['gsubname3', 'weapsubtype4_txt', 'weapsubtype4', 'weaptype4',\n       'weaptype4_txt', 'claimmode3', 'claimmode3_txt', 'gsubname2', 'claim3',\n       'guncertain3', 'gname3', 'divert', 'attacktype3', 'attacktype3_txt',\n       'ransomnote', 'ransompaidus', 'ransomamtus', 'claimmode2',\n       'claimmode2_txt', 'ransompaid', 'corp3', 'targsubtype3',\n       'targsubtype3_txt', 'natlty3_txt', 'natlty3', 'target3', 'targtype3',\n       'targtype3_txt', 'ransomamt', 'weapsubtype3_txt', 'weapsubtype3',\n       'weaptype3_txt', 'weaptype3', 'claim2', 'guncertain2', 'gname2',\n       'resolution', 'kidhijcountry', 'nhours', 'compclaim', 'gsubname',\n       'attacktype2', 'attacktype2_txt', 'ndays', 'approxdate', 'corp2',\n       'nreleased', 'targsubtype2', 'targsubtype2_txt', 'natlty2',\n       'natlty2_txt', 'hostkidoutcome_txt', 'hostkidoutcome', 'target2',\n       'targtype2_txt', 'targtype2', 'weapsubtype2', 'weapsubtype2_txt',\n       'weaptype2', 'weaptype2_txt', 'nhostkidus', 'nhostkid', 'claimmode_txt',\n       'claimmode', 'related', 'addnotes', 'alternative', 'alternative_txt',\n       'propvalue', 'scite3', 'motive', 'location', 'propcomment',\n       'propextent', 'propextent_txt', 'scite2', 'ransom'], axis = 1)","8be2a228":"# drop columns with non-useful information for the analysis\/missing values\ndf = df.drop(['latitude','longitude','summary','targsubtype1','guncertain1',\n       'targsubtype1_txt','corp1','weapsubtype1', 'weapsubtype1_txt',\n       'weapdetail','nkillus', 'nkillter','nwoundus','nperps', 'nperpcap', 'claimed',\n       'nwoundte','scite1','INT_LOG','INT_IDEO', 'INT_MISC', 'INT_ANY','dbsource','provstate'], axis = 1)","6707889c":"# drop remaining nan values by rows and assign to new dataframe\ndf_clean = df.dropna()","d21a8bce":"df_clean.success.value_counts().plot(kind='pie')","952e127a":"plt.figure(figsize=(25,8))\nplt.box(False)\nplt.title(\"Terrorattacks by Region\", fontweight=\"bold\", fontsize = 14)\nregionchart = sns.countplot(df_clean.region_txt, order = df_clean.region_txt.value_counts().index, palette=\"dark\")\nregionchart.set_xticklabels(regionchart.get_xticklabels(), rotation=45)","14718323":"# plot terror attacks by year\nyear = df_clean['eventid'].groupby(df_clean['iyear']).count()\nplt.figure(figsize=(20,8))\nax = sns.lineplot(data=year)\nplt.box(False)\nax.set(xticks=year.index.values[::3])","f4dc273d":"# plot count of type of weapon used\nplt.figure(figsize=(20,10))\nweapon = sns.countplot(df_clean.weaptype1_txt, order = df_clean.weaptype1_txt.value_counts().index, palette=\"rocket\")\nweapon.set_xticklabels(weapon.get_xticklabels(), rotation=45)\nplt.box(False)","08923e1f":"# plot causalities by nationality\nplt.figure(figsize=(20,10))\nnat = sns.countplot(df_clean.natlty1_txt, order = df_clean.natlty1_txt.value_counts().index[:10])\nnat.set_xticklabels(nat.get_xticklabels(), rotation=45)\nplt.box(False)","fb2a44db":"# plot terror attacks by month\ndf_clean = df_clean[df_clean.imonth != 0] #remove some 0 values that have been in the data\ndf_clean['eventid'].groupby(df['imonth']).count().plot(kind='bar')","dabff012":"df_clean.suicide.value_counts().plot(kind=\"pie\", title=\"Suicide attack Yes\/No\")","6de0b87a":"plt.figure(figsize=(25,8))\nplt.box(False)\nplt.title(\"Method of Attack\",fontsize=15,fontweight=\"bold\")\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\natttype= sns.countplot(df_clean.attacktype1_txt,order = df_clean.attacktype1_txt.value_counts().index, palette =  'gist_heat')\natttype.set_xticklabels(atttype.get_xticklabels(), rotation=45)","a9f84333":"terror_region = pd.crosstab(df_clean.iyear,df_clean.region_txt)\nterror_region.plot(color = sns.color_palette('tab10'))\nfig = plt.gcf()\nfig.set_size_inches(18,6)\nplt.box(False)\nplt.legend(title='Region')\nplt.title(\"Development Terror by Region\")\nplt.show()","7ca1c059":"#df_clean[df_clean.ishostkid == -9] # checking if missing values occur systematic or random\ndf_clean = df_clean[df_clean.ishostkid != -9] #remove -9 values that have been in the data","12a28a8f":"plt.figure(figsize=(25,8))\nplt.box(False)\nplt.title(\"Target\",fontsize=15,fontweight=\"bold\")\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\ntargtype= sns.countplot(df_clean.targtype1_txt,order = df_clean.targtype1_txt.value_counts().index, palette =  'cividis')\ntargtype.set_xticklabels(targtype.get_xticklabels(), rotation=90)","071aef9e":"## Visualizing Data","214cd204":"## Data Cleaning","cf2c5972":"# <span style=\"color:red\">TERROR AROUND THE GLOBE<\/span>\n\n**Definition of terrorism:**\n*\"The threatened or actual use of illegal force and violence by a non-state actor to attain a political, economic, religious, or social goal through fear, coercion, or intimidation.\"*\n\nThe Global Terrorism Database (GTD) is an open-source database including information on terrorist attacks around the world. The GTD includes systematic data on domestic as well as international terrorist incidents that have occurred during this time period and now includes **more than 180,000 attacks**. \n\n**Time period**: 1970-2017, except 1993\n\n**Variables**: >100 variables on location, tactics, perpetrators, targets, and outcomes\n\n**Sources**: Unclassified media articles (Note: Please interpret changes over time with caution. Global patterns are driven by diverse trends in particular regions, and data collection is influenced by fluctuations in access to media coverage over both time and place.)\n\nSee the GTD Codebook for important details on data collection methodology, definitions, and coding schema."}}