{"cell_type":{"e099ba24":"code","cea7e3d5":"code","649bd3c7":"code","b5cf7dee":"code","fde95ea2":"code","528ffb0e":"code","c2f95d51":"code","9ec05f10":"code","76e5ecaa":"code","07d7e5d7":"code","8a732bb9":"code","85a7d22a":"code","43865fc5":"code","ad954ea2":"code","21007c27":"code","b240d2c0":"code","1e05a13a":"code","145b4352":"code","46812a79":"code","2146aaa0":"code","e78c139c":"code","d84e2ade":"code","ef3d2802":"code","c2bf066b":"markdown","38794795":"markdown","9a37f0f0":"markdown","b4f65cea":"markdown","a5a5a4f8":"markdown","1eb3bb2e":"markdown","5136003f":"markdown","f615ef92":"markdown","f3f928c8":"markdown","6c120e99":"markdown","53d22a90":"markdown"},"source":{"e099ba24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport zipfile\nimport sys\nimport time\nimport csv\n\n# Any results you write to the current directory are saved as output.","cea7e3d5":"import spacy\nfrom spacy import displacy\nnlp = spacy.load('en_core_web_sm')\n\ndef change_names(data_file):\n    #replace names in datafile with generic ones.\n    new_name_list = [\"First Person\",\"Second Person\",\"Third Person\",\"Fourth Person\",\\\n                     \"Fifth Person\",\"Sixth Person\",\"Seventh Person\",\"Eigth Person\",\\\n                     \"Nineth Person\", \"Tenth Person\", \"Eleventh Person\",\"Twelfth Person\",\\\n                    \"Thirteenth Person\",\"Fourteenth Person\",\"Fifteenth Person\"] \n    data = data_file\n        \n    for i in range(len(data_file)):\n        \n        dict_of_replaced = {}\n    \n        text = data.loc[i,\"Text\"]\n        doc = nlp(text)\n        captured_name = \"\"\n            \n        list_names_in_text = [ent.text for ent in doc.ents if ent.label_ == \"PERSON\"]\n              \n        resi = 0 #residual shift in offset due to swapping names of different lengths\n        \n        if i == 242:\n            print(\" **Before** \", text)\n            print( \" Text Len \", len(text))\n            print(\" B offset \", data.loc[i,\"B-offset\"])\n            print(\" B name \", data.loc[i,\"B\"])\n        \n        for ent in doc.ents:\n            if ent.label_ == \"PERSON\":\n                \n                captured_name = ent.text\n                \n                if captured_name in dict_of_replaced.keys():\n                    data.loc[i,\"Text\"] = data.loc[i,\"Text\"][: ent.start_char - resi] + \\\n                                    dict_of_replaced[captured_name] + data.loc[i,\"Text\"][ent.end_char - resi:] \n                else:\n                    replace = 1\n                    for name in new_name_list:\n                        if name not in dict_of_replaced.values() and name not in list_names_in_text and replace == 1:\n                            replace = 0\n                            dict_of_replaced[captured_name] = name\n          \n                            data.loc[i,\"Text\"] = data.loc[i,\"Text\"][: ent.start_char - resi] + \\\n                                    dict_of_replaced[captured_name] + data.loc[i,\"Text\"][ent.end_char - resi:]\n            \n                if captured_name in dict_of_replaced.keys():\n                    len_diff = len(captured_name) - len(dict_of_replaced[captured_name])\n                else:\n                    len_diff = 0\n                \n                resi += len_diff\n                \n                if ent.start_char - resi < data.loc[i,\"A-offset\"]:\n                    data.loc[i,\"A-offset\"] -= len_diff\n                if ent.start_char - resi < data.loc[i,\"B-offset\"]:\n                    data.loc[i,\"B-offset\"] -= len_diff\n                if ent.start_char - resi < data.loc[i,\"Pronoun-offset\"]:\n                    data.loc[i,\"Pronoun-offset\"] -= len_diff\n        \n        data.loc[i,\"A\"] = dict_of_replaced[data.loc[i,\"A\"]]\n        data.loc[i,\"B\"] = dict_of_replaced[data.loc[i,\"B\"]]\n        \n        if i == 242:\n            print(\" **After** \", data.loc[i,\"Text\"])\n            print(\" B offset \", data.loc[i,\"B-offset\"])\n            print(\" len text \" , len(data.loc[i,\"Text\"]))\n\n    return data","649bd3c7":"def create_train_tsv(data_file):\n    \n\tdata = data_file\n    \n\tif not os.path.isdir(\"tsv_files\"):\n\t\tos.mkdir(\"tsv_files\")\n    \n\twith open(os.path.join(\"tsv_files\",\"train.tsv\"),'w',encoding=\"utf8\") as tsv_file:\n\t\tfor i in range(len(data)): #First replace pronouns with A's\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"Pronoun-offset\"]:\n\t\t\t\t\tif token.dep_ == \"poss\":\n\t\t\t\t\t\tposs_suffix = \"'s \"\n\t\t\t\t\ttext = text[: token.idx] + data.loc[i,\"A\"] + poss_suffix + text[token.idx+len(data.loc[i,\"Pronoun\"])+1:]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tif (data.loc[i,\"A-coref\"] == True):\n\t\t\t\tlabel = 1\n\t\t\telse:\n\t\t\t\tlabel = 0 \n\t\t\tid1 = i + 10000 #creating fake ids starting from 10000\n\t\t\tid2 = i + 1 + 10000\n\t\t\ts1 = text\n\t\t\ts2 = data.loc[i,\"Text\"]\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (label, id1, id2, s1, s2))\n\t\tfor i in range(len(data)): #First replace pronouns with B's\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"Pronoun-offset\"]:\n\t\t\t\t\tif token.dep_ == \"poss\":\n\t\t\t\t\t\tposs_suffix = \"'s \"\n\t\t\t\t\ttext = text[: token.idx] + data.loc[i,\"B\"] + poss_suffix + text[token.idx+len(data.loc[i,\"Pronoun\"])+1:]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tif (data.loc[i,\"B-coref\"] == True):\n\t\t\t\tlabel = 1\n\t\t\telse:\n\t\t\t\tlabel = 0 \n\t\t\tid1 = i + len(data) + 10000\n\t\t\tid2 = i + 1 + len(data) + 10000\n\t\t\ts1 = text\n\t\t\ts2 = data.loc[i,\"Text\"]\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (label, id1, id2, s1, s2))\n#Now the len of datafile is doubled with A and B stacked.","b5cf7dee":"def create_dev_tsv(data_file):\n    \n\tdata = data_file\n    \n\tif not os.path.isdir(\"tsv_files\"):\n\t\tos.mkdir(\"tsv_files\")\n    \n\twith open(os.path.join(\"tsv_files\",\"dev.tsv\"),'w',encoding=\"utf8\") as tsv_file:\n\t\tfor i in range(len(data)): #First replace pronouns with A's\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"Pronoun-offset\"]:\n\t\t\t\t\tif token.dep_ == \"poss\":\n\t\t\t\t\t\tposs_suffix = \"'s \"\n\t\t\t\t\ttext = text[: token.idx] + data.loc[i,\"A\"] + poss_suffix + text[token.idx+len(data.loc[i,\"Pronoun\"])+1:]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tif (data.loc[i,\"A-coref\"] == True):\n\t\t\t\tlabel = 1\n\t\t\telse:\n\t\t\t\tlabel = 0 \n\t\t\tid1 = i + 30000 #creating fake ids starting from 10000\n\t\t\tid2 = i + 1 + 30000\n\t\t\ts1 = text\n\t\t\ts2 = data.loc[i,\"Text\"]\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (label, id1, id2, s1, s2))\n\t\tfor i in range(len(data)): #First replace pronouns with B's\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"Pronoun-offset\"]:\n\t\t\t\t\tif token.dep_ == \"poss\":\n\t\t\t\t\t\tposs_suffix = \"'s \"\n\t\t\t\t\ttext = text[: token.idx] + data.loc[i,\"B\"] + poss_suffix + text[token.idx+len(data.loc[i,\"Pronoun\"])+1:]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tif (data.loc[i,\"B-coref\"] == True):\n\t\t\t\tlabel = 1\n\t\t\telse:\n\t\t\t\tlabel = 0 \n\t\t\tid1 = i + len(data) + 30000\n\t\t\tid2 = i + 1 + len(data) + 30000\n\t\t\ts1 = text\n\t\t\ts2 = data.loc[i,\"Text\"]\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (label, id1, id2, s1, s2))\n#Now the len of datafile is doubled with A and B stacked.","fde95ea2":"def create_test_tsv(data_file):\n    \n\tdata = data_file\n    \n\tif not os.path.isdir(\"tsv_files\"):\n\t\tos.mkdir(\"tsv_files\")\n    \n\twith open(os.path.join(\"tsv_files\",\"test.tsv\"),'w',encoding=\"utf8\") as tsv_file:\n\t\tfor i in range(len(data)): #First replace pronouns with A's\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"Pronoun-offset\"]:\n\t\t\t\t\tif token.dep_ == \"poss\":\n\t\t\t\t\t\tposs_suffix = \"'s \"\n\t\t\t\t\ttext = text[: token.idx] + data.loc[i,\"A\"] + poss_suffix + text[token.idx+len(data.loc[i,\"Pronoun\"])+1:]\n\t\t\tid1 = i + 40000 #creating fake ids starting from 40000\n\t\t\tid2 = i + 1 + 40000\n\t\t\ts1 = text\n\t\t\ts2 = data.loc[i,\"Text\"]\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (i, id1, id2, s1, s2))\n\t\tfor i in range(len(data)): #First replace pronouns with B's\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"Pronoun-offset\"]:\n\t\t\t\t\tif token.dep_ == \"poss\":\n\t\t\t\t\t\tposs_suffix = \"'s \"\n\t\t\t\t\ttext = text[: token.idx] + data.loc[i,\"B\"] + poss_suffix + text[token.idx+len(data.loc[i,\"Pronoun\"])+1:]\n\t\t\tid1 = i + len(data) + 40000\n\t\t\tid2 = i + 1 + len(data) + 40000\n\t\t\ts1 = text\n\t\t\ts2 = data.loc[i,\"Text\"]\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (i+len(data), id1, id2, s1, s2))\n#Now the len of datafile is doubled with A and B stacked.","528ffb0e":"def generate_train_tsv(data_file):\n    \n\tdata = data_file\n    \n\tif not os.path.isdir(\"tsv_files\"):\n\t\tos.mkdir(\"tsv_files\")\n    \n\twith open(os.path.join(\"tsv_files\",\"train.tsv\"),'w',encoding=\"utf8\") as tsv_file:\n\t\tfor i in range(len(data)): #First split sentences at A-offset\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"A-offset\"]:\n\t\t\t\t\ts1 = text[: token.idx]\n\t\t\t\t\ts2 = text[token.idx :]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tif (data.loc[i,\"A-coref\"] == True):\n\t\t\t\tlabel = 1\n\t\t\telse:\n\t\t\t\tlabel = 0 \n\t\t\tid1 = i + 10000 #creating fake ids starting from 10000\n\t\t\tid2 = i + 1 + 10000\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (label, id1, id2, s1, s2))\n\t\tfor i in range(len(data)): #First split sentences at A-offset\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"B-offset\"]:\n\t\t\t\t\ts1 = text[: token.idx]\n\t\t\t\t\ts2 = text[token.idx :]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tif (data.loc[i,\"B-coref\"] == True):\n\t\t\t\tlabel = 1\n\t\t\telse:\n\t\t\t\tlabel = 0 \n\t\t\tid1 = i + len(data) + 10000 #creating fake ids starting from 10000\n\t\t\tid2 = i + 1 + len(data) + 10000\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (label, id1, id2, s1, s2))\n#Now the len of datafile is doubled with A and B stacked.","c2f95d51":"def generate_dev_tsv(data_file):\n    \n\tdata = data_file\n    \n\tif not os.path.isdir(\"tsv_files\"):\n\t\tos.mkdir(\"tsv_files\")\n    \n\twith open(os.path.join(\"tsv_files\",\"dev.tsv\"),'w',encoding=\"utf8\") as tsv_file:\n\t\tfor i in range(len(data)): #First split sentences at A-offset\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"A-offset\"]:\n\t\t\t\t\ts1 = text[: token.idx]\n\t\t\t\t\ts2 = text[token.idx :]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tif (data.loc[i,\"A-coref\"] == True):\n\t\t\t\tlabel = 1\n\t\t\telse:\n\t\t\t\tlabel = 0 \n\t\t\tid1 = i + 20000 #creating fake ids starting from 10000\n\t\t\tid2 = i + 1 + 20000\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (label, id1, id2, s1, s2))\n\t\tfor i in range(len(data)): #First split sentences at A-offset\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"B-offset\"]:\n\t\t\t\t\ts1 = text[: token.idx]\n\t\t\t\t\ts2 = text[token.idx :]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tif (data.loc[i,\"B-coref\"] == True):\n\t\t\t\tlabel = 1\n\t\t\telse:\n\t\t\t\tlabel = 0 \n\t\t\tid1 = i + len(data) + 20000 #creating fake ids starting from 10000\n\t\t\tid2 = i + 1 + len(data) + 20000\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (label, id1, id2, s1, s2))\n#Now the len of datafile is doubled with A and B stacked.","9ec05f10":"def generate_test_tsv(data_file):\n    \n\tdata = data_file\n    \n\tif not os.path.isdir(\"tsv_files\"):\n\t\tos.mkdir(\"tsv_files\")\n    \n\twith open(os.path.join(\"tsv_files\",\"test.tsv\"),'w',encoding=\"utf8\") as tsv_file:\n\t\tfor i in range(len(data)): #First split sentences at A-offset\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"A-offset\"]:\n\t\t\t\t\ts1 = text[: token.idx]\n\t\t\t\t\ts2 = text[token.idx :]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tid1 = i + 30000 #creating fake ids starting from 10000\n\t\t\tid2 = i + 1 + 30000\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (i, id1, id2, s1, s2))\n\t\tfor i in range(len(data)): #First split sentences at A-offset\n\t\t\ttext = data.loc[i,\"Text\"]\n\t\t\tdoc = nlp(text)\n\t\t\tposs_suffix = \" \"\n\t\t\tfor token in doc:\n\t\t\t\tif token.idx == data.loc[i,\"B-offset\"]:\n\t\t\t\t\ts1 = text[: token.idx]\n\t\t\t\t\ts2 = text[token.idx :]\n#We don't worry about A or B offsets shifting. We don't use those values anywhere.\n\t\t\tid1 = i + len(data) + 30000 #creating fake ids starting from 10000\n\t\t\tid2 = i + 1 + len(data) + 30000\n\t\t\ttsv_file.write(\"%s\\t%s\\t%s\\t%s\\t%s\\n\" % (i + len(data), id1, id2, s1, s2))\n#Now the len of datafile is doubled with A and B stacked.","76e5ecaa":"#downloading weights and cofiguration file for the model\n!wget https:\/\/storage.googleapis.com\/bert_models\/2018_10_18\/uncased_L-12_H-768_A-12.zip\nwith zipfile.ZipFile(\"uncased_L-12_H-768_A-12.zip\",\"r\") as zip_ref:\n    zip_ref.extractall()\n!ls 'uncased_L-12_H-768_A-12'","07d7e5d7":"!wget https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/modeling.py \n!wget https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/extract_features.py \n!wget https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/tokenization.py","8a732bb9":"import modeling\nimport extract_features\nimport tokenization\nimport tensorflow as tf","85a7d22a":"!wget https:\/\/raw.githubusercontent.com\/google-research-datasets\/gap-coreference\/master\/gap-development.tsv\n!wget https:\/\/raw.githubusercontent.com\/google-research-datasets\/gap-coreference\/master\/gap-validation.tsv\n!wget https:\/\/raw.githubusercontent.com\/google-research-datasets\/gap-coreference\/master\/gap-test.tsv\n!ls","43865fc5":"def compute_offset_no_spaces(text, offset, i):\n\tcount = 0\n\tif len(text) < offset:\n\t\tprint(\"offset longer \", text, \" teztn \", i)\n\tfor pos in range(offset):\n\t\tif text[pos] != \" \": count +=1\n\treturn count\n\ndef count_chars_no_special(text):\n\tcount = 0\n\tspecial_char_list = [\"#\"]\n\tfor pos in range(len(text)):\n\t\tif text[pos] not in special_char_list: count +=1\n\treturn count\n\ndef count_length_no_special(text):\n\tcount = 0\n\tspecial_char_list = [\"#\", \" \"]\n\tfor pos in range(len(text)):\n\t\tif text[pos] not in special_char_list: count +=1\n\treturn count","ad954ea2":"def run_bert(data):\n\t'''\n\tRuns a forward propagation of BERT on input text, extracting contextual word embeddings\n\tInput: data, a pandas DataFrame containing the information in one of the GAP files\n\n\tOutput: emb, a pandas DataFrame containing contextual embeddings for the words A, B and Pronoun. Each embedding is a numpy array of shape (768)\n\tcolumns: \"emb_A\": the embedding for word A\n\t         \"emb_B\": the embedding for word B\n\t         \"emb_P\": the embedding for the pronoun\n\t         \"label\": the answer to the coreference problem: \"A\", \"B\" or \"NEITHER\"\n\t'''\n    # From the current file, take the text only, and write it in a file which will be passed to BERT\n\tdata = change_names(data)\n\ttext = data[\"Text\"]\n\ttext.to_csv(\"input.txt\", index = False, header = False)\n\n    # The script extract_features.py runs forward propagation through BERT, and writes the output in the file output.jsonl\n    # I'm lazy, so I'm only saving the output of the last layer. Feel free to change --layers = -1 to save the output of other layers.\n\tos.system(\"python3 extract_features.py \\\n\t  --input_file=input.txt \\\n\t  --output_file=output.jsonl \\\n\t  --vocab_file=uncased_L-12_H-768_A-12\/vocab.txt \\\n\t  --bert_config_file=uncased_L-12_H-768_A-12\/bert_config.json \\\n\t  --init_checkpoint=uncased_L-12_H-768_A-12\/bert_model.ckpt \\\n\t  --layers=-1 \\\n\t  --max_seq_length=256 \\\n\t  --batch_size=8\")\n\n\tbert_output = pd.read_json(\"output.jsonl\", lines = True)\n\n\tos.system(\"rm output.jsonl\")\n\tos.system(\"rm input.txt\")\n\n\tindex = data.index\n\tcolumns = [\"emb_A\", \"emb_B\", \"emb_P\", \"label\"]\n\temb = pd.DataFrame(index = index, columns = columns)\n\temb.index.name = \"ID\"\n\n\tfor i in range(len(data)): # For each line in the data file\n\t\t# get the words A, B, Pronoun. Convert them to lower case, since we're using the uncased version of BERT\n\t\tP = data.loc[i,\"Pronoun\"].lower()\n\t\tA = data.loc[i,\"A\"].lower()\n\t\tB = data.loc[i,\"B\"].lower()\n\n\t\t# For each word, find the offset not counting spaces. This is necessary for comparison with the output of BERT\n\t\tP_offset = compute_offset_no_spaces(data.loc[i,\"Text\"], data.loc[i,\"Pronoun-offset\"],i)\n\t\tA_offset = compute_offset_no_spaces(data.loc[i,\"Text\"], data.loc[i,\"A-offset\"], i)\n\t\tB_offset = compute_offset_no_spaces(data.loc[i,\"Text\"], data.loc[i,\"B-offset\"], i)\n\t\t# Figure out the length of A, B, not counting spaces or special characters\n\t\tA_length = count_length_no_special(A)\n\t\tB_length = count_length_no_special(B)\n\n\t\t# Initialize embeddings with zeros\n\t\temb_A = np.zeros(768)\n\t\temb_B = np.zeros(768)\n\t\temb_P = np.zeros(768)\n\n\t\t# Initialize counts\n\t\tcount_chars = 0\n\t\tcnt_A, cnt_B, cnt_P = 0, 0, 0\n\n\t\tfeatures = pd.DataFrame(bert_output.loc[i,\"features\"]) # Get the BERT embeddings for the current line in the data file\n\t\tfor j in range(2,len(features)):  # Iterate over the BERT tokens for the current line; we skip over the first 2 tokens, which don't correspond to words\n\t\t\ttoken = features.loc[j,\"token\"]\n\n\t\t\t# See if the character count until the current token matches the offset of any of the 3 target words\n\t\t\tif count_chars  == P_offset: \n\t\t\t\t# print(token)\n\t\t\t\temb_P += np.array(features.loc[j,\"layers\"][0]['values'])\n\t\t\t\tcnt_P += 1\n\t\t\tif count_chars in range(A_offset, A_offset + A_length): \n\t\t\t\t# print(token)\n\t\t\t\temb_A += np.array(features.loc[j,\"layers\"][0]['values'])\n\t\t\t\tcnt_A +=1\n\t\t\tif count_chars in range(B_offset, B_offset + B_length): \n\t\t\t\t# print(token)\n\t\t\t\temb_B += np.array(features.loc[j,\"layers\"][0]['values'])\n\t\t\t\tcnt_B +=1\t\t\t\t\t\t\t\t\n\t\t\t# Update the character count\n\t\t\tcount_chars += count_length_no_special(token)\n\t\t# Taking the average between tokens in the span of A or B, so divide the current value by the count\t\n\t\temb_A \/= cnt_A\n\t\temb_B \/= cnt_B\n\n\t\t# Work out the label of the current piece of text\n\t\tlabel = \"Neither\"\n\t\tif (data.loc[i,\"A-coref\"] == True):\n\t\t\tlabel = \"A\"\n\t\tif (data.loc[i,\"B-coref\"] == True):\n\t\t\tlabel = \"B\"\n\n\t\t# Put everything together in emb\n\t\temb.iloc[i] = [emb_A, emb_B, emb_P, label]\n\n\treturn emb","21007c27":"print(\"Started at \", time.ctime())\ntest_data = pd.read_csv(\"gap-test.tsv\", sep = '\\t')\ntest_emb = run_bert(test_data)\ntest_emb.to_json(\"contextual_embeddings_gap_test.json\", orient = 'columns')\ngenerate_train_tsv(test_data)\n\nvalidation_data = pd.read_csv(\"gap-validation.tsv\", sep = '\\t')\nvalidation_emb = run_bert(validation_data)\nvalidation_emb.to_json(\"contextual_embeddings_gap_validation.json\", orient = 'columns')\ngenerate_dev_tsv(validation_data)\n\ndevelopment_data = pd.read_csv(\"gap-development.tsv\", sep = '\\t')\ndevelopment_emb = run_bert(development_data)\ndevelopment_emb.to_json(\"contextual_embeddings_gap_development.json\", orient = 'columns')\ngenerate_test_tsv(development_data)\nprint(\"Finished at \", time.ctime())","b240d2c0":"from keras import backend, models, layers, initializers, regularizers, constraints, optimizers\nfrom keras import callbacks as kc\nfrom keras import optimizers as ko\n\nfrom sklearn.model_selection import cross_val_score, KFold, train_test_split\nfrom sklearn.metrics import log_loss\nimport time\n\n\ndense_layer_sizes = [37]\ndropout_rate = 0.6\nlearning_rate = 0.001\nn_fold = 5\nbatch_size = 32\nepochs = 1000\npatience = 100\n# n_test = 100\nlambd = 0.1 # L2 regularization","1e05a13a":"def build_mlp_model(input_shape):\n\tX_input = layers.Input(input_shape)\n\n\t# First dense layer\n\tX = layers.Dense(dense_layer_sizes[0], name = 'dense0')(X_input)\n\tX = layers.BatchNormalization(name = 'bn0')(X)\n\tX = layers.Activation('relu')(X)\n\tX = layers.Dropout(dropout_rate, seed = 7)(X)\n\n\t# Second dense layer\n# \tX = layers.Dense(dense_layer_sizes[0], name = 'dense1')(X)\n# \tX = layers.BatchNormalization(name = 'bn1')(X)\n# \tX = layers.Activation('relu')(X)\n# \tX = layers.Dropout(dropout_rate, seed = 9)(X)\n\n\t# Output layer\n\tX = layers.Dense(3, name = 'output', kernel_regularizer = regularizers.l2(lambd))(X)\n\tX = layers.Activation('softmax')(X)\n\n\t# Create model\n\tmodel = models.Model(input = X_input, output = X, name = \"classif_model\")\n\treturn model","145b4352":"def parse_json(embeddings):\n\t'''\n\tParses the embeddigns given by BERT, and suitably formats them to be passed to the MLP model\n\n\tInput: embeddings, a DataFrame containing contextual embeddings from BERT, as well as the labels for the classification problem\n\tcolumns: \"emb_A\": contextual embedding for the word A\n\t         \"emb_B\": contextual embedding for the word B\n\t         \"emb_P\": contextual embedding for the pronoun\n\t         \"label\": the answer to the coreference problem: \"A\", \"B\" or \"NEITHER\"\n\n\tOutput: X, a numpy array containing, for each line in the GAP file, the concatenation of the embeddings of the target words\n\t        Y, a numpy array containing, for each line in the GAP file, the one-hot encoded answer to the coreference problem\n\t'''\n\tembeddings.sort_index(inplace = True) # Sorting the DataFrame, because reading from the json file messed with the order\n\tX = np.zeros((len(embeddings),3*768+2))\n\tY = np.zeros((len(embeddings), 3))\n\n\t# Concatenate features\n\tfor i in range(len(embeddings)):\n\t\tA = np.array(embeddings.loc[i,\"emb_A\"])\n\t\tB = np.array(embeddings.loc[i,\"emb_B\"])\n\t\tP = np.array(embeddings.loc[i,\"emb_P\"])\n\t\tV = np.array([0])        \n\t\tX[i] = np.concatenate((A, V, B, V, P))\n\n\t# One-hot encoding for labels\n\tfor i in range(len(embeddings)):\n\t\tlabel = embeddings.loc[i,\"label\"]\n\t\tif label == \"A\":\n\t\t\tY[i,0] = 1\n\t\telif label == \"B\":\n\t\t\tY[i,1] = 1\n\t\telse:\n\t\t\tY[i,2] = 1\n\n\treturn X, Y","46812a79":"# Read development embeddigns from json file - this is the output of Bert\n#development = pd.read_json(\"contextual_embeddings_gap_development.json\")\n#X_development, Y_development = parse_json(development)\n\n#validation = pd.read_json(\"contextual_embeddings_gap_validation.json\")\n#X_validation, Y_validation = parse_json(validation)\n\n#test = pd.read_json(\"contextual_embeddings_gap_test.json\")\n#X_test, Y_test = parse_json(test)","2146aaa0":"# There may be a few NaN values, where the offset of a target word is greater than the max_seq_length of BERT.\n# They are very few, so I'm just dropping the rows.\nremove_test = [row for row in range(len(X_test)) if np.sum(np.isnan(X_test[row]))]\nX_test = np.delete(X_test, remove_test, 0)\nY_test = np.delete(Y_test, remove_test, 0)\n\nremove_validation = [row for row in range(len(X_validation)) if np.sum(np.isnan(X_validation[row]))]\nX_validation = np.delete(X_validation, remove_validation, 0)\nY_validation = np.delete(Y_validation, remove_validation, 0)\n\n# We want predictions for all development rows. So instead of removing rows, make them 0\nremove_development = [row for row in range(len(X_development)) if np.sum(np.isnan(X_development[row]))]\nX_development[remove_development] = np.zeros(3*768+2)","e78c139c":"# Will train on data from the gap-test and gap-validation files, in total 2454 rows\nX_train = np.concatenate((X_test, X_validation), axis = 0)\nY_train = np.concatenate((Y_test, Y_validation), axis = 0)\n\n# Will predict probabilities for data from the gap-development file; initializing the predictions\nprediction = np.zeros((len(X_development),3)) # testing predictions","d84e2ade":"# Training and cross-validation\nfolds = KFold(n_splits=n_fold, shuffle=True, random_state=3)\nscores = []\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(X_train)):\n\t# split training and validation data\n\tprint('Fold', fold_n, 'started at', time.ctime())\n\tX_tr, X_val = X_train[train_index], X_train[valid_index]\n\tY_tr, Y_val = Y_train[train_index], Y_train[valid_index]\n\n\t# Define the model, re-initializing for each fold\n\tclassif_model = build_mlp_model([X_train.shape[1]])\n\tclassif_model.compile(optimizer = optimizers.Adam(lr = learning_rate), loss = \"categorical_crossentropy\")\n\tcallbacks = [kc.EarlyStopping(monitor='val_loss', patience=patience, restore_best_weights = True)]\n\n\t# train the model\n\tclassif_model.fit(x = X_tr, y = Y_tr, epochs = epochs, batch_size = batch_size, callbacks = callbacks, validation_data = (X_val, Y_val), verbose = 0)\n\n\t# make predictions on validation and test data\n\tpred_valid = classif_model.predict(x = X_val, verbose = 0)\n\tpred = classif_model.predict(x = X_development, verbose = 0)\n\n\t# oof[valid_index] = pred_valid.reshape(-1,)\n\tscores.append(log_loss(Y_val, pred_valid))\n\tprediction += pred\nprediction \/= n_fold\n\n# Print CV scores, as well as score on the test data\nprint('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))\nprint(scores)\nprint(\"Test score:\", log_loss(Y_development,prediction))","ef3d2802":"# Write the prediction to file for submission\nsubmission = pd.read_csv(\"..\/input\/sample_submission_stage_1.csv\", index_col = \"ID\")\nsubmission[\"A\"] = prediction[:,0]\nsubmission[\"B\"] = prediction[:,1]\nsubmission[\"NEITHER\"] = prediction[:,2]\nsubmission.to_csv(\"submission_bert.csv\")","c2bf066b":"The following method takes the data from a file, passes it through BERT to obtain contextual embeddings for the target words, then returns these embeddings in the emb DataFrame. Below, we will use it 3 times, once for each of the files gap-test, gap-development, gap-validation.","38794795":"We use the method defined above to parse the contextual embeddings, for each of the 3 GAP data files. The variable names here may be a bit counter-intuitive. Keep in mind that we will use X_test and X_validation for training, and then make predictions on X_development.","9a37f0f0":"Next, we feed BERT the data from these three files. For each line, we want to obtain contextual embeddings for the 3 target words (A, B, Pronoun). Here are some helper functions to keep track of the offsets of the target words.","b4f65cea":"Next, in order to feed our data to the model, we'll use some scripts from the bert repo on GitHub.","a5a5a4f8":"Finally, let's download all the data from the GAP repo. The gap-development.tsv data contains the same 2000 rows as test_stage_1.tsv data. So we'll make predictions on it. The other two files, gap-validation.tsv with 454 rows, and gap-test.tsv with 2000 rows, will be used for training.","1eb3bb2e":"Read the three GAP files, pass them through BERT, and write the contextual embeddings in json files. Unfortunately, I wasn't able to silence TensorFlow, so it's giving a lot of information and warnings when I run this cell.","5136003f":"The best LB score I got with this method is 0.52. There are many things to try that could improve this, and I may attempt some of these in the future:\n1. Fine-tune the BERT model, instead of using the pre-trained weights.\n2. Use a mix of the BERT layers, instead of just the output of the last layer.\n3. Tune some of the hyperparameters of the MLP model; I haven't played with them at all.\n4. Look at all occurences of the target words A and B in the text, instead of just the one specified by the offset.","f615ef92":"We define a model with two hidden layers and one output layer in Keras.","f3f928c8":"### This kernel is from Matei I.'s Taming the BERT. I tried swapping words with different ones to make generic sentences. It reduced the score by 0.02. Nevertheless posting it to save time for those contemplating it. \n\nIn this kernel, I'm trying to obtain a baseline for the following model:\n1. Use a pre-trained version for the BERT transformer model to obtain contextual word embeddings for the 3 target words in each passage: A, B and Pronoun.\n2. Feed this into a multi-layer perceptron (MLP), which learns to solve the coreference resolution problem as a supervised classification task.\n\nI'm using the [GitHub repo for the BERT project ](https:\/\/github.com\/google-research\/bert) to obtain the pre-trained model. See also the [BERT paper](https:\/\/arxiv.org\/abs\/1810.04805) by Devlin et al. The idea for the architecture (1-2 above) comes from the [paper](https:\/\/openreview.net\/forum?id=SJzSgnRcKX) \"What do you learn from context? Probing for sentence structure in contextualized word representations\" by Tenney et al. For coreference resolution, they use the OntoNotes and Definite Pronoun Resolution datasets, but not GAP. As such, the MLP hyperparameters they use may not be the best for our current task. The hyperparameters I use below are quite different from theirs.\n\nThe data I'm using comes from the 3 GAP files available [here](https:\/\/github.com\/google-research-datasets\/gap-coreference). The gap-development file contains the same data as the test_stage_1 file that we're trying to make predictions on. Of course, gap-development also contains the true labels, but I'm not using these when making predictions. I only use the true labels to evaluate the predictions made by my model. The other two files, gap-test and gap-validation, are used for training the model.\n\n**Updates V7**:\nIn the previous version, I was a little worried by the large variance of the model. The current version uses a much smaller MLP for the supervised classification problem, with more regularization. This achieves the same mean CV score, with lower variance. Specifically, the current MLP has:\n- only one hidden layer of size 37, down from two hidden layers of sizes [59,31]\n- dropout rate of 0.6 in the hidden layer, up from 0.5\n- L2 regularization in the output layer of 0.1, up from 0.05\n\nCeshine Lee independently published a kernel with a very neat PyTorch implementation of the same idea. You can check it out [here](https:\/\/www.kaggle.com\/ceshine\/pytorch-bert-baseline-public-score-0-54).","6c120e99":"Downloading the pre-trained BERT -Base, Uncased model. The kernel needs an Internet connection to do this, so make sure it's enabled.","53d22a90":"Now that we have the embeddings, we pass them to a multi-layer perceptron (i.e. vanilla neural network), which learns to classify the triples of embeddings (emb_A, emb_B,emb_P) as \"A\", \"B\" or \"NEITHER\"."}}