{"cell_type":{"3896612a":"code","41f4a25b":"code","425f44a5":"code","cbc561ee":"code","ab17f7d6":"code","d64277c2":"code","400a3eca":"code","47c9466c":"code","c0ad6391":"code","1e89259f":"code","c4a2005c":"code","f97a6541":"code","254fe1a0":"code","ea0162e9":"code","ed6d34b2":"code","29cf79a1":"code","5445c8be":"code","7b0648eb":"code","e7bafa48":"code","86073f16":"code","cf8d88b7":"code","4b2b7473":"code","abb8b400":"code","96ce4754":"code","887473f3":"code","70b57b6e":"code","5464693b":"code","72d1d53e":"code","937a1ca5":"code","bf04f604":"code","36b4c6d8":"code","4f99f4e1":"code","db3eabfa":"code","7fb25499":"code","aa11c271":"code","858762b4":"code","59e3d74c":"code","2d6a0de6":"code","96074ee4":"code","5a8ac60e":"code","a958a89c":"code","2310ce35":"code","8c0f652c":"code","169eed94":"code","07db0a7a":"code","14a04ac9":"code","f201be7d":"code","65c392f1":"code","820354f0":"code","d2ebafd4":"code","dbd2971a":"code","69cd18e1":"code","f48ccddc":"code","9a68b48a":"markdown","ea4caeca":"markdown","e470f189":"markdown","1fc64928":"markdown","fef13728":"markdown","833d840c":"markdown","9455c72f":"markdown","f4c5d87e":"markdown","97b2c9e9":"markdown","98bd0549":"markdown"},"source":{"3896612a":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score, classification_report\n\nimport warnings\nwarnings.filterwarnings('ignore')","41f4a25b":"df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","425f44a5":"df.head()","cbc561ee":"print(\"Dataset shape :- \\n\", df.shape)","ab17f7d6":"df.drop('Time', axis=1, inplace=True)","d64277c2":"df.head()","400a3eca":"fraud_count = len(df[df.Class == 0])\nnonfraud_count = len(df[df.Class == 1])\nfraud_percentage = round(fraud_count\/nonfraud_count)*100\n\nprint('Cases')\nprint('---------------------------')\nprint('Total Fraud_count is:-', fraud_count)\nprint('Total Non-Fraud_count is:-', nonfraud_count)","47c9466c":"false = df[df['Class']==1]\ntrue = df[df['Class']==0]\n\n#false detection case\n\nprint('False Detection Class')\nprint(\"---------------------\")\nprint(false.Amount.describe(), \"\\n\")\n\n#true detection case\n\nprint('False Detection Class')\nprint(\"---------------------\")\nprint(true.Amount.describe(), \"\\n\")","c0ad6391":"#check columns\n\nprint(\"Columns or Feature names :-\", df.columns)","1e89259f":"#check unique values of target variable\n\nprint(\"Unique values of target variable :-\", df['Class'].unique())","c4a2005c":"#check number of samples under target column\n\nprint(\"Number of sample under each target value :- \\n\",df['Class'].value_counts())","f97a6541":"#Checking null values\n\ndf.isnull().sum()","254fe1a0":"sc = StandardScaler()\namount = df['Amount'].values\n\ndf['Amount'] = sc.fit_transform(amount.reshape(-1,1))","ea0162e9":"print(df['Amount'].head())","ed6d34b2":"X = df.drop('Class', axis=1).values\ny = df['Class'].values","29cf79a1":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.20, random_state=0)","5445c8be":"print('X_train Samples :-', X_train[:1])","7b0648eb":"print('X_test Samples :-', X_train[0:1])","e7bafa48":"print('y_train Samples :-', y_train[0:20])","86073f16":"print('y_test Samples :-', y_test[0:20])","cf8d88b7":"print('Shape of X_Train dataset')\nprint('----------------------')\nprint(X_train.shape)\n\nprint('Shape of y_Train dataset')\nprint('----------------------')\nprint(y_train.shape)\n\n\nprint('Shape of X_Test dataset')\nprint('----------------------')\nprint(X_test.shape)\n\nprint('Shape of y_Test dataset')\nprint('----------------------')\nprint(y_test.shape)\n","4b2b7473":"tree_model = DecisionTreeClassifier(max_depth=5, criterion='entropy')\ntree_model.fit(X_train, y_train)\ntree_pred = tree_model.predict(X_test)","abb8b400":"print('-----------Accuracy Score-----------')\nprint('Accuracy score of the decision tree', (accuracy_score(y_test, tree_pred)))","96ce4754":"print('-----------F1 Score-----------')\nprint('F1 score of the decision tree', (f1_score(y_test, tree_pred)))","887473f3":"print('-----------Confusion Matrix-----------')\nprint('Confusion Matrix of the decision tree :- \\n', (confusion_matrix(y_test, tree_pred)))","70b57b6e":"cm = confusion_matrix(y_test, tree_pred)\nfig, ax = plt.subplots(figsize=(6,4))\nsns.heatmap(cm, annot=True)\nplt.show()","5464693b":"print('-----------Classification Report-----------')\nprint('Confusion Matrix of the decision tree :- \\n', (classification_report(y_test, tree_pred)))","72d1d53e":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\nknn_pred = knn.predict(X_test)","937a1ca5":"print('-----------Accuracy Score-----------')\nprint('Accuracy score of the KNN', (accuracy_score(y_test, knn_pred)))","bf04f604":"print('-----------F1 Score-----------')\nprint('F1 score of the KNN', (f1_score(y_test, knn_pred)))","36b4c6d8":"print('-----------Confusion Matrix-----------')\nprint('Confusion Matrix of the KNN :- \\n', (confusion_matrix(y_test, knn_pred)))","4f99f4e1":"cm = confusion_matrix(y_test, knn_pred)\nfig, ax = plt.subplots(figsize=(6,4))\nsns.heatmap(cm, annot=True)\nplt.show()","db3eabfa":"print('-----------Classification Report-----------')\nprint('Confusion Matrix of the KNN :- \\n', (classification_report(y_test, knn_pred)))","7fb25499":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\nlr_pred = lr.predict(X_test)","aa11c271":"print('-----------Accuracy Score-----------')\nprint('Accuracy score of the Logistic Regression', (accuracy_score(y_test, lr_pred)))","858762b4":"print('-----------F1 Score-----------')\nprint('F1 score of the logistic regression', (f1_score(y_test, lr_pred)))","59e3d74c":"print('-----------Confusion Matrix-----------')\nprint('Confusion Matrix of the logistic regression :- \\n', (confusion_matrix(y_test, lr_pred)))","2d6a0de6":"cm = confusion_matrix(y_test, lr_pred)\nfig, ax = plt.subplots(figsize=(6,4))\nsns.heatmap(cm, annot=True)\nplt.show()","96074ee4":"print('-----------Classification Report-----------')\nprint('Confusion Matrix of the logistic regression :- \\n', (classification_report(y_test, lr_pred)))","5a8ac60e":"rf = RandomForestClassifier()\nrf.fit(X_train, y_train)\nrf_pred = rf.predict(X_test)","a958a89c":"print('-----------Accuracy Score-----------')\nprint('Accuracy score of the Random Forest', (accuracy_score(y_test, rf_pred)))","2310ce35":"print('-----------F1 Score-----------')\nprint('F1 score of the random forest', (f1_score(y_test, rf_pred)))","8c0f652c":"print('-----------Confusion Matrix-----------')\nprint('Confusion Matrix of the random forest :- \\n', (confusion_matrix(y_test, rf_pred)))","169eed94":"print('-----------Classification Report-----------')\nprint('Confusion Matrix of the random forest :- \\n', (classification_report(y_test, rf_pred)))","07db0a7a":"from sklearn.metrics import roc_auc_score, roc_curve","14a04ac9":"score = roc_auc_score(y_test, tree_pred)","f201be7d":"print('ROC-AUC Score is:-', score)","65c392f1":"fpr, tpr, thresholds = roc_curve(y_test, tree_pred)","820354f0":"plt.plot(fpr, tpr, label='ROC Curve (area=%0.2f)' % score)\nplt.plot([0,1], [0,1], 'k--')\nplt.legend()\nplt.show()","d2ebafd4":"rf_score = roc_auc_score(y_test, rf_pred)","dbd2971a":"print('ROC-AUC Score is:-', rf_score)","69cd18e1":"fpr, tpr, thresholds = roc_curve(y_test, rf_pred)","f48ccddc":"plt.plot(fpr, tpr, label='ROC Curve (area=%0.2f)' % rf_score)\nplt.plot([0,1], [0,1], 'k--')\nplt.legend()\nplt.show()","9a68b48a":"The target variable Class has 0 and 1 values. Here\n\n* 0 for **non-fraudulent** transactions\n* 1 for **fraudulent** transactions","ea4caeca":"1. Decision Tree","e470f189":"2. Random Forest","1fc64928":"1. Decision Tree","fef13728":"3. Logistic Regression","833d840c":"### Data Transformation","9455c72f":"2. KNN","f4c5d87e":"## ROC - AUC Curve","97b2c9e9":"## Splitting Dataset","98bd0549":"## Modeling"}}