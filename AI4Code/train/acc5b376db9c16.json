{"cell_type":{"eec9eff5":"code","968aa44a":"code","5371c364":"code","03b5d26b":"code","65e93b56":"code","d7b91c9c":"code","06992e69":"code","bfeb3b6e":"code","d7849de5":"code","7a081063":"code","bc0214fc":"code","b03ff15d":"code","9a9dc2fa":"code","26e2ee84":"code","c8476f6f":"code","70cde48d":"code","0ae7fb64":"code","f2a34f75":"markdown","0a0de86c":"markdown","a36d522b":"markdown","b0d358ff":"markdown","555110fa":"markdown","686d681c":"markdown","fd09ba9d":"markdown","80950a86":"markdown","bb9ef5ca":"markdown","f2914985":"markdown","361c0e36":"markdown","23efd256":"markdown","58ebc4ec":"markdown","8e1b36a8":"markdown","f0359de8":"markdown"},"source":{"eec9eff5":"!conda install '..\/input\/notebook66a8aacbe7\/gdcm-2.8.9-py37h500ead1_1.tar.bz2' -c conda-forge -y\n!conda install '..\/input\/notebook66a8aacbe7\/libjpeg-turbo-2.1.0-h7f98852_0.tar.bz2' -c conda-forge -y\n!conda install '..\/input\/notebook66a8aacbe7\/libgcc-ng-9.3.0-h2828fa1_19.tar.bz2' -c conda-forge -y\n\n!conda install '..\/input\/notebook66a8aacbe7\/conda-4.10.1-py37h89c1867_0.tar.bz2' -c conda-forge -y\n!conda install '..\/input\/notebook66a8aacbe7\/certifi-2020.12.5-py37h89c1867_1.tar.bz2' -c conda-forge -y\n!conda install '..\/input\/notebook66a8aacbe7\/openssl-1.1.1k-h7f98852_0.tar.bz2' -c conda-forge -y","968aa44a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport pydicom\nimport glob\nfrom tqdm.notebook import tqdm\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport matplotlib.pyplot as plt\nfrom skimage import exposure\nimport cv2\nimport warnings\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nwarnings.filterwarnings('ignore')\nclass color:\n    BOLD = '\\033[1m' + '\\033[93m'\n    END = '\\033[0m'","5371c364":"dataset_path = Path('..\/input\/siim-covid19-detection')","03b5d26b":"train_study_df = pd.read_csv(dataset_path\/'train_study_level.csv')","65e93b56":"study_classes = ['Negative for Pneumonia', 'Typical Appearance', 'Indeterminate Appearance', 'Atypical Appearance']\nnp.unique(train_study_df[study_classes].values, axis=0)","d7b91c9c":"train_image_df = pd.read_csv(dataset_path\/'train_image_level.csv')","06992e69":"train_image_df['split_label'] = train_image_df.label.apply(lambda x: [x.split()[offs:offs+6] for offs in range(0, len(x.split()), 6)])","bfeb3b6e":"def dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    # VOI LUT (if available by DICOM device) is used to\n    # transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data\n        \n    \ndef plot_img(img, size=(7, 7), is_rgb=True, title=\"\", cmap='gray'):\n    plt.figure(figsize=size)\n    plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()\n\n\ndef plot_imgs(imgs, cols=4, size=7, is_rgb=True, title=\"\", cmap='rainbow', img_size=(500,500)):\n    rows = len(imgs)\/\/cols + 1\n    fig = plt.figure(figsize=(cols*size, rows*size))\n    for i, img in enumerate(imgs):\n        if img_size is not None:\n            img = cv2.resize(img, img_size)\n        fig.add_subplot(rows, cols, i+1)\n        plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()","d7849de5":"#dicom_paths = get_dicom_files(dataset_path\/'train')\n#imgs = [dicom2array(path) for path in dicom_paths[:4]]\n#plot_imgs(imgs)","7a081063":"#num_images_per_study = []\n#for i in (dataset_path\/'train').ls():\n#    num_images_per_study.append(len(get_dicom_files(i)))\n#    if len(get_dicom_files(i)) > 5:\n#        print(f'Study {i} had {len(get_dicom_files(i))} images')\n    ","bc0214fc":"def image_path(row):\n    study_path = dataset_path\/'train'\/row.StudyInstanceUID\n    for i in get_dicom_files(study_path):\n        if row.id.split('_')[0] == i.stem: return i \n        \ntrain_image_df['image_path'] = train_image_df.apply(image_path, axis=1)","b03ff15d":"imgs = []\nimage_paths = train_image_df['image_path'].values\ncolor_mean=(104,11,12)\n# map label_id to specify color\nthickness = 5\nscale = 5\n\n\nfor i in range(8):\n    image_path = random.choice(image_paths)\n    img = dicom2array(path=image_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    \n\n    img = np.stack([img, img, img], axis=-1)\n    for i in train_image_df.loc[train_image_df['image_path'] == image_path].split_label.values[0]:\n        if i[0] == 'opacity':\n            \n            img = cv2.rectangle(img,\n                                (int(float(i[2])\/scale), int(float(i[3])\/scale)),\n                                (int(float(i[4])\/scale), int(float(i[5])\/scale)),\n                                [255,0,0], thickness)\n    \n    img = cv2.resize(img, (500,500))\n    \n    img = img - color_mean\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=\"rainbow\")","9a9dc2fa":"def show_img(data):\n  imgs=[]\n\n  image_paths = train_image_df['image_path'].values\n\n  # map label_id to specify color\n  thickness = 5\n  scale = 5\n\n\n  for i in data:\n    file = '..\/input\/siim-covid19-detection\/train\/{}\/*\/*'.format(i)\n    file = glob.glob(file)[0]\n    img = dicom2array(path=file)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    for i in train_image_df.loc[train_image_df['image_path'] == image_path].split_label.values[0]:\n        if i[0] == 'opacity':\n            \n            img = cv2.rectangle(img,\n                                (int(float(i[2])\/scale), int(float(i[3])\/scale)),\n                                (int(float(i[4])\/scale), int(float(i[5])\/scale)),\n                                [255,0,0], thickness)\n    \n    img = cv2.resize(img, (500,500))\n    img = img - color_mean\n    imgs.append(img)\n    \n  plot_imgs(imgs, cmap=\"rainbow\",img_size=None)","26e2ee84":"data = [\"72044bb44d41\", \"5b65a69885b6\", \"6aa32e76f998\",\"71fb5ea71283\",\"71f56b6a5589\",\n                         \"c9ffe6312921\", \"082cafb03942\", \"d3e83031ebea\"]\nshow_img(data)","c8476f6f":"data = [\"f807cd855d31\", \"8087e3bc0efe\", \"7249de10ed69\",\"000c9c05fd14\",\"0051d9b12e72\",\n                         \"e300a4e86207\", \"4bac6c7da8b8\", \"f2d30ac37f7b\"] \nshow_img(data)","70cde48d":"data =[\"b949689a9ef1\", \"fe7e6015560d\", \"feffa20fac13\",\"f871e115903e\",\"f87baaa34bec\",\n                         \"747483509d0e\", \"c70369caef91\", \"1e1b4b1b53cb\"]\nshow_img(data)","0ae7fb64":"data = [\"612ea5194007\", \"db14e640e037\", \"d4ab797396b4\",\"612db6880c2d\",\"60f2bf33d1b1\",\n                         \"60c6d93dbf6b\", \"b3cf474bee3b\", \"0ba55e5422ab\"]\nshow_img(data)","f2a34f75":"![image.png](attachment:527ce255-d630-4621-bdf3-dc3fb5cacf49.png)\n\n\u5de6\u53f3\uff1a\u3059\u308a\u30ac\u30e9\u30b9\u306e\u4e0d\u900f\u660e\u5ea6\u304c\u5e83\u7bc4\u56f2\u306b\u6563\u3089\u3070\u3063\u3066\u304a\u308a\u3001\u7d10\u306e\u3088\u3046\u306a\u5f71\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002\n\u53f3\u4e0b\u8449\u306b\u7a7a\u6c17\u6c17\u7ba1\u652f\u9020\u5f71\u306b\u3088\u308b\u4e0d\u898f\u5247\u306a\u786c\u5316\u304c\u89b3\u5bdf\u3055\u308c\u3001\u80f8\u819c\u76f4\u4e0b\u306e\u75c5\u5909\u306f\u53f3\u4e0b\u8449\u306b\u9855\u8457\u3067\u306f\u306a\u304f\u3001\u80ba\u708e\u69d8\u306b\u7d44\u7e54\u5316\u3055\u308c\u3066\u3044\u305f\u3002","0a0de86c":"# \ud83d\udccc\u4e0d\u78ba\u5b9a\u306a\u5916\u89b3 Indeterminate Appearance","a36d522b":"# \ud83d\udccc\u80ba\u708e\u306f\u9670\u6027 Negative for Pneumonia","b0d358ff":"\u307e\u308b\u3067\u5171\u901a\u7684\u306a\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u305b\u3093\u3002","555110fa":"# \ud83d\udccc\u975e\u5b9a\u578b\u306e\u5916\u89b3 Atypical Appearance","686d681c":"\u3053\u308c\u306f\u3069\u3046\u3084\u3063\u3066\u5b66\u7fd2\u3055\u305b\u308c\u3070\u3044\u3044\u306e\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u5199\u771f\u3092\u305f\u304f\u3055\u3093\u8f09\u305b\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u3046\u3059\u308c\u3070\u8a3a\u65ad\u3067\u304d\u308b\u306e\u304b\u4e0d\u660e\u3067\u3059\u3002<br>\n\u601d\u3044\u5207\u3063\u3066\u3001\u30b0\u30e9\u30f3\u30c9\u30de\u30b9\u30bf\u30fc\u306b\u805e\u3044\u3066\u307f\u307e\u3057\u305f\u3002<br>\n\n\u7b54\u3048\u306f\u3001\u3042\u306a\u305f\u306f\u533b\u8005\u3058\u3083\u306a\u3044\u3093\u3067\u3057\u3087\u3002\u3058\u3083\u3042\u3001\u30e2\u30c7\u30eb\u3092\u3064\u304f\u308b\u3057\u304b\u306a\u3044\u3088\u3001\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u3002<br>\n\n\u304c\u3093\u3070\u3063\u3066\u3001\u8272\u3005\u3057\u3089\u3079\u305f\u306e\u3067\u3059\u304c\u7121\u99c4\u306b\u306a\u3063\u3066\u3057\u307e\u3057\u307e\u3057\u305f\u3002<br>\n\n\n","fd09ba9d":"X\u7dda\u8a3a\u65ad\u306e\u57fa\u790e\u77e5\u8b58\ud83d\ude37<br>\nX\u7dda\u306e\u5438\u53ce\u306f\u3001X\u7dda\u306e\u6ce2\u9577\u3001\u5bfe\u8c61\u306e\u539a\u3055\u3001\u5bfe\u8c61\u306e\u5bc6\u5ea6\u3001\u69cb\u6210\u539f\u5b50\u306a\u3069\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\u6c34\u306b\u57fa\u3065\u3044\u3066\u3001\u5fc3\u81d3\u3001\u5927\u8840\u7ba1\u3001\u304a\u3088\u3073\u7e26\u9694\u306f\u306b\u8fd1\u3044\u3067\u3059\u3002\u6c34\u306e\u5438\u53ce\u3001\u304a\u3088\u3073\u80ba\u80de\u306f\u307b\u3068\u3093\u3069\u7a7a\u6c17\u3067\u3042\u308b\u305f\u3081\u3001\u5438\u53ce\u3055\u308c\u307e\u305b\u3093\u3002\u751f\u4f53\u306bX\u7dda\u3092\u7167\u5c04\u3059\u308b\u3068\u3001\u5438\u53ce\u306e\u9055\u3044\u306b\u3088\u308a\u3001X\u7dda\u30d5\u30a3\u30eb\u30e0\u306b\u305d\u308c\u305e\u308c\u306e\u9ed2\u3055\uff08\u9ed2\u5316\u5ea6\uff09\u304c\u73fe\u308c\u307e\u3059\u3002\u9aa8\u306fX\u7dda\u3092\u5438\u53ce\u3057\u3066\u901a\u904e\u3055\u305b\u306a\u3044\u305f\u3081\u3001\u30d5\u30a3\u30eb\u30e0\u306f\u4eba\u4f53\u3067\u6700\u3082\u767d\u304f\u3001\u80ba\u306b\u306f\u7a7a\u6c17\u304c\u591a\u304f\u542b\u307e\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u80ba\u91ce\u306f\u6bd4\u8f03\u7684\u9ed2\u304f\u898b\u3048\u307e\u3059\u3002\u80ba\u304c\u708e\u75c7\u3092\u8d77\u3053\u3057\u3001\u6ef2\u51fa\u6db2\uff08\u6c34\u306b\u8fd1\u3044\u900f\u904e\u6027\uff09\u304c\u5897\u52a0\u3059\u308b\u3068\u3001\u305d\u308c\u306f\u767d\u3044\u5f71\u3068\u898b\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u80ba\u304c\u5d29\u58ca\u3057\u3066\u6c17\u80f8\u306e\u3088\u3046\u306b\u80ba\u7d44\u7e54\u304c\u53ce\u7e2e\u3059\u308b\u3068\u3001\u305d\u306e\u90e8\u5206\u306f\u5747\u4e00\u306b\u9ed2\u304f\u306a\u308a\u307e\u3059\u3002\u6620\u753b\u306b\u767b\u5834\u3057\u307e\u3059\u3002\u3053\u306e\u9ed2\u305a\u307f\u306e\u7a0b\u5ea6\u306e\u9055\u3044\u3001\u3064\u307e\u308aX\u7dda\u5199\u771f\u306e\u5f71\u3092\u901a\u5e38\u306e\u89e3\u5256\u5b66\u7684\u69cb\u9020\u3068\u6bd4\u8f03\u3057\u305f\u308a\u3001\u75c5\u6c17\u306b\u3088\u308b\u5909\u5316\u753b\u50cf\u3068\u898b\u306a\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u3067\u3001X\u7dda\u8a3a\u65ad\u304c\u767a\u5c55\u3057\u307e\u3059\u3002","80950a86":"![image.png](attachment:40f82c13-6caf-4585-a29e-19cc37365756.png)","bb9ef5ca":"![image.png](attachment:4e4c4eb2-e3f6-451a-95dd-3150b15d04e8.png)","f2914985":"# \ud83d\udcccrandom","361c0e36":"http:\/\/nagasawanorio.cocolog-nifty.com\/blog\/2013\/03\/x-dc23.html\n","23efd256":"# \u7d50\u8ad6\u3001\u533b\u8005\u3067\u306f\u306a\u3044\u306e\u3067\u5199\u771f\u307f\u3066\u3082\u308f\u304b\u308a\u307e\u305b\u3093","58ebc4ec":"# \ud83d\udccc\u5178\u578b\u7684\u306a\u5916\u89b3 Typical Appearance","8e1b36a8":"![image.png](attachment:67ed20f7-83d2-4b02-8733-75271376d35c.png)","f0359de8":"![image.png](attachment:c2feaa4c-2b07-43fc-8c7a-2664dd31ed70.png)"}}