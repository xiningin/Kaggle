{"cell_type":{"71dd7984":"code","f8e85b96":"code","ccda9616":"code","87cc3309":"code","ff8ec6bb":"code","2304c2ea":"code","38be22cf":"code","1baddfe4":"code","9aee6b8d":"code","6206cea8":"code","6b4f7f8f":"code","2224b5e8":"code","f6710b74":"code","a8c086ee":"code","c04ee00d":"code","50e761a1":"markdown","27a6eb54":"markdown","3a155016":"markdown","52870046":"markdown","e6b294ba":"markdown"},"source":{"71dd7984":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom pathlib import Path\nfrom learntools.time_series.style import *  # plot style settings\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","f8e85b96":"book_sales = pd.read_csv(\"..\/input\/ts-course-data\/book_sales.csv\", index_col = 'Date', parse_dates = ['Date']).drop('Paperback', axis = 1)\nbook_sales['Time'] = np.arange(len(book_sales.index))\nbook_sales['Lag_1'] = book_sales['Hardcover'].shift(1)\nbook_sales = book_sales.reindex(columns=['Hardcover', 'Time', 'Lag_1'])","ccda9616":"book_sales[:5]","87cc3309":"ar = pd.read_csv('..\/input\/ts-course-data\/ar.csv')","ff8ec6bb":"ar[:5]","2304c2ea":"dtype = {\n    'store_nbr': 'category',\n    'family': 'category',\n    'sales': 'float32',\n    'onpromotion': 'uint64',\n}\nstore_sales = pd.read_csv(\"..\/input\/store-sales-time-series-forecast-analyst\/train.csv\",dtype = dtype)\nstore_sales = store_sales.set_index(['store_nbr','family'], append = True)\naverage_sales = store_sales.groupby('date').mean()['sales']","38be22cf":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfig, ax = plt.subplots(figsize = (15,8))\nax.plot('Time','Hardcover', data = book_sales,color = '0.75')\nax = sns.regplot(x='Time', y='Hardcover', data=book_sales, ci=None, scatter_kws=dict(color='0.25'))\nax.set_title('Time Plot of Hardcover Sales')","1baddfe4":"book_sales['Hardcover'] = 3.33*book_sales['Time'][:]+150.5\nbook_sales[:5]","9aee6b8d":"fig, ax = plt.subplots(figsize = (15,8))\nax.plot(ar['ar1'], color = 'r', label = \"Series1\")\nax.plot(ar['ar2'] , color = 'b', label = 'Series2')\nax.legend(loc = 'upper left')\n","6206cea8":"book_sales[['Lag_1']] = book_sales[['Lag_1']].fillna(283.0)\nerror = np.random.normal(0,1,30)\ntarget_1 = 0.95*book_sales['Lag_1']+error\ntarget_2 = -0.95*book_sales['Lag_1'] + error\nprint(\"target1\", target_1[:5])","6b4f7f8f":"fig, ax = plt.subplots(figsize = (15,8))\nax.bar(target_1.index, target_1.values, color = 'r', label=\"target1\")\nax.bar(target_2.index, target_2.values, color = 'black', label = \"target2\")\nax.axhline(0, color = 'grey', linewidth = 0.8)\nax.legend(loc = \"upper left\")\nplt.xlabel(\"Date\"); plt.ylabel('values')\nplt.xlim()\nplt.show()\n","2224b5e8":"from sklearn.linear_model import LinearRegression\n\ndf = average_sales.to_frame() # doanh so binh quan\ndf['Time'] = np.arange(len(df.index))\ndf['Time']\nX = df[['Time']]\ny = df.sales.values\n\n# linear Regression\nlr = LinearRegression()\nlr.fit(X,y)\n\ny_pre = lr.predict(X)\ny_pre","f6710b74":"fig, ax = plt.subplots(figsize = (15,5))\nax.plot(df.index,y,\"b.\", label = 'gia tri thuc')\nax.plot(df.index,y_pre, linewidth = 3, color = 'r', label = \"y_pre \")\nplt.xlabel('Date');plt.ylabel('Values');\nplt.legend(loc = \"upper left\")\nplt.show()","a8c086ee":"df = average_sales.to_frame()\nlag_1 = df['sales'].shift(1)\ndf['lag_1']= lag_1\ndf[['lag_1']] = df[['lag_1']].fillna(821.034790)\n\nX = df.loc[:,['lag_1']] # independent\ny = df.loc[:,'sales'] # dependent\n\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X,y)\n\ny_pre = lr.predict(X)\ny_pre","c04ee00d":"fig, ax = plt.subplots(figsize = (15,8))\nax.plot(X,y,\"b.\",label = \"Gia tri thuc\")\nplt.plot(X,y_pre)","50e761a1":"-------------------------------------------------------------------------------\n\nInterpreting the regression coefficients can help us recognize serial dependence in a time plot. Consider the model `target = weight * lag_1 + error`, where `error` is random noise and `weight` is a number between -1 and 1. The `weight` in this case tells you how likely the next time step will have the same sign as the previous time step: a `weight` close to 1 means `target` will likely have the same sign as the previous step, while a `weight` close to -1 means `target` will likely have the opposite sign.\n\n# 2) Interpret linear regression with a lag feature\n\nRun the following cell to see two series generated according to the model just described.","27a6eb54":"-------------------------------------------------------------------------------\n\nNow we'll get started with the *Store Sales - Time Series Forecasting* competition data. The entire dataset comprises almost 1800 series recording store sales across a variety of product families from 2013 into 2017. For this lesson, we'll just work with a single series (`average_sales`) of the average sales each day.\n\n# 3) Fit a time-step feature\n\nComplete the code below to create a linear regression model with a time-step feature on the series of average product sales. The target is in a column called `'sales'`.","3a155016":"# 1) Interpret linear regression with the time dummy\n\nThe linear regression line has an equation of (approximately) `Hardcover = 3.33 * Time + 150.5`. Over 6 days how much on average would you expect hardcover sales to change? After you've thought about it, run the next cell.","52870046":"-------------------------------------------------------------------------------\n\n# 4) Fit a lag feature to Store Sales\n\nComplete the code below to create a linear regression model with a lag feature on the series of average product sales. The target is in a column of `df` called `'sales'`.","e6b294ba":"One advantage linear regression has over more complicated algorithms is that the models it creates are explainable -- it's easy to interpret what contribution each feature makes to the predictions. In the model $target = weight * feature + bias$, the weight tells you by how much the target changes on average for each unit of change in the feature.\n\nRun the next cell to see a linear regression on Hardcover Sales."}}