{"cell_type":{"97ffc58e":"code","f7cc180c":"code","ea9aaaf7":"code","61b72142":"code","36254a9f":"code","677b7f97":"code","c93675a5":"code","dd50906a":"code","1e8d743b":"code","3d32c99a":"code","5aaedc18":"code","f6cf2754":"code","3a4fde14":"code","771e6dfb":"code","50e8bcb6":"code","ba97c4f1":"code","57b7edfa":"code","7c7adeb8":"code","02c301d4":"code","ed42e8d0":"code","72c88c96":"code","43a05cf8":"code","3ba63c9a":"code","b6da074a":"code","349e821c":"code","81e0aa7e":"code","829fdf29":"code","9ec0c04c":"code","db53708b":"code","0ff0f554":"code","a52c2465":"code","16b5e5b7":"code","fbf66de4":"code","b63a63a4":"code","15a94bbb":"code","de75c6cc":"code","8c933587":"code","aa6ea81b":"code","59a1b556":"code","9848d92d":"code","5625e954":"code","9784d386":"code","a9427be7":"code","1e1b4d1d":"code","1720207e":"code","7be4e931":"code","196dd34a":"markdown","9a432753":"markdown","1b4899f6":"markdown","9ff1563e":"markdown","2984b9c5":"markdown","09d11ff2":"markdown","2a18d299":"markdown","7a6cf9c6":"markdown","2edc170c":"markdown","585a3cb4":"markdown","51eced72":"markdown","853583e3":"markdown","c1863fc6":"markdown","1fa5560c":"markdown","a28d33f7":"markdown","4a74d1fb":"markdown","d0823809":"markdown","e292320c":"markdown","b2f7fa34":"markdown","18f24906":"markdown","db4d1fb5":"markdown","06212082":"markdown","47464894":"markdown","03686925":"markdown"},"source":{"97ffc58e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.preprocessing import LabelEncoder, RobustScaler\nfrom sklearn.model_selection import GridSearchCV,KFold,cross_val_score\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f7cc180c":"X=pd.read_csv(\"..\/input\/train.csv\")\nX_test=pd.read_csv(\"..\/input\/test.csv\")\nX.head()","ea9aaaf7":"X_test.head()","61b72142":"X.shape,X_test.shape","36254a9f":"X.isnull().sum()[X.isnull().sum()>0]","677b7f97":"X_test.isnull().sum()[X_test.isnull().sum()>0]","c93675a5":"corr=X.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(X[corr.index[abs(corr['SalePrice'])>0.4]].corr(),annot=True)","dd50906a":"fillnull={ 'PoolQC':'NoPool', 'MiscFeature':'NoMisc', 'Alley':'NoAlley', 'Fence':'NoFence', 'FireplaceQu':'NoFire' }\nX.fillna(fillnull,inplace=True)\nX_test.fillna(fillnull,inplace=True)","1e8d743b":"X.drop(X[X.GrLivArea>4000].index.values,inplace=True)","3d32c99a":"plt.plot((X.LotArea)**0.5,X.LotFrontage,'.')\nplt.xlabel('LotArea')\nplt.ylabel('LotFrontage')","5aaedc18":"X.drop(X[X.LotFrontage>300].index.values,inplace=True)\nX.drop(X[X.LotArea>100000].index.values,inplace=True)\nX.shape","f6cf2754":"plt.plot((X.LotArea)**0.5,X.LotFrontage,'.')\nplt.xlabel('LotArea')\nplt.ylabel('LotFrontage')","3a4fde14":"reg=LinearRegression()\nreg.fit(((X[(X.LotArea<35000) & (X.LotFrontage<200)].LotArea)**0.5).values.reshape(-1,1),X[(X.LotArea<35000) & (X.LotFrontage<200)].LotFrontage.values)\nreg.intercept_,reg.coef_[0]","771e6dfb":"X.loc[X.LotFrontage.isnull(),'LotFrontage']=reg.predict((X[X.LotFrontage.isnull()].LotArea.values.reshape(-1,1))**0.5)\nX_test.loc[X_test.LotFrontage.isnull(),'LotFrontage']=reg.predict((X_test[X_test.LotFrontage.isnull()].LotArea.values.reshape(-1,1))**0.5)","50e8bcb6":"X_test.GarageYrBlt.describe()","ba97c4f1":"X_test[X_test.GarageYrBlt>2018].GarageYrBlt","57b7edfa":"X_test.GarageYrBlt.replace({2207:2007},inplace=True)","7c7adeb8":"fillnull={ 'GarageType':'NoGarage', 'GarageFinish':'NoGarage', 'GarageQual':'NoGarage', 'GarageCond':'NoGarage', 'BsmtQual':'NoBsmt', 'BsmtCond':'NoBsmt', 'BsmtExposure':'NoBsmt', 'BsmtFinType1':'NoBsmt', 'BsmtFinType2':'NoBsmt' }\nX.fillna(fillnull,inplace=True)\nX_test.fillna(fillnull,inplace=True)","02c301d4":"X.MasVnrType.fillna(\"None\",inplace=True)\nX_test.MasVnrType.fillna(\"None\",inplace=True)\nX.MasVnrArea.fillna(0,inplace=True)\nX_test.MasVnrArea.fillna(0,inplace=True)\nX.Electrical.fillna(\"SBrkr\",inplace=True)","ed42e8d0":"fillwithmode=['MSZoning','Utilities','Exterior1st','Exterior2nd','KitchenQual','Functional','SaleType']\nfor column in fillwithmode:\n    mode=X[column].mode()[0]\n    X_test[column].fillna(mode,inplace=True)\nfillwithzero=['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']\nfor column in fillwithzero:\n    X_test[column].fillna(0,inplace=True)\nfillwithmedian=['GarageArea','GarageCars']\nfor column in fillwithmedian:\n    median=X[column].median()\n    X_test[column].fillna(median,inplace=True)\nX_test.isnull().sum()[X_test.isnull().sum()>0]","72c88c96":"X.isnull().sum()[X.isnull().sum()>0]","43a05cf8":"le=LabelEncoder()\ndummies=pd.get_dummies(X.MSZoning,prefix='MSZoning')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.MSZoning,prefix='MSZoning')\nX_test=pd.concat([X_test,dummies],axis=1)\nX.loc[:,'Street']=le.fit_transform(X.Street.values)\nX_test.loc[:,'Street']=le.transform(X_test.Street.values)\nmapping={'NoAlley':0,'Grvl':1,'Pave':2}\nX.Alley.replace(mapping,inplace=True)\nX_test.Alley.replace(mapping,inplace=True)\nmapping={'IR3':0,'IR2':1,'IR1':2,'Reg':3}\nX.LotShape.replace(mapping,inplace=True)\nX_test.LotShape.replace(mapping,inplace=True)\nmapping={'Low':0,'HLS':1,'Bnk':2,'Lvl':3}\nX.LandContour.replace(mapping,inplace=True)\nX_test.LandContour.replace(mapping,inplace=True)\nX.drop('Utilities',axis=1,inplace=True)\nX_test.drop('Utilities',axis=1,inplace=True)\ndummies=pd.get_dummies(X.LotConfig,prefix='LotConfig')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.LotConfig,prefix='LotConfig')\nX_test=pd.concat([X_test,dummies],axis=1)\nX.loc[:,'LandSlope']=le.fit_transform(X.LandSlope.values)\nX_test.loc[:,'LandSlope']=le.transform(X_test.LandSlope.values)\ndummies=pd.get_dummies(X.Neighborhood,prefix='Neigh')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Neighborhood,prefix='Neigh')\nX_test=pd.concat([X_test,dummies],axis=1)","3ba63c9a":"dummies=pd.get_dummies(X.Condition1,prefix='Cond1')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Condition1,prefix='Cond1')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.Condition2,prefix='Cond2')\nX=pd.concat([X,dummies],axis=1)\nX['Cond2_RRNe']=0\ndummies=pd.get_dummies(X_test.Condition2,prefix='Cond2')\nX_test=pd.concat([X_test,dummies],axis=1)\nX_test['Cond2_RRAe']=0\nX_test['Cond2_RRAn']=0\nX_test['Cond2_RRNn']=0\nX_test['Cond2_RRNe']=0\nconditions=X.Condition1.unique()\nfor cond in conditions:\n    X['Cond_'+cond]=((X['Cond1_'+cond]+X['Cond2_'+cond])>0)*1\n    X_test['Cond_'+cond]=((X_test['Cond1_'+cond]+X_test['Cond2_'+cond])>0)*1\n    X.drop(['Cond1_'+cond,'Cond2_'+cond],axis=1,inplace=True)\n    X_test.drop(['Cond1_'+cond,'Cond2_'+cond],axis=1,inplace=True)","b6da074a":"dummies=pd.get_dummies(X.BldgType,prefix='BldgType')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.BldgType,prefix='BldgType')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.HouseStyle,prefix='HouseStyle')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.HouseStyle,prefix='HouseStyle')\ndummies['HouseStyle_2.5Fin']=0\ndummies.sort_index(axis=1,inplace=True)\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.RoofStyle,prefix='RoofStyle')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.RoofStyle,prefix='RoofStyle')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.RoofMatl,prefix='RoofMatl')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.RoofMatl,prefix='RoofMatl')\ndummies['RoofMatl_Roll']=0\ndummies['RoofMatl_Membran']=0\ndummies['RoofMatl_Metal']=0\ndummies.sort_index(axis=1,inplace=True)\nX_test=pd.concat([X_test,dummies],axis=1)","349e821c":"X.Exterior1st.unique()","81e0aa7e":"X_test.Exterior1st.unique()","829fdf29":"X.Exterior2nd.unique()","9ec0c04c":"X_test.Exterior2nd.unique()","db53708b":"mapping={ 'Wd Shng':'WdShing','Brk Cmn':'BrkComm','CmentBd':'CemntBd' }\nX.Exterior2nd.replace(mapping,inplace=True)\nX_test.Exterior2nd.replace(mapping,inplace=True)\na=X.Exterior1st.value_counts()\nb=X.Exterior2nd.value_counts()\nc=pd.concat([a,b],axis=1,sort=True)\nc.plot.bar(stacked=True)","0ff0f554":"dummies=pd.get_dummies(X.Exterior1st,prefix='Ext1')\ndummies['Ext1_Other']=0\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Exterior1st,prefix='Ext1')\ndummies['Ext1_ImStucc']=0\ndummies['Ext1_Stone']=0\ndummies['Ext1_Other']=0\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.Exterior2nd,prefix='Ext2')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Exterior2nd,prefix='Ext2')\ndummies['Ext2_Other']=0\nX_test=pd.concat([X_test,dummies],axis=1)\nexteriors=X.Exterior2nd.unique()\nfor ext in exteriors:\n    X['Ext_'+ext]=((X['Ext1_'+ext]+X['Ext2_'+ext])>0)*1\n    X_test['Ext_'+ext]=((X_test['Ext1_'+ext]+X_test['Ext2_'+ext])>0)*1\n    X.drop(['Ext1_'+ext,'Ext2_'+ext],axis=1,inplace=True)\n    X_test.drop(['Ext1_'+ext,'Ext2_'+ext],axis=1,inplace=True)","a52c2465":"dummies=pd.get_dummies(X.MasVnrType,prefix='MVT')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.MasVnrType,prefix='MVT')\nX_test=pd.concat([X_test,dummies],axis=1)\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0 }\nX.ExterQual.replace(mapping,inplace=True)\nX_test.ExterQual.replace(mapping,inplace=True)\nX.ExterCond.replace(mapping,inplace=True)\nX_test.ExterCond.replace(mapping,inplace=True)\ndummies=pd.get_dummies(X.Foundation,prefix='Foundation')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Foundation,prefix='Foundation')\nX_test=pd.concat([X_test,dummies],axis=1)\nX['NoBsmt']=(X.BsmtQual=='NoBsmt')*1\nX_test['NoBsmt']=(X_test.BsmtQual=='NoBsmt')*1\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0,'NoBsmt':-1 }\nX.BsmtQual.replace(mapping,inplace=True)\nX_test.BsmtQual.replace(mapping,inplace=True)\nX.BsmtCond.replace(mapping,inplace=True)\nX_test.BsmtCond.replace(mapping,inplace=True)\nmapping={ 'Gd':4,'Av':3,'Mn':2,'No':1,'NoBsmt':0 }\nX.BsmtExposure.replace(mapping,inplace=True)\nX_test.BsmtExposure.replace(mapping,inplace=True)","16b5e5b7":"X['BsmtFinSF']=X.BsmtFinSF1+X.BsmtFinSF2\nX_test['BsmtFinSF']=X_test.BsmtFinSF1+X_test.BsmtFinSF2","fbf66de4":"mapping={'GLQ':6,'ALQ':5,'BLQ':4,'Rec':3,'LwQ':2,'Unf':1,'NoBsmt':0}\nX.BsmtFinType1.replace(mapping,inplace=True)\nX_test.BsmtFinType1.replace(mapping,inplace=True)\nX.BsmtFinType2.replace(mapping,inplace=True)\nX_test.BsmtFinType2.replace(mapping,inplace=True)\ndummies=pd.get_dummies(X.Heating,prefix='Heating')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Heating,prefix='Heating')\ndummies['Heating_OthW']=0\ndummies['Heating_Floor']=0\ndummies.sort_index(axis=1,inplace=True)\nX_test=pd.concat([X_test,dummies],axis=1)\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0 }\nX.HeatingQC.replace(mapping,inplace=True)\nX_test.HeatingQC.replace(mapping,inplace=True)\nX.loc[:,'CentralAir']=le.fit_transform(X.CentralAir.values)\nX_test.loc[:,'CentralAir']=le.transform(X_test.CentralAir.values)\ndummies=pd.get_dummies(X.Electrical,prefix='Electrical')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.Electrical,prefix='Electrical')\ndummies['Electrical_Mix']=0\ndummies.sort_index(axis=1,inplace=True)\nX_test=pd.concat([X_test,dummies],axis=1)","b63a63a4":"X['TotalSF']=X['TotalBsmtSF']+X['1stFlrSF']+X['2ndFlrSF']\nX_test['TotalSF']=X_test['TotalBsmtSF']+X_test['1stFlrSF']+X_test['2ndFlrSF']","15a94bbb":"mapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0 }\nX.KitchenQual.replace(mapping,inplace=True)\nX_test.KitchenQual.replace(mapping,inplace=True)\nmapping= {'Maj1':2,'Maj2':1,'Min1':5,'Min2':4,'Mod':3,'Sev':0,'Typ':6}\nX.Functional.replace(mapping,inplace=True)\nX_test.Functional.replace(mapping,inplace=True)\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0,'NoFire':-1 }\nX.FireplaceQu.replace(mapping,inplace=True)\nX_test.FireplaceQu.replace(mapping,inplace=True)\nX['NoGarage']=(X.GarageType=='NoGarage')*1\nX_test['NoGarage']=(X_test.GarageType=='NoGarage')*1\ndummies=pd.get_dummies(X.GarageType,prefix='GarageType')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.GarageType,prefix='GarageType')\nX_test=pd.concat([X_test,dummies],axis=1)\nmapping={'Fin':3,'RFn':2,'Unf':1,'NoGarage':0}\nX.GarageFinish.replace(mapping,inplace=True)\nX_test.GarageFinish.replace(mapping,inplace=True)\nmapping={ 'Ex':4,'Gd':3,'TA':2,'Fa':1,'Po':0,'NoGarage':-1 }\nX.GarageQual.replace(mapping,inplace=True)\nX_test.GarageQual.replace(mapping,inplace=True)\nX.GarageCond.replace(mapping,inplace=True)\nX_test.GarageCond.replace(mapping,inplace=True)\nX.loc[:,'PavedDrive']=le.fit_transform(X.PavedDrive.values)\nX_test.loc[:,'PavedDrive']=le.transform(X_test.PavedDrive.values)\nmapping={'Ex':3,'Gd':2,'Fa':1,'NoPool':0}\nX.PoolQC.replace(mapping,inplace=True)\nX_test.PoolQC.replace(mapping,inplace=True)\ndummies=pd.get_dummies(X.MiscFeature,prefix='Misc')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.MiscFeature,prefix='Misc')\ndummies['Misc_TenC']=0\nX_test=pd.concat([X_test,dummies],axis=1)\nmapping={'GdPrv':4,'MnPrv':3,'GdWo':2,'MnWw':1,'NoFence':0}\nX.Fence.replace(mapping,inplace=True)\nX_test.Fence.replace(mapping,inplace=True)\nmapping={1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\nX.MoSold.replace(mapping,inplace=True)\nX_test.MoSold.replace(mapping,inplace=True)\ndummies=pd.get_dummies(X.MoSold,prefix='MoSold')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.MoSold,prefix='MoSold')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.YrSold,prefix='YrSold')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.YrSold,prefix='YrSold')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.SaleType,prefix='SaleType')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.SaleType,prefix='SaleType')\nX_test=pd.concat([X_test,dummies],axis=1)\ndummies=pd.get_dummies(X.SaleCondition,prefix='SaleCondition')\nX=pd.concat([X,dummies],axis=1)\ndummies=pd.get_dummies(X_test.SaleCondition,prefix='SaleCondition')\nX_test=pd.concat([X_test,dummies],axis=1)\nX.head()","de75c6cc":"X_test.head()","8c933587":"column_drop=['Id','MSZoning','LotConfig','Condition1','Condition2','HouseStyle','RoofStyle','Exterior1st','Exterior2nd','MasVnrType','Foundation','Electrical','GarageType','MiscFeature','YrSold','SaleType','SaleCondition','GarageYrBlt','Neighborhood','BldgType','RoofMatl','Heating','MoSold']\nX.drop(column_drop,axis=1,inplace=True)\nX_test.drop(column_drop,axis=1,inplace=True)\nY=X.SalePrice\nX.drop('SalePrice',axis=1,inplace=True)","aa6ea81b":"skew(Y)","59a1b556":"Y=np.log1p(Y)\nskew(Y)","9848d92d":"lst=list(range(56))\nto_extend=[153,165]\nlst.extend(to_extend)\nskew_features=X.iloc[:,lst].apply(lambda x:skew(x)).sort_values(ascending=False)\nskew_features_test=X_test.iloc[:,lst].apply(lambda x:skew(x)).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skew_features})\nskewness_test = pd.DataFrame({'Skew' :skew_features_test})\nskewness.head()","5625e954":"skewness = skewness[abs(skewness) > 0.5].dropna()\nfeats=skewness.index.values.tolist()\nlam=0.1\nfor feat in feats:\n    X[feat]=boxcox1p(X[feat], lam)\n    X_test[feat]=boxcox1p(X_test[feat], lam)\nX.shape,X_test.shape","9784d386":"X.head()","a9427be7":"X_test.head()","1e1b4d1d":"#parameters = {'max_depth':[2,3,4],'n_estimators':[2800,3000,3200],'max_features':['sqrt'],'loss':['huber'],'min_samples_leaf':[14,15,16],'min_samples_split':[9,10,11],'random_state':[0]}\nparameters = {'max_depth':[3],'n_estimators':[3000],'max_features':['sqrt'],'loss':['huber'],'min_samples_leaf':[15],'min_samples_split':[10],'random_state':[0]}\nmodel=GridSearchCV(GradientBoostingRegressor(),parameters,scoring='neg_mean_squared_error',cv=KFold(n_splits=7))\nmodel.fit(X,Y)\nY_test1=model.predict(X_test)\nY_test1=np.exp(Y_test1)-1\n((model.best_score_)*(-1))**0.5","1720207e":"model=make_pipeline(RobustScaler(),Lasso(0.0004,random_state=0))\nrmslerror=(-cross_val_score(model,X,Y,scoring='neg_mean_squared_error',cv=KFold(n_splits=7)))**0.5\nprint(rmslerror.mean())\nmodel.fit(X,Y)\nY_test2=np.expm1(model.predict(X_test))","7be4e931":"Y_test=(Y_test1+Y_test2)\/2\nsubmission=pd.DataFrame({'Id':range(1461,2920),'SalePrice':Y_test})\nsubmission.to_csv('submit.csv',index=False)","196dd34a":"We can see above that skewness of Y is reduced after applying log transformation.","9a432753":"As we can see our target variable Y is highly skewed, so we will apply log transformation on Y.\n\nThis is how log transformation of some variable x is done :-\n\n**x' = log(1+x)**","1b4899f6":" **House Prices Prediction Simple Model**","9ff1563e":"**Labeling, creating dummies and feature engineering**","2984b9c5":"Now filling missing missing values in LotFontage by linear regression between square root of LotArea and LotFrontage by using the logic that area is proportinal to square of length.","09d11ff2":"This kernel is a basic approach to prediction of House Prices for the given dataset.\n\nImporting the necessary packages.","2a18d299":"**Filling missing values**","7a6cf9c6":"Creating a new feature 'TotalSF' equal to sum of area of all floors including basement.","2edc170c":"Columns with missing values","585a3cb4":"*  **Lasso Regression :-**","51eced72":"Total finished area of the basement will be equal to the finished area of basement type 1 & 2. So creating a new feature 'BsmtFinSF' equal to the sum of 'BsmtFinSF1' & 'BsmtFinSF2'.","853583e3":"In next step we will take mean of the above models, advantage of taking mean is that error in one model is compensated by other model.","c1863fc6":"Correlation matrix of features highly correlated with SalePrice feature.","1fa5560c":"**Steps to create the model :-**\n* Filling missing values\n* Labeling, creating dummies and feature engineering\n* Modelling","a28d33f7":"As we can see in Exterior2nd feature 'WdShing' is misspelled as 'Wd Shng', 'BrkComm' is misspelled as 'Brk Cmn' & 'CemntBd' is misspelled as 'CmentBd', so we need to correct these in the dataset.","4a74d1fb":"In this part we will go through non numeric columns and labelling them in order of importance in case of cardinal featues, creating dummies in case of nominal featues. We will make new features and transforming wherever required.","d0823809":"We will now delete the columns which are not required now.","e292320c":"**Modelling**\n\n*  **Gradient Boosting Regression :-**","b2f7fa34":"No need to fill GarageYrBlt column as it is similar to YearBuilt column except for the houses having no Garage, so we will drop this column in the end.","18f24906":"**Reading the dataset**","db4d1fb5":"Any suggestions are welcome.\n\n***Thank You!***","06212082":"**Box-Cox Transformation :-**\n\nWe will now apply box cox transformation on features except for the dummy ones. Purpose of the transformation is to reduce skewness of features for modelling. These features have index 0 to 55,153 &165.","47464894":"Max value of Garbage Year Built is 2207 in test set which is not possible so correcting these values.","03686925":"Dropping data points with above grouund living area greater than 4000 square feet."}}