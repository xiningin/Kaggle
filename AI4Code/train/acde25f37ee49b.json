{"cell_type":{"8357e60d":"code","ef376db5":"code","95795100":"code","a4d6df3c":"markdown","565da2c9":"markdown"},"source":{"8357e60d":"import numpy as np\nimport matplotlib.pyplot as plt","ef376db5":"def half_range_mode(x, beta=0.5):\n    v = np.sort( x )\n    N = len( x )\n    \n    if N <= 2:\n        return np.mean( v )\n    \n    w = beta * (v[-1] - v[0])\n    if w == 0:\n        return v[0]\n    \n    intervals = []\n    for j in range(N - 1):\n        start, end = v[j], v[j] + w\n        intervals.append( v[(v >= start) & (v <= end)] )\n    intervals = np.asarray( intervals )\n    interval_lengths = [len(inv) for inv in intervals]\n    N_ = np.max( interval_lengths )\n    J = np.argwhere(np.asarray(interval_lengths) == N_).flatten()\n\n    if len(J) == 1:\n        v = intervals[J[0]]\n        return half_range_mode(v, beta)\n    \n    w_range = [intervals[j][-1] - intervals[j][0] for j in J]\n    w_ = np.min( w_range )\n\n    i = np.argwhere( np.asarray(w_range) == w_ ).flatten()\n    min_max = np.asarray( [[intervals[J][i_][0], intervals[J][i_][-1]] for i_ in i] )\n    V_min, V_max = min_max[:,0].min(), min_max[:,1].max()\n    v = v[(v >= V_min) & (v <= V_max)]\n\n    N__ = len(v)\n    if N__ == N and len(v) > 2:\n        if v[1] - v[0] < v[-1] - v[-2]:\n            v = v[:-1]\n            N__ -= 1\n        elif v[1] - v[0] > v[-1] - v[-2]:\n            v = v[1:]\n            N__ -= 1\n        else:\n            v = v[1:-1]\n            N__ -= 2\n    return half_range_mode(v, beta)\n\ndef half_range_mode_bootstrap(x, beta=0.5, size=None, b=10):\n    if size is None:\n        size = len(x)\n\n    modes = []\n    for i in range(b):\n        x_select = np.random.choice(x, size, replace=True)\n        mode = half_range_mode(x_select, beta=beta)\n        modes.append( mode )\n    return np.mean( modes )","95795100":"N = 1000\nx = np.random.normal(5, 1, N) + np.random.exponential(8, N)\nplt.hist(x, bins=100)\n\n# Calculate statistical quantities\n# mode = half_range_mode(x, beta=0.5)\nmode = half_range_mode_bootstrap(x, b=10)\nmedian = np.median( x )\nmean = np.mean( x )\nprint( (mode, median, mean) )\n\nplt.axvline(x=mode, ls='--', color='k')\nplt.axvline(x=median, ls='-.', color='k')\nplt.axvline(x=mean, ls=':', color='k')","a4d6df3c":"## Example\nNormal + exponential distriubtion","565da2c9":"## Bickel's half range mode (HRM)\naccording to: https:\/\/www.sciencedirect.com\/science\/article\/pii\/S0167947301000573"}}