{"cell_type":{"95ea499a":"code","36b0adb5":"code","b61747c8":"code","8a5a4d07":"code","bee8d60f":"code","9b9abc49":"code","dce95cf1":"code","948e6535":"code","79d9f522":"code","6efdc9db":"code","fb868e3a":"code","4dff39a9":"code","79e01ec6":"code","78643db2":"code","9810d170":"code","b9ea71af":"code","8a310c54":"code","1986ded4":"code","025abd72":"code","21350fae":"code","fdd8a6cb":"code","906ce3f5":"code","b0071044":"code","f0494151":"code","4f9d1a48":"code","e67f7823":"code","3c2f8411":"code","58850619":"code","5eea4b73":"code","0cd1e5dd":"code","7e92ef33":"markdown","037a9971":"markdown","540066c5":"markdown","a0384f50":"markdown","c7b1ef5c":"markdown","5f982090":"markdown","d9c607b8":"markdown","6d066aa0":"markdown","5ac2f241":"markdown","488198cc":"markdown","17f9a17f":"markdown","dcae8945":"markdown","015e53c2":"markdown","34e00b0c":"markdown","6a189402":"markdown","06131720":"markdown","71e383ee":"markdown","fc20e0b1":"markdown","befd61b7":"markdown","97ddda1f":"markdown","aa971a2c":"markdown","94a7d947":"markdown","bacec016":"markdown","298790ae":"markdown","52696be3":"markdown","cc330823":"markdown","bdf69d65":"markdown"},"source":{"95ea499a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport os\nprint(os.listdir(\"..\/input\"))","36b0adb5":"train_file_path = '..\/input\/google-landmarks-dataset-v2\/train.csv'\nindex_file_path = '..\/input\/google-landmarks-dataset-v2\/index.csv'\ntest_file_path = '..\/input\/google-landmarks-dataset-v2\/test.csv'","b61747c8":"df_train = pd.read_csv(train_file_path)\ndf_index = pd.read_csv(index_file_path)\ndf_test = pd.read_csv(test_file_path)","8a5a4d07":"print(\"Training data size:\", df_train.shape)\nprint(\"Training data columns:\",df_train.columns)\nprint(df_train.info())","bee8d60f":"df_train.head(3)","9b9abc49":"df_train.sample(3).sort_index()","dce95cf1":"df_train.tail(3)","948e6535":"select = [4444, 10000, 14005]\ndf_train.iloc[select,:]","79d9f522":"print(\"Index data size\", df_index.shape)\nprint(df_index.columns)\nprint(df_index.info())\ndf_index.head(3)","6efdc9db":"print(\"Test data size\", df_test.shape)\nprint(df_test.columns)\nprint(df_test.info())\ndf_test.head(3)","fb868e3a":"print('data is None:')\nmissing = df_train.isnull().sum()\npercent = missing\/df_train.count()\nmissing_train_data = pd.concat([missing, percent], axis=1, keys=['Missing', 'Percent'])\nmissing_train_data.head()","4dff39a9":"print('data is None:')\nmissing = df_index.isnull().sum()\npercent = missing\/df_index.count()\nmissing_index_data = pd.concat([missing, percent], axis=1, keys=['Missing', 'Percent'])\nmissing_index_data.head()","79e01ec6":"print('data is None:')\nmissing = df_test.isnull().sum()\npercent = missing\/df_test.count()\nmissing_test_data = pd.concat([missing, percent], axis=1, keys=['Missing', 'Percent'])\nmissing_test_data.head()","78643db2":"print('data is \\'None\\':')\nmissing = (df_train == 'None').sum()\npercent = missing\/df_train.count()\nmissing_train_data = pd.concat([missing, percent], axis=1, keys=['Missing', 'Percent'])\nmissing_train_data.head()","9810d170":"print('data is \\'None\\':')\nmissing = (df_index == 'None').sum()\npercent = missing\/df_index.count()\nmissing_index_data = pd.concat([missing, percent], axis=1, keys=['Missing', 'Percent'])\nmissing_index_data.head()","b9ea71af":"print('data is \\'None\\':')\nmissing = (df_test == 'None').sum()\npercent = missing\/df_test.count()\nmissing_test_data = pd.concat([missing, percent], axis=1, keys=['Missing', 'Percent'])\nmissing_test_data.head()","8a310c54":"df_train['landmark_id'].describe()","1986ded4":"sns.set()\nprint(df_train.nunique())\ndf_train['landmark_id'].value_counts().hist()","025abd72":"sns.set()\n# plt.figure(figsize = (8, 5))\nplt.title('Landmark_id Distribuition')\nsns.distplot(df_train['landmark_id'])","21350fae":"sns.set()\nplt.title('Training set: number of images per class(line plot)')\nsns.set_color_codes(\"pastel\")\nlandmarks_fold = pd.DataFrame(df_train['landmark_id'].value_counts())\nlandmarks_fold.reset_index(inplace=True)\nlandmarks_fold.columns = ['landmark_id','count']\nax = landmarks_fold['count'].plot(logy=True, grid=True)\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=30)\nax.set(xlabel=\"Landmarks\", ylabel=\"Number of images\")","fdd8a6cb":"sns.set()\n# plt.title('Training set: number of images per class')\nlandmarks_fold_sorted = pd.DataFrame(df_train['landmark_id'].value_counts())\nlandmarks_fold_sorted.reset_index(inplace=True)\nlandmarks_fold_sorted.columns = ['landmark_id','count']\nlandmarks_fold_sorted = landmarks_fold_sorted.sort_values('landmark_id')\nax = landmarks_fold_sorted.plot.scatter(\\\n     x='landmark_id',y='count',\n     title='Training set: number of images per class(statter plot)')\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=30)\nax.set(xlabel=\"Landmarks\", ylabel=\"Number of images\")","906ce3f5":"sns.set()\nax = landmarks_fold_sorted.boxplot(column='count')\nax.set_yscale('log')","b0071044":"sns.set()\nres = stats.probplot(df_train['landmark_id'], plot=plt)","f0494151":"threshold = [2, 3, 5, 10, 20, 50, 100]\nfor num in threshold:    \n    print(\"Number of classes under {}: {}\/{} \"\n          .format(num, (df_train['landmark_id'].value_counts() < num).sum(), \n                  len(df_train['landmark_id'].unique()))\n          )","4f9d1a48":"temp = pd.DataFrame(df_train.landmark_id.value_counts().head(10))\ntemp.reset_index(inplace=True)\ntemp.columns = ['landmark_id', 'count']\ntemp","e67f7823":"sns.set()\n# plt.figure(figsize=(9, 8))\nplt.title('Most frequent landmarks')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"landmark_id\", y=\"count\", data=temp,\n            label=\"Count\")\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=45)\nplt.show()","3c2f8411":"temp = pd.DataFrame(df_train.landmark_id.value_counts().tail(10))\ntemp.reset_index(inplace=True)\ntemp.columns = ['landmark_id', 'count']\ntemp","58850619":"sns.set()\n# plt.figure(figsize=(9, 8))\nplt.title('Least frequent landmarks')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"landmark_id\", y=\"count\", data=temp,\n            label=\"Count\")\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=45)\nplt.show()","5eea4b73":"# Extract site_names for train data\ntemp_list = list()\nfor path in df_train['url']:\n    temp_list.append((path.split('\/\/', 1)[1]).split('\/', 1)[0])\ndf_train['site_name'] = temp_list\ndata_sources = pd.DataFrame(df_train['site_name'].value_counts())\ndata_sources.reset_index(inplace=True)\ndata_sources.columns = ['site_name', 'count']\ndata_sources.head()","0cd1e5dd":"# Plot the Sites with their count\nsns.set()\ndata_sources.plot.bar(x=\"site_name\", y=\"count\", rot=0,\n                      title='Sites with their count')","7e92ef33":"Data head","037a9971":"Most frequent landmark_ids","540066c5":"Explore the specific element","a0384f50":"Basic description of landmark_id","c7b1ef5c":"Data tail","5f982090":"### 1.3 Test data","d9c607b8":"Add file your path.","6d066aa0":"We use two ways to detect. \n### 2.1 Check if the data is None","5ac2f241":"Data sample","488198cc":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/11838\/logos\/header.png?t=2019-03-29-00-01-45)\n# Google Landmarks Dataset v2 Exploratory Data Analysis(EDA)","17f9a17f":"Training set: number of images per class(line plot)","dcae8945":"## Reference\n* https:\/\/www.kaggle.com\/codename007\/a-very-extensive-landmark-exploratory-analysis\n* https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n* https:\/\/www.kaggle.com\/paulorzp\/train-set-landmark-exploratory-analysis\n* https:\/\/www.kaggle.com\/kanncaa1\/data-sciencetutorial-for-beginners\n* https:\/\/www.kaggle.com\/c\/landmark-retrieval-2019","015e53c2":"Visualize outliers, min\/max or quantiles of the landmarks count","34e00b0c":"### 2.2 Check if the data is 'None'","6a189402":"Object containing counts of unique values","06131720":"## 4 Specific Basic Information","71e383ee":"Landmark_id distribuition","fc20e0b1":"## 3 Overall Basic Information","befd61b7":"## Outline\n1. [Quickly View Information](#1)\n    1. [Training data](#2)\n    1. [Test data](#3)\n    1. [Index data](#4)\n1. [Detect Missing Information](#5)\n    1. [Check if the data is None](#6)\n    1. [Check if the data is 'None'](#7)\n1. [Overall Basic Information](#8)\n1. [Specific Basic Information](#9)\n1. [Data Sources](#10)\n1. [Reference](#11)","97ddda1f":"## 1 Quickly View Information","aa971a2c":"## 2 Detect Missing Information","94a7d947":"### 1.2 Index data","bacec016":"General information","298790ae":"### 1.1 Training data","52696be3":"## 5 Data Sources","cc330823":"Training set: number of images per class(scatter plot)","bdf69d65":"Least frequent landmark_ids"}}