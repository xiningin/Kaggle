{"cell_type":{"8d70c04d":"code","b1a4ae22":"code","24e9d41e":"code","d686fde3":"code","df91feed":"code","a9fe25c8":"code","42ed8cd1":"code","18ebed19":"code","fc05dbfb":"code","c4647a9a":"code","71586f5d":"code","3384d3bd":"code","031b1d6b":"markdown","8a07a6ec":"markdown","d85b9b39":"markdown"},"source":{"8d70c04d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b1a4ae22":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set()","24e9d41e":"data = {'Size':[6,8,12,14,18],'Price':[350,775,1150,1395,1675]}\ndf = pd.DataFrame(data)","d686fde3":"df","df91feed":"sns.lmplot(data=df, x='Size',y='Price')","a9fe25c8":"df['Size_Price'] = df.Size*df.Price\ndf['Size_Squared'] = df.Size ** 2","42ed8cd1":"Size_bar = np.sum(df.Size) \/ len(df.Size)\nPrice_bar = np.sum(df.Price) \/ len(df.Price)\nSize_Price_bar = np.sum(df.Size_Price) \/ len(df.Size_Price)\nSize_Squared_bar = np.sum(df.Size_Squared) \/ len(df.Size_Squared)\nprint(Size_bar, Price_bar,Size_Price_bar, Size_Squared_bar)","18ebed19":"m = ((Size_bar * Price_bar) - (Size_Price_bar)) \/ ((Size_bar ** 2 ) - (Size_Squared_bar))\nm","fc05dbfb":"c = Price_bar - m * Size_bar\nc","c4647a9a":"def y(m,x,c):\n    return m * x + c\nprint(y(m, 17, c))\nprint(y(m,16,c))","71586f5d":"R_value = []\nfor i in range(df.shape[0]):\n    R_value.append(y(m,df.Size[i], c))\nprint(R_value)\ndf['R_value'] = R_value","3384d3bd":"def R_Squared_Value(y, y_bar, y_cap):\n    upper = []\n    lower = []\n    for i in range(y_cap.shape[0]):\n        upper.append((y_cap[i] - y_bar) ** 2)\n        lower.append((y[i] - y_bar) ** 2)\n    return np.sum(upper) \/ np.sum(lower), upper, lower\nR_square = R_Squared_Value(df.Price, Price_bar, df.R_value)\nprint(r\"R^2 Value is {0:.2f}% and the Upper value is {1} and Lower Value is {2}\".format(R_square[0], R_square[1],R_square[2]))\n#print(R_Squared_Value(df.Price, Price_bar, df.R_value)[0])","031b1d6b":"* Equation for Finding Slope Below:\n$$\\Large{m = \\frac{\\bar{x}.\\bar{y} - \\overline{x.y}} {{\\bar{x}^2}-{\\overline{x^2}}}} $$\n* Equation for Finding Intercept by Y-Axis:\n$$\\Large{ c = \\bar{y} - m.\\bar{x}} $$","8a07a6ec":"### Find  R-Squared Value ($R^2$) \n* The Equation of the $R^2$ Value is:","d85b9b39":"### Practice \nGPA(x) = [3.26,2.60,3.35,2.86,3.82,2.21,3.47,3.28,2.54,3.25] <br>\nObserverd Salary(y) = [33.8,29.8,33.5,30.4,36.4,27.6,35.3,35.0,26.5,33.8]<br>\nEstimated Salary($\\hat{y}$) = [33.5, 29.2, 34.1,30.9,37.2,26.6,34.9,33.6,28.8,33.4]\n        \n1. Make a Dataframe by using above data and add a row at the bottom of the dataframe which contain Mean of each column.\n2. Estimate the least squares prediction equation of y on x.\n3. Find the point prediction of starting salary corresponding to each of the GPAs 2.75  and 3.75.\n4. Compare the observed and estimated salary graphiccally.\n5. Find $R^2$ Value and Write it by using latex\/markdown.\n"}}