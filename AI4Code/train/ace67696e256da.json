{"cell_type":{"ba0e2fb5":"code","7f39549f":"code","a016f9eb":"code","c1759c99":"code","bd2a0ad5":"code","5c540af3":"code","baa9b2a6":"code","8a9d0a00":"code","d85fb929":"code","3cf0f2cc":"code","74184db5":"code","4a901198":"code","37e7dc77":"code","6dd2def0":"code","fbd626cd":"code","0af523ac":"code","4f1a2182":"code","68fb4606":"code","79602e18":"code","f66a1908":"code","17929680":"code","df257ce3":"code","68ffa34e":"code","7ba2fb8f":"code","10d8ce66":"code","264a6d61":"code","e3f09e87":"code","85ccc031":"code","25704e03":"code","188623b0":"code","8d690672":"code","9a1cc609":"code","d7c7a03d":"code","f1b044e7":"code","8ee9d85c":"code","c2339117":"code","a559d7b8":"code","2d6d555f":"code","608ca9fd":"code","f5ecbd2c":"code","12c94f69":"code","fca58953":"code","cb85b9f0":"code","712a4081":"code","e71fcf2e":"code","b9f11a5a":"code","6827aa7e":"code","9bbd3246":"markdown","895bef83":"markdown","87b61d80":"markdown","3c970aae":"markdown","20bc413d":"markdown","d29db59f":"markdown","b6f1cd52":"markdown","ca363127":"markdown","a665a309":"markdown"},"source":{"ba0e2fb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f39549f":"!pip install graphviz;\n#!pip uninstall dtreeviz","a016f9eb":"## look into the dater\n#from fastbook import *\n#from kaggle import api\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype, is_categorical_dtype\nfrom fastai.tabular.all import *\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeRegressor\n#!pip install dtreeviz\n#from dtreeviz.trees import *\nfrom IPython.display import Image, display_svg, SVG","c1759c99":"from sklearn.metrics import confusion_matrix, roc_curve, auc\nfrom sklearn.model_selection import train_test_split","bd2a0ad5":"## pandas\npd.options.display.max_rows = 20\npd.options.display.max_columns = 12","5c540af3":"main_path = \"..\/input\/ieee-fraud-detection-joined-tables\/\"","baa9b2a6":"df = pd.read_csv(main_path+\"tr_sample-100k.csv\")\ndf_te= pd.read_csv(main_path + \"te_tran_iden.csv\")","8a9d0a00":"## ratio of true and false\ndf.isFraud.value_counts()[1]\/df.isFraud.value_counts()[0] *100","d85fb929":"df = df.sample(50000, random_state=42)\n#df_te = df_te.sample(50000, random_state=42)\ndf.isFraud.value_counts()[1]\/df.isFraud.value_counts()[0] *100","3cf0f2cc":"## check tables for missing values in join column\ncol = \"shape\", \"columns with nans \", \"nans in TransactioniD\"\nind = \"train\",\"test\"\nlst1 = [df.shape, sum(df.isna().sum()>0), df.TransactionID.isna().sum()]\nlst2 = [df_te.shape, sum(df_te.isna().sum()>0), df_te.TransactionID.isna().sum()]\npd.DataFrame([lst1,lst2], columns=col,index=ind)","74184db5":"## All colaths from test in train\nset(df_te.columns).issubset(set(df.columns))","4a901198":"## Class imbalance? Might need to upsample or downsample???? Isn't usage of false positves and true positives overcoming imbalance?\nsum(df[\"isFraud\"]==True)\/len(df)","37e7dc77":"## remove columns with nans>300k\n##[((df.isna().sum()>n\/2*1e5).sum(),n\/2) for n in range(1,13)]\n#to_drop = df.columns[df.isna().sum()>300000].to_list()\nto_drop=[] # forcing to use all variables\ndf.drop(to_drop,1, inplace=True)\ndf.shape","6dd2def0":"## sort by time\ndf.sort_values(\"TransactionDT\", inplace=True)\ndf.reset_index(drop=True, inplace=True)\ndf","fbd626cd":"## split to train and valid ind linearly\nmsk = np.arange(len(df))<0.8*len(df)\nsplits = (list(np.where(msk)[0]),list(np.where(~msk)[0]))\nlen(splits[0])+len(splits[1]), len(df), len(splits[0])","0af523ac":"## variables for TP\ndep_var = \"isFraud\"\nprocs = [Categorify,FillMissing]\n## Cont and Cat variables\ncont,cat = cont_cat_split(df, 1, dep_var=dep_var)","4f1a2182":"## check if cont variables in test have nans where train doesn't\n#def na_check(col): return df.loc[:,col].isna().sum()>0,df_te.loc[:,col].isna().sum()>0\n#na_col = {col: na_check(col) for col in cont}\nna_col_te = [col for col in cont if df.loc[:,col].isna().sum()==0 and df_te.loc[:,col].isna().sum()>0]\nna_col_te\n","68fb4606":"## Add a last row with nans for col:na_col_te\n#df.insert(0,df.columns,df.median())\n\ndf = pd.concat([df.median().to_frame().T, df], ignore_index=True)\n\ndf.loc[df.index[0],na_col_te] = np.nan\ndf.loc[df.index[0],na_col_te]\n#df.median()\n#df","79602e18":"to = TabularPandas(df, procs, cat, cont, y_names=dep_var, splits=splits)\nlen(to.train)+len(to.valid)","f66a1908":"to.items.columns","17929680":"to.valid.show(3)","df257ce3":"to.items.head()","68ffa34e":"##vocab\nto.classes[\"ProductCD\"]","7ba2fb8f":"save_pickle(\"to.pkl\",to)","10d8ce66":"load_pickle(\"to.pkl\")","264a6d61":"def rf(xs, y, n_estimators=40, max_samples=20_000,#200_000,\n       max_features=0.5, min_samples_leaf=5, **kwargs):\n    return RandomForestClassifier(n_jobs=-1, n_estimators=n_estimators,\n        max_samples=max_samples, max_features=max_features,\n        min_samples_leaf=min_samples_leaf, oob_score=True).fit(xs, y)","e3f09e87":"xs,y = to.train.xs,to.train.y\nvalid_xs,valid_y = to.valid.xs,to.valid.y\nxs.shape","85ccc031":"#m = DecisionTreeRegressor(max_leaf_nodes=4)\n#m.fit(xs, y);\nm = rf(xs,y)\n","25704e03":"## Metrics functions\ndef r_mse(pred,y): return round(math.sqrt(((pred-y)**2).mean()), 6)\ndef m_rmse(m, xs, y): return r_mse(m.predict(xs), y)\ndef m_rmse_p(m, xs, y): return r_mse(m.predict_proba(xs), y)\n#def m_accuracy(m,xs,y): return sum(m.predict(xs)==y)\/len(xs)\ndef m_accuracy2(m,xs,y): return m.score(xs,y)\ndef m_conf(m,xs,y): return confusion_matrix(y, m.predict(xs))","188623b0":"## See predicted column. Does it match expectations\npd.DataFrame(m.predict(xs)).describe()","8d690672":"## Accuracy\nm_accuracy2(m, xs, y), m_accuracy2(m, valid_xs, valid_y)","9a1cc609":"## Rmse (probably not useful)\nm_rmse(m, xs, y), m_rmse(m, valid_xs, valid_y)","d7c7a03d":"## Confusion Matrix\nm_conf(m,xs,y), m_conf(m,valid_xs,valid_y)","f1b044e7":"m.predict_proba(valid_xs)","8ee9d85c":"from sklearn.metrics import plot_roc_curve\nplot_roc_curve(m,valid_xs,valid_y)","c2339117":"plot_roc_curve(m,xs,y)","a559d7b8":"## check rows with nan values and compare with train dset","2d6d555f":"## drop from test dater\ndf_te.drop(to_drop,1, inplace=True)\ndf_te.shape","608ca9fd":"## make new Tabular Pandas for test dataset\nto_tst = to.new(df_te)\nto_tst.process()","f5ecbd2c":"## \"isFraud\" is a cont variable?\n# to_classes[\"isFraud\"]","12c94f69":"to.classes[\"ProductCD\"], to_tst.classes[\"ProductCD\"]","fca58953":"to.items.isFraud.astype(\"category\").describe()","cb85b9f0":"## make predictions \ntest_xs = to_tst.xs\npred = m.predict_proba(test_xs)\npred[:,1]#1 is the class we are interested in, i.e, 0,1...","712a4081":"pd.DataFrame(pred).describe()","e71fcf2e":"m.classes_[1]","b9f11a5a":"## Make into submission dataframe\nlst_pred = [df_te[\"TransactionID\"].to_list(),pred[:,1]]\nlen(lst_pred)\ndf_pred = pd.DataFrame({\"TransactionID\":lst_pred[0],\"isFraud\":lst_pred[1]})\ndf_pred","6827aa7e":"df_pred.to_csv(\"my_subs.csv\",index=False)","9bbd3246":"## Trimming col from the dater","895bef83":"Outputs that are interesting are model accuracy, maybe f1score?, model ROC,AOC?-","87b61d80":"## Resources\nMore info on the dater\n1. https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/101203 \n1. [Notebook on RF](https:\/\/www.kaggle.com\/raviolli77\/random-forest-in-python#Training-Algorithm)\n2. [searching hyperparameters](https:\/\/www.kaggle.com\/raviolli77\/random-forest-in-python#Creating-Training-and-Test-Sets)","3c970aae":"## Model","20bc413d":"## Tabular Pandas","d29db59f":"# ## predict on test dater","b6f1cd52":"## Check Dater ","ca363127":"## Output of Test dater","a665a309":"## Import "}}