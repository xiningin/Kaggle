{"cell_type":{"99df36e2":"code","3e341ad5":"code","db85ba79":"code","0d65645f":"code","042a6a6e":"code","96527cfc":"code","43066343":"code","d4b133b8":"code","5c6c1c88":"code","33c372ad":"code","f50771f7":"markdown","e85a6da1":"markdown","85d9c422":"markdown","4178090f":"markdown","2794d8b6":"markdown"},"source":{"99df36e2":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gs\nimport matplotlib.ticker as ticker\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n%matplotlib inline","3e341ad5":"ts_confirmed = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\nts_recovered = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\nts_deaths = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\n#open_line = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv')\n#covid_19 = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n#line_list = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv')","db85ba79":"cols_to_drop = ['Province\/State', 'Lat', 'Long']\ndeaths_country = ts_deaths.drop(cols_to_drop, axis=1).groupby(['Country\/Region']).sum()\nrecovered_country = ts_recovered.drop(cols_to_drop, axis=1).groupby(['Country\/Region']).sum()\nconfirmed_country = ts_confirmed.drop(cols_to_drop, axis=1).groupby(['Country\/Region']).sum()\nactive_country = confirmed_country - recovered_country - deaths_country","0d65645f":"# params for annotation\nbbox_params = dict(boxstyle='round, pad=0.7',fc=\"none\")\narrow_params = dict(arrowstyle='->')\n\n#current situation\nc = confirmed_country.iloc[:,-1].sum()\nd = deaths_country.iloc[:,-1].sum()\nr = recovered_country.iloc[:, -1].sum()\nactive_case = c - d - r\n\nfig, ax = plt.subplots()\nax.pie([d,r,active_case], labels= ['death', 'recovered', 'active case'], shadow=True, autopct='%.1f%%', explode=(0.2,0,0))\ntext = \"it equals {:,} people\".format(d)\nax.annotate(text, (1.2,0.2), (1.8,0.2), arrowprops=arrow_params, bbox=bbox_params)\nax.set_title(\"Total confirmed cases: {:,}\".format(c))\nplt.show()","042a6a6e":"# calculate number of active cases per country\nc_sum = confirmed_country.sum()\nd_sum = deaths_country.sum()\nr_sum = recovered_country.sum()\nactive_sum = c_sum - d_sum - r_sum\n\nfig, ax = plt.subplots(figsize=(12,6))\nr_sum.plot()\nd_sum.plot()\nactive_sum.plot()\nlegend = ['recovered', 'death', 'active case']\ntext = \"This seemed to be \\n an optimistic period\"\nannot_x = r_sum.index.get_loc('3\/8\/20')\nannot_y = r_sum.iloc[annot_x]\n# ax.annotate(text, xy=(annot_x, annot_y), xytext=(annot_x-15,annot_y*4), arrowprops=arrow_params, bbox=bbox_params)\nax.annotate('recovered', (r_sum.size-1,r_sum[-1]), (r_sum.size,r_sum[-1]))\nax.annotate('death', (d_sum.size-1, d_sum[-1]), (d_sum.size, d_sum[-1]))\nax.annotate('active case', (active_sum.size-1, active_sum[-1]), (active_sum.size, active_sum[-1]))\nax.set_title('Cases in Progress')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.show()","96527cfc":"fig = plt.figure(figsize=(15,6))\nspecs = gs.GridSpec(ncols=8, nrows=1, figure=fig)\nfig_ax0 = fig.add_subplot(specs[:,0:5])\nfig_ax1 = fig.add_subplot(specs[:,6:])\n\n# matching bar's color to line plot\nplt0 = confirmed_country.T.plot(legend=False, ax=fig_ax0)\ntop_10 = confirmed_country.iloc[:,-1].sort_values(ascending=False).head(10)\ntop_10_iloc = [confirmed_country.index.get_loc(i) for i in reversed(top_10.index)]\ncolors_top10 = [plt0.get_lines()[i].get_color() for i in top_10_iloc]\nplt1 = top_10.sort_values().plot(kind='barh', color = colors_top10, ax=fig_ax1)\nfig_ax1.set_ylabel('')\nfor i, v in enumerate(top_10.sort_values().values):\n    fig_ax1.text(v, i, '{:,}'.format(v), color = 'red')\n\nfig_ax1.get_xaxis().set_major_formatter(ticker.FuncFormatter(lambda x, p: x\/1000))\n\nfig_ax0.spines['top'].set_visible(False)\nfig_ax0.spines['right'].set_visible(False)\nfig_ax1.spines['right'].set_visible(False)\nfig_ax1.spines['top'].set_visible(False)\nfig_ax0.set_title('Confirmed Cases per Country')\nfig_ax1.set_title('Current Top 10')\nplt.show()","43066343":"fig = plt.figure(figsize=(15,6))\nspecs = gs.GridSpec(ncols=8, nrows=1, figure=fig)\n\nax0 = fig.add_subplot(specs[0, 0:5])\nax1 = fig.add_subplot(specs[0, 6:])\n\nplt0 = deaths_country.T.plot(legend=False, ax=ax0)\nax0.set_title('Death Cases per Country')\n\ntop_10_death = deaths_country.iloc[:,-1].sort_values(ascending=False).head(10)\ntop_10_death_iloc = [deaths_country.index.get_loc(i) for i in top_10_death.index]\ncolors_top10 = [plt0.get_lines()[i].get_color() for i in top_10_death_iloc]\n\nplt1 = top_10_death.sort_values().plot(kind='barh', color=reversed(colors_top10), ax=ax1)\nfor i,v in enumerate(top_10_death.sort_values().values):\n    ax1.text(v,i, str(v)) \n\nax0.spines['top'].set_visible(False)\nax0.spines['right'].set_visible(False)\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.set_ylabel('')\nax1.set_title('Current Top 10')\nplt.show()","d4b133b8":"# death cases in percent\ndeath_percentage = deaths_country.iloc[:,-1]\/confirmed_country.iloc[:,-1]*100\ndeath_percentage.drop(confirmed_country.index[confirmed_country.iloc[:,-1]<1000], inplace=True)\nfig, ax = plt.subplots(figsize=(12,6))\ndeath_percentage.sort_values().tail(10).plot(kind='barh', color='red')\nax.set_title('Highest Death Rate (%)')\nax.set_ylabel('')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor i, v in enumerate(death_percentage.sort_values().tail(10)):\n    ax.text(v, i, '{:.1f}'.format(v))\nplt.show()","5c6c1c88":"top_10_active = active_country.iloc[:,-1].sort_values().tail(10)\nactive_percentage = active_country.iloc[:,-1]\/confirmed_country.iloc[:,-1]*100\nfig,ax = plt.subplots(figsize=(12,6))\ntop_10_active.plot(kind='barh', width=0.8, ax=ax)\nfor i,v in enumerate(top_10_active):\n    ax.text(v, i, '{:,} \/ {:.1f}%'.format(v, active_percentage.loc[top_10_active.index[i]]))\n\nax.set_ylabel('')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.set_title('Top 10 in Actual Number')\nplt.show()","33c372ad":"# calculate daily new cases in each country\ntemp_df = confirmed_country.copy()\ntemp_df.drop(temp_df.columns[-1], axis=1, inplace=True)\ntemp_df.insert(0, '1\/21\/20', temp_df.iloc[:,0])\ntemp_df.columns = confirmed_country.columns\ndifference_daily = confirmed_country.subtract(temp_df)\n\n\nfig = plt.figure(figsize=(20,10))\nspecs = gs.GridSpec(ncols=1, nrows=2, figure=fig, hspace=1)\nax0 = fig.add_subplot(specs[0,0])\nax1 = fig.add_subplot(specs[1,0])\n#ax2 = fig.add_subplot(specs[2,0])\n\ndifference_daily.loc[top_10.index,:].T.plot(marker='', figsize=(10,6), ax = ax0)\ntop_10_diff = difference_daily.loc[top_10.index,difference_daily.columns[-1]]\nax0.legend(bbox_to_anchor=(1, 1))\nax0.spines['right'].set_visible(False)\nax0.spines['top'].set_visible(False)\nax0.set_title('Daily New Cases in Current Top 10 Countries')\n\ndifference_daily.sum().plot(color='black', ax = ax1)\ndifference_daily.drop('US').sum().plot(color='#ffff00', ax=ax1)\ndifference_daily.loc['US'].plot(color='blue', ax=ax1)\nax1.spines['right'].set_visible(False)\nax1.spines['top'].set_visible(False)\nax1.set_title('Daily New Cases from around the World')\n\nax1.legend(['World', 'All but US', 'US'], bbox_to_anchor=(1,1))\n\nplt.show()","f50771f7":"# Daily New Cases","e85a6da1":"# Big Picture of Cases","85d9c422":"# Death Cases","4178090f":"# Confirmed Cases","2794d8b6":"# Active Cases"}}