{"cell_type":{"af4e64d0":"code","d59854a0":"code","e4f06d13":"code","33ed5a03":"code","1559f521":"code","a6f1ba9e":"code","14d3e5e5":"code","86277d9d":"code","a49b31da":"code","ae1529c4":"code","6e4eb699":"code","3b40bf2e":"code","fd236ce6":"code","68370a19":"code","de708e0f":"code","a0da5257":"code","0e4b31f0":"code","601ed5a0":"code","3da0b6da":"code","6d6801ce":"code","10f3108f":"code","532e9f19":"code","2fa2b827":"code","1aba6cd6":"code","a5a79710":"markdown","11fba247":"markdown","b655f549":"markdown","f0c58c5f":"markdown","f7bb00de":"markdown","5f71b2b3":"markdown","bc28fad0":"markdown","0b57e3d3":"markdown","64040da9":"markdown","4e1003f3":"markdown","8692a128":"markdown"},"source":{"af4e64d0":"# Importing libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\n\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom scipy.stats.stats import pearsonr\n\n# Configuring plotting parameters\n%config InlineBackend.figure_format = 'retina' #set 'png' here when working on notebook\n%matplotlib inline","d59854a0":"# Reading in data files\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","e4f06d13":"train.head()","33ed5a03":"# Combine training and testing datasets for data preparation purposes\nall_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","1559f521":"matplotlib.rcParams['figure.figsize'] = (12.0, 6.0)\nprices = pd.DataFrame({\"price\":train[\"SalePrice\"], \"log(price + 1)\":np.log1p(train[\"SalePrice\"])})\nprices.hist();","a6f1ba9e":"#log transform the target:\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#log transform skewed numeric features:\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","14d3e5e5":"# One-Hot Encode all categorical fields\nall_data = pd.get_dummies(all_data)","86277d9d":"#filling NA's with the mean of the column:\nall_data = all_data.fillna(all_data.mean())","a49b31da":"#creating matrices for sklearn:\nX_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\ny = train.SalePrice","ae1529c4":"from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\nfrom sklearn.model_selection import cross_val_score\n\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, X_train, y, scoring=\"neg_mean_squared_error\", cv = 5))\n    return(rmse)","6e4eb699":"# Create a Ridge Regression model\nmodel_ridge = Ridge()","3b40bf2e":"alphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() \n            for alpha in alphas]","fd236ce6":"cv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Validation - Just Do It\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmse\")","68370a19":"cv_ridge.min()","de708e0f":"model_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(X_train, y)","a0da5257":"rmse_cv(model_lasso).mean()","0e4b31f0":"coef = pd.Series(model_lasso.coef_, index = X_train.columns)","601ed5a0":"print(\"Lasso picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")","3da0b6da":"imp_coef = pd.concat([coef.sort_values().head(10),\n                     coef.sort_values().tail(10)])","6d6801ce":"matplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Coefficients in the Lasso Model\")","10f3108f":"#let's look at the residuals as well:\nmatplotlib.rcParams['figure.figsize'] = (6.0, 6.0)\n\npreds = pd.DataFrame({\"preds\":model_lasso.predict(X_train), \"true\":y})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\npreds.plot(x = \"preds\", y = \"residuals\",kind = \"scatter\")","532e9f19":"predicted_y_test = np.exp(model_lasso.predict(X_test))-1","2fa2b827":"sample_submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission = pd.DataFrame({'Id': sample_submission['Id'],\n                           'SalePrice': predicted_y_test\n                          })","1aba6cd6":"submission.to_csv('submission.csv', index=False)","a5a79710":"Nice! The lasso performs even better so we'll just use this one to predict on the test set. Another neat thing about the Lasso is that it does feature selection for you - setting coefficients of features it deems unimportant to zero. Let's take a look at the coefficients:","11fba247":"The most important positive feature is `GrLivArea` -  the above ground area by area square feet. This definitely sense. Then a few other  location and quality features contributed positively. Some of the negative features make less sense and would be worth looking into more - it seems like they might come from unbalanced categorical variables.\n\n Also note that unlike the feature importance you'd get from a random forest these are _actual_ coefficients in your model - so you can say precisely why the predicted price is what it is. The only issue here is that we log_transformed both the target and the numeric features so the actual magnitudes are a bit hard to interpret. ","b655f549":"The residual plot looks pretty good. Most of the values are close to 0 on the y-axis, and there are no positive or negative trends in the data.","f0c58c5f":"So for the Ridge regression we get a rmsle of about 0.127\n\nLet' try out the Lasso model. We will do a slightly different approach here and use the built in Lasso CV to figure out the best alpha for us. For some reason the alphas in Lasso CV are really the inverse or the alphas in Ridge.","f7bb00de":"We can also take a look directly at what the most important coefficients are:","5f71b2b3":"The main tuning parameter for the Ridge model is alpha - a regularization parameter that measures how flexible our model is. The higher the regularization the less prone our model will be to overfit. However it will also lose flexibility and might not capture all of the signal in the data. This is an example of the bias-complexity trade off.","bc28fad0":"### Data preprocessing: \nWe're not going to do anything fancy here: \n \n- First I'll transform the skewed numeric features by taking log(feature + 1) - this will make the features more normal    \n- Create Dummy variables for the categorical features (One-Hot Encoding) \n- Replace the numeric missing values (NaN's) with the mean of their respective columns","0b57e3d3":"### Models\n\nNow we are going to use regularized linear regression models from the scikit learn module. I'm going to try both l_1(Lasso) and l_2(Ridge) regularization. I'll also define a function that returns the cross-validation rmse error so we can evaluate our models and pick the best tuning par","64040da9":"# Linear model: \n\nThe goal of this notebook is to use a regularized linear regression model to predict home prices. Surprisingly it does really well with very little feature engineering. The key point is to to log_transform the numeric variables since most of them are skewed.\n\nAuthor: Alexandru Papiu ([@apapiu](https:\/\/twitter.com\/apapiu), [GitHub](https:\/\/github.com\/apapiu))\n \nIf you use parts of this notebook in your own scripts, please give some sort of credit (for example link back to [this](https:\/\/www.kaggle.com\/apapiu\/regularized-linear-models)). Thanks!","4e1003f3":"Good job Lasso.  One thing to note here however is that the features selected are not necessarily the \"correct\" ones - especially since there are a lot of collinear features in this dataset. One idea to try here is run Lasso a few times on boostrapped samples and see how stable the feature selection is.","8692a128":"Note the U-ish shaped curve above. When alpha is too large the regularization is too strong and the model cannot capture all the complexities in the data. If however we let the model be too flexible (alpha small) the model begins to overfit. A value of alpha = 10 is about right based on the plot above."}}