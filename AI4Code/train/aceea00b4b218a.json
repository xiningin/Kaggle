{"cell_type":{"8ae508cb":"code","02884ec6":"code","f58def7b":"code","c8209a26":"code","6fffbd61":"code","997a0569":"code","06fdde21":"code","355dd805":"code","a8f94203":"code","97a9b474":"code","f5798067":"code","fc541783":"code","431dc515":"code","7b27144c":"code","bb3991dc":"code","53c1ad2d":"code","f74c623f":"code","6803c3d3":"code","c8b663ea":"code","6d0e917c":"code","d01a7138":"code","cc539365":"code","62084885":"code","2e2eea81":"code","8da501ab":"code","34dfe01c":"code","f1d20200":"code","e69f0cae":"code","f39dc1f9":"code","610bac0e":"code","8ed81dca":"code","1b42ad49":"code","d1635cab":"code","a7c19c5b":"code","315b9aaf":"code","7b62eb86":"code","0383e6d1":"markdown","fb72e072":"markdown"},"source":{"8ae508cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","02884ec6":"df= pd.read_csv(\"..\/input\/HR-Employee-Attrition.csv\")","f58def7b":"df.head()","c8209a26":"df.info().sum()","6fffbd61":"print(list(df.columns))","997a0569":"df.drop(columns='Attrition').dtypes\n","06fdde21":"print(df['Attrition'].dtype)\n","355dd805":"df.isna().sum()","a8f94203":"df.duplicated().sum()","97a9b474":"num_cols = df.select_dtypes(include = np.number)","f5798067":"a = num_cols[num_cols.columns].hist(bins=15, figsize=(15,35), layout=(9,3),color = 'blue',alpha=0.6)\n","fc541783":"cat_col = df.select_dtypes(exclude=np.number)\n","431dc515":"cat_col","7b27144c":"fig, ax = plt.subplots(4, 2, figsize=(15, 15))\nfor variable, subplot in zip(cat_col, ax.flatten()):\n    sns.countplot(df[variable], ax=subplot,palette = 'plasma')\n    for label in subplot.get_xticklabels():\n        label.set_rotation(90)\nplt.tight_layout()","bb3991dc":"df[['StandardHours','EmployeeCount']].describe()","53c1ad2d":"df[['StandardHours','EmployeeCount']].corr()","f74c623f":"corr = df.drop(columns=['StandardHours','EmployeeCount']).corr()","6803c3d3":"cols = ['Age', 'BusinessTravel', 'Department',\n       'DistanceFromHome', 'Education', 'EducationField', 'EmployeeCount',\n        'EnvironmentSatisfaction', 'Gender', \n       'JobInvolvement', 'JobLevel', 'JobRole', 'JobSatisfaction',\n       'MaritalStatus', 'NumCompaniesWorked',\n       'Over18', 'OverTime', 'PercentSalaryHike', 'PerformanceRating',\n       'RelationshipSatisfaction', 'StandardHours', 'StockOptionLevel',\n       'TotalWorkingYears', 'TrainingTimesLastYear', 'WorkLifeBalance',\n       'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion',\n       'YearsWithCurrManager']\nfor col in cols:\n    pd.crosstab(df[col],df.Attrition).plot(kind='bar',color = ('green','red'),figsize=(10,5))","c8b663ea":"#onehot encoding","6d0e917c":"df.columns.shape","d01a7138":"cat_col.columns.shape","cc539365":"num_cols.columns.shape","62084885":"cat_col_encoded = pd.get_dummies(cat_col)","2e2eea81":"cat_col_encoded.head()","8da501ab":"df = pd.concat([num_cols,cat_col_encoded],sort=False,axis=1)\n","34dfe01c":"df.head()","f1d20200":"X = df.drop(columns='Attrition')","e69f0cae":"y = df['Attrition']","f39dc1f9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","610bac0e":"train_Pred = logreg.predict(X_train)","8ed81dca":"metrics.confusion_matrix(y_train,train_Pred)","1b42ad49":"metrics.accuracy_score(y_train,train_Pred)","d1635cab":"test_Pred = logreg.predict(X_test)","a7c19c5b":"metrics.accuracy_score(y_test,test_Pred)","315b9aaf":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, test_Pred))","7b62eb86":"###The precision is the ratio tp \/ (tp + fp) where tp is the number of true positives and fp the number of false positives. The precision is intuitively the ability of the classifier not to label as positive a sample that is negative.\n\n#The recall is the ratio tp \/ (tp + fn) where tp is the number of true positives and fn the number of false negatives. The recall is intuitively the ability of the classifier to find all the positive samples.\n\n#The support is the number of occurrences of each class in y_test.","0383e6d1":"# Age Vs Attrition - From data, it appears that attrition is more at age group 18-23\n# % of attrition is more among people who travel frequently\n# % of attrition is more in sales department\n# %of attrition is more during 0-1 years of working in company\n# People in job role of Sales Representative tend to have more attrition %\n# From given data, overtime population has more attrition","fb72e072":"correlation"}}