{"cell_type":{"31af2f5b":"code","16bd2f79":"code","e5c1fac8":"code","df8576d2":"code","ae53e637":"code","55741242":"code","e943e7f2":"code","39f502fc":"code","511f8480":"code","00d83863":"code","8eebf25b":"code","a0329c03":"code","06f968b7":"code","782e885e":"code","375fd171":"code","6b9e42a1":"code","81b425c2":"code","aa758075":"code","0b078614":"code","df81c925":"code","c2ed347c":"code","f9089896":"code","9c4436b6":"code","f335a6c7":"code","c39f5ae9":"code","c9876b01":"code","d248a7f5":"code","ecfc255d":"code","46f84881":"markdown","40e1e08f":"markdown","b020ede0":"markdown","f91e3e42":"markdown","29ed2991":"markdown","e4ca3746":"markdown","4be2f71d":"markdown","b2931997":"markdown","586ecaab":"markdown","13ee8a38":"markdown","12a1d11e":"markdown","c9dc93be":"markdown","d2d39372":"markdown","cbfdf4b4":"markdown","67a84262":"markdown","a66d06fb":"markdown","93f1ae96":"markdown","4ece294c":"markdown","ec2bb6bf":"markdown","e9c9984a":"markdown","10625ed7":"markdown","f1317809":"markdown","a72b498c":"markdown","b13f37dd":"markdown","e22260f6":"markdown","9395d19d":"markdown","c98ef21a":"markdown","e6cb8c11":"markdown","9b84ec4a":"markdown","ba8000e0":"markdown"},"source":{"31af2f5b":"import pandas as pd                                  \nimport seaborn as sns                                 \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats                               \n\nfrom sklearn.preprocessing import LabelEncoder        \nfrom sklearn.model_selection import train_test_split  \nfrom sklearn import metrics                            \nfrom sklearn.linear_model import LinearRegression     \nfrom sklearn.linear_model import Lasso                \nfrom xgboost import XGBRegressor                      \n\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (8,5)\n\ndf = pd.read_csv(\"..\/input\/pizza-price-prediction\/pizza_v1.csv\")","16bd2f79":"print(df.shape)\ndf.head()","e5c1fac8":"df.info()","df8576d2":"#Checking for null values\nsns.heatmap(df.isnull(), cbar = False)\nplt.show()","ae53e637":"df[\"price_rupiah\"] = df[\"price_rupiah\"].str.replace(\"Rp\",\"\").str.replace(\",\",\"\")\n\n#Converting the datatype to int\ndf[\"price_rupiah\"] = df[\"price_rupiah\"].astype(int)","55741242":"#At the time of making this notebook the converstion price of rupiah to dollars is 0.00070\ndf[\"price\"] = df[\"price_rupiah\"] * 0.000070\n\n#droping the column price_rupiah\ndf.drop(\"price_rupiah\", axis = 1, inplace = True)","e943e7f2":"#Changing the datatype of diameter to int\ndf[\"diameter\"] = df[\"diameter\"].astype(int)\ndf.head()","39f502fc":"for X in df.columns:\n    if X == \"price\":\n        pass\n    else:\n        sns.set_theme(style=\"darkgrid\")\n        sns.barplot(x = X, y = \"price\", data = df, ci = None)\n        plt.xticks(rotation = 90)\n        plt.xlabel(X)\n        plt.ylabel(\"Price\")\n        plt.show()","511f8480":"le = LabelEncoder()","00d83863":"#Encoding the cloumns with object datatype\nfor val in df.columns:\n    if df[val].dtype == \"O\":\n        df[val] = le.fit_transform(df[val])\ndf.head()\n        ","8eebf25b":"correlation = df.corr()\nsns.heatmap(correlation, annot = True)\nplt.show()","a0329c03":"df.describe()","06f968b7":"for X in df.columns:\n    if X == \"price\":\n        pass\n    else:\n        sns.boxplot(x = X, data = df)\n        plt.show()","782e885e":"q1 = df[\"diameter\"].quantile(0.25)\nq3 = df[\"diameter\"].quantile(0.75)\nIQR = q3 - q1\n\nLower_whisk = q1 - 1.5 * IQR\nUpper_whisk = q3 + 1.5 * IQR\n\nprint(\"Quantile 1:\", q1)\nprint(\"Quantile 3:\", q3)\nprint(\"Inter Quartile Range:\",IQR)\nprint(\"Lower Whisk:\",Lower_whisk)\nprint(\"Upper Whisk:\",Upper_whisk)","375fd171":"temp = df[df[\"diameter\"] > Lower_whisk]\nsns.boxplot(temp[\"diameter\"])\nplt.show()","6b9e42a1":"z=np.abs(stats.zscore(df[\"diameter\"]))\nthreshold=3\nprint(np.where(z>3))","81b425c2":"X = df.drop(\"price\",axis = 1)\nY = df[\"price\"]","aa758075":"xtrain, xtest, ytrain, ytest = train_test_split(X,Y, test_size = 0.1, random_state =0) ","0b078614":"Linearmodel = LinearRegression()","df81c925":"Linearmodel.fit(xtrain,ytrain)\nTrain_prediction = Linearmodel.predict(xtrain)\nLi_Train_error_score = metrics.r2_score(ytrain, Train_prediction)\n\n#Visualizing the plot\nsns.regplot(x = ytrain, y = Train_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.text(9, 15, f'Error Score: {Li_Train_error_score}', horizontalalignment='center',verticalalignment='center'\n         ,bbox=dict(facecolor='red', alpha=0.5))\n\nplt.show()","c2ed347c":"Linearmodel.fit(xtest,ytest)\nTest_prediction = Linearmodel.predict(xtest)\nLi_Test_error_score = metrics.r2_score(ytest, Test_prediction)\n\nsns.regplot(x = ytest, y = Test_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.text(6.5, 10, f'Error Score: {Li_Test_error_score}', horizontalalignment='center',verticalalignment='center'\n         ,bbox=dict(facecolor='red', alpha=0.5))\n\nplt.show()","f9089896":"Lassomodel = Lasso()","9c4436b6":"Lassomodel.fit(xtrain,ytrain)\nTrain_prediction = Lassomodel.predict(xtrain)\nLasso_Train_error_score = metrics.r2_score(ytrain, Train_prediction)\nsns.regplot(x = ytrain, y = Train_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\n\nplt.text(9, 14, f'Error Score: {Lasso_Train_error_score}', horizontalalignment='center',verticalalignment='center'\n         ,bbox=dict(facecolor='red', alpha=0.5))\n\nplt.show()","f335a6c7":"Lassomodel.fit(xtest,ytest)\nTest_prediction = Lassomodel.predict(xtest)\nLasso_Test_error_score = metrics.r2_score(ytest, Test_prediction)\n\nsns.regplot(x = ytest, y = Test_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.text(6.5, 9, f'Error Score: {Lasso_Test_error_score}', horizontalalignment='center',verticalalignment='center'\n         ,bbox=dict(facecolor='red', alpha=0.5))\n\nplt.show()","c39f5ae9":"XGBReg_model = XGBRegressor()","c9876b01":"XGBReg_model.fit(xtrain,ytrain)\nTrain_prediction = XGBReg_model.predict(xtrain)\nXGB_Train_error_score = metrics.r2_score(ytrain, Train_prediction)\n\nsns.regplot(x = ytrain, y = Train_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.text(9, 17, f'Error Score: {XGB_Train_error_score}', horizontalalignment='center',verticalalignment='center'\n         ,bbox=dict(facecolor='red', alpha=0.5))\n\nplt.show()","d248a7f5":"XGBReg_model.fit(xtest,ytest)\nTest_prediction = XGBReg_model.predict(xtest)\nXGB_Test_error_score = metrics.r2_score(ytest, Test_prediction)\n\nsns.regplot(x = ytest, y = Test_prediction)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.text(6.5, 10, f'Error Score: {XGB_Test_error_score}', horizontalalignment='center',verticalalignment='center'\n         ,bbox=dict(facecolor='red', alpha=0.5))\n\nplt.show()","ecfc255d":"print(\"Linear Regression\")\nprint(f'The R-Squared Value for Linear Regression Train Model is :{Li_Train_error_score}')\nprint(f'The R-Squared Value for Linear Regression Test Model is :{Li_Test_error_score}')\n\nprint()\nprint(\"Lasso Regression\")\nprint(f'The R-Squared Value for Lasso Regression Train Model is :{Lasso_Train_error_score}')\nprint(f'The R-Squared Value for Lasso Regression Test Model is :{Lasso_Test_error_score}')\n\nprint()\nprint(\"XGBRegressor\")\nprint(f'The R-Squared Value for XGBRegressor Train Model is :{XGB_Train_error_score}')\nprint(f'The R-Squared Value for XGBRegressor TestModel is :{XGB_Test_error_score}')","46f84881":"#### Testing","40e1e08f":"### Removing Outliers using IQR","b020ede0":"**The chart shows the different value with respect to the price.**","f91e3e42":"### Encoding the Dataset","29ed2991":"### Cleaning the Dataset","e4ca3746":"### Visualizing the Dataset","4be2f71d":"*The diameter variable has outliers because there are no values present in between 12.0 and 9.0, so the values below 9 are considered as outliers, Removing the values below lower whisk(9.0) will eliminate the outliers and stabilize the boxplot but we also loose too many values.*","b2931997":"#### Train","586ecaab":"### Checking for Outliears ","13ee8a38":"### Zscore ","12a1d11e":"### Model Evaluation","c9dc93be":"#### Test","d2d39372":"### Conclusion","cbfdf4b4":"The correlation chart shows that the **diameter** has the **highest correlation with the price**","67a84262":"**Changing the column price_rupiah value to int or float**","a66d06fb":"The boxplot shows that the diameter has a outlier","93f1ae96":"The dataset as 129 rows and 8 columns\n\nThe dataset shows us the different variables that are used to determine the price of the pizza\n\nOur target variable is **price_rupiah**\n","4ece294c":"### XGBRegressor","ec2bb6bf":"### Analyzing The Dataset","e9c9984a":"**Thank You!!!**","10625ed7":"The dataset has **no null values**","f1317809":"### Linear Regression","a72b498c":"#### Test","b13f37dd":"**XGBRegressor has better R-squared values thus it has better prediction score compared to Linear Regression model and Lass**","e22260f6":"The price_rupiah values must need to change to **float or int** and other column values must also need to be changed\n","9395d19d":"#### Train","c98ef21a":"**Zscore shows no outliers so I'll go with the actual dataset**","e6cb8c11":"## Importing Libraries","9b84ec4a":"### Lasso Regression","ba8000e0":"#### Training "}}