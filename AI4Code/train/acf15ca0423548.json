{"cell_type":{"e9d6a74f":"code","278a99f6":"code","de0bdced":"code","b132c202":"code","4114faf4":"code","18c29910":"code","061c3095":"code","4e9eab2a":"code","0d9b71f1":"markdown","49f08ed4":"markdown","ca12e7d9":"markdown","ca5d3270":"markdown","3106f328":"markdown","919718c7":"markdown","bfdc6e48":"markdown","79eb94c1":"markdown","59b35bac":"markdown","36e7426e":"markdown","1087c48f":"markdown"},"source":{"e9d6a74f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","278a99f6":"from sklearn.datasets import make_blobs\nX1, y1 = make_blobs(n_samples=500, n_features=2, centers=2, cluster_std=1.5, random_state=43)\n\nplt.scatter(X1[:,0], X1[:,1], c=y1)\nplt.xlabel('feature_1')\nplt.ylabel('feature_2')\nplt.show()","de0bdced":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size=0.3, random_state=43)","b132c202":"from sklearn.metrics import confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier().fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint('training accuracy: {}'.format(knn.score(X_train,y_train)))\nprint('test accuracy: {}'.format(knn.score(X_test, y_test)))\nprint('confusion matrix on test set: \\n{}'.format(confusion_matrix(y_test, y_pred)))\n\nfig, axs = plt.subplots(ncols=2, figsize=(20,5))\naxs[0].scatter(X_test[:,0], X_test[:,1], c=y_test)\naxs[0].set_title('Actual')\naxs[0].set_xlabel('feature_1')\naxs[0].set_ylabel('feature_2')\n\naxs[1].scatter(X_test[:,0], X_test[:,1], c=y_pred)\naxs[1].set_title('Predicted')\naxs[1].set_xlabel('feature_1')\naxs[1].set_ylabel('feature_2')\n\nplt.show()","4114faf4":"train_accuracy = []\ntest_accuracy = []\nfor i in range(1,51):\n    knn = KNeighborsClassifier(n_neighbors=i).fit(X_train, y_train)\n    train_accuracy.append(knn.score(X_train,y_train))\n    test_accuracy.append(knn.score(X_test, y_test))\n    \nplt.figure(figsize=(20,5))\nsns.set_style('whitegrid')\nplt.plot(range(1,51),train_accuracy, label='train')\nplt.plot(range(1,51),test_accuracy, label='test')\nplt.xlabel('n_neighbors')\nplt.ylabel('accuracy')\nplt.xticks(np.arange(min(range(1,51)), max(range(1,51))+1, 1.0))\nplt.legend()\nplt.show()","18c29910":"from sklearn.linear_model import LogisticRegression\n\nlgr = LogisticRegression().fit(X_train, y_train)\ny_pred = lgr.predict(X_test)\nprint('training accuracy: {}'.format(lgr.score(X_train,y_train)))\nprint('test accuracy: {}'.format(lgr.score(X_test, y_test)))\nprint('confusion matrix on test set: \\n{}'.format(confusion_matrix(y_test, y_pred)))\n\nfig, axs = plt.subplots(ncols=2, figsize=(20,5))\naxs[0].scatter(X_test[:,0], X_test[:,1], c=y_test)\naxs[0].set_title('Actual')\naxs[0].set_xlabel('feature_1')\naxs[0].set_ylabel('feature_2')\n\naxs[1].scatter(X_test[:,0], X_test[:,1], c=y_pred)\naxs[1].set_title('Predicted')\naxs[1].set_xlabel('feature_1')\naxs[1].set_ylabel('feature_2')\n\nplt.show()","061c3095":"train_accuracy = []\ntest_accuracy = []\nC_values = [0.001, 0.01, 0.1, 1, 100]\nfor i in C_values:\n    lgr = LogisticRegression(C=i).fit(X_train, y_train)\n    train_accuracy.append(lgr.score(X_train, y_train))\n    test_accuracy.append(lgr.score(X_test, y_test))\n\nscore_table = pd.DataFrame({'C':C_values,'train_accuacy':train_accuracy,'test_accuracy':test_accuracy}).set_index('C')\nscore_table.transpose()","4e9eab2a":"lgr001 = LogisticRegression(C=0.001).fit(X_train, y_train)\nlgr01 = LogisticRegression(C=0.01).fit(X_train, y_train)\nlgr1 = LogisticRegression(C=0.1).fit(X_train, y_train)\nlgr_1 = LogisticRegression(C=1).fit(X_train, y_train)\nlgr_100 = LogisticRegression(C=100).fit(X_train, y_train)\n\nplt.figure(figsize=(15,5))\nplt.plot(lgr001.coef_.T, 'o', label=\"C=0.001\")\nplt.plot(lgr01.coef_.T, 'p', label=\"C=0.01\")\nplt.plot(lgr1.coef_.T, 'D', label=\"C=0.1\")\nplt.plot(lgr_1.coef_.T, '^', label=\"C=1\")\nplt.plot(lgr_100.coef_.T, 'v', label=\"C=100\")\nplt.xticks(range(X_train.shape[1]), ['feature_1','feature_2'])\nplt.hlines(0, 0, 2)\nplt.xlabel(\"Coefficient index\")\nplt.ylabel(\"Coefficient magnitude\")\nplt.legend()\nplt.show()","0d9b71f1":"### Baseline Model","49f08ed4":"# Logistic Regression","ca12e7d9":"# Basic Imports","ca5d3270":"# Creating Dataset","3106f328":"### Baseline model","919718c7":"# K-Nearest Neighbors","bfdc6e48":"# Splitting Dataset","79eb94c1":"Although our model has performed very well we will still tune our model to see change in model performance after tunnig.","59b35bac":"### Model Tuning","36e7426e":"### Model Tunning","1087c48f":"Although our model has performed very well we will still tune our model to see change in model performance after tunnig."}}