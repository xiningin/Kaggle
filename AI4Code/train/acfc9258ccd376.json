{"cell_type":{"540fddf8":"code","c59c2645":"code","b26d2488":"code","3d307ca7":"code","395e1501":"code","bebf7bf9":"code","61d1c42a":"code","0d8dc3bf":"code","6b0205f0":"code","5f62104b":"code","92da7c62":"code","d1103450":"code","d1883c03":"code","24808f37":"code","9696b982":"code","6255b653":"code","7d3197ed":"code","82cdcc60":"code","259338cf":"code","d60917d6":"code","36cdda37":"code","7e51acbf":"code","c2c6b6f0":"code","3bb4052a":"code","2b559bd4":"code","494d7f00":"code","a4eab0b8":"code","8a596ecd":"code","ca80ec04":"code","e44bc49a":"code","4ed12882":"markdown","a89898b4":"markdown","6ac685a6":"markdown","a5b8140c":"markdown","8507e915":"markdown","09ebc14b":"markdown","874a6c1e":"markdown","1193dfdc":"markdown","448b0bad":"markdown","0a39a4b2":"markdown","1b0add07":"markdown","ddfd2702":"markdown","895e7b08":"markdown","09b688e8":"markdown","5aa65f86":"markdown","c3feea44":"markdown"},"source":{"540fddf8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c59c2645":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly as py\nimport plotly.graph_objs as go\nimport os\npy.offline.init_notebook_mode(connected = True)\nimport datetime as dt\nimport missingno as msno\nfrom wordcloud import WordCloud\nimport random\nimport matplotlib\nimport plotly.express as px\nplt.rcParams['figure.dpi'] = 140","b26d2488":"data = pd.read_csv(\"..\/input\/forbes-billionaires-of-2021-20\/forbes_billionaires.csv\")\ndata.head()","3d307ca7":"print(\"There are {} row and {} columns in this data.\".format(data.shape[0],data.shape[1]))","395e1501":"data.isnull().sum()","bebf7bf9":"for i in data.columns:\n    null_rate = data[i].isna().sum() \/ len(data) * 100 \n    if null_rate > 0 :\n        print(\"{} null rate: {}%\".format(i,round(null_rate,2)))","61d1c42a":"# write instead of null\ndata[\"Age\"].replace(np.nan, data[\"Age\"].sum()\/(len(data)-len(data)*4.54\/100),inplace  = True)\ndata[\"Children\"].replace(np.nan, data[\"Children\"].sum()\/(len(data)-len(data)*43.67\/100),inplace  = True)\ndata['Residence'].replace(np.nan, 'No Data',inplace  = True)\ndata['Citizenship'] = data[\"Citizenship\"].fillna(data[\"Country\"].mode()[0])\ndata[\"Status\"].replace(np.nan, \"No Data\", inplace = True)\ndata[\"Education\"].replace(np.nan, \"No Data\", inplace = True)\n\ndata.groupby(['Self_made'])['Self_made'].count()\ndata[\"Self_made\"].replace(np.nan, data[\"Self_made\"].mode()[0], inplace = True)","0d8dc3bf":"data.isnull().sum()","6b0205f0":"# Palette\nsns.palplot(['#333333', '#565656', '#626262','#eeeeee'])\n\nplt.title(\"Forbes Color Palette \",loc='left',fontfamily='serif',fontsize=15,y=1.2)\nplt.show()","5f62104b":"x = data[\"Status\"].value_counts()\nx = pd.DataFrame(x).T\n\nfor i in x.columns:\n    y = x[i].sum() \/ 2755 * 100\n    if y > 0 :\n        print(\"{} y: {}%\".format(i,round(y,2)))","92da7c62":"no_data = x[\"No Data\"][0]\nmarried = x[\"Married\"][0]\nnot_married = (x[\"Divorced\"][0] + x[\"Widowed\"][0] + x[\"Single\"][0] + x[\"In Relationship\"][0] + \n               x[\"Separated\"][0] + x[\"Widowed, Remarried\"][0] + x[\"Engaged\"][0])\nmarried = pd.DataFrame(married, index = [\"Status\"], columns = [\"Married\"])\nnot_married = pd.DataFrame(not_married, index = [\"Status\"], columns = [\"Not Married\"])\nx2 = pd.concat([married, not_married], axis = 1)\nx2","d1103450":"for i in x2.columns:\n    y2 = x2[i].sum() \/ (married[\"Married\"][0]+not_married[\"Not Married\"][0]) * 100\n    if y2 > 0 :\n        print(\"{} y: {}%\".format(i,round(y2,2)))","d1883c03":"married = (x[\"Married\"][0] + round(x[\"No Data\"][0]*0.83))\nnot_married = (x2[\"Not Married\"][0] + round(x[\"No Data\"][0]*0.17))\n\nmarried = pd.DataFrame(married, index = [\"Status\"], columns = [\"Married\"])\nnot_married = pd.DataFrame(not_married, index = [\"Status\"], columns = [\"Not Married\"])\nx3 = pd.concat([married, not_married], axis = 1)\nx3","24808f37":"for i in x3.columns:\n    y3 = x3[i].sum() \/ (married[\"Married\"][0]+not_married[\"Not Married\"][0]) * 100\n    if y3 > 0 :\n        print(\"{} : {}%\".format(i,round(y3,2)))","9696b982":"fig = px.pie(x2.T, values = \"Status\",\n             names = [\"Married\",\"Not Married\"], \n             width=800, height=500)\nfig.update_traces(textposition = \"inside\",\n                  textinfo = \"percent + label\",\n                  hole = 0.3,\n                  marker = dict(colors = [\"#333333\", \"#565656\"],\n                                line = dict(color = \"white\", width = 3)))\n\nfig.update_layout(annotations = [dict(text = \"Status\",\n                                      x = 0.5, y= 0.5,\n                                      font_size = 24, showarrow = False,\n                                      font_family = \"Verdana\",\n                                      font_color = \"black\")],\n                  showlegend = False)\n\nfig.show()","6255b653":"x=data.groupby(['Self_made'])['Self_made'].count()\ny=len(data)\nr=((x\/y)).round(2)\n\nself_ratio = pd.DataFrame(r).T\nself_ratio.columns = [\"Not Self Made\", \"Self Made\"]\nself_ratio = pd.concat([self_ratio[\"Self Made\"], self_ratio[\"Not Self Made\"]], axis = 1) # Kolonlar\u0131n yerini de\u011fi\u015ftirdim.\n\n\nfig, ax = plt.subplots(1,1,figsize=(6.5, 2.5))\n\nax.barh(self_ratio.index, self_ratio['Self Made'], \n        color='#333333', alpha=0.9, label='Male')\nax.barh(self_ratio.index, self_ratio['Not Self Made'], left=self_ratio['Self Made'], \n        color='#565656', alpha=0.9, label='Female')\n\nax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticks([])\n#ax.set_yticklabels(mf_ratio.index, fontfamily='serif', fontsize=11)\n\nfor i in self_ratio.index:\n    ax.annotate(f\"{int(self_ratio['Self Made'][i]*100)}%\", \n                   xy=(self_ratio['Self Made'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\n\n    ax.annotate(\"Self Made\", \n                   xy=(self_ratio['Self Made'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=13, fontweight='light', fontfamily='serif',\n                   color='white')\n\nfor i in self_ratio.index:\n    ax.annotate(f\"{int(self_ratio['Not Self Made'][i]*100)}%\", \n                   xy=(self_ratio['Self Made'][i]+self_ratio['Not Self Made'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\n    ax.annotate(\"Not Self Made\", \n                   xy=(self_ratio['Self Made'][i]+self_ratio['Not Self Made'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=13, fontweight='light', fontfamily='serif',\n                   color='white')\n    \n# Title & Subtitle\nfig.text(0.125,1.03,'Self Made or Not Self Made', fontfamily='serif',fontsize=15, fontweight='bold')\nfig.text(0.125,0.92,'We can see that their fortune vastly self made',fontfamily='serif',fontsize=12)  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n\n\n#ax.legend(loc='lower center', ncol=3, bbox_to_anchor=(0.5, -0.06))\n\n# Removing legend due to labelled plot\nax.legend().set_visible(False)\nplt.show()","7d3197ed":"x4 = data[\"Citizenship\"].value_counts()\n\nfig, ax = plt.subplots(1,1,figsize=(8.5, 5.5))\nsns.barplot(y=x4[0:10].index, x=x4[0:10],linewidth=1.5, facecolor=(0, 0, 0, 1),edgecolor=\".5\")\n\nfig.text(0.26,0.95,'Top 10 Citizenships of Richest Billionaires', fontfamily='serif',fontsize=12, fontweight='bold', alpha = 0.9)\nfig.text(0.94, 0.8, 'Insight', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.81, 0.5,\n         '''\n                     There are more Forbes \n                     billionaires in US and \n                     China than any other \n                     countries. This chart \n                     shows us the billionaire \n                     citizenships.\n                     \n                     ''',\n         \n         fontfamily='serif',fontsize=12)\n\nax.grid(axis='x', linestyle='-', alpha=0.4)   \n\ngrid_x_ticks = np.arange(0, 800, 50) # y ticks, min, max, then step\nax.set_xticks(grid_x_ticks)\nax.set_axisbelow(True)\n\n\nplt.xlabel(\"Billionaires\",fontsize=10,fontweight='bold', alpha = 0.9)\nplt.yticks(fontsize=8,fontweight='bold', alpha = 0.9)\nplt.xticks(fontsize=6)\n#plt.title(\"Visualization by Citizenship\")\nplt.show()","82cdcc60":"x5 = data[\"Country\"].value_counts()\n\nfig, ax = plt.subplots(1,1,figsize=(6.5, 3.5))\nsns.barplot(y=x4[0:10].index, x=x4[0:10],linewidth=1.5, facecolor=(0, 0, 0, 1),edgecolor=\".5\")\n\nfig.text(0.2,0.95,'Top 10 Countries of Richest Billionaires', fontfamily='serif',fontsize=12, fontweight='bold', alpha = 0.9)\n\nax.grid(axis='x', linestyle='-', alpha=0.4)   \n\ngrid_x_ticks = np.arange(0, 800, 50) # y ticks, min, max, then step\nax.set_xticks(grid_x_ticks)\nax.set_axisbelow(True)\n\n\nplt.xlabel(\"Billionaires\",fontsize=10,fontweight='bold', alpha = 0.9)\nplt.yticks(fontsize=8,fontweight='bold', alpha = 0.9)\nplt.xticks(fontsize=6)\n#plt.title(\"Visualization by Citizenship\")\nplt.show()","259338cf":"networth = data[\"NetWorth\"].sum().round()\/10000\nnetworth = pd.DataFrame(networth, index = range(1), columns=[\"Trillion $\"])\n\n#1\nfig, ax = plt.subplots(1,1,figsize=(8.5, 4.5))\n\nax.barh(networth.index, networth['Trillion $'], \n        color='#333333', alpha=1, label='Total Worth')\n\nax.set_xlim(0, 2)\nax.set_xticks([])\nax.set_yticks([])\n#ax.set_yticklabels(mf_ratio.index, fontfamily='serif', fontsize=11)\n\n# movie percentage\nfor i in networth.index:\n    ax.annotate(f\"{int(networth['Trillion $'][i]*10)}\", \n                   xy=(networth['Trillion $'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=80, fontweight='light', fontfamily='serif',\n                   color='white')\n\n    ax.annotate(\"Trillion $\", \n                   xy=(networth['Trillion $'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\n    \n\n# Title & Subtitle\nfig.text(0.125,1.03,'Total Worth', fontfamily='serif',fontsize=14, fontweight='bold')\nfig.text(0.125,0.92,'The total worth of the richest 2755 person.',fontfamily='serif',fontsize=11)  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n\n\n#ax.legend(loc='lower center', ncol=3, bbox_to_anchor=(0.5, -0.06))\n\n# Removing legend due to labelled plot\nax.legend().set_visible(False)\nplt.show()","d60917d6":"worth_sum = 0\na = [] # Top Countries\nb = [] # Net Worths by Countries\nfor i in range(10):\n    worth_index = data[\"Country\"].value_counts().index[i]\n    worth = data[data[\"Country\"] == data[\"Country\"].value_counts().index[i]]\n    worth_sum += worth[\"NetWorth\"].sum().round()\n    a.append(worth_index)\n    b.append(round(worth[\"NetWorth\"].sum()))\nprint(\"Top 10 Total Worth: {} billion $\".format(worth_sum))\n\nb = pd.DataFrame(b, columns = [\"Total Worth\"])\na = pd.DataFrame(a, columns = [\"Country\"])\nx6 = pd.concat([a,b], axis = 1)\nx6 = x6.set_index(\"Country\")","36cdda37":"fig, ax = plt.subplots(1,1,figsize=(7.5, 8.5))\nsns.barplot(x=x6.index, y=x6[\"Total Worth\"],linewidth=1.5, facecolor=(0, 0, 0, 1),edgecolor=\".5\")\n\nfig.text(0.27,0.90,'Top 10 Countries of Richest Billionaires', fontfamily='serif',fontsize=12, fontweight='bold', alpha = 0.9)\nfig.text(0.138, 0.825, x6[\"Total Worth\"][0], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.217, 0.520, x6[\"Total Worth\"][1], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.30, 0.205, x6[\"Total Worth\"][2], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.38, 0.208, x6[\"Total Worth\"][3], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.455, 0.203, x6[\"Total Worth\"][4], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.53, 0.180, x6[\"Total Worth\"][5], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.61, 0.142, x6[\"Total Worth\"][6], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.689, 0.145, x6[\"Total Worth\"][7], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.765, 0.143, x6[\"Total Worth\"][8], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.843, 0.142, x6[\"Total Worth\"][9], fontweight='bold', fontsize=10, color = \"white\")\nfig.text(0.921, 0.80, 'Insight', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.8, 0.43,\n         '''\n                     \n                     In the Country title, USA has  \n                     the highest total value with \n                     724 people. The total wealth of \n                     these rich people is 4398 B $.\n                     \n                     In second place is China, which\n                     put 626 people on the list. The\n                     sum of their wealth is 2532 B $.\n                     In turn, 140 people from India, \n                     136 from Germany and 118 from \n                     Russia entered the list.\n                     \n                     The total wealth on the list is \n                     13 Trillion $, but the wealth of \n                     those who enter this chart is \n                     10 Trillion $. The vast majority \n                     is in the hands of those entering \n                     the list from these 10 countries.\n                      \n                     ''',\n         \n         fontfamily='serif',fontsize=10)\n\nax.grid(axis='y', linestyle='-', alpha=0.6)   \n\ngrid_y_ticks = np.arange(0, 4500, 200) # y ticks, min, max, then step\nax.set_yticks(grid_y_ticks)\nax.set_axisbelow(True)\n\n\nplt.xlabel(\"Country\",fontsize=10,fontweight='bold', alpha = 0) # alpha = 0 : invisible\nplt.ylabel(\"Billion $\",fontsize=12,fontweight='bold', alpha = 0.9)\nplt.yticks(fontsize=8,fontweight='bold', alpha = 0.9)\nplt.xticks(fontsize=7, rotation = 60, fontweight='bold')\n#plt.title(\"Visualization by Citizenship\")\nplt.show()","7e51acbf":"name = data[\"Name\"]\nnet_worth = (data[\"NetWorth\"])\ncountry = data[\"Country\"]\nsource = data[\"Source\"]\nrank = data[\"Rank\"]\nage = data[\"Age\"]\nresidence = data[\"Residence\"]\ncitizenship = data[\"Citizenship\"]\nstatus = data[\"Status\"]\nchildren = data[\"Children\"]\neducation = data[\"Education\"]\nself_made = data[\"Self_made\"]","c2c6b6f0":"data2 = pd.concat([name, net_worth, source], axis = 1)\ndata2[:10]","3bb4052a":"def plot_pie_charts(x, y, title):\n    # more muted color \n    c = ['#333333', '#565656', '#626262', '#eeeeee', '#eeeeee',\n        '#eeeeee', '#eeeeee', '#eeeeee', '#eeeeee', '#eeeeee', '#eeeeee']\n    plt.figure(figsize=(8,6))\n    plt.title(title, size=18)\n    plt.pie(y, colors=c,shadow=True, labels=x)\n#    plt.legend(x, loc='right', fontsize=6)\n    plt.show()","2b559bd4":"plot_pie_charts(name[:10], net_worth[:10],'Top Richest People')","494d7f00":"data2 = pd.concat([name, net_worth, source], axis = 1)\ndata2[:5]\nx7 = data2[:5]\nx7 = x7.set_index(\"Name\")","a4eab0b8":"fig = px.pie(x7, values = \"NetWorth\",\n             names = x7.index, width=800, height=500)\nfig.update_traces(\n                  textposition = \"inside\",\n                  textinfo = \"value , label , text\",\n                  textfont = {'family': \"Serif\", 'size': [30, 26, 20, 18, 16]},\n#                  text = [\"$\",\"$\",\"$\",\"$\",\"$\"],\n                  hole = 0.3,\n                  marker = dict(colors = [\"#565646\", \"#565646\", \"#565646\", \"#565646\", \"#565646\"],\n                                line = dict(color = \"white\", width = 3)))\n\nfig.update_layout(annotations = [dict(text = \"Values\",\n                                      x = 0.5, y= 0.5,\n                                      font_size = 30, showarrow = False,\n                                      font_family = \"serif\",\n                                      font_color = \"#565646\")],\n                  showlegend = False)\n\nfig.update_layout(\n    title_font_size=30, \n    font_family = \"serif\", \n    font_color = \"black\",\n    title_text=\"Top Richest People\"\n)\n\n\nfig.show()","8a596ecd":"fig = px.pie(x7, values = \"NetWorth\",\n             names = x7.index, width=800, height=500)\nfig.update_traces(title_font_size=10,\n                  textposition = \"inside\",\n                  text = x7[\"Source\"],\n                  textinfo = \"label + text\",\n                  textfont = {'family': \"Serif\", 'size': [30, 26, 20, 18, 16]},\n                  hole = 0.3,\n                  marker = dict(colors = ['#221f1f', '#221f1f', '#221f1f', '#221f1f', '#221f1f'],\n                                line = dict(color = \"white\", width = 3)))\n\nfig.update_layout(annotations = [dict(text = \"Source\",\n                                      x = 0.5, y= 0.5,\n                                      font_size = 30, showarrow = False,\n                                      font_family = \"serif\",\n                                      font_color = \"black\")],\n                  showlegend = False)\n\nfig.update_layout(\n    title_text=\"Top Richest People & Their Sources\",\n    title_font_size=30, \n    font_family = \"serif\", \n    font_color = \"black\"\n)\n    \nfig.show()","ca80ec04":"text = str(list(name[0:50])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '').replace('.', '')\n\ncmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", ['#221f1f', '#565646', \"#eeeeee\"])\n\nwordcloud = WordCloud(background_color = 'white', width = 800,  height = 500,colormap=cmap, max_words = 100).generate(text)\n\nplt.figure( figsize=(10,10))\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.title('Wordclouds of Richest Names', fontfamily='serif',fontsize=30, fontweight='bold', alpha = 0.7, color = \"Red\")\nplt.show()","e44bc49a":"data_self_made = data[data[\"Self_made\"] == True]\ndata_not_self_made = data[data[\"Self_made\"] == False]\n\nx8 = [data_self_made[\"NetWorth\"].sum(), data_not_self_made[\"NetWorth\"].sum()]\ncol = [\"Self Made or Not\"]\nidx = [\"Self Made\", \"Not Self Made\"]\nx8 = pd.DataFrame(x8, index = idx, columns = col)\n\nfig, ax = plt.subplots(1,1,figsize=(7, 3))\nax = sns.barplot(x=x8.index, y=x8[\"Self Made or Not\"],linewidth=1.5, facecolor=(0, 0, 0, 1),edgecolor=\".5\")\n\nfig.text(0.20,0.95,'Compare Self Made \/ Not Self Made Fortune', fontfamily='serif',fontsize=12, fontweight='bold', alpha = 0.9)\nfig.text(0.250, 0.720, str(data_self_made[\"NetWorth\"].sum()) + \"B $\", fontweight='bold', fontsize=15, color = \"white\")\nfig.text(0.63, 0.32, str(data_not_self_made[\"NetWorth\"].sum()) + \"B $\", fontweight='bold', fontsize=15, color = \"white\")\nfig.text(0.93, 0.80, 'Insight', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.8, 0.43,\n         '''\n                     \n                     Total self made fortune is vastly  \n                     high than total not self made value. \n                     Although the self made ones are 72%,\n                     the value of their wealth is 70%.\n                      \n                     ''',\n         \n         fontfamily='serif',fontsize=10)\n\nax.grid(axis='y', linestyle='-', alpha=0.6)   \n\ngrid_y_ticks = np.arange(0, 11000, 1000) # y ticks, min, max, then step\nax.set_yticks(grid_y_ticks)\nax.set_axisbelow(True)\n\nplt.ylabel(\"Billion $\",fontsize=12,fontweight='bold', alpha = 0.9)\nplt.yticks(fontsize=8,fontweight='bold', alpha = 0.9)\n\nplt.show()","4ed12882":"### 1.1. Missing Data","a89898b4":"### 2.4. Country","6ac685a6":"# Import Libraries","a5b8140c":"The above is not yet proportionally distributed marriage rate on No Data. First, let's find the rate and then distribute them.","8507e915":"# 2. Let's Visualize\n\nForbes Color Palette\n\nhttps:\/\/www.color-hex.com\/color-palette\/3133","09ebc14b":"### 2.6. Total Worth by Top 10 Citizenship","874a6c1e":"**Age**: We will find the average age and write it instead of the null values.\n\n**Residence**: Write No Data instead of NaN\n\n**Citizenship**: It should be equal to the Country columns because Country has no null values and looks almost the same as the Citizenship columns.\n\n**Status**: We'll drop it down to two options. Married or Not Married.\n\n**Children**: Write average children rate instead of NaN\n\n**Education**: Write No Data instead of NaN\n\n**Self_made**: Null rate in this columns is very small. That's why we can drop them by dropna or add them to Self_Made option.","1193dfdc":"Now let's check again Marriage rate...","448b0bad":"### 2.1. Status","0a39a4b2":"### 2.5. Total Worth","1b0add07":"### 2.7. Self Made & Not Self Made Fortunes","ddfd2702":"### 2.3. Citizenship","895e7b08":"# 1. Import Data","09b688e8":"As it can seen there are null data in 7 columns. So let's make the calculation that gives the null ratios below.","5aa65f86":"### 2.2. Self Made or Not","c3feea44":"Now there is no any null values."}}