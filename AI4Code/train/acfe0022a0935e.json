{"cell_type":{"13a09c78":"code","946e2de3":"code","84f0545e":"code","d634f3b2":"code","7c694f85":"code","430209bb":"code","6fff5fbe":"code","74b22505":"code","bff03513":"markdown","b7a0f1c2":"markdown","c7d1016d":"markdown","851ef33d":"markdown","2d4056f4":"markdown","0685b485":"markdown","969dba6c":"markdown"},"source":{"13a09c78":"import os\nimport shutil\nfrom PIL import Image\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras.layers import Conv2D, Conv2DTranspose, Input, MaxPooling2D, Add, BatchNormalization, LeakyReLU, Reshape, Flatten, Dense, Add\nfrom keras.layers.convolutional import Deconvolution2D\nfrom keras.layers import merge\nfrom keras.optimizers import Adam\nimport numpy as np\nfrom random import sample \nfrom keras.models import Model\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","946e2de3":"# source: https:\/\/www.kaggle.com\/suryanshdabas\/skinlesionsegmentation\nimport re\nimport glob\nimport PIL\nfrom PIL import Image\nnumbers = re.compile(r'(\\d+)')\ndef numericalSort(value):\n    parts = numbers.split(value)\n    parts[1::2] = map(int, parts[1::2])\n    return parts","84f0545e":"# source: https:\/\/www.kaggle.com\/suryanshdabas\/skinlesionsegmentation\nfilelist_trainx = sorted(glob.glob('..\/input\/*\/trainx\/*.jpg'), key=numericalSort)\nX_train = np.array([np.array(Image.open(fname)) for fname in filelist_trainx])\n\nfilelist_trainy = sorted(glob.glob('..\/input\/*\/trainy\/*.jpg'), key=numericalSort)\nY_train = np.array([np.array(Image.open(fname)) for fname in filelist_trainy])\n\nfilelist_testx = sorted(glob.glob('..\/input\/*\/testx\/*.jpg'), key=numericalSort)\nX_test = np.array([np.array(Image.open(fname)) for fname in filelist_testx])\n\nfilelist_testy = sorted(glob.glob('..\/input\/*\/testy\/*.jpg'), key=numericalSort)\nY_test = np.array([np.array(Image.open(fname)) for fname in filelist_testy])\n\nfilelist_valx = sorted(glob.glob('..\/input\/*\/validationx\/*.jpg'), key=numericalSort)\nX_val = np.array([np.array(Image.open(fname)) for fname in filelist_valx])\n\nfilelist_valy = sorted(glob.glob('..\/input\/*\/validationy\/*.jpg'), key=numericalSort)\nY_val = np.array([np.array(Image.open(fname)) for fname in filelist_valy])\n","d634f3b2":"(x_train, y_train), (x_test, y_test), (x_val, y_val) = (X_train, Y_train), (X_test, Y_test), (X_val, Y_val)","7c694f85":"input_img = Input(shape = (192, 256, 3))\nconv1 = Conv2D(32, (3, 3), strides = (2,2), activation='relu', padding='same')(input_img) #96 x 128 x 32\nconv2 = Conv2D(32, (3, 3), strides = (2,2), activation='relu', padding='same')(conv1) #48 x 64 x 32\nconv3 = Conv2D(64, (3, 3),strides = (2,2), activation='relu', padding='same')(conv2) #24 x 32 x 64\nconv4 = Conv2D(64, (3, 3),strides = (2,2), activation='relu', padding='same')(conv3) # 12 x 16 x 64\n\ndeconv1 = Deconvolution2D(64, (3,3), strides = (2,2), activation = 'relu', padding='same')(conv4) #24 X 32 X 64\ndeconv2 = Deconvolution2D(32, (3,3), strides = (2,2), activation = 'relu', padding='same')(deconv1) #48 X 32 X 64\nlevel1 = Add()([deconv2, conv2])  #skip connection\n\ndeconv3 = Deconvolution2D(32, (3,3), strides = (2,2), activation = 'relu', padding='same')(level1) # 96 X 128 X 32\nlevel2 = Add() ([deconv3, conv1]) #skip connection\ndeconv4 = Deconvolution2D(32, (3,3), strides = (2,2), activation = 'relu', padding='same')(level2) # 192 X 128 X 32\n\n\ndecoded = Conv2D(3, 5, 5, activation='linear', border_mode='same')(deconv4)\n\n\nencoder = Model(input_img,decoded)\nencoder.compile(optimizer='adam', loss='mse')\nencoder.summary()","430209bb":"batch_size = 128\nepochs = 50\nencoder.fit(x_train, x_train,batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(x_val, x_val))","6fff5fbe":"pred = encoder.predict(x_test)\npred.shape","74b22505":"plt.figure(figsize=(20, 4))\nprint(\"Test Images\")\nfor i in range(10):\n    plt.subplot(2, 10, i+1)\n    plt.imshow(x_test[i, ..., 0], cmap='gray')\n    plt.axis('off')\nplt.show()    \n\nplt.figure(figsize=(20, 4))\nprint(\"Reconstruction of Test Images\")\nfor i in range(10):\n    plt.subplot(2, 10, i+1)\n    plt.imshow(pred[i, ..., 0], cmap='gray')  \n    plt.axis('off')\nplt.show()","bff03513":"# Prediction","b7a0f1c2":"# Visualize Results","c7d1016d":"# Train","851ef33d":"Defining a function to sort the image filenames so we can load images in order.","2d4056f4":"# Loading the data","0685b485":"# Importing the libraries","969dba6c":"# AutoEncoder with skip connection"}}