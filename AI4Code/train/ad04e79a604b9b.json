{"cell_type":{"45d36129":"code","8de4039c":"code","c01b3715":"code","00821a6e":"code","6f8179af":"code","96841be6":"code","bf248ab1":"code","33b4b41f":"code","f915b32b":"code","023128de":"code","ee66cdae":"code","71f3c5eb":"code","20172c0e":"code","615ee03d":"code","106ea86b":"code","c7ea3588":"code","cebc8694":"code","106a6483":"code","287c23e2":"code","6b4940ac":"code","f3e40f17":"code","0109a7a9":"markdown","a5763a00":"markdown","ede7550b":"markdown","dd917b43":"markdown","7e4ccb21":"markdown","646f4a58":"markdown","ad2e6a8d":"markdown","162c3682":"markdown","186c32c1":"markdown","c242bc74":"markdown","9e313b56":"markdown","e340e13a":"markdown"},"source":{"45d36129":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8de4039c":"# Import libraries\nimport pandas as pd\nimport numpy as np\npd.set_option('display.float_format', lambda x: '%.5f' % x) \nfrom datetime import datetime\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport scipy.stats as stats\nfrom bioinfokit.analys import stat","c01b3715":"# Read and preview data\ndf = pd.read_csv('\/kaggle\/input\/youtube-new\/USvideos.csv')\nprint(df.shape)\nprint(df.columns)\ndf.head(2)","00821a6e":"# Fix date format (18.25.05 --> 2018-05-25)\ndates = []\nfor i,j in df['trending_date'].items():\n    f_date = datetime.strptime(j, '%y.%d.%m').date()\n    dates.append(f_date)\n\ndf['trending_date_formatted'] = dates\ndf[['trending_date_formatted', 'trending_date']].sample(20)","6f8179af":"# Percent of video likes\ndf['pct_likes'] = df['likes'] \/ (df['likes'] + df['dislikes'])","96841be6":"# Remove duplicate rows\n# Some videos have multiple rows because of the trending_date\n# For each video_id, I sort by the trending_date and select the most recent date\ndeduped = pd.DataFrame()\nfor i in df['video_id'].unique():\n    sub = df[df['video_id'] == i].sort_values('trending_date_formatted').iloc[-1:]\n    deduped = pd.concat([deduped, sub])\n    \ndeduped.head()","bf248ab1":"# Compare these late night talk shows\nchannels = ['The Tonight Show Starring Jimmy Fallon'\n            , 'The Late Show with Stephen Colbert'\n           , 'Jimmy Kimmel Live'\n           , 'Late Night with Seth Meyers']\n\n# Filter\ndf_late_shows = deduped[deduped['channel_title'].isin(channels)].dropna()\n\n# Summary stats for eah of the talk shows\ndf_late_shows.groupby('channel_title').agg({'views': 'mean', 'pct_likes': 'mean', 'video_id': 'nunique'})","33b4b41f":"# Box plot with the percent of video likes for eah of the talk shows\nplt.figure(figsize=(15,5))\nax = sns.boxplot(x='channel_title', y='pct_likes', data=df_late_shows, color='#99c2a2')\nplt.show()","f915b32b":"# Pivot the data so it can be used in ANOVA\npiv = df_late_shows.pivot_table(index='video_id', columns='channel_title', values='pct_likes')\n\n# One-way ANOVA\nfvalue, pvalue = stats.f_oneway(piv.iloc[:,0].dropna()\n                               , piv.iloc[:,1].dropna()\n                               , piv.iloc[:,2].dropna()\n                               , piv.iloc[:,3].dropna())\nprint(f'ANOVA\\nTest Statistic: {fvalue:.2f}\\nP-Value: {pvalue:.4f}')","023128de":"# Tukey's HSD\nres = stat()\nres.tukey_hsd(df=df_late_shows, res_var='pct_likes', xfac_var='channel_title', anova_model='pct_likes ~ C(channel_title)')\nres.tukey_summary.sort_values('p-value')","ee66cdae":"# Filter\ncat_df = deduped[deduped['category_id'].isin([17, 22])].dropna()\n\n# Summary stats for each category_id\ncat_df.groupby('category_id').agg({'video_id': 'nunique', 'pct_likes': 'mean'}).sort_values('video_id')","71f3c5eb":"# Bootstrap sampling for the mean of pct_likes\nboot_samples = 1000\nboot_size = 100\nunos = []\ndoses = []\ndiffs = []\nfor i in range(boot_samples):\n    uno = cat_df[cat_df['category_id'] == 17]['pct_likes'].sample(boot_size).mean()\n    dos = cat_df[cat_df['category_id'] == 22]['pct_likes'].sample(boot_size).mean()\n    unos.append(uno)\n    doses.append(dos)\n    diff = dos - uno\n    diffs.append(diff)\ndiffs = pd.Series(diffs, name='difference')","20172c0e":"# Plot bootstraps for each category_id\nsns.histplot(unos, color='blue', label='17')\nsns.histplot(doses, color='green', label='22')\nplt.legend()\nplt.show()","615ee03d":"# Plot the difference between bootstrap samples for each category_id\n# Make a red vertical line at zero (mean of the null hypothesis)\n# If the mean pct_likes for each talk show was the same, then the mean of the bootstrap differences would be zero\n# However, ~96% of the bootstrap differences are greater than zero (see cell below, this percentage will change slightly each time the notebook runs)\nsns.histplot(diffs)\nplt.axvline(0, color='red')\nplt.show()","106ea86b":"pct_ile = len(diffs[diffs > 0]) \/ len(diffs)\nprint(f'{pct_ile:.0%} of the bootstrap differences are greater than zero')","c7ea3588":"# T test with the bootstrap samples of mean pct_likes\nt_stat, p_val = stats.ttest_ind(unos, doses)\nprint(f'Test statistic: {t_stat:.2f}\\nP-Value: {p_val:.4f}')","cebc8694":"cat_df.groupby('category_id').agg({'pct_likes': 'mean'})\n\nseventeen = cat_df[cat_df['category_id'] == 17]['pct_likes'].mean()\ntwentytwo = cat_df[cat_df['category_id'] == 22]['pct_likes'].mean()\nemp_diff = abs(twentytwo - seventeen)\n\nprint('Empirical data:\\n')\nprint(f'Mean of category 17: {seventeen:.3f}')\nprint(f'Mean of category 22: {twentytwo:.3f}')\nprint(f'Difference: {emp_diff:.3f}')","106a6483":"# Box plot with the percent of video likes for eah of the video categories\nplt.figure(figsize=(5,10))\nax = sns.boxplot(x='category_id', y='pct_likes', data=cat_df, color='#99c2a2')\nplt.show()","287c23e2":"boot_samples = 1000\nnum_vids = len(cat_df['pct_likes'])\ns1 = int(np.floor(num_vids \/ 2))\ns2 = num_vids - s1\npermutation_means = []\nfor i in range(boot_samples):\n    together = np.random.permutation(cat_df['pct_likes'])\n    spam = together[:s1]\n    eggs = together[s2:]\n    spam_and_eggs = np.mean(spam) - np.mean(eggs)\n    permutation_means.append(spam_and_eggs)\n    \npermutation_means = pd.Series(permutation_means, name='permutation_means')","6b4940ac":"# PLot the distribution of the permutation means\n# Make a red vertical line to show the empirical mean difference\nsns.histplot(permutation_means, color='grey')\nplt.axvline(emp_diff, color='red')\nplt.show()","f3e40f17":"perm_left_tail = stats.percentileofscore(permutation_means, emp_diff) \/ 100\nperm_p_value = 1 - perm_left_tail\nperm_test_stat = emp_diff \/ permutation_means.std()\n\nprint(f'The empirical difference between groups is in the {(perm_left_tail * 100):.1f} percentile of the permutation means distribution. \\nIt is {perm_test_stat:.1f} standard deviations above zero. \\nThe one-tailed p-value is {perm_p_value:.4f}.')","0109a7a9":"### Tukey's HSD","a5763a00":"The permutation test is similar to the t-test with bootstrap in that they both use resampling. The permutation test measures if the two groups come from the same distribution. It does this by combining the two group's data, shuffling, and subtracting the mean of the top half from the mean of the bottom half, and repeat. Then compare the mean differences to the empirical mean difference. If the two groups come from the same distribution, then the difference between the mean of each group would be the same as the mean difference of the resampling means.... That's a lot of means! :)","ede7550b":"### Filter the data to only include the late night talk shows","dd917b43":"### Bootstrap sampling and t-test","7e4ccb21":"### ANOVA","646f4a58":"### Permutation test","ad2e6a8d":"Link to dataset:\n* https:\/\/www.kaggle.com\/datasnaek\/youtube-new","162c3682":"Find which talk shows are significantly differnt using Tukey's HSD test. It adjusts the p-values to account for multiple comparisons....... The mean pct_likes for Jimmy Fallon's show is significantly different than Stephen Colbert's and Jimmy Kimmel's show (>95% confidence).","186c32c1":"Compare the percent of video likes for each of the talk shows using a one-way ANOVA test..... The p-value is significant (>99.9% confidence) so the group means are different from each other","c242bc74":"# Hypothesis Testing with YouTube Data\nThis notebook compares the percent of likes for YouTube videos by channel (late night talk shows) and video category (category_id 17 and 22) using various hypothesis tests, including ANOVA, Tukey's HSD, t-test with bootstrap, and permutation test.","9e313b56":"### Pre-processing","e340e13a":"The talk shows don't have enough videos in the data for bootstrap sampling so I'll compare the pct_likes by category_id instead (category_id 17 and category_id 22)"}}