{"cell_type":{"de605de1":"code","12467bc2":"code","45563870":"code","8dbf3b16":"code","bd327bda":"code","53e20121":"code","c0769334":"code","f107b2a5":"code","7f4f76b4":"code","068791c7":"code","02b1a73b":"code","212a5993":"code","f33a56e2":"code","4f796497":"code","746e60b5":"code","311b9570":"code","3cd6b63c":"markdown","da468f6e":"markdown","986c01b6":"markdown","ca8b61f7":"markdown"},"source":{"de605de1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","12467bc2":"import torch","45563870":"x = torch.rand(128, 64, 1024)","8dbf3b16":"x.shape","bd327bda":"# \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\nlstm = torch.nn.LSTM(1024, 512, batch_first=True)\n\npred, mem = lstm(x)","53e20121":"pred.shape","c0769334":"# \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043b\u043e\u0432\u0430\n# \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 bidirectional \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0440\u0430\u0437\u043c\u0435\u0440 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0430 \u043f\u043e\u0441\u043b\u0435 LSTM \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 512, \u0430 1024\n# \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u0430 LSTM \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e \u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442\n# \u044d\u0442\u043e \u0431\u0443\u0434\u0443\u0442 \u0434\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 LSTM\npred[:, -1, :].shape","f107b2a5":"# \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f LSTM\nlstm = torch.nn.LSTM(1024, 512)\n\n# \u043c\u0435\u043d\u044f\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c batch \u0438 seq_len \u043c\u0435\u0441\u0442\u0430\u043c\u0438\nx_transposed = x.transpose(0, 1)\npred_transposed, mem = lstm(x_transposed)","7f4f76b4":"# \u0443 \u043d\u0430\u0441 \u0432\u0441\u0435 \u0435\u0449\u0435 \u043e\u0441\u0442\u0430\u043b\u0430\u0441\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c (seq_len, batch, input_size)\npred_transposed.shape","068791c7":"# \u043f\u0440\u043e\u0441\u0442\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0435\u0449\u0435 \u0440\u0430\u0437\npred = pred_transposed.transpose(0, 1)\npred.shape","02b1a73b":"x.shape","212a5993":"# in_channels - \u0440\u0430\u0437\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\n# out_channels - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\/\u043a\u0430\u043a\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\n# kernel_size - \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u043a\u043d\u0430\/\u043d-\u0433\u0440\u0430\u043c\u043c\u044b\ncnn = torch.nn.Conv1d(in_channels=1024, out_channels=512, kernel_size=3)","f33a56e2":"# \u0432\u044b\u043f\u0430\u0434\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0430, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043a\u0430\u043a\u0430\u044f\n# pred = cnn(x)","4f796497":"x_transposed = x.transpose(1, 2)\nx_transposed.shape\n# \u043f\u0435\u0440\u0435\u0432\u0435\u043b\u0438 \u0432 (batch, input_size, seq_len)","746e60b5":"pred_transposed = cnn(x_transposed)\npred_transposed.shape\n# \u043e\u0441\u0442\u0430\u043b\u0430\u0441\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c (batch, output_size, seq_len)","311b9570":"# \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 (batch, seq_len, input_size)\npred = pred_transposed.transpose(1, 2)\npred.shape","3cd6b63c":"- 128 - \u0440\u0430\u0437\u043c\u0435\u0440 \u0431\u0430\u0442\u0447\u0430\n- 64 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432\n- 1024 - \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433 \u0441\u043b\u043e\u0432\u0430","da468f6e":"## Conv1d & MaxPool1d\n\u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a\u0430\u044f \u0436\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441\u043e \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u044f\u043c\u0438 \u0438 \u043f\u0443\u043b\u0438\u043d\u0433\u0430\u043c\u0438.  \n1d \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u0430\u043a \u0440\u0430\u0437 \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432, \u0432 \u043d\u0435\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0430-\u0444\u0438\u043b\u044c\u0442\u0440 \u0445\u043e\u0434\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438.  \n[\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e CNN](https:\/\/pytorch.org\/docs\/stable\/nn.html#conv1d)  \n[\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e \u043f\u0443\u043b\u0438\u043d\u0433](https:\/\/pytorch.org\/docs\/stable\/nn.html#maxpool1d)  \n\u041e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0430\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c:\n```python\n(batch, input_size, seq_len)\n```\n\u041c\u044b \u0432\u0441\u0435 \u0435\u0449\u0435 \u0445\u043e\u0442\u0438 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u0443\u044e \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c:\n```python\n(batch, seq_len, input_size)\n```\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043e \u0441\u0432\u0435\u0440\u0442\u043a\u0430\u043c\u0438 \u0438 \u043f\u0443\u043b\u0438\u043d\u0433\u0430\u043c\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c x \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u0430\u0447\u0435\u0439 \u0438 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u043c\u044b \u043f\u0435\u0440\u0432\u0443\u044e \u0438 \u0432\u0442\u043e\u0440\u0443\u044e \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c (\u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0441 \u043d\u0443\u043b\u044f).","986c01b6":"# \u0415\u0449\u0435 \u0432\u0430\u0436\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u043e LSTM\n\nThe input can also be a packed variable length sequence. See [torch.nn.utils.rnn.pack_padded_sequence()](https:\/\/pytorch.org\/docs\/stable\/nn.html#torch.nn.utils.rnn.pack_padded_sequence) or [torch.nn.utils.rnn.pack_sequence()](https:\/\/pytorch.org\/docs\/stable\/nn.html#torch.nn.utils.rnn.pack_sequence) for details.\n\n\u042d\u0442\u043e \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044f\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0442\u043e\u0440\u0447\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0435 \u0447\u0438\u0442\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d ```PAD```, \u043d\u043e \u0432\u0441\u0435 \u0435\u0449\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0431\u0430\u0442\u0447\u0430\u043c\u0438. \u0422\u043e \u0435\u0441\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0431\u0430\u0442\u0447\u0430 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043b\u0441\u0442\u043c\u043a\u0435, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0447\u0442\u043e \u043d\u0430 \u0432\u044b\u0445\u043e\u0434 \u043e\u0442\u0434\u0430\u0435\u0442\u0441\u044f [torch.nn.utils.rnn.PackedSequence](https:\/\/pytorch.org\/docs\/stable\/nn.html#torch.nn.utils.rnn.PackedSequence).","ca8b61f7":"# \u0412\u0430\u0436\u043d\u044b\u0435 \u0438 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b \u043f\u0440\u043e LSTM \u0438 CNN \u0432 \u0442\u043e\u0440\u0447\u0435\n\n\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e LSTM \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0442\u0430\u043a\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c\u044e:\n```python\n(seq_len, batch, input_size)\n```\n\u0421\u0434\u0435\u043b\u0430\u043d\u043e \u044d\u0442\u043e \u0441 \u0446\u0435\u043b\u044c\u044e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435.  \n\u041c\u044b \u043e\u043f\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0442\u0430\u043a\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438:\n```python\n(batch, seq_len, input_size)\n```\n\u0427\u0442\u043e\u0431\u044b LSTM \u0443 \u043d\u0430\u0441 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043b\u0438\u0431\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 ```batch_first=True``` \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u044f,\n\u043b\u0438\u0431\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c (\u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c) \u043f\u0435\u0440\u0432\u0443\u044e \u0438 \u0432\u0442\u043e\u0440\u0443\u044e \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0443 \u043d\u0430\u0448\u0435\u0433\u043e x \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u0430\u0447\u0435\u0439 \u0432 \u0441\u043b\u043e\u0439.  \n[\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e LSTM](https:\/\/pytorch.org\/docs\/stable\/nn.html#lstm)\n\n- 128 - \u0440\u0430\u0437\u043c\u0435\u0440 \u0431\u0430\u0442\u0447\u0430\n- 64 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432\n- 1024 - \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433 \u0441\u043b\u043e\u0432\u0430"}}