{"cell_type":{"e239ff9f":"code","9d7e6986":"code","ad10fbec":"code","55eee506":"code","c6690e3d":"code","81157e3b":"code","d7aa53ea":"code","ddbecd37":"code","12fc739c":"code","5108e5f4":"code","58c48ac1":"code","b4c1abcb":"code","0eea31a5":"code","ce2a50b5":"code","ef239c60":"code","a3256c90":"code","a39d7cf4":"code","0a8d0346":"code","a7a735b0":"code","73a90f78":"code","ec4aa99b":"code","66a96703":"code","e619c0b1":"code","c9813504":"code","81bee349":"code","45067360":"code","02eb2116":"code","bdc76859":"code","2003b08d":"code","fbf1241d":"code","08fa3154":"code","23d9710f":"code","06c9146f":"code","ef8971bb":"code","49dd8c78":"code","a075233c":"code","6b7db2cd":"code","840d6e86":"code","d0b05cfd":"markdown","01dc1ec9":"markdown","9089dfc2":"markdown","681ac9bb":"markdown","d7e852a5":"markdown","379af466":"markdown","ec651cb7":"markdown"},"source":{"e239ff9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","9d7e6986":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","ad10fbec":"#Loading Data\ndf = pd.read_csv('..\/input\/telecom-users-dataset\/telecom_users.csv')\ndf.info()\ndf.head()","55eee506":"#customerID, Unnamed:0, TotalCharges are not helpful. Lets drop them.\ndf = df.drop('Unnamed: 0', axis = 1)","c6690e3d":"df = df.drop('customerID', axis = 1)","81157e3b":"df = df.drop('TotalCharges', axis =1)","d7aa53ea":"df.head()","ddbecd37":"plt.figure(figsize = (10,10))\nsns.countplot(df['Churn'])\nplt.title('Churn Y\/N Count')\nplt.show()","12fc739c":"plt.figure(figsize = (10,10))\nsns.countplot(df['gender'])\nplt.title('Gender Count')\nplt.show()","5108e5f4":"sns.heatmap(df.corr(), cmap = 'viridis')","58c48ac1":"plt.figure(figsize = (10,10))\nplt.title(\"Client Months in Company\", fontsize = 16)\nplt.xlabel(\"Tenure Months\", fontsize = 14)\nsns.histplot(df['tenure'], bins = 20, color = 'blue', alpha = .3)","b4c1abcb":"sns.countplot(df['Partner'])","0eea31a5":"sns.countplot(df['Dependents'])","ce2a50b5":"df.nunique()","ef239c60":"#Change categorical data to numerical values","a3256c90":"df.info()","a39d7cf4":"objects = list(df.dtypes[df.dtypes == \"object\"].index)\nprint(objects)\n#We don't want to change Churn\nobjects = objects[0:len(objects)-1]\nprint()\nprint(objects)","0a8d0346":"df = pd.get_dummies(df, columns = objects, drop_first = True)","a7a735b0":"df.head()","73a90f78":"plt.figure(figsize=(12,10))\nsns.heatmap(df.corr())","ec4aa99b":"# A high correlation between various features can be seen","66a96703":"X = df.drop(\"Churn\", axis = 1).values\ny = df[\"Churn\"].values","e619c0b1":"#Splitting data into training and test sets","c9813504":"from sklearn.model_selection import train_test_split","81bee349":"#Split Data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","45067360":"#Scaling Data\nfrom sklearn.preprocessing import StandardScaler","02eb2116":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","bdc76859":"from sklearn.linear_model import LogisticRegression","2003b08d":"#Creating Logistic Regression Model\nlogreg = LogisticRegression()","fbf1241d":"#Training model \nlogreg.fit(X_train, y_train)","08fa3154":"#Predictions\npredictions = logreg.predict(X_test)","23d9710f":"# Measuring Accuracies\n\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nprint(classification_report(y_test, predictions))\nprint()\nprint(confusion_matrix(y_test, predictions))","06c9146f":"print(\"Churn No was {} % of the data\".format((df['Churn'].value_counts()[0]\/len(df) * 100)))\nprint(\"Churn Yes was {} % of the data\".format((df['Churn'].value_counts()[1]\/len(df) * 100)))","ef8971bb":"from sklearn.ensemble import RandomForestClassifier","49dd8c78":"#Creating model\nrfc = RandomForestClassifier(n_estimators=300)","a075233c":"rfc.fit(X_train, y_train)","6b7db2cd":"#Predictions\n\npredictions = rfc.predict(X_test)","840d6e86":"#Measuring Accuracies\n\nprint(classification_report(y_test, predictions))\nprint()\nprint(confusion_matrix(y_test, predictions))","d0b05cfd":"# Conclusion","01dc1ec9":"# Data Manipulation ","9089dfc2":"# Conclusion\n\nThe model performed fair. The precision rate for Yes was low due to the dispraportionate data.","681ac9bb":"# Creating Training and Test Data","d7e852a5":"# LOGISTIC REGRESSION MODEL","379af466":"# Random Forest Model","ec651cb7":"It seems that the overall accuracy between the Logistic Regression model and the Random Forest models are similar. In order to get better results in the future a sample of the data should be taken with equal Yes and No Churn predictions or find a dataset with more Yes values with Churn. "}}