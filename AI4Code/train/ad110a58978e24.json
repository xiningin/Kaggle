{"cell_type":{"d39d75b6":"code","b3ab590f":"code","1dc869a0":"code","db0e1965":"code","a0f13779":"code","8c8f6917":"code","ddc12f56":"code","8248f97b":"code","54c11768":"code","ba810ae3":"code","5e7f0513":"code","bdd2291b":"code","50079c45":"code","5a6c6a86":"code","9a72200a":"code","12cfca5b":"markdown","552abea7":"markdown","e1fd5075":"markdown","7076d830":"markdown","03f34cbc":"markdown","4efd63f3":"markdown","8ac86ce4":"markdown","70658ad8":"markdown","741de4a6":"markdown","a8b1fbca":"markdown","f7063d3c":"markdown","2a1f2aec":"markdown","20d1d70e":"markdown","360f11ed":"markdown","ec151028":"markdown","5a437849":"markdown","ba71056c":"markdown"},"source":{"d39d75b6":"from os import listdir\nfrom scipy.stats import ks_2samp\nfrom pathlib import Path\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc as pltrc\n\n'''\nget_end_event check NGS data to see how the play ends.\n- parameters:\n    - thisplay, NGS data of this play for all the players\n- return:\n    a string that could be 'tackle', 'touchdown', 'touchback', 'fair_catch', 'punt_downed', \n    'out_of_bounds', 'out_of_bounds_direct' (punter punted the ball directly out of bounds),\n    and 'no_play' (e.g., false start, delay of game)\n'''\ndef get_end_event(thisplay): \n    end_evts = ['tackle', 'touchdown', 'fair_catch', 'punt_downed', 'out_of_bounds', 'touchback']\n    evts = thisplay.Event.unique()\n    \n    match = set(evts).intersection(end_evts)\n    if len(match) == 0:\n        return 'no_play'\n    else:\n        match = match.pop()\n\n        if match == 'out_of_bounds':\n            if any(evts == 'punt_received'):\n                return match\n            else:\n                return 'out_of_bounds_direct'\n        else:\n            return match\n    \n'''\ncheck the play description if it is a no_play\n'''    \ndef print_no_play_description(playsum, gamekey, playid):    \n    \n    # show play description\n    play_cond = (\n        (playsum.GameKey==gamekey) &\n        (playsum.PlayID==playid))\n    pd.set_option('display.max_colwidth', -1)\n    display(playsum.loc[play_cond, ['PlayDescription']])\n","b3ab590f":"derived_summary_file = Path('..\/working\/data_fair_catch.csv')\nif derived_summary_file.is_file():\n    playsum = pd.read_csv(derived_summary_file)\n    prepare_data = False\nelse:\n    prepare_data = True","1dc869a0":"datapath = '..\/input\/'\nif prepare_data:\n    playsum = pd.read_csv(datapath + 'play_information.csv') # play summary table\n    playsum[\"End_Event\"] = \"\" # how this play ends\n    playsum[\"NumV\"] = \"\"      # number of jammers (V)\n    playsum[\"NumG\"] = \"\"      # number of gunners (G)","db0e1965":"if prepare_data:\n    # loop through all the NGS files\n    ngsfiles = [filename for filename in listdir(datapath) if filename.startswith(\"NGS\")]\n    for playfile in ngsfiles:\n        print(playfile)\n        ngsplays = pd.read_csv(datapath + playfile, low_memory=False)\n\n        # get a concise list of the plays in this ngs file\n        playf = ngsplays.drop_duplicates(subset=['GameKey','PlayID'], keep='first').copy()\n        playf.reset_index(drop=True, inplace=True)\n\n        # loop through all the plays\n        for play_ind in range(len(playf)):\n            # check ngsplays to see how this play ends\n            play_cond = (\n                (ngsplays.GameKey==playf.loc[play_ind,'GameKey']) &\n                (ngsplays.PlayID==playf.loc[play_ind,'PlayID']))\n\n            # get the end event\n            thisplay = ngsplays[play_cond]\n            endevt = get_end_event(thisplay)\n\n            # if you'd like to print out play descriptions of no_play, uncomment below\n#             if endevt == 'no_play':\n#                 print_no_play_description(playsum, \n#                                           playf.loc[play_ind,'GameKey'], \n#                                           playf.loc[play_ind,'PlayID'])\n\n            # update play summary\n            play_cond = (\n                (playsum.GameKey==playf.loc[play_ind,'GameKey']) &\n                (playsum.PlayID==playf.loc[play_ind,'PlayID']))\n            playsum.loc[play_cond, 'End_Event'] = endevt\n\n        ngsplays = None\n        playf = None","a0f13779":"if prepare_data:\n    players = pd.read_csv(datapath + 'play_player_role_data.csv')\n\n    for ind in range(playsum.shape[0]):\n        gamekey = playsum.loc[ind, 'GameKey']\n        playid = playsum.loc[ind, 'PlayID']\n\n        thisplay = players[(players.GameKey==gamekey)&(players.PlayID==playid)]\n        v = set(thisplay['Role']).intersection(['VLi','VLo','VRi','VRo','VR','VL'])\n        g = set(thisplay['Role']).intersection(['GLi','GLo','GRi','GRo','GR','GL'])\n\n        playsum.loc[ind,'NumV'] = len(v)\n        playsum.loc[ind,'NumG'] = len(g)","8c8f6917":"if prepare_data:\n    playsum = playsum.drop(playsum.index[(playsum.End_Event=='')])   \n    playsum.reset_index(drop=True, inplace=True)\n\n    # save the data frame\n    playsum.to_csv(derived_summary_file)\n\n# print out how plays end\nvc = playsum.End_Event.value_counts()\nprint(vc)","ddc12f56":"# playsum = playsum.drop(playsum.index[(playsum.End_Event=='no_play')])   \n# playsum = playsum.drop(playsum.index[(playsum.End_Event=='out_of_bounds_direct')])   \n# playsum = playsum.drop(playsum.index[(playsum.End_Event=='touchback')])   \n# playsum.reset_index(drop=True, inplace=True)","8248f97b":"vc = playsum.End_Event.value_counts()\nprint('percentage of plays')\nprint(vc\/sum(vc))\n\nprob_faircatch = vc['fair_catch']\/sum(vc)","54c11768":"vc = playsum.NumG.value_counts()\nvc\/sum(vc)","ba810ae3":"nvs = [2,3,4]\nfc = []\nfor nv in nvs:\n    pp = playsum.loc[(playsum.NumV==nv) & (playsum.NumG==2)]\n    vc = pp.End_Event.value_counts()\n    fc.append(vc['fair_catch']\/sum(vc))    \n    print('{} jammers, {:.2f}% ({}) plays were fair catch. 2 jammers were {:.2f} times more'.format(nv, \n                                                                      100*fc[-1], \n                                                                      vc['fair_catch'],                                                                      \n                                                                      fc[0]\/fc[-1]))\n    ","5e7f0513":"n = playsum.shape[0]\nnrun = 100\n\nfair_prob = {'2':[], '3':[], '4':[]}\nfor i in range(nrun):\n    pboot_ind = np.ceil(n * np.random.rand(n))\n    pboot = playsum.reindex(pboot_ind)\n\n    for nv in nvs:\n        pp = pboot.loc[(pboot.NumV==nv) & (pboot.NumG==2)]\n        vc = pp.End_Event.value_counts()\n        fair_prob[str(nv)].append(vc['fair_catch']\/sum(vc))        ","bdd2291b":"for nv1 in [2, 3]:\n    for nv2 in range(nv1+1, 5):\n        value, pvalue = ks_2samp(fair_prob[str(nv1)], fair_prob[str(nv2)])\n        print('{} vs {} jammers, fair catch probabilities are {:.3f} vs {:.3f}, bonferroni-corrected p-value = {:.4f}'.format(nv1,  nv2, \n                                                                             np.median(fair_prob[str(nv1)]), \n                                                                             np.median(fair_prob[str(nv2)]),                                                                              \n                                                                             3*pvalue))\n\n","50079c45":"fc = []\nfnvs = np.array(nvs)\nfnvs = fnvs[::-1]\n\nfor nv in fnvs:\n    fc.append(np.percentile(fair_prob[str(nv)], [0.005, 0.5, 0.995]))\n\nfc = np.array(fc)    \n\n# set font for figures\nfont = {'weight' : 'bold',\n        'size'   : 14}\npltrc('font', **font)\n\n# plot it\nplt.bar(fnvs, fc[:,1], yerr=np.diff(fc).T, align='center', alpha=0.3, width=0.35, color='blue')\nplt.xlim([1,5])\nplt.xticks(nvs, nvs)\nplt.ylabel('percentage of fair catch plays')\nplt.xlabel('number of jammers')\nplt.show()","5a6c6a86":"review = pd.read_csv(datapath+'video_review.csv')\nvideo = pd.read_csv(datapath+'video_footage-injury.csv')\n\nfc = pd.merge(playsum, review, left_on=['PlayID','GameKey'], right_on=['PlayID','GameKey'])\nv = fc.End_Event.value_counts()\ninj_faircatch = v['fair_catch']\/sum(v)\n\n# plotting\nfig, ax = plt.subplots()\nindex = np.array([1, 2])\nbar_width = 0.2\nopacity = 0.5\n\nrects1 = plt.bar(index, [prob_faircatch, inj_faircatch], bar_width,\n                alpha=opacity, color='b', label='fair_catch')\n\nrects2 = plt.bar(index+bar_width, [1-prob_faircatch, 1-inj_faircatch], bar_width,\n                alpha=opacity, color='g', label='others')\n\nplt.xticks(index+0.5*bar_width, ('all plays', 'injuried plays'))\nplt.ylabel('percentage of plays')\nplt.legend(loc=2)\nplt.xlim([0.5,2.75])","9a72200a":"fc = fc[(fc.End_Event=='fair_catch')]\nfc = pd.merge(fc, video, left_on=['PlayID','GameKey'], right_on=['playid','gamekey'])\n\npd.set_option('display.max_colwidth', -1)\nfc['PREVIEW LINK (5000K)']","12cfca5b":"There are some plays that don't have NGS data. So, how those plays ended were unknown.  Those plays are removed here.","552abea7":"Looping through all the NGS files and plays to extract the event of how a play ended","e1fd5075":"## Step 3. Test whether the number of jammers (V) has an effect on the percentage of fair catch plays\n\nPrint out the percentage of fair catch plays given 2, 3, or 4 jammers","7076d830":"Check whether the prepared data frame exists. If it does, then load it and skip data preparation steps.","03f34cbc":"Print out the percentage of how each play ended","4efd63f3":"Plot the percentage of plays and the risk of injury for fair catch vs other plays.","8ac86ce4":"Perform Kolmogorov-Smirnov two-sample test with Bonferroni Correction","70658ad8":"Bootstrap plays for 100 times to compute the probability of fair catch given a different number of jammers","741de4a6":"Add three columns to the play_information table: 'End_Event' is the event of how a play ended; 'NumV' is the number of jammers; 'NumG' is the number of gunners. ","a8b1fbca":"Overall 24.6% of the plays were fair catches.  First, we would like to see whether the number of gunners (G) has an effect on the percentage of fair catch plays. However, below shows that almost all the punt plays had only 2 gunners (99.1%), which makes other cases neglectable.  ","f7063d3c":"## Conclusion\nThis analysis suggests a way to decrease concussion for punt plays, which is to increase the probability of fair catch by allowing no more jammers than gunners.  By having two jammers against two gunners, the probability of a fair catch is 32.3%, which is **1.73 times** (32.3%\/18.7%) more likely that the play ends up by a fair catch comparing to having three jammers, and **2.36 times** (32.3%\/13.7%) more likely than using four jammers. In addition, note that while fair catch takes up 24.6% among all punt plays, there were only 8.1% (3 occurrences among 37 injuries) concussions that happened in a fair catch play.  From the videos (see above), two of the injuries occurred at the line of scrimmage, which could have happened in any type of plays; the other injury happened when the punt returner changed his mind to return the ball although he signaled fair catch in the first place.  If he had fair catch the ball, his injury could have been avoided.    **In summary, if the rule limits the number of jammers, it is a statistically significant way to increase the probability of fair catch, which would lead to less high-speed collisions, less concussion, and better player safety.**\n\n\n","2a1f2aec":"## Step 1. Determine how a play ended by NGS events \n\nBased on the NGS events, a punt play could end in the following ways: 'tackle', 'touchdown', 'touchback', 'fair_catch', 'punt_downed', 'out_of_bounds', 'out_of_bounds_direct' (punter punted the ball directly out of bounds),\n    and 'no_play' (e.g., false start, delay of game)\n\nThe first cell includes libraries and functions to be used later. ","20d1d70e":"Plot error bar graph","360f11ed":"[[OPTIONAL]] Three end events (no_play, out_of_bounds_direct, and touchback) could be excluded from the analysis because changing the number of V and G won't have an effect on these plays.  Uncomments the code if you want to exclude these plays.","ec151028":"## Step 2. Computes the number of jammers (V) and gunners (G) from play_player_role_data.csv","5a437849":"Show the videos of injuries that occurred in fair catch plays ","ba71056c":"# How to increase the probability of fair catch?\n\nFair catch eliminates tackling and reduces the need of blocking, which could reduce the likelihood of concussion.  To force a punt returner to fair catch, the gunners have to arrive where the punt returner is before he catches the ball.  Therefore, if there were fewer jammers, the gunners should be able to get to the punt returner faster. To test the idea, the null hypothesis is the number of jammers has no effect on the percentage of fair catch plays.\n\nHere is the summary of steps to test the hypothesis. First, I determined how each play ended from NGS events.  Second, the number of jammers and gunners were computed from the positions of players for each punt plays.  Lastly, I bootstrapped the trials 100 times to compute the probability of fair catch plays given 2, 3, and 4 jammers, and performed two-sample Kolmogorov-Smirnov Tests to see whether the probabilities were significantly different. They were indeed different and the null hypothesis was rejected.  This result suggested that the fewer the jammers, the higher the likelihood of a fair catch play.  Because fair catch plays reduce the need for collision, the likelihood of a concussion is also decreased."}}