{"cell_type":{"01e0e6cc":"code","b2140bba":"code","2a4f27a9":"code","f55a3bbd":"code","e23fae97":"code","a108f3f1":"code","8bc699ea":"code","54656c13":"code","ad38dde1":"code","03242eda":"code","1c1d6f1e":"code","537d47ca":"code","78708d17":"code","a43d126a":"code","b07f73e1":"code","967b35be":"code","3e50e61b":"code","01baa672":"code","56160bf0":"code","242e12fe":"code","e4263383":"code","3d1372c0":"code","e0fc7cca":"code","e1e1ced9":"code","fb7b78a7":"code","6728b202":"code","a19f0262":"code","825c7dc5":"code","9fea19bb":"code","14ec46ec":"code","e1dc8fb1":"code","b1956d90":"code","be4d1ecd":"code","a8dbe68d":"code","e3d0d239":"code","11af6c4e":"code","f7746121":"code","1e6ae9d8":"code","9569e5b5":"code","ed66ae96":"code","d4f42e5e":"code","61dc0000":"code","73432fc0":"code","d394a3f5":"code","d5b14a0e":"code","ee543e8b":"code","56e7fd88":"code","9995f16d":"code","5054f6a8":"code","5e32711a":"code","0a705cdf":"code","86fae4b3":"code","bd29e14f":"code","dba37aef":"code","493d6d55":"code","cf3c882f":"code","0f6ebc6b":"code","c6417010":"code","de821e7f":"code","1cf82838":"code","82ae1433":"code","f6b37eb8":"code","1ed0c645":"code","28f27ddb":"code","2e6181f7":"code","282d560c":"code","b0585d09":"code","341f2115":"code","7780a8d0":"code","4387ce24":"code","c2aa6576":"code","bb16342c":"code","22bb6905":"code","a530141e":"code","cec829c4":"markdown","ce510c96":"markdown","e7f805e6":"markdown","eb4e7714":"markdown","68518cb5":"markdown","4c819cf4":"markdown","471676aa":"markdown","79816162":"markdown","cfae3f32":"markdown","1aec4b19":"markdown","5267baeb":"markdown","2c03ae46":"markdown","fe759b6c":"markdown","e66784a9":"markdown"},"source":{"01e0e6cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2140bba":"data=pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\ndata.head(10)","2a4f27a9":"#Taking some information about the data of athletes\ndata.info()","f55a3bbd":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Height.plot(kind = 'line', color = 'g',label = ' Height ',linewidth=1,alpha = 0.5,grid = True,linestyle = '-')\ndata.Weight.plot(color = 'r',label = ' Weight ',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('ID of the athletes')              # label = name of label\nplt.ylabel('cm')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","e23fae97":"# Scatter Plot \n# x = Height, y = Weight\ndata.plot(kind='scatter', x='Height', y='Weight',alpha = 0.5,color = 'red')\nplt.xlabel('Height')              # label = name of label\nplt.ylabel('Weight')\nplt.title(' Height Weight Scatter Plot')            # title = title of plot\nplt.show()","a108f3f1":"#Histogram graph of age of athletes\ndata.Age.plot(kind='hist',bins=50,figsize = (7,7),color = 'red')\nplt.xlabel('Age')              \nplt.ylabel('Amount')\nplt.title(' The age of the athletes') \nplt.show()","8bc699ea":"#the filter1 shows the athletes who are older than 20.\nfilter1 = data['Age']>20    \ndata[filter1]\n","54656c13":"#the filter2 shows the athletes who are older than 20 and have gold medals.\nfilter2 =np.logical_and(data['Age']>20, data['Medal']=='Gold')\ndata[filter2]\n","ad38dde1":"data=pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\ndata.head()  # head shows first 5 rows","03242eda":"data.tail()  # tail shows first 5 rows","1c1d6f1e":"data.shape\ndata.info()","537d47ca":"print(data['Name'].value_counts(dropna =True)) #dropna is for counting NaN values  ","78708d17":"data.describe()#which gives the infos of features","a43d126a":"data.boxplot(column='Weight',by = 'Age')","b07f73e1":"mydata=data.head()\nmydata","967b35be":"melted_mydata=pd.melt(frame=mydata,id_vars=['ID'],value_vars=['City','Year','Sport','Name'])\nmelted_mydata","3e50e61b":"melted_mydata.pivot(index = 'ID', columns = 'variable',values='value')","01baa672":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail(3)\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True)#ignor index varsa alt alta indexler yoksa olduu gibi al\u0131r\nconc_data_row","56160bf0":"data1 = data['Sport'].head()\ndata2= data['Name'].head()\n\n#data1\n\nconc_data_col = pd.concat([data1,data2],axis =1) # axis = 1 : adds dataframes in column\n#conc_data_col","242e12fe":"data.dtypes","e4263383":"#convertig data types\ndata['Sex'] = data['Sex'].astype('category')\ndata['Year'] = data['Year'].astype('float')\ndata.dtypes","3d1372c0":"data.info()","e0fc7cca":"data[\"Name\"].value_counts(dropna =False)#this function counts same values ","e1e1ced9":"data[\"Height\"].value_counts(dropna =False)","fb7b78a7":"data1=data\n#data1['Height'].dropna(inplace=True)\n#assert 1==2 \n#assert  data1['Height'].notnull().all()\ndata1[\"Height\"].fillna('empty',inplace =  True)#changing non values to another ,inplace demek non valueleri ototmatik doldurur demektir\nassert  data1['Height'].notnull().all()#checks critical logics\ndata1","6728b202":"country = [\"Spain\",\"France\",\"Italy\"]\npopulation = [\"11\",\"12\",\"13\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","a19f0262":"#add new coulmns\ndf[\"capital\"]=[\"madrid\",\"paris\",\"rome\"]\ndf","825c7dc5":"df[\"coronatime\"]=[250,200,300]\ndf","9fea19bb":"df.info()\ndf['population']=df['population'].astype(int)","14ec46ec":"df.info()\n","e1dc8fb1":"data=pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\ndata1=data.loc[1:1000,[\"Age\",\"Height\",\"Weight\"]]\ndata1.plot()","b1956d90":"data1.plot(subplots = True)\nplt.show()","be4d1ecd":"data1.plot(kind = \"scatter\",x=\"Height\",y = \"Weight\")\nplt.show()","a8dbe68d":"data1.plot(kind=\"hist\",y = \"Weight\",bins=100,range=(50,150))\nplt.show()","e3d0d239":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Height\",bins = 100,range= (120,220),ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Weight\",bins = 100,range= (50,150),ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","11af6c4e":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))\n","f7746121":"import warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of athlete data and add it a time list\ndata2 = data.head(6)\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\",\"1995-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","1e6ae9d8":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-5\":\"1993-03-16\"])","9569e5b5":"data2.resample(\"A\").mean()#\"M\" = month or \"A\" = year","ed66ae96":"data2.resample(\"M\").mean()","d4f42e5e":"data2.resample(\"M\").first().interpolate(\"linear\")\n#note that no sample on 1994 but it takes the mean of the prev and next year.","61dc0000":"data2.resample(\"A\").mean().interpolate(\"linear\")","73432fc0":"data=pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\n\ndata.head()\n","d394a3f5":"data= data.set_index(\"ID\")\ndata.head()","d5b14a0e":"data[\"Team\"][1]","ee543e8b":"# using column attribute and row label\ndata.Team[1]","56e7fd88":"# using loc accessor\ndata.loc[1,[\"Team\"]]\n","9995f16d":"data[[\"Name\",\"Team\"]]","5054f6a8":"# Difference between selecting columns: series and dataframes\nprint(type(data[\"Height\"]))     # series\nprint(type(data[[\"Height\"]]))   # data frames","5e32711a":"# Slicing and indexing series\ndata.loc[1:10,\"Name\":\"City\"]   # 10 and \"City\" are inclusive","0a705cdf":"data.loc[10:1:-1,\"Name\":\"City\"]   # 10 and \"City\" are inclusive","86fae4b3":"boolean = data.Height > 160\ndata[boolean]","bd29e14f":"# Combining filters\nfirst_filter = data.Height > 160\nsecond_filter = data.Weight > 80\ndata[first_filter & second_filter]","dba37aef":"# Filtering column based others\ndata.Height[data.Weight<80]","493d6d55":"def div(n):\n    return n\/2\ndata.Height.apply(div)","cf3c882f":"# Or we can use lambda function\ndata.Height.apply(lambda n : n\/2)","0f6ebc6b":"# Defining column using other columns\ndata[\"strenght\"] = data.Height*data.Weight\/100\ndata.head()","c6417010":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","de821e7f":"# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata3 = data.head(800)\n# lets make index start from 100. It is not remarkable change but it is just example\ndata3.index = range(100,900,1)\ndata3.index.name = \"index_name\"\ndata3.head(10)\n","1cf82838":"data = pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\ndata.head()","82ae1433":"data1=data.set_index([\"Name\",\"ID\"])\ndata1.head(50)","f6b37eb8":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"disease\":[\"Corona\",\"Flue\",\"Corona\",\"Flue\"],\"# of death\":[10,45,5,9],\"# of recovery\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","1ed0c645":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"disease\",values=\"# of death\")","28f27ddb":"df1 = df.set_index([\"treatment\",\"disease\"])\ndf1","2e6181f7":"df1.unstack(level=0)","282d560c":"df1.unstack(level=1)","b0585d09":"df2 = df1.swaplevel(0,1)\ndf2","341f2115":"df","7780a8d0":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"# of death\",\"# of recovery\"])","4387ce24":"df\n","c2aa6576":"# according to treatment take means of other features\ndf.groupby(\"treatment\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","bb16342c":"df.rename(columns={'# of death':'#_of_death','# of recovery':'#_of_recovery'}, \n                 inplace=True)\ndf.groupby(\"treatment\")['#_of_death'].max()#or \n# df.groupby(\"treatment\").#_of_death.max() not work because of # sign which is for comments\n\n","22bb6905":"df_4=df.groupby(\"treatment\")[[\"#_of_death\",\"#_of_recovery\"]].min() \ndf_4","a530141e":"df.info()","cec829c4":"**BUILDING DATA FRAMES FROM SCRATCH**\n","ce510c96":"**FILTERING DATA FRAMES\n**","e7f805e6":"**STACKING and UNSTACKING DATAFRAME\u00b6\n**","eb4e7714":"**STATISTICAL EXPLORATORY DATA ANALYSIS**","68518cb5":"**HIERARCHICAL INDEXING\n**","4c819cf4":"**datatypes **","471676aa":"\n**RESAMPLING PANDAS TIME SERIES**","79816162":"**\nMANIPULATING DATA FRAMES WITH PANDAS\n\n\nINDEXING DATA FRAME**","cfae3f32":"**second part**","1aec4b19":"**MELTING DATA FRAMES\u00b6\n **","5267baeb":"**VISUAL EXPLORATORY DATA ANALYSIS**","2c03ae46":"**TRANSFORMING DATA\n**","fe759b6c":"**CATEGORICALS AND GROUPBY\n**","e66784a9":"**Pivoting Data Frames**"}}