{"cell_type":{"28a681eb":"code","1e27b56a":"code","d0070d66":"code","77d38efa":"code","f793757d":"code","0ec6a53f":"code","d756d454":"code","f7404e1c":"code","3a036b53":"code","ec91bb72":"code","7f2fc420":"code","39a0285f":"code","4c50edf5":"code","1f5e1229":"code","fdace22f":"code","bca61aef":"code","b4e9a096":"code","171b0624":"code","6a544f1c":"code","758a72e2":"code","4934ce74":"code","104e1e10":"code","ce3df4a6":"code","687ba8e1":"code","7200a865":"code","d69528b9":"code","d25f8dbd":"code","13b2f06e":"code","3986cd29":"code","b263c4fc":"code","aefe4bf6":"code","e07204f9":"code","be0ad115":"code","1468ba72":"code","cfe2e166":"code","280de5dc":"code","d5db5e14":"code","63107841":"code","e29e435e":"code","47988ce6":"code","f4dc00eb":"code","43abe646":"code","cee0415f":"code","bcf65a77":"code","329911a5":"code","00c66b46":"code","f3a32020":"code","ecbe7ffa":"code","14a46677":"code","ab6f1f78":"code","0e702925":"code","52f18f49":"code","0c53236d":"code","ffe77f20":"code","b70d5042":"code","74318a64":"code","14bae02a":"code","b78ea503":"markdown","86ff65d4":"markdown","da9bd604":"markdown","a97ccd49":"markdown","ed512b10":"markdown","307b95cf":"markdown","fafcebc2":"markdown","517ed91f":"markdown","2f25decb":"markdown","704ae6a6":"markdown","a68d2f46":"markdown","c3b59c61":"markdown","f66a2045":"markdown"},"source":{"28a681eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \nfrom subprocess import check_output             # utf-8 e uygun olup olmadigini arastirmak icin bunu aratiyoruz\nprint(check_output([\"ls\",\"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","1e27b56a":"data = pd.read_csv('..\/input\/titanic-cleaned-data\/train_clean.csv')\ndata.info()\n                ","d0070d66":"data.head()","77d38efa":"data.Age.value_counts()","f793757d":"data.PassengerId.unique()","0ec6a53f":"PassengerId_list = list(data['PassengerId'].head(30).unique())\n# print(PassengerId_list)\n\nAge_ratio = []\nfor i in PassengerId_list:\n    x = data[data['PassengerId']==i]\n    Age_rate = sum(x.Age)\/len(x)\n    Age_ratio.append(Age_rate)\ndata2 = pd.DataFrame({'PassengerId_list': PassengerId_list,'Age_ratio':Age_ratio})\n\n\n# Duzenlenen datayi yeniden index lememiz gerekiyor ki duzenli gorunsun!!! Bunun icin:\n\nnew_index = (data2['Age_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data2.reindex(new_index)\n","d756d454":"\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['PassengerId_list'], y=sorted_data['Age_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('PassengerId')\nplt.ylabel('Ages')\nplt.title('Age Given PassengerId_list')","f7404e1c":"data.head()","3a036b53":"data.Name.value_counts()","ec91bb72":"separate = data.Name[data.Name != 'TK TK'].str.split() \na,b,c = zip(*separate)\n# print(separate)\nname_list = a+b+c \nprint(name_list)","7f2fc420":"name_count = Counter(name_list)\nprint(name_count)\nmost_common_names = name_count.most_common(15)  \nx,y = zip(*most_common_names)\nx,y = list(x),list(y)","39a0285f":"# PLOT unu cizelim\n\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of Titanic people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of Titanic people')\nprint(most_common_names)","4c50edf5":"# PassengerId_list = list(data['PassengerId'].head(30).unique())\n# print(PassengerId_list)\n\nFare_ratio = []\nfor i in PassengerId_list:\n    x = data[data['PassengerId']==i]\n    Fare_rate = sum(x.Fare)\/len(x)\n    Fare_ratio.append(Fare_rate)\ndata3 = pd.DataFrame({'PassengerId_list': PassengerId_list,'Fare_ratio':Fare_ratio})\n\n\n# Duzenlenen datayi yeniden index lememiz gerekiyor ki duzenli gorunsun!!! Bunun icin:\n\nnew_index = (data3['Fare_ratio'].sort_values(ascending=False)).index.values\nsorted_data2 = data3.reindex(new_index)","1f5e1229":"# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['PassengerId_list'], y=sorted_data2['Fare_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('PassengerId')\nplt.ylabel('Fare')\nplt.title('Fare Given PassengerId_list')","fdace22f":"data.head()","bca61aef":"PassengerId_list = list(data['PassengerId'].unique())\nAge = []\nFare = []\nPclass = []\nFamily_Size = []\n\nfor i in PassengerId_list:\n    x = data[data['PassengerId']==i]\n    Age.append(sum(x.Age)\/len(x))\n    Fare.append(sum(x.Fare) \/ len(x))\n    Pclass.append(sum(x.Pclass) \/ len(x))\n    Family_Size.append(sum(x.Family_Size) \/ len(x))\n   ","b4e9a096":"# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=Age,y=PassengerId_list,color='green',alpha = 0.5,label='Age' )\nsns.barplot(x=Fare,y=PassengerId_list,color='blue',alpha = 0.7,label='Fare')\nsns.barplot(x=Pclass,y=PassengerId_list,color='cyan',alpha = 0.6,label='Passenger class')\nsns.barplot(x=Family_Size,y=PassengerId_list,color='red',alpha = 0.6,label='Family_Size')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Passengers', ylabel='Passengers',title = \"Percentage of Passengers According to Fare,Class \")","171b0624":"sorted_data['Age_ratio'] = sorted_data['Age_ratio']\/max( sorted_data['Age_ratio'])\nsorted_data2['Fare_ratio'] = sorted_data2['Fare_ratio']\/max( sorted_data2['Fare_ratio'])\ndata4 = pd.concat([sorted_data,sorted_data2['Fare_ratio']],axis=1)\ndata4.sort_values('Age_ratio',inplace=True)","6a544f1c":"# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='PassengerId_list',y='Fare_ratio',data=data4,color='lime',alpha=0.8)\nsns.pointplot(x='PassengerId_list',y='Age_ratio',data=data4,color='red',alpha=0.8)\nplt.text(25,1,'PassengerId_list',color='red',fontsize = 17,style = 'italic')   # burdaki degerler yazilarin konumlari istedigimiz gibi degistirebiliriz\nplt.text(25,0.95,'Fare_ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('Age_ratio  VS  Fare_ratio',fontsize = 20,color='blue')\nplt.grid()","758a72e2":"g = sns.jointplot(data4.Fare_ratio, data4.Age_ratio, kind=\"kde\", size=7)\nplt.savefig('graph.png')                          # bu bize sekilleri kaydetmemizi saglar\nplt.show()","4934ce74":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\n\ng = sns.jointplot(\"Fare_ratio\", \"Age_ratio\", data=data4,size=5, ratio=3, color=\"r\")","104e1e10":"data.head()","ce3df4a6":"data.Pclass.dropna(inplace = True)\nlabels = data.Pclass.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = data.Pclass.value_counts().values","687ba8e1":"# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=None, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Titanic People According to Class',color = 'blue',fontsize = 15)","7200a865":"data4.head()","d69528b9":"sns.lmplot(x=\"Fare_ratio\", y=\"Age_ratio\", data=data4)\nplt.show()","d25f8dbd":"sns.kdeplot(data4.Fare_ratio, data4.Age_ratio, shade=True, cut=3)      # burada 'cut' sekil arasi genisligi verir\nplt.show()","13b2f06e":"pal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","3986cd29":"data4.corr()","b263c4fc":"f,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(data4.corr(), annot=True, linewidths=.5, fmt='.1f', ax=ax)\nplt.show()                   \n#annot tells whether to show the numbers inside the box\n#fmt . returns values after","aefe4bf6":"# pair plot\nsns.pairplot(data4)\nplt.show()","e07204f9":"sns.countplot(data.Age.head())\n#sns.countplot(kill.manner_of_death)                 # if you want you can draw seperately\nplt.title(\"Fare according to Age\",color = 'blue',fontsize=15)","be0ad115":"data.head(10)","1468ba72":"# lets see data columns\n\ndata.columns","cfe2e166":"data.Age.plot(kind= 'line', color= 'b', label= 'Age', linewidth= 2, alpha= 0.5, grid= True, linestyle= '-')\ndata.Fare.plot(color= 'r', label= 'Fare', linewidth= 2, alpha= 0.5, grid= True, linestyle= '-.')\nplt.legend(loc= 'upper right')          #legend= puts label into plot\nplt.xlabel('x axis')                    #label= name of label\nplt.ylabel('y axis')                    #label= name of label\nplt.title('Line Plot')                  #title= title of plot\nplt.show()","280de5dc":"data.plot(kind = 'scatter', x = 'Age', y= 'Fare', alpha = 0.5, color = 'red')\nplt.xlabel('Age')\nplt.ylabel('Fare')\nplt.title('Age & Fare Scatter Plot')\nplt.show()","d5db5e14":"data.Age.plot(kind = 'hist',bins = 70, figsize = (12,12))\nplt.show()","63107841":"data.Age.plot(kind = 'hist',bins = 50)\nplt.clf()  ","e29e435e":"data = pd.read_csv('..\/input\/titanic-cleaned-data\/test_clean.csv')\nseries = data['Age']                           \nprint(type(series))     \ndata_frame = data[['Fare']]  \nprint(type(data_frame))","47988ce6":"x = data['Age'] < 20                           # Defans de\u011feri 200'den b\u00fcy\u00fck olan verileri x de\u011fi\u015fkenine at\u0131yoruz.\nprint(x)                                       # bu sekilde true false olanlarin hepsini gosterir\ndata[x]                                        # sinirlama yapilan hangi pokemonlar ve ozelliklerini verir","f4dc00eb":"data[np.logical_and(data['Age'] < 20, data['Fare'] > 100.000 )] \n\n# It is used when the logical and function is required to be provided in two conditions.\n# here we say that the defense value is greater than 200 and at the same time the attack value is greater than 100.","43abe646":"# The following structure can be used as an alternative to the logical and function.\n\ndata[(data['Age'] < 20) & (data['Fare'] > 100.000 )]","cee0415f":"threshold = sum(data.Age)\/len(data.Age)\ndata[\"old_situation\"] = [\"old\" if i > threshold else \"young\" for i in data.Age]\ndata.loc[:10,[\"old_situation\",\"Age\"]]","bcf65a77":"data.info()","329911a5":"data.describe()","00c66b46":"# data.dropna(inplace = True)  \n# data.describe()\n\n# Since there is no empty space here, the description according to the blanks is empty.","f3a32020":"# For example: compare Family_Size with fare are high or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\n\ndata.boxplot(column='Fare',by = 'Family_Size')","ecbe7ffa":"data_new = data.head()    # I only take 5 rows into new data\ndata_new","14a46677":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\n\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Sex','Title'])\nmelted","ab6f1f78":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\n\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","0e702925":"# Firstly lets create 2 data frame\n\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True)     # axis = 0 : adds dataframes in row\nconc_data_row","52f18f49":"data3 = data['Name'].head()\ndata1 = data['Sex'].head()\ndata2= data['Title'].head()\nconc_data_col = pd.concat([data3,data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","0c53236d":"data.dtypes","ffe77f20":"data.Sex.unique()","b70d5042":"data.head()","74318a64":"# Plot the orbital period with horizontal boxes\n\nsns.boxplot(x=\"old_situation\", y=\"Fare\", hue=\"Sex\", data=data, palette=\"PuOr\")\nplt.show()","14bae02a":"sns.swarmplot(x=\"old_situation\", y=\"Fare\",hue=\"Sex\", data=data)\nplt.show()","b78ea503":"# Count Plot","86ff65d4":"# Box Plot","da9bd604":"# Swarm Plot","a97ccd49":"![1559046955228.jpg](attachment:14d6ff45-a500-4696-a4c9-923abc7a1cce.jpg)","ed512b10":"# Pair Plot","307b95cf":"### The data series here extends as vectors and are one-dimensional structures.","fafcebc2":"# Lm Plot","517ed91f":"# Kde Plot","2f25decb":"# Violin Plot","704ae6a6":"Note:\n\n    After this notebook, my aim is to prepare 'kernel' which is 'not clear' data set.\n\n    If you have any suggestions, please could you write for me? I wil be happy for comment and critics!\n\n    Thank you for your suggestion and votes ;)\n","a68d2f46":"# Heatmap","c3b59c61":"There are a lot of different model applications and evaluations based on accuracy scores on Titanic! What I am trying to do here is to examine the variables in general and make comments on them. Those who want to add, copy the kernel and work on it, so we examine a dataset together.","f66a2045":" # Pie Chart"}}