{"cell_type":{"90035f26":"code","6e5d357c":"code","03afa04b":"code","60d01fd0":"code","78057340":"code","90ed1c71":"code","84f42638":"code","b5957bb7":"code","a237ccc8":"code","793a5334":"code","a6e27f9b":"code","af516d32":"code","d9f7f385":"code","d49eedc2":"code","b4b69a3a":"code","711076df":"code","ad930d43":"code","c27e0966":"code","966fc814":"code","903f5e6c":"code","3571b822":"code","60a5f39a":"code","8b1fc7ff":"code","6783a406":"code","72beba3e":"code","aea4e839":"code","2818169a":"markdown","0cefd808":"markdown","91ae080a":"markdown","ff975e01":"markdown","7bcae418":"markdown"},"source":{"90035f26":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport warnings \nwarnings.filterwarnings('ignore')\nprint(os.listdir(\"..\/input\"))","6e5d357c":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","03afa04b":"print(f\" train.shape = {train.shape} \\n test.shape = {test.shape}\\n\")","60d01fd0":"# for i in train.select_dtypes(include='object'):\n#          print(f\"{i} \\n {train[i].value_counts().to_frame()} \\n\")","78057340":"# Log transform the target for scoring\ntrain.SalePrice = np.log1p(train.SalePrice)\ny = train.SalePrice","90ed1c71":"len(set(train['Id'] + test['Id'])) == len(train['Id'] + test['Id'])","84f42638":"data = pd.concat([train.loc[:,'SalePrice' != train.columns], test.loc[:,:]], axis=0)","b5957bb7":"# cols = ['MSSubClass','MSZoning','LotArea','OverallCond','LotConfig','PoolArea','PoolQC','Fence','MiscFeature','MiscVal','SaleType','SaleCondition','SalePrice','Street','Alley','LotShape','LandContour',\n#         'Utilities','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','OverallQual','YearBuilt','YearRemodAdd','Exterior1st','Foundation']\n# cols_obj = train[cols].select_dtypes(include='object')\n# cols_num = train[cols].select_dtypes(exclude='object')\n# for col in cols_obj.columns:\n#     sns.catplot(x=col, y=\"SalePrice\", data=train, kind='box')\n#     plt.show()\n\n# for col in cols_num.columns:\n#     sns.regplot(x=col, y=\"SalePrice\", data=train)\n#     plt.show()\n","a237ccc8":"length = len(list(filter(lambda x: x>0, train.isnull().sum())))\nprint(length, 'variables have missing values in train set')\nprint(train.isnull().sum().sort_values(ascending=False)[:length])\n\nlength = len(list(filter(lambda x: x>0, test.isnull().sum())))\nprint(length, 'variables have missing values in test set')\nprint(test.isnull().sum().sort_values(ascending=False)[:length])","793a5334":"data = data.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'], axis=1 )\n# BsmtQual etc : data description says NA for basement features is \"no basement\"\ndata.loc[:, \"BsmtQual\"] = data.loc[:, \"BsmtQual\"].fillna(\"No\")\ndata.loc[:, \"BsmtCond\"] = data.loc[:, \"BsmtCond\"].fillna(\"No\")\ndata.loc[:, \"BsmtExposure\"] = data.loc[:, \"BsmtExposure\"].fillna(\"No\")\ndata.loc[:, \"BsmtFinType1\"] = data.loc[:, \"BsmtFinType1\"].fillna(\"No\")\ndata.loc[:, \"BsmtFinType2\"] = data.loc[:, \"BsmtFinType2\"].fillna(\"No\")\ndata.loc[:, \"BsmtFullBath\"] = data.loc[:, \"BsmtFullBath\"].fillna(0)\ndata.loc[:, \"BsmtHalfBath\"] = data.loc[:, \"BsmtHalfBath\"].fillna(0)\ndata.loc[:, \"BsmtUnfSF\"] = data.loc[:, \"BsmtUnfSF\"].fillna(0)\n# Electrical : NA can be most frequent value\nmost_frequent = data.loc[:,\"Electrical\"].value_counts().index[0]\ndata.loc[:,\"Electrical\"] = data.loc[:, \"Electrical\"].fillna(most_frequent)\n# Functional : data description says NA means typical\ndata.loc[:, \"Functional\"] = data.loc[:, \"Functional\"].fillna(\"Typ\")\n# GarageType etc : data description says NA for garage features is \"no garage\"\ndata.loc[:, \"GarageType\"] = data.loc[:, \"GarageType\"].fillna(\"No\")\ndata.loc[:, \"GarageFinish\"] = data.loc[:, \"GarageFinish\"].fillna(\"No\")\ndata.loc[:, \"GarageQual\"] = data.loc[:, \"GarageQual\"].fillna(\"No\")\ndata.loc[:, \"GarageCond\"] = data.loc[:, \"GarageCond\"].fillna(\"No\")\ndata.loc[:, \"GarageArea\"] = data.loc[:, \"GarageArea\"].fillna(0)\ndata.loc[:, \"GarageCars\"] = data.loc[:, \"GarageCars\"].fillna(0)\n# KitchenQual : NA most likely means typical\ndata.loc[:, \"KitchenQual\"] = data.loc[:, \"KitchenQual\"].fillna(\"TA\")\n# LotFrontage : NA most likely means no lot frontage\ndata.loc[:, \"LotFrontage\"] = data.loc[:, \"LotFrontage\"].fillna(0)\n# MasVnrType : NA most likely means no veneer\ndata.loc[:, \"MasVnrType\"] = data.loc[:, \"MasVnrType\"].fillna(\"None\")\ndata.loc[:, \"MasVnrArea\"] = data.loc[:, \"MasVnrArea\"].fillna(0)","a6e27f9b":"data = data.replace({\"Alley\" : {\"Grvl\" : 1, \"Pave\" : 2},\n                       \"BsmtCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"BsmtExposure\" : {\"No\" : 0, \"Mn\" : 1, \"Av\": 2, \"Gd\" : 3},\n                       \"BsmtFinType1\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtFinType2\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"ExterCond\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"ExterQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"FireplaceQu\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"Functional\" : {\"Sal\" : 1, \"Sev\" : 2, \"Maj2\" : 3, \"Maj1\" : 4, \"Mod\": 5, \n                                       \"Min2\" : 6, \"Min1\" : 7, \"Typ\" : 8},\n                       \"GarageCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"HeatingQC\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"KitchenQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"LandSlope\" : {\"Sev\" : 1, \"Mod\" : 2, \"Gtl\" : 3},\n                       \"LotShape\" : {\"IR3\" : 1, \"IR2\" : 2, \"IR1\" : 3, \"Reg\" : 4},\n                       \"PavedDrive\" : {\"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                       \"PoolQC\" : {\"No\" : 0, \"Fa\" : 1, \"TA\" : 2, \"Gd\" : 3, \"Ex\" : 4},\n                       \"Street\" : {\"Grvl\" : 1, \"Pave\" : 2},\n                       \"Utilities\" : {\"ELO\" : 1, \"NoSeWa\" : 2, \"NoSewr\" : 3, \"AllPub\" : 4}}\n                     )","af516d32":"data[\"SimplOverallQual\"] = data.OverallQual.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                       4 : 2, 5 : 2, 6 : 2, # average\n                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                      })\ndata[\"SimplOverallCond\"] = data.OverallCond.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                       4 : 2, 5 : 2, 6 : 2, # average\n                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                      })\ndata[\"SimplGarageCond\"] = data.GarageCond.replace({1 : 1, # bad\n                                                      2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\ndata[\"SimplGarageQual\"] = data.GarageQual.replace({1 : 1, # bad\n                                                     2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\ndata[\"SimplFunctional\"] = data.Functional.replace({1 : 1, 2 : 1, # bad\n                                                     3 : 2, 4 : 2, # major\n                                                     5 : 3, 6 : 3, 7 : 3, # minor\n                                                     8 : 4 # typical\n                                                    })\ndata[\"SimplKitchenQual\"] = data.KitchenQual.replace({1 : 1, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\ndata[\"SimplHeatingQC\"] = data.HeatingQC.replace({1 : 1, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                    4 : 2, 5 : 2 # good\n                                                  })\ndata[\"SimplBsmtFinType1\"] = data.BsmtFinType1.replace({1 : 1, # unfinished\n                                                         2 : 1, 3 : 1, # rec room\n                                                         4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                        })\ndata[\"SimplBsmtFinType2\"] = data.BsmtFinType2.replace({1 : 1, # unfinished\n                                                         2 : 1, 3 : 1, # rec room\n                                                         4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                        })\ndata[\"SimplBsmtCond\"] = data.BsmtCond.replace({1 : 1, # bad\n                                                 2 : 1, 3 : 1, # average\n                                                 4 : 2, 5 : 2 # good\n                                                })\ndata[\"SimplBsmtQual\"] = data.BsmtQual.replace({1 : 1, # bad\n                                                 2 : 1, 3 : 1, # average\n                                                 4 : 2, 5 : 2 # good\n                                                })\ndata[\"SimplExterCond\"] = data.ExterCond.replace({1 : 1, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\ndata[\"SimplExterQual\"] = data.ExterQual.replace({1 : 1, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })","d9f7f385":"data[\"OverallGrade\"] = data[\"OverallQual\"] * data[\"OverallCond\"]\n# Overall quality of the garage\ndata[\"GarageGrade\"] = data[\"GarageQual\"] * data[\"GarageCond\"]\n# Overall quality of the exterior\ndata[\"ExterGrade\"] = data[\"ExterQual\"] * data[\"ExterCond\"]\n# Overall kitchen score\ndata[\"KitchenScore\"] = data[\"KitchenAbvGr\"] * data[\"KitchenQual\"]\n# Overall garage score\ndata[\"GarageScore\"] = data[\"GarageArea\"] * data[\"GarageQual\"]\n# Simplified overall quality of the house\ndata[\"SimplOverallGrade\"] = data[\"SimplOverallQual\"] * data[\"SimplOverallCond\"]\n# Simplified overall quality of the exterior\ndata[\"SimplExterGrade\"] = data[\"SimplExterQual\"] * data[\"SimplExterCond\"]\n# Simplified overall garage score\ndata[\"SimplGarageScore\"] = data[\"GarageArea\"] * data[\"SimplGarageQual\"]\n# Simplified overall kitchen score\ndata[\"SimplKitchenScore\"] = data[\"KitchenAbvGr\"] * data[\"SimplKitchenQual\"]\n# Total number of bathrooms\ndata[\"TotalBath\"] = data[\"BsmtFullBath\"] + (0.5 * data[\"BsmtHalfBath\"]) + \\\ndata[\"FullBath\"] + (0.5 * data[\"HalfBath\"])\n# Total SF for house (incl. basement)\ndata[\"AllSF\"] = data[\"GrLivArea\"] + data[\"TotalBsmtSF\"]\n# Total SF for 1st + 2nd floors\ndata[\"AllFlrsSF\"] = data[\"1stFlrSF\"] + data[\"2ndFlrSF\"]\n# Total SF for porch\ndata[\"AllPorchSF\"] = data[\"OpenPorchSF\"] + data[\"EnclosedPorch\"] + \\\ndata[\"3SsnPorch\"] + data[\"ScreenPorch\"]\n# Has masonry veneer or not\ndata[\"HasMasVnr\"] = data.MasVnrType.replace({\"BrkCmn\" : 1, \"BrkFace\" : 1, \"CBlock\" : 1, \n                                               \"Stone\" : 1, \"None\" : 0})\n# House completed before sale or not\ndata[\"BoughtOffPlan\"] = data.SaleCondition.replace({\"Abnorml\" : 0, \"Alloca\" : 0, \"AdjLand\" : 0, \n                                                      \"Family\" : 0, \"Normal\" : 0, \"Partial\" : 1})","d49eedc2":"train = pd.concat([data.iloc[:train.shape[0],:], train['SalePrice']], axis=1) \ntest = data.iloc[train.shape[0]:, :]","b4b69a3a":"plt.figure(figsize=(20,20))\nsns.heatmap(train.corr())","711076df":"categorical_features = data.select_dtypes(include = [\"object\"]).columns\nnumerical_features = data.select_dtypes(exclude = [\"object\"]).columns\nprint(\"Numerical features : \" + str(len(numerical_features)))\nprint(\"Categorical features : \" + str(len(categorical_features)))","ad930d43":"print(\"NAs for numerical features in train : \", train[numerical_features].isnull().values.sum(), test[numerical_features].isnull().values.sum())\ntrain[numerical_features] = train[numerical_features].fillna(train.median())\ntest[numerical_features] = test[numerical_features].fillna(train.median())\nprint(\"Remaining NAs for numerical features in train & test: \",train[numerical_features].isnull().values.sum(),train[numerical_features].isnull().values.sum())","c27e0966":"from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\ntrain.loc[:,categorical_features] = imp.fit_transform(train.loc[:,categorical_features])\ntest.loc[:,categorical_features] = imp.transform(test.loc[:,categorical_features])","966fc814":"from scipy.stats import skew\nskewness = train.loc[:,numerical_features].apply(lambda x: skew(x))\nskewness = skewness[abs(skewness) > 0.5]\nprint(str(skewness.shape[0]) + \" skewed numerical features to log transform\")","903f5e6c":"skewness = train.loc[:,numerical_features].apply(lambda x: skew(x))\npskewed = skewness[skewness > 0.5 ]\nnskewed = skewness[skewness < -0.5 ]\nprint(pskewed.shape[0], nskewed.shape[0])","3571b822":"train.loc[:, pskewed.index] = np.log1p(train.loc[:, pskewed.index])\ntrain.loc[:, nskewed.index] = np.log1p(train.loc[:, nskewed.index])\n#train.loc[:, nskewed.index] = np.exp(train.loc[:, nskewed.index])\ntest.loc[:, pskewed.index] = np.log1p(test.loc[:, pskewed.index])\ntest.loc[:, nskewed.index] = np.log1p(test.loc[:, nskewed.index])\n#test.loc[:, nskewed.index] = np.exp(test.loc[:, nskewed.index])","60a5f39a":"data = pd.concat([train.loc[:,'SalePrice' != train.columns], test.loc[:,:]], axis=0)","8b1fc7ff":"data_cat = pd.get_dummies(data.loc[:, categorical_features])\ndata = pd.concat([data.loc[:,numerical_features], data_cat[:][:]], axis=1)","6783a406":"train = pd.concat([data.iloc[:train.shape[0],:], train['SalePrice']], axis=1) \ntest = data.iloc[train.shape[0]:, :]\ntrain_X = train.loc[:, train.columns != 'SalePrice']\ntrain_y = train.loc[:, 'SalePrice']","72beba3e":"import xgboost as xgb\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\n\n#make_pipeline\npipe = make_pipeline(StandardScaler(), XGBRegressor())\npipe.fit(train_X, train_y)\npred = pipe.predict(test)\n\n#cross_val_score\nscores = cross_val_score(pipe, train_X, train_y, scoring='neg_mean_absolute_error')\nprint('Mean Absolute Error %2f' %(-1 * scores.mean()))\nprint(scores)\n\nparameters = {'xgbregressor__objective':['reg:linear'],\n              'xgbregressor__learning_rate': [.03, 0.05, .07], #so called `eta` value\n              'xgbregressor__max_depth': [4, 5, 6, 7],\n              'xgbregressor__min_child_weight': [4,3,5],\n              'xgbregressor__n_estimators': [500]}\n\nmodel = GridSearchCV(pipe, param_grid = parameters, cv=5)\nmodel.fit(train_X, train_y)\nprint(\"best score:\",model.best_score_)\nprint(\"best params:\",model.best_params_)\n\n# print(\"best features:\",model.feature_importances_)\n","aea4e839":"Id = test['Id']\nfin_score = pd.DataFrame({'SalePrice': np.expm1(model.predict(test))})\nfin_data = pd.concat([Id,fin_score],axis=1)\nfin_data.to_csv('House_Prices_submit.csv', sep=',', index = False)","2818169a":"Get ready to rumble all columns:\n\nAs there are quite a lot of columns, we can to create priority for each column as whether high, medium or low in an[ excel sheet ](https:\/\/drive.google.com\/file\/d\/1_4jVNVuoIN7m4fsPZqGHKTvbZ7U0kC_S\/view?usp=sharing)with columns - Features, Priority. This is completely based on indivisual's intuition. So lets plot 'SalePrice' vrs some interesting features obtained from excel sheet to get a gist on out dataset. (Its always better to plot all columns and examine). Lets get going!!\n","0cefd808":"* So, lots of **outliers!!**\n* Some of the numeric variable considered are actually categorical variable such as 'OverallQual', 'OverallCond'. Just because they arent strings doesn't mean they are numeric( or continuous ), even nominal data here is considered as int object. So they have to be separated.\nBefore moving on to fight outliers lets examine **missing values!!**","91ae080a":"As the columns [PoolQC, MiscFeature, Alley, Fence, FireplaceQu] have more than half of observations as missing its better we drop these columns.","ff975e01":"So there are no rows with same 'Id'. Train & Test set have no comman 'Id'. ","7bcae418":"So now i guess we have preprocessed data finally!!"}}