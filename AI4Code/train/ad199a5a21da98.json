{"cell_type":{"a73b472a":"code","4df7ce91":"code","72d186aa":"code","f265fece":"code","2815ba91":"code","8ee86820":"code","867e4d64":"code","335e1168":"code","16fad0c9":"code","e8645b65":"code","3cceaacd":"code","f19821ff":"code","86abfdb6":"code","16857631":"code","fa192a4d":"code","03e8ca86":"code","fd54c600":"code","1acfbcfb":"code","572b798c":"code","69f439bf":"code","13a5120f":"code","f2e42474":"code","f3385edb":"code","6cac5205":"code","21df3cf8":"code","20725f6b":"markdown","2f82186d":"markdown","494b21d1":"markdown","12386813":"markdown","29e7e376":"markdown","d82eeaca":"markdown","e63b7306":"markdown","3f9b6a23":"markdown","670b68e6":"markdown","705e5bec":"markdown","a5698ef2":"markdown","35208c6c":"markdown","b4e580ff":"markdown"},"source":{"a73b472a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pickle \n#import network.mnist_loader as mnist_loader [ND-] \nimport matplotlib.pyplot as plt\nimport random\nimport math\nfrom scipy.linalg import hadamard\n\n #[ND+]\n#from sklearn.model_selection import train_test_split\n#from tensorflow.python import keras\nimport keras\n#from tensorflow.python.keras.models import Sequential\n#from tensorflow.python.keras.layers import Dense\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n","4df7ce91":"class Network(object):\n\n    def __init__(self, sizes):\n        \"\"\"The list ``sizes`` contains the number of neurons in the\n        respective layers of the network.  For example, if the list\n        was [2, 3, 1] then it would be a three-layer network, with the\n        first layer containing 2 neurons, the second layer 3 neurons,\n        and the third layer 1 neuron.  The biases and weights for the\n        network are initialized randomly, using a Gaussian\n        distribution with mean 0, and variance 1.  Note that the first\n        layer is assumed to be an input layer, and by convention we\n        won't set any biases for those neurons, since biases are only\n        ever used in computing the outputs from later layers.\"\"\"\n        self.num_layers = len(sizes)\n        self.sizes = sizes\n        self.biases = [np.random.randn(y, 1) for y in sizes[1:]]\n        self.weights = [np.random.randn(y, x)\n                        for x, y in list(zip(sizes[:-1], sizes[1:]))]\n\n    def adversarial(self, n):\n        goal = np.zeros((10, 1))\n        goal[n] = 1\n\n        x = np.random.normal(.5, .3, (784, 1))\n        orig = np.copy(x)\n\n        for i in range(10000):\n            d = self.input_derivative(x,goal)\n            x -= .01 * d\n\n        return x\n\n    def feedforward(self, a):\n        \"\"\"Return the output of the network if ``a`` is input.\"\"\"\n        for b, w in list(zip(self.biases, self.weights)):\n            a = sigmoid(np.dot(w, a)+b)\n        return a\n\n    def SGD(self, training_data, epochs, mini_batch_size, eta,\n            test_data=None):\n        \"\"\"Train the neural network using mini-batch stochastic\n        gradient descent.  The ``training_data`` is a list of tuples\n        ``(x, y)`` representing the training inputs and the desired\n        outputs.  The other non-optional parameters are\n        self-explanatory.  If ``test_data`` is provided then the\n        network will be evaluated against the test data after each\n        epoch, and partial progress printed out.  This is useful for\n        tracking progress, but slows things down substantially.\"\"\"\n        if test_data: n_test = len(test_data)\n        n = len(training_data)\n        for j in range(epochs):\n            random.shuffle(training_data)\n            mini_batches = [\n                training_data[k:k+mini_batch_size]\n                for k in range(0, n, mini_batch_size)]\n            for mini_batch in mini_batches:\n                self.update_mini_batch(mini_batch, eta)\n            if test_data:\n                print(\"Epoch {0}: {1} \/ {2}\".format(\n                    j, self.evaluate(test_data), n_test))\n            else:\n                print(\"Epoch {0} complete\".format(j))\n\n    def update_mini_batch(self, mini_batch, eta):\n        \"\"\"Update the network's weights and biases by applying\n        gradient descent using backpropagation to a single mini batch.\n        The ``mini_batch`` is a list of tuples ``(x, y)``, and ``eta``\n        is the learning rate.\"\"\"\n        nabla_b = [np.zeros(b.shape) for b in self.biases]\n        nabla_w = [np.zeros(w.shape) for w in self.weights]\n        for x, y in mini_batch:\n            delta_nabla_b, delta_nabla_w = self.backprop(x, y)\n            nabla_b = [nb+dnb for nb, dnb in list(zip(nabla_b, delta_nabla_b))]\n            nabla_w = [nw+dnw for nw, dnw in list(zip(nabla_w, delta_nabla_w))]\n        self.weights = [w-(eta\/len(mini_batch))*nw\n                        for w, nw in list(zip(self.weights, nabla_w))]\n        self.biases = [b-(eta\/len(mini_batch))*nb\n                       for b, nb in list(zip(self.biases, nabla_b))]\n\n    def backprop(self, x, y):\n        \"\"\"Return a tuple ``(nabla_b, nabla_w)`` representing the\n        gradient for the cost function C_x.  ``nabla_b`` and\n        ``nabla_w`` are layer-by-layer lists of numpy arrays, similar\n        to ``self.biases`` and ``self.weights``.\"\"\"\n        nabla_b = [np.zeros(b.shape) for b in self.biases]\n        nabla_w = [np.zeros(w.shape) for w in self.weights]\n        # feedforward\n        activation = x\n        activations = [x] # list to store all the activations, layer by layer\n        zs = [] # list to store all the z vectors, layer by layer\n        for b, w in list(zip(self.biases, self.weights)): #[ND] - \"list\" added \n            z = np.dot(w, activation)+b\n            zs.append(z)\n            activation = sigmoid(z)\n            activations.append(activation)\n        # backward pass\n        delta = self.cost_derivative(activations[-1], y) * \\\n            sigmoid_prime(zs[-1])\n        nabla_b[-1] = delta\n        nabla_w[-1] = np.dot(delta, activations[-2].transpose())\n        # Note that the variable l in the loop below is used a little\n        # differently to the notation in Chapter 2 of the book.  Here,\n        # l = 1 means the last layer of neurons, l = 2 is the\n        # second-last layer, and so on.  It's a renumbering of the\n        # scheme in the book, used here to take advantage of the fact\n        # that Python can use negative indices in lists.\n        for l in range(2, self.num_layers):\n            z = zs[-l]\n            sp = sigmoid_prime(z)\n            delta = np.dot(self.weights[-l+1].transpose(), delta) * sp\n            nabla_b[-l] = delta\n            nabla_w[-l] = np.dot(delta, activations[-l-1].transpose())\n        return (nabla_b, nabla_w)\n\n    def input_derivative(self, x, y):\n        \"\"\" Calculate derivatives wrt the inputs\"\"\"\n        nabla_b = [np.zeros(b.shape) for b in self.biases]\n        nabla_w = [np.zeros(w.shape) for w in self.weights]\n        # feedforward\n        activation = x\n        activations = [x] # list to store all the activations, layer by layer\n        zs = [] # list to store all the z vectors, layer by layer\n        for b, w in list(zip(self.biases, self.weights)): #[ND] - \"list\" added\n            z = np.dot(w, activation)+b\n            zs.append(z)\n            activation = sigmoid(z)\n            activations.append(activation)\n        # backward pass\n        delta = self.cost_derivative(activations[-1], y) * \\\n            sigmoid_prime(zs[-1])\n        nabla_b[-1] = delta\n        nabla_w[-1] = np.dot(delta, activations[-2].transpose())\n        # Note that the variable l in the loop below is used a little\n        # differently to the notation in Chapter 2 of the book.  Here,\n        # l = 1 means the last layer of neurons, l = 2 is the\n        # second-last layer, and so on.  It's a renumbering of the\n        # scheme in the book, used here to take advantage of the fact\n        # that Python can use negative indices in lists.\n        for l in range(2, self.num_layers):\n            z = zs[-l]\n            sp = sigmoid_prime(z)\n            delta = np.dot(self.weights[-l+1].transpose(), delta) * sp\n            nabla_b[-l] = delta\n            nabla_w[-l] = np.dot(delta, activations[-l-1].transpose())\n        return self.weights[0].T.dot(delta)\n\n    def evaluate(self, test_data):\n        \"\"\"Return the number of test inputs for which the neural\n        network outputs the correct result. Note that the neural\n        network's output is assumed to be the index of whichever\n        neuron in the final layer has the highest activation.\"\"\"\n        test_results = [(np.argmax(self.feedforward(x)), y)\n                        for (x, y) in test_data]\n        return sum(int(x == np.argmax(y)) for (x, y) in test_results) #[ND] - converted y to argmax from categorical\n\n    def cost_derivative(self, output_activations, y):\n        \"\"\"Return the vector of partial derivatives \\partial C_x \/\n        \\partial a for the output activations.\"\"\"\n        \n        #[ND]-debug\n        # print(\"output_activations shape: {0} | y shape: {1} \".format(output_activations.shape, y.shape))\n        \n        return (output_activations-y)\n\n#### Miscellaneous functions\ndef sigmoid(z): #[ND] original sigmoid\n    \"\"\"The sigmoid function.\"\"\"\n    return 1.0\/(1.0+np.exp(-z))\n\n#def sigmoid(x): #[ND] numerical stable sigmoid\n#    \"Numerically stable sigmoid function.\"\n#    if x >= 0:\n#        z = np.exp(-x)\n#        return 1 \/ (1 + z)\n#    else:\n        # if x is less than zero then z will be small, denom can't be\n        # zero because it's 1+z.\n#        z = np.exp(x)\n#        return z \/ (1 + z)\n\ndef sigmoid_prime(z):\n    \"\"\"Derivative of the sigmoid function.\"\"\"\n    return sigmoid(z)*(1-sigmoid(z))\n","72d186aa":"def data_prep(raw_x,raw_y,img_rows,img_cols, num_classes):\n    num_images = raw_x.shape[0]  # get number of images\n    out_x = raw_x \/ 255  #rescale GL to 0-1\n    out_x = [np.reshape(x, (784, 1)) for x in out_x[:,:,:]]\n    out_y = keras.utils.to_categorical(raw_y, num_classes)  # create y as class vector\n    out_y = [np.reshape(y, (10, 1)) for y in out_y[:]]\n    dataset = list(zip(out_x, out_y))\n    return dataset\n\ndef MNIST_load(validation_factor):\n    (X_train_raw, Y_train_raw), (X_test_raw, Y_test_raw) = keras.datasets.mnist.load_data()\n    train_size = round(X_train_raw.shape[0]*validation_factor)\n    train_set = data_prep(X_train_raw, Y_train_raw,img_rows=28, img_cols=28, num_classes=10)\n    test_set = data_prep(X_test_raw, Y_test_raw,img_rows=28, img_cols=28, num_classes=10)\n    return (train_set[0:train_size], train_set[train_size:], test_set)\n\n(tr_set, vl_set, ts_set) = MNIST_load(validation_factor = 0.8)\n    ","f265fece":"rand_im = tr_set[np.random.randint(1,len(tr_set))]\nprint('Classification: ' + str(np.argmax(rand_im[1])) + '\\n')\n\nplt.imshow(rand_im[0].reshape(28,28), cmap='Greys')\n\n","2815ba91":"struct = ([784,30,10],\n          [784,20,10],\n          [784,50,30,10])\n          \n\n'''\nstruct = ([784,30,10],\n          [784,50,10],\n          [784,20,10],\n          [784,50,30,10],\n          [784,30,20,10])\n'''\n\nfor i,x in enumerate(struct,start=1):\n    print('---------------------------------------------\\n' +\n        'model {0} | network struct is: {1}'.format(i,x))\n    model = Network(x)\n    model.SGD(tr_set, 10, 10, 3.0, vl_set)\n    net_name = 'model'+ str(i)\n    vars()[net_name] = model\n    \n    print(\"model {0} test: {1} \/ {2}\".format(\n                    i, model.evaluate(ts_set), len(ts_set)))\n    \n    with open(net_name + '.pickle', 'wb') as f:\n        pickle.dump(model, f)\n        \n    \n    ","8ee86820":"with open('model1.pickle', 'rb') as f:\n    model1 = pickle.load(f)","867e4d64":"def predict(n):\n    # Get the data from the test set\n    x = ts_set[n][0]\n\n    # Print the prediction of the network\n    print('Network output: \\n' + str(np.round(model.feedforward(x), 2)) + '\\n')\n    print('Network prediction: ' + str(np.argmax(model.feedforward(x))) + '\\n')\n    print('Actual image: ')\n    \n    # Draw the image\n    plt.imshow(x.reshape((28,28)), cmap='Greys')\n\n# [ND] made selection random\ni = np.random.randint(1,len(ts_set)) #[ND] made random choise\npredict(i)","335e1168":"def adversarial(net, n, steps, eta):\n    \"\"\"\n    net : network object\n        neural network instance to use\n    n : integer\n        our goal label (just an int, the function transforms it into a one-hot vector)\n    steps : integer\n        number of steps for gradient descent\n    eta : float\n        step size for gradient descent\n    \"\"\"\n    # Set the goal output\n    goal = np.zeros((10, 1))\n    goal[n] = 1\n\n    # Create a random image to initialize gradient descent with\n    x = np.random.normal(.5, .3, (784, 1))\n\n    # Gradient descent on the input\n    for i in range(steps):\n        # Calculate the derivative\n        d = model.input_derivative(x,goal)\n        \n        # The GD update on x\n        x -= eta * d\n        \n    return x\n\n# Wrapper function\ndef generate(n):\n    \"\"\"\n    n : integer\n        goal label (not a one hot vector)\n    \"\"\"\n    (a) = adversarial(model, n, 1000, 1)\n    x = np.round(model.feedforward(a), 2)\n    \n    \n    print('Network Output: \\n' + str(x) + '\\n')\n    \n    print('Network Prediction: ' + str(np.argmax(x)) + '\\n')\n    \n    print('Adversarial Example: ')\n    plt.imshow(a.reshape(28,28), cmap='Greys')","16fad0c9":"generate(0)","e8645b65":"def sneaky_adversarial(model, n, x_target, steps, eta, lam=.05):\n    \"\"\"\n    net : network object\n        neural network instance to use\n    n : integer\n        our goal label (just an int, the function transforms it into a one-hot vector)\n    x_target : numpy vector\n        our goal image for the adversarial example\n    steps : integer\n        number of steps for gradient descent\n    eta : float\n        step size for gradient descent\n    lam : float\n        lambda, our regularization parameter. Default is .05\n    \"\"\"\n    \n    # Set the goal output\n    goal = np.zeros((10, 1))\n    goal[n] = 1\n\n    # Create a random image to initialize gradient descent with\n    x = np.random.normal(.5, .3, (784, 1))\n\n    # Gradient descent on the input\n    for i in range(steps):\n        # Calculate the derivative\n        d = model.input_derivative(x,goal)\n        \n        # The GD update on x, with an added penalty to the cost function\n        # ONLY CHANGE IS RIGHT HERE!!!\n        x -= eta * (d + lam * (x - x_target))\n\n    return x\n\n# Wrapper function\ndef sneaky_generate(model, n, m):\n    \"\"\"\n    n: int 0-9, the target number to match\n    m: index of example image to use (from the test set)\n    \"\"\"\n    \n    # Find random instance of m in test set\n    idx = np.random.randint(0,8000)\n    while np.argmax(ts_set[idx][1]) != m:\n        idx += 1\n    \n    # Hardcode the parameters for the wrapper function\n    a = sneaky_adversarial(model, n, ts_set[idx][0], 100, 1)\n    x = np.round(model.feedforward(a), 2)\n    \n    print('\\nWhat we want our adversarial example to look like: ')\n    plt.imshow(ts_set[idx][0].reshape((28,28)), cmap='Greys')\n    plt.show()\n    \n    print('\\n')\n    \n    print('Adversarial Example: ')\n    \n    plt.imshow(a.reshape(28,28), cmap='Greys')\n    plt.show()\n    \n    print('Network Prediction: ' + str(np.argmax(x)) + '\\n')\n    \n    print('Network Output: \\n' + str(x) + '\\n')\n    \n    return a","3cceaacd":"# sneaky_generate(target label, target digit)\nadv_ex = sneaky_generate(model,8, 5)","f19821ff":"def augment_data(model, n, data, steps):\n    \"\"\"\n    n : integer\n        number of adversarial examples to generate\n    data : list of tuples\n        data set to generate adversarial examples using\n    \"\"\"\n    # Our augmented training set:\n    augmented = []\n    \n    for i in range(n):\n        # Progress \"bar\"\n        if i % 500 == 0:\n            print(\"Generated digits: \" + str(i))\n            \n        # Randomly choose a digit that the example will look like\n        rnd_actual_digit = np.random.randint(10)\n        \n        # Find random instance of rnd_actual_digit in the training set\n        rnd_actual_idx = np.random.randint(len(data))\n        while np.argmax(data[rnd_actual_idx][1]) != rnd_actual_digit:\n            rnd_actual_idx = np.random.randint(len(data))\n        x_target = data[rnd_actual_idx][0]\n        \n        # Choose value for adversarial attack\n        rnd_fake_digit = np.random.randint(10)\n        \n        # Generate adversarial example\n        x_adversarial = sneaky_adversarial(model, rnd_fake_digit, x_target, steps, 1)\n        \n        # Add new data\n        y_actual = data[rnd_actual_idx][1]\n        \n        augmented.append((x_adversarial, y_actual))\n        \n    return augmented","86abfdb6":"for i,x in enumerate(struct,start=1):\n    \n    net_name = 'model'+ str(i)\n    augmented_name = 'augmented_' + net_name\n    \n    print('---------------create augmented --------------\\n' +\n        '{0} | network struct is: {1} | evaluated data is: {2}'.format(net_name,x, augmented_name))    \n    #with open(net_name + '.pickle', 'rb') as f:\n       #vars()['model' + str(i)] = pickle.load(f)\n          \n    vars()[augmented_name] = augment_data(vars()['model' + str(i)], 20000, tr_set, 100)\n      \n    with open(augmented_name + '.pickle', 'wb') as f:\n        pickle.dump(augmented_name, f)","16857631":"struct = ([784,30,10],\n          [784,20,10],\n          [784,50,30,10])\n\nfor i,y in enumerate(struct,start=1):\n    \n    print('-------------------------------------\\n')\n    augmented_name = 'augmented_model' + str(i) \n    with open('\/kaggle\/input\/19-04-models-augmented\/' + augmented_name + '.pickle', 'rb') as f:\n        vars()[augmented_name] = pickle.load(f)\n        \n    net_name = 'model'+ str(i)\n    with open('\/kaggle\/input\/19-04-models-augmented\/' + net_name + '.pickle', 'rb') as f:\n        vars()[net_name] = pickle.load(f)\n        \n    print('{0} loaded successfully | {1} loaded successfully '.format(net_name, augmented_name))","fa192a4d":"for i,y in enumerate(struct,start=1):\n    \n    augmented_name = 'augmented_model' + str(i)\n    augmented = vars()[augmented_name]\n    \n    print('---------------evaluate {0} --------------'.format(augmented_name))\n       \n    \n    for j,x in enumerate(struct,start=1):\n        net_name = 'model'+ str(j)\n        model = vars()[net_name]\n      \n        print(\"{0} | network struct is: {1} | test: {2} \/ {3}\".format(\n                    net_name, x, model.evaluate(augmented), len(augmented)))\n    print('\\n')\n    ","03e8ca86":"rand_im = augmented[np.random.randint(1,len(augmented))]\nprint('Classification: ' + str(np.argmax(rand_im[1])) + '\\n')\n\nplt.imshow(rand_im[0].reshape(28,28), cmap='Greys')","fd54c600":"#def compressive_sample(im, compr_ratio, scrambl_arr, H):\n    '''\n    simulate single pxl camera sampling by Hadamard mat\n    '''\n    \n    # the MNIST image is 28 by 28, so first we pad the image by zeros\n    n = len(H)\n        \n    im_pad = np.zeros([n,n])\n    im_pad[2:30,2:30] = im #[ND] convert to python indx\n    \n    N = im_pad.size #[ND] full padded image\n    \n    M = int(np.ceil(compr_ratio * N)) \n   \n\n        \n    \n    \n    #simulate scrambled hadamard sampling:\n    im_scrambl = im_pad    \n    im_scrambl = np.take(im_pad,[scrambl_arr]).reshape(32,32)\n\n    \n    samp_mat = H.dot(im_scrambl).dot(H)\n\n    compressive_array = np.take(samp_mat,list(range(M)))\n    \n    return compressive_array","1acfbcfb":"def decompress(compr_vec, scrambl_arr, H):\n    n = len(H)\n        \n    im_pad = np.zeros([n,n])\n    np.put(im_pad,list(range(len(compr_vec))),compr_vec)\n    \n    decomp_mat = H.dot(im_pad).dot(H)\n    \n    unscrambled_im = np.zeros([n,n])\n    np.put(unscrambled_im, scrambl_arr, decomp_mat)\n    \n    return unscrambled_im\n    #return unscrambled_im","572b798c":"# choose M random numbers out of 1 to N (no repetitions)\n# this will be the key\nscrambl_arr = np.array([1,605,16,880,199,488,579,24,478,948,470,1022,309,5,295,608,831,13,26,132,716,743,977,517,231,544,212,180,73,894,590,893,816,346,243,970,31,639,45,296,312,911,423,122,42,44,200,869,844,197,887,40,522,693,591,702,361,845,527,654,498,422,803,641,651,602,598,523,137,511,348,54,366,267,487,363,1013,486,761,240,698,55,968,753,239,279,964,48,373,15,429,1005,326,989,857,745,739,253,79,304,10,785,872,161,901,219,865,419,307,116,188,723,707,168,362,835,735,573,934,813,928,978,710,584,909,746,514,915,1006,537,169,107,316,820,60,578,46,726,124,917,150,479,201,592,828,601,396,374,534,449,667,359,700,780,533,502,760,186,564,425,773,142,613,771,764,955,530,342,29,518,1009,154,990,841,576,247,611,492,703,658,896,65,810,317,7,661,626,678,689,49,454,85,67,323,504,457,327,236,411,173,395,848,749,866,261,360,732,790,78,165,409,926,770,59,672,903,351,276,410,875,1015,290,83,499,416,114,836,298,559,811,182,144,682,808,272,433,469,615,94,1001,560,908,906,340,325,980,851,56,1000,347,381,461,444,174,950,846,966,907,556,273,237,476,884,23,634,690,210,11,490,575,650,673,466,345,563,57,284,796,642,715,443,227,17,829,248,607,39,916,264,819,983,313,681,562,1020,627,889,402,725,720,713,18,849,350,226,215,32,412,957,365,680,528,430,204,566,496,255,825,838,897,994,648,910,833,687,777,549,268,1014,548,789,508,271,367,609,275,483,450,954,364,582,105,798,451,618,164,389,1023,468,669,752,115,191,246,1017,721,781,475,320,628,254,923,62,991,814,249,100,558,976,864,216,676,774,604,863,905,666,679,482,924,1008,308,459,633,390,119,232,319,369,684,988,940,712,25,516,491,12,765,506,620,357,1021,624,569,462,699,103,96,349,352,385,898,280,160,401,949,143,668,438,190,979,84,596,547,589,755,375,112,77,973,27,740,47,300,208,489,951,252,370,314,692,383,733,440,588,74,554,331,446,140,617,465,837,1002,195,852,747,614,921,756,282,677,424,19,184,795,136,512,766,919,935,408,714,939,384,99,1004,8,53,775,98,130,245,286,126,353,177,603,452,139,157,386,797,238,638,336,3,881,251,95,158,455,344,521,655,269,2,495,737,397,400,960,30,69,225,899,175,163,565,688,355,930,871,427,185,536,532,442,250,987,629,285,696,754,568,407,117,697,256,984,162,738,447,944,176,171,262,925,758,741,904,519,206,972,593,1007,394,817,997,767,722,762,938,90,1012,711,616,148,299,612,21,931,445,727,729,507,858,933,220,806,274,552,574,172,387,840,631,818,97,128,515,72,670,377,58,404,832,102,958,93,675,902,343,996,649,464,270,947,209,861,783,709,260,436,33,391,179,524,221,471,89,546,167,354,413,975,652,784,500,104,623,152,155,414,310,599,969,830,826,557,885,127,637,417,322,43,420,257,942,135,258,52,827,194,526,748,570,441,791,224,241,539,1010,914,432,812,644,1018,398,801,659,91,234,995,824,458,663,913,945,862,339,856,927,772,9,337,646,800,982,335,118,671,674,81,503,900,718,87,41,594,34,61,214,892,259,854,473,794,358,974,181,266,708,736,998,382,657,664,805,683,842,303,701,277,936,480,263,484,625,542,635,986,131,632,108,971,283,529,448,561,306,321,228,538,929,867,324,38,133,937,406,531,51,20,138,804,178,932,730,742,961,330,82,653,550,577,763,205,728,717,757,493,1003,802,485,456,211,14,129,1024,787,431,86,203,481,860,540,610,595,1011,294,793,121,125,520,993,235,788,704,769,418,647,744,815,870,686,734,439,943,106,202,847,967,146,799,147,460,217,71,606,111,912,334,329,510,151,586,230,318,640,645,305,952,882,428,287,159,37,393,525,572,64,376,694,434,193,656,371,1016,600,873,992,110,895,63,368,571,660,541,315,301,378,379,198,886,877,332,850,192,145,705,218,665,399,918,472,587,50,750,356,494,695,405,196,229,622,859,792,403,807,291,853,874,222,153,4,244,1019,776,149,543,963,302,113,388,338,545,883,36,981,242,691,786,751,474,66,959,80,435,553,288,76,170,189,965,453,759,555,109,879,68,292,535,437,956,567,619,920,855,581,233,724,551,778,731,685,868,265,426,843,183,580,878,223,509,281,636,213,891,123,477,35,92,88,341,380,782,505,706,372,513,22,822,501,297,985,207,333,779,630,463,289,467,75,821,311,70,156,809,643,888,141,953,941,834,6,187,962,415,839,101,28,823,293,120,328,134,999,662,392,278,597,166,421,497,583,621,922,946,876,585,768,890,719]\n                          ,dtype=int) \n\nscrambl_arr = np.subtract(scrambl_arr, 1) #[ND] convert to python indx\n\n# sampling matrix:\nH = hadamard(32)\/math.sqrt(32)\n\ncompressed_im = compressive_sample(rand_im[0].reshape(28,28), 0.8, scrambl_arr, H)\n\ndecomp_im = decompress(compressed_im, scrambl_arr, H)\n\n\nplt.figure(0)\nplt.title('original image is:')\nplt.imshow(rand_im[0].reshape(28,28))\n\n'''\nplt.figure(1)\nplt.title('compressed image is:')\nplt.imshow(compressed_im.reshape(32,32))\n'''\n\n\nplt.figure(2)\nplt.title('decompressed image is:')\nplt.imshow(decomp_im)\n","69f439bf":"class cs_dataset(object):\n\n    def __init__(self, scramble_key, compression_ratio, H_dim):\n        self.scramble_key = scramble_key\n        self.compression_ratio = compression_ratio\n        self.H = hadamard(H_dim)\/math.sqrt(H_dim)\n        self.cs_tr_set = []\n        self.cs_vl_set = []\n        self.cs_ts_set = []\n        \n    def create_cs_dataset(self, dataset_input, dataset_name):\n        for i,data in enumerate(dataset_input):         \n            out_dataset.append([cs_dataset.compressive_sample(self,data[0].reshape(28,28)),  data[1]])              \n        \n        return self\n            \n    def compressive_sample(self,im):\n        '''\n        simulate single pxl camera sampling by Hadamard mat\n        '''\n        # the MNIST image is 28 by 28, so first we pad the image by zeros\n        n = len(self.H)\n        im_pad = np.zeros([n,n])\n        im_pad[2:30,2:30] = im #[ND] convert to python indx\n        N = im_pad.size #[ND] full padded image\n        M = int(np.ceil(self.compression_ratio * N)) \n\n        #simulate scrambled hadamard sampling:\n        im_scrambl = im_pad    \n        im_scrambl = np.take(im_pad,[self.scramble_key]).reshape(32,32)\n        samp_mat = self.H.dot(im_scrambl).dot(self.H)\n        compressive_array = np.take(samp_mat,list(range(M)))\n\n        return compressive_array\n    \n    def decompress(self, compr_vec):\n        \n        n = len(self.H)\n        im_pad = np.zeros([n,n])\n        np.put(im_pad,list(range(len(compr_vec))),compr_vec)\n        decomp_mat = H.dot(im_pad).dot(self.H)\n        unscrambled_im = np.zeros([n,n])\n        np.put(unscrambled_im, self.scramble_key, decomp_mat)\n\n        return unscrambled_im\n\n    \n","13a5120f":"scrambl_arr = np.array([1,605,16,880,199,488,579,24,478,948,470,1022,309,5,295,608,831,13,26,132,716,743,977,517,231,544,212,180,73,894,590,893,816,346,243,970,31,639,45,296,312,911,423,122,42,44,200,869,844,197,887,40,522,693,591,702,361,845,527,654,498,422,803,641,651,602,598,523,137,511,348,54,366,267,487,363,1013,486,761,240,698,55,968,753,239,279,964,48,373,15,429,1005,326,989,857,745,739,253,79,304,10,785,872,161,901,219,865,419,307,116,188,723,707,168,362,835,735,573,934,813,928,978,710,584,909,746,514,915,1006,537,169,107,316,820,60,578,46,726,124,917,150,479,201,592,828,601,396,374,534,449,667,359,700,780,533,502,760,186,564,425,773,142,613,771,764,955,530,342,29,518,1009,154,990,841,576,247,611,492,703,658,896,65,810,317,7,661,626,678,689,49,454,85,67,323,504,457,327,236,411,173,395,848,749,866,261,360,732,790,78,165,409,926,770,59,672,903,351,276,410,875,1015,290,83,499,416,114,836,298,559,811,182,144,682,808,272,433,469,615,94,1001,560,908,906,340,325,980,851,56,1000,347,381,461,444,174,950,846,966,907,556,273,237,476,884,23,634,690,210,11,490,575,650,673,466,345,563,57,284,796,642,715,443,227,17,829,248,607,39,916,264,819,983,313,681,562,1020,627,889,402,725,720,713,18,849,350,226,215,32,412,957,365,680,528,430,204,566,496,255,825,838,897,994,648,910,833,687,777,549,268,1014,548,789,508,271,367,609,275,483,450,954,364,582,105,798,451,618,164,389,1023,468,669,752,115,191,246,1017,721,781,475,320,628,254,923,62,991,814,249,100,558,976,864,216,676,774,604,863,905,666,679,482,924,1008,308,459,633,390,119,232,319,369,684,988,940,712,25,516,491,12,765,506,620,357,1021,624,569,462,699,103,96,349,352,385,898,280,160,401,949,143,668,438,190,979,84,596,547,589,755,375,112,77,973,27,740,47,300,208,489,951,252,370,314,692,383,733,440,588,74,554,331,446,140,617,465,837,1002,195,852,747,614,921,756,282,677,424,19,184,795,136,512,766,919,935,408,714,939,384,99,1004,8,53,775,98,130,245,286,126,353,177,603,452,139,157,386,797,238,638,336,3,881,251,95,158,455,344,521,655,269,2,495,737,397,400,960,30,69,225,899,175,163,565,688,355,930,871,427,185,536,532,442,250,987,629,285,696,754,568,407,117,697,256,984,162,738,447,944,176,171,262,925,758,741,904,519,206,972,593,1007,394,817,997,767,722,762,938,90,1012,711,616,148,299,612,21,931,445,727,729,507,858,933,220,806,274,552,574,172,387,840,631,818,97,128,515,72,670,377,58,404,832,102,958,93,675,902,343,996,649,464,270,947,209,861,783,709,260,436,33,391,179,524,221,471,89,546,167,354,413,975,652,784,500,104,623,152,155,414,310,599,969,830,826,557,885,127,637,417,322,43,420,257,942,135,258,52,827,194,526,748,570,441,791,224,241,539,1010,914,432,812,644,1018,398,801,659,91,234,995,824,458,663,913,945,862,339,856,927,772,9,337,646,800,982,335,118,671,674,81,503,900,718,87,41,594,34,61,214,892,259,854,473,794,358,974,181,266,708,736,998,382,657,664,805,683,842,303,701,277,936,480,263,484,625,542,635,986,131,632,108,971,283,529,448,561,306,321,228,538,929,867,324,38,133,937,406,531,51,20,138,804,178,932,730,742,961,330,82,653,550,577,763,205,728,717,757,493,1003,802,485,456,211,14,129,1024,787,431,86,203,481,860,540,610,595,1011,294,793,121,125,520,993,235,788,704,769,418,647,744,815,870,686,734,439,943,106,202,847,967,146,799,147,460,217,71,606,111,912,334,329,510,151,586,230,318,640,645,305,952,882,428,287,159,37,393,525,572,64,376,694,434,193,656,371,1016,600,873,992,110,895,63,368,571,660,541,315,301,378,379,198,886,877,332,850,192,145,705,218,665,399,918,472,587,50,750,356,494,695,405,196,229,622,859,792,403,807,291,853,874,222,153,4,244,1019,776,149,543,963,302,113,388,338,545,883,36,981,242,691,786,751,474,66,959,80,435,553,288,76,170,189,965,453,759,555,109,879,68,292,535,437,956,567,619,920,855,581,233,724,551,778,731,685,868,265,426,843,183,580,878,223,509,281,636,213,891,123,477,35,92,88,341,380,782,505,706,372,513,22,822,501,297,985,207,333,779,630,463,289,467,75,821,311,70,156,809,643,888,141,953,941,834,6,187,962,415,839,101,28,823,293,120,328,134,999,662,392,278,597,166,421,497,583,621,922,946,876,585,768,890,719]\n                          ,dtype=int) \n\nscrambl_arr = np.subtract(scrambl_arr, 1)\n\ncs1 = cs_dataset(scrambl_arr, compression_ratio = 0.8, H_dim = 32 )\n","f2e42474":"cs1.create_cs_dataset(ts_set,'cs_ts_set')","f3385edb":"data = ts_set[0]\nplt.imshow(out_dataset[0][0].reshape(28,28), cmap='Greys')\n","6cac5205":"plt.imshow(decompress(cs1.cs_ts_set[0][0], scrambl_arr, cs1.H))","21df3cf8":" n = len(H)\n im_pad = np.zeros([n,n])\n im_pad[0:,0:] = rand_im[0].reshape(28,28)","20725f6b":"evaluate augmented data on its source model","2f82186d":"targeted by:\n$$ C = \\|\\vec y_{goal} - y_{hat}(\\vec x)\\|^2_2 + \\lambda \\|\\vec x - \\vec x_{target}\\|^2_2 $$","494b21d1":"adding the \"network\" class from \thttps:\/\/medium.com\/@ml.at.berkeley\/tricking-neural-networks-create-your-own-adversarial-examples-a61eb7620fd8\n![image.png]","12386813":"non targeted by:\n$$ C = \\frac{1}{2} \\|\\vec y_{goal} - \\hat y(\\vec x)\\|^2_2 $$","29e7e376":"generate augmented data per network and pickle it","d82eeaca":"observing the train set","e63b7306":"creating networks according to \"struct\" and pickle them to files","3f9b6a23":"Initializtion ","670b68e6":"Checking model performance","705e5bec":"reviewing the new dataset","a5698ef2":"Load networks and Augmented datasets","35208c6c":"Loading the MNIST dataset !by keras!\nuse \"data_prep\" and create validation dataset by validation factor split\n","b4e580ff":"In this branch I will:\n\n    1. create 3 different vanilla networks and train them on the MNITS dataset\n    2. create adversarial examples on one network and check their effectiveness on the other networks\n    3. create vanila network with compressed sensing inputs and check its immunity to the adversarial examples \n\n\nbased on the article:\nhttps:\/\/medium.com\/@ml.at.berkeley\/tricking-neural-networks-create-your-own-adversarial-examples-a61eb7620fd8\n\nmodifications:\n    1. MNIST dataset load by keras predefined func\n    2. data prep by personal fuctions\n        * y_test is categorical vector ->argmax() added at specific places\n    3. \"Network\"class is directly in the code\n    4. modification for Py3 enviroment:\n        * zip() -> list(zip())\n        * xrange -> range\n        \n\n    "}}