{"cell_type":{"095795fe":"code","989bca79":"code","0c94d951":"code","1adc6a77":"code","d17595fc":"code","620a2a1f":"code","b6143010":"code","626e2541":"code","1806af2d":"code","d4cd976e":"code","0f4e0ff1":"code","056d2929":"code","ed69e268":"code","c01bad86":"code","9f2f8124":"code","768b3bf2":"markdown","a99021a0":"markdown","0119fd4d":"markdown","d26cf33e":"markdown","f3656b04":"markdown","4fa67d45":"markdown","60aab83a":"markdown","532634b2":"markdown","e07dc700":"markdown","c85caa4a":"markdown","53d2d883":"markdown","37638bcd":"markdown","eb6c6bf1":"markdown","5fa5014c":"markdown","2b0118a0":"markdown","99b77a82":"markdown","c9e66867":"markdown","816235fc":"markdown","ef5393e3":"markdown","5e212bc8":"markdown","adb82790":"markdown"},"source":{"095795fe":"from fastai import *\nfrom fastai.vision import *\nfrom sklearn.metrics import f1_score","989bca79":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything(43)","0c94d951":"train = pd.read_csv('..\/input\/clabscvcomp\/data\/train.csv')\ntest_df = pd.read_csv('..\/input\/clabscvcomp\/data\/sample_submission.csv')\n\ntrain.head() ## Shows the first five rows of data frame","1adc6a77":"sorted(train.genres.unique()) ## Shows all classes in the dataframe","d17595fc":"train.genres.value_counts(normalize=True) ## Distribution of dataset","620a2a1f":"sz = 128 ## Image size\nbs = 32 ## Batch size\ntfms = get_transforms( ## Transformation to apply on Train data\n    do_flip=False, ## Horizontal flip\n    flip_vert=False, ## Vertical flip\n    max_rotate=20, ## Rotation\n    max_zoom=1.5, ## Center zoom\n    max_lighting=0.2 ## lighting\n)","b6143010":"data = (\n    ImageList.from_df(df=train, path='', folder='..\/input\/clabscvcomp\/data\/train_data\/', cols='id', suffix = '.jpg') ## define data path\n    .split_by_rand_pct(valid_pct=0.2) ## validation split\n    .label_from_df(cols='genres') ## load labels from\n    .transform(tfms, size=sz)\n    .databunch(bs=bs, num_workers=4) \n    .normalize(imagenet_stats)\n    )","626e2541":"test_data = ImageList.from_df(test_df, path='..\/input\/clabscvcomp\/data\/test_data\/', cols='id', suffix = '.jpg')\ndata.add_test(test_data)","1806af2d":"data.show_batch(3)","d4cd976e":"def F1(y_pred, y):\n    y_pred = y_pred.softmax(dim=1) \n    y_pred = y_pred.argmax(dim=1)\n    return torch.tensor(f1_score(y.cpu(), y_pred.cpu(), labels=list(range(10)), average='weighted'),device='cuda:0')","0f4e0ff1":"learn = cnn_learner(\n                    data, ## DataBunch\n                    models.resnet50, ## Resnet50 \n                    metrics=[F1, accuracy], ## Matrices\n                    callback_fns=ShowGraph ## Allows us to visualize training\n)","056d2929":"learn.freeze() \nlearn.fit_one_cycle(3)","ed69e268":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","c01bad86":"learn.fit_one_cycle(5, max_lr=slice(1e-4, 1e-3))","9f2f8124":"preds = learn.get_preds(ds_type=DatasetType.Test) ## get prediction in test data\npreds = np.argmax(preds[0].numpy(),axis = 1)\ncategories = sorted(train.genres.unique().astype('str'))\nfinal_preds = []\nfor idx in preds:\n    final_preds.append(categories[idx])\nfinal_submit = pd.read_csv('..\/input\/clabscvcomp\/data\/sample_submission.csv')\nfinal_submit.genres = final_preds\nfinal_submit.head()\nfinal_submit.to_csv('submission.csv',index = False)","768b3bf2":"# PS: This competition is hosted to promote learning. So we request you to publish your baseline models via Kaggle kernels and discuss on the discussion tab to help others learn. Thanks!","a99021a0":"# Define F1 metric","0119fd4d":"# EDTA","d26cf33e":"## NOTE: Turn on the Internet and GPU for this kernal before starting ","f3656b04":"###### Continue training","4fa67d45":"# Importing all Libraries\nPS - FastAI imports all necessary libraries for you","60aab83a":"# Defining DataBunch for FastAI\nRead more about it [here](https:\/\/docs.fast.ai\/vision.data.html#ImageDataBunch.from_df)","532634b2":"# Lets start training!!","e07dc700":"###### Unfreeze all layers and find best learning rate","c85caa4a":"Dataset looks very imbalanced. Try to read more about it. This blog post might be a good read [link](https:\/\/www.analyticsvidhya.com\/blog\/2017\/03\/imbalanced-classification-problem\/)","53d2d883":"# Seed everything for reproducibility\nYou may like to read more about it at [link](https:\/\/medium.com\/@ODSC\/properly-setting-the-random-seed-in-ml-experiments-not-as-simple-as-you-might-imagine-219969c84752).","37638bcd":"# Things to try next:\n* Try different architectures, optimizers, loss functions etc.\n* Think of ways of tackling data imbalance problem.\n* Try different image size\n* Try Ensembling methods.\n* Apply semi supervised learning.","eb6c6bf1":"###### Notebook created by: Arnav Chavan (@[carnav0400](https:\/\/www.kaggle.com\/carnav0400)), Udbhav Bamba (@[ubamba98](https:\/\/www.kaggle.com\/ubamba98))","5fa5014c":"Now lets add test data to the DataBunch","2b0118a0":"# Defining FastAI's Learner \nLearner is an integration of DataBunch + Model + callbacks\nMore about it can be found [here](https:\/\/docs.fast.ai\/vision.learner.html)","99b77a82":"# How to add dataset to the kernal\n* Click on \"Add Data\" \n* Search \"CLabsCVcomp\"\n* Click on \"Add\"\n* Done\n","c9e66867":"## Reading CSV","816235fc":"# Visualizing dataset","ef5393e3":"###### Freeze all layers but last layer and training some epochs with one-cycle policy\nRead more: [1-cycle policy basics](https:\/\/sgugger.github.io\/the-1cycle-policy.html), [Documentation](https:\/\/docs.fast.ai\/callbacks.one_cycle.html)","5e212bc8":"## Now click on the \"Commit\" to submit the notebook. This notebook generates 'submission.csv' which can be check how the model performed. \n## After the notebook is commited successfully. Click on the Output button. This will bring you to a screen with an option to Submit to Competition. Hit that and you will see how your model performed.\n## NOTE: We expect everyone to generate such notebooks for your final submission. Only the teams with notebook submitted against their final submission will be considered for prize money!","adb82790":"## Predicting for test data"}}