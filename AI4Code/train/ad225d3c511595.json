{"cell_type":{"59dd9f77":"code","fb0e9e94":"code","b0954434":"code","3e1caaef":"code","dd923b54":"code","2d7f7722":"code","67221617":"code","e11e4cbb":"code","128e3884":"code","4eeb93c1":"markdown","50e8f915":"markdown","ea13bbb6":"markdown","0af8d085":"markdown","2ef047c4":"markdown","8b26a0bd":"markdown","38f33771":"markdown"},"source":{"59dd9f77":"%%writefile IrrationalSearchAgent.py\n# Source: https:\/\/www.kaggle.com\/jamesmcguigan\/random-seed-search-irrational-agent\/\n# Source: https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/rock-paper-scissors\/rng\/IrrationalAgent.py\n\nimport re\nimport time\nfrom typing import List, Union\n\nfrom mpmath import mp\nmp.dps = 2048  # more than 1000 as 10%+ of chars will be dropped\n\n\ndef encode_irrational(irrational: Union[str,mp.mpf], offset=0) -> List[int]:\n    \"\"\"\n    Encode the irrational number into trinary\n    The irrational is converted to a string, \"0\"s are removed\n    Then each of the digits is converted to an integer % 3 and added the to sequence\n    \"\"\"\n    if isinstance(irrational, list) and all([ 0 <= n <= 2 for n in irrational ]):\n        return irrational  # prevent double encoding\n\n    string   = re.sub('[^1-9]', '', str(irrational))\n    sequence = [\n        ( int(c) + int(offset) ) % 3\n        for c in string\n    ]\n    assert len(sequence) >= 1000\n    return sequence\n\n\n\nclass IrrationalAgent():\n    \"\"\"\n    Play an fixed sequence of moves derived the digits of an irrational number\n\n    Irrational numbers are more mathematically pure source of randomness than\n    the repeating numbers used by the Mersenne Twister RNG\n\n    This agent is pure Chaos and contains no Order capable of being exploited once the game has started\n\n    Its only vulnerability is Password Attack.\n    Pleased to meet you, won't you guess my name?\n\n    There are an uncountable infinity of irrational numbers\n    Your choice of irrational is your password\n    Be irrational in your choice of irrational if want this agent to be secure\n    Alternatively choose a popular irrational with an offset to attack a specific agent\n\n    This is the true Nash Equilibrium solution to Rock Paper Scissors\n    \"\"\"\n\n    irrationals = {\n        name: encode_irrational(irrational)\n        for name, irrational in {\n            'pi':       mp.pi(),\n            'phi':      mp.phi(),\n            'e':        mp.e(),\n            'sqrt2':    mp.sqrt(2),\n            'sqrt5':    mp.sqrt(5),\n            'euler':    mp.euler(),\n            'catalan':  mp.catalan(),\n            'apery':    mp.apery(),\n            # 'khinchin':  mp.khinchin(),  # slow\n            # 'glaisher':  mp.glaisher(),  # slow\n            # 'mertens':   mp.mertens(),   # slow\n            # 'twinprime': mp.twinprime(), # slow\n        }.items()\n    }\n\n\n    def __init__(self, name='irrational', irrational: Union[str,mp.mpf] = None, offset=0, verbose=True):\n        # Irrational numbers are pure random sequences that are immune to random seed search\n        # Using name == 'irrational' causes the number to be reset each new game\n        if irrational is not None and ( name == 'irrational' or name in self.irrationals.keys() ):\n            name = 'secret'\n        if name == 'irrational':\n            irrational = self.generate_secure_irrational()\n        if name in self.irrationals.keys():\n            irrational = self.irrationals[name]\n        self.irrational = self.encode_irrational(irrational, offset=offset)\n\n        self.name       = name\n        self.offset     = offset\n        self.verbose    = verbose\n        self.reset()\n\n\n    def reset(self):\n        \"\"\"\n        Reset on the first turn of every new game\n        This allows a single instance to be run in a loop for testing\n        \"\"\"\n        self.history = {\n            \"action\":   [],\n            \"opponent\": []\n        }\n        if self.name == 'irrational':\n            irrational      = self.generate_secure_irrational()\n            self.irrational = self.encode_irrational(irrational, offset=self.offset)\n\n\n\n    def __call__(self, obs, conf):\n        return self.agent(obs, conf)\n\n    def agent(self, obs, conf):\n        \"\"\" Wrapper function for setting state in child classes \"\"\"\n\n        # Generate a new history and irrational seed for each new game\n        if obs.step == 0:\n            self.reset()\n\n        # Keep a record of opponent and action state\n        if obs.step > 0:\n            self.history['opponent'].append(obs.lastOpponentAction)\n\n        # This is where the subclassable agent logic happens\n        action = self.action(obs, conf)\n\n        # Keep a record of opponent and action state\n        self.history['action'].append(action)\n        return action\n\n\n    def action(self, obs, conf):\n        \"\"\" Play the next digit in a fixed irrational sequence \"\"\"\n        action = int(self.irrational[ obs.step % len(self.irrational) ])\n        action = (action + self.offset) % conf.signs\n        if self.verbose:\n            name = self.__class__.__name__ + ':' + self.name + (f'+{self.offset}' if self.offset else '')\n            opponent = ( self.history['opponent'] or [None] )[-1]\n            expected = ( action - 1 ) % 3\n            print(f\"{obs.step:4d} | {opponent}{self.win_symbol()} > action {action} | \" +\n                  f\"{name}\")\n        return action\n\n\n    @staticmethod\n    def generate_secure_irrational():\n        \"\"\"\n        Be irrational in your choice of irrational if want this agent to be secure\n        \"\"\"\n        irrational = sum([\n            mp.sqrt(n) * (time.monotonic_ns() % 2**32)\n            for n in range(2, 5 + (time.monotonic_ns() % 1024))\n        ])\n        return irrational\n\n\n    @classmethod\n    def encode_irrational(cls, irrational: Union[str,mp.mpf], offset=0) -> List[int]:\n        if irrational is None:\n            irrational = cls.generate_secure_irrational()\n        return encode_irrational(irrational, offset)\n\n\n\n    ### Logging\n\n    def win_symbol(self):\n        \"\"\" Symbol representing the reward from the previous turn \"\"\"\n        action   = ( self.history['action']   or [None] )[-1]\n        opponent = ( self.history['opponent'] or [None] )[-1]\n        if isinstance(action, int) and isinstance(opponent, int):\n            if action % 3 == (opponent + 1) % 3: return '+'  # win\n            if action % 3 == (opponent + 0) % 3: return '|'  # draw\n            if action % 3 == (opponent - 1) % 3: return '-'  # loss\n        return ' '\n\n\nirrational_instance = IrrationalAgent(name='pi', offset=0)\ndef irrational_agent(obs, conf):\n    return irrational_instance.agent(obs, conf)\n","fb0e9e94":"%%writefile -a IrrationalSearchAgent.py\n# Source: https:\/\/www.kaggle.com\/jamesmcguigan\/random-seed-search-irrational-search-agent\/\n# Source: https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/rock-paper-scissors\/rng\/IrrationalSearchAgent.py\nfrom typing import List, Tuple, Union\n\nfrom mpmath import mp\n\n# from IrrationalAgent import IrrationalAgent\n\n\nclass IrrationalSearchAgent(IrrationalAgent):\n    \"\"\"\n    This attempts a Password Attack against IrrationalAgent\n\n    Its only vulnerability is Password Attack.\n    Pleased to meet you, won't you guess my name?\n\n    There are an uncountable infinity of irrational numbers,\n    but a rather limited number of useful irrationals with pronounceable names\n\n    This will only work if the opponent has chosen to play an irrational agent\n    but has chosen to play a popular named irrational\n    and has also chosen the same trinary encoding algorithm\n\n    If the opponent is not playing a known irrational sequence\n    then the true Nash Equilibrium is to play a secret and unnamed irrational sequence\n    \"\"\"\n\n    def __init__(self, name='irrational', irrational=None, search: List[Union[str, mp.mpf]]=None, verbose=True):\n        search = {\n            f'irrational#{n}': self.encode_irrational(number)\n            for n, number in enumerate(search)\n        } if search is not None else {}\n        self.irrationals = { **self.__class__.irrationals, **search }\n        super().__init__(name=name, irrational=irrational, verbose=verbose)\n\n\n    def action(self, obs, conf):\n        expected, irrational_name = self.search_irrationals(self.history['opponent'])\n        if expected is not None:\n            action   = (expected + 1) % conf.signs\n            opponent = ( self.history['opponent'] or [None] )[-1]\n            if self.verbose:\n                print(f\"{obs.step:4d} | {opponent}{self.win_symbol()} > action {expected} -> {action} | \" +\n                      f\"Found Irrational: {irrational_name}\")\n        else:\n            action = super().action(obs, conf)  # play our own irrational number sequence\n        return action\n\n\n    def search_irrationals(self, sequence: List[int]) -> Tuple[int, str]:\n        \"\"\"\n        Search through list of named irrational sequences\n        if found, return the next expected number in the sequence along with the name\n        \"\"\"\n        expected, irrational_name = None, None\n        if len(sequence):\n            for offset in [0,1,2]:\n                for irrational_name, irrational in self.irrationals.items():\n                    irrational = [ (n + offset) % 3 for n in irrational[:len(sequence)+1] ]\n                    if irrational[:len(sequence)] == sequence:\n                        expected = irrational[len(sequence)]\n                        break\n                else: continue\n                break\n        return expected, irrational_name\n\n\n\n\nirrational_search_instance = IrrationalSearchAgent()\ndef irrational_search_agent(obs, conf):\n    return irrational_search_instance.agent(obs, conf)\n","b0954434":"%run IrrationalSearchAgent.py","3e1caaef":"%%writefile test_IrrationalSeedSearch.py\nimport pytest\nfrom kaggle_environments import evaluate\n\nfrom IrrationalSearchAgent import IrrationalAgent\nfrom IrrationalSearchAgent import IrrationalSearchAgent\nimport numpy as np\n\n@pytest.mark.parametrize(\"name\",   IrrationalSearchAgent.irrationals.keys())\n@pytest.mark.parametrize(\"offset\", [0,1,2])\ndef test_IrrationalSearchAgent_vs_named_irrational(name, offset):\n    \"\"\" Assert we can find the full irrational sequence every time \"\"\"\n    episodeSteps = 1000\n    results = evaluate(\n        \"rps\",\n        [\n            IrrationalAgent(name=name, offset=offset),\n            IrrationalSearchAgent()\n        ],\n        configuration={\n            \"episodeSteps\": episodeSteps,\n            # \"actTimeout\":   1000,\n        },\n    )\n    assert (results[0][0] + episodeSteps\/2.1) < results[0][1]\n\n\n\ndef test_IrrationalSearchAgent_vs_Irrational():\n    episodeSteps = 100\n    results = evaluate(\n        \"rps\",\n        [\n            IrrationalAgent(),\n            IrrationalSearchAgent()\n        ],\n        configuration={\n            \"episodeSteps\": episodeSteps,\n            # \"actTimeout\":   1000,\n        },\n        num_episodes=100,\n        # debug=True, # pull request\n    )\n    results = np.array(results).reshape((-1,2))\n    totals  = np.mean(results, axis=0)\n    std     = np.std(results, axis=0).round(2)\n    winrate = [ np.sum(results[:,0]-20 > results[:,1]),\n                np.sum(results[:,0]+20 < results[:,1]) ]\n\n    print('results', results)\n    print('totals',  totals)\n    print('std',     std)\n    print('winrate', winrate)\n\n    assert len(results[ results == None ]) == 0    # No errored matches\n    assert np.abs(totals[0]) < 0.2 * episodeSteps  # totals are within 20%\n    assert np.abs(totals[1]) < 0.2 * episodeSteps  # totals are within 20%\n    assert np.abs(std[0])    < 0.2 * episodeSteps  # std  within 20%\n    assert np.abs(std[1])    < 0.2 * episodeSteps  # std  within 20%\n","dd923b54":"!pytest -v test_IrrationalSeedSearch.py","2d7f7722":"from kaggle_environments import make, evaluate\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 25}, debug=True)\nenv.run([ IrrationalAgent(name='pi'), IrrationalSearchAgent() ])\nenv.render(mode=\"ipython\", width=400, height=400)","67221617":"from kaggle_environments import make, evaluate\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 25}, debug=True)\nenv.run([ IrrationalAgent(name='irrational'), IrrationalSearchAgent() ])\nenv.render(mode=\"ipython\", width=400, height=400)","e11e4cbb":"%%time\nimport numpy as np\n\nagents  = [ IrrationalSearchAgent(), IrrationalAgent(name='pi') ]\nresults = evaluate(\n    \"rps\",\n    agents,\n    num_episodes=100,\n)\nresults = np.array(results).reshape((-1,2))\nresults[ results == None ] = -1\n\nprint([ getattr(agent, '__name__', agent.__class__.__name__) for agent in agents ])\nprint('winrate', [ np.sum(results[:,0]-20 > results[:,1]),\n                   np.sum(results[:,0]+20 < results[:,1])\n                 ], '\/', len(results))\nprint('totals ', np.sum(results, axis=0))\nprint('std    ', np.std(results, axis=0).round(2))","128e3884":"%%time\nimport numpy as np\n\nagents  = [ IrrationalSearchAgent(), IrrationalAgent() ]\nresults = evaluate(\n    \"rps\",\n    agents,\n    num_episodes=100,\n)\nresults = np.array(results).reshape((-1,2))\nresults[ results == None ] = -1\n\nprint([ getattr(agent, '__name__', agent.__class__.__name__) for agent in agents ])\nprint('winrate', [ np.sum(results[:,0]-20 > results[:,1]),\n                   np.sum(results[:,0]+20 < results[:,1])\n                 ], '\/', len(results))\nprint('totals ', np.sum(results, axis=0))\nprint('std    ', np.std(results, axis=0).round(2))","4eeb93c1":"# Irrational Search Agent\n\nThis is the agent which will test if the opponent is playing an irrational number agent\nbut has chosen to use one of the more popular and named irrational numbers","50e8f915":"# Further Reading\n\nThis notebook is part of a series exploring Rock Paper Scissors:\n\nIrrational\n- [PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-pi-bot)\n- [Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-pi-bot)\n- [Anti-Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-anti-pi-bot)\n- [Irrational Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-agent)\n- [Irrational Search Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-search-agent)\n- [Random Seed Search Nash Equlibrium Opening Book](https:\/\/www.kaggle.com\/jamesmcguigan\/random-seed-search-nash-equlibrium-opening-book)\n\nRNG\n- [Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-random-agent)\n- [RNG Statistics](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-rng-statistics)\n\nSequence\n- [De Bruijn Sequence](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-de-bruijn-sequence)\n\nOpponent Response\n- [Anti-Rotn](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn)\n- [Sequential Strategies](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-sequential-strategies)\n\nStatistical \n- [Weighted Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-weighted-random-agent)\n- [Anti-Rotn Weighted Random](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn-weighted-random)\n- [Statistical Prediction](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-statistical-prediction)\n\nMemory Patterns\n- [Naive Bayes](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-naive-bayes)\n- [Memory Patterns](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-memory-patterns)\n\nDecision Tree\n- [XGBoost](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-xgboost)\n- [Multi Stage Decision Tree](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-stage-decision-tree)\n- [Decision Tree Ensemble](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-decision-tree-ensemble)\n\nNeural Networks\n- [LSTM](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-lstm)\n\nEnsemble\n- [Multi Armed Stats Bandit](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-armed-stats-bandit)\n\nRoShamBo Competition Winners\n- [Iocaine Powder](https:\/\/www.kaggle.com\/jamesmcguigan\/rps-roshambo-comp-iocaine-powder)\n- [Greenberg](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-greenberg)","ea13bbb6":"# Rock Paper Scissors - Irrational Search Agent\n\nThis attempts a Password Attack against [IrrationalAgent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-agent)\n\nIts only vulnerability is Password Attack.\nPleased to meet you, won't you guess my name?\n\nThere are an uncountable infinity of irrational numbers,\nbut a rather limited number of useful irrationals with pronounceable names\n\nThis will only work if the opponent has chosen to play an irrational agent\nbut has chosen to play a popular named irrational\nand has also chosen the same trinary encoding algorithm\n\nIf the opponent is not playing a known irrational sequence\nthen the true Nash Equilibrium is to play a secret and unnamed irrational sequence\n\nIrrationalSearchAgent() either wins or it draws, but it never statistically loses.","0af8d085":"# Irrational Agent\n\nThis is both the base class, and the target of the attack\n\nFor a more extended discussion see the [IrrationalAgent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-agent) notebook","2ef047c4":"# Statistics\n\n- Against a named irrational number, it always wins\n- Against a secret irrational number, it is statistically a draw\n- These statistics match up with the extended discussion from the [IrrationalAgent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-agent) notebook","8b26a0bd":"# Unit Tests","38f33771":"# Demonstration\n\nThis is more advanced than the simple Anti-PI bot, which is only capable of attacking a single named opponent.\n\nAs can be seen here and above with the unit tests, the IrrationalSearchAgent() is capable of performing a Password Attack and getting a perfect score against a range of popular irrational numbers, as well as their counter and counter-counter bots.\n\nThe IrrationalSearchAgent() itself cannot be countered by its own technique. In the absense of a known winning strategy it opts for a draw, by playing an unguessable secret irrational number, which is the true Nash Equlibrium strategy. This agent either wins or it draws, but it never statistically loses."}}