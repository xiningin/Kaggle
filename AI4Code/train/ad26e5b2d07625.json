{"cell_type":{"76641df5":"code","132b01e5":"code","f1706c70":"code","f977cbec":"code","e7e9bd48":"code","2168adf2":"code","54e19277":"code","ccd17587":"code","06270b97":"code","32e6e2eb":"code","c508f377":"code","7b22062a":"code","ba9c3e32":"code","acbc2b01":"code","1fa96636":"code","72343be0":"code","7e82e549":"code","97f01c4f":"code","97996fa7":"code","33ebab8b":"code","0d783bc1":"code","2307d1cb":"code","993307d8":"code","40a628e2":"code","98f5521d":"code","052c9086":"code","3561fff9":"markdown","e97ad15f":"markdown","87b495fb":"markdown","08efb14d":"markdown","7709bfef":"markdown","4297bd31":"markdown","b47d2993":"markdown","761c1a27":"markdown","c4909eda":"markdown","4dd326a4":"markdown","1498cdfa":"markdown","8a4ce94d":"markdown"},"source":{"76641df5":"# !pip install dabl","132b01e5":"import numpy as np \nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# import dabl # \nfrom catboost import Pool, cv, CatBoostClassifier, CatBoostRegressor\n\nfrom sklearn.metrics import mean_squared_error, classification_report\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nimport gc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import metrics\nimport shap\n\npd.set_option('display.max_columns', 300)\nnp.random.seed(566)\npd.set_option('display.max_rows', 200)\npd.set_option('display.width', 1000)\npd.set_option('display.float_format', '{:20,.2f}'.format)\npd.set_option('display.max_colwidth', -1)","f1706c70":"TARGET_COL = \"diabetes_mellitus\"\ndf = pd.read_csv(\"\/kaggle\/input\/widsdatathon2021\/TrainingWiDS2021.csv\")\ndf[\"num_nan\"] = df.isna().sum(axis=1)\nprint(df.shape)\ntest = pd.read_csv(\"\/kaggle\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv\")\ntest[\"num_nan\"] = test.isna().sum(axis=1)\nprint(test.shape)\ndisplay(df)","f977cbec":"# dabl.clean(df)","e7e9bd48":"df[\"encounter_id\"].nunique()\/df.shape[0] #.value_counts().describe() ## all unique","2168adf2":"print(\"encounter id continous compared\")\nprint(df[\"encounter_id\"].describe())\nprint(test[\"encounter_id\"].describe())\n## there doesn;t seem to be chronology in it","54e19277":"set(df[\"hospital_id\"]).intersection(test[\"hospital_id\"])\n## df.merge(test,on=\"hospital_id\",how=\"inner\")","ccd17587":"print(len(set(df[\"icu_id\"]).intersection(set(test[\"icu_id\"]))))\nprint(100* len(set(df[\"icu_id\"]).intersection(set(test[\"icu_id\"])))\/len(set(test[\"icu_id\"])))","06270b97":"DROP_COLS = [\"hospital_id\",\"diabetes_mellitus\",\"encounter_id\"]\ny_train = df[\"diabetes_mellitus\"]\n\ndf.drop(DROP_COLS,axis=1,inplace=True,errors=\"ignore\")\n\ntest_id = test[\"encounter_id\"]\ntest.drop(DROP_COLS,axis=1,inplace=True,errors=\"ignore\")","32e6e2eb":"## Print the categorical columns\nprint([c for c in df.columns if (1<df[c].nunique()) & (df[c].dtype != np.number)& (df[c].dtype != int) ])","c508f377":"categorical_cols =  [#'hospital_id',\n 'ethnicity', 'gender', 'hospital_admit_source', 'icu_admit_source', 'icu_stay_type', 'icu_type']\n","7b22062a":"## Handle na values\ndf[categorical_cols] = df[categorical_cols].fillna(\"\")\ntest[categorical_cols] = test[categorical_cols].fillna(\"\")\n\ndf[categorical_cols].isna().sum()","ba9c3e32":"## Train Test split and remove Target values\nX_train = df.drop([TARGET_COL],axis=1,errors=\"ignore\")\n# y_train = df[TARGET_COL]","acbc2b01":"X_all = pd.concat([X_train,test],ignore_index=True).drop('Unnamed: 0',axis=1,errors=\"ignore\")\nprint(X_all.shape)","1fa96636":"## labels as being in train (1) or test (0)\ny_adv = [1]*X_train.shape[0] + [0]*test.shape[0]\n\nprint(len(y_adv))","72343be0":"## catBoost Pool object\nadv_pool = Pool(data=X_all,label = y_adv,cat_features=categorical_cols)","7e82e549":"model = CatBoostClassifier(verbose=False,iterations=200, eval_metric='AUC')#,learning_rate=0.1, task_type=\"GPU\",)\nmodel.fit(adv_pool, plot=True,silent=True)\nprint(model.get_best_score())","97f01c4f":"explainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(adv_pool)\n# summarize the effects of all the features over all the data\nshap.summary_plot(shap_values, X_all)","97996fa7":"print(\"SHAP Feature importance over just test data\")\nshap_values_test = explainer.shap_values(Pool(data=test.drop('Unnamed: 0',axis=1,errors=\"ignore\"),label = [0]*test.shape[0],cat_features=categorical_cols))\n# summarize the effects of all the features over all the data\nshap.summary_plot(shap_values_test, test.drop('Unnamed: 0',axis=1,errors=\"ignore\"))","33ebab8b":"## drop any additional features we filtered out with adv. selection\nX_train = X_train.drop([\"icu_id\",'Unnamed: 0'],axis=1,errors=\"ignore\")\ntest = test.drop([\"icu_id\",'Unnamed: 0'],axis=1,errors=\"ignore\")","0d783bc1":"## catBoost Pool object\ntrain_pool = Pool(data=X_train,label = y_train,cat_features=categorical_cols)","2307d1cb":"model_basic = CatBoostClassifier(verbose=False)#,learning_rate=0.1, task_type=\"GPU\",) ,iterations=150\nmodel_basic.fit(train_pool, plot=True,silent=True)\nprint(model_basic.get_best_score())","993307d8":"explainer = shap.TreeExplainer(model_basic)\nshap_values = explainer.shap_values(train_pool)\n# summarize the effects of all the features over all the data\nshap.summary_plot(shap_values, X_train)","40a628e2":"test[TARGET_COL] = model_basic.predict(test,prediction_type='Probability')[:,1]","98f5521d":"test[\"encounter_id\"] = test_id # restore test encounter ID. We could also make the catboost model ignore that feature","052c9086":"test[[\"encounter_id\",\"diabetes_mellitus\"]].to_csv(\"submission.csv\",index=False)","3561fff9":"## Adversarial Model\n* Our target is is a data point is in train or test","e97ad15f":"The notebook is adapted from my\/ Dan Ofer's Kernel \n[here](https:\/\/www.kaggle.com\/danofer\/wids-2020-starter-catboost-0-9045-lb). \n\n\nWe will do [adversarial validation](http:\/\/fastml.com\/adversarial-validation-part-one) - how similar are the train and test datasets? (Last year they were highly disjoint, a killer feature!)\n\n* http:\/\/fastml.com\/adversarial-validation-part-one\n","87b495fb":"* We see a difference still, partially in the ICU IDs but also the underlying patient demographics. In WIDS 2020 it stemmed from age and ethnicity. \n* We can also run a K-S (Kolmogorov Smirnov) test to test for distinguishing features and drop those accordingly. ","08efb14d":"### Load the Data","7709bfef":"### Import the Libraries","4297bd31":"### Minor data prep + categoricals\n* Catboost encoding may be overkill","b47d2993":"### Submission File","761c1a27":"## Model - Diabetes target\n* Do model, +- adversarial features, on actual target","c4909eda":"### drop the uniquely discriminating columns and keep the  rest, then do adversarial validation\n* Drop target label, hospital ID","4dd326a4":"### Exploratory Data Analysis\n\nReference Notebook : https:\/\/www.kaggle.com\/yubiabia98\/visualization-exploratory-data-analysis-light\n\n* use dabl to clean the data a bit - based on https:\/\/www.kaggle.com\/usharengaraju\/widsdatathon2021-catboost-starter","1498cdfa":"* Feature importance in final model","8a4ce94d":"### Exploratory Data analysis\n* Check overlap of hospitals, ICUs, encounters (patients)\n* We see that unlike last year, there IS a high degree of overlap of ICUs! \n    * Caveat: we don't know if ICU IDs are unique between hospitals (i.e the different icu numbers might not reporesent different ward between 2 different hospitals). And they are much less likely to be relevant to the diabetes task, than to last years mortality task. "}}