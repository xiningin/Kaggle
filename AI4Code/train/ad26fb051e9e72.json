{"cell_type":{"1514bdad":"code","081b1e2d":"code","8a2dc624":"code","89e8330b":"code","25374b5d":"code","d3094d25":"code","8ce84183":"code","26f83a1d":"code","7622be38":"code","a0d1c2ba":"code","3751c2a1":"code","896f09dc":"code","0ab62433":"code","94e763b3":"code","14762db2":"code","9bc0feaf":"code","cb40e278":"code","b60bc35c":"code","9d0f886a":"code","0643b3d6":"code","11e7ec09":"code","7bb5a10b":"code","90df0a75":"code","4ae9fe7c":"code","28330577":"code","a4dd63d9":"code","0705275b":"code","d73ae991":"code","7f425d2b":"code","3f61caea":"code","859f502a":"code","c5432cdc":"code","d28e8447":"code","ab89eafd":"code","d7550eca":"markdown","8b01c6a4":"markdown","7b3dac47":"markdown","890f84e0":"markdown","c4634f93":"markdown","6e75fdd4":"markdown","2bdc2da0":"markdown","05936cfa":"markdown","6c16d0e0":"markdown","432892d1":"markdown","9be284bc":"markdown","5334b389":"markdown","0edef935":"markdown","e60b4d20":"markdown","65a18c38":"markdown","54fcd647":"markdown","58aa4c9a":"markdown","a3141893":"markdown"},"source":{"1514bdad":"MAX_SAMPLE = None # set a small number for experimentation, set None for production.","081b1e2d":"!pip install datasets --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\/packages\/datasets\n!pip install ..\/input\/coleridge-packages\/seqeval-1.2.2-py3-none-any.whl\n!pip install ..\/input\/coleridge-packages\/tokenizers-0.10.1-cp37-cp37m-manylinux1_x86_64.whl\n!pip install ..\/input\/coleridge-packages\/transformers-4.5.0.dev0-py3-none-any.whl\n!pip install ..\/input\/recordlinkage\/jellyfish-0.8.2-cp37-cp37m-manylinux2014_x86_64.whl","8a2dc624":"import os\nimport re\nimport json\nimport time\nimport datetime\nimport random\nimport glob\nimport importlib\n\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.spatial import distance\n\nrandom.seed(123)\nnp.random.seed(456)\n\nimport jellyfish as jf","89e8330b":"train_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train.csv'\ntrain = pd.read_csv(train_path)\ntrain = train[:MAX_SAMPLE]\n\npaper_train_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\npapers = {}\nfor paper_id in train['Id'].unique():\n    with open(f'{paper_train_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers[paper_id] = paper\n        \n#papers","25374b5d":"sample_submission_path = '..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv'\nsample_submission = pd.read_csv(sample_submission_path)\n\npaper_test_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/test'\nfor paper_id in sample_submission['Id']:\n    with open(f'{paper_test_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers[paper_id] = paper","d3094d25":"train.head()","8ce84183":"train.info()","26f83a1d":"# finding unique values in each column\n[print(f\"{col}:{len(train[col].unique())}\") for col in train.columns]","7622be38":"from wordcloud import WordCloud, STOPWORDS\nfrom nltk.probability import FreqDist\n\nwords = list(train['cleaned_label'].values)\nstopwords=['ourselves', 'hers','the','of','and','in', 'between', 'yourself', 'but', 'again','of', 'there', 'about', 'once', 'during', 'out', 'very', 'having', 'with', 'they', 'own', 'an', 'be', 'some', 'for', 'do', 'its', 'yours', 'such', 'into', 'of', 'most', 'itself', 'other', 'off', 'is', 's', 'am', 'or', 'who', 'as', 'from', 'him', 'each', 'the', 'themselves', 'until', 'below', 'are', 'we', 'these', 'your', 'his', 'through', 'don', 'nor', 'me', 'were', 'her', 'more', 'himself', 'this', 'down', 'should', 'our', 'their', 'while', 'above', 'both', 'up', 'to', 'ours', 'had', 'she', 'all', 'no', 'when', 'at', 'any', 'before', 'them', 'same', 'and', 'been', 'have', 'in', 'will', 'on', 'does', 'yourselves', 'then', 'that', 'because', 'what', 'over', 'why', 'so', 'can', 'did', 'not', 'now', 'under', 'he', 'you', 'herself', 'has', 'just', 'where', 'too', 'only', 'myself', 'which', 'those', 'i', 'after', 'few', 'whom', 't', 'being', 'if', 'theirs', 'my', 'against', 'a', 'by', 'doing', 'it', 'how', 'further', 'was', 'here', 'than']\nsplit_words=[]\nfor word in words:\n    lo_w=[]\n    list_of_words=str(word).split()\n    for w in list_of_words:\n        if w not in stopwords:\n            lo_w.append(w)\n    split_words.append(lo_w)\nallwords = []\nfor wordlist in split_words:\n    allwords += wordlist","a0d1c2ba":"mostcommon = FreqDist(allwords).most_common(100)\nwordcloud = WordCloud(width=1600, height=800, background_color='white', stopwords=STOPWORDS).generate(str(mostcommon))\nfig = plt.figure(figsize=(30,10), facecolor='white')\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.title('Top 100 Most Common Words in cleaned_label', fontsize=50)\nplt.tight_layout(pad=0)\nplt.show()\n\nmostcommon_small = FreqDist(allwords).most_common(25)\nx, y = zip(*mostcommon_small)\nplt.figure(figsize=(50,30))\nplt.margins(0.02)\nplt.bar(x, y)\nplt.xlabel('Words', fontsize=50)\nplt.ylabel('Frequency of Words', fontsize=50)\nplt.yticks(fontsize=40)\nplt.xticks(rotation=60, fontsize=40)\nplt.tight_layout(pad=0)\nplt.title('Freq of 25 Most Common Words in cleaned_label', fontsize=60)\nplt.show()","3751c2a1":"all_labels = set()\n\nfor label_1, label_2, label_3 in train[['dataset_title', 'dataset_label', 'cleaned_label']].itertuples(index=False):\n    all_labels.add(str(label_1).lower())\n    all_labels.add(str(label_2).lower())\n    all_labels.add(str(label_3).lower())\n    \nprint(f'No. different labels: {len(all_labels)}')","896f09dc":"# extDf = pd.read_csv('..\/input\/bigger-govt-dataset-list\/data_set_800.csv')\n# extDf = pd.read_csv('..\/input\/bigger-govt-dataset-list\/data_set_26897.csv')\n\n# extDf = pd.read_csv('..\/input\/filtered-bigger-govt-dataset\/ExtraLabelsCleaned.txt')\n# extDf = extDf.rename(columns={'Label': 'title'})\n# extDf = extDf.drop(' Hits',axis='columns')\n\n# extDf = pd.read_csv('..\/input\/coleridge-additional-gov-datasets-22000popular\/additional_gov_datasets_22000popular.csv')\n# extDf = pd.read_csv('..\/input\/coleridge-additional-gov-datasets-22000popular\/data_set_800_with8000popular.csv')\n\n# print(len(extDf))\n\n# extDf.head(20)","0ab62433":"# added this in version 13\n# for l in extDf.title:\n#     all_labels.add(l)\n    \n# all_labels = set(all_labels)\n# print(f'No. different labels: {len(all_labels)}')","94e763b3":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()\n\ndef totally_clean_text(txt):\n    txt = clean_text(txt)\n    txt = re.sub(' +', ' ', txt)\n    return txt","14762db2":"literal_preds = []\n\nfor paper_id in sample_submission['Id']:\n    paper = papers[paper_id]\n    text_1 = '. '.join(section['text'] for section in paper).lower()\n    text_2 = totally_clean_text(text_1)\n    \n    labels = set()\n    for label in all_labels:\n        if label in text_1 or label in text_2:\n            labels.add(clean_text(label))\n    \n    literal_preds.append('|'.join(labels))\n","9bc0feaf":"# def read_json_pub(filename, train_data_path=paper_train_folder, output='text'):\n#     json_path = os.path.join(train_data_path, (filename+'.json'))\n#     headings = []\n#     contents = []\n#     combined = []\n#     with open(json_path, 'r') as f:\n#         json_decode = json.load(f)\n#         for data in json_decode:\n#             headings.append(data.get('section_title'))\n#             contents.append(data.get('text'))\n#             combined.append(data.get('section_title'))\n#             combined.append(data.get('text'))\n    \n#     all_headings = ' '.join(headings)\n#     all_contents = ' '.join(contents)\n#     all_data = '. '.join(combined)\n    \n#     if output == 'text':\n#         return all_contents\n#     elif output == 'head':\n#         return all_headings\n#     else:\n#         return all_data","cb40e278":"# # https:\/\/www.kaggle.com\/chienhsianghung\/external-datasets-matching-mlm\n# # https:\/\/www.kaggle.com\/mlconsult\/isin-big-dataset\n\n# def text_cleaning(text):\n#     '''\n#     Converts all text to lower case, Removes special charecters, emojis and multiple spaces\n#     text - Sentence that needs to be cleaned\n#     '''\n#     text = re.sub('[^A-Za-z0-9]+', ' ', str(text).lower()).strip()\n#     text = re.sub(' +', ' ', text)\n#     emoji_pattern = re.compile(\"[\"\n#                                u\"\\U0001F600-\\U0001F64F\"  # emoticons\n#                                u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n#                                u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n#                                u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n#                                \"]+\", flags=re.UNICODE)\n#     text = emoji_pattern.sub(r'', text)\n#     return text\n\n# literal_preds = []\n# to_append = []\n\n# for index, row in sample_submission.iterrows():\n#     to_append = [row['Id'],'']\n#     large_string = str(read_json_pub(row['Id'], paper_test_folder))\n#     clean_string = text_cleaning(large_string)\n    \n#     for index, row2 in extDf.iterrows():\n#         query_string = str(row2['title'])\n#         if query_string in clean_string:\n#             if to_append[1] != '' and clean_text(query_string) not in to_append[1]:\n#                 to_append[1] = to_append[1] + '|' + clean_text(query_string)\n#             if to_append[1] == '':\n#                 to_append[1] = clean_text(query_string)\n#     literal_preds.append(*to_append[1:])","b60bc35c":"literal_preds[:5]","9d0f886a":"# MAX_LENGTH = 64 # max no. words for each sentence.\n# OVERLAP = 20 # if a sentence exceeds MAX_LENGTH, we split it to multiple sentences with overlapping\n\n# PREDICT_BATCH = 64000 \n\n# PRETRAINED_PATH = '..\/input\/coleridge-bert-models\/output'\n# TEST_INPUT_SAVE_PATH = '.\/input_data'\n# TEST_NER_DATA_FILE = 'test_ner_input.json'\n# TRAIN_PATH = '..\/input\/coleridge-bert-models\/train_ner.json'\n# VAL_PATH = '..\/input\/coleridge-bert-models\/train_ner.json'\n\n# PREDICTION_SAVE_PATH = '.\/pred'\n# PREDICTION_FILE = 'test_predictions.txt'","0643b3d6":"# train = train.groupby('Id').agg({\n#     'pub_title': 'first',\n#     'dataset_title': '|'.join,\n#     'dataset_label': '|'.join,\n#     'cleaned_label': '|'.join\n# }).reset_index()\n\n# print(f'No. grouped training rows: {len(train)}')","11e7ec09":"# def clean_training_text(txt):\n#     \"\"\"\n#     similar to the default clean_text function but without lowercasing.\n#     \"\"\"\n#     return re.sub('[^A-Za-z0-9]+', ' ', str(txt)).strip()\n\n# def shorten_sentences(sentences):\n#     short_sentences = []\n#     for sentence in sentences:\n#         words = sentence.split()\n#         if len(words) > MAX_LENGTH:\n#             for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n#                 short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n#         else:\n#             short_sentences.append(sentence)\n#     return short_sentences","7bb5a10b":"# test_rows = [] # test data in NER format\n# paper_length = [] # store the number of sentences each paper has\n\n# for paper_id in sample_submission['Id']:\n#     # load paper\n#     paper = papers[paper_id]\n    \n#     # extract sentences\n#     sentences = [clean_training_text(sentence) for section in paper \n#                  for sentence in section['text'].split('.')\n#                 ]\n#     sentences = shorten_sentences(sentences) # make sentences short\n#     sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n#     sentences = [sentence for sentence in sentences if any(word in sentence.lower() for word in ['data', 'study'])]\n        \n#     # collect all sentences in json\n#     for sentence in sentences:\n#         sentence_words = sentence.split()\n#         dummy_tags = ['O']*len(sentence_words)\n#         test_rows.append({'tokens' : sentence_words, 'tags' : dummy_tags})\n    \n#     # track which sentence belongs to which data point\n#     paper_length.append(len(sentences))\n    \n# print(f'total number of sentences: {len(test_rows)}')","90df0a75":"# os.environ[\"MODEL_PATH\"] = f\"{PRETRAINED_PATH}\"\n# os.environ[\"TRAIN_FILE\"] = f\"{TRAIN_PATH}\"\n# os.environ[\"VALIDATION_FILE\"] = f\"{VAL_PATH}\"\n# os.environ[\"TEST_FILE\"] = f\"{TEST_INPUT_SAVE_PATH}\/{TEST_NER_DATA_FILE}\"\n# os.environ[\"OUTPUT_DIR\"] = f\"{PREDICTION_SAVE_PATH}\"","4ae9fe7c":"# # copy my_seqeval.py to the working directory because the input directory is non-writable\n# !cp \/kaggle\/input\/coleridge-packages\/my_seqeval.py .\/\n\n# # make necessart directories and files\n# os.makedirs(TEST_INPUT_SAVE_PATH, exist_ok=True)","28330577":"# def bert_predict():\n#     !python ..\/input\/kaggle-ner-utils\/kaggle_run_ner.py \\\n#     --model_name_or_path \"$MODEL_PATH\" \\\n#     --train_file \"$TRAIN_FILE\" \\\n#     --validation_file \"$VALIDATION_FILE\" \\\n#     --test_file \"$TEST_FILE\" \\\n#     --output_dir \"$OUTPUT_DIR\" \\\n#     --report_to 'none' \\\n#     --seed 123 \\\n#     --do_predict","a4dd63d9":"# bert_outputs = []\n\n# for batch_begin in range(0, len(test_rows), PREDICT_BATCH):\n#     # write data rows to input file\n#     with open(f'{TEST_INPUT_SAVE_PATH}\/{TEST_NER_DATA_FILE}', 'w') as f:\n#         for row in test_rows[batch_begin:batch_begin+PREDICT_BATCH]:\n#             json.dump(row, f)\n#             f.write('\\n')\n    \n#     # remove output dir\n#     !rm -r \"$OUTPUT_DIR\"\n    \n#     # do predict\n#     bert_predict()\n    \n#     # read predictions\n#     with open(f'{PREDICTION_SAVE_PATH}\/{PREDICTION_FILE}') as f:\n#         this_preds = f.read().split('\\n')[:-1]\n#         bert_outputs += [pred.split() for pred in this_preds]","0705275b":"# # get test sentences\n# test_sentences = [row['tokens'] for row in test_rows]\n\n# del test_rows","d73ae991":"# bert_dataset_labels = [] # store all dataset labels for each publication\n\n# for length in paper_length:\n#     labels = set()\n#     for sentence, pred in zip(test_sentences[:length], bert_outputs[:length]):\n#         curr_phrase = ''\n#         for word, tag in zip(sentence, pred):\n#             if tag == 'B': # start a new phrase\n#                 if curr_phrase:\n#                     labels.add(curr_phrase)\n#                     curr_phrase = ''\n#                 curr_phrase = word\n#             elif tag == 'I' and curr_phrase: # continue the phrase\n#                 curr_phrase += ' ' + word\n#             else: # end last phrase (if any)\n#                 if curr_phrase:\n#                     labels.add(curr_phrase)\n#                     curr_phrase = ''\n#         # check if the label is the suffix of the sentence\n#         if curr_phrase:\n#             labels.add(curr_phrase)\n#             curr_phrase = ''\n    \n#     # record dataset labels for this publication\n#     bert_dataset_labels.append(labels)\n    \n#     del test_sentences[:length], bert_outputs[:length]","7f425d2b":"# bert_dataset_labels[:5]","3f61caea":"def jaccard_similarity(s1, s2):\n    l1 = s1.split(\" \")\n    l2 = s2.split(\" \")    \n    intersection = len(list(set(l1).intersection(l2)))\n    union = (len(l1) + len(l2)) - intersection\n    return float(intersection) \/ union\n\nfiltered_bert_labels = []\n\nfor labels in bert_dataset_labels:\n    filtered = []\n    print(labels)\n\n    for label in sorted(labels, key=len):\n        label = clean_text(label)\n        if len(filtered) == 0 or all(jaccard_similarity(label, got_label) < 0.75 for got_label in filtered):\n#         if len(filtered) == 0 or all(jf.jaro_winkler_similarity(label, got_label) < 0.75 for got_label in filtered):\n            filtered.append(label)\n            print(filtered)\n    \n    filtered_bert_labels.append('|'.join(filtered))","859f502a":"filtered_bert_labels[:5]","c5432cdc":"# final_predictions = []\n# for literal_match, bert_pred in zip(literal_preds, filtered_bert_labels):\n#     if literal_match:\n#         final_predictions.append(literal_match)\n#     else:\n#         print(\"we used BERT\")\n#         final_predictions.append(bert_pred)\n        \nfinal_predictions = []\nfor literal_match in literal_preds:\n    final_predictions.append(literal_match)","d28e8447":"sample_submission['PredictionString'] = final_predictions\nsample_submission.head()","ab89eafd":"sample_submission.to_csv(f'submission.csv', index=False)","d7550eca":"# Literal matching","8b01c6a4":"# Import","7b3dac47":"# Aggregate final predictions and write submission file","890f84e0":"Group by publication, training labels should have the same form as expected output.","c4634f93":"### Paths and Hyperparameters","6e75fdd4":"### Filter based on Jaccard score and clean","2bdc2da0":"# Data Exploration","05936cfa":"### Create a knowledge bank","6c16d0e0":"### Do predict and collect results","432892d1":"### Add extra data","9be284bc":"### Restore Dataset labels from predictions","5334b389":"# Bert prediction","0edef935":"### Data Visualisation","e60b4d20":"### Matching on test data","65a18c38":"# Install packages","54fcd647":"### Transform data to NER format","58aa4c9a":"This notebook gives a simple combination of literal matching and Named Entity Recognition using BERT (base model from huggingface).\n\nThe training phase of the BERT model was done in another kernel: Pytorch BERT for Named Entity Recognition.","a3141893":"# Load data"}}