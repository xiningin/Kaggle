{"cell_type":{"d1c5f010":"code","fad49779":"code","7c3f4419":"code","95639575":"code","fcf11614":"code","b34424d8":"code","8201e6a7":"code","84dad757":"code","2de1fe91":"code","1930fbe3":"code","44458440":"code","6e8d738f":"code","c9856bb8":"code","6fda9e52":"code","3bf6dbac":"code","8f753228":"code","5bcc44cf":"code","c5012590":"code","26ff4230":"code","f2ec10e2":"code","881bd377":"markdown","d1c6185c":"markdown","a325c04a":"markdown","b37decf1":"markdown","f6d34c8f":"markdown","aa137034":"markdown","cc11a61a":"markdown","bbe6cf26":"markdown","befd3976":"markdown","6e648662":"markdown","8617e996":"markdown","6e4c4778":"markdown"},"source":{"d1c5f010":"#Genel komutlar\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pandas import read_csv\n#RMSE ile tahmin hatalar\u0131m\u0131 belirlemek i\u00e7in sqrt \u00e7a\u011f\u0131rd\u0131m.(evaluate forecast)\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n#Verisetini ay\u0131klamak i\u00e7in \u00e7a\u011f\u0131rd\u0131m\nfrom numpy import split\nfrom numpy import array\n\n#LSTM MMODELLET\u0130M \u0130\u00c7\u0130N GEREKL\u0130 KERAS K\u00dcT\u00dcPHANELER\u0130M\nfrom keras.optimizers import Adam\nfrom keras.layers import Dropout\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.layers import LSTM\nfrom keras.layers import RepeatVector\nfrom keras.layers import TimeDistributed\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint, TensorBoard","fad49779":"path = \"..\/input\/solar-radiation-dataset\/2017_2019.csv\"\ndf = pd.read_csv(path)","7c3f4419":"df=df.drop(['Unnamed: 18',\"DHI\",\"DNI\",\"Clearsky DHI\" ,\"Clearsky DNI\",\"Clearsky GHI\"], axis = 1) \n","95639575":"cols = [\"Year\",\"Month\",\"Day\",\"Hour\",\"Minute\"]\ndf[\"date_time\"] = df[cols].apply(lambda row: \"-\".join(row.values.astype(str)), axis=1)","fcf11614":"df['date_time'] = pd.to_datetime(df['date_time'], format='%Y-%m-%d-%H-%M')","b34424d8":"df=df.drop([\"Year\",\"Month\",\"Day\",\"Hour\",\"Minute\"], axis = 1)","8201e6a7":"df=df.set_index('date_time') #Columnu index yapmak i\u00e7in","84dad757":"df.head()","2de1fe91":"df1 = df.pop('GHI') # GHI s\u00fctununu sil ve df1 i\u00e7ine kaydet.\ndf['GHI']=df1 # GHI  serisini yeni bir s\u00fctun olarak sona ekle.\n","1930fbe3":"# split into days\nfrom numpy import split\nfrom numpy import array\n\n \n# split a univariate dataset into train\/test sets\ndef split_dataset(df):\n  train=df[100608:104448]\n\n  test=df[104448:]\n  train = array(split(train, len(train)\/4))#g\u00fcnl\u00fck b\u00f6lme yapt\u0131\u011f\u0131m i\u00e7in 96 ald\u0131m.\n  test = array(split(test, len(test)\/4))\n  return train, test","44458440":"train, test = split_dataset(df.values)#verisetini yukar\u0131da yaz\u0131lan fonksiyon i\u00e7inde ay\u0131rd\u0131m.","6e8d738f":"print('train shape == {}.'.format(train.shape))\nprint('test shape == {}.'.format(test.shape))\n","c9856bb8":"def evaluate_forecasts(actual, predicted):\n\tscores = list()\n\t# Her bir ger\u00e7ek (test) de\u011ferini d\u00f6ng\u00fcye sokup rmse de\u011ferini \u00f6l\u00e7mek i\u00e7in yaz\u0131lm\u0131\u015ft\u0131r.\n\tfor i in range(actual.shape[1]):\n\t\t# calculate mse\n\t\tmse = mean_squared_error(actual[:, i], predicted[:, i])\n\t\t# calculate rmse\n\t\trmse = sqrt(mse)\n\t\t# store\n\t\tscores.append(rmse)#hepsini score dosyas\u0131na kaydet\n\t# calculate overall RMSE\n\ts = 0\n\tfor row in range(actual.shape[0]):\n\t\tfor col in range(actual.shape[1]):\n\t\t\ts += (actual[row, col] - predicted[row, col])**2\n\tscore = sqrt(s \/ (actual.shape[0] * actual.shape[1]))\n\treturn score, scores","6fda9e52":"# Skoru (Rmse de\u011ferlerini) g\u00f6rselle\u015ftirme\ndef summarize_scores(name, score, scores):\n\ts_scores = ', '.join(['%.1f' % s for s in scores])\n\tprint('%s: [%.3f] %s' % (name, score, s_scores))","3bf6dbac":"\n# input ve output de\u011ferlerini ayarlama\ndef to_supervised(train, n_input, n_out=4):\n\t# flatten data\n\tdata = train.reshape((train.shape[0]*train.shape[1], train.shape[2]))\n\tX, y = list(), list()\n\tin_start = 0\n\t# step over the entire history one time step at a time\n\tfor _ in range(len(data)):\n\t\t# define the end of the input sequence\n\t\tin_end = in_start + n_input\n\t\tout_end = in_end + n_out\n\t\t# ensure we have enough data for this instance\n\t\tif out_end <= len(data):\n\t\t\tX.append(data[in_start:in_end, :])\n\t\t\ty.append(data[in_end:out_end, 0])\n\t\t# move along one time step\n\t\tin_start += 1\n\treturn array(X), array(y)","8f753228":"# train the model\ndef build_model(train, n_input):\n\n\n\t# prepare data\n\ttrain_x, train_y = to_supervised(train, n_input)\n\t# define parameters\n\tverbose, epochs, batch_size = 1, 50, 16\n  #timesteps bizim belirledi\u011fimiz 96 de\u011feri(1 g\u00fcn)\n  #feature ,\u00f6zellik say\u0131s\u0131 = 13\n  #\u00e7\u0131kt\u0131,(n_output) de\u011feri y nin 2. de\u011feri \n\tn_timesteps, n_features, n_outputs = train_x.shape[1], train_x.shape[2], train_y.shape[1]\n\t# reshape output into [samples, timesteps, features]\n\ttrain_y = train_y.reshape((train_y.shape[0], train_y.shape[1], 1))\n\t# define model\n\tmodel = Sequential()\n\tmodel.add(LSTM(128, activation='relu', input_shape=(n_timesteps, n_features))) #giri\u015f de\u011ferini 200 n\u00f6ronla deneme\n\tmodel.add(RepeatVector(n_outputs)) # iki boyutlu girdiyi 3 boyuta \u00e7evirme komutu.input_shape=(n_timesteps,n_outputs, n_features)olur\n\tmodel.add(LSTM(128,  activation='relu',return_sequences=True))\n\tmodel.add(TimeDistributed(Dense(64, activation='relu')))#time distribute girdi ve \u00e7\u0131kt\u0131s\u0131 3 D olmal\u0131d\u0131r.\n\tmodel.add(TimeDistributed(Dense(1)))\n\n\tmodel.compile(optimizer = Adam(learning_rate=0.01), loss='mean_squared_error')\n\t# fit network\n\tmodel.fit(train_x, train_y, epochs=epochs, batch_size=batch_size, verbose=verbose)\n\treturn model","5bcc44cf":"def forecast(model, history, n_input):\n\t# flatten data\n\tdata = array(history)\n\tdata = data.reshape((data.shape[0]*data.shape[1], data.shape[2]))\n\t# retrieve last observations for input data\n\tinput_x = data[-n_input:, :]\n\t# reshape into [1, n_input, n]\n\tinput_x = input_x.reshape((1, input_x.shape[0], input_x.shape[1]))\n\t# forecast the next week\n\tyhat = model.predict(input_x, verbose=0)\n\t# we only want the vector forecast\n\tyhat = yhat[0]\n\treturn yhat\n ","c5012590":"# modeli train \u00fcst\u00fcnde \u00e7al\u0131\u015ft\u0131r\u0131p,test ile kar\u015f\u0131la\u015ft\u0131rmak\ndef evaluate_model(train, test, n_input):\n\t\n\tmodel = build_model(train, n_input)\n\tmodel.history.history.keys()\n\thistory = [x for x in train]\n\tmyloss = model.history.history[\"loss\"]\n\n\tpredictions = list()\n\tfor i in range(len(test)):\n\t\t# Traini tahmin etme ve y headi olu\u015fturma\n\t\tyhat_sequence = forecast(model, history, n_input)\n\t\t# tahminleri kaydetme\n\t\tpredictions.append(yhat_sequence)\n\t\t# get real observation and add to history for predicting the next week\n    #test verilerinin indexe g\u00f6re dizili\u015fi ve tahmin\n\t\thistory.append(test[i, :])\n\t# evaluate predictions hours for each day\n\tpredictions = array(predictions)\n\tscore, scores = evaluate_forecasts(test[:, :, 0], predictions)\n\treturn score, scores","26ff4230":"n_input = 4\nscore, scores = evaluate_model(train, test, n_input)","f2ec10e2":"summarize_scores('lstm:rmse ortalama', score, scores)","881bd377":"1-VER\u0130 HAZIRLAMA A\u015eAMASI\n","d1c6185c":"Tahmin etmek istedi\u011fim de\u011feri son s\u00fctuna al\u0131yorum.","a325c04a":"Verisetini olu\u015fturuken olu\u015fan bo\u015f s\u00fctunu sildim","b37decf1":"Modeldi h\u0131zland\u0131rmak veya iyile\u015ftirmek i\u00e7in uygulanabilecek \u015feyler. \n\n-n\u00f6ron say\u0131s\u0131n\u0131 de\u011fi\u015ftirmek\n\n-dropout layer\u0131 eklemek\n\n-aktivasyon fonksiyonlar\u0131n\u0131 de\u011fi\u015ftirmek\n\n-optimizer\u0131 de\u011fi\u015ftirmek.(adam ideal olabilir )","f6d34c8f":"Verisetinde bir trend yakalamas\u0131 i\u00e7in  uygun timestep(zamanaral\u0131\u011f\u0131) de\u011feri ayarlamaya \u00e7al\u0131\u015ft\u0131m.\n\n!!!! BURASINI OPT\u0130M\u0130ZE ETMEL\u0130Y\u0130M!!!!\n\nNe kadar bir zaman\u0131 tahmin etmeliyim (96 data=1 g\u00fcn).\n\nHangi zaman aral\u0131\u011f\u0131n\u0131 input hangisini output almal\u0131y\u0131m?\nSolar radyasyon verisi sabah 8 ak\u015fam 5 aral\u0131\u011f\u0131nda \u00f6l\u00e7\u00fcl\u00fcyor genelde. Bu saatler d\u0131\u015f\u0131nda radyasyon s\u0131f\u0131ra \u00e7ok yak\u0131n . bu y\u00fczden 1 g\u00fcn\u00fc traine (X) ve bu g\u00fcn\u00fcn sabah\u0131n\u0131 outputa koyarsam(y) sa\u00e7ma bir  sonuca ula\u015fabilirim. ","aa137034":"Gerekli k\u00fct\u00fcphaneleri \u00e7a\u011f\u0131ral\u0131m ","cc11a61a":"Her bir \u00e7\u0131kt\u0131ya rmse uygulama i\u015flemi.","bbe6cf26":"Verisetini LSTM modelinde \u00f6\u011frenilecek \u015fekile getirmek i\u00e7in 3 boyutlu hale getirmem laz\u0131m. Tek bir inputta","befd3976":"-Zaman s\u00fctunlar\u0131n\u0131 birle\u015ftirip datetime'a \u00e7evirdim, sonra di\u011fer s\u00fctunlar\u0131 sildim.\n\n-Datetime s\u00fctununu index yapt\u0131m .","6e648662":"#Eklemem gerek!:\n-Daha sa\u011fl\u0131kl\u0131 bir analiz i\u00e7in model s\u00fcresi . \nLoss grafi\u011fi(gradient descent minimuma yakla\u015f\u0131yor mu ? )\n-tensorflowda bir model kurmak  durumu h\u0131zland\u0131rabilir bunu da denemem laz\u0131m .\n#Warning \nSistemin cuDNN e g\u00f6re \u00e7al\u0131\u015fmamas\u0131 modeli yava\u015flat\u0131yor san\u0131r\u0131m .\n\n-( Layer lstm_13 will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU)","8617e996":"Keras k\u00fct\u00fcphanesi ile haz\u0131rlanacak neural networklerde inputlar\u0131 numpy array olarak ay\u0131rmak zorunday\u0131z.\n\nSinir a\u011flar\u0131 modelleri numpy arrayi olarak i\u015flenir.","6e4c4778":"Her bir g\u00fcnde 15 dk'l\u0131k 96 \u00f6l\u00e7\u00fcm var.Modeli denerken i\u015flemi h\u0131zland\u0131rmak i\u00e7in \u015fimdilik 40 g\u00fcnl\u00fck bir \u00f6\u011frenme veri seti olu\u015fturdum.Her bir sat\u0131rda 13 \u00f6zellik(feature) var.Bu y\u00fczden modele okutaca\u011f\u0131m\u0131z \u00f6\u011frenme \u015feklini 40,96,13  olarak olu\u015fturdum.\nTest setini de k\u00fc\u00e7\u00fck tutmak ad\u0131na 1 hafta sonras\u0131 olarak ald\u0131m.7,96,13"}}