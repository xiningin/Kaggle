{"cell_type":{"d732c0cd":"code","c44bee9c":"code","b7e1f2ce":"code","1c865ffe":"code","34dfcef8":"code","2cfaec8f":"code","16ca56aa":"code","034b53b0":"code","03cd4624":"code","144871cf":"code","5b73ff19":"code","6faaa29b":"code","ccd3c4a6":"code","6504da13":"code","5918682f":"code","c4a80b84":"code","200b4340":"code","2066213e":"code","946aefb4":"code","0359fd2c":"code","d41180a3":"code","80c09582":"code","ae179774":"code","10a7c007":"code","60106ae1":"markdown","aca63694":"markdown","ea0db2d3":"markdown","bbc7b610":"markdown","5a1fd5e3":"markdown","065d871e":"markdown","c8c8f262":"markdown","18514755":"markdown","d4d044b2":"markdown","e09abfdf":"markdown","9a20cdb3":"markdown","5b7948d8":"markdown","ec0da9c1":"markdown","8a3f638b":"markdown","07ce0afd":"markdown","8a197b49":"markdown","55852f78":"markdown","8b510a9a":"markdown","27deaf1a":"markdown","501f980e":"markdown"},"source":{"d732c0cd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nfrom scipy.spatial import distance\nfrom scipy.cluster.hierarchy import linkage, dendrogram, fcluster\nfrom sklearn.cluster import AgglomerativeClustering","c44bee9c":"df = pd.read_csv('..\/input\/ccdata\/CC GENERAL.csv')\ndf.head()","b7e1f2ce":"df = df.drop(['CUST_ID'], axis=1)\ndf.shape","1c865ffe":"df.info()","34dfcef8":"df.describe()","2cfaec8f":"df.isnull().sum().sort_values(ascending=False).head()","16ca56aa":"df.loc[(df['MINIMUM_PAYMENTS'].isnull()==True),'MINIMUM_PAYMENTS'] = df['MINIMUM_PAYMENTS'].mean()\ndf.loc[(df['CREDIT_LIMIT'].isnull()==True),'CREDIT_LIMIT'] = df['CREDIT_LIMIT'].mean()","034b53b0":"df.isnull().sum().sort_values(ascending=False).head()","03cd4624":"# Set up figure\nsns.set_style(\"darkgrid\")\nfig = plt.figure(figsize = (20,30))\n\nplot_feat = df.columns\n\nfor i, v in enumerate(plot_feat):\n    axes = fig.add_subplot(7, 3, i+1)\n    sns.distplot(df[v], kde = False, ax = axes)","144871cf":"# Set up figure\nfig = plt.figure(figsize = (20,30))\n\nfor i, v in enumerate(plot_feat):\n    axes = fig.add_subplot(7, 3, i+1)\n    sns.boxplot(x = df[v], ax = axes)","5b73ff19":"sns.set(style = \"white\")\ncor_matrix = df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(cor_matrix, dtype = np.bool))\n\nplt.figure(figsize = (15, 12))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap = True)\n\nsns.heatmap(cor_matrix, mask = mask, cmap = cmap, center = 0,\n            square = True, linewidths = .5, cbar_kws = {\"shrink\": .5})","6faaa29b":"# Compute Z-score for every variable\n#z = np.abs(stats.zscore(df))\n\n# Remove outliers from dataset\n#df_rem = df[(z < 3).all(axis=1)]\n#df_rem","ccd3c4a6":"# Take the log of right skewed data\ncols =  ['BALANCE',\n         'PURCHASES',\n         'ONEOFF_PURCHASES',\n         'INSTALLMENTS_PURCHASES',\n         'CASH_ADVANCE',\n         'CASH_ADVANCE_TRX',\n         'PURCHASES_TRX',\n         'CREDIT_LIMIT',\n         'PAYMENTS',\n         'MINIMUM_PAYMENTS',\n        ]\n\n# Note: Adding 1 for each value to avoid inf values\ndf[cols] = np.log(1 + df[cols])\n\ndf.head()","6504da13":"# Standardize data\nscaler = StandardScaler() \nscaled_df = scaler.fit_transform(df)\n\n# Retransform numpy array to pandas dataframe\nscaled_df = pd.DataFrame(scaled_df, index = df.index, columns = df.columns) \n\nscaled_df.describe()","5918682f":"# Compute inverse sample covariance\ncov = scaled_df.cov()\ncov_inv = pd.DataFrame(np.linalg.inv(cov.values), cov.columns, cov.index)\n\n# Compute mahalanobis distance matrix using scipy library\ndist = distance.pdist(scaled_df, 'mahalanobis', VI = cov_inv)\ndist_mat = distance.squareform(dist)\ndist_mat.shape","c4a80b84":"# Function for different linkage criterions\ndef clustering_linkage(dist, link):\n    hier = linkage(dist, link)\n    hier = np.around(hier, decimals = 2)\n    fig = plt.figure(figsize=(25, 10))\n    dn = dendrogram(hier, p = 30, truncate_mode = 'lastp')\n    plt.show()\n    return hier","200b4340":"# Function which plots distances of the last 20 merged clusters\ndef get_distances(hier):\n    distances = hier[-20:,2]\n    num_clus = np.arange(20, 0, -1)\n    \n\n    d = {'Number of Clusters': num_clus, 'Distance between merged Clusters': distances}\n    df_dist = pd.DataFrame(d)\n\n    plt.figure(figsize=(15, 8))\n    sns.barplot(x = \"Number of Clusters\", y = \"Distance between merged Clusters\", data = df_dist)","2066213e":"# complete linkage\nhier_com = clustering_linkage(dist, 'complete')\nprint(\"This is what the linkage algorithm returns:\")\nhier_com","946aefb4":"# Plot distances of last 20 merged clusters\nget_distances(hier_com)","0359fd2c":"# single linkage\nhier_sin = clustering_linkage(dist, 'single')\nget_distances(hier_sin)","d41180a3":"# average linkage\nhier_ave = clustering_linkage(dist, 'average')\nget_distances(hier_ave)","80c09582":"# Clusterassignment\nclus_ass = fcluster(hier_com, t = 16, criterion='distance')\nclus_ass","ae179774":"# Add Clusterassignment to dataframe\ndf['cluster'] = clus_ass.tolist()\ndf.head()","10a7c007":"# Sort the dataframe by target\ndf_1 = df.loc[df['cluster'] == 1]\ndf_2 = df.loc[df['cluster'] == 2]\ndf_3 = df.loc[df['cluster'] == 3]\n\n# Set up figure\nsns.set_style(\"darkgrid\")\nfig = plt.figure(figsize = (20,30))\n\nplot_feat = cols\n\nfor i, v in enumerate(plot_feat):\n    axes = fig.add_subplot(7, 3, i+1)\n    sns.distplot(df_1[v], hist=False, ax = axes)\n    sns.distplot(df_2[v], hist=False, ax = axes)\n    sns.distplot(df_3[v], hist=False, ax = axes)","60106ae1":"**Impute missing data with mean**","aca63694":"**Standardize data**","ea0db2d3":"<h1><center>Clusteranalysis on Creditcard-Dataset <\/center><\/h1>\n\n\n\n\n\n\n**Import Packages**","bbc7b610":"**Dealing with outliers**\n\nThe Z-score is the signed number of standard deviations by which the value of an observation or data point is above the mean value of what is being observed or measured.","5a1fd5e3":"**Compute distance matrix**","065d871e":"Or simply take the log of right-skewed variables to ensure good clustering results.","c8c8f262":"## Visualization and Interpretation of results","18514755":"**Data Visualization**","d4d044b2":"**Average linkage**","e09abfdf":"**Complete linkage**","9a20cdb3":"## Agglomerative Clustering","5b7948d8":"Let's have a look at the cluster distances of the last 20 merges to decide for the optimal number of clusters:","ec0da9c1":"**Single linkage**","8a3f638b":"**Import Data**","07ce0afd":"**What are the variables?**\n\n| Variable | Definition |\n| :- | :- |\n| CUSTID | Identification of Credit Card holder (Categorical)|\n| BALANCE | Balance amount left in their account |\n| BALANCEFREQUENCY | How frequently the Balance is updated, score between 0 and 1 (1 = frequently updated, 0 = not frequently updated) |\n| PURCHASES | Amount of purchases made from account |\n| ONEOFFPURCHASES | Maximum purchase amount done in one-go |\n| INSTALLMENTSPURCHASES | Amount of purchase done in installment |\n| CASHADVANCE | Cash in advance given by the user |\n| PURCHASESFREQUENCY | How frequently the Purchases are being made, score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased) |\n| ONEOFFPURCHASESFREQUENCY | How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased) |\n| PURCHASESINSTALLMENTSFREQUENCY | How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done) |\n| CASHADVANCEFREQUENCY | How frequently the cash in advance being paid |\n| CASHADVANCETRX | Number of Transactions made with \"Cash in Advanced\" |\n| PURCHASESTRX | Number of purchase transactions made |\n| CREDITLIMIT | Limit of Credit Card for user |\n| PAYMENTS | Amount of Payment done by user |\n| MINIMUM_PAYMENTS | Minimum amount of payments made by user |\n| PRCFULLPAYMENT | Percent of full payment paid by user |\n| TENURE | Tenure of credit card service for user |","8a197b49":"**Perform hierarchical agglomerative clustering**","55852f78":"**Assign each observation to a cluster**","8b510a9a":"Complete linkage yielded the best results. We will go with an amount of 3 Clusters as the jump in the heterogeneity index seems the highest from 3 clusters to 2!","27deaf1a":"The function distance.pdist returns a condensed distance matrix dist. For each i and j (where i<j<n), where n is the number of original observations. The metric dist(u=X[i], v=X[j]) is computed and stored in entry n * i + j - ((i + 2) * (i + 1)) \/\/ 2.\nThat is why we have to transform it back to the sqaureform.","501f980e":"## Data Preprocessing"}}