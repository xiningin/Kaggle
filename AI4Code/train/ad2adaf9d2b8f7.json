{"cell_type":{"348f77f6":"code","af93b8ec":"code","eb739b0a":"code","46717316":"code","8f20e9f8":"code","7c19efdf":"code","ebe500a1":"code","18c2bdfa":"code","458bfb2d":"code","1fe14b38":"code","42c21c76":"code","bbeb2ddc":"code","6135b6fa":"code","3314bf5e":"code","69c2363b":"code","f0e2deb6":"code","706adde8":"code","b63f5818":"code","2a4b426f":"code","b9a009aa":"code","2fb285b3":"code","00c9fa75":"code","8c1fa581":"code","470e4b85":"code","c5d1a9e5":"code","3232df60":"code","2a5dd773":"code","ce70e2c3":"code","e0773fd3":"code","a35d186b":"code","5f384408":"code","867c46fa":"code","b6958df9":"code","39ff7656":"markdown","281f64b6":"markdown","461a69c6":"markdown","1413a383":"markdown","0ed28d72":"markdown","23fc5b1e":"markdown","ce24d72c":"markdown","3804941f":"markdown"},"source":{"348f77f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af93b8ec":"import pandas as pd\nimport numpy as np\ncredits=pd.read_csv(r'\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies=pd.read_csv(r'\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","eb739b0a":"credits.head()","46717316":"movies.head()","8f20e9f8":"credits.rename(columns={'movie_id':'id'},inplace=True)\ncredits.head()","7c19efdf":"movies_df=movies.merge(credits,on='id')\nmovies_df.head()","ebe500a1":"movies_df.columns","18c2bdfa":"C=movies_df['vote_average'].mean()\nC","458bfb2d":"m=movies_df['vote_count'].quantile(0.7)\nm","1fe14b38":"movie_df1=movies_df[movies_df['vote_count']>=m]","42c21c76":"movie_df1.shape","bbeb2ddc":"def weighted_rating(df,m=m,C=C):\n    v=df['vote_count']\n    R=df['vote_average']\n    return ((v*R)+(m*C))\/(v+m)","6135b6fa":"movie_df2=movie_df1.copy()\nmovie_df2['weighted_rating']=weighted_rating(movie_df1)","3314bf5e":"movie_df2.head()","69c2363b":"movie_df3=movie_df2[['original_title','vote_average','vote_count','weighted_rating']]\nmovie_df3.head()","f0e2deb6":"plot=movie_df3.sort_values('weighted_rating',ascending=False).head(10)\nplot","706adde8":"import matplotlib.pyplot as plt\nbar=plt.bar(plot['original_title'],plot['weighted_rating'],color='red')\nplt.xticks(rotation=90)\nplt.title('Top 10 movies on weighted rating scale')\ndef autolabel(bars):\n    for bar in bars:\n        height=bar.get_height()\n        plt.annotate('{height:.2f}'.format(height=height),xy=(bar.get_x(),height),xytext=(0,1),textcoords='offset points')\nautolabel(bar)        \nplt.show()","b63f5818":"popular=movie_df2[['original_title','popularity']]\nplot1=popular.sort_values('popularity',ascending=False).head(10)\nplot1","2a4b426f":"plt.style.use('ggplot')","b9a009aa":"plt.bar(plot1['original_title'],plot1['popularity'])\nplt.xticks(rotation=90)\nplt.xlabel('movie title')\nplt.ylabel('popularity score')\nplt.title('top 10 movies by popularity')\nplt.show()","2fb285b3":"mean=movie_df2['popularity'].mean()\nstd=movie_df2['popularity'].std()\nmovie_df2['norm_popularity']=(movie_df2['popularity']-mean)\/std","00c9fa75":"movie_df2.head()","8c1fa581":"movie_df2['new_rating']=movie_df2['weighted_rating']+movie_df2['norm_popularity']\nmovie_df2.head()","470e4b85":"plot3=movie_df2[['original_title','new_rating']]\nplot4=plot3.sort_values('new_rating',ascending=False).head(10)\nplot4","c5d1a9e5":"plt.bar(plot4['original_title'],plot4['new_rating'])\nplt.xticks(rotation=90)\nplt.xlabel('movie title')\nplt.ylabel('Rating')\nplt.title('top 10 movies on weighted average and popularity')\nplt.show()","3232df60":"movies_df['overview'][0]","2a5dd773":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf=TfidfVectorizer(stop_words='english',analyzer='word')\nmovies_df['overview']=movies_df['overview'].fillna('')\ntfidf_mat=tfidf.fit_transform(movies_df['overview'])\ntfidf_mat.shape","ce70e2c3":"movies_df.shape","e0773fd3":"from sklearn.metrics.pairwise import linear_kernel\nsimilarity=linear_kernel(tfidf_mat,tfidf_mat)","a35d186b":"similarity.shape","5f384408":"indices=pd.Series(movies_df.index,index=movies_df['original_title'])","867c46fa":"def recommendation(title,sim=similarity):\n    idx=indices[title]\n    similar=list(enumerate(sim[idx]))\n    similar=sorted(similar,key=lambda x:x[1],reverse=True)\n    similar=similar[1:11]\n    movie_idx=[i[0] for i in similar]\n    return movie_idx,idx","b6958df9":"movie_index,idx=recommendation('Toy Story')\nfor i in movie_index:\n    print(movies_df['original_title'].iloc[i],'-->',similarity[idx][i])","39ff7656":"# Weighted Average Rating + Popularity","281f64b6":"# Weighted Average Ratings...","461a69c6":"# Recommendation on Content","1413a383":"# Recommendation","0ed28d72":"# Feature Extraction","23fc5b1e":"# Content Based Filtering","ce24d72c":"# Similarity Metrics","3804941f":"# Loading Data..."}}