{"cell_type":{"b8fd11b7":"code","ced2b407":"code","29261fdc":"code","106c6802":"code","ac6fa411":"code","20acd941":"code","43ebdf63":"code","9b220126":"code","c2dabc8a":"code","e250ce12":"code","205c6da5":"code","5898043e":"markdown","6e04eb61":"markdown","fad2356e":"markdown","729f088c":"markdown","5a313e68":"markdown","e1ece0f7":"markdown","979c04dc":"markdown","278a2c3d":"markdown","152048a2":"markdown"},"source":{"b8fd11b7":"import numpy as np\nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndf = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","ced2b407":"weights_df = pd.read_csv('\/kaggle\/input\/average-weights-by-age\/Average_weights.csv')","29261fdc":"age_mean =  np.mean(df.Age.append(test_df.Age))\ndf.loc[(df.Age.isna()),'Age'] = age_mean\ntest_df.loc[(test_df.Age.isna()),'Age'] = age_mean","106c6802":"df = df.merge(weights_df,left_on=['Age','Sex'],right_on = ['Age','Sex'],how='left')\ndf.loc[(df.Weight.isna()) & (df.Sex == 'male'),'Weight'] = 155\ndf.loc[(df.Weight.isna()) & (df.Sex == 'female'),'Weight'] = 128\n\ntest_df = test_df.merge(weights_df,left_on=['Age','Sex'],right_on = ['Age','Sex'],how='left')\ntest_df.loc[(test_df.Weight.isna()) & (test_df.Sex == 'male'),'Weight'] = 155\ntest_df.loc[(test_df.Weight.isna()) & (test_df.Sex == 'female'),'Weight'] = 128","ac6fa411":"test_df['Carriability'] = 1-(test_df.Weight - test_df.Weight.min())\/(test_df.Weight.max()-test_df.Weight.min())\ndf['Carriability'] = 1-(df.Weight - df.Weight.min())\/(df.Weight.max()-df.Weight.min())","20acd941":"df['Title'] = df['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\ntest_df['Title'] = test_df['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\ntitle_dict = {\n    \"Capt\": \"Military\",\n    \"Col\": \"Military\",\n    \"Major\": \"Military\",\n    \"Jonkheer\": \"Noble\",\n    \"Don\": \"Noble\",\n    \"Dona\": \"Noble\",\n    \"Sir\" : \"Noble\",\n    \"Dr\": \"Professional\",\n    \"Rev\": \"Professional\",\n    \"the Countess\":\"Noble\",\n    \"Mme\": \"Mrs\",\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Mrs\",\n    \"Mr\" : \"Mr\",\n    \"Mrs\" : \"Mrs\",\n    \"Miss\" : \"Miss\",\n    \"Master\" : \"Master\",\n    \"Lady\" : \"Noble\"\n}\ndf.Title = df.Title.map(title_dict)\ntest_df.Title = test_df.Title.map(title_dict)\ndf.Title.unique()","43ebdf63":"y=df.Survived\nfeatures = ['Pclass','Sex','SibSp','Parch','Embarked','Carriability','Title']\nX = pd.get_dummies(df[features])\nX_test = pd.get_dummies(test_df[features])","9b220126":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=200,max_depth=6,random_state=1)\nmodel.fit(X,y)\npredictions = model.predict(X_test)\noutput = pd.DataFrame({'PassengerID':test_df.PassengerId,'Survived':predictions})\noutput.to_csv('my_submission_2.csv', index = False)\nprint('Your submission was successfully saved!')","c2dabc8a":"output = pd.DataFrame({'PassengerID':test_df.PassengerId,'Survived':predictions})\noutput.to_csv('my_submission_2.csv', index = False)\nprint('Your submission was successfully saved!')","e250ce12":"features = ['Survived','Pclass','Sex','SibSp','Parch','Embarked','Carriability','Title']\n\nresults = pd.get_dummies(df[features]).corr()\nfeature_list = results.columns[1:]\nresults","205c6da5":"import matplotlib.pyplot as plt\n\n%matplotlib inline\n\nimportances = list(model.feature_importances_)\n\nplt.style.use('seaborn-darkgrid')\n\nx_values = list(range(len(importances)))\n\nplt.bar(x_values, importances, orientation = 'vertical')\n\nplt.xticks(x_values, feature_list, rotation='vertical')\n\nplt.ylabel('Importance'); plt.xlabel('Variable'); plt.title('Variable Importances')","5898043e":"## Fill Missing Age Values with Mean of Age","6e04eb61":"## Insert Weight into Dataframes\n\nUse the weights_df dataframe to find weights for children and use the highest average weight for males (155 lb) for all adult males and the highest average weight for females (128) for all adult females.","fad2356e":"## Transform Categorical Columns\n\nCategorical columns will be transformed to binary dummy variables (one-hot encoding)","729f088c":"## Can We Capture Weight?\n\nUpon looking at the data, it became clear that survival rates are higher for women and children. While there are, in fact, legends about lifeboats being essentially reserved on the Titanic for women and children, it could make one wonder if the explanation could simply be weight. Whether it could be explained by the ability of some (children especially) to be physically carried or the fact that more children could be fit on a lifeboat than adults, it seems that there could be an influence there.\n\nThe following csv we import is a list of average weight of children by age and gender.","5a313e68":"## Importances\n\nNow, let's take a look at the variables to determine the relative importances of each.","e1ece0f7":"## Create \"Carriability\" Column\n\nThis column will convert weight into a value with the lightest passenger set to 1 and adult male passengers set to 0.","979c04dc":"## Results\nUpon submitting, we receive 79.904% success rate.","278a2c3d":"# Titanic Survival Predictive Model\n## by Jeffrey Oller\n\nLet's start by importing the packages we will need to do a random forest model as suggested by the kaggle tutorial.\n\nAlso, we will import the train and test datasets as pandas dataframes.","152048a2":"## Create \"Title\" Column\n\nWe check for titles in passengers' names by looking for commas (to find the first word after the last name) and periods in names.\n\nAlso, we will try to reduce the overall number of titles by consolidating them."}}