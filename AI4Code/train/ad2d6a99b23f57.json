{"cell_type":{"dfa9ab40":"code","fffc67b0":"code","2ca1b394":"code","98f8725f":"code","a6d2976c":"code","e27590ad":"code","c8f74398":"code","b81b7c7e":"code","4a8fc5e4":"code","9ac52b63":"code","80d5e539":"code","8cc1fc33":"code","ea4c90a7":"code","11d5eb0e":"code","ec81aa9b":"code","0d513c29":"code","1dab4293":"code","2cbdc6ed":"code","8320815d":"code","09341e8e":"code","8fb2bf8d":"code","2eee5840":"markdown","fc696e24":"markdown","0cfad92d":"markdown","63aaa751":"markdown","4a326f41":"markdown","c58778e5":"markdown","d8c95f15":"markdown","70f14338":"markdown","4e88d239":"markdown","a13fb712":"markdown"},"source":{"dfa9ab40":"import numpy as np","fffc67b0":"X = np.random.randint(20, size = (5, 2))","2ca1b394":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn; seaborn.set() # Plot styling\nplt.scatter(X[:, 0], X[:, 1], s=60);","98f8725f":"dist_sq = np.sum((X[:,np.newaxis,:] - X[np.newaxis,:,:]) ** 2, axis=-1)","a6d2976c":"X.shape","e27590ad":"X[:, np.newaxis,:].shape","c8f74398":"X[np.newaxis,:,:].shape","b81b7c7e":"X","4a8fc5e4":"X[:, np.newaxis,:] # Here our 2d array looks like sorted in a column vector","9ac52b63":"X[np.newaxis,:,:] # Here our 2d array looks like sorted in a row vector","80d5e539":"# calculating the differnce of each coordinates of a point with \n# corresponding coordinates of every other points.\ndifference = X[:,np.newaxis,:] - X[np.newaxis,:,:] \n                    ","8cc1fc33":"difference.shape","ea4c90a7":"difference","11d5eb0e":"# squaring results in squaring each component. \n# i.e. each coordinate differnce is squared.\ndifference_sqr = difference**2 ","ec81aa9b":"difference_sqr.shape","0d513c29":"difference_sqr","1dab4293":"# sum the coordinate differences along last axis(coordinate) to get the squared distance\n# since the sum of difference squared of coordinates is the distance squared by \n# Pythagorean Theorem\ndist_sq = difference_sqr.sum(-1)\ndist_sq.shape\n","2cbdc6ed":"dist_sq","8320815d":"nearest = np.argsort(dist_sq, axis=1)\nprint(nearest)","09341e8e":"# Now partitioning the dist_sq matrix between 2 nearest points of each point and 2 farthest points.\nK = 2\nnearest_partition = np.argpartition(dist_sq, K + 1, axis=1)\nnearest_partition","8fb2bf8d":"# Finally lets plot the nearest 2 point of each point with a line\nplt.scatter(X[:, 0], X[:, 1], s=100)\n # draw lines from each point to its two nearest neighbors\nK = 2\nfor i in range(X.shape[0]):\n    for j in nearest_partition[i, :K+1]:\n        # plot a line from X[i] to X[j]\n        # use some zip magic to make it happen:\n        plt.plot(*zip(X[j], X[i]), color='black')","2eee5840":"Lets visualize as scatter plot. ","fc696e24":"Here, this line of code seems very confusing if some one is unfamiliar with Numpy's Aggregation and Broadcasting Rules. To understand this, it is useful to break this line of code into chunks and understand it.","0cfad92d":"Now, Lets see the contents of above chunks.","63aaa751":"First lets look at the shape of ndarray X, X[ : , np.newaxis , : ] and X[ np.newaxis , : , : ] .","4a326f41":"If each row represents points 0,1,2,3, and 4. Then, \n* 1st 3-entries of row_0 shows 2 nearest points to point_0; last 2-entries of row_0 shows 2 farthest points to point_0. \n* 1st 3-entries of row_1 shows 2 nearest points to point_1; last 2-entries of row_1 shows 2 farthest points to point_1. \nand so on...","c58778e5":"Now in order to subtract our 2d-row vector from the 2d-column vector, Numpy will broadcast the corresponding arrays and make the dimensions compatible so that the operations is done. The resulting dimension of our nd-array must be as (5,5,2).","d8c95f15":"From above Matrix, consider each row representing a point's distance_sq from itself and four other points.Observing the diagonal of the above Matrix. It is clearly shown that the distance_sq of points with itself is zero. Also Its symmetricness shows that the distance_sq between one point with other and vice-versa is also same. ","70f14338":"# **K-Nearest Neighbors:**","4e88d239":"Computing distance between each pair of points.","a13fb712":"If we give distict id as 0,1,2,3,4 to the points. \n* The first row of above matrix shows the nearest to farthest points to point_0.\n* Row 1 shows the nearest to farthest points to point_1.\n* Row 2 shows the nearest to farthest points to point_2.\n* Row 3 shows the nearest to farthest points to point_3.\n* Row 4 shows the nearest to farthest points to point_4.\n"}}