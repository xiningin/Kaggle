{"cell_type":{"e557acb7":"code","678c10d0":"code","c26ffccb":"code","1b2f8233":"code","4fc60755":"code","8e8b0a12":"code","80ab5913":"code","7b5e7754":"code","a4dc5340":"code","0300abcc":"code","a0eabc6f":"code","581f7a32":"code","98c43cf2":"code","b6ddd41e":"code","8f50d897":"code","168c935d":"code","60f51743":"code","7f6ec089":"code","d911ee5a":"code","2f481ba3":"code","bb458bf9":"code","33709b73":"code","a8561fbb":"code","cd63a5de":"code","5d08b12d":"code","116bacfe":"code","f3e75093":"markdown","d94e4757":"markdown","afd8238c":"markdown","5ba8c0d1":"markdown","7f51e9ad":"markdown","f2020930":"markdown","a302095e":"markdown","77fdefe5":"markdown","ed76f8a1":"markdown","6fefbd87":"markdown","52e73673":"markdown","f365373f":"markdown","484c01ee":"markdown","02780549":"markdown","bdee792a":"markdown","3a524960":"markdown","986db1b1":"markdown","8457e6f8":"markdown","242a3303":"markdown","69b279f6":"markdown","e7433e64":"markdown","705b8955":"markdown","d449e43d":"markdown","560ef3f9":"markdown","12d12ce8":"markdown","444754de":"markdown"},"source":{"e557acb7":"# Defining a string variable - Using Double Quotes\n#-------------------------------------------------\n\n# String enclosed with double quotes\nString_Var_1 = \"String enclosed with double quotes\"\n\n# Print the content of the String Variable\nprint(String_Var_1)\n\n# Print the Data type of the String Variable & Check whether it is a string datatype or not\nprint(\"Data Type of String_Var_1 is :\",type(String_Var_1))","678c10d0":"# Defining a string variable - Using Single Quotes\n#-------------------------------------------------\n\n# String enclosed with single quotes\nString_Var_2 = 'String enclosed with single quotes'\n\n# Print the content of the String Variable\nprint(String_Var_2)\n\n# Print the Data type of the String Variable & Check whether it is a string datatype or not\nprint(\"Data Type of String_Var_2 is :\" , type(String_Var_2))","c26ffccb":"# Check whether 2 strings having a same content are same \n# irrespective of whether the strings are enclosed in\n# single quote or by double quote\n\n# Create a string enclosed with double quote\nString_Dbl_Quote = \"String for comparison\"\n\n# Create a second string enclosed with single quote\nString_Sngl_Quote = 'String for comparison'\n\n# Print both the strings \nprint(\"String 1 with Double Quotes :\" ,String_Dbl_Quote)\nprint(\"String 2 with Single Quotes :\" ,String_Sngl_Quote)\n\n# Print New Line for readability \nprint(\"\\n\")\n\n\n# Now lets check whether the above 2 strings are same or different \nprint(\"Strings comparison result :-\")\nif String_Dbl_Quote == String_Sngl_Quote :\n    print(\"    Both the Strings are Same \")\nelse :\n    print(\"    Both the Strings are Different\")","1b2f8233":"# len() function - it returns the number of charachters in a string\n\n# Define a String Variable\nString_Var_3 = \"ABCDEFGH\"\n\n# Print the Length ( no. of characters in a String ) of the string\nprint( \"Nbr of Characters in String_Var_3 is :\" , \n      len(String_Var_3) )","4fc60755":"# str() function - to convert a non string object to string \n\n# Define an Integer Variable\nInteger_Var = 1234 \n\n# Check the datatype of the integer variable \nprint(\"Value of Integer Variable : \" ,Integer_Var)\n\n# Convert the interger content into string using str() function\nInteger_Converted_to_String = str(Integer_Var)\n\n# Check the datatype of the converted string variable \nprint(\"Data Type of String containing the integer : \" ,\n      type(Integer_Converted_to_String))\n\n# Print the content of the string containing the number\nprint(\"Value of String Variable containing Integer: \" ,\n      Integer_Converted_to_String)","8e8b0a12":"# String concatenation using + operator \n\n# Define two Strings\nString_1 = \"Hello \"\nString_2 = \"World !\"\n\n# Print the concatenated string \n# Concatenation using the \"+\" Operator\nprint( \"Concatenated String :\" ,String_1 + String_2 )\n\n# We can also assign the concatenated string to a new string variable \nString_Concat = String_1 + String_2\nprint(\"Variable containing Concatenated String :\" ,\n      String_Concat)","80ab5913":"# Accessing the individual character of a string using Indexing\n\n# Lets first print the string \nprint(\"Here is the Complete String :\",\n      String_Concat)\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# Now , lets access the 7th character of the string \n# As , Python uses zero indexing , \n# we have to use index of 6 to access 7th pos\nprint(\"Character in 7th Position is : \" , String_Concat[6])\n\n# Print an Empty Line\nprint(\"\\n\")\n\n\n# We can also access the characters from end of the string using negative index\n# lets access the last element of the string using the index of -1\nprint(\"Last Character in the String is : \" , String_Concat[-1])\n\n","7b5e7754":"# Show the content of the Original String \nprint(\"Original String is : \" , String_Concat)\n\n# Extract the characters between 4th and 8th postion\nprint(\"Characters between 4th and 8th positions are : \" , \n      String_Concat[3:8])","a4dc5340":"# Tip 1 : Extracting characters from start till certain index  \n# leaving the index on the left of ':' empty leads to \n# 0 being considered as Start Index\n\nprint(\"Original String is : \" , String_Concat)\nprint(\"First 4 characters in the String are : \" ,\n      String_Concat[:4])","0300abcc":"# Tip 2 : Extracting characters from certain start index till end \n# leaving the index on the right of ':' , leads to \n# end of the string being considered as stop point \n\nprint(\"Original String is : \" , String_Concat)\nprint(\"Characters from 7th index till end of the String are : \" , String_Concat[7:])","a0eabc6f":"# Tip 3 :Extracting characters between certain indexes with stride \n# we will use 3rd argument in indexing which will denote the stride\n# Stride denotes the steps to jump after each character is fetched\n# Example : [2:8:2] means \n# Start from second index till 7th index while taking steps of 2\n\nprint(\"Original String is : \" , String_Concat)\nprint(\"2nd index till 7th index with strides of 2 is : \" , \n      String_Concat[2:8:2])","581f7a32":"# Tip 4 : Reversing the string using indexing \n# leaving the start and end index as empty and \n# providing -1 as stride\n# will return the string in reverse\n\nprint(\"Original String is : \" , String_Concat)\nprint(\"String in Reversed order is : \" , \n      String_Concat[::-1])","98c43cf2":"# Method to convert a string to lower case \n\nString_Var = \"This is a String with Mixed Case\"\n\n# Print the content of the string variable \nprint(\"The Original String is : \",String_Var)\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# Convert all the characters of the String to lower and print it \nprint(\"Convertng the string characters to lower case : \" ,\n      String_Var.lower())","b6ddd41e":"# Method to convert a string to Upper case \n\nString_Var = \"This is a String with Mixed Case\"\n\n# Print the content of the string variable \nprint(\"The Original String is : \",String_Var)\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# Convert all the characters of the String to lower and print it \nprint(\"Convertng the string characters to upper case : \" ,\n      String_Var.upper())","8f50d897":"# Method to convert only the first character of the string \n# to Upper case \n\nString_Var = \"mt Everest\"\n\n# Print the content of the string variable \nprint(\"The Original String is : \",String_Var)\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# Convert all the characters of the String to lower and print it \nprint(\"Convertng the first character of String to upper case : \" ,String_Var.capitalize())","168c935d":"# splitting a string into individual characters \n# the output of this operation will be a list object \n\nString_Var = 'Python String Processing'\n\n# Print the content of the string \nprint(\"The Original String is :\" ,String_Var )\n\n# Print an Empty Line\nprint(\"\\n\")\n\n\n# Applying the list() function on a string will \n# return a list object containing \n# each character of the string as individual list element \nprint(\"The individual characters of String : \",\n      list(String_Var))","60f51743":"# Splitting a String into sub-strings and \n# the splitting to be done based on a separator \n\nString_Var = 'Python String Processing'\n\n# Print the content of the string \nprint(\"The Original String is :\" ,String_Var )\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# using the split() method , \n# split the string into substrings where \n# <empty space> is the separator \n# Note - split() method returns a list object \n# containing the substrings\nprint(\"Substrings from the String :\" ,\n      String_Var.split(\" \"))\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# Note : By default the split happens on <empty space> \n# and hence the argument to the split method can be \n# left empty if the string has to be splitted by space\nprint(\"Substrings from the String :\" ,\n      String_Var.split())\n","7f6ec089":"# Joining a set of substrings into a single string \n# join() method takes a set of substrings as input and \n# returns a single combined string\n\n# Define a List of strings \nList_of_SubStrings =[ \"Euclid\" , \"Newton\" , \"Einstien\" , \"Pascal\"]\n\n# Print the content of the list containing sub-strings\nprint(\"Content of the List containing strings :\" ,\n      List_of_SubStrings)\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# Join the substrings into a single string separated by \"\/\"\nSep_Str = \"\/\"\nprint( \"Combined \/ Joined String is :\",\n      Sep_Str.join(List_of_SubStrings))","d911ee5a":"# using strip() method to trim the \n# leading and trailing spaces form a string\n\n# Define a string having leading and trailing spaces\nString_Var = \"         A String  having  leading and trailing   spaces            \"\n\n# Print the content of the string \nprint(\"The Original String is :\" ,String_Var ,\"*\")\n\n# Print an Empty Line\nprint(\"\\n\")\n\n\n# Remove the leading and trailing spaces from the string \n# using strip() method\n# Added a '*' at the end to show trimming of trailing spaces\nprint(\"Trimmed string is : \" ,\n      String_Var.strip(),\n     \"*\")\n\n# Note : Only leading and trailing spaces are removed , \n# No chnage to embedded spaces in the string","2f481ba3":"# using lstrip() method to trim the leading spaces form a string\n\n# Define a string having leading spaces\nString_Var = \"         A String  having  leading and trailing   spaces     \"\n\n# Print the content of the string \nprint(\"The Original String is :\" ,String_Var )\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# Remove the leading spaces from the string using \n# lstrip() method\nprint(\"Leading Spaces Trimmed string is : \" ,\n      String_Var.lstrip())","bb458bf9":"# using rstrip() method to trim the \n# trailing spaces form a string\n\n# Define a string having leading spaces\nString_Var = \" A String  having trailing   spaces                 \"\n\n# Print the content of the string \nprint(\"The Original String is :\" ,String_Var , \"*\")\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# Remove the trailing spaces from the string using \n# rstrip() method\nprint(\"Trailing Spaces Trimmed string is : \" ,\n      String_Var.rstrip(),\n     \"*\")\n","33709b73":"# Strip leading & trailing '$' symbols from a string \n\n# Define a string \nString_Var = \"$$$$$  String with leading & trailing Dollars $$$$$$\" \n\n# Print the content of the string \nprint(\"The Original String is :\" ,String_Var )\n\n# Print an Empty Line\nprint(\"\\n\")\n\n# Remove the leading & trailing $ from the string using \n# strip() method\nprint(\"String after removing leading & trailing $ : \" ,\n      String_Var.strip('$'))\n","a8561fbb":"# Example code for find() \n\n# Define a Target string \nString_Var = \"Python is powerful language with power packed features\"\n\n# Print the content of the Target String \nprint(\"The Target String is : \",String_Var)\n\n# Define a Sub string 1\nSub_String_Var1 = \"power\"\n\n# Print the content of the Target String \nprint(\"The Sub String 1 is : \",Sub_String_Var1)\n\n# Define a Sub string 2\nSub_String_Var2 = \"beauty\"\n\n# Print the content of the Target String \nprint(\"The Sub String 2 is : \",Sub_String_Var2)\n\n# Print Empty Line\nprint(\"\\n\")\n\n# Find the position of Sub String in the Target String\n# When the substring does exist in Target String \nprint(\"The position at which the Sub String is found : \" ,\n      String_Var.find(Sub_String_Var1))\n\n# Find the position of Sub String in the Target String\n# When the substring does not exist in Target String \nprint(\"The position at which the Sub String is found : \" ,\n      String_Var.find(Sub_String_Var2))","cd63a5de":"# Example code for find() function \n# to find a substring from a target string \n# within range of positions\n\n# Define a Target string \nString_Var = \"Python is powerful language with power packed features\"\n\n# Print the content of the Target String \nprint(\"The Target String is : \",String_Var)\n\n# Define a Sub string 1\nSub_String_Var1 = \"power\"\n\n# Print the content of the Target String \nprint(\"The Sub String 1 is : \",Sub_String_Var1)\n\n# Print Empty Line\nprint(\"\\n\")\n\n# Find the position of Sub String in the Target String\n# between range of positions - Example 1 \nprint(\"The position at which the Sub String is found (Ex 1 ): \" ,\n      String_Var.find(Sub_String_Var1,4,20))\n\n# Print Empty Line\nprint(\"\\n\")\n\n# Find the position of Sub String in the Target String\n# between range of positions - Example 2\nprint(\"The position at which the Sub String is found (Ex 2 ): \" ,\n      String_Var.find(Sub_String_Var1,15,40))","5d08b12d":"# Example code to count the occurences of a Substring in a String\n\n# Define a Target string \nString_Var = \"Python is a powerful programming language when compared with other programming languages\"\n\n# Print the content of the Target String \nprint(\"The Target String is : \",String_Var)\n\n# Define a Sub string 1\nSub_String_Var = \"language\"\n\n# Print the content of the Target String \nprint(\"The Sub String is : \",Sub_String_Var)\n\n# Print Empty Line\nprint(\"\\n\")\n\n# Count the occurences of a Substring using count() method\nprint(\"# of times the substring occurs in the Target String is : \",\n     String_Var.count(Sub_String_Var))\n\n# Count the occurences of a Substring using count() method\n# between a range of positions \nprint(\"# of times the substring occurs in the Target String is : \",\n     String_Var.count(Sub_String_Var,40,95))\n","116bacfe":"# Example code to replace the occurences of a Substrings in a String\n# with new Substrings\n\n# Define a Target string \nString_Var = \"Python is a powerful programming language when compared with other programming languages\"\n\n# Print the content of the Target String \nprint(\"The Target String is : \",String_Var)\n\n# Define a Sub string 1\nSub_String_Var = \"language\"\n\n# Print the content of the Target String \nprint(\"The Sub String is : \",Sub_String_Var)\n\n# Print Empty Line\nprint(\"\\n\")\n\n# Replace all occurences of a Substring with new substrings\nprint(\"Updated String with replaced sub string is :\",\n     String_Var.replace(Sub_String_Var,'tool'))\n\n# Print Empty Line\nprint(\"\\n\")\n\n# Replace first occurence of a Substring with new substring\nprint(\"Updated String with replaced sub string is :\",\n     String_Var.replace(Sub_String_Var,'tool',1))\n","f3e75093":"**1) Strings in Python -**\n\n   Strings in Python are any sequence of characters enclosed within Quotes.\n     \n   The string can be enclosed within a single quote or within a double quote.\n   \n   Note - The double quote is very useful as it can enclose a string which is containing a single quote within itself . Ex : \"Mr. Parker's Pen\"","d94e4757":"**Time to explore the methods available for string objects**","afd8238c":"\n\n\n**What are the Functions \/ Methods \/ Operators available for String Objects**\n\n","5ba8c0d1":"**Replacing substring within a String with another substring **\n\nThe method to be used for replacing is replace()\n\nThe Syntax for replace is : string.replace(Old_sub , New_Sub , Count )\n\nWhere -\n\nstring : is the Target string within which a substring has to be replaced with new substring\n\nOld_sub : The substring which is to be replaced \n\nNew_Sub : The new substring to be replaced with \n\nCount : Specifies the number of instances to be replaced \n","7f51e9ad":"**find()**\n\nThe find() methods works in the following way -\n\nSynatx :  String.find(Sub_String,start,end)\n\n   String - It is the Target String from which a substring has to be searched\n   \n   Sub_String - this is the string to be searched [its a madatory argument ]\n          \n   \n   Following are Optional Arguments to find():\n   \n   start - this is the starting position from where the search has to be started\n   \n   end - this is the end position at which the search has to be stopped \n          \n   \n   Values Returned :\n   \n   The function returns the index position at which the substring is found first\n   \n   in case the substring is not found , the function returns -1","f2020930":"* **Indexing** : accessing the individual characters of a string using index\n\nNote - Python uses 'Zero Based Indexing' ","a302095e":"Before we start on Regular Expression , lets explore STRING objects in Python -\n\n     a) What is String \n     b) How string is being represented in Python\n     c) What String operations \/ functions are available in Python","77fdefe5":"\n\n* **str()** function - to convert a non string object to string ","ed76f8a1":"strip() method can be used to strip any charachter at the start or end of a string","6fefbd87":"Method to convert a string to lower case ","52e73673":"Method to convert only the first character of the string to Upper case\n\n**capitalize()** method converts the first character of the string to Upper case while converting all other characters to lower case","f365373f":"**Counting the number of occurences of a Sub String with in a String**\n\nusing count() method\n\nSyntax of count() method is : Target_String.count(substring,start,end)\n\n\n\nWhere :\n\nTarget_String : is the String from which the substring occurences to be counted \n\nsubstring : the substring to be searched and occurences counted\n\nstart : Start position in Target String from where the substring to be searched \n\nstart : end position in Target String at which the substring searched to be stopped\n\n\n\nThe count() method returns :\n\nThe number of instances the substring is found within the Target string ","484c01ee":"**Extractng a set of characters from a String **\n\nWe can also extract a set of contigous characters from a string \nusing range .\n\nlets fetch characters which are in - \n     4th position till 7th position\n\nIn this case we have to use range of index in square bracket to fetch characters\n\n  the index range to be used here is [3:8]\n\nNote : the value before ':' is starting index position \n\n  the value after ':' is end index position (not included in fetch)","02780549":"\n\nSome of us might be wondering whether 2 strings in Pyython containing the same set of characters are same or different when one of them is enclosed in single quotes and another one is enclosed in double quotes.\n\nLet's check --","bdee792a":"**Some additional character extraction tips from a String **","3a524960":"\nMethod to convert a string to Upper case ","986db1b1":"**Searching \/ Finding Substrings from a String**","8457e6f8":"**Methods for splitting a string into substrings **","242a3303":"**String Processing & Regular Expression in Python**\n\nPriyaranjan Mohanty","69b279f6":"**Method for Joining a set of substrings into a single string **\n\nNote - We can also provide a separator which is added between the substrings  in the combined string ","e7433e64":"* **len()** function - it returns the number of charachters in a string","705b8955":"Now , lets explore few widely used functions available or applicable for Strings.","d449e43d":"**Methods to trim leading and trailing characters from a string \n\nThe method for the same are -\n\n          strip()\n          rstrip()\n          lstrip()","560ef3f9":"**What is Regular Expression**\n\nA regular expression is a special text string for describing a search pattern. You can think of regular expressions as wildcards on steroids. You are probably familiar with wildcard notations such as \"\\*.txt\" to find all text files in a file manager. The regex equivalent is \".*\\.txt\".\n\nRegular Expression is also called RegEx","12d12ce8":"**Why we need Regular Expression**\n\nRegular expressions are used in many situation in computer programming.\nMajorly in search, pattern matching, parsing, filtering of results and so on.\nIn lay man words, its a kind of rule which programmer tells to the computer to understand.","444754de":"**String Concatenation** : Cobining 2 strings into a single string \n\n       Using the \"+\" operator"}}