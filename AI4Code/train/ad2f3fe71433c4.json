{"cell_type":{"d9850eb9":"code","01bc66f3":"code","15072fbd":"code","6a315feb":"code","29c0a295":"code","05b0b616":"code","c1e02436":"code","2b7beef2":"code","b1a02575":"code","5a7bbf14":"code","e81c79da":"code","3467687e":"code","36f0437b":"code","ad09a800":"code","230d4fe0":"code","b6675f27":"code","8d0339e1":"code","1a4a024a":"code","af0cf1eb":"code","21d9e764":"code","392d2a99":"code","67f61180":"code","1a4d338a":"code","86cd8c0a":"code","d0c031d3":"code","75689a78":"code","7fefa29b":"code","b6581834":"code","a2da7750":"code","085afda3":"code","7b784a76":"code","4cdf706f":"markdown","c51a85f6":"markdown","73b3fb67":"markdown","60f2adac":"markdown"},"source":{"d9850eb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01bc66f3":"import numpy as np # linear algebra\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","15072fbd":"# load dataset\nyelp_df = pd.read_csv(\"\/kaggle\/input\/yelp-reviews\/yelp.csv\")","6a315feb":"# examine the data\nyelp_df.head()","29c0a295":"# print the summary statistics of numercial columns\nyelp_df.describe()","05b0b616":"# Verify the datatypes and check for any nulls\nyelp_df.info()","c1e02436":"# print the example text review\nyelp_df.text[0]","2b7beef2":"# calculate the length of reviews\nyelp_df['length'] = yelp_df.text.apply(len)","b1a02575":"# plot the histogram for the length values\nyelp_df.length.plot(bins = 20, kind='hist')","5a7bbf14":"yelp_df.length.describe()","e81c79da":"# print the review with highest chars \nyelp_df[yelp_df.length==4997].text.iloc[0]","3467687e":"# print the reviews with lowest char\nyelp_df[yelp_df.length == 1].text.iloc[0]","36f0437b":"# plot the count of reviews\nsns.countplot(yelp_df.stars,palette='GnBu_d')","ad09a800":"# plot histograms for each stars\ng =sns.FacetGrid(data =yelp_df,col='stars',col_wrap=3)\ng.map(plt.hist,'length',bins=20,color='orange')","230d4fe0":"# prepare the data for prediction\nsns.countplot(yelp_df[yelp_df.stars!=3].stars)","b6675f27":"# exclude all records having with star 3\nyelp_df = yelp_df[yelp_df.stars!=3]","8d0339e1":"# create function to calcualte the target value\ndef create_target(stars):\n    if stars<3:\n        target = 0#\n    else:\n        target = 1\n    return target","1a4a024a":"# store the value into target column\nyelp_df['target'] = yelp_df.stars.apply(create_target)","af0cf1eb":"# examine the values\nyelp_df[['stars','target']]","21d9e764":"# remove punctuation\nimport string\nstring.punctuation","392d2a99":"# remove stopwords\nfrom nltk.corpus import stopwords\nstopwords.words('english')","67f61180":"# defining the fuction to remove punctuations & stop words\ndef text_cleaning(text):\n    remove_punctuation = ''.join([char for char in text if char not in string.punctuation])\n    remove_stopwords = [word for word in remove_punctuation.split() if word.lower() not in stopwords.words('english')]\n    return remove_stopwords","1a4d338a":"# count vectorization ( 2d matrix containing word frequency)\nfrom sklearn.feature_extraction.text import CountVectorizer\nCountVectorizer = CountVectorizer(analyzer = text_cleaning)\nyelp_vectorizer=CountVectorizer.fit_transform(yelp_df.text)","86cd8c0a":"yelp_vectorizer.shape","d0c031d3":"X =yelp_vectorizer\ny = yelp_df.target.values.reshape(-1,1)\nprint(X.shape)\nprint(y.shape)","75689a78":"# split the data into train and test\nfrom sklearn.model_selection import train_test_split\nX_train ,X_test, y_train, y_test = train_test_split(X,y,test_size =0.2)","7fefa29b":"# train model\nfrom sklearn.naive_bayes import MultinomialNB\nNB_classifier = MultinomialNB()\nNB_classifier.fit(X_train,y_train)","b6581834":"# print the confusion matrix for trained data\nfrom sklearn.metrics import classification_report,confusion_matrix\npredict_train = NB_classifier.predict(X_train)\ncm = confusion_matrix(y_train,predict_train)\nsns.heatmap(cm,annot =True,cmap=\"Blues\")\nplt.ylabel(\"Actual\")\nplt.xlabel(\"Predicted\")\nprint(cm)\n","a2da7750":"print(classification_report(y_train,predict_train))","085afda3":"# print the confusion matrix for test data\npredict_test = NB_classifier.predict(X_test)\ncm = confusion_matrix(y_test,predict_test)\nsns.heatmap(cm,annot =True,cmap=\"Blues\")\nplt.ylabel(\"Actual\")\nplt.xlabel(\"Predicted\")\nprint(cm)\n","7b784a76":"print(classification_report(y_test,predict_test))","4cdf706f":"In this notebook, I'm using Natural Language Processing (NLP) strategies to analyze Yelp reviews data.","c51a85f6":"By examing the histograms we can conclude that the people rating 1-3 stars  mostly write less than 400 words.","73b3fb67":"We will mpa the stars 4 & 5 as 1 (happy Customer) and stars 1 & 2 as 0 (Unhappy Customer) and exclude star 3 as it will have neutral reviews.","60f2adac":"Most Reviews fall between 4 & 5 star"}}