{"cell_type":{"a5f148f6":"code","cc15eaf5":"code","2423970a":"code","1e85098f":"code","5fb49239":"code","9f7526cf":"code","c6405f67":"code","fc8a7b4c":"code","b09bdb73":"code","a2ca052e":"markdown","f9b3e468":"markdown","2e79d7ea":"markdown","a6ca19af":"markdown","edba0042":"markdown","a960251a":"markdown","21630bd0":"markdown","563852b8":"markdown","9ee392a4":"markdown","a8c42572":"markdown","32a2d88d":"markdown","b17e6bdf":"markdown"},"source":{"a5f148f6":"!pip install apyori","cc15eaf5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport apyori\nfrom apyori import apriori","2423970a":"dataset = pd.read_csv('..\/input\/suggestions\/Market_Basket_Optimisation.csv',header=None)","1e85098f":"transactions=[]\nfor i in range(0, 7501):\n    transactions.append([str(dataset.values[i,j]) for j in range(0, 20)])\ntransactions","5fb49239":"rules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2, max_length = 2)","9f7526cf":"results = list(rules) #association rules\nresults, len(results)","c6405f67":"def inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    confidences = [result[2][0][2] for result in results]\n    lifts       = [result[2][0][3] for result in results]\n    return list(zip(lhs, rhs, supports, confidences, lifts))\nresultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])","fc8a7b4c":"resultsinDataFrame","b09bdb73":"resultsinDataFrame.nlargest(n = 10, columns = 'Lift')","a2ca052e":"# Training","f9b3e468":"# Importing Dataset\n<b>Note :<\/b> Dataset has no column names","2e79d7ea":"#### Parameters :\n- transactions : dataset in the form of list\n- min_support : minimum support of model\n- min_confidence : minimum confidence of model\n- min_lift : minimum lift of the model\n- min_length : minimum length of the association needed\n- max_length : maximum length of the association needed<br>\nWe need $A->B$, association of length 2.","a6ca19af":"## Displaying the results sorted by descending lifts","edba0042":"## Putting the results well organised into a Pandas DataFrame","a960251a":"# Displaying Result","21630bd0":"# Data Preprocessing\nFormat of the dataset is to be a lsit for Apriori model","563852b8":"# Importing Libraries","9ee392a4":"# Problem Statement\nA shop owner wants to find associated products ( $A->B$, two elements only) customer buys so that he can offer<br>\ndiscount on one of the product which tempts customers to buy and hence the profit of the shop owner increase.<br>\n\n## Dataset Explanation\n- The dataset consists of 7501 transactions recorded from one full week.<br>\n- Each row in the dataset consists of transactions made by customers in the shop.<br>\n- Each transactions denotes the products a customer has purchased.<br>\n","a8c42572":"Customers buying 'fromage blanc' will also buy honey in a chance of 25%.<br>\nAssociation with lower lift values can be discarded for the discount.<br>","32a2d88d":"We'll only consider those products which appear atleast `three` times a day because if considered <br>\n1 or 2 many products are to be given discounts which bankrupt the shop owner.<br>\nDataset consists of transactions made in `one week`.<br>\nTherefore, we'll consider the association of $A -> B$ to be not less than $3 * 7 = 21 times$.<br>\ni.e, the minimum number of times the transaction $A -> B$ in the dataset to be not less than 21.<br>\nTherefore, <br>\n# $Minimum Support = \\frac{Number~of~Times~the~transaction~occured~in~the~dataset}{Total~Number~of~Transactions}$<br>\n# $~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=\\frac{3 * 7}{7501}$\n# $~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=0.002799$\n# $~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=0.003$","b17e6bdf":"## Displaying the results non sorted"}}