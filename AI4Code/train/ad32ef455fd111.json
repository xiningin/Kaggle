{"cell_type":{"d35ad14b":"code","62bb1d1f":"code","98c16f67":"code","0e4ed98d":"code","93c52e33":"code","d56aeba3":"code","43233382":"code","53de33d5":"code","f1dd0761":"code","9e72e7f2":"code","f41e79b6":"code","8a623115":"code","1e5dc592":"code","833d9f0d":"code","41c9947e":"code","f68d0126":"code","6fb9493c":"code","edded0fe":"code","b39c99e5":"code","7ef0b3f4":"code","6118b090":"code","b64ff3b7":"code","f9022b26":"code","49dfebd9":"code","6daa8e90":"code","6290bf5a":"code","bf8d339e":"code","1dea483a":"markdown"},"source":{"d35ad14b":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport os\nimport h5py\nfrom sklearn.model_selection import train_test_split\nfrom skimage.io import imsave, imread\nh5_dir = os.path.join('..', 'input', 'train_segs.h5')","62bb1d1f":"!ls -lh {h5_dir}\nskip_cols = ['image', 'mask']\nout_df = {}\narray_cols = {}\nwith h5py.File(h5_dir, 'r') as f:\n    for k in f.keys():\n        print(k, f[k].shape, f[k].dtype)\n        if k not in skip_cols:\n            out_df[k] = f[k].value\n        else:\n            array_cols[k] = f[k].value\nout_df = pd.DataFrame(out_df).reset_index()\nstr_cols = out_df.select_dtypes(['O']).columns\nfor c_col in str_cols:\n    out_df[c_col] = out_df[c_col].map(lambda x: x.decode())\nout_df.sample(3)","98c16f67":"fig, maxs = plt.subplots(1, 4, figsize = (20, 10))\nfor c_ax, i in zip(maxs, ['PatientAge', 'PatientSex', 'ViewPosition', 'boxes']):\n    out_df.groupby([i]).size().plot.bar(ax=c_ax)","0e4ed98d":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (20, 10))\nmean_cxr = np.mean(array_cols['image'], 0)[:, :, 0]\nax1.imshow(mean_cxr, cmap='bone')\nmean_mask = np.mean(array_cols['mask'], 0)[:, :, 0]\nmean_mask = mean_mask\/mean_mask.sum()\nimsave('opacity_prior.tif', mean_mask.astype('float32'))\nax2.imshow(mean_mask, cmap='viridis')","93c52e33":"xy_vec = np.stack([x.ravel() for x in np.meshgrid(range(512), range(512), indexing='ij')], -1)\nxy_prob = mean_mask.ravel()\nsample_lung_idx = lambda points: np.random.choice(range(xy_vec.shape[0]), size=points, p=xy_prob)\nsample_lung_regions = lambda points: xy_vec[sample_lung_idx(points), :]\nmask_xy = sample_lung_regions(500)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize = (20, 10))\nax1.imshow(mean_cxr, cmap='bone')\nax1.plot(mask_xy[:, 1], mask_xy[:, 0], 'r+')\nax2.imshow(mean_mask, cmap='viridis')\nax2.plot(mask_xy[:, 1], mask_xy[:, 0], 'r+')","d56aeba3":"train_df, test_df = train_test_split(out_df, \n                                     test_size=0.5, \n                                     random_state=2018, \n                                     stratify=out_df[['PatientSex', 'ViewPosition', 'boxes']])\nprint(train_df.shape, test_df.shape)","43233382":"def generate_tile(in_df, tile_count=100, tile_dims=(64, 64)):\n    np.random.seed(2018)\n    lung_idx = sample_lung_idx(tile_count)\n    out_rows = []\n    for (_, c_row), l_pos_idx in zip(\n        in_df.sample(tile_count, replace=True).iterrows(), \n        lung_idx):\n        x, y = xy_vec[l_pos_idx, :]\n        loc_prior = xy_prob[l_pos_idx]\n        sx = max(0, x-tile_dims[0]\/\/2)\n        sy = max(0, y-tile_dims[1]\/\/2)\n        ex = min(512, sx+tile_dims[0])\n        ey = min(512, sy+tile_dims[1])\n        sx = ex-tile_dims[0]\n        sy = ey-tile_dims[1]\n        new_row = dict(c_row.items())\n        idx = new_row.pop('index')\n        new_row['x'] = x\n        new_row['y'] = y\n        new_row['bbox'] = [sx, ex, sy, ey]\n        new_row['image'] = array_cols['image'][idx, sx:ex, sy:ey, 0]\n        new_row['mask'] = array_cols['mask'][idx, sx:ex, sy:ey, 0]\n        new_row['opacity'] = new_row['mask'].mean()\n        new_row['opacity_prior'] = loc_prior*mean_mask.sum()\n        out_rows += [new_row]\n    out_df = pd.DataFrame(out_rows)\n    cut_off = 0.01\n    return out_df[(out_df['opacity']<=cut_off) | (out_df['opacity']>=(1-cut_off))].copy()","53de33d5":"%%time\ntrain_tiles_df = generate_tile(train_df, 30000)\ntest_tiles_df = generate_tile(test_df, 30000)","f1dd0761":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 3))\ntrain_tiles_df['opacity_prior'].plot.hist(ax=ax1)\nax1.set_title('Training Prior')\ntest_tiles_df['opacity_prior'].plot.hist(ax=ax2)\nax2.set_title('Test Prior')","9e72e7f2":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 3))\ntrain_tiles_df['opacity'].plot.hist(ax=ax1)\nax1.set_title('Training')\ntest_tiles_df['opacity'].plot.hist(ax=ax2)\nax2.set_title('Test')","f41e79b6":"from keras.applications.vgg16 import VGG16 as PTModel, preprocess_input\nfrom keras import models, layers\nfull_train_stack = np.stack(train_tiles_df['image'].values, 0)\ncolor_image_stack = np.stack([full_train_stack, full_train_stack, full_train_stack], -1).astype(float)\npp_color_image_stack = preprocess_input(color_image_stack)\nc_model = models.Sequential()\nc_model.add(PTModel(include_top=False, \n                    input_shape=pp_color_image_stack.shape[1:], \n                    weights='imagenet'))\nc_model.add(layers.GlobalAvgPool2D())\nvgg_features = c_model.predict(pp_color_image_stack, verbose=True, batch_size=64)\ndel pp_color_image_stack\ndel full_train_stack\ndel color_image_stack","8a623115":"from sklearn.ensemble import RandomForestRegressor\n# intensity model\ny_vec = np.stack(train_tiles_df['opacity'], 0)\nrf_int = RandomForestRegressor(random_state=2018)\nrf_int.fit(np.stack([train_tiles_df['image'].map(np.mean).values, \n                     train_tiles_df['image'].map(np.std).values,\n                     train_tiles_df['opacity_prior'].values\n                    ], -1), y_vec)\ndef int_score_diff(in_df):\n    in_img = np.stack(in_df['image'].values, 0)\n    pred_score = rf_int.predict(np.stack([np.mean(in_img, (1, 2)), \n                                          np.std(in_img, (1, 2)),\n                                         in_df['opacity_prior'].values], -1))\n    return np.abs(np.stack(in_df['opacity'].values, 0)-pred_score)","1e5dc592":"plt.hist(int_score_diff(train_tiles_df))","833d9f0d":"# vgg model\nrf_vgg = RandomForestRegressor(random_state=2018)\nrf_vgg.fit(vgg_features, y_vec)\ndef vgg_score_diff(in_df):\n    in_img = np.stack(in_df['image'].values, 0)\n    rgb_img = np.stack([in_img, in_img, in_img], -1).astype(float)\n    pred_score = rf_vgg.predict(c_model.predict(preprocess_input(rgb_img), \n                                                      batch_size=64, \n                                                      verbose=True))\n    return np.abs(np.stack(in_df['opacity'].values, 0)-pred_score)","41c9947e":"plt.hist(vgg_score_diff(train_tiles_df)-int_score_diff(train_tiles_df), 50)","f68d0126":"def clear_and_balance(new_df, cut_off=1e-2):\n    \"\"\"keep only the cases where VGG does much better than RF on features\"\"\"\n    new_df['model_error'] = vgg_score_diff(new_df) - 0.7*int_score_diff(new_df)\n    new_df['model_error'].plot.hist()\n    new_df = new_df[new_df['model_error']<cut_off].drop('model_error', 1)\n    new_df['opacity'] = new_df['opacity'].astype(bool).astype(int)\n    min_count = np.min(new_df['opacity'].value_counts())\n    return new_df.groupby(['opacity']).\\\n        apply(lambda x: x.sample(min_count, random_state=2018)).\\\n        reset_index(drop=True)","6fb9493c":"train_tiles_df = clear_and_balance(train_tiles_df)\ntest_tiles_df = clear_and_balance(test_tiles_df)\nprint(train_tiles_df.shape[0], test_tiles_df.shape[0])\nprint(train_tiles_df['opacity'].value_counts())\nprint(test_tiles_df['opacity'].value_counts())","edded0fe":"sns.pairplot(test_tiles_df, hue='opacity')","b39c99e5":"train_tiles_df.head(2)","7ef0b3f4":"test_tiles_df.head(2)","6118b090":"def show_rows(in_df, rows=3):\n    fig, m_axs = plt.subplots(rows, 2, figsize = (15, 5*rows))\n    for (ax1, ax2), (_, c_row) in zip(m_axs, in_df.sample(rows, random_state=2018).iterrows()):\n        ax1.imshow(c_row['image'], cmap='bone')\n        ax1.set_title('{PatientAge} {PatientSex}\\n{x}, {y}'.format(**c_row))\n        ax2.imshow(c_row['mask'], vmin=0, vmax=1)\n        ax2.set_title('{opacity}'.format(**c_row))\nshow_rows(train_tiles_df)\nshow_rows(test_tiles_df)","b64ff3b7":"def package_output(tile_df, base_name, random_state=0):\n    new_tile_df = tile_df.sample(tile_df.shape[0], random_state=random_state) # shuffle order\n    new_tile_df['slice_idx'] = range(new_tile_df.shape[0])\n    new_tile_df['tile_id']  = new_tile_df.apply(lambda x: 'tile_{slice_idx}_{x}_{y}'.format(**x), 1)\n    tile_arr = np.stack(new_tile_df['image'], 0)\n    imsave('{base_name}.tif'.format(base_name=base_name), tile_arr)\n    new_tile_df[['tile_id', 'slice_idx', 'PatientAge', 'PatientSex', 'ViewPosition', 'opacity_prior', 'opacity']].to_csv('{base_name}_all.csv'.format(base_name=base_name), index=False)\n    new_tile_df[['tile_id', 'slice_idx', 'PatientAge', 'PatientSex', 'ViewPosition', 'opacity_prior']].to_csv('{base_name}_info.csv'.format(base_name=base_name), index=False)\n    new_tile_df[['tile_id', 'opacity']].to_csv('{base_name}_answer.csv'.format(base_name=base_name), index=False)\n    def_guess_df = new_tile_df[['tile_id']].copy()\n    def_guess_df['opacity'] = 0.5\n    def_guess_df.to_csv('{base_name}_baseline.csv'.format(base_name=base_name), index=False)\n    def_guess_df['opacity'] = 1.0\n    def_guess_df.to_csv('{base_name}_always_yes.csv'.format(base_name=base_name), index=False)\n    def_guess_df['opacity'] = 0.0\n    def_guess_df.to_csv('{base_name}_always_no.csv'.format(base_name=base_name), index=False)\n    def_guess_df['opacity'] = np.random.uniform(0, 1, def_guess_df.shape[0])\n    def_guess_df.to_csv('{base_name}_random.csv'.format(base_name=base_name), index=False)","f9022b26":"package_output(train_tiles_df, 'train')\npackage_output(test_tiles_df, 'test')","49dfebd9":"!ls -lh *","6daa8e90":"from skimage.util.montage import montage2d\nnice_image = montage2d(imread('train.tif')[:625]).astype(np.uint8)\nimsave('nice_montage.png', nice_image)\nfig, ax1 = plt.subplots(1, 1, figsize = (20, 20))\nax1.imshow(nice_image, cmap='bone')\nax1.axis('off')","6290bf5a":"fun_df = pd.read_csv('train_all.csv')\nfun_df['intensity'] = np.mean(imread('train.tif'), (1, 2))\nfun_df.head(1)","bf8d339e":"sns.pairplot(fun_df[['intensity', 'opacity_prior', 'PatientAge', 'opacity']], hue='opacity')","1dea483a":"## Make it teaching friendly\nThis is a bit cheeky, but the goal is to make the data work well for teaching and so we keep the tile that are easy to fit a model to, but not too easy. The basic idea is using intensity should be somewhat helpful but using texture should be really really helpful. This is of course what we normally expect, but since that often isn't the case with real-world data we have to carefully select our samples"}}