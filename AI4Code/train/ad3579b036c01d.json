{"cell_type":{"4961702c":"code","f7b73a35":"code","717bdaed":"code","3c220f86":"code","572b68c2":"code","c73bcc4d":"code","467b6885":"code","52a42825":"code","b4ae631d":"code","d5b71720":"code","53616982":"code","cdaf7552":"code","19ffd2c7":"code","a72f0e44":"code","d579e4af":"code","963c127f":"code","563a33fd":"code","748a7809":"code","af7a2ad9":"code","2960bb84":"code","3215c4c5":"code","f3b4b985":"markdown","928ba6bd":"markdown","c3cc0fe3":"markdown"},"source":{"4961702c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f7b73a35":"import matplotlib.pylab as plt\nfrom scipy import interp\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_curve,auc\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.patches as patches\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nfrom keras import Sequential\nfrom keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import *\nfrom keras.models import Sequential,Model\nfrom keras.layers import *\nfrom keras import backend as K\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints","717bdaed":"data = pd .read_csv('..\/input\/voice.csv')","3c220f86":"data.head(10)","572b68c2":"print(data.columns)","c73bcc4d":"label_value_count = data.label.value_counts()\nprint(label_value_count)\nprint(data.info())","467b6885":"# Convert string label to float : male = 1, female = 0\ndict = {'label':{'male':1,'female':0}}      # label = column name\ndata.replace(dict,inplace = True)           # replace = str to numerical\nx = data.loc[:, data.columns != 'label']\ny = data.loc[:,'label']","52a42825":"x.head()","b4ae631d":"y.head()","d5b71720":"x = x.as_matrix()\ny = y.as_matrix()","53616982":"from sklearn.utils import shuffle\nx, y = shuffle(x, y, random_state=1010101)","cdaf7552":"trainX = x[:int(len(x) * 0.7)]\ntrainY = y[:int(len(y) * 0.7)]\nvalidateX = x[int(len(x) * 0.7) : int(len(x) * 0.9)]\nvalidateY = y[int(len(y) * 0.7) : int(len(y) * 0.9)]\ntestX = x[int(len(x) * 0.9):]\ntestY = y[int(len(y) * 0.9):]\n\nprint (len(trainX))\nprint (len(validateX))\nprint (len(testX))","19ffd2c7":"trainX = np.array(trainX)\ntrainY = np.array(trainY)\nvalidateX = np.array(validateX)\nvalidateY = np.array(validateY)\ntestX = np.array(testX)\ntestY = np.array(testY)","a72f0e44":"print (trainX.shape)","d579e4af":"model = Sequential()\nmodel.add(Dense(len(trainX[0]), input_dim=len(trainX[0]), activation='relu'))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))","963c127f":"model.compile(loss='mse', optimizer='adam', metrics=['accuracy'])","563a33fd":"history = model.fit(trainX, trainY, epochs=1000, batch_size=1000, validation_data = (validateX, validateY))","748a7809":"predictions = model.predict(testX)","af7a2ad9":"prob = []\nlimit_prob = []\n\nfor k in range(len(predictions)):\n    prob.append(round(predictions[k][0], 4))\n    if round(predictions[k][0], 4) > 0.5:\n        limit_prob.append(1)\n    else:\n        limit_prob.append(0)","2960bb84":"my_submission = pd.DataFrame({'real': testY, 'prediction': prob, 'limit prediction' : limit_prob})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('sample_submission1.csv', index=False)","3215c4c5":"my_submission.head(50)","f3b4b985":"**Read the data**","928ba6bd":"**Divide the data for training, validation and testing**","c3cc0fe3":"**Load the data as matrix (2D matrix)**"}}