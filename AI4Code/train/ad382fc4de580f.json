{"cell_type":{"4c4297e1":"code","b051aa37":"code","0e8980cb":"code","5b89baa5":"code","3e73b988":"code","e8ff0007":"code","382f4f42":"code","8dc35c98":"code","249acb95":"code","59d49d0b":"code","3d6aa055":"code","9e3dd104":"code","353afd83":"code","8ebb2602":"code","c49b436e":"code","6b5ca167":"code","6bbc0fb5":"code","f4e8dc83":"code","5c478782":"code","bf003c3f":"code","713fa650":"code","991104b9":"code","abd6d74c":"code","0be54b71":"code","985dea61":"code","bd554693":"code","d87c2891":"code","39543c61":"code","ac67d0f9":"code","2d30132d":"code","9bb57d21":"code","6fb44681":"code","f539e6a9":"code","037c4eb1":"code","787e24b7":"code","10839a69":"code","f3b9e51d":"code","b1c94648":"code","b3721eac":"code","bb661d62":"code","19f2a8e0":"code","8aca0809":"code","c64cd5e3":"code","b92c5520":"code","96da606e":"code","6213e0b8":"code","83de4c8b":"code","9c4c8754":"code","61af7206":"code","03072ce9":"code","d0bbbd36":"markdown","440c2f32":"markdown"},"source":{"4c4297e1":"from IPython.core.display import HTML\n\n\nHTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1884138\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1884138\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')\n","b051aa37":"\nHTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1477361\" data-url=\"https:\/\/public.flourish.studio\/visualisation\/1477361\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","0e8980cb":"import os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm.notebook import tqdm\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.io as pio\npio.templates.default = \"simple_white\"\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\n# --- setup ---\npd.set_option('max_columns', 50)","5b89baa5":"a = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv')\na","3e73b988":"country_df = a.groupby(['Date', 'Country_Region'])[['ConfirmedCases', 'Fatalities']].sum().reset_index()\n\ncountry_df.tail()\n\n","e8ff0007":"target_date = country_df['Date'].max()\n\nprint('Date: ', target_date)\nfor i in [1, 10, 100, 1000, 10000]:\n    n_countries = len(country_df.query('(Date == @target_date) & ConfirmedCases > @i'))\n    print(f'{n_countries} countries have more than {i} confirmed cases')\n    \n    \ntop_country_df = country_df.query('(Date == @target_date) & (ConfirmedCases > 1000)').sort_values('ConfirmedCases', ascending=False)\ntop_country_melt_df = pd.melt(top_country_df, id_vars='Country_Region', value_vars=['ConfirmedCases', 'Fatalities'])\n\n#from https:\/\/www.kaggle.com\/corochann\/covid-19-eda-with-recent-update-on-april\nfig = px.bar(top_country_melt_df.iloc[::-1],\n             x='value', y='Country_Region', color='variable', barmode='group',\n             title=f'Confirmed Cases\/Deaths on {target_date}', text='value', height=2000, orientation='h', template='plotly_dark')\nfig.show()\n","382f4f42":"a = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv')\n","8dc35c98":"country_df = a.groupby(['Date', 'Country_Region'])[['ConfirmedCases', 'Fatalities']].sum().reset_index()\n","249acb95":"target_date = country_df['Date'].max()\n\nprint('Date: ', target_date)\n","59d49d0b":"top_country_df = country_df.query('(Date == @target_date) & (ConfirmedCases > 1000)').sort_values('ConfirmedCases', ascending=False)\ntop_country_melt_df = pd.melt(top_country_df, id_vars='Country_Region', value_vars=['ConfirmedCases', 'Fatalities'])","3d6aa055":"#from https:\/\/www.kaggle.com\/corochann\/covid-19-eda-with-recent-update-on-april\nfig = px.bar(top_country_melt_df.iloc[::-1],\n             x='value', y='Country_Region', color='variable', barmode='group',\n             title=f'(After 1 week ) Confirmed Cases\/Deaths on {target_date}', text='value', height=2000, orientation='h')\nfig.show()","9e3dd104":"train = a\nBD_df = train.query('Country_Region == \"Bangladesh\"')\nBD_df['prev_confirmed'] = BD_df.groupby('Country_Region')['ConfirmedCases'].shift(1)\nBD_df['new_case'] = BD_df['ConfirmedCases'] - BD_df['prev_confirmed']\nBD_df.loc[BD_df['new_case'] < 0, 'new_case'] = 0.","353afd83":"fig = px.line(BD_df,\n              x='Date', y='new_case', color='Country_Region',\n              title=f'DAILY NEW Confirmed cases in Bangladesh(Till : 2020-04-7)')\nfig.show()","8ebb2602":"bd_df = pd.read_csv('..\/input\/covid19-in-bangladesh\/COVID-19_in_bd.csv')\nbd_df.head()","c49b436e":"\nbd_df = bd_df\nbd_df['prev_confirmed'] = bd_df['Confirmed'].shift(1)\nbd_df['new_case'] = bd_df['Confirmed'] - bd_df['prev_confirmed']\nbd_df.loc[bd_df['new_case'] < 0, 'new_case'] = 0.","6b5ca167":"fig = px.line(bd_df,\n              x='Date', y='new_case',\n              title=f'DAILY NEW Confirmed cases in Bangladesh')\nfig.show()","6bbc0fb5":"bd_df = bd_df\nbd_df['prev_confirmed'] = bd_df['Deaths'].shift(1)\nbd_df['new_case'] = bd_df['Deaths'] - bd_df['prev_confirmed']\nbd_df.loc[bd_df['new_case'] < 0, 'new_case'] = 0.","f4e8dc83":"fig = px.line(bd_df,\n              x='Date', y='new_case',\n              title=f'DAILY NEW Deaths in Bangladesh')\nfig.show()","5c478782":"bd_df = bd_df\nbd_df['prev_confirmed'] = bd_df['Recovered'].shift(1)\nbd_df['new_case'] = bd_df['Recovered'] - bd_df['prev_confirmed']\nbd_df.loc[bd_df['new_case'] < 0, 'new_case'] = 0.","bf003c3f":"fig = px.line(bd_df,\n              x='Date', y='new_case',\n              title=f'DAILY Recovering rate in Bangladesh')\nfig.show()","713fa650":"df1 = pd.read_csv('..\/input\/covid19-bangladesh-dataset\/COVID-19-Bangladesh.csv')\ndf1.head()","991104b9":"# Grouping cases by date \ndf = pd.read_csv('..\/input\/covid19-bangladesh-dataset\/COVID-19-Bangladesh.csv')\ntemp = df.groupby('Date')['Confirmed', 'Recovered', 'Deaths','Quarantine'].sum().reset_index() \n# Unpivoting \ntemp = temp.melt(id_vars='Date',value_vars = ['Confirmed', 'Recovered', 'Deaths'], var_name='Case', value_name='Count') \n","abd6d74c":"# Visualization\nfig = px.line(temp, x='Date', y='Count', color='Case', color_discrete_sequence=['#ff0000', '#FFFF00', '#0000FF' , '#0020FF'], template='presentation') \nfig.update_layout(title=\"COVID-19 Cases Over Time in Bangladesh\")\nfig.show()","0be54b71":"# Grouping cases by date \ndf = pd.read_csv('..\/input\/covid19-bangladesh-dataset\/COVID-19-Bangladesh.csv')\ntemp = df.groupby('Date')['Quarantine','Released From Quarantine'].sum().reset_index() \n# Unpivoting \ntemp = temp.melt(id_vars='Date',value_vars = ['Quarantine','Released From Quarantine'], var_name='Case', value_name='Count') \n","985dea61":"# Visualization\nfig = px.line(temp, x='Date', y='Count', color='Case', color_discrete_sequence=[ '#ff0000', '#FFFF00'], template='ggplot2') \nfig.update_layout(title=\"COVID-19 Cases Over Time in Bangladesh\")\nfig.show()","bd554693":"# Grouping cases by date \ndf = bd_df\ntemp = df.groupby('Date')['Confirmed', 'Recovered', 'Deaths'].sum().reset_index() \n# Unpivoting \ntemp = temp.melt(id_vars='Date',value_vars = ['Confirmed', 'Recovered', 'Deaths'], var_name='Case', value_name='Count') \n\n","d87c2891":"# Visualization\nfig = px.line(temp, x='Date', y='Count', color='Case', color_discrete_sequence=['#ff0000', '#FFFF00', '#0000FF'], template='plotly_dark') \nfig.update_layout(title=\"COVID-19 Cases Over Time in Bangladesh\")\nfig.show()","39543c61":"# from https:\/\/pypi.org\/project\/COVID19Py\/\n\n!pip install COVID19Py","ac67d0f9":"import COVID19Py\ncovid19 = COVID19Py.COVID19()\nloc = covid19.getLocationByCountryCode(\"BD\")\nlocData = loc[0]\nvirus = dict(locData['latest'])\nprint(virus)","2d30132d":"latest = covid19.getLatest()\nlatest","9bb57d21":"locations = covid19.getLocations(rank_by='recovered')\nlocations","6fb44681":"locations[20] #bd","f539e6a9":"changes = covid19.getLatestChanges()\nchanges","037c4eb1":"locations[20]['latest']['recovered'] #bd","787e24b7":"columns = ['country_code','country_population', 'confirmed', 'deaths', 'recovered']\ndf = pd.DataFrame( columns=columns)\ndf.iloc[:,2]","10839a69":"for i in range(len(locations)):\n    df = df.append({'confirmed': locations[i]['latest']['confirmed'],\n                    \n                    'deaths': locations[i]['latest']['deaths'],\n                    \n                    'recovered': locations[i]['latest']['recovered'],\n                   \n                   'country_code' : locations[i]['country_code'],\n                    \n                   'country_population' : locations[i]['country_population'],\n                   \n                    'last_updated' : locations[i]['last_updated'],\n                    \n                    'latitude' : locations[i]['coordinates']['latitude'],\n                    \n                    'longitude' : locations[i]['coordinates']['longitude']\n  \n                   },\n                   ignore_index=True)","f3b9e51d":"from datetime import datetime\ndate = datetime.date(datetime.now())\nprint(datetime.date(datetime.now()))\ndf.to_csv(f'covid{date}.csv', index=False)\ndf","b1c94648":"target_date = df['last_updated'].max()\n\nprint('Date: ', target_date)\nfor i in [1, 10, 100, 1000, 10000]:\n    n_countries = len(df.query('(last_updated == @target_date) & confirmed > @i'))\n    print(f'{n_countries} countries have more than {i} confirmed cases')","b3721eac":"top_country_df = df.query(' (deaths > 11)').sort_values('deaths', ascending=True)\ntop_country_melt_df = pd.melt(top_country_df, id_vars='country_code', value_vars=['deaths'])\n\ntop_country_df1 = df.query(' (confirmed > 100)').sort_values('confirmed', ascending=True)\ntop_country_melt_df1 = pd.melt(top_country_df1, id_vars='country_code', value_vars=['confirmed'])\n","bb661d62":"#from https:\/\/www.kaggle.com\/corochann\/covid-19-eda-with-recent-update-on-april\nfig = px.bar(top_country_melt_df.iloc[::-1],\n             x='value', y='country_code', color='variable', barmode='group',color_discrete_sequence=['#ff0000'], template='seaborn',\n             title=f'Lowest Deaths ', text='value', height=2000, orientation='h')\nfig.show()","19f2a8e0":"# Grouping cases by date \n\ntemp = df.groupby('last_updated')['confirmed', 'recovered', 'deaths'].sum().reset_index() \n# Unpivoting \ntemp = temp.melt(id_vars='last_updated',value_vars = ['confirmed', 'recovered', 'deaths'], var_name='Case', value_name='Count') \n\n\n# Visualization\nfig = px.line(temp, x='last_updated', y='Count', color='Case', color_discrete_sequence=['#ff0000', '#FFFF00', '#0000FF'], template='plotly_dark') \nfig.update_layout(title=\"COVID-19 Cases Over worldwide\")\nfig.show()\n\n","8aca0809":"#from https:\/\/www.kaggle.com\/corochann\/covid-19-eda-with-recent-update-on-april\nfig = px.bar(top_country_melt_df1.iloc[::-1],\n             x='value', y='country_code', color='variable', barmode='group',color_discrete_sequence=['#ff0000'], template='seaborn',\n             title=f'Lowest confirmed ', text='value', height=2000, orientation='h')\nfig.show()","c64cd5e3":"print(len(df.recovered))\ndf.recovered.sum()","b92c5520":"# from https:\/\/github.com\/imdevskp\/covid_19_jhu_data_web_scrap_and_cleaning\n#original author : https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-visualization-comparisons\n\nHTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","96da606e":"\nHTML('''<div class=\"flourish-embed flourish-chart\" data-src=\"story\/230114\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","6213e0b8":"\nHTML('''<div class=\"flourish-embed flourish-map\" data-src=\"story\/225979\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","83de4c8b":"\nHTML('''<div class=\"flourish-embed flourish-chart\" data-src=\"story\/230085\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","9c4c8754":"\nHTML('''<div class=\"flourish-embed flourish-chart\" data-src=\"story\/230110\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","61af7206":"\nHTML('''<div class=\"flourish-embed flourish-map\" data-src=\"story\/229998\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","03072ce9":"\nHTML('''<div class=\"flourish-embed flourish-table\" data-src=\"story\/230195\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","d0bbbd36":"**First up, let's see what are the top 25 cities in bangladesh?**","440c2f32":"ref : [COVID-19: free live mobile-friendly visualizations for use on any website](https:\/\/flourish.studio\/covid\/)"}}