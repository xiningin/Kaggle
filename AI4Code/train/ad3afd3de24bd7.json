{"cell_type":{"5b2fd98c":"code","8d2be179":"code","22cbc4cb":"code","7f7e6df7":"code","4bcc0094":"code","5684323f":"code","ec17ea9d":"code","9b3647ee":"code","d04f7f6d":"code","50fb59be":"code","c4623859":"code","db628a77":"markdown","beeb3dde":"markdown","ea21b154":"markdown","5ac0664a":"markdown","5ae3ddf0":"markdown","ec98e3ba":"markdown","7cbf01a6":"markdown","b136e7e0":"markdown","95842afb":"markdown","c17cf062":"markdown","b43e9d03":"markdown","b455dbbb":"markdown"},"source":{"5b2fd98c":"two_D_tensor = [\n[1,2,3],\n[4,5,6],\n[7,8,9]\n]\n\nprint(\"Elements along the first axes will be array\")\nprint(\"Elements along first axes are:\",two_D_tensor[0],'and',two_D_tensor[1],'and',two_D_tensor[2])\nprint(\"Elements along the second axes will be a value\")\nprint(\"Elements along second axes are:\",two_D_tensor[0][0],'and',two_D_tensor[1][2],'and',two_D_tensor[2][2],'and similarly 6 more values')","8d2be179":"two_D_tensor = [\n[1,2,3],\n[4,5,6],\n[7,8,9]\n]\n\n#To work with tensor shape we need to need to create to a tensor object So we are using Tensorflow for this:\nimport tensorflow as tf\nt= tf.constant(two_D_tensor)\nprint(\"The value of the tensor is: \",t)\nprint(\"The type of the tensor is: \",type(t))\nprint(\"The shape of the tensor is \",t.shape)","22cbc4cb":"#here we define a constant tensor with the datatype as float32\nt = tf.constant([\n    [1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3]\n], dtype=tf.float32) \n\nprint(\"The shape of the tensor t is: \",tf.constant(t).shape)\nreshaped_tensor = tf.reshape(t, [1,12])\nprint(reshaped_tensor)\n\nreshaped_tensor = tf.reshape(t, [2,6])\nprint(reshaped_tensor)\n\nreshaped_tensor = tf.reshape(t, [3,4])\nprint(reshaped_tensor)\n\nprint(\"\\nIn the above 3 examples the Rank of the tensor remain unchanged i.e 2\")","7f7e6df7":"reshaped_tensor = tf.reshape(t, [2,2,3])\nprint(reshaped_tensor)\nprint(\"The shape of the tensor t is: \",tf.constant(reshaped_tensor).shape,\"so the RANK of the new reshaped tensor is:3\")","4bcc0094":"#consider the following tensor\nt = tf.constant([\n    [1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3]\n], dtype=tf.float32)\n\n\n\nprint(tf.reshape(t, [1,12]))\nprint(tf.reshape(t, [1,12]).shape)\n\nprint(tf.squeeze(tf.reshape(t, [1,12])))\nprint(tf.squeeze(tf.reshape(t, [1,12])).shape)","5684323f":"#creating a flatten function\ndef flatten(t):\n    t = tf.reshape(t, [1, -1])\n    t = tf.squeeze(t)\n    return t","ec17ea9d":"t = tf.ones([4, 3])\nt","9b3647ee":"flatten(t)","d04f7f6d":"t1 = tf.constant([\n    [1,2],\n    [3,4]\n])\n\nt2 = tf.constant([\n    [5,6],\n    [7,8]\n])","50fb59be":"#this is as good as take rows from t2 and add them to t1 row\ntf.concat((t1, t2), axis = 0) ","c4623859":"#this is as good as take column from t2 and add them to t1 column\ntf.concat((t1, t2), axis = 1)","db628a77":"# Reshaping operations\n\nSuppose that we have the following tensor:","beeb3dde":"# Ranks\n\nThe rank of a tensor refers to the number of dimensions present within the tensor.\n\n* Normally for an array there are 2 dimensions like X-dimension and Y-dimension therefore the **RANK of array is 2**\n* For Matrix there are 3 dimensions are X-dimension, Y-dimension, Z-dimension therefore the **RANK of matrix is 3**\n\n**Note:**  A tensor's rank tells us how many indexes are needed to refer to a specific element within the tensor.","ea21b154":"Now we will try to reshape the tensor with the changing ranks","5ac0664a":"# **Introduction**\nWhile dealing with Deep Learning technologies the basic data structure to be used are **Tensors**. Analogically speaking Tensors are equivalent to Arrays in normal programming languages such as Python,C++.. etc.\nNow deep learning is totally concerned with manipulation of data using tensor operations.\n\nSo, it is really important to understand about the tensors and tensor operations.\n\n**Note**: All tensors are immutable like Python numbers and strings: you can never update the contents of a tensor, only create a new one.\n\nFor tensors of dimensions less than 3 we have spacial names such as:\n\n* A scalar is a single number\n* A vector is an array of numbers.\n* A matrix is a 2-D array\n\n![](https:\/\/res.cloudinary.com\/practicaldev\/image\/fetch\/s--oTgfo1EL--\/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\/https:\/\/raw.githubusercontent.com\/adhiraiyan\/DeepLearningWithTF2.0\/master\/notebooks\/figures\/fig0201a.png)\n\n\n\n","5ae3ddf0":"# Adavnced Tensor operations\n*currently working*","ec98e3ba":"# Concatenating Tensors\n\nSuppose we have two tensors:","7cbf01a6":"# Tensor operations\n\nThe 4 main types of tensor operations are:\n* Reshaping operations\n* Element-wise operations\n* Reduction operations\n* Access operations","b136e7e0":"# Shape\nThe shape of a tensor is determined by the length of each axis, so if we know the shape of a given tensor, then we know the length of each axis, and this tells us how many indexes are available along each axis.\n\nLets understand this programatically","95842afb":"The flatten() function takes in a tensor t as an argument.\n\nSince the argument t can be any tensor, we pass -1 as the second argument to the reshape() function. In TensorFlow, the -1 tells the reshape() function to figure out what the value should be based on the number of elements contained within the tensor. Remember, the shape must equal the product of the shape's component values. This is how TensorFlow can figure out what the value should be, given a 1 as the first argument.\n\nSince our tensor t has 12 elements, the reshape() function is able to figure out that a 12 is required for the length of the second axis.\n\nAfter squeezing, the first axis (axis-0) is removed, and we obtain our desired result, a 1d-array of length 12.\n\nHere's an example of this in action:","c17cf062":"# **Understanding Dimensions of Tensors**\n\nFor understanding the dimensions of tensors we need to understand the following terms:\n* Indexes\n* Ranks\n* Axis\n* Shapes\n\n# Index\nIn Python as well as in almost all programming languages the index will start from 0","b43e9d03":"# Flatten A Tensor\n\nA flatten operation on a tensor reshapes the tensor to have a shape that is equal to the number of elements contained in the tensor. This is the same thing as a 1d-array of elements.\n\n\nNote: Flattening a tensor means to remove all of the dimensions except for one.","b455dbbb":"# Squeezing And Unsqueezing\n\n* Squeezing a tensor removes the dimensions or axes that have a length of one.\n* Unsqueezing a tensor adds a dimension with a length of one.\n\nNote: Squeezing And Unsqueezing allow us to expand or shrink the rank (number of dimensions) of our tensor"}}