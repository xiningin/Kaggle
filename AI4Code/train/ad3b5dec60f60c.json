{"cell_type":{"6591a980":"code","adfd561d":"code","43ace258":"code","0c156af5":"code","5ae7ced7":"code","5d8392b2":"code","e2c3e333":"code","7de93c79":"code","f8306942":"code","6ddf4fc3":"code","ffdeea32":"code","cff54f31":"code","94702967":"code","3bce56fa":"code","2ee281d4":"code","ee79f6a8":"code","3f659be3":"code","06479255":"code","ea0f606e":"code","051e335c":"code","ad05b137":"code","c32267aa":"code","e85ab165":"code","cd9bd879":"code","e642e17c":"code","f8714432":"code","9ac6b31e":"code","812f9dd0":"code","c1395712":"code","e783e639":"code","fe188441":"code","8f6b9ada":"code","0a57569d":"code","db2a3dec":"code","f651d7db":"code","454d544c":"code","ac1914cf":"code","e5a36294":"code","216d7b83":"code","a5090adf":"code","04c2b3f1":"code","b4b1096e":"code","c607b716":"code","0c4016aa":"code","612ed230":"code","e6861c48":"code","aa050a0a":"code","83031f9b":"code","23868858":"code","73e1f2a9":"code","77bdd75b":"code","7a5f6d4c":"code","d0ff9dbc":"code","2a94b85d":"code","27b2cc7f":"code","8c97e6c1":"code","1d41b39e":"markdown","f68254d0":"markdown","959ba5c0":"markdown","954c81e8":"markdown","8eb8aa4c":"markdown","8a778ed4":"markdown","b44db8e1":"markdown"},"source":{"6591a980":"import pandas as pd\nimport numpy as np\npd.options.display.max_rows = 999\npd.options.display.max_columns = 999\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#from pylab import rcParams\nplt.rcParams['figure.figsize'] = 20, 5\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom scipy.special import boxcox1p\nfrom scipy import stats\nfrom scipy.stats import skew\nfrom scipy.stats import boxcox_normmax","adfd561d":"train1 = pd.read_csv('..\/input\/train.csv')\ntest1 = pd.read_csv('..\/input\/test.csv')","43ace258":"train = train1.copy()\ntest = test1.copy()","0c156af5":"test_ID = test[\"Id\"]","5ae7ced7":"train.head()","5d8392b2":"train.shape","e2c3e333":"test.shape","7de93c79":"train.isnull().sum()","f8306942":"test.isnull().sum()","6ddf4fc3":"train.isnull().sum() \/ train.shape[0]","ffdeea32":"plt.scatter(train[(train[\"LotArea\"]<30000) & (train[\"LotFrontage\"]<200)][\"LotArea\"],train[(train[\"LotArea\"]<30000) & (train[\"LotFrontage\"]<200)][\"LotFrontage\"])","cff54f31":"train[\"train\"] = 1\ntest[\"train\"] = 0","94702967":"full = pd.concat([train,test],axis=0,sort=False)","3bce56fa":"full.shape","2ee281d4":"import pylab\n# plot the data itself\nx = full[(full[\"LotArea\"]<30000) & (full[\"LotFrontage\"]<200)][\"LotArea\"].values\ny = full[(full[\"LotArea\"]<30000) & (full[\"LotFrontage\"]<200)][\"LotFrontage\"].values\npylab.plot(x,y,'o')\n\n# calc the trendline\nz = np.polyfit(x, y, 1)\np = np.poly1d(z)\npylab.plot(x,p(x),\"r--\")\n# the line equation:","ee79f6a8":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(pd.DataFrame(x),y)","3f659be3":"full.loc[full[\"LotFrontage\"].isnull(),\"LotFrontage\"]= lm.predict(pd.DataFrame(full[full[\"LotFrontage\"].isnull()][\"LotArea\"]))","06479255":"full['MSZoning'] = full['MSZoning'].fillna(full['MSZoning'].mode()[0])","ea0f606e":"ax = sns.countplot(x=full[full[\"BsmtQual\"]==\"Ex\"][\"YearBuilt\"])\nax.set_xticklabels(ax.get_xticklabels(),rotation=90)\nax.axes.get_yaxis().set_visible(False)","051e335c":"plt.figure(figsize=(20,5))\nax = sns.countplot(x=full[full[\"BsmtQual\"]==\"Gd\"][\"YearBuilt\"])\nax.set_xticklabels(ax.get_xticklabels(),rotation=90)\nax.axes.get_yaxis().set_visible(False)","ad05b137":"plt.figure(figsize=(20,5))\nsns.countplot(x=train[train[\"BsmtQual\"].isnull()][\"YearBuilt\"])","c32267aa":"full['BsmtQual'].fillna(full.groupby('YearBuilt')['BsmtQual'].agg(lambda x:x.value_counts().index[0]))","e85ab165":"#dropping columns which has a lot of nulls or whcih doesn't looks to have predictive ability\ncols_to_drop = [\"Alley\",\"PoolQC\",\"Fence\",\"MiscFeature\",\"Utilities\"]","cd9bd879":"if \"Alley\" in full.columns:\n    full.drop(cols_to_drop,axis=1,inplace=True)","e642e17c":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','FireplaceQu','GarageType', 'GarageFinish', 'GarageQual','GarageCond','MasVnrType','Functional','GarageYrBlt'):\n    full[col] = full[col].fillna('None')","f8714432":"full[\"GarageYrBlt\"] = full[\"GarageYrBlt\"].replace(\"None\",-1)","9ac6b31e":"full[\"GarageYrBlt\"] = full[\"GarageYrBlt\"].astype(int)","812f9dd0":"full['SaleType'] = full['SaleType'].fillna(full['SaleType'].mode()[0])","c1395712":"full['Exterior1st'] = full['Exterior1st'].fillna(full['Exterior1st'].mode()[0])\nfull['Exterior2nd'] = full['Exterior2nd'].fillna(full['Exterior2nd'].mode()[0])\nfull['BsmtFinSF1'] = full['BsmtFinSF1'].fillna(0)\nfull['BsmtFinSF2'] = full['BsmtFinSF2'].fillna(0)\nfull['TotalBsmtSF'] = full['TotalBsmtSF'].fillna(0)\nfull['BsmtUnfSF'] = full['BsmtUnfSF'].fillna(0)\nfull['BsmtFullBath'] = full['BsmtFullBath'].fillna(0)\nfull['BsmtHalfBath'] = full['BsmtHalfBath'].fillna(0)\nfull['Electrical'] = full['Electrical'].fillna(full['Electrical'].mode()[0])\nfull['KitchenQual'] = full['KitchenQual'].fillna(full['KitchenQual'].mode()[0])\nfull['MasVnrArea'] = full['MasVnrArea'].fillna(0)\nfull['GarageCars'] = full['GarageCars'].fillna(0)\nfull['GarageArea'] = full['GarageArea'].fillna(0)","e783e639":"#Feature Engineering\nfull['TotalSF'] = full['TotalBsmtSF'] + full['1stFlrSF'] + full['2ndFlrSF']\nfull['Total_Bathrooms'] = (full['FullBath'] + (0.5 * full['HalfBath']) + full['BsmtFullBath'] + (0.5 * full['BsmtHalfBath']))\nfull['Total_porch_sf'] = (full['OpenPorchSF'] + full['3SsnPorch'] + full['EnclosedPorch'] + full['ScreenPorch'] + full['WoodDeckSF'])\nfull[\"Age\"] = full[\"YrSold\"] - full[\"YearBuilt\"]\nfull[\"Age_Remod\"] = full[\"YrSold\"] - full[\"YearRemodAdd\"]\nfull[\"Age_Garage\"] = full[\"YrSold\"] - full[\"GarageYrBlt\"]","fe188441":"mask = full.Age < 0\nfull.loc[full.Age<0,\"Age\"] = 0","8f6b9ada":"full[\"YrSold\"] = full[\"YrSold\"].astype(\"object\")\nfull[\"MoSold\"] = full[\"MoSold\"].astype(\"object\")\nfull[\"MSSubClass\"] = full[\"MSSubClass\"].astype(\"object\")","0a57569d":"full.loc[full[\"Age_Garage\"]>2000, \"Age_Garage\"] = -1","db2a3dec":"full.drop([\"YearBuilt\",\"YearRemodAdd\",\"GarageYrBlt\"],axis=1,inplace=True)","f651d7db":"train = full[full['train']==1]\ntest = full[full['train']==0]\ndata_num = train.drop([\"Id\"],axis=1).select_dtypes(include = ['float64', 'int64'])\nnumeric_cols = data_num.columns","454d544c":"for i in full.drop([\"SalePrice\",\"train\"],axis=1).columns:\n    if (i in numeric_cols) and (skew(full[i])>0.6) and full[i].value_counts().shape[0]>100:\n        print(i,skew(full[i]))\n        #print(full[i].value_counts())\n        full[i] = np.log1p(full[i])","ac1914cf":"for i in range(0, len(data_num.columns), 4):\n    sns.pairplot(data=data_num,\n                x_vars=data_num.columns[i:i+4],\n                y_vars=['SalePrice'])","e5a36294":"data_obj =  train.drop([\"Id\"],axis=1).select_dtypes(include = ['object'])","216d7b83":"data_obj = data_obj.join(train['SalePrice'])","a5090adf":"for i in range(0, len(data_obj.drop('SalePrice',axis=1).columns)):\n    plt.figure(i)\n    ax = sns.boxplot(x = data_obj.columns[i],y = 'SalePrice', data=data_obj)\n    ax.set_xticklabels(ax.get_xticklabels(),rotation=60)\n    ax.axes.get_yaxis().set_visible(False)","04c2b3f1":"#one hot encoding\nfull = pd.get_dummies(full, columns=data_obj.drop(\"SalePrice\",axis=1).columns)","b4b1096e":"#plotting to see the distribution of visitors \nplt.xlim(40000, 500000)\nsns.distplot(train[\"SalePrice\"].values,bins=100)","c607b716":"#plotting to see the distribution of visitors \nplt.xlim(10, 15)\nsns.distplot(np.log1p(train[\"SalePrice\"].values),bins=100)","0c4016aa":"train = full[full['train']==1]\ntest = full[full['train']==0]","612ed230":"train.drop(\"train\",axis=1,inplace=True)\ntest.drop(\"train\",axis=1,inplace=True)","e6861c48":"#LightGBM\nparams = {\n    'learning_rate':[0.01,0.02],\n    'n_estimators':[100,200,300,400,500,550,600,650],\n    'num_leaves':[5,6,7,8],\n    'boosting_type':['gbdt'],\n    'metric':['rmse'],\n    'objective':['regression'],\n    'max_depth':[5,6,7,8],\n    'sub_feature':[0.5,0.6,0.7,0.75,0.8,0.85,0.9],\n    'subsample':[0.5,0.6,0.7,0.75,0.8,0.85,0.9],\n    'min_child_samples':[6,7,5,10],\n    'lambda_l1':[0,1,2,3,4,5,6,7,8,9,10],\n    'lambda_l2':[0,1,2,3,4,5,6,7,8,9,10]\n}","aa050a0a":"from sklearn.model_selection import train_test_split\nimport lightgbm as lgb\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn import preprocessing, metrics\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, Ridge, SGDRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.svm import SVR, LinearSVR ","83031f9b":"X_train, X_test, y_train, y_test = train_test_split(train.drop([\"Id\",\"SalePrice\"],axis=1), train[\"SalePrice\"], test_size=0.3, random_state=42)\n","23868858":"clf = lgb.LGBMRegressor()","73e1f2a9":"grid = RandomizedSearchCV(clf,params,verbose=1,cv=5,n_jobs=-1,n_iter=100)","77bdd75b":"#LightGBM\nusable_columns = list(set(train.columns) - set(['Id','SalePrice']))\nfold_n=5\nfolds = KFold(n_splits=fold_n, shuffle=True, random_state=2319)\ny_pred_lgb = np.zeros(len(test))\ny_pred_train =  np.zeros(len(train))\ni = 0\nrmse = 0\ngridParams = {'subsample': 0.8,'sub_feature': 0.75,'objective': 'regression','num_leaves': 8,'n_estimators': 1000,'min_child_samples': 7,'metric': 'rmse','max_depth': 8,'learning_rate': 0.02,'lambda_l2': 5,'lambda_l1': 0,'boosting_type': 'gbdt'}\nfor fold_, (train_index, valid_index) in enumerate(folds.split(train.drop([\"Id\",\"SalePrice\"],axis=1),np.log1p(train[\"SalePrice\"]))):\n    print(\"Fold = {}\".format(fold_+1))\n    train = pd.DataFrame(train)\n    y = pd.DataFrame(np.log1p(train[\"SalePrice\"]))\n    \n    X_t, y_t = pd.DataFrame(train).iloc[train_index][usable_columns],pd.DataFrame(y).iloc[train_index]\n    \n    trn_data = lgb.Dataset(X_t, label=y_t)\n    val_data = lgb.Dataset(train.iloc[valid_index][usable_columns], label=y.iloc[valid_index])\n    \n    lgb_model = lgb.train(gridParams, trn_data,valid_sets = [trn_data, val_data], verbose_eval=5000, early_stopping_rounds = 10)\n\n    y_pred_train[valid_index] = lgb_model.predict(train.iloc[valid_index][usable_columns].values,num_iteration=lgb_model.best_iteration)\n    \n    y_actuals_lgb = y.iloc[valid_index]\n    rmse += np.round(np.sqrt(metrics.mean_squared_error(y_actuals_lgb,y_pred_train[valid_index])),4)\n    print(\"RMSE = \", rmse)\n    \n    y_pred_lgb += lgb_model.predict(test[usable_columns], num_iteration=lgb_model.best_iteration)\/fold_n\nprint(\"Mean RMSE = \", rmse\/5)\nresult=pd.DataFrame({'Id':test_ID, 'SalePrice':np.expm1(y_pred_lgb)})\nresult.to_csv(\"submission.csv\",index=False)","7a5f6d4c":"#Linear Regression\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, Ridge, SGDRegressor","d0ff9dbc":"#LassoRegression\nusable_columns = list(set(train.columns) - set(['Id','SalePrice']))\nclf = Lasso(alpha=0.0005)\nclf.fit(train[usable_columns],np.log1p(train[\"SalePrice\"]))\ny_train_lasso = np.expm1(clf.predict(train[usable_columns]))\ny_pred_lasso = np.expm1(clf.predict(test[usable_columns]))\nprint(np.round(np.sqrt(metrics.mean_squared_error(np.log1p(train[\"SalePrice\"]),np.log1p(y_train_lasso))),4))\nresult=pd.DataFrame({'Id':test_ID, 'SalePrice':y_pred_lasso})\nresult.to_csv(\"submission.csv\",index=False)","2a94b85d":"#RidgeRegression\nclf = Ridge(alpha=60)\nclf.fit(train[usable_columns],np.log1p(train[\"SalePrice\"]))\ny_train_ridge = np.expm1(clf.predict(train[usable_columns]))\ny_pred_ridge = np.expm1(clf.predict(test[usable_columns]))\nprint(np.round(np.sqrt(metrics.mean_squared_error(np.log1p(train[\"SalePrice\"]),np.log1p(y_train_ridge))),4))\nresult=pd.DataFrame({'Id':test_ID, 'SalePrice':y_pred_ridge})\nresult.to_csv(\"submission.csv\",index=False)","27b2cc7f":"#Elastic Net\nclf = ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3)\nclf.fit(train[usable_columns],np.log1p(train[\"SalePrice\"]))\ny_train_EN = np.expm1(clf.predict(train[usable_columns]))\ny_pred_EN = np.expm1(clf.predict(test[usable_columns]))\nprint(np.round(np.sqrt(metrics.mean_squared_error(np.log1p(train[\"SalePrice\"]),np.log1p(y_train_EN))),4))\nresult=pd.DataFrame({'Id':test_ID, 'SalePrice':y_pred_EN})\nresult.to_csv(\"submission.csv\",index=False)","8c97e6c1":"#Ensembling & Submission\nresult=pd.DataFrame({'Id':test_ID, 'SalePrice':(0.3*y_pred_lasso+ 0.1*np.expm1(y_pred_lgb) + 0.3*y_pred_EN + 0.3*y_pred_ridge) })\nresult.to_csv(\"submission.csv\",index=False)","1d41b39e":"**Modelling**","f68254d0":"There is a linear relation between LotArea and LotFrontage. So we can use this relation to fill the nulls for LotFrontage","959ba5c0":"**Initial Data Exploration**","954c81e8":"**Data Visualization**","8eb8aa4c":"**Reading Data**","8a778ed4":"Thanks for any upvotes!!","b44db8e1":"**Data Cleaning**"}}