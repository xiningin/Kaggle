{"cell_type":{"99a7a851":"code","1f343329":"code","c502f6ef":"code","e8aa7b2e":"code","e8ade707":"code","bc4cfe6f":"code","2cbe4f51":"code","9f32b23b":"code","6d07b3ed":"code","525247f2":"code","6055d17f":"code","49ad606b":"code","94f50bac":"code","61c053fe":"code","18b1aabd":"code","6d9f4418":"code","fa0b6dd3":"code","9d3dfc16":"code","8e9e854d":"code","d62a50a9":"code","eb500c13":"code","0533eff5":"code","3398a7af":"code","81c53d9b":"code","e36318e6":"code","539e900b":"code","165620b7":"code","62a8dee0":"code","18a53006":"code","dabbd642":"code","363c4be5":"markdown"},"source":{"99a7a851":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n!pip install fpdf\nimport pandas as pd\nimport matplotlib\nfrom pylab import title, figure, xlabel, ylabel, xticks, bar, legend, axis, savefig\nfrom fpdf import FPDF\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom sklearn import datasets \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style='white')\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.metrics import mean_squared_error\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1f343329":"df = pd.read_csv('\/kaggle\/input\/student-performance-in-class\/iitstudentperformance.csv')","c502f6ef":"df.columns","e8aa7b2e":"sns.pairplot(df,hue='Class');\nsavefig('pairplot.png')\n\npdf = FPDF()\npdf.add_page()\npdf.set_xy(0, 0)\npdf.set_font('Arial', '', 14)\npdf.cell(200, 50, txt=\"Pair Plot\",ln=1, align=\"C\")\npdf.ln()\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.image('pairplot.png',x = 40, y = 40, w = 150, h = 150)\n","e8ade707":"df.hist(figsize=(15, 7))\nsavefig('Histogram.png')\n\n#pdf = FPDF()\npdf.add_page()\npdf.set_xy(0, 0)\npdf.set_font('Arial', '', 14)\npdf.cell(200, 50, txt=\"Histogram\",ln=1, align=\"C\")\npdf.ln()\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.image('Histogram.png',x = 40, y = 40, w = 150, h = 150)","bc4cfe6f":"g = sns.PairGrid(df, hue=\"Class\",palette='Set1')\ng.map_diag(plt.hist)\ng.map_offdiag(plt.scatter)\ng.add_legend();\nsavefig('Pairgrid.png')\n\n#pdf = FPDF()\npdf.add_page()\npdf.set_xy(0, 0)\npdf.set_font('Arial', '', 14)\npdf.cell(200, 50, txt=\"Pairgrid.png\",ln=1, align=\"C\")\npdf.ln()\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.image('Pairgrid.png',x = 40, y = 40, w = 150, h = 150)","2cbe4f51":"\nmelt = pd.melt(df,id_vars='Class',value_vars=['raisedhands','VisITedResources','AnnouncementsView','Discussion'])\nplt.rcParams['figure.figsize']=(15,4)\nsns.swarmplot(x='variable',y='value',hue='Class' , data=melt,palette='Set1')\nplt.ylabel('Values from 0 to 100')\nplt.xlabel('Attributes')\nplt.title('High, Middle & Low level students');\nsavefig('Swarmplot.png')\n\n#pdf = FPDF()\npdf.add_page()\npdf.set_xy(0, 0)\npdf.set_font('Arial', '', 14)\npdf.cell(200, 50, txt=\"Swarmplot.png\",ln=1, align=\"C\")\npdf.ln()\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.image('Swarmplot.png',x = 40, y = 40, w = 150, h = 150)","9f32b23b":"sns.countplot(data=df,x='gender',hue='Class',palette='Set1');\nsavefig('CountGC.png')\n\n#pdf = FPDF()\npdf.add_page()\npdf.set_xy(0, 0)\npdf.set_font('Arial', '', 14)\npdf.cell(200, 50, txt=\"Class Vs Gender.png\",ln=1, align=\"C\")\npdf.ln()\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.image('CountGC.png',x = 40, y = 40, w = 150, h = 150)","6d07b3ed":"sns.countplot(data=df,x='Relation',hue='Class',palette='Set1');\nsavefig('CountRC.png')\n\n#pdf = FPDF()\npdf.add_page()\npdf.set_xy(0, 0)\npdf.set_font('Arial', '', 14)\npdf.cell(200, 50, txt=\"Class Vs Relation.png\",ln=1, align=\"C\")\npdf.ln()\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.image('CountRC.png',x = 40, y = 40, w = 150, h = 150)","525247f2":"df = df.drop('PlaceofBirth',1)","6055d17f":"ls = ['gender','Relation','Topic','SectionID','GradeID','NationalITy','Class','StageID','Semester','ParentAnsweringSurvey','ParentschoolSatisfaction','StudentAbsenceDays']\n\nfor i in ls:\n    plt.figure(figsize=(10, 7))\n    g = sns.factorplot(i,data=df,kind='count')","49ad606b":"target = df.pop('Class')\n\nX = pd.get_dummies(df)","94f50bac":"X","61c053fe":"le = LabelEncoder()\ny = le.fit_transform(target)","18b1aabd":"y","6d9f4418":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=0)\nss = StandardScaler()\n#print X_train\nX_train_std = ss.fit_transform(X_train)\nX_test_std = ss.fit_transform(X_test)\n#print X_train_std","fa0b6dd3":"type(X_train_std)","9d3dfc16":"feat_labels = X.columns[:58]\nforest = RandomForestClassifier(n_estimators=1000,random_state=0,n_jobs=-1)\nforest.fit(X_train,y_train)\nimportances = forest.feature_importances_\nindices = np.argsort(importances)[::-1]\n#for f in range(X_train.shape[1]):\n#    print(\"%2d) %-*s %f\" % (f + 1, 30,feat_labels[indices[f]],importances[indices[f]]))\nplt.figure(figsize=(20, 15))\nh = sns.barplot(importances[indices],feat_labels[indices])\nsavefig('Barplot.png')\n\n#pdf = FPDF()\npdf.add_page()\npdf.set_xy(0, 0)\npdf.set_font('Arial', '', 14)\npdf.cell(200, 50, txt=\"Feature Importance\",ln=1, align=\"C\")\npdf.ln()\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.image('Barplot.png',x = 40, y = 40, w = 150, h = 150)","8e9e854d":"X_train_new = X_train\nX_test_new = X_test\nprint('X_train in columns')\nprint(X_train.columns)\nprint('X_test in columns')\nprint(X_test.columns)  ","d62a50a9":"ls = ['VisITedResources','raisedhands','AnnouncementsView','StudentAbsenceDays_Above-7','StudentAbsenceDays_Under-7','Discussion']\n\nfor i in X_train.columns:\n    if i in ls:\n        pass\n    else:\n        X_train_new.drop(i , axis=1, inplace=True)\n\nfor i in X_test.columns:\n    if i in ls:\n        pass\n    else:\n        X_test_new.drop(i , axis=1, inplace=True)","eb500c13":"models = []\nmodels.append(('LR', LinearRegression()))\nmodels.append(('LASSO', Lasso()))\nmodels.append(('EN', ElasticNet()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('CART', DecisionTreeRegressor()))\nmodels.append(('SVR', SVR()))","0533eff5":"# evaluate each model in turn\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=7)\n    cv_results = cross_val_score(model, X_train_new, y_train, cv=kfold, scoring='neg_mean_squared_error')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","3398a7af":"# Standardize the dataset\npipelines = []\npipelines.append(('ScaledLR', Pipeline([('Scaler', StandardScaler()),('LR',LinearRegression())])))\npipelines.append(('ScaledLASSO', Pipeline([('Scaler', StandardScaler()),('LASSO',Lasso())])))\npipelines.append(('ScaledEN', Pipeline([('Scaler', StandardScaler()),('EN',ElasticNet())])))\npipelines.append(('ScaledKNN', Pipeline([('Scaler', StandardScaler()),('KNN',KNeighborsRegressor())])))\npipelines.append(('ScaledCART', Pipeline([('Scaler', StandardScaler()),('CART',DecisionTreeRegressor())])))\npipelines.append(('ScaledSVR', Pipeline([('Scaler', StandardScaler()),('SVR', SVR())])))\nresults = []\nnames = []\nfor name, model in pipelines:\n    kfold = KFold(n_splits=10, random_state=7)\n    cv_results = cross_val_score(model, X_train_new, y_train, cv=kfold, scoring='neg_mean_squared_error')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)\n\nfig = plt.figure()\nfig.suptitle('Scaled Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nsavefig('AlgoCompare.png')\nax.set_xticklabels(names)\nplt.show()\n\n\n#pdf = FPDF()\npdf.add_page()\npdf.set_xy(0, 0)\npdf.set_font('Arial', '', 14)\npdf.cell(200, 50, txt=\"Scaled Algorithm Comparison\",ln=1, align=\"C\")\npdf.ln()\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.image('AlgoCompare.png',x = 40, y = 40, w = 150, h = 150)","81c53d9b":"#lasso algorithm tuning\nscaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\nk_values = np.array([.1,.11,.12,.13,.14,.15,.16,.09,.08,.07,.06,.05,.04])\nparam_grid = dict(alpha=k_values)\nmodel = Lasso()\nkfold = KFold(n_splits=10, random_state=7)\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, scoring='neg_mean_squared_error', cv=kfold)\ngrid_result = grid.fit(rescaledX, y_train)\n\n\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","e36318e6":"#using ensembles\nensembles = []\nensembles.append(('ScaledAB', Pipeline([('Scaler', StandardScaler()),('AB',AdaBoostRegressor())])))\nensembles.append(('ScaledGBM', Pipeline([('Scaler', StandardScaler()),('GBM',GradientBoostingRegressor())])))\nensembles.append(('ScaledRF', Pipeline([('Scaler', StandardScaler()),('RF',RandomForestRegressor())])))\nensembles.append(('ScaledET', Pipeline([('Scaler', StandardScaler()),('ET',ExtraTreesRegressor())])))\nresults = []\nnames = []\nfor name, model in ensembles:\n    kfold = KFold(n_splits=10, random_state=7)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='neg_mean_squared_error')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","539e900b":"# Compare Algorithms\nfig = plt.figure()\nfig.suptitle('Scaled Ensemble Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nsavefig('EnsembleAlgoCompare.png')\nax.set_xticklabels(names)\nplt.show()\n\n\n#pdf = FPDF()\npdf.add_page()\npdf.set_xy(0, 0)\npdf.set_font('Arial', '', 14)\npdf.cell(200, 50, txt=\"Scaled Ensemble Algorithm Comparison\",ln=1, align=\"C\")\npdf.ln()\n# Then put a blue underlined link\npdf.set_text_color(0, 0, 255)\npdf.set_font('', 'U')\npdf.image('EnsembleAlgoCompare.png',x = 40, y = 40, w = 150, h = 150)","165620b7":"# Tune scaled AdaboostRegressor\nscaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\nparam_grid = dict(n_estimators=np.array([50,100,150,200,250,300,350,400]))\nmodel = AdaBoostRegressor(random_state=7)\nkfold = KFold(n_splits=10, random_state=7)\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, scoring='neg_mean_squared_error', cv=kfold)\ngrid_result = grid.fit(rescaledX, y_train)\n\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","62a8dee0":"# prepare the model\nscaler = StandardScaler().fit(X_train)\nrescaledX = scaler.transform(X_train)\nmodel = GradientBoostingRegressor(random_state=7, n_estimators=400)\nmodel.fit(rescaledX, y_train)","18a53006":"# transform the validation dataset\nrescaledValidationX = scaler.transform(X_test)\npredictions = model.predict(rescaledValidationX)\nprint(mean_squared_error(y_test, predictions))","dabbd642":"pdf.output('Report.pdf')","363c4be5":"This note book is an example of \"How to create a automated report in pdf which includes graphs\""}}