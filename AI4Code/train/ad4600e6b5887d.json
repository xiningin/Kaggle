{"cell_type":{"3fe039d7":"code","b7d3f17b":"code","d520c653":"code","56a69f47":"code","d1cf1ec7":"code","f21b5bb0":"code","a2a831f5":"code","6a076471":"code","041031c0":"markdown","d2e61792":"markdown","83c4140d":"markdown","432f0886":"markdown","aa30ebba":"markdown","2533924e":"markdown","e85d53f5":"markdown"},"source":{"3fe039d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n''' Paginas con informacion relevante https:\/\/towardsdatascience.com\/building-a-convolutional-neural-network-cnn-in-keoras-329fbbadc5f5'''\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport cv2\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom sklearn.utils import shuffle\nfrom keras.utils import to_categorical\nfrom keras.layers import normalization\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\nfrom PIL import Image\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\n# Any results you write to the current directory are saved as output.\n#metodo para conseguir las imagenes de los directorios\nPATH = os.getcwd()\ninfectedCellsPath = '..\/input\/cell_images\/cell_images\/Parasitized'\nuninfectedCellsPath = '..\/input\/cell_images\/cell_images\/Uninfected'\nlabels = []\nimages = []\ninfectedCells = os.listdir(infectedCellsPath)\nprint(infectedCells[0])\nuninfectedCells = os.listdir(uninfectedCellsPath)\nfor img in infectedCells:\n    if img != 'Thumbs.db':\n        input_img = cv2.imread(infectedCellsPath+ '\/' + img )\n        input_img_resize = cv2.resize(input_img,(50,50))\n        images.append(input_img_resize)\n        labels.append(1)\nplt.imshow(images[0])\nplt.title('Infected Cell')\nplt.show()\nfor img in uninfectedCells:\n        if img != 'Thumbs.db':\n            input_img=cv2.imread(uninfectedCellsPath + '\/'+ img )\n            input_img_resize = cv2.resize(input_img,(50,50))\n            images.append(input_img_resize)\n            labels.append(0)\nplt.imshow(images[-1])\nplt.title('Uinfected Cell')\nplt.show()\nimages = np.array(images)\nlabels = np.array(labels)","b7d3f17b":"x_train, x_test, y_train, y_test = train_test_split(images,labels, train_size = 0.8517, random_state = 10019)","d520c653":"from keras.utils import np_utils\ny_train = np_utils.to_categorical(y_train, num_classes = 2)\ny_test = np_utils.to_categorical(y_test, num_classes = 2)","56a69f47":"model = Sequential()\nmodel.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(50,50,3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(32, kernel_size=3, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(32, kernel_size=3, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(32, kernel_size=3, activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(2, activation='sigmoid'))","d1cf1ec7":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","f21b5bb0":"model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10)","a2a831f5":"Prueba","6a076471":"model.evaluate(x_test, y_test, verbose=1)","041031c0":"Entrenamiento del modelo","d2e61792":"Prueba","83c4140d":"Importaci\u00f3n de paquetes y cargar el dataset\n","432f0886":"Escala","aa30ebba":"Creaci\u00f3n del modelo\n","2533924e":"Creacion de conjuntos de entrenamiento","e85d53f5":"Compilacion de modelo\n"}}