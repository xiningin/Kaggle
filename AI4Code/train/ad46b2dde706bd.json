{"cell_type":{"90676a38":"code","0f0a7fb9":"code","d9faddad":"code","f35d024b":"code","e24c8093":"code","5e5aa647":"code","88b6956e":"code","6cdcca2b":"code","0afdd1da":"code","96d107f3":"code","3812a89b":"code","115ce681":"code","85fd407b":"code","236b269e":"code","3e85b1a3":"code","b8e2d261":"code","24f37c51":"code","fcf24d21":"code","1290568d":"code","815e85eb":"code","1336b005":"code","7783d3eb":"code","d73d3c38":"code","6470c0cc":"code","1fb7d6af":"code","06ec3e98":"code","6bf611cd":"code","b7e6c8dc":"code","ff25d768":"markdown"},"source":{"90676a38":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import cross_val_score\nimport re\nimport xgboost as xgb\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n","0f0a7fb9":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nprint(\"Train set size:\", train.shape)\nprint(\"Test set size:\", test.shape)","d9faddad":"train.SibSp.describe()","f35d024b":"test_ID = test['PassengerId']\ntrain=train.drop(columns=['PassengerId',\"Ticket\",\"Cabin\"])\ntest=test.drop(columns=[\"PassengerId\",\"Ticket\",\"Cabin\"])","e24c8093":"len(train.columns)","5e5aa647":"test.head()","88b6956e":"train.head()","6cdcca2b":"train['FamilySize'] = train['SibSp'] + train['Parch'] + 1\ntest['FamilySize'] = test['SibSp'] + test['Parch'] + 1\n","0afdd1da":"train=train.drop(columns=[\"SibSp\",\"Parch\"])\ntest=test.drop(columns=[\"SibSp\",\"Parch\"])","96d107f3":"for dataset in [train,test]:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1","3812a89b":"train.head()","115ce681":"train['Embarked'] = train['Embarked'].fillna('S')\ntrain['Embarked'] = train['Embarked'].map({'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntest['Embarked'] = test['Embarked'].fillna('S')\ntest['Embarked'] = test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain['Sex'] = train['Sex'].map({'male': 0, 'female': 1} )\ntest['Sex'] = test['Sex'].map( {'male': 0, 'female': 1} )\n\n","85fd407b":"def get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\nfor dataset in [train,test]:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n# Group all non-common titles into one single grouping \"Rare\"\nfor dataset in [train,test]:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    \n","236b269e":"train=train.drop(columns=[\"Name\"])\ntest=test.drop(columns=[\"Name\"])","3e85b1a3":"train.head()","b8e2d261":"test.head()","24f37c51":"colormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(train.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","fcf24d21":"y=train.Survived\ntrain=train.drop(columns=[\"Survived\"])\nall_data = pd.concat((train,test))","1290568d":"all_data.head()","815e85eb":"all_data = all_data.fillna(all_data.mean())","1336b005":"all_data.columns[all_data.isnull().any()]","7783d3eb":"Ntrain = all_data[:train.shape[0]]\ntest = all_data[train.shape[0]:]","d73d3c38":"def cv(model,cv=10):\n    cvx= np.sqrt(cross_val_score(model, Ntrain, y, scoring=\"accuracy\", cv=10))\n    return(cvx)","6470c0cc":"dt=DecisionTreeClassifier()\ncv(dt, cv=10).mean()","1fb7d6af":"ran_for = RandomForestClassifier(n_estimators=50)\ncv(ran_for, cv=10).mean()","06ec3e98":"xgb_cl= xgb.XGBClassifier(colsample_bytree= 0.70,learning_rate=0.03, max_depth= 5, min_child_weight= 4, n_estimators= 50, nthread= 4,  subsample= 0.7)\ncv(xgb_cl).mean()","6bf611cd":"gbm = xgb.XGBClassifier(\n    #learning_rate = 0.02,\n n_estimators= 200,\n max_depth= 4,\n min_child_weight= 2,\n #gamma=1,\n gamma=0.9,                        \n subsample=0.8,\n colsample_bytree=0.8,\n objective= 'binary:logistic',\n nthread= -1,\n scale_pos_weight=1)\ncv(gbm).mean()","b7e6c8dc":"sub = pd.DataFrame()\nsub['PassengerId'] = test_ID\nxgb_cl.fit(Ntrain,y)\nran_for.fit(Ntrain,y)\ngbm.fit(Ntrain,y)\nsub['Survived'] = (0.6*xgb_cl.predict(test)+0.3*gbm.predict(test)+0.1*ran_for.predict(test))\nsub['Survived'] =sub['Survived'].apply(lambda f: 1 if f>=0.5 else 0)\nsub.to_csv('ensbleX.csv',index=False)","ff25d768":"# Models:"}}