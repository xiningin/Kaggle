{"cell_type":{"4a5ce92d":"code","e3157657":"code","73507297":"code","6957ca0c":"code","0e5bc375":"code","3d0ad3b0":"code","55269261":"code","dfad9f60":"code","6430e8d4":"code","bf9e0204":"code","eaa2ede7":"code","6a97ed2d":"code","defc1048":"code","f94e2615":"code","a5904dc3":"code","6c4fe581":"code","ab5789f2":"markdown","c89255f2":"markdown","e707f2d3":"markdown","9823a64a":"markdown","4c6cba97":"markdown","4b7ca244":"markdown","d8772958":"markdown"},"source":{"4a5ce92d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3157657":"import os\nos.listdir(\"..\/input\/plant-diseases-classification-using-alexnet\")","73507297":"# Importing Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers.normalization import BatchNormalization\n\n# Initializing the CNN\nclassifier = Sequential()\n\n# Convolution Step 1\nclassifier.add(Convolution2D(96, 11, strides = (4, 4), padding = 'valid', input_shape=(224, 224, 3), activation = 'relu'))\n\n# Max Pooling Step 1\nclassifier.add(MaxPooling2D(pool_size = (2, 2), strides = (2, 2), padding = 'valid'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 2\nclassifier.add(Convolution2D(256, 11, strides = (1, 1), padding='valid', activation = 'relu'))\n\n# Max Pooling Step 2\nclassifier.add(MaxPooling2D(pool_size = (2, 2), strides = (2, 2), padding='valid'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 3\nclassifier.add(Convolution2D(384, 3, strides = (1, 1), padding='valid', activation = 'relu'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 4\nclassifier.add(Convolution2D(384, 3, strides = (1, 1), padding='valid', activation = 'relu'))\nclassifier.add(BatchNormalization())\n\n# Convolution Step 5\nclassifier.add(Convolution2D(256, 3, strides=(1,1), padding='valid', activation = 'relu'))\n\n# Max Pooling Step 3\nclassifier.add(MaxPooling2D(pool_size = (2, 2), strides = (2, 2), padding = 'valid'))\nclassifier.add(BatchNormalization())\n\n# Flattening Step\nclassifier.add(Flatten())\n\n# Full Connection Step\nclassifier.add(Dense(units = 4096, activation = 'relu'))\nclassifier.add(Dropout(0.4))\nclassifier.add(BatchNormalization())\nclassifier.add(Dense(units = 4096, activation = 'relu'))\nclassifier.add(Dropout(0.4))\nclassifier.add(BatchNormalization())\nclassifier.add(Dense(units = 1000, activation = 'relu'))\nclassifier.add(Dropout(0.2))\nclassifier.add(BatchNormalization())\nclassifier.add(Dense(units = 38, activation = 'softmax'))\nclassifier.summary()","6957ca0c":"classifier.load_weights('..\/input\/plant-disease-prediction\/AlexNetModel.hdf5')","0e5bc375":"# let's visualize layer names and layer indices to see how many layers\n# we should freeze:\nfrom keras import layers\nfor i, layer in enumerate(classifier.layers):\n   print(i, layer.name)","3d0ad3b0":"# we chose to train the top 2 conv blocks, i.e. we will freeze\n# the first 8 layers and unfreeze the rest:\nprint(\"Freezed layers:\")\nfor i, layer in enumerate(classifier.layers[:20]):\n    print(i, layer.name)\n    layer.trainable = False","55269261":"#trainable parameters decrease after freezing some bottom layers   \nclassifier.summary()","dfad9f60":"from keras import optimizers\nclassifier.compile(optimizer=optimizers.SGD(lr=0.001, momentum=0.9, decay=0.005),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","6430e8d4":"# image preprocessing\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   fill_mode='nearest')\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\nbatch_size = 128\nbase_dir = \"..\/input\/new-plant-diseases-dataset\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\"\n\ntraining_set = train_datagen.flow_from_directory(base_dir+'\/train',\n                                                 target_size=(224, 224),\n                                                 batch_size=batch_size,\n                                                 class_mode='categorical')\n\nvalid_set = valid_datagen.flow_from_directory(base_dir+'\/valid',\n                                            target_size=(224, 224),\n                                            batch_size=batch_size,\n                                            class_mode='categorical')\n","bf9e0204":"class_dict = training_set.class_indices\nprint(class_dict)","eaa2ede7":"li = list(class_dict.keys())\nprint(li)","6a97ed2d":"train_num = training_set.samples\nvalid_num = valid_set.samples","defc1048":"# checkpoint\nfrom keras.callbacks import ModelCheckpoint\nweightpath = \"best_weights_9.hdf5\"\ncheckpoint = ModelCheckpoint(weightpath, monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=True, mode='max')\ncallbacks_list = [checkpoint]\n\n#fitting images to CNN\nhistory = classifier.fit_generator(training_set,\n                         steps_per_epoch=train_num\/\/batch_size,\n                         validation_data=valid_set,\n                         epochs=30,\n                         validation_steps=valid_num\/\/batch_size,\n                         callbacks=callbacks_list)\n#saving model\nfilepath=\"AlexNetModel.hdf5\"\nclassifier.save(filepath)","f94e2615":"print(history.history.keys())","a5904dc3":"#plotting training values\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\n\n#accuracy plot\nplt.plot(epochs, acc, color='green', label='Training Accuracy')\nplt.plot(epochs, val_acc, color='blue', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.figure()\n#loss plot\nplt.plot(epochs, loss, color='pink', label='Training Loss')\nplt.plot(epochs, val_loss, color='red', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","6c4fe581":"# predicting an image\nfrom keras.preprocessing import image\nimport numpy as np\nimage_path = \"..\/input\/new-plant-diseases-dataset\/test\/test\/TomatoEarlyBlight1.JPG\"\nnew_img = image.load_img(image_path, target_size=(224, 224))\nimg = image.img_to_array(new_img)\nimg = np.expand_dims(img, axis=0)\nimg = img\/255\n\nprint(\"Following is our prediction:\")\nprediction = classifier.predict(img)\n# decode the results into a list of tuples (class, description, probability)\n# (one such list for each sample in the batch)\nd = prediction.flatten()\nj = d.max()\nfor index,item in enumerate(d):\n    if item == j:\n        class_name = li[index]\n\n##Another way\nimg_class = classifier.predict_classes(img)\nimg_prob = classifier.predict_proba(img)\nprint(img_class ,img_prob )\n\n\n#ploting image with predicted class name        \nplt.figure(figsize = (4,4))\nplt.imshow(new_img)\nplt.axis('off')\nplt.title(class_name)\nplt.show()","ab5789f2":"Model Summary After Freezing","c89255f2":"Visualising Training Progress","e707f2d3":"Compiling","9823a64a":"Loading Weights To The Model","4c6cba97":"Predicting New Test Image(s)","4b7ca244":"Building CNN Based On AlexNet Architecture","d8772958":"Image processing"}}