{"cell_type":{"5ccc9d44":"code","a036075f":"code","8d50750e":"code","d999cc45":"code","16373e0a":"code","b3425b44":"code","c4d807b1":"code","b226ebf7":"code","7b6d51fa":"code","3fa8c6ed":"code","c2a5fc93":"code","c0438898":"code","58bd2fd8":"code","2a3717e9":"code","01032bf7":"code","141be05f":"code","74ff9ee6":"code","83294b33":"code","32d882f6":"code","c12ac79b":"code","dfe5e28a":"code","df8048ef":"code","3e4a1ac6":"code","19444d64":"code","d7ad7e4b":"markdown","2e622fb3":"markdown","75746cc7":"markdown","d27e9caf":"markdown","9738aa6b":"markdown","c4483491":"markdown","7939880b":"markdown","6c872e29":"markdown","77dca5b5":"markdown","2212680a":"markdown","a3b179c7":"markdown","f8db1e90":"markdown","0bf1f6ba":"markdown","bf9e6363":"markdown","f8474ba2":"markdown","3fb93321":"markdown","53162338":"markdown","bab2414e":"markdown","2cabeb43":"markdown"},"source":{"5ccc9d44":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, validation_curve\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import accuracy_score, classification_report, plot_roc_curve, plot_confusion_matrix, f1_score","a036075f":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndf.head()","8d50750e":"df.shape","d999cc45":"df.sex.value_counts(normalize=True)","16373e0a":"df.sex[df.target==1].value_counts().plot(kind=\"bar\")\n# commenting the plot \nplt.title(\"people who got disease by sex\")\nplt.xlabel(\"sex\")\nplt.ylabel(\"effected\"); \nplt.xticks(rotation = 0);","b3425b44":"df.target.value_counts(normalize=True)","c4d807b1":"sns.scatterplot(x=df.age, y=df.thalach, hue = df.target);\n# commenting the plot \nplt.title(\"Heart Disease by Age \/ Max Heart Rate\")\nplt.xlabel(\"Age\")\nplt.legend([\"Disease\", \"No Disease\"])\nplt.ylabel(\"Max Heart Rate\");","b226ebf7":"corr = df.corr()\nf, ax = plt.subplots(figsize=(12, 10))\nsns.heatmap(corr, annot=True, fmt='.2f', ax=ax);","7b6d51fa":"df.head()","3fa8c6ed":"df.head()","c2a5fc93":"X = df.drop('target', axis=1)\nX.head()","c0438898":"y = df.target\ny.head()","58bd2fd8":"np.random.seed(42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","2a3717e9":"y_train.head()","01032bf7":"def getScore(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    print('f1_score')\n    print(f1_score(y_test,y_pred,average='binary'))\n    print('accuracy')\n    acc = accuracy_score(y_test,y_pred, normalize=True)\n    print(acc)\n    print('Confusion Matrix :')\n    plot_confusion_matrix(model, X_test, y_test)\n    plt.show()\n    return acc","141be05f":"np.random.seed(42)\nclf = KNeighborsClassifier()\nclf.fit(X_train, y_train);\nclf_accuracy = getScore(clf, X_test, y_test)","74ff9ee6":"print(classification_report(y_test, clf.predict(X_test)))","83294b33":"plot_roc_curve(clf, X_test, y_test);","32d882f6":"cv_precision = np.mean(cross_val_score(KNeighborsClassifier(),\n                                       X,\n                                       y,\n                                       cv=5)) \ncv_precision","c12ac79b":"model = KNeighborsClassifier()\nparam_range = range(3,100,2)\ntrain_score, val_score = validation_curve(model, X_train, y_train, param_name='n_neighbors', param_range=param_range, cv=5)\nplt.plot(param_range, val_score.mean(axis=1));","dfe5e28a":"np.random.seed(42)\nparam_grid  = {\n                'n_neighbors': [3, 5, 11, 19],\n                'weights': ['uniform', 'distance'],\n                'metric': ['euclidean', 'manhattan', 'minkowski']\n                }\n\ngrid_search = GridSearchCV(estimator = KNeighborsClassifier(), param_grid = param_grid, \n                          cv = 10, n_jobs = -1, verbose = 2)\ngrid_search.fit(X_train, y_train)\nbest_grid = grid_search.best_params_\nprint('best grid = ', best_grid)\ngrid_accuracy = grid_search.score(X_test, y_test)\nprint('Grid Score = ', grid_accuracy)","df8048ef":"best_grid\n","3e4a1ac6":"grid_accuracy","19444d64":"data = pd.DataFrame([[\"KNN\", clf_accuracy], [\"KNN_grid\", grid_accuracy]], columns = ['Models','Score'])\nfig = px.bar(data_frame = data,\n             x=\"Models\",\n             y=\"Score\",\n             color=\"Models\", title = \"<b>Models Score<\/b>\", template = 'plotly_dark')\n\nfig.update_layout(bargap=0.6)\n\nfig.show()","d7ad7e4b":"## Modeling","2e622fb3":"#### as we can see this data this data is about 303 rows and 14 column","75746cc7":"#### Spliting our dataset with 20% for test","d27e9caf":"## Comparing results","9738aa6b":"## Evaluation metrics","c4483491":"#### Features \/ Lable","7939880b":"#### this mean we have more female then male.","6c872e29":"#### Function for geting score (f1 and acc) and ploting the confusion metrix","77dca5b5":"#### the two classes are almost equal","2212680a":"## Exploring our dataset ","a3b179c7":"### ROC curve","f8db1e90":"## Cross-validation","0bf1f6ba":"### Ploting Heart Disease by Age \/ Max Heart Rate","bf9e6363":"#### Classification report","f8474ba2":"## Imports","3fb93321":"## GreadSearcheCV","53162338":"### Correlation matrix  ","bab2414e":"## Loading the data","2cabeb43":"#### let's plot only people who got disease by sex"}}