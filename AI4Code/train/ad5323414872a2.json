{"cell_type":{"d9d9b32a":"code","3880f2eb":"code","d841e7c2":"code","599207ef":"code","f006bdba":"code","06d624b6":"code","f6fce6d6":"code","6c97d435":"code","50da530a":"code","6fe1a42c":"code","c1805b34":"code","7fb5fec5":"code","eb4da1cc":"code","cecdf7f3":"code","7f7b4cfb":"code","99da932e":"code","c1e43bbe":"code","b700e3f8":"code","df880bde":"code","34b7e798":"code","4670e4be":"code","e2fe32cb":"code","b700029f":"code","eeada508":"code","9ac6a3d7":"code","20ba9798":"code","a7d77c28":"code","914f962a":"code","cb64fd58":"code","3043dd9f":"code","03f64700":"markdown","5edfbb66":"markdown","09d5ff6d":"markdown","a3926a69":"markdown","ae4a10a5":"markdown","ed1727f3":"markdown","c855b5db":"markdown","d3b239de":"markdown","496b27ac":"markdown"},"source":{"d9d9b32a":"#importing the required libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport datetime\nfrom scipy.fft import fft,fftfreq\nfrom sklearn.preprocessing import StandardScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation\nfrom tensorflow.keras.optimizers import Adam","3880f2eb":"#loading the dataset using pandas\nx_train = pd.read_csv(\"..\/input\/power-quality-distribution-dataset-2\/VoltageL1Train.csv\")\ny_train = pd.read_csv(\"..\/input\/power-quality-distribution-dataset-2\/outputTrain.csv\")\nx_test = pd.read_csv(\"..\/input\/power-quality-distribution-dataset-2\/VoltageL1Test.csv\")\ny_test = pd.read_csv(\"..\/input\/power-quality-distribution-dataset-2\/outputTest.csv\")","d841e7c2":"print(\"x_train\",x_train.shape)\nprint(\"y_train\",y_train.shape)\nprint(\"x_test\",x_test.shape)\nprint(\"y_test\",y_test.shape)","599207ef":"#dropna() function is used to remove all those rows which contains NA values\nx_train.dropna(axis=0,inplace=True)\ny_train.dropna(axis=0,inplace=True)\nx_test.dropna(axis=0,inplace=True)\ny_test.dropna(axis=0,inplace=True)","f006bdba":"#shape of the data frame after dropping the rows containing NA values\nprint(\"x_train\",x_train.shape)\nprint(\"y_train\",y_train.shape)\nprint(\"x_test\",x_test.shape)\nprint(\"y_test\",y_test.shape)","06d624b6":"#here we are constructing the array which will finally contain the column names\nheader =[]\nfor i in range(1,x_train.shape[1]+1):\n    header.append(\"Col\"+str(i))","f6fce6d6":"#assigning the column name array to the respectinve dataframes\nx_train.columns = header\nx_test.columns = header","6c97d435":"#assigning the column name array to the respectinve dataframes\nheader = [\"output\"]\ny_train.columns = header\ny_test.columns = header","50da530a":"x_train.head()","6fe1a42c":"x_test.head()","c1805b34":"y_train.head()","7fb5fec5":"y_test.head()","eb4da1cc":"#here we are splitting the training set in the ratio of 70%,30% (training set,validation set)\nfrom sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.30, random_state=42)","cecdf7f3":"# get_dummies function is used here to perform one hot encoding of the y_* numpy arrays\ny_train_hot = pd.get_dummies(y_train['output'])\ny_test_hot = pd.get_dummies(y_test['output'])\ny_val_hot = pd.get_dummies(y_val['output'])","7f7b4cfb":"y_train_hot.head()","99da932e":"x_train = x_train.to_numpy()\nx_test = x_test.to_numpy()\nx_val = x_val.to_numpy()","c1e43bbe":"#here we are overwritting the dataframe with the respective waves which we obtained after doing fourier \n#transformation\nfor i in range(0,x_train.shape[0]):\n    x_train[i][:] = np.abs(fft(x_train[i][:]))\n    \nfor i in range(0,x_test.shape[0]):\n    x_test[i][:] = np.abs(fft(x_test[i][:]))\n\nfor i in range(0,x_val.shape[0]):\n    x_val[i][:] = np.abs(fft(x_val[i][:]))","b700e3f8":"#here we are performing normalization\ntransform = StandardScaler()\nx_train_tr = transform.fit_transform(x_train)\nx_test_tr = transform.fit_transform(x_test)\nx_val_tr = transform.fit_transform(x_val)","df880bde":"x_train_tr = np.log(x_train)\nx_test_tr = np.log(x_test)\nx_val_tr = np.log(x_val)","34b7e798":"#final dimensions of the data\nprint(\"Training\",x_train_tr.shape)\nprint(y_train_hot.shape)\nprint(\"Validation\",x_val_tr.shape)\nprint(y_val_hot.shape)\nprint(\"Test\",x_test_tr.shape)\nprint(y_test_hot.shape)\nsampling_rate = x_train_tr.shape[1]","4670e4be":"def model_training(no_of_classes,sampling_rate):\n    model = Sequential()\n\n    model.add(Dense(64, input_shape=(sampling_rate,), activation = 'relu'))\n    model.add(Dense(32, activation = 'relu'))\n    #model.add(Dropout(0.6))\n    model.add(Dense(16, activation = 'relu'))\n    #model.add(Dropout(0.6))\n    model.add(Dense(no_of_classes, activation = 'softmax'))\n\n    model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')\n    return(model)","e2fe32cb":"\nlog_dir = \"logs2\/fit\/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\nmodel = model_training(6,sampling_rate)\nhistory = model.fit(x_train_tr, y_train_hot, batch_size=64, epochs=30, validation_data=(x_val_tr, y_val_hot), callbacks=[tensorboard_callback])\n","b700029f":"%load_ext tensorboard\n%tensorboard --logdir logs2\/fit","eeada508":"model.summary()","9ac6a3d7":"print(\"min val:\",min(history.history['val_accuracy']))\nprint(\"avg val\",np.mean(history.history['val_accuracy']) )\nprint(\"max val:\",max(history.history['val_accuracy']))\nprint()\nprint(\"min train:\",min(history.history['accuracy']))\nprint(\"avg train\",np.mean(history.history['accuracy']) )\nprint(\"max train:\",max(history.history['accuracy']))","20ba9798":"pred_acc = model.evaluate(x_test_tr,y_test_hot)\nprint(\"Test accuracy is {}\".format(pred_acc))","a7d77c28":"from sklearn.metrics import confusion_matrix\nimport seaborn as sn","914f962a":"array = confusion_matrix(y_test_hot.to_numpy().argmax(axis=1), model.predict(x_test_tr).argmax(axis=1))","cb64fd58":"array","3043dd9f":"to_cm = pd.DataFrame(array, index = [i for i in [\"Type-1\",\"Type-2\",\"Type-3\",\"Type-4\",\"Type-5\",\"Type-6\"]],\n                  columns = [i for i in [\"Type-1\",\"Type-2\",\"Type-3\",\"Type-4\",\"Type-5\",\"Type-6\"]])\nplt.figure(figsize = (13,9))\nsn.heatmap(to_cm, annot=True)","03f64700":"This segment of notebook contains all the preprocessing steps which are performed on the data.","5edfbb66":"### Data transformation","09d5ff6d":"This notebook focusses on developing a Multi Layer perceptron which classifies a particular power signal into its respective power quality condition. The dataset used here contains signals which belong to one of the 6 classes(power quality condition). Each signal is characterized by 256 data points. Here the signals provided are in time domain.","a3926a69":"The data transformation steps employed here are as follows:<br>\n\n1) Fourier Transform<br>\n2) Normalization","ae4a10a5":"## Data Preprocessing","ed1727f3":"### Data cleaning","c855b5db":"## Model evaluation","d3b239de":"## Model creation and training","496b27ac":"# Power Quality Classification using Muti Layer Perceptron (Dataset 2)"}}