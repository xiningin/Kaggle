{"cell_type":{"3528399d":"code","49762af5":"code","4f39fca1":"code","91230ec0":"code","62c8af20":"code","992d775b":"code","1742e71c":"code","5a658b46":"code","4465c79e":"code","1c863aeb":"code","9fa88c88":"code","bef080de":"code","a1d4bb56":"code","a9389cc4":"code","965a26db":"code","586ee988":"code","5bc91f58":"code","0f2af368":"code","edd4b2e3":"code","f5b78726":"code","615d7e4e":"code","559a9c44":"code","e5c22eb9":"code","67938af6":"code","632c67fb":"code","3fe22065":"code","85cf977a":"code","052f1c19":"code","54fb5ac4":"code","49e0c2f2":"code","78d096f2":"code","ec718aaf":"code","13576fa6":"code","6be2d994":"code","7f8aa130":"code","9114b005":"code","a9d3d1f6":"code","b1e9a2e9":"code","87efe4c4":"code","a610f717":"code","64b00a68":"code","85243703":"code","3025fa80":"code","4958cb64":"code","b7edc785":"code","bb601b17":"code","112ee683":"code","bb9be433":"code","e2144504":"code","8733b341":"code","2109b7ad":"code","da7d253f":"code","08e67d10":"code","fd1a6e0a":"code","340da820":"code","91d4c6e1":"code","ff522627":"code","bcf89818":"code","c16156b3":"code","b5b9bf5f":"code","cc197c46":"code","03fa34f7":"code","68beca3b":"code","637612c2":"code","23ed79b8":"code","1af026c6":"code","e0cade8a":"code","1e24b145":"markdown","779bbac5":"markdown","4a03e056":"markdown","09e73318":"markdown","bb932f70":"markdown","691ec878":"markdown","1afe36f4":"markdown","e221f2f2":"markdown","ddbc196b":"markdown","cc880169":"markdown","c1c45f2f":"markdown","6e52633d":"markdown","b77fb11b":"markdown","abce6c13":"markdown","b77e42d7":"markdown","ede5d17f":"markdown","af11ce2b":"markdown","e642e8ee":"markdown","dc3a5d51":"markdown","e71ae322":"markdown","f8873726":"markdown","21d559f2":"markdown","d5ef2561":"markdown","1f4202c8":"markdown","2b9c518d":"markdown","7f422a6e":"markdown","2b293533":"markdown","eea7e594":"markdown","6b14751d":"markdown","a6be1766":"markdown","bf8ff03c":"markdown","3d5c97d0":"markdown","d56be848":"markdown","78294bae":"markdown","bb27ee05":"markdown","a0f0c772":"markdown","9d706056":"markdown","a869bd0d":"markdown","0cb845e5":"markdown","c48170f3":"markdown","b878a12b":"markdown","def3c84a":"markdown","a1e72fe2":"markdown","16ceae17":"markdown","aaa71b2c":"markdown","6088fb5e":"markdown","533f1810":"markdown","006e18d9":"markdown","ae09e4f5":"markdown","a98bde03":"markdown","bebe28c0":"markdown","266acc78":"markdown","05254433":"markdown","6f6cbb3c":"markdown","dc85862e":"markdown"},"source":{"3528399d":"!pip install ppscore","49762af5":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport ppscore\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport random\nrandom.seed(7)\nnp.random.seed(7)\n\nTINY_FONT_SIZE = 10\nSMALL_FONT_SIZE = 12\nMEDIUM_FONT_SIZE = 14\nBIGGER_FONT_SIZE = 18\nHUGE_FONT_SIZE = 24\n\nplt.rc('font', size=TINY_FONT_SIZE)  # controls default text sizes\nplt.rc('axes', titlesize=HUGE_FONT_SIZE)  # fontsize of the axes title\nplt.rc('axes', labelsize=BIGGER_FONT_SIZE)  # fontsize of the x and y labels\nplt.rc('xtick', labelsize=MEDIUM_FONT_SIZE)  # fontsize of the tick labels\nplt.rc('ytick', labelsize=MEDIUM_FONT_SIZE)  # fontsize of the tick labels\nplt.rc('legend', fontsize=SMALL_FONT_SIZE)  # legend fontsize\nplt.rc('figure', titlesize=BIGGER_FONT_SIZE)  # fontsize of the figure title","4f39fca1":"train_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', sep=',', encoding='UTF-8')\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', sep=',', encoding='UTF-8')","91230ec0":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u0441 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 (\u043f\u0440\u0438\u0437\u043d\u0430\u043a 'SalePrice'), \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f\ntrain_data","62c8af20":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u0431\u0435\u0437 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438\n# \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u044b \u0438 \u0432\u044b\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0438\u0445 \u043d\u0430 kaggle\ntest_data","992d775b":"# \u0412\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ntrain_data.columns","1742e71c":"train_data_len = len(train_data)\ntest_data_len = len(test_data)\ny = train_data['SalePrice'].values\nX = train_data.drop(columns=['SalePrice', 'Id'])\nX_to_predict = test_data.drop(columns=['Id'])\n# \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u0438\u0445 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\ndf = X.append(X_to_predict, ignore_index=True)\ndf","5a658b46":"# \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\ncorr = train_data.drop(columns='Id').corr()\nplt.figure(figsize=(15, 15))\n\nsns.heatmap(corr[(corr > 0.4) | (corr < -0.4)],\n            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True)\nplt.title(\"correlation\");","4465c79e":"# \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ncorr = train_data.drop(columns='Id').corr().tail(1)\nplt.figure(figsize=(25, 4))\n\nsns.heatmap(corr[(corr > 0.4) | (corr < -0.4)],\n            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True)\nplt.title(\"correlation\");","1c863aeb":"#\u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u0441 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\ncorr[(corr > 0.4) | (corr < -0.4)].dropna(axis=1)\n","9fa88c88":"# \u0422\u0430\u043a\u0436\u0435 \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\npps = corr\nfor col in train_data.drop(columns='Id').columns:\n    score = ppscore.score(train_data, col, 'SalePrice')['ppscore']\n    pps[col] = score if abs(score) > 0.2 else np.nan\n\nplt.figure(figsize=(25, 4))\nsns.heatmap(pps.iloc[:, pps.shape[1] \/\/ 2:],\n            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True)\nplt.title(\"power predict score (part 1)\");","bef080de":"plt.figure(figsize=(25, 4))\nsns.heatmap(pps.iloc[:, :pps.shape[1] \/\/ 2],\n            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True)\nplt.title(\"power predict score (part 2)\");","a1d4bb56":"# \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0441\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\npps.dropna(axis=1)","a9389cc4":"sns.distplot(train_data['OverallQual']);","965a26db":"plt.subplots(figsize=(12, 7))\nsns.boxplot(x=train_data['OverallQual'], y=train_data['SalePrice'])\nplt.title('OverallQual vs SalePrice')\n\nx_dot = list(range(0, 10))\ny_dot = []\ntmp = train_data[['OverallQual', 'SalePrice']]\nfor i in range(1, 11):\n    y_dot.append(tmp[tmp['OverallQual'] == i].mean()[1])\n\nx = np.linspace(0, 10, 1000)\ny_poly = np.polyval(np.polyfit(x_dot, y_dot, 2), x)\n\nplt.plot(x_dot, y_dot, \"ro\", label=\"Mean SalePrice\")\nplt.plot(x, y_poly, label=\"Graph for mean SalePrice\")\nplt.legend();","586ee988":"sns.displot(train_data['GrLivArea']);","5bc91f58":"plt.subplots(figsize=(12, 7))\nplt.title('GrLivArea vs SalePrice')\nsns.scatterplot(x=train_data['GrLivArea'], y=train_data['SalePrice'])\n\nlr = LinearRegression()\nlr.fit(np.array(train_data['GrLivArea']).reshape(-1, 1), train_data['SalePrice'])\nplt.plot(train_data['GrLivArea'], lr.predict(np.array(train_data['GrLivArea']).reshape(-1, 1)), 'orange')\n","0f2af368":"sns.distplot(train_data['GarageCars']);","edd4b2e3":"plt.subplots(figsize=(12, 7))\nplt.title('GarageCars vs SalePrice')\nsns.scatterplot(x=train_data['GarageCars'], y=train_data['SalePrice'])\n\nlr = LinearRegression()\nlr.fit(np.array(train_data['GarageCars']).reshape(-1, 1), train_data['SalePrice'])\nplt.plot(train_data['GarageCars'], lr.predict(np.array(train_data['GarageCars']).reshape(-1, 1)), 'orange');","f5b78726":"# \u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntotal = df.isnull().sum().sort_values(ascending=False)\npercent_na = (df.isnull().sum() \/ df.isnull().count()).sort_values(ascending=False)\ndata_na = pd.concat([total, percent_na], axis=1, keys=['Total', 'Percent'])\ndata_na[data_na['Total'] > 0]","615d7e4e":"features = ['GarageCond', 'GarageQual', 'GarageFinish', 'GarageType', 'GarageArea', 'GarageCars']\npiece_df = df[features]\nset(piece_df[df['GarageFinish'].isna()].index) - set(piece_df[df['GarageType'].isna()].index)","559a9c44":"piece_df.iloc[2126, :]","e5c22eb9":"piece_df.iloc[2576, :]","67938af6":"# GarageType \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Detchd \u0438 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0433\u0430\u0440\u0430\u0436\u043e\u043c \u0442\u043e\u0436\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b\npiece_df.iloc[8, :]","632c67fb":"features = [\n    'PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu',\n    'GarageCond', 'GarageQual', 'GarageFinish', 'GarageType',\n    'BsmtCond', 'BsmtExposure', 'BsmtQual', 'BsmtFinType2', 'BsmtFinType1'\n]\n\ndf.loc[:, features] = df.loc[:, features].fillna('Absent')\n\ndf.loc[:, features]","3fe22065":"# \u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntotal = df.isnull().sum().sort_values(ascending=False)\npercent_na = (df.isnull().sum() \/ df.isnull().count()).sort_values(ascending=False)\ndata_na = pd.concat([total, percent_na], axis=1, keys=['Total', 'Percent'])\ndata_na[data_na['Total'] > 0]","85cf977a":"df[\"LotFrontage\"] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","052f1c19":"features = ['GarageQual', 'GarageYrBlt', 'GarageArea', 'GarageCars']\n\npiece_df = df[features]\n\nlen(set(piece_df[df['GarageYrBlt'].isna()].index) - set(piece_df[piece_df['GarageQual'] == 'Absent'].index))","54fb5ac4":"df['GarageYrBlt'].fillna(-1, inplace=True)","49e0c2f2":"piece_df[df['GarageArea'].isna()]","78d096f2":"piece_df[df['GarageCars'].isna()]","ec718aaf":"df['GarageArea'].fillna(0, inplace=True)\ndf['GarageCars'].fillna(0, inplace=True)","13576fa6":"df['MasVnrType'].fillna('None', inplace=True)\ndf['MasVnrArea'].fillna(0, inplace=True)","6be2d994":"df['MSZoning'].fillna(df['MSZoning'].mode()[0], inplace=True)","7f8aa130":"df['Utilities'].hist();","9114b005":"df.drop(columns='Utilities', inplace=True)","a9d3d1f6":"df['Functional'].fillna('Typ', inplace=True)","b1e9a2e9":"features = [\n    'BsmtQual', 'BsmtCond', 'BsmtExposure',\n    'BsmtFinType1', 'BsmtFinType2'\n]\n\ndf.loc[:, features] = df.loc[:, features].fillna('Absent')\n\nfeatures = [\n    'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n    'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'\n]\n\ndf.loc[:, features] = df.loc[:, features].fillna(0)","87efe4c4":"df['Exterior1st'].fillna(df['Exterior1st'].mode()[0], inplace=True)\ndf['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0], inplace=True)","a610f717":"df['SaleType'].fillna(df['SaleType'].mode()[0], inplace=True)\ndf['Electrical'].fillna(df['Electrical'].mode()[0], inplace=True)\ndf['KitchenQual'].fillna(df['KitchenQual'].mode()[0], inplace=True)","64b00a68":"# \u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442, \u0443\u0440\u0430\ntotal = df.isnull().sum().sort_values(ascending=False)\npercent_na = (df.isnull().sum() \/ df.isnull().count()).sort_values(ascending=False)\ndata_na = pd.concat([total, percent_na], axis=1, keys=['Total', 'Percent'])\ndata_na[data_na['Total'] > 0]","85243703":"df['MSSubClass'] = df['MSSubClass'].apply(str)","3025fa80":"features = [\n    'ExterQual', 'ExterCond', 'HeatingQC', 'KitchenQual'\n]\n\nfor feature in features:\n    df[feature].replace(['Po'], 0, inplace=True)\n    df[feature].replace(['Fa'], 1, inplace=True)\n    df[feature].replace(['TA'], 2, inplace=True)\n    df[feature].replace(['Gd'], 3, inplace=True)\n    df[feature].replace(['Ex'], 4, inplace=True)\n\nfeatures = [\n    'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', 'FireplaceQu', 'PoolQC'\n]\n\nfor feature in features:\n    df[feature].replace(['Absent'], 0, inplace=True)\n    df[feature].replace(['Po'], 1, inplace=True)\n    df[feature].replace(['Fa'], 2, inplace=True)\n    df[feature].replace(['TA'], 3, inplace=True)\n    df[feature].replace(['Gd'], 4, inplace=True)\n    df[feature].replace(['Ex'], 5, inplace=True)\n\nfeatures = [\n    'BsmtFinType1', 'BsmtFinType2'\n]\n\nfor feature in features:\n    df[feature].replace(['Absent'], 0, inplace=True)\n    df[feature].replace(['Unf'], 1, inplace=True)\n    df[feature].replace(['LwQ'], 2, inplace=True)\n    df[feature].replace(['Rec'], 3, inplace=True)\n    df[feature].replace(['BLQ'], 4, inplace=True)\n    df[feature].replace(['ALQ'], 5, inplace=True)\n    df[feature].replace(['GLQ'], 6, inplace=True)\n\ndf['Functional'].replace(['Sal'], 0, inplace=True)\ndf['Functional'].replace(['Sev'], 1, inplace=True)\ndf['Functional'].replace(['Maj2'], 2, inplace=True)\ndf['Functional'].replace(['Maj1'], 3, inplace=True)\ndf['Functional'].replace(['Mod'], 4, inplace=True)\ndf['Functional'].replace(['Min2'], 5, inplace=True)\ndf['Functional'].replace(['Min1'], 6, inplace=True)\ndf['Functional'].replace(['Typ'], 7, inplace=True)\n\ndf['BsmtExposure'].replace(['Absent'], 0, inplace=True)\ndf['BsmtExposure'].replace(['No'], 1, inplace=True)\ndf['BsmtExposure'].replace(['Mn'], 2, inplace=True)\ndf['BsmtExposure'].replace(['Av'], 3, inplace=True)\ndf['BsmtExposure'].replace(['Gd'], 4, inplace=True)\n\ndf['LotShape'].replace(['IR3'], 0, inplace=True)\ndf['LotShape'].replace(['IR2'], 1, inplace=True)\ndf['LotShape'].replace(['IR1'], 2, inplace=True)\ndf['LotShape'].replace(['Reg'], 3, inplace=True)\n\ndf['LandContour'].replace(['Low'], 0, inplace=True)\ndf['LandContour'].replace(['HLS'], 1, inplace=True)\ndf['LandContour'].replace(['Bnk'], 2, inplace=True)\ndf['LandContour'].replace(['Lvl'], 3, inplace=True)\n\ndf['LandSlope'].replace(['Sev'], 0, inplace=True)\ndf['LandSlope'].replace(['Mod'], 1, inplace=True)\ndf['LandSlope'].replace(['Gtl'], 2, inplace=True)\n\ndf['CentralAir'].replace(['N'], 0, inplace=True)\ndf['CentralAir'].replace(['Y'], 1, inplace=True)\n\ndf['GarageType'].replace(['Absent'], 0, inplace=True)\ndf['GarageType'].replace(['Detchd'], 1, inplace=True)\ndf['GarageType'].replace(['CarPort'], 2, inplace=True)\ndf['GarageType'].replace(['BuiltIn'], 3, inplace=True)\ndf['GarageType'].replace(['Basment'], 4, inplace=True)\ndf['GarageType'].replace(['Attchd'], 5, inplace=True)\ndf['GarageType'].replace(['2Types'], 6, inplace=True)\n\ndf['GarageType'].replace(['Absent'], 0, inplace=True)\ndf['GarageType'].replace(['Unf'], 1, inplace=True)\ndf['GarageType'].replace(['RFn'], 2, inplace=True)\ndf['GarageType'].replace(['Fin'], 3, inplace=True)\n\ndf['PavedDrive'].replace(['N'], 0, inplace=True)\ndf['PavedDrive'].replace(['P'], 1, inplace=True)\ndf['PavedDrive'].replace(['Y'], 2, inplace=True)\n\ndf['Fence'].replace(['Absent'], 0, inplace=True)\ndf['Fence'].replace(['MnWw'], 1, inplace=True)\ndf['Fence'].replace(['GdWo'], 2, inplace=True)\ndf['Fence'].replace(['MnPrv'], 3, inplace=True)\ndf['Fence'].replace(['GdPrv'], 4, inplace=True)","4958cb64":"df['TotalSF'] = df['2ndFlrSF'] + df['1stFlrSF'] + df['TotalBsmtSF']\n#  \u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0449\u0430\u0442\u044c \u0437\u0430 2 \u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\ndf['TotalBath'] = 2 * (df['FullBath'] + df['BsmtFullBath']) + df['HalfBath'] + df['BsmtHalfBath']\ndf['TotalPorchSF'] = df['WoodDeckSF'] + df['OpenPorchSF'] + df['EnclosedPorch'] + df['3SsnPorch'] + df['ScreenPorch']\n\n# \u041d\u0435 \u0437\u043d\u0430\u044e \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442, \u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u043e\u0436\u043d\u043e\ndf['HasPool'] = df['PoolArea'].astype(bool).astype(int)\ndf['HasGarage'] = df['GarageArea'].astype(bool).astype(int)\ndf['HasBsmt'] = df['TotalBsmtSF'].astype(bool).astype(int)\ndf['HasFireplace'] = df['Fireplaces'].astype(bool).astype(int)","b7edc785":"df['MoSold'] = df['MoSold'] - df['MoSold'].median()\ndf['YrSold'] = df['YrSold'] - df['YrSold'].median()\ndf['YearBuilt'] = df['YearBuilt'] - df['YearBuilt'].median()\ndf['YearRemodAdd'] = df['YearRemodAdd'] - df['YearRemodAdd'].median()\ndf['GarageYrBlt'] = df['GarageYrBlt'] - df['GarageYrBlt'].median()","bb601b17":"from sklearn.preprocessing import StandardScaler\n\nfeatures = [\n    'LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2',\n    'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n    'GrLivArea', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n    'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n    'TotalSF', 'TotalBath', 'TotalPorchSF'\n]\n\nsc = StandardScaler()\nsc.fit(df[features])\ndf[features] = sc.transform(df[features])\ndf[features]","112ee683":"df = pd.get_dummies(df, drop_first=True)\n# \u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0430\u043a-\u0442\u043e \u0442\u0430\u043a\ndf","bb9be433":"# \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\nX = df[:train_data_len]\nX_to_predict = df[train_data_len:]","e2144504":"# \u0420\u0430\u0437\u043e\u0431\u044c\u0451\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0442\u0435\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 75%\\25%\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)","8733b341":"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom xgboost import XGBRegressor\n\nfrom catboost import CatBoostRegressor\n\nfrom lightgbm import LGBMRegressor\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input","2109b7ad":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0430\u043f\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n! mkdir .\/models && mkdir .\/predictions","da7d253f":"plt.rc('xtick', labelsize=SMALL_FONT_SIZE)\nplt.rc('ytick', labelsize=SMALL_FONT_SIZE)\n\n\ndef print_metrics(y_true, y_pred):\n    print(f'R^2 {r2_score(y_true, y_pred)}')\n    print(f'RMSE {mean_squared_error(y_true, y_pred, squared=False)}')\n    print(f'MSE {mean_squared_error(y_true, y_pred)}')\n    print(f'MAE {mean_absolute_error(y_true, y_pred)}')\n\n\ndef plot_y_true_vs_y_pred(y_train, y_test, y_train_pred, y_test_pred, model_name):\n    plt.figure(figsize=(16, 6))\n    plt.subplot(1, 2, 1)\n    plt.grid(True)\n    plt.xlabel(f'\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \"{model_name}\"')\n    plt.ylabel('\u0418\u0441\u0442\u0438\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f')\n    plt.xlim(y_train.min() - y_train.mean() \/\/ 3, y_train.max() + y_train.mean() \/\/ 3)\n    plt.ylim(y_train.min() - y_train.mean() \/\/ 3, y_train.max() + y_train.mean() \/\/ 3)\n    sns.scatterplot(y_train_pred, y_train, alpha=0.5, color='red')\n    sns.scatterplot(y_test_pred, y_test, alpha=0.5, color='blue')\n    plt.title(model_name)\n\n\ndef write_prediction(model, model_name):\n    submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\n    submission['SalePrice'] = model.predict(X_to_predict)\n    submission.to_csv(f'.\/predictions\/{model_name}.csv', sep=',', encoding='UTF-8', index=False)\n\nmodels = dict()","08e67d10":"%%time\nmodel_name = 'RandomForestRegressor'\nmodel = RandomForestRegressor(n_estimators=3100, max_features=130,\n                              max_depth=10, random_state=7)\nmodel.fit(X_train, y_train)\nmodels[model_name] = model\ny_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)\nprint_metrics(y_test, y_test_pred)\nplot_y_true_vs_y_pred(y_train, y_test, y_train_pred, y_test_pred, model_name)\nwrite_prediction(model, model_name)","fd1a6e0a":"%%time\nmodel_name = 'XGBRegressor'\nmodel = XGBRegressor(colsample_bytree=0.5, learning_rate=0.1,\n                     max_depth=3, min_child_weight=1.8,\n                     n_estimators=380, random_state=7)\nmodel.fit(X_train, y_train)\nmodels[model_name] = model\ny_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)\nprint_metrics(y_test, y_test_pred)\nplot_y_true_vs_y_pred(y_train, y_test, y_train_pred, y_test_pred, model_name)\nwrite_prediction(model, model_name)\n","340da820":"%%time\nmodel_name = 'CatBoostRegressor'\nmodel = CatBoostRegressor(colsample_bylevel=0.05, reg_lambda=0.05,\n                          max_depth=3, learning_rate=0.1,\n                          n_estimators=1700, random_state=7)\nmodel.fit(X_train, y_train, verbose=0)\nmodels[model_name] = model\ny_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)\nprint_metrics(y_test, y_test_pred)\nplot_y_true_vs_y_pred(y_train, y_test, y_train_pred, y_test_pred, model_name)\nwrite_prediction(model, model_name)","91d4c6e1":"# \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 _\u0421atboost_ \u0441\u0430\u043c\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n# \u0423\u0434\u0430\u043b\u0438\u043c \u0435\u0451 \u0438\u0437-\u0437\u0430 \u043d\u0435\u043d\u0430\u0434\u043e\u0431\u043d\u043e\u0441\u0442\u0438\n!rm -r .\/catboost_info","ff522627":"%%time\nmodel_name = 'LGBMRegressor'\nmodel = LGBMRegressor(num_leaves=5, learning_rate=0.1, n_estimators=300,\n                      max_bin=55, bagging_fraction=0.8, max_depth=9,\n                      bagging_freq=5, feature_fraction=0.2319, bagging_seed=9,\n                      min_data_in_leaf=6, min_sum_hessian_in_leaf=11)\nmodel.fit(X_train, y_train)\nmodels[model_name] = model\ny_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)\nprint_metrics(y_test, y_test_pred)\nplot_y_true_vs_y_pred(y_train, y_test, y_train_pred, y_test_pred, model_name)\nwrite_prediction(model, model_name)\n","bcf89818":"%%time\nmodel_name = 'NeuralNetwork'\nmodel = Sequential()\nmodel.add(Input(X.shape[1], name='InputLayer'))\nmodel.add(Dense(180, activation='relu', name='Hidden_1'))\nmodel.add(Dense(80, activation='relu', name='Hidden_2'))\nmodel.add(Dense(60, activation='relu', name='Hidden_3'))\nmodel.add(Dense(70, activation='relu', name='Hidden_4'))\nmodel.add(Dense(40, activation='relu', name='Hidden_5'))\nmodel.add(Dense(1, activation='linear', name='OutputLayer'))\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse', 'mae'])\nmodel.fit(X_train, y_train, epochs=350, verbose=0)\nmodels[model_name] = model\ny_train_pred = model.predict(X_train).reshape(len(y_train))\ny_test_pred = model.predict(X_test).reshape(len(y_test))\nprint_metrics(y_test, y_test_pred)\nplot_y_true_vs_y_pred(y_train, y_test, y_train_pred, y_test_pred, model_name)\nwrite_prediction(model, model_name)","c16156b3":"model = XGBRegressor(colsample_bytree=0.5, learning_rate=0.1,\n                     max_depth=3, min_child_weight=1.8,\n                     n_estimators=380, random_state=7)\nmodel.fit(X_train, y_train)\nmodel.save_model('.\/models\/XGBoost')","b5b9bf5f":"model_loaded = XGBRegressor()\nmodel_loaded.load_model('.\/models\/XGBoost')","cc197c46":"model_name = 'XGBRegressor loaded'\ny_train_pred = model_loaded.predict(X_train).reshape(len(y_train))\ny_test_pred = model_loaded.predict(X_test).reshape(len(y_test))\nprint_metrics(y_test, y_test_pred)\nplot_y_true_vs_y_pred(y_train, y_test, y_train_pred, y_test_pred, model_name)","03fa34f7":"Y_A = models['XGBRegressor'].predict(X_test)\nY_B = models['CatBoostRegressor'].predict(X_test)\nY = y_test","68beca3b":"e_A = Y - Y_A\ne_B = Y - Y_B\nprint(e_A.mean())\nprint(e_B.mean())","637612c2":"Y_A = Y_A + e_A.mean()\nY_B = Y_B + e_B.mean()\ne_A = Y - Y_A\ne_B = Y - Y_B\nprint(e_A.mean())\nprint(e_B.mean())","23ed79b8":"sigma_A = e_A.std()\nsigma_B = e_B.std()\nsigma_AB = np.cov(e_A, e_B)[0, 1]\nl = (sigma_B**2 - sigma_AB) \/ (sigma_A**2 - 2*sigma_AB + sigma_B**2)\nl","1af026c6":"model_name = 'Composition'\ny_test_pred = l * Y_A + (1 - l) * Y_B\ny_train_pred = l * models['XGBRegressor'].predict(X_train) + (1 - l) * models['CatBoostRegressor'].predict(X_train)\nprint_metrics(y_test, y_test_pred)\nplot_y_true_vs_y_pred(y_train, y_test, y_train_pred, y_test_pred, model_name)","e0cade8a":"submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsubmission['SalePrice'] = l * models['XGBRegressor'].predict(X_to_predict) + (1 - l) * models['CatBoostRegressor'].predict(X_to_predict)\nsubmission.to_csv(f'.\/predictions\/{model_name}.csv', sep=',', encoding='UTF-8', index=False)","1e24b145":"###### MasVnrType, MasVnrArea\n\nMasVnrType, MasVnrArea \u2014 \u0442\u0438\u043f \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0430\u043c\u0435\u043d\u043d\u043e\u0439 \u043a\u043b\u0430\u0434\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n\n\u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432,\n\u0431\u0443\u0434\u0443\u0442 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0442\u044c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043a\u0430\u043c\u0435\u043d\u043d\u043e\u0439 \u043a\u043b\u0430\u0434\u043a\u0438.","779bbac5":"##### BsmtHalfBath, BsmtFullBath, BsmtFinSF2, BsmtFinSF1, BsmtUnfSF, TotalBsmtSF\n\n\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f,\n\u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u0443 \u0442\u0435\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445\n\u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a \u0442\u0430\u043a\u043e\u0432\u043e\u0439, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0434\u0432\u0430\u043b.\n\n\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c `'Absent'`, \u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043d\u0443\u043b\u044f\u043c\u0438.","4a03e056":"\u0414\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c","09e73318":"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 `XGBRegressor` \u0438 `CatBoostRegressor` \u043d\u0435 \u0440\u0430\u0432\u043d\u0430 \u043d\u0443\u043b\u044e,\n\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0435 \u043e\u043a\u043e\u043b\u043e \u043d\u0443\u043b\u044f. \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u044d\u0442\u043e, \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u043b\n\u044d\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0430\u043c. \u041f\u0440\u0438 \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u043a \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435\n\u0435\u0451 \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f.","bb932f70":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0433\u043e\u0434\u0430\u043c\u0438 \u0438 \u043c\u0435\u0441\u044f\u0446\u0430\u043c\u0438.","691ec878":"### Sklearn Random Forest","1afe36f4":"### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","e221f2f2":"##### Exterior1st, Exterior2nd\n\nExterior1st, Exterior2nd \u2014 \u043d\u0430\u0440\u0443\u0436\u043d\u0435\u0435 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u0434\u043e\u043c\u0430, \u043f\u0435\u0440\u0432\u044b\u0439 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n\n\u0418\u043c\u0435\u044e\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043a\u0430\u0436\u0434\u044b\u0439.\n\u041c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.","ddbc196b":"###### GarageYrBlt, GarageArea, GarageCars\n\nGarageYrBlt, GarageArea, GarageCars \u2014 \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u0433\u0430\u0440\u0430\u0436\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n\n\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0433\u0430\u0440\u0430\u0436\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0443 \u0442\u0435\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432,\n\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0433\u0430\u0440\u0430\u0436 \u043a\u0430\u043a \u0442\u0430\u043a\u043e\u0432\u043e\u0439.\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 `-1`.","cc880169":"\u041f\u0440\u043e\u0432\u0435\u0434\u044f \u0441\u0435\u0440\u0438\u044e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u043f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.","c1c45f2f":"\u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438,\n\u0442\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043c\u043e\u0434\u0435\u043b\u0435\u0439,\n\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u044e\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437\u043d\u043e\u0440\u043e\u0434\u043d\u044b\u043c\u0438.\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0438\u043c\u0435\u044e\u0442 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433, \n\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430 \u0438 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0441\u0435\u0431\u044f \u043d\u0435 \u0441\u0430\u043c\u044b\u043c \u043b\u0443\u0447\u0448\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c.\n\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 `XGBRegressor` \u0438 `CatBoostRegressor`.","6e52633d":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","b77fb11b":"\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0432\u0438\u0434\u0435\u0442\u044c \u0438\u0437 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 (\u0438 \u0438\u0437 \u0447\u0438\u0441\u0442\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438), \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c\n\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043d\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438,\n\u043e\u0431\u043e\u0431\u0449\u0430\u044e\u0449\u0438\u0435 \u044d\u0442\u0443 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0443.","abce6c13":"\u0427\u0435\u043c \u043b\u0443\u0447\u0448\u0435 \u043e\u0442\u0434\u0435\u043b\u043a\u0430 \u0434\u043e\u043c\u0430, \u0442\u0435\u043c \u043e\u043d \u0434\u043e\u0440\u043e\u0436\u0435, \u0447\u0442\u043e \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043b\u043e\u0433\u0438\u0447\u043d\u043e.\n\u041c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u043c\u0435\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432,\n\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043c\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u043c.","b77e42d7":"\u0422\u0430\u043a\u0436\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043a\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u0438 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c.\n\u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u043c \u043d\u0430\u043a\u043e\u043d\u0435\u0446 \u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","ede5d17f":"##### OverallQual\n\nOverallQual \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u0438\n\u043e\u0442\u0434\u0435\u043b\u043a\u0443 \u0434\u043e\u043c\u0430, \u0433\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442:\n\n* 10 - \u041f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u043d\u043e\n* 9 - \u041e\u0442\u043b\u0438\u0447\u043d\u043e\n* 8 - \u041e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u043e\n* 7 - \u0425\u043e\u0440\u043e\u0448\u043e\n* 6 - \u0412\u044b\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\n* 5 - \u0421\u0440\u0435\u0434\u043d\u0438\u0435\n* 4 - \u041d\u0438\u0436\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\n* 3 - \u041f\u043b\u043e\u0445\u043e\n* 2 - \u041e\u0447\u0435\u043d\u044c \u043f\u043b\u043e\u0445\u043e\n* 1 - \u0423\u0436\u0430\u0441\u043d\u043e","af11ce2b":"###### MSZoning\n\nMSZoning - \u043e\u0431\u0449\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0438.\n\n\u041d\u0438\u0447\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043e\u0441\u0442\u0430\u0451\u0442\u0441\u044f, \u043a\u0440\u043e\u043c\u0435 \u043a\u0430\u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.","e642e8ee":"#### \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","dc3a5d51":"### \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","e71ae322":"\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 `GarageCond`, `GarageQual`, `GarageFinish`, `GarageType`\n\u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e\u0436\u0435 \u2014 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0433\u0430\u0440\u0430\u0436\u0430.\n\u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u0447\u0442\u043e `GarageCond`, `GarageQual`, `GarageFinish` \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 159, \u0430\n \u0443 `GarageType` 157 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","f8873726":"### LightGBM","21d559f2":"#### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","d5ef2561":"\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a,\n\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\n\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.\n\n\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0435\u0433\u043e \u043a \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.","1f4202c8":"##### Functional\n\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442, \u0447\u0442\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c `Typ`.","2b9c518d":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438","7f422a6e":"\u0427\u0442\u043e \u043d\u0430\u0441\u0447\u0451\u0442 `GarageArea`, `GarageCars`?\n\u041a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0443 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 - 2576 \u043e\u0431\u044a\u0435\u043a\u0442\u0430.\n\n\u041a\u0430\u043a \u043f\u0438\u0441\u0430\u043b\u043e\u0441\u044c \u0432\u044b\u0448\u0435, \u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 `GarageType` \u0438\u043c\u0435\u0435\u0442 \u0433\u0430\u0440\u0430\u0436,\n\u043f\u0440\u0438\u0447\u0451\u043c \u0433\u0430\u0440\u0430\u0436 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u0434\u043e\u043c\u0430, \u0430 \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 `GarageCond`, `GarageQual` \u0438\n`GarageFinish` \u0433\u0430\u0440\u0430\u0436 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442.\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0443\u043b\u044f\u043c\u0438.","2b293533":"### \u0410\u043d\u0430\u043b\u0438\u0437 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","eea7e594":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 $\\hat{Y}$ \u043a\u0430\u043a \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e\n$\\hat{Y} = \\lambda \\hat{Y}_A + (1 - \\lambda) \\hat{Y}_B$\n\u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043e\u0448\u0438\u0431\u043a\u0430 $e = Y - \\hat{Y} = \\lambda e_A + (1 - \\lambda) e_B$\n\u0438\u043c\u0435\u043b\u0430 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 $\\sigma_e$.\n\n\u041f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435:\n\n$$\\lambda = \\frac{\\sigma^2_B - \\sigma_{A, B}}{\\sigma^2_{A} - 2\\sigma_{A, B} + \\sigma^2_{B}}$$,\n\u0433\u0434\u0435 $\\sigma_{A, B} = Cov(e_{A}, e_{B})$.\n\n\u041d\u0430\u0439\u0434\u0451\u043c \u043a\u043e\u044d\u0444\u0444. $\\lambda$ \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 `XGBRegressor` \u0438 `CatBoostRegressor`.","6b14751d":"[\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u0430 \u043d\u0430 kaggle](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques)","a6be1766":"\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0430 kaggle \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043e\u0448\u0438\u0431\u043a\u0438:\n\n* XGBoost \u2014 0.12930\n* CatBoost \u2014 0.13013\n* LightGBM \u2014 0.13301\n* RandomForest \u2014 0.14611\n* Neuron network \u2014 0.15422\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043b\u0443\u0447\u0448\u0430\u044f \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u044c XGBoost, \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0435\u0451.","bf8ff03c":"\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0435\u0440\u0435\u0439\u0434\u0451\u043c \u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","3d5c97d0":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c one-hot \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c.","d56be848":"##### \u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n\n\u0418\u0437\u0443\u0447\u0430\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435\n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u0432\u043f\u043e\u043b\u043d\u0435 \u0447\u0451\u0442\u043a\u043e\u0435 \u0441\u043c\u044b\u0441\u043b\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435,\n\u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0442\u043e\u0433\u043e \u0438\u043b\u0438 \u0438\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043e\u043c\u0430.\n\n\u0412\u043e\u0442 \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n* PoolQC\n* MiscFeature\n* Alley\n* Fence\n* FireplaceQu\n* GarageCond\n* GarageQual\n* GarageFinish\n* GarageType\n* BsmtCond\n* BsmtExposure\n* BsmtQual\n* BsmtFinType2\n* BsmtFinType1\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 `PoolQC` \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0431\u0430\u0441\u0441\u0435\u0439\u043d\u0430,\n\u0434\u043b\u044f `BsmtFinType2` \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u043e\u0434\u0432\u0430\u043b\u0430 \u0438 \u0442.\u0434.\n\n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u043c `'Absent'`.","78294bae":"### CatBoost","bb27ee05":"# House Prices - Advanced Regression Techniques\n\n__Predict sales prices and practice feature engineering, RFs, and gradient boosting__\n\n![houses](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/5407\/media\/housesbanner.png)","a0f0c772":"##### SaleType, Electrical, KitchenQual\n\nSaleType, Electrical, KitchenQual - \u0442\u0438\u043f \u043f\u0440\u043e\u0434\u0430\u0436\u0438, \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043d\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n\n\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0438\n\u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0438\u0445 \u0441\u0430\u043c\u044b\u043c\u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438","9d706056":"\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 kaggle \u043e\u0448\u0438\u0431\u043a\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 0.12628,\n\u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.\n","a869bd0d":"\u0412\u0430\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0434\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435\n\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u0432\u043f\u043e\u043b\u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u0441\u043c\u044b\u0441\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0438\u0441\u0430\u043d \u0432\n\u0444\u0430\u0439\u043b\u0435 `data_descriotion.txt`.","0cb845e5":"#### \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","c48170f3":"\u0414\u0430\u043d\u043d\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 80 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\u0414\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 \u0438 \u0431\u0435\u0437 \u043f\u043e\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u043e\u0447\u0442\u0438 \u043f\u043e\u0440\u043e\u0432\u043d\u0443, 1460 \u0438 1459 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","b878a12b":"##### GrLivArea\n\nGrLivArea - \u043d\u0430\u0434\u0437\u0435\u043c\u043d\u0430\u044f \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u0442\u043e\u0432.","def3c84a":"\u041e\u0431\u044b\u0447\u043d\u043e \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0430\u0434\u0437\u0435\u043c\u043d\u0430\u044f \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c, \u0442\u0435\u043c \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.\n\u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b.\n","a1e72fe2":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e\u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","16ceae17":"##### \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n\u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438, \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438,\n\u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e \u0438 \u0432\u0434\u0443\u043c\u0447\u0438\u0432\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442\u044c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443\n\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n\u041e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438:\n* LotFrontage\n* GarageYrBlt\n* MasVnrType\n* MasVnrArea\n* MSZoning\n* BsmtHalfBath\n* Utilities\n* Functional\n* BsmtFullBath\n* BsmtFinSF2\n* BsmtFinSF1\n* BsmtUnfSF\n* TotalBsmtSF\n* Exterior1st\n* Exterior2nd\n* SaleType\n* Electrical\n* KitchenQual\n* GarageArea\n* GarageCars","aaa71b2c":"\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438,\n\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430.","6088fb5e":"##### GarageCars\n\nGarageCars - \u0440\u0430\u0437\u043c\u0435\u0440 \u0433\u0430\u0440\u0430\u0436\u0430.","533f1810":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","006e18d9":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438\n\n* RandomForest\n* XGBoost\n* CatBoost\n* LightGBM\n* Neuron network","ae09e4f5":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 `test.cvs` \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435, \u0441\u0443\u0434\u044f \u043f\u043e \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c, \u043d\u0435\n\u0438\u043c\u0435\u044e\u0442 \u0433\u0430\u0440\u0430\u0436\u0430, \u043d\u043e \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 `GarageType` \u0438\u043c\u0435\u044e\u0442 \u0433\u0430\u0440\u0430\u0436, \u043f\u0440\u0438\u0447\u0451\u043c \u0433\u0430\u0440\u0430\u0436 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u0434\u043e\u043c\u0430.\n\u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0433\u0430\u0440\u0430\u0436 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u0434\u043e\u043c\u0430,\n\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 `GarageCond`, `GarageQual`, `GarageFinish` \u0438\u043c\u0435\u044e\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n\u042d\u0442\u043e \u043d\u0438 \u043d\u0430 \u0447\u0442\u043e \u043e\u0441\u043e\u0431\u043e \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u0435\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u0447\u043d\u0451\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","a98bde03":"### XGBoost","bebe28c0":"### Keras","266acc78":"#### \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","05254433":"#### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0437\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e","6f6cbb3c":"###### LotFrontage\n\nLotFrontage \u2014 \u0434\u043b\u0438\u043d\u0430 \u0444\u0430\u0441\u0430\u0434\u0430 \u0432 \u0444\u0443\u0442\u0430\u0445.\n\n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u044b `LotFrontage` \u0434\u043e\u043c\u043e\u0432, \u0441 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0439\u043e\u043d\u0430.","dc85862e":"###### Utilities\n\nUtilities \u2014 \u0442\u0438\u043f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043a\u043e\u043c\u043c\u0443\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433.\n\n\u041f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f `AllPub`,\n\u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0441\u043c\u0435\u043b\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c."}}