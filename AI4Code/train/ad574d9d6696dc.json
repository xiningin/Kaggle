{"cell_type":{"290a3511":"code","e3b24109":"code","1f82ab7b":"code","7dd97bb3":"code","e9b70ba7":"code","895759f0":"code","ee0ff18a":"code","c608795f":"code","a64a4fe6":"code","55cb609e":"code","e24b2b73":"code","ff5c81bc":"code","a871ab5c":"code","158d1f71":"code","f6806d72":"code","41e95334":"code","9ce65ec2":"code","0487971c":"code","2da7588e":"code","cc7748e7":"code","bb2d8817":"code","aee552b4":"code","119bfc14":"code","bea032e0":"code","0839ed58":"code","cb288ea0":"code","05aeb37c":"code","0a495204":"code","72c28c0d":"code","eed34510":"code","9c945409":"code","512f9621":"code","b490b7b1":"code","f50a0a0e":"code","0306d6f5":"code","47c14c0a":"code","fe846661":"code","a854bd49":"code","a754b9aa":"code","0ac51560":"markdown","d819d60d":"markdown","11494451":"markdown","9e1c9622":"markdown","d6495398":"markdown","e69fe0f3":"markdown"},"source":{"290a3511":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\nimport tensorflow as tf\nimport cv2\n\n!pip install imutils\nimport os\nfrom imutils import paths\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import confusion_matrix\n\nimport shutil\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.optimizers.schedules import ExponentialDecay\nfrom tensorflow.keras.applications.densenet import DenseNet201\n\nimport pandas as pd\nimport seaborn as sns\nimport itertools","e3b24109":"print(tf.__version__)","1f82ab7b":"#set seed number:\nimport random\nrandom.seed(99)","7dd97bb3":"path = \"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\"","e9b70ba7":"!ls \/","895759f0":"!mkdir \/tmp\/COVID_Xray_data\n!mkdir \/tmp\/COVID_Xray_data\/train\n!mkdir \/tmp\/COVID_Xray_data\/train\/Covid\n!mkdir \/tmp\/COVID_Xray_data\/train\/nonCovid","ee0ff18a":"org_Covid_path     =   \"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID\"\norg_nonCovid_path  =   \"..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal\"\n\norg_Covid_imgs     =   sorted(list(paths.list_images(org_Covid_path)))\norg_nonCovid_imgs  =   sorted(list(paths.list_images(org_nonCovid_path)))\n\nrandom.shuffle(org_Covid_imgs)\nrandom.shuffle(org_nonCovid_imgs)\n\nprint('Number of Covid images----:',len(org_Covid_imgs))\nprint('Number of non-Covid images:',len(org_nonCovid_imgs))","c608795f":"#balance the data and copy them into train directory\n\ns=0\nfor img in org_Covid_imgs[:]:\n    i = cv2.imread(img)\n    i = cv2.cvtColor(i,cv2.COLOR_BGR2GRAY)\n    i = cv2.resize(i,(300,300))\n    i = np.repeat(i[..., np.newaxis], 3, -1)\n    cv2.imwrite('\/tmp\/COVID_Xray_data\/train\/Covid\/p'+str(s)+'.jpg',i)\n    s+=1\n\nrandom.shuffle(org_nonCovid_imgs)\nfor img in org_nonCovid_imgs[:7200]:\n    i = cv2.imread(img)\n    i = cv2.cvtColor(i,cv2.COLOR_BGR2GRAY)\n    i = cv2.resize(i,(300,300))\n    i = np.repeat(i[..., np.newaxis], 3, -1)\n    cv2.imwrite('\/tmp\/COVID_Xray_data\/train\/nonCovid\/n'+str(s)+'.jpg',i)\n    s+=1","a64a4fe6":"a= list(paths.list_images('\/tmp\/COVID_Xray_data\/train\/Covid'))\nb=cv2.imread(a[4])\nplt.imshow(b)\nb.shape\n","55cb609e":"#print the number of all the data:\n\nCOUNT_COVID     = len(list(paths.list_images('\/tmp\/COVID_Xray_data\/train\/Covid')))\nCOUNT_Non_COVID = len(list(paths.list_images('\/tmp\/COVID_Xray_data\/train\/nonCovid')))\n\ndata = {'Cases':['COVID-19', 'Non-COVID-19'],\n        'Cases_count':[COUNT_COVID, COUNT_Non_COVID]\n       }\n\ndf = pd.DataFrame(data)\n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(10,8))\nsns.barplot(x=df.index, y= df['Cases_count'].values)\nplt.title('Number of All the Data', fontsize=14)\nplt.xlabel('Case type', fontsize=12)\nplt.ylabel('Count', fontsize=12)\nplt.xticks(range(len(df.index)), ['COVID-19', 'Non-COVID-19'])\nplt.show()\n\nprint(df)","e24b2b73":"#devided data into the Train, Valid and Test1 data set\ndata_dir = \"\/tmp\/COVID_Xray_data\/train\/\"\nall_imgs = sorted(list(paths.list_images(data_dir)))\n \nrandom.shuffle(all_imgs)\n\ntrain_filenames, valid_filenames = train_test_split(all_imgs, test_size=0.18, shuffle=True)\ntest1_filenames, valid_filenames = train_test_split(valid_filenames, test_size=0.5, shuffle=True)","ff5c81bc":"test2_path      =  '..\/input\/covid19-xray-local-data'\ntest2_filenames =  sorted(list(paths.list_images(test2_path)))\nrandom.shuffle(test2_filenames)","a871ab5c":"print(\"Number of Training images--:\",len(train_filenames))\nprint(\"Number of Validation images:\",len(valid_filenames))\nprint(\"Number of Test1 images-----:\",len(test1_filenames))\nprint(\"Number of Test2 images-----:\",len(test2_filenames))\n\nb = test2_filenames[0]\nprint(b.split(os.path.sep)[4])","158d1f71":"#Create temporary folder for Valid images\n!mkdir \/tmp\/COVID_Xray_data\/valid\n!mkdir \/tmp\/COVID_Xray_data\/valid\/Covid\n!mkdir \/tmp\/COVID_Xray_data\/valid\/nonCovid\n\n#Create temporary folder for TEST1 images\n!mkdir \/tmp\/COVID_Xray_data\/test1\n!mkdir \/tmp\/COVID_Xray_data\/test1\/Covid\n!mkdir \/tmp\/COVID_Xray_data\/test1\/nonCovid\n\n#Create temporary folder for TEST2 images\n!mkdir \/tmp\/COVID_Xray_data\/test2\n!mkdir \/tmp\/COVID_Xray_data\/test2\/Covid\n!mkdir \/tmp\/COVID_Xray_data\/test2\/nonCovid\n\n!ls '\/tmp\/COVID_Xray_data\/train'","f6806d72":"#Move the Valid data \nfor x in valid_filenames:    \n    if (x.split(os.path.sep)[4] == 'Covid'):\n        shutil.move(x, \"\/tmp\/COVID_Xray_data\/valid\/Covid\")      \n    if (x.split(os.path.sep)[4] == 'nonCovid'):\n        shutil.move(x, \"\/tmp\/COVID_Xray_data\/valid\/nonCovid\")\n            \n#Move the Test1 data  \nfor x in test1_filenames:  \n    if (x.split(os.path.sep)[4] == 'Covid'):\n        shutil.move(x, \"\/tmp\/COVID_Xray_data\/test1\/Covid\")       \n    if (x.split(os.path.sep)[4] == 'nonCovid'):\n        shutil.move(x, \"\/tmp\/COVID_Xray_data\/test1\/nonCovid\")     ","41e95334":"#Copy the Test2 data   \nfor x in test2_filenames:  \n    if (x.split(os.path.sep)[4] == 'Covid'):\n        shutil.copy(x, \"\/tmp\/COVID_Xray_data\/test2\/Covid\")       \n    if (x.split(os.path.sep)[4] == 'nonCovid'):\n        shutil.copy(x, \"\/tmp\/COVID_Xray_data\/test2\/nonCovid\")\n        \na=list(paths.list_images(\"\/tmp\/COVID_Xray_data\/test2\"))","9ce65ec2":"#check again the number of each group:\nprint(\"Number of Train images \/ all -----:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/train\"))))\nprint(\"Number of Train images \/ Covid ---:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/train\/Covid\"))))\nprint(\"Number of Train images \/ non-Covid:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/train\/nonCovid\"))))\nprint('-----------------------------------------')\nprint(\"Number of Valid images \/ all -----:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/valid\"))))\nprint(\"Number of Valid images \/ Covid ---:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/valid\/Covid\"))))\nprint(\"Number of Valid images \/ non-Covid:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/valid\/nonCovid\"))))\nprint('-----------------------------------------')\nprint(\"Number of Test1 images \/ all -----:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/test1\"))))\nprint(\"Number of Test1 images \/ Covid ---:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/test1\/Covid\"))))\nprint(\"Number of Test1 images \/ non-Covid:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/test1\/nonCovid\"))))\nprint('-----------------------------------------')\nprint(\"Number of Test2 images \/ all -----:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/test2\"))))\nprint(\"Number of Test2 images \/ Covid ---:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/test2\/Covid\"))))\nprint(\"Number of Test2 images \/ non-Covid:\",len(list(paths.list_images(\"\/tmp\/COVID_Xray_data\/test2\/nonCovid\"))))\n","0487971c":"#set the data locations\nTRAIN_DATA_DIR= \"\/tmp\/COVID_Xray_data\/train\"\nVALID_DATA_DIR= \"\/tmp\/COVID_Xray_data\/valid\"\nTEST1_DATA_DIR= \"\/tmp\/COVID_Xray_data\/test1\"\nTEST2_DATA_DIR= \"\/tmp\/COVID_Xray_data\/test2\"\n","2da7588e":"#defines:\nIMG_HEIGHT, IMG_WIDTH= 224,224\nBATCH_SIZE= 32\nSEED= 99\nEPOCHS= 40\ninitial_learning_rate = 0.000094 #for lr_schedule\n","cc7748e7":"#create sample data and show them:\n\nsample_imgs=[]\nsample_labels=[]\n\ntmp = sorted(list(paths.list_images('\/tmp\/COVID_Xray_data\/train\/Covid')))\nrandom.shuffle(tmp)\nfor X in tmp[:4]:\n    sample_imgs.append(cv2.imread(X))\n    sample_labels.append('Covid')\n        \ntmp = sorted(list(paths.list_images('\/tmp\/COVID_Xray_data\/train\/nonCovid')))\nrandom.shuffle(tmp)\nfor X in tmp[:4]:\n    sample_imgs.append(cv2.imread(X))\n    sample_labels.append('non-Covid')     \n\nprint('Random images from dataset:')\nfor i in range(0, 8):\n    plt.subplot(2 , 4 , i+1)\n    plt.imshow(sample_imgs[i+0])\n    plt.title(sample_labels[i+0])\n    plt.xticks([]),plt.yticks([])\n    #show the plot\nplt.show()  \n\n#sample_imgs = np.asarray(sample_imgs)\n#print(sample_imgs.shape)","bb2d8817":"#set the generator for Training dataset (Preprocessing and Augmentaion for Training set)\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,                    #rescaling into [0,1]\n                                   vertical_flip=True,                #Augmentation\n                                   horizontal_flip=True,              #Augmentation\n                                   rotation_range=10                 #Augmentation,random rotations\n                                   #brightness_range=[0.5,1.0],\n                                   \n                                   \n                                   \n)     \n#train_datagen.fit(sample_imgs)\nTRAIN_GENERATOR = train_datagen.flow_from_directory(\n                                   TRAIN_DATA_DIR,\n                                   target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                   batch_size=BATCH_SIZE,\n                                   class_mode='binary',\n                                   shuffle=True,\n                                   seed=SEED)","aee552b4":"print('Random images from Train set generator:')\n#Show random picture after the Augmentation:\nfor X_batch, y_batch in TRAIN_GENERATOR:\n    print(len(y_batch))\n    # create a grid of 3x3 images\n    for i in range(0, 4):\n        plt.subplot(2 , 2 , i+1)\n        plt.imshow(X_batch[i])\n        plt.title('COVID' if y_batch[i]==0 else 'Non_COVID')\n        plt.xticks([]),plt.yticks([])\n    # show the plot\n    plt.show()\n    break","119bfc14":"#set Generators for Validation, Test1 and Test2:\ndatagen = ImageDataGenerator(rescale=1.\/255)    \n                    \nVALID_GENERATOR = datagen.flow_from_directory(\n    VALID_DATA_DIR,\n    target_size=(IMG_HEIGHT, IMG_WIDTH),\n    batch_size=BATCH_SIZE,\n    class_mode='binary',\n    shuffle=True,\n    seed=SEED)\n\nTEST1_GENERATOR = datagen.flow_from_directory(\n    TEST1_DATA_DIR,\n    target_size=(IMG_HEIGHT, IMG_WIDTH),\n    batch_size=BATCH_SIZE,\n    class_mode='binary',\n    shuffle=True,\n    seed=SEED)\n\nTEST2_GENERATOR = datagen.flow_from_directory(\n    TEST2_DATA_DIR,\n    target_size=(IMG_HEIGHT, IMG_WIDTH),\n    batch_size=347,\n    class_mode='binary',\n    shuffle=True,\n    seed=SEED)","bea032e0":"print('Random images from Test1 set generator:')\n#Show random pictures from Test1 Generator:\nfor X_batch, y_batch in TEST1_GENERATOR:\n    print(len(y_batch))\n    # create a grid of 3x3 images\n    for i in range(0, 4):\n        plt.subplot(2 , 2 , i+1)\n        plt.imshow(X_batch[i])\n        plt.title('COVID' if y_batch[i]==0 else 'Non_COVID')\n        plt.xticks([]),plt.yticks([])\n    # show the plot\n    plt.show()\n    break","0839ed58":"print('Random images from Test2 set generator:')\n#Show random pictures from Test2 Generator:\nfor X_batch, y_batch in TEST2_GENERATOR:\n    print(len(y_batch))\n    # create a grid of 3x3 images\n    for i in range(0, 2):\n        plt.subplot(2 , 2 , i+1)\n        plt.imshow(X_batch[i])\n        plt.title('COVID' if y_batch[i]==0 else 'Non_COVID')\n        plt.xticks([]),plt.yticks([])\n    # show the plot\n    plt.show()\n    break","cb288ea0":"pretrained_base= DenseNet201(\n    include_top=False,\n    weights='imagenet',\n    input_shape=(IMG_HEIGHT,IMG_WIDTH,3)\n)\n\nx = pretrained_base.output\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\n\nx = tf.keras.layers.Dense(256, activation='relu',kernel_initializer='he_uniform')(x)\nx = tf.keras.layers.BatchNormalization()(x)\ny = tf.keras.layers.Dropout(0.3)(x)\n\np = tf.keras.layers.Dense(2, activation='softmax')(y)\n\nmodel = Model(inputs=pretrained_base.input, outputs=p)\n\n#model.summery()","05aeb37c":"#Exponential decay for Learning rate:\nlr_schedule = ExponentialDecay(\n    initial_learning_rate,\n    decay_steps = 20,\n    decay_rate  = 0.96,\n    staircase   = True)\n\n#compile the model\nmodel.compile(optimizer = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, epsilon=1e-08),\n              loss      = 'sparse_categorical_crossentropy', \n              metrics   = ['accuracy'])","0a495204":"print(\"STEP_SIZE_TRAIN:\",(TRAIN_GENERATOR.n\/\/TRAIN_GENERATOR.batch_size))","72c28c0d":"#to avoid overfitting\nearly = tf.keras.callbacks.EarlyStopping(monitor='val_loss',patience=4)\n\n# Training the model\ntrainer=model.fit(TRAIN_GENERATOR,\n                  validation_data = VALID_GENERATOR,\n                  epochs          = EPOCHS,\n                  steps_per_epoch = 277,\n                  verbose         = 2,\n                  callbacks       = [early]\n                  )","eed34510":"print('Evaluate on test-data:')\nmodel.evaluate(TEST1_GENERATOR)","9c945409":"print('Evaluate on test-data:')\nmodel.evaluate(TEST2_GENERATOR)","512f9621":"# Plotting train_loss vs val_loss\nplt.figure(figsize=(10,5))\nplt.plot(trainer.history[\"loss\"],label=\"loss\")\nplt.plot(trainer.history[\"val_loss\"],label=\"val_loss\")\nplt.legend()","b490b7b1":"# Plotting train_accuracy vs Val_accuracy\nplt.figure(figsize=(10,5))\nplt.plot(trainer.history[\"accuracy\"],label=\"accuracy\")\nplt.plot(trainer.history[\"val_accuracy\"],label=\"val_accuracy\")\nplt.legend(loc='upper left')","f50a0a0e":"#Plot the Confusion matrix:\ndef plot_confusion_matrix(cm,\n                          target_names,\n                          title='Confusion matrix',\n                          cmap=None,\n                          normalize=True):\n\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n    sns.set(style=\"dark\")\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\n Accuracy={:0.4f}; Misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()\n\n","0306d6f5":"for X_batch, y_batch in TEST2_GENERATOR:\n    y_test = y_batch\n    X_test = X_batch\n    break\n    \npred = model.predict(X_test)\nbin_predict = np.argmax(pred,axis=1)\n\n#Confusion matrix:\nmatrix = confusion_matrix(y_test, bin_predict)\nprint('Confusion Matrix:\\n',matrix)","47c14c0a":"#confusion matrix for Test2:\n\nplot_confusion_matrix(cm           = np.array(matrix), \n                      normalize    = False,\n                      target_names = ['COVID-19','Non-COVID-19'],\n                      title        = \"Confusion Matrix\")\n\nplot_confusion_matrix(cm           = np.array(matrix), \n                      normalize    = True,\n                      target_names = ['COVID-19','Non-COVID-19'],\n                      title        = \"Confusion Matrix, Normalized\")","fe846661":"preds = model.predict(X_test)\n#print(preds)\nprint('Shape of preds: ', preds.shape)\nplt.figure(figsize = (12, 12))\n\nnumber = np.random.choice(preds.shape[0])\n\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    number = np.random.choice(preds.shape[0])\n    pred = np.argmax(preds[number])\n    actual = (y_test[number])\n    col = 'g'\n    if pred != actual:\n        col = 'r'\n    plt.xlabel('N={} | P={} | GT={}'.format(number, pred, actual), color = col) #N= number P= prediction GT= actual (ground truth)\n    plt.imshow(((X_test[number]* 255).astype(np.uint8)), cmap='binary')\nplt.show()","a854bd49":"FP = matrix.sum(axis=0) - np.diag(matrix)\nFN = matrix.sum(axis=1) - np.diag(matrix)\nTP = np.diag(matrix)\nTN = matrix[:].sum() - (FP + FN + TP)\n\nTPR = TP\/(TP+FN)\nTNR = TN\/(TN+FP) \nPPV = TP\/(TP+FP)\nNPV = TN\/(TN+FN)\nFPR = FP\/(FP+TN)\nFNR = FN\/(TP+FN)\nFDR = FP\/(TP+FP)\n\nACC = (TP+TN)\/(TP+FP+FN+TN)\n\nprint('Other Metrics:')\nMAE = mean_absolute_error(y_test, bin_predict)\n\nprint('MAE:', MAE)\nprint('Accuracy:', ACC)\nprint('Precision (positive predictive value):', PPV)\nprint('Recall (Sensitivity, hit rate, true positive rate):', TPR)\nprint('Specificity (true negative rate):', TNR)\nprint('Negative Predictive Value:', NPV)\nprint('Fall out (false positive rate):', FPR)\nprint('False Negative Rate:', FNR)\nprint('False discovery rate:', FDR)","a754b9aa":"# by M Amir Eshraghi","0ac51560":"# A Deep CNN-Based model for COVID-19 Detection from Chest Xray images (2 classes)\n\nIn this work, two classes of Covid-19 Radiography Database have been used to train the model. this data splited into three group: train, valid, and test1.\n\nAlso, Another local dataset has been added for second model testing (test2). This local dataset conains 341 Covid Xray images (include 111 Covid and 230 nonCovid) and collected from Iranian patients. further information will be provided.\n\n\nThis code is part of the new study and will be referenced to the article after the publication.\n(M Amir Eshraghi, M Ghaderzadeh)\n\n* \u00a9 Proposed Method Implementation by M Amir Eshraghi. \n* Oct 2021 \/ Mashhad, Iran.","d819d60d":"**4- Training**","11494451":"**5- Evaluate and Results:**","9e1c9622":"**2 - Preproseccing and Augmentaion Pipeline**","d6495398":"**1- Data preparation**\n\nImporting kaggle Data Train_Val_Test Set\n\nUse \/tmp to create temporary folder","e69fe0f3":"**3- Create the Model**"}}