{"cell_type":{"40187354":"code","5f88a230":"code","64d741ff":"code","08e88b20":"code","98994d93":"code","a3ec017c":"code","2c3c5e85":"code","41eab3b5":"code","149d85dc":"code","c3e80454":"code","00bc7a0d":"code","79c34c27":"code","c45bd389":"code","444d0736":"code","a73d39b8":"code","f3d48d85":"code","b564ba46":"code","9f001de5":"code","4cece238":"code","bfa338d8":"code","1b103ead":"code","594b1e9f":"code","b8b9b9f8":"code","93f3a8fb":"code","8925bc74":"code","620b3cf5":"code","8ab396c5":"code","d8ce4448":"code","21863efa":"markdown","5abfc6fe":"markdown","11ab2e17":"markdown","c984f528":"markdown","88fd644b":"markdown","235bde64":"markdown","829b5432":"markdown","05bb9d7a":"markdown","64ef4f1b":"markdown","5aa0829b":"markdown","d6291ff6":"markdown","b3ab7b3a":"markdown","80685dcc":"markdown","d8014d87":"markdown","28ff1008":"markdown"},"source":{"40187354":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#SK-Learn        \nRANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom xgboost import XGBClassifier\nimport time\nfrom sklearn.feature_selection import RFE, f_regression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom pprint import pprint\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Any results you write to the current directory are saved as output.","5f88a230":"data = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv', index_col='sl_no')\ndata.drop('salary', axis=1, inplace=True)\ndata['status'] = data['status'].map({'Placed':1, 'Not Placed': 0}).astype(int)\ndata.head()","64d741ff":"data.info()","08e88b20":"y = data['status']\nX = data.copy()\nX.drop('status', axis=1, inplace=True)\n","98994d93":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.16, random_state=1)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","a3ec017c":"from sklearn.preprocessing import OneHotEncoder\n\ncols = [ 'gender','ssc_b', 'hsc_b', 'hsc_s', 'degree_t', 'workex', 'specialisation']\nohc = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\nn_cols_train = pd.DataFrame(ohc.fit_transform(X_train[cols]))\nn_cols_test = pd.DataFrame(ohc.transform(X_test[cols]))\n\nn_cols_train.index = X_train.index\nn_cols_test.index = X_test.index\n\nn_cols_train.columns = ohc.get_feature_names(cols)\nn_cols_test.columns = ohc.get_feature_names(cols)\n\nX_train = pd.concat([X_train, n_cols_train], axis=1)\nX_test = pd.concat([X_test, n_cols_test], axis=1)\n\nX_train.drop(cols, axis=1, inplace=True)\nX_test.drop(cols, axis=1, inplace=True)","2c3c5e85":"X_train.head()","41eab3b5":"mean = X_train.mean()\nstd = X_train.std()","149d85dc":"X_train = (X_train-mean)\/std\nX_test = (X_test-mean)\/std","c3e80454":"X_train.head(3)","00bc7a0d":"\n\nmodels = pd.DataFrame(columns=['model', 'score', 'std','Time to Train']) #DataFrame to store scores of all models\n\noptions = [GaussianNB(), \n           LogisticRegression(), \n           SVC(), \n           LinearSVC(), \n           DecisionTreeClassifier(), \n           RandomForestClassifier(), \n           KNeighborsClassifier(), \n           SGDClassifier(), \n           XGBClassifier()]   \n\nmodel_names = ['Naive Bayes', \n               'Logistic Regression', \n               'Support Vector Machine', \n               'Linear SVC', \n               'Decison Tree',\n               'Random Forest',\n               'KNN', \n               'SGD Classifier',\n               'XGBoost']  \n\nfor (opt, name) in zip(options, model_names):\n    start=time.time()\n    model = opt\n    model.fit(X_train, y_train)\n    \n    scores = cross_val_score(model, X_train, y_train, cv = 5, scoring=\"accuracy\")\n    end=time.time()\n    row = pd.DataFrame([[name, scores.mean(), scores.std(), end-start]], columns=['model', 'score', 'std','Time to Train'])\n    models = pd.concat([models, row], ignore_index=True)\n\nmodels.sort_values(by='score', ascending=False)","79c34c27":"rf = RandomForestClassifier(random_state = 3, oob_score=True)\nrf.fit(X_train, y_train)\nprint(\"OOB Score: \", rf.oob_score_)","c45bd389":"model = RandomForestClassifier(random_state = 3)\nmodel.fit(X_train, y_train)","444d0736":"rfe = RFE(model, n_features_to_select=1, verbose =3)\nrfe.fit(X_train,y_train)\n\nimp1 = pd.DataFrame({'feature':X_train.columns, 'rank1':rfe.ranking_})\nimp1 = imp1.sort_values(by = 'rank1')\nimp1","a73d39b8":"imp2= pd.DataFrame({'featur':X_train.columns, 'importance':np.round(model.feature_importances_, 3)})\nimp2['rank2'] = imp2['importance'].rank(ascending=False, method='min')\nimp2 = imp2.sort_values(by = 'importance', ascending=False)\nimp2","f3d48d85":"# importances['rank']=importances2['rank'].values\n# importances=importances.sort_values('rank')\n# importances\n\nimp = pd.concat([imp1, imp2], axis=1)\nimp['rank'] = imp['rank1'] + imp['rank2']\nimp = imp.sort_values(by = 'rank')\nimp = imp.drop(['featur', 'importance', 'rank1', 'rank2'], axis=1)\nimp","b564ba46":"X_temp = X_train[imp.feature]","9f001de5":"features = [i for i in range(22)]\nresults = []\n\nfor i in features:\n    rf = RandomForestClassifier(n_jobs=-1, random_state=3)\n    cols = X_temp.columns[:i+1]\n    X_t = X_temp[cols]\n    scores = cross_val_score(rf, X_t, y_train, cv = 5, scoring=\"accuracy\")\n    results.append(scores.mean())\n    print(i, \" : \", np.round(scores.mean(),3), np.round(scores.std(),3))","4cece238":"fig, ax = plt.subplots(figsize=(12,6))\n\nax.minorticks_on()\n\n# Customize the major grid\nax.grid(which='major', linestyle='-', linewidth='0.5', color='red')\n# Customize the minor grid\nax.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\n\nsns.lineplot(y = results, x = features)","bfa338d8":"n_f = 8\nto_keep = X_temp.columns[:n_f+1]\nX_train_fimp = X_train[to_keep]\nX_test_fimp = X_test[to_keep]\nX_train_fimp.head()","1b103ead":"rf = RandomForestClassifier(random_state=3, oob_score=True)\nrf.fit(X_train_fimp, y_train)\nrf.oob_score_","594b1e9f":"X_train_final = X_train_fimp\nX_test_final = X_test_fimp","b8b9b9f8":"# Look at parameters used by our current forest\nprint('Parameters currently in use:\\n')\npprint(rf.get_params())","93f3a8fb":"rfc=RandomForestClassifier(random_state=42)\nparam_grid = { \n    'n_estimators': [200, 500],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,5,6,7,8,'none']\n}\npprint(param_grid)","8925bc74":"CV_rfc = GridSearchCV(estimator=rfc, param_grid=param_grid, cv= 5)\n# Fit the random search model\nCV_rfc.fit(X_train_final, y_train)\n","620b3cf5":"CV_rfc.best_params_","8ab396c5":"rfc1=RandomForestClassifier(random_state=42, max_features='auto', n_estimators= 200, max_depth=7, criterion='entropy')\nrfc1.fit(X_train_final, y_train)\n","d8ce4448":"pred=rfc1.predict(X_test_final)\nprint(\"Accuracy for Random Forest after Hyperparameter Tuning on test data: \",accuracy_score(y_test,pred))\npred=rf.predict(X_test_final)\nprint(\"Accuracy for Random Forest before Hyperparameter Tuning on test data: \",accuracy_score(y_test,pred))","21863efa":"* Final accuracy would be checked on Test Dataset(X_test, y_test)\n* Cross valiation would be used as dataset is not very big","5abfc6fe":"* The new dataset performs better than the original dataset.\n* Hence new one is kept as the final dataset","11ab2e17":"# **Encoding Categorical Variables**","c984f528":"# **Splitting into training and test set**","88fd644b":"# **Model Selection**","235bde64":"* n_estimators = number of trees in the foreset\n* max_features = max number of features considered for splitting a node\n* max_depth = max number of levels in each decision tree\n* min_samples_split = min number of data points placed in a node before the node is split\n* min_samples_leaf = min number of data points allowed in a leaf node\n* bootstrap = method for sampling data points (with or without replacement)","829b5432":"* Optimal number of features comes out to be 8\n* Making dataset using the optimal number of features","05bb9d7a":"# **Feature Engineering**","64ef4f1b":"* We will combine the above two feature importances and sort on the basis or rank.","5aa0829b":"1. Random Forest is the best model on the basis of accuracy\n2. Std deviation of Random Forest classifier is the best among all as well.","d6291ff6":"* No missing values","b3ab7b3a":"* Checking OOB Score for new dataframe","80685dcc":"* Determing optimal number of features","d8014d87":"# **Feature Scaling**","28ff1008":"# **Performing Hyperparameter Tuning**\nThe current parameters(SK-Learn defaults) are as follows:"}}