{"cell_type":{"8017506d":"code","edc28259":"code","abacc863":"code","584b9402":"code","cbda2e7e":"code","32bde565":"code","6253bd4c":"code","477b99f0":"code","19390d35":"code","a0ff6767":"code","f66d767c":"code","5ce5802d":"code","8c805b2d":"code","f1aaef29":"code","694143dc":"code","ed83c0dc":"code","66d87799":"code","0a4faaf5":"code","3435b04d":"code","32bc0cbe":"code","779cbf5f":"code","5457f977":"code","4a9ed2fd":"code","6ea9a264":"code","7135c9fa":"code","065495ff":"code","a287c7e8":"markdown","2d854876":"markdown","818c41f6":"markdown","4169e624":"markdown"},"source":{"8017506d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","edc28259":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom scipy import stats\nfrom scipy.stats import norm\n\nsns.set_style('whitegrid')\n%matplotlib inline","abacc863":"path = '..\/input\/nfl-playing-surface-analytics\/'\npList = pd.read_csv(path + 'PlayList.csv')\niRecord = pd.read_csv(path + 'InjuryRecord.csv')\n# pTrack = pd.read_csv(path + 'PlayerTrackData.csv')","584b9402":"pList.sample(4)","cbda2e7e":"print('The information of the PlayList.csv'.center(50, '-'))\nprint('The rows and columns of the data are {}'.format(pList.shape))\nTypes = pList.dtypes\nTotal = pList.isnull().sum().sort_values(ascending = False)\nPercentage = Total \/ pList.shape[0]\npd.concat([Total, Percentage, Types], axis = 1, keys = ['Total', 'Percentage', 'Types']).sort_values(by = ['Total'], ascending = False)","32bde565":"iRecord.sample(4)","6253bd4c":"print('The information of the InjuryRecord.csv'.center(50, '-'))\nprint('The rows and columns of the data are {}'.format(iRecord.shape))\nTypes = iRecord.dtypes\nTotal = iRecord.isnull().sum().sort_values(ascending = False)\nPercentage = Total \/ iRecord.shape[0]\npd.concat([Total, Percentage, Types], axis = 1, keys = ['Total', 'Percentage', 'Types']).sort_values(by = ['Total'], ascending = False)","477b99f0":"# pTrack.sample(4)","19390d35":"# print('The information of the PlayerTrackData.csv'.center(50, '-'))\n# print('The rows and columns of the data are {}'.format(pTrack.shape))\n# Types = pTrack.dtypes\n# Total = pTrack.isnull().sum().sort_values(ascending = False)\n# Percentage = Total \/ pTrack.shape[0]\n# pd.concat([Total, Percentage, Types], axis = 1, keys = ['Total', 'Percentage', 'Types']).sort_values(by = ['Total'], ascending = False)","a0ff6767":"iRecord.sample(4)","f66d767c":"iRecord.groupby(['BodyPart', 'Surface'])['DM_M1','DM_M7', 'DM_M28', 'DM_M42'].sum()","5ce5802d":"plt.figure(figsize = (12, 10))\nax1 = iRecord.groupby(['BodyPart', 'Surface'])['DM_M1','DM_M7', 'DM_M28', 'DM_M42'].sum().plot.bar()\nplt.title('The Corr of Body Part and Surface')\nplt.xlabel('Body Part , Surface')\nplt.xticks(rotation = 45)\nplt.ylabel('Count')","8c805b2d":"plt.figure(figsize = (12, 10))\n\nsns.set_style('whitegrid')\nax2 = sns.catplot(x = 'Surface', hue = 'BodyPart', kind = 'count', data = iRecord, palette = 'mako')\nax2.set(title = 'Correlation between Surface and Body Part ', xlabel = 'Surface Types', ylabel = 'Count')","f1aaef29":"print(pList['PlayerKey'].nunique())\npList['PlayerKey'].unique().tolist()[: 10]","694143dc":"plt.figure(figsize = (12, 10))\n\nsns.set_style('whitegrid')\nax3 = sns.catplot(x = 'FieldType', hue = 'StadiumType', kind = 'count', data = pList, palette = 'mako')\nax3.set(title = 'Correlation between FieldType and StadiumType ', xlabel = 'FieldType', ylabel = 'Count')","ed83c0dc":"plt.figure(figsize=(55, 80))\nsns.set_style('whitegrid')\nax4 = sns.catplot(y = 'Weather', kind = 'count', data = pList, palette = 'mako')\nplt.show()","66d87799":"print(pList['StadiumType'].nunique())\npList['StadiumType'].unique().tolist()","0a4faaf5":"def groupingStadiumType(data):\n    \"\"\"\n    grouped the stadiumType to the indoor or outdoor.\n    Params: data\n    Return: indoor and outdoor\n    \"\"\"\n    if data in ['Outdoor', 'Oudoor', 'Outdoors', 'Open', 'Outdoor Retr Roof-Open', 'Ourdoor', 'Outddors', 'Retr. Roof-Open', 'Open Roof', 'Domed, Open', 'Domed, open', 'Heinz Field',\n 'Cloudy', 'Retr. Roof - Open', 'Outdor', 'Outside']:\n        value = 'outdoor'\n    else:\n        value = 'indoor'\n    return value","3435b04d":"pList['groupedStadiumType'] = pList['StadiumType'].apply(groupingStadiumType)\npList['groupedStadiumType'].value_counts().to_frame()","32bc0cbe":"plt.figure(figsize = (15, 10))\nsns.set_style('whitegrid')\nax5 = sns.catplot(x = 'groupedStadiumType', kind = 'count', data = pList, palette = 'mako')\nax5.set(title = 'The grouped StadiumType data', xlabel = 'grouped StadiumType', ylabel = 'Count')\nplt.show()","779cbf5f":"plt.figure(figsize = (12, 10))\n\nsns.set_style('whitegrid')\n\nax6 = sns.violinplot(x = 'FieldType', y = 'Temperature', hue = 'groupedStadiumType', split = True, data = pList.loc[pList['Temperature'] > -500], palette = 'mako')\nax6.set(title = 'The tempeature of the Field Type and StadiumType')","5457f977":"print('The information of the playerlist dataset'.center(50, '-'))\nprint('The number of player list dataset {}'.format(pList.shape))\npList.sample(4)","4a9ed2fd":"print(pList['PlayType'].nunique())\npList['RosterPosition'].value_counts().sort_values(ascending = False)","6ea9a264":"dataToPlot = pList.groupby(['RosterPosition', 'PlayType', 'PlayerKey'])['PlayerDay'].count().reset_index()","7135c9fa":"dataToPlot","065495ff":"plt.figure(figsize = (42, 10))\n\nsns.set_style('whitegrid')\nax7 = sns.catplot(x = 'RosterPosition', hue = 'PlayType', data = dataToPlot, kind = 'count', palette = 'mako')\nax7.set(title = 'The corr between the Play Type and Roster Position', xlabel = 'Roster Position', ylabel = 'Count')\nplt.xticks(rotation = 45)\nplt.show()","a287c7e8":"## Data Exploration","2d854876":"## Load Data","818c41f6":"### PlayList Data Exploration","4169e624":"### Injury Rcord Data Exploration"}}