{"cell_type":{"cddc9f73":"code","63005486":"code","e7b0d05a":"code","b8f4acec":"code","1ecf89ce":"code","b4813285":"code","6cb2812a":"code","a01a80cb":"code","ab60e39e":"code","42358508":"code","107ec5e6":"code","d0677fbb":"code","6fe13c93":"code","0b7bc4e6":"code","dbc2dcc0":"code","dffdcf4f":"code","11bea5c0":"code","36befb42":"code","a106c7da":"code","95a242db":"code","d5835bd1":"code","c57a9453":"code","4bfdc319":"code","c6be0e33":"code","cfbe205f":"code","634fbf4f":"code","e9791ea8":"code","77d6119d":"code","000dc198":"code","fd812594":"code","4de781c0":"code","01ef47ec":"code","bb215939":"code","d59b8a97":"code","a568bc16":"markdown","d1b4d120":"markdown","a119ce7b":"markdown","351cf24b":"markdown","81c67257":"markdown","e1960fb6":"markdown"},"source":{"cddc9f73":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os # File System\n\nimport seaborn as sns #Plots\nimport matplotlib.pyplot as plt # Plots\n\n# Import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingRegressor\n###\nfrom sklearn.metrics import roc_auc_score, roc_curve, confusion_matrix, classification_report,accuracy_score,recall_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split,GridSearchCV\n","63005486":"df1 = pd.read_csv('..\/input\/codon-usage\/codon_usage.csv')","e7b0d05a":"display(df1.head(2))","b8f4acec":"print(df1.columns.to_list())","1ecf89ce":"df1.info()","b4813285":"df1.head()","6cb2812a":"df1a = df1\n\nK_names = {'arc': 'archaea', \n          'bct': ' bacteria', \n          'phg' : 'bacteriophage', \n          'plm': 'plasmid',\n          'pln': 'plant',\n          'inv': 'invertebrate',\n          'vrt': 'vertebrate',\n          'mam': 'mammal',\n          'rod': 'rodent',\n          'pri': 'primate', \n          'vrl': 'virus'} \n    \nK_names2 = {0: 'archaea',\n            1: ' bacteria',\n            2 : 'bacteriophage',\n            3: 'plasmid',\n            4: 'plant',\n            5: 'invertebrate',\n            6: 'vertebrate',\n            7: 'mammal',\n            8: 'rodent',\n            9: 'primate', \n            10: 'virus'} \nD_names = {0:'genomic',\n           1:'mitochondrial', \n           2:'chloroplast', \n           3:'cyanelle', \n           4:'plastid', \n           5:'nucleomorph', \n           6:'secondary_endosymbiont', \n           7:'chromoplast', '8':'leucoplast', \n           9:'NA',\n           10:'proplastid',\n           11:'apicoplast', \n           12:'kinetoplast'}\n\ndf1b = df1a.replace({\"Kingdom\": K_names})\ndf1a['Kingdom_Names'] = df1b['Kingdom']\ndf1b = df1a.replace({\"DNAtype\": D_names})\ndf1a['DNAtype_Names'] = df1b['DNAtype']\n","a01a80cb":"ax = sns.barplot(y=\"index\", x=\"Kingdom_Names\", data=df1a['Kingdom_Names'].value_counts().reset_index())\nax.set(ylabel='Kingdom', xlabel='Count', title = 'Kingdom Frequency Count')\nplt.show()\n\ndisplay(df1['Kingdom_Names'].value_counts())","ab60e39e":"ax = sns.barplot(y=\"index\", x=\"DNAtype_Names\", \n                 data=df1a['DNAtype_Names'].value_counts().reset_index())\nax.set(ylabel='DNA Type', xlabel='Count', title = 'DNA Type Frequency Count')\nplt.show()\n\ndf1['DNAtype_Names'].value_counts()","42358508":"sns.set(rc = {'figure.figsize':(15,8)})\nax = sns.boxplot(x=\"Kingdom_Names\", y=\"Ncodons\",data=df1a,\n                 showfliers = False)\nax.set(xlabel='Kingdom', ylabel='Number of Codons',\n       title = 'Distribution of Number of Codons by Kingdom Name')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\nax = sns.boxplot(x=\"Kingdom_Names\", y=\"Ncodons\", \n            data=df1a[df1a['Kingdom_Names'] != 'archaea']\n            ,showfliers = False)\nax.set(xlabel='Kingdom', ylabel='Number of Codons', \n       title = 'Distribution of Number of Codons by Kingdom Name(Excluding Archaea) ')\nplt.xticks(rotation=45)\nplt.show()","107ec5e6":"sns.set(rc = {'figure.figsize':(15,8)})\nax = sns.boxplot(x=\"DNAtype_Names\", y=\"Ncodons\", \n            data=df1a,showfliers = False)\nax.set(xlabel='DNA Type', ylabel='Number of Codons',\n       title = 'Distribution of Number of Codons by DNA Type')\n\nplt.xticks(rotation=25)\nplt.show()\n\nax = sns.boxplot(x=\"DNAtype_Names\", y=\"Ncodons\", \n            data=df1a[df1a['DNAtype_Names'] != 'nucleomorph']\n            ,showfliers = False)\nax.set(xlabel='DNA Type', ylabel='Number of Codons',\n       title = 'Distribution of Number of Codons by DNA Type(Excluding nucleomorph)')\nplt.xticks(rotation=25)\nplt.show()","d0677fbb":"df1 = pd.read_csv('..\/input\/codon-usage\/codon_usage.csv')\ndf1[\"Kingdom\"] = df1[\"Kingdom\"].astype('category')\ndf1[\"Kingdom_cat\"] = df1[\"Kingdom\"].cat.codes\ndf1.head()\ndf2 = df1.loc[:,df1.columns[6:]]","6fe13c93":"df2 = df2.drop([5063])\nprint(df2.head())\ndf2 = df2.apply(pd.to_numeric)\ndf1 = df1.drop([5063])","0b7bc4e6":"X = df2.iloc[:,:-1]\ny = df1['Kingdom_cat']\n# Split into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, stratify= y)","dbc2dcc0":"knn = KNeighborsClassifier(n_neighbors=6)\n\n# Fit the classifier to the training data\nknn.fit(X_train, y_train)\n\n# Predict the labels of the test data: y_pred\ny_pred = knn.predict(X_test)\n\n# Generate the confusion matrix and classification report\ndisplay(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\nprint(knn.score(X_test, y_test))","dffdcf4f":"test_t_1 = pd.DataFrame([y_test.tolist(),y_pred.tolist()])\ntest_t_1 = test_t_1.transpose()\ntest_t_1 = test_t_1.rename(columns = {0:\"Y_Test\", 1:\"Y_Prediction\"},)\ntest_t_1['Check'] = np.where(test_t_1['Y_Test'] == test_t_1['Y_Prediction']\n                             , 1, 0)\nprint(\"Number of test Cases: {}\".format(test_t_1.Check.count()))\nprint('Number Correct: {} || Number of Wrong: {}'.format(test_t_1.value_counts('Check')[1],\n                                                       test_t_1.value_counts('Check')[0]))","11bea5c0":"D_Types_a = []\nfor a in y_test.unique():\n    D_Types_a.append(K_names2[a])\nfor a in y_pred:\n    D_Types_a.append(K_names2[a])\n    \nD_Types_a = list(set(D_Types_a))\n    \n\narray = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(array, index = [i for i in D_Types_a],\n                  columns = [i for i in D_Types_a])\nplt.figure(figsize = (10,7))\nsns.heatmap(df_cm, annot=True)","36befb42":"rfc = RandomForestClassifier()\n# Instantiate ada\nada_rf = AdaBoostClassifier(base_estimator=rfc, n_estimators=180, random_state=1)\n\n# Fit ada to the training set\nada_rf.fit(X_train,y_train)\n\n# Compute the probabilities of obtaining the positive class\ny_pred = ada_rf.predict(X_test)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\nprint(ada_rf.score(X_test, y_test))","a106c7da":"test_t_1 = pd.DataFrame([y_test.tolist(),y_pred.tolist()])\ntest_t_1 = test_t_1.transpose()\ntest_t_1 = test_t_1.rename(columns = {0:\"Y_Test\", 1:\"Y_Prediction\"},)\ntest_t_1['Check'] = np.where(test_t_1['Y_Test'] == test_t_1['Y_Prediction']\n                             , 1, 0)\nprint(\"Number of test Cases: {}\".format(test_t_1.Check.count()))\nprint('Number Correct: {} || Number of Wrong: {}'.format(test_t_1.value_counts('Check')[1],\n                                                       test_t_1.value_counts('Check')[0]))","95a242db":"D_Types_a = []\nfor a in y_test.unique():\n    D_Types_a.append(K_names2[a])\nfor a in y_pred:\n    D_Types_a.append(K_names2[a])\n    \nD_Types_a = list(set(D_Types_a))\n    \n\narray = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(array, index = [i for i in D_Types_a],\n                  columns = [i for i in D_Types_a])\nplt.figure(figsize = (10,7))\nsns.heatmap(df_cm, annot=True)","d5835bd1":"# Instantiate dt\ndt = DecisionTreeClassifier(random_state=1)\n# Instantiate ada\nada_rf = AdaBoostClassifier(base_estimator=dt, n_estimators=180, random_state=1)\n\n# Fit ada to the training set\nada_rf.fit(X_train,y_train)\n\n# Compute the probabilities of obtaining the positive class\ny_pred = ada_rf.predict(X_test)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\nprint(ada_rf.score(X_test, y_test))","c57a9453":"test_t_1 = pd.DataFrame([y_test.tolist(),y_pred.tolist()])\ntest_t_1 = test_t_1.transpose()\ntest_t_1 = test_t_1.rename(columns = {0:\"Y_Test\", 1:\"Y_Prediction\"},)\ntest_t_1['Check'] = np.where(test_t_1['Y_Test'] == test_t_1['Y_Prediction']\n                             , 1, 0)\nprint(\"Number of test Cases: {}\".format(test_t_1.Check.count()))\nprint('Number Correct: {} || Number of Wrong: {}'.format(test_t_1.value_counts('Check')[1],\n                                                       test_t_1.value_counts('Check')[0]))","4bfdc319":"D_Types_a = []\nfor a in y_test.unique():\n    D_Types_a.append(K_names2[a])\nfor a in y_pred:\n    D_Types_a.append(K_names2[a])\n    \nD_Types_a = list(set(D_Types_a))\n    \n\narray = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(array, index = [i for i in D_Types_a],\n                  columns = [i for i in D_Types_a])\nplt.figure(figsize = (10,7))\nsns.heatmap(df_cm, annot=True)","c6be0e33":"from sklearn import tree\ndt = DecisionTreeClassifier(max_depth=2, random_state=1)\ndt.fit(X_train,y_train)\nfig = plt.figure(figsize=(20,5))\n_ = tree.plot_tree(dt, \n                   feature_names=X.columns,\n                  filled = True,\n                   class_names = list(K_names2.values()))","cfbe205f":"from sklearn.metrics import plot_confusion_matrix","634fbf4f":"X = df2.iloc[:,:-1]\ny = df1['DNAtype']\n\n# Split into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)","e9791ea8":"knn = KNeighborsClassifier(n_neighbors=6)\n\n# Fit the classifier to the training data\nknn.fit(X_train, y_train)\n\n# Predict the labels of the test data: y_pred\ny_pred = knn.predict(X_test)\n\n# Generate the confusion matrix and classification report\ndisplay(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\nprint(knn.score(X_test, y_test))","77d6119d":"test_t_1 = pd.DataFrame([y_test.tolist(),y_pred.tolist()])\ntest_t_1 = test_t_1.transpose()\ntest_t_1 = test_t_1.rename(columns = {0:\"Y_Test\", 1:\"Y_Prediction\"},)\ntest_t_1['Check'] = np.where(test_t_1['Y_Test'] == test_t_1['Y_Prediction']\n                             , 1, 0)\nprint(\"Number of test Cases: {}\".format(test_t_1.Check.count()))\nprint('Number Correct: {} || Number of Wrong: {}'.format(test_t_1.value_counts('Check')[1],\n                                                       test_t_1.value_counts('Check')[0]))","000dc198":"D_Types_a = []\nfor a in y_test.unique():\n    D_Types_a.append(D_names[a])\nfor a in y_pred:\n    D_Types_a.append(D_names[a])\n    \nD_Types_a = list(set(D_Types_a))\n    \n\narray = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(array, index = [i for i in D_Types_a],\n                  columns = [i for i in D_Types_a])\nplt.figure(figsize = (10,7))\nsns.heatmap(df_cm, annot=True)","fd812594":"## Instantiate dt\ndt = DecisionTreeClassifier(random_state=1)\n# Instantiate ada\nada_rf = AdaBoostClassifier(base_estimator=dt, random_state=1)\n\n# Fit ada to the training set\nada_rf.fit(X_train,y_train)\n\n# Compute the probabilities of obtaining the positive class\ny_pred = ada_rf.predict(X_test)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\nprint(ada_rf.score(X_test, y_test))","4de781c0":"test_t_1 = pd.DataFrame([y_test.tolist(),y_pred.tolist()])\ntest_t_1 = test_t_1.transpose()\ntest_t_1 = test_t_1.rename(columns = {0:\"Y_Test\", 1:\"Y_Prediction\"},)\ntest_t_1['Check'] = np.where(test_t_1['Y_Test'] == test_t_1['Y_Prediction']\n                             , 1, 0)\nprint(\"Number of test Cases: {}\".format(test_t_1.Check.count()))\nprint('Number Correct: {} || Number of Wrong: {}'.format(test_t_1.value_counts('Check')[1],\n                                                       test_t_1.value_counts('Check')[0]))","01ef47ec":"D_Types_a = []\nfor a in y_test.unique():\n    D_Types_a.append(D_names[a])\nfor a in y_pred:\n    D_Types_a.append(D_names[a])\n    \nD_Types_a = list(set(D_Types_a))\n    \n\narray = confusion_matrix(y_test, y_pred)\ndf_cm = pd.DataFrame(array, index = [i for i in D_Types_a],\n                  columns = [i for i in D_Types_a])\nplt.figure(figsize = (10,7))\nsns.heatmap(df_cm, annot=True)","bb215939":"list(D_names.values())","d59b8a97":"from sklearn import tree\ndt = DecisionTreeClassifier(max_depth=2, random_state=1)\ndt.fit(X_train,y_train)\nfig = plt.figure(figsize=(20,5))\n_ = tree.plot_tree(dt, \n                   feature_names=X.columns,\n                  filled = True,\n                   class_names = list(D_names.values()))\nplt.show()","a568bc16":"# Read Dataset","d1b4d120":"# Exploratory Data Analysis","a119ce7b":"# Machine Learning","351cf24b":"# Data Snapshot","81c67257":"## 1.0 Predict Kingdom Category based on Codon Frequency","e1960fb6":"## 2.0 Predict DNA Type based on Codon Frequency"}}