{"cell_type":{"e9df3b7a":"code","c72012d3":"code","cbcf5706":"code","dfe0c5e3":"code","1ec6ff70":"code","01b64d62":"code","6a6c5a52":"code","07369d50":"code","f5d19317":"code","f81ea0e9":"code","bb820836":"code","11be3b28":"code","947e39c0":"code","0a25e878":"code","b0546213":"code","57ec35a9":"code","c28c30a0":"code","ed34fc6e":"code","d584a4fc":"code","4857013b":"code","6ba309c2":"code","80fd3c7f":"code","1a216f9e":"code","b78905ad":"code","dc59fbbd":"code","4896cf6f":"code","d104a198":"code","aa1f7b06":"code","6707b307":"markdown","73a665f8":"markdown"},"source":{"e9df3b7a":"# to handle datasets\nimport pandas as pd\nimport numpy as np\n\n# for plotting\nimport matplotlib.pyplot as plt\n% matplotlib inline\n\n# to display all the columns of the dataframe in the notebook\npd.pandas.set_option('display.max_columns', None)","c72012d3":"# load dataset\ndata = pd.read_csv('diabetic_data.csv')\n\n# rows and columns of the data\nprint(data.shape)     \n\n# visualise the dataset\ndata.head()","cbcf5706":"# make a list of the variables that contain missing values\nvars_with_na = [var for var in data.columns if data[var].isnull().sum()>1]\n\n# print the variable name and the percentage of missing values\nfor var in vars_with_na:\n    print(var, np.round(data[var].isnull().mean(), 3),' % missing values')","dfe0c5e3":"def analyse_na_value(df, var):\n    df = df.copy()\n    \n    # let's make a variable that indicates 1 if the observation was missing or zero otherwise\n    df[var] = np.where(df[var].isnull(), 1, 0)\n    \n      # let's calculate the mean diabetesMed where the information is missing or present\n    df.groupby(var)['diabetesMed'].median().plot.bar()\n    plt.title(var)\n    plt.show()\n    \nfor var in vars_with_na:\n    analyse_na_value(data, var)","1ec6ff70":"# list of numerical variables\nnum_vars = [var for var in data.columns if data[var].dtypes != 'O']\n\nprint('Number of numerical variables: ', len(num_vars))\n\n# visualise the numerical variables\ndata[num_vars].head()","01b64d62":"print('Number of  Id labels: ', len(data.encounter_id.unique()))\nprint('Number of data in the Dataset: ', len(data))","6a6c5a52":"#  list of discrete variables\ndiscrete_vars = [var for var in num_vars if len(data[var].unique())<20 and var not in year_vars+['Id']]\n\nprint('Number of discrete variables: ', len(discrete_vars))","07369d50":"# let's visualise the discrete variables\ndata[discrete_vars].head()","f5d19317":"#converting  target to  numerical \n###converting target using Label Encoder \n\nfrom sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\ndata[\"diabetesMed\"] = lb_make.fit_transform(data[\"diabetesMed\"])\ndata[[\"diabetesMed\"]].head()","f81ea0e9":"def analyse_discrete(df, var):\n    df = df.copy()\n    df.groupby(var)['diabetesMed'].median().plot.bar()\n    plt.title(var)\n    plt.ylabel('diabetesMed')\n    plt.show()\n    \nfor var in discrete_vars:\n    analyse_discrete(data, var)","bb820836":"# list of continuous variables\ncont_vars = [var for var in num_vars if var not in discrete_vars+year_vars+['Id']]\n\nprint('Number of continuous variables: ', len(cont_vars))","11be3b28":"# let's visualise the continuous variables\ndata[cont_vars].head()","947e39c0":"# Let's go ahead and analyse the distributions of these variables\ndef analyse_continous(df, var):\n    df = df.copy()\n    df[var].hist(bins=20)\n    plt.ylabel('Number of rows')\n    plt.xlabel(var)\n    plt.title(var)\n    plt.show()\n    \nfor var in cont_vars:\n    analyse_continous(data, var)","0a25e878":"# Let's go ahead and analyse the distributions of these variables\ndef analyse_transformed_continous(df, var):\n    df = df.copy()\n    \n    # log does not take negative values, so let's be careful and skip those variables\n    if 0 in data[var].unique():\n        pass\n    else:\n        # log transform the variable\n        df[var] = np.log(df[var])\n        df[var].hist(bins=20)\n        plt.ylabel('Number of houses')\n        plt.xlabel(var)\n        plt.title(var)\n        plt.show()\n    \nfor var in cont_vars:\n    analyse_transformed_continous(data, var)","b0546213":"# let's explore the relationship between the house price and the transformed variables\n# with more detail\ndef transform_analyse_continous(df, var):\n    df = df.copy()\n    \n    # log does not take negative values, so let's be careful and skip those variables\n    if 0 in data[var].unique():\n        pass\n    else:\n        # log transform\n        df[var] = np.log(df[var])\n        df['diabetesMed'] = np.log(df['diabetesMed'])\n        plt.scatter(df[var], df['diabetesMed'])\n        plt.ylabel('diabetesMed')\n        plt.xlabel(var)\n        plt.show()\n    \nfor var in cont_vars:\n    if var !='diabetesMed':\n        transform_analyse_continous(data, var)","57ec35a9":"# let's make boxplots to visualise outliers in the continuous variables \n\ndef find_outliers(df, var):\n    df = df.copy()\n    \n    # log does not take negative values, so let's be careful and skip those variables\n    if 0 in data[var].unique():\n        pass\n    else:\n        df[var] = np.log(df[var])\n        df.boxplot(column=var)\n        plt.title(var)\n        plt.ylabel(var)\n        plt.show()\n    \nfor var in cont_vars:\n    find_outliers(data, var)","c28c30a0":"### Categorical variables\n\ncat_vars = [var for var in data.columns if data[var].dtypes=='O']\n\nprint('Number of categorical variables: ', len(cat_vars))","ed34fc6e":"# let's visualise the values of the categorical variables\ndata[cat_vars].head()","d584a4fc":"for var in cat_vars:\n    print(var, len(data[var].unique()), ' categories')","4857013b":"def analyse_rare_labels(df, var, rare_perc):\n    df = df.copy()\n    tmp = df.groupby(var)['diabetesMed'].count() \/ len(df)\n    return tmp[tmp<rare_perc]\n\nfor var in cat_vars:\n    print(analyse_rare_labels(data, var, 0.01))\n    print()\n","6ba309c2":"for var in cat_vars:\n    analyse_discrete(data, var)","80fd3c7f":"# to divide train and test set\nfrom sklearn.model_selection import train_test_split\n\n# feature scaling\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Let's separate into train and test set\n# Remember to set the seed (random_state for this sklearn function)\n\nX_train, X_test, y_train, y_test = train_test_split(data, data.diabetesMed,\n                                                    test_size=0.2,\n                                                    random_state=0) # we are setting the seed here\nX_train.shape, X_test.shape","1a216f9e":"# this function will assign discrete values to the strings of the variables, \n# so that the smaller value corresponds to the smaller mean of target\n\ndef replace_categories(train, test, var, target):\n    ordered_labels = train.groupby([var])[target].mean().sort_values().index\n    ordinal_label = {k:i for i, k in enumerate(ordered_labels, 0)} \n    train[var] = train[var].map(ordinal_label)\n    test[var] = test[var].map(ordinal_label)","b78905ad":"for var in cat_vars:\n    replace_categories(X_train, X_test, var, 'diabetesMed')","dc59fbbd":"# check absence of na\n[var for var in X_train.columns if X_train[var].isnull().sum()>0]","4896cf6f":"# check absence of na\n[var for var in X_test.columns if X_test[var].isnull().sum()>0]","d104a198":"# let me show you what I mean by monotonic relationship between labels and target\ndef analyse_vars(df, var):\n    df = df.copy()\n    df.groupby(var)['diabetesMed'].median().plot.bar()\n    plt.title(var)\n    plt.ylabel('diabetesMed')\n    plt.show()\n    \nfor var in cat_vars:\n    analyse_vars(X_train, var)","aa1f7b06":"# check absence of missing values\nX_train.isnull().sum().sum()","6707b307":"DATA ANALYSIS","73a665f8":"FEATURE ENGINEERING"}}