{"cell_type":{"42524aba":"code","752ed506":"code","b72fe24a":"code","7db23c14":"code","5eafc1e3":"markdown","6eff06be":"markdown","d99df677":"markdown","1c668cdd":"markdown"},"source":{"42524aba":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport json\n\nleaderboard_old = pd.read_csv(\"..\/input\/jane-street-market-prediction-leaderboard\/leaderboard.csv\")\nleaderboard_old = leaderboard_old.drop(columns=[\"teamName\", \"medal\", \"teamName\"]).\\\n    rename(columns={\"final_score\": \"12th_rerun_score\", \"final_rank\": \"12th_rerun_rank\"})\n\nteams = pd.read_csv('..\/input\/meta-kaggle\/Teams.csv')\nsubmissions = pd.read_csv('..\/input\/meta-kaggle\/Submissions.csv')\nsubmissions = submissions[[\"Id\", \"PrivateScoreLeaderboardDisplay\"]].\\\n    rename(columns={\"PrivateScoreLeaderboardDisplay\": \"final_score\", \"Id\": \"SubmissionId\"})\nleaderboard_new = teams.loc[teams[\"CompetitionId\"] == 23304, [\"Id\", \"PrivateLeaderboardSubmissionId\", \"TeamName\"]]\nleaderboard_new = leaderboard_new[pd.notna(leaderboard_new[\"PrivateLeaderboardSubmissionId\"])].\\\n    rename(columns={\"Id\": \"teamId\", \"PrivateLeaderboardSubmissionId\": \"SubmissionId\", \"TeamName\": \"teamName\"}).\\\n    reset_index(drop=True)\nleaderboard_new[\"SubmissionId\"] = leaderboard_new[\"SubmissionId\"].astype(np.int64)\nleaderboard_new = pd.merge(leaderboard_new, submissions, on=\"SubmissionId\")\ndel teams, submissions\nleaderboard_new[\"final_rank\"] = leaderboard_new[\"final_score\"].rank(ascending=False, method=\"first\").astype(np.int64)\n\ngold_min_score = leaderboard_new[leaderboard_new[\"final_rank\"] == 18][\"final_score\"].values[0]\nsilver_min_score = leaderboard_new[leaderboard_new[\"final_rank\"] == 212][\"final_score\"].values[0]\nbronze_min_score = leaderboard_new[leaderboard_new[\"final_rank\"] == 424][\"final_score\"].values[0]\nleaderboard_new[\"medal\"]= leaderboard_new.apply(lambda x: \"gold\" if x[\"final_score\"] >= gold_min_score\n                                         else \"silver\" if x[\"final_score\"] >= silver_min_score and x[\"final_score\"] < gold_min_score\n                                         else \"bronze\" if x[\"final_score\"] >= bronze_min_score and x[\"final_score\"] < silver_min_score\n                                         else np.NaN, 1)\nleaderboard = pd.merge(leaderboard_old, leaderboard_new, on=\"teamId\")\nleaderboard.to_csv(\"leaderboard.csv\", index=False)\ndel leaderboard_old, leaderboard_new, gold_min_score, silver_min_score, bronze_min_score\n\nleaderboard[\"teamMembers\"] = leaderboard[\"teamMembers\"].\\\n    apply(lambda x: x.strip('][').replace('{', '').replace('},', '}').split('}'))\nleaderboard[\"teamMembers\"] = leaderboard[\"teamMembers\"].\\\n    apply(lambda x : [json.loads('{' + el.replace(\"\\'\", \"\\\"\").replace('\\\\', \"\").\\\n                      replace(\"r\\\"s\", \"r\\'s\").replace('}', '' + '}') + '}') for el in x if el!=''])\nleaderboard[\"medal\"]= leaderboard.apply(lambda x: \"https:\/\/www.kaggle.com\/static\/images\/medals\/competitions\/goldl@1x.png\" if x[\"medal\"] == \"gold\"\n                                         else \"https:\/\/www.kaggle.com\/static\/images\/medals\/competitions\/silverl@1x.png\" if x[\"medal\"] == \"silver\"\n                                         else \"https:\/\/www.kaggle.com\/static\/images\/medals\/competitions\/bronzel@1x.png\" if x[\"medal\"] == \"bronze\"\n                                         else np.NaN, 1)","752ed506":"leaderboard.loc[:, [\"teamName\", \n                    \"teamMembers\", \n                    \"public_score\", \n                    \"1st_rerun_score\", \n                    \"2nd_rerun_score\", \n                    \"3rd_rerun_score\", \n                    \"4th_rerun_score\", \n                    \"5th_rerun_score\", \n                    \"6th_rerun_score\",\n                    \"7th_rerun_score\",\n                    \"8th_rerun_score\",\n                    \"9th_rerun_score\",\n                    \"10th_rerun_score\",\n                    \"11th_rerun_score\",\n                    \"12th_rerun_score\",\n                    \"final_score\",\n                    \"public_rank\", \n                    \"1st_rerun_rank\", \n                    \"2nd_rerun_rank\", \n                    \"3rd_rerun_rank\", \n                    \"4th_rerun_rank\", \n                    \"5th_rerun_rank\", \n                    \"6th_rerun_rank\",\n                    \"7th_rerun_rank\",\n                    \"8th_rerun_rank\",\n                    \"9th_rerun_rank\",\n                    \"10th_rerun_rank\",\n                    \"11th_rerun_rank\",\n                    \"12th_rerun_rank\",\n                    \"final_rank\",\n                    \"medal\"]].\\\n    sort_values(\"final_rank\", ascending=True).\\\n    style.format({\n        \"teamMembers\": lambda x: \"\".join(f'<div style=\"float: right; margin: -4px 2px;\"><a href=\"https:\/\/www.kaggle.com{xi[\"profileUrl\"]}\"><img src=\"{xi[\"thumbnailUrl\"]}\" width=\"24\" height=\"24\" alt=\"{xi[\"displayName\"]}\"><\/a><\/div>' for xi in x)\n       ,\"public_score\": '{:,.3f}'.format\n       ,\"1st_rerun_score\": '{:,.3f}'.format\n       ,\"2nd_rerun_score\": '{:,.3f}'.format\n       ,\"3rd_rerun_score\": '{:,.3f}'.format\n       ,\"4th_rerun_score\": '{:,.3f}'.format\n       ,\"5th_rerun_score\": '{:,.3f}'.format\n       ,\"6th_rerun_score\": '{:,.3f}'.format\n       ,\"7th_rerun_score\": '{:,.3f}'.format\n       ,\"8th_rerun_score\": '{:,.3f}'.format\n       ,\"9th_rerun_score\": '{:,.3f}'.format\n       ,\"10th_rerun_score\": '{:,.3f}'.format\n       ,\"11th_rerun_score\": '{:,.3f}'.format\n       ,\"12th_rerun_score\": '{:,.3f}'.format\n       ,\"final_score\": '{:,.3f}'.format\n       ,\"medal\": lambda x: f'<div style=\"float: right; margin: -4px 2px;\"><a href=\"{x}\"><img src=\"{x}\" width=\"24\" height=\"24\" alt=\"{x}\"><\/a><\/div>' if x!='' else ''\n    }).\\\nbackground_gradient(subset=[\"public_score\", \n                            \"1st_rerun_score\", \n                            \"2nd_rerun_score\", \n                            \"3rd_rerun_score\", \n                            \"4th_rerun_score\", \n                            \"5th_rerun_score\", \n                            \"6th_rerun_score\",\n                            \"7th_rerun_score\",\n                            \"8th_rerun_score\",\n                            \"9th_rerun_score\",\n                            \"10th_rerun_score\",\n                            \"11th_rerun_score\",\n                            \"12th_rerun_score\",\n                            \"final_score\"], cmap=\"Wistia\").\\\nbackground_gradient(subset=[\"public_rank\", \n                            \"1st_rerun_rank\", \n                            \"2nd_rerun_rank\", \n                            \"3rd_rerun_rank\", \n                            \"4th_rerun_rank\", \n                            \"5th_rerun_rank\", \n                            \"6th_rerun_rank\",\n                            \"7th_rerun_rank\",\n                            \"8th_rerun_rank\",\n                            \"9th_rerun_rank\",\n                            \"10th_rerun_rank\",\n                            \"11th_rerun_rank\",\n                            \"12th_rerun_rank\",\n                            \"final_rank\"], cmap=\"OrRd\").\\\nhide_index()","b72fe24a":"scores = leaderboard.loc[:, [\"public_score\", \n                             \"1st_rerun_score\", \n                             \"2nd_rerun_score\", \n                             \"3rd_rerun_score\", \n                             \"4th_rerun_score\", \n                             \"5th_rerun_score\", \n                             \"6th_rerun_score\",\n                             \"7th_rerun_score\",\n                             \"8th_rerun_score\",\n                             \"9th_rerun_score\",\n                             \"10th_rerun_score\",\n                             \"11th_rerun_score\",\n                             \"12th_rerun_score\",\n                             \"final_score\"]]\nsns.displot(scores.unstack().reset_index(name='score').rename(columns={\"level_0\": \"rerun\"}).drop(columns=[\"level_1\"]), \n            x=\"score\", hue=\"rerun\", kind=\"kde\", height=15)\nplt.show()","7db23c14":"scores.describe().style.format('{:,.2f}'.format)","5eafc1e3":"[The leaderboard](https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/leaderboard) for Jane Street Market Prediction competition shows only the final (recent) score for each team. It is interesting to look at public and intermediate reruns' scores.\n\n*NB: team members in dashboard are clickable*","6eff06be":"<h2><center> Jane Street Market Prediction  - reruns dashboard <\/center><\/h2>","d99df677":"<h2><center> <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/7\/7c\/Stock_Bull.jpg\" width=\"400\" alt=\"Stock Market Bull img\"><\/center><\/h2>","1c668cdd":"### Are there any difference? Reruns score distribution."}}