{"cell_type":{"51ce1886":"code","546b8441":"code","babfc1be":"code","239bf592":"code","2451ed4d":"code","79920e70":"code","23f65ff8":"code","bcf409a7":"code","5ffff2d2":"code","b5f2f4bb":"code","aac52ab8":"code","b010b8cd":"code","c3aab939":"code","4db8f651":"code","65449f49":"code","0c9c21ac":"code","c2702f45":"code","0015e1ea":"markdown","54f583fb":"markdown","56acdd87":"markdown","7c9ced19":"markdown","3e61717c":"markdown","37698593":"markdown","a59d739d":"markdown","866c8869":"markdown","312a95da":"markdown","5686e535":"markdown","c9b6aca9":"markdown","982b12ca":"markdown","40583531":"markdown","ddeed7ba":"markdown"},"source":{"51ce1886":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport missingno as msno\nfrom collections import Counter\n\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport datetime","546b8441":"# matplot settings\nplt.rcParams['figure.dpi'] = 150","babfc1be":"data = pd.read_csv('\/kaggle\/input\/disney-movies-and-tv-shows\/disney_plus_titles.csv')\nprint(data.shape)","239bf592":"msno.matrix(data)\nplt.show()","2451ed4d":"data.isnull().sum()","79920e70":"data = data.fillna('Missing')\ndata['year_added'] = data['date_added'].apply(lambda x : x.split(',')[-1])\ndata['month_added'] = data['date_added'].apply(lambda x : x.split(',')[0]).apply(lambda x : x.split(' ')[0])\n\nmovie_data = data[data['type'] == 'Movie']\nTV_data = data[data['type'] == 'TV Show']","23f65ff8":"fig, ax = plt.subplots(1, 1, figsize=(5,5))\n\nyears = list(reversed(list(movie_data['year_added'].unique())))\nx = np.arange(len(years))\nmovie_y = np.array(list(movie_data['year_added'].value_counts()))\nTV_y = np.array(list(TV_data['year_added'].value_counts())[:-1])\nwidth = 0.3\n\n# Movie Bar Plot\nax.bar(x-width\/2, movie_y, \n       color='#393E8F', alpha=0.9,\n       edgecolor='black', linewidth=1,\n       width=width,\n       label='movie'      \n      )\n\n# TV Bar Plot\nax.bar(x+width\/2, TV_y, \n       color='#F3CC64', alpha=0.9,\n       edgecolor='black', linewidth=1,\n       width=width,\n       label='TV'\n      )\n\n# Hide Spiines\nfor s in [\"top\",\"right\", \"left\"]:\n    ax.spines[s].set_visible(False)\n\n# legend\nax.legend(bbox_to_anchor=(0.5, 0.4, 0.5, 0.5))\n\n# xaxis\nax.set_xticks(x)\nax.set_xticklabels(years, fontsize=12)\n\n# title\nax.set_title('Yearly Added Contents On Disney +', fontsize=15, fontweight='bold', position=(0.5, 1.1))\n\nplt.tight_layout()\nplt.show()","bcf409a7":"df_release_year = data.groupby(['release_year', 'type']).agg('count').reset_index().iloc[:,:3]\ndf_release_year.columns = ['release_year', 'type', 'release_cnt']\ndf_release_year_before_2019 = df_release_year[df_release_year['release_year'] < 2019]\ndf_release_year_2019_and_after = df_release_year[df_release_year['release_year'] >= 2019]\n\nfig, ax = plt.subplots(1, 2, figsize=(10,5))\n\n# Before 2019\nbefore_movie = df_release_year_before_2019[df_release_year_before_2019['type'] == 'Movie']['release_cnt'].sum()\nbefore_TV_show = df_release_year_before_2019[df_release_year_before_2019['type'] == 'TV Show']['release_cnt'].sum()\nbefore_size = [before_movie, before_TV_show]\n\n# 2019 & After\nafter_movie = df_release_year_2019_and_after[df_release_year_2019_and_after['type'] == 'Movie']['release_cnt'].sum()\nafter_TV_show = df_release_year_2019_and_after[df_release_year_2019_and_after['type'] == 'TV Show']['release_cnt'].sum()\nafter_size = [after_movie, after_TV_show]\n\nlabels = 'Movie', 'TV Show'\n\n# Before 2019 Pie Chart\nax[0].pie(before_size, labels=labels,\n          autopct='%1.1f%%', startangle=90, colors = ['#393E8F', '#F3CC64'],\n          wedgeprops = {\"alpha\": 0.9})\n\n# 2019 & After Pie Chart\nax[1].pie(after_size, labels=labels,\n          autopct='%1.1f%%', startangle=90, colors = ['#393E8F', '#F3CC64'],\n          wedgeprops = {\"alpha\": 0.9})\n\n\n# Hide Spiines\nfor i in range(2):\n    for s in [\"top\", \"bottom\", \"right\", \"left\"]:\n        ax[i].spines[s].set_visible(False)\n\n# Title\nfig.suptitle(\"Released Contents\", fontsize=25, fontweight='bold', x=0.5, y=1.05)\nax[0].set_title('Before 2019', x=0.5, y=0.95)\nax[1].set_title('2019 & After', x=0.5, y=0.95)\n\n# plt.legend(list(labels), loc=\"center\")\nplt.tight_layout()\nplt.show()","5ffff2d2":"director_list = data['director'].apply(lambda x : x.split(',')).sum()\ndirector_count = Counter(director_list).most_common()\ndf_director_count = pd.DataFrame(director_count)\ndf_director_count.columns = ['director_name', 'count']\ndf_director_count.head(10)","b5f2f4bb":"df_director_top_10 = df_director_count.iloc[1:11,:].reset_index(drop=True)\ndf_director_top_10","aac52ab8":"fig, ax = plt.subplots(1, 1, figsize=(5,5))\n\nxtichlabels = 0, 5, 10, 15, 20\n\nax.barh(df_director_top_10.sort_values(by='count')['director_name'],\n        df_director_top_10.sort_values(by='count')['count'],\n        color='lightgray', edgecolor='black', linewidth=1, height=0.7\n       )\n\n# Hide Spiines\nfor s in [\"top\", \"right\"]:\n    ax.spines[s].set_visible(False)\n    \n# X axis\nax.set_xlabel(\"Number of Contents Produced\", fontsize=12, fontweight='medium')\nax.set_xticklabels(xtichlabels, fontsize=12)\nax.tick_params(axis='x', which='major', labelsize=12)\n\n# Title\nax.set_title('Top 10 Directors By Directed Contents', fontsize=15, fontweight='bold', x=0.4, y=1.05)\n\nplt.xlim(0,20)\nplt.tight_layout()\nplt.show()","b010b8cd":"movie_rating_order =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14']\nmovie_rating = pd.DataFrame(data[(data['rating'] != 'Missing') & (data['type'] == 'Movie')]['rating'].value_counts()[movie_rating_order]).reset_index()\nmovie_rating.columns = ['rating', 'count']\n\nTV_show_rating_order = ['TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'TV-14']\nTV_show_rating = pd.DataFrame(data[(data['rating'] != 'Missing') & (data['type'] == 'TV Show')]['rating'].value_counts()[TV_show_rating_order]).reset_index()\nTV_show_rating.columns = ['rating', 'count']","c3aab939":"# horizontal display\nfrom IPython.display import display_html\n\ndef display_dfs(dfs, gap=100, justify='center'):\n    html = \"\"\n    for title, df in dfs.items():  \n        df_html = df._repr_html_()\n        cur_html = f'<div> <h3>{title}<\/h3> {df_html}<\/div>'\n        html +=  cur_html\n    html= f\"\"\"\n    <div style=\"display:flex; gap:{gap}px; justify-content:{justify};\">\n        {html}\n    <\/div>\n    \"\"\"\n    display_html(html, raw=True)\n\ndfs = {'Movie Rating': movie_rating, 'TV Show Rating': TV_show_rating}\ndisplay_dfs(dfs, justify='flex-start')","4db8f651":"fig, ax = plt.subplots(1, 1, figsize=(10,6))\n# color_map = ['green', 'green', 'green', 'blue', 'blue', 'blue', 'orange', 'orange', 'orange']\nax.bar(movie_rating['rating'], movie_rating['count'], edgecolor='black', alpha=0.8, width=0.7, color='#d0d0d0')\n\nspan_range = [[0, 2], [3,  6], [7, 8]]\ncolor =  ['green',  'blue',  '#ff7f0e']\n\nfor idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,275),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n\nax.set_ylim(0, 300)\nplt.title('Movie Rating')\nplt.show()","65449f49":"fig, ax = plt.subplots(1, 1, figsize=(8,6))\n# color_map = ['green', 'green', 'green', 'blue', 'blue', 'blue', 'orange', 'orange', 'orange']\nax.bar(TV_show_rating['rating'], TV_show_rating['count'], edgecolor='black', alpha=0.8, width=0.7, color='lightgray')\n\nspan_range = [[0, 1], [2, 5], [6, 6]]\ncolor =  ['green',  'blue',  '#ff7f0e']\n\nfor idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,130),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n        \nax.set_ylim(0, 140)\nplt.title('TV Show Rating')\nplt.show()","0c9c21ac":"y_m_df = data[['year_added','month_added']].value_counts().reset_index().iloc[:-1,:]\ny_m_df.columns = ['year_added', 'month_added', 'added_contents']\nfor i in range(len(y_m_df)):\n    y_m_df.loc[i, 'num_converted_month'] = str(datetime.datetime.strptime(y_m_df.loc[i, 'month_added'], \"%B\").month)\n\nfor i in range(len(y_m_df)):\n    y_m_df.loc[i, 'short_month_added'] = datetime.datetime.strptime(y_m_df.loc[i, 'num_converted_month'], \"%m\").strftime(\"%b\")\n\ny_m_df['num_converted_month'] = y_m_df['num_converted_month'].astype(int)\ny_m_df = y_m_df.sort_values(by=['year_added', 'num_converted_month']).reset_index(drop=True)\ny_m_df['year_month_added'] = y_m_df['short_month_added'] + y_m_df['year_added']\ny_m_df = y_m_df[['year_month_added', 'added_contents']]\ny_m_df","c2702f45":"fig = go.Figure()\n\ncolor_map = ['lightgray' for _ in range(len(y_m_df))]\ncolor_map[1] = '#393E8F'\n\nfig.add_trace(go.Bar(x=y_m_df['year_month_added'], y=y_m_df['added_contents'],\n                     marker_color=color_map))\n\n# Annotation\nfig.add_annotation(x='Mar 2020', y=700,\n            text=\"Most of contents were added at the begining\",\n            showarrow=False,\n            bordercolor=\"#c7c7c7\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"#303030\",\n            opacity=0.8,\n            font=dict(\n                color=\"white\",\n                size=12))\n\n\nfig.update_layout(dict(\n    title= \"Monthly Added Contents On Disney +\"))\n               \nfig.show()","0015e1ea":"## Reference\n\n* [Simple Matplotlib & Visualization Tips \ud83d\udca1](https:\/\/www.kaggle.com\/subinium\/simple-matplotlib-visualization-tips)\n* [[Matplotlib] \ud83d\udca1 Conceptual Figure - Basic Viz](https:\/\/www.kaggle.com\/subinium\/matplotlib-conceptual-figure-basic-viz)","54f583fb":"## What about the ratings\n\nAccording to [this link](https:\/\/namu.wiki\/w\/%EB%94%94%EC%A6%88%EB%8B%88%2B), Disney + does not provide content for adults(USA R rating).\n\nThe ratings provided by Disney+ are as follows.\n\n#### **Movie**\n* G: General Audiences\n* PG: Parental Guidance Suggested\n* PG-13: Parents Strongly Cautioned\n* ~~R: Restricted~~\n* ~~NC-17: Clearly Adult~~\n\n#### **TV Show**\n* TV-Y: All Children\n* TV-G: General Audience\n* TV-Y7: Directed to Older Children\n* TV-Y7 FV: Directed to Older Children - Fantasy Violence\n* TV-PG: Parental Guidance Suggested\n* TV-14: Parents Strongly Cautioned\n* ~~TV-MA: Mature Audience Only~~","56acdd87":"Unlike official documents related to Rating, the ratings of movies and TV shows provided by Disney+ were mixed.\n\nAnyway, let's visualize the rating distribution of movies and TV shows, respectively.","7c9ced19":"You could see that there are many missing values in the cast, country, and director columns.","3e61717c":"![\u1109\u1173\u110f\u1173\u1105\u1175\u11ab\u1109\u1163\u11ba 2022-01-02 \u110b\u1169\u1112\u116e 2.00.04.png](attachment:afd6fc0f-fa81-4548-8236-6b00920389ac.png)","37698593":"As written in the visualization above, most of the contents were added at the beginning of the Disney+ service.\n\nBecause of that part, the difference in the amount of content added to other months are not clearly visible.\n\nSo I performed visualization using the interactive plotly.\n\nIf you zoom in from December 2019, you can see the difference between other months in detail.","a59d739d":"Since the first place is a Missing value, we will visualize after excluding it.","866c8869":"## Yearly released contents","312a95da":"In all three years, more movies have been added than TV shows, but there are differences in the trend.\n\nMovies have been on the decline since they were added the most in 2019, while TV shows have been added similarly for three years.\n\nI think there will be a difference in the proportion of released movies and TV shows before and after 2019, so I will visualize this.","5686e535":"## Monthly Trends\n\nLastly, let's take a look at the monthly trend of the contents added to Disney+.","c9b6aca9":"## Who directed the most contents?","982b12ca":"Disney + launched its service in Korea on November 14, 2021.\n\nI got curious about how Disney + was providing services overseas, so I proceeded with related visualization.","40583531":"## Yearly added contents on Disney + \n\nSince Disney+ started its service in 2019, you could assume that only three years of data will exist in 2019, 2020, and 2021.\n\nI would like to check which year the most content was added over the past three years.","ddeed7ba":"Before 2019, there were much more released movies than TV shows, but after that, the gap seems to have narrowed."}}