{"cell_type":{"a32f6c82":"code","2b221ee8":"code","db0f48ed":"code","fd329687":"code","d1e3268a":"code","3e6cf995":"code","8f877b9e":"code","c6239b1d":"code","02e8c145":"code","b1a089a0":"code","011513bd":"code","4512c56e":"code","27c15106":"code","8dc00aca":"code","defd85cc":"code","4da0a5f5":"code","20ff65fe":"code","88ba86d6":"code","fa4cfb3c":"code","84e82909":"code","a88bbdae":"code","64152928":"code","b052e241":"code","c6f944ea":"code","5f24c374":"markdown","f6dd1a02":"markdown","ad5ebed3":"markdown","13151d28":"markdown","bfc3c2bc":"markdown","cb6e5274":"markdown"},"source":{"a32f6c82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b221ee8":"import random\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","db0f48ed":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest  = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')","fd329687":"print(train.shape,test.shape)","d1e3268a":"train.head(3)","3e6cf995":"#Check if there'is null values\ntrain.isnull().sum()","8f877b9e":"#Remove redundant samples if exist\ntrain=train.drop_duplicates(keep='first')\ntrain.shape","c6239b1d":"train.describe()","02e8c145":"columns = [col for col in train.columns.to_list() if col not in ['id','target']]","b1a089a0":"def plot_features(i):\n    plt.subplot(1, 2, 1,title=\"test\")\n    sns.kdeplot(test[columns[i-1]],shade=True)\n\n    plt.subplot(1, 2, 2,title=\"train\")\n    sns.kdeplot(train[columns[i-1]],shade=True)\n\n    plt.subplots_adjust(right=3.0)\n    plt.show()","011513bd":"plot_features(5)","4512c56e":"plot_features(10)","27c15106":"#train vs test for cont2\nax = sns.kdeplot(test[columns[1]])\nsns.kdeplot(train[columns[1]],ax=ax,legend=False)","8dc00aca":"train.target.describe()","defd85cc":"import seaborn as sns\nplt.figure(figsize=(10,4))\nplt.xlim(train['target'].min(),train['target'].max())\nsns.kdeplot(train['target'],shade=True)\nplt.show()","4da0a5f5":"corr = train[columns+['target']].corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","20ff65fe":"X_train, X_test, y_train, y_test = train_test_split(train[columns],train['target'] , test_size=0.2, random_state=42)","88ba86d6":"import xgboost as xgb\nmodel=xgb.XGBRegressor(n_estimators  = 400,max_depth=3)\nmodel.fit(X_train, y_train)","fa4cfb3c":"y_predicted=model.predict(X_test)","84e82909":"mean_squared_error(y_test, y_predicted, squared=False)#0.7015802873306943","a88bbdae":"mean_squared_error(y_test, y_predicted, squared=False)","64152928":"sub['target']=model.predict(test[columns])","b052e241":"sub.to_csv('submission.csv', index=False)","c6f944ea":"sub","5f24c374":"# EDA","f6dd1a02":"# Submission","ad5ebed3":"**Let's plot the correlaton matrix**","13151d28":"# Please If you find this kernel helpful, upvote it to help others see it \ud83d\ude0a","bfc3c2bc":"* There's not duplicates in our data","cb6e5274":"# Let's create an XGB model"}}