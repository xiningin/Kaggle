{"cell_type":{"841fdc1e":"code","74a4523d":"code","701d499b":"code","768baf7a":"code","a005c6ae":"code","472f2ad1":"code","73d565f6":"code","6582397d":"code","b39f15f7":"code","477921f8":"code","f1badf3d":"code","fb165c12":"code","314bc33e":"code","1e979bdc":"code","a9eb57ce":"code","7237f564":"code","eea268fe":"code","1da5d2a2":"code","7560921b":"code","216c3e59":"code","e5fcc34f":"code","e2dc17e3":"code","e0abf52b":"code","71380407":"code","884f7cb7":"code","cd8e6b4f":"markdown","e28b26c0":"markdown","54deaec7":"markdown"},"source":{"841fdc1e":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nimport missingno as msno\n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#import the necessary modelling algos.\n\n#classifiaction.\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\n \n\n#regression\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso,RidgeCV\nfrom sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\n\n#model selection\nfrom sklearn.model_selection import train_test_split,cross_validate\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\n#preprocessing\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder\n\n#evaluation metrics\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error # for regression\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score  # for classification\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import cross_val_score","74a4523d":"df = pd.read_csv('..\/input\/customer\/Train.csv')\ndf.head()","701d499b":"df.shape","768baf7a":"df.info()","a005c6ae":"df.isnull().sum()","472f2ad1":"df.dropna(inplace = True)","73d565f6":"df.isnull().sum()","6582397d":"df.Profession.nunique()","b39f15f7":"df.Spending_Score.nunique()","477921f8":"df.Family_Size.nunique()","f1badf3d":"df.Var_1.nunique()","fb165c12":"df.Segmentation.nunique()","314bc33e":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","1e979bdc":"df['Gender'] = le.fit_transform(df['Gender'])\ndf['Ever_Married'] = le.fit_transform(df['Ever_Married'])\ndf['Graduated'] = le.fit_transform(df['Graduated'])\ndf['Spending_Score'] = le.fit_transform(df['Spending_Score'])\ndf['Segmentation'] = le.fit_transform(df['Segmentation'])","a9eb57ce":"df = df.drop('ID', axis = 1)","7237f564":"df.head()","eea268fe":"df = pd.get_dummies(df, columns = ['Profession'])\ndf = pd.get_dummies(df, columns = ['Var_1'])\ndf.head()","1da5d2a2":"df.corr()['Segmentation'].sort_values()","7560921b":"X = df.drop('Segmentation', axis = 1)\ny = df.Segmentation","216c3e59":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","e5fcc34f":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","e2dc17e3":"models = [LogisticRegression(),LinearSVC(),SVC(kernel='rbf'),KNeighborsClassifier(),RandomForestClassifier(),\n        DecisionTreeClassifier(),GradientBoostingClassifier(),GaussianNB()]\nmodel_names=['LogisticRegression','LinearSVM','rbfSVM','KNearestNeighbors','RandomForestClassifier','DecisionTree',\n             'GradientBoostingClassifier','GaussianNB']\n\nacc=[]\nd={}\n\nfor model in range(len(models)):\n    clf=models[model]\n    clf.fit(X_train,y_train)\n    pred=clf.predict(X_test)\n    acc.append(accuracy_score(pred,y_test))\n     \nd={'Modelling Algo':model_names,'Accuracy':acc}\nd","e0abf52b":"acc_frame=pd.DataFrame(d)\nacc_frame","71380407":"sns.barplot(y='Modelling Algo',x='Accuracy',data=acc_frame)\n","884f7cb7":"sns.factorplot(x='Modelling Algo',y='Accuracy',data=acc_frame,kind='point',size=4,aspect=3.5)\n","cd8e6b4f":"### LE : Gender,  Ever_Married, Graduated, Spending_Score, Segmentation\n\n### GD: Profession, Var_1\n","e28b26c0":"# Modeling","54deaec7":"# Data preprocessing"}}