{"cell_type":{"fc1e0859":"code","604aad1a":"code","1d063d2b":"code","a2a0168c":"code","3b56abd4":"code","0497274e":"code","d60e8d1c":"code","f89d890c":"code","4454569d":"code","4724afd2":"code","dba74e2d":"code","ea69722b":"code","59d704fc":"code","a584070b":"code","e45530aa":"code","022ccdc9":"code","d3dcb57f":"code","5932b754":"code","c6835697":"code","b9172367":"code","e389009a":"code","94c3f0a6":"code","16b4a45d":"code","a2ed05c1":"code","523542ce":"code","e252bb59":"code","abf32d72":"code","4eef1e6e":"code","1890ddd4":"code","83f71704":"code","cb02bdae":"code","6cf0ef54":"code","f8af8f4e":"code","b858f792":"code","41933e74":"code","e6937f97":"code","3f06f7a9":"code","75ef600d":"code","1c360c64":"code","a16d27a1":"code","8b733465":"code","a040bf82":"code","877a3e38":"code","2651a97f":"code","41205fc9":"code","1fa30ac5":"code","4c2e90f0":"code","6eeefbe9":"code","ad9d3d20":"code","6c5d73f7":"code","a028300b":"code","86c6ff20":"code","2250f2b8":"code","467a6027":"code","4a2db4e5":"code","bfd9332b":"code","9e9673f8":"code","b6ba94d4":"markdown","73f22b2e":"markdown","3625776f":"markdown","05ea3846":"markdown","e7acd298":"markdown","6fe0a429":"markdown","7873b2b7":"markdown","7b46f383":"markdown","b058d952":"markdown","3bc1fd47":"markdown","a3ccc2c6":"markdown","3d6a58fc":"markdown","2448f641":"markdown","3a7255e1":"markdown","9df51f18":"markdown","a8410491":"markdown","c7ee2d1f":"markdown","b3354876":"markdown","dc621904":"markdown","9265f2ac":"markdown","1aab99fb":"markdown","30316085":"markdown","0e363f87":"markdown","68b7fe21":"markdown","3b297c63":"markdown","48885bd7":"markdown","5c674303":"markdown","cf53e2fb":"markdown","cce1e665":"markdown","883dcf84":"markdown","a94e0fcf":"markdown"},"source":{"fc1e0859":"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport pandas as pd\nimport scipy.stats as stat\nfrom collections import Counter\nfrom scipy.stats import t\nfrom scipy.stats import norm\n\nimport os\n\npath = os.environ['PATH']\n\nif path.startswith('C'):\n    IN_KAGGLE = False\nelse:\n    IN_KAGGLE = True","604aad1a":"# Para uso com fun\u00e7\u00f5es da biblioteca standard (ex random.randint)\nrandom.seed(1)\n# Para uso com fun\u00e7\u00f5es da biblioteca numpy (ex np.random.randint)\nnp.random.seed(1)\n\n# Quando for passada como par\u00e2metro a seed\nrandom_state = 1","1d063d2b":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o t de student para determinada confianca\n\n\ndef calcula_Z_tstudent(confianca, tamanho_amostra):\n    mean = 0\n    std = 1\n    rv = t(df=(tamanho_amostra-1))\n    return rv.interval(confianca)[1]","a2a0168c":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o normal para determinada confianca\n\n\ndef calcula_Z_normal(confianca):\n    mean = 0\n    std = 1\n    rv = norm(loc=mean, scale=std)\n    return rv.interval(confianca)[1]","3b56abd4":"# Calcula n\u00famero de desvios na distribui\u00e7\u00e3o normal para determinada confianca e m\u00faltiplas propor\u00e7\u00f5es\n\ndef calcula_Z_Multiplas_Proporcoes(confianca, numero_proporcoes):\n    area = math.pow(  confianca, 1\/(numero_proporcoes-1) )\n    return calcula_Z_normal(area)\n\n","0497274e":"# Recupera amostra da popula\u00e7\u00e3o\n\ndef recupera_amostra(populacao, tamanho_amostra):\n    tamanho_amostra = int(tamanho_amostra)\n    if type(populacao) is pd.DataFrame:\n        return populacao.sample(tamanho_amostra)\n    else:\n        #return populacao[np.random.randint(0, len(populacao), tamanho_amostra)]\n        return [populacao[i] for i in np.random.randint(0, len(populacao), tamanho_amostra)]","d60e8d1c":"# Fun\u00e7\u00e3o que calcula intervalo de confian\u00e7a para m\u00e9dia com base em uma amostra e a confian\u00e7a desejada\n\ndef calcula_intervalo_media(amostra, confianca, tamanho_populacao):\n    tamanho_amostra = len(amostra)\n    \n    #1-Calcule a m\u00e9dia da amostra ex. media_amostra = np.mean(amostra)\n    media_amostra = np.mean(amostra)\n\n    #2-Calcule o desvio da amostra ex. desvio_amostra = np.std(amostra)\n    desvio_amostra = np.std(amostra)\n\n    #3-Calcule quantos desvios precisar\u00e1 para seu grau de confi\u00e2n\u00e7a ex. numero_desvios = calcula_numero_desvios_tstudent_para_confianca(confian\u00e7a, tamanho_amostra)\n    numero_desvios = calcula_Z_tstudent(confianca, tamanho_amostra)\n\n    #4-Calcule o desvio das amostras ex. desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\n    desvio_amostras = desvio_amostra\/np.sqrt(tamanho_amostra)\n\n    #5-Calcule a margem de erro ex. margem_erro = numero_desvios*desvio_amostras\n    margem_erro = numero_desvios*desvio_amostras\n    \n    if tamanho_amostra>0.05*tamanho_populacao:\n        margem_erro = margem_erro * (np.sqrt(tamanho_populacao-tamanho_amostra)\/np.sqrt(tamanho_populacao-1))\n\n    #6-Calcule o intervalo ex. inferior = media_amostra-margem_erro, superior = media_amostra+margem_erro\n    inferior = media_amostra-margem_erro\n    superior = media_amostra+margem_erro\n\n    return inferior,superior","f89d890c":"# Fun\u00e7\u00e3o que calcula intervalo de confian\u00e7a para propor\u00e7\u00e3o de determinado valor com base em uma amostra e a confian\u00e7a desejada\n# O par\u00e2metro valor representa a categoria na amostra para a qual se deseja o intervalo de confian\u00e7a da propor\u00e7\u00e3o, por exemplo o nome de um candidato\n\ndef calcula_intervalo_proporcao(amostra, confianca, valor, tamanho_populacao):\n    tamanho_amostra = len(amostra)\n    \n    proporcao_valor = Counter(amostra)[valor]\/tamanho_amostra\n    \n    numero_desvios = calcula_Z_tstudent(confianca, tamanho_amostra)\n\n    margem_erro = numero_desvios*np.sqrt(proporcao_valor*(1-proporcao_valor))\/np.sqrt(tamanho_amostra)\n    \n    if tamanho_amostra>0.05*tamanho_populacao:\n        margem_erro = margem_erro * (np.sqrt(tamanho_populacao-tamanho_amostra)\/np.sqrt(tamanho_populacao-1))\n\n    inferior = proporcao_valor-margem_erro\n    superior = proporcao_valor+margem_erro\n\n    return inferior,superior","4454569d":"# Fun\u00e7\u00e3o para c\u00e1lculo do n\u00famero de amostras para m\u00e9dias e somas\n\ndef Tamanho_Amostra_Valor_Pontual(Tamanho_Populacao, Numero_Desvios, Variancia, Margem_Erro):\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Numero_Desvios,2) * Variancia) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Numero_Desvios,2)*Variancia )\n            )","4724afd2":"# Fun\u00e7\u00e3o para c\u00e1lculo do n\u00famero de amostras para propor\u00e7\u00f5es simples\n\ndef Tamanho_Amostra_Proporcao_Simples(Tamanho_Populacao, Numero_Desvios, Proporcao, Margem_Erro):\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Numero_Desvios,2) * Proporcao * (1-Proporcao)) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Numero_Desvios,2)*Proporcao*(1-Proporcao) )\n            )","dba74e2d":"# Fun\u00e7\u00e3o para c\u00e1lculo do tamanho da amostra para propor\u00e7\u00f5es m\u00faltiplas\n\ndef Tamanho_Amostra_Proporcao_Multipla(Tamanho_Populacao, Confianca, Numero_Proporcoes, Margem_Erro):\n    Confianca_ = calcula_Z_Multiplas_Proporcoes(Confianca, Numero_Proporcoes)\n    return math.ceil( \n            (Tamanho_Populacao * math.pow(Confianca_,2) * 0.25 ) \/ \\\n            ( (Tamanho_Populacao-1)*math.pow(Margem_Erro,2) + math.pow(Confianca_,2)*0.25 )\n            )","ea69722b":"Tamanho_Populacao = 2057\nTamanho_Populacao_Clinicas_Publicas = 909\nTamanho_Populacao_Clinicas_Privadas = 1148","59d704fc":"# Cria estrutura vazia para guadar dados da popula\u00e7\u00e3o\npopulacao = pd.DataFrame( columns=['Area','Procurou_Outra_Clinica','Dias_Ate_Atendimento','Satisfacao'])","a584070b":"#Distribui pacientes em cl\u00ednicas p\u00fablicas e privadas\npopulacao.Area = ['Publico']*909 + ['Privado']*1148\npopulacao.head()","e45530aa":"populacao['Area'].value_counts().plot(kind='bar')\nplt.xlabel('Area')\nplt.ylabel('Quantidade')\n\nplt.title('Area')\nplt.grid(True)\nplt.show()","022ccdc9":"# 218 pacientes da p\u00fablica procuraram outra cl\u00ednica (24%), 300 da privada procuraram (26,1%)\npopulacao.Procurou_Outra_Clinica = ['S']*218 + ['N']*691 + ['S']*300 + ['N']*848\npopulacao.head()","d3dcb57f":"populacao['Procurou_Outra_Clinica'].value_counts().plot(kind='bar')\nplt.xlabel('InteProcurou_Outra_Clinicaresse')\nplt.ylabel('Quantidade')\n\nplt.title('Procurou_Outra_Clinica')\nplt.grid(True)\nplt.show()\n\nprint(sum(populacao.Procurou_Outra_Clinica == 'S')\/Tamanho_Populacao)","5932b754":"# Dias para atendimento m\u00e9dia 71 p\u00fablica, 53 na privada, desvio 22.5 ambas\nrv_pub = norm(loc=71, scale=18.73)\nrv_pri = norm(loc=53, scale=14.69)\npopulacao.Dias_Ate_Atendimento =  list(rv_pub.rvs(size=909)) + list(rv_pri.rvs(size=1148))\npopulacao.Dias_Ate_Atendimento = populacao.Dias_Ate_Atendimento.astype('int')\npopulacao.loc[populacao.Dias_Ate_Atendimento <1,['Dias_Ate_Atendimento']] = 1\npopulacao.head()","c6835697":"n, bins, patches = plt.hist(populacao.Dias_Ate_Atendimento,  facecolor='g', alpha=0.75, bins=50)\nplt.xlabel('Dias_Ate_Atendimento')\nplt.ylabel('Quantidade')\n\nplt.title('Dias_Ate_Atendimento')\nplt.grid(True)\nplt.show()\n\nprint(populacao.Dias_Ate_Atendimento.mean())","b9172367":"# Grau de satisfa\u00e7\u00e3o arbitrado\npopulacao.Satisfacao = random.choices(population=['I','R','S'], weights=[0.2,0.5,0.3], k=2057)\npopulacao.head()","e389009a":"populacao['Satisfacao'].value_counts().plot(kind='bar')\nplt.xlabel('Satisfacao')\nplt.ylabel('Quantidade')\n\nplt.title('Satisfacao')\nplt.grid(True)\nplt.show()\n\nprint(sum(populacao.Satisfacao == 'I')\/Tamanho_Populacao)","94c3f0a6":"from sklearn.utils import shuffle\npopulacao = shuffle(populacao)\npopulacao.head()","16b4a45d":"Populacao_Clinicas_Publicas = populacao.loc[populacao.Area == 'Publico',:]\nTamanho_Populacao_Clinicas_Publicas = len(Populacao_Clinicas_Publicas)\nPopulacao_Clinicas_Privadas = populacao.loc[populacao.Area == 'Privado',:]\nTamanho_Populacao_Clinicas_Privadas = len(Populacao_Clinicas_Privadas)","a2ed05c1":"# Defini\u00e7\u00f5es gerais\nMargem_Erro_Dias = 3\nMargem_Erro_ProcurouOutraClinica = 0.05\nMargem_Erro_Satisfacao = 0.05\n    \nGrau_Confianca = 0.95","523542ce":"# Defini\u00e7\u00f5es espec\u00edficas (quando j\u00e1 se conhece a popula\u00e7\u00e3o)\nVariancia_Dias_Estimada = 506\nProporcao_Procurou_Outra_Clinica_Amostra = 0.3\n","e252bb59":"# Defini\u00e7\u00f5es espec\u00edficas (quando faz amostra piloto)\nTamanho_Amostra = 30\namostra = recupera_amostra(populacao, Tamanho_Amostra)\nVariancia_Dias_Estimada = amostra.Dias_Ate_Atendimento.var()\nProporcao_Procurou_Outra_Clinica_Amostra = sum(amostra.Procurou_Outra_Clinica == 'S')\/Tamanho_Amostra\nprint('Amostra {}, vari\u00e2ncia dias {}, propor\u00e7\u00e3o procurou outra cl\u00ednica {}'.format(\n                                                            Tamanho_Amostra,\n                                                            Variancia_Dias_Estimada,\n                                                            Proporcao_Procurou_Outra_Clinica_Amostra))","abf32d72":"z = calcula_Z_normal(Grau_Confianca)\n\nTamanho_Amostra_Dias = Tamanho_Amostra_Valor_Pontual(\n    Tamanho_Populacao,\n    z,\n    Variancia_Dias_Estimada,\n    Margem_Erro_Dias)\n\nTamanho_Amostra_Dias","4eef1e6e":"z = calcula_Z_normal(Grau_Confianca)\n\nTamanho_Amostra_Procurou_Outra_Clinica = Tamanho_Amostra_Proporcao_Simples(\n    Tamanho_Populacao,\n    z,\n    Proporcao_Procurou_Outra_Clinica_Amostra,\n    Margem_Erro_ProcurouOutraClinica\n)\n\nTamanho_Amostra_Procurou_Outra_Clinica","1890ddd4":"Tamanho_Amostra_Satisfacao = Tamanho_Amostra_Proporcao_Multipla(\n    Tamanho_Populacao,\n    Grau_Confianca,\n    3,\n    Margem_Erro_Satisfacao\n)\n\nTamanho_Amostra_Satisfacao","83f71704":"print('Tamanho_Amostra_Dias {}, Tamanho_Amostra_Procurou_Outra_Clinica {}, Tamanho_Amostra_Satisfacao {}'.format(\n    Tamanho_Amostra_Dias, \n    Tamanho_Amostra_Procurou_Outra_Clinica, \n    Tamanho_Amostra_Satisfacao))","cb02bdae":"amostraDias = recupera_amostra(populacao, Tamanho_Amostra_Dias)\namostraDias = amostraDias.Dias_Ate_Atendimento","6cf0ef54":"amostraDias.var()","f8af8f4e":"confianca = 0.95\n\ninferior,superior = calcula_intervalo_media(amostraDias, confianca, Tamanho_Populacao)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","b858f792":"print('Margem de erro {}'.format((superior-inferior)\/2))","41933e74":"amostraProcurouOutraClinica = recupera_amostra(populacao, Tamanho_Amostra_Procurou_Outra_Clinica)\namostraProcurouOutraClinica = amostraProcurouOutraClinica.Procurou_Outra_Clinica","e6937f97":"confianca = 0.95\n\ninferior,superior = calcula_intervalo_proporcao(amostraProcurouOutraClinica, confianca, 'S', Tamanho_Populacao)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","3f06f7a9":"print('Margem de erro {}'.format((superior-inferior)\/2))","75ef600d":"amostraSatisfacao = recupera_amostra(populacao, Tamanho_Amostra_Satisfacao)\namostraSatisfacao = amostraSatisfacao.Satisfacao","1c360c64":"confianca = 0.95\n\ninferior,superior = calcula_intervalo_proporcao(amostraSatisfacao, confianca, 'I', Tamanho_Populacao)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","a16d27a1":"print('Margem de erro {}'.format((superior-inferior)\/2))","8b733465":"proporcao_publico = Tamanho_Populacao_Clinicas_Publicas\/Tamanho_Populacao\n\nproporcao_privado = Tamanho_Populacao_Clinicas_Privadas\/Tamanho_Populacao","a040bf82":"amostraDiasPublico = recupera_amostra(Populacao_Clinicas_Publicas, proporcao_publico*Tamanho_Amostra_Dias)\namostraDiasPrivado = recupera_amostra(Populacao_Clinicas_Privadas, proporcao_privado*Tamanho_Amostra_Dias)","877a3e38":"amostraDias = pd.concat([amostraDiasPublico,amostraDiasPrivado]).Dias_Ate_Atendimento\nlen(amostraDias)","2651a97f":"confianca = 0.95\n\ninferior,superior = calcula_intervalo_media(amostraDias, confianca, Tamanho_Populacao)\nprint('Intervalo da m\u00e9dia {} {}'.format(inferior,superior))","41205fc9":"print('Margem de erro {}'.format((superior-inferior)\/2))","1fa30ac5":"eleitoresRegiao = [21389000,63887000,11555000,39230000,10595000]\npopulacao = pd.DataFrame( columns=['Regiao','Voto'])\n\n\npopulacao.Voto = \\\n['B']*int(0.57*eleitoresRegiao[0]) + ['H']*int(0.20*eleitoresRegiao[0]) + ['C']*int(0.09*eleitoresRegiao[0]) +\\\n['B']*int(0.53*eleitoresRegiao[1]) + ['H']*int(0.19*eleitoresRegiao[1]) + ['C']*int(0.12*eleitoresRegiao[1]) +\\\n['B']*int(0.43*eleitoresRegiao[2]) + ['H']*int(0.37*eleitoresRegiao[2]) + ['C']*int(0.09*eleitoresRegiao[2]) +\\\n['B']*int(0.26*eleitoresRegiao[3]) + ['H']*int(0.51*eleitoresRegiao[3]) + ['C']*int(0.17*eleitoresRegiao[3]) +\\\n['B']*int(0.58*eleitoresRegiao[4]) + ['H']*int(0.21*eleitoresRegiao[4]) + ['C']*int(0.10*eleitoresRegiao[4]) \n\npopulacao.Regiao = ['Sul']*(int(0.57*eleitoresRegiao[0]) + int(0.20*eleitoresRegiao[0]) + int(0.09*eleitoresRegiao[0])) + \\\n['Sudeste']*(int(0.53*eleitoresRegiao[1]) + int(0.19*eleitoresRegiao[1]) + int(0.12*eleitoresRegiao[1])) + \\\n['Norte']*(int(0.43*eleitoresRegiao[2]) + int(0.37*eleitoresRegiao[2]) + int(0.09*eleitoresRegiao[2])) + \\\n['Nordeste']*(int(0.26*eleitoresRegiao[3]) + int(0.51*eleitoresRegiao[3]) + int(0.17*eleitoresRegiao[3])) + \\\n['CentroOeste']*(int(0.58*eleitoresRegiao[4]) + int(0.21*eleitoresRegiao[4]) + int(0.10*eleitoresRegiao[4])) ","4c2e90f0":"TamanhoPopulacao = len(populacao)","6eeefbe9":"populacao = shuffle(populacao)\npopulacao.head()","ad9d3d20":"populacao['Regiao'].value_counts().plot(kind='bar')\nplt.xlabel('Regiao')\nplt.ylabel('Quantidade')\n\nplt.title('Regiao')\nplt.grid(True)\nplt.show()\n\n","6c5d73f7":"populacao['Regiao'].value_counts()\/TamanhoPopulacao","a028300b":"populacao['Voto'].value_counts().plot(kind='bar')\nplt.xlabel('Voto')\nplt.ylabel('Quantidade')\n\nplt.title('Voto')\nplt.grid(True)\nplt.show()","86c6ff20":"populacao['Voto'].value_counts()\/TamanhoPopulacao","2250f2b8":"Grau_Confianca = 0.95\nMargem_Erro = 0.02\n\n\nTamanho_Amostra = Tamanho_Amostra_Proporcao_Multipla(TamanhoPopulacao, Grau_Confianca, 3, Margem_Erro)\nprint(Tamanho_Amostra)\n","467a6027":"amostra = recupera_amostra(populacao,Tamanho_Amostra)\nprint(amostra)\n\namostra = amostra.Voto","4a2db4e5":"calcula_intervalo_proporcao(amostra, Grau_Confianca, \"B\", TamanhoPopulacao)\ninferior,superior = calcula_intervalo_proporcao(amostra, Grau_Confianca, \"B\", TamanhoPopulacao)\n\nprint('Intervalo de confian\u00e7a B {} {}'.format(inferior,superior))\n\nprint('Margem de erro {}'.format((superior-inferior)\/2))","bfd9332b":"calcula_intervalo_proporcao(amostra, Grau_Confianca, \"H\", TamanhoPopulacao)\ninferior,superior = calcula_intervalo_proporcao(amostra, Grau_Confianca, \"H\", TamanhoPopulacao)\n\nprint('Intervalo de confian\u00e7a H {} {}'.format(inferior,superior))\n\nprint('Margem de erro {}'.format((superior-inferior)\/2))","9e9673f8":"calcula_intervalo_proporcao(amostra, Grau_Confianca, \"C\", TamanhoPopulacao)\ninferior,superior = calcula_intervalo_proporcao(amostra, Grau_Confianca, \"C\", TamanhoPopulacao)\n\n\nprint('Intervalo de confian\u00e7a C {} {}'.format(inferior,superior))\n\nprint('Margem de erro {}'.format((superior-inferior)\/2))","b6ba94d4":"## Mantendo a reprodutibilidade dos resultados\n\nAntes da gera\u00e7\u00e3o de n\u00fameros aleat\u00f3rios \u00e9 importante inicializar o gerador de n\u00fameros para que os resultados sejam os mesmos","73f22b2e":"# Dias at\u00e9 atendimento","3625776f":"# C\u00e1lcula tamanho amostra para Dias","05ea3846":"## Fun\u00e7\u00f5es gerais usadas nos exemplos","e7acd298":"# Se tiver informa\u00e7\u00f5es sobre a popula\u00e7\u00e3o, estima vari\u00e2ncia e propor\u00e7\u00f5es","6fe0a429":"## Recupere uma amostra com o tamanho acima","7873b2b7":"## Importa\u00e7\u00e3o de bibliotecas usadas nos exemplos","7b46f383":"# Separa a popula\u00e7\u00e3o em duas sub popula\u00e7\u00f5es: atendidos por cl\u00ednicas p\u00fablicas e privadas","b058d952":"# Procurou outra cl\u00ednica?","3bc1fd47":"## Calcule o intervalo de confi\u00e2n\u00e7a para o candidato 'B'","a3ccc2c6":"# Define margem de erro e grau de confian\u00e7a","3d6a58fc":"<font size=\"6\" color=\"red\">Infer\u00eancia dos par\u00e2metros populacionais com base numa amostra<\/font>","2448f641":"# Divide entre cl\u00ednicas p\u00fablicas e privadas","3a7255e1":"# Resumo","9df51f18":"## C\u00e1lculo intervalo de confian\u00e7a para procurou outra cl\u00ednica","a8410491":"## C\u00e1lculo intervalo de confian\u00e7a para dias","c7ee2d1f":"<font size=\"6\" color=\"red\">Exercicio 4 - AvaliacaoPoliticasPublicas<\/font>\n\nhttps:\/\/www.bbc.com\/portuguese\/brasil-45780864","b3354876":"<font size=\"6\" color=\"red\">Amostra piloto<\/font>","dc621904":"## Defina o tamanho da amostra","9265f2ac":"****Calcule o intervalo de confi\u00e2n\u00e7a para o candidato 'C'","1aab99fb":"<font size=\"6\" color=\"red\">Gera\u00e7\u00e3o de dados simulando toda a popula\u00e7\u00e3o<\/font>","30316085":"# Se n\u00e3o tiver informa\u00e7\u00f5es sobre a popula\u00e7\u00e3o, estima vari\u00e2ncia e propor\u00e7\u00f5es em amostra piloto (m\u00ednimo 30 elementos)","0e363f87":"<font size=\"10\" color=\"black\">Amostragem<\/font>\n\nEduardo Chaves Ferreira","68b7fe21":"# Calcula tamanho da amostra para satisfa\u00e7\u00e3o","3b297c63":"## C\u00e1lculo intervalo de confian\u00e7a para satisfa\u00e7\u00e3o","48885bd7":"## Calcule o intervalo de confi\u00e2n\u00e7a para o candidato 'H'","5c674303":"# Satisfa\u00e7\u00e3o com atendimento","cf53e2fb":"<font size=\"6\" color=\"red\">Fazendo amostra estratificada<\/font>","cce1e665":"# Cria\u00e7\u00e3o da popula\u00e7\u00e3o de eleitores simulada\n\nEleitores divididos em cinco regi\u00f5es.\n\nTr\u00eas candidatos concorrendo.","883dcf84":"# Calcula tamanho amostra para procurou outra cl\u00ednica","a94e0fcf":"# Embaralha registros"}}