{"cell_type":{"5d342d17":"code","d24293fe":"code","13456af4":"code","30894961":"code","215444cf":"code","14fd339f":"code","c61f93bb":"code","64161bb7":"code","8a254056":"code","d25ee0e5":"code","13ee32c3":"code","6ce34e02":"code","57c9be12":"code","f40ef9fc":"code","d5cad403":"code","5deea704":"code","0059fbe0":"code","e69bb4de":"code","65e8099f":"code","fc8cd46f":"code","2ea1a8f8":"code","66a256ca":"code","5462cd0d":"code","5cd71381":"code","753a71d3":"code","f3be1a20":"code","ed4c954c":"code","d0d124f1":"code","feeadf4e":"code","ef5b1d12":"code","e3682f0e":"code","b72cd8f0":"code","d2a1c0fd":"code","563a2760":"code","6f2b5ac9":"code","d47ed6ac":"code","fe323046":"code","a4f64c5c":"code","e341825b":"code","6280baa6":"code","b58f743d":"code","531ca365":"code","b24d1be7":"markdown","c3823c82":"markdown","7bdba403":"markdown","a2bb73d4":"markdown","b5633b1a":"markdown","80507e37":"markdown","7d8c3806":"markdown","c06087c0":"markdown","e56020fb":"markdown","8880e903":"markdown","0a052114":"markdown","78c248c6":"markdown","d18b34f1":"markdown","d434bd80":"markdown","02350d65":"markdown","f6132609":"markdown","e4851eef":"markdown","7bf00372":"markdown","2c57f074":"markdown","fb16806f":"markdown","6e5e1b32":"markdown","00861235":"markdown","009b85d8":"markdown","f056b26a":"markdown","b03d05b9":"markdown","e7e55373":"markdown","071c8fc4":"markdown","a54dd44a":"markdown","8e743896":"markdown","b2de605a":"markdown","bc04ef4d":"markdown","a5399611":"markdown","6dccfc6e":"markdown","5a05c1b6":"markdown","75c3e61e":"markdown","37fada14":"markdown","e8ccdb1a":"markdown","9f0dff2e":"markdown","c6685cfa":"markdown","1ac202b1":"markdown","5f9ebd54":"markdown","8bfc8e5d":"markdown","d912b215":"markdown","b3d15625":"markdown"},"source":{"5d342d17":"import warnings \nwarnings.filterwarnings('ignore')\n\n# basic libraries\nimport os\nimport numpy as np\nimport pandas as pd\nimport re\nimport string\nfrom collections import Counter\nimport time\n\n#visulaization modules\nimport missingno as msno\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\n!pip install pywaffle\nfrom pywaffle import Waffle\n\n%matplotlib inline\ninit_notebook_mode(connected= True)\n\n\n\n\n#Common model helpers\nfrom sklearn.preprocessing import (StandardScaler,\n                                   LabelEncoder,\n                                   OneHotEncoder)\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import (accuracy_score, \n                             auc, \n                             precision_score,\n                             recall_score,\n                             f1_score, \n                             roc_auc_score,\n                             confusion_matrix)\nfrom sklearn.model_selection import (GridSearchCV,\n                                     StratifiedKFold,\n                                     cross_val_score)\n\n\n# dimensionality reduction\nfrom sklearn.decomposition import PCA\nfrom umap import UMAP\nimport pylab as pl\n\n# imbalance dataset handling\n\nfrom imblearn.datasets import make_imbalance\nfrom imblearn.under_sampling import (RandomUnderSampler, \n                                     ClusterCentroids,\n                                     TomekLinks,\n                                     NeighbourhoodCleaningRule,\n                                     EditedNearestNeighbours,\n                                     NearMiss)\n\n\nfrom imblearn.over_sampling import (SMOTE,\n                                    ADASYN)\n\n\n\n\n# model algorithams\nfrom sklearn.ensemble import (RandomForestClassifier, \n                              AdaBoostClassifier, \n                              GradientBoostingClassifier)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n","d24293fe":"# loading data\ndf = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv', delimiter = ',', encoding = 'utf-8')\ndf.head(3).T","13456af4":"df.info()","30894961":"# stats of numerical data\nround (df.describe(exclude = 'object'), 2)\n","215444cf":"# stats of categorical data\nround (df.describe(exclude = ['float', 'int64']),2)","14fd339f":"color = ['grey','grey','grey','grey','grey','grey','grey','grey','grey','grey','grey','#fe346e']\nfig, ax = plt.subplots(figsize = (12,4), dpi = 70)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\n\nmsno.bar(df, sort = 'descending', \n         color = color, \n         ax = ax, fontsize =8,\n         labels = 'off',filter = 'top')\n\nax.text(-1,1.35,'Visualization of Nullity of The Dataset',{'font': 'Serif', 'Size': 24,  'color':'black'},alpha = 0.9)\nax.text(-1,1.2,'Overall there are 5110 datapoints are present in \\nthe given dataset. Only \"bmi\" feature have null values.',{'font': 'Serif', 'Size': 12,  'color':'black'}, alpha = 0.7)\n\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90, \n                   ha = 'center', **{'font': 'Serif', 'Size': 14,'weight':'normal','color':'#512b58'}, alpha = 1)\nax.set_yticklabels('')\nax.spines['bottom'].set_visible(True)\n\nfig.show()","c61f93bb":"# handling missing values\ndf['bmi'] = df['bmi'].fillna(round (df['bmi'].median(), 2))\ndf.isnull().sum()","64161bb7":"## binning of numerical variables\n\ndf['bmi_cat'] = pd.cut(df['bmi'], bins = [0, 19, 25,30,10000], labels = ['Underweight', 'Ideal', 'Overweight', 'Obesity'])\ndf['age_cat'] = pd.cut(df['age'], bins = [0,13,18, 45,60,200], labels = ['Children', 'Teens', 'Adults','Mid Adults','Elderly'])\ndf['glucose_cat'] = pd.cut(df['avg_glucose_level'], bins = [0,90,160,230,500], labels = ['Low', 'Normal', 'High', 'Very High'])\n","8a254056":"# color palette for visualizations\ncolors = ['#f6f5f5','#fe346e','#512b58','#2c003e']\npalette = sns.color_palette( palette = colors)\n\nsns.palplot(palette, size =2.5)\nplt.text(-0.75,-0.75,'Color Palette for this Visualization', {'font':'serif', 'size':25, 'weight':'bold'})\nplt.text(-0.75,-0.64,'Mostly same colors will be used for throughout this notebook.', {'font':'serif', 'size':18, 'weight':'normal'}, alpha = 0.8)\nplt.show()\n\n","d25ee0e5":"x = pd.DataFrame( df.groupby(['stroke'])['stroke'].count())\n\n# plot\nfig, ax = plt.subplots(figsize = (6,6), dpi = 70)\nax.barh([1], x.stroke[1], height = 0.7, color = '#fe346e')\nplt.text(-1150,-0.08, 'Healthy',{'font': 'Serif','weight':'bold','Size': '16','style':'normal', 'color':'#512b58'})\nplt.text(5000,-0.08, '95%',{'font':'Serif','weight':'bold' ,'size':'16','color':'#512b58'})\nax.barh([0], x.stroke[0], height = 0.7, color = '#512b58')\nplt.text(-1000,1, 'Stroke', {'font': 'Serif','weight':'bold','Size': '16','style':'normal', 'color':'#fe346e'})\nplt.text(300,1, '5%',{'font':'Serif', 'weight':'bold','size':'16','color':'#fe346e'})\n\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nplt.text(-1150,1.77, 'Percentage of People Having Strokes' ,{'font': 'Serif', 'Size': '25','weight':'bold', 'color':'black'})\nplt.text(4650,1.65, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nplt.text(5650,1.65, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nplt.text(5750,1.65, 'Healthy', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'})\nplt.text(-1150,1.5, 'It is a highly unbalanced distribution,\\nand clearly seen that 5 in 100 people are susceptible \\nto heart strokes.', \n        {'font':'Serif', 'size':'12.5','color': 'black'})\n\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(True)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\n","13ee32c3":"fig = plt.figure(figsize = (24,10), dpi = 60)\n\ngs = fig.add_gridspec(10,24)\ngs.update(wspace = 1, hspace = 0.05)\n\n\nax2 = fig.add_subplot(gs[1:4,0:8]) #distribution plot\nax3 = fig.add_subplot(gs[6:9, 0:8]) #hue distribution plot\nax1 = fig.add_subplot(gs[1:10,13:]) #dumbbell plot\n\n# axes list\naxes = [ ax1,ax2, ax3]\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f6f5f5')\n    \n    for loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\n\nfig.patch.set_facecolor('#f6f5f5')\n        \nax1.axes.get_xaxis().set_visible(False)\nax1.axes.get_yaxis().set_visible(True)\n\n# dumbbell plot of stoke and healthy people\n\nstroke_age = df[df['stroke'] == 1].age_cat.value_counts()\nhealthy_age = df[df['stroke'] == 0].age_cat.value_counts()\n\nax1.hlines(y = ['Children', 'Teens', 'Adults', 'Mid Adults', 'Elderly'], xmin = [644,270,1691,1129,1127], \n          xmax = [1,1,11,59,177], color = 'grey',**{'linewidth':0.5})\n\n\nsns.scatterplot(y = stroke_age.index, x = stroke_age.values, s = stroke_age.values*2, color = '#fe346e', ax= ax1, alpha = 1)\nsns.scatterplot(y = healthy_age.index, x = healthy_age.values, s = healthy_age.values*2, color = '#512b58', ax= ax1, alpha = 1)\n\nax1.axes.get_xaxis().set_visible(False)\nax1.set_xlim(xmin = -500, xmax = 2250)\nax1.set_ylim(ymin = -1,ymax = 5)\n\nax1.set_yticklabels( labels = ['Children', 'Teens', 'Adults', 'Mid Adults', 'Elderly'],fontdict = {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\n\nax1.text(-950,5.8, 'How Age Impact on Having Strokes?' ,{'font': 'Serif', 'Size': '25','weight':'bold', 'color':'black'},alpha = 0.9)\nax1.text(1000,4.8, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nax1.text(1300,4.8, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nax1.text(1350,4.8, 'Healthy', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'})\nax1.text(-950,5., 'Age have significant impact on strokes, and clearly seen that strokes are \\nhighest for elderly people and mid age adults, \\nwhere as negligible for younger people.', \n        {'font':'Serif', 'size':'16','color': 'black'})\n\nax1.text(stroke_age.values[0] + 30,4.05, stroke_age.values[0], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#fe346e'})\nax1.text(healthy_age.values[2] - 300,4.05, healthy_age.values[2], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#512b58'})\n\nax1.text(stroke_age.values[1] + 30,3.05, stroke_age.values[1], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#fe346e'})\nax1.text(healthy_age.values[1] - 300,3.05, healthy_age.values[1], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#512b58'})\n\n\n\n\n# distribution plots ---- only single variable\n\nsns.kdeplot(data = df, x = 'age', ax = ax2, shade = True, color = '#2c003e', alpha = 1, )\nax2.set_xlabel('Age of a person', fontdict = {'font':'Serif', 'color': 'black', 'size': 16,'weight':'bold' })\nax2.text(-17,0.025,'Overall Age Distribution - How skewed is it?', {'font':'Serif', 'color': 'black','weight':'bold','size':24}, alpha = 0.9)\nax2.text(-17,0.021, 'Based on Age we have data from infants to elderly people.\\nAdult population is the median group.', \n        {'font':'Serif', 'size':'16','color': 'black'})\nax2.text(80,0.019, 'Total',{'font':'Serif', 'size':'14','color': '#2c003e','weight':'bold'})\nax2.text(92,0.019, '=',{'font':'Serif', 'size':'14','color': 'black','weight':'bold'})\nax2.text(97,0.019, 'Stroke',{'font':'Serif', 'size':'14','color': '#fe346e','weight':'bold'})\nax2.text(113,0.019, '+',{'font':'Serif', 'size':'14','color': 'black','weight':'bold'})\nax2.text(117,0.019, 'Healthy',{'font':'Serif', 'size':'14','color': '#512b58','weight':'bold'})\n\n\n\n# distribution plots with hue of strokes\n\n\nsns.kdeplot(data = df[df['stroke'] == 0], x = 'age',ax = ax3, shade = True,  alpha = 1, color = '#512b58' )\nsns.kdeplot(data = df[df['stroke'] == 1], x = 'age',ax = ax3, shade = True,  alpha = 0.8, color = '#fe346e')\n\nax3.set_xlabel('Age of a person', fontdict = {'font':'Serif', 'color': 'black', 'weight':'bold','size': 16})\n\nax3.text(-17,0.0525,'Age-Stroke Distribution - How serious is it?', {'font':'Serif', 'weight':'bold','color': 'black', 'size':24}, alpha= 0.9)\nax3.text(-17,0.043,'From stoke Distribution it is clear that aged people are \\nhaving significant number of strokes.', {'font':'Serif', 'color': 'black', 'size':14})\nax3.text(100,0.043, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nax3.text(117,0.043, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nax3.text(120,0.043, 'Healthy', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'})\n\nfig.text(0.25,1,'Story of an Aged Heart - Heart Strokes and Age',{'font':'Serif', 'weight':'bold','color': 'black', 'size':35})\nfig.show()\n","6ce34e02":"# sugar distribution plots\n\n\nfig = plt.figure(figsize = (24,10), dpi = 60)\n\ngs = fig.add_gridspec(10,24)\ngs.update(wspace = 1, hspace = 0.05)\n\n\nax2 = fig.add_subplot(gs[0:3,0:10]) #distribution plot\nax3 = fig.add_subplot(gs[5:10, 0:10]) #hue distribution plot\nax1 = fig.add_subplot(gs[0:,13:]) #dumbbell plot\n\n# axes list\naxes = [ ax1,ax2, ax3]\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f6f5f5')\n    \n    for loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\n\nfig.patch.set_facecolor('#f6f5f5')\n        \nax1.axes.get_xaxis().set_visible(False)\nax1.axes.get_yaxis().set_visible(True)\n\n# dumbbell plot of stoke and healthy people\n\nstroke_glu = df[df['stroke'] == 1].glucose_cat.value_counts()\nhealthy_glu = df[df['stroke'] == 0].glucose_cat.value_counts()\n\nax1.hlines(y = ['Low', 'Normal', 'High', 'Very High'], xmin = [2316,1966,478,101], \n          xmax = [89,71,71,18], color = 'grey',**{'linewidth':0.5})\n\n\nsns.scatterplot(y = stroke_glu.index, x = stroke_glu.values, s = stroke_glu.values, color = '#fe346e', ax= ax1, alpha = 1)\nsns.scatterplot(y = healthy_glu.index, x = healthy_glu.values, s = healthy_glu.values, color = '#512b58', ax= ax1, alpha = 1)\n\nax1.axes.get_xaxis().set_visible(False)\nax1.set_xlim(xmin = -500, xmax = 3000)\nax1.set_ylim(ymin = -1.5,ymax = 4.5)\n\nax1.set_yticklabels( labels = ['Low', 'Normal', 'High', 'Very High'],fontdict = {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\n\nax1.text(-1000,4.3, 'How Glucose level Impact on Having Strokes?' ,{'font': 'Serif', 'Size': '25','weight':'bold', 'color':'black'})\nax1.text(1700,3.5, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nax1.text(2050,3.5, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nax1.text(2075,3.5, 'Healthy', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'})\nax1.text(-1000,3.8, 'Glucose does not have significant impact on strokes,\\n and its unclear strokes are which group effected by strokes.', \n        {'font':'Serif', 'size':'16','color': 'black'})\n\nax1.text(stroke_glu.values[0] + 30,0.05, stroke_glu.values[0], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#fe346e'})\nax1.text(healthy_glu.values[0] + -355,0.05, healthy_glu.values[0], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#512b58'})\n\nax1.text(stroke_glu.values[2] + 30,1.05, stroke_glu.values[2], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#fe346e'})\nax1.text(healthy_glu.values[2] + 1170,1.05, healthy_glu.values[2], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#512b58'})\n\nax1.text(stroke_glu.values[1] + 30,2.05, stroke_glu.values[1], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#fe346e'})\nax1.text(healthy_glu.values[1] - 1450,2.05, healthy_glu.values[1], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#512b58'})\n\n\n\n# distribution plots ---- only single variable\n\nsns.kdeplot(data = df, x = 'avg_glucose_level', ax = ax2, shade = True, color = '#2c003e', alpha = 1, )\nax2.set_xlabel('Average Glucose Level', fontdict = {'font':'Serif', 'color': 'black', 'size': 16,'weight':'bold' })\nax2.text(25,0.025,'Overall Glucose Distribution - How skewed is it?', {'font':'Serif', 'color': 'black','weight':'bold','size':24})\nax2.text(25,0.021, 'Average glucose levels shows that most of the people have \\ncontroled glucose levels.', \n        {'font':'Serif', 'size':'16','color': 'black'})\nax2.text(210,0.020, 'Total',{'font':'Serif', 'size':'14','color': '#2c003e','weight':'bold'})\nax2.text(240,0.02, '=',{'font':'Serif', 'size':'14','color': 'black','weight':'bold'})\nax2.text(250,0.02, 'Stroke',{'font':'Serif', 'size':'14','color': '#fe346e','weight':'bold'})\nax2.text(280,0.02, '+',{'font':'Serif', 'size':'14','color': 'black','weight':'bold'})\nax2.text(290,0.02, 'Healthy',{'font':'Serif', 'size':'14','color': '#512b58','weight':'bold'})\n\n\n\n# distribution plots with hue of strokes\n\n\nsns.kdeplot(data = df[df['stroke'] == 0], x = 'avg_glucose_level',ax = ax3, shade = True,  alpha = 1, color = '#512b58' )\nsns.kdeplot(data = df[df['stroke'] == 1], x = 'avg_glucose_level',ax = ax3, shade = True,  alpha = 0.8, color = '#fe346e')\n\nax3.set_xlabel('Average Glucose Level', fontdict = {'font':'Serif', 'color': 'black', 'weight':'bold','size': 16})\n\nax3.text(-17,0.0195,'Glucose-Stroke Distribution - How serious is it?', {'font':'Serif', 'weight':'bold','color': 'black', 'size':24})\nax3.text(-17,0.0176,'It is not clear which group of people \\neffected by glucose levels.', {'font':'Serif', 'color': 'black', 'size':14})\nax3.text(240,0.0174, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nax3.text(290,0.0174, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nax3.text(300,0.0174, 'Healthy', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'})\n\n\nfig.text(0.2,1.07,'Story of a Sweet Heart - Heart Strokes and Glucose',{'font':'Serif', 'weight':'bold','color': 'black', 'size':35})\n\nfig.show()\n","57c9be12":"fig = plt.figure(figsize = (24,10),dpi = 60)\n\ngs = fig.add_gridspec(10,24)\ngs.update(wspace = 1, hspace = 0.05)\n\n\nax2 = fig.add_subplot(gs[1:4,0:8]) #distribution plot\nax3 = fig.add_subplot(gs[6:9, 0:8]) #hue distribution plot\nax1 = fig.add_subplot(gs[2:9,13:]) #dumbbell plot\n\n# axes list\naxes = [ ax1,ax2, ax3]\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f6f5f5')\n    \n    for loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\n\nfig.patch.set_facecolor('#f6f5f5')\n        \nax1.axes.get_xaxis().set_visible(False)\nax1.axes.get_yaxis().set_visible(True)\nax1.set_xlim(xmin = -250,xmax = 2000)\nax1.set_ylim(ymin = -1,ymax =3.5)\n\n# dumbbell plot of stoke and healthy people\n\nstroke_bmi = df[df['stroke'] == 1].bmi_cat.value_counts()\nhealthy_bmi = df[df['stroke'] == 0].bmi_cat.value_counts()\n\nax1.hlines(y = ['Obesity', 'Overweight', 'Ideal', 'Underweight'], xmin = [96,115,37,1], \n          xmax = [1797,1495,1159,410], color = 'grey',**{'linewidth':0.5})\n\n\nsns.scatterplot(y = stroke_bmi.index, x = stroke_bmi.values, s = stroke_bmi.values*2, color = '#fe346e', ax= ax1, alpha = 1)\nsns.scatterplot(y = healthy_bmi.index, x = healthy_bmi.values, s = healthy_bmi.values*2, color = '#512b58', ax= ax1, alpha = 1)\n\nax1.set_yticklabels( labels = ['Obesity', 'Overweight', 'Ideal', 'Underweight'],fontdict = {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\n\nax1.text(-750,-1.5, 'How BMI Impact on Having Strokes?' ,{'font': 'Serif', 'Size': '25','weight':'bold', 'color':'black'})\nax1.text(1000,-1., 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nax1.text(1250,-1, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nax1.text(1300,-1, 'Healthy', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'})\nax1.text(-750,-0.8, 'High BMI shows signs of possible strokes, and clearly seen that strokes are \\nhighest for overweight and obese people, \\nwhere as negligible for younger people.', \n        {'font':'Serif', 'size':'16','color': 'black'})\n\n\n\nax1.text(stroke_bmi.values[0] + 20 , 0.98, stroke_bmi.values[0], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#fe346e'})\nax1.text(healthy_bmi.values[1] - 275 ,0.98, healthy_bmi.values[1], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#512b58'})\n\nax1.text(stroke_bmi.values[1] + 30,0, stroke_bmi.values[1], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#fe346e'})\nax1.text(healthy_bmi.values[0] - 300,0, healthy_bmi.values[0], {'font':'Serif', 'Size':14, 'weight':'bold', 'color':'#512b58'})\n\n\n\n\n# distribution plots ---- only single variable\n\nsns.kdeplot(data = df, x = 'bmi', ax = ax2, shade = True, color = '#2c003e', alpha = 1, )\nax2.set_xlabel('Body mass index of a person', fontdict = {'font':'Serif', 'color': 'black', 'size': 16,'weight':'bold' })\nax2.text(-17,0.085,'Overall BMI Distribution - How skewed is it?', {'font':'Serif', 'color': 'black','weight':'bold','size':24})\nax2.text(-17,0.075, 'BMI is highly skewed towards left side, and averages bmi is around 30.', \n        {'font':'Serif', 'size':'16','color': 'black'})\nax2.text(80,0.06, 'Total',{'font':'Serif', 'size':'14','color': '#2c003e','weight':'bold'})\nax2.text(92,0.06, '=',{'font':'Serif', 'size':'14','color': 'black','weight':'bold'})\nax2.text(97,0.06, 'Stroke',{'font':'Serif', 'size':'14','color': '#fe346e','weight':'bold'})\nax2.text(113,0.06, '+',{'font':'Serif', 'size':'14','color': 'black','weight':'bold'})\nax2.text(117,0.06, 'Healthy',{'font':'Serif', 'size':'14','color': '#512b58','weight':'bold'})\n\n\n# distribution plots with hue of strokes\n\n\nsns.kdeplot(data = df[df['stroke'] == 0], x = 'bmi',ax = ax3, shade = True,  alpha = 1, color = '#512b58' )\nsns.kdeplot(data = df[df['stroke'] == 1], x = 'bmi',ax = ax3, shade = True,  alpha = 0.8, color = '#fe346e')\n\nax3.set_xlabel('Body mass index of a person', fontdict = {'font':'Serif', 'color': 'black', 'weight':'bold','size': 16})\n\nax3.text(-15,0.12,'BMI-Stroke Distribution - How serious is it?', {'font':'Serif', 'weight':'bold','color': 'black', 'size':24})\nax3.text(-15,0.11,'Higher BMI higher chance of stroke.', {'font':'Serif', 'color': 'black', 'size':16})\nax3.text(80,0.095, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nax3.text(95,0.095, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nax3.text(97,0.095, 'Healthy', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'})\n\nfig.text(0.25,0.925,'Story of a Heavy Heart - Heart Strokes and Weight',{'font':'Serif', 'weight':'bold','color': 'black', 'size':35})\n\nfig.show()\n\n","f40ef9fc":"fig = plt.figure(figsize = (15,15),dpi = 40)\n\ngs = fig.add_gridspec(3,3)\ngs.update(wspace = 0.2, hspace = 0.5)\n\n\nax1 = fig.add_subplot(gs[0,0])\nax2 = fig.add_subplot(gs[0,1:])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\nax6 = fig.add_subplot(gs[2,0:2])\nax7 = fig.add_subplot(gs[2,2])\n\naxes = [ax1, ax2, ax3, ax4, ax5, ax6, ax7]\n\nfig.patch.set_facecolor('#f5f5f5')\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f8f8f8')\n    ax.spines['bottom'].set_linewidth(2)\n    for loc in ['left', 'right', 'top']:\n        ax.spines[loc].set_visible(False)\n        ax.spines[loc].set_linewidth(2)\n\n\ntitle_args = {'font':'Serif', 'weight':'bold','color': 'black', 'size':24}\nfont_dict = {'size':16, 'family':'Serif', 'color':'black', 'weight':'bold'}\nhealth_dict = {'font':'Serif', 'color': '#2c003e', 'size':15, 'weight':'bold'}\ndash_dict = {'font':'Serif', 'color': 'black', 'size':15,'weight':'bold'}\nstroke_dict = {'font':'Serif', 'color': '#fe346e', 'size':15,'weight':'bold'}\n\nstroke_col = '#fe346e'\nhealthy_col = '#2c003e'\n\n# Ax1: Gender- stroke distributions\nhealthy_gen = df[df['stroke'] == 0].gender.value_counts()\nstroke_gen = df[df['stroke'] == 1].gender.value_counts()\n\nax1.barh( stroke_gen.index , width = healthy_gen.values[0:2], height = 0.2, color = healthy_col)\nax1.barh( np.arange(len(stroke_gen.index)) , width = stroke_gen.values, height = 0.5, color = stroke_col)\nax1.set_yticklabels(stroke_gen.index, **font_dict)\n\nax1.axes.get_yaxis().set_visible(True)\nax1.axes.get_xaxis().set_visible(False)\nax1.spines['bottom'].set_visible(False)\nax1.spines['left'].set_visible(True)\nax1.text(0,1.5, 'Gender Risk',**title_args)\nax1.text(0,1.35, 'Healthy',**health_dict)\nax1.text(790,1.35, '|',**dash_dict)\nax1.text(870,1.35, 'Stroke',**stroke_dict)\n\n# Ax2: work type - stroke distributions\nhealthy_gen = df[df['stroke'] == 0].work_type.value_counts()\nstroke_gen = df[df['stroke'] == 1].work_type.value_counts()\n\nax2.bar( healthy_gen.index , height = healthy_gen.values, width = 0.2, color = healthy_col)\nax2.bar( np.arange(len(stroke_gen.index)) , height = stroke_gen.values, width = 0.5, color= stroke_col)\nax2.set_xticklabels(['Private','Self-Employed','Children', 'Gov-Job','Never worked'], **font_dict)\n\n\nax2.text(-0.45,3200, 'Employment Risk',**title_args)\nax2.text(-0.45,2950, 'Healthy',**health_dict)\nax2.text(0.18,2950, '|',**dash_dict)\nax2.text(0.25,2950, 'Stroke',**stroke_dict)\n\n# Ax3: hypertension - stroke distributions\n\nhealthy_gen = df[df['stroke'] == 0].hypertension.value_counts()\nstroke_gen = df[df['stroke'] == 1].hypertension.value_counts()\n\nax3.bar(['Yes','No'] , height = healthy_gen.values, width = 0.2,color = healthy_col)\nax3.bar( stroke_gen.index, height = stroke_gen.values, width = 0.5,color= stroke_col)\nax3.set_xticklabels(['Yes','No'], **font_dict)\n\nax3.text(-0.3,5000, 'Hypertension Risk',**title_args)\nax3.text(-0.3,4700, 'Healthy',**health_dict)\nax3.text(0.14,4700, '|',**dash_dict)\nax3.text(0.18,4700, 'Stroke',**stroke_dict)\n\n\n# Ax4: Heart Disease - stroke distributions\n\nhealthy_gen = df[df['stroke'] == 0].heart_disease.value_counts()\nstroke_gen = df[df['stroke'] == 1].heart_disease.value_counts()\n\nax4.bar(['Yes','No'] , height = healthy_gen.values, width = 0.2,color = healthy_col)\nax4.bar( stroke_gen.index, height = stroke_gen.values, width = 0.5,color= stroke_col)\nax4.set_xticklabels(['Yes', 'No'],**font_dict)\n\nax4.text(-0.3,5250, 'Heart Disease Risk',**title_args)\nax4.text(-0.3,4950, 'Healthy',**health_dict)\nax4.text(0.15,4950, '|',**dash_dict)\nax4.text(0.20,4950, 'Stroke',**stroke_dict)\n\n\n# Ax5: Married - stroke distributions\nhealthy_gen = df[df['stroke'] == 0].ever_married.value_counts()\nstroke_gen = df[df['stroke'] == 1].ever_married.value_counts()\n\nax5.bar( healthy_gen.index , height = healthy_gen.values, width = 0.2,color = healthy_col)\nax5.bar( np.arange(len(stroke_gen.index)) , height = stroke_gen.values, width = 0.5,color= stroke_col )\nax5.set_xticklabels(healthy_gen.index, **font_dict)\n\nax5.text(-0.3,3500, 'Marrital Status And Risk',**title_args)\nax5.text(-0.3,3300, 'Healthy',**health_dict)\nax5.text(0.14,3300, '|',**dash_dict)\nax5.text(0.18,3300, 'Stroke',**stroke_dict)\n\n\n\n\n# Ax6: Smoking status - stroke distributions\n\nhealthy_gen = df[df['stroke'] == 0].smoking_status.value_counts()\nstroke_gen = df[df['stroke'] == 1].smoking_status.value_counts()\n\nax6.bar( healthy_gen.index, height = healthy_gen.values, width = 0.2,color = healthy_col)\nax6.bar( np.arange(len(stroke_gen.index)) , height = stroke_gen.values, width = 0.5,color= stroke_col)\nax6.set_xticklabels(['Never Smoked', 'Unknown','Formaly Smoked' ,'Smokes'], **font_dict)\n\nax6.text(-0.4,2050, 'Smoking Status And Risk',**title_args)\nax6.text(-0.4,1900, 'Healthy',**health_dict)\nax6.text(0.095,1900, '|',**dash_dict)\nax6.text(0.18,1900, 'Stroke',**stroke_dict)\n\n\n\n\n# Ax7: Residence type - stroke distributions\n\nhealthy_gen = df[df['stroke'] == 0].Residence_type.value_counts()\nstroke_gen = df[df['stroke'] == 1].Residence_type.value_counts()\n\nax7.bar( healthy_gen.index , height = healthy_gen.values, width = 0.2,color = healthy_col)\nax7.bar( np.arange(len(stroke_gen.index)) , height = stroke_gen.values, width = 0.5,color= stroke_col)\nax7.set_xticklabels(healthy_gen.index, **font_dict)\n\nax7.text(-0.31,2800, 'Residence Type And Risk',**title_args)\nax7.text(-0.31,2600, 'Healthy',**health_dict)\nax7.text(0.12,2600,'|',**dash_dict)\nax7.text(0.165,2600, 'Stroke',**stroke_dict)\n\nfig.text(0.05,1.025, 'Overview of Univariate Categorical Features - Stroke vs Healthy', {'font':'Serif', 'color':'black','size':30, 'weight':'bold'})\nfig.text(0.05,0.9375,'Data could be deceiving sometimes. All the plots show that\\ncertain features have more strokes than others, There by importance, \\nBut is it true though? \\ncounting targets ignore big picture.',{'font':'Serif', 'color':'black','size':20, 'weight':'normal'}, alpha = 0.8)\n\nfig.show()","d5cad403":"stroke_gen = df[df['stroke'] == 1]['gender'].value_counts()\nhealthy_gen = df[df['stroke'] == 0]['gender'].value_counts()\n\nfemale = df['gender'].value_counts().values[0]\nmale =  df['gender'].value_counts().values[1]\n\nstroke_female = int(round (stroke_gen.values[0] \/ female * 100, 0))\nstroke_male = int(round( stroke_gen.values[1] \/ male *100, 0))\nhealthy_female = int(round(healthy_gen.values[0] \/ female * 100, 0))\nhealthy_male = int(round(healthy_gen.values[1] \/ male *100, 0))\n\nfemale_per = int(round(female\/(female+male) * 100, 0))\nmale_per = int(round(male\/(female+male)* 100, 0))\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f6f5f5',dpi = 100,\n                 \n                 plots = {'121':\n                          {     \n                           'rows':7,\n                           'columns': 7,\n                           'values' : [healthy_male,stroke_male],\n                            'colors' : ['#512b58','#fe346e'],\n                              'vertical' : True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'male',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                          },\n                          \n                          '122' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[healthy_female,stroke_female],         \n                              'colors' : ['#512b58','#fe346e'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'female',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           }\n                         },\n                   \n)\n#fig.text ('asdfasdfasd0', {'font':'Serif', 'size':35, 'color':'black'} )\n\n\nfig.text(0., 0.8, 'Gender Risk for Stroke - effect of gender on strokes?', {'font':'Serif', 'size':20, 'color':'black', 'weight':'bold'})\nfig.text(0., 0.73, 'Risk of stroke in both male and female are same,\\nprove our initial assumption is wrong. ', {'font':'Serif', 'size':13, 'color':'black', 'weight':'normal'}, alpha = 0.7)\nfig.text(0.24, 0.22, 'ooo', {'font':'Serif', 'size':16,'weight':'bold' ,'color':'#f6f5f5'})\nfig.text(0.65, 0.22, 'ooo', {'font':'Serif', 'size':16,'weight':'bold', 'color':'#f6f5f5'})\nfig.text(0.23, 0.28, '{}%'.format(healthy_male), {'font':'Serif', 'size':20,'weight':'bold' ,'color':'#512b58'},alpha = 1,)\nfig.text(0.65, 0.28, '{}%'.format(healthy_female), {'font':'Serif', 'size':20,'weight':'bold', 'color':'#512b58'}, alpha = 1)\nfig.text(0.21, 0.67, 'Male ({}%)'.format(male_per), {'font':'Serif', 'size':14,'weight':'bold' ,'color':'black'},alpha = 0.5,)\nfig.text(0.61, 0.67, 'Female({}%)'.format(female_per), {'font':'Serif', 'size':14,'weight':'bold', 'color':'black'}, alpha = 0.5)\n#fig.text(0., 0.8, 'Assumption was proven wrong', {'font':'Serif', 'size':24, 'color':'black', 'weight':'bold'})\n\nfig.text(0.9,0.73, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nfig.text(1.02,0.73, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nfig.text(1.035,0.73, 'No Stroke', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'},alpha = 1)\n\n\nfig.show()","5deea704":"stroke_hyper = df[df['stroke'] == 1]['hypertension'].value_counts()\nhealthy_hyper = df[df['stroke'] == 0]['hypertension'].value_counts()\n\nno = df['hypertension'].value_counts().values[0]\nyes =  df['hypertension'].value_counts().values[1]\n\nstroke_no = int(round (stroke_hyper.values[0] \/ no * 100, 0))\nstroke_yes = int(round( stroke_hyper.values[1] \/ yes *100, 0))\nhealthy_no = int(round(healthy_hyper.values[0] \/ no * 100, 0))\nhealthy_yes = int(round(healthy_hyper.values[1] \/ yes *100, 0))\n\nno_per = int(round(no\/(no+yes) * 100, 0))\nyes_per = int(round(yes\/(no+yes)* 100, 0))\n\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f6f5f5',dpi = 100,\n                 \n                 plots = {'121':\n                          {     \n                           'rows':7,\n                           'columns': 7,\n                           'values' : [stroke_yes,healthy_yes],\n                            'colors' : ['#fe346e','#512b58'],\n                              'vertical' : True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y': 0.005,\n                              'icons' : 'heartbeat',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':1,\n                              'starting_location': 'NE'\n                          },\n                          \n                          '122' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[stroke_no,healthy_no],         \n                              'colors' : ['#fe346e','#512b58'],\n                              'vertical': True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y':0.005,\n                              'icons' : 'heartbeat',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':1,\n                              'starting_location': 'NE'\n                                                      \n                           }\n                         },\n                   \n)\n\n\nfig.text(0., 0.85, 'Hypertension Risk for Stroke- effect of blood pressure?', {'font':'Serif', 'size':20, 'color':'black', 'weight':'bold'})\nfig.text(0., 0.75, 'Risk of stroke for people with hypertension is comparetively high,\\nnearly 9% more people are having strokes \\nwhen they have hypertension. ', {'font':'Serif', 'size':13, 'color':'black', 'weight':'normal'},alpha = 0.8)\nfig.text(0.24, 0.22, 'ooo', {'font':'Serif', 'size':16,'weight':'bold' ,'color':'#f6f5f5'})\nfig.text(0.65, 0.22, 'ooo', {'font':'Serif', 'size':16,'weight':'bold', 'color':'#f6f5f5'})\nfig.text(0.23, 0.28, '{}%'.format(healthy_yes), {'font':'Serif', 'size':20,'weight':'bold' ,'color':'#512b58'},alpha = 1,)\nfig.text(0.63, 0.28, '{}%'.format(healthy_no), {'font':'Serif', 'size':20,'weight':'bold', 'color':'#512b58'}, alpha = 1)\nfig.text(0.1, 0.68, 'Have Hypertension ({}%)'.format(yes_per), {'font':'Serif', 'size':14,'weight':'bold' ,'color':'black'},alpha = 0.7,)\nfig.text(0.55, 0.68, \"Don't have Hypertension({}%)\".format(no_per), {'font':'Serif', 'size':14,'weight':'bold', 'color':'black'}, alpha = 0.7)\n#fig.text(0., 0.8, 'Assumption was proven wrong', {'font':'Serif', 'size':24, 'color':'black', 'weight':'bold'})\n\nfig.text(0.90,0.75, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nfig.text(1.02,0.75, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nfig.text(1.04,0.75, 'No Stroke', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'},alpha = 1)\n\n\nfig.show()","0059fbe0":"stroke_hyper = df[df['stroke'] == 1]['heart_disease'].value_counts()\nhealthy_hyper = df[df['stroke'] == 0]['heart_disease'].value_counts()\n\nno = df['heart_disease'].value_counts().values[0]\nyes =  df['heart_disease'].value_counts().values[1]\n\nstroke_no = int(round (stroke_hyper.values[0] \/ no * 100, 0))\nstroke_yes = int(round( stroke_hyper.values[1] \/ yes *100, 0))\nhealthy_no = int(round(healthy_hyper.values[0] \/ no * 100, 0))\nhealthy_yes = int(round(healthy_hyper.values[1] \/ yes *100, 0))\n\nno_per = int(round(no\/(no+yes) * 100, 0))\nyes_per = int(round(yes\/(no+yes)* 100, 0))\n\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f6f5f5',dpi = 100,\n                 \n                 plots = {'121':\n                          {     \n                           'rows':7,\n                           'columns': 7,\n                           'values' : [stroke_yes,healthy_yes],\n                            'colors' : ['#fe346e','#512b58'],\n                              'vertical' : True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y': 0.005,\n                              'icons' : 'heart',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                          },\n                          \n                          '122' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[stroke_no,healthy_no],         \n                              'colors' : ['#fe346e','#512b58'],\n                              'vertical': True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y':0.005,\n                              'icons' : 'heart',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                                                      \n                           }\n                         },\n                   \n)\n\n\nfig.text(0., 0.85, 'Heart disease Risk for Stroke- effect of Heart condition?', {'font':'Serif', 'size':20, 'color':'black', 'weight':'bold'})\nfig.text(0., 0.75, 'Risk of stroke for people with heart condition is significant,\\nnearly 12% of people are having strokes \\nwhen they have heart condition previously. ', {'font':'Serif', 'size':13, 'color':'black', 'weight':'normal'}, alpha = 0.8)\nfig.text(0.24, 0.22, 'ooo', {'font':'Serif', 'size':16,'weight':'bold' ,'color':'#f6f5f5'})\nfig.text(0.65, 0.22, 'ooo', {'font':'Serif', 'size':16,'weight':'bold', 'color':'#f6f5f5'})\nfig.text(0.25, 0.27, '{}%'.format(healthy_yes), {'font':'Serif', 'size':20,'weight':'bold' ,'color':'#2c003e'},alpha = 1,)\nfig.text(0.65, 0.27, '{}%'.format(healthy_no), {'font':'Serif', 'size':20,'weight':'bold', 'color':'#2c003e'}, alpha = 1)\nfig.text(0.12, 0.68, 'UnHealthy Heart ({}%)'.format(yes_per), {'font':'Serif', 'size':16,'weight':'bold' ,'color':'black'},alpha = 0.5,)\nfig.text(0.55, 0.68, \"Healthy Heart({}%)\".format(no_per), {'font':'Serif', 'size':16,'weight':'bold', 'color':'black'}, alpha = 0.5)\n#fig.text(0., 0.8, 'Assumption was proven wrong', {'font':'Serif', 'size':24, 'color':'black', 'weight':'bold'})\n\nfig.text(0.9,0.75, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nfig.text(1.02,0.75, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nfig.text(1.04,0.75, 'No Stroke', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'},alpha = 1)\n\n\nfig.show()","e69bb4de":"stroke_mary = df[df['stroke'] == 1]['ever_married'].value_counts()\nhealthy_mary = df[df['stroke'] == 0]['ever_married'].value_counts()\n\nyes = df['ever_married'].value_counts().values[0]\nno =  df['ever_married'].value_counts().values[1]\n\nstroke_no = int(round (stroke_mary.values[1] \/ no * 100, 0))\nstroke_yes = int(round( stroke_mary.values[0] \/ yes *100, 0))\nhealthy_no = int(round(healthy_mary.values[1] \/ no * 100, 0))\nhealthy_yes = int(round(healthy_mary.values[0] \/ yes *100, 0))\n\nno_per = int(round(no\/(no+yes) * 100, 0))\nyes_per = int(round(yes\/(no+yes)* 100, 0))\n\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f6f5f5',dpi = 100,\n                 \n                 plots = {'121':\n                          {     \n                           'rows':7,\n                           'columns': 7,\n                           'values' : [stroke_yes,healthy_yes],\n                            'colors' : ['#fe346e','#512b58'],\n                              'vertical' : True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y': 0.005,\n                              'icons' : 'ring',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                          },\n                          \n                          '122' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[stroke_no,healthy_no],         \n                              'colors' : ['#fe346e','#512b58'],\n                              'vertical': True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y':0.005,\n                              'icons' : 'universal-access',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                                                      \n                           }\n                         },\n                   \n)\n\n\nfig.text(0., 0.8, 'Marriage and stroke- effects of marriage on heart?', {'font':'Serif', 'size':20, 'color':'black', 'weight':'bold'})\nfig.text(0., 0.74, 'Risk of stroke in married people is relatively,\\nhigh and its only in margin of 5%.', {'font':'Serif', 'size':13, 'color':'black', 'weight':'normal'}, alpha = 0.8)\nfig.text(0.24, 0.22, 'ooo', {'font':'Serif', 'size':16,'weight':'bold' ,'color':'#f6f5f5'})\nfig.text(0.65, 0.22, 'ooo', {'font':'Serif', 'size':16,'weight':'bold', 'color':'#f6f5f5'})\nfig.text(0.25, 0.28, '{}%'.format(healthy_yes), {'font':'Serif', 'size':20,'weight':'bold' , 'color':'#2c003e'}, alpha = 1,)\nfig.text(0.65, 0.28, '{}%'.format(healthy_no), {'font':'Serif', 'size':20,'weight':'bold', 'color':'#2c003e'}, alpha = 1)\nfig.text(0.20, 0.68, 'Married({}%)'.format(yes_per), {'font':'Serif', 'size':16,'weight':'bold' ,'color':'black'},alpha = 0.5,)\nfig.text(0.58, 0.68, \"Unmarried({}%)\".format(no_per), {'font':'Serif', 'size':16,'weight':'bold', 'color':'black'}, alpha = 0.5)\n#fig.text(0., 0.8, 'Assumption was proven wrong', {'font':'Serif', 'size':24, 'color':'black', 'weight':'bold'})\n\nfig.text(0.9,0.72, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nfig.text(1.02,0.72, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nfig.text(1.04,0.72, 'No Stroke', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'},alpha = 1)\n\n\nfig.show()","65e8099f":"stroke_home = df[df['stroke'] == 1]['Residence_type'].value_counts()\nhealthy_home= df[df['stroke'] == 0]['Residence_type'].value_counts()\n\nurban = df['Residence_type'].value_counts().values[0]\nrural =  df['Residence_type'].value_counts().values[1]\n\nstroke_urban = int(round (stroke_home.values[0] \/ urban * 100, 0))\nstroke_rural= int(round( stroke_home.values[1] \/ rural *100, 0))\nhealthy_urban = int(round(healthy_home.values[0] \/ urban * 100, 0))\nhealthy_rural = int(round(healthy_home.values[1] \/ rural *100, 0))\n\nurban_per = int(round(urban\/(urban+rural) * 100, 0))\nrural_per = int(round(rural\/(urban+rural)* 100, 0))\n\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f6f5f5',dpi = 100,\n                 \n                 plots = {'121':\n                          {     \n                           'rows':7,\n                           'columns': 7,\n                           'values' : [stroke_urban,healthy_urban],\n                            'colors' : ['#fe346e','#512b58'],\n                              'vertical' : True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y': 0.005,\n                              'icons' : 'city',\n                              'icon_legend': False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                          },\n                          \n                          '122' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[stroke_rural,healthy_rural],         \n                              'colors' : ['#fe346e','#512b58'],\n                              'vertical': True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y':0.005,\n                              'icons' : 'home',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                                                      \n                           }\n                         },\n                   \n)\n\n\nfig.text(0., 0.85, 'Lifestyle and Storkes- effect of residence location on strokes?', {'font':'Serif', 'size':20, 'color':'black', 'weight':'bold'})\nfig.text(0., 0.79, 'Location of home does not have much of the effect on heart strokes of individuals.\\nBoth rural and urban people have similar possibilities of Strokes.', {'font':'Serif', 'size':13, 'color':'black', 'weight':'normal'}, alpha =0.8)\n\nfig.text(0.23, 0.28, '{}%'.format(healthy_urban), {'font':'Serif', 'size':20,'weight':'bold' ,'color':'#2c003e'},alpha = 1,)\nfig.text(0.68, 0.28, '{}%'.format(healthy_rural), {'font':'Serif', 'size':20,'weight':'bold', 'color':'#2c003e'}, alpha = 1)\nfig.text(0.13, 0.68, 'Urban Home({}%)'.format(urban_per), {'font':'Serif', 'size':16,'weight':'bold' ,'color':'black'},alpha = 0.5,)\nfig.text(0.57, 0.68, \"Rural Home({}%)\".format(rural_per), {'font':'Serif', 'size':16,'weight':'bold', 'color':'black'}, alpha = 0.5)\n#fig.text(0., 0.8, 'Assumption was proven wrong', {'font':'Serif', 'size':24, 'color':'black', 'weight':'bold'})\n\nfig.text(0.88,0.75, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nfig.text(1,0.75, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nfig.text(1.025,0.75, 'No Stroke', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'},alpha = 1)\n\n\nfig.show()","fc8cd46f":"smoke = df['smoking_status'].value_counts()\nstroke_smoke = df[df['stroke'] == 1]['smoking_status'].value_counts()\nhealthy_smoke = df[df['stroke'] == 0]['smoking_status'].value_counts()\n\nnever = smoke.values[0]\nunknown =  smoke.values[1]\nformer = smoke.values[2]\nsmokes = smoke.values[3]\n\nstroke_never = int(round (stroke_smoke.values[0] \/ never * 100, 0))\nstroke_unknown = int(round( stroke_smoke.values[2]  \/ unknown *100, 0))\nstroke_former = int(round (stroke_smoke.values[1]  \/ former * 100, 0))\nstroke_smokes = int(round( stroke_smoke.values[3]  \/ smokes *100, 0))\n\nhealthy_never = int(round(healthy_smoke.values[0] \/ never * 100, 0))\nhealthy_unknown = int(round(healthy_smoke.values[1] \/ unknown *100, 0))\nhealthy_former = int(round(healthy_smoke.values[2] \/ former * 100, 0))\nhealthy_smokes = int(round(healthy_smoke.values[3]\/ smokes *100, 0))\n\n\nnever_per = int(round(never\/(never+unknown+former+smokes) * 100, 0))\nunknown_per = int(round(unknown\/(never+unknown+former+smokes)* 100, 0))\nformer_per = int(round(former\/(never+unknown+former+smokes) * 100, 0))\nsmokes_per = int(round(smokes\/(never+unknown+former+smokes)* 100, 0))\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (15,15),\n                 facecolor = '#f6f5f5',dpi = 100,\n                 \n                 plots = {'141':\n                          {     \n                           'rows':7,\n                           'columns': 7,\n                           'values' : [stroke_never,healthy_never],\n                            'colors' : ['#fe346e','#512b58'],\n                              'vertical' : True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y': 0.005,\n                              'icons' : 'ban',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                          },\n                          \n                          '142' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[stroke_former,healthy_former],         \n                              'colors' : ['#fe346e','#512b58'],\n                              'vertical': True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y':0.005,\n                              'icons' : 'smoking-ban',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                                                      \n                           },\n                          \n                          '143':\n                          {     \n                           'rows':7,\n                           'columns': 7,\n                           'values' : [stroke_unknown,healthy_unknown],\n                            'colors' : ['#fe346e','#512b58'],\n                              'vertical' : True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y': 0.005,\n                              'icons' : 'question-circle',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                          },\n                          \n                          '144' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[stroke_smokes,healthy_smokes],         \n                              'colors' : ['#fe346e','#512b58'],\n                              'vertical': True,\n                              'interval_ratio_x': 0.006,\n                              'interval_ratio_y':0.006,\n                              'icons' : 'smoking',\n                              'icon_legend' :False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.8,\n                              'starting_location': 'NE'\n                                                      \n                           }\n                          \n                         },\n                   \n)\n\n\nfig.text(0.1, 0.65, 'Smoking and Stroke- Does smoking habit could cause Stroke?', {'font':'Serif', 'size':20, 'color':'black', 'weight':'bold'})\nfig.text(0.1, 0.62, 'Risk of stroke with smoking is interesting one, it seems smoking does have effect on strokes, and \\nformer smokers are most likely to get strokes. ', {'font':'Serif', 'size':13, 'color':'black', 'weight':'normal'}, alpha = 0.7)\nfig.text(0.18, 0.38, '{}%'.format(healthy_never), {'font':'Serif', 'size':24,'weight':'bold' ,'color':'#2c003e'},alpha = 1,)\nfig.text(0.38, 0.38, '{}%'.format(healthy_former), {'font':'Serif', 'size':24,'weight':'bold', 'color':'#2c003e'}, alpha = 1)\nfig.text(0.58, 0.38, '{}%'.format(healthy_unknown), {'font':'Serif', 'size':24,'weight':'bold' ,'color':'#2c003e'},alpha = 1,)\nfig.text(0.78, 0.38, '{}%'.format(healthy_smokes), {'font':'Serif', 'size':24,'weight':'bold', 'color':'#2c003e'}, alpha = 1)\nfig.text(0.14, 0.58, 'Never Smoked({}%)'.format(never_per), {'font':'Serif', 'size':14,'weight':'bold' ,'color':'black'},alpha = 0.5,)\nfig.text(0.33, 0.58, \"Formerly Smoked({}%)\".format(former_per), {'font':'Serif', 'size':14,'weight':'bold', 'color':'black'}, alpha = 0.5)\nfig.text(0.55, 0.58, 'Unknown({}%)'.format(unknown_per), {'font':'Serif', 'size':14,'weight':'bold' ,'color':'black'},alpha = 0.5,)\nfig.text(0.75, 0.58, \"Smokes({}%)\".format(smokes_per), {'font':'Serif', 'size':14,'weight':'bold', 'color':'black'}, alpha = 0.5)\n#fig.text(0., 0.8, 'Assumption was proven wong', {'font':'Serif', 'size':24, 'color':'black', 'weight':'bold'})\n\nfig.text(0.7,0.62, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nfig.text(0.76,0.62, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nfig.text(0.77,0.62, 'No Stroke', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'},alpha = 1)\n\n\nfig.show()","2ea1a8f8":"work = df['work_type'].value_counts()\nstroke_work = df[df['stroke'] == 1]['work_type'].value_counts()\nhealthy_work = df[df['stroke'] == 0]['work_type'].value_counts()\n\nprivate = work.values[0]\nself =  work.values[1]\nchild = work.values[2]\ngov = work.values[3]\nnever = work.values[4]\n\nstroke_private = int(round (stroke_work.values[0] \/ private * 100, 0))\nstroke_self = int(round( stroke_work.values[1]  \/ self *100, 0))\nstroke_child = int(round (stroke_work.values[3]  \/ child * 100, 0))\nstroke_gov = int(round( stroke_work.values[2]  \/ gov *100, 0))\nstroke_never = int(round( 0, 0))\n\nhealthy_private = int(round(healthy_work.values[0] \/ private * 100, 0))\nhealthy_self = int(round(healthy_work.values[1] \/ self *100, 0))\nhealthy_child = int(round(healthy_work.values[2] \/ child * 100, 0))\nhealthy_gov = int(round(healthy_work.values[3]\/ gov *100, 0))\nhealthy_never = int(round(healthy_work.values[4]\/ never *100, 0))\n\nprivate_per = int(round(private\/(private+self+child+gov+never) * 100, 0))\nself_per = int(round(self\/(private+self+child+gov+never)* 100, 0))\nchild_per = int(round(child\/(private+self+child+gov+never) * 100, 0))\ngov_per = int(round(gov\/(private+self+child+gov+never)* 100, 0))\nnever_per = int(round(never\/(private+self+child+gov+never)* 100, 0))\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (15,15),\n                 facecolor = '#f6f5f5',dpi = 100,\n                 \n                 plots = {'151':\n                          {     \n                           'rows':7,\n                           'columns': 7,\n                           'values' : [stroke_private,healthy_private],\n                            'colors' : ['#fe346e','#512b58'],\n                              'vertical' : True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y': 0.005,\n                              'icons' : 'circle',\n                              'icon_legend': False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.2,\n                              'starting_location': 'NE'\n                          },\n                          \n                          '152' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[stroke_self,healthy_self],         \n                              'colors' : ['#fe346e','#512b58'],\n                              'vertical': True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y':0.005,\n                              'icons' : 'circle',\n                              'icon_legend' :False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.2,\n                              'starting_location': 'NE'\n                                                      \n                           },\n                          \n                          '153':\n                          {     \n                           'rows':7,\n                           'columns': 7,\n                           'values' : [stroke_gov,healthy_gov],\n                            'colors' : ['#fe346e','#512b58'],\n                              'vertical' : True,\n                              'interval_ratio_x': 0.005,\n                              'interval_ratio_y': 0.005,\n                              'icons' : 'circle',\n                              'icon_legend': False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.2,\n                              'starting_location': 'NE'\n                          },\n                          \n                          '154' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[stroke_never,healthy_never],         \n                              'colors' : ['#fe346e','#512b58'],\n                              'vertical': True,\n                              'interval_ratio_x': 0.006,\n                              'interval_ratio_y':0.006,\n                              'icons' : 'circle',\n                              'icon_legend' :False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.2,\n                              'starting_location': 'NE'\n                                                      \n                           },\n                          \n                          '155' :\n                          { \n                            'rows': 7,\n                            'columns':7,\n                            'values':[stroke_child,healthy_child],         \n                              'colors' : ['#fe346e','#512b58'],\n                              'vertical': True,\n                              'interval_ratio_x': 0.006,\n                              'interval_ratio_y':0.006,\n                              'icons' : 'circle',\n                              'icon_legend' :False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.2,\n                              'starting_location': 'NE'\n                                                      \n                           }\n                          \n                         },\n                   \n)\n\n\nfig.text(0.1, 0.65, 'Work and Stroke- Does work pressure could cause Stroke?', {'font':'Serif', 'size':20, 'color':'black', 'weight':'bold'},alpha = 0.9)\nfig.text(0.1, 0.62, 'As per percentages people who are self employed most likely to have strokes, whereas \\nmost of the strokes could be seen in privatly employed people, may be due to workstress?.', {'font':'Serif', 'size':13, 'color':'black', 'weight':'normal'}, alpha = 0.7)\nfig.text(0.16, 0.40, '{}%'.format(healthy_private), {'font':'Serif', 'size':20,'weight':'bold' ,'color':'#2c003e'},alpha = 1,)\nfig.text(0.34, 0.40, '{}%'.format(healthy_self), {'font':'Serif', 'size':20,'weight':'bold', 'color':'#2c003e'}, alpha = 1)\nfig.text(0.48, 0.40, '{}%'.format(healthy_gov), {'font':'Serif', 'size':20,'weight':'bold' ,'color':'#2c003e'},alpha = 1,)\nfig.text(0.64, 0.40, '{}%'.format(healthy_never), {'font':'Serif', 'size':20,'weight':'bold', 'color':'#2c003e'}, alpha = 1)\nfig.text(0.8, 0.40, '{}%'.format(healthy_child), {'font':'Serif', 'size':20,'weight':'bold', 'color':'#2c003e'}, alpha = 1)\n\n\nfig.text(0.15, 0.57, 'Private({}%)'.format(private_per), {'font':'Serif', 'size':13,'weight':'bold' ,'color':'black'},alpha = 0.5,)\nfig.text(0.33, 0.57, \"Self({}%)\".format(self_per), {'font':'Serif', 'size':13,'weight':'bold', 'color':'black'}, alpha = 0.5)\nfig.text(0.46, 0.57, 'Government{}%)'.format(gov_per), {'font':'Serif', 'size':13,'weight':'bold' ,'color':'black'},alpha = 0.5,)\nfig.text(0.61, 0.57, \"Never worked({}%)\".format(never_per), {'font':'Serif', 'size':13,'weight':'bold', 'color':'black'}, alpha = 0.5)\nfig.text(0.78, 0.57, \"Children({}%)\".format(child_per), {'font':'Serif', 'size':13,'weight':'bold', 'color':'black'}, alpha = 0.5)         \n#fig.text(0., 0.8, 'Assumption was proven wong', {'font':'Serif', 'size':24, 'color':'black', 'weight':'bold'})\n\nfig.text(0.7,0.6, 'Stroke ', {'font': 'Serif','weight':'bold','Size': '16','weight':'bold','style':'normal', 'color':'#fe346e'})\nfig.text(0.76,0.6, '|', {'color':'black' , 'size':'16', 'weight': 'bold'})\nfig.text(0.77,0.6, 'No Stroke', {'font': 'Serif','weight':'bold', 'Size': '16','style':'normal', 'weight':'bold','color':'#512b58'},alpha = 1)\n\n\nfig.show()","66a256ca":"\nimport matplotlib\n\nfig = plt.figure(figsize=(12,6),dpi = 100)\ngs = fig.add_gridspec(1,2)\ngs.update(wspace=0.25, hspace=0.5)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nfig.patch.set_facecolor('#f6f5f5')\nax0.set_facecolor('#f6f5f5')\nax1.set_facecolor('#f6f5f5')\n\n\n# ever_married, gender, residence, heart_disease and work_type\n\nhealthy = df[df['stroke']==0]\nstroke = df[df['stroke']==1]\n\n\ncol1 = [\"#4b4b4c\",\"#fe346e\"]\ncolormap1 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col1, N = 256)\ncol2 = [\"#4b4b4c\",\"#512b58\"]\ncolormap2 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col2)\n\nstroke = pd.crosstab(stroke['gender'],[stroke['ever_married']],normalize='index')\nno_stroke = pd.crosstab(healthy['gender'],[healthy['ever_married']], normalize='index')\n\nsns.heatmap(ax=ax0, data=stroke, linewidths= 0,\n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col1,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\nsns.heatmap(ax=ax1, data=no_stroke[0:-1], linewidths=0, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col2,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\n\nax0.text(0, -0.69, 'Distribution of Strokes with Gender & Marriage', {'font':'Serif', 'color':'black', 'weight':'bold','size':25})\nax0.text(0, -0.34, 'It is clear that married people are having more strokes on \\ncompared to singles.Married males are mostly \\neffecting followed by married females.', {'font':'Serif', 'color':'black','size':14}, alpha = 0.7)\n\nax0.text(0,-0.1,'Storke Pecentage ', {'font':'serif', 'color':\"#fe346e\", 'size':20},alpha = 0.9)\nax1.text(0,-0.1,'No Stroke Percentage', {'font':'serif', 'color':\"#512b58\", 'size':20}, alpha =0.9)\n\nax0.axes.set_xticklabels(['Single', 'Married'], {'font':'serif', 'color':'black', 'size':16})\nax1.axes.set_xticklabels(['Single', 'Married'], {'font':'serif', 'color':'black', 'size':16})\n\nax0.axes.set_yticklabels(['Female', 'Male'], {'font':'serif', 'color':'black', 'size':16}, rotation = 0)\n\nax0.set_xlabel('')\nax0.set_ylabel('')\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.axes.get_yaxis().set_visible(False)\nfig.show()","5462cd0d":"fig = plt.figure(figsize=(12,6), dpi = 100)\ngs = fig.add_gridspec(1,2)\ngs.update(wspace=0.25, hspace=0.5)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nfig.patch.set_facecolor('#f6f5f5')\nax0.set_facecolor('#f6f5f5')\nax1.set_facecolor('#f6f5f5')\n\n\n# ever_married, gender, residence, heart_disease and work_type\n\nhealthy = df[df['stroke']==0]\nstroke = df[df['stroke']==1]\n\ngender_order = ['Female','Male']\nwork_order = ['Private', 'Self-employed','Govt_job', 'children']\n\n\ncol1 = [\"#4b4b4c\",\"#fe346e\"]\ncolormap1 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col1, N = 256)\ncol2 = [\"#4b4b4c\",\"#512b58\"]\ncolormap2 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col2)\n\nstroke = pd.crosstab(stroke['gender'],[stroke['work_type']],normalize='index').loc[gender_order,work_order]\nno_stroke = pd.crosstab(healthy['gender'],[healthy['work_type']], normalize='index').loc[gender_order,work_order]\n\nsns.heatmap(ax=ax0, data=stroke, linewidths= 0,\n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col1,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\nsns.heatmap(ax=ax1, data=no_stroke, linewidths=0, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col2,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\n\nax0.text(0, -1., 'Distribution of Strokes with Gender & Work type', {'font':'Serif', 'color':'black', 'weight':'bold','size':25})\nax0.text(0, -0.75, 'Privately employed men and women are majorly having strokes.', {'font':'Serif', 'color':'black','size':14}, alpha = 0.7)\n\nax0.text(0,-0.1,'Storke Pecentage ', {'font':'serif', 'color':\"#fe346e\", 'size':20},alpha = 0.9)\nax1.text(0,-0.1,'No Stroke Percentage', {'font':'serif', 'color':\"#512b58\", 'size':20}, alpha =0.9)\n\nax0.axes.set_xticklabels(['Private', 'Self-Emp','Govt-Job', 'Children'], {'font':'serif', 'color':'black', 'size':12})\nax1.axes.set_xticklabels(['Private', 'Self-Emp','Govt-Job', 'Children'], {'font':'serif', 'color':'black', 'size':12})\n\nax0.axes.set_yticklabels(gender_order, {'font':'serif', 'color':'black', 'size':16}, rotation = 0)\n\nax0.set_xlabel('')\nax0.set_ylabel('')\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.axes.get_yaxis().set_visible(False)\nfig.show()","5cd71381":"fig = plt.figure(figsize=(12,6), dpi = 100)\ngs = fig.add_gridspec(1,2)\ngs.update(wspace=0.25, hspace=0.5)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nfig.patch.set_facecolor('#f6f5f5')\nax0.set_facecolor('#f6f5f5')\nax1.set_facecolor('#f6f5f5')\n\n\n# ever_married, gender, residence, heart_disease and work_type\n\nhealthy = df[df['stroke']==0]\nstroke = df[df['stroke']==1]\n\ngender_order = ['Female','Male']\nsmoking_order = ['smokes', 'formerly smoked', 'Unknown', 'never smoked']\n\n\ncol1 = [\"#4b4b4c\",\"#fe346e\"]\ncolormap1 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col1, N = 256)\ncol2 = [\"#4b4b4c\",\"#512b58\"]\ncolormap2 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col2)\n\nstroke = pd.crosstab(stroke['gender'],[stroke['smoking_status']],normalize='index').loc[gender_order,smoking_order]\nno_stroke = pd.crosstab(healthy['gender'],[healthy['smoking_status']], normalize='index').loc[gender_order,smoking_order]\n\nsns.heatmap(ax=ax0, data=stroke, linewidths= 0,\n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col1,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\nsns.heatmap(ax=ax1, data=no_stroke, linewidths=0, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col2,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\n\nax0.text(0, -1., 'Distribution of Strokes with Gender & Smoking Status', {'font':'Serif', 'color':'black', 'weight':'bold','size':25})\nax0.text(0, -0.55, 'Interestingly, male who quit smoking and females who \\nnever smoke are having most of the strokes.', {'font':'Serif', 'color':'black','size':14}, alpha = 0.7)\n\nax0.text(0,-0.1,'Storke Pecentage ', {'font':'serif', 'color':\"#fe346e\", 'size':20},alpha = 0.9)\nax1.text(0,-0.1,'No Stroke Percentage', {'font':'serif', 'color':\"#512b58\", 'size':20}, alpha =0.9)\n\nax0.axes.set_xticklabels(['Smoke', 'Quit','No Info', 'Never'], {'font':'serif', 'color':'black', 'size':12})\nax1.axes.set_xticklabels(['Smoke', 'Quit','No Info', 'Never'], {'font':'serif', 'color':'black', 'size':12})\n\nax0.axes.set_yticklabels(gender_order, {'font':'serif', 'color':'black', 'size':16}, rotation = 0)\n\nax0.set_xlabel('')\nax0.set_ylabel('')\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.axes.get_yaxis().set_visible(False)\nfig.show()","753a71d3":"fig = plt.figure(figsize=(12,6), dpi = 100)\ngs = fig.add_gridspec(1,2)\ngs.update(wspace=0.25, hspace=0.5)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nfig.patch.set_facecolor('#f6f5f5')\nax0.set_facecolor('#f6f5f5')\nax1.set_facecolor('#f6f5f5')\n\n\n# ever_married, gender, residence, heart_disease and work_type\n\nhealthy = df[df['stroke']==0]\nstroke = df[df['stroke']==1]\n\ngender_order = ['Female','Male']\nage_order = ['Children', 'Teens', 'Mid Adults', 'Elderly']\n\n\ncol1 = [\"#4b4b4c\",\"#fe346e\"]\ncolormap1 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col1, N = 256)\ncol2 = [\"#4b4b4c\",\"#512b58\"]\ncolormap2 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col2)\n\nstroke = pd.crosstab(stroke['gender'],[stroke['age_cat']],normalize='index').loc[gender_order,age_order]\nno_stroke = pd.crosstab(healthy['gender'],[healthy['age_cat']], normalize='index').loc[gender_order,age_order]\n\nsns.heatmap(ax=ax0, data=stroke, linewidths= 0,\n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col1,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\nsns.heatmap(ax=ax1, data=no_stroke, linewidths=0, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col2,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\n\nax0.text(0, -1., 'Distribution of Strokes with Gender & Age', {'font':'Serif', 'color':'black', 'weight':'bold','size':25})\nax0.text(0, -0.75, 'Clearly, irrespective of gender, elderly men and women are prone to heart strokes.', {'font':'Serif', 'color':'black','size':14}, alpha = 0.7)\n\nax0.text(0,-0.1,'Storke Pecentage ', {'font':'serif', 'color':\"#fe346e\", 'size':20},alpha = 0.9)\nax1.text(0,-0.1,'No Stroke Percentage', {'font':'serif', 'color':\"#512b58\", 'size':20}, alpha =0.9)\n\nax0.axes.set_xticklabels(age_order, {'font':'serif', 'color':'black', 'size':12})\nax1.axes.set_xticklabels(age_order, {'font':'serif', 'color':'black', 'size':12})\n\nax0.axes.set_yticklabels(gender_order, {'font':'serif', 'color':'black', 'size':16}, rotation = 0)\n\nax0.set_xlabel('')\nax0.set_ylabel('')\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.axes.get_yaxis().set_visible(False)\nfig.show()","f3be1a20":"fig = plt.figure(figsize=(12,6), dpi = 100)\ngs = fig.add_gridspec(1,2)\ngs.update(wspace=0.25, hspace=0.5)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nfig.patch.set_facecolor('#f6f5f5')\nax0.set_facecolor('#f6f5f5')\nax1.set_facecolor('#f6f5f5')\n\n\n# ever_married, gender, residence, heart_disease and work_type\n\nhealthy = df[df['stroke']==0]\nstroke = df[df['stroke']==1]\n\ngender_order = ['Female','Male']\nglucose_order = ['Low', 'Normal', 'High', 'Very High']\n\n\ncol1 = [\"#4b4b4c\",\"#fe346e\"]\ncolormap1 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col1, N = 256)\ncol2 = [\"#4b4b4c\",\"#512b58\"]\ncolormap2 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col2)\n\nstroke = pd.crosstab(stroke['gender'],[stroke['glucose_cat']],normalize='index').loc[gender_order,glucose_order]\nno_stroke = pd.crosstab(healthy['gender'],[healthy['glucose_cat']], normalize='index').loc[gender_order,glucose_order]\n\nsns.heatmap(ax=ax0, data=stroke, linewidths= 0,\n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col1,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\nsns.heatmap(ax=ax1, data=no_stroke, linewidths=0, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col2,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\n\nax0.text(0, -1., 'Distribution of Strokes with Gender & Glucose level', {'font':'Serif', 'color':'black', 'weight':'bold','size':25})\nax0.text(0, -0.75, 'Clearly, irrespective of gender, elderly men and women are prone to heart strokes.', {'font':'Serif', 'color':'black','size':14}, alpha = 0.7)\n\nax0.text(0,-0.1,'Storke Pecentage ', {'font':'serif', 'color':\"#fe346e\", 'size':20},alpha = 0.9)\nax1.text(0,-0.1,'No Stroke Percentage', {'font':'serif', 'color':\"#512b58\", 'size':20}, alpha =0.9)\n\nax0.axes.set_xticklabels(glucose_order, {'font':'serif', 'color':'black', 'size':12})\nax1.axes.set_xticklabels(glucose_order, {'font':'serif', 'color':'black', 'size':12})\n\nax0.axes.set_yticklabels(gender_order, {'font':'serif', 'color':'black', 'size':16}, rotation = 0)\n\nax0.set_xlabel('')\nax0.set_ylabel('')\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.axes.get_yaxis().set_visible(False)\nfig.show()","ed4c954c":"fig = plt.figure(figsize=(12,6))\ngs = fig.add_gridspec(1,2)\ngs.update(wspace=0.25, hspace=0.5)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\n\nfig.patch.set_facecolor('#f6f5f5')\nax0.set_facecolor('#f6f5f5')\nax1.set_facecolor('#f6f5f5')\n\n\n# ever_married, gender, residence, heart_disease and work_type\n\nhealthy = df[df['stroke']==0]\nstroke = df[df['stroke']==1]\n\n\ncol1 = [\"#4b4b4c\",\"#fe346e\"]\ncolormap1 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col1, N = 256)\ncol2 = [\"#4b4b4c\",\"#512b58\"]\ncolormap2 = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", col2)\n\nstroke = pd.crosstab(stroke['hypertension'],[stroke['heart_disease']],normalize='index')\nno_stroke = pd.crosstab(healthy['hypertension'],[healthy['heart_disease']], normalize='index')\n\nsns.heatmap(ax=ax0, data=stroke, linewidths= 0,\n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col1,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\nsns.heatmap(ax=ax1, data=no_stroke, linewidths=0, \n            square=True, cbar_kws={\"orientation\": \"horizontal\"}, cbar=False,linewidth=3, cmap = col2,annot=True, fmt='1.0%',annot_kws={\"fontsize\":14}, alpha = 0.9)\n\n\nax0.text(0, -0.69, 'Distribution of Strokes with Hypertension & Heart disease', {'font':'Serif', 'color':'black', 'weight':'bold','size':25})\nax0.text(0, -0.42, 'People with no heart condtion but hypertension \\nare having most of the strokes.', {'font':'Serif', 'color':'black','size':14}, alpha = 0.7)\n\nax0.text(0,-0.1,'Storke Pecentage ', {'font':'serif', 'color':\"#fe346e\", 'size':20},alpha = 0.9)\nax1.text(0,-0.1,'No Stroke Percentage', {'font':'serif', 'color':\"#512b58\", 'size':20}, alpha =0.9)\n\nax0.axes.set_xticklabels(['Well heart', 'Ill heart'], {'font':'serif', 'color':'black', 'size':16})\nax1.axes.set_xticklabels(['Well heart', 'Ill heart'], {'font':'serif', 'color':'black', 'size':16})\n\nax0.axes.set_yticklabels(['No hypertension', 'Have hypertension'], {'font':'serif', 'color':'black', 'size':16}, rotation= 0)\n\nax0.set_xlabel('')\nax0.set_ylabel('')\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.axes.get_yaxis().set_visible(False)\nfig.show()","d0d124f1":"\ndf_copy = df.copy()\n# feature log transformations \n\ndf_copy['age'] = df_copy['age'].apply(lambda x: np.log(x+10)*3)\ndf_copy['avg_glucose_level'] = df_copy['avg_glucose_level'].apply(lambda x: np.log(x+10)*2)\ndf_copy['bmi'] = df_copy['bmi'].apply(lambda x: np.log(x+10)*2)\n\n\n\n# preprocessing - label enconding and numerical value scaling\nohe = OneHotEncoder()\nss = StandardScaler()\nle = LabelEncoder()\n\n## label encoding of ordinal categorical features\nfor col in df_copy.columns:\n    df_copy[col] = le.fit_transform(df_copy[col])\n    \ncols = df_copy.columns\n## normalizing with standard scaler of numerical features\ndf_copy[cols] = ss.fit_transform(df_copy[cols])\n\n\n# correlation map for all the features\ndf_corr = df_copy.drop(columns = ['id']).corr()\nmask = np.triu(np.ones_like(df_corr, dtype=np.bool))\n\nfig, ax = plt.subplots(figsize = (8,8))\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nmask = mask[1:, :-1]\ncorr = df_corr.iloc[1:,:-1].copy()\n\n\ncolors = ['#f6f5f5','#512b58','#fe346e']\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\n# plot heatmap\nsns.heatmap(corr, mask=mask, annot=True, fmt=\".2f\",cmap = colormap,\n           vmin=-0.15, vmax=0.5, cbar_kws={\"shrink\": .5, }, ax = ax, cbar = False,\n           linewidth = 1,linecolor = '#f6f5f5', square = True,annot_kws = {'font':'serif', 'size':10, 'color':'black'} )\n# yticks\nax.tick_params(axis = 'y', rotation=0)\nxticks = ['Gender', 'Age','Hyper tension', 'Heart Disease', 'Marriage', 'Work', 'Residence', 'Glucose Level', 'BMI', 'Smoking Status','Stroke','BMI Cat','Age Cat']\nyticks = ['Gender', 'Age','Hyper tension', 'Heart Disease', 'Marriage', 'Work', 'Residence', 'Glucose Level', 'BMI', 'Smoking Status','Stroke','BMI Cat','Age Cat']\nax.set_xticklabels(xticks, {'font':'serif', 'size':10, 'weight':'bold'},rotation = 90, alpha = 0.9)\nax.set_yticklabels(yticks, {'font':'serif', 'size':10, 'weight':'bold'}, rotation = 0, alpha = 0.9)\nax.text(-3.5,-1.1, 'Correlation Map of Features - How closly each of the features correlated?',{'font':'serif', 'size': 16, 'weight':'bold'}, alpha = 0.9)\nax.text(-3.5,-0.65, 'A Glipse on feature correlation for processed feature data.',{'font':'serif', 'size': 12, 'weight':'normal'}, alpha = 0.8)\n\nax.text(9,5, 'Highly correlated positive correlations \\nare exist for Age and Marriage, while \\nwork and other are correlated negatively \\nin highest order.',{'font':'serif', 'size': 9, 'weight':'bold'},alpha = 0.7)\nax.text(9,3.7, 'Insight:',{'font':'serif', 'size': 12, 'weight':'bold'},alpha = 0.7)\n\n\nfig.show()\n","feeadf4e":"labels = ['Smoking', 'BMI','Age', 'Marriage', 'Heart Disease', 'Stroke','Hypertension', 'Age Cat', 'Gender', 'Work', 'BMI Cat', 'Residence','Glucose Level', 'Glucose Cat' ]\n\n\ng = sns.clustermap(df_corr, annot = True, fmt = '0.2f',\n                   cbar= False, cbar_pos=(0,0, 0,0),linewidth = 0.5,\n                   cmap = colormap,dendrogram_ratio=0.1,\n                   facecolor = '#f6f5f5', figsize = (8,8),square = True,\n                   annot_kws = {'font':'serif', 'size':10, 'color':'black'} )\n\nplt.gcf().set_facecolor('#f6f5f5')\nlabel_args = {'font':'serif', 'font':18, 'weight':'bold'}\nplt.setp(g.ax_heatmap.set_yticklabels(labels), rotation=0, fontsize = 10, fontfamily = 'Serif', fontweight = 'bold', alpha = 0.8)  # For y axis\nplt.setp(g.ax_heatmap.set_xticklabels(labels), rotation=90, fontsize = 10, fontfamily = 'Serif', fontweight = 'bold', alpha = 0.8) # For x axis\ng.fig.text(0,1.065,'Visualization of Clustering of Each Feature with Other',{'font':'serif', 'size':16, 'weight':'bold'})\ng.fig.text(0,1.015,'Lines on the top and left of the cluster map are called \\ndendrograms, which indiate the dependency of features.',{'font':'serif', 'size':12}, alpha = 0.8)\nplt.show()","ef5b1d12":"le = LabelEncoder()\ndf_par = df.copy()\nfor col in df.select_dtypes(exclude = ['int64', 'float', 'float64', 'int']).columns:\n    df_par[col] = le.fit_transform(df_par[col])\n\n\nfig = px.parallel_coordinates(df_par.drop(columns = ['id']), color=\"stroke\",\n                              color_continuous_scale=px.colors.diverging.Tealrose, title = 'Visualization of Multivariate Data')\n\nfig.show()","e3682f0e":"# final data preprocessing and preperation\n\ndf_copy = df.copy()\n# feature log transformations \n\ndf['age'] = df['age'].apply(lambda x: np.log(x+10)*3)\ndf['avg_glucose_level'] = df['avg_glucose_level'].apply(lambda x: np.log(x+10)*2)\ndf['bmi'] = df['bmi'].apply(lambda x: np.log(x+10)*2)\n\n\n\n# preprocessing - label enconding and numerical value scaling\nohe = OneHotEncoder()\nss = StandardScaler()\nle = LabelEncoder()\n\nX = df.drop(['stroke','id'], axis = 1)\ny = df['stroke']\n\nordinal = ['age_cat',  'glucose_cat', 'bmi_cat','hypertension', 'heart_disease'] # label enconding\nnominal =  ['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status'] \nnumerical = ['age','bmi', 'avg_glucose_level'] \n\n## label encoding of ordinal categorical features\nfor col in ordinal:\n    X[col] = le.fit_transform(X[col])\n    \n## normalizing with standard scaler of numerical features\nX[numerical] = ss.fit_transform(X[numerical])\n\n## norminal data one hot encoding for categorical features\ntemp = X.drop(columns = nominal)\ndummies = pd.get_dummies(X[nominal])\nX = pd.concat([temp,dummies], axis = 1)","b72cd8f0":"# Umap -  Uniform Manifold Approximation and Projection\numap = UMAP(random_state=2021)\nstroke_umap = umap.fit_transform(X, y)\n\n\n\nfig = plt.figure(figsize=(7,7))# # create figure\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.4, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0])\n\n\n# Change background color\nbackground_color = \"#f5f6f6\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color)\n\n\nax0.scatter(stroke_umap[df['stroke'] == 0][:,0], stroke_umap[df['stroke'] == 0][:,1], c='#512b58', alpha=1,s=50)\nax0.scatter(stroke_umap[df['stroke'] == 1][:,0], stroke_umap[df['stroke'] == 1][:,1], c='#ff005c', alpha=0.9,s=20)\n\n\nax0.text(-25, 24, 'Clean clustering of all the features can been seen from UMAP tranformation. \\nClearly, Strokes, our target can be seen seperated from other features.',fontsize=14, fontfamily='serif')\n\nax0.text(-25, 27, 'Visualization of Strokes with UMAP - A Dimension Reduction Technique', \n        fontsize=18, fontweight='bold', fontfamily='serif')\n\n\nfor s in [\"top\",\"right\",\"left\",\"bottom\"]:\n    ax0.spines[s].set_visible(False)\n    \nax0.set_xticks([])\nax0.set_yticks([])\n\nfig.text(1,0.8,\"Stroke\", fontweight=\"bold\", fontfamily='serif', fontsize=18, color='#ff005c')\nfig.text(1.14,0.8,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=18, color='black')\nfig.text(1.17,0.8,\"No stroke\", fontweight=\"bold\", fontfamily='serif', fontsize=18, color='#512b58')\n\nplt.show()","d2a1c0fd":"##### visualization class for dimension reduction and plotting result\n\nclass sampling():\n    \n    def __init__(self,feat,tar,method,ax): \n        self.feat = feat\n        self.tar = tar\n        self.method = method\n        self.ax = ax\n    \n        \n    # under sampling visualization\n\n    def visualize_data(self):\n        \n        temp_y = pd.DataFrame({'y':self.tar})\n        \n        # dimension reduction\n        pca = PCA(n_components= 2).fit_transform(self.feat)\n        \n        self.ax.set_facecolor('#f5f6f6')\n        # plotting4\n        self.ax.scatter(pca[temp_y['y'] == 0][:,0], pca[temp_y['y'] == 0][:,1], c = '#512b58', s = 10)\n        self.ax.scatter(pca[temp_y['y'] == 1][:,0], pca[temp_y['y'] == 1][:,1], c = '#ff005c', s =10)\n        \n        for loc in ['left','right','top', 'bottom']:\n            self.ax.spines[loc].set_visible(False)\n        self.ax.axes.get_xaxis().set_visible(False)\n        self.ax.axes.get_yaxis().set_visible(False)\n        self.ax.set_xticklabels('')\n        self.ax.set_yticklabels('')\n        self.ax.set_xlim(xmin = -6, xmax = 6)\n        self.ax.set_ylim(ymin = -5, ymax = 6)\n\n    \n        self.ax.text(1.6,3.8,\"Stroke\", fontweight=\"bold\", fontfamily='serif', fontsize=13, color='#ff005c')\n        self.ax.text(3.2,3.8,\"|\", fontweight=\"bold\", fontfamily='serif', fontsize=13, color='black')\n        self.ax.text(3.4,3.8,\"No stroke\", fontweight=\"bold\", fontfamily='serif', fontsize=13, color='#512b58')\n        self.ax.text(-6,5.5,self.method, {'font': 'serif', 'weight': 'bold', 'size': 20}, alpha = 0.8)\n        self.ax.text(-6,4.5,'{} contain {} number of datapoint, \\nand targets distribution as {}.'.format(self.method,len(self.feat), {0:Counter(self.tar)[0],1:Counter(self.tar)[1]}), {'font': 'serif', 'weight': 'normal', 'size': 12}, alpha = 0.7)\n        \n","563a2760":"fig = plt.figure(figsize =(14,7))\n\ngs = fig.add_gridspec(1,2)\ngs.update(wspace = 0.1, hspace = 0.1)\n\nax1 = fig.add_subplot(gs[0,0])\nax2 = fig.add_subplot(gs[0,1])\n\naxes = [ax1, ax2]\n\nfig.patch.set_facecolor('#f5f5f5')\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f8f8f8')\n\n\nrandom_state = 2021\n\n# Original Data\nsampling(X,y.ravel(),'Original Data',ax=ax1).visualize_data()\n\n\n#randomundersampling\nX_rs, y_rs = make_imbalance(X, y.ravel(),random_state= 2021, sampling_strategy ={ 0: 2500, 1:249},)\nsampling(X_rs,y_rs,'Random Sampling',ax=ax2).visualize_data()\nfig.text(0.15,1,'Visualization of Original Data and Random Sampling', {'font': 'serif', 'weight': 'bold', 'size': 24}, alpha = 0.8)\nfig.show()","6f2b5ac9":"fig = plt.figure(figsize =(21,21))\n\ngs = fig.add_gridspec(3,3)\ngs.update(wspace = 0.1, hspace = 0.1)\n\nax1 = fig.add_subplot(gs[0,0])\nax2 = fig.add_subplot(gs[0,1])\nax3 = fig.add_subplot(gs[0,2])\n\nax4 = fig.add_subplot(gs[1,0])\nax5 = fig.add_subplot(gs[1,1])\nax6 = fig.add_subplot(gs[1,2])\n\n\n\naxes = [ax1, ax2, ax3, ax4, ax5, ax6]\n\nfig.patch.set_facecolor('#f5f5f5')\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f8f8f8')\n\n        \nrandom_state = 2021\n\n# RandomUnderSampler\nsampler = RandomUnderSampler(random_state = random_state)\nX_rs, y_rs = sampler.fit_resample(X, y.ravel())\nsampling(X_rs,y_rs,'Random Undersampling',ax=ax1).visualize_data()\n\n\n# ClusterCentroids\nsampler = ClusterCentroids(random_state = random_state)\nX_rs, y_rs = sampler.fit_resample(X, y.ravel())\nsampling(X_rs,y_rs,'ClusterCentroid Undersampling',ax=ax2).visualize_data()\n\n# TomekLinks\nsampler = TomekLinks()\nX_rs, y_rs = sampler.fit_resample(X, y.ravel())\nsampling(X_rs,y_rs,'TomekLinks Undersampling',ax=ax3).visualize_data()\n\n\n# NeighbourhoodCleaningRule\nsampler = NeighbourhoodCleaningRule()\nX_rs, y_rs = sampler.fit_resample(X, y.ravel())\nsampling(X_rs,y_rs,'NCR Undersampling',ax=ax4).visualize_data()\n\n\n# NearMiss\nsampler = NearMiss()\nX_rs, y_rs = sampler.fit_resample(X,y.ravel())\nsampling(X_rs,y_rs,'NearMiss UnderSampling',ax=ax5).visualize_data()\n\n\n\n# EditedNearestNeighbours\nsampler = EditedNearestNeighbours()\nX_rs, y_rs = sampler.fit_resample(X, y)\nsampling(X_rs,y_rs,'ENN UnderSampling',ax=ax6).visualize_data() \n\nfig.text(0.35,0.92,'Visualization of UnderSamped Data', {'font': 'serif', 'weight': 'bold', 'size': 24}, alpha = 0.8)\nfig.show()","d47ed6ac":"fig = plt.figure(figsize =(14,7))\n\ngs = fig.add_gridspec(1,2)\ngs.update(wspace = 0.1, hspace = 0.1)\n\nax1 = fig.add_subplot(gs[0,0])\nax2 = fig.add_subplot(gs[0,1])\n\n\naxes = [ax1, ax2]\n\nfig.patch.set_facecolor('#f5f5f5')\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f8f8f8')\n\n        \nrandom_state = 2021\n\n\n# SMOTESampler\nsampler = SMOTE()\nX_rs, y_rs = sampler.fit_resample(X, y.ravel())\nsampling(X_rs,y_rs,'SMOTE OverSampling',ax=ax1).visualize_data() \n\n\n# ADASYNSampler\nsampler = ADASYN()\nX_rs, y_rs = sampler.fit_resample(X, y.ravel())\nsampling(X_rs,y_rs,'ADASYN OverSampling',ax=ax2).visualize_data()\n\nfig.text(0.3,0.92,'Visualization of OverSamped Data', {'font': 'serif', 'weight': 'bold', 'size': 24}, alpha = 0.8)\nfig.show()\n\n","fe323046":"# training and testing data split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.25, shuffle = True, random_state = 2021)\n\n#smoteresampling \nsmote = SMOTE()\nX_resample, y_resample = smote.fit_resample(X_train, y_train.ravel())\n\nprint('Shape of Training features: {}'.format(X_resample.shape))\nprint('Shape of Training targets: {}'.format(y_resample.shape))\nprint('Shape of Testing features: {}'.format(X_test.shape))\nprint('Shape of Testing targets: {}'.format(y_test.shape))","a4f64c5c":"# Null accuracy Score for current data\nNUll_acc = round (max(y_test.mean(), 1 - y_test.mean()), 2)\n\nprint('Null Accuracy Score for Current Data is {}'.format(NUll_acc))","e341825b":"#### predictions with resampled data\n\n\ndef predictions(x_set,y_set):\n    t1 = time.time()\n    print('Classification Process Starts....')\n    accuracy,precision,recall,f1,auc,conf_mat= [],[],[],[],[],[]\n        \n    random_state = 2021\n    \n    ##classifiers list \n    classifiers = []\n    classifiers.append(SVC(random_state=random_state, probability = True))\n    classifiers.append(DecisionTreeClassifier(random_state=random_state))\n    classifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state=random_state)))\n    classifiers.append(RandomForestClassifier(random_state=random_state))\n    classifiers.append(GradientBoostingClassifier(random_state=random_state))\n    classifiers.append(KNeighborsClassifier())\n    classifiers.append(LogisticRegression(random_state = random_state))\n    classifiers.append(XGBClassifier(random_state = random_state,eval_metric = 'logloss',learning_rate = 0.054))\n    classifiers.append(LGBMClassifier(random_state = random_state,learning_rate = 0.067))\n\n\n    for classifier in classifiers:\n        \n        t =time.time()\n        print('fitting on classifier with parameters: {}'.format(classifier))\n        \n        #classifier and fitting\n        clf = classifier\n        clf.fit(x_set,y_set)\n        \n        #predictions\n        y_preds = clf.predict(X_test)\n        y_probs = clf.predict_proba(X_test)\n        \n        # metrics\n        accuracy.append((round(accuracy_score(y_test,y_preds),2))*100)\n        precision.append((round(precision_score(y_test,y_preds),2))*100)\n        recall.append((round(recall_score(y_test,y_preds),2))*100)\n        f1.append((round(f1_score(y_test,y_preds),2))*100)\n        auc.append((round (roc_auc_score(y_test,y_probs[:,1]), 2))*100)\n        conf_mat.append(confusion_matrix(y_test,y_preds))\n        \n        elapsed = time.time() - t\n        print('Done and elapsed time is {}seconds'.format(round(elapsed,3)))\n        print('\\n')\n    results_df = pd.DataFrame({\"Accuracy Score\":accuracy,\"Precision Score\":precision,\n                        \"Recall Score\":recall, \"f1 Score\":f1,\"AUC Score\":auc,\n                        \"Confusion Matrix\":conf_mat,\n                        \"Algorithm\":[\"SVC\",\"DecisionTree\",\"AdaBoost\",\n                                     \"RandomForest\",\"GradientBoosting\",\n                                     \"KNeighboors\",\"LogisticRegression\",\n                                     \"XGBoost\", \"LightGBM\"]})\n    \n    results_df = (results_df.sort_values(by = 'Algorithm', ascending = False)\n                  .reset_index(drop =  True))\n    t2 = time.time() - t1\n    print('\\nClassification is Completed and results are strored in dataframe.\\ntotal time elapsed is {}seconds'.format(t2))\n    print('***************************************************************\\n\\n')\n    \n    return results_df\n","6280baa6":"orig_results = predictions(X_train,y_train)\nresamp_results = predictions(X_resample,y_resample)","b58f743d":"def multi_visualize(data, vmin = -0.5, vmax = 1):\n    fig = plt.figure(figsize =(24,24))\n    gs = fig.add_gridspec(8,6)\n    gs.update(wspace = 0.2, hspace = 0.1)\n    \n    ax1 = fig.add_subplot(gs[0,0])\n    ax2 = fig.add_subplot(gs[0,1])\n    ax3 = fig.add_subplot(gs[0,2])\n    \n    ax4 = fig.add_subplot(gs[1,0])\n    ax5 = fig.add_subplot(gs[1,1])\n    ax6 = fig.add_subplot(gs[1,2])\n    \n    ax7 = fig.add_subplot(gs[2,0])\n    ax8 = fig.add_subplot(gs[2,1])\n    ax9 = fig.add_subplot(gs[2,2])\n    \n    ax10 = fig.add_subplot(gs[0,3])\n    ax11 = fig.add_subplot(gs[0,4])\n    ax12 = fig.add_subplot(gs[0,5])\n    \n    ax13 = fig.add_subplot(gs[1,3])\n    ax14 = fig.add_subplot(gs[1,4])\n    ax15 = fig.add_subplot(gs[1,5])\n    \n    ax16 = fig.add_subplot(gs[2,3])\n    ax17 = fig.add_subplot(gs[2,4])\n    ax18 = fig.add_subplot(gs[2,5])\n    \n    \n    axes1 = [ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8, ax9]\n    axes2 = [ax10, ax11, ax12, ax13, ax14, ax15, ax16, ax17, ax18]\n    \n    axes = [axes1,axes2]\n    \n    fig.patch.set_facecolor('#f6f5f5')\n    \n    # setting of axes; visibility of axes and spines turn off\n    for ax_list in axes:\n        for ax in ax_list:\n            ax.axes.get_yaxis().set_visible(False)\n            ax.axes.get_xaxis().set_visible(False)\n            ax.set_facecolor('#f6f5f5')\n\n    colors = ['#512b58','#fe346e']\n    colormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n    \n    \n    for ax_list in axes:\n        \n        if ax_list == axes1:\n            res_df = data[0]\n        else:\n            res_df = data[1]\n        \n        \n        alg = res_df['Algorithm']\n        cf = res_df['Confusion Matrix']\n        auc = res_df['AUC Score']\n        f1 = res_df['f1 Score']\n        forig = data[0]['f1 Score']\n        fresam = data[1]['f1 Score']\n        \n        n = 0\n        for ax in ax_list:\n            cf_mat = cf[n]\n            \n            #### annotations\n            labels = ['True Neg','False Pos','False Neg','True Pos']\n            counts = [\"{0:0.0f}\".format(value) for value in cf_mat.flatten()]\n            percentages = [\"{0:.2%}\".format(value) for value in cf_mat.flatten()\/np.sum(cf_mat)]\n            \n            #### final annotations\n            label = (np.array([f'{v1}\\n{v2}\\n{v3}' for v1,v2,v3 in zip(labels,counts,percentages)])).reshape(2,2)\n            \n            #### heatmap\n            sns.heatmap(data = cf_mat, vmin = vmin, vmax =vmax, cmap = ['grey'],linewidth=2,linecolor = '#f6f5f5',\n               ax = ax, annot = label, fmt ='', cbar = False, annot_kws = {'font':'serif','size':10, 'color':'white','weight':'bold'}, alpha =0.8)\n            \n            #### subtitle\n            if ax_list == axes1:\n                ax.text(0,-0,'{}'.format(alg[n]),{'font':'serif','size':12, 'color':'black', 'weight':'bold'})\n            else:\n                ax.text(0,-0,'SMOTE {}'.format(alg[n]),{'font':'serif','size':12, 'color':'black', 'weight':'bold'})\n           \n        \n            #### Auc and F1 score plotting\n            \n            if ax_list == axes2:\n                if (fresam[n] > forig[n]) & (auc[n] > 75):\n                    ax.scatter( 1 , 1 , s = 3500, c = '#fe346e')\n                    ax.text(0.75,1.1, ' F1: {}\\nAUC: {}'.format(int(round(f1[n],1)), int(round(auc[n],1))),{'font':'serif','size':12, 'color':'black', 'weight':'bold'})\n                else:\n                    ax.scatter( 1 , 1 , s = 3500, c = 'white')\n                    ax.text(0.75,1.1, ' F1: {}\\nAUC: {}'.format(int(round(f1[n],1)), int(round(auc[n],1))),{'font':'serif','size':12, 'color':'black', 'weight':'bold'})\n               \n            else:\n                if (forig[n] > 5 ) & (auc[n] > 75):\n                    ax.scatter( 1 , 1 , s = 3500, c = '#512b58', alpha = 0.9)\n                    ax.text(0.75,1.1, ' F1: {}\\nAUC: {}'.format(int(round(f1[n],1)), int(round(auc[n],1))),{'font':'serif','size':12, 'color':'white', 'weight':'bold'})\n                else:\n                    ax.scatter( 1 , 1 , s = 3500, c = 'white')\n                    ax.text(0.75,1.1, ' F1: {}\\nAUC: {}'.format(int(round(f1[n],1)), int(round(auc[n],1))),{'font':'serif','size':12, 'color':'black', 'weight':'bold'})\n            \n           \n            n +=1\n        if ax_list == axes1:\n            ax1.text(0,-0.55,'Visualization of Results with - Original Data',{'font':'serif','size':24, 'color':'black', 'weight':'bold'},)\n        else:\n            ax10.text(0,-0.55,'Visualization of Results with - Oversampled Data',{'font':'serif','size':24, 'color':'black', 'weight':'bold'}, alpha = 0.9)\n            \n            \n    fig.show()","531ca365":"multi_visualize(data = [orig_results, resamp_results], vmin=30,vmax = 100)","b24d1be7":"In this section, loading of data, visulaizing missing values and feature extraction will be carried out. \nIn the current dataset, there are 11 features and one binary target. A brief information about the features are given below\n1. **id**: Identification number of the individual.\n2. **gender**: Gender of the individual.\n3. **hypertension**: Health related parameter, does person have hypertension.\n4. **heart_disease**: Health related parameter, does person have heart disease.\n5. **ever_married**: Personal information, is person married on not?\n6. **work_type**: Nature of work place.\n7. **Residence_type**: Residence type of the individual.\n8. **avg_glucose_level**: average glucose level in blood for the individual.\n9. **bmi**: body mass index of the individual.\n10. **smoking_status**: Habitual information. Current smoking status of individual.\n11. **stroke**: Our taget, is person suffered heart attack?","c3823c82":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> Marriage Distribution <\/h2>\n","7bdba403":"<a id = '5'><\/a>\n<h2 style = \"font-family:garamond; font-size:50px; background-color: #f6f6f6; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 5. References<\/h2>\n","a2bb73d4":"\n<br>\n\n\nDo you know, 80% Heart strokes are preventable?, yes they are. In this notebook, we attempted to visulize some key indicators that lead to heart strokes. Here data is sampled from a wide range of age groups, gender, habits and health related issues. Most of the visualizations are self expilantory and try to stick to simple visualization but effiective method to convey most of the information.\n\n<h3 style = \"font-family:garamond; font-size:30px; background-color: white; color : #fe346e; border-radius: 100px 100px; text-align:left\">Problem Statement<\/h3>\n\nVisululize the relationships between various Healthy and Unhealthy habits to Heart Strokes, and there by predict the stroke probability with best model and hypertuned parameters.\n<h3 style = \"font-family:garamond; font-size:30px; background-color: white; color : #fe346e; border-radius: 100px 100px; text-align:left\"> Questions and Assumptions<\/h3>\n\n1. Does age has impact on strokes? and How is this parameter distributed?\n2. Does body mass index and glucose levels in a person, propel a heart stroke?\n3. Assumption: Smoking can induce Stroke, is it true?\n4. Assumption: Heart with a Heart Disease is prone to Stroke, is it true?\n5. Assumption: Workload results in high blood pressure and that could lead to Stroke, is it true?\n6. Assumption: Males are most susceptible to strokes due to high work related stress, is it true?\n7. Relationship between continous and categorical data\n8. Feature importance and Feature Selection for accurate predictions    \n\n<h3 style = \"font-family:garamond; font-size:30px; background-color: white; color : #fe346e; border-radius: 100px 100px; text-align:left\"> Additional Reading Related To Problem Statement<\/h3>\n\nAll the assumptions are made from following articles and trying to address these points with data in this notebook\n\n* [ Is It a Stroke or a Heart Attack?](https:\/\/www.healthline.com\/health\/stroke-vs-heart-attack)\n* [ Heart Disease and Stroke](https:\/\/www.webmd.com\/heart-disease\/stroke)\n* [ What is stroke?](https:\/\/www.heartandstroke.ca\/stroke\/what-is-stroke)\n* [ Stroke after a heart attack: What\u2019s the risk?](https:\/\/www.health.harvard.edu\/heart-health\/stroke-after-a-heart-attack-whats-the-risk)\n\n\n\n\nQuestions addressed here and can we able to understand the relationship between strokes and general ","b5633b1a":"<a id = '2.1'><\/a>\n<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 2.1 Univariate analysis of continuous variables<\/h2>\n","80507e37":"This mean any dump model could randomly predict targets nearly 95% accurate. With implementation of some kind of data sampling should do a better job compared to raw data. ","7d8c3806":"# Please upvote my work if you find it helpful. Please don't ignore. Happy reading...\n\n# my past notebook honest feedback is welcome.\n* [netflix is awsome why? see here](https:\/\/www.kaggle.com\/bhuvanchennoju\/netflix-is-awsome-why-see-here)","c06087c0":"Age is an important feature. Age feature distribution is not a normal distriubtion, which needs to be tranformed later. From catergorical features it can be seen that old age people are mostly having strokes, compared to younger ones.","e56020fb":"<a id = '2.4'><\/a>\n\n<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 2.4 Relationship between two continuous variables<\/h2>\n","8880e903":"<a id = '2.0'><\/a>\n<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\">  2.0 Distribution of Targets <\/h2>\n","0a052114":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> HyperTension Distribution <\/h2>\n","78c248c6":"Data storytelling is a popular method to convey most of the information in terms of simple plots rather with complex analysis. This techique's main objective to perform explinatory data analysis rather than exploratory data analysis. All the plots made are as simple as possible with no interactivity and complecations. For whole visualization a simple color palette shown in palplot was used. Few key points are highlighted in the plot it self.","d18b34f1":"Overview of the categorical features shows the value counts of the strokes and no strokes for each categorical feature. This overview could give some insight where strokes are high in number.","d434bd80":"<a id = '1.1'><\/a>\n\n<h2 style = \"background-color: #f6f5f5; color : #fe346e; font-size: 35px; font-family:garamond; font-weight: normal; border-radius: 100px 100px; text-align: center\">1.1 Libraries and Utilities<\/h2>","02350d65":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> Residence Distribution <\/h2>\n","f6132609":"<a id = '2'><\/a>\n<h2 style = \"font-family:garamond; font-size:50px; background-color: #f6f6f6; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 2. Stroytelling With Data <\/h2>\n","e4851eef":"<h4 style = \"background-color: white; color : #fe346e; font-size: 30px; font-family:garamond; font-weight: normal; border-radius: 75px 150px; text-align: left\"> Statistics of Categorical and Numerical Data<\/h4> ","7bf00372":"From the visulaization it is clear that oversampling data is having better predictions scores than original data.\n\nWhat can we do furthur?\n\nMay be explore gridsearch and stratified fold implementation could be give better results.\n\n# Summary \n1. loaded few modules and initial cleaning of data\n2. Visulaization of few relationships bewteen variables and individual variables.\n3. feature correaltion visualization\n4. balancing of data and visualization\n5. implemented few models and visualized the results.\n\n\n**Thanks for reading!!!**\n\n**Please upvote if you find my work helpful**","2c57f074":"<h4 style = \"background-color: white; color : #fe346e; font-size: 30px; font-family:garamond; font-weight:normal; border-radius: 75px 150px; text-align: left\"> Non-Null ValueCounts and Feature Datatypes<\/h4> ","fb16806f":"<a id = '3'><\/a>\n<h2 style = \"font-family:garamond; font-size:50px; background-color: #f6f6f6; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 3. Visualization of Data Balancing with Data Sampling techniques<\/h2>\n","6e5e1b32":"From distribution it is clear that every 5 people out of 100 people are having strokes from our sampling data. Moreover,this is a highly unbalanced data distribution, and null accuracy score of this distribution it self is 95%, whcih imploys any dump model should randomly predictions of stroke could reach accuracy of 95%. So, while modeling and training data, either over sampling or under sampling has to be done to obtain best results.","00861235":"<br>\n<h1 style = \"font-size:60px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\"> Storytelling And Prediction of Heart Strokes<\/h1>\n<br>\n<br>\n<br>\n<div class = 'image'> <img style=\"float:center; border:5px solid grey; width:75%\" align=center src = https:\/\/www.eehealth.org\/-\/media\/images\/modules\/blog\/posts\/heartline.jpg?h=500&w=750&hash=8147AFA9A68A838E7227B6524E566A99> \n<\/div>\n<br>\n<br>\n\n[Source: Heart attack and Heart stroke](https:\/\/www.eehealth.org\/blog\/2016\/05\/heart-attack-stroke-connection\/)\n<br>\n<br>\n","009b85d8":"<h4 style = \"background-color: white; color : #fe346e; font-size: 30px; font-family:garamond; font-weight: normal; border-radius: 75px 150px; text-align: left\"> Loading data <\/h4>","f056b26a":"Only bmi feature have some missing data,which was be filled with the median of the same column. For feature extraction, binning was applied for all the continous values, binning values are taken from follow articles.\n\n\n* [body mass index binning](https:\/\/www.medicalnewstoday.com\/articles\/323446#body-mass-index)\n* [Age binning](https:\/\/kidspicturedictionary.com\/english-through-pictures\/people-english-through-pictures\/age-physical-description\/)\n* [average glucose binning](https:\/\/agamatrix.com\/blog\/normal-blood-sugar-level-chart\/)","b03d05b9":"<a id = '1'><\/a>\n<h2 style = \"font-family:garamond; font-size:50px; background-color: #f6f6f6; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 1. Introduction <\/h2>\n","e7e55373":"<a id = '2.2'><\/a>\n\n<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 2.2 Overview of univariate categorical variables<\/h2>\n","071c8fc4":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center \" >Table of Contents<\/h1>\n\n\n* [1. Introduction](#1)\n    * [1.1 Libraries And Utilities](#1.1)\n    * [1.2 Data Preprocessing- loading, Missingvalues, and feature extraction](#1.2)\n* [2. Storytelling With Data - Explinatory Data Analysis](#2)\n    * [2.0 Distribution of targets](#2.0)\n    * [2.1 Univariate analysis of continuous variables](#2.1)\n    * [2.2 Overview of univariete categorical features](#2.2)\n    * [2.3 Univariate analysis of categorical variables](#2.3)\n    * [2.4 Relationship between two continuous variables](#2.4)\n    * [2.5 Visualization of the correlations between features](#2.5)\n* [3. Visualization of Data Balancing with Datasampling techniques](#3)\n* [4. Modeling and results](#4)\n* [5. References](#5)\n","a54dd44a":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> Visualization of UnderSampling Technique<\/h2>\n","8e743896":"<a id = '#2.5'><\/a>\n<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 2.5 Visualization of correlations between various features<\/h2>\n","b2de605a":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> Smoking Distribution <\/h2>\n","bc04ef4d":"BMI is highly skewed and high bmi , high possibility of having strokes.","a5399611":"<a id = '1.2'><\/a>\n\n<h2 style = \"background-color: #f6f5f5; color : #fe346e; font-size: 35px; font-family:garamond; font-weight:normal; border-radius: 100px 100px; text-align: center\">1.2 Data Preprocessing <\/h2>","6dccfc6e":"* [1.About Stroke](https:\/\/www.heartandstroke.ca\/stroke\/what-is-stroke)\n* [2.Handling inbalanced data](https:\/\/github.com\/ChrisKuoColumbiaU\/FraudDetection\/blob\/master\/05_Sampling_techniques_for_extremely_imbalanced_data.ipynb)\n* [3. TOP 50 visualization techniques](https:\/\/www.machinelearningplus.com\/plots\/top-50-matplotlib-visualizations-the-master-plots-python\/)\n* [4.handling imbalanced datasets in machinelearning](https:\/\/towardsdatascience.com\/handling-imbalanced-datasets-in-machine-learning-7a0e84220f28)\n* [5.Visualization notebook ](https:\/\/www.kaggle.com\/joshuaswords\/awesome-hr-data-visualization-prediction)\n* [6.Beautify Jupyter notebook](https:\/\/www.kaggle.com\/shubhamksingh\/create-beautiful-notebooks-formatting-tutorial)\n* [7.Best Resource for metrics in unbalanced data](https:\/\/www.ritchieng.com\/machine-learning-evaluate-classification-model\/)\n* [8.How to make clean visualizations](https:\/\/www.kaggle.com\/gaetanlopez\/how-to-make-clean-visualizations)","5a05c1b6":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> Gender Distribution <\/h2>\n","75c3e61e":"<a id = '4'><\/a>\n<h2 style = \"font-family:garamond; font-size:50px; background-color: #f6f6f6; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 4. Modelling and Results<\/h2>\n","37fada14":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\">Original Data vs Random Datasampling <\/h2>\n","e8ccdb1a":"<h4 style = \"background-color: white; color : #fe346e; font-size: 30px; font-family:garamond; font-weight: normal; border-radius: 75px 150px; text-align: left\"> Visualization of Nullity of the Dataset<\/h4>","9f0dff2e":"<a id = '2.3'><\/a>\n\n<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> 2.3 Univariate analysis of categorical variables<\/h2>\n","c6685cfa":"Choosing SMOTE oversampling data for modeling as the number of datapoints generated are in equal proportion from this technique.","1ac202b1":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> HeartDisease Distribution <\/h2>\n","5f9ebd54":"<h4 style = \"background-color: white; color : #fe346e; font-size: 30px; font-family:garamond; font-weight: normal; border-radius: 75px 150px; text-align: left\"> Initial Insights About Dataset<\/h4> \n\n1. Data from bmi feature is missing.\n2. Both Categorical and numerical features are present.\n    - **Categorical Features**: gender, ever_married, work_type, Residence_type, smoking_status\n    - **Binary Numerical Features**: hypertension,heart_disease, stroke\n    - **Continous Numerical Features**: age, avg_glucose_level, bmi \n3. Most of the data is categorical which need a special attention to visulaize those\n4. Feature extraction can  be done by binning the continous features ( age, sugar level, and bmi) and let's keep every things as it is.","8bfc8e5d":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\"> Work Distribution <\/h2>\n","d912b215":"Glucose level distribution is skewed towards left and most ofhte strkes can be seen people with regular glucose levels.","b3d15625":"<h2 style = \"font-family:garamond; font-size:35px; background-color: #f6f5f5; color : #fe346e; border-radius: 100px 100px; text-align:center\">Visualization of OverSampling Techinque<\/h2>\n"}}