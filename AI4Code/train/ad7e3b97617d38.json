{"cell_type":{"39bce669":"code","0d9dc37b":"code","192583f4":"code","105ee8fb":"code","030d2eb3":"code","92c6e204":"code","a1a1a850":"code","bb97303f":"code","d2aa2d71":"code","10b3bb74":"code","00301aab":"code","509d6cb1":"code","635b412a":"code","b01a93c9":"code","43ea9b16":"code","5c31ca4c":"code","f3b1a01f":"code","cf080816":"code","c86a1701":"code","39de2bcf":"code","50b189cb":"code","3c4c77e6":"code","7259aaa0":"code","c0c43cdf":"code","f059cab9":"code","52bfc11b":"code","9ee58ab1":"code","d1819b57":"code","c382c00b":"code","d99626fa":"code","2db0296b":"code","3e8f5439":"code","e170a4b7":"code","27052d23":"code","89fa3208":"code","f17e6194":"code","951b48bb":"code","2cee9473":"code","6a275f77":"code","aa727ab1":"code","fc374348":"code","1632112c":"code","fdb193bb":"markdown","bc66312e":"markdown","4c3dd37d":"markdown","39974dbb":"markdown","98ad614d":"markdown","6ac4dd21":"markdown","d41f99e2":"markdown"},"source":{"39bce669":"import pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.metrics import RootMeanSquaredError\nfrom tensorflow.keras.losses import MeanSquaredError\nfrom tensorflow.keras.layers import AveragePooling2D, Conv2D, MaxPool2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nimport numpy as np\nfrom tqdm import tqdm","0d9dc37b":"train = pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')","192583f4":"train.head()","105ee8fb":"train['Id'] = train['Id'] + '.jpg'","030d2eb3":"train_datagen = ImageDataGenerator(\n                rescale = 1.0\/255.0,\n                horizontal_flip = True,\n                fill_mode = \"nearest\", zoom_range = 0.2,\n                width_shift_range = 0.2, height_shift_range=0.2,\n                rotation_range=30,validation_split=0.2\n)","92c6e204":"train_data = train_datagen.flow_from_dataframe(\n            dataframe = train,\n            directory='..\/input\/petfinder-pawpularity-score\/train',\n            x_col = \"Id\",\n            y_col = \"Pawpularity\",\n            class_mode=\"raw\",\n            batch_size = 64,\n            target_size=(224,224),\n            shuffle = True,\n            subset='training'\n        )\n\nval_data = train_datagen.flow_from_dataframe(\n            dataframe = train,\n            directory='..\/input\/petfinder-pawpularity-score\/train',\n            x_col = \"Id\",\n            y_col = \"Pawpularity\",\n            class_mode=\"raw\",\n            batch_size = 64,\n            target_size=(224,224),\n            shuffle = True,\n            subset='validation'\n        )","a1a1a850":"bModel = tf.keras.applications.EfficientNetB7(include_top=False,weights='imagenet',input_tensor=Input(shape=(224,224,3)))","bb97303f":"hModel = bModel.output\nhModel = MaxPool2D(pool_size=(2,2))(hModel)\nhModel = Flatten()(hModel)\nhModel = Dense(512,activation='relu')(hModel)\nhModel = Dropout(0.2)(hModel)\nhModel = Dense(1)(hModel)\n\nmodel = tf.keras.Model(bModel.input,hModel)\n\nfor layer in bModel.layers:\n  layer.trainable=False","d2aa2d71":"epochs = 25\nlrate = 0.001\ndecay = lrate\/epochs\nopt = tf.keras.optimizers.Adam(learning_rate=lrate, decay=decay)\nmodel.compile(optimizer=opt, loss=MeanSquaredError(), metrics=[RootMeanSquaredError()])","10b3bb74":"! mkdir cp","00301aab":"eraly_stop = tf.keras.callbacks.EarlyStopping(monitor='loss', min_delta=0.0001, patience=3, verbose=1, mode='auto')\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', min_delta=0.0004, patience=2, factor=0.1, min_lr=1e-6, mode='auto',\n                              verbose=1)\ncp = tf.keras.callbacks.ModelCheckpoint(filepath='.\/cp\/model.h5', monitor='val_root_mean_squared_error', verbose=0, save_best_only=True)","509d6cb1":"TRAIN_STEPS = train_data.n \/\/ train_data.batch_size\n\nhistory = model.fit(train_data,\n                       steps_per_epoch=TRAIN_STEPS,\n                       validation_data= val_data,\n                       epochs=epochs, \n                       callbacks=[eraly_stop, reduce_lr, cp],\n                       verbose=1\n                     )","635b412a":"best_model = tf.keras.models.load_model('.\/cp\/model.h5')","b01a93c9":"df_test = pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')","43ea9b16":"df_test","5c31ca4c":"df_test['IdImg'] = df_test['Id'] + '.jpg'","f3b1a01f":"test_datagen = ImageDataGenerator(rescale=1.0\/255.0)\n\ntest_generator = test_datagen.flow_from_dataframe(dataframe=df_test,\n                                             directory='..\/input\/petfinder-pawpularity-score\/test', \n                                             x_col='IdImg',\n                                             y_col=None,\n                                             batch_size=32,\n                                             seed=42,\n                                             shuffle=False,\n                                             class_mode=None,\n                                             target_size=(224, 224)\n                                            )","cf080816":"yhat_test = best_model.predict(test_generator, verbose=1)","c86a1701":"frames = [\n    pd.Series(df_test['Id'], name='Id'),\n    pd.Series(yhat_test.ravel(), name='Pawpularity')\n]\nsubmission = pd.concat(frames, axis=1)\nsubmission.head()","39de2bcf":"submission.to_csv('submissionCNN.csv', index=False)","50b189cb":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import StratifiedKFold, train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np","3c4c77e6":"X = train.drop(columns=['Id','Pawpularity'])\nY = train['Pawpularity']","7259aaa0":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1)","c0c43cdf":"random_forest = RandomForestRegressor()\nparam_grid = {\n                 'n_estimators': [10, 50, 100, 500, 1000],\n                 'max_depth': [2, 5, 7, 9, 10]\n             }\n\ngrid_clf = GridSearchCV(random_forest, param_grid, cv=5)\ngrid_clf.fit(X_train, Y_train)","f059cab9":"grid_clf.best_estimator_","52bfc11b":"y_pred = grid_clf.predict(X_test)","9ee58ab1":"RF_RMSE = np.sqrt(mean_squared_error(Y_test, y_pred))\nRF_RMSE","d1819b57":"test_X = df_test.drop(columns=['Id','IdImg'])","c382c00b":"test_pred = grid_clf.predict(test_X)","d99626fa":"frames2 = [\n    pd.Series(df_test['Id'], name='Id'),\n    pd.Series(test_pred, name='Pawpularity')\n]\nsubmission2 = pd.concat(frames2, axis=1)\nsubmission2.head()","2db0296b":"submission2.to_csv('submissionRF.csv', index=False)","3e8f5439":"from sklearn.linear_model import LinearRegression","e170a4b7":"LR = LinearRegression()\n\nLR.fit(X_train, Y_train)","27052d23":"y_pred2 = LR.predict(X_test)\nLR_RMSE = np.sqrt(mean_squared_error(Y_test, y_pred2))\nLR_RMSE","89fa3208":"test_pred2 = LR.predict(test_X)","f17e6194":"frames3 = [\n    pd.Series(df_test['Id'], name='Id'),\n    pd.Series(test_pred2, name='Pawpularity')\n]\nsubmission3 = pd.concat(frames3, axis=1)\nsubmission3.head()","951b48bb":"submission3.to_csv('submissionLR.csv', index=False)","2cee9473":"df_join = submission.merge(submission2, how='left', on='Id')\ndf_join = df_join.merge(submission3, how='left', on='Id')","6a275f77":"df_join","aa727ab1":"df_join['Pawpularity'] = (df_join['Pawpularity_x'] + df_join['Pawpularity_y'] + df_join['Pawpularity'])\/3\ndf_join = df_join.drop(columns=['Pawpularity_x','Pawpularity_y'])","fc374348":"df_join","1632112c":"df_join.to_csv('submissionJoin.csv', index=False)","fdb193bb":"# Read Test Data","bc66312e":"# Linear Regression","4c3dd37d":"# Train CNN","39974dbb":"# Random Forest","98ad614d":"# Preprocessing CNN","6ac4dd21":"# Modelling CNN","d41f99e2":"# Predict Test Data"}}