{"cell_type":{"e69848c4":"code","1541af75":"code","9520e702":"code","b5b1e496":"code","2a6e855a":"code","83f44c75":"code","ee3db658":"code","28248a8a":"code","a0ecaccc":"code","3ac64638":"code","7b76591b":"code","6a4100e3":"code","4f93e8e1":"code","2798233a":"code","a541f518":"code","d0f4a7b5":"code","316d8fa4":"code","7de02588":"code","6eaebc13":"code","8e4dd342":"code","6f84b817":"code","36faf277":"code","0d03db04":"code","187cdf6c":"code","4939a5cb":"code","fc696e82":"code","4a366d8d":"code","80859a8f":"code","d3628fee":"code","b1b7f67f":"code","d9aa551a":"code","b651f316":"code","de3bad3d":"code","99196dbb":"code","1d8792a6":"code","bae6a572":"code","33053c35":"code","bd067361":"code","d0fa3b29":"code","1af914d2":"code","bd20053e":"code","02621504":"code","e44e433b":"code","1bd9c434":"code","ee0d51e5":"code","b6d38697":"code","58873500":"code","0d265a0b":"code","d91a97f3":"code","4af2c679":"code","0f0758d4":"code","f636a416":"code","2d07c1d4":"code","23b392cd":"code","ff694795":"code","ed75033f":"code","55d22bfd":"markdown","65fd2eb8":"markdown","4d7bf785":"markdown","013d1634":"markdown","ee71e868":"markdown","8015d62a":"markdown","23342f6d":"markdown","81b02ea2":"markdown","a4dabf5d":"markdown","06c61522":"markdown","0407d03a":"markdown","c04ec17f":"markdown","f8f4936b":"markdown","90db6f05":"markdown","526cc6b6":"markdown","f65670cd":"markdown","9ad82f1a":"markdown","e5e99d0f":"markdown","a903cd8e":"markdown","1082328d":"markdown","33b154f2":"markdown","5726f636":"markdown","0cf112c5":"markdown","abcba690":"markdown","9b88344b":"markdown","ead1d9c9":"markdown","c53bc199":"markdown","f2cc01ee":"markdown"},"source":{"e69848c4":"# libraries and working envornment\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n","1541af75":"# useful functions\n\n# To get missing values DataFrame\ndef missing_val(data):\n    total = data.isnull().sum().sort_values(ascending=False)\n    percentage = round(total\/data.shape[0]*100, 2)\n    return pd.concat([total, percentage], axis=1, keys=['Total', 'Percentage'])\n\n# To get value counts DataFrame\ndef count_val(data, feature):\n    total = data.loc[:, feature].value_counts(dropna=False)\n    percentage = round(data.loc[:, feature].value_counts(\n        dropna=False, normalize=True)*100, 2)\n    return pd.concat([total, percentage], axis=1, keys=['Total', 'Percentage'])","9520e702":"# data of the matches that played between 2008 and 2019\nipl_pre= pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\nipl_pre.head(5)","b5b1e496":"ipl_pre.info()","2a6e855a":"# convert date into time-series object\nipl_pre['date'] = pd.to_datetime(ipl_pre.date,dayfirst=True)\n\nipl_pre[['date']].info()","83f44c75":"# checking missing values\nmissing_val(ipl_pre).head(7)","ee3db658":"# dropping 'umpire3' column\nipl_pre.drop('umpire3', axis=1,inplace=True)","28248a8a":"# get rows where city data is missing\nipl_pre[ipl_pre['city'].isnull()]","a0ecaccc":"ipl_pre.city=np.where(ipl_pre.venue == 'Dubai International Cricket Stadium', ipl_pre.city.fillna('Dubai (DSC)'), ipl_pre.city)","3ac64638":"# rows where umpire data is missing\nipl_pre[ipl_pre['umpire1'].isnull()]","7b76591b":"# inserting the missing values\nipl_pre['umpire1'].loc[ipl_pre.match_id==5] = 'Sundaram Ravi'\nipl_pre['umpire2'].loc[ipl_pre.match_id==5] = 'Virender Kumar Sharma'\nipl_pre['umpire1'].loc[ipl_pre.match_id==11413] = 'Sundaram Ravi'\nipl_pre['umpire2'].loc[ipl_pre.match_id==11413] = 'Bruce Oxenford'","6a4100e3":"# checking missing values again\nmissing_val(ipl_pre).head(5)","4f93e8e1":"# value counting of 'city'\ncount_val(ipl_pre,'city')","2798233a":"# replace bangalore to bengaluru\nipl_pre['city'] = ipl_pre['city'].replace({'Bangalore':'Bengaluru'})","a541f518":"# name and count of team who participated from 2008 to 2019\ncount_val(ipl_pre,'team1')","d0f4a7b5":"# update and correct team names\nteam_name_correction_dict = {'Delhi Daredevils':'Delhi Capitals',\n                             'Rising Pune Supergiants':'Rising Pune Supergiant',\n                             'Deccan Chargers':'Sunrisers Hyderabad'}\n\nipl_pre = ipl_pre.replace(team_name_correction_dict)\n\n\n# replace with sort name\nname_short_dict = {'Sunrisers Hyderabad':'SRH', 'Mumbai Indians':'MI', \n                   'Kings XI Punjab':'KXIP','Chennai Super Kings':'CSK', \n                   'Royal Challengers Bangalore':'RCB','Kolkata Knight Riders':'KKR', \n                   'Delhi Capitals':'DC', 'Rajasthan Royals':'RR',\n                   'Pune Warriors':'PWI', 'Rising Pune Supergiant':'RPS', \n                   'Gujarat Lions':'GL','Kochi Tuskers Kerala':'KTK'}\n\nipl_pre = ipl_pre.replace(name_short_dict)\n","316d8fa4":"# value count of hosting ground\ncount_val(ipl_pre,'venue')","7de02588":"# correction of stadium name\nvenue_name_correction_dict = {'M. Chinnaswamy Stadium':'M Chinnaswamy Stadium',\n                              'ACA-VDCA Stadium':'Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium',\n                              'Feroz Shah Kotla Ground':'Feroz Shah Kotla',\n                              'Rajiv Gandhi Intl. Cricket Stadium':'Rajiv Gandhi International Stadium, Uppal',\n                              'M. A. Chidambaram Stadium':'MA Chidambaram Stadium, Chepauk',\n                              'IS Bindra Stadium':'Punjab Cricket Association IS Bindra Stadium, Mohali',\n                              'Sheikh Zayed Stadium': 'Sheikh Zayed Stadium, Abu Dhabi'}\n\nipl_pre['venue'] = ipl_pre['venue'].replace(venue_name_correction_dict)\n","6eaebc13":"# correcting umpire names if it consist full and short name for different seasons\ncount_val(ipl_pre,'umpire1')","8e4dd342":"# find out the same name with different representation\nunique_ump = list(ipl_pre.umpire1.unique())+list(ipl_pre.umpire2.unique())\nlast_name_u = [u.strip().split(' ')[-1] for u in unique_ump]\numpire_name_df = pd.DataFrame({'full_name_u':unique_ump,'last_name_u':last_name_u})\numpire_name_df.sort_values('last_name_u')","6f84b817":"# updating umpire name\nump_name_correction_dict = {'KN Anantapadmanabhan':'KN Ananthapadmanabhan',\n                            'K Ananthapadmanabhan':'KN Ananthapadmanabhan',\n                            'Yeshwant Barde':'YC Barde', 'Anil Chaudhary':'AK Chaudhary',\n                            'Anil Dandekar':'AY Dandekar', 'Subroto Das':'S Das',\n                            'A.D Deshmukh':'A Deshmukh', 'Kumar Dharmasena':'HDPK Dharmasena',\n                            'Marais Erasmus':'M Erasmus', 'Chris Gaffaney':'CB Gaffaney',\n                            'A Nanda Kishore':'Nand Kishore', 'A Nand Kishore':'Nand Kishore',\n                            'Nanda Kishore':'Nand Kishore', 'Vineet Kulkarni':'VA Kulkarni',\n                            'Nigel Llong':'NJ Llong', 'O Nandan':'CK Nandan', \n                            'Bruce Oxenford':'BNJ Oxenford', 'Sundaram Ravi':'S Ravi',\n                            'Virender Kumar Sharma':'VK Sharma', 'Rod Tucker':'RJ Tucker',\n                            'Ian Gould':'I Gould', 'Ulhas Gandhe':'U Gandhe',\n                            'Nitin Menon':'N Menon'}\n\nipl_pre[['umpire1','umpire2']] = ipl_pre[['umpire1','umpire2']].replace(ump_name_correction_dict)","36faf277":"# import training data\ntrain = pd.read_csv('..\/input\/ipl-2020-player-performance\/Training.csv')\ntrain.head(3)","0d03db04":"# split match_id and name of the player\nmatch_id = [int(i.split('_')[0]) for i in list(train.Id)]\nplayer = [i.split('_')[-1] for i in list(train.Id)]\ntrain.insert(1,'player',player)\ntrain.insert(1,'match_id',match_id)\ntrain.head()","187cdf6c":"# importing test data which is sample submission csv\ntest = pd.read_csv('..\/input\/ipl-2020-player-performance\/sample_submission.csv')\ntest.head(3)","4939a5cb":"# getting match_id and name of the player in test data\ntest['match_id'] = [int(i.split('_')[0]) for i in list(test.Id)]\ntest['player'] = [i.split('_')[-1] for i in list(test.Id)]\ntest['player'] = test['player'].apply(lambda x:x.strip())\ntest.head(3)","fc696e82":"# update name if there is mismatche of player names in previous ipl and ipl 2020\nunique_player = list(train.player.unique())+list(test.player.unique())\nlast_name_p = [p.strip().split(' ')[-1] for p in unique_player]\nplayer_name_df = pd.DataFrame({'full_name_p':unique_player,'last_name_p':last_name_p})\nplayer_name_df.sort_values('last_name_p')\nplayer_name_df.groupby('last_name_p').filter(lambda x : (len(x['last_name_p'])==x['full_name_p'].nunique())&(len(x['last_name_p'])>1)).sort_values('last_name_p')","4a366d8d":"# updating names in train data while names in ipl 2020 should be remain unchanged. \n\nplayer_name_correction_dict = {'S Gill':'Shubman Gill', 'C Ingram':'CA Ingram',\n                               'P Krishna':'Prasidh Krishna', 'S Mavi':'Shivam Mavi',\n                               'H Vihari':'GH Vihari','S Warrier':'Sandeep Warrier'}\n\ntrain.player = train.player.replace(player_name_correction_dict)\ntrain['player'] = train['player'].apply(lambda x:x.strip())\n\ntrain.head(3)","80859a8f":"# merging matches score data with match information\ntrain = pd.merge(train,ipl_pre, how='inner',on= 'match_id')\ntrain.describe()","d3628fee":"plt.figure(figsize=(7,4))\nsns.boxplot(train[\"Total Points\"])\nplt.show()","b1b7f67f":"# capping by the value at 0.98 Quantile\nq = int(train['Total Points'].quantile([0.98]))\nprint(q)\ntrain[\"Total Points\"].loc[train['Total Points'] >= q] = q","d9aa551a":"# after capping\nplt.figure(figsize=(7,4))\nsns.boxplot(train[\"Total Points\"])\nplt.show()","b651f316":"# import ipl 2020 match information\nipl_20 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\n\n# drop umpire3 columns which was also dropped from ipl_pre data\nipl_20.drop('umpire3',axis=1,inplace=True)\n\n# convert date into timeseries \nipl_20['date'] = pd.to_datetime(ipl_20.date, dayfirst=True)\n\n# inserting new column season\nipl_20['season'] = 2020\n\nipl_20.head(3)","de3bad3d":"# merging player info with their respective match facts\ntest = pd.merge(test,ipl_20, how = 'inner', on = 'match_id')\ntest.head(3)","99196dbb":"train = train[['Id','player','season','date','team1','team2','venue','Total Points']]\ntest = test[['Id','player','season','date','team1','team2','venue']]","1d8792a6":"ipl_20_players = set(test['player'])\n\ntrain = train[train['player'].isin(ipl_20_players)]\n\n# train data after filtering rows of ipl 2020 player\ntrain","bae6a572":"# merge train and test dataset as of now to create identical features\ndf = pd.concat([train, test],keys=['train','test'])\n\ndf","33053c35":"df['weekend'] = ((pd.DatetimeIndex(df.date).dayofweek) \/\/ 5 == 1).astype(int)","bd067361":"df_by_date = df.sort_values('date')\ndf_by_date","d0fa3b29":"debut = [0 if j in df_by_date.player.values[:i] else 1 for i, j in enumerate(df_by_date.player.values)]\ndf_by_date['debut'] = debut","1af914d2":"# list of number of match player has played before \nmatch_played = [list(df_by_date.player.values[:i]).count(j) for i, j in enumerate(df_by_date.player.values)]\ndf_by_date['match_played'] = match_played","bd20053e":"# drop date column\ndf = df_by_date.drop('date', axis=1)","02621504":"df","e44e433b":"# get dummies\ndf_dummies = pd.get_dummies(data=df, columns=['player','team1','team2','venue'], drop_first =True)","1bd9c434":"# train data\ntrain = df_dummies.xs('train')\ntrain.head(3)","ee0d51e5":"# Checking the random portion of train part to see if data is correctly dummified or not\ntrain[1100:1110].loc[:, (train[1100:1110] != 0).any(axis=0)]","b6d38697":"test = df_dummies.xs('test').sort_values('Id')\ntest.head(3)","58873500":"# Checking the random portion of test part to see if data is correctly dummified or not\ntest[815:820].loc[:, (test[815:820] != 0).any(axis=0)]","0d265a0b":"# Normalizing the numeric variables\nscaler = MinMaxScaler()\n\ntrain[['season','match_played']] = scaler.fit_transform(train[['season','match_played']])\ntest[['season','match_played']] = scaler.transform(test[['season','match_played']])","d91a97f3":"# input and output training variables\ny = train[['Total Points']]\nX = train.drop(['Total Points','Id'],axis = 1)\n\n# test input variables\nX_test = test.drop(['Total Points','Id'], axis=1)","4af2c679":"# initializing object\nrf = RandomForestRegressor(max_depth=90, max_features=15, min_samples_leaf=5,\n                           n_estimators=30, n_jobs = -1, random_state=42)","0f0758d4":"# train the model\nrf.fit(X, y)","f636a416":"# predict on train data \ny_pred_rf = rf.predict(X)","2d07c1d4":"mean_squared_error(y, y_pred_rf)","23b392cd":"# prediction on test set\ny_test_pred_rf = rf.predict(X_test)\n\nprint(y_test_pred_rf.shape)\ny_test_pred_rf","ff694795":"output = test[['Id']]\noutput['Total Points'] = y_test_pred_rf.astype(int)\noutput","ed75033f":"# submission output\n\noutput.to_csv('submission.csv',index=False)","55d22bfd":"# Model Building","65fd2eb8":"- Name of city, stadium, player etc. should be consistent throughout the Previous matches as well as IPL 2020 data ","4d7bf785":"# Checking Consistency of Names","013d1634":"- Extracting only those columns which is helpful to build model\n - Umpire information will be unavailable before the season starts so consider it to drop\n - City and venue is definitely correlative, so including only venue\n - Season contains the progression of year which can be counted as weightage of player experience so will keep it to build model. ","ee71e868":"- Above all the match has been played in 'Dubai International Cricket Stadium' so missing city values should be Dubai (DSC)","8015d62a":"- Extracting past performance of ipl 2020 players only","23342f6d":"----------------------------------------Thank you \ud83d\ude4f\ud83c\udffd------------------------------------","81b02ea2":"- Considering to drop 3rd umpire columns","a4dabf5d":"# Feature Extraction","06c61522":"- Map column if it is a debut match of the player","0407d03a":"# Prediction on Test data (submission CSV)","c04ec17f":"- RMSE","f8f4936b":"- mapping whether it was weekdays(0) or weekend(1) on match date","90db6f05":"- In October 2014, Bangalore was renamed to \"Bengaluru\".","526cc6b6":"info from crickbuzz.com\n\n- match_id : 5, https:\/\/www.cricbuzz.com\/cricket-match-facts\/18125\/rcb-vs-dc-5th-match-indian-premier-league-2017\nUmpires: Sundaram Ravi, Virender Kumar Sharma\n\n- match_id : 11413, https:\/\/www.cricbuzz.com\/cricket-match-facts\/22507\/dc-vs-srh-eliminator-indian-premier-league-2019\nUmpires: Sundaram Ravi, Bruce Oxenford","f65670cd":"- From the above Box plot and quantile distribution, the outliers for `Total Points` can be observed and for `Total Points` the value of `quantile 0.98` will be taken to cap it.","9ad82f1a":"# IPL 2020 Score Prediction","e5e99d0f":"### Data Preprocessing","a903cd8e":"## Random Forest","1082328d":"- only 2 column 'player_of_match' and 'winner' left with missing value, which is quite reasonable to have if the match was cancelled or the result was not declared due to any circumstances.","33b154f2":"- Calculating the number of ipl match he played before","5726f636":"## Handling Missing Values","0cf112c5":"# Data Cleaning","abcba690":"- Predicting the total match points of each player who participated in IPL 2020 using the available past data from IPL 2008 to IPL 2019.","9b88344b":"- correct player names if it is written in different ways likes short and full names","ead1d9c9":"# Handling outliers","c53bc199":"## Data Preperation","f2cc01ee":"# Model Training"}}