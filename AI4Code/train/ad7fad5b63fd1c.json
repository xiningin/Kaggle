{"cell_type":{"b7909108":"code","c38b912a":"code","591b4f0c":"code","191cfe01":"code","027c7783":"code","c5a57a4c":"code","3d5bb335":"code","bfe1c212":"code","a8f89416":"code","1c128a3e":"code","cf545361":"code","68a4adfa":"code","17978bac":"code","fcc1c1ec":"code","d152d49d":"code","da1d506d":"code","b8f34974":"code","536b8b57":"code","14b4876a":"code","a35d353d":"markdown","c15ae077":"markdown","e567c226":"markdown","ac9e2808":"markdown","18f67ff1":"markdown","c4d725ea":"markdown","7c900a79":"markdown","ffb567f5":"markdown","6484992e":"markdown","2e51d8e1":"markdown","feadfb02":"markdown","89d69fc6":"markdown","81626cd4":"markdown"},"source":{"b7909108":"# Imports\nimport os\nfrom typing import Dict, List, Tuple\nfrom joblib import Parallel, delayed\nimport pandas as pd\nimport numpy as np\nfrom scipy.optimize.minpack import curve_fit\nfrom scipy.optimize import least_squares\nfrom xgboost import XGBRegressor","c38b912a":"# Helper functions\ndef load_kaggle_csv(dataset: str, datadir: str) -> pd.DataFrame:\n    \"\"\"Load and clean kaggle csv input\"\"\"\n    df = pd.read_csv(\n        f\"{os.path.join(datadir,dataset)}.csv\", parse_dates=[\"Date\"]\n    )\n    df['country'] = df[\"Country_Region\"]\n    if \"Province_State\" in df:\n        df[\"Country_Region\"] = np.where(\n            df[\"Province_State\"].isnull(),\n            df[\"Country_Region\"],\n            df[\"Country_Region\"] + \"_\" + df[\"Province_State\"],\n        )\n        df.drop(columns=\"Province_State\", inplace=True)\n    if \"ConfirmedCases\" in df:\n        df[\"ConfirmedCases\"] = df.groupby(\"Country_Region\")[\n            \"ConfirmedCases\"\n        ].cummax()\n    if \"Fatalities\" in df:\n        df[\"Fatalities\"] = df.groupby(\"Country_Region\")[\"Fatalities\"].cummax()\n    if not \"DayOfYear\" in df:\n        df[\"DayOfYear\"] = df[\"Date\"].dt.dayofyear\n    df[\"Date\"] = df[\"Date\"].dt.date\n    return df\n\ndef RMSLE(actual: np.ndarray, prediction: np.ndarray) -> float:\n    \"\"\"Calculate RMSLE between actual and predicted values\"\"\"\n    return np.sqrt(\n        np.mean(\n            np.power(np.log1p(np.maximum(0, prediction)) - np.log1p(actual), 2)\n        )\n    )","591b4f0c":"# TRAIN DATA\n# Kaggle input\ntrain = load_kaggle_csv(\n    \"train\", \"\/kaggle\/input\/covid19-global-forecasting-week-3\")\n# Augmentations\ncountry_health_indicators = (\n    pd.read_csv(\"\/kaggle\/input\/country-health-indicators\/country_health_indicators_v3.csv\")).rename(\n    columns={'Country_Region': 'country'})\n# Merge augmentation to kaggle input\ntrain = pd.merge(train, country_health_indicators, on=\"country\", how=\"left\")","191cfe01":"train.head()","027c7783":"# TEST DATA\ntest = load_kaggle_csv(\n    \"test\", \"\/kaggle\/input\/covid19-global-forecasting-week-3\")\ntest = pd.merge(test, country_health_indicators, on=\"country\", how=\"left\")","c5a57a4c":"def logistic(x: np.ndarray, x0: float, L: float, k: float) -> np.ndarray:\n    \"\"\"Simple logistic function\"\"\"\n    return L \/ (1 + np.exp(-k * (x - x0)))\n\n\ndef fit_single_logistic(x: np.ndarray, y: np.ndarray, maxfev: float) -> Tuple:\n    \"\"\"Fit with randopm jitter\"\"\"\n    # Fuzzy fitter\n    p0 = [np.median(x), y[-1], 0.1]\n    pn0 = p0 * (np.random.random(len(p0)) + [0.5, 1.0, 0.5])\n    try:\n        params, pcov = curve_fit(\n            logistic,\n            x,\n            y,\n            p0=pn0,\n            maxfev=maxfev,\n            sigma=np.maximum(1, np.sqrt(y)) * (0.1 + 0.9 * np.random.random()),\n            bounds=([0, y[-1], 0.01], [200, 1e6, 1.5]),\n        )\n        pcov = pcov[np.triu_indices_from(pcov)]\n    except (RuntimeError, ValueError):\n        params = p0\n        pcov = np.zeros(len(p0) * (len(p0) - 1))\n    y_hat = logistic(x, *params)\n    rmsle = RMSLE(y_hat, y)\n    return (params, pcov, rmsle, y_hat)\n\n\ndef fit_logistic(\n    df: pd.DataFrame,\n    n_jobs: int = 8,\n    n_samples: int = 80,\n    maxfev: int = 8000,\n    x_col: str = \"DayOfYear\",\n    y_cols: List[str] = [\"ConfirmedCases\", \"Fatalities\"],\n) -> pd.DataFrame:\n    def fit_one(df: pd.DataFrame, y_col: str) -> Dict:\n        best_rmsle = None\n        best_params = None\n        x = df[x_col].to_numpy()\n        y = df[y_col].to_numpy()\n        for (params, cov, rmsle, y_hat) in Parallel(n_jobs=n_jobs)(\n            delayed(fit_single_logistic)(x, y, maxfev=maxfev)\n            for i in range(n_samples)\n        ):\n            if rmsle >= (best_rmsle or rmsle):\n                best_rmsle = rmsle\n                best_params = params\n        result = {f\"{y_col}_rmsle\": best_rmsle}\n        result.update({f\"{y_col}_p_{i}\": p for i, p in enumerate(best_params)})\n        return result\n\n    result = {}\n    for y_col in y_cols:\n        result.update(fit_one(df, y_col))\n    return pd.DataFrame([result])\n\n\ndef predict_logistic(\n    df: pd.DataFrame,\n    x_col: str = \"DayOfYear\",\n    y_cols: List[str] = [\"ConfirmedCases\", \"Fatalities\"],\n):\n    def predict_one(col):\n        df[f\"yhat_logistic_{col}\"] = logistic(\n            df[x_col].to_numpy(),\n            df[f\"{col}_p_0\"].to_numpy(),\n            df[f\"{col}_p_1\"].to_numpy(),\n            df[f\"{col}_p_2\"].to_numpy(),\n        )\n\n    for y_col in y_cols:\n        predict_one(y_col)","3d5bb335":"train = pd.merge(\n    train, train.groupby(\n    [\"Country_Region\"], observed=True, sort=False\n).apply(lambda x: fit_logistic(x, n_jobs=8, n_samples=16, maxfev=16000)).reset_index(), on=[\"Country_Region\"], how=\"left\")\npredict_logistic(train)","bfe1c212":"def apply_xgb_model(train, x_columns, y_column, xgb_params):\n    X = train[x_columns].to_numpy()\n    y = train[y_column].to_numpy()\n    xgb_fit = XGBRegressor(**xgb_params).fit(X, y)\n    y_hat = xgb_fit.predict(X)\n    train[f\"yhat_xgb_{y_column}\"] = y_hat\n    return RMSLE(y, y_hat), xgb_fit","a8f89416":"xgb_params = dict(\n    gamma=0.2,\n    learning_rate=0.15,\n    n_estimators=100,\n    max_depth=11,\n    min_child_weight=1,\n    nthread=8,\n    objective=\"reg:squarederror\")\nx_columns = [\n    'DayOfYear', 'cases_growth', 'death_growth',\n    'Cardiovascular diseases (%)', 'Cancers (%)',\n    'Diabetes, blood, & endocrine diseases (%)', 'Respiratory diseases (%)',\n    'Liver disease (%)', 'Diarrhea & common infectious diseases (%)',\n    'Musculoskeletal disorders (%)', 'HIV\/AIDS and tuberculosis (%)',\n    'Malaria & neglected tropical diseases (%)',\n    'Nutritional deficiencies (%)', 'pneumonia-death-rates',\n    'Share of deaths from smoking (%)', 'alcoholic_beverages',\n    'animal_fats', 'animal_products', 'aquatic_products,_other',\n    'cereals_-_excluding_beer', 'eggs', 'fish,_seafood',\n    'fruits_-_excluding_wine', 'meat', 'milk_-_excluding_butter',\n    'miscellaneous', 'offals', 'oilcrops', 'pulses', 'spices',\n    'starchy_roots', 'stimulants', 'sugar_&_sweeteners', 'treenuts',\n    'vegetable_oils', 'vegetables', 'vegetal_products',\n    'hospital_beds_per10k', 'hospital_density', 'nbr_surgeons',\n    'nbr_obstetricians', 'nbr_anaesthesiologists', 'medical_doctors_per10k',\n    'bcg_coverage', 'bcg_year_delta', 'population',\n    'median age', 'population growth rate', 'birth rate', 'death rate',\n    'net migration rate', 'maternal mortality rate',\n    'infant mortality rate', 'life expectancy at birth',\n    'total fertility rate', 'obesity - adult prevalence rate',\n    'school_shutdown_1case', 'school_shutdown_10case',\n    'school_shutdown_50case', 'school_shutdown_1death', 'FF_DayOfYear',\n    'case1_DayOfYear', 'case10_DayOfYear', 'case50_DayOfYear', 'yhat_logistic_ConfirmedCases',\n    'yhat_logistic_Fatalities']\nxgb_c_rmsle, xgb_c_fit = apply_xgb_model(\n    train, x_columns, \"ConfirmedCases\", xgb_params)\nxgb_f_rmsle, xgb_f_fit = apply_xgb_model(\n    train, x_columns, \"Fatalities\", xgb_params)","1c128a3e":"imps=[]\ncols = []\nfor col, fit in ((\"ConfirmedCases\", xgb_c_fit), (\"Fatalities\", xgb_f_fit)):\n    df = pd.DataFrame(list(zip(x_columns, fit.feature_importances_)), columns=[f\"feature_{col}\", f\"importance_{col}\"])\n    cols.extend(df.columns.to_list())\n    imps.append(df.sort_values(by=f\"importance_{col}\", ascending=False).to_numpy())\nimportances = pd.DataFrame(np.hstack(imps), columns=cols, index=range(1, len(imps[0])+1))\nimportances.index.name=\"rank\"\nimportances.head(20)","cf545361":"def interpolate(alpha, x0, x1):\n    return x0 * alpha + x1 * (1 - alpha)\n\n\ndef RMSLE_interpolate(alpha, y, x0, x1):\n    return RMSLE(y, interpolate(alpha, x0, x1))\n\n\ndef fit_hybrid(\n    train: pd.DataFrame, y_cols: List[str] = [\"ConfirmedCases\", \"Fatalities\"]\n) -> pd.DataFrame:\n    def fit_one(y_col: str):\n        opt = least_squares(\n            fun=RMSLE_interpolate,\n            args=(\n                train[y_col],\n                train[f\"yhat_logistic_{y_col}\"],\n                train[f\"yhat_xgb_{y_col}\"],\n            ),\n            x0=(0.5,),\n            bounds=((0.0), (1.0,)),\n        )\n        return {f\"{y_col}_alpha\": opt.x[0], f\"{y_col}_cost\": opt.cost}\n\n    result = {}\n    for y_col in y_cols:\n        result.update(fit_one(y_col))\n    return pd.DataFrame([result])\n\n\ndef predict_hybrid(\n    df: pd.DataFrame,\n    x_col: str = \"DayOfYear\",\n    y_cols: List[str] = [\"ConfirmedCases\", \"Fatalities\"],\n):\n    def predict_one(col):\n        df[f\"yhat_hybrid_{col}\"] = interpolate(\n            df[f\"{y_col}_alpha\"].to_numpy(),\n            df[f\"yhat_logistic_{y_col}\"].to_numpy(),\n            df[f\"yhat_xgb_{y_col}\"].to_numpy(),\n        )\n\n    for y_col in y_cols:\n        predict_one(y_col)","68a4adfa":"train = pd.merge(\n    train,\n    train.groupby([\"Country_Region\"], observed=True, sort=False)\n    .apply(lambda x: fit_hybrid(x))\n    .reset_index(),\n    on=[\"Country_Region\"],\n    how=\"left\",\n)","17978bac":"predict_hybrid(train)","fcc1c1ec":"print(\n    \"Confirmed:\\n\"\n    f'Logistic\\t{RMSLE(train[\"ConfirmedCases\"], train[\"yhat_logistic_ConfirmedCases\"])}\\n'\n    f'XGBoost\\t{RMSLE(train[\"ConfirmedCases\"], train[\"yhat_xgb_ConfirmedCases\"])}\\n'\n    f'Hybrid\\t{RMSLE(train[\"ConfirmedCases\"], train[\"yhat_hybrid_ConfirmedCases\"])}\\n'\n    f\"Fatalities:\\n\"\n    f'Logistic\\t{RMSLE(train[\"Fatalities\"], train[\"yhat_logistic_Fatalities\"])}\\n'\n    f'XGBoost\\t{RMSLE(train[\"Fatalities\"], train[\"yhat_xgb_Fatalities\"])}\\n'\n    f'Hybrid\\t{RMSLE(train[\"Fatalities\"], train[\"yhat_hybrid_Fatalities\"])}\\n'\n)","d152d49d":"# Merge logistic and hybrid fit into test\ntest = pd.merge(\n    test, \n    train[[\"Country_Region\"] +\n          ['ConfirmedCases_p_0', 'ConfirmedCases_p_1', 'ConfirmedCases_p_2']+\n          ['Fatalities_p_0','Fatalities_p_1', 'Fatalities_p_2'] + \n          [\"Fatalities_alpha\"] + \n          [\"ConfirmedCases_alpha\"]].groupby(['Country_Region']).head(1), on=\"Country_Region\", how=\"left\")","da1d506d":"# Test predictions\npredict_logistic(test)\ntest[\"yhat_xgb_ConfirmedCases\"] = xgb_c_fit.predict(test[x_columns].to_numpy())\ntest[\"yhat_xgb_Fatalities\"] = xgb_f_fit.predict(test[x_columns].to_numpy())\npredict_hybrid(test)","b8f34974":"submission = test[[\"ForecastId\", \"yhat_hybrid_ConfirmedCases\", \"yhat_hybrid_Fatalities\"]].round().astype(int).rename(\n        columns={\n            \"yhat_hybrid_ConfirmedCases\": \"ConfirmedCases\",\n            \"yhat_hybrid_Fatalities\": \"Fatalities\",\n        }\n    )\nsubmission[\"ConfirmedCases\"] = np.maximum(0, submission[\"ConfirmedCases\"])\nsubmission[\"Fatalities\"] = np.maximum(0, submission[\"Fatalities\"])","536b8b57":"submission.head()","14b4876a":"submission.to_csv(\"submission.csv\", index=False)","a35d353d":"## Set up environment","c15ae077":"# Prepare submission","e567c226":"## Load data","ac9e2808":"# Logistic curve fit and XGBoost hybrid fit","18f67ff1":"# XGB boost regression","c4d725ea":"Now apply to each `Country_Region`:","7c900a79":"# Hybrid fit\n\nFrom logistic curve fit we have $\\hat{y}_L$: `yhat_logistic_ConfirmedCases`,and from XGB boost regression $\\hat{y}_X$: `yhat_xgb_ConfirmedCases`.\nHere we make a hybrid predictor\n\n $\\hat{y}_H = \\alpha \\hat{y}_L + (1-\\alpha) \\hat{y}_X$ \n \n by fitting alpha with `scipy.optmize.least_squares`. Similarly for `Fatalities`. First we define a few functions to do the work:","ffb567f5":"# Top boosted features","6484992e":"In previous weeks we found that a logistic curve fit works quite well on a per country level, and that adding a global XGBoost fit with [augmented data](https:\/\/www.kaggle.com\/nxpnsv\/country-health-indicators) is an improvement. The main idea for improvement in this notebook is to make an optimal interpolation between the two methods.","2e51d8e1":"# Logistic fit\n\nThe logistc fit uses `scipy.optimize.curvefit` to fit a [logistic function](https:\/\/en.wikipedia.org\/wiki\/Logistic_function):\n\n$$f(x) = \\frac{L}{1 + \\exp(-k(x - x0))}$$\n\nThe fit is done for each `Country_Region` separateley. Each fit is initialized with a first guess \n\n$$p_0(x_0, L, k)=(\\mathrm{median}(x), \\max(y), 0.1)*(U+0.5,U +1.0 ,U+0.5)$$\n\nwhere $U$ are uniform random numbers. The fits are repeated repeated $n_\\mathrm{samples}$ times and the fit producing the lowest RMSLE is used for prediction.  In addition, bounds are set as $x_0\\in[0, 200]$, $L\\in[\\max(y), 10^6]$, and $k\\in[0.1, 0.5]$. Furthermore, the error on $y$ is estimated to be $\\sigma_y=\\sqrt(y)(0.1+0.9U)$. This is the Poisson error with a random scaling to reduce assumptions on the optimal scaling with $\\sigma_y$. For speed these fits are done in parallel with `joblib`.\n\nFirst we define the required functions:","feadfb02":"# Predict test cases","89d69fc6":"# Compare aproaches","81626cd4":"Now apply fit to each `Country_Region`. This takes a few minutes..."}}