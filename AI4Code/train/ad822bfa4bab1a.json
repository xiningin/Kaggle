{"cell_type":{"a9f783de":"code","75a628ba":"code","ec273439":"code","78f9264c":"code","d686642c":"code","8a164d02":"code","d1de3771":"code","bbe95327":"code","88e93b9e":"code","586c457f":"code","9c30425b":"code","5e382f75":"code","57cfb637":"code","f6ae227c":"code","2b531ecf":"code","4cf66c67":"code","69410704":"code","439d6568":"code","134c9f61":"code","74dc8a70":"code","553d7e68":"code","fa636fa0":"code","2a44dc3b":"code","8d5406d9":"code","32285df1":"code","71f209e8":"code","6de8927b":"code","fc2cd9d4":"code","27b8ce68":"code","7089042b":"code","29654717":"code","31ca04c3":"markdown"},"source":{"a9f783de":"%config Completer.use_jedi = False","75a628ba":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","ec273439":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","78f9264c":"sample_submission_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\ntrain_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","d686642c":"sample_submission_df.head()","8a164d02":"train_df.head()","d1de3771":"train_df.to_numpy().max()","bbe95327":"train_df.info()","88e93b9e":"train_df.isnull().values.any()","586c457f":"test_df.head()","9c30425b":"X, y = train_df.iloc[:, 1:], train_df['label'].values\ntest_X = test_df.iloc[:,:]\nsubmission_indices = test_df.index.values + 1","5e382f75":"submission_indices","57cfb637":"from sklearn import preprocessing\nmin_max_scaler = preprocessing.MinMaxScaler()\nX = min_max_scaler.fit_transform(X)\ntest_X = min_max_scaler.fit_transform(test_X)","f6ae227c":"X","2b531ecf":"test_X.shape","4cf66c67":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.01, random_state=42)\nprint(X_train.shape, X_val.shape, y_train.shape, y_val.shape)","69410704":"import tensorflow as tf\n\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt","439d6568":"def CNN(input_shape=(784), classes=10):\n    \n    x_input = layers.Input(shape=input_shape)\n    X = layers.Reshape(target_shape=(28, 28, 1))(x_input)\n    \n    X = layers.Conv2D(filters=32, kernel_size=(3, 3), strides=(1,1), padding='same')(X)\n    X = layers.BatchNormalization(axis=3)(X) \n    X = layers.Activation('relu')(X)\n    X = layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(X)\n    X = layers.Conv2D(filters=64, kernel_size=(3, 3), strides=(1,1), padding='same')(X)\n    X = layers.BatchNormalization(axis=3)(X) \n    X = layers.Activation('relu')(X)\n    X = layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(X)\n    \n    X = layers.Flatten()(X)\n    X = layers.Dense(256, activation='relu')(X)\n    X = layers.Dropout(rate=0.4)(X)\n    X = layers.Dense(128, activation='relu')(X)\n    X = layers.Dropout(rate=0.4)(X)\n    X = layers.Dense(classes)(X)\n    \n    model = models.Model(inputs = x_input, outputs = X, name='MNIST_CNN')\n    return model","134c9f61":"model = CNN(input_shape = (784), classes = 10)","74dc8a70":"model.summary()","553d7e68":"def scheduler(epoch, lr):\n    if epoch < 5:\n        print('lr: ', 0.001)\n        return 0.001\n    else:\n        print('lr: ', 0.0002)\n        return 0.0002","fa636fa0":"lrSchedulerCallback = tf.keras.callbacks.LearningRateScheduler(scheduler)","2a44dc3b":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nhistory = model.fit(\n    X_train, y_train, \n    epochs = 15,\n    batch_size = 64,\n    validation_data = (X_val, y_val),\n    validation_batch_size = 64,\n    callbacks = [lrSchedulerCallback])","8d5406d9":"import matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow, imread","32285df1":"def plot_graphs(history, string):\n    plt.plot(history.history[string])\n    plt.plot(history.history['val_'+string])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(string)\n    plt.legend([string, 'val_'+string])\n    plt.show()","71f209e8":"plot_graphs(history, 'accuracy')\nplot_graphs(history, \"loss\")","6de8927b":"output = model(test_X)","fc2cd9d4":"output = tf.argmax(output, 1)","27b8ce68":"output.numpy()","7089042b":"submission = pd.DataFrame({'ImageId': submission_indices, 'Label': output.numpy()})\nsubmission.to_csv('submission.csv', index=False)","29654717":"test = pd.read_csv('submission.csv')\ntest","31ca04c3":"### CNN"}}