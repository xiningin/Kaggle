{"cell_type":{"25556bb8":"code","734bcb57":"code","0e429c45":"code","94406e4d":"code","e32813ef":"code","257feaa2":"code","4b4ba210":"code","8a159024":"code","3b82ce82":"code","8ad32feb":"code","46f1c602":"code","7c58f1a5":"code","bada0081":"code","dec23c6c":"code","00ec97c7":"code","62d73aed":"code","62b8f9a0":"code","38c4be3a":"code","ac031d7d":"code","5e5ab963":"code","5dc94bf1":"code","26227c76":"markdown","c581e735":"markdown","21fdff52":"markdown","0bc5355c":"markdown","a8e24f59":"markdown","2ee90bd9":"markdown","92be116a":"markdown","b5a6953f":"markdown","56e9cf77":"markdown","d2f7e3fa":"markdown","3421957d":"markdown","afe14958":"markdown","d64c0d9a":"markdown","abac23a4":"markdown","20c48796":"markdown","66727cee":"markdown","4ebdd610":"markdown"},"source":{"25556bb8":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport numpy as np\nimport requests\nimport json\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure","734bcb57":"import warnings\nwarnings.filterwarnings(\"ignore\")","0e429c45":"import warnings\nwarnings.filterwarnings(\"ignore\")","94406e4d":"apikey = 'ad88ad93-b2db-485a-a0c2-82da759612b4'\nbaseURL = \"https:\/\/content.guardianapis.com\/search?\"\nsearchstring = \"q=covid%20OR%20coronavirus%20OR%20pandemic\" \nfromdate = \"2021-01-01\" #search date starts from this year\npage = 1\n\n#page through all results using for loop\nurl_list = []\nfor page in range(1,566):\n    url = baseURL+\"from-date=\"+fromdate+\"&page=\"+str(page)+'&'+searchstring+\"&api-key=\"+apikey\n    url_list += [url]","e32813ef":"def getArticleData(url):\n    response = requests.get(url)\n    data = json.loads(response.content)\n    result = data['response']['results']\n    return result","257feaa2":"#result = [] #list that contains all results\n#for i in url_list:\n    #result = result+[getArticleData(i)]  \n    \n#title = []\n##for k in result:\n    #for r in k:\n        ##title += [r['webTitle']]  ","4b4ba210":"articles_df = pd.read_csv('..\/input\/guardian-covidrelated-articles\/covid-related articles')\narticles_df.head()","8a159024":"# News about Australia in the dataframe\naus_df = articles_df[articles_df.Title.str.contains('Australia')|articles_df.SectionID.str.contains('australia') ]\naus_df = aus_df.reset_index()\naus_df.head()","3b82ce82":"# News about the uk the dataframe\nuk_df = articles_df[articles_df.Title.str.contains('UK')|articles_df.SectionID.str.contains('uk') ]\nuk_df = uk_df.reset_index()\nuk_df.head()","8ad32feb":"#Find out numbers of keyword-containing articles\nkeywords = ['case', 'vaccine', 'lockdown', 'job', 'business', 'quarantine', 'death']\naus_word_list =[]\nuk_word_list = []\n\nfor word in keywords:\n    aus_numbers = aus_df.Title.str.contains(word).sum()\n    uk_numbers = uk_df.Title.str.contains(word).sum()\n    aus_word_list.append(aus_numbers)\n    uk_word_list.append(uk_numbers)","46f1c602":"#take a look\nprint(aus_word_list)\nprint(uk_word_list)","7c58f1a5":"labels = ['case', 'vaccine', 'lockdown', 'job', 'business','quarantine','death']\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 6))\naxes[0].pie(uk_word_list,\n            labels = labels ,\n            autopct='%1.1f%%')\naxes[0].set_title('UK news title keywords distribution')\naxes[1].pie(aus_word_list,\n            labels = labels ,\n            autopct='%1.1f%%')\naxes[1].set_title('Australian news title keywords distribution')","bada0081":"from gensim.models import TfidfModel\nfrom gensim.corpora import Dictionary\nfrom gensim.utils import tokenize\nfrom gensim.utils import simple_preprocess\nfrom gensim.corpora.textcorpus import remove_stopwords\n#from gensim.summarization import keywords\nfrom gensim.models.ldamodel import LdaModel\nimport pyLDAvis\nimport pyLDAvis.gensim_models","dec23c6c":"tokens = list(tokenize(articles_df['Title'][0], lowercase = True))","00ec97c7":"articles_df['terms'] = [remove_stopwords(simple_preprocess(title)) for title in articles_df['Title']]\narticles_df.head()","62d73aed":"# get the histogram of all words\nhist = {}\nfor terms in articles_df['terms']:\n    for word in terms:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n            \n# filter values lower than 100        \nhist_over_100 = {}\nfor key, value in hist.items():\n    if value >100:\n        hist_over_100[key] = value\n        \n# plot histogram from dictionary\nplt.bar(hist_over_100.keys(),hist_over_100.values())\nplt.xticks(rotation = 'vertical')\nplt.show()","62b8f9a0":"vocab = Dictionary(articles_df['terms'])\ncorpus = [vocab.doc2bow(terms) for terms in articles_df['terms']]","38c4be3a":"# create LDA model witg corpus and vocab, and define the topic numbers\nlda_model = LdaModel(corpus = corpus, id2word = vocab, num_topics = 20, random_state = 1)","ac031d7d":"# show_topic function returns a list with format of [topic number, topic content]\nfor topic in lda_model.show_topics(num_topics = 3, num_words = 15):\n    print(\"Topic \"+str(topic[0])+\"\\n\"+topic[1]+\"\\n\")","5e5ab963":"doc = articles_df['Title'][1]\nprint(\"doc:\\n\",doc)\ndoc_topics = lda_model.get_document_topics(corpus[2] ,minimum_probability=0.3)\nprint(\"doc_topics (Topic No.\/Probability):\\n\",doc_topics)\n\nfor topic in doc_topics:\n    terms = [term for term, prob in lda_model.show_topic(topic[0])]\n    print(terms)","5dc94bf1":"pyLDAvis.enable_notebook()\nvis = pyLDAvis.gensim_models.prepare(lda_model, corpus, vocab)\nvis","26227c76":"\u9019\u90e8\u4efd\u7684\u5206\u6790\u4e2d\uff0c\u6211\u5011\u60f3\u8981\u5229\u7528LDA\u6a21\u578b\u4f86\u5206\u6790\u6574\u4efd\u8cc7\u6599\u7684\u4e3b\u984c\u5206\u4f48\u60c5\u5f62\uff0c\u4f86\u5354\u52a9\u6211\u5011\u7406\u89e3\u65b0\u51a0\u75ab\u60c5\u5728\u5a92\u9ad4\u5831\u5c0e\u4e2d\u5177\u6709\u54ea\u4e9b\u4e0d\u540c\u7684\u9762\u5411\u3002","c581e735":"__Analysis__","21fdff52":"\u9019\u662f\u4e00\u500b 5650 x 3 \u7684DataFrame\uff1a\n\n\n|Variable Name|Meaning|\n|-------------|-------|\n|SectionID|Article Section|\n|Title|Article Title|","0bc5355c":"\u9019\u6a23\u770b\u4e26\u4e0d\u76f4\u89c0\uff0c\u6240\u4ee5\u6211\u5011\u5c07\u4ed6\u88fd\u4f5c\u6210\u5713\u9905\u5716\u770b\u4e00\u4e0b\u6bd4\u4f8b\uff1a","a8e24f59":"\u6e05\u6d17\u8cc7\u6599\uff1a\u7528 Title \u4ee5\u53ca SectionID \u4f86\u904e\u6ffe\u51fa\u82f1\u570b\u8ddf\u6fb3\u6d32\u7684\u65b0\u805e","2ee90bd9":"\u4ee5\u4e0b\u6211\u5c07\u5f9e\u885b\u5831\u7684api\u7372\u53d6\u8cc7\u6599\u7684\u904e\u7a0b\u4e5f\u4e00\u4f75\u653e\u5728\u6b64\u7bc7\u5206\u6790\u88e1\uff0c\u4f46\u5c07\u6700\u5f8c\u4e00\u500b\u6b65\u9a5fcomment\u8d77\u4f86\n\n\uff08\u56e0\u70ba\u5982\u679c\u771f\u7684\u5f9e\u96f2\u7aef\u6293\u53d6\u6703\u5c0e\u81f4kaggle overiterate\uff09","92be116a":"\u6709\u8a71\u5728\u5148\uff0c\u7531\u65bc\u8cc7\u6599\u662f\u5f9e\u55ae\u4e00\u5a92\u9ad4\u89d2\u5ea6\u51fa\u767c\uff0c\u6211\u5011\u53ef\u4ee5\u770b\u5230\u7684\u662f\u5169\u570b\u6bd4\u8f03\u666e\u904d\u7684\u8da8\u52e2\u3001\u73fe\u8c61\uff0c\u800c\u4e0d\u662f\u7279\u5b9a\u7684\u4e8b\u4ef6\u3002 \u9019\u4e9b\u5206\u6790\u8207\u5047\u8a2d\u7684\u50f9\u503c\u5728\u65bc __\u4ed6\u5011\u80fd\u5920\u88ab\u9032\u4e00\u6b65\u5be9\u67e5\uff0c\u800c\u975e\u4ed6\u5011\u4ee3\u8868\u4e8b\u5be6__\u3002\n\n1.  \u5728\u5169\u500b\u5716\u4e4b\u4e2d\uff0c\u95dc\u9375\u5b57__\"vaccine\"__ \u90fd\u4f54\u4e86\u6700\u5927\u7684\u90e8\u5206\uff08\u7686\u8d85\u904e1\/3\uff09\u3002\u9019\u986f\u793a\u4e86\u5f9e2021\u8d77\uff0c\u5728\u5169\u500b\u570b\u5bb6\u4e2d\u75ab\u82d7\u90fd\u662f\u500b\u5831\u5c0e\u71b1\u5ea6\u975e\u5e38\u9ad8\u7684\u4e3b\u984c\u3002\n\n2. \u5728\u82f1\u570b\u7684\u5713\u9905\u5716\u4e2d\uff0c__\"lockdown\"__ \u7684\u6bd4\u4f8b\u8f03\u6fb3\u6d32\u7684\u9ad8\uff0c\u6211\u5011\u53ef\u4ee5\u63a8\u65b7\u82f1\u570b\u7684\u5c01\u57ce\u8f03\u6fb3\u6d32\u983b\u7e41\u3002\n\n3.  __\"death\"__ \u5728\u5169\u570b\u7684\u5831\u5c0e\u982d\u689d\u6578\u91cf\u4e2d\u6bd4\u4f8b\u975e\u5e38\u61f8\u6b8a\uff0c\u82f1\u570b\u670913.7% \u800c\u6fb3\u6d32\u53ea\u67091.8%\u3002\u9019\u53ef\u80fd\u4ee3\u8868\u6b7b\u4ea1\u6848\u4f8b\u6578\u82f1\u570b\u6bd4\u6fb3\u6d32\u591a\u4e0a\u8a31\u591a\uff0c\u56e0\u800c\u88ab\u5a92\u9ad4\u5831\u5c0e\u6bd4\u4f8b\u9ad8\u4e0a\u8a31\u591a\u3002\n\n4. __\"quarantine\"__ \u5728\u6fb3\u6d32\u7684\u6bd4\u4f8b\u6bd4\u82f1\u570b\u591a\u3002\u9019\u6709\u53ef\u80fd\u662f\u6fb3\u6d32\u5a92\u9ad4\u8f03\u8457\u91cd\u5728\u5831\u5c0e\u9694\u96e2\u653f\u7b56\u3001\u63aa\u65bd\u7b49\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6fb3\u6d32\u672c\u8eab\u9694\u96e2\u653f\u7b56\u8f03\u591a\u8b8a\uff0c\u56e0\u6b64\u5a92\u9ad4\u5831\u5c0e\u6578\u91cf\u8f03\u5927\u91cf\u3002\u7576\u7136\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u82f1\u570b\u7684\u76f8\u95dc\u5831\u5c0e\u88ab\u5176\u4ed6\u4e3b\u984c\u7d66\u7a00\u91cb\u6389\u3002\n\n5. __\"business\"__ \u4e00\u8a5e\u5728\u82f1\u570b\u7684\u982d\u689d\u4e2d\u51fa\u73fe\u7684\u6bd4\u4f8b\u6bd4\u6fb3\u6d32\u591a\u4e86\u7d045%\u3002\u5f9e\u5a92\u9ad4\u6bd4\u8f03\u8457\u91cd\u5546\u696d\u65b9\u9762\u5831\u5c0e\u7684\u73fe\u8c61\u6211\u5011\u6216\u8a31\u53ef\u4ee5\u63a8\u65b7\u82f1\u570b\u7684\u7522\u696d\u53d7\u5230\u75ab\u60c5\u885d\u64ca\u8f03\u986f\u8457\u3002","b5a6953f":"__Visualize the Spread of Topics__","56e9cf77":"### \u7b2c\u4e00\u90e8\u5206\uff1a\u5169\u570b\u982d\u689d\u75ab\u60c5\u95dc\u9375\u5b57\u6bd4\u4f8b\u5206\u6790\n\n\u6211\u5011\u5f80\u5f80\u53ef\u4ee5\u5f9e\u5a92\u9ad4\u5831\u5c0e\u7684\u89d2\u5ea6\u53bb\u7aba\u898b\u4e00\u500b\u570b\u5bb6\u767c\u751f\u7684\u4e8b\u4ef6\u4ee5\u53ca\u60c5\u6cc1\u3002\u885b\u5831\uff08The Guardian)\u662f\u4e00\u7bc7\u5728\u6fb3\u6d32\u4ee5\u53ca\u82f1\u570b\u90fd\u6709\u99d0\u9ede\u7684\u5a92\u9ad4\uff0c\u672c\u5206\u6790\u7684\u7b2c\u4e00\u90e8\u4efd\u662f\u7528\u95dc\u9375\u8a5e\u51fa\u73fe\u7684\u6b21\u6578\u4f86\u5206\u6790\u65b0\u51a0\u75ab\u60c5\u5c0d\u5169\u500b\u570b\u5bb6\u7522\u751f\u4ec0\u9ebc\u4e0d\u540c\u7684\u5f71\u97ff\u3002\n\n\u6240\u4ee5\uff0c\u6211\u5011\u80fd\u5c07\u7b2c\u4e00\u90e8\u5206\u7684\u554f\u984c\u8a6e\u91cb\u6210\uff1a\n__\u5f9e2021\u5e74\u958b\u59cb\uff0c\u5728\u82f1\u570b\u8207\u6fb3\u6d32\uff0c\u4ec0\u9ebc\u6a23\u7684\u95dc\u9375\u5b57\u6700\u983b\u7e41\u5730\u51fa\u73fe\u5728\u5169\u570b\u7684\u65b0\u805e\u982d\u689d\u4e2d\uff1f__\n\n\u5728\u9019\u500b\u5206\u6790\u4e2d\uff0c\u6211\u5171\u6311\u9078\u4e86\u4e03\u500b\u95dc\u9375\u5b57\uff1a\n\n- case\n\n- vaccine \n\n- lockdown \n\n- job\n\n- business\n\n- quarantine\n\n- death\n\n\u85c9\u8457\u5206\u6790\u4ed6\u5011\u5728\u982d\u689d\u51fa\u73fe\u7684\u983b\u7387\uff0c\u6211\u5e0c\u671b\u80fd\u5920\u770b\u51fa\u5c0d\u65bc\u6b64\u6b21\u75ab\u60c5\u5c0d\u65bc\u5169\u500b\u570b\u5bb6\u7684\u5f71\u97ff\u6709\u54ea\u4e9b\u7570\u540c\u3002","d2f7e3fa":"\u5c0b\u8a2a\u6240\u6709\u6a19\u984c\uff0c\u5c07\u542b\u6709\u4e0d\u540c\u95dc\u9375\u5b57\u7684\u65b0\u805e\u6a19\u984c\u7684\u6578\u91cf\u5206\u5225\u65b0\u589e\u5230aus_word_list\u4ee5\u53cauk_word_list","3421957d":"__\u5c07LDA\u6a21\u578b\u5957\u5230\u6211\u5011\u7684Corpus\u4e0a__","afe14958":"### \u7b2c\u4e8c\u90e8\u5206\uff1a\u4f7f\u7528LDA\u4e3b\u984c\u6a21\u578b\u67e5\u770b\u4e3b\u984c\u5206\u4f48\u60c5\u5f62","d64c0d9a":"__\u7c97\u7565\u770b\u4e00\u4e0b\u7279\u5b9adocument\u5c6c\u65bc\u67d0\u500b\u4e3b\u984c\u7684\u6a5f\u7387\u70ba\u4f55__","abac23a4":"\u6211\u5011\u5f97\u5230\u5169\u500blist\uff0c\u5206\u5225\u662f\u6fb3\u6d32\u4ee5\u53ca\u82f1\u570b\u65b0\u51a0\u75ab\u60c5\u6587\u7ae0\u6a19\u984c\u4e2d\uff0c\u64c1\u6709\u5404\u500b\u95dc\u9375\u5b57\u7684\u6587\u7ae0\u6578\u91cf\uff1a","20c48796":"__\u7d50\u675f\u6293\u53d6\u5f8c\uff0c\u5c31\u53ef\u4ee5\u958b\u59cb\u6e05\u6d17\u5566\uff01\uff08\u4e0b\u9762\u6211\u628a\u672c\u5730\u6293\u597d\u7684csv\u6a94\u4e0a\u50b3\uff0c\u672c\u6b21\u5206\u6790\u662f\u4ee5\u9019\u500b\u8cc7\u6599\u96c6\u70ba\u4f86\u6e90\uff09__","66727cee":"\u5c07\u8a5e\u983b\u88fd\u6210\u9577\u689d\u5716\u770b\u4e00\u4e0b\uff1a\n","4ebdd610":"__Overall Topic Analysis:__\n\n1. \u5f9e\u4e3b\u984c\u5206\u4f48\u5716\u4f86\u770b\uff0c\u65b0\u51a0\u75ab\u60c5\u5728\u885b\u5831\u4e0a\u7684\u6587\u7ae0\u4e3b\u984c\u4e26\u6c92\u6709\u660e\u986f\u7684\u767c\u6563\u3002\u5e7e\u4e4e\u6240\u6709\u7684\u4e3b\u984c\u90fd\u6709covid, vaccine\u9019\u4e9bterm\u3002\n\n2. \u8a31\u591a\u4e3b\u984c\u69cb\u6210\u5305\u542buk\u3001Johnson\u3001Boris\u7b49\u8a5e\u51fa\u73fe\uff0c\u5f9e\u9019\u4e9b\u95dc\u9375\u8a5e\u770b\u4f86\u53ef\u4ee5\u8aaa\u82f1\u570b\u6587\u7ae0\u5728\u6574\u9ad4\u7684\u885b\u5831\u5e73\u53f0\u4e2d\u8f03\u5177\u4e3b\u5c0e\u6027\u3002\n\n3. \u6709\u8a31\u591a\u4e3b\u984c\u5177\u6709\u5730\u57df\u6027\uff0c\u50cf\u662f\uff1aeurope\u3001india\u3001uk\u3001(new)zealand\u7b49\u6210\u70ba\u5283\u5206\u4e3b\u984c\u7684\u95dc\u9375\u8a5e\u3002"}}