{"cell_type":{"d71680d8":"code","db2be2a3":"code","c5332175":"code","de746173":"code","da7e3932":"code","d510d1f3":"code","356652b0":"code","7df7759e":"code","3fc164ae":"code","09a9afff":"code","3c4a1b78":"code","76da2e8b":"code","3fe999b6":"code","98f2538c":"code","87d5151d":"code","9cf20602":"code","306542a5":"code","b5c1db7a":"code","36c27a6e":"code","968778a8":"code","d8065ede":"code","4cb6e0d7":"code","abdea6be":"code","6a9836d3":"code","2226b3b4":"code","6344fa38":"code","ac808c84":"code","142ea9dc":"code","56a0e363":"code","9abe2b13":"code","79a2d8d7":"code","a0ad8377":"code","b1f4305c":"code","c0e95b73":"code","d9715bec":"code","b810fc13":"code","f174df26":"code","8cf6ebd7":"code","9f5ecc96":"code","f875015e":"code","e4e8ac1f":"code","75db0625":"code","38a0f947":"code","a6394721":"code","3ffdb8d8":"code","5130ed7d":"code","8b3d9dca":"code","cb59dbf1":"code","9a5d6f38":"code","ac5f5757":"code","c71b645b":"code","52b41829":"code","af60b8c9":"code","4d6080c0":"code","4b310b11":"code","70e1d1a8":"code","0b3b4906":"code","a67eb148":"code","b5cbda65":"code","9117a2c6":"code","a2cd6502":"code","f2e16893":"code","11036d8a":"markdown","c909f3ee":"markdown","b5ad9b50":"markdown","a326c21b":"markdown","fb941044":"markdown","3c2a2878":"markdown","0b3c6913":"markdown","2e5197b7":"markdown"},"source":{"d71680d8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","db2be2a3":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","c5332175":"sns.pairplot(train.sample(1000))","de746173":"train.tail()","da7e3932":"test.tail()","d510d1f3":"sample_submission.tail()","356652b0":"train.shape","7df7759e":"train.isnull().sum()","3fc164ae":"test.isnull().sum()","09a9afff":"train.describe()","3c4a1b78":"train.describe(exclude='number')","76da2e8b":"sns.boxplot(x=train['target'])","3fe999b6":"train.loc[train.target<5]","98f2538c":"len(train.loc[train.target<5])\/len(train)","87d5151d":"train = train.drop(train[train.target<5].index)","9cf20602":"sns.boxplot(x=train['target'])","306542a5":"train.loc[train.target>10]","b5c1db7a":"len(train.loc[train.target>10])\/len(train)","36c27a6e":"train = train.drop(train[train.target>10].index)","968778a8":"sns.boxplot(x=train['target'])","d8065ede":"train.loc[train.cont8>0.9]","4cb6e0d7":"len(train.loc[train.cont8>0.9])\/len(train)\n","abdea6be":"train = train.drop(train[train.cont8>0.9].index)","6a9836d3":"sns.boxplot(x=train['cont8'])","2226b3b4":"len(train.loc[train.cont8>0.8])\/len(train)\n","6344fa38":"train = train.drop(train[train.cont8>0.8].index)","ac808c84":"sns.boxplot(x=train['cont8'])","142ea9dc":"train = train.drop(train[train.cont8>0.7].index)","56a0e363":"sns.boxplot(x=train['cont8'])","9abe2b13":"len(train.loc[train.cont8<0.1])\/len(train)","79a2d8d7":"train = train.drop(train[train.cont8<0.1].index)","a0ad8377":"sns.boxplot(x=train['cont8'])","b1f4305c":"1-len(train)\/300000 ","c0e95b73":"train.shape","d9715bec":"list(train.columns)","b810fc13":"train.drop(train[['id','cat0',\n 'cat1',\n 'cat2',\n 'cat3',\n 'cat4',\n 'cat5',\n 'cat6',\n 'cat7',\n 'cat8',\n 'cat9']],axis=1,inplace=True)","f174df26":"test.drop(test[['id','cat0',\n 'cat1',\n 'cat2',\n 'cat3',\n 'cat4',\n 'cat5',\n 'cat6',\n 'cat7',\n 'cat8',\n 'cat9']],axis=1,inplace=True)\n","8cf6ebd7":"from sklearn.model_selection import train_test_split\n# select split parameter\nx = train.drop(['target'], axis=1)\ny = train.target","9f5ecc96":"x_train, x_test ,y_train , y_test = train_test_split(x,y, test_size=0.7, random_state= 50)","f875015e":"from sklearn.ensemble import RandomForestRegressor\nregr = RandomForestRegressor(max_depth=2, random_state=0)\n","e4e8ac1f":"regr.fit(x_train, y_train)","75db0625":"preds = regr.predict(x_test)","38a0f947":"preds[:-5]","a6394721":"from sklearn.metrics import mean_squared_error\n\nmean_squared_error(y_test, preds)","3ffdb8d8":"from sklearn.metrics import mean_absolute_error\n\nmean_absolute_error(y_test, preds)","5130ed7d":"from sklearn.metrics import r2_score\nr2_score(y_test, preds)","8b3d9dca":"from sklearn.neighbors import KNeighborsRegressor\nneigh = KNeighborsRegressor(n_neighbors=3)","cb59dbf1":"neigh.fit(x_train, y_train)","9a5d6f38":"pred = neigh.predict(x_test)","ac5f5757":"pred[:-5]","c71b645b":"mean_squared_error(y_test, pred)","52b41829":"mean_absolute_error(y_test, pred)","af60b8c9":"r2_score(y_test, pred)","4d6080c0":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()","4b310b11":"lr.fit(x_train, y_train)","70e1d1a8":"pre = lr.predict(x_test)","0b3b4906":"pre[:5]","a67eb148":"mean_squared_error(y_test, pre)","b5cbda65":"mean_absolute_error(y_test, pre)","9117a2c6":"r2_score(y_test, pre)","a2cd6502":"test_preds = regr.predict(test)\ntest_preds","f2e16893":"sample_submission['target'] = test_preds\nsample_submission.to_csv('submission.csv', index=False)","11036d8a":"**EDA and cleaning**\n","c909f3ee":"### Look at data...","b5ad9b50":"**Random Forest Regressor**","a326c21b":"### Load data...","fb941044":"**KNeighbors Regressor**","3c2a2878":"# Do your stuff...\n\n### Deleverables\n- EDA\n    - What's going on?\n    - Show me the data...\n    - Bonus: Other \/ Etc...\n- Model\n    - [RandomForestRegressor()](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestRegressor.html)\n    - Bonus: [KNeighborsRegressor()](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsRegressor.html)\n    - Bonus: Other \/ Etc...\n- Evaluation\n    - mean_squared_error()\n    - Bonus: Other \/ Etc...\n- RAPIDS Bonus\n    - Apply RAPIDS ([Starter Notebook](https:\/\/www.kaggle.com\/tunguz\/tps-feb-2021-rapids-starter))\n    - Replace pandas with cuDF & sklearn with cuML","0b3c6913":"**split**","2e5197b7":"**Models**"}}