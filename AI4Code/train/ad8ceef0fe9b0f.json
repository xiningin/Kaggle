{"cell_type":{"07529700":"code","df5b2959":"code","ad06835a":"code","427f9057":"code","a1e0419f":"code","4012c424":"code","03dbb082":"code","850a4a3b":"code","58175182":"code","da71e58c":"code","0c2673fa":"code","d7cb0d85":"code","4c618eb1":"code","014df1a8":"code","4b2fff71":"code","71e32a81":"code","6fed1543":"code","f837f9a5":"code","a618c1c0":"code","cb034fe1":"code","65be8cee":"code","8ca2fb64":"code","c885adc2":"code","14f298b9":"code","5244b930":"code","4a3722fb":"code","3dad9dc1":"code","48dd88b6":"code","7cb2bc28":"code","bc745aac":"code","6db652a8":"code","00807973":"code","818ee7ac":"code","05bcf065":"code","f4035af3":"code","16497c8a":"code","285924a8":"code","379e7c9d":"code","7b3ed9bb":"code","4ac4bbda":"code","1d191432":"code","4d54115c":"code","b4702594":"code","8d6a906d":"code","58ef9163":"code","19a4ec6d":"code","3c0bd5a4":"code","f6b366c6":"code","192afcb4":"code","0f1d794a":"markdown","d11014cc":"markdown","a98cb54b":"markdown","41d61523":"markdown","3c972b3e":"markdown","52fb5de4":"markdown","54e6d546":"markdown","1f7e78bf":"markdown","443f10b1":"markdown","d55cbad8":"markdown","ed603bc6":"markdown","ace1e30e":"markdown","571be980":"markdown","162e829d":"markdown","7cdf1658":"markdown","579760d4":"markdown","6bcabcb8":"markdown","2ab8a20a":"markdown","94cc72c7":"markdown","bcfe249d":"markdown","69b3960c":"markdown","a2626fc2":"markdown","509a550e":"markdown","2deb2db9":"markdown","6ab97e57":"markdown","00705b1c":"markdown"},"source":{"07529700":"#Basic libraries that we will need, you can copy - paste it:)\n\nimport pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport bq_helper\n\nfrom google.cloud import bigquery\nclient = bigquery.Client()","df5b2959":"#Exploring the data\nquery_= \"\"\"\nSELECT\n--Selecting all columns\n  * \nFROM\n--You can select any day or month you want, the data will be the same because Google analytics collects data based on the same features\n  `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\nLIMIT\n  10\n  \"\"\"\nsafe_query_job= client.query(query_)\nsummary_df= safe_query_job.to_dataframe()\nsummary_df","ad06835a":"#Unsetting the data and seeing all features \n# UNNEST, ARRAY, STRUCT documenation - https:\/\/cloud.google.com\/bigquery\/docs\/reference\/standard-sql\/arrays\n\n# select first couple of columns that are not nested(basically which are not a mess)\nquery_part1 = \"\"\"\nselect \nvisitorId, visitNumber, visitId, visitStartTime, date\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n\n\n  \"\"\"\nsafe_query_job= client.query(query_part1)\nquery_part1_df= safe_query_job.to_dataframe()\n\n# unnest totals column\nquery_totals = \"\"\"\nselect * from unnest(array(\n                            SELECT\n                            totals\n                            FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n                            \n                           )\n                    )\n  \"\"\"\nsafe_query_job= client.query(query_totals)\ntotals_df= safe_query_job.to_dataframe()\n\n\n\nquery_trafficSource = \"\"\"\n--This is how you tell computer to put unnested data into separate columns\nselect  referralPath,\tcampaign,\tsource,\tmedium,\tkeyword,\tadContent,\tisTrueDirect, campaignCode\n        from unnest(array(\n                            SELECT\n                            trafficSource\n                            FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n                            \n                           )\n                    )\n  \"\"\"\nsafe_query_job= client.query(query_trafficSource)\ntrafficSource_df= safe_query_job.to_dataframe()\n\nquery_trafficSource_2 = \"\"\"\n--Unnesting data adwordClickinfo. Normaly the data looks something like this : trafficSource.adwordsclickInfo.andsomething,\n--So that is why we need to unnest it in three levels.\nselect *\nfrom unnest(array(\n                    select  adwordsClickInfo\n                            from unnest(array(\n                                                SELECT\n                                                trafficSource\n                                                 FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n                                                \n                                               )\n                                        )\n                 )\n            )\n  \"\"\"\nsafe_query_job= client.query(query_trafficSource_2)\nquery_trafficSource_2_df= safe_query_job.to_dataframe()\n\n #And now I'm doing copy-paste job just changing the data names\n\nquery_device = \"\"\"\nselect * from unnest(array(\n                            SELECT\n                            device\n                             FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n                            \n                           )\n                    )\n  \"\"\"\nsafe_query_job= client.query(query_device)\ndevice_df= safe_query_job.to_dataframe()\n\n\nquery_geoNetwork = \"\"\"\nselect * from unnest(array(\n                            SELECT\n                            geoNetwork\n                             FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n                            \n                           )\n                    )\n  \"\"\"\nsafe_query_job= client.query(query_geoNetwork)\ngeoNetwork_df= safe_query_job.to_dataframe()\n\n# customDimensions column is nested and in array, so first needs to be deconstructed before individual columns can be extracted\n#query_customDimensions = \"\"\"\n#select * from unnest(array(\n                           # SELECT\n                            #STRUCT(customDimensions)\n                            #FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n                           # LIMIT 10\n                          # )\n                  #  )\n#  \"\"\"\n#safe_query_job= client.query(query_customDimensions)\n#customDimensions_df= safe_query_job.to_dataframe()\n\n\nquery_hits = \"\"\"\nselect * from unnest(array(\n                            SELECT\n                            STRUCT(hits)\n                            FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n                           )\n                    )\n \"\"\"\nsafe_query_job= client.query(query_hits)\nhits_df= safe_query_job.to_dataframe()\n\n\n\n\n\nquery_part2 = \"\"\"\nselect \nfullVisitorId, userId, clientId, channelGrouping, socialEngagementType\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n\n\n  \"\"\"\nsafe_query_job= client.query(query_part2)\nquery_part2_df= safe_query_job.to_dataframe()\n\n\ncustom_dimension = \"\"\"\nSELECT \nindex,\tvalue\n FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n,UNNEST(customDimensions) as param\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n\"\"\"\n\n    \nsafe_query_job= client.query(custom_dimension)\ncustom_dimension_df= safe_query_job.to_dataframe()\n\n\n\n\n#concat function helps you to select all data frames \n\nall_columns = pd.concat([query_part1_df, totals_df, trafficSource_df, query_trafficSource_2_df, device_df, geoNetwork_df, query_part2_df, custom_dimension_df ], axis=1)\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100000)\npd.set_option('display.width', 1000)\n\n\nall_columns\n","427f9057":"#What is the average purchase size, customer revenue, product revenue, transaction revenue?\n\n# to find the answer I used: https:\/\/support.google.com\/analytics\/answer\/3437719?hl=en&fbclid=IwAR0dORaMLThjDgKAt-tgbpVrkYdV6Uo1gDBoJJ3rGP3C4-awMXIe3YnJqpQ\n# and https:\/\/support.google.com\/analytics\/answer\/4419694\n\naverage = \"\"\"\nSELECT \n--Average purchase size (number of items)\n round(total_products_sold\/total_buyers,2) AS average_purchase_size,\n--Average revenue per customer\n round(total_revenue\/total_buyers,2) AS average_customer_revenue,\n--Average amount spent per product\nround(total_revenue\/total_products_sold,2) AS average_product_revenue,\n--Average amount spent per transaction\nround(total_revenue\/total_transactions,2) AS average_transaction_revenue\nFROM (SELECT\n       SUM(product.productQuantity) AS total_products_sold\n      ,COUNT(distinct fullvisitorId) AS total_buyers\n      ,SUM(totals.transactions) AS total_transactions\n      ,SUM(totals.totalTransactionRevenue)\/1000000 AS total_revenue\n      FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n      ,UNNEST (hits) AS hits,\n       UNNEST (hits.product) AS product\n       -- Table suffix function let's you to select specific time frame. \n       WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n       AND product.productQuantity > 0 -- number of products bought\n       AND hits.eCommerceAction.action_type = '6' -- purchase was made\n    )\n      \"\"\"\nsafe_query_job= client.query(average)\naverage_df= safe_query_job.to_dataframe()\naverage_df ","a1e0419f":"#Average purchase price \npurchase_average= \"\"\"\nSELECT \n(total_purchase_revenue\/SUM(unique_session_id)) AS average_purchase_price\nFROM(  SELECT\n        SUM(product.productRevenue\/1e6) AS total_purchase_revenue,\n        COUNT(fullvisitorId) AS unique_session_id\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        --Dont forget to unnest hits othervise you will get an error because computer also doesn't understand messy data\n        , UNNEST(hits) AS hits\n        ,UNNEST(hits.product) AS product\n        WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        -- when purchase was made.\n        AND productRevenue IS NOT NULL)\n    \n        \nGROUP BY total_purchase_revenue\n        \"\"\"\n\nsafe_query_job= client.query(purchase_average)\naverage_purchase_df= safe_query_job.to_dataframe()\naverage_purchase_df","4012c424":"#What was the average number of product pageviews for users who made a purchase in July 2017?\n\naverage_number= \"\"\"\nSELECT (SUM(pageviews)\/SUM(users)) AS average_number_of_product_pageviews\nFROM (SELECT \n     sum(totals.pageviews) as  pageviews,\n    COUNT(fullvisitorid) as users\n    FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE _table_suffix BETWEEN '20170701'\n    AND '20170730'\n    GROUP BY totals.transactions\n    HAVING totals.transactions >=1)\n\n\n\"\"\"\n\nsafe_query_job= client.query(average_number)\nsummary_df= safe_query_job.to_dataframe()\nsummary_df","03dbb082":"#The minimum amount of sessions people go through before purchasing?\n\nAverage_sessions= \"\"\"\nSELECT \n(SUM(session)\/COUNT(users)) AS average_session\nFROM(   SELECT\n        fullvisitorId AS users,\n        min(visitNumber) as session\n        FROM\n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        , UNNEST(hits) AS hits\n        ,UNNEST(hits.product) AS product\n        WHERE\n        _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        AND productRevenue IS NOT NULL\n        --Purchase was made\n        AND hits.eCommerceAction.action_type = '6'\n        GROUP BY users)\n\"\"\"\nsafe_query_job= client.query(Average_sessions)\nAverage_sessions_df= safe_query_job.to_dataframe()\nAverage_sessions_df","850a4a3b":"#Which channel bringed the most transaction? \n\nsources=\"\"\"\nSELECT channelGrouping AS channel,\n       SUM(totals.transactions) AS transaction\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE _table_suffix BETWEEN '20170701'\n    AND '20170730'\n    AND totals.transactions>=1\n    GROUP BY channel\n    ORDER BY 2 DESC\n   \n\"\"\"\nsafe_query_job= client.query(sources)\nsources_df= safe_query_job.to_dataframe()\nsources_df\n\n\n","58175182":"\nfig=plt.figure(figsize=(35,10))#selecting size\nplt.subplot2grid((2,3),(1,0))#this one is optional, you need this more when you are working with bigger data and bigger subplots.\nheights=sources_df[\"transaction\"] #name what to show on Y-axis\npos= np.arange(len(heights))\nplt.bar(pos, heights, align= 'center')\nplt.xticks(pos, sources_df[\"channel\"])# name what to show on X-axis\nplt.xlabel('channel'); plt.ylabel('Revenue (USD $)')#titles(optional)\nplt.title('Revenue of each channel') \nplt.show() #show graphic\n","da71e58c":"#What is the total number of transactions generated per device browser in July 2017?\n    # iffnull function - https:\/\/cloud.google.com\/dataprep\/docs\/html\/IFNULL-Function_66194064\n    \ngenerated_transactions = \"\"\"\nselect * from (\n                -- With ifnull function we won't get any Nann data\n                SELECT ifnull(SUM(totals.transactions),0) AS Transactions , device.browser AS device\n                FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n                WHERE _table_suffix BETWEEN '20170701'\n                AND '20170730'\n                GROUP BY device\n                ORDER BY Transactions DESC\n                )\nwhere Transactions > 0\n\n\n\"\"\"\nsafe_query_job= client.query(generated_transactions)\nbrowser_df= safe_query_job.to_dataframe()\nbrowser_df ","0c2673fa":"\n# how to do a bar chart https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.plot.bar.html\n# settin color is optional \n\nax = browser_df.plot.bar( x='device' # name what to show on X axis\n                         ,y='Transactions' # name what to show on Y axis\n                         ,rot=0 \n                         ,color=\"red\" # set color. If you want, you can delete this line and default color will be blue\n                         ,figsize=(10,5) # size of the graph picture. You can skip this if you want\n                         ,title='Number of transactions from different browser. July 2017' # Optional. set title for the graph\n                         ,fontsize=13 # set font size. Optional\n                        ) \n\nax.set( xlabel=\"Browser name\" # set X axis title. Optional\n       ,ylabel=\"Number of Transactions\") # set Y axis name. Optional\n\n\nplt.show() # show graphic\n","d7cb0d85":"#Which country had the most sessions?\ncountry= \"\"\"\nSELECT geoNetwork.country AS country,\nCOUNT(totals.transactions) AS transactions,\nCOUNT(totals.visits) AS Sessions \nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _table_suffix BETWEEN '20170701'\n    AND '20170730'\nGROUP BY country\nORDER BY Sessions DESC\nLIMIT 10\n\"\"\"\nsafe_query_job= client.query(country)\ncountry_sessions_df= safe_query_job.to_dataframe()\ncountry_sessions_df\n\n","4c618eb1":"#Creating pie chart \nplt.figure (figsize=(5,5)) #optional\nlabels = country_sessions_df['country'] \nvalues = country_sessions_df['Sessions'] # data to measure\nplt.pie(values, labels=labels, autopct = \"%.1f%%\") #creating pie chart\nplt.show()","014df1a8":"# Total visitors per day in month of July 2017\n\nvisitors = \"\"\"\nSELECT\ndate, \nSUM(totals.visits) AS visits \nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _table_suffix BETWEEN '20170701'\n    AND '20170730'\nGROUP BY date\nORDER BY date ASC\n\"\"\"\n\nsafe_query_job= client.query(visitors)\ntotal_visits_df= safe_query_job.to_dataframe()\ntotal_visits_df\n\n\n","4b2fff71":"fig=plt.figure(figsize=(35,10))\nheights =total_visits_df[\"visits\"]\npos= np.arange(len(heights))\nplt.bar(pos, heights, align= 'center')\nplt.xticks(pos, total_visits_df[\"date\"])\nplt.xlabel('date'); plt.ylabel('visits')\nplt.title('Customers in July') ","71e32a81":"#Top 10 visited pages\n\nvisited_pages = \"\"\"\n SELECT\nCOUNT(fullVisitorId) AS users,\nSUM(visitNumber) AS visit_number,\nhits.page.pagePath AS pagePath\nFROM\n`bigquery-public-data.google_analytics_sample.ga_sessions_*`,\nUNNEST(hits) as hits\nWHERE\n_TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\nAND\n--calculating data only when customer hit another page\nhits.type=\"PAGE\"\nGROUP BY\npagePath\nORDER BY visit_number DESC\nLIMIT 10 \n\"\"\"\nsafe_query_job= client.query(visited_pages)\nvisited_pages_df= safe_query_job.to_dataframe()\nvisited_pages_df","6fed1543":"#What is the most often purchased item? \nitem=\"\"\"\nSELECT \nproduct.v2ProductName AS product_name,\n--This (CONCAT(fullVisitorId, CAST(visitId AS STRING)) is how all analytics describe one unique session. \nCOUNT(CONCAT(fullVisitorId, CAST(visitId AS STRING))) AS buyers\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n, UNNEST (hits) AS hits,\nUNNEST (hits.product) AS product\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\nAND totals.totalTransactionRevenue IS NOT NULL\nAND productRevenue IS NOT NULL\nGROUP BY product_name\n--To order by highest buyers number\nORDER BY buyers DESC\nLIMIT 10\n\"\"\"\nsafe_query_job= client.query(item)\nitem_df= safe_query_job.to_dataframe()\nitem_df","f837f9a5":"#Do customers purchase something on their first visit? Or more often it is their second visit?\n\nvisit=\"\"\"\n      SELECT \n      SUM(first_visit_buyers) AS first_visit_buyers,\n      SUM(second_visit_buyers) AS second_visit_buyers\n      FROM (SELECT\n      --I think Case when is pretty clear. Don't forget ELSE END!\n      (CASE WHEN visitNumber = 1 THEN COUNT(fullvisitorId) ELSE NULL END) AS first_visit_buyers,\n      (CASE WHEN visitNumber = 2 THEN COUNT(fullvisitorId) ELSE NULL END) AS second_visit_buyers\n      FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        ,UNNEST (hits) AS hits,\n        UNNEST (hits.product) AS product\n        WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        AND totals.totalTransactionRevenue IS NOT NULL\n        AND productRevenue IS NOT NULL\n        GROUP BY visitNumber)\n\n\n\"\"\"\nsafe_query_job= client.query(visit)\nvisit_df= safe_query_job.to_dataframe()\nvisit_df\n\n","a618c1c0":"plt.figure (figsize=(5,5))\nlabels = 'first_visit_buyers', 'second_visit_buyers'\nsizes = [1191, 694]\n#autopct functions helps to calculate results in procents. \nplt.pie(sizes, labels=labels, autopct='%1.1f%%',startangle=90)\n\nplt.show()","cb034fe1":"#Bounce rate based on source\n#If you dont understand what is bounce rate or how to calculate it check this link\n#https:\/\/support.google.com\/analytics\/answer\/1009409?hl=en\nbounce_rate = \"\"\"\nSELECT\ntotal_visits,\nsource,\n round(( ( total_no_of_bounces \/ total_visits ) * 100 ),2) AS bounce_rate\nFROM (\nSELECT\ndate AS date,\ntrafficSource.source AS source,\nCOUNT (fullVisitorId) AS total_visits,\nSUM ( totals.bounces ) AS total_no_of_bounces\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _table_suffix BETWEEN '20170701'\nAND '20170730'\nGROUP BY\nsource,\ndate)\nORDER BY\n--ordering by total visits we can get sources who bringed the most traffic into the site. \ndate,\ntotal_visits DESC\nLIMIT 10\n\n\"\"\"\nsafe_query_job= client.query(bounce_rate)\nbounce_rate_df= safe_query_job.to_dataframe()\nbounce_rate_df","65be8cee":"n=bounce_rate_df[\"total_visits\"]\nplt.figure (figsize=(15,5))\nax = bounce_rate_df[\"total_visits\"].plot(kind='bar', use_index=True, )\nax2 = ax.twinx()\nax2.plot(bounce_rate_df[\"bounce_rate\"].values, linestyle='-', marker='o', linewidth=2.0,color=\"red\")\nax.set_xticklabels(('google', 'direct', 'm.facebook.com', 'youtube.com', 'facebook.com', 'analytics.google', 'partners', 'baidu', 'google.com', 'quora.com'))\nax.set_xlabel('source')\nax.set_ylabel(\"Pageviews\")\nax.set_title('Bounce rate based on source', pad=15, color='#333333',\n             weight='bold')\n#Making labels for bar chart\nrects= ax.patches\nlabels = bounce_rate_df[\"total_visits\"]\n\nfor rect,label in zip(rects,labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/ 2, height + 5, label,\n            ha='center', va='bottom')\n#Making labels for line chart \nfor i, j in bounce_rate_df.bounce_rate.items():\n    ax2.annotate(str(j), xy=(i,j))\n\n","8ca2fb64":"#bounce rate based on the most viewed pages \n# This code is a little bit different, but it's the same thing as writing FROM (SELECT... ). \nbounce_pageviews_query = \"\"\"\nWITH bounce_pageviews AS \n                     (SELECT \n                     COUNT(fullvisitorId)AS pageviews, \n                     SUM(totals.bounces) AS bounces,\n                     hits.page.pagePath AS page\n                     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n                    ,UNNEST(hits) as hits\n                    WHERE  _table_suffix BETWEEN '20170701'\n                    AND '20170730'\n                    AND hits.type = 'PAGE'\n                    GROUP BY page                        )\n                                            \n    SELECT \n    pageviews, \n    page,\n    IFNULL(((bounces \/ pageviews)*100),0) AS bounce_rate\n    FROM bounce_pageviews\n    GROUP BY pageviews, page, bounces\n    ORDER BY PAGEVIEWS DESC\n    LIMIT 20\n    \"\"\"\nsafe_query_job= client.query(bounce_pageviews_query)\nbounce_df= safe_query_job.to_dataframe()\nbounce_df","c885adc2":"#Doing a table \nax= bounce_df.plot.bar(x='page',\n                       y='pageviews',\n                       figsize=(15,5), \n                       color='#EE75F3',\n                       fontsize=13, \n                       title= 'Bounce rate based on page'\n                      )\nax2=ax.twinx()\nax2.plot(bounce_df[\"bounce_rate\"].values, linestyle ='-', marker='o', linewidth=2.0,color=\"green\")","14f298b9":"#Number of customers who visit the website for first time(new visitors)\nnew_visitors=\"\"\"\nSELECT \nCOUNT(visitNumber) AS new_visitors\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\nAND visitNumber=1\n\"\"\"\nsafe_query_job= client.query(new_visitors)\nsummary_df= safe_query_job.to_dataframe()\nsummary_df","5244b930":"#RETURNING VISITORS(%)(RVR)\nreturning_visitor=\"\"\"\nSELECT\ndate,\ntotal_visitors,\nreturning_visitors,\n--All about RVR https:\/\/contently.com\/2015\/08\/18\/how-loyal-are-your-customers-this-metric-has-the-answer\/\n((SUM(returning_visitors)\/SUM(total_visitors))*100) AS RVR\nFROM(SELECT\ndate,\nCOUNT(CASE WHEN visitNumber > 1 THEN fullvisitorId ELSE NULL END) AS returning_visitors,\nCOUNT(fullvisitorId) AS total_visitors\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\nGROUP BY date\nORDER BY date)\nGROUP BY date, total_visitors, returning_visitors\nORDER BY date\n\"\"\"\nsafe_query_job= client.query(returning_visitor)\nreturning_visitors_df= safe_query_job.to_dataframe()\nreturning_visitors_df\n","4a3722fb":"%matplotlib inline\nfig = plt.figure(figsize=(27,8))\nax = fig.add_subplot(111)\n# Variables that define subsets of the data, which will be drawn on separate facets in the grid.\nsns.barplot(x=returning_visitors_df[\"date\"],\n            y=returning_visitors_df[\"total_visitors\"]\n            ,data=returning_visitors_df,label = 'total_visitors'\n            ,color='#4848FF'\n            ,ax=ax)\n#Dont know how to explain better but here I'm making barchart on another barchart. Also known as stacked barchart.\nsns.barplot(x=returning_visitors_df[\"date\"]\n            ,y=returning_visitors_df[\"returning_visitors\"]\n            ,data=returning_visitors_df,label = 'returning_visitors'\n            ,color='#FF6800',ax=ax)\nplt.title('Returning visitors',fontsize=14,ha='right')\n# Put a legend below current axis\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.08),fancybox=True, shadow=False, ncol=5,fontsize=12)\nplt.grid(axis='y')\n","3dad9dc1":"\n#tutorial of making horizontal stacked barchart https:\/\/www.youtube.com\/watch?v=YnuCH7WrGjg\n\nimport matplotlib.patches as mpatches\nfig = plt.figure(figsize=(27,15))\n#data\npurple = returning_visitors_df[\"total_visitors\"]\norange = returning_visitors_df[\"returning_visitors\"]\ny = np.arange (len(purple))\n#plot\nplt.barh (y, purple,color='#4848FF' )\nplt.barh (y, orange, color = '#FF6800', left = purple ) #left function describes where the orange part should begin\n\n#labels \n\ny_labels = returning_visitors_df[\"date\"]\nplt.yticks (y, y_labels)\n\npurple_patch= mpatches.Patch(color='#4848FF', label =\"total visitors\")\norange_patch= mpatches.Patch(color='#FF6800', label =\"returning visitors\")\nplt.legend (handles=[purple_patch, orange_patch], loc = \"lower right\")\n\nplt.grid(axis='x') \nplt.show()","48dd88b6":"\nfig = plt.figure(figsize=(35,15))\n# naming the x-axis, y-axis\ndf=pd.DataFrame({'x': returning_visitors_df[\"date\"], 'y': returning_visitors_df[\"RVR\"]}) \n# plot\nplt.plot( 'x', 'y', data=df,marker='o')\nplt.title('Daily RVR in July',fontsize=14,ha='right')\nplt.show()\n\n\n\n\n\n","7cb2bc28":"#How many visitors went to the store? \nstore_visitors=\"\"\"\nSELECT \ndate,\nCOUNT(CASE WHEN hits.page.pagePath = \"\/store.html\" THEN 1 ELSE 0 END) AS store_visitors\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n,UNNEST (hits) AS hits\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\nAND  hits.page.pagePath =\"\/store.html\"\nGROUP BY date \nORDER BY date \n\"\"\"\nsafe_query_job= client.query(store_visitors)\nstore_visitors_df= safe_query_job.to_dataframe()\nstore_visitors_df\n","bc745aac":"#How many customers returned for repeat purchases?\nreturned_purchases =\"\"\"\nSELECT \nCOUNT(CASE WHEN totals.transactions = 1 THEN fullvisitorid ELSE NULL END) AS new_buyers, \nCOUNT (CASE WHEN totals.transactions >= 2 THEN fullvisitorId ELSE NULL END) AS returning_buyers\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731' \n\n\n\"\"\"\nsafe_query_job= client.query(returned_purchases)\nreturned_purchases_df= safe_query_job.to_dataframe()\nreturned_purchases_df\n\n","6db652a8":"# What is visitor distribution by country?\n# What is customer distribution by country?\n\nGeo_analysis=\"\"\"\nSELECT geoNetwork.country AS country,\nCOUNT (totals.visits) AS visitors,\nCOUNT(CASE WHEN hits.eCommerceAction.action_type = '6' THEN fullvisitorId ELSE NULL END ) AS customers\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n,UNNEST (hits) AS hits\nWHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\nGROUP BY country \nORDER BY customers DESC \nLIMIT 10 \"\"\"\n\nsafe_query_job= client.query(Geo_analysis)\nGeo_analysis_df= safe_query_job.to_dataframe()\nGeo_analysis_df\n","00807973":"\n# How does January cohort performs over the next 6 months against July cohort?\n#Number of returning customers?\n#Number of transactions?\n#Number of items purchased?\n#Amount of revenue generated?\nJuly_and_January_data = \"\"\"\nSELECT \nDATE_TRUNC(PARSE_DATE(\"%F\", CONCAT(SUBSTR(DATE,0,4),\"-\",SUBSTR(DATE,5,2),\"-\",SUBSTR(DATE,7,2) )), MONTH) as month,\nSUM(totals.transactions) as transactions,\nCOUNT(CASE WHEN visitNumber>1 THEN fullvisitorId ELSE NULL END) AS returning_visitors,\nSUM(product.productQuantity) AS items_purchased,\nSUM(product.productRevenue\/1e6)AS revenue_generated\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n,UNNEST (hits) AS hits,\nUNNEST (hits.product) AS product\nWHERE _TABLE_SUFFIX BETWEEN '20170201' AND '20170730'\nGROUP BY 1\nORDER BY month DESC\n\n\n\"\"\"\n\nsafe_query_job= client.query(July_and_January_data)\nJuly_and_January_data_df= safe_query_job.to_dataframe()\nJuly_and_January_data_df\n\n\n\n\n","818ee7ac":"generated_transactions = \"\"\"\n                SELECT  DATE_TRUNC(PARSE_DATE(\"%F\", CONCAT(SUBSTR(DATE,0,4),\"-\",SUBSTR(DATE,5,2),\"-\",SUBSTR(DATE,7,2) )), WEEK) as month\n                       ,COUNT(distinct DATE) as days\n                       ,ifnull(SUM(totals.transactions),0) AS Transactions\n                FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n                ,UNNEST (hits) AS hits,\n                UNNEST (hits.product) AS product\n                WHERE _table_suffix BETWEEN '20150701' AND '20200730'\n                GROUP BY 1\n                ORDER BY month DESC\n            \n\"\"\"\nsafe_query_job= client.query(generated_transactions)\nbrowser_time_df= safe_query_job.to_dataframe()\nbrowser_time_df","05bcf065":"query_trafficSource = \"\"\"\nselect  referralPath,\tcampaign,\tsource,\tmedium,\tkeyword,\tadContent,\tisTrueDirect, campaignCode\n        from unnest(array(\n                            SELECT\n                            trafficSource\n                            FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n                WHERE _table_suffix BETWEEN '20170101' AND '20170730'\n                            \n                           )\n                    )\n  \"\"\"\nsafe_query_job= client.query(query_trafficSource)\nquery_trafficSource_df= safe_query_job.to_dataframe()\nquery_trafficSource_df","f4035af3":"query_part = \"\"\"\nselect \nvisitorId, visitNumber, visitId, visitStartTime, date\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n                WHERE _table_suffix BETWEEN '20170101' AND '20170730'\n\n  \"\"\"\nsafe_query_job= client.query(query_part)\nquery_part_df= safe_query_job.to_dataframe()\nquery_part_df","16497c8a":"adwords=\"\"\"select *\nfrom unnest(array(\n                    select  adwordsClickInfo\n                            from unnest(array(\n                                                SELECT\n                                                trafficSource\n                                                 FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170101' AND '20170730'\n                                                \n                                               )\n                                        )\n                 )\n            )\n  \"\"\"\nsafe_query_job= client.query(adwords)\nadwords_df= safe_query_job.to_dataframe()\nadwords_df","285924a8":"devices = \"\"\"\nselect * from unnest(array(\n                            SELECT\n                            device\n                             FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170101' AND '20170730'\n                            \n                           )\n                    )\n  \"\"\"\nsafe_query_job= client.query(devices)\ndevices_df= safe_query_job.to_dataframe()\ndevices_df\n\n\n","379e7c9d":"geoNetworks = \"\"\"\nselect * from unnest(array(\n                            SELECT\n                            geoNetwork\n                             FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE _TABLE_SUFFIX BETWEEN '20170101' AND '20170730'\n                            \n                           )\n                    )\n  \"\"\"\nsafe_query_job= client.query(geoNetworks)\ngeoNetworks_df = safe_query_job.to_dataframe()\ngeoNetworks_df ","7b3ed9bb":"query_general = \"\"\"\nselect \nfullVisitorId, userId, clientId, channelGrouping, socialEngagementType\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n                WHERE _table_suffix BETWEEN '20170101' AND '20170730'\n\n\n  \"\"\"\nsafe_query_job= client.query(query_general)\nquery_general_df= safe_query_job.to_dataframe()\nquery_general_df","4ac4bbda":"query_hits = \"\"\"\n                                                   \nselect * from unnest(array( select page              \n                        from (SELECT param.* FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n                        UNNEST(hits) as param\n                        WHERE _TABLE_SUFFIX BETWEEN '20170101' AND '20170730'\n                        )\n                     ))\n                  \n                  \n  \"\"\"\nsafe_query_job= client.query(query_hits)\nhits_df= safe_query_job.to_dataframe()\nhits_df","1d191432":"query_totals2 = \"\"\"\nselect * from unnest(array(\n                            SELECT\n                            totals\n                            FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n\nWHERE _TABLE_SUFFIX BETWEEN '20170101' AND '20170731'\n                            \n                           )\n                    )\n  \"\"\"\nsafe_query_job= client.query(query_totals2)\ntotals2_df= safe_query_job.to_dataframe()\ntotals2_df","4d54115c":"all_columnss = pd.concat([query_trafficSource_df,totals2_df, query_part_df, adwords_df, devices_df, geoNetworks_df, query_general_df, hits_df ], axis=1)\nall_columnss","b4702594":"df=pd.DataFrame(all_columnss)\nmissing_values = df.isnull().sum()\nmissing_values","8d6a906d":"missing_values=all_columnss.isnull().sum()\ntotal_cells = np.product(all_columnss.shape)\ntotal_missing = missing_values.sum()\n(total_missing\/total_cells) * 100","58ef9163":"df.isnull().mean().round(4) * 100","19a4ec6d":"all_columns_2=df.drop(['campaignCode', 'screenviews', 'uniqueScreenviews', 'timeOnScreen', 'adContent', 'customerId','javaEnabled',\n         'clientId', 'userId', 'searchCategory', 'slot', 'sessionQualityDim', 'creativeId', 'criteriaId', 'gclId',\n                       'adNetworkType', 'targetingCriteria', 'isVideoAd', 'mobileInputSelector', 'screenColors', 'latitude', \n                       'longitude', 'socialEngagementType', 'cityId', 'metro', 'continent', 'flashVersion', 'mobileDeviceModel', \n                       'visitorId', 'clientId', 'criteriaParameters', 'mobileDeviceModel', 'mobileDeviceBranding','networkLocation',\n                       'adGroupId', 'campaignId', 'page', 'networkDomain', 'channelGrouping', 'mobileDeviceMarketingName', ''\n                       \n        ], axis = 1)\nall_columns_2.head()","3c0bd5a4":"len(all_columns_2.columns)","f6b366c6":"all_columns_2.isnull().mean().round(4)*100","192afcb4":"test = pd.melt(df, value_vars='operatingSystem', 'operatingSystemVersion ')","0f1d794a":"trying to put two columns into one","d11014cc":"Welcome to my notebook! \n\n","a98cb54b":"Done with averages !\nNow I analysed from what sources our customers came from, and what chanels bringed the most conversions. ","41d61523":"So that's all from customer's journey to the website, let's see what they do when they arrive! \n\nIn this part I analyse customers behavior, do they come for the first time or not and so on. \n\nLess talking more doing!","3c972b3e":"Okay, the data looks like a big mess, we can see that there is a lot of columns in columns so it's hard to understand what data we have. \n\nThat is why I decided to \"unnset\" all data and fully see all features in separate columns.\n\nIf you don't know what unnset function do I highly recommend reading this article - https:\/\/medium.com\/firebase-developers\/using-the-unnest-function-in-bigquery-to-analyze-event-parameters-in-analytics-fb828f890b42\nIt explains way better what I'm trying to say. \n\nIf the following code looks too hard for you or you just too lazy to do it you can use the following page to get the list of all the columns. There is even explanation of all the variables that Google Analytics collects. This helped me a lot when I started programming\nhttps:\/\/support.google.com\/analytics\/answer\/3437719?hl=en","52fb5de4":"Let's see what data is missing","54e6d546":"Making more difficult bar chart\n","1f7e78bf":"When we figured out what data GA collected we can start analyzing it!\n\nI recommend to select one topic(for example - customers, chanels, revenue and so on) and then picking questions based on that topic. That way your analysis will be more structured and more informative. ","443f10b1":"Before going to any coding, first we need to examine what kind of data we have. This is really important! You can't analyze data that you don't know about. ","d55cbad8":"If you have any questions please comment below! I will be happy to answer!\n","ed603bc6":"Yeah, big number that tells nothing let's try to calculate how much data is missing in %","ace1e30e":"Okay, that is intresting. Let's drop the data that we know we won't use 100%.","571be980":"#https:\/\/stackoverflow.com\/questions\/28931224\/adding-value-labels-on-a-matplotlib-bar-chart\ngood luck!\n","162e829d":"Let's do a line plot for RVR. ","7cdf1658":"Of course an analysis won't be analysis without some graphics! So let's play with them. \nI picked out more different ways to do bar charts, pie and etc,so you could pick one that makes the most sense for you.","579760d4":"Okay, enough talking ! Let's code!","6bcabcb8":"Making pie chart","2ab8a20a":"Then I calculate how much data is missing in each column","94cc72c7":"Analyzing customer's the most important questions are bounce rate and new\/returning visitors. \nGA counts bounce rate=1, when people for example dont go any further than landing page or dont do any actions. \n","bcfe249d":"As you can see, it's hard to see the date, that is why I'm making the same stacked barchart but just horizontal one \n","69b3960c":"For this bar chart you will need to write a little bit longer code, but the code is more simple","a2626fc2":"In this link you can find pie chart tutorial. https:\/\/www.youtube.com\/watch?v=syjP3S6BdzM&t=194s","509a550e":"I started by calculating the most important and the most basic averages in ecommerce \n\nIf you don't know how to calculate some kind of average - google it. I'm sure you will find some mathematical description.\n","2deb2db9":"Firstly how much data is missing in general","6ab97e57":"Making bar chart (explained each step in previous bar chart)","00705b1c":"Here I did an ecommerce analysis with Google's store dataset. \nI answered most common marketing questions using SQL, Bigquey and some Python for visualization. \nI also tried to comment as much as I could that it would be easier to understand for what purpose I'm writing every code line. \nOf course, there is no coding job without google help so I also attached some links that I think are worth checking and also had a lot of help for me. "}}