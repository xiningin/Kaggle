{"cell_type":{"62f649e8":"code","4aea1d08":"code","14ca273f":"code","44ad3c3f":"code","ce6940b8":"code","a9779516":"code","52526fc7":"code","8c431904":"code","46d18e72":"code","af68d600":"code","6aee7396":"code","1d201dc4":"code","b1d5371a":"code","9a92267f":"code","5d341b2f":"code","12c75c41":"code","f44157e1":"code","0ce9a613":"code","4fa60d80":"code","8d8ddbec":"code","43de142a":"code","fcdd45d2":"code","6247c7d8":"code","68e42017":"code","7a64f6d4":"code","d8ae99ca":"code","13e33ded":"code","737021ef":"code","ea73abb7":"code","c0e21398":"code","7c1ccfce":"code","cb64fee4":"code","9eedf4a9":"code","9caf8703":"code","4478a578":"code","95cc1d45":"code","12208f29":"code","a925f215":"markdown","f7e67959":"markdown"},"source":{"62f649e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4aea1d08":"# mydata_final = quandl.get(#'VOLX\/VOLSPY')","14ca273f":"pip install yfinance","44ad3c3f":"import yfinance as yf\nimport plotly.graph_objs as go\nimport datetime\n\ndef plot_value(index_name,title_name, year,type_='Overall'):\n    \n    msft = yf.Ticker(index_name)\n    mydata = msft.history(period=\"max\")\n    \n    mydata2 = mydata[mydata.index > mydata.index[-1] - datetime.timedelta(days=year*365)]\n    yoy = (mydata2['Close'].iloc[-1] - mydata2['Close'].iloc[0])*100\/mydata2['Close'].iloc[0]\n    \n    if type_ == 'Range':\n        fig = go.Figure()\n        fig.add_trace(go.Scatter(x=mydata2.index, y=mydata2['Close'],\n                            mode='lines',\n                            name='lines'))\n        fig.update_layout(title= title_name,\n                           xaxis_title='Date',\n                           yaxis_title='Value')\n        return mydata, fig, mydata2, round(yoy\/year,2)\n    else:\n        fig = go.Figure()\n        fig.add_trace(go.Scatter(x=mydata.index, y=mydata['Close'],\n                            mode='lines',\n                            name='lines'))\n        fig.update_layout(title= title_name,\n                           xaxis_title='Date',\n                           yaxis_title='Value')\n        return mydata, fig, mydata2, round(yoy\/year,2)","ce6940b8":"dataset = plot_value(\"DJI\",'Dow Jones Industrial Average',1)[0]\ndataset","a9779516":"# dataset.index[-1] - datetime.timedelta(days=year*365), dataset.index[-1]","52526fc7":"plot_value(\"DJI\",'Dow Jones Industrial Average',1,'Range')[1]","8c431904":"plot_value(\"DJI\",'Dow Jones Industrial Average',1,'Range')[3]","46d18e72":"data_tables = pd.DataFrame()\ndata_tables[0] = [\"DJI\",'Dow Jones Industrial Average']\n\ndata_table = data_tables.transpose()\ndata_table.columns = ['Index Code','Name']\ndata_table","af68d600":"def performance_table_year(data_table,index):\n    year_output = [data_table['Index Code'][index],data_table['Name'][index]]\n    for year in [1,3,5,10]:\n        year_output.append(plot_value(data_table['Index Code'][index],data_table['Name'][index],year,'Range')[3])\n    return year_output\n\nperformance_table_year(data_table,0)","6aee7396":"from tqdm import tqdm\n\ndef table_1y_10y_performance(dataset):\n    return_tables = pd.DataFrame()\n    for i in tqdm(range(len(dataset))):\n        return_tables[i] = performance_table_year(dataset,i)\n        \n    return_table = return_tables.transpose()\n    return_table.columns = ['Index Code','Name','1Yr','3Yr','5Yr','10Yr']\n    return return_table\n\nperformance_islamic = table_1y_10y_performance(data_table)\nperformance_islamic","1d201dc4":"index_name = 'GOOG'\nmsft = yf.Ticker(index_name)\nmydata = msft.history(period=\"max\")\nmydata","b1d5371a":"index, name = \"TSLA\",'Tesla Inc'\nplot_value(index, name, 1)[1]","9a92267f":"xls = pd.ExcelFile('..\/input\/alternatives-etf-list\/MSCI  FTSE Islamic Singapore Index 31Aug 2020_final.xlsx')\ndf = pd.read_excel(xls, \"Worksheet\")\ndf","5d341b2f":"from plotly.subplots import make_subplots\n\nmydata = df\nfig = make_subplots(rows=2, cols=1,shared_xaxes=True,vertical_spacing=0.02)\n\nfig.add_trace(go.Scatter(x=mydata.Date, y=mydata['MSCI Singapore Shariah Index']),row=1,col=1)\nfig.add_trace(go.Scatter(x=mydata.Date, y=mydata['Total Return FTSE Shariah Index']),row=2,col=1)\n\nfig.update_xaxes(title_text=\"Date\", row=2, col=1)\n\nfig.update_yaxes(title_text=\"MSCI Singapore\", row=1, col=1)\nfig.update_yaxes(title_text=\"Total Return FTSE\", row=2, col=1)\n\nfig.update_layout(title= 'MSCI Singapore-FTSE Shariah Index')","12c75c41":"from plotly.subplots import make_subplots\n\nmydata = df\nfig = make_subplots(rows=1, cols=2,shared_xaxes=True,vertical_spacing=0.02)\n\nfig.add_trace(go.Scatter(x=mydata.Date, y=mydata['MSCI Singapore Shariah Index']),row=1,col=1)\nfig.add_trace(go.Scatter(x=mydata.Date, y=mydata['Total Return FTSE Shariah Index']),row=1,col=2)\n\nfig.update_xaxes(title_text=\"Date\", row=2, col=1)\n\nfig.update_yaxes(title_text=\"MSCI Singapore\", row=1, col=1)\nfig.update_yaxes(title_text=\"Total Return FTSE\", row=2, col=1)\n\nfig.update_layout(title= 'MSCI Singapore-FTSE Shariah Index')","f44157e1":"df.columns","0ce9a613":"year = 1\ndataset = df[df.Date > df.Date.iloc[0] - datetime.timedelta(days=year*365)]\nyoy = (dataset['MSCI Singapore Shariah Index'].iloc[0] - dataset['MSCI Singapore Shariah Index'].iloc[-1])*100\/(dataset['MSCI Singapore Shariah Index'].iloc[-1]*year)\n\ndataset","4fa60d80":"yoy","8d8ddbec":"index = 'MSCI Singapore Shariah Index'\n\nperformance = []\nfor year in [1,3,5,10]:\n    dataset = df[df.Date > df.Date.iloc[0] - datetime.timedelta(days=year*365)]\n    yoy = (dataset[index].iloc[0] - dataset[index].iloc[-1])*100\/(dataset[index].iloc[-1]*year)\n    performance.append(round(yoy,2))\nperformance ","43de142a":"index = 'Total Return FTSE Shariah Index'\n\nperformance = []\nfor year in [1,3,5,10]:\n    dataset = df[df.Date > df.Date.iloc[0] - datetime.timedelta(days=year*365)]\n    yoy = (dataset[index].iloc[0] - dataset[index].iloc[-1])*100\/(dataset[index].iloc[-1]*year)\n    performance.append(round(yoy,2))\nperformance ","fcdd45d2":"title_name = 'Local Performance'\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=dataset.Date, y=dataset['MSCI Singapore Shariah Index'],\n                         mode='lines',\n                         name='lines'))\nfig.add_trace(go.Scatter(x=dataset.Date, y=dataset['Total Return FTSE Shariah Index'],\n                         mode='lines',\n                         name='lines'))\nfig.update_layout(title= title_name,\n                  xaxis_title='Date',\n                  yaxis_title='Value')","6247c7d8":"euro = pd.read_csv('..\/input\/alternatives-etf-list\/Euro STOXX Index.csv')\neuro","68e42017":"euro['date'] = euro['datadate'].astype(str)\neuro","7a64f6d4":"str_test = '20150131'\nstr_test[4:6]","d8ae99ca":"euro['date_temp'] = euro['date'].apply(lambda x:x[:4]+'-'+x[4:6]+'-'+x[6:])\neuro","13e33ded":"euro['date_temp'] = pd.to_datetime(euro['date_temp'])\neuro","737021ef":"import matplotlib.pyplot as plt\nplt.plot(euro['date_temp'],euro['prccm'])","ea73abb7":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=euro['date_temp'], y=euro['prccm'],\n                         mode='lines',\n                         name='lines'))\nfig.update_layout(title= title_name,\n                  xaxis_title='Date',\n                  yaxis_title='Value')","c0e21398":"df,index = euro, 'prccm'\nperformance = []\nfor year in [1,3,5,10]:\n    dataset = df[df['date_temp'] > df['date_temp'].iloc[0] - datetime.timedelta(days=year*365)]\n    yoy = (dataset[index].iloc[1] - dataset[index].iloc[0])*100\/(dataset[index].iloc[0]*year)\n    performance.append(round(yoy,2))\nperformance ","7c1ccfce":"df,index,title_name = euro, 'prccm', 'Euro Conventional Index'\n\nperformance = []\nfor year in [1,3,5,10]:\n    dataset = df[df['date_temp'] > df['date_temp'].iloc[0] - datetime.timedelta(days=year*365)]\n    yoy = (dataset[index].iloc[1] - dataset[index].iloc[0])*100\/(dataset[index].iloc[0]*year)\n    performance.append(round(yoy,2))\nprint(performance)\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df['date_temp'], y=df[index]))\nfig.update_layout(title= title_name,\n                  xaxis_title='Date',\n                  yaxis_title='Value')","cb64fee4":"euro_islamic = pd.read_csv('..\/input\/alternatives-etf-list\/Euro Islamic Dow.csv')\neuro_islamic","9eedf4a9":"df,index,title_name = euro_islamic, 'prccm', 'Euro Islamic Index'\ndf['date_temp'] = pd.to_datetime(df['datadate'].astype(str).apply(lambda x:x[:4]+'-'+x[4:6]+'-'+x[6:]))\n\nperformance = []\nfor year in [1,3,5,10]:\n    dataset = df[df['date_temp'] > df['date_temp'].iloc[0] - datetime.timedelta(days=year*365)]\n    yoy = (dataset[index].iloc[1] - dataset[index].iloc[0])*100\/(dataset[index].iloc[0]*year)\n    performance.append(round(yoy,2))\nprint(performance)\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df['date_temp'], y=df[index]))\nfig.update_layout(title= title_name,\n                  xaxis_title='Date',\n                  yaxis_title='Value')","9caf8703":"euro = pd.read_csv('..\/input\/alternatives-etf-list\/Euro STOXX Index.csv')\neuro","4478a578":"euro_islamic = pd.read_csv('..\/input\/alternatives-etf-list\/Euro Islamic Dow.csv')\neuro_islamic","95cc1d45":"def clean_date_dataset(df):\n    df['date_temp'] = pd.to_datetime(df['datadate'].astype(str).apply(lambda x:x[:4]+'-'+x[4:6]+'-'+x[6:]))\n    return df\n\ndef performance_1_10_year_global(df,index,index_name):\n    performance = [index_name]\n    for year in [1,3,5,10]:\n        dataset = df[df['date_temp'] > df['date_temp'].iloc[0] - datetime.timedelta(days=year*365)]\n        yoy = (dataset[index].iloc[1] - dataset[index].iloc[0])*100\/(dataset[index].iloc[0]*year)\n        performance.append(round(yoy,2))\n    return performance\n\ndef plot_conventional_islamic(df,df2,index,title_name):\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df['date_temp'], y=df[index], name='Conventional'))\n    fig.add_trace(go.Scatter(x=df2['date_temp'], y=df2[index], name='Islamic'))\n    fig.update_layout(title= title_name,\n                      xaxis_title='Date',\n                      yaxis_title='Value')\n    return fig\n    \nindex,title_name = 'prccm', 'Euro Conventional vs Islamic'\nplot_conventional_islamic(clean_date_dataset(euro),clean_date_dataset(euro_islamic),index,title_name)","12208f29":"performance_tables = pd.DataFrame()\nperformance_tables[0] = performance_1_10_year_global(euro,index,'Euro Conventional Index')\nperformance_tables[1] = performance_1_10_year_global(euro_islamic,index,'Euro Islamic Index')\nperformance_table = performance_tables.transpose()\nperformance_table.columns = ['Name','1 Yr','3 Yr','5 Yr','10 Yr']\nperformance_table","a925f215":"## Europe Index","f7e67959":"GOOGLEFINANCE(\"GOOG\", \"price\") for google sheets"}}