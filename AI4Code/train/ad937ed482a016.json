{"cell_type":{"49349767":"code","25dd6213":"code","592c1fb3":"code","0add9035":"code","d6b55a4f":"code","22e778d0":"code","da03f3c5":"code","f84dd639":"code","c2854664":"code","aa62b4cb":"code","40b94ac8":"code","9e9b1ba4":"code","ff0e4780":"code","ffb48b16":"code","396834cd":"code","945af274":"code","a9e0d640":"code","bb792852":"code","e3aba9c0":"code","afaf6949":"code","488136f7":"code","06949638":"code","3ecd980e":"code","dbacee4b":"code","daa3a85c":"code","be4ece3f":"code","c9255038":"code","c9c06ab2":"code","525b1350":"code","1645a743":"code","0eb97b7c":"code","030acd53":"code","29510b66":"code","32fb4e79":"code","be8ee410":"code","c44e8d21":"code","d6d5d0ea":"code","904b4183":"code","2d6f40de":"code","1c4de167":"code","9f949019":"code","155d0177":"code","23ade86f":"markdown","6ed543f0":"markdown","28deb7a3":"markdown","0660c81a":"markdown","3fec3da9":"markdown","aef721ad":"markdown","2a6bc1a2":"markdown","4ecfa9ea":"markdown","8d2e969b":"markdown","bfb02355":"markdown","f241361f":"markdown","3dc32575":"markdown","09e07675":"markdown","36899c41":"markdown","a46d2ecf":"markdown","698114d2":"markdown","df699c3a":"markdown","5900b224":"markdown","6cc6446c":"markdown","d39d59f0":"markdown","aad6ed3e":"markdown","487d3f07":"markdown","0d1039c3":"markdown","7b2b6fc8":"markdown","5b656193":"markdown","934cf2dd":"markdown","c364793e":"markdown","d1bbea40":"markdown","62faf88b":"markdown","69052e90":"markdown","c6ea2a3b":"markdown","731eb020":"markdown","e32b83f8":"markdown","bc7117dd":"markdown","7d577fff":"markdown","bb49659f":"markdown","e68fa308":"markdown","76f8b6d5":"markdown","244b7141":"markdown"},"source":{"49349767":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O\n\n# plotting\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# interactive mapping\nimport geopandas as gpd\nimport folium \n\n# load in datasets\n# airbnb data\nlistings=pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\n# to create interactive maps\nneighborhoods=gpd.read_file('\/kaggle\/input\/new-york-shapefile-16\/cb_2016_36_tract_500k.shp')","25dd6213":"listings.head()","592c1fb3":"neighborhoods.head()","0add9035":"# drop any possible duplicates\nlistings.drop_duplicates(inplace=True)","d6b55a4f":"# use the latitude and longitude info in the airbnb dataframe to copy it to a GeoDataFrame, \n# then merge it with the neighborhoods geodataframe\ngeolistings = gpd.GeoDataFrame(listings, geometry=gpd.points_from_xy(listings.longitude, listings.latitude))\ngeolistings.crs = neighborhoods.crs\nlistings=gpd.sjoin(neighborhoods,geolistings)","22e778d0":"listings.describe()","da03f3c5":"plt.yscale('log')\npriceHist = listings.price.hist(bins=20)\nplt.xlabel('Price (USD)')\nplt.ylabel('Number of NYC listings')","f84dd639":"plt.yscale('log')\npriceHist = listings.price.hist(bins=20,range=(500,1500))\nplt.xlabel('Price (USD)')\nplt.ylabel('Number of NYC listings')","c2854664":"plt.yscale('log')\npriceHist = listings.price.hist(bins=20,range=(0,700))\nplt.xlabel('Price (USD)')\nplt.ylabel('Number of NYC listings')","aa62b4cb":"listings = listings.loc[listings.price<700]\nlistings=listings.reset_index()","40b94ac8":"plt.yscale('log')\npriceHist = listings.minimum_nights.hist(bins=20)\nplt.xlabel('Minimum nights')\nplt.ylabel('Number of NYC listings')","9e9b1ba4":"plt.yscale('log')\npriceHist = listings.minimum_nights.hist(bins=20,range=(0,90))\nplt.xlabel('Minimum nights')\nplt.ylabel('Number of NYC listings')","ff0e4780":"listings = listings.loc[listings.minimum_nights<30]\nlistings=listings.reset_index()","ffb48b16":"listings.info()","396834cd":"listings.groupby([listings.neighbourhood_group]).id.count().plot(kind='bar')\nplt.ylabel('Number of listings')","945af274":"# from https:\/\/www.kaggle.com\/alexisbcook\/interactive-maps\nfrom IPython.display import IFrame\n\ndef embed_map(m, file_name):\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')","a9e0d640":"heatmapnyc = folium.Map(location=[40.7, -74],tiles='cartodbpositron', zoom_start=10) \nfrom folium.plugins import HeatMap\nHeatMap(data=listings[['latitude', 'longitude']], radius=8).add_to(heatmapnyc)\nembed_map(heatmapnyc, \"heatmapnyc.html\")","bb792852":"listings.groupby([listings.neighbourhood_group,listings.room_type]).id.count().unstack().plot(kind='bar',stacked=True)\nplt.ylabel('Number of listings')","e3aba9c0":"bk = listings.loc[(listings.neighbourhood_group=='Brooklyn')].price.hist(bins=20,label='Brooklyn',histtype='step',linewidth=2)\nmh = listings.loc[(listings.neighbourhood_group=='Manhattan')].price.hist(bins=20,label='Manhattan',histtype='step',linewidth=2)\nqu = listings.loc[(listings.neighbourhood_group=='Queens')].price.hist(bins=20,label='Queens',histtype='step',linewidth=2)\nsi = listings.loc[(listings.neighbourhood_group=='Staten Island')].price.hist(bins=20,label='Staten Island',histtype='step',linewidth=2)\nbx = listings.loc[(listings.neighbourhood_group=='Bronx')].price.hist(bins=20,label='Bronx',histtype='step',linewidth=2)\nplt.legend()\nplt.xlabel('Price (USD)')\nplt.ylabel('Number of listings')","afaf6949":"bk = listings.loc[(listings.neighbourhood_group=='Brooklyn')].price.hist(bins=20,label='Brooklyn',density=True,histtype='step',linewidth=2)\nmh = listings.loc[(listings.neighbourhood_group=='Manhattan')].price.hist(bins=20,label='Manhattan',density=True,histtype='step',linewidth=2)\nqu = listings.loc[(listings.neighbourhood_group=='Queens')].price.hist(bins=20,label='Queens',density=True,histtype='step',linewidth=2)\nsi = listings.loc[(listings.neighbourhood_group=='Staten Island')].price.hist(bins=20,label='Staten Island',density=True,histtype='step',linewidth=2)\nbx = listings.loc[(listings.neighbourhood_group=='Bronx')].price.hist(bins=20,label='Bronx',density=True,histtype='step',linewidth=2)\nplt.legend()\nplt.xlabel('Price (USD)')\nplt.ylabel('Number of listings')","488136f7":"sns.catplot(x=\"neighbourhood_group\", y=\"price\",\n            kind=\"box\", data=listings)","06949638":"sns.catplot(x=\"neighbourhood_group\", y=\"price\",\n            kind=\"violin\", data=listings,cut=0)","3ecd980e":"sns.catplot(x=\"neighbourhood_group\", y=\"price\",hue='room_type',\n            kind=\"violin\", data=listings,cut=0,figsize=(50,50))","dbacee4b":"mapnyc = folium.Map(location=[40.7, -74],tiles='cartodbpositron', zoom_start=10)\nmeanPrice=listings.groupby('NAME').price.mean()\n\nfolium.Choropleth(geo_data=listings.set_index(\"NAME\").__geo_interface__, \n           data=meanPrice,\n           key_on=\"feature.id\", \n           fill_color='YlGnBu', \n           line_color='none',\n           legend_name='Mean Airbnb price (USD)'\n          ).add_to(mapnyc)\n\n# Display the map (commented for now)\n# embed_map(mapnyc, 'mapnyc.html')","daa3a85c":"listings.dtypes","be4ece3f":"# first, remove the listings with nan reviews_per_month (nonzero as seen from `listings.info` above)\nlistings.dropna(subset=['reviews_per_month'],inplace=True)\nlistings.reset_index(drop=True,inplace=True)","c9255038":"listings['reviewsPerMonthScaled']=listings.reviews_per_month*listings.minimum_nights","c9c06ab2":"sns.relplot(x=\"price\",\n            y=\"reviewsPerMonthScaled\",\n            data=listings,\n            hue=listings.neighbourhood_group,\n            kind='line',\n            ci=None,\n         )","525b1350":"# make a coarsePrice column which bins in multiples of 10.\nlistings['coarsePrice']=(listings.price\/10).round()*10 # divide then multiply because round function is designed for decimals","1645a743":"listings[['price','coarsePrice']].head(10)","0eb97b7c":"sns.relplot(x=\"coarsePrice\",\n            y=\"reviewsPerMonthScaled\",\n            data=listings,\n            hue=listings.neighbourhood_group,\n            kind='line',\n            ci=None,\n         )","030acd53":"# since I'm quickly checking 3 distributions, make each one a bit smaller with `height`\nsns.relplot(x=\"coarsePrice\",\n            y=\"reviewsPerMonthScaled\",\n            data=listings.loc[(listings.room_type==\"Entire home\/apt\")],\n            hue=listings.neighbourhood_group,\n            kind='line',\n            ci=None,\n            height=3\n         )\nsns.relplot(x=\"coarsePrice\",\n            y=\"reviewsPerMonthScaled\",\n            data=listings.loc[(listings.room_type==\"Private room\")],\n            hue=listings.neighbourhood_group,\n            kind='line',\n            ci=None,\n            height=3\n         )\nsns.relplot(x=\"coarsePrice\",\n            y=\"reviewsPerMonthScaled\",\n            data=listings.loc[(listings.room_type==\"Shared room\")],\n            hue=listings.neighbourhood_group,\n            kind='line',\n            ci=None,\n            height=3\n         )","29510b66":"listings['estMonthlyIncome']=listings.price*listings.reviewsPerMonthScaled\n\nsns.relplot(x=\"coarsePrice\",\n            y='estMonthlyIncome',\n            data=listings,\n            hue=listings.neighbourhood_group,\n            kind='line',\n            ci=None\n         )","32fb4e79":"sns.relplot(x=\"coarsePrice\",\n            y='estMonthlyIncome',\n            data=listings[(listings.price<400) & (listings.neighbourhood_group=='Manhattan') & ((listings.room_type=='Entire home\/apt') | (listings.room_type=='Private room'))],\n            hue=listings.neighbourhood_group,\n            style=listings.room_type,\n            kind='line',\n            ci=None,\n            height=3\n         )\nsns.relplot(x=\"coarsePrice\",\n            y='estMonthlyIncome',\n            data=listings[(listings.price<400) & (listings.neighbourhood_group=='Brooklyn') & ((listings.room_type=='Entire home\/apt') | (listings.room_type=='Private room'))],\n            hue=listings.neighbourhood_group,\n            style=listings.room_type,\n            kind='line',\n            ci=None,\n            height=3\n         )\n","be8ee410":"# Import necessary scikit-learn packages\nfrom sklearn import linear_model\nfrom sklearn.metrics import r2_score\n\n# Split the data into training\/testing sets\nfrom sklearn.model_selection import train_test_split\n\n# to fit a polynomial\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# First create a function since we'll be repeating these few lines several times\ndef fitPredictPlot__incomeVsPrice(data, model='linear'):\n\n    X,Y=data[['price']],data.estMonthlyIncome\n    \n    if model=='poly': # if fitting a 2nd order polynomial\n    # https:\/\/scikit-learn.org\/stable\/modules\/linear_model.html#polynomial-regression-extending-linear-models-with-basis-functions\n        poly = PolynomialFeatures(degree=2)\n        X=poly.fit_transform(data[['price']])\n    \n    X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size=0.2)\n\n    # Create linear regression object\n    fitter=linear_model.LinearRegression()\n    \n    # Train the model using the training sets\n    fitter.fit(X_train,y_train)\n    y_pred = fitter.predict(X_test)\n    \n    # Variance score: 1 is perfect prediction\n    print('Variance score: %.2f' % r2_score(y_test, y_pred))\n    \n    # Plot the output\n    sns.relplot(x=\"coarsePrice\",\n                y='estMonthlyIncome',\n                data=data,\n                hue=listings.neighbourhood_group,\n                style=listings.room_type,\n                kind='line',\n                ci=None,\n                height=5\n             )\n    if model=='linear':\n        xaxis=X_test\n    elif model=='poly':\n        xaxis=X_test[:,1]\n        \n    plt.scatter(xaxis, y_pred, color='blue', linewidth=3)\n\n    # return the regression object\n    return fitter\n","c44e8d21":"fitPredictPlot__incomeVsPrice(listings.loc[(listings.room_type=='Entire home\/apt') & (listings.price<400)])\n","d6d5d0ea":"# now try a 2nd order polynomial\n# first do it just for manhattan private rooms to see how it goes\n\nfitPredictPlot__incomeVsPrice(listings.loc[(listings.room_type=='Private room') & (listings.neighbourhood_group=='Manhattan')],\n                              model='poly')\n","904b4183":"import itertools\nfor borough,roomType in itertools.product(['Manhattan','Queens','Bronx','Staten Island','Brooklyn'],['Entire home\/apt','Private room','Shared room']):\n    fitter=fitPredictPlot__incomeVsPrice(listings.loc[(listings.room_type==roomType) & (listings.neighbourhood_group==borough)],\n                                         model='poly')\n\n    # print ('parameters: ',regr.coef_)\n    # location of max\/min for f(x)=ax^2+bx+c is -b\/(2a)\n    priceMax=-fitter.coef_[1]\/(2*fitter.coef_[2])\n    print ('The optimal price for this %s listing in %s is $%d' %(roomType,borough,priceMax))","2d6f40de":"# First drop categorial data and features that I've added\nlistings.dtypes","1c4de167":"# also drop borough information, this can be picked up via latitude and longitude\nlistings_numer=listings.drop(columns=['index','STATEFP','COUNTYFP','TRACTCE','AFFGEOID','GEOID','NAME','LSAD','ALAND','AWATER','geometry','index_right','id','name','host_id','host_name','neighbourhood_group','neighbourhood','estMonthlyIncome','coarsePrice','reviewsPerMonthScaled','last_review'])","9f949019":"for roomType in ['Entire home\/apt','Private room','Shared room']:\n    thisListings = listings_numer.loc[(listings_numer.room_type==roomType)].drop(columns=['room_type'])\n    all_X = thisListings.drop(columns=['price'])\n    all_y = thisListings['price']\n    X_train, X_test, y_train, y_test = train_test_split(all_X, all_y, test_size=0.2)\n\n    fitter=linear_model.LinearRegression()\n    fitter.fit(X_train,y_train)\n    y_pred = fitter.predict(X_test)\n    \n    # Variance score: 1 is perfect prediction\n    print('Variance score: %.2f' % r2_score(y_test, y_pred))\n\n    d = pd.DataFrame({'actual %s' %roomType: y_test, 'predicted %s' %roomType: y_pred})\n    sns.relplot(x=\"predicted %s\" %roomType,\n                y=\"actual %s\" %roomType,\n                data=d,\n                color=\"red\")\n    \n    plt.plot(y_pred, y_pred, color='blue', linewidth=3)\n","155d0177":"corr = listings.corr()\nsns.heatmap(corr)","23ade86f":"First import the necessary libraries and load in the datasets we'll be using.","6ed543f0":"And now the same clean quality, but with some more of the shape information that we had in the histograms:","28deb7a3":"This is quite noisy! Let's round the prices to the nearest 10, to be able to see the plot a bit more clearly.","0660c81a":"Let's apply a cut of 30 minimum nights.","3fec3da9":"This can also be seen from a heat map:","aef721ad":"This is of course dominated by the boroughs with the most listings,\nmaking it hard to see the distributions for those with fewer entries. \nLet's normalize these histos.","2a6bc1a2":"While the low statistics make it hard to see, the shape of this curve seems to model the data quite well.\n\nLet's see how it looks for all boroughs and room types.\n\n**We can now also predict the optimal price for a listing given its room type and borough!**","4ecfa9ea":"These are certainly a small minority in the distribution. \n\nIn this analysis let's only use listings with a price that at least 100 listings have. \nFrom this histo it looks like this is somewhere near $1000, but let's zoom in to get an exact amount.","8d2e969b":"Let's look at which boroughs these listings are in.","bfb02355":"# Analyzing New York City Airbnb data\nHere we will use [open data](https:\/\/www.kaggle.com\/dgomonov\/new-york-city-airbnb-open-data) \nto analyze some metrics based on price and location of Airbnb listings in New York City,\nultimately estimating the gross monthly income as a function of a listing's price per night.","f241361f":"Cool, now we have a dataframe that has all airbnb and geo listings! \n\nBefore we map anything, let's get a sense of the data.","3dc32575":"As may have been expected, the discontinuity which marks the \"turning point\" of profitability\noccurs at lower prices for private rooms than it does for entire homes.\nIt also happens at a lower price for Brooklyn than it does for Manhattan.\nHowever before this discontinuity, the lines are near-equal for both room types.","09e07675":"For prices below around $400, there is no strong correlation, perhaps a positive slope for Manhattan.\nFor high prices, although the statistics run out quickly, there seems to be a negative slope.\n\nAlso check split by room type, on which price is heavily dependent.","36899c41":"So the Manhattan listings are more expensive than the others for all room types,\nbut the mean price for a private or shared Manhattan room is less expensive than the entire space in a different borough.\n\nLet's see how the mean price looks on a map.","a46d2ecf":"Now let's look at the estimated gross monthly income as a function of price.","698114d2":"According to discussion on the dataset page, unfortunately,\n`availability_365` is the number of nights the listing is available before any nights have been booked. \nSo this doesn't help calculate the number of nights booked.\n\nAdditionally, `number_of_reviews` is heavily dependent on how recently the space was listed, so this is not so insightful.\n\nLet's use `reviews_per_month`. \nWe can scale this by `minimum_nights` to account for stays that are required to span multiple nights.\n\nSince some fraction of guests do not leave reviews, \nand since some fraction of stays will be longer than the minimum number of nights,\nwe will use this metric with the understanding that it gives a lower estimate of the gross income.","df699c3a":"There is a large spread, especially for the entire home category, which lead to small R^2 values.\nBut this seems to be a good starting place for providing recommended listing prices to Airbnb hosts! \n\nSome ways this could be improved include more granular geometry information (proximity to points of interest, crime rates, etc) and more granular timing information (perhaps the listings could be more expensive on New Years Eve or in the summer months when the demand for listings is higher). ","5900b224":"Okay, to avoid fluctuations, let's set the cutoff cleanly at $700. \n\nOur final price distribution:","6cc6446c":"Again, there are clearly some outliers. \nLet's apply the same requirement here: Keep only listings with a minimum night requirement below the 100 listing cutoff.","d39d59f0":"This does rather well to predict the estimated gross monthly income as a function of price! \n\nWe can use more complicated models to predict the non-linearities at higher prices,\nor to model income as a function of location as well as price.\nThis would be especially useful for a homeowner trying to determine the optimal listing price for a new listing.","aad6ed3e":"Perhaps expectedly, most of the listings are in Manhattan and Brooklyn.\n\nLet's see which room types are most popular in each borough.","487d3f07":"Okay there are obviously some cases to understand, some of which may be improved with more stats, or with removal of more outliers. But overall this seems to be a good starting place to provide price recommendations for Airbnb hosts!\n","0d1039c3":"Let's also compare room types in each borough. \nWe'll draw on separate axes so that the plots don't get too busy.\nAlso, only check Manhattan and Brooklyn which have the best statistics.","7b2b6fc8":"We also saw with `listings.describe()` that there was a listing with a minimum night requirement of 1250! \nLet's check that out as well.","5b656193":"Let's see the distribution in prices split by borough.","934cf2dd":"Here is even clearer that Manhattan is pricier than the other boroughs.\n\nHow much of this is driven by different rental types?","c364793e":"Now, let's use scikit-learn to fit a line to the listings that are entire homes with prices less than $400 \n(where we know the data is a line and independent of borough).","d1bbea40":"I would like to try to answer the question: \n\n> What is the gross monthly income of each listing?\n\nThis could be used for example to predict the monthly income as a function of price, for each room type in each neighborhood,\nwhich would be useful if I had a new listing and wanted to know the optimal price at which to list.\n\nThe gross monthly income can be estimated roughly by:\n\nincome = (number of nights booked\/month)\\*price\/night\n\n(Note this is not the net monthly income, since it ignores the costs associated with owning and running the listing.)\n\nWe have price\/night in the dataframe. \nWhat information do we have to help us estimate how many nights the listing is booked?","62faf88b":"Some more logistics of the dataset:","69052e90":"Before we do anything, let's remove possible duplicates from `listings`.","c6ea2a3b":"Now think about it in a more traditional data science way: treat the price as the target and provide predictions based on all other features in the dataset","731eb020":"So Manhattan near and south of Central Park clearly have the highest density of high prices.\n\nWe could split this up to get a more specific map by adding selections to the `meanPrice` calculation, i.e.:\n`meanPrice=listings.loc[(listings.room_type=='Private room')].groupby('NAME').price.mean()`","e32b83f8":"Let's make one dataframe that contains the airbnb listings and the geospatial data.","bc7117dd":"So we totally run out of stats for the shared rooms, \nbut in general it seems the estimated gross monthly income as a function of price \nis not so dependent on the borough in which the listing resides.\n\nThis suggests, if you're looking to buy property with the sole purpose of listing it on Airbnb, \nyou'd do better to buy in an area with more affordable real estate.","7d577fff":"At low prices, the lines seem to be similar for each borough! \n\nAlthough statistical fluctuations dominate at higher prices, making it harder to quantify trends,\nit's clear that at some point there is a discontinuity, where \nthe slope of income versus price decreases, and in some cases becomes negative.\nThis may be due to the fact that fewer guests are likely to spend the high prices,\nso these spaces are often unoccupied.\n","bb49659f":"Let's take a first look at the scaled reviews per month as a function of price.","e68fa308":"Here we can see that Manhattan has the most expensive listings, and the Bronx has the least.\n\nTry a cleaner way of viewing the same info.","76f8b6d5":"Wow! There is a listing at $10k per night! Let's look at a histogram to see how many listings are that expensive.","244b7141":"Let's take a look at what's available in these dataframes."}}