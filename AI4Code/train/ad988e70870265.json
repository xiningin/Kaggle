{"cell_type":{"7aa332ed":"code","3f0abbac":"code","05660e34":"code","1c17f4de":"code","33ac05cc":"code","8afb5cb6":"code","798560ae":"code","1799fb3f":"code","68de41be":"code","7840e434":"code","c7fed5d5":"code","bd82d5e2":"code","7b2dc62d":"code","641f7be3":"code","a482f901":"code","d6a17762":"code","fe8ca6fa":"code","63ad1ca4":"code","fa088183":"code","b717da5c":"code","37449045":"code","65f580d7":"code","95cc3998":"code","bbe4829f":"code","302aa480":"code","f09907e6":"code","dfffcdd8":"code","5f195863":"code","1cc0563d":"code","5b486dda":"code","00df22cf":"code","bee017bd":"code","9dc35014":"code","89f4dc92":"code","49c23873":"code","234e0780":"code","07a70987":"code","c8062f02":"code","8eb4979e":"code","fb6cfd83":"code","55d902a5":"code","ceebe5b4":"code","b253c017":"code","802970bf":"code","89be6c88":"code","a116b68b":"code","26692030":"code","59e1cd1c":"code","86e9399d":"code","022a3cc8":"code","207dec35":"code","1044821b":"code","b19b544a":"code","fa0413b3":"code","5ce8ca91":"code","97a86a6f":"code","2de17d83":"code","d2781971":"code","3eb8b59f":"code","a98c51a6":"code","09f83f06":"code","aac0e97d":"code","0b745b49":"code","1958e9e5":"code","7803d504":"code","9e899be1":"code","f37c1130":"code","a1c6fbb3":"code","956f6f55":"code","61cb55c7":"code","4ef7e694":"code","517a85a8":"code","4b5113a3":"code","c4df816e":"code","5ad0065b":"code","8658c316":"code","32273e6c":"code","e4c380d2":"code","801b36ce":"code","7bed21c8":"code","873f5f04":"code","3518f245":"code","745306cd":"code","763846a2":"code","780cc52b":"code","c0e5312f":"code","7a0c7670":"code","dddef568":"code","65a8362f":"code","64f1845d":"code","d6387d57":"code","f2f3f3d5":"code","c9c7f754":"code","786ce5a7":"code","8bc01a8b":"code","d902fe70":"code","dfe82c2d":"code","8b33a485":"code","5fca3838":"code","c0595dfc":"code","cd8b1c71":"code","bee53597":"code","0f526b6c":"code","d22199a7":"code","ffec613d":"code","201d76cd":"code","4c7d1ef6":"code","d11e0e05":"code","86025a24":"code","33f758af":"code","6a31564e":"code","01d70254":"code","5ce669c4":"code","a5466d75":"code","70f4ec6d":"code","23866ea1":"code","dde35086":"code","add73b68":"code","2f297c35":"code","f4fec46d":"code","3b91a425":"code","dfd9c8d4":"code","78dc8c99":"code","7b76d0fb":"code","bbeefe0b":"code","008b1e3e":"code","06f28264":"code","9eea3ddb":"code","9e295d48":"code","95dc5ebf":"code","718bc283":"code","74a9641a":"code","a3d692e5":"code","452147d3":"code","5d19fe87":"code","9dc8f240":"code","87d7c255":"code","e7ef56ec":"code","190794cf":"code","014172d9":"code","dbcc543c":"markdown","cbcdbcc6":"markdown","2f00748c":"markdown","616a05ed":"markdown","99d8da00":"markdown","ef6b8ad4":"markdown","1b6da8d1":"markdown","8879b468":"markdown","c21e15fe":"markdown"},"source":{"7aa332ed":"import pandas as pd #data Processing\nimport numpy as np #linear algebra\nimport seaborn as sns #data visulization 'plotting'\nfrom sklearn.preprocessing import LabelEncoder #for label encoding\nimport matplotlib.pyplot as plt # Data Visualization, magic functio which shows plot inside the J Notebook\nfrom scipy import stats # For scientific Mathematics Calculation\n%matplotlib inline ","3f0abbac":"train = pd.read_csv('..\/input\/jobathon-may-2021-credit-card-lead-prediction\/train.csv') #reading tarin dataset\ntest = pd.read_csv('..\/input\/jobathon-may-2021-credit-card-lead-prediction\/test.csv')  #reading test dataset","05660e34":"print(train.shape) # reading no of rows and columns of a train data\nprint(test.shape)  #reading no.of rows and columns of a test data","1c17f4de":"train.head() #reading first five rows of train data","33ac05cc":"test.head() # reading first five rows of test data","8afb5cb6":"train.describe() # reading statistical data mean, std, max, IQR","798560ae":"test.describe() # reading statistical data mean, std, max, IQR","1799fb3f":"train.info() # reading summary of a train data","68de41be":"test.info() # reading summary of a train data","7840e434":"train[['Gender','Region_Code','Occupation','Channel_Code','Credit_Product','Is_Active']].nunique() # Shows no.of unique variables","c7fed5d5":"test[['Gender','Region_Code','Occupation','Channel_Code','Credit_Product','Is_Active']].nunique() # Shows no.of unique variables","bd82d5e2":"train.isnull().sum() # Checking for Missing Values","7b2dc62d":"test.isnull().sum()","641f7be3":"train.isnull().sum() \/train.shape[0] * 100 # Checking for Percentage of Missing values","a482f901":"test.isnull().sum() \/test.shape[0] * 100 # Checking for Percentage of Missing values","d6a17762":"train['Gender'].value_counts(normalize=True)","fe8ca6fa":"test['Gender'].value_counts(normalize=True)","63ad1ca4":"plt.figure(figsize=(5,5))\nsns.countplot(x = train['Gender'], hue=\"Gender\", data=train)","fa088183":"sns.countplot(test['Gender'])","b717da5c":"plt.figure(figsize=(5,5))\nsns.boxplot(x=train['Age'])  # Checking for outliers for 'Age' train dataset","37449045":"sns.distplot(x = train['Age']) # ploting normal distribution for AGE","65f580d7":"sns.distplot(x = test['Age']) # ploting normal distribution for AGE","95cc3998":"plt.figure(figsize=(25,10))\nsns.countplot(x = train['Region_Code'])","bbe4829f":"plt.figure(figsize=(25,10))\nsns.countplot(x = test['Region_Code'])","302aa480":"sns.countplot(x = train['Occupation'], order = train['Occupation'].value_counts().index)","f09907e6":"sns.countplot(x = test['Occupation'], order = test['Occupation'].value_counts().index)","dfffcdd8":"sns.countplot(x = train['Channel_Code'])","5f195863":"sns.countplot(x = test['Channel_Code'])","1cc0563d":"sns.boxplot(x=train['Vintage'])  # Checking for outliers for 'Vintage' train dataset","5b486dda":"sns.boxplot(x=test['Vintage'])  # Checking for outliers for 'Vintage' train dataset","00df22cf":"sns.countplot(x=train['Credit_Product'])","bee017bd":"sns.countplot(x=test['Credit_Product'])","9dc35014":"sns.boxplot(x=train['Avg_Account_Balance'])  # Checking for Outliers for 'Avg_Account_Balance' for train dataset","89f4dc92":"sns.distplot(x=train['Avg_Account_Balance'])  # Checking for Outliers for 'Avg_Account_Balance' for train dataset","49c23873":"sns.boxplot(x=test['Avg_Account_Balance'])  # Checking for Outliers for 'Avg_Account_Balance' for train dataset","234e0780":"sns.distplot(x=test['Avg_Account_Balance'])  # Checking for Outliers for 'Avg_Account_Balance' for train dataset","07a70987":"sns.countplot(x=train['Is_Active']) # checking for skewness of a dataset","c8062f02":"sns.countplot(x=test['Is_Active']) # checking for skewness of a dataset","8eb4979e":"sns.boxplot(x=train['Avg_Account_Balance']) # Ploting box plot for 'Avg_Account_Balance'","fb6cfd83":"sns.distplot(train['Avg_Account_Balance'])  # Checking for normalization of plot","55d902a5":"sns.scatterplot(x=train['Age'],y=train['Vintage'])","ceebe5b4":"sns.scatterplot(x=train['Avg_Account_Balance'],y=train['Vintage'])","b253c017":"sns.scatterplot(x=train['Avg_Account_Balance'],y=train['Age'])","802970bf":"sns.countplot(x='Is_Lead', data = train, hue='Is_Active') # checking for skewness of a dataset","89be6c88":"sns.countplot(x='Is_Lead', data = train, hue='Credit_Product') # checking for skewness of a dataset","a116b68b":"sns.countplot(x='Is_Lead', data = train, hue='Occupation') # checking for skewness of a dataset","26692030":"sns.pairplot(train[['Age', 'Vintage', 'Avg_Account_Balance','Is_Lead']])","59e1cd1c":"sns.pairplot(train[['Age', 'Vintage', 'Avg_Account_Balance','Is_Lead']], hue= 'Is_Lead')","86e9399d":"train.isnull().sum() # Checking for missing values","022a3cc8":"train.info()","207dec35":"sns.distplot(x=train['Age'])","1044821b":"print(train['Age'].max())  # Checking for max and Min Age\nprint(train['Age'].min()) ","b19b544a":"print(test['Age'].max())\nprint(test['Age'].min())","fa0413b3":"sns.distplot(x=train['Vintage']) # Checking For Normal Distribution of plot","5ce8ca91":"sns.distplot(x=test['Vintage'])","97a86a6f":"test.isnull().sum() # CHecking for Missing values for test data","2de17d83":"train.Credit_Product.value_counts()","d2781971":"train['Credit_Product'] = train['Credit_Product'].fillna('Not')","3eb8b59f":"train.isnull().sum()","a98c51a6":"test.isnull().sum()","09f83f06":"test.isnull().sum() \/ test.shape[0] * 100 # Checking for Missing value percentage","aac0e97d":"test['Credit_Product'] = test['Credit_Product'].fillna('Not') # filling the missing value with 'NO'","0b745b49":"train['Avg_Account_Balance'] = np.log(train['Avg_Account_Balance'])","1958e9e5":"sns.distplot(x=train['Avg_Account_Balance'])","7803d504":"test['Avg_Account_Balance'] = np.log(test['Avg_Account_Balance'])","9e899be1":"sns.distplot(x=test['Avg_Account_Balance'])","f37c1130":"train['Gender'].value_counts()","a1c6fbb3":"sns.boxplot(x=train['Gender'], y=train['Age'])","956f6f55":"sns.boxplot(x=train['Gender'], y=train['Avg_Account_Balance'])","61cb55c7":"sns.boxplot(x=train['Occupation'], y=train['Age'])","4ef7e694":"sns.boxplot(x=train['Credit_Product'], y=train['Age'])","517a85a8":"sns.boxplot(x=train['Credit_Product'], y=train['Avg_Account_Balance'])","4b5113a3":"train['Gender'] = train['Gender'].map(lambda x: 1 if x=='Female' else 0) #encoding with 0 and 1","c4df816e":"test['Gender'] = test['Gender'].map(lambda x: 1 if x=='Female' else 0) #encoding with 0 and 1","5ad0065b":"train['Gender'] = train['Gender'].astype('category')\ntest['Gender'] = test['Gender'].astype('category')","8658c316":"enc = LabelEncoder()\ntrain['Region_Code'] = enc.fit_transform(train['Region_Code'])\ntest['Region_Code'] = enc.fit_transform(test['Region_Code'])","32273e6c":"train['Region_Code'] = train['Region_Code'].astype('category')\ntest['Region_Code'] = test['Region_Code'].astype('category')","e4c380d2":"train['Occupation'] = enc.fit_transform(train['Occupation'])\ntest['Occupation'] = enc.fit_transform(test['Occupation'])","801b36ce":"train['Occupation'] = train['Occupation'].astype('category')\ntest['Occupation'] = test['Occupation'].astype('category')","7bed21c8":"train['Credit_Product'] = train['Credit_Product'].map(lambda x: 1 if x=='Yes' else 0) #encoding with 0 and 1\ntest['Credit_Product'] = test['Credit_Product'].map(lambda x: 1 if x=='Yes' else 0) #encoding with 0 and 1","873f5f04":"train['Credit_Product'] = train['Credit_Product'].astype('category')\ntest['Credit_Product'] = test['Credit_Product'].astype('category')","3518f245":"train['Is_Active'] = train['Is_Active'].map(lambda x: 1 if x=='Yes' else 0) #encoding with 0 and 1\ntest['Is_Active'] = test['Is_Active'].map(lambda x: 1 if x=='Yes' else 0) #encoding with 0 and 1","745306cd":"train['Is_Active'] = train['Is_Active'].astype('category')\ntest['Is_Active'] = test['Is_Active'].astype('category')","763846a2":"train['Channel_Code'] = enc.fit_transform(train['Channel_Code'])\ntest['Channel_Code'] = enc.fit_transform(test['Channel_Code'])","780cc52b":"train['Channel_Code'] = train['Channel_Code'].astype('category')\ntest['Channel_Code'] = test['Channel_Code'].astype('category')","c0e5312f":"train.head()","7a0c7670":"# Normalizing the 'Avg_Account_Balance'\n#train['Avg_Account_Balance'] = (train['Avg_Account_Balance'] - train['Avg_Account_Balance'].min()) \/ (train['Avg_Account_Balance'].max() - train['Avg_Account_Balance'].min())","dddef568":"train['Age'] = (train['Age'] - train['Age'].min()) \/ (train['Age'].max() - train['Age'].min())","65a8362f":"train['Vintage'] = (train['Vintage'] - train['Vintage'].min()) \/ (train['Vintage'].max() - train['Vintage'].min())","64f1845d":"#test['Avg_Account_Balance'] = (test['Avg_Account_Balance'] - test['Avg_Account_Balance'].min()) \/ (test['Avg_Account_Balance'].max() - test['Avg_Account_Balance'].min())","d6387d57":"test['Age'] = (test['Age'] - test['Age'].min()) \/ (test['Age'].max() - test['Age'].min())","f2f3f3d5":"test['Vintage'] = (test['Vintage'] - test['Vintage'].min()) \/ (test['Vintage'].max() - test['Vintage'].min())","c9c7f754":"train.head()","786ce5a7":"train.info()","8bc01a8b":"train.corr()","d902fe70":"# check\nfig, ax = plt.subplots(figsize=(10,6))\nsns.heatmap(train.corr(), annot=True)","dfe82c2d":"test.head()","8b33a485":"train.columns","5fca3838":"train_x = train[['Gender', 'Age', 'Region_Code', 'Occupation', 'Channel_Code',\n       'Vintage', 'Credit_Product', 'Avg_Account_Balance', 'Is_Active']]","c0595dfc":"train_y = train['Is_Lead']","cd8b1c71":"test_x = test[['Gender', 'Age', 'Region_Code', 'Occupation', 'Channel_Code',\n       'Vintage', 'Credit_Product', 'Avg_Account_Balance', 'Is_Active']]","bee53597":"train_x.head()","0f526b6c":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(train_x, train_y,test_size=0.30,random_state = 400)","d22199a7":"from imblearn.under_sampling import RandomUnderSampler\nrus = RandomUnderSampler(random_state=0)\nX_ros, y_ros = rus.fit_resample(x_train, y_train)","ffec613d":"y_ros.value_counts(normalize=True)","201d76cd":"from sklearn.model_selection import cross_val_score, cross_val_predict","4c7d1ef6":"import sklearn.linear_model as linear_model","d11e0e05":"log = linear_model.LogisticRegression()","86025a24":"LR = log.fit(X_ros, y_ros)","33f758af":"LR.classes_","6a31564e":"LR.predict_proba(x_test)","01d70254":"lr_pred= LR.predict(x_test)","5ce669c4":"lr_pred","a5466d75":"from sklearn.metrics import confusion_matrix, accuracy_score, f1_score, classification_report\nprint(accuracy_score(y_test, lr_pred))\n","70f4ec6d":"crossval_scores = cross_val_score(linear_model.LogisticRegression(), X_ros, y_ros, scoring='roc_auc', cv=10)","23866ea1":"print(crossval_scores)\nprint(crossval_scores.mean())","dde35086":"#probability prediction for X_test\nLR.predict_proba(x_test)","add73b68":"#RocCurve\nimport sklearn.metrics as metrics\nmetrics.roc_curve(y_test,LR.predict_proba(x_test)[:,1])","2f297c35":"fpr,tpr,thresholds=metrics.roc_curve(y_test,LR.predict_proba(x_test)[:,1])","f4fec46d":"from sklearn.metrics import roc_curve, auc\nplt.plot(fpr,tpr,\"-\")","3b91a425":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score, classification_report\nfrom sklearn.model_selection import KFold","dfd9c8d4":"rf = RandomForestClassifier()","78dc8c99":"rnd = RandomForestClassifier(n_estimators=300,oob_score=True,random_state=400)","7b76d0fb":"rnd.fit(X_ros, y_ros)","bbeefe0b":"rnd.oob_score_","008b1e3e":"rnd.feature_importances_","06f28264":"rnd_pred= rnd.predict(x_test)\nrnd_pred","9eea3ddb":"print(accuracy_score(y_test, rnd_pred))","9e295d48":"pred = rnd.predict(test_x)\npred","95dc5ebf":"crossval_score_rdf = cross_val_score(RandomForestClassifier(), X_ros, y_ros, scoring='roc_auc', cv=10)","718bc283":"print(crossval_scores)\nprint('Cv_score',crossval_score_rdf.mean())","74a9641a":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, rnd_pred)\ncm","a3d692e5":"from sklearn.metrics import classification_report\ncr = classification_report(y_test, rnd_pred)\nprint(cr)","452147d3":"from sklearn.metrics import roc_auc_score\nroc_auc = roc_auc_score(y_test, rnd_pred)\nroc_auc","5d19fe87":"from sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(y_test, rnd.predict_proba(x_test)[:,1])\nplt.plot(fpr, tpr, label='Random Forest (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.legend(loc=\"lower right\")\nplt.show()","9dc8f240":"tes = test['ID']","87d7c255":"df = pd.DataFrame(tes)","e7ef56ec":"df['Is_Lead'] = pred","190794cf":"df.head()","014172d9":"df.to_csv('submission_.csv', index=False)","dbcc543c":"#####      ID : Unique Identifier for a row\n#####      Gender : Gender of the Customer\n#####      Age  :   Age of the Customer (in Years)\n#####     Region_Code   :   Code of the Region for the customers\n#####     Occupation   :  Occupation Type for the customer\n#####     Channel_Code  :  Acquisition Channel Code for the Customer (Encoded)\n#####     Vintage     : Vintage for the Customer (In Months)\n#####    Credit_Product  :   If the Customer has any active credit product (Home loan, Personal loan, Credit Card etc.)\n#####    AvgAccountBalance   :  Average Account Balance for the Customer in last 12 Months\n#####    Is_Active   :   If the Customer is Active in last 3 Months\n#####    Is_Lead(Target)   :  If the Customer is interested for the Credit Card. 0 : Customer is not interested, 1 : Customer is interested","cbcdbcc6":"Both the train and test data ['Age', 'Vintage'] data has same","2f00748c":"# Modelling\n\n# Logistic Regression","616a05ed":"# RandomForest Classifier","99d8da00":"### Balancing Target variable","ef6b8ad4":"### Splitting the data into train and test","1b6da8d1":"# Importing Required Libraries","8879b468":"# Feature Engineering","c21e15fe":"# Exploratory Data Analysis\n"}}