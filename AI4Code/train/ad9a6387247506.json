{"cell_type":{"8eb47d05":"code","aeb60adc":"code","88a2d8b7":"code","9cd4dbb9":"code","e3b538cd":"code","ab1bcefb":"code","dd18c967":"code","a455e410":"code","f0c6278c":"code","043f7cd0":"code","aaccfd33":"code","7a4213d7":"code","be919740":"code","110f4674":"code","80d7ed1c":"code","8e6eb002":"code","055ddc3c":"code","4055b5d0":"code","5918f0c6":"code","15c1795d":"code","db19d59f":"code","4a94cdcb":"code","9fbe7876":"code","f7d98574":"code","86c261b7":"code","10de7744":"code","3ce632fa":"code","386d54de":"code","25907dc9":"code","b9bfc98b":"code","a2dab44c":"code","92d533ea":"code","c5080645":"code","8151450a":"code","af2e4aa0":"code","5f5468e9":"code","2be32989":"code","7f0df4cb":"code","9a6ae1aa":"code","bad8b6b4":"code","65d1f79c":"code","8c8db2fa":"code","01624518":"code","712ddd80":"code","9a16a35a":"code","a7e151d6":"code","751d7c3f":"code","85bd40e2":"code","79a24a9e":"code","40caf3fd":"code","370d4909":"code","811ce7df":"code","9f287e47":"code","e4021af9":"code","896ef73f":"code","6e5666a9":"code","331166b3":"code","ce864460":"code","ba272eb5":"code","3b9c0288":"code","1570d6ed":"code","cf8b585f":"code","e2816a9b":"code","1609a2e5":"code","31dcf092":"code","5c82fedd":"code","bd9131c2":"code","619ec57e":"code","36c56a35":"code","5932c370":"code","bfd1f9bb":"code","90405519":"code","3caedfc2":"code","99685f3c":"code","ab3d5616":"code","9c8e7a2d":"code","a9bd8469":"code","1ce25cdf":"code","c89180bd":"code","e0e1f5d2":"code","b84aee97":"code","6347aa91":"code","57b65b47":"code","e7d774c6":"code","b5136f14":"code","1c7b3f6d":"code","36c83700":"code","3801a072":"code","9c461a57":"markdown","26324c81":"markdown","155e8842":"markdown","e67551f8":"markdown","42a7dda9":"markdown","2456553c":"markdown","bee5a298":"markdown","edf3b96a":"markdown","38bacbdb":"markdown","9dd234f5":"markdown","c9427ecf":"markdown","ab8b6d29":"markdown","040a8a97":"markdown","58afd124":"markdown","d0c14f5d":"markdown","218a162f":"markdown","cb9ee156":"markdown","8f0f407d":"markdown","641246b7":"markdown","ec4b1c15":"markdown","31ac9452":"markdown","d87dbb23":"markdown","55a5adba":"markdown","d9d299c1":"markdown","977d0ea4":"markdown","84cc04ed":"markdown","2723784c":"markdown"},"source":{"8eb47d05":"import os\nimport pandas as pd\npd.set_option('display.max_columns', 120)","aeb60adc":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib\n%matplotlib inline\n\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (10,6)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","88a2d8b7":"os.chdir(\"\/kaggle\/input\/\")","9cd4dbb9":"os.listdir()","e3b538cd":"ross_df = pd.read_csv('rossmann-store-sales\/train.csv', low_memory=False)\nstore_df = pd.read_csv('rossmann-store-sales\/store.csv')\ntest_df = pd.read_csv('rossmann-store-sales\/test.csv')\nsubmission_df = pd.read_csv('rossmann-store-sales\/sample_submission.csv')","ab1bcefb":"ross_df","dd18c967":"store_df","a455e410":"test_df","f0c6278c":"submission_df","043f7cd0":"merged_df = ross_df.merge(store_df, how='left', on='Store')\nmerged_test_df = test_df.merge(store_df, how='left', on='Store')","aaccfd33":"merged_df","7a4213d7":"merged_df.info()","be919740":"def split_date(df):\n  df['Date'] = pd.to_datetime(df['Date'])\n  df['Year'] = df.Date.dt.year\n  df['Month'] = df.Date.dt.month\n  df['Day'] = df.Date.dt.day\n  df['WeekOfYear'] = df.Date.dt.isocalendar().week","110f4674":"split_date(merged_df)\nsplit_date(merged_test_df)","80d7ed1c":"merged_df","8e6eb002":"merged_df[merged_df.Open == 0].Sales.value_counts()","055ddc3c":"merged_df = merged_df[merged_df.Open == 1].copy()","4055b5d0":"merged_df","5918f0c6":"def comp_months(df):\n  df['CompetitionOpen'] = 12 * (df.Year - df.CompetitionOpenSinceYear) + (df.Month - df.CompetitionOpenSinceMonth)\n  df['CompetitionOpen'] = df['CompetitionOpen'].map(lambda x: 0 if x < 0 else x).fillna(0)","15c1795d":"comp_months(merged_df)\ncomp_months(merged_test_df)","db19d59f":"merged_df[['Date', 'CompetitionDistance', 'CompetitionOpenSinceYear', 'CompetitionOpenSinceMonth', 'CompetitionOpen']].sample(20)","4a94cdcb":"def check_promo_month(row):\n    month2str = {1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May', 6:'Jun',              \n                 7:'Jul', 8:'Aug', 9:'Sept', 10:'Oct', 11:'Nov', 12:'Dec'}\n    try:\n        months = (row['PromoInterval'] or '').split(',')\n        if row['Promo2Open'] and month2str[row['Month']] in months:\n            return 1\n        else:\n            return 0\n    except Exception:\n        return 0\n\ndef promo_cols(df):\n    # Months since Promo2 was open\n    df['Promo2Open'] = 12 * (df.Year - df.Promo2SinceYear) +  (df.WeekOfYear - df.Promo2SinceWeek)*7\/30.5\n    df['Promo2Open'] = df['Promo2Open'].map(lambda x: 0 if x < 0 else x).fillna(0) * df['Promo2']\n    # Whether a new round of promotions was started in the current month\n    df['IsPromo2Month'] = df.apply(check_promo_month, axis=1) * df['Promo2']","9fbe7876":"promo_cols(merged_df)\npromo_cols(merged_test_df)","f7d98574":"merged_df[['Date', 'Promo2', 'Promo2SinceYear', 'Promo2SinceWeek', 'PromoInterval', 'Promo2Open', 'IsPromo2Month']].sample(20)","86c261b7":"merged_df.columns","10de7744":"input_cols = ['Store', 'DayOfWeek', 'Promo', 'StateHoliday', 'SchoolHoliday', \n              'StoreType', 'Assortment', 'CompetitionDistance', 'CompetitionOpen', \n              'Day', 'Month', 'Year', 'WeekOfYear',  'Promo2', \n              'Promo2Open', 'IsPromo2Month']\n\ntarget_col = 'Sales'","3ce632fa":"inputs = merged_df[input_cols].copy()\ntarget = merged_df[target_col].copy()","386d54de":"test_inputs = merged_test_df[input_cols].copy()","25907dc9":"inputs","b9bfc98b":"numeric_cols = ['Store', 'Promo', 'SchoolHoliday', \n              'CompetitionDistance', 'CompetitionOpen', 'Promo2', 'Promo2Open', 'IsPromo2Month',\n              'Day', 'Month', 'Year', 'WeekOfYear',  ]\ncategorical_cols = ['DayOfWeek', 'StateHoliday', 'StoreType', 'Assortment']","a2dab44c":"inputs[numeric_cols].isna().sum()","92d533ea":"test_inputs[numeric_cols].isna().sum()","c5080645":"max_distance = inputs.CompetitionDistance.max()\nmax_distance","8151450a":"inputs['CompetitionDistance'].fillna(max_distance * 2, inplace=True)\ntest_inputs['CompetitionDistance'].fillna(max_distance * 2, inplace=True)","af2e4aa0":"inputs[numeric_cols].isna().sum()","5f5468e9":"test_inputs[numeric_cols].isna().sum()","2be32989":"from sklearn.preprocessing import MinMaxScaler","7f0df4cb":"scaler = MinMaxScaler()","9a6ae1aa":"scaler.fit(inputs[numeric_cols])","bad8b6b4":"inputs[numeric_cols] = scaler.transform(inputs[numeric_cols])\ntest_inputs[numeric_cols] = scaler.transform(test_inputs[numeric_cols])","65d1f79c":"inputs","8c8db2fa":"from sklearn.preprocessing import OneHotEncoder","01624518":"encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')","712ddd80":"encoder.fit(inputs[categorical_cols])","9a16a35a":"encoded_cols = list(encoder.get_feature_names(categorical_cols))","a7e151d6":"inputs[encoded_cols] = encoder.transform(inputs[categorical_cols])\ntest_inputs[encoded_cols] = encoder.transform(test_inputs[categorical_cols])","751d7c3f":"X = inputs[numeric_cols + encoded_cols]","85bd40e2":"X_test = test_inputs[numeric_cols + encoded_cols]","79a24a9e":"X","40caf3fd":"from xgboost import XGBRegressor","370d4909":"model = XGBRegressor(random_state=42, n_jobs=-1, n_estimators=20, max_depth=4)","811ce7df":"%%time\nmodel.fit(X, target)","9f287e47":"preds = model.predict(X)","e4021af9":"preds","896ef73f":"from sklearn.metrics import mean_squared_error\n\ndef rmse(a, b):\n  return mean_squared_error(a, b, squared=False)","6e5666a9":"rmse(preds, target)","331166b3":"merged_df.Sales.min(), merged_df.Sales.max()","ce864460":"plt.hist(merged_df.Sales.sample(10000));","ba272eb5":"importance_df = pd.DataFrame({\n    'feature': X.columns,\n    'importance': model.feature_importances_\n}).sort_values('importance', ascending=False)","3b9c0288":"importance_df.head(10)","1570d6ed":"sns.barplot(data=importance_df.head(10), x='importance', y='feature')\nplt.title('Feature Importance')\nplt.xlabel('Importance')\nplt.ylabel('Feature');","cf8b585f":"from sklearn.model_selection import KFold","e2816a9b":"kfold = KFold(n_splits=5)","1609a2e5":"def train_and_evaluate(X_train, train_targets, X_val, val_targets, **params):\n    model = XGBRegressor(random_state=42, n_jobs=-1, **params)\n    model.fit(X_train, train_targets)\n    train_rmse = rmse(model.predict(X_train), train_targets)\n    val_rmse = rmse(model.predict(X_val), val_targets)\n    return model, train_rmse, val_rmse","31dcf092":"models = []\n\nfor train_idxs, val_idxs in kfold.split(X):\n    X_train, train_targets = X.iloc[train_idxs], target.iloc[train_idxs]\n    X_val, val_targets = X.iloc[val_idxs], target.iloc[val_idxs]\n    model, train_rmse, val_rmse = train_and_evaluate(X_train, \n                                                     train_targets, \n                                                     X_val, \n                                                     val_targets, \n                                                     max_depth=4, \n                                                     n_estimators=20)\n    models.append(model)\n    print('Train RMSE: {}, Validation RMSE: {}'.format(train_rmse, val_rmse))","5c82fedd":"import numpy as np\n\ndef predict_avg(models, inputs):\n    return np.mean([model.predict(inputs) for model in models], axis=0)","bd9131c2":"preds = predict_avg(models, X)","619ec57e":"preds","36c56a35":"from sklearn.model_selection import train_test_split","5932c370":"X_train, X_val, train_targets, val_targets = train_test_split(X, target, test_size=0.1)","bfd1f9bb":"def test_params(**params):\n    model = XGBRegressor(n_jobs=-1, random_state=42, **params)\n    model.fit(X_train, train_targets)\n    train_rmse = rmse(model.predict(X_train), train_targets)\n    val_rmse = rmse(model.predict(X_val), val_targets)\n    print('Train RMSE: {}, Validation RMSE: {}'.format(train_rmse, val_rmse))","90405519":"test_params(n_estimators=10)","3caedfc2":"test_params(n_estimators=30)","99685f3c":"test_params(n_estimators=100)","ab3d5616":"test_params(max_depth=5)","9c8e7a2d":"test_params(max_depth=10)","a9bd8469":"test_params(n_estimators=50, learning_rate=0.01)","1ce25cdf":"test_params(n_estimators=50, learning_rate=0.1)","c89180bd":"test_params(n_estimators=50, learning_rate=0.3)","e0e1f5d2":"model = XGBRegressor(n_jobs=-1, random_state=42, n_estimators=1000,\n                    learning_rate=0.2, max_depth=10, subsample=0.9,\n                    colsample_bytree=0.7)","b84aee97":"%%time\nmodel.fit(X, target)","6347aa91":"test_preds = model.predict(X_test)","57b65b47":"submission_df","e7d774c6":"submission_df['Sales'] = test_preds","b5136f14":"test_df.Open.isna().sum()","1c7b3f6d":"test_df[test_df.Open.isna()]","36c83700":"submission_df['Sales'] = submission_df['Sales'] * test_df.Open.fillna(1.)","3801a072":"submission_df.sample(20)","9c461a57":"# Rossman Store Sales Prediction\n\nRossmann operates over 3,000 drug stores in 7 European countries. Currently, Rossmann store managers are tasked with predicting their daily sales for up to six weeks in advance. Store sales are influenced by many factors, including promotions, competition, school and state holidays, seasonality, and locality.\n\nWith thousands of individual managers predicting sales based on their unique circumstances, the accuracy of results can be quite varied. You are provided with historical sales data for 1,115 Rossmann stores. The task is to forecast the \"Sales\" column for the test set. Note that some stores in the dataset were temporarily closed for refurbishment.","26324c81":"### K-Fold Cross Validation","155e8842":"Extract all data for training","e67551f8":"### Data Preprocessing and Feature Engineering","42a7dda9":"#### Feature Importance","2456553c":"### HyperParameter Tuning and Regularisation","bee5a298":"#### Stores Open\/Closed","edf3b96a":"#### `max_depth`","38bacbdb":"#### Competition","9dd234f5":"#### Imputing Missing Numerical Data","c9427ecf":"### Making Predictions","ab8b6d29":"Computing the number of months for which a competitor has been open near the store","040a8a97":"Now the Model is trained we can make predictions on the test set","58afd124":"#### Identify Input and Target columns","d0c14f5d":"Best way to fill the NAN values is by replacing them with 1 since we don't have any conclusive evidence that the Store was open or not","218a162f":"#### `learning_rate`","cb9ee156":"Downloading the required libraries","8f0f407d":"Saving the file for submission","641246b7":"Merge the information from `store_df` into `train_df` and `test_df`.","ec4b1c15":"### Train Gradient Boosting Model","31ac9452":"#### Encoding Categorical Data","d87dbb23":"#### Prediction","55a5adba":"#### Additional Promotion","d9d299c1":"Instead of trying to model this relationship, it would be better to hard-code it in our predictions, and remove the rows where the store is closed. We won't remove any rows from the test set, since we need to make predictions for every row.","977d0ea4":"#### Evaluating","84cc04ed":"#### Scaling Numeric Values","2723784c":"\n#### `n_estimators`\n"}}