{"cell_type":{"107915bc":"code","03ef9a04":"code","3ef81577":"code","d630169a":"code","074f116b":"code","3f92cd6c":"code","dcec9835":"code","520bddaf":"code","719651df":"code","878cb925":"code","80268d61":"code","0f2a13f1":"code","449375a6":"code","eddd991e":"markdown"},"source":{"107915bc":"import matplotlib.pyplot as plt\nfrom PIL import Image\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport math\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom sklearn import preprocessing\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport time\nimport warnings \nwarnings.filterwarnings('ignore')","03ef9a04":"import json, codecs\nwith codecs.open(\"..\/input\/herbarium-2020-fgvc7\/nybg2020\/train\/metadata.json\", 'r',\n                 encoding='utf-8', errors='ignore') as f:\n    train= json.load(f)\n    \nwith codecs.open(\"..\/input\/herbarium-2020-fgvc7\/nybg2020\/test\/metadata.json\", 'r',\n                 encoding='utf-8', errors='ignore') as f:\n    test = json.load(f)","3ef81577":"display(train.keys())\n","d630169a":"train_data = pd.DataFrame(train['annotations'])\ndisplay(train_data)","074f116b":"Cat = pd.DataFrame(train['categories'])\ndisplay(Cat)","3f92cd6c":"train_img = pd.DataFrame(train['images'])\ntrain_img.columns = ['file_name', 'height', 'image_id', 'license', 'width']\ndisplay(train_img)","dcec9835":"licenses = pd.DataFrame(train['licenses'])\ndisplay(licenses)","520bddaf":"regions = pd.DataFrame(train['regions'])\ndisplay(regions)","719651df":"train_data = train_data.merge(Cat, on='id', how='outer')\ntrain_data = train_data.merge(train_img, on='image_id', how='outer')\ntrain_data = train_data.merge(regions, on='id', how='outer')","878cb925":"print(train_data.info())\n\ndisplay(train_data)","80268d61":"test_data = pd.DataFrame(test['images'])\ntest_data.columns = ['file_name', 'height', 'image_id', 'license', 'width']\nprint(test_data.info())\ndisplay(test_data)","0f2a13f1":"print(len(train_data.id.unique()))\n","449375a6":"sub = pd.DataFrame()\nsub['Id'] = test_data.image_id\nsub['Predicted'] = list(map(int, np.random.randint(1, 32093, (test_data.shape[0]))))\ndisplay(sub)\nsub.to_csv('submission.csv', index=False)","eddd991e":"Merge"}}