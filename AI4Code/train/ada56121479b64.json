{"cell_type":{"8e2b0b9a":"code","369fcd83":"code","85ba3e09":"code","0d211aae":"code","f731ac0c":"code","eb0324a3":"code","17573690":"code","1ec64642":"code","892055bf":"code","b3de96fd":"markdown","86f8e5a2":"markdown","c462250d":"markdown"},"source":{"8e2b0b9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","369fcd83":"df = pd.read_csv('..\/input\/bitcoin-trends\/CBBTCUSD.csv')\ndf.head()","85ba3e09":"from fbprophet import Prophet\ndf1=df.rename(columns={\"DATE\": \"ds\", \"CBBTCUSD\": \"y\"})\ndf1\nm = Prophet()\nm.fit(df1)","0d211aae":"future = m.make_future_dataframe(periods=365)\nfuture.tail()","f731ac0c":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","eb0324a3":"fig1 = m.plot(forecast)","17573690":"fig2 = m.plot_components(forecast)","1ec64642":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\npy.iplot(fig)","892055bf":"_ = pd.pivot_table(df, values='CBBTCUSD', index='DATE').plot(style='-o', title=\"Bitcoin Trends\")\nplt.xticks(rotation=45)","b3de96fd":"#Codes from attollos https:\/\/www.kaggle.com\/attollos\/time-series-forecast-example-with-prophet\/","86f8e5a2":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","c462250d":"#Codes from Mysterious Ben https:\/\/www.kaggle.com\/myster\/eda-prophet-winning-solution-3-0"}}