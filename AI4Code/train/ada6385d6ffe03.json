{"cell_type":{"413babe6":"code","315b69dd":"code","7982ab5d":"code","de85251c":"code","494c37ab":"code","41caf96c":"code","d6f175f5":"code","a093e385":"code","b144da19":"code","d8ce5c4b":"code","2c3d05ef":"code","421a0b55":"code","408dc8c5":"code","094be91a":"code","5a5e09a4":"code","687f9ccc":"code","cd9e0db7":"code","d815f82d":"code","4a1b3313":"code","0675272c":"code","0f10bcf0":"code","0d415f0d":"code","f9efd9aa":"code","4260d643":"code","5d3934d3":"markdown","db9a06ac":"markdown","03b5c4b0":"markdown","6234edfe":"markdown","d219b051":"markdown","a4ccd8e6":"markdown","d1812918":"markdown","4141781e":"markdown","d9c4d904":"markdown","6109fc3c":"markdown","75c42778":"markdown","c4797872":"markdown","0320456b":"markdown","82340fe4":"markdown","b7941fc3":"markdown","094b7e1c":"markdown"},"source":{"413babe6":"import numpy as np\nimport math\nimport scipy as sp\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n##\nimport optuna\n##\nimport lightgbm as lgb","315b69dd":"df_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0, parse_dates=['issue_d'])\ndf_test  = pd.read_csv('..\/input\/homework-for-students4plus\/test.csv' , index_col=0, parse_dates=['issue_d'])","7982ab5d":"df_train.head()","de85251c":"df_train.reset_index(drop=True,inplace=True)\nX_train = df_train\nX_test  = df_test.copy()","494c37ab":"y_train = X_train[\"loan_condition\"]\nX_train = X_train.drop(\"loan_condition\",axis=1)","41caf96c":"## \u6642\u523b\ndate_col = ['issue_d']\n## \u8a00\u8a9e\nlang_col = ['emp_title','title']\n## \u30ab\u30c6\u30b4\u30ea\ncats_col = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats_col.append(col)\ncats_col = list(set(cats_col) - set(lang_col))\n## \u6570\u5024\nnum_col = list(X_train.columns)\nnum_col = list(set(num_col) - set(date_col))\nnum_col = list(set(num_col) - set(lang_col))\nnum_col = list(set(num_col) - set(cats_col))\n## \u78ba\u8a8d\nprint(\"date_col : \" + str(len(date_col)))\nprint(\"lang_col : \" + str(len(lang_col)))\nprint(\"cats_col : \" + str(len(cats_col)))\nprint(\"num_col  : \" + str(len(num_col)))\nprint(\"total    : \" + str(len(X_train.columns)))","d6f175f5":"## \u6642\u523b\nX_train_date = X_train[date_col].copy()\nX_test_date  = X_test[date_col].copy()\n## \u8a00\u8a9e\nX_train_lang = X_train[lang_col].copy()\nX_test_lang  = X_test[lang_col].copy()\n## \u30ab\u30c6\u30b4\u30ea\nX_train_cats = X_train[cats_col].copy()\nX_test_cats  = X_test[cats_col].copy()\n## \u6570\u5024\nX_train_num = X_train[num_col].copy()\nX_test_num  = X_test[num_col].copy()","a093e385":"X_train_num.fillna(X_train_num.median(),axis=0, inplace=True)\nX_test_num.fillna(X_train_num.median() ,axis=0, inplace=True)","b144da19":"X_train_cats.head()","d8ce5c4b":"cats_col","2c3d05ef":"target = 'loan_condition'\nX_temp = pd.concat([X_train_cats, y_train], axis=1)\n\nfor col in cats_col:\n    print(col)\n    # X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    summary = X_temp.groupby([col])[target].mean()\n    X_test_cats[col] = X_test_cats[col].map(summary) \n\n\n    # X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n    enc_train = pd.Series(np.zeros(len(X_train)), index=X_train.index)\n\n    for i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n        X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n        summary = X_train_.groupby([col])[target].mean()\n        enc_train.iloc[val_ix] = X_val[col].map(summary)\n        \n    X_train_cats[col]  = enc_train","421a0b55":"# \u78ba\u8a8d\nX_train_cats.head()","408dc8c5":"# \u78ba\u8a8d\nX_test_cats.head()","094be91a":"# \u6b20\u640d\u51e6\u7406\nX_train_cats.fillna(X_train_cats.median(),axis=0, inplace=True)\nX_test_cats.fillna(X_train_cats.median() ,axis=0, inplace=True)","5a5e09a4":"X_train = pd.concat([X_train_date,X_train_cats, X_train_num], axis=1)\nX_test  = pd.concat([X_test_cats , X_test_num], axis=1)\ndf_concat = pd.concat([X_train,y_train],axis=1)","687f9ccc":"df_concat = df_concat.set_index(\"issue_d\")\ninner_train = df_concat[:\"2015-06-01\"].reset_index()\ninner_val   = df_concat[\"2015-06-01\":].reset_index()\ninner_train[\"issue_d\"].max()","cd9e0db7":"X_inner_train = inner_train.drop([\"issue_d\",\"loan_condition\"],axis=1)\ny_inner_train = inner_train[\"loan_condition\"]\nX_inner_val   = inner_val.drop([\"issue_d\",\"loan_condition\"],axis=1)\ny_inner_val   = inner_val[\"loan_condition\"]","d815f82d":"def objectives(trial):\n    ## \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7a7a\u9593\u3092\u9069\u5f53\u306b\u8a2d\u5b9a\n    params = {\n        'num_leaves'       : trial.suggest_int('num_leaves', 2, 256),\n        'min_child_samples': int(trial.suggest_loguniform('min_child_samples', 100, 10000)),\n        'min_child_weight' : trial.suggest_loguniform('min_child_weight', 0.1, 2000),\n        'subsample'        : trial.suggest_uniform('subsample', 0.8, 1),\n        'colsample_bytree' : trial.suggest_uniform('colsample_bytree', 0.5, 1),\n        'learning_rate'    : trial.suggest_loguniform('learning_rate', 0.025, 0.5),\n        'min_data_in_leaf' : int(trial.suggest_loguniform('min_data_in_leaf', 1, 1000)),\n    }\n\n    # LightGBM\u3067\u5b66\u7fd2\n    model = lgb.LGBMRegressor(**params)\n    model.fit(X_inner_train, y_inner_train,\n              eval_set=(X_inner_val,y_inner_val),\n              early_stopping_rounds=20,\n              eval_metric='auc',\n              verbose=False)\n\n    # \u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\n    y_inner_pred = model.predict(X_inner_val)\n    score = roc_auc_score(y_inner_val,y_inner_pred)\n    \n    return score","4a1b3313":"%%time\n# optuna\u306b\u3088\u308b\u6700\u9069\u5316\u547c\u3073\u51fa\u3057\nopt = optuna.create_study(direction='maximize',sampler=optuna.samplers.RandomSampler(seed=71))\nopt.optimize(objectives, n_trials=20)","0675272c":"optuna.visualization.plot_optimization_history(opt)","0f10bcf0":"# \u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u53d6\u5f97\ntrial = opt.best_trial\nparams_best = dict(trial.params.items())\nparams_best['random_seed'] = 71\nparams_best[\"num_leaves\"] = int(params_best[\"num_leaves\"])\nparams_best[\"min_data_in_leaf\"] = int(params_best[\"min_data_in_leaf\"])","0d415f0d":"# \u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5b66\u7fd2\nmodel_best = lgb.LGBMRegressor(**params_best)\nmodel_best.fit(X_inner_train, y_inner_train,\n               eval_set=(X_inner_val,y_inner_val),\n               early_stopping_rounds=20,\n               verbose=False)    ","f9efd9aa":"y_pred = model_best.predict(X_test)","4260d643":"submission = pd.read_csv('..\/input\/homework-for-students4plus\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","5d3934d3":"## \u6539\u3081\u3066\u5b66\u7fd2","db9a06ac":"\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u7a7a\u9593\u3063\u3066\u3069\u308c\u304f\u3089\u3044\u304c\u3044\u3044\u3093\u3060\u308d\u3046\u3002  \nearly_stopping_rounds\u3082\u2190\u3053\u3063\u3061\u306ftrain\/val\u3067\u7cbe\u5ea6\u306e\u63a8\u79fb\u3092\u63cf\u753b\u3059\u308b\u3093\u3084\u3067\u3063\u3066\u8a00\u308f\u308c\u305d\u3046","03b5c4b0":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","6234edfe":"## 2015\u524d\u534a\u307e\u3067\u5b66\u7fd2","d219b051":"# \u30c7\u30fc\u30bf\u5206\u5272","a4ccd8e6":"## \u63d0\u51fa\u7528\u306e\u4e88\u6e2c","d1812918":"\u9069\u5f53\u306b\u6b20\u640d\u51e6\u7406","4141781e":"## optuna\u3067\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","d9c4d904":"## \u6570\u5024","6109fc3c":"## \u30bf\u30a4\u30d7\u3054\u3068\u306e\u5217\u540d","75c42778":"## \u5b66\u7fd2\u63cf\u753b","c4797872":"## \u30ab\u30c6\u30b4\u30ea","0320456b":"# \u5185\u90e8\u691c\u8a3c\u5b66\u7fd2","82340fe4":"## \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570","b7941fc3":"* \u30cf\u30a4\u30d1\u30e9\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3068\u7cbe\u5ea6\u78ba\u8a8d","094b7e1c":"* \u7279\u306b\u7279\u5fb4\u91cf\u3082\u4f5c\u308a\u3053\u307e\u305a\u306b\u3001Optuna+LightGBM\u3067\u3069\u308c\u304f\u3089\u3044\u884c\u304f\u306e\u304b\u8208\u5473\u304c\u3042\u3063\u305f\u306e\u3067\u904a\u3076"}}