{"cell_type":{"4ce38d7b":"code","bbb3b4d0":"code","98a58afe":"code","64ac993d":"code","20ecddd0":"code","175e9f0e":"code","1d459e8a":"code","e4b3c519":"markdown","af20aebd":"markdown","fce32cf9":"markdown","813e1696":"markdown","80d92bcc":"markdown","72f1fca6":"markdown","2c51ed14":"markdown","a92770fa":"markdown"},"source":{"4ce38d7b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cython","bbb3b4d0":"!mkdir -p \/tmp\/pip\/cache\/\n!cp ..\/input\/hdbscan0827-whl\/hdbscan-0.8.27-cp37-cp37m-linux_x86_64.whl \/tmp\/pip\/cache\/\n!pip install --no-index --find-links \/tmp\/pip\/cache\/ hdbscan","98a58afe":"import hdbscan","64ac993d":"# ref hdbscan.readthedocs.io\/en\/latest\/soft_clustering.html\n# Soft Clustering for HDBSCAN example for the digits dataset from sklearn\nfrom sklearn import datasets\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#import numpy as np  ","20ecddd0":"# project the data into two dimensions to visualize it via t-SNE.\ndigits = datasets.load_digits()\ndata = digits.data\nprojection = TSNE().fit_transform(data)\nplt.scatter(*projection.T, )","175e9f0e":"clusterer = hdbscan.HDBSCAN(min_cluster_size=10, prediction_data=True).fit(data)\ncolor_palette = sns.color_palette('Paired', 12)\ncluster_colors = [color_palette[x] if x >= 0\n                  else (0.5, 0.5, 0.5)\n                  for x in clusterer.labels_]\ncluster_member_colors = [sns.desaturate(x, p) for x, p in\n                         zip(cluster_colors, clusterer.probabilities_)]\nplt.scatter(*projection.T, s=50, linewidth=0, c=cluster_member_colors, alpha=0.25)","1d459e8a":"soft_clusters = hdbscan.all_points_membership_vectors(clusterer)\ncolor_palette = sns.color_palette('Paired', 12)\ncluster_colors = [color_palette[np.argmax(x)]\n                  for x in soft_clusters]\nplt.scatter(*projection.T, s=50, linewidth=0, c=cluster_colors, alpha=0.25)\n","e4b3c519":"Add data the Dataset  \n[hdbscan 0.8.27 whl](https:\/\/www.kaggle.com\/something4kag\/hdbscan0827-whl?select=hdbscan-0.8.27-cp37-cp37m-linux_x86_64.whl)\n\ninstall with commands as shown","af20aebd":"Certainly a number of clusters were found, but the data is fairly noisy in 64 dimensions, so there are a number of points that have been classified as noise. We can generate a soft clustering to get more information about some of these noise points.\n\nTo generate a soft clustering for all the points in the original dataset we use the all_points_membership_vectors() function which takes a clusterer object. If we wanted to get soft cluster membership values for a set of new unseen points we could use membership_vector() instead.\n\nThe return value is a two-dimensional numpy array. Each point of the input data is assigned a vector of probabilities of being in a cluster. For a first pass we can visualize the data looking at what the most likely cluster was, by coloring according to the argmax of the probability vector (i.e. the cluster for which a given point has the highest probability of being in).\n","fce32cf9":"There is more, but it works!\n\nNow for Optiver...","813e1696":"# HDBSCAN example","80d92bcc":"Now we import hdbscan and then cluster in the full 64 dimensional space. It is important to note that, if we wish to use the soft clustering we should use the prediction_data=True option for HDBSCAN. This will ensure we generate the extra data required that will allow soft clustering to work.","72f1fca6":"For install with internet, note there are currently issues:\n\nsee https:\/\/github.com\/scikit-learn-contrib\/hdbscan\/issues\/457\n\non import get  \nValueError: numpy.ndarray size changed, may indicate binary incompatibility. Expected 88 from C header, got 80 from PyObject\n\nwhat works  \n!pip install hdbscan --no-build-isolation --no-binary :all:","2c51ed14":"Soft Clustering example to confirm import and package works","a92770fa":"# HDBSCAN without internet"}}