{"cell_type":{"49cfcedc":"code","5b62bd82":"code","8812ce75":"code","5b5adcf5":"code","7d1aa62b":"code","3a192245":"code","2cb8181f":"code","a3efc317":"code","698f02d1":"code","812d3501":"code","07f27580":"code","b366030b":"code","2b45cebc":"code","c34a97c8":"code","52fd292e":"code","70c16934":"code","7ecb86a7":"code","7dbe7b81":"code","89a91976":"code","7233fd23":"code","10f3919c":"code","5886b7bd":"code","e03555fb":"code","917ed848":"code","ade70676":"code","992c4e3f":"code","b76ecba9":"code","4c4f0338":"code","f391d733":"code","472112d6":"code","ee949242":"code","aade351c":"code","bb2cca5b":"code","505a981c":"code","c83bcff7":"code","1f788324":"code","e21aa12c":"code","eff286fc":"code","3ef8b807":"code","57af8668":"code","7cb7cce7":"code","ae9bf52d":"code","488297b1":"code","7071f05c":"code","b6437966":"code","ddcfa9ee":"code","78f91231":"code","a4507410":"code","d8d361a4":"code","f70fef9c":"code","ecd0d308":"code","7b3964cb":"code","6faaf1be":"code","37e129f3":"code","eb771314":"code","8b37fda7":"code","d6d78022":"code","e2c1e032":"code","0463d2d4":"code","5ac8b1f3":"code","b42fa303":"code","65776b00":"code","7b267de4":"code","ce29be78":"code","b4476236":"code","e6652489":"code","815e0db9":"code","d12127be":"code","a43ae889":"code","00c3a4ed":"code","d7f0055d":"code","45dc12bc":"code","405a36b5":"code","f7366228":"code","a7755094":"code","e4a0387f":"markdown","40ce28e8":"markdown","478236b1":"markdown","93252527":"markdown","157dedbd":"markdown","06c1da7e":"markdown","8176c588":"markdown","57d61eaf":"markdown","e9d701bf":"markdown","9c351715":"markdown","aa9bf780":"markdown","04c81742":"markdown","ea81cc33":"markdown","9954ade7":"markdown","a6b11363":"markdown","d5f9b17a":"markdown","0dbbc163":"markdown","30b744b6":"markdown"},"source":{"49cfcedc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b62bd82":"test = pd.read_csv(\"\/kaggle\/input\/veriler\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/veriler\/train.csv\")\ndf_pop = pd.read_csv('\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv')\ncovid_pop = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-locations-population\/locations_population.csv')\n\ndisplay(train.describe())\ndisplay(train.tail(5))\ndisplay(train.shape)\ntrain[['Province_State','Country_Region','Date']].describe()","8812ce75":"train.isnull().sum()","5b5adcf5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nimport time\nimport datetime\nfrom datetime import datetime\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nww_df = train.groupby('Date')[['ConfirmedCases', 'Fatalities']].sum().reset_index()\n# shift is used to take the previous value\nww_df['New_Cases'] = ww_df['ConfirmedCases'] - ww_df['ConfirmedCases'].shift(1)\n\n#pd.melt ExcelDeki pivot tabloya benzer bir i\u015f g\u00f6r\u00fcr.\ntrend_df = pd.melt(ww_df, id_vars=['Date'], value_vars=['ConfirmedCases', 'Fatalities', 'New_Cases'])\ntrend_df.head(5)\n\nfig = px.line(trend_df, x=\"Date\", y=\"value\", color='variable', title=\"D\u00fcnya \u00e7ap\u0131ndaki vaka ve \u00f6l\u00fcm oranlar\u0131\")\nfig.show()","7d1aa62b":"plt.style.use(['tableau-colorblind10'])\n\n#Vaka say\u0131s\u0131 en y\u00fcksek 8 \u00fclkeyi g\u00f6stereyim\n\ndf_Country = train.groupby(['Country_Region'])[[\"Fatalities\",\"ConfirmedCases\"]].max().nlargest(8,'Fatalities')\n\n#fatality % = Fatality_Count \/ Confirmed_Count\n\ndf_Country['Fatality_Percentage'] = df_Country['Fatalities']\/ df_Country['ConfirmedCases']\ndf_Country = df_Country.reset_index()\ndf_Country.sort_values('Fatality_Percentage',inplace=True)\nfigure, axes = plt.subplots(1, 2,figsize=(12,4))\ndf_Country.plot(ax= axes[0],x = 'Country_Region', y = [\"Fatalities\",\"ConfirmedCases\"],kind='bar', title = '\u00d6l\u00fcm ve Vaka say\u0131s\u0131')\ndf_Country.plot(ax= axes[1],x = 'Country_Region', y = [\"Fatality_Percentage\"],kind='bar', title = 'Vakalar\u0131n \u00f6l\u00fcmleri')","3a192245":"#ayr\u0131 ayr\u0131 en az 1 Fatality ve en az 1 teyit edilmi\u015f vakan\u0131n tarihini ald\u0131m\ncond1 = train.Fatalities >=1\ncond2 = train.ConfirmedCases >= 1\ntrain_Fatal = train[['Country_Region','Date']][(cond1)]\ntrain_Confirm = train[['Country_Region','Date']][(cond2)]\n\n#her \u00fclke i\u00e7in ilk onaylanm\u0131\u015f vaka tarihini ald\u0131m\nConfirm_Min_Max = train_Confirm.groupby(\"Country_Region\", as_index=False)[\"Date\"].agg([\"min\",\"max\"])\n\n#her \u00fclke i\u00e7in ilk Fatality tarihini ald\u0131m\nFatal_Min_Max = train_Fatal.groupby(\"Country_Region\", as_index=False)[\"Date\"].agg([\"min\",\"max\"])\n\nCountry_Dates = pd.merge(Confirm_Min_Max, Fatal_Min_Max, how='left', on=['Country_Region'])\nCountry_Dates = Country_Dates.rename(columns={'min_x': 'fst_Confirmed', 'max_x': 'last_Confirmed', 'min_y': 'fst_Fatal','max_y': 'last_Fatal'}) \n\nCountry_Dates['Fatality_Days'] = pd.to_datetime(Country_Dates['last_Fatal']) - pd.to_datetime(Country_Dates['fst_Fatal'])\nCountry_Dates = Country_Dates.reset_index()","2cb8181f":"#Fatality_Days de\u011ferlerini tamsay\u0131 de\u011ferlerine d\u00f6n\u00fc\u015ft\u00fcrme\n\nCountry_Dates['Fatality_Days'] = Country_Dates['Fatality_Days'] \/ np.timedelta64(1, 'D')\nCountry_Dates.head(5)","a3efc317":"# \u00dclkelere g\u00f6re vaka say\u0131lar\u0131 ve \u00f6l\u00fcm oranlar\u0131\n\ncond1 = train.Date == '2020-04-12'\nCountry_Counts = train[['Country_Region','Date','Fatalities','ConfirmedCases']][(cond1)]\n\n# \u00dclkeye g\u00f6re grupland\u0131r\u0131lm\u0131\u015f minimum tarihleri ve say\u0131lar\u0131 alma\n\ndf_Country2 = pd.merge(Country_Dates, Country_Counts, how='left', on=['Country_Region'])\n\ndf_Country2['Fatality_Rate'] = round(df_Country2['Fatalities']\/pd.to_numeric(df_Country2['Fatality_Days']),2)\ndf_Country2['Fatality_Rate'] = round(df_Country2['Fatalities']\/pd.to_numeric(df_Country2['Fatality_Days']),2)\n\n#null \u00f6l\u00fcm oranlar\u0131 0 olarak ayarland\u0131\n#infinity \u00f6l\u00fcm oranlar\u0131 NaN olarak ayarland\u0131\n\ndf_Country2['Fatality_Rate'] = df_Country2['Fatality_Rate'].fillna(0)\ndf_Country2 = df_Country2.replace([np.inf, -np.inf], np.nan)\n\n#\u00d6l\u00fcm oranlar\u0131 en y\u00fcksek 8 \u00fclkeyi g\u00f6relim\n\ndf_Country3 = df_Country2[df_Country2['Fatality_Rate'] > 0].groupby(['Country_Region'])[[\"Fatality_Rate\"]].sum().nlargest(8,'Fatality_Rate')\ndf_Country3 = df_Country3.reset_index()","698f02d1":"\nfig = px.bar(df_Country3, x='Country_Region', y='Fatality_Rate',color='Fatality_Rate')\nfig.show()","812d3501":"confirmed_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_China = confirmed_China.join(fatalities_China)\n\nconfirmed_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_Italy = confirmed_Italy.join(fatalities_Italy)\n\nconfirmed_Spain = train[train['Country_Region']=='Spain'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_Spain = train[train['Country_Region']=='Spain'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_Spain = confirmed_Spain.join(fatalities_Spain)\n\nconfirmed_Iran = train[train['Country_Region']=='Iran'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_Iran = train[train['Country_Region']=='Iran'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_Iran = confirmed_Iran.join(fatalities_Iran)\n\nconfirmed_France = train[train['Country_Region']=='France'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_France = train[train['Country_Region']=='France'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_France = confirmed_France.join(fatalities_France)\n\nconfirmed_Netherlands = train[train['Country_Region']=='Netherlands'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_Netherlands = train[train['Country_Region']=='Netherlands'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_Netherlands = confirmed_Netherlands.join(fatalities_Netherlands)\n\nconfirmed_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_UK = confirmed_UK.join(fatalities_UK)\n\nconfirmed_USA = train[train['Country_Region']=='US'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_USA = train[train['Country_Region']=='US'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_USA = confirmed_USA.join(fatalities_USA)","07f27580":"plt.figure(figsize=(24,18))\n\nplt.subplot(3, 3, 1)\ntotal_China.plot(ax=plt.gca(), title='China')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(3, 3, 2)\ntotal_Italy.plot(ax=plt.gca(), title='Italy')\n\nplt.subplot(3, 3, 3)\ntotal_Spain.plot(ax=plt.gca(), title='Spain')\n\nplt.subplot(3, 3, 4)\ntotal_Iran.plot(ax=plt.gca(), title='Iran')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(3, 3, 5)\ntotal_France.plot(ax=plt.gca(), title='France')\n\nplt.subplot(3, 3, 6)\ntotal_Netherlands.plot(ax=plt.gca(), title='Netherlands')\n\nplt.subplot(3, 3, 7)\ntotal_UK.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(3, 3, 8)\ntotal_USA.plot(ax=plt.gca(), title='USA')","b366030b":"# pop\u00fclasyondan yaln\u0131zca gerekli s\u00fctunlar\u0131 se\u00e7tim\ndf_pop_sel = df_pop[['Country (or dependency)','Population (2020)','Density (P\/Km\u00b2)','Land Area (Km\u00b2)','Med. Age','Urban Pop %']]\n\n#s\u00fctunlar\u0131 yeniden adland\u0131rd\u0131m\ndf_pop_sel.columns = ['Country_Region', 'Population (2020)', 'Density (P\/Km\u00b2)','Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']\n\n# % i\u015faretini kald\u0131rd\u0131m. Sadece say\u0131 olarak g\u00f6sterecek\ndf_pop_sel['Urban Pop %'] = df_pop_sel['Urban Pop %'].str.rstrip('%')\n\n# United States yerin US yazacak. Tablo yatay olarak k\u0131sals\u0131n diye\ndf_pop_sel.loc[df_pop_sel['Country_Region']=='United States', 'Country_Region'] = 'US'\n\ndf_country_pop = pd.merge(df_pop_sel, df_Country, how='inner', on=['Country_Region'])\ndf_country_pop","2b45cebc":"df_country_pop[\"pop_factor_fatal\"] = df_country_pop['Fatalities']\/df_country_pop['Population (2020)']\ndf_country_pop[\"pop_factor_confirmed\"] = df_country_pop['ConfirmedCases']\/df_country_pop['Population (2020)']\n#df_country_pop = df_country_pop.reset_index(drop = True)\ndf_country_pop.sort_values('pop_factor_fatal',inplace=True)\ndf_country_pop\ndf_country_pop.plot(x = 'Country_Region', y = [\"pop_factor_fatal\",\"pop_factor_confirmed\"],kind='barh', title = '\u00d6l\u00fcmler pop\u00fclasyona dikkat edilerek \u015fekillendi',figsize = (8,4))","c34a97c8":"# 26 Mart'tan \u00f6nce verileri filtrelemek\n\ncond1 = train['Date'] < '2020-04-01'\ntrain_fil = train[(cond1)]\ndisplay(train_fil['Date'].max())\ndisplay(train_fil['Date'].min())","52fd292e":"display(train_fil.head(5))\ndisplay(covid_pop.head(5))","70c16934":"#\u00d6n i\u015fleme\n\ntrain_fil['Date'] = pd.to_datetime(train_fil['Date'])\ntrain_fil['Day_num'] = preprocessing.LabelEncoder().fit_transform(train_fil.Date)\ntrain_fil['Day'] = train_fil['Date'].dt.day\ntrain_fil['Month'] = train_fil['Date'].dt.month\ntrain_fil['Year'] = train_fil['Date'].dt.year\n\ntrain_fil_copy = train_fil\n\ntrain_fil['Province_State'].fillna(\"None\", inplace=True)\n\n# Bo\u015f de\u011ferleri kontrol etme\ntrain_fil[train_fil.iloc[:,0:].isnull().any(axis = 1)].iloc[:,0:].head()","7ecb86a7":"# covid veri k\u00fcmesine ili\u015fkin n\u00fcfus ayr\u0131nt\u0131lar\u0131 i\u00e7in yeni bir veri k\u00fcmesi y\u00fcklendi. Bunu n\u00fcfus verileri i\u00e7in kullan\u0131yorum\n\ncovid_pop_sel = covid_pop[['Province.State','Country.Region','Population']]\ncovid_pop_sel['Province.State'].fillna(\"None\", inplace=True)\n\n# Bo\u015f de\u011ferleri kontrol etme\ncovid_pop_sel[covid_pop_sel.iloc[:,0:].isnull().any(axis = 1)].iloc[:,0:].head()","7dbe7b81":"df_train_pop = train_fil.merge(covid_pop_sel, left_on = ['Country_Region','Province_State'], right_on = ['Country.Region','Province.State'], how = 'left')","89a91976":"display(covid_pop_sel[covid_pop_sel['Country.Region']=='Italy'])\ndisplay(train_fil[train_fil['Country_Region']=='Italy'])","7233fd23":"# Null n\u00fcfusa sahip Country_Regions alma\ndf_train_pop['Province_State'][df_train_pop['Population'].isnull()].unique()\ndf_train_pop.reindex()","10f3919c":"df_train_pop[df_train_pop.iloc[:,1:].isnull().any(axis = 1)].iloc[:,1:].head(3)","5886b7bd":"# # null de\u011ferleri i\u015fleme\ndf_train_pop['Province.State'].fillna(\"None\", inplace=True)\ndf_train_pop['Country.Region'].fillna(\"None\", inplace=True)\ndf_train_pop['Population'] = df_train_pop['Population'].fillna(0)","e03555fb":"missings_count = {col:df_train_pop[col].isnull().sum() for col in df_train_pop.columns}\nmissings = pd.DataFrame.from_dict(missings_count, orient='index')\nprint(missings.nlargest(30, 0))","917ed848":"# SIR modeli i\u00e7in veri k\u00fcmesini gerekti\u011fi gibi d\u00fczenledim\ndf_train_pop.head(5)\n","ade70676":"df_fin_selc = df_train_pop[['Province_State','Country_Region','Date','ConfirmedCases','Fatalities','Day_num','Day','Month','Year','Population']]","992c4e3f":"df_fin_selc[df_fin_selc['Date']=='2020-03-25'].head(5)","b76ecba9":"df_fin_selc['I'] = df_fin_selc['ConfirmedCases']-df_fin_selc['Fatalities']\ndf_fin_selc['R'] = df_fin_selc['Fatalities']\ndf_fin_selc['S'] = df_fin_selc['Population']-df_fin_selc['ConfirmedCases']\ndf_SIR = df_fin_selc[['Province_State','Country_Region','Population','Day_num','S','I','R']].reindex()\ndf_SIR[df_SIR['Country_Region'] == 'Italy'].tail(5)","4c4f0338":"df_SIR[df_SIR['Country_Region']=='United Kingdom'].plot(x='Day_num',y= ['I','R'],kind = 'line')","f391d733":"import numpy as np\nfrom scipy.integrate import odeint\nfrom scipy import integrate, optimize","472112d6":"def SIR_testmodel(y,t,bta,gmma):\n    S, I, R = y\n    \n    dS_dt = -1*bta*I*S\/N\n    dI_dt = (bta*I*S\/N) - gmma*I\n    dR_dt = gmma*I\n    \n    return ([dS_dt, dI_dt, dR_dt])","ee949242":"# ba\u015flang\u0131\u00e7 ko\u015fullar\u0131n\u0131n tan\u0131mlanmas\u0131\n\nN = 1\nS00 = 0.9\nI00 = 0.1\nR00 = 0.0\nbta = 0.35\ngmma = 0.1\n\nt = np.linspace(0,100,1000)\n\nsol = odeint(SIR_testmodel,[S00,I00,R00],t,args = (bta,gmma))\nsol = np.array(sol)","aade351c":"# plot sonu\u00e7lar\u0131\nplt.figure(figsize=(6,4))\nplt.plot(t, sol[:,0],label = \"S(t)\")\nplt.plot(t, sol[:,1],label = \"I(t)\")\nplt.plot(t, sol[:,2],label = \"R(t)\")\nplt.legend()\nplt.show()","bb2cca5b":"# Vaka say\u0131s\u0131 ve \u00f6l\u00fcm oran\u0131 fazla oldu\u011fu i\u00e7in \u0130talya'y\u0131 se\u00e7tim\nItaly_SIR_df = df_SIR[df_SIR['Country_Region']=='Italy']\nItaly_SIR_df = Italy_SIR_df.reset_index(drop = True)\nItaly_SIR_df.tail(5)","505a981c":"display(covid_pop_sel[covid_pop_sel['Country.Region']=='Italy'])","c83bcff7":"Country_Dates[Country_Dates['Country_Region'] == 'Italy']","1f788324":"cond1 = Italy_SIR_df.I >= 1\ntest = Italy_SIR_df['Day_num'][(cond1)]\ntest\nItaly_SIR_df.iloc[:10]","e21aa12c":"Italy_S = Italy_SIR_df['S']\nItaly_I = Italy_SIR_df['I']\nItaly_R = Italy_SIR_df['R']\n\nItaly_s = np.array(Italy_S, dtype=float)\nItaly_i = np.array(Italy_I, dtype=float)\nItaly_r = np.array(Italy_R, dtype=float)\n\ndisplay(Italy_s[9],Italy_i[9], Italy_r[9])","eff286fc":"def SIR_model(y,t,beta,gamma):\n    S, I, R = y\n    N = 60480000\n    dS_dt = -1*beta*I*S\/N\n    dI_dt = (beta*I*S\/N) - gamma*I\n    dR_dt = gamma*I\n    \n    return ([dS_dt, dI_dt, dR_dt])\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(SIR_model, (S0, I0, R0), x, args=(beta, gamma))[:,1]","3ef8b807":"xdata = Italy_SIR_df.Day_num\nydata = Italy_i\nxdata = np.array(xdata, dtype=float)\n\nS0 = 60479998.0\nI0 = 2.0\nR0 = 0\ny = S0, I0, R0\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)","57af8668":"plt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"SIR modeli - 1 Nisan \u00f6ncesi veriler, \u0130talya\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","7cb7cce7":"comp_df = pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv')\ncomp_df.head(5)","ae9bf52d":"comp_df['Province\/State'].fillna(\"None\", inplace=True)\n\n#null de\u011ferleri kontrol etme\ncomp_df[comp_df.iloc[:,0:].isnull().any(axis = 1)].iloc[:,0:].head()","488297b1":"comp_df['Date'] = pd.to_datetime(comp_df['Date'])","7071f05c":"covid_pop_sel.loc[covid_pop_sel['Country.Region']=='Korea, South', 'Country.Region'] = 'South Korea'\ncomp_df_pop = comp_df.merge(covid_pop_sel, left_on = ['Country\/Region','Province\/State'], right_on = ['Country.Region','Province.State'], how = 'left')\ncomp_df_pop.tail(3)","b6437966":"comp_pop_sel = comp_df_pop[['Province\/State','Country\/Region','Date','Confirmed','Deaths','Recovered','Population']]","ddcfa9ee":"comp_pop_sel['Country\/Region'][comp_pop_sel['Population'].isnull()].unique()","78f91231":"missings_count = {col:comp_pop_sel[col].isnull().sum() for col in comp_pop_sel.columns}\nmissings = pd.DataFrame.from_dict(missings_count, orient='index')\nprint(missings.nlargest(30, 0))","a4507410":"#null de\u011ferlerini kald\u0131rma\ncomp_pop_sel['Population'] = comp_pop_sel['Population'].fillna(0)","d8d361a4":"comp_df_Italy = comp_pop_sel[comp_pop_sel['Country\/Region']=='Italy']\ncomp_df_Italy = comp_df_Italy.reset_index(drop = True)\ncomp_df_Italy.tail(5)","f70fef9c":"comp_df_Italy['Day_num'] = preprocessing.LabelEncoder().fit_transform(comp_df_Italy.Date)\ncomp_df_Italy.tail(3)","ecd0d308":"comp_df_Italy['R'] = comp_df_Italy['Deaths']+comp_df_Italy['Recovered']\ncomp_df_Italy['I'] = comp_df_Italy['Confirmed']- comp_df_Italy['R']\ncomp_df_Italy['S'] = comp_df_Italy['Population']-comp_df_Italy['I']-comp_df_Italy['R']\ncomp_df_Italy.tail(3)","7b3964cb":"comp_df_Italy_S = comp_df_Italy['S']\ncomp_df_Italy_I = comp_df_Italy['I']\ncomp_df_Italy_R = comp_df_Italy['R']\n\ncomp_df_Italy_s = np.array(comp_df_Italy_S, dtype=float)\ncomp_df_Italy_i = np.array(comp_df_Italy_I, dtype=float)\ncomp_df_Italy_r = np.array(comp_df_Italy_R, dtype=float)\n\ndisplay(comp_df_Italy_s[9],comp_df_Italy_i[9], comp_df_Italy_r[9])","6faaf1be":"N = 60480000\nS0 = 60479998\nI0 = 2\nR0 = 0\n\nxdata = comp_df_Italy.Day_num\nxdata = np.array(xdata, dtype=float)\nydata = comp_df_Italy_i\nydata = np.array(ydata, dtype=float)\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"SIR modelinin uyumu, mevcut t\u00fcm verilerle, \u0130talya\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","37e129f3":"df_train = pd.read_csv('\/kaggle\/input\/covid19globalforecasting\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/covid19globalforecasting\/test.csv')\ndf_subm = pd.read_csv('\/kaggle\/input\/covid19globalforecasting\/submission.csv')","eb771314":"df_train_copy = df_train.copy()\ndf_test_copy = df_test.copy()","8b37fda7":"df_train.rename(columns={'Country_Region':'Country'}, inplace=True)\ndf_train.rename(columns={'Province_State':'State'}, inplace=True)\ndf_train['Date'] = pd.to_datetime(df_train['Date'], infer_datetime_format=True)\n\ndf_test.rename(columns={'Country_Region':'Country'}, inplace=True)\ndf_test.rename(columns={'Province_State':'State'}, inplace=True)\ndf_test['Date'] = pd.to_datetime(df_test['Date'], infer_datetime_format=True)","d6d78022":"# Onaylanm\u0131\u015f vakalar\ny1_df_Train = df_train.iloc[:, -2]\n#fatalities\ny2_df_Train = df_train.iloc[:, -1]\n\nNOVAL = \"NOVAL\"\ndef handlenullstate(State, Country):\n    if State == NOVAL: return Country\n    return State","e2c1e032":"\ndf_train['State'].fillna(NOVAL, inplace=True)\ndf_train['State'] = df_train.loc[:, ['State', 'Country']].apply(lambda x : handlenullstate(x['State'], x['Country']), axis=1)\n\ndf_train.loc[:, 'Date'] = df_train.Date.dt.strftime(\"%m%d\")\ndf_train[\"Date\"]  = df_train[\"Date\"].astype(int)\n\ndf_test['State'].fillna(NOVAL, inplace=True)\ndf_test['State'] = df_test.loc[:, ['State', 'Country']].apply(lambda x : handlenullstate(x['State'], x['Country']), axis=1)\n\ndf_test.loc[:, 'Date'] = df_test.Date.dt.strftime(\"%m%d\")\ndf_test[\"Date\"]  = df_test[\"Date\"].astype(int)\n\ndf_test.head()","0463d2d4":"covid_pop_taken = covid_pop[['Province.State','Country.Region','Population']]","5ac8b1f3":"covid_pop_taken.rename(columns={'Province.State':'State'}, inplace=True)\ncovid_pop_taken.rename(columns={'Country.Region':'Country'}, inplace=True)","b42fa303":"covid_pop_taken['State'].fillna(\"None\", inplace=True)\nNOVAL = 'None'\ncovid_pop_taken['State'] = covid_pop_taken.loc[:, ['State', 'Country']].apply(lambda x : handlenullstate(x['State'], x['Country']), axis=1)\ncovid_pop_taken.head(3)","65776b00":"df_train_copy2 = df_train.copy()\ndf_test_copy2 = df_test.copy()\ndf_test.head(3)","7b267de4":"df_train_co_pop = df_train.merge(covid_pop_taken, left_on = ['Country','State'], right_on = ['Country','State'], how = 'left')\ndf_test_co_pop = df_test.merge(covid_pop_taken, left_on = ['Country','State'], right_on = ['Country','State'], how = 'left')\ndf_test_co_pop.head(5)","ce29be78":"df_train_co_pop['Country'][df_train_co_pop['Population'].isnull()].unique()","b4476236":"df_train_co_pop[['Population']] = preprocessing.scale(df_train_co_pop[['Population']])\ndf_test_co_pop[['Population']] = preprocessing.scale(df_test_co_pop[['Population']])","e6652489":"df_train_co_pop.head(3)","815e0db9":"df_train = df_train_co_pop \ndf_test = df_test_co_pop ","d12127be":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\n\ndf_train.Country = le.fit_transform(df_train.Country)\ndf_train['State'] = le.fit_transform(df_train['State'])\ndf_train.Country = le.fit_transform(df_train.Country)\n\ndf_test.Country = le.fit_transform(df_test.Country)\ndf_test['State'] = le.fit_transform(df_test['State'])\n\ndf_test.head()","a43ae889":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\nfrom sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\n\nfrom xgboost import XGBRegressor\n\ncountries = df_train.Country.unique()","00c3a4ed":"xout = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\n\nfor country in countries:\n    states = df_train.loc[df_train.Country == country, :].State.unique()\n    for state in states:\n        #trian\n        x_train_CS = df_train.loc[(df_train.Country == country) & (df_train.State == state), ['State', 'Country', 'Date', 'ConfirmedCases', 'Fatalities','Population']]\n        y1_train_CS = x_train_CS.loc[:, 'ConfirmedCases']\n        y2_train_CS = x_train_CS.loc[:, 'Fatalities']\n        x_train_CS = x_train_CS.loc[:, ['State', 'Country', 'Date','Population']]\n        x_train_CS.Country = le.fit_transform(x_train_CS.Country)\n        x_train_CS['State'] = le.fit_transform(x_train_CS['State'])\n        \n        #test\n        x_test_CS = df_test.loc[(df_test.Country == country) & (df_test.State == state), ['State', 'Country', 'Date', 'ForecastId','Population']]\n        x_test_CS_Id = x_test_CS.loc[:, 'ForecastId']\n        x_test_CS = x_test_CS.loc[:, ['State', 'Country', 'Date','Population']]\n        x_test_CS.Country = le.fit_transform(x_test_CS.Country)\n        x_test_CS['State'] = le.fit_transform(x_test_CS['State'])\n        \n        xmodel1 = XGBRegressor(n_estimators=1000)\n        xmodel1.fit(x_train_CS, y1_train_CS)\n        y1_xpred = xmodel1.predict(x_test_CS)\n        \n        xmodel2 = XGBRegressor(n_estimators=1000)\n        xmodel2.fit(x_train_CS, y2_train_CS)\n        y2_xpred = xmodel2.predict(x_test_CS)\n        \n        xdata = pd.DataFrame({'ForecastId': x_test_CS_Id, 'ConfirmedCases': y1_xpred, 'Fatalities': y2_xpred})\n        xout = pd.concat([xout, xdata], axis=0)","d7f0055d":"xout.ForecastId = xout.ForecastId.astype('int')\nxout['ConfirmedCases'] = round(xout['ConfirmedCases'],1)\nxout['Fatalities'] = round(xout['Fatalities'],1)\ndisplay(xout.head())","45dc12bc":"#xout['ForecastId'] = xout['ForecastId'].apply(int)\nxout['ConfirmedCases'] = xout['ConfirmedCases'].apply(int)\nxout['Fatalities'] = xout['Fatalities'].apply(int)","405a36b5":"xout.dtypes","f7366228":"xout = xout.drop_duplicates()\nxout.reindex()","a7755094":"xout.to_csv('submission.csv', index=False)\ndata = pd.read_csv('\/kaggle\/working\/submission.csv')\ndata\n\n","e4a0387f":"# Veri K\u00fcmesini Temizleme","40ce28e8":"N\u00fcfus, N\u00fcfus Yo\u011funlu\u011fu, Ortanca Ya\u015f, Kentsel n\u00fcfusun etkisi hakk\u0131nda bir fikir edinmek i\u00e7in a\u015fa\u011f\u0131daki fakt\u00f6rleri olu\u015ftural\u0131m:\n\n* pop_factor - pop\u00fclasyon dikkate al\u0131narak (\u00d6l\u00fcmler \/ N\u00fcfus): daha b\u00fcy\u00fck de\u011fer, daha b\u00fcy\u00fck etki\n* Density_factor - pop\u00fclasyon yo\u011funlu\u011funu g\u00f6z \u00f6n\u00fcnde bulundurarak:\n* age_factor - Ortanca Ya\u015f dikkate al\u0131nd\u0131\u011f\u0131nda\n* urban_factor - kentsel n\u00fcfusu g\u00f6z \u00f6n\u00fcnde bulundurmak\n\nG\u00f6stermek i\u00e7in sadece n\u00fcfus fakt\u00f6r\u00fcn\u00fc kullanaca\u011f\u0131m","478236b1":"**SIR modelinin ger\u00e7ek verilerle denenmesi**","93252527":"train veri setindeki 'null' de\u011ferlerini g\u00f6rmek i\u00e7in a\u015fa\u011f\u0131daki kodu kullan\u0131yoruz.","157dedbd":"Verilerimizi okutuyoruz ve g\u00f6steriyoruz. ","06c1da7e":"# **XGBoost Algoritmas\u0131**","8176c588":"Yukar\u0131daki grafiklere bakt\u0131\u011f\u0131mda \u00fclkeleri a\u015fa\u011f\u0131daki gruplara ay\u0131rd\u0131m.\n\n*  \u00c7in - \u00c7in'de ilk salg\u0131n ger\u00e7ekle\u015fti\u011fi i\u00e7in, bu istisnai bir durumdur. Ayr\u0131 ayr\u0131 \u00e7al\u0131\u015f\u0131lmas\u0131 gerekiyor\n* \u0130talya, \u0130spanya, ABD, Fransa - Bunlar, hem Fatality oran\u0131 hem de (Fatalities \/ Confirmed) oran\u0131 dikkate al\u0131nd\u0131\u011f\u0131nda etkilenen ilk 4 \u00fclke.\n* Hollanda, \u0130ran, \u0130ngiltere - Bunlar etkilenen ilk 8 \u00fclkeden kalan \u00fclkeler\n* Di\u011fer \u00fclkeler","57d61eaf":"Her \u00fclkede \u00f6l\u00fcmlerin ne kadar h\u0131zl\u0131 ger\u00e7ekle\u015fti\u011fini kontrol etmek gerekiyor. Bunun i\u00e7in ilk \u00f6l\u00fcmc\u00fcl tarihi, son \u00f6l\u00fcmc\u00fcl tarihi ald\u0131m. Bu 2 de\u011fer aras\u0131ndaki fark bize \u00fclkenin Fatality Status'ta oldu\u011fu g\u00fcn say\u0131s\u0131n\u0131 verir. \u00d6l\u00fcmc\u00fcl say\u0131n\u0131n bu \u00d6l\u00fcml\u00fc G\u00fcn say\u0131s\u0131na b\u00f6l\u00fcnmesi \u00f6l\u00fcmc\u00fcl oran\u0131 verir.","e9d701bf":"* Do\u011frulanm\u0131\u015f, \u00d6l\u00fcmc\u00fcl ve Yeni Say\u0131mlar hala her ge\u00e7en g\u00fcn art\u0131\u015f e\u011filimi ve art\u0131\u015f g\u00f6stermektedir.\n* ABD en y\u00fcksek onaylanan say\u0131y\u0131 g\u00f6sterir.\n* \u0130talya en y\u00fcksek \u00f6l\u00fcmc\u00fcl say\u0131y\u0131 g\u00f6sterir.\n* \u0130talya, \u00d6l\u00fcmler ve Onaylanm\u0131\u015f Vakalar aras\u0131nda en y\u00fcksek oran\u0131 g\u00f6stermektedir.\n* \u0130talya, \u0130spanya, ABD, Fransa, \u00f6l\u00fcmc\u00fcl oranlar\u0131n en y\u00fcksek oldu\u011fu 4 \u00fclke. \u00d6l\u00fcm oran\u0131, o \u00fclkenin ilk belirlenen \u00f6l\u00fcmc\u00fcl vakas\u0131ndan sonraki \u00f6l\u00fcmc\u00fcl say\u0131d\u0131r.\n* \u00c7in'in e\u011filimi, di\u011fer \u00fclkelerin g\u00fcnl\u00fck e\u011filimleriyle (Vaka say\u0131s\u0131 ve \u00d6l\u00fcm) farkl\u0131d\u0131r. Bu, salg\u0131n\u0131n \u00c7in'de ilk kez ba\u015flad\u0131\u011f\u0131 ve kaydedildi\u011fi i\u00e7in olabilir. Bu nedenle, modelleme b\u00f6l\u00fcm\u00fcnde \u00c7in ayr\u0131 ayr\u0131 ele al\u0131nmal\u0131d\u0131r.\n* \u0130talya ve \u0130spanya, n\u00fcfusu ile kar\u015f\u0131la\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda \u00f6nemli bir \u00f6l\u00fcmc\u00fcl say\u0131ya ve vaka say\u0131s\u0131na sahiptir","9c351715":"**Analiz:** E\u011frinin 1 Nisan'dan \u00f6nce verilere uydu\u011fundan, e\u011fri 1 Nisan'dan sonra verilere uymuyor. Bunun i\u00e7in XGBOOST s\u0131n\u0131fland\u0131r\u0131c\u0131s\u0131n\u0131 deneyece\u011fim. XGBoost, h\u0131z ve performans i\u00e7in tasarlanm\u0131\u015f gradyan destekli karar a\u011fa\u00e7lar\u0131n\u0131n bir uygulamas\u0131d\u0131r.","aa9bf780":"# 4 Nisan 2020'de kaydedilen Ke\u015fifsel Veri Analizi bilgileri","04c81742":"Salg\u0131n tahmininde kullan\u0131lan baz\u0131 modeller:\n\notoregresif entegre hareketli ortalama (ARIMA) modeli - do\u011fru sadece k\u0131sa vadeli tahmin\ngenelle\u015ftirilmi\u015f do\u011frusal model (GLM)\nSIR (Duyarl\u0131 - Enfekte - Kald\u0131r\u0131ld\u0131) modeli\nSEIR (Duyarl\u0131 - Maruz - Enfekte - Kald\u0131r\u0131ld\u0131) modeli\n\n**SIR Model**\n\nBu, bir salg\u0131n\u0131n davran\u0131\u015f\u0131n\u0131 incelemek i\u00e7in \u00e7o\u011funlukla kullan\u0131lan bir modeldir.\n\n* S - Duyarl\u0131, bula\u015f\u0131c\u0131 insanlara maruz kalmaya kar\u015f\u0131 savunmas\u0131z olan bir grup insand\u0131r. Enfeksiyon meydana geldi\u011finde sab\u0131rl\u0131 olabilirler\n* I - bula\u015f\u0131c\u0131 enfekte olmu\u015f insanlar\u0131 temsil eder\n* R - Kurtar\u0131lan \/ Kald\u0131r\u0131lan insanlar art\u0131k ayn\u0131 hastal\u0131\u011fa kar\u015f\u0131 duyarl\u0131 olmamalar\u0131 i\u00e7in ba\u011f\u0131\u015f\u0131kl\u0131k kazan\u0131yor\n\nBu Modelin SEIR (Maruz kalan pop\u00fclasyonu g\u00f6z \u00f6n\u00fcne alarak) ve SIRD (\u00d6l\u00fcmleri g\u00f6z \u00f6n\u00fcnde bulundurarak) gibi baz\u0131 geni\u015fletilmi\u015f s\u00fcr\u00fcmleri vard\u0131r.","ea81cc33":"G\u00f6zlemler\n\n* Yukar\u0131daki grafikler a\u00e7\u0131k\u00e7a \u00c7in'deki trendin di\u011fer \u00fclkelerden farkl\u0131 oldu\u011funu g\u00f6steriyor\n* Di\u011fer t\u00fcm \u00fclkeler olas\u0131 bir e\u011filim g\u00f6stermektedir. Bununla birlikte, grafiklerin g\u00f6rsel seviyeden e\u011fimleri g\u00f6z \u00f6n\u00fcne al\u0131nd\u0131\u011f\u0131nda, ABD'nin k\u00fc\u00e7\u00fck bir zaman dilimi i\u00e7inde daha y\u00fcksek bir Onaylanm\u0131\u015f vaka oran\u0131na sahip oldu\u011fu s\u00f6ylenebilir.\n* Di\u011fer \u00fclkeler d\u00fczenli olarak vaka say\u0131lar\u0131 artt\u0131, \u0130ran do\u011frudan \"Riskli B\u00f6lge\" ye girdi. Onaylanm\u0131\u015f vakalarda ani bir art\u0131\u015f g\u00f6sterir.","9954ade7":"# **Modeli Olu\u015fturma**","a6b11363":"A\u015fa\u011f\u0131daki fakt\u00f6rler bir \u00fclkede COVID-19 salg\u0131n\u0131 \u00fczerinde etkili olan fakt\u00f6rler olarak bulundu.\n\n* N\u00fcfus yo\u011funlu\u011fu\n* Enfekte ki\u015finin ya\u015f\u0131\n* Kentsel n\u00fcfus - Bu alanlar insanlarla b\u00fcy\u00fck oranda doludur ve y\u00fcksek kentsel n\u00fcfus y\u00fcksek yay\u0131lmay\u0131 etkileyebilir","d5f9b17a":"# **\u0130lk 8 \u00fclke i\u00e7in Vaka Say\u0131s\u0131 ve \u00d6l\u00fcm oranlar\u0131n\u0131 grafikle\u015ftirmek**","0dbbc163":"**\u0130talya - \u0130yile\u015fen hasta say\u0131s\u0131 veri k\u00fcmesini kullanma**","30b744b6":"A\u015fa\u011f\u0131daki grafik, tan\u0131mlanan 1. \u00f6l\u00fcm tarihinden sonraki bir g\u00fcn i\u00e7in \u00f6l\u00fcm say\u0131s\u0131ndaki ortalama art\u0131\u015f\u0131 g\u00f6stermektedir"}}