{"cell_type":{"23715bd0":"code","5c0c9968":"code","473d1e7e":"code","99a9baaf":"code","3b8bea25":"code","a7f41f8a":"code","620426df":"code","ed1ab73d":"code","87957937":"code","2bc7b723":"code","ee6302b8":"code","a9c6bb03":"code","198fb96e":"code","e67d0821":"code","29d57a17":"code","8c82d11d":"code","7bf59bcc":"code","bab39a80":"code","e4048fa9":"code","5158d623":"code","d13b5e78":"code","671e2c17":"code","16e2d765":"code","3cd9d7f8":"code","be4f6d57":"code","b9ecdd6d":"code","47c3dc99":"code","7dae52c3":"code","91e28fb3":"code","3b8f0fd0":"code","0b4074d6":"code","7ef7174d":"code","95dcd33b":"code","0cb76281":"code","8259330c":"code","d65919c6":"code","19c5b859":"code","2c3ea4af":"code","937cc9b1":"code","ad5b42ca":"code","f0227719":"code","5a1b1722":"code","779cfeea":"code","e1f16b1b":"code","85e8f4ac":"code","7890d2c9":"code","6e3422a7":"code","e5b3ee91":"code","56355a76":"markdown","00f6b7f3":"markdown","5bb69251":"markdown","2c324547":"markdown","3db6328d":"markdown","2fcdbc21":"markdown","62149877":"markdown","df24514d":"markdown","63c2af96":"markdown","2674bc0e":"markdown","c406c7b8":"markdown","93abd8fc":"markdown","c3cd442a":"markdown","03e97345":"markdown","163e4c17":"markdown"},"source":{"23715bd0":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nsns.set()\nfrom datetime import datetime\nfrom pylab import rcParams\nimport statsmodels.api as sm\nimport itertools\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pandas.tseries.holiday import USFederalHolidayCalendar as calendar\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tsa.stattools import adfuller\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","5c0c9968":"df_train = pd.read_csv(\"..\/input\/train.csv\", parse_dates=['date'], index_col=['date'])\ndf_test = pd.read_csv(\"..\/input\/test.csv\", parse_dates=['date'], index_col=['date'])\ndf = pd.concat([df_train,df_test],sort=True)","473d1e7e":"df.head()","99a9baaf":"df.dtypes","3b8bea25":"df['store'].value_counts()","a7f41f8a":"df['sales'].count()","620426df":"df.isnull().sum()","ed1ab73d":"df = df.fillna(0)","87957937":"df.sales.plot(figsize=(15, 6))\nplt.show()","2bc7b723":"lojas = len(df['store'].unique())\nfig, axes = plt.subplots(lojas, figsize=(8, 16))\n\nfor x in df['store'].unique():\n    m = df.loc[df['store'] == x, 'sales'].resample('W').sum()\n    ax = m.plot(title = x, ax=axes[x-1])\n    ax.grid()   \n    ax.set_xlabel('time')\n    ax.set_ylabel('sales')\nfig.tight_layout();","ee6302b8":"one_store = df[(df.item==1)&(df.store==1)].copy()\nrcParams['figure.figsize'] = 20, 10\ndecomposition = sm.tsa.seasonal_decompose(one_store.sales.dropna(), freq=365)\nfig = decomposition.plot()\nplt.show()","a9c6bb03":"def test_stationarity(timeseries):\n    \n # rolling statistics\n    rolmean = timeseries.rolling(12).mean()\n    rolstd = timeseries.rolling(12).std()\n\n #Plot rolling statistics:\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False) ","198fb96e":"test_stationarity(one_store['sales'])","e67d0821":"one_store['log_sales'] = np.log(one_store['sales'])\nplt.plot(one_store['log_sales'])","29d57a17":"first_one = df[(df.item==1)&(df.store==1)].copy()","8c82d11d":"first_one['month'] = first_one.index.month","7bf59bcc":"month_dum = pd.get_dummies(first_one['month'])","bab39a80":"month_dum.columns = ['month_dum-'+ str(w) for w in range(0,12)]","e4048fa9":"first_one = pd.concat([first_one, month_dum], axis=1)","5158d623":"first_one['dayofweek_dum'] = first_one.index.weekday","d13b5e78":"week_dummies = pd.get_dummies(first_one['dayofweek_dum'])","671e2c17":"week_dummies.columns = ['dayofweek_dum-'+ str(w) for w in range(0,7)]","16e2d765":"first_one = pd.concat([first_one, week_dummies], axis=1, join_axes=[first_one.index]).drop(['dayofweek_dum'],axis=1)","3cd9d7f8":"first_one['weekend'] = (first_one.index.dayofweek>4).astype(int)","be4f6d57":"data_r = pd.date_range(start='2013-01-01', end='2018-03-31')\ncal = calendar()\nholidays = cal.holidays(start=data_r.min(), end=data_r.max())\nfirst_one['holyday'] = first_one.index.isin(holidays)\nfirst_one['holyday'] = first_one['holyday']*1","b9ecdd6d":"train_start,train_end = '2015-01-01','2017-09-30'\ntest_start,test_end = '2017-10-01','2017-12-31'\ntrain = first_one['sales'][train_start:train_end].dropna()\ntest =first_one['sales'][test_start:test_end].dropna()\n","47c3dc99":"ex_train = first_one.drop(['id','store','item','sales'],axis = 1)[train_start:train_end].dropna()\nex_test = first_one.drop(['id','store','item','sales'],axis = 1)[test_start:test_end].dropna()","7dae52c3":"train_sample = train.sample(frac=0.3, replace=True)","91e28fb3":"p = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 7) for x in list(itertools.product(p, d, q))]\n","3b8f0fd0":"minimo=[]\nminimo1=[]\nminimo2=[]\nfor param in pdq:\n     for param_seasonal in seasonal_pdq:\n            try:\n                mod1 = sm.tsa.statespace.SARIMAX(train_sample,\n                                                order=param,\n                                                seasonal_order=param_seasonal, \n                                                enforce_stationarity=False,\n                                                enforce_invertibility=False)\n                results1 = mod1.fit()\n                print('ARIMA{}x{}7 - AIC:{}'.format(param, param_seasonal, results1.aic))\n            except:\n                continue\n                \n                          ","0b4074d6":"results1= sm.tsa.statespace.SARIMAX(train,\n                               order=(0,0,1),\n                               seasonal_order=(0,1,1,7),\n                               exog = ex_train,\n                               freq='D',\n                               enforce_stationarity=False, \n                               enforce_invertibility=False).fit()\n\nprint(results1.summary())","7ef7174d":"pred = results1.predict(train_end,test_end,exog = ex_test)[1:]\nprint('ARIMAX model MSE:{}'.format(mean_squared_error(test,pred)))","95dcd33b":"pd.DataFrame({'test':test,'pred':pred}).plot();plt.show()","0cb76281":"results1.plot_diagnostics(figsize=(15, 12))","8259330c":"searching_best = sm.tsa.arma_order_select_ic(train_sample, max_ar=7, max_ma=7, ic='aic', trend='c')\nprint('The bestpdq - ARMA(p,q) =',searching_best['aic_min_order'])","d65919c6":"results2= sm.tsa.statespace.SARIMAX(train,\n                               order=(0,0,1),\n                               seasonal_order=(0,0,0,0),\n                               exog = ex_train,\n                               freq='D',\n                               enforce_stationarity=False, \n                               enforce_invertibility=False).fit()\n\nprint(results2.summary())","19c5b859":"pred = results2.predict(train_end,test_end,exog = ex_test)[1:]\nprint('ARIMAX model MSE:{}'.format(mean_squared_error(test,pred)))","2c3ea4af":"pd.DataFrame({'test':test,'pred':pred}).plot();plt.show()","937cc9b1":"results2.plot_diagnostics(figsize=(15, 12))","ad5b42ca":"#loading data\ndfs_train = pd.read_csv(\"..\/input\/train.csv\", parse_dates=['date'], index_col=['date'])\ndfs_test = pd.read_csv(\"..\/input\/test.csv\", parse_dates=['date'], index_col=['date'])\ndfs = pd.concat([dfs_train,dfs_test],sort=True)","f0227719":"#loading data submission\nsubm = pd.read_csv('..\/input\/sample_submission.csv')","5a1b1722":"#changing nan\ndfs = dfs.fillna(0)","779cfeea":"#creating dummies\ndfs['month'] = dfs.index.month\nmonth_dum = pd.get_dummies(dfs['month'])\nmonth_dum.columns = ['month_dum-'+ str(w) for w in range(0,12)]\ndfs = pd.concat([dfs, month_dum], axis=1)\ndfs['dayofweek_dum'] = dfs.index.weekday\nweek_dummies = pd.get_dummies(dfs['dayofweek_dum'])\nweek_dummies.columns = ['dayofweek_dum-'+ str(w) for w in range(0,7)]\ndfs = pd.concat([dfs, week_dummies], axis=1, join_axes=[dfs.index]).drop(['dayofweek_dum'],axis=1)\ndfs['weekend'] = (dfs.index.dayofweek>4).astype(int)","e1f16b1b":"data_r = pd.date_range(start='2013-01-01', end='2018-03-31')\nfirst_one['holyday'] = data_r\ncal = calendar()\nholidays = cal.holidays(start=data_r.min(), end=data_r.max())\nfirst_one['holyday'] = first_one.index.isin(holidays)","85e8f4ac":"#creating dummies holidays\ndate_r = pd.date_range(start='2013-01-01', end='2018-03-31')\n#dfs['holyday'] = date_r\ncal = calendar()\nholidays = cal.holidays(start=date_r.min(), end=date_r.max())\ndfs['holyday'] = dfs.index.isin(holidays)\ndfs['holyday'] = dfs['holyday']*1","7890d2c9":"#the prediction\nresults = []\n\nfor w in range(1,51):\n    for m in range(1,11):\n        sales1 = dfs[(dfs.item==w)&(dfs.store==m)].copy()\n        train_start,train_end = '2015-01-01','2017-09-30'\n        test_start,test_end = '2017-10-01','2017-12-31'\n        train = sales1['sales'][train_start:train_end]\n        test =  sales1['sales'][test_start:test_end]\n        ex_train = sales1.drop(['id','store','item','sales'],axis = 1)[train_start:train_end]\n        ex_test = sales1.drop(['id','store','item','sales'],axis = 1)[test_start:test_end]\n        target_exog = sales1[test_start:].drop(['id','store','item','sales'],axis = 1) \n        predict_mod = sm.tsa.statespace.SARIMAX(train,\n                                                order=(0,0,3),\n                                                seasonal_order=(0,1,1,7),\n                                                exog = ex_train,\n                                                freq='D',\n                                                enforce_stationarity=False,\n                                                enforce_invertibility=False).fit()\n        predict_train = predict_mod.get_prediction(train_end,'2018-03-31', exog = target_exog)\n        results.extend(predict_train.predicted_mean['2018-01-01':])\n        print('item:',w,'store:',m,'Predicted.')      \n        ","6e3422a7":"subm['sales'] = results","e5b3ee91":"subm.to_csv('submission.csv',index=False)","56355a76":"## Method 1","00f6b7f3":"# SUBMIT PREDICTION\n","5bb69251":"# Ploting ","2c324547":"# Test Stationarity ","3db6328d":"# Importing Datas","2fcdbc21":"# Ploting stores","62149877":"## Method 2","df24514d":"# Analyzing the data","63c2af96":"__Coment\u00e1rios:__\n\n- __Obs__: There is a clear rhythm in sales with peaks of sales and low sales in the same periods of the observed years.\n<br>\n- __Trend__: increase in sales over the time series.\n<br>\n- __Seasonality__: instability and fall at the end, great progress in sales until the middle of the year.\n","2674bc0e":"# SARIMAX - time-series forecasting","c406c7b8":"# Dummies","93abd8fc":"### Description\nThis notebook is my first job in time series and one of the firsts in data science.\n\nThe objective of this work is to understand how the Arima model behaves and then to approach more complex explorations.","c3cd442a":"### the best parameter: ARIMA(0, 0, 1)x(0, 1, 1, 7)7 - AIC:1980.2758541074645","03e97345":"# Searching for the best pdq parameters","163e4c17":"# Trend, Seasonality and Residuals"}}