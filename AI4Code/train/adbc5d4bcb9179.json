{"cell_type":{"09695335":"code","6167584c":"code","d9cdf8d6":"code","f262bd3b":"code","3e2a5f73":"code","3b146b56":"code","0b808df0":"code","2adce39e":"code","680fb4f7":"code","d17405fd":"code","044da64c":"code","d29b5fb7":"code","80545664":"code","ff0b198f":"markdown","f67fb7cc":"markdown","d526f502":"markdown","980484e3":"markdown","d46d2908":"markdown","025305f9":"markdown","69827259":"markdown","3b544c61":"markdown","7b8c5154":"markdown","58a6a3bb":"markdown","11fae714":"markdown"},"source":{"09695335":"#imports\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nfrom collections import defaultdict\nfrom collections import Counter\nfrom tqdm import tqdm\nimport os","6167584c":"!ls \/kaggle\/input\/shopee-product-matching","d9cdf8d6":"!ls \/kaggle\/input\/shopee-product-matching\/train_images | wc -l\n!ls \/kaggle\/input\/shopee-product-matching\/train_images | head -10","f262bd3b":"!ls \/kaggle\/input\/shopee-product-matching\/test_images | wc -l\n!ls \/kaggle\/input\/shopee-product-matching\/test_images","3e2a5f73":"# Reading the CSV files\ntrain_df = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')\ntest_df = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')\nsample_df = pd.read_csv('..\/input\/shopee-product-matching\/sample_submission.csv')","3b146b56":"train_df","0b808df0":"train_df.info()","2adce39e":"for col in train_df.columns:\n    print(f\"{col}: {len(train_df[col].unique())}\")","680fb4f7":"fig = plt.figure(figsize=(18,20))\nplt.subplots_adjust(wspace=0.8)\ncolumns = 6\nrows = 8\nfor i in range(1, columns*rows + 1):\n    ax = fig.add_subplot(rows, columns,i)\n    img = Image.open(os.path.join(\"\/kaggle\/input\/shopee-product-matching\/train_images\", train_df.iloc[i,1]))\n    plt.imshow(img)\n    if len(train_df.iloc[i,3]) > 30:\n        title = train_df.iloc[i,3][:30] + \"...\"\n    else:\n        title = train_df.iloc[i,3] + \".\"\n    ax.set_title(title, fontsize=8)\n    ax.axis('off')","d17405fd":"sizes = []\nratios = []\nfor img_name in tqdm(train_df['image']):\n    img = Image.open(os.path.join(\"\/kaggle\/input\/shopee-product-matching\/train_images\", img_name))\n    sizes.append(img.size)\n    ratios.append(img.size[0] \/ img.size[1])","044da64c":"Counter(ratios).most_common(10)","d29b5fb7":"Counter(sizes).most_common(20)","80545664":"imgs_dim = []\ndim_count = []\nfor k, v in Counter(sizes).most_common(20):\n    imgs_dim.append(str(k[0]))\n    dim_count.append(v)\nfig = px.bar(x=imgs_dim, y=dim_count,\n             color=dim_count,\n             color_continuous_scale=px.colors.sequential.Blues,\n             title=\"<b>Square Image Dimension Distribution<\/b>\",\n             text=[str(y\/train_df.shape[0] * 100)[:str(y\/train_df.shape[0] * 100).find(\".\") + 2] + \"%\" for y in dim_count]\n            )\nfig.update_traces(hovertemplate = \"<b>%{x}*%{x}<\/b><br>Count: %{y}\")\nfig.update_layout(showlegend=False,\n                  title_font_size=18,\n                  yaxis={\"title\": \"Number of Occurences\", \"gridcolor\": \"rgb(235,235,235)\",\n                         \"zeroline\":True, \"zerolinecolor\":\"lightgrey\"},\n                  xaxis={\"title\":\"Square Image Dimension\"},\n                  plot_bgcolor=\"#fff\",\n                  coloraxis={\"showscale\":False}\n                 )\n\nfig.show()","ff0b198f":"* It looks like `posting_id` is the only column with unique values for every row in the dataset.\n* The lower number of unique `image` values indicates that several postings share the same image.\n* The lower number of unique `image_phash` values indicates that a great amount of images share the same Phash, meaning that a great amount of images are duplicates (or at least very close).\n* The lower number of unique `title` values indicates that several postings share the same exact product title.\n* The number of `label_group` seems to indicate the number of **unique** products in the datasets. Meaning, this is the value that will link rows together as refering to the same product, albeit having different postings, images and titles.","f67fb7cc":"No null values, woohoo!","d526f502":"It looks like the vast majority of the images, with a very low number of outliers, have a ratio of 1, meaning that the images are squares.","980484e3":"## Visualizing Some of the Training Data Images","d46d2908":"So all that we're provided with are the training and testing images sets, along with their corresponding csv files with probably more details on each image.","025305f9":"The testing images set however only contains **3** images! Quoting the data desciption section of this competition:\n\n> As this is a code competition, only the first few rows\/images of the test set are published; the remainder are only available to your notebook when it is submitted. Expect to find roughly 70,000 images in the hidden test set. The few test rows and images that are provided are intended to illustrate the hidden test set format and folder structure.","69827259":"We can see that we are provided with a total of **32,412** training images, named using some kind of image ID.","3b544c61":"It seems like the *train.csv* files contains **34,250** rows, that is higher than the number of images in the training directory by around **2,000** images.\n\nAlso, we can see that each row contains 5 columns:\n* `posting_id`: Which is the unique ID for each row representing an item posting on Shopee.\n* `image`: Refering to the image ID that is located within the train images directory.\n* `image_phash`: That is a hash of the image. **phash** in this case most probably refers to **perception hashing** which is one type of image hashing that uses a series of classical image processing steps, such as resizing and frequencies count, to construct the hash of an image. Essentially, the aim of a hasing algorithm is to assign unique hash values for different images, and identical hashes for identical images. However, no hashing algorithm is completely perfect, so whenevr we encounter 2 images having the same hash, this means that *most probably* those are the same images.\n* `title`: That is the title of the posting on Shopee, which logically should be describing the item itself that is present in the corresponding image.\n* `label_group`: We'll have to further discover the data to know for sure what this field representes, but it seems like it is referring to rows that have the same product. Meaning, that 2 rows having the same *label_group* contain the same item. ","7b8c5154":"# This notebook is under development \ud83d\udea7\n\n---\n\n## Please upvote if you found it useful \ud83d\ude0a","58a6a3bb":"# <center> Shopee Comprehensive EDA - All you Need to Know! <\/center>\n\n![shoppee.jpg_1503898201.jpg](attachment:shoppee.jpg_1503898201.jpg)\n\n### <center> The goal of this competition is to detect identical product postings that merchants post on **Shopee**, a leading e-commerce platform in Southeast Asia and Taiwan. To do so, we have access to both the products' images and some addition data such as the title of the products' postings. <\/center>","11fae714":" Shopee: EDA+RAPIDS preprocessing\nUpdated 2h ago\n6 comments \u00b7 Shopee - Price Match Guarantee\n18\n Bronze\n"}}