{"cell_type":{"ef719d75":"code","a8ee00d0":"code","4bdcaca4":"code","1d3a765f":"code","b35429b4":"code","22f68f08":"code","572a40bc":"code","9d82985e":"code","f63621a1":"code","a93682b7":"code","546fca2c":"code","c21fd5c5":"code","5275b4f8":"code","8bc00695":"code","551af9ee":"code","42bf5191":"code","fd4ed86d":"code","ef17c084":"code","4ecef914":"code","a2baee53":"code","4df3a631":"code","8a124abe":"code","9170f28d":"code","f45f0e06":"markdown","48e86ec7":"markdown","893a13be":"markdown","6e1c3988":"markdown","36672541":"markdown","481c68df":"markdown","d8ab8543":"markdown"},"source":{"ef719d75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8ee00d0":"!pip install dgl -f https:\/\/data.dgl.ai\/wheels\/repo.html\n!pip install dgllife -U -q\n!pip install rdkit-pypi","4bdcaca4":"from IPython.display import SVG\nfrom rdkit import Chem\nfrom rdkit.Chem import Draw\nfrom dgllife.data import Tox21\nfrom dgllife.utils import smiles_to_bigraph, CanonicalAtomFeaturizer\nfrom rdkit.Chem import AllChem\nfrom rdkit.Chem.Draw import rdMolDraw2D\nimport networkx as nx\nimport matplotlib.pyplot as plt\nimport glob\nimport os\nfrom IPython.display import SVG, Image","1d3a765f":"# Store all CSV files in a list\nall_csv = glob.glob('\/kaggle\/input\/betalactamase\/*.csv')\n# all_csv","b35429b4":"# Combine contents of all CSV files into a single DataFrame\n\ndf = pd.concat( (pd.read_csv(csv)) for csv in all_csv )\ndf.head()","22f68f08":"# Bar plot of Missing vs Non-Missing Data\n\n\n# Data\nmissing = df.pchembl_value.isnull().sum()\nnonmissing = df.pchembl_value.notnull().sum()\n\nx = ['Missing', 'Non-Missing']\ny = [missing, nonmissing]\n\n# Setup plot\nfig, ax = plt.subplots()\n\n# Make bar plot\np = ax.bar(x, y, color = ['#F8766D', '#00BFC4'], ec = 'black')\n\nax.set_title('pChEMBL Missing Data', fontsize=14, fontweight='bold', pad=15)\n#ax.set_xticklabels(x, fontweight='bold')\n\nax.set_ylim(0,70000)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\n# Label above bar\nfor index, data in enumerate(y):\n    plt.text(x=index-0.1 , y =data+1000 , s=f\"{data}\" , fontdict=dict(fontsize=14))\n\nfig.set_size_inches(5,4.5)\nplt.show()","572a40bc":"# Non-missing data with pChEMBL value\ndf2 = df[df.pchembl_value.notnull()]","9d82985e":"df2.head()","f63621a1":"df3 = df2[~df2['molecule_chembl_id'].duplicated()]","a93682b7":"df3.duplicated().any()","546fca2c":"from dgllife.utils import smiles_to_complete_graph\ng = smiles_to_complete_graph('CC1CCC2C(CCC3C2C(NC2=CC(Cl)=CC=C2N)S3(=O)=O)O1')\nprint(g)","c21fd5c5":"G = g.to_networkx()","5275b4f8":"nx.draw_kamada_kawai(G)","8bc00695":"df_smiles = df3[['molecule_chembl_id','canonical_smiles']].reset_index(drop=True)\ndf_smiles.head()","551af9ee":"smiles = df_smiles['canonical_smiles'][:5].tolist()","42bf5191":"chembl_id = df_smiles['molecule_chembl_id'][:5].tolist()","fd4ed86d":"print(smiles)","ef17c084":"print(chembl_id)","4ecef914":"smiles_ids = list(zip(smiles, chembl_id))","a2baee53":"if not os.path.isdir('.\/images'):\n    os.mkdir('.\/images')","4df3a631":"ms_smis = smiles_ids\nms = [[Chem.MolFromSmiles(x[0]), x[1]] for x in ms_smis]\nfor m in ms: \n    Draw.MolToFile(m[0], f\".\/images\/{m[1]}.o.png\", size=(800, 800))","8a124abe":"Image(\".\/images\/CHEMBL1560.o.png\")","9170f28d":"# SVG('.\/images\/CHEMBL1560.svg')","f45f0e06":"#### Ref:\n\n1. https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC3965067\/\n1. https:\/\/chembl.gitbook.io\/chembl-interface-documentation\/frequently-asked-questions\/chembl-data-questions\n\n    ","48e86ec7":"## Overview","893a13be":"In this Notebook\n\n* basic data explored\n* duplicates removed\n\n* two approaches proposed:\n    1.     dgl-lifesci graph \n    1.     molecule structure images\n","6e1c3988":"### create DGL-LifeSci Graph","36672541":"### Create molecule structures","481c68df":"## Basic Data Exploration and Pre-processing","d8ab8543":"### Removing all duplicates, as a starting point, later, we consider those excluded molecules"}}