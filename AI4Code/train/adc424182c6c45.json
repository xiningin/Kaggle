{"cell_type":{"23a7866e":"code","f6618177":"markdown","6394eed8":"markdown"},"source":{"23a7866e":"import numpy  as np\nimport pandas as pd\nimport janestreet\nenv = janestreet.make_env()\niter_test = env.iter_test()\nfor (test_df, sample_prediction_df) in iter_test:\n    feature_35 = test_df['feature_35'].item()\n    feature_43 = test_df['feature_43'].item()\n    sample_prediction_df.action = 1 if (feature_35 > 0) and (feature_43 > 0) else 0\n    env.predict(sample_prediction_df)","f6618177":"<font color='purple'>...It is the end of the week, you have no GPU quota left so that super-stacked super-wide SoTA multi-dataset neural net ensemble with the fully optimized 'Jane Street Special' RNG seed will have to wait until tomorrow, but you still have 5 submissions to play with ...\u00bfWhat do you do?...<\/font>","6394eed8":"*Notes*: \n* `feature_35` is one of the [17 'resp' related features](https:\/\/www.kaggle.com\/carlmcbrideellis\/jane-street-eda-of-day-0-and-feature-importance), and `feature_43` is the third of the three Tag 14 features, having the most 'biased' lag plot)\n* This notebook is based on the work of [Filipp Bykov](https:\/\/www.kaggle.com\/fbykov) in the excellent notebook [\"*Rule 3443*\"](https:\/\/www.kaggle.com\/fbykov\/rule-3443) where `feature_34` (a `resp_3` feature) was used rather than `feature_35`, and a slightly better Public Score was obtained. If you think this work is worthy of your upvote, then *please* upvote the  notebook by Filipp and ***not*** this one.\n* In this competition we have been given 4 hours to predict [\u22481 million trades](https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/data), *i.e.* we can take up to 14.4 milliseconds per trade. It has been mentioned that Jane Street processes [around 2.3TB of market data every day](https:\/\/blog.janestreet.com\/real-world-machine-learning-part-1\/), so speed is of the essence. I would not be at all surprised if that in reality when it comes to high-frequency trading, where transactions may be undertaken in less than 1 millisecond, a simple algorithm somewhat more akin to this one is actually used on a *day-to-day* basis."}}