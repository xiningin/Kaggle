{"cell_type":{"81aacd8f":"code","e9de1882":"code","45e4f5fc":"code","8f53371c":"code","bcf4563f":"code","7df5e97a":"code","2dea26a7":"code","cf1a1bc6":"code","ae1d2fba":"code","652fc3b9":"code","ab8b3831":"code","5d5d4700":"code","fd16e2a5":"code","d9b86f31":"code","3da4ee6e":"markdown","fafa53f5":"markdown","d636f208":"markdown","22fd675b":"markdown","ed65625c":"markdown","6b1ad793":"markdown","9cb8b5a3":"markdown","9ddc4148":"markdown","629993c4":"markdown","6ff9251c":"markdown","2f5793aa":"markdown","dda0121b":"markdown","ff72f4d8":"markdown","81948d89":"markdown","7277b814":"markdown","cc173822":"markdown","f9d801e0":"markdown","f2347f5a":"markdown","e03f1f34":"markdown","d75729cb":"markdown"},"source":{"81aacd8f":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUQEhMWFRUVFRcVFRUVFRoVFhYXFRUWFhUVFRYYHSggGB0lHRcVIjEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGBAQGy0lHyUtLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKMBNgMBEQACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAAAAQIDBAUGCAf\/xABIEAACAQICBgUIBgkDBAIDAAABAgMAEQQSBRMhMVGRIkFSodEGFGFxgZKT4RUyU2LS8CMzQmOUorHB0wdUwhYkRIJy4iU0Q\/\/EABkBAQEBAQEBAAAAAAAAAAAAAAABAgMEBf\/EADcRAAICAAQEBAUDBAIBBQAAAAABAhEDEiFRBBMxYUFxkdEUIoGh8DJS4SOSscEFQmJDRHKy8f\/aAAwDAQACEQMRAD8A+l11MjBqkCgCoUYqkMiGss6xLqybCgChAqgKAKALUAstCUGUcKCgyDgOVBQtWOA5UFFckQ2bBvHV6RUJRJYltuHKqWh6leAoKFqV4UJSDUrwoKKsTgY5FaN1DKwIYG9iDVToUfNNNeR8UEmWz5DtRtbKLjgbPvHga9MJ2jrHDjJGGugIeMvx5fx1vN3NcmJP6Bi7U38RL+OmZ7jkr8YfQadub48v4qZnuOSu\/qw+hl+1n+O\/9zTM9ycld\/Vj+iR9rN8Vv70t\/lF5S7+ovor99N8Qf3FS3v8A4Ly1uxHRZ\/3E\/vJ\/dKWycvuyP0W\/+5n5x\/46tsZO7EdHP\/uZuUX+OrbJkf7n9vYrn0fJb\/8AZl9qxf46KySi66v7HNaQw7Bv1hPrC\/2Fd4p7ngxKsw9U3a7hWsstznaK2jbtdwrm09y\/QraJu1\/L86lS3GhHI\/Uw9351hqRU0ekNleI9A7ClIgZRSkAyilCwyilCy6KIGss6RVl2oX8k+NSzeVD1A9PM0GVC1I4nmaDKPU+ludBlDU\/ebnQUGq+83MeFBQao9o93hQUGrPaPd4UFBqz2jyFBQZG7XcKEpiyN2u4UFMhIrcesdXpFA7JKrWHSG7h86DUeVuI5fOqNQytxHL50GoWbiOXzoNQs3Ecj40Gph6X0eZ4mjuoO9GIJytbYbX2jiOF6sXTKm1qj5rJDi0YoxhDKbEZX3j\/2r0J34ff+D0LO\/Fen8j\/7r9xykH96t9vv\/Bfn7AfO+EHOQf2p9Pz0Hz9iJbF9mD35B\/woS59iBkxf2cHxX\/x1dDN4myFrcX9lD8Z\/8VXQXPZev8CM2K+xi+M3+KroS57L1\/gXnGJ+wj+Of8dLRLnsvX+Bec4j7Bfjf\/SloXPZev8ABXNiJ7fqB8UH\/jVTI8233OZ0jI+balv\/AGBrvFvY8GKtdTE1jdk8x41cz2OdIqaRr\/VPMeNYcnsCBkPZPd41nN2LQtcQfqt3H+9Ry7FUT0dXgPQOxq6gdjTUgbaalDbTUF8Obqt7b1lnSNl3T+731k3qF34LzPhQaju\/Ac\/lQahduyOfyqjUMzdn+b5VBqGZuz3ig1DM3Z7xVGuwZ27J5ig12DOeyeY8aEt7C1h7J7vGgvsGs+63d40F9iEsnobq6vSKEbJLJsHRblQWGs9DcqFsNb6G5UJYaz0NyNBYa30HkaCw1o4H3TQWcr5bQqq+dANsssmVGY2JsrWUX2HZ7Rwrrhy8DrhzrRnILpqL978CX8FdvqvU6cxbP0fsS+nIeMnwJfwVfqvVE5se\/o\/YX05B2m9sUg\/4VPT1Q5ke\/o\/YX05h\/tP5HH\/Gn51Q5kfxMPpvD\/ajk3hQcyH5YfTmG+2Xv8KWXmQ3InTmF+3TnS2TmYe4vp3C\/wC4j94VdRzMPcrm05hSNk8fviisjxMOupzOksZGzXV1PqINemEkfPxqb0MLXr2hzFbzo40ReYcRzFYbKVmUcR3VLRKYlkF94\/N6w2ao9F14D0Er1bFBelihXqWBhqtgyIZAOuss6RaL9evH+tZN5kGvXiKDMg169oU1GZD1y9oc6Uy5kGtXtDmKai0PWr2hzFNRaDWLxHMUFoM44jnQWh5xxHOgtBmHEUIFxQWVyn+39RQjJLuHqoUdUDoAtQUFqALUFEJYgylWFwwII9B30sLQ+e4rCmKRoz+ybX4jeD7RY11zHuj8ysaimY3lHamYZQtUsZRGrYoib0tCiNjS0SmRyGrmRMrKMTD0TsrSkrMyg6OM0ugDbq9mHTR8niE1I1xUcK6UjzlTqvCubSBUyLwqUti2xapeyOXrrLii2z0fXiPQOhDm\/LTS74bzVxJq0bFIsxsCDFYlwbg2FhvG3ZWZMqMXD+U6YjHwRYadXhMUplVQCM4F1JJFx7DUvUpRoiXG4+J8ZHijApZxBEsaMtkJAMpYEkk77bu6itgs0V5Uzy\/RmILBI8RJLh8RGFGVpbFYmUkFl6QJsD6NtZbs6R0op0Z5Zz5sdJK94vN5sTgxlUAJDNJCACFBNyE3k8euoVS6nZaLhxD4GNZJmXEPCpaYIhZXYBiQlshte1rW2VDaujmdDLj5cbisK2kZMuFMG3zfD\/pBKmchuh0d1tlDCu6sloeXHaRikxsWMOHUu64eFYo2XKhIBmLqWYk77HZ1cKFVvU3\/AJFaZONwcWJdQrtmVwBszIxUkcAbXt1XoWLtG8yDgKFoWQcByoKDVjgOVUULVjgOVBQapeA5ChKFql7I5CgpFcsS23Dl6RVI4oksK2HRHKljKh6heyOVLGVBqF7IpYyoPN14UsZULzdeFLGVD82Xh3mpYyIPN14d5pZciOT8s\/JyGRknKkm2razuu65X6rD7231VeY14no4fDhJtNGhTydg7LfFl\/HTnS3PWuGhsWf8ATkHB\/jTfjqc6W4+Ght92I+TcH73+Im\/yU58t\/wDA+Fht937iPk3Dxm\/iZ\/8AJV58vxL2Hw0O\/q\/cX\/TkPam\/iZvx1OfL8S9i\/DQ7+r9xf9Oxduf+Jl\/HTny\/EvYnw0O\/q\/cQ0BH9piP4iX8VXnS\/EvYnw0O\/9z9yE+g1t+tn+O5\/qaqxZfiXsHw8d36v3OM03ggrfrHPra\/9RX0MC5LqfI4qOWRqjD99u7wrs49zxtlTxHtHu8Kw09xZAxntHu8KzT3LaIlD2zyFRp7lTPSFq8VHcLUoWanT2hziGwzBwuoxCTG4JzBL9EcD6ajQseJ0QWxkOLDgCKORCttpL7iD1WpWos1UHk5jMOJIMJiYkgdmZRJEzSQ594jKsAbdVxSn4CzKxfkXfAR4PDyZXhdJY5H3CRWLM+wXBOZrcNlYeh1jG0VaX\/0+MsWDhSUKsEYhmvf9JGTGzhbDrKE2PGs2ayHb6k9pu7wpZrL3NNoryfeHGYvFmW4xOpsoFmXVR5DmJ2G\/oApZMuvU1MHktjsMJIMFiokw8jMyiWItJDn+sIyrAML7RceJWTK10ZvvJ7QS4PDx4aN2KoDtIF2ZiWZj6yTs6qWVRrxNjqm7Z5Cllp7hqm7fcKWSnuGqbt\/yilinuGqbt\/yillp7hqm7f8o8aWiU9w1T9se786WhT3ITRtb6w930j00tEae5NY2sOkPd+dS0WnuPVv2h7vzpaFPcNW\/aHu\/OloU9wyPxX3T40tCmGR+K8j40tDUMr8V5HxpaGoZX4ryPjS0XUxNL4aWSGRFyZspKZgxGYbVvY3tcU0NYcpRkmjhI48dxwvuyj\/lXPNh7P1XsfSXO3Xo\/ct1eP4YQ+2Uf2NM2Hs\/Vexf6269H7kCmkexhPfmH\/CmbC7\/Yf1u33IMNJfZ4P403+KtZsLv9if1\/\/H7iP0l9lhPjy\/4qXhd\/t7j+v\/4\/f2Fm0j9hhfjyf4qXhd\/t7l\/r7R9X7Bm0h9hhv4h\/8VLwt36L3H9baPq\/YqnfH224fD+zEP8A4qqeHu\/Re5G8bZer9jitPmfN04kH\/wAZC39VFfS4d6fKfI4zNfzUajM\/Y\/m+Vem5bHg0K5M\/Y\/mFZd7FooZm7J5iubb2CogZD2T3eNS3saPSteM7B7KAx8ZjBHlurMXOUBbE3tfrIrLlRwxsdYWW03bpV\/8AqKDpdAjuVcZCFZSAHBYgDYTbr41OYqs5PjcNQlNp\/K0mq11\/NyyDSKsxQqyMFzWcAdEbyCCRaqp+BvD4mMpODTi6untv4lkGnVChzHIIybCUgBNpsCdtwL9ZFcnJMsf+QgoqTi1F\/wDbw9670ZE2nMriM4ebMxbKAE6WTaxXpbrbazaNz4\/JNQeHK3ddNa61qSbTVn1YgmZgquVUISobdfpb9lLRZcdU8ihJuk9K0v6lk+lsriMRSNIVz5Fy3VeLEtYbdm+lo3icYoyUFFuTV0q0Xe2kVYnTwjTWPBOFsCSVUZbnLZrsDe9uYpZyxf8AkFhwzyhKvJaeGtszIMazKW1Mq2\/ZYKGOy+zpWoenDxnOLlka7Or\/AMmNFp2NljKo5MrFFWy5rrfNmGbZa22hwjx+HKMGk\/mdJaX3vXw8StvKFMrSCKVo1JDShQVFjYkdK5A4gVLMv\/kYU5KMnFdZJaf5trukZY0opkWIKxLR6xSMuUrcC983pqnf4mLxFhrq1fhVFM2nY1WVyklonCPsXectrdL7woc58dCEZyafyun07dNe5PDaYVn1RjlR8ubK6gEre1wQxBoi4XGRnPluLUqunt6tGZrvuNyHjVrueq+xXNNs+q3L1emqkRsms+wdFt3D51K7lvsGv+4\/KmXuM3YPOPuv7tMvcZuwecfdf3auUZuwecDst7pplGbsLzgdlvdNMozdg84HZb3TShm7B5yODe6aUMxwOk9OxQzSRMk\/RY\/Vw8jCx2izKtjsIrk8BvxXqfRhxCyrR+jK18rMP2cR\/DTfgqciW69Ub+Ijs\/Rh\/wBWYbhP\/DTfgq\/Dy3Xqh8VDZ\/2v2EfK7Dfvv4eb8FORLdeqL8VDZ\/2v2IHyvwvGX+Hm\/BV+HluvVD4qGz\/tfsQPlhhO1J8CX8FX4eW69UT4uHf+1+xFvLDCdt\/gy\/gqrAl29UT4vD7\/ANr9iqbyvwhH6xvhS\/gqrAl29UR8Xh9\/R+xxen9LRSNdXv6ww\/qK+lw\/yLU+Xxk1N6Go86TtCvVzI7ngoTYpO0KjxI7jKyh517Q51zcluKZW0i9oc6za3NnpS9eI7DvSyGu0tAztDluLSXLLa6jKdu3ZWJq6PJxeFKcsPLej6rw0Zj6Q0baGQJmd3ZCxNixsw4WGwXrMo\/K6OPEcJWBNQuUm02\/F015dEJsEwkkTpMJYiqyt0ihsbqT1L10y02tyS4eSxJx1alGlJ6128vEsdpHwowYiYOQkZZrCMBSLvmvt2DcNtc2n0osuZicIuGyNSpK3VaeN\/jNtjYicThGXasYmDNcbLxgLf1kUys9eNhyfE4El0Wa35pUYekI\/+6aQrMymNADA+XaCSQ3SFxUys4Y+G\/iXPLJql+l14vrqi7XNHiDidW7JLEoIUAvGy9TKDuI4X20p7G7nh8Q8bK3GUV5prde1ktPs0+DcKjB2y2jJGbZIp6iRuF6tMvHKePwclGLt1ppfVdzd60cRzq5WfT0NJgsCFxc8mWylVyHqzOP0pX0khb1Mrs+bg8Mo8ViTrRpV5v8AVXojCw7SxYVsHqXZ8rxqy21bBy1nLX2fW3HbUp9KPPhrFwuFfDZG5U0npTu9b8C4Qth5MO+VpFTD6ljGMxBGUg5d5BtVpo6LClw+JhSpyShldb6eH0KMVhpHw+JOQhppldENs2UNHtIvsPRJtTK6OeJg4k+Hxnl1lJNLxr5fYzMJh2hxRJDyLJHZZWOdoyDcoW6lO\/11ctM9GFhSweJ1uSa0k9Wu3k+vmbvPVo+lZXO2w+o1aI2TVtlQtjvVAXNQBtqgKgHahQtQBQHNafS01+0oPK4\/sK5T6nv4Z3AxFY1g9QyxoCBY1ohBnNaRCsyGqQi0pq0SyiebZvrSiZcjg\/KKW7V9Ph+h8fjHbNLmr1HgoTGo6BWfVUdAgQL7hWaRT0VXzT0hQhEutwtxc7QNlz6hTQmZJ1eohKlicy2XYxuLC3UT1U0JzI03a0669CMuIjS2Z0W+7MwF\/VffUbSJPGhCs0kr3ZmRyRqoZmQA7ixAB69hNc5tHoU4RipSaSMlWjKlwUKjewKkC2+53VizanBxzJqtxXj6IunT2ru6Wy\/R47OFLGeGmq16d\/IrM8F8ueLNe2XMt73ta3G9XMY52FeXMr80OSaBWyM0Yc7lJUNy31Mwli4UZZHJXtasczwpscxqTuDFV\/rVzFniYcNJNLzomVjC5+hltfNstbjfdSzTcFHNpW5XHPAyl1aMqN7AqVHrO4UzGI42DKOaMk1vaolA8L3yGNrb8pVreu1MxYTw5\/paflQpZYFOVmjU8GKg8jTMJYmFF1JpP6E3WIWJyC5AF7C5O4DiTSzTcFV1qBSO+Xo5rXtsvbjbh6aWLheXSzHMsDXCNGxsTZWUnuNFI5rEwp6Rafk0XDVWP1OiBm2jo3F+lw9tLN5sPXVade3mO0VgehZiApuLMTuAPXemZjNh0npr07kMRJBGQHaNCdwZgpPquaZmZxMTBw2lNpebSJyJEozNlC8SbDbu2mls3LJFZnSRVHNh2IVXjJO4BwSfUAaZu5zWLgydKSb80SvDlz3XL2s3R3233tvq2zWbDy5rVb+BGWSBdjMim17M9tnHaaX3JLEwoupNL6lixoQCNoO0EMSCDuIN6WzaytWjlvLXRsLNE7qSbOotI69ancrC9W5eB6eHjB3aOfXROG7DfGl\/HS57npyYewNonDdl\/jzfjq3PcmTD2Km0Rhuy\/wAeb\/JW1n3MuGHt\/kpfQ+G4SfxE\/wDkraz\/AJRzcMLb7v3KW0ThuEv8RP8A5K0s\/wCUYccP8b9ys6Lg\/e\/xE3460lIw1D8b9ymbRkNv\/wCv8RN+OtqLMNR\/Gzm9I4VAdhf2ux\/qa9EYnixOphakcW941vIjlYjCOLe8aZELK3iHFudYce4sqKfebnWa7i+x6QrwHpC1AavTTatoZ+wxU+p1PgK5z0png42Sw5YeNs2n5NGqWFlthzvxAhY+ssTL3CudVpufPUJRXJf\/AKmVv1+Y2WGya+fWlc3Ry57W1dv2b9XGuirM7Pbh8tcRi8yr0q\/214dtzEiVjDCFsVOM\/RBh0ctmy3+7e9cvD6nmipPBw8vTm\/LfSta+hmQx5UxwYqkmQ540UBMojOVk9YO02qLxO0YqMOKUtJU7S6VldNefiT0MHjlhMrLeaBRE1vqBQP0Qvs2gg36zRadTXB5sPFhzWvnisr2qvl+vXzLdCYaRpJiBEVGJkuzLdwRY9HZa27r40R14PDlLExGlGs8uvX6GJgxF5nNrmQSXl1oYDPnucu07b7rUVUefC5XweJzqzfNmvrduv9USWGZpMOLI0nmpJEwuN42Hf0t3fQqjiyngqk5cv\/t9PuURBRBh7t+i84OuUgBY2ubKy3sEv1HZuoco5FgYV\/pz\/MvBPXRrwVmz8oBF5vPkaMtlTOEChiMwy3I9tqrarQ9vH8r4fFyNXSuqvrpf+jN0QN41kBa17QqPqjtC5O899VNHp4R9Vmjf\/jt6swZxH55JrnjtqE2yBbfWa4s1S1Z5p8r4ufNarKutbvc1qgjDo1yIVxymMkbBFmNm27luTU8DxK1gRl\/0WKnH\/wCN9fI2zPmxnRcNlwzXIAIF3FgbdZrWln0G1Pjfld1B39WjQ4SIiLCNIEWMvdXUdPMMxVXY26JseO6srwPmYEP6fDudKN6Ndb1pN7M2M9\/\/AMjt\/YS+zf8AoTyrW56sT\/3nkv8A6mKweLzeAklGlhlia2656aH1Fr+2p0pHFqeC8LBf6XKMov8Ayvo3a8zKjez4rPq2lz\/VlsA0VhlsSDstfYBV01O8JJYmPmScr6S0uNaeD0Nro2bWwI1lCso6GUFQAdg4dXCtxSaPfw+IsbAjKkk108DC0FCM+IIC3XEMAcg2bF3cKkIrU8vBRjnxXS0m\/DsjUR67zBrNHqrPsytn\/WG\/Svbf6KzTyHzo874CVNZdfB3+p+N117GbjCfOl6UIPmy7Zluv1zsAuNvzqta\/Q9WM38UqcV8i\/UtOvmtTfwsSoyspW2zKNlhs2WNdEj60ZJpZXp2OV\/1D12riMbopzsDmQtsK+gjhXXCjbOkZyXRnFq2L+2i+E3469Cgti8zE3+38gTi\/tYfht+OrkWxM+Jv9v5FfF\/aw\/Db8VXL2M5p7\/Yi3nX2kPuP+KrXYmae\/2IEYvtw+4\/jSuxLlv9v5F\/3Xbg91\/GrT2Fy3K386ttaDk\/jTXYly3+38mkxwlv0jH7M1dI5jzzepiWf7nM+Fa+bsZ0Ec\/wB3mfCp83YmhW6vwXmfCsvMXQrKvfcvM+FZ+YaHo+9eA9I70sEJo1YZWUMODAEcjUdMzOEZqpJNd9RNEpIYqCRuJAuL77HqoHCLak0rXR7BLAjWzorW3ZlBt6r00fUk8OE\/1JPzVmZE62AKXttHRBsRuI4ViUbO8ctJNdCxmjLFjFdiuUsUFyvZJ4eisZA4wcszjrVXXht5Dd4yFBiuFIK3QHKRuK8CPRTIJRhKk49OmnTyJJOovZCLm5soFyd5PE0yGk0uiKpNUzBzCCw3MUBYeonbVyGJQw3LO4671qWHELfNkN7WvlF7cL0yG7jd1qVh0Ga0Vs+1+gOkeLcfbTIYSgrqPXrp18yEYjVSiwhVO9QgAPrA2VchIww4xyxiktqVDjZFN1iCndcKAbcNlMhY5Iu4xS+gpCjG7RAniVBPM1ciJLJJ24r0JvNcZShI3WIuOVXKjTkmqaKoAiCyRhAd4VAo5CmVHOEYYaqEUl2VEJlQpkMYy2+qVGXju3UaQlCEo5XFVtWnoTuNvQ+sOl0R0tltvGrSLS1069e4OFa10vlIK3UHKRuIvuNWkZlGMqtdOnbyITxI9s8Qa27Mga3qvuqNJknhQn+uKfmrLQ9tgU8qpvoJSBeyEXNzYWueJ40Ikl0QgFtlydHs5Rbju3U0GWNZa0IyRo21oweraoOzhtpSZJQjLqk\/oTRgBYKQBuAFhyoaSSVJHJf6kYzJFD+jka8h2Ktz9Q767YPVhujhV0t+4n+H869NomZ7Ml9L\/uJ\/h\/OraGZ7MX0t+4n+H86Wi5nsw+lf3E\/wvnUtbjM9mI6V\/cz\/AAvnS1uW3sw+lR9jP8I+NLW4t7P0IPpQW\/VTfDPjVtbkt7M02NxIJ+q49akVtSOEupia70HlWs6MUJpx6eVM6JRFpx6eVZzotEDiVv8AL1VM8S5Wej6+cegKpDXaTlYyRQqxUSFizLsayLfKD1XrnJu0jx8TOTxcPCTrNdtddF0KcfniVUWRzrJVQMxzFA2+xI27uupK10Zz4jNgwjGMn80krerV7fyKdHjkSNZHImDr0mzFWC3DqTtHq3UdppX1JiRlhYsIRk6na1dtOuq\/KDCY+R1w8QYhy5EpB22h+vc+no86zdpImFxOJOGFh3Ur+byj19dPUMRj5Rh8Swdsy4gqpvtVc6DKOAsTzqf9WTE4nFXD40lJ2p0uytaGXJK8E0S613STMCJCGKlVvmUgX9larK0eiU8TAxoLM3GV6PwpXaFpvHOYGlhlsqjbZbkm6i1zuG3hSXS0Z43HnyJYmFOku3v7FOlcbIJHGseMLEGiypmDtYk5jlOwbNmzjUk6ZjisfFWJJZnFKNxpXb8b0f8ArcysZjGODMwOVjEG2dRIB2Vpv5bO2LjSlwbxVo3GzCwmOZXzh5XiWJmkMgIAYC4CFlBJPCsp15Hmw8eUZ5k5OCi3LMvHtaQ\/J\/GPrCkkmcyIJR0s2UknNGNuy1xs9FXDlrTZeBxp8zJOV5kpdbp+K\/gwodKyrFIHY9NZGhe+0MhKlL8dlxWVJ1qeaPF4scKed9VJxfdWq\/2jZTMzzRR6x1UwljkaxLAjaedberSvwPbNynjQhmaTi3o\/HQxsTjpVixMesJaFowsmwMVdhsNusC49tZcnTWxwxMfFhhY0M2sWqfjTr7mW7lYJnDTAhDbWkXBCk3W3r7qvg+p6JOUOHxJpyun+rrovAwxpKTzcxlv02bV3vtsw1gf3L8qzmeWvE864nE5Dhfz3V\/TNf9pfhsW58y6Z6YfPt+tZLjN7a0m\/lOmHizfw2v6rvvp4k9Ho2IDStNIh1jBVRsqqqmwBXcx9d6RuWtm8CE+ITxJTa1aSTpJLt4\/U3Y9ffXSz6VD2cRzqWWg2cRzpYoYtxHOlikFhxHOpZaQ7DiOdLLSOX8ucloVLqNrnawG4KOv11YzceiO+BCLu2c3HDH9onvr41p40tmenk4e69QeGP7RPfHjTnS2ZeThfuXqhxRR\/aJ748ay8aT8GWOFhrxXqZCxxdtPeHjWHi4mzOiw8LdeqJGOLtp7w8azzZ7MuTC3XqUOsfbT3h41tYk9mRww916lUjR2PSX3h41pSn3MOOHujktOst7hh7DXvwJPxPl8WodUafN6a9FngAt6aWCtnPGstgrZjf8+is2U9GWr5x6QtSgUYvBrIBe4Km6spsyn0Go4pnHGwY4qV9V0a6oqOjEKlHZ3uQbs20EbitrBfYKmRVqc3wsXBxm278W9fpXT6EoNHKraws7sBYFyDlB32AAHtooLqXD4ZRnnbcn4X4eXQtweiEWRphe77xcWF7Xts67Cs0k7OmDwcI4ssVdX6fTzLH0DGUeM5rSPnO0XvcHZs3bBWNKo0\/wDj8NwlB3Unb8+v+ieH0IitnJd2AsGdsxAO+w3CiaWprD4KEZ5223u3deRLH6GSUZWZwOsK1gd2+4N91JOy4\/Bxxllk3XZ9fMpl0DmGXXSZCLMpyksNv7Vri+6pfc5z4FyWV4ksvRrTX61ZlT6KjdDEQQpGXYdoHoquVqjvicLCeG8N9GqFidExyJqzfLsvY7SFINjyo3aoYvCwxIZJdNPsQk0LEWRwuUoSRlsL3FiDs2imnUxLgsJyjNKmttDGn0DEYtT0stywN+kCSTcG1us9VaSTVHGf\/H4bweVrXXvd2EmikZlbM6lVyAq1jb07K1KK6iXCxnJStppVoy76ChMTRWIDG7NmJYm4NyTe52VzfSjp8Bg8p4WtPVu9W\/NkhoRMrKzyMHUqczA2v1jZvqWX4KLjKMpSaarV\/wAEZNBwh9ZY5hEU37Ngtf12NqEfA4WfmeNV+dyUWhogIfrfogcu3fmWxzce6rsajwWGlh1fydPStSD6AjzMVeRAxuyo9lJ6zuuL+gioYf8Ax8MzcZSinq0nSf8AtfRo2IwycO81czPZkiHmycKZmMkQ83ThTMxkiHm6cKZmMkQ83ThVtjJEWoTh\/WlsZYnG+W2Aw0ssayxK+RDa99mdtvX90VHOa\/Sz18PgYUotySZoV0DgP9unf405mN+5no+G4f8AahnQOA\/26d\/jTmY37mX4Xh\/2IrfQeA\/26d\/jV5mN+5mfhuH\/AGIobROAH\/jp\/N41VPG3ZHgcN+1FY0XgD\/48f83jWrxt2Z5PDftQpND4C36hObeNWMsV+LMvB4b9qNNjsHhAbLCvNvGvbhwm1qzwYzwYvSJpcTBF+ygHtPjXdQXieKcl4FGoTs958auWJjMxGBOz3mmSJLZW8KcO81lwRrMyt4V4VnIiZmeka+eeke2rqDm\/LXS8uGWDVyJFrJ1jeR1DKilWJYgkbBa+8bqjbCMDRel8bPHi0hlilaHJqMQkYCSsVzNHlJI9Fwd5qWymRoLyklxs0QhGSJIs+Kuu3WtdVhUndYqxvwom2DM8sdNz4bzcRyxwCWUo8sihlRct8xuRYD1isyR0TaRToXyuxGoxk0pinjwu2OeJcizdEkqBmI2HKLjZt67VikXNIzdBjSsghxT4iHJKFd4NSAqo4zAI4bMWsRvNvXba+Uqz9TDwulsfjTPLBiIsNDDM0CBolfWMlrmRnPRU3Fsu3b6NqkS5M6zByTGNSzRs2UZmT6hb9oqCTsvfrpUS\/OWFpPu1aiWpjDS8VpUSVMCZOK\/n2U+UVPcrZn4j8+ytKiPNuVXbiK2crGJX7X55VMprO9yQlftDl8qmVFzS3BpH7Q3H87qmVFzPcisjWHS7vlVykzPckJH7Xd8qZUMz3HrH7Xd8qZUXM9xax+13fKmVEzPcYd+13fKlIqctyV37Xd8qlIfNuK79rupSHzbgS3a7qtIW9z475a6TnbGzZJwFVggGQG2RQrbbdoNXrwsFOKdGXjYkFSkaUY7Efb\/yDwrtyFsZ+JxP3f4A47Ef7ge4vhU5C2L8Tifu+yKnx2I+2\/kHhV5KMPicT9xS+Mm65f5R4VeUjL4ib8SK4mb7T+UVchObLcGxk32v8o8KZC86W5jPM53v3VakvE5uVlZdu13Vfm3M2iJZu0OVT5tyaEZHYdfdWW5LxNKmVaw8RWczNZUiRzcR+fZT5jNI9J14T0DvVsGg8rdES4kQGExZoZ1mtMWyNlB6Jygk7SPZUYRj6D0DMmKfGTmBWaLVCPDKyoRmDZ3LWLNstu\/pUKZnkzol8McSXKHXYqSZcpJsj2sGuBY7DuuPTREI+VWi5pzh3hMOaCUyZZs2RujaxCg37qNWaTMLBeTDvJiZcU0K+cYfzcx4VSqAXBEhLfWcWFtnGs5S5jL0Omk4Viw5kwpiiyrrbSGV4k2BdXsAa1hfMfb1sppYjSo1+I8nsRHr4oVws+GxEpmMWJzjVyNa5GVSGFwCN1rD1m0ZzHQ+S2DOEwkWFZgxjUgsAQCSzNsv66mU0p0qNi0x41pJGXNjExpSGdg01EkHNkc1aM2wvSyBelgL0sCJoABoB3pYDN66AV6AYahbHrPXUFsM\/roLKMdjRFG8rXyxozn1KCT\/AEqpW6DZ8BlxjOxdlYsxLHZ1sbnr4mvpJ1okzzPUNb91uXzrefszNC1v3W5DxqZuwoRm+63IeNM3YtEHk+63IeNS+xRaz7rd3jUvsCsv6D3eNTN2JRG54Hu8aX2FET6j3eNL7Cg9h7vGl9iUVzH11mTNRKFFcjZdn9B5V0zGaPStq8NHcKAjI4UFjuAuaPQzKWVNsSyDbt3bx1j1jqqWgpoBOvaA3bCRcX3A+mlonMjuMTLe2YX3WuL7N4\/rVtFzxurHrlvbML8Li\/KloZ43Vi1678y245h6qloZ41dokXHEc\/zxHOrZbRW2JW17jido2CxNzt4AmpaM8yKV3+dSasDuN6G00+hKqAoB1QFAFAFQBegEDsogO9AF6AV6Ad6AL0AXoDj\/APU7SgiwohBAadrb7HIlmc88g\/8Aau\/Dq5Xsc8R6UfKQ44jnXuTRxLNYOI51q0ShawcRzFS0WhFxxHOloUQdhxHOo2i0QZxbfWbQKs1S0B5qtoESRRslMV6lkKcRWJs6wRQorkaMgGuqMM9J1887harQIyR5gVO4ix9tRokkpJpkPNhZhc9K49WYkm3tJqZTHLVNb39yuLDK1nViQbsCLWIZg3DaLimUnJjd\/nWy1cMAQdtxbuDb\/eJplKsNJp\/nj7kWwYN9+29\/bm\/EeQplI8KLv839\/wDAmwqkkXN9hO6+9tpFtxu3L0Uyh4KfX86+5NsPe1ybi+7Z1gjlYcquU04XVmPq47AZj0rhbegFDYAdV7XPo9FZyozyY1X50r\/BmKvrPr+VaOqHalALVQPLSgGWlAMtKAstKAWpQBRUSA8tWgGWlALUoBalALUoBalA+L+XmklxOLYjakX6JNpscpOdh62vt4AV78HCSjqcJStmgWFeHea7KCM2S1C8O81eWiZmLULw7z41MkS2xGBeHeamRCyDxKOrvPjUcELKmA4d5qZULZ2WivJbR\/0fDpDG4maESyvEBGoYZlaQAWCE\/VjJvXnlKWdxirOlLLbZspP9NsKEGNONy6PaJZRKUImOe2VQtt5uLG17m2XrqLFd5cvzFca8dDTYvycwE8kEGi55ppZZCrLOmUIqrmMhbIuwb7WN7HrFjtOSTeIq8jPXSJmaS8nNCYfPDJpCY4iMMGKR3i1ig3QDKdtxa2ffsuDWYvElqo6fn50DyrqzgJbAXHjXSaSEXZUHrmaLDGDxreRMy2z0rmrw2dqHmpYox8dCZFygjeCQwzKwH7LAEXHov1cKWDEwejGjYOHzNlykvdiRaNRfbvAjHtZj1moUw10I8ceVGBIQqBY3UmNIw8ZZ\/rWW9ydtyLi5NAXpo2Qxot1jsr2W2Yqz5SJAVIXOpDWsLDPYbttAHQpO9hbeFCkIux7gDNuJMd+Nn7ZFATm0Y\/RKSWZbXLKWuFeJkH1huEdjxzseugIw6GsVu+ZRYEEG7quUqshv0rFFA2WsXv8AWNAUQ6EYWDENq1AV3UHPmMRkUgG9v0VurY1rEA3gLPoRgNku3IVzMpYg6uNI5F6WxlyE\/wDu3E3A2WAw+rQJs2XOzYLkknZf0\/IbqpDJ20AbauoDbTUBtpqBbaagDepqAF6KwPbV1AbaagNtTUBtq6gW2moOd8u9NNhcK2Q2llvHFxBI6T7v2Rt9ZXjXTCw3ORmUkkfF0hk4j8+yvflmcLiTEMvEfn2VcsxmiS1MvaH59lMuIM0RamXtD8+ymWYzRIFZO0Pz7KjUyqipg\/WR+fZWWpDQjkbiPz7KzlkW4n2PyOXGnQmGGCSB5dfNmGIF0Ca2e5ABHSvk9hNeTErmPMdo\/p0Nl5S4OXHYFNHzz4aLSJtKIkc6tsjEBbG7AFCOO0Ei4FZg8ksyug6ejNF5FeT30PKcbpOaKLMuphRWzkl2XM5sNwA6r2BYm1q6TnLFWWOplJR1ZZoHyPxeDxcmIQ4KXCSNmOJnJcpAWLtkAYAMRa7G4OUG42isyxc0a1sqgk7Pn\/8AqLpOLE46WWAKIRlRCosGCCxe1us5rei1doxlGOpltN6HL3qCiWZuqrciUemq8p1HQBQCqAYqgKAVAFAFQBQBQBQoXqkHelgL0sBelgL0sCJqWUAaWB3q2QL0sBepZRXq2QjJKFBZjZVBJJ2AAC5JPCgPiHlX5SeeYhpQG1a9GIZTsQH6xHUWO3kOqvfhVBUcZas1a4scG92u3NWzObgxnGjg3u05q2IoAMcODe7V53YZCLY4cG5VHjdmVQKjihwblWHiGspU0wPHlWc6GUNcLbjyq5y5Spit72\/lqcwmUkJANlj7tXmDISae5ucxPGxvUzoZSOtFrbbXvaxtfjapnGUhNIDx5GsylZpKjH2ce41z0NkxIPTyNXMiHpqvIdB2pQC1KAWpQC1WgFqUAtUoBalAKAKAKAKAKAKoCoB1QFAI0AxQBQBQBQCqA+a\/6meU2YnAwnYP17DrO8RD+rewcRXqwMP\/ALM5zfgfPQp4V6jmSseBqkIlTwoAKngaEZFkPA1ARyngahQyHgaCxZDQWLKeFZNWPKeFUCN+BqWBG\/Cg0E4PDuqMIqKnhWTdjAtQjPS9eA7DqkCgCgHVA7UAWoBWqALUAqAKgFellC9LAXpYC9LAXpYHQCNAMCgHaqQLUArUBqvKnEvFg8RLGcrpC7Kw3ghTY7a1BXJJh9D4GsYO+56ySSSTxJ669uVHFkliHDvNWkQDEOHfTKhYtUOFKQHqV4UyoEWiHCmVBMWqHCs0ioepXhWlFEYGFeFZaRpFerFZSKDxirSBSyiubISCD8mtIqG0Yt8zShRAoPyTWSBqx+SaMln\/2Q==',width=400,height=400)","e9de1882":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nimport matplotlib.pyplot as plt\nwarnings.simplefilter('ignore')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45e4f5fc":"# Common code for display result\ndef show_graph(df1,df2):\n    data = pd.concat([df1, df2])\n    data.reset_index(inplace=True, drop=True)\n    for col in data.columns:\n        if col.lower().startswith('pred'):\n            data[col].plot(label=col,linestyle=\"dotted\")\n        else:\n            data[col].plot(label=col)\n    plt.title(\"Actual vs. Predicted\")\n    plt.legend()\n    plt.show()","8f53371c":"from statsmodels.tsa.ar_model import AutoReg\nfrom random import random\n\ndef AR_model(train,test):\n    # fit model\n    model = AutoReg(train['Act'], lags=1)\n    model_fit = model.fit()\n    # make prediction\n    yhat=model_fit.predict(len(train), len(train) + len(test) - 1)\n    res=pd.DataFrame({\"Pred\":yhat, \"Act\":test[\"Act\"].values})\n    return res\n \ndf_train = pd.DataFrame([x + random()*10 for x in range(1, 100)],\n                     columns=['Act'])\ndf_test = pd.DataFrame([x + random()*10 for x in range(101, 200)],\n                     columns=['Act'])\ndf_ret = AR_model(df_train, df_test)\nshow_graph(df_train, df_ret)","bcf4563f":"from statsmodels.tsa.arima_model import ARMA\nfrom random import random\n\ndef MA_model(train,test):\n    # fit model\n    model = ARMA(train['Act'], order=(0, 1))\n    model_fit = model.fit(disp=False)\n    # make prediction\n    yhat = model_fit.predict(len(train), len(train) + len(test) - 1)\n    res=pd.DataFrame({\"Pred\":yhat, \"Act\":test[\"Act\"].values})\n    return res\n \ndf_train = pd.DataFrame([x + random()*10 for x in range(0, 100)],\n                     columns=['Act'])\ndf_test = pd.DataFrame([x + random()*10 for x in range(101, 201)],\n                     columns=['Act'])\ndf_ret = MA_model(df_train, df_test)\nshow_graph(df_train, df_ret)","7df5e97a":"from statsmodels.tsa.arima_model import ARMA\nfrom random import random\n\ndef ARMA_model(train,test):\n    # fit model\n    model = ARMA(train['Act'], order=(1,2))\n    model_fit = model.fit(disp=False)\n    # make prediction\n    yhat = model_fit.predict(len(train), len(train) + len(test) - 1)\n    res=pd.DataFrame({\"Pred\":yhat, \"Act\":test[\"Act\"].values})\n    return res\n \ndf_train = pd.DataFrame([x + random()*10 for x in range(0, 100)],\n                     columns=['Act'])\ndf_test = pd.DataFrame([x + random()*10 for x in range(101, 201)],\n                     columns=['Act'])\ndf_ret = ARMA_model(df_train, df_test)\nshow_graph(df_train, df_ret)","2dea26a7":"from statsmodels.tsa.arima_model import ARIMA\nfrom random import random\n\ndef ARIMA_model(train,test):\n    # fit model\n    model = ARIMA(train['Act'], order=(1, 1, 1))\n    model_fit = model.fit(disp=False)\n    # make prediction\n    yhat = model_fit.predict(len(train), len(train) + len(test) - 1, typ='levels')\n    res=pd.DataFrame({\"Pred\":yhat, \"Act\":test[\"Act\"].values})\n    return res\n \ndf_train = pd.DataFrame([x + random()*10 for x in range(0, 100)],\n                     columns=['Act'])\ndf_test = pd.DataFrame([x + random()*10 for x in range(101, 201)],\n                     columns=['Act'])\ndf_ret = ARIMA_model(df_train, df_test)\nshow_graph(df_train, df_ret)","cf1a1bc6":"from statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom random import random\n\ndef SARIMA_model(train,test):\n    # fit model\n    model = SARIMAX(train['Act'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 2))\n    model_fit = model.fit(disp=False)\n    # make prediction\n    yhat = model_fit.predict(len(train), len(train) + len(test) - 1)\n    res=pd.DataFrame({\"Pred\":yhat, \"Act\":test[\"Act\"].values})\n    return res\n \ndf_train = pd.DataFrame([x + random()*10 for x in range(0, 100)],\n                     columns=['Act'])\ndf_test = pd.DataFrame([x + random()*10 for x in range(101, 201)],\n                     columns=['Act'])\ndf_ret = SARIMA_model(df_train, df_test)\nshow_graph(df_train, df_ret)","ae1d2fba":"from statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom random import random\n\ndef SARIMAX_model(train,test):\n    # fit model\n    model = SARIMAX(train.drop('Exog', axis=1), exog=train['Exog'], order=(1, 1, 1), seasonal_order=(0, 0, 0, 0))\n    model_fit = model.fit(disp=False)\n    # make prediction\n    yhat = model_fit.predict(len(train), len(train) + len(test) - 1, exog=test[\"Exog\"].values)\n    res=pd.DataFrame({\"Pred\":yhat, \"Act\":test[\"Act\"].values,\"Exog\":test[\"Exog\"].values})\n    return res\n\ndf_train = pd.DataFrame({'Act':[x + random()*10 for x in range(0, 100)],\n                         'Exog':[x + random()*10 for x in range(101, 201)]})\ndf_test = pd.DataFrame({'Act':[x + random()*10 for x in range(101, 201)],\n                         'Exog':[200 + random()*10 for x in range(201, 301)]})\ndf_ret = SARIMAX_model(df_train, df_test)\nshow_graph(df_train, df_ret)","652fc3b9":"from statsmodels.tsa.vector_ar.var_model import VAR\nfrom random import random\n\ndef VAR_model(train,test):\n    # fit model\n    model = VAR(train)\n    model_fit = model.fit()\n    # make prediction\n    yhat = model_fit.forecast(model_fit.y, steps=len(test))\n    res=pd.DataFrame({\"Pred1\":[x[0] for x in yhat], \"Pred2\":[x[1] for x in yhat], \n                      \"Act1\":test[\"Act1\"].values, \"Act2\":test[\"Act2\"].values})\n    return res\n\ndf_train = pd.DataFrame({'Act1':[x + random()*10 for x in range(0, 100)],\n                         'Act2':50+np.sin(np.linspace(0, 2*np.pi, 100))*50})\ndf_test = pd.DataFrame({'Act1':[x + random()*10 for x in range(101, 201)],\n                         'Act2':50+np.sin(np.linspace(0, 2*np.pi, 100))*50})\ndf_ret = VAR_model(df_train, df_test)\nshow_graph(df_train, df_ret)","ab8b3831":"from statsmodels.tsa.statespace.varmax import VARMAX\nfrom random import random\n\ndef VARMA_model(train,test):\n    # fit model\n    model = VARMAX(train, order=(1, 2))\n    model_fit = model.fit(disp=False)\n    # make prediction\n    yhat = model_fit.forecast(steps=len(test))\n    res=pd.DataFrame({\"Pred1\":yhat['Act1'], \"Pred2\":yhat['Act2'], \n                      \"Act1\":test[\"Act1\"].values, \"Act2\":test[\"Act2\"].values})\n    return res\n\ndf_train = pd.DataFrame({'Act1':[x + random()*10 for x in range(0, 100)],\n                         'Act2':50+np.sin(np.linspace(0, 2*np.pi, 100))*50})\ndf_test = pd.DataFrame({'Act1':[x + random()*10 for x in range(101, 201)],\n                         'Act2':50+np.sin(np.linspace(0, 2*np.pi, 100))*50})\ndf_ret = VARMA_model(df_train, df_test)\nshow_graph(df_train, df_ret)","5d5d4700":"from statsmodels.tsa.statespace.varmax import VARMAX\nfrom random import random\n\ndef VARMAX_model(train,test):\n    # fit model\n    model = VARMAX(train.drop('Exog', axis=1), exog=train['Exog'], order=(1, 1))\n    model_fit = model.fit(disp=False)\n    # make prediction\n    yhat = model_fit.forecast(steps=len(test),exog=test['Exog'])\n    res=pd.DataFrame({\"Pred1\":yhat['Act1'], \"Pred2\":yhat['Act2'], \n            \"Act1\":test[\"Act1\"].values, \"Act2\":test[\"Act2\"].values, \"Exog\":test[\"Exog\"].values})\n    return res\n\ndf_train = pd.DataFrame({'Act1':[x + random()*10 for x in range(0, 100)],\n                         'Act2':[x*3 + random()*10 for x in range(0, 100)],\n                         'Exog':50+np.sin(np.linspace(0, 2*np.pi, 100))*50})\ndf_test = pd.DataFrame({'Act1':[x + random()*10 for x in range(101, 201)],\n                         'Act2':[x*3 + random()*10 for x in range(101, 201)],\n                         'Exog':50+np.sin(np.linspace(0, 2*np.pi, 100))*50})\ndf_ret = VARMAX_model(df_train, df_test)\nshow_graph(df_train, df_ret)","fd16e2a5":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\nfrom random import random\n\ndef SES_model(train,test):\n    # fit model\n    model = SimpleExpSmoothing(train['Act'])\n    model_fit = model.fit()\n    # make prediction\n    yhat=model_fit.predict(len(train), len(train) + len(test) - 1)\n    res=pd.DataFrame({\"Pred\":yhat, \"Act\":test[\"Act\"].values})\n    return res\n \ndf_train = pd.DataFrame([x + random()*10 for x in range(0, 100)],\n                     columns=['Act'])\ndf_test = pd.DataFrame([x + random()*10 for x in range(101, 201)],\n                     columns=['Act'])\ndf_ret = SES_model(df_train, df_test)\nshow_graph(df_train, df_ret)","d9b86f31":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom random import random\n\ndef HWES_model(train,test):\n    # fit model\n    model = ExponentialSmoothing(train['Act'])\n    model_fit = model.fit()\n    # make prediction\n    yhat=model_fit.predict(len(train), len(train) + len(test) - 1)\n    res=pd.DataFrame({\"Pred\":yhat, \"Act\":test[\"Act\"].values})\n    return res\n \ndf_train = pd.DataFrame([x + random()*10 for x in range(0, 100)],\n                     columns=['Act'])\ndf_test = pd.DataFrame([x + random()*10 for x in range(101, 201)],\n                     columns=['Act'])\ndf_ret = HWES_model(df_train, df_test)\nshow_graph(df_train, df_ret)","3da4ee6e":"#Holt Winter\u2019s Exponential Smoothing (HWES)","fafa53f5":"#Moving Average (MA)","d636f208":"#Vector Autoregression Moving-Average (VARMA)","22fd675b":"#Reference  Masa https:\/\/www.kaggle.com\/sajikim\/time-series-forecasting-methods-example-python\/notebook?select=Crude_oil_trend.csv\n\n\"This section provides more resources on the topic if you are looking to go deeper.\"\n\nStatsmodels: Time Series analysis API\nhttp:\/\/www.statsmodels.org\/dev\/tsa.html\n\nStatsmodels: Time Series Analysis by State Space Methods\nhttp:\/\/www.statsmodels.org\/dev\/statespace.html\n\nI write this notebook referencing this cheat sheet\nhttps:\/\/machinelearningmastery.com\/time-series-forecasting-methods-in-python-cheat-sheet\/","ed65625c":"#Vector Autoregression Moving-Average with Exogenous Regressors (VARMAX)","6b1ad793":"According to the study, this would explain why densely populated states and cities, with high rates of coronavirus infection, but with high BCG immunization, such as S\u00e3o Paulo and Rio de Janeiro, recorded lower mortality rates than New York, for example.\n\nScientists found that Covid-19 mortality in the American states of New York, Illinois, Louisiana, Alabama and Florida, all without universal BCG vaccination, was significantly higher than in states in countries with universal immunization with BCG, such as Pernambuco , Rio de Janeiro and S\u00e3o Paulo, Brazil; and the state of Mexico and the Mexican capital.\n\nIn Europe, similar results were found. In Western Europe, where there has never been a massive BCG vaccination, the death rate from Covid-19 is 9.92 times higher than in Eastern European countries, where most countries have active BCG vaccination programs.\n\nBCG would have an effect against Covid-19 by limiting the action of the coronavirus. It would stimulate the innate response of the immune system not only against the tubercle bacillus, but against infection by other pathogens and attacks, such as cancer. BCG's action to activate the defense system against bladder cancer, for example, had already been observed.","9cb8b5a3":"#All codes by Masa https:\/\/www.kaggle.com\/sajikim\/time-series-forecasting-methods-example-python\/notebook?select=Crude_oil_trend.csv","9ddc4148":"#Seasonal Autoregressive Integrated Moving-Average (SARIMA)","629993c4":"#Simple Exponential Smoothing (SES)","6ff9251c":"#Study says tuberculosis vaccine may have reduced Covid mortality in Brazil, by Ana Lucia Azevedo\n\nAmerican research analyzed the spread of the disease in several countries and identified a correlation between BCG vaccination and lower death rates.\n\nThere are currently 235 vaccines against coronavirus in some test phase in the world. But an American study presented on Thursday suggests that an old medical ally, the BCG tuberculosis vaccine, may have reduced Covid-19's death rate in countries like Brazil.\n\nScientists say it is still too hasty to recommend BCG to prevent Covid-19 from getting worse, but argue that its effects should be further investigated. Conducted by researchers at the National Institute of Allergies and Infectious Diseases of the United States and the State University of Virginia, the study was published in the PNAS journal of the American Academy of Sciences.\n\nIt analyzes and compares the death rate for Covid-19 from European countries, the United States, Brazil and Mexico. The scientists found that the death rate per million was negatively correlated with BCG immunization. The higher the percentage of people vaccinated by BCG, the lower the mortality by Covid-19. It would not prevent the disease, but it would prevent its worsening, at least in theory.\n\nhttps:\/\/translate.google.com.br\/translate?hl=en&sl=pt&u=https:\/\/oglobo.globo.com\/sociedade\/coronavirus\/estudo-diz-que-vacina-contra-tuberculose-pode-ter-reduzido-mortalidade-por-covid-no-brasil-24524450&prev=search&pto=aue","2f5793aa":"#Autoregressive Integrated Moving Average (ARIMA)","dda0121b":"#Vector Autoregression (VAR)","ff72f4d8":"#Classical Time Series Forecasting Methods in Python","81948d89":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  mpwolke ","7277b814":"#Autoregression (AR)","cc173822":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQgo9b0lkVetVIyCdazSLlGUryC6uyyUo3IzA&usqp=CAU)\naberje.com.br - BCG Brazil produces guide on economic scenarios in the pandemic\n06\/07\/2020 https:\/\/translate.google.com.br\/translate?hl=en&sl=pt&u=http:\/\/www.aberje.com.br\/bcg-brazil-produz-guia-sobre-cenarios-economicos-na-pandemia\/&prev=search&pto=aue\n\u201cCOVID-19 Perspectives - Facts, scenarios, and actions for business leaders\u201d is BCG Brazil's guide to the context and development of the pandemic, economic and social impact scenarios and leadership in the crisis in 34 pages of high-level content. ","f9d801e0":"#Vector Autoregression Moving-Average with Exogenous Regressors (VARMAX). By, Masa  https:\/\/www.kaggle.com\/sajikim\/time-series-forecasting-methods-example-python\/notebook?select=Crude_oil_trend.csv","f2347f5a":"#Seasonal Autoregressive Integrated Moving-Average with Exogenous Regressors (SARIMAX)","e03f1f34":"In their study, the scientists say that the identification of this relationship of reduced mortality and BCG highlights the \"need for more research on the effects of BCG vaccination on Covid-19 and also as a way to prevent the severe form of the disease\".\n\nThis is not the first study to make the association between BCG and the Covid-19 combat, but it is the largest so far.\n\nThe scientists pointed out that the \u201cconsistent association\u201d between BCG immunization and the reduction in Covid-19 severity seen in these epidemiological studies is surprising, but not enough to establish a causal relationship.\n\nThey added that clinical studies underway in the Netherlands and and Australia, in which healthcare professionals receive either BCG or a (harmless) placebo injection, could determine to what extent immunization against tuberculosis provides protection against Covid-19.https:\/\/translate.google.com.br\/translate?hl=en&sl=pt&u=https:\/\/oglobo.globo.com\/sociedade\/coronavirus\/estudo-diz-que-vacina-contra-tuberculose-pode-ter-reduzido-mortalidade-por-covid-no-brasil-24524450&prev=search&pto=aue","d75729cb":"#Autoregressive Moving Average (ARMA)"}}