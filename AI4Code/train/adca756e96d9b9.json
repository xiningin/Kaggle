{"cell_type":{"2e80dc77":"code","68a0f714":"code","608cf764":"code","92a243a6":"code","d1d867ae":"code","460b72ef":"code","04844729":"code","aec0ad76":"code","78840660":"code","2cca5e2f":"markdown","b85046dc":"markdown","e74c50e4":"markdown","77ffa487":"markdown","349f4c27":"markdown"},"source":{"2e80dc77":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68a0f714":"def birdview(data):\n    print(\"----------Head 5 Record----------\")\n    print(data.head(5))\n    print(\"\\n-----------Information-----------\")\n    print(data.info())\n    print(\"\\n-----------Data Types-----------\")\n    print(data.dtypes)\n    print(\"\\n----------Missing value-----------\")\n    print(data.isnull().sum())\n    print(\"\\n----------Null value-----------\")\n    print(data.isna().sum())\n    print(\"\\n----------Shape of Data----------\")\n    print(data.shape)\n    \ndef graph_insight(data):\n    print(set(data.dtypes.tolist()))\n    df_num = data.select_dtypes(include = ['float64', 'int64'])\n    df_num.hist(figsize=(16, 16), bins=50, xlabelsize=8, ylabelsize=8);\n\ndef distribution_insight(data, column):\n    print(\"===================================\")\n    print(\"Min Value:\", data[column].min())\n    print(\"Max Value:\", data[column].max())\n    print(\"Average Value:\", data[column].mean())\n    print(\"Center Point of Data (median):\", data[column].median())\n    print(\"===================================\")\n    # sns.boxplot(data[column])","608cf764":"iris = '..\/input\/irisdataset\/Iris.csv'\ndf = pd.read_csv(iris)\n\nbirdview(df)\ndf.iris.value_counts()","92a243a6":"graph_insight(df)","d1d867ae":"from sklearn.preprocessing import LabelEncoder\nlb = LabelEncoder()\nlabels = lb.fit_transform(df.iris)\nlabels ","460b72ef":"df.drop(columns=['iris'], inplace=True)\ndf.head()","04844729":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(df, labels, test_size=0.2, random_state=0)\neval_set = [(X_train, y_train), (X_val, y_val)]","aec0ad76":"from xgboost import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train, eval_set=eval_set,\n          early_stopping_rounds=10, eval_metric='merror',\n          verbose=True)","78840660":"from sklearn.metrics import accuracy_score\n\ny_preds = model.predict(X_val)\nprint(\"Accuracy score\", accuracy_score(y_val, y_preds))","2cca5e2f":"Great, there is no missing value or outlier. \n\nThe number of each class is exactly 50, very well-balanced. \n\nwe now encode the class names into numbers.","b85046dc":"## Train with XGBClassfier\n","e74c50e4":"## Explore the data","77ffa487":"Now, let's train the model under the metric `merror`, multiclass classification error, which is calculated as `#{wrong cases} \/ #{all cases}`.","349f4c27":"Validate our model to see how it performs. \n\nResult: accuracy score is 1. \n\nSince this is a simple and well-balanced dataset, and xgboost is powerful model, the result is not surprising."}}