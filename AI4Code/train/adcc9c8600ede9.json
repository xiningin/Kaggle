{"cell_type":{"86ad7ab8":"code","bfa07d66":"code","656eccea":"code","2241605f":"code","46819bb3":"code","ba584308":"code","0480dc88":"code","b0ab0e70":"code","91d1f159":"code","09595571":"code","775c8dcb":"code","a9521c5e":"code","f2b76085":"code","023c03da":"code","4dd385a9":"code","65eef903":"code","ee80e245":"code","cb619063":"markdown","54916b51":"markdown","1d27dcc7":"markdown","392fb32e":"markdown","8f2cdf45":"markdown","d9725b88":"markdown","7c7356dc":"markdown","ae2cc095":"markdown","5ed30d15":"markdown","30349817":"markdown","55c8fc88":"markdown"},"source":{"86ad7ab8":"!pip install torch","bfa07d66":"import torch","656eccea":"# Number\nt1 = torch.tensor(4.)\nt1, t1.dtype","2241605f":"# Vector\nt2 = torch.tensor([1,2,3,4])\nt2, t2.dtype","46819bb3":"# Matrix\nx = [\n     [1,2,3],\n     [4,5,6], \n     [7,8,9]\n     ]\nt3 = torch.tensor(x)\nx, t3, t3.dtype","ba584308":"t1.shape, t2.shape, t3.shape","0480dc88":"torch.zeros([2,4], dtype=torch.float64)","b0ab0e70":"cuda0 = torch.device('cuda:0')\ntorch.ones([2, 4], dtype = torch.float64, device = cuda0)","91d1f159":"# Create Tensors\nx = torch.tensor(3.)\nw = torch.tensor(4., requires_grad=True)\nb = torch.tensor(5., requires_grad=True)\nx, w, b","09595571":"# Arithmetic Operations\ny = w * x + b\ny","775c8dcb":"# Compute Derivatives\ny.backward()","a9521c5e":"# Display Gradients\nprint('dy\/dx:', x.grad)\nprint('dy\/dw:', w.grad)\nprint('dy\/db:', b.grad)","f2b76085":"import numpy as np\n\nx = np.array([[1, 2], [3, 4.]])\nx","023c03da":"# Converting the numpy array to a torch tensor.\ny = torch.from_numpy(x)        # Creates the array on the same memory allocation\ny","4dd385a9":"y = torch.tensor(x)        # Creates the array on the a new memory allocation\ny","65eef903":"x.dtype, y.dtype","ee80e245":"# Converting a torch tensor to a numpy array\nz = y.numpy()\nz","cb619063":"OR","54916b51":"# Importing & Installing Dependencies","1d27dcc7":"# PyTorch Basics : Tensors & Gradients","392fb32e":"The derivates of `y` w.r.t the input tensors are stored in the `.grad` property of the respective tensors.","8f2cdf45":"Here's how we create an array in Numpy:","d9725b88":"# Tensor Operations and Gradients","7c7356dc":"We can automatically compute the derivative of `y` w.r.t. the tensors that have `requires_grad` set to `True` i.e. w and b. To compute the derivatives, we can call the `.backward` method on our result `y`.","ae2cc095":"# Tensors","5ed30d15":"# References\n\n1.  https:\/\/pytorch.org\/docs\/stable\/tensors.html\n2.  https:\/\/github.com\/yunjey\/pytorch-tutorial","30349817":"# Interoperability with Numpy","55c8fc88":"The \"grad\" in `w.grad` stands for gradient, which is another term for derivative, used mainly when dealing with matrices. "}}