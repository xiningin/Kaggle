{"cell_type":{"68a094a7":"code","6132a557":"code","cd87d924":"code","5767c7de":"code","444d46a1":"code","c7c8f4af":"code","6845b5de":"code","f78a7c79":"code","bd0749d4":"code","a10bbe1a":"code","514618cf":"code","c842e653":"code","3f1b334a":"code","952bf6ef":"code","6feff506":"code","11da7700":"code","718defa2":"code","b0bf7a4f":"code","bf591100":"code","c0a3530b":"code","3f27bb37":"code","57667341":"code","e484ae3b":"code","c7d7fd15":"code","b337f53d":"markdown","596ad3c1":"markdown","7a12201a":"markdown","0a434c9a":"markdown","c7d61ccc":"markdown","8ddbd832":"markdown","6a8b80ff":"markdown","ffe73664":"markdown","692504c1":"markdown","cc6df74b":"markdown","7d3f3557":"markdown","141ba2bd":"markdown"},"source":{"68a094a7":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns ","6132a557":"#read csv file\ndf = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\n\n#first few rows of dataset\ndf.head()","cd87d924":"df.shape","5767c7de":"#drop genres column\n\ndf.drop(['genres'],axis=1,inplace=True)","444d46a1":"#import ratings dataset\nrating=pd.read_csv(\"..\/input\/movielens-20m-dataset\/rating.csv\")\n\n#columns\n\nrating.columns","c7c8f4af":"#we need user id, movie id and rating\n\nrating = rating.loc[:,[\"userId\", \"movieId\", \"rating\"]]\nrating.head()","6845b5de":"#then merge movie and rating data\ndf = pd.merge(df,rating)","f78a7c79":"df.head()","bd0749d4":"df.shape","a10bbe1a":"df = df.iloc[:1000000]","514618cf":"df.shape","c842e653":"#basic stats\ndf.describe()","3f1b334a":"df.groupby(\"title\").mean()['rating'].sort_values(ascending=False)","952bf6ef":"df.groupby(\"title\").count()[\"rating\"].sort_values(ascending=False)","6feff506":"ratings=pd.DataFrame(df.groupby(\"title\").mean()['rating'])\nratings['number of ratings']=pd.DataFrame(df.groupby(\"title\").count()[\"rating\"])\nprint(ratings.head())","11da7700":"ratings.sort_values(by='rating', ascending=False)","718defa2":"ratings.describe()","b0bf7a4f":"plt.hist(ratings['rating'])\nplt.show","bf591100":"plt.hist(ratings['number of ratings'],bins=50)\nplt.show","c0a3530b":"# lets make a pivot table in order to make rows are users and columns are movies. And values are rating\npivot_table = df.pivot_table(index = [\"userId\"],columns = [\"title\"],values = \"rating\")\npivot_table.head(5)","3f27bb37":"pivot_table.shape","57667341":"def recommend_movie(movie):\n    movie_watched = pivot_table[movie]\n    similarity_with_other_movies = pivot_table.corrwith(movie_watched)  # find correlation between \"Toy Story (1995)\" and other movies\n    similarity_with_other_movies = similarity_with_other_movies.sort_values(ascending=False)\n    return similarity_with_other_movies.head()","e484ae3b":"recommend_movie('American President, The (1995)')","c7d7fd15":"recommend_movie('Toy Story (1995)')","b337f53d":"Let's find the number of rating a particular movie has recieved","596ad3c1":"So we have 27,278 movies. We don't need genres column so we are dropping that column.","7a12201a":"In our kaggle, we don't have much memory so we have to subset our dataset, we are going to take 1M rows","0a434c9a":"Now we will going to make a dataframe in which we will have rating and number of ratings column","c7d61ccc":"## Data Visualization","8ddbd832":"Now we will make a function which will recommend the movie with their correlation score.Note that higher the correlation more the movie related to each othe","6a8b80ff":"We will going to take two dataset first one is movie dataset in which we will have movie names and the second dataset will have ratings and userID","ffe73664":"## Recommender System","692504c1":"We need to import our another dataset in which we have ratings for the movie.","cc6df74b":"As noted here one user has rated one or more than one movie. This means that one movie has been rated by more than one user","7d3f3557":"let's find the average rating of each movie","141ba2bd":"So from above we can see that we don't have any movie with rating 5"}}