{"cell_type":{"9383b3e2":"code","ca846510":"code","4fff9667":"code","d23251f4":"code","2ff446f9":"code","c18db87b":"code","f621a28d":"code","2a82c566":"code","56a6f89a":"code","0a1e2fca":"code","860959e5":"code","52f4559c":"code","40ce857d":"code","7694cec4":"code","4758a054":"markdown","bd88f979":"markdown","e445544e":"markdown","f1c0ac6d":"markdown","34d25ba2":"markdown","94de39c1":"markdown","c42ac867":"markdown","afcf3643":"markdown","45940bf6":"markdown","34292fa1":"markdown","694cf84c":"markdown","cfed14b1":"markdown","82b67b4b":"markdown","ba0a71bb":"markdown","f5122bfe":"markdown","dc76ed4d":"markdown","160e041e":"markdown"},"source":{"9383b3e2":"import numpy as np\nimport pandas as pd","ca846510":"# set all floors to 10\ndef get_preped():\n    sub = pd.read_csv(\"..\/input\/indoor-location-navigation\/sample_submission.csv\")\n    tmp = sub['site_path_timestamp'].apply(lambda s : pd.Series(s.split('_')))\n    sub['site'] = tmp[0]\n    sub['path'] = tmp[1]\n    sub['timestamp'] = tmp[2].astype(int)\n    sub[\"x\"] = 0\n    sub[\"y\"] = 0\n    sub[\"floor\"] = 10\n    return sub.copy()","4fff9667":"sub = get_preped()\nsub[[\"site_path_timestamp\", \"floor\", \"x\", \"y\"]].to_csv(f\"LeaderboardProving_base.csv\", index=False)    ","d23251f4":"sub[\"floor\"] = 11111111111111111\nsub[[\"site_path_timestamp\", \"floor\", \"x\", \"y\"]].to_csv(\"check_digit.csv\", index=False)","2ff446f9":"beki = []\nfor i in range(10000):\n    if (1 << i) > 1e12:\n        break\n    else:\n        beki.append(1<<i)\nL = len(beki)\nL","c18db87b":"for i in range(100):\n    sub = get_preped()\n    paths = sub.path.unique()\n    \n    # add 4, 8, ... to i*L, i*L+1, ... (i+1)*L-1th floors\n    if (i+1)*L <= len(paths):\n        change_path = paths[i*L: (i+1)*L]\n    elif i*L >= len(paths):\n        break\n    else:\n        change_path = paths[i*L:]\n    \n    for j, path in enumerate(change_path):\n        idx = sub[sub.path==path].index[0]\n        sub.loc[idx, \"floor\"] += beki[j] * 4\n    sub[[\"site_path_timestamp\", \"floor\", \"x\", \"y\"]].to_csv(f\"LeaderboardProving_retry_{i}.csv\", index=False)    ","f621a28d":"# Please note that, during the contest, you can only see up to three decimal places, \n# so you need to round off the fourth decimal place of the score above. \nproved = np.array([\n    2057112881.693,\n    12152439921.064,\n    348247677.410,\n    4050264160.161,\n    2030406016.113,\n    5569448495.956,\n    379717671.595,\n    3299139.257,\n    1624327107.823,\n    10801198316.153,\n    764044466.722,\n    1818302.636,\n    2700177073.402,\n    12235280536.506,\n    804334299.807,\n    336414.542,\n])","2a82c566":"base_score = 285.033\nproved -= base_score # only floor loss","56a6f89a":"len(sub) * 0.15","0a1e2fca":"losses = []\nfor n_public in range(1500, 1550): # about 1519.95\n    loss = 0\n    single_loss = 15 \/ n_public\n    for p in proved:\n        l = p % single_loss\n        loss += min(l, single_loss-l)\n    \n    losses.append(loss)   \nlosses = np.array(losses)\nn_public = losses.argmin()+1500\nn_public","860959e5":"losses","52f4559c":"sub = get_preped()\npaths = sub.path.unique()\n\nn_public_row = 0 # for debug\npublic_paths = []\nsingle_loss = 15 \/ n_public  \nnxt = 0 # index of the next path\nfor p in proved:  \n    # get bits\n    public_bits = bin(int(round((p) \/ single_loss)))[::-1][2:-2] # remove head and tail (\"00\", \"0b\")\n    print(public_bits)\n    \n    ## please comment out if you want to check original bits.\n    ## you can find the last two digits are 0 (because we multiple 4 to avoid error).\n    # print(f\"check: {bin(int(round((p) \/ single_loss)))}\")\n    \n    for b in public_bits:\n        if b == \"1\": # in public\n            public_paths.append(paths[nxt])\n            n_public_row += len(sub[sub.path==paths[nxt]])\n        nxt += 1\n    nxt += L - len(public_bits)","40ce857d":"# Make sure that the number of lines in public is 1527\nn_public_row","7694cec4":"sub = get_preped()\nfor p in public_paths:\n    sub.loc[sub.path==p, \"floor\"] += 1\nsub[[\"site_path_timestamp\", \"floor\", \"x\", \"y\"]].to_csv(f\"LeaderboardProving_public101_private100.csv\", index=False)  ","4758a054":"Result:<br>\n![image.png](attachment:050bdf95-62a9-4ad5-a869-7578ed41ba5c.png)","bd88f979":"## Get public information by setting floors to power of 2 [16 subs]\nYou can find out which floor is public at the same time by setting their floor to 4, 8, 16, .....<br>\n(You can set them from 1, but it will be troublesome due to the error.) <br>\n\nFor example, suppose that if you get the floor wrong by 1, the public will be worse off by exactly 1.\nPick one of several paths and change their floors to 4, 8, 16, 32, ..., and if LB degrades by 36(=4+32), then the paths changed to 4 and 32 will be included in the publication.\nIn other words, for inputs that do not interfere with each other, the original input is restored from the output.","e445544e":"#### There were some typo in old version and filenames.\n#### \u30fb\"proving\" -> \"probing\"\n#### \u30fb\"100\" -> \"10\", \"101\" -> \"11\"\n#### Sorry...","f1c0ac6d":"The length of effective digit is 15.","34d25ba2":"Result:<br>\n![image.png](attachment:06b7bc84-70c6-4c34-a395-7f6199171f9b.png)","94de39c1":"You can check 40 paths at the same time in this way.","c42ac867":"## Check the effective digit of LB [1 sub]","afcf3643":"# Leaderboard Probing","45940bf6":"## Identify the number of rows in Public\nThe loss excluding the coordinate part should be an integer multiple of 15 divided by the number of rows (single_loss). Therefore, if the floor loss divided by single_loss is close enough to an integer, we know that it is the true number of rows.","34292fa1":"### Check","694cf84c":"In this notebook, I show you how to complete Leaderboard Probing by 18 submissions. <br>\nI didn't even think I could identify private and public division before reading [this great discussion](https:\/\/www.kaggle.com\/c\/indoor-location-navigation\/discussion\/240176), so our team didn't use this result to our valid submission during the competition. Thank you for giving me the opportunity to learn about Leaderboard Proving.<br>\n\nI don't know this way is same as the way Tom's team did, so if you know a more efficient way, please let me know!!<br>\n\nThis method may be obvious to those who are familiar with Kaggle, but I hope it will be useful for beginners like me.","cfed14b1":"Result:<br>\n![image.png](attachment:e547d78c-2e0c-4d6e-86e9-9ad1a32c4b54.png)\n![image.png](attachment:5dc602ef-a061-4c81-967b-eda1c112e9ca.png)\n![image.png](attachment:f99d52f2-a7ca-4ccf-a9f2-6ea87390ca43.png)","82b67b4b":"## Get a base score [1 sub]","ba0a71bb":"Result:<br>\n![image.png](attachment:1f7d359b-e8fb-4734-b46a-3b37dd00cfde.png)\n\nBase score:<br>\n![image.png](attachment:b02c3b43-4f16-4aad-b20e-49a82b7d936f.png)","f5122bfe":"public has increased by 15, indicating that Leaderboard Probing was a success!<br>\nThank you for reading!!","dc76ed4d":"Since the loss is clearly smaller at 1527(0.00429461), we know that the number of rows in public is 1527!","160e041e":"## Identify the path contained in public\nThis can be done by using the method explained earlier, replacing 15\/1527 with the effect on the LB when you make a mistake of 1 floor."}}