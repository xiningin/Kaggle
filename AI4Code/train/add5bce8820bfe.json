{"cell_type":{"cae9e6da":"code","435d7b0f":"code","0651c1d6":"code","1184b7c6":"code","a2e7df49":"code","ea25c095":"code","abff3e30":"code","4a3731b8":"code","12d3dd68":"code","1f2b4a53":"code","f0dd55da":"code","7e37eba3":"code","cbeef1af":"code","9342c08f":"code","8b5584d8":"code","cede2133":"code","b128a5a5":"code","e9963062":"code","32ac218f":"code","210221d3":"code","1f7fa3b8":"code","5abf7621":"code","a58784d5":"code","48b5ed01":"code","2d55f193":"code","7a01c9d1":"code","24be2c9e":"code","06f6c3f4":"code","b0181f94":"code","c75f12d8":"code","28ddb5df":"code","ac8321af":"markdown","fee2089c":"markdown","34dc7eae":"markdown","470062db":"markdown","0d01be1a":"markdown","af981f98":"markdown","e897d5f7":"markdown","ef793e56":"markdown","82c0d393":"markdown","365d0874":"markdown","6f503e58":"markdown","9020722f":"markdown","3ecea69e":"markdown","8dd8d35c":"markdown","bcc41a67":"markdown","ef2c0107":"markdown","7e33345b":"markdown","eeee91cc":"markdown","ec0cf8ba":"markdown","222abc73":"markdown","0f60dc2b":"markdown","c5f4c114":"markdown","7a713e90":"markdown","802a0ab0":"markdown","04c49728":"markdown","a8016047":"markdown","ef15564f":"markdown","bfa52f2d":"markdown","70a47e83":"markdown","922f42db":"markdown"},"source":{"cae9e6da":"import os\nimport re\nimport json\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nfrom wordcloud import WordCloud, STOPWORDS\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore')","435d7b0f":"os.listdir('..\/input\/coleridgeinitiative-show-us-the-data')","0651c1d6":"print(\"Files in train directory : \\n\")\nprint(os.listdir('..\/input\/coleridgeinitiative-show-us-the-data\/train')[:5])\nprint(\"\\nFiles in test directory : \\n\")\nprint(os.listdir('..\/input\/coleridgeinitiative-show-us-the-data\/test')[:5])","1184b7c6":"with open('..\/input\/coleridgeinitiative-show-us-the-data\/train\/f8b03c87-9d1a-4f20-b76b-cb6c69d447b2.json') as f:\n    sample = json.load(f)","a2e7df49":"sample[:2]","ea25c095":"for s in sample:\n    print(s['section_title'])","abff3e30":"train = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/train.csv')\ntrain.sample(10)","4a3731b8":"train.columns","12d3dd68":"def basic_eda(df, row_limit=5, list_elements_limit=10):\n    ### rows and columns\n    print('Info : There are {} columns in the dataset'.format(df.shape[1]))\n    print('Info : There are {} rows in the dataset'.format(df.shape[0]))\n    \n    print(\"==================================================\")\n    \n    ## data types\n    print(\"\\nData type information of different columns\")\n    dtypes_df = pd.DataFrame(df.dtypes).reset_index().rename(columns={0:'dtype', 'index':'column_name'})\n    cat_df = dtypes_df[dtypes_df['dtype']=='object']\n    num_df = dtypes_df[dtypes_df['dtype']!='object']\n    print('Info : There are {} categorical columns'.format(len(cat_df)))\n    print('Info : There are {} numerical columns'.format(len(dtypes_df)-len(cat_df)))\n    \n    if list_elements_limit >= len(cat_df):\n        print(\"Categorical columns : \", list(cat_df['column_name']))\n    else:\n        print(\"Categorical columns : \", list(cat_df['column_name'])[:list_elements_limit])\n        \n    if list_elements_limit >= len(num_df):\n        print(\"Numerical columns : \", list(num_df['column_name']))\n    else:\n        print(\"Numerical columns : \", list(num_df['column_name'])[:list_elements_limit])\n    \n    #dtypes_df['dtype'].value_counts().plot.bar()\n    display(dtypes_df.head(row_limit))\n    \n#     print(\"==================================================\")\n#     print(\"\\nDescription of numerical variables\")\n    \n#     #### Describibg numerical columns\n#     desc_df_num = df[list(num_df['column_name'])].describe().T.reset_index().rename(columns={'index':'column_name'})\n#     display(desc_df_num.head(row_limit))\n    \n    print(\"==================================================\")\n    print(\"\\nDescription of categorical variables\")\n    \n    desc_df_cat = df[list(cat_df['column_name'])].describe().T.reset_index().rename(columns={'index':'column_name'})\n    display(desc_df_cat.head(row_limit))\n    \n    return","1f2b4a53":"basic_eda(train)","f0dd55da":"id_df = train[train['Id'] == '170113f9-399c-489e-ab53-2faf5c64c5bc'].drop_duplicates('dataset_title')\nid_df[['Id', 'dataset_title']]","7e37eba3":"pub_df = train[train['pub_title'] == 'Science and Engineering Indicators 2008'].drop_duplicates('dataset_title')\npub_df[['pub_title', 'dataset_title']]","cbeef1af":"print(\"Five such example (pub_title) where case 3.1.3 happens...\\n\")\ni=0\nfor pt in train['pub_title'].unique():\n    pub_df = train[train['pub_title'] == pt].drop_duplicates('Id')\n    if pub_df.shape[0] > 1:\n        print(pt)\n        i = i+1\n    if i==5:\n        break","9342c08f":"pub_df = train[train['pub_title'] == 'Characteristics and Production Costs of U.S. Hog Farms, 2004'].drop_duplicates('Id')\npub_df","8b5584d8":"unique_titles = train['dataset_title'].unique()\ndup_title = []\ncount = []\ndup_list = []\nfor ut in unique_titles:\n    title_df = train[train['dataset_title'] == ut]\n    tdf = title_df[['Id', 'dataset_title', 'dataset_label']].drop_duplicates('dataset_label')\n    if tdf.shape[0] > 1:\n        #print(ut)\n        dup_title.append(ut)\n        count.append(tdf.shape[0])\n        dup_list.append(list(tdf['dataset_label']))\n        \ndup_df = pd.DataFrame({'dataset_title':dup_title, 'label_count':count, 'label_list':dup_list})","cede2133":"dup_df.set_index('dataset_title')['label_count'].sort_values(ascending=False).plot.barh(figsize=(12,18))\nplt.title(\"No of labels that a datset have\")\nplt.xlabel('labels_count')\nplt.show()","b128a5a5":"def get_text(filename, test=False):\n    if test:\n        df = pd.read_json('..\/input\/coleridgeinitiative-show-us-the-data\/test\/{}.json'.format(filename))\n    else:\n        df = pd.read_json('..\/input\/coleridgeinitiative-show-us-the-data\/train\/{}.json'.format(filename))\n    text = \" \".join(list(df['text']))\n    return text","e9963062":"train['text'] = train['Id'].apply(get_text)\ntrain.sample(5)","32ac218f":"words_in_titles = list(train.pub_title.str.split(expand=True).stack())\n\nwordcloud = WordCloud(stopwords = STOPWORDS,\n                      background_color = \"white\",\n                      width = 3000,\n                      height = 2000\n                     ).generate(' '.join(words_in_titles))\nplt.figure(1, figsize = (18, 12))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","210221d3":"text = ' '.join(train['text'].sample(frac=0.3))\nwordcloud = WordCloud(background_color='white', stopwords=STOPWORDS, width=2560, height=1440).generate(text)\n\nbarplot_dim = (15, 15)\nax = plt.subplots(figsize=barplot_dim, facecolor='w')\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.tight_layout(pad=0)\nplt.show()","1f7fa3b8":"# A text cleaning function\ndef clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()","5abf7621":"test_files = os.listdir('..\/input\/coleridgeinitiative-show-us-the-data\/test')\ntest_files","a58784d5":"test = pd.DataFrame({'Id':test_files})\ntest['Id'] = test['Id'].apply(lambda x : x.split('.')[0])\ntest['text'] = test['Id'].apply(get_text, test=True)\ntest","48b5ed01":"is_present = []\nfor exp in train.iterrows():\n    if exp[1]['cleaned_label'] in clean_text(exp[1]['text']):\n        is_present.append(1)\n    else:\n        is_present.append(0)","2d55f193":"train['present'] = is_present\ntrain.head()","7a01c9d1":"acc = (train['present'].sum() \/ len(train))*100\nprint(\"Accuracy on Traininig set : {}%\".format(acc))","24be2c9e":"submission_df = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv')\nids = submission_df['Id']","06f6c3f4":"datasets_titles = [x.lower() for x in set(train['dataset_title'].unique()).union(set(train['dataset_label'].unique()))]\n\nlabels = []\nfor index in submission_df['Id']:\n    publication_text = test[test['Id'] == index].text.str.cat(sep='\\n').lower()\n    #print(publication_text)\n    label = []\n    for dataset_title in datasets_titles:\n        if dataset_title in publication_text:\n            label.append(clean_text(dataset_title))\n    labels.append('|'.join(label))\n\nsubmission_df['PredictionString'] = labels","b0181f94":"submission = pd.DataFrame()\nsubmission['Id'] = ids\nsubmission['PredictionString'] = labels","c75f12d8":"submission","28ddb5df":"submission.to_csv('submission.csv', index=False)","ac8321af":"#### Note -: As we can see this \"170113f9-399c-489e-ab53-2faf5c64c5bc\" Id is mentioning multiple datasets. So, for each id in test we'll need to predict all posible datasets used.","fee2089c":"### 3.1.2. Duplicate pub_title and dataset label","34dc7eae":"## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:180%; text-align:center\">1. Understanding the Comptetion<\/p>\n\n![ci](https:\/\/oerc.osu.edu\/sites\/oerc\/themes\/oerc\/images\/projects\/coleridge.png)\n\n**Background** - The Coleridge Initiative is a not-for-profit organization, originally established at New York University, that is working with governments to ensure that data are more effectively used for public decision-making.","470062db":"### 3.2 Data Preparation\n\nWe'll read the text of a publication from the json file and put it in the train dataframe","0d01be1a":"### 3.2.2 WordCloud of most frequent words in the texts","af981f98":"## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:180%; text-align:center\">2. Understanding the Data<\/p>\n","e897d5f7":"Superb! This hypothesis gives 100% accuracy on training set.\n\n### 4.3 Making submission file","ef793e56":"### 3.2.1 WordCloud of publication titles","82c0d393":"Now that we have the text content of each publication let's do some wordcloud analysis.","365d0874":"## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:180%; text-align:center\">3. EDA and Data Prepataion<\/p>","6f503e58":"### 3.1.3. Multiple publications having same title\n\nThere is NO one to one mapping of id and pub_title. Meaning that there are cases when two different publications (from two different authors) have same title.","9020722f":"We have a train.csv file. We also have train and test folders. Let's look into the folders first then we'll look into files.","3ecea69e":"We have some json files in both the directories. Let's look into the files to find out what are they -","8dd8d35c":"### 4.2 Let's check this hypothesis on training data (To check if it's even worth to use this)","bcc41a67":"Well, these json files are full text version of publication. Let's what are the sections in a paper -","ef2c0107":"> It's also important to understand the evaluation process of this competition because it is little different. Look into this [Evaluation Process\ud83d\udce2(Jaccard,FBeta)](https:\/\/www.kaggle.com\/pashupatigupta\/ci-how-score-is-calculated-jaccard-fbeta) notebook for a detailed explanation of evaluation process.","7e33345b":"#### Columns\n\n- id (publication id) - note that there are multiple rows for some training documents, indicating multiple mentioned datasets\n- pub_title - title of the publication (a small number of publications have the same title)\n- dataset_title - the title of the dataset that is mentioned within the publication\n- dataset_label - a portion of the text that indicates the dataset\n- cleaned_label - the dataset_label, as passed through the clean_text function from the Evaluation page\n\nSo, we have 'id', 'publication_title' and 'cleaned_label' columns. The id column is same as the json filenames. So using this id column we can have any information about the publication.","eeee91cc":"### 3.1.4. Dataset titles and labels\n\nA single dataset can have multiple labels.","ec0cf8ba":"### 4.1 Preparing test set","222abc73":"## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:180%; text-align:center\">4. Baseline Model<\/p>","0f60dc2b":"### Hypothesis building \n\nInstead of directly jumping into models like BERT, XLNet, GPT-3, let's think simple here. In any publication the authors mentions the names of the datasets that are used in their work. So by simple string matching we can find out whether a dataset is mentioned in a publication or not.\n\nSo, instead of inferering from the publication (which datasets are used) we'll be finding out if a particular dataset is used in publication or not. For this we need a list of possible datasets and we can get it from the training set. BUT this isn't what the competition demands. This is just a baseline hypothesis.","c5f4c114":"Let's check the accuracy","7a713e90":"### 3.1.1. Duplicate Id's and dataset labels","802a0ab0":"List of data file provided as input","04c49728":"### Competition Objective\n\nOne liner - We are required to build an algorithm that can find our what are the datasets that a publications uses.\n\nDescription - In this competition, we need to develop an algorithm to automate the discovery of how scientific data are referenced in publications. We have with us the full text of scientific publications from numerous research areas, we'll identify data sets that the publications' authors used in their work.\n\nWe have a labelled dataset (train set) that we'll use to develop our algorithm. The unlabelled dataset (test set) will be used for evaluation of the algorithm. Let's look into the data to understand the data and the comptetion better.\n\nThis type of automation will be very useful in showing what datasets are used in a particular type of publications or the reverse, what are the potential usages of a datset.","a8016047":"### Observations\n\n- 1) There are duplicate id's meaning that there are some pulications that are using mutiple datasets. That's why that id is repeating.\n- 2) Same is the case with pub_title. A single publication is using mutiple datasets.\n- 3) There is NO one to one mapping of id and pub_title. Meaning that there are cases when two different publications (from two different authors) have same title. Well, interesting!!!\n- 4) There 45 dataset titles but 130 dataet labels. Meaning that there are some datasets that has multiple labels. We'll look into how these two are related.","ef15564f":"#### We can see that string matching gives 100% accuracy on train set. On submission as well it will probably give a good score. This model can definetely serve as a baseline.\n\n#### Note - Accuracy isn't the actual evaluation metric. The actual evaluation metric is Jaccard similatity base FBeta(0.5) score. I have prepared this [Notebook](https:\/\/www.kaggle.com\/pashupatigupta\/ci-how-score-is-calculated-jaccard-fbeta) that implements the evaluation metric and it also evaluates the baseline on actual metric.\n\n#### If you found it useful please consider appreciating it by an UPVOTE. Thanks!","bfa52f2d":"Woah! So we have each and every detail of a publication available in a json format. We can use these details to generate some features for model building. This is about the json files.\n\nNow let's look at train.csv file that I believe has the labels information.","70a47e83":"#### Note - As we observed in the above artifact there are publication titles using multiple datasets.","922f42db":"### 3.1 EDA"}}