{"cell_type":{"1323081a":"code","db520c19":"code","0f4705e6":"code","e5e438d6":"code","dabafd80":"code","8822fcbc":"code","bd252a91":"code","71002a4a":"code","b45bf0c2":"code","c5bf88d8":"code","564c6d95":"code","2d7503af":"code","1d228afb":"code","c07e3c14":"code","55421990":"code","c8eb00ad":"code","88c0d81c":"code","3d5c4dee":"code","53cbbdc9":"code","3bfaf793":"code","a30c4f36":"code","845d27f2":"markdown","ae87b5d9":"markdown"},"source":{"1323081a":"%%time\nimport cv2\nfrom PIL import Image\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","db520c19":"img = cv2.imread('..\/input\/d\/rafunlearnhub\/barcode-test\/2upc.jpg')","0f4705e6":"def cont_hi(num_img):\n        #num_img = asarray(img)\n        #num_img.setflags(write=1)\n        for i in range(0 , len(num_img)):\n            for j in range(0, len(num_img[i]) ):\n                #if num_img[i][j][0] <= 200  and num_img[i][j][1] <= 200 and num_img[i][j][2] <= 200:\n                mean1 = np.mean(num_img[i][j])\n                #mean1_lst.append(mean1)\n                if mean1 < 180: #180:\n                    num_img[i][j][0] = mean1\n                    num_img[i][j][1] = mean1\n                    num_img[i][j][2] = mean1\n                else:\n                    num_img[i][j][0] = 255\n                    num_img[i][j][1] = 255\n                    num_img[i][j][2] = 255\n        #img = Image.fromarray(num_img)\n        return num_img","e5e438d6":"%%time\nimg = cont_hi(img)\n#img = defs.img2txt.thresholding(img)\ncv2.imwrite('bar1.jpg',img)\nImage.fromarray(img)","dabafd80":"img = cv2.imread('bar1.jpg')\nh,l,m = np.shape(img)\nh,l,m","8822fcbc":"%%time\narr = []\n#for i in range(0, len(img)):\n#for i in range(round(h\/2), round(h\/2)+1):  # 100th row is selected\nfor i in range(80,81):  # 100th row is selected    \n    for j in range(0, len(img[i])):        # read all columns in 100th row\n        if np.mean(img[i][j]) >= 100:      #\n            arr.append(1)                  # white\n        else:\n            arr.append(0)                  # black\nprint(len(arr))\nprint(arr)","bd252a91":"%%time\ndf = pd.DataFrame(arr, columns=['val'])\ndf = df.groupby([df['val'].ne(df['val'].shift()).cumsum(), 'val']).size()\ndf = df.reset_index(level=0, drop=True)\n#print(df)\ndf = pd.DataFrame(df)\ndf = df.reset_index()\ndf.columns = ['val','count']\ndf","71002a4a":"%%time\n#REMOVE WHITE==============KEEP BLACK=======\ndf0 = df.copy()\nfor i in range(0, len(df0['val']) ):\n    if df0['val'][i] == 1:\n        df0.drop([i], inplace = True)\n\ndf0 = df0.reset_index(level=0, drop=True)\n\n#REMOVE BLACK==============KEEP WHITE========\ndf1 = df.copy()\nfor i in range(0, len(df1['val']) ):\n    if df1['val'][i] == 0:\n        df1.drop([i], inplace = True)\n\ndf1 = df1.reset_index(level=0, drop=True)","b45bf0c2":"df0","c5bf88d8":"df1","564c6d95":"plt.figure(figsize=(13,5))\nplt.plot(df0['count'])\nplt.grid()","2d7503af":"%%time\n#these limits are to be changed as per the graph above.\n#one might also consider resizing the images to a fixed size to normalize to some extent.\narrb = []\nfor i in range(0, len(df0['val'])):\n    \n    if df0['count'][i] <= 12:\n        arrb.append(1)\n        \n    elif df0['count'][i] > 12 and df0['count'][i] <= 20:\n        arrb.append(2)\n        \n    elif df0['count'][i] > 20 and df0['count'][i] <= 25:\n        arrb.append(3)\n        \n    elif df0['count'][i] > 25 and df0['count'][i] <= 50:\n        arrb.append(4)\n\nprint(arrb)","1d228afb":"%%time\nplt.figure(figsize=(13,10))\nplt.plot(df1['count'])\nplt.grid()","c07e3c14":"%%time\narrw = []\nfor i in range(0, len(df1['val'])):\n    \n    if df1['count'][i] <= 10:\n        arrw.append(1)\n        \n    elif df1['count'][i] > 10 and df1['count'][i] <= 20:\n        arrw.append(2)\n        \n    elif df1['count'][i] > 20 and df1['count'][i] <= 30:\n        arrw.append(3)\n        \n    elif df1['count'][i] > 30 and df1['count'][i] <= 120:\n        arrw.append(4)\n         \nprint(arrw)","55421990":"%%time\narr = []\n\nfor i in range(0, len(arrb)):\n    arr.append(arrw[i])\n    arr.append(arrb[i])\narr.append(arrw[len(arrw)-1])\nprint(arr)\nprint(len(arr))","c8eb00ad":"arr = arr[4:-4]\nprint(arr)\nprint(len(arr))","88c0d81c":"arr.pop(24); arr.pop(24); arr.pop(24); arr.pop(24); arr.pop(24); \nprint(arr)\nprint(len(arr))","3d5c4dee":"j=-4\narr1 = []\nwhile j < len(arr)-4:\n    j  = j+4\n    print(str(j) +' '+ str(j+1) +' '+ str(j+2) +' '+ str(j+3))\n    arr1.append( [( str(arr[j]) + str(arr[j+1]) + str(arr[j+2]) + str(arr[j+3]) )] )\nprint(arr1)","53cbbdc9":"code = []\nfor i in range(0, len(arr1)):\n    if arr1[i][0]== '3211':\n        code.append('0')\n    elif arr1[i][0]== '2221':\n        code.append('1')\n    elif arr1[i][0]== '2122':\n        code.append('2')\n    elif arr1[i][0]== '1411':\n        code.append('3')\n    elif arr1[i][0]== '1132':\n        code.append('4')\n    elif arr1[i][0]== '1231':\n        code.append('5')\n    elif arr1[i][0]== '1114':\n        code.append('6')\n    elif arr1[i][0]== '1312':\n        code.append('7')\n    elif arr1[i][0]== '1213':\n        code.append('8')\n    elif arr1[i][0]== '3112':\n        code.append('9')\n    else:\n        code.append('R')\n\ncode = ''.join(code)\nprint('\\nCODE: ',code)","3bfaf793":"plt.figure(figsize=(13,5))\nplt.plot(arr)\nplt.grid()","a30c4f36":"rrr = [1,2,3,4,5]\nrrr.pop(1);rrr.pop(1);rrr.pop(1)\nrrr","845d27f2":"# these limits are to be changed as per the graph above.\n# one might also consider resizing the images to a fixed size to normalize to some extent.\n# the same will be done in later versions.","ae87b5d9":"## FINAL CODE"}}