{"cell_type":{"359ac944":"code","cab38242":"code","1d1ea2d2":"code","b325c58f":"code","cb347619":"code","6ccaa33f":"code","f0775dc1":"code","9e173940":"code","15873866":"code","b6ced98e":"code","edd6eb3b":"code","a3fb4b69":"code","4fed74ad":"code","724b4de1":"code","0aef3cb0":"code","5afdf0b4":"code","b26a41a2":"code","06d5a7db":"code","3820cfe5":"markdown","7a04fe7e":"markdown","b8842cf1":"markdown","099842bb":"markdown","74748d05":"markdown","60cca400":"markdown","2aa74cb5":"markdown","274244c8":"markdown"},"source":{"359ac944":"import pandas as pd\nimport numpy as np\nimport keras\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.callbacks import EarlyStopping \nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score","cab38242":"# Loading Data\ndf = pd.read_csv('..\/input\/housingdata.csv', header = None)\n# Data disposition\ndf.head()","1d1ea2d2":"# Slicing, predictors and predict variable\nX = df.drop(13, axis = 1)\ny = df[13]","b325c58f":"# Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","cb347619":"# Scaling Data for ANN\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","6ccaa33f":"# Number of features to input\nnum_features = len(X_train[1,:])","f0775dc1":"# ANN with Keras\nnp.random.seed(10)\nclassifier = Sequential()\n     # better values with tanh against relu, sigmoid...\nclassifier.add(Dense(13, kernel_initializer = 'uniform', activation = 'tanh', input_dim = num_features)) \nclassifier.add(Dense(1, kernel_initializer = 'uniform'))\nclassifier.compile(optimizer = 'sgd', loss = 'mean_squared_error')        # metrics=['mse','mae']\nearly_stopping_monitor = EarlyStopping(monitor='val_loss', patience=500)  # ignored\nhistory_mse = classifier.fit(X_train, y_train, epochs = 100, callbacks = [early_stopping_monitor], verbose = 0, validation_split = 0.2)\n\nprint('Loss:    ', history_mse.history['loss'][-1], '\\nVal_loss: ', history_mse.history['val_loss'][-1])","9e173940":"# EVALUATE MODEL IN THE TEST SET\nscore_mse_test = classifier.evaluate(X_test, y_test)\nprint('Test Score:', score_mse_test)\n\n# EVALUATE MODEL IN THE TRAIN SET\nscore_mse_train = classifier.evaluate(X_train, y_train)\nprint('Train Score:', score_mse_train)","15873866":"plt.figure(figsize=(15, 6))\nplt.plot(history_mse.history['loss'], lw =3, ls = '--', label = 'Loss')\nplt.plot(history_mse.history['val_loss'], lw =2, ls = '-', label = 'Val Loss')\nplt.xlabel('Epochs', fontsize=15)\nplt.ylabel('Loss', fontsize=15)\nplt.title('MSE')\nplt.legend()","b6ced98e":"#Converting the first line of the dataset\nlinha1 = np.array([0.00632 ,18.0,2.31,0,0.538,6.575,65.2,4.0900,1,296,15.3,396.90,4.98]).reshape(1,-1)\n# Scaling the first line to the same pattern used in the model\nlinha1 = sc_X.transform(linha1)\n# Predicted value by model\ny_pred_mse_1 = classifier.predict(linha1)\nprint('Predicted value: ',y_pred_mse_1)\nprint('Real value: ','24.0')","edd6eb3b":"# Predicting the 15 value at test set\nnewValues = np.array([0.62739, 0.0,8.14,0,0.538,5.834,56.5,4.4986,4,307,21.0,395.62,8.47]).reshape(1, -1)\n# Scaling new values to the same pattern used in the model\nnewValues = sc_X.transform(newValues)\n# Predictied value by model\ny_pred_mse_15 = classifier.predict(newValues)\nprint('Predicted value: ',y_pred_mse_15)\nprint('Real value: ','19.9')","a3fb4b69":"from keras import backend as K\n\ndef root_mean_squared_error(y_true, y_pred):\n        return K.sqrt(K.mean(K.square(y_pred - y_true), axis=-1)) ","4fed74ad":"# ANN with Keras\nnp.random.seed(10)\nclassifier = Sequential()\n     # better values with tanh agains relu, sigmoid...\nclassifier.add(Dense(13, kernel_initializer = 'uniform', activation = 'tanh', input_dim = num_features)) \nclassifier.add(Dense(1, kernel_initializer = 'uniform'))\nclassifier.compile(optimizer = 'sgd', loss = root_mean_squared_error)        # metrics=['mse','mae']\nearly_stopping_monitor = EarlyStopping(monitor='val_loss', patience=500)  # ignored\nhistory = classifier.fit(X_train, y_train, epochs = 100, callbacks = [early_stopping_monitor], verbose = 0, validation_split = 0.2)\n\nprint('Loss:    ', history.history['loss'][-1], '\\nVal_loss: ', history.history['val_loss'][-1])","724b4de1":"# EVALUATE MODEL IN THE TEST SET\nscore_rmse_test = classifier.evaluate(X_test, y_test)\nprint('Test Score:', score_rmse_test)\n\n# EVALUATE MODEL IN THE TRAIN SET\nscore_rmse_train = classifier.evaluate(X_train, y_train)\nprint('Train Score:', score_rmse_train)","0aef3cb0":"plt.figure(figsize=(15, 6))\nplt.plot(history.history['loss'], lw =3, ls = '--', label = 'Loss')\nplt.plot(history.history['val_loss'], lw =2, ls = '-', label = 'Val Loss')\nplt.xlabel('Epochs', fontsize=15)\nplt.ylabel('Loss', fontsize=15)\nplt.title('RMSE')\nplt.legend()","5afdf0b4":"#Converting the first line of the dataset\nlinha1 = np.array([0.00632 ,18.0,2.31,0,0.538,6.575,65.2,4.0900,1,296,15.3,396.90,4.98]).reshape(1,-1)\n# Scaling the first line to the same pattern used in the model\nlinha1 = sc_X.transform(linha1)\n# Predicted value by model\ny_pred_rmse_1 = classifier.predict(linha1)\nprint('Predicted value: ',y_pred_rmse_1)\nprint('Real value: ','24.0')","b26a41a2":"# Predicting the 15 value at test set\nnewValues = np.array([0.62739, 0.0,8.14,0,0.538,5.834,56.5,4.4986,4,307,21.0,395.62,8.47]).reshape(1, -1)\n# Scaling new values to the same pattern used in the model\nnewValues = sc_X.transform(newValues)\n# Predictied value by model\ny_pre_rmse_15 = classifier.predict(newValues)\nprint('Predicted value: ',y_pre_rmse_15)\nprint('Real value: ','19.9')","06d5a7db":"models = pd.DataFrame({\n    'Model': ['Test  Set Score', 'Train Set Score', 'Predict first Line [24.0]', 'Predict Test Set Value [19.9]',\n              'Last Epoch Loss', 'Last Epoch Val Loss'],\n    'MSE': [np.sqrt(score_mse_test), np.sqrt(score_mse_train), y_pred_mse_1[0], y_pred_mse_15[0],\n            np.sqrt(history_mse.history['loss'][-1]), np.sqrt(history_mse.history['val_loss'][-1])],\n    'RMSE': [score_rmse_test, score_rmse_train, y_pred_rmse_1[0], y_pre_rmse_15[0], history.history['loss'][-1],\n             history.history['val_loss'][-1]]\n})\nmodels","3820cfe5":"### Predicting Values to Test, RMSE Model","7a04fe7e":"### Predicting Values to Test, MSE Model","b8842cf1":"RMSE as Loss function, have better results at test_set, a set never saw before by model","099842bb":"# Comparing Results\n### Values scaled to the same 'format' to be compared","74748d05":"## Using RMSE, wich is square of MSE","60cca400":"# Building model","2aa74cb5":"# ANN KERAS\n","274244c8":"## Using MSE"}}