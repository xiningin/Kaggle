{"cell_type":{"9f796df3":"code","1c9aa5b3":"code","7058fd65":"code","dbcac0c1":"code","9f6b2a05":"code","30312fd2":"code","9ad260a7":"code","4a2aa110":"code","14a5f7cb":"code","05bdc9ff":"code","15592ff2":"code","682e41a2":"code","eeaaee97":"code","915fe791":"code","4b0259bf":"code","148509b7":"code","49637f39":"code","498d39b9":"code","c51fc6c5":"code","50145c7b":"code","e6a4bc2a":"code","fa235d10":"code","abc244bc":"code","e4aa8e2a":"code","8c3515d3":"code","ef9544c6":"code","b6bae338":"code","fb899775":"code","74a68f62":"code","bae852ab":"code","c205e2dd":"code","5bf025ce":"code","659652cb":"code","92646a35":"code","fd6f272c":"code","8b492cff":"code","9ef458d1":"code","eef21e21":"code","5e5bc132":"markdown"},"source":{"9f796df3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c9aa5b3":"# \ud544\uc694\ud55c \ub3c4\uad6c\ub4e4(library) \ubd88\ub7ec\uc624\uae30\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nfrom glob import glob\nimport os, random, time, warnings, folium\nimport lightgbm as lgbm\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom catboost import CatBoostRegressor\nfrom datetime import datetime\nfrom folium import Marker, Icon, CircleMarker\nfrom pdpbox import pdp, info_plots\npd.set_option('max_columns', 500, 'max_rows', 500)\n%matplotlib inline","7058fd65":"# \uc704\uc758 \uac01 \ub370\uc774\ud130 \uacbd\ub85c\ub97c \ud1b5\ud574 csv \ud30c\uc77c 3\uac1c\ub97c \ubd88\ub7ec\uc634(\uc77d\uc74c)\ntrain = pd.read_csv('\/kaggle\/input\/dacon-2019-jeju-bus\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/dacon-2019-jeju-bus\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/dacon-2019-jeju-bus\/submission_sample.csv')\nprint(train.shape, test.shape, submission.shape)\ndisplay(train.head(3), test.head(3), submission.head(3))","dbcac0c1":"# train, test\ub294 \uc5b4\ub5bb\uac8c \ubd84\ub9ac\ub410\ub294\uc9c0\n# id\uc5f4\uc740 \ud589 \uad6c\ubd84\uc5d0\ub9cc \uc4f0\uc774\ubbc0\ub85c \ud544\uc694\uc5c6\uc74c\nprint('train_id: ', train['id'].min(),'~', train['id'].max(), '\/', len(train['id']))\nprint('test_id: ', test['id'].min(),'~', test['id'].max(), '\/', len(test['id']))","9f6b2a05":"# train data\uc758 \uac01 \uc5f4 type \uc870\ud68c\ntrain.dtypes","30312fd2":"# date\uc758 data type\uc744 object(\ubb38\uc790)\uc5d0\uc11c \ntrain['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])\ntrain.dtypes.head(3)","9ad260a7":"train['date'].max() - train['date'].min()","4a2aa110":"# train, test\uc758 date \ubc94\uc704 \ud655\uc778\nprint('train_date: ',train['date'].min(),'~',train['date'].max(),'\/',train['date'].max() - train['date'].min())\nprint('test_date: ',test['date'].min(),'~',test['date'].max(),'\/',test['date'].max() - test['date'].min())","14a5f7cb":"train['date'].value_counts().sort_index().plot()","05bdc9ff":"# train, test_date\uc758 \ubd84\ud3ec \ud655\uc778\nplt.figure(figsize=(12,8))\ntrain['date'].value_counts().sort_index().plot(color='b',label='train')\ntest['date'].value_counts().sort_index().plot(color='r',label='test')\nplt.legend()\nplt.xlabel('date')\nplt.ylabel('# of rows')\nplt.title('distribution of dates')","15592ff2":"# set(\uc9d1\ud569) \uc608\uc2dc, list\ub85c \ubcc0\ud658 \uac00\ub2a5, \uc8fc \ubaa9\uc801: \uc911\ubcf5\uac12 \uc81c\uac70, \ud569\uc9d1\ud569, \ucc28\uc9d1\ud569 \ub4f1\na = {'a', 'b', 'c'}\na, type(a)\na.add('d')\na\na.remove('b')\na\na.clear()\na\nb = set('hello')\nb\nlist(b)\nc = [1,1,2,2,2,3]\nlist(set(c))","682e41a2":"train['bus_route_id']","eeaaee97":"# \ubc84\uc2a4\uc815\ub958\uc7a5\uc758 \ucc28\uc774\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ntrain_bus_route_set = set(train['bus_route_id'])\ntest_bus_route_set = set(test['bus_route_id'])\nintersection_bus_route = train_bus_route_set.intersection(test_bus_route_set)\nlen(intersection_bus_route)","915fe791":"# train \uc5d4 \uc788\uace0 test\uc5d4 \uc5c6\ub294 \uacbd\ub85c \uac1c\uc218 - 30\uac1c\nonly_train_route = train_bus_route_set.difference(test_bus_route_set)\nlen(only_train_route)","4b0259bf":"# test \uc5d4 \uc788\uace0 train \uc5c6\ub294 \uacbd\ub85c \uac1c\uc218 - 18\uac1c\nonly_test_route = test_bus_route_set.difference(train_bus_route_set)\nlen(only_test_route)","148509b7":"# test set\uc5d0\ub9cc \uc788\ub294 bus_route \ud655\uc778\ndisplay(test[test['bus_route_id'].isin(only_test_route)].head(3))\n\n# train, test set\uc5d0 \ub3d9\uc2dc\uc5d0 \uc788\ub294 bus_route \ud655\uc778\ndisplay(test[test['bus_route_id'].isin(intersection_bus_route)].head(3))","49637f39":"# \uc81c\uc5b4\ubb38 - \ubc18\ubcf5\ubb38(for) \uc5f0\uc2b5\nfor i in [1,2,3]:\n    print(i)","498d39b9":"for i in range(1,6,2):\n    print(i)","c51fc6c5":"for i in [1,2,3]:\n    for j in ['a','b']:\n        print(str(i) + '_' + j)\n    print('_____')","50145c7b":"# 1\ubd80\ud130 10\uae4c\uc9c0 \ub354\ud558\uae30\nnum = 0\nfor i in range(11):\n#     num = num + i\n    num += i\nnum","e6a4bc2a":"# \ubc18\ubcf5\ubb38\uc744 \uc774\uc6a9\ud574\uc11c list \ub9cc\ub4e4\uae30\n[i*10 for i in range(10) if i >5]","fa235d10":"# \uc81c\uc5b4\ubb38 - \uc870\uac74\ubb38 (if) \uc5f0\uc2b5\n# 1) if - elif - else 3\uc885\uc138\ud2b8 -> if\ub85c \uc2dc\uc791\ud574\uc57c \ud558\uba70, elif, else\ub294 \uc120\ud0dd\na = 33\nb = 200\nif a < b:\n    print('b is bigger than a')","abc244bc":"a = 200\nb = 33\nif a < b:\n    print('b is bigger than a')\nelif a == b:\n    print('a and b are equal')\nelse:\n    print('a is bigger than b')","e4aa8e2a":"# 1~10 \uc911 3\uc758 \ubc30\uc218\ub9cc \ucd94\ub824\ub0b4\uae30\nnum3 = []\nnum = []\nfor i in range(1,11):\n    if i % 3 == 0:\n        num3.append(i)\n    else:\n        num.append(i)\nnum3, num","8c3515d3":"# Dataframe \ud569\uce58\uae30\ud558\uae30 (concat), merge\n# pd.merge(df_left, df_right, how='inner', on=None)\ndf1 = pd.DataFrame({'a':['a0','a1','a2','a3'],\n                   'b':['b0','b1','b2','b3'],\n                   'c':['c0','c1','c2','c3']},\n                  index = [0,1,2,3])\ndf2 = pd.DataFrame({'a':['a2','a3','a4','a5'],\n                   'b':['b2','b3','b4','b5'],\n                   'c':['c2','c3','c4','c5'],\n                   'd':['d2','d3','d4','d5']},\n                   index = [2,3,4,5])\ndisplay(df1, df2)","ef9544c6":"# \ud589 \ubc29\ud5a5 \ud569\uce58\uae30\nconcat_row = pd.concat([df1,df2], ignore_index=True)\nconcat_row","b6bae338":"# \uc5f4 \ubc29\ud5a5 \ud569\uce58\uae30\nconcat_axis = pd.concat([df1,df2], axis=1,join='inner' )\nconcat_axis","fb899775":"train.head()","74a68f62":"test.columns","bae852ab":"# \ub2e4\uc2dc \uc81c\uc8fc\ubc84\uc2a4 \uc2b9\ucc28\uc778\uc6d0 \uc608\uce21 \uc804\ucc98\ub9ac \ub2e8\uacc4\ub85c\n# \uc2b9\ucc28 \uc5f4, \ud558\uc790 \uc5f4 \ubb36\uc5b4\uc11c \uad6c\ubd84\ud558\uae30\nride_col = [col for col in test.columns if '_ride' in col] + ['bus_route_id', 'date']\ntakeoff_col = [col for col in test.columns if '_takeoff' in col] + ['bus_route_id', 'date']\ntakeoff_col","c205e2dd":"# \uc2b9\ud558\ucc28 \uc2dc\uac04\uc744 1\uc2dc\uac04 -> 2\uc2dc\uac04\uc73c\ub85c \uad6c\ubd84\ud558\uae30\ntrain['6~8_ride'] = train['6~7_ride'] + train['7~8_ride']\ntrain['8~10_ride'] = train['8~9_ride'] + train['9~10_ride']\ntrain['10~12_ride'] = train['10~11_ride'] + train['11~12_ride']\n\ntrain['6~8_takeoff'] = train['6~7_takeoff'] + train['7~8_takeoff']\ntrain['8~10_takeoff'] = train['8~9_takeoff'] + train['9~10_takeoff']\ntrain['10~12_takeoff'] = train['10~11_takeoff'] + train['11~12_takeoff']\n\ntest['6~8_ride'] = test['6~7_ride'] + test['7~8_ride']\ntest['8~10_ride'] = test['8~9_ride'] + test['9~10_ride']\ntest['10~12_ride'] = test['10~11_ride'] + test['11~12_ride']\n\ntest['6~8_takeoff'] = test['6~7_takeoff'] + test['7~8_takeoff']\ntest['8~10_takeoff'] = test['8~9_takeoff'] + test['9~10_takeoff']\ntest['10~12_takeoff'] = test['10~11_takeoff'] + test['11~12_takeoff']\n\ntrain.head()","5bf025ce":"# \uba87\uc9f8\uc8fc\uc778\uc9c0, \ubb34\uc2a8 \uc694\uc77c\uc778\uc9c0 \ub098\ud0c0\ub0b4\ub294 \uc5f4 \ucd94\uac00\ntrain['week'] = train['date'].dt.week\ntrain['weekday'] = train['date'].dt.weekday\ntest['week'] = test['date'].dt.week\ntest['weekday'] = test['date'].dt.weekday\ntrain.head()","659652cb":"# \uacb0\uce21\uac12 \ud655\uc778\ud558\uae30(\uc2dc\uac01\ud654)\ntrain.isnull().sum(), test.isnull().sum()","92646a35":"# \uacb0\uce21\uac12 \ud655\uc778\ud558\uae30\nmsno.matrix(train)","fd6f272c":"# target \ubcc0\uc218 \ubd84\ud3ec \ud655\uc778\ud558\uae30\ntarget_col = '18~20_ride'\ntrain[target_col].value_counts()[:10]","8b492cff":"# \ubd84\ud3ec\ub3c4 \uadf8\ub824\ubcf4\uae30\nsns.distplot(train[target_col])","9ef458d1":"# log \ubcc0\ud658 \ud6c4 \ubd84\ud3ec\ub3c4 \uadf8\ub824\ubcf4\uae30\nsns.distplot(np.log1p(train[target_col]))","eef21e21":"# \uc2b9\ucc28\uc778\uc6d0\uc774 0\uc778 \uad6c\uac04\uacfc \uc544\ub2cc \uad6c\uac04\uc758 \ud1b5\uacc4\uce58 \uc870\ud68c","5e5bc132":"### \ub370\uc774\ud130 \uc774\ud574\ud558\uae30"}}