{"cell_type":{"3b4cc23f":"code","3f06c46b":"code","995ad4b4":"code","61b8acff":"code","6b189137":"code","2d1a2d3d":"code","e1bd247a":"code","a029bdb7":"code","e449e941":"code","6aac7ca6":"code","157219bc":"code","f8126836":"code","709deea8":"code","d0d1b65b":"code","9b74c6d0":"code","a9b45434":"code","a39a0bd9":"code","caefcbb9":"code","a4d70a29":"code","b1282064":"code","caa90b36":"code","bdee1220":"code","016e73df":"code","a863f63c":"code","ecef67de":"code","461c385a":"code","680f9c66":"code","431d3da8":"code","857bbefb":"code","08aad67a":"code","6502cb82":"code","234cc8df":"code","1e701506":"code","9ae664e5":"markdown","2162734a":"markdown","c1beba72":"markdown","9c44f521":"markdown","b197ea35":"markdown","759b65d3":"markdown","93dedde6":"markdown","e8ce8689":"markdown","0ef76b60":"markdown","f088d41a":"markdown","d0b71432":"markdown","2bd70add":"markdown","d58f47b4":"markdown","a1daa4e6":"markdown"},"source":{"3b4cc23f":"import os \nimport sys\nimport random\nimport math\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport json\nimport pydicom\nfrom imgaug import augmenters as iaa\nfrom tqdm import tqdm\nimport pandas as pd \nimport glob ","3f06c46b":"DATA_DIR = '\/kaggle\/input'\n\n# Directory to save logs and trained model\nROOT_DIR = '\/kaggle\/working'","995ad4b4":"!git clone https:\/\/www.github.com\/matterport\/Mask_RCNN.git\nos.chdir('Mask_RCNN')\n#!python setup.py -q install","61b8acff":"# Import Mask RCNN\nsys.path.append(os.path.join(ROOT_DIR, 'Mask_RCNN'))  # To find local version of the library\nfrom mrcnn.config import Config\nfrom mrcnn import utils\nimport mrcnn.model as modellib\nfrom mrcnn import visualize\nfrom mrcnn.model import log","6b189137":"train_dicom_dir = os.path.join(DATA_DIR, 'stage_2_train_images')\ntest_dicom_dir = os.path.join(DATA_DIR, 'stage_2_test_images')","2d1a2d3d":"def get_dicom_fps(dicom_dir):\n    dicom_fps = glob.glob(dicom_dir+'\/'+'*.dcm')\n    return list(set(dicom_fps))\n\ndef parse_dataset(dicom_dir, anns): \n    image_fps = get_dicom_fps(dicom_dir)\n    image_annotations = {fp: [] for fp in image_fps}\n    for index, row in anns.iterrows(): \n        fp = os.path.join(dicom_dir, row['patientId']+'.dcm')\n        image_annotations[fp].append(row)\n    return image_fps, image_annotations ","e1bd247a":"# The following parameters have been selected to reduce running time for demonstration purposes \n# These are not optimal \n\nclass DetectorConfig(Config):\n    \"\"\"Configuration for training pneumonia detection on the RSNA pneumonia dataset.\n    Overrides values in the base Config class.\n    \"\"\"\n    \n    # Give the configuration a recognizable name  \n    NAME = 'pneumonia'\n    \n    # Train on 1 GPU and 8 images per GPU. We can put multiple images on each\n    # GPU because the images are small. Batch size is 8 (GPUs * images\/GPU).\n    GPU_COUNT = 1\n    IMAGES_PER_GPU = 8 \n    \n    BACKBONE = 'resnet50'\n    \n    NUM_CLASSES = 2  # background + 1 pneumonia classes\n    \n    IMAGE_MIN_DIM = 256\n    IMAGE_MAX_DIM = 256\n    RPN_ANCHOR_SCALES = (32, 64, 128, 256)\n    TRAIN_ROIS_PER_IMAGE = 32\n    MAX_GT_INSTANCES = 3\n    DETECTION_MAX_INSTANCES = 3\n    DETECTION_MIN_CONFIDENCE = 0.9\n    DETECTION_NMS_THRESHOLD = 0.1\n\n    STEPS_PER_EPOCH = 100\n    \nconfig = DetectorConfig()\nconfig.display()","a029bdb7":"class DetectorDataset(utils.Dataset):\n    \"\"\"Dataset class for training pneumonia detection on the RSNA pneumonia dataset.\n    \"\"\"\n\n    def __init__(self, image_fps, image_annotations, orig_height, orig_width):\n        super().__init__(self)\n        \n        # Add classes\n        self.add_class('pneumonia', 1, 'Lung Opacity')\n   \n        # add images \n        for i, fp in enumerate(image_fps):\n            annotations = image_annotations[fp]\n            self.add_image('pneumonia', image_id=i, path=fp, \n                           annotations=annotations, orig_height=orig_height, orig_width=orig_width)\n            \n    def image_reference(self, image_id):\n        info = self.image_info[image_id]\n        return info['path']\n\n    def load_image(self, image_id):\n        info = self.image_info[image_id]\n        fp = info['path']\n        ds = pydicom.read_file(fp)\n        image = ds.pixel_array\n        # If grayscale. Convert to RGB for consistency.\n        if len(image.shape) != 3 or image.shape[2] != 3:\n            image = np.stack((image,) * 3, -1)\n        return image\n\n    def load_mask(self, image_id):\n        info = self.image_info[image_id]\n        annotations = info['annotations']\n        count = len(annotations)\n        if count == 0:\n            mask = np.zeros((info['orig_height'], info['orig_width'], 1), dtype=np.uint8)\n            class_ids = np.zeros((1,), dtype=np.int32)\n        else:\n            mask = np.zeros((info['orig_height'], info['orig_width'], count), dtype=np.uint8)\n            class_ids = np.zeros((count,), dtype=np.int32)\n            for i, a in enumerate(annotations):\n                if a['Target'] == 1:\n                    x = int(a['x'])\n                    y = int(a['y'])\n                    w = int(a['width'])\n                    h = int(a['height'])\n                    mask_instance = mask[:, :, i].copy()\n                    cv2.rectangle(mask_instance, (x, y), (x+w, y+h), 255, -1)\n                    mask[:, :, i] = mask_instance\n                    class_ids[i] = 1\n        return mask.astype(np.bool), class_ids.astype(np.int32)","e449e941":"# training dataset\nanns = pd.read_csv(os.path.join(DATA_DIR, 'stage_2_train_labels.csv'))\nanns.head()","6aac7ca6":"image_fps, image_annotations = parse_dataset(train_dicom_dir, anns=anns)","157219bc":"ds = pydicom.read_file(image_fps[0]) # read dicom image from filepath \nimage = ds.pixel_array # get image array","f8126836":"# show dicom fields \nds","709deea8":"# Original DICOM image size: 1024 x 1024\nORIG_SIZE = 1024","d0d1b65b":"######################################################################\n# Modify this line to use more or fewer images for training\/validation. \n# To use all images, do: image_fps_list = list(image_fps)\nimage_fps_list = list(image_fps[:1000]) \n#####################################################################\n\n# split dataset into training vs. validation dataset \n# split ratio is set to 0.9 vs. 0.1 (train vs. validation, respectively)\nsorted(image_fps_list)\nrandom.seed(42)\nrandom.shuffle(image_fps_list)\n\nvalidation_split = 0.1\nsplit_index = int((1 - validation_split) * len(image_fps_list))\n\nimage_fps_train = image_fps_list[:split_index]\nimage_fps_val = image_fps_list[split_index:]\n\nprint(len(image_fps_train), len(image_fps_val))","9b74c6d0":"# prepare the training dataset\ndataset_train = DetectorDataset(image_fps_train, image_annotations, ORIG_SIZE, ORIG_SIZE)\ndataset_train.prepare()","a9b45434":"# Show annotation(s) for a DICOM image \ntest_fp = random.choice(image_fps_train)\nimage_annotations[test_fp]","a39a0bd9":"# prepare the validation dataset\ndataset_val = DetectorDataset(image_fps_val, image_annotations, ORIG_SIZE, ORIG_SIZE)\ndataset_val.prepare()","caefcbb9":"# Load and display random samples and their bounding boxes\n# Suggestion: Run this a few times to see different examples. \n\nimage_id = random.choice(dataset_train.image_ids)\nimage_fp = dataset_train.image_reference(image_id)\nimage = dataset_train.load_image(image_id)\nmask, class_ids = dataset_train.load_mask(image_id)\n\nprint(image.shape)\n\nplt.figure(figsize=(10, 10))\nplt.subplot(1, 2, 1)\nplt.imshow(image[:, :, 0], cmap='gray')\nplt.axis('off')\n\nplt.subplot(1, 2, 2)\nmasked = np.zeros(image.shape[:2])\nfor i in range(mask.shape[2]):\n    masked += image[:, :, 0] * mask[:, :, i]\nplt.imshow(masked, cmap='gray')\nplt.axis('off')\n\nprint(image_fp)\nprint(class_ids)","a4d70a29":"model = modellib.MaskRCNN(mode='training', config=config, model_dir=ROOT_DIR)","b1282064":"# Image augmentation \naugmentation = iaa.SomeOf((0, 1), [\n    iaa.Fliplr(0.5),\n    iaa.Affine(\n        scale={\"x\": (0.8, 1.2), \"y\": (0.8, 1.2)},\n        translate_percent={\"x\": (-0.2, 0.2), \"y\": (-0.2, 0.2)},\n        rotate=(-25, 25),\n        shear=(-8, 8)\n    ),\n    iaa.Multiply((0.9, 1.1))\n])","caa90b36":"import tensorflow as tf\ntf.test.is_gpu_available()","bdee1220":"NUM_EPOCHS = 1\n\n# Train Mask-RCNN Model \nimport warnings \nwarnings.filterwarnings(\"ignore\")\nmodel.train(dataset_train, dataset_val, \n            learning_rate=config.LEARNING_RATE, \n            epochs=NUM_EPOCHS, \n            layers='all',\n            augmentation=augmentation)","016e73df":"# select trained model \ndir_names = next(os.walk(model.model_dir))[1]\nkey = config.NAME.lower()\ndir_names = filter(lambda f: f.startswith(key), dir_names)\ndir_names = sorted(dir_names)\n\nif not dir_names:\n    import errno\n    raise FileNotFoundError(\n        errno.ENOENT,\n        \"Could not find model directory under {}\".format(self.model_dir))\n    \nfps = []\n# Pick last directory\nfor d in dir_names: \n    dir_name = os.path.join(model.model_dir, d)\n    # Find the last checkpoint\n    checkpoints = next(os.walk(dir_name))[2]\n    checkpoints = filter(lambda f: f.startswith(\"mask_rcnn\"), checkpoints)\n    checkpoints = sorted(checkpoints)\n    if not checkpoints:\n        print('No weight files in {}'.format(dir_name))\n    else: \n      \n      checkpoint = os.path.join(dir_name, checkpoints[-1])\n      fps.append(checkpoint)\n\nmodel_path = sorted(fps)[-1]\nprint('Found model {}'.format(model_path))","a863f63c":"class InferenceConfig(DetectorConfig):\n    GPU_COUNT = 1\n    IMAGES_PER_GPU = 1\n\ninference_config = InferenceConfig()\n\n# Recreate the model in inference mode\nmodel = modellib.MaskRCNN(mode='inference', \n                          config=inference_config,\n                          model_dir=ROOT_DIR)\n\n# Load trained weights (fill in path to trained weights here)\nassert model_path != \"\", \"Provide path to trained weights\"\nprint(\"Loading weights from \", model_path)\nmodel.load_weights(model_path, by_name=True)","ecef67de":"# set color for class\ndef get_colors_for_class_ids(class_ids):\n    colors = []\n    for class_id in class_ids:\n        if class_id == 1:\n            colors.append((.941, .204, .204))\n    return colors","461c385a":"# Show few example of ground truth vs. predictions on the validation dataset \ndataset = dataset_val\nfig = plt.figure(figsize=(10, 30))\n\nfor i in range(4):\n\n    image_id = random.choice(dataset.image_ids)\n    \n    original_image, image_meta, gt_class_id, gt_bbox, gt_mask =\\\n        modellib.load_image_gt(dataset_val, inference_config, \n                               image_id, use_mini_mask=False)\n    \n    print(original_image.shape)\n    plt.subplot(6, 2, 2*i + 1)\n    visualize.display_instances(original_image, gt_bbox, gt_mask, gt_class_id, \n                                dataset.class_names,\n                                colors=get_colors_for_class_ids(gt_class_id), ax=fig.axes[-1])\n    \n    plt.subplot(6, 2, 2*i + 2)\n    results = model.detect([original_image]) #, verbose=1)\n    r = results[0]\n    visualize.display_instances(original_image, r['rois'], r['masks'], r['class_ids'], \n                                dataset.class_names, r['scores'], \n                                colors=get_colors_for_class_ids(r['class_ids']), ax=fig.axes[-1])","680f9c66":"# Get filenames of test dataset DICOM images\ntest_image_fps = get_dicom_fps(test_dicom_dir)","431d3da8":"# Make predictions on test images, write out sample submission \ndef predict(image_fps, filepath='submission.csv', min_conf=0.95): \n    \n    # assume square image\n    resize_factor = ORIG_SIZE \/ config.IMAGE_SHAPE[0]\n    #resize_factor = ORIG_SIZE \n    with open(filepath, 'w') as file:\n      for image_id in tqdm(image_fps): \n        ds = pydicom.read_file(image_id)\n        image = ds.pixel_array\n        # If grayscale. Convert to RGB for consistency.\n        if len(image.shape) != 3 or image.shape[2] != 3:\n            image = np.stack((image,) * 3, -1) \n        image, window, scale, padding, crop = utils.resize_image(\n            image,\n            min_dim=config.IMAGE_MIN_DIM,\n            min_scale=config.IMAGE_MIN_SCALE,\n            max_dim=config.IMAGE_MAX_DIM,\n            mode=config.IMAGE_RESIZE_MODE)\n            \n        patient_id = os.path.splitext(os.path.basename(image_id))[0]\n\n        results = model.detect([image])\n        r = results[0]\n\n        out_str = \"\"\n        out_str += patient_id \n        out_str += \",\"\n        assert( len(r['rois']) == len(r['class_ids']) == len(r['scores']) )\n        if len(r['rois']) == 0: \n            pass\n        else: \n            num_instances = len(r['rois'])\n  \n            for i in range(num_instances): \n                if r['scores'][i] > min_conf: \n                    out_str += ' '\n                    out_str += str(round(r['scores'][i], 2))\n                    out_str += ' '\n\n                    # x1, y1, width, height \n                    x1 = r['rois'][i][1]\n                    y1 = r['rois'][i][0]\n                    width = r['rois'][i][3] - x1 \n                    height = r['rois'][i][2] - y1 \n                    bboxes_str = \"{} {} {} {}\".format(x1*resize_factor, y1*resize_factor, \\\n                                                       width*resize_factor, height*resize_factor)   \n#                     bboxes_str = \"{} {} {} {}\".format(x1, y1, \\\n#                                                       width, height)\n                    out_str += bboxes_str\n\n        file.write(out_str+\"\\n\")","857bbefb":"# predict only the first 50 entries\nsubmission_fp = os.path.join(ROOT_DIR, 'submission.csv')\nprint(submission_fp)\npredict(test_image_fps, filepath=submission_fp)","08aad67a":"output = pd.read_csv(submission_fp, names=['patientId', 'PredictionString'])\noutput.head(100)","6502cb82":"## show submission.csv content\n#os.chdir(ROOT_DIR)\n#!cat submission.csv","234cc8df":"# show a few test image detection example\ndef visualize(): \n    image_id = random.choice(test_image_fps)\n    ds = pydicom.read_file(image_id)\n    \n    # original image \n    image = ds.pixel_array\n    \n    # assume square image \n    resize_factor = ORIG_SIZE \/ config.IMAGE_SHAPE[0]\n    \n    # If grayscale. Convert to RGB for consistency.\n    if len(image.shape) != 3 or image.shape[2] != 3:\n        image = np.stack((image,) * 3, -1) \n    resized_image, window, scale, padding, crop = utils.resize_image(\n        image,\n        min_dim=config.IMAGE_MIN_DIM,\n        min_scale=config.IMAGE_MIN_SCALE,\n        max_dim=config.IMAGE_MAX_DIM,\n        mode=config.IMAGE_RESIZE_MODE)\n\n    patient_id = os.path.splitext(os.path.basename(image_id))[0]\n    print(patient_id)\n\n    results = model.detect([resized_image])\n    r = results[0]\n    for bbox in r['rois']: \n        print(bbox)\n        x1 = int(bbox[1] * resize_factor)\n        y1 = int(bbox[0] * resize_factor)\n        x2 = int(bbox[3] * resize_factor)\n        y2 = int(bbox[2]  * resize_factor)\n        cv2.rectangle(image, (x1,y1), (x2,y2), (77, 255, 9), 3, 1)\n        width = x2 - x1 \n        height = y2 - y1 \n        print(\"x {} y {} h {} w {}\".format(x1, y1, width, height))\n    plt.figure() \n    plt.imshow(image, cmap=plt.cm.gist_gray)\n\nvisualize()","1e701506":"# remove files to allow committing (hit files limit otherwise)\n#!rm -rf \/kaggle\/working\/Mask_RCNN","9ae664e5":"### Image Augmentation. Try finetuning some variables to custom values","2162734a":"### Display a random image with bounding boxes","c1beba72":"### Install Matterport's Mask-RCNN model from github.\nSee the [Matterport's implementation of Mask-RCNN](https:\/\/github.com\/matterport\/Mask_RCNN).","9c44f521":"### Final steps - Create the submission file","b197ea35":"### How does the predicted box compared to the expected value? Let's use the validation dataset to check. \n\nNote that we trained only one epoch for **demonstration purposes ONLY**. You might be able to improve performance running more epochs. ","759b65d3":"### First: Install Kaggle API for download competition data.","93dedde6":"### Let's look at a sample annotation. We see a bounding box with (x, y) of the the top left corner as well as the width and height.","e8ce8689":"### Create and prepare the training dataset using the DetectorDataset class.","0ef76b60":"### Split the data into training and validation datasets\n**Note: We have only used only a portion of the images for demonstration purposes. See comments below.**\n \n - To use all the images do: image_fps_list = list(image_fps)\n - Or change the number of images from 100 to a custom number","f088d41a":"**Mask-RCNN Sample Starter Model for the RSNA Pneumonia Detection Challenge**\n\n[MD.ai](https:\/\/www.md.ai). The dataset for this challenge, created on the MD.ai platform in collaboration with the Radiological Society of North America (RSNA), the Society of Thoracic Radiology (STR), the US National Institutes of Health (NIH), and Kaggle.\nThis notebook covers the basics of parsing the competition dataset, training using a detector basd on the [Mask-RCNN algorithm](https:\/\/arxiv.org\/abs\/1703.06870) for object detection and instance segmentation.    \n**Note that the Mask-RCNN detector configuration parameters have been selected to reduce training time for demonstration purposes, they are not optimal.\n**\n\nThis is based on our deep learning for medical imaging lessons: \n\n- Lesson 1. Classification of chest vs. adominal X-rays using TensorFlow\/Keras [Github](https:\/\/github.com\/mdai\/ml-lessons\/blob\/master\/lesson1-xray-images-classification.ipynb) [Annotator](https:\/\/public.md.ai\/annotator\/project\/PVq9raBJ)\n- Lesson 2. Lung X-Rays Semantic Segmentation using UNets. [Github](https:\/\/github.com\/mdai\/ml-lessons\/blob\/master\/lesson2-lung-xrays-segmentation.ipynb)\n[Annotator](https:\/\/public.md.ai\/annotator\/project\/aGq4k6NW\/workspace) \n- Lesson 3. RSNA Pneumonia detection using Kaggle data format [Github](https:\/\/github.com\/mdai\/ml-lessons\/blob\/master\/lesson3-rsna-pneumonia-detection-kaggle.ipynb) [Annotator](https:\/\/public.md.ai\/annotator\/project\/LxR6zdR2\/workspace) \n- Lesson 3. RSNA Pneumonia detection using MD.ai python client library [Github](https:\/\/github.com\/mdai\/ml-lessons\/blob\/master\/lesson3-rsna-pneumonia-detection-mdai-client-lib.ipynb) [Annotator](https:\/\/public.md.ai\/annotator\/project\/LxR6zdR2\/workspace) \n\n*Copyright 2018 MD.ai, Inc.   \nLicensed under the Apache License, Version 2.0*","d0b71432":"### Examine the annotation data, parse the dataset, and view dicom fields","2bd70add":"### Some setup functions and classes for Mask-RCNN\n\n- dicom_fps is a list of the dicom image path and filenames \n- image_annotions is a dictionary of the annotations keyed by the filenames\n- parsing the dataset returns a list of the image filenames and the annotations dictionary","d58f47b4":"###  MD.ai Annotator \n\nAdditionally, If you are interested in augmenting the existing annotations, you can use the MD.ai annotator to view DICOM images, and create annotatios to be exported.  \nMD.ai annotator project URL for the Kaggle dataset: https:\/\/public.md.ai\/annotator\/project\/LxR6zdR2\/workspace\n\n**Annotator features**\n- The annotator can be used to view DICOM images and create image and exam level annotations.\n- You can apply the annotator to filter by label, adjudicate annotations, and assign annotation tasks to your team.\n- Notebooks can be built directly within the annotator for rapid model development.\n- The data wrangling is abstracted away by the interface and by our MD.ai library.\n- Simplifies image annotation in order to widen the participation in the futrue of medical image deep learning.\n\nThe annotator allows you to create initial annotations, build and run models, modify\/finetune the annotations based on predicted values, and repeat.  \nThe MD.ai python client library implements functions to easily download images and annotations and to prepare the datasets used to train the model for classification. See the following example notebook for parsing annotations and training using MD.ai annotator: \nhttps:\/\/github.com\/mdai\/ml-lessons\/blob\/master\/lesson3-rsna-pneumonia-detection-mdai-client-lib.ipynb  \n- MD.ai URL: https:\/\/www.md.ai  \n- MD.ai documentation URL: https:\/\/docs.md.ai\/","a1daa4e6":"### Now it's time to train the model. Note that training even a basic model can take a few hours. \n\nNote: the following model is for demonstration purpose only. We have limited the training to one epoch, and have set nominal values for the Detector Configuration to reduce run-time. \n\n- dataset_train and dataset_val are derived from DetectorDataset \n- DetectorDataset loads images from image filenames and  masks from the annotation data\n- model is Mask-RCNN"}}