{"cell_type":{"510ca7d8":"code","66781ad9":"code","73e282a1":"code","c5b875cf":"code","b4f8970f":"code","9cae8077":"code","4737e796":"code","4f519446":"code","28806c62":"code","c8f84543":"code","e006493f":"code","43e8f1e7":"code","ea55bfe3":"code","865efa18":"code","2830d309":"code","43f06189":"code","c3118e55":"code","f2d3692e":"code","73ce1d86":"code","f6fbbc3a":"code","8bc1b6d4":"code","189dc826":"code","7eecf753":"code","456ee4c9":"code","c7d2ed11":"code","fe71d176":"code","7bcdd9f6":"code","e2533166":"code","352a4fb2":"code","ddcb8244":"markdown","709caebf":"markdown","e09ea614":"markdown","d93f3d25":"markdown","aa0575cf":"markdown","02b8cdab":"markdown","6c2285ec":"markdown","8ed55c51":"markdown","7ac40223":"markdown","d73ba08d":"markdown","d26128e6":"markdown","866682c3":"markdown","c55a5f85":"markdown","c72e4451":"markdown","e80dfd46":"markdown","a75bc08b":"markdown","8eeee8ea":"markdown"},"source":{"510ca7d8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","66781ad9":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","73e282a1":"df = pd.read_csv('\/kaggle\/input\/drugs-a-b-c-x-y-for-decision-trees\/drug200.csv')\ndf.head()","c5b875cf":"df","b4f8970f":"df['Drug'].unique()","9cae8077":"df.info()","4737e796":"plt.figure(figsize=(20,10))\nplt.title('Count of Drug')\nsns.countplot(data=df,x='Drug');","4f519446":"plt.figure(figsize=(20,10))\nplt.title('Histogram of Age')\nsns.histplot(data=df,x='Age',bins=30, kde=True);","28806c62":"plt.figure(figsize=(20,10))\nplt.title('Count of Sex')\nsns.countplot(data=df,x='Sex', hue='Drug');","c8f84543":"plt.figure(figsize=(20,10))\nplt.title('Count of BP')\nsns.countplot(data=df,x='BP', hue='Drug');","e006493f":"plt.figure(figsize=(20,10))\nplt.title('Count of Cholesterol')\nsns.countplot(data=df,x='Cholesterol', hue='Drug');","43e8f1e7":"plt.figure(figsize=(20,10))\nplt.title('Plot of Age vs Potassium vs Drugs')\nsns.scatterplot(data=df,x='Age', y='Na_to_K', hue='Drug',s=100);","ea55bfe3":"X = df.drop('Drug', axis=1)\ny = df['Drug']","865efa18":"X = pd.get_dummies(X, drop_first= True)","2830d309":"X","43f06189":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","c3118e55":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","f2d3692e":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","73ce1d86":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier","f6fbbc3a":"def fit_and_score(models, X_train, X_test, y_train, y_test):\n    np.random.seed(42)\n    \n    model_scores = {}\n    \n    for name, model in models.items():\n        model.fit(X_train,y_train)\n        model_scores[name] = model.score(X_test,y_test)\n\n    model_scores = pd.DataFrame(model_scores, index=['Score']).transpose()\n    model_scores = model_scores.sort_values('Score')\n        \n    return model_scores","8bc1b6d4":"models = {'LogisticRegression': LogisticRegression(max_iter=10000),\n          'KNeighborsClassifier': KNeighborsClassifier(),\n          'SVC': SVC(),\n          'DecisionTreeClassifier': DecisionTreeClassifier(),\n          'RandomForestClassifier': RandomForestClassifier(),\n          'AdaBoostClassifier': AdaBoostClassifier(),\n          'GradientBoostingClassifier': GradientBoostingClassifier(),\n          'XGBClassifier': XGBClassifier(),\n          'XGBRFClassifier': XGBRFClassifier()}","189dc826":"baseline_model_scores = fit_and_score(models, X_train, X_test, y_train, y_test)","7eecf753":"baseline_model_scores.sort_values('Score')","456ee4c9":"plt.figure(figsize=(20,10))\nsns.barplot(data=baseline_model_scores.sort_values('Score').T)\nplt.title('Baseline Model Precision Score')\nplt.xticks(rotation=90);","c7d2ed11":"model = DecisionTreeClassifier()\nmodel.fit(X_train,y_train)\ny_preds = model.predict(X_test)","fe71d176":"y_preds","7bcdd9f6":"from sklearn.metrics import classification_report, plot_confusion_matrix, plot_roc_curve ","e2533166":"print(classification_report(y_test,y_preds))","352a4fb2":"plot_confusion_matrix(model, X_test, y_test)","ddcb8244":"Going to take the following approach:\n\n1. Problem definition\n2. Data\n3. Evaluation\n4. Features\n5. Modelling\n6. Model Evaluation","709caebf":"# 2. Data\n\nData set from: https:\/\/www.kaggle.com\/pablomgomez21\/drugs-a-b-c-x-y-for-decision-trees\n\nImagine that you are a medical researcher compiling data for a study. You have collected data about a set of patients, all of whom suffered from the same illness. During their course of treatment, each patient responded to one of 5 medications, Drug A, Drug B, Drug c, Drug x and y.\n\nPart of your job is to build a model to find out which drug might be appropriate for a future patient with the same illness. The features of this dataset are Age, Sex, Blood Pressure, and the Cholesterol of the patients, and the target is the drug that each patient responded to.\n\nIt is a sample of multiclass classifier, and you can use the training part of the dataset to build a decision tree, and then use it to predict the class of a unknown patient, or to prescribe a drug to a new patient.\n\nDATA Source: IBM","e09ea614":"# Prediction of Drugs needed\n\nThis notebook is a work flow for various Python-based machine learning model for predicting what drugs a person who need","d93f3d25":"## Data Exporation","aa0575cf":"## Classification Report","02b8cdab":"## Confusion Matrix","6c2285ec":"Data set is in-balanced","8ed55c51":"Seem like the baseline model is performing at 100% accuracy. for this models, since it s Decision Tree Pratice, we will bulid the model using a DecisionTreeClassifier\n\n1. SVC \t1.000\n2. DecisionTreeClassifier \t1.000\n3. RandomForestClassifier \t1.000","7ac40223":"# 3. Evaluation\n\nIt will be done with the Classification Metrics.","d73ba08d":"# 1. Problem Definition\n\nHow we can use various python based Machine Learning Model to and the given parameters to predict what drug the person needs?\n","d26128e6":"# 5. Modelling","866682c3":"## Model imports","c55a5f85":"# 4. Features\n\n## Inputs \/ features\n1. Age - Age of patient\n2. Sex - Sex of the patient\n3. BP - Blood Pressure\n4. Cholesterol - Cholesterol level\n5. Na_to_KSodium - Potassium \n\n## Output \/ label\n6. Drug - Drug that worked with that patient\n","c72e4451":"# 6. Model Evaluting","e80dfd46":"## Baseline Modelling","a75bc08b":"## Standard Imports","8eeee8ea":"Model is performing at 100% Accuracy!"}}