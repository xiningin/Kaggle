{"cell_type":{"cefc9a71":"code","9196a67e":"code","ac23d126":"code","5f744887":"code","b372a7d3":"code","fc78f5ee":"code","ce66c5ee":"code","d988dc01":"code","80c84f9e":"code","d1b1fe33":"code","68299a13":"code","b7ec4674":"code","4d89c29f":"code","58c32ad6":"code","a998c5d8":"code","dadfa46b":"code","bba1f2dd":"code","ed695432":"code","af911b19":"markdown","bf45dd8c":"markdown","e00d7c53":"markdown","2f52f19a":"markdown","f54ec223":"markdown","04904fda":"markdown","b2fac58e":"markdown"},"source":{"cefc9a71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport seaborn as sns\n# Any results you write to the current directory are saved as output.\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# We dont Probably need the Gridlines. Do we? If yes comment this line\nsns.set(style=\"ticks\")\n\nflatui = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"]\nflatui = sns.color_palette(flatui)\n","9196a67e":"# https:\/\/towardsdatascience.com\/the-search-for-categorical-correlation-a1cf7f1888c9\nimport scipy.stats as ss\nfrom collections import Counter\nimport math \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom scipy import stats\nimport numpy as np","ac23d126":"player_df = pd.read_csv(\"..\/input\/data.csv\")","5f744887":"numcols = ['Overall', 'Crossing','Finishing',  'ShortPassing',  'Dribbling','LongPassing', 'BallControl', 'Acceleration','SprintSpeed', 'Agility',  'Stamina','Volleys','FKAccuracy','Reactions','Balance','ShotPower','Strength','LongShots','Aggression','Interceptions']\ncatcols = ['Preferred Foot','Position','Body Type','Nationality','Weak Foot']","b372a7d3":"player_df = player_df[numcols+catcols]","fc78f5ee":"traindf = pd.concat([player_df[numcols], pd.get_dummies(player_df[catcols])],axis=1)\nfeatures = traindf.columns\n\ntraindf = traindf.dropna()","ce66c5ee":"traindf = pd.DataFrame(traindf,columns=features)","d988dc01":"y = traindf['Overall']>=80\ny=y.apply(lambda x : 1 if x else 0).values\n\nX = traindf.copy()\ndel X['Overall']","80c84f9e":"X.head()","d1b1fe33":"len(X.columns)","68299a13":"from sklearn.ensemble import RandomForestClassifier\nmy_model = RandomForestClassifier(n_estimators=100,\n                                  random_state=0).fit(X, y)","b7ec4674":"from eli5.sklearn import PermutationImportance\nperm = PermutationImportance(my_model,n_iter=2).fit(X, y)","4d89c29f":"import eli5\neli5.show_weights(perm, feature_names = X.columns.tolist())","58c32ad6":"import numpy as np\n\nfrom lightgbm import LGBMClassifier\n\nlgbc=LGBMClassifier(n_estimators=500, learning_rate=0.05, num_leaves=32, colsample_bytree=0.2,\n            reg_alpha=3, reg_lambda=1, min_split_gain=0.01, min_child_weight=40)\n\nlgbc.fit(X,y)","a998c5d8":"from sklearn.metrics import accuracy_score\n#define a score function. In this case I use accuracy\ndef score(X, y):\n    y_pred = lgbc.predict(X)\n    return accuracy_score(y, y_pred)","dadfa46b":"from eli5.permutation_importance import get_score_importances\n# This function takes only numpy arrays as inputs\nbase_score, score_decreases = get_score_importances(score, np.array(X), y)\nfeature_importances = np.mean(score_decreases, axis=0)","bba1f2dd":"feature_importance_dict = {}\nfor i, feature_name in enumerate(X.columns):\n    feature_importance_dict[feature_name]=feature_importances[i]","ed695432":"dict(sorted(feature_importance_dict.items(), key=lambda x: x[1], reverse=True)[:5])","af911b19":"![](https:\/\/cdn-images-1.medium.com\/max\/2400\/1*Feid5O1I9KethU8WX45CTg.png)","bf45dd8c":"# Permutation Importance\n\n","e00d7c53":"We can now create a wrapper for our score function to calculate permutation importance for any model,","2f52f19a":"We first create a black box model. It could be any model -from Logistic regression to Neural nets ","f54ec223":"# Black Box Non-scikit models","04904fda":"This Kernel is an extension for one of my blogs on Feature selection. \n\nDo check it out: ","b2fac58e":"## Reading the Data and Preprocessing"}}