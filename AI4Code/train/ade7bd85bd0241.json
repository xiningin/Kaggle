{"cell_type":{"b4a909f3":"code","4fa685cb":"code","0856657d":"code","ab1494c3":"code","98a9e37a":"code","46fcd468":"code","c16b7204":"code","71f39640":"code","1e7030ac":"code","80d221ba":"code","0d6e2496":"code","a66ea6ac":"code","fea79f27":"code","2d558b1f":"code","9d17b172":"code","022a98c9":"code","bc413e80":"code","c7f2f0df":"code","b30837f4":"code","2c0042f1":"code","4955a0cf":"code","3ac9f19b":"code","562c0b44":"code","1f87c380":"code","3343ee06":"code","01bf05d2":"code","f5d2432d":"code","a8feec1f":"code","e6c308b1":"code","4a0e41cc":"code","1af9c39a":"code","68bc656b":"code","5692cbc6":"code","17f1e78f":"code","a9ed0369":"code","49f1f194":"code","c691fa5b":"markdown","8ee42fca":"markdown","b42e085c":"markdown"},"source":{"b4a909f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fa685cb":"# Reading our data\ndf = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")","0856657d":"df.head()","ab1494c3":"df.shape","98a9e37a":"df.info()","46fcd468":"df.isnull().sum()","c16b7204":"#Checking for unique values\ndf.nunique()","71f39640":"import seaborn as sns\nimport matplotlib.pyplot as plt","1e7030ac":"# Helps to visualize missing values in each columns\nimport missingno as msno","80d221ba":"# Showing NaN values by using heatmap\nmsno.heatmap(df)","0d6e2496":"#There is only seven NaN values in rating, so I'll just put values.\ndf[df['rating'].isna()]","a66ea6ac":"df.isnull().sum()","fea79f27":"changing_nan = {\n    67: 'TV-PG',\n    2359: 'TV-14',\n    3660: 'TV-MA',\n    3736: 'TV-MA',\n    3737: 'NR',\n    3738: 'TV-MA',\n    4323: 'TV-MA '\n}\n\nfor id, rate in changing_nan.items():\n    df.iloc[id, 6] = rate\n    \ndf.isnull().sum()","2d558b1f":"#Now we will be dropping Null values from Cast!\ndf = df[df['cast'].notna()]\ndf['cast'].isna().sum()","9d17b172":"import collections","022a98c9":"#Now in country column, ill be replacing null value with the ost common country name which exist in our dataset!\ncollections.Counter(df['country']).most_common(1)","bc413e80":"#We can see that United States has maximum number of records!\ndf['country'] = df['country'].fillna('United States')\ndf['country'].isna().sum()","c7f2f0df":"df.isnull().sum()","b30837f4":"df.head()","2c0042f1":"df.shape","4955a0cf":"import pandas as pd\n!pip install AutoViz\nfrom autoviz.AutoViz_Class import AutoViz_Class","3ac9f19b":"pip install xlrd","562c0b44":"from autoviz.AutoViz_Class import AutoViz_Class","1f87c380":"#EDA using Autoviz\nautoviz = AutoViz_Class().AutoViz(\"..\/input\/netflix-shows\/netflix_titles.csv\")","3343ee06":"#Which are the top oldest movies on Nextflix!??\nold = df.sort_values(\"release_year\", ascending = True)\nold = old[old['duration'] != \"\"]\nold = old[old['type'] !=\"TV Show\"]\nold[['title', \"release_year\",\"country\",\"duration\"]][:15]","01bf05d2":"#Which are the top Newest movies on Nextflix!??\nold = df.sort_values(\"release_year\", ascending = False)\nold = old[old['duration'] != \"\"]\nold = old[old['type'] !=\"TV Show\"]\nold[['title', \"release_year\",\"country\",\"duration\"]][:15]","f5d2432d":"import plotly.express as px","a8feec1f":"#Country wise representation of all Movies!\ncountry  = df['country'].value_counts()\ncountry = country[:15,]\nfig = px.bar(x=country.index, y=country.values, color=country.values,\n             hover_data=[country.index, country.values],labels={'country':'Frequency'}, height=400)\nfig.show()","e6c308b1":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfv = TfidfVectorizer(min_df = 3,max_features = None,analyzer = 'word',token_pattern = 'r\\w{1,}', ngram_range = (1,3), stop_words = 'english')","4a0e41cc":"df.head()","1af9c39a":"df['combined'] = df['description']+df['cast']+df['director']\ndf.head(5)","68bc656b":"df['combined'] = df['combined'].fillna(\"\")","5692cbc6":"tfv_matrix = tfv.fit_transform(df['combined'])\nfrom sklearn.metrics.pairwise import sigmoid_kernel\nsig = sigmoid_kernel(tfv_matrix,tfv_matrix)\nsig[0]\nindices = pd.Series(df.index,index = df['title']).drop_duplicates()\nindices","17f1e78f":"def recommend(title,sig=sig):\n    idx = indices[title]\n    sig_scores = list(enumerate(sig[idx]))\n    sig_scores = sorted(sig_scores,key = lambda x:x[1], reverse = True)\n    sig_scores = sig_scores[1:11]\n    movies_indices = [i[0] for i in sig_scores]\n    return df['title'].iloc[movies_indices]","a9ed0369":"recommend(\"Payday\")","49f1f194":"recommend('Inside Man: Most Wanted')","c691fa5b":"## Data Cleaning:","8ee42fca":"## Recommender System:","b42e085c":"## Visualizaing our data!"}}