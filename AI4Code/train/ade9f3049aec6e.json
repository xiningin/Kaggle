{"cell_type":{"18803300":"code","c30c6540":"code","d977df7b":"code","07d36b53":"code","d7a55e8a":"code","f4c70be5":"code","4a32b753":"code","038a2f08":"code","b6236dee":"code","e86926ee":"code","626ef248":"code","f842935f":"code","d05853dd":"code","e2efd683":"code","4889f6dc":"code","503449f3":"code","6011c754":"code","68907121":"code","a874c944":"code","028fd243":"code","5d3a4ae1":"code","87696c4e":"code","bfd80955":"code","707f8f28":"code","5e4f76e6":"code","4aba94f5":"code","2a0258a5":"code","9f1fedcc":"code","f045b091":"code","0e16e437":"code","e4d5ea14":"code","36d56e9d":"code","6243957e":"code","93bc69e7":"code","59c07baa":"code","1263b9f7":"code","b498b14f":"code","5ef28680":"code","fd304bc5":"code","cde8d9f2":"code","26c90471":"code","f9ed484d":"code","8fa6b994":"code","dda640ee":"code","e79c01bf":"code","fef8243d":"code","96e030f0":"code","e2857373":"code","a8874866":"code","104f40b0":"markdown","24b8fda6":"markdown","866c97db":"markdown","5c4cacac":"markdown","0ddbeddd":"markdown","67e433bc":"markdown","cea4f82a":"markdown","6d545484":"markdown","78147e5d":"markdown","64f09253":"markdown","5b9f6aa2":"markdown","4ea90335":"markdown","03e9500c":"markdown","2c69ef6d":"markdown","28ea9a7a":"markdown","3d9ce10d":"markdown","9b8e8fe1":"markdown","096ed4c2":"markdown","25e2f5c4":"markdown","89608b26":"markdown","0d1e624b":"markdown","521ba325":"markdown","fa02f1a1":"markdown","b005756a":"markdown","7480536d":"markdown","959883e3":"markdown","b57933cc":"markdown","dfa4aa7b":"markdown","03bca7fc":"markdown","e398adfb":"markdown","967a6490":"markdown","83af8ad3":"markdown","14d1de2e":"markdown","bab77d7d":"markdown","290f755a":"markdown","6c2f1786":"markdown","3aa1b123":"markdown","57c26cea":"markdown","f911eb5b":"markdown","5cee0f3b":"markdown","629d4a67":"markdown","4a2ce019":"markdown","7241f218":"markdown","8360c3b4":"markdown","9b387950":"markdown","caae8871":"markdown"},"source":{"18803300":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pylab as plt\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10, 6\n%matplotlib inline\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\n\nfrom datetime import datetime\n\nimport warnings\nwarnings.filterwarnings('ignore')","c30c6540":"PATH = '..\/input\/'","d977df7b":"filename = 'AirPassengers.csv'","07d36b53":"data = pd.read_csv(PATH + filename)\ndata.head()","d7a55e8a":"data.tail()","f4c70be5":"data.describe()","4a32b753":"data.dtypes","038a2f08":"data['Month'] = pd.to_datetime(data['Month'])\ndata.dtypes","b6236dee":"indexedData = data.set_index('Month')\nindexedData.head()","e86926ee":"plt.plot(indexedData, color='blue')\nplt.xlabel('Date')\nplt.ylabel('Number of passengers')","626ef248":"four_months_moving_average = indexedData.rolling(window=4).mean()\nplt.plot(indexedData, color='blue', label='Original')\nplt.plot(four_months_moving_average, color='red', label='Rolling Mean')\nplt.legend(loc='best')\nplt.title('4 Months Moving Average')","f842935f":"six_months_moving_average = indexedData.rolling(window=6).mean()\nplt.plot(indexedData, color='blue', label='Original')\nplt.plot(six_months_moving_average, color='red', label='Rolling Mean')\nplt.legend(loc='best')\nplt.title('6 Months Moving Average')","d05853dd":"eight_months_moving_average = indexedData.rolling(window=8).mean()\nplt.plot(indexedData, color='blue', label='Original')\nplt.plot(eight_months_moving_average, color='red', label='Rolling Mean')\nplt.legend(loc='best')\nplt.title('8 Months Moving Average')","e2efd683":"twelve_months_moving_average = indexedData.rolling(window=12).mean()\nplt.plot(indexedData, color='blue', label='Original')\nplt.plot(twelve_months_moving_average, color='red', label='Rolling Mean')\nplt.legend(loc='best')\nplt.title('12 Months Moving Average')","4889f6dc":"rolmean = indexedData.rolling(window=12).mean()","503449f3":"plt.plot(rolmean, 'blue')\nplt.title('Mean')","6011c754":"rolstd = indexedData.rolling(window=12).std()","68907121":"plt.plot(rolstd, 'blue')\nplt.title('Standard Deviation')","a874c944":"plt.plot(indexedData, color='blue', label='Original')\nplt.plot(rolmean, color='red', label='Rolling Mean')\nplt.plot(rolstd, color='black', label='Rolling Std')\n\nplt.legend(loc='best')\nplt.title('Rolling Mean and Standard deviation\\n')","028fd243":"dftest = adfuller(indexedData['#Passengers'], autolag='AIC')","5d3a4ae1":"dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', 'No. of Lags used', 'Number of observations used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)' %key] = value","87696c4e":"dfoutput","bfd80955":"def test_stationary(timeseries):\n    \n    # Rolling statistics\n    movingAverage = timeseries.rolling(window=12).mean()\n    movingSTD = timeseries.rolling(window=12).std()\n    \n    # Plot rolling statistics\n    plt.plot(timeseries, color='blue', label='Original')\n    plt.plot(movingAverage, color='red', label='Rolling Mean')\n    plt.plot(movingSTD, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation\\n')\n    plt.show(block=False)\n    \n    # Dickey Fuller test\n    print('Results of Dickey Fuller Test:\\n')\n    dftest = adfuller(timeseries['#Passengers'], autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', 'No. of Lags used', 'Number of observations used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)' %key] = value\n    print(dfoutput)","707f8f28":"test_stationary(indexedData)","5e4f76e6":"indexedData_logScale= np.log(indexedData)","4aba94f5":"plt.plot(indexedData_logScale, 'blue')","2a0258a5":"movingAverage = indexedData_logScale.rolling(window=12).mean()\nmovingSTD = indexedData_logScale.rolling(window=12).std()","9f1fedcc":"plt.plot(indexedData_logScale, color='blue')\nplt.plot(movingAverage, color='red')","f045b091":"test_stationary(indexedData_logScale)","0e16e437":"dataLogScaleMinusMovingAverage = indexedData_logScale - movingAverage\ndataLogScaleMinusMovingAverage.dropna(inplace=True)\ndataLogScaleMinusMovingAverage.head()","e4d5ea14":"test_stationary(dataLogScaleMinusMovingAverage)","36d56e9d":"exponentialDecayWeightedAverage = indexedData_logScale.ewm(halflife=12, min_periods=0, adjust=True).mean()\nplt.plot(indexedData_logScale, 'blue')\nplt.plot(exponentialDecayWeightedAverage, 'red')","6243957e":"dataLogScaleMinusMovingExponentialDecayAverage = indexedData_logScale - exponentialDecayWeightedAverage\ntest_stationary(dataLogScaleMinusMovingExponentialDecayAverage)","93bc69e7":"dataLogDiffShifting = indexedData_logScale - indexedData_logScale.shift()\nplt.plot(dataLogDiffShifting, color='blue')","59c07baa":"dataLogDiffShifting.dropna(inplace=True)","1263b9f7":"test_stationary(dataLogDiffShifting)","b498b14f":"decomposition = seasonal_decompose(indexedData_logScale)","5ef28680":"# Just for reference\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid","fd304bc5":"fig = decomposition.plot()\nfig.set_figwidth(12)\nfig.set_figheight(8)\nplt.suptitle('Decomposition of multiplicative time series')","cde8d9f2":"decomposedLogData = residual\ndecomposedLogData.dropna(inplace=True)\ntest_stationary(decomposedLogData)","26c90471":"fig, axes = plt.subplots(1, 2, sharey=False, sharex=False)\nfig.set_figwidth(12)\nfig.set_figheight(4)\nplot_acf(dataLogDiffShifting, lags=20, ax=axes[0], alpha=0.5)\nplot_pacf(dataLogDiffShifting, lags=20, ax=axes[1], alpha=0.5)\nplt.tight_layout()","f9ed484d":"model = ARIMA(indexedData_logScale, order=(2,1,2))\nresults_ARIMA = model.fit(disp=-1)\nplt.plot(dataLogDiffShifting, color='blue')\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %4f'% sum((results_ARIMA.fittedvalues - dataLogDiffShifting['#Passengers'])**2))\nprint('Plotting ARIMA model')","8fa6b994":"model = ARIMA(indexedData_logScale, order=(2,1,0))\nresults_AR = model.fit()\nplt.plot(dataLogDiffShifting)\nplt.plot(results_AR.fittedvalues, color='red')\nplt.title('RSS: %4f'% sum((results_AR.fittedvalues - dataLogDiffShifting['#Passengers'])**2))\nprint('Plotting ARIMA model')","dda640ee":"model = ARIMA(indexedData_logScale, order=(0,1,2))\nresults_MA = model.fit()\nplt.plot(dataLogDiffShifting)\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('RSS: %4f'% sum((results_MA.fittedvalues - dataLogDiffShifting['#Passengers'])**2))\nprint('Plotting ARIMA model')","e79c01bf":"predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\npredictions_ARIMA_diff.head()","fef8243d":"plt.plot(predictions_ARIMA_diff)","96e030f0":"predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\npredictions_ARIMA_diff_cumsum.head()","e2857373":"predictions_ARIMA_log = pd.Series(indexedData_logScale['#Passengers'].ix[0], index=indexedData_logScale.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value=0)\npredictions_ARIMA_log.head()","a8874866":"predictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(indexedData)\nplt.plot(predictions_ARIMA)","104f40b0":"### Plot indexed data (Date vs Number of passengers)","24b8fda6":"## Rolling statistics - A visual test\n- From the above observations, we can chose 's' as 12. (s=12)","866c97db":"- As we see above plot, the data is not stationary. The trend is increasing. The mean is not constant.\n- So, our first goal is to make the time series into stationary.","5c4cacac":"### Another transformation.","0ddbeddd":"### Path to the data","67e433bc":"### References:\n1. Time series Analysis by Box and Jenkins - Textbook.\n2. Analytics Vidya - Time series forecasting.","cea4f82a":"### 12-Months Moving Average","6d545484":"### Filename","78147e5d":"## Dickey Fuller test\n-  Let's run the Dicky Fuller Test on the timeseries and verify the null hypothesis that the TS is non-stationary.","64f09253":"- As p-value is less, null hypothesis is rejected. So, it is stationary.","5b9f6aa2":"- p-value is high. It should be very less. We fail to reject the null hypothesis as p-value is high. So, the time series is non-stationary.\n- If p-value is less, then we can say that the time series is stationary.","4ea90335":"### Another transformation","03e9500c":"The Dickey-Fuller test statistic is significantly lower than the 1% critical value. So this time series is very close to stationary.","2c69ef6d":"### Another way of making the time series stationary is by differencing.\n- Let's difference the log transformed data.","28ea9a7a":"- As we compare the above models, the model with parameters (2,1,2) has less RSS score.","3d9ce10d":"### Convert column 'Month' as index","9b8e8fe1":"### ACF and PACF plots\n- While fitting an arima model, we need to find correct 'p', 'd' and 'q'.\n- We find 'd' by differencing the data number of times till it becomes stationary.\n- ACF and PACF plots are very useful in determining the values of p and q.","096ed4c2":"### Read data","25e2f5c4":"### Data types","89608b26":"- As p-value is less, null hypothesis is rejected. So, it is stationary.","0d1e624b":"- As we can see, mean and standard deviation are not stationary. So, the time seires is not stationary.","521ba325":"### Back to original scale\n- The way to convert the differencing to log scale is to add these differences consecutively to the base number.","fa02f1a1":"- The time series is not stationary. We can tell just by seeing the above graph. The mean is not constant.","b005756a":"## Function to perform both the tests\n- Let's write a function to perform both the tests for us at a time.","7480536d":"# <center> Time series anlysis on Air passengers data - ARIMA algorithm<\/center>","959883e3":"- As we observe the above four moving averages, the moving average with window '12' is smooth compared to others. So, we can confirm that the seasonality(s) is 12.","b57933cc":"- As we see, the model is not too bad. It's okay. Try with different parameters and different transformations to build a better model.\n- We can apply SARIMAX(which considers seasonality into account - P, D, Q) to get more accurate results.","dfa4aa7b":"### 4- Months Moving Average","03bca7fc":"### There are two tests to check whether a time series is stationary or not.\n- Rolling statistics (Visual test)\n- Dickey Fuller test","e398adfb":"- The lag value where the PACF graph crosses the upper confidence interval for the first time. If you notice closely, in this case p=2.\n- The lag value where the ACF graph crosses the upper confidence interval for the first time. If you notice closely, in this case q=2.","967a6490":"- Null hypothesis is rejected. Therefore, the time series is stationary now after differencing once.","83af8ad3":"- Trend remains same. The values of the y-axis got changed.","14d1de2e":"### Describe data","bab77d7d":"### 6-Months Moving Average","290f755a":"### ARIMA model with (0,1,2)\n- p = 0, d = 1, q = 2","6c2f1786":"### Convert type of column 'Month' from 'object' to 'datetime'","3aa1b123":"### ARIMA model with (2,1,0)\n- p = 2, d = 1, q = 0","57c26cea":"### Estimating trend\n- Apply log transform on the indexed_data.","f911eb5b":"## Components of time series","5cee0f3b":"- Next step is to find seasonality (s).\n- Let's plot Moving average for 4, 6, 8 and 12 months.","629d4a67":"### 8-Months Moving Average","4a2ce019":"### What is stationarity?\n- A time series is said to be stationary if its statistical properties such as mean, variance remain constant over time.\n- The basic assumption before applying stochastic models is that the time series should be stationary.","7241f218":"### Plot rolling statistics","8360c3b4":"- As the data is at monthly level (12), we used window as 12. So, we get 'NaN' for the first 11 months.","9b387950":"### Let's fit ARIMA model with (2,1,2)\n- p = 2, d = 1, q = 2","caae8871":"Don't forget to Upvote the kernel if you find it useful."}}