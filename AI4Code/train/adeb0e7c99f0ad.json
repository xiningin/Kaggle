{"cell_type":{"0d0bd00f":"code","b890c544":"code","13e8885f":"code","9c420928":"code","8b805da0":"code","9faa6cba":"code","d1138711":"code","b4117db1":"code","fb938388":"code","6074f3bd":"code","d8e409b0":"code","05c2aabb":"code","814e72bf":"code","4bb5fd26":"code","df1899c4":"code","72b56a71":"code","50e771aa":"code","7d18697f":"code","6e4b56e6":"code","88659f9f":"code","f7c0c1f9":"code","dd77e6de":"code","9503db2d":"code","36de166d":"code","a528bab3":"code","f1910af1":"markdown"},"source":{"0d0bd00f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b890c544":"import pandas as pd\nd = {'tax' : pd.Series([9.00,9.00,9.00,9.00,8.00,10.00,8.00,8.00,8.00,7.00,8.00,\n                        8.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,8.00,9.00,\n                        9.00,9.00,9.00,8.00,8.00,8.00,9.00,7.00,7.00,8.00,8.00,8.00,\n                        8.00,5.00,5.00,5.00,7.00,7.00,7.00,7.00,7.00,6.00,9.00,7.00,7.00]), \n      'income' : pd.Series([3571,4092,3865,4870,4399,5342,5319,5126,4447,4512,4391,5126,4817,\n                         4207,4332,4318,4206,3718,4716,4341,4593,4983,4897,4258,4574,3721,\n                         3448,3846,4188,3601,3640,3333,3063,3357,3528,3802,4045,3897,3635,\n                         4345,4449,3656,4300,3745,5215,4476,4296,5002]),\n      'Highways':pd.Series([1976,1250,1586,2351,431,1333,11868,2138,8577,8507,5939,14186,6930,6580,\n                    8159,10340,8508,4725,5915,6010,7834,602,2449,4686,2619,4746,5399,9061,5975\n                    ,4650,6905,6594,6524,4121,3495,7834,17782,6385,3274,3905,4639,3985,3635,\n                    2611,2302,3942,4083,9794]),\n     'driver':pd.Series([0.5250,0.5720,0.5800,0.5290,0.5440,0.5710,0.4510,0.5530,0.5290,0.5520,\n                   0.5300,0.5250,0.5740,0.5450,0.6080,0.5860,0.5720,0.5400,0.7240,0.6770,\n                   0.6630,0.6020,0.5110,0.5170,0.5510,0.5440,0.5480,0.5790,0.5630,0.4930,\n                   0.5180,0.5130,0.5780,0.5470,0.4870,0.6290,0.5660,0.5860,0.6630,0.6720,\n                   0.6260,0.5630,0.6030,0.5080,0.6720,0.5710,0.6230,0.5930]),\n    'Consumption':pd.Series([541,524,561,414,410,457,344,467,464,498,580,471,525,508,566,635,603,714,\n                  865,640,649,540,464,547,460,566,577,631,574,534,571,554,577,628,487,644,\n                  640,704,648,968,587,699,632,591,782,510,610,524])}","13e8885f":"df=pd.DataFrame(d)","9c420928":"from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nX=df.drop(\"Consumption\",axis=1)\ny=df[\"Consumption\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state= 50)\n","8b805da0":"X_train.shape","9faa6cba":"y_train.shape","d1138711":"X_test.shape","b4117db1":"y_test.shape","fb938388":"training = df.copy()\ntraining.shape","6074f3bd":"import numpy as np\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nmodel=lm.fit(X_train,y_train)","d8e409b0":"model.intercept_","05c2aabb":"model.coef_","814e72bf":"for i in range(4):\n    print(model.coef_[i])","4bb5fd26":"Dummy_Parameters=[[1],[3],[4],[0]]\nDummy_Parameters=pd.DataFrame(Dummy_Parameters).T","df1899c4":"## Because of 4 parameters \nDummy_Parameters","72b56a71":"model.predict(Dummy_Parameters)","50e771aa":"df['Consumption']","7d18697f":"rmse=np.sqrt(mean_squared_error(y_train,model.predict(X_train)))\nrmse","6e4b56e6":"rmse=np.sqrt(mean_squared_error(y_test,model.predict(X_test)))\nrmse","88659f9f":"model.score(X_train,y_train)","f7c0c1f9":"np.sqrt(-cross_val_score(model,X_test,y_test,cv=10,scoring=\"neg_mean_squared_error\")).mean()","dd77e6de":"for i in range(101):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state= i)\n    a=np.sqrt(-cross_val_score(model,X_test,y_test,cv=10,scoring=\"neg_mean_squared_error\")).mean()\n    b=np.sqrt(mean_squared_error(y_test,model.predict(X_test)))\n    if(abs(a-b)<1):\n        print(abs(a-b))\n        print(\"RandomState: \"+\"{}\".format(i))","9503db2d":"## 18 is chosen\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state= 18)","36de166d":"rmse=np.sqrt(mean_squared_error(y_test,model.predict(X_test)))\nrmse ## The value we have","a528bab3":"np.sqrt(-cross_val_score(model,X_test,y_test,cv=10,scoring=\"neg_mean_squared_error\")).mean() ## Best value","f1910af1":"I got this dataset from https:\/\/people.sc.fsu.edu\/~jburkardt\/datasets\/regression\/x15.txt and\n\n* Variables means:\n* tax-> Petrol tax\n* income-> Average income\n* Highways-> Paved Highways\n* driver-> Proportion of population with driver's licenses\n* Consumption-> Consumption of petrol (millions of gallons)"}}