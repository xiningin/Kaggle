{"cell_type":{"5a162989":"code","587898bd":"code","0ca5a374":"code","f85b3004":"code","868f97a2":"code","d5287be5":"code","a6f5ec94":"code","38124376":"code","62c95681":"code","4961b07f":"code","a614784b":"code","6594956a":"code","9e17fb1f":"code","d26879e6":"code","8e3f3eb3":"code","7d57ddd0":"code","885a2729":"code","7323d4dd":"code","0e1d95ca":"code","4c518555":"code","3978fb78":"code","73555868":"code","e5182331":"code","f6a40b07":"code","6d438569":"code","b2a445f9":"code","08e8a5fa":"code","281acc38":"code","3d9b390d":"code","0514c32b":"code","ba7be932":"code","f1e7cae6":"code","382f9010":"code","8afbb406":"code","4f7f7f6c":"code","9b71332d":"markdown","02253793":"markdown","d7343da7":"markdown","969dbaf3":"markdown","672821d1":"markdown"},"source":{"5a162989":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","587898bd":"df_train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","0ca5a374":"print(len(df_train.columns))\nprint(len(df_test.columns))","f85b3004":"navalues= df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([navalues, percent], axis=1, keys=['navalues_train', 'Percent'])\nmissing_data.head(20)","868f97a2":"#dropping values of train\ndf_train=df_train.drop(missing_data[missing_data['navalues_train']>1].index,1)\ndf_train = df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)\nprint(df_train.isnull().sum().max())\n","d5287be5":"df_train.head(5)","a6f5ec94":"df_train1=df_train[['MSSubClass','OverallQual','LotArea','OverallCond','YearBuilt','TotalBsmtSF','TotRmsAbvGrd','YrSold','SalePrice']]","38124376":"corrmat = df_train1.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(df_train1[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","62c95681":"train=df_train1[['OverallQual','LotArea','YearBuilt','TotalBsmtSF','TotRmsAbvGrd','SalePrice']]\n","4961b07f":"X = train.iloc[:, :-1].values\ny = train.iloc[:, -1].values","a614784b":"testfeat=df_test[['OverallQual','LotArea','YearBuilt','TotalBsmtSF','TotRmsAbvGrd']]\ntestfeat.isnull().sum().sum()","6594956a":"navalues= testfeat.isnull().sum().sort_values(ascending=False)\nprint(navalues)","9e17fb1f":"testfeat['TotalBsmtSF'].fillna((testfeat['TotalBsmtSF'].mean()), inplace=True)\ntestfeat.isnull().sum().sum()","d26879e6":"Xtestfeat=testfeat.iloc[:, :].values","8e3f3eb3":"y=y.reshape(len(y),1)","7d57ddd0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.2,random_state=1)","885a2729":"from sklearn.linear_model import LinearRegression\nlm= LinearRegression()\nlm.fit(X_train,y_train)","7323d4dd":"ypred=lm.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((ypred,y_test),1))","0e1d95ca":"from sklearn.metrics import r2_score\nr2_score(y_test, ypred)","4c518555":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, ypred))\nprint('MSE:', metrics.mean_squared_error(y_test, ypred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, ypred)))","3978fb78":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.2,random_state=1)","73555868":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\ny_train = sc_y.fit_transform(y_train)","e5182331":"from sklearn.svm import SVR\nSVregressor = SVR(kernel = 'rbf')\nSVregressor.fit(X_train, y_train)","f6a40b07":"y_predSVM =sc_y.inverse_transform(SVregressor.predict(sc_X.transform(X_test)))\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_predSVM.reshape(len(y_predSVM),1), y_test.reshape(len(y_test),1)),1))","6d438569":"from sklearn.metrics import r2_score\nr2_score(y_test, y_predSVM)","b2a445f9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","08e8a5fa":"from sklearn.tree import DecisionTreeRegressor\nDTregressor = DecisionTreeRegressor(random_state = 1)\nDTregressor.fit(X_train, y_train)","281acc38":"y_predDT = DTregressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_predDT.reshape(len(y_predDT),1), y_test.reshape(len(y_test),1)),1))","3d9b390d":"from sklearn.metrics import r2_score\nr2_score(y_test, y_predDT)","0514c32b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","ba7be932":"from sklearn.ensemble import RandomForestRegressor\nRFregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nRFregressor.fit(X_train, y_train)","f1e7cae6":"y_predRF = RFregressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_predRF.reshape(len(y_predRF),1), y_test.reshape(len(y_test),1)),1))","382f9010":"from sklearn.metrics import r2_score\nr2_score(y_test, y_predRF)","8afbb406":"testpredSVM=sc_y.inverse_transform(SVregressor.predict(sc_X.transform(Xtestfeat)))\ntestpredSVM","4f7f7f6c":"testpred=pd.DataFrame(testpredSVM)\nsub_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndatasets=pd.concat([sub_df['Id'],testpred],axis=1)\ndatasets.columns=['Id','SalePrice']\ndatasets.to_csv('sample_submission.csv',index=False)","9b71332d":"# Support Vector Regression","02253793":"# Linear Regression","d7343da7":"# Random Forest","969dbaf3":"# Since SVR has the best R2 Score","672821d1":"# Decision Tree Regression"}}